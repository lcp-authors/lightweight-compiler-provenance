
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_read_product_definition>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #24
       c:	str	r0, [fp, #-8]
      10:	ldr	r0, [fp, #-8]
      14:	ldr	r0, [r0, #24]
      18:	cmp	r0, #0
      1c:	bne	24 <coda_read_product_definition+0x24>
      20:	b	44 <coda_read_product_definition+0x44>
      24:	movw	r0, #0
      28:	movt	r0, #0
      2c:	movw	r1, #0
      30:	movt	r1, #0
      34:	movw	r2, #4269	; 0x10ad
      38:	movw	r3, #0
      3c:	movt	r3, #0
      40:	bl	0 <__assert_fail>
      44:	ldr	r0, [fp, #-8]
      48:	ldr	r0, [r0, #44]	; 0x2c
      4c:	ldr	r0, [r0, #20]
      50:	str	r0, [sp, #12]
      54:	ldr	r0, [sp, #12]
      58:	ldr	r0, [r0, #8]
      5c:	movw	r1, #0
      60:	movt	r1, #0
      64:	bl	0 <coda_za_open>
      68:	str	r0, [sp, #8]
      6c:	ldr	r0, [sp, #8]
      70:	movw	r1, #0
      74:	cmp	r0, r1
      78:	bne	88 <coda_read_product_definition+0x88>
      7c:	mvn	r0, #0
      80:	str	r0, [fp, #-4]
      84:	b	e0 <coda_read_product_definition+0xe0>
      88:	ldr	r0, [sp, #8]
      8c:	ldr	r1, [fp, #-8]
      90:	ldr	r2, [r1, #8]
      94:	ldr	r3, [sp, #12]
      98:	ldr	r1, [fp, #-8]
      9c:	movw	ip, #2
      a0:	str	r1, [sp, #4]
      a4:	mov	r1, ip
      a8:	ldr	ip, [sp, #4]
      ac:	str	ip, [sp]
      b0:	bl	14c <parse_entry>
      b4:	cmp	r0, #0
      b8:	beq	d0 <coda_read_product_definition+0xd0>
      bc:	ldr	r0, [sp, #8]
      c0:	bl	0 <coda_za_close>
      c4:	mvn	r0, #0
      c8:	str	r0, [fp, #-4]
      cc:	b	e0 <coda_read_product_definition+0xe0>
      d0:	ldr	r0, [sp, #8]
      d4:	bl	0 <coda_za_close>
      d8:	movw	r0, #0
      dc:	str	r0, [fp, #-4]
      e0:	ldr	r0, [fp, #-4]
      e4:	mov	sp, fp
      e8:	pop	{fp, pc}

000000ec <handle_ziparchive_error>:
      ec:	sub	sp, sp, #12
      f0:	push	{fp, lr}
      f4:	mov	fp, sp
      f8:	sub	sp, sp, #12
      fc:	str	r3, [fp, #16]
     100:	str	r2, [fp, #12]
     104:	str	r1, [fp, #8]
     108:	str	r0, [fp, #-4]
     10c:	movw	r1, #0
     110:	movt	r1, #0
     114:	movw	r0, #65136	; 0xfe70
     118:	movt	r0, #65535	; 0xffff
     11c:	bl	0 <coda_set_error>
     120:	add	r0, fp, #8
     124:	str	r0, [sp, #4]
     128:	ldr	r0, [fp, #-4]
     12c:	ldr	r1, [sp, #4]
     130:	bl	0 <coda_add_error_message_vargs>
     134:	add	r0, sp, #4
     138:	str	r0, [sp]
     13c:	mov	sp, fp
     140:	pop	{fp, lr}
     144:	add	sp, sp, #12
     148:	bx	lr

0000014c <parse_entry>:
     14c:	push	{fp, lr}
     150:	mov	fp, sp
     154:	sub	sp, sp, #192	; 0xc0
     158:	ldr	ip, [fp, #8]
     15c:	str	r0, [fp, #-8]
     160:	str	r1, [fp, #-12]
     164:	str	r2, [fp, #-16]
     168:	str	r3, [fp, #-20]	; 0xffffffec
     16c:	mov	r0, #0
     170:	str	r0, [fp, #-76]	; 0xffffffb4
     174:	ldr	r0, [fp, #-12]
     178:	cmp	r0, #0
     17c:	str	ip, [sp, #96]	; 0x60
     180:	str	r0, [sp, #92]	; 0x5c
     184:	beq	1ac <parse_entry+0x60>
     188:	b	18c <parse_entry+0x40>
     18c:	ldr	r0, [sp, #92]	; 0x5c
     190:	cmp	r0, #1
     194:	beq	1ec <parse_entry+0xa0>
     198:	b	19c <parse_entry+0x50>
     19c:	ldr	r0, [sp, #92]	; 0x5c
     1a0:	cmp	r0, #2
     1a4:	beq	29c <parse_entry+0x150>
     1a8:	b	348 <parse_entry+0x1fc>
     1ac:	movw	r0, #0
     1b0:	movt	r0, #0
     1b4:	bl	0 <strdup>
     1b8:	str	r0, [fp, #-76]	; 0xffffffb4
     1bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
     1c0:	movw	lr, #0
     1c4:	cmp	r0, lr
     1c8:	bne	1e8 <parse_entry+0x9c>
     1cc:	mvn	r0, #0
     1d0:	movw	r1, #0
     1d4:	movt	r1, #0
     1d8:	movw	r2, #0
     1dc:	movt	r2, #0
     1e0:	movw	r3, #4097	; 0x1001
     1e4:	bl	0 <coda_set_error>
     1e8:	b	348 <parse_entry+0x1fc>
     1ec:	ldr	r0, [fp, #-16]
     1f0:	movw	r1, #0
     1f4:	cmp	r0, r1
     1f8:	beq	200 <parse_entry+0xb4>
     1fc:	b	220 <parse_entry+0xd4>
     200:	movw	r0, #0
     204:	movt	r0, #0
     208:	movw	r1, #0
     20c:	movt	r1, #0
     210:	movw	r2, #4101	; 0x1005
     214:	movw	r3, #0
     218:	movt	r3, #0
     21c:	bl	0 <__assert_fail>
     220:	ldr	r0, [fp, #-16]
     224:	bl	0 <strlen>
     228:	add	r0, r0, #6
     22c:	add	r0, r0, #4
     230:	add	r0, r0, #1
     234:	bl	0 <malloc>
     238:	str	r0, [fp, #-76]	; 0xffffffb4
     23c:	ldr	r0, [fp, #-76]	; 0xffffffb4
     240:	movw	lr, #0
     244:	cmp	r0, lr
     248:	bne	280 <parse_entry+0x134>
     24c:	ldr	r0, [fp, #-16]
     250:	bl	0 <strlen>
     254:	add	r0, r0, #6
     258:	add	r0, r0, #4
     25c:	add	r2, r0, #1
     260:	mvn	r0, #0
     264:	movw	r1, #0
     268:	movt	r1, #0
     26c:	movw	r3, #0
     270:	movt	r3, #0
     274:	movw	lr, #4106	; 0x100a
     278:	str	lr, [sp]
     27c:	bl	0 <coda_set_error>
     280:	ldr	r0, [fp, #-76]	; 0xffffffb4
     284:	ldr	r2, [fp, #-16]
     288:	movw	r1, #0
     28c:	movt	r1, #0
     290:	bl	0 <sprintf>
     294:	str	r0, [sp, #88]	; 0x58
     298:	b	348 <parse_entry+0x1fc>
     29c:	ldr	r0, [fp, #-16]
     2a0:	movw	r1, #0
     2a4:	cmp	r0, r1
     2a8:	beq	2b0 <parse_entry+0x164>
     2ac:	b	2d0 <parse_entry+0x184>
     2b0:	movw	r0, #0
     2b4:	movt	r0, #0
     2b8:	movw	r1, #0
     2bc:	movt	r1, #0
     2c0:	movw	r2, #4111	; 0x100f
     2c4:	movw	r3, #0
     2c8:	movt	r3, #0
     2cc:	bl	0 <__assert_fail>
     2d0:	ldr	r0, [fp, #-16]
     2d4:	bl	0 <strlen>
     2d8:	add	r0, r0, #9
     2dc:	add	r0, r0, #4
     2e0:	add	r0, r0, #1
     2e4:	bl	0 <malloc>
     2e8:	str	r0, [fp, #-76]	; 0xffffffb4
     2ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
     2f0:	movw	lr, #0
     2f4:	cmp	r0, lr
     2f8:	bne	330 <parse_entry+0x1e4>
     2fc:	ldr	r0, [fp, #-16]
     300:	bl	0 <strlen>
     304:	add	r0, r0, #9
     308:	add	r0, r0, #4
     30c:	add	r2, r0, #1
     310:	mvn	r0, #0
     314:	movw	r1, #0
     318:	movt	r1, #0
     31c:	movw	r3, #0
     320:	movt	r3, #0
     324:	movw	lr, #4116	; 0x1014
     328:	str	lr, [sp]
     32c:	bl	0 <coda_set_error>
     330:	ldr	r0, [fp, #-76]	; 0xffffffb4
     334:	ldr	r2, [fp, #-16]
     338:	movw	r1, #0
     33c:	movt	r1, #0
     340:	bl	0 <sprintf>
     344:	str	r0, [sp, #84]	; 0x54
     348:	ldr	r0, [fp, #-8]
     34c:	ldr	r1, [fp, #-76]	; 0xffffffb4
     350:	bl	0 <coda_za_get_entry_by_name>
     354:	str	r0, [fp, #-80]	; 0xffffffb0
     358:	ldr	r0, [fp, #-80]	; 0xffffffb0
     35c:	movw	r1, #0
     360:	cmp	r0, r1
     364:	bne	42c <parse_entry+0x2e0>
     368:	ldr	r0, [fp, #-12]
     36c:	cmp	r0, #0
     370:	str	r0, [sp, #80]	; 0x50
     374:	beq	39c <parse_entry+0x250>
     378:	b	37c <parse_entry+0x230>
     37c:	ldr	r0, [sp, #80]	; 0x50
     380:	cmp	r0, #1
     384:	beq	3c4 <parse_entry+0x278>
     388:	b	38c <parse_entry+0x240>
     38c:	ldr	r0, [sp, #80]	; 0x50
     390:	cmp	r0, #2
     394:	beq	3f0 <parse_entry+0x2a4>
     398:	b	418 <parse_entry+0x2cc>
     39c:	ldr	r0, [fp, #-8]
     3a0:	bl	0 <coda_za_get_filename>
     3a4:	ldr	lr, [pc, #1304]	; 8c4 <parse_entry+0x778>
     3a8:	str	r0, [sp, #76]	; 0x4c
     3ac:	mov	r0, lr
     3b0:	movw	r1, #0
     3b4:	movt	r1, #0
     3b8:	ldr	r2, [sp, #76]	; 0x4c
     3bc:	bl	0 <coda_set_error>
     3c0:	b	418 <parse_entry+0x2cc>
     3c4:	ldr	r0, [fp, #-8]
     3c8:	bl	0 <coda_za_get_filename>
     3cc:	ldr	lr, [pc, #1264]	; 8c4 <parse_entry+0x778>
     3d0:	ldr	r3, [fp, #-16]
     3d4:	str	r0, [sp, #72]	; 0x48
     3d8:	mov	r0, lr
     3dc:	movw	r1, #0
     3e0:	movt	r1, #0
     3e4:	ldr	r2, [sp, #72]	; 0x48
     3e8:	bl	0 <coda_set_error>
     3ec:	b	418 <parse_entry+0x2cc>
     3f0:	ldr	r0, [fp, #-8]
     3f4:	bl	0 <coda_za_get_filename>
     3f8:	ldr	lr, [pc, #1220]	; 8c4 <parse_entry+0x778>
     3fc:	ldr	r3, [fp, #-16]
     400:	str	r0, [sp, #68]	; 0x44
     404:	mov	r0, lr
     408:	movw	r1, #0
     40c:	movt	r1, #0
     410:	ldr	r2, [sp, #68]	; 0x44
     414:	bl	0 <coda_set_error>
     418:	ldr	r0, [fp, #-76]	; 0xffffffb4
     41c:	bl	0 <free>
     420:	mvn	r0, #0
     424:	str	r0, [fp, #-4]
     428:	b	8ac <parse_entry+0x760>
     42c:	ldr	r0, [fp, #-76]	; 0xffffffb4
     430:	bl	0 <free>
     434:	sub	r0, fp, #72	; 0x48
     438:	bl	d3c <parser_info_init>
     43c:	ldr	r0, [fp, #-8]
     440:	str	r0, [fp, #-56]	; 0xffffffc8
     444:	ldr	r0, [fp, #-16]
     448:	str	r0, [fp, #-52]	; 0xffffffcc
     44c:	ldr	r0, [fp, #-20]	; 0xffffffec
     450:	str	r0, [fp, #-48]	; 0xffffffd0
     454:	ldr	r0, [fp, #8]
     458:	str	r0, [fp, #-44]	; 0xffffffd4
     45c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     460:	bl	0 <coda_za_get_entry_size>
     464:	str	r0, [fp, #-84]	; 0xffffffac
     468:	ldr	r0, [fp, #-84]	; 0xffffffac
     46c:	bl	0 <malloc>
     470:	str	r0, [fp, #-60]	; 0xffffffc4
     474:	ldr	r0, [fp, #-60]	; 0xffffffc4
     478:	movw	lr, #0
     47c:	cmp	r0, lr
     480:	bne	4bc <parse_entry+0x370>
     484:	ldr	r2, [fp, #-84]	; 0xffffffac
     488:	mvn	r0, #0
     48c:	movw	r1, #0
     490:	movt	r1, #0
     494:	movw	r3, #0
     498:	movt	r3, #0
     49c:	movw	ip, #4156	; 0x103c
     4a0:	str	ip, [sp]
     4a4:	bl	0 <coda_set_error>
     4a8:	sub	r0, fp, #72	; 0x48
     4ac:	bl	db4 <parser_info_delete>
     4b0:	mvn	r0, #0
     4b4:	str	r0, [fp, #-4]
     4b8:	b	8ac <parse_entry+0x760>
     4bc:	ldr	r0, [fp, #-80]	; 0xffffffb0
     4c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
     4c4:	bl	0 <coda_za_read_entry>
     4c8:	cmp	r0, #0
     4cc:	beq	4e4 <parse_entry+0x398>
     4d0:	sub	r0, fp, #72	; 0x48
     4d4:	bl	db4 <parser_info_delete>
     4d8:	mvn	r0, #0
     4dc:	str	r0, [fp, #-4]
     4e0:	b	8ac <parse_entry+0x760>
     4e4:	movw	r0, #1
     4e8:	bl	0 <coda_hashtable_new>
     4ec:	str	r0, [fp, #-64]	; 0xffffffc0
     4f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
     4f4:	movw	lr, #0
     4f8:	cmp	r0, lr
     4fc:	bne	530 <parse_entry+0x3e4>
     500:	mvn	r0, #0
     504:	movw	r1, #0
     508:	movt	r1, #0
     50c:	movw	r2, #0
     510:	movt	r2, #0
     514:	movw	r3, #4170	; 0x104a
     518:	bl	0 <coda_set_error>
     51c:	sub	r0, fp, #72	; 0x48
     520:	bl	db4 <parser_info_delete>
     524:	mvn	r0, #0
     528:	str	r0, [fp, #-4]
     52c:	b	8ac <parse_entry+0x760>
     530:	movw	r0, #0
     534:	str	r0, [fp, #-92]	; 0xffffffa4
     538:	ldr	r0, [fp, #-92]	; 0xffffffa4
     53c:	cmp	r0, #43	; 0x2b
     540:	bge	59c <parse_entry+0x450>
     544:	ldr	r0, [fp, #-64]	; 0xffffffc0
     548:	ldr	r1, [fp, #-92]	; 0xffffffa4
     54c:	movw	r2, #0
     550:	movt	r2, #0
     554:	add	r1, r2, r1, lsl #2
     558:	ldr	r1, [r1]
     55c:	bl	0 <coda_hashtable_add_name>
     560:	cmp	r0, #0
     564:	beq	588 <parse_entry+0x43c>
     568:	movw	r0, #0
     56c:	movt	r0, #0
     570:	movw	r1, #0
     574:	movt	r1, #0
     578:	movw	r2, #4178	; 0x1052
     57c:	movw	r3, #0
     580:	movt	r3, #0
     584:	bl	0 <__assert_fail>
     588:	b	58c <parse_entry+0x440>
     58c:	ldr	r0, [fp, #-92]	; 0xffffffa4
     590:	add	r0, r0, #1
     594:	str	r0, [fp, #-92]	; 0xffffffa4
     598:	b	538 <parse_entry+0x3ec>
     59c:	movw	r0, #0
     5a0:	movw	r1, #32
     5a4:	and	r1, r1, #255	; 0xff
     5a8:	bl	0 <coda_XML_ParserCreateNS>
     5ac:	str	r0, [fp, #-68]	; 0xffffffbc
     5b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
     5b4:	movw	r1, #0
     5b8:	cmp	r0, r1
     5bc:	bne	5e4 <parse_entry+0x498>
     5c0:	mvn	r0, #13
     5c4:	movw	r1, #0
     5c8:	movt	r1, #0
     5cc:	bl	0 <coda_set_error>
     5d0:	sub	r0, fp, #72	; 0x48
     5d4:	bl	db4 <parser_info_delete>
     5d8:	mvn	r0, #0
     5dc:	str	r0, [fp, #-4]
     5e0:	b	8ac <parse_entry+0x760>
     5e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
     5e8:	sub	r1, fp, #72	; 0x48
     5ec:	str	r1, [sp, #64]	; 0x40
     5f0:	bl	0 <coda_XML_SetUserData>
     5f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
     5f8:	movw	r1, #0
     5fc:	movt	r1, #0
     600:	movw	r2, #0
     604:	movt	r2, #0
     608:	bl	0 <coda_XML_SetElementHandler>
     60c:	mvn	r1, #0
     610:	mov	r0, #0
     614:	ldr	r2, [sp, #64]	; 0x40
     618:	str	r0, [sp, #60]	; 0x3c
     61c:	mov	r0, r2
     620:	ldr	r2, [sp, #60]	; 0x3c
     624:	bl	1168 <push_node>
     628:	ldr	r1, [fp, #-72]	; 0xffffffb8
     62c:	ldr	r2, [sp, #60]	; 0x3c
     630:	str	r2, [r1, #48]	; 0x30
     634:	ldr	r1, [fp, #-12]
     638:	cmp	r1, #0
     63c:	str	r0, [sp, #56]	; 0x38
     640:	str	r1, [sp, #52]	; 0x34
     644:	beq	66c <parse_entry+0x520>
     648:	b	64c <parse_entry+0x500>
     64c:	ldr	r0, [sp, #52]	; 0x34
     650:	cmp	r0, #1
     654:	beq	68c <parse_entry+0x540>
     658:	b	65c <parse_entry+0x510>
     65c:	ldr	r0, [sp, #52]	; 0x34
     660:	cmp	r0, #2
     664:	beq	6a0 <parse_entry+0x554>
     668:	b	6b8 <parse_entry+0x56c>
     66c:	ldr	r0, [fp, #-72]	; 0xffffffb8
     670:	movw	r1, #30
     674:	movw	r2, #0
     678:	movt	r2, #0
     67c:	movw	r3, #0
     680:	movt	r3, #0
     684:	bl	1358 <register_sub_element>
     688:	b	6b8 <parse_entry+0x56c>
     68c:	ldr	r0, [fp, #-72]	; 0xffffffb8
     690:	movw	r1, #0
     694:	movt	r1, #0
     698:	bl	1698 <register_type_elements>
     69c:	b	6b8 <parse_entry+0x56c>
     6a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
     6a4:	movw	r1, #31
     6a8:	movw	r2, #0
     6ac:	movt	r2, #0
     6b0:	movw	r3, #0
     6b4:	bl	1358 <register_sub_element>
     6b8:	ldr	r0, [pc, #504]	; 8b8 <parse_entry+0x76c>
     6bc:	ldr	r0, [pc, r0]
     6c0:	str	r0, [sp, #48]	; 0x30
     6c4:	bl	0 <__aeabi_read_tp>
     6c8:	mov	ip, #0
     6cc:	ldr	lr, [sp, #48]	; 0x30
     6d0:	str	ip, [r0, lr]
     6d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
     6d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
     6dc:	ldr	r2, [fp, #-84]	; 0xffffffac
     6e0:	movw	r3, #1
     6e4:	bl	0 <coda_XML_Parse>
     6e8:	str	r0, [fp, #-88]	; 0xffffffa8
     6ec:	ldr	r0, [fp, #-88]	; 0xffffffa8
     6f0:	cmp	r0, #0
     6f4:	beq	718 <parse_entry+0x5cc>
     6f8:	ldr	r0, [pc, #444]	; 8bc <parse_entry+0x770>
     6fc:	ldr	r0, [pc, r0]
     700:	str	r0, [sp, #44]	; 0x2c
     704:	bl	0 <__aeabi_read_tp>
     708:	ldr	ip, [sp, #44]	; 0x2c
     70c:	ldr	r0, [r0, ip]
     710:	cmp	r0, #0
     714:	beq	89c <parse_entry+0x750>
     718:	ldr	r0, [fp, #-32]	; 0xffffffe0
     71c:	cmp	r0, #0
     720:	bne	89c <parse_entry+0x750>
     724:	ldr	r0, [pc, #404]	; 8c0 <parse_entry+0x774>
     728:	ldr	r0, [pc, r0]
     72c:	str	r0, [sp, #40]	; 0x28
     730:	bl	0 <__aeabi_read_tp>
     734:	ldr	ip, [sp, #40]	; 0x28
     738:	ldr	r0, [r0, ip]
     73c:	cmp	r0, #0
     740:	bne	76c <parse_entry+0x620>
     744:	ldr	r0, [fp, #-68]	; 0xffffffbc
     748:	bl	0 <coda_XML_GetErrorCode>
     74c:	bl	0 <coda_XML_ErrorString>
     750:	ldr	lr, [pc, #364]	; 8c4 <parse_entry+0x778>
     754:	str	r0, [sp, #36]	; 0x24
     758:	mov	r0, lr
     75c:	movw	r1, #0
     760:	movt	r1, #0
     764:	ldr	r2, [sp, #36]	; 0x24
     768:	bl	0 <coda_set_error>
     76c:	ldr	r0, [pc, #340]	; 8c8 <parse_entry+0x77c>
     770:	ldr	r0, [pc, r0]
     774:	str	r0, [sp, #32]
     778:	bl	0 <__aeabi_read_tp>
     77c:	ldr	ip, [sp, #32]
     780:	ldr	r0, [r0, ip]
     784:	cmn	r0, #400	; 0x190
     788:	beq	7b0 <parse_entry+0x664>
     78c:	ldr	r0, [pc, #312]	; 8cc <parse_entry+0x780>
     790:	ldr	r0, [pc, r0]
     794:	str	r0, [sp, #28]
     798:	bl	0 <__aeabi_read_tp>
     79c:	ldr	ip, [sp, #28]
     7a0:	ldr	r0, [r0, ip]
     7a4:	mvn	ip, #400	; 0x190
     7a8:	cmp	r0, ip
     7ac:	bne	888 <parse_entry+0x73c>
     7b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     7b4:	cmp	r0, #0
     7b8:	beq	888 <parse_entry+0x73c>
     7bc:	ldr	r0, [fp, #-8]
     7c0:	bl	0 <coda_za_get_filename>
     7c4:	movw	lr, #0
     7c8:	movt	lr, #0
     7cc:	str	r0, [sp, #24]
     7d0:	mov	r0, lr
     7d4:	ldr	r1, [sp, #24]
     7d8:	bl	0 <coda_add_error_message>
     7dc:	ldr	r0, [fp, #-12]
     7e0:	cmp	r0, #0
     7e4:	str	r0, [sp, #20]
     7e8:	beq	810 <parse_entry+0x6c4>
     7ec:	b	7f0 <parse_entry+0x6a4>
     7f0:	ldr	r0, [sp, #20]
     7f4:	cmp	r0, #1
     7f8:	beq	824 <parse_entry+0x6d8>
     7fc:	b	800 <parse_entry+0x6b4>
     800:	ldr	r0, [sp, #20]
     804:	cmp	r0, #2
     808:	beq	838 <parse_entry+0x6ec>
     80c:	b	848 <parse_entry+0x6fc>
     810:	movw	r0, #0
     814:	movt	r0, #0
     818:	movw	r1, #0
     81c:	bl	0 <coda_add_error_message>
     820:	b	848 <parse_entry+0x6fc>
     824:	ldr	r1, [fp, #-16]
     828:	movw	r0, #0
     82c:	movt	r0, #0
     830:	bl	0 <coda_add_error_message>
     834:	b	848 <parse_entry+0x6fc>
     838:	ldr	r1, [fp, #-16]
     83c:	movw	r0, #0
     840:	movt	r0, #0
     844:	bl	0 <coda_add_error_message>
     848:	ldr	r0, [fp, #-68]	; 0xffffffbc
     84c:	bl	0 <coda_XML_GetCurrentLineNumber>
     850:	ldr	lr, [fp, #-68]	; 0xffffffbc
     854:	str	r0, [sp, #16]
     858:	mov	r0, lr
     85c:	str	r1, [sp, #12]
     860:	bl	0 <coda_XML_GetCurrentByteIndex>
     864:	movw	lr, #0
     868:	movt	lr, #0
     86c:	str	r0, [sp, #8]
     870:	mov	r0, lr
     874:	ldr	lr, [sp, #16]
     878:	str	r1, [sp, #4]
     87c:	mov	r1, lr
     880:	ldr	r2, [sp, #8]
     884:	bl	0 <coda_add_error_message>
     888:	sub	r0, fp, #72	; 0x48
     88c:	bl	db4 <parser_info_delete>
     890:	mvn	r0, #0
     894:	str	r0, [fp, #-4]
     898:	b	8ac <parse_entry+0x760>
     89c:	sub	r0, fp, #72	; 0x48
     8a0:	bl	db4 <parser_info_delete>
     8a4:	movw	r0, #0
     8a8:	str	r0, [fp, #-4]
     8ac:	ldr	r0, [fp, #-4]
     8b0:	mov	sp, fp
     8b4:	pop	{fp, pc}
     8b8:	.word	0x000001f4
     8bc:	.word	0x000001b8
     8c0:	.word	0x00000190
     8c4:	.word	0xfffffe70
     8c8:	.word	0x00000150
     8cc:	.word	0x00000134

000008d0 <coda_read_definitions>:
     8d0:	push	{fp, lr}
     8d4:	mov	fp, sp
     8d8:	sub	sp, sp, #176	; 0xb0
     8dc:	str	r0, [fp, #-8]
     8e0:	movw	r0, #58	; 0x3a
     8e4:	strb	r0, [fp, #-9]
     8e8:	ldr	r0, [fp, #-8]
     8ec:	bl	0 <strdup>
     8f0:	str	r0, [fp, #-16]
     8f4:	ldr	r0, [fp, #-16]
     8f8:	movw	lr, #0
     8fc:	cmp	r0, lr
     900:	bne	92c <coda_read_definitions+0x5c>
     904:	mvn	r0, #0
     908:	movw	r1, #0
     90c:	movt	r1, #0
     910:	movw	r2, #0
     914:	movt	r2, #0
     918:	movw	r3, #4302	; 0x10ce
     91c:	bl	0 <coda_set_error>
     920:	mvn	r0, #0
     924:	str	r0, [fp, #-4]
     928:	b	c94 <coda_read_definitions+0x3c4>
     92c:	ldr	r0, [fp, #-16]
     930:	str	r0, [fp, #-20]	; 0xffffffec
     934:	ldr	r0, [fp, #-20]	; 0xffffffec
     938:	ldrb	r0, [r0]
     93c:	cmp	r0, #0
     940:	beq	c84 <coda_read_definitions+0x3b4>
     944:	ldr	r0, [fp, #-20]	; 0xffffffec
     948:	str	r0, [sp, #60]	; 0x3c
     94c:	ldr	r0, [sp, #60]	; 0x3c
     950:	ldrb	r0, [r0]
     954:	cmp	r0, #0
     958:	movw	r0, #0
     95c:	str	r0, [sp, #40]	; 0x28
     960:	beq	97c <coda_read_definitions+0xac>
     964:	ldr	r0, [sp, #60]	; 0x3c
     968:	ldrb	r0, [r0]
     96c:	cmp	r0, #58	; 0x3a
     970:	movw	r0, #0
     974:	movne	r0, #1
     978:	str	r0, [sp, #40]	; 0x28
     97c:	ldr	r0, [sp, #40]	; 0x28
     980:	tst	r0, #1
     984:	beq	998 <coda_read_definitions+0xc8>
     988:	ldr	r0, [sp, #60]	; 0x3c
     98c:	add	r0, r0, #1
     990:	str	r0, [sp, #60]	; 0x3c
     994:	b	94c <coda_read_definitions+0x7c>
     998:	ldr	r0, [sp, #60]	; 0x3c
     99c:	ldrb	r0, [r0]
     9a0:	cmp	r0, #0
     9a4:	beq	9c0 <coda_read_definitions+0xf0>
     9a8:	ldr	r0, [sp, #60]	; 0x3c
     9ac:	movw	r1, #0
     9b0:	strb	r1, [r0]
     9b4:	ldr	r0, [sp, #60]	; 0x3c
     9b8:	add	r0, r0, #1
     9bc:	str	r0, [sp, #60]	; 0x3c
     9c0:	ldr	r0, [fp, #-20]	; 0xffffffec
     9c4:	add	r1, sp, #64	; 0x40
     9c8:	bl	0 <stat>
     9cc:	cmp	r0, #0
     9d0:	bne	c78 <coda_read_definitions+0x3a8>
     9d4:	ldr	r0, [sp, #80]	; 0x50
     9d8:	and	r0, r0, #16384	; 0x4000
     9dc:	cmp	r0, #0
     9e0:	beq	c38 <coda_read_definitions+0x368>
     9e4:	ldr	r0, [fp, #-20]	; 0xffffffec
     9e8:	bl	0 <opendir>
     9ec:	str	r0, [sp, #56]	; 0x38
     9f0:	ldr	r0, [sp, #56]	; 0x38
     9f4:	movw	lr, #0
     9f8:	cmp	r0, lr
     9fc:	bne	a48 <coda_read_definitions+0x178>
     a00:	ldr	r2, [fp, #-20]	; 0xffffffec
     a04:	str	r2, [sp, #36]	; 0x24
     a08:	bl	0 <__errno_location>
     a0c:	ldr	r0, [r0]
     a10:	bl	0 <strerror>
     a14:	ldr	r2, [pc, #644]	; ca0 <coda_read_definitions+0x3d0>
     a18:	str	r0, [sp, #32]
     a1c:	mov	r0, r2
     a20:	movw	r1, #0
     a24:	movt	r1, #0
     a28:	ldr	r2, [sp, #36]	; 0x24
     a2c:	ldr	r3, [sp, #32]
     a30:	bl	0 <coda_set_error>
     a34:	ldr	r0, [fp, #-16]
     a38:	bl	0 <free>
     a3c:	mvn	r0, #0
     a40:	str	r0, [fp, #-4]
     a44:	b	c94 <coda_read_definitions+0x3c4>
     a48:	b	a4c <coda_read_definitions+0x17c>
     a4c:	ldr	r0, [sp, #56]	; 0x38
     a50:	bl	0 <readdir>
     a54:	str	r0, [sp, #52]	; 0x34
     a58:	movw	lr, #0
     a5c:	cmp	r0, lr
     a60:	beq	c28 <coda_read_definitions+0x358>
     a64:	ldr	r0, [sp, #52]	; 0x34
     a68:	add	r0, r0, #11
     a6c:	bl	0 <strlen>
     a70:	str	r0, [sp, #48]	; 0x30
     a74:	ldr	r0, [sp, #48]	; 0x30
     a78:	cmp	r0, #8
     a7c:	ble	c24 <coda_read_definitions+0x354>
     a80:	ldr	r0, [sp, #52]	; 0x34
     a84:	add	r0, r0, #11
     a88:	ldr	r1, [sp, #48]	; 0x30
     a8c:	sub	r1, r1, #8
     a90:	add	r0, r0, r1
     a94:	movw	r1, #0
     a98:	movt	r1, #0
     a9c:	bl	0 <strcmp>
     aa0:	cmp	r0, #0
     aa4:	bne	c24 <coda_read_definitions+0x354>
     aa8:	ldr	r0, [fp, #-20]	; 0xffffffec
     aac:	bl	0 <strlen>
     ab0:	add	r0, r0, #1
     ab4:	ldr	lr, [sp, #48]	; 0x30
     ab8:	add	r0, r0, lr
     abc:	add	r0, r0, #1
     ac0:	bl	0 <malloc>
     ac4:	str	r0, [sp, #44]	; 0x2c
     ac8:	ldr	r0, [sp, #44]	; 0x2c
     acc:	movw	lr, #0
     ad0:	cmp	r0, lr
     ad4:	bne	b34 <coda_read_definitions+0x264>
     ad8:	ldr	r0, [fp, #-20]	; 0xffffffec
     adc:	bl	0 <strlen>
     ae0:	add	r0, r0, #1
     ae4:	ldr	lr, [sp, #48]	; 0x30
     ae8:	add	r0, r0, lr
     aec:	add	r2, r0, #1
     af0:	mvn	r0, #0
     af4:	movw	r1, #0
     af8:	movt	r1, #0
     afc:	movw	r3, #0
     b00:	movt	r3, #0
     b04:	movw	lr, #4427	; 0x114b
     b08:	str	lr, [sp]
     b0c:	bl	0 <coda_set_error>
     b10:	ldr	r0, [sp, #56]	; 0x38
     b14:	bl	0 <closedir>
     b18:	ldr	r1, [fp, #-16]
     b1c:	str	r0, [sp, #28]
     b20:	mov	r0, r1
     b24:	bl	0 <free>
     b28:	mvn	r0, #0
     b2c:	str	r0, [fp, #-4]
     b30:	b	c94 <coda_read_definitions+0x3c4>
     b34:	ldr	r0, [sp, #44]	; 0x2c
     b38:	ldr	r2, [fp, #-20]	; 0xffffffec
     b3c:	ldr	r1, [sp, #52]	; 0x34
     b40:	add	r3, r1, #11
     b44:	movw	r1, #0
     b48:	movt	r1, #0
     b4c:	bl	0 <sprintf>
     b50:	ldr	r1, [sp, #44]	; 0x2c
     b54:	str	r0, [sp, #24]
     b58:	mov	r0, r1
     b5c:	add	r1, sp, #64	; 0x40
     b60:	bl	0 <stat>
     b64:	cmp	r0, #0
     b68:	beq	bcc <coda_read_definitions+0x2fc>
     b6c:	ldr	r2, [sp, #44]	; 0x2c
     b70:	str	r2, [sp, #20]
     b74:	bl	0 <__errno_location>
     b78:	ldr	r0, [r0]
     b7c:	bl	0 <strerror>
     b80:	ldr	r2, [pc, #280]	; ca0 <coda_read_definitions+0x3d0>
     b84:	str	r0, [sp, #16]
     b88:	mov	r0, r2
     b8c:	movw	r1, #0
     b90:	movt	r1, #0
     b94:	ldr	r2, [sp, #20]
     b98:	ldr	r3, [sp, #16]
     b9c:	bl	0 <coda_set_error>
     ba0:	ldr	r0, [sp, #44]	; 0x2c
     ba4:	bl	0 <free>
     ba8:	ldr	r0, [sp, #56]	; 0x38
     bac:	bl	0 <closedir>
     bb0:	ldr	r1, [fp, #-16]
     bb4:	str	r0, [sp, #12]
     bb8:	mov	r0, r1
     bbc:	bl	0 <free>
     bc0:	mvn	r0, #0
     bc4:	str	r0, [fp, #-4]
     bc8:	b	c94 <coda_read_definitions+0x3c4>
     bcc:	ldr	r0, [sp, #80]	; 0x50
     bd0:	and	r0, r0, #32768	; 0x8000
     bd4:	cmp	r0, #0
     bd8:	beq	c1c <coda_read_definitions+0x34c>
     bdc:	ldr	r0, [sp, #44]	; 0x2c
     be0:	bl	ca4 <read_definition_file>
     be4:	cmp	r0, #0
     be8:	beq	c18 <coda_read_definitions+0x348>
     bec:	ldr	r0, [sp, #44]	; 0x2c
     bf0:	bl	0 <free>
     bf4:	ldr	r0, [sp, #56]	; 0x38
     bf8:	bl	0 <closedir>
     bfc:	ldr	lr, [fp, #-16]
     c00:	str	r0, [sp, #8]
     c04:	mov	r0, lr
     c08:	bl	0 <free>
     c0c:	mvn	r0, #0
     c10:	str	r0, [fp, #-4]
     c14:	b	c94 <coda_read_definitions+0x3c4>
     c18:	b	c1c <coda_read_definitions+0x34c>
     c1c:	ldr	r0, [sp, #44]	; 0x2c
     c20:	bl	0 <free>
     c24:	b	a4c <coda_read_definitions+0x17c>
     c28:	ldr	r0, [sp, #56]	; 0x38
     c2c:	bl	0 <closedir>
     c30:	str	r0, [sp, #4]
     c34:	b	c74 <coda_read_definitions+0x3a4>
     c38:	ldr	r0, [sp, #80]	; 0x50
     c3c:	and	r0, r0, #32768	; 0x8000
     c40:	cmp	r0, #0
     c44:	beq	c70 <coda_read_definitions+0x3a0>
     c48:	ldr	r0, [fp, #-20]	; 0xffffffec
     c4c:	bl	ca4 <read_definition_file>
     c50:	cmp	r0, #0
     c54:	beq	c6c <coda_read_definitions+0x39c>
     c58:	ldr	r0, [fp, #-16]
     c5c:	bl	0 <free>
     c60:	mvn	r0, #0
     c64:	str	r0, [fp, #-4]
     c68:	b	c94 <coda_read_definitions+0x3c4>
     c6c:	b	c70 <coda_read_definitions+0x3a0>
     c70:	b	c74 <coda_read_definitions+0x3a4>
     c74:	b	c78 <coda_read_definitions+0x3a8>
     c78:	ldr	r0, [sp, #60]	; 0x3c
     c7c:	str	r0, [fp, #-20]	; 0xffffffec
     c80:	b	934 <coda_read_definitions+0x64>
     c84:	ldr	r0, [fp, #-16]
     c88:	bl	0 <free>
     c8c:	movw	r0, #0
     c90:	str	r0, [fp, #-4]
     c94:	ldr	r0, [fp, #-4]
     c98:	mov	sp, fp
     c9c:	pop	{fp, pc}
     ca0:	.word	0xfffffe70

00000ca4 <read_definition_file>:
     ca4:	push	{fp, lr}
     ca8:	mov	fp, sp
     cac:	sub	sp, sp, #24
     cb0:	str	r0, [fp, #-8]
     cb4:	ldr	r0, [fp, #-8]
     cb8:	movw	r1, #0
     cbc:	movt	r1, #0
     cc0:	bl	0 <coda_za_open>
     cc4:	str	r0, [sp, #12]
     cc8:	ldr	r0, [sp, #12]
     ccc:	movw	r1, #0
     cd0:	cmp	r0, r1
     cd4:	bne	ce4 <read_definition_file+0x40>
     cd8:	mvn	r0, #0
     cdc:	str	r0, [fp, #-4]
     ce0:	b	d30 <read_definition_file+0x8c>
     ce4:	ldr	r0, [sp, #12]
     ce8:	movw	r1, #0
     cec:	str	r1, [sp, #8]
     cf0:	ldr	r2, [sp, #8]
     cf4:	ldr	r3, [sp, #8]
     cf8:	ldr	ip, [sp, #8]
     cfc:	str	ip, [sp]
     d00:	bl	14c <parse_entry>
     d04:	cmp	r0, #0
     d08:	beq	d20 <read_definition_file+0x7c>
     d0c:	ldr	r0, [sp, #12]
     d10:	bl	0 <coda_za_close>
     d14:	mvn	r0, #0
     d18:	str	r0, [fp, #-4]
     d1c:	b	d30 <read_definition_file+0x8c>
     d20:	ldr	r0, [sp, #12]
     d24:	bl	0 <coda_za_close>
     d28:	movw	r0, #0
     d2c:	str	r0, [fp, #-4]
     d30:	ldr	r0, [fp, #-4]
     d34:	mov	sp, fp
     d38:	pop	{fp, pc}

00000d3c <parser_info_init>:
     d3c:	sub	sp, sp, #4
     d40:	str	r0, [sp]
     d44:	ldr	r0, [sp]
     d48:	movw	r1, #0
     d4c:	str	r1, [r0]
     d50:	ldr	r0, [sp]
     d54:	str	r1, [r0, #4]
     d58:	ldr	r0, [sp]
     d5c:	str	r1, [r0, #8]
     d60:	ldr	r0, [sp]
     d64:	str	r1, [r0, #12]
     d68:	ldr	r0, [sp]
     d6c:	str	r1, [r0, #16]
     d70:	ldr	r0, [sp]
     d74:	str	r1, [r0, #24]
     d78:	ldr	r0, [sp]
     d7c:	str	r1, [r0, #28]
     d80:	ldr	r0, [sp]
     d84:	str	r1, [r0, #32]
     d88:	ldr	r0, [sp]
     d8c:	str	r1, [r0, #36]	; 0x24
     d90:	ldr	r0, [sp]
     d94:	str	r1, [r0, #40]	; 0x28
     d98:	ldr	r0, [sp]
     d9c:	movw	r2, #1
     da0:	str	r2, [r0, #44]	; 0x2c
     da4:	ldr	r0, [sp]
     da8:	str	r1, [r0, #48]	; 0x30
     dac:	add	sp, sp, #4
     db0:	bx	lr

00000db4 <parser_info_delete>:
     db4:	push	{fp, lr}
     db8:	mov	fp, sp
     dbc:	sub	sp, sp, #16
     dc0:	str	r0, [fp, #-4]
     dc4:	ldr	r0, [fp, #-4]
     dc8:	ldr	r0, [r0]
     dcc:	movw	r1, #0
     dd0:	cmp	r0, r1
     dd4:	beq	e8c <parser_info_delete+0xd8>
     dd8:	ldr	r0, [fp, #-4]
     ddc:	ldr	r0, [r0]
     de0:	str	r0, [sp, #8]
     de4:	ldr	r0, [sp, #8]
     de8:	ldr	r0, [r0, #8]
     dec:	movw	r1, #0
     df0:	cmp	r0, r1
     df4:	beq	e50 <parser_info_delete+0x9c>
     df8:	ldr	r0, [sp, #8]
     dfc:	ldr	r0, [r0, #40]	; 0x28
     e00:	movw	r1, #0
     e04:	cmp	r0, r1
     e08:	beq	e10 <parser_info_delete+0x5c>
     e0c:	b	e30 <parser_info_delete+0x7c>
     e10:	movw	r0, #0
     e14:	movt	r0, #0
     e18:	movw	r1, #0
     e1c:	movt	r1, #0
     e20:	movw	r2, #4055	; 0xfd7
     e24:	movw	r3, #0
     e28:	movt	r3, #0
     e2c:	bl	0 <__assert_fail>
     e30:	ldr	r0, [sp, #8]
     e34:	ldr	r0, [r0, #40]	; 0x28
     e38:	ldr	r1, [sp, #8]
     e3c:	ldr	r1, [r1, #8]
     e40:	str	r0, [sp, #4]
     e44:	mov	r0, r1
     e48:	ldr	r1, [sp, #4]
     e4c:	blx	r1
     e50:	ldr	r0, [sp, #8]
     e54:	ldr	r0, [r0, #12]
     e58:	movw	r1, #0
     e5c:	cmp	r0, r1
     e60:	beq	e70 <parser_info_delete+0xbc>
     e64:	ldr	r0, [sp, #8]
     e68:	ldr	r0, [r0, #12]
     e6c:	bl	0 <free>
     e70:	ldr	r0, [sp, #8]
     e74:	ldr	r0, [r0, #396]	; 0x18c
     e78:	ldr	r1, [fp, #-4]
     e7c:	str	r0, [r1]
     e80:	ldr	r0, [sp, #8]
     e84:	bl	0 <free>
     e88:	b	dc4 <parser_info_delete+0x10>
     e8c:	ldr	r0, [fp, #-4]
     e90:	ldr	r0, [r0, #4]
     e94:	movw	r1, #0
     e98:	cmp	r0, r1
     e9c:	beq	eac <parser_info_delete+0xf8>
     ea0:	ldr	r0, [fp, #-4]
     ea4:	ldr	r0, [r0, #4]
     ea8:	bl	0 <coda_XML_ParserFree>
     eac:	ldr	r0, [fp, #-4]
     eb0:	ldr	r0, [r0, #8]
     eb4:	movw	r1, #0
     eb8:	cmp	r0, r1
     ebc:	beq	ecc <parser_info_delete+0x118>
     ec0:	ldr	r0, [fp, #-4]
     ec4:	ldr	r0, [r0, #8]
     ec8:	bl	0 <coda_hashtable_delete>
     ecc:	ldr	r0, [fp, #-4]
     ed0:	ldr	r0, [r0, #12]
     ed4:	movw	r1, #0
     ed8:	cmp	r0, r1
     edc:	beq	eec <parser_info_delete+0x138>
     ee0:	ldr	r0, [fp, #-4]
     ee4:	ldr	r0, [r0, #12]
     ee8:	bl	0 <free>
     eec:	ldr	r0, [fp, #-4]
     ef0:	movw	r1, #0
     ef4:	str	r1, [r0, #16]
     ef8:	mov	sp, fp
     efc:	pop	{fp, pc}

00000f00 <start_element_handler>:
     f00:	push	{fp, lr}
     f04:	mov	fp, sp
     f08:	sub	sp, sp, #48	; 0x30
     f0c:	str	r0, [fp, #-4]
     f10:	str	r1, [fp, #-8]
     f14:	str	r2, [fp, #-12]
     f18:	ldr	r0, [fp, #-4]
     f1c:	str	r0, [fp, #-16]
     f20:	ldr	r0, [fp, #-16]
     f24:	ldr	r0, [r0, #48]	; 0x30
     f28:	cmp	r0, #0
     f2c:	ble	f44 <start_element_handler+0x44>
     f30:	ldr	r0, [fp, #-16]
     f34:	ldr	r1, [r0, #48]	; 0x30
     f38:	add	r1, r1, #1
     f3c:	str	r1, [r0, #48]	; 0x30
     f40:	b	10e4 <start_element_handler+0x1e4>
     f44:	ldr	r0, [fp, #-16]
     f48:	ldr	r0, [r0, #8]
     f4c:	ldr	r1, [fp, #-8]
     f50:	bl	0 <coda_hashtable_get_index_from_name>
     f54:	str	r0, [fp, #-20]	; 0xffffffec
     f58:	ldr	r0, [fp, #-20]	; 0xffffffec
     f5c:	cmp	r0, #0
     f60:	bge	f90 <start_element_handler+0x90>
     f64:	ldr	r0, [fp, #-8]
     f68:	movw	r1, #0
     f6c:	movt	r1, #0
     f70:	movw	r2, #44	; 0x2c
     f74:	bl	0 <strncmp>
     f78:	cmp	r0, #0
     f7c:	beq	f90 <start_element_handler+0x90>
     f80:	ldr	r0, [fp, #-16]
     f84:	movw	r1, #1
     f88:	str	r1, [r0, #48]	; 0x30
     f8c:	b	10e4 <start_element_handler+0x1e4>
     f90:	ldr	r0, [fp, #-20]	; 0xffffffec
     f94:	cmp	r0, #0
     f98:	blt	fc0 <start_element_handler+0xc0>
     f9c:	ldr	r0, [fp, #-16]
     fa0:	ldr	r0, [r0]
     fa4:	add	r0, r0, #52	; 0x34
     fa8:	ldr	r1, [fp, #-20]	; 0xffffffec
     fac:	add	r0, r0, r1, lsl #2
     fb0:	ldr	r0, [r0]
     fb4:	movw	r1, #0
     fb8:	cmp	r0, r1
     fbc:	bne	10c4 <start_element_handler+0x1c4>
     fc0:	ldr	r0, [fp, #-16]
     fc4:	ldr	r0, [r0]
     fc8:	ldr	r0, [r0]
     fcc:	cmn	r0, #1
     fd0:	bne	ffc <start_element_handler+0xfc>
     fd4:	ldr	r0, [fp, #-8]
     fd8:	bl	0 <coda_element_name_from_xml_name>
     fdc:	ldr	lr, [pc, #264]	; 10ec <start_element_handler+0x1ec>
     fe0:	str	r0, [sp, #24]
     fe4:	mov	r0, lr
     fe8:	movw	r1, #0
     fec:	movt	r1, #0
     ff0:	ldr	r2, [sp, #24]
     ff4:	bl	0 <coda_set_error>
     ff8:	b	10b8 <start_element_handler+0x1b8>
     ffc:	ldr	r0, [fp, #-16]
    1000:	ldr	r0, [r0]
    1004:	ldr	r0, [r0, #48]	; 0x30
    1008:	cmp	r0, #0
    100c:	beq	1074 <start_element_handler+0x174>
    1010:	ldr	r0, [fp, #-8]
    1014:	bl	0 <coda_element_name_from_xml_name>
    1018:	ldr	lr, [fp, #-16]
    101c:	ldr	lr, [lr]
    1020:	ldr	lr, [lr]
    1024:	str	r0, [sp, #20]
    1028:	mov	r0, lr
    102c:	bl	1af0 <xml_element_name>
    1030:	ldr	lr, [fp, #-16]
    1034:	ldr	lr, [lr]
    1038:	ldr	lr, [lr, #44]	; 0x2c
    103c:	str	r0, [sp, #16]
    1040:	mov	r0, lr
    1044:	bl	0 <coda_type_get_format_name>
    1048:	ldr	lr, [pc, #156]	; 10ec <start_element_handler+0x1ec>
    104c:	str	r0, [sp, #12]
    1050:	mov	r0, lr
    1054:	movw	r1, #0
    1058:	movt	r1, #0
    105c:	ldr	r2, [sp, #20]
    1060:	ldr	r3, [sp, #16]
    1064:	ldr	lr, [sp, #12]
    1068:	str	lr, [sp]
    106c:	bl	0 <coda_set_error>
    1070:	b	10b4 <start_element_handler+0x1b4>
    1074:	ldr	r0, [fp, #-8]
    1078:	bl	0 <coda_element_name_from_xml_name>
    107c:	ldr	lr, [fp, #-16]
    1080:	ldr	lr, [lr]
    1084:	ldr	lr, [lr]
    1088:	str	r0, [sp, #8]
    108c:	mov	r0, lr
    1090:	bl	1af0 <xml_element_name>
    1094:	ldr	lr, [pc, #80]	; 10ec <start_element_handler+0x1ec>
    1098:	str	r0, [sp, #4]
    109c:	mov	r0, lr
    10a0:	movw	r1, #0
    10a4:	movt	r1, #0
    10a8:	ldr	r2, [sp, #8]
    10ac:	ldr	r3, [sp, #4]
    10b0:	bl	0 <coda_set_error>
    10b4:	b	10b8 <start_element_handler+0x1b8>
    10b8:	ldr	r0, [fp, #-16]
    10bc:	bl	1b6c <abort_parser>
    10c0:	b	10e4 <start_element_handler+0x1e4>
    10c4:	ldr	r0, [fp, #-16]
    10c8:	ldr	r1, [fp, #-20]	; 0xffffffec
    10cc:	ldr	r2, [fp, #-12]
    10d0:	bl	1168 <push_node>
    10d4:	cmp	r0, #0
    10d8:	beq	10e4 <start_element_handler+0x1e4>
    10dc:	ldr	r0, [fp, #-16]
    10e0:	bl	1b6c <abort_parser>
    10e4:	mov	sp, fp
    10e8:	pop	{fp, pc}
    10ec:	.word	0xfffffe70

000010f0 <end_element_handler>:
    10f0:	push	{fp, lr}
    10f4:	mov	fp, sp
    10f8:	sub	sp, sp, #16
    10fc:	str	r0, [fp, #-4]
    1100:	str	r1, [sp, #8]
    1104:	ldr	r0, [fp, #-4]
    1108:	str	r0, [sp, #4]
    110c:	ldr	r0, [sp, #4]
    1110:	ldr	r0, [r0, #36]	; 0x24
    1114:	cmp	r0, #0
    1118:	beq	1120 <end_element_handler+0x30>
    111c:	b	1160 <end_element_handler+0x70>
    1120:	ldr	r0, [sp, #4]
    1124:	ldr	r0, [r0, #48]	; 0x30
    1128:	cmp	r0, #0
    112c:	ble	1148 <end_element_handler+0x58>
    1130:	ldr	r0, [sp, #4]
    1134:	ldr	r1, [r0, #48]	; 0x30
    1138:	mvn	r2, #0
    113c:	add	r1, r1, r2
    1140:	str	r1, [r0, #48]	; 0x30
    1144:	b	1160 <end_element_handler+0x70>
    1148:	ldr	r0, [sp, #4]
    114c:	bl	1ba8 <pop_node>
    1150:	cmp	r0, #0
    1154:	beq	1160 <end_element_handler+0x70>
    1158:	ldr	r0, [sp, #4]
    115c:	bl	1b6c <abort_parser>
    1160:	mov	sp, fp
    1164:	pop	{fp, pc}

00001168 <push_node>:
    1168:	push	{fp, lr}
    116c:	mov	fp, sp
    1170:	sub	sp, sp, #40	; 0x28
    1174:	str	r0, [fp, #-8]
    1178:	str	r1, [fp, #-12]
    117c:	str	r2, [fp, #-16]
    1180:	movw	r0, #400	; 0x190
    1184:	bl	0 <malloc>
    1188:	str	r0, [sp, #20]
    118c:	ldr	r0, [sp, #20]
    1190:	movw	r1, #0
    1194:	cmp	r0, r1
    1198:	beq	11a0 <push_node+0x38>
    119c:	b	11c0 <push_node+0x58>
    11a0:	movw	r0, #0
    11a4:	movt	r0, #0
    11a8:	movw	r1, #0
    11ac:	movt	r1, #0
    11b0:	movw	r2, #3877	; 0xf25
    11b4:	movw	r3, #0
    11b8:	movt	r3, #0
    11bc:	bl	0 <__assert_fail>
    11c0:	ldr	r0, [fp, #-12]
    11c4:	ldr	r1, [sp, #20]
    11c8:	str	r0, [r1]
    11cc:	ldr	r0, [sp, #20]
    11d0:	mov	r1, #0
    11d4:	str	r1, [r0, #4]
    11d8:	ldr	r0, [sp, #20]
    11dc:	str	r1, [r0, #8]
    11e0:	ldr	r0, [sp, #20]
    11e4:	str	r1, [r0, #12]
    11e8:	ldr	r0, [sp, #20]
    11ec:	mvn	r1, #0
    11f0:	str	r1, [r0, #20]
    11f4:	str	r1, [r0, #16]
    11f8:	bl	0 <coda_NaN>
    11fc:	ldr	r0, [sp, #20]
    1200:	vstr	d0, [r0, #24]
    1204:	ldr	r0, [sp, #20]
    1208:	movw	r1, #0
    120c:	str	r1, [r0, #32]
    1210:	ldr	r0, [sp, #20]
    1214:	str	r1, [r0, #36]	; 0x24
    1218:	ldr	r0, [sp, #20]
    121c:	str	r1, [r0, #40]	; 0x28
    1220:	ldr	r0, [sp, #20]
    1224:	str	r1, [r0, #48]	; 0x30
    1228:	ldr	r0, [sp, #20]
    122c:	add	r0, r0, #52	; 0x34
    1230:	movw	lr, #0
    1234:	and	r2, lr, #255	; 0xff
    1238:	str	r1, [sp, #16]
    123c:	mov	r1, r2
    1240:	movw	r2, #172	; 0xac
    1244:	str	r2, [sp, #12]
    1248:	str	lr, [sp, #8]
    124c:	bl	0 <memset>
    1250:	ldr	r0, [sp, #20]
    1254:	add	r0, r0, #224	; 0xe0
    1258:	ldr	r1, [sp, #8]
    125c:	and	r1, r1, #255	; 0xff
    1260:	ldr	r2, [sp, #12]
    1264:	bl	0 <memset>
    1268:	ldr	r0, [fp, #-8]
    126c:	ldr	r0, [r0]
    1270:	ldr	r1, [sp, #20]
    1274:	str	r0, [r1, #396]	; 0x18c
    1278:	ldr	r0, [sp, #20]
    127c:	ldr	r1, [fp, #-8]
    1280:	str	r0, [r1]
    1284:	ldr	r0, [sp, #20]
    1288:	ldr	r0, [r0, #396]	; 0x18c
    128c:	ldr	r1, [sp, #16]
    1290:	cmp	r0, r1
    1294:	beq	1308 <push_node+0x1a0>
    1298:	ldr	r0, [sp, #20]
    129c:	ldr	r0, [r0, #396]	; 0x18c
    12a0:	add	r0, r0, #52	; 0x34
    12a4:	ldr	r1, [fp, #-12]
    12a8:	add	r0, r0, r1, lsl #2
    12ac:	ldr	r0, [r0]
    12b0:	movw	r1, #0
    12b4:	cmp	r0, r1
    12b8:	beq	1308 <push_node+0x1a0>
    12bc:	ldr	r0, [sp, #20]
    12c0:	ldr	r0, [r0, #396]	; 0x18c
    12c4:	add	r0, r0, #52	; 0x34
    12c8:	ldr	r1, [fp, #-12]
    12cc:	add	r0, r0, r1, lsl #2
    12d0:	ldr	r0, [r0]
    12d4:	ldr	r1, [fp, #-8]
    12d8:	ldr	r2, [fp, #-16]
    12dc:	str	r0, [sp, #4]
    12e0:	mov	r0, r1
    12e4:	mov	r1, r2
    12e8:	ldr	r2, [sp, #4]
    12ec:	blx	r2
    12f0:	cmp	r0, #0
    12f4:	beq	1304 <push_node+0x19c>
    12f8:	mvn	r0, #0
    12fc:	str	r0, [fp, #-4]
    1300:	b	134c <push_node+0x1e4>
    1304:	b	1308 <push_node+0x1a0>
    1308:	ldr	r0, [sp, #20]
    130c:	ldr	r0, [r0, #32]
    1310:	cmp	r0, #0
    1314:	beq	1330 <push_node+0x1c8>
    1318:	ldr	r0, [fp, #-8]
    131c:	ldr	r0, [r0, #4]
    1320:	movw	r1, #0
    1324:	movt	r1, #0
    1328:	bl	0 <coda_XML_SetCharacterDataHandler>
    132c:	b	1344 <push_node+0x1dc>
    1330:	ldr	r0, [fp, #-8]
    1334:	ldr	r0, [r0, #4]
    1338:	movw	r1, #0
    133c:	movt	r1, #0
    1340:	bl	0 <coda_XML_SetCharacterDataHandler>
    1344:	movw	r0, #0
    1348:	str	r0, [fp, #-4]
    134c:	ldr	r0, [fp, #-4]
    1350:	mov	sp, fp
    1354:	pop	{fp, pc}

00001358 <register_sub_element>:
    1358:	push	{fp, lr}
    135c:	mov	fp, sp
    1360:	sub	sp, sp, #16
    1364:	str	r0, [fp, #-4]
    1368:	str	r1, [sp, #8]
    136c:	str	r2, [sp, #4]
    1370:	str	r3, [sp]
    1374:	ldr	r0, [sp, #4]
    1378:	movw	r1, #0
    137c:	cmp	r0, r1
    1380:	beq	1388 <register_sub_element+0x30>
    1384:	b	13a8 <register_sub_element+0x50>
    1388:	movw	r0, #0
    138c:	movt	r0, #0
    1390:	movw	r1, #0
    1394:	movt	r1, #0
    1398:	movw	r2, #735	; 0x2df
    139c:	movw	r3, #0
    13a0:	movt	r3, #0
    13a4:	bl	0 <__assert_fail>
    13a8:	ldr	r0, [sp, #4]
    13ac:	ldr	r1, [fp, #-4]
    13b0:	ldr	r2, [sp, #8]
    13b4:	add	r1, r1, r2, lsl #2
    13b8:	str	r0, [r1, #52]	; 0x34
    13bc:	ldr	r0, [sp]
    13c0:	ldr	r1, [fp, #-4]
    13c4:	add	r1, r1, #224	; 0xe0
    13c8:	ldr	r2, [sp, #8]
    13cc:	add	r1, r1, r2, lsl #2
    13d0:	str	r0, [r1]
    13d4:	mov	sp, fp
    13d8:	pop	{fp, pc}

000013dc <cd_product_class_init>:
    13dc:	push	{fp, lr}
    13e0:	mov	fp, sp
    13e4:	sub	sp, sp, #40	; 0x28
    13e8:	str	r0, [fp, #-8]
    13ec:	str	r1, [fp, #-12]
    13f0:	movw	r0, #0
    13f4:	str	r0, [sp, #20]
    13f8:	ldr	r0, [fp, #-12]
    13fc:	ldr	r1, [fp, #-8]
    1400:	ldr	r1, [r1]
    1404:	ldr	r2, [r1]
    1408:	movw	r1, #0
    140c:	movt	r1, #0
    1410:	bl	20fc <get_mandatory_attribute_value>
    1414:	str	r0, [fp, #-16]
    1418:	ldr	r0, [fp, #-16]
    141c:	movw	r1, #0
    1420:	cmp	r0, r1
    1424:	bne	1434 <cd_product_class_init+0x58>
    1428:	mvn	r0, #0
    142c:	str	r0, [fp, #-4]
    1430:	b	1638 <cd_product_class_init+0x25c>
    1434:	ldr	r0, [fp, #-8]
    1438:	add	r1, sp, #20
    143c:	bl	2174 <get_product_class_revision>
    1440:	cmp	r0, #0
    1444:	beq	1454 <cd_product_class_init+0x78>
    1448:	mvn	r0, #0
    144c:	str	r0, [fp, #-4]
    1450:	b	1638 <cd_product_class_init+0x25c>
    1454:	ldr	r0, [fp, #-16]
    1458:	bl	0 <coda_data_dictionary_has_product_class>
    145c:	cmp	r0, #0
    1460:	beq	14ec <cd_product_class_init+0x110>
    1464:	ldr	r0, [fp, #-16]
    1468:	bl	0 <coda_data_dictionary_get_product_class>
    146c:	str	r0, [sp, #16]
    1470:	ldr	r0, [sp, #16]
    1474:	movw	lr, #0
    1478:	cmp	r0, lr
    147c:	bne	148c <cd_product_class_init+0xb0>
    1480:	mvn	r0, #0
    1484:	str	r0, [fp, #-4]
    1488:	b	1638 <cd_product_class_init+0x25c>
    148c:	ldr	r0, [sp, #20]
    1490:	ldr	r1, [sp, #16]
    1494:	str	r0, [sp, #12]
    1498:	mov	r0, r1
    149c:	bl	0 <coda_product_class_get_revision>
    14a0:	ldr	r1, [sp, #12]
    14a4:	cmp	r1, r0
    14a8:	bgt	14cc <cd_product_class_init+0xf0>
    14ac:	ldr	r0, [fp, #-8]
    14b0:	movw	r1, #1
    14b4:	str	r1, [r0, #40]	; 0x28
    14b8:	ldr	r0, [fp, #-8]
    14bc:	bl	1b6c <abort_parser>
    14c0:	movw	r0, #0
    14c4:	str	r0, [fp, #-4]
    14c8:	b	1638 <cd_product_class_init+0x25c>
    14cc:	ldr	r0, [sp, #16]
    14d0:	bl	0 <coda_data_dictionary_remove_product_class>
    14d4:	cmp	r0, #0
    14d8:	beq	14e8 <cd_product_class_init+0x10c>
    14dc:	mvn	r0, #0
    14e0:	str	r0, [fp, #-4]
    14e4:	b	1638 <cd_product_class_init+0x25c>
    14e8:	b	14ec <cd_product_class_init+0x110>
    14ec:	movw	r0, #0
    14f0:	movt	r0, #0
    14f4:	ldr	r1, [fp, #-8]
    14f8:	ldr	r1, [r1]
    14fc:	str	r0, [r1, #40]	; 0x28
    1500:	ldr	r0, [fp, #-16]
    1504:	bl	0 <coda_product_class_new>
    1508:	ldr	r1, [fp, #-8]
    150c:	str	r0, [r1, #24]
    1510:	ldr	r0, [fp, #-8]
    1514:	ldr	r0, [r0, #24]
    1518:	movw	r1, #0
    151c:	cmp	r0, r1
    1520:	bne	1530 <cd_product_class_init+0x154>
    1524:	mvn	r0, #0
    1528:	str	r0, [fp, #-4]
    152c:	b	1638 <cd_product_class_init+0x25c>
    1530:	ldr	r0, [fp, #-8]
    1534:	ldr	r0, [r0, #24]
    1538:	ldr	r1, [fp, #-8]
    153c:	ldr	r1, [r1, #16]
    1540:	str	r0, [sp, #8]
    1544:	mov	r0, r1
    1548:	bl	0 <coda_za_get_filename>
    154c:	ldr	r1, [sp, #8]
    1550:	str	r0, [sp, #4]
    1554:	mov	r0, r1
    1558:	ldr	r1, [sp, #4]
    155c:	bl	0 <coda_product_class_set_definition_file>
    1560:	cmp	r0, #0
    1564:	beq	158c <cd_product_class_init+0x1b0>
    1568:	ldr	r0, [fp, #-8]
    156c:	ldr	r0, [r0, #24]
    1570:	bl	0 <coda_product_class_delete>
    1574:	ldr	r0, [fp, #-8]
    1578:	movw	lr, #0
    157c:	str	lr, [r0, #24]
    1580:	mvn	r0, #0
    1584:	str	r0, [fp, #-4]
    1588:	b	1638 <cd_product_class_init+0x25c>
    158c:	ldr	r0, [fp, #-8]
    1590:	ldr	r0, [r0, #24]
    1594:	ldr	r1, [sp, #20]
    1598:	bl	0 <coda_product_class_set_revision>
    159c:	cmp	r0, #0
    15a0:	beq	15c8 <cd_product_class_init+0x1ec>
    15a4:	ldr	r0, [fp, #-8]
    15a8:	ldr	r0, [r0, #24]
    15ac:	bl	0 <coda_product_class_delete>
    15b0:	ldr	r0, [fp, #-8]
    15b4:	movw	lr, #0
    15b8:	str	lr, [r0, #24]
    15bc:	mvn	r0, #0
    15c0:	str	r0, [fp, #-4]
    15c4:	b	1638 <cd_product_class_init+0x25c>
    15c8:	ldr	r0, [fp, #-8]
    15cc:	ldr	r0, [r0, #24]
    15d0:	ldr	r1, [fp, #-8]
    15d4:	ldr	r1, [r1]
    15d8:	str	r0, [r1, #8]
    15dc:	ldr	r0, [fp, #-8]
    15e0:	ldr	r0, [r0]
    15e4:	movw	r1, #11
    15e8:	movw	r2, #0
    15ec:	movt	r2, #0
    15f0:	movw	r3, #0
    15f4:	movt	r3, #0
    15f8:	bl	1358 <register_sub_element>
    15fc:	ldr	r0, [fp, #-8]
    1600:	ldr	r0, [r0]
    1604:	movw	r1, #32
    1608:	movw	r2, #0
    160c:	movt	r2, #0
    1610:	movw	r3, #0
    1614:	movt	r3, #0
    1618:	bl	1358 <register_sub_element>
    161c:	ldr	r0, [fp, #-8]
    1620:	ldr	r0, [r0]
    1624:	movw	r1, #0
    1628:	movt	r1, #0
    162c:	str	r1, [r0, #36]	; 0x24
    1630:	movw	r0, #0
    1634:	str	r0, [fp, #-4]
    1638:	ldr	r0, [fp, #-4]
    163c:	mov	sp, fp
    1640:	pop	{fp, pc}

00001644 <data_dictionary_add_product_class>:
    1644:	push	{fp, lr}
    1648:	mov	fp, sp
    164c:	sub	sp, sp, #8
    1650:	str	r0, [sp]
    1654:	ldr	r0, [sp]
    1658:	ldr	r0, [r0]
    165c:	ldr	r0, [r0, #8]
    1660:	bl	0 <coda_data_dictionary_add_product_class>
    1664:	cmp	r0, #0
    1668:	beq	1678 <data_dictionary_add_product_class+0x34>
    166c:	mvn	r0, #0
    1670:	str	r0, [sp, #4]
    1674:	b	168c <data_dictionary_add_product_class+0x48>
    1678:	ldr	r0, [sp]
    167c:	ldr	r0, [r0]
    1680:	movw	r1, #0
    1684:	str	r1, [r0, #8]
    1688:	str	r1, [sp, #4]
    168c:	ldr	r0, [sp, #4]
    1690:	mov	sp, fp
    1694:	pop	{fp, pc}

00001698 <register_type_elements>:
    1698:	push	{fp, lr}
    169c:	mov	fp, sp
    16a0:	sub	sp, sp, #8
    16a4:	str	r0, [sp, #4]
    16a8:	str	r1, [sp]
    16ac:	ldr	r0, [sp, #4]
    16b0:	ldr	r3, [sp]
    16b4:	movw	r1, #1
    16b8:	movw	r2, #0
    16bc:	movt	r2, #0
    16c0:	bl	1358 <register_sub_element>
    16c4:	ldr	r0, [sp, #4]
    16c8:	ldr	r3, [sp]
    16cc:	movw	r1, #2
    16d0:	movw	r2, #0
    16d4:	movt	r2, #0
    16d8:	bl	1358 <register_sub_element>
    16dc:	ldr	r0, [sp, #4]
    16e0:	ldr	r3, [sp]
    16e4:	movw	r1, #3
    16e8:	movw	r2, #0
    16ec:	movt	r2, #0
    16f0:	bl	1358 <register_sub_element>
    16f4:	ldr	r0, [sp, #4]
    16f8:	ldr	r3, [sp]
    16fc:	movw	r1, #0
    1700:	movw	r2, #0
    1704:	movt	r2, #0
    1708:	bl	1358 <register_sub_element>
    170c:	ldr	r0, [sp, #4]
    1710:	ldr	r3, [sp]
    1714:	movw	r1, #9
    1718:	movw	r2, #0
    171c:	movt	r2, #0
    1720:	bl	1358 <register_sub_element>
    1724:	ldr	r0, [sp, #4]
    1728:	ldr	r3, [sp]
    172c:	movw	r1, #17
    1730:	movw	r2, #0
    1734:	movt	r2, #0
    1738:	bl	1358 <register_sub_element>
    173c:	ldr	r0, [sp, #4]
    1740:	ldr	r3, [sp]
    1744:	movw	r1, #20
    1748:	movw	r2, #0
    174c:	movt	r2, #0
    1750:	bl	1358 <register_sub_element>
    1754:	ldr	r0, [sp, #4]
    1758:	ldr	r3, [sp]
    175c:	movw	r1, #27
    1760:	movw	r2, #0
    1764:	movt	r2, #0
    1768:	bl	1358 <register_sub_element>
    176c:	ldr	r0, [sp, #4]
    1770:	ldr	r3, [sp]
    1774:	movw	r1, #34	; 0x22
    1778:	movw	r2, #0
    177c:	movt	r2, #0
    1780:	bl	1358 <register_sub_element>
    1784:	ldr	r0, [sp, #4]
    1788:	ldr	r3, [sp]
    178c:	movw	r1, #35	; 0x23
    1790:	movw	r2, #0
    1794:	movt	r2, #0
    1798:	bl	1358 <register_sub_element>
    179c:	ldr	r0, [sp, #4]
    17a0:	ldr	r3, [sp]
    17a4:	movw	r1, #37	; 0x25
    17a8:	movw	r2, #0
    17ac:	movt	r2, #0
    17b0:	bl	1358 <register_sub_element>
    17b4:	ldr	r0, [sp, #4]
    17b8:	ldr	r3, [sp]
    17bc:	movw	r1, #38	; 0x26
    17c0:	movw	r2, #0
    17c4:	movt	r2, #0
    17c8:	bl	1358 <register_sub_element>
    17cc:	ldr	r0, [sp, #4]
    17d0:	ldr	r3, [sp]
    17d4:	movw	r1, #39	; 0x27
    17d8:	movw	r2, #0
    17dc:	movt	r2, #0
    17e0:	bl	1358 <register_sub_element>
    17e4:	ldr	r0, [sp, #4]
    17e8:	ldr	r3, [sp]
    17ec:	movw	r1, #40	; 0x28
    17f0:	movw	r2, #0
    17f4:	movt	r2, #0
    17f8:	bl	1358 <register_sub_element>
    17fc:	ldr	r0, [sp, #4]
    1800:	ldr	r3, [sp]
    1804:	movw	r1, #42	; 0x2a
    1808:	movw	r2, #0
    180c:	movt	r2, #0
    1810:	bl	1358 <register_sub_element>
    1814:	mov	sp, fp
    1818:	pop	{fp, pc}

0000181c <product_class_add_named_type>:
    181c:	push	{fp, lr}
    1820:	mov	fp, sp
    1824:	sub	sp, sp, #8
    1828:	str	r0, [sp]
    182c:	ldr	r0, [sp]
    1830:	ldr	r0, [r0, #24]
    1834:	movw	r1, #0
    1838:	cmp	r0, r1
    183c:	beq	1844 <product_class_add_named_type+0x28>
    1840:	b	1864 <product_class_add_named_type+0x48>
    1844:	movw	r0, #0
    1848:	movt	r0, #0
    184c:	movw	r1, #0
    1850:	movt	r1, #0
    1854:	movw	r2, #1002	; 0x3ea
    1858:	movw	r3, #0
    185c:	movt	r3, #0
    1860:	bl	0 <__assert_fail>
    1864:	ldr	r0, [sp]
    1868:	ldr	r0, [r0, #24]
    186c:	ldr	r1, [sp]
    1870:	ldr	r1, [r1]
    1874:	ldr	r1, [r1, #8]
    1878:	bl	0 <coda_product_class_add_named_type>
    187c:	cmp	r0, #0
    1880:	beq	1890 <product_class_add_named_type+0x74>
    1884:	mvn	r0, #0
    1888:	str	r0, [sp, #4]
    188c:	b	1898 <product_class_add_named_type+0x7c>
    1890:	movw	r0, #0
    1894:	str	r0, [sp, #4]
    1898:	ldr	r0, [sp, #4]
    189c:	mov	sp, fp
    18a0:	pop	{fp, pc}

000018a4 <cd_product_definition_sub_init>:
    18a4:	push	{fp, lr}
    18a8:	mov	fp, sp
    18ac:	sub	sp, sp, #24
    18b0:	str	r0, [fp, #-8]
    18b4:	str	r1, [sp, #12]
    18b8:	ldr	r0, [fp, #-8]
    18bc:	ldr	r0, [r0, #28]
    18c0:	movw	r1, #0
    18c4:	cmp	r0, r1
    18c8:	beq	18d0 <cd_product_definition_sub_init+0x2c>
    18cc:	b	18f0 <cd_product_definition_sub_init+0x4c>
    18d0:	movw	r0, #0
    18d4:	movt	r0, #0
    18d8:	movw	r1, #0
    18dc:	movt	r1, #0
    18e0:	movw	r2, #2974	; 0xb9e
    18e4:	movw	r3, #0
    18e8:	movt	r3, #0
    18ec:	bl	0 <__assert_fail>
    18f0:	ldr	r0, [fp, #-8]
    18f4:	ldr	r0, [r0]
    18f8:	movw	r1, #0
    18fc:	movt	r1, #0
    1900:	str	r1, [r0, #40]	; 0x28
    1904:	ldr	r0, [fp, #-8]
    1908:	ldr	r0, [r0, #28]
    190c:	ldr	r1, [fp, #-8]
    1910:	ldr	r1, [r1]
    1914:	str	r0, [r1, #8]
    1918:	ldr	r0, [sp, #12]
    191c:	ldr	r1, [fp, #-8]
    1920:	ldr	r1, [r1]
    1924:	ldr	r2, [r1]
    1928:	movw	r1, #0
    192c:	movt	r1, #0
    1930:	bl	20fc <get_mandatory_attribute_value>
    1934:	str	r0, [sp, #8]
    1938:	ldr	r0, [sp, #8]
    193c:	movw	r1, #0
    1940:	cmp	r0, r1
    1944:	bne	1954 <cd_product_definition_sub_init+0xb0>
    1948:	mvn	r0, #0
    194c:	str	r0, [fp, #-4]
    1950:	b	1ae0 <cd_product_definition_sub_init+0x23c>
    1954:	ldr	r0, [fp, #-8]
    1958:	ldr	r0, [r0, #28]
    195c:	ldr	r0, [r0, #8]
    1960:	ldr	r1, [sp, #8]
    1964:	bl	0 <strcmp>
    1968:	cmp	r0, #0
    196c:	beq	199c <cd_product_definition_sub_init+0xf8>
    1970:	ldr	r0, [pc, #372]	; 1aec <cd_product_definition_sub_init+0x248>
    1974:	ldr	r2, [sp, #8]
    1978:	ldr	r1, [fp, #-8]
    197c:	ldr	r1, [r1, #28]
    1980:	ldr	r3, [r1, #8]
    1984:	movw	r1, #0
    1988:	movt	r1, #0
    198c:	bl	0 <coda_set_error>
    1990:	mvn	r0, #0
    1994:	str	r0, [fp, #-4]
    1998:	b	1ae0 <cd_product_definition_sub_init+0x23c>
    199c:	ldr	r0, [sp, #12]
    19a0:	ldr	r1, [fp, #-8]
    19a4:	ldr	r1, [r1]
    19a8:	ldr	r2, [r1]
    19ac:	movw	r1, #0
    19b0:	movt	r1, #0
    19b4:	bl	20fc <get_mandatory_attribute_value>
    19b8:	str	r0, [sp, #4]
    19bc:	ldr	r0, [sp, #4]
    19c0:	movw	r1, #0
    19c4:	cmp	r0, r1
    19c8:	bne	19d8 <cd_product_definition_sub_init+0x134>
    19cc:	mvn	r0, #0
    19d0:	str	r0, [fp, #-4]
    19d4:	b	1ae0 <cd_product_definition_sub_init+0x23c>
    19d8:	ldr	r0, [sp, #4]
    19dc:	ldr	r1, [fp, #-8]
    19e0:	ldr	r1, [r1]
    19e4:	add	r1, r1, #44	; 0x2c
    19e8:	bl	0 <coda_format_from_string>
    19ec:	cmp	r0, #0
    19f0:	beq	1a00 <cd_product_definition_sub_init+0x15c>
    19f4:	mvn	r0, #0
    19f8:	str	r0, [fp, #-4]
    19fc:	b	1ae0 <cd_product_definition_sub_init+0x23c>
    1a00:	ldr	r0, [fp, #-8]
    1a04:	ldr	r0, [r0]
    1a08:	movw	r1, #1
    1a0c:	str	r1, [r0, #48]	; 0x30
    1a10:	ldr	r0, [fp, #-8]
    1a14:	ldr	r0, [r0, #28]
    1a18:	ldr	r0, [r0]
    1a1c:	ldr	r1, [fp, #-8]
    1a20:	ldr	r1, [r1]
    1a24:	ldr	r1, [r1, #44]	; 0x2c
    1a28:	cmp	r0, r1
    1a2c:	beq	1a58 <cd_product_definition_sub_init+0x1b4>
    1a30:	ldr	r0, [pc, #180]	; 1aec <cd_product_definition_sub_init+0x248>
    1a34:	ldr	r1, [fp, #-8]
    1a38:	ldr	r1, [r1, #28]
    1a3c:	ldr	r2, [r1, #8]
    1a40:	movw	r1, #0
    1a44:	movt	r1, #0
    1a48:	bl	0 <coda_set_error>
    1a4c:	mvn	r0, #0
    1a50:	str	r0, [fp, #-4]
    1a54:	b	1ae0 <cd_product_definition_sub_init+0x23c>
    1a58:	ldr	r0, [fp, #-8]
    1a5c:	ldr	r0, [r0, #28]
    1a60:	ldr	r0, [r0]
    1a64:	cmp	r0, #2
    1a68:	bne	1a90 <cd_product_definition_sub_init+0x1ec>
    1a6c:	ldr	r0, [fp, #-8]
    1a70:	ldr	r0, [r0]
    1a74:	movw	r1, #35	; 0x23
    1a78:	movw	r2, #0
    1a7c:	movt	r2, #0
    1a80:	movw	r3, #0
    1a84:	movt	r3, #0
    1a88:	bl	1358 <register_sub_element>
    1a8c:	b	1aa4 <cd_product_definition_sub_init+0x200>
    1a90:	ldr	r0, [fp, #-8]
    1a94:	ldr	r0, [r0]
    1a98:	movw	r1, #0
    1a9c:	movt	r1, #0
    1aa0:	bl	1698 <register_type_elements>
    1aa4:	ldr	r0, [fp, #-8]
    1aa8:	ldr	r0, [r0]
    1aac:	movw	r1, #33	; 0x21
    1ab0:	movw	r2, #0
    1ab4:	movt	r2, #0
    1ab8:	movw	r3, #0
    1abc:	movt	r3, #0
    1ac0:	bl	1358 <register_sub_element>
    1ac4:	ldr	r0, [fp, #-8]
    1ac8:	ldr	r0, [r0]
    1acc:	movw	r1, #0
    1ad0:	movt	r1, #0
    1ad4:	str	r1, [r0, #36]	; 0x24
    1ad8:	movw	r0, #0
    1adc:	str	r0, [fp, #-4]
    1ae0:	ldr	r0, [fp, #-4]
    1ae4:	mov	sp, fp
    1ae8:	pop	{fp, pc}
    1aec:	.word	0xfffffe70

00001af0 <xml_element_name>:
    1af0:	sub	sp, sp, #12
    1af4:	str	r0, [sp, #4]
    1af8:	ldr	r0, [sp, #4]
    1afc:	cmn	r0, #1
    1b00:	bne	1b14 <xml_element_name+0x24>
    1b04:	movw	r0, #0
    1b08:	movt	r0, #0
    1b0c:	str	r0, [sp, #8]
    1b10:	b	1b60 <xml_element_name+0x70>
    1b14:	ldr	r0, [sp, #4]
    1b18:	movw	r1, #0
    1b1c:	movt	r1, #0
    1b20:	add	r0, r1, r0, lsl #2
    1b24:	ldr	r0, [r0]
    1b28:	str	r0, [sp]
    1b2c:	ldr	r0, [sp]
    1b30:	ldrb	r0, [r0]
    1b34:	cmp	r0, #32
    1b38:	beq	1b4c <xml_element_name+0x5c>
    1b3c:	ldr	r0, [sp]
    1b40:	add	r0, r0, #1
    1b44:	str	r0, [sp]
    1b48:	b	1b2c <xml_element_name+0x3c>
    1b4c:	ldr	r0, [sp]
    1b50:	add	r0, r0, #1
    1b54:	str	r0, [sp]
    1b58:	ldr	r0, [sp]
    1b5c:	str	r0, [sp, #8]
    1b60:	ldr	r0, [sp, #8]
    1b64:	add	sp, sp, #12
    1b68:	bx	lr

00001b6c <abort_parser>:
    1b6c:	push	{fp, lr}
    1b70:	mov	fp, sp
    1b74:	sub	sp, sp, #8
    1b78:	str	r0, [sp, #4]
    1b7c:	ldr	r0, [sp, #4]
    1b80:	ldr	r0, [r0, #4]
    1b84:	movw	r1, #0
    1b88:	and	r1, r1, #255	; 0xff
    1b8c:	bl	0 <coda_XML_StopParser>
    1b90:	ldr	r1, [sp, #4]
    1b94:	movw	lr, #1
    1b98:	str	lr, [r1, #36]	; 0x24
    1b9c:	str	r0, [sp]
    1ba0:	mov	sp, fp
    1ba4:	pop	{fp, pc}

00001ba8 <pop_node>:
    1ba8:	push	{fp, lr}
    1bac:	mov	fp, sp
    1bb0:	sub	sp, sp, #24
    1bb4:	str	r0, [fp, #-8]
    1bb8:	ldr	r0, [fp, #-8]
    1bbc:	ldr	r0, [r0]
    1bc0:	str	r0, [sp, #12]
    1bc4:	ldr	r0, [sp, #12]
    1bc8:	movw	r1, #0
    1bcc:	cmp	r0, r1
    1bd0:	beq	1bd8 <pop_node+0x30>
    1bd4:	b	1bf8 <pop_node+0x50>
    1bd8:	movw	r0, #0
    1bdc:	movt	r0, #0
    1be0:	movw	r1, #0
    1be4:	movt	r1, #0
    1be8:	movw	r2, #3917	; 0xf4d
    1bec:	movw	r3, #0
    1bf0:	movt	r3, #0
    1bf4:	bl	0 <__assert_fail>
    1bf8:	ldr	r0, [sp, #12]
    1bfc:	ldr	r0, [r0, #36]	; 0x24
    1c00:	movw	r1, #0
    1c04:	cmp	r0, r1
    1c08:	beq	1c40 <pop_node+0x98>
    1c0c:	ldr	r0, [sp, #12]
    1c10:	ldr	r0, [r0, #36]	; 0x24
    1c14:	ldr	r1, [fp, #-8]
    1c18:	str	r0, [sp, #8]
    1c1c:	mov	r0, r1
    1c20:	ldr	r1, [sp, #8]
    1c24:	blx	r1
    1c28:	cmp	r0, #0
    1c2c:	beq	1c3c <pop_node+0x94>
    1c30:	mvn	r0, #0
    1c34:	str	r0, [fp, #-4]
    1c38:	b	1dbc <pop_node+0x214>
    1c3c:	b	1c40 <pop_node+0x98>
    1c40:	ldr	r0, [sp, #12]
    1c44:	ldr	r0, [r0, #396]	; 0x18c
    1c48:	movw	r1, #0
    1c4c:	cmp	r0, r1
    1c50:	beq	1cbc <pop_node+0x114>
    1c54:	ldr	r0, [sp, #12]
    1c58:	ldr	r1, [r0]
    1c5c:	ldr	r0, [r0, #396]	; 0x18c
    1c60:	add	r0, r0, #224	; 0xe0
    1c64:	add	r0, r0, r1, lsl #2
    1c68:	ldr	r0, [r0]
    1c6c:	movw	r1, #0
    1c70:	cmp	r0, r1
    1c74:	beq	1cbc <pop_node+0x114>
    1c78:	ldr	r0, [sp, #12]
    1c7c:	ldr	r1, [r0]
    1c80:	ldr	r0, [r0, #396]	; 0x18c
    1c84:	add	r0, r0, #224	; 0xe0
    1c88:	add	r0, r0, r1, lsl #2
    1c8c:	ldr	r0, [r0]
    1c90:	ldr	r1, [fp, #-8]
    1c94:	str	r0, [sp, #4]
    1c98:	mov	r0, r1
    1c9c:	ldr	r1, [sp, #4]
    1ca0:	blx	r1
    1ca4:	cmp	r0, #0
    1ca8:	beq	1cb8 <pop_node+0x110>
    1cac:	mvn	r0, #0
    1cb0:	str	r0, [fp, #-4]
    1cb4:	b	1dbc <pop_node+0x214>
    1cb8:	b	1cbc <pop_node+0x114>
    1cbc:	ldr	r0, [sp, #12]
    1cc0:	ldr	r0, [r0, #8]
    1cc4:	movw	r1, #0
    1cc8:	cmp	r0, r1
    1ccc:	beq	1d28 <pop_node+0x180>
    1cd0:	ldr	r0, [sp, #12]
    1cd4:	ldr	r0, [r0, #40]	; 0x28
    1cd8:	movw	r1, #0
    1cdc:	cmp	r0, r1
    1ce0:	beq	1ce8 <pop_node+0x140>
    1ce4:	b	1d08 <pop_node+0x160>
    1ce8:	movw	r0, #0
    1cec:	movt	r0, #0
    1cf0:	movw	r1, #0
    1cf4:	movt	r1, #0
    1cf8:	movw	r2, #3937	; 0xf61
    1cfc:	movw	r3, #0
    1d00:	movt	r3, #0
    1d04:	bl	0 <__assert_fail>
    1d08:	ldr	r0, [sp, #12]
    1d0c:	ldr	r0, [r0, #40]	; 0x28
    1d10:	ldr	r1, [sp, #12]
    1d14:	ldr	r1, [r1, #8]
    1d18:	str	r0, [sp]
    1d1c:	mov	r0, r1
    1d20:	ldr	r1, [sp]
    1d24:	blx	r1
    1d28:	ldr	r0, [sp, #12]
    1d2c:	ldr	r0, [r0, #12]
    1d30:	movw	r1, #0
    1d34:	cmp	r0, r1
    1d38:	beq	1d48 <pop_node+0x1a0>
    1d3c:	ldr	r0, [sp, #12]
    1d40:	ldr	r0, [r0, #12]
    1d44:	bl	0 <free>
    1d48:	ldr	r0, [sp, #12]
    1d4c:	ldr	r0, [r0, #396]	; 0x18c
    1d50:	ldr	r1, [fp, #-8]
    1d54:	str	r0, [r1]
    1d58:	ldr	r0, [sp, #12]
    1d5c:	bl	0 <free>
    1d60:	ldr	r0, [fp, #-8]
    1d64:	ldr	r0, [r0]
    1d68:	movw	r1, #0
    1d6c:	cmp	r0, r1
    1d70:	beq	1da0 <pop_node+0x1f8>
    1d74:	ldr	r0, [fp, #-8]
    1d78:	ldr	r0, [r0]
    1d7c:	ldr	r0, [r0, #32]
    1d80:	cmp	r0, #0
    1d84:	beq	1da0 <pop_node+0x1f8>
    1d88:	ldr	r0, [fp, #-8]
    1d8c:	ldr	r0, [r0, #4]
    1d90:	movw	r1, #0
    1d94:	movt	r1, #0
    1d98:	bl	0 <coda_XML_SetCharacterDataHandler>
    1d9c:	b	1db4 <pop_node+0x20c>
    1da0:	ldr	r0, [fp, #-8]
    1da4:	ldr	r0, [r0, #4]
    1da8:	movw	r1, #0
    1dac:	movt	r1, #0
    1db0:	bl	0 <coda_XML_SetCharacterDataHandler>
    1db4:	movw	r0, #0
    1db8:	str	r0, [fp, #-4]
    1dbc:	ldr	r0, [fp, #-4]
    1dc0:	mov	sp, fp
    1dc4:	pop	{fp, pc}

00001dc8 <string_handler>:
    1dc8:	push	{fp, lr}
    1dcc:	mov	fp, sp
    1dd0:	sub	sp, sp, #32
    1dd4:	str	r0, [fp, #-4]
    1dd8:	str	r1, [fp, #-8]
    1ddc:	str	r2, [fp, #-12]
    1de0:	ldr	r0, [fp, #-4]
    1de4:	str	r0, [sp, #16]
    1de8:	ldr	r0, [sp, #16]
    1dec:	ldr	r0, [r0, #48]	; 0x30
    1df0:	cmp	r0, #0
    1df4:	ble	1dfc <string_handler+0x34>
    1df8:	b	1f94 <string_handler+0x1cc>
    1dfc:	ldr	r0, [sp, #16]
    1e00:	ldr	r0, [r0]
    1e04:	ldr	r0, [r0, #12]
    1e08:	movw	r1, #0
    1e0c:	cmp	r0, r1
    1e10:	bne	1eb0 <string_handler+0xe8>
    1e14:	ldr	r0, [fp, #-12]
    1e18:	add	r0, r0, #1
    1e1c:	bl	0 <malloc>
    1e20:	ldr	lr, [sp, #16]
    1e24:	ldr	lr, [lr]
    1e28:	str	r0, [lr, #12]
    1e2c:	ldr	r0, [sp, #16]
    1e30:	ldr	r0, [r0]
    1e34:	ldr	r0, [r0, #12]
    1e38:	movw	lr, #0
    1e3c:	cmp	r0, lr
    1e40:	bne	1e78 <string_handler+0xb0>
    1e44:	ldr	r0, [fp, #-12]
    1e48:	add	r2, r0, #1
    1e4c:	mvn	r0, #0
    1e50:	movw	r1, #0
    1e54:	movt	r1, #0
    1e58:	movw	r3, #0
    1e5c:	movt	r3, #0
    1e60:	movw	ip, #3841	; 0xf01
    1e64:	str	ip, [sp]
    1e68:	bl	0 <coda_set_error>
    1e6c:	ldr	r0, [sp, #16]
    1e70:	bl	1b6c <abort_parser>
    1e74:	b	1f94 <string_handler+0x1cc>
    1e78:	ldr	r0, [sp, #16]
    1e7c:	ldr	r0, [r0]
    1e80:	ldr	r0, [r0, #12]
    1e84:	ldr	r1, [fp, #-8]
    1e88:	ldr	r2, [fp, #-12]
    1e8c:	bl	0 <memcpy>
    1e90:	ldr	r0, [sp, #16]
    1e94:	ldr	r0, [r0]
    1e98:	ldr	r0, [r0, #12]
    1e9c:	ldr	r1, [fp, #-12]
    1ea0:	add	r0, r0, r1
    1ea4:	movw	r1, #0
    1ea8:	strb	r1, [r0]
    1eac:	b	1f94 <string_handler+0x1cc>
    1eb0:	ldr	r0, [sp, #16]
    1eb4:	ldr	r0, [r0]
    1eb8:	ldr	r0, [r0, #12]
    1ebc:	bl	0 <strlen>
    1ec0:	str	r0, [sp, #8]
    1ec4:	ldr	r0, [sp, #8]
    1ec8:	ldr	lr, [fp, #-12]
    1ecc:	add	r0, r0, lr
    1ed0:	add	r0, r0, #1
    1ed4:	bl	0 <malloc>
    1ed8:	str	r0, [sp, #12]
    1edc:	ldr	r0, [sp, #12]
    1ee0:	movw	lr, #0
    1ee4:	cmp	r0, lr
    1ee8:	bne	1f28 <string_handler+0x160>
    1eec:	ldr	r0, [sp, #8]
    1ef0:	ldr	r1, [fp, #-12]
    1ef4:	add	r0, r0, r1
    1ef8:	add	r2, r0, #1
    1efc:	mvn	r0, #0
    1f00:	movw	r1, #0
    1f04:	movt	r1, #0
    1f08:	movw	r3, #0
    1f0c:	movt	r3, #0
    1f10:	movw	ip, #3857	; 0xf11
    1f14:	str	ip, [sp]
    1f18:	bl	0 <coda_set_error>
    1f1c:	ldr	r0, [sp, #16]
    1f20:	bl	1b6c <abort_parser>
    1f24:	b	1f94 <string_handler+0x1cc>
    1f28:	ldr	r0, [sp, #12]
    1f2c:	ldr	r1, [sp, #16]
    1f30:	ldr	r1, [r1]
    1f34:	ldr	r1, [r1, #12]
    1f38:	ldr	r2, [sp, #8]
    1f3c:	bl	0 <memcpy>
    1f40:	ldr	r0, [sp, #12]
    1f44:	ldr	r1, [sp, #8]
    1f48:	add	r0, r0, r1
    1f4c:	ldr	r1, [fp, #-8]
    1f50:	ldr	r2, [fp, #-12]
    1f54:	bl	0 <memcpy>
    1f58:	ldr	r0, [sp, #12]
    1f5c:	ldr	r1, [sp, #8]
    1f60:	ldr	r2, [fp, #-12]
    1f64:	add	r1, r1, r2
    1f68:	add	r0, r0, r1
    1f6c:	movw	r1, #0
    1f70:	strb	r1, [r0]
    1f74:	ldr	r0, [sp, #16]
    1f78:	ldr	r0, [r0]
    1f7c:	ldr	r0, [r0, #12]
    1f80:	bl	0 <free>
    1f84:	ldr	r0, [sp, #12]
    1f88:	ldr	r1, [sp, #16]
    1f8c:	ldr	r1, [r1]
    1f90:	str	r0, [r1, #12]
    1f94:	mov	sp, fp
    1f98:	pop	{fp, pc}

00001f9c <whitespace_handler>:
    1f9c:	push	{fp, lr}
    1fa0:	mov	fp, sp
    1fa4:	sub	sp, sp, #16
    1fa8:	str	r0, [fp, #-4]
    1fac:	str	r1, [sp, #8]
    1fb0:	str	r2, [sp, #4]
    1fb4:	ldr	r0, [fp, #-4]
    1fb8:	str	r0, [sp]
    1fbc:	ldr	r0, [sp]
    1fc0:	ldr	r0, [r0, #48]	; 0x30
    1fc4:	cmp	r0, #0
    1fc8:	ble	1fd0 <whitespace_handler+0x34>
    1fcc:	b	1ffc <whitespace_handler+0x60>
    1fd0:	ldr	r0, [sp, #8]
    1fd4:	ldr	r1, [sp, #4]
    1fd8:	bl	2008 <is_whitespace>
    1fdc:	cmp	r0, #0
    1fe0:	bne	1ffc <whitespace_handler+0x60>
    1fe4:	ldr	r0, [pc, #24]	; 2004 <whitespace_handler+0x68>
    1fe8:	movw	r1, #0
    1fec:	movt	r1, #0
    1ff0:	bl	0 <coda_set_error>
    1ff4:	ldr	r0, [sp]
    1ff8:	bl	1b6c <abort_parser>
    1ffc:	mov	sp, fp
    2000:	pop	{fp, pc}
    2004:	.word	0xfffffe70

00002008 <is_whitespace>:
    2008:	push	{fp, lr}
    200c:	mov	fp, sp
    2010:	sub	sp, sp, #16
    2014:	str	r0, [sp, #8]
    2018:	str	r1, [sp, #4]
    201c:	ldr	r0, [sp, #8]
    2020:	movw	r1, #0
    2024:	cmp	r0, r1
    2028:	beq	2030 <is_whitespace+0x28>
    202c:	b	2050 <is_whitespace+0x48>
    2030:	movw	r0, #0
    2034:	movt	r0, #0
    2038:	movw	r1, #0
    203c:	movt	r1, #0
    2040:	movw	r2, #290	; 0x122
    2044:	movw	r3, #0
    2048:	movt	r3, #0
    204c:	bl	0 <__assert_fail>
    2050:	movw	r0, #0
    2054:	str	r0, [sp]
    2058:	ldr	r0, [sp]
    205c:	ldr	r1, [sp, #4]
    2060:	cmp	r0, r1
    2064:	bge	20e8 <is_whitespace+0xe0>
    2068:	ldr	r0, [sp, #8]
    206c:	ldr	r1, [sp]
    2070:	add	r0, r0, r1
    2074:	ldrb	r0, [r0]
    2078:	cmp	r0, #32
    207c:	beq	20d4 <is_whitespace+0xcc>
    2080:	ldr	r0, [sp, #8]
    2084:	ldr	r1, [sp]
    2088:	add	r0, r0, r1
    208c:	ldrb	r0, [r0]
    2090:	cmp	r0, #9
    2094:	beq	20d4 <is_whitespace+0xcc>
    2098:	ldr	r0, [sp, #8]
    209c:	ldr	r1, [sp]
    20a0:	add	r0, r0, r1
    20a4:	ldrb	r0, [r0]
    20a8:	cmp	r0, #10
    20ac:	beq	20d4 <is_whitespace+0xcc>
    20b0:	ldr	r0, [sp, #8]
    20b4:	ldr	r1, [sp]
    20b8:	add	r0, r0, r1
    20bc:	ldrb	r0, [r0]
    20c0:	cmp	r0, #13
    20c4:	beq	20d4 <is_whitespace+0xcc>
    20c8:	movw	r0, #0
    20cc:	str	r0, [fp, #-4]
    20d0:	b	20f0 <is_whitespace+0xe8>
    20d4:	b	20d8 <is_whitespace+0xd0>
    20d8:	ldr	r0, [sp]
    20dc:	add	r0, r0, #1
    20e0:	str	r0, [sp]
    20e4:	b	2058 <is_whitespace+0x50>
    20e8:	movw	r0, #1
    20ec:	str	r0, [fp, #-4]
    20f0:	ldr	r0, [fp, #-4]
    20f4:	mov	sp, fp
    20f8:	pop	{fp, pc}

000020fc <get_mandatory_attribute_value>:
    20fc:	push	{fp, lr}
    2100:	mov	fp, sp
    2104:	sub	sp, sp, #24
    2108:	str	r0, [fp, #-4]
    210c:	str	r1, [fp, #-8]
    2110:	str	r2, [sp, #12]
    2114:	ldr	r0, [fp, #-4]
    2118:	ldr	r1, [fp, #-8]
    211c:	bl	250c <get_attribute_value>
    2120:	str	r0, [sp, #8]
    2124:	ldr	r0, [sp, #8]
    2128:	movw	r1, #0
    212c:	cmp	r0, r1
    2130:	bne	2164 <get_mandatory_attribute_value+0x68>
    2134:	ldr	r2, [fp, #-8]
    2138:	ldr	r0, [sp, #12]
    213c:	str	r2, [sp, #4]
    2140:	bl	1af0 <xml_element_name>
    2144:	ldr	r2, [pc, #36]	; 2170 <get_mandatory_attribute_value+0x74>
    2148:	str	r0, [sp]
    214c:	mov	r0, r2
    2150:	movw	r1, #0
    2154:	movt	r1, #0
    2158:	ldr	r2, [sp, #4]
    215c:	ldr	r3, [sp]
    2160:	bl	0 <coda_set_error>
    2164:	ldr	r0, [sp, #8]
    2168:	mov	sp, fp
    216c:	pop	{fp, pc}
    2170:	.word	0xfffffe70

00002174 <get_product_class_revision>:
    2174:	push	{fp, lr}
    2178:	mov	fp, sp
    217c:	sub	sp, sp, #40	; 0x28
    2180:	str	r0, [fp, #-8]
    2184:	str	r1, [fp, #-12]
    2188:	ldr	r0, [fp, #-8]
    218c:	ldr	r0, [r0, #16]
    2190:	movw	r1, #0
    2194:	movt	r1, #0
    2198:	bl	0 <coda_za_get_entry_by_name>
    219c:	str	r0, [fp, #-16]
    21a0:	ldr	r0, [fp, #-16]
    21a4:	movw	r1, #0
    21a8:	cmp	r0, r1
    21ac:	bne	21c4 <get_product_class_revision+0x50>
    21b0:	ldr	r0, [fp, #-12]
    21b4:	movw	r1, #0
    21b8:	str	r1, [r0]
    21bc:	str	r1, [fp, #-4]
    21c0:	b	22d4 <get_product_class_revision+0x160>
    21c4:	ldr	r0, [fp, #-16]
    21c8:	bl	0 <coda_za_get_entry_size>
    21cc:	str	r0, [sp, #16]
    21d0:	ldr	r0, [sp, #16]
    21d4:	cmp	r0, #0
    21d8:	bne	21f0 <get_product_class_revision+0x7c>
    21dc:	ldr	r0, [fp, #-12]
    21e0:	movw	r1, #0
    21e4:	str	r1, [r0]
    21e8:	str	r1, [fp, #-4]
    21ec:	b	22d4 <get_product_class_revision+0x160>
    21f0:	ldr	r0, [sp, #16]
    21f4:	add	r0, r0, #1
    21f8:	bl	0 <malloc>
    21fc:	str	r0, [sp, #20]
    2200:	ldr	r0, [sp, #20]
    2204:	movw	lr, #0
    2208:	cmp	r0, lr
    220c:	bne	2244 <get_product_class_revision+0xd0>
    2210:	ldr	r0, [sp, #16]
    2214:	add	r2, r0, #1
    2218:	mvn	r0, #0
    221c:	movw	r1, #0
    2220:	movt	r1, #0
    2224:	movw	r3, #0
    2228:	movt	r3, #0
    222c:	movw	ip, #2774	; 0xad6
    2230:	str	ip, [sp]
    2234:	bl	0 <coda_set_error>
    2238:	mvn	r0, #0
    223c:	str	r0, [fp, #-4]
    2240:	b	22d4 <get_product_class_revision+0x160>
    2244:	ldr	r0, [fp, #-16]
    2248:	ldr	r1, [sp, #20]
    224c:	bl	0 <coda_za_read_entry>
    2250:	cmp	r0, #0
    2254:	beq	226c <get_product_class_revision+0xf8>
    2258:	ldr	r0, [sp, #20]
    225c:	bl	0 <free>
    2260:	mvn	r0, #0
    2264:	str	r0, [fp, #-4]
    2268:	b	22d4 <get_product_class_revision+0x160>
    226c:	ldr	r0, [sp, #20]
    2270:	ldr	r1, [sp, #16]
    2274:	add	r0, r0, r1
    2278:	movw	r1, #0
    227c:	strb	r1, [r0]
    2280:	ldr	r0, [sp, #20]
    2284:	ldr	r1, [sp, #16]
    2288:	add	r2, sp, #8
    228c:	movw	r3, #1
    2290:	bl	0 <coda_ascii_parse_int64>
    2294:	cmp	r0, #0
    2298:	bge	22b8 <get_product_class_revision+0x144>
    229c:	ldr	r0, [sp, #20]
    22a0:	bl	0 <free>
    22a4:	ldr	r0, [fp, #-12]
    22a8:	movw	lr, #0
    22ac:	str	lr, [r0]
    22b0:	str	lr, [fp, #-4]
    22b4:	b	22d4 <get_product_class_revision+0x160>
    22b8:	ldr	r0, [sp, #20]
    22bc:	bl	0 <free>
    22c0:	ldr	r0, [sp, #8]
    22c4:	ldr	lr, [fp, #-12]
    22c8:	str	r0, [lr]
    22cc:	movw	r0, #0
    22d0:	str	r0, [fp, #-4]
    22d4:	ldr	r0, [fp, #-4]
    22d8:	mov	sp, fp
    22dc:	pop	{fp, pc}

000022e0 <string_data_init>:
    22e0:	sub	sp, sp, #8
    22e4:	str	r0, [sp, #4]
    22e8:	str	r1, [sp]
    22ec:	ldr	r0, [sp, #4]
    22f0:	ldr	r0, [r0]
    22f4:	movw	r1, #1
    22f8:	str	r1, [r0, #32]
    22fc:	ldr	r0, [sp, #4]
    2300:	ldr	r0, [r0]
    2304:	movw	r1, #0
    2308:	movt	r1, #0
    230c:	str	r1, [r0, #36]	; 0x24
    2310:	movw	r0, #0
    2314:	add	sp, sp, #8
    2318:	bx	lr

0000231c <cd_product_class_set_description>:
    231c:	push	{fp, lr}
    2320:	mov	fp, sp
    2324:	sub	sp, sp, #8
    2328:	str	r0, [sp]
    232c:	ldr	r0, [sp]
    2330:	ldr	r0, [r0]
    2334:	ldr	r0, [r0, #12]
    2338:	movw	r1, #0
    233c:	cmp	r0, r1
    2340:	bne	2368 <cd_product_class_set_description+0x4c>
    2344:	ldr	r0, [sp]
    2348:	ldr	r0, [r0]
    234c:	ldr	r0, [r0, #396]	; 0x18c
    2350:	ldr	r0, [r0, #8]
    2354:	movw	r1, #0
    2358:	movt	r1, #0
    235c:	bl	0 <coda_product_class_set_description>
    2360:	str	r0, [sp, #4]
    2364:	b	238c <cd_product_class_set_description+0x70>
    2368:	ldr	r0, [sp]
    236c:	ldr	r0, [r0]
    2370:	ldr	r0, [r0, #396]	; 0x18c
    2374:	ldr	r0, [r0, #8]
    2378:	ldr	r1, [sp]
    237c:	ldr	r1, [r1]
    2380:	ldr	r1, [r1, #12]
    2384:	bl	0 <coda_product_class_set_description>
    2388:	str	r0, [sp, #4]
    238c:	ldr	r0, [sp, #4]
    2390:	mov	sp, fp
    2394:	pop	{fp, pc}

00002398 <cd_product_type_init>:
    2398:	push	{fp, lr}
    239c:	mov	fp, sp
    23a0:	sub	sp, sp, #16
    23a4:	str	r0, [sp, #8]
    23a8:	str	r1, [sp, #4]
    23ac:	ldr	r0, [sp, #4]
    23b0:	ldr	r1, [sp, #8]
    23b4:	ldr	r1, [r1]
    23b8:	ldr	r2, [r1]
    23bc:	movw	r1, #0
    23c0:	movt	r1, #0
    23c4:	bl	20fc <get_mandatory_attribute_value>
    23c8:	str	r0, [sp]
    23cc:	ldr	r0, [sp]
    23d0:	movw	r1, #0
    23d4:	cmp	r0, r1
    23d8:	bne	23e8 <cd_product_type_init+0x50>
    23dc:	mvn	r0, #0
    23e0:	str	r0, [fp, #-4]
    23e4:	b	247c <cd_product_type_init+0xe4>
    23e8:	movw	r0, #0
    23ec:	movt	r0, #0
    23f0:	ldr	r1, [sp, #8]
    23f4:	ldr	r1, [r1]
    23f8:	str	r0, [r1, #40]	; 0x28
    23fc:	ldr	r0, [sp]
    2400:	bl	0 <coda_product_type_new>
    2404:	ldr	r1, [sp, #8]
    2408:	ldr	r1, [r1]
    240c:	str	r0, [r1, #8]
    2410:	ldr	r0, [sp, #8]
    2414:	ldr	r0, [r0]
    2418:	ldr	r0, [r0, #8]
    241c:	movw	r1, #0
    2420:	cmp	r0, r1
    2424:	bne	2434 <cd_product_type_init+0x9c>
    2428:	mvn	r0, #0
    242c:	str	r0, [fp, #-4]
    2430:	b	247c <cd_product_type_init+0xe4>
    2434:	ldr	r0, [sp, #8]
    2438:	ldr	r0, [r0]
    243c:	movw	r1, #11
    2440:	movw	r2, #0
    2444:	movt	r2, #0
    2448:	movw	r3, #0
    244c:	movt	r3, #0
    2450:	bl	1358 <register_sub_element>
    2454:	ldr	r0, [sp, #8]
    2458:	ldr	r0, [r0]
    245c:	movw	r1, #31
    2460:	movw	r2, #0
    2464:	movt	r2, #0
    2468:	movw	r3, #0
    246c:	movt	r3, #0
    2470:	bl	1358 <register_sub_element>
    2474:	movw	r0, #0
    2478:	str	r0, [fp, #-4]
    247c:	ldr	r0, [fp, #-4]
    2480:	mov	sp, fp
    2484:	pop	{fp, pc}

00002488 <cd_product_class_add_product_type>:
    2488:	push	{fp, lr}
    248c:	mov	fp, sp
    2490:	sub	sp, sp, #8
    2494:	str	r0, [sp]
    2498:	ldr	r0, [sp]
    249c:	ldr	r0, [r0]
    24a0:	ldr	r0, [r0, #396]	; 0x18c
    24a4:	ldr	r0, [r0, #8]
    24a8:	ldr	r1, [sp]
    24ac:	ldr	r1, [r1]
    24b0:	ldr	r1, [r1, #8]
    24b4:	bl	0 <coda_product_class_add_product_type>
    24b8:	cmp	r0, #0
    24bc:	beq	24cc <cd_product_class_add_product_type+0x44>
    24c0:	mvn	r0, #0
    24c4:	str	r0, [sp, #4]
    24c8:	b	24e0 <cd_product_class_add_product_type+0x58>
    24cc:	ldr	r0, [sp]
    24d0:	ldr	r0, [r0]
    24d4:	movw	r1, #0
    24d8:	str	r1, [r0, #8]
    24dc:	str	r1, [sp, #4]
    24e0:	ldr	r0, [sp, #4]
    24e4:	mov	sp, fp
    24e8:	pop	{fp, pc}

000024ec <cd_product_class_finalise>:
    24ec:	sub	sp, sp, #4
    24f0:	str	r0, [sp]
    24f4:	ldr	r0, [sp]
    24f8:	movw	r1, #0
    24fc:	str	r1, [r0, #24]
    2500:	mov	r0, r1
    2504:	add	sp, sp, #4
    2508:	bx	lr

0000250c <get_attribute_value>:
    250c:	push	{fp, lr}
    2510:	mov	fp, sp
    2514:	sub	sp, sp, #16
    2518:	str	r0, [sp, #8]
    251c:	str	r1, [sp, #4]
    2520:	ldr	r0, [sp, #8]
    2524:	ldr	r0, [r0]
    2528:	movw	r1, #0
    252c:	cmp	r0, r1
    2530:	beq	256c <get_attribute_value+0x60>
    2534:	ldr	r0, [sp, #8]
    2538:	ldr	r0, [r0]
    253c:	ldr	r1, [sp, #4]
    2540:	bl	0 <strcmp>
    2544:	cmp	r0, #0
    2548:	bne	255c <get_attribute_value+0x50>
    254c:	ldr	r0, [sp, #8]
    2550:	ldr	r0, [r0, #4]
    2554:	str	r0, [fp, #-4]
    2558:	b	2574 <get_attribute_value+0x68>
    255c:	ldr	r0, [sp, #8]
    2560:	add	r0, r0, #8
    2564:	str	r0, [sp, #8]
    2568:	b	2520 <get_attribute_value+0x14>
    256c:	movw	r0, #0
    2570:	str	r0, [fp, #-4]
    2574:	ldr	r0, [fp, #-4]
    2578:	mov	sp, fp
    257c:	pop	{fp, pc}

00002580 <string_data_finalise>:
    2580:	push	{fp, lr}
    2584:	mov	fp, sp
    2588:	sub	sp, sp, #8
    258c:	str	r0, [sp, #4]
    2590:	ldr	r0, [sp, #4]
    2594:	ldr	r0, [r0]
    2598:	ldr	r0, [r0, #12]
    259c:	bl	25b4 <decode_xml_string>
    25a0:	movw	lr, #0
    25a4:	str	r0, [sp]
    25a8:	mov	r0, lr
    25ac:	mov	sp, fp
    25b0:	pop	{fp, pc}

000025b4 <decode_xml_string>:
    25b4:	push	{fp, lr}
    25b8:	mov	fp, sp
    25bc:	sub	sp, sp, #16
    25c0:	str	r0, [sp, #8]
    25c4:	ldr	r0, [sp, #8]
    25c8:	movw	r1, #0
    25cc:	cmp	r0, r1
    25d0:	bne	25e0 <decode_xml_string+0x2c>
    25d4:	movw	r0, #0
    25d8:	str	r0, [fp, #-4]
    25dc:	b	285c <decode_xml_string+0x2a8>
    25e0:	movw	r0, #0
    25e4:	str	r0, [sp, #4]
    25e8:	str	r0, [sp]
    25ec:	ldr	r0, [sp, #8]
    25f0:	ldr	r1, [sp, #4]
    25f4:	add	r0, r0, r1
    25f8:	ldrb	r0, [r0]
    25fc:	cmp	r0, #0
    2600:	beq	2840 <decode_xml_string+0x28c>
    2604:	ldr	r0, [sp, #8]
    2608:	ldr	r1, [sp, #4]
    260c:	add	r0, r0, r1
    2610:	ldrb	r0, [r0]
    2614:	cmp	r0, #38	; 0x26
    2618:	bne	2808 <decode_xml_string+0x254>
    261c:	ldr	r0, [sp, #8]
    2620:	ldr	r1, [sp, #4]
    2624:	add	r1, r1, #1
    2628:	add	r0, r0, r1
    262c:	movw	r1, #0
    2630:	movt	r1, #0
    2634:	movw	r2, #4
    2638:	bl	0 <strncmp>
    263c:	cmp	r0, #0
    2640:	bne	2670 <decode_xml_string+0xbc>
    2644:	ldr	r0, [sp, #8]
    2648:	ldr	r1, [sp]
    264c:	add	r2, r1, #1
    2650:	str	r2, [sp]
    2654:	add	r0, r0, r1
    2658:	movw	r1, #38	; 0x26
    265c:	strb	r1, [r0]
    2660:	ldr	r0, [sp, #4]
    2664:	add	r0, r0, #5
    2668:	str	r0, [sp, #4]
    266c:	b	2804 <decode_xml_string+0x250>
    2670:	ldr	r0, [sp, #8]
    2674:	ldr	r1, [sp, #4]
    2678:	add	r1, r1, #1
    267c:	add	r0, r0, r1
    2680:	movw	r1, #0
    2684:	movt	r1, #0
    2688:	movw	r2, #5
    268c:	bl	0 <strncmp>
    2690:	cmp	r0, #0
    2694:	bne	26c4 <decode_xml_string+0x110>
    2698:	ldr	r0, [sp, #8]
    269c:	ldr	r1, [sp]
    26a0:	add	r2, r1, #1
    26a4:	str	r2, [sp]
    26a8:	add	r0, r0, r1
    26ac:	movw	r1, #39	; 0x27
    26b0:	strb	r1, [r0]
    26b4:	ldr	r0, [sp, #4]
    26b8:	add	r0, r0, #6
    26bc:	str	r0, [sp, #4]
    26c0:	b	2800 <decode_xml_string+0x24c>
    26c4:	ldr	r0, [sp, #8]
    26c8:	ldr	r1, [sp, #4]
    26cc:	add	r1, r1, #1
    26d0:	add	r0, r0, r1
    26d4:	movw	r1, #0
    26d8:	movt	r1, #0
    26dc:	movw	r2, #3
    26e0:	bl	0 <strncmp>
    26e4:	cmp	r0, #0
    26e8:	bne	2718 <decode_xml_string+0x164>
    26ec:	ldr	r0, [sp, #8]
    26f0:	ldr	r1, [sp]
    26f4:	add	r2, r1, #1
    26f8:	str	r2, [sp]
    26fc:	add	r0, r0, r1
    2700:	movw	r1, #60	; 0x3c
    2704:	strb	r1, [r0]
    2708:	ldr	r0, [sp, #4]
    270c:	add	r0, r0, #4
    2710:	str	r0, [sp, #4]
    2714:	b	27fc <decode_xml_string+0x248>
    2718:	ldr	r0, [sp, #8]
    271c:	ldr	r1, [sp, #4]
    2720:	add	r1, r1, #1
    2724:	add	r0, r0, r1
    2728:	movw	r1, #0
    272c:	movt	r1, #0
    2730:	movw	r2, #3
    2734:	bl	0 <strncmp>
    2738:	cmp	r0, #0
    273c:	bne	276c <decode_xml_string+0x1b8>
    2740:	ldr	r0, [sp, #8]
    2744:	ldr	r1, [sp]
    2748:	add	r2, r1, #1
    274c:	str	r2, [sp]
    2750:	add	r0, r0, r1
    2754:	movw	r1, #60	; 0x3c
    2758:	strb	r1, [r0]
    275c:	ldr	r0, [sp, #4]
    2760:	add	r0, r0, #4
    2764:	str	r0, [sp, #4]
    2768:	b	27f8 <decode_xml_string+0x244>
    276c:	ldr	r0, [sp, #8]
    2770:	ldr	r1, [sp, #4]
    2774:	add	r1, r1, #1
    2778:	add	r0, r0, r1
    277c:	movw	r1, #0
    2780:	movt	r1, #0
    2784:	movw	r2, #5
    2788:	bl	0 <strncmp>
    278c:	cmp	r0, #0
    2790:	bne	27c0 <decode_xml_string+0x20c>
    2794:	ldr	r0, [sp, #8]
    2798:	ldr	r1, [sp]
    279c:	add	r2, r1, #1
    27a0:	str	r2, [sp]
    27a4:	add	r0, r0, r1
    27a8:	movw	r1, #34	; 0x22
    27ac:	strb	r1, [r0]
    27b0:	ldr	r0, [sp, #4]
    27b4:	add	r0, r0, #6
    27b8:	str	r0, [sp, #4]
    27bc:	b	27f4 <decode_xml_string+0x240>
    27c0:	ldr	r0, [sp, #8]
    27c4:	ldr	r1, [sp, #4]
    27c8:	add	r0, r0, r1
    27cc:	ldrb	r0, [r0]
    27d0:	ldr	r1, [sp, #8]
    27d4:	ldr	r2, [sp]
    27d8:	add	r3, r2, #1
    27dc:	str	r3, [sp]
    27e0:	add	r1, r1, r2
    27e4:	strb	r0, [r1]
    27e8:	ldr	r0, [sp, #4]
    27ec:	add	r0, r0, #1
    27f0:	str	r0, [sp, #4]
    27f4:	b	27f8 <decode_xml_string+0x244>
    27f8:	b	27fc <decode_xml_string+0x248>
    27fc:	b	2800 <decode_xml_string+0x24c>
    2800:	b	2804 <decode_xml_string+0x250>
    2804:	b	283c <decode_xml_string+0x288>
    2808:	ldr	r0, [sp, #8]
    280c:	ldr	r1, [sp, #4]
    2810:	add	r0, r0, r1
    2814:	ldrb	r0, [r0]
    2818:	ldr	r1, [sp, #8]
    281c:	ldr	r2, [sp]
    2820:	add	r3, r2, #1
    2824:	str	r3, [sp]
    2828:	add	r1, r1, r2
    282c:	strb	r0, [r1]
    2830:	ldr	r0, [sp, #4]
    2834:	add	r0, r0, #1
    2838:	str	r0, [sp, #4]
    283c:	b	25ec <decode_xml_string+0x38>
    2840:	ldr	r0, [sp, #8]
    2844:	ldr	r1, [sp]
    2848:	add	r0, r0, r1
    284c:	movw	r1, #0
    2850:	strb	r1, [r0]
    2854:	ldr	r0, [sp]
    2858:	str	r0, [fp, #-4]
    285c:	ldr	r0, [fp, #-4]
    2860:	mov	sp, fp
    2864:	pop	{fp, pc}

00002868 <cd_product_type_set_description>:
    2868:	push	{fp, lr}
    286c:	mov	fp, sp
    2870:	sub	sp, sp, #8
    2874:	str	r0, [sp]
    2878:	ldr	r0, [sp]
    287c:	ldr	r0, [r0]
    2880:	ldr	r0, [r0, #12]
    2884:	movw	r1, #0
    2888:	cmp	r0, r1
    288c:	bne	28b4 <cd_product_type_set_description+0x4c>
    2890:	ldr	r0, [sp]
    2894:	ldr	r0, [r0]
    2898:	ldr	r0, [r0, #396]	; 0x18c
    289c:	ldr	r0, [r0, #8]
    28a0:	movw	r1, #0
    28a4:	movt	r1, #0
    28a8:	bl	0 <coda_product_type_set_description>
    28ac:	str	r0, [sp, #4]
    28b0:	b	28d8 <cd_product_type_set_description+0x70>
    28b4:	ldr	r0, [sp]
    28b8:	ldr	r0, [r0]
    28bc:	ldr	r0, [r0, #396]	; 0x18c
    28c0:	ldr	r0, [r0, #8]
    28c4:	ldr	r1, [sp]
    28c8:	ldr	r1, [r1]
    28cc:	ldr	r1, [r1, #12]
    28d0:	bl	0 <coda_product_type_set_description>
    28d4:	str	r0, [sp, #4]
    28d8:	ldr	r0, [sp, #4]
    28dc:	mov	sp, fp
    28e0:	pop	{fp, pc}

000028e4 <cd_product_definition_init>:
    28e4:	push	{fp, lr}
    28e8:	mov	fp, sp
    28ec:	sub	sp, sp, #40	; 0x28
    28f0:	str	r0, [fp, #-8]
    28f4:	str	r1, [fp, #-12]
    28f8:	ldr	r0, [fp, #-12]
    28fc:	ldr	r1, [fp, #-8]
    2900:	ldr	r1, [r1]
    2904:	ldr	r2, [r1]
    2908:	movw	r1, #0
    290c:	movt	r1, #0
    2910:	bl	20fc <get_mandatory_attribute_value>
    2914:	str	r0, [fp, #-16]
    2918:	ldr	r0, [fp, #-16]
    291c:	movw	r1, #0
    2920:	cmp	r0, r1
    2924:	bne	2934 <cd_product_definition_init+0x50>
    2928:	mvn	r0, #0
    292c:	str	r0, [fp, #-4]
    2930:	b	2b5c <cd_product_definition_init+0x278>
    2934:	ldr	r0, [fp, #-12]
    2938:	ldr	r1, [fp, #-8]
    293c:	ldr	r1, [r1]
    2940:	ldr	r2, [r1]
    2944:	movw	r1, #0
    2948:	movt	r1, #0
    294c:	bl	20fc <get_mandatory_attribute_value>
    2950:	str	r0, [sp, #20]
    2954:	ldr	r0, [sp, #20]
    2958:	movw	r1, #0
    295c:	cmp	r0, r1
    2960:	bne	2970 <cd_product_definition_init+0x8c>
    2964:	mvn	r0, #0
    2968:	str	r0, [fp, #-4]
    296c:	b	2b5c <cd_product_definition_init+0x278>
    2970:	ldr	r0, [sp, #20]
    2974:	ldr	r1, [fp, #-8]
    2978:	ldr	r1, [r1]
    297c:	add	r1, r1, #44	; 0x2c
    2980:	bl	0 <coda_format_from_string>
    2984:	cmp	r0, #0
    2988:	beq	2998 <cd_product_definition_init+0xb4>
    298c:	mvn	r0, #0
    2990:	str	r0, [fp, #-4]
    2994:	b	2b5c <cd_product_definition_init+0x278>
    2998:	ldr	r0, [fp, #-8]
    299c:	ldr	r0, [r0]
    29a0:	movw	r1, #1
    29a4:	str	r1, [r0, #48]	; 0x30
    29a8:	ldr	r0, [fp, #-12]
    29ac:	ldr	r1, [fp, #-8]
    29b0:	ldr	r1, [r1]
    29b4:	ldr	r2, [r1]
    29b8:	movw	r1, #0
    29bc:	movt	r1, #0
    29c0:	bl	20fc <get_mandatory_attribute_value>
    29c4:	str	r0, [sp, #16]
    29c8:	ldr	r0, [sp, #16]
    29cc:	movw	r1, #0
    29d0:	cmp	r0, r1
    29d4:	bne	29e4 <cd_product_definition_init+0x100>
    29d8:	mvn	r0, #0
    29dc:	str	r0, [fp, #-4]
    29e0:	b	2b5c <cd_product_definition_init+0x278>
    29e4:	ldr	r0, [sp, #16]
    29e8:	movw	r1, #0
    29ec:	movt	r1, #0
    29f0:	add	r2, sp, #12
    29f4:	bl	0 <__isoc99_sscanf>
    29f8:	cmp	r0, #1
    29fc:	beq	2a20 <cd_product_definition_init+0x13c>
    2a00:	ldr	r0, [pc, #356]	; 2b6c <cd_product_definition_init+0x288>
    2a04:	ldr	r2, [sp, #16]
    2a08:	movw	r1, #0
    2a0c:	movt	r1, #0
    2a10:	bl	0 <coda_set_error>
    2a14:	mvn	r0, #0
    2a18:	str	r0, [fp, #-4]
    2a1c:	b	2b5c <cd_product_definition_init+0x278>
    2a20:	movw	r0, #0
    2a24:	movt	r0, #0
    2a28:	ldr	r1, [fp, #-8]
    2a2c:	ldr	r1, [r1]
    2a30:	str	r0, [r1, #40]	; 0x28
    2a34:	ldr	r0, [fp, #-16]
    2a38:	ldr	r1, [fp, #-8]
    2a3c:	ldr	r1, [r1]
    2a40:	ldr	r1, [r1, #44]	; 0x2c
    2a44:	ldr	r2, [sp, #12]
    2a48:	bl	0 <coda_product_definition_new>
    2a4c:	ldr	r1, [fp, #-8]
    2a50:	str	r0, [r1, #28]
    2a54:	ldr	r0, [fp, #-8]
    2a58:	ldr	r0, [r0, #28]
    2a5c:	movw	r1, #0
    2a60:	cmp	r0, r1
    2a64:	bne	2a74 <cd_product_definition_init+0x190>
    2a68:	mvn	r0, #0
    2a6c:	str	r0, [fp, #-4]
    2a70:	b	2b5c <cd_product_definition_init+0x278>
    2a74:	ldr	r0, [pc, #236]	; 2b68 <cd_product_definition_init+0x284>
    2a78:	ldr	r0, [pc, r0]
    2a7c:	str	r0, [sp, #8]
    2a80:	bl	0 <__aeabi_read_tp>
    2a84:	ldr	ip, [sp, #8]
    2a88:	ldr	r0, [r0, ip]
    2a8c:	cmp	r0, #0
    2a90:	beq	2b00 <cd_product_definition_init+0x21c>
    2a94:	ldr	r0, [fp, #-8]
    2a98:	ldr	r0, [r0, #16]
    2a9c:	ldr	r2, [fp, #-16]
    2aa0:	ldr	r1, [fp, #-8]
    2aa4:	ldr	r3, [r1, #24]
    2aa8:	ldr	r1, [fp, #-8]
    2aac:	ldr	r1, [r1, #28]
    2ab0:	movw	ip, #2
    2ab4:	str	r1, [sp, #4]
    2ab8:	mov	r1, ip
    2abc:	ldr	ip, [sp, #4]
    2ac0:	str	ip, [sp]
    2ac4:	bl	14c <parse_entry>
    2ac8:	cmp	r0, #0
    2acc:	beq	2afc <cd_product_definition_init+0x218>
    2ad0:	ldr	r0, [fp, #-8]
    2ad4:	ldr	r0, [r0, #28]
    2ad8:	bl	0 <coda_product_definition_delete>
    2adc:	ldr	r0, [fp, #-8]
    2ae0:	movw	lr, #0
    2ae4:	str	lr, [r0, #28]
    2ae8:	ldr	r0, [fp, #-8]
    2aec:	str	lr, [r0, #44]	; 0x2c
    2af0:	mvn	r0, #0
    2af4:	str	r0, [fp, #-4]
    2af8:	b	2b5c <cd_product_definition_init+0x278>
    2afc:	b	2b00 <cd_product_definition_init+0x21c>
    2b00:	ldr	r0, [fp, #-8]
    2b04:	ldr	r0, [r0, #28]
    2b08:	ldr	r1, [fp, #-8]
    2b0c:	ldr	r1, [r1]
    2b10:	str	r0, [r1, #8]
    2b14:	ldr	r0, [fp, #-8]
    2b18:	ldr	r0, [r0]
    2b1c:	movw	r1, #11
    2b20:	movw	r2, #0
    2b24:	movt	r2, #0
    2b28:	movw	r3, #0
    2b2c:	movt	r3, #0
    2b30:	bl	1358 <register_sub_element>
    2b34:	ldr	r0, [fp, #-8]
    2b38:	ldr	r0, [r0]
    2b3c:	movw	r1, #12
    2b40:	movw	r2, #0
    2b44:	movt	r2, #0
    2b48:	movw	r3, #0
    2b4c:	movt	r3, #0
    2b50:	bl	1358 <register_sub_element>
    2b54:	movw	r0, #0
    2b58:	str	r0, [fp, #-4]
    2b5c:	ldr	r0, [fp, #-4]
    2b60:	mov	sp, fp
    2b64:	pop	{fp, pc}
    2b68:	.word	0x000000e8
    2b6c:	.word	0xfffffe70

00002b70 <cd_product_type_add_product_definition>:
    2b70:	push	{fp, lr}
    2b74:	mov	fp, sp
    2b78:	sub	sp, sp, #8
    2b7c:	str	r0, [sp]
    2b80:	ldr	r0, [sp]
    2b84:	ldr	r0, [r0]
    2b88:	ldr	r0, [r0, #396]	; 0x18c
    2b8c:	ldr	r0, [r0, #8]
    2b90:	ldr	r1, [sp]
    2b94:	ldr	r1, [r1]
    2b98:	ldr	r1, [r1, #8]
    2b9c:	bl	0 <coda_product_type_add_product_definition>
    2ba0:	cmp	r0, #0
    2ba4:	beq	2bb4 <cd_product_type_add_product_definition+0x44>
    2ba8:	mvn	r0, #0
    2bac:	str	r0, [sp, #4]
    2bb0:	b	2bc8 <cd_product_type_add_product_definition+0x58>
    2bb4:	ldr	r0, [sp]
    2bb8:	ldr	r0, [r0]
    2bbc:	movw	r1, #0
    2bc0:	str	r1, [r0, #8]
    2bc4:	str	r1, [sp, #4]
    2bc8:	ldr	r0, [sp, #4]
    2bcc:	mov	sp, fp
    2bd0:	pop	{fp, pc}

00002bd4 <cd_product_definition_set_description>:
    2bd4:	push	{fp, lr}
    2bd8:	mov	fp, sp
    2bdc:	sub	sp, sp, #8
    2be0:	str	r0, [sp]
    2be4:	ldr	r0, [sp]
    2be8:	ldr	r0, [r0]
    2bec:	ldr	r0, [r0, #12]
    2bf0:	movw	r1, #0
    2bf4:	cmp	r0, r1
    2bf8:	bne	2c20 <cd_product_definition_set_description+0x4c>
    2bfc:	ldr	r0, [sp]
    2c00:	ldr	r0, [r0]
    2c04:	ldr	r0, [r0, #396]	; 0x18c
    2c08:	ldr	r0, [r0, #8]
    2c0c:	movw	r1, #0
    2c10:	movt	r1, #0
    2c14:	bl	0 <coda_product_definition_set_description>
    2c18:	str	r0, [sp, #4]
    2c1c:	b	2c44 <cd_product_definition_set_description+0x70>
    2c20:	ldr	r0, [sp]
    2c24:	ldr	r0, [r0]
    2c28:	ldr	r0, [r0, #396]	; 0x18c
    2c2c:	ldr	r0, [r0, #8]
    2c30:	ldr	r1, [sp]
    2c34:	ldr	r1, [r1]
    2c38:	ldr	r1, [r1, #12]
    2c3c:	bl	0 <coda_product_definition_set_description>
    2c40:	str	r0, [sp, #4]
    2c44:	ldr	r0, [sp, #4]
    2c48:	mov	sp, fp
    2c4c:	pop	{fp, pc}

00002c50 <cd_detection_rule_init>:
    2c50:	push	{fp, lr}
    2c54:	mov	fp, sp
    2c58:	sub	sp, sp, #16
    2c5c:	movw	r2, #0
    2c60:	movt	r2, #0
    2c64:	str	r0, [sp, #8]
    2c68:	str	r1, [sp, #4]
    2c6c:	ldr	r0, [sp, #8]
    2c70:	ldr	r0, [r0]
    2c74:	str	r2, [r0, #40]	; 0x28
    2c78:	bl	0 <coda_detection_rule_new>
    2c7c:	ldr	r1, [sp, #8]
    2c80:	ldr	r1, [r1]
    2c84:	str	r0, [r1, #8]
    2c88:	ldr	r0, [sp, #8]
    2c8c:	ldr	r0, [r0]
    2c90:	ldr	r0, [r0, #8]
    2c94:	movw	r1, #0
    2c98:	cmp	r0, r1
    2c9c:	bne	2cac <cd_detection_rule_init+0x5c>
    2ca0:	mvn	r0, #0
    2ca4:	str	r0, [fp, #-4]
    2ca8:	b	2d34 <cd_detection_rule_init+0xe4>
    2cac:	ldr	r0, [sp, #8]
    2cb0:	ldr	r0, [r0]
    2cb4:	movw	r1, #23
    2cb8:	movw	r2, #0
    2cbc:	movt	r2, #0
    2cc0:	movw	r3, #0
    2cc4:	movt	r3, #0
    2cc8:	bl	1358 <register_sub_element>
    2ccc:	ldr	r0, [sp, #8]
    2cd0:	ldr	r0, [r0]
    2cd4:	movw	r1, #24
    2cd8:	movw	r2, #0
    2cdc:	movt	r2, #0
    2ce0:	movw	r3, #0
    2ce4:	movt	r3, #0
    2ce8:	bl	1358 <register_sub_element>
    2cec:	ldr	r0, [sp, #8]
    2cf0:	ldr	r0, [r0]
    2cf4:	movw	r1, #25
    2cf8:	movw	r2, #0
    2cfc:	movt	r2, #0
    2d00:	movw	r3, #0
    2d04:	movt	r3, #0
    2d08:	bl	1358 <register_sub_element>
    2d0c:	ldr	r0, [sp, #8]
    2d10:	ldr	r0, [r0]
    2d14:	movw	r1, #26
    2d18:	movw	r2, #0
    2d1c:	movt	r2, #0
    2d20:	movw	r3, #0
    2d24:	movt	r3, #0
    2d28:	bl	1358 <register_sub_element>
    2d2c:	movw	r0, #0
    2d30:	str	r0, [fp, #-4]
    2d34:	ldr	r0, [fp, #-4]
    2d38:	mov	sp, fp
    2d3c:	pop	{fp, pc}

00002d40 <cd_product_definition_add_detection_rule>:
    2d40:	push	{fp, lr}
    2d44:	mov	fp, sp
    2d48:	sub	sp, sp, #8
    2d4c:	str	r0, [sp]
    2d50:	ldr	r0, [sp]
    2d54:	ldr	r0, [r0]
    2d58:	ldr	r0, [r0, #396]	; 0x18c
    2d5c:	ldr	r0, [r0, #8]
    2d60:	ldr	r1, [sp]
    2d64:	ldr	r1, [r1]
    2d68:	ldr	r1, [r1, #8]
    2d6c:	bl	0 <coda_product_definition_add_detection_rule>
    2d70:	cmp	r0, #0
    2d74:	beq	2d84 <cd_product_definition_add_detection_rule+0x44>
    2d78:	mvn	r0, #0
    2d7c:	str	r0, [sp, #4]
    2d80:	b	2d98 <cd_product_definition_add_detection_rule+0x58>
    2d84:	ldr	r0, [sp]
    2d88:	ldr	r0, [r0]
    2d8c:	movw	r1, #0
    2d90:	str	r1, [r0, #8]
    2d94:	str	r1, [sp, #4]
    2d98:	ldr	r0, [sp, #4]
    2d9c:	mov	sp, fp
    2da0:	pop	{fp, pc}

00002da4 <cd_match_data_init>:
    2da4:	push	{fp, lr}
    2da8:	mov	fp, sp
    2dac:	sub	sp, sp, #40	; 0x28
    2db0:	movw	r2, #0
    2db4:	movt	r2, #0
    2db8:	str	r0, [fp, #-8]
    2dbc:	str	r1, [fp, #-12]
    2dc0:	ldr	r0, [fp, #-8]
    2dc4:	ldr	r0, [r0]
    2dc8:	str	r2, [r0, #40]	; 0x28
    2dcc:	ldr	r0, [fp, #-12]
    2dd0:	movw	r1, #0
    2dd4:	movt	r1, #0
    2dd8:	bl	250c <get_attribute_value>
    2ddc:	str	r0, [fp, #-16]
    2de0:	ldr	r0, [fp, #-12]
    2de4:	movw	r1, #0
    2de8:	movt	r1, #0
    2dec:	bl	250c <get_attribute_value>
    2df0:	str	r0, [sp, #20]
    2df4:	ldr	r0, [sp, #20]
    2df8:	movw	r1, #0
    2dfc:	cmp	r0, r1
    2e00:	bne	2e40 <cd_match_data_init+0x9c>
    2e04:	movw	r0, #0
    2e08:	bl	0 <coda_detection_rule_entry_new>
    2e0c:	ldr	lr, [fp, #-8]
    2e10:	ldr	lr, [lr]
    2e14:	str	r0, [lr, #8]
    2e18:	ldr	r0, [fp, #-8]
    2e1c:	ldr	r0, [r0]
    2e20:	ldr	r0, [r0, #8]
    2e24:	movw	lr, #0
    2e28:	cmp	r0, lr
    2e2c:	bne	2e3c <cd_match_data_init+0x98>
    2e30:	mvn	r0, #0
    2e34:	str	r0, [fp, #-4]
    2e38:	b	3000 <cd_match_data_init+0x25c>
    2e3c:	b	2e40 <cd_match_data_init+0x9c>
    2e40:	ldr	r0, [fp, #-16]
    2e44:	movw	r1, #0
    2e48:	cmp	r0, r1
    2e4c:	beq	2f4c <cd_match_data_init+0x1a8>
    2e50:	ldr	r0, [sp, #20]
    2e54:	movw	r1, #0
    2e58:	cmp	r0, r1
    2e5c:	beq	2e7c <cd_match_data_init+0xd8>
    2e60:	ldr	r0, [pc, #420]	; 300c <cd_match_data_init+0x268>
    2e64:	movw	r1, #0
    2e68:	movt	r1, #0
    2e6c:	bl	0 <coda_set_error>
    2e70:	mvn	r0, #0
    2e74:	str	r0, [fp, #-4]
    2e78:	b	3000 <cd_match_data_init+0x25c>
    2e7c:	ldr	r0, [fp, #-16]
    2e80:	bl	0 <strdup>
    2e84:	str	r0, [sp, #12]
    2e88:	ldr	r0, [sp, #12]
    2e8c:	movw	lr, #0
    2e90:	cmp	r0, lr
    2e94:	bne	2ec0 <cd_match_data_init+0x11c>
    2e98:	mvn	r0, #0
    2e9c:	movw	r1, #0
    2ea0:	movt	r1, #0
    2ea4:	movw	r2, #0
    2ea8:	movt	r2, #0
    2eac:	movw	r3, #2459	; 0x99b
    2eb0:	bl	0 <coda_set_error>
    2eb4:	mvn	r0, #0
    2eb8:	str	r0, [fp, #-4]
    2ebc:	b	3000 <cd_match_data_init+0x25c>
    2ec0:	ldr	r1, [sp, #12]
    2ec4:	movw	r0, #20
    2ec8:	movw	r2, #0
    2ecc:	str	r2, [sp, #8]
    2ed0:	ldr	r3, [sp, #8]
    2ed4:	ldr	ip, [sp, #8]
    2ed8:	str	ip, [sp]
    2edc:	str	ip, [sp, #4]
    2ee0:	bl	0 <coda_expression_new>
    2ee4:	str	r0, [sp, #16]
    2ee8:	ldr	r0, [sp, #16]
    2eec:	movw	r1, #0
    2ef0:	cmp	r0, r1
    2ef4:	bne	2f18 <cd_match_data_init+0x174>
    2ef8:	ldr	r0, [pc, #268]	; 300c <cd_match_data_init+0x268>
    2efc:	ldr	r2, [fp, #-16]
    2f00:	movw	r1, #0
    2f04:	movt	r1, #0
    2f08:	bl	0 <coda_set_error>
    2f0c:	mvn	r0, #0
    2f10:	str	r0, [fp, #-4]
    2f14:	b	3000 <cd_match_data_init+0x25c>
    2f18:	ldr	r0, [fp, #-8]
    2f1c:	ldr	r0, [r0]
    2f20:	ldr	r0, [r0, #8]
    2f24:	ldr	r1, [sp, #16]
    2f28:	bl	0 <coda_detection_rule_entry_set_expression>
    2f2c:	cmp	r0, #0
    2f30:	beq	2f48 <cd_match_data_init+0x1a4>
    2f34:	ldr	r0, [sp, #16]
    2f38:	bl	0 <coda_expression_delete>
    2f3c:	mvn	r0, #0
    2f40:	str	r0, [fp, #-4]
    2f44:	b	3000 <cd_match_data_init+0x25c>
    2f48:	b	2fd4 <cd_match_data_init+0x230>
    2f4c:	ldr	r0, [sp, #20]
    2f50:	movw	r1, #0
    2f54:	cmp	r0, r1
    2f58:	beq	2fd0 <cd_match_data_init+0x22c>
    2f5c:	ldr	r0, [fp, #-8]
    2f60:	ldr	r0, [r0]
    2f64:	ldr	r0, [r0, #396]	; 0x18c
    2f68:	ldr	r0, [r0, #8]
    2f6c:	ldr	r1, [sp, #20]
    2f70:	add	r2, sp, #12
    2f74:	bl	34f0 <add_detection_rule_entry_for_path>
    2f78:	cmp	r0, #0
    2f7c:	beq	2f8c <cd_match_data_init+0x1e8>
    2f80:	mvn	r0, #0
    2f84:	str	r0, [fp, #-4]
    2f88:	b	3000 <cd_match_data_init+0x25c>
    2f8c:	ldr	r0, [sp, #12]
    2f90:	bl	0 <coda_detection_rule_entry_new>
    2f94:	ldr	lr, [fp, #-8]
    2f98:	ldr	lr, [lr]
    2f9c:	str	r0, [lr, #8]
    2fa0:	ldr	r0, [sp, #12]
    2fa4:	bl	0 <free>
    2fa8:	ldr	r0, [fp, #-8]
    2fac:	ldr	r0, [r0]
    2fb0:	ldr	r0, [r0, #8]
    2fb4:	movw	lr, #0
    2fb8:	cmp	r0, lr
    2fbc:	bne	2fcc <cd_match_data_init+0x228>
    2fc0:	mvn	r0, #0
    2fc4:	str	r0, [fp, #-4]
    2fc8:	b	3000 <cd_match_data_init+0x25c>
    2fcc:	b	2fd0 <cd_match_data_init+0x22c>
    2fd0:	b	2fd4 <cd_match_data_init+0x230>
    2fd4:	ldr	r0, [fp, #-8]
    2fd8:	ldr	r0, [r0]
    2fdc:	movw	r1, #1
    2fe0:	str	r1, [r0, #32]
    2fe4:	ldr	r0, [fp, #-8]
    2fe8:	ldr	r0, [r0]
    2fec:	movw	r1, #0
    2ff0:	movt	r1, #0
    2ff4:	str	r1, [r0, #36]	; 0x24
    2ff8:	movw	r0, #0
    2ffc:	str	r0, [fp, #-4]
    3000:	ldr	r0, [fp, #-4]
    3004:	mov	sp, fp
    3008:	pop	{fp, pc}
    300c:	.word	0xfffffe70

00003010 <cd_detection_rule_add_entry>:
    3010:	push	{fp, lr}
    3014:	mov	fp, sp
    3018:	sub	sp, sp, #8
    301c:	str	r0, [sp]
    3020:	ldr	r0, [sp]
    3024:	ldr	r0, [r0]
    3028:	ldr	r0, [r0, #8]
    302c:	movw	r1, #0
    3030:	cmp	r0, r1
    3034:	beq	307c <cd_detection_rule_add_entry+0x6c>
    3038:	ldr	r0, [sp]
    303c:	ldr	r0, [r0]
    3040:	ldr	r0, [r0, #396]	; 0x18c
    3044:	ldr	r0, [r0, #8]
    3048:	ldr	r1, [sp]
    304c:	ldr	r1, [r1]
    3050:	ldr	r1, [r1, #8]
    3054:	bl	0 <coda_detection_rule_add_entry>
    3058:	cmp	r0, #0
    305c:	beq	306c <cd_detection_rule_add_entry+0x5c>
    3060:	mvn	r0, #0
    3064:	str	r0, [sp, #4]
    3068:	b	3084 <cd_detection_rule_add_entry+0x74>
    306c:	ldr	r0, [sp]
    3070:	ldr	r0, [r0]
    3074:	movw	r1, #0
    3078:	str	r1, [r0, #8]
    307c:	movw	r0, #0
    3080:	str	r0, [sp, #4]
    3084:	ldr	r0, [sp, #4]
    3088:	mov	sp, fp
    308c:	pop	{fp, pc}

00003090 <cd_match_expression_init>:
    3090:	push	{fp, lr}
    3094:	mov	fp, sp
    3098:	sub	sp, sp, #16
    309c:	str	r0, [sp, #8]
    30a0:	str	r1, [sp, #4]
    30a4:	ldr	r0, [sp, #4]
    30a8:	movw	r1, #0
    30ac:	movt	r1, #0
    30b0:	bl	250c <get_attribute_value>
    30b4:	movw	r1, #0
    30b8:	movt	r1, #0
    30bc:	str	r0, [sp]
    30c0:	ldr	r0, [sp, #8]
    30c4:	ldr	r0, [r0]
    30c8:	str	r1, [r0, #40]	; 0x28
    30cc:	ldr	r0, [sp]
    30d0:	bl	0 <coda_detection_rule_entry_new>
    30d4:	ldr	r1, [sp, #8]
    30d8:	ldr	r1, [r1]
    30dc:	str	r0, [r1, #8]
    30e0:	ldr	r0, [sp, #8]
    30e4:	ldr	r0, [r0]
    30e8:	ldr	r0, [r0, #8]
    30ec:	movw	r1, #0
    30f0:	cmp	r0, r1
    30f4:	bne	3104 <cd_match_expression_init+0x74>
    30f8:	mvn	r0, #0
    30fc:	str	r0, [fp, #-4]
    3100:	b	3130 <cd_match_expression_init+0xa0>
    3104:	ldr	r0, [sp, #8]
    3108:	ldr	r0, [r0]
    310c:	movw	r1, #1
    3110:	str	r1, [r0, #32]
    3114:	ldr	r0, [sp, #8]
    3118:	ldr	r0, [r0]
    311c:	movw	r1, #0
    3120:	movt	r1, #0
    3124:	str	r1, [r0, #36]	; 0x24
    3128:	movw	r0, #0
    312c:	str	r0, [fp, #-4]
    3130:	ldr	r0, [fp, #-4]
    3134:	mov	sp, fp
    3138:	pop	{fp, pc}

0000313c <cd_match_filename_init>:
    313c:	push	{fp, lr}
    3140:	mov	fp, sp
    3144:	sub	sp, sp, #40	; 0x28
    3148:	str	r0, [fp, #-8]
    314c:	str	r1, [fp, #-12]
    3150:	ldr	r0, [fp, #-12]
    3154:	ldr	r1, [fp, #-8]
    3158:	ldr	r1, [r1]
    315c:	ldr	r2, [r1]
    3160:	movw	r1, #0
    3164:	movt	r1, #0
    3168:	bl	20fc <get_mandatory_attribute_value>
    316c:	str	r0, [fp, #-16]
    3170:	ldr	r0, [fp, #-16]
    3174:	movw	r1, #0
    3178:	cmp	r0, r1
    317c:	bne	318c <cd_match_filename_init+0x50>
    3180:	mvn	r0, #0
    3184:	str	r0, [fp, #-4]
    3188:	b	32d0 <cd_match_filename_init+0x194>
    318c:	movw	r0, #0
    3190:	movt	r0, #0
    3194:	ldr	r1, [fp, #-8]
    3198:	ldr	r1, [r1]
    319c:	str	r0, [r1, #40]	; 0x28
    31a0:	movw	r0, #0
    31a4:	bl	0 <coda_detection_rule_entry_new>
    31a8:	ldr	r1, [fp, #-8]
    31ac:	ldr	r1, [r1]
    31b0:	str	r0, [r1, #8]
    31b4:	ldr	r0, [fp, #-8]
    31b8:	ldr	r0, [r0]
    31bc:	ldr	r0, [r0, #8]
    31c0:	movw	r1, #0
    31c4:	cmp	r0, r1
    31c8:	bne	31d8 <cd_match_filename_init+0x9c>
    31cc:	mvn	r0, #0
    31d0:	str	r0, [fp, #-4]
    31d4:	b	32d0 <cd_match_filename_init+0x194>
    31d8:	ldr	r0, [fp, #-16]
    31dc:	bl	0 <strdup>
    31e0:	str	r0, [sp, #16]
    31e4:	ldr	r0, [sp, #16]
    31e8:	movw	lr, #0
    31ec:	cmp	r0, lr
    31f0:	bne	321c <cd_match_filename_init+0xe0>
    31f4:	mvn	r0, #0
    31f8:	movw	r1, #0
    31fc:	movt	r1, #0
    3200:	movw	r2, #0
    3204:	movt	r2, #0
    3208:	movw	r3, #2649	; 0xa59
    320c:	bl	0 <coda_set_error>
    3210:	mvn	r0, #0
    3214:	str	r0, [fp, #-4]
    3218:	b	32d0 <cd_match_filename_init+0x194>
    321c:	ldr	r1, [sp, #16]
    3220:	movw	r0, #20
    3224:	movw	r2, #0
    3228:	str	r2, [sp, #12]
    322c:	ldr	r3, [sp, #12]
    3230:	ldr	ip, [sp, #12]
    3234:	str	ip, [sp]
    3238:	str	ip, [sp, #4]
    323c:	bl	0 <coda_expression_new>
    3240:	str	r0, [sp, #20]
    3244:	ldr	r0, [sp, #20]
    3248:	movw	r1, #0
    324c:	cmp	r0, r1
    3250:	bne	3274 <cd_match_filename_init+0x138>
    3254:	ldr	r0, [pc, #128]	; 32dc <cd_match_filename_init+0x1a0>
    3258:	ldr	r2, [fp, #-16]
    325c:	movw	r1, #0
    3260:	movt	r1, #0
    3264:	bl	0 <coda_set_error>
    3268:	mvn	r0, #0
    326c:	str	r0, [fp, #-4]
    3270:	b	32d0 <cd_match_filename_init+0x194>
    3274:	ldr	r0, [fp, #-8]
    3278:	ldr	r0, [r0]
    327c:	ldr	r0, [r0, #8]
    3280:	ldr	r1, [sp, #20]
    3284:	bl	0 <coda_detection_rule_entry_set_expression>
    3288:	cmp	r0, #0
    328c:	beq	32a4 <cd_match_filename_init+0x168>
    3290:	ldr	r0, [sp, #20]
    3294:	bl	0 <coda_expression_delete>
    3298:	mvn	r0, #0
    329c:	str	r0, [fp, #-4]
    32a0:	b	32d0 <cd_match_filename_init+0x194>
    32a4:	ldr	r0, [fp, #-8]
    32a8:	ldr	r0, [r0]
    32ac:	movw	r1, #1
    32b0:	str	r1, [r0, #32]
    32b4:	ldr	r0, [fp, #-8]
    32b8:	ldr	r0, [r0]
    32bc:	movw	r1, #0
    32c0:	movt	r1, #0
    32c4:	str	r1, [r0, #36]	; 0x24
    32c8:	movw	r0, #0
    32cc:	str	r0, [fp, #-4]
    32d0:	ldr	r0, [fp, #-4]
    32d4:	mov	sp, fp
    32d8:	pop	{fp, pc}
    32dc:	.word	0xfffffe70

000032e0 <cd_match_size_init>:
    32e0:	push	{fp, lr}
    32e4:	mov	fp, sp
    32e8:	sub	sp, sp, #56	; 0x38
    32ec:	movw	r2, #0
    32f0:	movt	r2, #0
    32f4:	str	r0, [fp, #-8]
    32f8:	str	r1, [fp, #-12]
    32fc:	ldr	r0, [fp, #-8]
    3300:	ldr	r0, [r0]
    3304:	str	r2, [r0, #40]	; 0x28
    3308:	movw	r0, #0
    330c:	bl	0 <coda_detection_rule_entry_new>
    3310:	ldr	r1, [fp, #-8]
    3314:	ldr	r1, [r1]
    3318:	str	r0, [r1, #8]
    331c:	ldr	r0, [fp, #-8]
    3320:	ldr	r0, [r0]
    3324:	ldr	r0, [r0, #8]
    3328:	movw	r1, #0
    332c:	cmp	r0, r1
    3330:	bne	3340 <cd_match_size_init+0x60>
    3334:	mvn	r0, #0
    3338:	str	r0, [fp, #-4]
    333c:	b	34e0 <cd_match_size_init+0x200>
    3340:	ldr	r0, [fp, #-12]
    3344:	ldr	r1, [fp, #-8]
    3348:	ldr	r1, [r1]
    334c:	ldr	r2, [r1]
    3350:	movw	r1, #0
    3354:	movt	r1, #0
    3358:	bl	20fc <get_mandatory_attribute_value>
    335c:	str	r0, [fp, #-16]
    3360:	ldr	r0, [fp, #-16]
    3364:	movw	r1, #0
    3368:	cmp	r0, r1
    336c:	bne	337c <cd_match_size_init+0x9c>
    3370:	mvn	r0, #0
    3374:	str	r0, [fp, #-4]
    3378:	b	34e0 <cd_match_size_init+0x200>
    337c:	ldr	r0, [fp, #-16]
    3380:	bl	0 <strdup>
    3384:	str	r0, [sp, #24]
    3388:	ldr	r0, [sp, #24]
    338c:	movw	lr, #0
    3390:	cmp	r0, lr
    3394:	bne	33c0 <cd_match_size_init+0xe0>
    3398:	mvn	r0, #0
    339c:	movw	r1, #0
    33a0:	movt	r1, #0
    33a4:	movw	r2, #0
    33a8:	movt	r2, #0
    33ac:	movw	r3, #2694	; 0xa86
    33b0:	bl	0 <coda_set_error>
    33b4:	mvn	r0, #0
    33b8:	str	r0, [fp, #-4]
    33bc:	b	34e0 <cd_match_size_init+0x200>
    33c0:	ldr	r1, [sp, #24]
    33c4:	movw	r0, #20
    33c8:	movw	r2, #0
    33cc:	str	r2, [sp, #20]
    33d0:	ldr	r3, [sp, #20]
    33d4:	ldr	ip, [sp, #20]
    33d8:	str	ip, [sp]
    33dc:	str	ip, [sp, #4]
    33e0:	bl	0 <coda_expression_new>
    33e4:	str	r0, [fp, #-24]	; 0xffffffe8
    33e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    33ec:	movw	r1, #0
    33f0:	cmp	r0, r1
    33f4:	bne	3418 <cd_match_size_init+0x138>
    33f8:	ldr	r0, [pc, #236]	; 34ec <cd_match_size_init+0x20c>
    33fc:	ldr	r2, [fp, #-16]
    3400:	movw	r1, #0
    3404:	movt	r1, #0
    3408:	bl	0 <coda_set_error>
    340c:	mvn	r0, #0
    3410:	str	r0, [fp, #-4]
    3414:	b	34e0 <cd_match_size_init+0x200>
    3418:	movw	r0, #27
    341c:	movw	r1, #0
    3420:	str	r1, [sp, #16]
    3424:	ldr	r2, [sp, #16]
    3428:	ldr	r3, [sp, #16]
    342c:	ldr	ip, [sp, #16]
    3430:	str	ip, [sp]
    3434:	str	ip, [sp, #4]
    3438:	bl	0 <coda_expression_new>
    343c:	str	r0, [fp, #-20]	; 0xffffffec
    3440:	ldr	r0, [fp, #-20]	; 0xffffffec
    3444:	movw	r1, #0
    3448:	cmp	r0, r1
    344c:	bne	3464 <cd_match_size_init+0x184>
    3450:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3454:	bl	0 <coda_expression_delete>
    3458:	mvn	r0, #0
    345c:	str	r0, [fp, #-4]
    3460:	b	34e0 <cd_match_size_init+0x200>
    3464:	ldr	r2, [fp, #-20]	; 0xffffffec
    3468:	ldr	r3, [fp, #-24]	; 0xffffffe8
    346c:	movw	r0, #25
    3470:	movw	r1, #0
    3474:	str	r1, [sp, #12]
    3478:	ldr	ip, [sp, #12]
    347c:	str	ip, [sp]
    3480:	str	ip, [sp, #4]
    3484:	bl	0 <coda_expression_new>
    3488:	str	r0, [sp, #28]
    348c:	ldr	r0, [sp, #28]
    3490:	movw	r1, #0
    3494:	cmp	r0, r1
    3498:	bne	34a8 <cd_match_size_init+0x1c8>
    349c:	mvn	r0, #0
    34a0:	str	r0, [fp, #-4]
    34a4:	b	34e0 <cd_match_size_init+0x200>
    34a8:	ldr	r0, [fp, #-8]
    34ac:	ldr	r0, [r0]
    34b0:	ldr	r0, [r0, #8]
    34b4:	ldr	r1, [sp, #28]
    34b8:	bl	0 <coda_detection_rule_entry_set_expression>
    34bc:	cmp	r0, #0
    34c0:	beq	34d8 <cd_match_size_init+0x1f8>
    34c4:	ldr	r0, [sp, #28]
    34c8:	bl	0 <coda_expression_delete>
    34cc:	mvn	r0, #0
    34d0:	str	r0, [fp, #-4]
    34d4:	b	34e0 <cd_match_size_init+0x200>
    34d8:	movw	r0, #0
    34dc:	str	r0, [fp, #-4]
    34e0:	ldr	r0, [fp, #-4]
    34e4:	mov	sp, fp
    34e8:	pop	{fp, pc}
    34ec:	.word	0xfffffe70

000034f0 <add_detection_rule_entry_for_path>:
    34f0:	push	{fp, lr}
    34f4:	mov	fp, sp
    34f8:	sub	sp, sp, #120	; 0x78
    34fc:	str	r0, [fp, #-8]
    3500:	str	r1, [fp, #-12]
    3504:	str	r2, [fp, #-16]
    3508:	movw	r0, #1
    350c:	str	r0, [fp, #-28]	; 0xffffffe4
    3510:	movw	r0, #0
    3514:	str	r0, [fp, #-32]	; 0xffffffe0
    3518:	str	r0, [fp, #-36]	; 0xffffffdc
    351c:	ldr	r1, [fp, #-12]
    3520:	cmp	r1, r0
    3524:	beq	352c <add_detection_rule_entry_for_path+0x3c>
    3528:	b	354c <add_detection_rule_entry_for_path+0x5c>
    352c:	movw	r0, #0
    3530:	movt	r0, #0
    3534:	movw	r1, #0
    3538:	movt	r1, #0
    353c:	movw	r2, #2236	; 0x8bc
    3540:	movw	r3, #0
    3544:	movt	r3, #0
    3548:	bl	0 <__assert_fail>
    354c:	ldr	r0, [fp, #-16]
    3550:	movw	r1, #0
    3554:	str	r1, [r0]
    3558:	ldr	r0, [fp, #-12]
    355c:	bl	0 <strdup>
    3560:	str	r0, [fp, #-40]	; 0xffffffd8
    3564:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3568:	movw	r1, #0
    356c:	cmp	r0, r1
    3570:	bne	359c <add_detection_rule_entry_for_path+0xac>
    3574:	mvn	r0, #0
    3578:	movw	r1, #0
    357c:	movt	r1, #0
    3580:	movw	r2, #0
    3584:	movt	r2, #0
    3588:	movw	r3, #2245	; 0x8c5
    358c:	bl	0 <coda_set_error>
    3590:	mvn	r0, #0
    3594:	str	r0, [fp, #-4]
    3598:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    359c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    35a0:	str	r0, [fp, #-48]	; 0xffffffd0
    35a4:	ldr	r0, [fp, #-12]
    35a8:	bl	0 <strlen>
    35ac:	add	r0, r0, #6
    35b0:	bl	0 <malloc>
    35b4:	str	r0, [fp, #-44]	; 0xffffffd4
    35b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    35bc:	movw	lr, #0
    35c0:	cmp	r0, lr
    35c4:	bne	35f0 <add_detection_rule_entry_for_path+0x100>
    35c8:	mvn	r0, #0
    35cc:	movw	r1, #0
    35d0:	movt	r1, #0
    35d4:	movw	r2, #0
    35d8:	movt	r2, #0
    35dc:	movw	r3, #2257	; 0x8d1
    35e0:	bl	0 <coda_set_error>
    35e4:	mvn	r0, #0
    35e8:	str	r0, [fp, #-4]
    35ec:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    35f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    35f4:	movw	r1, #0
    35f8:	strb	r1, [r0]
    35fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3600:	str	r0, [fp, #-52]	; 0xffffffcc
    3604:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3608:	ldrb	r0, [r0]
    360c:	cmp	r0, #47	; 0x2f
    3610:	bne	363c <add_detection_rule_entry_for_path+0x14c>
    3614:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3618:	ldrb	r0, [r0]
    361c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3620:	strb	r0, [r1]
    3624:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3628:	add	r0, r0, #1
    362c:	str	r0, [fp, #-52]	; 0xffffffcc
    3630:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3634:	add	r0, r0, #1
    3638:	str	r0, [fp, #-48]	; 0xffffffd0
    363c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3640:	ldrb	r0, [r0]
    3644:	cmp	r0, #64	; 0x40
    3648:	bne	367c <add_detection_rule_entry_for_path+0x18c>
    364c:	movw	r0, #1
    3650:	str	r0, [fp, #-36]	; 0xffffffdc
    3654:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3658:	ldrb	r0, [r0]
    365c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3660:	strb	r0, [r1]
    3664:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3668:	add	r0, r0, #1
    366c:	str	r0, [fp, #-52]	; 0xffffffcc
    3670:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3674:	add	r0, r0, #1
    3678:	str	r0, [fp, #-48]	; 0xffffffd0
    367c:	b	3680 <add_detection_rule_entry_for_path+0x190>
    3680:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3684:	cmp	r0, #0
    3688:	movw	r0, #0
    368c:	movne	r0, #1
    3690:	mvn	r1, #0
    3694:	eor	r0, r0, r1
    3698:	tst	r0, #1
    369c:	beq	3bbc <add_detection_rule_entry_for_path+0x6cc>
    36a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    36a4:	str	r0, [fp, #-56]	; 0xffffffc8
    36a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    36ac:	cmp	r0, #0
    36b0:	bne	36e8 <add_detection_rule_entry_for_path+0x1f8>
    36b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    36b8:	cmp	r0, #0
    36bc:	movw	r0, #0
    36c0:	movne	r0, #1
    36c4:	tst	r0, #1
    36c8:	movw	r0, #64	; 0x40
    36cc:	moveq	r0, #47	; 0x2f
    36d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
    36d4:	strb	r0, [r1]
    36d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    36dc:	add	r0, r0, #1
    36e0:	str	r0, [fp, #-52]	; 0xffffffcc
    36e4:	b	36f0 <add_detection_rule_entry_for_path+0x200>
    36e8:	movw	r0, #0
    36ec:	str	r0, [fp, #-28]	; 0xffffffe4
    36f0:	movw	r0, #0
    36f4:	str	r0, [fp, #-20]	; 0xffffffec
    36f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    36fc:	ldrb	r0, [r0]
    3700:	cmp	r0, #123	; 0x7b
    3704:	bne	379c <add_detection_rule_entry_for_path+0x2ac>
    3708:	ldr	r0, [fp, #-48]	; 0xffffffd0
    370c:	add	r0, r0, #1
    3710:	str	r0, [fp, #-48]	; 0xffffffd0
    3714:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3718:	str	r0, [fp, #-20]	; 0xffffffec
    371c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3720:	ldrb	r0, [r0]
    3724:	cmp	r0, #125	; 0x7d
    3728:	beq	3784 <add_detection_rule_entry_for_path+0x294>
    372c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3730:	ldrb	r0, [r0]
    3734:	cmp	r0, #0
    3738:	bne	3774 <add_detection_rule_entry_for_path+0x284>
    373c:	ldr	r0, [fp, #-8]
    3740:	ldr	r0, [r0, #8]
    3744:	ldr	r2, [r0, #8]
    3748:	mvn	r0, #99	; 0x63
    374c:	movw	r1, #0
    3750:	movt	r1, #0
    3754:	bl	0 <coda_set_error>
    3758:	ldr	r0, [fp, #-44]	; 0xffffffd4
    375c:	bl	0 <free>
    3760:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3764:	bl	0 <free>
    3768:	mvn	r0, #0
    376c:	str	r0, [fp, #-4]
    3770:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3774:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3778:	add	r0, r0, #1
    377c:	str	r0, [fp, #-48]	; 0xffffffd0
    3780:	b	371c <add_detection_rule_entry_for_path+0x22c>
    3784:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3788:	movw	r1, #0
    378c:	strb	r1, [r0]
    3790:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3794:	add	r0, r0, #1
    3798:	str	r0, [fp, #-48]	; 0xffffffd0
    379c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37a0:	str	r0, [fp, #-24]	; 0xffffffe8
    37a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37a8:	ldrb	r0, [r0]
    37ac:	cmp	r0, #47	; 0x2f
    37b0:	movw	r0, #0
    37b4:	str	r0, [sp, #32]
    37b8:	beq	37ec <add_detection_rule_entry_for_path+0x2fc>
    37bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37c0:	ldrb	r0, [r0]
    37c4:	cmp	r0, #64	; 0x40
    37c8:	movw	r0, #0
    37cc:	str	r0, [sp, #32]
    37d0:	beq	37ec <add_detection_rule_entry_for_path+0x2fc>
    37d4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37d8:	ldrb	r0, [r0]
    37dc:	cmp	r0, #0
    37e0:	movw	r0, #0
    37e4:	movne	r0, #1
    37e8:	str	r0, [sp, #32]
    37ec:	ldr	r0, [sp, #32]
    37f0:	tst	r0, #1
    37f4:	beq	3808 <add_detection_rule_entry_for_path+0x318>
    37f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37fc:	add	r0, r0, #1
    3800:	str	r0, [fp, #-48]	; 0xffffffd0
    3804:	b	37a4 <add_detection_rule_entry_for_path+0x2b4>
    3808:	ldr	r0, [fp, #-48]	; 0xffffffd0
    380c:	ldrb	r0, [r0]
    3810:	cmp	r0, #64	; 0x40
    3814:	movw	r0, #0
    3818:	moveq	r0, #1
    381c:	and	r0, r0, #1
    3820:	str	r0, [fp, #-36]	; 0xffffffdc
    3824:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3828:	ldrb	r0, [r0]
    382c:	cmp	r0, #0
    3830:	movw	r0, #0
    3834:	moveq	r0, #1
    3838:	and	r0, r0, #1
    383c:	str	r0, [fp, #-32]	; 0xffffffe0
    3840:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3844:	movw	r1, #0
    3848:	strb	r1, [r0]
    384c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3850:	movw	r1, #0
    3854:	bl	0 <coda_identifier_from_name>
    3858:	str	r0, [sp, #52]	; 0x34
    385c:	ldr	r0, [sp, #52]	; 0x34
    3860:	movw	r1, #0
    3864:	cmp	r0, r1
    3868:	bne	3888 <add_detection_rule_entry_for_path+0x398>
    386c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3870:	bl	0 <free>
    3874:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3878:	bl	0 <free>
    387c:	mvn	r0, #0
    3880:	str	r0, [fp, #-4]
    3884:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3888:	ldr	r0, [fp, #-52]	; 0xffffffcc
    388c:	ldr	r1, [sp, #52]	; 0x34
    3890:	bl	0 <strcpy>
    3894:	ldr	r1, [sp, #52]	; 0x34
    3898:	str	r0, [sp, #28]
    389c:	mov	r0, r1
    38a0:	bl	0 <strlen>
    38a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
    38a8:	add	r0, r1, r0
    38ac:	str	r0, [fp, #-52]	; 0xffffffcc
    38b0:	ldr	r0, [sp, #52]	; 0x34
    38b4:	bl	0 <free>
    38b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    38bc:	movw	r1, #0
    38c0:	cmp	r0, r1
    38c4:	beq	3b5c <add_detection_rule_entry_for_path+0x66c>
    38c8:	movw	r0, #36	; 0x24
    38cc:	movw	r1, #0
    38d0:	str	r1, [sp, #24]
    38d4:	ldr	r2, [sp, #24]
    38d8:	ldr	r3, [sp, #24]
    38dc:	ldr	ip, [sp, #24]
    38e0:	str	ip, [sp]
    38e4:	str	ip, [sp, #4]
    38e8:	bl	0 <coda_expression_new>
    38ec:	str	r0, [sp, #56]	; 0x38
    38f0:	ldr	r0, [sp, #56]	; 0x38
    38f4:	movw	r1, #0
    38f8:	cmp	r0, r1
    38fc:	bne	391c <add_detection_rule_entry_for_path+0x42c>
    3900:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3904:	bl	0 <free>
    3908:	ldr	r0, [fp, #-40]	; 0xffffffd8
    390c:	bl	0 <free>
    3910:	mvn	r0, #0
    3914:	str	r0, [fp, #-4]
    3918:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    391c:	ldr	r2, [sp, #56]	; 0x38
    3920:	movw	r0, #75	; 0x4b
    3924:	movw	r1, #0
    3928:	str	r1, [sp, #20]
    392c:	ldr	r3, [sp, #20]
    3930:	ldr	ip, [sp, #20]
    3934:	str	ip, [sp]
    3938:	str	ip, [sp, #4]
    393c:	bl	0 <coda_expression_new>
    3940:	str	r0, [sp, #44]	; 0x2c
    3944:	ldr	r0, [sp, #44]	; 0x2c
    3948:	movw	r1, #0
    394c:	cmp	r0, r1
    3950:	bne	3970 <add_detection_rule_entry_for_path+0x480>
    3954:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3958:	bl	0 <free>
    395c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3960:	bl	0 <free>
    3964:	mvn	r0, #0
    3968:	str	r0, [fp, #-4]
    396c:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3970:	ldr	r0, [fp, #-20]	; 0xffffffec
    3974:	bl	0 <strdup>
    3978:	str	r0, [sp, #36]	; 0x24
    397c:	ldr	r0, [sp, #36]	; 0x24
    3980:	movw	lr, #0
    3984:	cmp	r0, lr
    3988:	bne	39cc <add_detection_rule_entry_for_path+0x4dc>
    398c:	mvn	r0, #0
    3990:	movw	r1, #0
    3994:	movt	r1, #0
    3998:	movw	r2, #0
    399c:	movt	r2, #0
    39a0:	movw	r3, #2359	; 0x937
    39a4:	bl	0 <coda_set_error>
    39a8:	ldr	r0, [sp, #44]	; 0x2c
    39ac:	bl	0 <coda_expression_delete>
    39b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    39b4:	bl	0 <free>
    39b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    39bc:	bl	0 <free>
    39c0:	mvn	r0, #0
    39c4:	str	r0, [fp, #-4]
    39c8:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    39cc:	ldr	r1, [sp, #36]	; 0x24
    39d0:	movw	r0, #22
    39d4:	movw	r2, #0
    39d8:	str	r2, [sp, #16]
    39dc:	ldr	r3, [sp, #16]
    39e0:	ldr	ip, [sp, #16]
    39e4:	str	ip, [sp]
    39e8:	str	ip, [sp, #4]
    39ec:	bl	0 <coda_expression_new>
    39f0:	str	r0, [sp, #40]	; 0x28
    39f4:	ldr	r0, [sp, #40]	; 0x28
    39f8:	movw	r1, #0
    39fc:	cmp	r0, r1
    3a00:	bne	3a28 <add_detection_rule_entry_for_path+0x538>
    3a04:	ldr	r0, [sp, #44]	; 0x2c
    3a08:	bl	0 <coda_expression_delete>
    3a0c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3a10:	bl	0 <free>
    3a14:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3a18:	bl	0 <free>
    3a1c:	mvn	r0, #0
    3a20:	str	r0, [fp, #-4]
    3a24:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3a28:	ldr	r2, [sp, #44]	; 0x2c
    3a2c:	ldr	r3, [sp, #40]	; 0x28
    3a30:	movw	r0, #25
    3a34:	movw	r1, #0
    3a38:	str	r1, [sp, #12]
    3a3c:	ldr	ip, [sp, #12]
    3a40:	str	ip, [sp]
    3a44:	str	ip, [sp, #4]
    3a48:	bl	0 <coda_expression_new>
    3a4c:	str	r0, [sp, #60]	; 0x3c
    3a50:	ldr	r0, [sp, #60]	; 0x3c
    3a54:	movw	r1, #0
    3a58:	cmp	r0, r1
    3a5c:	bne	3a7c <add_detection_rule_entry_for_path+0x58c>
    3a60:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3a64:	bl	0 <free>
    3a68:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3a6c:	bl	0 <free>
    3a70:	mvn	r0, #0
    3a74:	str	r0, [fp, #-4]
    3a78:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3a7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3a80:	movw	r1, #0
    3a84:	movt	r1, #0
    3a88:	bl	0 <strcpy>
    3a8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    3a90:	str	r0, [sp, #8]
    3a94:	mov	r0, r1
    3a98:	bl	0 <coda_detection_rule_entry_new>
    3a9c:	str	r0, [sp, #48]	; 0x30
    3aa0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3aa4:	movw	r1, #0
    3aa8:	strb	r1, [r0]
    3aac:	ldr	r0, [sp, #48]	; 0x30
    3ab0:	movw	r1, #0
    3ab4:	cmp	r0, r1
    3ab8:	bne	3ae0 <add_detection_rule_entry_for_path+0x5f0>
    3abc:	ldr	r0, [sp, #60]	; 0x3c
    3ac0:	bl	0 <coda_expression_delete>
    3ac4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3ac8:	bl	0 <free>
    3acc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3ad0:	bl	0 <free>
    3ad4:	mvn	r0, #0
    3ad8:	str	r0, [fp, #-4]
    3adc:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3ae0:	ldr	r0, [sp, #48]	; 0x30
    3ae4:	ldr	r1, [sp, #60]	; 0x3c
    3ae8:	bl	0 <coda_detection_rule_entry_set_expression>
    3aec:	cmp	r0, #0
    3af0:	beq	3b20 <add_detection_rule_entry_for_path+0x630>
    3af4:	ldr	r0, [sp, #48]	; 0x30
    3af8:	bl	0 <coda_detection_rule_entry_delete>
    3afc:	ldr	r0, [sp, #60]	; 0x3c
    3b00:	bl	0 <coda_expression_delete>
    3b04:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3b08:	bl	0 <free>
    3b0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3b10:	bl	0 <free>
    3b14:	mvn	r0, #0
    3b18:	str	r0, [fp, #-4]
    3b1c:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3b20:	ldr	r0, [fp, #-8]
    3b24:	ldr	r1, [sp, #48]	; 0x30
    3b28:	bl	0 <coda_detection_rule_add_entry>
    3b2c:	cmp	r0, #0
    3b30:	beq	3b58 <add_detection_rule_entry_for_path+0x668>
    3b34:	ldr	r0, [sp, #48]	; 0x30
    3b38:	bl	0 <coda_detection_rule_entry_delete>
    3b3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3b40:	bl	0 <free>
    3b44:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3b48:	bl	0 <free>
    3b4c:	mvn	r0, #0
    3b50:	str	r0, [fp, #-4]
    3b54:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3b58:	b	3b5c <add_detection_rule_entry_for_path+0x66c>
    3b5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3b60:	cmp	r0, #0
    3b64:	bne	3bb8 <add_detection_rule_entry_for_path+0x6c8>
    3b68:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3b6c:	cmp	r0, #0
    3b70:	beq	3bac <add_detection_rule_entry_for_path+0x6bc>
    3b74:	ldr	r0, [fp, #-8]
    3b78:	ldr	r0, [r0, #8]
    3b7c:	ldr	r2, [r0, #8]
    3b80:	mvn	r0, #99	; 0x63
    3b84:	movw	r1, #0
    3b88:	movt	r1, #0
    3b8c:	bl	0 <coda_set_error>
    3b90:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3b94:	bl	0 <free>
    3b98:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3b9c:	bl	0 <free>
    3ba0:	mvn	r0, #0
    3ba4:	str	r0, [fp, #-4]
    3ba8:	b	3bd8 <add_detection_rule_entry_for_path+0x6e8>
    3bac:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3bb0:	add	r0, r0, #1
    3bb4:	str	r0, [fp, #-48]	; 0xffffffd0
    3bb8:	b	3680 <add_detection_rule_entry_for_path+0x190>
    3bbc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3bc0:	bl	0 <free>
    3bc4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3bc8:	ldr	lr, [fp, #-16]
    3bcc:	str	r0, [lr]
    3bd0:	movw	r0, #0
    3bd4:	str	r0, [fp, #-4]
    3bd8:	ldr	r0, [fp, #-4]
    3bdc:	mov	sp, fp
    3be0:	pop	{fp, pc}

00003be4 <cd_match_data_finalise>:
    3be4:	push	{fp, lr}
    3be8:	mov	fp, sp
    3bec:	sub	sp, sp, #152	; 0x98
    3bf0:	str	r0, [fp, #-8]
    3bf4:	ldr	r0, [fp, #-8]
    3bf8:	ldr	r0, [r0]
    3bfc:	ldr	r0, [r0, #8]
    3c00:	str	r0, [fp, #-12]
    3c04:	ldr	r0, [fp, #-8]
    3c08:	ldr	r0, [r0]
    3c0c:	ldr	r0, [r0, #12]
    3c10:	bl	42b0 <escaped_string_length>
    3c14:	str	r0, [fp, #-32]	; 0xffffffe0
    3c18:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3c1c:	cmp	r0, #0
    3c20:	bge	3c40 <cd_match_data_finalise+0x5c>
    3c24:	ldr	r0, [pc, #1664]	; 42ac <cd_match_data_finalise+0x6c8>
    3c28:	movw	r1, #0
    3c2c:	movt	r1, #0
    3c30:	bl	0 <coda_set_error>
    3c34:	mvn	r0, #0
    3c38:	str	r0, [fp, #-4]
    3c3c:	b	42a0 <cd_match_data_finalise+0x6bc>
    3c40:	ldr	r0, [fp, #-12]
    3c44:	ldr	r0, [r0, #4]
    3c48:	movw	r1, #0
    3c4c:	cmp	r0, r1
    3c50:	bne	401c <cd_match_data_finalise+0x438>
    3c54:	ldr	r0, [fp, #-12]
    3c58:	ldr	r0, [r0]
    3c5c:	movw	r1, #0
    3c60:	cmp	r0, r1
    3c64:	beq	3e18 <cd_match_data_finalise+0x234>
    3c68:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3c6c:	cmp	r0, #0
    3c70:	bne	3c80 <cd_match_data_finalise+0x9c>
    3c74:	movw	r0, #0
    3c78:	str	r0, [fp, #-4]
    3c7c:	b	42a0 <cd_match_data_finalise+0x6bc>
    3c80:	movw	r0, #36	; 0x24
    3c84:	movw	r1, #0
    3c88:	str	r1, [sp, #68]	; 0x44
    3c8c:	ldr	r2, [sp, #68]	; 0x44
    3c90:	ldr	r3, [sp, #68]	; 0x44
    3c94:	ldr	ip, [sp, #68]	; 0x44
    3c98:	str	ip, [sp]
    3c9c:	str	ip, [sp, #4]
    3ca0:	bl	0 <coda_expression_new>
    3ca4:	str	r0, [fp, #-36]	; 0xffffffdc
    3ca8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3cac:	movw	r1, #0
    3cb0:	cmp	r0, r1
    3cb4:	bne	3cc4 <cd_match_data_finalise+0xe0>
    3cb8:	mvn	r0, #0
    3cbc:	str	r0, [fp, #-4]
    3cc0:	b	42a0 <cd_match_data_finalise+0x6bc>
    3cc4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3cc8:	movw	r0, #75	; 0x4b
    3ccc:	movw	r1, #0
    3cd0:	str	r1, [sp, #64]	; 0x40
    3cd4:	ldr	r3, [sp, #64]	; 0x40
    3cd8:	ldr	ip, [sp, #64]	; 0x40
    3cdc:	str	ip, [sp]
    3ce0:	str	ip, [sp, #4]
    3ce4:	bl	0 <coda_expression_new>
    3ce8:	str	r0, [fp, #-16]
    3cec:	ldr	r0, [fp, #-16]
    3cf0:	movw	r1, #0
    3cf4:	cmp	r0, r1
    3cf8:	bne	3d08 <cd_match_data_finalise+0x124>
    3cfc:	mvn	r0, #0
    3d00:	str	r0, [fp, #-4]
    3d04:	b	42a0 <cd_match_data_finalise+0x6bc>
    3d08:	ldr	r0, [fp, #-8]
    3d0c:	ldr	r0, [r0]
    3d10:	ldr	r0, [r0, #12]
    3d14:	bl	0 <strdup>
    3d18:	str	r0, [fp, #-28]	; 0xffffffe4
    3d1c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3d20:	movw	lr, #0
    3d24:	cmp	r0, lr
    3d28:	bne	3d5c <cd_match_data_finalise+0x178>
    3d2c:	mvn	r0, #0
    3d30:	movw	r1, #0
    3d34:	movt	r1, #0
    3d38:	movw	r2, #0
    3d3c:	movt	r2, #0
    3d40:	movw	r3, #2090	; 0x82a
    3d44:	bl	0 <coda_set_error>
    3d48:	ldr	r0, [fp, #-16]
    3d4c:	bl	0 <coda_expression_delete>
    3d50:	mvn	r0, #0
    3d54:	str	r0, [fp, #-4]
    3d58:	b	42a0 <cd_match_data_finalise+0x6bc>
    3d5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3d60:	movw	r0, #22
    3d64:	movw	r2, #0
    3d68:	str	r2, [sp, #60]	; 0x3c
    3d6c:	ldr	r3, [sp, #60]	; 0x3c
    3d70:	ldr	ip, [sp, #60]	; 0x3c
    3d74:	str	ip, [sp]
    3d78:	str	ip, [sp, #4]
    3d7c:	bl	0 <coda_expression_new>
    3d80:	str	r0, [fp, #-20]	; 0xffffffec
    3d84:	ldr	r0, [fp, #-20]	; 0xffffffec
    3d88:	movw	r1, #0
    3d8c:	cmp	r0, r1
    3d90:	bne	3da8 <cd_match_data_finalise+0x1c4>
    3d94:	ldr	r0, [fp, #-16]
    3d98:	bl	0 <coda_expression_delete>
    3d9c:	mvn	r0, #0
    3da0:	str	r0, [fp, #-4]
    3da4:	b	42a0 <cd_match_data_finalise+0x6bc>
    3da8:	ldr	r2, [fp, #-16]
    3dac:	ldr	r3, [fp, #-20]	; 0xffffffec
    3db0:	movw	r0, #25
    3db4:	movw	r1, #0
    3db8:	str	r1, [sp, #56]	; 0x38
    3dbc:	ldr	ip, [sp, #56]	; 0x38
    3dc0:	str	ip, [sp]
    3dc4:	str	ip, [sp, #4]
    3dc8:	bl	0 <coda_expression_new>
    3dcc:	str	r0, [fp, #-24]	; 0xffffffe8
    3dd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3dd4:	movw	r1, #0
    3dd8:	cmp	r0, r1
    3ddc:	bne	3dec <cd_match_data_finalise+0x208>
    3de0:	mvn	r0, #0
    3de4:	str	r0, [fp, #-4]
    3de8:	b	42a0 <cd_match_data_finalise+0x6bc>
    3dec:	ldr	r0, [fp, #-12]
    3df0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3df4:	bl	0 <coda_detection_rule_entry_set_expression>
    3df8:	cmp	r0, #0
    3dfc:	beq	3e14 <cd_match_data_finalise+0x230>
    3e00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3e04:	bl	0 <coda_expression_delete>
    3e08:	mvn	r0, #0
    3e0c:	str	r0, [fp, #-4]
    3e10:	b	42a0 <cd_match_data_finalise+0x6bc>
    3e14:	b	4018 <cd_match_data_finalise+0x434>
    3e18:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3e1c:	cmp	r0, #0
    3e20:	bne	3e40 <cd_match_data_finalise+0x25c>
    3e24:	ldr	r0, [pc, #1152]	; 42ac <cd_match_data_finalise+0x6c8>
    3e28:	movw	r1, #0
    3e2c:	movt	r1, #0
    3e30:	bl	0 <coda_set_error>
    3e34:	mvn	r0, #0
    3e38:	str	r0, [fp, #-4]
    3e3c:	b	42a0 <cd_match_data_finalise+0x6bc>
    3e40:	movw	r0, #38	; 0x26
    3e44:	movw	r1, #0
    3e48:	str	r1, [sp, #52]	; 0x34
    3e4c:	ldr	r2, [sp, #52]	; 0x34
    3e50:	ldr	r3, [sp, #52]	; 0x34
    3e54:	ldr	ip, [sp, #52]	; 0x34
    3e58:	str	ip, [sp]
    3e5c:	str	ip, [sp, #4]
    3e60:	bl	0 <coda_expression_new>
    3e64:	str	r0, [fp, #-40]	; 0xffffffd8
    3e68:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3e6c:	movw	r1, #0
    3e70:	cmp	r0, r1
    3e74:	bne	3e84 <cd_match_data_finalise+0x2a0>
    3e78:	mvn	r0, #0
    3e7c:	str	r0, [fp, #-4]
    3e80:	b	42a0 <cd_match_data_finalise+0x6bc>
    3e84:	movw	r0, #0
    3e88:	movt	r0, #0
    3e8c:	bl	0 <strdup>
    3e90:	movw	lr, #20
    3e94:	str	r0, [sp, #48]	; 0x30
    3e98:	mov	r0, lr
    3e9c:	ldr	r1, [sp, #48]	; 0x30
    3ea0:	movw	lr, #0
    3ea4:	mov	r2, lr
    3ea8:	mov	r3, lr
    3eac:	str	lr, [sp]
    3eb0:	str	lr, [sp, #4]
    3eb4:	bl	0 <coda_expression_new>
    3eb8:	str	r0, [fp, #-44]	; 0xffffffd4
    3ebc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3ec0:	movw	r1, #0
    3ec4:	cmp	r0, r1
    3ec8:	bne	3ee0 <cd_match_data_finalise+0x2fc>
    3ecc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3ed0:	bl	0 <coda_expression_delete>
    3ed4:	mvn	r0, #0
    3ed8:	str	r0, [fp, #-4]
    3edc:	b	42a0 <cd_match_data_finalise+0x6bc>
    3ee0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    3ee4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3ee8:	movw	r0, #16
    3eec:	movw	r1, #0
    3ef0:	str	r1, [sp, #44]	; 0x2c
    3ef4:	ldr	ip, [sp, #44]	; 0x2c
    3ef8:	str	ip, [sp]
    3efc:	str	ip, [sp, #4]
    3f00:	bl	0 <coda_expression_new>
    3f04:	str	r0, [fp, #-20]	; 0xffffffec
    3f08:	ldr	r0, [fp, #-20]	; 0xffffffec
    3f0c:	movw	r1, #0
    3f10:	cmp	r0, r1
    3f14:	bne	3f24 <cd_match_data_finalise+0x340>
    3f18:	mvn	r0, #0
    3f1c:	str	r0, [fp, #-4]
    3f20:	b	42a0 <cd_match_data_finalise+0x6bc>
    3f24:	ldr	r0, [fp, #-8]
    3f28:	ldr	r0, [r0]
    3f2c:	ldr	r0, [r0, #12]
    3f30:	bl	44bc <regexp_match_string>
    3f34:	str	r0, [fp, #-28]	; 0xffffffe4
    3f38:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3f3c:	movw	lr, #0
    3f40:	cmp	r0, lr
    3f44:	bne	3f5c <cd_match_data_finalise+0x378>
    3f48:	ldr	r0, [fp, #-20]	; 0xffffffec
    3f4c:	bl	0 <coda_expression_delete>
    3f50:	mvn	r0, #0
    3f54:	str	r0, [fp, #-4]
    3f58:	b	42a0 <cd_match_data_finalise+0x6bc>
    3f5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3f60:	movw	r0, #21
    3f64:	movw	r2, #0
    3f68:	str	r2, [sp, #40]	; 0x28
    3f6c:	ldr	r3, [sp, #40]	; 0x28
    3f70:	ldr	ip, [sp, #40]	; 0x28
    3f74:	str	ip, [sp]
    3f78:	str	ip, [sp, #4]
    3f7c:	bl	0 <coda_expression_new>
    3f80:	str	r0, [fp, #-16]
    3f84:	ldr	r0, [fp, #-16]
    3f88:	movw	r1, #0
    3f8c:	cmp	r0, r1
    3f90:	bne	3fa8 <cd_match_data_finalise+0x3c4>
    3f94:	ldr	r0, [fp, #-20]	; 0xffffffec
    3f98:	bl	0 <coda_expression_delete>
    3f9c:	mvn	r0, #0
    3fa0:	str	r0, [fp, #-4]
    3fa4:	b	42a0 <cd_match_data_finalise+0x6bc>
    3fa8:	ldr	r2, [fp, #-16]
    3fac:	ldr	r3, [fp, #-20]	; 0xffffffec
    3fb0:	movw	r0, #71	; 0x47
    3fb4:	movw	r1, #0
    3fb8:	str	r1, [sp, #36]	; 0x24
    3fbc:	ldr	ip, [sp, #36]	; 0x24
    3fc0:	str	ip, [sp]
    3fc4:	str	ip, [sp, #4]
    3fc8:	bl	0 <coda_expression_new>
    3fcc:	str	r0, [fp, #-24]	; 0xffffffe8
    3fd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3fd4:	movw	r1, #0
    3fd8:	cmp	r0, r1
    3fdc:	bne	3fec <cd_match_data_finalise+0x408>
    3fe0:	mvn	r0, #0
    3fe4:	str	r0, [fp, #-4]
    3fe8:	b	42a0 <cd_match_data_finalise+0x6bc>
    3fec:	ldr	r0, [fp, #-12]
    3ff0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3ff4:	bl	0 <coda_detection_rule_entry_set_expression>
    3ff8:	cmp	r0, #0
    3ffc:	beq	4014 <cd_match_data_finalise+0x430>
    4000:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4004:	bl	0 <coda_expression_delete>
    4008:	mvn	r0, #0
    400c:	str	r0, [fp, #-4]
    4010:	b	42a0 <cd_match_data_finalise+0x6bc>
    4014:	b	4018 <cd_match_data_finalise+0x434>
    4018:	b	4298 <cd_match_data_finalise+0x6b4>
    401c:	ldr	r0, [fp, #-12]
    4020:	ldr	r0, [r0, #4]
    4024:	ldr	r0, [r0]
    4028:	cmp	r0, #20
    402c:	bne	4294 <cd_match_data_finalise+0x6b0>
    4030:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4034:	cmp	r0, #0
    4038:	bne	4058 <cd_match_data_finalise+0x474>
    403c:	ldr	r0, [pc, #616]	; 42ac <cd_match_data_finalise+0x6c8>
    4040:	movw	r1, #0
    4044:	movt	r1, #0
    4048:	bl	0 <coda_set_error>
    404c:	mvn	r0, #0
    4050:	str	r0, [fp, #-4]
    4054:	b	42a0 <cd_match_data_finalise+0x6bc>
    4058:	movw	r0, #38	; 0x26
    405c:	movw	r1, #0
    4060:	str	r1, [sp, #32]
    4064:	ldr	r2, [sp, #32]
    4068:	ldr	r3, [sp, #32]
    406c:	ldr	ip, [sp, #32]
    4070:	str	ip, [sp]
    4074:	str	ip, [sp, #4]
    4078:	bl	0 <coda_expression_new>
    407c:	str	r0, [sp, #76]	; 0x4c
    4080:	ldr	r0, [sp, #76]	; 0x4c
    4084:	movw	r1, #0
    4088:	cmp	r0, r1
    408c:	bne	409c <cd_match_data_finalise+0x4b8>
    4090:	mvn	r0, #0
    4094:	str	r0, [fp, #-4]
    4098:	b	42a0 <cd_match_data_finalise+0x6bc>
    409c:	sub	r2, fp, #69	; 0x45
    40a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    40a4:	asr	r1, r0, #31
    40a8:	bl	0 <coda_str64>
    40ac:	sub	r0, fp, #69	; 0x45
    40b0:	bl	0 <strdup>
    40b4:	str	r0, [fp, #-28]	; 0xffffffe4
    40b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    40bc:	movw	r1, #0
    40c0:	cmp	r0, r1
    40c4:	bne	40f8 <cd_match_data_finalise+0x514>
    40c8:	mvn	r0, #0
    40cc:	movw	r1, #0
    40d0:	movt	r1, #0
    40d4:	movw	r2, #0
    40d8:	movt	r2, #0
    40dc:	movw	r3, #2184	; 0x888
    40e0:	bl	0 <coda_set_error>
    40e4:	ldr	r0, [sp, #76]	; 0x4c
    40e8:	bl	0 <coda_expression_delete>
    40ec:	mvn	r0, #0
    40f0:	str	r0, [fp, #-4]
    40f4:	b	42a0 <cd_match_data_finalise+0x6bc>
    40f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    40fc:	movw	r0, #20
    4100:	movw	r2, #0
    4104:	str	r2, [sp, #28]
    4108:	ldr	r3, [sp, #28]
    410c:	ldr	ip, [sp, #28]
    4110:	str	ip, [sp]
    4114:	str	ip, [sp, #4]
    4118:	bl	0 <coda_expression_new>
    411c:	str	r0, [sp, #72]	; 0x48
    4120:	ldr	r0, [sp, #72]	; 0x48
    4124:	movw	r1, #0
    4128:	cmp	r0, r1
    412c:	bne	4144 <cd_match_data_finalise+0x560>
    4130:	ldr	r0, [sp, #76]	; 0x4c
    4134:	bl	0 <coda_expression_delete>
    4138:	mvn	r0, #0
    413c:	str	r0, [fp, #-4]
    4140:	b	42a0 <cd_match_data_finalise+0x6bc>
    4144:	ldr	r2, [sp, #76]	; 0x4c
    4148:	ldr	r0, [fp, #-12]
    414c:	ldr	r3, [r0, #4]
    4150:	ldr	r0, [sp, #72]	; 0x48
    4154:	movw	r1, #16
    4158:	str	r0, [sp, #24]
    415c:	mov	r0, r1
    4160:	movw	r1, #0
    4164:	str	r1, [sp, #20]
    4168:	ldr	ip, [sp, #24]
    416c:	str	ip, [sp]
    4170:	ldr	lr, [sp, #20]
    4174:	str	lr, [sp, #4]
    4178:	bl	0 <coda_expression_new>
    417c:	str	r0, [fp, #-16]
    4180:	ldr	r0, [fp, #-12]
    4184:	movw	r1, #0
    4188:	str	r1, [r0, #4]
    418c:	ldr	r0, [fp, #-16]
    4190:	cmp	r0, r1
    4194:	bne	41a4 <cd_match_data_finalise+0x5c0>
    4198:	mvn	r0, #0
    419c:	str	r0, [fp, #-4]
    41a0:	b	42a0 <cd_match_data_finalise+0x6bc>
    41a4:	ldr	r0, [fp, #-8]
    41a8:	ldr	r0, [r0]
    41ac:	ldr	r0, [r0, #12]
    41b0:	bl	0 <strdup>
    41b4:	str	r0, [fp, #-28]	; 0xffffffe4
    41b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    41bc:	movw	lr, #0
    41c0:	cmp	r0, lr
    41c4:	bne	41f8 <cd_match_data_finalise+0x614>
    41c8:	mvn	r0, #0
    41cc:	movw	r1, #0
    41d0:	movt	r1, #0
    41d4:	movw	r2, #0
    41d8:	movt	r2, #0
    41dc:	movw	r3, #2204	; 0x89c
    41e0:	bl	0 <coda_set_error>
    41e4:	ldr	r0, [fp, #-16]
    41e8:	bl	0 <coda_expression_delete>
    41ec:	mvn	r0, #0
    41f0:	str	r0, [fp, #-4]
    41f4:	b	42a0 <cd_match_data_finalise+0x6bc>
    41f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    41fc:	movw	r0, #22
    4200:	movw	r2, #0
    4204:	str	r2, [sp, #16]
    4208:	ldr	r3, [sp, #16]
    420c:	ldr	ip, [sp, #16]
    4210:	str	ip, [sp]
    4214:	str	ip, [sp, #4]
    4218:	bl	0 <coda_expression_new>
    421c:	str	r0, [fp, #-20]	; 0xffffffec
    4220:	ldr	r0, [fp, #-20]	; 0xffffffec
    4224:	movw	r1, #0
    4228:	cmp	r0, r1
    422c:	bne	4244 <cd_match_data_finalise+0x660>
    4230:	ldr	r0, [fp, #-16]
    4234:	bl	0 <coda_expression_delete>
    4238:	mvn	r0, #0
    423c:	str	r0, [fp, #-4]
    4240:	b	42a0 <cd_match_data_finalise+0x6bc>
    4244:	ldr	r2, [fp, #-16]
    4248:	ldr	r3, [fp, #-20]	; 0xffffffec
    424c:	movw	r0, #25
    4250:	movw	r1, #0
    4254:	str	r1, [sp, #12]
    4258:	ldr	ip, [sp, #12]
    425c:	str	ip, [sp]
    4260:	str	ip, [sp, #4]
    4264:	bl	0 <coda_expression_new>
    4268:	ldr	r1, [fp, #-12]
    426c:	str	r0, [r1, #4]
    4270:	ldr	r0, [fp, #-12]
    4274:	ldr	r0, [r0, #4]
    4278:	movw	r1, #0
    427c:	cmp	r0, r1
    4280:	bne	4290 <cd_match_data_finalise+0x6ac>
    4284:	mvn	r0, #0
    4288:	str	r0, [fp, #-4]
    428c:	b	42a0 <cd_match_data_finalise+0x6bc>
    4290:	b	4294 <cd_match_data_finalise+0x6b0>
    4294:	b	4298 <cd_match_data_finalise+0x6b4>
    4298:	movw	r0, #0
    429c:	str	r0, [fp, #-4]
    42a0:	ldr	r0, [fp, #-4]
    42a4:	mov	sp, fp
    42a8:	pop	{fp, pc}
    42ac:	.word	0xfffffe70

000042b0 <escaped_string_length>:
    42b0:	sub	sp, sp, #20
    42b4:	str	r0, [sp, #12]
    42b8:	ldr	r0, [sp, #12]
    42bc:	movw	r1, #0
    42c0:	cmp	r0, r1
    42c4:	bne	42d4 <escaped_string_length+0x24>
    42c8:	movw	r0, #0
    42cc:	str	r0, [sp, #16]
    42d0:	b	44b0 <escaped_string_length+0x200>
    42d4:	movw	r0, #0
    42d8:	str	r0, [sp, #8]
    42dc:	str	r0, [sp, #4]
    42e0:	ldr	r0, [sp, #12]
    42e4:	ldr	r1, [sp, #8]
    42e8:	add	r0, r0, r1
    42ec:	ldrb	r0, [r0]
    42f0:	cmp	r0, #0
    42f4:	beq	44a8 <escaped_string_length+0x1f8>
    42f8:	ldr	r0, [sp, #12]
    42fc:	ldr	r1, [sp, #8]
    4300:	add	r0, r0, r1
    4304:	ldrb	r0, [r0]
    4308:	cmp	r0, #92	; 0x5c
    430c:	bne	448c <escaped_string_length+0x1dc>
    4310:	ldr	r0, [sp, #8]
    4314:	add	r0, r0, #1
    4318:	str	r0, [sp, #8]
    431c:	ldr	r0, [sp, #12]
    4320:	ldr	r1, [sp, #8]
    4324:	ldrb	r0, [r0, r1]
    4328:	mov	r1, r0
    432c:	cmp	r0, #92	; 0x5c
    4330:	str	r1, [sp]
    4334:	beq	43a4 <escaped_string_length+0xf4>
    4338:	b	433c <escaped_string_length+0x8c>
    433c:	ldr	r0, [sp]
    4340:	sub	r1, r0, #97	; 0x61
    4344:	cmp	r1, #2
    4348:	bcc	43a4 <escaped_string_length+0xf4>
    434c:	b	4350 <escaped_string_length+0xa0>
    4350:	ldr	r0, [sp]
    4354:	sub	r1, r0, #101	; 0x65
    4358:	cmp	r1, #2
    435c:	bcc	43a4 <escaped_string_length+0xf4>
    4360:	b	4364 <escaped_string_length+0xb4>
    4364:	ldr	r0, [sp]
    4368:	cmp	r0, #110	; 0x6e
    436c:	beq	43a4 <escaped_string_length+0xf4>
    4370:	b	4374 <escaped_string_length+0xc4>
    4374:	ldr	r0, [sp]
    4378:	cmp	r0, #114	; 0x72
    437c:	beq	43a4 <escaped_string_length+0xf4>
    4380:	b	4384 <escaped_string_length+0xd4>
    4384:	ldr	r0, [sp]
    4388:	cmp	r0, #116	; 0x74
    438c:	beq	43a4 <escaped_string_length+0xf4>
    4390:	b	4394 <escaped_string_length+0xe4>
    4394:	ldr	r0, [sp]
    4398:	cmp	r0, #118	; 0x76
    439c:	bne	43b4 <escaped_string_length+0x104>
    43a0:	b	43a4 <escaped_string_length+0xf4>
    43a4:	ldr	r0, [sp, #4]
    43a8:	add	r0, r0, #1
    43ac:	str	r0, [sp, #4]
    43b0:	b	4488 <escaped_string_length+0x1d8>
    43b4:	ldr	r0, [sp, #12]
    43b8:	ldr	r1, [sp, #8]
    43bc:	add	r0, r0, r1
    43c0:	ldrb	r0, [r0]
    43c4:	cmp	r0, #48	; 0x30
    43c8:	blt	43e4 <escaped_string_length+0x134>
    43cc:	ldr	r0, [sp, #12]
    43d0:	ldr	r1, [sp, #8]
    43d4:	add	r0, r0, r1
    43d8:	ldrb	r0, [r0]
    43dc:	cmp	r0, #57	; 0x39
    43e0:	ble	43f0 <escaped_string_length+0x140>
    43e4:	mvn	r0, #0
    43e8:	str	r0, [sp, #16]
    43ec:	b	44b0 <escaped_string_length+0x200>
    43f0:	ldr	r0, [sp, #12]
    43f4:	ldr	r1, [sp, #8]
    43f8:	add	r1, r1, #1
    43fc:	add	r0, r0, r1
    4400:	ldrb	r0, [r0]
    4404:	cmp	r0, #48	; 0x30
    4408:	blt	447c <escaped_string_length+0x1cc>
    440c:	ldr	r0, [sp, #12]
    4410:	ldr	r1, [sp, #8]
    4414:	add	r1, r1, #1
    4418:	add	r0, r0, r1
    441c:	ldrb	r0, [r0]
    4420:	cmp	r0, #57	; 0x39
    4424:	bgt	447c <escaped_string_length+0x1cc>
    4428:	ldr	r0, [sp, #8]
    442c:	add	r0, r0, #1
    4430:	str	r0, [sp, #8]
    4434:	ldr	r0, [sp, #12]
    4438:	ldr	r1, [sp, #8]
    443c:	add	r1, r1, #1
    4440:	add	r0, r0, r1
    4444:	ldrb	r0, [r0]
    4448:	cmp	r0, #48	; 0x30
    444c:	blt	4478 <escaped_string_length+0x1c8>
    4450:	ldr	r0, [sp, #12]
    4454:	ldr	r1, [sp, #8]
    4458:	add	r1, r1, #1
    445c:	add	r0, r0, r1
    4460:	ldrb	r0, [r0]
    4464:	cmp	r0, #57	; 0x39
    4468:	bgt	4478 <escaped_string_length+0x1c8>
    446c:	ldr	r0, [sp, #8]
    4470:	add	r0, r0, #1
    4474:	str	r0, [sp, #8]
    4478:	b	447c <escaped_string_length+0x1cc>
    447c:	ldr	r0, [sp, #4]
    4480:	add	r0, r0, #1
    4484:	str	r0, [sp, #4]
    4488:	b	4498 <escaped_string_length+0x1e8>
    448c:	ldr	r0, [sp, #4]
    4490:	add	r0, r0, #1
    4494:	str	r0, [sp, #4]
    4498:	ldr	r0, [sp, #8]
    449c:	add	r0, r0, #1
    44a0:	str	r0, [sp, #8]
    44a4:	b	42e0 <escaped_string_length+0x30>
    44a8:	ldr	r0, [sp, #4]
    44ac:	str	r0, [sp, #16]
    44b0:	ldr	r0, [sp, #16]
    44b4:	add	sp, sp, #20
    44b8:	bx	lr

000044bc <regexp_match_string>:
    44bc:	push	{fp, lr}
    44c0:	mov	fp, sp
    44c4:	sub	sp, sp, #40	; 0x28
    44c8:	str	r0, [fp, #-8]
    44cc:	ldr	r0, [fp, #-8]
    44d0:	bl	0 <strlen>
    44d4:	str	r0, [fp, #-16]
    44d8:	movw	r0, #0
    44dc:	str	r0, [sp, #20]
    44e0:	str	r0, [sp, #16]
    44e4:	ldr	r0, [sp, #16]
    44e8:	ldr	r1, [fp, #-16]
    44ec:	cmp	r0, r1
    44f0:	bge	46b0 <regexp_match_string+0x1f4>
    44f4:	ldr	r0, [fp, #-8]
    44f8:	ldr	r1, [sp, #16]
    44fc:	ldrb	r0, [r0, r1]
    4500:	sub	r0, r0, #36	; 0x24
    4504:	cmp	r0, #88	; 0x58
    4508:	str	r0, [sp, #8]
    450c:	bhi	4690 <regexp_match_string+0x1d4>
    4510:	add	r0, pc, #8
    4514:	ldr	r1, [sp, #8]
    4518:	ldr	r0, [r0, r1, lsl #2]
    451c:	mov	pc, r0
    4520:	.word	0x00004684
    4524:	.word	0x00004690
    4528:	.word	0x00004690
    452c:	.word	0x00004690
    4530:	.word	0x00004684
    4534:	.word	0x00004684
    4538:	.word	0x00004684
    453c:	.word	0x00004684
    4540:	.word	0x00004690
    4544:	.word	0x00004690
    4548:	.word	0x00004684
    454c:	.word	0x00004690
    4550:	.word	0x00004690
    4554:	.word	0x00004690
    4558:	.word	0x00004690
    455c:	.word	0x00004690
    4560:	.word	0x00004690
    4564:	.word	0x00004690
    4568:	.word	0x00004690
    456c:	.word	0x00004690
    4570:	.word	0x00004690
    4574:	.word	0x00004690
    4578:	.word	0x00004690
    457c:	.word	0x00004690
    4580:	.word	0x00004690
    4584:	.word	0x00004690
    4588:	.word	0x00004690
    458c:	.word	0x00004684
    4590:	.word	0x00004690
    4594:	.word	0x00004690
    4598:	.word	0x00004690
    459c:	.word	0x00004690
    45a0:	.word	0x00004690
    45a4:	.word	0x00004690
    45a8:	.word	0x00004690
    45ac:	.word	0x00004690
    45b0:	.word	0x00004690
    45b4:	.word	0x00004690
    45b8:	.word	0x00004690
    45bc:	.word	0x00004690
    45c0:	.word	0x00004690
    45c4:	.word	0x00004690
    45c8:	.word	0x00004690
    45cc:	.word	0x00004690
    45d0:	.word	0x00004690
    45d4:	.word	0x00004690
    45d8:	.word	0x00004690
    45dc:	.word	0x00004690
    45e0:	.word	0x00004690
    45e4:	.word	0x00004690
    45e8:	.word	0x00004690
    45ec:	.word	0x00004690
    45f0:	.word	0x00004690
    45f4:	.word	0x00004690
    45f8:	.word	0x00004690
    45fc:	.word	0x00004684
    4600:	.word	0x00004684
    4604:	.word	0x00004690
    4608:	.word	0x00004684
    460c:	.word	0x00004690
    4610:	.word	0x00004690
    4614:	.word	0x00004690
    4618:	.word	0x00004690
    461c:	.word	0x00004690
    4620:	.word	0x00004690
    4624:	.word	0x00004690
    4628:	.word	0x00004690
    462c:	.word	0x00004690
    4630:	.word	0x00004690
    4634:	.word	0x00004690
    4638:	.word	0x00004690
    463c:	.word	0x00004690
    4640:	.word	0x00004690
    4644:	.word	0x00004690
    4648:	.word	0x00004690
    464c:	.word	0x00004690
    4650:	.word	0x00004690
    4654:	.word	0x00004690
    4658:	.word	0x00004690
    465c:	.word	0x00004690
    4660:	.word	0x00004690
    4664:	.word	0x00004690
    4668:	.word	0x00004690
    466c:	.word	0x00004690
    4670:	.word	0x00004690
    4674:	.word	0x00004690
    4678:	.word	0x00004690
    467c:	.word	0x00004684
    4680:	.word	0x00004684
    4684:	ldr	r0, [sp, #20]
    4688:	add	r0, r0, #1
    468c:	str	r0, [sp, #20]
    4690:	ldr	r0, [sp, #20]
    4694:	add	r0, r0, #1
    4698:	str	r0, [sp, #20]
    469c:	b	46a0 <regexp_match_string+0x1e4>
    46a0:	ldr	r0, [sp, #16]
    46a4:	add	r0, r0, #1
    46a8:	str	r0, [sp, #16]
    46ac:	b	44e4 <regexp_match_string+0x28>
    46b0:	ldr	r0, [sp, #20]
    46b4:	add	r0, r0, #1
    46b8:	bl	0 <malloc>
    46bc:	str	r0, [fp, #-12]
    46c0:	ldr	r0, [fp, #-12]
    46c4:	movw	lr, #0
    46c8:	cmp	r0, lr
    46cc:	bne	4704 <regexp_match_string+0x248>
    46d0:	ldr	r0, [sp, #20]
    46d4:	add	r2, r0, #1
    46d8:	mvn	r0, #0
    46dc:	movw	r1, #0
    46e0:	movt	r1, #0
    46e4:	movw	r3, #0
    46e8:	movt	r3, #0
    46ec:	movw	ip, #339	; 0x153
    46f0:	str	ip, [sp]
    46f4:	bl	0 <coda_set_error>
    46f8:	movw	r0, #0
    46fc:	str	r0, [fp, #-4]
    4700:	b	4924 <regexp_match_string+0x468>
    4704:	movw	r0, #0
    4708:	str	r0, [sp, #12]
    470c:	str	r0, [sp, #16]
    4710:	ldr	r0, [sp, #16]
    4714:	ldr	r1, [fp, #-16]
    4718:	cmp	r0, r1
    471c:	bge	4908 <regexp_match_string+0x44c>
    4720:	ldr	r0, [fp, #-8]
    4724:	ldr	r1, [sp, #16]
    4728:	ldrb	r0, [r0, r1]
    472c:	sub	r0, r0, #36	; 0x24
    4730:	cmp	r0, #88	; 0x58
    4734:	str	r0, [sp, #4]
    4738:	bhi	48cc <regexp_match_string+0x410>
    473c:	add	r0, pc, #8
    4740:	ldr	r1, [sp, #4]
    4744:	ldr	r0, [r0, r1, lsl #2]
    4748:	mov	pc, r0
    474c:	.word	0x000048b0
    4750:	.word	0x000048cc
    4754:	.word	0x000048cc
    4758:	.word	0x000048cc
    475c:	.word	0x000048b0
    4760:	.word	0x000048b0
    4764:	.word	0x000048b0
    4768:	.word	0x000048b0
    476c:	.word	0x000048cc
    4770:	.word	0x000048cc
    4774:	.word	0x000048b0
    4778:	.word	0x000048cc
    477c:	.word	0x000048cc
    4780:	.word	0x000048cc
    4784:	.word	0x000048cc
    4788:	.word	0x000048cc
    478c:	.word	0x000048cc
    4790:	.word	0x000048cc
    4794:	.word	0x000048cc
    4798:	.word	0x000048cc
    479c:	.word	0x000048cc
    47a0:	.word	0x000048cc
    47a4:	.word	0x000048cc
    47a8:	.word	0x000048cc
    47ac:	.word	0x000048cc
    47b0:	.word	0x000048cc
    47b4:	.word	0x000048cc
    47b8:	.word	0x000048b0
    47bc:	.word	0x000048cc
    47c0:	.word	0x000048cc
    47c4:	.word	0x000048cc
    47c8:	.word	0x000048cc
    47cc:	.word	0x000048cc
    47d0:	.word	0x000048cc
    47d4:	.word	0x000048cc
    47d8:	.word	0x000048cc
    47dc:	.word	0x000048cc
    47e0:	.word	0x000048cc
    47e4:	.word	0x000048cc
    47e8:	.word	0x000048cc
    47ec:	.word	0x000048cc
    47f0:	.word	0x000048cc
    47f4:	.word	0x000048cc
    47f8:	.word	0x000048cc
    47fc:	.word	0x000048cc
    4800:	.word	0x000048cc
    4804:	.word	0x000048cc
    4808:	.word	0x000048cc
    480c:	.word	0x000048cc
    4810:	.word	0x000048cc
    4814:	.word	0x000048cc
    4818:	.word	0x000048cc
    481c:	.word	0x000048cc
    4820:	.word	0x000048cc
    4824:	.word	0x000048cc
    4828:	.word	0x000048b0
    482c:	.word	0x000048b0
    4830:	.word	0x000048cc
    4834:	.word	0x000048b0
    4838:	.word	0x000048cc
    483c:	.word	0x000048cc
    4840:	.word	0x000048cc
    4844:	.word	0x000048cc
    4848:	.word	0x000048cc
    484c:	.word	0x000048cc
    4850:	.word	0x000048cc
    4854:	.word	0x000048cc
    4858:	.word	0x000048cc
    485c:	.word	0x000048cc
    4860:	.word	0x000048cc
    4864:	.word	0x000048cc
    4868:	.word	0x000048cc
    486c:	.word	0x000048cc
    4870:	.word	0x000048cc
    4874:	.word	0x000048cc
    4878:	.word	0x000048cc
    487c:	.word	0x000048cc
    4880:	.word	0x000048cc
    4884:	.word	0x000048cc
    4888:	.word	0x000048cc
    488c:	.word	0x000048cc
    4890:	.word	0x000048cc
    4894:	.word	0x000048cc
    4898:	.word	0x000048cc
    489c:	.word	0x000048cc
    48a0:	.word	0x000048cc
    48a4:	.word	0x000048cc
    48a8:	.word	0x000048b0
    48ac:	.word	0x000048b0
    48b0:	ldr	r0, [fp, #-12]
    48b4:	ldr	r1, [sp, #12]
    48b8:	add	r2, r1, #1
    48bc:	str	r2, [sp, #12]
    48c0:	add	r0, r0, r1
    48c4:	movw	r1, #92	; 0x5c
    48c8:	strb	r1, [r0]
    48cc:	ldr	r0, [fp, #-8]
    48d0:	ldr	r1, [sp, #16]
    48d4:	add	r0, r0, r1
    48d8:	ldrb	r0, [r0]
    48dc:	ldr	r1, [fp, #-12]
    48e0:	ldr	r2, [sp, #12]
    48e4:	add	r3, r2, #1
    48e8:	str	r3, [sp, #12]
    48ec:	add	r1, r1, r2
    48f0:	strb	r0, [r1]
    48f4:	b	48f8 <regexp_match_string+0x43c>
    48f8:	ldr	r0, [sp, #16]
    48fc:	add	r0, r0, #1
    4900:	str	r0, [sp, #16]
    4904:	b	4710 <regexp_match_string+0x254>
    4908:	ldr	r0, [fp, #-12]
    490c:	ldr	r1, [sp, #12]
    4910:	add	r0, r0, r1
    4914:	movw	r1, #0
    4918:	strb	r1, [r0]
    491c:	ldr	r0, [fp, #-12]
    4920:	str	r0, [fp, #-4]
    4924:	ldr	r0, [fp, #-4]
    4928:	mov	sp, fp
    492c:	pop	{fp, pc}

00004930 <cd_match_expression_finalise>:
    4930:	push	{fp, lr}
    4934:	mov	fp, sp
    4938:	sub	sp, sp, #24
    493c:	str	r0, [fp, #-8]
    4940:	ldr	r0, [fp, #-8]
    4944:	ldr	r0, [r0]
    4948:	ldr	r0, [r0, #12]
    494c:	movw	r1, #0
    4950:	cmp	r0, r1
    4954:	beq	49bc <cd_match_expression_finalise+0x8c>
    4958:	ldr	r0, [fp, #-8]
    495c:	ldr	r0, [r0]
    4960:	ldr	r0, [r0, #12]
    4964:	ldr	r1, [fp, #-8]
    4968:	ldr	r1, [r1]
    496c:	ldr	r1, [r1, #12]
    4970:	str	r0, [sp, #4]
    4974:	mov	r0, r1
    4978:	bl	0 <strlen>
    497c:	ldr	r1, [sp, #4]
    4980:	str	r0, [sp]
    4984:	mov	r0, r1
    4988:	ldr	r1, [sp]
    498c:	bl	2008 <is_whitespace>
    4990:	cmp	r0, #0
    4994:	beq	49b8 <cd_match_expression_finalise+0x88>
    4998:	ldr	r0, [fp, #-8]
    499c:	ldr	r0, [r0]
    49a0:	ldr	r0, [r0, #12]
    49a4:	bl	0 <free>
    49a8:	ldr	r0, [fp, #-8]
    49ac:	ldr	r0, [r0]
    49b0:	movw	lr, #0
    49b4:	str	lr, [r0, #12]
    49b8:	b	49bc <cd_match_expression_finalise+0x8c>
    49bc:	ldr	r0, [fp, #-8]
    49c0:	ldr	r0, [r0]
    49c4:	ldr	r0, [r0, #12]
    49c8:	movw	r1, #0
    49cc:	cmp	r0, r1
    49d0:	bne	49f0 <cd_match_expression_finalise+0xc0>
    49d4:	ldr	r0, [pc, #204]	; 4aa8 <cd_match_expression_finalise+0x178>
    49d8:	movw	r1, #0
    49dc:	movt	r1, #0
    49e0:	bl	0 <coda_set_error>
    49e4:	mvn	r0, #0
    49e8:	str	r0, [fp, #-4]
    49ec:	b	4a9c <cd_match_expression_finalise+0x16c>
    49f0:	ldr	r0, [fp, #-8]
    49f4:	ldr	r0, [r0]
    49f8:	ldr	r0, [r0, #12]
    49fc:	add	r1, sp, #8
    4a00:	bl	0 <coda_expression_from_string>
    4a04:	cmp	r0, #0
    4a08:	beq	4a18 <cd_match_expression_finalise+0xe8>
    4a0c:	mvn	r0, #0
    4a10:	str	r0, [fp, #-4]
    4a14:	b	4a9c <cd_match_expression_finalise+0x16c>
    4a18:	ldr	r0, [fp, #-8]
    4a1c:	ldr	r0, [r0]
    4a20:	ldr	r0, [r0, #12]
    4a24:	bl	0 <free>
    4a28:	ldr	r0, [fp, #-8]
    4a2c:	ldr	r0, [r0]
    4a30:	movw	lr, #0
    4a34:	str	lr, [r0, #12]
    4a38:	ldr	r0, [sp, #8]
    4a3c:	ldr	lr, [fp, #-8]
    4a40:	ldr	lr, [lr]
    4a44:	ldr	lr, [lr, #8]
    4a48:	str	r0, [lr, #4]
    4a4c:	ldr	r0, [sp, #8]
    4a50:	add	r1, sp, #12
    4a54:	bl	0 <coda_expression_get_type>
    4a58:	cmp	r0, #0
    4a5c:	beq	4a6c <cd_match_expression_finalise+0x13c>
    4a60:	mvn	r0, #0
    4a64:	str	r0, [fp, #-4]
    4a68:	b	4a9c <cd_match_expression_finalise+0x16c>
    4a6c:	ldr	r0, [sp, #12]
    4a70:	cmp	r0, #0
    4a74:	beq	4a94 <cd_match_expression_finalise+0x164>
    4a78:	ldr	r0, [pc, #40]	; 4aa8 <cd_match_expression_finalise+0x178>
    4a7c:	movw	r1, #0
    4a80:	movt	r1, #0
    4a84:	bl	0 <coda_set_error>
    4a88:	mvn	r0, #0
    4a8c:	str	r0, [fp, #-4]
    4a90:	b	4a9c <cd_match_expression_finalise+0x16c>
    4a94:	movw	r0, #0
    4a98:	str	r0, [fp, #-4]
    4a9c:	ldr	r0, [fp, #-4]
    4aa0:	mov	sp, fp
    4aa4:	pop	{fp, pc}
    4aa8:	.word	0xfffffe70

00004aac <cd_match_filename_finalise>:
    4aac:	push	{fp, lr}
    4ab0:	mov	fp, sp
    4ab4:	sub	sp, sp, #96	; 0x60
    4ab8:	str	r0, [fp, #-8]
    4abc:	ldr	r0, [fp, #-8]
    4ac0:	ldr	r0, [r0]
    4ac4:	ldr	r0, [r0, #8]
    4ac8:	str	r0, [fp, #-12]
    4acc:	ldr	r0, [fp, #-8]
    4ad0:	ldr	r0, [r0]
    4ad4:	ldr	r0, [r0, #12]
    4ad8:	bl	42b0 <escaped_string_length>
    4adc:	str	r0, [sp, #32]
    4ae0:	ldr	r0, [sp, #32]
    4ae4:	cmp	r0, #0
    4ae8:	bge	4b08 <cd_match_filename_finalise+0x5c>
    4aec:	ldr	r0, [pc, #640]	; 4d74 <cd_match_filename_finalise+0x2c8>
    4af0:	movw	r1, #0
    4af4:	movt	r1, #0
    4af8:	bl	0 <coda_set_error>
    4afc:	mvn	r0, #0
    4b00:	str	r0, [fp, #-4]
    4b04:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4b08:	ldr	r0, [sp, #32]
    4b0c:	cmp	r0, #0
    4b10:	bne	4b30 <cd_match_filename_finalise+0x84>
    4b14:	ldr	r0, [pc, #600]	; 4d74 <cd_match_filename_finalise+0x2c8>
    4b18:	movw	r1, #0
    4b1c:	movt	r1, #0
    4b20:	bl	0 <coda_set_error>
    4b24:	mvn	r0, #0
    4b28:	str	r0, [fp, #-4]
    4b2c:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4b30:	movw	r0, #28
    4b34:	movw	r1, #0
    4b38:	str	r1, [sp, #28]
    4b3c:	ldr	r2, [sp, #28]
    4b40:	ldr	r3, [sp, #28]
    4b44:	ldr	ip, [sp, #28]
    4b48:	str	ip, [sp]
    4b4c:	str	ip, [sp, #4]
    4b50:	bl	0 <coda_expression_new>
    4b54:	str	r0, [fp, #-16]
    4b58:	ldr	r0, [fp, #-16]
    4b5c:	movw	r1, #0
    4b60:	cmp	r0, r1
    4b64:	bne	4b74 <cd_match_filename_finalise+0xc8>
    4b68:	mvn	r0, #0
    4b6c:	str	r0, [fp, #-4]
    4b70:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4b74:	add	r2, sp, #43	; 0x2b
    4b78:	ldr	r0, [sp, #32]
    4b7c:	asr	r1, r0, #31
    4b80:	bl	0 <coda_str64>
    4b84:	add	r0, sp, #43	; 0x2b
    4b88:	bl	0 <strdup>
    4b8c:	str	r0, [sp, #36]	; 0x24
    4b90:	ldr	r0, [sp, #36]	; 0x24
    4b94:	movw	r1, #0
    4b98:	cmp	r0, r1
    4b9c:	bne	4bc8 <cd_match_filename_finalise+0x11c>
    4ba0:	mvn	r0, #0
    4ba4:	movw	r1, #0
    4ba8:	movt	r1, #0
    4bac:	movw	r2, #0
    4bb0:	movt	r2, #0
    4bb4:	movw	r3, #2588	; 0xa1c
    4bb8:	bl	0 <coda_set_error>
    4bbc:	mvn	r0, #0
    4bc0:	str	r0, [fp, #-4]
    4bc4:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4bc8:	ldr	r1, [sp, #36]	; 0x24
    4bcc:	movw	r0, #20
    4bd0:	movw	r2, #0
    4bd4:	str	r2, [sp, #24]
    4bd8:	ldr	r3, [sp, #24]
    4bdc:	ldr	ip, [sp, #24]
    4be0:	str	ip, [sp]
    4be4:	str	ip, [sp, #4]
    4be8:	bl	0 <coda_expression_new>
    4bec:	str	r0, [fp, #-20]	; 0xffffffec
    4bf0:	ldr	r0, [fp, #-20]	; 0xffffffec
    4bf4:	movw	r1, #0
    4bf8:	cmp	r0, r1
    4bfc:	bne	4c14 <cd_match_filename_finalise+0x168>
    4c00:	ldr	r0, [fp, #-16]
    4c04:	bl	0 <coda_expression_delete>
    4c08:	mvn	r0, #0
    4c0c:	str	r0, [fp, #-4]
    4c10:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4c14:	ldr	r0, [fp, #-12]
    4c18:	ldr	r2, [r0, #4]
    4c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4c20:	ldr	r0, [fp, #-16]
    4c24:	movw	r1, #77	; 0x4d
    4c28:	str	r0, [sp, #20]
    4c2c:	mov	r0, r1
    4c30:	movw	r1, #0
    4c34:	str	r1, [sp, #16]
    4c38:	ldr	ip, [sp, #20]
    4c3c:	str	ip, [sp]
    4c40:	ldr	lr, [sp, #16]
    4c44:	str	lr, [sp, #4]
    4c48:	bl	0 <coda_expression_new>
    4c4c:	str	r0, [fp, #-24]	; 0xffffffe8
    4c50:	ldr	r0, [fp, #-12]
    4c54:	movw	r1, #0
    4c58:	str	r1, [r0, #4]
    4c5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4c60:	cmp	r0, r1
    4c64:	bne	4c74 <cd_match_filename_finalise+0x1c8>
    4c68:	mvn	r0, #0
    4c6c:	str	r0, [fp, #-4]
    4c70:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4c74:	ldr	r0, [fp, #-8]
    4c78:	ldr	r0, [r0]
    4c7c:	ldr	r0, [r0, #12]
    4c80:	bl	0 <strdup>
    4c84:	str	r0, [sp, #36]	; 0x24
    4c88:	ldr	r0, [sp, #36]	; 0x24
    4c8c:	movw	lr, #0
    4c90:	cmp	r0, lr
    4c94:	bne	4cc8 <cd_match_filename_finalise+0x21c>
    4c98:	mvn	r0, #0
    4c9c:	movw	r1, #0
    4ca0:	movt	r1, #0
    4ca4:	movw	r2, #0
    4ca8:	movt	r2, #0
    4cac:	movw	r3, #2607	; 0xa2f
    4cb0:	bl	0 <coda_set_error>
    4cb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4cb8:	bl	0 <coda_expression_delete>
    4cbc:	mvn	r0, #0
    4cc0:	str	r0, [fp, #-4]
    4cc4:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4cc8:	ldr	r1, [sp, #36]	; 0x24
    4ccc:	movw	r0, #22
    4cd0:	movw	r2, #0
    4cd4:	str	r2, [sp, #12]
    4cd8:	ldr	r3, [sp, #12]
    4cdc:	ldr	ip, [sp, #12]
    4ce0:	str	ip, [sp]
    4ce4:	str	ip, [sp, #4]
    4ce8:	bl	0 <coda_expression_new>
    4cec:	str	r0, [fp, #-28]	; 0xffffffe4
    4cf0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    4cf4:	movw	r1, #0
    4cf8:	cmp	r0, r1
    4cfc:	bne	4d14 <cd_match_filename_finalise+0x268>
    4d00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4d04:	bl	0 <coda_expression_delete>
    4d08:	mvn	r0, #0
    4d0c:	str	r0, [fp, #-4]
    4d10:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4d14:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4d18:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4d1c:	movw	r0, #25
    4d20:	movw	r1, #0
    4d24:	str	r1, [sp, #8]
    4d28:	ldr	ip, [sp, #8]
    4d2c:	str	ip, [sp]
    4d30:	str	ip, [sp, #4]
    4d34:	bl	0 <coda_expression_new>
    4d38:	ldr	r1, [fp, #-12]
    4d3c:	str	r0, [r1, #4]
    4d40:	ldr	r0, [fp, #-12]
    4d44:	ldr	r0, [r0, #4]
    4d48:	movw	r1, #0
    4d4c:	cmp	r0, r1
    4d50:	bne	4d60 <cd_match_filename_finalise+0x2b4>
    4d54:	mvn	r0, #0
    4d58:	str	r0, [fp, #-4]
    4d5c:	b	4d68 <cd_match_filename_finalise+0x2bc>
    4d60:	movw	r0, #0
    4d64:	str	r0, [fp, #-4]
    4d68:	ldr	r0, [fp, #-4]
    4d6c:	mov	sp, fp
    4d70:	pop	{fp, pc}
    4d74:	.word	0xfffffe70

00004d78 <cd_ascii_line_init>:
    4d78:	push	{fp, lr}
    4d7c:	mov	fp, sp
    4d80:	sub	sp, sp, #16
    4d84:	str	r0, [sp, #8]
    4d88:	str	r1, [sp, #4]
    4d8c:	ldr	r0, [sp, #8]
    4d90:	ldr	r1, [sp, #4]
    4d94:	bl	7074 <handle_format_attribute_for_type>
    4d98:	cmp	r0, #0
    4d9c:	beq	4dac <cd_ascii_line_init+0x34>
    4da0:	mvn	r0, #0
    4da4:	str	r0, [fp, #-4]
    4da8:	b	4e70 <cd_ascii_line_init+0xf8>
    4dac:	movw	r0, #0
    4db0:	movt	r0, #0
    4db4:	ldr	r1, [sp, #8]
    4db8:	ldr	r1, [r1]
    4dbc:	str	r0, [r1, #40]	; 0x28
    4dc0:	ldr	r0, [sp, #8]
    4dc4:	ldr	r0, [r0]
    4dc8:	ldr	r0, [r0, #44]	; 0x2c
    4dcc:	bl	0 <coda_type_text_new>
    4dd0:	ldr	r1, [sp, #8]
    4dd4:	ldr	r1, [r1]
    4dd8:	str	r0, [r1, #8]
    4ddc:	ldr	r0, [sp, #8]
    4de0:	ldr	r0, [r0]
    4de4:	ldr	r0, [r0, #8]
    4de8:	movw	r1, #0
    4dec:	cmp	r0, r1
    4df0:	bne	4e00 <cd_ascii_line_init+0x88>
    4df4:	mvn	r0, #0
    4df8:	str	r0, [fp, #-4]
    4dfc:	b	4e70 <cd_ascii_line_init+0xf8>
    4e00:	ldr	r0, [sp, #8]
    4e04:	ldr	r0, [r0]
    4e08:	ldr	r0, [r0, #8]
    4e0c:	movw	r1, #3
    4e10:	bl	0 <coda_type_text_set_special_text_type>
    4e14:	cmp	r0, #0
    4e18:	beq	4e28 <cd_ascii_line_init+0xb0>
    4e1c:	mvn	r0, #0
    4e20:	str	r0, [fp, #-4]
    4e24:	b	4e70 <cd_ascii_line_init+0xf8>
    4e28:	ldr	r0, [sp, #8]
    4e2c:	ldr	r1, [sp, #4]
    4e30:	bl	71a0 <handle_name_attribute_for_type>
    4e34:	cmp	r0, #0
    4e38:	beq	4e48 <cd_ascii_line_init+0xd0>
    4e3c:	mvn	r0, #0
    4e40:	str	r0, [fp, #-4]
    4e44:	b	4e70 <cd_ascii_line_init+0xf8>
    4e48:	ldr	r0, [sp, #8]
    4e4c:	ldr	r0, [r0]
    4e50:	movw	r1, #11
    4e54:	movw	r2, #0
    4e58:	movt	r2, #0
    4e5c:	movw	r3, #0
    4e60:	movt	r3, #0
    4e64:	bl	1358 <register_sub_element>
    4e68:	movw	r0, #0
    4e6c:	str	r0, [fp, #-4]
    4e70:	ldr	r0, [fp, #-4]
    4e74:	mov	sp, fp
    4e78:	pop	{fp, pc}

00004e7c <cd_ascii_line_separator_init>:
    4e7c:	push	{fp, lr}
    4e80:	mov	fp, sp
    4e84:	sub	sp, sp, #16
    4e88:	str	r0, [sp, #8]
    4e8c:	str	r1, [sp, #4]
    4e90:	ldr	r0, [sp, #8]
    4e94:	ldr	r1, [sp, #4]
    4e98:	bl	7074 <handle_format_attribute_for_type>
    4e9c:	cmp	r0, #0
    4ea0:	beq	4eb0 <cd_ascii_line_separator_init+0x34>
    4ea4:	mvn	r0, #0
    4ea8:	str	r0, [fp, #-4]
    4eac:	b	4f74 <cd_ascii_line_separator_init+0xf8>
    4eb0:	movw	r0, #0
    4eb4:	movt	r0, #0
    4eb8:	ldr	r1, [sp, #8]
    4ebc:	ldr	r1, [r1]
    4ec0:	str	r0, [r1, #40]	; 0x28
    4ec4:	ldr	r0, [sp, #8]
    4ec8:	ldr	r0, [r0]
    4ecc:	ldr	r0, [r0, #44]	; 0x2c
    4ed0:	bl	0 <coda_type_text_new>
    4ed4:	ldr	r1, [sp, #8]
    4ed8:	ldr	r1, [r1]
    4edc:	str	r0, [r1, #8]
    4ee0:	ldr	r0, [sp, #8]
    4ee4:	ldr	r0, [r0]
    4ee8:	ldr	r0, [r0, #8]
    4eec:	movw	r1, #0
    4ef0:	cmp	r0, r1
    4ef4:	bne	4f04 <cd_ascii_line_separator_init+0x88>
    4ef8:	mvn	r0, #0
    4efc:	str	r0, [fp, #-4]
    4f00:	b	4f74 <cd_ascii_line_separator_init+0xf8>
    4f04:	ldr	r0, [sp, #8]
    4f08:	ldr	r0, [r0]
    4f0c:	ldr	r0, [r0, #8]
    4f10:	movw	r1, #1
    4f14:	bl	0 <coda_type_text_set_special_text_type>
    4f18:	cmp	r0, #0
    4f1c:	beq	4f2c <cd_ascii_line_separator_init+0xb0>
    4f20:	mvn	r0, #0
    4f24:	str	r0, [fp, #-4]
    4f28:	b	4f74 <cd_ascii_line_separator_init+0xf8>
    4f2c:	ldr	r0, [sp, #8]
    4f30:	ldr	r1, [sp, #4]
    4f34:	bl	71a0 <handle_name_attribute_for_type>
    4f38:	cmp	r0, #0
    4f3c:	beq	4f4c <cd_ascii_line_separator_init+0xd0>
    4f40:	mvn	r0, #0
    4f44:	str	r0, [fp, #-4]
    4f48:	b	4f74 <cd_ascii_line_separator_init+0xf8>
    4f4c:	ldr	r0, [sp, #8]
    4f50:	ldr	r0, [r0]
    4f54:	movw	r1, #11
    4f58:	movw	r2, #0
    4f5c:	movt	r2, #0
    4f60:	movw	r3, #0
    4f64:	movt	r3, #0
    4f68:	bl	1358 <register_sub_element>
    4f6c:	movw	r0, #0
    4f70:	str	r0, [fp, #-4]
    4f74:	ldr	r0, [fp, #-4]
    4f78:	mov	sp, fp
    4f7c:	pop	{fp, pc}

00004f80 <cd_ascii_white_space_init>:
    4f80:	push	{fp, lr}
    4f84:	mov	fp, sp
    4f88:	sub	sp, sp, #16
    4f8c:	str	r0, [sp, #8]
    4f90:	str	r1, [sp, #4]
    4f94:	ldr	r0, [sp, #8]
    4f98:	ldr	r1, [sp, #4]
    4f9c:	bl	7074 <handle_format_attribute_for_type>
    4fa0:	cmp	r0, #0
    4fa4:	beq	4fb4 <cd_ascii_white_space_init+0x34>
    4fa8:	mvn	r0, #0
    4fac:	str	r0, [fp, #-4]
    4fb0:	b	5078 <cd_ascii_white_space_init+0xf8>
    4fb4:	movw	r0, #0
    4fb8:	movt	r0, #0
    4fbc:	ldr	r1, [sp, #8]
    4fc0:	ldr	r1, [r1]
    4fc4:	str	r0, [r1, #40]	; 0x28
    4fc8:	ldr	r0, [sp, #8]
    4fcc:	ldr	r0, [r0]
    4fd0:	ldr	r0, [r0, #44]	; 0x2c
    4fd4:	bl	0 <coda_type_text_new>
    4fd8:	ldr	r1, [sp, #8]
    4fdc:	ldr	r1, [r1]
    4fe0:	str	r0, [r1, #8]
    4fe4:	ldr	r0, [sp, #8]
    4fe8:	ldr	r0, [r0]
    4fec:	ldr	r0, [r0, #8]
    4ff0:	movw	r1, #0
    4ff4:	cmp	r0, r1
    4ff8:	bne	5008 <cd_ascii_white_space_init+0x88>
    4ffc:	mvn	r0, #0
    5000:	str	r0, [fp, #-4]
    5004:	b	5078 <cd_ascii_white_space_init+0xf8>
    5008:	ldr	r0, [sp, #8]
    500c:	ldr	r0, [r0]
    5010:	ldr	r0, [r0, #8]
    5014:	movw	r1, #4
    5018:	bl	0 <coda_type_text_set_special_text_type>
    501c:	cmp	r0, #0
    5020:	beq	5030 <cd_ascii_white_space_init+0xb0>
    5024:	mvn	r0, #0
    5028:	str	r0, [fp, #-4]
    502c:	b	5078 <cd_ascii_white_space_init+0xf8>
    5030:	ldr	r0, [sp, #8]
    5034:	ldr	r1, [sp, #4]
    5038:	bl	71a0 <handle_name_attribute_for_type>
    503c:	cmp	r0, #0
    5040:	beq	5050 <cd_ascii_white_space_init+0xd0>
    5044:	mvn	r0, #0
    5048:	str	r0, [fp, #-4]
    504c:	b	5078 <cd_ascii_white_space_init+0xf8>
    5050:	ldr	r0, [sp, #8]
    5054:	ldr	r0, [r0]
    5058:	movw	r1, #11
    505c:	movw	r2, #0
    5060:	movt	r2, #0
    5064:	movw	r3, #0
    5068:	movt	r3, #0
    506c:	bl	1358 <register_sub_element>
    5070:	movw	r0, #0
    5074:	str	r0, [fp, #-4]
    5078:	ldr	r0, [fp, #-4]
    507c:	mov	sp, fp
    5080:	pop	{fp, pc}

00005084 <cd_array_init>:
    5084:	push	{fp, lr}
    5088:	mov	fp, sp
    508c:	sub	sp, sp, #16
    5090:	str	r0, [sp, #8]
    5094:	str	r1, [sp, #4]
    5098:	ldr	r0, [sp, #8]
    509c:	ldr	r1, [sp, #4]
    50a0:	bl	7074 <handle_format_attribute_for_type>
    50a4:	cmp	r0, #0
    50a8:	beq	50b8 <cd_array_init+0x34>
    50ac:	mvn	r0, #0
    50b0:	str	r0, [fp, #-4]
    50b4:	b	51bc <cd_array_init+0x138>
    50b8:	movw	r0, #0
    50bc:	movt	r0, #0
    50c0:	ldr	r1, [sp, #8]
    50c4:	ldr	r1, [r1]
    50c8:	str	r0, [r1, #40]	; 0x28
    50cc:	ldr	r0, [sp, #8]
    50d0:	ldr	r0, [r0]
    50d4:	ldr	r0, [r0, #44]	; 0x2c
    50d8:	bl	0 <coda_type_array_new>
    50dc:	ldr	r1, [sp, #8]
    50e0:	ldr	r1, [r1]
    50e4:	str	r0, [r1, #8]
    50e8:	ldr	r0, [sp, #8]
    50ec:	ldr	r0, [r0]
    50f0:	ldr	r0, [r0, #8]
    50f4:	movw	r1, #0
    50f8:	cmp	r0, r1
    50fc:	bne	510c <cd_array_init+0x88>
    5100:	mvn	r0, #0
    5104:	str	r0, [fp, #-4]
    5108:	b	51bc <cd_array_init+0x138>
    510c:	ldr	r0, [sp, #8]
    5110:	ldr	r1, [sp, #4]
    5114:	bl	71a0 <handle_name_attribute_for_type>
    5118:	cmp	r0, #0
    511c:	beq	512c <cd_array_init+0xa8>
    5120:	mvn	r0, #0
    5124:	str	r0, [fp, #-4]
    5128:	b	51bc <cd_array_init+0x138>
    512c:	ldr	r0, [sp, #8]
    5130:	ldr	r0, [r0]
    5134:	movw	r1, #0
    5138:	movt	r1, #0
    513c:	bl	1698 <register_type_elements>
    5140:	ldr	r0, [sp, #8]
    5144:	ldr	r0, [r0]
    5148:	movw	r1, #13
    514c:	movw	r2, #0
    5150:	movt	r2, #0
    5154:	movw	r3, #0
    5158:	movt	r3, #0
    515c:	bl	1358 <register_sub_element>
    5160:	ldr	r0, [sp, #8]
    5164:	ldr	r0, [r0]
    5168:	movw	r1, #11
    516c:	movw	r2, #0
    5170:	movt	r2, #0
    5174:	movw	r3, #0
    5178:	movt	r3, #0
    517c:	bl	1358 <register_sub_element>
    5180:	ldr	r0, [sp, #8]
    5184:	ldr	r0, [r0]
    5188:	movw	r1, #4
    518c:	movw	r2, #0
    5190:	movt	r2, #0
    5194:	movw	r3, #0
    5198:	movt	r3, #0
    519c:	bl	1358 <register_sub_element>
    51a0:	ldr	r0, [sp, #8]
    51a4:	ldr	r0, [r0]
    51a8:	movw	r1, #0
    51ac:	movt	r1, #0
    51b0:	str	r1, [r0, #36]	; 0x24
    51b4:	movw	r0, #0
    51b8:	str	r0, [fp, #-4]
    51bc:	ldr	r0, [fp, #-4]
    51c0:	mov	sp, fp
    51c4:	pop	{fp, pc}

000051c8 <cd_complex_init>:
    51c8:	push	{fp, lr}
    51cc:	mov	fp, sp
    51d0:	sub	sp, sp, #16
    51d4:	str	r0, [sp, #8]
    51d8:	str	r1, [sp, #4]
    51dc:	ldr	r0, [sp, #8]
    51e0:	ldr	r1, [sp, #4]
    51e4:	bl	7074 <handle_format_attribute_for_type>
    51e8:	cmp	r0, #0
    51ec:	beq	51fc <cd_complex_init+0x34>
    51f0:	mvn	r0, #0
    51f4:	str	r0, [fp, #-4]
    51f8:	b	52ec <cd_complex_init+0x124>
    51fc:	movw	r0, #0
    5200:	movt	r0, #0
    5204:	ldr	r1, [sp, #8]
    5208:	ldr	r1, [r1]
    520c:	str	r0, [r1, #40]	; 0x28
    5210:	ldr	r0, [sp, #8]
    5214:	ldr	r0, [r0]
    5218:	ldr	r0, [r0, #44]	; 0x2c
    521c:	bl	0 <coda_type_complex_new>
    5220:	ldr	r1, [sp, #8]
    5224:	ldr	r1, [r1]
    5228:	str	r0, [r1, #8]
    522c:	ldr	r0, [sp, #8]
    5230:	ldr	r0, [r0]
    5234:	ldr	r0, [r0, #8]
    5238:	movw	r1, #0
    523c:	cmp	r0, r1
    5240:	bne	5250 <cd_complex_init+0x88>
    5244:	mvn	r0, #0
    5248:	str	r0, [fp, #-4]
    524c:	b	52ec <cd_complex_init+0x124>
    5250:	ldr	r0, [sp, #8]
    5254:	ldr	r1, [sp, #4]
    5258:	bl	71a0 <handle_name_attribute_for_type>
    525c:	cmp	r0, #0
    5260:	beq	5270 <cd_complex_init+0xa8>
    5264:	mvn	r0, #0
    5268:	str	r0, [fp, #-4]
    526c:	b	52ec <cd_complex_init+0x124>
    5270:	ldr	r0, [sp, #8]
    5274:	ldr	r0, [r0]
    5278:	movw	r1, #11
    527c:	movw	r2, #0
    5280:	movt	r2, #0
    5284:	movw	r3, #0
    5288:	movt	r3, #0
    528c:	bl	1358 <register_sub_element>
    5290:	ldr	r0, [sp, #8]
    5294:	ldr	r0, [r0]
    5298:	movw	r1, #17
    529c:	movw	r2, #0
    52a0:	movt	r2, #0
    52a4:	movw	r3, #0
    52a8:	movt	r3, #0
    52ac:	bl	1358 <register_sub_element>
    52b0:	ldr	r0, [sp, #8]
    52b4:	ldr	r0, [r0]
    52b8:	movw	r1, #20
    52bc:	movw	r2, #0
    52c0:	movt	r2, #0
    52c4:	movw	r3, #0
    52c8:	movt	r3, #0
    52cc:	bl	1358 <register_sub_element>
    52d0:	ldr	r0, [sp, #8]
    52d4:	ldr	r0, [r0]
    52d8:	movw	r1, #0
    52dc:	movt	r1, #0
    52e0:	str	r1, [r0, #36]	; 0x24
    52e4:	movw	r0, #0
    52e8:	str	r0, [fp, #-4]
    52ec:	ldr	r0, [fp, #-4]
    52f0:	mov	sp, fp
    52f4:	pop	{fp, pc}

000052f8 <cd_float_init>:
    52f8:	push	{fp, lr}
    52fc:	mov	fp, sp
    5300:	sub	sp, sp, #16
    5304:	str	r0, [sp, #8]
    5308:	str	r1, [sp, #4]
    530c:	ldr	r0, [sp, #8]
    5310:	ldr	r1, [sp, #4]
    5314:	bl	7074 <handle_format_attribute_for_type>
    5318:	cmp	r0, #0
    531c:	beq	532c <cd_float_init+0x34>
    5320:	mvn	r0, #0
    5324:	str	r0, [fp, #-4]
    5328:	b	54e0 <cd_float_init+0x1e8>
    532c:	movw	r0, #0
    5330:	movt	r0, #0
    5334:	ldr	r1, [sp, #8]
    5338:	ldr	r1, [r1]
    533c:	str	r0, [r1, #40]	; 0x28
    5340:	ldr	r0, [sp, #8]
    5344:	ldr	r0, [r0]
    5348:	ldr	r0, [r0, #44]	; 0x2c
    534c:	movw	r1, #3
    5350:	bl	0 <coda_type_number_new>
    5354:	ldr	r1, [sp, #8]
    5358:	ldr	r1, [r1]
    535c:	str	r0, [r1, #8]
    5360:	ldr	r0, [sp, #8]
    5364:	ldr	r0, [r0]
    5368:	ldr	r0, [r0, #8]
    536c:	movw	r1, #0
    5370:	cmp	r0, r1
    5374:	bne	5384 <cd_float_init+0x8c>
    5378:	mvn	r0, #0
    537c:	str	r0, [fp, #-4]
    5380:	b	54e0 <cd_float_init+0x1e8>
    5384:	ldr	r0, [sp, #8]
    5388:	ldr	r1, [sp, #4]
    538c:	bl	71a0 <handle_name_attribute_for_type>
    5390:	cmp	r0, #0
    5394:	beq	53a4 <cd_float_init+0xac>
    5398:	mvn	r0, #0
    539c:	str	r0, [fp, #-4]
    53a0:	b	54e0 <cd_float_init+0x1e8>
    53a4:	ldr	r0, [sp, #8]
    53a8:	ldr	r0, [r0]
    53ac:	movw	r1, #41	; 0x29
    53b0:	movw	r2, #0
    53b4:	movt	r2, #0
    53b8:	movw	r3, #0
    53bc:	movt	r3, #0
    53c0:	bl	1358 <register_sub_element>
    53c4:	ldr	r0, [sp, #8]
    53c8:	ldr	r0, [r0]
    53cc:	movw	r1, #28
    53d0:	movw	r2, #0
    53d4:	movt	r2, #0
    53d8:	movw	r3, #0
    53dc:	movt	r3, #0
    53e0:	bl	1358 <register_sub_element>
    53e4:	ldr	r0, [sp, #8]
    53e8:	ldr	r0, [r0]
    53ec:	movw	r1, #10
    53f0:	movw	r2, #0
    53f4:	movt	r2, #0
    53f8:	movw	r3, #0
    53fc:	movt	r3, #0
    5400:	bl	1358 <register_sub_element>
    5404:	ldr	r0, [sp, #8]
    5408:	ldr	r0, [r0]
    540c:	movw	r1, #7
    5410:	movw	r2, #0
    5414:	movt	r2, #0
    5418:	movw	r3, #0
    541c:	movt	r3, #0
    5420:	bl	1358 <register_sub_element>
    5424:	ldr	r0, [sp, #8]
    5428:	ldr	r0, [r0]
    542c:	movw	r1, #8
    5430:	movw	r2, #0
    5434:	movt	r2, #0
    5438:	movw	r3, #0
    543c:	movt	r3, #0
    5440:	bl	1358 <register_sub_element>
    5444:	ldr	r0, [sp, #8]
    5448:	ldr	r0, [r0]
    544c:	movw	r1, #21
    5450:	movw	r2, #0
    5454:	movt	r2, #0
    5458:	movw	r3, #0
    545c:	movt	r3, #0
    5460:	bl	1358 <register_sub_element>
    5464:	ldr	r0, [sp, #8]
    5468:	ldr	r0, [r0]
    546c:	movw	r1, #22
    5470:	movw	r2, #0
    5474:	movt	r2, #0
    5478:	movw	r3, #0
    547c:	movt	r3, #0
    5480:	bl	1358 <register_sub_element>
    5484:	ldr	r0, [sp, #8]
    5488:	ldr	r0, [r0]
    548c:	movw	r1, #11
    5490:	movw	r2, #0
    5494:	movt	r2, #0
    5498:	movw	r3, #0
    549c:	movt	r3, #0
    54a0:	bl	1358 <register_sub_element>
    54a4:	ldr	r0, [sp, #8]
    54a8:	ldr	r0, [r0]
    54ac:	movw	r1, #4
    54b0:	movw	r2, #0
    54b4:	movt	r2, #0
    54b8:	movw	r3, #0
    54bc:	movt	r3, #0
    54c0:	bl	1358 <register_sub_element>
    54c4:	ldr	r0, [sp, #8]
    54c8:	ldr	r0, [r0]
    54cc:	movw	r1, #0
    54d0:	movt	r1, #0
    54d4:	str	r1, [r0, #36]	; 0x24
    54d8:	movw	r0, #0
    54dc:	str	r0, [fp, #-4]
    54e0:	ldr	r0, [fp, #-4]
    54e4:	mov	sp, fp
    54e8:	pop	{fp, pc}

000054ec <cd_integer_init>:
    54ec:	push	{fp, lr}
    54f0:	mov	fp, sp
    54f4:	sub	sp, sp, #16
    54f8:	str	r0, [sp, #8]
    54fc:	str	r1, [sp, #4]
    5500:	ldr	r0, [sp, #8]
    5504:	ldr	r1, [sp, #4]
    5508:	bl	7074 <handle_format_attribute_for_type>
    550c:	cmp	r0, #0
    5510:	beq	5520 <cd_integer_init+0x34>
    5514:	mvn	r0, #0
    5518:	str	r0, [fp, #-4]
    551c:	b	56d4 <cd_integer_init+0x1e8>
    5520:	movw	r0, #0
    5524:	movt	r0, #0
    5528:	ldr	r1, [sp, #8]
    552c:	ldr	r1, [r1]
    5530:	str	r0, [r1, #40]	; 0x28
    5534:	ldr	r0, [sp, #8]
    5538:	ldr	r0, [r0]
    553c:	ldr	r0, [r0, #44]	; 0x2c
    5540:	movw	r1, #2
    5544:	bl	0 <coda_type_number_new>
    5548:	ldr	r1, [sp, #8]
    554c:	ldr	r1, [r1]
    5550:	str	r0, [r1, #8]
    5554:	ldr	r0, [sp, #8]
    5558:	ldr	r0, [r0]
    555c:	ldr	r0, [r0, #8]
    5560:	movw	r1, #0
    5564:	cmp	r0, r1
    5568:	bne	5578 <cd_integer_init+0x8c>
    556c:	mvn	r0, #0
    5570:	str	r0, [fp, #-4]
    5574:	b	56d4 <cd_integer_init+0x1e8>
    5578:	ldr	r0, [sp, #8]
    557c:	ldr	r1, [sp, #4]
    5580:	bl	71a0 <handle_name_attribute_for_type>
    5584:	cmp	r0, #0
    5588:	beq	5598 <cd_integer_init+0xac>
    558c:	mvn	r0, #0
    5590:	str	r0, [fp, #-4]
    5594:	b	56d4 <cd_integer_init+0x1e8>
    5598:	ldr	r0, [sp, #8]
    559c:	ldr	r0, [r0]
    55a0:	movw	r1, #11
    55a4:	movw	r2, #0
    55a8:	movt	r2, #0
    55ac:	movw	r3, #0
    55b0:	movt	r3, #0
    55b4:	bl	1358 <register_sub_element>
    55b8:	ldr	r0, [sp, #8]
    55bc:	ldr	r0, [r0]
    55c0:	movw	r1, #41	; 0x29
    55c4:	movw	r2, #0
    55c8:	movt	r2, #0
    55cc:	movw	r3, #0
    55d0:	movt	r3, #0
    55d4:	bl	1358 <register_sub_element>
    55d8:	ldr	r0, [sp, #8]
    55dc:	ldr	r0, [r0]
    55e0:	movw	r1, #8
    55e4:	movw	r2, #0
    55e8:	movt	r2, #0
    55ec:	movw	r3, #0
    55f0:	movt	r3, #0
    55f4:	bl	1358 <register_sub_element>
    55f8:	ldr	r0, [sp, #8]
    55fc:	ldr	r0, [r0]
    5600:	movw	r1, #7
    5604:	movw	r2, #0
    5608:	movt	r2, #0
    560c:	movw	r3, #0
    5610:	movt	r3, #0
    5614:	bl	1358 <register_sub_element>
    5618:	ldr	r0, [sp, #8]
    561c:	ldr	r0, [r0]
    5620:	movw	r1, #21
    5624:	movw	r2, #0
    5628:	movt	r2, #0
    562c:	movw	r3, #0
    5630:	movt	r3, #0
    5634:	bl	1358 <register_sub_element>
    5638:	ldr	r0, [sp, #8]
    563c:	ldr	r0, [r0]
    5640:	movw	r1, #28
    5644:	movw	r2, #0
    5648:	movt	r2, #0
    564c:	movw	r3, #0
    5650:	movt	r3, #0
    5654:	bl	1358 <register_sub_element>
    5658:	ldr	r0, [sp, #8]
    565c:	ldr	r0, [r0]
    5660:	movw	r1, #10
    5664:	movw	r2, #0
    5668:	movt	r2, #0
    566c:	movw	r3, #0
    5670:	movt	r3, #0
    5674:	bl	1358 <register_sub_element>
    5678:	ldr	r0, [sp, #8]
    567c:	ldr	r0, [r0]
    5680:	movw	r1, #22
    5684:	movw	r2, #0
    5688:	movt	r2, #0
    568c:	movw	r3, #0
    5690:	movt	r3, #0
    5694:	bl	1358 <register_sub_element>
    5698:	ldr	r0, [sp, #8]
    569c:	ldr	r0, [r0]
    56a0:	movw	r1, #4
    56a4:	movw	r2, #0
    56a8:	movt	r2, #0
    56ac:	movw	r3, #0
    56b0:	movt	r3, #0
    56b4:	bl	1358 <register_sub_element>
    56b8:	ldr	r0, [sp, #8]
    56bc:	ldr	r0, [r0]
    56c0:	movw	r1, #0
    56c4:	movt	r1, #0
    56c8:	str	r1, [r0, #36]	; 0x24
    56cc:	movw	r0, #0
    56d0:	str	r0, [fp, #-4]
    56d4:	ldr	r0, [fp, #-4]
    56d8:	mov	sp, fp
    56dc:	pop	{fp, pc}

000056e0 <cd_named_type_init>:
    56e0:	push	{fp, lr}
    56e4:	mov	fp, sp
    56e8:	sub	sp, sp, #24
    56ec:	str	r0, [fp, #-8]
    56f0:	str	r1, [sp, #12]
    56f4:	ldr	r0, [sp, #12]
    56f8:	ldr	r1, [fp, #-8]
    56fc:	ldr	r1, [r1]
    5700:	ldr	r2, [r1]
    5704:	movw	r1, #0
    5708:	movt	r1, #0
    570c:	bl	20fc <get_mandatory_attribute_value>
    5710:	str	r0, [sp, #4]
    5714:	ldr	r0, [sp, #4]
    5718:	movw	r1, #0
    571c:	cmp	r0, r1
    5720:	bne	5730 <cd_named_type_init+0x50>
    5724:	mvn	r0, #0
    5728:	str	r0, [fp, #-4]
    572c:	b	57dc <cd_named_type_init+0xfc>
    5730:	movw	r0, #0
    5734:	movt	r0, #0
    5738:	ldr	r1, [fp, #-8]
    573c:	ldr	r1, [r1]
    5740:	str	r0, [r1, #40]	; 0x28
    5744:	ldr	r0, [fp, #-8]
    5748:	ldr	r0, [r0, #24]
    574c:	movw	r1, #0
    5750:	cmp	r0, r1
    5754:	beq	575c <cd_named_type_init+0x7c>
    5758:	b	577c <cd_named_type_init+0x9c>
    575c:	movw	r0, #0
    5760:	movt	r0, #0
    5764:	movw	r1, #0
    5768:	movt	r1, #0
    576c:	movw	r2, #1889	; 0x761
    5770:	movw	r3, #0
    5774:	movt	r3, #0
    5778:	bl	0 <__assert_fail>
    577c:	ldr	r0, [fp, #-8]
    5780:	ldr	r1, [sp, #4]
    5784:	add	r2, sp, #8
    5788:	bl	9508 <get_named_type>
    578c:	cmp	r0, #0
    5790:	beq	57a0 <cd_named_type_init+0xc0>
    5794:	mvn	r0, #0
    5798:	str	r0, [fp, #-4]
    579c:	b	57dc <cd_named_type_init+0xfc>
    57a0:	ldr	r0, [sp, #8]
    57a4:	ldr	r0, [r0]
    57a8:	ldr	r1, [fp, #-8]
    57ac:	ldr	r1, [r1]
    57b0:	str	r0, [r1, #44]	; 0x2c
    57b4:	ldr	r0, [fp, #-8]
    57b8:	ldr	r0, [r0]
    57bc:	movw	r1, #1
    57c0:	str	r1, [r0, #48]	; 0x30
    57c4:	ldr	r0, [sp, #8]
    57c8:	ldr	r1, [fp, #-8]
    57cc:	ldr	r1, [r1]
    57d0:	str	r0, [r1, #8]
    57d4:	movw	r0, #0
    57d8:	str	r0, [fp, #-4]
    57dc:	ldr	r0, [fp, #-4]
    57e0:	mov	sp, fp
    57e4:	pop	{fp, pc}

000057e8 <cd_raw_init>:
    57e8:	push	{fp, lr}
    57ec:	mov	fp, sp
    57f0:	sub	sp, sp, #16
    57f4:	str	r0, [sp, #8]
    57f8:	str	r1, [sp, #4]
    57fc:	ldr	r0, [sp, #8]
    5800:	ldr	r1, [sp, #4]
    5804:	bl	7074 <handle_format_attribute_for_type>
    5808:	cmp	r0, #0
    580c:	beq	581c <cd_raw_init+0x34>
    5810:	mvn	r0, #0
    5814:	str	r0, [fp, #-4]
    5818:	b	590c <cd_raw_init+0x124>
    581c:	movw	r0, #0
    5820:	movt	r0, #0
    5824:	ldr	r1, [sp, #8]
    5828:	ldr	r1, [r1]
    582c:	str	r0, [r1, #40]	; 0x28
    5830:	ldr	r0, [sp, #8]
    5834:	ldr	r0, [r0]
    5838:	ldr	r0, [r0, #44]	; 0x2c
    583c:	bl	0 <coda_type_raw_new>
    5840:	ldr	r1, [sp, #8]
    5844:	ldr	r1, [r1]
    5848:	str	r0, [r1, #8]
    584c:	ldr	r0, [sp, #8]
    5850:	ldr	r0, [r0]
    5854:	ldr	r0, [r0, #8]
    5858:	movw	r1, #0
    585c:	cmp	r0, r1
    5860:	bne	5870 <cd_raw_init+0x88>
    5864:	mvn	r0, #0
    5868:	str	r0, [fp, #-4]
    586c:	b	590c <cd_raw_init+0x124>
    5870:	ldr	r0, [sp, #8]
    5874:	ldr	r1, [sp, #4]
    5878:	bl	71a0 <handle_name_attribute_for_type>
    587c:	cmp	r0, #0
    5880:	beq	5890 <cd_raw_init+0xa8>
    5884:	mvn	r0, #0
    5888:	str	r0, [fp, #-4]
    588c:	b	590c <cd_raw_init+0x124>
    5890:	ldr	r0, [sp, #8]
    5894:	ldr	r0, [r0]
    5898:	movw	r1, #11
    589c:	movw	r2, #0
    58a0:	movt	r2, #0
    58a4:	movw	r3, #0
    58a8:	movt	r3, #0
    58ac:	bl	1358 <register_sub_element>
    58b0:	ldr	r0, [sp, #8]
    58b4:	ldr	r0, [r0]
    58b8:	movw	r1, #7
    58bc:	movw	r2, #0
    58c0:	movt	r2, #0
    58c4:	movw	r3, #0
    58c8:	movt	r3, #0
    58cc:	bl	1358 <register_sub_element>
    58d0:	ldr	r0, [sp, #8]
    58d4:	ldr	r0, [r0]
    58d8:	movw	r1, #16
    58dc:	movw	r2, #0
    58e0:	movt	r2, #0
    58e4:	movw	r3, #0
    58e8:	movt	r3, #0
    58ec:	bl	1358 <register_sub_element>
    58f0:	ldr	r0, [sp, #8]
    58f4:	ldr	r0, [r0]
    58f8:	movw	r1, #0
    58fc:	movt	r1, #0
    5900:	str	r1, [r0, #36]	; 0x24
    5904:	movw	r0, #0
    5908:	str	r0, [fp, #-4]
    590c:	ldr	r0, [fp, #-4]
    5910:	mov	sp, fp
    5914:	pop	{fp, pc}

00005918 <cd_record_init>:
    5918:	push	{fp, lr}
    591c:	mov	fp, sp
    5920:	sub	sp, sp, #16
    5924:	str	r0, [sp, #8]
    5928:	str	r1, [sp, #4]
    592c:	ldr	r0, [sp, #8]
    5930:	ldr	r1, [sp, #4]
    5934:	bl	7074 <handle_format_attribute_for_type>
    5938:	cmp	r0, #0
    593c:	beq	594c <cd_record_init+0x34>
    5940:	mvn	r0, #0
    5944:	str	r0, [fp, #-4]
    5948:	b	5a7c <cd_record_init+0x164>
    594c:	movw	r0, #0
    5950:	movt	r0, #0
    5954:	ldr	r1, [sp, #8]
    5958:	ldr	r1, [r1]
    595c:	str	r0, [r1, #40]	; 0x28
    5960:	ldr	r0, [sp, #8]
    5964:	ldr	r0, [r0]
    5968:	ldr	r0, [r0, #44]	; 0x2c
    596c:	bl	0 <coda_type_record_new>
    5970:	ldr	r1, [sp, #8]
    5974:	ldr	r1, [r1]
    5978:	str	r0, [r1, #8]
    597c:	ldr	r0, [sp, #8]
    5980:	ldr	r0, [r0]
    5984:	ldr	r0, [r0, #8]
    5988:	movw	r1, #0
    598c:	cmp	r0, r1
    5990:	bne	59a0 <cd_record_init+0x88>
    5994:	mvn	r0, #0
    5998:	str	r0, [fp, #-4]
    599c:	b	5a7c <cd_record_init+0x164>
    59a0:	ldr	r0, [sp, #8]
    59a4:	ldr	r1, [sp, #4]
    59a8:	bl	71a0 <handle_name_attribute_for_type>
    59ac:	cmp	r0, #0
    59b0:	beq	59c0 <cd_record_init+0xa8>
    59b4:	mvn	r0, #0
    59b8:	str	r0, [fp, #-4]
    59bc:	b	5a7c <cd_record_init+0x164>
    59c0:	ldr	r0, [sp, #8]
    59c4:	ldr	r0, [r0]
    59c8:	movw	r1, #11
    59cc:	movw	r2, #0
    59d0:	movt	r2, #0
    59d4:	movw	r3, #0
    59d8:	movt	r3, #0
    59dc:	bl	1358 <register_sub_element>
    59e0:	ldr	r0, [sp, #8]
    59e4:	ldr	r0, [r0]
    59e8:	movw	r1, #7
    59ec:	movw	r2, #0
    59f0:	movt	r2, #0
    59f4:	movw	r3, #0
    59f8:	movt	r3, #0
    59fc:	bl	1358 <register_sub_element>
    5a00:	ldr	r0, [sp, #8]
    5a04:	ldr	r0, [r0]
    5a08:	movw	r1, #14
    5a0c:	movw	r2, #0
    5a10:	movt	r2, #0
    5a14:	movw	r3, #0
    5a18:	movt	r3, #0
    5a1c:	bl	1358 <register_sub_element>
    5a20:	ldr	r0, [sp, #8]
    5a24:	ldr	r0, [r0]
    5a28:	movw	r1, #4
    5a2c:	movw	r2, #0
    5a30:	movt	r2, #0
    5a34:	movw	r3, #0
    5a38:	movt	r3, #0
    5a3c:	bl	1358 <register_sub_element>
    5a40:	ldr	r0, [sp, #8]
    5a44:	ldr	r0, [r0]
    5a48:	movw	r1, #0
    5a4c:	movt	r1, #0
    5a50:	str	r1, [r0, #36]	; 0x24
    5a54:	ldr	r0, [sp, #8]
    5a58:	ldr	r1, [sp, #4]
    5a5c:	bl	9a54 <handle_xml_name>
    5a60:	cmp	r0, #0
    5a64:	beq	5a74 <cd_record_init+0x15c>
    5a68:	mvn	r0, #0
    5a6c:	str	r0, [fp, #-4]
    5a70:	b	5a7c <cd_record_init+0x164>
    5a74:	movw	r0, #0
    5a78:	str	r0, [fp, #-4]
    5a7c:	ldr	r0, [fp, #-4]
    5a80:	mov	sp, fp
    5a84:	pop	{fp, pc}

00005a88 <cd_text_init>:
    5a88:	push	{fp, lr}
    5a8c:	mov	fp, sp
    5a90:	sub	sp, sp, #16
    5a94:	str	r0, [sp, #8]
    5a98:	str	r1, [sp, #4]
    5a9c:	ldr	r0, [sp, #8]
    5aa0:	ldr	r1, [sp, #4]
    5aa4:	bl	7074 <handle_format_attribute_for_type>
    5aa8:	cmp	r0, #0
    5aac:	beq	5abc <cd_text_init+0x34>
    5ab0:	mvn	r0, #0
    5ab4:	str	r0, [fp, #-4]
    5ab8:	b	5c0c <cd_text_init+0x184>
    5abc:	movw	r0, #0
    5ac0:	movt	r0, #0
    5ac4:	ldr	r1, [sp, #8]
    5ac8:	ldr	r1, [r1]
    5acc:	str	r0, [r1, #40]	; 0x28
    5ad0:	ldr	r0, [sp, #8]
    5ad4:	ldr	r0, [r0]
    5ad8:	ldr	r0, [r0, #44]	; 0x2c
    5adc:	bl	0 <coda_type_text_new>
    5ae0:	ldr	r1, [sp, #8]
    5ae4:	ldr	r1, [r1]
    5ae8:	str	r0, [r1, #8]
    5aec:	ldr	r0, [sp, #8]
    5af0:	ldr	r0, [r0]
    5af4:	ldr	r0, [r0, #8]
    5af8:	movw	r1, #0
    5afc:	cmp	r0, r1
    5b00:	bne	5b10 <cd_text_init+0x88>
    5b04:	mvn	r0, #0
    5b08:	str	r0, [fp, #-4]
    5b0c:	b	5c0c <cd_text_init+0x184>
    5b10:	ldr	r0, [sp, #8]
    5b14:	ldr	r1, [sp, #4]
    5b18:	bl	71a0 <handle_name_attribute_for_type>
    5b1c:	cmp	r0, #0
    5b20:	beq	5b30 <cd_text_init+0xa8>
    5b24:	mvn	r0, #0
    5b28:	str	r0, [fp, #-4]
    5b2c:	b	5c0c <cd_text_init+0x184>
    5b30:	ldr	r0, [sp, #8]
    5b34:	ldr	r0, [r0]
    5b38:	movw	r1, #11
    5b3c:	movw	r2, #0
    5b40:	movt	r2, #0
    5b44:	movw	r3, #0
    5b48:	movt	r3, #0
    5b4c:	bl	1358 <register_sub_element>
    5b50:	ldr	r0, [sp, #8]
    5b54:	ldr	r0, [r0]
    5b58:	movw	r1, #8
    5b5c:	movw	r2, #0
    5b60:	movt	r2, #0
    5b64:	movw	r3, #0
    5b68:	movt	r3, #0
    5b6c:	bl	1358 <register_sub_element>
    5b70:	ldr	r0, [sp, #8]
    5b74:	ldr	r0, [r0]
    5b78:	movw	r1, #16
    5b7c:	movw	r2, #0
    5b80:	movt	r2, #0
    5b84:	movw	r3, #0
    5b88:	movt	r3, #0
    5b8c:	bl	1358 <register_sub_element>
    5b90:	ldr	r0, [sp, #8]
    5b94:	ldr	r0, [r0]
    5b98:	movw	r1, #28
    5b9c:	movw	r2, #0
    5ba0:	movt	r2, #0
    5ba4:	movw	r3, #0
    5ba8:	movt	r3, #0
    5bac:	bl	1358 <register_sub_element>
    5bb0:	ldr	r0, [sp, #8]
    5bb4:	ldr	r0, [r0]
    5bb8:	movw	r1, #4
    5bbc:	movw	r2, #0
    5bc0:	movt	r2, #0
    5bc4:	movw	r3, #0
    5bc8:	movt	r3, #0
    5bcc:	bl	1358 <register_sub_element>
    5bd0:	ldr	r0, [sp, #8]
    5bd4:	ldr	r0, [r0]
    5bd8:	movw	r1, #0
    5bdc:	movt	r1, #0
    5be0:	str	r1, [r0, #36]	; 0x24
    5be4:	ldr	r0, [sp, #8]
    5be8:	ldr	r1, [sp, #4]
    5bec:	bl	9a54 <handle_xml_name>
    5bf0:	cmp	r0, #0
    5bf4:	beq	5c04 <cd_text_init+0x17c>
    5bf8:	mvn	r0, #0
    5bfc:	str	r0, [fp, #-4]
    5c00:	b	5c0c <cd_text_init+0x184>
    5c04:	movw	r0, #0
    5c08:	str	r0, [fp, #-4]
    5c0c:	ldr	r0, [fp, #-4]
    5c10:	mov	sp, fp
    5c14:	pop	{fp, pc}

00005c18 <cd_time_init>:
    5c18:	push	{r4, r5, fp, lr}
    5c1c:	add	fp, sp, #8
    5c20:	sub	sp, sp, #416	; 0x1a0
    5c24:	str	r0, [fp, #-16]
    5c28:	str	r1, [fp, #-20]	; 0xffffffec
    5c2c:	movw	r0, #0
    5c30:	str	r0, [fp, #-36]	; 0xffffffdc
    5c34:	ldr	r0, [fp, #-16]
    5c38:	ldr	r1, [fp, #-20]	; 0xffffffec
    5c3c:	bl	7074 <handle_format_attribute_for_type>
    5c40:	cmp	r0, #0
    5c44:	beq	5c54 <cd_time_init+0x3c>
    5c48:	mvn	r0, #0
    5c4c:	str	r0, [fp, #-12]
    5c50:	b	6c44 <cd_time_init+0x102c>
    5c54:	ldr	r0, [fp, #-20]	; 0xffffffec
    5c58:	ldr	r1, [fp, #-16]
    5c5c:	ldr	r1, [r1]
    5c60:	ldr	r2, [r1]
    5c64:	movw	r1, #0
    5c68:	movt	r1, #0
    5c6c:	bl	20fc <get_mandatory_attribute_value>
    5c70:	str	r0, [fp, #-24]	; 0xffffffe8
    5c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5c78:	movw	r1, #0
    5c7c:	cmp	r0, r1
    5c80:	bne	5c90 <cd_time_init+0x78>
    5c84:	mvn	r0, #0
    5c88:	str	r0, [fp, #-12]
    5c8c:	b	6c44 <cd_time_init+0x102c>
    5c90:	ldr	r0, [fp, #-16]
    5c94:	ldr	r0, [r0]
    5c98:	ldr	r0, [r0, #44]	; 0x2c
    5c9c:	cmp	r0, #0
    5ca0:	bne	61a0 <cd_time_init+0x588>
    5ca4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5ca8:	movw	r1, #0
    5cac:	movt	r1, #0
    5cb0:	bl	0 <strcmp>
    5cb4:	cmp	r0, #0
    5cb8:	bne	5d20 <cd_time_init+0x108>
    5cbc:	movw	r0, #0
    5cc0:	movt	r0, #0
    5cc4:	str	r0, [fp, #-24]	; 0xffffffe8
    5cc8:	ldr	r0, [fp, #-16]
    5ccc:	ldr	r0, [r0]
    5cd0:	ldr	r0, [r0, #44]	; 0x2c
    5cd4:	bl	0 <coda_type_text_new>
    5cd8:	str	r0, [fp, #-36]	; 0xffffffdc
    5cdc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5ce0:	movw	r1, #11
    5ce4:	bl	0 <coda_type_set_read_type>
    5ce8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5cec:	str	r0, [fp, #-52]	; 0xffffffcc
    5cf0:	mov	r0, r1
    5cf4:	movw	r1, #0
    5cf8:	movt	r1, #0
    5cfc:	bl	0 <coda_type_set_description>
    5d00:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5d04:	mov	r2, #27
    5d08:	mov	r3, #0
    5d0c:	str	r0, [fp, #-56]	; 0xffffffc8
    5d10:	mov	r0, r1
    5d14:	bl	0 <coda_type_set_byte_size>
    5d18:	str	r0, [fp, #-60]	; 0xffffffc4
    5d1c:	b	619c <cd_time_init+0x584>
    5d20:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5d24:	movw	r1, #0
    5d28:	movt	r1, #0
    5d2c:	bl	0 <strcmp>
    5d30:	cmp	r0, #0
    5d34:	bne	5d9c <cd_time_init+0x184>
    5d38:	movw	r0, #0
    5d3c:	movt	r0, #0
    5d40:	str	r0, [fp, #-24]	; 0xffffffe8
    5d44:	ldr	r0, [fp, #-16]
    5d48:	ldr	r0, [r0]
    5d4c:	ldr	r0, [r0, #44]	; 0x2c
    5d50:	bl	0 <coda_type_text_new>
    5d54:	str	r0, [fp, #-36]	; 0xffffffdc
    5d58:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5d5c:	movw	r1, #11
    5d60:	bl	0 <coda_type_set_read_type>
    5d64:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5d68:	str	r0, [fp, #-64]	; 0xffffffc0
    5d6c:	mov	r0, r1
    5d70:	movw	r1, #0
    5d74:	movt	r1, #0
    5d78:	bl	0 <coda_type_set_description>
    5d7c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5d80:	mov	r2, #24
    5d84:	mov	r3, #0
    5d88:	str	r0, [fp, #-68]	; 0xffffffbc
    5d8c:	mov	r0, r1
    5d90:	bl	0 <coda_type_set_byte_size>
    5d94:	str	r0, [fp, #-72]	; 0xffffffb8
    5d98:	b	6198 <cd_time_init+0x580>
    5d9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5da0:	movw	r1, #0
    5da4:	movt	r1, #0
    5da8:	bl	0 <strcmp>
    5dac:	cmp	r0, #0
    5db0:	bne	5e18 <cd_time_init+0x200>
    5db4:	movw	r0, #0
    5db8:	movt	r0, #0
    5dbc:	str	r0, [fp, #-24]	; 0xffffffe8
    5dc0:	ldr	r0, [fp, #-16]
    5dc4:	ldr	r0, [r0]
    5dc8:	ldr	r0, [r0, #44]	; 0x2c
    5dcc:	bl	0 <coda_type_text_new>
    5dd0:	str	r0, [fp, #-36]	; 0xffffffdc
    5dd4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5dd8:	movw	r1, #11
    5ddc:	bl	0 <coda_type_set_read_type>
    5de0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5de4:	str	r0, [fp, #-76]	; 0xffffffb4
    5de8:	mov	r0, r1
    5dec:	movw	r1, #0
    5df0:	movt	r1, #0
    5df4:	bl	0 <coda_type_set_description>
    5df8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5dfc:	mov	r2, #15
    5e00:	mov	r3, #0
    5e04:	str	r0, [fp, #-80]	; 0xffffffb0
    5e08:	mov	r0, r1
    5e0c:	bl	0 <coda_type_set_byte_size>
    5e10:	str	r0, [fp, #-84]	; 0xffffffac
    5e14:	b	6194 <cd_time_init+0x57c>
    5e18:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5e1c:	movw	r1, #0
    5e20:	movt	r1, #0
    5e24:	bl	0 <strcmp>
    5e28:	cmp	r0, #0
    5e2c:	bne	5e94 <cd_time_init+0x27c>
    5e30:	movw	r0, #0
    5e34:	movt	r0, #0
    5e38:	str	r0, [fp, #-24]	; 0xffffffe8
    5e3c:	ldr	r0, [fp, #-16]
    5e40:	ldr	r0, [r0]
    5e44:	ldr	r0, [r0, #44]	; 0x2c
    5e48:	bl	0 <coda_type_text_new>
    5e4c:	str	r0, [fp, #-36]	; 0xffffffdc
    5e50:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5e54:	movw	r1, #11
    5e58:	bl	0 <coda_type_set_read_type>
    5e5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5e60:	str	r0, [fp, #-88]	; 0xffffffa8
    5e64:	mov	r0, r1
    5e68:	movw	r1, #0
    5e6c:	movt	r1, #0
    5e70:	bl	0 <coda_type_set_description>
    5e74:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5e78:	mov	r2, #18
    5e7c:	mov	r3, #0
    5e80:	str	r0, [fp, #-92]	; 0xffffffa4
    5e84:	mov	r0, r1
    5e88:	bl	0 <coda_type_set_byte_size>
    5e8c:	str	r0, [fp, #-96]	; 0xffffffa0
    5e90:	b	6190 <cd_time_init+0x578>
    5e94:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5e98:	movw	r1, #0
    5e9c:	movt	r1, #0
    5ea0:	bl	0 <strcmp>
    5ea4:	cmp	r0, #0
    5ea8:	bne	5f10 <cd_time_init+0x2f8>
    5eac:	movw	r0, #0
    5eb0:	movt	r0, #0
    5eb4:	str	r0, [fp, #-24]	; 0xffffffe8
    5eb8:	ldr	r0, [fp, #-16]
    5ebc:	ldr	r0, [r0]
    5ec0:	ldr	r0, [r0, #44]	; 0x2c
    5ec4:	bl	0 <coda_type_text_new>
    5ec8:	str	r0, [fp, #-36]	; 0xffffffdc
    5ecc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5ed0:	movw	r1, #11
    5ed4:	bl	0 <coda_type_set_read_type>
    5ed8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5edc:	str	r0, [fp, #-100]	; 0xffffff9c
    5ee0:	mov	r0, r1
    5ee4:	movw	r1, #0
    5ee8:	movt	r1, #0
    5eec:	bl	0 <coda_type_set_description>
    5ef0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5ef4:	mov	r2, #19
    5ef8:	mov	r3, #0
    5efc:	str	r0, [fp, #-104]	; 0xffffff98
    5f00:	mov	r0, r1
    5f04:	bl	0 <coda_type_set_byte_size>
    5f08:	str	r0, [fp, #-108]	; 0xffffff94
    5f0c:	b	618c <cd_time_init+0x574>
    5f10:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5f14:	movw	r1, #0
    5f18:	movt	r1, #0
    5f1c:	bl	0 <strcmp>
    5f20:	cmp	r0, #0
    5f24:	bne	5f8c <cd_time_init+0x374>
    5f28:	movw	r0, #0
    5f2c:	movt	r0, #0
    5f30:	str	r0, [fp, #-24]	; 0xffffffe8
    5f34:	ldr	r0, [fp, #-16]
    5f38:	ldr	r0, [r0]
    5f3c:	ldr	r0, [r0, #44]	; 0x2c
    5f40:	bl	0 <coda_type_text_new>
    5f44:	str	r0, [fp, #-36]	; 0xffffffdc
    5f48:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5f4c:	movw	r1, #11
    5f50:	bl	0 <coda_type_set_read_type>
    5f54:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5f58:	str	r0, [fp, #-112]	; 0xffffff90
    5f5c:	mov	r0, r1
    5f60:	movw	r1, #0
    5f64:	movt	r1, #0
    5f68:	bl	0 <coda_type_set_description>
    5f6c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5f70:	mov	r2, #23
    5f74:	mov	r3, #0
    5f78:	str	r0, [fp, #-116]	; 0xffffff8c
    5f7c:	mov	r0, r1
    5f80:	bl	0 <coda_type_set_byte_size>
    5f84:	str	r0, [fp, #-120]	; 0xffffff88
    5f88:	b	6188 <cd_time_init+0x570>
    5f8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5f90:	movw	r1, #0
    5f94:	movt	r1, #0
    5f98:	bl	0 <strcmp>
    5f9c:	cmp	r0, #0
    5fa0:	bne	6008 <cd_time_init+0x3f0>
    5fa4:	movw	r0, #0
    5fa8:	movt	r0, #0
    5fac:	str	r0, [fp, #-24]	; 0xffffffe8
    5fb0:	ldr	r0, [fp, #-16]
    5fb4:	ldr	r0, [r0]
    5fb8:	ldr	r0, [r0, #44]	; 0x2c
    5fbc:	bl	0 <coda_type_text_new>
    5fc0:	str	r0, [fp, #-36]	; 0xffffffdc
    5fc4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5fc8:	movw	r1, #11
    5fcc:	bl	0 <coda_type_set_read_type>
    5fd0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5fd4:	str	r0, [fp, #-124]	; 0xffffff84
    5fd8:	mov	r0, r1
    5fdc:	movw	r1, #0
    5fe0:	movt	r1, #0
    5fe4:	bl	0 <coda_type_set_description>
    5fe8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5fec:	mov	r2, #26
    5ff0:	mov	r3, #0
    5ff4:	str	r0, [fp, #-128]	; 0xffffff80
    5ff8:	mov	r0, r1
    5ffc:	bl	0 <coda_type_set_byte_size>
    6000:	str	r0, [fp, #-132]	; 0xffffff7c
    6004:	b	6184 <cd_time_init+0x56c>
    6008:	ldr	r0, [fp, #-24]	; 0xffffffe8
    600c:	movw	r1, #0
    6010:	movt	r1, #0
    6014:	bl	0 <strcmp>
    6018:	cmp	r0, #0
    601c:	bne	6084 <cd_time_init+0x46c>
    6020:	movw	r0, #0
    6024:	movt	r0, #0
    6028:	str	r0, [fp, #-24]	; 0xffffffe8
    602c:	ldr	r0, [fp, #-16]
    6030:	ldr	r0, [r0]
    6034:	ldr	r0, [r0, #44]	; 0x2c
    6038:	bl	0 <coda_type_text_new>
    603c:	str	r0, [fp, #-36]	; 0xffffffdc
    6040:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6044:	movw	r1, #11
    6048:	bl	0 <coda_type_set_read_type>
    604c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6050:	str	r0, [fp, #-136]	; 0xffffff78
    6054:	mov	r0, r1
    6058:	movw	r1, #0
    605c:	movt	r1, #0
    6060:	bl	0 <coda_type_set_description>
    6064:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6068:	mov	r2, #30
    606c:	mov	r3, #0
    6070:	str	r0, [fp, #-140]	; 0xffffff74
    6074:	mov	r0, r1
    6078:	bl	0 <coda_type_set_byte_size>
    607c:	str	r0, [fp, #-144]	; 0xffffff70
    6080:	b	6180 <cd_time_init+0x568>
    6084:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6088:	movw	r1, #0
    608c:	movt	r1, #0
    6090:	bl	0 <strcmp>
    6094:	cmp	r0, #0
    6098:	bne	6100 <cd_time_init+0x4e8>
    609c:	movw	r0, #0
    60a0:	movt	r0, #0
    60a4:	str	r0, [fp, #-24]	; 0xffffffe8
    60a8:	ldr	r0, [fp, #-16]
    60ac:	ldr	r0, [r0]
    60b0:	ldr	r0, [r0, #44]	; 0x2c
    60b4:	bl	0 <coda_type_text_new>
    60b8:	str	r0, [fp, #-36]	; 0xffffffdc
    60bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    60c0:	movw	r1, #11
    60c4:	bl	0 <coda_type_set_read_type>
    60c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    60cc:	str	r0, [fp, #-148]	; 0xffffff6c
    60d0:	mov	r0, r1
    60d4:	movw	r1, #0
    60d8:	movt	r1, #0
    60dc:	bl	0 <coda_type_set_description>
    60e0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    60e4:	mov	r2, #17
    60e8:	mov	r3, #0
    60ec:	str	r0, [fp, #-152]	; 0xffffff68
    60f0:	mov	r0, r1
    60f4:	bl	0 <coda_type_set_byte_size>
    60f8:	str	r0, [fp, #-156]	; 0xffffff64
    60fc:	b	617c <cd_time_init+0x564>
    6100:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6104:	movw	r1, #0
    6108:	movt	r1, #0
    610c:	bl	0 <strcmp>
    6110:	cmp	r0, #0
    6114:	bne	6178 <cd_time_init+0x560>
    6118:	movw	r0, #0
    611c:	movt	r0, #0
    6120:	str	r0, [fp, #-24]	; 0xffffffe8
    6124:	ldr	r0, [fp, #-16]
    6128:	ldr	r0, [r0]
    612c:	ldr	r0, [r0, #44]	; 0x2c
    6130:	bl	0 <coda_type_text_new>
    6134:	str	r0, [fp, #-36]	; 0xffffffdc
    6138:	ldr	r0, [fp, #-36]	; 0xffffffdc
    613c:	movw	r1, #11
    6140:	bl	0 <coda_type_set_read_type>
    6144:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6148:	str	r0, [fp, #-160]	; 0xffffff60
    614c:	mov	r0, r1
    6150:	movw	r1, #0
    6154:	movt	r1, #0
    6158:	bl	0 <coda_type_set_description>
    615c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6160:	mov	r2, #24
    6164:	mov	r3, #0
    6168:	str	r0, [fp, #-164]	; 0xffffff5c
    616c:	mov	r0, r1
    6170:	bl	0 <coda_type_set_byte_size>
    6174:	str	r0, [fp, #-168]	; 0xffffff58
    6178:	b	617c <cd_time_init+0x564>
    617c:	b	6180 <cd_time_init+0x568>
    6180:	b	6184 <cd_time_init+0x56c>
    6184:	b	6188 <cd_time_init+0x570>
    6188:	b	618c <cd_time_init+0x574>
    618c:	b	6190 <cd_time_init+0x578>
    6190:	b	6194 <cd_time_init+0x57c>
    6194:	b	6198 <cd_time_init+0x580>
    6198:	b	619c <cd_time_init+0x584>
    619c:	b	6a2c <cd_time_init+0xe14>
    61a0:	ldr	r0, [fp, #-16]
    61a4:	ldr	r0, [r0]
    61a8:	ldr	r0, [r0, #44]	; 0x2c
    61ac:	cmp	r0, #1
    61b0:	bne	6a28 <cd_time_init+0xe10>
    61b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    61b8:	movw	r1, #0
    61bc:	movt	r1, #0
    61c0:	bl	0 <strcmp>
    61c4:	cmp	r0, #0
    61c8:	bne	6428 <cd_time_init+0x810>
    61cc:	movw	r0, #0
    61d0:	movt	r0, #0
    61d4:	str	r0, [fp, #-24]	; 0xffffffe8
    61d8:	ldr	r0, [fp, #-16]
    61dc:	ldr	r0, [r0]
    61e0:	ldr	r0, [r0, #44]	; 0x2c
    61e4:	bl	0 <coda_type_record_new>
    61e8:	str	r0, [fp, #-40]	; 0xffffffd8
    61ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
    61f0:	str	r0, [fp, #-36]	; 0xffffffdc
    61f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    61f8:	movw	r1, #0
    61fc:	movt	r1, #0
    6200:	bl	0 <coda_type_set_description>
    6204:	ldr	r1, [fp, #-16]
    6208:	ldr	r1, [r1]
    620c:	ldr	r1, [r1, #44]	; 0x2c
    6210:	str	r0, [fp, #-172]	; 0xffffff54
    6214:	mov	r0, r1
    6218:	movw	r1, #2
    621c:	bl	0 <coda_type_number_new>
    6220:	str	r0, [fp, #-48]	; 0xffffffd0
    6224:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6228:	movw	r1, #0
    622c:	movt	r1, #0
    6230:	bl	0 <coda_type_set_description>
    6234:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6238:	str	r0, [fp, #-176]	; 0xffffff50
    623c:	mov	r0, r1
    6240:	movw	r1, #4
    6244:	bl	0 <coda_type_set_read_type>
    6248:	ldr	r1, [fp, #-48]	; 0xffffffd0
    624c:	mov	r2, #32
    6250:	mov	r3, #0
    6254:	str	r0, [fp, #-180]	; 0xffffff4c
    6258:	mov	r0, r1
    625c:	bl	0 <coda_type_set_bit_size>
    6260:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6264:	str	r0, [fp, #-184]	; 0xffffff48
    6268:	mov	r0, r1
    626c:	movw	r1, #0
    6270:	movt	r1, #0
    6274:	bl	0 <coda_type_number_set_unit>
    6278:	movw	r1, #0
    627c:	movt	r1, #0
    6280:	str	r0, [fp, #-188]	; 0xffffff44
    6284:	mov	r0, r1
    6288:	bl	0 <coda_type_record_field_new>
    628c:	str	r0, [fp, #-44]	; 0xffffffd4
    6290:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6294:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6298:	bl	0 <coda_type_record_field_set_type>
    629c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    62a0:	str	r0, [fp, #-192]	; 0xffffff40
    62a4:	mov	r0, r1
    62a8:	bl	0 <coda_type_release>
    62ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
    62b0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    62b4:	bl	0 <coda_type_record_add_field>
    62b8:	ldr	r1, [fp, #-16]
    62bc:	ldr	r1, [r1]
    62c0:	ldr	r1, [r1, #44]	; 0x2c
    62c4:	str	r0, [fp, #-196]	; 0xffffff3c
    62c8:	mov	r0, r1
    62cc:	movw	r1, #2
    62d0:	bl	0 <coda_type_number_new>
    62d4:	str	r0, [fp, #-48]	; 0xffffffd0
    62d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    62dc:	movw	r1, #0
    62e0:	movt	r1, #0
    62e4:	bl	0 <coda_type_set_description>
    62e8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    62ec:	str	r0, [fp, #-200]	; 0xffffff38
    62f0:	mov	r0, r1
    62f4:	movw	r1, #5
    62f8:	bl	0 <coda_type_set_read_type>
    62fc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6300:	mov	r2, #32
    6304:	mov	r3, #0
    6308:	str	r0, [fp, #-204]	; 0xffffff34
    630c:	mov	r0, r1
    6310:	bl	0 <coda_type_set_bit_size>
    6314:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6318:	str	r0, [fp, #-208]	; 0xffffff30
    631c:	mov	r0, r1
    6320:	movw	r1, #0
    6324:	movt	r1, #0
    6328:	bl	0 <coda_type_number_set_unit>
    632c:	movw	r1, #0
    6330:	movt	r1, #0
    6334:	str	r0, [sp, #212]	; 0xd4
    6338:	mov	r0, r1
    633c:	bl	0 <coda_type_record_field_new>
    6340:	str	r0, [fp, #-44]	; 0xffffffd4
    6344:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6348:	ldr	r1, [fp, #-48]	; 0xffffffd0
    634c:	bl	0 <coda_type_record_field_set_type>
    6350:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6354:	str	r0, [sp, #208]	; 0xd0
    6358:	mov	r0, r1
    635c:	bl	0 <coda_type_release>
    6360:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6364:	ldr	r1, [fp, #-44]	; 0xffffffd4
    6368:	bl	0 <coda_type_record_add_field>
    636c:	ldr	r1, [fp, #-16]
    6370:	ldr	r1, [r1]
    6374:	ldr	r1, [r1, #44]	; 0x2c
    6378:	str	r0, [sp, #204]	; 0xcc
    637c:	mov	r0, r1
    6380:	movw	r1, #2
    6384:	bl	0 <coda_type_number_new>
    6388:	str	r0, [fp, #-48]	; 0xffffffd0
    638c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6390:	movw	r1, #0
    6394:	movt	r1, #0
    6398:	bl	0 <coda_type_set_description>
    639c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    63a0:	str	r0, [sp, #200]	; 0xc8
    63a4:	mov	r0, r1
    63a8:	movw	r1, #5
    63ac:	bl	0 <coda_type_set_read_type>
    63b0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    63b4:	mov	r2, #32
    63b8:	mov	r3, #0
    63bc:	str	r0, [sp, #196]	; 0xc4
    63c0:	mov	r0, r1
    63c4:	bl	0 <coda_type_set_bit_size>
    63c8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    63cc:	str	r0, [sp, #192]	; 0xc0
    63d0:	mov	r0, r1
    63d4:	movw	r1, #0
    63d8:	movt	r1, #0
    63dc:	bl	0 <coda_type_number_set_unit>
    63e0:	movw	r1, #0
    63e4:	movt	r1, #0
    63e8:	str	r0, [sp, #188]	; 0xbc
    63ec:	mov	r0, r1
    63f0:	bl	0 <coda_type_record_field_new>
    63f4:	str	r0, [fp, #-44]	; 0xffffffd4
    63f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    63fc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6400:	bl	0 <coda_type_record_field_set_type>
    6404:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6408:	str	r0, [sp, #184]	; 0xb8
    640c:	mov	r0, r1
    6410:	bl	0 <coda_type_release>
    6414:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6418:	ldr	r1, [fp, #-44]	; 0xffffffd4
    641c:	bl	0 <coda_type_record_add_field>
    6420:	str	r0, [sp, #180]	; 0xb4
    6424:	b	6a24 <cd_time_init+0xe0c>
    6428:	ldr	r0, [fp, #-24]	; 0xffffffe8
    642c:	movw	r1, #0
    6430:	movt	r1, #0
    6434:	bl	0 <strcmp>
    6438:	cmp	r0, #0
    643c:	bne	65e8 <cd_time_init+0x9d0>
    6440:	movw	r0, #0
    6444:	movt	r0, #0
    6448:	str	r0, [fp, #-24]	; 0xffffffe8
    644c:	ldr	r0, [fp, #-16]
    6450:	ldr	r0, [r0]
    6454:	ldr	r0, [r0, #44]	; 0x2c
    6458:	bl	0 <coda_type_record_new>
    645c:	str	r0, [fp, #-40]	; 0xffffffd8
    6460:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6464:	str	r0, [fp, #-36]	; 0xffffffdc
    6468:	ldr	r0, [fp, #-36]	; 0xffffffdc
    646c:	movw	r1, #0
    6470:	movt	r1, #0
    6474:	bl	0 <coda_type_set_description>
    6478:	ldr	r1, [fp, #-16]
    647c:	ldr	r1, [r1]
    6480:	ldr	r1, [r1, #44]	; 0x2c
    6484:	str	r0, [sp, #176]	; 0xb0
    6488:	mov	r0, r1
    648c:	movw	r1, #2
    6490:	bl	0 <coda_type_number_new>
    6494:	str	r0, [fp, #-48]	; 0xffffffd0
    6498:	ldr	r0, [fp, #-48]	; 0xffffffd0
    649c:	movw	r1, #0
    64a0:	movt	r1, #0
    64a4:	bl	0 <coda_type_set_description>
    64a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    64ac:	str	r0, [sp, #172]	; 0xac
    64b0:	mov	r0, r1
    64b4:	movw	r1, #4
    64b8:	bl	0 <coda_type_set_read_type>
    64bc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    64c0:	mov	r2, #32
    64c4:	mov	r3, #0
    64c8:	str	r0, [sp, #168]	; 0xa8
    64cc:	mov	r0, r1
    64d0:	bl	0 <coda_type_set_bit_size>
    64d4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    64d8:	str	r0, [sp, #164]	; 0xa4
    64dc:	mov	r0, r1
    64e0:	movw	r1, #0
    64e4:	movt	r1, #0
    64e8:	bl	0 <coda_type_number_set_unit>
    64ec:	movw	r1, #0
    64f0:	movt	r1, #0
    64f4:	str	r0, [sp, #160]	; 0xa0
    64f8:	mov	r0, r1
    64fc:	bl	0 <coda_type_record_field_new>
    6500:	str	r0, [fp, #-44]	; 0xffffffd4
    6504:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6508:	ldr	r1, [fp, #-48]	; 0xffffffd0
    650c:	bl	0 <coda_type_record_field_set_type>
    6510:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6514:	str	r0, [sp, #156]	; 0x9c
    6518:	mov	r0, r1
    651c:	bl	0 <coda_type_release>
    6520:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6524:	ldr	r1, [fp, #-44]	; 0xffffffd4
    6528:	bl	0 <coda_type_record_add_field>
    652c:	ldr	r1, [fp, #-16]
    6530:	ldr	r1, [r1]
    6534:	ldr	r1, [r1, #44]	; 0x2c
    6538:	str	r0, [sp, #152]	; 0x98
    653c:	mov	r0, r1
    6540:	movw	r1, #2
    6544:	bl	0 <coda_type_number_new>
    6548:	str	r0, [fp, #-48]	; 0xffffffd0
    654c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6550:	movw	r1, #0
    6554:	movt	r1, #0
    6558:	bl	0 <coda_type_set_description>
    655c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6560:	str	r0, [sp, #148]	; 0x94
    6564:	mov	r0, r1
    6568:	movw	r1, #5
    656c:	bl	0 <coda_type_set_read_type>
    6570:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6574:	mov	r2, #32
    6578:	mov	r3, #0
    657c:	str	r0, [sp, #144]	; 0x90
    6580:	mov	r0, r1
    6584:	bl	0 <coda_type_set_bit_size>
    6588:	ldr	r1, [fp, #-48]	; 0xffffffd0
    658c:	str	r0, [sp, #140]	; 0x8c
    6590:	mov	r0, r1
    6594:	movw	r1, #0
    6598:	movt	r1, #0
    659c:	bl	0 <coda_type_number_set_unit>
    65a0:	movw	r1, #0
    65a4:	movt	r1, #0
    65a8:	str	r0, [sp, #136]	; 0x88
    65ac:	mov	r0, r1
    65b0:	bl	0 <coda_type_record_field_new>
    65b4:	str	r0, [fp, #-44]	; 0xffffffd4
    65b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    65bc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    65c0:	bl	0 <coda_type_record_field_set_type>
    65c4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    65c8:	str	r0, [sp, #132]	; 0x84
    65cc:	mov	r0, r1
    65d0:	bl	0 <coda_type_release>
    65d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    65d8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    65dc:	bl	0 <coda_type_record_add_field>
    65e0:	str	r0, [sp, #128]	; 0x80
    65e4:	b	6a20 <cd_time_init+0xe08>
    65e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    65ec:	movw	r1, #0
    65f0:	movt	r1, #0
    65f4:	bl	0 <strcmp>
    65f8:	cmp	r0, #0
    65fc:	bne	67a8 <cd_time_init+0xb90>
    6600:	movw	r0, #0
    6604:	movt	r0, #0
    6608:	str	r0, [fp, #-24]	; 0xffffffe8
    660c:	ldr	r0, [fp, #-16]
    6610:	ldr	r0, [r0]
    6614:	ldr	r0, [r0, #44]	; 0x2c
    6618:	bl	0 <coda_type_record_new>
    661c:	str	r0, [fp, #-40]	; 0xffffffd8
    6620:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6624:	str	r0, [fp, #-36]	; 0xffffffdc
    6628:	ldr	r0, [fp, #-36]	; 0xffffffdc
    662c:	movw	r1, #0
    6630:	movt	r1, #0
    6634:	bl	0 <coda_type_set_description>
    6638:	ldr	r1, [fp, #-16]
    663c:	ldr	r1, [r1]
    6640:	ldr	r1, [r1, #44]	; 0x2c
    6644:	str	r0, [sp, #124]	; 0x7c
    6648:	mov	r0, r1
    664c:	movw	r1, #2
    6650:	bl	0 <coda_type_number_new>
    6654:	str	r0, [fp, #-48]	; 0xffffffd0
    6658:	ldr	r0, [fp, #-48]	; 0xffffffd0
    665c:	movw	r1, #0
    6660:	movt	r1, #0
    6664:	bl	0 <coda_type_set_description>
    6668:	ldr	r1, [fp, #-48]	; 0xffffffd0
    666c:	str	r0, [sp, #120]	; 0x78
    6670:	mov	r0, r1
    6674:	movw	r1, #3
    6678:	bl	0 <coda_type_set_read_type>
    667c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6680:	mov	r2, #16
    6684:	mov	r3, #0
    6688:	str	r0, [sp, #116]	; 0x74
    668c:	mov	r0, r1
    6690:	bl	0 <coda_type_set_bit_size>
    6694:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6698:	str	r0, [sp, #112]	; 0x70
    669c:	mov	r0, r1
    66a0:	movw	r1, #0
    66a4:	movt	r1, #0
    66a8:	bl	0 <coda_type_number_set_unit>
    66ac:	movw	r1, #0
    66b0:	movt	r1, #0
    66b4:	str	r0, [sp, #108]	; 0x6c
    66b8:	mov	r0, r1
    66bc:	bl	0 <coda_type_record_field_new>
    66c0:	str	r0, [fp, #-44]	; 0xffffffd4
    66c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    66c8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    66cc:	bl	0 <coda_type_record_field_set_type>
    66d0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    66d4:	str	r0, [sp, #104]	; 0x68
    66d8:	mov	r0, r1
    66dc:	bl	0 <coda_type_release>
    66e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    66e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    66e8:	bl	0 <coda_type_record_add_field>
    66ec:	ldr	r1, [fp, #-16]
    66f0:	ldr	r1, [r1]
    66f4:	ldr	r1, [r1, #44]	; 0x2c
    66f8:	str	r0, [sp, #100]	; 0x64
    66fc:	mov	r0, r1
    6700:	movw	r1, #2
    6704:	bl	0 <coda_type_number_new>
    6708:	str	r0, [fp, #-48]	; 0xffffffd0
    670c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6710:	movw	r1, #0
    6714:	movt	r1, #0
    6718:	bl	0 <coda_type_set_description>
    671c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6720:	str	r0, [sp, #96]	; 0x60
    6724:	mov	r0, r1
    6728:	movw	r1, #5
    672c:	bl	0 <coda_type_set_read_type>
    6730:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6734:	mov	r2, #32
    6738:	mov	r3, #0
    673c:	str	r0, [sp, #92]	; 0x5c
    6740:	mov	r0, r1
    6744:	bl	0 <coda_type_set_bit_size>
    6748:	ldr	r1, [fp, #-48]	; 0xffffffd0
    674c:	str	r0, [sp, #88]	; 0x58
    6750:	mov	r0, r1
    6754:	movw	r1, #0
    6758:	movt	r1, #0
    675c:	bl	0 <coda_type_number_set_unit>
    6760:	movw	r1, #0
    6764:	movt	r1, #0
    6768:	str	r0, [sp, #84]	; 0x54
    676c:	mov	r0, r1
    6770:	bl	0 <coda_type_record_field_new>
    6774:	str	r0, [fp, #-44]	; 0xffffffd4
    6778:	ldr	r0, [fp, #-44]	; 0xffffffd4
    677c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6780:	bl	0 <coda_type_record_field_set_type>
    6784:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6788:	str	r0, [sp, #80]	; 0x50
    678c:	mov	r0, r1
    6790:	bl	0 <coda_type_release>
    6794:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6798:	ldr	r1, [fp, #-44]	; 0xffffffd4
    679c:	bl	0 <coda_type_record_add_field>
    67a0:	str	r0, [sp, #76]	; 0x4c
    67a4:	b	6a1c <cd_time_init+0xe04>
    67a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    67ac:	movw	r1, #0
    67b0:	movt	r1, #0
    67b4:	bl	0 <strcmp>
    67b8:	cmp	r0, #0
    67bc:	bne	6a18 <cd_time_init+0xe00>
    67c0:	movw	r0, #0
    67c4:	movt	r0, #0
    67c8:	str	r0, [fp, #-24]	; 0xffffffe8
    67cc:	ldr	r0, [fp, #-16]
    67d0:	ldr	r0, [r0]
    67d4:	ldr	r0, [r0, #44]	; 0x2c
    67d8:	bl	0 <coda_type_record_new>
    67dc:	str	r0, [fp, #-40]	; 0xffffffd8
    67e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    67e4:	str	r0, [fp, #-36]	; 0xffffffdc
    67e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    67ec:	movw	r1, #0
    67f0:	movt	r1, #0
    67f4:	bl	0 <coda_type_set_description>
    67f8:	ldr	r1, [fp, #-16]
    67fc:	ldr	r1, [r1]
    6800:	ldr	r1, [r1, #44]	; 0x2c
    6804:	str	r0, [sp, #72]	; 0x48
    6808:	mov	r0, r1
    680c:	movw	r1, #2
    6810:	bl	0 <coda_type_number_new>
    6814:	str	r0, [fp, #-48]	; 0xffffffd0
    6818:	ldr	r0, [fp, #-48]	; 0xffffffd0
    681c:	movw	r1, #0
    6820:	movt	r1, #0
    6824:	bl	0 <coda_type_set_description>
    6828:	ldr	r1, [fp, #-48]	; 0xffffffd0
    682c:	str	r0, [sp, #68]	; 0x44
    6830:	mov	r0, r1
    6834:	movw	r1, #3
    6838:	bl	0 <coda_type_set_read_type>
    683c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6840:	mov	r2, #16
    6844:	mov	r3, #0
    6848:	str	r0, [sp, #64]	; 0x40
    684c:	mov	r0, r1
    6850:	bl	0 <coda_type_set_bit_size>
    6854:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6858:	str	r0, [sp, #60]	; 0x3c
    685c:	mov	r0, r1
    6860:	movw	r1, #0
    6864:	movt	r1, #0
    6868:	bl	0 <coda_type_number_set_unit>
    686c:	movw	r1, #0
    6870:	movt	r1, #0
    6874:	str	r0, [sp, #56]	; 0x38
    6878:	mov	r0, r1
    687c:	bl	0 <coda_type_record_field_new>
    6880:	str	r0, [fp, #-44]	; 0xffffffd4
    6884:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6888:	ldr	r1, [fp, #-48]	; 0xffffffd0
    688c:	bl	0 <coda_type_record_field_set_type>
    6890:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6894:	str	r0, [sp, #52]	; 0x34
    6898:	mov	r0, r1
    689c:	bl	0 <coda_type_release>
    68a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    68a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    68a8:	bl	0 <coda_type_record_add_field>
    68ac:	ldr	r1, [fp, #-16]
    68b0:	ldr	r1, [r1]
    68b4:	ldr	r1, [r1, #44]	; 0x2c
    68b8:	str	r0, [sp, #48]	; 0x30
    68bc:	mov	r0, r1
    68c0:	movw	r1, #2
    68c4:	bl	0 <coda_type_number_new>
    68c8:	str	r0, [fp, #-48]	; 0xffffffd0
    68cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    68d0:	movw	r1, #0
    68d4:	movt	r1, #0
    68d8:	bl	0 <coda_type_set_description>
    68dc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    68e0:	str	r0, [sp, #44]	; 0x2c
    68e4:	mov	r0, r1
    68e8:	movw	r1, #5
    68ec:	bl	0 <coda_type_set_read_type>
    68f0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    68f4:	mov	r2, #32
    68f8:	mov	r3, #0
    68fc:	str	r0, [sp, #40]	; 0x28
    6900:	mov	r0, r1
    6904:	bl	0 <coda_type_set_bit_size>
    6908:	ldr	r1, [fp, #-48]	; 0xffffffd0
    690c:	str	r0, [sp, #36]	; 0x24
    6910:	mov	r0, r1
    6914:	movw	r1, #0
    6918:	movt	r1, #0
    691c:	bl	0 <coda_type_number_set_unit>
    6920:	movw	r1, #0
    6924:	movt	r1, #0
    6928:	str	r0, [sp, #32]
    692c:	mov	r0, r1
    6930:	bl	0 <coda_type_record_field_new>
    6934:	str	r0, [fp, #-44]	; 0xffffffd4
    6938:	ldr	r0, [fp, #-44]	; 0xffffffd4
    693c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6940:	bl	0 <coda_type_record_field_set_type>
    6944:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6948:	str	r0, [sp, #28]
    694c:	mov	r0, r1
    6950:	bl	0 <coda_type_release>
    6954:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6958:	ldr	r1, [fp, #-44]	; 0xffffffd4
    695c:	bl	0 <coda_type_record_add_field>
    6960:	ldr	r1, [fp, #-16]
    6964:	ldr	r1, [r1]
    6968:	ldr	r1, [r1, #44]	; 0x2c
    696c:	str	r0, [sp, #24]
    6970:	mov	r0, r1
    6974:	movw	r1, #2
    6978:	bl	0 <coda_type_number_new>
    697c:	str	r0, [fp, #-48]	; 0xffffffd0
    6980:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6984:	movw	r1, #0
    6988:	movt	r1, #0
    698c:	bl	0 <coda_type_set_description>
    6990:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6994:	str	r0, [sp, #20]
    6998:	mov	r0, r1
    699c:	movw	r1, #3
    69a0:	bl	0 <coda_type_set_read_type>
    69a4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    69a8:	mov	r2, #16
    69ac:	mov	r3, #0
    69b0:	str	r0, [sp, #16]
    69b4:	mov	r0, r1
    69b8:	bl	0 <coda_type_set_bit_size>
    69bc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    69c0:	str	r0, [sp, #12]
    69c4:	mov	r0, r1
    69c8:	movw	r1, #0
    69cc:	movt	r1, #0
    69d0:	bl	0 <coda_type_number_set_unit>
    69d4:	movw	r1, #0
    69d8:	movt	r1, #0
    69dc:	str	r0, [sp, #8]
    69e0:	mov	r0, r1
    69e4:	bl	0 <coda_type_record_field_new>
    69e8:	str	r0, [fp, #-44]	; 0xffffffd4
    69ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
    69f0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    69f4:	bl	0 <coda_type_record_field_set_type>
    69f8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    69fc:	str	r0, [sp, #4]
    6a00:	mov	r0, r1
    6a04:	bl	0 <coda_type_release>
    6a08:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6a0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    6a10:	bl	0 <coda_type_record_add_field>
    6a14:	str	r0, [sp]
    6a18:	b	6a1c <cd_time_init+0xe04>
    6a1c:	b	6a20 <cd_time_init+0xe08>
    6a20:	b	6a24 <cd_time_init+0xe0c>
    6a24:	b	6a28 <cd_time_init+0xe10>
    6a28:	b	6a2c <cd_time_init+0xe14>
    6a2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6a30:	sub	r1, fp, #32
    6a34:	bl	0 <coda_expression_from_string>
    6a38:	cmp	r0, #0
    6a3c:	beq	6a54 <cd_time_init+0xe3c>
    6a40:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6a44:	bl	0 <coda_type_release>
    6a48:	mvn	r0, #0
    6a4c:	str	r0, [fp, #-12]
    6a50:	b	6c44 <cd_time_init+0x102c>
    6a54:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6a58:	sub	r1, fp, #28
    6a5c:	bl	0 <coda_expression_get_type>
    6a60:	cmp	r0, #0
    6a64:	beq	6a84 <cd_time_init+0xe6c>
    6a68:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6a6c:	bl	0 <coda_type_release>
    6a70:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6a74:	bl	0 <coda_expression_delete>
    6a78:	mvn	r0, #0
    6a7c:	str	r0, [fp, #-12]
    6a80:	b	6c44 <cd_time_init+0x102c>
    6a84:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6a88:	cmp	r0, #2
    6a8c:	beq	6abc <cd_time_init+0xea4>
    6a90:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6a94:	bl	0 <coda_type_release>
    6a98:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6a9c:	bl	0 <coda_expression_delete>
    6aa0:	ldr	r0, [pc, #424]	; 6c50 <cd_time_init+0x1038>
    6aa4:	movw	r1, #0
    6aa8:	movt	r1, #0
    6aac:	bl	0 <coda_set_error>
    6ab0:	mvn	r0, #0
    6ab4:	str	r0, [fp, #-12]
    6ab8:	b	6c44 <cd_time_init+0x102c>
    6abc:	movw	r0, #0
    6ac0:	movt	r0, #0
    6ac4:	ldr	r1, [fp, #-16]
    6ac8:	ldr	r1, [r1]
    6acc:	str	r0, [r1, #40]	; 0x28
    6ad0:	ldr	r0, [fp, #-16]
    6ad4:	ldr	r0, [r0]
    6ad8:	ldr	r0, [r0, #44]	; 0x2c
    6adc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    6ae0:	bl	0 <coda_type_time_new>
    6ae4:	ldr	r1, [fp, #-16]
    6ae8:	ldr	r1, [r1]
    6aec:	str	r0, [r1, #8]
    6af0:	ldr	r0, [fp, #-16]
    6af4:	ldr	r0, [r0]
    6af8:	ldr	r0, [r0, #8]
    6afc:	movw	r1, #0
    6b00:	cmp	r0, r1
    6b04:	bne	6b24 <cd_time_init+0xf0c>
    6b08:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6b0c:	bl	0 <coda_type_release>
    6b10:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6b14:	bl	0 <coda_expression_delete>
    6b18:	mvn	r0, #0
    6b1c:	str	r0, [fp, #-12]
    6b20:	b	6c44 <cd_time_init+0x102c>
    6b24:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6b28:	movw	r1, #0
    6b2c:	cmp	r0, r1
    6b30:	beq	6b6c <cd_time_init+0xf54>
    6b34:	ldr	r0, [fp, #-16]
    6b38:	ldr	r0, [r0]
    6b3c:	ldr	r0, [r0, #8]
    6b40:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6b44:	bl	0 <coda_type_time_set_base_type>
    6b48:	cmp	r0, #0
    6b4c:	beq	6b64 <cd_time_init+0xf4c>
    6b50:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6b54:	bl	0 <coda_type_release>
    6b58:	mvn	r0, #0
    6b5c:	str	r0, [fp, #-12]
    6b60:	b	6c44 <cd_time_init+0x102c>
    6b64:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6b68:	bl	0 <coda_type_release>
    6b6c:	ldr	r0, [fp, #-16]
    6b70:	ldr	r1, [fp, #-20]	; 0xffffffec
    6b74:	bl	71a0 <handle_name_attribute_for_type>
    6b78:	cmp	r0, #0
    6b7c:	beq	6b8c <cd_time_init+0xf74>
    6b80:	mvn	r0, #0
    6b84:	str	r0, [fp, #-12]
    6b88:	b	6c44 <cd_time_init+0x102c>
    6b8c:	ldr	r0, [fp, #-16]
    6b90:	ldr	r0, [r0]
    6b94:	movw	r1, #0
    6b98:	movt	r1, #0
    6b9c:	bl	1698 <register_type_elements>
    6ba0:	ldr	r0, [fp, #-16]
    6ba4:	ldr	r0, [r0]
    6ba8:	movw	r1, #11
    6bac:	movw	r2, #0
    6bb0:	movt	r2, #0
    6bb4:	movw	r3, #0
    6bb8:	movt	r3, #0
    6bbc:	bl	1358 <register_sub_element>
    6bc0:	ldr	r0, [fp, #-16]
    6bc4:	ldr	r0, [r0]
    6bc8:	movw	r1, #22
    6bcc:	movw	r2, #0
    6bd0:	movt	r2, #0
    6bd4:	movw	r3, #0
    6bd8:	movt	r3, #0
    6bdc:	bl	1358 <register_sub_element>
    6be0:	ldr	r0, [fp, #-16]
    6be4:	ldr	r0, [r0]
    6be8:	ldr	r0, [r0, #44]	; 0x2c
    6bec:	cmp	r0, #0
    6bf0:	beq	6c28 <cd_time_init+0x1010>
    6bf4:	ldr	r0, [fp, #-16]
    6bf8:	ldr	r0, [r0]
    6bfc:	ldr	r0, [r0, #44]	; 0x2c
    6c00:	cmp	r0, #1
    6c04:	beq	6c28 <cd_time_init+0x1010>
    6c08:	ldr	r0, [fp, #-16]
    6c0c:	ldr	r0, [r0]
    6c10:	movw	r1, #4
    6c14:	movw	r2, #0
    6c18:	movt	r2, #0
    6c1c:	movw	r3, #0
    6c20:	movt	r3, #0
    6c24:	bl	1358 <register_sub_element>
    6c28:	ldr	r0, [fp, #-16]
    6c2c:	ldr	r0, [r0]
    6c30:	movw	r1, #0
    6c34:	movt	r1, #0
    6c38:	str	r1, [r0, #36]	; 0x24
    6c3c:	movw	r0, #0
    6c40:	str	r0, [fp, #-12]
    6c44:	ldr	r0, [fp, #-12]
    6c48:	sub	sp, fp, #8
    6c4c:	pop	{r4, r5, fp, pc}
    6c50:	.word	0xfffffe70

00006c54 <cd_type_init>:
    6c54:	push	{fp, lr}
    6c58:	mov	fp, sp
    6c5c:	sub	sp, sp, #16
    6c60:	str	r0, [sp, #8]
    6c64:	str	r1, [sp, #4]
    6c68:	ldr	r0, [sp, #4]
    6c6c:	movw	r1, #0
    6c70:	movt	r1, #0
    6c74:	bl	250c <get_attribute_value>
    6c78:	movw	r1, #0
    6c7c:	cmp	r0, r1
    6c80:	beq	6ca0 <cd_type_init+0x4c>
    6c84:	ldr	r0, [pc, #272]	; 6d9c <cd_type_init+0x148>
    6c88:	movw	r1, #0
    6c8c:	movt	r1, #0
    6c90:	bl	0 <coda_set_error>
    6c94:	mvn	r0, #0
    6c98:	str	r0, [fp, #-4]
    6c9c:	b	6d90 <cd_type_init+0x13c>
    6ca0:	ldr	r0, [sp, #8]
    6ca4:	ldr	r1, [sp, #4]
    6ca8:	bl	7074 <handle_format_attribute_for_type>
    6cac:	cmp	r0, #0
    6cb0:	beq	6cc0 <cd_type_init+0x6c>
    6cb4:	mvn	r0, #0
    6cb8:	str	r0, [fp, #-4]
    6cbc:	b	6d90 <cd_type_init+0x13c>
    6cc0:	movw	r0, #0
    6cc4:	movt	r0, #0
    6cc8:	ldr	r1, [sp, #8]
    6ccc:	ldr	r1, [r1]
    6cd0:	str	r0, [r1, #40]	; 0x28
    6cd4:	ldr	r0, [sp, #8]
    6cd8:	ldr	r0, [r0]
    6cdc:	ldr	r0, [r0, #44]	; 0x2c
    6ce0:	bl	0 <coda_type_text_new>
    6ce4:	ldr	r1, [sp, #8]
    6ce8:	ldr	r1, [r1]
    6cec:	str	r0, [r1, #8]
    6cf0:	ldr	r0, [sp, #8]
    6cf4:	ldr	r0, [r0]
    6cf8:	ldr	r0, [r0, #8]
    6cfc:	movw	r1, #0
    6d00:	cmp	r0, r1
    6d04:	bne	6d14 <cd_type_init+0xc0>
    6d08:	mvn	r0, #0
    6d0c:	str	r0, [fp, #-4]
    6d10:	b	6d90 <cd_type_init+0x13c>
    6d14:	ldr	r0, [sp, #8]
    6d18:	ldr	r0, [r0]
    6d1c:	movw	r1, #0
    6d20:	movt	r1, #0
    6d24:	bl	1698 <register_type_elements>
    6d28:	ldr	r0, [sp, #8]
    6d2c:	ldr	r0, [r0]
    6d30:	movw	r1, #11
    6d34:	movw	r2, #0
    6d38:	movt	r2, #0
    6d3c:	movw	r3, #0
    6d40:	movt	r3, #0
    6d44:	bl	1358 <register_sub_element>
    6d48:	ldr	r0, [sp, #8]
    6d4c:	ldr	r0, [r0]
    6d50:	movw	r1, #4
    6d54:	movw	r2, #0
    6d58:	movt	r2, #0
    6d5c:	movw	r3, #0
    6d60:	movt	r3, #0
    6d64:	bl	1358 <register_sub_element>
    6d68:	ldr	r0, [sp, #8]
    6d6c:	ldr	r1, [sp, #4]
    6d70:	bl	9a54 <handle_xml_name>
    6d74:	cmp	r0, #0
    6d78:	beq	6d88 <cd_type_init+0x134>
    6d7c:	mvn	r0, #0
    6d80:	str	r0, [fp, #-4]
    6d84:	b	6d90 <cd_type_init+0x13c>
    6d88:	movw	r0, #0
    6d8c:	str	r0, [fp, #-4]
    6d90:	ldr	r0, [fp, #-4]
    6d94:	mov	sp, fp
    6d98:	pop	{fp, pc}
    6d9c:	.word	0xfffffe70

00006da0 <cd_union_init>:
    6da0:	push	{fp, lr}
    6da4:	mov	fp, sp
    6da8:	sub	sp, sp, #16
    6dac:	str	r0, [sp, #8]
    6db0:	str	r1, [sp, #4]
    6db4:	ldr	r0, [sp, #8]
    6db8:	ldr	r1, [sp, #4]
    6dbc:	bl	7074 <handle_format_attribute_for_type>
    6dc0:	cmp	r0, #0
    6dc4:	beq	6dd4 <cd_union_init+0x34>
    6dc8:	mvn	r0, #0
    6dcc:	str	r0, [fp, #-4]
    6dd0:	b	6f24 <cd_union_init+0x184>
    6dd4:	movw	r0, #0
    6dd8:	movt	r0, #0
    6ddc:	ldr	r1, [sp, #8]
    6de0:	ldr	r1, [r1]
    6de4:	str	r0, [r1, #40]	; 0x28
    6de8:	ldr	r0, [sp, #8]
    6dec:	ldr	r0, [r0]
    6df0:	ldr	r0, [r0, #44]	; 0x2c
    6df4:	bl	0 <coda_type_union_new>
    6df8:	ldr	r1, [sp, #8]
    6dfc:	ldr	r1, [r1]
    6e00:	str	r0, [r1, #8]
    6e04:	ldr	r0, [sp, #8]
    6e08:	ldr	r0, [r0]
    6e0c:	ldr	r0, [r0, #8]
    6e10:	movw	r1, #0
    6e14:	cmp	r0, r1
    6e18:	bne	6e28 <cd_union_init+0x88>
    6e1c:	mvn	r0, #0
    6e20:	str	r0, [fp, #-4]
    6e24:	b	6f24 <cd_union_init+0x184>
    6e28:	ldr	r0, [sp, #8]
    6e2c:	ldr	r1, [sp, #4]
    6e30:	bl	71a0 <handle_name_attribute_for_type>
    6e34:	cmp	r0, #0
    6e38:	beq	6e48 <cd_union_init+0xa8>
    6e3c:	mvn	r0, #0
    6e40:	str	r0, [fp, #-4]
    6e44:	b	6f24 <cd_union_init+0x184>
    6e48:	ldr	r0, [sp, #8]
    6e4c:	ldr	r0, [r0]
    6e50:	movw	r1, #11
    6e54:	movw	r2, #0
    6e58:	movt	r2, #0
    6e5c:	movw	r3, #0
    6e60:	movt	r3, #0
    6e64:	bl	1358 <register_sub_element>
    6e68:	ldr	r0, [sp, #8]
    6e6c:	ldr	r0, [r0]
    6e70:	movw	r1, #7
    6e74:	movw	r2, #0
    6e78:	movt	r2, #0
    6e7c:	movw	r3, #0
    6e80:	movt	r3, #0
    6e84:	bl	1358 <register_sub_element>
    6e88:	ldr	r0, [sp, #8]
    6e8c:	ldr	r0, [r0]
    6e90:	movw	r1, #15
    6e94:	movw	r2, #0
    6e98:	movt	r2, #0
    6e9c:	movw	r3, #0
    6ea0:	movt	r3, #0
    6ea4:	bl	1358 <register_sub_element>
    6ea8:	ldr	r0, [sp, #8]
    6eac:	ldr	r0, [r0]
    6eb0:	movw	r1, #14
    6eb4:	movw	r2, #0
    6eb8:	movt	r2, #0
    6ebc:	movw	r3, #0
    6ec0:	movt	r3, #0
    6ec4:	bl	1358 <register_sub_element>
    6ec8:	ldr	r0, [sp, #8]
    6ecc:	ldr	r0, [r0]
    6ed0:	movw	r1, #4
    6ed4:	movw	r2, #0
    6ed8:	movt	r2, #0
    6edc:	movw	r3, #0
    6ee0:	movt	r3, #0
    6ee4:	bl	1358 <register_sub_element>
    6ee8:	ldr	r0, [sp, #8]
    6eec:	ldr	r0, [r0]
    6ef0:	movw	r1, #0
    6ef4:	movt	r1, #0
    6ef8:	str	r1, [r0, #36]	; 0x24
    6efc:	ldr	r0, [sp, #8]
    6f00:	ldr	r1, [sp, #4]
    6f04:	bl	9a54 <handle_xml_name>
    6f08:	cmp	r0, #0
    6f0c:	beq	6f1c <cd_union_init+0x17c>
    6f10:	mvn	r0, #0
    6f14:	str	r0, [fp, #-4]
    6f18:	b	6f24 <cd_union_init+0x184>
    6f1c:	movw	r0, #0
    6f20:	str	r0, [fp, #-4]
    6f24:	ldr	r0, [fp, #-4]
    6f28:	mov	sp, fp
    6f2c:	pop	{fp, pc}

00006f30 <cd_vsf_integer_init>:
    6f30:	push	{fp, lr}
    6f34:	mov	fp, sp
    6f38:	sub	sp, sp, #16
    6f3c:	str	r0, [sp, #8]
    6f40:	str	r1, [sp, #4]
    6f44:	ldr	r0, [sp, #8]
    6f48:	ldr	r1, [sp, #4]
    6f4c:	bl	7074 <handle_format_attribute_for_type>
    6f50:	cmp	r0, #0
    6f54:	beq	6f64 <cd_vsf_integer_init+0x34>
    6f58:	mvn	r0, #0
    6f5c:	str	r0, [fp, #-4]
    6f60:	b	7068 <cd_vsf_integer_init+0x138>
    6f64:	movw	r0, #0
    6f68:	movt	r0, #0
    6f6c:	ldr	r1, [sp, #8]
    6f70:	ldr	r1, [r1]
    6f74:	str	r0, [r1, #40]	; 0x28
    6f78:	ldr	r0, [sp, #8]
    6f7c:	ldr	r0, [r0]
    6f80:	ldr	r0, [r0, #44]	; 0x2c
    6f84:	bl	0 <coda_type_vsf_integer_new>
    6f88:	ldr	r1, [sp, #8]
    6f8c:	ldr	r1, [r1]
    6f90:	str	r0, [r1, #8]
    6f94:	ldr	r0, [sp, #8]
    6f98:	ldr	r0, [r0]
    6f9c:	ldr	r0, [r0, #8]
    6fa0:	movw	r1, #0
    6fa4:	cmp	r0, r1
    6fa8:	bne	6fb8 <cd_vsf_integer_init+0x88>
    6fac:	mvn	r0, #0
    6fb0:	str	r0, [fp, #-4]
    6fb4:	b	7068 <cd_vsf_integer_init+0x138>
    6fb8:	ldr	r0, [sp, #8]
    6fbc:	ldr	r1, [sp, #4]
    6fc0:	bl	71a0 <handle_name_attribute_for_type>
    6fc4:	cmp	r0, #0
    6fc8:	beq	6fd8 <cd_vsf_integer_init+0xa8>
    6fcc:	mvn	r0, #0
    6fd0:	str	r0, [fp, #-4]
    6fd4:	b	7068 <cd_vsf_integer_init+0x138>
    6fd8:	ldr	r0, [sp, #8]
    6fdc:	ldr	r0, [r0]
    6fe0:	movw	r1, #11
    6fe4:	movw	r2, #0
    6fe8:	movt	r2, #0
    6fec:	movw	r3, #0
    6ff0:	movt	r3, #0
    6ff4:	bl	1358 <register_sub_element>
    6ff8:	ldr	r0, [sp, #8]
    6ffc:	ldr	r0, [r0]
    7000:	movw	r1, #0
    7004:	movt	r1, #0
    7008:	bl	1698 <register_type_elements>
    700c:	ldr	r0, [sp, #8]
    7010:	ldr	r0, [r0]
    7014:	movw	r1, #36	; 0x24
    7018:	movw	r2, #0
    701c:	movt	r2, #0
    7020:	movw	r3, #0
    7024:	movt	r3, #0
    7028:	bl	1358 <register_sub_element>
    702c:	ldr	r0, [sp, #8]
    7030:	ldr	r0, [r0]
    7034:	movw	r1, #41	; 0x29
    7038:	movw	r2, #0
    703c:	movt	r2, #0
    7040:	movw	r3, #0
    7044:	movt	r3, #0
    7048:	bl	1358 <register_sub_element>
    704c:	ldr	r0, [sp, #8]
    7050:	ldr	r0, [r0]
    7054:	movw	r1, #0
    7058:	movt	r1, #0
    705c:	str	r1, [r0, #36]	; 0x24
    7060:	movw	r0, #0
    7064:	str	r0, [fp, #-4]
    7068:	ldr	r0, [fp, #-4]
    706c:	mov	sp, fp
    7070:	pop	{fp, pc}

00007074 <handle_format_attribute_for_type>:
    7074:	push	{fp, lr}
    7078:	mov	fp, sp
    707c:	sub	sp, sp, #16
    7080:	str	r0, [sp, #8]
    7084:	str	r1, [sp, #4]
    7088:	ldr	r0, [sp, #8]
    708c:	ldr	r0, [r0]
    7090:	ldr	r0, [r0, #396]	; 0x18c
    7094:	ldr	r0, [r0, #48]	; 0x30
    7098:	cmp	r0, #0
    709c:	bne	7108 <handle_format_attribute_for_type+0x94>
    70a0:	ldr	r0, [sp, #4]
    70a4:	ldr	r1, [sp, #8]
    70a8:	ldr	r1, [r1]
    70ac:	ldr	r2, [r1]
    70b0:	movw	r1, #0
    70b4:	movt	r1, #0
    70b8:	bl	20fc <get_mandatory_attribute_value>
    70bc:	str	r0, [sp]
    70c0:	ldr	r0, [sp]
    70c4:	movw	r1, #0
    70c8:	cmp	r0, r1
    70cc:	bne	70dc <handle_format_attribute_for_type+0x68>
    70d0:	mvn	r0, #0
    70d4:	str	r0, [fp, #-4]
    70d8:	b	7194 <handle_format_attribute_for_type+0x120>
    70dc:	ldr	r0, [sp]
    70e0:	ldr	r1, [sp, #8]
    70e4:	ldr	r1, [r1]
    70e8:	add	r1, r1, #44	; 0x2c
    70ec:	bl	0 <coda_format_from_string>
    70f0:	cmp	r0, #0
    70f4:	beq	7104 <handle_format_attribute_for_type+0x90>
    70f8:	mvn	r0, #0
    70fc:	str	r0, [fp, #-4]
    7100:	b	7194 <handle_format_attribute_for_type+0x120>
    7104:	b	717c <handle_format_attribute_for_type+0x108>
    7108:	ldr	r0, [sp, #4]
    710c:	movw	r1, #0
    7110:	movt	r1, #0
    7114:	bl	250c <get_attribute_value>
    7118:	str	r0, [sp]
    711c:	ldr	r0, [sp]
    7120:	movw	r1, #0
    7124:	cmp	r0, r1
    7128:	bne	714c <handle_format_attribute_for_type+0xd8>
    712c:	ldr	r0, [sp, #8]
    7130:	ldr	r0, [r0]
    7134:	ldr	r0, [r0, #396]	; 0x18c
    7138:	ldr	r0, [r0, #44]	; 0x2c
    713c:	ldr	r1, [sp, #8]
    7140:	ldr	r1, [r1]
    7144:	str	r0, [r1, #44]	; 0x2c
    7148:	b	7178 <handle_format_attribute_for_type+0x104>
    714c:	ldr	r0, [sp]
    7150:	ldr	r1, [sp, #8]
    7154:	ldr	r1, [r1]
    7158:	add	r1, r1, #44	; 0x2c
    715c:	bl	0 <coda_format_from_string>
    7160:	cmp	r0, #0
    7164:	beq	7174 <handle_format_attribute_for_type+0x100>
    7168:	mvn	r0, #0
    716c:	str	r0, [fp, #-4]
    7170:	b	7194 <handle_format_attribute_for_type+0x120>
    7174:	b	7178 <handle_format_attribute_for_type+0x104>
    7178:	b	717c <handle_format_attribute_for_type+0x108>
    717c:	ldr	r0, [sp, #8]
    7180:	ldr	r0, [r0]
    7184:	movw	r1, #1
    7188:	str	r1, [r0, #48]	; 0x30
    718c:	movw	r0, #0
    7190:	str	r0, [fp, #-4]
    7194:	ldr	r0, [fp, #-4]
    7198:	mov	sp, fp
    719c:	pop	{fp, pc}

000071a0 <handle_name_attribute_for_type>:
    71a0:	push	{fp, lr}
    71a4:	mov	fp, sp
    71a8:	sub	sp, sp, #16
    71ac:	str	r0, [sp, #8]
    71b0:	str	r1, [sp, #4]
    71b4:	ldr	r0, [sp, #8]
    71b8:	ldr	r0, [r0]
    71bc:	ldr	r0, [r0, #396]	; 0x18c
    71c0:	ldr	r0, [r0, #396]	; 0x18c
    71c4:	movw	r1, #0
    71c8:	cmp	r0, r1
    71cc:	bne	7274 <handle_name_attribute_for_type+0xd4>
    71d0:	ldr	r0, [sp, #4]
    71d4:	ldr	r1, [sp, #8]
    71d8:	ldr	r1, [r1]
    71dc:	ldr	r2, [r1]
    71e0:	movw	r1, #0
    71e4:	movt	r1, #0
    71e8:	bl	20fc <get_mandatory_attribute_value>
    71ec:	str	r0, [sp]
    71f0:	ldr	r0, [sp]
    71f4:	movw	r1, #0
    71f8:	cmp	r0, r1
    71fc:	bne	720c <handle_name_attribute_for_type+0x6c>
    7200:	mvn	r0, #0
    7204:	str	r0, [fp, #-4]
    7208:	b	72c0 <handle_name_attribute_for_type+0x120>
    720c:	ldr	r0, [sp]
    7210:	ldr	r1, [sp, #8]
    7214:	ldr	r1, [r1, #20]
    7218:	bl	0 <strcmp>
    721c:	cmp	r0, #0
    7220:	beq	7248 <handle_name_attribute_for_type+0xa8>
    7224:	ldr	r0, [pc, #160]	; 72cc <handle_name_attribute_for_type+0x12c>
    7228:	ldr	r1, [sp, #8]
    722c:	ldr	r2, [r1, #20]
    7230:	movw	r1, #0
    7234:	movt	r1, #0
    7238:	bl	0 <coda_set_error>
    723c:	mvn	r0, #0
    7240:	str	r0, [fp, #-4]
    7244:	b	72c0 <handle_name_attribute_for_type+0x120>
    7248:	ldr	r0, [sp, #8]
    724c:	ldr	r0, [r0]
    7250:	ldr	r0, [r0, #8]
    7254:	ldr	r1, [sp]
    7258:	bl	0 <coda_type_set_name>
    725c:	cmp	r0, #0
    7260:	beq	7270 <handle_name_attribute_for_type+0xd0>
    7264:	mvn	r0, #0
    7268:	str	r0, [fp, #-4]
    726c:	b	72c0 <handle_name_attribute_for_type+0x120>
    7270:	b	72b8 <handle_name_attribute_for_type+0x118>
    7274:	ldr	r0, [sp, #4]
    7278:	movw	r1, #0
    727c:	movt	r1, #0
    7280:	bl	250c <get_attribute_value>
    7284:	str	r0, [sp]
    7288:	ldr	r0, [sp]
    728c:	movw	r1, #0
    7290:	cmp	r0, r1
    7294:	beq	72b4 <handle_name_attribute_for_type+0x114>
    7298:	ldr	r0, [pc, #44]	; 72cc <handle_name_attribute_for_type+0x12c>
    729c:	movw	r1, #0
    72a0:	movt	r1, #0
    72a4:	bl	0 <coda_set_error>
    72a8:	mvn	r0, #0
    72ac:	str	r0, [fp, #-4]
    72b0:	b	72c0 <handle_name_attribute_for_type+0x120>
    72b4:	b	72b8 <handle_name_attribute_for_type+0x118>
    72b8:	movw	r0, #0
    72bc:	str	r0, [fp, #-4]
    72c0:	ldr	r0, [fp, #-4]
    72c4:	mov	sp, fp
    72c8:	pop	{fp, pc}
    72cc:	.word	0xfffffe70

000072d0 <type_set_description>:
    72d0:	push	{fp, lr}
    72d4:	mov	fp, sp
    72d8:	sub	sp, sp, #8
    72dc:	str	r0, [sp]
    72e0:	ldr	r0, [sp]
    72e4:	ldr	r0, [r0]
    72e8:	ldr	r0, [r0, #12]
    72ec:	movw	r1, #0
    72f0:	cmp	r0, r1
    72f4:	bne	731c <type_set_description+0x4c>
    72f8:	ldr	r0, [sp]
    72fc:	ldr	r0, [r0]
    7300:	ldr	r0, [r0, #396]	; 0x18c
    7304:	ldr	r0, [r0, #8]
    7308:	movw	r1, #0
    730c:	movt	r1, #0
    7310:	bl	0 <coda_type_set_description>
    7314:	str	r0, [sp, #4]
    7318:	b	7340 <type_set_description+0x70>
    731c:	ldr	r0, [sp]
    7320:	ldr	r0, [r0]
    7324:	ldr	r0, [r0, #396]	; 0x18c
    7328:	ldr	r0, [r0, #8]
    732c:	ldr	r1, [sp]
    7330:	ldr	r1, [r1]
    7334:	ldr	r1, [r1, #12]
    7338:	bl	0 <coda_type_set_description>
    733c:	str	r0, [sp, #4]
    7340:	ldr	r0, [sp, #4]
    7344:	mov	sp, fp
    7348:	pop	{fp, pc}

0000734c <cd_array_set_type>:
    734c:	push	{fp, lr}
    7350:	mov	fp, sp
    7354:	sub	sp, sp, #8
    7358:	str	r0, [sp, #4]
    735c:	ldr	r0, [sp, #4]
    7360:	ldr	r0, [r0]
    7364:	ldr	r0, [r0, #396]	; 0x18c
    7368:	ldr	r0, [r0, #8]
    736c:	ldr	r1, [sp, #4]
    7370:	ldr	r1, [r1]
    7374:	ldr	r1, [r1, #8]
    7378:	bl	0 <coda_type_array_set_base_type>
    737c:	mov	sp, fp
    7380:	pop	{fp, pc}

00007384 <optional_integer_constant_or_expression_init>:
    7384:	sub	sp, sp, #8
    7388:	movw	r2, #0
    738c:	movt	r2, #0
    7390:	str	r0, [sp, #4]
    7394:	str	r1, [sp]
    7398:	ldr	r0, [sp, #4]
    739c:	ldr	r0, [r0]
    73a0:	movw	r1, #1
    73a4:	str	r1, [r0, #32]
    73a8:	ldr	r0, [sp, #4]
    73ac:	ldr	r0, [r0]
    73b0:	str	r2, [r0, #40]	; 0x28
    73b4:	ldr	r0, [sp, #4]
    73b8:	ldr	r0, [r0]
    73bc:	movw	r1, #0
    73c0:	movt	r1, #0
    73c4:	str	r1, [r0, #36]	; 0x24
    73c8:	movw	r0, #0
    73cc:	add	sp, sp, #8
    73d0:	bx	lr

000073d4 <cd_array_add_dimension>:
    73d4:	push	{fp, lr}
    73d8:	mov	fp, sp
    73dc:	sub	sp, sp, #8
    73e0:	str	r0, [sp]
    73e4:	ldr	r0, [sp]
    73e8:	ldr	r0, [r0]
    73ec:	ldr	r0, [r0, #8]
    73f0:	movw	r1, #0
    73f4:	cmp	r0, r1
    73f8:	bne	7410 <cd_array_add_dimension+0x3c>
    73fc:	ldr	r0, [sp]
    7400:	ldr	r0, [r0]
    7404:	ldr	r0, [r0, #4]
    7408:	cmp	r0, #0
    740c:	beq	7458 <cd_array_add_dimension+0x84>
    7410:	ldr	r0, [sp]
    7414:	ldr	r0, [r0]
    7418:	ldr	r0, [r0, #396]	; 0x18c
    741c:	ldr	r0, [r0, #8]
    7420:	ldr	r1, [sp]
    7424:	ldr	r1, [r1]
    7428:	ldr	r1, [r1, #8]
    742c:	bl	0 <coda_type_array_add_variable_dimension>
    7430:	cmp	r0, #0
    7434:	beq	7444 <cd_array_add_dimension+0x70>
    7438:	mvn	r0, #0
    743c:	str	r0, [sp, #4]
    7440:	b	7490 <cd_array_add_dimension+0xbc>
    7444:	ldr	r0, [sp]
    7448:	ldr	r0, [r0]
    744c:	movw	r1, #0
    7450:	str	r1, [r0, #8]
    7454:	b	7488 <cd_array_add_dimension+0xb4>
    7458:	ldr	r0, [sp]
    745c:	ldr	r0, [r0]
    7460:	ldr	r1, [r0, #16]
    7464:	ldr	r0, [r0, #396]	; 0x18c
    7468:	ldr	r0, [r0, #8]
    746c:	bl	0 <coda_type_array_add_fixed_dimension>
    7470:	cmp	r0, #0
    7474:	beq	7484 <cd_array_add_dimension+0xb0>
    7478:	mvn	r0, #0
    747c:	str	r0, [sp, #4]
    7480:	b	7490 <cd_array_add_dimension+0xbc>
    7484:	b	7488 <cd_array_add_dimension+0xb4>
    7488:	movw	r0, #0
    748c:	str	r0, [sp, #4]
    7490:	ldr	r0, [sp, #4]
    7494:	mov	sp, fp
    7498:	pop	{fp, pc}

0000749c <cd_attribute_init>:
    749c:	push	{fp, lr}
    74a0:	mov	fp, sp
    74a4:	sub	sp, sp, #32
    74a8:	str	r0, [fp, #-8]
    74ac:	str	r1, [fp, #-12]
    74b0:	movw	r0, #0
    74b4:	str	r0, [sp, #16]
    74b8:	str	r0, [sp, #12]
    74bc:	str	r0, [sp, #8]
    74c0:	ldr	r0, [fp, #-12]
    74c4:	movw	r1, #0
    74c8:	movt	r1, #0
    74cc:	bl	250c <get_attribute_value>
    74d0:	str	r0, [sp, #16]
    74d4:	ldr	r0, [sp, #16]
    74d8:	movw	r1, #0
    74dc:	cmp	r0, r1
    74e0:	beq	7500 <cd_attribute_init+0x64>
    74e4:	ldr	r0, [pc, #708]	; 77b0 <cd_attribute_init+0x314>
    74e8:	movw	r1, #0
    74ec:	movt	r1, #0
    74f0:	bl	0 <coda_set_error>
    74f4:	mvn	r0, #0
    74f8:	str	r0, [fp, #-4]
    74fc:	b	77a4 <cd_attribute_init+0x308>
    7500:	ldr	r0, [fp, #-8]
    7504:	ldr	r0, [r0]
    7508:	ldr	r0, [r0, #396]	; 0x18c
    750c:	ldr	r0, [r0, #48]	; 0x30
    7510:	cmp	r0, #0
    7514:	beq	751c <cd_attribute_init+0x80>
    7518:	b	753c <cd_attribute_init+0xa0>
    751c:	movw	r0, #0
    7520:	movt	r0, #0
    7524:	movw	r1, #0
    7528:	movt	r1, #0
    752c:	movw	r2, #1439	; 0x59f
    7530:	movw	r3, #0
    7534:	movt	r3, #0
    7538:	bl	0 <__assert_fail>
    753c:	ldr	r0, [fp, #-8]
    7540:	ldr	r0, [r0]
    7544:	ldr	r0, [r0, #396]	; 0x18c
    7548:	ldr	r0, [r0, #44]	; 0x2c
    754c:	ldr	r1, [fp, #-8]
    7550:	ldr	r1, [r1]
    7554:	str	r0, [r1, #44]	; 0x2c
    7558:	ldr	r0, [fp, #-8]
    755c:	ldr	r0, [r0]
    7560:	movw	r1, #1
    7564:	str	r1, [r0, #48]	; 0x30
    7568:	ldr	r0, [fp, #-12]
    756c:	movw	r1, #0
    7570:	movt	r1, #0
    7574:	bl	250c <get_attribute_value>
    7578:	movw	r1, #0
    757c:	cmp	r0, r1
    7580:	beq	75a0 <cd_attribute_init+0x104>
    7584:	ldr	r0, [pc, #548]	; 77b0 <cd_attribute_init+0x314>
    7588:	movw	r1, #0
    758c:	movt	r1, #0
    7590:	bl	0 <coda_set_error>
    7594:	mvn	r0, #0
    7598:	str	r0, [fp, #-4]
    759c:	b	77a4 <cd_attribute_init+0x308>
    75a0:	ldr	r0, [fp, #-12]
    75a4:	ldr	r1, [fp, #-8]
    75a8:	ldr	r1, [r1]
    75ac:	ldr	r2, [r1]
    75b0:	movw	r1, #0
    75b4:	movt	r1, #0
    75b8:	bl	20fc <get_mandatory_attribute_value>
    75bc:	str	r0, [sp, #12]
    75c0:	ldr	r0, [sp, #12]
    75c4:	movw	r1, #0
    75c8:	cmp	r0, r1
    75cc:	bne	75dc <cd_attribute_init+0x140>
    75d0:	mvn	r0, #0
    75d4:	str	r0, [fp, #-4]
    75d8:	b	77a4 <cd_attribute_init+0x308>
    75dc:	ldr	r0, [fp, #-12]
    75e0:	movw	r1, #0
    75e4:	movt	r1, #0
    75e8:	bl	250c <get_attribute_value>
    75ec:	movw	r1, #0
    75f0:	movt	r1, #0
    75f4:	str	r0, [sp, #8]
    75f8:	ldr	r0, [fp, #-8]
    75fc:	ldr	r0, [r0]
    7600:	str	r1, [r0, #40]	; 0x28
    7604:	ldr	r0, [fp, #-8]
    7608:	ldr	r0, [r0]
    760c:	ldr	r0, [r0, #44]	; 0x2c
    7610:	cmp	r0, #2
    7614:	bne	7680 <cd_attribute_init+0x1e4>
    7618:	ldr	r0, [sp, #8]
    761c:	movw	r1, #0
    7620:	cmp	r0, r1
    7624:	bne	7680 <cd_attribute_init+0x1e4>
    7628:	ldr	r0, [sp, #12]
    762c:	str	r0, [sp, #8]
    7630:	ldr	r0, [sp, #12]
    7634:	bl	0 <coda_element_name_from_xml_name>
    7638:	movw	r1, #0
    763c:	bl	0 <coda_identifier_from_name>
    7640:	str	r0, [sp, #4]
    7644:	ldr	r0, [sp, #4]
    7648:	movw	r1, #0
    764c:	cmp	r0, r1
    7650:	bne	7660 <cd_attribute_init+0x1c4>
    7654:	mvn	r0, #0
    7658:	str	r0, [fp, #-4]
    765c:	b	77a4 <cd_attribute_init+0x308>
    7660:	ldr	r0, [sp, #4]
    7664:	bl	0 <coda_type_record_field_new>
    7668:	ldr	lr, [fp, #-8]
    766c:	ldr	lr, [lr]
    7670:	str	r0, [lr, #8]
    7674:	ldr	r0, [sp, #4]
    7678:	bl	0 <free>
    767c:	b	7694 <cd_attribute_init+0x1f8>
    7680:	ldr	r0, [sp, #12]
    7684:	bl	0 <coda_type_record_field_new>
    7688:	ldr	lr, [fp, #-8]
    768c:	ldr	lr, [lr]
    7690:	str	r0, [lr, #8]
    7694:	ldr	r0, [fp, #-8]
    7698:	ldr	r0, [r0]
    769c:	ldr	r0, [r0, #8]
    76a0:	movw	r1, #0
    76a4:	cmp	r0, r1
    76a8:	bne	76b8 <cd_attribute_init+0x21c>
    76ac:	mvn	r0, #0
    76b0:	str	r0, [fp, #-4]
    76b4:	b	77a4 <cd_attribute_init+0x308>
    76b8:	ldr	r0, [sp, #8]
    76bc:	movw	r1, #0
    76c0:	cmp	r0, r1
    76c4:	beq	76f4 <cd_attribute_init+0x258>
    76c8:	ldr	r0, [fp, #-8]
    76cc:	ldr	r0, [r0]
    76d0:	ldr	r0, [r0, #8]
    76d4:	ldr	r1, [sp, #8]
    76d8:	bl	0 <coda_type_record_field_set_real_name>
    76dc:	cmp	r0, #0
    76e0:	beq	76f0 <cd_attribute_init+0x254>
    76e4:	mvn	r0, #0
    76e8:	str	r0, [fp, #-4]
    76ec:	b	77a4 <cd_attribute_init+0x308>
    76f0:	b	76f4 <cd_attribute_init+0x258>
    76f4:	ldr	r0, [fp, #-8]
    76f8:	ldr	r0, [r0]
    76fc:	movw	r1, #0
    7700:	movt	r1, #0
    7704:	bl	1698 <register_type_elements>
    7708:	ldr	r0, [fp, #-8]
    770c:	ldr	r0, [r0]
    7710:	movw	r1, #18
    7714:	movw	r2, #0
    7718:	movt	r2, #0
    771c:	movw	r3, #0
    7720:	movt	r3, #0
    7724:	bl	1358 <register_sub_element>
    7728:	ldr	r0, [fp, #-8]
    772c:	ldr	r0, [r0]
    7730:	movw	r1, #29
    7734:	movw	r2, #0
    7738:	movt	r2, #0
    773c:	movw	r3, #0
    7740:	movt	r3, #0
    7744:	bl	1358 <register_sub_element>
    7748:	ldr	r0, [fp, #-8]
    774c:	ldr	r0, [r0]
    7750:	movw	r1, #5
    7754:	movw	r2, #0
    7758:	movt	r2, #0
    775c:	movw	r3, #0
    7760:	movt	r3, #0
    7764:	bl	1358 <register_sub_element>
    7768:	ldr	r0, [fp, #-8]
    776c:	ldr	r0, [r0]
    7770:	movw	r1, #16
    7774:	movw	r2, #0
    7778:	movt	r2, #0
    777c:	movw	r3, #0
    7780:	movt	r3, #0
    7784:	bl	1358 <register_sub_element>
    7788:	ldr	r0, [fp, #-8]
    778c:	ldr	r0, [r0]
    7790:	movw	r1, #0
    7794:	movt	r1, #0
    7798:	str	r1, [r0, #36]	; 0x24
    779c:	movw	r0, #0
    77a0:	str	r0, [fp, #-4]
    77a4:	ldr	r0, [fp, #-4]
    77a8:	mov	sp, fp
    77ac:	pop	{fp, pc}
    77b0:	.word	0xfffffe70

000077b4 <type_add_attribute>:
    77b4:	push	{fp, lr}
    77b8:	mov	fp, sp
    77bc:	sub	sp, sp, #8
    77c0:	str	r0, [sp]
    77c4:	ldr	r0, [sp]
    77c8:	ldr	r0, [r0]
    77cc:	ldr	r0, [r0, #396]	; 0x18c
    77d0:	ldr	r0, [r0, #8]
    77d4:	ldr	r1, [sp]
    77d8:	ldr	r1, [r1]
    77dc:	ldr	r1, [r1, #8]
    77e0:	bl	0 <coda_type_add_attribute>
    77e4:	cmp	r0, #0
    77e8:	beq	77f8 <type_add_attribute+0x44>
    77ec:	mvn	r0, #0
    77f0:	str	r0, [sp, #4]
    77f4:	b	780c <type_add_attribute+0x58>
    77f8:	ldr	r0, [sp]
    77fc:	ldr	r0, [r0]
    7800:	movw	r1, #0
    7804:	str	r1, [r0, #8]
    7808:	str	r1, [sp, #4]
    780c:	ldr	r0, [sp, #4]
    7810:	mov	sp, fp
    7814:	pop	{fp, pc}

00007818 <cd_array_finalise>:
    7818:	push	{fp, lr}
    781c:	mov	fp, sp
    7820:	sub	sp, sp, #8
    7824:	str	r0, [sp, #4]
    7828:	ldr	r0, [sp, #4]
    782c:	ldr	r0, [r0]
    7830:	ldr	r0, [r0, #8]
    7834:	bl	0 <coda_type_array_validate>
    7838:	mov	sp, fp
    783c:	pop	{fp, pc}

00007840 <optional_integer_constant_or_expression_finalise>:
    7840:	push	{fp, lr}
    7844:	mov	fp, sp
    7848:	sub	sp, sp, #24
    784c:	str	r0, [fp, #-8]
    7850:	ldr	r0, [fp, #-8]
    7854:	ldr	r0, [r0]
    7858:	ldr	r0, [r0, #12]
    785c:	movw	r1, #0
    7860:	cmp	r0, r1
    7864:	beq	78cc <optional_integer_constant_or_expression_finalise+0x8c>
    7868:	ldr	r0, [fp, #-8]
    786c:	ldr	r0, [r0]
    7870:	ldr	r0, [r0, #12]
    7874:	ldr	r1, [fp, #-8]
    7878:	ldr	r1, [r1]
    787c:	ldr	r1, [r1, #12]
    7880:	str	r0, [sp, #4]
    7884:	mov	r0, r1
    7888:	bl	0 <strlen>
    788c:	ldr	r1, [sp, #4]
    7890:	str	r0, [sp]
    7894:	mov	r0, r1
    7898:	ldr	r1, [sp]
    789c:	bl	2008 <is_whitespace>
    78a0:	cmp	r0, #0
    78a4:	beq	78c8 <optional_integer_constant_or_expression_finalise+0x88>
    78a8:	ldr	r0, [fp, #-8]
    78ac:	ldr	r0, [r0]
    78b0:	ldr	r0, [r0, #12]
    78b4:	bl	0 <free>
    78b8:	ldr	r0, [fp, #-8]
    78bc:	ldr	r0, [r0]
    78c0:	movw	lr, #0
    78c4:	str	lr, [r0, #12]
    78c8:	b	78cc <optional_integer_constant_or_expression_finalise+0x8c>
    78cc:	ldr	r0, [fp, #-8]
    78d0:	ldr	r0, [r0]
    78d4:	ldr	r0, [r0, #12]
    78d8:	movw	r1, #0
    78dc:	cmp	r0, r1
    78e0:	bne	7900 <optional_integer_constant_or_expression_finalise+0xc0>
    78e4:	ldr	r0, [fp, #-8]
    78e8:	ldr	r0, [r0]
    78ec:	movw	r1, #1
    78f0:	str	r1, [r0, #4]
    78f4:	movw	r0, #0
    78f8:	str	r0, [fp, #-4]
    78fc:	b	7a04 <optional_integer_constant_or_expression_finalise+0x1c4>
    7900:	ldr	r0, [fp, #-8]
    7904:	ldr	r0, [r0]
    7908:	ldr	r0, [r0, #12]
    790c:	add	r1, sp, #8
    7910:	bl	0 <coda_expression_from_string>
    7914:	cmp	r0, #0
    7918:	beq	7928 <optional_integer_constant_or_expression_finalise+0xe8>
    791c:	mvn	r0, #0
    7920:	str	r0, [fp, #-4]
    7924:	b	7a04 <optional_integer_constant_or_expression_finalise+0x1c4>
    7928:	ldr	r0, [fp, #-8]
    792c:	ldr	r0, [r0]
    7930:	ldr	r0, [r0, #12]
    7934:	bl	0 <free>
    7938:	ldr	r0, [fp, #-8]
    793c:	ldr	r0, [r0]
    7940:	movw	lr, #0
    7944:	str	lr, [r0, #12]
    7948:	ldr	r0, [sp, #8]
    794c:	ldr	lr, [fp, #-8]
    7950:	ldr	lr, [lr]
    7954:	str	r0, [lr, #8]
    7958:	ldr	r0, [sp, #8]
    795c:	add	r1, sp, #12
    7960:	bl	0 <coda_expression_get_type>
    7964:	cmp	r0, #0
    7968:	beq	7980 <optional_integer_constant_or_expression_finalise+0x140>
    796c:	ldr	r0, [sp, #8]
    7970:	bl	0 <coda_expression_delete>
    7974:	mvn	r0, #0
    7978:	str	r0, [fp, #-4]
    797c:	b	7a04 <optional_integer_constant_or_expression_finalise+0x1c4>
    7980:	ldr	r0, [sp, #12]
    7984:	cmp	r0, #1
    7988:	beq	79a8 <optional_integer_constant_or_expression_finalise+0x168>
    798c:	ldr	r0, [pc, #124]	; 7a10 <optional_integer_constant_or_expression_finalise+0x1d0>
    7990:	movw	r1, #0
    7994:	movt	r1, #0
    7998:	bl	0 <coda_set_error>
    799c:	mvn	r0, #0
    79a0:	str	r0, [fp, #-4]
    79a4:	b	7a04 <optional_integer_constant_or_expression_finalise+0x1c4>
    79a8:	ldr	r0, [sp, #8]
    79ac:	bl	0 <coda_expression_is_constant>
    79b0:	cmp	r0, #0
    79b4:	beq	79fc <optional_integer_constant_or_expression_finalise+0x1bc>
    79b8:	ldr	r0, [sp, #8]
    79bc:	ldr	r1, [fp, #-8]
    79c0:	ldr	r1, [r1]
    79c4:	add	r2, r1, #16
    79c8:	movw	r1, #0
    79cc:	bl	0 <coda_expression_eval_integer>
    79d0:	cmp	r0, #0
    79d4:	beq	79e4 <optional_integer_constant_or_expression_finalise+0x1a4>
    79d8:	mvn	r0, #0
    79dc:	str	r0, [fp, #-4]
    79e0:	b	7a04 <optional_integer_constant_or_expression_finalise+0x1c4>
    79e4:	ldr	r0, [fp, #-8]
    79e8:	ldr	r0, [r0]
    79ec:	movw	r1, #0
    79f0:	str	r1, [r0, #8]
    79f4:	ldr	r0, [sp, #8]
    79f8:	bl	0 <coda_expression_delete>
    79fc:	movw	r0, #0
    7a00:	str	r0, [fp, #-4]
    7a04:	ldr	r0, [fp, #-4]
    7a08:	mov	sp, fp
    7a0c:	pop	{fp, pc}
    7a10:	.word	0xfffffe70

00007a14 <cd_field_set_type>:
    7a14:	push	{fp, lr}
    7a18:	mov	fp, sp
    7a1c:	sub	sp, sp, #8
    7a20:	str	r0, [sp, #4]
    7a24:	ldr	r0, [sp, #4]
    7a28:	ldr	r0, [r0]
    7a2c:	ldr	r0, [r0, #396]	; 0x18c
    7a30:	ldr	r0, [r0, #8]
    7a34:	ldr	r1, [sp, #4]
    7a38:	ldr	r1, [r1]
    7a3c:	ldr	r1, [r1, #8]
    7a40:	bl	0 <coda_type_record_field_set_type>
    7a44:	mov	sp, fp
    7a48:	pop	{fp, pc}

00007a4c <dummy_init>:
    7a4c:	sub	sp, sp, #8
    7a50:	str	r0, [sp, #4]
    7a54:	str	r1, [sp]
    7a58:	movw	r0, #0
    7a5c:	add	sp, sp, #8
    7a60:	bx	lr

00007a64 <cd_field_set_hidden>:
    7a64:	push	{fp, lr}
    7a68:	mov	fp, sp
    7a6c:	sub	sp, sp, #8
    7a70:	str	r0, [sp, #4]
    7a74:	ldr	r0, [sp, #4]
    7a78:	ldr	r0, [r0]
    7a7c:	ldr	r0, [r0, #396]	; 0x18c
    7a80:	ldr	r0, [r0, #8]
    7a84:	bl	0 <coda_type_record_field_set_hidden>
    7a88:	mov	sp, fp
    7a8c:	pop	{fp, pc}

00007a90 <cd_field_set_optional>:
    7a90:	push	{fp, lr}
    7a94:	mov	fp, sp
    7a98:	sub	sp, sp, #8
    7a9c:	str	r0, [sp, #4]
    7aa0:	ldr	r0, [sp, #4]
    7aa4:	ldr	r0, [r0]
    7aa8:	ldr	r0, [r0, #396]	; 0x18c
    7aac:	ldr	r0, [r0, #8]
    7ab0:	bl	0 <coda_type_record_field_set_optional>
    7ab4:	mov	sp, fp
    7ab8:	pop	{fp, pc}

00007abc <bool_expression_init>:
    7abc:	sub	sp, sp, #8
    7ac0:	movw	r2, #0
    7ac4:	movt	r2, #0
    7ac8:	str	r0, [sp, #4]
    7acc:	str	r1, [sp]
    7ad0:	ldr	r0, [sp, #4]
    7ad4:	ldr	r0, [r0]
    7ad8:	movw	r1, #1
    7adc:	str	r1, [r0, #32]
    7ae0:	ldr	r0, [sp, #4]
    7ae4:	ldr	r0, [r0]
    7ae8:	str	r2, [r0, #40]	; 0x28
    7aec:	ldr	r0, [sp, #4]
    7af0:	ldr	r0, [r0]
    7af4:	movw	r1, #0
    7af8:	movt	r1, #0
    7afc:	str	r1, [r0, #36]	; 0x24
    7b00:	movw	r0, #0
    7b04:	add	sp, sp, #8
    7b08:	bx	lr

00007b0c <cd_field_set_available>:
    7b0c:	push	{fp, lr}
    7b10:	mov	fp, sp
    7b14:	sub	sp, sp, #8
    7b18:	str	r0, [sp]
    7b1c:	ldr	r0, [sp]
    7b20:	ldr	r0, [r0]
    7b24:	ldr	r0, [r0, #396]	; 0x18c
    7b28:	ldr	r0, [r0, #8]
    7b2c:	ldr	r1, [sp]
    7b30:	ldr	r1, [r1]
    7b34:	ldr	r1, [r1, #8]
    7b38:	bl	0 <coda_type_record_field_set_available_expression>
    7b3c:	cmp	r0, #0
    7b40:	beq	7b50 <cd_field_set_available+0x44>
    7b44:	mvn	r0, #0
    7b48:	str	r0, [sp, #4]
    7b4c:	b	7b64 <cd_field_set_available+0x58>
    7b50:	ldr	r0, [sp]
    7b54:	ldr	r0, [r0]
    7b58:	movw	r1, #0
    7b5c:	str	r1, [r0, #8]
    7b60:	str	r1, [sp, #4]
    7b64:	ldr	r0, [sp, #4]
    7b68:	mov	sp, fp
    7b6c:	pop	{fp, pc}

00007b70 <cd_attribute_set_fixed_value>:
    7b70:	push	{fp, lr}
    7b74:	mov	fp, sp
    7b78:	sub	sp, sp, #24
    7b7c:	str	r0, [fp, #-8]
    7b80:	movw	r0, #0
    7b84:	str	r0, [sp, #12]
    7b88:	ldr	r0, [fp, #-8]
    7b8c:	ldr	r0, [r0]
    7b90:	ldr	r0, [r0, #12]
    7b94:	bl	7f64 <decode_escaped_string>
    7b98:	cmp	r0, #0
    7b9c:	bge	7bbc <cd_attribute_set_fixed_value+0x4c>
    7ba0:	ldr	r0, [pc, #360]	; 7d10 <cd_attribute_set_fixed_value+0x1a0>
    7ba4:	movw	r1, #0
    7ba8:	movt	r1, #0
    7bac:	bl	0 <coda_set_error>
    7bb0:	mvn	r0, #0
    7bb4:	str	r0, [fp, #-4]
    7bb8:	b	7d04 <cd_attribute_set_fixed_value+0x194>
    7bbc:	ldr	r0, [fp, #-8]
    7bc0:	ldr	r0, [r0]
    7bc4:	ldr	r0, [r0, #396]	; 0x18c
    7bc8:	ldr	r0, [r0, #8]
    7bcc:	add	r1, sp, #12
    7bd0:	bl	0 <coda_type_record_field_get_type>
    7bd4:	cmp	r0, #0
    7bd8:	beq	7be8 <cd_attribute_set_fixed_value+0x78>
    7bdc:	mvn	r0, #0
    7be0:	str	r0, [fp, #-4]
    7be4:	b	7d04 <cd_attribute_set_fixed_value+0x194>
    7be8:	ldr	r0, [sp, #12]
    7bec:	movw	r1, #0
    7bf0:	cmp	r0, r1
    7bf4:	beq	7c14 <cd_attribute_set_fixed_value+0xa4>
    7bf8:	ldr	r0, [pc, #272]	; 7d10 <cd_attribute_set_fixed_value+0x1a0>
    7bfc:	movw	r1, #0
    7c00:	movt	r1, #0
    7c04:	bl	0 <coda_set_error>
    7c08:	mvn	r0, #0
    7c0c:	str	r0, [fp, #-4]
    7c10:	b	7d04 <cd_attribute_set_fixed_value+0x194>
    7c14:	ldr	r0, [fp, #-8]
    7c18:	ldr	r0, [r0]
    7c1c:	ldr	r0, [r0, #396]	; 0x18c
    7c20:	ldr	r0, [r0, #44]	; 0x2c
    7c24:	bl	0 <coda_type_text_new>
    7c28:	str	r0, [sp, #12]
    7c2c:	ldr	r0, [sp, #12]
    7c30:	movw	lr, #0
    7c34:	cmp	r0, lr
    7c38:	bne	7c48 <cd_attribute_set_fixed_value+0xd8>
    7c3c:	mvn	r0, #0
    7c40:	str	r0, [fp, #-4]
    7c44:	b	7d04 <cd_attribute_set_fixed_value+0x194>
    7c48:	ldr	r0, [fp, #-8]
    7c4c:	ldr	r0, [r0]
    7c50:	ldr	r0, [r0, #396]	; 0x18c
    7c54:	ldr	r0, [r0, #8]
    7c58:	ldr	r1, [sp, #12]
    7c5c:	bl	0 <coda_type_record_field_set_type>
    7c60:	cmp	r0, #0
    7c64:	beq	7c7c <cd_attribute_set_fixed_value+0x10c>
    7c68:	ldr	r0, [sp, #12]
    7c6c:	bl	0 <coda_type_release>
    7c70:	mvn	r0, #0
    7c74:	str	r0, [fp, #-4]
    7c78:	b	7d04 <cd_attribute_set_fixed_value+0x194>
    7c7c:	ldr	r0, [sp, #12]
    7c80:	bl	0 <coda_type_release>
    7c84:	ldr	r0, [sp, #12]
    7c88:	ldr	lr, [fp, #-8]
    7c8c:	ldr	lr, [lr]
    7c90:	ldr	r1, [lr, #12]
    7c94:	bl	0 <coda_type_text_set_fixed_value>
    7c98:	cmp	r0, #0
    7c9c:	beq	7cac <cd_attribute_set_fixed_value+0x13c>
    7ca0:	mvn	r0, #0
    7ca4:	str	r0, [fp, #-4]
    7ca8:	b	7d04 <cd_attribute_set_fixed_value+0x194>
    7cac:	ldr	r0, [sp, #12]
    7cb0:	ldr	r1, [fp, #-8]
    7cb4:	ldr	r1, [r1]
    7cb8:	ldr	r1, [r1, #12]
    7cbc:	str	r0, [sp, #8]
    7cc0:	mov	r0, r1
    7cc4:	bl	0 <strlen>
    7cc8:	mov	r1, r0
    7ccc:	mov	r3, #0
    7cd0:	ldr	lr, [sp, #8]
    7cd4:	str	r0, [sp, #4]
    7cd8:	mov	r0, lr
    7cdc:	ldr	r2, [sp, #4]
    7ce0:	str	r1, [sp]
    7ce4:	bl	0 <coda_type_set_byte_size>
    7ce8:	cmp	r0, #0
    7cec:	beq	7cfc <cd_attribute_set_fixed_value+0x18c>
    7cf0:	mvn	r0, #0
    7cf4:	str	r0, [fp, #-4]
    7cf8:	b	7d04 <cd_attribute_set_fixed_value+0x194>
    7cfc:	movw	r0, #0
    7d00:	str	r0, [fp, #-4]
    7d04:	ldr	r0, [fp, #-4]
    7d08:	mov	sp, fp
    7d0c:	pop	{fp, pc}
    7d10:	.word	0xfffffe70

00007d14 <cd_attribute_finalise>:
    7d14:	push	{fp, lr}
    7d18:	mov	fp, sp
    7d1c:	sub	sp, sp, #16
    7d20:	str	r0, [sp, #8]
    7d24:	movw	r0, #0
    7d28:	str	r0, [sp, #4]
    7d2c:	ldr	r0, [sp, #8]
    7d30:	ldr	r0, [r0]
    7d34:	ldr	r0, [r0, #8]
    7d38:	add	r1, sp, #4
    7d3c:	bl	0 <coda_type_record_field_get_type>
    7d40:	cmp	r0, #0
    7d44:	beq	7d54 <cd_attribute_finalise+0x40>
    7d48:	mvn	r0, #0
    7d4c:	str	r0, [fp, #-4]
    7d50:	b	7de0 <cd_attribute_finalise+0xcc>
    7d54:	ldr	r0, [sp, #4]
    7d58:	movw	r1, #0
    7d5c:	cmp	r0, r1
    7d60:	bne	7dcc <cd_attribute_finalise+0xb8>
    7d64:	ldr	r0, [sp, #8]
    7d68:	ldr	r0, [r0]
    7d6c:	ldr	r0, [r0, #44]	; 0x2c
    7d70:	bl	0 <coda_type_text_new>
    7d74:	str	r0, [sp, #4]
    7d78:	ldr	r0, [sp, #4]
    7d7c:	movw	lr, #0
    7d80:	cmp	r0, lr
    7d84:	bne	7d94 <cd_attribute_finalise+0x80>
    7d88:	mvn	r0, #0
    7d8c:	str	r0, [fp, #-4]
    7d90:	b	7de0 <cd_attribute_finalise+0xcc>
    7d94:	ldr	r0, [sp, #8]
    7d98:	ldr	r0, [r0]
    7d9c:	ldr	r0, [r0, #8]
    7da0:	ldr	r1, [sp, #4]
    7da4:	bl	0 <coda_type_record_field_set_type>
    7da8:	cmp	r0, #0
    7dac:	beq	7dc4 <cd_attribute_finalise+0xb0>
    7db0:	ldr	r0, [sp, #4]
    7db4:	bl	0 <coda_type_release>
    7db8:	mvn	r0, #0
    7dbc:	str	r0, [fp, #-4]
    7dc0:	b	7de0 <cd_attribute_finalise+0xcc>
    7dc4:	ldr	r0, [sp, #4]
    7dc8:	bl	0 <coda_type_release>
    7dcc:	ldr	r0, [sp, #8]
    7dd0:	ldr	r0, [r0]
    7dd4:	ldr	r0, [r0, #8]
    7dd8:	bl	0 <coda_type_record_field_validate>
    7ddc:	str	r0, [fp, #-4]
    7de0:	ldr	r0, [fp, #-4]
    7de4:	mov	sp, fp
    7de8:	pop	{fp, pc}

00007dec <bool_expression_finalise>:
    7dec:	push	{fp, lr}
    7df0:	mov	fp, sp
    7df4:	sub	sp, sp, #24
    7df8:	str	r0, [fp, #-8]
    7dfc:	ldr	r0, [fp, #-8]
    7e00:	ldr	r0, [r0]
    7e04:	ldr	r0, [r0, #12]
    7e08:	movw	r1, #0
    7e0c:	cmp	r0, r1
    7e10:	beq	7e78 <bool_expression_finalise+0x8c>
    7e14:	ldr	r0, [fp, #-8]
    7e18:	ldr	r0, [r0]
    7e1c:	ldr	r0, [r0, #12]
    7e20:	ldr	r1, [fp, #-8]
    7e24:	ldr	r1, [r1]
    7e28:	ldr	r1, [r1, #12]
    7e2c:	str	r0, [sp, #4]
    7e30:	mov	r0, r1
    7e34:	bl	0 <strlen>
    7e38:	ldr	r1, [sp, #4]
    7e3c:	str	r0, [sp]
    7e40:	mov	r0, r1
    7e44:	ldr	r1, [sp]
    7e48:	bl	2008 <is_whitespace>
    7e4c:	cmp	r0, #0
    7e50:	beq	7e74 <bool_expression_finalise+0x88>
    7e54:	ldr	r0, [fp, #-8]
    7e58:	ldr	r0, [r0]
    7e5c:	ldr	r0, [r0, #12]
    7e60:	bl	0 <free>
    7e64:	ldr	r0, [fp, #-8]
    7e68:	ldr	r0, [r0]
    7e6c:	movw	lr, #0
    7e70:	str	lr, [r0, #12]
    7e74:	b	7e78 <bool_expression_finalise+0x8c>
    7e78:	ldr	r0, [fp, #-8]
    7e7c:	ldr	r0, [r0]
    7e80:	ldr	r0, [r0, #12]
    7e84:	movw	r1, #0
    7e88:	cmp	r0, r1
    7e8c:	bne	7eac <bool_expression_finalise+0xc0>
    7e90:	ldr	r0, [pc, #200]	; 7f60 <bool_expression_finalise+0x174>
    7e94:	movw	r1, #0
    7e98:	movt	r1, #0
    7e9c:	bl	0 <coda_set_error>
    7ea0:	mvn	r0, #0
    7ea4:	str	r0, [fp, #-4]
    7ea8:	b	7f54 <bool_expression_finalise+0x168>
    7eac:	ldr	r0, [fp, #-8]
    7eb0:	ldr	r0, [r0]
    7eb4:	ldr	r0, [r0, #12]
    7eb8:	add	r1, sp, #8
    7ebc:	bl	0 <coda_expression_from_string>
    7ec0:	cmp	r0, #0
    7ec4:	beq	7ed4 <bool_expression_finalise+0xe8>
    7ec8:	mvn	r0, #0
    7ecc:	str	r0, [fp, #-4]
    7ed0:	b	7f54 <bool_expression_finalise+0x168>
    7ed4:	ldr	r0, [fp, #-8]
    7ed8:	ldr	r0, [r0]
    7edc:	ldr	r0, [r0, #12]
    7ee0:	bl	0 <free>
    7ee4:	ldr	r0, [fp, #-8]
    7ee8:	ldr	r0, [r0]
    7eec:	movw	lr, #0
    7ef0:	str	lr, [r0, #12]
    7ef4:	ldr	r0, [sp, #8]
    7ef8:	ldr	lr, [fp, #-8]
    7efc:	ldr	lr, [lr]
    7f00:	str	r0, [lr, #8]
    7f04:	ldr	r0, [sp, #8]
    7f08:	add	r1, sp, #12
    7f0c:	bl	0 <coda_expression_get_type>
    7f10:	cmp	r0, #0
    7f14:	beq	7f24 <bool_expression_finalise+0x138>
    7f18:	mvn	r0, #0
    7f1c:	str	r0, [fp, #-4]
    7f20:	b	7f54 <bool_expression_finalise+0x168>
    7f24:	ldr	r0, [sp, #12]
    7f28:	cmp	r0, #0
    7f2c:	beq	7f4c <bool_expression_finalise+0x160>
    7f30:	ldr	r0, [pc, #40]	; 7f60 <bool_expression_finalise+0x174>
    7f34:	movw	r1, #0
    7f38:	movt	r1, #0
    7f3c:	bl	0 <coda_set_error>
    7f40:	mvn	r0, #0
    7f44:	str	r0, [fp, #-4]
    7f48:	b	7f54 <bool_expression_finalise+0x168>
    7f4c:	movw	r0, #0
    7f50:	str	r0, [fp, #-4]
    7f54:	ldr	r0, [fp, #-4]
    7f58:	mov	sp, fp
    7f5c:	pop	{fp, pc}
    7f60:	.word	0xfffffe70

00007f64 <decode_escaped_string>:
    7f64:	sub	sp, sp, #28
    7f68:	str	r0, [sp, #20]
    7f6c:	ldr	r0, [sp, #20]
    7f70:	movw	r1, #0
    7f74:	cmp	r0, r1
    7f78:	bne	7f88 <decode_escaped_string+0x24>
    7f7c:	movw	r0, #0
    7f80:	str	r0, [sp, #24]
    7f84:	b	8358 <decode_escaped_string+0x3f4>
    7f88:	movw	r0, #0
    7f8c:	str	r0, [sp, #16]
    7f90:	str	r0, [sp, #12]
    7f94:	ldr	r0, [sp, #20]
    7f98:	ldr	r1, [sp, #16]
    7f9c:	add	r0, r0, r1
    7fa0:	ldrb	r0, [r0]
    7fa4:	cmp	r0, #0
    7fa8:	beq	833c <decode_escaped_string+0x3d8>
    7fac:	ldr	r0, [sp, #20]
    7fb0:	ldr	r1, [sp, #16]
    7fb4:	add	r0, r0, r1
    7fb8:	ldrb	r0, [r0]
    7fbc:	cmp	r0, #92	; 0x5c
    7fc0:	bne	8304 <decode_escaped_string+0x3a0>
    7fc4:	ldr	r0, [sp, #16]
    7fc8:	add	r0, r0, #1
    7fcc:	str	r0, [sp, #16]
    7fd0:	ldr	r0, [sp, #20]
    7fd4:	ldr	r1, [sp, #16]
    7fd8:	ldrb	r0, [r0, r1]
    7fdc:	sub	r0, r0, #92	; 0x5c
    7fe0:	cmp	r0, #26
    7fe4:	str	r0, [sp, #8]
    7fe8:	bhi	8188 <decode_escaped_string+0x224>
    7fec:	add	r0, pc, #8
    7ff0:	ldr	r1, [sp, #8]
    7ff4:	ldr	r0, [r0, r1, lsl #2]
    7ff8:	mov	pc, r0
    7ffc:	.word	0x00008168
    8000:	.word	0x00008188
    8004:	.word	0x00008188
    8008:	.word	0x00008188
    800c:	.word	0x00008188
    8010:	.word	0x00008088
    8014:	.word	0x000080a8
    8018:	.word	0x00008188
    801c:	.word	0x00008188
    8020:	.word	0x00008068
    8024:	.word	0x000080c8
    8028:	.word	0x00008188
    802c:	.word	0x00008188
    8030:	.word	0x00008188
    8034:	.word	0x00008188
    8038:	.word	0x00008188
    803c:	.word	0x00008188
    8040:	.word	0x00008188
    8044:	.word	0x000080e8
    8048:	.word	0x00008188
    804c:	.word	0x00008188
    8050:	.word	0x00008188
    8054:	.word	0x00008108
    8058:	.word	0x00008188
    805c:	.word	0x00008128
    8060:	.word	0x00008188
    8064:	.word	0x00008148
    8068:	ldr	r0, [sp, #20]
    806c:	ldr	r1, [sp, #12]
    8070:	add	r2, r1, #1
    8074:	str	r2, [sp, #12]
    8078:	add	r0, r0, r1
    807c:	movw	r1, #27
    8080:	strb	r1, [r0]
    8084:	b	8300 <decode_escaped_string+0x39c>
    8088:	ldr	r0, [sp, #20]
    808c:	ldr	r1, [sp, #12]
    8090:	add	r2, r1, #1
    8094:	str	r2, [sp, #12]
    8098:	add	r0, r0, r1
    809c:	movw	r1, #7
    80a0:	strb	r1, [r0]
    80a4:	b	8300 <decode_escaped_string+0x39c>
    80a8:	ldr	r0, [sp, #20]
    80ac:	ldr	r1, [sp, #12]
    80b0:	add	r2, r1, #1
    80b4:	str	r2, [sp, #12]
    80b8:	add	r0, r0, r1
    80bc:	movw	r1, #8
    80c0:	strb	r1, [r0]
    80c4:	b	8300 <decode_escaped_string+0x39c>
    80c8:	ldr	r0, [sp, #20]
    80cc:	ldr	r1, [sp, #12]
    80d0:	add	r2, r1, #1
    80d4:	str	r2, [sp, #12]
    80d8:	add	r0, r0, r1
    80dc:	movw	r1, #12
    80e0:	strb	r1, [r0]
    80e4:	b	8300 <decode_escaped_string+0x39c>
    80e8:	ldr	r0, [sp, #20]
    80ec:	ldr	r1, [sp, #12]
    80f0:	add	r2, r1, #1
    80f4:	str	r2, [sp, #12]
    80f8:	add	r0, r0, r1
    80fc:	movw	r1, #10
    8100:	strb	r1, [r0]
    8104:	b	8300 <decode_escaped_string+0x39c>
    8108:	ldr	r0, [sp, #20]
    810c:	ldr	r1, [sp, #12]
    8110:	add	r2, r1, #1
    8114:	str	r2, [sp, #12]
    8118:	add	r0, r0, r1
    811c:	movw	r1, #13
    8120:	strb	r1, [r0]
    8124:	b	8300 <decode_escaped_string+0x39c>
    8128:	ldr	r0, [sp, #20]
    812c:	ldr	r1, [sp, #12]
    8130:	add	r2, r1, #1
    8134:	str	r2, [sp, #12]
    8138:	add	r0, r0, r1
    813c:	movw	r1, #9
    8140:	strb	r1, [r0]
    8144:	b	8300 <decode_escaped_string+0x39c>
    8148:	ldr	r0, [sp, #20]
    814c:	ldr	r1, [sp, #12]
    8150:	add	r2, r1, #1
    8154:	str	r2, [sp, #12]
    8158:	add	r0, r0, r1
    815c:	movw	r1, #11
    8160:	strb	r1, [r0]
    8164:	b	8300 <decode_escaped_string+0x39c>
    8168:	ldr	r0, [sp, #20]
    816c:	ldr	r1, [sp, #12]
    8170:	add	r2, r1, #1
    8174:	str	r2, [sp, #12]
    8178:	add	r0, r0, r1
    817c:	movw	r1, #92	; 0x5c
    8180:	strb	r1, [r0]
    8184:	b	8300 <decode_escaped_string+0x39c>
    8188:	ldr	r0, [sp, #20]
    818c:	ldr	r1, [sp, #16]
    8190:	add	r0, r0, r1
    8194:	ldrb	r0, [r0]
    8198:	cmp	r0, #48	; 0x30
    819c:	blt	81b8 <decode_escaped_string+0x254>
    81a0:	ldr	r0, [sp, #20]
    81a4:	ldr	r1, [sp, #16]
    81a8:	add	r0, r0, r1
    81ac:	ldrb	r0, [r0]
    81b0:	cmp	r0, #57	; 0x39
    81b4:	ble	81c4 <decode_escaped_string+0x260>
    81b8:	mvn	r0, #0
    81bc:	str	r0, [sp, #24]
    81c0:	b	8358 <decode_escaped_string+0x3f4>
    81c4:	ldr	r0, [sp, #20]
    81c8:	ldr	r1, [sp, #16]
    81cc:	add	r0, r0, r1
    81d0:	ldrb	r0, [r0]
    81d4:	sub	r0, r0, #48	; 0x30
    81d8:	ldr	r1, [sp, #20]
    81dc:	ldr	r2, [sp, #12]
    81e0:	add	r1, r1, r2
    81e4:	strb	r0, [r1]
    81e8:	ldr	r0, [sp, #20]
    81ec:	ldr	r1, [sp, #16]
    81f0:	add	r1, r1, #1
    81f4:	add	r0, r0, r1
    81f8:	ldrb	r0, [r0]
    81fc:	cmp	r0, #48	; 0x30
    8200:	blt	82f4 <decode_escaped_string+0x390>
    8204:	ldr	r0, [sp, #20]
    8208:	ldr	r1, [sp, #16]
    820c:	add	r1, r1, #1
    8210:	add	r0, r0, r1
    8214:	ldrb	r0, [r0]
    8218:	cmp	r0, #57	; 0x39
    821c:	bgt	82f4 <decode_escaped_string+0x390>
    8220:	ldr	r0, [sp, #16]
    8224:	add	r0, r0, #1
    8228:	str	r0, [sp, #16]
    822c:	ldr	r0, [sp, #20]
    8230:	ldr	r1, [sp, #12]
    8234:	ldrb	r0, [r0, r1]
    8238:	mov	r1, r0
    823c:	lsl	r0, r0, #3
    8240:	ldr	r2, [sp, #20]
    8244:	ldr	r3, [sp, #16]
    8248:	add	r2, r2, r3
    824c:	ldrb	r2, [r2]
    8250:	sub	r2, r2, #48	; 0x30
    8254:	add	r0, r0, r2
    8258:	ldr	r2, [sp, #20]
    825c:	ldr	r3, [sp, #12]
    8260:	add	r2, r2, r3
    8264:	strb	r0, [r2]
    8268:	ldr	r0, [sp, #20]
    826c:	ldr	r2, [sp, #16]
    8270:	add	r2, r2, #1
    8274:	add	r0, r0, r2
    8278:	ldrb	r0, [r0]
    827c:	cmp	r0, #48	; 0x30
    8280:	str	r1, [sp, #4]
    8284:	blt	82f0 <decode_escaped_string+0x38c>
    8288:	ldr	r0, [sp, #20]
    828c:	ldr	r1, [sp, #16]
    8290:	add	r1, r1, #1
    8294:	add	r0, r0, r1
    8298:	ldrb	r0, [r0]
    829c:	cmp	r0, #57	; 0x39
    82a0:	bgt	82f0 <decode_escaped_string+0x38c>
    82a4:	ldr	r0, [sp, #16]
    82a8:	add	r0, r0, #1
    82ac:	str	r0, [sp, #16]
    82b0:	ldr	r0, [sp, #20]
    82b4:	ldr	r1, [sp, #12]
    82b8:	ldrb	r0, [r0, r1]
    82bc:	mov	r1, r0
    82c0:	lsl	r0, r0, #3
    82c4:	ldr	r2, [sp, #20]
    82c8:	ldr	r3, [sp, #16]
    82cc:	add	r2, r2, r3
    82d0:	ldrb	r2, [r2]
    82d4:	sub	r2, r2, #48	; 0x30
    82d8:	add	r0, r0, r2
    82dc:	ldr	r2, [sp, #20]
    82e0:	ldr	r3, [sp, #12]
    82e4:	add	r2, r2, r3
    82e8:	strb	r0, [r2]
    82ec:	str	r1, [sp]
    82f0:	b	82f4 <decode_escaped_string+0x390>
    82f4:	ldr	r0, [sp, #12]
    82f8:	add	r0, r0, #1
    82fc:	str	r0, [sp, #12]
    8300:	b	832c <decode_escaped_string+0x3c8>
    8304:	ldr	r0, [sp, #20]
    8308:	ldr	r1, [sp, #16]
    830c:	add	r0, r0, r1
    8310:	ldrb	r0, [r0]
    8314:	ldr	r1, [sp, #20]
    8318:	ldr	r2, [sp, #12]
    831c:	add	r3, r2, #1
    8320:	str	r3, [sp, #12]
    8324:	add	r1, r1, r2
    8328:	strb	r0, [r1]
    832c:	ldr	r0, [sp, #16]
    8330:	add	r0, r0, #1
    8334:	str	r0, [sp, #16]
    8338:	b	7f94 <decode_escaped_string+0x30>
    833c:	ldr	r0, [sp, #20]
    8340:	ldr	r1, [sp, #12]
    8344:	add	r0, r0, r1
    8348:	movw	r1, #0
    834c:	strb	r1, [r0]
    8350:	ldr	r0, [sp, #12]
    8354:	str	r0, [sp, #24]
    8358:	ldr	r0, [sp, #24]
    835c:	add	sp, sp, #28
    8360:	bx	lr

00008364 <cd_complex_set_type>:
    8364:	push	{fp, lr}
    8368:	mov	fp, sp
    836c:	sub	sp, sp, #8
    8370:	str	r0, [sp, #4]
    8374:	ldr	r0, [sp, #4]
    8378:	ldr	r0, [r0]
    837c:	ldr	r0, [r0, #396]	; 0x18c
    8380:	ldr	r0, [r0, #8]
    8384:	ldr	r1, [sp, #4]
    8388:	ldr	r1, [r1]
    838c:	ldr	r1, [r1, #8]
    8390:	bl	0 <coda_type_complex_set_type>
    8394:	mov	sp, fp
    8398:	pop	{fp, pc}

0000839c <cd_complex_finalise>:
    839c:	push	{fp, lr}
    83a0:	mov	fp, sp
    83a4:	sub	sp, sp, #8
    83a8:	str	r0, [sp, #4]
    83ac:	ldr	r0, [sp, #4]
    83b0:	ldr	r0, [r0]
    83b4:	ldr	r0, [r0, #8]
    83b8:	bl	0 <coda_type_complex_validate>
    83bc:	mov	sp, fp
    83c0:	pop	{fp, pc}

000083c4 <cd_float_set_unit>:
    83c4:	push	{fp, lr}
    83c8:	mov	fp, sp
    83cc:	sub	sp, sp, #8
    83d0:	str	r0, [sp]
    83d4:	ldr	r0, [sp]
    83d8:	ldr	r0, [r0]
    83dc:	ldr	r0, [r0, #12]
    83e0:	movw	r1, #0
    83e4:	cmp	r0, r1
    83e8:	bne	8410 <cd_float_set_unit+0x4c>
    83ec:	ldr	r0, [sp]
    83f0:	ldr	r0, [r0]
    83f4:	ldr	r0, [r0, #396]	; 0x18c
    83f8:	ldr	r0, [r0, #8]
    83fc:	movw	r1, #0
    8400:	movt	r1, #0
    8404:	bl	0 <coda_type_number_set_unit>
    8408:	str	r0, [sp, #4]
    840c:	b	8434 <cd_float_set_unit+0x70>
    8410:	ldr	r0, [sp]
    8414:	ldr	r0, [r0]
    8418:	ldr	r0, [r0, #396]	; 0x18c
    841c:	ldr	r0, [r0, #8]
    8420:	ldr	r1, [sp]
    8424:	ldr	r1, [r1]
    8428:	ldr	r1, [r1, #12]
    842c:	bl	0 <coda_type_number_set_unit>
    8430:	str	r0, [sp, #4]
    8434:	ldr	r0, [sp, #4]
    8438:	mov	sp, fp
    843c:	pop	{fp, pc}

00008440 <cd_native_type_init>:
    8440:	sub	sp, sp, #8
    8444:	str	r0, [sp, #4]
    8448:	str	r1, [sp]
    844c:	ldr	r0, [sp, #4]
    8450:	ldr	r0, [r0]
    8454:	movw	r1, #1
    8458:	str	r1, [r0, #32]
    845c:	ldr	r0, [sp, #4]
    8460:	ldr	r0, [r0]
    8464:	movw	r1, #0
    8468:	movt	r1, #0
    846c:	str	r1, [r0, #36]	; 0x24
    8470:	movw	r0, #0
    8474:	add	sp, sp, #8
    8478:	bx	lr

0000847c <cd_float_set_read_type>:
    847c:	push	{fp, lr}
    8480:	mov	fp, sp
    8484:	sub	sp, sp, #8
    8488:	str	r0, [sp, #4]
    848c:	ldr	r0, [sp, #4]
    8490:	ldr	r0, [r0]
    8494:	ldr	r1, [r0, #16]
    8498:	ldr	r0, [r0, #396]	; 0x18c
    849c:	ldr	r0, [r0, #8]
    84a0:	bl	0 <coda_type_set_read_type>
    84a4:	mov	sp, fp
    84a8:	pop	{fp, pc}
    84ac:	nop	{0}

000084b0 <cd_conversion_init>:
    84b0:	push	{fp, lr}
    84b4:	mov	fp, sp
    84b8:	sub	sp, sp, #96	; 0x60
    84bc:	vldr	d16, [pc, #676]	; 8768 <cd_conversion_init+0x2b8>
    84c0:	str	r0, [fp, #-8]
    84c4:	str	r1, [fp, #-12]
    84c8:	vstr	d16, [sp, #40]	; 0x28
    84cc:	bl	0 <coda_NaN>
    84d0:	vstr	d0, [sp, #32]
    84d4:	ldr	r0, [fp, #-12]
    84d8:	ldr	r1, [fp, #-8]
    84dc:	ldr	r1, [r1]
    84e0:	ldr	r2, [r1]
    84e4:	movw	r1, #0
    84e8:	movt	r1, #0
    84ec:	bl	20fc <get_mandatory_attribute_value>
    84f0:	str	r0, [fp, #-16]
    84f4:	ldr	r0, [fp, #-16]
    84f8:	movw	r1, #0
    84fc:	cmp	r0, r1
    8500:	bne	8510 <cd_conversion_init+0x60>
    8504:	mvn	r0, #0
    8508:	str	r0, [fp, #-4]
    850c:	b	8758 <cd_conversion_init+0x2a8>
    8510:	ldr	r0, [fp, #-12]
    8514:	ldr	r1, [fp, #-8]
    8518:	ldr	r1, [r1]
    851c:	ldr	r2, [r1]
    8520:	movw	r1, #0
    8524:	movt	r1, #0
    8528:	bl	20fc <get_mandatory_attribute_value>
    852c:	str	r0, [fp, #-20]	; 0xffffffec
    8530:	ldr	r0, [fp, #-20]	; 0xffffffec
    8534:	movw	r1, #0
    8538:	cmp	r0, r1
    853c:	bne	854c <cd_conversion_init+0x9c>
    8540:	mvn	r0, #0
    8544:	str	r0, [fp, #-4]
    8548:	b	8758 <cd_conversion_init+0x2a8>
    854c:	ldr	r0, [fp, #-16]
    8550:	ldr	r1, [fp, #-16]
    8554:	str	r0, [sp, #28]
    8558:	mov	r0, r1
    855c:	bl	0 <strlen>
    8560:	ldr	r1, [sp, #28]
    8564:	str	r0, [sp, #24]
    8568:	mov	r0, r1
    856c:	ldr	r1, [sp, #24]
    8570:	sub	r2, fp, #40	; 0x28
    8574:	movw	r3, #1
    8578:	bl	0 <coda_ascii_parse_double>
    857c:	cmp	r0, #0
    8580:	bge	85a4 <cd_conversion_init+0xf4>
    8584:	ldr	r0, [pc, #484]	; 8770 <cd_conversion_init+0x2c0>
    8588:	ldr	r2, [fp, #-16]
    858c:	movw	r1, #0
    8590:	movt	r1, #0
    8594:	bl	0 <coda_set_error>
    8598:	mvn	r0, #0
    859c:	str	r0, [fp, #-4]
    85a0:	b	8758 <cd_conversion_init+0x2a8>
    85a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    85a8:	ldr	r1, [fp, #-20]	; 0xffffffec
    85ac:	str	r0, [sp, #20]
    85b0:	mov	r0, r1
    85b4:	bl	0 <strlen>
    85b8:	ldr	r1, [sp, #20]
    85bc:	str	r0, [sp, #16]
    85c0:	mov	r0, r1
    85c4:	ldr	r1, [sp, #16]
    85c8:	add	r2, sp, #48	; 0x30
    85cc:	movw	r3, #1
    85d0:	bl	0 <coda_ascii_parse_double>
    85d4:	cmp	r0, #0
    85d8:	bge	85fc <cd_conversion_init+0x14c>
    85dc:	ldr	r0, [pc, #396]	; 8770 <cd_conversion_init+0x2c0>
    85e0:	ldr	r2, [fp, #-20]	; 0xffffffec
    85e4:	movw	r1, #0
    85e8:	movt	r1, #0
    85ec:	bl	0 <coda_set_error>
    85f0:	mvn	r0, #0
    85f4:	str	r0, [fp, #-4]
    85f8:	b	8758 <cd_conversion_init+0x2a8>
    85fc:	ldr	r0, [fp, #-12]
    8600:	movw	r1, #0
    8604:	movt	r1, #0
    8608:	bl	250c <get_attribute_value>
    860c:	str	r0, [fp, #-24]	; 0xffffffe8
    8610:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8614:	movw	r1, #0
    8618:	cmp	r0, r1
    861c:	beq	867c <cd_conversion_init+0x1cc>
    8620:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8624:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8628:	str	r0, [sp, #12]
    862c:	mov	r0, r1
    8630:	bl	0 <strlen>
    8634:	ldr	r1, [sp, #12]
    8638:	str	r0, [sp, #8]
    863c:	mov	r0, r1
    8640:	ldr	r1, [sp, #8]
    8644:	add	r2, sp, #40	; 0x28
    8648:	movw	r3, #1
    864c:	bl	0 <coda_ascii_parse_double>
    8650:	cmp	r0, #0
    8654:	bge	8678 <cd_conversion_init+0x1c8>
    8658:	ldr	r0, [pc, #272]	; 8770 <cd_conversion_init+0x2c0>
    865c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8660:	movw	r1, #0
    8664:	movt	r1, #0
    8668:	bl	0 <coda_set_error>
    866c:	mvn	r0, #0
    8670:	str	r0, [fp, #-4]
    8674:	b	8758 <cd_conversion_init+0x2a8>
    8678:	b	867c <cd_conversion_init+0x1cc>
    867c:	ldr	r0, [fp, #-12]
    8680:	movw	r1, #0
    8684:	movt	r1, #0
    8688:	bl	250c <get_attribute_value>
    868c:	str	r0, [fp, #-28]	; 0xffffffe4
    8690:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8694:	movw	r1, #0
    8698:	cmp	r0, r1
    869c:	beq	86fc <cd_conversion_init+0x24c>
    86a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    86a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    86a8:	str	r0, [sp, #4]
    86ac:	mov	r0, r1
    86b0:	bl	0 <strlen>
    86b4:	ldr	r1, [sp, #4]
    86b8:	str	r0, [sp]
    86bc:	mov	r0, r1
    86c0:	ldr	r1, [sp]
    86c4:	add	r2, sp, #32
    86c8:	movw	r3, #1
    86cc:	bl	0 <coda_ascii_parse_double>
    86d0:	cmp	r0, #0
    86d4:	bge	86f8 <cd_conversion_init+0x248>
    86d8:	ldr	r0, [pc, #144]	; 8770 <cd_conversion_init+0x2c0>
    86dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    86e0:	movw	r1, #0
    86e4:	movt	r1, #0
    86e8:	bl	0 <coda_set_error>
    86ec:	mvn	r0, #0
    86f0:	str	r0, [fp, #-4]
    86f4:	b	8758 <cd_conversion_init+0x2a8>
    86f8:	b	86fc <cd_conversion_init+0x24c>
    86fc:	movw	r0, #0
    8700:	movt	r0, #0
    8704:	ldr	r1, [fp, #-8]
    8708:	ldr	r1, [r1]
    870c:	str	r0, [r1, #40]	; 0x28
    8710:	vldr	d0, [fp, #-40]	; 0xffffffd8
    8714:	vldr	d1, [sp, #48]	; 0x30
    8718:	vldr	d2, [sp, #40]	; 0x28
    871c:	vldr	d3, [sp, #32]
    8720:	bl	0 <coda_conversion_new>
    8724:	ldr	r1, [fp, #-8]
    8728:	ldr	r1, [r1]
    872c:	str	r0, [r1, #8]
    8730:	ldr	r0, [fp, #-8]
    8734:	ldr	r0, [r0]
    8738:	movw	r1, #41	; 0x29
    873c:	movw	r2, #0
    8740:	movt	r2, #0
    8744:	movw	r3, #0
    8748:	movt	r3, #0
    874c:	bl	1358 <register_sub_element>
    8750:	movw	r0, #0
    8754:	str	r0, [fp, #-4]
    8758:	ldr	r0, [fp, #-4]
    875c:	mov	sp, fp
    8760:	pop	{fp, pc}
    8764:	nop	{0}
	...
    8770:	.word	0xfffffe70

00008774 <cd_float_set_conversion>:
    8774:	push	{fp, lr}
    8778:	mov	fp, sp
    877c:	sub	sp, sp, #8
    8780:	str	r0, [sp]
    8784:	ldr	r0, [sp]
    8788:	ldr	r0, [r0]
    878c:	ldr	r0, [r0, #396]	; 0x18c
    8790:	ldr	r0, [r0, #8]
    8794:	ldr	r1, [sp]
    8798:	ldr	r1, [r1]
    879c:	ldr	r1, [r1, #8]
    87a0:	bl	0 <coda_type_number_set_conversion>
    87a4:	cmp	r0, #0
    87a8:	beq	87b8 <cd_float_set_conversion+0x44>
    87ac:	mvn	r0, #0
    87b0:	str	r0, [sp, #4]
    87b4:	b	87cc <cd_float_set_conversion+0x58>
    87b8:	ldr	r0, [sp]
    87bc:	ldr	r0, [r0]
    87c0:	movw	r1, #0
    87c4:	str	r1, [r0, #8]
    87c8:	str	r1, [sp, #4]
    87cc:	ldr	r0, [sp, #4]
    87d0:	mov	sp, fp
    87d4:	pop	{fp, pc}

000087d8 <integer_constant_or_expression_init>:
    87d8:	sub	sp, sp, #8
    87dc:	movw	r2, #0
    87e0:	movt	r2, #0
    87e4:	str	r0, [sp, #4]
    87e8:	str	r1, [sp]
    87ec:	ldr	r0, [sp, #4]
    87f0:	ldr	r0, [r0]
    87f4:	movw	r1, #1
    87f8:	str	r1, [r0, #32]
    87fc:	ldr	r0, [sp, #4]
    8800:	ldr	r0, [r0]
    8804:	str	r2, [r0, #40]	; 0x28
    8808:	ldr	r0, [sp, #4]
    880c:	ldr	r0, [r0]
    8810:	movw	r1, #0
    8814:	movt	r1, #0
    8818:	str	r1, [r0, #36]	; 0x24
    881c:	movw	r0, #0
    8820:	add	sp, sp, #8
    8824:	bx	lr

00008828 <type_set_bit_size>:
    8828:	push	{fp, lr}
    882c:	mov	fp, sp
    8830:	sub	sp, sp, #8
    8834:	str	r0, [sp]
    8838:	ldr	r0, [sp]
    883c:	ldr	r0, [r0]
    8840:	ldr	r0, [r0, #8]
    8844:	movw	r1, #0
    8848:	cmp	r0, r1
    884c:	beq	8898 <type_set_bit_size+0x70>
    8850:	ldr	r0, [sp]
    8854:	ldr	r0, [r0]
    8858:	ldr	r0, [r0, #396]	; 0x18c
    885c:	ldr	r0, [r0, #8]
    8860:	ldr	r1, [sp]
    8864:	ldr	r1, [r1]
    8868:	ldr	r1, [r1, #8]
    886c:	bl	0 <coda_type_set_bit_size_expression>
    8870:	cmp	r0, #0
    8874:	beq	8884 <type_set_bit_size+0x5c>
    8878:	mvn	r0, #0
    887c:	str	r0, [sp, #4]
    8880:	b	88d8 <type_set_bit_size+0xb0>
    8884:	ldr	r0, [sp]
    8888:	ldr	r0, [r0]
    888c:	movw	r1, #0
    8890:	str	r1, [r0, #8]
    8894:	b	88d0 <type_set_bit_size+0xa8>
    8898:	ldr	r0, [sp]
    889c:	ldr	r0, [r0]
    88a0:	ldr	r1, [r0, #16]
    88a4:	ldr	r0, [r0, #396]	; 0x18c
    88a8:	ldr	r0, [r0, #8]
    88ac:	asr	r3, r1, #31
    88b0:	mov	r2, r1
    88b4:	bl	0 <coda_type_set_bit_size>
    88b8:	cmp	r0, #0
    88bc:	beq	88cc <type_set_bit_size+0xa4>
    88c0:	mvn	r0, #0
    88c4:	str	r0, [sp, #4]
    88c8:	b	88d8 <type_set_bit_size+0xb0>
    88cc:	b	88d0 <type_set_bit_size+0xa8>
    88d0:	movw	r0, #0
    88d4:	str	r0, [sp, #4]
    88d8:	ldr	r0, [sp, #4]
    88dc:	mov	sp, fp
    88e0:	pop	{fp, pc}

000088e4 <type_set_byte_size>:
    88e4:	push	{fp, lr}
    88e8:	mov	fp, sp
    88ec:	sub	sp, sp, #8
    88f0:	str	r0, [sp]
    88f4:	ldr	r0, [sp]
    88f8:	ldr	r0, [r0]
    88fc:	ldr	r0, [r0, #8]
    8900:	movw	r1, #0
    8904:	cmp	r0, r1
    8908:	beq	8954 <type_set_byte_size+0x70>
    890c:	ldr	r0, [sp]
    8910:	ldr	r0, [r0]
    8914:	ldr	r0, [r0, #396]	; 0x18c
    8918:	ldr	r0, [r0, #8]
    891c:	ldr	r1, [sp]
    8920:	ldr	r1, [r1]
    8924:	ldr	r1, [r1, #8]
    8928:	bl	0 <coda_type_set_byte_size_expression>
    892c:	cmp	r0, #0
    8930:	beq	8940 <type_set_byte_size+0x5c>
    8934:	mvn	r0, #0
    8938:	str	r0, [sp, #4]
    893c:	b	8994 <type_set_byte_size+0xb0>
    8940:	ldr	r0, [sp]
    8944:	ldr	r0, [r0]
    8948:	movw	r1, #0
    894c:	str	r1, [r0, #8]
    8950:	b	898c <type_set_byte_size+0xa8>
    8954:	ldr	r0, [sp]
    8958:	ldr	r0, [r0]
    895c:	ldr	r1, [r0, #16]
    8960:	ldr	r0, [r0, #396]	; 0x18c
    8964:	ldr	r0, [r0, #8]
    8968:	asr	r3, r1, #31
    896c:	mov	r2, r1
    8970:	bl	0 <coda_type_set_byte_size>
    8974:	cmp	r0, #0
    8978:	beq	8988 <type_set_byte_size+0xa4>
    897c:	mvn	r0, #0
    8980:	str	r0, [sp, #4]
    8984:	b	8994 <type_set_byte_size+0xb0>
    8988:	b	898c <type_set_byte_size+0xa8>
    898c:	movw	r0, #0
    8990:	str	r0, [sp, #4]
    8994:	ldr	r0, [sp, #4]
    8998:	mov	sp, fp
    899c:	pop	{fp, pc}

000089a0 <cd_float_set_little_endian>:
    89a0:	push	{fp, lr}
    89a4:	mov	fp, sp
    89a8:	sub	sp, sp, #8
    89ac:	str	r0, [sp, #4]
    89b0:	ldr	r0, [sp, #4]
    89b4:	ldr	r0, [r0]
    89b8:	ldr	r0, [r0, #396]	; 0x18c
    89bc:	ldr	r0, [r0, #8]
    89c0:	movw	r1, #1
    89c4:	bl	0 <coda_type_number_set_endianness>
    89c8:	mov	sp, fp
    89cc:	pop	{fp, pc}

000089d0 <cd_mapping_init>:
    89d0:	push	{fp, lr}
    89d4:	mov	fp, sp
    89d8:	sub	sp, sp, #48	; 0x30
    89dc:	str	r0, [fp, #-8]
    89e0:	str	r1, [fp, #-12]
    89e4:	ldr	r0, [fp, #-12]
    89e8:	ldr	r1, [fp, #-8]
    89ec:	ldr	r1, [r1]
    89f0:	ldr	r2, [r1]
    89f4:	movw	r1, #0
    89f8:	movt	r1, #0
    89fc:	bl	20fc <get_mandatory_attribute_value>
    8a00:	str	r0, [fp, #-16]
    8a04:	ldr	r0, [fp, #-16]
    8a08:	movw	r1, #0
    8a0c:	cmp	r0, r1
    8a10:	bne	8a20 <cd_mapping_init+0x50>
    8a14:	mvn	r0, #0
    8a18:	str	r0, [fp, #-4]
    8a1c:	b	8ca0 <cd_mapping_init+0x2d0>
    8a20:	ldr	r0, [fp, #-12]
    8a24:	ldr	r1, [fp, #-8]
    8a28:	ldr	r1, [r1]
    8a2c:	ldr	r2, [r1]
    8a30:	movw	r1, #0
    8a34:	movt	r1, #0
    8a38:	bl	20fc <get_mandatory_attribute_value>
    8a3c:	str	r0, [fp, #-20]	; 0xffffffec
    8a40:	ldr	r0, [fp, #-20]	; 0xffffffec
    8a44:	movw	r1, #0
    8a48:	cmp	r0, r1
    8a4c:	bne	8a5c <cd_mapping_init+0x8c>
    8a50:	mvn	r0, #0
    8a54:	str	r0, [fp, #-4]
    8a58:	b	8ca0 <cd_mapping_init+0x2d0>
    8a5c:	ldr	r0, [fp, #-8]
    8a60:	ldr	r0, [r0]
    8a64:	ldr	r0, [r0, #396]	; 0x18c
    8a68:	ldr	r0, [r0]
    8a6c:	cmp	r0, #20
    8a70:	bne	8b24 <cd_mapping_init+0x154>
    8a74:	ldr	r0, [fp, #-20]	; 0xffffffec
    8a78:	ldr	r1, [fp, #-20]	; 0xffffffec
    8a7c:	str	r0, [sp, #4]
    8a80:	mov	r0, r1
    8a84:	bl	0 <strlen>
    8a88:	ldr	r1, [sp, #4]
    8a8c:	str	r0, [sp]
    8a90:	mov	r0, r1
    8a94:	ldr	r1, [sp]
    8a98:	add	r2, sp, #16
    8a9c:	movw	r3, #0
    8aa0:	bl	0 <coda_ascii_parse_int64>
    8aa4:	cmp	r0, #0
    8aa8:	bge	8acc <cd_mapping_init+0xfc>
    8aac:	ldr	r0, [pc, #504]	; 8cac <cd_mapping_init+0x2dc>
    8ab0:	ldr	r2, [fp, #-20]	; 0xffffffec
    8ab4:	movw	r1, #0
    8ab8:	movt	r1, #0
    8abc:	bl	0 <coda_set_error>
    8ac0:	mvn	r0, #0
    8ac4:	str	r0, [fp, #-4]
    8ac8:	b	8ca0 <cd_mapping_init+0x2d0>
    8acc:	ldr	r0, [fp, #-8]
    8ad0:	ldr	r0, [r0]
    8ad4:	movw	r1, #0
    8ad8:	movt	r1, #0
    8adc:	str	r1, [r0, #40]	; 0x28
    8ae0:	ldr	r0, [fp, #-16]
    8ae4:	ldr	r2, [sp, #16]
    8ae8:	ldr	r3, [sp, #20]
    8aec:	bl	0 <coda_ascii_integer_mapping_new>
    8af0:	ldr	r1, [fp, #-8]
    8af4:	ldr	r1, [r1]
    8af8:	str	r0, [r1, #8]
    8afc:	ldr	r0, [fp, #-8]
    8b00:	ldr	r0, [r0]
    8b04:	ldr	r0, [r0, #8]
    8b08:	movw	r1, #0
    8b0c:	cmp	r0, r1
    8b10:	bne	8b20 <cd_mapping_init+0x150>
    8b14:	mvn	r0, #0
    8b18:	str	r0, [fp, #-4]
    8b1c:	b	8ca0 <cd_mapping_init+0x2d0>
    8b20:	b	8c98 <cd_mapping_init+0x2c8>
    8b24:	ldr	r0, [fp, #-8]
    8b28:	ldr	r0, [r0]
    8b2c:	ldr	r0, [r0, #396]	; 0x18c
    8b30:	ldr	r0, [r0]
    8b34:	cmp	r0, #17
    8b38:	beq	8b54 <cd_mapping_init+0x184>
    8b3c:	ldr	r0, [fp, #-8]
    8b40:	ldr	r0, [r0]
    8b44:	ldr	r0, [r0, #396]	; 0x18c
    8b48:	ldr	r0, [r0]
    8b4c:	cmp	r0, #38	; 0x26
    8b50:	bne	8c74 <cd_mapping_init+0x2a4>
    8b54:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b58:	movw	r1, #0
    8b5c:	movt	r1, #0
    8b60:	bl	0 <strcasecmp>
    8b64:	cmp	r0, #0
    8b68:	bne	8b78 <cd_mapping_init+0x1a8>
    8b6c:	bl	0 <coda_NaN>
    8b70:	vstr	d0, [sp, #8]
    8b74:	b	8c20 <cd_mapping_init+0x250>
    8b78:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b7c:	movw	r1, #0
    8b80:	movt	r1, #0
    8b84:	bl	0 <strcasecmp>
    8b88:	cmp	r0, #0
    8b8c:	beq	8ba8 <cd_mapping_init+0x1d8>
    8b90:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b94:	movw	r1, #0
    8b98:	movt	r1, #0
    8b9c:	bl	0 <strcasecmp>
    8ba0:	cmp	r0, #0
    8ba4:	bne	8bb4 <cd_mapping_init+0x1e4>
    8ba8:	bl	0 <coda_PlusInf>
    8bac:	vstr	d0, [sp, #8]
    8bb0:	b	8c1c <cd_mapping_init+0x24c>
    8bb4:	ldr	r0, [fp, #-20]	; 0xffffffec
    8bb8:	movw	r1, #0
    8bbc:	movt	r1, #0
    8bc0:	bl	0 <strcasecmp>
    8bc4:	cmp	r0, #0
    8bc8:	bne	8bd8 <cd_mapping_init+0x208>
    8bcc:	bl	0 <coda_MinInf>
    8bd0:	vstr	d0, [sp, #8]
    8bd4:	b	8c18 <cd_mapping_init+0x248>
    8bd8:	ldr	r0, [fp, #-20]	; 0xffffffec
    8bdc:	movw	r1, #0
    8be0:	movt	r1, #0
    8be4:	add	r2, sp, #8
    8be8:	bl	0 <__isoc99_sscanf>
    8bec:	cmp	r0, #1
    8bf0:	beq	8c14 <cd_mapping_init+0x244>
    8bf4:	ldr	r0, [pc, #176]	; 8cac <cd_mapping_init+0x2dc>
    8bf8:	ldr	r2, [fp, #-20]	; 0xffffffec
    8bfc:	movw	r1, #0
    8c00:	movt	r1, #0
    8c04:	bl	0 <coda_set_error>
    8c08:	mvn	r0, #0
    8c0c:	str	r0, [fp, #-4]
    8c10:	b	8ca0 <cd_mapping_init+0x2d0>
    8c14:	b	8c18 <cd_mapping_init+0x248>
    8c18:	b	8c1c <cd_mapping_init+0x24c>
    8c1c:	b	8c20 <cd_mapping_init+0x250>
    8c20:	movw	r0, #0
    8c24:	movt	r0, #0
    8c28:	ldr	r1, [fp, #-8]
    8c2c:	ldr	r1, [r1]
    8c30:	str	r0, [r1, #40]	; 0x28
    8c34:	ldr	r0, [fp, #-16]
    8c38:	vldr	d0, [sp, #8]
    8c3c:	bl	0 <coda_ascii_float_mapping_new>
    8c40:	ldr	r1, [fp, #-8]
    8c44:	ldr	r1, [r1]
    8c48:	str	r0, [r1, #8]
    8c4c:	ldr	r0, [fp, #-8]
    8c50:	ldr	r0, [r0]
    8c54:	ldr	r0, [r0, #8]
    8c58:	movw	r1, #0
    8c5c:	cmp	r0, r1
    8c60:	bne	8c70 <cd_mapping_init+0x2a0>
    8c64:	mvn	r0, #0
    8c68:	str	r0, [fp, #-4]
    8c6c:	b	8ca0 <cd_mapping_init+0x2d0>
    8c70:	b	8c94 <cd_mapping_init+0x2c4>
    8c74:	movw	r0, #0
    8c78:	movt	r0, #0
    8c7c:	movw	r1, #0
    8c80:	movt	r1, #0
    8c84:	movw	r2, #2040	; 0x7f8
    8c88:	movw	r3, #0
    8c8c:	movt	r3, #0
    8c90:	bl	0 <__assert_fail>
    8c94:	b	8c98 <cd_mapping_init+0x2c8>
    8c98:	movw	r0, #0
    8c9c:	str	r0, [fp, #-4]
    8ca0:	ldr	r0, [fp, #-4]
    8ca4:	mov	sp, fp
    8ca8:	pop	{fp, pc}
    8cac:	.word	0xfffffe70

00008cb0 <cd_float_add_mapping>:
    8cb0:	push	{fp, lr}
    8cb4:	mov	fp, sp
    8cb8:	sub	sp, sp, #8
    8cbc:	str	r0, [sp]
    8cc0:	ldr	r0, [sp]
    8cc4:	ldr	r0, [r0]
    8cc8:	ldr	r0, [r0, #396]	; 0x18c
    8ccc:	ldr	r0, [r0, #8]
    8cd0:	ldr	r1, [sp]
    8cd4:	ldr	r1, [r1]
    8cd8:	ldr	r1, [r1, #8]
    8cdc:	bl	0 <coda_type_number_add_ascii_float_mapping>
    8ce0:	cmp	r0, #0
    8ce4:	beq	8cf4 <cd_float_add_mapping+0x44>
    8ce8:	mvn	r0, #0
    8cec:	str	r0, [sp, #4]
    8cf0:	b	8d08 <cd_float_add_mapping+0x58>
    8cf4:	ldr	r0, [sp]
    8cf8:	ldr	r0, [r0]
    8cfc:	movw	r1, #0
    8d00:	str	r1, [r0, #8]
    8d04:	str	r1, [sp, #4]
    8d08:	ldr	r0, [sp, #4]
    8d0c:	mov	sp, fp
    8d10:	pop	{fp, pc}

00008d14 <cd_float_finalise>:
    8d14:	push	{fp, lr}
    8d18:	mov	fp, sp
    8d1c:	sub	sp, sp, #8
    8d20:	str	r0, [sp, #4]
    8d24:	ldr	r0, [sp, #4]
    8d28:	ldr	r0, [r0]
    8d2c:	ldr	r0, [r0, #8]
    8d30:	bl	0 <coda_type_number_validate>
    8d34:	mov	sp, fp
    8d38:	pop	{fp, pc}

00008d3c <cd_native_type_finalise>:
    8d3c:	push	{fp, lr}
    8d40:	mov	fp, sp
    8d44:	sub	sp, sp, #8
    8d48:	str	r0, [sp]
    8d4c:	ldr	r0, [sp]
    8d50:	ldr	r0, [r0]
    8d54:	ldr	r0, [r0, #12]
    8d58:	movw	r1, #0
    8d5c:	cmp	r0, r1
    8d60:	bne	8d80 <cd_native_type_finalise+0x44>
    8d64:	ldr	r0, [pc, #892]	; 90e8 <cd_native_type_finalise+0x3ac>
    8d68:	movw	r1, #0
    8d6c:	movt	r1, #0
    8d70:	bl	0 <coda_set_error>
    8d74:	mvn	r0, #0
    8d78:	str	r0, [sp, #4]
    8d7c:	b	90dc <cd_native_type_finalise+0x3a0>
    8d80:	ldr	r0, [sp]
    8d84:	ldr	r0, [r0]
    8d88:	ldr	r0, [r0, #12]
    8d8c:	movw	r1, #0
    8d90:	movt	r1, #0
    8d94:	bl	0 <strcmp>
    8d98:	cmp	r0, #0
    8d9c:	bne	8db8 <cd_native_type_finalise+0x7c>
    8da0:	ldr	r0, [sp]
    8da4:	ldr	r0, [r0]
    8da8:	mov	r1, #0
    8dac:	str	r1, [r0, #20]
    8db0:	str	r1, [r0, #16]
    8db4:	b	90d4 <cd_native_type_finalise+0x398>
    8db8:	ldr	r0, [sp]
    8dbc:	ldr	r0, [r0]
    8dc0:	ldr	r0, [r0, #12]
    8dc4:	movw	r1, #0
    8dc8:	movt	r1, #0
    8dcc:	bl	0 <strcmp>
    8dd0:	cmp	r0, #0
    8dd4:	bne	8df4 <cd_native_type_finalise+0xb8>
    8dd8:	ldr	r0, [sp]
    8ddc:	ldr	r0, [r0]
    8de0:	mov	r1, #0
    8de4:	str	r1, [r0, #20]
    8de8:	mov	r1, #2
    8dec:	str	r1, [r0, #16]
    8df0:	b	90d0 <cd_native_type_finalise+0x394>
    8df4:	ldr	r0, [sp]
    8df8:	ldr	r0, [r0]
    8dfc:	ldr	r0, [r0, #12]
    8e00:	movw	r1, #0
    8e04:	movt	r1, #0
    8e08:	bl	0 <strcmp>
    8e0c:	cmp	r0, #0
    8e10:	bne	8e30 <cd_native_type_finalise+0xf4>
    8e14:	ldr	r0, [sp]
    8e18:	ldr	r0, [r0]
    8e1c:	mov	r1, #0
    8e20:	str	r1, [r0, #20]
    8e24:	mov	r1, #4
    8e28:	str	r1, [r0, #16]
    8e2c:	b	90cc <cd_native_type_finalise+0x390>
    8e30:	ldr	r0, [sp]
    8e34:	ldr	r0, [r0]
    8e38:	ldr	r0, [r0, #12]
    8e3c:	movw	r1, #0
    8e40:	movt	r1, #0
    8e44:	bl	0 <strcmp>
    8e48:	cmp	r0, #0
    8e4c:	bne	8e6c <cd_native_type_finalise+0x130>
    8e50:	ldr	r0, [sp]
    8e54:	ldr	r0, [r0]
    8e58:	mov	r1, #0
    8e5c:	str	r1, [r0, #20]
    8e60:	mov	r1, #6
    8e64:	str	r1, [r0, #16]
    8e68:	b	90c8 <cd_native_type_finalise+0x38c>
    8e6c:	ldr	r0, [sp]
    8e70:	ldr	r0, [r0]
    8e74:	ldr	r0, [r0, #12]
    8e78:	movw	r1, #0
    8e7c:	movt	r1, #0
    8e80:	bl	0 <strcmp>
    8e84:	cmp	r0, #0
    8e88:	bne	8ea8 <cd_native_type_finalise+0x16c>
    8e8c:	ldr	r0, [sp]
    8e90:	ldr	r0, [r0]
    8e94:	mov	r1, #0
    8e98:	str	r1, [r0, #20]
    8e9c:	mov	r1, #1
    8ea0:	str	r1, [r0, #16]
    8ea4:	b	90c4 <cd_native_type_finalise+0x388>
    8ea8:	ldr	r0, [sp]
    8eac:	ldr	r0, [r0]
    8eb0:	ldr	r0, [r0, #12]
    8eb4:	movw	r1, #0
    8eb8:	movt	r1, #0
    8ebc:	bl	0 <strcmp>
    8ec0:	cmp	r0, #0
    8ec4:	bne	8ee4 <cd_native_type_finalise+0x1a8>
    8ec8:	ldr	r0, [sp]
    8ecc:	ldr	r0, [r0]
    8ed0:	mov	r1, #0
    8ed4:	str	r1, [r0, #20]
    8ed8:	mov	r1, #3
    8edc:	str	r1, [r0, #16]
    8ee0:	b	90c0 <cd_native_type_finalise+0x384>
    8ee4:	ldr	r0, [sp]
    8ee8:	ldr	r0, [r0]
    8eec:	ldr	r0, [r0, #12]
    8ef0:	movw	r1, #0
    8ef4:	movt	r1, #0
    8ef8:	bl	0 <strcmp>
    8efc:	cmp	r0, #0
    8f00:	bne	8f20 <cd_native_type_finalise+0x1e4>
    8f04:	ldr	r0, [sp]
    8f08:	ldr	r0, [r0]
    8f0c:	mov	r1, #0
    8f10:	str	r1, [r0, #20]
    8f14:	mov	r1, #5
    8f18:	str	r1, [r0, #16]
    8f1c:	b	90bc <cd_native_type_finalise+0x380>
    8f20:	ldr	r0, [sp]
    8f24:	ldr	r0, [r0]
    8f28:	ldr	r0, [r0, #12]
    8f2c:	movw	r1, #0
    8f30:	movt	r1, #0
    8f34:	bl	0 <strcmp>
    8f38:	cmp	r0, #0
    8f3c:	bne	8f5c <cd_native_type_finalise+0x220>
    8f40:	ldr	r0, [sp]
    8f44:	ldr	r0, [r0]
    8f48:	mov	r1, #0
    8f4c:	str	r1, [r0, #20]
    8f50:	mov	r1, #7
    8f54:	str	r1, [r0, #16]
    8f58:	b	90b8 <cd_native_type_finalise+0x37c>
    8f5c:	ldr	r0, [sp]
    8f60:	ldr	r0, [r0]
    8f64:	ldr	r0, [r0, #12]
    8f68:	movw	r1, #0
    8f6c:	movt	r1, #0
    8f70:	bl	0 <strcmp>
    8f74:	cmp	r0, #0
    8f78:	bne	8f98 <cd_native_type_finalise+0x25c>
    8f7c:	ldr	r0, [sp]
    8f80:	ldr	r0, [r0]
    8f84:	mov	r1, #0
    8f88:	str	r1, [r0, #20]
    8f8c:	mov	r1, #8
    8f90:	str	r1, [r0, #16]
    8f94:	b	90b4 <cd_native_type_finalise+0x378>
    8f98:	ldr	r0, [sp]
    8f9c:	ldr	r0, [r0]
    8fa0:	ldr	r0, [r0, #12]
    8fa4:	movw	r1, #0
    8fa8:	movt	r1, #0
    8fac:	bl	0 <strcmp>
    8fb0:	cmp	r0, #0
    8fb4:	bne	8fd4 <cd_native_type_finalise+0x298>
    8fb8:	ldr	r0, [sp]
    8fbc:	ldr	r0, [r0]
    8fc0:	mov	r1, #0
    8fc4:	str	r1, [r0, #20]
    8fc8:	mov	r1, #9
    8fcc:	str	r1, [r0, #16]
    8fd0:	b	90b0 <cd_native_type_finalise+0x374>
    8fd4:	ldr	r0, [sp]
    8fd8:	ldr	r0, [r0]
    8fdc:	ldr	r0, [r0, #12]
    8fe0:	movw	r1, #0
    8fe4:	movt	r1, #0
    8fe8:	bl	0 <strcmp>
    8fec:	cmp	r0, #0
    8ff0:	bne	9010 <cd_native_type_finalise+0x2d4>
    8ff4:	ldr	r0, [sp]
    8ff8:	ldr	r0, [r0]
    8ffc:	mov	r1, #0
    9000:	str	r1, [r0, #20]
    9004:	mov	r1, #10
    9008:	str	r1, [r0, #16]
    900c:	b	90ac <cd_native_type_finalise+0x370>
    9010:	ldr	r0, [sp]
    9014:	ldr	r0, [r0]
    9018:	ldr	r0, [r0, #12]
    901c:	movw	r1, #0
    9020:	movt	r1, #0
    9024:	bl	0 <strcmp>
    9028:	cmp	r0, #0
    902c:	bne	904c <cd_native_type_finalise+0x310>
    9030:	ldr	r0, [sp]
    9034:	ldr	r0, [r0]
    9038:	mov	r1, #0
    903c:	str	r1, [r0, #20]
    9040:	mov	r1, #11
    9044:	str	r1, [r0, #16]
    9048:	b	90a8 <cd_native_type_finalise+0x36c>
    904c:	ldr	r0, [sp]
    9050:	ldr	r0, [r0]
    9054:	ldr	r0, [r0, #12]
    9058:	movw	r1, #0
    905c:	movt	r1, #0
    9060:	bl	0 <strcmp>
    9064:	cmp	r0, #0
    9068:	bne	9088 <cd_native_type_finalise+0x34c>
    906c:	ldr	r0, [sp]
    9070:	ldr	r0, [r0]
    9074:	mov	r1, #0
    9078:	str	r1, [r0, #20]
    907c:	mov	r1, #12
    9080:	str	r1, [r0, #16]
    9084:	b	90a4 <cd_native_type_finalise+0x368>
    9088:	ldr	r0, [pc, #88]	; 90e8 <cd_native_type_finalise+0x3ac>
    908c:	movw	r1, #0
    9090:	movt	r1, #0
    9094:	bl	0 <coda_set_error>
    9098:	mvn	r0, #0
    909c:	str	r0, [sp, #4]
    90a0:	b	90dc <cd_native_type_finalise+0x3a0>
    90a4:	b	90a8 <cd_native_type_finalise+0x36c>
    90a8:	b	90ac <cd_native_type_finalise+0x370>
    90ac:	b	90b0 <cd_native_type_finalise+0x374>
    90b0:	b	90b4 <cd_native_type_finalise+0x378>
    90b4:	b	90b8 <cd_native_type_finalise+0x37c>
    90b8:	b	90bc <cd_native_type_finalise+0x380>
    90bc:	b	90c0 <cd_native_type_finalise+0x384>
    90c0:	b	90c4 <cd_native_type_finalise+0x388>
    90c4:	b	90c8 <cd_native_type_finalise+0x38c>
    90c8:	b	90cc <cd_native_type_finalise+0x390>
    90cc:	b	90d0 <cd_native_type_finalise+0x394>
    90d0:	b	90d4 <cd_native_type_finalise+0x398>
    90d4:	movw	r0, #0
    90d8:	str	r0, [sp, #4]
    90dc:	ldr	r0, [sp, #4]
    90e0:	mov	sp, fp
    90e4:	pop	{fp, pc}
    90e8:	.word	0xfffffe70

000090ec <cd_conversion_set_unit>:
    90ec:	push	{fp, lr}
    90f0:	mov	fp, sp
    90f4:	sub	sp, sp, #8
    90f8:	str	r0, [sp]
    90fc:	ldr	r0, [sp]
    9100:	ldr	r0, [r0]
    9104:	ldr	r0, [r0, #12]
    9108:	movw	r1, #0
    910c:	cmp	r0, r1
    9110:	bne	9138 <cd_conversion_set_unit+0x4c>
    9114:	ldr	r0, [sp]
    9118:	ldr	r0, [r0]
    911c:	ldr	r0, [r0, #396]	; 0x18c
    9120:	ldr	r0, [r0, #8]
    9124:	movw	r1, #0
    9128:	movt	r1, #0
    912c:	bl	0 <coda_conversion_set_unit>
    9130:	str	r0, [sp, #4]
    9134:	b	915c <cd_conversion_set_unit+0x70>
    9138:	ldr	r0, [sp]
    913c:	ldr	r0, [r0]
    9140:	ldr	r0, [r0, #396]	; 0x18c
    9144:	ldr	r0, [r0, #8]
    9148:	ldr	r1, [sp]
    914c:	ldr	r1, [r1]
    9150:	ldr	r1, [r1, #12]
    9154:	bl	0 <coda_conversion_set_unit>
    9158:	str	r0, [sp, #4]
    915c:	ldr	r0, [sp, #4]
    9160:	mov	sp, fp
    9164:	pop	{fp, pc}

00009168 <integer_constant_or_expression_finalise>:
    9168:	push	{fp, lr}
    916c:	mov	fp, sp
    9170:	sub	sp, sp, #24
    9174:	str	r0, [fp, #-8]
    9178:	ldr	r0, [fp, #-8]
    917c:	ldr	r0, [r0]
    9180:	ldr	r0, [r0, #12]
    9184:	movw	r1, #0
    9188:	cmp	r0, r1
    918c:	beq	91f4 <integer_constant_or_expression_finalise+0x8c>
    9190:	ldr	r0, [fp, #-8]
    9194:	ldr	r0, [r0]
    9198:	ldr	r0, [r0, #12]
    919c:	ldr	r1, [fp, #-8]
    91a0:	ldr	r1, [r1]
    91a4:	ldr	r1, [r1, #12]
    91a8:	str	r0, [sp, #4]
    91ac:	mov	r0, r1
    91b0:	bl	0 <strlen>
    91b4:	ldr	r1, [sp, #4]
    91b8:	str	r0, [sp]
    91bc:	mov	r0, r1
    91c0:	ldr	r1, [sp]
    91c4:	bl	2008 <is_whitespace>
    91c8:	cmp	r0, #0
    91cc:	beq	91f0 <integer_constant_or_expression_finalise+0x88>
    91d0:	ldr	r0, [fp, #-8]
    91d4:	ldr	r0, [r0]
    91d8:	ldr	r0, [r0, #12]
    91dc:	bl	0 <free>
    91e0:	ldr	r0, [fp, #-8]
    91e4:	ldr	r0, [r0]
    91e8:	movw	lr, #0
    91ec:	str	lr, [r0, #12]
    91f0:	b	91f4 <integer_constant_or_expression_finalise+0x8c>
    91f4:	ldr	r0, [fp, #-8]
    91f8:	ldr	r0, [r0]
    91fc:	ldr	r0, [r0, #12]
    9200:	movw	r1, #0
    9204:	cmp	r0, r1
    9208:	bne	9228 <integer_constant_or_expression_finalise+0xc0>
    920c:	ldr	r0, [pc, #292]	; 9338 <integer_constant_or_expression_finalise+0x1d0>
    9210:	movw	r1, #0
    9214:	movt	r1, #0
    9218:	bl	0 <coda_set_error>
    921c:	mvn	r0, #0
    9220:	str	r0, [fp, #-4]
    9224:	b	932c <integer_constant_or_expression_finalise+0x1c4>
    9228:	ldr	r0, [fp, #-8]
    922c:	ldr	r0, [r0]
    9230:	ldr	r0, [r0, #12]
    9234:	add	r1, sp, #8
    9238:	bl	0 <coda_expression_from_string>
    923c:	cmp	r0, #0
    9240:	beq	9250 <integer_constant_or_expression_finalise+0xe8>
    9244:	mvn	r0, #0
    9248:	str	r0, [fp, #-4]
    924c:	b	932c <integer_constant_or_expression_finalise+0x1c4>
    9250:	ldr	r0, [fp, #-8]
    9254:	ldr	r0, [r0]
    9258:	ldr	r0, [r0, #12]
    925c:	bl	0 <free>
    9260:	ldr	r0, [fp, #-8]
    9264:	ldr	r0, [r0]
    9268:	movw	lr, #0
    926c:	str	lr, [r0, #12]
    9270:	ldr	r0, [sp, #8]
    9274:	ldr	lr, [fp, #-8]
    9278:	ldr	lr, [lr]
    927c:	str	r0, [lr, #8]
    9280:	ldr	r0, [sp, #8]
    9284:	add	r1, sp, #12
    9288:	bl	0 <coda_expression_get_type>
    928c:	cmp	r0, #0
    9290:	beq	92a8 <integer_constant_or_expression_finalise+0x140>
    9294:	ldr	r0, [sp, #8]
    9298:	bl	0 <coda_expression_delete>
    929c:	mvn	r0, #0
    92a0:	str	r0, [fp, #-4]
    92a4:	b	932c <integer_constant_or_expression_finalise+0x1c4>
    92a8:	ldr	r0, [sp, #12]
    92ac:	cmp	r0, #1
    92b0:	beq	92d0 <integer_constant_or_expression_finalise+0x168>
    92b4:	ldr	r0, [pc, #124]	; 9338 <integer_constant_or_expression_finalise+0x1d0>
    92b8:	movw	r1, #0
    92bc:	movt	r1, #0
    92c0:	bl	0 <coda_set_error>
    92c4:	mvn	r0, #0
    92c8:	str	r0, [fp, #-4]
    92cc:	b	932c <integer_constant_or_expression_finalise+0x1c4>
    92d0:	ldr	r0, [sp, #8]
    92d4:	bl	0 <coda_expression_is_constant>
    92d8:	cmp	r0, #0
    92dc:	beq	9324 <integer_constant_or_expression_finalise+0x1bc>
    92e0:	ldr	r0, [sp, #8]
    92e4:	ldr	r1, [fp, #-8]
    92e8:	ldr	r1, [r1]
    92ec:	add	r2, r1, #16
    92f0:	movw	r1, #0
    92f4:	bl	0 <coda_expression_eval_integer>
    92f8:	cmp	r0, #0
    92fc:	beq	930c <integer_constant_or_expression_finalise+0x1a4>
    9300:	mvn	r0, #0
    9304:	str	r0, [fp, #-4]
    9308:	b	932c <integer_constant_or_expression_finalise+0x1c4>
    930c:	ldr	r0, [fp, #-8]
    9310:	ldr	r0, [r0]
    9314:	movw	r1, #0
    9318:	str	r1, [r0, #8]
    931c:	ldr	r0, [sp, #8]
    9320:	bl	0 <coda_expression_delete>
    9324:	movw	r0, #0
    9328:	str	r0, [fp, #-4]
    932c:	ldr	r0, [fp, #-4]
    9330:	mov	sp, fp
    9334:	pop	{fp, pc}
    9338:	.word	0xfffffe70

0000933c <cd_integer_set_unit>:
    933c:	push	{fp, lr}
    9340:	mov	fp, sp
    9344:	sub	sp, sp, #8
    9348:	str	r0, [sp]
    934c:	ldr	r0, [sp]
    9350:	ldr	r0, [r0]
    9354:	ldr	r0, [r0, #12]
    9358:	movw	r1, #0
    935c:	cmp	r0, r1
    9360:	bne	9388 <cd_integer_set_unit+0x4c>
    9364:	ldr	r0, [sp]
    9368:	ldr	r0, [r0]
    936c:	ldr	r0, [r0, #396]	; 0x18c
    9370:	ldr	r0, [r0, #8]
    9374:	movw	r1, #0
    9378:	movt	r1, #0
    937c:	bl	0 <coda_type_number_set_unit>
    9380:	str	r0, [sp, #4]
    9384:	b	93ac <cd_integer_set_unit+0x70>
    9388:	ldr	r0, [sp]
    938c:	ldr	r0, [r0]
    9390:	ldr	r0, [r0, #396]	; 0x18c
    9394:	ldr	r0, [r0, #8]
    9398:	ldr	r1, [sp]
    939c:	ldr	r1, [r1]
    93a0:	ldr	r1, [r1, #12]
    93a4:	bl	0 <coda_type_number_set_unit>
    93a8:	str	r0, [sp, #4]
    93ac:	ldr	r0, [sp, #4]
    93b0:	mov	sp, fp
    93b4:	pop	{fp, pc}

000093b8 <cd_integer_set_little_endian>:
    93b8:	push	{fp, lr}
    93bc:	mov	fp, sp
    93c0:	sub	sp, sp, #8
    93c4:	str	r0, [sp, #4]
    93c8:	ldr	r0, [sp, #4]
    93cc:	ldr	r0, [r0]
    93d0:	ldr	r0, [r0, #396]	; 0x18c
    93d4:	ldr	r0, [r0, #8]
    93d8:	movw	r1, #1
    93dc:	bl	0 <coda_type_number_set_endianness>
    93e0:	mov	sp, fp
    93e4:	pop	{fp, pc}

000093e8 <cd_integer_set_read_type>:
    93e8:	push	{fp, lr}
    93ec:	mov	fp, sp
    93f0:	sub	sp, sp, #8
    93f4:	str	r0, [sp, #4]
    93f8:	ldr	r0, [sp, #4]
    93fc:	ldr	r0, [r0]
    9400:	ldr	r1, [r0, #16]
    9404:	ldr	r0, [r0, #396]	; 0x18c
    9408:	ldr	r0, [r0, #8]
    940c:	bl	0 <coda_type_set_read_type>
    9410:	mov	sp, fp
    9414:	pop	{fp, pc}

00009418 <cd_integer_set_conversion>:
    9418:	push	{fp, lr}
    941c:	mov	fp, sp
    9420:	sub	sp, sp, #8
    9424:	str	r0, [sp]
    9428:	ldr	r0, [sp]
    942c:	ldr	r0, [r0]
    9430:	ldr	r0, [r0, #396]	; 0x18c
    9434:	ldr	r0, [r0, #8]
    9438:	ldr	r1, [sp]
    943c:	ldr	r1, [r1]
    9440:	ldr	r1, [r1, #8]
    9444:	bl	0 <coda_type_number_set_conversion>
    9448:	cmp	r0, #0
    944c:	beq	945c <cd_integer_set_conversion+0x44>
    9450:	mvn	r0, #0
    9454:	str	r0, [sp, #4]
    9458:	b	9470 <cd_integer_set_conversion+0x58>
    945c:	ldr	r0, [sp]
    9460:	ldr	r0, [r0]
    9464:	movw	r1, #0
    9468:	str	r1, [r0, #8]
    946c:	str	r1, [sp, #4]
    9470:	ldr	r0, [sp, #4]
    9474:	mov	sp, fp
    9478:	pop	{fp, pc}

0000947c <cd_integer_add_mapping>:
    947c:	push	{fp, lr}
    9480:	mov	fp, sp
    9484:	sub	sp, sp, #8
    9488:	str	r0, [sp]
    948c:	ldr	r0, [sp]
    9490:	ldr	r0, [r0]
    9494:	ldr	r0, [r0, #396]	; 0x18c
    9498:	ldr	r0, [r0, #8]
    949c:	ldr	r1, [sp]
    94a0:	ldr	r1, [r1]
    94a4:	ldr	r1, [r1, #8]
    94a8:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    94ac:	cmp	r0, #0
    94b0:	beq	94c0 <cd_integer_add_mapping+0x44>
    94b4:	mvn	r0, #0
    94b8:	str	r0, [sp, #4]
    94bc:	b	94d4 <cd_integer_add_mapping+0x58>
    94c0:	ldr	r0, [sp]
    94c4:	ldr	r0, [r0]
    94c8:	movw	r1, #0
    94cc:	str	r1, [r0, #8]
    94d0:	str	r1, [sp, #4]
    94d4:	ldr	r0, [sp, #4]
    94d8:	mov	sp, fp
    94dc:	pop	{fp, pc}

000094e0 <cd_integer_finalise>:
    94e0:	push	{fp, lr}
    94e4:	mov	fp, sp
    94e8:	sub	sp, sp, #8
    94ec:	str	r0, [sp, #4]
    94f0:	ldr	r0, [sp, #4]
    94f4:	ldr	r0, [r0]
    94f8:	ldr	r0, [r0, #8]
    94fc:	bl	0 <coda_type_number_validate>
    9500:	mov	sp, fp
    9504:	pop	{fp, pc}

00009508 <get_named_type>:
    9508:	push	{fp, lr}
    950c:	mov	fp, sp
    9510:	sub	sp, sp, #24
    9514:	str	r0, [fp, #-8]
    9518:	str	r1, [sp, #12]
    951c:	str	r2, [sp, #8]
    9520:	ldr	r0, [fp, #-8]
    9524:	ldr	r0, [r0, #24]
    9528:	movw	r1, #0
    952c:	cmp	r0, r1
    9530:	beq	9538 <get_named_type+0x30>
    9534:	b	9558 <get_named_type+0x50>
    9538:	movw	r0, #0
    953c:	movt	r0, #0
    9540:	movw	r1, #0
    9544:	movt	r1, #0
    9548:	movw	r2, #710	; 0x2c6
    954c:	movw	r3, #0
    9550:	movt	r3, #0
    9554:	bl	0 <__assert_fail>
    9558:	ldr	r0, [fp, #-8]
    955c:	ldr	r0, [r0, #24]
    9560:	ldr	r1, [sp, #12]
    9564:	bl	0 <coda_product_class_has_named_type>
    9568:	cmp	r0, #0
    956c:	bne	95c8 <get_named_type+0xc0>
    9570:	ldr	r0, [fp, #-8]
    9574:	ldr	r0, [r0, #16]
    9578:	ldr	r2, [sp, #12]
    957c:	ldr	r1, [fp, #-8]
    9580:	ldr	r3, [r1, #24]
    9584:	ldr	r1, [fp, #-8]
    9588:	ldr	r1, [r1, #28]
    958c:	movw	ip, #1
    9590:	str	r1, [sp, #4]
    9594:	mov	r1, ip
    9598:	ldr	ip, [sp, #4]
    959c:	str	ip, [sp]
    95a0:	bl	14c <parse_entry>
    95a4:	cmp	r0, #0
    95a8:	beq	95c4 <get_named_type+0xbc>
    95ac:	ldr	r0, [fp, #-8]
    95b0:	movw	r1, #0
    95b4:	str	r1, [r0, #44]	; 0x2c
    95b8:	mvn	r0, #0
    95bc:	str	r0, [fp, #-4]
    95c0:	b	95fc <get_named_type+0xf4>
    95c4:	b	95c8 <get_named_type+0xc0>
    95c8:	ldr	r0, [fp, #-8]
    95cc:	ldr	r0, [r0, #24]
    95d0:	ldr	r1, [sp, #12]
    95d4:	bl	0 <coda_product_class_get_named_type>
    95d8:	ldr	r1, [sp, #8]
    95dc:	str	r0, [r1]
    95e0:	ldr	r0, [sp, #8]
    95e4:	ldr	r0, [r0]
    95e8:	ldr	r1, [r0, #4]
    95ec:	add	r1, r1, #1
    95f0:	str	r1, [r0, #4]
    95f4:	movw	r0, #0
    95f8:	str	r0, [fp, #-4]
    95fc:	ldr	r0, [fp, #-4]
    9600:	mov	sp, fp
    9604:	pop	{fp, pc}

00009608 <cd_raw_set_fixed_value>:
    9608:	push	{fp, lr}
    960c:	mov	fp, sp
    9610:	sub	sp, sp, #16
    9614:	str	r0, [sp, #8]
    9618:	ldr	r0, [sp, #8]
    961c:	ldr	r0, [r0]
    9620:	ldr	r0, [r0, #12]
    9624:	bl	7f64 <decode_escaped_string>
    9628:	str	r0, [sp, #4]
    962c:	ldr	r0, [sp, #4]
    9630:	cmp	r0, #0
    9634:	bge	9654 <cd_raw_set_fixed_value+0x4c>
    9638:	ldr	r0, [pc, #112]	; 96b0 <cd_raw_set_fixed_value+0xa8>
    963c:	movw	r1, #0
    9640:	movt	r1, #0
    9644:	bl	0 <coda_set_error>
    9648:	mvn	r0, #0
    964c:	str	r0, [fp, #-4]
    9650:	b	96a4 <cd_raw_set_fixed_value+0x9c>
    9654:	ldr	r0, [sp, #4]
    9658:	cmp	r0, #0
    965c:	ble	969c <cd_raw_set_fixed_value+0x94>
    9660:	ldr	r0, [sp, #8]
    9664:	ldr	r0, [r0]
    9668:	ldr	r0, [r0, #396]	; 0x18c
    966c:	ldr	r0, [r0, #8]
    9670:	ldr	r1, [sp, #4]
    9674:	ldr	r2, [sp, #8]
    9678:	ldr	r2, [r2]
    967c:	ldr	r2, [r2, #12]
    9680:	bl	0 <coda_type_raw_set_fixed_value>
    9684:	cmp	r0, #0
    9688:	beq	9698 <cd_raw_set_fixed_value+0x90>
    968c:	mvn	r0, #0
    9690:	str	r0, [fp, #-4]
    9694:	b	96a4 <cd_raw_set_fixed_value+0x9c>
    9698:	b	969c <cd_raw_set_fixed_value+0x94>
    969c:	movw	r0, #0
    96a0:	str	r0, [fp, #-4]
    96a4:	ldr	r0, [fp, #-4]
    96a8:	mov	sp, fp
    96ac:	pop	{fp, pc}
    96b0:	.word	0xfffffe70

000096b4 <cd_raw_finalise>:
    96b4:	push	{fp, lr}
    96b8:	mov	fp, sp
    96bc:	sub	sp, sp, #8
    96c0:	str	r0, [sp, #4]
    96c4:	ldr	r0, [sp, #4]
    96c8:	ldr	r0, [r0]
    96cc:	ldr	r0, [r0, #8]
    96d0:	bl	0 <coda_type_raw_validate>
    96d4:	mov	sp, fp
    96d8:	pop	{fp, pc}

000096dc <integer_expression_init>:
    96dc:	sub	sp, sp, #8
    96e0:	movw	r2, #0
    96e4:	movt	r2, #0
    96e8:	str	r0, [sp, #4]
    96ec:	str	r1, [sp]
    96f0:	ldr	r0, [sp, #4]
    96f4:	ldr	r0, [r0]
    96f8:	movw	r1, #1
    96fc:	str	r1, [r0, #32]
    9700:	ldr	r0, [sp, #4]
    9704:	ldr	r0, [r0]
    9708:	str	r2, [r0, #40]	; 0x28
    970c:	ldr	r0, [sp, #4]
    9710:	ldr	r0, [r0]
    9714:	movw	r1, #0
    9718:	movt	r1, #0
    971c:	str	r1, [r0, #36]	; 0x24
    9720:	movw	r0, #0
    9724:	add	sp, sp, #8
    9728:	bx	lr

0000972c <cd_field_init>:
    972c:	push	{fp, lr}
    9730:	mov	fp, sp
    9734:	sub	sp, sp, #24
    9738:	str	r0, [fp, #-8]
    973c:	str	r1, [sp, #12]
    9740:	movw	r0, #0
    9744:	str	r0, [sp, #8]
    9748:	str	r0, [sp, #4]
    974c:	str	r0, [sp]
    9750:	ldr	r0, [sp, #12]
    9754:	movw	r1, #0
    9758:	movt	r1, #0
    975c:	bl	250c <get_attribute_value>
    9760:	str	r0, [sp, #8]
    9764:	ldr	r0, [sp, #8]
    9768:	movw	r1, #0
    976c:	cmp	r0, r1
    9770:	beq	9790 <cd_field_init+0x64>
    9774:	ldr	r0, [pc, #584]	; 99c4 <cd_field_init+0x298>
    9778:	movw	r1, #0
    977c:	movt	r1, #0
    9780:	bl	0 <coda_set_error>
    9784:	mvn	r0, #0
    9788:	str	r0, [fp, #-4]
    978c:	b	99b8 <cd_field_init+0x28c>
    9790:	ldr	r0, [fp, #-8]
    9794:	ldr	r0, [r0]
    9798:	ldr	r0, [r0, #396]	; 0x18c
    979c:	ldr	r0, [r0, #48]	; 0x30
    97a0:	cmp	r0, #0
    97a4:	beq	97ac <cd_field_init+0x80>
    97a8:	b	97cc <cd_field_init+0xa0>
    97ac:	movw	r0, #0
    97b0:	movt	r0, #0
    97b4:	movw	r1, #0
    97b8:	movt	r1, #0
    97bc:	movw	r2, #1685	; 0x695
    97c0:	movw	r3, #0
    97c4:	movt	r3, #0
    97c8:	bl	0 <__assert_fail>
    97cc:	ldr	r0, [fp, #-8]
    97d0:	ldr	r0, [r0]
    97d4:	ldr	r0, [r0, #396]	; 0x18c
    97d8:	ldr	r0, [r0, #44]	; 0x2c
    97dc:	ldr	r1, [fp, #-8]
    97e0:	ldr	r1, [r1]
    97e4:	str	r0, [r1, #44]	; 0x2c
    97e8:	ldr	r0, [fp, #-8]
    97ec:	ldr	r0, [r0]
    97f0:	movw	r1, #1
    97f4:	str	r1, [r0, #48]	; 0x30
    97f8:	ldr	r0, [sp, #12]
    97fc:	movw	r1, #0
    9800:	movt	r1, #0
    9804:	bl	250c <get_attribute_value>
    9808:	movw	r1, #0
    980c:	cmp	r0, r1
    9810:	beq	9830 <cd_field_init+0x104>
    9814:	ldr	r0, [pc, #424]	; 99c4 <cd_field_init+0x298>
    9818:	movw	r1, #0
    981c:	movt	r1, #0
    9820:	bl	0 <coda_set_error>
    9824:	mvn	r0, #0
    9828:	str	r0, [fp, #-4]
    982c:	b	99b8 <cd_field_init+0x28c>
    9830:	ldr	r0, [sp, #12]
    9834:	ldr	r1, [fp, #-8]
    9838:	ldr	r1, [r1]
    983c:	ldr	r2, [r1]
    9840:	movw	r1, #0
    9844:	movt	r1, #0
    9848:	bl	20fc <get_mandatory_attribute_value>
    984c:	str	r0, [sp, #4]
    9850:	ldr	r0, [sp, #4]
    9854:	movw	r1, #0
    9858:	cmp	r0, r1
    985c:	bne	986c <cd_field_init+0x140>
    9860:	mvn	r0, #0
    9864:	str	r0, [fp, #-4]
    9868:	b	99b8 <cd_field_init+0x28c>
    986c:	movw	r0, #0
    9870:	movt	r0, #0
    9874:	ldr	r1, [fp, #-8]
    9878:	ldr	r1, [r1]
    987c:	str	r0, [r1, #40]	; 0x28
    9880:	ldr	r0, [sp, #4]
    9884:	bl	0 <coda_type_record_field_new>
    9888:	ldr	r1, [fp, #-8]
    988c:	ldr	r1, [r1]
    9890:	str	r0, [r1, #8]
    9894:	ldr	r0, [fp, #-8]
    9898:	ldr	r0, [r0]
    989c:	ldr	r0, [r0, #8]
    98a0:	movw	r1, #0
    98a4:	cmp	r0, r1
    98a8:	bne	98b8 <cd_field_init+0x18c>
    98ac:	mvn	r0, #0
    98b0:	str	r0, [fp, #-4]
    98b4:	b	99b8 <cd_field_init+0x28c>
    98b8:	ldr	r0, [sp, #12]
    98bc:	movw	r1, #0
    98c0:	movt	r1, #0
    98c4:	bl	250c <get_attribute_value>
    98c8:	str	r0, [sp]
    98cc:	ldr	r0, [sp]
    98d0:	movw	r1, #0
    98d4:	cmp	r0, r1
    98d8:	beq	9908 <cd_field_init+0x1dc>
    98dc:	ldr	r0, [fp, #-8]
    98e0:	ldr	r0, [r0]
    98e4:	ldr	r0, [r0, #8]
    98e8:	ldr	r1, [sp]
    98ec:	bl	0 <coda_type_record_field_set_real_name>
    98f0:	cmp	r0, #0
    98f4:	beq	9904 <cd_field_init+0x1d8>
    98f8:	mvn	r0, #0
    98fc:	str	r0, [fp, #-4]
    9900:	b	99b8 <cd_field_init+0x28c>
    9904:	b	9908 <cd_field_init+0x1dc>
    9908:	ldr	r0, [fp, #-8]
    990c:	ldr	r0, [r0]
    9910:	movw	r1, #0
    9914:	movt	r1, #0
    9918:	bl	1698 <register_type_elements>
    991c:	ldr	r0, [fp, #-8]
    9920:	ldr	r0, [r0]
    9924:	movw	r1, #18
    9928:	movw	r2, #0
    992c:	movt	r2, #0
    9930:	movw	r3, #0
    9934:	movt	r3, #0
    9938:	bl	1358 <register_sub_element>
    993c:	ldr	r0, [fp, #-8]
    9940:	ldr	r0, [r0]
    9944:	movw	r1, #29
    9948:	movw	r2, #0
    994c:	movt	r2, #0
    9950:	movw	r3, #0
    9954:	movt	r3, #0
    9958:	bl	1358 <register_sub_element>
    995c:	ldr	r0, [fp, #-8]
    9960:	ldr	r0, [r0]
    9964:	movw	r1, #5
    9968:	movw	r2, #0
    996c:	movt	r2, #0
    9970:	movw	r3, #0
    9974:	movt	r3, #0
    9978:	bl	1358 <register_sub_element>
    997c:	ldr	r0, [fp, #-8]
    9980:	ldr	r0, [r0]
    9984:	movw	r1, #6
    9988:	movw	r2, #0
    998c:	movt	r2, #0
    9990:	movw	r3, #0
    9994:	movt	r3, #0
    9998:	bl	1358 <register_sub_element>
    999c:	ldr	r0, [fp, #-8]
    99a0:	ldr	r0, [r0]
    99a4:	movw	r1, #0
    99a8:	movt	r1, #0
    99ac:	str	r1, [r0, #36]	; 0x24
    99b0:	movw	r0, #0
    99b4:	str	r0, [fp, #-4]
    99b8:	ldr	r0, [fp, #-4]
    99bc:	mov	sp, fp
    99c0:	pop	{fp, pc}
    99c4:	.word	0xfffffe70

000099c8 <cd_record_add_field>:
    99c8:	push	{fp, lr}
    99cc:	mov	fp, sp
    99d0:	sub	sp, sp, #8
    99d4:	str	r0, [sp]
    99d8:	ldr	r0, [sp]
    99dc:	ldr	r0, [r0]
    99e0:	ldr	r0, [r0, #396]	; 0x18c
    99e4:	ldr	r0, [r0, #8]
    99e8:	ldr	r1, [sp]
    99ec:	ldr	r1, [r1]
    99f0:	ldr	r1, [r1, #8]
    99f4:	bl	0 <coda_type_record_add_field>
    99f8:	cmp	r0, #0
    99fc:	beq	9a0c <cd_record_add_field+0x44>
    9a00:	mvn	r0, #0
    9a04:	str	r0, [sp, #4]
    9a08:	b	9a20 <cd_record_add_field+0x58>
    9a0c:	ldr	r0, [sp]
    9a10:	ldr	r0, [r0]
    9a14:	movw	r1, #0
    9a18:	str	r1, [r0, #8]
    9a1c:	str	r1, [sp, #4]
    9a20:	ldr	r0, [sp, #4]
    9a24:	mov	sp, fp
    9a28:	pop	{fp, pc}

00009a2c <cd_record_finalise>:
    9a2c:	push	{fp, lr}
    9a30:	mov	fp, sp
    9a34:	sub	sp, sp, #8
    9a38:	str	r0, [sp, #4]
    9a3c:	ldr	r0, [sp, #4]
    9a40:	ldr	r0, [r0]
    9a44:	ldr	r0, [r0, #8]
    9a48:	bl	0 <coda_type_record_validate>
    9a4c:	mov	sp, fp
    9a50:	pop	{fp, pc}

00009a54 <handle_xml_name>:
    9a54:	push	{fp, lr}
    9a58:	mov	fp, sp
    9a5c:	sub	sp, sp, #24
    9a60:	str	r0, [fp, #-8]
    9a64:	str	r1, [sp, #12]
    9a68:	ldr	r0, [fp, #-8]
    9a6c:	ldr	r0, [r0]
    9a70:	ldr	r0, [r0, #48]	; 0x30
    9a74:	cmp	r0, #0
    9a78:	beq	9a80 <handle_xml_name+0x2c>
    9a7c:	b	9aa0 <handle_xml_name+0x4c>
    9a80:	movw	r0, #0
    9a84:	movt	r0, #0
    9a88:	movw	r1, #0
    9a8c:	movt	r1, #0
    9a90:	movw	r2, #676	; 0x2a4
    9a94:	movw	r3, #0
    9a98:	movt	r3, #0
    9a9c:	bl	0 <__assert_fail>
    9aa0:	ldr	r0, [fp, #-8]
    9aa4:	ldr	r0, [r0]
    9aa8:	ldr	r0, [r0, #44]	; 0x2c
    9aac:	cmp	r0, #2
    9ab0:	beq	9ac0 <handle_xml_name+0x6c>
    9ab4:	movw	r0, #0
    9ab8:	str	r0, [fp, #-4]
    9abc:	b	9b94 <handle_xml_name+0x140>
    9ac0:	ldr	r0, [fp, #-8]
    9ac4:	ldr	r0, [r0]
    9ac8:	ldr	r0, [r0, #396]	; 0x18c
    9acc:	str	r0, [sp, #4]
    9ad0:	ldr	r0, [sp, #4]
    9ad4:	ldr	r0, [r0]
    9ad8:	cmp	r0, #14
    9adc:	beq	9b0c <handle_xml_name+0xb8>
    9ae0:	ldr	r0, [sp, #4]
    9ae4:	ldr	r0, [r0]
    9ae8:	cmn	r0, #1
    9aec:	bne	9afc <handle_xml_name+0xa8>
    9af0:	movw	r0, #0
    9af4:	str	r0, [fp, #-4]
    9af8:	b	9b94 <handle_xml_name+0x140>
    9afc:	ldr	r0, [sp, #4]
    9b00:	ldr	r0, [r0, #396]	; 0x18c
    9b04:	str	r0, [sp, #4]
    9b08:	b	9ad0 <handle_xml_name+0x7c>
    9b0c:	ldr	r0, [sp, #12]
    9b10:	movw	r1, #0
    9b14:	movt	r1, #0
    9b18:	bl	250c <get_attribute_value>
    9b1c:	str	r0, [sp, #8]
    9b20:	ldr	r0, [sp, #8]
    9b24:	movw	r1, #0
    9b28:	cmp	r0, r1
    9b2c:	beq	9b8c <handle_xml_name+0x138>
    9b30:	ldr	r0, [sp, #4]
    9b34:	ldr	r0, [r0, #8]
    9b38:	ldr	r0, [r0, #4]
    9b3c:	movw	r1, #0
    9b40:	cmp	r0, r1
    9b44:	beq	9b64 <handle_xml_name+0x110>
    9b48:	ldr	r0, [pc, #80]	; 9ba0 <handle_xml_name+0x14c>
    9b4c:	movw	r1, #0
    9b50:	movt	r1, #0
    9b54:	bl	0 <coda_set_error>
    9b58:	mvn	r0, #0
    9b5c:	str	r0, [fp, #-4]
    9b60:	b	9b94 <handle_xml_name+0x140>
    9b64:	ldr	r0, [sp, #4]
    9b68:	ldr	r0, [r0, #8]
    9b6c:	ldr	r1, [sp, #8]
    9b70:	bl	0 <coda_type_record_field_set_real_name>
    9b74:	cmp	r0, #0
    9b78:	beq	9b88 <handle_xml_name+0x134>
    9b7c:	mvn	r0, #0
    9b80:	str	r0, [fp, #-4]
    9b84:	b	9b94 <handle_xml_name+0x140>
    9b88:	b	9b8c <handle_xml_name+0x138>
    9b8c:	movw	r0, #0
    9b90:	str	r0, [fp, #-4]
    9b94:	ldr	r0, [fp, #-4]
    9b98:	mov	sp, fp
    9b9c:	pop	{fp, pc}
    9ba0:	.word	0xfffffe70

00009ba4 <integer_expression_finalise>:
    9ba4:	push	{fp, lr}
    9ba8:	mov	fp, sp
    9bac:	sub	sp, sp, #24
    9bb0:	str	r0, [fp, #-8]
    9bb4:	ldr	r0, [fp, #-8]
    9bb8:	ldr	r0, [r0]
    9bbc:	ldr	r0, [r0, #12]
    9bc0:	movw	r1, #0
    9bc4:	cmp	r0, r1
    9bc8:	beq	9c30 <integer_expression_finalise+0x8c>
    9bcc:	ldr	r0, [fp, #-8]
    9bd0:	ldr	r0, [r0]
    9bd4:	ldr	r0, [r0, #12]
    9bd8:	ldr	r1, [fp, #-8]
    9bdc:	ldr	r1, [r1]
    9be0:	ldr	r1, [r1, #12]
    9be4:	str	r0, [sp, #4]
    9be8:	mov	r0, r1
    9bec:	bl	0 <strlen>
    9bf0:	ldr	r1, [sp, #4]
    9bf4:	str	r0, [sp]
    9bf8:	mov	r0, r1
    9bfc:	ldr	r1, [sp]
    9c00:	bl	2008 <is_whitespace>
    9c04:	cmp	r0, #0
    9c08:	beq	9c2c <integer_expression_finalise+0x88>
    9c0c:	ldr	r0, [fp, #-8]
    9c10:	ldr	r0, [r0]
    9c14:	ldr	r0, [r0, #12]
    9c18:	bl	0 <free>
    9c1c:	ldr	r0, [fp, #-8]
    9c20:	ldr	r0, [r0]
    9c24:	movw	lr, #0
    9c28:	str	lr, [r0, #12]
    9c2c:	b	9c30 <integer_expression_finalise+0x8c>
    9c30:	ldr	r0, [fp, #-8]
    9c34:	ldr	r0, [r0]
    9c38:	ldr	r0, [r0, #12]
    9c3c:	movw	r1, #0
    9c40:	cmp	r0, r1
    9c44:	bne	9c64 <integer_expression_finalise+0xc0>
    9c48:	ldr	r0, [pc, #200]	; 9d18 <integer_expression_finalise+0x174>
    9c4c:	movw	r1, #0
    9c50:	movt	r1, #0
    9c54:	bl	0 <coda_set_error>
    9c58:	mvn	r0, #0
    9c5c:	str	r0, [fp, #-4]
    9c60:	b	9d0c <integer_expression_finalise+0x168>
    9c64:	ldr	r0, [fp, #-8]
    9c68:	ldr	r0, [r0]
    9c6c:	ldr	r0, [r0, #12]
    9c70:	add	r1, sp, #8
    9c74:	bl	0 <coda_expression_from_string>
    9c78:	cmp	r0, #0
    9c7c:	beq	9c8c <integer_expression_finalise+0xe8>
    9c80:	mvn	r0, #0
    9c84:	str	r0, [fp, #-4]
    9c88:	b	9d0c <integer_expression_finalise+0x168>
    9c8c:	ldr	r0, [fp, #-8]
    9c90:	ldr	r0, [r0]
    9c94:	ldr	r0, [r0, #12]
    9c98:	bl	0 <free>
    9c9c:	ldr	r0, [fp, #-8]
    9ca0:	ldr	r0, [r0]
    9ca4:	movw	lr, #0
    9ca8:	str	lr, [r0, #12]
    9cac:	ldr	r0, [sp, #8]
    9cb0:	ldr	lr, [fp, #-8]
    9cb4:	ldr	lr, [lr]
    9cb8:	str	r0, [lr, #8]
    9cbc:	ldr	r0, [sp, #8]
    9cc0:	add	r1, sp, #12
    9cc4:	bl	0 <coda_expression_get_type>
    9cc8:	cmp	r0, #0
    9ccc:	beq	9cdc <integer_expression_finalise+0x138>
    9cd0:	mvn	r0, #0
    9cd4:	str	r0, [fp, #-4]
    9cd8:	b	9d0c <integer_expression_finalise+0x168>
    9cdc:	ldr	r0, [sp, #12]
    9ce0:	cmp	r0, #1
    9ce4:	beq	9d04 <integer_expression_finalise+0x160>
    9ce8:	ldr	r0, [pc, #40]	; 9d18 <integer_expression_finalise+0x174>
    9cec:	movw	r1, #0
    9cf0:	movt	r1, #0
    9cf4:	bl	0 <coda_set_error>
    9cf8:	mvn	r0, #0
    9cfc:	str	r0, [fp, #-4]
    9d00:	b	9d0c <integer_expression_finalise+0x168>
    9d04:	movw	r0, #0
    9d08:	str	r0, [fp, #-4]
    9d0c:	ldr	r0, [fp, #-4]
    9d10:	mov	sp, fp
    9d14:	pop	{fp, pc}
    9d18:	.word	0xfffffe70

00009d1c <cd_field_set_bit_offset>:
    9d1c:	push	{fp, lr}
    9d20:	mov	fp, sp
    9d24:	sub	sp, sp, #8
    9d28:	str	r0, [sp]
    9d2c:	ldr	r0, [sp]
    9d30:	ldr	r0, [r0]
    9d34:	ldr	r0, [r0, #396]	; 0x18c
    9d38:	ldr	r0, [r0, #8]
    9d3c:	ldr	r1, [sp]
    9d40:	ldr	r1, [r1]
    9d44:	ldr	r1, [r1, #8]
    9d48:	bl	0 <coda_type_record_field_set_bit_offset_expression>
    9d4c:	cmp	r0, #0
    9d50:	beq	9d60 <cd_field_set_bit_offset+0x44>
    9d54:	mvn	r0, #0
    9d58:	str	r0, [sp, #4]
    9d5c:	b	9d74 <cd_field_set_bit_offset+0x58>
    9d60:	ldr	r0, [sp]
    9d64:	ldr	r0, [r0]
    9d68:	movw	r1, #0
    9d6c:	str	r1, [r0, #8]
    9d70:	str	r1, [sp, #4]
    9d74:	ldr	r0, [sp, #4]
    9d78:	mov	sp, fp
    9d7c:	pop	{fp, pc}

00009d80 <cd_field_finalise>:
    9d80:	push	{fp, lr}
    9d84:	mov	fp, sp
    9d88:	sub	sp, sp, #8
    9d8c:	str	r0, [sp, #4]
    9d90:	ldr	r0, [sp, #4]
    9d94:	ldr	r0, [r0]
    9d98:	ldr	r0, [r0, #8]
    9d9c:	bl	0 <coda_type_record_field_validate>
    9da0:	mov	sp, fp
    9da4:	pop	{fp, pc}

00009da8 <cd_text_set_fixed_value>:
    9da8:	push	{fp, lr}
    9dac:	mov	fp, sp
    9db0:	sub	sp, sp, #8
    9db4:	str	r0, [sp]
    9db8:	ldr	r0, [sp]
    9dbc:	ldr	r0, [r0]
    9dc0:	ldr	r0, [r0, #12]
    9dc4:	bl	7f64 <decode_escaped_string>
    9dc8:	cmp	r0, #0
    9dcc:	bge	9dec <cd_text_set_fixed_value+0x44>
    9dd0:	ldr	r0, [pc, #68]	; 9e1c <cd_text_set_fixed_value+0x74>
    9dd4:	movw	r1, #0
    9dd8:	movt	r1, #0
    9ddc:	bl	0 <coda_set_error>
    9de0:	mvn	r0, #0
    9de4:	str	r0, [sp, #4]
    9de8:	b	9e10 <cd_text_set_fixed_value+0x68>
    9dec:	ldr	r0, [sp]
    9df0:	ldr	r0, [r0]
    9df4:	ldr	r0, [r0, #396]	; 0x18c
    9df8:	ldr	r0, [r0, #8]
    9dfc:	ldr	r1, [sp]
    9e00:	ldr	r1, [r1]
    9e04:	ldr	r1, [r1, #12]
    9e08:	bl	0 <coda_type_text_set_fixed_value>
    9e0c:	str	r0, [sp, #4]
    9e10:	ldr	r0, [sp, #4]
    9e14:	mov	sp, fp
    9e18:	pop	{fp, pc}
    9e1c:	.word	0xfffffe70

00009e20 <cd_text_set_read_type>:
    9e20:	push	{fp, lr}
    9e24:	mov	fp, sp
    9e28:	sub	sp, sp, #8
    9e2c:	str	r0, [sp, #4]
    9e30:	ldr	r0, [sp, #4]
    9e34:	ldr	r0, [r0]
    9e38:	ldr	r1, [r0, #16]
    9e3c:	ldr	r0, [r0, #396]	; 0x18c
    9e40:	ldr	r0, [r0, #8]
    9e44:	bl	0 <coda_type_set_read_type>
    9e48:	mov	sp, fp
    9e4c:	pop	{fp, pc}

00009e50 <cd_text_finalise>:
    9e50:	push	{fp, lr}
    9e54:	mov	fp, sp
    9e58:	sub	sp, sp, #8
    9e5c:	str	r0, [sp, #4]
    9e60:	ldr	r0, [sp, #4]
    9e64:	ldr	r0, [r0]
    9e68:	ldr	r0, [r0, #8]
    9e6c:	bl	0 <coda_type_text_validate>
    9e70:	mov	sp, fp
    9e74:	pop	{fp, pc}

00009e78 <cd_time_set_type>:
    9e78:	push	{fp, lr}
    9e7c:	mov	fp, sp
    9e80:	sub	sp, sp, #8
    9e84:	str	r0, [sp, #4]
    9e88:	ldr	r0, [sp, #4]
    9e8c:	ldr	r0, [r0]
    9e90:	ldr	r0, [r0, #396]	; 0x18c
    9e94:	ldr	r0, [r0, #8]
    9e98:	ldr	r1, [sp, #4]
    9e9c:	ldr	r1, [r1]
    9ea0:	ldr	r1, [r1, #8]
    9ea4:	bl	0 <coda_type_time_set_base_type>
    9ea8:	mov	sp, fp
    9eac:	pop	{fp, pc}

00009eb0 <cd_time_add_mapping>:
    9eb0:	push	{fp, lr}
    9eb4:	mov	fp, sp
    9eb8:	sub	sp, sp, #8
    9ebc:	str	r0, [sp]
    9ec0:	ldr	r0, [sp]
    9ec4:	ldr	r0, [r0]
    9ec8:	ldr	r0, [r0, #396]	; 0x18c
    9ecc:	ldr	r0, [r0, #8]
    9ed0:	ldr	r1, [sp]
    9ed4:	ldr	r1, [r1]
    9ed8:	ldr	r1, [r1, #8]
    9edc:	bl	0 <coda_type_time_add_ascii_float_mapping>
    9ee0:	cmp	r0, #0
    9ee4:	beq	9ef4 <cd_time_add_mapping+0x44>
    9ee8:	mvn	r0, #0
    9eec:	str	r0, [sp, #4]
    9ef0:	b	9f08 <cd_time_add_mapping+0x58>
    9ef4:	ldr	r0, [sp]
    9ef8:	ldr	r0, [r0]
    9efc:	movw	r1, #0
    9f00:	str	r1, [r0, #8]
    9f04:	str	r1, [sp, #4]
    9f08:	ldr	r0, [sp, #4]
    9f0c:	mov	sp, fp
    9f10:	pop	{fp, pc}

00009f14 <cd_time_finalise>:
    9f14:	push	{fp, lr}
    9f18:	mov	fp, sp
    9f1c:	sub	sp, sp, #8
    9f20:	str	r0, [sp, #4]
    9f24:	ldr	r0, [sp, #4]
    9f28:	ldr	r0, [r0]
    9f2c:	ldr	r0, [r0, #8]
    9f30:	bl	0 <coda_type_time_validate>
    9f34:	mov	sp, fp
    9f38:	pop	{fp, pc}

00009f3c <cd_type_set_type>:
    9f3c:	push	{fp, lr}
    9f40:	mov	fp, sp
    9f44:	sub	sp, sp, #16
    9f48:	str	r0, [fp, #-4]
    9f4c:	ldr	r0, [fp, #-4]
    9f50:	ldr	r0, [r0]
    9f54:	ldr	r0, [r0, #396]	; 0x18c
    9f58:	ldr	r0, [r0, #8]
    9f5c:	str	r0, [sp, #8]
    9f60:	ldr	r0, [sp, #8]
    9f64:	ldr	r0, [r0, #20]
    9f68:	movw	r1, #0
    9f6c:	cmp	r0, r1
    9f70:	beq	9f90 <cd_type_set_type+0x54>
    9f74:	ldr	r0, [fp, #-4]
    9f78:	ldr	r0, [r0]
    9f7c:	ldr	r0, [r0, #8]
    9f80:	ldr	r1, [sp, #8]
    9f84:	ldr	r1, [r1, #20]
    9f88:	bl	0 <coda_type_set_description>
    9f8c:	str	r0, [sp, #4]
    9f90:	ldr	r0, [sp, #8]
    9f94:	ldr	r0, [r0, #36]	; 0x24
    9f98:	movw	r1, #0
    9f9c:	cmp	r0, r1
    9fa0:	beq	a028 <cd_type_set_type+0xec>
    9fa4:	ldr	r0, [fp, #-4]
    9fa8:	ldr	r0, [r0]
    9fac:	ldr	r0, [r0, #8]
    9fb0:	ldr	r0, [r0, #36]	; 0x24
    9fb4:	movw	r1, #0
    9fb8:	cmp	r0, r1
    9fbc:	bne	9fc4 <cd_type_set_type+0x88>
    9fc0:	b	9fe4 <cd_type_set_type+0xa8>
    9fc4:	movw	r0, #0
    9fc8:	movt	r0, #0
    9fcc:	movw	r1, #0
    9fd0:	movt	r1, #0
    9fd4:	movw	r2, #3653	; 0xe45
    9fd8:	movw	r3, #0
    9fdc:	movt	r3, #0
    9fe0:	bl	0 <__assert_fail>
    9fe4:	ldr	r0, [sp, #8]
    9fe8:	ldr	r0, [r0, #36]	; 0x24
    9fec:	ldr	r1, [fp, #-4]
    9ff0:	ldr	r1, [r1]
    9ff4:	ldr	r1, [r1, #8]
    9ff8:	str	r0, [r1, #36]	; 0x24
    9ffc:	ldr	r0, [sp, #8]
    a000:	ldr	r0, [r0, #36]	; 0x24
    a004:	ldr	r1, [fp, #-4]
    a008:	ldr	r1, [r1]
    a00c:	ldr	r1, [r1, #8]
    a010:	ldr	r1, [r1]
    a014:	bl	a068 <type_set_format>
    a018:	ldr	r1, [sp, #8]
    a01c:	movw	lr, #0
    a020:	str	lr, [r1, #36]	; 0x24
    a024:	str	r0, [sp]
    a028:	ldr	r0, [sp, #8]
    a02c:	bl	0 <coda_type_release>
    a030:	ldr	r0, [fp, #-4]
    a034:	ldr	r0, [r0]
    a038:	ldr	r0, [r0, #8]
    a03c:	ldr	lr, [fp, #-4]
    a040:	ldr	lr, [lr]
    a044:	ldr	lr, [lr, #396]	; 0x18c
    a048:	str	r0, [lr, #8]
    a04c:	ldr	r0, [fp, #-4]
    a050:	ldr	r0, [r0]
    a054:	movw	lr, #0
    a058:	str	lr, [r0, #8]
    a05c:	mov	r0, lr
    a060:	mov	sp, fp
    a064:	pop	{fp, pc}

0000a068 <type_set_format>:
    a068:	push	{fp, lr}
    a06c:	mov	fp, sp
    a070:	sub	sp, sp, #40	; 0x28
    a074:	str	r0, [fp, #-4]
    a078:	str	r1, [fp, #-8]
    a07c:	ldr	r0, [fp, #-8]
    a080:	ldr	r1, [fp, #-4]
    a084:	str	r0, [r1]
    a088:	ldr	r0, [fp, #-4]
    a08c:	ldr	r0, [r0, #8]
    a090:	cmp	r0, #0
    a094:	str	r0, [sp, #20]
    a098:	beq	a0c0 <type_set_format+0x58>
    a09c:	b	a0a0 <type_set_format+0x38>
    a0a0:	ldr	r0, [sp, #20]
    a0a4:	cmp	r0, #1
    a0a8:	beq	a120 <type_set_format+0xb8>
    a0ac:	b	a0b0 <type_set_format+0x48>
    a0b0:	ldr	r0, [sp, #20]
    a0b4:	cmp	r0, #6
    a0b8:	beq	a138 <type_set_format+0xd0>
    a0bc:	b	a150 <type_set_format+0xe8>
    a0c0:	ldr	r0, [fp, #-4]
    a0c4:	sub	r1, fp, #12
    a0c8:	bl	0 <coda_type_get_num_record_fields>
    a0cc:	movw	r1, #0
    a0d0:	str	r1, [fp, #-16]
    a0d4:	str	r0, [sp, #16]
    a0d8:	ldr	r0, [fp, #-16]
    a0dc:	ldr	r1, [fp, #-12]
    a0e0:	cmp	r0, r1
    a0e4:	bge	a11c <type_set_format+0xb4>
    a0e8:	ldr	r0, [fp, #-4]
    a0ec:	ldr	r0, [r0, #52]	; 0x34
    a0f0:	ldr	r1, [fp, #-16]
    a0f4:	add	r0, r0, r1, lsl #2
    a0f8:	ldr	r0, [r0]
    a0fc:	ldr	r0, [r0, #8]
    a100:	ldr	r1, [fp, #-8]
    a104:	bl	a068 <type_set_format>
    a108:	str	r0, [sp, #12]
    a10c:	ldr	r0, [fp, #-16]
    a110:	add	r0, r0, #1
    a114:	str	r0, [fp, #-16]
    a118:	b	a0d8 <type_set_format+0x70>
    a11c:	b	a154 <type_set_format+0xec>
    a120:	ldr	r0, [fp, #-4]
    a124:	ldr	r0, [r0, #40]	; 0x28
    a128:	ldr	r1, [fp, #-8]
    a12c:	bl	a068 <type_set_format>
    a130:	str	r0, [sp, #8]
    a134:	b	a154 <type_set_format+0xec>
    a138:	ldr	r0, [fp, #-4]
    a13c:	ldr	r0, [r0, #44]	; 0x2c
    a140:	ldr	r1, [fp, #-8]
    a144:	bl	a068 <type_set_format>
    a148:	str	r0, [sp, #4]
    a14c:	b	a154 <type_set_format+0xec>
    a150:	b	a154 <type_set_format+0xec>
    a154:	ldr	r0, [fp, #-4]
    a158:	ldr	r0, [r0, #36]	; 0x24
    a15c:	movw	r1, #0
    a160:	cmp	r0, r1
    a164:	beq	a17c <type_set_format+0x114>
    a168:	ldr	r0, [fp, #-4]
    a16c:	ldr	r0, [r0, #36]	; 0x24
    a170:	ldr	r1, [fp, #-8]
    a174:	bl	a068 <type_set_format>
    a178:	str	r0, [sp]
    a17c:	movw	r0, #0
    a180:	mov	sp, fp
    a184:	pop	{fp, pc}

0000a188 <cd_union_set_field_expression>:
    a188:	push	{fp, lr}
    a18c:	mov	fp, sp
    a190:	sub	sp, sp, #8
    a194:	str	r0, [sp]
    a198:	ldr	r0, [sp]
    a19c:	ldr	r0, [r0]
    a1a0:	ldr	r0, [r0, #396]	; 0x18c
    a1a4:	ldr	r0, [r0, #8]
    a1a8:	ldr	r1, [sp]
    a1ac:	ldr	r1, [r1]
    a1b0:	ldr	r1, [r1, #8]
    a1b4:	bl	0 <coda_type_union_set_field_expression>
    a1b8:	cmp	r0, #0
    a1bc:	beq	a1cc <cd_union_set_field_expression+0x44>
    a1c0:	mvn	r0, #0
    a1c4:	str	r0, [sp, #4]
    a1c8:	b	a1e0 <cd_union_set_field_expression+0x58>
    a1cc:	ldr	r0, [sp]
    a1d0:	ldr	r0, [r0]
    a1d4:	movw	r1, #0
    a1d8:	str	r1, [r0, #8]
    a1dc:	str	r1, [sp, #4]
    a1e0:	ldr	r0, [sp, #4]
    a1e4:	mov	sp, fp
    a1e8:	pop	{fp, pc}

0000a1ec <cd_union_add_field>:
    a1ec:	push	{fp, lr}
    a1f0:	mov	fp, sp
    a1f4:	sub	sp, sp, #16
    a1f8:	str	r0, [sp, #8]
    a1fc:	ldr	r0, [sp, #8]
    a200:	ldr	r0, [r0]
    a204:	ldr	r0, [r0, #8]
    a208:	bl	0 <coda_type_record_field_set_optional>
    a20c:	ldr	lr, [sp, #8]
    a210:	ldr	lr, [lr]
    a214:	ldr	lr, [lr, #396]	; 0x18c
    a218:	ldr	lr, [lr, #8]
    a21c:	ldr	r1, [sp, #8]
    a220:	ldr	r1, [r1]
    a224:	ldr	r1, [r1, #8]
    a228:	str	r0, [sp, #4]
    a22c:	mov	r0, lr
    a230:	bl	0 <coda_type_record_add_field>
    a234:	cmp	r0, #0
    a238:	beq	a248 <cd_union_add_field+0x5c>
    a23c:	mvn	r0, #0
    a240:	str	r0, [fp, #-4]
    a244:	b	a25c <cd_union_add_field+0x70>
    a248:	ldr	r0, [sp, #8]
    a24c:	ldr	r0, [r0]
    a250:	movw	r1, #0
    a254:	str	r1, [r0, #8]
    a258:	str	r1, [fp, #-4]
    a25c:	ldr	r0, [fp, #-4]
    a260:	mov	sp, fp
    a264:	pop	{fp, pc}

0000a268 <cd_union_finalise>:
    a268:	push	{fp, lr}
    a26c:	mov	fp, sp
    a270:	sub	sp, sp, #8
    a274:	str	r0, [sp, #4]
    a278:	ldr	r0, [sp, #4]
    a27c:	ldr	r0, [r0]
    a280:	ldr	r0, [r0, #8]
    a284:	bl	0 <coda_type_record_validate>
    a288:	mov	sp, fp
    a28c:	pop	{fp, pc}

0000a290 <cd_vsf_integer_set_type>:
    a290:	push	{fp, lr}
    a294:	mov	fp, sp
    a298:	sub	sp, sp, #8
    a29c:	str	r0, [sp, #4]
    a2a0:	ldr	r0, [sp, #4]
    a2a4:	ldr	r0, [r0]
    a2a8:	ldr	r0, [r0, #396]	; 0x18c
    a2ac:	ldr	r0, [r0, #8]
    a2b0:	ldr	r1, [sp, #4]
    a2b4:	ldr	r1, [r1]
    a2b8:	ldr	r1, [r1, #8]
    a2bc:	bl	0 <coda_type_vsf_integer_set_type>
    a2c0:	mov	sp, fp
    a2c4:	pop	{fp, pc}

0000a2c8 <cd_scale_factor_init>:
    a2c8:	push	{fp, lr}
    a2cc:	mov	fp, sp
    a2d0:	sub	sp, sp, #16
    a2d4:	str	r0, [sp, #8]
    a2d8:	str	r1, [sp, #4]
    a2dc:	ldr	r0, [sp, #4]
    a2e0:	movw	r1, #0
    a2e4:	movt	r1, #0
    a2e8:	bl	250c <get_attribute_value>
    a2ec:	movw	r1, #0
    a2f0:	cmp	r0, r1
    a2f4:	beq	a314 <cd_scale_factor_init+0x4c>
    a2f8:	ldr	r0, [pc, #348]	; a45c <cd_scale_factor_init+0x194>
    a2fc:	movw	r1, #0
    a300:	movt	r1, #0
    a304:	bl	0 <coda_set_error>
    a308:	mvn	r0, #0
    a30c:	str	r0, [fp, #-4]
    a310:	b	a450 <cd_scale_factor_init+0x188>
    a314:	ldr	r0, [sp, #8]
    a318:	ldr	r0, [r0]
    a31c:	ldr	r0, [r0, #396]	; 0x18c
    a320:	ldr	r0, [r0, #48]	; 0x30
    a324:	cmp	r0, #0
    a328:	beq	a330 <cd_scale_factor_init+0x68>
    a32c:	b	a350 <cd_scale_factor_init+0x88>
    a330:	movw	r0, #0
    a334:	movt	r0, #0
    a338:	movw	r1, #0
    a33c:	movt	r1, #0
    a340:	movw	r2, #3242	; 0xcaa
    a344:	movw	r3, #0
    a348:	movt	r3, #0
    a34c:	bl	0 <__assert_fail>
    a350:	ldr	r0, [sp, #8]
    a354:	ldr	r0, [r0]
    a358:	ldr	r0, [r0, #396]	; 0x18c
    a35c:	ldr	r0, [r0, #44]	; 0x2c
    a360:	ldr	r1, [sp, #8]
    a364:	ldr	r1, [r1]
    a368:	str	r0, [r1, #44]	; 0x2c
    a36c:	ldr	r0, [sp, #8]
    a370:	ldr	r0, [r0]
    a374:	movw	r1, #1
    a378:	str	r1, [r0, #48]	; 0x30
    a37c:	ldr	r0, [sp, #4]
    a380:	movw	r1, #0
    a384:	movt	r1, #0
    a388:	bl	250c <get_attribute_value>
    a38c:	movw	r1, #0
    a390:	cmp	r0, r1
    a394:	beq	a3b4 <cd_scale_factor_init+0xec>
    a398:	ldr	r0, [pc, #188]	; a45c <cd_scale_factor_init+0x194>
    a39c:	movw	r1, #0
    a3a0:	movt	r1, #0
    a3a4:	bl	0 <coda_set_error>
    a3a8:	mvn	r0, #0
    a3ac:	str	r0, [fp, #-4]
    a3b0:	b	a450 <cd_scale_factor_init+0x188>
    a3b4:	ldr	r0, [sp, #4]
    a3b8:	movw	r1, #0
    a3bc:	movt	r1, #0
    a3c0:	bl	250c <get_attribute_value>
    a3c4:	movw	r1, #0
    a3c8:	cmp	r0, r1
    a3cc:	beq	a3ec <cd_scale_factor_init+0x124>
    a3d0:	ldr	r0, [pc, #132]	; a45c <cd_scale_factor_init+0x194>
    a3d4:	movw	r1, #0
    a3d8:	movt	r1, #0
    a3dc:	bl	0 <coda_set_error>
    a3e0:	mvn	r0, #0
    a3e4:	str	r0, [fp, #-4]
    a3e8:	b	a450 <cd_scale_factor_init+0x188>
    a3ec:	movw	r0, #0
    a3f0:	movt	r0, #0
    a3f4:	ldr	r1, [sp, #8]
    a3f8:	ldr	r1, [r1]
    a3fc:	str	r0, [r1, #40]	; 0x28
    a400:	ldr	r0, [sp, #8]
    a404:	ldr	r0, [r0]
    a408:	movw	r1, #0
    a40c:	movt	r1, #0
    a410:	bl	1698 <register_type_elements>
    a414:	ldr	r0, [sp, #8]
    a418:	ldr	r0, [r0]
    a41c:	movw	r1, #0
    a420:	movt	r1, #0
    a424:	str	r1, [r0, #36]	; 0x24
    a428:	ldr	r0, [sp, #8]
    a42c:	ldr	r0, [r0]
    a430:	movw	r1, #11
    a434:	movw	r2, #0
    a438:	movt	r2, #0
    a43c:	movw	r3, #0
    a440:	movt	r3, #0
    a444:	bl	1358 <register_sub_element>
    a448:	movw	r0, #0
    a44c:	str	r0, [fp, #-4]
    a450:	ldr	r0, [fp, #-4]
    a454:	mov	sp, fp
    a458:	pop	{fp, pc}
    a45c:	.word	0xfffffe70

0000a460 <cd_vsf_integer_set_scale_factor>:
    a460:	push	{fp, lr}
    a464:	mov	fp, sp
    a468:	sub	sp, sp, #8
    a46c:	str	r0, [sp, #4]
    a470:	ldr	r0, [sp, #4]
    a474:	ldr	r0, [r0]
    a478:	ldr	r0, [r0, #396]	; 0x18c
    a47c:	ldr	r0, [r0, #8]
    a480:	ldr	r1, [sp, #4]
    a484:	ldr	r1, [r1]
    a488:	ldr	r1, [r1, #8]
    a48c:	bl	0 <coda_type_vsf_integer_set_scale_factor>
    a490:	mov	sp, fp
    a494:	pop	{fp, pc}

0000a498 <cd_vsf_integer_set_unit>:
    a498:	push	{fp, lr}
    a49c:	mov	fp, sp
    a4a0:	sub	sp, sp, #8
    a4a4:	str	r0, [sp]
    a4a8:	ldr	r0, [sp]
    a4ac:	ldr	r0, [r0]
    a4b0:	ldr	r0, [r0, #12]
    a4b4:	movw	r1, #0
    a4b8:	cmp	r0, r1
    a4bc:	bne	a4e4 <cd_vsf_integer_set_unit+0x4c>
    a4c0:	ldr	r0, [sp]
    a4c4:	ldr	r0, [r0]
    a4c8:	ldr	r0, [r0, #396]	; 0x18c
    a4cc:	ldr	r0, [r0, #8]
    a4d0:	movw	r1, #0
    a4d4:	movt	r1, #0
    a4d8:	bl	0 <coda_type_vsf_integer_set_unit>
    a4dc:	str	r0, [sp, #4]
    a4e0:	b	a508 <cd_vsf_integer_set_unit+0x70>
    a4e4:	ldr	r0, [sp]
    a4e8:	ldr	r0, [r0]
    a4ec:	ldr	r0, [r0, #396]	; 0x18c
    a4f0:	ldr	r0, [r0, #8]
    a4f4:	ldr	r1, [sp]
    a4f8:	ldr	r1, [r1]
    a4fc:	ldr	r1, [r1, #12]
    a500:	bl	0 <coda_type_vsf_integer_set_unit>
    a504:	str	r0, [sp, #4]
    a508:	ldr	r0, [sp, #4]
    a50c:	mov	sp, fp
    a510:	pop	{fp, pc}

0000a514 <cd_vsf_integer_finalise>:
    a514:	push	{fp, lr}
    a518:	mov	fp, sp
    a51c:	sub	sp, sp, #8
    a520:	str	r0, [sp, #4]
    a524:	ldr	r0, [sp, #4]
    a528:	ldr	r0, [r0]
    a52c:	ldr	r0, [r0, #8]
    a530:	bl	0 <coda_type_vsf_integer_validate>
    a534:	mov	sp, fp
    a538:	pop	{fp, pc}

0000a53c <cd_scale_factor_set_type>:
    a53c:	sub	sp, sp, #4
    a540:	str	r0, [sp]
    a544:	ldr	r0, [sp]
    a548:	ldr	r0, [r0]
    a54c:	ldr	r0, [r0, #8]
    a550:	ldr	r1, [sp]
    a554:	ldr	r1, [r1]
    a558:	ldr	r1, [r1, #396]	; 0x18c
    a55c:	str	r0, [r1, #8]
    a560:	ldr	r0, [sp]
    a564:	ldr	r0, [r0]
    a568:	movw	r1, #0
    a56c:	str	r1, [r0, #8]
    a570:	mov	r0, r1
    a574:	add	sp, sp, #4
    a578:	bx	lr

0000a57c <cd_scale_factor_finalise>:
    a57c:	push	{fp, lr}
    a580:	mov	fp, sp
    a584:	sub	sp, sp, #8
    a588:	str	r0, [sp]
    a58c:	ldr	r0, [sp]
    a590:	ldr	r0, [r0]
    a594:	ldr	r0, [r0, #8]
    a598:	movw	r1, #0
    a59c:	cmp	r0, r1
    a5a0:	bne	a5c0 <cd_scale_factor_finalise+0x44>
    a5a4:	ldr	r0, [pc, #40]	; a5d4 <cd_scale_factor_finalise+0x58>
    a5a8:	movw	r1, #0
    a5ac:	movt	r1, #0
    a5b0:	bl	0 <coda_set_error>
    a5b4:	mvn	r0, #0
    a5b8:	str	r0, [sp, #4]
    a5bc:	b	a5c8 <cd_scale_factor_finalise+0x4c>
    a5c0:	movw	r0, #0
    a5c4:	str	r0, [sp, #4]
    a5c8:	ldr	r0, [sp, #4]
    a5cc:	mov	sp, fp
    a5d0:	pop	{fp, pc}
    a5d4:	.word	0xfffffe70

0000a5d8 <dummy_free_handler>:
    a5d8:	sub	sp, sp, #4
    a5dc:	str	r0, [sp]
    a5e0:	add	sp, sp, #4
    a5e4:	bx	lr

0000a5e8 <xml_root_init>:
    a5e8:	push	{fp, lr}
    a5ec:	mov	fp, sp
    a5f0:	sub	sp, sp, #24
    a5f4:	str	r0, [fp, #-8]
    a5f8:	str	r1, [sp, #12]
    a5fc:	movw	r0, #0
    a600:	str	r0, [sp, #8]
    a604:	ldr	r1, [fp, #-8]
    a608:	ldr	r1, [r1, #28]
    a60c:	cmp	r1, r0
    a610:	beq	a618 <xml_root_init+0x30>
    a614:	b	a638 <xml_root_init+0x50>
    a618:	movw	r0, #0
    a61c:	movt	r0, #0
    a620:	movw	r1, #0
    a624:	movt	r1, #0
    a628:	movw	r2, #1184	; 0x4a0
    a62c:	movw	r3, #0
    a630:	movt	r3, #0
    a634:	bl	0 <__assert_fail>
    a638:	ldr	r0, [fp, #-8]
    a63c:	ldr	r1, [sp, #12]
    a640:	bl	7074 <handle_format_attribute_for_type>
    a644:	cmp	r0, #0
    a648:	beq	a658 <xml_root_init+0x70>
    a64c:	mvn	r0, #0
    a650:	str	r0, [fp, #-4]
    a654:	b	a7c0 <xml_root_init+0x1d8>
    a658:	ldr	r0, [fp, #-8]
    a65c:	ldr	r0, [r0]
    a660:	ldr	r0, [r0, #44]	; 0x2c
    a664:	cmp	r0, #2
    a668:	beq	a6b0 <xml_root_init+0xc8>
    a66c:	ldr	r0, [fp, #-8]
    a670:	ldr	r0, [r0]
    a674:	ldr	r0, [r0, #44]	; 0x2c
    a678:	bl	0 <coda_type_get_format_name>
    a67c:	ldr	lr, [pc, #328]	; a7cc <xml_root_init+0x1e4>
    a680:	ldr	r1, [fp, #-8]
    a684:	ldr	r1, [r1, #28]
    a688:	ldr	r3, [r1, #8]
    a68c:	str	r0, [sp, #4]
    a690:	mov	r0, lr
    a694:	movw	r1, #0
    a698:	movt	r1, #0
    a69c:	ldr	r2, [sp, #4]
    a6a0:	bl	0 <coda_set_error>
    a6a4:	mvn	r0, #0
    a6a8:	str	r0, [fp, #-4]
    a6ac:	b	a7c0 <xml_root_init+0x1d8>
    a6b0:	ldr	r0, [sp, #12]
    a6b4:	movw	r1, #0
    a6b8:	movt	r1, #0
    a6bc:	bl	250c <get_attribute_value>
    a6c0:	str	r0, [sp, #8]
    a6c4:	ldr	r0, [sp, #8]
    a6c8:	movw	r1, #0
    a6cc:	cmp	r0, r1
    a6d0:	beq	a6f0 <xml_root_init+0x108>
    a6d4:	ldr	r0, [pc, #240]	; a7cc <xml_root_init+0x1e4>
    a6d8:	movw	r1, #0
    a6dc:	movt	r1, #0
    a6e0:	bl	0 <coda_set_error>
    a6e4:	mvn	r0, #0
    a6e8:	str	r0, [fp, #-4]
    a6ec:	b	a7c0 <xml_root_init+0x1d8>
    a6f0:	ldr	r0, [sp, #12]
    a6f4:	movw	r1, #0
    a6f8:	movt	r1, #0
    a6fc:	bl	250c <get_attribute_value>
    a700:	str	r0, [sp, #8]
    a704:	ldr	r0, [sp, #8]
    a708:	movw	r1, #0
    a70c:	cmp	r0, r1
    a710:	beq	a730 <xml_root_init+0x148>
    a714:	ldr	r0, [pc, #176]	; a7cc <xml_root_init+0x1e4>
    a718:	movw	r1, #0
    a71c:	movt	r1, #0
    a720:	bl	0 <coda_set_error>
    a724:	mvn	r0, #0
    a728:	str	r0, [fp, #-4]
    a72c:	b	a7c0 <xml_root_init+0x1d8>
    a730:	movw	r0, #0
    a734:	movt	r0, #0
    a738:	ldr	r1, [fp, #-8]
    a73c:	ldr	r1, [r1]
    a740:	str	r0, [r1, #40]	; 0x28
    a744:	movw	r0, #2
    a748:	bl	0 <coda_type_record_new>
    a74c:	ldr	r1, [fp, #-8]
    a750:	ldr	r1, [r1]
    a754:	str	r0, [r1, #8]
    a758:	ldr	r0, [fp, #-8]
    a75c:	ldr	r1, [sp, #12]
    a760:	bl	71a0 <handle_name_attribute_for_type>
    a764:	cmp	r0, #0
    a768:	beq	a778 <xml_root_init+0x190>
    a76c:	mvn	r0, #0
    a770:	str	r0, [fp, #-4]
    a774:	b	a7c0 <xml_root_init+0x1d8>
    a778:	ldr	r0, [fp, #-8]
    a77c:	ldr	r0, [r0]
    a780:	movw	r1, #11
    a784:	movw	r2, #0
    a788:	movt	r2, #0
    a78c:	movw	r3, #0
    a790:	movt	r3, #0
    a794:	bl	1358 <register_sub_element>
    a798:	ldr	r0, [fp, #-8]
    a79c:	ldr	r0, [r0]
    a7a0:	movw	r1, #14
    a7a4:	movw	r2, #0
    a7a8:	movt	r2, #0
    a7ac:	movw	r3, #0
    a7b0:	movt	r3, #0
    a7b4:	bl	1358 <register_sub_element>
    a7b8:	movw	r0, #0
    a7bc:	str	r0, [fp, #-4]
    a7c0:	ldr	r0, [fp, #-4]
    a7c4:	mov	sp, fp
    a7c8:	pop	{fp, pc}
    a7cc:	.word	0xfffffe70

0000a7d0 <cd_product_definition_set_root_type>:
    a7d0:	push	{fp, lr}
    a7d4:	mov	fp, sp
    a7d8:	sub	sp, sp, #8
    a7dc:	str	r0, [sp]
    a7e0:	ldr	r0, [sp]
    a7e4:	ldr	r0, [r0]
    a7e8:	ldr	r0, [r0, #396]	; 0x18c
    a7ec:	ldr	r0, [r0, #8]
    a7f0:	ldr	r1, [sp]
    a7f4:	ldr	r1, [r1]
    a7f8:	ldr	r1, [r1, #8]
    a7fc:	bl	0 <coda_product_definition_set_root_type>
    a800:	cmp	r0, #0
    a804:	beq	a814 <cd_product_definition_set_root_type+0x44>
    a808:	mvn	r0, #0
    a80c:	str	r0, [sp, #4]
    a810:	b	a81c <cd_product_definition_set_root_type+0x4c>
    a814:	movw	r0, #0
    a818:	str	r0, [sp, #4]
    a81c:	ldr	r0, [sp, #4]
    a820:	mov	sp, fp
    a824:	pop	{fp, pc}

0000a828 <cd_product_variable_init>:
    a828:	push	{fp, lr}
    a82c:	mov	fp, sp
    a830:	sub	sp, sp, #16
    a834:	str	r0, [sp, #8]
    a838:	str	r1, [sp, #4]
    a83c:	ldr	r0, [sp, #4]
    a840:	ldr	r1, [sp, #8]
    a844:	ldr	r1, [r1]
    a848:	ldr	r2, [r1]
    a84c:	movw	r1, #0
    a850:	movt	r1, #0
    a854:	bl	20fc <get_mandatory_attribute_value>
    a858:	str	r0, [sp]
    a85c:	ldr	r0, [sp]
    a860:	movw	r1, #0
    a864:	cmp	r0, r1
    a868:	bne	a878 <cd_product_variable_init+0x50>
    a86c:	mvn	r0, #0
    a870:	str	r0, [fp, #-4]
    a874:	b	a920 <cd_product_variable_init+0xf8>
    a878:	movw	r0, #0
    a87c:	movt	r0, #0
    a880:	ldr	r1, [sp, #8]
    a884:	ldr	r1, [r1]
    a888:	str	r0, [r1, #40]	; 0x28
    a88c:	ldr	r0, [sp]
    a890:	bl	0 <coda_product_variable_new>
    a894:	ldr	r1, [sp, #8]
    a898:	ldr	r1, [r1]
    a89c:	str	r0, [r1, #8]
    a8a0:	ldr	r0, [sp, #8]
    a8a4:	ldr	r0, [r0]
    a8a8:	ldr	r0, [r0, #8]
    a8ac:	movw	r1, #0
    a8b0:	cmp	r0, r1
    a8b4:	bne	a8c4 <cd_product_variable_init+0x9c>
    a8b8:	mvn	r0, #0
    a8bc:	str	r0, [fp, #-4]
    a8c0:	b	a920 <cd_product_variable_init+0xf8>
    a8c4:	ldr	r0, [sp, #8]
    a8c8:	ldr	r0, [r0]
    a8cc:	movw	r1, #13
    a8d0:	movw	r2, #0
    a8d4:	movt	r2, #0
    a8d8:	movw	r3, #0
    a8dc:	movt	r3, #0
    a8e0:	bl	1358 <register_sub_element>
    a8e4:	ldr	r0, [sp, #8]
    a8e8:	ldr	r0, [r0]
    a8ec:	movw	r1, #19
    a8f0:	movw	r2, #0
    a8f4:	movt	r2, #0
    a8f8:	movw	r3, #0
    a8fc:	movt	r3, #0
    a900:	bl	1358 <register_sub_element>
    a904:	ldr	r0, [sp, #8]
    a908:	ldr	r0, [r0]
    a90c:	movw	r1, #0
    a910:	movt	r1, #0
    a914:	str	r1, [r0, #36]	; 0x24
    a918:	movw	r0, #0
    a91c:	str	r0, [fp, #-4]
    a920:	ldr	r0, [fp, #-4]
    a924:	mov	sp, fp
    a928:	pop	{fp, pc}

0000a92c <cd_product_definition_add_product_variable>:
    a92c:	push	{fp, lr}
    a930:	mov	fp, sp
    a934:	sub	sp, sp, #8
    a938:	str	r0, [sp]
    a93c:	ldr	r0, [sp]
    a940:	ldr	r0, [r0]
    a944:	ldr	r0, [r0, #396]	; 0x18c
    a948:	ldr	r0, [r0, #8]
    a94c:	ldr	r1, [sp]
    a950:	ldr	r1, [r1]
    a954:	ldr	r1, [r1, #8]
    a958:	bl	0 <coda_product_definition_add_product_variable>
    a95c:	cmp	r0, #0
    a960:	beq	a970 <cd_product_definition_add_product_variable+0x44>
    a964:	mvn	r0, #0
    a968:	str	r0, [sp, #4]
    a96c:	b	a984 <cd_product_definition_add_product_variable+0x58>
    a970:	ldr	r0, [sp]
    a974:	ldr	r0, [r0]
    a978:	movw	r1, #0
    a97c:	str	r1, [r0, #8]
    a980:	str	r1, [sp, #4]
    a984:	ldr	r0, [sp, #4]
    a988:	mov	sp, fp
    a98c:	pop	{fp, pc}

0000a990 <cd_product_definition_finalise>:
    a990:	push	{fp, lr}
    a994:	mov	fp, sp
    a998:	sub	sp, sp, #8
    a99c:	str	r0, [sp, #4]
    a9a0:	ldr	r0, [sp, #4]
    a9a4:	ldr	r0, [r0]
    a9a8:	ldr	r0, [r0, #8]
    a9ac:	bl	0 <coda_product_definition_validate>
    a9b0:	mov	sp, fp
    a9b4:	pop	{fp, pc}

0000a9b8 <xml_root_set_field>:
    a9b8:	push	{fp, lr}
    a9bc:	mov	fp, sp
    a9c0:	sub	sp, sp, #8
    a9c4:	str	r0, [sp]
    a9c8:	ldr	r0, [sp]
    a9cc:	ldr	r0, [r0]
    a9d0:	ldr	r0, [r0, #396]	; 0x18c
    a9d4:	ldr	r0, [r0, #8]
    a9d8:	ldr	r1, [sp]
    a9dc:	ldr	r1, [r1]
    a9e0:	ldr	r1, [r1, #8]
    a9e4:	bl	0 <coda_type_record_add_field>
    a9e8:	cmp	r0, #0
    a9ec:	beq	a9fc <xml_root_set_field+0x44>
    a9f0:	mvn	r0, #0
    a9f4:	str	r0, [sp, #4]
    a9f8:	b	aa10 <xml_root_set_field+0x58>
    a9fc:	ldr	r0, [sp]
    aa00:	ldr	r0, [r0]
    aa04:	movw	r1, #0
    aa08:	str	r1, [r0, #8]
    aa0c:	str	r1, [sp, #4]
    aa10:	ldr	r0, [sp, #4]
    aa14:	mov	sp, fp
    aa18:	pop	{fp, pc}

0000aa1c <cd_product_variable_set_size_expression>:
    aa1c:	push	{fp, lr}
    aa20:	mov	fp, sp
    aa24:	sub	sp, sp, #8
    aa28:	str	r0, [sp]
    aa2c:	ldr	r0, [sp]
    aa30:	ldr	r0, [r0]
    aa34:	ldr	r0, [r0, #396]	; 0x18c
    aa38:	ldr	r0, [r0, #8]
    aa3c:	ldr	r1, [sp]
    aa40:	ldr	r1, [r1]
    aa44:	ldr	r1, [r1, #8]
    aa48:	bl	0 <coda_product_variable_set_size_expression>
    aa4c:	cmp	r0, #0
    aa50:	beq	aa60 <cd_product_variable_set_size_expression+0x44>
    aa54:	mvn	r0, #0
    aa58:	str	r0, [sp, #4]
    aa5c:	b	aa74 <cd_product_variable_set_size_expression+0x58>
    aa60:	ldr	r0, [sp]
    aa64:	ldr	r0, [r0]
    aa68:	movw	r1, #0
    aa6c:	str	r1, [r0, #8]
    aa70:	str	r1, [sp, #4]
    aa74:	ldr	r0, [sp, #4]
    aa78:	mov	sp, fp
    aa7c:	pop	{fp, pc}

0000aa80 <void_expression_init>:
    aa80:	sub	sp, sp, #8
    aa84:	movw	r2, #0
    aa88:	movt	r2, #0
    aa8c:	str	r0, [sp, #4]
    aa90:	str	r1, [sp]
    aa94:	ldr	r0, [sp, #4]
    aa98:	ldr	r0, [r0]
    aa9c:	movw	r1, #1
    aaa0:	str	r1, [r0, #32]
    aaa4:	ldr	r0, [sp, #4]
    aaa8:	ldr	r0, [r0]
    aaac:	str	r2, [r0, #40]	; 0x28
    aab0:	ldr	r0, [sp, #4]
    aab4:	ldr	r0, [r0]
    aab8:	movw	r1, #0
    aabc:	movt	r1, #0
    aac0:	str	r1, [r0, #36]	; 0x24
    aac4:	movw	r0, #0
    aac8:	add	sp, sp, #8
    aacc:	bx	lr

0000aad0 <cd_product_variable_set_init_expression>:
    aad0:	push	{fp, lr}
    aad4:	mov	fp, sp
    aad8:	sub	sp, sp, #8
    aadc:	str	r0, [sp]
    aae0:	ldr	r0, [sp]
    aae4:	ldr	r0, [r0]
    aae8:	ldr	r0, [r0, #396]	; 0x18c
    aaec:	ldr	r0, [r0, #8]
    aaf0:	ldr	r1, [sp]
    aaf4:	ldr	r1, [r1]
    aaf8:	ldr	r1, [r1, #8]
    aafc:	bl	0 <coda_product_variable_set_init_expression>
    ab00:	cmp	r0, #0
    ab04:	beq	ab14 <cd_product_variable_set_init_expression+0x44>
    ab08:	mvn	r0, #0
    ab0c:	str	r0, [sp, #4]
    ab10:	b	ab28 <cd_product_variable_set_init_expression+0x58>
    ab14:	ldr	r0, [sp]
    ab18:	ldr	r0, [r0]
    ab1c:	movw	r1, #0
    ab20:	str	r1, [r0, #8]
    ab24:	str	r1, [sp, #4]
    ab28:	ldr	r0, [sp, #4]
    ab2c:	mov	sp, fp
    ab30:	pop	{fp, pc}

0000ab34 <cd_product_variable_finalise>:
    ab34:	push	{fp, lr}
    ab38:	mov	fp, sp
    ab3c:	sub	sp, sp, #8
    ab40:	str	r0, [sp, #4]
    ab44:	ldr	r0, [sp, #4]
    ab48:	ldr	r0, [r0]
    ab4c:	ldr	r0, [r0, #8]
    ab50:	bl	0 <coda_product_variable_validate>
    ab54:	mov	sp, fp
    ab58:	pop	{fp, pc}

0000ab5c <void_expression_finalise>:
    ab5c:	push	{fp, lr}
    ab60:	mov	fp, sp
    ab64:	sub	sp, sp, #24
    ab68:	str	r0, [fp, #-8]
    ab6c:	ldr	r0, [fp, #-8]
    ab70:	ldr	r0, [r0]
    ab74:	ldr	r0, [r0, #12]
    ab78:	movw	r1, #0
    ab7c:	cmp	r0, r1
    ab80:	beq	abe8 <void_expression_finalise+0x8c>
    ab84:	ldr	r0, [fp, #-8]
    ab88:	ldr	r0, [r0]
    ab8c:	ldr	r0, [r0, #12]
    ab90:	ldr	r1, [fp, #-8]
    ab94:	ldr	r1, [r1]
    ab98:	ldr	r1, [r1, #12]
    ab9c:	str	r0, [sp, #4]
    aba0:	mov	r0, r1
    aba4:	bl	0 <strlen>
    aba8:	ldr	r1, [sp, #4]
    abac:	str	r0, [sp]
    abb0:	mov	r0, r1
    abb4:	ldr	r1, [sp]
    abb8:	bl	2008 <is_whitespace>
    abbc:	cmp	r0, #0
    abc0:	beq	abe4 <void_expression_finalise+0x88>
    abc4:	ldr	r0, [fp, #-8]
    abc8:	ldr	r0, [r0]
    abcc:	ldr	r0, [r0, #12]
    abd0:	bl	0 <free>
    abd4:	ldr	r0, [fp, #-8]
    abd8:	ldr	r0, [r0]
    abdc:	movw	lr, #0
    abe0:	str	lr, [r0, #12]
    abe4:	b	abe8 <void_expression_finalise+0x8c>
    abe8:	ldr	r0, [fp, #-8]
    abec:	ldr	r0, [r0]
    abf0:	ldr	r0, [r0, #12]
    abf4:	movw	r1, #0
    abf8:	cmp	r0, r1
    abfc:	bne	ac1c <void_expression_finalise+0xc0>
    ac00:	ldr	r0, [pc, #200]	; acd0 <void_expression_finalise+0x174>
    ac04:	movw	r1, #0
    ac08:	movt	r1, #0
    ac0c:	bl	0 <coda_set_error>
    ac10:	mvn	r0, #0
    ac14:	str	r0, [fp, #-4]
    ac18:	b	acc4 <void_expression_finalise+0x168>
    ac1c:	ldr	r0, [fp, #-8]
    ac20:	ldr	r0, [r0]
    ac24:	ldr	r0, [r0, #12]
    ac28:	add	r1, sp, #8
    ac2c:	bl	0 <coda_expression_from_string>
    ac30:	cmp	r0, #0
    ac34:	beq	ac44 <void_expression_finalise+0xe8>
    ac38:	mvn	r0, #0
    ac3c:	str	r0, [fp, #-4]
    ac40:	b	acc4 <void_expression_finalise+0x168>
    ac44:	ldr	r0, [fp, #-8]
    ac48:	ldr	r0, [r0]
    ac4c:	ldr	r0, [r0, #12]
    ac50:	bl	0 <free>
    ac54:	ldr	r0, [fp, #-8]
    ac58:	ldr	r0, [r0]
    ac5c:	movw	lr, #0
    ac60:	str	lr, [r0, #12]
    ac64:	ldr	r0, [sp, #8]
    ac68:	ldr	lr, [fp, #-8]
    ac6c:	ldr	lr, [lr]
    ac70:	str	r0, [lr, #8]
    ac74:	ldr	r0, [sp, #8]
    ac78:	add	r1, sp, #12
    ac7c:	bl	0 <coda_expression_get_type>
    ac80:	cmp	r0, #0
    ac84:	beq	ac94 <void_expression_finalise+0x138>
    ac88:	mvn	r0, #0
    ac8c:	str	r0, [fp, #-4]
    ac90:	b	acc4 <void_expression_finalise+0x168>
    ac94:	ldr	r0, [sp, #12]
    ac98:	cmp	r0, #5
    ac9c:	beq	acbc <void_expression_finalise+0x160>
    aca0:	ldr	r0, [pc, #40]	; acd0 <void_expression_finalise+0x174>
    aca4:	movw	r1, #0
    aca8:	movt	r1, #0
    acac:	bl	0 <coda_set_error>
    acb0:	mvn	r0, #0
    acb4:	str	r0, [fp, #-4]
    acb8:	b	acc4 <void_expression_finalise+0x168>
    acbc:	movw	r0, #0
    acc0:	str	r0, [fp, #-4]
    acc4:	ldr	r0, [fp, #-4]
    acc8:	mov	sp, fp
    accc:	pop	{fp, pc}
    acd0:	.word	0xfffffe70
