
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codafind.dir/tools/codafind/codafind.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_version>:
   0:	push	{fp, lr}
   4:	add	fp, sp, #4
   8:	bl	0 <coda_get_libcoda_version>
   c:	mov	r3, r0
  10:	mov	r1, r3
  14:	ldr	r0, [pc, #24]	; 34 <print_version+0x34>
  18:	bl	0 <printf>
  1c:	ldr	r0, [pc, #20]	; 38 <print_version+0x38>
  20:	bl	0 <puts>
  24:	mov	r0, #10
  28:	bl	0 <putchar>
  2c:	nop			; (mov r0, r0)
  30:	pop	{fp, pc}
  34:	.word	0x00000000
  38:	.word	0x00000010

0000003c <print_help>:
  3c:	push	{fp, lr}
  40:	add	fp, sp, #4
  44:	ldr	r0, [pc, #232]	; 134 <print_help+0xf8>
  48:	bl	0 <puts>
  4c:	ldr	r0, [pc, #228]	; 138 <print_help+0xfc>
  50:	bl	0 <puts>
  54:	ldr	r0, [pc, #224]	; 13c <print_help+0x100>
  58:	bl	0 <puts>
  5c:	ldr	r0, [pc, #220]	; 140 <print_help+0x104>
  60:	bl	0 <puts>
  64:	mov	r0, #10
  68:	bl	0 <putchar>
  6c:	ldr	r0, [pc, #208]	; 144 <print_help+0x108>
  70:	bl	0 <puts>
  74:	ldr	r0, [pc, #204]	; 148 <print_help+0x10c>
  78:	bl	0 <puts>
  7c:	ldr	r0, [pc, #200]	; 14c <print_help+0x110>
  80:	bl	0 <puts>
  84:	ldr	r0, [pc, #196]	; 150 <print_help+0x114>
  88:	bl	0 <puts>
  8c:	ldr	r0, [pc, #192]	; 154 <print_help+0x118>
  90:	bl	0 <puts>
  94:	ldr	r0, [pc, #188]	; 158 <print_help+0x11c>
  98:	bl	0 <puts>
  9c:	ldr	r0, [pc, #184]	; 15c <print_help+0x120>
  a0:	bl	0 <puts>
  a4:	ldr	r0, [pc, #180]	; 160 <print_help+0x124>
  a8:	bl	0 <puts>
  ac:	ldr	r0, [pc, #176]	; 164 <print_help+0x128>
  b0:	bl	0 <puts>
  b4:	mov	r0, #10
  b8:	bl	0 <putchar>
  bc:	ldr	r0, [pc, #164]	; 168 <print_help+0x12c>
  c0:	bl	0 <puts>
  c4:	ldr	r0, [pc, #160]	; 16c <print_help+0x130>
  c8:	bl	0 <puts>
  cc:	mov	r0, #10
  d0:	bl	0 <putchar>
  d4:	ldr	r0, [pc, #148]	; 170 <print_help+0x134>
  d8:	bl	0 <puts>
  dc:	ldr	r0, [pc, #144]	; 174 <print_help+0x138>
  e0:	bl	0 <puts>
  e4:	mov	r0, #10
  e8:	bl	0 <putchar>
  ec:	ldr	r0, [pc, #132]	; 178 <print_help+0x13c>
  f0:	bl	0 <puts>
  f4:	ldr	r0, [pc, #128]	; 17c <print_help+0x140>
  f8:	bl	0 <puts>
  fc:	ldr	r0, [pc, #124]	; 180 <print_help+0x144>
 100:	bl	0 <puts>
 104:	ldr	r0, [pc, #120]	; 184 <print_help+0x148>
 108:	bl	0 <puts>
 10c:	ldr	r0, [pc, #116]	; 188 <print_help+0x14c>
 110:	bl	0 <puts>
 114:	ldr	r0, [pc, #112]	; 18c <print_help+0x150>
 118:	bl	0 <puts>
 11c:	ldr	r0, [pc, #108]	; 190 <print_help+0x154>
 120:	bl	0 <puts>
 124:	mov	r0, #10
 128:	bl	0 <putchar>
 12c:	nop			; (mov r0, r0)
 130:	pop	{fp, pc}
 134:	.word	0x00000040
 138:	.word	0x00000048
 13c:	.word	0x0000008c
 140:	.word	0x000000dc
 144:	.word	0x000000f4
 148:	.word	0x00000108
 14c:	.word	0x00000130
 150:	.word	0x0000016c
 154:	.word	0x0000019c
 158:	.word	0x000001e4
 15c:	.word	0x00000234
 160:	.word	0x00000260
 164:	.word	0x0000027c
 168:	.word	0x000002b4
 16c:	.word	0x000002cc
 170:	.word	0x000002ec
 174:	.word	0x00000308
 178:	.word	0x0000033c
 17c:	.word	0x0000038c
 180:	.word	0x000003d8
 184:	.word	0x00000404
 188:	.word	0x00000450
 18c:	.word	0x00000498
 190:	.word	0x000004d8

00000194 <callback>:
 194:	push	{fp, lr}
 198:	add	fp, sp, #4
 19c:	sub	sp, sp, #16
 1a0:	str	r0, [fp, #-8]
 1a4:	str	r1, [fp, #-12]
 1a8:	str	r2, [fp, #-16]
 1ac:	str	r3, [fp, #-20]	; 0xffffffec
 1b0:	ldr	r3, [fp, #-12]
 1b4:	cmp	r3, #0
 1b8:	bne	1d8 <callback+0x44>
 1bc:	ldr	r3, [pc, #264]	; 2cc <callback+0x138>
 1c0:	ldr	r0, [r3]
 1c4:	ldr	r3, [fp, #-16]
 1c8:	ldr	r2, [fp, #-8]
 1cc:	ldr	r1, [pc, #252]	; 2d0 <callback+0x13c>
 1d0:	bl	0 <fprintf>
 1d4:	b	2bc <callback+0x128>
 1d8:	ldr	r3, [fp, #-12]
 1dc:	cmp	r3, #2
 1e0:	bne	200 <callback+0x6c>
 1e4:	ldr	r3, [pc, #224]	; 2cc <callback+0x138>
 1e8:	ldr	r3, [r3]
 1ec:	ldr	r2, [fp, #-8]
 1f0:	ldr	r1, [pc, #220]	; 2d4 <callback+0x140>
 1f4:	mov	r0, r3
 1f8:	bl	0 <fprintf>
 1fc:	b	2bc <callback+0x128>
 200:	ldr	r3, [fp, #-12]
 204:	cmp	r3, #1
 208:	bne	228 <callback+0x94>
 20c:	ldr	r3, [pc, #184]	; 2cc <callback+0x138>
 210:	ldr	r0, [r3]
 214:	ldr	r3, [fp, #-16]
 218:	ldr	r2, [fp, #-8]
 21c:	ldr	r1, [pc, #180]	; 2d8 <callback+0x144>
 220:	bl	0 <fprintf>
 224:	b	2bc <callback+0x128>
 228:	ldr	r3, [pc, #172]	; 2dc <callback+0x148>
 22c:	ldr	r3, [r3]
 230:	cmp	r3, #0
 234:	beq	2a8 <callback+0x114>
 238:	ldr	r1, [fp, #-8]
 23c:	ldr	r0, [pc, #156]	; 2e0 <callback+0x14c>
 240:	bl	0 <printf>
 244:	ldr	r3, [fp, #-12]
 248:	cmp	r3, #5
 24c:	ldrls	pc, [pc, r3, lsl #2]
 250:	b	2bc <callback+0x128>
 254:	.word	0x0000026c
 258:	.word	0x0000026c
 25c:	.word	0x0000026c
 260:	.word	0x00000280
 264:	.word	0x00000298
 268:	.word	0x0000028c
 26c:	ldr	r3, [pc, #112]	; 2e4 <callback+0x150>
 270:	mov	r2, #110	; 0x6e
 274:	ldr	r1, [pc, #108]	; 2e8 <callback+0x154>
 278:	ldr	r0, [pc, #108]	; 2ec <callback+0x158>
 27c:	bl	0 <__assert_fail>
 280:	ldr	r0, [pc, #104]	; 2f0 <callback+0x15c>
 284:	bl	0 <puts>
 288:	b	2bc <callback+0x128>
 28c:	ldr	r0, [pc, #96]	; 2f4 <callback+0x160>
 290:	bl	0 <puts>
 294:	b	2bc <callback+0x128>
 298:	ldr	r0, [pc, #88]	; 2f8 <callback+0x164>
 29c:	bl	0 <puts>
 2a0:	nop			; (mov r0, r0)
 2a4:	b	2bc <callback+0x128>
 2a8:	ldr	r3, [fp, #-12]
 2ac:	cmp	r3, #4
 2b0:	bne	2bc <callback+0x128>
 2b4:	ldr	r0, [fp, #-8]
 2b8:	bl	0 <puts>
 2bc:	mov	r3, #0
 2c0:	mov	r0, r3
 2c4:	sub	sp, fp, #4
 2c8:	pop	{fp, pc}
 2cc:	.word	0x00000000
 2d0:	.word	0x00000518
 2d4:	.word	0x00000520
 2d8:	.word	0x00000540
 2dc:	.word	0x00000000
 2e0:	.word	0x00000560
 2e4:	.word	0x00000684
 2e8:	.word	0x00000568
 2ec:	.word	0x000005b8
 2f0:	.word	0x000005bc
 2f4:	.word	0x000005d0
 2f8:	.word	0x000005dc

000002fc <main>:
 2fc:	push	{r4, fp, lr}
 300:	add	fp, sp, #8
 304:	sub	sp, sp, #36	; 0x24
 308:	str	r0, [fp, #-32]	; 0xffffffe0
 30c:	str	r1, [fp, #-36]	; 0xffffffdc
 310:	mov	r3, #0
 314:	str	r3, [fp, #-16]
 318:	ldr	r3, [pc, #1180]	; 7bc <main+0x4c0>
 31c:	mov	r2, #0
 320:	str	r2, [r3]
 324:	mov	r3, #1
 328:	str	r3, [fp, #-20]	; 0xffffffec
 32c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 330:	cmp	r3, #1
 334:	beq	380 <main+0x84>
 338:	ldr	r3, [fp, #-36]	; 0xffffffdc
 33c:	add	r3, r3, #4
 340:	ldr	r3, [r3]
 344:	ldr	r1, [pc, #1140]	; 7c0 <main+0x4c4>
 348:	mov	r0, r3
 34c:	bl	0 <strcmp>
 350:	mov	r3, r0
 354:	cmp	r3, #0
 358:	beq	380 <main+0x84>
 35c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 360:	add	r3, r3, #4
 364:	ldr	r3, [r3]
 368:	ldr	r1, [pc, #1108]	; 7c4 <main+0x4c8>
 36c:	mov	r0, r3
 370:	bl	0 <strcmp>
 374:	mov	r3, r0
 378:	cmp	r3, #0
 37c:	bne	38c <main+0x90>
 380:	bl	3c <print_help>
 384:	mov	r0, #0
 388:	bl	0 <exit>
 38c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 390:	add	r3, r3, #4
 394:	ldr	r3, [r3]
 398:	ldr	r1, [pc, #1064]	; 7c8 <main+0x4cc>
 39c:	mov	r0, r3
 3a0:	bl	0 <strcmp>
 3a4:	mov	r3, r0
 3a8:	cmp	r3, #0
 3ac:	beq	3d4 <main+0xd8>
 3b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3b4:	add	r3, r3, #4
 3b8:	ldr	r3, [r3]
 3bc:	ldr	r1, [pc, #1032]	; 7cc <main+0x4d0>
 3c0:	mov	r0, r3
 3c4:	bl	0 <strcmp>
 3c8:	mov	r3, r0
 3cc:	cmp	r3, #0
 3d0:	bne	3e0 <main+0xe4>
 3d4:	bl	0 <print_version>
 3d8:	mov	r0, #0
 3dc:	bl	0 <exit>
 3e0:	mov	r3, #1
 3e4:	str	r3, [fp, #-24]	; 0xffffffe8
 3e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 3ec:	add	r2, r3, #1
 3f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 3f4:	cmp	r2, r3
 3f8:	bge	458 <main+0x15c>
 3fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 400:	lsl	r3, r3, #2
 404:	ldr	r2, [fp, #-36]	; 0xffffffdc
 408:	add	r3, r2, r3
 40c:	ldr	r3, [r3]
 410:	ldr	r1, [pc, #952]	; 7d0 <main+0x4d4>
 414:	mov	r0, r3
 418:	bl	0 <strcmp>
 41c:	mov	r3, r0
 420:	cmp	r3, #0
 424:	bne	458 <main+0x15c>
 428:	ldr	r3, [fp, #-24]	; 0xffffffe8
 42c:	add	r3, r3, #1
 430:	lsl	r3, r3, #2
 434:	ldr	r2, [fp, #-36]	; 0xffffffdc
 438:	add	r3, r2, r3
 43c:	ldr	r3, [r3]
 440:	mov	r0, r3
 444:	bl	0 <coda_set_definition_path>
 448:	ldr	r3, [fp, #-24]	; 0xffffffe8
 44c:	add	r3, r3, #2
 450:	str	r3, [fp, #-24]	; 0xffffffe8
 454:	b	4bc <main+0x1c0>
 458:	ldr	r3, [pc, #884]	; 7d4 <main+0x4d8>
 45c:	str	r3, [fp, #-28]	; 0xffffffe4
 460:	ldr	r3, [fp, #-36]	; 0xffffffdc
 464:	ldr	r3, [r3]
 468:	ldr	r2, [fp, #-28]	; 0xffffffe4
 46c:	mov	r1, #0
 470:	mov	r0, r3
 474:	bl	0 <coda_set_definition_path_conditional>
 478:	mov	r3, r0
 47c:	cmp	r3, #0
 480:	beq	698 <main+0x39c>
 484:	ldr	r3, [pc, #844]	; 7d8 <main+0x4dc>
 488:	ldr	r4, [r3]
 48c:	bl	0 <coda_get_errno>
 490:	mov	r3, r0
 494:	ldr	r3, [r3]
 498:	mov	r0, r3
 49c:	bl	0 <coda_errno_to_string>
 4a0:	mov	r3, r0
 4a4:	mov	r2, r3
 4a8:	ldr	r1, [pc, #812]	; 7dc <main+0x4e0>
 4ac:	mov	r0, r4
 4b0:	bl	0 <fprintf>
 4b4:	mov	r0, #1
 4b8:	bl	0 <exit>
 4bc:	b	698 <main+0x39c>
 4c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4c4:	lsl	r3, r3, #2
 4c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
 4cc:	add	r3, r2, r3
 4d0:	ldr	r3, [r3]
 4d4:	ldr	r1, [pc, #772]	; 7e0 <main+0x4e4>
 4d8:	mov	r0, r3
 4dc:	bl	0 <strcmp>
 4e0:	mov	r3, r0
 4e4:	cmp	r3, #0
 4e8:	beq	518 <main+0x21c>
 4ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4f0:	lsl	r3, r3, #2
 4f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
 4f8:	add	r3, r2, r3
 4fc:	ldr	r3, [r3]
 500:	ldr	r1, [pc, #732]	; 7e4 <main+0x4e8>
 504:	mov	r0, r3
 508:	bl	0 <strcmp>
 50c:	mov	r3, r0
 510:	cmp	r3, #0
 514:	bne	524 <main+0x228>
 518:	mov	r3, #0
 51c:	str	r3, [fp, #-20]	; 0xffffffec
 520:	b	68c <main+0x390>
 524:	ldr	r3, [fp, #-24]	; 0xffffffe8
 528:	lsl	r3, r3, #2
 52c:	ldr	r2, [fp, #-36]	; 0xffffffdc
 530:	add	r3, r2, r3
 534:	ldr	r3, [r3]
 538:	ldr	r1, [pc, #680]	; 7e8 <main+0x4ec>
 53c:	mov	r0, r3
 540:	bl	0 <strcmp>
 544:	mov	r3, r0
 548:	cmp	r3, #0
 54c:	beq	57c <main+0x280>
 550:	ldr	r3, [fp, #-24]	; 0xffffffe8
 554:	lsl	r3, r3, #2
 558:	ldr	r2, [fp, #-36]	; 0xffffffdc
 55c:	add	r3, r2, r3
 560:	ldr	r3, [r3]
 564:	ldr	r1, [pc, #640]	; 7ec <main+0x4f0>
 568:	mov	r0, r3
 56c:	bl	0 <strcmp>
 570:	mov	r3, r0
 574:	cmp	r3, #0
 578:	bne	5e0 <main+0x2e4>
 57c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 580:	add	r2, r3, #1
 584:	ldr	r3, [fp, #-32]	; 0xffffffe0
 588:	cmp	r2, r3
 58c:	bge	5e0 <main+0x2e4>
 590:	ldr	r3, [fp, #-24]	; 0xffffffe8
 594:	add	r3, r3, #1
 598:	lsl	r3, r3, #2
 59c:	ldr	r2, [fp, #-36]	; 0xffffffdc
 5a0:	add	r3, r2, r3
 5a4:	ldr	r3, [r3]
 5a8:	ldrb	r3, [r3]
 5ac:	cmp	r3, #45	; 0x2d
 5b0:	beq	5e0 <main+0x2e4>
 5b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5b8:	add	r3, r3, #1
 5bc:	lsl	r3, r3, #2
 5c0:	ldr	r2, [fp, #-36]	; 0xffffffdc
 5c4:	add	r3, r2, r3
 5c8:	ldr	r3, [r3]
 5cc:	str	r3, [fp, #-16]
 5d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5d4:	add	r3, r3, #1
 5d8:	str	r3, [fp, #-24]	; 0xffffffe8
 5dc:	b	68c <main+0x390>
 5e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5e4:	lsl	r3, r3, #2
 5e8:	ldr	r2, [fp, #-36]	; 0xffffffdc
 5ec:	add	r3, r2, r3
 5f0:	ldr	r3, [r3]
 5f4:	ldr	r1, [pc, #500]	; 7f0 <main+0x4f4>
 5f8:	mov	r0, r3
 5fc:	bl	0 <strcmp>
 600:	mov	r3, r0
 604:	cmp	r3, #0
 608:	beq	638 <main+0x33c>
 60c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 610:	lsl	r3, r3, #2
 614:	ldr	r2, [fp, #-36]	; 0xffffffdc
 618:	add	r3, r2, r3
 61c:	ldr	r3, [r3]
 620:	ldr	r1, [pc, #460]	; 7f4 <main+0x4f8>
 624:	mov	r0, r3
 628:	bl	0 <strcmp>
 62c:	mov	r3, r0
 630:	cmp	r3, #0
 634:	bne	648 <main+0x34c>
 638:	ldr	r3, [pc, #380]	; 7bc <main+0x4c0>
 63c:	mov	r2, #1
 640:	str	r2, [r3]
 644:	b	68c <main+0x390>
 648:	ldr	r3, [fp, #-24]	; 0xffffffe8
 64c:	lsl	r3, r3, #2
 650:	ldr	r2, [fp, #-36]	; 0xffffffdc
 654:	add	r3, r2, r3
 658:	ldr	r3, [r3]
 65c:	ldrb	r3, [r3]
 660:	cmp	r3, #45	; 0x2d
 664:	bne	6ac <main+0x3b0>
 668:	ldr	r3, [pc, #360]	; 7d8 <main+0x4dc>
 66c:	ldr	r3, [r3]
 670:	mov	r2, #25
 674:	mov	r1, #1
 678:	ldr	r0, [pc, #376]	; 7f8 <main+0x4fc>
 67c:	bl	0 <fwrite>
 680:	bl	3c <print_help>
 684:	mov	r0, #1
 688:	bl	0 <exit>
 68c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 690:	add	r3, r3, #1
 694:	str	r3, [fp, #-24]	; 0xffffffe8
 698:	ldr	r2, [fp, #-24]	; 0xffffffe8
 69c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 6a0:	cmp	r2, r3
 6a4:	blt	4c0 <main+0x1c4>
 6a8:	b	6b0 <main+0x3b4>
 6ac:	nop			; (mov r0, r0)
 6b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
 6b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
 6b8:	cmp	r2, r3
 6bc:	bne	6e4 <main+0x3e8>
 6c0:	ldr	r3, [pc, #272]	; 7d8 <main+0x4dc>
 6c4:	ldr	r3, [r3]
 6c8:	mov	r2, #25
 6cc:	mov	r1, #1
 6d0:	ldr	r0, [pc, #288]	; 7f8 <main+0x4fc>
 6d4:	bl	0 <fwrite>
 6d8:	bl	3c <print_help>
 6dc:	mov	r0, #1
 6e0:	bl	0 <exit>
 6e4:	bl	0 <coda_init>
 6e8:	mov	r3, r0
 6ec:	cmp	r3, #0
 6f0:	beq	72c <main+0x430>
 6f4:	ldr	r3, [pc, #220]	; 7d8 <main+0x4dc>
 6f8:	ldr	r4, [r3]
 6fc:	bl	0 <coda_get_errno>
 700:	mov	r3, r0
 704:	ldr	r3, [r3]
 708:	mov	r0, r3
 70c:	bl	0 <coda_errno_to_string>
 710:	mov	r3, r0
 714:	mov	r2, r3
 718:	ldr	r1, [pc, #188]	; 7dc <main+0x4e0>
 71c:	mov	r0, r4
 720:	bl	0 <fprintf>
 724:	mov	r0, #1
 728:	bl	0 <exit>
 72c:	ldr	r0, [fp, #-20]	; 0xffffffec
 730:	bl	0 <coda_set_option_perform_conversions>
 734:	ldr	r2, [fp, #-32]	; 0xffffffe0
 738:	ldr	r3, [fp, #-24]	; 0xffffffe8
 73c:	sub	r1, r2, r3
 740:	ldr	r3, [fp, #-24]	; 0xffffffe8
 744:	lsl	r3, r3, #2
 748:	ldr	r2, [fp, #-36]	; 0xffffffdc
 74c:	add	r2, r2, r3
 750:	mov	r3, #0
 754:	str	r3, [sp]
 758:	ldr	r3, [pc, #156]	; 7fc <main+0x500>
 75c:	ldr	r0, [fp, #-16]
 760:	bl	0 <coda_match_filefilter>
 764:	mov	r3, r0
 768:	cmp	r3, #0
 76c:	beq	7a8 <main+0x4ac>
 770:	ldr	r3, [pc, #96]	; 7d8 <main+0x4dc>
 774:	ldr	r4, [r3]
 778:	bl	0 <coda_get_errno>
 77c:	mov	r3, r0
 780:	ldr	r3, [r3]
 784:	mov	r0, r3
 788:	bl	0 <coda_errno_to_string>
 78c:	mov	r3, r0
 790:	mov	r2, r3
 794:	ldr	r1, [pc, #64]	; 7dc <main+0x4e0>
 798:	mov	r0, r4
 79c:	bl	0 <fprintf>
 7a0:	mov	r0, #1
 7a4:	bl	0 <exit>
 7a8:	bl	0 <coda_done>
 7ac:	mov	r3, #0
 7b0:	mov	r0, r3
 7b4:	sub	sp, fp, #8
 7b8:	pop	{r4, fp, pc}
 7bc:	.word	0x00000000
 7c0:	.word	0x000005e4
 7c4:	.word	0x000005e8
 7c8:	.word	0x000005f0
 7cc:	.word	0x000005f4
 7d0:	.word	0x00000600
 7d4:	.word	0x00000604
 7d8:	.word	0x00000000
 7dc:	.word	0x00000620
 7e0:	.word	0x0000062c
 7e4:	.word	0x00000630
 7e8:	.word	0x00000648
 7ec:	.word	0x0000064c
 7f0:	.word	0x00000658
 7f4:	.word	0x0000065c
 7f8:	.word	0x00000668
 7fc:	.word	0x00000000
