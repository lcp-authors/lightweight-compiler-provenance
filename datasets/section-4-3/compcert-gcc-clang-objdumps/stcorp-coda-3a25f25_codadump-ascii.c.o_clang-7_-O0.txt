
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <export_data_element_to_ascii>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #16
       c:	movw	r0, #0
      10:	movt	r0, #0
      14:	ldr	r0, [r0]
      18:	cmp	r0, #0
      1c:	beq	34 <export_data_element_to_ascii+0x34>
      20:	movw	r0, #0
      24:	movt	r0, #0
      28:	movw	r1, #0
      2c:	str	r1, [r0]
      30:	b	50 <export_data_element_to_ascii+0x50>
      34:	movw	r0, #0
      38:	movt	r0, #0
      3c:	ldr	r0, [r0]
      40:	movw	r1, #0
      44:	movt	r1, #0
      48:	bl	0 <fprintf>
      4c:	str	r0, [fp, #-4]
      50:	movw	r0, #0
      54:	movt	r0, #0
      58:	ldr	r0, [r0]
      5c:	cmp	r0, #0
      60:	beq	98 <export_data_element_to_ascii+0x98>
      64:	movw	r0, #0
      68:	movt	r0, #0
      6c:	ldr	r0, [r0]
      70:	movw	r1, #2
      74:	movw	r2, #0
      78:	bl	0 <print_full_field_name>
      7c:	movw	r0, #0
      80:	movt	r0, #0
      84:	ldr	r0, [r0]
      88:	movw	r1, #0
      8c:	movt	r1, #0
      90:	bl	0 <fprintf>
      94:	str	r0, [sp, #8]
      98:	movw	r0, #0
      9c:	movt	r0, #0
      a0:	ldr	r0, [r0]
      a4:	cmp	r0, #0
      a8:	ble	d8 <export_data_element_to_ascii+0xd8>
      ac:	movw	r0, #0
      b0:	movt	r0, #0
      b4:	ldr	r1, [r0]
      b8:	add	r0, r0, r1, lsl #3
      bc:	ldr	r1, [r0, #296]	; 0x128
      c0:	ldr	r0, [r0, #300]	; 0x12c
      c4:	orr	r0, r1, r0
      c8:	cmp	r0, #0
      cc:	bne	d8 <export_data_element_to_ascii+0xd8>
      d0:	b	d4 <export_data_element_to_ascii+0xd4>
      d4:	b	f8 <export_data_element_to_ascii+0xf8>
      d8:	movw	r0, #0
      dc:	movt	r0, #0
      e0:	ldr	r0, [r0]
      e4:	movw	r1, #0
      e8:	str	r1, [sp, #4]
      ec:	ldr	r2, [sp, #4]
      f0:	ldr	r3, [sp, #4]
      f4:	bl	100 <write_data>
      f8:	mov	sp, fp
      fc:	pop	{fp, pc}

00000100 <write_data>:
     100:	push	{fp, lr}
     104:	mov	fp, sp
     108:	sub	sp, sp, #112	; 0x70
     10c:	movw	ip, #0
     110:	movt	ip, #0
     114:	add	ip, ip, #8
     118:	str	r0, [fp, #-4]
     11c:	str	r1, [fp, #-8]
     120:	str	r2, [fp, #-12]
     124:	str	r3, [fp, #-16]
     128:	ldr	r0, [fp, #-8]
     12c:	movw	r1, #0
     130:	movt	r1, #0
     134:	add	r0, r1, r0, lsl #2
     138:	add	r0, r0, #8
     13c:	ldr	r0, [r0]
     140:	sub	r1, fp, #20
     144:	str	ip, [sp, #28]
     148:	bl	0 <coda_type_get_class>
     14c:	cmp	r0, #0
     150:	beq	160 <write_data+0x60>
     154:	movw	r0, #0
     158:	movt	r0, #0
     15c:	blx	r0
     160:	ldr	r0, [fp, #-20]	; 0xffffffec
     164:	cmp	r0, #0
     168:	str	r0, [sp, #24]
     16c:	beq	514 <write_data+0x414>
     170:	b	174 <write_data+0x74>
     174:	ldr	r0, [sp, #24]
     178:	cmp	r0, #1
     17c:	bne	600 <write_data+0x500>
     180:	b	184 <write_data+0x84>
     184:	movw	r0, #0
     188:	movt	r0, #0
     18c:	add	r0, r0, #800	; 0x320
     190:	ldr	r1, [fp, #-12]
     194:	movw	r2, #80	; 0x50
     198:	mul	r1, r1, r2
     19c:	add	r0, r0, r1
     1a0:	str	r0, [fp, #-24]	; 0xffffffe8
     1a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     1a8:	ldr	r0, [r0]
     1ac:	str	r0, [sp, #44]	; 0x2c
     1b0:	ldr	r0, [fp, #-12]
     1b4:	cmp	r0, #0
     1b8:	bne	1c8 <write_data+0xc8>
     1bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     1c0:	movw	r1, #0
     1c4:	str	r1, [r0, #44]	; 0x2c
     1c8:	movw	r0, #0
     1cc:	movt	r0, #0
     1d0:	ldr	r0, [r0, #104]	; 0x68
     1d4:	ldr	r1, [sp, #44]	; 0x2c
     1d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     1dc:	ldr	r2, [r2, #4]
     1e0:	add	r1, r1, r2
     1e4:	cmp	r0, r1
     1e8:	movw	r0, #0
     1ec:	movge	r0, #1
     1f0:	and	r0, r0, #1
     1f4:	str	r0, [fp, #-32]	; 0xffffffe0
     1f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     1fc:	cmp	r0, #0
     200:	beq	258 <write_data+0x158>
     204:	ldr	r0, [fp, #-12]
     208:	movw	r1, #0
     20c:	movt	r1, #0
     210:	ldr	r1, [r1, #3360]	; 0xd20
     214:	sub	r1, r1, #1
     218:	cmp	r0, r1
     21c:	bge	258 <write_data+0x158>
     220:	movw	r0, #0
     224:	movt	r0, #0
     228:	add	r0, r0, #800	; 0x320
     22c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     230:	ldr	r1, [r1, #44]	; 0x2c
     234:	ldr	r2, [fp, #-24]	; 0xffffffe8
     238:	ldr	r2, [r2, #40]	; 0x28
     23c:	mul	r1, r1, r2
     240:	ldr	r2, [fp, #-12]
     244:	add	r2, r2, #1
     248:	movw	r3, #80	; 0x50
     24c:	mul	r2, r2, r3
     250:	add	r0, r0, r2
     254:	str	r1, [r0, #44]	; 0x2c
     258:	movw	r0, #1
     25c:	str	r0, [fp, #-28]	; 0xffffffe4
     260:	movw	r0, #0
     264:	str	r0, [sp, #40]	; 0x28
     268:	ldr	r0, [sp, #40]	; 0x28
     26c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     270:	ldr	r1, [r1, #4]
     274:	cmp	r0, r1
     278:	bge	354 <write_data+0x254>
     27c:	movw	r0, #0
     280:	movt	r0, #0
     284:	add	r0, r0, #72	; 0x48
     288:	ldr	r1, [sp, #44]	; 0x2c
     28c:	ldr	r2, [sp, #40]	; 0x28
     290:	add	r1, r1, r2
     294:	movw	r2, #0
     298:	movt	r2, #0
     29c:	add	r1, r2, r1, lsl #2
     2a0:	add	r1, r1, #72	; 0x48
     2a4:	ldr	r1, [r1]
     2a8:	cmp	r1, #0
     2ac:	str	r0, [sp, #20]
     2b0:	beq	2ec <write_data+0x1ec>
     2b4:	ldr	r0, [sp, #44]	; 0x2c
     2b8:	ldr	r1, [sp, #40]	; 0x28
     2bc:	add	r0, r0, r1
     2c0:	movw	r2, #0
     2c4:	movt	r2, #0
     2c8:	add	r0, r2, r0, lsl #2
     2cc:	ldr	r0, [r0, #108]	; 0x6c
     2d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     2d4:	ldr	r2, [r2, #44]	; 0x2c
     2d8:	ldr	r0, [r0, r2, lsl #2]
     2dc:	add	r2, sp, #48	; 0x30
     2e0:	add	r1, r2, r1, lsl #2
     2e4:	str	r0, [r1]
     2e8:	b	314 <write_data+0x214>
     2ec:	ldr	r0, [sp, #44]	; 0x2c
     2f0:	ldr	r1, [sp, #40]	; 0x28
     2f4:	add	r0, r0, r1
     2f8:	movw	r2, #0
     2fc:	movt	r2, #0
     300:	add	r0, r2, r0, lsl #2
     304:	ldr	r0, [r0, #4]
     308:	add	r2, sp, #48	; 0x30
     30c:	add	r1, r2, r1, lsl #2
     310:	str	r0, [r1]
     314:	ldr	r0, [sp, #40]	; 0x28
     318:	add	r1, sp, #48	; 0x30
     31c:	ldr	r0, [r1, r0, lsl #2]
     320:	ldr	r1, [fp, #-28]	; 0xffffffe4
     324:	mul	r0, r1, r0
     328:	str	r0, [fp, #-28]	; 0xffffffe4
     32c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     330:	add	r0, r0, #48	; 0x30
     334:	ldr	r1, [sp, #40]	; 0x28
     338:	add	r0, r0, r1, lsl #2
     33c:	movw	r1, #0
     340:	str	r1, [r0]
     344:	ldr	r0, [sp, #40]	; 0x28
     348:	add	r0, r0, #1
     34c:	str	r0, [sp, #40]	; 0x28
     350:	b	268 <write_data+0x168>
     354:	ldr	r0, [fp, #-28]	; 0xffffffe4
     358:	cmp	r0, #0
     35c:	bne	364 <write_data+0x264>
     360:	b	60c <write_data+0x50c>
     364:	movw	r0, #0
     368:	movt	r0, #0
     36c:	add	r0, r0, #144	; 0x90
     370:	bl	0 <coda_cursor_goto_first_array_element>
     374:	cmp	r0, #0
     378:	beq	388 <write_data+0x288>
     37c:	movw	r0, #0
     380:	movt	r0, #0
     384:	blx	r0
     388:	movw	r0, #0
     38c:	str	r0, [sp, #40]	; 0x28
     390:	ldr	r0, [sp, #40]	; 0x28
     394:	ldr	r1, [fp, #-28]	; 0xffffffe4
     398:	cmp	r0, r1
     39c:	bge	4fc <write_data+0x3fc>
     3a0:	ldr	r0, [fp, #-4]
     3a4:	ldr	r1, [fp, #-8]
     3a8:	add	r1, r1, #1
     3ac:	ldr	r2, [fp, #-12]
     3b0:	add	r2, r2, #1
     3b4:	ldr	r3, [fp, #-16]
     3b8:	bl	100 <write_data>
     3bc:	ldr	r0, [sp, #40]	; 0x28
     3c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
     3c4:	sub	r1, r1, #1
     3c8:	cmp	r0, r1
     3cc:	bge	4e8 <write_data+0x3e8>
     3d0:	movw	r0, #0
     3d4:	movt	r0, #0
     3d8:	add	r0, r0, #144	; 0x90
     3dc:	bl	0 <coda_cursor_goto_next_array_element>
     3e0:	cmp	r0, #0
     3e4:	beq	3f4 <write_data+0x2f4>
     3e8:	movw	r0, #0
     3ec:	movt	r0, #0
     3f0:	blx	r0
     3f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     3f8:	cmp	r0, #0
     3fc:	beq	448 <write_data+0x348>
     400:	ldr	r0, [fp, #-12]
     404:	movw	r1, #0
     408:	movt	r1, #0
     40c:	ldr	r1, [r1, #3360]	; 0xd20
     410:	sub	r1, r1, #1
     414:	cmp	r0, r1
     418:	bge	448 <write_data+0x348>
     41c:	movw	r0, #0
     420:	movt	r0, #0
     424:	add	r0, r0, #800	; 0x320
     428:	ldr	r1, [fp, #-12]
     42c:	add	r1, r1, #1
     430:	movw	r2, #80	; 0x50
     434:	mul	r1, r1, r2
     438:	add	r0, r0, r1
     43c:	ldr	r1, [r0, #44]	; 0x2c
     440:	add	r1, r1, #1
     444:	str	r1, [r0, #44]	; 0x2c
     448:	movw	r0, #0
     44c:	movt	r0, #0
     450:	ldr	r0, [r0]
     454:	cmp	r0, #0
     458:	beq	4e4 <write_data+0x3e4>
     45c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     460:	ldr	r0, [r0, #4]
     464:	sub	r0, r0, #1
     468:	str	r0, [sp, #36]	; 0x24
     46c:	ldr	r0, [sp, #36]	; 0x24
     470:	cmp	r0, #0
     474:	blt	4e0 <write_data+0x3e0>
     478:	ldr	r0, [fp, #-24]	; 0xffffffe8
     47c:	ldr	r1, [sp, #36]	; 0x24
     480:	add	r0, r0, r1, lsl #2
     484:	ldr	r1, [r0, #48]	; 0x30
     488:	add	r1, r1, #1
     48c:	str	r1, [r0, #48]	; 0x30
     490:	ldr	r0, [fp, #-24]	; 0xffffffe8
     494:	ldr	r1, [sp, #36]	; 0x24
     498:	add	r0, r0, r1, lsl #2
     49c:	ldr	r0, [r0, #48]	; 0x30
     4a0:	add	r2, sp, #48	; 0x30
     4a4:	add	r1, r2, r1, lsl #2
     4a8:	ldr	r1, [r1]
     4ac:	cmp	r0, r1
     4b0:	bne	4d8 <write_data+0x3d8>
     4b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4b8:	add	r0, r0, #48	; 0x30
     4bc:	ldr	r1, [sp, #36]	; 0x24
     4c0:	sub	r2, r1, #1
     4c4:	str	r2, [sp, #36]	; 0x24
     4c8:	add	r0, r0, r1, lsl #2
     4cc:	movw	r1, #0
     4d0:	str	r1, [r0]
     4d4:	b	4dc <write_data+0x3dc>
     4d8:	b	4e0 <write_data+0x3e0>
     4dc:	b	46c <write_data+0x36c>
     4e0:	b	4e4 <write_data+0x3e4>
     4e4:	b	4e8 <write_data+0x3e8>
     4e8:	b	4ec <write_data+0x3ec>
     4ec:	ldr	r0, [sp, #40]	; 0x28
     4f0:	add	r0, r0, #1
     4f4:	str	r0, [sp, #40]	; 0x28
     4f8:	b	390 <write_data+0x290>
     4fc:	movw	r0, #0
     500:	movt	r0, #0
     504:	add	r0, r0, #144	; 0x90
     508:	bl	0 <coda_cursor_goto_parent>
     50c:	str	r0, [sp, #16]
     510:	b	60c <write_data+0x50c>
     514:	movw	r0, #0
     518:	movt	r0, #0
     51c:	add	r1, r0, #144	; 0x90
     520:	movw	r2, #3492	; 0xda4
     524:	add	r0, r0, r2
     528:	ldr	r2, [fp, #-16]
     52c:	movw	r3, #0
     530:	movt	r3, #0
     534:	add	r2, r3, r2, lsl #2
     538:	movw	r3, #3492	; 0xda4
     53c:	add	r2, r2, r3
     540:	ldr	r2, [r2]
     544:	str	r0, [sp, #12]
     548:	mov	r0, r1
     54c:	mov	r1, r2
     550:	add	r2, sp, #32
     554:	bl	0 <coda_cursor_get_record_field_available_status>
     558:	cmp	r0, #0
     55c:	beq	56c <write_data+0x46c>
     560:	movw	r0, #0
     564:	movt	r0, #0
     568:	blx	r0
     56c:	ldr	r0, [sp, #32]
     570:	cmp	r0, #0
     574:	beq	5fc <write_data+0x4fc>
     578:	movw	r0, #0
     57c:	movt	r0, #0
     580:	add	r1, r0, #144	; 0x90
     584:	movw	r2, #3492	; 0xda4
     588:	add	r0, r0, r2
     58c:	ldr	r2, [fp, #-16]
     590:	movw	r3, #0
     594:	movt	r3, #0
     598:	add	r2, r3, r2, lsl #2
     59c:	movw	r3, #3492	; 0xda4
     5a0:	add	r2, r2, r3
     5a4:	ldr	r2, [r2]
     5a8:	str	r0, [sp, #8]
     5ac:	mov	r0, r1
     5b0:	mov	r1, r2
     5b4:	bl	0 <coda_cursor_goto_record_field_by_index>
     5b8:	cmp	r0, #0
     5bc:	beq	5cc <write_data+0x4cc>
     5c0:	movw	r0, #0
     5c4:	movt	r0, #0
     5c8:	blx	r0
     5cc:	ldr	r0, [fp, #-4]
     5d0:	ldr	r1, [fp, #-8]
     5d4:	add	r1, r1, #1
     5d8:	ldr	r2, [fp, #-12]
     5dc:	ldr	r3, [fp, #-16]
     5e0:	add	r3, r3, #1
     5e4:	bl	100 <write_data>
     5e8:	movw	r0, #0
     5ec:	movt	r0, #0
     5f0:	add	r0, r0, #144	; 0x90
     5f4:	bl	0 <coda_cursor_goto_parent>
     5f8:	str	r0, [sp, #4]
     5fc:	b	60c <write_data+0x50c>
     600:	ldr	r0, [fp, #-4]
     604:	ldr	r1, [fp, #-8]
     608:	bl	614 <write_basic_data>
     60c:	mov	sp, fp
     610:	pop	{fp, pc}

00000614 <write_basic_data>:
     614:	push	{r4, r5, fp, lr}
     618:	add	fp, sp, #8
     61c:	sub	sp, sp, #376	; 0x178
     620:	str	r0, [fp, #-12]
     624:	str	r1, [fp, #-16]
     628:	movw	r0, #0
     62c:	movt	r0, #0
     630:	ldr	r0, [r0]
     634:	cmp	r0, #0
     638:	beq	644 <write_basic_data+0x30>
     63c:	ldr	r0, [fp, #-12]
     640:	bl	fe0 <write_index>
     644:	movw	r0, #0
     648:	movt	r0, #0
     64c:	add	r0, r0, #8
     650:	ldr	r1, [fp, #-16]
     654:	movw	r2, #0
     658:	movt	r2, #0
     65c:	add	r1, r2, r1, lsl #2
     660:	add	r1, r1, #8
     664:	ldr	r1, [r1]
     668:	str	r0, [sp, #164]	; 0xa4
     66c:	mov	r0, r1
     670:	sub	r1, fp, #20
     674:	bl	0 <coda_type_get_class>
     678:	cmp	r0, #0
     67c:	beq	68c <write_basic_data+0x78>
     680:	movw	r0, #0
     684:	movt	r0, #0
     688:	blx	r0
     68c:	ldr	r0, [fp, #-20]	; 0xffffffec
     690:	cmp	r0, #2
     694:	str	r0, [sp, #160]	; 0xa0
     698:	bcc	fa4 <write_basic_data+0x990>
     69c:	b	6a0 <write_basic_data+0x8c>
     6a0:	ldr	r0, [sp, #160]	; 0xa0
     6a4:	sub	r1, r0, #2
     6a8:	cmp	r1, #4
     6ac:	bcc	6c4 <write_basic_data+0xb0>
     6b0:	b	6b4 <write_basic_data+0xa0>
     6b4:	ldr	r0, [sp, #160]	; 0xa0
     6b8:	cmp	r0, #6
     6bc:	beq	d9c <write_basic_data+0x788>
     6c0:	b	fc4 <write_basic_data+0x9b0>
     6c4:	movw	r0, #0
     6c8:	movt	r0, #0
     6cc:	add	r0, r0, #8
     6d0:	ldr	r1, [fp, #-16]
     6d4:	movw	r2, #0
     6d8:	movt	r2, #0
     6dc:	add	r1, r2, r1, lsl #2
     6e0:	add	r1, r1, #8
     6e4:	ldr	r1, [r1]
     6e8:	str	r0, [sp, #156]	; 0x9c
     6ec:	mov	r0, r1
     6f0:	sub	r1, fp, #24
     6f4:	bl	0 <coda_type_get_read_type>
     6f8:	cmp	r0, #0
     6fc:	beq	70c <write_basic_data+0xf8>
     700:	movw	r0, #0
     704:	movt	r0, #0
     708:	blx	r0
     70c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     710:	add	r0, r0, #1
     714:	cmp	r0, #13
     718:	str	r0, [sp, #152]	; 0x98
     71c:	bhi	d98 <write_basic_data+0x784>
     720:	add	r0, pc, #8
     724:	ldr	r1, [sp, #152]	; 0x98
     728:	ldr	r0, [r0, r1, lsl #2]
     72c:	mov	pc, r0
     730:	.word	0x00000d78
     734:	.word	0x00000bd4
     738:	.word	0x00000c18
     73c:	.word	0x00000bd4
     740:	.word	0x00000c18
     744:	.word	0x00000bd4
     748:	.word	0x00000c18
     74c:	.word	0x00000c5c
     750:	.word	0x00000cb0
     754:	.word	0x00000d04
     758:	.word	0x00000d04
     75c:	.word	0x00000768
     760:	.word	0x000007dc
     764:	.word	0x000008dc
     768:	movw	r0, #0
     76c:	movt	r0, #0
     770:	add	r0, r0, #144	; 0x90
     774:	sub	r1, fp, #25
     778:	bl	0 <coda_cursor_read_char>
     77c:	cmp	r0, #0
     780:	beq	790 <write_basic_data+0x17c>
     784:	movw	r0, #0
     788:	movt	r0, #0
     78c:	blx	r0
     790:	movw	r0, #0
     794:	movt	r0, #0
     798:	ldr	r0, [r0]
     79c:	cmp	r0, #0
     7a0:	beq	7c0 <write_basic_data+0x1ac>
     7a4:	ldr	r0, [fp, #-12]
     7a8:	ldrb	r2, [fp, #-25]	; 0xffffffe7
     7ac:	movw	r1, #0
     7b0:	movt	r1, #0
     7b4:	bl	0 <fprintf>
     7b8:	str	r0, [sp, #148]	; 0x94
     7bc:	b	7d8 <write_basic_data+0x1c4>
     7c0:	ldr	r0, [fp, #-12]
     7c4:	ldrb	r2, [fp, #-25]	; 0xffffffe7
     7c8:	movw	r1, #0
     7cc:	movt	r1, #0
     7d0:	bl	0 <fprintf>
     7d4:	str	r0, [sp, #144]	; 0x90
     7d8:	b	d98 <write_basic_data+0x784>
     7dc:	movw	r0, #0
     7e0:	movt	r0, #0
     7e4:	add	r0, r0, #144	; 0x90
     7e8:	sub	r1, fp, #32
     7ec:	bl	0 <coda_cursor_get_string_length>
     7f0:	cmp	r0, #0
     7f4:	beq	804 <write_basic_data+0x1f0>
     7f8:	movw	r0, #0
     7fc:	movt	r0, #0
     800:	blx	r0
     804:	ldr	r0, [fp, #-32]	; 0xffffffe0
     808:	add	r0, r0, #1
     80c:	bl	0 <malloc>
     810:	str	r0, [fp, #-36]	; 0xffffffdc
     814:	ldr	r0, [fp, #-36]	; 0xffffffdc
     818:	movw	lr, #0
     81c:	cmp	r0, lr
     820:	bne	858 <write_basic_data+0x244>
     824:	ldr	r0, [fp, #-32]	; 0xffffffe0
     828:	add	r2, r0, #1
     82c:	mvn	r0, #0
     830:	movw	r1, #0
     834:	movt	r1, #0
     838:	movw	r3, #0
     83c:	movt	r3, #0
     840:	movw	ip, #126	; 0x7e
     844:	str	ip, [sp]
     848:	bl	0 <coda_set_error>
     84c:	movw	r0, #0
     850:	movt	r0, #0
     854:	blx	r0
     858:	movw	r0, #0
     85c:	movt	r0, #0
     860:	add	r0, r0, #144	; 0x90
     864:	ldr	r1, [fp, #-36]	; 0xffffffdc
     868:	ldr	r2, [fp, #-32]	; 0xffffffe0
     86c:	add	r2, r2, #1
     870:	bl	0 <coda_cursor_read_string>
     874:	cmp	r0, #0
     878:	beq	888 <write_basic_data+0x274>
     87c:	movw	r0, #0
     880:	movt	r0, #0
     884:	blx	r0
     888:	movw	r0, #0
     88c:	movt	r0, #0
     890:	ldr	r0, [r0]
     894:	cmp	r0, #0
     898:	beq	8b8 <write_basic_data+0x2a4>
     89c:	ldr	r0, [fp, #-12]
     8a0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     8a4:	movw	r1, #0
     8a8:	movt	r1, #0
     8ac:	bl	0 <fprintf>
     8b0:	str	r0, [sp, #140]	; 0x8c
     8b4:	b	8d0 <write_basic_data+0x2bc>
     8b8:	ldr	r0, [fp, #-12]
     8bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
     8c0:	movw	r1, #0
     8c4:	movt	r1, #0
     8c8:	bl	0 <fprintf>
     8cc:	str	r0, [sp, #136]	; 0x88
     8d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
     8d4:	bl	0 <free>
     8d8:	b	d98 <write_basic_data+0x784>
     8dc:	movw	r0, #0
     8e0:	movt	r0, #0
     8e4:	add	r0, r0, #144	; 0x90
     8e8:	sub	r1, fp, #48	; 0x30
     8ec:	bl	0 <coda_cursor_get_bit_size>
     8f0:	cmp	r0, #0
     8f4:	beq	904 <write_basic_data+0x2f0>
     8f8:	movw	r0, #0
     8fc:	movt	r0, #0
     900:	blx	r0
     904:	ldr	r0, [fp, #-48]	; 0xffffffd0
     908:	ldr	r1, [fp, #-44]	; 0xffffffd4
     90c:	lsr	r2, r0, #3
     910:	orr	r2, r2, r1, lsl #29
     914:	asr	r1, r1, #3
     918:	and	r0, r0, #7
     91c:	adds	r3, r2, #1
     920:	adc	ip, r1, #0
     924:	cmp	r0, #0
     928:	movne	r2, r3
     92c:	cmp	r0, #0
     930:	movne	r1, ip
     934:	str	r2, [fp, #-56]	; 0xffffffc8
     938:	str	r1, [fp, #-52]	; 0xffffffcc
     93c:	ldr	r0, [fp, #-56]	; 0xffffffc8
     940:	bl	0 <malloc>
     944:	str	r0, [fp, #-60]	; 0xffffffc4
     948:	ldr	r0, [fp, #-60]	; 0xffffffc4
     94c:	movw	r1, #0
     950:	cmp	r0, r1
     954:	bne	988 <write_basic_data+0x374>
     958:	ldr	r2, [fp, #-56]	; 0xffffffc8
     95c:	mvn	r0, #0
     960:	movw	r1, #0
     964:	movt	r1, #0
     968:	movw	r3, #0
     96c:	movt	r3, #0
     970:	movw	ip, #163	; 0xa3
     974:	str	ip, [sp]
     978:	bl	0 <coda_set_error>
     97c:	movw	r0, #0
     980:	movt	r0, #0
     984:	blx	r0
     988:	movw	r0, #0
     98c:	movt	r0, #0
     990:	add	r0, r0, #144	; 0x90
     994:	ldr	r1, [fp, #-60]	; 0xffffffc4
     998:	ldr	r2, [fp, #-48]	; 0xffffffd0
     99c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     9a0:	mov	ip, sp
     9a4:	str	r3, [ip, #4]
     9a8:	str	r2, [ip]
     9ac:	movw	r2, #0
     9b0:	movt	r2, #0
     9b4:	add	r2, r2, #144	; 0x90
     9b8:	mov	r3, #0
     9bc:	str	r0, [sp, #132]	; 0x84
     9c0:	mov	r0, r2
     9c4:	mov	r2, r3
     9c8:	bl	0 <coda_cursor_read_bits>
     9cc:	cmp	r0, #0
     9d0:	beq	9e0 <write_basic_data+0x3cc>
     9d4:	movw	r0, #0
     9d8:	movt	r0, #0
     9dc:	blx	r0
     9e0:	movw	r0, #0
     9e4:	str	r0, [fp, #-64]	; 0xffffffc0
     9e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
     9ec:	ldr	r1, [fp, #-56]	; 0xffffffc8
     9f0:	ldr	r2, [fp, #-52]	; 0xffffffcc
     9f4:	subs	r1, r0, r1
     9f8:	rscs	r0, r2, r0, asr #31
     9fc:	str	r1, [sp, #128]	; 0x80
     a00:	str	r0, [sp, #124]	; 0x7c
     a04:	bge	bc8 <write_basic_data+0x5b4>
     a08:	b	a0c <write_basic_data+0x3f8>
     a0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
     a10:	ldr	r1, [fp, #-64]	; 0xffffffc0
     a14:	ldrb	r0, [r0, r1]
     a18:	strb	r0, [fp, #-65]	; 0xffffffbf
     a1c:	ldrb	r0, [fp, #-65]	; 0xffffffbf
     a20:	mov	r1, r0
     a24:	cmp	r0, #7
     a28:	str	r1, [sp, #120]	; 0x78
     a2c:	beq	aa4 <write_basic_data+0x490>
     a30:	b	a34 <write_basic_data+0x420>
     a34:	ldr	r0, [sp, #120]	; 0x78
     a38:	cmp	r0, #8
     a3c:	beq	abc <write_basic_data+0x4a8>
     a40:	b	a44 <write_basic_data+0x430>
     a44:	ldr	r0, [sp, #120]	; 0x78
     a48:	cmp	r0, #9
     a4c:	beq	ad4 <write_basic_data+0x4c0>
     a50:	b	a54 <write_basic_data+0x440>
     a54:	ldr	r0, [sp, #120]	; 0x78
     a58:	cmp	r0, #10
     a5c:	beq	aec <write_basic_data+0x4d8>
     a60:	b	a64 <write_basic_data+0x450>
     a64:	ldr	r0, [sp, #120]	; 0x78
     a68:	cmp	r0, #11
     a6c:	beq	b04 <write_basic_data+0x4f0>
     a70:	b	a74 <write_basic_data+0x460>
     a74:	ldr	r0, [sp, #120]	; 0x78
     a78:	cmp	r0, #12
     a7c:	beq	b1c <write_basic_data+0x508>
     a80:	b	a84 <write_basic_data+0x470>
     a84:	ldr	r0, [sp, #120]	; 0x78
     a88:	cmp	r0, #13
     a8c:	beq	b34 <write_basic_data+0x520>
     a90:	b	a94 <write_basic_data+0x480>
     a94:	ldr	r0, [sp, #120]	; 0x78
     a98:	cmp	r0, #92	; 0x5c
     a9c:	beq	b4c <write_basic_data+0x538>
     aa0:	b	b64 <write_basic_data+0x550>
     aa4:	ldr	r0, [fp, #-12]
     aa8:	movw	r1, #0
     aac:	movt	r1, #0
     ab0:	bl	0 <fprintf>
     ab4:	str	r0, [sp, #116]	; 0x74
     ab8:	b	bb4 <write_basic_data+0x5a0>
     abc:	ldr	r0, [fp, #-12]
     ac0:	movw	r1, #0
     ac4:	movt	r1, #0
     ac8:	bl	0 <fprintf>
     acc:	str	r0, [sp, #112]	; 0x70
     ad0:	b	bb4 <write_basic_data+0x5a0>
     ad4:	ldr	r0, [fp, #-12]
     ad8:	movw	r1, #0
     adc:	movt	r1, #0
     ae0:	bl	0 <fprintf>
     ae4:	str	r0, [sp, #108]	; 0x6c
     ae8:	b	bb4 <write_basic_data+0x5a0>
     aec:	ldr	r0, [fp, #-12]
     af0:	movw	r1, #0
     af4:	movt	r1, #0
     af8:	bl	0 <fprintf>
     afc:	str	r0, [sp, #104]	; 0x68
     b00:	b	bb4 <write_basic_data+0x5a0>
     b04:	ldr	r0, [fp, #-12]
     b08:	movw	r1, #0
     b0c:	movt	r1, #0
     b10:	bl	0 <fprintf>
     b14:	str	r0, [sp, #100]	; 0x64
     b18:	b	bb4 <write_basic_data+0x5a0>
     b1c:	ldr	r0, [fp, #-12]
     b20:	movw	r1, #0
     b24:	movt	r1, #0
     b28:	bl	0 <fprintf>
     b2c:	str	r0, [sp, #96]	; 0x60
     b30:	b	bb4 <write_basic_data+0x5a0>
     b34:	ldr	r0, [fp, #-12]
     b38:	movw	r1, #0
     b3c:	movt	r1, #0
     b40:	bl	0 <fprintf>
     b44:	str	r0, [sp, #92]	; 0x5c
     b48:	b	bb4 <write_basic_data+0x5a0>
     b4c:	ldr	r0, [fp, #-12]
     b50:	movw	r1, #0
     b54:	movt	r1, #0
     b58:	bl	0 <fprintf>
     b5c:	str	r0, [sp, #88]	; 0x58
     b60:	b	bb4 <write_basic_data+0x5a0>
     b64:	ldrb	r0, [fp, #-65]	; 0xffffffbf
     b68:	cmp	r0, #32
     b6c:	blt	b98 <write_basic_data+0x584>
     b70:	ldrb	r0, [fp, #-65]	; 0xffffffbf
     b74:	cmp	r0, #126	; 0x7e
     b78:	bgt	b98 <write_basic_data+0x584>
     b7c:	ldr	r0, [fp, #-12]
     b80:	ldrb	r2, [fp, #-65]	; 0xffffffbf
     b84:	movw	r1, #0
     b88:	movt	r1, #0
     b8c:	bl	0 <fprintf>
     b90:	str	r0, [sp, #84]	; 0x54
     b94:	b	bb0 <write_basic_data+0x59c>
     b98:	ldr	r0, [fp, #-12]
     b9c:	ldrb	r2, [fp, #-65]	; 0xffffffbf
     ba0:	movw	r1, #0
     ba4:	movt	r1, #0
     ba8:	bl	0 <fprintf>
     bac:	str	r0, [sp, #80]	; 0x50
     bb0:	b	bb4 <write_basic_data+0x5a0>
     bb4:	b	bb8 <write_basic_data+0x5a4>
     bb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
     bbc:	add	r0, r0, #1
     bc0:	str	r0, [fp, #-64]	; 0xffffffc0
     bc4:	b	9e8 <write_basic_data+0x3d4>
     bc8:	ldr	r0, [fp, #-60]	; 0xffffffc4
     bcc:	bl	0 <free>
     bd0:	b	d98 <write_basic_data+0x784>
     bd4:	movw	r0, #0
     bd8:	movt	r0, #0
     bdc:	add	r0, r0, #144	; 0x90
     be0:	sub	r1, fp, #72	; 0x48
     be4:	bl	0 <coda_cursor_read_int32>
     be8:	cmp	r0, #0
     bec:	beq	bfc <write_basic_data+0x5e8>
     bf0:	movw	r0, #0
     bf4:	movt	r0, #0
     bf8:	blx	r0
     bfc:	ldr	r0, [fp, #-12]
     c00:	ldr	r2, [fp, #-72]	; 0xffffffb8
     c04:	movw	r1, #0
     c08:	movt	r1, #0
     c0c:	bl	0 <fprintf>
     c10:	str	r0, [sp, #76]	; 0x4c
     c14:	b	d98 <write_basic_data+0x784>
     c18:	movw	r0, #0
     c1c:	movt	r0, #0
     c20:	add	r0, r0, #144	; 0x90
     c24:	sub	r1, fp, #76	; 0x4c
     c28:	bl	0 <coda_cursor_read_uint32>
     c2c:	cmp	r0, #0
     c30:	beq	c40 <write_basic_data+0x62c>
     c34:	movw	r0, #0
     c38:	movt	r0, #0
     c3c:	blx	r0
     c40:	ldr	r0, [fp, #-12]
     c44:	ldr	r2, [fp, #-76]	; 0xffffffb4
     c48:	movw	r1, #0
     c4c:	movt	r1, #0
     c50:	bl	0 <fprintf>
     c54:	str	r0, [sp, #72]	; 0x48
     c58:	b	d98 <write_basic_data+0x784>
     c5c:	movw	r0, #0
     c60:	movt	r0, #0
     c64:	add	r0, r0, #144	; 0x90
     c68:	sub	r1, fp, #88	; 0x58
     c6c:	bl	0 <coda_cursor_read_int64>
     c70:	cmp	r0, #0
     c74:	beq	c84 <write_basic_data+0x670>
     c78:	movw	r0, #0
     c7c:	movt	r0, #0
     c80:	blx	r0
     c84:	sub	r2, fp, #109	; 0x6d
     c88:	ldr	r0, [fp, #-88]	; 0xffffffa8
     c8c:	ldr	r1, [fp, #-84]	; 0xffffffac
     c90:	bl	0 <coda_str64>
     c94:	sub	r2, fp, #109	; 0x6d
     c98:	ldr	r0, [fp, #-12]
     c9c:	movw	r1, #0
     ca0:	movt	r1, #0
     ca4:	bl	0 <fprintf>
     ca8:	str	r0, [sp, #68]	; 0x44
     cac:	b	d98 <write_basic_data+0x784>
     cb0:	movw	r0, #0
     cb4:	movt	r0, #0
     cb8:	add	r0, r0, #144	; 0x90
     cbc:	sub	r1, fp, #120	; 0x78
     cc0:	bl	0 <coda_cursor_read_uint64>
     cc4:	cmp	r0, #0
     cc8:	beq	cd8 <write_basic_data+0x6c4>
     ccc:	movw	r0, #0
     cd0:	movt	r0, #0
     cd4:	blx	r0
     cd8:	sub	r2, fp, #141	; 0x8d
     cdc:	ldr	r0, [fp, #-120]	; 0xffffff88
     ce0:	ldr	r1, [fp, #-116]	; 0xffffff8c
     ce4:	bl	0 <coda_str64u>
     ce8:	sub	r2, fp, #141	; 0x8d
     cec:	ldr	r0, [fp, #-12]
     cf0:	movw	r1, #0
     cf4:	movt	r1, #0
     cf8:	bl	0 <fprintf>
     cfc:	str	r0, [sp, #64]	; 0x40
     d00:	b	d98 <write_basic_data+0x784>
     d04:	movw	r0, #0
     d08:	movt	r0, #0
     d0c:	add	r0, r0, #144	; 0x90
     d10:	sub	r1, fp, #152	; 0x98
     d14:	bl	0 <coda_cursor_read_double>
     d18:	cmp	r0, #0
     d1c:	beq	d2c <write_basic_data+0x718>
     d20:	movw	r0, #0
     d24:	movt	r0, #0
     d28:	blx	r0
     d2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d30:	cmp	r0, #8
     d34:	bne	d58 <write_basic_data+0x744>
     d38:	ldr	r0, [fp, #-12]
     d3c:	vldr	d16, [fp, #-152]	; 0xffffff68
     d40:	movw	r1, #0
     d44:	movt	r1, #0
     d48:	vmov	r2, r3, d16
     d4c:	bl	0 <fprintf>
     d50:	str	r0, [sp, #60]	; 0x3c
     d54:	b	d74 <write_basic_data+0x760>
     d58:	ldr	r0, [fp, #-12]
     d5c:	vldr	d16, [fp, #-152]	; 0xffffff68
     d60:	movw	r1, #0
     d64:	movt	r1, #0
     d68:	vmov	r2, r3, d16
     d6c:	bl	0 <fprintf>
     d70:	str	r0, [sp, #56]	; 0x38
     d74:	b	d98 <write_basic_data+0x784>
     d78:	movw	r0, #0
     d7c:	movt	r0, #0
     d80:	movw	r1, #0
     d84:	movt	r1, #0
     d88:	movw	r2, #294	; 0x126
     d8c:	movw	r3, #0
     d90:	movt	r3, #0
     d94:	bl	0 <__assert_fail>
     d98:	b	fc4 <write_basic_data+0x9b0>
     d9c:	movw	r0, #0
     da0:	movt	r0, #0
     da4:	add	r0, r0, #8
     da8:	ldr	r1, [fp, #-16]
     dac:	movw	r2, #0
     db0:	movt	r2, #0
     db4:	add	r1, r2, r1, lsl #2
     db8:	add	r1, r1, #8
     dbc:	ldr	r1, [r1]
     dc0:	str	r0, [sp, #52]	; 0x34
     dc4:	mov	r0, r1
     dc8:	sub	r1, fp, #156	; 0x9c
     dcc:	bl	0 <coda_type_get_special_type>
     dd0:	cmp	r0, #0
     dd4:	beq	de4 <write_basic_data+0x7d0>
     dd8:	movw	r0, #0
     ddc:	movt	r0, #0
     de0:	blx	r0
     de4:	ldr	r0, [fp, #-156]	; 0xffffff64
     de8:	cmp	r0, #0
     dec:	str	r0, [sp, #48]	; 0x30
     df0:	beq	e1c <write_basic_data+0x808>
     df4:	b	df8 <write_basic_data+0x7e4>
     df8:	ldr	r0, [sp, #48]	; 0x30
     dfc:	sub	r1, r0, #1
     e00:	cmp	r1, #2
     e04:	bcc	e20 <write_basic_data+0x80c>
     e08:	b	e0c <write_basic_data+0x7f8>
     e0c:	ldr	r0, [sp, #48]	; 0x30
     e10:	cmp	r0, #3
     e14:	beq	f38 <write_basic_data+0x924>
     e18:	b	fa0 <write_basic_data+0x98c>
     e1c:	b	fa0 <write_basic_data+0x98c>
     e20:	movw	r0, #0
     e24:	movt	r0, #0
     e28:	add	r0, r0, #144	; 0x90
     e2c:	sub	r1, fp, #168	; 0xa8
     e30:	bl	0 <coda_cursor_read_double>
     e34:	cmp	r0, #0
     e38:	beq	e48 <write_basic_data+0x834>
     e3c:	movw	r0, #0
     e40:	movt	r0, #0
     e44:	blx	r0
     e48:	ldr	r0, [fp, #-156]	; 0xffffff64
     e4c:	cmp	r0, #2
     e50:	bne	f18 <write_basic_data+0x904>
     e54:	movw	r0, #0
     e58:	movt	r0, #0
     e5c:	ldr	r0, [r0]
     e60:	cmp	r0, #0
     e64:	beq	f18 <write_basic_data+0x904>
     e68:	vldr	d0, [fp, #-168]	; 0xffffff58
     e6c:	bl	0 <coda_isNaN>
     e70:	cmp	r0, #0
     e74:	bne	e88 <write_basic_data+0x874>
     e78:	vldr	d0, [fp, #-168]	; 0xffffff58
     e7c:	bl	0 <coda_isInf>
     e80:	cmp	r0, #0
     e84:	beq	ea0 <write_basic_data+0x88c>
     e88:	add	r0, sp, #189	; 0xbd
     e8c:	movw	r1, #0
     e90:	movt	r1, #0
     e94:	bl	0 <strcpy>
     e98:	str	r0, [sp, #44]	; 0x2c
     e9c:	b	ecc <write_basic_data+0x8b8>
     ea0:	add	r1, sp, #189	; 0xbd
     ea4:	vldr	d0, [fp, #-168]	; 0xffffff58
     ea8:	movw	r0, #0
     eac:	movt	r0, #0
     eb0:	bl	0 <coda_time_double_to_string>
     eb4:	cmp	r0, #0
     eb8:	beq	ec8 <write_basic_data+0x8b4>
     ebc:	movw	r0, #0
     ec0:	movt	r0, #0
     ec4:	blx	r0
     ec8:	b	ecc <write_basic_data+0x8b8>
     ecc:	movw	r0, #0
     ed0:	movt	r0, #0
     ed4:	ldr	r0, [r0]
     ed8:	cmp	r0, #0
     edc:	beq	efc <write_basic_data+0x8e8>
     ee0:	add	r2, sp, #189	; 0xbd
     ee4:	ldr	r0, [fp, #-12]
     ee8:	movw	r1, #0
     eec:	movt	r1, #0
     ef0:	bl	0 <fprintf>
     ef4:	str	r0, [sp, #40]	; 0x28
     ef8:	b	f14 <write_basic_data+0x900>
     efc:	add	r2, sp, #189	; 0xbd
     f00:	ldr	r0, [fp, #-12]
     f04:	movw	r1, #0
     f08:	movt	r1, #0
     f0c:	bl	0 <fprintf>
     f10:	str	r0, [sp, #36]	; 0x24
     f14:	b	f34 <write_basic_data+0x920>
     f18:	ldr	r0, [fp, #-12]
     f1c:	vldr	d16, [fp, #-168]	; 0xffffff58
     f20:	movw	r1, #0
     f24:	movt	r1, #0
     f28:	vmov	r2, r3, d16
     f2c:	bl	0 <fprintf>
     f30:	str	r0, [sp, #32]
     f34:	b	fa0 <write_basic_data+0x98c>
     f38:	movw	r0, #0
     f3c:	movt	r0, #0
     f40:	add	r0, r0, #144	; 0x90
     f44:	add	r1, sp, #168	; 0xa8
     f48:	bl	0 <coda_cursor_read_complex_double_pair>
     f4c:	cmp	r0, #0
     f50:	beq	f60 <write_basic_data+0x94c>
     f54:	movw	r0, #0
     f58:	movt	r0, #0
     f5c:	blx	r0
     f60:	ldr	r0, [fp, #-12]
     f64:	vldr	d16, [sp, #168]	; 0xa8
     f68:	movw	r1, #0
     f6c:	movt	r1, #0
     f70:	ldr	r1, [r1]
     f74:	vldr	d17, [sp, #176]	; 0xb0
     f78:	movw	r2, #0
     f7c:	movt	r2, #0
     f80:	str	r1, [sp, #28]
     f84:	mov	r1, r2
     f88:	vmov	r2, r3, d16
     f8c:	ldr	ip, [sp, #28]
     f90:	str	ip, [sp]
     f94:	vstr	d17, [sp, #8]
     f98:	bl	0 <fprintf>
     f9c:	str	r0, [sp, #24]
     fa0:	b	fc4 <write_basic_data+0x9b0>
     fa4:	movw	r0, #0
     fa8:	movt	r0, #0
     fac:	movw	r1, #0
     fb0:	movt	r1, #0
     fb4:	movw	r2, #368	; 0x170
     fb8:	movw	r3, #0
     fbc:	movt	r3, #0
     fc0:	bl	0 <__assert_fail>
     fc4:	ldr	r0, [fp, #-12]
     fc8:	movw	r1, #0
     fcc:	movt	r1, #0
     fd0:	bl	0 <fprintf>
     fd4:	str	r0, [sp, #20]
     fd8:	sub	sp, fp, #8
     fdc:	pop	{r4, r5, fp, pc}

00000fe0 <write_index>:
     fe0:	push	{fp, lr}
     fe4:	mov	fp, sp
     fe8:	sub	sp, sp, #32
     fec:	str	r0, [fp, #-4]
     ff0:	movw	r0, #0
     ff4:	str	r0, [fp, #-8]
     ff8:	str	r0, [fp, #-12]
     ffc:	ldr	r0, [fp, #-12]
    1000:	movw	r1, #0
    1004:	movt	r1, #0
    1008:	ldr	r1, [r1, #136]	; 0x88
    100c:	cmp	r0, r1
    1010:	bge	1110 <write_index+0x130>
    1014:	movw	r0, #0
    1018:	movt	r0, #0
    101c:	add	r0, r0, #8
    1020:	ldr	r1, [fp, #-12]
    1024:	movw	r2, #0
    1028:	movt	r2, #0
    102c:	add	r1, r2, r1, lsl #2
    1030:	add	r1, r1, #8
    1034:	ldr	r1, [r1]
    1038:	str	r0, [sp, #8]
    103c:	mov	r0, r1
    1040:	add	r1, sp, #16
    1044:	bl	0 <coda_type_get_class>
    1048:	cmp	r0, #0
    104c:	beq	105c <write_index+0x7c>
    1050:	movw	r0, #0
    1054:	movt	r0, #0
    1058:	blx	r0
    105c:	ldr	r0, [sp, #16]
    1060:	cmp	r0, #1
    1064:	bne	10fc <write_index+0x11c>
    1068:	movw	r0, #0
    106c:	str	r0, [sp, #12]
    1070:	movw	r0, #0
    1074:	movt	r0, #0
    1078:	add	r0, r0, #800	; 0x320
    107c:	ldr	r1, [sp, #12]
    1080:	ldr	r2, [fp, #-8]
    1084:	movw	r3, #80	; 0x50
    1088:	mul	r2, r2, r3
    108c:	add	r0, r0, r2
    1090:	ldr	r0, [r0, #4]
    1094:	cmp	r1, r0
    1098:	bge	10f0 <write_index+0x110>
    109c:	ldr	r0, [fp, #-4]
    10a0:	ldr	r1, [fp, #-8]
    10a4:	add	r1, r1, r1, lsl #2
    10a8:	movw	r2, #0
    10ac:	movt	r2, #0
    10b0:	add	r1, r2, r1, lsl #4
    10b4:	add	r1, r1, #848	; 0x350
    10b8:	ldr	r2, [sp, #12]
    10bc:	add	r1, r1, r2, lsl #2
    10c0:	ldr	r2, [r1]
    10c4:	movw	r1, #0
    10c8:	movt	r1, #0
    10cc:	ldr	r3, [r1]
    10d0:	movw	r1, #0
    10d4:	movt	r1, #0
    10d8:	bl	0 <fprintf>
    10dc:	str	r0, [sp, #4]
    10e0:	ldr	r0, [sp, #12]
    10e4:	add	r0, r0, #1
    10e8:	str	r0, [sp, #12]
    10ec:	b	1070 <write_index+0x90>
    10f0:	ldr	r0, [fp, #-8]
    10f4:	add	r0, r0, #1
    10f8:	str	r0, [fp, #-8]
    10fc:	b	1100 <write_index+0x120>
    1100:	ldr	r0, [fp, #-12]
    1104:	add	r0, r0, #1
    1108:	str	r0, [fp, #-12]
    110c:	b	ffc <write_index+0x1c>
    1110:	mov	sp, fp
    1114:	pop	{fp, pc}
