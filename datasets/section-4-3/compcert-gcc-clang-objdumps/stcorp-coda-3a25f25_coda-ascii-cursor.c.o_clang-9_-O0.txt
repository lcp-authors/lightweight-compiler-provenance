
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_parse_int64>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #80	; 0x50
       c:	str	r0, [fp, #-8]
      10:	str	r1, [fp, #-12]
      14:	str	r2, [fp, #-16]
      18:	str	r3, [fp, #-20]	; 0xffffffec
      1c:	movw	r0, #0
      20:	str	r0, [sp, #36]	; 0x24
      24:	ldr	r0, [fp, #-12]
      28:	str	r0, [fp, #-24]	; 0xffffffe8
      2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
      30:	cmp	r0, #0
      34:	movw	r0, #0
      38:	str	r0, [sp, #20]
      3c:	ble	78 <coda_ascii_parse_int64+0x78>
      40:	ldr	r0, [fp, #-8]
      44:	ldrb	r0, [r0]
      48:	cmp	r0, #32
      4c:	movw	r0, #1
      50:	str	r0, [sp, #16]
      54:	beq	70 <coda_ascii_parse_int64+0x70>
      58:	ldr	r0, [fp, #-8]
      5c:	ldrb	r0, [r0]
      60:	cmp	r0, #9
      64:	movw	r0, #0
      68:	moveq	r0, #1
      6c:	str	r0, [sp, #16]
      70:	ldr	r0, [sp, #16]
      74:	str	r0, [sp, #20]
      78:	ldr	r0, [sp, #20]
      7c:	tst	r0, #1
      80:	beq	a4 <coda_ascii_parse_int64+0xa4>
      84:	ldr	r0, [fp, #-8]
      88:	add	r0, r0, #1
      8c:	str	r0, [fp, #-8]
      90:	ldr	r0, [fp, #-24]	; 0xffffffe8
      94:	mvn	r1, #0
      98:	add	r0, r0, r1
      9c:	str	r0, [fp, #-24]	; 0xffffffe8
      a0:	b	2c <coda_ascii_parse_int64+0x2c>
      a4:	ldr	r0, [fp, #-8]
      a8:	ldrb	r0, [r0]
      ac:	cmp	r0, #43	; 0x2b
      b0:	beq	c4 <coda_ascii_parse_int64+0xc4>
      b4:	ldr	r0, [fp, #-8]
      b8:	ldrb	r0, [r0]
      bc:	cmp	r0, #45	; 0x2d
      c0:	bne	fc <coda_ascii_parse_int64+0xfc>
      c4:	ldr	r0, [fp, #-8]
      c8:	ldrb	r0, [r0]
      cc:	cmp	r0, #45	; 0x2d
      d0:	movw	r0, #0
      d4:	moveq	r0, #1
      d8:	and	r0, r0, #1
      dc:	str	r0, [sp, #36]	; 0x24
      e0:	ldr	r0, [fp, #-8]
      e4:	add	r0, r0, #1
      e8:	str	r0, [fp, #-8]
      ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
      f0:	mvn	r1, #0
      f4:	add	r0, r0, r1
      f8:	str	r0, [fp, #-24]	; 0xffffffe8
      fc:	mov	r0, #0
     100:	str	r0, [sp, #44]	; 0x2c
     104:	str	r0, [sp, #40]	; 0x28
     108:	movw	r0, #0
     10c:	str	r0, [fp, #-28]	; 0xffffffe4
     110:	ldr	r0, [fp, #-24]	; 0xffffffe8
     114:	cmp	r0, #0
     118:	ble	228 <coda_ascii_parse_int64+0x228>
     11c:	ldr	r0, [fp, #-8]
     120:	ldrb	r0, [r0]
     124:	cmp	r0, #48	; 0x30
     128:	blt	13c <coda_ascii_parse_int64+0x13c>
     12c:	ldr	r0, [fp, #-8]
     130:	ldrb	r0, [r0]
     134:	cmp	r0, #57	; 0x39
     138:	ble	140 <coda_ascii_parse_int64+0x140>
     13c:	b	228 <coda_ascii_parse_int64+0x228>
     140:	ldr	r0, [fp, #-8]
     144:	ldrb	r0, [r0]
     148:	sub	r0, r0, #48	; 0x30
     14c:	asr	r1, r0, #31
     150:	str	r0, [sp, #24]
     154:	str	r1, [sp, #28]
     158:	ldr	r0, [sp, #40]	; 0x28
     15c:	ldr	r1, [sp, #44]	; 0x2c
     160:	ldr	r2, [sp, #24]
     164:	ldr	r3, [sp, #28]
     168:	mvn	ip, #-2147483648	; 0x80000000
     16c:	sub	r3, ip, r3
     170:	mvn	r2, r2
     174:	mov	ip, #10
     178:	mov	lr, #0
     17c:	str	r0, [sp, #12]
     180:	mov	r0, r2
     184:	str	r1, [sp, #8]
     188:	mov	r1, r3
     18c:	mov	r2, ip
     190:	mov	r3, lr
     194:	bl	0 <__aeabi_ldivmod>
     198:	ldr	r2, [sp, #12]
     19c:	subs	r0, r0, r2
     1a0:	ldr	r2, [sp, #8]
     1a4:	sbcs	r1, r1, r2
     1a8:	bge	1cc <coda_ascii_parse_int64+0x1cc>
     1ac:	b	1b0 <coda_ascii_parse_int64+0x1b0>
     1b0:	mvn	r0, #102	; 0x66
     1b4:	movw	r1, #0
     1b8:	movt	r1, #0
     1bc:	bl	0 <coda_set_error>
     1c0:	mvn	r0, #0
     1c4:	str	r0, [fp, #-4]
     1c8:	b	358 <coda_ascii_parse_int64+0x358>
     1cc:	ldr	r0, [sp, #40]	; 0x28
     1d0:	ldr	r1, [sp, #44]	; 0x2c
     1d4:	mov	r2, #10
     1d8:	umull	r0, r2, r0, r2
     1dc:	add	r1, r1, r1, lsl #2
     1e0:	add	r1, r2, r1, lsl #1
     1e4:	ldr	r2, [sp, #24]
     1e8:	ldr	r3, [sp, #28]
     1ec:	adds	r0, r0, r2
     1f0:	adc	r1, r1, r3
     1f4:	str	r0, [sp, #40]	; 0x28
     1f8:	str	r1, [sp, #44]	; 0x2c
     1fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
     200:	add	r0, r0, #1
     204:	str	r0, [fp, #-28]	; 0xffffffe4
     208:	ldr	r0, [fp, #-8]
     20c:	add	r0, r0, #1
     210:	str	r0, [fp, #-8]
     214:	ldr	r0, [fp, #-24]	; 0xffffffe8
     218:	mvn	r1, #0
     21c:	add	r0, r0, r1
     220:	str	r0, [fp, #-24]	; 0xffffffe8
     224:	b	110 <coda_ascii_parse_int64+0x110>
     228:	ldr	r0, [fp, #-28]	; 0xffffffe4
     22c:	cmp	r0, #0
     230:	bne	250 <coda_ascii_parse_int64+0x250>
     234:	mvn	r0, #102	; 0x66
     238:	movw	r1, #0
     23c:	movt	r1, #0
     240:	bl	0 <coda_set_error>
     244:	mvn	r0, #0
     248:	str	r0, [fp, #-4]
     24c:	b	358 <coda_ascii_parse_int64+0x358>
     250:	ldr	r0, [fp, #-20]	; 0xffffffec
     254:	cmp	r0, #0
     258:	bne	310 <coda_ascii_parse_int64+0x310>
     25c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     260:	cmp	r0, #0
     264:	beq	310 <coda_ascii_parse_int64+0x310>
     268:	b	26c <coda_ascii_parse_int64+0x26c>
     26c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     270:	cmp	r0, #0
     274:	movw	r0, #0
     278:	str	r0, [sp, #4]
     27c:	ble	2b8 <coda_ascii_parse_int64+0x2b8>
     280:	ldr	r0, [fp, #-8]
     284:	ldrb	r0, [r0]
     288:	cmp	r0, #32
     28c:	movw	r0, #1
     290:	str	r0, [sp]
     294:	beq	2b0 <coda_ascii_parse_int64+0x2b0>
     298:	ldr	r0, [fp, #-8]
     29c:	ldrb	r0, [r0]
     2a0:	cmp	r0, #9
     2a4:	movw	r0, #0
     2a8:	moveq	r0, #1
     2ac:	str	r0, [sp]
     2b0:	ldr	r0, [sp]
     2b4:	str	r0, [sp, #4]
     2b8:	ldr	r0, [sp, #4]
     2bc:	tst	r0, #1
     2c0:	beq	2e4 <coda_ascii_parse_int64+0x2e4>
     2c4:	ldr	r0, [fp, #-8]
     2c8:	add	r0, r0, #1
     2cc:	str	r0, [fp, #-8]
     2d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     2d4:	mvn	r1, #0
     2d8:	add	r0, r0, r1
     2dc:	str	r0, [fp, #-24]	; 0xffffffe8
     2e0:	b	26c <coda_ascii_parse_int64+0x26c>
     2e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     2e8:	cmp	r0, #0
     2ec:	beq	30c <coda_ascii_parse_int64+0x30c>
     2f0:	mvn	r0, #102	; 0x66
     2f4:	movw	r1, #0
     2f8:	movt	r1, #0
     2fc:	bl	0 <coda_set_error>
     300:	mvn	r0, #0
     304:	str	r0, [fp, #-4]
     308:	b	358 <coda_ascii_parse_int64+0x358>
     30c:	b	310 <coda_ascii_parse_int64+0x310>
     310:	ldr	r0, [sp, #36]	; 0x24
     314:	cmp	r0, #0
     318:	beq	334 <coda_ascii_parse_int64+0x334>
     31c:	ldr	r0, [sp, #40]	; 0x28
     320:	ldr	r1, [sp, #44]	; 0x2c
     324:	rsbs	r0, r0, #0
     328:	rsc	r1, r1, #0
     32c:	str	r0, [sp, #40]	; 0x28
     330:	str	r1, [sp, #44]	; 0x2c
     334:	ldr	r0, [sp, #40]	; 0x28
     338:	ldr	r1, [sp, #44]	; 0x2c
     33c:	ldr	r2, [fp, #-16]
     340:	str	r1, [r2, #4]
     344:	str	r0, [r2]
     348:	ldr	r0, [fp, #-12]
     34c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     350:	sub	r0, r0, r1
     354:	str	r0, [fp, #-4]
     358:	ldr	r0, [fp, #-4]
     35c:	mov	sp, fp
     360:	pop	{fp, pc}

00000364 <coda_ascii_parse_uint64>:
     364:	push	{fp, lr}
     368:	mov	fp, sp
     36c:	sub	sp, sp, #72	; 0x48
     370:	str	r0, [fp, #-8]
     374:	str	r1, [fp, #-12]
     378:	str	r2, [fp, #-16]
     37c:	str	r3, [fp, #-20]	; 0xffffffec
     380:	ldr	r0, [fp, #-12]
     384:	str	r0, [fp, #-24]	; 0xffffffe8
     388:	ldr	r0, [fp, #-24]	; 0xffffffe8
     38c:	cmp	r0, #0
     390:	movw	r0, #0
     394:	str	r0, [sp, #20]
     398:	ble	3d4 <coda_ascii_parse_uint64+0x70>
     39c:	ldr	r0, [fp, #-8]
     3a0:	ldrb	r0, [r0]
     3a4:	cmp	r0, #32
     3a8:	movw	r0, #1
     3ac:	str	r0, [sp, #16]
     3b0:	beq	3cc <coda_ascii_parse_uint64+0x68>
     3b4:	ldr	r0, [fp, #-8]
     3b8:	ldrb	r0, [r0]
     3bc:	cmp	r0, #9
     3c0:	movw	r0, #0
     3c4:	moveq	r0, #1
     3c8:	str	r0, [sp, #16]
     3cc:	ldr	r0, [sp, #16]
     3d0:	str	r0, [sp, #20]
     3d4:	ldr	r0, [sp, #20]
     3d8:	tst	r0, #1
     3dc:	beq	400 <coda_ascii_parse_uint64+0x9c>
     3e0:	ldr	r0, [fp, #-8]
     3e4:	add	r0, r0, #1
     3e8:	str	r0, [fp, #-8]
     3ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3f0:	mvn	r1, #0
     3f4:	add	r0, r0, r1
     3f8:	str	r0, [fp, #-24]	; 0xffffffe8
     3fc:	b	388 <coda_ascii_parse_uint64+0x24>
     400:	ldr	r0, [fp, #-8]
     404:	ldrb	r0, [r0]
     408:	cmp	r0, #43	; 0x2b
     40c:	bne	42c <coda_ascii_parse_uint64+0xc8>
     410:	ldr	r0, [fp, #-8]
     414:	add	r0, r0, #1
     418:	str	r0, [fp, #-8]
     41c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     420:	mvn	r1, #0
     424:	add	r0, r0, r1
     428:	str	r0, [fp, #-24]	; 0xffffffe8
     42c:	mov	r0, #0
     430:	str	r0, [sp, #36]	; 0x24
     434:	str	r0, [sp, #32]
     438:	movw	r0, #0
     43c:	str	r0, [fp, #-28]	; 0xffffffe4
     440:	ldr	r0, [fp, #-24]	; 0xffffffe8
     444:	cmp	r0, #0
     448:	ble	554 <coda_ascii_parse_uint64+0x1f0>
     44c:	ldr	r0, [fp, #-8]
     450:	ldrb	r0, [r0]
     454:	cmp	r0, #48	; 0x30
     458:	blt	46c <coda_ascii_parse_uint64+0x108>
     45c:	ldr	r0, [fp, #-8]
     460:	ldrb	r0, [r0]
     464:	cmp	r0, #57	; 0x39
     468:	ble	470 <coda_ascii_parse_uint64+0x10c>
     46c:	b	554 <coda_ascii_parse_uint64+0x1f0>
     470:	ldr	r0, [fp, #-8]
     474:	ldrb	r0, [r0]
     478:	sub	r0, r0, #48	; 0x30
     47c:	asr	r1, r0, #31
     480:	str	r0, [sp, #24]
     484:	str	r1, [sp, #28]
     488:	ldr	r0, [sp, #32]
     48c:	ldr	r1, [sp, #36]	; 0x24
     490:	ldr	r2, [sp, #24]
     494:	ldr	r3, [sp, #28]
     498:	mvn	r2, r2
     49c:	mvn	r3, r3
     4a0:	mov	ip, #10
     4a4:	mov	lr, #0
     4a8:	str	r0, [sp, #12]
     4ac:	mov	r0, r2
     4b0:	str	r1, [sp, #8]
     4b4:	mov	r1, r3
     4b8:	mov	r2, ip
     4bc:	mov	r3, lr
     4c0:	bl	0 <__aeabi_uldivmod>
     4c4:	ldr	r2, [sp, #12]
     4c8:	subs	r0, r0, r2
     4cc:	ldr	r2, [sp, #8]
     4d0:	sbcs	r1, r1, r2
     4d4:	bcs	4f8 <coda_ascii_parse_uint64+0x194>
     4d8:	b	4dc <coda_ascii_parse_uint64+0x178>
     4dc:	mvn	r0, #102	; 0x66
     4e0:	movw	r1, #0
     4e4:	movt	r1, #0
     4e8:	bl	0 <coda_set_error>
     4ec:	mvn	r0, #0
     4f0:	str	r0, [fp, #-4]
     4f4:	b	660 <coda_ascii_parse_uint64+0x2fc>
     4f8:	ldr	r0, [sp, #32]
     4fc:	ldr	r1, [sp, #36]	; 0x24
     500:	mov	r2, #10
     504:	umull	r0, r2, r0, r2
     508:	add	r1, r1, r1, lsl #2
     50c:	add	r1, r2, r1, lsl #1
     510:	ldr	r2, [sp, #24]
     514:	ldr	r3, [sp, #28]
     518:	adds	r0, r0, r2
     51c:	adc	r1, r1, r3
     520:	str	r0, [sp, #32]
     524:	str	r1, [sp, #36]	; 0x24
     528:	ldr	r0, [fp, #-28]	; 0xffffffe4
     52c:	add	r0, r0, #1
     530:	str	r0, [fp, #-28]	; 0xffffffe4
     534:	ldr	r0, [fp, #-8]
     538:	add	r0, r0, #1
     53c:	str	r0, [fp, #-8]
     540:	ldr	r0, [fp, #-24]	; 0xffffffe8
     544:	mvn	r1, #0
     548:	add	r0, r0, r1
     54c:	str	r0, [fp, #-24]	; 0xffffffe8
     550:	b	440 <coda_ascii_parse_uint64+0xdc>
     554:	ldr	r0, [fp, #-28]	; 0xffffffe4
     558:	cmp	r0, #0
     55c:	bne	57c <coda_ascii_parse_uint64+0x218>
     560:	mvn	r0, #102	; 0x66
     564:	movw	r1, #0
     568:	movt	r1, #0
     56c:	bl	0 <coda_set_error>
     570:	mvn	r0, #0
     574:	str	r0, [fp, #-4]
     578:	b	660 <coda_ascii_parse_uint64+0x2fc>
     57c:	ldr	r0, [fp, #-20]	; 0xffffffec
     580:	cmp	r0, #0
     584:	bne	63c <coda_ascii_parse_uint64+0x2d8>
     588:	ldr	r0, [fp, #-24]	; 0xffffffe8
     58c:	cmp	r0, #0
     590:	beq	63c <coda_ascii_parse_uint64+0x2d8>
     594:	b	598 <coda_ascii_parse_uint64+0x234>
     598:	ldr	r0, [fp, #-24]	; 0xffffffe8
     59c:	cmp	r0, #0
     5a0:	movw	r0, #0
     5a4:	str	r0, [sp, #4]
     5a8:	ble	5e4 <coda_ascii_parse_uint64+0x280>
     5ac:	ldr	r0, [fp, #-8]
     5b0:	ldrb	r0, [r0]
     5b4:	cmp	r0, #32
     5b8:	movw	r0, #1
     5bc:	str	r0, [sp]
     5c0:	beq	5dc <coda_ascii_parse_uint64+0x278>
     5c4:	ldr	r0, [fp, #-8]
     5c8:	ldrb	r0, [r0]
     5cc:	cmp	r0, #9
     5d0:	movw	r0, #0
     5d4:	moveq	r0, #1
     5d8:	str	r0, [sp]
     5dc:	ldr	r0, [sp]
     5e0:	str	r0, [sp, #4]
     5e4:	ldr	r0, [sp, #4]
     5e8:	tst	r0, #1
     5ec:	beq	610 <coda_ascii_parse_uint64+0x2ac>
     5f0:	ldr	r0, [fp, #-8]
     5f4:	add	r0, r0, #1
     5f8:	str	r0, [fp, #-8]
     5fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     600:	mvn	r1, #0
     604:	add	r0, r0, r1
     608:	str	r0, [fp, #-24]	; 0xffffffe8
     60c:	b	598 <coda_ascii_parse_uint64+0x234>
     610:	ldr	r0, [fp, #-24]	; 0xffffffe8
     614:	cmp	r0, #0
     618:	beq	638 <coda_ascii_parse_uint64+0x2d4>
     61c:	mvn	r0, #102	; 0x66
     620:	movw	r1, #0
     624:	movt	r1, #0
     628:	bl	0 <coda_set_error>
     62c:	mvn	r0, #0
     630:	str	r0, [fp, #-4]
     634:	b	660 <coda_ascii_parse_uint64+0x2fc>
     638:	b	63c <coda_ascii_parse_uint64+0x2d8>
     63c:	ldr	r0, [sp, #32]
     640:	ldr	r1, [sp, #36]	; 0x24
     644:	ldr	r2, [fp, #-16]
     648:	str	r1, [r2, #4]
     64c:	str	r0, [r2]
     650:	ldr	r0, [fp, #-12]
     654:	ldr	r1, [fp, #-24]	; 0xffffffe8
     658:	sub	r0, r0, r1
     65c:	str	r0, [fp, #-4]
     660:	ldr	r0, [fp, #-4]
     664:	mov	sp, fp
     668:	pop	{fp, pc}
     66c:	nop	{0}

00000670 <coda_ascii_parse_double>:
     670:	push	{fp, lr}
     674:	mov	fp, sp
     678:	sub	sp, sp, #88	; 0x58
     67c:	str	r0, [fp, #-8]
     680:	str	r1, [fp, #-12]
     684:	str	r2, [fp, #-16]
     688:	str	r3, [fp, #-20]	; 0xffffffec
     68c:	movw	r0, #0
     690:	str	r0, [sp, #32]
     694:	ldr	r0, [fp, #-12]
     698:	str	r0, [fp, #-24]	; 0xffffffe8
     69c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6a0:	cmp	r0, #0
     6a4:	movw	r0, #0
     6a8:	str	r0, [sp, #24]
     6ac:	ble	6e8 <coda_ascii_parse_double+0x78>
     6b0:	ldr	r0, [fp, #-8]
     6b4:	ldrb	r0, [r0]
     6b8:	cmp	r0, #32
     6bc:	movw	r0, #1
     6c0:	str	r0, [sp, #20]
     6c4:	beq	6e0 <coda_ascii_parse_double+0x70>
     6c8:	ldr	r0, [fp, #-8]
     6cc:	ldrb	r0, [r0]
     6d0:	cmp	r0, #9
     6d4:	movw	r0, #0
     6d8:	moveq	r0, #1
     6dc:	str	r0, [sp, #20]
     6e0:	ldr	r0, [sp, #20]
     6e4:	str	r0, [sp, #24]
     6e8:	ldr	r0, [sp, #24]
     6ec:	tst	r0, #1
     6f0:	beq	714 <coda_ascii_parse_double+0xa4>
     6f4:	ldr	r0, [fp, #-8]
     6f8:	add	r0, r0, #1
     6fc:	str	r0, [fp, #-8]
     700:	ldr	r0, [fp, #-24]	; 0xffffffe8
     704:	mvn	r1, #0
     708:	add	r0, r0, r1
     70c:	str	r0, [fp, #-24]	; 0xffffffe8
     710:	b	69c <coda_ascii_parse_double+0x2c>
     714:	movw	r0, #0
     718:	str	r0, [fp, #-36]	; 0xffffffdc
     71c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     720:	cmp	r0, #0
     724:	ble	78c <coda_ascii_parse_double+0x11c>
     728:	ldr	r0, [fp, #-8]
     72c:	ldrb	r0, [r0]
     730:	cmp	r0, #43	; 0x2b
     734:	beq	748 <coda_ascii_parse_double+0xd8>
     738:	ldr	r0, [fp, #-8]
     73c:	ldrb	r0, [r0]
     740:	cmp	r0, #45	; 0x2d
     744:	bne	788 <coda_ascii_parse_double+0x118>
     748:	ldr	r0, [fp, #-8]
     74c:	ldrb	r0, [r0]
     750:	cmp	r0, #45	; 0x2d
     754:	movw	r0, #0
     758:	moveq	r0, #1
     75c:	and	r0, r0, #1
     760:	str	r0, [sp, #32]
     764:	movw	r0, #1
     768:	str	r0, [fp, #-36]	; 0xffffffdc
     76c:	ldr	r0, [fp, #-8]
     770:	add	r0, r0, #1
     774:	str	r0, [fp, #-8]
     778:	ldr	r0, [fp, #-24]	; 0xffffffe8
     77c:	mvn	r1, #0
     780:	add	r0, r0, r1
     784:	str	r0, [fp, #-24]	; 0xffffffe8
     788:	b	78c <coda_ascii_parse_double+0x11c>
     78c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     790:	cmp	r0, #3
     794:	blt	94c <coda_ascii_parse_double+0x2dc>
     798:	ldr	r0, [fp, #-8]
     79c:	ldrb	r0, [r0]
     7a0:	cmp	r0, #78	; 0x4e
     7a4:	beq	7b8 <coda_ascii_parse_double+0x148>
     7a8:	ldr	r0, [fp, #-8]
     7ac:	ldrb	r0, [r0]
     7b0:	cmp	r0, #110	; 0x6e
     7b4:	bne	864 <coda_ascii_parse_double+0x1f4>
     7b8:	ldr	r0, [fp, #-8]
     7bc:	ldrb	r0, [r0, #1]
     7c0:	cmp	r0, #65	; 0x41
     7c4:	beq	7d8 <coda_ascii_parse_double+0x168>
     7c8:	ldr	r0, [fp, #-8]
     7cc:	ldrb	r0, [r0, #1]
     7d0:	cmp	r0, #97	; 0x61
     7d4:	bne	864 <coda_ascii_parse_double+0x1f4>
     7d8:	ldr	r0, [fp, #-8]
     7dc:	ldrb	r0, [r0, #2]
     7e0:	cmp	r0, #78	; 0x4e
     7e4:	beq	7f8 <coda_ascii_parse_double+0x188>
     7e8:	ldr	r0, [fp, #-8]
     7ec:	ldrb	r0, [r0, #2]
     7f0:	cmp	r0, #110	; 0x6e
     7f4:	bne	864 <coda_ascii_parse_double+0x1f4>
     7f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
     7fc:	cmp	r0, #0
     800:	bne	864 <coda_ascii_parse_double+0x1f4>
     804:	ldr	r0, [fp, #-24]	; 0xffffffe8
     808:	sub	r0, r0, #3
     80c:	str	r0, [fp, #-24]	; 0xffffffe8
     810:	ldr	r0, [fp, #-20]	; 0xffffffec
     814:	cmp	r0, #0
     818:	bne	844 <coda_ascii_parse_double+0x1d4>
     81c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     820:	cmp	r0, #0
     824:	beq	844 <coda_ascii_parse_double+0x1d4>
     828:	mvn	r0, #102	; 0x66
     82c:	movw	r1, #0
     830:	movt	r1, #0
     834:	bl	0 <coda_set_error>
     838:	mvn	r0, #0
     83c:	str	r0, [fp, #-4]
     840:	b	db4 <coda_ascii_parse_double+0x744>
     844:	bl	0 <coda_NaN>
     848:	ldr	r0, [fp, #-16]
     84c:	vstr	d0, [r0]
     850:	ldr	r0, [fp, #-12]
     854:	ldr	r1, [fp, #-24]	; 0xffffffe8
     858:	sub	r0, r0, r1
     85c:	str	r0, [fp, #-4]
     860:	b	db4 <coda_ascii_parse_double+0x744>
     864:	ldr	r0, [fp, #-8]
     868:	ldrb	r0, [r0]
     86c:	cmp	r0, #73	; 0x49
     870:	beq	884 <coda_ascii_parse_double+0x214>
     874:	ldr	r0, [fp, #-8]
     878:	ldrb	r0, [r0]
     87c:	cmp	r0, #105	; 0x69
     880:	bne	944 <coda_ascii_parse_double+0x2d4>
     884:	ldr	r0, [fp, #-8]
     888:	ldrb	r0, [r0, #1]
     88c:	cmp	r0, #78	; 0x4e
     890:	beq	8a4 <coda_ascii_parse_double+0x234>
     894:	ldr	r0, [fp, #-8]
     898:	ldrb	r0, [r0, #1]
     89c:	cmp	r0, #110	; 0x6e
     8a0:	bne	944 <coda_ascii_parse_double+0x2d4>
     8a4:	ldr	r0, [fp, #-8]
     8a8:	ldrb	r0, [r0, #2]
     8ac:	cmp	r0, #70	; 0x46
     8b0:	beq	8c4 <coda_ascii_parse_double+0x254>
     8b4:	ldr	r0, [fp, #-8]
     8b8:	ldrb	r0, [r0, #2]
     8bc:	cmp	r0, #102	; 0x66
     8c0:	bne	944 <coda_ascii_parse_double+0x2d4>
     8c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8c8:	sub	r0, r0, #3
     8cc:	str	r0, [fp, #-24]	; 0xffffffe8
     8d0:	ldr	r0, [fp, #-20]	; 0xffffffec
     8d4:	cmp	r0, #0
     8d8:	bne	904 <coda_ascii_parse_double+0x294>
     8dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8e0:	cmp	r0, #0
     8e4:	beq	904 <coda_ascii_parse_double+0x294>
     8e8:	mvn	r0, #102	; 0x66
     8ec:	movw	r1, #0
     8f0:	movt	r1, #0
     8f4:	bl	0 <coda_set_error>
     8f8:	mvn	r0, #0
     8fc:	str	r0, [fp, #-4]
     900:	b	db4 <coda_ascii_parse_double+0x744>
     904:	ldr	r0, [sp, #32]
     908:	cmp	r0, #0
     90c:	beq	91c <coda_ascii_parse_double+0x2ac>
     910:	bl	0 <coda_MinInf>
     914:	vstr	d0, [sp, #8]
     918:	b	924 <coda_ascii_parse_double+0x2b4>
     91c:	bl	0 <coda_PlusInf>
     920:	vstr	d0, [sp, #8]
     924:	vldr	d16, [sp, #8]
     928:	ldr	r0, [fp, #-16]
     92c:	vstr	d16, [r0]
     930:	ldr	r0, [fp, #-12]
     934:	ldr	r1, [fp, #-24]	; 0xffffffe8
     938:	sub	r0, r0, r1
     93c:	str	r0, [fp, #-4]
     940:	b	db4 <coda_ascii_parse_double+0x744>
     944:	b	948 <coda_ascii_parse_double+0x2d8>
     948:	b	94c <coda_ascii_parse_double+0x2dc>
     94c:	vldr	d16, [pc, #1004]	; d40 <coda_ascii_parse_double+0x6d0>
     950:	vstr	d16, [sp, #40]	; 0x28
     954:	movw	r0, #0
     958:	str	r0, [sp, #36]	; 0x24
     95c:	str	r0, [fp, #-28]	; 0xffffffe4
     960:	ldr	r0, [fp, #-24]	; 0xffffffe8
     964:	cmp	r0, #0
     968:	ble	9e4 <coda_ascii_parse_double+0x374>
     96c:	ldr	r0, [fp, #-8]
     970:	ldrb	r0, [r0]
     974:	cmp	r0, #48	; 0x30
     978:	blt	98c <coda_ascii_parse_double+0x31c>
     97c:	ldr	r0, [fp, #-8]
     980:	ldrb	r0, [r0]
     984:	cmp	r0, #57	; 0x39
     988:	ble	990 <coda_ascii_parse_double+0x320>
     98c:	b	9e4 <coda_ascii_parse_double+0x374>
     990:	vldr	d16, [sp, #40]	; 0x28
     994:	vmov.f64	d17, #36	; 0x41200000  10.0
     998:	vmul.f64	d16, d17, d16
     99c:	ldr	r0, [fp, #-8]
     9a0:	ldrb	r0, [r0]
     9a4:	sub	r0, r0, #48	; 0x30
     9a8:	vmov	s0, r0
     9ac:	vcvt.f64.s32	d17, s0
     9b0:	vadd.f64	d16, d16, d17
     9b4:	vstr	d16, [sp, #40]	; 0x28
     9b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     9bc:	add	r0, r0, #1
     9c0:	str	r0, [fp, #-28]	; 0xffffffe4
     9c4:	ldr	r0, [fp, #-8]
     9c8:	add	r0, r0, #1
     9cc:	str	r0, [fp, #-8]
     9d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9d4:	mvn	r1, #0
     9d8:	add	r0, r0, r1
     9dc:	str	r0, [fp, #-24]	; 0xffffffe8
     9e0:	b	960 <coda_ascii_parse_double+0x2f0>
     9e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9e8:	cmp	r0, #0
     9ec:	ble	ab4 <coda_ascii_parse_double+0x444>
     9f0:	ldr	r0, [fp, #-8]
     9f4:	ldrb	r0, [r0]
     9f8:	cmp	r0, #46	; 0x2e
     9fc:	bne	ab0 <coda_ascii_parse_double+0x440>
     a00:	ldr	r0, [fp, #-8]
     a04:	add	r0, r0, #1
     a08:	str	r0, [fp, #-8]
     a0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a10:	mvn	r1, #0
     a14:	add	r0, r0, r1
     a18:	str	r0, [fp, #-24]	; 0xffffffe8
     a1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a20:	cmp	r0, #0
     a24:	ble	aac <coda_ascii_parse_double+0x43c>
     a28:	ldr	r0, [fp, #-8]
     a2c:	ldrb	r0, [r0]
     a30:	cmp	r0, #48	; 0x30
     a34:	blt	a48 <coda_ascii_parse_double+0x3d8>
     a38:	ldr	r0, [fp, #-8]
     a3c:	ldrb	r0, [r0]
     a40:	cmp	r0, #57	; 0x39
     a44:	ble	a4c <coda_ascii_parse_double+0x3dc>
     a48:	b	aac <coda_ascii_parse_double+0x43c>
     a4c:	vldr	d16, [sp, #40]	; 0x28
     a50:	vmov.f64	d17, #36	; 0x41200000  10.0
     a54:	vmul.f64	d16, d17, d16
     a58:	ldr	r0, [fp, #-8]
     a5c:	ldrb	r0, [r0]
     a60:	sub	r0, r0, #48	; 0x30
     a64:	vmov	s0, r0
     a68:	vcvt.f64.s32	d17, s0
     a6c:	vadd.f64	d16, d16, d17
     a70:	vstr	d16, [sp, #40]	; 0x28
     a74:	ldr	r0, [sp, #36]	; 0x24
     a78:	mvn	r1, #0
     a7c:	add	r0, r0, r1
     a80:	str	r0, [sp, #36]	; 0x24
     a84:	ldr	r0, [fp, #-28]	; 0xffffffe4
     a88:	add	r0, r0, #1
     a8c:	str	r0, [fp, #-28]	; 0xffffffe4
     a90:	ldr	r0, [fp, #-8]
     a94:	add	r0, r0, #1
     a98:	str	r0, [fp, #-8]
     a9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     aa0:	add	r0, r0, r1
     aa4:	str	r0, [fp, #-24]	; 0xffffffe8
     aa8:	b	a1c <coda_ascii_parse_double+0x3ac>
     aac:	b	ab0 <coda_ascii_parse_double+0x440>
     ab0:	b	ab4 <coda_ascii_parse_double+0x444>
     ab4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     ab8:	cmp	r0, #0
     abc:	bne	adc <coda_ascii_parse_double+0x46c>
     ac0:	mvn	r0, #102	; 0x66
     ac4:	movw	r1, #0
     ac8:	movt	r1, #0
     acc:	bl	0 <coda_set_error>
     ad0:	mvn	r0, #0
     ad4:	str	r0, [fp, #-4]
     ad8:	b	db4 <coda_ascii_parse_double+0x744>
     adc:	ldr	r0, [sp, #32]
     ae0:	cmp	r0, #0
     ae4:	beq	af4 <coda_ascii_parse_double+0x484>
     ae8:	vldr	d16, [sp, #40]	; 0x28
     aec:	vneg.f64	d16, d16
     af0:	vstr	d16, [sp, #40]	; 0x28
     af4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     af8:	cmp	r0, #0
     afc:	ble	ca8 <coda_ascii_parse_double+0x638>
     b00:	ldr	r0, [fp, #-8]
     b04:	ldrb	r0, [r0]
     b08:	cmp	r0, #100	; 0x64
     b0c:	beq	b40 <coda_ascii_parse_double+0x4d0>
     b10:	ldr	r0, [fp, #-8]
     b14:	ldrb	r0, [r0]
     b18:	cmp	r0, #68	; 0x44
     b1c:	beq	b40 <coda_ascii_parse_double+0x4d0>
     b20:	ldr	r0, [fp, #-8]
     b24:	ldrb	r0, [r0]
     b28:	cmp	r0, #101	; 0x65
     b2c:	beq	b40 <coda_ascii_parse_double+0x4d0>
     b30:	ldr	r0, [fp, #-8]
     b34:	ldrb	r0, [r0]
     b38:	cmp	r0, #69	; 0x45
     b3c:	bne	ca8 <coda_ascii_parse_double+0x638>
     b40:	ldr	r0, [fp, #-8]
     b44:	add	r0, r0, #1
     b48:	str	r0, [fp, #-8]
     b4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b50:	mvn	r1, #0
     b54:	add	r0, r0, r1
     b58:	str	r0, [fp, #-24]	; 0xffffffe8
     b5c:	movw	r0, #0
     b60:	str	r0, [sp, #32]
     b64:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b68:	cmp	r0, #0
     b6c:	ble	bcc <coda_ascii_parse_double+0x55c>
     b70:	ldr	r0, [fp, #-8]
     b74:	ldrb	r0, [r0]
     b78:	cmp	r0, #43	; 0x2b
     b7c:	beq	b90 <coda_ascii_parse_double+0x520>
     b80:	ldr	r0, [fp, #-8]
     b84:	ldrb	r0, [r0]
     b88:	cmp	r0, #45	; 0x2d
     b8c:	bne	bc8 <coda_ascii_parse_double+0x558>
     b90:	ldr	r0, [fp, #-8]
     b94:	ldrb	r0, [r0]
     b98:	cmp	r0, #45	; 0x2d
     b9c:	movw	r0, #0
     ba0:	moveq	r0, #1
     ba4:	and	r0, r0, #1
     ba8:	str	r0, [sp, #32]
     bac:	ldr	r0, [fp, #-8]
     bb0:	add	r0, r0, #1
     bb4:	str	r0, [fp, #-8]
     bb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bbc:	mvn	r1, #0
     bc0:	add	r0, r0, r1
     bc4:	str	r0, [fp, #-24]	; 0xffffffe8
     bc8:	b	bcc <coda_ascii_parse_double+0x55c>
     bcc:	movw	r0, #0
     bd0:	str	r0, [sp, #28]
     bd4:	str	r0, [fp, #-32]	; 0xffffffe0
     bd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bdc:	cmp	r0, #0
     be0:	ble	c54 <coda_ascii_parse_double+0x5e4>
     be4:	ldr	r0, [fp, #-8]
     be8:	ldrb	r0, [r0]
     bec:	cmp	r0, #48	; 0x30
     bf0:	blt	c04 <coda_ascii_parse_double+0x594>
     bf4:	ldr	r0, [fp, #-8]
     bf8:	ldrb	r0, [r0]
     bfc:	cmp	r0, #57	; 0x39
     c00:	ble	c08 <coda_ascii_parse_double+0x598>
     c04:	b	c54 <coda_ascii_parse_double+0x5e4>
     c08:	ldr	r0, [sp, #28]
     c0c:	movw	r1, #10
     c10:	mul	r0, r0, r1
     c14:	ldr	r1, [fp, #-8]
     c18:	ldrb	r1, [r1]
     c1c:	sub	r1, r1, #48	; 0x30
     c20:	add	r0, r0, r1
     c24:	str	r0, [sp, #28]
     c28:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c2c:	add	r0, r0, #1
     c30:	str	r0, [fp, #-32]	; 0xffffffe0
     c34:	ldr	r0, [fp, #-8]
     c38:	add	r0, r0, #1
     c3c:	str	r0, [fp, #-8]
     c40:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c44:	mvn	r1, #0
     c48:	add	r0, r0, r1
     c4c:	str	r0, [fp, #-24]	; 0xffffffe8
     c50:	b	bd8 <coda_ascii_parse_double+0x568>
     c54:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c58:	cmp	r0, #0
     c5c:	bne	c7c <coda_ascii_parse_double+0x60c>
     c60:	mvn	r0, #102	; 0x66
     c64:	movw	r1, #0
     c68:	movt	r1, #0
     c6c:	bl	0 <coda_set_error>
     c70:	mvn	r0, #0
     c74:	str	r0, [fp, #-4]
     c78:	b	db4 <coda_ascii_parse_double+0x744>
     c7c:	ldr	r0, [sp, #32]
     c80:	cmp	r0, #0
     c84:	beq	c98 <coda_ascii_parse_double+0x628>
     c88:	ldr	r0, [sp, #28]
     c8c:	movw	r1, #0
     c90:	sub	r0, r1, r0
     c94:	str	r0, [sp, #28]
     c98:	ldr	r0, [sp, #28]
     c9c:	ldr	r1, [sp, #36]	; 0x24
     ca0:	add	r0, r1, r0
     ca4:	str	r0, [sp, #36]	; 0x24
     ca8:	ldr	r0, [fp, #-20]	; 0xffffffec
     cac:	cmp	r0, #0
     cb0:	bne	d74 <coda_ascii_parse_double+0x704>
     cb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cb8:	cmp	r0, #0
     cbc:	beq	d74 <coda_ascii_parse_double+0x704>
     cc0:	b	cc4 <coda_ascii_parse_double+0x654>
     cc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cc8:	cmp	r0, #0
     ccc:	movw	r0, #0
     cd0:	str	r0, [sp, #4]
     cd4:	ble	d10 <coda_ascii_parse_double+0x6a0>
     cd8:	ldr	r0, [fp, #-8]
     cdc:	ldrb	r0, [r0]
     ce0:	cmp	r0, #32
     ce4:	movw	r0, #1
     ce8:	str	r0, [sp]
     cec:	beq	d08 <coda_ascii_parse_double+0x698>
     cf0:	ldr	r0, [fp, #-8]
     cf4:	ldrb	r0, [r0]
     cf8:	cmp	r0, #9
     cfc:	movw	r0, #0
     d00:	moveq	r0, #1
     d04:	str	r0, [sp]
     d08:	ldr	r0, [sp]
     d0c:	str	r0, [sp, #4]
     d10:	ldr	r0, [sp, #4]
     d14:	tst	r0, #1
     d18:	beq	d48 <coda_ascii_parse_double+0x6d8>
     d1c:	ldr	r0, [fp, #-8]
     d20:	add	r0, r0, #1
     d24:	str	r0, [fp, #-8]
     d28:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d2c:	mvn	r1, #0
     d30:	add	r0, r0, r1
     d34:	str	r0, [fp, #-24]	; 0xffffffe8
     d38:	b	cc4 <coda_ascii_parse_double+0x654>
     d3c:	nop	{0}
	...
     d48:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d4c:	cmp	r0, #0
     d50:	beq	d70 <coda_ascii_parse_double+0x700>
     d54:	mvn	r0, #102	; 0x66
     d58:	movw	r1, #0
     d5c:	movt	r1, #0
     d60:	bl	0 <coda_set_error>
     d64:	mvn	r0, #0
     d68:	str	r0, [fp, #-4]
     d6c:	b	db4 <coda_ascii_parse_double+0x744>
     d70:	b	d74 <coda_ascii_parse_double+0x704>
     d74:	ldr	r0, [sp, #36]	; 0x24
     d78:	cmp	r0, #0
     d7c:	beq	d98 <coda_ascii_parse_double+0x728>
     d80:	ldr	r0, [sp, #36]	; 0x24
     d84:	vmov.f64	d0, #36	; 0x41200000  10.0
     d88:	bl	dc0 <ipow>
     d8c:	vldr	d16, [sp, #40]	; 0x28
     d90:	vmul.f64	d16, d16, d0
     d94:	vstr	d16, [sp, #40]	; 0x28
     d98:	vldr	d16, [sp, #40]	; 0x28
     d9c:	ldr	r0, [fp, #-16]
     da0:	vstr	d16, [r0]
     da4:	ldr	r0, [fp, #-12]
     da8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     dac:	sub	r0, r0, r1
     db0:	str	r0, [fp, #-4]
     db4:	ldr	r0, [fp, #-4]
     db8:	mov	sp, fp
     dbc:	pop	{fp, pc}

00000dc0 <ipow>:
     dc0:	sub	sp, sp, #24
     dc4:	vstr	d0, [sp, #16]
     dc8:	str	r0, [sp, #12]
     dcc:	vmov.f64	d16, #112	; 0x3f800000  1.0
     dd0:	vstr	d16, [sp]
     dd4:	ldr	r0, [sp, #12]
     dd8:	cmp	r0, #0
     ddc:	bge	e20 <ipow+0x60>
     de0:	b	de4 <ipow+0x24>
     de4:	ldr	r0, [sp, #12]
     de8:	add	r1, r0, #1
     dec:	str	r1, [sp, #12]
     df0:	cmp	r0, #0
     df4:	beq	e0c <ipow+0x4c>
     df8:	vldr	d16, [sp, #16]
     dfc:	vldr	d17, [sp]
     e00:	vmul.f64	d16, d17, d16
     e04:	vstr	d16, [sp]
     e08:	b	de4 <ipow+0x24>
     e0c:	vldr	d16, [sp]
     e10:	vmov.f64	d17, #112	; 0x3f800000  1.0
     e14:	vdiv.f64	d16, d17, d16
     e18:	vstr	d16, [sp]
     e1c:	b	e54 <ipow+0x94>
     e20:	b	e24 <ipow+0x64>
     e24:	ldr	r0, [sp, #12]
     e28:	mvn	r1, #0
     e2c:	add	r1, r0, r1
     e30:	str	r1, [sp, #12]
     e34:	cmp	r0, #0
     e38:	beq	e50 <ipow+0x90>
     e3c:	vldr	d16, [sp, #16]
     e40:	vldr	d17, [sp]
     e44:	vmul.f64	d16, d17, d16
     e48:	vstr	d16, [sp]
     e4c:	b	e24 <ipow+0x64>
     e50:	b	e54 <ipow+0x94>
     e54:	vldr	d0, [sp]
     e58:	add	sp, sp, #24
     e5c:	bx	lr

00000e60 <coda_ascii_cursor_set_asciilines>:
     e60:	push	{fp, lr}
     e64:	mov	fp, sp
     e68:	sub	sp, sp, #32
     e6c:	str	r0, [fp, #-8]
     e70:	str	r1, [fp, #-12]
     e74:	ldr	r0, [fp, #-12]
     e78:	str	r0, [sp, #16]
     e7c:	ldr	r0, [sp, #16]
     e80:	ldr	r0, [r0, #68]	; 0x44
     e84:	movw	r1, #0
     e88:	cmp	r0, r1
     e8c:	bne	eb0 <coda_ascii_cursor_set_asciilines+0x50>
     e90:	ldr	r0, [fp, #-12]
     e94:	bl	0 <coda_ascii_init_asciilines>
     e98:	cmp	r0, #0
     e9c:	beq	eac <coda_ascii_cursor_set_asciilines+0x4c>
     ea0:	mvn	r0, #0
     ea4:	str	r0, [fp, #-4]
     ea8:	b	fe8 <coda_ascii_cursor_set_asciilines+0x188>
     eac:	b	eb0 <coda_ascii_cursor_set_asciilines+0x50>
     eb0:	ldr	r0, [sp, #16]
     eb4:	ldr	r0, [r0, #76]	; 0x4c
     eb8:	movw	r1, #0
     ebc:	cmp	r0, r1
     ec0:	bne	f9c <coda_ascii_cursor_set_asciilines+0x13c>
     ec4:	movw	r0, #0
     ec8:	bl	0 <coda_type_array_new>
     ecc:	str	r0, [sp, #12]
     ed0:	ldr	r0, [sp, #12]
     ed4:	movw	r1, #0
     ed8:	cmp	r0, r1
     edc:	bne	eec <coda_ascii_cursor_set_asciilines+0x8c>
     ee0:	mvn	r0, #0
     ee4:	str	r0, [fp, #-4]
     ee8:	b	fe8 <coda_ascii_cursor_set_asciilines+0x188>
     eec:	ldr	r0, [sp, #12]
     ef0:	ldr	r1, [sp, #16]
     ef4:	ldr	r1, [r1, #64]	; 0x40
     ef8:	bl	0 <coda_type_array_add_fixed_dimension>
     efc:	cmp	r0, #0
     f00:	beq	f18 <coda_ascii_cursor_set_asciilines+0xb8>
     f04:	ldr	r0, [sp, #12]
     f08:	bl	0 <coda_type_release>
     f0c:	mvn	r0, #0
     f10:	str	r0, [fp, #-4]
     f14:	b	fe8 <coda_ascii_cursor_set_asciilines+0x188>
     f18:	movw	r0, #0
     f1c:	bl	0 <coda_type_text_new>
     f20:	str	r0, [sp, #8]
     f24:	ldr	r0, [sp, #8]
     f28:	movw	r1, #0
     f2c:	cmp	r0, r1
     f30:	bne	f48 <coda_ascii_cursor_set_asciilines+0xe8>
     f34:	ldr	r0, [sp, #12]
     f38:	bl	0 <coda_type_release>
     f3c:	mvn	r0, #0
     f40:	str	r0, [fp, #-4]
     f44:	b	fe8 <coda_ascii_cursor_set_asciilines+0x188>
     f48:	ldr	r0, [sp, #8]
     f4c:	movw	r1, #2
     f50:	bl	0 <coda_type_text_set_special_text_type>
     f54:	ldr	r1, [sp, #12]
     f58:	ldr	r2, [sp, #8]
     f5c:	str	r0, [sp, #4]
     f60:	mov	r0, r1
     f64:	mov	r1, r2
     f68:	bl	0 <coda_type_array_set_base_type>
     f6c:	cmp	r0, #0
     f70:	beq	f90 <coda_ascii_cursor_set_asciilines+0x130>
     f74:	ldr	r0, [sp, #12]
     f78:	bl	0 <coda_type_release>
     f7c:	ldr	r0, [sp, #8]
     f80:	bl	0 <coda_type_release>
     f84:	mvn	r0, #0
     f88:	str	r0, [fp, #-4]
     f8c:	b	fe8 <coda_ascii_cursor_set_asciilines+0x188>
     f90:	ldr	r0, [sp, #12]
     f94:	ldr	r1, [sp, #16]
     f98:	str	r0, [r1, #76]	; 0x4c
     f9c:	ldr	r0, [fp, #-12]
     fa0:	ldr	r1, [fp, #-8]
     fa4:	str	r0, [r1]
     fa8:	ldr	r0, [fp, #-8]
     fac:	mov	r1, #1
     fb0:	str	r1, [r0, #4]
     fb4:	ldr	r0, [sp, #16]
     fb8:	ldr	r0, [r0, #76]	; 0x4c
     fbc:	ldr	r1, [fp, #-8]
     fc0:	str	r0, [r1, #8]
     fc4:	ldr	r0, [fp, #-8]
     fc8:	mvn	r1, #0
     fcc:	str	r1, [r0, #12]
     fd0:	ldr	r0, [fp, #-8]
     fd4:	mov	r1, #0
     fd8:	str	r1, [r0, #20]
     fdc:	str	r1, [r0, #16]
     fe0:	movw	r0, #0
     fe4:	str	r0, [fp, #-4]
     fe8:	ldr	r0, [fp, #-4]
     fec:	mov	sp, fp
     ff0:	pop	{fp, pc}

00000ff4 <coda_ascii_cursor_get_string_length>:
     ff4:	push	{fp, lr}
     ff8:	mov	fp, sp
     ffc:	sub	sp, sp, #24
    1000:	str	r0, [fp, #-8]
    1004:	str	r1, [sp, #12]
    1008:	ldr	r0, [fp, #-8]
    100c:	mov	r1, sp
    1010:	bl	1074 <coda_ascii_cursor_get_bit_size>
    1014:	cmp	r0, #0
    1018:	beq	1028 <coda_ascii_cursor_get_string_length+0x34>
    101c:	mvn	r0, #0
    1020:	str	r0, [fp, #-4]
    1024:	b	1068 <coda_ascii_cursor_get_string_length+0x74>
    1028:	ldr	r0, [sp, #4]
    102c:	cmn	r0, #1
    1030:	bgt	1048 <coda_ascii_cursor_get_string_length+0x54>
    1034:	b	1038 <coda_ascii_cursor_get_string_length+0x44>
    1038:	ldr	r0, [sp, #12]
    103c:	mvn	r1, #0
    1040:	str	r1, [r0]
    1044:	b	1060 <coda_ascii_cursor_get_string_length+0x6c>
    1048:	ldr	r0, [sp]
    104c:	ldr	r1, [sp, #4]
    1050:	lsr	r0, r0, #3
    1054:	orr	r0, r0, r1, lsl #29
    1058:	ldr	r1, [sp, #12]
    105c:	str	r0, [r1]
    1060:	movw	r0, #0
    1064:	str	r0, [fp, #-4]
    1068:	ldr	r0, [fp, #-4]
    106c:	mov	sp, fp
    1070:	pop	{fp, pc}

00001074 <coda_ascii_cursor_get_bit_size>:
    1074:	push	{r4, sl, fp, lr}
    1078:	add	fp, sp, #8
    107c:	sub	sp, sp, #832	; 0x340
    1080:	str	r0, [fp, #-16]
    1084:	str	r1, [fp, #-20]	; 0xffffffec
    1088:	ldr	r0, [fp, #-16]
    108c:	add	r1, r0, #8
    1090:	ldr	r0, [r0, #4]
    1094:	sub	r0, r0, #1
    1098:	add	r0, r1, r0, lsl #4
    109c:	ldr	r0, [r0]
    10a0:	ldr	r0, [r0]
    10a4:	cmp	r0, #100	; 0x64
    10a8:	bcs	10cc <coda_ascii_cursor_get_bit_size+0x58>
    10ac:	ldr	r0, [fp, #-16]
    10b0:	add	r1, r0, #8
    10b4:	ldr	r0, [r0, #4]
    10b8:	sub	r0, r0, #1
    10bc:	add	r0, r1, r0, lsl #4
    10c0:	ldr	r0, [r0]
    10c4:	str	r0, [sp, #48]	; 0x30
    10c8:	b	10ec <coda_ascii_cursor_get_bit_size+0x78>
    10cc:	ldr	r0, [fp, #-16]
    10d0:	add	r1, r0, #8
    10d4:	ldr	r0, [r0, #4]
    10d8:	sub	r0, r0, #1
    10dc:	add	r0, r1, r0, lsl #4
    10e0:	ldr	r0, [r0]
    10e4:	ldr	r0, [r0, #4]
    10e8:	str	r0, [sp, #48]	; 0x30
    10ec:	ldr	r0, [sp, #48]	; 0x30
    10f0:	str	r0, [fp, #-24]	; 0xffffffe8
    10f4:	mov	r0, #0
    10f8:	str	r0, [fp, #-28]	; 0xffffffe4
    10fc:	ldr	r1, [fp, #-16]
    1100:	ldr	r2, [r1, #4]
    1104:	ldr	r2, [r1, r2, lsl #4]!
    1108:	ldr	r1, [r1, #4]
    110c:	str	r1, [fp, #-36]	; 0xffffffdc
    1110:	str	r2, [fp, #-40]	; 0xffffffd8
    1114:	mvn	r1, #0
    1118:	str	r1, [fp, #-116]	; 0xffffff8c
    111c:	str	r0, [fp, #-120]	; 0xffffff88
    1120:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1124:	ldr	r0, [r0, #28]
    1128:	cmp	r0, #0
    112c:	bmi	1158 <coda_ascii_cursor_get_bit_size+0xe4>
    1130:	b	1134 <coda_ascii_cursor_get_bit_size+0xc0>
    1134:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1138:	ldr	r1, [r0, #24]
    113c:	ldr	r0, [r0, #28]
    1140:	ldr	r2, [fp, #-20]	; 0xffffffec
    1144:	str	r0, [r2, #4]
    1148:	str	r1, [r2]
    114c:	movw	r0, #0
    1150:	str	r0, [fp, #-12]
    1154:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1158:	ldr	r0, [fp, #-24]	; 0xffffffe8
    115c:	ldr	r0, [r0, #8]
    1160:	cmp	r0, #0
    1164:	beq	1178 <coda_ascii_cursor_get_bit_size+0x104>
    1168:	ldr	r0, [fp, #-24]	; 0xffffffe8
    116c:	ldr	r0, [r0, #8]
    1170:	cmp	r0, #1
    1174:	bne	118c <coda_ascii_cursor_get_bit_size+0x118>
    1178:	ldr	r0, [fp, #-16]
    117c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1180:	bl	0 <coda_ascbin_cursor_get_bit_size>
    1184:	str	r0, [fp, #-12]
    1188:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    118c:	ldr	r0, [fp, #-16]
    1190:	sub	r1, fp, #48	; 0x30
    1194:	mvn	r2, #0
    1198:	str	r2, [sp, #44]	; 0x2c
    119c:	ldr	r3, [sp, #44]	; 0x2c
    11a0:	bl	1ff8 <get_bit_size_boundary>
    11a4:	cmp	r0, #0
    11a8:	beq	11b8 <coda_ascii_cursor_get_bit_size+0x144>
    11ac:	mvn	r0, #0
    11b0:	str	r0, [fp, #-12]
    11b4:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    11b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11bc:	ldr	r0, [r0, #8]
    11c0:	cmp	r0, #2
    11c4:	beq	11d8 <coda_ascii_cursor_get_bit_size+0x164>
    11c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11cc:	ldr	r0, [r0, #8]
    11d0:	cmp	r0, #3
    11d4:	bne	1228 <coda_ascii_cursor_get_bit_size+0x1b4>
    11d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11dc:	ldr	r0, [r0, #52]	; 0x34
    11e0:	str	r0, [fp, #-28]	; 0xffffffe4
    11e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    11e8:	movw	r1, #0
    11ec:	cmp	r0, r1
    11f0:	movw	r0, #1
    11f4:	str	r0, [sp, #40]	; 0x28
    11f8:	bne	1218 <coda_ascii_cursor_get_bit_size+0x1a4>
    11fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1200:	ldr	r0, [r0, #32]
    1204:	movw	r1, #0
    1208:	cmp	r0, r1
    120c:	movw	r0, #0
    1210:	moveq	r0, #1
    1214:	str	r0, [sp, #40]	; 0x28
    1218:	ldr	r0, [sp, #40]	; 0x28
    121c:	and	r0, r0, #1
    1220:	str	r0, [fp, #-120]	; 0xffffff88
    1224:	b	133c <coda_ascii_cursor_get_bit_size+0x2c8>
    1228:	ldr	r0, [fp, #-24]	; 0xffffffe8
    122c:	ldr	r0, [r0, #8]
    1230:	cmp	r0, #4
    1234:	bne	12a0 <coda_ascii_cursor_get_bit_size+0x22c>
    1238:	ldr	r0, [fp, #-24]	; 0xffffffe8
    123c:	ldr	r0, [r0, #32]
    1240:	movw	r1, #0
    1244:	cmp	r0, r1
    1248:	bne	127c <coda_ascii_cursor_get_bit_size+0x208>
    124c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1250:	ldr	r0, [r0, #44]	; 0x2c
    1254:	cmp	r0, #0
    1258:	bne	127c <coda_ascii_cursor_get_bit_size+0x208>
    125c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1260:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1264:	ldr	r2, [fp, #-20]	; 0xffffffec
    1268:	str	r1, [r2, #4]
    126c:	str	r0, [r2]
    1270:	movw	r0, #0
    1274:	str	r0, [fp, #-12]
    1278:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    127c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1280:	ldr	r0, [r0, #32]
    1284:	movw	r1, #0
    1288:	cmp	r0, r1
    128c:	movw	r0, #0
    1290:	moveq	r0, #1
    1294:	and	r0, r0, #1
    1298:	str	r0, [fp, #-120]	; 0xffffff88
    129c:	b	1338 <coda_ascii_cursor_get_bit_size+0x2c4>
    12a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12a4:	ldr	r0, [r0, #8]
    12a8:	cmp	r0, #6
    12ac:	bne	1334 <coda_ascii_cursor_get_bit_size+0x2c0>
    12b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12b4:	ldr	r0, [r0, #40]	; 0x28
    12b8:	cmp	r0, #2
    12bc:	bne	1334 <coda_ascii_cursor_get_bit_size+0x2c0>
    12c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12c4:	ldr	r0, [r0, #44]	; 0x2c
    12c8:	str	r0, [fp, #-124]	; 0xffffff84
    12cc:	ldr	r0, [fp, #-124]	; 0xffffff84
    12d0:	ldr	r0, [r0, #8]
    12d4:	cmp	r0, #4
    12d8:	bne	12e0 <coda_ascii_cursor_get_bit_size+0x26c>
    12dc:	b	1300 <coda_ascii_cursor_get_bit_size+0x28c>
    12e0:	movw	r0, #0
    12e4:	movt	r0, #0
    12e8:	movw	r1, #0
    12ec:	movt	r1, #0
    12f0:	movw	r2, #693	; 0x2b5
    12f4:	movw	r3, #0
    12f8:	movt	r3, #0
    12fc:	bl	0 <__assert_fail>
    1300:	ldr	r0, [fp, #-124]	; 0xffffff84
    1304:	ldr	r0, [r0, #44]	; 0x2c
    1308:	cmp	r0, #0
    130c:	bne	1330 <coda_ascii_cursor_get_bit_size+0x2bc>
    1310:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1314:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1318:	ldr	r2, [fp, #-20]	; 0xffffffec
    131c:	str	r1, [r2, #4]
    1320:	str	r0, [r2]
    1324:	movw	r0, #0
    1328:	str	r0, [fp, #-12]
    132c:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1330:	b	1334 <coda_ascii_cursor_get_bit_size+0x2c0>
    1334:	b	1338 <coda_ascii_cursor_get_bit_size+0x2c4>
    1338:	b	133c <coda_ascii_cursor_get_bit_size+0x2c8>
    133c:	ldr	r0, [fp, #-120]	; 0xffffff88
    1340:	cmp	r0, #0
    1344:	beq	13e4 <coda_ascii_cursor_get_bit_size+0x370>
    1348:	ldr	r0, [fp, #-48]	; 0xffffffd0
    134c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1350:	lsr	r0, r0, #3
    1354:	orr	r0, r0, r1, lsl #29
    1358:	rsbs	r0, r0, #63	; 0x3f
    135c:	mov	r2, #0
    1360:	sbcs	r1, r2, r1, asr #3
    1364:	blt	1384 <coda_ascii_cursor_get_bit_size+0x310>
    1368:	b	136c <coda_ascii_cursor_get_bit_size+0x2f8>
    136c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1370:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1374:	lsr	r0, r0, #3
    1378:	orr	r0, r0, r1, lsl #29
    137c:	str	r0, [fp, #-116]	; 0xffffff8c
    1380:	b	138c <coda_ascii_cursor_get_bit_size+0x318>
    1384:	movw	r0, #64	; 0x40
    1388:	str	r0, [fp, #-116]	; 0xffffff8c
    138c:	sub	r0, fp, #112	; 0x70
    1390:	ldr	r1, [fp, #-16]
    1394:	ldr	r1, [r1]
    1398:	ldr	r2, [fp, #-40]	; 0xffffffd8
    139c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    13a0:	lsr	r2, r2, #3
    13a4:	orr	r2, r2, r3, lsl #29
    13a8:	asr	r3, r3, #3
    13ac:	ldr	ip, [fp, #-116]	; 0xffffff8c
    13b0:	asr	lr, ip, #31
    13b4:	mov	r4, sp
    13b8:	str	r0, [r4, #8]
    13bc:	str	lr, [r4, #4]
    13c0:	str	ip, [r4]
    13c4:	mov	r0, r1
    13c8:	bl	24f0 <read_bytes_in_bounds>
    13cc:	cmp	r0, #0
    13d0:	beq	13e0 <coda_ascii_cursor_get_bit_size+0x36c>
    13d4:	mvn	r0, #0
    13d8:	str	r0, [fp, #-12]
    13dc:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    13e0:	b	13e4 <coda_ascii_cursor_get_bit_size+0x370>
    13e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    13e8:	movw	r1, #0
    13ec:	cmp	r0, r1
    13f0:	beq	1420 <coda_ascii_cursor_get_bit_size+0x3ac>
    13f4:	sub	r0, fp, #112	; 0x70
    13f8:	ldr	r1, [fp, #-116]	; 0xffffff8c
    13fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1400:	ldr	r3, [fp, #-20]	; 0xffffffec
    1404:	bl	2600 <parse_mapping_size>
    1408:	cmp	r0, #0
    140c:	beq	141c <coda_ascii_cursor_get_bit_size+0x3a8>
    1410:	movw	r0, #0
    1414:	str	r0, [fp, #-12]
    1418:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    141c:	b	1420 <coda_ascii_cursor_get_bit_size+0x3ac>
    1420:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1424:	ldr	r0, [r0, #8]
    1428:	cmp	r0, #6
    142c:	bne	1488 <coda_ascii_cursor_get_bit_size+0x414>
    1430:	ldr	r0, [fp, #-16]
    1434:	add	r1, sp, #192	; 0xc0
    1438:	mov	r2, r1
    143c:	str	r0, [sp, #36]	; 0x24
    1440:	mov	r0, r2
    1444:	ldr	r2, [sp, #36]	; 0x24
    1448:	str	r1, [sp, #32]
    144c:	mov	r1, r2
    1450:	movw	r2, #520	; 0x208
    1454:	bl	0 <memcpy>
    1458:	ldr	r0, [sp, #32]
    145c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1460:	cmp	r0, #0
    1464:	beq	1474 <coda_ascii_cursor_get_bit_size+0x400>
    1468:	mvn	r0, #0
    146c:	str	r0, [fp, #-12]
    1470:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1474:	ldr	r1, [fp, #-20]	; 0xffffffec
    1478:	add	r0, sp, #192	; 0xc0
    147c:	bl	0 <coda_cursor_get_bit_size>
    1480:	str	r0, [fp, #-12]
    1484:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1488:	ldr	r0, [fp, #-24]	; 0xffffffe8
    148c:	ldr	r0, [r0, #32]
    1490:	movw	r1, #0
    1494:	cmp	r0, r1
    1498:	beq	156c <coda_ascii_cursor_get_bit_size+0x4f8>
    149c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14a0:	ldr	r0, [r0, #32]
    14a4:	ldr	r1, [fp, #-16]
    14a8:	ldr	r2, [fp, #-20]	; 0xffffffec
    14ac:	bl	0 <coda_expression_eval_integer>
    14b0:	cmp	r0, #0
    14b4:	beq	14d8 <coda_ascii_cursor_get_bit_size+0x464>
    14b8:	movw	r0, #0
    14bc:	movt	r0, #0
    14c0:	bl	0 <coda_add_error_message>
    14c4:	ldr	r0, [fp, #-16]
    14c8:	bl	0 <coda_cursor_add_to_error_message>
    14cc:	mvn	r0, #0
    14d0:	str	r0, [fp, #-12]
    14d4:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    14d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14dc:	ldr	r1, [r0, #24]
    14e0:	ldr	r0, [r0, #28]
    14e4:	mvn	r2, #7
    14e8:	eor	r1, r1, r2
    14ec:	mvn	r0, r0
    14f0:	orr	r0, r1, r0
    14f4:	cmp	r0, #0
    14f8:	bne	1520 <coda_ascii_cursor_get_bit_size+0x4ac>
    14fc:	b	1500 <coda_ascii_cursor_get_bit_size+0x48c>
    1500:	ldr	r0, [fp, #-20]	; 0xffffffec
    1504:	ldr	r1, [r0]
    1508:	ldr	r2, [r0, #4]
    150c:	lsl	r2, r2, #3
    1510:	orr	r2, r2, r1, lsr #29
    1514:	lsl	r1, r1, #3
    1518:	str	r1, [r0]
    151c:	str	r2, [r0, #4]
    1520:	ldr	r0, [fp, #-20]	; 0xffffffec
    1524:	ldr	r0, [r0, #4]
    1528:	cmn	r0, #1
    152c:	bgt	1560 <coda_ascii_cursor_get_bit_size+0x4ec>
    1530:	b	1534 <coda_ascii_cursor_get_bit_size+0x4c0>
    1534:	ldr	r0, [pc, #2744]	; 1ff4 <coda_ascii_cursor_get_bit_size+0xf80>
    1538:	ldr	r1, [fp, #-20]	; 0xffffffec
    153c:	ldr	r2, [r1]
    1540:	movw	r1, #0
    1544:	movt	r1, #0
    1548:	bl	0 <coda_set_error>
    154c:	ldr	r0, [fp, #-16]
    1550:	bl	0 <coda_cursor_add_to_error_message>
    1554:	mvn	r0, #0
    1558:	str	r0, [fp, #-12]
    155c:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1560:	movw	r0, #0
    1564:	str	r0, [fp, #-12]
    1568:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    156c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1570:	ldr	r0, [r0, #8]
    1574:	cmp	r0, #2
    1578:	beq	158c <coda_ascii_cursor_get_bit_size+0x518>
    157c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1580:	ldr	r0, [r0, #8]
    1584:	cmp	r0, #3
    1588:	bne	16d8 <coda_ascii_cursor_get_bit_size+0x664>
    158c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1590:	ldr	r0, [r0, #12]
    1594:	cmp	r0, #0
    1598:	str	r0, [sp, #28]
    159c:	beq	1628 <coda_ascii_cursor_get_bit_size+0x5b4>
    15a0:	b	15a4 <coda_ascii_cursor_get_bit_size+0x530>
    15a4:	ldr	r0, [sp, #28]
    15a8:	cmp	r0, #1
    15ac:	beq	1644 <coda_ascii_cursor_get_bit_size+0x5d0>
    15b0:	b	15b4 <coda_ascii_cursor_get_bit_size+0x540>
    15b4:	ldr	r0, [sp, #28]
    15b8:	cmp	r0, #2
    15bc:	beq	1628 <coda_ascii_cursor_get_bit_size+0x5b4>
    15c0:	b	15c4 <coda_ascii_cursor_get_bit_size+0x550>
    15c4:	ldr	r0, [sp, #28]
    15c8:	cmp	r0, #3
    15cc:	beq	1644 <coda_ascii_cursor_get_bit_size+0x5d0>
    15d0:	b	15d4 <coda_ascii_cursor_get_bit_size+0x560>
    15d4:	ldr	r0, [sp, #28]
    15d8:	cmp	r0, #4
    15dc:	beq	1628 <coda_ascii_cursor_get_bit_size+0x5b4>
    15e0:	b	15e4 <coda_ascii_cursor_get_bit_size+0x570>
    15e4:	ldr	r0, [sp, #28]
    15e8:	cmp	r0, #5
    15ec:	beq	1644 <coda_ascii_cursor_get_bit_size+0x5d0>
    15f0:	b	15f4 <coda_ascii_cursor_get_bit_size+0x580>
    15f4:	ldr	r0, [sp, #28]
    15f8:	cmp	r0, #6
    15fc:	beq	1628 <coda_ascii_cursor_get_bit_size+0x5b4>
    1600:	b	1604 <coda_ascii_cursor_get_bit_size+0x590>
    1604:	ldr	r0, [sp, #28]
    1608:	cmp	r0, #7
    160c:	beq	1644 <coda_ascii_cursor_get_bit_size+0x5d0>
    1610:	b	1614 <coda_ascii_cursor_get_bit_size+0x5a0>
    1614:	ldr	r0, [sp, #28]
    1618:	sub	r1, r0, #8
    161c:	cmp	r1, #2
    1620:	bcc	1660 <coda_ascii_cursor_get_bit_size+0x5ec>
    1624:	b	167c <coda_ascii_cursor_get_bit_size+0x608>
    1628:	sub	r0, fp, #112	; 0x70
    162c:	ldr	r1, [fp, #-116]	; 0xffffff8c
    1630:	add	r2, sp, #176	; 0xb0
    1634:	movw	r3, #1
    1638:	bl	0 <coda_ascii_parse_int64>
    163c:	str	r0, [sp, #188]	; 0xbc
    1640:	b	169c <coda_ascii_cursor_get_bit_size+0x628>
    1644:	sub	r0, fp, #112	; 0x70
    1648:	ldr	r1, [fp, #-116]	; 0xffffff8c
    164c:	add	r2, sp, #168	; 0xa8
    1650:	movw	r3, #1
    1654:	bl	364 <coda_ascii_parse_uint64>
    1658:	str	r0, [sp, #188]	; 0xbc
    165c:	b	169c <coda_ascii_cursor_get_bit_size+0x628>
    1660:	sub	r0, fp, #112	; 0x70
    1664:	ldr	r1, [fp, #-116]	; 0xffffff8c
    1668:	add	r2, sp, #160	; 0xa0
    166c:	movw	r3, #1
    1670:	bl	670 <coda_ascii_parse_double>
    1674:	str	r0, [sp, #188]	; 0xbc
    1678:	b	169c <coda_ascii_cursor_get_bit_size+0x628>
    167c:	movw	r0, #0
    1680:	movt	r0, #0
    1684:	movw	r1, #0
    1688:	movt	r1, #0
    168c:	movw	r2, #800	; 0x320
    1690:	movw	r3, #0
    1694:	movt	r3, #0
    1698:	bl	0 <__assert_fail>
    169c:	ldr	r0, [sp, #188]	; 0xbc
    16a0:	cmp	r0, #0
    16a4:	bge	16b4 <coda_ascii_cursor_get_bit_size+0x640>
    16a8:	mvn	r0, #0
    16ac:	str	r0, [fp, #-12]
    16b0:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    16b4:	ldr	r0, [sp, #188]	; 0xbc
    16b8:	lsl	r1, r0, #3
    16bc:	sbfx	r0, r0, #28, #1
    16c0:	ldr	r2, [fp, #-20]	; 0xffffffec
    16c4:	str	r0, [r2, #4]
    16c8:	str	r1, [r2]
    16cc:	movw	r0, #0
    16d0:	str	r0, [fp, #-12]
    16d4:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    16d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16dc:	ldr	r0, [r0, #8]
    16e0:	cmp	r0, #4
    16e4:	bne	16ec <coda_ascii_cursor_get_bit_size+0x678>
    16e8:	b	170c <coda_ascii_cursor_get_bit_size+0x698>
    16ec:	movw	r0, #0
    16f0:	movt	r0, #0
    16f4:	movw	r1, #0
    16f8:	movt	r1, #0
    16fc:	movw	r2, #812	; 0x32c
    1700:	movw	r3, #0
    1704:	movt	r3, #0
    1708:	bl	0 <__assert_fail>
    170c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1710:	ldr	r0, [r0, #44]	; 0x2c
    1714:	cmp	r0, #4
    1718:	str	r0, [sp, #24]
    171c:	bhi	1fe0 <coda_ascii_cursor_get_bit_size+0xf6c>
    1720:	add	r0, pc, #8
    1724:	ldr	r1, [sp, #24]
    1728:	ldr	r0, [r0, r1, lsl #2]
    172c:	mov	pc, r0
    1730:	.word	0x00001fc0
    1734:	.word	0x00001744
    1738:	.word	0x000019d8
    173c:	.word	0x000019d8
    1740:	.word	0x00001e5c
    1744:	ldr	r0, [fp, #-16]
    1748:	ldr	r0, [r0]
    174c:	ldr	r0, [r0, #16]
    1750:	cmp	r0, #0
    1754:	bne	175c <coda_ascii_cursor_get_bit_size+0x6e8>
    1758:	b	177c <coda_ascii_cursor_get_bit_size+0x708>
    175c:	movw	r0, #0
    1760:	movt	r0, #0
    1764:	movw	r1, #0
    1768:	movt	r1, #0
    176c:	movw	r2, #816	; 0x330
    1770:	movw	r3, #0
    1774:	movt	r3, #0
    1778:	bl	0 <__assert_fail>
    177c:	ldr	r0, [fp, #-16]
    1780:	ldr	r0, [r0]
    1784:	ldr	r0, [r0, #60]	; 0x3c
    1788:	cmp	r0, #0
    178c:	str	r0, [sp, #20]
    1790:	beq	17ec <coda_ascii_cursor_get_bit_size+0x778>
    1794:	b	1798 <coda_ascii_cursor_get_bit_size+0x724>
    1798:	ldr	r0, [sp, #20]
    179c:	sub	r1, r0, #1
    17a0:	cmp	r1, #2
    17a4:	bcc	17bc <coda_ascii_cursor_get_bit_size+0x748>
    17a8:	b	17ac <coda_ascii_cursor_get_bit_size+0x738>
    17ac:	ldr	r0, [sp, #20]
    17b0:	cmp	r0, #3
    17b4:	beq	17d4 <coda_ascii_cursor_get_bit_size+0x760>
    17b8:	b	19d4 <coda_ascii_cursor_get_bit_size+0x960>
    17bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    17c0:	mov	r1, #0
    17c4:	str	r1, [r0, #4]
    17c8:	mov	r1, #8
    17cc:	str	r1, [r0]
    17d0:	b	19d4 <coda_ascii_cursor_get_bit_size+0x960>
    17d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    17d8:	mov	r1, #0
    17dc:	str	r1, [r0, #4]
    17e0:	mov	r1, #16
    17e4:	str	r1, [r0]
    17e8:	b	19d4 <coda_ascii_cursor_get_bit_size+0x960>
    17ec:	ldr	r0, [fp, #-16]
    17f0:	ldr	r1, [r0, #4]
    17f4:	lsl	r1, r1, #4
    17f8:	ldrb	r0, [r1, r0]
    17fc:	tst	r0, #7
    1800:	beq	1824 <coda_ascii_cursor_get_bit_size+0x7b0>
    1804:	b	1808 <coda_ascii_cursor_get_bit_size+0x794>
    1808:	ldr	r0, [pc, #2020]	; 1ff4 <coda_ascii_cursor_get_bit_size+0xf80>
    180c:	movw	r1, #0
    1810:	movt	r1, #0
    1814:	bl	0 <coda_set_error>
    1818:	mvn	r0, #0
    181c:	str	r0, [fp, #-12]
    1820:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1824:	add	r1, sp, #159	; 0x9f
    1828:	ldr	r0, [fp, #-16]
    182c:	mov	r2, sp
    1830:	mov	r3, #0
    1834:	str	r3, [r2, #4]
    1838:	mov	ip, #1
    183c:	str	ip, [r2]
    1840:	mov	r2, r3
    1844:	bl	277c <coda_ascii_cursor_read_bytes>
    1848:	cmp	r0, #0
    184c:	beq	185c <coda_ascii_cursor_get_bit_size+0x7e8>
    1850:	mvn	r0, #0
    1854:	str	r0, [fp, #-12]
    1858:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    185c:	ldrb	r0, [sp, #159]	; 0x9f
    1860:	mov	r1, r0
    1864:	cmp	r0, #10
    1868:	str	r1, [sp, #16]
    186c:	beq	1884 <coda_ascii_cursor_get_bit_size+0x810>
    1870:	b	1874 <coda_ascii_cursor_get_bit_size+0x800>
    1874:	ldr	r0, [sp, #16]
    1878:	cmp	r0, #13
    187c:	beq	18ac <coda_ascii_cursor_get_bit_size+0x838>
    1880:	b	1980 <coda_ascii_cursor_get_bit_size+0x90c>
    1884:	ldr	r0, [fp, #-20]	; 0xffffffec
    1888:	mov	r1, #0
    188c:	str	r1, [r0, #4]
    1890:	mov	r1, #8
    1894:	str	r1, [r0]
    1898:	ldr	r0, [fp, #-16]
    189c:	ldr	r0, [r0]
    18a0:	movw	r1, #1
    18a4:	str	r1, [r0, #60]	; 0x3c
    18a8:	b	19d0 <coda_ascii_cursor_get_bit_size+0x95c>
    18ac:	ldr	r0, [fp, #-16]
    18b0:	ldr	r1, [r0]
    18b4:	ldr	r2, [r0, #4]
    18b8:	ldr	r3, [r1, #8]
    18bc:	ldr	r1, [r1, #12]
    18c0:	ldr	r2, [r0, r2, lsl #4]!
    18c4:	ldr	r0, [r0, #4]
    18c8:	lsr	r2, r2, #3
    18cc:	orr	r2, r2, r0, lsl #29
    18d0:	subs	r2, r3, r2
    18d4:	sbc	r0, r1, r0, asr #3
    18d8:	subs	r1, r2, #2
    18dc:	sbcs	r0, r0, #0
    18e0:	blt	1958 <coda_ascii_cursor_get_bit_size+0x8e4>
    18e4:	b	18e8 <coda_ascii_cursor_get_bit_size+0x874>
    18e8:	add	r1, sp, #159	; 0x9f
    18ec:	ldr	r0, [fp, #-16]
    18f0:	mov	r2, sp
    18f4:	mov	r3, #0
    18f8:	str	r3, [r2, #4]
    18fc:	mov	ip, #1
    1900:	str	ip, [r2]
    1904:	mov	r2, ip
    1908:	bl	277c <coda_ascii_cursor_read_bytes>
    190c:	cmp	r0, #0
    1910:	beq	1920 <coda_ascii_cursor_get_bit_size+0x8ac>
    1914:	mvn	r0, #0
    1918:	str	r0, [fp, #-12]
    191c:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1920:	ldrb	r0, [sp, #159]	; 0x9f
    1924:	cmp	r0, #10
    1928:	bne	1954 <coda_ascii_cursor_get_bit_size+0x8e0>
    192c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1930:	mov	r1, #0
    1934:	str	r1, [r0, #4]
    1938:	mov	r1, #16
    193c:	str	r1, [r0]
    1940:	ldr	r0, [fp, #-16]
    1944:	ldr	r0, [r0]
    1948:	movw	r1, #3
    194c:	str	r1, [r0, #60]	; 0x3c
    1950:	b	19d0 <coda_ascii_cursor_get_bit_size+0x95c>
    1954:	b	1958 <coda_ascii_cursor_get_bit_size+0x8e4>
    1958:	ldr	r0, [fp, #-20]	; 0xffffffec
    195c:	mov	r1, #0
    1960:	str	r1, [r0, #4]
    1964:	mov	r1, #8
    1968:	str	r1, [r0]
    196c:	ldr	r0, [fp, #-16]
    1970:	ldr	r0, [r0]
    1974:	movw	r1, #2
    1978:	str	r1, [r0, #60]	; 0x3c
    197c:	b	19d0 <coda_ascii_cursor_get_bit_size+0x95c>
    1980:	add	r2, sp, #138	; 0x8a
    1984:	ldr	r0, [fp, #-16]
    1988:	ldr	r1, [r0, #4]
    198c:	ldr	r1, [r0, r1, lsl #4]!
    1990:	ldr	r0, [r0, #4]
    1994:	lsr	r1, r1, #3
    1998:	orr	r1, r1, r0, lsl #29
    199c:	asr	r0, r0, #3
    19a0:	str	r0, [sp, #12]
    19a4:	mov	r0, r1
    19a8:	ldr	r1, [sp, #12]
    19ac:	bl	0 <coda_str64>
    19b0:	ldr	r0, [pc, #1596]	; 1ff4 <coda_ascii_cursor_get_bit_size+0xf80>
    19b4:	add	r2, sp, #138	; 0x8a
    19b8:	movw	r1, #0
    19bc:	movt	r1, #0
    19c0:	bl	0 <coda_set_error>
    19c4:	mvn	r0, #0
    19c8:	str	r0, [fp, #-12]
    19cc:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    19d0:	b	19d4 <coda_ascii_cursor_get_bit_size+0x960>
    19d4:	b	1fe0 <coda_ascii_cursor_get_bit_size+0xf6c>
    19d8:	ldr	r0, [fp, #-16]
    19dc:	ldr	r0, [r0]
    19e0:	ldr	r0, [r0, #16]
    19e4:	cmp	r0, #0
    19e8:	bne	1c14 <coda_ascii_cursor_get_bit_size+0xba0>
    19ec:	ldr	r0, [fp, #-16]
    19f0:	ldr	r1, [r0, #4]
    19f4:	lsl	r1, r1, #4
    19f8:	ldrb	r0, [r1, r0]
    19fc:	tst	r0, #7
    1a00:	beq	1a24 <coda_ascii_cursor_get_bit_size+0x9b0>
    1a04:	b	1a08 <coda_ascii_cursor_get_bit_size+0x994>
    1a08:	ldr	r0, [pc, #1508]	; 1ff4 <coda_ascii_cursor_get_bit_size+0xf80>
    1a0c:	movw	r1, #0
    1a10:	movt	r1, #0
    1a14:	bl	0 <coda_set_error>
    1a18:	mvn	r0, #0
    1a1c:	str	r0, [fp, #-12]
    1a20:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1a24:	ldr	r0, [fp, #-16]
    1a28:	ldr	r0, [r0]
    1a2c:	ldr	r0, [r0, #68]	; 0x44
    1a30:	movw	r1, #0
    1a34:	cmp	r0, r1
    1a38:	bne	1a60 <coda_ascii_cursor_get_bit_size+0x9ec>
    1a3c:	ldr	r0, [fp, #-16]
    1a40:	ldr	r0, [r0]
    1a44:	bl	0 <coda_ascii_init_asciilines>
    1a48:	cmp	r0, #0
    1a4c:	beq	1a5c <coda_ascii_cursor_get_bit_size+0x9e8>
    1a50:	mvn	r0, #0
    1a54:	str	r0, [fp, #-12]
    1a58:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1a5c:	b	1a60 <coda_ascii_cursor_get_bit_size+0x9ec>
    1a60:	ldr	r0, [fp, #-16]
    1a64:	ldr	r0, [r0]
    1a68:	ldr	r0, [r0, #64]	; 0x40
    1a6c:	cmp	r0, #0
    1a70:	bne	1a90 <coda_ascii_cursor_get_bit_size+0xa1c>
    1a74:	mvn	r0, #300	; 0x12c
    1a78:	movw	r1, #0
    1a7c:	movt	r1, #0
    1a80:	bl	0 <coda_set_error>
    1a84:	mvn	r0, #0
    1a88:	str	r0, [fp, #-12]
    1a8c:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1a90:	mov	r0, #0
    1a94:	str	r0, [sp, #120]	; 0x78
    1a98:	ldr	r0, [fp, #-16]
    1a9c:	ldr	r0, [r0]
    1aa0:	ldr	r0, [r0, #64]	; 0x40
    1aa4:	sub	r0, r0, #1
    1aa8:	str	r0, [sp, #116]	; 0x74
    1aac:	ldr	r0, [fp, #-16]
    1ab0:	ldr	r0, [r0]
    1ab4:	ldr	r0, [r0, #68]	; 0x44
    1ab8:	str	r0, [sp, #124]	; 0x7c
    1abc:	ldr	r0, [fp, #-16]
    1ac0:	ldr	r1, [r0, #4]
    1ac4:	ldr	r1, [r0, r1, lsl #4]!
    1ac8:	ldr	r0, [r0, #4]
    1acc:	lsr	r1, r1, #3
    1ad0:	orr	r1, r1, r0, lsl #29
    1ad4:	asr	r0, r0, #3
    1ad8:	str	r0, [sp, #132]	; 0x84
    1adc:	str	r1, [sp, #128]	; 0x80
    1ae0:	ldr	r0, [sp, #116]	; 0x74
    1ae4:	ldr	r1, [sp, #120]	; 0x78
    1ae8:	cmp	r0, r1
    1aec:	beq	1b48 <coda_ascii_cursor_get_bit_size+0xad4>
    1af0:	ldr	r0, [sp, #120]	; 0x78
    1af4:	ldr	r1, [sp, #116]	; 0x74
    1af8:	add	r0, r0, r1
    1afc:	add	r0, r0, r0, lsr #31
    1b00:	asr	r0, r0, #1
    1b04:	str	r0, [sp, #112]	; 0x70
    1b08:	ldr	r0, [sp, #128]	; 0x80
    1b0c:	ldr	r1, [sp, #132]	; 0x84
    1b10:	ldr	r2, [sp, #124]	; 0x7c
    1b14:	ldr	r3, [sp, #112]	; 0x70
    1b18:	ldr	r2, [r2, r3, lsl #2]
    1b1c:	subs	r0, r0, r2
    1b20:	sbcs	r1, r1, r2, asr #31
    1b24:	bge	1b38 <coda_ascii_cursor_get_bit_size+0xac4>
    1b28:	b	1b2c <coda_ascii_cursor_get_bit_size+0xab8>
    1b2c:	ldr	r0, [sp, #112]	; 0x70
    1b30:	str	r0, [sp, #116]	; 0x74
    1b34:	b	1b44 <coda_ascii_cursor_get_bit_size+0xad0>
    1b38:	ldr	r0, [sp, #112]	; 0x70
    1b3c:	add	r0, r0, #1
    1b40:	str	r0, [sp, #120]	; 0x78
    1b44:	b	1ae0 <coda_ascii_cursor_get_bit_size+0xa6c>
    1b48:	ldr	r0, [sp, #124]	; 0x7c
    1b4c:	ldr	r1, [sp, #116]	; 0x74
    1b50:	ldr	r0, [r0, r1, lsl #2]
    1b54:	ldr	r1, [sp, #128]	; 0x80
    1b58:	ldr	r2, [sp, #132]	; 0x84
    1b5c:	subs	r1, r0, r1
    1b60:	rsc	r0, r2, r0, asr #31
    1b64:	lsl	r0, r0, #3
    1b68:	orr	r0, r0, r1, lsr #29
    1b6c:	lsl	r1, r1, #3
    1b70:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b74:	str	r1, [r2]
    1b78:	str	r0, [r2, #4]
    1b7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1b80:	ldr	r0, [r0, #44]	; 0x2c
    1b84:	cmp	r0, #3
    1b88:	bne	1c10 <coda_ascii_cursor_get_bit_size+0xb9c>
    1b8c:	ldr	r0, [sp, #116]	; 0x74
    1b90:	ldr	r1, [fp, #-16]
    1b94:	ldr	r1, [r1]
    1b98:	ldr	r1, [r1, #64]	; 0x40
    1b9c:	sub	r1, r1, #1
    1ba0:	cmp	r0, r1
    1ba4:	bne	1bbc <coda_ascii_cursor_get_bit_size+0xb48>
    1ba8:	ldr	r0, [fp, #-16]
    1bac:	ldr	r0, [r0]
    1bb0:	ldr	r0, [r0, #72]	; 0x48
    1bb4:	cmp	r0, #0
    1bb8:	beq	1c0c <coda_ascii_cursor_get_bit_size+0xb98>
    1bbc:	ldr	r0, [fp, #-20]	; 0xffffffec
    1bc0:	ldr	r1, [r0]
    1bc4:	ldr	r2, [r0, #4]
    1bc8:	subs	r1, r1, #8
    1bcc:	sbc	r2, r2, #0
    1bd0:	str	r1, [r0]
    1bd4:	str	r2, [r0, #4]
    1bd8:	ldr	r0, [fp, #-16]
    1bdc:	ldr	r0, [r0]
    1be0:	ldr	r0, [r0, #60]	; 0x3c
    1be4:	cmp	r0, #3
    1be8:	bne	1c08 <coda_ascii_cursor_get_bit_size+0xb94>
    1bec:	ldr	r0, [fp, #-20]	; 0xffffffec
    1bf0:	ldr	r1, [r0]
    1bf4:	ldr	r2, [r0, #4]
    1bf8:	subs	r1, r1, #8
    1bfc:	sbc	r2, r2, #0
    1c00:	str	r1, [r0]
    1c04:	str	r2, [r0, #4]
    1c08:	b	1c0c <coda_ascii_cursor_get_bit_size+0xb98>
    1c0c:	b	1c10 <coda_ascii_cursor_get_bit_size+0xb9c>
    1c10:	b	1e58 <coda_ascii_cursor_get_bit_size+0xde4>
    1c14:	ldr	r0, [fp, #-16]
    1c18:	ldr	r1, [r0, #4]
    1c1c:	lsl	r1, r1, #4
    1c20:	ldrb	r0, [r1, r0]
    1c24:	tst	r0, #7
    1c28:	beq	1c4c <coda_ascii_cursor_get_bit_size+0xbd8>
    1c2c:	b	1c30 <coda_ascii_cursor_get_bit_size+0xbbc>
    1c30:	ldr	r0, [pc, #956]	; 1ff4 <coda_ascii_cursor_get_bit_size+0xf80>
    1c34:	movw	r1, #0
    1c38:	movt	r1, #0
    1c3c:	bl	0 <coda_set_error>
    1c40:	mvn	r0, #0
    1c44:	str	r0, [fp, #-12]
    1c48:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1c4c:	ldr	r0, [fp, #-16]
    1c50:	ldr	r1, [r0, #4]
    1c54:	ldr	r1, [r0, r1, lsl #4]!
    1c58:	ldr	r0, [r0, #4]
    1c5c:	lsr	r1, r1, #3
    1c60:	orr	r1, r1, r0, lsl #29
    1c64:	asr	r0, r0, #3
    1c68:	str	r0, [sp, #100]	; 0x64
    1c6c:	str	r1, [sp, #96]	; 0x60
    1c70:	ldr	r0, [fp, #-16]
    1c74:	ldr	r0, [r0]
    1c78:	ldr	r1, [r0, #8]
    1c7c:	ldr	r0, [r0, #12]
    1c80:	ldr	r2, [sp, #96]	; 0x60
    1c84:	ldr	r3, [sp, #100]	; 0x64
    1c88:	subs	r1, r1, r2
    1c8c:	sbc	r0, r0, r3
    1c90:	str	r1, [sp, #104]	; 0x68
    1c94:	str	r0, [sp, #108]	; 0x6c
    1c98:	mov	r0, #0
    1c9c:	str	r0, [sp, #92]	; 0x5c
    1ca0:	str	r0, [sp, #88]	; 0x58
    1ca4:	ldr	r0, [sp, #88]	; 0x58
    1ca8:	ldr	r1, [sp, #92]	; 0x5c
    1cac:	ldr	r2, [sp, #104]	; 0x68
    1cb0:	ldr	r3, [sp, #108]	; 0x6c
    1cb4:	subs	r0, r0, r2
    1cb8:	sbcs	r1, r1, r3
    1cbc:	bge	1d54 <coda_ascii_cursor_get_bit_size+0xce0>
    1cc0:	b	1cc4 <coda_ascii_cursor_get_bit_size+0xc50>
    1cc4:	add	r0, sp, #87	; 0x57
    1cc8:	ldr	r1, [fp, #-16]
    1ccc:	ldr	r1, [r1]
    1cd0:	ldr	r2, [sp, #96]	; 0x60
    1cd4:	ldr	r3, [sp, #100]	; 0x64
    1cd8:	ldr	ip, [sp, #88]	; 0x58
    1cdc:	ldr	lr, [sp, #92]	; 0x5c
    1ce0:	adds	r2, r2, ip
    1ce4:	adc	r3, r3, lr
    1ce8:	mov	ip, sp
    1cec:	str	r0, [ip, #8]
    1cf0:	mov	r0, #0
    1cf4:	str	r0, [ip, #4]
    1cf8:	mov	r0, #1
    1cfc:	str	r0, [ip]
    1d00:	mov	r0, r1
    1d04:	bl	24f0 <read_bytes_in_bounds>
    1d08:	cmp	r0, #0
    1d0c:	beq	1d1c <coda_ascii_cursor_get_bit_size+0xca8>
    1d10:	mvn	r0, #0
    1d14:	str	r0, [fp, #-12]
    1d18:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1d1c:	ldrb	r0, [sp, #87]	; 0x57
    1d20:	cmp	r0, #13
    1d24:	beq	1d34 <coda_ascii_cursor_get_bit_size+0xcc0>
    1d28:	ldrb	r0, [sp, #87]	; 0x57
    1d2c:	cmp	r0, #10
    1d30:	bne	1d38 <coda_ascii_cursor_get_bit_size+0xcc4>
    1d34:	b	1d54 <coda_ascii_cursor_get_bit_size+0xce0>
    1d38:	ldr	r0, [sp, #88]	; 0x58
    1d3c:	ldr	r1, [sp, #92]	; 0x5c
    1d40:	adds	r0, r0, #1
    1d44:	adc	r1, r1, #0
    1d48:	str	r0, [sp, #88]	; 0x58
    1d4c:	str	r1, [sp, #92]	; 0x5c
    1d50:	b	1ca4 <coda_ascii_cursor_get_bit_size+0xc30>
    1d54:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d58:	ldr	r0, [r0, #44]	; 0x2c
    1d5c:	cmp	r0, #2
    1d60:	bne	1e38 <coda_ascii_cursor_get_bit_size+0xdc4>
    1d64:	ldrb	r0, [sp, #87]	; 0x57
    1d68:	cmp	r0, #13
    1d6c:	bne	1e20 <coda_ascii_cursor_get_bit_size+0xdac>
    1d70:	ldr	r0, [sp, #88]	; 0x58
    1d74:	ldr	r1, [sp, #92]	; 0x5c
    1d78:	adds	r0, r0, #1
    1d7c:	adc	r1, r1, #0
    1d80:	ldr	r2, [sp, #104]	; 0x68
    1d84:	ldr	r3, [sp, #108]	; 0x6c
    1d88:	subs	r0, r0, r2
    1d8c:	sbcs	r1, r1, r3
    1d90:	bge	1e20 <coda_ascii_cursor_get_bit_size+0xdac>
    1d94:	b	1d98 <coda_ascii_cursor_get_bit_size+0xd24>
    1d98:	add	r0, sp, #87	; 0x57
    1d9c:	ldr	r1, [fp, #-16]
    1da0:	ldr	r1, [r1]
    1da4:	ldr	r2, [sp, #96]	; 0x60
    1da8:	ldr	r3, [sp, #100]	; 0x64
    1dac:	ldr	ip, [sp, #88]	; 0x58
    1db0:	ldr	lr, [sp, #92]	; 0x5c
    1db4:	adds	r2, r2, ip
    1db8:	adc	r3, r3, lr
    1dbc:	adds	r2, r2, #1
    1dc0:	adc	r3, r3, #0
    1dc4:	mov	ip, sp
    1dc8:	str	r0, [ip, #8]
    1dcc:	mov	r0, #0
    1dd0:	str	r0, [ip, #4]
    1dd4:	mov	r0, #1
    1dd8:	str	r0, [ip]
    1ddc:	mov	r0, r1
    1de0:	bl	24f0 <read_bytes_in_bounds>
    1de4:	cmp	r0, #0
    1de8:	beq	1df8 <coda_ascii_cursor_get_bit_size+0xd84>
    1dec:	mvn	r0, #0
    1df0:	str	r0, [fp, #-12]
    1df4:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1df8:	ldrb	r0, [sp, #87]	; 0x57
    1dfc:	cmp	r0, #10
    1e00:	bne	1e1c <coda_ascii_cursor_get_bit_size+0xda8>
    1e04:	ldr	r0, [sp, #88]	; 0x58
    1e08:	ldr	r1, [sp, #92]	; 0x5c
    1e0c:	adds	r0, r0, #1
    1e10:	adc	r1, r1, #0
    1e14:	str	r0, [sp, #88]	; 0x58
    1e18:	str	r1, [sp, #92]	; 0x5c
    1e1c:	b	1e20 <coda_ascii_cursor_get_bit_size+0xdac>
    1e20:	ldr	r0, [sp, #88]	; 0x58
    1e24:	ldr	r1, [sp, #92]	; 0x5c
    1e28:	adds	r0, r0, #1
    1e2c:	adc	r1, r1, #0
    1e30:	str	r0, [sp, #88]	; 0x58
    1e34:	str	r1, [sp, #92]	; 0x5c
    1e38:	ldr	r0, [sp, #88]	; 0x58
    1e3c:	ldr	r1, [sp, #92]	; 0x5c
    1e40:	lsl	r1, r1, #3
    1e44:	orr	r1, r1, r0, lsr #29
    1e48:	lsl	r0, r0, #3
    1e4c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1e50:	str	r0, [r2]
    1e54:	str	r1, [r2, #4]
    1e58:	b	1fe0 <coda_ascii_cursor_get_bit_size+0xf6c>
    1e5c:	ldr	r0, [fp, #-16]
    1e60:	ldr	r1, [r0, #4]
    1e64:	lsl	r1, r1, #4
    1e68:	ldrb	r0, [r1, r0]
    1e6c:	tst	r0, #7
    1e70:	beq	1e94 <coda_ascii_cursor_get_bit_size+0xe20>
    1e74:	b	1e78 <coda_ascii_cursor_get_bit_size+0xe04>
    1e78:	ldr	r0, [pc, #372]	; 1ff4 <coda_ascii_cursor_get_bit_size+0xf80>
    1e7c:	movw	r1, #0
    1e80:	movt	r1, #0
    1e84:	bl	0 <coda_set_error>
    1e88:	mvn	r0, #0
    1e8c:	str	r0, [fp, #-12]
    1e90:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1e94:	ldr	r0, [fp, #-16]
    1e98:	ldr	r1, [r0, #4]
    1e9c:	ldr	r1, [r0, r1, lsl #4]!
    1ea0:	ldr	r0, [r0, #4]
    1ea4:	lsr	r1, r1, #3
    1ea8:	orr	r1, r1, r0, lsl #29
    1eac:	asr	r0, r0, #3
    1eb0:	str	r0, [sp, #68]	; 0x44
    1eb4:	str	r1, [sp, #64]	; 0x40
    1eb8:	ldr	r0, [fp, #-16]
    1ebc:	ldr	r0, [r0]
    1ec0:	ldr	r1, [r0, #8]
    1ec4:	ldr	r0, [r0, #12]
    1ec8:	ldr	r2, [sp, #64]	; 0x40
    1ecc:	ldr	r3, [sp, #68]	; 0x44
    1ed0:	subs	r1, r1, r2
    1ed4:	sbc	r0, r0, r3
    1ed8:	str	r1, [sp, #72]	; 0x48
    1edc:	str	r0, [sp, #76]	; 0x4c
    1ee0:	mov	r0, #0
    1ee4:	str	r0, [sp, #60]	; 0x3c
    1ee8:	str	r0, [sp, #56]	; 0x38
    1eec:	ldr	r0, [sp, #56]	; 0x38
    1ef0:	ldr	r1, [sp, #60]	; 0x3c
    1ef4:	ldr	r2, [sp, #72]	; 0x48
    1ef8:	ldr	r3, [sp, #76]	; 0x4c
    1efc:	subs	r0, r0, r2
    1f00:	sbcs	r1, r1, r3
    1f04:	bge	1f9c <coda_ascii_cursor_get_bit_size+0xf28>
    1f08:	b	1f0c <coda_ascii_cursor_get_bit_size+0xe98>
    1f0c:	add	r0, sp, #55	; 0x37
    1f10:	ldr	r1, [fp, #-16]
    1f14:	ldr	r1, [r1]
    1f18:	ldr	r2, [sp, #64]	; 0x40
    1f1c:	ldr	r3, [sp, #68]	; 0x44
    1f20:	ldr	ip, [sp, #56]	; 0x38
    1f24:	ldr	lr, [sp, #60]	; 0x3c
    1f28:	adds	r2, r2, ip
    1f2c:	adc	r3, r3, lr
    1f30:	mov	ip, sp
    1f34:	str	r0, [ip, #8]
    1f38:	mov	r0, #0
    1f3c:	str	r0, [ip, #4]
    1f40:	mov	r0, #1
    1f44:	str	r0, [ip]
    1f48:	mov	r0, r1
    1f4c:	bl	24f0 <read_bytes_in_bounds>
    1f50:	cmp	r0, #0
    1f54:	beq	1f64 <coda_ascii_cursor_get_bit_size+0xef0>
    1f58:	mvn	r0, #0
    1f5c:	str	r0, [fp, #-12]
    1f60:	b	1fe8 <coda_ascii_cursor_get_bit_size+0xf74>
    1f64:	ldrb	r0, [sp, #55]	; 0x37
    1f68:	cmp	r0, #32
    1f6c:	beq	1f80 <coda_ascii_cursor_get_bit_size+0xf0c>
    1f70:	ldrb	r0, [sp, #55]	; 0x37
    1f74:	cmp	r0, #9
    1f78:	beq	1f80 <coda_ascii_cursor_get_bit_size+0xf0c>
    1f7c:	b	1f9c <coda_ascii_cursor_get_bit_size+0xf28>
    1f80:	ldr	r0, [sp, #56]	; 0x38
    1f84:	ldr	r1, [sp, #60]	; 0x3c
    1f88:	adds	r0, r0, #1
    1f8c:	adc	r1, r1, #0
    1f90:	str	r0, [sp, #56]	; 0x38
    1f94:	str	r1, [sp, #60]	; 0x3c
    1f98:	b	1eec <coda_ascii_cursor_get_bit_size+0xe78>
    1f9c:	ldr	r0, [sp, #56]	; 0x38
    1fa0:	ldr	r1, [sp, #60]	; 0x3c
    1fa4:	lsl	r1, r1, #3
    1fa8:	orr	r1, r1, r0, lsr #29
    1fac:	lsl	r0, r0, #3
    1fb0:	ldr	r2, [fp, #-20]	; 0xffffffec
    1fb4:	str	r0, [r2]
    1fb8:	str	r1, [r2, #4]
    1fbc:	b	1fe0 <coda_ascii_cursor_get_bit_size+0xf6c>
    1fc0:	movw	r0, #0
    1fc4:	movt	r0, #0
    1fc8:	movw	r1, #0
    1fcc:	movt	r1, #0
    1fd0:	movw	r2, #1030	; 0x406
    1fd4:	movw	r3, #0
    1fd8:	movt	r3, #0
    1fdc:	bl	0 <__assert_fail>
    1fe0:	movw	r0, #0
    1fe4:	str	r0, [fp, #-12]
    1fe8:	ldr	r0, [fp, #-12]
    1fec:	sub	sp, fp, #8
    1ff0:	pop	{r4, sl, fp, pc}
    1ff4:	.word	0xfffffed4

00001ff8 <get_bit_size_boundary>:
    1ff8:	push	{fp, lr}
    1ffc:	mov	fp, sp
    2000:	sub	sp, sp, #224	; 0xe0
    2004:	str	r0, [fp, #-8]
    2008:	str	r1, [fp, #-12]
    200c:	str	r3, [fp, #-20]	; 0xffffffec
    2010:	str	r2, [fp, #-24]	; 0xffffffe8
    2014:	ldr	r0, [fp, #-8]
    2018:	ldr	r1, [r0, #4]
    201c:	ldr	r1, [r0, r1, lsl #4]!
    2020:	ldr	r0, [r0, #4]
    2024:	str	r0, [fp, #-28]	; 0xffffffe4
    2028:	str	r1, [fp, #-32]	; 0xffffffe0
    202c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2030:	cmn	r0, #1
    2034:	bgt	2048 <get_bit_size_boundary+0x50>
    2038:	b	203c <get_bit_size_boundary+0x44>
    203c:	mov	r0, #0
    2040:	str	r0, [fp, #-20]	; 0xffffffec
    2044:	str	r0, [fp, #-24]	; 0xffffffe8
    2048:	ldr	r0, [fp, #-8]
    204c:	ldr	r0, [r0]
    2050:	ldr	r0, [r0, #16]
    2054:	cmp	r0, #0
    2058:	beq	2070 <get_bit_size_boundary+0x78>
    205c:	ldr	r0, [fp, #-8]
    2060:	ldr	r0, [r0]
    2064:	ldr	r0, [r0, #16]
    2068:	cmp	r0, #1
    206c:	bne	2124 <get_bit_size_boundary+0x12c>
    2070:	ldr	r0, [fp, #-8]
    2074:	ldr	r0, [r0]
    2078:	ldr	r0, [r0, #48]	; 0x30
    207c:	movw	r1, #0
    2080:	cmp	r0, r1
    2084:	beq	20b0 <get_bit_size_boundary+0xb8>
    2088:	ldr	r0, [fp, #-8]
    208c:	ldr	r0, [r0]
    2090:	ldr	r1, [r0, #40]	; 0x28
    2094:	ldr	r0, [r0, #44]	; 0x2c
    2098:	lsl	r0, r0, #3
    209c:	orr	r0, r0, r1, lsr #29
    20a0:	lsl	r1, r1, #3
    20a4:	str	r1, [fp, #-40]	; 0xffffffd8
    20a8:	str	r0, [fp, #-36]	; 0xffffffdc
    20ac:	b	20d4 <get_bit_size_boundary+0xdc>
    20b0:	ldr	r0, [fp, #-8]
    20b4:	ldr	r0, [r0]
    20b8:	ldr	r1, [r0, #8]
    20bc:	ldr	r0, [r0, #12]
    20c0:	lsl	r0, r0, #3
    20c4:	orr	r0, r0, r1, lsr #29
    20c8:	lsl	r1, r1, #3
    20cc:	str	r1, [fp, #-40]	; 0xffffffd8
    20d0:	str	r0, [fp, #-36]	; 0xffffffdc
    20d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    20d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    20dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    20e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    20e4:	adds	r0, r0, r2
    20e8:	adc	r1, r1, r3
    20ec:	ldr	r2, [fp, #-40]	; 0xffffffd8
    20f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    20f4:	subs	r0, r0, r2
    20f8:	sbcs	r1, r1, r3
    20fc:	blt	2120 <get_bit_size_boundary+0x128>
    2100:	b	2104 <get_bit_size_boundary+0x10c>
    2104:	mvn	r0, #300	; 0x12c
    2108:	movw	r1, #0
    210c:	movt	r1, #0
    2110:	bl	0 <coda_set_error>
    2114:	mvn	r0, #0
    2118:	str	r0, [fp, #-4]
    211c:	b	24e4 <get_bit_size_boundary+0x4ec>
    2120:	b	24b8 <get_bit_size_boundary+0x4c0>
    2124:	ldr	r0, [fp, #-8]
    2128:	ldr	r0, [r0, #4]
    212c:	sub	r0, r0, #1
    2130:	str	r0, [fp, #-44]	; 0xffffffd4
    2134:	ldr	r0, [fp, #-44]	; 0xffffffd4
    2138:	cmp	r0, #0
    213c:	movw	r0, #0
    2140:	str	r0, [sp, #32]
    2144:	ble	21a0 <get_bit_size_boundary+0x1a8>
    2148:	ldr	r0, [fp, #-8]
    214c:	add	r0, r0, #8
    2150:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2154:	add	r0, r0, r1, lsl #4
    2158:	ldr	r0, [r0]
    215c:	ldr	r0, [r0]
    2160:	cmp	r0, #0
    2164:	movw	r0, #1
    2168:	str	r0, [sp, #28]
    216c:	beq	2198 <get_bit_size_boundary+0x1a0>
    2170:	ldr	r0, [fp, #-8]
    2174:	add	r0, r0, #8
    2178:	ldr	r1, [fp, #-44]	; 0xffffffd4
    217c:	add	r0, r0, r1, lsl #4
    2180:	ldr	r0, [r0]
    2184:	ldr	r0, [r0]
    2188:	cmp	r0, #1
    218c:	movw	r0, #0
    2190:	moveq	r0, #1
    2194:	str	r0, [sp, #28]
    2198:	ldr	r0, [sp, #28]
    219c:	str	r0, [sp, #32]
    21a0:	ldr	r0, [sp, #32]
    21a4:	tst	r0, #1
    21a8:	beq	21c0 <get_bit_size_boundary+0x1c8>
    21ac:	ldr	r0, [fp, #-44]	; 0xffffffd4
    21b0:	mvn	r1, #0
    21b4:	add	r0, r0, r1
    21b8:	str	r0, [fp, #-44]	; 0xffffffd4
    21bc:	b	2134 <get_bit_size_boundary+0x13c>
    21c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    21c4:	cmp	r0, #0
    21c8:	blt	2210 <get_bit_size_boundary+0x218>
    21cc:	ldr	r0, [fp, #-8]
    21d0:	add	r0, r0, #8
    21d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    21d8:	add	r0, r0, r1, lsl #4
    21dc:	ldr	r0, [r0]
    21e0:	ldr	r0, [r0]
    21e4:	cmp	r0, #100	; 0x64
    21e8:	bne	2210 <get_bit_size_boundary+0x218>
    21ec:	ldr	r0, [fp, #-8]
    21f0:	add	r0, r0, #8
    21f4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    21f8:	add	r0, r0, r1, lsl #4
    21fc:	ldr	r0, [r0]
    2200:	ldr	r0, [r0, #8]
    2204:	cmp	r0, #2
    2208:	bne	2210 <get_bit_size_boundary+0x218>
    220c:	b	2230 <get_bit_size_boundary+0x238>
    2210:	movw	r0, #0
    2214:	movt	r0, #0
    2218:	movw	r1, #0
    221c:	movt	r1, #0
    2220:	movw	r2, #122	; 0x7a
    2224:	movw	r3, #0
    2228:	movt	r3, #0
    222c:	bl	0 <__assert_fail>
    2230:	ldr	r0, [fp, #-8]
    2234:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2238:	add	r0, r0, r1, lsl #4
    223c:	ldr	r0, [r0, #8]
    2240:	ldr	r1, [r0, #24]
    2244:	ldr	r0, [r0, #28]
    2248:	lsl	r0, r0, #3
    224c:	orr	r0, r0, r1, lsr #29
    2250:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2254:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2258:	subs	r1, r2, r1, lsl #3
    225c:	sbc	r0, r3, r0
    2260:	str	r1, [fp, #-32]	; 0xffffffe0
    2264:	str	r0, [fp, #-28]	; 0xffffffe4
    2268:	ldr	r0, [fp, #-8]
    226c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2270:	add	r0, r0, r1, lsl #4
    2274:	ldr	r0, [r0, #8]
    2278:	ldr	r0, [r0, #16]
    227c:	lsl	r1, r0, #3
    2280:	sbfx	r0, r0, #28, #1
    2284:	str	r0, [fp, #-36]	; 0xffffffdc
    2288:	str	r1, [fp, #-40]	; 0xffffffd8
    228c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2290:	cmp	r0, #0
    2294:	bmi	22bc <get_bit_size_boundary+0x2c4>
    2298:	b	229c <get_bit_size_boundary+0x2a4>
    229c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    22a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    22a4:	ldr	r2, [fp, #-40]	; 0xffffffd8
    22a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    22ac:	subs	r0, r2, r0
    22b0:	sbcs	r1, r3, r1
    22b4:	bge	2350 <get_bit_size_boundary+0x358>
    22b8:	b	22bc <get_bit_size_boundary+0x2c4>
    22bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    22c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    22c4:	lsr	r0, r0, #3
    22c8:	orr	r0, r0, r1, lsl #29
    22cc:	asr	r1, r1, #3
    22d0:	sub	r2, fp, #74	; 0x4a
    22d4:	bl	0 <coda_str64>
    22d8:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    22dc:	tst	r0, #7
    22e0:	beq	2310 <get_bit_size_boundary+0x318>
    22e4:	b	22e8 <get_bit_size_boundary+0x2f0>
    22e8:	sub	r0, fp, #74	; 0x4a
    22ec:	str	r0, [sp, #24]
    22f0:	bl	0 <strlen>
    22f4:	ldr	r1, [sp, #24]
    22f8:	add	r0, r1, r0
    22fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2300:	and	r2, r2, #7
    2304:	movw	r1, #0
    2308:	movt	r1, #0
    230c:	bl	0 <sprintf>
    2310:	sub	r2, fp, #95	; 0x5f
    2314:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2318:	ldr	r1, [fp, #-36]	; 0xffffffdc
    231c:	lsr	r0, r0, #3
    2320:	orr	r0, r0, r1, lsl #29
    2324:	asr	r1, r1, #3
    2328:	bl	0 <coda_str64>
    232c:	sub	r3, fp, #95	; 0x5f
    2330:	sub	r2, fp, #74	; 0x4a
    2334:	mvn	r0, #300	; 0x12c
    2338:	movw	r1, #0
    233c:	movt	r1, #0
    2340:	bl	0 <coda_set_error>
    2344:	mvn	r0, #0
    2348:	str	r0, [fp, #-4]
    234c:	b	24e4 <get_bit_size_boundary+0x4ec>
    2350:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2354:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2358:	ldr	r2, [fp, #-24]	; 0xffffffe8
    235c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2360:	adds	r0, r0, r2
    2364:	adc	r1, r1, r3
    2368:	ldr	r2, [fp, #-40]	; 0xffffffd8
    236c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2370:	subs	r0, r2, r0
    2374:	sbcs	r1, r3, r1
    2378:	bge	24b4 <get_bit_size_boundary+0x4bc>
    237c:	b	2380 <get_bit_size_boundary+0x388>
    2380:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2384:	ldr	r1, [fp, #-20]	; 0xffffffec
    2388:	lsr	r0, r0, #3
    238c:	orr	r0, r0, r1, lsl #29
    2390:	asr	r1, r1, #3
    2394:	add	r2, sp, #99	; 0x63
    2398:	bl	0 <coda_str64>
    239c:	ldrb	r0, [fp, #-24]	; 0xffffffe8
    23a0:	tst	r0, #7
    23a4:	beq	23d4 <get_bit_size_boundary+0x3dc>
    23a8:	b	23ac <get_bit_size_boundary+0x3b4>
    23ac:	add	r0, sp, #99	; 0x63
    23b0:	str	r0, [sp, #20]
    23b4:	bl	0 <strlen>
    23b8:	ldr	r1, [sp, #20]
    23bc:	add	r0, r1, r0
    23c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    23c4:	and	r2, r2, #7
    23c8:	movw	r1, #0
    23cc:	movt	r1, #0
    23d0:	bl	0 <sprintf>
    23d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    23d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    23dc:	lsr	r0, r0, #3
    23e0:	orr	r0, r0, r1, lsl #29
    23e4:	asr	r1, r1, #3
    23e8:	add	r2, sp, #69	; 0x45
    23ec:	bl	0 <coda_str64>
    23f0:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    23f4:	tst	r0, #7
    23f8:	beq	2428 <get_bit_size_boundary+0x430>
    23fc:	b	2400 <get_bit_size_boundary+0x408>
    2400:	add	r0, sp, #69	; 0x45
    2404:	str	r0, [sp, #16]
    2408:	bl	0 <strlen>
    240c:	ldr	r1, [sp, #16]
    2410:	add	r0, r1, r0
    2414:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2418:	and	r2, r2, #7
    241c:	movw	r1, #0
    2420:	movt	r1, #0
    2424:	bl	0 <sprintf>
    2428:	ldr	r0, [fp, #-40]	; 0xffffffd8
    242c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2430:	lsr	r0, r0, #3
    2434:	orr	r0, r0, r1, lsl #29
    2438:	asr	r1, r1, #3
    243c:	add	r2, sp, #39	; 0x27
    2440:	bl	0 <coda_str64>
    2444:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    2448:	tst	r0, #7
    244c:	beq	247c <get_bit_size_boundary+0x484>
    2450:	b	2454 <get_bit_size_boundary+0x45c>
    2454:	add	r0, sp, #39	; 0x27
    2458:	str	r0, [sp, #12]
    245c:	bl	0 <strlen>
    2460:	ldr	r1, [sp, #12]
    2464:	add	r0, r1, r0
    2468:	ldr	r2, [fp, #-40]	; 0xffffffd8
    246c:	and	r2, r2, #7
    2470:	movw	r1, #0
    2474:	movt	r1, #0
    2478:	bl	0 <sprintf>
    247c:	add	r0, sp, #39	; 0x27
    2480:	add	r3, sp, #69	; 0x45
    2484:	add	r2, sp, #99	; 0x63
    2488:	mvn	r1, #300	; 0x12c
    248c:	str	r0, [sp, #8]
    2490:	mov	r0, r1
    2494:	movw	r1, #0
    2498:	movt	r1, #0
    249c:	ldr	ip, [sp, #8]
    24a0:	str	ip, [sp]
    24a4:	bl	0 <coda_set_error>
    24a8:	mvn	r0, #0
    24ac:	str	r0, [fp, #-4]
    24b0:	b	24e4 <get_bit_size_boundary+0x4ec>
    24b4:	b	24b8 <get_bit_size_boundary+0x4c0>
    24b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    24bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    24c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    24c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    24c8:	subs	r0, r0, r2
    24cc:	sbc	r1, r1, r3
    24d0:	ldr	r2, [fp, #-12]
    24d4:	str	r0, [r2]
    24d8:	str	r1, [r2, #4]
    24dc:	movw	r0, #0
    24e0:	str	r0, [fp, #-4]
    24e4:	ldr	r0, [fp, #-4]
    24e8:	mov	sp, fp
    24ec:	pop	{fp, pc}

000024f0 <read_bytes_in_bounds>:
    24f0:	push	{fp, lr}
    24f4:	mov	fp, sp
    24f8:	sub	sp, sp, #32
    24fc:	ldr	r1, [fp, #12]
    2500:	ldr	ip, [fp, #8]
    2504:	ldr	lr, [fp, #16]
    2508:	str	r0, [fp, #-8]
    250c:	str	r3, [sp, #20]
    2510:	str	r2, [sp, #16]
    2514:	str	r1, [sp, #12]
    2518:	str	ip, [sp, #8]
    251c:	ldr	r0, [fp, #-8]
    2520:	ldr	r0, [r0, #48]	; 0x30
    2524:	movw	r1, #0
    2528:	cmp	r0, r1
    252c:	beq	2550 <read_bytes_in_bounds+0x60>
    2530:	ldr	r0, [fp, #16]
    2534:	ldr	r1, [fp, #-8]
    2538:	ldr	r1, [r1, #48]	; 0x30
    253c:	ldr	r2, [sp, #16]
    2540:	add	r1, r1, r2
    2544:	ldr	r2, [sp, #8]
    2548:	bl	0 <memcpy>
    254c:	b	25ec <read_bytes_in_bounds+0xfc>
    2550:	ldr	r0, [fp, #-8]
    2554:	ldr	r0, [r0, #16]
    2558:	cmp	r0, #0
    255c:	beq	2570 <read_bytes_in_bounds+0x80>
    2560:	ldr	r0, [fp, #-8]
    2564:	ldr	r0, [r0, #16]
    2568:	cmp	r0, #1
    256c:	bne	2574 <read_bytes_in_bounds+0x84>
    2570:	b	2594 <read_bytes_in_bounds+0xa4>
    2574:	movw	r0, #0
    2578:	movt	r0, #0
    257c:	movw	r1, #0
    2580:	movt	r1, #0
    2584:	movw	r2, #62	; 0x3e
    2588:	movw	r3, #0
    258c:	movt	r3, #0
    2590:	bl	0 <__assert_fail>
    2594:	ldr	r0, [fp, #-8]
    2598:	ldr	r0, [r0, #56]	; 0x38
    259c:	ldr	r1, [fp, #16]
    25a0:	ldr	r2, [sp, #8]
    25a4:	ldr	r3, [sp, #16]
    25a8:	bl	0 <pread>
    25ac:	cmp	r0, #0
    25b0:	bge	25e8 <read_bytes_in_bounds+0xf8>
    25b4:	bl	0 <__errno_location>
    25b8:	ldr	r0, [r0]
    25bc:	bl	0 <strerror>
    25c0:	mvn	r1, #21
    25c4:	str	r0, [sp, #4]
    25c8:	mov	r0, r1
    25cc:	movw	r1, #0
    25d0:	movt	r1, #0
    25d4:	ldr	r2, [sp, #4]
    25d8:	bl	0 <coda_set_error>
    25dc:	mvn	r0, #0
    25e0:	str	r0, [fp, #-4]
    25e4:	b	25f4 <read_bytes_in_bounds+0x104>
    25e8:	b	25ec <read_bytes_in_bounds+0xfc>
    25ec:	movw	r0, #0
    25f0:	str	r0, [fp, #-4]
    25f4:	ldr	r0, [fp, #-4]
    25f8:	mov	sp, fp
    25fc:	pop	{fp, pc}

00002600 <parse_mapping_size>:
    2600:	push	{fp, lr}
    2604:	mov	fp, sp
    2608:	sub	sp, sp, #32
    260c:	str	r0, [fp, #-8]
    2610:	str	r1, [fp, #-12]
    2614:	str	r2, [sp, #16]
    2618:	str	r3, [sp, #12]
    261c:	movw	r0, #0
    2620:	str	r0, [sp, #8]
    2624:	ldr	r0, [sp, #8]
    2628:	ldr	r1, [sp, #16]
    262c:	ldr	r1, [r1, #8]
    2630:	cmp	r0, r1
    2634:	bge	2730 <parse_mapping_size+0x130>
    2638:	ldr	r0, [sp, #16]
    263c:	ldr	r0, [r0, #12]
    2640:	ldr	r1, [sp, #8]
    2644:	add	r0, r0, r1, lsl #2
    2648:	ldr	r0, [r0]
    264c:	ldr	r0, [r0]
    2650:	cmp	r0, #0
    2654:	bne	2684 <parse_mapping_size+0x84>
    2658:	ldr	r0, [fp, #-12]
    265c:	cmp	r0, #0
    2660:	bne	2680 <parse_mapping_size+0x80>
    2664:	ldr	r0, [sp, #12]
    2668:	mov	r1, #0
    266c:	str	r1, [r0, #4]
    2670:	str	r1, [r0]
    2674:	movw	r0, #1
    2678:	str	r0, [fp, #-4]
    267c:	b	2770 <parse_mapping_size+0x170>
    2680:	b	271c <parse_mapping_size+0x11c>
    2684:	ldr	r0, [sp, #16]
    2688:	ldr	r0, [r0, #12]
    268c:	ldr	r1, [sp, #8]
    2690:	add	r0, r0, r1, lsl #2
    2694:	ldr	r0, [r0]
    2698:	ldr	r0, [r0]
    269c:	ldr	r1, [fp, #-12]
    26a0:	cmp	r0, r1
    26a4:	bgt	2718 <parse_mapping_size+0x118>
    26a8:	ldr	r0, [sp, #16]
    26ac:	ldr	r0, [r0, #12]
    26b0:	ldr	r1, [sp, #8]
    26b4:	ldr	r1, [r0, r1, lsl #2]!
    26b8:	ldr	r1, [r1, #4]
    26bc:	ldr	r2, [fp, #-8]
    26c0:	ldr	r0, [r0]
    26c4:	ldr	r0, [r0]
    26c8:	str	r0, [sp, #4]
    26cc:	mov	r0, r1
    26d0:	mov	r1, r2
    26d4:	ldr	r2, [sp, #4]
    26d8:	bl	0 <memcmp>
    26dc:	cmp	r0, #0
    26e0:	bne	2718 <parse_mapping_size+0x118>
    26e4:	ldr	r0, [sp, #16]
    26e8:	ldr	r0, [r0, #12]
    26ec:	ldr	r1, [sp, #8]
    26f0:	ldr	r0, [r0, r1, lsl #2]
    26f4:	ldr	r0, [r0]
    26f8:	lsl	r1, r0, #3
    26fc:	sbfx	r0, r0, #28, #1
    2700:	ldr	r2, [sp, #12]
    2704:	str	r0, [r2, #4]
    2708:	str	r1, [r2]
    270c:	movw	r0, #1
    2710:	str	r0, [fp, #-4]
    2714:	b	2770 <parse_mapping_size+0x170>
    2718:	b	271c <parse_mapping_size+0x11c>
    271c:	b	2720 <parse_mapping_size+0x120>
    2720:	ldr	r0, [sp, #8]
    2724:	add	r0, r0, #1
    2728:	str	r0, [sp, #8]
    272c:	b	2624 <parse_mapping_size+0x24>
    2730:	ldr	r0, [sp, #16]
    2734:	ldr	r0, [r0, #4]
    2738:	cmp	r0, #0
    273c:	bmi	2768 <parse_mapping_size+0x168>
    2740:	b	2744 <parse_mapping_size+0x144>
    2744:	ldr	r0, [sp, #16]
    2748:	ldr	r1, [r0]
    274c:	ldr	r0, [r0, #4]
    2750:	ldr	r2, [sp, #12]
    2754:	str	r0, [r2, #4]
    2758:	str	r1, [r2]
    275c:	movw	r0, #1
    2760:	str	r0, [fp, #-4]
    2764:	b	2770 <parse_mapping_size+0x170>
    2768:	movw	r0, #0
    276c:	str	r0, [fp, #-4]
    2770:	ldr	r0, [fp, #-4]
    2774:	mov	sp, fp
    2778:	pop	{fp, pc}

0000277c <coda_ascii_cursor_read_bytes>:
    277c:	push	{r4, sl, fp, lr}
    2780:	add	fp, sp, #8
    2784:	sub	sp, sp, #48	; 0x30
    2788:	ldr	ip, [fp, #12]
    278c:	ldr	lr, [fp, #8]
    2790:	str	r0, [fp, #-16]
    2794:	str	r1, [fp, #-20]	; 0xffffffec
    2798:	str	r3, [sp, #28]
    279c:	str	r2, [sp, #24]
    27a0:	str	ip, [sp, #20]
    27a4:	str	lr, [sp, #16]
    27a8:	ldr	r0, [fp, #-16]
    27ac:	ldr	r1, [r0, #4]
    27b0:	lsl	r1, r1, #4
    27b4:	ldrb	r0, [r1, r0]
    27b8:	tst	r0, #7
    27bc:	beq	27e0 <coda_ascii_cursor_read_bytes+0x64>
    27c0:	b	27c4 <coda_ascii_cursor_read_bytes+0x48>
    27c4:	ldr	r0, [pc, #120]	; 2844 <coda_ascii_cursor_read_bytes+0xc8>
    27c8:	movw	r1, #0
    27cc:	movt	r1, #0
    27d0:	bl	0 <coda_set_error>
    27d4:	mvn	r0, #0
    27d8:	str	r0, [fp, #-12]
    27dc:	b	2838 <coda_ascii_cursor_read_bytes+0xbc>
    27e0:	ldr	r0, [fp, #-16]
    27e4:	ldr	r1, [r0]
    27e8:	ldr	r2, [r0, #4]
    27ec:	ldr	r2, [r0, r2, lsl #4]!
    27f0:	ldr	r0, [r0, #4]
    27f4:	lsr	r2, r2, #3
    27f8:	orr	r2, r2, r0, lsl #29
    27fc:	asr	r0, r0, #3
    2800:	ldr	r3, [sp, #24]
    2804:	ldr	ip, [sp, #28]
    2808:	adds	r2, r2, r3
    280c:	adc	r3, r0, ip
    2810:	ldr	r0, [sp, #16]
    2814:	ldr	ip, [sp, #20]
    2818:	ldr	lr, [fp, #-20]	; 0xffffffec
    281c:	mov	r4, sp
    2820:	str	lr, [r4, #8]
    2824:	str	ip, [r4, #4]
    2828:	str	r0, [r4]
    282c:	mov	r0, r1
    2830:	bl	3bb8 <read_bytes>
    2834:	str	r0, [fp, #-12]
    2838:	ldr	r0, [fp, #-12]
    283c:	sub	sp, fp, #8
    2840:	pop	{r4, sl, fp, pc}
    2844:	.word	0xfffffed4

00002848 <coda_ascii_cursor_get_num_elements>:
    2848:	push	{fp, lr}
    284c:	mov	fp, sp
    2850:	sub	sp, sp, #16
    2854:	str	r0, [sp, #8]
    2858:	str	r1, [sp, #4]
    285c:	ldr	r0, [sp, #8]
    2860:	add	r1, r0, #8
    2864:	ldr	r0, [r0, #4]
    2868:	sub	r0, r0, #1
    286c:	add	r0, r1, r0, lsl #4
    2870:	ldr	r0, [r0]
    2874:	ldr	r0, [r0]
    2878:	cmp	r0, #100	; 0x64
    287c:	bcs	28a0 <coda_ascii_cursor_get_num_elements+0x58>
    2880:	ldr	r0, [sp, #8]
    2884:	add	r1, r0, #8
    2888:	ldr	r0, [r0, #4]
    288c:	sub	r0, r0, #1
    2890:	add	r0, r1, r0, lsl #4
    2894:	ldr	r0, [r0]
    2898:	str	r0, [sp]
    289c:	b	28c0 <coda_ascii_cursor_get_num_elements+0x78>
    28a0:	ldr	r0, [sp, #8]
    28a4:	add	r1, r0, #8
    28a8:	ldr	r0, [r0, #4]
    28ac:	sub	r0, r0, #1
    28b0:	add	r0, r1, r0, lsl #4
    28b4:	ldr	r0, [r0]
    28b8:	ldr	r0, [r0, #4]
    28bc:	str	r0, [sp]
    28c0:	ldr	r0, [sp]
    28c4:	ldr	r0, [r0, #8]
    28c8:	cmp	r0, #1
    28cc:	bhi	28e8 <coda_ascii_cursor_get_num_elements+0xa0>
    28d0:	b	28d4 <coda_ascii_cursor_get_num_elements+0x8c>
    28d4:	ldr	r0, [sp, #8]
    28d8:	ldr	r1, [sp, #4]
    28dc:	bl	0 <coda_ascbin_cursor_get_num_elements>
    28e0:	str	r0, [fp, #-4]
    28e4:	b	28fc <coda_ascii_cursor_get_num_elements+0xb4>
    28e8:	ldr	r0, [sp, #4]
    28ec:	movw	r1, #1
    28f0:	str	r1, [r0]
    28f4:	movw	r0, #0
    28f8:	str	r0, [fp, #-4]
    28fc:	ldr	r0, [fp, #-4]
    2900:	mov	sp, fp
    2904:	pop	{fp, pc}

00002908 <coda_ascii_cursor_read_int64>:
    2908:	push	{r4, sl, fp, lr}
    290c:	add	fp, sp, #8
    2910:	sub	sp, sp, #128	; 0x80
    2914:	str	r0, [fp, #-16]
    2918:	str	r1, [fp, #-20]	; 0xffffffec
    291c:	ldr	r0, [fp, #-16]
    2920:	add	r1, r0, #8
    2924:	ldr	r0, [r0, #4]
    2928:	sub	r0, r0, #1
    292c:	add	r0, r1, r0, lsl #4
    2930:	ldr	r0, [r0]
    2934:	ldr	r0, [r0]
    2938:	cmp	r0, #100	; 0x64
    293c:	bcs	2960 <coda_ascii_cursor_read_int64+0x58>
    2940:	ldr	r0, [fp, #-16]
    2944:	add	r1, r0, #8
    2948:	ldr	r0, [r0, #4]
    294c:	sub	r0, r0, #1
    2950:	add	r0, r1, r0, lsl #4
    2954:	ldr	r0, [r0]
    2958:	str	r0, [sp, #20]
    295c:	b	2980 <coda_ascii_cursor_read_int64+0x78>
    2960:	ldr	r0, [fp, #-16]
    2964:	add	r1, r0, #8
    2968:	ldr	r0, [r0, #4]
    296c:	sub	r0, r0, #1
    2970:	add	r0, r1, r0, lsl #4
    2974:	ldr	r0, [r0]
    2978:	ldr	r0, [r0, #4]
    297c:	str	r0, [sp, #20]
    2980:	ldr	r0, [sp, #20]
    2984:	str	r0, [fp, #-24]	; 0xffffffe8
    2988:	ldr	r0, [fp, #-16]
    298c:	ldr	r1, [r0, #4]
    2990:	ldr	r1, [r0, r1, lsl #4]!
    2994:	ldr	r0, [r0, #4]
    2998:	str	r0, [fp, #-28]	; 0xffffffe4
    299c:	str	r1, [fp, #-32]	; 0xffffffe0
    29a0:	mov	r0, #1
    29a4:	str	r0, [sp, #24]
    29a8:	ldr	r0, [fp, #-16]
    29ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
    29b0:	ldr	r2, [r1, #24]
    29b4:	ldr	r3, [r1, #28]
    29b8:	sub	r1, fp, #40	; 0x28
    29bc:	bl	1ff8 <get_bit_size_boundary>
    29c0:	cmp	r0, #0
    29c4:	beq	29d4 <coda_ascii_cursor_read_int64+0xcc>
    29c8:	mvn	r0, #0
    29cc:	str	r0, [fp, #-12]
    29d0:	b	2bb0 <coda_ascii_cursor_read_int64+0x2a8>
    29d4:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    29d8:	tst	r0, #7
    29dc:	beq	2a00 <coda_ascii_cursor_read_int64+0xf8>
    29e0:	b	29e4 <coda_ascii_cursor_read_int64+0xdc>
    29e4:	mvn	r0, #21
    29e8:	movw	r1, #0
    29ec:	movt	r1, #0
    29f0:	bl	0 <coda_set_error>
    29f4:	mvn	r0, #0
    29f8:	str	r0, [fp, #-12]
    29fc:	b	2bb0 <coda_ascii_cursor_read_int64+0x2a8>
    2a00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a04:	ldr	r0, [r0, #28]
    2a08:	cmp	r0, #0
    2a0c:	bmi	2a68 <coda_ascii_cursor_read_int64+0x160>
    2a10:	b	2a14 <coda_ascii_cursor_read_int64+0x10c>
    2a14:	mov	r0, #0
    2a18:	str	r0, [sp, #24]
    2a1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a20:	ldr	r1, [r0, #24]
    2a24:	ldr	r0, [r0, #28]
    2a28:	lsr	r1, r1, #3
    2a2c:	orr	r0, r1, r0, lsl #29
    2a30:	str	r0, [sp, #28]
    2a34:	ldr	r0, [sp, #28]
    2a38:	cmp	r0, #64	; 0x40
    2a3c:	bgt	2a44 <coda_ascii_cursor_read_int64+0x13c>
    2a40:	b	2a64 <coda_ascii_cursor_read_int64+0x15c>
    2a44:	movw	r0, #0
    2a48:	movt	r0, #0
    2a4c:	movw	r1, #0
    2a50:	movt	r1, #0
    2a54:	movw	r2, #1076	; 0x434
    2a58:	movw	r3, #0
    2a5c:	movt	r3, #0
    2a60:	bl	0 <__assert_fail>
    2a64:	b	2ab0 <coda_ascii_cursor_read_int64+0x1a8>
    2a68:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2a6c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2a70:	lsr	r0, r0, #3
    2a74:	orr	r0, r0, r1, lsl #29
    2a78:	rsbs	r0, r0, #63	; 0x3f
    2a7c:	mov	r2, #0
    2a80:	sbcs	r1, r2, r1, asr #3
    2a84:	blt	2aa4 <coda_ascii_cursor_read_int64+0x19c>
    2a88:	b	2a8c <coda_ascii_cursor_read_int64+0x184>
    2a8c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2a90:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2a94:	lsr	r0, r0, #3
    2a98:	orr	r0, r0, r1, lsl #29
    2a9c:	str	r0, [sp, #28]
    2aa0:	b	2aac <coda_ascii_cursor_read_int64+0x1a4>
    2aa4:	movw	r0, #64	; 0x40
    2aa8:	str	r0, [sp, #28]
    2aac:	b	2ab0 <coda_ascii_cursor_read_int64+0x1a8>
    2ab0:	add	r0, sp, #32
    2ab4:	ldr	r1, [fp, #-16]
    2ab8:	ldr	r1, [r1]
    2abc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2ac0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2ac4:	lsr	r2, r2, #3
    2ac8:	orr	r2, r2, r3, lsl #29
    2acc:	asr	r3, r3, #3
    2ad0:	ldr	ip, [sp, #28]
    2ad4:	asr	lr, ip, #31
    2ad8:	mov	r4, sp
    2adc:	str	r0, [r4, #8]
    2ae0:	str	lr, [r4, #4]
    2ae4:	str	ip, [r4]
    2ae8:	mov	r0, r1
    2aec:	bl	24f0 <read_bytes_in_bounds>
    2af0:	cmp	r0, #0
    2af4:	beq	2b04 <coda_ascii_cursor_read_int64+0x1fc>
    2af8:	mvn	r0, #0
    2afc:	str	r0, [fp, #-12]
    2b00:	b	2bb0 <coda_ascii_cursor_read_int64+0x2a8>
    2b04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2b08:	ldr	r0, [r0, #52]	; 0x34
    2b0c:	movw	r1, #0
    2b10:	cmp	r0, r1
    2b14:	beq	2b80 <coda_ascii_cursor_read_int64+0x278>
    2b18:	ldr	r1, [sp, #28]
    2b1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2b20:	ldr	r2, [r0, #52]	; 0x34
    2b24:	ldr	r3, [sp, #24]
    2b28:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b2c:	mov	ip, sp
    2b30:	str	r0, [ip]
    2b34:	add	r0, sp, #32
    2b38:	bl	2bbc <parse_integer_mapping>
    2b3c:	mov	r1, r0
    2b40:	cmp	r0, #0
    2b44:	str	r1, [sp, #16]
    2b48:	beq	2b60 <coda_ascii_cursor_read_int64+0x258>
    2b4c:	b	2b50 <coda_ascii_cursor_read_int64+0x248>
    2b50:	ldr	r0, [sp, #16]
    2b54:	cmp	r0, #1
    2b58:	beq	2b64 <coda_ascii_cursor_read_int64+0x25c>
    2b5c:	b	2b70 <coda_ascii_cursor_read_int64+0x268>
    2b60:	b	2b7c <coda_ascii_cursor_read_int64+0x274>
    2b64:	movw	r0, #0
    2b68:	str	r0, [fp, #-12]
    2b6c:	b	2bb0 <coda_ascii_cursor_read_int64+0x2a8>
    2b70:	mvn	r0, #0
    2b74:	str	r0, [fp, #-12]
    2b78:	b	2bb0 <coda_ascii_cursor_read_int64+0x2a8>
    2b7c:	b	2b80 <coda_ascii_cursor_read_int64+0x278>
    2b80:	add	r0, sp, #32
    2b84:	ldr	r1, [sp, #28]
    2b88:	ldr	r2, [fp, #-20]	; 0xffffffec
    2b8c:	ldr	r3, [sp, #24]
    2b90:	bl	0 <coda_ascii_parse_int64>
    2b94:	cmp	r0, #0
    2b98:	bge	2ba8 <coda_ascii_cursor_read_int64+0x2a0>
    2b9c:	mvn	r0, #0
    2ba0:	str	r0, [fp, #-12]
    2ba4:	b	2bb0 <coda_ascii_cursor_read_int64+0x2a8>
    2ba8:	movw	r0, #0
    2bac:	str	r0, [fp, #-12]
    2bb0:	ldr	r0, [fp, #-12]
    2bb4:	sub	sp, fp, #8
    2bb8:	pop	{r4, sl, fp, pc}

00002bbc <parse_integer_mapping>:
    2bbc:	push	{fp, lr}
    2bc0:	mov	fp, sp
    2bc4:	sub	sp, sp, #32
    2bc8:	ldr	ip, [fp, #8]
    2bcc:	str	r0, [fp, #-8]
    2bd0:	str	r1, [fp, #-12]
    2bd4:	str	r2, [sp, #16]
    2bd8:	str	r3, [sp, #12]
    2bdc:	movw	r0, #0
    2be0:	str	r0, [sp, #8]
    2be4:	ldr	r0, [sp, #8]
    2be8:	ldr	r1, [sp, #16]
    2bec:	ldr	r1, [r1, #8]
    2bf0:	cmp	r0, r1
    2bf4:	bge	2d4c <parse_integer_mapping+0x190>
    2bf8:	ldr	r0, [sp, #16]
    2bfc:	ldr	r0, [r0, #12]
    2c00:	ldr	r1, [sp, #8]
    2c04:	add	r0, r0, r1, lsl #2
    2c08:	ldr	r0, [r0]
    2c0c:	ldr	r0, [r0]
    2c10:	cmp	r0, #0
    2c14:	bne	2c58 <parse_integer_mapping+0x9c>
    2c18:	ldr	r0, [fp, #-12]
    2c1c:	cmp	r0, #0
    2c20:	bne	2c54 <parse_integer_mapping+0x98>
    2c24:	ldr	r0, [sp, #16]
    2c28:	ldr	r0, [r0, #12]
    2c2c:	ldr	r1, [sp, #8]
    2c30:	ldr	r0, [r0, r1, lsl #2]
    2c34:	ldr	r1, [r0, #8]
    2c38:	ldr	r0, [r0, #12]
    2c3c:	ldr	r2, [fp, #8]
    2c40:	str	r0, [r2, #4]
    2c44:	str	r1, [r2]
    2c48:	movw	r0, #1
    2c4c:	str	r0, [fp, #-4]
    2c50:	b	2d54 <parse_integer_mapping+0x198>
    2c54:	b	2d38 <parse_integer_mapping+0x17c>
    2c58:	ldr	r0, [sp, #16]
    2c5c:	ldr	r0, [r0, #12]
    2c60:	ldr	r1, [sp, #8]
    2c64:	add	r0, r0, r1, lsl #2
    2c68:	ldr	r0, [r0]
    2c6c:	ldr	r0, [r0]
    2c70:	ldr	r1, [fp, #-12]
    2c74:	cmp	r0, r1
    2c78:	bgt	2d34 <parse_integer_mapping+0x178>
    2c7c:	ldr	r0, [sp, #16]
    2c80:	ldr	r0, [r0, #12]
    2c84:	ldr	r1, [sp, #8]
    2c88:	ldr	r1, [r0, r1, lsl #2]!
    2c8c:	ldr	r1, [r1, #4]
    2c90:	ldr	r2, [fp, #-8]
    2c94:	ldr	r0, [r0]
    2c98:	ldr	r0, [r0]
    2c9c:	str	r0, [sp, #4]
    2ca0:	mov	r0, r1
    2ca4:	mov	r1, r2
    2ca8:	ldr	r2, [sp, #4]
    2cac:	bl	0 <memcmp>
    2cb0:	cmp	r0, #0
    2cb4:	bne	2d34 <parse_integer_mapping+0x178>
    2cb8:	ldr	r0, [sp, #12]
    2cbc:	cmp	r0, #0
    2cc0:	bne	2d04 <parse_integer_mapping+0x148>
    2cc4:	ldr	r0, [sp, #16]
    2cc8:	ldr	r0, [r0, #12]
    2ccc:	ldr	r1, [sp, #8]
    2cd0:	add	r0, r0, r1, lsl #2
    2cd4:	ldr	r0, [r0]
    2cd8:	ldr	r0, [r0]
    2cdc:	ldr	r1, [fp, #-12]
    2ce0:	cmp	r0, r1
    2ce4:	beq	2d04 <parse_integer_mapping+0x148>
    2ce8:	mvn	r0, #102	; 0x66
    2cec:	movw	r1, #0
    2cf0:	movt	r1, #0
    2cf4:	bl	0 <coda_set_error>
    2cf8:	mvn	r0, #0
    2cfc:	str	r0, [fp, #-4]
    2d00:	b	2d54 <parse_integer_mapping+0x198>
    2d04:	ldr	r0, [sp, #16]
    2d08:	ldr	r0, [r0, #12]
    2d0c:	ldr	r1, [sp, #8]
    2d10:	ldr	r0, [r0, r1, lsl #2]
    2d14:	ldr	r1, [r0, #8]
    2d18:	ldr	r0, [r0, #12]
    2d1c:	ldr	r2, [fp, #8]
    2d20:	str	r0, [r2, #4]
    2d24:	str	r1, [r2]
    2d28:	movw	r0, #1
    2d2c:	str	r0, [fp, #-4]
    2d30:	b	2d54 <parse_integer_mapping+0x198>
    2d34:	b	2d38 <parse_integer_mapping+0x17c>
    2d38:	b	2d3c <parse_integer_mapping+0x180>
    2d3c:	ldr	r0, [sp, #8]
    2d40:	add	r0, r0, #1
    2d44:	str	r0, [sp, #8]
    2d48:	b	2be4 <parse_integer_mapping+0x28>
    2d4c:	movw	r0, #0
    2d50:	str	r0, [fp, #-4]
    2d54:	ldr	r0, [fp, #-4]
    2d58:	mov	sp, fp
    2d5c:	pop	{fp, pc}

00002d60 <coda_ascii_cursor_read_uint64>:
    2d60:	push	{r4, sl, fp, lr}
    2d64:	add	fp, sp, #8
    2d68:	sub	sp, sp, #128	; 0x80
    2d6c:	str	r0, [fp, #-16]
    2d70:	str	r1, [fp, #-20]	; 0xffffffec
    2d74:	ldr	r0, [fp, #-16]
    2d78:	add	r1, r0, #8
    2d7c:	ldr	r0, [r0, #4]
    2d80:	sub	r0, r0, #1
    2d84:	add	r0, r1, r0, lsl #4
    2d88:	ldr	r0, [r0]
    2d8c:	ldr	r0, [r0]
    2d90:	cmp	r0, #100	; 0x64
    2d94:	bcs	2db8 <coda_ascii_cursor_read_uint64+0x58>
    2d98:	ldr	r0, [fp, #-16]
    2d9c:	add	r1, r0, #8
    2da0:	ldr	r0, [r0, #4]
    2da4:	sub	r0, r0, #1
    2da8:	add	r0, r1, r0, lsl #4
    2dac:	ldr	r0, [r0]
    2db0:	str	r0, [sp, #20]
    2db4:	b	2dd8 <coda_ascii_cursor_read_uint64+0x78>
    2db8:	ldr	r0, [fp, #-16]
    2dbc:	add	r1, r0, #8
    2dc0:	ldr	r0, [r0, #4]
    2dc4:	sub	r0, r0, #1
    2dc8:	add	r0, r1, r0, lsl #4
    2dcc:	ldr	r0, [r0]
    2dd0:	ldr	r0, [r0, #4]
    2dd4:	str	r0, [sp, #20]
    2dd8:	ldr	r0, [sp, #20]
    2ddc:	str	r0, [fp, #-24]	; 0xffffffe8
    2de0:	ldr	r0, [fp, #-16]
    2de4:	ldr	r1, [r0, #4]
    2de8:	ldr	r1, [r0, r1, lsl #4]!
    2dec:	ldr	r0, [r0, #4]
    2df0:	str	r0, [fp, #-28]	; 0xffffffe4
    2df4:	str	r1, [fp, #-32]	; 0xffffffe0
    2df8:	mov	r0, #1
    2dfc:	str	r0, [sp, #24]
    2e00:	ldr	r0, [fp, #-16]
    2e04:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2e08:	ldr	r2, [r1, #24]
    2e0c:	ldr	r3, [r1, #28]
    2e10:	sub	r1, fp, #40	; 0x28
    2e14:	bl	1ff8 <get_bit_size_boundary>
    2e18:	cmp	r0, #0
    2e1c:	beq	2e2c <coda_ascii_cursor_read_uint64+0xcc>
    2e20:	mvn	r0, #0
    2e24:	str	r0, [fp, #-12]
    2e28:	b	3008 <coda_ascii_cursor_read_uint64+0x2a8>
    2e2c:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    2e30:	tst	r0, #7
    2e34:	beq	2e58 <coda_ascii_cursor_read_uint64+0xf8>
    2e38:	b	2e3c <coda_ascii_cursor_read_uint64+0xdc>
    2e3c:	mvn	r0, #21
    2e40:	movw	r1, #0
    2e44:	movt	r1, #0
    2e48:	bl	0 <coda_set_error>
    2e4c:	mvn	r0, #0
    2e50:	str	r0, [fp, #-12]
    2e54:	b	3008 <coda_ascii_cursor_read_uint64+0x2a8>
    2e58:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2e5c:	ldr	r0, [r0, #28]
    2e60:	cmp	r0, #0
    2e64:	bmi	2ec0 <coda_ascii_cursor_read_uint64+0x160>
    2e68:	b	2e6c <coda_ascii_cursor_read_uint64+0x10c>
    2e6c:	mov	r0, #0
    2e70:	str	r0, [sp, #24]
    2e74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2e78:	ldr	r1, [r0, #24]
    2e7c:	ldr	r0, [r0, #28]
    2e80:	lsr	r1, r1, #3
    2e84:	orr	r0, r1, r0, lsl #29
    2e88:	str	r0, [sp, #28]
    2e8c:	ldr	r0, [sp, #28]
    2e90:	cmp	r0, #64	; 0x40
    2e94:	bgt	2e9c <coda_ascii_cursor_read_uint64+0x13c>
    2e98:	b	2ebc <coda_ascii_cursor_read_uint64+0x15c>
    2e9c:	movw	r0, #0
    2ea0:	movt	r0, #0
    2ea4:	movw	r1, #0
    2ea8:	movt	r1, #0
    2eac:	movw	r2, #1137	; 0x471
    2eb0:	movw	r3, #0
    2eb4:	movt	r3, #0
    2eb8:	bl	0 <__assert_fail>
    2ebc:	b	2f08 <coda_ascii_cursor_read_uint64+0x1a8>
    2ec0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2ec4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2ec8:	lsr	r0, r0, #3
    2ecc:	orr	r0, r0, r1, lsl #29
    2ed0:	rsbs	r0, r0, #63	; 0x3f
    2ed4:	mov	r2, #0
    2ed8:	sbcs	r1, r2, r1, asr #3
    2edc:	blt	2efc <coda_ascii_cursor_read_uint64+0x19c>
    2ee0:	b	2ee4 <coda_ascii_cursor_read_uint64+0x184>
    2ee4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2ee8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2eec:	lsr	r0, r0, #3
    2ef0:	orr	r0, r0, r1, lsl #29
    2ef4:	str	r0, [sp, #28]
    2ef8:	b	2f04 <coda_ascii_cursor_read_uint64+0x1a4>
    2efc:	movw	r0, #64	; 0x40
    2f00:	str	r0, [sp, #28]
    2f04:	b	2f08 <coda_ascii_cursor_read_uint64+0x1a8>
    2f08:	add	r0, sp, #32
    2f0c:	ldr	r1, [fp, #-16]
    2f10:	ldr	r1, [r1]
    2f14:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2f18:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2f1c:	lsr	r2, r2, #3
    2f20:	orr	r2, r2, r3, lsl #29
    2f24:	asr	r3, r3, #3
    2f28:	ldr	ip, [sp, #28]
    2f2c:	asr	lr, ip, #31
    2f30:	mov	r4, sp
    2f34:	str	r0, [r4, #8]
    2f38:	str	lr, [r4, #4]
    2f3c:	str	ip, [r4]
    2f40:	mov	r0, r1
    2f44:	bl	24f0 <read_bytes_in_bounds>
    2f48:	cmp	r0, #0
    2f4c:	beq	2f5c <coda_ascii_cursor_read_uint64+0x1fc>
    2f50:	mvn	r0, #0
    2f54:	str	r0, [fp, #-12]
    2f58:	b	3008 <coda_ascii_cursor_read_uint64+0x2a8>
    2f5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2f60:	ldr	r0, [r0, #52]	; 0x34
    2f64:	movw	r1, #0
    2f68:	cmp	r0, r1
    2f6c:	beq	2fd8 <coda_ascii_cursor_read_uint64+0x278>
    2f70:	ldr	r1, [sp, #28]
    2f74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2f78:	ldr	r2, [r0, #52]	; 0x34
    2f7c:	ldr	r3, [sp, #24]
    2f80:	ldr	r0, [fp, #-20]	; 0xffffffec
    2f84:	mov	ip, sp
    2f88:	str	r0, [ip]
    2f8c:	add	r0, sp, #32
    2f90:	bl	2bbc <parse_integer_mapping>
    2f94:	mov	r1, r0
    2f98:	cmp	r0, #0
    2f9c:	str	r1, [sp, #16]
    2fa0:	beq	2fb8 <coda_ascii_cursor_read_uint64+0x258>
    2fa4:	b	2fa8 <coda_ascii_cursor_read_uint64+0x248>
    2fa8:	ldr	r0, [sp, #16]
    2fac:	cmp	r0, #1
    2fb0:	beq	2fbc <coda_ascii_cursor_read_uint64+0x25c>
    2fb4:	b	2fc8 <coda_ascii_cursor_read_uint64+0x268>
    2fb8:	b	2fd4 <coda_ascii_cursor_read_uint64+0x274>
    2fbc:	movw	r0, #0
    2fc0:	str	r0, [fp, #-12]
    2fc4:	b	3008 <coda_ascii_cursor_read_uint64+0x2a8>
    2fc8:	mvn	r0, #0
    2fcc:	str	r0, [fp, #-12]
    2fd0:	b	3008 <coda_ascii_cursor_read_uint64+0x2a8>
    2fd4:	b	2fd8 <coda_ascii_cursor_read_uint64+0x278>
    2fd8:	add	r0, sp, #32
    2fdc:	ldr	r1, [sp, #28]
    2fe0:	ldr	r2, [fp, #-20]	; 0xffffffec
    2fe4:	ldr	r3, [sp, #24]
    2fe8:	bl	364 <coda_ascii_parse_uint64>
    2fec:	cmp	r0, #0
    2ff0:	bge	3000 <coda_ascii_cursor_read_uint64+0x2a0>
    2ff4:	mvn	r0, #0
    2ff8:	str	r0, [fp, #-12]
    2ffc:	b	3008 <coda_ascii_cursor_read_uint64+0x2a8>
    3000:	movw	r0, #0
    3004:	str	r0, [fp, #-12]
    3008:	ldr	r0, [fp, #-12]
    300c:	sub	sp, fp, #8
    3010:	pop	{r4, sl, fp, pc}

00003014 <coda_ascii_cursor_read_int8>:
    3014:	push	{fp, lr}
    3018:	mov	fp, sp
    301c:	sub	sp, sp, #24
    3020:	str	r0, [fp, #-8]
    3024:	str	r1, [sp, #12]
    3028:	ldr	r0, [fp, #-8]
    302c:	mov	r1, sp
    3030:	bl	2908 <coda_ascii_cursor_read_int64>
    3034:	cmp	r0, #0
    3038:	beq	3048 <coda_ascii_cursor_read_int8+0x34>
    303c:	mvn	r0, #0
    3040:	str	r0, [fp, #-4]
    3044:	b	30b0 <coda_ascii_cursor_read_int8+0x9c>
    3048:	ldr	r0, [sp]
    304c:	ldr	r1, [sp, #4]
    3050:	rsbs	r0, r0, #127	; 0x7f
    3054:	rscs	r1, r1, #0
    3058:	blt	3080 <coda_ascii_cursor_read_int8+0x6c>
    305c:	b	3060 <coda_ascii_cursor_read_int8+0x4c>
    3060:	ldr	r0, [sp]
    3064:	ldr	r1, [sp, #4]
    3068:	mvn	r2, #128	; 0x80
    306c:	subs	r0, r2, r0
    3070:	mvn	r2, #0
    3074:	sbcs	r1, r2, r1
    3078:	blt	309c <coda_ascii_cursor_read_int8+0x88>
    307c:	b	3080 <coda_ascii_cursor_read_int8+0x6c>
    3080:	ldr	r0, [pc, #52]	; 30bc <coda_ascii_cursor_read_int8+0xa8>
    3084:	movw	r1, #0
    3088:	movt	r1, #0
    308c:	bl	0 <coda_set_error>
    3090:	mvn	r0, #0
    3094:	str	r0, [fp, #-4]
    3098:	b	30b0 <coda_ascii_cursor_read_int8+0x9c>
    309c:	ldrb	r0, [sp]
    30a0:	ldr	r1, [sp, #12]
    30a4:	strb	r0, [r1]
    30a8:	movw	r0, #0
    30ac:	str	r0, [fp, #-4]
    30b0:	ldr	r0, [fp, #-4]
    30b4:	mov	sp, fp
    30b8:	pop	{fp, pc}
    30bc:	.word	0xfffffed4

000030c0 <coda_ascii_cursor_read_uint8>:
    30c0:	push	{fp, lr}
    30c4:	mov	fp, sp
    30c8:	sub	sp, sp, #24
    30cc:	str	r0, [fp, #-8]
    30d0:	str	r1, [sp, #12]
    30d4:	ldr	r0, [fp, #-8]
    30d8:	mov	r1, sp
    30dc:	bl	2d60 <coda_ascii_cursor_read_uint64>
    30e0:	cmp	r0, #0
    30e4:	beq	30f4 <coda_ascii_cursor_read_uint8+0x34>
    30e8:	mvn	r0, #0
    30ec:	str	r0, [fp, #-4]
    30f0:	b	313c <coda_ascii_cursor_read_uint8+0x7c>
    30f4:	ldr	r0, [sp]
    30f8:	ldr	r1, [sp, #4]
    30fc:	subs	r0, r0, #256	; 0x100
    3100:	sbcs	r1, r1, #0
    3104:	bcc	3128 <coda_ascii_cursor_read_uint8+0x68>
    3108:	b	310c <coda_ascii_cursor_read_uint8+0x4c>
    310c:	ldr	r0, [pc, #52]	; 3148 <coda_ascii_cursor_read_uint8+0x88>
    3110:	movw	r1, #0
    3114:	movt	r1, #0
    3118:	bl	0 <coda_set_error>
    311c:	mvn	r0, #0
    3120:	str	r0, [fp, #-4]
    3124:	b	313c <coda_ascii_cursor_read_uint8+0x7c>
    3128:	ldrb	r0, [sp]
    312c:	ldr	r1, [sp, #12]
    3130:	strb	r0, [r1]
    3134:	movw	r0, #0
    3138:	str	r0, [fp, #-4]
    313c:	ldr	r0, [fp, #-4]
    3140:	mov	sp, fp
    3144:	pop	{fp, pc}
    3148:	.word	0xfffffed4

0000314c <coda_ascii_cursor_read_int16>:
    314c:	push	{fp, lr}
    3150:	mov	fp, sp
    3154:	sub	sp, sp, #24
    3158:	str	r0, [fp, #-8]
    315c:	str	r1, [sp, #12]
    3160:	ldr	r0, [fp, #-8]
    3164:	mov	r1, sp
    3168:	bl	2908 <coda_ascii_cursor_read_int64>
    316c:	cmp	r0, #0
    3170:	beq	3180 <coda_ascii_cursor_read_int16+0x34>
    3174:	mvn	r0, #0
    3178:	str	r0, [fp, #-4]
    317c:	b	31ec <coda_ascii_cursor_read_int16+0xa0>
    3180:	ldr	r0, [sp]
    3184:	ldr	r1, [sp, #4]
    3188:	movw	r2, #32767	; 0x7fff
    318c:	subs	r0, r2, r0
    3190:	rscs	r1, r1, #0
    3194:	blt	31bc <coda_ascii_cursor_read_int16+0x70>
    3198:	b	319c <coda_ascii_cursor_read_int16+0x50>
    319c:	ldr	r0, [sp]
    31a0:	ldr	r1, [sp, #4]
    31a4:	mvn	r2, #32768	; 0x8000
    31a8:	subs	r0, r2, r0
    31ac:	mvn	r2, #0
    31b0:	sbcs	r1, r2, r1
    31b4:	blt	31d8 <coda_ascii_cursor_read_int16+0x8c>
    31b8:	b	31bc <coda_ascii_cursor_read_int16+0x70>
    31bc:	ldr	r0, [pc, #52]	; 31f8 <coda_ascii_cursor_read_int16+0xac>
    31c0:	movw	r1, #0
    31c4:	movt	r1, #0
    31c8:	bl	0 <coda_set_error>
    31cc:	mvn	r0, #0
    31d0:	str	r0, [fp, #-4]
    31d4:	b	31ec <coda_ascii_cursor_read_int16+0xa0>
    31d8:	ldrh	r0, [sp]
    31dc:	ldr	r1, [sp, #12]
    31e0:	strh	r0, [r1]
    31e4:	movw	r0, #0
    31e8:	str	r0, [fp, #-4]
    31ec:	ldr	r0, [fp, #-4]
    31f0:	mov	sp, fp
    31f4:	pop	{fp, pc}
    31f8:	.word	0xfffffed4

000031fc <coda_ascii_cursor_read_uint16>:
    31fc:	push	{fp, lr}
    3200:	mov	fp, sp
    3204:	sub	sp, sp, #24
    3208:	str	r0, [fp, #-8]
    320c:	str	r1, [sp, #12]
    3210:	ldr	r0, [fp, #-8]
    3214:	mov	r1, sp
    3218:	bl	2d60 <coda_ascii_cursor_read_uint64>
    321c:	cmp	r0, #0
    3220:	beq	3230 <coda_ascii_cursor_read_uint16+0x34>
    3224:	mvn	r0, #0
    3228:	str	r0, [fp, #-4]
    322c:	b	3278 <coda_ascii_cursor_read_uint16+0x7c>
    3230:	ldr	r0, [sp]
    3234:	ldr	r1, [sp, #4]
    3238:	subs	r0, r0, #65536	; 0x10000
    323c:	sbcs	r1, r1, #0
    3240:	bcc	3264 <coda_ascii_cursor_read_uint16+0x68>
    3244:	b	3248 <coda_ascii_cursor_read_uint16+0x4c>
    3248:	ldr	r0, [pc, #52]	; 3284 <coda_ascii_cursor_read_uint16+0x88>
    324c:	movw	r1, #0
    3250:	movt	r1, #0
    3254:	bl	0 <coda_set_error>
    3258:	mvn	r0, #0
    325c:	str	r0, [fp, #-4]
    3260:	b	3278 <coda_ascii_cursor_read_uint16+0x7c>
    3264:	ldrh	r0, [sp]
    3268:	ldr	r1, [sp, #12]
    326c:	strh	r0, [r1]
    3270:	movw	r0, #0
    3274:	str	r0, [fp, #-4]
    3278:	ldr	r0, [fp, #-4]
    327c:	mov	sp, fp
    3280:	pop	{fp, pc}
    3284:	.word	0xfffffed4

00003288 <coda_ascii_cursor_read_int32>:
    3288:	push	{fp, lr}
    328c:	mov	fp, sp
    3290:	sub	sp, sp, #24
    3294:	str	r0, [fp, #-8]
    3298:	str	r1, [sp, #12]
    329c:	ldr	r0, [fp, #-8]
    32a0:	mov	r1, sp
    32a4:	bl	2908 <coda_ascii_cursor_read_int64>
    32a8:	cmp	r0, #0
    32ac:	beq	32bc <coda_ascii_cursor_read_int32+0x34>
    32b0:	mvn	r0, #0
    32b4:	str	r0, [fp, #-4]
    32b8:	b	3328 <coda_ascii_cursor_read_int32+0xa0>
    32bc:	ldr	r0, [sp]
    32c0:	ldr	r1, [sp, #4]
    32c4:	mvn	r2, #-2147483648	; 0x80000000
    32c8:	subs	r0, r2, r0
    32cc:	rscs	r1, r1, #0
    32d0:	blt	32f8 <coda_ascii_cursor_read_int32+0x70>
    32d4:	b	32d8 <coda_ascii_cursor_read_int32+0x50>
    32d8:	ldr	r0, [sp]
    32dc:	ldr	r1, [sp, #4]
    32e0:	mvn	r2, #-2147483648	; 0x80000000
    32e4:	subs	r0, r2, r0
    32e8:	mvn	r2, #0
    32ec:	sbcs	r1, r2, r1
    32f0:	blt	3314 <coda_ascii_cursor_read_int32+0x8c>
    32f4:	b	32f8 <coda_ascii_cursor_read_int32+0x70>
    32f8:	ldr	r0, [pc, #52]	; 3334 <coda_ascii_cursor_read_int32+0xac>
    32fc:	movw	r1, #0
    3300:	movt	r1, #0
    3304:	bl	0 <coda_set_error>
    3308:	mvn	r0, #0
    330c:	str	r0, [fp, #-4]
    3310:	b	3328 <coda_ascii_cursor_read_int32+0xa0>
    3314:	ldr	r0, [sp]
    3318:	ldr	r1, [sp, #12]
    331c:	str	r0, [r1]
    3320:	movw	r0, #0
    3324:	str	r0, [fp, #-4]
    3328:	ldr	r0, [fp, #-4]
    332c:	mov	sp, fp
    3330:	pop	{fp, pc}
    3334:	.word	0xfffffed4

00003338 <coda_ascii_cursor_read_uint32>:
    3338:	push	{fp, lr}
    333c:	mov	fp, sp
    3340:	sub	sp, sp, #24
    3344:	str	r0, [fp, #-8]
    3348:	str	r1, [sp, #12]
    334c:	ldr	r0, [fp, #-8]
    3350:	mov	r1, sp
    3354:	bl	2d60 <coda_ascii_cursor_read_uint64>
    3358:	cmp	r0, #0
    335c:	beq	336c <coda_ascii_cursor_read_uint32+0x34>
    3360:	mvn	r0, #0
    3364:	str	r0, [fp, #-4]
    3368:	b	33ac <coda_ascii_cursor_read_uint32+0x74>
    336c:	ldr	r0, [sp, #4]
    3370:	cmp	r0, #0
    3374:	beq	3398 <coda_ascii_cursor_read_uint32+0x60>
    3378:	b	337c <coda_ascii_cursor_read_uint32+0x44>
    337c:	ldr	r0, [pc, #52]	; 33b8 <coda_ascii_cursor_read_uint32+0x80>
    3380:	movw	r1, #0
    3384:	movt	r1, #0
    3388:	bl	0 <coda_set_error>
    338c:	mvn	r0, #0
    3390:	str	r0, [fp, #-4]
    3394:	b	33ac <coda_ascii_cursor_read_uint32+0x74>
    3398:	ldr	r0, [sp]
    339c:	ldr	r1, [sp, #12]
    33a0:	str	r0, [r1]
    33a4:	movw	r0, #0
    33a8:	str	r0, [fp, #-4]
    33ac:	ldr	r0, [fp, #-4]
    33b0:	mov	sp, fp
    33b4:	pop	{fp, pc}
    33b8:	.word	0xfffffed4

000033bc <coda_ascii_cursor_read_double>:
    33bc:	push	{r4, sl, fp, lr}
    33c0:	add	fp, sp, #8
    33c4:	sub	sp, sp, #128	; 0x80
    33c8:	str	r0, [fp, #-16]
    33cc:	str	r1, [fp, #-20]	; 0xffffffec
    33d0:	ldr	r0, [fp, #-16]
    33d4:	add	r1, r0, #8
    33d8:	ldr	r0, [r0, #4]
    33dc:	sub	r0, r0, #1
    33e0:	add	r0, r1, r0, lsl #4
    33e4:	ldr	r0, [r0]
    33e8:	ldr	r0, [r0]
    33ec:	cmp	r0, #100	; 0x64
    33f0:	bcs	3414 <coda_ascii_cursor_read_double+0x58>
    33f4:	ldr	r0, [fp, #-16]
    33f8:	add	r1, r0, #8
    33fc:	ldr	r0, [r0, #4]
    3400:	sub	r0, r0, #1
    3404:	add	r0, r1, r0, lsl #4
    3408:	ldr	r0, [r0]
    340c:	str	r0, [sp, #20]
    3410:	b	3434 <coda_ascii_cursor_read_double+0x78>
    3414:	ldr	r0, [fp, #-16]
    3418:	add	r1, r0, #8
    341c:	ldr	r0, [r0, #4]
    3420:	sub	r0, r0, #1
    3424:	add	r0, r1, r0, lsl #4
    3428:	ldr	r0, [r0]
    342c:	ldr	r0, [r0, #4]
    3430:	str	r0, [sp, #20]
    3434:	ldr	r0, [sp, #20]
    3438:	str	r0, [fp, #-24]	; 0xffffffe8
    343c:	ldr	r0, [fp, #-16]
    3440:	ldr	r1, [r0, #4]
    3444:	ldr	r1, [r0, r1, lsl #4]!
    3448:	ldr	r0, [r0, #4]
    344c:	str	r0, [fp, #-28]	; 0xffffffe4
    3450:	str	r1, [fp, #-32]	; 0xffffffe0
    3454:	mov	r0, #1
    3458:	str	r0, [sp, #24]
    345c:	ldr	r0, [fp, #-16]
    3460:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3464:	ldr	r2, [r1, #24]
    3468:	ldr	r3, [r1, #28]
    346c:	sub	r1, fp, #40	; 0x28
    3470:	bl	1ff8 <get_bit_size_boundary>
    3474:	cmp	r0, #0
    3478:	beq	3488 <coda_ascii_cursor_read_double+0xcc>
    347c:	mvn	r0, #0
    3480:	str	r0, [fp, #-12]
    3484:	b	3664 <coda_ascii_cursor_read_double+0x2a8>
    3488:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    348c:	tst	r0, #7
    3490:	beq	34b4 <coda_ascii_cursor_read_double+0xf8>
    3494:	b	3498 <coda_ascii_cursor_read_double+0xdc>
    3498:	mvn	r0, #21
    349c:	movw	r1, #0
    34a0:	movt	r1, #0
    34a4:	bl	0 <coda_set_error>
    34a8:	mvn	r0, #0
    34ac:	str	r0, [fp, #-12]
    34b0:	b	3664 <coda_ascii_cursor_read_double+0x2a8>
    34b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    34b8:	ldr	r0, [r0, #28]
    34bc:	cmp	r0, #0
    34c0:	bmi	351c <coda_ascii_cursor_read_double+0x160>
    34c4:	b	34c8 <coda_ascii_cursor_read_double+0x10c>
    34c8:	mov	r0, #0
    34cc:	str	r0, [sp, #24]
    34d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    34d4:	ldr	r1, [r0, #24]
    34d8:	ldr	r0, [r0, #28]
    34dc:	lsr	r1, r1, #3
    34e0:	orr	r0, r1, r0, lsl #29
    34e4:	str	r0, [sp, #28]
    34e8:	ldr	r0, [sp, #28]
    34ec:	cmp	r0, #64	; 0x40
    34f0:	bgt	34f8 <coda_ascii_cursor_read_double+0x13c>
    34f4:	b	3518 <coda_ascii_cursor_read_double+0x15c>
    34f8:	movw	r0, #0
    34fc:	movt	r0, #0
    3500:	movw	r1, #0
    3504:	movt	r1, #0
    3508:	movw	r2, #1306	; 0x51a
    350c:	movw	r3, #0
    3510:	movt	r3, #0
    3514:	bl	0 <__assert_fail>
    3518:	b	3564 <coda_ascii_cursor_read_double+0x1a8>
    351c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3520:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3524:	lsr	r0, r0, #3
    3528:	orr	r0, r0, r1, lsl #29
    352c:	rsbs	r0, r0, #63	; 0x3f
    3530:	mov	r2, #0
    3534:	sbcs	r1, r2, r1, asr #3
    3538:	blt	3558 <coda_ascii_cursor_read_double+0x19c>
    353c:	b	3540 <coda_ascii_cursor_read_double+0x184>
    3540:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3544:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3548:	lsr	r0, r0, #3
    354c:	orr	r0, r0, r1, lsl #29
    3550:	str	r0, [sp, #28]
    3554:	b	3560 <coda_ascii_cursor_read_double+0x1a4>
    3558:	movw	r0, #64	; 0x40
    355c:	str	r0, [sp, #28]
    3560:	b	3564 <coda_ascii_cursor_read_double+0x1a8>
    3564:	add	r0, sp, #32
    3568:	ldr	r1, [fp, #-16]
    356c:	ldr	r1, [r1]
    3570:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3574:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3578:	lsr	r2, r2, #3
    357c:	orr	r2, r2, r3, lsl #29
    3580:	asr	r3, r3, #3
    3584:	ldr	ip, [sp, #28]
    3588:	asr	lr, ip, #31
    358c:	mov	r4, sp
    3590:	str	r0, [r4, #8]
    3594:	str	lr, [r4, #4]
    3598:	str	ip, [r4]
    359c:	mov	r0, r1
    35a0:	bl	24f0 <read_bytes_in_bounds>
    35a4:	cmp	r0, #0
    35a8:	beq	35b8 <coda_ascii_cursor_read_double+0x1fc>
    35ac:	mvn	r0, #0
    35b0:	str	r0, [fp, #-12]
    35b4:	b	3664 <coda_ascii_cursor_read_double+0x2a8>
    35b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    35bc:	ldr	r0, [r0, #52]	; 0x34
    35c0:	movw	r1, #0
    35c4:	cmp	r0, r1
    35c8:	beq	3634 <coda_ascii_cursor_read_double+0x278>
    35cc:	ldr	r1, [sp, #28]
    35d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    35d4:	ldr	r2, [r0, #52]	; 0x34
    35d8:	ldr	r3, [sp, #24]
    35dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    35e0:	mov	ip, sp
    35e4:	str	r0, [ip]
    35e8:	add	r0, sp, #32
    35ec:	bl	3670 <parse_float_mapping>
    35f0:	mov	r1, r0
    35f4:	cmp	r0, #0
    35f8:	str	r1, [sp, #16]
    35fc:	beq	3614 <coda_ascii_cursor_read_double+0x258>
    3600:	b	3604 <coda_ascii_cursor_read_double+0x248>
    3604:	ldr	r0, [sp, #16]
    3608:	cmp	r0, #1
    360c:	beq	3618 <coda_ascii_cursor_read_double+0x25c>
    3610:	b	3624 <coda_ascii_cursor_read_double+0x268>
    3614:	b	3630 <coda_ascii_cursor_read_double+0x274>
    3618:	movw	r0, #0
    361c:	str	r0, [fp, #-12]
    3620:	b	3664 <coda_ascii_cursor_read_double+0x2a8>
    3624:	mvn	r0, #0
    3628:	str	r0, [fp, #-12]
    362c:	b	3664 <coda_ascii_cursor_read_double+0x2a8>
    3630:	b	3634 <coda_ascii_cursor_read_double+0x278>
    3634:	add	r0, sp, #32
    3638:	ldr	r1, [sp, #28]
    363c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3640:	ldr	r3, [sp, #24]
    3644:	bl	670 <coda_ascii_parse_double>
    3648:	cmp	r0, #0
    364c:	bge	365c <coda_ascii_cursor_read_double+0x2a0>
    3650:	mvn	r0, #0
    3654:	str	r0, [fp, #-12]
    3658:	b	3664 <coda_ascii_cursor_read_double+0x2a8>
    365c:	movw	r0, #0
    3660:	str	r0, [fp, #-12]
    3664:	ldr	r0, [fp, #-12]
    3668:	sub	sp, fp, #8
    366c:	pop	{r4, sl, fp, pc}

00003670 <parse_float_mapping>:
    3670:	push	{fp, lr}
    3674:	mov	fp, sp
    3678:	sub	sp, sp, #32
    367c:	ldr	ip, [fp, #8]
    3680:	str	r0, [fp, #-8]
    3684:	str	r1, [fp, #-12]
    3688:	str	r2, [sp, #16]
    368c:	str	r3, [sp, #12]
    3690:	movw	r0, #0
    3694:	str	r0, [sp, #8]
    3698:	ldr	r0, [sp, #8]
    369c:	ldr	r1, [sp, #16]
    36a0:	ldr	r1, [r1, #8]
    36a4:	cmp	r0, r1
    36a8:	bge	37f8 <parse_float_mapping+0x188>
    36ac:	ldr	r0, [sp, #16]
    36b0:	ldr	r0, [r0, #12]
    36b4:	ldr	r1, [sp, #8]
    36b8:	add	r0, r0, r1, lsl #2
    36bc:	ldr	r0, [r0]
    36c0:	ldr	r0, [r0]
    36c4:	cmp	r0, #0
    36c8:	bne	3708 <parse_float_mapping+0x98>
    36cc:	ldr	r0, [fp, #-12]
    36d0:	cmp	r0, #0
    36d4:	bne	3704 <parse_float_mapping+0x94>
    36d8:	ldr	r0, [sp, #16]
    36dc:	ldr	r0, [r0, #12]
    36e0:	ldr	r1, [sp, #8]
    36e4:	add	r0, r0, r1, lsl #2
    36e8:	ldr	r0, [r0]
    36ec:	vldr	d16, [r0, #8]
    36f0:	ldr	r0, [fp, #8]
    36f4:	vstr	d16, [r0]
    36f8:	movw	r0, #1
    36fc:	str	r0, [fp, #-4]
    3700:	b	3800 <parse_float_mapping+0x190>
    3704:	b	37e4 <parse_float_mapping+0x174>
    3708:	ldr	r0, [sp, #16]
    370c:	ldr	r0, [r0, #12]
    3710:	ldr	r1, [sp, #8]
    3714:	add	r0, r0, r1, lsl #2
    3718:	ldr	r0, [r0]
    371c:	ldr	r0, [r0]
    3720:	ldr	r1, [fp, #-12]
    3724:	cmp	r0, r1
    3728:	bgt	37e0 <parse_float_mapping+0x170>
    372c:	ldr	r0, [sp, #16]
    3730:	ldr	r0, [r0, #12]
    3734:	ldr	r1, [sp, #8]
    3738:	ldr	r1, [r0, r1, lsl #2]!
    373c:	ldr	r1, [r1, #4]
    3740:	ldr	r2, [fp, #-8]
    3744:	ldr	r0, [r0]
    3748:	ldr	r0, [r0]
    374c:	str	r0, [sp, #4]
    3750:	mov	r0, r1
    3754:	mov	r1, r2
    3758:	ldr	r2, [sp, #4]
    375c:	bl	0 <memcmp>
    3760:	cmp	r0, #0
    3764:	bne	37e0 <parse_float_mapping+0x170>
    3768:	ldr	r0, [sp, #12]
    376c:	cmp	r0, #0
    3770:	bne	37b4 <parse_float_mapping+0x144>
    3774:	ldr	r0, [sp, #16]
    3778:	ldr	r0, [r0, #12]
    377c:	ldr	r1, [sp, #8]
    3780:	add	r0, r0, r1, lsl #2
    3784:	ldr	r0, [r0]
    3788:	ldr	r0, [r0]
    378c:	ldr	r1, [fp, #-12]
    3790:	cmp	r0, r1
    3794:	beq	37b4 <parse_float_mapping+0x144>
    3798:	mvn	r0, #102	; 0x66
    379c:	movw	r1, #0
    37a0:	movt	r1, #0
    37a4:	bl	0 <coda_set_error>
    37a8:	mvn	r0, #0
    37ac:	str	r0, [fp, #-4]
    37b0:	b	3800 <parse_float_mapping+0x190>
    37b4:	ldr	r0, [sp, #16]
    37b8:	ldr	r0, [r0, #12]
    37bc:	ldr	r1, [sp, #8]
    37c0:	add	r0, r0, r1, lsl #2
    37c4:	ldr	r0, [r0]
    37c8:	vldr	d16, [r0, #8]
    37cc:	ldr	r0, [fp, #8]
    37d0:	vstr	d16, [r0]
    37d4:	movw	r0, #1
    37d8:	str	r0, [fp, #-4]
    37dc:	b	3800 <parse_float_mapping+0x190>
    37e0:	b	37e4 <parse_float_mapping+0x174>
    37e4:	b	37e8 <parse_float_mapping+0x178>
    37e8:	ldr	r0, [sp, #8]
    37ec:	add	r0, r0, #1
    37f0:	str	r0, [sp, #8]
    37f4:	b	3698 <parse_float_mapping+0x28>
    37f8:	movw	r0, #0
    37fc:	str	r0, [fp, #-4]
    3800:	ldr	r0, [fp, #-4]
    3804:	mov	sp, fp
    3808:	pop	{fp, pc}

0000380c <coda_ascii_cursor_read_float>:
    380c:	push	{fp, lr}
    3810:	mov	fp, sp
    3814:	sub	sp, sp, #24
    3818:	str	r0, [fp, #-8]
    381c:	str	r1, [sp, #12]
    3820:	ldr	r0, [fp, #-8]
    3824:	mov	r1, sp
    3828:	bl	33bc <coda_ascii_cursor_read_double>
    382c:	cmp	r0, #0
    3830:	beq	3840 <coda_ascii_cursor_read_float+0x34>
    3834:	mvn	r0, #0
    3838:	str	r0, [fp, #-4]
    383c:	b	3858 <coda_ascii_cursor_read_float+0x4c>
    3840:	vldr	d16, [sp]
    3844:	vcvt.f32.f64	s0, d16
    3848:	ldr	r0, [sp, #12]
    384c:	vstr	s0, [r0]
    3850:	movw	r0, #0
    3854:	str	r0, [fp, #-4]
    3858:	ldr	r0, [fp, #-4]
    385c:	mov	sp, fp
    3860:	pop	{fp, pc}

00003864 <coda_ascii_cursor_read_char>:
    3864:	push	{fp, lr}
    3868:	mov	fp, sp
    386c:	sub	sp, sp, #48	; 0x30
    3870:	str	r0, [fp, #-8]
    3874:	str	r1, [fp, #-12]
    3878:	ldr	r0, [fp, #-8]
    387c:	add	r1, sp, #16
    3880:	mov	r2, #8
    3884:	mov	r3, #0
    3888:	bl	1ff8 <get_bit_size_boundary>
    388c:	cmp	r0, #0
    3890:	beq	38a0 <coda_ascii_cursor_read_char+0x3c>
    3894:	mvn	r0, #0
    3898:	str	r0, [fp, #-4]
    389c:	b	3928 <coda_ascii_cursor_read_char+0xc4>
    38a0:	ldr	r0, [fp, #-8]
    38a4:	ldr	r1, [r0, #4]
    38a8:	ldr	r1, [r0, r1, lsl #4]!
    38ac:	ldr	r0, [r0, #4]
    38b0:	str	r0, [sp, #28]
    38b4:	str	r1, [sp, #24]
    38b8:	ldrb	r0, [sp, #24]
    38bc:	tst	r0, #7
    38c0:	beq	38e4 <coda_ascii_cursor_read_char+0x80>
    38c4:	b	38c8 <coda_ascii_cursor_read_char+0x64>
    38c8:	ldr	r0, [pc, #100]	; 3934 <coda_ascii_cursor_read_char+0xd0>
    38cc:	movw	r1, #0
    38d0:	movt	r1, #0
    38d4:	bl	0 <coda_set_error>
    38d8:	mvn	r0, #0
    38dc:	str	r0, [fp, #-4]
    38e0:	b	3928 <coda_ascii_cursor_read_char+0xc4>
    38e4:	ldr	r0, [fp, #-8]
    38e8:	ldr	r0, [r0]
    38ec:	ldr	r1, [sp, #24]
    38f0:	ldr	r2, [sp, #28]
    38f4:	lsr	r1, r1, #3
    38f8:	orr	r1, r1, r2, lsl #29
    38fc:	asr	r3, r2, #3
    3900:	ldr	r2, [fp, #-12]
    3904:	mov	ip, sp
    3908:	str	r2, [ip, #8]
    390c:	mov	r2, #0
    3910:	str	r2, [ip, #4]
    3914:	mov	r2, #1
    3918:	str	r2, [ip]
    391c:	mov	r2, r1
    3920:	bl	24f0 <read_bytes_in_bounds>
    3924:	str	r0, [fp, #-4]
    3928:	ldr	r0, [fp, #-4]
    392c:	mov	sp, fp
    3930:	pop	{fp, pc}
    3934:	.word	0xfffffed4

00003938 <coda_ascii_cursor_read_string>:
    3938:	push	{r4, sl, fp, lr}
    393c:	add	fp, sp, #8
    3940:	sub	sp, sp, #72	; 0x48
    3944:	str	r0, [fp, #-16]
    3948:	str	r1, [fp, #-20]	; 0xffffffec
    394c:	str	r2, [fp, #-24]	; 0xffffffe8
    3950:	ldr	r0, [fp, #-16]
    3954:	add	r1, r0, #8
    3958:	ldr	r0, [r0, #4]
    395c:	sub	r0, r0, #1
    3960:	add	r0, r1, r0, lsl #4
    3964:	ldr	r0, [r0]
    3968:	ldr	r0, [r0]
    396c:	cmp	r0, #100	; 0x64
    3970:	bcs	3994 <coda_ascii_cursor_read_string+0x5c>
    3974:	ldr	r0, [fp, #-16]
    3978:	add	r1, r0, #8
    397c:	ldr	r0, [r0, #4]
    3980:	sub	r0, r0, #1
    3984:	add	r0, r1, r0, lsl #4
    3988:	ldr	r0, [r0]
    398c:	str	r0, [sp, #12]
    3990:	b	39b4 <coda_ascii_cursor_read_string+0x7c>
    3994:	ldr	r0, [fp, #-16]
    3998:	add	r1, r0, #8
    399c:	ldr	r0, [r0, #4]
    39a0:	sub	r0, r0, #1
    39a4:	add	r0, r1, r0, lsl #4
    39a8:	ldr	r0, [r0]
    39ac:	ldr	r0, [r0, #4]
    39b0:	str	r0, [sp, #12]
    39b4:	ldr	r0, [sp, #12]
    39b8:	str	r0, [fp, #-28]	; 0xffffffe4
    39bc:	ldr	r0, [fp, #-16]
    39c0:	ldr	r1, [r0, #4]
    39c4:	ldr	r1, [r0, r1, lsl #4]!
    39c8:	ldr	r0, [r0, #4]
    39cc:	str	r0, [sp, #44]	; 0x2c
    39d0:	str	r1, [sp, #40]	; 0x28
    39d4:	mov	r0, #0
    39d8:	str	r0, [sp, #36]	; 0x24
    39dc:	str	r0, [sp, #32]
    39e0:	ldrb	r0, [sp, #40]	; 0x28
    39e4:	tst	r0, #7
    39e8:	beq	3a0c <coda_ascii_cursor_read_string+0xd4>
    39ec:	b	39f0 <coda_ascii_cursor_read_string+0xb8>
    39f0:	ldr	r0, [pc, #444]	; 3bb4 <coda_ascii_cursor_read_string+0x27c>
    39f4:	movw	r1, #0
    39f8:	movt	r1, #0
    39fc:	bl	0 <coda_set_error>
    3a00:	mvn	r0, #0
    3a04:	str	r0, [fp, #-12]
    3a08:	b	3ba8 <coda_ascii_cursor_read_string+0x270>
    3a0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3a10:	ldr	r0, [r0, #28]
    3a14:	cmn	r0, #1
    3a18:	bgt	3a8c <coda_ascii_cursor_read_string+0x154>
    3a1c:	b	3a20 <coda_ascii_cursor_read_string+0xe8>
    3a20:	ldr	r0, [fp, #-16]
    3a24:	add	r1, sp, #24
    3a28:	bl	1074 <coda_ascii_cursor_get_bit_size>
    3a2c:	cmp	r0, #0
    3a30:	beq	3a40 <coda_ascii_cursor_read_string+0x108>
    3a34:	mvn	r0, #0
    3a38:	str	r0, [fp, #-12]
    3a3c:	b	3ba8 <coda_ascii_cursor_read_string+0x270>
    3a40:	ldrb	r0, [sp, #24]
    3a44:	tst	r0, #7
    3a48:	beq	3a6c <coda_ascii_cursor_read_string+0x134>
    3a4c:	b	3a50 <coda_ascii_cursor_read_string+0x118>
    3a50:	ldr	r0, [pc, #348]	; 3bb4 <coda_ascii_cursor_read_string+0x27c>
    3a54:	movw	r1, #0
    3a58:	movt	r1, #0
    3a5c:	bl	0 <coda_set_error>
    3a60:	mvn	r0, #0
    3a64:	str	r0, [fp, #-12]
    3a68:	b	3ba8 <coda_ascii_cursor_read_string+0x270>
    3a6c:	ldr	r0, [sp, #24]
    3a70:	ldr	r1, [sp, #28]
    3a74:	lsr	r0, r0, #3
    3a78:	orr	r0, r0, r1, lsl #29
    3a7c:	asr	r1, r1, #3
    3a80:	str	r1, [sp, #36]	; 0x24
    3a84:	str	r0, [sp, #32]
    3a88:	b	3ad8 <coda_ascii_cursor_read_string+0x1a0>
    3a8c:	ldr	r0, [fp, #-16]
    3a90:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3a94:	ldr	r2, [r1, #24]
    3a98:	ldr	r3, [r1, #28]
    3a9c:	add	r1, sp, #16
    3aa0:	bl	1ff8 <get_bit_size_boundary>
    3aa4:	cmp	r0, #0
    3aa8:	beq	3ab8 <coda_ascii_cursor_read_string+0x180>
    3aac:	mvn	r0, #0
    3ab0:	str	r0, [fp, #-12]
    3ab4:	b	3ba8 <coda_ascii_cursor_read_string+0x270>
    3ab8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3abc:	ldr	r1, [r0, #24]
    3ac0:	ldr	r0, [r0, #28]
    3ac4:	lsr	r1, r1, #3
    3ac8:	orr	r1, r1, r0, lsl #29
    3acc:	asr	r0, r0, #3
    3ad0:	str	r0, [sp, #36]	; 0x24
    3ad4:	str	r1, [sp, #32]
    3ad8:	ldr	r0, [sp, #32]
    3adc:	ldr	r1, [sp, #36]	; 0x24
    3ae0:	adds	r0, r0, #1
    3ae4:	adc	r1, r1, #0
    3ae8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3aec:	subs	r0, r2, r0
    3af0:	rscs	r1, r1, r2, asr #31
    3af4:	bge	3b10 <coda_ascii_cursor_read_string+0x1d8>
    3af8:	b	3afc <coda_ascii_cursor_read_string+0x1c4>
    3afc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3b00:	sub	r0, r0, #1
    3b04:	asr	r1, r0, #31
    3b08:	str	r0, [sp, #32]
    3b0c:	str	r1, [sp, #36]	; 0x24
    3b10:	ldr	r0, [sp, #32]
    3b14:	ldr	r1, [sp, #36]	; 0x24
    3b18:	subs	r0, r0, #1
    3b1c:	sbcs	r1, r1, #0
    3b20:	blt	3b94 <coda_ascii_cursor_read_string+0x25c>
    3b24:	b	3b28 <coda_ascii_cursor_read_string+0x1f0>
    3b28:	ldr	r0, [fp, #-16]
    3b2c:	ldr	r0, [r0]
    3b30:	ldr	r1, [sp, #40]	; 0x28
    3b34:	ldr	r2, [sp, #44]	; 0x2c
    3b38:	lsr	r1, r1, #3
    3b3c:	orr	r1, r1, r2, lsl #29
    3b40:	asr	r3, r2, #3
    3b44:	ldr	r2, [sp, #32]
    3b48:	ldr	ip, [sp, #36]	; 0x24
    3b4c:	ldr	lr, [fp, #-20]	; 0xffffffec
    3b50:	mov	r4, sp
    3b54:	str	lr, [r4, #8]
    3b58:	str	ip, [r4, #4]
    3b5c:	str	r2, [r4]
    3b60:	mov	r2, r1
    3b64:	bl	3bb8 <read_bytes>
    3b68:	cmp	r0, #0
    3b6c:	beq	3b7c <coda_ascii_cursor_read_string+0x244>
    3b70:	mvn	r0, #0
    3b74:	str	r0, [fp, #-12]
    3b78:	b	3ba8 <coda_ascii_cursor_read_string+0x270>
    3b7c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3b80:	ldr	r1, [sp, #32]
    3b84:	add	r0, r0, r1
    3b88:	movw	r1, #0
    3b8c:	strb	r1, [r0]
    3b90:	b	3ba0 <coda_ascii_cursor_read_string+0x268>
    3b94:	ldr	r0, [fp, #-20]	; 0xffffffec
    3b98:	movw	r1, #0
    3b9c:	strb	r1, [r0]
    3ba0:	movw	r0, #0
    3ba4:	str	r0, [fp, #-12]
    3ba8:	ldr	r0, [fp, #-12]
    3bac:	sub	sp, fp, #8
    3bb0:	pop	{r4, sl, fp, pc}
    3bb4:	.word	0xfffffed4

00003bb8 <read_bytes>:
    3bb8:	push	{fp, lr}
    3bbc:	mov	fp, sp
    3bc0:	sub	sp, sp, #112	; 0x70
    3bc4:	ldr	r1, [fp, #12]
    3bc8:	ldr	ip, [fp, #8]
    3bcc:	ldr	lr, [fp, #16]
    3bd0:	str	r0, [fp, #-8]
    3bd4:	str	r3, [fp, #-12]
    3bd8:	str	r2, [fp, #-16]
    3bdc:	str	r1, [fp, #-20]	; 0xffffffec
    3be0:	str	ip, [fp, #-24]	; 0xffffffe8
    3be4:	ldr	r0, [fp, #-8]
    3be8:	ldr	r0, [r0, #48]	; 0x30
    3bec:	movw	r1, #0
    3bf0:	cmp	r0, r1
    3bf4:	beq	3d0c <read_bytes+0x154>
    3bf8:	ldr	r0, [fp, #-16]
    3bfc:	ldr	r1, [fp, #-12]
    3c00:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3c04:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c08:	adds	r0, r0, r2
    3c0c:	adc	r1, r1, r3
    3c10:	ldr	r2, [fp, #-8]
    3c14:	ldr	r3, [r2, #40]	; 0x28
    3c18:	ldr	r2, [r2, #44]	; 0x2c
    3c1c:	subs	r0, r3, r0
    3c20:	sbcs	r1, r2, r1
    3c24:	bcs	3cec <read_bytes+0x134>
    3c28:	b	3c2c <read_bytes+0x74>
    3c2c:	ldr	r0, [fp, #-8]
    3c30:	ldr	r0, [r0, #16]
    3c34:	cmp	r0, #0
    3c38:	beq	3c4c <read_bytes+0x94>
    3c3c:	ldr	r0, [fp, #-8]
    3c40:	ldr	r0, [r0, #16]
    3c44:	cmp	r0, #1
    3c48:	bne	3c68 <read_bytes+0xb0>
    3c4c:	mvn	r0, #300	; 0x12c
    3c50:	movw	r1, #0
    3c54:	movt	r1, #0
    3c58:	bl	0 <coda_set_error>
    3c5c:	mvn	r0, #0
    3c60:	str	r0, [fp, #-4]
    3c64:	b	3e00 <read_bytes+0x248>
    3c68:	add	r2, sp, #25
    3c6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c70:	ldr	r1, [fp, #-20]	; 0xffffffec
    3c74:	sub	r3, fp, #45	; 0x2d
    3c78:	str	r2, [sp, #20]
    3c7c:	mov	r2, r3
    3c80:	bl	0 <coda_str64>
    3c84:	ldr	r0, [fp, #-16]
    3c88:	ldr	r1, [fp, #-12]
    3c8c:	add	r2, sp, #46	; 0x2e
    3c90:	bl	0 <coda_str64>
    3c94:	ldr	r0, [fp, #-8]
    3c98:	ldr	r1, [r0, #40]	; 0x28
    3c9c:	ldr	r0, [r0, #44]	; 0x2c
    3ca0:	str	r0, [sp, #16]
    3ca4:	mov	r0, r1
    3ca8:	ldr	r1, [sp, #16]
    3cac:	ldr	r2, [sp, #20]
    3cb0:	bl	0 <coda_str64>
    3cb4:	add	r0, sp, #25
    3cb8:	add	r3, sp, #46	; 0x2e
    3cbc:	sub	r2, fp, #45	; 0x2d
    3cc0:	mvn	r1, #300	; 0x12c
    3cc4:	str	r0, [sp, #12]
    3cc8:	mov	r0, r1
    3ccc:	movw	r1, #0
    3cd0:	movt	r1, #0
    3cd4:	ldr	ip, [sp, #12]
    3cd8:	str	ip, [sp]
    3cdc:	bl	0 <coda_set_error>
    3ce0:	mvn	r0, #0
    3ce4:	str	r0, [fp, #-4]
    3ce8:	b	3e00 <read_bytes+0x248>
    3cec:	ldr	r0, [fp, #16]
    3cf0:	ldr	r1, [fp, #-8]
    3cf4:	ldr	r1, [r1, #48]	; 0x30
    3cf8:	ldr	r2, [fp, #-16]
    3cfc:	add	r1, r1, r2
    3d00:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3d04:	bl	0 <memcpy>
    3d08:	b	3df8 <read_bytes+0x240>
    3d0c:	ldr	r0, [fp, #-8]
    3d10:	ldr	r0, [r0, #16]
    3d14:	cmp	r0, #0
    3d18:	beq	3d2c <read_bytes+0x174>
    3d1c:	ldr	r0, [fp, #-8]
    3d20:	ldr	r0, [r0, #16]
    3d24:	cmp	r0, #1
    3d28:	bne	3d30 <read_bytes+0x178>
    3d2c:	b	3d50 <read_bytes+0x198>
    3d30:	movw	r0, #0
    3d34:	movt	r0, #0
    3d38:	movw	r1, #0
    3d3c:	movt	r1, #0
    3d40:	movw	r2, #83	; 0x53
    3d44:	movw	r3, #0
    3d48:	movt	r3, #0
    3d4c:	bl	0 <__assert_fail>
    3d50:	ldr	r0, [fp, #-16]
    3d54:	ldr	r1, [fp, #-12]
    3d58:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d60:	adds	r0, r0, r2
    3d64:	adc	r1, r1, r3
    3d68:	ldr	r2, [fp, #-8]
    3d6c:	ldr	r3, [r2, #8]
    3d70:	ldr	r2, [r2, #12]
    3d74:	subs	r0, r3, r0
    3d78:	sbcs	r1, r2, r1
    3d7c:	bcs	3da0 <read_bytes+0x1e8>
    3d80:	b	3d84 <read_bytes+0x1cc>
    3d84:	mvn	r0, #300	; 0x12c
    3d88:	movw	r1, #0
    3d8c:	movt	r1, #0
    3d90:	bl	0 <coda_set_error>
    3d94:	mvn	r0, #0
    3d98:	str	r0, [fp, #-4]
    3d9c:	b	3e00 <read_bytes+0x248>
    3da0:	ldr	r0, [fp, #-8]
    3da4:	ldr	r0, [r0, #56]	; 0x38
    3da8:	ldr	r1, [fp, #16]
    3dac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3db0:	ldr	r3, [fp, #-16]
    3db4:	bl	0 <pread>
    3db8:	cmp	r0, #0
    3dbc:	bge	3df4 <read_bytes+0x23c>
    3dc0:	bl	0 <__errno_location>
    3dc4:	ldr	r0, [r0]
    3dc8:	bl	0 <strerror>
    3dcc:	mvn	r1, #21
    3dd0:	str	r0, [sp, #8]
    3dd4:	mov	r0, r1
    3dd8:	movw	r1, #0
    3ddc:	movt	r1, #0
    3de0:	ldr	r2, [sp, #8]
    3de4:	bl	0 <coda_set_error>
    3de8:	mvn	r0, #0
    3dec:	str	r0, [fp, #-4]
    3df0:	b	3e00 <read_bytes+0x248>
    3df4:	b	3df8 <read_bytes+0x240>
    3df8:	movw	r0, #0
    3dfc:	str	r0, [fp, #-4]
    3e00:	ldr	r0, [fp, #-4]
    3e04:	mov	sp, fp
    3e08:	pop	{fp, pc}

00003e0c <coda_ascii_cursor_read_bits>:
    3e0c:	push	{r4, sl, fp, lr}
    3e10:	add	fp, sp, #8
    3e14:	sub	sp, sp, #48	; 0x30
    3e18:	ldr	ip, [fp, #12]
    3e1c:	ldr	lr, [fp, #8]
    3e20:	str	r0, [fp, #-16]
    3e24:	str	r1, [fp, #-20]	; 0xffffffec
    3e28:	str	r3, [sp, #28]
    3e2c:	str	r2, [sp, #24]
    3e30:	str	ip, [sp, #20]
    3e34:	str	lr, [sp, #16]
    3e38:	ldrb	r0, [sp, #16]
    3e3c:	tst	r0, #7
    3e40:	beq	3e64 <coda_ascii_cursor_read_bits+0x58>
    3e44:	b	3e48 <coda_ascii_cursor_read_bits+0x3c>
    3e48:	mvn	r0, #99	; 0x63
    3e4c:	movw	r1, #0
    3e50:	movt	r1, #0
    3e54:	bl	0 <coda_set_error>
    3e58:	mvn	r0, #0
    3e5c:	str	r0, [fp, #-12]
    3e60:	b	3f08 <coda_ascii_cursor_read_bits+0xfc>
    3e64:	ldr	r0, [fp, #-16]
    3e68:	ldr	r1, [r0, #4]
    3e6c:	lsl	r1, r1, #4
    3e70:	ldr	r0, [r1, r0]
    3e74:	ldr	r1, [sp, #24]
    3e78:	add	r0, r0, r1
    3e7c:	tst	r0, #7
    3e80:	beq	3ea4 <coda_ascii_cursor_read_bits+0x98>
    3e84:	b	3e88 <coda_ascii_cursor_read_bits+0x7c>
    3e88:	ldr	r0, [pc, #132]	; 3f14 <coda_ascii_cursor_read_bits+0x108>
    3e8c:	movw	r1, #0
    3e90:	movt	r1, #0
    3e94:	bl	0 <coda_set_error>
    3e98:	mvn	r0, #0
    3e9c:	str	r0, [fp, #-12]
    3ea0:	b	3f08 <coda_ascii_cursor_read_bits+0xfc>
    3ea4:	ldr	r0, [fp, #-16]
    3ea8:	ldr	r1, [r0]
    3eac:	ldr	r2, [r0, #4]
    3eb0:	ldr	r2, [r0, r2, lsl #4]!
    3eb4:	ldr	r0, [r0, #4]
    3eb8:	ldr	r3, [sp, #24]
    3ebc:	ldr	ip, [sp, #28]
    3ec0:	adds	r2, r2, r3
    3ec4:	adc	r0, r0, ip
    3ec8:	lsr	r2, r2, #3
    3ecc:	orr	r2, r2, r0, lsl #29
    3ed0:	asr	r3, r0, #3
    3ed4:	ldr	r0, [sp, #16]
    3ed8:	ldr	ip, [sp, #20]
    3edc:	lsr	r0, r0, #3
    3ee0:	orr	r0, r0, ip, lsl #29
    3ee4:	asr	ip, ip, #3
    3ee8:	ldr	lr, [fp, #-20]	; 0xffffffec
    3eec:	mov	r4, sp
    3ef0:	str	lr, [r4, #8]
    3ef4:	str	ip, [r4, #4]
    3ef8:	str	r0, [r4]
    3efc:	mov	r0, r1
    3f00:	bl	3bb8 <read_bytes>
    3f04:	str	r0, [fp, #-12]
    3f08:	ldr	r0, [fp, #-12]
    3f0c:	sub	sp, fp, #8
    3f10:	pop	{r4, sl, fp, pc}
    3f14:	.word	0xfffffed4

00003f18 <coda_ascii_cursor_read_int8_array>:
    3f18:	push	{fp, lr}
    3f1c:	mov	fp, sp
    3f20:	sub	sp, sp, #32
    3f24:	str	r0, [fp, #-8]
    3f28:	str	r1, [fp, #-12]
    3f2c:	str	r2, [sp, #16]
    3f30:	ldr	r0, [fp, #-8]
    3f34:	add	r1, r0, #8
    3f38:	ldr	r0, [r0, #4]
    3f3c:	sub	r0, r0, #1
    3f40:	add	r0, r1, r0, lsl #4
    3f44:	ldr	r0, [r0]
    3f48:	ldr	r0, [r0]
    3f4c:	cmp	r0, #100	; 0x64
    3f50:	bcs	3f74 <coda_ascii_cursor_read_int8_array+0x5c>
    3f54:	ldr	r0, [fp, #-8]
    3f58:	add	r1, r0, #8
    3f5c:	ldr	r0, [r0, #4]
    3f60:	sub	r0, r0, #1
    3f64:	add	r0, r1, r0, lsl #4
    3f68:	ldr	r0, [r0]
    3f6c:	str	r0, [sp, #8]
    3f70:	b	3f94 <coda_ascii_cursor_read_int8_array+0x7c>
    3f74:	ldr	r0, [fp, #-8]
    3f78:	add	r1, r0, #8
    3f7c:	ldr	r0, [r0, #4]
    3f80:	sub	r0, r0, #1
    3f84:	add	r0, r1, r0, lsl #4
    3f88:	ldr	r0, [r0]
    3f8c:	ldr	r0, [r0, #4]
    3f90:	str	r0, [sp, #8]
    3f94:	ldr	r0, [sp, #8]
    3f98:	str	r0, [sp, #12]
    3f9c:	ldr	r0, [sp, #12]
    3fa0:	ldr	r0, [r0, #40]	; 0x28
    3fa4:	ldr	r0, [r0]
    3fa8:	cmp	r0, #0
    3fac:	bne	3fb4 <coda_ascii_cursor_read_int8_array+0x9c>
    3fb0:	b	3fd4 <coda_ascii_cursor_read_int8_array+0xbc>
    3fb4:	movw	r0, #0
    3fb8:	movt	r0, #0
    3fbc:	movw	r1, #0
    3fc0:	movt	r1, #0
    3fc4:	movw	r2, #1464	; 0x5b8
    3fc8:	movw	r3, #0
    3fcc:	movt	r3, #0
    3fd0:	bl	0 <__assert_fail>
    3fd4:	ldr	r0, [fp, #-8]
    3fd8:	ldr	r2, [fp, #-12]
    3fdc:	movw	r1, #0
    3fe0:	movt	r1, #0
    3fe4:	movw	r3, #1
    3fe8:	movw	ip, #0
    3fec:	str	ip, [sp]
    3ff0:	bl	4050 <read_array>
    3ff4:	cmp	r0, #0
    3ff8:	beq	4008 <coda_ascii_cursor_read_int8_array+0xf0>
    3ffc:	mvn	r0, #0
    4000:	str	r0, [fp, #-4]
    4004:	b	4044 <coda_ascii_cursor_read_int8_array+0x12c>
    4008:	ldr	r0, [sp, #16]
    400c:	cmp	r0, #0
    4010:	beq	403c <coda_ascii_cursor_read_int8_array+0x124>
    4014:	ldr	r0, [fp, #-8]
    4018:	ldr	r1, [fp, #-12]
    401c:	movw	r2, #1
    4020:	bl	4434 <transpose_array>
    4024:	cmp	r0, #0
    4028:	beq	4038 <coda_ascii_cursor_read_int8_array+0x120>
    402c:	mvn	r0, #0
    4030:	str	r0, [fp, #-4]
    4034:	b	4044 <coda_ascii_cursor_read_int8_array+0x12c>
    4038:	b	403c <coda_ascii_cursor_read_int8_array+0x124>
    403c:	movw	r0, #0
    4040:	str	r0, [fp, #-4]
    4044:	ldr	r0, [fp, #-4]
    4048:	mov	sp, fp
    404c:	pop	{fp, pc}

00004050 <read_array>:
    4050:	push	{r4, r5, fp, lr}
    4054:	add	fp, sp, #8
    4058:	sub	sp, sp, #664	; 0x298
    405c:	ldr	ip, [fp, #8]
    4060:	add	lr, sp, #88	; 0x58
    4064:	str	r0, [fp, #-16]
    4068:	str	r1, [fp, #-20]	; 0xffffffec
    406c:	str	r2, [fp, #-24]	; 0xffffffe8
    4070:	str	r3, [fp, #-28]	; 0xffffffe4
    4074:	ldr	r0, [fp, #-16]
    4078:	add	r1, sp, #84	; 0x54
    407c:	mov	r2, lr
    4080:	str	ip, [sp, #24]
    4084:	bl	0 <coda_cursor_get_array_dim>
    4088:	cmp	r0, #0
    408c:	beq	409c <read_array+0x4c>
    4090:	mvn	r0, #0
    4094:	str	r0, [fp, #-12]
    4098:	b	4428 <read_array+0x3d8>
    409c:	ldr	r0, [fp, #-16]
    40a0:	add	r1, sp, #120	; 0x78
    40a4:	str	r0, [sp, #20]
    40a8:	mov	r0, r1
    40ac:	ldr	r1, [sp, #20]
    40b0:	movw	r2, #520	; 0x208
    40b4:	bl	0 <memcpy>
    40b8:	ldr	r0, [sp, #84]	; 0x54
    40bc:	cmp	r0, #1
    40c0:	ble	40d0 <read_array+0x80>
    40c4:	ldr	r0, [fp, #8]
    40c8:	cmp	r0, #1
    40cc:	beq	41f0 <read_array+0x1a0>
    40d0:	movw	r0, #1
    40d4:	str	r0, [sp, #80]	; 0x50
    40d8:	movw	r0, #0
    40dc:	str	r0, [sp, #76]	; 0x4c
    40e0:	ldr	r0, [sp, #76]	; 0x4c
    40e4:	ldr	r1, [sp, #84]	; 0x54
    40e8:	cmp	r0, r1
    40ec:	bge	411c <read_array+0xcc>
    40f0:	ldr	r0, [sp, #76]	; 0x4c
    40f4:	add	r1, sp, #88	; 0x58
    40f8:	add	r0, r1, r0, lsl #2
    40fc:	ldr	r0, [r0]
    4100:	ldr	r1, [sp, #80]	; 0x50
    4104:	mul	r0, r1, r0
    4108:	str	r0, [sp, #80]	; 0x50
    410c:	ldr	r0, [sp, #76]	; 0x4c
    4110:	add	r0, r0, #1
    4114:	str	r0, [sp, #76]	; 0x4c
    4118:	b	40e0 <read_array+0x90>
    411c:	ldr	r0, [sp, #80]	; 0x50
    4120:	cmp	r0, #0
    4124:	ble	41ec <read_array+0x19c>
    4128:	add	r0, sp, #120	; 0x78
    412c:	movw	r1, #0
    4130:	bl	0 <coda_cursor_goto_array_element_by_index>
    4134:	cmp	r0, #0
    4138:	beq	4148 <read_array+0xf8>
    413c:	mvn	r0, #0
    4140:	str	r0, [fp, #-12]
    4144:	b	4428 <read_array+0x3d8>
    4148:	movw	r0, #0
    414c:	str	r0, [sp, #76]	; 0x4c
    4150:	ldr	r0, [sp, #76]	; 0x4c
    4154:	ldr	r1, [sp, #80]	; 0x50
    4158:	cmp	r0, r1
    415c:	bge	41e8 <read_array+0x198>
    4160:	ldr	r0, [fp, #-20]	; 0xffffffec
    4164:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4168:	ldr	r2, [sp, #76]	; 0x4c
    416c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4170:	mul	r2, r2, r3
    4174:	add	r1, r1, r2
    4178:	add	r2, sp, #120	; 0x78
    417c:	str	r0, [sp, #16]
    4180:	mov	r0, r2
    4184:	ldr	r2, [sp, #16]
    4188:	blx	r2
    418c:	cmp	r0, #0
    4190:	beq	41a0 <read_array+0x150>
    4194:	mvn	r0, #0
    4198:	str	r0, [fp, #-12]
    419c:	b	4428 <read_array+0x3d8>
    41a0:	ldr	r0, [sp, #76]	; 0x4c
    41a4:	ldr	r1, [sp, #80]	; 0x50
    41a8:	sub	r1, r1, #1
    41ac:	cmp	r0, r1
    41b0:	bge	41d4 <read_array+0x184>
    41b4:	add	r0, sp, #120	; 0x78
    41b8:	bl	0 <coda_cursor_goto_next_array_element>
    41bc:	cmp	r0, #0
    41c0:	beq	41d0 <read_array+0x180>
    41c4:	mvn	r0, #0
    41c8:	str	r0, [fp, #-12]
    41cc:	b	4428 <read_array+0x3d8>
    41d0:	b	41d4 <read_array+0x184>
    41d4:	b	41d8 <read_array+0x188>
    41d8:	ldr	r0, [sp, #76]	; 0x4c
    41dc:	add	r0, r0, #1
    41e0:	str	r0, [sp, #76]	; 0x4c
    41e4:	b	4150 <read_array+0x100>
    41e8:	b	41ec <read_array+0x19c>
    41ec:	b	4420 <read_array+0x3d0>
    41f0:	movw	r0, #1
    41f4:	str	r0, [sp, #40]	; 0x28
    41f8:	movw	r0, #0
    41fc:	str	r0, [sp, #76]	; 0x4c
    4200:	ldr	r0, [sp, #76]	; 0x4c
    4204:	ldr	r1, [sp, #84]	; 0x54
    4208:	cmp	r0, r1
    420c:	bge	4244 <read_array+0x1f4>
    4210:	ldr	r0, [sp, #76]	; 0x4c
    4214:	add	r1, sp, #40	; 0x28
    4218:	ldr	r2, [r1, r0, lsl #2]
    421c:	add	r3, sp, #88	; 0x58
    4220:	ldr	r3, [r3, r0, lsl #2]
    4224:	mul	r2, r2, r3
    4228:	add	r0, r0, #1
    422c:	add	r0, r1, r0, lsl #2
    4230:	str	r2, [r0]
    4234:	ldr	r0, [sp, #76]	; 0x4c
    4238:	add	r0, r0, #1
    423c:	str	r0, [sp, #76]	; 0x4c
    4240:	b	4200 <read_array+0x1b0>
    4244:	ldr	r0, [sp, #84]	; 0x54
    4248:	add	r1, sp, #40	; 0x28
    424c:	add	r0, r1, r0, lsl #2
    4250:	ldr	r0, [r0, #-4]
    4254:	str	r0, [sp, #36]	; 0x24
    4258:	ldr	r0, [sp, #84]	; 0x54
    425c:	add	r0, r1, r0, lsl #2
    4260:	ldr	r0, [r0]
    4264:	str	r0, [sp, #80]	; 0x50
    4268:	ldr	r0, [sp, #80]	; 0x50
    426c:	cmp	r0, #0
    4270:	ble	441c <read_array+0x3cc>
    4274:	movw	r0, #0
    4278:	str	r0, [sp, #32]
    427c:	str	r0, [sp, #28]
    4280:	add	r1, sp, #120	; 0x78
    4284:	str	r0, [sp, #12]
    4288:	mov	r0, r1
    428c:	ldr	r1, [sp, #12]
    4290:	bl	0 <coda_cursor_goto_array_element_by_index>
    4294:	cmp	r0, #0
    4298:	beq	42a8 <read_array+0x258>
    429c:	mvn	r0, #0
    42a0:	str	r0, [fp, #-12]
    42a4:	b	4428 <read_array+0x3d8>
    42a8:	b	42ac <read_array+0x25c>
    42ac:	b	42b0 <read_array+0x260>
    42b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    42b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    42b8:	ldr	r2, [sp, #28]
    42bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    42c0:	mul	r2, r2, r3
    42c4:	add	r1, r1, r2
    42c8:	add	r2, sp, #120	; 0x78
    42cc:	str	r0, [sp, #8]
    42d0:	mov	r0, r2
    42d4:	ldr	r2, [sp, #8]
    42d8:	blx	r2
    42dc:	cmp	r0, #0
    42e0:	beq	42f0 <read_array+0x2a0>
    42e4:	mvn	r0, #0
    42e8:	str	r0, [fp, #-12]
    42ec:	b	4428 <read_array+0x3d8>
    42f0:	ldr	r0, [sp, #32]
    42f4:	add	r0, r0, #1
    42f8:	str	r0, [sp, #32]
    42fc:	ldr	r0, [sp, #32]
    4300:	ldr	r1, [sp, #80]	; 0x50
    4304:	cmp	r0, r1
    4308:	bge	432c <read_array+0x2dc>
    430c:	add	r0, sp, #120	; 0x78
    4310:	bl	0 <coda_cursor_goto_next_array_element>
    4314:	cmp	r0, #0
    4318:	beq	4328 <read_array+0x2d8>
    431c:	mvn	r0, #0
    4320:	str	r0, [fp, #-12]
    4324:	b	4428 <read_array+0x3d8>
    4328:	b	432c <read_array+0x2dc>
    432c:	ldr	r0, [sp, #36]	; 0x24
    4330:	ldr	r1, [sp, #28]
    4334:	add	r0, r1, r0
    4338:	str	r0, [sp, #28]
    433c:	ldr	r0, [sp, #28]
    4340:	ldr	r1, [sp, #80]	; 0x50
    4344:	cmp	r0, r1
    4348:	blt	42b0 <read_array+0x260>
    434c:	ldr	r0, [sp, #32]
    4350:	ldr	r1, [sp, #80]	; 0x50
    4354:	cmp	r0, r1
    4358:	bne	4360 <read_array+0x310>
    435c:	b	4418 <read_array+0x3c8>
    4360:	ldr	r0, [sp, #84]	; 0x54
    4364:	add	r1, sp, #40	; 0x28
    4368:	add	r0, r1, r0, lsl #2
    436c:	ldr	r1, [r0, #-8]
    4370:	ldr	r0, [r0]
    4374:	sub	r0, r1, r0
    4378:	ldr	r1, [sp, #28]
    437c:	add	r0, r1, r0
    4380:	str	r0, [sp, #28]
    4384:	ldr	r0, [sp, #84]	; 0x54
    4388:	sub	r0, r0, #3
    438c:	str	r0, [sp, #76]	; 0x4c
    4390:	ldr	r0, [sp, #76]	; 0x4c
    4394:	cmp	r0, #0
    4398:	movw	r0, #0
    439c:	str	r0, [sp, #4]
    43a0:	blt	43cc <read_array+0x37c>
    43a4:	ldr	r0, [sp, #28]
    43a8:	ldr	r1, [sp, #76]	; 0x4c
    43ac:	add	r1, r1, #2
    43b0:	add	r2, sp, #40	; 0x28
    43b4:	add	r1, r2, r1, lsl #2
    43b8:	ldr	r1, [r1]
    43bc:	cmp	r0, r1
    43c0:	movw	r0, #0
    43c4:	movge	r0, #1
    43c8:	str	r0, [sp, #4]
    43cc:	ldr	r0, [sp, #4]
    43d0:	tst	r0, #1
    43d4:	beq	4414 <read_array+0x3c4>
    43d8:	ldr	r0, [sp, #76]	; 0x4c
    43dc:	add	r1, sp, #40	; 0x28
    43e0:	ldr	r2, [r1, r0, lsl #2]
    43e4:	add	r0, r0, #2
    43e8:	add	r0, r1, r0, lsl #2
    43ec:	ldr	r0, [r0]
    43f0:	sub	r0, r2, r0
    43f4:	ldr	r1, [sp, #28]
    43f8:	add	r0, r1, r0
    43fc:	str	r0, [sp, #28]
    4400:	ldr	r0, [sp, #76]	; 0x4c
    4404:	mvn	r1, #0
    4408:	add	r0, r0, r1
    440c:	str	r0, [sp, #76]	; 0x4c
    4410:	b	4390 <read_array+0x340>
    4414:	b	42ac <read_array+0x25c>
    4418:	b	441c <read_array+0x3cc>
    441c:	b	4420 <read_array+0x3d0>
    4420:	movw	r0, #0
    4424:	str	r0, [fp, #-12]
    4428:	ldr	r0, [fp, #-12]
    442c:	sub	sp, fp, #8
    4430:	pop	{r4, r5, fp, pc}

00004434 <transpose_array>:
    4434:	push	{fp, lr}
    4438:	mov	fp, sp
    443c:	sub	sp, sp, #208	; 0xd0
    4440:	sub	r3, fp, #48	; 0x30
    4444:	str	r0, [fp, #-8]
    4448:	str	r1, [fp, #-12]
    444c:	str	r2, [fp, #-16]
    4450:	movw	r0, #0
    4454:	str	r0, [sp, #40]	; 0x28
    4458:	ldr	r0, [fp, #-8]
    445c:	sub	r1, fp, #52	; 0x34
    4460:	mov	r2, r3
    4464:	bl	0 <coda_cursor_get_array_dim>
    4468:	cmp	r0, #0
    446c:	beq	447c <transpose_array+0x48>
    4470:	mvn	r0, #0
    4474:	str	r0, [fp, #-4]
    4478:	b	4ad8 <transpose_array+0x6a4>
    447c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4480:	cmp	r0, #1
    4484:	bgt	4494 <transpose_array+0x60>
    4488:	movw	r0, #0
    448c:	str	r0, [fp, #-4]
    4490:	b	4ad8 <transpose_array+0x6a4>
    4494:	ldr	r0, [fp, #-12]
    4498:	str	r0, [sp, #32]
    449c:	movw	r0, #1
    44a0:	str	r0, [fp, #-56]	; 0xffffffc8
    44a4:	movw	r0, #0
    44a8:	str	r0, [sp, #36]	; 0x24
    44ac:	ldr	r0, [sp, #36]	; 0x24
    44b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
    44b4:	cmp	r0, r1
    44b8:	bge	4514 <transpose_array+0xe0>
    44bc:	ldr	r0, [sp, #36]	; 0x24
    44c0:	sub	r1, fp, #48	; 0x30
    44c4:	ldr	r0, [r1, r0, lsl #2]
    44c8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    44cc:	mul	r0, r2, r0
    44d0:	str	r0, [fp, #-56]	; 0xffffffc8
    44d4:	ldr	r0, [sp, #36]	; 0x24
    44d8:	add	r2, sp, #80	; 0x50
    44dc:	mov	r3, #0
    44e0:	str	r3, [r2, r0, lsl #2]
    44e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    44e8:	ldr	r2, [sp, #36]	; 0x24
    44ec:	sub	r0, r0, r2
    44f0:	add	r0, r1, r0, lsl #2
    44f4:	ldr	r0, [r0, #-4]
    44f8:	add	r1, sp, #44	; 0x2c
    44fc:	add	r1, r1, r2, lsl #2
    4500:	str	r0, [r1]
    4504:	ldr	r0, [sp, #36]	; 0x24
    4508:	add	r0, r0, #1
    450c:	str	r0, [sp, #36]	; 0x24
    4510:	b	44ac <transpose_array+0x78>
    4514:	ldr	r0, [fp, #-56]	; 0xffffffc8
    4518:	cmp	r0, #1
    451c:	bgt	452c <transpose_array+0xf8>
    4520:	movw	r0, #0
    4524:	str	r0, [fp, #-4]
    4528:	b	4ad8 <transpose_array+0x6a4>
    452c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4530:	sub	r1, fp, #92	; 0x5c
    4534:	mov	r2, #1
    4538:	str	r2, [r1, r0, lsl #2]
    453c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4540:	add	r1, sp, #44	; 0x2c
    4544:	add	r0, r1, r0, lsl #2
    4548:	movw	r1, #1
    454c:	str	r1, [r0]
    4550:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4554:	str	r0, [sp, #36]	; 0x24
    4558:	ldr	r0, [sp, #36]	; 0x24
    455c:	cmp	r0, #0
    4560:	ble	459c <transpose_array+0x168>
    4564:	ldr	r0, [sp, #36]	; 0x24
    4568:	sub	r1, fp, #92	; 0x5c
    456c:	ldr	r2, [r1, r0, lsl #2]
    4570:	add	r3, sp, #44	; 0x2c
    4574:	ldr	r3, [r3, r0, lsl #2]
    4578:	mul	r2, r2, r3
    457c:	sub	r0, r0, #1
    4580:	add	r0, r1, r0, lsl #2
    4584:	str	r2, [r0]
    4588:	ldr	r0, [sp, #36]	; 0x24
    458c:	mvn	r1, #0
    4590:	add	r0, r0, r1
    4594:	str	r0, [sp, #36]	; 0x24
    4598:	b	4558 <transpose_array+0x124>
    459c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    45a0:	add	r1, sp, #44	; 0x2c
    45a4:	mov	r2, #0
    45a8:	str	r2, [r1, r0, lsl #2]
    45ac:	ldr	r0, [fp, #-52]	; 0xffffffcc
    45b0:	add	r1, sp, #80	; 0x50
    45b4:	add	r0, r1, r0, lsl #2
    45b8:	movw	r1, #0
    45bc:	str	r1, [r0]
    45c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    45c4:	ldr	r1, [fp, #-16]
    45c8:	mul	r0, r0, r1
    45cc:	bl	0 <malloc>
    45d0:	str	r0, [sp, #28]
    45d4:	ldr	r0, [sp, #28]
    45d8:	movw	r1, #0
    45dc:	cmp	r0, r1
    45e0:	bne	461c <transpose_array+0x1e8>
    45e4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    45e8:	ldr	r1, [fp, #-16]
    45ec:	mul	r2, r0, r1
    45f0:	mvn	r0, #0
    45f4:	movw	r1, #0
    45f8:	movt	r1, #0
    45fc:	movw	r3, #0
    4600:	movt	r3, #0
    4604:	movw	ip, #93	; 0x5d
    4608:	str	ip, [sp]
    460c:	bl	0 <coda_set_error>
    4610:	mvn	r0, #0
    4614:	str	r0, [fp, #-4]
    4618:	b	4ad8 <transpose_array+0x6a4>
    461c:	ldr	r0, [fp, #-16]
    4620:	sub	r0, r0, #1
    4624:	cmp	r0, #7
    4628:	str	r0, [sp, #8]
    462c:	bhi	4a90 <transpose_array+0x65c>
    4630:	add	r0, pc, #8
    4634:	ldr	r1, [sp, #8]
    4638:	ldr	r0, [r0, r1, lsl #2]
    463c:	mov	pc, r0
    4640:	.word	0x00004660
    4644:	.word	0x00004768
    4648:	.word	0x00004a90
    464c:	.word	0x00004878
    4650:	.word	0x00004a90
    4654:	.word	0x00004a90
    4658:	.word	0x00004a90
    465c:	.word	0x00004980
    4660:	movw	r0, #0
    4664:	str	r0, [sp, #36]	; 0x24
    4668:	ldr	r0, [sp, #36]	; 0x24
    466c:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4670:	cmp	r0, r1
    4674:	bge	4764 <transpose_array+0x330>
    4678:	mov	r0, #0
    467c:	str	r0, [sp, #24]
    4680:	ldr	r0, [sp, #32]
    4684:	ldr	r1, [sp, #36]	; 0x24
    4688:	ldrb	r0, [r0, r1]
    468c:	ldr	r1, [sp, #28]
    4690:	ldr	r2, [sp, #40]	; 0x28
    4694:	strb	r0, [r1, r2]
    4698:	ldr	r0, [sp, #24]
    469c:	sub	r1, fp, #92	; 0x5c
    46a0:	ldr	r0, [r1, r0, lsl #2]
    46a4:	ldr	r1, [sp, #40]	; 0x28
    46a8:	add	r0, r1, r0
    46ac:	str	r0, [sp, #40]	; 0x28
    46b0:	ldr	r0, [sp, #24]
    46b4:	add	r1, sp, #80	; 0x50
    46b8:	add	r0, r1, r0, lsl #2
    46bc:	ldr	r1, [r0]
    46c0:	add	r1, r1, #1
    46c4:	str	r1, [r0]
    46c8:	ldr	r0, [sp, #24]
    46cc:	add	r1, sp, #80	; 0x50
    46d0:	ldr	r1, [r1, r0, lsl #2]
    46d4:	add	r2, sp, #44	; 0x2c
    46d8:	add	r0, r2, r0, lsl #2
    46dc:	ldr	r0, [r0]
    46e0:	cmp	r1, r0
    46e4:	bne	4750 <transpose_array+0x31c>
    46e8:	ldr	r0, [sp, #24]
    46ec:	add	r1, sp, #80	; 0x50
    46f0:	mov	r2, #0
    46f4:	str	r2, [r1, r0, lsl #2]
    46f8:	ldr	r0, [sp, #24]
    46fc:	sub	r2, fp, #92	; 0x5c
    4700:	ldr	r3, [r2, r0, lsl #2]
    4704:	add	ip, sp, #44	; 0x2c
    4708:	ldr	r0, [ip, r0, lsl #2]
    470c:	ldr	ip, [sp, #40]	; 0x28
    4710:	mls	r0, r3, r0, ip
    4714:	str	r0, [sp, #40]	; 0x28
    4718:	ldr	r0, [sp, #24]
    471c:	add	r0, r0, #1
    4720:	str	r0, [sp, #24]
    4724:	ldr	r0, [sp, #24]
    4728:	ldr	r0, [r2, r0, lsl #2]
    472c:	ldr	r2, [sp, #40]	; 0x28
    4730:	add	r0, r2, r0
    4734:	str	r0, [sp, #40]	; 0x28
    4738:	ldr	r0, [sp, #24]
    473c:	add	r0, r1, r0, lsl #2
    4740:	ldr	r1, [r0]
    4744:	add	r1, r1, #1
    4748:	str	r1, [r0]
    474c:	b	46c8 <transpose_array+0x294>
    4750:	b	4754 <transpose_array+0x320>
    4754:	ldr	r0, [sp, #36]	; 0x24
    4758:	add	r0, r0, #1
    475c:	str	r0, [sp, #36]	; 0x24
    4760:	b	4668 <transpose_array+0x234>
    4764:	b	4ab0 <transpose_array+0x67c>
    4768:	movw	r0, #0
    476c:	str	r0, [sp, #36]	; 0x24
    4770:	ldr	r0, [sp, #36]	; 0x24
    4774:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4778:	cmp	r0, r1
    477c:	bge	4874 <transpose_array+0x440>
    4780:	mov	r0, #0
    4784:	str	r0, [sp, #20]
    4788:	ldr	r0, [sp, #32]
    478c:	ldr	r1, [sp, #36]	; 0x24
    4790:	add	r0, r0, r1, lsl #1
    4794:	ldrh	r0, [r0]
    4798:	ldr	r1, [sp, #28]
    479c:	ldr	r2, [sp, #40]	; 0x28
    47a0:	add	r1, r1, r2, lsl #1
    47a4:	strh	r0, [r1]
    47a8:	ldr	r0, [sp, #20]
    47ac:	sub	r1, fp, #92	; 0x5c
    47b0:	ldr	r0, [r1, r0, lsl #2]
    47b4:	ldr	r1, [sp, #40]	; 0x28
    47b8:	add	r0, r1, r0
    47bc:	str	r0, [sp, #40]	; 0x28
    47c0:	ldr	r0, [sp, #20]
    47c4:	add	r1, sp, #80	; 0x50
    47c8:	add	r0, r1, r0, lsl #2
    47cc:	ldr	r1, [r0]
    47d0:	add	r1, r1, #1
    47d4:	str	r1, [r0]
    47d8:	ldr	r0, [sp, #20]
    47dc:	add	r1, sp, #80	; 0x50
    47e0:	ldr	r1, [r1, r0, lsl #2]
    47e4:	add	r2, sp, #44	; 0x2c
    47e8:	add	r0, r2, r0, lsl #2
    47ec:	ldr	r0, [r0]
    47f0:	cmp	r1, r0
    47f4:	bne	4860 <transpose_array+0x42c>
    47f8:	ldr	r0, [sp, #20]
    47fc:	add	r1, sp, #80	; 0x50
    4800:	mov	r2, #0
    4804:	str	r2, [r1, r0, lsl #2]
    4808:	ldr	r0, [sp, #20]
    480c:	sub	r2, fp, #92	; 0x5c
    4810:	ldr	r3, [r2, r0, lsl #2]
    4814:	add	ip, sp, #44	; 0x2c
    4818:	ldr	r0, [ip, r0, lsl #2]
    481c:	ldr	ip, [sp, #40]	; 0x28
    4820:	mls	r0, r3, r0, ip
    4824:	str	r0, [sp, #40]	; 0x28
    4828:	ldr	r0, [sp, #20]
    482c:	add	r0, r0, #1
    4830:	str	r0, [sp, #20]
    4834:	ldr	r0, [sp, #20]
    4838:	ldr	r0, [r2, r0, lsl #2]
    483c:	ldr	r2, [sp, #40]	; 0x28
    4840:	add	r0, r2, r0
    4844:	str	r0, [sp, #40]	; 0x28
    4848:	ldr	r0, [sp, #20]
    484c:	add	r0, r1, r0, lsl #2
    4850:	ldr	r1, [r0]
    4854:	add	r1, r1, #1
    4858:	str	r1, [r0]
    485c:	b	47d8 <transpose_array+0x3a4>
    4860:	b	4864 <transpose_array+0x430>
    4864:	ldr	r0, [sp, #36]	; 0x24
    4868:	add	r0, r0, #1
    486c:	str	r0, [sp, #36]	; 0x24
    4870:	b	4770 <transpose_array+0x33c>
    4874:	b	4ab0 <transpose_array+0x67c>
    4878:	movw	r0, #0
    487c:	str	r0, [sp, #36]	; 0x24
    4880:	ldr	r0, [sp, #36]	; 0x24
    4884:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4888:	cmp	r0, r1
    488c:	bge	497c <transpose_array+0x548>
    4890:	mov	r0, #0
    4894:	str	r0, [sp, #16]
    4898:	ldr	r0, [sp, #32]
    489c:	ldr	r1, [sp, #36]	; 0x24
    48a0:	ldr	r0, [r0, r1, lsl #2]
    48a4:	ldr	r1, [sp, #28]
    48a8:	ldr	r2, [sp, #40]	; 0x28
    48ac:	str	r0, [r1, r2, lsl #2]
    48b0:	ldr	r0, [sp, #16]
    48b4:	sub	r1, fp, #92	; 0x5c
    48b8:	ldr	r0, [r1, r0, lsl #2]
    48bc:	ldr	r1, [sp, #40]	; 0x28
    48c0:	add	r0, r1, r0
    48c4:	str	r0, [sp, #40]	; 0x28
    48c8:	ldr	r0, [sp, #16]
    48cc:	add	r1, sp, #80	; 0x50
    48d0:	add	r0, r1, r0, lsl #2
    48d4:	ldr	r1, [r0]
    48d8:	add	r1, r1, #1
    48dc:	str	r1, [r0]
    48e0:	ldr	r0, [sp, #16]
    48e4:	add	r1, sp, #80	; 0x50
    48e8:	ldr	r1, [r1, r0, lsl #2]
    48ec:	add	r2, sp, #44	; 0x2c
    48f0:	add	r0, r2, r0, lsl #2
    48f4:	ldr	r0, [r0]
    48f8:	cmp	r1, r0
    48fc:	bne	4968 <transpose_array+0x534>
    4900:	ldr	r0, [sp, #16]
    4904:	add	r1, sp, #80	; 0x50
    4908:	mov	r2, #0
    490c:	str	r2, [r1, r0, lsl #2]
    4910:	ldr	r0, [sp, #16]
    4914:	sub	r2, fp, #92	; 0x5c
    4918:	ldr	r3, [r2, r0, lsl #2]
    491c:	add	ip, sp, #44	; 0x2c
    4920:	ldr	r0, [ip, r0, lsl #2]
    4924:	ldr	ip, [sp, #40]	; 0x28
    4928:	mls	r0, r3, r0, ip
    492c:	str	r0, [sp, #40]	; 0x28
    4930:	ldr	r0, [sp, #16]
    4934:	add	r0, r0, #1
    4938:	str	r0, [sp, #16]
    493c:	ldr	r0, [sp, #16]
    4940:	ldr	r0, [r2, r0, lsl #2]
    4944:	ldr	r2, [sp, #40]	; 0x28
    4948:	add	r0, r2, r0
    494c:	str	r0, [sp, #40]	; 0x28
    4950:	ldr	r0, [sp, #16]
    4954:	add	r0, r1, r0, lsl #2
    4958:	ldr	r1, [r0]
    495c:	add	r1, r1, #1
    4960:	str	r1, [r0]
    4964:	b	48e0 <transpose_array+0x4ac>
    4968:	b	496c <transpose_array+0x538>
    496c:	ldr	r0, [sp, #36]	; 0x24
    4970:	add	r0, r0, #1
    4974:	str	r0, [sp, #36]	; 0x24
    4978:	b	4880 <transpose_array+0x44c>
    497c:	b	4ab0 <transpose_array+0x67c>
    4980:	movw	r0, #0
    4984:	str	r0, [sp, #36]	; 0x24
    4988:	ldr	r0, [sp, #36]	; 0x24
    498c:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4990:	cmp	r0, r1
    4994:	bge	4a8c <transpose_array+0x658>
    4998:	mov	r0, #0
    499c:	str	r0, [sp, #12]
    49a0:	ldr	r0, [sp, #32]
    49a4:	ldr	r1, [sp, #36]	; 0x24
    49a8:	ldr	r1, [r0, r1, lsl #3]!
    49ac:	ldr	r0, [r0, #4]
    49b0:	ldr	r2, [sp, #28]
    49b4:	ldr	r3, [sp, #40]	; 0x28
    49b8:	str	r1, [r2, r3, lsl #3]!
    49bc:	str	r0, [r2, #4]
    49c0:	ldr	r0, [sp, #12]
    49c4:	sub	r1, fp, #92	; 0x5c
    49c8:	ldr	r0, [r1, r0, lsl #2]
    49cc:	ldr	r1, [sp, #40]	; 0x28
    49d0:	add	r0, r1, r0
    49d4:	str	r0, [sp, #40]	; 0x28
    49d8:	ldr	r0, [sp, #12]
    49dc:	add	r1, sp, #80	; 0x50
    49e0:	add	r0, r1, r0, lsl #2
    49e4:	ldr	r1, [r0]
    49e8:	add	r1, r1, #1
    49ec:	str	r1, [r0]
    49f0:	ldr	r0, [sp, #12]
    49f4:	add	r1, sp, #80	; 0x50
    49f8:	ldr	r1, [r1, r0, lsl #2]
    49fc:	add	r2, sp, #44	; 0x2c
    4a00:	add	r0, r2, r0, lsl #2
    4a04:	ldr	r0, [r0]
    4a08:	cmp	r1, r0
    4a0c:	bne	4a78 <transpose_array+0x644>
    4a10:	ldr	r0, [sp, #12]
    4a14:	add	r1, sp, #80	; 0x50
    4a18:	mov	r2, #0
    4a1c:	str	r2, [r1, r0, lsl #2]
    4a20:	ldr	r0, [sp, #12]
    4a24:	sub	r2, fp, #92	; 0x5c
    4a28:	ldr	r3, [r2, r0, lsl #2]
    4a2c:	add	ip, sp, #44	; 0x2c
    4a30:	ldr	r0, [ip, r0, lsl #2]
    4a34:	ldr	ip, [sp, #40]	; 0x28
    4a38:	mls	r0, r3, r0, ip
    4a3c:	str	r0, [sp, #40]	; 0x28
    4a40:	ldr	r0, [sp, #12]
    4a44:	add	r0, r0, #1
    4a48:	str	r0, [sp, #12]
    4a4c:	ldr	r0, [sp, #12]
    4a50:	ldr	r0, [r2, r0, lsl #2]
    4a54:	ldr	r2, [sp, #40]	; 0x28
    4a58:	add	r0, r2, r0
    4a5c:	str	r0, [sp, #40]	; 0x28
    4a60:	ldr	r0, [sp, #12]
    4a64:	add	r0, r1, r0, lsl #2
    4a68:	ldr	r1, [r0]
    4a6c:	add	r1, r1, #1
    4a70:	str	r1, [r0]
    4a74:	b	49f0 <transpose_array+0x5bc>
    4a78:	b	4a7c <transpose_array+0x648>
    4a7c:	ldr	r0, [sp, #36]	; 0x24
    4a80:	add	r0, r0, #1
    4a84:	str	r0, [sp, #36]	; 0x24
    4a88:	b	4988 <transpose_array+0x554>
    4a8c:	b	4ab0 <transpose_array+0x67c>
    4a90:	movw	r0, #0
    4a94:	movt	r0, #0
    4a98:	movw	r1, #0
    4a9c:	movt	r1, #0
    4aa0:	movw	r2, #172	; 0xac
    4aa4:	movw	r3, #0
    4aa8:	movt	r3, #0
    4aac:	bl	0 <__assert_fail>
    4ab0:	ldr	r0, [fp, #-12]
    4ab4:	ldr	r1, [sp, #28]
    4ab8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    4abc:	ldr	r3, [fp, #-16]
    4ac0:	mul	r2, r2, r3
    4ac4:	bl	0 <memcpy>
    4ac8:	ldr	r0, [sp, #28]
    4acc:	bl	0 <free>
    4ad0:	movw	r0, #0
    4ad4:	str	r0, [fp, #-4]
    4ad8:	ldr	r0, [fp, #-4]
    4adc:	mov	sp, fp
    4ae0:	pop	{fp, pc}

00004ae4 <coda_ascii_cursor_read_uint8_array>:
    4ae4:	push	{fp, lr}
    4ae8:	mov	fp, sp
    4aec:	sub	sp, sp, #32
    4af0:	str	r0, [fp, #-8]
    4af4:	str	r1, [fp, #-12]
    4af8:	str	r2, [sp, #16]
    4afc:	ldr	r0, [fp, #-8]
    4b00:	add	r1, r0, #8
    4b04:	ldr	r0, [r0, #4]
    4b08:	sub	r0, r0, #1
    4b0c:	add	r0, r1, r0, lsl #4
    4b10:	ldr	r0, [r0]
    4b14:	ldr	r0, [r0]
    4b18:	cmp	r0, #100	; 0x64
    4b1c:	bcs	4b40 <coda_ascii_cursor_read_uint8_array+0x5c>
    4b20:	ldr	r0, [fp, #-8]
    4b24:	add	r1, r0, #8
    4b28:	ldr	r0, [r0, #4]
    4b2c:	sub	r0, r0, #1
    4b30:	add	r0, r1, r0, lsl #4
    4b34:	ldr	r0, [r0]
    4b38:	str	r0, [sp, #8]
    4b3c:	b	4b60 <coda_ascii_cursor_read_uint8_array+0x7c>
    4b40:	ldr	r0, [fp, #-8]
    4b44:	add	r1, r0, #8
    4b48:	ldr	r0, [r0, #4]
    4b4c:	sub	r0, r0, #1
    4b50:	add	r0, r1, r0, lsl #4
    4b54:	ldr	r0, [r0]
    4b58:	ldr	r0, [r0, #4]
    4b5c:	str	r0, [sp, #8]
    4b60:	ldr	r0, [sp, #8]
    4b64:	str	r0, [sp, #12]
    4b68:	ldr	r0, [sp, #12]
    4b6c:	ldr	r0, [r0, #40]	; 0x28
    4b70:	ldr	r0, [r0]
    4b74:	cmp	r0, #0
    4b78:	bne	4b80 <coda_ascii_cursor_read_uint8_array+0x9c>
    4b7c:	b	4ba0 <coda_ascii_cursor_read_uint8_array+0xbc>
    4b80:	movw	r0, #0
    4b84:	movt	r0, #0
    4b88:	movw	r1, #0
    4b8c:	movt	r1, #0
    4b90:	movw	r2, #1484	; 0x5cc
    4b94:	movw	r3, #0
    4b98:	movt	r3, #0
    4b9c:	bl	0 <__assert_fail>
    4ba0:	ldr	r0, [fp, #-8]
    4ba4:	ldr	r2, [fp, #-12]
    4ba8:	movw	r1, #0
    4bac:	movt	r1, #0
    4bb0:	movw	r3, #1
    4bb4:	movw	ip, #0
    4bb8:	str	ip, [sp]
    4bbc:	bl	4050 <read_array>
    4bc0:	cmp	r0, #0
    4bc4:	beq	4bd4 <coda_ascii_cursor_read_uint8_array+0xf0>
    4bc8:	mvn	r0, #0
    4bcc:	str	r0, [fp, #-4]
    4bd0:	b	4c10 <coda_ascii_cursor_read_uint8_array+0x12c>
    4bd4:	ldr	r0, [sp, #16]
    4bd8:	cmp	r0, #0
    4bdc:	beq	4c08 <coda_ascii_cursor_read_uint8_array+0x124>
    4be0:	ldr	r0, [fp, #-8]
    4be4:	ldr	r1, [fp, #-12]
    4be8:	movw	r2, #1
    4bec:	bl	4434 <transpose_array>
    4bf0:	cmp	r0, #0
    4bf4:	beq	4c04 <coda_ascii_cursor_read_uint8_array+0x120>
    4bf8:	mvn	r0, #0
    4bfc:	str	r0, [fp, #-4]
    4c00:	b	4c10 <coda_ascii_cursor_read_uint8_array+0x12c>
    4c04:	b	4c08 <coda_ascii_cursor_read_uint8_array+0x124>
    4c08:	movw	r0, #0
    4c0c:	str	r0, [fp, #-4]
    4c10:	ldr	r0, [fp, #-4]
    4c14:	mov	sp, fp
    4c18:	pop	{fp, pc}

00004c1c <coda_ascii_cursor_read_int16_array>:
    4c1c:	push	{fp, lr}
    4c20:	mov	fp, sp
    4c24:	sub	sp, sp, #32
    4c28:	str	r0, [fp, #-8]
    4c2c:	str	r1, [fp, #-12]
    4c30:	str	r2, [sp, #16]
    4c34:	ldr	r0, [fp, #-8]
    4c38:	add	r1, r0, #8
    4c3c:	ldr	r0, [r0, #4]
    4c40:	sub	r0, r0, #1
    4c44:	add	r0, r1, r0, lsl #4
    4c48:	ldr	r0, [r0]
    4c4c:	ldr	r0, [r0]
    4c50:	cmp	r0, #100	; 0x64
    4c54:	bcs	4c78 <coda_ascii_cursor_read_int16_array+0x5c>
    4c58:	ldr	r0, [fp, #-8]
    4c5c:	add	r1, r0, #8
    4c60:	ldr	r0, [r0, #4]
    4c64:	sub	r0, r0, #1
    4c68:	add	r0, r1, r0, lsl #4
    4c6c:	ldr	r0, [r0]
    4c70:	str	r0, [sp, #8]
    4c74:	b	4c98 <coda_ascii_cursor_read_int16_array+0x7c>
    4c78:	ldr	r0, [fp, #-8]
    4c7c:	add	r1, r0, #8
    4c80:	ldr	r0, [r0, #4]
    4c84:	sub	r0, r0, #1
    4c88:	add	r0, r1, r0, lsl #4
    4c8c:	ldr	r0, [r0]
    4c90:	ldr	r0, [r0, #4]
    4c94:	str	r0, [sp, #8]
    4c98:	ldr	r0, [sp, #8]
    4c9c:	str	r0, [sp, #12]
    4ca0:	ldr	r0, [sp, #12]
    4ca4:	ldr	r0, [r0, #40]	; 0x28
    4ca8:	ldr	r0, [r0]
    4cac:	cmp	r0, #0
    4cb0:	bne	4cb8 <coda_ascii_cursor_read_int16_array+0x9c>
    4cb4:	b	4cd8 <coda_ascii_cursor_read_int16_array+0xbc>
    4cb8:	movw	r0, #0
    4cbc:	movt	r0, #0
    4cc0:	movw	r1, #0
    4cc4:	movt	r1, #0
    4cc8:	movw	r2, #1504	; 0x5e0
    4ccc:	movw	r3, #0
    4cd0:	movt	r3, #0
    4cd4:	bl	0 <__assert_fail>
    4cd8:	movw	r0, #0
    4cdc:	movt	r0, #0
    4ce0:	ldr	r1, [fp, #-8]
    4ce4:	ldr	r2, [fp, #-12]
    4ce8:	str	r0, [sp, #4]
    4cec:	mov	r0, r1
    4cf0:	ldr	r1, [sp, #4]
    4cf4:	movw	r3, #2
    4cf8:	movw	ip, #0
    4cfc:	str	ip, [sp]
    4d00:	bl	4050 <read_array>
    4d04:	cmp	r0, #0
    4d08:	beq	4d18 <coda_ascii_cursor_read_int16_array+0xfc>
    4d0c:	mvn	r0, #0
    4d10:	str	r0, [fp, #-4]
    4d14:	b	4d54 <coda_ascii_cursor_read_int16_array+0x138>
    4d18:	ldr	r0, [sp, #16]
    4d1c:	cmp	r0, #0
    4d20:	beq	4d4c <coda_ascii_cursor_read_int16_array+0x130>
    4d24:	ldr	r0, [fp, #-8]
    4d28:	ldr	r1, [fp, #-12]
    4d2c:	movw	r2, #2
    4d30:	bl	4434 <transpose_array>
    4d34:	cmp	r0, #0
    4d38:	beq	4d48 <coda_ascii_cursor_read_int16_array+0x12c>
    4d3c:	mvn	r0, #0
    4d40:	str	r0, [fp, #-4]
    4d44:	b	4d54 <coda_ascii_cursor_read_int16_array+0x138>
    4d48:	b	4d4c <coda_ascii_cursor_read_int16_array+0x130>
    4d4c:	movw	r0, #0
    4d50:	str	r0, [fp, #-4]
    4d54:	ldr	r0, [fp, #-4]
    4d58:	mov	sp, fp
    4d5c:	pop	{fp, pc}

00004d60 <coda_ascii_cursor_read_uint16_array>:
    4d60:	push	{fp, lr}
    4d64:	mov	fp, sp
    4d68:	sub	sp, sp, #32
    4d6c:	str	r0, [fp, #-8]
    4d70:	str	r1, [fp, #-12]
    4d74:	str	r2, [sp, #16]
    4d78:	ldr	r0, [fp, #-8]
    4d7c:	add	r1, r0, #8
    4d80:	ldr	r0, [r0, #4]
    4d84:	sub	r0, r0, #1
    4d88:	add	r0, r1, r0, lsl #4
    4d8c:	ldr	r0, [r0]
    4d90:	ldr	r0, [r0]
    4d94:	cmp	r0, #100	; 0x64
    4d98:	bcs	4dbc <coda_ascii_cursor_read_uint16_array+0x5c>
    4d9c:	ldr	r0, [fp, #-8]
    4da0:	add	r1, r0, #8
    4da4:	ldr	r0, [r0, #4]
    4da8:	sub	r0, r0, #1
    4dac:	add	r0, r1, r0, lsl #4
    4db0:	ldr	r0, [r0]
    4db4:	str	r0, [sp, #8]
    4db8:	b	4ddc <coda_ascii_cursor_read_uint16_array+0x7c>
    4dbc:	ldr	r0, [fp, #-8]
    4dc0:	add	r1, r0, #8
    4dc4:	ldr	r0, [r0, #4]
    4dc8:	sub	r0, r0, #1
    4dcc:	add	r0, r1, r0, lsl #4
    4dd0:	ldr	r0, [r0]
    4dd4:	ldr	r0, [r0, #4]
    4dd8:	str	r0, [sp, #8]
    4ddc:	ldr	r0, [sp, #8]
    4de0:	str	r0, [sp, #12]
    4de4:	ldr	r0, [sp, #12]
    4de8:	ldr	r0, [r0, #40]	; 0x28
    4dec:	ldr	r0, [r0]
    4df0:	cmp	r0, #0
    4df4:	bne	4dfc <coda_ascii_cursor_read_uint16_array+0x9c>
    4df8:	b	4e1c <coda_ascii_cursor_read_uint16_array+0xbc>
    4dfc:	movw	r0, #0
    4e00:	movt	r0, #0
    4e04:	movw	r1, #0
    4e08:	movt	r1, #0
    4e0c:	movw	r2, #1524	; 0x5f4
    4e10:	movw	r3, #0
    4e14:	movt	r3, #0
    4e18:	bl	0 <__assert_fail>
    4e1c:	movw	r0, #0
    4e20:	movt	r0, #0
    4e24:	ldr	r1, [fp, #-8]
    4e28:	ldr	r2, [fp, #-12]
    4e2c:	str	r0, [sp, #4]
    4e30:	mov	r0, r1
    4e34:	ldr	r1, [sp, #4]
    4e38:	movw	r3, #2
    4e3c:	movw	ip, #0
    4e40:	str	ip, [sp]
    4e44:	bl	4050 <read_array>
    4e48:	cmp	r0, #0
    4e4c:	beq	4e5c <coda_ascii_cursor_read_uint16_array+0xfc>
    4e50:	mvn	r0, #0
    4e54:	str	r0, [fp, #-4]
    4e58:	b	4e98 <coda_ascii_cursor_read_uint16_array+0x138>
    4e5c:	ldr	r0, [sp, #16]
    4e60:	cmp	r0, #0
    4e64:	beq	4e90 <coda_ascii_cursor_read_uint16_array+0x130>
    4e68:	ldr	r0, [fp, #-8]
    4e6c:	ldr	r1, [fp, #-12]
    4e70:	movw	r2, #2
    4e74:	bl	4434 <transpose_array>
    4e78:	cmp	r0, #0
    4e7c:	beq	4e8c <coda_ascii_cursor_read_uint16_array+0x12c>
    4e80:	mvn	r0, #0
    4e84:	str	r0, [fp, #-4]
    4e88:	b	4e98 <coda_ascii_cursor_read_uint16_array+0x138>
    4e8c:	b	4e90 <coda_ascii_cursor_read_uint16_array+0x130>
    4e90:	movw	r0, #0
    4e94:	str	r0, [fp, #-4]
    4e98:	ldr	r0, [fp, #-4]
    4e9c:	mov	sp, fp
    4ea0:	pop	{fp, pc}

00004ea4 <coda_ascii_cursor_read_int32_array>:
    4ea4:	push	{fp, lr}
    4ea8:	mov	fp, sp
    4eac:	sub	sp, sp, #32
    4eb0:	str	r0, [fp, #-8]
    4eb4:	str	r1, [fp, #-12]
    4eb8:	str	r2, [sp, #16]
    4ebc:	ldr	r0, [fp, #-8]
    4ec0:	add	r1, r0, #8
    4ec4:	ldr	r0, [r0, #4]
    4ec8:	sub	r0, r0, #1
    4ecc:	add	r0, r1, r0, lsl #4
    4ed0:	ldr	r0, [r0]
    4ed4:	ldr	r0, [r0]
    4ed8:	cmp	r0, #100	; 0x64
    4edc:	bcs	4f00 <coda_ascii_cursor_read_int32_array+0x5c>
    4ee0:	ldr	r0, [fp, #-8]
    4ee4:	add	r1, r0, #8
    4ee8:	ldr	r0, [r0, #4]
    4eec:	sub	r0, r0, #1
    4ef0:	add	r0, r1, r0, lsl #4
    4ef4:	ldr	r0, [r0]
    4ef8:	str	r0, [sp, #8]
    4efc:	b	4f20 <coda_ascii_cursor_read_int32_array+0x7c>
    4f00:	ldr	r0, [fp, #-8]
    4f04:	add	r1, r0, #8
    4f08:	ldr	r0, [r0, #4]
    4f0c:	sub	r0, r0, #1
    4f10:	add	r0, r1, r0, lsl #4
    4f14:	ldr	r0, [r0]
    4f18:	ldr	r0, [r0, #4]
    4f1c:	str	r0, [sp, #8]
    4f20:	ldr	r0, [sp, #8]
    4f24:	str	r0, [sp, #12]
    4f28:	ldr	r0, [sp, #12]
    4f2c:	ldr	r0, [r0, #40]	; 0x28
    4f30:	ldr	r0, [r0]
    4f34:	cmp	r0, #0
    4f38:	bne	4f40 <coda_ascii_cursor_read_int32_array+0x9c>
    4f3c:	b	4f60 <coda_ascii_cursor_read_int32_array+0xbc>
    4f40:	movw	r0, #0
    4f44:	movt	r0, #0
    4f48:	movw	r1, #0
    4f4c:	movt	r1, #0
    4f50:	movw	r2, #1544	; 0x608
    4f54:	movw	r3, #0
    4f58:	movt	r3, #0
    4f5c:	bl	0 <__assert_fail>
    4f60:	movw	r0, #0
    4f64:	movt	r0, #0
    4f68:	ldr	r1, [fp, #-8]
    4f6c:	ldr	r2, [fp, #-12]
    4f70:	str	r0, [sp, #4]
    4f74:	mov	r0, r1
    4f78:	ldr	r1, [sp, #4]
    4f7c:	movw	r3, #4
    4f80:	movw	ip, #0
    4f84:	str	ip, [sp]
    4f88:	bl	4050 <read_array>
    4f8c:	cmp	r0, #0
    4f90:	beq	4fa0 <coda_ascii_cursor_read_int32_array+0xfc>
    4f94:	mvn	r0, #0
    4f98:	str	r0, [fp, #-4]
    4f9c:	b	4fdc <coda_ascii_cursor_read_int32_array+0x138>
    4fa0:	ldr	r0, [sp, #16]
    4fa4:	cmp	r0, #0
    4fa8:	beq	4fd4 <coda_ascii_cursor_read_int32_array+0x130>
    4fac:	ldr	r0, [fp, #-8]
    4fb0:	ldr	r1, [fp, #-12]
    4fb4:	movw	r2, #4
    4fb8:	bl	4434 <transpose_array>
    4fbc:	cmp	r0, #0
    4fc0:	beq	4fd0 <coda_ascii_cursor_read_int32_array+0x12c>
    4fc4:	mvn	r0, #0
    4fc8:	str	r0, [fp, #-4]
    4fcc:	b	4fdc <coda_ascii_cursor_read_int32_array+0x138>
    4fd0:	b	4fd4 <coda_ascii_cursor_read_int32_array+0x130>
    4fd4:	movw	r0, #0
    4fd8:	str	r0, [fp, #-4]
    4fdc:	ldr	r0, [fp, #-4]
    4fe0:	mov	sp, fp
    4fe4:	pop	{fp, pc}

00004fe8 <coda_ascii_cursor_read_uint32_array>:
    4fe8:	push	{fp, lr}
    4fec:	mov	fp, sp
    4ff0:	sub	sp, sp, #32
    4ff4:	str	r0, [fp, #-8]
    4ff8:	str	r1, [fp, #-12]
    4ffc:	str	r2, [sp, #16]
    5000:	ldr	r0, [fp, #-8]
    5004:	add	r1, r0, #8
    5008:	ldr	r0, [r0, #4]
    500c:	sub	r0, r0, #1
    5010:	add	r0, r1, r0, lsl #4
    5014:	ldr	r0, [r0]
    5018:	ldr	r0, [r0]
    501c:	cmp	r0, #100	; 0x64
    5020:	bcs	5044 <coda_ascii_cursor_read_uint32_array+0x5c>
    5024:	ldr	r0, [fp, #-8]
    5028:	add	r1, r0, #8
    502c:	ldr	r0, [r0, #4]
    5030:	sub	r0, r0, #1
    5034:	add	r0, r1, r0, lsl #4
    5038:	ldr	r0, [r0]
    503c:	str	r0, [sp, #8]
    5040:	b	5064 <coda_ascii_cursor_read_uint32_array+0x7c>
    5044:	ldr	r0, [fp, #-8]
    5048:	add	r1, r0, #8
    504c:	ldr	r0, [r0, #4]
    5050:	sub	r0, r0, #1
    5054:	add	r0, r1, r0, lsl #4
    5058:	ldr	r0, [r0]
    505c:	ldr	r0, [r0, #4]
    5060:	str	r0, [sp, #8]
    5064:	ldr	r0, [sp, #8]
    5068:	str	r0, [sp, #12]
    506c:	ldr	r0, [sp, #12]
    5070:	ldr	r0, [r0, #40]	; 0x28
    5074:	ldr	r0, [r0]
    5078:	cmp	r0, #0
    507c:	bne	5084 <coda_ascii_cursor_read_uint32_array+0x9c>
    5080:	b	50a4 <coda_ascii_cursor_read_uint32_array+0xbc>
    5084:	movw	r0, #0
    5088:	movt	r0, #0
    508c:	movw	r1, #0
    5090:	movt	r1, #0
    5094:	movw	r2, #1564	; 0x61c
    5098:	movw	r3, #0
    509c:	movt	r3, #0
    50a0:	bl	0 <__assert_fail>
    50a4:	movw	r0, #0
    50a8:	movt	r0, #0
    50ac:	ldr	r1, [fp, #-8]
    50b0:	ldr	r2, [fp, #-12]
    50b4:	str	r0, [sp, #4]
    50b8:	mov	r0, r1
    50bc:	ldr	r1, [sp, #4]
    50c0:	movw	r3, #4
    50c4:	movw	ip, #0
    50c8:	str	ip, [sp]
    50cc:	bl	4050 <read_array>
    50d0:	cmp	r0, #0
    50d4:	beq	50e4 <coda_ascii_cursor_read_uint32_array+0xfc>
    50d8:	mvn	r0, #0
    50dc:	str	r0, [fp, #-4]
    50e0:	b	5120 <coda_ascii_cursor_read_uint32_array+0x138>
    50e4:	ldr	r0, [sp, #16]
    50e8:	cmp	r0, #0
    50ec:	beq	5118 <coda_ascii_cursor_read_uint32_array+0x130>
    50f0:	ldr	r0, [fp, #-8]
    50f4:	ldr	r1, [fp, #-12]
    50f8:	movw	r2, #4
    50fc:	bl	4434 <transpose_array>
    5100:	cmp	r0, #0
    5104:	beq	5114 <coda_ascii_cursor_read_uint32_array+0x12c>
    5108:	mvn	r0, #0
    510c:	str	r0, [fp, #-4]
    5110:	b	5120 <coda_ascii_cursor_read_uint32_array+0x138>
    5114:	b	5118 <coda_ascii_cursor_read_uint32_array+0x130>
    5118:	movw	r0, #0
    511c:	str	r0, [fp, #-4]
    5120:	ldr	r0, [fp, #-4]
    5124:	mov	sp, fp
    5128:	pop	{fp, pc}

0000512c <coda_ascii_cursor_read_int64_array>:
    512c:	push	{fp, lr}
    5130:	mov	fp, sp
    5134:	sub	sp, sp, #32
    5138:	str	r0, [fp, #-8]
    513c:	str	r1, [fp, #-12]
    5140:	str	r2, [sp, #16]
    5144:	ldr	r0, [fp, #-8]
    5148:	add	r1, r0, #8
    514c:	ldr	r0, [r0, #4]
    5150:	sub	r0, r0, #1
    5154:	add	r0, r1, r0, lsl #4
    5158:	ldr	r0, [r0]
    515c:	ldr	r0, [r0]
    5160:	cmp	r0, #100	; 0x64
    5164:	bcs	5188 <coda_ascii_cursor_read_int64_array+0x5c>
    5168:	ldr	r0, [fp, #-8]
    516c:	add	r1, r0, #8
    5170:	ldr	r0, [r0, #4]
    5174:	sub	r0, r0, #1
    5178:	add	r0, r1, r0, lsl #4
    517c:	ldr	r0, [r0]
    5180:	str	r0, [sp, #8]
    5184:	b	51a8 <coda_ascii_cursor_read_int64_array+0x7c>
    5188:	ldr	r0, [fp, #-8]
    518c:	add	r1, r0, #8
    5190:	ldr	r0, [r0, #4]
    5194:	sub	r0, r0, #1
    5198:	add	r0, r1, r0, lsl #4
    519c:	ldr	r0, [r0]
    51a0:	ldr	r0, [r0, #4]
    51a4:	str	r0, [sp, #8]
    51a8:	ldr	r0, [sp, #8]
    51ac:	str	r0, [sp, #12]
    51b0:	ldr	r0, [sp, #12]
    51b4:	ldr	r0, [r0, #40]	; 0x28
    51b8:	ldr	r0, [r0]
    51bc:	cmp	r0, #0
    51c0:	bne	51c8 <coda_ascii_cursor_read_int64_array+0x9c>
    51c4:	b	51e8 <coda_ascii_cursor_read_int64_array+0xbc>
    51c8:	movw	r0, #0
    51cc:	movt	r0, #0
    51d0:	movw	r1, #0
    51d4:	movt	r1, #0
    51d8:	movw	r2, #1584	; 0x630
    51dc:	movw	r3, #0
    51e0:	movt	r3, #0
    51e4:	bl	0 <__assert_fail>
    51e8:	movw	r0, #0
    51ec:	movt	r0, #0
    51f0:	ldr	r1, [fp, #-8]
    51f4:	ldr	r2, [fp, #-12]
    51f8:	str	r0, [sp, #4]
    51fc:	mov	r0, r1
    5200:	ldr	r1, [sp, #4]
    5204:	movw	r3, #8
    5208:	movw	ip, #0
    520c:	str	ip, [sp]
    5210:	bl	4050 <read_array>
    5214:	cmp	r0, #0
    5218:	beq	5228 <coda_ascii_cursor_read_int64_array+0xfc>
    521c:	mvn	r0, #0
    5220:	str	r0, [fp, #-4]
    5224:	b	5264 <coda_ascii_cursor_read_int64_array+0x138>
    5228:	ldr	r0, [sp, #16]
    522c:	cmp	r0, #0
    5230:	beq	525c <coda_ascii_cursor_read_int64_array+0x130>
    5234:	ldr	r0, [fp, #-8]
    5238:	ldr	r1, [fp, #-12]
    523c:	movw	r2, #4
    5240:	bl	4434 <transpose_array>
    5244:	cmp	r0, #0
    5248:	beq	5258 <coda_ascii_cursor_read_int64_array+0x12c>
    524c:	mvn	r0, #0
    5250:	str	r0, [fp, #-4]
    5254:	b	5264 <coda_ascii_cursor_read_int64_array+0x138>
    5258:	b	525c <coda_ascii_cursor_read_int64_array+0x130>
    525c:	movw	r0, #0
    5260:	str	r0, [fp, #-4]
    5264:	ldr	r0, [fp, #-4]
    5268:	mov	sp, fp
    526c:	pop	{fp, pc}

00005270 <coda_ascii_cursor_read_uint64_array>:
    5270:	push	{fp, lr}
    5274:	mov	fp, sp
    5278:	sub	sp, sp, #32
    527c:	str	r0, [fp, #-8]
    5280:	str	r1, [fp, #-12]
    5284:	str	r2, [sp, #16]
    5288:	ldr	r0, [fp, #-8]
    528c:	add	r1, r0, #8
    5290:	ldr	r0, [r0, #4]
    5294:	sub	r0, r0, #1
    5298:	add	r0, r1, r0, lsl #4
    529c:	ldr	r0, [r0]
    52a0:	ldr	r0, [r0]
    52a4:	cmp	r0, #100	; 0x64
    52a8:	bcs	52cc <coda_ascii_cursor_read_uint64_array+0x5c>
    52ac:	ldr	r0, [fp, #-8]
    52b0:	add	r1, r0, #8
    52b4:	ldr	r0, [r0, #4]
    52b8:	sub	r0, r0, #1
    52bc:	add	r0, r1, r0, lsl #4
    52c0:	ldr	r0, [r0]
    52c4:	str	r0, [sp, #8]
    52c8:	b	52ec <coda_ascii_cursor_read_uint64_array+0x7c>
    52cc:	ldr	r0, [fp, #-8]
    52d0:	add	r1, r0, #8
    52d4:	ldr	r0, [r0, #4]
    52d8:	sub	r0, r0, #1
    52dc:	add	r0, r1, r0, lsl #4
    52e0:	ldr	r0, [r0]
    52e4:	ldr	r0, [r0, #4]
    52e8:	str	r0, [sp, #8]
    52ec:	ldr	r0, [sp, #8]
    52f0:	str	r0, [sp, #12]
    52f4:	ldr	r0, [sp, #12]
    52f8:	ldr	r0, [r0, #40]	; 0x28
    52fc:	ldr	r0, [r0]
    5300:	cmp	r0, #0
    5304:	bne	530c <coda_ascii_cursor_read_uint64_array+0x9c>
    5308:	b	532c <coda_ascii_cursor_read_uint64_array+0xbc>
    530c:	movw	r0, #0
    5310:	movt	r0, #0
    5314:	movw	r1, #0
    5318:	movt	r1, #0
    531c:	movw	r2, #1604	; 0x644
    5320:	movw	r3, #0
    5324:	movt	r3, #0
    5328:	bl	0 <__assert_fail>
    532c:	movw	r0, #0
    5330:	movt	r0, #0
    5334:	ldr	r1, [fp, #-8]
    5338:	ldr	r2, [fp, #-12]
    533c:	str	r0, [sp, #4]
    5340:	mov	r0, r1
    5344:	ldr	r1, [sp, #4]
    5348:	movw	r3, #8
    534c:	movw	ip, #0
    5350:	str	ip, [sp]
    5354:	bl	4050 <read_array>
    5358:	cmp	r0, #0
    535c:	beq	536c <coda_ascii_cursor_read_uint64_array+0xfc>
    5360:	mvn	r0, #0
    5364:	str	r0, [fp, #-4]
    5368:	b	53a8 <coda_ascii_cursor_read_uint64_array+0x138>
    536c:	ldr	r0, [sp, #16]
    5370:	cmp	r0, #0
    5374:	beq	53a0 <coda_ascii_cursor_read_uint64_array+0x130>
    5378:	ldr	r0, [fp, #-8]
    537c:	ldr	r1, [fp, #-12]
    5380:	movw	r2, #8
    5384:	bl	4434 <transpose_array>
    5388:	cmp	r0, #0
    538c:	beq	539c <coda_ascii_cursor_read_uint64_array+0x12c>
    5390:	mvn	r0, #0
    5394:	str	r0, [fp, #-4]
    5398:	b	53a8 <coda_ascii_cursor_read_uint64_array+0x138>
    539c:	b	53a0 <coda_ascii_cursor_read_uint64_array+0x130>
    53a0:	movw	r0, #0
    53a4:	str	r0, [fp, #-4]
    53a8:	ldr	r0, [fp, #-4]
    53ac:	mov	sp, fp
    53b0:	pop	{fp, pc}

000053b4 <coda_ascii_cursor_read_float_array>:
    53b4:	push	{fp, lr}
    53b8:	mov	fp, sp
    53bc:	sub	sp, sp, #32
    53c0:	str	r0, [fp, #-8]
    53c4:	str	r1, [fp, #-12]
    53c8:	str	r2, [sp, #16]
    53cc:	ldr	r0, [fp, #-8]
    53d0:	add	r1, r0, #8
    53d4:	ldr	r0, [r0, #4]
    53d8:	sub	r0, r0, #1
    53dc:	add	r0, r1, r0, lsl #4
    53e0:	ldr	r0, [r0]
    53e4:	ldr	r0, [r0]
    53e8:	cmp	r0, #100	; 0x64
    53ec:	bcs	5410 <coda_ascii_cursor_read_float_array+0x5c>
    53f0:	ldr	r0, [fp, #-8]
    53f4:	add	r1, r0, #8
    53f8:	ldr	r0, [r0, #4]
    53fc:	sub	r0, r0, #1
    5400:	add	r0, r1, r0, lsl #4
    5404:	ldr	r0, [r0]
    5408:	str	r0, [sp, #8]
    540c:	b	5430 <coda_ascii_cursor_read_float_array+0x7c>
    5410:	ldr	r0, [fp, #-8]
    5414:	add	r1, r0, #8
    5418:	ldr	r0, [r0, #4]
    541c:	sub	r0, r0, #1
    5420:	add	r0, r1, r0, lsl #4
    5424:	ldr	r0, [r0]
    5428:	ldr	r0, [r0, #4]
    542c:	str	r0, [sp, #8]
    5430:	ldr	r0, [sp, #8]
    5434:	str	r0, [sp, #12]
    5438:	ldr	r0, [sp, #12]
    543c:	ldr	r0, [r0, #40]	; 0x28
    5440:	ldr	r0, [r0]
    5444:	cmp	r0, #0
    5448:	bne	5450 <coda_ascii_cursor_read_float_array+0x9c>
    544c:	b	5470 <coda_ascii_cursor_read_float_array+0xbc>
    5450:	movw	r0, #0
    5454:	movt	r0, #0
    5458:	movw	r1, #0
    545c:	movt	r1, #0
    5460:	movw	r2, #1624	; 0x658
    5464:	movw	r3, #0
    5468:	movt	r3, #0
    546c:	bl	0 <__assert_fail>
    5470:	movw	r0, #0
    5474:	movt	r0, #0
    5478:	ldr	r1, [fp, #-8]
    547c:	ldr	r2, [fp, #-12]
    5480:	str	r0, [sp, #4]
    5484:	mov	r0, r1
    5488:	ldr	r1, [sp, #4]
    548c:	movw	r3, #4
    5490:	movw	ip, #0
    5494:	str	ip, [sp]
    5498:	bl	4050 <read_array>
    549c:	cmp	r0, #0
    54a0:	beq	54b0 <coda_ascii_cursor_read_float_array+0xfc>
    54a4:	mvn	r0, #0
    54a8:	str	r0, [fp, #-4]
    54ac:	b	54ec <coda_ascii_cursor_read_float_array+0x138>
    54b0:	ldr	r0, [sp, #16]
    54b4:	cmp	r0, #0
    54b8:	beq	54e4 <coda_ascii_cursor_read_float_array+0x130>
    54bc:	ldr	r0, [fp, #-8]
    54c0:	ldr	r1, [fp, #-12]
    54c4:	movw	r2, #4
    54c8:	bl	4434 <transpose_array>
    54cc:	cmp	r0, #0
    54d0:	beq	54e0 <coda_ascii_cursor_read_float_array+0x12c>
    54d4:	mvn	r0, #0
    54d8:	str	r0, [fp, #-4]
    54dc:	b	54ec <coda_ascii_cursor_read_float_array+0x138>
    54e0:	b	54e4 <coda_ascii_cursor_read_float_array+0x130>
    54e4:	movw	r0, #0
    54e8:	str	r0, [fp, #-4]
    54ec:	ldr	r0, [fp, #-4]
    54f0:	mov	sp, fp
    54f4:	pop	{fp, pc}

000054f8 <coda_ascii_cursor_read_double_array>:
    54f8:	push	{fp, lr}
    54fc:	mov	fp, sp
    5500:	sub	sp, sp, #32
    5504:	str	r0, [fp, #-8]
    5508:	str	r1, [fp, #-12]
    550c:	str	r2, [sp, #16]
    5510:	ldr	r0, [fp, #-8]
    5514:	add	r1, r0, #8
    5518:	ldr	r0, [r0, #4]
    551c:	sub	r0, r0, #1
    5520:	add	r0, r1, r0, lsl #4
    5524:	ldr	r0, [r0]
    5528:	ldr	r0, [r0]
    552c:	cmp	r0, #100	; 0x64
    5530:	bcs	5554 <coda_ascii_cursor_read_double_array+0x5c>
    5534:	ldr	r0, [fp, #-8]
    5538:	add	r1, r0, #8
    553c:	ldr	r0, [r0, #4]
    5540:	sub	r0, r0, #1
    5544:	add	r0, r1, r0, lsl #4
    5548:	ldr	r0, [r0]
    554c:	str	r0, [sp, #8]
    5550:	b	5574 <coda_ascii_cursor_read_double_array+0x7c>
    5554:	ldr	r0, [fp, #-8]
    5558:	add	r1, r0, #8
    555c:	ldr	r0, [r0, #4]
    5560:	sub	r0, r0, #1
    5564:	add	r0, r1, r0, lsl #4
    5568:	ldr	r0, [r0]
    556c:	ldr	r0, [r0, #4]
    5570:	str	r0, [sp, #8]
    5574:	ldr	r0, [sp, #8]
    5578:	str	r0, [sp, #12]
    557c:	ldr	r0, [sp, #12]
    5580:	ldr	r0, [r0, #40]	; 0x28
    5584:	ldr	r0, [r0]
    5588:	cmp	r0, #0
    558c:	bne	5594 <coda_ascii_cursor_read_double_array+0x9c>
    5590:	b	55b4 <coda_ascii_cursor_read_double_array+0xbc>
    5594:	movw	r0, #0
    5598:	movt	r0, #0
    559c:	movw	r1, #0
    55a0:	movt	r1, #0
    55a4:	movw	r2, #1644	; 0x66c
    55a8:	movw	r3, #0
    55ac:	movt	r3, #0
    55b0:	bl	0 <__assert_fail>
    55b4:	movw	r0, #0
    55b8:	movt	r0, #0
    55bc:	ldr	r1, [fp, #-8]
    55c0:	ldr	r2, [fp, #-12]
    55c4:	str	r0, [sp, #4]
    55c8:	mov	r0, r1
    55cc:	ldr	r1, [sp, #4]
    55d0:	movw	r3, #8
    55d4:	movw	ip, #0
    55d8:	str	ip, [sp]
    55dc:	bl	4050 <read_array>
    55e0:	cmp	r0, #0
    55e4:	beq	55f4 <coda_ascii_cursor_read_double_array+0xfc>
    55e8:	mvn	r0, #0
    55ec:	str	r0, [fp, #-4]
    55f0:	b	5630 <coda_ascii_cursor_read_double_array+0x138>
    55f4:	ldr	r0, [sp, #16]
    55f8:	cmp	r0, #0
    55fc:	beq	5628 <coda_ascii_cursor_read_double_array+0x130>
    5600:	ldr	r0, [fp, #-8]
    5604:	ldr	r1, [fp, #-12]
    5608:	movw	r2, #8
    560c:	bl	4434 <transpose_array>
    5610:	cmp	r0, #0
    5614:	beq	5624 <coda_ascii_cursor_read_double_array+0x12c>
    5618:	mvn	r0, #0
    561c:	str	r0, [fp, #-4]
    5620:	b	5630 <coda_ascii_cursor_read_double_array+0x138>
    5624:	b	5628 <coda_ascii_cursor_read_double_array+0x130>
    5628:	movw	r0, #0
    562c:	str	r0, [fp, #-4]
    5630:	ldr	r0, [fp, #-4]
    5634:	mov	sp, fp
    5638:	pop	{fp, pc}

0000563c <coda_ascii_cursor_read_char_array>:
    563c:	push	{fp, lr}
    5640:	mov	fp, sp
    5644:	sub	sp, sp, #32
    5648:	str	r0, [fp, #-8]
    564c:	str	r1, [fp, #-12]
    5650:	str	r2, [sp, #16]
    5654:	ldr	r0, [fp, #-8]
    5658:	add	r1, r0, #8
    565c:	ldr	r0, [r0, #4]
    5660:	sub	r0, r0, #1
    5664:	add	r0, r1, r0, lsl #4
    5668:	ldr	r0, [r0]
    566c:	ldr	r0, [r0]
    5670:	cmp	r0, #100	; 0x64
    5674:	bcs	5698 <coda_ascii_cursor_read_char_array+0x5c>
    5678:	ldr	r0, [fp, #-8]
    567c:	add	r1, r0, #8
    5680:	ldr	r0, [r0, #4]
    5684:	sub	r0, r0, #1
    5688:	add	r0, r1, r0, lsl #4
    568c:	ldr	r0, [r0]
    5690:	str	r0, [sp, #8]
    5694:	b	56b8 <coda_ascii_cursor_read_char_array+0x7c>
    5698:	ldr	r0, [fp, #-8]
    569c:	add	r1, r0, #8
    56a0:	ldr	r0, [r0, #4]
    56a4:	sub	r0, r0, #1
    56a8:	add	r0, r1, r0, lsl #4
    56ac:	ldr	r0, [r0]
    56b0:	ldr	r0, [r0, #4]
    56b4:	str	r0, [sp, #8]
    56b8:	ldr	r0, [sp, #8]
    56bc:	str	r0, [sp, #12]
    56c0:	ldr	r0, [sp, #12]
    56c4:	ldr	r0, [r0, #40]	; 0x28
    56c8:	ldr	r0, [r0]
    56cc:	cmp	r0, #0
    56d0:	bne	56d8 <coda_ascii_cursor_read_char_array+0x9c>
    56d4:	b	56f8 <coda_ascii_cursor_read_char_array+0xbc>
    56d8:	movw	r0, #0
    56dc:	movt	r0, #0
    56e0:	movw	r1, #0
    56e4:	movt	r1, #0
    56e8:	movw	r2, #1664	; 0x680
    56ec:	movw	r3, #0
    56f0:	movt	r3, #0
    56f4:	bl	0 <__assert_fail>
    56f8:	ldr	r0, [fp, #-8]
    56fc:	ldr	r2, [fp, #-12]
    5700:	movw	r1, #0
    5704:	movt	r1, #0
    5708:	movw	r3, #1
    570c:	movw	ip, #0
    5710:	str	ip, [sp]
    5714:	bl	4050 <read_array>
    5718:	cmp	r0, #0
    571c:	beq	572c <coda_ascii_cursor_read_char_array+0xf0>
    5720:	mvn	r0, #0
    5724:	str	r0, [fp, #-4]
    5728:	b	5768 <coda_ascii_cursor_read_char_array+0x12c>
    572c:	ldr	r0, [sp, #16]
    5730:	cmp	r0, #0
    5734:	beq	5760 <coda_ascii_cursor_read_char_array+0x124>
    5738:	ldr	r0, [fp, #-8]
    573c:	ldr	r1, [fp, #-12]
    5740:	movw	r2, #1
    5744:	bl	4434 <transpose_array>
    5748:	cmp	r0, #0
    574c:	beq	575c <coda_ascii_cursor_read_char_array+0x120>
    5750:	mvn	r0, #0
    5754:	str	r0, [fp, #-4]
    5758:	b	5768 <coda_ascii_cursor_read_char_array+0x12c>
    575c:	b	5760 <coda_ascii_cursor_read_char_array+0x124>
    5760:	movw	r0, #0
    5764:	str	r0, [fp, #-4]
    5768:	ldr	r0, [fp, #-4]
    576c:	mov	sp, fp
    5770:	pop	{fp, pc}

00005774 <coda_ascii_cursor_read_int8_partial_array>:
    5774:	push	{fp, lr}
    5778:	mov	fp, sp
    577c:	sub	sp, sp, #40	; 0x28
    5780:	str	r0, [fp, #-4]
    5784:	str	r1, [fp, #-8]
    5788:	str	r2, [fp, #-12]
    578c:	str	r3, [fp, #-16]
    5790:	ldr	r0, [fp, #-4]
    5794:	add	r1, r0, #8
    5798:	ldr	r0, [r0, #4]
    579c:	sub	r0, r0, #1
    57a0:	add	r0, r1, r0, lsl #4
    57a4:	ldr	r0, [r0]
    57a8:	ldr	r0, [r0]
    57ac:	cmp	r0, #100	; 0x64
    57b0:	bcs	57d4 <coda_ascii_cursor_read_int8_partial_array+0x60>
    57b4:	ldr	r0, [fp, #-4]
    57b8:	add	r1, r0, #8
    57bc:	ldr	r0, [r0, #4]
    57c0:	sub	r0, r0, #1
    57c4:	add	r0, r1, r0, lsl #4
    57c8:	ldr	r0, [r0]
    57cc:	str	r0, [sp, #16]
    57d0:	b	57f4 <coda_ascii_cursor_read_int8_partial_array+0x80>
    57d4:	ldr	r0, [fp, #-4]
    57d8:	add	r1, r0, #8
    57dc:	ldr	r0, [r0, #4]
    57e0:	sub	r0, r0, #1
    57e4:	add	r0, r1, r0, lsl #4
    57e8:	ldr	r0, [r0]
    57ec:	ldr	r0, [r0, #4]
    57f0:	str	r0, [sp, #16]
    57f4:	ldr	r0, [sp, #16]
    57f8:	str	r0, [sp, #20]
    57fc:	ldr	r0, [sp, #20]
    5800:	ldr	r0, [r0, #40]	; 0x28
    5804:	ldr	r0, [r0]
    5808:	cmp	r0, #0
    580c:	bne	5814 <coda_ascii_cursor_read_int8_partial_array+0xa0>
    5810:	b	5834 <coda_ascii_cursor_read_int8_partial_array+0xc0>
    5814:	movw	r0, #0
    5818:	movt	r0, #0
    581c:	movw	r1, #0
    5820:	movt	r1, #0
    5824:	movw	r2, #1684	; 0x694
    5828:	movw	r3, #0
    582c:	movt	r3, #0
    5830:	bl	0 <__assert_fail>
    5834:	ldr	r0, [fp, #-4]
    5838:	ldr	r2, [fp, #-8]
    583c:	ldr	r3, [fp, #-12]
    5840:	ldr	r1, [fp, #-16]
    5844:	movw	ip, #0
    5848:	movt	ip, #0
    584c:	str	r1, [sp, #12]
    5850:	mov	r1, ip
    5854:	ldr	ip, [sp, #12]
    5858:	str	ip, [sp]
    585c:	movw	lr, #1
    5860:	str	lr, [sp, #4]
    5864:	bl	5870 <read_partial_array>
    5868:	mov	sp, fp
    586c:	pop	{fp, pc}

00005870 <read_partial_array>:
    5870:	push	{r4, r5, fp, lr}
    5874:	add	fp, sp, #8
    5878:	sub	sp, sp, #568	; 0x238
    587c:	ldr	ip, [fp, #12]
    5880:	ldr	lr, [fp, #8]
    5884:	str	r0, [fp, #-16]
    5888:	str	r1, [fp, #-20]	; 0xffffffec
    588c:	str	r2, [fp, #-24]	; 0xffffffe8
    5890:	str	r3, [fp, #-28]	; 0xffffffe4
    5894:	ldr	r0, [fp, #-16]
    5898:	add	r1, sp, #24
    589c:	str	r0, [sp, #16]
    58a0:	mov	r0, r1
    58a4:	ldr	r1, [sp, #16]
    58a8:	movw	r2, #520	; 0x208
    58ac:	str	ip, [sp, #12]
    58b0:	str	lr, [sp, #8]
    58b4:	bl	0 <memcpy>
    58b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    58bc:	cmp	r0, #0
    58c0:	ble	5988 <read_partial_array+0x118>
    58c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    58c8:	add	r0, sp, #24
    58cc:	bl	0 <coda_cursor_goto_array_element_by_index>
    58d0:	cmp	r0, #0
    58d4:	beq	58e4 <read_partial_array+0x74>
    58d8:	mvn	r0, #0
    58dc:	str	r0, [fp, #-12]
    58e0:	b	5990 <read_partial_array+0x120>
    58e4:	movw	r0, #0
    58e8:	str	r0, [sp, #20]
    58ec:	ldr	r0, [sp, #20]
    58f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    58f4:	cmp	r0, r1
    58f8:	bge	5984 <read_partial_array+0x114>
    58fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    5900:	ldr	r1, [fp, #8]
    5904:	ldr	r2, [sp, #20]
    5908:	ldr	r3, [fp, #12]
    590c:	mul	r2, r2, r3
    5910:	add	r1, r1, r2
    5914:	add	r2, sp, #24
    5918:	str	r0, [sp, #4]
    591c:	mov	r0, r2
    5920:	ldr	r2, [sp, #4]
    5924:	blx	r2
    5928:	cmp	r0, #0
    592c:	beq	593c <read_partial_array+0xcc>
    5930:	mvn	r0, #0
    5934:	str	r0, [fp, #-12]
    5938:	b	5990 <read_partial_array+0x120>
    593c:	ldr	r0, [sp, #20]
    5940:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5944:	sub	r1, r1, #1
    5948:	cmp	r0, r1
    594c:	bge	5970 <read_partial_array+0x100>
    5950:	add	r0, sp, #24
    5954:	bl	0 <coda_cursor_goto_next_array_element>
    5958:	cmp	r0, #0
    595c:	beq	596c <read_partial_array+0xfc>
    5960:	mvn	r0, #0
    5964:	str	r0, [fp, #-12]
    5968:	b	5990 <read_partial_array+0x120>
    596c:	b	5970 <read_partial_array+0x100>
    5970:	b	5974 <read_partial_array+0x104>
    5974:	ldr	r0, [sp, #20]
    5978:	add	r0, r0, #1
    597c:	str	r0, [sp, #20]
    5980:	b	58ec <read_partial_array+0x7c>
    5984:	b	5988 <read_partial_array+0x118>
    5988:	movw	r0, #0
    598c:	str	r0, [fp, #-12]
    5990:	ldr	r0, [fp, #-12]
    5994:	sub	sp, fp, #8
    5998:	pop	{r4, r5, fp, pc}

0000599c <coda_ascii_cursor_read_uint8_partial_array>:
    599c:	push	{fp, lr}
    59a0:	mov	fp, sp
    59a4:	sub	sp, sp, #40	; 0x28
    59a8:	str	r0, [fp, #-4]
    59ac:	str	r1, [fp, #-8]
    59b0:	str	r2, [fp, #-12]
    59b4:	str	r3, [fp, #-16]
    59b8:	ldr	r0, [fp, #-4]
    59bc:	add	r1, r0, #8
    59c0:	ldr	r0, [r0, #4]
    59c4:	sub	r0, r0, #1
    59c8:	add	r0, r1, r0, lsl #4
    59cc:	ldr	r0, [r0]
    59d0:	ldr	r0, [r0]
    59d4:	cmp	r0, #100	; 0x64
    59d8:	bcs	59fc <coda_ascii_cursor_read_uint8_partial_array+0x60>
    59dc:	ldr	r0, [fp, #-4]
    59e0:	add	r1, r0, #8
    59e4:	ldr	r0, [r0, #4]
    59e8:	sub	r0, r0, #1
    59ec:	add	r0, r1, r0, lsl #4
    59f0:	ldr	r0, [r0]
    59f4:	str	r0, [sp, #16]
    59f8:	b	5a1c <coda_ascii_cursor_read_uint8_partial_array+0x80>
    59fc:	ldr	r0, [fp, #-4]
    5a00:	add	r1, r0, #8
    5a04:	ldr	r0, [r0, #4]
    5a08:	sub	r0, r0, #1
    5a0c:	add	r0, r1, r0, lsl #4
    5a10:	ldr	r0, [r0]
    5a14:	ldr	r0, [r0, #4]
    5a18:	str	r0, [sp, #16]
    5a1c:	ldr	r0, [sp, #16]
    5a20:	str	r0, [sp, #20]
    5a24:	ldr	r0, [sp, #20]
    5a28:	ldr	r0, [r0, #40]	; 0x28
    5a2c:	ldr	r0, [r0]
    5a30:	cmp	r0, #0
    5a34:	bne	5a3c <coda_ascii_cursor_read_uint8_partial_array+0xa0>
    5a38:	b	5a5c <coda_ascii_cursor_read_uint8_partial_array+0xc0>
    5a3c:	movw	r0, #0
    5a40:	movt	r0, #0
    5a44:	movw	r1, #0
    5a48:	movt	r1, #0
    5a4c:	movw	r2, #1693	; 0x69d
    5a50:	movw	r3, #0
    5a54:	movt	r3, #0
    5a58:	bl	0 <__assert_fail>
    5a5c:	ldr	r0, [fp, #-4]
    5a60:	ldr	r2, [fp, #-8]
    5a64:	ldr	r3, [fp, #-12]
    5a68:	ldr	r1, [fp, #-16]
    5a6c:	movw	ip, #0
    5a70:	movt	ip, #0
    5a74:	str	r1, [sp, #12]
    5a78:	mov	r1, ip
    5a7c:	ldr	ip, [sp, #12]
    5a80:	str	ip, [sp]
    5a84:	movw	lr, #1
    5a88:	str	lr, [sp, #4]
    5a8c:	bl	5870 <read_partial_array>
    5a90:	mov	sp, fp
    5a94:	pop	{fp, pc}

00005a98 <coda_ascii_cursor_read_int16_partial_array>:
    5a98:	push	{fp, lr}
    5a9c:	mov	fp, sp
    5aa0:	sub	sp, sp, #40	; 0x28
    5aa4:	str	r0, [fp, #-4]
    5aa8:	str	r1, [fp, #-8]
    5aac:	str	r2, [fp, #-12]
    5ab0:	str	r3, [fp, #-16]
    5ab4:	ldr	r0, [fp, #-4]
    5ab8:	add	r1, r0, #8
    5abc:	ldr	r0, [r0, #4]
    5ac0:	sub	r0, r0, #1
    5ac4:	add	r0, r1, r0, lsl #4
    5ac8:	ldr	r0, [r0]
    5acc:	ldr	r0, [r0]
    5ad0:	cmp	r0, #100	; 0x64
    5ad4:	bcs	5af8 <coda_ascii_cursor_read_int16_partial_array+0x60>
    5ad8:	ldr	r0, [fp, #-4]
    5adc:	add	r1, r0, #8
    5ae0:	ldr	r0, [r0, #4]
    5ae4:	sub	r0, r0, #1
    5ae8:	add	r0, r1, r0, lsl #4
    5aec:	ldr	r0, [r0]
    5af0:	str	r0, [sp, #16]
    5af4:	b	5b18 <coda_ascii_cursor_read_int16_partial_array+0x80>
    5af8:	ldr	r0, [fp, #-4]
    5afc:	add	r1, r0, #8
    5b00:	ldr	r0, [r0, #4]
    5b04:	sub	r0, r0, #1
    5b08:	add	r0, r1, r0, lsl #4
    5b0c:	ldr	r0, [r0]
    5b10:	ldr	r0, [r0, #4]
    5b14:	str	r0, [sp, #16]
    5b18:	ldr	r0, [sp, #16]
    5b1c:	str	r0, [sp, #20]
    5b20:	ldr	r0, [sp, #20]
    5b24:	ldr	r0, [r0, #40]	; 0x28
    5b28:	ldr	r0, [r0]
    5b2c:	cmp	r0, #0
    5b30:	bne	5b38 <coda_ascii_cursor_read_int16_partial_array+0xa0>
    5b34:	b	5b58 <coda_ascii_cursor_read_int16_partial_array+0xc0>
    5b38:	movw	r0, #0
    5b3c:	movt	r0, #0
    5b40:	movw	r1, #0
    5b44:	movt	r1, #0
    5b48:	movw	r2, #1702	; 0x6a6
    5b4c:	movw	r3, #0
    5b50:	movt	r3, #0
    5b54:	bl	0 <__assert_fail>
    5b58:	movw	r0, #0
    5b5c:	movt	r0, #0
    5b60:	ldr	r1, [fp, #-4]
    5b64:	ldr	r2, [fp, #-8]
    5b68:	ldr	r3, [fp, #-12]
    5b6c:	ldr	ip, [fp, #-16]
    5b70:	str	r0, [sp, #12]
    5b74:	mov	r0, r1
    5b78:	ldr	r1, [sp, #12]
    5b7c:	str	ip, [sp]
    5b80:	movw	ip, #2
    5b84:	str	ip, [sp, #4]
    5b88:	bl	5870 <read_partial_array>
    5b8c:	mov	sp, fp
    5b90:	pop	{fp, pc}

00005b94 <coda_ascii_cursor_read_uint16_partial_array>:
    5b94:	push	{fp, lr}
    5b98:	mov	fp, sp
    5b9c:	sub	sp, sp, #40	; 0x28
    5ba0:	str	r0, [fp, #-4]
    5ba4:	str	r1, [fp, #-8]
    5ba8:	str	r2, [fp, #-12]
    5bac:	str	r3, [fp, #-16]
    5bb0:	ldr	r0, [fp, #-4]
    5bb4:	add	r1, r0, #8
    5bb8:	ldr	r0, [r0, #4]
    5bbc:	sub	r0, r0, #1
    5bc0:	add	r0, r1, r0, lsl #4
    5bc4:	ldr	r0, [r0]
    5bc8:	ldr	r0, [r0]
    5bcc:	cmp	r0, #100	; 0x64
    5bd0:	bcs	5bf4 <coda_ascii_cursor_read_uint16_partial_array+0x60>
    5bd4:	ldr	r0, [fp, #-4]
    5bd8:	add	r1, r0, #8
    5bdc:	ldr	r0, [r0, #4]
    5be0:	sub	r0, r0, #1
    5be4:	add	r0, r1, r0, lsl #4
    5be8:	ldr	r0, [r0]
    5bec:	str	r0, [sp, #16]
    5bf0:	b	5c14 <coda_ascii_cursor_read_uint16_partial_array+0x80>
    5bf4:	ldr	r0, [fp, #-4]
    5bf8:	add	r1, r0, #8
    5bfc:	ldr	r0, [r0, #4]
    5c00:	sub	r0, r0, #1
    5c04:	add	r0, r1, r0, lsl #4
    5c08:	ldr	r0, [r0]
    5c0c:	ldr	r0, [r0, #4]
    5c10:	str	r0, [sp, #16]
    5c14:	ldr	r0, [sp, #16]
    5c18:	str	r0, [sp, #20]
    5c1c:	ldr	r0, [sp, #20]
    5c20:	ldr	r0, [r0, #40]	; 0x28
    5c24:	ldr	r0, [r0]
    5c28:	cmp	r0, #0
    5c2c:	bne	5c34 <coda_ascii_cursor_read_uint16_partial_array+0xa0>
    5c30:	b	5c54 <coda_ascii_cursor_read_uint16_partial_array+0xc0>
    5c34:	movw	r0, #0
    5c38:	movt	r0, #0
    5c3c:	movw	r1, #0
    5c40:	movt	r1, #0
    5c44:	movw	r2, #1711	; 0x6af
    5c48:	movw	r3, #0
    5c4c:	movt	r3, #0
    5c50:	bl	0 <__assert_fail>
    5c54:	movw	r0, #0
    5c58:	movt	r0, #0
    5c5c:	ldr	r1, [fp, #-4]
    5c60:	ldr	r2, [fp, #-8]
    5c64:	ldr	r3, [fp, #-12]
    5c68:	ldr	ip, [fp, #-16]
    5c6c:	str	r0, [sp, #12]
    5c70:	mov	r0, r1
    5c74:	ldr	r1, [sp, #12]
    5c78:	str	ip, [sp]
    5c7c:	movw	ip, #2
    5c80:	str	ip, [sp, #4]
    5c84:	bl	5870 <read_partial_array>
    5c88:	mov	sp, fp
    5c8c:	pop	{fp, pc}

00005c90 <coda_ascii_cursor_read_int32_partial_array>:
    5c90:	push	{fp, lr}
    5c94:	mov	fp, sp
    5c98:	sub	sp, sp, #40	; 0x28
    5c9c:	str	r0, [fp, #-4]
    5ca0:	str	r1, [fp, #-8]
    5ca4:	str	r2, [fp, #-12]
    5ca8:	str	r3, [fp, #-16]
    5cac:	ldr	r0, [fp, #-4]
    5cb0:	add	r1, r0, #8
    5cb4:	ldr	r0, [r0, #4]
    5cb8:	sub	r0, r0, #1
    5cbc:	add	r0, r1, r0, lsl #4
    5cc0:	ldr	r0, [r0]
    5cc4:	ldr	r0, [r0]
    5cc8:	cmp	r0, #100	; 0x64
    5ccc:	bcs	5cf0 <coda_ascii_cursor_read_int32_partial_array+0x60>
    5cd0:	ldr	r0, [fp, #-4]
    5cd4:	add	r1, r0, #8
    5cd8:	ldr	r0, [r0, #4]
    5cdc:	sub	r0, r0, #1
    5ce0:	add	r0, r1, r0, lsl #4
    5ce4:	ldr	r0, [r0]
    5ce8:	str	r0, [sp, #16]
    5cec:	b	5d10 <coda_ascii_cursor_read_int32_partial_array+0x80>
    5cf0:	ldr	r0, [fp, #-4]
    5cf4:	add	r1, r0, #8
    5cf8:	ldr	r0, [r0, #4]
    5cfc:	sub	r0, r0, #1
    5d00:	add	r0, r1, r0, lsl #4
    5d04:	ldr	r0, [r0]
    5d08:	ldr	r0, [r0, #4]
    5d0c:	str	r0, [sp, #16]
    5d10:	ldr	r0, [sp, #16]
    5d14:	str	r0, [sp, #20]
    5d18:	ldr	r0, [sp, #20]
    5d1c:	ldr	r0, [r0, #40]	; 0x28
    5d20:	ldr	r0, [r0]
    5d24:	cmp	r0, #0
    5d28:	bne	5d30 <coda_ascii_cursor_read_int32_partial_array+0xa0>
    5d2c:	b	5d50 <coda_ascii_cursor_read_int32_partial_array+0xc0>
    5d30:	movw	r0, #0
    5d34:	movt	r0, #0
    5d38:	movw	r1, #0
    5d3c:	movt	r1, #0
    5d40:	movw	r2, #1720	; 0x6b8
    5d44:	movw	r3, #0
    5d48:	movt	r3, #0
    5d4c:	bl	0 <__assert_fail>
    5d50:	movw	r0, #0
    5d54:	movt	r0, #0
    5d58:	ldr	r1, [fp, #-4]
    5d5c:	ldr	r2, [fp, #-8]
    5d60:	ldr	r3, [fp, #-12]
    5d64:	ldr	ip, [fp, #-16]
    5d68:	str	r0, [sp, #12]
    5d6c:	mov	r0, r1
    5d70:	ldr	r1, [sp, #12]
    5d74:	str	ip, [sp]
    5d78:	movw	ip, #4
    5d7c:	str	ip, [sp, #4]
    5d80:	bl	5870 <read_partial_array>
    5d84:	mov	sp, fp
    5d88:	pop	{fp, pc}

00005d8c <coda_ascii_cursor_read_uint32_partial_array>:
    5d8c:	push	{fp, lr}
    5d90:	mov	fp, sp
    5d94:	sub	sp, sp, #40	; 0x28
    5d98:	str	r0, [fp, #-4]
    5d9c:	str	r1, [fp, #-8]
    5da0:	str	r2, [fp, #-12]
    5da4:	str	r3, [fp, #-16]
    5da8:	ldr	r0, [fp, #-4]
    5dac:	add	r1, r0, #8
    5db0:	ldr	r0, [r0, #4]
    5db4:	sub	r0, r0, #1
    5db8:	add	r0, r1, r0, lsl #4
    5dbc:	ldr	r0, [r0]
    5dc0:	ldr	r0, [r0]
    5dc4:	cmp	r0, #100	; 0x64
    5dc8:	bcs	5dec <coda_ascii_cursor_read_uint32_partial_array+0x60>
    5dcc:	ldr	r0, [fp, #-4]
    5dd0:	add	r1, r0, #8
    5dd4:	ldr	r0, [r0, #4]
    5dd8:	sub	r0, r0, #1
    5ddc:	add	r0, r1, r0, lsl #4
    5de0:	ldr	r0, [r0]
    5de4:	str	r0, [sp, #16]
    5de8:	b	5e0c <coda_ascii_cursor_read_uint32_partial_array+0x80>
    5dec:	ldr	r0, [fp, #-4]
    5df0:	add	r1, r0, #8
    5df4:	ldr	r0, [r0, #4]
    5df8:	sub	r0, r0, #1
    5dfc:	add	r0, r1, r0, lsl #4
    5e00:	ldr	r0, [r0]
    5e04:	ldr	r0, [r0, #4]
    5e08:	str	r0, [sp, #16]
    5e0c:	ldr	r0, [sp, #16]
    5e10:	str	r0, [sp, #20]
    5e14:	ldr	r0, [sp, #20]
    5e18:	ldr	r0, [r0, #40]	; 0x28
    5e1c:	ldr	r0, [r0]
    5e20:	cmp	r0, #0
    5e24:	bne	5e2c <coda_ascii_cursor_read_uint32_partial_array+0xa0>
    5e28:	b	5e4c <coda_ascii_cursor_read_uint32_partial_array+0xc0>
    5e2c:	movw	r0, #0
    5e30:	movt	r0, #0
    5e34:	movw	r1, #0
    5e38:	movt	r1, #0
    5e3c:	movw	r2, #1729	; 0x6c1
    5e40:	movw	r3, #0
    5e44:	movt	r3, #0
    5e48:	bl	0 <__assert_fail>
    5e4c:	movw	r0, #0
    5e50:	movt	r0, #0
    5e54:	ldr	r1, [fp, #-4]
    5e58:	ldr	r2, [fp, #-8]
    5e5c:	ldr	r3, [fp, #-12]
    5e60:	ldr	ip, [fp, #-16]
    5e64:	str	r0, [sp, #12]
    5e68:	mov	r0, r1
    5e6c:	ldr	r1, [sp, #12]
    5e70:	str	ip, [sp]
    5e74:	movw	ip, #4
    5e78:	str	ip, [sp, #4]
    5e7c:	bl	5870 <read_partial_array>
    5e80:	mov	sp, fp
    5e84:	pop	{fp, pc}

00005e88 <coda_ascii_cursor_read_int64_partial_array>:
    5e88:	push	{fp, lr}
    5e8c:	mov	fp, sp
    5e90:	sub	sp, sp, #40	; 0x28
    5e94:	str	r0, [fp, #-4]
    5e98:	str	r1, [fp, #-8]
    5e9c:	str	r2, [fp, #-12]
    5ea0:	str	r3, [fp, #-16]
    5ea4:	ldr	r0, [fp, #-4]
    5ea8:	add	r1, r0, #8
    5eac:	ldr	r0, [r0, #4]
    5eb0:	sub	r0, r0, #1
    5eb4:	add	r0, r1, r0, lsl #4
    5eb8:	ldr	r0, [r0]
    5ebc:	ldr	r0, [r0]
    5ec0:	cmp	r0, #100	; 0x64
    5ec4:	bcs	5ee8 <coda_ascii_cursor_read_int64_partial_array+0x60>
    5ec8:	ldr	r0, [fp, #-4]
    5ecc:	add	r1, r0, #8
    5ed0:	ldr	r0, [r0, #4]
    5ed4:	sub	r0, r0, #1
    5ed8:	add	r0, r1, r0, lsl #4
    5edc:	ldr	r0, [r0]
    5ee0:	str	r0, [sp, #16]
    5ee4:	b	5f08 <coda_ascii_cursor_read_int64_partial_array+0x80>
    5ee8:	ldr	r0, [fp, #-4]
    5eec:	add	r1, r0, #8
    5ef0:	ldr	r0, [r0, #4]
    5ef4:	sub	r0, r0, #1
    5ef8:	add	r0, r1, r0, lsl #4
    5efc:	ldr	r0, [r0]
    5f00:	ldr	r0, [r0, #4]
    5f04:	str	r0, [sp, #16]
    5f08:	ldr	r0, [sp, #16]
    5f0c:	str	r0, [sp, #20]
    5f10:	ldr	r0, [sp, #20]
    5f14:	ldr	r0, [r0, #40]	; 0x28
    5f18:	ldr	r0, [r0]
    5f1c:	cmp	r0, #0
    5f20:	bne	5f28 <coda_ascii_cursor_read_int64_partial_array+0xa0>
    5f24:	b	5f48 <coda_ascii_cursor_read_int64_partial_array+0xc0>
    5f28:	movw	r0, #0
    5f2c:	movt	r0, #0
    5f30:	movw	r1, #0
    5f34:	movt	r1, #0
    5f38:	movw	r2, #1738	; 0x6ca
    5f3c:	movw	r3, #0
    5f40:	movt	r3, #0
    5f44:	bl	0 <__assert_fail>
    5f48:	movw	r0, #0
    5f4c:	movt	r0, #0
    5f50:	ldr	r1, [fp, #-4]
    5f54:	ldr	r2, [fp, #-8]
    5f58:	ldr	r3, [fp, #-12]
    5f5c:	ldr	ip, [fp, #-16]
    5f60:	str	r0, [sp, #12]
    5f64:	mov	r0, r1
    5f68:	ldr	r1, [sp, #12]
    5f6c:	str	ip, [sp]
    5f70:	movw	ip, #8
    5f74:	str	ip, [sp, #4]
    5f78:	bl	5870 <read_partial_array>
    5f7c:	mov	sp, fp
    5f80:	pop	{fp, pc}

00005f84 <coda_ascii_cursor_read_uint64_partial_array>:
    5f84:	push	{fp, lr}
    5f88:	mov	fp, sp
    5f8c:	sub	sp, sp, #40	; 0x28
    5f90:	str	r0, [fp, #-4]
    5f94:	str	r1, [fp, #-8]
    5f98:	str	r2, [fp, #-12]
    5f9c:	str	r3, [fp, #-16]
    5fa0:	ldr	r0, [fp, #-4]
    5fa4:	add	r1, r0, #8
    5fa8:	ldr	r0, [r0, #4]
    5fac:	sub	r0, r0, #1
    5fb0:	add	r0, r1, r0, lsl #4
    5fb4:	ldr	r0, [r0]
    5fb8:	ldr	r0, [r0]
    5fbc:	cmp	r0, #100	; 0x64
    5fc0:	bcs	5fe4 <coda_ascii_cursor_read_uint64_partial_array+0x60>
    5fc4:	ldr	r0, [fp, #-4]
    5fc8:	add	r1, r0, #8
    5fcc:	ldr	r0, [r0, #4]
    5fd0:	sub	r0, r0, #1
    5fd4:	add	r0, r1, r0, lsl #4
    5fd8:	ldr	r0, [r0]
    5fdc:	str	r0, [sp, #16]
    5fe0:	b	6004 <coda_ascii_cursor_read_uint64_partial_array+0x80>
    5fe4:	ldr	r0, [fp, #-4]
    5fe8:	add	r1, r0, #8
    5fec:	ldr	r0, [r0, #4]
    5ff0:	sub	r0, r0, #1
    5ff4:	add	r0, r1, r0, lsl #4
    5ff8:	ldr	r0, [r0]
    5ffc:	ldr	r0, [r0, #4]
    6000:	str	r0, [sp, #16]
    6004:	ldr	r0, [sp, #16]
    6008:	str	r0, [sp, #20]
    600c:	ldr	r0, [sp, #20]
    6010:	ldr	r0, [r0, #40]	; 0x28
    6014:	ldr	r0, [r0]
    6018:	cmp	r0, #0
    601c:	bne	6024 <coda_ascii_cursor_read_uint64_partial_array+0xa0>
    6020:	b	6044 <coda_ascii_cursor_read_uint64_partial_array+0xc0>
    6024:	movw	r0, #0
    6028:	movt	r0, #0
    602c:	movw	r1, #0
    6030:	movt	r1, #0
    6034:	movw	r2, #1747	; 0x6d3
    6038:	movw	r3, #0
    603c:	movt	r3, #0
    6040:	bl	0 <__assert_fail>
    6044:	movw	r0, #0
    6048:	movt	r0, #0
    604c:	ldr	r1, [fp, #-4]
    6050:	ldr	r2, [fp, #-8]
    6054:	ldr	r3, [fp, #-12]
    6058:	ldr	ip, [fp, #-16]
    605c:	str	r0, [sp, #12]
    6060:	mov	r0, r1
    6064:	ldr	r1, [sp, #12]
    6068:	str	ip, [sp]
    606c:	movw	ip, #8
    6070:	str	ip, [sp, #4]
    6074:	bl	5870 <read_partial_array>
    6078:	mov	sp, fp
    607c:	pop	{fp, pc}

00006080 <coda_ascii_cursor_read_float_partial_array>:
    6080:	push	{fp, lr}
    6084:	mov	fp, sp
    6088:	sub	sp, sp, #40	; 0x28
    608c:	str	r0, [fp, #-4]
    6090:	str	r1, [fp, #-8]
    6094:	str	r2, [fp, #-12]
    6098:	str	r3, [fp, #-16]
    609c:	ldr	r0, [fp, #-4]
    60a0:	add	r1, r0, #8
    60a4:	ldr	r0, [r0, #4]
    60a8:	sub	r0, r0, #1
    60ac:	add	r0, r1, r0, lsl #4
    60b0:	ldr	r0, [r0]
    60b4:	ldr	r0, [r0]
    60b8:	cmp	r0, #100	; 0x64
    60bc:	bcs	60e0 <coda_ascii_cursor_read_float_partial_array+0x60>
    60c0:	ldr	r0, [fp, #-4]
    60c4:	add	r1, r0, #8
    60c8:	ldr	r0, [r0, #4]
    60cc:	sub	r0, r0, #1
    60d0:	add	r0, r1, r0, lsl #4
    60d4:	ldr	r0, [r0]
    60d8:	str	r0, [sp, #16]
    60dc:	b	6100 <coda_ascii_cursor_read_float_partial_array+0x80>
    60e0:	ldr	r0, [fp, #-4]
    60e4:	add	r1, r0, #8
    60e8:	ldr	r0, [r0, #4]
    60ec:	sub	r0, r0, #1
    60f0:	add	r0, r1, r0, lsl #4
    60f4:	ldr	r0, [r0]
    60f8:	ldr	r0, [r0, #4]
    60fc:	str	r0, [sp, #16]
    6100:	ldr	r0, [sp, #16]
    6104:	str	r0, [sp, #20]
    6108:	ldr	r0, [sp, #20]
    610c:	ldr	r0, [r0, #40]	; 0x28
    6110:	ldr	r0, [r0]
    6114:	cmp	r0, #0
    6118:	bne	6120 <coda_ascii_cursor_read_float_partial_array+0xa0>
    611c:	b	6140 <coda_ascii_cursor_read_float_partial_array+0xc0>
    6120:	movw	r0, #0
    6124:	movt	r0, #0
    6128:	movw	r1, #0
    612c:	movt	r1, #0
    6130:	movw	r2, #1756	; 0x6dc
    6134:	movw	r3, #0
    6138:	movt	r3, #0
    613c:	bl	0 <__assert_fail>
    6140:	movw	r0, #0
    6144:	movt	r0, #0
    6148:	ldr	r1, [fp, #-4]
    614c:	ldr	r2, [fp, #-8]
    6150:	ldr	r3, [fp, #-12]
    6154:	ldr	ip, [fp, #-16]
    6158:	str	r0, [sp, #12]
    615c:	mov	r0, r1
    6160:	ldr	r1, [sp, #12]
    6164:	str	ip, [sp]
    6168:	movw	ip, #4
    616c:	str	ip, [sp, #4]
    6170:	bl	5870 <read_partial_array>
    6174:	mov	sp, fp
    6178:	pop	{fp, pc}

0000617c <coda_ascii_cursor_read_double_partial_array>:
    617c:	push	{fp, lr}
    6180:	mov	fp, sp
    6184:	sub	sp, sp, #40	; 0x28
    6188:	str	r0, [fp, #-4]
    618c:	str	r1, [fp, #-8]
    6190:	str	r2, [fp, #-12]
    6194:	str	r3, [fp, #-16]
    6198:	ldr	r0, [fp, #-4]
    619c:	add	r1, r0, #8
    61a0:	ldr	r0, [r0, #4]
    61a4:	sub	r0, r0, #1
    61a8:	add	r0, r1, r0, lsl #4
    61ac:	ldr	r0, [r0]
    61b0:	ldr	r0, [r0]
    61b4:	cmp	r0, #100	; 0x64
    61b8:	bcs	61dc <coda_ascii_cursor_read_double_partial_array+0x60>
    61bc:	ldr	r0, [fp, #-4]
    61c0:	add	r1, r0, #8
    61c4:	ldr	r0, [r0, #4]
    61c8:	sub	r0, r0, #1
    61cc:	add	r0, r1, r0, lsl #4
    61d0:	ldr	r0, [r0]
    61d4:	str	r0, [sp, #16]
    61d8:	b	61fc <coda_ascii_cursor_read_double_partial_array+0x80>
    61dc:	ldr	r0, [fp, #-4]
    61e0:	add	r1, r0, #8
    61e4:	ldr	r0, [r0, #4]
    61e8:	sub	r0, r0, #1
    61ec:	add	r0, r1, r0, lsl #4
    61f0:	ldr	r0, [r0]
    61f4:	ldr	r0, [r0, #4]
    61f8:	str	r0, [sp, #16]
    61fc:	ldr	r0, [sp, #16]
    6200:	str	r0, [sp, #20]
    6204:	ldr	r0, [sp, #20]
    6208:	ldr	r0, [r0, #40]	; 0x28
    620c:	ldr	r0, [r0]
    6210:	cmp	r0, #0
    6214:	bne	621c <coda_ascii_cursor_read_double_partial_array+0xa0>
    6218:	b	623c <coda_ascii_cursor_read_double_partial_array+0xc0>
    621c:	movw	r0, #0
    6220:	movt	r0, #0
    6224:	movw	r1, #0
    6228:	movt	r1, #0
    622c:	movw	r2, #1765	; 0x6e5
    6230:	movw	r3, #0
    6234:	movt	r3, #0
    6238:	bl	0 <__assert_fail>
    623c:	movw	r0, #0
    6240:	movt	r0, #0
    6244:	ldr	r1, [fp, #-4]
    6248:	ldr	r2, [fp, #-8]
    624c:	ldr	r3, [fp, #-12]
    6250:	ldr	ip, [fp, #-16]
    6254:	str	r0, [sp, #12]
    6258:	mov	r0, r1
    625c:	ldr	r1, [sp, #12]
    6260:	str	ip, [sp]
    6264:	movw	ip, #8
    6268:	str	ip, [sp, #4]
    626c:	bl	5870 <read_partial_array>
    6270:	mov	sp, fp
    6274:	pop	{fp, pc}

00006278 <coda_ascii_cursor_read_char_partial_array>:
    6278:	push	{fp, lr}
    627c:	mov	fp, sp
    6280:	sub	sp, sp, #40	; 0x28
    6284:	str	r0, [fp, #-4]
    6288:	str	r1, [fp, #-8]
    628c:	str	r2, [fp, #-12]
    6290:	str	r3, [fp, #-16]
    6294:	ldr	r0, [fp, #-4]
    6298:	add	r1, r0, #8
    629c:	ldr	r0, [r0, #4]
    62a0:	sub	r0, r0, #1
    62a4:	add	r0, r1, r0, lsl #4
    62a8:	ldr	r0, [r0]
    62ac:	ldr	r0, [r0]
    62b0:	cmp	r0, #100	; 0x64
    62b4:	bcs	62d8 <coda_ascii_cursor_read_char_partial_array+0x60>
    62b8:	ldr	r0, [fp, #-4]
    62bc:	add	r1, r0, #8
    62c0:	ldr	r0, [r0, #4]
    62c4:	sub	r0, r0, #1
    62c8:	add	r0, r1, r0, lsl #4
    62cc:	ldr	r0, [r0]
    62d0:	str	r0, [sp, #16]
    62d4:	b	62f8 <coda_ascii_cursor_read_char_partial_array+0x80>
    62d8:	ldr	r0, [fp, #-4]
    62dc:	add	r1, r0, #8
    62e0:	ldr	r0, [r0, #4]
    62e4:	sub	r0, r0, #1
    62e8:	add	r0, r1, r0, lsl #4
    62ec:	ldr	r0, [r0]
    62f0:	ldr	r0, [r0, #4]
    62f4:	str	r0, [sp, #16]
    62f8:	ldr	r0, [sp, #16]
    62fc:	str	r0, [sp, #20]
    6300:	ldr	r0, [sp, #20]
    6304:	ldr	r0, [r0, #40]	; 0x28
    6308:	ldr	r0, [r0]
    630c:	cmp	r0, #0
    6310:	bne	6318 <coda_ascii_cursor_read_char_partial_array+0xa0>
    6314:	b	6338 <coda_ascii_cursor_read_char_partial_array+0xc0>
    6318:	movw	r0, #0
    631c:	movt	r0, #0
    6320:	movw	r1, #0
    6324:	movt	r1, #0
    6328:	movw	r2, #1774	; 0x6ee
    632c:	movw	r3, #0
    6330:	movt	r3, #0
    6334:	bl	0 <__assert_fail>
    6338:	ldr	r0, [fp, #-4]
    633c:	ldr	r2, [fp, #-8]
    6340:	ldr	r3, [fp, #-12]
    6344:	ldr	r1, [fp, #-16]
    6348:	movw	ip, #0
    634c:	movt	ip, #0
    6350:	str	r1, [sp, #12]
    6354:	mov	r1, ip
    6358:	ldr	ip, [sp, #12]
    635c:	str	ip, [sp]
    6360:	movw	lr, #1
    6364:	str	lr, [sp, #4]
    6368:	bl	5870 <read_partial_array>
    636c:	mov	sp, fp
    6370:	pop	{fp, pc}
