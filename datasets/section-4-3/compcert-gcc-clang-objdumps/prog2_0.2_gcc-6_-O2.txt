
../compcert-repos/prog2/0.2:     file format elf32-littlearm


Disassembly of section .init:

000105c4 <.init>:
   105c4:	push	{r3, lr}
   105c8:	bl	107a0 <_start@@Base+0x3c>
   105cc:	pop	{r3, pc}

Disassembly of section .plt:

000105d0 <printf@plt-0x14>:
   105d0:	push	{lr}		; (str lr, [sp, #-4]!)
   105d4:	ldr	lr, [pc, #4]	; 105e0 <printf@plt-0x4>
   105d8:	add	lr, pc, lr
   105dc:	ldr	pc, [lr, #8]!
   105e0:	andeq	r0, r1, r0, lsr #20

000105e4 <printf@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2592]!	; 0xa20

000105f0 <puts@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2584]!	; 0xa18

000105fc <__libc_start_main@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2576]!	; 0xa10

00010608 <__gmon_start__@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2568]!	; 0xa08

00010614 <putchar@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2560]!	; 0xa00

00010620 <__isoc99_scanf@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2552]!	; 0x9f8

0001062c <abort@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2544]!	; 0x9f0

Disassembly of section .text:

00010638 <main@@Base>:
   10638:	push	{r4, r5, r6, r7, lr}
   1063c:	sub	sp, sp, #44	; 0x2c
   10640:	mov	r4, #0
   10644:	ldr	r0, [pc, #256]	; 1074c <main@@Base+0x114>
   10648:	str	r4, [sp, #4]
   1064c:	str	r4, [sp]
   10650:	str	r4, [sp, #8]
   10654:	str	r4, [sp, #12]
   10658:	str	r4, [sp, #16]
   1065c:	str	r4, [sp, #20]
   10660:	str	r4, [sp, #24]
   10664:	str	r4, [sp, #28]
   10668:	str	r4, [sp, #32]
   1066c:	str	r4, [sp, #36]	; 0x24
   10670:	bl	105f0 <puts@plt>
   10674:	ldr	r7, [pc, #212]	; 10750 <main@@Base+0x118>
   10678:	ldr	r6, [pc, #212]	; 10754 <main@@Base+0x11c>
   1067c:	mov	r5, sp
   10680:	add	r4, r4, #1
   10684:	mov	r1, r4
   10688:	mov	r0, r7
   1068c:	bl	105e4 <printf@plt>
   10690:	mov	r1, r5
   10694:	mov	r0, r6
   10698:	bl	10620 <__isoc99_scanf@plt>
   1069c:	cmp	r4, #5
   106a0:	add	r5, r5, #4
   106a4:	bne	10680 <main@@Base+0x48>
   106a8:	ldr	r0, [pc, #168]	; 10758 <main@@Base+0x120>
   106ac:	bl	105f0 <puts@plt>
   106b0:	ldr	r7, [pc, #152]	; 10750 <main@@Base+0x118>
   106b4:	ldr	r6, [pc, #152]	; 10754 <main@@Base+0x11c>
   106b8:	add	r5, sp, #20
   106bc:	mov	r4, #0
   106c0:	add	r4, r4, #1
   106c4:	mov	r1, r4
   106c8:	mov	r0, r7
   106cc:	bl	105e4 <printf@plt>
   106d0:	mov	r1, r5
   106d4:	mov	r0, r6
   106d8:	bl	10620 <__isoc99_scanf@plt>
   106dc:	cmp	r4, #5
   106e0:	add	r5, r5, #4
   106e4:	bne	106c0 <main@@Base+0x88>
   106e8:	mov	r0, #10
   106ec:	bl	10614 <putchar@plt>
   106f0:	ldr	r0, [pc, #100]	; 1075c <main@@Base+0x124>
   106f4:	bl	105e4 <printf@plt>
   106f8:	ldr	r7, [pc, #96]	; 10760 <main@@Base+0x128>
   106fc:	mov	r5, #0
   10700:	add	r6, sp, #40	; 0x28
   10704:	add	r4, sp, #20
   10708:	ldr	r1, [sp, r5, lsl #2]
   1070c:	ldr	r3, [r4], #4
   10710:	cmp	r1, r3
   10714:	beq	10740 <main@@Base+0x108>
   10718:	cmp	r6, r4
   1071c:	bne	10708 <main@@Base+0xd0>
   10720:	add	r5, r5, #1
   10724:	cmp	r5, #5
   10728:	bne	10700 <main@@Base+0xc8>
   1072c:	mov	r0, #10
   10730:	bl	10614 <putchar@plt>
   10734:	mov	r0, #0
   10738:	add	sp, sp, #44	; 0x2c
   1073c:	pop	{r4, r5, r6, r7, pc}
   10740:	mov	r0, r7
   10744:	bl	105e4 <printf@plt>
   10748:	b	10718 <main@@Base+0xe0>
   1074c:	strdeq	r0, [r1], -ip
   10750:	andeq	r0, r1, r8, lsl #18
   10754:	andeq	r0, r1, r0, lsr #18
   10758:	andeq	r0, r1, r4, lsr #18
   1075c:	andeq	r0, r1, r0, lsr r9
   10760:	andeq	r0, r1, r8, lsr r9

00010764 <_start@@Base>:
   10764:	mov	fp, #0
   10768:	mov	lr, #0
   1076c:	pop	{r1}		; (ldr r1, [sp], #4)
   10770:	mov	r2, sp
   10774:	push	{r2}		; (str r2, [sp, #-4]!)
   10778:	push	{r0}		; (str r0, [sp, #-4]!)
   1077c:	ldr	ip, [pc, #16]	; 10794 <_start@@Base+0x30>
   10780:	push	{ip}		; (str ip, [sp, #-4]!)
   10784:	ldr	r0, [pc, #12]	; 10798 <_start@@Base+0x34>
   10788:	ldr	r3, [pc, #12]	; 1079c <_start@@Base+0x38>
   1078c:	bl	105fc <__libc_start_main@plt>
   10790:	bl	1062c <abort@plt>
   10794:	andeq	r0, r1, ip, ror #17
   10798:	andeq	r0, r1, r8, lsr r6
   1079c:	andeq	r0, r1, ip, lsl #17
   107a0:	ldr	r3, [pc, #20]	; 107bc <_start@@Base+0x58>
   107a4:	ldr	r2, [pc, #20]	; 107c0 <_start@@Base+0x5c>
   107a8:	add	r3, pc, r3
   107ac:	ldr	r2, [r3, r2]
   107b0:	cmp	r2, #0
   107b4:	bxeq	lr
   107b8:	b	10608 <__gmon_start__@plt>
   107bc:	andeq	r0, r1, r0, asr r8
   107c0:	andeq	r0, r0, r8, lsr #32
   107c4:	ldr	r3, [pc, #28]	; 107e8 <_start@@Base+0x84>
   107c8:	ldr	r0, [pc, #28]	; 107ec <_start@@Base+0x88>
   107cc:	sub	r3, r3, r0
   107d0:	cmp	r3, #6
   107d4:	bxls	lr
   107d8:	ldr	r3, [pc, #16]	; 107f0 <_start@@Base+0x8c>
   107dc:	cmp	r3, #0
   107e0:	bxeq	lr
   107e4:	bx	r3
   107e8:	andeq	r1, r2, r7, lsr r0
   107ec:	andeq	r1, r2, r4, lsr r0
   107f0:	andeq	r0, r0, r0
   107f4:	ldr	r1, [pc, #36]	; 10820 <_start@@Base+0xbc>
   107f8:	ldr	r0, [pc, #36]	; 10824 <_start@@Base+0xc0>
   107fc:	sub	r1, r1, r0
   10800:	asr	r1, r1, #2
   10804:	add	r1, r1, r1, lsr #31
   10808:	asrs	r1, r1, #1
   1080c:	bxeq	lr
   10810:	ldr	r3, [pc, #16]	; 10828 <_start@@Base+0xc4>
   10814:	cmp	r3, #0
   10818:	bxeq	lr
   1081c:	bx	r3
   10820:	andeq	r1, r2, r4, lsr r0
   10824:	andeq	r1, r2, r4, lsr r0
   10828:	andeq	r0, r0, r0
   1082c:	push	{r4, lr}
   10830:	ldr	r4, [pc, #24]	; 10850 <_start@@Base+0xec>
   10834:	ldrb	r3, [r4]
   10838:	cmp	r3, #0
   1083c:	popne	{r4, pc}
   10840:	bl	107c4 <_start@@Base+0x60>
   10844:	mov	r3, #1
   10848:	strb	r3, [r4]
   1084c:	pop	{r4, pc}
   10850:	andeq	r1, r2, r4, lsr r0
   10854:	ldr	r0, [pc, #40]	; 10884 <_start@@Base+0x120>
   10858:	ldr	r3, [r0]
   1085c:	cmp	r3, #0
   10860:	bne	10868 <_start@@Base+0x104>
   10864:	b	107f4 <_start@@Base+0x90>
   10868:	ldr	r3, [pc, #24]	; 10888 <_start@@Base+0x124>
   1086c:	cmp	r3, #0
   10870:	beq	10864 <_start@@Base+0x100>
   10874:	push	{r4, lr}
   10878:	blx	r3
   1087c:	pop	{r4, lr}
   10880:	b	107f4 <_start@@Base+0x90>
   10884:	andeq	r0, r2, r4, lsl pc
   10888:	andeq	r0, r0, r0

0001088c <__libc_csu_init@@Base>:
   1088c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10890:	mov	r7, r0
   10894:	ldr	r6, [pc, #72]	; 108e4 <__libc_csu_init@@Base+0x58>
   10898:	ldr	r5, [pc, #72]	; 108e8 <__libc_csu_init@@Base+0x5c>
   1089c:	add	r6, pc, r6
   108a0:	add	r5, pc, r5
   108a4:	sub	r6, r6, r5
   108a8:	mov	r8, r1
   108ac:	mov	r9, r2
   108b0:	bl	105c4 <printf@plt-0x20>
   108b4:	asrs	r6, r6, #2
   108b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108bc:	mov	r4, #0
   108c0:	add	r4, r4, #1
   108c4:	ldr	r3, [r5], #4
   108c8:	mov	r2, r9
   108cc:	mov	r1, r8
   108d0:	mov	r0, r7
   108d4:	blx	r3
   108d8:	cmp	r6, r4
   108dc:	bne	108c0 <__libc_csu_init@@Base+0x34>
   108e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108e4:	andeq	r0, r1, ip, ror #12
   108e8:	andeq	r0, r1, r4, ror #12

000108ec <__libc_csu_fini@@Base>:
   108ec:	bx	lr

Disassembly of section .fini:

000108f0 <.fini>:
   108f0:	push	{r3, lr}
   108f4:	pop	{r3, pc}
