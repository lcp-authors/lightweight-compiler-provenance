
../compcert-repos/prog2/CMakeFiles/0.8.dir/Aula00_Conceitos_base/08.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <lerpontuacoes>:
   0:	strd	r4, [sp, #-20]!	; 0xffffffec
   4:	mov	r5, r0
   8:	mov	r4, r1
   c:	strd	r6, [sp, #8]
  10:	movw	r0, #0
  14:	movt	r0, #0
  18:	str	lr, [sp, #16]
  1c:	sub	sp, sp, #12
  20:	add	r1, sp, #4
  24:	bl	0 <__isoc99_scanf>
  28:	ldr	r0, [sp, #4]
  2c:	cmp	r0, #0
  30:	ble	68 <lerpontuacoes+0x68>
  34:	movw	r7, #0
  38:	movt	r7, #0
  3c:	mov	r6, #0
  40:	mov	r2, r4
  44:	mov	r1, r5
  48:	mov	r0, r7
  4c:	add	r6, r6, #1
  50:	bl	0 <__isoc99_scanf>
  54:	ldr	r0, [sp, #4]
  58:	add	r4, r4, #4
  5c:	add	r5, r5, #50	; 0x32
  60:	cmp	r0, r6
  64:	bgt	40 <lerpontuacoes+0x40>
  68:	add	sp, sp, #12
  6c:	ldrd	r4, [sp]
  70:	ldrd	r6, [sp, #8]
  74:	add	sp, sp, #16
  78:	pop	{pc}		; (ldr pc, [sp], #4)

0000007c <primeiroUltimo>:
  7c:	cmp	r2, #1
  80:	strd	r4, [sp, #-32]!	; 0xffffffe0
  84:	strd	r6, [sp, #8]
  88:	strd	r8, [sp, #16]
  8c:	str	sl, [sp, #24]
  90:	str	lr, [sp, #28]
  94:	ldr	r9, [r1]
  98:	ble	10c <primeiroUltimo+0x90>
  9c:	mov	r7, r3
  a0:	add	r8, r1, r2, lsl #2
  a4:	add	r4, r1, #4
  a8:	add	r6, r0, #50	; 0x32
  ac:	mov	sl, r9
  b0:	b	c8 <primeiroUltimo+0x4c>
  b4:	cmp	r5, sl
  b8:	blt	f0 <primeiroUltimo+0x74>
  bc:	cmp	r4, r8
  c0:	add	r6, r6, #50	; 0x32
  c4:	beq	10c <primeiroUltimo+0x90>
  c8:	ldr	r5, [r4], #4
  cc:	cmp	r5, r9
  d0:	ble	b4 <primeiroUltimo+0x38>
  d4:	mov	r1, r6
  d8:	mov	r0, r7
  dc:	bl	0 <strcpy>
  e0:	mov	r9, r5
  e4:	ldr	r5, [r4, #-4]
  e8:	cmp	r5, sl
  ec:	bge	bc <primeiroUltimo+0x40>
  f0:	mov	r1, r6
  f4:	ldr	r0, [sp, #32]
  f8:	mov	sl, r5
  fc:	bl	0 <strcpy>
 100:	cmp	r4, r8
 104:	add	r6, r6, #50	; 0x32
 108:	bne	c8 <primeiroUltimo+0x4c>
 10c:	ldrd	r4, [sp]
 110:	ldrd	r6, [sp, #8]
 114:	ldrd	r8, [sp, #16]
 118:	ldr	sl, [sp, #24]
 11c:	add	sp, sp, #28
 120:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text.startup:

00000000 <main>:
   0:	strd	r4, [sp, #-12]!
   4:	mov	r2, #80	; 0x50
   8:	mov	r1, #0
   c:	str	lr, [sp, #8]
  10:	sub	sp, sp, #1184	; 0x4a0
  14:	mov	r5, #50	; 0x32
  18:	sub	sp, sp, #12
  1c:	add	r0, sp, #112	; 0x70
  20:	add	r4, sp, #60	; 0x3c
  24:	bl	0 <memset>
  28:	add	r0, sp, #192	; 0xc0
  2c:	mov	r2, #1000	; 0x3e8
  30:	mov	r1, #0
  34:	bl	0 <memset>
  38:	mov	r2, r5
  3c:	add	r0, sp, #8
  40:	mov	r1, #0
  44:	bl	0 <memset>
  48:	mov	r2, r5
  4c:	mov	r0, r4
  50:	mov	r1, #0
  54:	bl	0 <memset>
  58:	add	r1, sp, #112	; 0x70
  5c:	add	r0, sp, #192	; 0xc0
  60:	bl	0 <main>
  64:	mov	r5, r0
  68:	add	r3, sp, #8
  6c:	str	r4, [sp]
  70:	mov	r2, r5
  74:	add	r1, sp, #112	; 0x70
  78:	add	r0, sp, #192	; 0xc0
  7c:	bl	7c <main+0x7c>
  80:	mov	r1, r5
  84:	movw	r0, #0
  88:	movt	r0, #0
  8c:	bl	0 <printf>
  90:	add	r1, sp, #8
  94:	movw	r0, #0
  98:	movt	r0, #0
  9c:	bl	0 <printf>
  a0:	mov	r1, r4
  a4:	movw	r0, #0
  a8:	movt	r0, #0
  ac:	bl	0 <printf>
  b0:	mov	r0, #0
  b4:	add	sp, sp, #1184	; 0x4a0
  b8:	add	sp, sp, #12
  bc:	ldrd	r4, [sp]
  c0:	add	sp, sp, #8
  c4:	pop	{pc}		; (ldr pc, [sp], #4)
