
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <export_data_element_to_ascii>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #8
       c:	movw	r0, #0
      10:	movt	r0, #0
      14:	ldr	r0, [r0]
      18:	cmp	r0, #0
      1c:	beq	34 <export_data_element_to_ascii+0x34>
      20:	movw	r0, #0
      24:	movt	r0, #0
      28:	movw	r1, #0
      2c:	str	r1, [r0]
      30:	b	4c <export_data_element_to_ascii+0x4c>
      34:	movw	r0, #0
      38:	movt	r0, #0
      3c:	ldr	r0, [r0]
      40:	movw	r1, #0
      44:	movt	r1, #0
      48:	bl	0 <fprintf>
      4c:	movw	r0, #0
      50:	movt	r0, #0
      54:	ldr	r0, [r0]
      58:	cmp	r0, #0
      5c:	beq	90 <export_data_element_to_ascii+0x90>
      60:	movw	r0, #0
      64:	movt	r0, #0
      68:	ldr	r0, [r0]
      6c:	movw	r1, #2
      70:	movw	r2, #0
      74:	bl	0 <print_full_field_name>
      78:	movw	r0, #0
      7c:	movt	r0, #0
      80:	ldr	r0, [r0]
      84:	movw	r1, #0
      88:	movt	r1, #0
      8c:	bl	0 <fprintf>
      90:	movw	r0, #0
      94:	movt	r0, #0
      98:	ldr	r0, [r0]
      9c:	cmp	r0, #0
      a0:	ble	d0 <export_data_element_to_ascii+0xd0>
      a4:	movw	r0, #0
      a8:	movt	r0, #0
      ac:	ldr	r1, [r0]
      b0:	add	r0, r0, r1, lsl #3
      b4:	ldr	r1, [r0, #296]	; 0x128
      b8:	ldr	r0, [r0, #300]	; 0x12c
      bc:	orr	r0, r1, r0
      c0:	cmp	r0, #0
      c4:	bne	d0 <export_data_element_to_ascii+0xd0>
      c8:	b	cc <export_data_element_to_ascii+0xcc>
      cc:	b	f0 <export_data_element_to_ascii+0xf0>
      d0:	movw	r0, #0
      d4:	movt	r0, #0
      d8:	ldr	r0, [r0]
      dc:	movw	r1, #0
      e0:	str	r1, [sp, #4]
      e4:	ldr	r2, [sp, #4]
      e8:	ldr	r3, [sp, #4]
      ec:	bl	f8 <write_data>
      f0:	mov	sp, fp
      f4:	pop	{fp, pc}

000000f8 <write_data>:
      f8:	push	{fp, lr}
      fc:	mov	fp, sp
     100:	sub	sp, sp, #96	; 0x60
     104:	movw	ip, #0
     108:	movt	ip, #0
     10c:	add	ip, ip, #8
     110:	str	r0, [fp, #-4]
     114:	str	r1, [fp, #-8]
     118:	str	r2, [fp, #-12]
     11c:	str	r3, [fp, #-16]
     120:	ldr	r0, [fp, #-8]
     124:	movw	r1, #0
     128:	movt	r1, #0
     12c:	add	r0, r1, r0, lsl #2
     130:	add	r0, r0, #8
     134:	ldr	r0, [r0]
     138:	sub	r1, fp, #20
     13c:	str	ip, [sp, #12]
     140:	bl	0 <coda_type_get_class>
     144:	cmp	r0, #0
     148:	beq	158 <write_data+0x60>
     14c:	movw	r0, #0
     150:	movt	r0, #0
     154:	blx	r0
     158:	ldr	r0, [fp, #-20]	; 0xffffffec
     15c:	cmp	r0, #0
     160:	str	r0, [sp, #8]
     164:	beq	504 <write_data+0x40c>
     168:	b	16c <write_data+0x74>
     16c:	ldr	r0, [sp, #8]
     170:	cmp	r0, #1
     174:	bne	5ec <write_data+0x4f4>
     178:	b	17c <write_data+0x84>
     17c:	movw	r0, #0
     180:	movt	r0, #0
     184:	add	r0, r0, #800	; 0x320
     188:	ldr	r1, [fp, #-12]
     18c:	movw	r2, #80	; 0x50
     190:	mul	r1, r1, r2
     194:	add	r0, r0, r1
     198:	str	r0, [fp, #-24]	; 0xffffffe8
     19c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     1a0:	ldr	r0, [r0]
     1a4:	str	r0, [sp, #28]
     1a8:	ldr	r0, [fp, #-12]
     1ac:	cmp	r0, #0
     1b0:	bne	1c0 <write_data+0xc8>
     1b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     1b8:	movw	r1, #0
     1bc:	str	r1, [r0, #44]	; 0x2c
     1c0:	movw	r0, #0
     1c4:	movt	r0, #0
     1c8:	ldr	r0, [r0, #104]	; 0x68
     1cc:	ldr	r1, [sp, #28]
     1d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     1d4:	ldr	r2, [r2, #4]
     1d8:	add	r1, r1, r2
     1dc:	cmp	r0, r1
     1e0:	movw	r0, #0
     1e4:	movge	r0, #1
     1e8:	and	r0, r0, #1
     1ec:	str	r0, [fp, #-32]	; 0xffffffe0
     1f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
     1f4:	cmp	r0, #0
     1f8:	beq	250 <write_data+0x158>
     1fc:	ldr	r0, [fp, #-12]
     200:	movw	r1, #0
     204:	movt	r1, #0
     208:	ldr	r1, [r1, #3360]	; 0xd20
     20c:	sub	r1, r1, #1
     210:	cmp	r0, r1
     214:	bge	250 <write_data+0x158>
     218:	movw	r0, #0
     21c:	movt	r0, #0
     220:	add	r0, r0, #800	; 0x320
     224:	ldr	r1, [fp, #-24]	; 0xffffffe8
     228:	ldr	r1, [r1, #44]	; 0x2c
     22c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     230:	ldr	r2, [r2, #40]	; 0x28
     234:	mul	r1, r1, r2
     238:	ldr	r2, [fp, #-12]
     23c:	add	r2, r2, #1
     240:	movw	r3, #80	; 0x50
     244:	mul	r2, r2, r3
     248:	add	r0, r0, r2
     24c:	str	r1, [r0, #44]	; 0x2c
     250:	movw	r0, #1
     254:	str	r0, [fp, #-28]	; 0xffffffe4
     258:	movw	r0, #0
     25c:	str	r0, [sp, #24]
     260:	ldr	r0, [sp, #24]
     264:	ldr	r1, [fp, #-24]	; 0xffffffe8
     268:	ldr	r1, [r1, #4]
     26c:	cmp	r0, r1
     270:	bge	348 <write_data+0x250>
     274:	movw	r0, #0
     278:	movt	r0, #0
     27c:	add	r0, r0, #72	; 0x48
     280:	ldr	r1, [sp, #28]
     284:	ldr	r2, [sp, #24]
     288:	add	r1, r1, r2
     28c:	movw	r2, #0
     290:	movt	r2, #0
     294:	add	r1, r2, r1, lsl #2
     298:	add	r1, r1, #72	; 0x48
     29c:	ldr	r1, [r1]
     2a0:	cmp	r1, #0
     2a4:	beq	2e0 <write_data+0x1e8>
     2a8:	ldr	r0, [sp, #28]
     2ac:	ldr	r1, [sp, #24]
     2b0:	add	r0, r0, r1
     2b4:	movw	r2, #0
     2b8:	movt	r2, #0
     2bc:	add	r0, r2, r0, lsl #2
     2c0:	ldr	r0, [r0, #108]	; 0x6c
     2c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     2c8:	ldr	r2, [r2, #44]	; 0x2c
     2cc:	ldr	r0, [r0, r2, lsl #2]
     2d0:	add	r2, sp, #32
     2d4:	add	r1, r2, r1, lsl #2
     2d8:	str	r0, [r1]
     2dc:	b	308 <write_data+0x210>
     2e0:	ldr	r0, [sp, #28]
     2e4:	ldr	r1, [sp, #24]
     2e8:	add	r0, r0, r1
     2ec:	movw	r2, #0
     2f0:	movt	r2, #0
     2f4:	add	r0, r2, r0, lsl #2
     2f8:	ldr	r0, [r0, #4]
     2fc:	add	r2, sp, #32
     300:	add	r1, r2, r1, lsl #2
     304:	str	r0, [r1]
     308:	ldr	r0, [sp, #24]
     30c:	add	r1, sp, #32
     310:	ldr	r0, [r1, r0, lsl #2]
     314:	ldr	r1, [fp, #-28]	; 0xffffffe4
     318:	mul	r0, r1, r0
     31c:	str	r0, [fp, #-28]	; 0xffffffe4
     320:	ldr	r0, [fp, #-24]	; 0xffffffe8
     324:	add	r0, r0, #48	; 0x30
     328:	ldr	r1, [sp, #24]
     32c:	add	r0, r0, r1, lsl #2
     330:	movw	r1, #0
     334:	str	r1, [r0]
     338:	ldr	r0, [sp, #24]
     33c:	add	r0, r0, #1
     340:	str	r0, [sp, #24]
     344:	b	260 <write_data+0x168>
     348:	ldr	r0, [fp, #-28]	; 0xffffffe4
     34c:	cmp	r0, #0
     350:	bne	358 <write_data+0x260>
     354:	b	5f8 <write_data+0x500>
     358:	movw	r0, #0
     35c:	movt	r0, #0
     360:	add	r0, r0, #144	; 0x90
     364:	bl	0 <coda_cursor_goto_first_array_element>
     368:	cmp	r0, #0
     36c:	beq	37c <write_data+0x284>
     370:	movw	r0, #0
     374:	movt	r0, #0
     378:	blx	r0
     37c:	movw	r0, #0
     380:	str	r0, [sp, #24]
     384:	ldr	r0, [sp, #24]
     388:	ldr	r1, [fp, #-28]	; 0xffffffe4
     38c:	cmp	r0, r1
     390:	bge	4f0 <write_data+0x3f8>
     394:	ldr	r0, [fp, #-4]
     398:	ldr	r1, [fp, #-8]
     39c:	add	r1, r1, #1
     3a0:	ldr	r2, [fp, #-12]
     3a4:	add	r2, r2, #1
     3a8:	ldr	r3, [fp, #-16]
     3ac:	bl	f8 <write_data>
     3b0:	ldr	r0, [sp, #24]
     3b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     3b8:	sub	r1, r1, #1
     3bc:	cmp	r0, r1
     3c0:	bge	4dc <write_data+0x3e4>
     3c4:	movw	r0, #0
     3c8:	movt	r0, #0
     3cc:	add	r0, r0, #144	; 0x90
     3d0:	bl	0 <coda_cursor_goto_next_array_element>
     3d4:	cmp	r0, #0
     3d8:	beq	3e8 <write_data+0x2f0>
     3dc:	movw	r0, #0
     3e0:	movt	r0, #0
     3e4:	blx	r0
     3e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     3ec:	cmp	r0, #0
     3f0:	beq	43c <write_data+0x344>
     3f4:	ldr	r0, [fp, #-12]
     3f8:	movw	r1, #0
     3fc:	movt	r1, #0
     400:	ldr	r1, [r1, #3360]	; 0xd20
     404:	sub	r1, r1, #1
     408:	cmp	r0, r1
     40c:	bge	43c <write_data+0x344>
     410:	movw	r0, #0
     414:	movt	r0, #0
     418:	add	r0, r0, #800	; 0x320
     41c:	ldr	r1, [fp, #-12]
     420:	add	r1, r1, #1
     424:	movw	r2, #80	; 0x50
     428:	mul	r1, r1, r2
     42c:	add	r0, r0, r1
     430:	ldr	r1, [r0, #44]	; 0x2c
     434:	add	r1, r1, #1
     438:	str	r1, [r0, #44]	; 0x2c
     43c:	movw	r0, #0
     440:	movt	r0, #0
     444:	ldr	r0, [r0]
     448:	cmp	r0, #0
     44c:	beq	4d8 <write_data+0x3e0>
     450:	ldr	r0, [fp, #-24]	; 0xffffffe8
     454:	ldr	r0, [r0, #4]
     458:	sub	r0, r0, #1
     45c:	str	r0, [sp, #20]
     460:	ldr	r0, [sp, #20]
     464:	cmp	r0, #0
     468:	blt	4d4 <write_data+0x3dc>
     46c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     470:	ldr	r1, [sp, #20]
     474:	add	r0, r0, r1, lsl #2
     478:	ldr	r1, [r0, #48]	; 0x30
     47c:	add	r1, r1, #1
     480:	str	r1, [r0, #48]	; 0x30
     484:	ldr	r0, [fp, #-24]	; 0xffffffe8
     488:	ldr	r1, [sp, #20]
     48c:	add	r0, r0, r1, lsl #2
     490:	ldr	r0, [r0, #48]	; 0x30
     494:	add	r2, sp, #32
     498:	add	r1, r2, r1, lsl #2
     49c:	ldr	r1, [r1]
     4a0:	cmp	r0, r1
     4a4:	bne	4cc <write_data+0x3d4>
     4a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4ac:	add	r0, r0, #48	; 0x30
     4b0:	ldr	r1, [sp, #20]
     4b4:	sub	r2, r1, #1
     4b8:	str	r2, [sp, #20]
     4bc:	add	r0, r0, r1, lsl #2
     4c0:	movw	r1, #0
     4c4:	str	r1, [r0]
     4c8:	b	4d0 <write_data+0x3d8>
     4cc:	b	4d4 <write_data+0x3dc>
     4d0:	b	460 <write_data+0x368>
     4d4:	b	4d8 <write_data+0x3e0>
     4d8:	b	4dc <write_data+0x3e4>
     4dc:	b	4e0 <write_data+0x3e8>
     4e0:	ldr	r0, [sp, #24]
     4e4:	add	r0, r0, #1
     4e8:	str	r0, [sp, #24]
     4ec:	b	384 <write_data+0x28c>
     4f0:	movw	r0, #0
     4f4:	movt	r0, #0
     4f8:	add	r0, r0, #144	; 0x90
     4fc:	bl	0 <coda_cursor_goto_parent>
     500:	b	5f8 <write_data+0x500>
     504:	movw	r0, #0
     508:	movt	r0, #0
     50c:	add	r1, r0, #144	; 0x90
     510:	movw	r2, #3492	; 0xda4
     514:	add	r0, r0, r2
     518:	ldr	r2, [fp, #-16]
     51c:	movw	r3, #0
     520:	movt	r3, #0
     524:	add	r2, r3, r2, lsl #2
     528:	movw	r3, #3492	; 0xda4
     52c:	add	r2, r2, r3
     530:	ldr	r2, [r2]
     534:	str	r0, [sp, #4]
     538:	mov	r0, r1
     53c:	mov	r1, r2
     540:	add	r2, sp, #16
     544:	bl	0 <coda_cursor_get_record_field_available_status>
     548:	cmp	r0, #0
     54c:	beq	55c <write_data+0x464>
     550:	movw	r0, #0
     554:	movt	r0, #0
     558:	blx	r0
     55c:	ldr	r0, [sp, #16]
     560:	cmp	r0, #0
     564:	beq	5e8 <write_data+0x4f0>
     568:	movw	r0, #0
     56c:	movt	r0, #0
     570:	add	r1, r0, #144	; 0x90
     574:	movw	r2, #3492	; 0xda4
     578:	add	r0, r0, r2
     57c:	ldr	r2, [fp, #-16]
     580:	movw	r3, #0
     584:	movt	r3, #0
     588:	add	r2, r3, r2, lsl #2
     58c:	movw	r3, #3492	; 0xda4
     590:	add	r2, r2, r3
     594:	ldr	r2, [r2]
     598:	str	r0, [sp]
     59c:	mov	r0, r1
     5a0:	mov	r1, r2
     5a4:	bl	0 <coda_cursor_goto_record_field_by_index>
     5a8:	cmp	r0, #0
     5ac:	beq	5bc <write_data+0x4c4>
     5b0:	movw	r0, #0
     5b4:	movt	r0, #0
     5b8:	blx	r0
     5bc:	ldr	r0, [fp, #-4]
     5c0:	ldr	r1, [fp, #-8]
     5c4:	add	r1, r1, #1
     5c8:	ldr	r2, [fp, #-12]
     5cc:	ldr	r3, [fp, #-16]
     5d0:	add	r3, r3, #1
     5d4:	bl	f8 <write_data>
     5d8:	movw	r0, #0
     5dc:	movt	r0, #0
     5e0:	add	r0, r0, #144	; 0x90
     5e4:	bl	0 <coda_cursor_goto_parent>
     5e8:	b	5f8 <write_data+0x500>
     5ec:	ldr	r0, [fp, #-4]
     5f0:	ldr	r1, [fp, #-8]
     5f4:	bl	600 <write_basic_data>
     5f8:	mov	sp, fp
     5fc:	pop	{fp, pc}

00000600 <write_basic_data>:
     600:	push	{r4, r5, fp, lr}
     604:	add	fp, sp, #8
     608:	sub	sp, sp, #264	; 0x108
     60c:	str	r0, [fp, #-12]
     610:	str	r1, [fp, #-16]
     614:	movw	r0, #0
     618:	movt	r0, #0
     61c:	ldr	r0, [r0]
     620:	cmp	r0, #0
     624:	beq	630 <write_basic_data+0x30>
     628:	ldr	r0, [fp, #-12]
     62c:	bl	f5c <write_index>
     630:	movw	r0, #0
     634:	movt	r0, #0
     638:	add	r0, r0, #8
     63c:	ldr	r1, [fp, #-16]
     640:	movw	r2, #0
     644:	movt	r2, #0
     648:	add	r1, r2, r1, lsl #2
     64c:	add	r1, r1, #8
     650:	ldr	r1, [r1]
     654:	str	r0, [sp, #52]	; 0x34
     658:	mov	r0, r1
     65c:	sub	r1, fp, #20
     660:	bl	0 <coda_type_get_class>
     664:	cmp	r0, #0
     668:	beq	678 <write_basic_data+0x78>
     66c:	movw	r0, #0
     670:	movt	r0, #0
     674:	blx	r0
     678:	ldr	r0, [fp, #-20]	; 0xffffffec
     67c:	cmp	r0, #2
     680:	str	r0, [sp, #48]	; 0x30
     684:	bcc	f24 <write_basic_data+0x924>
     688:	b	68c <write_basic_data+0x8c>
     68c:	ldr	r0, [sp, #48]	; 0x30
     690:	sub	r1, r0, #2
     694:	cmp	r1, #4
     698:	bcc	6b0 <write_basic_data+0xb0>
     69c:	b	6a0 <write_basic_data+0xa0>
     6a0:	ldr	r0, [sp, #48]	; 0x30
     6a4:	cmp	r0, #6
     6a8:	beq	d30 <write_basic_data+0x730>
     6ac:	b	f44 <write_basic_data+0x944>
     6b0:	movw	r0, #0
     6b4:	movt	r0, #0
     6b8:	add	r0, r0, #8
     6bc:	ldr	r1, [fp, #-16]
     6c0:	movw	r2, #0
     6c4:	movt	r2, #0
     6c8:	add	r1, r2, r1, lsl #2
     6cc:	add	r1, r1, #8
     6d0:	ldr	r1, [r1]
     6d4:	str	r0, [sp, #44]	; 0x2c
     6d8:	mov	r0, r1
     6dc:	sub	r1, fp, #24
     6e0:	bl	0 <coda_type_get_read_type>
     6e4:	cmp	r0, #0
     6e8:	beq	6f8 <write_basic_data+0xf8>
     6ec:	movw	r0, #0
     6f0:	movt	r0, #0
     6f4:	blx	r0
     6f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6fc:	add	r0, r0, #1
     700:	cmp	r0, #13
     704:	str	r0, [sp, #40]	; 0x28
     708:	bhi	d2c <write_basic_data+0x72c>
     70c:	add	r0, pc, #8
     710:	ldr	r1, [sp, #40]	; 0x28
     714:	ldr	r0, [r0, r1, lsl #2]
     718:	mov	pc, r0
     71c:	.word	0x00000d0c
     720:	.word	0x00000b80
     724:	.word	0x00000bc0
     728:	.word	0x00000b80
     72c:	.word	0x00000bc0
     730:	.word	0x00000b80
     734:	.word	0x00000bc0
     738:	.word	0x00000c00
     73c:	.word	0x00000c50
     740:	.word	0x00000ca0
     744:	.word	0x00000ca0
     748:	.word	0x00000754
     74c:	.word	0x000007c0
     750:	.word	0x000008b8
     754:	movw	r0, #0
     758:	movt	r0, #0
     75c:	add	r0, r0, #144	; 0x90
     760:	sub	r1, fp, #25
     764:	bl	0 <coda_cursor_read_char>
     768:	cmp	r0, #0
     76c:	beq	77c <write_basic_data+0x17c>
     770:	movw	r0, #0
     774:	movt	r0, #0
     778:	blx	r0
     77c:	movw	r0, #0
     780:	movt	r0, #0
     784:	ldr	r0, [r0]
     788:	cmp	r0, #0
     78c:	beq	7a8 <write_basic_data+0x1a8>
     790:	ldr	r0, [fp, #-12]
     794:	ldrb	r2, [fp, #-25]	; 0xffffffe7
     798:	movw	r1, #0
     79c:	movt	r1, #0
     7a0:	bl	0 <fprintf>
     7a4:	b	7bc <write_basic_data+0x1bc>
     7a8:	ldr	r0, [fp, #-12]
     7ac:	ldrb	r2, [fp, #-25]	; 0xffffffe7
     7b0:	movw	r1, #0
     7b4:	movt	r1, #0
     7b8:	bl	0 <fprintf>
     7bc:	b	d2c <write_basic_data+0x72c>
     7c0:	movw	r0, #0
     7c4:	movt	r0, #0
     7c8:	add	r0, r0, #144	; 0x90
     7cc:	sub	r1, fp, #32
     7d0:	bl	0 <coda_cursor_get_string_length>
     7d4:	cmp	r0, #0
     7d8:	beq	7e8 <write_basic_data+0x1e8>
     7dc:	movw	r0, #0
     7e0:	movt	r0, #0
     7e4:	blx	r0
     7e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     7ec:	add	r0, r0, #1
     7f0:	bl	0 <malloc>
     7f4:	str	r0, [fp, #-36]	; 0xffffffdc
     7f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
     7fc:	movw	r1, #0
     800:	cmp	r0, r1
     804:	bne	83c <write_basic_data+0x23c>
     808:	ldr	r0, [fp, #-32]	; 0xffffffe0
     80c:	add	r2, r0, #1
     810:	mvn	r0, #0
     814:	movw	r1, #0
     818:	movt	r1, #0
     81c:	movw	r3, #0
     820:	movt	r3, #0
     824:	movw	ip, #126	; 0x7e
     828:	str	ip, [sp]
     82c:	bl	0 <coda_set_error>
     830:	movw	r0, #0
     834:	movt	r0, #0
     838:	blx	r0
     83c:	movw	r0, #0
     840:	movt	r0, #0
     844:	add	r0, r0, #144	; 0x90
     848:	ldr	r1, [fp, #-36]	; 0xffffffdc
     84c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     850:	add	r2, r2, #1
     854:	bl	0 <coda_cursor_read_string>
     858:	cmp	r0, #0
     85c:	beq	86c <write_basic_data+0x26c>
     860:	movw	r0, #0
     864:	movt	r0, #0
     868:	blx	r0
     86c:	movw	r0, #0
     870:	movt	r0, #0
     874:	ldr	r0, [r0]
     878:	cmp	r0, #0
     87c:	beq	898 <write_basic_data+0x298>
     880:	ldr	r0, [fp, #-12]
     884:	ldr	r2, [fp, #-36]	; 0xffffffdc
     888:	movw	r1, #0
     88c:	movt	r1, #0
     890:	bl	0 <fprintf>
     894:	b	8ac <write_basic_data+0x2ac>
     898:	ldr	r0, [fp, #-12]
     89c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     8a0:	movw	r1, #0
     8a4:	movt	r1, #0
     8a8:	bl	0 <fprintf>
     8ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
     8b0:	bl	0 <free>
     8b4:	b	d2c <write_basic_data+0x72c>
     8b8:	movw	r0, #0
     8bc:	movt	r0, #0
     8c0:	add	r0, r0, #144	; 0x90
     8c4:	sub	r1, fp, #48	; 0x30
     8c8:	bl	0 <coda_cursor_get_bit_size>
     8cc:	cmp	r0, #0
     8d0:	beq	8e0 <write_basic_data+0x2e0>
     8d4:	movw	r0, #0
     8d8:	movt	r0, #0
     8dc:	blx	r0
     8e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
     8e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
     8e8:	lsr	r2, r0, #3
     8ec:	orr	r2, r2, r1, lsl #29
     8f0:	asr	r1, r1, #3
     8f4:	and	r0, r0, #7
     8f8:	adds	r3, r2, #1
     8fc:	adc	ip, r1, #0
     900:	cmp	r0, #0
     904:	movne	r2, r3
     908:	cmp	r0, #0
     90c:	movne	r1, ip
     910:	str	r2, [fp, #-56]	; 0xffffffc8
     914:	str	r1, [fp, #-52]	; 0xffffffcc
     918:	ldr	r0, [fp, #-56]	; 0xffffffc8
     91c:	bl	0 <malloc>
     920:	str	r0, [fp, #-60]	; 0xffffffc4
     924:	ldr	r0, [fp, #-60]	; 0xffffffc4
     928:	movw	r1, #0
     92c:	cmp	r0, r1
     930:	bne	964 <write_basic_data+0x364>
     934:	ldr	r2, [fp, #-56]	; 0xffffffc8
     938:	mvn	r0, #0
     93c:	movw	r1, #0
     940:	movt	r1, #0
     944:	movw	r3, #0
     948:	movt	r3, #0
     94c:	movw	ip, #163	; 0xa3
     950:	str	ip, [sp]
     954:	bl	0 <coda_set_error>
     958:	movw	r0, #0
     95c:	movt	r0, #0
     960:	blx	r0
     964:	movw	r0, #0
     968:	movt	r0, #0
     96c:	add	r0, r0, #144	; 0x90
     970:	ldr	r1, [fp, #-60]	; 0xffffffc4
     974:	ldr	r2, [fp, #-48]	; 0xffffffd0
     978:	ldr	r3, [fp, #-44]	; 0xffffffd4
     97c:	mov	ip, sp
     980:	str	r3, [ip, #4]
     984:	str	r2, [ip]
     988:	movw	r2, #0
     98c:	movt	r2, #0
     990:	add	r2, r2, #144	; 0x90
     994:	mov	r3, #0
     998:	str	r0, [sp, #36]	; 0x24
     99c:	mov	r0, r2
     9a0:	mov	r2, r3
     9a4:	bl	0 <coda_cursor_read_bits>
     9a8:	cmp	r0, #0
     9ac:	beq	9bc <write_basic_data+0x3bc>
     9b0:	movw	r0, #0
     9b4:	movt	r0, #0
     9b8:	blx	r0
     9bc:	movw	r0, #0
     9c0:	str	r0, [fp, #-64]	; 0xffffffc0
     9c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
     9c8:	ldr	r1, [fp, #-56]	; 0xffffffc8
     9cc:	ldr	r2, [fp, #-52]	; 0xffffffcc
     9d0:	subs	r1, r0, r1
     9d4:	rscs	r0, r2, r0, asr #31
     9d8:	bge	b74 <write_basic_data+0x574>
     9dc:	b	9e0 <write_basic_data+0x3e0>
     9e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
     9e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
     9e8:	ldrb	r0, [r0, r1]
     9ec:	strb	r0, [fp, #-65]	; 0xffffffbf
     9f0:	ldrb	r0, [fp, #-65]	; 0xffffffbf
     9f4:	mov	r1, r0
     9f8:	cmp	r0, #7
     9fc:	str	r1, [sp, #32]
     a00:	beq	a78 <write_basic_data+0x478>
     a04:	b	a08 <write_basic_data+0x408>
     a08:	ldr	r0, [sp, #32]
     a0c:	cmp	r0, #8
     a10:	beq	a8c <write_basic_data+0x48c>
     a14:	b	a18 <write_basic_data+0x418>
     a18:	ldr	r0, [sp, #32]
     a1c:	cmp	r0, #9
     a20:	beq	aa0 <write_basic_data+0x4a0>
     a24:	b	a28 <write_basic_data+0x428>
     a28:	ldr	r0, [sp, #32]
     a2c:	cmp	r0, #10
     a30:	beq	ab4 <write_basic_data+0x4b4>
     a34:	b	a38 <write_basic_data+0x438>
     a38:	ldr	r0, [sp, #32]
     a3c:	cmp	r0, #11
     a40:	beq	ac8 <write_basic_data+0x4c8>
     a44:	b	a48 <write_basic_data+0x448>
     a48:	ldr	r0, [sp, #32]
     a4c:	cmp	r0, #12
     a50:	beq	adc <write_basic_data+0x4dc>
     a54:	b	a58 <write_basic_data+0x458>
     a58:	ldr	r0, [sp, #32]
     a5c:	cmp	r0, #13
     a60:	beq	af0 <write_basic_data+0x4f0>
     a64:	b	a68 <write_basic_data+0x468>
     a68:	ldr	r0, [sp, #32]
     a6c:	cmp	r0, #92	; 0x5c
     a70:	beq	b04 <write_basic_data+0x504>
     a74:	b	b18 <write_basic_data+0x518>
     a78:	ldr	r0, [fp, #-12]
     a7c:	movw	r1, #0
     a80:	movt	r1, #0
     a84:	bl	0 <fprintf>
     a88:	b	b60 <write_basic_data+0x560>
     a8c:	ldr	r0, [fp, #-12]
     a90:	movw	r1, #0
     a94:	movt	r1, #0
     a98:	bl	0 <fprintf>
     a9c:	b	b60 <write_basic_data+0x560>
     aa0:	ldr	r0, [fp, #-12]
     aa4:	movw	r1, #0
     aa8:	movt	r1, #0
     aac:	bl	0 <fprintf>
     ab0:	b	b60 <write_basic_data+0x560>
     ab4:	ldr	r0, [fp, #-12]
     ab8:	movw	r1, #0
     abc:	movt	r1, #0
     ac0:	bl	0 <fprintf>
     ac4:	b	b60 <write_basic_data+0x560>
     ac8:	ldr	r0, [fp, #-12]
     acc:	movw	r1, #0
     ad0:	movt	r1, #0
     ad4:	bl	0 <fprintf>
     ad8:	b	b60 <write_basic_data+0x560>
     adc:	ldr	r0, [fp, #-12]
     ae0:	movw	r1, #0
     ae4:	movt	r1, #0
     ae8:	bl	0 <fprintf>
     aec:	b	b60 <write_basic_data+0x560>
     af0:	ldr	r0, [fp, #-12]
     af4:	movw	r1, #0
     af8:	movt	r1, #0
     afc:	bl	0 <fprintf>
     b00:	b	b60 <write_basic_data+0x560>
     b04:	ldr	r0, [fp, #-12]
     b08:	movw	r1, #0
     b0c:	movt	r1, #0
     b10:	bl	0 <fprintf>
     b14:	b	b60 <write_basic_data+0x560>
     b18:	ldrb	r0, [fp, #-65]	; 0xffffffbf
     b1c:	cmp	r0, #32
     b20:	blt	b48 <write_basic_data+0x548>
     b24:	ldrb	r0, [fp, #-65]	; 0xffffffbf
     b28:	cmp	r0, #126	; 0x7e
     b2c:	bgt	b48 <write_basic_data+0x548>
     b30:	ldr	r0, [fp, #-12]
     b34:	ldrb	r2, [fp, #-65]	; 0xffffffbf
     b38:	movw	r1, #0
     b3c:	movt	r1, #0
     b40:	bl	0 <fprintf>
     b44:	b	b5c <write_basic_data+0x55c>
     b48:	ldr	r0, [fp, #-12]
     b4c:	ldrb	r2, [fp, #-65]	; 0xffffffbf
     b50:	movw	r1, #0
     b54:	movt	r1, #0
     b58:	bl	0 <fprintf>
     b5c:	b	b60 <write_basic_data+0x560>
     b60:	b	b64 <write_basic_data+0x564>
     b64:	ldr	r0, [fp, #-64]	; 0xffffffc0
     b68:	add	r0, r0, #1
     b6c:	str	r0, [fp, #-64]	; 0xffffffc0
     b70:	b	9c4 <write_basic_data+0x3c4>
     b74:	ldr	r0, [fp, #-60]	; 0xffffffc4
     b78:	bl	0 <free>
     b7c:	b	d2c <write_basic_data+0x72c>
     b80:	movw	r0, #0
     b84:	movt	r0, #0
     b88:	add	r0, r0, #144	; 0x90
     b8c:	sub	r1, fp, #72	; 0x48
     b90:	bl	0 <coda_cursor_read_int32>
     b94:	cmp	r0, #0
     b98:	beq	ba8 <write_basic_data+0x5a8>
     b9c:	movw	r0, #0
     ba0:	movt	r0, #0
     ba4:	blx	r0
     ba8:	ldr	r0, [fp, #-12]
     bac:	ldr	r2, [fp, #-72]	; 0xffffffb8
     bb0:	movw	r1, #0
     bb4:	movt	r1, #0
     bb8:	bl	0 <fprintf>
     bbc:	b	d2c <write_basic_data+0x72c>
     bc0:	movw	r0, #0
     bc4:	movt	r0, #0
     bc8:	add	r0, r0, #144	; 0x90
     bcc:	sub	r1, fp, #76	; 0x4c
     bd0:	bl	0 <coda_cursor_read_uint32>
     bd4:	cmp	r0, #0
     bd8:	beq	be8 <write_basic_data+0x5e8>
     bdc:	movw	r0, #0
     be0:	movt	r0, #0
     be4:	blx	r0
     be8:	ldr	r0, [fp, #-12]
     bec:	ldr	r2, [fp, #-76]	; 0xffffffb4
     bf0:	movw	r1, #0
     bf4:	movt	r1, #0
     bf8:	bl	0 <fprintf>
     bfc:	b	d2c <write_basic_data+0x72c>
     c00:	movw	r0, #0
     c04:	movt	r0, #0
     c08:	add	r0, r0, #144	; 0x90
     c0c:	sub	r1, fp, #88	; 0x58
     c10:	bl	0 <coda_cursor_read_int64>
     c14:	cmp	r0, #0
     c18:	beq	c28 <write_basic_data+0x628>
     c1c:	movw	r0, #0
     c20:	movt	r0, #0
     c24:	blx	r0
     c28:	sub	r2, fp, #109	; 0x6d
     c2c:	ldr	r0, [fp, #-88]	; 0xffffffa8
     c30:	ldr	r1, [fp, #-84]	; 0xffffffac
     c34:	bl	0 <coda_str64>
     c38:	sub	r2, fp, #109	; 0x6d
     c3c:	ldr	r0, [fp, #-12]
     c40:	movw	r1, #0
     c44:	movt	r1, #0
     c48:	bl	0 <fprintf>
     c4c:	b	d2c <write_basic_data+0x72c>
     c50:	movw	r0, #0
     c54:	movt	r0, #0
     c58:	add	r0, r0, #144	; 0x90
     c5c:	sub	r1, fp, #120	; 0x78
     c60:	bl	0 <coda_cursor_read_uint64>
     c64:	cmp	r0, #0
     c68:	beq	c78 <write_basic_data+0x678>
     c6c:	movw	r0, #0
     c70:	movt	r0, #0
     c74:	blx	r0
     c78:	add	r2, sp, #131	; 0x83
     c7c:	ldr	r0, [fp, #-120]	; 0xffffff88
     c80:	ldr	r1, [fp, #-116]	; 0xffffff8c
     c84:	bl	0 <coda_str64u>
     c88:	add	r2, sp, #131	; 0x83
     c8c:	ldr	r0, [fp, #-12]
     c90:	movw	r1, #0
     c94:	movt	r1, #0
     c98:	bl	0 <fprintf>
     c9c:	b	d2c <write_basic_data+0x72c>
     ca0:	movw	r0, #0
     ca4:	movt	r0, #0
     ca8:	add	r0, r0, #144	; 0x90
     cac:	add	r1, sp, #120	; 0x78
     cb0:	bl	0 <coda_cursor_read_double>
     cb4:	cmp	r0, #0
     cb8:	beq	cc8 <write_basic_data+0x6c8>
     cbc:	movw	r0, #0
     cc0:	movt	r0, #0
     cc4:	blx	r0
     cc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ccc:	cmp	r0, #8
     cd0:	bne	cf0 <write_basic_data+0x6f0>
     cd4:	ldr	r0, [fp, #-12]
     cd8:	vldr	d16, [sp, #120]	; 0x78
     cdc:	movw	r1, #0
     ce0:	movt	r1, #0
     ce4:	vmov	r2, r3, d16
     ce8:	bl	0 <fprintf>
     cec:	b	d08 <write_basic_data+0x708>
     cf0:	ldr	r0, [fp, #-12]
     cf4:	vldr	d16, [sp, #120]	; 0x78
     cf8:	movw	r1, #0
     cfc:	movt	r1, #0
     d00:	vmov	r2, r3, d16
     d04:	bl	0 <fprintf>
     d08:	b	d2c <write_basic_data+0x72c>
     d0c:	movw	r0, #0
     d10:	movt	r0, #0
     d14:	movw	r1, #0
     d18:	movt	r1, #0
     d1c:	movw	r2, #294	; 0x126
     d20:	movw	r3, #0
     d24:	movt	r3, #0
     d28:	bl	0 <__assert_fail>
     d2c:	b	f44 <write_basic_data+0x944>
     d30:	movw	r0, #0
     d34:	movt	r0, #0
     d38:	add	r0, r0, #8
     d3c:	ldr	r1, [fp, #-16]
     d40:	movw	r2, #0
     d44:	movt	r2, #0
     d48:	add	r1, r2, r1, lsl #2
     d4c:	add	r1, r1, #8
     d50:	ldr	r1, [r1]
     d54:	str	r0, [sp, #28]
     d58:	mov	r0, r1
     d5c:	add	r1, sp, #116	; 0x74
     d60:	bl	0 <coda_type_get_special_type>
     d64:	cmp	r0, #0
     d68:	beq	d78 <write_basic_data+0x778>
     d6c:	movw	r0, #0
     d70:	movt	r0, #0
     d74:	blx	r0
     d78:	ldr	r0, [sp, #116]	; 0x74
     d7c:	cmp	r0, #0
     d80:	str	r0, [sp, #24]
     d84:	beq	db0 <write_basic_data+0x7b0>
     d88:	b	d8c <write_basic_data+0x78c>
     d8c:	ldr	r0, [sp, #24]
     d90:	sub	r1, r0, #1
     d94:	cmp	r1, #2
     d98:	bcc	db4 <write_basic_data+0x7b4>
     d9c:	b	da0 <write_basic_data+0x7a0>
     da0:	ldr	r0, [sp, #24]
     da4:	cmp	r0, #3
     da8:	beq	ebc <write_basic_data+0x8bc>
     dac:	b	f20 <write_basic_data+0x920>
     db0:	b	f20 <write_basic_data+0x920>
     db4:	movw	r0, #0
     db8:	movt	r0, #0
     dbc:	add	r0, r0, #144	; 0x90
     dc0:	add	r1, sp, #104	; 0x68
     dc4:	bl	0 <coda_cursor_read_double>
     dc8:	cmp	r0, #0
     dcc:	beq	ddc <write_basic_data+0x7dc>
     dd0:	movw	r0, #0
     dd4:	movt	r0, #0
     dd8:	blx	r0
     ddc:	ldr	r0, [sp, #116]	; 0x74
     de0:	cmp	r0, #2
     de4:	bne	ea0 <write_basic_data+0x8a0>
     de8:	movw	r0, #0
     dec:	movt	r0, #0
     df0:	ldr	r0, [r0]
     df4:	cmp	r0, #0
     df8:	beq	ea0 <write_basic_data+0x8a0>
     dfc:	vldr	d0, [sp, #104]	; 0x68
     e00:	bl	0 <coda_isNaN>
     e04:	cmp	r0, #0
     e08:	bne	e1c <write_basic_data+0x81c>
     e0c:	vldr	d0, [sp, #104]	; 0x68
     e10:	bl	0 <coda_isInf>
     e14:	cmp	r0, #0
     e18:	beq	e30 <write_basic_data+0x830>
     e1c:	add	r0, sp, #77	; 0x4d
     e20:	movw	r1, #0
     e24:	movt	r1, #0
     e28:	bl	0 <strcpy>
     e2c:	b	e5c <write_basic_data+0x85c>
     e30:	add	r1, sp, #77	; 0x4d
     e34:	vldr	d0, [sp, #104]	; 0x68
     e38:	movw	r0, #0
     e3c:	movt	r0, #0
     e40:	bl	0 <coda_time_double_to_string>
     e44:	cmp	r0, #0
     e48:	beq	e58 <write_basic_data+0x858>
     e4c:	movw	r0, #0
     e50:	movt	r0, #0
     e54:	blx	r0
     e58:	b	e5c <write_basic_data+0x85c>
     e5c:	movw	r0, #0
     e60:	movt	r0, #0
     e64:	ldr	r0, [r0]
     e68:	cmp	r0, #0
     e6c:	beq	e88 <write_basic_data+0x888>
     e70:	add	r2, sp, #77	; 0x4d
     e74:	ldr	r0, [fp, #-12]
     e78:	movw	r1, #0
     e7c:	movt	r1, #0
     e80:	bl	0 <fprintf>
     e84:	b	e9c <write_basic_data+0x89c>
     e88:	add	r2, sp, #77	; 0x4d
     e8c:	ldr	r0, [fp, #-12]
     e90:	movw	r1, #0
     e94:	movt	r1, #0
     e98:	bl	0 <fprintf>
     e9c:	b	eb8 <write_basic_data+0x8b8>
     ea0:	ldr	r0, [fp, #-12]
     ea4:	vldr	d16, [sp, #104]	; 0x68
     ea8:	movw	r1, #0
     eac:	movt	r1, #0
     eb0:	vmov	r2, r3, d16
     eb4:	bl	0 <fprintf>
     eb8:	b	f20 <write_basic_data+0x920>
     ebc:	movw	r0, #0
     ec0:	movt	r0, #0
     ec4:	add	r0, r0, #144	; 0x90
     ec8:	add	r1, sp, #56	; 0x38
     ecc:	bl	0 <coda_cursor_read_complex_double_pair>
     ed0:	cmp	r0, #0
     ed4:	beq	ee4 <write_basic_data+0x8e4>
     ed8:	movw	r0, #0
     edc:	movt	r0, #0
     ee0:	blx	r0
     ee4:	ldr	r0, [fp, #-12]
     ee8:	vldr	d16, [sp, #56]	; 0x38
     eec:	movw	r1, #0
     ef0:	movt	r1, #0
     ef4:	ldr	r1, [r1]
     ef8:	vldr	d17, [sp, #64]	; 0x40
     efc:	movw	r2, #0
     f00:	movt	r2, #0
     f04:	str	r1, [sp, #20]
     f08:	mov	r1, r2
     f0c:	vmov	r2, r3, d16
     f10:	ldr	ip, [sp, #20]
     f14:	str	ip, [sp]
     f18:	vstr	d17, [sp, #8]
     f1c:	bl	0 <fprintf>
     f20:	b	f44 <write_basic_data+0x944>
     f24:	movw	r0, #0
     f28:	movt	r0, #0
     f2c:	movw	r1, #0
     f30:	movt	r1, #0
     f34:	movw	r2, #368	; 0x170
     f38:	movw	r3, #0
     f3c:	movt	r3, #0
     f40:	bl	0 <__assert_fail>
     f44:	ldr	r0, [fp, #-12]
     f48:	movw	r1, #0
     f4c:	movt	r1, #0
     f50:	bl	0 <fprintf>
     f54:	sub	sp, fp, #8
     f58:	pop	{r4, r5, fp, pc}

00000f5c <write_index>:
     f5c:	push	{fp, lr}
     f60:	mov	fp, sp
     f64:	sub	sp, sp, #24
     f68:	str	r0, [fp, #-4]
     f6c:	movw	r0, #0
     f70:	str	r0, [fp, #-8]
     f74:	str	r0, [sp, #12]
     f78:	ldr	r0, [sp, #12]
     f7c:	movw	r1, #0
     f80:	movt	r1, #0
     f84:	ldr	r1, [r1, #136]	; 0x88
     f88:	cmp	r0, r1
     f8c:	bge	1088 <write_index+0x12c>
     f90:	movw	r0, #0
     f94:	movt	r0, #0
     f98:	add	r0, r0, #8
     f9c:	ldr	r1, [sp, #12]
     fa0:	movw	r2, #0
     fa4:	movt	r2, #0
     fa8:	add	r1, r2, r1, lsl #2
     fac:	add	r1, r1, #8
     fb0:	ldr	r1, [r1]
     fb4:	str	r0, [sp]
     fb8:	mov	r0, r1
     fbc:	add	r1, sp, #8
     fc0:	bl	0 <coda_type_get_class>
     fc4:	cmp	r0, #0
     fc8:	beq	fd8 <write_index+0x7c>
     fcc:	movw	r0, #0
     fd0:	movt	r0, #0
     fd4:	blx	r0
     fd8:	ldr	r0, [sp, #8]
     fdc:	cmp	r0, #1
     fe0:	bne	1074 <write_index+0x118>
     fe4:	movw	r0, #0
     fe8:	str	r0, [sp, #4]
     fec:	movw	r0, #0
     ff0:	movt	r0, #0
     ff4:	add	r0, r0, #800	; 0x320
     ff8:	ldr	r1, [sp, #4]
     ffc:	ldr	r2, [fp, #-8]
    1000:	movw	r3, #80	; 0x50
    1004:	mul	r2, r2, r3
    1008:	add	r0, r0, r2
    100c:	ldr	r0, [r0, #4]
    1010:	cmp	r1, r0
    1014:	bge	1068 <write_index+0x10c>
    1018:	ldr	r0, [fp, #-4]
    101c:	ldr	r1, [fp, #-8]
    1020:	add	r1, r1, r1, lsl #2
    1024:	movw	r2, #0
    1028:	movt	r2, #0
    102c:	add	r1, r2, r1, lsl #4
    1030:	add	r1, r1, #848	; 0x350
    1034:	ldr	r2, [sp, #4]
    1038:	add	r1, r1, r2, lsl #2
    103c:	ldr	r2, [r1]
    1040:	movw	r1, #0
    1044:	movt	r1, #0
    1048:	ldr	r3, [r1]
    104c:	movw	r1, #0
    1050:	movt	r1, #0
    1054:	bl	0 <fprintf>
    1058:	ldr	r0, [sp, #4]
    105c:	add	r0, r0, #1
    1060:	str	r0, [sp, #4]
    1064:	b	fec <write_index+0x90>
    1068:	ldr	r0, [fp, #-8]
    106c:	add	r0, r0, #1
    1070:	str	r0, [fp, #-8]
    1074:	b	1078 <write_index+0x11c>
    1078:	ldr	r0, [sp, #12]
    107c:	add	r0, r0, #1
    1080:	str	r0, [sp, #12]
    1084:	b	f78 <write_index+0x1c>
    1088:	mov	sp, fp
    108c:	pop	{fp, pc}
