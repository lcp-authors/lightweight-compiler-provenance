
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-filter.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <codadump_filter_create>:
   0:	push	{r4, r5, r6, r7, fp, lr}
   4:	add	fp, sp, #16
   8:	sub	sp, sp, #16
   c:	mov	r1, #0
  10:	str	r0, [sp, #8]
  14:	cmp	r0, #0
  18:	str	r1, [sp, #4]
  1c:	str	r1, [sp, #12]
  20:	ldrbne	r1, [r0]
  24:	cmpne	r1, #0
  28:	bne	38 <codadump_filter_create+0x38>
  2c:	ldr	r0, [sp, #4]
  30:	sub	sp, fp, #16
  34:	pop	{r4, r5, r6, r7, fp, pc}
  38:	add	r4, sp, #12
  3c:	add	r5, sp, #8
  40:	add	r6, sp, #4
  44:	mov	r7, #0
  48:	mov	r1, r4
  4c:	mov	r2, r5
  50:	bl	1d4 <get_filter_item>
  54:	ldr	r1, [sp, #12]
  58:	cmp	r1, #0
  5c:	beq	80 <codadump_filter_create+0x80>
  60:	mov	r0, r6
  64:	bl	440 <add_filter>
  68:	ldr	r0, [sp, #8]
  6c:	str	r7, [sp, #12]
  70:	ldrb	r1, [r0]
  74:	cmp	r1, #0
  78:	bne	48 <codadump_filter_create+0x48>
  7c:	b	2c <codadump_filter_create+0x2c>
  80:	add	r0, sp, #4
  84:	bl	8c <codadump_filter_remove>
  88:	b	2c <codadump_filter_create+0x2c>

0000008c <codadump_filter_remove>:
  8c:	push	{r4, sl, fp, lr}
  90:	add	fp, sp, #8
  94:	cmp	r0, #0
  98:	beq	118 <codadump_filter_remove+0x8c>
  9c:	mov	r4, r0
  a0:	ldr	r0, [r0]
  a4:	cmp	r0, #0
  a8:	popeq	{r4, sl, fp, pc}
  ac:	mov	r1, r0
  b0:	ldr	r2, [r1, #8]!
  b4:	cmp	r2, #0
  b8:	beq	c8 <codadump_filter_remove+0x3c>
  bc:	mov	r0, r1
  c0:	bl	8c <codadump_filter_remove>
  c4:	ldr	r0, [r4]
  c8:	mov	r1, r0
  cc:	ldr	r2, [r1, #4]!
  d0:	cmp	r2, #0
  d4:	beq	e4 <codadump_filter_remove+0x58>
  d8:	mov	r0, r1
  dc:	bl	8c <codadump_filter_remove>
  e0:	ldr	r0, [r4]
  e4:	ldr	r1, [r0]
  e8:	cmp	r1, #0
  ec:	beq	108 <codadump_filter_remove+0x7c>
  f0:	mov	r0, r1
  f4:	bl	0 <free>
  f8:	ldr	r0, [r4]
  fc:	mov	r1, #0
 100:	str	r1, [r0]
 104:	ldr	r0, [r4]
 108:	bl	0 <free>
 10c:	mov	r0, #0
 110:	str	r0, [r4]
 114:	pop	{r4, sl, fp, pc}
 118:	movw	r0, #0
 11c:	movw	r1, #0
 120:	movw	r3, #0
 124:	mov	r2, #192	; 0xc0
 128:	movt	r0, #0
 12c:	movt	r1, #0
 130:	movt	r3, #0
 134:	bl	0 <__assert_fail>

00000138 <codadump_filter_get_fieldname>:
 138:	cmp	r0, #0
 13c:	ldrne	r0, [r0]
 140:	bxne	lr
 144:	push	{fp, lr}
 148:	mov	fp, sp
 14c:	movw	r0, #0
 150:	movw	r1, #0
 154:	movw	r3, #0
 158:	mov	r2, #216	; 0xd8
 15c:	movt	r0, #0
 160:	movt	r1, #0
 164:	movt	r3, #0
 168:	bl	0 <__assert_fail>

0000016c <codadump_filter_get_subfilter>:
 16c:	cmp	r0, #0
 170:	ldrne	r0, [r0, #4]
 174:	bxne	lr
 178:	push	{fp, lr}
 17c:	mov	fp, sp
 180:	movw	r0, #0
 184:	movw	r1, #0
 188:	movw	r3, #0
 18c:	mov	r2, #223	; 0xdf
 190:	movt	r0, #0
 194:	movt	r1, #0
 198:	movt	r3, #0
 19c:	bl	0 <__assert_fail>

000001a0 <codadump_filter_get_next_filter>:
 1a0:	cmp	r0, #0
 1a4:	ldrne	r0, [r0, #8]
 1a8:	bxne	lr
 1ac:	push	{fp, lr}
 1b0:	mov	fp, sp
 1b4:	movw	r0, #0
 1b8:	movw	r1, #0
 1bc:	movw	r3, #0
 1c0:	mov	r2, #230	; 0xe6
 1c4:	movt	r0, #0
 1c8:	movt	r1, #0
 1cc:	movt	r3, #0
 1d0:	bl	0 <__assert_fail>

000001d4 <get_filter_item>:
 1d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 1d8:	add	fp, sp, #24
 1dc:	sub	sp, sp, #8
 1e0:	cmp	r0, #0
 1e4:	beq	3e0 <get_filter_item+0x20c>
 1e8:	mov	r9, r1
 1ec:	cmp	r1, #0
 1f0:	beq	400 <get_filter_item+0x22c>
 1f4:	mov	r8, r2
 1f8:	cmp	r2, #0
 1fc:	beq	420 <get_filter_item+0x24c>
 200:	movw	r4, #3
 204:	mov	r6, r0
 208:	mov	r1, #1
 20c:	movt	r4, #128	; 0x80
 210:	b	218 <get_filter_item+0x44>
 214:	add	r6, r6, #1
 218:	ldrb	r0, [r6]
 21c:	sub	r2, r0, #9
 220:	cmp	r2, #23
 224:	bhi	230 <get_filter_item+0x5c>
 228:	tst	r4, r1, lsl r2
 22c:	bne	214 <get_filter_item+0x40>
 230:	mov	r7, #0
 234:	mvn	r1, #43	; 0x2b
 238:	mov	r2, #1
 23c:	movw	r3, #32773	; 0x8005
 240:	b	250 <get_filter_item+0x7c>
 244:	add	r0, r6, r7
 248:	add	r7, r7, #1
 24c:	ldrb	r0, [r0, #1]
 250:	uxtab	r5, r1, r0
 254:	cmp	r5, #15
 258:	bhi	264 <get_filter_item+0x90>
 25c:	tst	r3, r2, lsl r5
 260:	bne	270 <get_filter_item+0x9c>
 264:	uxtb	r0, r0
 268:	cmp	r0, #0
 26c:	bne	244 <get_filter_item+0x70>
 270:	cmp	r7, #0
 274:	beq	384 <get_filter_item+0x1b0>
 278:	mov	r0, #12
 27c:	bl	0 <malloc>
 280:	cmp	r0, #0
 284:	str	r0, [r9]
 288:	bne	2b4 <get_filter_item+0xe0>
 28c:	movw	r1, #0
 290:	movw	r3, #0
 294:	mov	r0, #69	; 0x45
 298:	mov	r2, #12
 29c:	str	r0, [sp]
 2a0:	movt	r1, #0
 2a4:	movt	r3, #0
 2a8:	mvn	r0, #0
 2ac:	bl	0 <coda_set_error>
 2b0:	bl	0 <handle_coda_error>
 2b4:	add	r5, r7, #1
 2b8:	mov	r0, r5
 2bc:	bl	0 <malloc>
 2c0:	ldr	r1, [r9]
 2c4:	str	r0, [r1]
 2c8:	ldr	r0, [r9]
 2cc:	ldr	r0, [r0]
 2d0:	cmp	r0, #0
 2d4:	bne	308 <get_filter_item+0x134>
 2d8:	movw	r1, #0
 2dc:	movw	r3, #0
 2e0:	mov	r0, #76	; 0x4c
 2e4:	mov	r2, r5
 2e8:	str	r0, [sp]
 2ec:	movt	r1, #0
 2f0:	movt	r3, #0
 2f4:	mvn	r0, #0
 2f8:	bl	0 <coda_set_error>
 2fc:	bl	0 <handle_coda_error>
 300:	ldr	r0, [r9]
 304:	ldr	r0, [r0]
 308:	mov	r1, r6
 30c:	mov	r2, r7
 310:	add	r5, r6, r7
 314:	bl	0 <strncpy>
 318:	ldr	r0, [r9]
 31c:	mov	r1, #0
 320:	str	r1, [r0, #4]
 324:	ldr	r0, [r9]
 328:	str	r1, [r0, #8]
 32c:	mov	r1, #1
 330:	ldr	r0, [r9]
 334:	ldr	r0, [r0]
 338:	add	r0, r0, r7
 33c:	b	344 <get_filter_item+0x170>
 340:	sub	r0, r0, #1
 344:	ldrb	r2, [r0, #-1]
 348:	sub	r2, r2, #9
 34c:	cmp	r2, #23
 350:	bhi	35c <get_filter_item+0x188>
 354:	tst	r4, r1, lsl r2
 358:	bne	340 <get_filter_item+0x16c>
 35c:	mov	r1, #0
 360:	strb	r1, [r0]
 364:	ldrb	r0, [r6, r7]
 368:	cmp	r0, #44	; 0x2c
 36c:	cmpne	r0, #59	; 0x3b
 370:	bne	394 <get_filter_item+0x1c0>
 374:	add	r0, r5, #1
 378:	str	r0, [r8]
 37c:	sub	sp, fp, #24
 380:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 384:	mov	r0, #0
 388:	str	r0, [r9]
 38c:	sub	sp, fp, #24
 390:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 394:	cmp	r0, #46	; 0x2e
 398:	strne	r5, [r8]
 39c:	subne	sp, fp, #24
 3a0:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
 3a4:	ldr	r1, [r9]
 3a8:	add	r0, r5, #1
 3ac:	mov	r2, r8
 3b0:	add	r1, r1, #4
 3b4:	bl	1d4 <get_filter_item>
 3b8:	ldr	r0, [r9]
 3bc:	ldr	r0, [r0, #4]
 3c0:	cmp	r0, #0
 3c4:	beq	3d0 <get_filter_item+0x1fc>
 3c8:	sub	sp, fp, #24
 3cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 3d0:	mov	r0, r9
 3d4:	sub	sp, fp, #24
 3d8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
 3dc:	b	8c <codadump_filter_remove>
 3e0:	movw	r0, #0
 3e4:	movw	r1, #0
 3e8:	movw	r3, #0
 3ec:	mov	r2, #44	; 0x2c
 3f0:	movt	r0, #0
 3f4:	movt	r1, #0
 3f8:	movt	r3, #0
 3fc:	bl	0 <__assert_fail>
 400:	movw	r0, #0
 404:	movw	r1, #0
 408:	movw	r3, #0
 40c:	mov	r2, #45	; 0x2d
 410:	movt	r0, #0
 414:	movt	r1, #0
 418:	movt	r3, #0
 41c:	bl	0 <__assert_fail>
 420:	movw	r0, #0
 424:	movw	r1, #0
 428:	movw	r3, #0
 42c:	mov	r2, #46	; 0x2e
 430:	movt	r0, #0
 434:	movt	r1, #0
 438:	movt	r3, #0
 43c:	bl	0 <__assert_fail>

00000440 <add_filter>:
 440:	push	{r4, r5, fp, lr}
 444:	add	fp, sp, #8
 448:	sub	sp, sp, #8
 44c:	cmp	r0, #0
 450:	str	r1, [sp, #4]
 454:	beq	4f8 <add_filter+0xb8>
 458:	mov	r4, r1
 45c:	cmp	r1, #0
 460:	beq	4dc <add_filter+0x9c>
 464:	ldr	r5, [r0]
 468:	cmp	r5, #0
 46c:	streq	r4, [r0]
 470:	subeq	sp, fp, #8
 474:	popeq	{r4, r5, fp, pc}
 478:	ldr	r1, [r4]
 47c:	ldr	r0, [r5]
 480:	bl	0 <strcmp>
 484:	cmp	r0, #0
 488:	beq	4ac <add_filter+0x6c>
 48c:	ldr	r0, [r5, #8]!
 490:	cmp	r0, #0
 494:	beq	4d8 <add_filter+0x98>
 498:	mov	r0, r5
 49c:	mov	r1, r4
 4a0:	sub	sp, fp, #8
 4a4:	pop	{r4, r5, fp, lr}
 4a8:	b	440 <add_filter>
 4ac:	ldr	r0, [r5, #4]!
 4b0:	cmp	r0, #0
 4b4:	beq	4e8 <add_filter+0xa8>
 4b8:	ldr	r1, [r4, #4]
 4bc:	mov	r0, r5
 4c0:	cmp	r1, #0
 4c4:	beq	4e4 <add_filter+0xa4>
 4c8:	bl	440 <add_filter>
 4cc:	mov	r0, #0
 4d0:	str	r0, [r4, #4]
 4d4:	b	4e8 <add_filter+0xa8>
 4d8:	str	r4, [r5]
 4dc:	sub	sp, fp, #8
 4e0:	pop	{r4, r5, fp, pc}
 4e4:	bl	8c <codadump_filter_remove>
 4e8:	add	r0, sp, #4
 4ec:	bl	8c <codadump_filter_remove>
 4f0:	sub	sp, fp, #8
 4f4:	pop	{r4, r5, fp, pc}
 4f8:	movw	r0, #0
 4fc:	movw	r1, #0
 500:	movw	r3, #0
 504:	mov	r2, #117	; 0x75
 508:	movt	r0, #0
 50c:	movt	r1, #0
 510:	movt	r3, #0
 514:	bl	0 <__assert_fail>
