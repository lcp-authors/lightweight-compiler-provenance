
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codaeval.dir/tools/codaeval/codaeval.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <eval_expression>:
   0:	ldr	r2, [pc, #1072]	; 438 <eval_expression+0x438>
   4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8:	sub	sp, sp, #44	; 0x2c
   c:	ldr	r3, [r2]
  10:	cmp	r3, #5
  14:	ldrls	pc, [pc, r3, lsl #2]
  18:	b	430 <eval_expression+0x430>
  1c:	.word	0x00000048
  20:	.word	0x00000088
  24:	.word	0x000000c0
  28:	.word	0x000000f0
  2c:	.word	0x00000034
  30:	.word	0x00000034
  34:	ldr	r3, [pc, #1024]	; 43c <eval_expression+0x43c>
  38:	mov	r2, #230	; 0xe6
  3c:	ldr	r1, [pc, #1020]	; 440 <eval_expression+0x440>
  40:	ldr	r0, [pc, #1020]	; 444 <eval_expression+0x444>
  44:	bl	0 <__assert_fail>
  48:	mov	r1, r0
  4c:	ldr	r0, [r2, #4]
  50:	add	r2, sp, #16
  54:	bl	0 <coda_expression_eval_bool>
  58:	subs	r5, r0, #0
  5c:	bne	40c <eval_expression+0x40c>
  60:	ldr	r0, [sp, #16]
  64:	ldr	r2, [pc, #988]	; 448 <eval_expression+0x448>
  68:	ldr	r3, [pc, #988]	; 44c <eval_expression+0x44c>
  6c:	cmp	r0, #0
  70:	movne	r0, r2
  74:	moveq	r0, r3
  78:	bl	0 <puts>
  7c:	mov	r0, r5
  80:	add	sp, sp, #44	; 0x2c
  84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  88:	mov	r1, r0
  8c:	ldr	r0, [r2, #4]
  90:	add	r2, sp, #8
  94:	bl	0 <coda_expression_eval_integer>
  98:	subs	r5, r0, #0
  9c:	bne	3e8 <eval_expression+0x3e8>
  a0:	ldrd	r0, [sp, #8]
  a4:	add	r2, sp, #16
  a8:	bl	0 <coda_str64>
  ac:	add	r0, sp, #16
  b0:	bl	0 <puts>
  b4:	mov	r0, r5
  b8:	add	sp, sp, #44	; 0x2c
  bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  c0:	mov	r1, r0
  c4:	ldr	r0, [r2, #4]
  c8:	add	r2, sp, #16
  cc:	bl	0 <coda_expression_eval_float>
  d0:	subs	r5, r0, #0
  d4:	bne	3c4 <eval_expression+0x3c4>
  d8:	ldrd	r2, [sp, #16]
  dc:	ldr	r0, [pc, #876]	; 450 <eval_expression+0x450>
  e0:	bl	0 <printf>
  e4:	mov	r0, r5
  e8:	add	sp, sp, #44	; 0x2c
  ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  f0:	mov	r1, r0
  f4:	mov	ip, #0
  f8:	ldr	r0, [r2, #4]
  fc:	add	r3, sp, #16
 100:	add	r2, sp, #8
 104:	str	ip, [sp, #8]
 108:	bl	0 <coda_expression_eval_string>
 10c:	subs	r5, r0, #0
 110:	bne	3a0 <eval_expression+0x3a0>
 114:	ldr	fp, [sp, #8]
 118:	ldr	r0, [sp, #16]
 11c:	cmp	fp, #0
 120:	cmpne	r0, #0
 124:	beq	2c4 <eval_expression+0x2c4>
 128:	cmp	r0, #0
 12c:	blt	38c <eval_expression+0x38c>
 130:	ldr	sl, [pc, #796]	; 454 <eval_expression+0x454>
 134:	ldr	r9, [pc, #796]	; 458 <eval_expression+0x458>
 138:	ldr	r8, [pc, #796]	; 45c <eval_expression+0x45c>
 13c:	ldr	r7, [pc, #796]	; 460 <eval_expression+0x460>
 140:	ldr	r6, [pc, #796]	; 464 <eval_expression+0x464>
 144:	add	r4, fp, r0
 148:	ldrb	r1, [fp], #1
 14c:	sub	r2, r1, #7
 150:	cmp	r2, #85	; 0x55
 154:	ldrls	pc, [pc, r2, lsl #2]
 158:	b	354 <eval_expression+0x354>
 15c:	.word	0x00000348
 160:	.word	0x0000033c
 164:	.word	0x00000330
 168:	.word	0x00000324
 16c:	.word	0x00000318
 170:	.word	0x0000030c
 174:	.word	0x00000300
 178:	.word	0x00000354
 17c:	.word	0x00000354
 180:	.word	0x00000354
 184:	.word	0x00000354
 188:	.word	0x00000354
 18c:	.word	0x00000354
 190:	.word	0x00000354
 194:	.word	0x00000354
 198:	.word	0x00000354
 19c:	.word	0x00000354
 1a0:	.word	0x00000354
 1a4:	.word	0x00000354
 1a8:	.word	0x00000354
 1ac:	.word	0x000002f4
 1b0:	.word	0x00000354
 1b4:	.word	0x00000354
 1b8:	.word	0x00000354
 1bc:	.word	0x00000354
 1c0:	.word	0x00000354
 1c4:	.word	0x00000354
 1c8:	.word	0x000002e8
 1cc:	.word	0x00000354
 1d0:	.word	0x00000354
 1d4:	.word	0x00000354
 1d8:	.word	0x00000354
 1dc:	.word	0x00000354
 1e0:	.word	0x00000354
 1e4:	.word	0x00000354
 1e8:	.word	0x00000354
 1ec:	.word	0x00000354
 1f0:	.word	0x00000354
 1f4:	.word	0x00000354
 1f8:	.word	0x00000354
 1fc:	.word	0x00000354
 200:	.word	0x00000354
 204:	.word	0x00000354
 208:	.word	0x00000354
 20c:	.word	0x00000354
 210:	.word	0x00000354
 214:	.word	0x00000354
 218:	.word	0x00000354
 21c:	.word	0x00000354
 220:	.word	0x00000354
 224:	.word	0x00000354
 228:	.word	0x00000354
 22c:	.word	0x00000354
 230:	.word	0x00000354
 234:	.word	0x00000354
 238:	.word	0x00000354
 23c:	.word	0x00000354
 240:	.word	0x00000354
 244:	.word	0x00000354
 248:	.word	0x00000354
 24c:	.word	0x00000354
 250:	.word	0x00000354
 254:	.word	0x00000354
 258:	.word	0x00000354
 25c:	.word	0x00000354
 260:	.word	0x00000354
 264:	.word	0x00000354
 268:	.word	0x00000354
 26c:	.word	0x00000354
 270:	.word	0x00000354
 274:	.word	0x00000354
 278:	.word	0x00000354
 27c:	.word	0x00000354
 280:	.word	0x00000354
 284:	.word	0x00000354
 288:	.word	0x00000354
 28c:	.word	0x00000354
 290:	.word	0x00000354
 294:	.word	0x00000354
 298:	.word	0x00000354
 29c:	.word	0x00000354
 2a0:	.word	0x00000354
 2a4:	.word	0x00000354
 2a8:	.word	0x00000354
 2ac:	.word	0x00000354
 2b0:	.word	0x000002b4
 2b4:	mov	r0, r9
 2b8:	bl	0 <printf>
 2bc:	cmp	r4, fp
 2c0:	bne	148 <eval_expression+0x148>
 2c4:	mov	r0, #10
 2c8:	bl	0 <putchar>
 2cc:	ldr	r0, [sp, #8]
 2d0:	cmp	r0, #0
 2d4:	beq	7c <eval_expression+0x7c>
 2d8:	bl	0 <free>
 2dc:	mov	r0, r5
 2e0:	add	sp, sp, #44	; 0x2c
 2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2e8:	mov	r0, sl
 2ec:	bl	0 <printf>
 2f0:	b	2bc <eval_expression+0x2bc>
 2f4:	ldr	r0, [pc, #364]	; 468 <eval_expression+0x468>
 2f8:	bl	0 <printf>
 2fc:	b	2bc <eval_expression+0x2bc>
 300:	mov	r0, r6
 304:	bl	0 <printf>
 308:	b	2bc <eval_expression+0x2bc>
 30c:	ldr	r0, [pc, #344]	; 46c <eval_expression+0x46c>
 310:	bl	0 <printf>
 314:	b	2bc <eval_expression+0x2bc>
 318:	mov	r0, r8
 31c:	bl	0 <printf>
 320:	b	2bc <eval_expression+0x2bc>
 324:	ldr	r0, [pc, #324]	; 470 <eval_expression+0x470>
 328:	bl	0 <printf>
 32c:	b	2bc <eval_expression+0x2bc>
 330:	mov	r0, r7
 334:	bl	0 <printf>
 338:	b	2bc <eval_expression+0x2bc>
 33c:	ldr	r0, [pc, #304]	; 474 <eval_expression+0x474>
 340:	bl	0 <printf>
 344:	b	2bc <eval_expression+0x2bc>
 348:	ldr	r0, [pc, #296]	; 478 <eval_expression+0x478>
 34c:	bl	0 <printf>
 350:	b	2bc <eval_expression+0x2bc>
 354:	str	r1, [sp, #4]
 358:	bl	0 <__ctype_b_loc>
 35c:	ldr	r1, [sp, #4]
 360:	lsl	r2, r1, #1
 364:	ldr	r0, [r0]
 368:	ldrh	r2, [r0, r2]
 36c:	tst	r2, #16384	; 0x4000
 370:	bne	380 <eval_expression+0x380>
 374:	ldr	r0, [pc, #256]	; 47c <eval_expression+0x47c>
 378:	bl	0 <printf>
 37c:	b	2bc <eval_expression+0x2bc>
 380:	mov	r0, r1
 384:	bl	0 <putchar>
 388:	b	2bc <eval_expression+0x2bc>
 38c:	mov	r0, fp
 390:	bl	0 <strlen>
 394:	cmp	r0, #0
 398:	bgt	130 <eval_expression+0x130>
 39c:	b	2c4 <eval_expression+0x2c4>
 3a0:	bl	0 <coda_get_errno>
 3a4:	mvn	r5, #0
 3a8:	ldr	r0, [r0]
 3ac:	bl	0 <coda_errno_to_string>
 3b0:	ldr	r1, [pc, #200]	; 480 <eval_expression+0x480>
 3b4:	mov	r2, r0
 3b8:	mvn	r0, #400	; 0x190
 3bc:	bl	0 <coda_set_error>
 3c0:	b	7c <eval_expression+0x7c>
 3c4:	bl	0 <coda_get_errno>
 3c8:	mvn	r5, #0
 3cc:	ldr	r0, [r0]
 3d0:	bl	0 <coda_errno_to_string>
 3d4:	ldr	r1, [pc, #168]	; 484 <eval_expression+0x484>
 3d8:	mov	r2, r0
 3dc:	mvn	r0, #400	; 0x190
 3e0:	bl	0 <coda_set_error>
 3e4:	b	7c <eval_expression+0x7c>
 3e8:	bl	0 <coda_get_errno>
 3ec:	mvn	r5, #0
 3f0:	ldr	r0, [r0]
 3f4:	bl	0 <coda_errno_to_string>
 3f8:	ldr	r1, [pc, #136]	; 488 <eval_expression+0x488>
 3fc:	mov	r2, r0
 400:	mvn	r0, #400	; 0x190
 404:	bl	0 <coda_set_error>
 408:	b	7c <eval_expression+0x7c>
 40c:	bl	0 <coda_get_errno>
 410:	mvn	r5, #0
 414:	ldr	r0, [r0]
 418:	bl	0 <coda_errno_to_string>
 41c:	ldr	r1, [pc, #104]	; 48c <eval_expression+0x48c>
 420:	mov	r2, r0
 424:	mvn	r0, #400	; 0x190
 428:	bl	0 <coda_set_error>
 42c:	b	7c <eval_expression+0x7c>
 430:	mov	r5, #0
 434:	b	7c <eval_expression+0x7c>
	...
 440:	.word	0x000007d0
 444:	.word	0x00000820
 448:	.word	0x000006e0
 44c:	.word	0x000006e8
 450:	.word	0x00000770
 454:	.word	0x000007c4
 458:	.word	0x000007c0
 45c:	.word	0x000007bc
 460:	.word	0x000007b8
 464:	.word	0x000007b4
 468:	.word	0x000007a0
 46c:	.word	0x000007ac
 470:	.word	0x000007b0
 474:	.word	0x000007a8
 478:	.word	0x000007a4
 47c:	.word	0x000007c8
 480:	.word	0x00000778
 484:	.word	0x00000740
 488:	.word	0x00000718
 48c:	.word	0x000006f0

00000490 <eval_expression_for_file>:
 490:	push	{r4, r5, lr}
 494:	sub	sp, sp, #532	; 0x214
 498:	add	r1, sp, #528	; 0x210
 49c:	mov	r3, #0
 4a0:	str	r3, [r1, #-524]!	; 0xfffffdf4
 4a4:	mov	r5, r0
 4a8:	bl	0 <coda_open>
 4ac:	cmp	r0, #0
 4b0:	movne	r4, #1
 4b4:	beq	4c4 <eval_expression_for_file+0x34>
 4b8:	mov	r0, r4
 4bc:	add	sp, sp, #532	; 0x214
 4c0:	pop	{r4, r5, pc}
 4c4:	add	r0, sp, #8
 4c8:	ldr	r1, [sp, #4]
 4cc:	bl	0 <coda_cursor_set_product>
 4d0:	subs	r4, r0, #0
 4d4:	bne	550 <eval_expression_for_file+0xc0>
 4d8:	ldr	r3, [pc, #176]	; 590 <eval_expression_for_file+0x100>
 4dc:	ldr	r0, [r3, #8]
 4e0:	cmp	r0, #0
 4e4:	beq	4f8 <eval_expression_for_file+0x68>
 4e8:	add	r1, sp, #8
 4ec:	bl	0 <coda_expression_eval_node>
 4f0:	cmp	r0, #0
 4f4:	bne	560 <eval_expression_for_file+0xd0>
 4f8:	add	r0, sp, #8
 4fc:	bl	0 <eval_expression>
 500:	cmp	r0, #0
 504:	bne	524 <eval_expression_for_file+0x94>
 508:	ldr	r0, [sp, #4]
 50c:	bl	0 <coda_close>
 510:	adds	r4, r0, #0
 514:	movne	r4, #1
 518:	mov	r0, r4
 51c:	add	sp, sp, #532	; 0x214
 520:	pop	{r4, r5, pc}
 524:	ldr	r3, [pc, #104]	; 594 <eval_expression_for_file+0x104>
 528:	ldr	r4, [r3]
 52c:	bl	0 <coda_get_errno>
 530:	ldr	r0, [r0]
 534:	bl	0 <coda_errno_to_string>
 538:	mov	r3, r5
 53c:	ldr	r1, [pc, #84]	; 598 <eval_expression_for_file+0x108>
 540:	mov	r2, r0
 544:	mov	r0, r4
 548:	bl	0 <fprintf>
 54c:	b	508 <eval_expression_for_file+0x78>
 550:	ldr	r0, [sp, #4]
 554:	bl	0 <coda_close>
 558:	mov	r4, #1
 55c:	b	4b8 <eval_expression_for_file+0x28>
 560:	ldr	r3, [pc, #44]	; 594 <eval_expression_for_file+0x104>
 564:	ldr	r5, [r3]
 568:	bl	0 <coda_get_errno>
 56c:	ldr	r0, [r0]
 570:	bl	0 <coda_errno_to_string>
 574:	ldr	r1, [pc, #32]	; 59c <eval_expression_for_file+0x10c>
 578:	mov	r2, r0
 57c:	mov	r0, r5
 580:	bl	0 <fprintf>
 584:	ldr	r0, [sp, #4]
 588:	bl	0 <coda_close>
 58c:	b	4b8 <eval_expression_for_file+0x28>
	...
 598:	.word	0x00000854
 59c:	.word	0x00000824

000005a0 <callback>:
 5a0:	push	{r4, lr}
 5a4:	subs	r4, r1, #0
 5a8:	mov	r1, r0
 5ac:	beq	5d0 <callback+0x30>
 5b0:	cmp	r4, #2
 5b4:	beq	5f4 <callback+0x54>
 5b8:	cmp	r4, #1
 5bc:	beq	60c <callback+0x6c>
 5c0:	cmp	r4, #4
 5c4:	beq	5ec <callback+0x4c>
 5c8:	mov	r0, #0
 5cc:	pop	{r4, pc}
 5d0:	ldr	r0, [pc, #80]	; 628 <callback+0x88>
 5d4:	mov	r3, r1
 5d8:	ldr	r1, [pc, #76]	; 62c <callback+0x8c>
 5dc:	ldr	r0, [r0]
 5e0:	bl	0 <fprintf>
 5e4:	mov	r0, r4
 5e8:	pop	{r4, pc}
 5ec:	pop	{r4, lr}
 5f0:	b	490 <eval_expression_for_file>
 5f4:	ldr	r3, [pc, #44]	; 628 <callback+0x88>
 5f8:	mov	r2, r0
 5fc:	ldr	r1, [pc, #44]	; 630 <callback+0x90>
 600:	ldr	r0, [r3]
 604:	bl	0 <fprintf>
 608:	b	5c8 <callback+0x28>
 60c:	ldr	r0, [pc, #20]	; 628 <callback+0x88>
 610:	mov	r3, r2
 614:	mov	r2, r1
 618:	ldr	r0, [r0]
 61c:	ldr	r1, [pc, #16]	; 634 <callback+0x94>
 620:	bl	0 <fprintf>
 624:	b	5c8 <callback+0x28>
 628:	.word	0x00000000
 62c:	.word	0x00000854
 630:	.word	0x00000868
 634:	.word	0x00000890

Disassembly of section .text.unlikely:

00000000 <print_help>:
   0:	push	{r4, lr}
   4:	ldr	r0, [pc, #300]	; 138 <print_help+0x138>
   8:	bl	0 <puts>
   c:	ldr	r0, [pc, #296]	; 13c <print_help+0x13c>
  10:	bl	0 <puts>
  14:	ldr	r0, [pc, #292]	; 140 <print_help+0x140>
  18:	bl	0 <puts>
  1c:	ldr	r0, [pc, #288]	; 144 <print_help+0x144>
  20:	bl	0 <puts>
  24:	ldr	r0, [pc, #284]	; 148 <print_help+0x148>
  28:	bl	0 <puts>
  2c:	ldr	r0, [pc, #280]	; 14c <print_help+0x14c>
  30:	bl	0 <puts>
  34:	ldr	r0, [pc, #276]	; 150 <print_help+0x150>
  38:	bl	0 <puts>
  3c:	mov	r0, #10
  40:	bl	0 <putchar>
  44:	ldr	r0, [pc, #264]	; 154 <print_help+0x154>
  48:	bl	0 <puts>
  4c:	ldr	r0, [pc, #260]	; 158 <print_help+0x158>
  50:	bl	0 <puts>
  54:	ldr	r0, [pc, #256]	; 15c <print_help+0x15c>
  58:	bl	0 <puts>
  5c:	ldr	r0, [pc, #252]	; 160 <print_help+0x160>
  60:	bl	0 <puts>
  64:	ldr	r0, [pc, #248]	; 164 <print_help+0x164>
  68:	bl	0 <puts>
  6c:	ldr	r0, [pc, #244]	; 168 <print_help+0x168>
  70:	bl	0 <puts>
  74:	ldr	r0, [pc, #240]	; 16c <print_help+0x16c>
  78:	bl	0 <puts>
  7c:	ldr	r0, [pc, #236]	; 170 <print_help+0x170>
  80:	bl	0 <puts>
  84:	ldr	r0, [pc, #232]	; 174 <print_help+0x174>
  88:	bl	0 <puts>
  8c:	ldr	r0, [pc, #228]	; 178 <print_help+0x178>
  90:	bl	0 <puts>
  94:	ldr	r0, [pc, #224]	; 17c <print_help+0x17c>
  98:	bl	0 <puts>
  9c:	ldr	r0, [pc, #220]	; 180 <print_help+0x180>
  a0:	bl	0 <puts>
  a4:	mov	r0, #10
  a8:	bl	0 <putchar>
  ac:	ldr	r0, [pc, #208]	; 184 <print_help+0x184>
  b0:	bl	0 <puts>
  b4:	ldr	r0, [pc, #204]	; 188 <print_help+0x188>
  b8:	bl	0 <puts>
  bc:	mov	r0, #10
  c0:	bl	0 <putchar>
  c4:	ldr	r0, [pc, #192]	; 18c <print_help+0x18c>
  c8:	bl	0 <puts>
  cc:	ldr	r0, [pc, #188]	; 190 <print_help+0x190>
  d0:	bl	0 <puts>
  d4:	mov	r0, #10
  d8:	bl	0 <putchar>
  dc:	ldr	r0, [pc, #176]	; 194 <print_help+0x194>
  e0:	bl	0 <puts>
  e4:	ldr	r0, [pc, #172]	; 198 <print_help+0x198>
  e8:	bl	0 <puts>
  ec:	mov	r0, #10
  f0:	bl	0 <putchar>
  f4:	ldr	r0, [pc, #160]	; 19c <print_help+0x19c>
  f8:	bl	0 <puts>
  fc:	ldr	r0, [pc, #156]	; 1a0 <print_help+0x1a0>
 100:	bl	0 <puts>
 104:	ldr	r0, [pc, #152]	; 1a4 <print_help+0x1a4>
 108:	bl	0 <puts>
 10c:	ldr	r0, [pc, #148]	; 1a8 <print_help+0x1a8>
 110:	bl	0 <puts>
 114:	ldr	r0, [pc, #144]	; 1ac <print_help+0x1ac>
 118:	bl	0 <puts>
 11c:	ldr	r0, [pc, #140]	; 1b0 <print_help+0x1b0>
 120:	bl	0 <puts>
 124:	ldr	r0, [pc, #136]	; 1b4 <print_help+0x1b4>
 128:	bl	0 <puts>
 12c:	mov	r0, #10
 130:	pop	{r4, lr}
 134:	b	0 <putchar>
 138:	.word	0x00000000
 13c:	.word	0x00000008
 140:	.word	0x00000058
 144:	.word	0x000000a8
 148:	.word	0x000000cc
 14c:	.word	0x00000118
 150:	.word	0x00000164
 154:	.word	0x00000194
 158:	.word	0x000001a8
 15c:	.word	0x000001c0
 160:	.word	0x00000210
 164:	.word	0x00000260
 168:	.word	0x00000288
 16c:	.word	0x000002c4
 170:	.word	0x000002dc
 174:	.word	0x00000328
 178:	.word	0x00000374
 17c:	.word	0x00000394
 180:	.word	0x000003e0
 184:	.word	0x00000410
 188:	.word	0x00000460
 18c:	.word	0x00000478
 190:	.word	0x00000490
 194:	.word	0x000004b0
 198:	.word	0x000004cc
 19c:	.word	0x00000500
 1a0:	.word	0x0000054c
 1a4:	.word	0x00000598
 1a8:	.word	0x000005c8
 1ac:	.word	0x00000614
 1b0:	.word	0x00000660
 1b4:	.word	0x000006a0

Disassembly of section .text.startup:

00000000 <main>:
   0:	cmp	r0, #1
   4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8:	sub	sp, sp, #20
   c:	beq	32c <main+0x32c>
  10:	ldr	r4, [r1, #4]
  14:	mov	r6, r0
  18:	mov	r7, r1
  1c:	mov	r0, r4
  20:	ldr	r1, [pc, #928]	; 3c8 <main+0x3c8>
  24:	bl	0 <strcmp>
  28:	cmp	r0, #0
  2c:	beq	32c <main+0x32c>
  30:	ldr	r1, [pc, #916]	; 3cc <main+0x3cc>
  34:	mov	r0, r4
  38:	bl	0 <strcmp>
  3c:	cmp	r0, #0
  40:	beq	32c <main+0x32c>
  44:	ldr	r1, [pc, #900]	; 3d0 <main+0x3d0>
  48:	mov	r0, r4
  4c:	bl	0 <strcmp>
  50:	cmp	r0, #0
  54:	beq	2d8 <main+0x2d8>
  58:	ldr	r1, [pc, #884]	; 3d4 <main+0x3d4>
  5c:	mov	r0, r4
  60:	bl	0 <strcmp>
  64:	cmp	r0, #0
  68:	beq	2d8 <main+0x2d8>
  6c:	cmp	r6, #2
  70:	ble	88 <main+0x88>
  74:	mov	r0, r4
  78:	ldr	r1, [pc, #856]	; 3d8 <main+0x3d8>
  7c:	bl	0 <strcmp>
  80:	cmp	r0, #0
  84:	beq	1b4 <main+0x1b4>
  88:	ldr	r2, [pc, #844]	; 3dc <main+0x3dc>
  8c:	mov	r1, #0
  90:	ldr	r0, [r7]
  94:	bl	0 <coda_set_definition_path_conditional>
  98:	cmp	r0, #0
  9c:	moveq	fp, #1
  a0:	bne	300 <main+0x300>
  a4:	cmp	r6, fp
  a8:	ble	188 <main+0x188>
  ac:	mov	r3, #1
  b0:	ldr	r8, [pc, #808]	; 3e0 <main+0x3e0>
  b4:	ldr	sl, [pc, #808]	; 3e4 <main+0x3e4>
  b8:	mov	r9, #0
  bc:	str	r3, [sp, #8]
  c0:	b	15c <main+0x15c>
  c4:	mov	r1, sl
  c8:	mov	r0, r4
  cc:	bl	0 <strcmp>
  d0:	cmp	r0, #0
  d4:	beq	178 <main+0x178>
  d8:	ldr	r1, [pc, #776]	; 3e8 <main+0x3e8>
  dc:	mov	r0, r4
  e0:	bl	0 <strcmp>
  e4:	cmp	r0, #0
  e8:	beq	1ac <main+0x1ac>
  ec:	ldr	r1, [pc, #760]	; 3ec <main+0x3ec>
  f0:	mov	r0, r4
  f4:	bl	0 <strcmp>
  f8:	cmp	r0, #0
  fc:	beq	1ac <main+0x1ac>
 100:	ldr	r1, [pc, #744]	; 3f0 <main+0x3f0>
 104:	mov	r0, r4
 108:	bl	0 <strcmp>
 10c:	cmp	r0, #0
 110:	bne	1c4 <main+0x1c4>
 114:	add	r2, fp, #1
 118:	cmp	r6, r2
 11c:	str	r2, [sp, #12]
 120:	ble	1c4 <main+0x1c4>
 124:	add	r5, r7, r5
 128:	ldr	r0, [r5, #4]
 12c:	ldrb	r1, [r0]
 130:	cmp	r1, #45	; 0x2d
 134:	beq	1c4 <main+0x1c4>
 138:	ldr	r1, [pc, #692]	; 3f4 <main+0x3f4>
 13c:	bl	0 <coda_expression_from_string>
 140:	ldr	r2, [sp, #12]
 144:	cmp	r0, #0
 148:	bne	338 <main+0x338>
 14c:	mov	fp, r2
 150:	add	fp, fp, #1
 154:	cmp	r6, fp
 158:	ble	188 <main+0x188>
 15c:	ldr	r4, [r7, fp, lsl #2]
 160:	mov	r1, r8
 164:	mov	r0, r4
 168:	bl	0 <strcmp>
 16c:	lsl	r5, fp, #2
 170:	cmp	r0, #0
 174:	bne	c4 <main+0xc4>
 178:	add	fp, fp, #1
 17c:	cmp	r6, fp
 180:	mov	r9, #1
 184:	bgt	15c <main+0x15c>
 188:	ldr	r3, [pc, #616]	; 3f8 <main+0x3f8>
 18c:	mov	r2, #25
 190:	mov	r1, #1
 194:	ldr	r3, [r3]
 198:	ldr	r0, [pc, #604]	; 3fc <main+0x3fc>
 19c:	bl	0 <fwrite>
 1a0:	bl	0 <main>
 1a4:	mov	r0, #1
 1a8:	bl	0 <exit>
 1ac:	str	r0, [sp, #8]
 1b0:	b	150 <main+0x150>
 1b4:	ldr	r0, [r7, #8]
 1b8:	bl	0 <coda_set_definition_path>
 1bc:	mov	fp, #3
 1c0:	b	a4 <main+0xa4>
 1c4:	ldrb	r2, [r4]
 1c8:	cmp	r2, #45	; 0x2d
 1cc:	beq	188 <main+0x188>
 1d0:	ldr	r5, [pc, #552]	; 400 <main+0x400>
 1d4:	mov	r0, r4
 1d8:	add	r1, r5, #4
 1dc:	bl	0 <coda_expression_from_string>
 1e0:	cmp	r0, #0
 1e4:	bne	2ac <main+0x2ac>
 1e8:	mov	r1, r5
 1ec:	ldr	r0, [r5, #4]
 1f0:	bl	0 <coda_expression_get_type>
 1f4:	cmp	r0, #0
 1f8:	bne	300 <main+0x300>
 1fc:	ldr	r0, [r5]
 200:	sub	r2, r0, #4
 204:	cmp	r2, #1
 208:	bls	3a4 <main+0x3a4>
 20c:	cmp	r9, #0
 210:	bne	24c <main+0x24c>
 214:	add	fp, fp, #1
 218:	cmp	r6, fp
 21c:	bgt	270 <main+0x270>
 220:	ldr	r3, [r5, #8]
 224:	cmp	r3, #0
 228:	bne	384 <main+0x384>
 22c:	ldr	r0, [r5, #4]
 230:	bl	0 <coda_expression_is_constant>
 234:	cmp	r0, #0
 238:	beq	364 <main+0x364>
 23c:	mov	r0, r9
 240:	bl	0 <main>
 244:	cmp	r0, #0
 248:	bne	300 <main+0x300>
 24c:	ldr	r0, [r5, #4]
 250:	bl	0 <coda_expression_delete>
 254:	ldr	r0, [r5, #8]
 258:	cmp	r0, #0
 25c:	beq	264 <main+0x264>
 260:	bl	0 <coda_expression_delete>
 264:	mov	r0, #0
 268:	add	sp, sp, #20
 26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 270:	bl	0 <coda_init>
 274:	cmp	r0, #0
 278:	bne	300 <main+0x300>
 27c:	ldr	r0, [sp, #8]
 280:	bl	0 <coda_set_option_perform_conversions>
 284:	str	r9, [sp]
 288:	add	r2, r7, fp, lsl #2
 28c:	sub	r1, r6, fp
 290:	mov	r0, r9
 294:	ldr	r3, [pc, #360]	; 404 <main+0x404>
 298:	bl	0 <coda_match_filefilter>
 29c:	cmp	r0, #0
 2a0:	bne	300 <main+0x300>
 2a4:	bl	0 <coda_done>
 2a8:	b	24c <main+0x24c>
 2ac:	ldr	r3, [pc, #324]	; 3f8 <main+0x3f8>
 2b0:	ldr	r4, [r3]
 2b4:	bl	0 <coda_get_errno>
 2b8:	ldr	r0, [r0]
 2bc:	bl	0 <coda_errno_to_string>
 2c0:	ldr	r1, [pc, #320]	; 408 <main+0x408>
 2c4:	mov	r2, r0
 2c8:	mov	r0, r4
 2cc:	bl	0 <fprintf>
 2d0:	mov	r0, #1
 2d4:	bl	0 <exit>
 2d8:	bl	0 <coda_get_libcoda_version>
 2dc:	mov	r1, r0
 2e0:	ldr	r0, [pc, #292]	; 40c <main+0x40c>
 2e4:	bl	0 <printf>
 2e8:	ldr	r0, [pc, #288]	; 410 <main+0x410>
 2ec:	bl	0 <puts>
 2f0:	mov	r0, #10
 2f4:	bl	0 <putchar>
 2f8:	mov	r0, #0
 2fc:	bl	0 <exit>
 300:	ldr	r3, [pc, #240]	; 3f8 <main+0x3f8>
 304:	ldr	r4, [r3]
 308:	bl	0 <coda_get_errno>
 30c:	ldr	r0, [r0]
 310:	bl	0 <coda_errno_to_string>
 314:	ldr	r1, [pc, #248]	; 414 <main+0x414>
 318:	mov	r2, r0
 31c:	mov	r0, r4
 320:	bl	0 <fprintf>
 324:	mov	r0, #1
 328:	bl	0 <exit>
 32c:	bl	0 <main>
 330:	mov	r0, #0
 334:	bl	0 <exit>
 338:	ldr	r3, [pc, #184]	; 3f8 <main+0x3f8>
 33c:	ldr	r4, [r3]
 340:	bl	0 <coda_get_errno>
 344:	ldr	r0, [r0]
 348:	bl	0 <coda_errno_to_string>
 34c:	ldr	r1, [pc, #196]	; 418 <main+0x418>
 350:	mov	r2, r0
 354:	mov	r0, r4
 358:	bl	0 <fprintf>
 35c:	mov	r0, #1
 360:	bl	0 <exit>
 364:	ldr	r3, [pc, #140]	; 3f8 <main+0x3f8>
 368:	mov	r2, #111	; 0x6f
 36c:	mov	r1, #1
 370:	ldr	r3, [r3]
 374:	ldr	r0, [pc, #160]	; 41c <main+0x41c>
 378:	bl	0 <fwrite>
 37c:	mov	r0, #1
 380:	bl	0 <exit>
 384:	ldr	r3, [pc, #108]	; 3f8 <main+0x3f8>
 388:	mov	r2, #96	; 0x60
 38c:	mov	r1, #1
 390:	ldr	r3, [r3]
 394:	ldr	r0, [pc, #132]	; 420 <main+0x420>
 398:	bl	0 <fwrite>
 39c:	mov	r0, #1
 3a0:	bl	0 <exit>
 3a4:	ldr	r3, [pc, #76]	; 3f8 <main+0x3f8>
 3a8:	ldr	r4, [r3]
 3ac:	bl	0 <coda_expression_get_type_name>
 3b0:	ldr	r1, [pc, #108]	; 424 <main+0x424>
 3b4:	mov	r2, r0
 3b8:	mov	r0, r4
 3bc:	bl	0 <fprintf>
 3c0:	mov	r0, #1
 3c4:	bl	0 <exit>
 3c8:	.word	0x000008b4
 3cc:	.word	0x000008b8
 3d0:	.word	0x000008c0
 3d4:	.word	0x000008c4
 3d8:	.word	0x00000910
 3dc:	.word	0x00000914
 3e0:	.word	0x0000093c
 3e4:	.word	0x00000940
 3e8:	.word	0x00000948
 3ec:	.word	0x0000094c
 3f0:	.word	0x00000964
 3f4:	.word	0x00000008
 3f8:	.word	0x00000000
 3fc:	.word	0x00000990
	...
 408:	.word	0x000009ac
 40c:	.word	0x000008d0
 410:	.word	0x000008e0
 414:	.word	0x00000930
 418:	.word	0x00000968
 41c:	.word	0x00000a60
 420:	.word	0x000009fc
 424:	.word	0x000009cc
