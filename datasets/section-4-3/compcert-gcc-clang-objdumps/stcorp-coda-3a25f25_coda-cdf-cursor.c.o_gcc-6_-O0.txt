
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #96	; 0x60
       c:	str	r0, [fp, #-80]	; 0xffffffb0
      10:	strd	r2, [fp, #-92]	; 0xffffffa4
      14:	ldr	r3, [fp, #-80]	; 0xffffffb0
      18:	ldr	r3, [r3, #48]	; 0x30
      1c:	cmp	r3, #0
      20:	beq	fc <read_bytes+0xfc>
      24:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      28:	ldrd	r2, [fp, #4]
      2c:	adds	r2, r2, r0
      30:	adc	r3, r3, r1
      34:	ldr	r1, [fp, #-80]	; 0xffffffb0
      38:	ldrd	r0, [r1, #40]	; 0x28
      3c:	cmp	r3, r1
      40:	cmpeq	r2, r0
      44:	bls	d8 <read_bytes+0xd8>
      48:	ldr	r3, [fp, #-80]	; 0xffffffb0
      4c:	ldr	r3, [r3, #16]
      50:	cmp	r3, #0
      54:	beq	68 <read_bytes+0x68>
      58:	ldr	r3, [fp, #-80]	; 0xffffffb0
      5c:	ldr	r3, [r3, #16]
      60:	cmp	r3, #1
      64:	bne	7c <read_bytes+0x7c>
      68:	ldr	r1, [pc, #348]	; 1cc <read_bytes+0x1cc>
      6c:	mvn	r0, #300	; 0x12c
      70:	bl	0 <coda_set_error>
      74:	mvn	r3, #0
      78:	b	1c0 <read_bytes+0x1c0>
      7c:	sub	r3, fp, #28
      80:	mov	r2, r3
      84:	ldrd	r0, [fp, #4]
      88:	bl	0 <coda_str64>
      8c:	sub	r3, fp, #52	; 0x34
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      98:	bl	0 <coda_str64>
      9c:	ldr	r3, [fp, #-80]	; 0xffffffb0
      a0:	ldrd	r0, [r3, #40]	; 0x28
      a4:	sub	r3, fp, #76	; 0x4c
      a8:	mov	r2, r3
      ac:	bl	0 <coda_str64>
      b0:	sub	r1, fp, #52	; 0x34
      b4:	sub	r2, fp, #28
      b8:	sub	r3, fp, #76	; 0x4c
      bc:	str	r3, [sp]
      c0:	mov	r3, r1
      c4:	ldr	r1, [pc, #260]	; 1d0 <read_bytes+0x1d0>
      c8:	mvn	r0, #300	; 0x12c
      cc:	bl	0 <coda_set_error>
      d0:	mvn	r3, #0
      d4:	b	1c0 <read_bytes+0x1c0>
      d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
      dc:	ldr	r2, [r3, #48]	; 0x30
      e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
      e4:	add	r3, r2, r3
      e8:	ldr	r2, [fp, #4]
      ec:	mov	r1, r3
      f0:	ldr	r0, [fp, #12]
      f4:	bl	0 <memcpy>
      f8:	b	1bc <read_bytes+0x1bc>
      fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
     100:	ldr	r3, [r3, #16]
     104:	cmp	r3, #0
     108:	beq	130 <read_bytes+0x130>
     10c:	ldr	r3, [fp, #-80]	; 0xffffffb0
     110:	ldr	r3, [r3, #16]
     114:	cmp	r3, #1
     118:	beq	130 <read_bytes+0x130>
     11c:	ldr	r3, [pc, #176]	; 1d4 <read_bytes+0x1d4>
     120:	mov	r2, #83	; 0x53
     124:	ldr	r1, [pc, #172]	; 1d8 <read_bytes+0x1d8>
     128:	ldr	r0, [pc, #172]	; 1dc <read_bytes+0x1dc>
     12c:	bl	0 <__assert_fail>
     130:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     134:	ldrd	r2, [fp, #4]
     138:	adds	r2, r2, r0
     13c:	adc	r3, r3, r1
     140:	ldr	r1, [fp, #-80]	; 0xffffffb0
     144:	ldrd	r0, [r1, #8]
     148:	cmp	r3, r1
     14c:	cmpeq	r2, r0
     150:	bls	168 <read_bytes+0x168>
     154:	ldr	r1, [pc, #112]	; 1cc <read_bytes+0x1cc>
     158:	mvn	r0, #300	; 0x12c
     15c:	bl	0 <coda_set_error>
     160:	mvn	r3, #0
     164:	b	1c0 <read_bytes+0x1c0>
     168:	ldr	r3, [fp, #-80]	; 0xffffffb0
     16c:	ldr	r0, [r3, #56]	; 0x38
     170:	ldr	r2, [fp, #4]
     174:	ldr	r3, [fp, #-92]	; 0xffffffa4
     178:	ldr	r1, [fp, #12]
     17c:	bl	0 <pread>
     180:	mov	r3, r0
     184:	cmp	r3, #0
     188:	bge	1bc <read_bytes+0x1bc>
     18c:	bl	0 <__errno_location>
     190:	mov	r3, r0
     194:	ldr	r3, [r3]
     198:	mov	r0, r3
     19c:	bl	0 <strerror>
     1a0:	mov	r3, r0
     1a4:	mov	r2, r3
     1a8:	ldr	r1, [pc, #48]	; 1e0 <read_bytes+0x1e0>
     1ac:	mvn	r0, #21
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r3, #0
     1b8:	b	1c0 <read_bytes+0x1c0>
     1bc:	mov	r3, #0
     1c0:	mov	r0, r3
     1c4:	sub	sp, fp, #4
     1c8:	pop	{fp, pc}
     1cc:	.word	0x00000000
     1d0:	.word	0x0000002c
     1d4:	.word	0x00000248
     1d8:	.word	0x00000068
     1dc:	.word	0x000000b8
     1e0:	.word	0x00000108

000001e4 <swap2>:
     1e4:	push	{fp}		; (str fp, [sp, #-4]!)
     1e8:	add	fp, sp, #0
     1ec:	sub	sp, sp, #20
     1f0:	str	r0, [fp, #-16]
     1f4:	ldr	r3, [fp, #-16]
     1f8:	str	r3, [fp, #-8]
     1fc:	ldr	r3, [fp, #-8]
     200:	ldrb	r2, [r3]
     204:	ldr	r3, [fp, #-8]
     208:	add	r3, r3, #1
     20c:	ldrb	r3, [r3]
     210:	eor	r3, r3, r2
     214:	uxtb	r2, r3
     218:	ldr	r3, [fp, #-8]
     21c:	strb	r2, [r3]
     220:	ldr	r3, [fp, #-8]
     224:	add	r3, r3, #1
     228:	ldr	r2, [fp, #-8]
     22c:	ldrb	r1, [r2]
     230:	ldr	r2, [fp, #-8]
     234:	add	r2, r2, #1
     238:	ldrb	r2, [r2]
     23c:	eor	r2, r2, r1
     240:	uxtb	r2, r2
     244:	strb	r2, [r3]
     248:	ldr	r3, [fp, #-8]
     24c:	ldrb	r2, [r3]
     250:	ldr	r3, [fp, #-8]
     254:	add	r3, r3, #1
     258:	ldrb	r3, [r3]
     25c:	eor	r3, r3, r2
     260:	uxtb	r2, r3
     264:	ldr	r3, [fp, #-8]
     268:	strb	r2, [r3]
     26c:	nop			; (mov r0, r0)
     270:	add	sp, fp, #0
     274:	pop	{fp}		; (ldr fp, [sp], #4)
     278:	bx	lr

0000027c <swap4>:
     27c:	push	{fp}		; (str fp, [sp, #-4]!)
     280:	add	fp, sp, #0
     284:	sub	sp, sp, #20
     288:	str	r0, [fp, #-16]
     28c:	ldr	r3, [fp, #-16]
     290:	str	r3, [fp, #-8]
     294:	ldr	r3, [fp, #-8]
     298:	ldrb	r2, [r3]
     29c:	ldr	r3, [fp, #-8]
     2a0:	add	r3, r3, #3
     2a4:	ldrb	r3, [r3]
     2a8:	eor	r3, r3, r2
     2ac:	uxtb	r2, r3
     2b0:	ldr	r3, [fp, #-8]
     2b4:	strb	r2, [r3]
     2b8:	ldr	r3, [fp, #-8]
     2bc:	add	r3, r3, #3
     2c0:	ldr	r2, [fp, #-8]
     2c4:	ldrb	r1, [r2]
     2c8:	ldr	r2, [fp, #-8]
     2cc:	add	r2, r2, #3
     2d0:	ldrb	r2, [r2]
     2d4:	eor	r2, r2, r1
     2d8:	uxtb	r2, r2
     2dc:	strb	r2, [r3]
     2e0:	ldr	r3, [fp, #-8]
     2e4:	ldrb	r2, [r3]
     2e8:	ldr	r3, [fp, #-8]
     2ec:	add	r3, r3, #3
     2f0:	ldrb	r3, [r3]
     2f4:	eor	r3, r3, r2
     2f8:	uxtb	r2, r3
     2fc:	ldr	r3, [fp, #-8]
     300:	strb	r2, [r3]
     304:	ldr	r3, [fp, #-8]
     308:	add	r3, r3, #1
     30c:	ldr	r2, [fp, #-8]
     310:	add	r2, r2, #1
     314:	ldrb	r1, [r2]
     318:	ldr	r2, [fp, #-8]
     31c:	add	r2, r2, #2
     320:	ldrb	r2, [r2]
     324:	eor	r2, r2, r1
     328:	uxtb	r2, r2
     32c:	strb	r2, [r3]
     330:	ldr	r3, [fp, #-8]
     334:	add	r3, r3, #2
     338:	ldr	r2, [fp, #-8]
     33c:	add	r2, r2, #1
     340:	ldrb	r1, [r2]
     344:	ldr	r2, [fp, #-8]
     348:	add	r2, r2, #2
     34c:	ldrb	r2, [r2]
     350:	eor	r2, r2, r1
     354:	uxtb	r2, r2
     358:	strb	r2, [r3]
     35c:	ldr	r3, [fp, #-8]
     360:	add	r3, r3, #1
     364:	ldr	r2, [fp, #-8]
     368:	add	r2, r2, #1
     36c:	ldrb	r1, [r2]
     370:	ldr	r2, [fp, #-8]
     374:	add	r2, r2, #2
     378:	ldrb	r2, [r2]
     37c:	eor	r2, r2, r1
     380:	uxtb	r2, r2
     384:	strb	r2, [r3]
     388:	nop			; (mov r0, r0)
     38c:	add	sp, fp, #0
     390:	pop	{fp}		; (ldr fp, [sp], #4)
     394:	bx	lr

00000398 <swap8>:
     398:	push	{fp}		; (str fp, [sp, #-4]!)
     39c:	add	fp, sp, #0
     3a0:	sub	sp, sp, #20
     3a4:	str	r0, [fp, #-16]
     3a8:	ldr	r3, [fp, #-16]
     3ac:	str	r3, [fp, #-8]
     3b0:	ldr	r3, [fp, #-8]
     3b4:	ldrb	r2, [r3]
     3b8:	ldr	r3, [fp, #-8]
     3bc:	add	r3, r3, #7
     3c0:	ldrb	r3, [r3]
     3c4:	eor	r3, r3, r2
     3c8:	uxtb	r2, r3
     3cc:	ldr	r3, [fp, #-8]
     3d0:	strb	r2, [r3]
     3d4:	ldr	r3, [fp, #-8]
     3d8:	add	r3, r3, #7
     3dc:	ldr	r2, [fp, #-8]
     3e0:	ldrb	r1, [r2]
     3e4:	ldr	r2, [fp, #-8]
     3e8:	add	r2, r2, #7
     3ec:	ldrb	r2, [r2]
     3f0:	eor	r2, r2, r1
     3f4:	uxtb	r2, r2
     3f8:	strb	r2, [r3]
     3fc:	ldr	r3, [fp, #-8]
     400:	ldrb	r2, [r3]
     404:	ldr	r3, [fp, #-8]
     408:	add	r3, r3, #7
     40c:	ldrb	r3, [r3]
     410:	eor	r3, r3, r2
     414:	uxtb	r2, r3
     418:	ldr	r3, [fp, #-8]
     41c:	strb	r2, [r3]
     420:	ldr	r3, [fp, #-8]
     424:	add	r3, r3, #1
     428:	ldr	r2, [fp, #-8]
     42c:	add	r2, r2, #1
     430:	ldrb	r1, [r2]
     434:	ldr	r2, [fp, #-8]
     438:	add	r2, r2, #6
     43c:	ldrb	r2, [r2]
     440:	eor	r2, r2, r1
     444:	uxtb	r2, r2
     448:	strb	r2, [r3]
     44c:	ldr	r3, [fp, #-8]
     450:	add	r3, r3, #6
     454:	ldr	r2, [fp, #-8]
     458:	add	r2, r2, #1
     45c:	ldrb	r1, [r2]
     460:	ldr	r2, [fp, #-8]
     464:	add	r2, r2, #6
     468:	ldrb	r2, [r2]
     46c:	eor	r2, r2, r1
     470:	uxtb	r2, r2
     474:	strb	r2, [r3]
     478:	ldr	r3, [fp, #-8]
     47c:	add	r3, r3, #1
     480:	ldr	r2, [fp, #-8]
     484:	add	r2, r2, #1
     488:	ldrb	r1, [r2]
     48c:	ldr	r2, [fp, #-8]
     490:	add	r2, r2, #6
     494:	ldrb	r2, [r2]
     498:	eor	r2, r2, r1
     49c:	uxtb	r2, r2
     4a0:	strb	r2, [r3]
     4a4:	ldr	r3, [fp, #-8]
     4a8:	add	r3, r3, #2
     4ac:	ldr	r2, [fp, #-8]
     4b0:	add	r2, r2, #2
     4b4:	ldrb	r1, [r2]
     4b8:	ldr	r2, [fp, #-8]
     4bc:	add	r2, r2, #5
     4c0:	ldrb	r2, [r2]
     4c4:	eor	r2, r2, r1
     4c8:	uxtb	r2, r2
     4cc:	strb	r2, [r3]
     4d0:	ldr	r3, [fp, #-8]
     4d4:	add	r3, r3, #5
     4d8:	ldr	r2, [fp, #-8]
     4dc:	add	r2, r2, #2
     4e0:	ldrb	r1, [r2]
     4e4:	ldr	r2, [fp, #-8]
     4e8:	add	r2, r2, #5
     4ec:	ldrb	r2, [r2]
     4f0:	eor	r2, r2, r1
     4f4:	uxtb	r2, r2
     4f8:	strb	r2, [r3]
     4fc:	ldr	r3, [fp, #-8]
     500:	add	r3, r3, #2
     504:	ldr	r2, [fp, #-8]
     508:	add	r2, r2, #2
     50c:	ldrb	r1, [r2]
     510:	ldr	r2, [fp, #-8]
     514:	add	r2, r2, #5
     518:	ldrb	r2, [r2]
     51c:	eor	r2, r2, r1
     520:	uxtb	r2, r2
     524:	strb	r2, [r3]
     528:	ldr	r3, [fp, #-8]
     52c:	add	r3, r3, #3
     530:	ldr	r2, [fp, #-8]
     534:	add	r2, r2, #3
     538:	ldrb	r1, [r2]
     53c:	ldr	r2, [fp, #-8]
     540:	add	r2, r2, #4
     544:	ldrb	r2, [r2]
     548:	eor	r2, r2, r1
     54c:	uxtb	r2, r2
     550:	strb	r2, [r3]
     554:	ldr	r3, [fp, #-8]
     558:	add	r3, r3, #4
     55c:	ldr	r2, [fp, #-8]
     560:	add	r2, r2, #3
     564:	ldrb	r1, [r2]
     568:	ldr	r2, [fp, #-8]
     56c:	add	r2, r2, #4
     570:	ldrb	r2, [r2]
     574:	eor	r2, r2, r1
     578:	uxtb	r2, r2
     57c:	strb	r2, [r3]
     580:	ldr	r3, [fp, #-8]
     584:	add	r3, r3, #3
     588:	ldr	r2, [fp, #-8]
     58c:	add	r2, r2, #3
     590:	ldrb	r1, [r2]
     594:	ldr	r2, [fp, #-8]
     598:	add	r2, r2, #4
     59c:	ldrb	r2, [r2]
     5a0:	eor	r2, r2, r1
     5a4:	uxtb	r2, r2
     5a8:	strb	r2, [r3]
     5ac:	nop			; (mov r0, r0)
     5b0:	add	sp, fp, #0
     5b4:	pop	{fp}		; (ldr fp, [sp], #4)
     5b8:	bx	lr

000005bc <coda_cdf_cursor_set_product>:
     5bc:	push	{fp}		; (str fp, [sp, #-4]!)
     5c0:	add	fp, sp, #0
     5c4:	sub	sp, sp, #12
     5c8:	str	r0, [fp, #-8]
     5cc:	str	r1, [fp, #-12]
     5d0:	ldr	r3, [fp, #-8]
     5d4:	ldr	r2, [fp, #-12]
     5d8:	str	r2, [r3]
     5dc:	ldr	r3, [fp, #-8]
     5e0:	mov	r2, #1
     5e4:	str	r2, [r3, #4]
     5e8:	ldr	r3, [fp, #-12]
     5ec:	ldr	r2, [r3, #20]
     5f0:	ldr	r3, [fp, #-8]
     5f4:	str	r2, [r3, #8]
     5f8:	ldr	r3, [fp, #-8]
     5fc:	mvn	r2, #0
     600:	str	r2, [r3, #12]
     604:	ldr	r1, [fp, #-8]
     608:	mvn	r2, #0
     60c:	mvn	r3, #0
     610:	strd	r2, [r1, #16]
     614:	mov	r3, #0
     618:	mov	r0, r3
     61c:	add	sp, fp, #0
     620:	pop	{fp}		; (ldr fp, [sp], #4)
     624:	bx	lr

00000628 <coda_cdf_cursor_goto_array_element>:
     628:	push	{fp, lr}
     62c:	add	fp, sp, #4
     630:	sub	sp, sp, #64	; 0x40
     634:	str	r0, [fp, #-56]	; 0xffffffc8
     638:	str	r1, [fp, #-60]	; 0xffffffc4
     63c:	str	r2, [fp, #-64]	; 0xffffffc0
     640:	ldr	r3, [fp, #-56]	; 0xffffffc8
     644:	ldr	r3, [r3, #4]
     648:	sub	r3, r3, #1
     64c:	ldr	r2, [fp, #-56]	; 0xffffffc8
     650:	lsl	r3, r3, #4
     654:	add	r3, r2, r3
     658:	ldr	r3, [r3, #8]
     65c:	ldr	r3, [r3, #4]
     660:	sub	r2, fp, #52	; 0x34
     664:	sub	r1, fp, #20
     668:	mov	r0, r3
     66c:	bl	0 <coda_type_get_array_dim>
     670:	mov	r3, r0
     674:	cmp	r3, #0
     678:	beq	684 <coda_cdf_cursor_goto_array_element+0x5c>
     67c:	mvn	r3, #0
     680:	b	858 <coda_cdf_cursor_goto_array_element+0x230>
     684:	ldr	r3, [fp, #-20]	; 0xffffffec
     688:	ldr	r2, [fp, #-60]	; 0xffffffc4
     68c:	cmp	r2, r3
     690:	beq	6b0 <coda_cdf_cursor_goto_array_element+0x88>
     694:	ldr	r3, [fp, #-20]	; 0xffffffec
     698:	ldr	r2, [fp, #-60]	; 0xffffffc4
     69c:	ldr	r1, [pc, #448]	; 864 <coda_cdf_cursor_goto_array_element+0x23c>
     6a0:	mvn	r0, #105	; 0x69
     6a4:	bl	0 <coda_set_error>
     6a8:	mvn	r3, #0
     6ac:	b	858 <coda_cdf_cursor_goto_array_element+0x230>
     6b0:	mov	r3, #0
     6b4:	str	r3, [fp, #-8]
     6b8:	mov	r3, #0
     6bc:	str	r3, [fp, #-12]
     6c0:	b	7a4 <coda_cdf_cursor_goto_array_element+0x17c>
     6c4:	ldr	r3, [fp, #-12]
     6c8:	lsl	r3, r3, #2
     6cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
     6d0:	add	r3, r2, r3
     6d4:	ldr	r3, [r3]
     6d8:	cmp	r3, #0
     6dc:	blt	710 <coda_cdf_cursor_goto_array_element+0xe8>
     6e0:	ldr	r3, [fp, #-12]
     6e4:	lsl	r3, r3, #2
     6e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
     6ec:	add	r3, r2, r3
     6f0:	ldr	r2, [r3]
     6f4:	ldr	r3, [fp, #-12]
     6f8:	lsl	r3, r3, #2
     6fc:	sub	r1, fp, #4
     700:	add	r3, r1, r3
     704:	ldr	r3, [r3, #-48]	; 0xffffffd0
     708:	cmp	r2, r3
     70c:	blt	74c <coda_cdf_cursor_goto_array_element+0x124>
     710:	ldr	r3, [fp, #-12]
     714:	lsl	r3, r3, #2
     718:	ldr	r2, [fp, #-64]	; 0xffffffc0
     71c:	add	r3, r2, r3
     720:	ldr	r2, [r3]
     724:	ldr	r3, [fp, #-12]
     728:	lsl	r3, r3, #2
     72c:	sub	r1, fp, #4
     730:	add	r3, r1, r3
     734:	ldr	r3, [r3, #-48]	; 0xffffffd0
     738:	ldr	r1, [pc, #296]	; 868 <coda_cdf_cursor_goto_array_element+0x240>
     73c:	mvn	r0, #106	; 0x6a
     740:	bl	0 <coda_set_error>
     744:	mvn	r3, #0
     748:	b	858 <coda_cdf_cursor_goto_array_element+0x230>
     74c:	ldr	r3, [fp, #-12]
     750:	cmp	r3, #0
     754:	ble	778 <coda_cdf_cursor_goto_array_element+0x150>
     758:	ldr	r3, [fp, #-12]
     75c:	lsl	r3, r3, #2
     760:	sub	r2, fp, #4
     764:	add	r3, r2, r3
     768:	ldr	r2, [r3, #-48]	; 0xffffffd0
     76c:	ldr	r3, [fp, #-8]
     770:	mul	r3, r2, r3
     774:	str	r3, [fp, #-8]
     778:	ldr	r3, [fp, #-12]
     77c:	lsl	r3, r3, #2
     780:	ldr	r2, [fp, #-64]	; 0xffffffc0
     784:	add	r3, r2, r3
     788:	ldr	r3, [r3]
     78c:	ldr	r2, [fp, #-8]
     790:	add	r3, r2, r3
     794:	str	r3, [fp, #-8]
     798:	ldr	r3, [fp, #-12]
     79c:	add	r3, r3, #1
     7a0:	str	r3, [fp, #-12]
     7a4:	ldr	r3, [fp, #-20]	; 0xffffffec
     7a8:	ldr	r2, [fp, #-12]
     7ac:	cmp	r2, r3
     7b0:	blt	6c4 <coda_cdf_cursor_goto_array_element+0x9c>
     7b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
     7b8:	ldr	r3, [r3, #4]
     7bc:	sub	r3, r3, #1
     7c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
     7c4:	lsl	r3, r3, #4
     7c8:	add	r3, r2, r3
     7cc:	ldr	r3, [r3, #8]
     7d0:	ldr	r3, [r3, #16]
     7d4:	str	r3, [fp, #-16]
     7d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
     7dc:	ldr	r3, [r3, #4]
     7e0:	add	r2, r3, #1
     7e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
     7e8:	str	r2, [r3, #4]
     7ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
     7f0:	ldr	r3, [r3, #4]
     7f4:	sub	r3, r3, #1
     7f8:	ldr	r2, [fp, #-56]	; 0xffffffc8
     7fc:	lsl	r3, r3, #4
     800:	add	r3, r2, r3
     804:	ldr	r2, [fp, #-16]
     808:	str	r2, [r3, #8]
     80c:	ldr	r3, [fp, #-56]	; 0xffffffc8
     810:	ldr	r3, [r3, #4]
     814:	sub	r3, r3, #1
     818:	ldr	r2, [fp, #-56]	; 0xffffffc8
     81c:	lsl	r3, r3, #4
     820:	add	r3, r2, r3
     824:	ldr	r2, [fp, #-8]
     828:	str	r2, [r3, #12]
     82c:	ldr	r3, [fp, #-56]	; 0xffffffc8
     830:	ldr	r3, [r3, #4]
     834:	sub	r3, r3, #1
     838:	ldr	r2, [fp, #-56]	; 0xffffffc8
     83c:	add	r3, r3, #1
     840:	lsl	r3, r3, #4
     844:	add	r1, r2, r3
     848:	mvn	r2, #0
     84c:	mvn	r3, #0
     850:	strd	r2, [r1]
     854:	mov	r3, #0
     858:	mov	r0, r3
     85c:	sub	sp, fp, #4
     860:	pop	{fp, pc}
     864:	.word	0x00000128
     868:	.word	0x00000170

0000086c <coda_cdf_cursor_goto_array_element_by_index>:
     86c:	push	{fp, lr}
     870:	add	fp, sp, #4
     874:	sub	sp, sp, #16
     878:	str	r0, [fp, #-16]
     87c:	str	r1, [fp, #-20]	; 0xffffffec
     880:	ldr	r3, [pc, #292]	; 9ac <coda_cdf_cursor_goto_array_element_by_index+0x140>
     884:	ldr	r3, [pc, r3]
     888:	bl	0 <__aeabi_read_tp>
     88c:	mov	r2, r0
     890:	ldr	r3, [r2, r3]
     894:	cmp	r3, #0
     898:	beq	8fc <coda_cdf_cursor_goto_array_element_by_index+0x90>
     89c:	ldr	r3, [fp, #-16]
     8a0:	ldr	r3, [r3, #4]
     8a4:	sub	r3, r3, #1
     8a8:	ldr	r2, [fp, #-16]
     8ac:	lsl	r3, r3, #4
     8b0:	add	r3, r2, r3
     8b4:	ldr	r3, [r3, #8]
     8b8:	ldr	r3, [r3, #4]
     8bc:	ldr	r3, [r3, #44]	; 0x2c
     8c0:	str	r3, [fp, #-8]
     8c4:	ldr	r3, [fp, #-20]	; 0xffffffec
     8c8:	cmp	r3, #0
     8cc:	blt	8e0 <coda_cdf_cursor_goto_array_element_by_index+0x74>
     8d0:	ldr	r2, [fp, #-20]	; 0xffffffec
     8d4:	ldr	r3, [fp, #-8]
     8d8:	cmp	r2, r3
     8dc:	blt	8fc <coda_cdf_cursor_goto_array_element_by_index+0x90>
     8e0:	ldr	r3, [fp, #-8]
     8e4:	ldr	r2, [fp, #-20]	; 0xffffffec
     8e8:	ldr	r1, [pc, #192]	; 9b0 <coda_cdf_cursor_goto_array_element_by_index+0x144>
     8ec:	mvn	r0, #106	; 0x6a
     8f0:	bl	0 <coda_set_error>
     8f4:	mvn	r3, #0
     8f8:	b	9a0 <coda_cdf_cursor_goto_array_element_by_index+0x134>
     8fc:	ldr	r3, [fp, #-16]
     900:	ldr	r3, [r3, #4]
     904:	sub	r3, r3, #1
     908:	ldr	r2, [fp, #-16]
     90c:	lsl	r3, r3, #4
     910:	add	r3, r2, r3
     914:	ldr	r3, [r3, #8]
     918:	ldr	r3, [r3, #16]
     91c:	str	r3, [fp, #-12]
     920:	ldr	r3, [fp, #-16]
     924:	ldr	r3, [r3, #4]
     928:	add	r2, r3, #1
     92c:	ldr	r3, [fp, #-16]
     930:	str	r2, [r3, #4]
     934:	ldr	r3, [fp, #-16]
     938:	ldr	r3, [r3, #4]
     93c:	sub	r3, r3, #1
     940:	ldr	r2, [fp, #-16]
     944:	lsl	r3, r3, #4
     948:	add	r3, r2, r3
     94c:	ldr	r2, [fp, #-12]
     950:	str	r2, [r3, #8]
     954:	ldr	r3, [fp, #-16]
     958:	ldr	r3, [r3, #4]
     95c:	sub	r3, r3, #1
     960:	ldr	r2, [fp, #-16]
     964:	lsl	r3, r3, #4
     968:	add	r3, r2, r3
     96c:	ldr	r2, [fp, #-20]	; 0xffffffec
     970:	str	r2, [r3, #12]
     974:	ldr	r3, [fp, #-16]
     978:	ldr	r3, [r3, #4]
     97c:	sub	r3, r3, #1
     980:	ldr	r2, [fp, #-16]
     984:	add	r3, r3, #1
     988:	lsl	r3, r3, #4
     98c:	add	r1, r2, r3
     990:	mvn	r2, #0
     994:	mvn	r3, #0
     998:	strd	r2, [r1]
     99c:	mov	r3, #0
     9a0:	mov	r0, r3
     9a4:	sub	sp, fp, #4
     9a8:	pop	{fp, pc}
     9ac:	.word	0x00000120
     9b0:	.word	0x00000170

000009b4 <coda_cdf_cursor_goto_next_array_element>:
     9b4:	push	{fp, lr}
     9b8:	add	fp, sp, #4
     9bc:	sub	sp, sp, #16
     9c0:	str	r0, [fp, #-16]
     9c4:	ldr	r3, [pc, #216]	; aa4 <coda_cdf_cursor_goto_next_array_element+0xf0>
     9c8:	ldr	r3, [pc, r3]
     9cc:	bl	0 <__aeabi_read_tp>
     9d0:	mov	r2, r0
     9d4:	ldr	r3, [r2, r3]
     9d8:	cmp	r3, #0
     9dc:	beq	a64 <coda_cdf_cursor_goto_next_array_element+0xb0>
     9e0:	ldr	r3, [fp, #-16]
     9e4:	ldr	r3, [r3, #4]
     9e8:	sub	r3, r3, #1
     9ec:	ldr	r2, [fp, #-16]
     9f0:	lsl	r3, r3, #4
     9f4:	add	r3, r2, r3
     9f8:	ldr	r3, [r3, #12]
     9fc:	add	r3, r3, #1
     a00:	str	r3, [fp, #-8]
     a04:	ldr	r3, [fp, #-16]
     a08:	ldr	r3, [r3, #4]
     a0c:	sub	r3, r3, #2
     a10:	ldr	r2, [fp, #-16]
     a14:	lsl	r3, r3, #4
     a18:	add	r3, r2, r3
     a1c:	ldr	r3, [r3, #8]
     a20:	ldr	r3, [r3, #4]
     a24:	ldr	r3, [r3, #44]	; 0x2c
     a28:	str	r3, [fp, #-12]
     a2c:	ldr	r3, [fp, #-8]
     a30:	cmp	r3, #0
     a34:	blt	a48 <coda_cdf_cursor_goto_next_array_element+0x94>
     a38:	ldr	r2, [fp, #-8]
     a3c:	ldr	r3, [fp, #-12]
     a40:	cmp	r2, r3
     a44:	blt	a64 <coda_cdf_cursor_goto_next_array_element+0xb0>
     a48:	ldr	r3, [fp, #-12]
     a4c:	ldr	r2, [fp, #-8]
     a50:	ldr	r1, [pc, #80]	; aa8 <coda_cdf_cursor_goto_next_array_element+0xf4>
     a54:	mvn	r0, #106	; 0x6a
     a58:	bl	0 <coda_set_error>
     a5c:	mvn	r3, #0
     a60:	b	a98 <coda_cdf_cursor_goto_next_array_element+0xe4>
     a64:	ldr	r3, [fp, #-16]
     a68:	ldr	r3, [r3, #4]
     a6c:	sub	r2, r3, #1
     a70:	ldr	r1, [fp, #-16]
     a74:	lsl	r3, r2, #4
     a78:	add	r3, r1, r3
     a7c:	ldr	r3, [r3, #12]
     a80:	add	r1, r3, #1
     a84:	ldr	r0, [fp, #-16]
     a88:	lsl	r3, r2, #4
     a8c:	add	r3, r0, r3
     a90:	str	r1, [r3, #12]
     a94:	mov	r3, #0
     a98:	mov	r0, r3
     a9c:	sub	sp, fp, #4
     aa0:	pop	{fp, pc}
     aa4:	.word	0x000000d4
     aa8:	.word	0x00000170

00000aac <coda_cdf_cursor_goto_attributes>:
     aac:	push	{r4, fp, lr}
     ab0:	add	fp, sp, #8
     ab4:	sub	sp, sp, #20
     ab8:	str	r0, [fp, #-24]	; 0xffffffe8
     abc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ac0:	ldr	r3, [r3, #4]
     ac4:	sub	r3, r3, #1
     ac8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     acc:	lsl	r3, r3, #4
     ad0:	add	r3, r2, r3
     ad4:	ldr	r3, [r3, #8]
     ad8:	str	r3, [fp, #-16]
     adc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ae0:	ldr	r3, [r3, #4]
     ae4:	add	r2, r3, #1
     ae8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     aec:	str	r2, [r3, #4]
     af0:	ldr	r3, [fp, #-16]
     af4:	ldr	r3, [r3, #8]
     af8:	cmp	r3, #2
     afc:	bne	b38 <coda_cdf_cursor_goto_attributes+0x8c>
     b00:	ldr	r3, [fp, #-16]
     b04:	ldr	r3, [r3, #12]
     b08:	cmp	r3, #0
     b0c:	beq	b38 <coda_cdf_cursor_goto_attributes+0x8c>
     b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b14:	ldr	r3, [r3, #4]
     b18:	sub	r3, r3, #1
     b1c:	ldr	r2, [fp, #-16]
     b20:	ldr	r2, [r2, #12]
     b24:	ldr	r1, [fp, #-24]	; 0xffffffe8
     b28:	lsl	r3, r3, #4
     b2c:	add	r3, r1, r3
     b30:	str	r2, [r3, #8]
     b34:	b	b60 <coda_cdf_cursor_goto_attributes+0xb4>
     b38:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b3c:	ldr	r3, [r3, #4]
     b40:	sub	r4, r3, #1
     b44:	mov	r0, #5
     b48:	bl	0 <coda_mem_empty_record>
     b4c:	mov	r1, r0
     b50:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b54:	lsl	r3, r4, #4
     b58:	add	r3, r2, r3
     b5c:	str	r1, [r3, #8]
     b60:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b64:	ldr	r3, [r3, #4]
     b68:	sub	r3, r3, #1
     b6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b70:	lsl	r3, r3, #4
     b74:	add	r3, r2, r3
     b78:	mvn	r2, #0
     b7c:	str	r2, [r3, #12]
     b80:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b84:	ldr	r3, [r3, #4]
     b88:	sub	r3, r3, #1
     b8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b90:	add	r3, r3, #1
     b94:	lsl	r3, r3, #4
     b98:	add	r1, r2, r3
     b9c:	mvn	r2, #0
     ba0:	mvn	r3, #0
     ba4:	strd	r2, [r1]
     ba8:	mov	r3, #0
     bac:	mov	r0, r3
     bb0:	sub	sp, fp, #8
     bb4:	pop	{r4, fp, pc}

00000bb8 <coda_cdf_cursor_use_base_type_of_special_type>:
     bb8:	push	{fp}		; (str fp, [sp, #-4]!)
     bbc:	add	fp, sp, #0
     bc0:	sub	sp, sp, #12
     bc4:	str	r0, [fp, #-8]
     bc8:	ldr	r3, [fp, #-8]
     bcc:	ldr	r3, [r3, #4]
     bd0:	sub	r0, r3, #1
     bd4:	ldr	r3, [fp, #-8]
     bd8:	ldr	r3, [r3, #4]
     bdc:	sub	r3, r3, #1
     be0:	ldr	r2, [fp, #-8]
     be4:	lsl	r3, r3, #4
     be8:	add	r3, r2, r3
     bec:	ldr	r3, [r3, #8]
     bf0:	ldr	r2, [r3, #12]
     bf4:	ldr	r1, [fp, #-8]
     bf8:	lsl	r3, r0, #4
     bfc:	add	r3, r1, r3
     c00:	str	r2, [r3, #8]
     c04:	mov	r3, #0
     c08:	mov	r0, r3
     c0c:	add	sp, fp, #0
     c10:	pop	{fp}		; (ldr fp, [sp], #4)
     c14:	bx	lr

00000c18 <coda_cdf_cursor_get_num_elements>:
     c18:	push	{fp}		; (str fp, [sp, #-4]!)
     c1c:	add	fp, sp, #0
     c20:	sub	sp, sp, #12
     c24:	str	r0, [fp, #-8]
     c28:	str	r1, [fp, #-12]
     c2c:	ldr	r3, [fp, #-8]
     c30:	ldr	r3, [r3, #4]
     c34:	sub	r3, r3, #1
     c38:	ldr	r2, [fp, #-8]
     c3c:	lsl	r3, r3, #4
     c40:	add	r3, r2, r3
     c44:	ldr	r3, [r3, #8]
     c48:	ldr	r3, [r3, #4]
     c4c:	ldr	r3, [r3, #8]
     c50:	cmp	r3, #1
     c54:	bne	c88 <coda_cdf_cursor_get_num_elements+0x70>
     c58:	ldr	r3, [fp, #-8]
     c5c:	ldr	r3, [r3, #4]
     c60:	sub	r3, r3, #1
     c64:	ldr	r2, [fp, #-8]
     c68:	lsl	r3, r3, #4
     c6c:	add	r3, r2, r3
     c70:	ldr	r3, [r3, #8]
     c74:	ldr	r3, [r3, #4]
     c78:	ldr	r2, [r3, #44]	; 0x2c
     c7c:	ldr	r3, [fp, #-12]
     c80:	str	r2, [r3]
     c84:	b	c94 <coda_cdf_cursor_get_num_elements+0x7c>
     c88:	ldr	r3, [fp, #-12]
     c8c:	mov	r2, #1
     c90:	str	r2, [r3]
     c94:	mov	r3, #0
     c98:	mov	r0, r3
     c9c:	add	sp, fp, #0
     ca0:	pop	{fp}		; (ldr fp, [sp], #4)
     ca4:	bx	lr

00000ca8 <coda_cdf_cursor_get_string_length>:
     ca8:	push	{fp, lr}
     cac:	add	fp, sp, #4
     cb0:	sub	sp, sp, #8
     cb4:	str	r0, [fp, #-8]
     cb8:	str	r1, [fp, #-12]
     cbc:	ldr	r3, [fp, #-8]
     cc0:	ldr	r3, [r3, #4]
     cc4:	sub	r3, r3, #1
     cc8:	ldr	r2, [fp, #-8]
     ccc:	lsl	r3, r3, #4
     cd0:	add	r3, r2, r3
     cd4:	ldr	r3, [r3, #8]
     cd8:	ldr	r3, [r3, #4]
     cdc:	ldr	r1, [fp, #-12]
     ce0:	mov	r0, r3
     ce4:	bl	0 <coda_type_get_string_length>
     ce8:	mov	r3, r0
     cec:	mov	r0, r3
     cf0:	sub	sp, fp, #4
     cf4:	pop	{fp, pc}

00000cf8 <coda_cdf_cursor_get_array_dim>:
     cf8:	push	{fp, lr}
     cfc:	add	fp, sp, #4
     d00:	sub	sp, sp, #16
     d04:	str	r0, [fp, #-8]
     d08:	str	r1, [fp, #-12]
     d0c:	str	r2, [fp, #-16]
     d10:	ldr	r3, [fp, #-8]
     d14:	ldr	r3, [r3, #4]
     d18:	sub	r3, r3, #1
     d1c:	ldr	r2, [fp, #-8]
     d20:	lsl	r3, r3, #4
     d24:	add	r3, r2, r3
     d28:	ldr	r3, [r3, #8]
     d2c:	ldr	r3, [r3, #4]
     d30:	ldr	r2, [fp, #-16]
     d34:	ldr	r1, [fp, #-12]
     d38:	mov	r0, r3
     d3c:	bl	0 <coda_type_get_array_dim>
     d40:	mov	r3, r0
     d44:	mov	r0, r3
     d48:	sub	sp, fp, #4
     d4c:	pop	{fp, pc}

00000d50 <read_array>:
     d50:	push	{r4, fp, lr}
     d54:	add	fp, sp, #8
     d58:	sub	sp, sp, #52	; 0x34
     d5c:	str	r0, [fp, #-40]	; 0xffffffd8
     d60:	str	r1, [fp, #-44]	; 0xffffffd4
     d64:	ldr	r3, [fp, #-40]	; 0xffffffd8
     d68:	ldr	r3, [r3, #4]
     d6c:	sub	r3, r3, #1
     d70:	ldr	r2, [fp, #-40]	; 0xffffffd8
     d74:	lsl	r3, r3, #4
     d78:	add	r3, r2, r3
     d7c:	ldr	r3, [r3, #8]
     d80:	str	r3, [fp, #-24]	; 0xffffffe8
     d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d88:	ldr	r3, [r3, #24]
     d8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d90:	ldr	r2, [r2, #28]
     d94:	mul	r3, r2, r3
     d98:	str	r3, [fp, #-28]	; 0xffffffe4
     d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     da0:	ldr	r3, [r3, #8]
     da4:	cmp	r3, #2
     da8:	beq	dc0 <read_array+0x70>
     dac:	ldr	r3, [pc, #772]	; 10b8 <read_array+0x368>
     db0:	mov	r2, #215	; 0xd7
     db4:	ldr	r1, [pc, #768]	; 10bc <read_array+0x36c>
     db8:	ldr	r0, [pc, #768]	; 10c0 <read_array+0x370>
     dbc:	bl	0 <__assert_fail>
     dc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dc4:	ldr	r3, [r3, #16]
     dc8:	cmp	r3, #0
     dcc:	bne	de4 <read_array+0x94>
     dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dd4:	ldr	r3, [r3, #4]
     dd8:	ldr	r3, [r3, #8]
     ddc:	str	r3, [fp, #-16]
     de0:	b	df8 <read_array+0xa8>
     de4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     de8:	ldr	r3, [r3, #16]
     dec:	ldr	r3, [r3, #4]
     df0:	ldr	r3, [r3, #8]
     df4:	str	r3, [fp, #-16]
     df8:	mov	r3, #0
     dfc:	str	r3, [fp, #-20]	; 0xffffffec
     e00:	b	f1c <read_array+0x1cc>
     e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e08:	ldr	r2, [r3, #36]	; 0x24
     e0c:	ldr	r3, [fp, #-20]	; 0xffffffec
     e10:	lsl	r3, r3, #3
     e14:	add	r3, r2, r3
     e18:	ldrd	r2, [r3]
     e1c:	cmp	r2, #0
     e20:	sbcs	r3, r3, #0
     e24:	bge	e3c <read_array+0xec>
     e28:	ldr	r1, [pc, #660]	; 10c4 <read_array+0x374>
     e2c:	mvn	r0, #199	; 0xc7
     e30:	bl	0 <coda_set_error>
     e34:	mvn	r3, #0
     e38:	b	10ac <read_array+0x35c>
     e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e40:	ldr	r3, [r3, #40]	; 0x28
     e44:	cmp	r3, #0
     e48:	beq	e9c <read_array+0x14c>
     e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
     e50:	ldr	r2, [fp, #-28]	; 0xffffffe4
     e54:	mul	r3, r2, r3
     e58:	mov	r2, r3
     e5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e60:	add	r0, r3, r2
     e64:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e68:	ldr	r1, [r3, #40]	; 0x28
     e6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e70:	ldr	r2, [r3, #36]	; 0x24
     e74:	ldr	r3, [fp, #-20]	; 0xffffffec
     e78:	lsl	r3, r3, #3
     e7c:	add	r3, r2, r3
     e80:	ldrd	r2, [r3]
     e84:	mov	r3, r2
     e88:	add	r3, r1, r3
     e8c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     e90:	mov	r1, r3
     e94:	bl	0 <memcpy>
     e98:	b	f10 <read_array+0x1c0>
     e9c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     ea0:	ldr	r3, [r3]
     ea4:	ldr	r4, [r3, #52]	; 0x34
     ea8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     eac:	ldr	r2, [r3, #36]	; 0x24
     eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
     eb4:	lsl	r3, r3, #3
     eb8:	add	r3, r2, r3
     ebc:	ldrd	r0, [r3]
     ec0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ec4:	mov	r2, r3
     ec8:	asr	r3, r2, #31
     ecc:	ldr	ip, [fp, #-20]	; 0xffffffec
     ed0:	ldr	lr, [fp, #-28]	; 0xffffffe4
     ed4:	mul	ip, lr, ip
     ed8:	mov	lr, ip
     edc:	ldr	ip, [fp, #-44]	; 0xffffffd4
     ee0:	add	ip, ip, lr
     ee4:	str	ip, [sp, #8]
     ee8:	strd	r2, [sp]
     eec:	mov	r2, r0
     ef0:	mov	r3, r1
     ef4:	mov	r0, r4
     ef8:	bl	0 <read_bytes>
     efc:	mov	r3, r0
     f00:	cmp	r3, #0
     f04:	beq	f10 <read_array+0x1c0>
     f08:	mvn	r3, #0
     f0c:	b	10ac <read_array+0x35c>
     f10:	ldr	r3, [fp, #-20]	; 0xffffffec
     f14:	add	r3, r3, #1
     f18:	str	r3, [fp, #-20]	; 0xffffffec
     f1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f20:	ldr	r2, [r3, #20]
     f24:	ldr	r3, [fp, #-20]	; 0xffffffec
     f28:	cmp	r2, r3
     f2c:	bgt	e04 <read_array+0xb4>
     f30:	ldr	r3, [fp, #-16]
     f34:	cmp	r3, #4
     f38:	beq	10a8 <read_array+0x358>
     f3c:	mov	r3, #1
     f40:	str	r3, [fp, #-32]	; 0xffffffe0
     f44:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f48:	ldr	r3, [r3]
     f4c:	ldr	r2, [r3, #68]	; 0x44
     f50:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f54:	cmp	r2, r3
     f58:	beq	10a8 <read_array+0x358>
     f5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f60:	ldr	r3, [r3, #28]
     f64:	sub	r3, r3, #1
     f68:	cmp	r3, #7
     f6c:	ldrls	pc, [pc, r3, lsl #2]
     f70:	b	1090 <read_array+0x340>
     f74:	.word	0x000010a4
     f78:	.word	0x00000f94
     f7c:	.word	0x00001090
     f80:	.word	0x00000fe8
     f84:	.word	0x00001090
     f88:	.word	0x00001090
     f8c:	.word	0x00001090
     f90:	.word	0x0000103c
     f94:	mov	r3, #0
     f98:	str	r3, [fp, #-20]	; 0xffffffec
     f9c:	b	fc4 <read_array+0x274>
     fa0:	ldr	r3, [fp, #-20]	; 0xffffffec
     fa4:	lsl	r3, r3, #1
     fa8:	ldr	r2, [fp, #-44]	; 0xffffffd4
     fac:	add	r3, r2, r3
     fb0:	mov	r0, r3
     fb4:	bl	1e4 <swap2>
     fb8:	ldr	r3, [fp, #-20]	; 0xffffffec
     fbc:	add	r3, r3, #1
     fc0:	str	r3, [fp, #-20]	; 0xffffffec
     fc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fc8:	ldr	r3, [r3, #20]
     fcc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fd0:	ldr	r2, [r2, #24]
     fd4:	mul	r2, r2, r3
     fd8:	ldr	r3, [fp, #-20]	; 0xffffffec
     fdc:	cmp	r2, r3
     fe0:	bgt	fa0 <read_array+0x250>
     fe4:	b	10a8 <read_array+0x358>
     fe8:	mov	r3, #0
     fec:	str	r3, [fp, #-20]	; 0xffffffec
     ff0:	b	1018 <read_array+0x2c8>
     ff4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ff8:	lsl	r3, r3, #2
     ffc:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1000:	add	r3, r2, r3
    1004:	mov	r0, r3
    1008:	bl	27c <swap4>
    100c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1010:	add	r3, r3, #1
    1014:	str	r3, [fp, #-20]	; 0xffffffec
    1018:	ldr	r3, [fp, #-24]	; 0xffffffe8
    101c:	ldr	r3, [r3, #20]
    1020:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1024:	ldr	r2, [r2, #24]
    1028:	mul	r2, r2, r3
    102c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1030:	cmp	r2, r3
    1034:	bgt	ff4 <read_array+0x2a4>
    1038:	b	10a8 <read_array+0x358>
    103c:	mov	r3, #0
    1040:	str	r3, [fp, #-20]	; 0xffffffec
    1044:	b	106c <read_array+0x31c>
    1048:	ldr	r3, [fp, #-20]	; 0xffffffec
    104c:	lsl	r3, r3, #3
    1050:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1054:	add	r3, r2, r3
    1058:	mov	r0, r3
    105c:	bl	398 <swap8>
    1060:	ldr	r3, [fp, #-20]	; 0xffffffec
    1064:	add	r3, r3, #1
    1068:	str	r3, [fp, #-20]	; 0xffffffec
    106c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1070:	ldr	r3, [r3, #20]
    1074:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1078:	ldr	r2, [r2, #24]
    107c:	mul	r2, r2, r3
    1080:	ldr	r3, [fp, #-20]	; 0xffffffec
    1084:	cmp	r2, r3
    1088:	bgt	1048 <read_array+0x2f8>
    108c:	b	10a8 <read_array+0x358>
    1090:	ldr	r3, [pc, #32]	; 10b8 <read_array+0x368>
    1094:	ldr	r2, [pc, #44]	; 10c8 <read_array+0x378>
    1098:	ldr	r1, [pc, #28]	; 10bc <read_array+0x36c>
    109c:	ldr	r0, [pc, #40]	; 10cc <read_array+0x37c>
    10a0:	bl	0 <__assert_fail>
    10a4:	nop			; (mov r0, r0)
    10a8:	mov	r3, #0
    10ac:	mov	r0, r3
    10b0:	sub	sp, fp, #8
    10b4:	pop	{r4, fp, pc}
    10b8:	.word	0x00000254
    10bc:	.word	0x000001a0
    10c0:	.word	0x000001f0
    10c4:	.word	0x00000214
    10c8:	.word	0x00000116
    10cc:	.word	0x00000244

000010d0 <read_partial_array>:
    10d0:	push	{fp, lr}
    10d4:	add	fp, sp, #4
    10d8:	sub	sp, sp, #96	; 0x60
    10dc:	str	r0, [fp, #-72]	; 0xffffffb8
    10e0:	str	r1, [fp, #-76]	; 0xffffffb4
    10e4:	str	r2, [fp, #-80]	; 0xffffffb0
    10e8:	str	r3, [fp, #-84]	; 0xffffffac
    10ec:	ldr	r3, [fp, #-72]	; 0xffffffb8
    10f0:	ldr	r3, [r3, #4]
    10f4:	sub	r3, r3, #1
    10f8:	ldr	r2, [fp, #-72]	; 0xffffffb8
    10fc:	lsl	r3, r3, #4
    1100:	add	r3, r2, r3
    1104:	ldr	r3, [r3, #8]
    1108:	str	r3, [fp, #-48]	; 0xffffffd0
    110c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1110:	ldr	r3, [r3, #24]
    1114:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1118:	ldr	r2, [r2, #28]
    111c:	mul	r3, r2, r3
    1120:	str	r3, [fp, #-52]	; 0xffffffcc
    1124:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1128:	ldr	r3, [r3, #8]
    112c:	cmp	r3, #2
    1130:	beq	1148 <read_partial_array+0x78>
    1134:	ldr	r3, [pc, #1024]	; 153c <read_partial_array+0x46c>
    1138:	mov	r2, #296	; 0x128
    113c:	ldr	r1, [pc, #1020]	; 1540 <read_partial_array+0x470>
    1140:	ldr	r0, [pc, #1020]	; 1544 <read_partial_array+0x474>
    1144:	bl	0 <__assert_fail>
    1148:	ldr	r3, [fp, #-48]	; 0xffffffd0
    114c:	ldr	r3, [r3, #16]
    1150:	cmp	r3, #0
    1154:	bne	116c <read_partial_array+0x9c>
    1158:	ldr	r3, [fp, #-48]	; 0xffffffd0
    115c:	ldr	r3, [r3, #4]
    1160:	ldr	r3, [r3, #8]
    1164:	str	r3, [fp, #-8]
    1168:	b	1180 <read_partial_array+0xb0>
    116c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1170:	ldr	r3, [r3, #16]
    1174:	ldr	r3, [r3, #4]
    1178:	ldr	r3, [r3, #8]
    117c:	str	r3, [fp, #-8]
    1180:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1184:	ldr	r3, [r3, #24]
    1188:	mov	r1, r3
    118c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1190:	bl	0 <__aeabi_idiv>
    1194:	mov	r3, r0
    1198:	str	r3, [fp, #-56]	; 0xffffffc8
    119c:	ldr	r2, [fp, #-76]	; 0xffffffb4
    11a0:	ldr	r3, [fp, #-80]	; 0xffffffb0
    11a4:	add	r2, r2, r3
    11a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    11ac:	ldr	r3, [r3, #24]
    11b0:	mov	r1, r3
    11b4:	mov	r0, r2
    11b8:	bl	0 <__aeabi_idiv>
    11bc:	mov	r3, r0
    11c0:	str	r3, [fp, #-60]	; 0xffffffc4
    11c4:	mov	r2, #0
    11c8:	mov	r3, #0
    11cc:	strd	r2, [fp, #-20]	; 0xffffffec
    11d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    11d4:	str	r3, [fp, #-24]	; 0xffffffe8
    11d8:	b	13d4 <read_partial_array+0x304>
    11dc:	mov	r2, #0
    11e0:	mov	r3, #0
    11e4:	strd	r2, [fp, #-36]	; 0xffffffdc
    11e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    11ec:	mov	r2, r3
    11f0:	asr	r3, r2, #31
    11f4:	strd	r2, [fp, #-44]	; 0xffffffd4
    11f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    11fc:	ldr	r2, [r3, #36]	; 0x24
    1200:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1204:	lsl	r3, r3, #3
    1208:	add	r3, r2, r3
    120c:	ldrd	r2, [r3]
    1210:	cmp	r2, #0
    1214:	sbcs	r3, r3, #0
    1218:	bge	1230 <read_partial_array+0x160>
    121c:	ldr	r1, [pc, #804]	; 1548 <read_partial_array+0x478>
    1220:	mvn	r0, #199	; 0xc7
    1224:	bl	0 <coda_set_error>
    1228:	mvn	r3, #0
    122c:	b	1530 <read_partial_array+0x460>
    1230:	ldr	r2, [fp, #-76]	; 0xffffffb4
    1234:	ldr	r3, [fp, #-80]	; 0xffffffb0
    1238:	add	r2, r2, r3
    123c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1240:	add	r3, r3, #1
    1244:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1248:	ldr	r1, [r1, #24]
    124c:	mul	r3, r1, r3
    1250:	cmp	r2, r3
    1254:	bge	1290 <read_partial_array+0x1c0>
    1258:	ldr	r2, [fp, #-76]	; 0xffffffb4
    125c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    1260:	add	r2, r2, r3
    1264:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1268:	ldr	r3, [r3, #24]
    126c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1270:	mul	r3, r1, r3
    1274:	sub	r3, r2, r3
    1278:	ldr	r2, [fp, #-48]	; 0xffffffd0
    127c:	ldr	r2, [r2, #28]
    1280:	mul	r3, r2, r3
    1284:	mov	r2, r3
    1288:	asr	r3, r2, #31
    128c:	strd	r2, [fp, #-44]	; 0xffffffd4
    1290:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1294:	ldr	r3, [r3, #24]
    1298:	ldr	r2, [fp, #-24]	; 0xffffffe8
    129c:	mul	r2, r2, r3
    12a0:	ldr	r3, [fp, #-76]	; 0xffffffb4
    12a4:	cmp	r2, r3
    12a8:	bge	12f0 <read_partial_array+0x220>
    12ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12b0:	ldr	r3, [r3, #24]
    12b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    12b8:	mul	r3, r2, r3
    12bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
    12c0:	sub	r3, r2, r3
    12c4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    12c8:	ldr	r2, [r2, #28]
    12cc:	mul	r3, r2, r3
    12d0:	mov	r2, r3
    12d4:	asr	r3, r2, #31
    12d8:	strd	r2, [fp, #-36]	; 0xffffffdc
    12dc:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    12e0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    12e4:	subs	r2, r0, r2
    12e8:	sbc	r3, r1, r3
    12ec:	strd	r2, [fp, #-44]	; 0xffffffd4
    12f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12f4:	ldr	r3, [r3, #40]	; 0x28
    12f8:	cmp	r3, #0
    12fc:	beq	1348 <read_partial_array+0x278>
    1300:	ldr	r3, [fp, #-20]	; 0xffffffec
    1304:	ldr	r2, [fp, #-84]	; 0xffffffac
    1308:	add	r0, r2, r3
    130c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1310:	ldr	r1, [r3, #40]	; 0x28
    1314:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1318:	ldr	r2, [r3, #36]	; 0x24
    131c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1320:	lsl	r3, r3, #3
    1324:	add	r3, r2, r3
    1328:	ldrd	r2, [r3]
    132c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1330:	add	r3, r2, r3
    1334:	add	r3, r1, r3
    1338:	ldr	r2, [fp, #-44]	; 0xffffffd4
    133c:	mov	r1, r3
    1340:	bl	0 <memcpy>
    1344:	b	13b4 <read_partial_array+0x2e4>
    1348:	ldr	r3, [fp, #-72]	; 0xffffffb8
    134c:	ldr	r3, [r3]
    1350:	ldr	ip, [r3, #52]	; 0x34
    1354:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1358:	ldr	r2, [r3, #36]	; 0x24
    135c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1360:	lsl	r3, r3, #3
    1364:	add	r3, r2, r3
    1368:	ldrd	r0, [r3]
    136c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1370:	adds	r0, r0, r2
    1374:	adc	r1, r1, r3
    1378:	ldr	r3, [fp, #-20]	; 0xffffffec
    137c:	ldr	r2, [fp, #-84]	; 0xffffffac
    1380:	add	r3, r2, r3
    1384:	str	r3, [sp, #8]
    1388:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    138c:	strd	r2, [sp]
    1390:	mov	r2, r0
    1394:	mov	r3, r1
    1398:	mov	r0, ip
    139c:	bl	0 <read_bytes>
    13a0:	mov	r3, r0
    13a4:	cmp	r3, #0
    13a8:	beq	13b4 <read_partial_array+0x2e4>
    13ac:	mvn	r3, #0
    13b0:	b	1530 <read_partial_array+0x460>
    13b4:	ldrd	r0, [fp, #-20]	; 0xffffffec
    13b8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    13bc:	adds	r2, r2, r0
    13c0:	adc	r3, r3, r1
    13c4:	strd	r2, [fp, #-20]	; 0xffffffec
    13c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13cc:	add	r3, r3, #1
    13d0:	str	r3, [fp, #-24]	; 0xffffffe8
    13d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    13d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    13dc:	cmp	r2, r3
    13e0:	ble	11dc <read_partial_array+0x10c>
    13e4:	ldr	r3, [fp, #-8]
    13e8:	cmp	r3, #4
    13ec:	beq	152c <read_partial_array+0x45c>
    13f0:	mov	r3, #1
    13f4:	str	r3, [fp, #-64]	; 0xffffffc0
    13f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    13fc:	ldr	r3, [r3]
    1400:	ldr	r2, [r3, #68]	; 0x44
    1404:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1408:	cmp	r2, r3
    140c:	beq	152c <read_partial_array+0x45c>
    1410:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1414:	ldr	r3, [r3, #28]
    1418:	sub	r3, r3, #1
    141c:	cmp	r3, #7
    1420:	ldrls	pc, [pc, r3, lsl #2]
    1424:	b	1514 <read_partial_array+0x444>
    1428:	.word	0x00001528
    142c:	.word	0x00001448
    1430:	.word	0x00001514
    1434:	.word	0x0000148c
    1438:	.word	0x00001514
    143c:	.word	0x00001514
    1440:	.word	0x00001514
    1444:	.word	0x000014d0
    1448:	mov	r3, #0
    144c:	str	r3, [fp, #-24]	; 0xffffffe8
    1450:	b	1478 <read_partial_array+0x3a8>
    1454:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1458:	lsl	r3, r3, #1
    145c:	ldr	r2, [fp, #-84]	; 0xffffffac
    1460:	add	r3, r2, r3
    1464:	mov	r0, r3
    1468:	bl	1e4 <swap2>
    146c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1470:	add	r3, r3, #1
    1474:	str	r3, [fp, #-24]	; 0xffffffe8
    1478:	ldr	r2, [fp, #-24]	; 0xffffffe8
    147c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    1480:	cmp	r2, r3
    1484:	blt	1454 <read_partial_array+0x384>
    1488:	b	152c <read_partial_array+0x45c>
    148c:	mov	r3, #0
    1490:	str	r3, [fp, #-24]	; 0xffffffe8
    1494:	b	14bc <read_partial_array+0x3ec>
    1498:	ldr	r3, [fp, #-24]	; 0xffffffe8
    149c:	lsl	r3, r3, #2
    14a0:	ldr	r2, [fp, #-84]	; 0xffffffac
    14a4:	add	r3, r2, r3
    14a8:	mov	r0, r3
    14ac:	bl	27c <swap4>
    14b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14b4:	add	r3, r3, #1
    14b8:	str	r3, [fp, #-24]	; 0xffffffe8
    14bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14c0:	ldr	r3, [fp, #-80]	; 0xffffffb0
    14c4:	cmp	r2, r3
    14c8:	blt	1498 <read_partial_array+0x3c8>
    14cc:	b	152c <read_partial_array+0x45c>
    14d0:	mov	r3, #0
    14d4:	str	r3, [fp, #-24]	; 0xffffffe8
    14d8:	b	1500 <read_partial_array+0x430>
    14dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14e0:	lsl	r3, r3, #3
    14e4:	ldr	r2, [fp, #-84]	; 0xffffffac
    14e8:	add	r3, r2, r3
    14ec:	mov	r0, r3
    14f0:	bl	398 <swap8>
    14f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14f8:	add	r3, r3, #1
    14fc:	str	r3, [fp, #-24]	; 0xffffffe8
    1500:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1504:	ldr	r3, [fp, #-80]	; 0xffffffb0
    1508:	cmp	r2, r3
    150c:	blt	14dc <read_partial_array+0x40c>
    1510:	b	152c <read_partial_array+0x45c>
    1514:	ldr	r3, [pc, #32]	; 153c <read_partial_array+0x46c>
    1518:	ldr	r2, [pc, #44]	; 154c <read_partial_array+0x47c>
    151c:	ldr	r1, [pc, #28]	; 1540 <read_partial_array+0x470>
    1520:	ldr	r0, [pc, #40]	; 1550 <read_partial_array+0x480>
    1524:	bl	0 <__assert_fail>
    1528:	nop			; (mov r0, r0)
    152c:	mov	r3, #0
    1530:	mov	r0, r3
    1534:	sub	sp, fp, #4
    1538:	pop	{fp, pc}
    153c:	.word	0x00000260
    1540:	.word	0x000001a0
    1544:	.word	0x000001f0
    1548:	.word	0x00000214
    154c:	.word	0x0000017b
    1550:	.word	0x00000244

00001554 <read_basic_type>:
    1554:	push	{fp, lr}
    1558:	add	fp, sp, #4
    155c:	sub	sp, sp, #72	; 0x48
    1560:	str	r0, [fp, #-48]	; 0xffffffd0
    1564:	str	r1, [fp, #-52]	; 0xffffffcc
    1568:	str	r2, [fp, #-56]	; 0xffffffc8
    156c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1570:	ldr	r3, [r3, #4]
    1574:	sub	r3, r3, #1
    1578:	ldr	r2, [fp, #-48]	; 0xffffffd0
    157c:	lsl	r3, r3, #4
    1580:	add	r3, r2, r3
    1584:	ldr	r3, [r3, #8]
    1588:	str	r3, [fp, #-8]
    158c:	mov	r3, #0
    1590:	str	r3, [fp, #-16]
    1594:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1598:	ldr	r3, [r3, #4]
    159c:	sub	r3, r3, #1
    15a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    15a4:	lsl	r3, r3, #4
    15a8:	add	r3, r2, r3
    15ac:	ldr	r3, [r3, #8]
    15b0:	ldr	r3, [r3, #8]
    15b4:	cmp	r3, #0
    15b8:	bne	15fc <read_basic_type+0xa8>
    15bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    15c0:	ldr	r3, [r3, #4]
    15c4:	sub	r3, r3, #2
    15c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
    15cc:	lsl	r3, r3, #4
    15d0:	add	r3, r2, r3
    15d4:	ldr	r3, [r3, #8]
    15d8:	str	r3, [fp, #-8]
    15dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    15e0:	ldr	r3, [r3, #4]
    15e4:	sub	r3, r3, #1
    15e8:	ldr	r2, [fp, #-48]	; 0xffffffd0
    15ec:	lsl	r3, r3, #4
    15f0:	add	r3, r2, r3
    15f4:	ldr	r3, [r3, #12]
    15f8:	str	r3, [fp, #-16]
    15fc:	ldr	r3, [fp, #-8]
    1600:	ldr	r3, [r3, #8]
    1604:	cmp	r3, #2
    1608:	beq	1620 <read_basic_type+0xcc>
    160c:	ldr	r3, [pc, #580]	; 1858 <read_basic_type+0x304>
    1610:	ldr	r2, [pc, #580]	; 185c <read_basic_type+0x308>
    1614:	ldr	r1, [pc, #580]	; 1860 <read_basic_type+0x30c>
    1618:	ldr	r0, [pc, #580]	; 1864 <read_basic_type+0x310>
    161c:	bl	0 <__assert_fail>
    1620:	ldr	r3, [fp, #-8]
    1624:	ldr	r3, [r3, #16]
    1628:	cmp	r3, #0
    162c:	bne	1644 <read_basic_type+0xf0>
    1630:	ldr	r3, [fp, #-8]
    1634:	ldr	r3, [r3, #4]
    1638:	ldr	r3, [r3, #8]
    163c:	str	r3, [fp, #-12]
    1640:	b	1658 <read_basic_type+0x104>
    1644:	ldr	r3, [fp, #-8]
    1648:	ldr	r3, [r3, #16]
    164c:	ldr	r3, [r3, #4]
    1650:	ldr	r3, [r3, #8]
    1654:	str	r3, [fp, #-12]
    1658:	ldr	r3, [fp, #-8]
    165c:	ldr	r3, [r3, #24]
    1660:	mov	r1, r3
    1664:	ldr	r0, [fp, #-16]
    1668:	bl	0 <__aeabi_idiv>
    166c:	mov	r3, r0
    1670:	str	r3, [fp, #-24]	; 0xffffffe8
    1674:	ldr	r3, [fp, #-8]
    1678:	ldr	r3, [r3, #24]
    167c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1680:	mul	r3, r2, r3
    1684:	ldr	r2, [fp, #-16]
    1688:	sub	r3, r2, r3
    168c:	str	r3, [fp, #-28]	; 0xffffffe4
    1690:	ldr	r3, [fp, #-8]
    1694:	ldr	r3, [r3, #28]
    1698:	str	r3, [fp, #-20]	; 0xffffffec
    169c:	ldr	r3, [fp, #-8]
    16a0:	ldr	r2, [r3, #36]	; 0x24
    16a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16a8:	lsl	r3, r3, #3
    16ac:	add	r3, r2, r3
    16b0:	ldrd	r2, [r3]
    16b4:	cmp	r2, #0
    16b8:	sbcs	r3, r3, #0
    16bc:	bge	16d4 <read_basic_type+0x180>
    16c0:	ldr	r1, [pc, #416]	; 1868 <read_basic_type+0x314>
    16c4:	mvn	r0, #199	; 0xc7
    16c8:	bl	0 <coda_set_error>
    16cc:	mvn	r3, #0
    16d0:	b	184c <read_basic_type+0x2f8>
    16d4:	ldr	r3, [fp, #-8]
    16d8:	ldr	r2, [r3, #36]	; 0x24
    16dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16e0:	lsl	r3, r3, #3
    16e4:	add	r3, r2, r3
    16e8:	ldrd	r0, [r3]
    16ec:	ldr	r3, [fp, #-8]
    16f0:	ldr	r3, [r3, #28]
    16f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    16f8:	mul	r3, r2, r3
    16fc:	mov	r2, r3
    1700:	asr	r3, r2, #31
    1704:	adds	r2, r2, r0
    1708:	adc	r3, r3, r1
    170c:	strd	r2, [fp, #-36]	; 0xffffffdc
    1710:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1714:	cmp	r3, #0
    1718:	blt	1734 <read_basic_type+0x1e0>
    171c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1720:	ldr	r3, [fp, #-20]	; 0xffffffec
    1724:	cmp	r2, r3
    1728:	bge	1734 <read_basic_type+0x1e0>
    172c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1730:	str	r3, [fp, #-20]	; 0xffffffec
    1734:	ldr	r3, [fp, #-8]
    1738:	ldr	r3, [r3, #40]	; 0x28
    173c:	cmp	r3, #0
    1740:	beq	1768 <read_basic_type+0x214>
    1744:	ldr	r3, [fp, #-8]
    1748:	ldr	r2, [r3, #40]	; 0x28
    174c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1750:	add	r3, r2, r3
    1754:	ldr	r2, [fp, #-20]	; 0xffffffec
    1758:	mov	r1, r3
    175c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1760:	bl	0 <memcpy>
    1764:	b	17a8 <read_basic_type+0x254>
    1768:	ldr	r3, [fp, #-48]	; 0xffffffd0
    176c:	ldr	r3, [r3]
    1770:	ldr	r0, [r3, #52]	; 0x34
    1774:	ldr	r3, [fp, #-20]	; 0xffffffec
    1778:	mov	r2, r3
    177c:	asr	r3, r2, #31
    1780:	ldr	r1, [fp, #-52]	; 0xffffffcc
    1784:	str	r1, [sp, #8]
    1788:	strd	r2, [sp]
    178c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1790:	bl	0 <read_bytes>
    1794:	mov	r3, r0
    1798:	cmp	r3, #0
    179c:	beq	17a8 <read_basic_type+0x254>
    17a0:	mvn	r3, #0
    17a4:	b	184c <read_basic_type+0x2f8>
    17a8:	ldr	r3, [fp, #-12]
    17ac:	cmp	r3, #4
    17b0:	beq	1848 <read_basic_type+0x2f4>
    17b4:	mov	r3, #0
    17b8:	str	r3, [fp, #-40]	; 0xffffffd8
    17bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    17c0:	ldr	r3, [r3]
    17c4:	ldr	r2, [r3, #68]	; 0x44
    17c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    17cc:	cmp	r2, r3
    17d0:	bne	1848 <read_basic_type+0x2f4>
    17d4:	ldr	r3, [fp, #-8]
    17d8:	ldr	r3, [r3, #28]
    17dc:	sub	r3, r3, #1
    17e0:	cmp	r3, #7
    17e4:	ldrls	pc, [pc, r3, lsl #2]
    17e8:	b	1830 <read_basic_type+0x2dc>
    17ec:	.word	0x00001844
    17f0:	.word	0x0000180c
    17f4:	.word	0x00001830
    17f8:	.word	0x00001818
    17fc:	.word	0x00001830
    1800:	.word	0x00001830
    1804:	.word	0x00001830
    1808:	.word	0x00001824
    180c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1810:	bl	1e4 <swap2>
    1814:	b	1848 <read_basic_type+0x2f4>
    1818:	ldr	r0, [fp, #-52]	; 0xffffffcc
    181c:	bl	27c <swap4>
    1820:	b	1848 <read_basic_type+0x2f4>
    1824:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1828:	bl	398 <swap8>
    182c:	b	1848 <read_basic_type+0x2f4>
    1830:	ldr	r3, [pc, #32]	; 1858 <read_basic_type+0x304>
    1834:	ldr	r2, [pc, #48]	; 186c <read_basic_type+0x318>
    1838:	ldr	r1, [pc, #32]	; 1860 <read_basic_type+0x30c>
    183c:	ldr	r0, [pc, #44]	; 1870 <read_basic_type+0x31c>
    1840:	bl	0 <__assert_fail>
    1844:	nop			; (mov r0, r0)
    1848:	mov	r3, #0
    184c:	mov	r0, r3
    1850:	sub	sp, fp, #4
    1854:	pop	{fp, pc}
    1858:	.word	0x00000274
    185c:	.word	0x00000193
    1860:	.word	0x000001a0
    1864:	.word	0x000001f0
    1868:	.word	0x00000214
    186c:	.word	0x000001ce
    1870:	.word	0x00000244

00001874 <coda_cdf_cursor_read_int8>:
    1874:	push	{fp, lr}
    1878:	add	fp, sp, #4
    187c:	sub	sp, sp, #8
    1880:	str	r0, [fp, #-8]
    1884:	str	r1, [fp, #-12]
    1888:	mvn	r2, #0
    188c:	ldr	r1, [fp, #-12]
    1890:	ldr	r0, [fp, #-8]
    1894:	bl	1554 <read_basic_type>
    1898:	mov	r3, r0
    189c:	mov	r0, r3
    18a0:	sub	sp, fp, #4
    18a4:	pop	{fp, pc}

000018a8 <coda_cdf_cursor_read_uint8>:
    18a8:	push	{fp, lr}
    18ac:	add	fp, sp, #4
    18b0:	sub	sp, sp, #8
    18b4:	str	r0, [fp, #-8]
    18b8:	str	r1, [fp, #-12]
    18bc:	mvn	r2, #0
    18c0:	ldr	r1, [fp, #-12]
    18c4:	ldr	r0, [fp, #-8]
    18c8:	bl	1554 <read_basic_type>
    18cc:	mov	r3, r0
    18d0:	mov	r0, r3
    18d4:	sub	sp, fp, #4
    18d8:	pop	{fp, pc}

000018dc <coda_cdf_cursor_read_int16>:
    18dc:	push	{fp, lr}
    18e0:	add	fp, sp, #4
    18e4:	sub	sp, sp, #8
    18e8:	str	r0, [fp, #-8]
    18ec:	str	r1, [fp, #-12]
    18f0:	mvn	r2, #0
    18f4:	ldr	r1, [fp, #-12]
    18f8:	ldr	r0, [fp, #-8]
    18fc:	bl	1554 <read_basic_type>
    1900:	mov	r3, r0
    1904:	mov	r0, r3
    1908:	sub	sp, fp, #4
    190c:	pop	{fp, pc}

00001910 <coda_cdf_cursor_read_uint16>:
    1910:	push	{fp, lr}
    1914:	add	fp, sp, #4
    1918:	sub	sp, sp, #8
    191c:	str	r0, [fp, #-8]
    1920:	str	r1, [fp, #-12]
    1924:	mvn	r2, #0
    1928:	ldr	r1, [fp, #-12]
    192c:	ldr	r0, [fp, #-8]
    1930:	bl	1554 <read_basic_type>
    1934:	mov	r3, r0
    1938:	mov	r0, r3
    193c:	sub	sp, fp, #4
    1940:	pop	{fp, pc}

00001944 <coda_cdf_cursor_read_int32>:
    1944:	push	{fp, lr}
    1948:	add	fp, sp, #4
    194c:	sub	sp, sp, #8
    1950:	str	r0, [fp, #-8]
    1954:	str	r1, [fp, #-12]
    1958:	mvn	r2, #0
    195c:	ldr	r1, [fp, #-12]
    1960:	ldr	r0, [fp, #-8]
    1964:	bl	1554 <read_basic_type>
    1968:	mov	r3, r0
    196c:	mov	r0, r3
    1970:	sub	sp, fp, #4
    1974:	pop	{fp, pc}

00001978 <coda_cdf_cursor_read_uint32>:
    1978:	push	{fp, lr}
    197c:	add	fp, sp, #4
    1980:	sub	sp, sp, #8
    1984:	str	r0, [fp, #-8]
    1988:	str	r1, [fp, #-12]
    198c:	mvn	r2, #0
    1990:	ldr	r1, [fp, #-12]
    1994:	ldr	r0, [fp, #-8]
    1998:	bl	1554 <read_basic_type>
    199c:	mov	r3, r0
    19a0:	mov	r0, r3
    19a4:	sub	sp, fp, #4
    19a8:	pop	{fp, pc}

000019ac <coda_cdf_cursor_read_int64>:
    19ac:	push	{fp, lr}
    19b0:	add	fp, sp, #4
    19b4:	sub	sp, sp, #8
    19b8:	str	r0, [fp, #-8]
    19bc:	str	r1, [fp, #-12]
    19c0:	mvn	r2, #0
    19c4:	ldr	r1, [fp, #-12]
    19c8:	ldr	r0, [fp, #-8]
    19cc:	bl	1554 <read_basic_type>
    19d0:	mov	r3, r0
    19d4:	mov	r0, r3
    19d8:	sub	sp, fp, #4
    19dc:	pop	{fp, pc}

000019e0 <coda_cdf_cursor_read_float>:
    19e0:	push	{fp, lr}
    19e4:	add	fp, sp, #4
    19e8:	sub	sp, sp, #8
    19ec:	str	r0, [fp, #-8]
    19f0:	str	r1, [fp, #-12]
    19f4:	mvn	r2, #0
    19f8:	ldr	r1, [fp, #-12]
    19fc:	ldr	r0, [fp, #-8]
    1a00:	bl	1554 <read_basic_type>
    1a04:	mov	r3, r0
    1a08:	mov	r0, r3
    1a0c:	sub	sp, fp, #4
    1a10:	pop	{fp, pc}

00001a14 <coda_cdf_cursor_read_double>:
    1a14:	push	{fp, lr}
    1a18:	add	fp, sp, #4
    1a1c:	sub	sp, sp, #8
    1a20:	str	r0, [fp, #-8]
    1a24:	str	r1, [fp, #-12]
    1a28:	mvn	r2, #0
    1a2c:	ldr	r1, [fp, #-12]
    1a30:	ldr	r0, [fp, #-8]
    1a34:	bl	1554 <read_basic_type>
    1a38:	mov	r3, r0
    1a3c:	mov	r0, r3
    1a40:	sub	sp, fp, #4
    1a44:	pop	{fp, pc}

00001a48 <coda_cdf_cursor_read_char>:
    1a48:	push	{fp, lr}
    1a4c:	add	fp, sp, #4
    1a50:	sub	sp, sp, #8
    1a54:	str	r0, [fp, #-8]
    1a58:	str	r1, [fp, #-12]
    1a5c:	mvn	r2, #0
    1a60:	ldr	r1, [fp, #-12]
    1a64:	ldr	r0, [fp, #-8]
    1a68:	bl	1554 <read_basic_type>
    1a6c:	mov	r3, r0
    1a70:	mov	r0, r3
    1a74:	sub	sp, fp, #4
    1a78:	pop	{fp, pc}

00001a7c <coda_cdf_cursor_read_string>:
    1a7c:	push	{fp, lr}
    1a80:	add	fp, sp, #4
    1a84:	sub	sp, sp, #16
    1a88:	str	r0, [fp, #-8]
    1a8c:	str	r1, [fp, #-12]
    1a90:	str	r2, [fp, #-16]
    1a94:	ldr	r2, [fp, #-16]
    1a98:	ldr	r1, [fp, #-12]
    1a9c:	ldr	r0, [fp, #-8]
    1aa0:	bl	1554 <read_basic_type>
    1aa4:	mov	r3, r0
    1aa8:	cmp	r3, #0
    1aac:	beq	1ab8 <coda_cdf_cursor_read_string+0x3c>
    1ab0:	mvn	r3, #0
    1ab4:	b	1ad4 <coda_cdf_cursor_read_string+0x58>
    1ab8:	ldr	r3, [fp, #-16]
    1abc:	sub	r3, r3, #1
    1ac0:	ldr	r2, [fp, #-12]
    1ac4:	add	r3, r2, r3
    1ac8:	mov	r2, #0
    1acc:	strb	r2, [r3]
    1ad0:	mov	r3, #0
    1ad4:	mov	r0, r3
    1ad8:	sub	sp, fp, #4
    1adc:	pop	{fp, pc}

00001ae0 <coda_cdf_cursor_read_int8_array>:
    1ae0:	push	{fp, lr}
    1ae4:	add	fp, sp, #4
    1ae8:	sub	sp, sp, #8
    1aec:	str	r0, [fp, #-8]
    1af0:	str	r1, [fp, #-12]
    1af4:	ldr	r1, [fp, #-12]
    1af8:	ldr	r0, [fp, #-8]
    1afc:	bl	d50 <read_array>
    1b00:	mov	r3, r0
    1b04:	mov	r0, r3
    1b08:	sub	sp, fp, #4
    1b0c:	pop	{fp, pc}

00001b10 <coda_cdf_cursor_read_uint8_array>:
    1b10:	push	{fp, lr}
    1b14:	add	fp, sp, #4
    1b18:	sub	sp, sp, #8
    1b1c:	str	r0, [fp, #-8]
    1b20:	str	r1, [fp, #-12]
    1b24:	ldr	r1, [fp, #-12]
    1b28:	ldr	r0, [fp, #-8]
    1b2c:	bl	d50 <read_array>
    1b30:	mov	r3, r0
    1b34:	mov	r0, r3
    1b38:	sub	sp, fp, #4
    1b3c:	pop	{fp, pc}

00001b40 <coda_cdf_cursor_read_int16_array>:
    1b40:	push	{fp, lr}
    1b44:	add	fp, sp, #4
    1b48:	sub	sp, sp, #8
    1b4c:	str	r0, [fp, #-8]
    1b50:	str	r1, [fp, #-12]
    1b54:	ldr	r1, [fp, #-12]
    1b58:	ldr	r0, [fp, #-8]
    1b5c:	bl	d50 <read_array>
    1b60:	mov	r3, r0
    1b64:	mov	r0, r3
    1b68:	sub	sp, fp, #4
    1b6c:	pop	{fp, pc}

00001b70 <coda_cdf_cursor_read_uint16_array>:
    1b70:	push	{fp, lr}
    1b74:	add	fp, sp, #4
    1b78:	sub	sp, sp, #8
    1b7c:	str	r0, [fp, #-8]
    1b80:	str	r1, [fp, #-12]
    1b84:	ldr	r1, [fp, #-12]
    1b88:	ldr	r0, [fp, #-8]
    1b8c:	bl	d50 <read_array>
    1b90:	mov	r3, r0
    1b94:	mov	r0, r3
    1b98:	sub	sp, fp, #4
    1b9c:	pop	{fp, pc}

00001ba0 <coda_cdf_cursor_read_int32_array>:
    1ba0:	push	{fp, lr}
    1ba4:	add	fp, sp, #4
    1ba8:	sub	sp, sp, #8
    1bac:	str	r0, [fp, #-8]
    1bb0:	str	r1, [fp, #-12]
    1bb4:	ldr	r1, [fp, #-12]
    1bb8:	ldr	r0, [fp, #-8]
    1bbc:	bl	d50 <read_array>
    1bc0:	mov	r3, r0
    1bc4:	mov	r0, r3
    1bc8:	sub	sp, fp, #4
    1bcc:	pop	{fp, pc}

00001bd0 <coda_cdf_cursor_read_uint32_array>:
    1bd0:	push	{fp, lr}
    1bd4:	add	fp, sp, #4
    1bd8:	sub	sp, sp, #8
    1bdc:	str	r0, [fp, #-8]
    1be0:	str	r1, [fp, #-12]
    1be4:	ldr	r1, [fp, #-12]
    1be8:	ldr	r0, [fp, #-8]
    1bec:	bl	d50 <read_array>
    1bf0:	mov	r3, r0
    1bf4:	mov	r0, r3
    1bf8:	sub	sp, fp, #4
    1bfc:	pop	{fp, pc}

00001c00 <coda_cdf_cursor_read_int64_array>:
    1c00:	push	{fp, lr}
    1c04:	add	fp, sp, #4
    1c08:	sub	sp, sp, #8
    1c0c:	str	r0, [fp, #-8]
    1c10:	str	r1, [fp, #-12]
    1c14:	ldr	r1, [fp, #-12]
    1c18:	ldr	r0, [fp, #-8]
    1c1c:	bl	d50 <read_array>
    1c20:	mov	r3, r0
    1c24:	mov	r0, r3
    1c28:	sub	sp, fp, #4
    1c2c:	pop	{fp, pc}

00001c30 <coda_cdf_cursor_read_float_array>:
    1c30:	push	{fp, lr}
    1c34:	add	fp, sp, #4
    1c38:	sub	sp, sp, #8
    1c3c:	str	r0, [fp, #-8]
    1c40:	str	r1, [fp, #-12]
    1c44:	ldr	r1, [fp, #-12]
    1c48:	ldr	r0, [fp, #-8]
    1c4c:	bl	d50 <read_array>
    1c50:	mov	r3, r0
    1c54:	mov	r0, r3
    1c58:	sub	sp, fp, #4
    1c5c:	pop	{fp, pc}

00001c60 <coda_cdf_cursor_read_double_array>:
    1c60:	push	{fp, lr}
    1c64:	add	fp, sp, #4
    1c68:	sub	sp, sp, #8
    1c6c:	str	r0, [fp, #-8]
    1c70:	str	r1, [fp, #-12]
    1c74:	ldr	r1, [fp, #-12]
    1c78:	ldr	r0, [fp, #-8]
    1c7c:	bl	d50 <read_array>
    1c80:	mov	r3, r0
    1c84:	mov	r0, r3
    1c88:	sub	sp, fp, #4
    1c8c:	pop	{fp, pc}

00001c90 <coda_cdf_cursor_read_char_array>:
    1c90:	push	{fp, lr}
    1c94:	add	fp, sp, #4
    1c98:	sub	sp, sp, #8
    1c9c:	str	r0, [fp, #-8]
    1ca0:	str	r1, [fp, #-12]
    1ca4:	ldr	r1, [fp, #-12]
    1ca8:	ldr	r0, [fp, #-8]
    1cac:	bl	d50 <read_array>
    1cb0:	mov	r3, r0
    1cb4:	mov	r0, r3
    1cb8:	sub	sp, fp, #4
    1cbc:	pop	{fp, pc}

00001cc0 <coda_cdf_cursor_read_int8_partial_array>:
    1cc0:	push	{fp, lr}
    1cc4:	add	fp, sp, #4
    1cc8:	sub	sp, sp, #16
    1ccc:	str	r0, [fp, #-8]
    1cd0:	str	r1, [fp, #-12]
    1cd4:	str	r2, [fp, #-16]
    1cd8:	str	r3, [fp, #-20]	; 0xffffffec
    1cdc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ce0:	ldr	r2, [fp, #-16]
    1ce4:	ldr	r1, [fp, #-12]
    1ce8:	ldr	r0, [fp, #-8]
    1cec:	bl	10d0 <read_partial_array>
    1cf0:	mov	r3, r0
    1cf4:	mov	r0, r3
    1cf8:	sub	sp, fp, #4
    1cfc:	pop	{fp, pc}

00001d00 <coda_cdf_cursor_read_uint8_partial_array>:
    1d00:	push	{fp, lr}
    1d04:	add	fp, sp, #4
    1d08:	sub	sp, sp, #16
    1d0c:	str	r0, [fp, #-8]
    1d10:	str	r1, [fp, #-12]
    1d14:	str	r2, [fp, #-16]
    1d18:	str	r3, [fp, #-20]	; 0xffffffec
    1d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d20:	ldr	r2, [fp, #-16]
    1d24:	ldr	r1, [fp, #-12]
    1d28:	ldr	r0, [fp, #-8]
    1d2c:	bl	10d0 <read_partial_array>
    1d30:	mov	r3, r0
    1d34:	mov	r0, r3
    1d38:	sub	sp, fp, #4
    1d3c:	pop	{fp, pc}

00001d40 <coda_cdf_cursor_read_int16_partial_array>:
    1d40:	push	{fp, lr}
    1d44:	add	fp, sp, #4
    1d48:	sub	sp, sp, #16
    1d4c:	str	r0, [fp, #-8]
    1d50:	str	r1, [fp, #-12]
    1d54:	str	r2, [fp, #-16]
    1d58:	str	r3, [fp, #-20]	; 0xffffffec
    1d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d60:	ldr	r2, [fp, #-16]
    1d64:	ldr	r1, [fp, #-12]
    1d68:	ldr	r0, [fp, #-8]
    1d6c:	bl	10d0 <read_partial_array>
    1d70:	mov	r3, r0
    1d74:	mov	r0, r3
    1d78:	sub	sp, fp, #4
    1d7c:	pop	{fp, pc}

00001d80 <coda_cdf_cursor_read_uint16_partial_array>:
    1d80:	push	{fp, lr}
    1d84:	add	fp, sp, #4
    1d88:	sub	sp, sp, #16
    1d8c:	str	r0, [fp, #-8]
    1d90:	str	r1, [fp, #-12]
    1d94:	str	r2, [fp, #-16]
    1d98:	str	r3, [fp, #-20]	; 0xffffffec
    1d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1da0:	ldr	r2, [fp, #-16]
    1da4:	ldr	r1, [fp, #-12]
    1da8:	ldr	r0, [fp, #-8]
    1dac:	bl	10d0 <read_partial_array>
    1db0:	mov	r3, r0
    1db4:	mov	r0, r3
    1db8:	sub	sp, fp, #4
    1dbc:	pop	{fp, pc}

00001dc0 <coda_cdf_cursor_read_int32_partial_array>:
    1dc0:	push	{fp, lr}
    1dc4:	add	fp, sp, #4
    1dc8:	sub	sp, sp, #16
    1dcc:	str	r0, [fp, #-8]
    1dd0:	str	r1, [fp, #-12]
    1dd4:	str	r2, [fp, #-16]
    1dd8:	str	r3, [fp, #-20]	; 0xffffffec
    1ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1de0:	ldr	r2, [fp, #-16]
    1de4:	ldr	r1, [fp, #-12]
    1de8:	ldr	r0, [fp, #-8]
    1dec:	bl	10d0 <read_partial_array>
    1df0:	mov	r3, r0
    1df4:	mov	r0, r3
    1df8:	sub	sp, fp, #4
    1dfc:	pop	{fp, pc}

00001e00 <coda_cdf_cursor_read_uint32_partial_array>:
    1e00:	push	{fp, lr}
    1e04:	add	fp, sp, #4
    1e08:	sub	sp, sp, #16
    1e0c:	str	r0, [fp, #-8]
    1e10:	str	r1, [fp, #-12]
    1e14:	str	r2, [fp, #-16]
    1e18:	str	r3, [fp, #-20]	; 0xffffffec
    1e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e20:	ldr	r2, [fp, #-16]
    1e24:	ldr	r1, [fp, #-12]
    1e28:	ldr	r0, [fp, #-8]
    1e2c:	bl	10d0 <read_partial_array>
    1e30:	mov	r3, r0
    1e34:	mov	r0, r3
    1e38:	sub	sp, fp, #4
    1e3c:	pop	{fp, pc}

00001e40 <coda_cdf_cursor_read_int64_partial_array>:
    1e40:	push	{fp, lr}
    1e44:	add	fp, sp, #4
    1e48:	sub	sp, sp, #16
    1e4c:	str	r0, [fp, #-8]
    1e50:	str	r1, [fp, #-12]
    1e54:	str	r2, [fp, #-16]
    1e58:	str	r3, [fp, #-20]	; 0xffffffec
    1e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e60:	ldr	r2, [fp, #-16]
    1e64:	ldr	r1, [fp, #-12]
    1e68:	ldr	r0, [fp, #-8]
    1e6c:	bl	10d0 <read_partial_array>
    1e70:	mov	r3, r0
    1e74:	mov	r0, r3
    1e78:	sub	sp, fp, #4
    1e7c:	pop	{fp, pc}

00001e80 <coda_cdf_cursor_read_float_partial_array>:
    1e80:	push	{fp, lr}
    1e84:	add	fp, sp, #4
    1e88:	sub	sp, sp, #16
    1e8c:	str	r0, [fp, #-8]
    1e90:	str	r1, [fp, #-12]
    1e94:	str	r2, [fp, #-16]
    1e98:	str	r3, [fp, #-20]	; 0xffffffec
    1e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ea0:	ldr	r2, [fp, #-16]
    1ea4:	ldr	r1, [fp, #-12]
    1ea8:	ldr	r0, [fp, #-8]
    1eac:	bl	10d0 <read_partial_array>
    1eb0:	mov	r3, r0
    1eb4:	mov	r0, r3
    1eb8:	sub	sp, fp, #4
    1ebc:	pop	{fp, pc}

00001ec0 <coda_cdf_cursor_read_double_partial_array>:
    1ec0:	push	{fp, lr}
    1ec4:	add	fp, sp, #4
    1ec8:	sub	sp, sp, #16
    1ecc:	str	r0, [fp, #-8]
    1ed0:	str	r1, [fp, #-12]
    1ed4:	str	r2, [fp, #-16]
    1ed8:	str	r3, [fp, #-20]	; 0xffffffec
    1edc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ee0:	ldr	r2, [fp, #-16]
    1ee4:	ldr	r1, [fp, #-12]
    1ee8:	ldr	r0, [fp, #-8]
    1eec:	bl	10d0 <read_partial_array>
    1ef0:	mov	r3, r0
    1ef4:	mov	r0, r3
    1ef8:	sub	sp, fp, #4
    1efc:	pop	{fp, pc}

00001f00 <coda_cdf_cursor_read_char_partial_array>:
    1f00:	push	{fp, lr}
    1f04:	add	fp, sp, #4
    1f08:	sub	sp, sp, #16
    1f0c:	str	r0, [fp, #-8]
    1f10:	str	r1, [fp, #-12]
    1f14:	str	r2, [fp, #-16]
    1f18:	str	r3, [fp, #-20]	; 0xffffffec
    1f1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f20:	ldr	r2, [fp, #-16]
    1f24:	ldr	r1, [fp, #-12]
    1f28:	ldr	r0, [fp, #-8]
    1f2c:	bl	10d0 <read_partial_array>
    1f30:	mov	r3, r0
    1f34:	mov	r0, r3
    1f38:	sub	sp, fp, #4
    1f3c:	pop	{fp, pc}
