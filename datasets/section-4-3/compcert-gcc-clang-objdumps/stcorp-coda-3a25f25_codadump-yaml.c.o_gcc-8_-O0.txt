
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-yaml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <indent>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #8
  10:	movw	r3, #0
  14:	movt	r3, #0
  18:	ldr	r3, [r3]
  1c:	cmp	r3, #0
  20:	bge	44 <indent+0x44>
  24:	movw	r3, #0
  28:	movt	r3, #0
  2c:	mov	r2, #44	; 0x2c
  30:	movw	r1, #0
  34:	movt	r1, #0
  38:	movw	r0, #0
  3c:	movt	r0, #0
  40:	bl	0 <__assert_fail>
  44:	movw	r3, #0
  48:	movt	r3, #0
  4c:	ldr	r3, [r3]
  50:	str	r3, [fp, #-8]
  54:	b	84 <indent+0x84>
  58:	movw	r3, #0
  5c:	movt	r3, #0
  60:	ldr	r3, [r3]
  64:	mov	r2, #2
  68:	mov	r1, #1
  6c:	movw	r0, #0
  70:	movt	r0, #0
  74:	bl	0 <fwrite>
  78:	ldr	r3, [fp, #-8]
  7c:	sub	r3, r3, #1
  80:	str	r3, [fp, #-8]
  84:	ldr	r3, [fp, #-8]
  88:	cmp	r3, #0
  8c:	bgt	58 <indent+0x58>
  90:	nop	{0}
  94:	sub	sp, fp, #4
  98:	ldr	fp, [sp]
  9c:	add	sp, sp, #4
  a0:	pop	{pc}		; (ldr pc, [sp], #4)

000000a4 <ff_printf>:
  a4:	push	{r0, r1, r2, r3}
  a8:	str	fp, [sp, #-8]!
  ac:	str	lr, [sp, #4]
  b0:	add	fp, sp, #4
  b4:	sub	sp, sp, #8
  b8:	add	r3, fp, #8
  bc:	str	r3, [fp, #-12]
  c0:	movw	r3, #0
  c4:	movt	r3, #0
  c8:	ldr	r3, [r3]
  cc:	ldr	r2, [fp, #-12]
  d0:	ldr	r1, [fp, #4]
  d4:	mov	r0, r3
  d8:	bl	0 <vfprintf>
  dc:	str	r0, [fp, #-8]
  e0:	ldr	r3, [fp, #-8]
  e4:	mov	r0, r3
  e8:	sub	sp, fp, #4
  ec:	ldr	fp, [sp]
  f0:	ldr	lr, [sp, #4]
  f4:	add	sp, sp, #8
  f8:	add	sp, sp, #16
  fc:	bx	lr

00000100 <fi_printf>:
 100:	push	{r0, r1, r2, r3}
 104:	str	fp, [sp, #-8]!
 108:	str	lr, [sp, #4]
 10c:	add	fp, sp, #4
 110:	sub	sp, sp, #8
 114:	bl	0 <indent>
 118:	add	r3, fp, #8
 11c:	str	r3, [fp, #-12]
 120:	movw	r3, #0
 124:	movt	r3, #0
 128:	ldr	r3, [r3]
 12c:	ldr	r2, [fp, #-12]
 130:	ldr	r1, [fp, #4]
 134:	mov	r0, r3
 138:	bl	0 <vfprintf>
 13c:	str	r0, [fp, #-8]
 140:	ldr	r3, [fp, #-8]
 144:	mov	r0, r3
 148:	sub	sp, fp, #4
 14c:	ldr	fp, [sp]
 150:	ldr	lr, [sp, #4]
 154:	add	sp, sp, #8
 158:	add	sp, sp, #16
 15c:	bx	lr

00000160 <print_escaped>:
 160:	str	fp, [sp, #-8]!
 164:	str	lr, [sp, #4]
 168:	add	fp, sp, #4
 16c:	sub	sp, sp, #16
 170:	str	r0, [fp, #-16]
 174:	str	r1, [fp, #-20]	; 0xffffffec
 178:	mov	r3, #0
 17c:	str	r3, [fp, #-8]
 180:	b	2a4 <print_escaped+0x144>
 184:	ldr	r3, [fp, #-8]
 188:	ldr	r2, [fp, #-16]
 18c:	add	r3, r2, r3
 190:	ldrb	r3, [r3]
 194:	strb	r3, [fp, #-9]
 198:	ldrb	r3, [fp, #-9]
 19c:	cmp	r3, #12
 1a0:	beq	1f4 <print_escaped+0x94>
 1a4:	cmp	r3, #12
 1a8:	bgt	1c8 <print_escaped+0x68>
 1ac:	cmp	r3, #9
 1b0:	beq	224 <print_escaped+0xc4>
 1b4:	cmp	r3, #10
 1b8:	beq	204 <print_escaped+0xa4>
 1bc:	cmp	r3, #8
 1c0:	beq	1e4 <print_escaped+0x84>
 1c4:	b	254 <print_escaped+0xf4>
 1c8:	cmp	r3, #34	; 0x22
 1cc:	beq	234 <print_escaped+0xd4>
 1d0:	cmp	r3, #92	; 0x5c
 1d4:	beq	244 <print_escaped+0xe4>
 1d8:	cmp	r3, #13
 1dc:	beq	214 <print_escaped+0xb4>
 1e0:	b	254 <print_escaped+0xf4>
 1e4:	movw	r0, #0
 1e8:	movt	r0, #0
 1ec:	bl	a4 <ff_printf>
 1f0:	b	298 <print_escaped+0x138>
 1f4:	movw	r0, #0
 1f8:	movt	r0, #0
 1fc:	bl	a4 <ff_printf>
 200:	b	298 <print_escaped+0x138>
 204:	movw	r0, #0
 208:	movt	r0, #0
 20c:	bl	a4 <ff_printf>
 210:	b	298 <print_escaped+0x138>
 214:	movw	r0, #0
 218:	movt	r0, #0
 21c:	bl	a4 <ff_printf>
 220:	b	298 <print_escaped+0x138>
 224:	movw	r0, #0
 228:	movt	r0, #0
 22c:	bl	a4 <ff_printf>
 230:	b	298 <print_escaped+0x138>
 234:	movw	r0, #0
 238:	movt	r0, #0
 23c:	bl	a4 <ff_printf>
 240:	b	298 <print_escaped+0x138>
 244:	movw	r0, #0
 248:	movt	r0, #0
 24c:	bl	a4 <ff_printf>
 250:	b	298 <print_escaped+0x138>
 254:	ldrb	r3, [fp, #-9]
 258:	cmp	r3, #31
 25c:	bls	284 <print_escaped+0x124>
 260:	ldrb	r3, [fp, #-9]
 264:	cmp	r3, #126	; 0x7e
 268:	bhi	284 <print_escaped+0x124>
 26c:	ldrb	r3, [fp, #-9]
 270:	mov	r1, r3
 274:	movw	r0, #0
 278:	movt	r0, #0
 27c:	bl	a4 <ff_printf>
 280:	b	298 <print_escaped+0x138>
 284:	ldrb	r3, [fp, #-9]
 288:	mov	r1, r3
 28c:	movw	r0, #0
 290:	movt	r0, #0
 294:	bl	a4 <ff_printf>
 298:	ldr	r3, [fp, #-8]
 29c:	add	r3, r3, #1
 2a0:	str	r3, [fp, #-8]
 2a4:	ldr	r2, [fp, #-8]
 2a8:	ldr	r3, [fp, #-20]	; 0xffffffec
 2ac:	cmp	r2, r3
 2b0:	blt	184 <print_escaped+0x24>
 2b4:	nop	{0}
 2b8:	sub	sp, fp, #4
 2bc:	ldr	fp, [sp]
 2c0:	add	sp, sp, #4
 2c4:	pop	{pc}		; (ldr pc, [sp], #4)

000002c8 <print_data>:
 2c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
 2cc:	strd	r6, [sp, #8]
 2d0:	strd	r8, [sp, #16]
 2d4:	str	fp, [sp, #24]
 2d8:	str	lr, [sp, #28]
 2dc:	add	fp, sp, #28
 2e0:	sub	sp, sp, #288	; 0x120
 2e4:	str	r0, [fp, #-304]	; 0xfffffed0
 2e8:	str	r1, [fp, #-308]	; 0xfffffecc
 2ec:	mov	r3, #0
 2f0:	str	r3, [fp, #-64]	; 0xffffffc0
 2f4:	movw	r3, #0
 2f8:	movt	r3, #0
 2fc:	ldr	r3, [r3]
 300:	cmp	r3, #0
 304:	beq	3e8 <print_data+0x120>
 308:	sub	r3, fp, #64	; 0x40
 30c:	mov	r1, r3
 310:	ldr	r0, [fp, #-304]	; 0xfffffed0
 314:	bl	0 <coda_cursor_has_attributes>
 318:	mov	r3, r0
 31c:	cmp	r3, #0
 320:	beq	328 <print_data+0x60>
 324:	bl	0 <handle_coda_error>
 328:	ldr	r3, [fp, #-64]	; 0xffffffc0
 32c:	cmp	r3, #0
 330:	beq	3e8 <print_data+0x120>
 334:	ldr	r3, [fp, #-308]	; 0xfffffecc
 338:	cmp	r3, #0
 33c:	beq	350 <print_data+0x88>
 340:	movw	r0, #0
 344:	movt	r0, #0
 348:	bl	a4 <ff_printf>
 34c:	bl	0 <indent>
 350:	movw	r0, #0
 354:	movt	r0, #0
 358:	bl	a4 <ff_printf>
 35c:	ldr	r0, [fp, #-304]	; 0xfffffed0
 360:	bl	0 <coda_cursor_goto_attributes>
 364:	mov	r3, r0
 368:	cmp	r3, #0
 36c:	beq	374 <print_data+0xac>
 370:	bl	0 <handle_coda_error>
 374:	movw	r3, #0
 378:	movt	r3, #0
 37c:	ldr	r3, [r3]
 380:	add	r2, r3, #1
 384:	movw	r3, #0
 388:	movt	r3, #0
 38c:	str	r2, [r3]
 390:	mov	r1, #1
 394:	ldr	r0, [fp, #-304]	; 0xfffffed0
 398:	bl	2c8 <print_data>
 39c:	movw	r3, #0
 3a0:	movt	r3, #0
 3a4:	ldr	r3, [r3]
 3a8:	sub	r2, r3, #1
 3ac:	movw	r3, #0
 3b0:	movt	r3, #0
 3b4:	str	r2, [r3]
 3b8:	ldr	r0, [fp, #-304]	; 0xfffffed0
 3bc:	bl	0 <coda_cursor_goto_parent>
 3c0:	movw	r0, #0
 3c4:	movt	r0, #0
 3c8:	bl	100 <fi_printf>
 3cc:	movw	r3, #0
 3d0:	movt	r3, #0
 3d4:	ldr	r3, [r3]
 3d8:	add	r2, r3, #1
 3dc:	movw	r3, #0
 3e0:	movt	r3, #0
 3e4:	str	r2, [r3]
 3e8:	sub	r3, fp, #60	; 0x3c
 3ec:	mov	r1, r3
 3f0:	ldr	r0, [fp, #-304]	; 0xfffffed0
 3f4:	bl	0 <coda_cursor_get_type_class>
 3f8:	mov	r3, r0
 3fc:	cmp	r3, #0
 400:	beq	408 <print_data+0x140>
 404:	bl	0 <handle_coda_error>
 408:	ldr	r3, [fp, #-60]	; 0xffffffc4
 40c:	cmp	r3, #6
 410:	ldrls	pc, [pc, r3, lsl #2]
 414:	b	e34 <print_data+0xb6c>
 418:	.word	0x00000434
 41c:	.word	0x0000070c
 420:	.word	0x0000088c
 424:	.word	0x0000088c
 428:	.word	0x0000088c
 42c:	.word	0x0000088c
 430:	.word	0x00000c9c
 434:	sub	r3, fp, #68	; 0x44
 438:	mov	r1, r3
 43c:	ldr	r0, [fp, #-304]	; 0xfffffed0
 440:	bl	0 <coda_cursor_get_num_elements>
 444:	mov	r3, r0
 448:	cmp	r3, #0
 44c:	beq	454 <print_data+0x18c>
 450:	bl	0 <handle_coda_error>
 454:	ldr	r3, [fp, #-68]	; 0xffffffbc
 458:	cmp	r3, #0
 45c:	ble	6fc <print_data+0x434>
 460:	ldr	r3, [fp, #-308]	; 0xfffffecc
 464:	cmp	r3, #0
 468:	beq	478 <print_data+0x1b0>
 46c:	movw	r0, #0
 470:	movt	r0, #0
 474:	bl	a4 <ff_printf>
 478:	sub	r3, fp, #72	; 0x48
 47c:	mov	r1, r3
 480:	ldr	r0, [fp, #-304]	; 0xfffffed0
 484:	bl	0 <coda_cursor_get_type>
 488:	mov	r3, r0
 48c:	cmp	r3, #0
 490:	beq	498 <print_data+0x1d0>
 494:	bl	0 <handle_coda_error>
 498:	ldr	r3, [fp, #-72]	; 0xffffffb8
 49c:	sub	r2, fp, #76	; 0x4c
 4a0:	mov	r1, r2
 4a4:	mov	r0, r3
 4a8:	bl	0 <coda_type_get_record_union_status>
 4ac:	mov	r3, r0
 4b0:	cmp	r3, #0
 4b4:	beq	4bc <print_data+0x1f4>
 4b8:	bl	0 <handle_coda_error>
 4bc:	ldr	r3, [fp, #-76]	; 0xffffffb4
 4c0:	cmp	r3, #0
 4c4:	beq	5a0 <print_data+0x2d8>
 4c8:	sub	r3, fp, #80	; 0x50
 4cc:	mov	r1, r3
 4d0:	ldr	r0, [fp, #-304]	; 0xfffffed0
 4d4:	bl	0 <coda_cursor_get_available_union_field_index>
 4d8:	mov	r3, r0
 4dc:	cmp	r3, #0
 4e0:	beq	4e8 <print_data+0x220>
 4e4:	bl	0 <handle_coda_error>
 4e8:	ldr	r3, [fp, #-72]	; 0xffffffb8
 4ec:	ldr	r1, [fp, #-80]	; 0xffffffb0
 4f0:	sub	r2, fp, #84	; 0x54
 4f4:	mov	r0, r3
 4f8:	bl	0 <coda_type_get_record_field_name>
 4fc:	mov	r3, r0
 500:	cmp	r3, #0
 504:	beq	50c <print_data+0x244>
 508:	bl	0 <handle_coda_error>
 50c:	ldr	r3, [fp, #-80]	; 0xffffffb0
 510:	mov	r1, r3
 514:	ldr	r0, [fp, #-304]	; 0xfffffed0
 518:	bl	0 <coda_cursor_goto_record_field_by_index>
 51c:	mov	r3, r0
 520:	cmp	r3, #0
 524:	beq	52c <print_data+0x264>
 528:	bl	0 <handle_coda_error>
 52c:	ldr	r3, [fp, #-308]	; 0xfffffecc
 530:	cmp	r3, #0
 534:	beq	53c <print_data+0x274>
 538:	bl	0 <indent>
 53c:	ldr	r3, [fp, #-84]	; 0xffffffac
 540:	mov	r1, r3
 544:	movw	r0, #0
 548:	movt	r0, #0
 54c:	bl	a4 <ff_printf>
 550:	movw	r3, #0
 554:	movt	r3, #0
 558:	ldr	r3, [r3]
 55c:	add	r2, r3, #1
 560:	movw	r3, #0
 564:	movt	r3, #0
 568:	str	r2, [r3]
 56c:	mov	r1, #1
 570:	ldr	r0, [fp, #-304]	; 0xfffffed0
 574:	bl	2c8 <print_data>
 578:	movw	r3, #0
 57c:	movt	r3, #0
 580:	ldr	r3, [r3]
 584:	sub	r2, r3, #1
 588:	movw	r3, #0
 58c:	movt	r3, #0
 590:	str	r2, [r3]
 594:	ldr	r0, [fp, #-304]	; 0xfffffed0
 598:	bl	0 <coda_cursor_goto_parent>
 59c:	b	e34 <print_data+0xb6c>
 5a0:	mov	r3, #1
 5a4:	str	r3, [fp, #-32]	; 0xffffffe0
 5a8:	ldr	r0, [fp, #-304]	; 0xfffffed0
 5ac:	bl	0 <coda_cursor_goto_first_record_field>
 5b0:	mov	r3, r0
 5b4:	cmp	r3, #0
 5b8:	beq	5c0 <print_data+0x2f8>
 5bc:	bl	0 <handle_coda_error>
 5c0:	mov	r3, #0
 5c4:	str	r3, [fp, #-80]	; 0xffffffb0
 5c8:	b	6e0 <print_data+0x418>
 5cc:	ldr	r3, [fp, #-72]	; 0xffffffb8
 5d0:	ldr	r1, [fp, #-80]	; 0xffffffb0
 5d4:	sub	r2, fp, #92	; 0x5c
 5d8:	mov	r0, r3
 5dc:	bl	0 <coda_type_get_record_field_hidden_status>
 5e0:	mov	r3, r0
 5e4:	cmp	r3, #0
 5e8:	beq	5f0 <print_data+0x328>
 5ec:	bl	0 <handle_coda_error>
 5f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
 5f4:	cmp	r3, #0
 5f8:	bne	6a8 <print_data+0x3e0>
 5fc:	ldr	r3, [fp, #-72]	; 0xffffffb8
 600:	ldr	r1, [fp, #-80]	; 0xffffffb0
 604:	sub	r2, fp, #88	; 0x58
 608:	mov	r0, r3
 60c:	bl	0 <coda_type_get_record_field_name>
 610:	mov	r3, r0
 614:	cmp	r3, #0
 618:	beq	620 <print_data+0x358>
 61c:	bl	0 <handle_coda_error>
 620:	ldr	r3, [fp, #-308]	; 0xfffffecc
 624:	cmp	r3, #0
 628:	bne	638 <print_data+0x370>
 62c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 630:	cmp	r3, #0
 634:	bne	63c <print_data+0x374>
 638:	bl	0 <indent>
 63c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 640:	cmp	r3, #0
 644:	beq	650 <print_data+0x388>
 648:	mov	r3, #0
 64c:	str	r3, [fp, #-32]	; 0xffffffe0
 650:	ldr	r3, [fp, #-88]	; 0xffffffa8
 654:	mov	r1, r3
 658:	movw	r0, #0
 65c:	movt	r0, #0
 660:	bl	a4 <ff_printf>
 664:	movw	r3, #0
 668:	movt	r3, #0
 66c:	ldr	r3, [r3]
 670:	add	r2, r3, #1
 674:	movw	r3, #0
 678:	movt	r3, #0
 67c:	str	r2, [r3]
 680:	mov	r1, #1
 684:	ldr	r0, [fp, #-304]	; 0xfffffed0
 688:	bl	2c8 <print_data>
 68c:	movw	r3, #0
 690:	movt	r3, #0
 694:	ldr	r3, [r3]
 698:	sub	r2, r3, #1
 69c:	movw	r3, #0
 6a0:	movt	r3, #0
 6a4:	str	r2, [r3]
 6a8:	ldr	r3, [fp, #-68]	; 0xffffffbc
 6ac:	sub	r2, r3, #1
 6b0:	ldr	r3, [fp, #-80]	; 0xffffffb0
 6b4:	cmp	r2, r3
 6b8:	ble	6d4 <print_data+0x40c>
 6bc:	ldr	r0, [fp, #-304]	; 0xfffffed0
 6c0:	bl	0 <coda_cursor_goto_next_record_field>
 6c4:	mov	r3, r0
 6c8:	cmp	r3, #0
 6cc:	beq	6d4 <print_data+0x40c>
 6d0:	bl	0 <handle_coda_error>
 6d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
 6d8:	add	r3, r3, #1
 6dc:	str	r3, [fp, #-80]	; 0xffffffb0
 6e0:	ldr	r2, [fp, #-80]	; 0xffffffb0
 6e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
 6e8:	cmp	r2, r3
 6ec:	blt	5cc <print_data+0x304>
 6f0:	ldr	r0, [fp, #-304]	; 0xfffffed0
 6f4:	bl	0 <coda_cursor_goto_parent>
 6f8:	b	e34 <print_data+0xb6c>
 6fc:	movw	r0, #0
 700:	movt	r0, #0
 704:	bl	a4 <ff_printf>
 708:	b	e34 <print_data+0xb6c>
 70c:	sub	r2, fp, #300	; 0x12c
 710:	sub	r3, fp, #96	; 0x60
 714:	mov	r1, r3
 718:	ldr	r0, [fp, #-304]	; 0xfffffed0
 71c:	bl	0 <coda_cursor_get_array_dim>
 720:	mov	r3, r0
 724:	cmp	r3, #0
 728:	beq	730 <print_data+0x468>
 72c:	bl	0 <handle_coda_error>
 730:	ldr	r3, [fp, #-96]	; 0xffffffa0
 734:	cmp	r3, #0
 738:	blt	87c <print_data+0x5b4>
 73c:	mov	r3, #1
 740:	str	r3, [fp, #-36]	; 0xffffffdc
 744:	mov	r3, #0
 748:	str	r3, [fp, #-40]	; 0xffffffd8
 74c:	b	77c <print_data+0x4b4>
 750:	ldr	r3, [fp, #-40]	; 0xffffffd8
 754:	lsl	r3, r3, #2
 758:	sub	r2, fp, #28
 75c:	add	r3, r2, r3
 760:	ldr	r2, [r3, #-272]	; 0xfffffef0
 764:	ldr	r3, [fp, #-36]	; 0xffffffdc
 768:	mul	r3, r2, r3
 76c:	str	r3, [fp, #-36]	; 0xffffffdc
 770:	ldr	r3, [fp, #-40]	; 0xffffffd8
 774:	add	r3, r3, #1
 778:	str	r3, [fp, #-40]	; 0xffffffd8
 77c:	ldr	r3, [fp, #-96]	; 0xffffffa0
 780:	ldr	r2, [fp, #-40]	; 0xffffffd8
 784:	cmp	r2, r3
 788:	blt	750 <print_data+0x488>
 78c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 790:	cmp	r3, #0
 794:	ble	86c <print_data+0x5a4>
 798:	movw	r0, #0
 79c:	movt	r0, #0
 7a0:	bl	a4 <ff_printf>
 7a4:	ldr	r0, [fp, #-304]	; 0xfffffed0
 7a8:	bl	0 <coda_cursor_goto_first_array_element>
 7ac:	mov	r3, r0
 7b0:	cmp	r3, #0
 7b4:	beq	7bc <print_data+0x4f4>
 7b8:	bl	0 <handle_coda_error>
 7bc:	mov	r3, #0
 7c0:	str	r3, [fp, #-40]	; 0xffffffd8
 7c4:	b	850 <print_data+0x588>
 7c8:	movw	r0, #0
 7cc:	movt	r0, #0
 7d0:	bl	100 <fi_printf>
 7d4:	movw	r3, #0
 7d8:	movt	r3, #0
 7dc:	ldr	r3, [r3]
 7e0:	add	r2, r3, #1
 7e4:	movw	r3, #0
 7e8:	movt	r3, #0
 7ec:	str	r2, [r3]
 7f0:	mov	r1, #0
 7f4:	ldr	r0, [fp, #-304]	; 0xfffffed0
 7f8:	bl	2c8 <print_data>
 7fc:	movw	r3, #0
 800:	movt	r3, #0
 804:	ldr	r3, [r3]
 808:	sub	r2, r3, #1
 80c:	movw	r3, #0
 810:	movt	r3, #0
 814:	str	r2, [r3]
 818:	ldr	r3, [fp, #-36]	; 0xffffffdc
 81c:	sub	r3, r3, #1
 820:	ldr	r2, [fp, #-40]	; 0xffffffd8
 824:	cmp	r2, r3
 828:	bge	844 <print_data+0x57c>
 82c:	ldr	r0, [fp, #-304]	; 0xfffffed0
 830:	bl	0 <coda_cursor_goto_next_array_element>
 834:	mov	r3, r0
 838:	cmp	r3, #0
 83c:	beq	844 <print_data+0x57c>
 840:	bl	0 <handle_coda_error>
 844:	ldr	r3, [fp, #-40]	; 0xffffffd8
 848:	add	r3, r3, #1
 84c:	str	r3, [fp, #-40]	; 0xffffffd8
 850:	ldr	r2, [fp, #-40]	; 0xffffffd8
 854:	ldr	r3, [fp, #-36]	; 0xffffffdc
 858:	cmp	r2, r3
 85c:	blt	7c8 <print_data+0x500>
 860:	ldr	r0, [fp, #-304]	; 0xfffffed0
 864:	bl	0 <coda_cursor_goto_parent>
 868:	b	e34 <print_data+0xb6c>
 86c:	movw	r0, #0
 870:	movt	r0, #0
 874:	bl	a4 <ff_printf>
 878:	b	e34 <print_data+0xb6c>
 87c:	movw	r0, #0
 880:	movt	r0, #0
 884:	bl	a4 <ff_printf>
 888:	b	e34 <print_data+0xb6c>
 88c:	sub	r3, fp, #100	; 0x64
 890:	mov	r1, r3
 894:	ldr	r0, [fp, #-304]	; 0xfffffed0
 898:	bl	0 <coda_cursor_get_read_type>
 89c:	mov	r3, r0
 8a0:	cmp	r3, #0
 8a4:	beq	8ac <print_data+0x5e4>
 8a8:	bl	0 <handle_coda_error>
 8ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
 8b0:	add	r3, r3, #1
 8b4:	cmp	r3, #13
 8b8:	ldrls	pc, [pc, r3, lsl #2]
 8bc:	b	e28 <print_data+0xb60>
 8c0:	.word	0x00000c88
 8c4:	.word	0x00000b34
 8c8:	.word	0x00000b6c
 8cc:	.word	0x00000b34
 8d0:	.word	0x00000b6c
 8d4:	.word	0x00000b34
 8d8:	.word	0x00000b6c
 8dc:	.word	0x00000ba4
 8e0:	.word	0x00000bec
 8e4:	.word	0x00000c34
 8e8:	.word	0x00000c34
 8ec:	.word	0x000008f8
 8f0:	.word	0x00000944
 8f4:	.word	0x00000a18
 8f8:	sub	r3, fp, #101	; 0x65
 8fc:	mov	r1, r3
 900:	ldr	r0, [fp, #-304]	; 0xfffffed0
 904:	bl	0 <coda_cursor_read_char>
 908:	mov	r3, r0
 90c:	cmp	r3, #0
 910:	beq	918 <print_data+0x650>
 914:	bl	0 <handle_coda_error>
 918:	movw	r0, #0
 91c:	movt	r0, #0
 920:	bl	a4 <ff_printf>
 924:	sub	r3, fp, #101	; 0x65
 928:	mov	r1, #1
 92c:	mov	r0, r3
 930:	bl	160 <print_escaped>
 934:	movw	r0, #0
 938:	movt	r0, #0
 93c:	bl	a4 <ff_printf>
 940:	b	c98 <print_data+0x9d0>
 944:	sub	r3, fp, #108	; 0x6c
 948:	mov	r1, r3
 94c:	ldr	r0, [fp, #-304]	; 0xfffffed0
 950:	bl	0 <coda_cursor_get_string_length>
 954:	mov	r3, r0
 958:	cmp	r3, #0
 95c:	beq	964 <print_data+0x69c>
 960:	bl	0 <handle_coda_error>
 964:	ldr	r3, [fp, #-108]	; 0xffffff94
 968:	add	r3, r3, #1
 96c:	mov	r0, r3
 970:	bl	0 <malloc>
 974:	mov	r3, r0
 978:	str	r3, [fp, #-44]	; 0xffffffd4
 97c:	ldr	r3, [fp, #-44]	; 0xffffffd4
 980:	cmp	r3, #0
 984:	bne	9b4 <print_data+0x6ec>
 988:	ldr	r3, [fp, #-108]	; 0xffffff94
 98c:	add	r2, r3, #1
 990:	movw	r3, #361	; 0x169
 994:	str	r3, [sp]
 998:	movw	r3, #0
 99c:	movt	r3, #0
 9a0:	movw	r1, #0
 9a4:	movt	r1, #0
 9a8:	mvn	r0, #0
 9ac:	bl	0 <coda_set_error>
 9b0:	bl	0 <handle_coda_error>
 9b4:	ldr	r3, [fp, #-108]	; 0xffffff94
 9b8:	add	r3, r3, #1
 9bc:	mov	r2, r3
 9c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
 9c4:	ldr	r0, [fp, #-304]	; 0xfffffed0
 9c8:	bl	0 <coda_cursor_read_string>
 9cc:	mov	r3, r0
 9d0:	cmp	r3, #0
 9d4:	beq	9dc <print_data+0x714>
 9d8:	bl	0 <handle_coda_error>
 9dc:	movw	r0, #0
 9e0:	movt	r0, #0
 9e4:	bl	a4 <ff_printf>
 9e8:	ldr	r3, [fp, #-108]	; 0xffffff94
 9ec:	mov	r1, r3
 9f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
 9f4:	bl	160 <print_escaped>
 9f8:	ldr	r3, [fp, #-108]	; 0xffffff94
 9fc:	mov	r1, r3
 a00:	movw	r0, #0
 a04:	movt	r0, #0
 a08:	bl	a4 <ff_printf>
 a0c:	ldr	r0, [fp, #-44]	; 0xffffffd4
 a10:	bl	0 <free>
 a14:	b	c98 <print_data+0x9d0>
 a18:	sub	r3, fp, #116	; 0x74
 a1c:	mov	r1, r3
 a20:	ldr	r0, [fp, #-304]	; 0xfffffed0
 a24:	bl	0 <coda_cursor_get_bit_size>
 a28:	mov	r3, r0
 a2c:	cmp	r3, #0
 a30:	beq	a38 <print_data+0x770>
 a34:	bl	0 <handle_coda_error>
 a38:	ldrd	r0, [fp, #-116]	; 0xffffff8c
 a3c:	mov	r2, #0
 a40:	mov	r3, #0
 a44:	lsr	r2, r0, #3
 a48:	orr	r2, r2, r1, lsl #29
 a4c:	asr	r3, r1, #3
 a50:	ldrd	r0, [fp, #-116]	; 0xffffff8c
 a54:	mov	r8, #7
 a58:	mov	r9, #0
 a5c:	and	r6, r0, r8
 a60:	and	r7, r1, r9
 a64:	orrs	r1, r6, r7
 a68:	beq	a78 <print_data+0x7b0>
 a6c:	mov	r0, #1
 a70:	mov	r1, #0
 a74:	b	a80 <print_data+0x7b8>
 a78:	mov	r0, #0
 a7c:	mov	r1, #0
 a80:	adds	r4, r0, r2
 a84:	adc	r5, r1, r3
 a88:	strd	r4, [fp, #-52]	; 0xffffffcc
 a8c:	ldr	r3, [fp, #-52]	; 0xffffffcc
 a90:	mov	r0, r3
 a94:	bl	0 <malloc>
 a98:	mov	r3, r0
 a9c:	str	r3, [fp, #-56]	; 0xffffffc8
 aa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
 aa4:	cmp	r3, #0
 aa8:	bne	ad4 <print_data+0x80c>
 aac:	ldr	r2, [fp, #-52]	; 0xffffffcc
 ab0:	mov	r3, #392	; 0x188
 ab4:	str	r3, [sp]
 ab8:	movw	r3, #0
 abc:	movt	r3, #0
 ac0:	movw	r1, #0
 ac4:	movt	r1, #0
 ac8:	mvn	r0, #0
 acc:	bl	0 <coda_set_error>
 ad0:	bl	0 <handle_coda_error>
 ad4:	ldrd	r2, [fp, #-116]	; 0xffffff8c
 ad8:	strd	r2, [sp]
 adc:	mov	r2, #0
 ae0:	mov	r3, #0
 ae4:	ldr	r1, [fp, #-56]	; 0xffffffc8
 ae8:	ldr	r0, [fp, #-304]	; 0xfffffed0
 aec:	bl	0 <coda_cursor_read_bits>
 af0:	mov	r3, r0
 af4:	cmp	r3, #0
 af8:	beq	b00 <print_data+0x838>
 afc:	bl	0 <handle_coda_error>
 b00:	movw	r0, #0
 b04:	movt	r0, #0
 b08:	bl	a4 <ff_printf>
 b0c:	ldr	r3, [fp, #-52]	; 0xffffffcc
 b10:	mov	r1, r3
 b14:	ldr	r0, [fp, #-56]	; 0xffffffc8
 b18:	bl	160 <print_escaped>
 b1c:	movw	r0, #0
 b20:	movt	r0, #0
 b24:	bl	a4 <ff_printf>
 b28:	ldr	r0, [fp, #-56]	; 0xffffffc8
 b2c:	bl	0 <free>
 b30:	b	c98 <print_data+0x9d0>
 b34:	sub	r3, fp, #120	; 0x78
 b38:	mov	r1, r3
 b3c:	ldr	r0, [fp, #-304]	; 0xfffffed0
 b40:	bl	0 <coda_cursor_read_int32>
 b44:	mov	r3, r0
 b48:	cmp	r3, #0
 b4c:	beq	b54 <print_data+0x88c>
 b50:	bl	0 <handle_coda_error>
 b54:	ldr	r3, [fp, #-120]	; 0xffffff88
 b58:	mov	r1, r3
 b5c:	movw	r0, #0
 b60:	movt	r0, #0
 b64:	bl	a4 <ff_printf>
 b68:	b	c98 <print_data+0x9d0>
 b6c:	sub	r3, fp, #124	; 0x7c
 b70:	mov	r1, r3
 b74:	ldr	r0, [fp, #-304]	; 0xfffffed0
 b78:	bl	0 <coda_cursor_read_uint32>
 b7c:	mov	r3, r0
 b80:	cmp	r3, #0
 b84:	beq	b8c <print_data+0x8c4>
 b88:	bl	0 <handle_coda_error>
 b8c:	ldr	r3, [fp, #-124]	; 0xffffff84
 b90:	mov	r1, r3
 b94:	movw	r0, #0
 b98:	movt	r0, #0
 b9c:	bl	a4 <ff_printf>
 ba0:	b	c98 <print_data+0x9d0>
 ba4:	sub	r3, fp, #132	; 0x84
 ba8:	mov	r1, r3
 bac:	ldr	r0, [fp, #-304]	; 0xfffffed0
 bb0:	bl	0 <coda_cursor_read_int64>
 bb4:	mov	r3, r0
 bb8:	cmp	r3, #0
 bbc:	beq	bc4 <print_data+0x8fc>
 bc0:	bl	0 <handle_coda_error>
 bc4:	ldrd	r0, [fp, #-132]	; 0xffffff7c
 bc8:	sub	r3, fp, #156	; 0x9c
 bcc:	mov	r2, r3
 bd0:	bl	0 <coda_str64>
 bd4:	sub	r3, fp, #156	; 0x9c
 bd8:	mov	r1, r3
 bdc:	movw	r0, #0
 be0:	movt	r0, #0
 be4:	bl	a4 <ff_printf>
 be8:	b	c98 <print_data+0x9d0>
 bec:	sub	r3, fp, #164	; 0xa4
 bf0:	mov	r1, r3
 bf4:	ldr	r0, [fp, #-304]	; 0xfffffed0
 bf8:	bl	0 <coda_cursor_read_uint64>
 bfc:	mov	r3, r0
 c00:	cmp	r3, #0
 c04:	beq	c0c <print_data+0x944>
 c08:	bl	0 <handle_coda_error>
 c0c:	ldrd	r0, [fp, #-164]	; 0xffffff5c
 c10:	sub	r3, fp, #188	; 0xbc
 c14:	mov	r2, r3
 c18:	bl	0 <coda_str64u>
 c1c:	sub	r3, fp, #188	; 0xbc
 c20:	mov	r1, r3
 c24:	movw	r0, #0
 c28:	movt	r0, #0
 c2c:	bl	a4 <ff_printf>
 c30:	b	c98 <print_data+0x9d0>
 c34:	sub	r3, fp, #196	; 0xc4
 c38:	mov	r1, r3
 c3c:	ldr	r0, [fp, #-304]	; 0xfffffed0
 c40:	bl	0 <coda_cursor_read_double>
 c44:	mov	r3, r0
 c48:	cmp	r3, #0
 c4c:	beq	c54 <print_data+0x98c>
 c50:	bl	0 <handle_coda_error>
 c54:	ldr	r3, [fp, #-100]	; 0xffffff9c
 c58:	cmp	r3, #8
 c5c:	bne	c74 <print_data+0x9ac>
 c60:	ldrd	r2, [fp, #-196]	; 0xffffff3c
 c64:	movw	r0, #0
 c68:	movt	r0, #0
 c6c:	bl	a4 <ff_printf>
 c70:	b	c98 <print_data+0x9d0>
 c74:	ldrd	r2, [fp, #-196]	; 0xffffff3c
 c78:	movw	r0, #0
 c7c:	movt	r0, #0
 c80:	bl	a4 <ff_printf>
 c84:	b	c98 <print_data+0x9d0>
 c88:	movw	r0, #0
 c8c:	movt	r0, #0
 c90:	bl	a4 <ff_printf>
 c94:	nop	{0}
 c98:	b	e28 <print_data+0xb60>
 c9c:	sub	r3, fp, #200	; 0xc8
 ca0:	mov	r1, r3
 ca4:	ldr	r0, [fp, #-304]	; 0xfffffed0
 ca8:	bl	0 <coda_cursor_get_special_type>
 cac:	mov	r3, r0
 cb0:	cmp	r3, #0
 cb4:	beq	cbc <print_data+0x9f4>
 cb8:	bl	0 <handle_coda_error>
 cbc:	ldr	r3, [fp, #-200]	; 0xffffff38
 cc0:	cmp	r3, #3
 cc4:	ldrls	pc, [pc, r3, lsl #2]
 cc8:	b	e30 <print_data+0xb68>
 ccc:	.word	0x00000cdc
 cd0:	.word	0x00000cec
 cd4:	.word	0x00000d20
 cd8:	.word	0x00000dd4
 cdc:	movw	r0, #0
 ce0:	movt	r0, #0
 ce4:	bl	a4 <ff_printf>
 ce8:	b	e24 <print_data+0xb5c>
 cec:	sub	r3, fp, #212	; 0xd4
 cf0:	mov	r1, r3
 cf4:	ldr	r0, [fp, #-304]	; 0xfffffed0
 cf8:	bl	0 <coda_cursor_read_double>
 cfc:	mov	r3, r0
 d00:	cmp	r3, #0
 d04:	beq	d0c <print_data+0xa44>
 d08:	bl	0 <handle_coda_error>
 d0c:	ldrd	r2, [fp, #-212]	; 0xffffff2c
 d10:	movw	r0, #0
 d14:	movt	r0, #0
 d18:	bl	a4 <ff_printf>
 d1c:	b	e24 <print_data+0xb5c>
 d20:	sub	r3, fp, #220	; 0xdc
 d24:	mov	r1, r3
 d28:	ldr	r0, [fp, #-304]	; 0xfffffed0
 d2c:	bl	0 <coda_cursor_read_double>
 d30:	mov	r3, r0
 d34:	cmp	r3, #0
 d38:	beq	d40 <print_data+0xa78>
 d3c:	bl	0 <handle_coda_error>
 d40:	vldr	d7, [fp, #-220]	; 0xffffff24
 d44:	vmov.f64	d0, d7
 d48:	bl	0 <coda_isNaN>
 d4c:	mov	r3, r0
 d50:	cmp	r3, #0
 d54:	bne	d70 <print_data+0xaa8>
 d58:	vldr	d7, [fp, #-220]	; 0xffffff24
 d5c:	vmov.f64	d0, d7
 d60:	bl	0 <coda_isInf>
 d64:	mov	r3, r0
 d68:	cmp	r3, #0
 d6c:	beq	d84 <print_data+0xabc>
 d70:	ldrd	r2, [fp, #-220]	; 0xffffff24
 d74:	movw	r0, #0
 d78:	movt	r0, #0
 d7c:	bl	a4 <ff_printf>
 d80:	b	e24 <print_data+0xb5c>
 d84:	vldr	d7, [fp, #-220]	; 0xffffff24
 d88:	sub	r3, fp, #248	; 0xf8
 d8c:	mov	r1, r3
 d90:	movw	r0, #0
 d94:	movt	r0, #0
 d98:	vmov.f64	d0, d7
 d9c:	bl	0 <coda_time_double_to_string>
 da0:	mov	r3, r0
 da4:	cmp	r3, #0
 da8:	beq	dbc <print_data+0xaf4>
 dac:	movw	r0, #0
 db0:	movt	r0, #0
 db4:	bl	a4 <ff_printf>
 db8:	b	e24 <print_data+0xb5c>
 dbc:	sub	r3, fp, #248	; 0xf8
 dc0:	mov	r1, r3
 dc4:	movw	r0, #0
 dc8:	movt	r0, #0
 dcc:	bl	a4 <ff_printf>
 dd0:	b	e24 <print_data+0xb5c>
 dd4:	sub	r2, fp, #268	; 0x10c
 dd8:	sub	r3, fp, #260	; 0x104
 ddc:	mov	r1, r3
 de0:	ldr	r0, [fp, #-304]	; 0xfffffed0
 de4:	bl	0 <coda_cursor_read_complex_double_split>
 de8:	mov	r3, r0
 dec:	cmp	r3, #0
 df0:	beq	df8 <print_data+0xb30>
 df4:	bl	0 <handle_coda_error>
 df8:	sub	r1, fp, #260	; 0x104
 dfc:	ldrd	r0, [r1]
 e00:	sub	r3, fp, #268	; 0x10c
 e04:	ldrd	r2, [r3]
 e08:	strd	r2, [sp]
 e0c:	mov	r2, r0
 e10:	mov	r3, r1
 e14:	movw	r0, #0
 e18:	movt	r0, #0
 e1c:	bl	a4 <ff_printf>
 e20:	nop	{0}
 e24:	b	e30 <print_data+0xb68>
 e28:	nop	{0}
 e2c:	b	e34 <print_data+0xb6c>
 e30:	nop	{0}
 e34:	ldr	r3, [fp, #-64]	; 0xffffffc0
 e38:	cmp	r3, #0
 e3c:	beq	e5c <print_data+0xb94>
 e40:	movw	r3, #0
 e44:	movt	r3, #0
 e48:	ldr	r3, [r3]
 e4c:	sub	r2, r3, #1
 e50:	movw	r3, #0
 e54:	movt	r3, #0
 e58:	str	r2, [r3]
 e5c:	nop	{0}
 e60:	sub	sp, fp, #28
 e64:	ldrd	r4, [sp]
 e68:	ldrd	r6, [sp, #8]
 e6c:	ldrd	r8, [sp, #16]
 e70:	ldr	fp, [sp, #24]
 e74:	add	sp, sp, #28
 e78:	pop	{pc}		; (ldr pc, [sp], #4)

00000e7c <print_yaml_data>:
 e7c:	str	fp, [sp, #-8]!
 e80:	str	lr, [sp, #4]
 e84:	add	fp, sp, #4
 e88:	sub	sp, sp, #536	; 0x218
 e8c:	str	r0, [fp, #-536]	; 0xfffffde8
 e90:	movw	r3, #0
 e94:	movt	r3, #0
 e98:	ldr	r2, [fp, #-536]	; 0xfffffde8
 e9c:	str	r2, [r3]
 ea0:	movw	r3, #0
 ea4:	movt	r3, #0
 ea8:	ldr	r3, [r3]
 eac:	sub	r2, fp, #12
 eb0:	mov	r1, r2
 eb4:	mov	r0, r3
 eb8:	bl	0 <coda_open>
 ebc:	str	r0, [fp, #-8]
 ec0:	ldr	r3, [fp, #-8]
 ec4:	cmp	r3, #0
 ec8:	beq	f10 <print_yaml_data+0x94>
 ecc:	bl	0 <coda_get_errno>
 ed0:	mov	r3, r0
 ed4:	ldr	r3, [r3]
 ed8:	cmn	r3, #21
 edc:	bne	f10 <print_yaml_data+0x94>
 ee0:	mov	r0, #0
 ee4:	bl	0 <coda_set_option_use_mmap>
 ee8:	movw	r3, #0
 eec:	movt	r3, #0
 ef0:	ldr	r3, [r3]
 ef4:	sub	r2, fp, #12
 ef8:	mov	r1, r2
 efc:	mov	r0, r3
 f00:	bl	0 <coda_open>
 f04:	str	r0, [fp, #-8]
 f08:	mov	r0, #1
 f0c:	bl	0 <coda_set_option_use_mmap>
 f10:	ldr	r3, [fp, #-8]
 f14:	cmp	r3, #0
 f18:	beq	f20 <print_yaml_data+0xa4>
 f1c:	bl	0 <handle_coda_error>
 f20:	ldr	r2, [fp, #-12]
 f24:	sub	r3, fp, #532	; 0x214
 f28:	mov	r1, r2
 f2c:	mov	r0, r3
 f30:	bl	0 <coda_cursor_set_product>
 f34:	mov	r3, r0
 f38:	cmp	r3, #0
 f3c:	beq	f44 <print_yaml_data+0xc8>
 f40:	bl	0 <handle_coda_error>
 f44:	movw	r3, #0
 f48:	movt	r3, #0
 f4c:	ldr	r3, [r3]
 f50:	cmp	r3, #0
 f54:	beq	f88 <print_yaml_data+0x10c>
 f58:	movw	r3, #0
 f5c:	movt	r3, #0
 f60:	ldr	r2, [r3]
 f64:	sub	r3, fp, #532	; 0x214
 f68:	mov	r1, r2
 f6c:	mov	r0, r3
 f70:	bl	0 <coda_cursor_goto>
 f74:	str	r0, [fp, #-8]
 f78:	ldr	r3, [fp, #-8]
 f7c:	cmp	r3, #0
 f80:	beq	f88 <print_yaml_data+0x10c>
 f84:	bl	0 <handle_coda_error>
 f88:	mov	r0, #0
 f8c:	bl	0 <coda_set_option_perform_boundary_checks>
 f90:	sub	r3, fp, #532	; 0x214
 f94:	mov	r1, #0
 f98:	mov	r0, r3
 f9c:	bl	2c8 <print_data>
 fa0:	ldr	r3, [fp, #-12]
 fa4:	mov	r0, r3
 fa8:	bl	0 <coda_close>
 fac:	nop	{0}
 fb0:	sub	sp, fp, #4
 fb4:	ldr	fp, [sp]
 fb8:	add	sp, sp, #4
 fbc:	pop	{pc}		; (ldr pc, [sp], #4)
