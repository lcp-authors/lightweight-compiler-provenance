
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/__/__/external/hash/ptr_set.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ht_clear>:
   0:	str	r4, [sp, #-8]!
   4:	mov	r4, r0
   8:	ldr	r0, [r0]
   c:	str	lr, [sp, #4]
  10:	cmp	r0, #0
  14:	beq	1c <ht_clear+0x1c>
  18:	bl	0 <free>
  1c:	mov	r3, #0
  20:	str	r3, [r4]
  24:	str	r3, [r4, #4]
  28:	str	r3, [r4, #8]
  2c:	str	r3, [r4, #12]
  30:	ldr	r4, [sp]
  34:	add	sp, sp, #4
  38:	pop	{pc}		; (ldr pc, [sp], #4)

0000003c <ht_insert.isra.4>:
  3c:	strd	r4, [sp, #-28]!	; 0xffffffe4
  40:	strd	r6, [sp, #8]
  44:	subs	r7, r2, #0
  48:	strd	r8, [sp, #16]
  4c:	str	lr, [sp, #24]
  50:	sub	sp, sp, #28
  54:	beq	1e8 <ht_insert.isra.4+0x1ac>
  58:	cmp	r7, #2
  5c:	beq	228 <ht_insert.isra.4+0x1ec>
  60:	cmp	r7, #1
  64:	beq	208 <ht_insert.isra.4+0x1cc>
  68:	ldr	r9, [r0, #12]
  6c:	mov	r5, r1
  70:	mov	r8, r3
  74:	mov	r3, #179	; 0xb3
  78:	mov	r6, r0
  7c:	ldr	r1, [r0, #8]
  80:	mul	r3, r3, r9
  84:	cmp	r1, r3, lsr #8
  88:	bcs	154 <ht_insert.isra.4+0x118>
  8c:	add	ip, sp, #16
  90:	movw	r1, #15186	; 0x3b52
  94:	movt	r1, #12137	; 0x2f69
  98:	mov	r2, #4
  9c:	ldr	r4, [r6]
  a0:	mov	r3, #0
  a4:	add	r0, sp, #12
  a8:	stm	sp, {r1, ip}
  ac:	sub	r9, r9, #1
  b0:	str	r5, [sp, #12]
  b4:	bl	0 <cmetrohash64_1>
  b8:	ldr	r2, [sp, #16]
  bc:	sub	r3, r8, #2
  c0:	cmp	r3, #1
  c4:	and	r1, r9, r2
  c8:	add	r3, r4, r1, lsl #2
  cc:	bls	178 <ht_insert.isra.4+0x13c>
  d0:	ldr	r0, [r4, r1, lsl #2]
  d4:	cmp	r0, #0
  d8:	moveq	r1, r3
  dc:	beq	128 <ht_insert.isra.4+0xec>
  e0:	add	r2, r2, #1
  e4:	mov	r1, #0
  e8:	b	10c <ht_insert.isra.4+0xd0>
  ec:	cmp	r5, r0
  f0:	beq	16c <ht_insert.isra.4+0x130>
  f4:	and	r3, r9, r2
  f8:	add	r2, r2, #1
  fc:	ldr	r0, [r4, r3, lsl #2]
 100:	add	r3, r4, r3, lsl #2
 104:	cmp	r0, #0
 108:	beq	120 <ht_insert.isra.4+0xe4>
 10c:	cmp	r0, #2
 110:	bne	ec <ht_insert.isra.4+0xb0>
 114:	cmp	r1, #0
 118:	moveq	r1, r3
 11c:	b	f4 <ht_insert.isra.4+0xb8>
 120:	cmp	r1, #0
 124:	moveq	r1, r3
 128:	ldr	r3, [r6, #8]
 12c:	mov	r0, #0
 130:	add	r3, r3, #1
 134:	str	r3, [r6, #8]
 138:	str	r7, [r1]
 13c:	add	sp, sp, #28
 140:	ldrd	r4, [sp]
 144:	ldrd	r6, [sp, #8]
 148:	ldrd	r8, [sp, #16]
 14c:	add	sp, sp, #24
 150:	pop	{pc}		; (ldr pc, [sp], #4)
 154:	lsl	r1, r1, #1
 158:	bl	248 <ht_resize>
 15c:	cmp	r0, #0
 160:	bne	1c0 <ht_insert.isra.4+0x184>
 164:	ldr	r9, [r6, #12]
 168:	b	8c <ht_insert.isra.4+0x50>
 16c:	cmp	r8, #0
 170:	streq	r7, [r3]
 174:	b	13c <ht_insert.isra.4+0x100>
 178:	ldr	r0, [r6, #8]
 17c:	ldr	ip, [r4, r1, lsl #2]
 180:	add	r1, r0, #1
 184:	cmp	ip, #0
 188:	cmpne	ip, #2
 18c:	str	r1, [r6, #8]
 190:	beq	1b4 <ht_insert.isra.4+0x178>
 194:	add	r2, r2, #1
 198:	and	r3, r9, r2
 19c:	add	r2, r2, #1
 1a0:	ldr	r1, [r4, r3, lsl #2]
 1a4:	add	r3, r4, r3, lsl #2
 1a8:	cmp	r1, #0
 1ac:	cmpne	r1, #2
 1b0:	bne	198 <ht_insert.isra.4+0x15c>
 1b4:	mov	r0, #0
 1b8:	str	r7, [r3]
 1bc:	b	13c <ht_insert.isra.4+0x100>
 1c0:	movw	r3, #0
 1c4:	movt	r3, #0
 1c8:	movw	r2, #0
 1cc:	movt	r2, #0
 1d0:	ldr	r0, [r3]
 1d4:	movw	r1, #0
 1d8:	movt	r1, #0
 1dc:	bl	0 <fprintf>
 1e0:	mov	r0, #1
 1e4:	bl	0 <exit>
 1e8:	movw	r3, #0
 1ec:	movt	r3, #0
 1f0:	movw	r1, #0
 1f4:	movt	r1, #0
 1f8:	movw	r0, #0
 1fc:	movt	r0, #0
 200:	mov	r2, #114	; 0x72
 204:	bl	0 <__assert_fail>
 208:	movw	r3, #0
 20c:	movt	r3, #0
 210:	movw	r1, #0
 214:	movt	r1, #0
 218:	movw	r0, #0
 21c:	movt	r0, #0
 220:	mov	r2, #116	; 0x74
 224:	bl	0 <__assert_fail>
 228:	movw	r3, #0
 22c:	movt	r3, #0
 230:	movw	r1, #0
 234:	movt	r1, #0
 238:	movw	r0, #0
 23c:	movt	r0, #0
 240:	mov	r2, #115	; 0x73
 244:	bl	0 <__assert_fail>

00000248 <ht_resize>:
 248:	ldr	r3, [r0, #8]
 24c:	strd	r4, [sp, #-20]!	; 0xffffffec
 250:	ldr	r5, [r0]
 254:	strd	r6, [sp, #8]
 258:	mov	r7, r0
 25c:	str	lr, [sp, #16]
 260:	sub	sp, sp, #20
 264:	cmp	r1, r3
 268:	movcc	r1, r3
 26c:	cmp	r1, #2
 270:	bls	348 <ht_resize+0x100>
 274:	mov	r3, #4
 278:	movw	r0, #358	; 0x166
 27c:	mul	r2, r0, r3
 280:	lsl	r6, r3, #1
 284:	cmp	r1, r2, lsr #8
 288:	mov	r3, r6
 28c:	bhi	27c <ht_resize+0x34>
 290:	mov	r1, #4
 294:	mov	r0, r6
 298:	bl	0 <calloc>
 29c:	cmp	r0, #0
 2a0:	str	r0, [sp]
 2a4:	beq	350 <ht_resize+0x108>
 2a8:	ldr	r3, [r7, #12]
 2ac:	mov	r4, #0
 2b0:	str	r4, [sp, #4]
 2b4:	str	r4, [sp, #8]
 2b8:	str	r6, [sp, #12]
 2bc:	cmp	r3, r4
 2c0:	moveq	r6, sp
 2c4:	beq	30c <ht_resize+0xc4>
 2c8:	sub	r5, r5, #4
 2cc:	mov	r6, sp
 2d0:	b	2dc <ht_resize+0x94>
 2d4:	cmp	r3, r4
 2d8:	bls	30c <ht_resize+0xc4>
 2dc:	ldr	r2, [r5, #4]!
 2e0:	add	r4, r4, #1
 2e4:	cmp	r2, #0
 2e8:	cmpne	r2, #2
 2ec:	beq	2d4 <ht_resize+0x8c>
 2f0:	mov	r3, #3
 2f4:	mov	r1, r2
 2f8:	mov	r0, r6
 2fc:	bl	3c <ht_insert.isra.4>
 300:	ldr	r3, [r7, #12]
 304:	cmp	r3, r4
 308:	bhi	2dc <ht_resize+0x94>
 30c:	mov	r0, r7
 310:	bl	0 <ht_clear>
 314:	ldr	r3, [sp]
 318:	mov	r0, #0
 31c:	ldmib	r6, {r1, r2}
 320:	str	r3, [r7]
 324:	ldr	r3, [r6, #12]
 328:	str	r1, [r7, #4]
 32c:	str	r2, [r7, #8]
 330:	str	r3, [r7, #12]
 334:	add	sp, sp, #20
 338:	ldrd	r4, [sp]
 33c:	ldrd	r6, [sp, #8]
 340:	add	sp, sp, #16
 344:	pop	{pc}		; (ldr pc, [sp], #4)
 348:	mov	r6, #4
 34c:	b	290 <ht_resize+0x48>
 350:	mvn	r0, #0
 354:	b	334 <ht_resize+0xec>

00000358 <ht_find.isra.5>:
 358:	strd	r4, [sp, #-16]!
 35c:	subs	r5, r0, #0
 360:	str	r6, [sp, #8]
 364:	str	lr, [sp, #12]
 368:	sub	sp, sp, #24
 36c:	beq	3e0 <ht_find.isra.5+0x88>
 370:	movw	r3, #15186	; 0x3b52
 374:	movt	r3, #12137	; 0x2f69
 378:	ldr	r4, [r1]
 37c:	add	r1, sp, #16
 380:	mov	r6, r2
 384:	add	r0, sp, #12
 388:	mov	r2, #4
 38c:	str	r3, [sp]
 390:	mov	r3, #0
 394:	str	r1, [sp, #4]
 398:	str	r6, [sp, #12]
 39c:	bl	0 <cmetrohash64_1>
 3a0:	ldr	r3, [sp, #16]
 3a4:	sub	r4, r4, #1
 3a8:	and	r2, r4, r3
 3ac:	ldr	r0, [r5, r2, lsl #2]
 3b0:	cmp	r0, #0
 3b4:	beq	3e0 <ht_find.isra.5+0x88>
 3b8:	add	r3, r3, #1
 3bc:	cmp	r0, #2
 3c0:	and	r1, r4, r3
 3c4:	beq	3d0 <ht_find.isra.5+0x78>
 3c8:	cmp	r6, r0
 3cc:	beq	3e4 <ht_find.isra.5+0x8c>
 3d0:	ldr	r0, [r5, r1, lsl #2]
 3d4:	add	r3, r3, #1
 3d8:	cmp	r0, #0
 3dc:	bne	3bc <ht_find.isra.5+0x64>
 3e0:	mov	r0, #0
 3e4:	add	sp, sp, #24
 3e8:	ldrd	r4, [sp]
 3ec:	ldr	r6, [sp, #8]
 3f0:	add	sp, sp, #12
 3f4:	pop	{pc}		; (ldr pc, [sp], #4)

000003f8 <ht_remove.isra.6>:
 3f8:	strd	r4, [sp, #-20]!	; 0xffffffec
 3fc:	ldr	r4, [r0]
 400:	strd	r6, [sp, #8]
 404:	str	lr, [sp, #16]
 408:	sub	sp, sp, #28
 40c:	cmp	r4, #0
 410:	beq	490 <ht_remove.isra.6+0x98>
 414:	mov	r6, r1
 418:	movw	r3, #15186	; 0x3b52
 41c:	movt	r3, #12137	; 0x2f69
 420:	add	r1, sp, #16
 424:	mov	r7, r0
 428:	mov	r2, #4
 42c:	str	r6, [sp, #12]
 430:	add	r0, sp, #12
 434:	ldr	r5, [r7, #12]
 438:	str	r3, [sp]
 43c:	mov	r3, #0
 440:	str	r1, [sp, #4]
 444:	bl	0 <cmetrohash64_1>
 448:	ldr	r3, [sp, #16]
 44c:	sub	r5, r5, #1
 450:	and	ip, r5, r3
 454:	ldr	r0, [r4, ip, lsl #2]
 458:	add	ip, r4, ip, lsl #2
 45c:	cmp	r0, #0
 460:	beq	490 <ht_remove.isra.6+0x98>
 464:	add	r3, r3, #1
 468:	cmp	r0, #2
 46c:	and	r2, r5, r3
 470:	beq	47c <ht_remove.isra.6+0x84>
 474:	cmp	r6, r0
 478:	beq	4a8 <ht_remove.isra.6+0xb0>
 47c:	ldr	r0, [r4, r2, lsl #2]
 480:	add	r3, r3, #1
 484:	add	ip, r4, r2, lsl #2
 488:	cmp	r0, #0
 48c:	bne	468 <ht_remove.isra.6+0x70>
 490:	mov	r0, #0
 494:	add	sp, sp, #28
 498:	ldrd	r4, [sp]
 49c:	ldrd	r6, [sp, #8]
 4a0:	add	sp, sp, #16
 4a4:	pop	{pc}		; (ldr pc, [sp], #4)
 4a8:	ldr	r3, [r7, #8]
 4ac:	mov	r2, #2
 4b0:	str	r2, [ip]
 4b4:	sub	r3, r3, #1
 4b8:	str	r3, [r7, #8]
 4bc:	b	494 <ht_remove.isra.6+0x9c>

000004c0 <ptr_set_clear>:
 4c0:	b	0 <ht_clear>

000004c4 <ptr_set_destroy>:
 4c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
 4c8:	strd	r6, [sp, #8]
 4cc:	mov	r7, r0
 4d0:	str	r8, [sp, #16]
 4d4:	subs	r8, r1, #0
 4d8:	str	lr, [sp, #20]
 4dc:	beq	528 <ptr_set_destroy+0x64>
 4e0:	ldr	r5, [r0]
 4e4:	ldr	ip, [r0, #12]
 4e8:	cmp	ip, #0
 4ec:	beq	528 <ptr_set_destroy+0x64>
 4f0:	mov	r6, r2
 4f4:	sub	r5, r5, #4
 4f8:	mov	r4, #0
 4fc:	ldr	r3, [r5, #4]!
 500:	mov	r0, r6
 504:	add	r4, r4, #1
 508:	cmp	r3, #0
 50c:	cmpne	r3, #2
 510:	mov	r1, r3
 514:	beq	520 <ptr_set_destroy+0x5c>
 518:	blx	r8
 51c:	ldr	ip, [r7, #12]
 520:	cmp	r4, ip
 524:	bcc	4fc <ptr_set_destroy+0x38>
 528:	mov	r0, r7
 52c:	ldrd	r4, [sp]
 530:	ldrd	r6, [sp, #8]
 534:	ldr	r8, [sp, #16]
 538:	ldr	lr, [sp, #20]
 53c:	add	sp, sp, #24
 540:	b	0 <ht_clear>

00000544 <ptr_set_init>:
 544:	cmp	r1, #2
 548:	strd	r4, [sp, #-16]!
 54c:	mov	r4, r0
 550:	str	r6, [sp, #8]
 554:	str	lr, [sp, #12]
 558:	bls	5b4 <ptr_set_init+0x70>
 55c:	mov	r3, #4
 560:	movw	r0, #358	; 0x166
 564:	mul	r2, r0, r3
 568:	lsl	r5, r3, #1
 56c:	cmp	r1, r2, lsr #8
 570:	mov	r3, r5
 574:	bhi	564 <ptr_set_init+0x20>
 578:	mov	r1, #4
 57c:	mov	r0, r5
 580:	bl	0 <calloc>
 584:	cmp	r0, #0
 588:	str	r0, [r4]
 58c:	beq	5bc <ptr_set_init+0x78>
 590:	mov	r3, #0
 594:	mov	r0, r3
 598:	str	r3, [r4, #4]
 59c:	str	r3, [r4, #8]
 5a0:	str	r5, [r4, #12]
 5a4:	ldrd	r4, [sp]
 5a8:	ldr	r6, [sp, #8]
 5ac:	add	sp, sp, #12
 5b0:	pop	{pc}		; (ldr pc, [sp], #4)
 5b4:	mov	r5, #4
 5b8:	b	578 <ptr_set_init+0x34>
 5bc:	mvn	r0, #0
 5c0:	b	5a4 <ptr_set_init+0x60>

000005c4 <ptr_set_resize>:
 5c4:	b	248 <ht_resize>

000005c8 <ptr_set_insert>:
 5c8:	mov	r2, r3
 5cc:	ldr	r3, [sp]
 5d0:	b	3c <ht_insert.isra.4>

000005d4 <ptr_set_insert_item>:
 5d4:	mov	r3, r2
 5d8:	mov	r2, r1
 5dc:	b	3c <ht_insert.isra.4>

000005e0 <ptr_set_find>:
 5e0:	mov	r3, r0
 5e4:	mov	r2, r1
 5e8:	ldr	r0, [r3], #12
 5ec:	mov	r1, r3
 5f0:	b	358 <ht_find.isra.5>

000005f4 <ptr_set_find_item>:
 5f4:	mov	r3, r0
 5f8:	mov	r2, r1
 5fc:	ldr	r0, [r3], #12
 600:	mov	r1, r3
 604:	b	358 <ht_find.isra.5>

00000608 <ptr_set_remove>:
 608:	b	3f8 <ht_remove.isra.6>

0000060c <ptr_set_remove_item>:
 60c:	b	3f8 <ht_remove.isra.6>

00000610 <ptr_set_visit>:
 610:	ldr	ip, [r0, #12]
 614:	strd	r4, [sp, #-24]!	; 0xffffffe8
 618:	ldr	r5, [r0]
 61c:	strd	r6, [sp, #8]
 620:	str	r8, [sp, #16]
 624:	cmp	ip, #0
 628:	str	lr, [sp, #20]
 62c:	beq	670 <ptr_set_visit+0x60>
 630:	mov	r6, r2
 634:	mov	r8, r1
 638:	mov	r7, r0
 63c:	sub	r5, r5, #4
 640:	mov	r4, #0
 644:	ldr	r3, [r5, #4]!
 648:	mov	r0, r6
 64c:	add	r4, r4, #1
 650:	cmp	r3, #0
 654:	cmpne	r3, #2
 658:	mov	r1, r3
 65c:	beq	668 <ptr_set_visit+0x58>
 660:	blx	r8
 664:	ldr	ip, [r7, #12]
 668:	cmp	r4, ip
 66c:	bcc	644 <ptr_set_visit+0x34>
 670:	ldrd	r4, [sp]
 674:	ldrd	r6, [sp, #8]
 678:	ldr	r8, [sp, #16]
 67c:	add	sp, sp, #20
 680:	pop	{pc}		; (ldr pc, [sp], #4)
