
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <compare_strings>:
       0:	strd	r4, [sp, #-32]!	; 0xffffffe0
       4:	strd	r6, [sp, #8]
       8:	strd	r8, [sp, #16]
       c:	ldrd	r8, [sp, #32]
      10:	str	sl, [sp, #24]
      14:	str	lr, [sp, #28]
      18:	cmp	r1, r8
      1c:	movlt	r6, r1
      20:	movge	r6, r8
      24:	cmp	r6, #0
      28:	ble	c4 <compare_strings+0xc4>
      2c:	ldrb	r4, [r2, r0]
      30:	add	lr, r2, r0
      34:	ldrb	ip, [r9, r3]
      38:	cmp	r4, ip
      3c:	bne	c4 <compare_strings+0xc4>
      40:	add	ip, r3, #1
      44:	add	r7, r9, r3
      48:	add	ip, r9, ip
      4c:	add	r6, r6, r7
      50:	b	64 <compare_strings+0x64>
      54:	ldrb	r4, [ip], #1
      58:	ldrb	r5, [lr, #1]!
      5c:	cmp	r5, r4
      60:	bne	70 <compare_strings+0x70>
      64:	cmp	ip, r6
      68:	sub	sl, ip, r7
      6c:	bne	54 <compare_strings+0x54>
      70:	cmp	r1, sl
      74:	beq	b8 <compare_strings+0xb8>
      78:	cmp	r8, sl
      7c:	moveq	r0, #1
      80:	beq	a0 <compare_strings+0xa0>
      84:	add	r2, r2, sl
      88:	add	r9, r9, sl
      8c:	ldrb	r2, [r2, r0]
      90:	ldrb	r3, [r9, r3]
      94:	cmp	r2, r3
      98:	movhi	r0, #1
      9c:	mvnls	r0, #0
      a0:	ldrd	r4, [sp]
      a4:	ldrd	r6, [sp, #8]
      a8:	ldrd	r8, [sp, #16]
      ac:	ldr	sl, [sp, #24]
      b0:	add	sp, sp, #28
      b4:	pop	{pc}		; (ldr pc, [sp], #4)
      b8:	subs	r0, r8, r1
      bc:	mvnne	r0, #0
      c0:	b	a0 <compare_strings+0xa0>
      c4:	mov	sl, #0
      c8:	b	70 <compare_strings+0x70>

000000cc <print_expression>:
      cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
      d0:	strd	r6, [sp, #8]
      d4:	subs	r7, r0, #0
      d8:	strd	r8, [sp, #16]
      dc:	strd	sl, [sp, #24]
      e0:	str	lr, [sp, #32]
      e4:	sub	sp, sp, #60	; 0x3c
      e8:	beq	2668 <print_expression+0x259c>
      ec:	mov	r8, r3
      f0:	ldr	r3, [r7]
      f4:	mov	r4, r1
      f8:	mov	r9, r2
      fc:	cmp	r3, #86	; 0x56
     100:	ldrls	pc, [pc, r3, lsl #2]
     104:	b	2d8 <print_expression+0x20c>
     108:	.word	0x00001714
     10c:	.word	0x000016ac
     110:	.word	0x00001660
     114:	.word	0x000015f4
     118:	.word	0x00001588
     11c:	.word	0x0000151c
     120:	.word	0x000014b0
     124:	.word	0x00001444
     128:	.word	0x00001854
     12c:	.word	0x000017e8
     130:	.word	0x000017c8
     134:	.word	0x0000175c
     138:	.word	0x00001908
     13c:	.word	0x000018c0
     140:	.word	0x00001950
     144:	.word	0x000010f4
     148:	.word	0x00001028
     14c:	.word	0x00000fe0
     150:	.word	0x000010c8
     154:	.word	0x00000ce4
     158:	.word	0x00000f54
     15c:	.word	0x00000d04
     160:	.word	0x00000d04
     164:	.word	0x00000f74
     168:	.word	0x00000c7c
     16c:	.word	0x00000c14
     170:	.word	0x00000bcc
     174:	.word	0x00000bac
     178:	.word	0x00000b8c
     17c:	.word	0x00000b44
     180:	.word	0x00000afc
     184:	.word	0x00000a48
     188:	.word	0x000009f0
     18c:	.word	0x00001e84
     190:	.word	0x00001e74
     194:	.word	0x00001ba0
     198:	.word	0x00001b90
     19c:	.word	0x00001e38
     1a0:	.word	0x00001e28
     1a4:	.word	0x000013fc
     1a8:	.word	0x000013b0
     1ac:	.word	0x00001348
     1b0:	.word	0x000012c8
     1b4:	.word	0x00001280
     1b8:	.word	0x0000125c
     1bc:	.word	0x00001214
     1c0:	.word	0x000011cc
     1c4:	.word	0x00001184
     1c8:	.word	0x0000113c
     1cc:	.word	0x00001f00
     1d0:	.word	0x00001eb8
     1d4:	.word	0x00001b44
     1d8:	.word	0x00001af8
     1dc:	.word	0x00001ab0
     1e0:	.word	0x00001a4c
     1e4:	.word	0x00001a04
     1e8:	.word	0x00001998
     1ec:	.word	0x00001ce0
     1f0:	.word	0x00001c78
     1f4:	.word	0x00001c10
     1f8:	.word	0x00001be4
     1fc:	.word	0x00001d78
     200:	.word	0x00001d4c
     204:	.word	0x00001de0
     208:	.word	0x000009a8
     20c:	.word	0x00000940
     210:	.word	0x000008f8
     214:	.word	0x000008d8
     218:	.word	0x000008b8
     21c:	.word	0x00000898
     220:	.word	0x00000878
     224:	.word	0x000007e8
     228:	.word	0x000007a0
     22c:	.word	0x00000758
     230:	.word	0x0000070c
     234:	.word	0x000006f8
     238:	.word	0x00000264
     23c:	.word	0x00000668
     240:	.word	0x00000600
     244:	.word	0x00000594
     248:	.word	0x0000054c
     24c:	.word	0x000004e0
     250:	.word	0x00000494
     254:	.word	0x00000448
     258:	.word	0x000003bc
     25c:	.word	0x00000368
     260:	.word	0x000002f8
     264:	movw	r0, #0
     268:	movt	r0, #0
     26c:	movw	r3, #0
     270:	movt	r3, #0
     274:	cmp	r8, #0
     278:	mov	r5, #15
     27c:	moveq	r0, r3
     280:	blx	r4
     284:	mov	r3, r8
     288:	mov	r2, r9
     28c:	str	r5, [sp]
     290:	mov	r1, r4
     294:	ldr	r0, [r7, #16]
     298:	bl	cc <print_expression>
     29c:	ldr	r3, [r7, #20]
     2a0:	cmp	r3, #0
     2a4:	beq	2cc <print_expression+0x200>
     2a8:	movw	r0, #0
     2ac:	movt	r0, #0
     2b0:	blx	r4
     2b4:	mov	r3, r8
     2b8:	mov	r2, r9
     2bc:	str	r5, [sp]
     2c0:	mov	r1, r4
     2c4:	ldr	r0, [r7, #20]
     2c8:	bl	cc <print_expression>
     2cc:	movw	r0, #0
     2d0:	movt	r0, #0
     2d4:	blx	r4
     2d8:	mov	r0, #0
     2dc:	add	sp, sp, #60	; 0x3c
     2e0:	ldrd	r4, [sp]
     2e4:	ldrd	r6, [sp, #8]
     2e8:	ldrd	r8, [sp, #16]
     2ec:	ldrd	sl, [sp, #24]
     2f0:	add	sp, sp, #32
     2f4:	pop	{pc}		; (ldr pc, [sp], #4)
     2f8:	cmp	r8, #0
     2fc:	mov	r5, #15
     300:	ldr	r1, [r7, #12]
     304:	movw	r3, #0
     308:	movt	r3, #0
     30c:	movw	r0, #0
     310:	movt	r0, #0
     314:	moveq	r0, r3
     318:	blx	r4
     31c:	mov	r3, r8
     320:	mov	r2, r9
     324:	str	r5, [sp]
     328:	mov	r1, r4
     32c:	ldr	r0, [r7, #16]
     330:	bl	cc <print_expression>
     334:	movw	r0, #0
     338:	movt	r0, #0
     33c:	blx	r4
     340:	mov	r3, r8
     344:	mov	r2, r9
     348:	str	r5, [sp]
     34c:	mov	r1, r4
     350:	ldr	r0, [r7, #20]
     354:	bl	cc <print_expression>
     358:	movw	r0, #0
     35c:	movt	r0, #0
     360:	blx	r4
     364:	b	2d8 <print_expression+0x20c>
     368:	movw	r0, #0
     36c:	movt	r0, #0
     370:	ldr	r1, [r7, #12]
     374:	blx	r4
     378:	ldr	r3, [r7, #16]
     37c:	cmp	r3, #0
     380:	beq	2d8 <print_expression+0x20c>
     384:	movw	r0, #0
     388:	movt	r0, #0
     38c:	blx	r4
     390:	mov	r0, #15
     394:	mov	r3, r8
     398:	mov	r2, r9
     39c:	mov	r1, r4
     3a0:	str	r0, [sp]
     3a4:	ldr	r0, [r7, #16]
     3a8:	bl	cc <print_expression>
     3ac:	movw	r0, #0
     3b0:	movt	r0, #0
     3b4:	blx	r4
     3b8:	b	2d8 <print_expression+0x20c>
     3bc:	cmp	r8, #0
     3c0:	movw	r3, #0
     3c4:	movt	r3, #0
     3c8:	movw	r0, #0
     3cc:	movt	r0, #0
     3d0:	moveq	r0, r3
     3d4:	ldr	r1, [r7, #12]
     3d8:	blx	r4
     3dc:	ldr	r3, [r7, #16]
     3e0:	cmp	r3, #0
     3e4:	beq	41c <print_expression+0x350>
     3e8:	movw	r0, #0
     3ec:	movt	r0, #0
     3f0:	blx	r4
     3f4:	mov	r0, #15
     3f8:	mov	r3, r8
     3fc:	mov	r2, r9
     400:	mov	r1, r4
     404:	str	r0, [sp]
     408:	ldr	r0, [r7, #16]
     40c:	bl	cc <print_expression>
     410:	movw	r0, #0
     414:	movt	r0, #0
     418:	blx	r4
     41c:	movw	r0, #0
     420:	movt	r0, #0
     424:	blx	r4
     428:	mov	r0, #15
     42c:	mov	r3, r8
     430:	mov	r2, r9
     434:	mov	r1, r4
     438:	str	r0, [sp]
     43c:	ldr	r0, [r7, #20]
     440:	bl	cc <print_expression>
     444:	b	2d8 <print_expression+0x20c>
     448:	cmp	r8, #0
     44c:	movw	r3, #0
     450:	movt	r3, #0
     454:	movw	r0, #0
     458:	movt	r0, #0
     45c:	moveq	r0, r3
     460:	ldr	r1, [r7, #12]
     464:	blx	r4
     468:	mov	r0, #15
     46c:	mov	r3, r8
     470:	mov	r2, r9
     474:	mov	r1, r4
     478:	str	r0, [sp]
     47c:	ldr	r0, [r7, #16]
     480:	bl	cc <print_expression>
     484:	movw	r0, #0
     488:	movt	r0, #0
     48c:	blx	r4
     490:	b	2d8 <print_expression+0x20c>
     494:	cmp	r8, #0
     498:	movw	r3, #0
     49c:	movt	r3, #0
     4a0:	movw	r0, #0
     4a4:	movt	r0, #0
     4a8:	moveq	r0, r3
     4ac:	ldr	r1, [r7, #12]
     4b0:	blx	r4
     4b4:	mov	r0, #15
     4b8:	mov	r3, r8
     4bc:	mov	r2, r9
     4c0:	mov	r1, r4
     4c4:	str	r0, [sp]
     4c8:	ldr	r0, [r7, #16]
     4cc:	bl	cc <print_expression>
     4d0:	movw	r0, #0
     4d4:	movt	r0, #0
     4d8:	blx	r4
     4dc:	b	2d8 <print_expression+0x20c>
     4e0:	cmp	r8, #0
     4e4:	mov	r5, #15
     4e8:	movw	r3, #0
     4ec:	movt	r3, #0
     4f0:	movw	r0, #0
     4f4:	movt	r0, #0
     4f8:	moveq	r0, r3
     4fc:	blx	r1
     500:	mov	r3, r8
     504:	mov	r2, r9
     508:	str	r5, [sp]
     50c:	mov	r1, r4
     510:	ldr	r0, [r7, #16]
     514:	bl	cc <print_expression>
     518:	movw	r0, #0
     51c:	movt	r0, #0
     520:	blx	r4
     524:	mov	r3, r8
     528:	mov	r2, r9
     52c:	str	r5, [sp]
     530:	mov	r1, r4
     534:	ldr	r0, [r7, #20]
     538:	bl	cc <print_expression>
     53c:	movw	r0, #0
     540:	movt	r0, #0
     544:	blx	r4
     548:	b	2d8 <print_expression+0x20c>
     54c:	cmp	r8, #0
     550:	movw	r3, #0
     554:	movt	r3, #0
     558:	movw	r0, #0
     55c:	movt	r0, #0
     560:	moveq	r0, r3
     564:	blx	r1
     568:	mov	r0, #15
     56c:	mov	r3, r8
     570:	mov	r2, r9
     574:	mov	r1, r4
     578:	str	r0, [sp]
     57c:	ldr	r0, [r7, #16]
     580:	bl	cc <print_expression>
     584:	movw	r0, #0
     588:	movt	r0, #0
     58c:	blx	r4
     590:	b	2d8 <print_expression+0x20c>
     594:	cmp	r8, #0
     598:	mov	r5, #15
     59c:	movw	r3, #0
     5a0:	movt	r3, #0
     5a4:	movw	r0, #0
     5a8:	movt	r0, #0
     5ac:	moveq	r0, r3
     5b0:	blx	r1
     5b4:	mov	r3, r8
     5b8:	mov	r2, r9
     5bc:	str	r5, [sp]
     5c0:	mov	r1, r4
     5c4:	ldr	r0, [r7, #16]
     5c8:	bl	cc <print_expression>
     5cc:	movw	r0, #0
     5d0:	movt	r0, #0
     5d4:	blx	r4
     5d8:	mov	r3, r8
     5dc:	mov	r2, r9
     5e0:	str	r5, [sp]
     5e4:	mov	r1, r4
     5e8:	ldr	r0, [r7, #20]
     5ec:	bl	cc <print_expression>
     5f0:	movw	r0, #0
     5f4:	movt	r0, #0
     5f8:	blx	r4
     5fc:	b	2d8 <print_expression+0x20c>
     600:	ldr	r3, [sp, #96]	; 0x60
     604:	mov	r5, #4
     608:	cmp	r3, #3
     60c:	bgt	216c <print_expression+0x20a0>
     610:	movw	r0, #0
     614:	movt	r0, #0
     618:	blx	r1
     61c:	mov	r3, r8
     620:	mov	r2, r9
     624:	str	r5, [sp]
     628:	mov	r1, r4
     62c:	ldr	r0, [r7, #16]
     630:	bl	cc <print_expression>
     634:	movw	r0, #0
     638:	movt	r0, #0
     63c:	blx	r4
     640:	mov	r3, r8
     644:	mov	r2, r9
     648:	str	r5, [sp]
     64c:	mov	r1, r4
     650:	ldr	r0, [r7, #20]
     654:	bl	cc <print_expression>
     658:	movw	r0, #0
     65c:	movt	r0, #0
     660:	blx	r4
     664:	b	2d8 <print_expression+0x20c>
     668:	cmp	r8, #0
     66c:	mov	r5, #15
     670:	movw	r3, #0
     674:	movt	r3, #0
     678:	movw	r0, #0
     67c:	movt	r0, #0
     680:	moveq	r0, r3
     684:	blx	r1
     688:	mov	r3, r8
     68c:	mov	r2, r9
     690:	str	r5, [sp]
     694:	mov	r1, r4
     698:	ldr	r0, [r7, #16]
     69c:	bl	cc <print_expression>
     6a0:	movw	r0, #0
     6a4:	movt	r0, #0
     6a8:	blx	r4
     6ac:	mov	r3, r8
     6b0:	mov	r2, r9
     6b4:	str	r5, [sp]
     6b8:	mov	r1, r4
     6bc:	ldr	r0, [r7, #20]
     6c0:	bl	cc <print_expression>
     6c4:	movw	r0, #0
     6c8:	movt	r0, #0
     6cc:	blx	r4
     6d0:	mov	r3, r8
     6d4:	mov	r2, r9
     6d8:	str	r5, [sp]
     6dc:	mov	r1, r4
     6e0:	ldr	r0, [r7, #24]
     6e4:	bl	cc <print_expression>
     6e8:	movw	r0, #0
     6ec:	movt	r0, #0
     6f0:	blx	r4
     6f4:	b	2d8 <print_expression+0x20c>
     6f8:	movw	r0, #0
     6fc:	movt	r0, #0
     700:	movw	r3, #0
     704:	movt	r3, #0
     708:	b	274 <print_expression+0x1a8>
     70c:	mov	r5, #15
     710:	mov	r3, r8
     714:	str	r5, [sp]
     718:	ldr	r0, [r7, #16]
     71c:	bl	cc <print_expression>
     720:	cmp	r8, #0
     724:	movw	r3, #0
     728:	movt	r3, #0
     72c:	movw	r0, #0
     730:	movt	r0, #0
     734:	moveq	r0, r3
     738:	blx	r4
     73c:	mov	r3, r8
     740:	mov	r2, r9
     744:	str	r5, [sp]
     748:	mov	r1, r4
     74c:	ldr	r0, [r7, #20]
     750:	bl	cc <print_expression>
     754:	b	2d8 <print_expression+0x20c>
     758:	cmp	r8, #0
     75c:	movw	r3, #0
     760:	movt	r3, #0
     764:	movw	r0, #0
     768:	movt	r0, #0
     76c:	moveq	r0, r3
     770:	blx	r1
     774:	mov	r0, #15
     778:	mov	r3, r8
     77c:	mov	r2, r9
     780:	mov	r1, r4
     784:	str	r0, [sp]
     788:	ldr	r0, [r7, #16]
     78c:	bl	cc <print_expression>
     790:	movw	r0, #0
     794:	movt	r0, #0
     798:	blx	r4
     79c:	b	2d8 <print_expression+0x20c>
     7a0:	cmp	r8, #0
     7a4:	movw	r3, #0
     7a8:	movt	r3, #0
     7ac:	movw	r0, #0
     7b0:	movt	r0, #0
     7b4:	moveq	r0, r3
     7b8:	blx	r1
     7bc:	mov	r0, #15
     7c0:	mov	r3, r8
     7c4:	mov	r2, r9
     7c8:	mov	r1, r4
     7cc:	str	r0, [sp]
     7d0:	ldr	r0, [r7, #16]
     7d4:	bl	cc <print_expression>
     7d8:	movw	r0, #0
     7dc:	movt	r0, #0
     7e0:	blx	r4
     7e4:	b	2d8 <print_expression+0x20c>
     7e8:	cmp	r8, #0
     7ec:	mov	r5, #15
     7f0:	movw	r3, #0
     7f4:	movt	r3, #0
     7f8:	movw	r0, #0
     7fc:	movt	r0, #0
     800:	moveq	r0, r3
     804:	blx	r1
     808:	mov	r3, r8
     80c:	mov	r2, r9
     810:	str	r5, [sp]
     814:	mov	r1, r4
     818:	ldr	r0, [r7, #16]
     81c:	bl	cc <print_expression>
     820:	movw	r0, #0
     824:	movt	r0, #0
     828:	blx	r4
     82c:	mov	r3, r8
     830:	mov	r2, r9
     834:	str	r5, [sp]
     838:	mov	r1, r4
     83c:	ldr	r0, [r7, #20]
     840:	bl	cc <print_expression>
     844:	ldr	r3, [r7, #24]
     848:	cmp	r3, #0
     84c:	beq	2cc <print_expression+0x200>
     850:	movw	r0, #0
     854:	movt	r0, #0
     858:	blx	r4
     85c:	mov	r3, r8
     860:	mov	r2, r9
     864:	str	r5, [sp]
     868:	mov	r1, r4
     86c:	ldr	r0, [r7, #24]
     870:	bl	cc <print_expression>
     874:	b	2cc <print_expression+0x200>
     878:	cmp	r8, #0
     87c:	movw	r3, #0
     880:	movt	r3, #0
     884:	movw	r0, #0
     888:	movt	r0, #0
     88c:	moveq	r0, r3
     890:	blx	r1
     894:	b	2d8 <print_expression+0x20c>
     898:	cmp	r8, #0
     89c:	movw	r3, #0
     8a0:	movt	r3, #0
     8a4:	movw	r0, #0
     8a8:	movt	r0, #0
     8ac:	moveq	r0, r3
     8b0:	blx	r1
     8b4:	b	2d8 <print_expression+0x20c>
     8b8:	cmp	r8, #0
     8bc:	movw	r3, #0
     8c0:	movt	r3, #0
     8c4:	movw	r0, #0
     8c8:	movt	r0, #0
     8cc:	moveq	r0, r3
     8d0:	blx	r1
     8d4:	b	2d8 <print_expression+0x20c>
     8d8:	cmp	r8, #0
     8dc:	movw	r3, #0
     8e0:	movt	r3, #0
     8e4:	movw	r0, #0
     8e8:	movt	r0, #0
     8ec:	moveq	r0, r3
     8f0:	blx	r1
     8f4:	b	2d8 <print_expression+0x20c>
     8f8:	ldr	r3, [sp, #96]	; 0x60
     8fc:	mov	r5, #2
     900:	cmp	r3, #1
     904:	beq	2474 <print_expression+0x23a8>
     908:	mov	r3, r8
     90c:	str	r5, [sp]
     910:	ldr	r0, [r7, #16]
     914:	bl	cc <print_expression>
     918:	movw	r0, #0
     91c:	movt	r0, #0
     920:	blx	r4
     924:	mov	r3, r8
     928:	mov	r2, r9
     92c:	str	r5, [sp]
     930:	mov	r1, r4
     934:	ldr	r0, [r7, #20]
     938:	bl	cc <print_expression>
     93c:	b	2d8 <print_expression+0x20c>
     940:	ldr	r3, [sp, #96]	; 0x60
     944:	mov	r5, #7
     948:	cmp	r3, #6
     94c:	bgt	2394 <print_expression+0x22c8>
     950:	movw	r0, #0
     954:	movt	r0, #0
     958:	blx	r1
     95c:	mov	r3, r8
     960:	mov	r2, r9
     964:	str	r5, [sp]
     968:	mov	r1, r4
     96c:	ldr	r0, [r7, #16]
     970:	bl	cc <print_expression>
     974:	movw	r0, #0
     978:	movt	r0, #0
     97c:	blx	r4
     980:	mov	r3, r8
     984:	mov	r2, r9
     988:	str	r5, [sp]
     98c:	mov	r1, r4
     990:	ldr	r0, [r7, #20]
     994:	bl	cc <print_expression>
     998:	movw	r0, #0
     99c:	movt	r0, #0
     9a0:	blx	r4
     9a4:	b	2d8 <print_expression+0x20c>
     9a8:	cmp	r8, #0
     9ac:	movw	r3, #0
     9b0:	movt	r3, #0
     9b4:	movw	r0, #0
     9b8:	movt	r0, #0
     9bc:	moveq	r0, r3
     9c0:	blx	r1
     9c4:	mov	r0, #15
     9c8:	mov	r3, r8
     9cc:	mov	r2, r9
     9d0:	mov	r1, r4
     9d4:	str	r0, [sp]
     9d8:	ldr	r0, [r7, #16]
     9dc:	bl	cc <print_expression>
     9e0:	movw	r0, #0
     9e4:	movt	r0, #0
     9e8:	blx	r4
     9ec:	b	2d8 <print_expression+0x20c>
     9f0:	ldr	r0, [r7, #16]
     9f4:	cmp	r0, #0
     9f8:	beq	a10 <print_expression+0x944>
     9fc:	mov	r1, #15
     a00:	mov	r3, r8
     a04:	str	r1, [sp]
     a08:	mov	r1, r4
     a0c:	bl	cc <print_expression>
     a10:	movw	r0, #0
     a14:	movt	r0, #0
     a18:	blx	r4
     a1c:	mov	r0, #15
     a20:	mov	r3, r8
     a24:	mov	r2, r9
     a28:	mov	r1, r4
     a2c:	str	r0, [sp]
     a30:	ldr	r0, [r7, #20]
     a34:	bl	cc <print_expression>
     a38:	movw	r0, #0
     a3c:	movt	r0, #0
     a40:	blx	r4
     a44:	b	2d8 <print_expression+0x20c>
     a48:	cmp	r8, #0
     a4c:	ldr	r1, [r7, #12]
     a50:	beq	20e4 <print_expression+0x2018>
     a54:	mov	r5, #15
     a58:	movw	r0, #0
     a5c:	movt	r0, #0
     a60:	blx	r4
     a64:	mov	r3, #1
     a68:	mov	r2, r9
     a6c:	str	r5, [sp]
     a70:	mov	r1, r4
     a74:	ldr	r0, [r7, #16]
     a78:	bl	cc <print_expression>
     a7c:	movw	r0, #0
     a80:	movt	r0, #0
     a84:	blx	r4
     a88:	mov	r3, #1
     a8c:	mov	r2, r9
     a90:	str	r5, [sp]
     a94:	mov	r1, r4
     a98:	ldr	r0, [r7, #20]
     a9c:	bl	cc <print_expression>
     aa0:	ldr	r3, [r7, #24]
     aa4:	cmp	r3, #0
     aa8:	beq	ad0 <print_expression+0xa04>
     aac:	movw	r0, #0
     ab0:	movt	r0, #0
     ab4:	blx	r4
     ab8:	mov	r3, #1
     abc:	mov	r2, r9
     ac0:	str	r5, [sp]
     ac4:	mov	r1, r4
     ac8:	ldr	r0, [r7, #24]
     acc:	bl	cc <print_expression>
     ad0:	movw	r0, #0
     ad4:	movt	r0, #0
     ad8:	blx	r4
     adc:	mov	r0, #15
     ae0:	mov	r3, r8
     ae4:	mov	r2, r9
     ae8:	mov	r1, r4
     aec:	str	r0, [sp]
     af0:	ldr	r0, [r7, #28]
     af4:	bl	cc <print_expression>
     af8:	b	2d8 <print_expression+0x20c>
     afc:	cmp	r8, #0
     b00:	movw	r3, #0
     b04:	movt	r3, #0
     b08:	movw	r0, #0
     b0c:	movt	r0, #0
     b10:	moveq	r0, r3
     b14:	blx	r1
     b18:	mov	r0, #15
     b1c:	mov	r3, r8
     b20:	mov	r2, r9
     b24:	mov	r1, r4
     b28:	str	r0, [sp]
     b2c:	ldr	r0, [r7, #16]
     b30:	bl	cc <print_expression>
     b34:	movw	r0, #0
     b38:	movt	r0, #0
     b3c:	blx	r4
     b40:	b	2d8 <print_expression+0x20c>
     b44:	cmp	r8, #0
     b48:	movw	r3, #0
     b4c:	movt	r3, #0
     b50:	movw	r0, #0
     b54:	movt	r0, #0
     b58:	moveq	r0, r3
     b5c:	blx	r1
     b60:	mov	r0, #15
     b64:	mov	r3, r8
     b68:	mov	r2, r9
     b6c:	mov	r1, r4
     b70:	str	r0, [sp]
     b74:	ldr	r0, [r7, #16]
     b78:	bl	cc <print_expression>
     b7c:	movw	r0, #0
     b80:	movt	r0, #0
     b84:	blx	r4
     b88:	b	2d8 <print_expression+0x20c>
     b8c:	cmp	r8, #0
     b90:	movw	r3, #0
     b94:	movt	r3, #0
     b98:	movw	r0, #0
     b9c:	movt	r0, #0
     ba0:	moveq	r0, r3
     ba4:	blx	r1
     ba8:	b	2d8 <print_expression+0x20c>
     bac:	cmp	r8, #0
     bb0:	movw	r3, #0
     bb4:	movt	r3, #0
     bb8:	movw	r0, #0
     bbc:	movt	r0, #0
     bc0:	moveq	r0, r3
     bc4:	blx	r1
     bc8:	b	2d8 <print_expression+0x20c>
     bcc:	cmp	r8, #0
     bd0:	movw	r3, #0
     bd4:	movt	r3, #0
     bd8:	movw	r0, #0
     bdc:	movt	r0, #0
     be0:	moveq	r0, r3
     be4:	blx	r1
     be8:	mov	r0, #15
     bec:	mov	r3, r8
     bf0:	mov	r2, r9
     bf4:	mov	r1, r4
     bf8:	str	r0, [sp]
     bfc:	ldr	r0, [r7, #16]
     c00:	bl	cc <print_expression>
     c04:	movw	r0, #0
     c08:	movt	r0, #0
     c0c:	blx	r4
     c10:	b	2d8 <print_expression+0x20c>
     c14:	ldr	r3, [sp, #96]	; 0x60
     c18:	mov	r5, #6
     c1c:	cmp	r3, #5
     c20:	bgt	204c <print_expression+0x1f80>
     c24:	movw	r0, #0
     c28:	movt	r0, #0
     c2c:	blx	r1
     c30:	mov	r3, r8
     c34:	mov	r2, r9
     c38:	str	r5, [sp]
     c3c:	mov	r1, r4
     c40:	ldr	r0, [r7, #16]
     c44:	bl	cc <print_expression>
     c48:	movw	r0, #0
     c4c:	movt	r0, #0
     c50:	blx	r4
     c54:	mov	r3, r8
     c58:	mov	r2, r9
     c5c:	str	r5, [sp]
     c60:	mov	r1, r4
     c64:	ldr	r0, [r7, #20]
     c68:	bl	cc <print_expression>
     c6c:	movw	r0, #0
     c70:	movt	r0, #0
     c74:	blx	r4
     c78:	b	2d8 <print_expression+0x20c>
     c7c:	ldr	r3, [sp, #96]	; 0x60
     c80:	mov	r5, #3
     c84:	cmp	r3, #2
     c88:	bgt	231c <print_expression+0x2250>
     c8c:	movw	r0, #0
     c90:	movt	r0, #0
     c94:	blx	r1
     c98:	mov	r3, r8
     c9c:	mov	r2, r9
     ca0:	str	r5, [sp]
     ca4:	mov	r1, r4
     ca8:	ldr	r0, [r7, #16]
     cac:	bl	cc <print_expression>
     cb0:	movw	r0, #0
     cb4:	movt	r0, #0
     cb8:	blx	r4
     cbc:	mov	r3, r8
     cc0:	mov	r2, r9
     cc4:	str	r5, [sp]
     cc8:	mov	r1, r4
     ccc:	ldr	r0, [r7, #20]
     cd0:	bl	cc <print_expression>
     cd4:	movw	r0, #0
     cd8:	movt	r0, #0
     cdc:	blx	r4
     ce0:	b	2d8 <print_expression+0x20c>
     ce4:	add	r0, sp, #32
     ce8:	vldr	d0, [r7, #16]
     cec:	bl	0 <coda_strfl>
     cf0:	add	r1, sp, #32
     cf4:	movw	r0, #0
     cf8:	movt	r0, #0
     cfc:	blx	r4
     d00:	b	2d8 <print_expression+0x20c>
     d04:	cmp	r2, #0
     d08:	movw	r3, #0
     d0c:	movt	r3, #0
     d10:	movw	r6, #0
     d14:	movt	r6, #0
     d18:	moveq	r6, r3
     d1c:	mov	r0, r6
     d20:	str	r6, [sp, #12]
     d24:	blx	r1
     d28:	ldr	r0, [r7, #12]
     d2c:	ldr	r6, [r7, #16]
     d30:	cmp	r6, #0
     d34:	cmpne	r0, #0
     d38:	beq	1f58 <print_expression+0x1e8c>
     d3c:	cmp	r0, #0
     d40:	blt	24cc <print_expression+0x2400>
     d44:	orr	ip, r8, r9
     d48:	sub	r6, r6, #1
     d4c:	cmp	ip, #0
     d50:	movw	fp, #0
     d54:	movt	fp, #0
     d58:	movw	r1, #0
     d5c:	movt	r1, #0
     d60:	movw	sl, #0
     d64:	movt	sl, #0
     d68:	movw	r2, #0
     d6c:	movt	r2, #0
     d70:	movne	r3, sl
     d74:	moveq	r3, r2
     d78:	movw	r8, #0
     d7c:	movt	r8, #0
     d80:	movw	r7, #0
     d84:	movt	r7, #0
     d88:	movne	r8, fp
     d8c:	str	r3, [sp, #20]
     d90:	moveq	r7, r1
     d94:	add	r5, r6, r0
     d98:	cmp	ip, #0
     d9c:	movw	r0, #0
     da0:	movt	r0, #0
     da4:	movw	lr, #0
     da8:	movt	lr, #0
     dac:	movw	r2, #0
     db0:	movt	r2, #0
     db4:	moveq	lr, r0
     db8:	cmp	r9, #0
     dbc:	movw	r1, #0
     dc0:	movt	r1, #0
     dc4:	movw	fp, #0
     dc8:	movt	fp, #0
     dcc:	moveq	r1, r2
     dd0:	movw	sl, #0
     dd4:	movt	sl, #0
     dd8:	movw	r9, #0
     ddc:	movt	r9, #0
     de0:	str	r1, [sp, #16]
     de4:	str	lr, [sp, #24]
     de8:	ldrb	r1, [r6, #1]!
     dec:	sub	r3, r1, #7
     df0:	cmp	r3, #85	; 0x55
     df4:	ldrls	pc, [pc, r3, lsl #2]
     df8:	b	2020 <print_expression+0x1f54>
     dfc:	.word	0x00002010
     e00:	.word	0x00002000
     e04:	.word	0x00001ff0
     e08:	.word	0x00001fe0
     e0c:	.word	0x00001fd0
     e10:	.word	0x00001fc0
     e14:	.word	0x00001fb0
     e18:	.word	0x00002020
     e1c:	.word	0x00002020
     e20:	.word	0x00002020
     e24:	.word	0x00002020
     e28:	.word	0x00002020
     e2c:	.word	0x00002020
     e30:	.word	0x00002020
     e34:	.word	0x00002020
     e38:	.word	0x00002020
     e3c:	.word	0x00002020
     e40:	.word	0x00002020
     e44:	.word	0x00002020
     e48:	.word	0x00002020
     e4c:	.word	0x00001f94
     e50:	.word	0x00002020
     e54:	.word	0x00002020
     e58:	.word	0x00002020
     e5c:	.word	0x00002020
     e60:	.word	0x00001f88
     e64:	.word	0x00002020
     e68:	.word	0x00001f7c
     e6c:	.word	0x00002020
     e70:	.word	0x00002020
     e74:	.word	0x00002020
     e78:	.word	0x00001f70
     e7c:	.word	0x00002020
     e80:	.word	0x00002020
     e84:	.word	0x00002020
     e88:	.word	0x00002020
     e8c:	.word	0x00002020
     e90:	.word	0x00002020
     e94:	.word	0x00002020
     e98:	.word	0x00002020
     e9c:	.word	0x00002020
     ea0:	.word	0x00002020
     ea4:	.word	0x00002020
     ea8:	.word	0x00002020
     eac:	.word	0x00002020
     eb0:	.word	0x00002020
     eb4:	.word	0x00002020
     eb8:	.word	0x00002020
     ebc:	.word	0x00002020
     ec0:	.word	0x00002020
     ec4:	.word	0x00002020
     ec8:	.word	0x00002020
     ecc:	.word	0x00002020
     ed0:	.word	0x00001f64
     ed4:	.word	0x00002020
     ed8:	.word	0x00001f48
     edc:	.word	0x00002020
     ee0:	.word	0x00002020
     ee4:	.word	0x00002020
     ee8:	.word	0x00002020
     eec:	.word	0x00002020
     ef0:	.word	0x00002020
     ef4:	.word	0x00002020
     ef8:	.word	0x00002020
     efc:	.word	0x00002020
     f00:	.word	0x00002020
     f04:	.word	0x00002020
     f08:	.word	0x00002020
     f0c:	.word	0x00002020
     f10:	.word	0x00002020
     f14:	.word	0x00002020
     f18:	.word	0x00002020
     f1c:	.word	0x00002020
     f20:	.word	0x00002020
     f24:	.word	0x00002020
     f28:	.word	0x00002020
     f2c:	.word	0x00002020
     f30:	.word	0x00002020
     f34:	.word	0x00002020
     f38:	.word	0x00002020
     f3c:	.word	0x00002020
     f40:	.word	0x00002020
     f44:	.word	0x00002020
     f48:	.word	0x00002020
     f4c:	.word	0x00002020
     f50:	.word	0x00001fa4
     f54:	add	r2, sp, #32
     f58:	ldrd	r0, [r7, #16]
     f5c:	bl	0 <coda_str64>
     f60:	add	r1, sp, #32
     f64:	movw	r0, #0
     f68:	movt	r0, #0
     f6c:	blx	r4
     f70:	b	2d8 <print_expression+0x20c>
     f74:	cmp	r8, #0
     f78:	mov	r5, #15
     f7c:	movw	r3, #0
     f80:	movt	r3, #0
     f84:	movw	r0, #0
     f88:	movt	r0, #0
     f8c:	moveq	r0, r3
     f90:	blx	r1
     f94:	mov	r3, r8
     f98:	mov	r2, r9
     f9c:	str	r5, [sp]
     fa0:	mov	r1, r4
     fa4:	ldr	r0, [r7, #16]
     fa8:	bl	cc <print_expression>
     fac:	movw	r0, #0
     fb0:	movt	r0, #0
     fb4:	blx	r4
     fb8:	mov	r3, r8
     fbc:	mov	r2, r9
     fc0:	str	r5, [sp]
     fc4:	mov	r1, r4
     fc8:	ldr	r0, [r7, #20]
     fcc:	bl	cc <print_expression>
     fd0:	movw	r0, #0
     fd4:	movt	r0, #0
     fd8:	blx	r4
     fdc:	b	2d8 <print_expression+0x20c>
     fe0:	cmp	r8, #0
     fe4:	movw	r3, #0
     fe8:	movt	r3, #0
     fec:	movw	r0, #0
     ff0:	movt	r0, #0
     ff4:	moveq	r0, r3
     ff8:	blx	r1
     ffc:	mov	r0, #15
    1000:	mov	r3, r8
    1004:	mov	r2, r9
    1008:	mov	r1, r4
    100c:	str	r0, [sp]
    1010:	ldr	r0, [r7, #16]
    1014:	bl	cc <print_expression>
    1018:	movw	r0, #0
    101c:	movt	r0, #0
    1020:	blx	r4
    1024:	b	2d8 <print_expression+0x20c>
    1028:	cmp	r8, #0
    102c:	movw	r3, #0
    1030:	movt	r3, #0
    1034:	mov	r5, #15
    1038:	movw	r0, #0
    103c:	movt	r0, #0
    1040:	moveq	r0, r3
    1044:	blx	r1
    1048:	mov	r3, r8
    104c:	mov	r2, r9
    1050:	str	r5, [sp]
    1054:	mov	r1, r4
    1058:	ldr	r0, [r7, #16]
    105c:	bl	cc <print_expression>
    1060:	ldr	r3, [r7, #20]
    1064:	cmp	r3, #0
    1068:	beq	1090 <print_expression+0xfc4>
    106c:	movw	r0, #0
    1070:	movt	r0, #0
    1074:	blx	r4
    1078:	mov	r3, r8
    107c:	mov	r2, r9
    1080:	str	r5, [sp]
    1084:	mov	r1, r4
    1088:	ldr	r0, [r7, #20]
    108c:	bl	cc <print_expression>
    1090:	ldr	r3, [r7, #24]
    1094:	cmp	r3, #0
    1098:	beq	2cc <print_expression+0x200>
    109c:	movw	r0, #0
    10a0:	movt	r0, #0
    10a4:	blx	r4
    10a8:	mov	r0, #15
    10ac:	mov	r3, r8
    10b0:	mov	r2, r9
    10b4:	mov	r1, r4
    10b8:	str	r0, [sp]
    10bc:	ldr	r0, [r7, #24]
    10c0:	bl	cc <print_expression>
    10c4:	b	2cc <print_expression+0x200>
    10c8:	ldr	r3, [r7, #12]
    10cc:	cmp	r3, #0
    10d0:	beq	20c4 <print_expression+0x1ff8>
    10d4:	cmp	r8, #0
    10d8:	movw	r3, #0
    10dc:	movt	r3, #0
    10e0:	movw	r0, #0
    10e4:	movt	r0, #0
    10e8:	moveq	r0, r3
    10ec:	blx	r1
    10f0:	b	2d8 <print_expression+0x20c>
    10f4:	cmp	r8, #0
    10f8:	movw	r3, #0
    10fc:	movt	r3, #0
    1100:	movw	r0, #0
    1104:	movt	r0, #0
    1108:	moveq	r0, r3
    110c:	blx	r1
    1110:	mov	r0, #15
    1114:	mov	r3, r8
    1118:	mov	r2, r9
    111c:	mov	r1, r4
    1120:	str	r0, [sp]
    1124:	ldr	r0, [r7, #16]
    1128:	bl	cc <print_expression>
    112c:	movw	r0, #0
    1130:	movt	r0, #0
    1134:	blx	r4
    1138:	b	2d8 <print_expression+0x20c>
    113c:	cmp	r8, #0
    1140:	movw	r3, #0
    1144:	movt	r3, #0
    1148:	movw	r0, #0
    114c:	movt	r0, #0
    1150:	moveq	r0, r3
    1154:	blx	r1
    1158:	mov	r0, #15
    115c:	mov	r3, r8
    1160:	mov	r2, r9
    1164:	mov	r1, r4
    1168:	str	r0, [sp]
    116c:	ldr	r0, [r7, #16]
    1170:	bl	cc <print_expression>
    1174:	movw	r0, #0
    1178:	movt	r0, #0
    117c:	blx	r4
    1180:	b	2d8 <print_expression+0x20c>
    1184:	cmp	r8, #0
    1188:	movw	r3, #0
    118c:	movt	r3, #0
    1190:	movw	r0, #0
    1194:	movt	r0, #0
    1198:	moveq	r0, r3
    119c:	blx	r1
    11a0:	mov	r0, #15
    11a4:	mov	r3, r8
    11a8:	mov	r2, r9
    11ac:	mov	r1, r4
    11b0:	str	r0, [sp]
    11b4:	ldr	r0, [r7, #16]
    11b8:	bl	cc <print_expression>
    11bc:	movw	r0, #0
    11c0:	movt	r0, #0
    11c4:	blx	r4
    11c8:	b	2d8 <print_expression+0x20c>
    11cc:	cmp	r8, #0
    11d0:	movw	r3, #0
    11d4:	movt	r3, #0
    11d8:	movw	r0, #0
    11dc:	movt	r0, #0
    11e0:	moveq	r0, r3
    11e4:	blx	r1
    11e8:	mov	r0, #15
    11ec:	mov	r3, r8
    11f0:	mov	r2, r9
    11f4:	mov	r1, r4
    11f8:	str	r0, [sp]
    11fc:	ldr	r0, [r7, #16]
    1200:	bl	cc <print_expression>
    1204:	movw	r0, #0
    1208:	movt	r0, #0
    120c:	blx	r4
    1210:	b	2d8 <print_expression+0x20c>
    1214:	cmp	r8, #0
    1218:	movw	r3, #0
    121c:	movt	r3, #0
    1220:	movw	r0, #0
    1224:	movt	r0, #0
    1228:	moveq	r0, r3
    122c:	blx	r1
    1230:	mov	r0, #15
    1234:	mov	r3, r8
    1238:	mov	r2, r9
    123c:	mov	r1, r4
    1240:	str	r0, [sp]
    1244:	ldr	r0, [r7, #16]
    1248:	bl	cc <print_expression>
    124c:	movw	r0, #0
    1250:	movt	r0, #0
    1254:	blx	r4
    1258:	b	2d8 <print_expression+0x20c>
    125c:	cmp	r8, #0
    1260:	movw	r3, #0
    1264:	movt	r3, #0
    1268:	movw	r0, #0
    126c:	movt	r0, #0
    1270:	moveq	r0, r3
    1274:	ldr	r1, [r7, #12]
    1278:	blx	r4
    127c:	b	2d8 <print_expression+0x20c>
    1280:	cmp	r8, #0
    1284:	movw	r3, #0
    1288:	movt	r3, #0
    128c:	movw	r0, #0
    1290:	movt	r0, #0
    1294:	moveq	r0, r3
    1298:	blx	r1
    129c:	mov	r0, #15
    12a0:	mov	r3, r8
    12a4:	mov	r2, r9
    12a8:	mov	r1, r4
    12ac:	str	r0, [sp]
    12b0:	ldr	r0, [r7, #16]
    12b4:	bl	cc <print_expression>
    12b8:	movw	r0, #0
    12bc:	movt	r0, #0
    12c0:	blx	r4
    12c4:	b	2d8 <print_expression+0x20c>
    12c8:	mov	r5, #15
    12cc:	movw	r0, #0
    12d0:	movt	r0, #0
    12d4:	blx	r1
    12d8:	mov	r3, r8
    12dc:	mov	r2, r9
    12e0:	str	r5, [sp]
    12e4:	mov	r1, r4
    12e8:	ldr	r0, [r7, #16]
    12ec:	bl	cc <print_expression>
    12f0:	movw	r0, #0
    12f4:	movt	r0, #0
    12f8:	blx	r4
    12fc:	mov	r3, r8
    1300:	mov	r2, r9
    1304:	str	r5, [sp]
    1308:	mov	r1, r4
    130c:	ldr	r0, [r7, #20]
    1310:	bl	cc <print_expression>
    1314:	movw	r0, #0
    1318:	movt	r0, #0
    131c:	blx	r4
    1320:	mov	r3, r8
    1324:	mov	r2, r9
    1328:	str	r5, [sp]
    132c:	mov	r1, r4
    1330:	ldr	r0, [r7, #24]
    1334:	bl	cc <print_expression>
    1338:	movw	r0, #0
    133c:	movt	r0, #0
    1340:	blx	r4
    1344:	b	2d8 <print_expression+0x20c>
    1348:	ldr	r3, [sp, #96]	; 0x60
    134c:	mov	r6, #5
    1350:	orr	r5, r8, r2
    1354:	cmp	r3, #4
    1358:	bgt	21e4 <print_expression+0x2118>
    135c:	movw	r0, #0
    1360:	movt	r0, #0
    1364:	blx	r1
    1368:	mov	r3, r8
    136c:	mov	r2, r9
    1370:	str	r6, [sp]
    1374:	mov	r1, r4
    1378:	ldr	r0, [r7, #16]
    137c:	bl	cc <print_expression>
    1380:	cmp	r5, #0
    1384:	beq	2564 <print_expression+0x2498>
    1388:	movw	r0, #0
    138c:	movt	r0, #0
    1390:	blx	r4
    1394:	mov	r3, r8
    1398:	mov	r2, r9
    139c:	str	r6, [sp]
    13a0:	mov	r1, r4
    13a4:	ldr	r0, [r7, #20]
    13a8:	bl	cc <print_expression>
    13ac:	b	2cc <print_expression+0x200>
    13b0:	ldr	r3, [sp, #96]	; 0x60
    13b4:	mov	r6, #5
    13b8:	orr	r5, r8, r2
    13bc:	cmp	r3, #4
    13c0:	bgt	21a4 <print_expression+0x20d8>
    13c4:	movw	r0, #0
    13c8:	movt	r0, #0
    13cc:	blx	r1
    13d0:	mov	r3, r8
    13d4:	mov	r2, r9
    13d8:	str	r6, [sp]
    13dc:	mov	r1, r4
    13e0:	ldr	r0, [r7, #16]
    13e4:	bl	cc <print_expression>
    13e8:	cmp	r5, #0
    13ec:	beq	2508 <print_expression+0x243c>
    13f0:	movw	r0, #0
    13f4:	movt	r0, #0
    13f8:	b	1390 <print_expression+0x12c4>
    13fc:	cmp	r8, #0
    1400:	movw	r3, #0
    1404:	movt	r3, #0
    1408:	movw	r0, #0
    140c:	movt	r0, #0
    1410:	moveq	r0, r3
    1414:	blx	r1
    1418:	mov	r0, #15
    141c:	mov	r3, r8
    1420:	mov	r2, r9
    1424:	mov	r1, r4
    1428:	str	r0, [sp]
    142c:	ldr	r0, [r7, #16]
    1430:	bl	cc <print_expression>
    1434:	movw	r0, #0
    1438:	movt	r0, #0
    143c:	blx	r4
    1440:	b	2d8 <print_expression+0x20c>
    1444:	cmp	r8, #0
    1448:	mov	r5, #15
    144c:	movw	r3, #0
    1450:	movt	r3, #0
    1454:	movw	r0, #0
    1458:	movt	r0, #0
    145c:	moveq	r0, r3
    1460:	blx	r1
    1464:	mov	r3, r8
    1468:	mov	r2, r9
    146c:	str	r5, [sp]
    1470:	mov	r1, r4
    1474:	ldr	r0, [r7, #16]
    1478:	bl	cc <print_expression>
    147c:	movw	r0, #0
    1480:	movt	r0, #0
    1484:	blx	r4
    1488:	mov	r3, r8
    148c:	mov	r2, r9
    1490:	str	r5, [sp]
    1494:	mov	r1, r4
    1498:	ldr	r0, [r7, #20]
    149c:	bl	cc <print_expression>
    14a0:	movw	r0, #0
    14a4:	movt	r0, #0
    14a8:	blx	r4
    14ac:	b	2d8 <print_expression+0x20c>
    14b0:	cmp	r8, #0
    14b4:	mov	r5, #15
    14b8:	movw	r3, #0
    14bc:	movt	r3, #0
    14c0:	movw	r0, #0
    14c4:	movt	r0, #0
    14c8:	moveq	r0, r3
    14cc:	blx	r1
    14d0:	mov	r3, r8
    14d4:	mov	r2, r9
    14d8:	str	r5, [sp]
    14dc:	mov	r1, r4
    14e0:	ldr	r0, [r7, #16]
    14e4:	bl	cc <print_expression>
    14e8:	movw	r0, #0
    14ec:	movt	r0, #0
    14f0:	blx	r4
    14f4:	mov	r3, r8
    14f8:	mov	r2, r9
    14fc:	str	r5, [sp]
    1500:	mov	r1, r4
    1504:	ldr	r0, [r7, #20]
    1508:	bl	cc <print_expression>
    150c:	movw	r0, #0
    1510:	movt	r0, #0
    1514:	blx	r4
    1518:	b	2d8 <print_expression+0x20c>
    151c:	cmp	r8, #0
    1520:	mov	r5, #15
    1524:	movw	r3, #0
    1528:	movt	r3, #0
    152c:	movw	r0, #0
    1530:	movt	r0, #0
    1534:	moveq	r0, r3
    1538:	blx	r1
    153c:	mov	r3, r8
    1540:	mov	r2, r9
    1544:	str	r5, [sp]
    1548:	mov	r1, r4
    154c:	ldr	r0, [r7, #16]
    1550:	bl	cc <print_expression>
    1554:	movw	r0, #0
    1558:	movt	r0, #0
    155c:	blx	r4
    1560:	mov	r3, r8
    1564:	mov	r2, r9
    1568:	str	r5, [sp]
    156c:	mov	r1, r4
    1570:	ldr	r0, [r7, #20]
    1574:	bl	cc <print_expression>
    1578:	movw	r0, #0
    157c:	movt	r0, #0
    1580:	blx	r4
    1584:	b	2d8 <print_expression+0x20c>
    1588:	cmp	r8, #0
    158c:	mov	r5, #15
    1590:	movw	r3, #0
    1594:	movt	r3, #0
    1598:	movw	r0, #0
    159c:	movt	r0, #0
    15a0:	moveq	r0, r3
    15a4:	blx	r1
    15a8:	mov	r3, r8
    15ac:	mov	r2, r9
    15b0:	str	r5, [sp]
    15b4:	mov	r1, r4
    15b8:	ldr	r0, [r7, #16]
    15bc:	bl	cc <print_expression>
    15c0:	movw	r0, #0
    15c4:	movt	r0, #0
    15c8:	blx	r4
    15cc:	mov	r3, r8
    15d0:	mov	r2, r9
    15d4:	str	r5, [sp]
    15d8:	mov	r1, r4
    15dc:	ldr	r0, [r7, #20]
    15e0:	bl	cc <print_expression>
    15e4:	movw	r0, #0
    15e8:	movt	r0, #0
    15ec:	blx	r4
    15f0:	b	2d8 <print_expression+0x20c>
    15f4:	cmp	r8, #0
    15f8:	mov	r5, #15
    15fc:	movw	r3, #0
    1600:	movt	r3, #0
    1604:	movw	r0, #0
    1608:	movt	r0, #0
    160c:	moveq	r0, r3
    1610:	blx	r1
    1614:	mov	r3, r8
    1618:	mov	r2, r9
    161c:	str	r5, [sp]
    1620:	mov	r1, r4
    1624:	ldr	r0, [r7, #16]
    1628:	bl	cc <print_expression>
    162c:	movw	r0, #0
    1630:	movt	r0, #0
    1634:	blx	r4
    1638:	mov	r3, r8
    163c:	mov	r2, r9
    1640:	str	r5, [sp]
    1644:	mov	r1, r4
    1648:	ldr	r0, [r7, #20]
    164c:	bl	cc <print_expression>
    1650:	movw	r0, #0
    1654:	movt	r0, #0
    1658:	blx	r4
    165c:	b	2d8 <print_expression+0x20c>
    1660:	ldr	r3, [sp, #96]	; 0x60
    1664:	mov	r6, #7
    1668:	orr	r5, r8, r2
    166c:	cmp	r3, #6
    1670:	bgt	2264 <print_expression+0x2198>
    1674:	movw	r0, #0
    1678:	movt	r0, #0
    167c:	blx	r1
    1680:	mov	r3, r8
    1684:	mov	r2, r9
    1688:	str	r6, [sp]
    168c:	mov	r1, r4
    1690:	ldr	r0, [r7, #16]
    1694:	bl	cc <print_expression>
    1698:	cmp	r5, #0
    169c:	beq	2598 <print_expression+0x24cc>
    16a0:	movw	r0, #0
    16a4:	movt	r0, #0
    16a8:	b	1390 <print_expression+0x12c4>
    16ac:	ldr	r3, [sp, #96]	; 0x60
    16b0:	mov	r5, #4
    16b4:	cmp	r3, #3
    16b8:	bgt	23cc <print_expression+0x2300>
    16bc:	movw	r0, #0
    16c0:	movt	r0, #0
    16c4:	blx	r1
    16c8:	mov	r3, r8
    16cc:	mov	r2, r9
    16d0:	str	r5, [sp]
    16d4:	mov	r1, r4
    16d8:	ldr	r0, [r7, #16]
    16dc:	bl	cc <print_expression>
    16e0:	movw	r0, #0
    16e4:	movt	r0, #0
    16e8:	blx	r4
    16ec:	mov	r3, r8
    16f0:	mov	r2, r9
    16f4:	str	r5, [sp]
    16f8:	mov	r1, r4
    16fc:	ldr	r0, [r7, #20]
    1700:	bl	cc <print_expression>
    1704:	movw	r0, #0
    1708:	movt	r0, #0
    170c:	blx	r4
    1710:	b	2d8 <print_expression+0x20c>
    1714:	cmp	r8, #0
    1718:	movw	r3, #0
    171c:	movt	r3, #0
    1720:	movw	r0, #0
    1724:	movt	r0, #0
    1728:	moveq	r0, r3
    172c:	blx	r1
    1730:	mov	r0, #15
    1734:	mov	r3, r8
    1738:	mov	r2, r9
    173c:	mov	r1, r4
    1740:	str	r0, [sp]
    1744:	ldr	r0, [r7, #16]
    1748:	bl	cc <print_expression>
    174c:	movw	r0, #0
    1750:	movt	r0, #0
    1754:	blx	r4
    1758:	b	2d8 <print_expression+0x20c>
    175c:	cmp	r8, #0
    1760:	mov	r5, #15
    1764:	movw	r3, #0
    1768:	movt	r3, #0
    176c:	movw	r0, #0
    1770:	movt	r0, #0
    1774:	moveq	r0, r3
    1778:	blx	r1
    177c:	mov	r3, r8
    1780:	mov	r2, r9
    1784:	str	r5, [sp]
    1788:	mov	r1, r4
    178c:	ldr	r0, [r7, #16]
    1790:	bl	cc <print_expression>
    1794:	movw	r0, #0
    1798:	movt	r0, #0
    179c:	blx	r4
    17a0:	mov	r3, r8
    17a4:	mov	r2, r9
    17a8:	str	r5, [sp]
    17ac:	mov	r1, r4
    17b0:	ldr	r0, [r7, #20]
    17b4:	bl	cc <print_expression>
    17b8:	movw	r0, #0
    17bc:	movt	r0, #0
    17c0:	blx	r4
    17c4:	b	2d8 <print_expression+0x20c>
    17c8:	cmp	r8, #0
    17cc:	movw	r3, #0
    17d0:	movt	r3, #0
    17d4:	movw	r0, #0
    17d8:	movt	r0, #0
    17dc:	moveq	r0, r3
    17e0:	blx	r1
    17e4:	b	2d8 <print_expression+0x20c>
    17e8:	cmp	r8, #0
    17ec:	mov	r5, #15
    17f0:	movw	r3, #0
    17f4:	movt	r3, #0
    17f8:	movw	r0, #0
    17fc:	movt	r0, #0
    1800:	moveq	r0, r3
    1804:	blx	r1
    1808:	mov	r3, r8
    180c:	mov	r2, r9
    1810:	str	r5, [sp]
    1814:	mov	r1, r4
    1818:	ldr	r0, [r7, #16]
    181c:	bl	cc <print_expression>
    1820:	movw	r0, #0
    1824:	movt	r0, #0
    1828:	blx	r4
    182c:	mov	r3, r8
    1830:	mov	r2, r9
    1834:	str	r5, [sp]
    1838:	mov	r1, r4
    183c:	ldr	r0, [r7, #20]
    1840:	bl	cc <print_expression>
    1844:	movw	r0, #0
    1848:	movt	r0, #0
    184c:	blx	r4
    1850:	b	2d8 <print_expression+0x20c>
    1854:	cmp	r8, #0
    1858:	mov	r5, #15
    185c:	movw	r3, #0
    1860:	movt	r3, #0
    1864:	movw	r0, #0
    1868:	movt	r0, #0
    186c:	moveq	r0, r3
    1870:	blx	r1
    1874:	mov	r3, r8
    1878:	mov	r2, r9
    187c:	str	r5, [sp]
    1880:	mov	r1, r4
    1884:	ldr	r0, [r7, #16]
    1888:	bl	cc <print_expression>
    188c:	movw	r0, #0
    1890:	movt	r0, #0
    1894:	blx	r4
    1898:	mov	r3, r8
    189c:	mov	r2, r9
    18a0:	str	r5, [sp]
    18a4:	mov	r1, r4
    18a8:	ldr	r0, [r7, #20]
    18ac:	bl	cc <print_expression>
    18b0:	movw	r0, #0
    18b4:	movt	r0, #0
    18b8:	blx	r4
    18bc:	b	2d8 <print_expression+0x20c>
    18c0:	cmp	r8, #0
    18c4:	movw	r3, #0
    18c8:	movt	r3, #0
    18cc:	movw	r0, #0
    18d0:	movt	r0, #0
    18d4:	moveq	r0, r3
    18d8:	blx	r1
    18dc:	mov	r0, #15
    18e0:	mov	r3, r8
    18e4:	mov	r2, r9
    18e8:	mov	r1, r4
    18ec:	str	r0, [sp]
    18f0:	ldr	r0, [r7, #16]
    18f4:	bl	cc <print_expression>
    18f8:	movw	r0, #0
    18fc:	movt	r0, #0
    1900:	blx	r4
    1904:	b	2d8 <print_expression+0x20c>
    1908:	cmp	r8, #0
    190c:	movw	r3, #0
    1910:	movt	r3, #0
    1914:	movw	r0, #0
    1918:	movt	r0, #0
    191c:	moveq	r0, r3
    1920:	blx	r1
    1924:	mov	r0, #15
    1928:	mov	r3, r8
    192c:	mov	r2, r9
    1930:	mov	r1, r4
    1934:	str	r0, [sp]
    1938:	ldr	r0, [r7, #16]
    193c:	bl	cc <print_expression>
    1940:	movw	r0, #0
    1944:	movt	r0, #0
    1948:	blx	r4
    194c:	b	2d8 <print_expression+0x20c>
    1950:	cmp	r8, #0
    1954:	movw	r3, #0
    1958:	movt	r3, #0
    195c:	movw	r0, #0
    1960:	movt	r0, #0
    1964:	moveq	r0, r3
    1968:	blx	r1
    196c:	mov	r0, #15
    1970:	mov	r3, r8
    1974:	mov	r2, r9
    1978:	mov	r1, r4
    197c:	str	r0, [sp]
    1980:	ldr	r0, [r7, #16]
    1984:	bl	cc <print_expression>
    1988:	movw	r0, #0
    198c:	movt	r0, #0
    1990:	blx	r4
    1994:	b	2d8 <print_expression+0x20c>
    1998:	cmp	r8, #0
    199c:	mov	r5, #15
    19a0:	movw	r3, #0
    19a4:	movt	r3, #0
    19a8:	movw	r0, #0
    19ac:	movt	r0, #0
    19b0:	moveq	r0, r3
    19b4:	blx	r1
    19b8:	mov	r3, r8
    19bc:	mov	r2, r9
    19c0:	str	r5, [sp]
    19c4:	mov	r1, r4
    19c8:	ldr	r0, [r7, #16]
    19cc:	bl	cc <print_expression>
    19d0:	movw	r0, #0
    19d4:	movt	r0, #0
    19d8:	blx	r4
    19dc:	mov	r3, r8
    19e0:	mov	r2, r9
    19e4:	str	r5, [sp]
    19e8:	mov	r1, r4
    19ec:	ldr	r0, [r7, #20]
    19f0:	bl	cc <print_expression>
    19f4:	movw	r0, #0
    19f8:	movt	r0, #0
    19fc:	blx	r4
    1a00:	b	2d8 <print_expression+0x20c>
    1a04:	cmp	r8, #0
    1a08:	movw	r3, #0
    1a0c:	movt	r3, #0
    1a10:	movw	r0, #0
    1a14:	movt	r0, #0
    1a18:	moveq	r0, r3
    1a1c:	blx	r1
    1a20:	mov	r0, #15
    1a24:	mov	r3, r8
    1a28:	mov	r2, r9
    1a2c:	mov	r1, r4
    1a30:	str	r0, [sp]
    1a34:	ldr	r0, [r7, #16]
    1a38:	bl	cc <print_expression>
    1a3c:	movw	r0, #0
    1a40:	movt	r0, #0
    1a44:	blx	r4
    1a48:	b	2d8 <print_expression+0x20c>
    1a4c:	ldr	r3, [sp, #96]	; 0x60
    1a50:	mov	r5, #10
    1a54:	cmp	r3, #9
    1a58:	bgt	2224 <print_expression+0x2158>
    1a5c:	movw	r0, #0
    1a60:	movt	r0, #0
    1a64:	blx	r1
    1a68:	mov	r3, r8
    1a6c:	mov	r2, r9
    1a70:	str	r5, [sp]
    1a74:	mov	r1, r4
    1a78:	ldr	r0, [r7, #16]
    1a7c:	bl	cc <print_expression>
    1a80:	cmp	r8, #0
    1a84:	beq	2634 <print_expression+0x2568>
    1a88:	movw	r0, #0
    1a8c:	movt	r0, #0
    1a90:	blx	r4
    1a94:	mov	r2, r9
    1a98:	mov	r3, #1
    1a9c:	str	r5, [sp]
    1aa0:	mov	r1, r4
    1aa4:	ldr	r0, [r7, #20]
    1aa8:	bl	cc <print_expression>
    1aac:	b	2cc <print_expression+0x200>
    1ab0:	ldr	r3, [sp, #96]	; 0x60
    1ab4:	mov	r5, #9
    1ab8:	cmp	r3, #8
    1abc:	bgt	2084 <print_expression+0x1fb8>
    1ac0:	movw	r0, #0
    1ac4:	movt	r0, #0
    1ac8:	blx	r1
    1acc:	mov	r3, r8
    1ad0:	mov	r2, r9
    1ad4:	str	r5, [sp]
    1ad8:	mov	r1, r4
    1adc:	ldr	r0, [r7, #16]
    1ae0:	bl	cc <print_expression>
    1ae4:	cmp	r8, #0
    1ae8:	beq	2558 <print_expression+0x248c>
    1aec:	movw	r0, #0
    1af0:	movt	r0, #0
    1af4:	b	1a90 <print_expression+0x19c4>
    1af8:	ldr	r3, [sp, #96]	; 0x60
    1afc:	mov	r6, #5
    1b00:	orr	r5, r8, r2
    1b04:	cmp	r3, #4
    1b08:	bgt	2354 <print_expression+0x2288>
    1b0c:	movw	r0, #0
    1b10:	movt	r0, #0
    1b14:	blx	r1
    1b18:	mov	r3, r8
    1b1c:	mov	r2, r9
    1b20:	str	r6, [sp]
    1b24:	mov	r1, r4
    1b28:	ldr	r0, [r7, #16]
    1b2c:	bl	cc <print_expression>
    1b30:	cmp	r5, #0
    1b34:	beq	2628 <print_expression+0x255c>
    1b38:	movw	r0, #0
    1b3c:	movt	r0, #0
    1b40:	b	1390 <print_expression+0x12c4>
    1b44:	ldr	r3, [sp, #96]	; 0x60
    1b48:	mov	r6, #5
    1b4c:	orr	r5, r8, r2
    1b50:	cmp	r3, #4
    1b54:	bgt	22dc <print_expression+0x2210>
    1b58:	movw	r0, #0
    1b5c:	movt	r0, #0
    1b60:	blx	r1
    1b64:	mov	r3, r8
    1b68:	mov	r2, r9
    1b6c:	str	r6, [sp]
    1b70:	mov	r1, r4
    1b74:	ldr	r0, [r7, #16]
    1b78:	bl	cc <print_expression>
    1b7c:	cmp	r5, #0
    1b80:	beq	261c <print_expression+0x2550>
    1b84:	movw	r0, #0
    1b88:	movt	r0, #0
    1b8c:	b	1390 <print_expression+0x12c4>
    1b90:	movw	r0, #0
    1b94:	movt	r0, #0
    1b98:	blx	r1
    1b9c:	b	2d8 <print_expression+0x20c>
    1ba0:	mov	r0, #15
    1ba4:	mov	r3, r8
    1ba8:	str	r0, [sp]
    1bac:	ldr	r0, [r7, #16]
    1bb0:	bl	cc <print_expression>
    1bb4:	ldr	r3, [r7, #16]
    1bb8:	ldr	r3, [r3]
    1bbc:	cmp	r3, #38	; 0x26
    1bc0:	beq	1bd0 <print_expression+0x1b04>
    1bc4:	movw	r0, #0
    1bc8:	movt	r0, #0
    1bcc:	blx	r4
    1bd0:	movw	r0, #0
    1bd4:	movt	r0, #0
    1bd8:	ldr	r1, [r7, #12]
    1bdc:	blx	r4
    1be0:	b	2d8 <print_expression+0x20c>
    1be4:	movw	r0, #0
    1be8:	movt	r0, #0
    1bec:	blx	r1
    1bf0:	mov	r0, #1
    1bf4:	mov	r3, r8
    1bf8:	mov	r2, r9
    1bfc:	mov	r1, r4
    1c00:	str	r0, [sp]
    1c04:	ldr	r0, [r7, #16]
    1c08:	bl	cc <print_expression>
    1c0c:	b	2d8 <print_expression+0x20c>
    1c10:	ldr	r3, [sp, #96]	; 0x60
    1c14:	mov	r5, #3
    1c18:	cmp	r3, #2
    1c1c:	bgt	22a4 <print_expression+0x21d8>
    1c20:	movw	r0, #0
    1c24:	movt	r0, #0
    1c28:	blx	r1
    1c2c:	mov	r3, r8
    1c30:	mov	r2, r9
    1c34:	str	r5, [sp]
    1c38:	mov	r1, r4
    1c3c:	ldr	r0, [r7, #16]
    1c40:	bl	cc <print_expression>
    1c44:	movw	r0, #0
    1c48:	movt	r0, #0
    1c4c:	blx	r4
    1c50:	mov	r3, r8
    1c54:	mov	r2, r9
    1c58:	str	r5, [sp]
    1c5c:	mov	r1, r4
    1c60:	ldr	r0, [r7, #20]
    1c64:	bl	cc <print_expression>
    1c68:	movw	r0, #0
    1c6c:	movt	r0, #0
    1c70:	blx	r4
    1c74:	b	2d8 <print_expression+0x20c>
    1c78:	ldr	r3, [sp, #96]	; 0x60
    1c7c:	mov	r5, #3
    1c80:	cmp	r3, #2
    1c84:	bgt	2404 <print_expression+0x2338>
    1c88:	movw	r0, #0
    1c8c:	movt	r0, #0
    1c90:	blx	r1
    1c94:	mov	r3, r8
    1c98:	mov	r2, r9
    1c9c:	str	r5, [sp]
    1ca0:	mov	r1, r4
    1ca4:	ldr	r0, [r7, #16]
    1ca8:	bl	cc <print_expression>
    1cac:	movw	r0, #0
    1cb0:	movt	r0, #0
    1cb4:	blx	r4
    1cb8:	mov	r3, r8
    1cbc:	mov	r2, r9
    1cc0:	str	r5, [sp]
    1cc4:	mov	r1, r4
    1cc8:	ldr	r0, [r7, #20]
    1ccc:	bl	cc <print_expression>
    1cd0:	movw	r0, #0
    1cd4:	movt	r0, #0
    1cd8:	blx	r4
    1cdc:	b	2d8 <print_expression+0x20c>
    1ce0:	cmp	r8, #0
    1ce4:	mov	r5, #15
    1ce8:	movw	r3, #0
    1cec:	movt	r3, #0
    1cf0:	movw	r0, #0
    1cf4:	movt	r0, #0
    1cf8:	moveq	r0, r3
    1cfc:	blx	r1
    1d00:	mov	r3, r8
    1d04:	mov	r2, r9
    1d08:	str	r5, [sp]
    1d0c:	mov	r1, r4
    1d10:	ldr	r0, [r7, #16]
    1d14:	bl	cc <print_expression>
    1d18:	movw	r0, #0
    1d1c:	movt	r0, #0
    1d20:	blx	r4
    1d24:	mov	r3, r8
    1d28:	mov	r2, r9
    1d2c:	str	r5, [sp]
    1d30:	mov	r1, r4
    1d34:	ldr	r0, [r7, #20]
    1d38:	bl	cc <print_expression>
    1d3c:	movw	r0, #0
    1d40:	movt	r0, #0
    1d44:	blx	r4
    1d48:	b	2d8 <print_expression+0x20c>
    1d4c:	movw	r0, #0
    1d50:	movt	r0, #0
    1d54:	blx	r1
    1d58:	mov	r0, #1
    1d5c:	mov	r3, r8
    1d60:	mov	r2, r9
    1d64:	mov	r1, r4
    1d68:	str	r0, [sp]
    1d6c:	ldr	r0, [r7, #16]
    1d70:	bl	cc <print_expression>
    1d74:	b	2d8 <print_expression+0x20c>
    1d78:	ldr	r3, [sp, #96]	; 0x60
    1d7c:	mov	r5, #6
    1d80:	cmp	r3, #5
    1d84:	bgt	243c <print_expression+0x2370>
    1d88:	movw	r0, #0
    1d8c:	movt	r0, #0
    1d90:	blx	r1
    1d94:	mov	r3, r8
    1d98:	mov	r2, r9
    1d9c:	str	r5, [sp]
    1da0:	mov	r1, r4
    1da4:	ldr	r0, [r7, #16]
    1da8:	bl	cc <print_expression>
    1dac:	movw	r0, #0
    1db0:	movt	r0, #0
    1db4:	blx	r4
    1db8:	mov	r3, r8
    1dbc:	mov	r2, r9
    1dc0:	str	r5, [sp]
    1dc4:	mov	r1, r4
    1dc8:	ldr	r0, [r7, #20]
    1dcc:	bl	cc <print_expression>
    1dd0:	movw	r0, #0
    1dd4:	movt	r0, #0
    1dd8:	blx	r4
    1ddc:	b	2d8 <print_expression+0x20c>
    1de0:	cmp	r8, #0
    1de4:	movw	r3, #0
    1de8:	movt	r3, #0
    1dec:	movw	r0, #0
    1df0:	movt	r0, #0
    1df4:	moveq	r0, r3
    1df8:	blx	r1
    1dfc:	mov	r0, #15
    1e00:	mov	r3, r8
    1e04:	mov	r2, r9
    1e08:	mov	r1, r4
    1e0c:	str	r0, [sp]
    1e10:	ldr	r0, [r7, #16]
    1e14:	bl	cc <print_expression>
    1e18:	movw	r0, #0
    1e1c:	movt	r0, #0
    1e20:	blx	r4
    1e24:	b	2d8 <print_expression+0x20c>
    1e28:	movw	r0, #0
    1e2c:	movt	r0, #0
    1e30:	blx	r1
    1e34:	b	2d8 <print_expression+0x20c>
    1e38:	ldr	r0, [r7, #16]
    1e3c:	cmp	r0, #0
    1e40:	beq	1e64 <print_expression+0x1d98>
    1e44:	mov	r1, #15
    1e48:	mov	r3, r8
    1e4c:	str	r1, [sp]
    1e50:	mov	r1, r4
    1e54:	bl	cc <print_expression>
    1e58:	movw	r0, #0
    1e5c:	movt	r0, #0
    1e60:	blx	r4
    1e64:	movw	r0, #0
    1e68:	movt	r0, #0
    1e6c:	blx	r4
    1e70:	b	2d8 <print_expression+0x20c>
    1e74:	movw	r0, #0
    1e78:	movt	r0, #0
    1e7c:	blx	r1
    1e80:	b	2d8 <print_expression+0x20c>
    1e84:	ldr	r0, [r7, #16]
    1e88:	cmp	r0, #0
    1e8c:	beq	1ea4 <print_expression+0x1dd8>
    1e90:	mov	r1, #15
    1e94:	mov	r3, r8
    1e98:	str	r1, [sp]
    1e9c:	mov	r1, r4
    1ea0:	bl	cc <print_expression>
    1ea4:	movw	r0, #0
    1ea8:	movt	r0, #0
    1eac:	ldr	r1, [r7, #12]
    1eb0:	blx	r4
    1eb4:	b	2d8 <print_expression+0x20c>
    1eb8:	cmp	r8, #0
    1ebc:	movw	r3, #0
    1ec0:	movt	r3, #0
    1ec4:	movw	r0, #0
    1ec8:	movt	r0, #0
    1ecc:	moveq	r0, r3
    1ed0:	blx	r1
    1ed4:	mov	r0, #15
    1ed8:	mov	r3, r8
    1edc:	mov	r2, r9
    1ee0:	mov	r1, r4
    1ee4:	str	r0, [sp]
    1ee8:	ldr	r0, [r7, #16]
    1eec:	bl	cc <print_expression>
    1ef0:	movw	r0, #0
    1ef4:	movt	r0, #0
    1ef8:	blx	r4
    1efc:	b	2d8 <print_expression+0x20c>
    1f00:	cmp	r8, #0
    1f04:	movw	r3, #0
    1f08:	movt	r3, #0
    1f0c:	movw	r0, #0
    1f10:	movt	r0, #0
    1f14:	moveq	r0, r3
    1f18:	blx	r1
    1f1c:	mov	r0, #15
    1f20:	mov	r3, r8
    1f24:	mov	r2, r9
    1f28:	mov	r1, r4
    1f2c:	str	r0, [sp]
    1f30:	ldr	r0, [r7, #16]
    1f34:	bl	cc <print_expression>
    1f38:	movw	r0, #0
    1f3c:	movt	r0, #0
    1f40:	blx	r4
    1f44:	b	2d8 <print_expression+0x20c>
    1f48:	mov	r0, r8
    1f4c:	blx	r4
    1f50:	cmp	r6, r5
    1f54:	bne	de8 <print_expression+0xd1c>
    1f58:	ldr	r0, [sp, #12]
    1f5c:	blx	r4
    1f60:	b	2d8 <print_expression+0x20c>
    1f64:	mov	r0, r7
    1f68:	blx	r4
    1f6c:	b	1f50 <print_expression+0x1e84>
    1f70:	ldr	r0, [sp, #20]
    1f74:	blx	r4
    1f78:	b	1f50 <print_expression+0x1e84>
    1f7c:	ldr	r0, [sp, #16]
    1f80:	blx	r4
    1f84:	b	1f50 <print_expression+0x1e84>
    1f88:	ldr	r0, [sp, #24]
    1f8c:	blx	r4
    1f90:	b	1f50 <print_expression+0x1e84>
    1f94:	movw	r0, #0
    1f98:	movt	r0, #0
    1f9c:	blx	r4
    1fa0:	b	1f50 <print_expression+0x1e84>
    1fa4:	mov	r0, r9
    1fa8:	blx	r4
    1fac:	b	1f50 <print_expression+0x1e84>
    1fb0:	movw	r0, #0
    1fb4:	movt	r0, #0
    1fb8:	blx	r4
    1fbc:	b	1f50 <print_expression+0x1e84>
    1fc0:	movw	r0, #0
    1fc4:	movt	r0, #0
    1fc8:	blx	r4
    1fcc:	b	1f50 <print_expression+0x1e84>
    1fd0:	movw	r0, #0
    1fd4:	movt	r0, #0
    1fd8:	blx	r4
    1fdc:	b	1f50 <print_expression+0x1e84>
    1fe0:	movw	r0, #0
    1fe4:	movt	r0, #0
    1fe8:	blx	r4
    1fec:	b	1f50 <print_expression+0x1e84>
    1ff0:	movw	r0, #0
    1ff4:	movt	r0, #0
    1ff8:	blx	r4
    1ffc:	b	1f50 <print_expression+0x1e84>
    2000:	movw	r0, #0
    2004:	movt	r0, #0
    2008:	blx	r4
    200c:	b	1f50 <print_expression+0x1e84>
    2010:	movw	r0, #0
    2014:	movt	r0, #0
    2018:	blx	r4
    201c:	b	1f50 <print_expression+0x1e84>
    2020:	str	r1, [sp, #28]
    2024:	bl	0 <__ctype_b_loc>
    2028:	ldr	r1, [sp, #28]
    202c:	ldr	r2, [r0]
    2030:	lsl	r3, r1, #1
    2034:	ldrh	r3, [r2, r3]
    2038:	tst	r3, #16384	; 0x4000
    203c:	moveq	r0, sl
    2040:	movne	r0, fp
    2044:	blx	r4
    2048:	b	1f50 <print_expression+0x1e84>
    204c:	mov	r3, r8
    2050:	str	r5, [sp]
    2054:	ldr	r0, [r7, #16]
    2058:	bl	cc <print_expression>
    205c:	movw	r0, #0
    2060:	movt	r0, #0
    2064:	blx	r4
    2068:	mov	r3, r8
    206c:	mov	r2, r9
    2070:	str	r5, [sp]
    2074:	mov	r1, r4
    2078:	ldr	r0, [r7, #20]
    207c:	bl	cc <print_expression>
    2080:	b	2d8 <print_expression+0x20c>
    2084:	mov	r3, r8
    2088:	str	r5, [sp]
    208c:	ldr	r0, [r7, #16]
    2090:	bl	cc <print_expression>
    2094:	cmp	r8, #0
    2098:	beq	24e0 <print_expression+0x2414>
    209c:	movw	r0, #0
    20a0:	movt	r0, #0
    20a4:	blx	r4
    20a8:	mov	r2, r9
    20ac:	mov	r1, r4
    20b0:	str	r5, [sp]
    20b4:	mov	r3, #1
    20b8:	ldr	r0, [r7, #20]
    20bc:	bl	cc <print_expression>
    20c0:	b	2d8 <print_expression+0x20c>
    20c4:	cmp	r8, #0
    20c8:	movw	r3, #0
    20cc:	movt	r3, #0
    20d0:	movw	r0, #0
    20d4:	movt	r0, #0
    20d8:	moveq	r0, r3
    20dc:	blx	r1
    20e0:	b	2d8 <print_expression+0x20c>
    20e4:	mov	r5, #15
    20e8:	movw	r0, #0
    20ec:	movt	r0, #0
    20f0:	blx	r4
    20f4:	mov	r3, r8
    20f8:	mov	r2, r9
    20fc:	str	r5, [sp]
    2100:	mov	r1, r4
    2104:	ldr	r0, [r7, #16]
    2108:	bl	cc <print_expression>
    210c:	movw	r0, #0
    2110:	movt	r0, #0
    2114:	blx	r4
    2118:	mov	r3, r8
    211c:	mov	r2, r9
    2120:	str	r5, [sp]
    2124:	mov	r1, r4
    2128:	ldr	r0, [r7, #20]
    212c:	bl	cc <print_expression>
    2130:	ldr	r3, [r7, #24]
    2134:	cmp	r3, #0
    2138:	beq	2160 <print_expression+0x2094>
    213c:	movw	r0, #0
    2140:	movt	r0, #0
    2144:	blx	r4
    2148:	mov	r3, r8
    214c:	mov	r2, r9
    2150:	str	r5, [sp]
    2154:	mov	r1, r4
    2158:	ldr	r0, [r7, #24]
    215c:	bl	cc <print_expression>
    2160:	movw	r0, #0
    2164:	movt	r0, #0
    2168:	b	ad8 <print_expression+0xa0c>
    216c:	mov	r3, r8
    2170:	str	r5, [sp]
    2174:	ldr	r0, [r7, #16]
    2178:	bl	cc <print_expression>
    217c:	movw	r0, #0
    2180:	movt	r0, #0
    2184:	blx	r4
    2188:	mov	r3, r8
    218c:	mov	r2, r9
    2190:	str	r5, [sp]
    2194:	mov	r1, r4
    2198:	ldr	r0, [r7, #20]
    219c:	bl	cc <print_expression>
    21a0:	b	2d8 <print_expression+0x20c>
    21a4:	mov	r3, r8
    21a8:	str	r6, [sp]
    21ac:	ldr	r0, [r7, #16]
    21b0:	bl	cc <print_expression>
    21b4:	cmp	r5, #0
    21b8:	beq	2570 <print_expression+0x24a4>
    21bc:	movw	r0, #0
    21c0:	movt	r0, #0
    21c4:	blx	r4
    21c8:	mov	r3, r8
    21cc:	mov	r2, r9
    21d0:	str	r6, [sp]
    21d4:	mov	r1, r4
    21d8:	ldr	r0, [r7, #20]
    21dc:	bl	cc <print_expression>
    21e0:	b	2d8 <print_expression+0x20c>
    21e4:	mov	r3, r8
    21e8:	str	r6, [sp]
    21ec:	ldr	r0, [r7, #16]
    21f0:	bl	cc <print_expression>
    21f4:	cmp	r5, #0
    21f8:	beq	2640 <print_expression+0x2574>
    21fc:	movw	r0, #0
    2200:	movt	r0, #0
    2204:	blx	r4
    2208:	mov	r3, r8
    220c:	mov	r2, r9
    2210:	str	r6, [sp]
    2214:	mov	r1, r4
    2218:	ldr	r0, [r7, #20]
    221c:	bl	cc <print_expression>
    2220:	b	2d8 <print_expression+0x20c>
    2224:	mov	r3, r8
    2228:	str	r5, [sp]
    222c:	ldr	r0, [r7, #16]
    2230:	bl	cc <print_expression>
    2234:	cmp	r8, #0
    2238:	beq	25a4 <print_expression+0x24d8>
    223c:	movw	r0, #0
    2240:	movt	r0, #0
    2244:	blx	r4
    2248:	mov	r2, r9
    224c:	mov	r1, r4
    2250:	str	r5, [sp]
    2254:	mov	r3, #1
    2258:	ldr	r0, [r7, #20]
    225c:	bl	cc <print_expression>
    2260:	b	2d8 <print_expression+0x20c>
    2264:	mov	r3, r8
    2268:	str	r6, [sp]
    226c:	ldr	r0, [r7, #16]
    2270:	bl	cc <print_expression>
    2274:	cmp	r5, #0
    2278:	beq	25f4 <print_expression+0x2528>
    227c:	movw	r0, #0
    2280:	movt	r0, #0
    2284:	blx	r4
    2288:	mov	r3, r8
    228c:	mov	r2, r9
    2290:	str	r6, [sp]
    2294:	mov	r1, r4
    2298:	ldr	r0, [r7, #20]
    229c:	bl	cc <print_expression>
    22a0:	b	2d8 <print_expression+0x20c>
    22a4:	mov	r3, r8
    22a8:	str	r5, [sp]
    22ac:	ldr	r0, [r7, #16]
    22b0:	bl	cc <print_expression>
    22b4:	movw	r0, #0
    22b8:	movt	r0, #0
    22bc:	blx	r4
    22c0:	mov	r3, r8
    22c4:	mov	r2, r9
    22c8:	str	r5, [sp]
    22cc:	mov	r1, r4
    22d0:	ldr	r0, [r7, #20]
    22d4:	bl	cc <print_expression>
    22d8:	b	2d8 <print_expression+0x20c>
    22dc:	mov	r3, r8
    22e0:	str	r6, [sp]
    22e4:	ldr	r0, [r7, #16]
    22e8:	bl	cc <print_expression>
    22ec:	cmp	r5, #0
    22f0:	beq	25cc <print_expression+0x2500>
    22f4:	movw	r0, #0
    22f8:	movt	r0, #0
    22fc:	blx	r4
    2300:	mov	r3, r8
    2304:	mov	r2, r9
    2308:	str	r6, [sp]
    230c:	mov	r1, r4
    2310:	ldr	r0, [r7, #20]
    2314:	bl	cc <print_expression>
    2318:	b	2d8 <print_expression+0x20c>
    231c:	mov	r3, r8
    2320:	str	r5, [sp]
    2324:	ldr	r0, [r7, #16]
    2328:	bl	cc <print_expression>
    232c:	movw	r0, #0
    2330:	movt	r0, #0
    2334:	blx	r4
    2338:	mov	r3, r8
    233c:	mov	r2, r9
    2340:	str	r5, [sp]
    2344:	mov	r1, r4
    2348:	ldr	r0, [r7, #20]
    234c:	bl	cc <print_expression>
    2350:	b	2d8 <print_expression+0x20c>
    2354:	mov	r3, r8
    2358:	str	r6, [sp]
    235c:	ldr	r0, [r7, #16]
    2360:	bl	cc <print_expression>
    2364:	cmp	r5, #0
    2368:	beq	2530 <print_expression+0x2464>
    236c:	movw	r0, #0
    2370:	movt	r0, #0
    2374:	blx	r4
    2378:	mov	r3, r8
    237c:	mov	r2, r9
    2380:	str	r6, [sp]
    2384:	mov	r1, r4
    2388:	ldr	r0, [r7, #20]
    238c:	bl	cc <print_expression>
    2390:	b	2d8 <print_expression+0x20c>
    2394:	mov	r3, r8
    2398:	str	r5, [sp]
    239c:	ldr	r0, [r7, #16]
    23a0:	bl	cc <print_expression>
    23a4:	movw	r0, #0
    23a8:	movt	r0, #0
    23ac:	blx	r4
    23b0:	mov	r3, r8
    23b4:	mov	r2, r9
    23b8:	str	r5, [sp]
    23bc:	mov	r1, r4
    23c0:	ldr	r0, [r7, #20]
    23c4:	bl	cc <print_expression>
    23c8:	b	2d8 <print_expression+0x20c>
    23cc:	mov	r3, r8
    23d0:	str	r5, [sp]
    23d4:	ldr	r0, [r7, #16]
    23d8:	bl	cc <print_expression>
    23dc:	movw	r0, #0
    23e0:	movt	r0, #0
    23e4:	blx	r4
    23e8:	mov	r3, r8
    23ec:	mov	r2, r9
    23f0:	str	r5, [sp]
    23f4:	mov	r1, r4
    23f8:	ldr	r0, [r7, #20]
    23fc:	bl	cc <print_expression>
    2400:	b	2d8 <print_expression+0x20c>
    2404:	mov	r3, r8
    2408:	str	r5, [sp]
    240c:	ldr	r0, [r7, #16]
    2410:	bl	cc <print_expression>
    2414:	movw	r0, #0
    2418:	movt	r0, #0
    241c:	blx	r4
    2420:	mov	r3, r8
    2424:	mov	r2, r9
    2428:	str	r5, [sp]
    242c:	mov	r1, r4
    2430:	ldr	r0, [r7, #20]
    2434:	bl	cc <print_expression>
    2438:	b	2d8 <print_expression+0x20c>
    243c:	mov	r3, r8
    2440:	str	r5, [sp]
    2444:	ldr	r0, [r7, #16]
    2448:	bl	cc <print_expression>
    244c:	movw	r0, #0
    2450:	movt	r0, #0
    2454:	blx	r4
    2458:	mov	r3, r8
    245c:	mov	r2, r9
    2460:	str	r5, [sp]
    2464:	mov	r1, r4
    2468:	ldr	r0, [r7, #20]
    246c:	bl	cc <print_expression>
    2470:	b	2d8 <print_expression+0x20c>
    2474:	movw	r0, #0
    2478:	movt	r0, #0
    247c:	blx	r1
    2480:	mov	r3, r8
    2484:	mov	r2, r9
    2488:	str	r5, [sp]
    248c:	mov	r1, r4
    2490:	ldr	r0, [r7, #16]
    2494:	bl	cc <print_expression>
    2498:	movw	r0, #0
    249c:	movt	r0, #0
    24a0:	blx	r4
    24a4:	mov	r3, r8
    24a8:	mov	r2, r9
    24ac:	str	r5, [sp]
    24b0:	mov	r1, r4
    24b4:	ldr	r0, [r7, #20]
    24b8:	bl	cc <print_expression>
    24bc:	movw	r0, #0
    24c0:	movt	r0, #0
    24c4:	blx	r4
    24c8:	b	2d8 <print_expression+0x20c>
    24cc:	mov	r0, r6
    24d0:	bl	0 <strlen>
    24d4:	cmp	r0, #0
    24d8:	bne	d44 <print_expression+0xc78>
    24dc:	b	1f58 <print_expression+0x1e8c>
    24e0:	movw	r0, #0
    24e4:	movt	r0, #0
    24e8:	blx	r4
    24ec:	mov	r3, r8
    24f0:	mov	r2, r9
    24f4:	str	r5, [sp]
    24f8:	mov	r1, r4
    24fc:	ldr	r0, [r7, #20]
    2500:	bl	cc <print_expression>
    2504:	b	2d8 <print_expression+0x20c>
    2508:	movw	r0, #0
    250c:	movt	r0, #0
    2510:	blx	r4
    2514:	mov	r3, r5
    2518:	mov	r2, r5
    251c:	str	r6, [sp]
    2520:	mov	r1, r4
    2524:	ldr	r0, [r7, #20]
    2528:	bl	cc <print_expression>
    252c:	b	2cc <print_expression+0x200>
    2530:	movw	r0, #0
    2534:	movt	r0, #0
    2538:	blx	r4
    253c:	mov	r1, r4
    2540:	mov	r3, r5
    2544:	str	r6, [sp]
    2548:	mov	r2, r5
    254c:	ldr	r0, [r7, #20]
    2550:	bl	cc <print_expression>
    2554:	b	2d8 <print_expression+0x20c>
    2558:	movw	r0, #0
    255c:	movt	r0, #0
    2560:	b	2b0 <print_expression+0x1e4>
    2564:	movw	r0, #0
    2568:	movt	r0, #0
    256c:	b	2510 <print_expression+0x2444>
    2570:	movw	r0, #0
    2574:	movt	r0, #0
    2578:	blx	r4
    257c:	mov	r1, r4
    2580:	mov	r3, r5
    2584:	str	r6, [sp]
    2588:	mov	r2, r5
    258c:	ldr	r0, [r7, #20]
    2590:	bl	cc <print_expression>
    2594:	b	2d8 <print_expression+0x20c>
    2598:	movw	r0, #0
    259c:	movt	r0, #0
    25a0:	b	2510 <print_expression+0x2444>
    25a4:	movw	r0, #0
    25a8:	movt	r0, #0
    25ac:	blx	r4
    25b0:	mov	r3, r8
    25b4:	mov	r2, r9
    25b8:	str	r5, [sp]
    25bc:	mov	r1, r4
    25c0:	ldr	r0, [r7, #20]
    25c4:	bl	cc <print_expression>
    25c8:	b	2d8 <print_expression+0x20c>
    25cc:	movw	r0, #0
    25d0:	movt	r0, #0
    25d4:	blx	r4
    25d8:	mov	r1, r4
    25dc:	mov	r3, r5
    25e0:	str	r6, [sp]
    25e4:	mov	r2, r5
    25e8:	ldr	r0, [r7, #20]
    25ec:	bl	cc <print_expression>
    25f0:	b	2d8 <print_expression+0x20c>
    25f4:	movw	r0, #0
    25f8:	movt	r0, #0
    25fc:	blx	r4
    2600:	mov	r1, r4
    2604:	mov	r3, r5
    2608:	str	r6, [sp]
    260c:	mov	r2, r5
    2610:	ldr	r0, [r7, #20]
    2614:	bl	cc <print_expression>
    2618:	b	2d8 <print_expression+0x20c>
    261c:	movw	r0, #0
    2620:	movt	r0, #0
    2624:	b	2510 <print_expression+0x2444>
    2628:	movw	r0, #0
    262c:	movt	r0, #0
    2630:	b	2510 <print_expression+0x2444>
    2634:	movw	r0, #0
    2638:	movt	r0, #0
    263c:	b	2b0 <print_expression+0x1e4>
    2640:	movw	r0, #0
    2644:	movt	r0, #0
    2648:	blx	r4
    264c:	mov	r1, r4
    2650:	mov	r3, r5
    2654:	str	r6, [sp]
    2658:	mov	r2, r5
    265c:	ldr	r0, [r7, #20]
    2660:	bl	cc <print_expression>
    2664:	b	2d8 <print_expression+0x20c>
    2668:	movw	r3, #0
    266c:	movt	r3, #0
    2670:	movw	r1, #0
    2674:	movt	r1, #0
    2678:	movw	r0, #0
    267c:	movt	r0, #0
    2680:	movw	r2, #4196	; 0x1064
    2684:	bl	0 <__assert_fail>

00002688 <eval_string>:
    2688:	strd	r4, [sp, #-36]!	; 0xffffffdc
    268c:	mov	r4, r3
    2690:	mov	r5, r2
    2694:	ldr	r3, [r1]
    2698:	strd	r6, [sp, #8]
    269c:	mov	r6, r1
    26a0:	strd	r8, [sp, #16]
    26a4:	strd	sl, [sp, #24]
    26a8:	str	lr, [sp, #32]
    26ac:	sub	sp, sp, #636	; 0x27c
    26b0:	sub	r2, r3, #21
    26b4:	cmp	r2, #1
    26b8:	bls	2828 <eval_string+0x1a0>
    26bc:	sub	r3, r3, #1
    26c0:	mov	sl, r0
    26c4:	cmp	r3, #85	; 0x55
    26c8:	ldrls	pc, [pc, r3, lsl #2]
    26cc:	b	3804 <eval_string+0x117c>
    26d0:	.word	0x000036e0
    26d4:	.word	0x00003804
    26d8:	.word	0x00003430
    26dc:	.word	0x00003804
    26e0:	.word	0x00003804
    26e4:	.word	0x00003804
    26e8:	.word	0x00003804
    26ec:	.word	0x00003578
    26f0:	.word	0x00003034
    26f4:	.word	0x00003804
    26f8:	.word	0x000033c4
    26fc:	.word	0x00003804
    2700:	.word	0x00003804
    2704:	.word	0x00003804
    2708:	.word	0x00003804
    270c:	.word	0x000032a8
    2710:	.word	0x00003804
    2714:	.word	0x00003804
    2718:	.word	0x00003804
    271c:	.word	0x00003804
    2720:	.word	0x00003804
    2724:	.word	0x00003804
    2728:	.word	0x00003804
    272c:	.word	0x00003804
    2730:	.word	0x00003804
    2734:	.word	0x00003804
    2738:	.word	0x00003804
    273c:	.word	0x00002ec4
    2740:	.word	0x00003804
    2744:	.word	0x00003804
    2748:	.word	0x00003804
    274c:	.word	0x00003804
    2750:	.word	0x00003804
    2754:	.word	0x00003804
    2758:	.word	0x00003804
    275c:	.word	0x00003804
    2760:	.word	0x00003804
    2764:	.word	0x00003804
    2768:	.word	0x00003804
    276c:	.word	0x00003804
    2770:	.word	0x00003804
    2774:	.word	0x00002e78
    2778:	.word	0x00003804
    277c:	.word	0x00003804
    2780:	.word	0x00003804
    2784:	.word	0x00003804
    2788:	.word	0x00003804
    278c:	.word	0x00003804
    2790:	.word	0x00003804
    2794:	.word	0x00003804
    2798:	.word	0x00003804
    279c:	.word	0x00003804
    27a0:	.word	0x00003804
    27a4:	.word	0x00003804
    27a8:	.word	0x0000322c
    27ac:	.word	0x0000318c
    27b0:	.word	0x00003768
    27b4:	.word	0x00003804
    27b8:	.word	0x00003804
    27bc:	.word	0x00003804
    27c0:	.word	0x00003804
    27c4:	.word	0x00003804
    27c8:	.word	0x00003804
    27cc:	.word	0x00003804
    27d0:	.word	0x00003804
    27d4:	.word	0x00003804
    27d8:	.word	0x00002fd0
    27dc:	.word	0x00002f4c
    27e0:	.word	0x00002e04
    27e4:	.word	0x00003804
    27e8:	.word	0x00002c64
    27ec:	.word	0x00003804
    27f0:	.word	0x00002bf0
    27f4:	.word	0x00003804
    27f8:	.word	0x00002a60
    27fc:	.word	0x00002998
    2800:	.word	0x00002b28
    2804:	.word	0x00003804
    2808:	.word	0x00003804
    280c:	.word	0x000028f8
    2810:	.word	0x00003804
    2814:	.word	0x00003804
    2818:	.word	0x00003804
    281c:	.word	0x00003804
    2820:	.word	0x00003804
    2824:	.word	0x00002898
    2828:	mov	r7, #0
    282c:	str	r7, [r5]
    2830:	ldr	r0, [r1, #12]
    2834:	cmp	r0, r7
    2838:	str	r0, [r4]
    283c:	ble	2888 <eval_string+0x200>
    2840:	add	r0, r0, #1
    2844:	bl	0 <malloc>
    2848:	ldr	r2, [sp, #672]	; 0x2a0
    284c:	cmp	r0, r7
    2850:	str	r0, [r2]
    2854:	beq	3ba4 <eval_string+0x151c>
    2858:	ldr	r2, [r4]
    285c:	mov	r9, r7
    2860:	ldr	r1, [r6, #16]
    2864:	bl	0 <memcpy>
    2868:	mov	r0, r9
    286c:	add	sp, sp, #636	; 0x27c
    2870:	ldrd	r4, [sp]
    2874:	ldrd	r6, [sp, #8]
    2878:	ldrd	r8, [sp, #16]
    287c:	ldrd	sl, [sp, #24]
    2880:	add	sp, sp, #32
    2884:	pop	{pc}		; (ldr pc, [sp], #4)
    2888:	ldr	r3, [sp, #672]	; 0x2a0
    288c:	mov	r9, r7
    2890:	str	r7, [r3]
    2894:	b	2868 <eval_string+0x1e0>
    2898:	ldr	r3, [r1, #12]
    289c:	ldr	r1, [r1, #16]
    28a0:	ldrb	r2, [r3]
    28a4:	add	r7, r0, r2, lsl #3
    28a8:	sub	r2, r2, #39	; 0x27
    28ac:	add	r2, r0, r2, lsl #3
    28b0:	sub	r7, r7, #304	; 0x130
    28b4:	ldrd	r8, [r7, #-8]
    28b8:	strd	r8, [sp, #16]
    28bc:	bl	5d94 <eval_integer>
    28c0:	cmp	r0, #0
    28c4:	bne	2ebc <eval_string+0x834>
    28c8:	ldr	r1, [sp, #672]	; 0x2a0
    28cc:	mov	r3, r4
    28d0:	mov	r2, r5
    28d4:	mov	r0, sl
    28d8:	str	r1, [sp]
    28dc:	ldr	r1, [r6, #20]
    28e0:	bl	2688 <eval_string>
    28e4:	subs	r9, r0, #0
    28e8:	bne	2ebc <eval_string+0x834>
    28ec:	ldrd	r2, [sp, #16]
    28f0:	strd	r2, [r7, #-8]
    28f4:	b	2868 <eval_string+0x1e0>
    28f8:	ldr	r2, [sp, #672]	; 0x2a0
    28fc:	mov	r3, r4
    2900:	str	r2, [sp]
    2904:	mov	r2, r5
    2908:	ldr	r1, [r1, #16]
    290c:	bl	2688 <eval_string>
    2910:	cmp	r0, #0
    2914:	bne	2ebc <eval_string+0x834>
    2918:	ldr	r1, [r4]
    291c:	cmp	r1, #0
    2920:	ble	2990 <eval_string+0x308>
    2924:	ldr	r3, [sp, #672]	; 0x2a0
    2928:	ldr	r0, [r3]
    292c:	ldr	r3, [r5]
    2930:	ldrb	r2, [r0, r3]
    2934:	sub	ip, r2, #9
    2938:	cmp	r2, #32
    293c:	cmpne	ip, #1
    2940:	bls	3820 <eval_string+0x1198>
    2944:	cmp	r2, #13
    2948:	beq	3820 <eval_string+0x1198>
    294c:	cmp	r1, #0
    2950:	bgt	296c <eval_string+0x2e4>
    2954:	b	2990 <eval_string+0x308>
    2958:	sub	r1, r1, #1
    295c:	cmp	r1, #0
    2960:	str	r1, [r4]
    2964:	beq	2990 <eval_string+0x308>
    2968:	ldr	r3, [r5]
    296c:	add	r2, r0, r1
    2970:	add	r3, r2, r3
    2974:	ldrb	r3, [r3, #-1]
    2978:	sub	r2, r3, #9
    297c:	cmp	r3, #32
    2980:	cmpne	r2, #1
    2984:	bls	2958 <eval_string+0x2d0>
    2988:	cmp	r3, #13
    298c:	beq	2958 <eval_string+0x2d0>
    2990:	mov	r9, #0
    2994:	b	2868 <eval_string+0x1e0>
    2998:	add	r2, sp, #112	; 0x70
    299c:	ldr	r1, [r1, #16]
    29a0:	bl	3edc <eval_float>
    29a4:	cmp	r0, #0
    29a8:	bne	2ebc <eval_string+0x834>
    29ac:	ldr	r1, [r6, #20]
    29b0:	cmp	r1, #0
    29b4:	beq	38ec <eval_string+0x1264>
    29b8:	add	r2, sp, #104	; 0x68
    29bc:	mov	r0, sl
    29c0:	add	r3, sp, #96	; 0x60
    29c4:	str	r2, [sp]
    29c8:	add	r2, sp, #88	; 0x58
    29cc:	bl	2688 <eval_string>
    29d0:	cmp	r0, #0
    29d4:	bne	2ebc <eval_string+0x834>
    29d8:	ldr	r2, [sp, #96]	; 0x60
    29dc:	cmp	r2, #0
    29e0:	blt	3cb8 <eval_string+0x1630>
    29e4:	beq	3ca4 <eval_string+0x161c>
    29e8:	ldr	r1, [sp, #88]	; 0x58
    29ec:	ldr	r3, [sp, #104]	; 0x68
    29f0:	add	r3, r3, r2
    29f4:	strb	r0, [r3, r1]
    29f8:	ldr	r0, [sp, #96]	; 0x60
    29fc:	add	r0, r0, #1
    2a00:	bl	0 <malloc>
    2a04:	ldr	r3, [sp, #672]	; 0x2a0
    2a08:	cmp	r0, #0
    2a0c:	mov	r1, r0
    2a10:	str	r0, [r3]
    2a14:	beq	3c50 <eval_string+0x15c8>
    2a18:	ldr	r3, [sp, #88]	; 0x58
    2a1c:	ldr	r0, [sp, #104]	; 0x68
    2a20:	vldr	d0, [sp, #112]	; 0x70
    2a24:	add	r0, r0, r3
    2a28:	bl	0 <coda_time_double_to_string>
    2a2c:	subs	r9, r0, #0
    2a30:	bne	3c18 <eval_string+0x1590>
    2a34:	ldr	r3, [sp, #672]	; 0x2a0
    2a38:	ldr	r0, [r3]
    2a3c:	str	r9, [r5]
    2a40:	bl	0 <strlen>
    2a44:	ldr	r3, [r6, #20]
    2a48:	str	r0, [r4]
    2a4c:	cmp	r3, #0
    2a50:	beq	2868 <eval_string+0x1e0>
    2a54:	ldr	r0, [sp, #104]	; 0x68
    2a58:	bl	0 <free>
    2a5c:	b	2868 <eval_string+0x1e0>
    2a60:	ldr	r7, [r1, #16]
    2a64:	ldr	r3, [r7, #4]
    2a68:	cmp	r3, #4
    2a6c:	bne	38a0 <eval_string+0x1218>
    2a70:	ldr	r3, [r0]
    2a74:	cmp	r3, #0
    2a78:	beq	3e10 <eval_string+0x1788>
    2a7c:	add	r3, sp, #112	; 0x70
    2a80:	add	r8, r0, #8
    2a84:	mov	r1, r8
    2a88:	mov	r0, r3
    2a8c:	mov	r2, #520	; 0x208
    2a90:	str	r3, [sp, #16]
    2a94:	bl	0 <memcpy>
    2a98:	mov	r1, r7
    2a9c:	mov	r0, sl
    2aa0:	bl	7420 <eval_cursor>
    2aa4:	cmp	r0, #0
    2aa8:	bne	2ebc <eval_string+0x834>
    2aac:	mov	r1, r4
    2ab0:	str	r0, [r5]
    2ab4:	mov	r0, r8
    2ab8:	bl	0 <coda_cursor_get_string_length>
    2abc:	subs	r9, r0, #0
    2ac0:	bne	2ebc <eval_string+0x834>
    2ac4:	ldr	r1, [r6, #20]
    2ac8:	cmp	r1, #0
    2acc:	beq	3b0c <eval_string+0x1484>
    2ad0:	mov	r0, sl
    2ad4:	add	r2, sp, #104	; 0x68
    2ad8:	bl	5d94 <eval_integer>
    2adc:	cmp	r0, #0
    2ae0:	bne	2ebc <eval_string+0x834>
    2ae4:	ldr	r0, [r4]
    2ae8:	ldrd	r2, [sp, #104]	; 0x68
    2aec:	asr	r7, r0, #31
    2af0:	cmp	r2, r0
    2af4:	sbcs	r1, r3, r7
    2af8:	movlt	r0, r2
    2afc:	strlt	r2, [r4]
    2b00:	cmp	r0, #0
    2b04:	bgt	3b14 <eval_string+0x148c>
    2b08:	ldr	r2, [sp, #672]	; 0x2a0
    2b0c:	mov	r3, #0
    2b10:	str	r3, [r2]
    2b14:	mov	r0, r8
    2b18:	mov	r2, #520	; 0x208
    2b1c:	ldr	r1, [sp, #16]
    2b20:	bl	0 <memcpy>
    2b24:	b	2868 <eval_string+0x1e0>
    2b28:	add	r2, sp, #104	; 0x68
    2b2c:	ldr	r1, [r1, #16]
    2b30:	bl	5d94 <eval_integer>
    2b34:	cmp	r0, #0
    2b38:	bne	2ebc <eval_string+0x834>
    2b3c:	ldrd	r2, [sp, #104]	; 0x68
    2b40:	cmp	r2, #0
    2b44:	sbcs	r3, r3, #0
    2b48:	blt	3b50 <eval_string+0x14c8>
    2b4c:	add	r2, sp, #112	; 0x70
    2b50:	mov	r0, sl
    2b54:	ldr	r1, [r6, #20]
    2b58:	bl	5d94 <eval_integer>
    2b5c:	subs	r9, r0, #0
    2b60:	bne	2ebc <eval_string+0x834>
    2b64:	ldrd	r2, [sp, #112]	; 0x70
    2b68:	orrs	r1, r2, r3
    2b6c:	beq	3b90 <eval_string+0x1508>
    2b70:	cmp	r2, #0
    2b74:	sbcs	r3, r3, #0
    2b78:	blt	3bc8 <eval_string+0x1540>
    2b7c:	ldr	r2, [sp, #672]	; 0x2a0
    2b80:	mov	r0, sl
    2b84:	mov	r3, r4
    2b88:	str	r2, [sp]
    2b8c:	mov	r2, r5
    2b90:	ldr	r1, [r6, #24]
    2b94:	bl	2688 <eval_string>
    2b98:	subs	r9, r0, #0
    2b9c:	bne	2ebc <eval_string+0x834>
    2ba0:	ldr	r0, [r4]
    2ba4:	cmp	r0, #0
    2ba8:	beq	2868 <eval_string+0x1e0>
    2bac:	ldrd	r6, [sp, #104]	; 0x68
    2bb0:	asr	r1, r0, #31
    2bb4:	cmp	r6, r0
    2bb8:	sbcs	r3, r7, r1
    2bbc:	bge	3c30 <eval_string+0x15a8>
    2bc0:	ldr	r3, [r5]
    2bc4:	ldrd	r0, [sp, #112]	; 0x70
    2bc8:	add	r3, r3, r6
    2bcc:	str	r3, [r5]
    2bd0:	ldr	r3, [r4]
    2bd4:	sub	r3, r3, r6
    2bd8:	asr	r7, r3, #31
    2bdc:	cmp	r0, r3
    2be0:	sbcs	r2, r1, r7
    2be4:	movlt	r3, r0
    2be8:	str	r3, [r4]
    2bec:	b	2868 <eval_string+0x1e0>
    2bf0:	ldr	r2, [sp, #672]	; 0x2a0
    2bf4:	mov	r3, r4
    2bf8:	str	r2, [sp]
    2bfc:	mov	r2, r5
    2c00:	ldr	r1, [r1, #16]
    2c04:	bl	2688 <eval_string>
    2c08:	cmp	r0, #0
    2c0c:	bne	2ebc <eval_string+0x834>
    2c10:	ldr	r3, [r4]
    2c14:	cmp	r3, #0
    2c18:	ble	2990 <eval_string+0x308>
    2c1c:	ldr	r2, [sp, #672]	; 0x2a0
    2c20:	ldr	r0, [r2]
    2c24:	b	2c38 <eval_string+0x5b0>
    2c28:	sub	r3, r3, #1
    2c2c:	cmp	r3, #0
    2c30:	str	r3, [r4]
    2c34:	beq	2990 <eval_string+0x308>
    2c38:	ldr	r1, [r5]
    2c3c:	add	r2, r0, r3
    2c40:	add	r2, r2, r1
    2c44:	ldrb	r2, [r2, #-1]
    2c48:	sub	r1, r2, #9
    2c4c:	cmp	r2, #32
    2c50:	cmpne	r1, #1
    2c54:	bls	2c28 <eval_string+0x5a0>
    2c58:	cmp	r2, #13
    2c5c:	beq	2c28 <eval_string+0x5a0>
    2c60:	b	2990 <eval_string+0x308>
    2c64:	add	r0, sp, #88	; 0x58
    2c68:	mov	ip, #0
    2c6c:	ldr	r1, [r1, #16]
    2c70:	add	r3, sp, #84	; 0x54
    2c74:	add	r2, sp, #80	; 0x50
    2c78:	str	r0, [sp]
    2c7c:	mov	r0, sl
    2c80:	str	ip, [sp, #88]	; 0x58
    2c84:	bl	2688 <eval_string>
    2c88:	cmp	r0, #0
    2c8c:	bne	2ebc <eval_string+0x834>
    2c90:	add	ip, sp, #76	; 0x4c
    2c94:	add	r3, sp, #72	; 0x48
    2c98:	ldr	r1, [r6, #20]
    2c9c:	add	r2, sp, #68	; 0x44
    2ca0:	mov	r0, sl
    2ca4:	str	ip, [sp]
    2ca8:	bl	2688 <eval_string>
    2cac:	subs	r9, r0, #0
    2cb0:	bne	3c90 <eval_string+0x1608>
    2cb4:	ldr	r0, [sp, #84]	; 0x54
    2cb8:	cmp	r0, #0
    2cbc:	ble	3a50 <eval_string+0x13c8>
    2cc0:	ldr	lr, [sp, #80]	; 0x50
    2cc4:	add	r3, sp, #64	; 0x40
    2cc8:	add	r2, sp, #60	; 0x3c
    2ccc:	mov	r1, #36	; 0x24
    2cd0:	ldr	ip, [sp, #88]	; 0x58
    2cd4:	add	r0, ip, r0
    2cd8:	strb	r9, [r0, lr]
    2cdc:	ldr	r0, [sp, #80]	; 0x50
    2ce0:	str	r9, [sp]
    2ce4:	ldr	ip, [sp, #88]	; 0x58
    2ce8:	add	r0, ip, r0
    2cec:	bl	0 <coda_pcre_compile>
    2cf0:	mov	r7, r0
    2cf4:	ldr	r0, [sp, #88]	; 0x58
    2cf8:	cmp	r0, #0
    2cfc:	beq	2d04 <eval_string+0x67c>
    2d00:	bl	0 <free>
    2d04:	cmp	r7, #0
    2d08:	beq	3d34 <eval_string+0x16ac>
    2d0c:	ldr	r1, [r6, #24]
    2d10:	ldr	r3, [r1, #4]
    2d14:	cmp	r3, #1
    2d18:	add	r3, sp, #112	; 0x70
    2d1c:	beq	3a7c <eval_string+0x13f4>
    2d20:	mov	ip, r3
    2d24:	mov	r0, sl
    2d28:	add	r3, sp, #104	; 0x68
    2d2c:	add	r2, sp, #96	; 0x60
    2d30:	str	ip, [sp]
    2d34:	str	ip, [sp, #16]
    2d38:	bl	2688 <eval_string>
    2d3c:	cmp	r0, #0
    2d40:	bne	3a98 <eval_string+0x1410>
    2d44:	cmp	r4, #0
    2d48:	beq	3d58 <eval_string+0x16d0>
    2d4c:	mov	r0, r7
    2d50:	ldr	r1, [sp, #112]	; 0x70
    2d54:	bl	0 <coda_pcre_get_stringnumber>
    2d58:	subs	r8, r0, #0
    2d5c:	blt	3ccc <eval_string+0x1644>
    2d60:	ldr	r0, [sp, #112]	; 0x70
    2d64:	bl	0 <free>
    2d68:	ldr	r3, [sp, #76]	; 0x4c
    2d6c:	cmp	r3, #0
    2d70:	beq	3ad0 <eval_string+0x1448>
    2d74:	ldr	r1, [sp, #16]
    2d78:	mov	ip, #48	; 0x30
    2d7c:	mov	r6, #0
    2d80:	mov	r0, r7
    2d84:	ldr	r2, [sp, #68]	; 0x44
    2d88:	str	r6, [sp]
    2d8c:	str	r6, [sp, #4]
    2d90:	str	r1, [sp, #8]
    2d94:	mov	r1, r6
    2d98:	str	ip, [sp, #12]
    2d9c:	add	r2, r3, r2
    2da0:	ldr	r3, [sp, #72]	; 0x48
    2da4:	bl	0 <coda_pcre_exec>
    2da8:	movw	r3, #0
    2dac:	movt	r3, #0
    2db0:	mov	sl, r0
    2db4:	mov	r0, r7
    2db8:	ldr	r3, [r3]
    2dbc:	blx	r3
    2dc0:	cmn	sl, #1
    2dc4:	blt	3d00 <eval_string+0x1678>
    2dc8:	cmp	sl, #0
    2dcc:	beq	3ce8 <eval_string+0x1660>
    2dd0:	cmp	r8, sl
    2dd4:	ldr	r0, [sp, #76]	; 0x4c
    2dd8:	bge	3ab0 <eval_string+0x1428>
    2ddc:	add	r3, sp, #632	; 0x278
    2de0:	add	r3, r3, r8, lsl #3
    2de4:	ldr	r2, [r3, #-520]	; 0xfffffdf8
    2de8:	ldr	r3, [r3, #-516]	; 0xfffffdfc
    2dec:	str	r2, [r5]
    2df0:	sub	r3, r3, r2
    2df4:	str	r3, [r4]
    2df8:	ldr	r3, [sp, #672]	; 0x2a0
    2dfc:	str	r0, [r3]
    2e00:	b	2868 <eval_string+0x1e0>
    2e04:	ldr	r3, [r0]
    2e08:	cmp	r3, #0
    2e0c:	beq	3e9c <eval_string+0x1814>
    2e10:	add	r1, sp, #112	; 0x70
    2e14:	ldr	r0, [r3]
    2e18:	bl	0 <coda_get_product_type>
    2e1c:	subs	r9, r0, #0
    2e20:	bne	2ebc <eval_string+0x834>
    2e24:	ldr	r6, [sp, #112]	; 0x70
    2e28:	str	r9, [r5]
    2e2c:	str	r9, [r4]
    2e30:	cmp	r6, #0
    2e34:	beq	2868 <eval_string+0x1e0>
    2e38:	mov	r0, r6
    2e3c:	bl	0 <strlen>
    2e40:	mov	r3, r0
    2e44:	add	r0, r0, #1
    2e48:	str	r3, [r4]
    2e4c:	bl	0 <malloc>
    2e50:	ldr	r2, [sp, #672]	; 0x2a0
    2e54:	cmp	r0, #0
    2e58:	movweq	ip, #3690	; 0xe6a
    2e5c:	str	r0, [r2]
    2e60:	ldreq	r2, [r4]
    2e64:	beq	3c6c <eval_string+0x15e4>
    2e68:	mov	r1, r6
    2e6c:	ldr	r2, [r4]
    2e70:	bl	0 <memcpy>
    2e74:	b	2868 <eval_string+0x1e0>
    2e78:	add	r2, sp, #112	; 0x70
    2e7c:	ldr	r1, [r1, #16]
    2e80:	bl	4b44 <eval_boolean>
    2e84:	subs	r9, r0, #0
    2e88:	bne	2ebc <eval_string+0x834>
    2e8c:	ldr	r3, [sp, #112]	; 0x70
    2e90:	mov	r2, r5
    2e94:	mov	r0, sl
    2e98:	ldr	r1, [sp, #672]	; 0x2a0
    2e9c:	cmp	r3, #0
    2ea0:	mov	r3, r4
    2ea4:	str	r1, [sp]
    2ea8:	beq	388c <eval_string+0x1204>
    2eac:	ldr	r1, [r6, #20]
    2eb0:	bl	2688 <eval_string>
    2eb4:	cmp	r0, #0
    2eb8:	beq	2868 <eval_string+0x1e0>
    2ebc:	mvn	r9, #0
    2ec0:	b	2868 <eval_string+0x1e0>
    2ec4:	ldr	r3, [r0]
    2ec8:	cmp	r3, #0
    2ecc:	beq	3e2c <eval_string+0x17a4>
    2ed0:	add	r1, sp, #112	; 0x70
    2ed4:	ldr	r0, [r3]
    2ed8:	bl	0 <coda_get_product_filename>
    2edc:	subs	r9, r0, #0
    2ee0:	bne	2ebc <eval_string+0x834>
    2ee4:	ldr	r6, [sp, #112]	; 0x70
    2ee8:	ldrb	r3, [r6]
    2eec:	cmp	r3, #0
    2ef0:	beq	2f14 <eval_string+0x88c>
    2ef4:	add	r2, r6, #1
    2ef8:	cmp	r3, #92	; 0x5c
    2efc:	cmpne	r3, #47	; 0x2f
    2f00:	str	r2, [sp, #112]	; 0x70
    2f04:	moveq	r6, r2
    2f08:	ldrb	r3, [r2], #1
    2f0c:	cmp	r3, #0
    2f10:	bne	2ef8 <eval_string+0x870>
    2f14:	mov	r3, #0
    2f18:	mov	r0, r6
    2f1c:	str	r3, [r5]
    2f20:	bl	0 <strlen>
    2f24:	mov	r3, r0
    2f28:	add	r0, r0, #1
    2f2c:	str	r3, [r4]
    2f30:	bl	0 <malloc>
    2f34:	ldr	r2, [sp, #672]	; 0x2a0
    2f38:	cmp	r0, #0
    2f3c:	str	r0, [r2]
    2f40:	movweq	r2, #3469	; 0xd8d
    2f44:	bne	2e68 <eval_string+0x7e0>
    2f48:	b	2fac <eval_string+0x924>
    2f4c:	ldr	r3, [r0]
    2f50:	cmp	r3, #0
    2f54:	beq	3df4 <eval_string+0x176c>
    2f58:	add	r1, sp, #112	; 0x70
    2f5c:	ldr	r0, [r3]
    2f60:	bl	0 <coda_get_product_format>
    2f64:	subs	r9, r0, #0
    2f68:	bne	2ebc <eval_string+0x834>
    2f6c:	ldr	r0, [sp, #112]	; 0x70
    2f70:	bl	0 <coda_type_get_format_name>
    2f74:	subs	r6, r0, #0
    2f78:	str	r9, [r5]
    2f7c:	str	r9, [r4]
    2f80:	beq	2868 <eval_string+0x1e0>
    2f84:	bl	0 <strlen>
    2f88:	mov	r3, r0
    2f8c:	add	r0, r0, #1
    2f90:	str	r3, [r4]
    2f94:	bl	0 <malloc>
    2f98:	ldr	r2, [sp, #672]	; 0x2a0
    2f9c:	cmp	r0, #0
    2fa0:	str	r0, [r2]
    2fa4:	bne	2e68 <eval_string+0x7e0>
    2fa8:	movw	r2, #3665	; 0xe51
    2fac:	movw	r3, #0
    2fb0:	movt	r3, #0
    2fb4:	str	r2, [sp]
    2fb8:	movw	r1, #0
    2fbc:	movt	r1, #0
    2fc0:	ldr	r2, [r4]
    2fc4:	mvn	r0, #0
    2fc8:	bl	0 <coda_set_error>
    2fcc:	b	2ebc <eval_string+0x834>
    2fd0:	ldr	r3, [r0]
    2fd4:	cmp	r3, #0
    2fd8:	beq	3da0 <eval_string+0x1718>
    2fdc:	add	r1, sp, #112	; 0x70
    2fe0:	ldr	r0, [r3]
    2fe4:	bl	0 <coda_get_product_class>
    2fe8:	subs	r9, r0, #0
    2fec:	bne	2ebc <eval_string+0x834>
    2ff0:	ldr	r6, [sp, #112]	; 0x70
    2ff4:	str	r9, [r5]
    2ff8:	str	r9, [r4]
    2ffc:	cmp	r6, #0
    3000:	beq	2868 <eval_string+0x1e0>
    3004:	mov	r0, r6
    3008:	bl	0 <strlen>
    300c:	mov	r3, r0
    3010:	add	r0, r0, #1
    3014:	str	r3, [r4]
    3018:	bl	0 <malloc>
    301c:	ldr	r2, [sp, #672]	; 0x2a0
    3020:	cmp	r0, #0
    3024:	str	r0, [r2]
    3028:	movweq	r2, #3638	; 0xe36
    302c:	bne	2e68 <eval_string+0x7e0>
    3030:	b	2fac <eval_string+0x924>
    3034:	ldr	r3, [r0]
    3038:	cmp	r3, #0
    303c:	beq	3e80 <eval_string+0x17f8>
    3040:	add	r3, sp, #112	; 0x70
    3044:	add	r8, r0, #8
    3048:	mov	r1, r8
    304c:	mov	r0, r3
    3050:	mov	r2, #520	; 0x208
    3054:	str	r3, [sp, #16]
    3058:	bl	0 <memcpy>
    305c:	mov	r0, sl
    3060:	ldr	r1, [r6, #16]
    3064:	bl	7420 <eval_cursor>
    3068:	cmp	r0, #0
    306c:	bne	2ebc <eval_string+0x834>
    3070:	add	r1, sp, #84	; 0x54
    3074:	mov	r0, r8
    3078:	bl	0 <coda_cursor_get_num_elements>
    307c:	subs	r9, r0, #0
    3080:	bne	2ebc <eval_string+0x834>
    3084:	ldr	r3, [sp, #84]	; 0x54
    3088:	str	r9, [r5]
    308c:	ldr	r2, [sp, #672]	; 0x2a0
    3090:	str	r9, [r4]
    3094:	cmp	r3, #0
    3098:	str	r9, [r2]
    309c:	ble	2b14 <eval_string+0x48c>
    30a0:	mov	r0, r8
    30a4:	bl	0 <coda_cursor_goto_first_array_element>
    30a8:	subs	fp, r0, #0
    30ac:	bne	2ebc <eval_string+0x834>
    30b0:	ldr	r3, [sp, #84]	; 0x54
    30b4:	cmp	r3, #0
    30b8:	ble	2b14 <eval_string+0x48c>
    30bc:	add	r3, sp, #104	; 0x68
    30c0:	str	r3, [sp, #28]
    30c4:	add	r3, sp, #88	; 0x58
    30c8:	str	sl, [sp, #40]	; 0x28
    30cc:	str	r3, [sp, #32]
    30d0:	add	r3, sp, #96	; 0x60
    30d4:	str	r6, [sp, #44]	; 0x2c
    30d8:	str	r3, [sp, #36]	; 0x24
    30dc:	strd	r8, [sp, #48]	; 0x30
    30e0:	ldr	r6, [sp, #672]	; 0x2a0
    30e4:	b	3114 <eval_string+0xa8c>
    30e8:	cmp	r7, #0
    30ec:	ble	30f8 <eval_string+0xa70>
    30f0:	mov	r0, r8
    30f4:	bl	0 <free>
    30f8:	ldr	r3, [sp, #84]	; 0x54
    30fc:	sub	r2, r3, #1
    3100:	cmp	r2, fp
    3104:	bgt	3874 <eval_string+0x11ec>
    3108:	add	fp, fp, #1
    310c:	cmp	fp, r3
    3110:	bge	3ac8 <eval_string+0x1440>
    3114:	add	r1, sp, #28
    3118:	ldr	r0, [sp, #40]	; 0x28
    311c:	ldm	r1, {r1, r2, r3}
    3120:	str	r1, [sp]
    3124:	ldr	r1, [sp, #44]	; 0x2c
    3128:	ldr	r1, [r1, #20]
    312c:	bl	2688 <eval_string>
    3130:	cmp	r0, #0
    3134:	bne	2ebc <eval_string+0x834>
    3138:	ldr	ip, [r6]
    313c:	ldr	sl, [r4]
    3140:	ldr	r9, [sp, #88]	; 0x58
    3144:	ldr	r7, [sp, #96]	; 0x60
    3148:	ldr	r8, [sp, #104]	; 0x68
    314c:	mov	r0, r9
    3150:	ldr	r3, [r5]
    3154:	mov	r1, r7
    3158:	stm	sp, {sl, ip}
    315c:	mov	r2, r8
    3160:	bl	0 <compare_strings>
    3164:	cmp	r0, #0
    3168:	bge	30e8 <eval_string+0xa60>
    316c:	cmp	sl, #0
    3170:	ble	317c <eval_string+0xaf4>
    3174:	mov	r0, r6
    3178:	bl	0 <free>
    317c:	str	r9, [r5]
    3180:	str	r7, [r4]
    3184:	str	r8, [r6]
    3188:	b	30f8 <eval_string+0xa70>
    318c:	add	ip, sp, #104	; 0x68
    3190:	add	r3, sp, #88	; 0x58
    3194:	ldr	r1, [r1, #16]
    3198:	add	r2, sp, #80	; 0x50
    319c:	str	ip, [sp]
    31a0:	bl	2688 <eval_string>
    31a4:	cmp	r0, #0
    31a8:	bne	2ebc <eval_string+0x834>
    31ac:	add	ip, sp, #112	; 0x70
    31b0:	mov	r0, sl
    31b4:	ldr	r1, [r6, #20]
    31b8:	add	r3, sp, #96	; 0x60
    31bc:	add	r2, sp, #84	; 0x54
    31c0:	str	ip, [sp]
    31c4:	bl	2688 <eval_string>
    31c8:	subs	r9, r0, #0
    31cc:	bne	3c24 <eval_string+0x159c>
    31d0:	ldr	sl, [sp, #80]	; 0x50
    31d4:	ldr	r3, [sp, #84]	; 0x54
    31d8:	ldr	r7, [sp, #88]	; 0x58
    31dc:	mov	r0, sl
    31e0:	ldr	r6, [sp, #96]	; 0x60
    31e4:	str	r3, [sp, #16]
    31e8:	ldr	r8, [sp, #104]	; 0x68
    31ec:	mov	r1, r7
    31f0:	ldr	fp, [sp, #112]	; 0x70
    31f4:	mov	r2, r8
    31f8:	stm	sp, {r6, fp}
    31fc:	bl	0 <compare_strings>
    3200:	cmp	r0, #0
    3204:	blt	3a30 <eval_string+0x13a8>
    3208:	ldr	r3, [sp, #672]	; 0x2a0
    320c:	cmp	r6, #0
    3210:	str	sl, [r5]
    3214:	str	r7, [r4]
    3218:	str	r8, [r3]
    321c:	ble	2868 <eval_string+0x1e0>
    3220:	mov	r0, fp
    3224:	bl	0 <free>
    3228:	b	2868 <eval_string+0x1e0>
    322c:	ldr	r2, [sp, #672]	; 0x2a0
    3230:	mov	r3, r4
    3234:	str	r2, [sp]
    3238:	mov	r2, r5
    323c:	ldr	r1, [r1, #16]
    3240:	bl	2688 <eval_string>
    3244:	cmp	r0, #0
    3248:	bne	2ebc <eval_string+0x834>
    324c:	ldr	r3, [r4]
    3250:	cmp	r3, #0
    3254:	ble	2990 <eval_string+0x308>
    3258:	ldr	r2, [sp, #672]	; 0x2a0
    325c:	ldr	r0, [r2]
    3260:	ldr	r2, [r5]
    3264:	b	3288 <eval_string+0xc00>
    3268:	sub	r3, r3, #1
    326c:	str	r3, [r4]
    3270:	ldr	r2, [r5]
    3274:	add	r2, r2, #1
    3278:	str	r2, [r5]
    327c:	ldr	r3, [r4]
    3280:	cmp	r3, #0
    3284:	ble	2990 <eval_string+0x308>
    3288:	ldrb	r2, [r0, r2]
    328c:	sub	r1, r2, #9
    3290:	cmp	r2, #32
    3294:	cmpne	r1, #1
    3298:	bls	3268 <eval_string+0xbe0>
    329c:	cmp	r2, #13
    32a0:	beq	3268 <eval_string+0xbe0>
    32a4:	b	2990 <eval_string+0x308>
    32a8:	ldr	r3, [sl]
    32ac:	mov	r7, #0
    32b0:	add	r2, sp, #88	; 0x58
    32b4:	add	ip, sp, #104	; 0x68
    32b8:	mvn	r0, #0
    32bc:	mvn	r1, #0
    32c0:	str	ip, [sp, #28]
    32c4:	str	r2, [sp, #32]
    32c8:	cmp	r3, r7
    32cc:	str	r7, [sp, #88]	; 0x58
    32d0:	str	r7, [sp, #92]	; 0x5c
    32d4:	strd	r0, [sp, #104]	; 0x68
    32d8:	beq	3e48 <eval_string+0x17c0>
    32dc:	add	r3, sp, #112	; 0x70
    32e0:	add	r8, sl, #8
    32e4:	mov	r0, r3
    32e8:	mov	r1, r8
    32ec:	mov	r2, #520	; 0x208
    32f0:	str	r3, [sp, #16]
    32f4:	bl	0 <memcpy>
    32f8:	mov	r0, sl
    32fc:	ldr	r1, [r6, #16]
    3300:	bl	7420 <eval_cursor>
    3304:	subs	r9, r0, #0
    3308:	bne	2ebc <eval_string+0x834>
    330c:	ldr	r1, [r6, #20]
    3310:	ldr	r3, [r6, #24]
    3314:	cmp	r3, #0
    3318:	beq	390c <eval_string+0x1284>
    331c:	mov	r0, sl
    3320:	ldr	r2, [sp, #32]
    3324:	bl	5d94 <eval_integer>
    3328:	cmp	r0, #0
    332c:	bne	2ebc <eval_string+0x834>
    3330:	mov	r0, sl
    3334:	add	r2, sp, #96	; 0x60
    3338:	ldr	r1, [r6, #24]
    333c:	bl	5d94 <eval_integer>
    3340:	cmp	r0, #0
    3344:	bne	2ebc <eval_string+0x834>
    3348:	ldr	r1, [sp, #28]
    334c:	ldrd	r2, [r1, #-8]
    3350:	cmp	r2, #1
    3354:	sbcs	r0, r3, #0
    3358:	blt	3a74 <eval_string+0x13ec>
    335c:	lsl	fp, r3, #3
    3360:	ldr	r3, [sp, #28]
    3364:	lsl	sl, r2, #3
    3368:	orr	fp, fp, r2, lsr #29
    336c:	strd	sl, [r3]
    3370:	cmp	sl, #0
    3374:	sbcs	r3, fp, #0
    3378:	blt	3d20 <eval_string+0x1698>
    337c:	lsr	r0, sl, #3
    3380:	and	r3, sl, #7
    3384:	mov	r2, #0
    3388:	adds	r3, r3, #0
    338c:	asr	r1, fp, #3
    3390:	orr	r0, r0, fp, lsl #29
    3394:	movne	r3, #1
    3398:	str	r2, [r5]
    339c:	adds	r6, r0, r3
    33a0:	adc	r7, r1, #0
    33a4:	orrs	r3, r6, r7
    33a8:	ldr	r3, [sp, #28]
    33ac:	str	r6, [r4]
    33b0:	strd	r6, [r3, #-8]
    33b4:	bne	39d8 <eval_string+0x1350>
    33b8:	ldr	r3, [sp, #672]	; 0x2a0
    33bc:	str	r2, [r3]
    33c0:	b	2b14 <eval_string+0x48c>
    33c4:	ldr	r3, [r0]
    33c8:	cmp	r3, #0
    33cc:	beq	3e64 <eval_string+0x17dc>
    33d0:	add	r7, r0, #8
    33d4:	mov	r2, #520	; 0x208
    33d8:	mov	r1, r7
    33dc:	add	r0, sp, #112	; 0x70
    33e0:	bl	0 <memcpy>
    33e4:	mov	r0, sl
    33e8:	ldr	r1, [r6, #16]
    33ec:	bl	7420 <eval_cursor>
    33f0:	cmp	r0, #0
    33f4:	bne	2ebc <eval_string+0x834>
    33f8:	ldr	r1, [sp, #672]	; 0x2a0
    33fc:	mov	r3, r4
    3400:	mov	r2, r5
    3404:	mov	r0, sl
    3408:	str	r1, [sp]
    340c:	ldr	r1, [r6, #20]
    3410:	bl	2688 <eval_string>
    3414:	subs	r9, r0, #0
    3418:	bne	2ebc <eval_string+0x834>
    341c:	add	r1, sp, #112	; 0x70
    3420:	mov	r0, r7
    3424:	mov	r2, #520	; 0x208
    3428:	bl	0 <memcpy>
    342c:	b	2868 <eval_string+0x1e0>
    3430:	ldr	r3, [r0]
    3434:	cmp	r3, #0
    3438:	beq	3dd8 <eval_string+0x1750>
    343c:	add	r3, sp, #112	; 0x70
    3440:	add	r8, r0, #8
    3444:	mov	r1, r8
    3448:	mov	r0, r3
    344c:	mov	r2, #520	; 0x208
    3450:	str	r3, [sp, #16]
    3454:	bl	0 <memcpy>
    3458:	mov	r0, sl
    345c:	ldr	r1, [r6, #16]
    3460:	bl	7420 <eval_cursor>
    3464:	cmp	r0, #0
    3468:	bne	2ebc <eval_string+0x834>
    346c:	add	r1, sp, #84	; 0x54
    3470:	mov	r0, r8
    3474:	bl	0 <coda_cursor_get_num_elements>
    3478:	subs	r9, r0, #0
    347c:	bne	2ebc <eval_string+0x834>
    3480:	ldr	r3, [sp, #84]	; 0x54
    3484:	str	r9, [r5]
    3488:	ldr	r2, [sp, #672]	; 0x2a0
    348c:	str	r9, [r4]
    3490:	cmp	r3, #0
    3494:	str	r9, [r2]
    3498:	ble	2b14 <eval_string+0x48c>
    349c:	mov	r0, r8
    34a0:	bl	0 <coda_cursor_goto_first_array_element>
    34a4:	subs	r5, r0, #0
    34a8:	bne	2ebc <eval_string+0x834>
    34ac:	ldr	r3, [sp, #84]	; 0x54
    34b0:	cmp	r3, #0
    34b4:	ble	2b14 <eval_string+0x48c>
    34b8:	add	r3, sp, #96	; 0x60
    34bc:	add	fp, sp, #104	; 0x68
    34c0:	strd	r8, [sp, #28]
    34c4:	add	r7, sp, #88	; 0x58
    34c8:	mov	r9, r3
    34cc:	b	34ec <eval_string+0xe64>
    34d0:	ldr	r3, [sp, #84]	; 0x54
    34d4:	sub	r2, r3, #1
    34d8:	cmp	r2, r5
    34dc:	bgt	3844 <eval_string+0x11bc>
    34e0:	add	r5, r5, #1
    34e4:	cmp	r5, r3
    34e8:	bge	3b88 <eval_string+0x1500>
    34ec:	mov	r3, r9
    34f0:	mov	r2, r7
    34f4:	str	fp, [sp]
    34f8:	mov	r0, sl
    34fc:	ldr	r1, [r6, #20]
    3500:	bl	2688 <eval_string>
    3504:	cmp	r0, #0
    3508:	bne	2ebc <eval_string+0x834>
    350c:	ldr	r1, [sp, #96]	; 0x60
    3510:	cmp	r1, #0
    3514:	ble	34d0 <eval_string+0xe48>
    3518:	ldr	r3, [r4]
    351c:	ldr	r2, [sp, #672]	; 0x2a0
    3520:	add	r1, r1, r3
    3524:	add	r1, r1, #1
    3528:	ldr	r0, [r2]
    352c:	bl	0 <realloc>
    3530:	subs	r8, r0, #0
    3534:	beq	3be0 <eval_string+0x1558>
    3538:	ldr	r0, [r4]
    353c:	ldr	r1, [sp, #88]	; 0x58
    3540:	ldr	r2, [sp, #96]	; 0x60
    3544:	add	r0, r8, r0
    3548:	ldr	ip, [sp, #104]	; 0x68
    354c:	add	r1, ip, r1
    3550:	bl	0 <memcpy>
    3554:	ldr	r0, [sp, #104]	; 0x68
    3558:	bl	0 <free>
    355c:	ldr	r2, [r4]
    3560:	ldr	r1, [sp, #96]	; 0x60
    3564:	ldr	r3, [sp, #672]	; 0x2a0
    3568:	add	r2, r2, r1
    356c:	str	r2, [r4]
    3570:	str	r8, [r3]
    3574:	b	34d0 <eval_string+0xe48>
    3578:	ldr	r3, [r0]
    357c:	cmp	r3, #0
    3580:	beq	3dbc <eval_string+0x1734>
    3584:	add	r3, sp, #112	; 0x70
    3588:	add	r8, r0, #8
    358c:	mov	r1, r8
    3590:	mov	r0, r3
    3594:	mov	r2, #520	; 0x208
    3598:	str	r3, [sp, #16]
    359c:	bl	0 <memcpy>
    35a0:	mov	r0, sl
    35a4:	ldr	r1, [r6, #16]
    35a8:	bl	7420 <eval_cursor>
    35ac:	cmp	r0, #0
    35b0:	bne	2ebc <eval_string+0x834>
    35b4:	add	r1, sp, #84	; 0x54
    35b8:	mov	r0, r8
    35bc:	bl	0 <coda_cursor_get_num_elements>
    35c0:	subs	r9, r0, #0
    35c4:	bne	2ebc <eval_string+0x834>
    35c8:	ldr	r3, [sp, #84]	; 0x54
    35cc:	str	r9, [r5]
    35d0:	ldr	r2, [sp, #672]	; 0x2a0
    35d4:	str	r9, [r4]
    35d8:	cmp	r3, #0
    35dc:	str	r9, [r2]
    35e0:	ble	2b14 <eval_string+0x48c>
    35e4:	mov	r0, r8
    35e8:	bl	0 <coda_cursor_goto_first_array_element>
    35ec:	subs	fp, r0, #0
    35f0:	bne	2ebc <eval_string+0x834>
    35f4:	ldr	r3, [sp, #84]	; 0x54
    35f8:	cmp	r3, #0
    35fc:	ble	2b14 <eval_string+0x48c>
    3600:	add	r3, sp, #104	; 0x68
    3604:	str	r3, [sp, #28]
    3608:	add	r3, sp, #88	; 0x58
    360c:	str	sl, [sp, #40]	; 0x28
    3610:	str	r3, [sp, #32]
    3614:	add	r3, sp, #96	; 0x60
    3618:	str	r6, [sp, #44]	; 0x2c
    361c:	str	r3, [sp, #36]	; 0x24
    3620:	strd	r8, [sp, #48]	; 0x30
    3624:	b	3670 <eval_string+0xfe8>
    3628:	cmp	r9, #0
    362c:	ble	3644 <eval_string+0xfbc>
    3630:	mov	r0, sl
    3634:	bl	0 <free>
    3638:	ldr	r8, [sp, #88]	; 0x58
    363c:	ldr	r6, [sp, #96]	; 0x60
    3640:	ldr	r7, [sp, #104]	; 0x68
    3644:	str	r8, [r5]
    3648:	ldr	r3, [sp, #672]	; 0x2a0
    364c:	str	r6, [r4]
    3650:	str	r7, [r3]
    3654:	ldr	r3, [sp, #84]	; 0x54
    3658:	sub	r2, r3, #1
    365c:	cmp	r2, fp
    3660:	bgt	385c <eval_string+0x11d4>
    3664:	add	fp, fp, #1
    3668:	cmp	fp, r3
    366c:	bge	3ac8 <eval_string+0x1440>
    3670:	add	r1, sp, #28
    3674:	ldr	r0, [sp, #40]	; 0x28
    3678:	ldm	r1, {r1, r2, r3}
    367c:	str	r1, [sp]
    3680:	ldr	r1, [sp, #44]	; 0x2c
    3684:	ldr	r1, [r1, #20]
    3688:	bl	2688 <eval_string>
    368c:	cmp	r0, #0
    3690:	bne	2ebc <eval_string+0x834>
    3694:	ldr	r9, [r4]
    3698:	ldr	r3, [sp, #672]	; 0x2a0
    369c:	ldr	r8, [sp, #88]	; 0x58
    36a0:	ldr	r6, [sp, #96]	; 0x60
    36a4:	ldr	sl, [r3]
    36a8:	mov	r0, r8
    36ac:	ldr	r7, [sp, #104]	; 0x68
    36b0:	mov	r1, r6
    36b4:	ldr	r3, [r5]
    36b8:	stm	sp, {r9, sl}
    36bc:	mov	r2, r7
    36c0:	bl	0 <compare_strings>
    36c4:	cmp	r0, #0
    36c8:	bgt	3628 <eval_string+0xfa0>
    36cc:	cmp	r6, #0
    36d0:	ble	3654 <eval_string+0xfcc>
    36d4:	mov	r0, r7
    36d8:	bl	0 <free>
    36dc:	b	3654 <eval_string+0xfcc>
    36e0:	add	ip, sp, #104	; 0x68
    36e4:	add	r3, sp, #88	; 0x58
    36e8:	ldr	r1, [r1, #16]
    36ec:	add	r2, sp, #80	; 0x50
    36f0:	str	ip, [sp]
    36f4:	bl	2688 <eval_string>
    36f8:	cmp	r0, #0
    36fc:	bne	2ebc <eval_string+0x834>
    3700:	add	ip, sp, #112	; 0x70
    3704:	mov	r0, sl
    3708:	ldr	r1, [r6, #20]
    370c:	add	r3, sp, #96	; 0x60
    3710:	add	r2, sp, #84	; 0x54
    3714:	str	ip, [sp]
    3718:	bl	2688 <eval_string>
    371c:	subs	r9, r0, #0
    3720:	bne	3c24 <eval_string+0x159c>
    3724:	ldr	r3, [sp, #88]	; 0x58
    3728:	str	r9, [r5]
    372c:	ldr	r0, [sp, #96]	; 0x60
    3730:	add	r0, r3, r0
    3734:	cmp	r0, #0
    3738:	str	r0, [r4]
    373c:	bgt	3958 <eval_string+0x12d0>
    3740:	ldr	r2, [sp, #672]	; 0x2a0
    3744:	str	r9, [r2]
    3748:	cmp	r3, #0
    374c:	bgt	394c <eval_string+0x12c4>
    3750:	ldr	r3, [sp, #96]	; 0x60
    3754:	cmp	r3, #0
    3758:	ble	2868 <eval_string+0x1e0>
    375c:	ldr	r0, [sp, #112]	; 0x70
    3760:	bl	0 <free>
    3764:	b	2868 <eval_string+0x1e0>
    3768:	add	ip, sp, #104	; 0x68
    376c:	add	r3, sp, #88	; 0x58
    3770:	ldr	r1, [r1, #16]
    3774:	add	r2, sp, #80	; 0x50
    3778:	str	ip, [sp]
    377c:	bl	2688 <eval_string>
    3780:	cmp	r0, #0
    3784:	bne	2ebc <eval_string+0x834>
    3788:	add	ip, sp, #112	; 0x70
    378c:	mov	r0, sl
    3790:	ldr	r1, [r6, #20]
    3794:	add	r3, sp, #96	; 0x60
    3798:	add	r2, sp, #84	; 0x54
    379c:	str	ip, [sp]
    37a0:	bl	2688 <eval_string>
    37a4:	subs	r9, r0, #0
    37a8:	bne	3c24 <eval_string+0x159c>
    37ac:	ldr	r3, [sp, #80]	; 0x50
    37b0:	ldr	sl, [sp, #84]	; 0x54
    37b4:	ldr	r7, [sp, #88]	; 0x58
    37b8:	mov	r0, r3
    37bc:	str	r3, [sp, #16]
    37c0:	ldr	r6, [sp, #96]	; 0x60
    37c4:	mov	r3, sl
    37c8:	ldr	fp, [sp, #104]	; 0x68
    37cc:	mov	r1, r7
    37d0:	ldr	r8, [sp, #112]	; 0x70
    37d4:	mov	r2, fp
    37d8:	stm	sp, {r6, r8}
    37dc:	bl	0 <compare_strings>
    37e0:	cmp	r0, #0
    37e4:	ble	39b0 <eval_string+0x1328>
    37e8:	ldr	r3, [sp, #672]	; 0x2a0
    37ec:	cmp	r7, #0
    37f0:	str	sl, [r5]
    37f4:	str	r6, [r4]
    37f8:	str	r8, [r3]
    37fc:	ble	2868 <eval_string+0x1e0>
    3800:	b	3220 <eval_string+0xb98>
    3804:	movw	r1, #0
    3808:	movt	r1, #0
    380c:	ldr	r3, [pc, #1732]	; 3ed8 <eval_string+0x1850>
    3810:	movw	r0, #0
    3814:	movt	r0, #0
    3818:	movw	r2, #3794	; 0xed2
    381c:	bl	0 <__assert_fail>
    3820:	sub	r1, r1, #1
    3824:	str	r1, [r4]
    3828:	ldr	r3, [r5]
    382c:	add	r3, r3, #1
    3830:	str	r3, [r5]
    3834:	ldr	r1, [r4]
    3838:	cmp	r1, #0
    383c:	bgt	2930 <eval_string+0x2a8>
    3840:	b	2990 <eval_string+0x308>
    3844:	ldr	r0, [sp, #28]
    3848:	bl	0 <coda_cursor_goto_next_array_element>
    384c:	cmp	r0, #0
    3850:	bne	2ebc <eval_string+0x834>
    3854:	ldr	r3, [sp, #84]	; 0x54
    3858:	b	34e0 <eval_string+0xe58>
    385c:	ldr	r0, [sp, #48]	; 0x30
    3860:	bl	0 <coda_cursor_goto_next_array_element>
    3864:	cmp	r0, #0
    3868:	bne	2ebc <eval_string+0x834>
    386c:	ldr	r3, [sp, #84]	; 0x54
    3870:	b	3664 <eval_string+0xfdc>
    3874:	ldr	r0, [sp, #48]	; 0x30
    3878:	bl	0 <coda_cursor_goto_next_array_element>
    387c:	cmp	r0, #0
    3880:	bne	2ebc <eval_string+0x834>
    3884:	ldr	r3, [sp, #84]	; 0x54
    3888:	b	3108 <eval_string+0xa80>
    388c:	ldr	r1, [r6, #24]
    3890:	bl	2688 <eval_string>
    3894:	cmp	r0, #0
    3898:	beq	2868 <eval_string+0x1e0>
    389c:	b	2ebc <eval_string+0x834>
    38a0:	mov	r1, r7
    38a4:	add	r2, sp, #104	; 0x68
    38a8:	bl	5d94 <eval_integer>
    38ac:	subs	r9, r0, #0
    38b0:	bne	2ebc <eval_string+0x834>
    38b4:	add	r2, sp, #112	; 0x70
    38b8:	ldrd	r0, [sp, #104]	; 0x68
    38bc:	bl	0 <coda_str64>
    38c0:	add	r0, sp, #112	; 0x70
    38c4:	bl	0 <strdup>
    38c8:	ldr	r3, [sp, #672]	; 0x2a0
    38cc:	cmp	r0, #0
    38d0:	str	r0, [r3]
    38d4:	beq	3eb8 <eval_string+0x1830>
    38d8:	add	r0, sp, #112	; 0x70
    38dc:	str	r9, [r5]
    38e0:	bl	0 <strlen>
    38e4:	str	r0, [r4]
    38e8:	b	2868 <eval_string+0x1e0>
    38ec:	movw	r3, #0
    38f0:	movt	r3, #0
    38f4:	str	r1, [sp, #88]	; 0x58
    38f8:	mov	r2, #28
    38fc:	mov	r0, #29
    3900:	str	r2, [sp, #96]	; 0x60
    3904:	str	r3, [sp, #104]	; 0x68
    3908:	b	2a00 <eval_string+0x378>
    390c:	cmp	r1, #0
    3910:	beq	3b68 <eval_string+0x14e0>
    3914:	mov	r0, sl
    3918:	add	r2, sp, #96	; 0x60
    391c:	bl	5d94 <eval_integer>
    3920:	cmp	r0, #0
    3924:	beq	3348 <eval_string+0xcc0>
    3928:	b	2ebc <eval_string+0x834>
    392c:	ldr	r3, [sp, #80]	; 0x50
    3930:	mov	r2, r4
    3934:	ldr	r1, [sp, #104]	; 0x68
    3938:	add	r1, r1, r3
    393c:	bl	0 <memcpy>
    3940:	ldr	r2, [sp, #96]	; 0x60
    3944:	cmp	r2, #0
    3948:	bgt	3994 <eval_string+0x130c>
    394c:	ldr	r0, [sp, #104]	; 0x68
    3950:	bl	0 <free>
    3954:	b	3750 <eval_string+0x10c8>
    3958:	add	r0, r0, #1
    395c:	bl	0 <malloc>
    3960:	ldr	r3, [sp, #672]	; 0x2a0
    3964:	cmp	r0, #0
    3968:	mov	r5, r0
    396c:	movweq	ip, #3031	; 0xbd7
    3970:	ldreq	r2, [r4]
    3974:	str	r0, [r3]
    3978:	beq	3c6c <eval_string+0x15e4>
    397c:	ldr	r4, [sp, #88]	; 0x58
    3980:	cmp	r4, #0
    3984:	bgt	392c <eval_string+0x12a4>
    3988:	ldr	r2, [sp, #96]	; 0x60
    398c:	cmp	r2, #0
    3990:	ble	2868 <eval_string+0x1e0>
    3994:	ldr	r3, [sp, #84]	; 0x54
    3998:	add	r0, r5, r4
    399c:	ldr	r1, [sp, #112]	; 0x70
    39a0:	add	r1, r1, r3
    39a4:	bl	0 <memcpy>
    39a8:	ldr	r3, [sp, #88]	; 0x58
    39ac:	b	3748 <eval_string+0x10c0>
    39b0:	ldr	r3, [sp, #16]
    39b4:	cmp	r6, #0
    39b8:	str	r3, [r5]
    39bc:	ldr	r3, [sp, #672]	; 0x2a0
    39c0:	str	r7, [r4]
    39c4:	str	fp, [r3]
    39c8:	ble	2868 <eval_string+0x1e0>
    39cc:	mov	r0, r8
    39d0:	bl	0 <free>
    39d4:	b	2868 <eval_string+0x1e0>
    39d8:	add	r0, r6, #1
    39dc:	bl	0 <malloc>
    39e0:	ldr	r3, [sp, #672]	; 0x2a0
    39e4:	cmp	r0, #0
    39e8:	mov	r1, r0
    39ec:	str	r0, [r3]
    39f0:	beq	3d78 <eval_string+0x16f0>
    39f4:	ldr	r3, [sp, #32]
    39f8:	mov	r0, r8
    39fc:	ldr	r2, [sp, #88]	; 0x58
    3a00:	ldr	r3, [r3, #4]
    3a04:	strd	sl, [sp]
    3a08:	lsl	r3, r3, #3
    3a0c:	orr	r3, r3, r2, lsr #29
    3a10:	lsl	r2, r2, #3
    3a14:	bl	0 <coda_cursor_read_bits>
    3a18:	cmp	r0, #0
    3a1c:	beq	2b14 <eval_string+0x48c>
    3a20:	ldr	r3, [sp, #672]	; 0x2a0
    3a24:	ldr	r0, [r3]
    3a28:	bl	0 <free>
    3a2c:	b	2ebc <eval_string+0x834>
    3a30:	ldr	r3, [sp, #16]
    3a34:	cmp	r7, #0
    3a38:	str	r3, [r5]
    3a3c:	ldr	r3, [sp, #672]	; 0x2a0
    3a40:	str	r6, [r4]
    3a44:	str	fp, [r3]
    3a48:	ble	2868 <eval_string+0x1e0>
    3a4c:	b	39cc <eval_string+0x1344>
    3a50:	movw	r0, #0
    3a54:	movt	r0, #0
    3a58:	str	r9, [sp]
    3a5c:	add	r3, sp, #64	; 0x40
    3a60:	add	r2, sp, #60	; 0x3c
    3a64:	mov	r1, #36	; 0x24
    3a68:	bl	0 <coda_pcre_compile>
    3a6c:	mov	r7, r0
    3a70:	b	2cf4 <eval_string+0x66c>
    3a74:	ldrd	sl, [r1]
    3a78:	b	3370 <eval_string+0xce8>
    3a7c:	mov	r0, sl
    3a80:	mov	r2, r3
    3a84:	str	r3, [sp, #16]
    3a88:	bl	5d94 <eval_integer>
    3a8c:	cmp	r0, #0
    3a90:	ldreq	r8, [sp, #112]	; 0x70
    3a94:	beq	2d68 <eval_string+0x6e0>
    3a98:	movw	r3, #0
    3a9c:	movt	r3, #0
    3aa0:	mov	r0, r7
    3aa4:	ldr	r3, [r3]
    3aa8:	blx	r3
    3aac:	b	2ebc <eval_string+0x834>
    3ab0:	ldr	r3, [sp, #672]	; 0x2a0
    3ab4:	str	r6, [r5]
    3ab8:	str	r6, [r4]
    3abc:	str	r6, [r3]
    3ac0:	bl	0 <free>
    3ac4:	b	2868 <eval_string+0x1e0>
    3ac8:	ldrd	r8, [sp, #48]	; 0x30
    3acc:	b	2b14 <eval_string+0x48c>
    3ad0:	movw	r0, #0
    3ad4:	movt	r0, #0
    3ad8:	bl	0 <strdup>
    3adc:	cmp	r0, #0
    3ae0:	mov	r3, r0
    3ae4:	str	r0, [sp, #76]	; 0x4c
    3ae8:	bne	2d74 <eval_string+0x6ec>
    3aec:	movw	r2, #0
    3af0:	movt	r2, #0
    3af4:	movw	r1, #0
    3af8:	movt	r1, #0
    3afc:	movw	r3, #3583	; 0xdff
    3b00:	mvn	r0, #0
    3b04:	bl	0 <coda_set_error>
    3b08:	b	3a98 <eval_string+0x1410>
    3b0c:	ldr	r0, [r4]
    3b10:	b	2b00 <eval_string+0x478>
    3b14:	add	r0, r0, #1
    3b18:	bl	0 <malloc>
    3b1c:	ldr	r3, [sp, #672]	; 0x2a0
    3b20:	cmp	r0, #0
    3b24:	mov	r1, r0
    3b28:	movweq	r2, #2895	; 0xb4f
    3b2c:	str	r0, [r3]
    3b30:	beq	2fac <eval_string+0x924>
    3b34:	ldr	r2, [r4]
    3b38:	mov	r0, r8
    3b3c:	add	r2, r2, #1
    3b40:	bl	0 <coda_cursor_read_string>
    3b44:	cmp	r0, #0
    3b48:	beq	2b14 <eval_string+0x48c>
    3b4c:	b	3a20 <eval_string+0x1398>
    3b50:	movw	r1, #0
    3b54:	movt	r1, #0
    3b58:	mvn	r0, #400	; 0x190
    3b5c:	mvn	r9, #0
    3b60:	bl	0 <coda_set_error>
    3b64:	b	2868 <eval_string+0x1e0>
    3b68:	ldr	r6, [sp, #28]
    3b6c:	mov	r0, r8
    3b70:	mov	r1, r6
    3b74:	bl	0 <coda_cursor_get_bit_size>
    3b78:	cmp	r0, #0
    3b7c:	bne	2ebc <eval_string+0x834>
    3b80:	ldrd	sl, [r6]
    3b84:	b	3370 <eval_string+0xce8>
    3b88:	ldrd	r8, [sp, #28]
    3b8c:	b	2b14 <eval_string+0x48c>
    3b90:	ldr	r3, [sp, #672]	; 0x2a0
    3b94:	str	r9, [r5]
    3b98:	str	r9, [r4]
    3b9c:	str	r9, [r3]
    3ba0:	b	2868 <eval_string+0x1e0>
    3ba4:	movw	r2, #0
    3ba8:	movt	r2, #0
    3bac:	movw	r1, #0
    3bb0:	movt	r1, #0
    3bb4:	movw	r3, #2845	; 0xb1d
    3bb8:	mvn	r0, #0
    3bbc:	bl	0 <coda_set_error>
    3bc0:	mvn	r9, #0
    3bc4:	b	2868 <eval_string+0x1e0>
    3bc8:	movw	r1, #0
    3bcc:	movt	r1, #0
    3bd0:	mvn	r0, #400	; 0x190
    3bd4:	mvn	r9, #0
    3bd8:	bl	0 <coda_set_error>
    3bdc:	b	2868 <eval_string+0x1e0>
    3be0:	ldr	ip, [r4]
    3be4:	movw	lr, #3275	; 0xccb
    3be8:	mvn	r0, #0
    3bec:	movw	r3, #0
    3bf0:	movt	r3, #0
    3bf4:	ldr	r2, [sp, #96]	; 0x60
    3bf8:	movw	r1, #0
    3bfc:	movt	r1, #0
    3c00:	str	lr, [sp]
    3c04:	add	r2, ip, r2
    3c08:	bl	0 <coda_set_error>
    3c0c:	ldr	r0, [sp, #104]	; 0x68
    3c10:	bl	0 <free>
    3c14:	b	2ebc <eval_string+0x834>
    3c18:	ldr	r3, [r6, #20]
    3c1c:	cmp	r3, #0
    3c20:	beq	2ebc <eval_string+0x834>
    3c24:	ldr	r0, [sp, #104]	; 0x68
    3c28:	bl	0 <free>
    3c2c:	b	2ebc <eval_string+0x834>
    3c30:	ldr	r3, [sp, #672]	; 0x2a0
    3c34:	ldr	r0, [r3]
    3c38:	str	r9, [r5]
    3c3c:	str	r9, [r4]
    3c40:	bl	0 <free>
    3c44:	ldr	r3, [sp, #672]	; 0x2a0
    3c48:	str	r9, [r3]
    3c4c:	b	2868 <eval_string+0x1e0>
    3c50:	ldr	r3, [r6, #20]
    3c54:	cmp	r3, #0
    3c58:	beq	3c64 <eval_string+0x15dc>
    3c5c:	ldr	r0, [sp, #104]	; 0x68
    3c60:	bl	0 <free>
    3c64:	ldr	r2, [r4]
    3c68:	movw	ip, #3740	; 0xe9c
    3c6c:	movw	r3, #0
    3c70:	movt	r3, #0
    3c74:	str	ip, [sp]
    3c78:	movw	r1, #0
    3c7c:	movt	r1, #0
    3c80:	mvn	r0, #0
    3c84:	add	r2, r2, #1
    3c88:	bl	0 <coda_set_error>
    3c8c:	b	2ebc <eval_string+0x834>
    3c90:	ldr	r0, [sp, #88]	; 0x58
    3c94:	cmp	r0, #0
    3c98:	beq	2ebc <eval_string+0x834>
    3c9c:	bl	0 <free>
    3ca0:	b	2ebc <eval_string+0x834>
    3ca4:	movw	r1, #0
    3ca8:	movt	r1, #0
    3cac:	mvn	r0, #400	; 0x190
    3cb0:	bl	0 <coda_set_error>
    3cb4:	b	2ebc <eval_string+0x834>
    3cb8:	movw	r1, #0
    3cbc:	movt	r1, #0
    3cc0:	mvn	r0, #400	; 0x190
    3cc4:	bl	0 <coda_set_error>
    3cc8:	b	2ebc <eval_string+0x834>
    3ccc:	mvn	r0, #400	; 0x190
    3cd0:	movw	r1, #0
    3cd4:	movt	r1, #0
    3cd8:	bl	0 <coda_set_error>
    3cdc:	ldr	r0, [sp, #112]	; 0x70
    3ce0:	bl	0 <free>
    3ce4:	b	3a98 <eval_string+0x1410>
    3ce8:	mvn	r0, #400	; 0x190
    3cec:	movw	r1, #0
    3cf0:	movt	r1, #0
    3cf4:	bl	0 <coda_set_error>
    3cf8:	ldr	r0, [sp, #76]	; 0x4c
    3cfc:	b	3c9c <eval_string+0x1614>
    3d00:	mov	r2, sl
    3d04:	mvn	r0, #400	; 0x190
    3d08:	movw	r1, #0
    3d0c:	movt	r1, #0
    3d10:	bl	0 <coda_set_error>
    3d14:	ldr	r0, [sp, #76]	; 0x4c
    3d18:	bl	0 <free>
    3d1c:	b	2ebc <eval_string+0x834>
    3d20:	movw	r1, #0
    3d24:	movt	r1, #0
    3d28:	mvn	r0, #400	; 0x190
    3d2c:	bl	0 <coda_set_error>
    3d30:	b	2ebc <eval_string+0x834>
    3d34:	mvn	r0, #400	; 0x190
    3d38:	movw	r1, #0
    3d3c:	movt	r1, #0
    3d40:	ldrd	r2, [sp, #60]	; 0x3c
    3d44:	bl	0 <coda_set_error>
    3d48:	ldr	r0, [sp, #76]	; 0x4c
    3d4c:	cmp	r0, #0
    3d50:	bne	3c9c <eval_string+0x1614>
    3d54:	b	2ebc <eval_string+0x834>
    3d58:	mvn	r0, #400	; 0x190
    3d5c:	movw	r1, #0
    3d60:	movt	r1, #0
    3d64:	bl	0 <coda_set_error>
    3d68:	ldr	r0, [sp, #112]	; 0x70
    3d6c:	cmp	r0, #0
    3d70:	bne	3ce0 <eval_string+0x1658>
    3d74:	b	3a98 <eval_string+0x1410>
    3d78:	movw	r0, #2991	; 0xbaf
    3d7c:	mov	r2, r6
    3d80:	movw	r3, #0
    3d84:	movt	r3, #0
    3d88:	movw	r1, #0
    3d8c:	movt	r1, #0
    3d90:	str	r0, [sp]
    3d94:	mvn	r0, #0
    3d98:	bl	0 <coda_set_error>
    3d9c:	b	2ebc <eval_string+0x834>
    3da0:	movw	r1, #0
    3da4:	movt	r1, #0
    3da8:	ldr	r3, [pc, #296]	; 3ed8 <eval_string+0x1850>
    3dac:	movw	r0, #0
    3db0:	movt	r0, #0
    3db4:	movw	r2, #3624	; 0xe28
    3db8:	bl	0 <__assert_fail>
    3dbc:	movw	r1, #0
    3dc0:	movt	r1, #0
    3dc4:	ldr	r3, [pc, #268]	; 3ed8 <eval_string+0x1850>
    3dc8:	movw	r0, #0
    3dcc:	movt	r0, #0
    3dd0:	movw	r2, #3363	; 0xd23
    3dd4:	bl	0 <__assert_fail>
    3dd8:	movw	r1, #0
    3ddc:	movt	r1, #0
    3de0:	ldr	r3, [pc, #240]	; 3ed8 <eval_string+0x1850>
    3de4:	movw	r0, #0
    3de8:	movt	r0, #0
    3dec:	movw	r2, #3234	; 0xca2
    3df0:	bl	0 <__assert_fail>
    3df4:	movw	r1, #0
    3df8:	movt	r1, #0
    3dfc:	ldr	r3, [pc, #212]	; 3ed8 <eval_string+0x1850>
    3e00:	movw	r0, #0
    3e04:	movt	r0, #0
    3e08:	movw	r2, #3650	; 0xe42
    3e0c:	bl	0 <__assert_fail>
    3e10:	movw	r1, #0
    3e14:	movt	r1, #0
    3e18:	ldr	r3, [pc, #184]	; 3ed8 <eval_string+0x1850>
    3e1c:	movw	r0, #0
    3e20:	movt	r0, #0
    3e24:	movw	r2, #2865	; 0xb31
    3e28:	bl	0 <__assert_fail>
    3e2c:	movw	r1, #0
    3e30:	movt	r1, #0
    3e34:	ldr	r3, [pc, #156]	; 3ed8 <eval_string+0x1850>
    3e38:	movw	r0, #0
    3e3c:	movt	r0, #0
    3e40:	movw	r2, #3449	; 0xd79
    3e44:	bl	0 <__assert_fail>
    3e48:	movw	r1, #0
    3e4c:	movt	r1, #0
    3e50:	ldr	r3, [pc, #128]	; 3ed8 <eval_string+0x1850>
    3e54:	movw	r0, #0
    3e58:	movt	r0, #0
    3e5c:	movw	r2, #2938	; 0xb7a
    3e60:	bl	0 <__assert_fail>
    3e64:	movw	r1, #0
    3e68:	movt	r1, #0
    3e6c:	ldr	r3, [pc, #100]	; 3ed8 <eval_string+0x1850>
    3e70:	movw	r0, #0
    3e74:	movt	r0, #0
    3e78:	movw	r2, #3763	; 0xeb3
    3e7c:	bl	0 <__assert_fail>
    3e80:	movw	r1, #0
    3e84:	movt	r1, #0
    3e88:	ldr	r3, [pc, #72]	; 3ed8 <eval_string+0x1850>
    3e8c:	movw	r0, #0
    3e90:	movt	r0, #0
    3e94:	movw	r2, #3301	; 0xce5
    3e98:	bl	0 <__assert_fail>
    3e9c:	movw	r1, #0
    3ea0:	movt	r1, #0
    3ea4:	ldr	r3, [pc, #44]	; 3ed8 <eval_string+0x1850>
    3ea8:	movw	r0, #0
    3eac:	movt	r0, #0
    3eb0:	movw	r2, #3676	; 0xe5c
    3eb4:	bl	0 <__assert_fail>
    3eb8:	movw	r2, #0
    3ebc:	movt	r2, #0
    3ec0:	movw	r1, #0
    3ec4:	movt	r1, #0
    3ec8:	movw	r3, #2924	; 0xb6c
    3ecc:	mvn	r0, #0
    3ed0:	bl	0 <coda_set_error>
    3ed4:	b	2ebc <eval_string+0x834>
    3ed8:	.word	0x00000014

00003edc <eval_float>:
    3edc:	ldr	r3, [r1, #4]
    3ee0:	strd	r4, [sp, #-36]!	; 0xffffffdc
    3ee4:	strd	r6, [sp, #8]
    3ee8:	strd	r8, [sp, #16]
    3eec:	mov	r8, r2
    3ef0:	strd	sl, [sp, #24]
    3ef4:	cmp	r3, #1
    3ef8:	str	lr, [sp, #32]
    3efc:	vpush	{d8}
    3f00:	sub	sp, sp, #556	; 0x22c
    3f04:	beq	4084 <eval_float+0x1a8>
    3f08:	ldr	r3, [r1]
    3f0c:	mov	r4, r1
    3f10:	cmp	r3, #19
    3f14:	beq	4140 <eval_float+0x264>
    3f18:	mov	r5, r0
    3f1c:	cmp	r3, #86	; 0x56
    3f20:	ldrls	pc, [pc, r3, lsl #2]
    3f24:	b	4838 <eval_float+0x95c>
    3f28:	.word	0x00004150
    3f2c:	.word	0x0000478c
    3f30:	.word	0x00004838
    3f34:	.word	0x00004640
    3f38:	.word	0x00004838
    3f3c:	.word	0x00004838
    3f40:	.word	0x00004838
    3f44:	.word	0x00004838
    3f48:	.word	0x00004444
    3f4c:	.word	0x000043d0
    3f50:	.word	0x00004838
    3f54:	.word	0x00004594
    3f58:	.word	0x00004838
    3f5c:	.word	0x00004838
    3f60:	.word	0x00004838
    3f64:	.word	0x00004838
    3f68:	.word	0x00004838
    3f6c:	.word	0x00004574
    3f70:	.word	0x00004838
    3f74:	.word	0x00004838
    3f78:	.word	0x00004838
    3f7c:	.word	0x00004838
    3f80:	.word	0x00004838
    3f84:	.word	0x00004838
    3f88:	.word	0x000045f4
    3f8c:	.word	0x00004838
    3f90:	.word	0x00004838
    3f94:	.word	0x00004838
    3f98:	.word	0x00004838
    3f9c:	.word	0x000040c4
    3fa0:	.word	0x0000476c
    3fa4:	.word	0x00004838
    3fa8:	.word	0x00004838
    3fac:	.word	0x00004838
    3fb0:	.word	0x00004838
    3fb4:	.word	0x00004838
    3fb8:	.word	0x00004838
    3fbc:	.word	0x00004838
    3fc0:	.word	0x00004838
    3fc4:	.word	0x00004838
    3fc8:	.word	0x00004838
    3fcc:	.word	0x00004838
    3fd0:	.word	0x00004730
    3fd4:	.word	0x00004838
    3fd8:	.word	0x00004838
    3fdc:	.word	0x00004838
    3fe0:	.word	0x00004838
    3fe4:	.word	0x00004838
    3fe8:	.word	0x00004838
    3fec:	.word	0x00004838
    3ff0:	.word	0x00004838
    3ff4:	.word	0x00004838
    3ff8:	.word	0x00004838
    3ffc:	.word	0x00004838
    4000:	.word	0x00004838
    4004:	.word	0x00004838
    4008:	.word	0x00004388
    400c:	.word	0x00004344
    4010:	.word	0x000047ec
    4014:	.word	0x00004534
    4018:	.word	0x000047cc
    401c:	.word	0x00004838
    4020:	.word	0x00004838
    4024:	.word	0x00004838
    4028:	.word	0x00004838
    402c:	.word	0x00004838
    4030:	.word	0x000042f8
    4034:	.word	0x00004838
    4038:	.word	0x00004838
    403c:	.word	0x00004838
    4040:	.word	0x00004838
    4044:	.word	0x00004838
    4048:	.word	0x000042c4
    404c:	.word	0x00004838
    4050:	.word	0x00004838
    4054:	.word	0x00004838
    4058:	.word	0x00004838
    405c:	.word	0x00004838
    4060:	.word	0x00004284
    4064:	.word	0x000041c4
    4068:	.word	0x00004838
    406c:	.word	0x00004838
    4070:	.word	0x00004838
    4074:	.word	0x00004838
    4078:	.word	0x00004838
    407c:	.word	0x00004838
    4080:	.word	0x00004178
    4084:	add	r2, sp, #32
    4088:	bl	5d94 <eval_integer>
    408c:	subs	r9, r0, #0
    4090:	bne	4138 <eval_float+0x25c>
    4094:	ldrd	r0, [sp, #32]
    4098:	bl	0 <__aeabi_l2d>
    409c:	strd	r0, [r8]
    40a0:	mov	r0, r9
    40a4:	add	sp, sp, #556	; 0x22c
    40a8:	vpop	{d8}
    40ac:	ldrd	r4, [sp]
    40b0:	ldrd	r6, [sp, #8]
    40b4:	ldrd	r8, [sp, #16]
    40b8:	ldrd	sl, [sp, #24]
    40bc:	add	sp, sp, #32
    40c0:	pop	{pc}		; (ldr pc, [sp], #4)
    40c4:	ldr	r4, [r1, #16]
    40c8:	ldr	r3, [r4, #4]
    40cc:	cmp	r3, #4
    40d0:	beq	4908 <eval_float+0xa2c>
    40d4:	cmp	r3, #3
    40d8:	movne	r1, r4
    40dc:	bne	4084 <eval_float+0x1a8>
    40e0:	add	r2, sp, #32
    40e4:	mov	r1, r4
    40e8:	mov	r0, r5
    40ec:	add	r3, sp, #24
    40f0:	str	r2, [sp]
    40f4:	add	r2, sp, #20
    40f8:	bl	2688 <eval_string>
    40fc:	subs	r9, r0, #0
    4100:	bne	4138 <eval_float+0x25c>
    4104:	ldr	r1, [sp, #24]
    4108:	cmp	r1, #0
    410c:	beq	4a6c <eval_float+0xb90>
    4110:	ldr	r0, [sp, #20]
    4114:	mov	r2, r8
    4118:	mov	r3, r9
    411c:	ldr	ip, [sp, #32]
    4120:	add	r0, ip, r0
    4124:	bl	0 <coda_ascii_parse_double>
    4128:	cmp	r0, #0
    412c:	ldr	r0, [sp, #32]
    4130:	bge	427c <eval_float+0x3a0>
    4134:	bl	0 <free>
    4138:	mvn	r9, #0
    413c:	b	40a0 <eval_float+0x1c4>
    4140:	ldrd	r2, [r1, #16]
    4144:	mov	r9, #0
    4148:	strd	r2, [r8]
    414c:	b	40a0 <eval_float+0x1c4>
    4150:	ldr	r1, [r1, #16]
    4154:	bl	3edc <eval_float>
    4158:	subs	r9, r0, #0
    415c:	bne	4138 <eval_float+0x25c>
    4160:	vldr	d7, [r8]
    4164:	vcmpe.f64	d7, #0.0
    4168:	vmrs	APSR_nzcv, fpscr
    416c:	vneglt.f64	d7, d7
    4170:	vstr	d7, [r8]
    4174:	b	40a0 <eval_float+0x1c4>
    4178:	ldr	r3, [r1, #12]
    417c:	ldr	r1, [r1, #16]
    4180:	ldrb	r2, [r3]
    4184:	add	sl, r0, r2, lsl #3
    4188:	sub	r2, r2, #39	; 0x27
    418c:	add	r2, r0, r2, lsl #3
    4190:	sub	sl, sl, #304	; 0x130
    4194:	ldrd	r6, [sl, #-8]
    4198:	bl	5d94 <eval_integer>
    419c:	cmp	r0, #0
    41a0:	bne	4138 <eval_float+0x25c>
    41a4:	mov	r2, r8
    41a8:	mov	r0, r5
    41ac:	ldr	r1, [r4, #20]
    41b0:	bl	3edc <eval_float>
    41b4:	subs	r9, r0, #0
    41b8:	bne	4138 <eval_float+0x25c>
    41bc:	strd	r6, [sl, #-8]
    41c0:	b	40a0 <eval_float+0x1c4>
    41c4:	add	ip, sp, #24
    41c8:	add	r3, sp, #16
    41cc:	ldr	r1, [r1, #16]
    41d0:	add	r2, sp, #8
    41d4:	str	ip, [sp]
    41d8:	bl	2688 <eval_string>
    41dc:	subs	ip, r0, #0
    41e0:	bne	4138 <eval_float+0x25c>
    41e4:	ldr	r1, [sp, #16]
    41e8:	cmp	r1, #0
    41ec:	blt	4a80 <eval_float+0xba4>
    41f0:	beq	4a28 <eval_float+0xb4c>
    41f4:	ldr	r2, [sp, #24]
    41f8:	mov	r0, r5
    41fc:	add	lr, sp, #32
    4200:	add	r3, sp, #20
    4204:	ldr	r5, [sp, #8]
    4208:	add	r2, r2, r1
    420c:	strb	ip, [r2, r5]
    4210:	add	r2, sp, #12
    4214:	str	lr, [sp]
    4218:	ldr	r1, [r4, #20]
    421c:	bl	2688 <eval_string>
    4220:	cmp	r0, #0
    4224:	bne	4a0c <eval_float+0xb30>
    4228:	ldr	r1, [sp, #20]
    422c:	cmp	r1, #0
    4230:	blt	4a94 <eval_float+0xbb8>
    4234:	beq	4a3c <eval_float+0xb60>
    4238:	ldr	ip, [sp, #12]
    423c:	mov	r2, r8
    4240:	ldr	r3, [sp, #32]
    4244:	add	r3, r3, r1
    4248:	strb	r0, [r3, ip]
    424c:	ldr	r1, [sp, #8]
    4250:	ldr	r3, [sp, #12]
    4254:	ldr	ip, [sp, #24]
    4258:	ldr	r0, [sp, #32]
    425c:	add	r1, ip, r1
    4260:	add	r0, r0, r3
    4264:	bl	0 <coda_time_string_to_double>
    4268:	subs	r9, r0, #0
    426c:	ldr	r0, [sp, #32]
    4270:	bne	4a08 <eval_float+0xb2c>
    4274:	bl	0 <free>
    4278:	ldr	r0, [sp, #24]
    427c:	bl	0 <free>
    4280:	b	40a0 <eval_float+0x1c4>
    4284:	add	r2, sp, #24
    4288:	ldr	r1, [r1, #16]
    428c:	bl	3edc <eval_float>
    4290:	cmp	r0, #0
    4294:	bne	4138 <eval_float+0x25c>
    4298:	mov	r0, r5
    429c:	add	r2, sp, #32
    42a0:	ldr	r1, [r4, #20]
    42a4:	bl	3edc <eval_float>
    42a8:	subs	r9, r0, #0
    42ac:	bne	4138 <eval_float+0x25c>
    42b0:	vldr	d7, [sp, #24]
    42b4:	vldr	d6, [sp, #32]
    42b8:	vsub.f64	d7, d7, d6
    42bc:	vstr	d7, [r8]
    42c0:	b	40a0 <eval_float+0x1c4>
    42c4:	ldr	r1, [r1, #16]
    42c8:	bl	3edc <eval_float>
    42cc:	subs	r9, r0, #0
    42d0:	bne	4138 <eval_float+0x25c>
    42d4:	vldr	d7, [r8]
    42d8:	vldr	d0, [pc, #1000]	; 46c8 <eval_float+0x7ec>
    42dc:	vcmpe.f64	d7, #0.0
    42e0:	vmrs	APSR_nzcv, fpscr
    42e4:	bmi	4868 <eval_float+0x98c>
    42e8:	vadd.f64	d0, d7, d0
    42ec:	bl	0 <floor>
    42f0:	vstr	d0, [r8]
    42f4:	b	40a0 <eval_float+0x1c4>
    42f8:	add	r2, sp, #24
    42fc:	ldr	r1, [r1, #16]
    4300:	bl	3edc <eval_float>
    4304:	subs	r9, r0, #0
    4308:	bne	4138 <eval_float+0x25c>
    430c:	ldr	r1, [r4, #20]
    4310:	mov	r0, r5
    4314:	add	r2, sp, #32
    4318:	ldr	r3, [r1, #4]
    431c:	cmp	r3, #1
    4320:	beq	497c <eval_float+0xaa0>
    4324:	bl	3edc <eval_float>
    4328:	cmp	r0, #0
    432c:	bne	4138 <eval_float+0x25c>
    4330:	vldr	d0, [sp, #24]
    4334:	vldr	d1, [sp, #32]
    4338:	bl	0 <pow>
    433c:	vstr	d0, [r8]
    4340:	b	40a0 <eval_float+0x1c4>
    4344:	add	r2, sp, #24
    4348:	ldr	r1, [r1, #16]
    434c:	bl	3edc <eval_float>
    4350:	cmp	r0, #0
    4354:	bne	4138 <eval_float+0x25c>
    4358:	mov	r0, r5
    435c:	add	r2, sp, #32
    4360:	ldr	r1, [r4, #20]
    4364:	bl	3edc <eval_float>
    4368:	subs	r9, r0, #0
    436c:	bne	4138 <eval_float+0x25c>
    4370:	vldr	d7, [sp, #24]
    4374:	vldr	d6, [sp, #32]
    4378:	vcmpe.f64	d7, d6
    437c:	vmrs	APSR_nzcv, fpscr
    4380:	vmovpl.f64	d7, d6
    4384:	b	4170 <eval_float+0x294>
    4388:	add	r2, sp, #24
    438c:	ldr	r1, [r1, #16]
    4390:	bl	3edc <eval_float>
    4394:	cmp	r0, #0
    4398:	bne	4138 <eval_float+0x25c>
    439c:	mov	r0, r5
    43a0:	add	r2, sp, #32
    43a4:	ldr	r1, [r4, #20]
    43a8:	bl	3edc <eval_float>
    43ac:	subs	r9, r0, #0
    43b0:	bne	4138 <eval_float+0x25c>
    43b4:	vldr	d7, [sp, #24]
    43b8:	vldr	d6, [sp, #32]
    43bc:	vcmpe.f64	d7, d6
    43c0:	vmrs	APSR_nzcv, fpscr
    43c4:	vmovle.f64	d7, d6
    43c8:	vstr	d7, [r8]
    43cc:	b	40a0 <eval_float+0x1c4>
    43d0:	ldr	r3, [r0]
    43d4:	cmp	r3, #0
    43d8:	beq	4afc <eval_float+0xc20>
    43dc:	add	r6, r0, #8
    43e0:	add	sl, sp, #32
    43e4:	mov	r1, r6
    43e8:	mov	r2, #520	; 0x208
    43ec:	mov	r0, sl
    43f0:	bl	0 <memcpy>
    43f4:	mov	r0, r5
    43f8:	ldr	r1, [r4, #16]
    43fc:	bl	7420 <eval_cursor>
    4400:	cmp	r0, #0
    4404:	bne	4138 <eval_float+0x25c>
    4408:	add	r1, sp, #20
    440c:	mov	r0, r6
    4410:	bl	0 <coda_cursor_get_num_elements>
    4414:	subs	r9, r0, #0
    4418:	bne	4138 <eval_float+0x25c>
    441c:	bl	0 <coda_NaN>
    4420:	ldr	r3, [sp, #20]
    4424:	vstr	d0, [r8]
    4428:	cmp	r3, #0
    442c:	bgt	4878 <eval_float+0x99c>
    4430:	mov	r1, sl
    4434:	mov	r0, r6
    4438:	mov	r2, #520	; 0x208
    443c:	bl	0 <memcpy>
    4440:	b	40a0 <eval_float+0x1c4>
    4444:	ldr	r3, [r0]
    4448:	cmp	r3, #0
    444c:	beq	4ac4 <eval_float+0xbe8>
    4450:	add	r6, r0, #8
    4454:	add	sl, sp, #32
    4458:	mov	r1, r6
    445c:	mov	r2, #520	; 0x208
    4460:	mov	r0, sl
    4464:	bl	0 <memcpy>
    4468:	mov	r0, r5
    446c:	ldr	r1, [r4, #16]
    4470:	bl	7420 <eval_cursor>
    4474:	cmp	r0, #0
    4478:	bne	4138 <eval_float+0x25c>
    447c:	add	r1, sp, #20
    4480:	mov	r0, r6
    4484:	bl	0 <coda_cursor_get_num_elements>
    4488:	subs	r9, r0, #0
    448c:	bne	4138 <eval_float+0x25c>
    4490:	bl	0 <coda_NaN>
    4494:	ldr	r3, [sp, #20]
    4498:	vstr	d0, [r8]
    449c:	cmp	r3, #0
    44a0:	ble	4430 <eval_float+0x554>
    44a4:	mov	r0, r6
    44a8:	bl	0 <coda_cursor_goto_first_array_element>
    44ac:	subs	r7, r0, #0
    44b0:	bne	4138 <eval_float+0x25c>
    44b4:	ldr	r3, [sp, #20]
    44b8:	cmp	r3, #0
    44bc:	ble	4430 <eval_float+0x554>
    44c0:	add	fp, sp, #24
    44c4:	b	44d4 <eval_float+0x5f8>
    44c8:	add	r7, r7, #1
    44cc:	cmp	r7, r3
    44d0:	bge	4430 <eval_float+0x554>
    44d4:	mov	r2, fp
    44d8:	mov	r0, r5
    44dc:	ldr	r1, [r4, #20]
    44e0:	bl	3edc <eval_float>
    44e4:	cmp	r0, #0
    44e8:	bne	4138 <eval_float+0x25c>
    44ec:	cmp	r7, #0
    44f0:	vldr	d7, [sp, #24]
    44f4:	beq	4508 <eval_float+0x62c>
    44f8:	vldr	d6, [r8]
    44fc:	vcmpe.f64	d6, d7
    4500:	vmrs	APSR_nzcv, fpscr
    4504:	bpl	450c <eval_float+0x630>
    4508:	vstr	d7, [r8]
    450c:	ldr	r3, [sp, #20]
    4510:	sub	r2, r3, #1
    4514:	cmp	r2, r7
    4518:	ble	44c8 <eval_float+0x5ec>
    451c:	mov	r0, r6
    4520:	bl	0 <coda_cursor_goto_next_array_element>
    4524:	cmp	r0, #0
    4528:	bne	4138 <eval_float+0x25c>
    452c:	ldr	r3, [sp, #20]
    4530:	b	44c8 <eval_float+0x5ec>
    4534:	add	r2, sp, #24
    4538:	ldr	r1, [r1, #16]
    453c:	bl	3edc <eval_float>
    4540:	cmp	r0, #0
    4544:	bne	4138 <eval_float+0x25c>
    4548:	mov	r0, r5
    454c:	add	r2, sp, #32
    4550:	ldr	r1, [r4, #20]
    4554:	bl	3edc <eval_float>
    4558:	subs	r9, r0, #0
    455c:	bne	4138 <eval_float+0x25c>
    4560:	vldr	d7, [sp, #24]
    4564:	vldr	d6, [sp, #32]
    4568:	vmul.f64	d7, d7, d6
    456c:	vstr	d7, [r8]
    4570:	b	40a0 <eval_float+0x1c4>
    4574:	ldr	r1, [r1, #16]
    4578:	bl	3edc <eval_float>
    457c:	subs	r9, r0, #0
    4580:	bne	4138 <eval_float+0x25c>
    4584:	vldr	d0, [r8]
    4588:	bl	0 <ceil>
    458c:	vstr	d0, [r8]
    4590:	b	40a0 <eval_float+0x1c4>
    4594:	ldr	r3, [r0]
    4598:	cmp	r3, #0
    459c:	beq	4aa8 <eval_float+0xbcc>
    45a0:	add	r6, r0, #8
    45a4:	mov	r2, #520	; 0x208
    45a8:	mov	r1, r6
    45ac:	add	r0, sp, #32
    45b0:	bl	0 <memcpy>
    45b4:	mov	r0, r5
    45b8:	ldr	r1, [r4, #16]
    45bc:	bl	7420 <eval_cursor>
    45c0:	cmp	r0, #0
    45c4:	bne	4138 <eval_float+0x25c>
    45c8:	mov	r2, r8
    45cc:	mov	r0, r5
    45d0:	ldr	r1, [r4, #20]
    45d4:	bl	3edc <eval_float>
    45d8:	subs	r9, r0, #0
    45dc:	bne	4138 <eval_float+0x25c>
    45e0:	add	r1, sp, #32
    45e4:	mov	r0, r6
    45e8:	mov	r2, #520	; 0x208
    45ec:	bl	0 <memcpy>
    45f0:	b	40a0 <eval_float+0x1c4>
    45f4:	add	r2, sp, #24
    45f8:	ldr	r1, [r1, #16]
    45fc:	bl	3edc <eval_float>
    4600:	cmp	r0, #0
    4604:	bne	4138 <eval_float+0x25c>
    4608:	mov	r0, r5
    460c:	add	r2, sp, #32
    4610:	ldr	r1, [r4, #20]
    4614:	bl	3edc <eval_float>
    4618:	subs	r9, r0, #0
    461c:	bne	4138 <eval_float+0x25c>
    4620:	vldr	d7, [sp, #32]
    4624:	vcmp.f64	d7, #0.0
    4628:	vmrs	APSR_nzcv, fpscr
    462c:	beq	4a50 <eval_float+0xb74>
    4630:	vldr	d5, [sp, #24]
    4634:	vdiv.f64	d6, d5, d7
    4638:	vstr	d6, [r8]
    463c:	b	40a0 <eval_float+0x1c4>
    4640:	ldr	r3, [r0]
    4644:	cmp	r3, #0
    4648:	beq	4b18 <eval_float+0xc3c>
    464c:	add	r6, r0, #8
    4650:	add	sl, sp, #32
    4654:	mov	r1, r6
    4658:	mov	r2, #520	; 0x208
    465c:	mov	r0, sl
    4660:	bl	0 <memcpy>
    4664:	mov	r0, r5
    4668:	ldr	r1, [r4, #16]
    466c:	bl	7420 <eval_cursor>
    4670:	cmp	r0, #0
    4674:	bne	4138 <eval_float+0x25c>
    4678:	add	r1, sp, #20
    467c:	mov	r0, r6
    4680:	bl	0 <coda_cursor_get_num_elements>
    4684:	subs	r9, r0, #0
    4688:	bne	4138 <eval_float+0x25c>
    468c:	ldr	r3, [sp, #20]
    4690:	mov	r0, #0
    4694:	mov	r1, #0
    4698:	strd	r0, [r8]
    469c:	cmp	r3, #0
    46a0:	ble	4430 <eval_float+0x554>
    46a4:	mov	r0, r6
    46a8:	bl	0 <coda_cursor_goto_first_array_element>
    46ac:	subs	r7, r0, #0
    46b0:	bne	4138 <eval_float+0x25c>
    46b4:	ldr	r3, [sp, #20]
    46b8:	cmp	r3, #0
    46bc:	ble	4430 <eval_float+0x554>
    46c0:	add	fp, sp, #24
    46c4:	b	46e0 <eval_float+0x804>
    46c8:	.word	0x00000000
    46cc:	.word	0x3fe00000
    46d0:	.word	0x00000020
    46d4:	add	r7, r7, #1
    46d8:	cmp	r3, r7
    46dc:	ble	4430 <eval_float+0x554>
    46e0:	mov	r2, fp
    46e4:	mov	r0, r5
    46e8:	ldr	r1, [r4, #20]
    46ec:	bl	3edc <eval_float>
    46f0:	cmp	r0, #0
    46f4:	bne	4138 <eval_float+0x25c>
    46f8:	vldr	d7, [r8]
    46fc:	ldr	r3, [sp, #20]
    4700:	vldr	d6, [sp, #24]
    4704:	sub	r2, r3, #1
    4708:	cmp	r2, r7
    470c:	vadd.f64	d7, d7, d6
    4710:	vstr	d7, [r8]
    4714:	ble	46d4 <eval_float+0x7f8>
    4718:	mov	r0, r6
    471c:	bl	0 <coda_cursor_goto_next_array_element>
    4720:	cmp	r0, #0
    4724:	bne	4138 <eval_float+0x25c>
    4728:	ldr	r3, [sp, #20]
    472c:	b	46d4 <eval_float+0x7f8>
    4730:	add	r2, sp, #32
    4734:	ldr	r1, [r1, #16]
    4738:	bl	4b44 <eval_boolean>
    473c:	subs	r9, r0, #0
    4740:	bne	4138 <eval_float+0x25c>
    4744:	ldr	r3, [sp, #32]
    4748:	mov	r2, r8
    474c:	mov	r0, r5
    4750:	cmp	r3, #0
    4754:	beq	4854 <eval_float+0x978>
    4758:	ldr	r1, [r4, #20]
    475c:	bl	3edc <eval_float>
    4760:	cmp	r0, #0
    4764:	beq	40a0 <eval_float+0x1c4>
    4768:	b	4138 <eval_float+0x25c>
    476c:	ldr	r1, [r1, #16]
    4770:	bl	3edc <eval_float>
    4774:	subs	r9, r0, #0
    4778:	bne	4138 <eval_float+0x25c>
    477c:	vldr	d0, [r8]
    4780:	bl	0 <floor>
    4784:	vstr	d0, [r8]
    4788:	b	40a0 <eval_float+0x1c4>
    478c:	add	r2, sp, #24
    4790:	ldr	r1, [r1, #16]
    4794:	bl	3edc <eval_float>
    4798:	cmp	r0, #0
    479c:	bne	4138 <eval_float+0x25c>
    47a0:	mov	r0, r5
    47a4:	add	r2, sp, #32
    47a8:	ldr	r1, [r4, #20]
    47ac:	bl	3edc <eval_float>
    47b0:	subs	r9, r0, #0
    47b4:	bne	4138 <eval_float+0x25c>
    47b8:	vldr	d7, [sp, #24]
    47bc:	vldr	d6, [sp, #32]
    47c0:	vadd.f64	d7, d7, d6
    47c4:	vstr	d7, [r8]
    47c8:	b	40a0 <eval_float+0x1c4>
    47cc:	ldr	r1, [r1, #16]
    47d0:	bl	3edc <eval_float>
    47d4:	subs	r9, r0, #0
    47d8:	bne	4138 <eval_float+0x25c>
    47dc:	vldr	d7, [r8]
    47e0:	vneg.f64	d7, d7
    47e4:	vstr	d7, [r8]
    47e8:	b	40a0 <eval_float+0x1c4>
    47ec:	add	r2, sp, #24
    47f0:	ldr	r1, [r1, #16]
    47f4:	bl	3edc <eval_float>
    47f8:	cmp	r0, #0
    47fc:	bne	4138 <eval_float+0x25c>
    4800:	mov	r0, r5
    4804:	add	r2, sp, #32
    4808:	ldr	r1, [r4, #20]
    480c:	bl	3edc <eval_float>
    4810:	subs	r9, r0, #0
    4814:	bne	4138 <eval_float+0x25c>
    4818:	vldr	d1, [sp, #32]
    481c:	vcmp.f64	d1, #0.0
    4820:	vmrs	APSR_nzcv, fpscr
    4824:	beq	4a14 <eval_float+0xb38>
    4828:	vldr	d0, [sp, #24]
    482c:	bl	0 <fmod>
    4830:	vstr	d0, [r8]
    4834:	b	40a0 <eval_float+0x1c4>
    4838:	movw	r1, #0
    483c:	movt	r1, #0
    4840:	ldr	r3, [pc, #-376]	; 46d0 <eval_float+0x7f4>
    4844:	movw	r0, #0
    4848:	movt	r0, #0
    484c:	movw	r2, #1909	; 0x775
    4850:	bl	0 <__assert_fail>
    4854:	ldr	r1, [r4, #24]
    4858:	bl	3edc <eval_float>
    485c:	cmp	r0, #0
    4860:	beq	40a0 <eval_float+0x1c4>
    4864:	b	4138 <eval_float+0x25c>
    4868:	vsub.f64	d0, d7, d0
    486c:	bl	0 <ceil>
    4870:	vstr	d0, [r8]
    4874:	b	40a0 <eval_float+0x1c4>
    4878:	mov	r0, r6
    487c:	bl	0 <coda_cursor_goto_first_array_element>
    4880:	subs	r7, r0, #0
    4884:	bne	4138 <eval_float+0x25c>
    4888:	ldr	r3, [sp, #20]
    488c:	cmp	r3, #0
    4890:	ble	4430 <eval_float+0x554>
    4894:	add	fp, sp, #24
    4898:	b	48a8 <eval_float+0x9cc>
    489c:	add	r7, r7, #1
    48a0:	cmp	r3, r7
    48a4:	ble	4430 <eval_float+0x554>
    48a8:	mov	r2, fp
    48ac:	mov	r0, r5
    48b0:	ldr	r1, [r4, #20]
    48b4:	bl	3edc <eval_float>
    48b8:	cmp	r0, #0
    48bc:	bne	4138 <eval_float+0x25c>
    48c0:	cmp	r7, #0
    48c4:	vldr	d7, [sp, #24]
    48c8:	beq	48dc <eval_float+0xa00>
    48cc:	vldr	d6, [r8]
    48d0:	vcmpe.f64	d6, d7
    48d4:	vmrs	APSR_nzcv, fpscr
    48d8:	ble	48e0 <eval_float+0xa04>
    48dc:	vstr	d7, [r8]
    48e0:	ldr	r3, [sp, #20]
    48e4:	sub	r2, r3, #1
    48e8:	cmp	r2, r7
    48ec:	ble	489c <eval_float+0x9c0>
    48f0:	mov	r0, r6
    48f4:	bl	0 <coda_cursor_goto_next_array_element>
    48f8:	cmp	r0, #0
    48fc:	bne	4138 <eval_float+0x25c>
    4900:	ldr	r3, [sp, #20]
    4904:	b	489c <eval_float+0x9c0>
    4908:	ldr	r3, [r0]
    490c:	cmp	r3, #0
    4910:	beq	4ae0 <eval_float+0xc04>
    4914:	add	r6, r0, #8
    4918:	mov	r2, #520	; 0x208
    491c:	mov	r1, r6
    4920:	add	r0, sp, #32
    4924:	bl	0 <memcpy>
    4928:	mov	r0, r5
    492c:	mov	r1, r4
    4930:	bl	7420 <eval_cursor>
    4934:	subs	r5, r0, #0
    4938:	bne	4138 <eval_float+0x25c>
    493c:	bl	0 <coda_get_option_perform_conversions>
    4940:	mov	r4, r0
    4944:	mov	r0, r5
    4948:	bl	0 <coda_set_option_perform_conversions>
    494c:	mov	r1, r8
    4950:	mov	r0, r6
    4954:	bl	0 <coda_cursor_read_double>
    4958:	subs	r9, r0, #0
    495c:	mov	r0, r4
    4960:	bne	4a64 <eval_float+0xb88>
    4964:	bl	0 <coda_set_option_perform_conversions>
    4968:	add	r1, sp, #32
    496c:	mov	r0, r6
    4970:	mov	r2, #520	; 0x208
    4974:	bl	0 <memcpy>
    4978:	b	40a0 <eval_float+0x1c4>
    497c:	bl	5d94 <eval_integer>
    4980:	cmp	r0, #0
    4984:	bne	4138 <eval_float+0x25c>
    4988:	vldr	d8, [sp, #24]
    498c:	ldrd	r0, [sp, #32]
    4990:	adds	r6, r0, #64	; 0x40
    4994:	adc	r7, r1, #0
    4998:	cmp	r7, #0
    499c:	cmpeq	r6, #128	; 0x80
    49a0:	bhi	49cc <eval_float+0xaf0>
    49a4:	cmp	r0, #0
    49a8:	blt	49e4 <eval_float+0xb08>
    49ac:	sub	r3, r0, #1
    49b0:	vldr	d7, [pc, #384]	; 4b38 <eval_float+0xc5c>
    49b4:	beq	4170 <eval_float+0x294>
    49b8:	sub	r3, r3, #1
    49bc:	vmul.f64	d7, d7, d8
    49c0:	cmn	r3, #1
    49c4:	bne	49b8 <eval_float+0xadc>
    49c8:	b	4170 <eval_float+0x294>
    49cc:	bl	0 <__aeabi_l2d>
    49d0:	vmov	d1, r0, r1
    49d4:	vmov.f64	d0, d8
    49d8:	bl	0 <pow>
    49dc:	vstr	d0, [r8]
    49e0:	b	40a0 <eval_float+0x1c4>
    49e4:	vldr	d6, [pc, #332]	; 4b38 <eval_float+0xc5c>
    49e8:	add	r3, r0, #1
    49ec:	add	r3, r3, #1
    49f0:	vmul.f64	d6, d6, d8
    49f4:	cmp	r3, #1
    49f8:	bne	49ec <eval_float+0xb10>
    49fc:	vldr	d5, [pc, #308]	; 4b38 <eval_float+0xc5c>
    4a00:	vdiv.f64	d7, d5, d6
    4a04:	b	4170 <eval_float+0x294>
    4a08:	bl	0 <free>
    4a0c:	ldr	r0, [sp, #24]
    4a10:	b	4134 <eval_float+0x258>
    4a14:	movw	r1, #0
    4a18:	movt	r1, #0
    4a1c:	mvn	r0, #400	; 0x190
    4a20:	bl	0 <coda_set_error>
    4a24:	b	4138 <eval_float+0x25c>
    4a28:	movw	r1, #0
    4a2c:	movt	r1, #0
    4a30:	mvn	r0, #400	; 0x190
    4a34:	bl	0 <coda_set_error>
    4a38:	b	4138 <eval_float+0x25c>
    4a3c:	movw	r1, #0
    4a40:	movt	r1, #0
    4a44:	mvn	r0, #400	; 0x190
    4a48:	bl	0 <coda_set_error>
    4a4c:	b	4138 <eval_float+0x25c>
    4a50:	movw	r1, #0
    4a54:	movt	r1, #0
    4a58:	mvn	r0, #400	; 0x190
    4a5c:	bl	0 <coda_set_error>
    4a60:	b	4138 <eval_float+0x25c>
    4a64:	bl	0 <coda_set_option_perform_conversions>
    4a68:	b	4138 <eval_float+0x25c>
    4a6c:	movw	r1, #0
    4a70:	movt	r1, #0
    4a74:	mvn	r0, #102	; 0x66
    4a78:	bl	0 <coda_set_error>
    4a7c:	b	4138 <eval_float+0x25c>
    4a80:	movw	r1, #0
    4a84:	movt	r1, #0
    4a88:	mvn	r0, #400	; 0x190
    4a8c:	bl	0 <coda_set_error>
    4a90:	b	4138 <eval_float+0x25c>
    4a94:	movw	r1, #0
    4a98:	movt	r1, #0
    4a9c:	mvn	r0, #400	; 0x190
    4aa0:	bl	0 <coda_set_error>
    4aa4:	b	4138 <eval_float+0x25c>
    4aa8:	movw	r1, #0
    4aac:	movt	r1, #0
    4ab0:	ldr	r3, [pc, #136]	; 4b40 <eval_float+0xc64>
    4ab4:	movw	r0, #0
    4ab8:	movt	r0, #0
    4abc:	movw	r2, #1878	; 0x756
    4ac0:	bl	0 <__assert_fail>
    4ac4:	movw	r1, #0
    4ac8:	movt	r1, #0
    4acc:	ldr	r3, [pc, #108]	; 4b40 <eval_float+0xc64>
    4ad0:	movw	r0, #0
    4ad4:	movt	r0, #0
    4ad8:	movw	r2, #1783	; 0x6f7
    4adc:	bl	0 <__assert_fail>
    4ae0:	movw	r1, #0
    4ae4:	movt	r1, #0
    4ae8:	ldr	r3, [pc, #80]	; 4b40 <eval_float+0xc64>
    4aec:	movw	r0, #0
    4af0:	movt	r0, #0
    4af4:	movw	r2, #1418	; 0x58a
    4af8:	bl	0 <__assert_fail>
    4afc:	movw	r1, #0
    4b00:	movt	r1, #0
    4b04:	ldr	r3, [pc, #52]	; 4b40 <eval_float+0xc64>
    4b08:	movw	r0, #0
    4b0c:	movt	r0, #0
    4b10:	movw	r2, #1831	; 0x727
    4b14:	bl	0 <__assert_fail>
    4b18:	movw	r1, #0
    4b1c:	movt	r1, #0
    4b20:	ldr	r3, [pc, #24]	; 4b40 <eval_float+0xc64>
    4b24:	movw	r0, #0
    4b28:	movt	r0, #0
    4b2c:	movw	r2, #1738	; 0x6ca
    4b30:	bl	0 <__assert_fail>
    4b34:	nop	{0}
    4b38:	.word	0x00000000
    4b3c:	.word	0x3ff00000
    4b40:	.word	0x00000020

00004b44 <eval_boolean>:
    4b44:	ldr	r3, [r1]
    4b48:	strd	r4, [sp, #-36]!	; 0xffffffdc
    4b4c:	strd	r6, [sp, #8]
    4b50:	strd	r8, [sp, #16]
    4b54:	strd	sl, [sp, #24]
    4b58:	cmp	r3, #18
    4b5c:	str	lr, [sp, #32]
    4b60:	sub	sp, sp, #580	; 0x244
    4b64:	beq	4cd0 <eval_boolean+0x18c>
    4b68:	sub	r3, r3, #4
    4b6c:	mov	r6, r2
    4b70:	mov	r5, r0
    4b74:	mov	r4, r1
    4b78:	cmp	r3, #82	; 0x52
    4b7c:	ldrls	pc, [pc, r3, lsl #2]
    4b80:	b	55dc <eval_boolean+0xa98>
    4b84:	.word	0x0000557c
    4b88:	.word	0x000055dc
    4b8c:	.word	0x0000540c
    4b90:	.word	0x000055dc
    4b94:	.word	0x000055dc
    4b98:	.word	0x000055dc
    4b9c:	.word	0x000055dc
    4ba0:	.word	0x000053ac
    4ba4:	.word	0x000055dc
    4ba8:	.word	0x000055dc
    4bac:	.word	0x000055dc
    4bb0:	.word	0x000055dc
    4bb4:	.word	0x000055dc
    4bb8:	.word	0x000055dc
    4bbc:	.word	0x000055dc
    4bc0:	.word	0x000055dc
    4bc4:	.word	0x000055dc
    4bc8:	.word	0x000055dc
    4bcc:	.word	0x000055dc
    4bd0:	.word	0x000055dc
    4bd4:	.word	0x000055dc
    4bd8:	.word	0x000052fc
    4bdc:	.word	0x00005234
    4be0:	.word	0x000055dc
    4be4:	.word	0x000055dc
    4be8:	.word	0x000055dc
    4bec:	.word	0x000055dc
    4bf0:	.word	0x000055dc
    4bf4:	.word	0x000055dc
    4bf8:	.word	0x000055dc
    4bfc:	.word	0x000055dc
    4c00:	.word	0x000055dc
    4c04:	.word	0x000055dc
    4c08:	.word	0x000055dc
    4c0c:	.word	0x000055dc
    4c10:	.word	0x000055dc
    4c14:	.word	0x00005184
    4c18:	.word	0x000054c8
    4c1c:	.word	0x00005144
    4c20:	.word	0x000055dc
    4c24:	.word	0x000055dc
    4c28:	.word	0x000055dc
    4c2c:	.word	0x000054a4
    4c30:	.word	0x00005480
    4c34:	.word	0x000052d8
    4c38:	.word	0x000052b4
    4c3c:	.word	0x000055dc
    4c40:	.word	0x00005090
    4c44:	.word	0x00004fd8
    4c48:	.word	0x00004fb4
    4c4c:	.word	0x00004f78
    4c50:	.word	0x000055dc
    4c54:	.word	0x000055dc
    4c58:	.word	0x000055dc
    4c5c:	.word	0x000055dc
    4c60:	.word	0x000055dc
    4c64:	.word	0x000055dc
    4c68:	.word	0x00004d9c
    4c6c:	.word	0x00004d78
    4c70:	.word	0x000055dc
    4c74:	.word	0x000055dc
    4c78:	.word	0x000055dc
    4c7c:	.word	0x000055dc
    4c80:	.word	0x000055dc
    4c84:	.word	0x000055dc
    4c88:	.word	0x000055dc
    4c8c:	.word	0x000055dc
    4c90:	.word	0x00004e5c
    4c94:	.word	0x000055dc
    4c98:	.word	0x000055dc
    4c9c:	.word	0x000055dc
    4ca0:	.word	0x000055dc
    4ca4:	.word	0x000055dc
    4ca8:	.word	0x000055dc
    4cac:	.word	0x000055dc
    4cb0:	.word	0x000055dc
    4cb4:	.word	0x000055dc
    4cb8:	.word	0x000055dc
    4cbc:	.word	0x00004d48
    4cc0:	.word	0x000055dc
    4cc4:	.word	0x000055dc
    4cc8:	.word	0x000055dc
    4ccc:	.word	0x00004cfc
    4cd0:	ldr	r3, [r1, #12]
    4cd4:	mov	r7, #0
    4cd8:	str	r3, [r2]
    4cdc:	mov	r0, r7
    4ce0:	add	sp, sp, #580	; 0x244
    4ce4:	ldrd	r4, [sp]
    4ce8:	ldrd	r6, [sp, #8]
    4cec:	ldrd	r8, [sp, #16]
    4cf0:	ldrd	sl, [sp, #24]
    4cf4:	add	sp, sp, #32
    4cf8:	pop	{pc}		; (ldr pc, [sp], #4)
    4cfc:	ldr	r3, [r1, #12]
    4d00:	ldr	r1, [r1, #16]
    4d04:	ldrb	r2, [r3]
    4d08:	add	sl, r0, r2, lsl #3
    4d0c:	sub	r2, r2, #39	; 0x27
    4d10:	add	r2, r0, r2, lsl #3
    4d14:	sub	sl, sl, #304	; 0x130
    4d18:	ldrd	r8, [sl, #-8]
    4d1c:	bl	5d94 <eval_integer>
    4d20:	cmp	r0, #0
    4d24:	bne	517c <eval_boolean+0x638>
    4d28:	mov	r2, r6
    4d2c:	mov	r0, r5
    4d30:	ldr	r1, [r4, #20]
    4d34:	bl	4b44 <eval_boolean>
    4d38:	subs	r7, r0, #0
    4d3c:	bne	517c <eval_boolean+0x638>
    4d40:	strd	r8, [sl, #-8]
    4d44:	b	4cdc <eval_boolean+0x198>
    4d48:	ldr	r3, [r0]
    4d4c:	cmp	r3, #0
    4d50:	beq	5d18 <eval_boolean+0x11d4>
    4d54:	ldr	r2, [r0, #560]	; 0x230
    4d58:	cmp	r2, #0
    4d5c:	beq	57d4 <eval_boolean+0xc90>
    4d60:	movw	r1, #0
    4d64:	movt	r1, #0
    4d68:	mvn	r0, #400	; 0x190
    4d6c:	mvn	r7, #0
    4d70:	bl	0 <coda_set_error>
    4d74:	b	4cdc <eval_boolean+0x198>
    4d78:	ldr	r1, [r1, #16]
    4d7c:	bl	4b44 <eval_boolean>
    4d80:	subs	r7, r0, #0
    4d84:	bne	517c <eval_boolean+0x638>
    4d88:	ldr	r3, [r6]
    4d8c:	clz	r3, r3
    4d90:	lsr	r3, r3, #5
    4d94:	str	r3, [r6]
    4d98:	b	4cdc <eval_boolean+0x198>
    4d9c:	ldr	r1, [r1, #16]
    4da0:	ldr	r3, [r1, #4]
    4da4:	cmp	r3, #2
    4da8:	beq	56a4 <eval_boolean+0xb60>
    4dac:	ldr	r2, [r4, #20]
    4db0:	ldr	r2, [r2, #4]
    4db4:	cmp	r2, #2
    4db8:	beq	56a4 <eval_boolean+0xb60>
    4dbc:	cmp	r3, #1
    4dc0:	beq	5a24 <eval_boolean+0xee0>
    4dc4:	cmp	r3, #3
    4dc8:	bne	5ca8 <eval_boolean+0x1164>
    4dcc:	add	r0, sp, #48	; 0x30
    4dd0:	add	r3, sp, #40	; 0x28
    4dd4:	add	r2, sp, #32
    4dd8:	str	r0, [sp]
    4ddc:	mov	r0, r5
    4de0:	bl	2688 <eval_string>
    4de4:	cmp	r0, #0
    4de8:	bne	517c <eval_boolean+0x638>
    4dec:	add	ip, sp, #56	; 0x38
    4df0:	mov	r0, r5
    4df4:	ldr	r1, [r4, #20]
    4df8:	add	r3, sp, #44	; 0x2c
    4dfc:	add	r2, sp, #36	; 0x24
    4e00:	str	ip, [sp]
    4e04:	bl	2688 <eval_string>
    4e08:	subs	r7, r0, #0
    4e0c:	bne	5be4 <eval_boolean+0x10a0>
    4e10:	add	r0, sp, #32
    4e14:	ldr	r4, [sp, #44]	; 0x2c
    4e18:	ldm	r0, {r0, r3, r5}
    4e1c:	ldr	r8, [sp, #48]	; 0x30
    4e20:	mov	r1, r5
    4e24:	ldr	ip, [sp, #56]	; 0x38
    4e28:	mov	r2, r8
    4e2c:	stm	sp, {r4, ip}
    4e30:	bl	0 <compare_strings>
    4e34:	adds	r0, r0, #0
    4e38:	movne	r0, #1
    4e3c:	cmp	r5, #0
    4e40:	str	r0, [r6]
    4e44:	bgt	5080 <eval_boolean+0x53c>
    4e48:	cmp	r4, #0
    4e4c:	ble	4cdc <eval_boolean+0x198>
    4e50:	ldr	r0, [sp, #56]	; 0x38
    4e54:	bl	0 <free>
    4e58:	b	4cdc <eval_boolean+0x198>
    4e5c:	add	ip, sp, #48	; 0x30
    4e60:	add	r3, sp, #44	; 0x2c
    4e64:	ldr	r1, [r1, #16]
    4e68:	add	r2, sp, #40	; 0x28
    4e6c:	str	ip, [sp]
    4e70:	bl	2688 <eval_string>
    4e74:	cmp	r0, #0
    4e78:	bne	517c <eval_boolean+0x638>
    4e7c:	add	ip, sp, #36	; 0x24
    4e80:	mov	r0, r5
    4e84:	ldr	r1, [r4, #20]
    4e88:	add	r3, sp, #32
    4e8c:	add	r2, sp, #28
    4e90:	str	ip, [sp]
    4e94:	bl	2688 <eval_string>
    4e98:	subs	r7, r0, #0
    4e9c:	bne	5bf0 <eval_boolean+0x10ac>
    4ea0:	ldr	r0, [sp, #44]	; 0x2c
    4ea4:	cmp	r0, #0
    4ea8:	ble	585c <eval_boolean+0xd18>
    4eac:	ldr	lr, [sp, #40]	; 0x28
    4eb0:	add	r3, sp, #24
    4eb4:	add	r2, sp, #20
    4eb8:	mov	r1, #36	; 0x24
    4ebc:	ldr	ip, [sp, #48]	; 0x30
    4ec0:	add	r0, ip, r0
    4ec4:	strb	r7, [r0, lr]
    4ec8:	ldr	r0, [sp, #40]	; 0x28
    4ecc:	str	r7, [sp]
    4ed0:	ldr	ip, [sp, #48]	; 0x30
    4ed4:	add	r0, ip, r0
    4ed8:	bl	0 <coda_pcre_compile>
    4edc:	mov	r4, r0
    4ee0:	ldr	r0, [sp, #48]	; 0x30
    4ee4:	cmp	r0, #0
    4ee8:	beq	4ef0 <eval_boolean+0x3ac>
    4eec:	bl	0 <free>
    4ef0:	cmp	r4, #0
    4ef4:	beq	5c30 <eval_boolean+0x10ec>
    4ef8:	ldr	r2, [sp, #36]	; 0x24
    4efc:	cmp	r2, #0
    4f00:	beq	58dc <eval_boolean+0xd98>
    4f04:	ldr	lr, [sp, #28]
    4f08:	mov	ip, #48	; 0x30
    4f0c:	mov	r3, #0
    4f10:	add	r1, sp, #56	; 0x38
    4f14:	mov	r0, r4
    4f18:	str	r3, [sp]
    4f1c:	str	r3, [sp, #4]
    4f20:	str	r1, [sp, #8]
    4f24:	mov	r1, r3
    4f28:	add	r2, r2, lr
    4f2c:	str	ip, [sp, #12]
    4f30:	ldr	r3, [sp, #32]
    4f34:	bl	0 <coda_pcre_exec>
    4f38:	mov	r5, r0
    4f3c:	ldr	r0, [sp, #36]	; 0x24
    4f40:	bl	0 <free>
    4f44:	movw	r3, #0
    4f48:	movt	r3, #0
    4f4c:	mov	r0, r4
    4f50:	ldr	r3, [r3]
    4f54:	blx	r3
    4f58:	cmn	r5, #1
    4f5c:	blt	5c18 <eval_boolean+0x10d4>
    4f60:	cmp	r5, #0
    4f64:	beq	5c04 <eval_boolean+0x10c0>
    4f68:	movgt	r3, #1
    4f6c:	movle	r3, #0
    4f70:	str	r3, [r6]
    4f74:	b	4cdc <eval_boolean+0x198>
    4f78:	ldr	r1, [r1, #16]
    4f7c:	bl	4b44 <eval_boolean>
    4f80:	cmp	r0, #0
    4f84:	bne	517c <eval_boolean+0x638>
    4f88:	ldr	r3, [r6]
    4f8c:	cmp	r3, #0
    4f90:	bne	4fd0 <eval_boolean+0x48c>
    4f94:	mov	r2, r6
    4f98:	mov	r0, r5
    4f9c:	ldr	r1, [r4, #20]
    4fa0:	bl	4b44 <eval_boolean>
    4fa4:	adds	r0, r0, #0
    4fa8:	movne	r0, #1
    4fac:	rsb	r7, r0, #0
    4fb0:	b	4cdc <eval_boolean+0x198>
    4fb4:	ldr	r1, [r1, #16]
    4fb8:	bl	4b44 <eval_boolean>
    4fbc:	cmp	r0, #0
    4fc0:	bne	517c <eval_boolean+0x638>
    4fc4:	ldr	r3, [r6]
    4fc8:	cmp	r3, #0
    4fcc:	bne	4f94 <eval_boolean+0x450>
    4fd0:	mov	r7, #0
    4fd4:	b	4cdc <eval_boolean+0x198>
    4fd8:	ldr	r1, [r1, #16]
    4fdc:	ldr	r3, [r1, #4]
    4fe0:	cmp	r3, #2
    4fe4:	beq	56f0 <eval_boolean+0xbac>
    4fe8:	ldr	r2, [r4, #20]
    4fec:	ldr	r2, [r2, #4]
    4ff0:	cmp	r2, #2
    4ff4:	beq	56f0 <eval_boolean+0xbac>
    4ff8:	cmp	r3, #1
    4ffc:	beq	5a6c <eval_boolean+0xf28>
    5000:	cmp	r3, #3
    5004:	bne	5d50 <eval_boolean+0x120c>
    5008:	add	r0, sp, #48	; 0x30
    500c:	add	r3, sp, #40	; 0x28
    5010:	add	r2, sp, #32
    5014:	str	r0, [sp]
    5018:	mov	r0, r5
    501c:	bl	2688 <eval_string>
    5020:	cmp	r0, #0
    5024:	bne	517c <eval_boolean+0x638>
    5028:	add	ip, sp, #56	; 0x38
    502c:	mov	r0, r5
    5030:	ldr	r1, [r4, #20]
    5034:	add	r3, sp, #44	; 0x2c
    5038:	add	r2, sp, #36	; 0x24
    503c:	str	ip, [sp]
    5040:	bl	2688 <eval_string>
    5044:	subs	r7, r0, #0
    5048:	bne	5be4 <eval_boolean+0x10a0>
    504c:	add	r0, sp, #32
    5050:	ldr	r4, [sp, #44]	; 0x2c
    5054:	ldm	r0, {r0, r3, r5}
    5058:	ldr	r8, [sp, #48]	; 0x30
    505c:	mov	r1, r5
    5060:	ldr	ip, [sp, #56]	; 0x38
    5064:	mov	r2, r8
    5068:	stm	sp, {r4, ip}
    506c:	bl	0 <compare_strings>
    5070:	lsr	r0, r0, #31
    5074:	cmp	r5, #0
    5078:	str	r0, [r6]
    507c:	ble	4e48 <eval_boolean+0x304>
    5080:	mov	r0, r8
    5084:	bl	0 <free>
    5088:	ldr	r4, [sp, #44]	; 0x2c
    508c:	b	4e48 <eval_boolean+0x304>
    5090:	ldr	r1, [r1, #16]
    5094:	ldr	r3, [r1, #4]
    5098:	cmp	r3, #2
    509c:	beq	573c <eval_boolean+0xbf8>
    50a0:	ldr	r2, [r4, #20]
    50a4:	ldr	r2, [r2, #4]
    50a8:	cmp	r2, #2
    50ac:	beq	573c <eval_boolean+0xbf8>
    50b0:	cmp	r3, #1
    50b4:	beq	5b44 <eval_boolean+0x1000>
    50b8:	cmp	r3, #3
    50bc:	bne	5c8c <eval_boolean+0x1148>
    50c0:	add	r0, sp, #48	; 0x30
    50c4:	add	r3, sp, #40	; 0x28
    50c8:	add	r2, sp, #32
    50cc:	str	r0, [sp]
    50d0:	mov	r0, r5
    50d4:	bl	2688 <eval_string>
    50d8:	cmp	r0, #0
    50dc:	bne	517c <eval_boolean+0x638>
    50e0:	add	ip, sp, #56	; 0x38
    50e4:	mov	r0, r5
    50e8:	ldr	r1, [r4, #20]
    50ec:	add	r3, sp, #44	; 0x2c
    50f0:	add	r2, sp, #36	; 0x24
    50f4:	str	ip, [sp]
    50f8:	bl	2688 <eval_string>
    50fc:	subs	r7, r0, #0
    5100:	bne	5be4 <eval_boolean+0x10a0>
    5104:	add	r0, sp, #32
    5108:	ldr	r4, [sp, #44]	; 0x2c
    510c:	ldm	r0, {r0, r3, r5}
    5110:	ldr	r8, [sp, #48]	; 0x30
    5114:	mov	r1, r5
    5118:	ldr	ip, [sp, #56]	; 0x38
    511c:	mov	r2, r8
    5120:	stm	sp, {r4, ip}
    5124:	bl	0 <compare_strings>
    5128:	cmp	r0, #0
    512c:	movgt	r0, #0
    5130:	movle	r0, #1
    5134:	cmp	r5, #0
    5138:	str	r0, [r6]
    513c:	ble	4e48 <eval_boolean+0x304>
    5140:	b	5080 <eval_boolean+0x53c>
    5144:	add	r2, sp, #56	; 0x38
    5148:	ldr	r1, [r1, #16]
    514c:	bl	4b44 <eval_boolean>
    5150:	subs	r7, r0, #0
    5154:	bne	517c <eval_boolean+0x638>
    5158:	ldr	r3, [sp, #56]	; 0x38
    515c:	mov	r2, r6
    5160:	mov	r0, r5
    5164:	cmp	r3, #0
    5168:	beq	55f8 <eval_boolean+0xab4>
    516c:	ldr	r1, [r4, #20]
    5170:	bl	4b44 <eval_boolean>
    5174:	cmp	r0, #0
    5178:	beq	4cdc <eval_boolean+0x198>
    517c:	mvn	r7, #0
    5180:	b	4cdc <eval_boolean+0x198>
    5184:	ldr	r1, [r1, #16]
    5188:	ldr	r3, [r1, #4]
    518c:	cmp	r3, #2
    5190:	beq	5658 <eval_boolean+0xb14>
    5194:	ldr	r2, [r4, #20]
    5198:	ldr	r2, [r2, #4]
    519c:	cmp	r2, #2
    51a0:	beq	5658 <eval_boolean+0xb14>
    51a4:	cmp	r3, #1
    51a8:	beq	5afc <eval_boolean+0xfb8>
    51ac:	cmp	r3, #3
    51b0:	bne	5cc4 <eval_boolean+0x1180>
    51b4:	add	r0, sp, #48	; 0x30
    51b8:	add	r3, sp, #40	; 0x28
    51bc:	add	r2, sp, #32
    51c0:	str	r0, [sp]
    51c4:	mov	r0, r5
    51c8:	bl	2688 <eval_string>
    51cc:	cmp	r0, #0
    51d0:	bne	517c <eval_boolean+0x638>
    51d4:	add	ip, sp, #56	; 0x38
    51d8:	mov	r0, r5
    51dc:	ldr	r1, [r4, #20]
    51e0:	add	r3, sp, #44	; 0x2c
    51e4:	add	r2, sp, #36	; 0x24
    51e8:	str	ip, [sp]
    51ec:	bl	2688 <eval_string>
    51f0:	subs	r7, r0, #0
    51f4:	bne	5be4 <eval_boolean+0x10a0>
    51f8:	add	r0, sp, #32
    51fc:	ldr	r4, [sp, #44]	; 0x2c
    5200:	ldm	r0, {r0, r3, r5}
    5204:	ldr	r8, [sp, #48]	; 0x30
    5208:	mov	r1, r5
    520c:	ldr	ip, [sp, #56]	; 0x38
    5210:	mov	r2, r8
    5214:	stm	sp, {r4, ip}
    5218:	bl	0 <compare_strings>
    521c:	mvn	r0, r0
    5220:	cmp	r5, #0
    5224:	lsr	r0, r0, #31
    5228:	str	r0, [r6]
    522c:	ble	4e48 <eval_boolean+0x304>
    5230:	b	5080 <eval_boolean+0x53c>
    5234:	ldr	r3, [r0]
    5238:	cmp	r3, #0
    523c:	beq	5d6c <eval_boolean+0x1228>
    5240:	add	r8, r0, #8
    5244:	add	r9, sp, #56	; 0x38
    5248:	mov	r1, r8
    524c:	mov	r2, #520	; 0x208
    5250:	mov	r0, r9
    5254:	bl	0 <memcpy>
    5258:	mov	r0, r5
    525c:	ldr	r1, [r4, #16]
    5260:	bl	7420 <eval_cursor>
    5264:	cmp	r0, #0
    5268:	beq	5880 <eval_boolean+0xd3c>
    526c:	ldr	r3, [pc, #2836]	; 5d88 <eval_boolean+0x1244>
    5270:	mrc	15, 0, ip, cr13, cr0, {3}
    5274:	mvn	r2, #400	; 0x190
    5278:	ldr	r3, [pc, r3]
    527c:	ldr	r3, [ip, r3]
    5280:	cmp	r3, r2
    5284:	beq	517c <eval_boolean+0x638>
    5288:	ldr	lr, [pc, #2812]	; 5d8c <eval_boolean+0x1248>
    528c:	mov	r3, #0
    5290:	mov	r1, r9
    5294:	mov	r0, r8
    5298:	mov	r2, #520	; 0x208
    529c:	mov	r7, r3
    52a0:	ldr	lr, [pc, lr]
    52a4:	str	r3, [ip, lr]
    52a8:	str	r3, [r6]
    52ac:	bl	0 <memcpy>
    52b0:	b	4cdc <eval_boolean+0x198>
    52b4:	add	r2, sp, #56	; 0x38
    52b8:	ldr	r1, [r1, #16]
    52bc:	bl	3edc <eval_float>
    52c0:	subs	r7, r0, #0
    52c4:	bne	517c <eval_boolean+0x638>
    52c8:	vldr	d0, [sp, #56]	; 0x38
    52cc:	bl	0 <coda_isPlusInf>
    52d0:	str	r0, [r6]
    52d4:	b	4cdc <eval_boolean+0x198>
    52d8:	add	r2, sp, #56	; 0x38
    52dc:	ldr	r1, [r1, #16]
    52e0:	bl	3edc <eval_float>
    52e4:	subs	r7, r0, #0
    52e8:	bne	517c <eval_boolean+0x638>
    52ec:	vldr	d0, [sp, #56]	; 0x38
    52f0:	bl	0 <coda_isNaN>
    52f4:	str	r0, [r6]
    52f8:	b	4cdc <eval_boolean+0x198>
    52fc:	ldr	r1, [r1, #16]
    5300:	ldr	r3, [r1, #4]
    5304:	cmp	r3, #2
    5308:	beq	560c <eval_boolean+0xac8>
    530c:	ldr	r2, [r4, #20]
    5310:	ldr	r2, [r2, #4]
    5314:	cmp	r2, #2
    5318:	beq	560c <eval_boolean+0xac8>
    531c:	cmp	r3, #1
    5320:	beq	5ab4 <eval_boolean+0xf70>
    5324:	cmp	r3, #3
    5328:	bne	5c70 <eval_boolean+0x112c>
    532c:	add	r0, sp, #48	; 0x30
    5330:	add	r3, sp, #40	; 0x28
    5334:	add	r2, sp, #32
    5338:	str	r0, [sp]
    533c:	mov	r0, r5
    5340:	bl	2688 <eval_string>
    5344:	cmp	r0, #0
    5348:	bne	517c <eval_boolean+0x638>
    534c:	add	ip, sp, #56	; 0x38
    5350:	mov	r0, r5
    5354:	ldr	r1, [r4, #20]
    5358:	add	r3, sp, #44	; 0x2c
    535c:	add	r2, sp, #36	; 0x24
    5360:	str	ip, [sp]
    5364:	bl	2688 <eval_string>
    5368:	subs	r7, r0, #0
    536c:	bne	5be4 <eval_boolean+0x10a0>
    5370:	add	r0, sp, #32
    5374:	ldr	r4, [sp, #44]	; 0x2c
    5378:	ldm	r0, {r0, r3, r5}
    537c:	ldr	r8, [sp, #48]	; 0x30
    5380:	mov	r1, r5
    5384:	ldr	ip, [sp, #56]	; 0x38
    5388:	mov	r2, r8
    538c:	stm	sp, {r4, ip}
    5390:	bl	0 <compare_strings>
    5394:	clz	r0, r0
    5398:	cmp	r5, #0
    539c:	lsr	r0, r0, #5
    53a0:	str	r0, [r6]
    53a4:	ble	4e48 <eval_boolean+0x304>
    53a8:	b	5080 <eval_boolean+0x53c>
    53ac:	ldr	r3, [r0]
    53b0:	cmp	r3, #0
    53b4:	beq	5ce0 <eval_boolean+0x119c>
    53b8:	add	r8, r0, #8
    53bc:	mov	r2, #520	; 0x208
    53c0:	mov	r1, r8
    53c4:	add	r0, sp, #56	; 0x38
    53c8:	bl	0 <memcpy>
    53cc:	mov	r0, r5
    53d0:	ldr	r1, [r4, #16]
    53d4:	bl	7420 <eval_cursor>
    53d8:	cmp	r0, #0
    53dc:	bne	517c <eval_boolean+0x638>
    53e0:	mov	r2, r6
    53e4:	mov	r0, r5
    53e8:	ldr	r1, [r4, #20]
    53ec:	bl	4b44 <eval_boolean>
    53f0:	subs	r7, r0, #0
    53f4:	bne	517c <eval_boolean+0x638>
    53f8:	add	r1, sp, #56	; 0x38
    53fc:	mov	r0, r8
    5400:	mov	r2, #520	; 0x208
    5404:	bl	0 <memcpy>
    5408:	b	4cdc <eval_boolean+0x198>
    540c:	ldr	r3, [r0]
    5410:	cmp	r3, #0
    5414:	beq	5d34 <eval_boolean+0x11f0>
    5418:	add	r8, r0, #8
    541c:	add	r9, sp, #56	; 0x38
    5420:	mov	r1, r8
    5424:	mov	r2, #520	; 0x208
    5428:	mov	r0, r9
    542c:	bl	0 <memcpy>
    5430:	mov	r0, r5
    5434:	ldr	r1, [r4, #16]
    5438:	bl	7420 <eval_cursor>
    543c:	cmp	r0, #0
    5440:	bne	517c <eval_boolean+0x638>
    5444:	add	r1, sp, #44	; 0x2c
    5448:	mov	r0, r8
    544c:	bl	0 <coda_cursor_get_num_elements>
    5450:	subs	r7, r0, #0
    5454:	bne	517c <eval_boolean+0x638>
    5458:	ldr	r3, [sp, #44]	; 0x2c
    545c:	cmp	r3, #0
    5460:	bgt	59a8 <eval_boolean+0xe64>
    5464:	mov	r3, #0
    5468:	mov	r1, r9
    546c:	mov	r0, r8
    5470:	str	r3, [r6]
    5474:	mov	r2, #520	; 0x208
    5478:	bl	0 <memcpy>
    547c:	b	4cdc <eval_boolean+0x198>
    5480:	add	r2, sp, #56	; 0x38
    5484:	ldr	r1, [r1, #16]
    5488:	bl	3edc <eval_float>
    548c:	subs	r7, r0, #0
    5490:	bne	517c <eval_boolean+0x638>
    5494:	vldr	d0, [sp, #56]	; 0x38
    5498:	bl	0 <coda_isMinInf>
    549c:	str	r0, [r6]
    54a0:	b	4cdc <eval_boolean+0x198>
    54a4:	add	r2, sp, #56	; 0x38
    54a8:	ldr	r1, [r1, #16]
    54ac:	bl	3edc <eval_float>
    54b0:	subs	r7, r0, #0
    54b4:	bne	517c <eval_boolean+0x638>
    54b8:	vldr	d0, [sp, #56]	; 0x38
    54bc:	bl	0 <coda_isInf>
    54c0:	str	r0, [r6]
    54c4:	b	4cdc <eval_boolean+0x198>
    54c8:	ldr	r1, [r1, #16]
    54cc:	ldr	r3, [r1, #4]
    54d0:	cmp	r3, #2
    54d4:	beq	5788 <eval_boolean+0xc44>
    54d8:	ldr	r2, [r4, #20]
    54dc:	ldr	r2, [r2, #4]
    54e0:	cmp	r2, #2
    54e4:	beq	5788 <eval_boolean+0xc44>
    54e8:	cmp	r3, #1
    54ec:	beq	5b78 <eval_boolean+0x1034>
    54f0:	cmp	r3, #3
    54f4:	bne	5cfc <eval_boolean+0x11b8>
    54f8:	add	r0, sp, #48	; 0x30
    54fc:	add	r3, sp, #40	; 0x28
    5500:	add	r2, sp, #32
    5504:	str	r0, [sp]
    5508:	mov	r0, r5
    550c:	bl	2688 <eval_string>
    5510:	cmp	r0, #0
    5514:	bne	517c <eval_boolean+0x638>
    5518:	add	ip, sp, #56	; 0x38
    551c:	mov	r0, r5
    5520:	ldr	r1, [r4, #20]
    5524:	add	r3, sp, #44	; 0x2c
    5528:	add	r2, sp, #36	; 0x24
    552c:	str	ip, [sp]
    5530:	bl	2688 <eval_string>
    5534:	subs	r7, r0, #0
    5538:	bne	5be4 <eval_boolean+0x10a0>
    553c:	add	r0, sp, #32
    5540:	ldr	r4, [sp, #44]	; 0x2c
    5544:	ldm	r0, {r0, r3, r5}
    5548:	ldr	r8, [sp, #48]	; 0x30
    554c:	mov	r1, r5
    5550:	ldr	ip, [sp, #56]	; 0x38
    5554:	mov	r2, r8
    5558:	stm	sp, {r4, ip}
    555c:	bl	0 <compare_strings>
    5560:	cmp	r0, #0
    5564:	movle	r0, #0
    5568:	movgt	r0, #1
    556c:	cmp	r5, #0
    5570:	str	r0, [r6]
    5574:	ble	4e48 <eval_boolean+0x304>
    5578:	b	5080 <eval_boolean+0x53c>
    557c:	ldr	r3, [r0]
    5580:	cmp	r3, #0
    5584:	beq	5c54 <eval_boolean+0x1110>
    5588:	add	r8, r0, #8
    558c:	add	r9, sp, #56	; 0x38
    5590:	mov	r1, r8
    5594:	mov	r2, #520	; 0x208
    5598:	mov	r0, r9
    559c:	bl	0 <memcpy>
    55a0:	mov	r0, r5
    55a4:	ldr	r1, [r4, #16]
    55a8:	bl	7420 <eval_cursor>
    55ac:	cmp	r0, #0
    55b0:	bne	517c <eval_boolean+0x638>
    55b4:	add	r1, sp, #44	; 0x2c
    55b8:	mov	r0, r8
    55bc:	bl	0 <coda_cursor_get_num_elements>
    55c0:	subs	r7, r0, #0
    55c4:	bne	517c <eval_boolean+0x638>
    55c8:	ldr	r3, [sp, #44]	; 0x2c
    55cc:	cmp	r3, #0
    55d0:	bgt	592c <eval_boolean+0xde8>
    55d4:	mov	r3, #1
    55d8:	b	5468 <eval_boolean+0x924>
    55dc:	movw	r1, #0
    55e0:	movt	r1, #0
    55e4:	ldr	r3, [pc, #1956]	; 5d90 <eval_boolean+0x124c>
    55e8:	movw	r0, #0
    55ec:	movt	r0, #0
    55f0:	movw	r2, #1379	; 0x563
    55f4:	bl	0 <__assert_fail>
    55f8:	ldr	r1, [r4, #24]
    55fc:	bl	4b44 <eval_boolean>
    5600:	cmp	r0, #0
    5604:	beq	4cdc <eval_boolean+0x198>
    5608:	b	517c <eval_boolean+0x638>
    560c:	add	r2, sp, #48	; 0x30
    5610:	mov	r0, r5
    5614:	bl	3edc <eval_float>
    5618:	cmp	r0, #0
    561c:	bne	517c <eval_boolean+0x638>
    5620:	mov	r0, r5
    5624:	add	r2, sp, #56	; 0x38
    5628:	ldr	r1, [r4, #20]
    562c:	bl	3edc <eval_float>
    5630:	subs	r7, r0, #0
    5634:	bne	517c <eval_boolean+0x638>
    5638:	vldr	d6, [sp, #48]	; 0x30
    563c:	vldr	d7, [sp, #56]	; 0x38
    5640:	vcmp.f64	d6, d7
    5644:	vmrs	APSR_nzcv, fpscr
    5648:	moveq	r3, #1
    564c:	movne	r3, #0
    5650:	str	r3, [r6]
    5654:	b	4cdc <eval_boolean+0x198>
    5658:	add	r2, sp, #48	; 0x30
    565c:	mov	r0, r5
    5660:	bl	3edc <eval_float>
    5664:	cmp	r0, #0
    5668:	bne	517c <eval_boolean+0x638>
    566c:	mov	r0, r5
    5670:	add	r2, sp, #56	; 0x38
    5674:	ldr	r1, [r4, #20]
    5678:	bl	3edc <eval_float>
    567c:	subs	r7, r0, #0
    5680:	bne	517c <eval_boolean+0x638>
    5684:	vldr	d6, [sp, #48]	; 0x30
    5688:	vldr	d7, [sp, #56]	; 0x38
    568c:	vcmpe.f64	d6, d7
    5690:	vmrs	APSR_nzcv, fpscr
    5694:	movge	r3, #1
    5698:	movlt	r3, #0
    569c:	str	r3, [r6]
    56a0:	b	4cdc <eval_boolean+0x198>
    56a4:	add	r2, sp, #48	; 0x30
    56a8:	mov	r0, r5
    56ac:	bl	3edc <eval_float>
    56b0:	cmp	r0, #0
    56b4:	bne	517c <eval_boolean+0x638>
    56b8:	mov	r0, r5
    56bc:	add	r2, sp, #56	; 0x38
    56c0:	ldr	r1, [r4, #20]
    56c4:	bl	3edc <eval_float>
    56c8:	subs	r7, r0, #0
    56cc:	bne	517c <eval_boolean+0x638>
    56d0:	vldr	d6, [sp, #48]	; 0x30
    56d4:	vldr	d7, [sp, #56]	; 0x38
    56d8:	vcmp.f64	d6, d7
    56dc:	vmrs	APSR_nzcv, fpscr
    56e0:	movne	r3, #1
    56e4:	moveq	r3, #0
    56e8:	str	r3, [r6]
    56ec:	b	4cdc <eval_boolean+0x198>
    56f0:	add	r2, sp, #48	; 0x30
    56f4:	mov	r0, r5
    56f8:	bl	3edc <eval_float>
    56fc:	cmp	r0, #0
    5700:	bne	517c <eval_boolean+0x638>
    5704:	mov	r0, r5
    5708:	add	r2, sp, #56	; 0x38
    570c:	ldr	r1, [r4, #20]
    5710:	bl	3edc <eval_float>
    5714:	subs	r7, r0, #0
    5718:	bne	517c <eval_boolean+0x638>
    571c:	vldr	d6, [sp, #48]	; 0x30
    5720:	vldr	d7, [sp, #56]	; 0x38
    5724:	vcmpe.f64	d6, d7
    5728:	vmrs	APSR_nzcv, fpscr
    572c:	movmi	r3, #1
    5730:	movpl	r3, #0
    5734:	str	r3, [r6]
    5738:	b	4cdc <eval_boolean+0x198>
    573c:	add	r2, sp, #48	; 0x30
    5740:	mov	r0, r5
    5744:	bl	3edc <eval_float>
    5748:	cmp	r0, #0
    574c:	bne	517c <eval_boolean+0x638>
    5750:	mov	r0, r5
    5754:	add	r2, sp, #56	; 0x38
    5758:	ldr	r1, [r4, #20]
    575c:	bl	3edc <eval_float>
    5760:	subs	r7, r0, #0
    5764:	bne	517c <eval_boolean+0x638>
    5768:	vldr	d6, [sp, #48]	; 0x30
    576c:	vldr	d7, [sp, #56]	; 0x38
    5770:	vcmpe.f64	d6, d7
    5774:	vmrs	APSR_nzcv, fpscr
    5778:	movls	r3, #1
    577c:	movhi	r3, #0
    5780:	str	r3, [r6]
    5784:	b	4cdc <eval_boolean+0x198>
    5788:	add	r2, sp, #48	; 0x30
    578c:	mov	r0, r5
    5790:	bl	3edc <eval_float>
    5794:	cmp	r0, #0
    5798:	bne	517c <eval_boolean+0x638>
    579c:	mov	r0, r5
    57a0:	add	r2, sp, #56	; 0x38
    57a4:	ldr	r1, [r4, #20]
    57a8:	bl	3edc <eval_float>
    57ac:	subs	r7, r0, #0
    57b0:	bne	517c <eval_boolean+0x638>
    57b4:	vldr	d6, [sp, #48]	; 0x30
    57b8:	vldr	d7, [sp, #56]	; 0x38
    57bc:	vcmpe.f64	d6, d7
    57c0:	vmrs	APSR_nzcv, fpscr
    57c4:	movgt	r3, #1
    57c8:	movle	r3, #0
    57cc:	str	r3, [r6]
    57d0:	b	4cdc <eval_boolean+0x198>
    57d4:	add	r2, sp, #48	; 0x30
    57d8:	ldr	r0, [r3]
    57dc:	ldr	r1, [r1, #12]
    57e0:	bl	0 <coda_product_variable_get_size>
    57e4:	subs	r7, r0, #0
    57e8:	bne	517c <eval_boolean+0x638>
    57ec:	ldr	r2, [sp, #48]	; 0x30
    57f0:	ldr	r3, [r4, #12]
    57f4:	cmp	r2, #0
    57f8:	str	r3, [r5, #560]	; 0x230
    57fc:	ble	584c <eval_boolean+0xd08>
    5800:	mov	r8, #0
    5804:	add	r9, sp, #56	; 0x38
    5808:	mov	sl, r8
    580c:	add	fp, r5, #560	; 0x230
    5810:	mov	r2, r9
    5814:	mov	r0, r5
    5818:	ldr	r1, [r4, #16]
    581c:	stmdb	fp, {r8, sl}
    5820:	bl	4b44 <eval_boolean>
    5824:	cmp	r0, #0
    5828:	bne	517c <eval_boolean+0x638>
    582c:	ldr	r3, [sp, #56]	; 0x38
    5830:	cmp	r3, #0
    5834:	bne	5bac <eval_boolean+0x1068>
    5838:	ldr	r3, [sp, #48]	; 0x30
    583c:	adds	r8, r8, #1
    5840:	adc	sl, sl, #0
    5844:	cmp	r3, r8
    5848:	bgt	5810 <eval_boolean+0xccc>
    584c:	mov	r3, #0
    5850:	str	r3, [r6]
    5854:	str	r3, [r5, #560]	; 0x230
    5858:	b	4cdc <eval_boolean+0x198>
    585c:	movw	r0, #0
    5860:	movt	r0, #0
    5864:	str	r7, [sp]
    5868:	add	r3, sp, #24
    586c:	add	r2, sp, #20
    5870:	mov	r1, #36	; 0x24
    5874:	bl	0 <coda_pcre_compile>
    5878:	mov	r4, r0
    587c:	b	4ee0 <eval_boolean+0x39c>
    5880:	add	r1, sp, #44	; 0x2c
    5884:	mov	r0, r8
    5888:	bl	0 <coda_cursor_get_type_class>
    588c:	subs	r7, r0, #0
    5890:	bne	517c <eval_boolean+0x638>
    5894:	ldr	r3, [sp, #44]	; 0x2c
    5898:	cmp	r3, #6
    589c:	bne	55d4 <eval_boolean+0xa90>
    58a0:	add	r1, sp, #48	; 0x30
    58a4:	mov	r0, r8
    58a8:	bl	0 <coda_cursor_get_special_type>
    58ac:	subs	r4, r0, #0
    58b0:	bne	5bdc <eval_boolean+0x1098>
    58b4:	ldr	r3, [sp, #48]	; 0x30
    58b8:	cmp	r3, #0
    58bc:	bne	55d4 <eval_boolean+0xa90>
    58c0:	mov	r1, r9
    58c4:	mov	r0, r8
    58c8:	str	r4, [r6]
    58cc:	mov	r2, #520	; 0x208
    58d0:	bl	0 <memcpy>
    58d4:	mov	r7, r4
    58d8:	b	4cdc <eval_boolean+0x198>
    58dc:	movw	r0, #0
    58e0:	movt	r0, #0
    58e4:	bl	0 <strdup>
    58e8:	cmp	r0, #0
    58ec:	mov	r2, r0
    58f0:	str	r0, [sp, #36]	; 0x24
    58f4:	bne	4f04 <eval_boolean+0x3c0>
    58f8:	mov	r3, #1120	; 0x460
    58fc:	mvn	r0, #0
    5900:	movw	r2, #0
    5904:	movt	r2, #0
    5908:	movw	r1, #0
    590c:	movt	r1, #0
    5910:	bl	0 <coda_set_error>
    5914:	movw	r3, #0
    5918:	movt	r3, #0
    591c:	mov	r0, r4
    5920:	ldr	r3, [r3]
    5924:	blx	r3
    5928:	b	517c <eval_boolean+0x638>
    592c:	mov	r0, r8
    5930:	bl	0 <coda_cursor_goto_first_array_element>
    5934:	subs	sl, r0, #0
    5938:	bne	517c <eval_boolean+0x638>
    593c:	ldr	r3, [sp, #44]	; 0x2c
    5940:	cmp	r3, #0
    5944:	ble	55d4 <eval_boolean+0xa90>
    5948:	add	fp, sp, #48	; 0x30
    594c:	b	595c <eval_boolean+0xe18>
    5950:	add	sl, sl, #1
    5954:	cmp	sl, r3
    5958:	bge	55d4 <eval_boolean+0xa90>
    595c:	mov	r2, fp
    5960:	mov	r0, r5
    5964:	ldr	r1, [r4, #20]
    5968:	bl	4b44 <eval_boolean>
    596c:	cmp	r0, #0
    5970:	bne	517c <eval_boolean+0x638>
    5974:	ldr	r3, [sp, #48]	; 0x30
    5978:	cmp	r3, #0
    597c:	beq	5bd0 <eval_boolean+0x108c>
    5980:	ldr	r3, [sp, #44]	; 0x2c
    5984:	sub	r2, r3, #1
    5988:	cmp	r2, sl
    598c:	ble	5950 <eval_boolean+0xe0c>
    5990:	mov	r0, r8
    5994:	bl	0 <coda_cursor_goto_next_array_element>
    5998:	cmp	r0, #0
    599c:	bne	517c <eval_boolean+0x638>
    59a0:	ldr	r3, [sp, #44]	; 0x2c
    59a4:	b	5950 <eval_boolean+0xe0c>
    59a8:	mov	r0, r8
    59ac:	bl	0 <coda_cursor_goto_first_array_element>
    59b0:	subs	sl, r0, #0
    59b4:	bne	517c <eval_boolean+0x638>
    59b8:	ldr	r3, [sp, #44]	; 0x2c
    59bc:	cmp	r3, #0
    59c0:	ble	5464 <eval_boolean+0x920>
    59c4:	add	fp, sp, #48	; 0x30
    59c8:	b	59d8 <eval_boolean+0xe94>
    59cc:	add	sl, sl, #1
    59d0:	cmp	r3, sl
    59d4:	ble	5464 <eval_boolean+0x920>
    59d8:	mov	r2, fp
    59dc:	mov	r0, r5
    59e0:	ldr	r1, [r4, #20]
    59e4:	bl	4b44 <eval_boolean>
    59e8:	cmp	r0, #0
    59ec:	bne	517c <eval_boolean+0x638>
    59f0:	ldr	r3, [sp, #48]	; 0x30
    59f4:	cmp	r3, #0
    59f8:	bne	5bc0 <eval_boolean+0x107c>
    59fc:	ldr	r3, [sp, #44]	; 0x2c
    5a00:	sub	r2, r3, #1
    5a04:	cmp	r2, sl
    5a08:	ble	59cc <eval_boolean+0xe88>
    5a0c:	mov	r0, r8
    5a10:	bl	0 <coda_cursor_goto_next_array_element>
    5a14:	cmp	r0, #0
    5a18:	bne	517c <eval_boolean+0x638>
    5a1c:	ldr	r3, [sp, #44]	; 0x2c
    5a20:	b	59cc <eval_boolean+0xe88>
    5a24:	add	r2, sp, #48	; 0x30
    5a28:	bl	5d94 <eval_integer>
    5a2c:	cmp	r0, #0
    5a30:	bne	517c <eval_boolean+0x638>
    5a34:	mov	r0, r5
    5a38:	add	r2, sp, #56	; 0x38
    5a3c:	ldr	r1, [r4, #20]
    5a40:	bl	5d94 <eval_integer>
    5a44:	subs	r7, r0, #0
    5a48:	bne	517c <eval_boolean+0x638>
    5a4c:	ldrd	r0, [sp, #48]	; 0x30
    5a50:	ldrd	r2, [sp, #56]	; 0x38
    5a54:	cmp	r1, r3
    5a58:	cmpeq	r0, r2
    5a5c:	movne	r3, #1
    5a60:	moveq	r3, #0
    5a64:	str	r3, [r6]
    5a68:	b	4cdc <eval_boolean+0x198>
    5a6c:	add	r2, sp, #48	; 0x30
    5a70:	bl	5d94 <eval_integer>
    5a74:	cmp	r0, #0
    5a78:	bne	517c <eval_boolean+0x638>
    5a7c:	mov	r0, r5
    5a80:	add	r2, sp, #56	; 0x38
    5a84:	ldr	r1, [r4, #20]
    5a88:	bl	5d94 <eval_integer>
    5a8c:	subs	r7, r0, #0
    5a90:	bne	517c <eval_boolean+0x638>
    5a94:	ldrd	r0, [sp, #48]	; 0x30
    5a98:	ldrd	r2, [sp, #56]	; 0x38
    5a9c:	cmp	r0, r2
    5aa0:	sbcs	r3, r1, r3
    5aa4:	movlt	r3, #1
    5aa8:	movge	r3, #0
    5aac:	str	r3, [r6]
    5ab0:	b	4cdc <eval_boolean+0x198>
    5ab4:	add	r2, sp, #48	; 0x30
    5ab8:	bl	5d94 <eval_integer>
    5abc:	cmp	r0, #0
    5ac0:	bne	517c <eval_boolean+0x638>
    5ac4:	mov	r0, r5
    5ac8:	add	r2, sp, #56	; 0x38
    5acc:	ldr	r1, [r4, #20]
    5ad0:	bl	5d94 <eval_integer>
    5ad4:	subs	r7, r0, #0
    5ad8:	bne	517c <eval_boolean+0x638>
    5adc:	ldrd	r0, [sp, #48]	; 0x30
    5ae0:	ldrd	r2, [sp, #56]	; 0x38
    5ae4:	cmp	r1, r3
    5ae8:	cmpeq	r0, r2
    5aec:	moveq	r3, #1
    5af0:	movne	r3, #0
    5af4:	str	r3, [r6]
    5af8:	b	4cdc <eval_boolean+0x198>
    5afc:	add	r2, sp, #48	; 0x30
    5b00:	bl	5d94 <eval_integer>
    5b04:	cmp	r0, #0
    5b08:	bne	517c <eval_boolean+0x638>
    5b0c:	mov	r0, r5
    5b10:	add	r2, sp, #56	; 0x38
    5b14:	ldr	r1, [r4, #20]
    5b18:	bl	5d94 <eval_integer>
    5b1c:	subs	r7, r0, #0
    5b20:	bne	517c <eval_boolean+0x638>
    5b24:	ldrd	r0, [sp, #48]	; 0x30
    5b28:	ldrd	r2, [sp, #56]	; 0x38
    5b2c:	cmp	r0, r2
    5b30:	sbcs	r3, r1, r3
    5b34:	movge	r3, #1
    5b38:	movlt	r3, #0
    5b3c:	str	r3, [r6]
    5b40:	b	4cdc <eval_boolean+0x198>
    5b44:	add	r2, sp, #48	; 0x30
    5b48:	bl	5d94 <eval_integer>
    5b4c:	cmp	r0, #0
    5b50:	bne	517c <eval_boolean+0x638>
    5b54:	mov	r0, r5
    5b58:	add	r2, sp, #56	; 0x38
    5b5c:	ldr	r1, [r4, #20]
    5b60:	bl	5d94 <eval_integer>
    5b64:	subs	r7, r0, #0
    5b68:	bne	517c <eval_boolean+0x638>
    5b6c:	ldrd	r2, [sp, #48]	; 0x30
    5b70:	ldrd	r0, [sp, #56]	; 0x38
    5b74:	b	5b2c <eval_boolean+0xfe8>
    5b78:	add	r2, sp, #48	; 0x30
    5b7c:	bl	5d94 <eval_integer>
    5b80:	cmp	r0, #0
    5b84:	bne	517c <eval_boolean+0x638>
    5b88:	mov	r0, r5
    5b8c:	add	r2, sp, #56	; 0x38
    5b90:	ldr	r1, [r4, #20]
    5b94:	bl	5d94 <eval_integer>
    5b98:	subs	r7, r0, #0
    5b9c:	bne	517c <eval_boolean+0x638>
    5ba0:	ldrd	r2, [sp, #48]	; 0x30
    5ba4:	ldrd	r0, [sp, #56]	; 0x38
    5ba8:	b	5a9c <eval_boolean+0xf58>
    5bac:	mov	r3, #1
    5bb0:	mov	r7, r0
    5bb4:	str	r3, [r6]
    5bb8:	str	r0, [r5, #560]	; 0x230
    5bbc:	b	4cdc <eval_boolean+0x198>
    5bc0:	mov	r3, #1
    5bc4:	mov	r7, r0
    5bc8:	str	r3, [r6]
    5bcc:	b	4cdc <eval_boolean+0x198>
    5bd0:	mov	r7, r3
    5bd4:	str	r3, [r6]
    5bd8:	b	4cdc <eval_boolean+0x198>
    5bdc:	mvn	r4, #0
    5be0:	b	58d4 <eval_boolean+0xd90>
    5be4:	ldr	r0, [sp, #48]	; 0x30
    5be8:	bl	0 <free>
    5bec:	b	517c <eval_boolean+0x638>
    5bf0:	ldr	r0, [sp, #48]	; 0x30
    5bf4:	cmp	r0, #0
    5bf8:	beq	517c <eval_boolean+0x638>
    5bfc:	bl	0 <free>
    5c00:	b	517c <eval_boolean+0x638>
    5c04:	movw	r1, #0
    5c08:	movt	r1, #0
    5c0c:	mvn	r0, #400	; 0x190
    5c10:	bl	0 <coda_set_error>
    5c14:	b	517c <eval_boolean+0x638>
    5c18:	mov	r2, r5
    5c1c:	movw	r1, #0
    5c20:	movt	r1, #0
    5c24:	mvn	r0, #400	; 0x190
    5c28:	bl	0 <coda_set_error>
    5c2c:	b	517c <eval_boolean+0x638>
    5c30:	mvn	r0, #400	; 0x190
    5c34:	movw	r1, #0
    5c38:	movt	r1, #0
    5c3c:	ldrd	r2, [sp, #20]
    5c40:	bl	0 <coda_set_error>
    5c44:	ldr	r0, [sp, #36]	; 0x24
    5c48:	cmp	r0, #0
    5c4c:	bne	5bfc <eval_boolean+0x10b8>
    5c50:	b	517c <eval_boolean+0x638>
    5c54:	movw	r1, #0
    5c58:	movt	r1, #0
    5c5c:	ldr	r3, [pc, #300]	; 5d90 <eval_boolean+0x124c>
    5c60:	movw	r0, #0
    5c64:	movt	r0, #0
    5c68:	movw	r2, #1190	; 0x4a6
    5c6c:	bl	0 <__assert_fail>
    5c70:	movw	r1, #0
    5c74:	movt	r1, #0
    5c78:	ldr	r3, [pc, #272]	; 5d90 <eval_boolean+0x124c>
    5c7c:	movw	r0, #0
    5c80:	movt	r0, #0
    5c84:	mov	r2, #668	; 0x29c
    5c88:	bl	0 <__assert_fail>
    5c8c:	movw	r1, #0
    5c90:	movt	r1, #0
    5c94:	ldr	r3, [pc, #244]	; 5d90 <eval_boolean+0x124c>
    5c98:	movw	r0, #0
    5c9c:	movt	r0, #0
    5ca0:	movw	r2, #978	; 0x3d2
    5ca4:	bl	0 <__assert_fail>
    5ca8:	movw	r1, #0
    5cac:	movt	r1, #0
    5cb0:	ldr	r3, [pc, #216]	; 5d90 <eval_boolean+0x124c>
    5cb4:	movw	r0, #0
    5cb8:	movt	r0, #0
    5cbc:	movw	r2, #730	; 0x2da
    5cc0:	bl	0 <__assert_fail>
    5cc4:	movw	r1, #0
    5cc8:	movt	r1, #0
    5ccc:	ldr	r3, [pc, #188]	; 5d90 <eval_boolean+0x124c>
    5cd0:	movw	r0, #0
    5cd4:	movt	r0, #0
    5cd8:	movw	r2, #854	; 0x356
    5cdc:	bl	0 <__assert_fail>
    5ce0:	movw	r1, #0
    5ce4:	movt	r1, #0
    5ce8:	ldr	r3, [pc, #160]	; 5d90 <eval_boolean+0x124c>
    5cec:	movw	r0, #0
    5cf0:	movt	r0, #0
    5cf4:	movw	r2, #1348	; 0x544
    5cf8:	bl	0 <__assert_fail>
    5cfc:	movw	r1, #0
    5d00:	movt	r1, #0
    5d04:	ldr	r3, [pc, #132]	; 5d90 <eval_boolean+0x124c>
    5d08:	movw	r0, #0
    5d0c:	movt	r0, #0
    5d10:	mov	r2, #792	; 0x318
    5d14:	bl	0 <__assert_fail>
    5d18:	movw	r1, #0
    5d1c:	movt	r1, #0
    5d20:	ldr	r3, [pc, #104]	; 5d90 <eval_boolean+0x124c>
    5d24:	movw	r0, #0
    5d28:	movt	r0, #0
    5d2c:	movw	r2, #1288	; 0x508
    5d30:	bl	0 <__assert_fail>
    5d34:	movw	r1, #0
    5d38:	movt	r1, #0
    5d3c:	ldr	r3, [pc, #76]	; 5d90 <eval_boolean+0x124c>
    5d40:	movw	r0, #0
    5d44:	movt	r0, #0
    5d48:	movw	r2, #1239	; 0x4d7
    5d4c:	bl	0 <__assert_fail>
    5d50:	movw	r1, #0
    5d54:	movt	r1, #0
    5d58:	ldr	r3, [pc, #48]	; 5d90 <eval_boolean+0x124c>
    5d5c:	movw	r0, #0
    5d60:	movt	r0, #0
    5d64:	mov	r2, #916	; 0x394
    5d68:	bl	0 <__assert_fail>
    5d6c:	movw	r1, #0
    5d70:	movt	r1, #0
    5d74:	ldr	r3, [pc, #20]	; 5d90 <eval_boolean+0x124c>
    5d78:	movw	r0, #0
    5d7c:	movt	r0, #0
    5d80:	movw	r2, #1148	; 0x47c
    5d84:	bl	0 <__assert_fail>
    5d88:	.word	0x00000b08
    5d8c:	.word	0x00000ae4
    5d90:	.word	0x0000002c

00005d94 <eval_integer>:
    5d94:	ldr	r3, [r1]
    5d98:	strd	r4, [sp, #-36]!	; 0xffffffdc
    5d9c:	strd	r6, [sp, #8]
    5da0:	strd	r8, [sp, #16]
    5da4:	strd	sl, [sp, #24]
    5da8:	cmp	r3, #20
    5dac:	str	lr, [sp, #32]
    5db0:	sub	sp, sp, #580	; 0x244
    5db4:	beq	5f2c <eval_integer+0x198>
    5db8:	mov	r6, r2
    5dbc:	mov	r5, r0
    5dc0:	mov	r4, r1
    5dc4:	cmp	r3, #86	; 0x56
    5dc8:	ldrls	pc, [pc, r3, lsl #2]
    5dcc:	b	6d14 <eval_integer+0xf80>
    5dd0:	.word	0x00006654
    5dd4:	.word	0x00006604
    5dd8:	.word	0x000065c0
    5ddc:	.word	0x000064cc
    5de0:	.word	0x00006d14
    5de4:	.word	0x00006708
    5de8:	.word	0x00006d14
    5dec:	.word	0x00006684
    5df0:	.word	0x00006800
    5df4:	.word	0x00006264
    5df8:	.word	0x00006d14
    5dfc:	.word	0x00006ac4
    5e00:	.word	0x000069c8
    5e04:	.word	0x00006404
    5e08:	.word	0x000063a8
    5e0c:	.word	0x00006a60
    5e10:	.word	0x00006d14
    5e14:	.word	0x00006d14
    5e18:	.word	0x00006d14
    5e1c:	.word	0x00006d14
    5e20:	.word	0x00006d14
    5e24:	.word	0x00006d14
    5e28:	.word	0x00006d14
    5e2c:	.word	0x000068f4
    5e30:	.word	0x000061d4
    5e34:	.word	0x00006d14
    5e38:	.word	0x00006d14
    5e3c:	.word	0x000061ac
    5e40:	.word	0x00006d14
    5e44:	.word	0x00006d14
    5e48:	.word	0x00006d14
    5e4c:	.word	0x00006d14
    5e50:	.word	0x00006d14
    5e54:	.word	0x00006d14
    5e58:	.word	0x00006d14
    5e5c:	.word	0x00006d14
    5e60:	.word	0x00006d14
    5e64:	.word	0x00006d14
    5e68:	.word	0x00006d14
    5e6c:	.word	0x00006d14
    5e70:	.word	0x00006d14
    5e74:	.word	0x00006d14
    5e78:	.word	0x00006b84
    5e7c:	.word	0x00006b38
    5e80:	.word	0x000064b0
    5e84:	.word	0x00006478
    5e88:	.word	0x00006d14
    5e8c:	.word	0x00006d14
    5e90:	.word	0x00006d14
    5e94:	.word	0x00006d14
    5e98:	.word	0x00006c04
    5e9c:	.word	0x00006d14
    5ea0:	.word	0x00006d14
    5ea4:	.word	0x00006d14
    5ea8:	.word	0x00006d14
    5eac:	.word	0x00006d14
    5eb0:	.word	0x00006a14
    5eb4:	.word	0x00006bc0
    5eb8:	.word	0x0000621c
    5ebc:	.word	0x00006cc0
    5ec0:	.word	0x00006b14
    5ec4:	.word	0x00006d14
    5ec8:	.word	0x00006d14
    5ecc:	.word	0x00006344
    5ed0:	.word	0x000062dc
    5ed4:	.word	0x00006c7c
    5ed8:	.word	0x00006d14
    5edc:	.word	0x00006d14
    5ee0:	.word	0x00006d14
    5ee4:	.word	0x00006d14
    5ee8:	.word	0x000069a4
    5eec:	.word	0x00006d14
    5ef0:	.word	0x00006d14
    5ef4:	.word	0x00006d14
    5ef8:	.word	0x00006d14
    5efc:	.word	0x00006d14
    5f00:	.word	0x00006d14
    5f04:	.word	0x00006d14
    5f08:	.word	0x0000615c
    5f0c:	.word	0x00006d14
    5f10:	.word	0x00006d14
    5f14:	.word	0x00006064
    5f18:	.word	0x00006d14
    5f1c:	.word	0x00006034
    5f20:	.word	0x00006d14
    5f24:	.word	0x00005fa4
    5f28:	.word	0x00005f58
    5f2c:	ldrd	r0, [r1, #16]
    5f30:	mov	r7, #0
    5f34:	strd	r0, [r2]
    5f38:	mov	r0, r7
    5f3c:	add	sp, sp, #580	; 0x244
    5f40:	ldrd	r4, [sp]
    5f44:	ldrd	r6, [sp, #8]
    5f48:	ldrd	r8, [sp, #16]
    5f4c:	ldrd	sl, [sp, #24]
    5f50:	add	sp, sp, #32
    5f54:	pop	{pc}		; (ldr pc, [sp], #4)
    5f58:	ldr	r3, [r1, #12]
    5f5c:	ldr	r1, [r1, #16]
    5f60:	ldrb	r2, [r3]
    5f64:	add	sl, r0, r2, lsl #3
    5f68:	sub	r2, r2, #39	; 0x27
    5f6c:	add	r2, r0, r2, lsl #3
    5f70:	sub	sl, sl, #304	; 0x130
    5f74:	ldrd	r8, [sl, #-8]
    5f78:	bl	5d94 <eval_integer>
    5f7c:	cmp	r0, #0
    5f80:	bne	63a0 <eval_integer+0x60c>
    5f84:	mov	r2, r6
    5f88:	mov	r0, r5
    5f8c:	ldr	r1, [r4, #20]
    5f90:	bl	5d94 <eval_integer>
    5f94:	subs	r7, r0, #0
    5f98:	bne	63a0 <eval_integer+0x60c>
    5f9c:	strd	r8, [sl, #-8]
    5fa0:	b	5f38 <eval_integer+0x1a4>
    5fa4:	ldr	r8, [r0]
    5fa8:	mov	r2, #0
    5fac:	mov	r3, #0
    5fb0:	strd	r2, [sp, #56]	; 0x38
    5fb4:	cmp	r8, #0
    5fb8:	beq	7260 <eval_integer+0x14cc>
    5fbc:	ldr	r7, [r1, #16]
    5fc0:	ldr	r1, [r0, #560]	; 0x230
    5fc4:	cmp	r7, #0
    5fc8:	beq	6fdc <eval_integer+0x1248>
    5fcc:	cmp	r1, #0
    5fd0:	beq	5fe8 <eval_integer+0x254>
    5fd4:	ldr	r8, [r4, #12]
    5fd8:	mov	r0, r8
    5fdc:	bl	0 <strcmp>
    5fe0:	cmp	r0, #0
    5fe4:	beq	7174 <eval_integer+0x13e0>
    5fe8:	mov	r1, r7
    5fec:	add	r2, sp, #56	; 0x38
    5ff0:	mov	r0, r5
    5ff4:	bl	5d94 <eval_integer>
    5ff8:	cmp	r0, #0
    5ffc:	bne	63a0 <eval_integer+0x60c>
    6000:	ldr	r8, [r5]
    6004:	ldr	r4, [r4, #12]
    6008:	ldr	r2, [sp, #56]	; 0x38
    600c:	mov	r1, r4
    6010:	add	r3, sp, #24
    6014:	ldr	r0, [r8]
    6018:	bl	0 <coda_product_variable_get_pointer>
    601c:	subs	r7, r0, #0
    6020:	bne	63a0 <eval_integer+0x60c>
    6024:	ldr	r3, [sp, #24]
    6028:	ldrd	r2, [r3]
    602c:	strd	r2, [r6]
    6030:	b	5f38 <eval_integer+0x1a4>
    6034:	ldr	r3, [r0]
    6038:	cmp	r3, #0
    603c:	beq	7378 <eval_integer+0x15e4>
    6040:	ldr	r2, [r0, #560]	; 0x230
    6044:	cmp	r2, #0
    6048:	beq	6dd0 <eval_integer+0x103c>
    604c:	movw	r1, #0
    6050:	movt	r1, #0
    6054:	mvn	r0, #400	; 0x190
    6058:	mvn	r7, #0
    605c:	bl	0 <coda_set_error>
    6060:	b	5f38 <eval_integer+0x1a4>
    6064:	ldr	r3, [r0]
    6068:	mov	r2, #0
    606c:	str	r2, [sp, #24]
    6070:	cmp	r3, r2
    6074:	beq	7244 <eval_integer+0x14b0>
    6078:	add	r9, r0, #8
    607c:	add	fp, sp, #56	; 0x38
    6080:	mov	r1, r9
    6084:	mov	r2, #520	; 0x208
    6088:	mov	r0, fp
    608c:	bl	0 <memcpy>
    6090:	mov	r0, r5
    6094:	ldr	r1, [r4, #16]
    6098:	bl	7420 <eval_cursor>
    609c:	subs	r1, r0, #0
    60a0:	bne	63a0 <eval_integer+0x60c>
    60a4:	ldr	r2, [pc, #4008]	; 7054 <eval_integer+0x12c0>
    60a8:	mrc	15, 0, r8, cr13, cr0, {3}
    60ac:	mov	r0, r9
    60b0:	ldr	r3, [pc, #4000]	; 7058 <eval_integer+0x12c4>
    60b4:	ldr	r2, [pc, r2]
    60b8:	ldr	r3, [pc, r3]
    60bc:	ldr	sl, [r8, r2]
    60c0:	str	r1, [r8, r3]
    60c4:	bl	0 <coda_cursor_goto_first_array_element>
    60c8:	subs	r7, r0, #0
    60cc:	ldrne	r3, [pc, #3976]	; 705c <eval_integer+0x12c8>
    60d0:	ldrne	r3, [pc, r3]
    60d4:	strne	sl, [r8, r3]
    60d8:	bne	63a0 <eval_integer+0x60c>
    60dc:	ldr	r3, [sp, #24]
    60e0:	mov	r0, #0
    60e4:	mov	r1, #0
    60e8:	strd	r0, [r6]
    60ec:	cmp	r3, #0
    60f0:	bne	613c <eval_integer+0x3a8>
    60f4:	ldr	r1, [r4, #20]
    60f8:	ldr	r3, [r4, #24]
    60fc:	cmp	r3, #0
    6100:	beq	6d30 <eval_integer+0xf9c>
    6104:	add	r2, sp, #24
    6108:	mov	r0, r5
    610c:	bl	4b44 <eval_boolean>
    6110:	cmp	r0, #0
    6114:	bne	7010 <eval_integer+0x127c>
    6118:	ldr	r3, [sp, #24]
    611c:	cmp	r3, #0
    6120:	ldreq	r1, [r4, #20]
    6124:	beq	6d30 <eval_integer+0xf9c>
    6128:	mvn	r0, #0
    612c:	mvn	r1, #0
    6130:	cmp	r3, #0
    6134:	strd	r0, [r6]
    6138:	beq	60f4 <eval_integer+0x360>
    613c:	ldr	r3, [pc, #3868]	; 7060 <eval_integer+0x12cc>
    6140:	mov	r1, fp
    6144:	mov	r0, r9
    6148:	mov	r2, #520	; 0x208
    614c:	ldr	r3, [pc, r3]
    6150:	str	sl, [r8, r3]
    6154:	bl	0 <memcpy>
    6158:	b	5f38 <eval_integer+0x1a4>
    615c:	add	r2, sp, #24
    6160:	ldr	r1, [r1, #16]
    6164:	bl	5d94 <eval_integer>
    6168:	cmp	r0, #0
    616c:	bne	63a0 <eval_integer+0x60c>
    6170:	mov	r0, r5
    6174:	add	r2, sp, #56	; 0x38
    6178:	ldr	r1, [r4, #20]
    617c:	bl	5d94 <eval_integer>
    6180:	subs	r7, r0, #0
    6184:	bne	63a0 <eval_integer+0x60c>
    6188:	ldr	r3, [sp, #24]
    618c:	ldr	r2, [sp, #28]
    6190:	ldr	r1, [sp, #56]	; 0x38
    6194:	ldr	r0, [sp, #60]	; 0x3c
    6198:	subs	r3, r3, r1
    619c:	str	r3, [r6]
    61a0:	sbc	r3, r2, r0
    61a4:	str	r3, [r6, #4]
    61a8:	b	5f38 <eval_integer+0x1a4>
    61ac:	ldr	r3, [r0]
    61b0:	cmp	r3, #0
    61b4:	beq	72ec <eval_integer+0x1558>
    61b8:	mov	r1, r2
    61bc:	ldr	r0, [r3]
    61c0:	bl	0 <coda_get_product_file_size>
    61c4:	adds	r0, r0, #0
    61c8:	movne	r0, #1
    61cc:	rsb	r7, r0, #0
    61d0:	b	5f38 <eval_integer+0x1a4>
    61d4:	add	r2, sp, #24
    61d8:	ldr	r1, [r1, #16]
    61dc:	bl	5d94 <eval_integer>
    61e0:	cmp	r0, #0
    61e4:	bne	63a0 <eval_integer+0x60c>
    61e8:	mov	r0, r5
    61ec:	add	r2, sp, #56	; 0x38
    61f0:	ldr	r1, [r4, #20]
    61f4:	bl	5d94 <eval_integer>
    61f8:	subs	r7, r0, #0
    61fc:	bne	63a0 <eval_integer+0x60c>
    6200:	ldrd	r2, [sp, #56]	; 0x38
    6204:	orrs	r1, r2, r3
    6208:	beq	718c <eval_integer+0x13f8>
    620c:	ldrd	r0, [sp, #24]
    6210:	bl	0 <__aeabi_ldivmod>
    6214:	strd	r0, [r6]
    6218:	b	5f38 <eval_integer+0x1a4>
    621c:	add	r2, sp, #24
    6220:	ldr	r1, [r1, #16]
    6224:	bl	5d94 <eval_integer>
    6228:	cmp	r0, #0
    622c:	bne	63a0 <eval_integer+0x60c>
    6230:	mov	r0, r5
    6234:	add	r2, sp, #56	; 0x38
    6238:	ldr	r1, [r4, #20]
    623c:	bl	5d94 <eval_integer>
    6240:	subs	r7, r0, #0
    6244:	bne	63a0 <eval_integer+0x60c>
    6248:	ldrd	r2, [sp, #56]	; 0x38
    624c:	orrs	r1, r2, r3
    6250:	beq	7160 <eval_integer+0x13cc>
    6254:	ldrd	r0, [sp, #24]
    6258:	bl	0 <__aeabi_ldivmod>
    625c:	strd	r2, [r6]
    6260:	b	5f38 <eval_integer+0x1a4>
    6264:	ldr	r3, [r0]
    6268:	cmp	r3, #0
    626c:	beq	71f0 <eval_integer+0x145c>
    6270:	add	r9, r0, #8
    6274:	add	fp, sp, #56	; 0x38
    6278:	mov	r1, r9
    627c:	mov	r2, #520	; 0x208
    6280:	mov	r0, fp
    6284:	bl	0 <memcpy>
    6288:	mov	r0, r5
    628c:	ldr	r1, [r4, #16]
    6290:	bl	7420 <eval_cursor>
    6294:	cmp	r0, #0
    6298:	bne	63a0 <eval_integer+0x60c>
    629c:	add	r1, sp, #16
    62a0:	mov	r0, r9
    62a4:	bl	0 <coda_cursor_get_num_elements>
    62a8:	subs	r7, r0, #0
    62ac:	bne	63a0 <eval_integer+0x60c>
    62b0:	ldr	r3, [sp, #16]
    62b4:	mov	r0, #0
    62b8:	mov	r1, #0
    62bc:	strd	r0, [r6]
    62c0:	cmp	r3, #0
    62c4:	bgt	6e5c <eval_integer+0x10c8>
    62c8:	mov	r1, fp
    62cc:	mov	r0, r9
    62d0:	mov	r2, #520	; 0x208
    62d4:	bl	0 <memcpy>
    62d8:	b	5f38 <eval_integer+0x1a4>
    62dc:	ldr	r3, [r0]
    62e0:	cmp	r3, #0
    62e4:	beq	72d0 <eval_integer+0x153c>
    62e8:	add	r8, r0, #8
    62ec:	mov	r2, #520	; 0x208
    62f0:	mov	r1, r8
    62f4:	add	r0, sp, #56	; 0x38
    62f8:	bl	0 <memcpy>
    62fc:	mov	r0, r5
    6300:	ldr	r1, [r4, #16]
    6304:	bl	7420 <eval_cursor>
    6308:	cmp	r0, #0
    630c:	bne	63a0 <eval_integer+0x60c>
    6310:	add	r1, sp, #24
    6314:	mov	r0, r8
    6318:	bl	0 <coda_cursor_get_num_elements>
    631c:	subs	r7, r0, #0
    6320:	bne	63a0 <eval_integer+0x60c>
    6324:	mov	r2, #520	; 0x208
    6328:	add	r1, sp, #56	; 0x38
    632c:	mov	r0, r8
    6330:	bl	0 <memcpy>
    6334:	ldr	r2, [sp, #24]
    6338:	asr	r3, r2, #31
    633c:	strd	r2, [r6]
    6340:	b	5f38 <eval_integer+0x1a4>
    6344:	ldr	r3, [r0]
    6348:	cmp	r3, #0
    634c:	beq	7308 <eval_integer+0x1574>
    6350:	add	r8, r0, #8
    6354:	mov	r2, #520	; 0x208
    6358:	mov	r1, r8
    635c:	add	r0, sp, #56	; 0x38
    6360:	bl	0 <memcpy>
    6364:	mov	r0, r5
    6368:	ldr	r1, [r4, #16]
    636c:	bl	7420 <eval_cursor>
    6370:	cmp	r0, #0
    6374:	bne	63a0 <eval_integer+0x60c>
    6378:	add	r1, sp, #16
    637c:	mov	r0, r8
    6380:	bl	0 <coda_cursor_get_type>
    6384:	cmp	r0, #0
    6388:	bne	63a0 <eval_integer+0x60c>
    638c:	add	r1, sp, #24
    6390:	ldr	r0, [sp, #16]
    6394:	bl	0 <coda_type_get_array_num_dims>
    6398:	subs	r7, r0, #0
    639c:	beq	6324 <eval_integer+0x590>
    63a0:	mvn	r7, #0
    63a4:	b	5f38 <eval_integer+0x1a4>
    63a8:	ldr	r3, [r0]
    63ac:	cmp	r3, #0
    63b0:	beq	7324 <eval_integer+0x1590>
    63b4:	add	r8, r0, #8
    63b8:	mov	r2, #520	; 0x208
    63bc:	mov	r1, r8
    63c0:	add	r0, sp, #56	; 0x38
    63c4:	bl	0 <memcpy>
    63c8:	mov	r0, r5
    63cc:	ldr	r1, [r4, #16]
    63d0:	bl	7420 <eval_cursor>
    63d4:	cmp	r0, #0
    63d8:	bne	63a0 <eval_integer+0x60c>
    63dc:	mov	r1, r6
    63e0:	mov	r0, r8
    63e4:	bl	0 <coda_cursor_get_file_byte_offset>
    63e8:	subs	r7, r0, #0
    63ec:	bne	63a0 <eval_integer+0x60c>
    63f0:	add	r1, sp, #56	; 0x38
    63f4:	mov	r0, r8
    63f8:	mov	r2, #520	; 0x208
    63fc:	bl	0 <memcpy>
    6400:	b	5f38 <eval_integer+0x1a4>
    6404:	ldr	r3, [r0]
    6408:	cmp	r3, #0
    640c:	beq	72b4 <eval_integer+0x1520>
    6410:	add	r8, r0, #8
    6414:	mov	r2, #520	; 0x208
    6418:	mov	r1, r8
    641c:	add	r0, sp, #56	; 0x38
    6420:	bl	0 <memcpy>
    6424:	mov	r0, r5
    6428:	ldr	r1, [r4, #16]
    642c:	bl	7420 <eval_cursor>
    6430:	subs	r5, r0, #0
    6434:	bne	63a0 <eval_integer+0x60c>
    6438:	bl	0 <coda_get_option_use_fast_size_expressions>
    643c:	mov	r4, r0
    6440:	mov	r0, r5
    6444:	bl	0 <coda_set_option_use_fast_size_expressions>
    6448:	mov	r1, r6
    644c:	mov	r0, r8
    6450:	bl	0 <coda_cursor_get_bit_size>
    6454:	subs	r7, r0, #0
    6458:	mov	r0, r4
    645c:	bne	6abc <eval_integer+0xd28>
    6460:	bl	0 <coda_set_option_use_fast_size_expressions>
    6464:	add	r1, sp, #56	; 0x38
    6468:	mov	r0, r8
    646c:	mov	r2, #520	; 0x208
    6470:	bl	0 <memcpy>
    6474:	b	5f38 <eval_integer+0x1a4>
    6478:	ldr	r4, [r1, #16]
    647c:	ldr	r3, [r4, #4]
    6480:	cmp	r3, #4
    6484:	beq	6eec <eval_integer+0x1158>
    6488:	cmp	r3, #0
    648c:	bne	6f84 <eval_integer+0x11f0>
    6490:	mov	r1, r4
    6494:	add	r2, sp, #56	; 0x38
    6498:	bl	4b44 <eval_boolean>
    649c:	subs	r7, r0, #0
    64a0:	bne	63a0 <eval_integer+0x60c>
    64a4:	ldr	r2, [sp, #56]	; 0x38
    64a8:	asr	r3, r2, #31
    64ac:	b	602c <eval_integer+0x298>
    64b0:	ldr	r3, [r1, #12]
    64b4:	mov	r7, #0
    64b8:	ldrb	r3, [r3]
    64bc:	sub	r3, r3, #39	; 0x27
    64c0:	lsl	r3, r3, #3
    64c4:	ldrd	r2, [r3, r0]
    64c8:	b	602c <eval_integer+0x298>
    64cc:	ldr	r3, [r0]
    64d0:	cmp	r3, #0
    64d4:	beq	7228 <eval_integer+0x1494>
    64d8:	add	r9, r0, #8
    64dc:	add	fp, sp, #56	; 0x38
    64e0:	mov	r1, r9
    64e4:	mov	r2, #520	; 0x208
    64e8:	mov	r0, fp
    64ec:	bl	0 <memcpy>
    64f0:	mov	r0, r5
    64f4:	ldr	r1, [r4, #16]
    64f8:	bl	7420 <eval_cursor>
    64fc:	cmp	r0, #0
    6500:	bne	63a0 <eval_integer+0x60c>
    6504:	add	r1, sp, #16
    6508:	mov	r0, r9
    650c:	bl	0 <coda_cursor_get_num_elements>
    6510:	subs	r7, r0, #0
    6514:	bne	63a0 <eval_integer+0x60c>
    6518:	ldr	r3, [sp, #16]
    651c:	mov	r0, #0
    6520:	mov	r1, #0
    6524:	strd	r0, [r6]
    6528:	cmp	r3, #0
    652c:	ble	62c8 <eval_integer+0x534>
    6530:	mov	r0, r9
    6534:	bl	0 <coda_cursor_goto_first_array_element>
    6538:	subs	sl, r0, #0
    653c:	bne	63a0 <eval_integer+0x60c>
    6540:	ldr	r3, [sp, #16]
    6544:	cmp	r3, #0
    6548:	ble	62c8 <eval_integer+0x534>
    654c:	add	r8, sp, #24
    6550:	b	6560 <eval_integer+0x7cc>
    6554:	add	sl, sl, #1
    6558:	cmp	sl, r1
    655c:	bge	62c8 <eval_integer+0x534>
    6560:	mov	r2, r8
    6564:	mov	r0, r5
    6568:	ldr	r1, [r4, #20]
    656c:	bl	5d94 <eval_integer>
    6570:	cmp	r0, #0
    6574:	bne	63a0 <eval_integer+0x60c>
    6578:	ldr	r3, [r6]
    657c:	ldr	r1, [sp, #16]
    6580:	ldr	r2, [sp, #24]
    6584:	ldr	r0, [sp, #28]
    6588:	sub	ip, r1, #1
    658c:	adds	r3, r3, r2
    6590:	ldr	r2, [r6, #4]
    6594:	str	r3, [r6]
    6598:	adc	r3, r2, r0
    659c:	cmp	ip, sl
    65a0:	str	r3, [r6, #4]
    65a4:	ble	6554 <eval_integer+0x7c0>
    65a8:	mov	r0, r9
    65ac:	bl	0 <coda_cursor_goto_next_array_element>
    65b0:	cmp	r0, #0
    65b4:	bne	63a0 <eval_integer+0x60c>
    65b8:	ldr	r1, [sp, #16]
    65bc:	b	6554 <eval_integer+0x7c0>
    65c0:	add	r2, sp, #24
    65c4:	ldr	r1, [r1, #16]
    65c8:	bl	5d94 <eval_integer>
    65cc:	cmp	r0, #0
    65d0:	bne	63a0 <eval_integer+0x60c>
    65d4:	mov	r0, r5
    65d8:	add	r2, sp, #56	; 0x38
    65dc:	ldr	r1, [r4, #20]
    65e0:	bl	5d94 <eval_integer>
    65e4:	subs	r7, r0, #0
    65e8:	bne	63a0 <eval_integer+0x60c>
    65ec:	ldrd	r2, [sp, #24]
    65f0:	ldrd	r0, [sp, #56]	; 0x38
    65f4:	and	r2, r2, r0
    65f8:	and	r3, r3, r1
    65fc:	strd	r2, [r6]
    6600:	b	5f38 <eval_integer+0x1a4>
    6604:	add	r2, sp, #24
    6608:	ldr	r1, [r1, #16]
    660c:	bl	5d94 <eval_integer>
    6610:	cmp	r0, #0
    6614:	bne	63a0 <eval_integer+0x60c>
    6618:	mov	r0, r5
    661c:	add	r2, sp, #56	; 0x38
    6620:	ldr	r1, [r4, #20]
    6624:	bl	5d94 <eval_integer>
    6628:	subs	r7, r0, #0
    662c:	bne	63a0 <eval_integer+0x60c>
    6630:	ldr	r3, [sp, #24]
    6634:	ldr	r2, [sp, #28]
    6638:	ldr	r1, [sp, #56]	; 0x38
    663c:	ldr	r0, [sp, #60]	; 0x3c
    6640:	adds	r3, r3, r1
    6644:	str	r3, [r6]
    6648:	adc	r3, r2, r0
    664c:	str	r3, [r6, #4]
    6650:	b	5f38 <eval_integer+0x1a4>
    6654:	ldr	r1, [r1, #16]
    6658:	bl	5d94 <eval_integer>
    665c:	subs	r7, r0, #0
    6660:	bne	63a0 <eval_integer+0x60c>
    6664:	ldm	r6, {r1, r2}
    6668:	asr	r3, r2, #31
    666c:	eor	r1, r1, r3
    6670:	eor	r2, r2, r3
    6674:	subs	r1, r1, r3
    6678:	sbc	r3, r2, r3
    667c:	stm	r6, {r1, r3}
    6680:	b	5f38 <eval_integer+0x1a4>
    6684:	ldr	r3, [r0]
    6688:	cmp	r3, #0
    668c:	beq	7394 <eval_integer+0x1600>
    6690:	add	r9, r0, #8
    6694:	add	fp, sp, #56	; 0x38
    6698:	mov	r1, r9
    669c:	mov	r2, #520	; 0x208
    66a0:	mov	r0, fp
    66a4:	bl	0 <memcpy>
    66a8:	mov	r0, r5
    66ac:	ldr	r1, [r4, #16]
    66b0:	bl	7420 <eval_cursor>
    66b4:	cmp	r0, #0
    66b8:	bne	63a0 <eval_integer+0x60c>
    66bc:	add	r1, sp, #16
    66c0:	mov	r0, r9
    66c4:	bl	0 <coda_cursor_get_num_elements>
    66c8:	subs	r7, r0, #0
    66cc:	bne	63a0 <eval_integer+0x60c>
    66d0:	ldr	r3, [sp, #16]
    66d4:	mov	r0, #0
    66d8:	mov	r1, #0
    66dc:	strd	r0, [r6]
    66e0:	cmp	r3, #0
    66e4:	bgt	7030 <eval_integer+0x129c>
    66e8:	mvn	r4, #0
    66ec:	mvn	r5, #0
    66f0:	mov	r1, fp
    66f4:	mov	r0, r9
    66f8:	mov	r2, #520	; 0x208
    66fc:	strd	r4, [r6]
    6700:	bl	0 <memcpy>
    6704:	b	5f38 <eval_integer+0x1a4>
    6708:	ldr	r3, [r0]
    670c:	cmp	r3, #0
    6710:	beq	735c <eval_integer+0x15c8>
    6714:	add	r9, r0, #8
    6718:	add	fp, sp, #56	; 0x38
    671c:	mov	r1, r9
    6720:	mov	r2, #520	; 0x208
    6724:	mov	r0, fp
    6728:	bl	0 <memcpy>
    672c:	mov	r0, r5
    6730:	ldr	r1, [r4, #16]
    6734:	bl	7420 <eval_cursor>
    6738:	cmp	r0, #0
    673c:	bne	63a0 <eval_integer+0x60c>
    6740:	add	r1, sp, #16
    6744:	mov	r0, r9
    6748:	bl	0 <coda_cursor_get_num_elements>
    674c:	subs	r7, r0, #0
    6750:	bne	63a0 <eval_integer+0x60c>
    6754:	ldr	r3, [sp, #16]
    6758:	mov	r0, #0
    675c:	mov	r1, #0
    6760:	strd	r0, [r6]
    6764:	cmp	r3, #0
    6768:	ble	62c8 <eval_integer+0x534>
    676c:	mov	r0, r9
    6770:	bl	0 <coda_cursor_goto_first_array_element>
    6774:	subs	sl, r0, #0
    6778:	bne	63a0 <eval_integer+0x60c>
    677c:	ldr	r3, [sp, #16]
    6780:	cmp	r3, #0
    6784:	ble	62c8 <eval_integer+0x534>
    6788:	add	r8, sp, #24
    678c:	b	679c <eval_integer+0xa08>
    6790:	add	sl, sl, #1
    6794:	cmp	sl, r3
    6798:	bge	62c8 <eval_integer+0x534>
    679c:	mov	r2, r8
    67a0:	mov	r0, r5
    67a4:	ldr	r1, [r4, #20]
    67a8:	bl	4b44 <eval_boolean>
    67ac:	cmp	r0, #0
    67b0:	bne	63a0 <eval_integer+0x60c>
    67b4:	ldr	r3, [sp, #24]
    67b8:	cmp	r3, #0
    67bc:	beq	67d8 <eval_integer+0xa44>
    67c0:	ldr	r3, [r6]
    67c4:	ldr	r2, [r6, #4]
    67c8:	adds	r3, r3, #1
    67cc:	adc	r2, r2, #0
    67d0:	str	r3, [r6]
    67d4:	str	r2, [r6, #4]
    67d8:	ldr	r3, [sp, #16]
    67dc:	sub	r2, r3, #1
    67e0:	cmp	r2, sl
    67e4:	ble	6790 <eval_integer+0x9fc>
    67e8:	mov	r0, r9
    67ec:	bl	0 <coda_cursor_goto_next_array_element>
    67f0:	cmp	r0, #0
    67f4:	bne	63a0 <eval_integer+0x60c>
    67f8:	ldr	r3, [sp, #16]
    67fc:	b	6790 <eval_integer+0x9fc>
    6800:	ldr	r3, [r0]
    6804:	cmp	r3, #0
    6808:	beq	73cc <eval_integer+0x1638>
    680c:	add	r9, r0, #8
    6810:	add	fp, sp, #56	; 0x38
    6814:	mov	r1, r9
    6818:	mov	r2, #520	; 0x208
    681c:	mov	r0, fp
    6820:	bl	0 <memcpy>
    6824:	mov	r0, r5
    6828:	ldr	r1, [r4, #16]
    682c:	bl	7420 <eval_cursor>
    6830:	cmp	r0, #0
    6834:	bne	63a0 <eval_integer+0x60c>
    6838:	add	r1, sp, #16
    683c:	mov	r0, r9
    6840:	bl	0 <coda_cursor_get_num_elements>
    6844:	subs	r7, r0, #0
    6848:	bne	63a0 <eval_integer+0x60c>
    684c:	ldr	r3, [sp, #16]
    6850:	mov	r0, #0
    6854:	mov	r1, #0
    6858:	strd	r0, [r6]
    685c:	cmp	r3, #0
    6860:	ble	62c8 <eval_integer+0x534>
    6864:	mov	r0, r9
    6868:	bl	0 <coda_cursor_goto_first_array_element>
    686c:	subs	sl, r0, #0
    6870:	bne	63a0 <eval_integer+0x60c>
    6874:	ldr	r3, [sp, #16]
    6878:	cmp	r3, #0
    687c:	ble	62c8 <eval_integer+0x534>
    6880:	add	r8, sp, #24
    6884:	b	6894 <eval_integer+0xb00>
    6888:	add	sl, sl, #1
    688c:	cmp	sl, r3
    6890:	bge	62c8 <eval_integer+0x534>
    6894:	mov	r2, r8
    6898:	mov	r0, r5
    689c:	ldr	r1, [r4, #20]
    68a0:	bl	5d94 <eval_integer>
    68a4:	cmp	r0, #0
    68a8:	bne	63a0 <eval_integer+0x60c>
    68ac:	cmp	sl, #0
    68b0:	ldrd	r2, [sp, #24]
    68b4:	beq	68c8 <eval_integer+0xb34>
    68b8:	ldrd	r0, [r6]
    68bc:	cmp	r0, r2
    68c0:	sbcs	r1, r1, r3
    68c4:	bge	68cc <eval_integer+0xb38>
    68c8:	strd	r2, [r6]
    68cc:	ldr	r3, [sp, #16]
    68d0:	sub	r2, r3, #1
    68d4:	cmp	r2, sl
    68d8:	ble	6888 <eval_integer+0xaf4>
    68dc:	mov	r0, r9
    68e0:	bl	0 <coda_cursor_goto_next_array_element>
    68e4:	cmp	r0, #0
    68e8:	bne	63a0 <eval_integer+0x60c>
    68ec:	ldr	r3, [sp, #16]
    68f0:	b	6888 <eval_integer+0xaf4>
    68f4:	ldr	r3, [r0]
    68f8:	cmp	r3, #0
    68fc:	beq	71d4 <eval_integer+0x1440>
    6900:	add	r8, r0, #8
    6904:	mov	r2, #520	; 0x208
    6908:	mov	r1, r8
    690c:	add	r0, sp, #56	; 0x38
    6910:	bl	0 <memcpy>
    6914:	mov	r0, r5
    6918:	ldr	r1, [r4, #16]
    691c:	bl	7420 <eval_cursor>
    6920:	cmp	r0, #0
    6924:	bne	63a0 <eval_integer+0x60c>
    6928:	mov	r0, r5
    692c:	add	r2, sp, #16
    6930:	ldr	r1, [r4, #20]
    6934:	bl	5d94 <eval_integer>
    6938:	cmp	r0, #0
    693c:	bne	63a0 <eval_integer+0x60c>
    6940:	add	r2, sp, #24
    6944:	add	r1, sp, #12
    6948:	mov	r0, r8
    694c:	bl	0 <coda_cursor_get_array_dim>
    6950:	subs	r7, r0, #0
    6954:	bne	63a0 <eval_integer+0x60c>
    6958:	ldrd	r4, [sp, #16]
    695c:	cmp	r4, #0
    6960:	sbcs	r3, r5, #0
    6964:	blt	71a0 <eval_integer+0x140c>
    6968:	ldr	r3, [sp, #12]
    696c:	asr	r1, r3, #31
    6970:	cmp	r4, r3
    6974:	sbcs	r2, r5, r1
    6978:	bge	713c <eval_integer+0x13a8>
    697c:	mov	r2, #520	; 0x208
    6980:	add	r1, sp, #56	; 0x38
    6984:	mov	r0, r8
    6988:	bl	0 <memcpy>
    698c:	add	r3, sp, #576	; 0x240
    6990:	add	r4, r3, r4, lsl #2
    6994:	ldr	r2, [r4, #-552]	; 0xfffffdd8
    6998:	asr	r3, r2, #31
    699c:	strd	r2, [r6]
    69a0:	b	5f38 <eval_integer+0x1a4>
    69a4:	ldr	r3, [r0]
    69a8:	cmp	r3, #0
    69ac:	beq	73e8 <eval_integer+0x1654>
    69b0:	add	r1, sp, #56	; 0x38
    69b4:	ldr	r0, [r3]
    69b8:	bl	0 <coda_get_product_version>
    69bc:	subs	r7, r0, #0
    69c0:	beq	64a4 <eval_integer+0x710>
    69c4:	b	63a0 <eval_integer+0x60c>
    69c8:	ldr	r3, [r0]
    69cc:	cmp	r3, #0
    69d0:	beq	720c <eval_integer+0x1478>
    69d4:	add	r8, r0, #8
    69d8:	mov	r2, #520	; 0x208
    69dc:	mov	r1, r8
    69e0:	add	r0, sp, #56	; 0x38
    69e4:	bl	0 <memcpy>
    69e8:	mov	r0, r5
    69ec:	ldr	r1, [r4, #16]
    69f0:	bl	7420 <eval_cursor>
    69f4:	cmp	r0, #0
    69f8:	bne	63a0 <eval_integer+0x60c>
    69fc:	mov	r1, r6
    6a00:	mov	r0, r8
    6a04:	bl	0 <coda_cursor_get_file_bit_offset>
    6a08:	subs	r7, r0, #0
    6a0c:	beq	63f0 <eval_integer+0x65c>
    6a10:	b	63a0 <eval_integer+0x60c>
    6a14:	add	r2, sp, #24
    6a18:	ldr	r1, [r1, #16]
    6a1c:	bl	5d94 <eval_integer>
    6a20:	cmp	r0, #0
    6a24:	bne	63a0 <eval_integer+0x60c>
    6a28:	mov	r0, r5
    6a2c:	add	r2, sp, #56	; 0x38
    6a30:	ldr	r1, [r4, #20]
    6a34:	bl	5d94 <eval_integer>
    6a38:	subs	r7, r0, #0
    6a3c:	bne	63a0 <eval_integer+0x60c>
    6a40:	ldrd	r0, [sp, #24]
    6a44:	ldrd	r2, [sp, #56]	; 0x38
    6a48:	cmp	r2, r0
    6a4c:	sbcs	ip, r3, r1
    6a50:	bge	602c <eval_integer+0x298>
    6a54:	mov	r2, r0
    6a58:	mov	r3, r1
    6a5c:	b	602c <eval_integer+0x298>
    6a60:	ldr	r3, [r0]
    6a64:	cmp	r3, #0
    6a68:	beq	7298 <eval_integer+0x1504>
    6a6c:	add	r8, r0, #8
    6a70:	mov	r2, #520	; 0x208
    6a74:	mov	r1, r8
    6a78:	add	r0, sp, #56	; 0x38
    6a7c:	bl	0 <memcpy>
    6a80:	mov	r0, r5
    6a84:	ldr	r1, [r4, #16]
    6a88:	bl	7420 <eval_cursor>
    6a8c:	subs	r5, r0, #0
    6a90:	bne	63a0 <eval_integer+0x60c>
    6a94:	bl	0 <coda_get_option_use_fast_size_expressions>
    6a98:	mov	r4, r0
    6a9c:	mov	r0, r5
    6aa0:	bl	0 <coda_set_option_use_fast_size_expressions>
    6aa4:	mov	r1, r6
    6aa8:	mov	r0, r8
    6aac:	bl	0 <coda_cursor_get_byte_size>
    6ab0:	subs	r7, r0, #0
    6ab4:	mov	r0, r4
    6ab8:	beq	6460 <eval_integer+0x6cc>
    6abc:	bl	0 <coda_set_option_use_fast_size_expressions>
    6ac0:	b	63a0 <eval_integer+0x60c>
    6ac4:	ldr	r3, [r0]
    6ac8:	cmp	r3, #0
    6acc:	beq	73b0 <eval_integer+0x161c>
    6ad0:	add	r8, r0, #8
    6ad4:	mov	r2, #520	; 0x208
    6ad8:	mov	r1, r8
    6adc:	add	r0, sp, #56	; 0x38
    6ae0:	bl	0 <memcpy>
    6ae4:	mov	r0, r5
    6ae8:	ldr	r1, [r4, #16]
    6aec:	bl	7420 <eval_cursor>
    6af0:	cmp	r0, #0
    6af4:	bne	63a0 <eval_integer+0x60c>
    6af8:	mov	r2, r6
    6afc:	mov	r0, r5
    6b00:	ldr	r1, [r4, #20]
    6b04:	bl	5d94 <eval_integer>
    6b08:	subs	r7, r0, #0
    6b0c:	beq	63f0 <eval_integer+0x65c>
    6b10:	b	63a0 <eval_integer+0x60c>
    6b14:	ldr	r1, [r1, #16]
    6b18:	bl	5d94 <eval_integer>
    6b1c:	subs	r7, r0, #0
    6b20:	bne	63a0 <eval_integer+0x60c>
    6b24:	ldrd	r2, [r6]
    6b28:	rsbs	r2, r2, #0
    6b2c:	rsc	r3, r3, #0
    6b30:	strd	r2, [r6]
    6b34:	b	5f38 <eval_integer+0x1a4>
    6b38:	ldr	r3, [r0]
    6b3c:	cmp	r3, #0
    6b40:	beq	7404 <eval_integer+0x1670>
    6b44:	add	r8, r0, #8
    6b48:	mov	r2, #520	; 0x208
    6b4c:	mov	r1, r8
    6b50:	add	r0, sp, #56	; 0x38
    6b54:	bl	0 <memcpy>
    6b58:	mov	r0, r5
    6b5c:	ldr	r1, [r4, #16]
    6b60:	bl	7420 <eval_cursor>
    6b64:	cmp	r0, #0
    6b68:	bne	63a0 <eval_integer+0x60c>
    6b6c:	add	r1, sp, #24
    6b70:	mov	r0, r8
    6b74:	bl	0 <coda_cursor_get_index>
    6b78:	subs	r7, r0, #0
    6b7c:	beq	6324 <eval_integer+0x590>
    6b80:	b	63a0 <eval_integer+0x60c>
    6b84:	add	r2, sp, #56	; 0x38
    6b88:	ldr	r1, [r1, #16]
    6b8c:	bl	4b44 <eval_boolean>
    6b90:	subs	r7, r0, #0
    6b94:	bne	63a0 <eval_integer+0x60c>
    6b98:	ldr	r3, [sp, #56]	; 0x38
    6b9c:	mov	r2, r6
    6ba0:	mov	r0, r5
    6ba4:	cmp	r3, #0
    6ba8:	beq	6d80 <eval_integer+0xfec>
    6bac:	ldr	r1, [r4, #20]
    6bb0:	bl	5d94 <eval_integer>
    6bb4:	cmp	r0, #0
    6bb8:	beq	5f38 <eval_integer+0x1a4>
    6bbc:	b	63a0 <eval_integer+0x60c>
    6bc0:	add	r2, sp, #24
    6bc4:	ldr	r1, [r1, #16]
    6bc8:	bl	5d94 <eval_integer>
    6bcc:	cmp	r0, #0
    6bd0:	bne	63a0 <eval_integer+0x60c>
    6bd4:	mov	r0, r5
    6bd8:	add	r2, sp, #56	; 0x38
    6bdc:	ldr	r1, [r4, #20]
    6be0:	bl	5d94 <eval_integer>
    6be4:	subs	r7, r0, #0
    6be8:	bne	63a0 <eval_integer+0x60c>
    6bec:	ldrd	r0, [sp, #24]
    6bf0:	ldrd	r2, [sp, #56]	; 0x38
    6bf4:	cmp	r0, r2
    6bf8:	sbcs	ip, r1, r3
    6bfc:	bge	602c <eval_integer+0x298>
    6c00:	b	6a54 <eval_integer+0xcc0>
    6c04:	ldr	r4, [r1, #16]
    6c08:	ldr	r3, [r4, #4]
    6c0c:	cmp	r3, #4
    6c10:	bne	6d94 <eval_integer+0x1000>
    6c14:	ldr	r3, [r0]
    6c18:	cmp	r3, #0
    6c1c:	beq	727c <eval_integer+0x14e8>
    6c20:	add	r8, r0, #8
    6c24:	mov	r2, #520	; 0x208
    6c28:	mov	r1, r8
    6c2c:	add	r0, sp, #56	; 0x38
    6c30:	bl	0 <memcpy>
    6c34:	mov	r1, r4
    6c38:	mov	r0, r5
    6c3c:	bl	7420 <eval_cursor>
    6c40:	cmp	r0, #0
    6c44:	bne	63a0 <eval_integer+0x60c>
    6c48:	add	r1, sp, #24
    6c4c:	mov	r0, r8
    6c50:	bl	0 <coda_cursor_get_string_length>
    6c54:	subs	r7, r0, #0
    6c58:	bne	63a0 <eval_integer+0x60c>
    6c5c:	ldr	r4, [sp, #24]
    6c60:	add	r1, sp, #56	; 0x38
    6c64:	mov	r0, r8
    6c68:	mov	r2, #520	; 0x208
    6c6c:	asr	r5, r4, #31
    6c70:	strd	r4, [r6]
    6c74:	bl	0 <memcpy>
    6c78:	b	5f38 <eval_integer+0x1a4>
    6c7c:	add	r2, sp, #24
    6c80:	ldr	r1, [r1, #16]
    6c84:	bl	5d94 <eval_integer>
    6c88:	cmp	r0, #0
    6c8c:	bne	63a0 <eval_integer+0x60c>
    6c90:	mov	r0, r5
    6c94:	add	r2, sp, #56	; 0x38
    6c98:	ldr	r1, [r4, #20]
    6c9c:	bl	5d94 <eval_integer>
    6ca0:	subs	r7, r0, #0
    6ca4:	bne	63a0 <eval_integer+0x60c>
    6ca8:	ldrd	r2, [sp, #24]
    6cac:	ldrd	r0, [sp, #56]	; 0x38
    6cb0:	orr	r2, r2, r0
    6cb4:	orr	r3, r3, r1
    6cb8:	strd	r2, [r6]
    6cbc:	b	5f38 <eval_integer+0x1a4>
    6cc0:	add	r2, sp, #24
    6cc4:	ldr	r1, [r1, #16]
    6cc8:	bl	5d94 <eval_integer>
    6ccc:	cmp	r0, #0
    6cd0:	bne	63a0 <eval_integer+0x60c>
    6cd4:	mov	r0, r5
    6cd8:	add	r2, sp, #56	; 0x38
    6cdc:	ldr	r1, [r4, #20]
    6ce0:	bl	5d94 <eval_integer>
    6ce4:	subs	r7, r0, #0
    6ce8:	bne	63a0 <eval_integer+0x60c>
    6cec:	ldr	r2, [sp, #24]
    6cf0:	ldr	r1, [sp, #28]
    6cf4:	ldr	r0, [sp, #60]	; 0x3c
    6cf8:	ldr	ip, [sp, #56]	; 0x38
    6cfc:	mul	r0, r2, r0
    6d00:	umull	r2, r3, r2, ip
    6d04:	mla	r1, ip, r1, r0
    6d08:	add	r3, r1, r3
    6d0c:	strd	r2, [r6]
    6d10:	b	5f38 <eval_integer+0x1a4>
    6d14:	movw	r1, #0
    6d18:	movt	r1, #0
    6d1c:	ldr	r3, [pc, #844]	; 7070 <eval_integer+0x12dc>
    6d20:	movw	r0, #0
    6d24:	movt	r0, #0
    6d28:	movw	r2, #2823	; 0xb07
    6d2c:	bl	0 <__assert_fail>
    6d30:	add	r2, sp, #24
    6d34:	mov	r0, r5
    6d38:	bl	4b44 <eval_boolean>
    6d3c:	cmp	r0, #0
    6d40:	bne	7020 <eval_integer+0x128c>
    6d44:	ldr	r3, [sp, #24]
    6d48:	cmp	r3, #0
    6d4c:	bne	60ec <eval_integer+0x358>
    6d50:	ldr	r3, [r6]
    6d54:	mov	r0, r9
    6d58:	ldr	r2, [r6, #4]
    6d5c:	adds	r3, r3, #1
    6d60:	adc	r2, r2, #0
    6d64:	str	r3, [r6]
    6d68:	str	r2, [r6, #4]
    6d6c:	bl	0 <coda_cursor_goto_next_array_element>
    6d70:	cmp	r0, #0
    6d74:	bne	7104 <eval_integer+0x1370>
    6d78:	ldr	r3, [sp, #24]
    6d7c:	b	60ec <eval_integer+0x358>
    6d80:	ldr	r1, [r4, #24]
    6d84:	bl	5d94 <eval_integer>
    6d88:	cmp	r0, #0
    6d8c:	beq	5f38 <eval_integer+0x1a4>
    6d90:	b	63a0 <eval_integer+0x60c>
    6d94:	add	r2, sp, #56	; 0x38
    6d98:	mov	r1, r4
    6d9c:	add	r3, sp, #24
    6da0:	str	r2, [sp]
    6da4:	add	r2, sp, #16
    6da8:	bl	2688 <eval_string>
    6dac:	subs	r7, r0, #0
    6db0:	bne	63a0 <eval_integer+0x60c>
    6db4:	ldr	r2, [sp, #24]
    6db8:	cmp	r2, #0
    6dbc:	ble	64a8 <eval_integer+0x714>
    6dc0:	ldr	r0, [sp, #56]	; 0x38
    6dc4:	bl	0 <free>
    6dc8:	ldr	r2, [sp, #24]
    6dcc:	b	64a8 <eval_integer+0x714>
    6dd0:	add	r2, sp, #24
    6dd4:	ldr	r0, [r3]
    6dd8:	ldr	r1, [r1, #12]
    6ddc:	bl	0 <coda_product_variable_get_size>
    6de0:	subs	r7, r0, #0
    6de4:	bne	63a0 <eval_integer+0x60c>
    6de8:	ldr	r2, [sp, #24]
    6dec:	ldr	r3, [r4, #12]
    6df0:	cmp	r2, #0
    6df4:	str	r3, [r5, #560]	; 0x230
    6df8:	ble	70ec <eval_integer+0x1358>
    6dfc:	mov	r8, #0
    6e00:	add	fp, sp, #56	; 0x38
    6e04:	mov	r9, r8
    6e08:	add	sl, r5, #560	; 0x230
    6e0c:	b	6e24 <eval_integer+0x1090>
    6e10:	ldr	r3, [sp, #24]
    6e14:	adds	r8, r8, #1
    6e18:	adc	r9, r9, #0
    6e1c:	cmp	r3, r8
    6e20:	ble	70ec <eval_integer+0x1358>
    6e24:	mov	r2, fp
    6e28:	mov	r0, r5
    6e2c:	ldr	r1, [r4, #16]
    6e30:	strd	r8, [sl, #-8]
    6e34:	bl	4b44 <eval_boolean>
    6e38:	cmp	r0, #0
    6e3c:	bne	63a0 <eval_integer+0x60c>
    6e40:	ldr	r3, [sp, #56]	; 0x38
    6e44:	cmp	r3, #0
    6e48:	beq	6e10 <eval_integer+0x107c>
    6e4c:	mov	r7, r0
    6e50:	strd	r8, [r6]
    6e54:	str	r0, [r5, #560]	; 0x230
    6e58:	b	5f38 <eval_integer+0x1a4>
    6e5c:	mov	r0, r9
    6e60:	bl	0 <coda_cursor_goto_first_array_element>
    6e64:	subs	sl, r0, #0
    6e68:	bne	63a0 <eval_integer+0x60c>
    6e6c:	ldr	r3, [sp, #16]
    6e70:	cmp	r3, #0
    6e74:	ble	62c8 <eval_integer+0x534>
    6e78:	add	r8, sp, #24
    6e7c:	b	6e8c <eval_integer+0x10f8>
    6e80:	add	sl, sl, #1
    6e84:	cmp	sl, r3
    6e88:	bge	62c8 <eval_integer+0x534>
    6e8c:	mov	r2, r8
    6e90:	mov	r0, r5
    6e94:	ldr	r1, [r4, #20]
    6e98:	bl	5d94 <eval_integer>
    6e9c:	cmp	r0, #0
    6ea0:	bne	63a0 <eval_integer+0x60c>
    6ea4:	cmp	sl, #0
    6ea8:	ldrd	r2, [sp, #24]
    6eac:	beq	6ec0 <eval_integer+0x112c>
    6eb0:	ldrd	r0, [r6]
    6eb4:	cmp	r2, r0
    6eb8:	sbcs	r1, r3, r1
    6ebc:	bge	6ec4 <eval_integer+0x1130>
    6ec0:	strd	r2, [r6]
    6ec4:	ldr	r3, [sp, #16]
    6ec8:	sub	r2, r3, #1
    6ecc:	cmp	r2, sl
    6ed0:	ble	6e80 <eval_integer+0x10ec>
    6ed4:	mov	r0, r9
    6ed8:	bl	0 <coda_cursor_goto_next_array_element>
    6edc:	cmp	r0, #0
    6ee0:	bne	63a0 <eval_integer+0x60c>
    6ee4:	ldr	r3, [sp, #16]
    6ee8:	b	6e80 <eval_integer+0x10ec>
    6eec:	ldr	r3, [r0]
    6ef0:	cmp	r3, #0
    6ef4:	beq	7340 <eval_integer+0x15ac>
    6ef8:	add	r9, r0, #8
    6efc:	add	fp, sp, #56	; 0x38
    6f00:	mov	r1, r9
    6f04:	mov	r2, #520	; 0x208
    6f08:	mov	r0, fp
    6f0c:	bl	0 <memcpy>
    6f10:	mov	r0, r5
    6f14:	mov	r1, r4
    6f18:	bl	7420 <eval_cursor>
    6f1c:	subs	r5, r0, #0
    6f20:	bne	63a0 <eval_integer+0x60c>
    6f24:	bl	0 <coda_get_option_perform_conversions>
    6f28:	mov	r4, r0
    6f2c:	mov	r0, r5
    6f30:	bl	0 <coda_set_option_perform_conversions>
    6f34:	add	r1, sp, #16
    6f38:	mov	r0, r9
    6f3c:	bl	0 <coda_cursor_get_read_type>
    6f40:	subs	r7, r0, #0
    6f44:	bne	7154 <eval_integer+0x13c0>
    6f48:	ldr	r3, [sp, #16]
    6f4c:	cmp	r3, #7
    6f50:	beq	70cc <eval_integer+0x1338>
    6f54:	mov	r1, r6
    6f58:	mov	r0, r9
    6f5c:	bl	0 <coda_cursor_read_int64>
    6f60:	cmp	r0, #0
    6f64:	bne	7154 <eval_integer+0x13c0>
    6f68:	mov	r0, r4
    6f6c:	bl	0 <coda_set_option_perform_conversions>
    6f70:	mov	r1, fp
    6f74:	mov	r0, r9
    6f78:	mov	r2, #520	; 0x208
    6f7c:	bl	0 <memcpy>
    6f80:	b	5f38 <eval_integer+0x1a4>
    6f84:	add	r2, sp, #56	; 0x38
    6f88:	mov	r1, r4
    6f8c:	add	r3, sp, #24
    6f90:	str	r2, [sp]
    6f94:	add	r2, sp, #16
    6f98:	bl	2688 <eval_string>
    6f9c:	subs	r7, r0, #0
    6fa0:	bne	63a0 <eval_integer+0x60c>
    6fa4:	ldr	r1, [sp, #24]
    6fa8:	cmp	r1, #0
    6fac:	beq	71c0 <eval_integer+0x142c>
    6fb0:	ldr	r0, [sp, #16]
    6fb4:	mov	r2, r6
    6fb8:	mov	r3, r7
    6fbc:	ldr	ip, [sp, #56]	; 0x38
    6fc0:	add	r0, ip, r0
    6fc4:	bl	0 <coda_ascii_parse_int64>
    6fc8:	cmp	r0, #0
    6fcc:	ldr	r0, [sp, #56]	; 0x38
    6fd0:	blt	71b8 <eval_integer+0x1424>
    6fd4:	bl	0 <free>
    6fd8:	b	5f38 <eval_integer+0x1a4>
    6fdc:	cmp	r1, #0
    6fe0:	ldr	r4, [r4, #12]
    6fe4:	moveq	r2, r1
    6fe8:	beq	600c <eval_integer+0x278>
    6fec:	mov	r0, r1
    6ff0:	mov	r1, r4
    6ff4:	bl	0 <strcmp>
    6ff8:	cmp	r0, #0
    6ffc:	ldreq	r2, [r5, #552]	; 0x228
    7000:	movne	r2, r7
    7004:	ldreq	r3, [r5, #556]	; 0x22c
    7008:	strdeq	r2, [sp, #56]	; 0x38
    700c:	b	600c <eval_integer+0x278>
    7010:	ldr	r3, [pc, #76]	; 7064 <eval_integer+0x12d0>
    7014:	ldr	r3, [pc, r3]
    7018:	str	sl, [r8, r3]
    701c:	b	63a0 <eval_integer+0x60c>
    7020:	ldr	r3, [pc, #64]	; 7068 <eval_integer+0x12d4>
    7024:	ldr	r3, [pc, r3]
    7028:	str	sl, [r8, r3]
    702c:	b	63a0 <eval_integer+0x60c>
    7030:	mov	r0, r9
    7034:	bl	0 <coda_cursor_goto_first_array_element>
    7038:	subs	sl, r0, #0
    703c:	bne	63a0 <eval_integer+0x60c>
    7040:	ldr	r3, [sp, #16]
    7044:	cmp	r3, #0
    7048:	ble	66e8 <eval_integer+0x954>
    704c:	add	r8, sp, #24
    7050:	b	7080 <eval_integer+0x12ec>
    7054:	.word	0x00000f98
    7058:	.word	0x00000f98
    705c:	.word	0x00000f84
    7060:	.word	0x00000f0c
    7064:	.word	0x00000048
    7068:	.word	0x0000003c
    706c:	.word	0xffffff5c
    7070:	.word	0x0000003c
    7074:	add	sl, sl, #1
    7078:	cmp	sl, r3
    707c:	bge	66e8 <eval_integer+0x954>
    7080:	mov	r2, r8
    7084:	mov	r0, r5
    7088:	ldr	r1, [r4, #20]
    708c:	bl	4b44 <eval_boolean>
    7090:	cmp	r0, #0
    7094:	bne	63a0 <eval_integer+0x60c>
    7098:	ldr	r3, [sp, #24]
    709c:	cmp	r3, #0
    70a0:	bne	7114 <eval_integer+0x1380>
    70a4:	ldr	r3, [sp, #16]
    70a8:	sub	r2, r3, #1
    70ac:	cmp	r2, sl
    70b0:	ble	7074 <eval_integer+0x12e0>
    70b4:	mov	r0, r9
    70b8:	bl	0 <coda_cursor_goto_next_array_element>
    70bc:	cmp	r0, #0
    70c0:	bne	63a0 <eval_integer+0x60c>
    70c4:	ldr	r3, [sp, #16]
    70c8:	b	7074 <eval_integer+0x12e0>
    70cc:	add	r1, sp, #24
    70d0:	mov	r0, r9
    70d4:	bl	0 <coda_cursor_read_uint64>
    70d8:	cmp	r0, #0
    70dc:	bne	7154 <eval_integer+0x13c0>
    70e0:	ldrd	r2, [sp, #24]
    70e4:	strd	r2, [r6]
    70e8:	b	6f68 <eval_integer+0x11d4>
    70ec:	mvn	r0, #0
    70f0:	mvn	r1, #0
    70f4:	mov	r3, #0
    70f8:	strd	r0, [r6]
    70fc:	str	r3, [r5, #560]	; 0x230
    7100:	b	5f38 <eval_integer+0x1a4>
    7104:	ldr	r3, [pc, #-160]	; 706c <eval_integer+0x12d8>
    7108:	ldr	r3, [pc, r3]
    710c:	str	sl, [r8, r3]
    7110:	b	63a0 <eval_integer+0x60c>
    7114:	asr	r5, sl, #31
    7118:	mov	r4, sl
    711c:	mov	ip, r0
    7120:	mov	r1, fp
    7124:	mov	r0, r9
    7128:	mov	r2, #520	; 0x208
    712c:	mov	r7, ip
    7130:	strd	r4, [r6]
    7134:	bl	0 <memcpy>
    7138:	b	5f38 <eval_integer+0x1a4>
    713c:	mov	r2, r4
    7140:	movw	r1, #0
    7144:	movt	r1, #0
    7148:	mvn	r0, #400	; 0x190
    714c:	bl	0 <coda_set_error>
    7150:	b	63a0 <eval_integer+0x60c>
    7154:	mov	r0, r4
    7158:	bl	0 <coda_set_option_perform_conversions>
    715c:	b	63a0 <eval_integer+0x60c>
    7160:	movw	r1, #0
    7164:	movt	r1, #0
    7168:	mvn	r0, #400	; 0x190
    716c:	bl	0 <coda_set_error>
    7170:	b	63a0 <eval_integer+0x60c>
    7174:	mov	r2, r8
    7178:	movw	r1, #0
    717c:	movt	r1, #0
    7180:	mvn	r0, #400	; 0x190
    7184:	bl	0 <coda_set_error>
    7188:	b	63a0 <eval_integer+0x60c>
    718c:	movw	r1, #0
    7190:	movt	r1, #0
    7194:	mvn	r0, #400	; 0x190
    7198:	bl	0 <coda_set_error>
    719c:	b	63a0 <eval_integer+0x60c>
    71a0:	mov	r2, r4
    71a4:	movw	r1, #0
    71a8:	movt	r1, #0
    71ac:	mvn	r0, #400	; 0x190
    71b0:	bl	0 <coda_set_error>
    71b4:	b	63a0 <eval_integer+0x60c>
    71b8:	bl	0 <free>
    71bc:	b	63a0 <eval_integer+0x60c>
    71c0:	movw	r1, #0
    71c4:	movt	r1, #0
    71c8:	mvn	r0, #102	; 0x66
    71cc:	bl	0 <coda_set_error>
    71d0:	b	63a0 <eval_integer+0x60c>
    71d4:	movw	r1, #0
    71d8:	movt	r1, #0
    71dc:	ldr	r3, [pc, #-372]	; 7070 <eval_integer+0x12dc>
    71e0:	movw	r0, #0
    71e4:	movt	r0, #0
    71e8:	mov	r2, #2528	; 0x9e0
    71ec:	bl	0 <__assert_fail>
    71f0:	movw	r1, #0
    71f4:	movt	r1, #0
    71f8:	ldr	r3, [pc, #-400]	; 7070 <eval_integer+0x12dc>
    71fc:	movw	r0, #0
    7200:	movt	r0, #0
    7204:	movw	r2, #2335	; 0x91f
    7208:	bl	0 <__assert_fail>
    720c:	movw	r1, #0
    7210:	movt	r1, #0
    7214:	ldr	r3, [pc, #-428]	; 7070 <eval_integer+0x12dc>
    7218:	movw	r0, #0
    721c:	movt	r0, #0
    7220:	movw	r2, #2648	; 0xa58
    7224:	bl	0 <__assert_fail>
    7228:	movw	r1, #0
    722c:	movt	r1, #0
    7230:	ldr	r3, [pc, #-456]	; 7070 <eval_integer+0x12dc>
    7234:	movw	r0, #0
    7238:	movt	r0, #0
    723c:	movw	r2, #2242	; 0x8c2
    7240:	bl	0 <__assert_fail>
    7244:	movw	r1, #0
    7248:	movt	r1, #0
    724c:	ldr	r3, [pc, #-484]	; 7070 <eval_integer+0x12dc>
    7250:	movw	r0, #0
    7254:	movt	r0, #0
    7258:	movw	r2, #2435	; 0x983
    725c:	bl	0 <__assert_fail>
    7260:	movw	r1, #0
    7264:	movt	r1, #0
    7268:	ldr	r3, [pc, #-512]	; 7070 <eval_integer+0x12dc>
    726c:	movw	r0, #0
    7270:	movt	r0, #0
    7274:	movw	r2, #2761	; 0xac9
    7278:	bl	0 <__assert_fail>
    727c:	movw	r1, #0
    7280:	movt	r1, #0
    7284:	ldr	r3, [pc, #-540]	; 7070 <eval_integer+0x12dc>
    7288:	movw	r0, #0
    728c:	movt	r0, #0
    7290:	movw	r2, #2491	; 0x9bb
    7294:	bl	0 <__assert_fail>
    7298:	movw	r1, #0
    729c:	movt	r1, #0
    72a0:	ldr	r3, [pc, #-568]	; 7070 <eval_integer+0x12dc>
    72a4:	movw	r0, #0
    72a8:	movt	r0, #0
    72ac:	movw	r2, #2627	; 0xa43
    72b0:	bl	0 <__assert_fail>
    72b4:	movw	r1, #0
    72b8:	movt	r1, #0
    72bc:	ldr	r3, [pc, #-596]	; 7070 <eval_integer+0x12dc>
    72c0:	movw	r0, #0
    72c4:	movt	r0, #0
    72c8:	movw	r2, #2605	; 0xa2d
    72cc:	bl	0 <__assert_fail>
    72d0:	movw	r1, #0
    72d4:	movt	r1, #0
    72d8:	ldr	r3, [pc, #-624]	; 7070 <eval_integer+0x12dc>
    72dc:	movw	r0, #0
    72e0:	movt	r0, #0
    72e4:	movw	r2, #2586	; 0xa1a
    72e8:	bl	0 <__assert_fail>
    72ec:	movw	r1, #0
    72f0:	movt	r1, #0
    72f4:	ldr	r3, [pc, #-652]	; 7070 <eval_integer+0x12dc>
    72f8:	movw	r0, #0
    72fc:	movt	r0, #0
    7300:	movw	r2, #2679	; 0xa77
    7304:	bl	0 <__assert_fail>
    7308:	movw	r1, #0
    730c:	movt	r1, #0
    7310:	ldr	r3, [pc, #-680]	; 7070 <eval_integer+0x12dc>
    7314:	movw	r0, #0
    7318:	movt	r0, #0
    731c:	movw	r2, #2563	; 0xa03
    7320:	bl	0 <__assert_fail>
    7324:	movw	r1, #0
    7328:	movt	r1, #0
    732c:	ldr	r3, [pc, #-708]	; 7070 <eval_integer+0x12dc>
    7330:	movw	r0, #0
    7334:	movt	r0, #0
    7338:	movw	r2, #2665	; 0xa69
    733c:	bl	0 <__assert_fail>
    7340:	movw	r1, #0
    7344:	movt	r1, #0
    7348:	ldr	r3, [pc, #-736]	; 7070 <eval_integer+0x12dc>
    734c:	movw	r0, #0
    7350:	movt	r0, #0
    7354:	mov	r2, #1936	; 0x790
    7358:	bl	0 <__assert_fail>
    735c:	movw	r1, #0
    7360:	movt	r1, #0
    7364:	ldr	r3, [pc, #-764]	; 7070 <eval_integer+0x12dc>
    7368:	movw	r0, #0
    736c:	movt	r0, #0
    7370:	movw	r2, #2194	; 0x892
    7374:	bl	0 <__assert_fail>
    7378:	movw	r1, #0
    737c:	movt	r1, #0
    7380:	ldr	r3, [pc, #-792]	; 7070 <eval_integer+0x12dc>
    7384:	movw	r0, #0
    7388:	movt	r0, #0
    738c:	movw	r2, #2724	; 0xaa4
    7390:	bl	0 <__assert_fail>
    7394:	movw	r1, #0
    7398:	movt	r1, #0
    739c:	ldr	r3, [pc, #-820]	; 7070 <eval_integer+0x12dc>
    73a0:	movw	r0, #0
    73a4:	movt	r0, #0
    73a8:	movw	r2, #2383	; 0x94f
    73ac:	bl	0 <__assert_fail>
    73b0:	movw	r1, #0
    73b4:	movt	r1, #0
    73b8:	ldr	r3, [pc, #-848]	; 7070 <eval_integer+0x12dc>
    73bc:	movw	r0, #0
    73c0:	movt	r0, #0
    73c4:	movw	r2, #2792	; 0xae8
    73c8:	bl	0 <__assert_fail>
    73cc:	movw	r1, #0
    73d0:	movt	r1, #0
    73d4:	ldr	r3, [pc, #-876]	; 7070 <eval_integer+0x12dc>
    73d8:	movw	r0, #0
    73dc:	movt	r0, #0
    73e0:	movw	r2, #2287	; 0x8ef
    73e4:	bl	0 <__assert_fail>
    73e8:	movw	r1, #0
    73ec:	movt	r1, #0
    73f0:	ldr	r3, [pc, #-904]	; 7070 <eval_integer+0x12dc>
    73f4:	movw	r0, #0
    73f8:	movt	r0, #0
    73fc:	movw	r2, #2689	; 0xa81
    7400:	bl	0 <__assert_fail>
    7404:	movw	r1, #0
    7408:	movt	r1, #0
    740c:	ldr	r3, [pc, #-932]	; 7070 <eval_integer+0x12dc>
    7410:	movw	r0, #0
    7414:	movt	r0, #0
    7418:	movw	r2, #2702	; 0xa8e
    741c:	bl	0 <__assert_fail>

00007420 <eval_cursor>:
    7420:	strd	r4, [sp, #-28]!	; 0xffffffe4
    7424:	strd	r6, [sp, #8]
    7428:	mov	r6, r1
    742c:	ldr	r1, [r0]
    7430:	strd	r8, [sp, #16]
    7434:	str	lr, [sp, #24]
    7438:	sub	sp, sp, #20
    743c:	cmp	r1, #0
    7440:	beq	77b8 <eval_cursor+0x398>
    7444:	ldr	r3, [r6]
    7448:	mov	r4, r0
    744c:	sub	r3, r3, #10
    7450:	cmp	r3, #28
    7454:	ldrls	pc, [pc, r3, lsl #2]
    7458:	b	76e8 <eval_cursor+0x2c8>
    745c:	.word	0x00007504
    7460:	.word	0x000076e8
    7464:	.word	0x000076e8
    7468:	.word	0x000076e8
    746c:	.word	0x000076e8
    7470:	.word	0x000076e8
    7474:	.word	0x000076e8
    7478:	.word	0x000076e8
    747c:	.word	0x000076e8
    7480:	.word	0x000076e8
    7484:	.word	0x000076e8
    7488:	.word	0x000076e8
    748c:	.word	0x000076e8
    7490:	.word	0x000076e8
    7494:	.word	0x000076e8
    7498:	.word	0x000076e8
    749c:	.word	0x000076e8
    74a0:	.word	0x000076e8
    74a4:	.word	0x000076e8
    74a8:	.word	0x000076e8
    74ac:	.word	0x000076e8
    74b0:	.word	0x000076e8
    74b4:	.word	0x0000752c
    74b8:	.word	0x000075f0
    74bc:	.word	0x00007638
    74c0:	.word	0x0000764c
    74c4:	.word	0x000076a8
    74c8:	.word	0x000076b0
    74cc:	.word	0x000074d0
    74d0:	add	r0, r0, #8
    74d4:	ldr	r1, [r1]
    74d8:	bl	0 <coda_cursor_set_product>
    74dc:	adds	r0, r0, #0
    74e0:	movne	r0, #1
    74e4:	rsb	r5, r0, #0
    74e8:	mov	r0, r5
    74ec:	add	sp, sp, #20
    74f0:	ldrd	r4, [sp]
    74f4:	ldrd	r6, [sp, #8]
    74f8:	ldrd	r8, [sp, #16]
    74fc:	add	sp, sp, #24
    7500:	pop	{pc}		; (ldr pc, [sp], #4)
    7504:	ldr	r1, [r1]
    7508:	ldr	r0, [r1, #16]
    750c:	cmp	r0, #0
    7510:	bne	7760 <eval_cursor+0x340>
    7514:	add	r0, r4, #8
    7518:	bl	0 <coda_ascii_cursor_set_asciilines>
    751c:	adds	r0, r0, #0
    7520:	movne	r0, #1
    7524:	rsb	r5, r0, #0
    7528:	b	74e8 <eval_cursor+0xc8>
    752c:	ldr	r3, [r6, #16]
    7530:	cmp	r3, #0
    7534:	beq	7704 <eval_cursor+0x2e4>
    7538:	mov	r1, r3
    753c:	bl	7420 <eval_cursor>
    7540:	cmp	r0, #0
    7544:	bne	75e8 <eval_cursor+0x1c8>
    7548:	add	r2, sp, #8
    754c:	mov	r0, r4
    7550:	ldr	r1, [r6, #20]
    7554:	bl	5d94 <eval_integer>
    7558:	cmp	r0, #0
    755c:	bne	75e8 <eval_cursor+0x1c8>
    7560:	ldr	r3, [pc, #620]	; 77d4 <eval_cursor+0x3b4>
    7564:	mrc	15, 0, r2, cr13, cr0, {3}
    7568:	add	r4, r4, #8
    756c:	ldr	r3, [pc, r3]
    7570:	ldr	r3, [r2, r3]
    7574:	cmp	r3, #0
    7578:	bne	76e0 <eval_cursor+0x2c0>
    757c:	add	r1, sp, #4
    7580:	mov	r0, r4
    7584:	bl	0 <coda_cursor_get_type_class>
    7588:	cmp	r0, #0
    758c:	bne	75e8 <eval_cursor+0x1c8>
    7590:	ldr	r0, [sp, #4]
    7594:	cmp	r0, #1
    7598:	bne	7780 <eval_cursor+0x360>
    759c:	mov	r1, sp
    75a0:	mov	r0, r4
    75a4:	bl	0 <coda_cursor_get_num_elements>
    75a8:	cmp	r0, #0
    75ac:	bne	75e8 <eval_cursor+0x1c8>
    75b0:	ldr	r1, [sp]
    75b4:	ldrd	r8, [sp, #8]
    75b8:	cmp	r8, #0
    75bc:	sbcs	r3, r9, #0
    75c0:	blt	779c <eval_cursor+0x37c>
    75c4:	asr	r7, r1, #31
    75c8:	cmp	r8, r1
    75cc:	sbcs	r3, r9, r7
    75d0:	bge	779c <eval_cursor+0x37c>
    75d4:	mov	r1, r8
    75d8:	mov	r0, r4
    75dc:	bl	0 <coda_cursor_goto_array_element_by_index>
    75e0:	subs	r5, r0, #0
    75e4:	beq	74e8 <eval_cursor+0xc8>
    75e8:	mvn	r5, #0
    75ec:	b	74e8 <eval_cursor+0xc8>
    75f0:	ldr	r1, [r6, #16]
    75f4:	cmp	r1, #0
    75f8:	beq	7608 <eval_cursor+0x1e8>
    75fc:	bl	7420 <eval_cursor>
    7600:	cmp	r0, #0
    7604:	bne	75e8 <eval_cursor+0x1c8>
    7608:	add	r4, r4, #8
    760c:	mov	r0, r4
    7610:	bl	0 <coda_cursor_goto_attributes>
    7614:	cmp	r0, #0
    7618:	bne	75e8 <eval_cursor+0x1c8>
    761c:	mov	r0, r4
    7620:	ldr	r1, [r6, #12]
    7624:	bl	0 <coda_cursor_goto_record_field_by_name>
    7628:	adds	r0, r0, #0
    762c:	movne	r0, #1
    7630:	rsb	r5, r0, #0
    7634:	b	74e8 <eval_cursor+0xc8>
    7638:	mov	r2, #520	; 0x208
    763c:	add	r0, r0, #8
    7640:	mov	r5, #0
    7644:	bl	0 <memcpy>
    7648:	b	74e8 <eval_cursor+0xc8>
    764c:	ldr	r1, [r6, #16]
    7650:	cmp	r1, #0
    7654:	beq	7664 <eval_cursor+0x244>
    7658:	bl	7420 <eval_cursor>
    765c:	cmp	r0, #0
    7660:	bne	75e8 <eval_cursor+0x1c8>
    7664:	add	r7, r4, #8
    7668:	add	r1, sp, #4
    766c:	mov	r0, r7
    7670:	bl	0 <coda_cursor_get_type_class>
    7674:	subs	r5, r0, #0
    7678:	bne	75e8 <eval_cursor+0x1c8>
    767c:	ldr	r3, [sp, #4]
    7680:	cmp	r3, #6
    7684:	beq	774c <eval_cursor+0x32c>
    7688:	ldr	r1, [r6, #12]
    768c:	cmp	r1, #0
    7690:	beq	771c <eval_cursor+0x2fc>
    7694:	mov	r0, r7
    7698:	bl	0 <coda_cursor_goto_record_field_by_name>
    769c:	cmp	r0, #0
    76a0:	beq	74e8 <eval_cursor+0xc8>
    76a4:	b	75e8 <eval_cursor+0x1c8>
    76a8:	mov	r5, #0
    76ac:	b	74e8 <eval_cursor+0xc8>
    76b0:	ldr	r1, [r6, #16]
    76b4:	cmp	r1, #0
    76b8:	beq	76c8 <eval_cursor+0x2a8>
    76bc:	bl	7420 <eval_cursor>
    76c0:	cmp	r0, #0
    76c4:	bne	75e8 <eval_cursor+0x1c8>
    76c8:	add	r0, r4, #8
    76cc:	bl	0 <coda_cursor_goto_parent>
    76d0:	adds	r0, r0, #0
    76d4:	movne	r0, #1
    76d8:	rsb	r5, r0, #0
    76dc:	b	74e8 <eval_cursor+0xc8>
    76e0:	ldrd	r8, [sp, #8]
    76e4:	b	75d4 <eval_cursor+0x1b4>
    76e8:	movw	r1, #0
    76ec:	movt	r1, #0
    76f0:	ldr	r3, [pc, #224]	; 77d8 <eval_cursor+0x3b8>
    76f4:	movw	r0, #0
    76f8:	movt	r0, #0
    76fc:	movw	r2, #4079	; 0xfef
    7700:	bl	0 <__assert_fail>
    7704:	add	r0, r0, #8
    7708:	ldr	r1, [r1]
    770c:	bl	0 <coda_cursor_set_product>
    7710:	cmp	r0, #0
    7714:	beq	7548 <eval_cursor+0x128>
    7718:	b	75e8 <eval_cursor+0x1c8>
    771c:	mov	r0, r4
    7720:	add	r2, sp, #8
    7724:	ldr	r1, [r6, #20]
    7728:	bl	5d94 <eval_integer>
    772c:	cmp	r0, #0
    7730:	bne	75e8 <eval_cursor+0x1c8>
    7734:	mov	r0, r7
    7738:	ldr	r1, [sp, #8]
    773c:	bl	0 <coda_cursor_goto_record_field_by_index>
    7740:	cmp	r0, #0
    7744:	beq	74e8 <eval_cursor+0xc8>
    7748:	b	75e8 <eval_cursor+0x1c8>
    774c:	mov	r0, r7
    7750:	bl	0 <coda_cursor_use_base_type_of_special_type>
    7754:	cmp	r0, #0
    7758:	beq	7688 <eval_cursor+0x268>
    775c:	b	75e8 <eval_cursor+0x1c8>
    7760:	bl	0 <coda_type_get_format_name>
    7764:	mov	r2, r0
    7768:	movw	r1, #0
    776c:	movt	r1, #0
    7770:	mvn	r0, #400	; 0x190
    7774:	mvn	r5, #0
    7778:	bl	0 <coda_set_error>
    777c:	b	74e8 <eval_cursor+0xc8>
    7780:	bl	0 <coda_type_get_class_name>
    7784:	mov	r2, r0
    7788:	movw	r1, #0
    778c:	movt	r1, #0
    7790:	mvn	r0, #104	; 0x68
    7794:	bl	0 <coda_set_error>
    7798:	b	75e8 <eval_cursor+0x1c8>
    779c:	mov	r3, r1
    77a0:	mov	r2, r8
    77a4:	movw	r1, #0
    77a8:	movt	r1, #0
    77ac:	mvn	r0, #106	; 0x6a
    77b0:	bl	0 <coda_set_error>
    77b4:	b	75e8 <eval_cursor+0x1c8>
    77b8:	movw	r1, #0
    77bc:	movt	r1, #0
    77c0:	ldr	r3, [pc, #16]	; 77d8 <eval_cursor+0x3b8>
    77c4:	movw	r0, #0
    77c8:	movt	r0, #0
    77cc:	movw	r2, #3913	; 0xf49
    77d0:	bl	0 <__assert_fail>
    77d4:	.word	0x00000260
    77d8:	.word	0x0000004c

000077dc <eval_void>:
    77dc:	ldr	r3, [r1]
    77e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
    77e4:	mov	r4, r1
    77e8:	strd	r6, [sp, #8]
    77ec:	strd	r8, [sp, #16]
    77f0:	strd	sl, [sp, #24]
    77f4:	cmp	r3, #39	; 0x27
    77f8:	str	lr, [sp, #32]
    77fc:	sub	sp, sp, #44	; 0x2c
    7800:	beq	79a8 <eval_void+0x1cc>
    7804:	mov	r6, r0
    7808:	bls	78b4 <eval_void+0xd8>
    780c:	cmp	r3, #74	; 0x4a
    7810:	beq	79c0 <eval_void+0x1e4>
    7814:	cmp	r3, #84	; 0x54
    7818:	bne	7a7c <eval_void+0x2a0>
    781c:	ldr	r3, [r0]
    7820:	mov	r8, #0
    7824:	mov	r9, #0
    7828:	strd	r8, [sp, #24]
    782c:	cmp	r3, #0
    7830:	beq	7a60 <eval_void+0x284>
    7834:	ldr	r1, [r1, #16]
    7838:	cmp	r1, #0
    783c:	beq	7850 <eval_void+0x74>
    7840:	add	r2, sp, #24
    7844:	bl	5d94 <eval_integer>
    7848:	cmp	r0, #0
    784c:	bne	7a04 <eval_void+0x228>
    7850:	add	r2, sp, #32
    7854:	mov	r0, r6
    7858:	ldr	r1, [r4, #20]
    785c:	bl	5d94 <eval_integer>
    7860:	cmp	r0, #0
    7864:	bne	7a04 <eval_void+0x228>
    7868:	ldr	r0, [r6]
    786c:	add	r3, sp, #16
    7870:	ldr	r1, [r4, #12]
    7874:	ldr	r2, [sp, #24]
    7878:	ldr	r0, [r0]
    787c:	bl	0 <coda_product_variable_get_pointer>
    7880:	subs	r7, r0, #0
    7884:	bne	7a04 <eval_void+0x228>
    7888:	ldr	r3, [sp, #16]
    788c:	ldrd	r0, [sp, #32]
    7890:	strd	r0, [r3]
    7894:	mov	r0, r7
    7898:	add	sp, sp, #44	; 0x2c
    789c:	ldrd	r4, [sp]
    78a0:	ldrd	r6, [sp, #8]
    78a4:	ldrd	r8, [sp, #16]
    78a8:	ldrd	sl, [sp, #24]
    78ac:	add	sp, sp, #32
    78b0:	pop	{pc}		; (ldr pc, [sp], #4)
    78b4:	cmp	r3, #31
    78b8:	bne	7a7c <eval_void+0x2a0>
    78bc:	ldr	r3, [r1, #12]
    78c0:	mov	sl, #1
    78c4:	mov	fp, #0
    78c8:	add	r2, sp, #16
    78cc:	strd	sl, [sp, #32]
    78d0:	ldr	r1, [r1, #16]
    78d4:	ldrb	r5, [r3]
    78d8:	add	r5, r0, r5, lsl #3
    78dc:	sub	r5, r5, #304	; 0x130
    78e0:	ldrd	sl, [r5, #-8]
    78e4:	strd	sl, [sp]
    78e8:	bl	5d94 <eval_integer>
    78ec:	cmp	r0, #0
    78f0:	bne	7a04 <eval_void+0x228>
    78f4:	add	r2, sp, #24
    78f8:	mov	r0, r6
    78fc:	ldr	r1, [r4, #20]
    7900:	bl	5d94 <eval_integer>
    7904:	subs	r7, r0, #0
    7908:	bne	7a04 <eval_void+0x228>
    790c:	ldr	r1, [r4, #24]
    7910:	cmp	r1, #0
    7914:	beq	79ec <eval_void+0x210>
    7918:	add	r2, sp, #32
    791c:	mov	r0, r6
    7920:	bl	5d94 <eval_integer>
    7924:	cmp	r0, #0
    7928:	bne	7a04 <eval_void+0x228>
    792c:	ldrd	r2, [sp, #32]
    7930:	orrs	r1, r2, r3
    7934:	beq	79f4 <eval_void+0x218>
    7938:	cmp	r2, #1
    793c:	ldrd	r0, [sp, #24]
    7940:	sbcs	r3, r3, #0
    7944:	ldrd	r2, [sp, #16]
    7948:	blt	7a0c <eval_void+0x230>
    794c:	cmp	r0, r2
    7950:	strd	r2, [r5, #-8]
    7954:	sbcs	r1, r1, r3
    7958:	blt	799c <eval_void+0x1c0>
    795c:	mov	r0, r6
    7960:	ldr	r1, [r4, #28]
    7964:	bl	77dc <eval_void>
    7968:	cmp	r0, #0
    796c:	bne	7a04 <eval_void+0x228>
    7970:	ldr	r3, [r5, #-8]
    7974:	ldr	r2, [sp, #32]
    7978:	ldr	r0, [r5, #-4]
    797c:	ldr	r1, [sp, #36]	; 0x24
    7980:	adds	r8, r3, r2
    7984:	ldrd	r2, [sp, #24]
    7988:	adc	r9, r0, r1
    798c:	cmp	r2, r8
    7990:	strd	r8, [r5, #-8]
    7994:	sbcs	r3, r3, r9
    7998:	bge	795c <eval_void+0x180>
    799c:	ldrd	r2, [sp]
    79a0:	strd	r2, [r5, #-8]
    79a4:	b	7894 <eval_void+0xb8>
    79a8:	ldr	r1, [r1, #16]
    79ac:	bl	7420 <eval_cursor>
    79b0:	adds	r0, r0, #0
    79b4:	movne	r0, #1
    79b8:	rsb	r7, r0, #0
    79bc:	b	7894 <eval_void+0xb8>
    79c0:	ldr	r1, [r1, #16]
    79c4:	bl	77dc <eval_void>
    79c8:	cmp	r0, #0
    79cc:	bne	7a04 <eval_void+0x228>
    79d0:	mov	r0, r6
    79d4:	ldr	r1, [r4, #20]
    79d8:	bl	77dc <eval_void>
    79dc:	adds	r0, r0, #0
    79e0:	movne	r0, #1
    79e4:	rsb	r7, r0, #0
    79e8:	b	7894 <eval_void+0xb8>
    79ec:	ldrd	r2, [sp, #32]
    79f0:	b	7938 <eval_void+0x15c>
    79f4:	movw	r1, #0
    79f8:	movt	r1, #0
    79fc:	mvn	r0, #400	; 0x190
    7a00:	bl	0 <coda_set_error>
    7a04:	mvn	r7, #0
    7a08:	b	7894 <eval_void+0xb8>
    7a0c:	cmp	r2, r0
    7a10:	strd	r2, [r5, #-8]
    7a14:	sbcs	r1, r3, r1
    7a18:	blt	799c <eval_void+0x1c0>
    7a1c:	mov	r0, r6
    7a20:	ldr	r1, [r4, #28]
    7a24:	bl	77dc <eval_void>
    7a28:	cmp	r0, #0
    7a2c:	bne	7a04 <eval_void+0x228>
    7a30:	ldr	r3, [r5, #-8]
    7a34:	ldr	r2, [sp, #32]
    7a38:	ldr	r0, [r5, #-4]
    7a3c:	ldr	r1, [sp, #36]	; 0x24
    7a40:	adds	sl, r3, r2
    7a44:	ldrd	r2, [sp, #24]
    7a48:	adc	fp, r0, r1
    7a4c:	cmp	sl, r2
    7a50:	strd	sl, [r5, #-8]
    7a54:	sbcs	r3, fp, r3
    7a58:	bge	7a1c <eval_void+0x240>
    7a5c:	b	799c <eval_void+0x1c0>
    7a60:	movw	r1, #0
    7a64:	movt	r1, #0
    7a68:	ldr	r3, [pc, #40]	; 7a98 <eval_void+0x2bc>
    7a6c:	movw	r0, #0
    7a70:	movt	r0, #0
    7a74:	movw	r2, #3881	; 0xf29
    7a78:	bl	0 <__assert_fail>
    7a7c:	movw	r1, #0
    7a80:	movt	r1, #0
    7a84:	ldr	r3, [pc, #12]	; 7a98 <eval_void+0x2bc>
    7a88:	movw	r0, #0
    7a8c:	movt	r0, #0
    7a90:	movw	r2, #3902	; 0xf3e
    7a94:	bl	0 <__assert_fail>
    7a98:	.word	0x00000058

00007a9c <coda_expression_eval_void>:
    7a9c:	ldr	r2, [r0, #4]
    7aa0:	strd	r4, [sp, #-12]!
    7aa4:	str	lr, [sp, #8]
    7aa8:	sub	sp, sp, #572	; 0x23c
    7aac:	cmp	r2, #5
    7ab0:	bne	7b3c <coda_expression_eval_void+0xa0>
    7ab4:	cmp	r1, #0
    7ab8:	mov	r4, r0
    7abc:	beq	7b14 <coda_expression_eval_void+0x78>
    7ac0:	mov	r2, #520	; 0x208
    7ac4:	add	r0, sp, #8
    7ac8:	str	r1, [sp]
    7acc:	bl	0 <memcpy>
    7ad0:	mov	r2, #0
    7ad4:	mov	r3, #0
    7ad8:	add	r5, sp, #536	; 0x218
    7adc:	add	lr, sp, #552	; 0x228
    7ae0:	mov	ip, #0
    7ae4:	mov	r1, r4
    7ae8:	mov	r0, sp
    7aec:	strd	r2, [r5, #-8]
    7af0:	strd	r2, [lr, #-8]
    7af4:	strd	r2, [r5]
    7af8:	strd	r2, [lr]
    7afc:	str	ip, [sp, #560]	; 0x230
    7b00:	bl	77dc <eval_void>
    7b04:	add	sp, sp, #572	; 0x23c
    7b08:	ldrd	r4, [sp]
    7b0c:	add	sp, sp, #8
    7b10:	pop	{pc}		; (ldr pc, [sp], #4)
    7b14:	ldr	r2, [r0, #8]
    7b18:	cmp	r2, #0
    7b1c:	strne	r1, [sp]
    7b20:	bne	7ad0 <coda_expression_eval_void+0x34>
    7b24:	mvn	r0, #99	; 0x63
    7b28:	movw	r1, #0
    7b2c:	movt	r1, #0
    7b30:	bl	0 <coda_set_error>
    7b34:	mvn	r0, #0
    7b38:	b	7b04 <coda_expression_eval_void+0x68>
    7b3c:	mvn	r0, #99	; 0x63
    7b40:	movw	r1, #0
    7b44:	movt	r1, #0
    7b48:	bl	0 <coda_set_error>
    7b4c:	mvn	r0, #0
    7b50:	b	7b04 <coda_expression_eval_void+0x68>

00007b54 <coda_expression_print_html>:
    7b54:	mov	ip, #15
    7b58:	push	{lr}		; (str lr, [sp, #-4]!)
    7b5c:	sub	sp, sp, #12
    7b60:	mov	r3, #1
    7b64:	mov	r2, r3
    7b68:	str	ip, [sp]
    7b6c:	bl	cc <print_expression>
    7b70:	add	sp, sp, #12
    7b74:	pop	{pc}		; (ldr pc, [sp], #4)

00007b78 <coda_expression_print_xml>:
    7b78:	mov	ip, #15
    7b7c:	push	{lr}		; (str lr, [sp, #-4]!)
    7b80:	sub	sp, sp, #12
    7b84:	mov	r3, #0
    7b88:	mov	r2, #1
    7b8c:	str	ip, [sp]
    7b90:	bl	cc <print_expression>
    7b94:	add	sp, sp, #12
    7b98:	pop	{pc}		; (ldr pc, [sp], #4)

00007b9c <coda_expression_print>:
    7b9c:	mov	ip, #15
    7ba0:	push	{lr}		; (str lr, [sp, #-4]!)
    7ba4:	sub	sp, sp, #12
    7ba8:	mov	r3, #0
    7bac:	mov	r2, r3
    7bb0:	str	ip, [sp]
    7bb4:	bl	cc <print_expression>
    7bb8:	add	sp, sp, #12
    7bbc:	pop	{pc}		; (ldr pc, [sp], #4)

00007bc0 <coda_expression_get_type_name>:
    7bc0:	cmp	r0, #5
    7bc4:	bhi	7bdc <coda_expression_get_type_name+0x1c>
    7bc8:	movw	r3, #0
    7bcc:	movt	r3, #0
    7bd0:	add	r3, r3, r0, lsl #2
    7bd4:	ldr	r0, [r3, #100]	; 0x64
    7bd8:	bx	lr
    7bdc:	movw	r0, #0
    7be0:	movt	r0, #0
    7be4:	bx	lr

00007be8 <coda_expression_delete>:
    7be8:	ldr	r3, [r0]
    7bec:	strd	r4, [sp, #-16]!
    7bf0:	mov	r4, r0
    7bf4:	str	r6, [sp, #8]
    7bf8:	str	lr, [sp, #12]
    7bfc:	sub	r3, r3, #18
    7c00:	cmp	r3, #4
    7c04:	ldrls	pc, [pc, r3, lsl #2]
    7c08:	b	7c48 <coda_expression_delete+0x60>
    7c0c:	.word	0x00007c30
    7c10:	.word	0x00007c30
    7c14:	.word	0x00007c30
    7c18:	.word	0x00007c20
    7c1c:	.word	0x00007c20
    7c20:	ldr	r0, [r0, #16]
    7c24:	cmp	r0, #0
    7c28:	beq	7c30 <coda_expression_delete+0x48>
    7c2c:	bl	0 <free>
    7c30:	mov	r0, r4
    7c34:	ldrd	r4, [sp]
    7c38:	ldr	r6, [sp, #8]
    7c3c:	ldr	lr, [sp, #12]
    7c40:	add	sp, sp, #16
    7c44:	b	0 <free>
    7c48:	ldr	r0, [r0, #12]
    7c4c:	cmp	r0, #0
    7c50:	beq	7c58 <coda_expression_delete+0x70>
    7c54:	bl	0 <free>
    7c58:	add	r5, r4, #16
    7c5c:	add	r6, r4, #32
    7c60:	ldr	r3, [r5], #4
    7c64:	subs	r0, r3, #0
    7c68:	beq	7c70 <coda_expression_delete+0x88>
    7c6c:	bl	7be8 <coda_expression_delete>
    7c70:	cmp	r5, r6
    7c74:	bne	7c60 <coda_expression_delete+0x78>
    7c78:	b	7c30 <coda_expression_delete+0x48>

00007c7c <coda_expression_new>:
    7c7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    7c80:	mov	r4, r1
    7c84:	sub	r1, r0, #18
    7c88:	strd	r6, [sp, #8]
    7c8c:	strd	r8, [sp, #16]
    7c90:	strd	sl, [sp, #24]
    7c94:	str	lr, [sp, #32]
    7c98:	sub	sp, sp, #28
    7c9c:	cmp	r1, #4
    7ca0:	ldrls	pc, [pc, r1, lsl #2]
    7ca4:	b	8238 <coda_expression_new+0x5bc>
    7ca8:	.word	0x00007e88
    7cac:	.word	0x00007ee8
    7cb0:	.word	0x00007f48
    7cb4:	.word	0x00007fa0
    7cb8:	.word	0x00007cbc
    7cbc:	cmp	r4, #0
    7cc0:	beq	8184 <coda_expression_new+0x508>
    7cc4:	ldrb	r2, [r4]
    7cc8:	cmp	r2, #0
    7ccc:	beq	822c <coda_expression_new+0x5b0>
    7cd0:	mov	r5, #0
    7cd4:	mov	r9, #39	; 0x27
    7cd8:	mov	r3, r5
    7cdc:	mov	r8, #34	; 0x22
    7ce0:	mov	r7, #92	; 0x5c
    7ce4:	mov	r6, #11
    7ce8:	mov	lr, #9
    7cec:	mov	sl, #12
    7cf0:	mov	fp, #8
    7cf4:	b	7d04 <coda_expression_new+0x88>
    7cf8:	ldrb	r2, [r0]
    7cfc:	cmp	r2, #0
    7d00:	beq	7ff4 <coda_expression_new+0x378>
    7d04:	cmp	r2, #92	; 0x5c
    7d08:	add	r1, r3, #1
    7d0c:	add	r0, r4, r1
    7d10:	movne	r3, r1
    7d14:	strbne	r2, [r4, r5]
    7d18:	addne	r5, r5, #1
    7d1c:	bne	7cf8 <coda_expression_new+0x7c>
    7d20:	ldrb	r2, [r4, r1]
    7d24:	sub	r1, r2, #34	; 0x22
    7d28:	cmp	r1, #84	; 0x54
    7d2c:	ldrls	pc, [pc, r1, lsl #2]
    7d30:	b	8104 <coda_expression_new+0x488>
    7d34:	.word	0x000080f0
    7d38:	.word	0x00008104
    7d3c:	.word	0x00008104
    7d40:	.word	0x00008104
    7d44:	.word	0x00008104
    7d48:	.word	0x000080dc
    7d4c:	.word	0x00008104
    7d50:	.word	0x00008104
    7d54:	.word	0x00008104
    7d58:	.word	0x00008104
    7d5c:	.word	0x00008104
    7d60:	.word	0x00008104
    7d64:	.word	0x00008104
    7d68:	.word	0x00008104
    7d6c:	.word	0x00008104
    7d70:	.word	0x00008104
    7d74:	.word	0x00008104
    7d78:	.word	0x00008104
    7d7c:	.word	0x00008104
    7d80:	.word	0x00008104
    7d84:	.word	0x00008104
    7d88:	.word	0x00008104
    7d8c:	.word	0x00008104
    7d90:	.word	0x00008104
    7d94:	.word	0x00008104
    7d98:	.word	0x00008104
    7d9c:	.word	0x00008104
    7da0:	.word	0x00008104
    7da4:	.word	0x00008104
    7da8:	.word	0x00008104
    7dac:	.word	0x00008104
    7db0:	.word	0x00008104
    7db4:	.word	0x00008104
    7db8:	.word	0x00008104
    7dbc:	.word	0x00008104
    7dc0:	.word	0x00008104
    7dc4:	.word	0x00008104
    7dc8:	.word	0x00008104
    7dcc:	.word	0x00008104
    7dd0:	.word	0x00008104
    7dd4:	.word	0x00008104
    7dd8:	.word	0x00008104
    7ddc:	.word	0x00008104
    7de0:	.word	0x00008104
    7de4:	.word	0x00008104
    7de8:	.word	0x00008104
    7dec:	.word	0x00008104
    7df0:	.word	0x00008104
    7df4:	.word	0x00008104
    7df8:	.word	0x00008104
    7dfc:	.word	0x00008104
    7e00:	.word	0x00008104
    7e04:	.word	0x00008104
    7e08:	.word	0x00008104
    7e0c:	.word	0x00008104
    7e10:	.word	0x00008104
    7e14:	.word	0x00008104
    7e18:	.word	0x00008104
    7e1c:	.word	0x000080c8
    7e20:	.word	0x00008104
    7e24:	.word	0x00008104
    7e28:	.word	0x00008104
    7e2c:	.word	0x00008104
    7e30:	.word	0x000080b0
    7e34:	.word	0x0000809c
    7e38:	.word	0x00008104
    7e3c:	.word	0x00008104
    7e40:	.word	0x00008084
    7e44:	.word	0x00008070
    7e48:	.word	0x00008104
    7e4c:	.word	0x00008104
    7e50:	.word	0x00008104
    7e54:	.word	0x00008104
    7e58:	.word	0x00008104
    7e5c:	.word	0x00008104
    7e60:	.word	0x00008104
    7e64:	.word	0x00008058
    7e68:	.word	0x00008104
    7e6c:	.word	0x00008104
    7e70:	.word	0x00008104
    7e74:	.word	0x00008040
    7e78:	.word	0x00008104
    7e7c:	.word	0x0000802c
    7e80:	.word	0x00008104
    7e84:	.word	0x00007fd8
    7e88:	mov	r0, #16
    7e8c:	bl	0 <malloc>
    7e90:	subs	r6, r0, #0
    7e94:	beq	81ac <coda_expression_new+0x530>
    7e98:	ldrb	r3, [r4]
    7e9c:	mov	ip, #18
    7ea0:	mov	r1, #0
    7ea4:	mov	r2, #1
    7ea8:	mov	r0, r4
    7eac:	str	ip, [r6]
    7eb0:	and	r3, r3, #223	; 0xdf
    7eb4:	sub	r3, r3, #84	; 0x54
    7eb8:	clz	r3, r3
    7ebc:	lsr	r3, r3, #5
    7ec0:	stmib	r6, {r1, r2, r3}
    7ec4:	bl	0 <free>
    7ec8:	mov	r0, r6
    7ecc:	add	sp, sp, #28
    7ed0:	ldrd	r4, [sp]
    7ed4:	ldrd	r6, [sp, #8]
    7ed8:	ldrd	r8, [sp, #16]
    7edc:	ldrd	sl, [sp, #24]
    7ee0:	add	sp, sp, #32
    7ee4:	pop	{pc}		; (ldr pc, [sp], #4)
    7ee8:	mov	r0, r4
    7eec:	bl	0 <strlen>
    7ef0:	mov	r1, r0
    7ef4:	mov	r3, #0
    7ef8:	add	r2, sp, #16
    7efc:	mov	r0, r4
    7f00:	bl	0 <coda_ascii_parse_double>
    7f04:	cmp	r0, #0
    7f08:	mov	r0, r4
    7f0c:	blt	8178 <coda_expression_new+0x4fc>
    7f10:	bl	0 <free>
    7f14:	mov	r0, #24
    7f18:	bl	0 <malloc>
    7f1c:	subs	r6, r0, #0
    7f20:	movweq	r0, #261	; 0x105
    7f24:	beq	8208 <coda_expression_new+0x58c>
    7f28:	ldrd	r2, [sp, #16]
    7f2c:	mov	ip, #19
    7f30:	mov	r0, #2
    7f34:	mov	r1, #1
    7f38:	str	ip, [r6]
    7f3c:	strd	r0, [r6, #4]
    7f40:	strd	r2, [r6, #16]
    7f44:	b	7ec8 <coda_expression_new+0x24c>
    7f48:	mov	r0, r4
    7f4c:	bl	0 <strlen>
    7f50:	mov	r1, r0
    7f54:	mov	r3, #0
    7f58:	add	r2, sp, #16
    7f5c:	mov	r0, r4
    7f60:	bl	0 <coda_ascii_parse_int64>
    7f64:	cmp	r0, #0
    7f68:	mov	r0, r4
    7f6c:	blt	8178 <coda_expression_new+0x4fc>
    7f70:	bl	0 <free>
    7f74:	mov	r0, #24
    7f78:	bl	0 <malloc>
    7f7c:	subs	r6, r0, #0
    7f80:	beq	8204 <coda_expression_new+0x588>
    7f84:	ldrd	r0, [sp, #16]
    7f88:	mov	r3, #1
    7f8c:	mov	r2, #20
    7f90:	strd	r2, [r6]
    7f94:	str	r3, [r6, #8]
    7f98:	strd	r0, [r6, #16]
    7f9c:	b	7ec8 <coda_expression_new+0x24c>
    7fa0:	mov	r0, #20
    7fa4:	bl	0 <malloc>
    7fa8:	subs	r6, r0, #0
    7fac:	movweq	r0, #307	; 0x133
    7fb0:	beq	81e0 <coda_expression_new+0x564>
    7fb4:	mov	r1, #21
    7fb8:	mov	r2, #3
    7fbc:	mov	r3, #1
    7fc0:	mov	r0, r4
    7fc4:	stm	r6, {r1, r2, r3}
    7fc8:	bl	0 <strlen>
    7fcc:	str	r0, [r6, #12]
    7fd0:	str	r4, [r6, #16]
    7fd4:	b	7ec8 <coda_expression_new+0x24c>
    7fd8:	add	r3, r3, #2
    7fdc:	strb	r6, [r4, r5]
    7fe0:	add	r5, r5, #1
    7fe4:	add	r0, r4, r3
    7fe8:	ldrb	r2, [r0]
    7fec:	cmp	r2, #0
    7ff0:	bne	7d04 <coda_expression_new+0x88>
    7ff4:	add	r3, r4, r5
    7ff8:	mov	r2, #0
    7ffc:	strb	r2, [r3]
    8000:	mov	r0, #20
    8004:	bl	0 <malloc>
    8008:	subs	r6, r0, #0
    800c:	beq	81dc <coda_expression_new+0x560>
    8010:	mov	r1, #22
    8014:	mov	r2, #3
    8018:	str	r5, [r6, #12]
    801c:	mov	r3, #1
    8020:	stm	r6, {r1, r2, r3}
    8024:	str	r4, [r6, #16]
    8028:	b	7ec8 <coda_expression_new+0x24c>
    802c:	add	r3, r3, #2
    8030:	strb	lr, [r4, r5]
    8034:	add	r5, r5, #1
    8038:	add	r0, r4, r3
    803c:	b	7cf8 <coda_expression_new+0x7c>
    8040:	mov	r2, #13
    8044:	add	r3, r3, #2
    8048:	add	r0, r4, r3
    804c:	strb	r2, [r4, r5]
    8050:	add	r5, r5, #1
    8054:	b	7cf8 <coda_expression_new+0x7c>
    8058:	mov	r2, #10
    805c:	add	r3, r3, #2
    8060:	add	r0, r4, r3
    8064:	strb	r2, [r4, r5]
    8068:	add	r5, r5, #1
    806c:	b	7cf8 <coda_expression_new+0x7c>
    8070:	add	r3, r3, #2
    8074:	strb	sl, [r4, r5]
    8078:	add	r5, r5, #1
    807c:	add	r0, r4, r3
    8080:	b	7cf8 <coda_expression_new+0x7c>
    8084:	mov	r2, #27
    8088:	add	r3, r3, #2
    808c:	add	r0, r4, r3
    8090:	strb	r2, [r4, r5]
    8094:	add	r5, r5, #1
    8098:	b	7cf8 <coda_expression_new+0x7c>
    809c:	add	r3, r3, #2
    80a0:	strb	fp, [r4, r5]
    80a4:	add	r5, r5, #1
    80a8:	add	r0, r4, r3
    80ac:	b	7cf8 <coda_expression_new+0x7c>
    80b0:	mov	r2, #7
    80b4:	add	r3, r3, #2
    80b8:	add	r0, r4, r3
    80bc:	strb	r2, [r4, r5]
    80c0:	add	r5, r5, #1
    80c4:	b	7cf8 <coda_expression_new+0x7c>
    80c8:	add	r3, r3, #2
    80cc:	strb	r7, [r4, r5]
    80d0:	add	r5, r5, #1
    80d4:	add	r0, r4, r3
    80d8:	b	7cf8 <coda_expression_new+0x7c>
    80dc:	add	r3, r3, #2
    80e0:	strb	r9, [r4, r5]
    80e4:	add	r5, r5, #1
    80e8:	add	r0, r4, r3
    80ec:	b	7cf8 <coda_expression_new+0x7c>
    80f0:	add	r3, r3, #2
    80f4:	strb	r8, [r4, r5]
    80f8:	add	r5, r5, #1
    80fc:	add	r0, r4, r3
    8100:	b	7cf8 <coda_expression_new+0x7c>
    8104:	sub	r1, r2, #48	; 0x30
    8108:	cmp	r1, #9
    810c:	bhi	818c <coda_expression_new+0x510>
    8110:	lsl	r2, r2, #6
    8114:	add	r1, r4, r5
    8118:	add	r0, r4, r3
    811c:	uxtb	r2, r2
    8120:	str	r1, [sp, #12]
    8124:	strb	r2, [r4, r5]
    8128:	ldrb	r1, [r0, #2]
    812c:	sub	ip, r1, #48	; 0x30
    8130:	cmp	ip, #9
    8134:	bhi	818c <coda_expression_new+0x510>
    8138:	add	r1, r1, #16
    813c:	add	r1, r2, r1, lsl #3
    8140:	uxtb	r1, r1
    8144:	strb	r1, [r4, r5]
    8148:	ldrb	r2, [r0, #3]
    814c:	sub	r2, r2, #48	; 0x30
    8150:	uxtb	r2, r2
    8154:	cmp	r2, #9
    8158:	bhi	818c <coda_expression_new+0x510>
    815c:	add	r1, r1, r2
    8160:	ldr	r2, [sp, #12]
    8164:	add	r3, r3, #4
    8168:	add	r5, r5, #1
    816c:	add	r0, r4, r3
    8170:	strb	r1, [r2]
    8174:	b	7cf8 <coda_expression_new+0x7c>
    8178:	mov	r6, #0
    817c:	bl	0 <free>
    8180:	b	7ec8 <coda_expression_new+0x24c>
    8184:	mov	r5, r4
    8188:	b	8000 <coda_expression_new+0x384>
    818c:	mvn	r0, #102	; 0x66
    8190:	movw	r1, #0
    8194:	movt	r1, #0
    8198:	mov	r6, #0
    819c:	bl	0 <coda_set_error>
    81a0:	mov	r0, r4
    81a4:	bl	0 <free>
    81a8:	b	7ec8 <coda_expression_new+0x24c>
    81ac:	mov	r0, #232	; 0xe8
    81b0:	mov	r2, #16
    81b4:	movw	r3, #0
    81b8:	movt	r3, #0
    81bc:	movw	r1, #0
    81c0:	movt	r1, #0
    81c4:	str	r0, [sp]
    81c8:	mvn	r0, #0
    81cc:	bl	0 <coda_set_error>
    81d0:	mov	r0, r4
    81d4:	bl	0 <free>
    81d8:	b	7ec8 <coda_expression_new+0x24c>
    81dc:	movw	r0, #335	; 0x14f
    81e0:	movw	r3, #0
    81e4:	movt	r3, #0
    81e8:	str	r0, [sp]
    81ec:	movw	r1, #0
    81f0:	movt	r1, #0
    81f4:	mov	r2, #20
    81f8:	mvn	r0, #0
    81fc:	bl	0 <coda_set_error>
    8200:	b	7ec8 <coda_expression_new+0x24c>
    8204:	mov	r0, #288	; 0x120
    8208:	movw	r3, #0
    820c:	movt	r3, #0
    8210:	str	r0, [sp]
    8214:	movw	r1, #0
    8218:	movt	r1, #0
    821c:	mov	r2, #24
    8220:	mvn	r0, #0
    8224:	bl	0 <coda_set_error>
    8228:	b	7ec8 <coda_expression_new+0x24c>
    822c:	mov	r5, r2
    8230:	mov	r3, r4
    8234:	b	7ff8 <coda_expression_new+0x37c>
    8238:	cmp	r0, #60	; 0x3c
    823c:	mov	r5, r0
    8240:	mov	r7, r2
    8244:	mov	r8, r3
    8248:	bne	82f8 <coda_expression_new+0x67c>
    824c:	ldr	r3, [r2]
    8250:	cmp	r3, #19
    8254:	beq	8490 <coda_expression_new+0x814>
    8258:	cmp	r3, #20
    825c:	beq	84a4 <coda_expression_new+0x828>
    8260:	mov	r0, #32
    8264:	bl	0 <malloc>
    8268:	subs	r6, r0, #0
    826c:	bne	84bc <coda_expression_new+0x840>
    8270:	movw	r0, #387	; 0x183
    8274:	movw	r3, #0
    8278:	movt	r3, #0
    827c:	movw	r1, #0
    8280:	movt	r1, #0
    8284:	mov	r2, #32
    8288:	str	r0, [sp]
    828c:	mvn	r0, #0
    8290:	bl	0 <coda_set_error>
    8294:	cmp	r4, #0
    8298:	beq	82ac <coda_expression_new+0x630>
    829c:	mov	r0, r4
    82a0:	bl	0 <free>
    82a4:	cmp	r7, #0
    82a8:	beq	82b4 <coda_expression_new+0x638>
    82ac:	mov	r0, r7
    82b0:	bl	7be8 <coda_expression_delete>
    82b4:	cmp	r8, #0
    82b8:	beq	82c4 <coda_expression_new+0x648>
    82bc:	mov	r0, r8
    82c0:	bl	7be8 <coda_expression_delete>
    82c4:	ldr	r3, [sp, #64]	; 0x40
    82c8:	cmp	r3, #0
    82cc:	beq	82d8 <coda_expression_new+0x65c>
    82d0:	mov	r0, r3
    82d4:	bl	7be8 <coda_expression_delete>
    82d8:	ldr	r3, [sp, #68]	; 0x44
    82dc:	cmp	r3, #0
    82e0:	ldreq	r6, [sp, #68]	; 0x44
    82e4:	beq	7ec8 <coda_expression_new+0x24c>
    82e8:	mov	r0, r3
    82ec:	mov	r6, #0
    82f0:	bl	7be8 <coda_expression_delete>
    82f4:	b	7ec8 <coda_expression_new+0x24c>
    82f8:	mov	r0, #32
    82fc:	bl	0 <malloc>
    8300:	subs	r6, r0, #0
    8304:	beq	85e0 <coda_expression_new+0x964>
    8308:	ldr	r3, [sp, #64]	; 0x40
    830c:	str	r5, [r6]
    8310:	str	r4, [r6, #12]
    8314:	str	r7, [r6, #16]
    8318:	str	r8, [r6, #20]
    831c:	str	r3, [r6, #24]
    8320:	ldr	r3, [sp, #68]	; 0x44
    8324:	str	r3, [r6, #28]
    8328:	cmp	r5, #86	; 0x56
    832c:	ldrls	pc, [pc, r5, lsl #2]
    8330:	b	87a8 <coda_expression_new+0xb2c>
    8334:	.word	0x000084dc
    8338:	.word	0x000087f8
    833c:	.word	0x000087ec
    8340:	.word	0x000087e0
    8344:	.word	0x000087d4
    8348:	.word	0x000087ec
    834c:	.word	0x000087d4
    8350:	.word	0x000087ec
    8354:	.word	0x000087e0
    8358:	.word	0x000087e0
    835c:	.word	0x00008788
    8360:	.word	0x000087e0
    8364:	.word	0x000087ec
    8368:	.word	0x000087ec
    836c:	.word	0x000087ec
    8370:	.word	0x000087ec
    8374:	.word	0x000087c8
    8378:	.word	0x000087bc
    837c:	.word	0x000087a8
    8380:	.word	0x000087a8
    8384:	.word	0x000087a8
    8388:	.word	0x000087a8
    838c:	.word	0x000087a8
    8390:	.word	0x000087ec
    8394:	.word	0x000087f8
    8398:	.word	0x000087d4
    839c:	.word	0x000087d4
    83a0:	.word	0x000087ec
    83a4:	.word	0x000087c8
    83a8:	.word	0x000087bc
    83ac:	.word	0x000087bc
    83b0:	.word	0x00008610
    83b4:	.word	0x00008788
    83b8:	.word	0x00008788
    83bc:	.word	0x00008788
    83c0:	.word	0x00008788
    83c4:	.word	0x00008788
    83c8:	.word	0x00008788
    83cc:	.word	0x00008788
    83d0:	.word	0x00008610
    83d4:	.word	0x000087d4
    83d8:	.word	0x000087d4
    83dc:	.word	0x000087e0
    83e0:	.word	0x000087ec
    83e4:	.word	0x000087ec
    83e8:	.word	0x000087ec
    83ec:	.word	0x000087d4
    83f0:	.word	0x000087d4
    83f4:	.word	0x000087d4
    83f8:	.word	0x000087d4
    83fc:	.word	0x000087ec
    8400:	.word	0x000087d4
    8404:	.word	0x000087d4
    8408:	.word	0x000087d4
    840c:	.word	0x000087d4
    8410:	.word	0x000087c8
    8414:	.word	0x000087f8
    8418:	.word	0x000087f8
    841c:	.word	0x000087f8
    8420:	.word	0x000087f8
    8424:	.word	0x000087a8
    8428:	.word	0x000087d4
    842c:	.word	0x000087d4
    8430:	.word	0x000087ec
    8434:	.word	0x000087ec
    8438:	.word	0x000087ec
    843c:	.word	0x000087bc
    8440:	.word	0x000087c8
    8444:	.word	0x000087c8
    8448:	.word	0x000087c8
    844c:	.word	0x000087ec
    8450:	.word	0x00008714
    8454:	.word	0x000087bc
    8458:	.word	0x000087c8
    845c:	.word	0x00008610
    8460:	.word	0x000087c8
    8464:	.word	0x000087c8
    8468:	.word	0x000087c8
    846c:	.word	0x000087f8
    8470:	.word	0x000087bc
    8474:	.word	0x000087c8
    8478:	.word	0x000087ec
    847c:	.word	0x000087d4
    8480:	.word	0x000087ec
    8484:	.word	0x00008610
    8488:	.word	0x000087ec
    848c:	.word	0x000087e0
    8490:	vldr	d7, [r2, #16]
    8494:	mov	r6, r2
    8498:	vneg.f64	d7, d7
    849c:	vstr	d7, [r2, #16]
    84a0:	b	7ec8 <coda_expression_new+0x24c>
    84a4:	mov	r6, r2
    84a8:	ldrd	r2, [r2, #16]
    84ac:	rsbs	r2, r2, #0
    84b0:	rsc	r3, r3, #0
    84b4:	strd	r2, [r7, #16]
    84b8:	b	7ec8 <coda_expression_new+0x24c>
    84bc:	ldr	r3, [sp, #64]	; 0x40
    84c0:	str	r5, [r6]
    84c4:	str	r4, [r6, #12]
    84c8:	str	r7, [r6, #16]
    84cc:	str	r8, [r6, #20]
    84d0:	str	r3, [r6, #24]
    84d4:	ldr	r3, [sp, #68]	; 0x44
    84d8:	str	r3, [r6, #28]
    84dc:	ldr	r3, [r7, #4]
    84e0:	str	r3, [r6, #4]
    84e4:	sub	r5, r5, #27
    84e8:	cmp	r5, #58	; 0x3a
    84ec:	ldrls	pc, [pc, r5, lsl #2]
    84f0:	b	87a8 <coda_expression_new+0xb2c>
    84f4:	.word	0x0000879c
    84f8:	.word	0x0000879c
    84fc:	.word	0x000087a8
    8500:	.word	0x000087a8
    8504:	.word	0x000087a8
    8508:	.word	0x000087a8
    850c:	.word	0x000087a8
    8510:	.word	0x000087a8
    8514:	.word	0x000087a8
    8518:	.word	0x000087a8
    851c:	.word	0x000087a8
    8520:	.word	0x000087a8
    8524:	.word	0x000087a8
    8528:	.word	0x000087a8
    852c:	.word	0x000087a8
    8530:	.word	0x000087a8
    8534:	.word	0x000087a8
    8538:	.word	0x000087a8
    853c:	.word	0x000087a8
    8540:	.word	0x000087a8
    8544:	.word	0x000087a8
    8548:	.word	0x000087a8
    854c:	.word	0x000087a8
    8550:	.word	0x000087a8
    8554:	.word	0x000087a8
    8558:	.word	0x000087a8
    855c:	.word	0x000087a8
    8560:	.word	0x000087a8
    8564:	.word	0x000087a8
    8568:	.word	0x000087a8
    856c:	.word	0x000087a8
    8570:	.word	0x000087a8
    8574:	.word	0x000087a8
    8578:	.word	0x000087a8
    857c:	.word	0x000087a8
    8580:	.word	0x000087a8
    8584:	.word	0x000087a8
    8588:	.word	0x000087a8
    858c:	.word	0x000087a8
    8590:	.word	0x000087a8
    8594:	.word	0x0000879c
    8598:	.word	0x0000879c
    859c:	.word	0x0000879c
    85a0:	.word	0x0000879c
    85a4:	.word	0x000087a8
    85a8:	.word	0x000087a8
    85ac:	.word	0x000087a8
    85b0:	.word	0x000087a8
    85b4:	.word	0x000087a8
    85b8:	.word	0x000087a8
    85bc:	.word	0x000087a8
    85c0:	.word	0x000087a8
    85c4:	.word	0x000087a8
    85c8:	.word	0x000087a8
    85cc:	.word	0x000087a8
    85d0:	.word	0x000087a8
    85d4:	.word	0x0000879c
    85d8:	.word	0x0000879c
    85dc:	.word	0x0000879c
    85e0:	movw	r0, #387	; 0x183
    85e4:	movw	r3, #0
    85e8:	movt	r3, #0
    85ec:	movw	r1, #0
    85f0:	movt	r1, #0
    85f4:	mov	r2, #32
    85f8:	str	r0, [sp]
    85fc:	mvn	r0, #0
    8600:	bl	0 <coda_set_error>
    8604:	cmp	r4, #0
    8608:	bne	829c <coda_expression_new+0x620>
    860c:	b	82a4 <coda_expression_new+0x628>
    8610:	mov	r3, #5
    8614:	str	r3, [r6, #4]
    8618:	sub	r5, r5, #27
    861c:	cmp	r5, #58	; 0x3a
    8620:	ldrls	pc, [pc, r5, lsl #2]
    8624:	b	8724 <coda_expression_new+0xaa8>
    8628:	.word	0x0000879c
    862c:	.word	0x0000879c
    8630:	.word	0x00008724
    8634:	.word	0x00008724
    8638:	.word	0x00008724
    863c:	.word	0x00008724
    8640:	.word	0x00008724
    8644:	.word	0x00008724
    8648:	.word	0x00008724
    864c:	.word	0x00008724
    8650:	.word	0x00008724
    8654:	.word	0x00008724
    8658:	.word	0x00008724
    865c:	.word	0x00008724
    8660:	.word	0x00008724
    8664:	.word	0x00008724
    8668:	.word	0x00008724
    866c:	.word	0x00008724
    8670:	.word	0x00008724
    8674:	.word	0x00008724
    8678:	.word	0x00008724
    867c:	.word	0x00008724
    8680:	.word	0x00008724
    8684:	.word	0x00008724
    8688:	.word	0x00008724
    868c:	.word	0x00008724
    8690:	.word	0x00008724
    8694:	.word	0x00008724
    8698:	.word	0x00008724
    869c:	.word	0x00008724
    86a0:	.word	0x00008724
    86a4:	.word	0x00008724
    86a8:	.word	0x00008724
    86ac:	.word	0x00008724
    86b0:	.word	0x00008724
    86b4:	.word	0x00008724
    86b8:	.word	0x00008724
    86bc:	.word	0x00008724
    86c0:	.word	0x00008724
    86c4:	.word	0x00008724
    86c8:	.word	0x0000879c
    86cc:	.word	0x0000879c
    86d0:	.word	0x0000879c
    86d4:	.word	0x0000879c
    86d8:	.word	0x00008724
    86dc:	.word	0x00008724
    86e0:	.word	0x00008724
    86e4:	.word	0x00008724
    86e8:	.word	0x00008724
    86ec:	.word	0x00008724
    86f0:	.word	0x00008724
    86f4:	.word	0x00008724
    86f8:	.word	0x00008724
    86fc:	.word	0x00008724
    8700:	.word	0x00008724
    8704:	.word	0x00008724
    8708:	.word	0x0000879c
    870c:	.word	0x0000879c
    8710:	.word	0x0000879c
    8714:	ldr	r3, [sp, #64]	; 0x40
    8718:	cmp	r3, #0
    871c:	movne	r3, #3
    8720:	str	r3, [r6, #4]
    8724:	cmp	r7, #0
    8728:	beq	8738 <coda_expression_new+0xabc>
    872c:	ldr	r3, [r7, #8]
    8730:	cmp	r3, #0
    8734:	beq	87b4 <coda_expression_new+0xb38>
    8738:	cmp	r8, #0
    873c:	beq	874c <coda_expression_new+0xad0>
    8740:	ldr	r3, [r8, #8]
    8744:	cmp	r3, #0
    8748:	beq	87b4 <coda_expression_new+0xb38>
    874c:	ldr	r3, [sp, #64]	; 0x40
    8750:	cmp	r3, #0
    8754:	beq	8764 <coda_expression_new+0xae8>
    8758:	ldr	r3, [r3, #8]
    875c:	cmp	r3, #0
    8760:	beq	87b4 <coda_expression_new+0xb38>
    8764:	ldr	r3, [sp, #68]	; 0x44
    8768:	cmp	r3, #0
    876c:	beq	877c <coda_expression_new+0xb00>
    8770:	ldr	r3, [r3, #8]
    8774:	cmp	r3, #0
    8778:	beq	87b4 <coda_expression_new+0xb38>
    877c:	mov	r3, #1
    8780:	str	r3, [r6, #8]
    8784:	b	7ec8 <coda_expression_new+0x24c>
    8788:	sub	r5, r5, #27
    878c:	mov	r3, #4
    8790:	cmp	r5, #1
    8794:	str	r3, [r6, #4]
    8798:	bhi	87b4 <coda_expression_new+0xb38>
    879c:	mov	r3, #0
    87a0:	str	r3, [r6, #8]
    87a4:	b	7ec8 <coda_expression_new+0x24c>
    87a8:	ldr	r3, [r6, #4]
    87ac:	cmp	r3, #4
    87b0:	bne	8724 <coda_expression_new+0xaa8>
    87b4:	mov	r3, #0
    87b8:	b	8780 <coda_expression_new+0xb04>
    87bc:	mov	r3, #2
    87c0:	str	r3, [r6, #4]
    87c4:	b	8618 <coda_expression_new+0x99c>
    87c8:	mov	r3, #3
    87cc:	str	r3, [r6, #4]
    87d0:	b	8618 <coda_expression_new+0x99c>
    87d4:	mov	r3, #0
    87d8:	str	r3, [r6, #4]
    87dc:	b	8618 <coda_expression_new+0x99c>
    87e0:	ldr	r3, [r8, #4]
    87e4:	str	r3, [r6, #4]
    87e8:	b	84e4 <coda_expression_new+0x868>
    87ec:	mov	r3, #1
    87f0:	str	r3, [r6, #4]
    87f4:	b	8618 <coda_expression_new+0x99c>
    87f8:	ldr	r3, [r7, #4]
    87fc:	cmp	r3, #2
    8800:	beq	8810 <coda_expression_new+0xb94>
    8804:	ldr	r2, [r8, #4]
    8808:	cmp	r2, #2
    880c:	bne	87e4 <coda_expression_new+0xb68>
    8810:	mov	r3, #2
    8814:	cmp	r5, #27
    8818:	str	r3, [r6, #4]
    881c:	bcc	872c <coda_expression_new+0xab0>
    8820:	cmp	r5, #28
    8824:	bls	879c <coda_expression_new+0xb20>
    8828:	sub	r5, r5, #67	; 0x43
    882c:	cmp	r5, #3
    8830:	bls	879c <coda_expression_new+0xb20>
    8834:	b	872c <coda_expression_new+0xab0>

00008838 <coda_expression_is_constant>:
    8838:	cmp	r0, #0
    883c:	beq	8848 <coda_expression_is_constant+0x10>
    8840:	ldr	r0, [r0, #8]
    8844:	bx	lr
    8848:	mvn	r0, #99	; 0x63
    884c:	movw	r2, #0
    8850:	movt	r2, #0
    8854:	movw	r1, #0
    8858:	movt	r1, #0
    885c:	movw	r3, #4969	; 0x1369
    8860:	str	r4, [sp, #-8]!
    8864:	str	lr, [sp, #4]
    8868:	bl	0 <coda_set_error>
    886c:	ldr	r4, [sp]
    8870:	add	sp, sp, #4
    8874:	mvn	r0, #0
    8878:	pop	{pc}		; (ldr pc, [sp], #4)

0000887c <coda_expression_is_equal>:
    887c:	strd	r4, [sp, #-16]!
    8880:	subs	r5, r0, #0
    8884:	clzeq	r0, r1
    8888:	str	r6, [sp, #8]
    888c:	lsreq	r0, r0, #5
    8890:	str	lr, [sp, #12]
    8894:	beq	88b4 <coda_expression_is_equal+0x38>
    8898:	cmp	r1, #0
    889c:	beq	88b0 <coda_expression_is_equal+0x34>
    88a0:	ldr	r2, [r1]
    88a4:	ldr	r3, [r5]
    88a8:	cmp	r3, r2
    88ac:	beq	88c4 <coda_expression_is_equal+0x48>
    88b0:	mov	r0, #0
    88b4:	ldrd	r4, [sp]
    88b8:	ldr	r6, [sp, #8]
    88bc:	add	sp, sp, #12
    88c0:	pop	{pc}		; (ldr pc, [sp], #4)
    88c4:	sub	r3, r3, #18
    88c8:	mov	r6, r1
    88cc:	cmp	r3, #4
    88d0:	ldrls	pc, [pc, r3, lsl #2]
    88d4:	b	8964 <coda_expression_is_equal+0xe8>
    88d8:	.word	0x0000894c
    88dc:	.word	0x00008930
    88e0:	.word	0x00008914
    88e4:	.word	0x000088ec
    88e8:	.word	0x000088ec
    88ec:	ldr	r2, [r5, #12]
    88f0:	ldr	r3, [r1, #12]
    88f4:	cmp	r2, r3
    88f8:	bne	88b0 <coda_expression_is_equal+0x34>
    88fc:	ldr	r0, [r5, #16]
    8900:	ldr	r1, [r1, #16]
    8904:	bl	0 <memcmp>
    8908:	clz	r0, r0
    890c:	lsr	r0, r0, #5
    8910:	b	88b4 <coda_expression_is_equal+0x38>
    8914:	ldrd	r0, [r5, #16]
    8918:	ldrd	r2, [r6, #16]
    891c:	cmp	r1, r3
    8920:	cmpeq	r0, r2
    8924:	moveq	r0, #1
    8928:	movne	r0, #0
    892c:	b	88b4 <coda_expression_is_equal+0x38>
    8930:	vldr	d6, [r5, #16]
    8934:	vldr	d7, [r1, #16]
    8938:	vcmp.f64	d6, d7
    893c:	vmrs	APSR_nzcv, fpscr
    8940:	moveq	r0, #1
    8944:	movne	r0, #0
    8948:	b	88b4 <coda_expression_is_equal+0x38>
    894c:	ldr	r0, [r5, #12]
    8950:	ldr	r1, [r1, #12]
    8954:	sub	r0, r0, r1
    8958:	clz	r0, r0
    895c:	lsr	r0, r0, #5
    8960:	b	88b4 <coda_expression_is_equal+0x38>
    8964:	ldr	r0, [r5, #12]
    8968:	cmp	r0, #0
    896c:	beq	89b8 <coda_expression_is_equal+0x13c>
    8970:	ldr	r1, [r1, #12]
    8974:	cmp	r1, #0
    8978:	beq	88b0 <coda_expression_is_equal+0x34>
    897c:	bl	0 <strcmp>
    8980:	cmp	r0, #0
    8984:	bne	88b0 <coda_expression_is_equal+0x34>
    8988:	add	r4, r5, #16
    898c:	add	r6, r6, #16
    8990:	add	r5, r5, #32
    8994:	ldr	r1, [r6], #4
    8998:	ldr	r0, [r4], #4
    899c:	bl	887c <coda_expression_is_equal>
    89a0:	cmp	r0, #0
    89a4:	beq	88b4 <coda_expression_is_equal+0x38>
    89a8:	cmp	r4, r5
    89ac:	bne	8994 <coda_expression_is_equal+0x118>
    89b0:	mov	r0, #1
    89b4:	b	88b4 <coda_expression_is_equal+0x38>
    89b8:	ldr	r3, [r1, #12]
    89bc:	cmp	r3, #0
    89c0:	bne	88b4 <coda_expression_is_equal+0x38>
    89c4:	b	8988 <coda_expression_is_equal+0x10c>

000089c8 <coda_expression_get_type>:
    89c8:	cmp	r0, #0
    89cc:	beq	89e0 <coda_expression_get_type+0x18>
    89d0:	ldr	r3, [r0, #4]
    89d4:	mov	r0, #0
    89d8:	str	r3, [r1]
    89dc:	bx	lr
    89e0:	mvn	r0, #99	; 0x63
    89e4:	movw	r2, #0
    89e8:	movt	r2, #0
    89ec:	movw	r1, #0
    89f0:	movt	r1, #0
    89f4:	movw	r3, #5071	; 0x13cf
    89f8:	str	r4, [sp, #-8]!
    89fc:	str	lr, [sp, #4]
    8a00:	bl	0 <coda_set_error>
    8a04:	ldr	r4, [sp]
    8a08:	add	sp, sp, #4
    8a0c:	mvn	r0, #0
    8a10:	pop	{pc}		; (ldr pc, [sp], #4)

00008a14 <coda_expression_eval_bool>:
    8a14:	strd	r4, [sp, #-28]!	; 0xffffffe4
    8a18:	strd	r6, [sp, #8]
    8a1c:	strd	r8, [sp, #16]
    8a20:	ldr	r8, [r0, #4]
    8a24:	str	lr, [sp, #24]
    8a28:	sub	sp, sp, #572	; 0x23c
    8a2c:	cmp	r8, #0
    8a30:	bne	8b24 <coda_expression_eval_bool+0x110>
    8a34:	cmp	r1, #0
    8a38:	mov	r6, r0
    8a3c:	mov	r7, r1
    8a40:	beq	8aac <coda_expression_eval_bool+0x98>
    8a44:	mov	r9, r2
    8a48:	add	r0, sp, #8
    8a4c:	str	r1, [sp]
    8a50:	mov	r2, #520	; 0x208
    8a54:	mov	r4, #0
    8a58:	bl	0 <memcpy>
    8a5c:	mov	r5, #0
    8a60:	add	ip, sp, #536	; 0x218
    8a64:	str	r8, [sp, #560]	; 0x230
    8a68:	add	r3, sp, #552	; 0x228
    8a6c:	mov	r2, r9
    8a70:	mov	r1, r6
    8a74:	mov	r0, sp
    8a78:	strd	r4, [ip, #-8]
    8a7c:	strd	r4, [r3, #-8]
    8a80:	strd	r4, [ip]
    8a84:	strd	r4, [r3]
    8a88:	bl	4b44 <eval_boolean>
    8a8c:	cmp	r0, #0
    8a90:	bne	8afc <coda_expression_eval_bool+0xe8>
    8a94:	add	sp, sp, #572	; 0x23c
    8a98:	ldrd	r4, [sp]
    8a9c:	ldrd	r6, [sp, #8]
    8aa0:	ldrd	r8, [sp, #16]
    8aa4:	add	sp, sp, #24
    8aa8:	pop	{pc}		; (ldr pc, [sp], #4)
    8aac:	ldr	r3, [r0, #8]
    8ab0:	cmp	r3, #0
    8ab4:	beq	8b3c <coda_expression_eval_bool+0x128>
    8ab8:	mov	r4, #0
    8abc:	mov	r5, #0
    8ac0:	str	r7, [sp]
    8ac4:	add	ip, sp, #536	; 0x218
    8ac8:	add	r3, sp, #552	; 0x228
    8acc:	str	r7, [sp, #560]	; 0x230
    8ad0:	mov	r1, r0
    8ad4:	mov	r0, sp
    8ad8:	strd	r4, [r3, #-8]
    8adc:	strd	r4, [ip, #-8]
    8ae0:	strd	r4, [ip]
    8ae4:	strd	r4, [r3]
    8ae8:	bl	4b44 <eval_boolean>
    8aec:	adds	r0, r0, #0
    8af0:	movne	r0, #1
    8af4:	rsb	r0, r0, #0
    8af8:	b	8a94 <coda_expression_eval_bool+0x80>
    8afc:	mov	r0, r7
    8b00:	add	r1, sp, #8
    8b04:	bl	0 <coda_cursor_compare>
    8b08:	cmp	r0, #0
    8b0c:	mvneq	r0, #0
    8b10:	beq	8a94 <coda_expression_eval_bool+0x80>
    8b14:	add	r0, sp, #8
    8b18:	bl	0 <coda_cursor_add_to_error_message>
    8b1c:	mvn	r0, #0
    8b20:	b	8a94 <coda_expression_eval_bool+0x80>
    8b24:	mvn	r0, #99	; 0x63
    8b28:	movw	r1, #0
    8b2c:	movt	r1, #0
    8b30:	bl	0 <coda_set_error>
    8b34:	mvn	r0, #0
    8b38:	b	8a94 <coda_expression_eval_bool+0x80>
    8b3c:	mvn	r0, #99	; 0x63
    8b40:	movw	r1, #0
    8b44:	movt	r1, #0
    8b48:	bl	0 <coda_set_error>
    8b4c:	mvn	r0, #0
    8b50:	b	8a94 <coda_expression_eval_bool+0x80>

00008b54 <coda_expression_eval_integer>:
    8b54:	ldr	r3, [r0, #4]
    8b58:	strd	r4, [sp, #-24]!	; 0xffffffe8
    8b5c:	strd	r6, [sp, #8]
    8b60:	str	r8, [sp, #16]
    8b64:	str	lr, [sp, #20]
    8b68:	sub	sp, sp, #568	; 0x238
    8b6c:	cmp	r3, #1
    8b70:	bne	8c40 <coda_expression_eval_integer+0xec>
    8b74:	cmp	r1, #0
    8b78:	mov	r6, r0
    8b7c:	mov	r7, r1
    8b80:	beq	8bf0 <coda_expression_eval_integer+0x9c>
    8b84:	mov	r8, r2
    8b88:	add	r0, sp, #8
    8b8c:	str	r1, [sp]
    8b90:	mov	r2, #520	; 0x208
    8b94:	mov	r4, #0
    8b98:	bl	0 <memcpy>
    8b9c:	mov	r5, #0
    8ba0:	add	r0, sp, #536	; 0x218
    8ba4:	add	ip, sp, #552	; 0x228
    8ba8:	mov	r3, #0
    8bac:	mov	r2, r8
    8bb0:	mov	r1, r6
    8bb4:	strd	r4, [r0, #-8]
    8bb8:	strd	r4, [r0]
    8bbc:	mov	r0, sp
    8bc0:	strd	r4, [ip, #-8]
    8bc4:	strd	r4, [ip]
    8bc8:	str	r3, [sp, #560]	; 0x230
    8bcc:	bl	5d94 <eval_integer>
    8bd0:	cmp	r0, #0
    8bd4:	bne	8c58 <coda_expression_eval_integer+0x104>
    8bd8:	add	sp, sp, #568	; 0x238
    8bdc:	ldrd	r4, [sp]
    8be0:	ldrd	r6, [sp, #8]
    8be4:	ldr	r8, [sp, #16]
    8be8:	add	sp, sp, #20
    8bec:	pop	{pc}		; (ldr pc, [sp], #4)
    8bf0:	ldr	r3, [r0, #8]
    8bf4:	cmp	r3, #0
    8bf8:	beq	8c80 <coda_expression_eval_integer+0x12c>
    8bfc:	mov	r4, #0
    8c00:	mov	r5, #0
    8c04:	str	r7, [sp]
    8c08:	add	ip, sp, #536	; 0x218
    8c0c:	add	r3, sp, #552	; 0x228
    8c10:	str	r7, [sp, #560]	; 0x230
    8c14:	mov	r1, r0
    8c18:	mov	r0, sp
    8c1c:	strd	r4, [r3, #-8]
    8c20:	strd	r4, [ip, #-8]
    8c24:	strd	r4, [ip]
    8c28:	strd	r4, [r3]
    8c2c:	bl	5d94 <eval_integer>
    8c30:	adds	r0, r0, #0
    8c34:	movne	r0, #1
    8c38:	rsb	r0, r0, #0
    8c3c:	b	8bd8 <coda_expression_eval_integer+0x84>
    8c40:	mvn	r0, #99	; 0x63
    8c44:	movw	r1, #0
    8c48:	movt	r1, #0
    8c4c:	bl	0 <coda_set_error>
    8c50:	mvn	r0, #0
    8c54:	b	8bd8 <coda_expression_eval_integer+0x84>
    8c58:	mov	r0, r7
    8c5c:	add	r1, sp, #8
    8c60:	bl	0 <coda_cursor_compare>
    8c64:	cmp	r0, #0
    8c68:	mvneq	r0, #0
    8c6c:	beq	8bd8 <coda_expression_eval_integer+0x84>
    8c70:	add	r0, sp, #8
    8c74:	bl	0 <coda_cursor_add_to_error_message>
    8c78:	mvn	r0, #0
    8c7c:	b	8bd8 <coda_expression_eval_integer+0x84>
    8c80:	mvn	r0, #99	; 0x63
    8c84:	movw	r1, #0
    8c88:	movt	r1, #0
    8c8c:	bl	0 <coda_set_error>
    8c90:	mvn	r0, #0
    8c94:	b	8bd8 <coda_expression_eval_integer+0x84>

00008c98 <coda_expression_eval_float>:
    8c98:	ldr	r3, [r0, #4]
    8c9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    8ca0:	strd	r6, [sp, #8]
    8ca4:	str	r8, [sp, #16]
    8ca8:	str	lr, [sp, #20]
    8cac:	sub	sp, sp, #568	; 0x238
    8cb0:	cmp	r3, #2
    8cb4:	bne	8d84 <coda_expression_eval_float+0xec>
    8cb8:	cmp	r1, #0
    8cbc:	mov	r6, r0
    8cc0:	mov	r7, r1
    8cc4:	beq	8d34 <coda_expression_eval_float+0x9c>
    8cc8:	mov	r8, r2
    8ccc:	add	r0, sp, #8
    8cd0:	str	r1, [sp]
    8cd4:	mov	r2, #520	; 0x208
    8cd8:	mov	r4, #0
    8cdc:	bl	0 <memcpy>
    8ce0:	mov	r5, #0
    8ce4:	add	r0, sp, #536	; 0x218
    8ce8:	add	ip, sp, #552	; 0x228
    8cec:	mov	r3, #0
    8cf0:	mov	r2, r8
    8cf4:	mov	r1, r6
    8cf8:	strd	r4, [r0, #-8]
    8cfc:	strd	r4, [r0]
    8d00:	mov	r0, sp
    8d04:	strd	r4, [ip, #-8]
    8d08:	strd	r4, [ip]
    8d0c:	str	r3, [sp, #560]	; 0x230
    8d10:	bl	3edc <eval_float>
    8d14:	cmp	r0, #0
    8d18:	bne	8d9c <coda_expression_eval_float+0x104>
    8d1c:	add	sp, sp, #568	; 0x238
    8d20:	ldrd	r4, [sp]
    8d24:	ldrd	r6, [sp, #8]
    8d28:	ldr	r8, [sp, #16]
    8d2c:	add	sp, sp, #20
    8d30:	pop	{pc}		; (ldr pc, [sp], #4)
    8d34:	ldr	r3, [r0, #8]
    8d38:	cmp	r3, #0
    8d3c:	beq	8dc4 <coda_expression_eval_float+0x12c>
    8d40:	mov	r4, #0
    8d44:	mov	r5, #0
    8d48:	str	r7, [sp]
    8d4c:	add	ip, sp, #536	; 0x218
    8d50:	add	r3, sp, #552	; 0x228
    8d54:	str	r7, [sp, #560]	; 0x230
    8d58:	mov	r1, r0
    8d5c:	mov	r0, sp
    8d60:	strd	r4, [r3, #-8]
    8d64:	strd	r4, [ip, #-8]
    8d68:	strd	r4, [ip]
    8d6c:	strd	r4, [r3]
    8d70:	bl	3edc <eval_float>
    8d74:	adds	r0, r0, #0
    8d78:	movne	r0, #1
    8d7c:	rsb	r0, r0, #0
    8d80:	b	8d1c <coda_expression_eval_float+0x84>
    8d84:	mvn	r0, #99	; 0x63
    8d88:	movw	r1, #0
    8d8c:	movt	r1, #0
    8d90:	bl	0 <coda_set_error>
    8d94:	mvn	r0, #0
    8d98:	b	8d1c <coda_expression_eval_float+0x84>
    8d9c:	mov	r0, r7
    8da0:	add	r1, sp, #8
    8da4:	bl	0 <coda_cursor_compare>
    8da8:	cmp	r0, #0
    8dac:	mvneq	r0, #0
    8db0:	beq	8d1c <coda_expression_eval_float+0x84>
    8db4:	add	r0, sp, #8
    8db8:	bl	0 <coda_cursor_add_to_error_message>
    8dbc:	mvn	r0, #0
    8dc0:	b	8d1c <coda_expression_eval_float+0x84>
    8dc4:	mvn	r0, #99	; 0x63
    8dc8:	movw	r1, #0
    8dcc:	movt	r1, #0
    8dd0:	bl	0 <coda_set_error>
    8dd4:	mvn	r0, #0
    8dd8:	b	8d1c <coda_expression_eval_float+0x84>

00008ddc <coda_expression_eval_string>:
    8ddc:	strd	r4, [sp, #-28]!	; 0xffffffe4
    8de0:	mov	r4, r2
    8de4:	ldr	r2, [r0, #4]
    8de8:	strd	r6, [sp, #8]
    8dec:	strd	r8, [sp, #16]
    8df0:	str	lr, [sp, #24]
    8df4:	sub	sp, sp, #588	; 0x24c
    8df8:	cmp	r2, #3
    8dfc:	bne	8f60 <coda_expression_eval_string+0x184>
    8e00:	cmp	r1, #0
    8e04:	mov	r5, r0
    8e08:	mov	r8, r1
    8e0c:	mov	r9, r3
    8e10:	beq	8ed0 <coda_expression_eval_string+0xf4>
    8e14:	mov	r2, #520	; 0x208
    8e18:	add	r0, sp, #24
    8e1c:	str	r1, [sp, #16]
    8e20:	bl	0 <memcpy>
    8e24:	add	r2, sp, #568	; 0x238
    8e28:	mov	r6, #0
    8e2c:	str	r4, [sp]
    8e30:	mov	r7, #0
    8e34:	add	r3, sp, #552	; 0x228
    8e38:	mov	r0, r2
    8e3c:	mov	ip, #0
    8e40:	mov	r1, r5
    8e44:	strd	r6, [r3, #-8]
    8e48:	strd	r6, [r2, #-8]
    8e4c:	add	r2, sp, #12
    8e50:	strd	r6, [r3]
    8e54:	mov	r3, r9
    8e58:	strd	r6, [r0]
    8e5c:	add	r0, sp, #16
    8e60:	str	ip, [sp, #576]	; 0x240
    8e64:	bl	2688 <eval_string>
    8e68:	cmp	r0, #0
    8e6c:	bne	8f78 <coda_expression_eval_string+0x19c>
    8e70:	ldr	r3, [r9]
    8e74:	cmp	r3, #0
    8e78:	ble	8eb0 <coda_expression_eval_string+0xd4>
    8e7c:	ldr	r2, [sp, #12]
    8e80:	cmp	r2, #0
    8e84:	bne	8f28 <coda_expression_eval_string+0x14c>
    8e88:	ldr	r5, [r4]
    8e8c:	mov	r2, #0
    8e90:	mov	r0, r2
    8e94:	strb	r2, [r5, r3]
    8e98:	add	sp, sp, #588	; 0x24c
    8e9c:	ldrd	r4, [sp]
    8ea0:	ldrd	r6, [sp, #8]
    8ea4:	ldrd	r8, [sp, #16]
    8ea8:	add	sp, sp, #24
    8eac:	pop	{pc}		; (ldr pc, [sp], #4)
    8eb0:	ldr	r0, [r4]
    8eb4:	cmp	r0, #0
    8eb8:	beq	8ec0 <coda_expression_eval_string+0xe4>
    8ebc:	bl	0 <free>
    8ec0:	mov	r3, #0
    8ec4:	mov	r0, r3
    8ec8:	str	r3, [r4]
    8ecc:	b	8e98 <coda_expression_eval_string+0xbc>
    8ed0:	ldr	r2, [r0, #8]
    8ed4:	cmp	r2, #0
    8ed8:	beq	8f9c <coda_expression_eval_string+0x1c0>
    8edc:	mov	r6, #0
    8ee0:	mov	r7, #0
    8ee4:	str	r4, [sp]
    8ee8:	add	r0, sp, #552	; 0x228
    8eec:	add	ip, sp, #568	; 0x238
    8ef0:	str	r8, [sp, #16]
    8ef4:	mov	r1, r5
    8ef8:	add	r2, sp, #12
    8efc:	str	r8, [sp, #576]	; 0x240
    8f00:	strd	r6, [r0, #-8]
    8f04:	strd	r6, [ip, #-8]
    8f08:	strd	r6, [r0]
    8f0c:	add	r0, sp, #16
    8f10:	strd	r6, [ip]
    8f14:	bl	2688 <eval_string>
    8f18:	cmp	r0, #0
    8f1c:	beq	8e70 <coda_expression_eval_string+0x94>
    8f20:	mvn	r0, #0
    8f24:	b	8e98 <coda_expression_eval_string+0xbc>
    8f28:	add	r0, r3, #1
    8f2c:	bl	0 <malloc>
    8f30:	subs	r5, r0, #0
    8f34:	beq	8fb4 <coda_expression_eval_string+0x1d8>
    8f38:	ldr	r6, [r4]
    8f3c:	ldr	r1, [sp, #12]
    8f40:	ldr	r2, [r9]
    8f44:	add	r1, r6, r1
    8f48:	bl	0 <memcpy>
    8f4c:	mov	r0, r6
    8f50:	bl	0 <free>
    8f54:	ldr	r3, [r9]
    8f58:	str	r5, [r4]
    8f5c:	b	8e8c <coda_expression_eval_string+0xb0>
    8f60:	mvn	r0, #99	; 0x63
    8f64:	movw	r1, #0
    8f68:	movt	r1, #0
    8f6c:	bl	0 <coda_set_error>
    8f70:	mvn	r0, #0
    8f74:	b	8e98 <coda_expression_eval_string+0xbc>
    8f78:	mov	r0, r8
    8f7c:	add	r1, sp, #24
    8f80:	bl	0 <coda_cursor_compare>
    8f84:	cmp	r0, #0
    8f88:	beq	8f20 <coda_expression_eval_string+0x144>
    8f8c:	add	r0, sp, #24
    8f90:	bl	0 <coda_cursor_add_to_error_message>
    8f94:	mvn	r0, #0
    8f98:	b	8e98 <coda_expression_eval_string+0xbc>
    8f9c:	mvn	r0, #99	; 0x63
    8fa0:	movw	r1, #0
    8fa4:	movt	r1, #0
    8fa8:	bl	0 <coda_set_error>
    8fac:	mvn	r0, #0
    8fb0:	b	8e98 <coda_expression_eval_string+0xbc>
    8fb4:	movw	r2, #5251	; 0x1483
    8fb8:	movw	r3, #0
    8fbc:	movt	r3, #0
    8fc0:	movw	r1, #0
    8fc4:	movt	r1, #0
    8fc8:	mvn	r0, #0
    8fcc:	str	r2, [sp]
    8fd0:	ldr	r2, [r9]
    8fd4:	bl	0 <coda_set_error>
    8fd8:	b	8f20 <coda_expression_eval_string+0x144>

00008fdc <coda_expression_eval_node>:
    8fdc:	ldr	r3, [r0, #4]
    8fe0:	strd	r4, [sp, #-12]!
    8fe4:	str	lr, [sp, #8]
    8fe8:	sub	sp, sp, #572	; 0x23c
    8fec:	cmp	r3, #4
    8ff0:	bne	9074 <coda_expression_eval_node+0x98>
    8ff4:	cmp	r1, #0
    8ff8:	mov	r4, r1
    8ffc:	beq	90b4 <coda_expression_eval_node+0xd8>
    9000:	mov	r5, r0
    9004:	mov	r2, #520	; 0x208
    9008:	str	r1, [sp]
    900c:	add	r0, sp, #8
    9010:	bl	0 <memcpy>
    9014:	mov	r2, #0
    9018:	mov	r3, #0
    901c:	add	r0, sp, #536	; 0x218
    9020:	add	lr, sp, #552	; 0x228
    9024:	mov	ip, #0
    9028:	mov	r1, r5
    902c:	strd	r2, [r0, #-8]
    9030:	strd	r2, [r0]
    9034:	mov	r0, sp
    9038:	strd	r2, [lr, #-8]
    903c:	strd	r2, [lr]
    9040:	str	ip, [sp, #560]	; 0x230
    9044:	bl	7420 <eval_cursor>
    9048:	subs	r5, r0, #0
    904c:	bne	908c <coda_expression_eval_node+0xb0>
    9050:	add	r1, sp, #8
    9054:	mov	r0, r4
    9058:	mov	r2, #520	; 0x208
    905c:	bl	0 <memcpy>
    9060:	mov	r0, r5
    9064:	add	sp, sp, #572	; 0x23c
    9068:	ldrd	r4, [sp]
    906c:	add	sp, sp, #8
    9070:	pop	{pc}		; (ldr pc, [sp], #4)
    9074:	movw	r1, #0
    9078:	movt	r1, #0
    907c:	mvn	r0, #99	; 0x63
    9080:	mvn	r5, #0
    9084:	bl	0 <coda_set_error>
    9088:	b	9060 <coda_expression_eval_node+0x84>
    908c:	mov	r0, r4
    9090:	add	r1, sp, #8
    9094:	bl	0 <coda_cursor_compare>
    9098:	cmp	r0, #0
    909c:	mvneq	r5, #0
    90a0:	beq	9060 <coda_expression_eval_node+0x84>
    90a4:	add	r0, sp, #8
    90a8:	mvn	r5, #0
    90ac:	bl	0 <coda_cursor_add_to_error_message>
    90b0:	b	9060 <coda_expression_eval_node+0x84>
    90b4:	movw	r1, #0
    90b8:	movt	r1, #0
    90bc:	mvn	r0, #99	; 0x63
    90c0:	mvn	r5, #0
    90c4:	bl	0 <coda_set_error>
    90c8:	b	9060 <coda_expression_eval_node+0x84>
