
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-xml-parser.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <is_whitespace>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #16
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	mov	r5, r1
      1c:	mov	r4, r0
      20:	cmp	r4, #0
      24:	bne	3c <is_whitespace+0x3c>
      28:	ldr	r0, [pc, #104]	; 98 <is_whitespace+0x98>
      2c:	ldr	r1, [pc, #104]	; 9c <is_whitespace+0x9c>
      30:	mov	r2, #53	; 0x35
      34:	ldr	r3, [pc, #88]	; 94 <is_whitespace+0x94>
      38:	bl	0 <__assert_fail>
      3c:	mov	r3, #0
      40:	cmp	r3, r5
      44:	bge	7c <is_whitespace+0x7c>
      48:	ldrb	r0, [r4, r3]
      4c:	cmp	r0, #32
      50:	beq	74 <is_whitespace+0x74>
      54:	cmp	r0, #9
      58:	beq	74 <is_whitespace+0x74>
      5c:	cmp	r0, #10
      60:	beq	74 <is_whitespace+0x74>
      64:	cmp	r0, #13
      68:	beq	74 <is_whitespace+0x74>
      6c:	mov	r0, #0
      70:	b	80 <is_whitespace+0x80>
      74:	add	r3, r3, #1
      78:	b	40 <is_whitespace+0x40>
      7c:	mov	r0, #1
      80:	ldr	r4, [sp, #8]
      84:	ldr	r5, [sp, #12]
      88:	ldr	lr, [sp, #4]
      8c:	add	sp, sp, #16
      90:	bx	lr
      94:	.word	0x000004e8
      98:	.word	0x0000032d
      9c:	.word	0x0000018d

000000a0 <attribute_record_new>:
      a0:	mov	ip, sp
      a4:	sub	sp, sp, #64	; 0x40
      a8:	str	ip, [sp, #4]
      ac:	str	lr, [sp, #8]
      b0:	str	r4, [sp, #24]
      b4:	str	r5, [sp, #28]
      b8:	str	r6, [sp, #32]
      bc:	str	r7, [sp, #36]	; 0x24
      c0:	str	r8, [sp, #40]	; 0x28
      c4:	str	r9, [sp, #44]	; 0x2c
      c8:	str	sl, [sp, #48]	; 0x30
      cc:	str	fp, [sp, #52]	; 0x34
      d0:	ldr	r6, [ip]
      d4:	mov	r5, r3
      d8:	mov	r7, r2
      dc:	str	r1, [sp, #16]
      e0:	mov	r4, r0
      e4:	mov	r8, r6
      e8:	cmp	r4, #0
      ec:	bne	104 <attribute_record_new+0x64>
      f0:	ldr	r0, [pc, #1084]	; 534 <attribute_record_new+0x494>
      f4:	ldr	r1, [pc, #1076]	; 530 <attribute_record_new+0x490>
      f8:	mov	r2, #97	; 0x61
      fc:	ldr	r3, [pc, #1048]	; 51c <attribute_record_new+0x47c>
     100:	bl	0 <__assert_fail>
     104:	mov	r1, #0
     108:	mov	r0, r4
     10c:	bl	0 <coda_mem_record_new>
     110:	mov	r9, r0
     114:	mov	r0, r7
     118:	bl	0 <coda_element_name_from_xml_name>
     11c:	cmp	r7, r0
     120:	beq	2cc <attribute_record_new+0x22c>
     124:	ldr	r0, [r4, #44]	; 0x2c
     128:	ldr	r1, [pc, #1012]	; 524 <attribute_record_new+0x484>
     12c:	bl	0 <coda_hashtable_get_index_from_name>
     130:	mov	sl, r0
     134:	cmp	r6, #0
     138:	beq	244 <attribute_record_new+0x1a4>
     13c:	cmp	sl, #0
     140:	blt	1a4 <attribute_record_new+0x104>
     144:	ldr	r0, [r9, #20]
     148:	ldr	r3, [r0, sl, lsl #2]
     14c:	cmp	r3, #0
     150:	beq	168 <attribute_record_new+0xc8>
     154:	ldr	r0, [pc, #976]	; 52c <attribute_record_new+0x48c>
     158:	ldr	r1, [pc, #976]	; 530 <attribute_record_new+0x490>
     15c:	mov	r2, #123	; 0x7b
     160:	ldr	r3, [pc, #948]	; 51c <attribute_record_new+0x47c>
     164:	bl	0 <__assert_fail>
     168:	mov	r0, r7
     16c:	bl	0 <coda_element_name_from_xml_name>
     170:	mov	r2, r0
     174:	ldr	ip, [r4, #52]	; 0x34
     178:	ldr	r3, [ip, sl, lsl #2]
     17c:	ldr	r0, [r3, #8]
     180:	mov	r1, #0
     184:	sub	r3, r2, r7
     188:	sub	r3, r3, #1
     18c:	str	r7, [sp]
     190:	ldr	r2, [sp, #16]
     194:	bl	0 <coda_mem_data_new>
     198:	mov	r7, r0
     19c:	mov	r8, #0
     1a0:	b	1f8 <attribute_record_new+0x158>
     1a4:	mov	r0, #2
     1a8:	bl	0 <coda_type_text_new>
     1ac:	mov	sl, r0
     1b0:	cmp	sl, #0
     1b4:	bne	1c8 <attribute_record_new+0x128>
     1b8:	mov	r0, r9
     1bc:	bl	0 <coda_dynamic_type_delete>
     1c0:	mov	r0, #0
     1c4:	b	4f0 <attribute_record_new+0x450>
     1c8:	mov	r0, r7
     1cc:	bl	0 <coda_element_name_from_xml_name>
     1d0:	mov	r1, #0
     1d4:	sub	r2, r0, r7
     1d8:	sub	r3, r2, #1
     1dc:	str	r7, [sp]
     1e0:	ldr	r2, [sp, #16]
     1e4:	mov	r0, sl
     1e8:	bl	0 <coda_mem_data_new>
     1ec:	mov	r7, r0
     1f0:	mov	r0, sl
     1f4:	bl	0 <coda_type_release>
     1f8:	cmp	r7, #0
     1fc:	bne	210 <attribute_record_new+0x170>
     200:	mov	r0, r9
     204:	bl	0 <coda_dynamic_type_delete>
     208:	mov	r0, #0
     20c:	b	4f0 <attribute_record_new+0x450>
     210:	ldr	r1, [pc, #780]	; 524 <attribute_record_new+0x484>
     214:	mov	r3, r8
     218:	mov	r2, r7
     21c:	mov	r0, r9
     220:	bl	0 <coda_mem_record_add_field>
     224:	cmp	r0, #0
     228:	beq	2cc <attribute_record_new+0x22c>
     22c:	mov	r0, r7
     230:	bl	0 <coda_dynamic_type_delete>
     234:	mov	r0, r9
     238:	bl	0 <coda_dynamic_type_delete>
     23c:	mov	r0, #0
     240:	b	4f0 <attribute_record_new+0x450>
     244:	cmp	sl, #0
     248:	blt	2cc <attribute_record_new+0x22c>
     24c:	mov	r0, r7
     250:	bl	0 <coda_element_name_from_xml_name>
     254:	ldr	r1, [r4, #52]	; 0x34
     258:	ldr	r1, [r1, sl, lsl #2]
     25c:	ldr	r2, [r1, #8]
     260:	mov	r1, #0
     264:	sub	r3, r0, r7
     268:	sub	r3, r3, #1
     26c:	str	r7, [sp]
     270:	mov	r0, r2
     274:	ldr	r2, [sp, #16]
     278:	bl	0 <coda_mem_data_new>
     27c:	mov	r7, r0
     280:	cmp	r7, #0
     284:	bne	298 <attribute_record_new+0x1f8>
     288:	mov	r0, r9
     28c:	bl	0 <coda_dynamic_type_delete>
     290:	mov	r0, #0
     294:	b	4f0 <attribute_record_new+0x450>
     298:	ldr	r1, [pc, #644]	; 524 <attribute_record_new+0x484>
     29c:	mov	r3, r8
     2a0:	mov	r2, r7
     2a4:	mov	r0, r9
     2a8:	bl	0 <coda_mem_record_add_field>
     2ac:	cmp	r0, #0
     2b0:	beq	2cc <attribute_record_new+0x22c>
     2b4:	mov	r0, r7
     2b8:	bl	0 <coda_dynamic_type_delete>
     2bc:	mov	r0, r9
     2c0:	bl	0 <coda_dynamic_type_delete>
     2c4:	mov	r0, #0
     2c8:	b	4f0 <attribute_record_new+0x450>
     2cc:	mov	r7, #0
     2d0:	ldr	fp, [r5, r7, lsl #3]
     2d4:	cmp	fp, #0
     2d8:	beq	470 <attribute_record_new+0x3d0>
     2dc:	str	r6, [sp, #20]
     2e0:	ldr	r0, [r4, #44]	; 0x2c
     2e4:	mov	r1, fp
     2e8:	bl	0 <coda_hashtable_get_index_from_name>
     2ec:	mov	r8, r0
     2f0:	cmp	r8, #0
     2f4:	bge	324 <attribute_record_new+0x284>
     2f8:	mov	r0, fp
     2fc:	bl	0 <coda_element_name_from_xml_name>
     300:	mov	r1, r0
     304:	ldr	r0, [r4, #44]	; 0x2c
     308:	bl	0 <coda_hashtable_get_index_from_name>
     30c:	mov	r8, r0
     310:	cmp	r8, #0
     314:	blt	324 <attribute_record_new+0x284>
     318:	mov	r0, fp
     31c:	bl	0 <coda_element_name_from_xml_name>
     320:	mov	fp, r0
     324:	cmp	r6, #0
     328:	bne	384 <attribute_record_new+0x2e4>
     32c:	cmn	r8, #1
     330:	bne	358 <attribute_record_new+0x2b8>
     334:	movw	r0, #65236	; 0xfed4
     338:	movt	r0, #65535	; 0xffff
     33c:	ldr	r1, [pc, #476]	; 520 <attribute_record_new+0x480>
     340:	ldr	r2, [r5, r7, lsl #3]
     344:	bl	0 <coda_set_error>
     348:	mov	r0, r9
     34c:	bl	0 <coda_dynamic_type_delete>
     350:	mov	r0, #0
     354:	b	4f0 <attribute_record_new+0x450>
     358:	ldr	ip, [r4, #52]	; 0x34
     35c:	ldr	r3, [ip, r8, lsl #2]
     360:	ldr	r0, [r3, #8]
     364:	mov	r1, #0
     368:	lsl	r2, r7, #3
     36c:	add	ip, r5, r2
     370:	ldr	r3, [ip, #4]
     374:	ldr	r2, [sp, #16]
     378:	bl	0 <coda_mem_string_new>
     37c:	mov	sl, r0
     380:	b	41c <attribute_record_new+0x37c>
     384:	cmp	r8, #0
     388:	bge	3dc <attribute_record_new+0x33c>
     38c:	mov	r0, #2
     390:	bl	0 <coda_type_text_new>
     394:	mov	r8, r0
     398:	cmp	r8, #0
     39c:	bne	3b0 <attribute_record_new+0x310>
     3a0:	mov	r0, r9
     3a4:	bl	0 <coda_dynamic_type_delete>
     3a8:	mov	r0, #0
     3ac:	b	4f0 <attribute_record_new+0x450>
     3b0:	mov	r1, #0
     3b4:	lsl	r2, r7, #3
     3b8:	add	r0, r5, r2
     3bc:	ldr	r3, [r0, #4]
     3c0:	ldr	r2, [sp, #16]
     3c4:	mov	r0, r8
     3c8:	bl	0 <coda_mem_string_new>
     3cc:	mov	sl, r0
     3d0:	mov	r0, r8
     3d4:	bl	0 <coda_type_release>
     3d8:	b	41c <attribute_record_new+0x37c>
     3dc:	ldr	ip, [r9, #20]
     3e0:	ldr	r0, [ip, r8, lsl #2]
     3e4:	cmp	r0, #0
     3e8:	bne	468 <attribute_record_new+0x3c8>
     3ec:	ldr	r1, [r4, #52]	; 0x34
     3f0:	ldr	r1, [r1, r8, lsl #2]
     3f4:	ldr	r0, [r1, #8]
     3f8:	mov	r1, #0
     3fc:	lsl	r2, r7, #3
     400:	add	ip, r5, r2
     404:	ldr	r3, [ip, #4]
     408:	ldr	r2, [sp, #16]
     40c:	bl	0 <coda_mem_string_new>
     410:	mov	sl, r0
     414:	mov	r2, #0
     418:	str	r2, [sp, #20]
     41c:	cmp	sl, #0
     420:	bne	434 <attribute_record_new+0x394>
     424:	mov	r0, r9
     428:	bl	0 <coda_dynamic_type_delete>
     42c:	mov	r0, #0
     430:	b	4f0 <attribute_record_new+0x450>
     434:	ldr	r3, [sp, #20]
     438:	mov	r2, sl
     43c:	mov	r1, fp
     440:	mov	r0, r9
     444:	bl	0 <coda_mem_record_add_field>
     448:	cmp	r0, #0
     44c:	beq	468 <attribute_record_new+0x3c8>
     450:	mov	r0, sl
     454:	bl	0 <coda_dynamic_type_delete>
     458:	mov	r0, r9
     45c:	bl	0 <coda_dynamic_type_delete>
     460:	mov	r0, #0
     464:	b	4f0 <attribute_record_new+0x450>
     468:	add	r7, r7, #1
     46c:	b	2d0 <attribute_record_new+0x230>
     470:	mov	r1, #0
     474:	ldr	r2, [r4, #48]	; 0x30
     478:	cmp	r1, r2
     47c:	bge	4ec <attribute_record_new+0x44c>
     480:	ldr	r3, [r4, #52]	; 0x34
     484:	ldr	r2, [r3, r1, lsl #2]
     488:	ldrb	r3, [r2, #16]
     48c:	cmp	r3, #0
     490:	bne	4e4 <attribute_record_new+0x444>
     494:	ldr	ip, [r9, #20]
     498:	ldr	r0, [ip, r1, lsl #2]
     49c:	cmp	r0, #0
     4a0:	bne	4e4 <attribute_record_new+0x444>
     4a4:	cmp	r6, #0
     4a8:	bne	4dc <attribute_record_new+0x43c>
     4ac:	add	r2, sp, #56	; 0x38
     4b0:	mov	r0, r4
     4b4:	bl	0 <coda_type_get_record_field_real_name>
     4b8:	movw	r0, #65236	; 0xfed4
     4bc:	movt	r0, #65535	; 0xffff
     4c0:	ldr	r1, [pc, #96]	; 528 <attribute_record_new+0x488>
     4c4:	ldr	r2, [sp, #56]	; 0x38
     4c8:	bl	0 <coda_set_error>
     4cc:	mov	r0, r9
     4d0:	bl	0 <coda_dynamic_type_delete>
     4d4:	mov	r0, #0
     4d8:	b	4f0 <attribute_record_new+0x450>
     4dc:	mov	r0, #1
     4e0:	strb	r0, [r2, #16]
     4e4:	add	r1, r1, #1
     4e8:	b	474 <attribute_record_new+0x3d4>
     4ec:	mov	r0, r9
     4f0:	ldr	r4, [sp, #24]
     4f4:	ldr	r5, [sp, #28]
     4f8:	ldr	r6, [sp, #32]
     4fc:	ldr	r7, [sp, #36]	; 0x24
     500:	ldr	r8, [sp, #40]	; 0x28
     504:	ldr	r9, [sp, #44]	; 0x2c
     508:	ldr	sl, [sp, #48]	; 0x30
     50c:	ldr	fp, [sp, #52]	; 0x34
     510:	ldr	lr, [sp, #8]
     514:	add	sp, sp, #64	; 0x40
     518:	bx	lr
     51c:	.word	0x00000506
     520:	.word	0x00000030
     524:	.word	0x00000421
     528:	.word	0x0000009a
     52c:	.word	0x00000000
     530:	.word	0x0000018d
     534:	.word	0x0000011e

00000538 <parser_info_cleanup>:
     538:	mov	ip, sp
     53c:	sub	sp, sp, #16
     540:	str	ip, [sp]
     544:	str	lr, [sp, #4]
     548:	str	r4, [sp, #8]
     54c:	str	r5, [sp, #12]
     550:	mov	r4, r0
     554:	ldr	r0, [r4]
     558:	cmp	r0, #0
     55c:	beq	564 <parser_info_cleanup+0x2c>
     560:	bl	0 <coda_XML_ParserFree>
     564:	mov	r5, #0
     568:	ldr	r0, [r4, #12]
     56c:	cmp	r5, r0
     570:	bgt	594 <parser_info_cleanup+0x5c>
     574:	lsl	r1, r5, #2
     578:	add	r2, r4, r1
     57c:	ldr	r0, [r2, #144]	; 0x90
     580:	cmp	r0, #0
     584:	beq	58c <parser_info_cleanup+0x54>
     588:	bl	0 <coda_dynamic_type_delete>
     58c:	add	r5, r5, #1
     590:	b	568 <parser_info_cleanup+0x30>
     594:	ldr	r0, [r4, #528]	; 0x210
     598:	cmp	r0, #0
     59c:	beq	5a4 <parser_info_cleanup+0x6c>
     5a0:	bl	0 <coda_dynamic_type_delete>
     5a4:	ldr	r0, [r4, #544]	; 0x220
     5a8:	cmp	r0, #0
     5ac:	beq	5c4 <parser_info_cleanup+0x8c>
     5b0:	ldr	r4, [sp, #8]
     5b4:	ldr	r5, [sp, #12]
     5b8:	ldr	lr, [sp, #4]
     5bc:	add	sp, sp, #16
     5c0:	b	0 <free>
     5c4:	ldr	r4, [sp, #8]
     5c8:	ldr	r5, [sp, #12]
     5cc:	ldr	lr, [sp, #4]
     5d0:	add	sp, sp, #16
     5d4:	bx	lr

000005d8 <abort_parser>:
     5d8:	mov	ip, sp
     5dc:	sub	sp, sp, #16
     5e0:	str	ip, [sp]
     5e4:	str	lr, [sp, #4]
     5e8:	str	r4, [sp, #8]
     5ec:	mov	r4, r0
     5f0:	ldr	r0, [r4]
     5f4:	mov	r1, #0
     5f8:	bl	0 <coda_XML_StopParser>
     5fc:	mov	r1, #1
     600:	str	r1, [r4, #4]
     604:	ldr	r4, [sp, #8]
     608:	ldr	lr, [sp, #4]
     60c:	add	sp, sp, #16
     610:	bx	lr

00000614 <not_standalone_handler>:
     614:	mov	ip, sp
     618:	sub	sp, sp, #8
     61c:	str	ip, [sp]
     620:	str	lr, [sp, #4]
     624:	mov	r0, #0
     628:	ldr	lr, [sp, #4]
     62c:	add	sp, sp, #8
     630:	bx	lr

00000634 <start_element_handler>:
     634:	mov	ip, sp
     638:	sub	sp, sp, #48	; 0x30
     63c:	str	ip, [sp, #4]
     640:	str	lr, [sp, #8]
     644:	str	r4, [sp, #16]
     648:	str	r5, [sp, #20]
     64c:	str	r6, [sp, #24]
     650:	str	r7, [sp, #28]
     654:	str	r8, [sp, #32]
     658:	str	r9, [sp, #36]	; 0x24
     65c:	mov	r6, r2
     660:	mov	r7, r1
     664:	mov	r5, r0
     668:	ldr	ip, [r5, #12]
     66c:	lsl	ip, ip, #2
     670:	add	ip, r5, ip
     674:	ldr	r1, [ip, #144]	; 0x90
     678:	cmp	r1, #0
     67c:	beq	cdc <start_element_handler+0x6a8>
     680:	ldr	r0, [r1, #4]
     684:	ldr	r0, [r0]
     688:	cmp	r0, #2
     68c:	beq	6c4 <start_element_handler+0x90>
     690:	bl	0 <coda_type_get_format_name>
     694:	mov	r3, r0
     698:	movw	r0, #65236	; 0xfed4
     69c:	movt	r0, #65535	; 0xffff
     6a0:	ldr	r1, [pc, #1692]	; d44 <start_element_handler+0x710>
     6a4:	ldr	r2, [r5, #12]
     6a8:	lsl	r2, r2, #2
     6ac:	add	r2, r5, r2
     6b0:	ldr	r2, [r2, #400]	; 0x190
     6b4:	bl	0 <coda_set_error>
     6b8:	mov	r0, r5
     6bc:	bl	5d8 <abort_parser>
     6c0:	b	cf8 <start_element_handler+0x6c4>
     6c4:	mov	r1, #0
     6c8:	str	r1, [r5, #536]	; 0x218
     6cc:	ldr	r2, [r5, #12]
     6d0:	add	r0, r2, #1
     6d4:	str	r0, [r5, #12]
     6d8:	cmp	r0, #32
     6dc:	blt	700 <start_element_handler+0xcc>
     6e0:	movw	r0, #65236	; 0xfed4
     6e4:	movt	r0, #65535	; 0xffff
     6e8:	ldr	r1, [pc, #1612]	; d3c <start_element_handler+0x708>
     6ec:	mov	r2, #32
     6f0:	bl	0 <coda_set_error>
     6f4:	mov	r0, r5
     6f8:	bl	5d8 <abort_parser>
     6fc:	b	cf8 <start_element_handler+0x6c4>
     700:	lsl	r2, r0, #2
     704:	add	ip, r5, r2
     708:	mov	r1, #0
     70c:	str	r1, [ip, #144]	; 0x90
     710:	ldr	r1, [r5, #12]
     714:	lsl	ip, r1, #2
     718:	add	r2, r5, ip
     71c:	ldr	r3, [r2, #140]	; 0x8c
     720:	str	r3, [sp, #40]	; 0x28
     724:	ldr	r1, [r3, #4]
     728:	ldr	r0, [r1, #44]	; 0x2c
     72c:	mov	r1, r7
     730:	bl	0 <coda_hashtable_get_index_from_name>
     734:	mov	r9, r0
     738:	cmp	r9, #0
     73c:	bge	760 <start_element_handler+0x12c>
     740:	mov	r0, r7
     744:	bl	0 <coda_element_name_from_xml_name>
     748:	mov	r1, r0
     74c:	ldr	r0, [sp, #40]	; 0x28
     750:	ldr	r3, [r0, #4]
     754:	ldr	r0, [r3, #44]	; 0x2c
     758:	bl	0 <coda_hashtable_get_index_from_name>
     75c:	mov	r9, r0
     760:	cmp	r9, #0
     764:	bge	8a8 <start_element_handler+0x274>
     768:	ldr	r3, [r5, #532]	; 0x214
     76c:	cmp	r3, #0
     770:	beq	858 <start_element_handler+0x224>
     774:	mov	r0, #2
     778:	bl	0 <coda_type_record_new>
     77c:	mov	r4, r0
     780:	cmp	r4, #0
     784:	bne	794 <start_element_handler+0x160>
     788:	mov	r0, r5
     78c:	bl	5d8 <abort_parser>
     790:	b	cf8 <start_element_handler+0x6c4>
     794:	ldr	r2, [sp, #40]	; 0x28
     798:	ldr	r0, [r2, #4]
     79c:	mov	r2, r4
     7a0:	mov	r1, r7
     7a4:	bl	0 <coda_type_record_create_field>
     7a8:	cmp	r0, #0
     7ac:	beq	7c4 <start_element_handler+0x190>
     7b0:	mov	r0, r4
     7b4:	bl	0 <coda_type_release>
     7b8:	mov	r0, r5
     7bc:	bl	5d8 <abort_parser>
     7c0:	b	cf8 <start_element_handler+0x6c4>
     7c4:	mov	r0, r4
     7c8:	bl	0 <coda_type_release>
     7cc:	add	r0, sp, #40	; 0x28
     7d0:	ldr	r1, [sp, #40]	; 0x28
     7d4:	ldr	r1, [r1, #4]
     7d8:	bl	0 <coda_mem_type_update>
     7dc:	cmp	r0, #0
     7e0:	beq	7f0 <start_element_handler+0x1bc>
     7e4:	mov	r0, r5
     7e8:	bl	5d8 <abort_parser>
     7ec:	b	cf8 <start_element_handler+0x6c4>
     7f0:	ldr	r3, [sp, #40]	; 0x28
     7f4:	ldr	ip, [r5, #12]
     7f8:	lsl	ip, ip, #2
     7fc:	add	ip, r5, ip
     800:	ldr	r1, [ip, #140]	; 0x8c
     804:	cmp	r3, r1
     808:	beq	820 <start_element_handler+0x1ec>
     80c:	ldr	r0, [pc, #1316]	; d38 <start_element_handler+0x704>
     810:	ldr	r1, [pc, #1304]	; d30 <start_element_handler+0x6fc>
     814:	movw	r2, #394	; 0x18a
     818:	ldr	r3, [pc, #1292]	; d2c <start_element_handler+0x6f8>
     81c:	bl	0 <__assert_fail>
     820:	ldr	r2, [sp, #40]	; 0x28
     824:	ldr	r1, [r2, #4]
     828:	ldr	r0, [r1, #44]	; 0x2c
     82c:	mov	r1, r7
     830:	bl	0 <coda_hashtable_get_index_from_name>
     834:	mov	r9, r0
     838:	cmp	r9, #0
     83c:	bge	8a8 <start_element_handler+0x274>
     840:	ldr	r0, [pc, #1244]	; d24 <start_element_handler+0x6f0>
     844:	ldr	r1, [pc, #1252]	; d30 <start_element_handler+0x6fc>
     848:	mov	r2, #396	; 0x18c
     84c:	ldr	r3, [pc, #1240]	; d2c <start_element_handler+0x6f8>
     850:	bl	0 <__assert_fail>
     854:	b	8a8 <start_element_handler+0x274>
     858:	ldr	r2, [r5, #12]
     85c:	cmp	r2, #1
     860:	beq	888 <start_element_handler+0x254>
     864:	movw	r0, #65236	; 0xfed4
     868:	movt	r0, #65535	; 0xffff
     86c:	ldr	r1, [pc, #1228]	; d40 <start_element_handler+0x70c>
     870:	lsl	r2, r2, #2
     874:	add	r3, r5, r2
     878:	ldr	r3, [r3, #396]	; 0x18c
     87c:	mov	r2, r7
     880:	bl	0 <coda_set_error>
     884:	b	89c <start_element_handler+0x268>
     888:	movw	r0, #65236	; 0xfed4
     88c:	movt	r0, #65535	; 0xffff
     890:	ldr	r1, [pc, #1160]	; d20 <start_element_handler+0x6ec>
     894:	mov	r2, r7
     898:	bl	0 <coda_set_error>
     89c:	mov	r0, r5
     8a0:	bl	5d8 <abort_parser>
     8a4:	b	cf8 <start_element_handler+0x6c4>
     8a8:	ldr	r1, [r5, #12]
     8ac:	lsl	r0, r1, #2
     8b0:	add	r0, r5, r0
     8b4:	str	r9, [r0, #272]	; 0x110
     8b8:	ldr	r2, [r5, #12]
     8bc:	lsl	r1, r2, #2
     8c0:	add	r3, r5, r1
     8c4:	ldr	r0, [sp, #40]	; 0x28
     8c8:	ldr	r0, [r0, #4]
     8cc:	ldr	r0, [r0, #52]	; 0x34
     8d0:	ldr	r2, [r0, r9, lsl #2]
     8d4:	add	ip, r2, #8
     8d8:	str	ip, [r3, #16]
     8dc:	ldr	r1, [sp, #40]	; 0x28
     8e0:	ldr	r0, [r1, #4]
     8e4:	ldr	r1, [r5, #12]
     8e8:	lsl	r3, r1, #2
     8ec:	add	r3, r5, r3
     8f0:	add	r2, r3, #400	; 0x190
     8f4:	mov	r1, r9
     8f8:	bl	0 <coda_type_get_record_field_real_name>
     8fc:	cmp	r0, #0
     900:	beq	910 <start_element_handler+0x2dc>
     904:	mov	r0, r5
     908:	bl	5d8 <abort_parser>
     90c:	b	cf8 <start_element_handler+0x6c4>
     910:	ldr	ip, [r5, #12]
     914:	lsl	ip, ip, #2
     918:	add	r2, r5, ip
     91c:	ldr	r0, [r2, #16]
     920:	ldr	r4, [r0]
     924:	ldr	r1, [r4, #8]
     928:	cmp	r1, #1
     92c:	beq	a7c <start_element_handler+0x448>
     930:	ldr	r1, [sp, #40]	; 0x28
     934:	ldr	r3, [r1, #20]
     938:	ldr	ip, [r3, r9, lsl #2]
     93c:	cmp	ip, #0
     940:	beq	afc <start_element_handler+0x4c8>
     944:	ldr	r0, [r5, #532]	; 0x214
     948:	cmp	r0, #0
     94c:	beq	a58 <start_element_handler+0x424>
     950:	mov	r0, #2
     954:	bl	0 <coda_type_array_new>
     958:	mov	r8, r0
     95c:	cmp	r8, #0
     960:	bne	970 <start_element_handler+0x33c>
     964:	mov	r0, r5
     968:	bl	5d8 <abort_parser>
     96c:	b	cf8 <start_element_handler+0x6c4>
     970:	mov	r1, r4
     974:	mov	r0, r8
     978:	bl	0 <coda_type_array_set_base_type>
     97c:	cmp	r0, #0
     980:	beq	998 <start_element_handler+0x364>
     984:	mov	r0, r8
     988:	bl	0 <coda_type_release>
     98c:	mov	r0, r5
     990:	bl	5d8 <abort_parser>
     994:	b	cf8 <start_element_handler+0x6c4>
     998:	ldr	r2, [r5, #12]
     99c:	lsl	r3, r2, #2
     9a0:	add	r0, r5, r3
     9a4:	ldr	r1, [r0, #16]
     9a8:	str	r8, [r1]
     9ac:	mov	r0, r4
     9b0:	bl	0 <coda_type_release>
     9b4:	mov	r1, #0
     9b8:	mov	r0, r8
     9bc:	bl	0 <coda_type_array_add_variable_dimension>
     9c0:	cmp	r0, #0
     9c4:	beq	9d4 <start_element_handler+0x3a0>
     9c8:	mov	r0, r5
     9cc:	bl	5d8 <abort_parser>
     9d0:	b	cf8 <start_element_handler+0x6c4>
     9d4:	mov	r1, #0
     9d8:	mov	r0, r8
     9dc:	bl	0 <coda_mem_array_new>
     9e0:	mov	r4, r0
     9e4:	cmp	r4, #0
     9e8:	bne	9f8 <start_element_handler+0x3c4>
     9ec:	mov	r0, r5
     9f0:	bl	5d8 <abort_parser>
     9f4:	b	cf8 <start_element_handler+0x6c4>
     9f8:	ldr	r0, [sp, #40]	; 0x28
     9fc:	ldr	ip, [r0, #20]
     a00:	ldr	r1, [ip, r9, lsl #2]
     a04:	mov	r0, r4
     a08:	bl	0 <coda_mem_array_add_element>
     a0c:	cmp	r0, #0
     a10:	beq	a20 <start_element_handler+0x3ec>
     a14:	mov	r0, r5
     a18:	bl	5d8 <abort_parser>
     a1c:	b	cf8 <start_element_handler+0x6c4>
     a20:	ldr	r2, [sp, #40]	; 0x28
     a24:	ldr	ip, [r2, #20]
     a28:	str	r4, [ip, r9, lsl #2]
     a2c:	ldr	r2, [r5, #12]
     a30:	lsl	r2, r2, #2
     a34:	add	r1, r5, r2
     a38:	add	ip, r8, #40	; 0x28
     a3c:	str	ip, [r1, #16]
     a40:	ldr	ip, [r5, #12]
     a44:	lsl	ip, ip, #2
     a48:	add	r2, r5, ip
     a4c:	ldr	ip, [r2, #16]
     a50:	ldr	r4, [ip]
     a54:	b	afc <start_element_handler+0x4c8>
     a58:	movw	r0, #65236	; 0xfed4
     a5c:	movt	r0, #65535	; 0xffff
     a60:	ldr	r1, [pc, #704]	; d28 <start_element_handler+0x6f4>
     a64:	ldr	r3, [r2, #396]	; 0x18c
     a68:	mov	r2, r7
     a6c:	bl	0 <coda_set_error>
     a70:	mov	r0, r5
     a74:	bl	5d8 <abort_parser>
     a78:	b	cf8 <start_element_handler+0x6c4>
     a7c:	ldr	r1, [r4]
     a80:	cmp	r1, #2
     a84:	bne	afc <start_element_handler+0x4c8>
     a88:	ldr	r1, [sp, #40]	; 0x28
     a8c:	ldr	r2, [r1, #20]
     a90:	ldr	r3, [r2, r9, lsl #2]
     a94:	cmp	r3, #0
     a98:	bne	ad4 <start_element_handler+0x4a0>
     a9c:	mov	r1, #0
     aa0:	mov	r0, r4
     aa4:	bl	0 <coda_mem_array_new>
     aa8:	ldr	ip, [sp, #40]	; 0x28
     aac:	ldr	r3, [ip, #20]
     ab0:	str	r0, [r3, r9, lsl #2]
     ab4:	ldr	r3, [sp, #40]	; 0x28
     ab8:	ldr	ip, [r3, #20]
     abc:	ldr	ip, [ip, r9, lsl #2]
     ac0:	cmp	ip, #0
     ac4:	bne	ad4 <start_element_handler+0x4a0>
     ac8:	mov	r0, r5
     acc:	bl	5d8 <abort_parser>
     ad0:	b	cf8 <start_element_handler+0x6c4>
     ad4:	ldr	r3, [r5, #12]
     ad8:	lsl	r3, r3, #2
     adc:	add	r3, r5, r3
     ae0:	add	r0, r4, #40	; 0x28
     ae4:	str	r0, [r3, #16]
     ae8:	ldr	r0, [r5, #12]
     aec:	lsl	r0, r0, #2
     af0:	add	r1, r5, r0
     af4:	ldr	r2, [r1, #16]
     af8:	ldr	r4, [r2]
     afc:	ldr	r0, [r4, #36]	; 0x24
     b00:	cmp	r0, #0
     b04:	bne	bb0 <start_element_handler+0x57c>
     b08:	mov	r3, #0
     b0c:	str	r3, [r5, #528]	; 0x210
     b10:	ldr	ip, [r5, #532]	; 0x214
     b14:	cmp	ip, #0
     b18:	beq	b88 <start_element_handler+0x554>
     b1c:	ldr	r3, [r6]
     b20:	cmp	r3, #0
     b24:	bne	b38 <start_element_handler+0x504>
     b28:	mov	r0, r7
     b2c:	bl	0 <coda_element_name_from_xml_name>
     b30:	cmp	r7, r0
     b34:	beq	be0 <start_element_handler+0x5ac>
     b38:	mov	r0, #2
     b3c:	bl	0 <coda_type_record_new>
     b40:	str	r0, [r4, #36]	; 0x24
     b44:	cmp	r0, #0
     b48:	bne	b58 <start_element_handler+0x524>
     b4c:	mov	r0, r5
     b50:	bl	5d8 <abort_parser>
     b54:	b	cf8 <start_element_handler+0x6c4>
     b58:	ldr	r1, [r5, #8]
     b5c:	ldr	r2, [r5, #532]	; 0x214
     b60:	str	r2, [sp]
     b64:	mov	r3, r6
     b68:	mov	r2, r7
     b6c:	bl	a0 <attribute_record_new>
     b70:	str	r0, [r5, #528]	; 0x210
     b74:	cmp	r0, #0
     b78:	bne	be0 <start_element_handler+0x5ac>
     b7c:	mov	r0, r5
     b80:	bl	5d8 <abort_parser>
     b84:	b	cf8 <start_element_handler+0x6c4>
     b88:	ldr	r2, [r6]
     b8c:	cmp	r2, #0
     b90:	beq	be0 <start_element_handler+0x5ac>
     b94:	movw	r0, #65236	; 0xfed4
     b98:	movt	r0, #65535	; 0xffff
     b9c:	ldr	r1, [pc, #376]	; d1c <start_element_handler+0x6e8>
     ba0:	bl	0 <coda_set_error>
     ba4:	mov	r0, r5
     ba8:	bl	5d8 <abort_parser>
     bac:	b	cf8 <start_element_handler+0x6c4>
     bb0:	ldr	r1, [r5, #8]
     bb4:	ldr	r2, [r5, #532]	; 0x214
     bb8:	str	r2, [sp]
     bbc:	mov	r3, r6
     bc0:	mov	r2, r7
     bc4:	bl	a0 <attribute_record_new>
     bc8:	str	r0, [r5, #528]	; 0x210
     bcc:	cmp	r0, #0
     bd0:	bne	be0 <start_element_handler+0x5ac>
     bd4:	mov	r0, r5
     bd8:	bl	5d8 <abort_parser>
     bdc:	b	cf8 <start_element_handler+0x6c4>
     be0:	ldr	r3, [r4]
     be4:	cmp	r3, #2
     be8:	bne	cf8 <start_element_handler+0x6c4>
     bec:	ldr	r1, [r4, #8]
     bf0:	cmp	r1, #0
     bf4:	bne	cf8 <start_element_handler+0x6c4>
     bf8:	ldr	r1, [r5, #528]	; 0x210
     bfc:	mov	r0, r4
     c00:	bl	0 <coda_mem_record_new>
     c04:	ldr	r2, [r5, #12]
     c08:	lsl	r1, r2, #2
     c0c:	add	r1, r5, r1
     c10:	str	r0, [r1, #144]	; 0x90
     c14:	ldr	ip, [r5, #12]
     c18:	lsl	r0, ip, #2
     c1c:	add	r1, r5, r0
     c20:	ldr	r0, [r1, #144]	; 0x90
     c24:	cmp	r0, #0
     c28:	bne	c38 <start_element_handler+0x604>
     c2c:	mov	r0, r5
     c30:	bl	5d8 <abort_parser>
     c34:	b	cf8 <start_element_handler+0x6c4>
     c38:	mov	r6, #0
     c3c:	ldr	r2, [r5, #12]
     c40:	lsl	ip, r2, #2
     c44:	add	r0, r5, ip
     c48:	ldr	r0, [r0, #144]	; 0x90
     c4c:	ldr	r2, [r0, #16]
     c50:	cmp	r6, r2
     c54:	bge	cd0 <start_element_handler+0x69c>
     c58:	ldr	r2, [r4, #52]	; 0x34
     c5c:	ldr	r0, [r2, r6, lsl #2]
     c60:	ldr	r0, [r0, #8]
     c64:	ldr	r2, [r0, #8]
     c68:	cmp	r2, #1
     c6c:	bne	cc8 <start_element_handler+0x694>
     c70:	ldr	r3, [r0]
     c74:	cmp	r3, #2
     c78:	bne	cc8 <start_element_handler+0x694>
     c7c:	mov	r1, #0
     c80:	bl	0 <coda_mem_array_new>
     c84:	ldr	r2, [r5, #12]
     c88:	lsl	r2, r2, #2
     c8c:	add	r3, r5, r2
     c90:	ldr	r1, [r3, #144]	; 0x90
     c94:	ldr	ip, [r1, #20]
     c98:	str	r0, [ip, r6, lsl #2]
     c9c:	ldr	r2, [r5, #12]
     ca0:	lsl	ip, r2, #2
     ca4:	add	ip, r5, ip
     ca8:	ldr	r1, [ip, #144]	; 0x90
     cac:	ldr	r0, [r1, #20]
     cb0:	ldr	r3, [r0, r6, lsl #2]
     cb4:	cmp	r3, #0
     cb8:	bne	cc8 <start_element_handler+0x694>
     cbc:	mov	r0, r5
     cc0:	bl	5d8 <abort_parser>
     cc4:	b	cf8 <start_element_handler+0x6c4>
     cc8:	add	r6, r6, #1
     ccc:	b	c3c <start_element_handler+0x608>
     cd0:	mov	ip, #0
     cd4:	str	ip, [r5, #528]	; 0x210
     cd8:	b	cf8 <start_element_handler+0x6c4>
     cdc:	movw	r0, #65236	; 0xfed4
     ce0:	movt	r0, #65535	; 0xffff
     ce4:	ldr	r1, [pc, #72]	; d34 <start_element_handler+0x700>
     ce8:	ldr	r2, [ip, #400]	; 0x190
     cec:	bl	0 <coda_set_error>
     cf0:	mov	r0, r5
     cf4:	bl	5d8 <abort_parser>
     cf8:	ldr	r4, [sp, #16]
     cfc:	ldr	r5, [sp, #20]
     d00:	ldr	r6, [sp, #24]
     d04:	ldr	r7, [sp, #28]
     d08:	ldr	r8, [sp, #32]
     d0c:	ldr	r9, [sp, #36]	; 0x24
     d10:	ldr	lr, [sp, #8]
     d14:	add	sp, sp, #48	; 0x30
     d18:	bx	lr
     d1c:	.word	0x00000030
     d20:	.word	0x0000015d
     d24:	.word	0x000001ec
     d28:	.word	0x000000c2
     d2c:	.word	0x0000051b
     d30:	.word	0x0000018d
     d34:	.word	0x0000044f
     d38:	.word	0x00000427
     d3c:	.word	0x000003a6
     d40:	.word	0x000004b4
     d44:	.word	0x00000131

00000d48 <end_element_handler>:
     d48:	mov	ip, sp
     d4c:	sub	sp, sp, #32
     d50:	str	ip, [sp, #4]
     d54:	str	lr, [sp, #8]
     d58:	str	r4, [sp, #16]
     d5c:	str	r5, [sp, #20]
     d60:	str	r6, [sp, #24]
     d64:	str	r7, [sp, #28]
     d68:	mov	r6, r0
     d6c:	ldr	r0, [r6, #4]
     d70:	cmp	r0, #0
     d74:	bne	11e4 <end_element_handler+0x49c>
     d78:	ldr	r2, [r6, #12]
     d7c:	lsl	r0, r2, #2
     d80:	add	r0, r6, r0
     d84:	ldr	r1, [r0, #144]	; 0x90
     d88:	cmp	r1, #0
     d8c:	beq	f1c <end_element_handler+0x1d4>
     d90:	ldr	r1, [r6, #536]	; 0x218
     d94:	cmp	r1, #0
     d98:	ble	f1c <end_element_handler+0x1d4>
     d9c:	ldr	r0, [r6, #544]	; 0x220
     da0:	bl	0 <is_whitespace>
     da4:	cmp	r0, #0
     da8:	bne	f1c <end_element_handler+0x1d4>
     dac:	ldr	r2, [r6, #532]	; 0x214
     db0:	cmp	r2, #0
     db4:	bne	dcc <end_element_handler+0x84>
     db8:	ldr	r0, [pc, #1092]	; 1204 <end_element_handler+0x4bc>
     dbc:	ldr	r1, [pc, #1092]	; 1208 <end_element_handler+0x4c0>
     dc0:	movw	r2, #590	; 0x24e
     dc4:	ldr	r3, [pc, #1100]	; 1218 <end_element_handler+0x4d0>
     dc8:	bl	0 <__assert_fail>
     dcc:	ldr	ip, [r6, #12]
     dd0:	lsl	r2, ip, #2
     dd4:	add	r3, r6, r2
     dd8:	ldr	r2, [r3, #144]	; 0x90
     ddc:	ldr	r0, [r2, #4]
     de0:	ldr	ip, [r0, #48]	; 0x30
     de4:	cmp	ip, #0
     de8:	ble	e20 <end_element_handler+0xd8>
     dec:	movw	r0, #65236	; 0xfed4
     df0:	movt	r0, #65535	; 0xffff
     df4:	ldr	r1, [pc, #1044]	; 1210 <end_element_handler+0x4c8>
     df8:	ldr	r2, [r3, #400]	; 0x190
     dfc:	bl	0 <coda_set_error>
     e00:	mov	r0, r6
     e04:	ldr	r4, [sp, #16]
     e08:	ldr	r5, [sp, #20]
     e0c:	ldr	r6, [sp, #24]
     e10:	ldr	r7, [sp, #28]
     e14:	ldr	lr, [sp, #8]
     e18:	add	sp, sp, #32
     e1c:	b	5d8 <abort_parser>
     e20:	ldr	ip, [r2, #12]
     e24:	str	ip, [r6, #528]	; 0x210
     e28:	ldr	ip, [r6, #12]
     e2c:	lsl	ip, ip, #2
     e30:	add	r3, r6, ip
     e34:	ldr	r3, [r3, #144]	; 0x90
     e38:	mov	r1, #0
     e3c:	str	r1, [r3, #12]
     e40:	ldr	r1, [r6, #12]
     e44:	lsl	r3, r1, #2
     e48:	add	r0, r6, r3
     e4c:	ldr	r5, [r0, #16]
     e50:	ldr	r3, [r5]
     e54:	ldr	ip, [r3, #8]
     e58:	cmp	ip, #0
     e5c:	bne	e6c <end_element_handler+0x124>
     e60:	ldr	r1, [r3]
     e64:	cmp	r1, #2
     e68:	beq	e80 <end_element_handler+0x138>
     e6c:	ldr	r0, [pc, #940]	; 1220 <end_element_handler+0x4d8>
     e70:	ldr	r1, [pc, #912]	; 1208 <end_element_handler+0x4c0>
     e74:	mov	r2, #70	; 0x46
     e78:	ldr	r3, [pc, #896]	; 1200 <end_element_handler+0x4b8>
     e7c:	bl	0 <__assert_fail>
     e80:	mov	r0, #2
     e84:	bl	0 <coda_type_text_new>
     e88:	mov	r4, r0
     e8c:	cmp	r4, #0
     e90:	bne	e9c <end_element_handler+0x154>
     e94:	mvn	ip, #0
     e98:	b	ecc <end_element_handler+0x184>
     e9c:	ldr	r0, [r5]
     ea0:	ldr	r0, [r0, #36]	; 0x24
     ea4:	cmp	r0, #0
     ea8:	beq	ebc <end_element_handler+0x174>
     eac:	str	r0, [r4, #36]	; 0x24
     eb0:	ldr	r3, [r0, #4]
     eb4:	add	ip, r3, #1
     eb8:	str	ip, [r0, #4]
     ebc:	ldr	r0, [r5]
     ec0:	bl	0 <coda_type_release>
     ec4:	str	r4, [r5]
     ec8:	mov	ip, #0
     ecc:	cmp	ip, #0
     ed0:	beq	ef4 <end_element_handler+0x1ac>
     ed4:	mov	r0, r6
     ed8:	ldr	r4, [sp, #16]
     edc:	ldr	r5, [sp, #20]
     ee0:	ldr	r6, [sp, #24]
     ee4:	ldr	r7, [sp, #28]
     ee8:	ldr	lr, [sp, #8]
     eec:	add	sp, sp, #32
     ef0:	b	5d8 <abort_parser>
     ef4:	ldr	r3, [r6, #12]
     ef8:	lsl	r2, r3, #2
     efc:	add	r0, r6, r2
     f00:	ldr	r0, [r0, #144]	; 0x90
     f04:	bl	0 <coda_dynamic_type_delete>
     f08:	ldr	r3, [r6, #12]
     f0c:	lsl	r0, r3, #2
     f10:	add	r2, r6, r0
     f14:	mov	r1, #0
     f18:	str	r1, [r2, #144]	; 0x90
     f1c:	ldr	r2, [r6, #12]
     f20:	lsl	ip, r2, #2
     f24:	add	r2, r6, ip
     f28:	ldr	r0, [r2, #144]	; 0x90
     f2c:	cmp	r0, #0
     f30:	beq	1008 <end_element_handler+0x2c0>
     f34:	ldr	ip, [r6, #532]	; 0x214
     f38:	cmp	ip, #0
     f3c:	bne	fec <end_element_handler+0x2a4>
     f40:	bl	0 <coda_mem_record_validate>
     f44:	cmp	r0, #0
     f48:	beq	f6c <end_element_handler+0x224>
     f4c:	mov	r0, r6
     f50:	ldr	r4, [sp, #16]
     f54:	ldr	r5, [sp, #20]
     f58:	ldr	r6, [sp, #24]
     f5c:	ldr	r7, [sp, #28]
     f60:	ldr	lr, [sp, #8]
     f64:	add	sp, sp, #32
     f68:	b	5d8 <abort_parser>
     f6c:	mov	r4, #0
     f70:	ldr	r0, [r6, #12]
     f74:	lsl	r0, r0, #2
     f78:	add	r1, r6, r0
     f7c:	ldr	r0, [r1, #144]	; 0x90
     f80:	ldr	r1, [r0, #16]
     f84:	cmp	r4, r1
     f88:	bge	fec <end_element_handler+0x2a4>
     f8c:	ldr	r2, [r0, #20]
     f90:	ldr	r0, [r2, r4, lsl #2]
     f94:	cmp	r0, #0
     f98:	beq	fe4 <end_element_handler+0x29c>
     f9c:	ldr	r1, [r0, #4]
     fa0:	ldr	r2, [r1, #8]
     fa4:	cmp	r2, #1
     fa8:	bne	fe4 <end_element_handler+0x29c>
     fac:	ldr	ip, [r1]
     fb0:	cmp	ip, #2
     fb4:	bne	fe4 <end_element_handler+0x29c>
     fb8:	bl	0 <coda_mem_array_validate>
     fbc:	cmp	r0, #0
     fc0:	beq	fe4 <end_element_handler+0x29c>
     fc4:	mov	r0, r6
     fc8:	ldr	r4, [sp, #16]
     fcc:	ldr	r5, [sp, #20]
     fd0:	ldr	r6, [sp, #24]
     fd4:	ldr	r7, [sp, #28]
     fd8:	ldr	lr, [sp, #8]
     fdc:	add	sp, sp, #32
     fe0:	b	5d8 <abort_parser>
     fe4:	add	r4, r4, #1
     fe8:	b	f70 <end_element_handler+0x228>
     fec:	ldr	r3, [r6, #12]
     ff0:	lsl	ip, r3, #2
     ff4:	add	r1, r6, ip
     ff8:	ldr	r4, [r1, #144]	; 0x90
     ffc:	mov	r3, #0
    1000:	str	r3, [r1, #144]	; 0x90
    1004:	b	1118 <end_element_handler+0x3d0>
    1008:	ldr	r1, [r2, #16]
    100c:	ldr	r4, [r1]
    1010:	ldr	r0, [r4, #8]
    1014:	cmp	r0, #6
    1018:	bne	10c8 <end_element_handler+0x380>
    101c:	ldr	r0, [r6, #532]	; 0x214
    1020:	cmp	r0, #0
    1024:	beq	103c <end_element_handler+0x2f4>
    1028:	ldr	r0, [pc, #484]	; 1214 <end_element_handler+0x4cc>
    102c:	ldr	r1, [pc, #468]	; 1208 <end_element_handler+0x4c0>
    1030:	movw	r2, #619	; 0x26b
    1034:	ldr	r3, [pc, #476]	; 1218 <end_element_handler+0x4d0>
    1038:	bl	0 <__assert_fail>
    103c:	ldr	r0, [r4, #44]	; 0x2c
    1040:	mov	r1, #0
    1044:	ldr	r2, [r6, #8]
    1048:	ldr	r3, [r6, #536]	; 0x218
    104c:	ldr	r5, [r6, #544]	; 0x220
    1050:	str	r5, [sp]
    1054:	bl	0 <coda_mem_data_new>
    1058:	mov	r5, r0
    105c:	cmp	r5, #0
    1060:	bne	1084 <end_element_handler+0x33c>
    1064:	mov	r0, r6
    1068:	ldr	r4, [sp, #16]
    106c:	ldr	r5, [sp, #20]
    1070:	ldr	r6, [sp, #24]
    1074:	ldr	r7, [sp, #28]
    1078:	ldr	lr, [sp, #8]
    107c:	add	sp, sp, #32
    1080:	b	5d8 <abort_parser>
    1084:	ldr	r1, [r6, #528]	; 0x210
    1088:	mov	r2, r5
    108c:	mov	r0, r4
    1090:	bl	0 <coda_mem_time_new>
    1094:	mov	r4, r0
    1098:	cmp	r4, #0
    109c:	bne	1110 <end_element_handler+0x3c8>
    10a0:	mov	r0, r5
    10a4:	bl	0 <coda_dynamic_type_delete>
    10a8:	mov	r0, r6
    10ac:	ldr	r4, [sp, #16]
    10b0:	ldr	r5, [sp, #20]
    10b4:	ldr	r6, [sp, #24]
    10b8:	ldr	r7, [sp, #28]
    10bc:	ldr	lr, [sp, #8]
    10c0:	add	sp, sp, #32
    10c4:	b	5d8 <abort_parser>
    10c8:	ldr	r1, [r6, #528]	; 0x210
    10cc:	ldr	r2, [r6, #8]
    10d0:	ldr	r3, [r6, #536]	; 0x218
    10d4:	ldr	ip, [r6, #544]	; 0x220
    10d8:	str	ip, [sp]
    10dc:	mov	r0, r4
    10e0:	bl	0 <coda_mem_data_new>
    10e4:	mov	r4, r0
    10e8:	cmp	r4, #0
    10ec:	bne	1110 <end_element_handler+0x3c8>
    10f0:	mov	r0, r6
    10f4:	ldr	r4, [sp, #16]
    10f8:	ldr	r5, [sp, #20]
    10fc:	ldr	r6, [sp, #24]
    1100:	ldr	r7, [sp, #28]
    1104:	ldr	lr, [sp, #8]
    1108:	add	sp, sp, #32
    110c:	b	5d8 <abort_parser>
    1110:	mov	ip, #0
    1114:	str	ip, [r6, #528]	; 0x210
    1118:	ldr	r2, [r6, #528]	; 0x210
    111c:	cmp	r2, #0
    1120:	beq	1138 <end_element_handler+0x3f0>
    1124:	ldr	r0, [pc, #240]	; 121c <end_element_handler+0x4d4>
    1128:	ldr	r1, [pc, #216]	; 1208 <end_element_handler+0x4c0>
    112c:	movw	r2, #685	; 0x2ad
    1130:	ldr	r3, [pc, #224]	; 1218 <end_element_handler+0x4d0>
    1134:	bl	0 <__assert_fail>
    1138:	ldr	r1, [r6, #12]
    113c:	lsl	r2, r1, #2
    1140:	add	r0, r6, r2
    1144:	ldr	r5, [r0, #140]	; 0x8c
    1148:	ldr	r7, [r0, #272]	; 0x110
    114c:	ldr	r1, [r5, #20]
    1150:	ldr	ip, [r1, r7, lsl #2]
    1154:	cmp	ip, #0
    1158:	beq	11cc <end_element_handler+0x484>
    115c:	ldr	r3, [ip, #4]
    1160:	ldr	r2, [r3, #8]
    1164:	cmp	r2, #1
    1168:	bne	1178 <end_element_handler+0x430>
    116c:	ldr	r1, [r3]
    1170:	cmp	r1, #2
    1174:	beq	118c <end_element_handler+0x444>
    1178:	ldr	r0, [pc, #140]	; 120c <end_element_handler+0x4c4>
    117c:	ldr	r1, [pc, #132]	; 1208 <end_element_handler+0x4c0>
    1180:	mov	r2, #692	; 0x2b4
    1184:	ldr	r3, [pc, #140]	; 1218 <end_element_handler+0x4d0>
    1188:	bl	0 <__assert_fail>
    118c:	ldr	ip, [r5, #20]
    1190:	ldr	r0, [ip, r7, lsl #2]
    1194:	mov	r1, r4
    1198:	bl	0 <coda_mem_array_add_element>
    119c:	cmp	r0, #0
    11a0:	beq	11d0 <end_element_handler+0x488>
    11a4:	mov	r0, r4
    11a8:	bl	0 <coda_dynamic_type_delete>
    11ac:	mov	r0, r6
    11b0:	ldr	r4, [sp, #16]
    11b4:	ldr	r5, [sp, #20]
    11b8:	ldr	r6, [sp, #24]
    11bc:	ldr	r7, [sp, #28]
    11c0:	ldr	lr, [sp, #8]
    11c4:	add	sp, sp, #32
    11c8:	b	5d8 <abort_parser>
    11cc:	str	r4, [r1, r7, lsl #2]
    11d0:	ldr	r1, [r6, #12]
    11d4:	sub	r3, r1, #1
    11d8:	str	r3, [r6, #12]
    11dc:	mov	r3, #0
    11e0:	str	r3, [r6, #536]	; 0x218
    11e4:	ldr	r4, [sp, #16]
    11e8:	ldr	r5, [sp, #20]
    11ec:	ldr	r6, [sp, #24]
    11f0:	ldr	r7, [sp, #28]
    11f4:	ldr	lr, [sp, #8]
    11f8:	add	sp, sp, #32
    11fc:	bx	lr
    1200:	.word	0x000004f6
    1204:	.word	0x000003e1
    1208:	.word	0x0000018d
    120c:	.word	0x00000213
    1210:	.word	0x0000044f
    1214:	.word	0x00000105
    1218:	.word	0x00000531
    121c:	.word	0x00000314
    1220:	.word	0x0000034b

00001224 <character_data_handler>:
    1224:	mov	ip, sp
    1228:	sub	sp, sp, #32
    122c:	str	ip, [sp, #4]
    1230:	str	lr, [sp, #8]
    1234:	str	r4, [sp, #16]
    1238:	str	r5, [sp, #20]
    123c:	str	r6, [sp, #24]
    1240:	mov	r5, r2
    1244:	mov	r6, r1
    1248:	mov	r4, r0
    124c:	ldr	r3, [r4, #532]	; 0x214
    1250:	cmp	r3, #0
    1254:	bne	12c0 <character_data_handler+0x9c>
    1258:	ldr	r1, [r4, #12]
    125c:	lsl	r2, r1, #2
    1260:	add	r2, r4, r2
    1264:	ldr	ip, [r2, #144]	; 0x90
    1268:	cmp	ip, #0
    126c:	beq	12c0 <character_data_handler+0x9c>
    1270:	mov	r1, r5
    1274:	mov	r0, r6
    1278:	bl	0 <is_whitespace>
    127c:	cmp	r0, #0
    1280:	bne	12c0 <character_data_handler+0x9c>
    1284:	movw	r0, #65236	; 0xfed4
    1288:	movt	r0, #65535	; 0xffff
    128c:	ldr	r1, [pc, #216]	; 136c <character_data_handler+0x148>
    1290:	ldr	r2, [r4, #12]
    1294:	lsl	r2, r2, #2
    1298:	add	r2, r4, r2
    129c:	ldr	r2, [r2, #400]	; 0x190
    12a0:	bl	0 <coda_set_error>
    12a4:	mov	r0, r4
    12a8:	ldr	r4, [sp, #16]
    12ac:	ldr	r5, [sp, #20]
    12b0:	ldr	r6, [sp, #24]
    12b4:	ldr	lr, [sp, #8]
    12b8:	add	sp, sp, #32
    12bc:	b	5d8 <abort_parser>
    12c0:	ldr	r2, [r4, #536]	; 0x218
    12c4:	add	r1, r2, r5
    12c8:	ldr	ip, [r4, #540]	; 0x21c
    12cc:	cmp	r1, ip
    12d0:	ble	1330 <character_data_handler+0x10c>
    12d4:	ldr	r0, [r4, #544]	; 0x220
    12d8:	bl	0 <realloc>
    12dc:	cmp	r0, #0
    12e0:	bne	1320 <character_data_handler+0xfc>
    12e4:	mvn	r0, #0
    12e8:	ldr	r1, [pc, #128]	; 1370 <character_data_handler+0x14c>
    12ec:	ldr	r3, [r4, #536]	; 0x218
    12f0:	add	r2, r3, r5
    12f4:	ldr	r3, [pc, #120]	; 1374 <character_data_handler+0x150>
    12f8:	movw	r5, #731	; 0x2db
    12fc:	str	r5, [sp]
    1300:	bl	0 <coda_set_error>
    1304:	mov	r0, r4
    1308:	ldr	r4, [sp, #16]
    130c:	ldr	r5, [sp, #20]
    1310:	ldr	r6, [sp, #24]
    1314:	ldr	lr, [sp, #8]
    1318:	add	sp, sp, #32
    131c:	b	5d8 <abort_parser>
    1320:	str	r0, [r4, #544]	; 0x220
    1324:	ldr	r2, [r4, #536]	; 0x218
    1328:	add	r1, r2, r5
    132c:	str	r1, [r4, #540]	; 0x21c
    1330:	ldr	ip, [r4, #544]	; 0x220
    1334:	ldr	r1, [r4, #536]	; 0x218
    1338:	add	r0, ip, r1
    133c:	mov	r2, r5
    1340:	mov	r1, r6
    1344:	bl	0 <memcpy>
    1348:	ldr	r1, [r4, #536]	; 0x218
    134c:	add	r3, r1, r5
    1350:	str	r3, [r4, #536]	; 0x218
    1354:	ldr	r4, [sp, #16]
    1358:	ldr	r5, [sp, #20]
    135c:	ldr	r6, [sp, #24]
    1360:	ldr	lr, [sp, #8]
    1364:	add	sp, sp, #32
    1368:	bx	lr
    136c:	.word	0x000002bb
    1370:	.word	0x0000047f
    1374:	.word	0x0000018d

00001378 <coda_xml_parse>:
    1378:	mov	ip, sp
    137c:	sub	sp, sp, #624	; 0x270
    1380:	sub	sp, sp, #8192	; 0x2000
    1384:	str	ip, [sp]
    1388:	str	lr, [sp, #4]
    138c:	str	r4, [sp, #8]
    1390:	str	r5, [sp, #12]
    1394:	str	r6, [sp, #16]
    1398:	mov	r4, r0
    139c:	mov	r0, #0
    13a0:	str	r0, [sp, #72]	; 0x48
    13a4:	mov	r3, #0
    13a8:	str	r3, [sp, #76]	; 0x4c
    13ac:	mov	ip, #0
    13b0:	str	ip, [sp, #80]	; 0x50
    13b4:	mvn	r1, #0
    13b8:	str	r1, [sp, #84]	; 0x54
    13bc:	mov	r2, #0
    13c0:	str	r2, [sp, #600]	; 0x258
    13c4:	mov	r3, #0
    13c8:	str	r3, [sp, #604]	; 0x25c
    13cc:	mov	ip, #0
    13d0:	str	ip, [sp, #608]	; 0x260
    13d4:	mov	r0, #0
    13d8:	str	r0, [sp, #612]	; 0x264
    13dc:	mov	r1, #0
    13e0:	str	r1, [sp, #616]	; 0x268
    13e4:	mov	r0, #0
    13e8:	mov	r1, #32
    13ec:	bl	0 <coda_XML_ParserCreateNS>
    13f0:	str	r0, [sp, #72]	; 0x48
    13f4:	cmp	r0, #0
    13f8:	bne	1410 <coda_xml_parse+0x98>
    13fc:	mvn	r0, #13
    1400:	ldr	r1, [pc, #1012]	; 17fc <coda_xml_parse+0x484>
    1404:	bl	0 <coda_set_error>
    1408:	mvn	r0, #0
    140c:	b	17c0 <coda_xml_parse+0x448>
    1410:	str	r4, [sp, #80]	; 0x50
    1414:	ldr	r1, [r4, #24]
    1418:	cmp	r1, #0
    141c:	beq	1434 <coda_xml_parse+0xbc>
    1420:	ldr	ip, [r1, #28]
    1424:	cmp	ip, #0
    1428:	moveq	r1, #1
    142c:	movne	r1, #0
    1430:	b	1438 <coda_xml_parse+0xc0>
    1434:	mov	r1, #1
    1438:	str	r1, [sp, #604]	; 0x25c
    143c:	cmp	r1, #0
    1440:	beq	1484 <coda_xml_parse+0x10c>
    1444:	mov	r0, #2
    1448:	bl	0 <coda_type_record_new>
    144c:	mov	r5, r0
    1450:	cmp	r5, #0
    1454:	bne	1468 <coda_xml_parse+0xf0>
    1458:	ldr	r0, [sp, #72]	; 0x48
    145c:	bl	0 <coda_XML_ParserFree>
    1460:	mvn	r0, #0
    1464:	b	17c0 <coda_xml_parse+0x448>
    1468:	mov	r1, #0
    146c:	mov	r0, r5
    1470:	bl	0 <coda_mem_record_new>
    1474:	str	r0, [sp, #216]	; 0xd8
    1478:	mov	r0, r5
    147c:	bl	0 <coda_type_release>
    1480:	b	14c0 <coda_xml_parse+0x148>
    1484:	ldr	r1, [r4, #24]
    1488:	ldr	r2, [r1, #28]
    148c:	ldr	ip, [r2, #8]
    1490:	cmp	ip, #0
    1494:	beq	14ac <coda_xml_parse+0x134>
    1498:	ldr	r0, [pc, #868]	; 1804 <coda_xml_parse+0x48c>
    149c:	ldr	r1, [pc, #840]	; 17ec <coda_xml_parse+0x474>
    14a0:	movw	r2, #774	; 0x306
    14a4:	ldr	r3, [pc, #836]	; 17f0 <coda_xml_parse+0x478>
    14a8:	bl	0 <__assert_fail>
    14ac:	ldr	r0, [r4, #24]
    14b0:	ldr	r0, [r0, #28]
    14b4:	mov	r1, #0
    14b8:	bl	0 <coda_mem_record_new>
    14bc:	str	r0, [sp, #216]	; 0xd8
    14c0:	ldr	r2, [sp, #216]	; 0xd8
    14c4:	cmp	r2, #0
    14c8:	bne	14dc <coda_xml_parse+0x164>
    14cc:	add	r0, sp, #72	; 0x48
    14d0:	bl	538 <parser_info_cleanup>
    14d4:	mvn	r0, #0
    14d8:	b	17c0 <coda_xml_parse+0x448>
    14dc:	add	r1, r2, #4
    14e0:	str	r1, [sp, #88]	; 0x58
    14e4:	mvn	r1, #0
    14e8:	str	r1, [sp, #344]	; 0x158
    14ec:	mov	r3, #0
    14f0:	str	r3, [sp, #472]	; 0x1d8
    14f4:	mov	r0, #0
    14f8:	str	r0, [sp, #84]	; 0x54
    14fc:	ldr	r0, [sp, #72]	; 0x48
    1500:	add	r1, sp, #72	; 0x48
    1504:	bl	0 <coda_XML_SetUserData>
    1508:	ldr	r0, [sp, #72]	; 0x48
    150c:	mov	r1, #2
    1510:	bl	0 <coda_XML_SetParamEntityParsing>
    1514:	ldr	r0, [sp, #72]	; 0x48
    1518:	ldr	r1, [pc, #708]	; 17e4 <coda_xml_parse+0x46c>
    151c:	ldr	r2, [pc, #708]	; 17e8 <coda_xml_parse+0x470>
    1520:	bl	0 <coda_XML_SetElementHandler>
    1524:	ldr	r0, [sp, #72]	; 0x48
    1528:	ldr	r1, [pc, #720]	; 1800 <coda_xml_parse+0x488>
    152c:	bl	0 <coda_XML_SetCharacterDataHandler>
    1530:	ldr	r0, [sp, #72]	; 0x48
    1534:	ldr	r1, [pc, #716]	; 1808 <coda_xml_parse+0x490>
    1538:	bl	0 <coda_XML_SetNotStandaloneHandler>
    153c:	ldr	r2, [r4, #52]	; 0x34
    1540:	ldr	r1, [r2, #8]
    1544:	ldr	ip, [r2, #12]
    1548:	mov	r2, #0
    154c:	asr	r0, ip, #31
    1550:	lsr	r3, r0, #19
    1554:	adds	r0, r1, r3
    1558:	adc	r3, ip, r2
    155c:	lsr	r2, r0, #13
    1560:	orr	r3, r2, r3, lsl #19
    1564:	add	r5, r3, #1
    1568:	lsl	r2, r3, #13
    156c:	asr	r0, r2, #31
    1570:	cmp	ip, r0
    1574:	bne	1588 <coda_xml_parse+0x210>
    1578:	cmp	r1, r2
    157c:	movhi	ip, #1
    1580:	movls	ip, #0
    1584:	b	1594 <coda_xml_parse+0x21c>
    1588:	cmp	ip, r0
    158c:	movgt	ip, #1
    1590:	movle	ip, #0
    1594:	cmp	ip, #0
    1598:	movne	r5, r5
    159c:	moveq	r5, r3
    15a0:	mov	r6, #0
    15a4:	cmp	r6, r5
    15a8:	bge	1760 <coda_xml_parse+0x3e8>
    15ac:	ldr	r3, [r4, #52]	; 0x34
    15b0:	ldr	ip, [r3, #52]	; 0x34
    15b4:	cmp	ip, #0
    15b8:	bne	1670 <coda_xml_parse+0x2f8>
    15bc:	ldr	r0, [r3, #56]	; 0x38
    15c0:	lsl	r1, r6, #13
    15c4:	mov	r2, #0
    15c8:	bl	0 <lseek>
    15cc:	cmp	r0, #0
    15d0:	bge	1614 <coda_xml_parse+0x29c>
    15d4:	lsl	r0, r6, #13
    15d8:	asr	r1, r0, #31
    15dc:	add	r2, sp, #24
    15e0:	bl	0 <coda_str64>
    15e4:	bl	0 <__errno_location>
    15e8:	ldr	r0, [r0]
    15ec:	bl	0 <strerror>
    15f0:	mov	r3, r0
    15f4:	mvn	r0, #21
    15f8:	ldr	r1, [pc, #472]	; 17d8 <coda_xml_parse+0x460>
    15fc:	add	r2, sp, #24
    1600:	bl	0 <coda_set_error>
    1604:	add	r0, sp, #72	; 0x48
    1608:	bl	538 <parser_info_cleanup>
    160c:	mvn	r0, #0
    1610:	b	17c0 <coda_xml_parse+0x448>
    1614:	ldr	r1, [r4, #52]	; 0x34
    1618:	ldr	r0, [r1, #56]	; 0x38
    161c:	add	r1, sp, #624	; 0x270
    1620:	mov	r2, #8192	; 0x2000
    1624:	bl	0 <read>
    1628:	mov	r2, r0
    162c:	cmp	r2, #0
    1630:	bge	1668 <coda_xml_parse+0x2f0>
    1634:	bl	0 <__errno_location>
    1638:	ldr	r0, [r0]
    163c:	bl	0 <strerror>
    1640:	mvn	r2, #21
    1644:	ldr	r1, [pc, #428]	; 17f8 <coda_xml_parse+0x480>
    1648:	mov	r3, r0
    164c:	mov	r0, r2
    1650:	mov	r2, r3
    1654:	bl	0 <coda_set_error>
    1658:	add	r0, sp, #72	; 0x48
    165c:	bl	538 <parser_info_cleanup>
    1660:	mvn	r0, #0
    1664:	b	17c0 <coda_xml_parse+0x448>
    1668:	add	r1, sp, #624	; 0x270
    166c:	b	16ac <coda_xml_parse+0x334>
    1670:	sub	r2, r5, #1
    1674:	cmp	r6, r2
    1678:	blt	169c <coda_xml_parse+0x324>
    167c:	ldr	ip, [r3, #8]
    1680:	ldr	r1, [r3, #12]
    1684:	lsl	r0, r5, #13
    1688:	sub	r2, r0, #8192	; 0x2000
    168c:	asr	r3, r2, #31
    1690:	subs	r2, ip, r2
    1694:	sbc	ip, r1, r3
    1698:	b	16a0 <coda_xml_parse+0x328>
    169c:	mov	r2, #8192	; 0x2000
    16a0:	ldr	r3, [r4, #52]	; 0x34
    16a4:	ldr	r1, [r3, #48]	; 0x30
    16a8:	add	r1, r1, r6, lsl #13
    16ac:	ldr	r3, [pc, #320]	; 17f4 <coda_xml_parse+0x47c>
    16b0:	mov	ip, #0
    16b4:	str	ip, [r3]
    16b8:	ldr	r0, [sp, #72]	; 0x48
    16bc:	sub	r3, r5, #1
    16c0:	cmp	r6, r3
    16c4:	moveq	r3, #1
    16c8:	movne	r3, #0
    16cc:	bl	0 <coda_XML_Parse>
    16d0:	cmp	r0, #0
    16d4:	beq	16f0 <coda_xml_parse+0x378>
    16d8:	ldr	r3, [pc, #276]	; 17f4 <coda_xml_parse+0x47c>
    16dc:	ldr	r3, [r3]
    16e0:	cmp	r3, #0
    16e4:	bne	16f0 <coda_xml_parse+0x378>
    16e8:	add	r6, r6, #1
    16ec:	b	15a4 <coda_xml_parse+0x22c>
    16f0:	ldr	r0, [pc, #252]	; 17f4 <coda_xml_parse+0x47c>
    16f4:	ldr	r0, [r0]
    16f8:	cmp	r0, #0
    16fc:	bne	1724 <coda_xml_parse+0x3ac>
    1700:	ldr	r0, [sp, #72]	; 0x48
    1704:	bl	0 <coda_XML_GetErrorCode>
    1708:	bl	0 <coda_XML_ErrorString>
    170c:	mvn	r2, #13
    1710:	ldr	r1, [pc, #196]	; 17dc <coda_xml_parse+0x464>
    1714:	mov	r3, r0
    1718:	mov	r0, r2
    171c:	mov	r2, r3
    1720:	bl	0 <coda_set_error>
    1724:	ldr	r0, [sp, #72]	; 0x48
    1728:	bl	0 <coda_XML_GetCurrentByteIndex>
    172c:	add	r2, sp, #48	; 0x30
    1730:	bl	0 <coda_str64>
    1734:	ldr	r0, [sp, #72]	; 0x48
    1738:	bl	0 <coda_XML_GetCurrentLineNumber>
    173c:	ldr	r3, [pc, #156]	; 17e0 <coda_xml_parse+0x468>
    1740:	mov	r1, r0
    1744:	add	r2, sp, #48	; 0x30
    1748:	mov	r0, r3
    174c:	bl	0 <coda_add_error_message>
    1750:	add	r0, sp, #72	; 0x48
    1754:	bl	538 <parser_info_cleanup>
    1758:	mvn	r0, #0
    175c:	b	17c0 <coda_xml_parse+0x448>
    1760:	ldr	r0, [sp, #72]	; 0x48
    1764:	bl	0 <coda_XML_ParserFree>
    1768:	mov	r2, #0
    176c:	str	r2, [sp, #72]	; 0x48
    1770:	ldr	r0, [sp, #604]	; 0x25c
    1774:	cmp	r0, #0
    1778:	beq	17a4 <coda_xml_parse+0x42c>
    177c:	add	r0, sp, #216	; 0xd8
    1780:	ldr	ip, [sp, #216]	; 0xd8
    1784:	ldr	r1, [ip, #4]
    1788:	bl	0 <coda_mem_type_update>
    178c:	cmp	r0, #0
    1790:	beq	17a4 <coda_xml_parse+0x42c>
    1794:	add	r0, sp, #72	; 0x48
    1798:	bl	538 <parser_info_cleanup>
    179c:	mvn	r0, #0
    17a0:	b	17c0 <coda_xml_parse+0x448>
    17a4:	ldr	r2, [sp, #216]	; 0xd8
    17a8:	str	r2, [r4, #20]
    17ac:	mvn	r0, #0
    17b0:	str	r0, [sp, #84]	; 0x54
    17b4:	add	r0, sp, #72	; 0x48
    17b8:	bl	538 <parser_info_cleanup>
    17bc:	mov	r0, #0
    17c0:	ldr	r4, [sp, #8]
    17c4:	ldr	r5, [sp, #12]
    17c8:	ldr	r6, [sp, #16]
    17cc:	ldr	lr, [sp, #4]
    17d0:	ldr	sp, [sp]
    17d4:	bx	lr
    17d8:	.word	0x000003f9
    17dc:	.word	0x00000337
    17e0:	.word	0x000002f6
	...
    17ec:	.word	0x0000018d
    17f0:	.word	0x00000545
    17f4:	.word	0x00000000
    17f8:	.word	0x0000029d
    17fc:	.word	0x000001f7
    1800:	.word	0x00000000
    1804:	.word	0x00000052
    1808:	.word	0x00000000
