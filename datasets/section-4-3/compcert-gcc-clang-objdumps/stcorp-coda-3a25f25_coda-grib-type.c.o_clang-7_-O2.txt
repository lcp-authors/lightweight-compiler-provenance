
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_type_delete>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	cmp	r0, #0
   c:	beq	7c <coda_grib_type_delete+0x7c>
  10:	mov	r4, r0
  14:	ldr	r0, [r0]
  18:	cmp	r0, #105	; 0x69
  1c:	bne	9c <coda_grib_type_delete+0x9c>
  20:	ldr	r0, [r4, #4]
  24:	ldr	r1, [r0, #8]
  28:	cmp	r1, #1
  2c:	bne	64 <coda_grib_type_delete+0x64>
  30:	ldr	r0, [r4, #12]
  34:	cmp	r0, #0
  38:	beq	40 <coda_grib_type_delete+0x40>
  3c:	bl	0 <coda_dynamic_type_delete>
  40:	ldr	r0, [r4, #56]	; 0x38
  44:	cmp	r0, #0
  48:	beq	50 <coda_grib_type_delete+0x50>
  4c:	bl	0 <free>
  50:	ldr	r0, [r4, #60]	; 0x3c
  54:	cmp	r0, #0
  58:	beq	60 <coda_grib_type_delete+0x60>
  5c:	bl	0 <free>
  60:	ldr	r0, [r4, #4]
  64:	cmp	r0, #0
  68:	beq	70 <coda_grib_type_delete+0x70>
  6c:	bl	0 <coda_type_release>
  70:	mov	r0, r4
  74:	pop	{r4, sl, fp, lr}
  78:	b	0 <free>
  7c:	movw	r0, #0
  80:	movw	r1, #0
  84:	movw	r3, #0
  88:	mov	r2, #61	; 0x3d
  8c:	movt	r0, #0
  90:	movt	r1, #0
  94:	movt	r3, #0
  98:	bl	0 <__assert_fail>
  9c:	movw	r0, #0
  a0:	movw	r1, #0
  a4:	movw	r3, #0
  a8:	mov	r2, #62	; 0x3e
  ac:	movt	r0, #0
  b0:	movt	r1, #0
  b4:	movt	r3, #0
  b8:	bl	0 <__assert_fail>

000000bc <coda_grib_value_array_new>:
  bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0:	add	fp, sp, #28
  c4:	sub	sp, sp, #4
  c8:	cmp	r0, #0
  cc:	beq	184 <coda_grib_value_array_new+0xc8>
  d0:	ldr	r9, [r0, #40]	; 0x28
  d4:	mov	r6, r0
  d8:	ldr	r0, [r9, #8]
  dc:	cmp	r0, #3
  e0:	bne	1a0 <coda_grib_value_array_new+0xe4>
  e4:	mov	r0, #64	; 0x40
  e8:	mov	r4, r3
  ec:	mov	r7, r2
  f0:	mov	r8, r1
  f4:	bl	0 <malloc>
  f8:	cmp	r0, #0
  fc:	beq	1c0 <coda_grib_value_array_new+0x104>
 100:	mov	r5, r0
 104:	ldr	r0, [r6, #4]
 108:	mov	sl, #105	; 0x69
 10c:	vmov.i32	q8, #0	; 0x00000000
 110:	lsl	r1, r7, #3
 114:	mov	r2, #32
 118:	add	r0, r0, #1
 11c:	str	r0, [r6, #4]
 120:	lsl	r0, r4, #3
 124:	str	sl, [r5]
 128:	stmib	r5, {r6, r8}
 12c:	mov	r4, #0
 130:	str	r1, [r5, #16]
 134:	orr	r0, r0, r7, lsr #29
 138:	str	r0, [r5, #20]
 13c:	add	r0, r5, #48	; 0x30
 140:	str	r4, [r5, #24]
 144:	str	r2, [r5, #28]
 148:	vst1.64	{d16-d17}, [r0]
 14c:	add	r0, r5, #32
 150:	vst1.64	{d16-d17}, [r0]
 154:	mov	r0, #8
 158:	bl	0 <malloc>
 15c:	cmp	r0, #0
 160:	str	r0, [r5, #12]
 164:	beq	1f4 <coda_grib_value_array_new+0x138>
 168:	str	sl, [r0]
 16c:	str	r9, [r0, #4]
 170:	mov	r4, r5
 174:	ldr	r0, [r9, #4]
 178:	add	r0, r0, #1
 17c:	str	r0, [r9, #4]
 180:	b	1e8 <coda_grib_value_array_new+0x12c>
 184:	movw	r1, #0
 188:	movw	r2, #0
 18c:	mvn	r0, #99	; 0x63
 190:	mov	r3, #92	; 0x5c
 194:	movt	r1, #0
 198:	movt	r2, #0
 19c:	b	1e0 <coda_grib_value_array_new+0x124>
 1a0:	bl	0 <coda_type_get_class_name>
 1a4:	movw	r1, #0
 1a8:	mov	r2, r0
 1ac:	movw	r0, #65136	; 0xfe70
 1b0:	movt	r0, #65535	; 0xffff
 1b4:	movt	r1, #0
 1b8:	bl	0 <coda_set_error>
 1bc:	b	1e4 <coda_grib_value_array_new+0x128>
 1c0:	movw	r1, #0
 1c4:	movw	r3, #0
 1c8:	mov	r0, #106	; 0x6a
 1cc:	mov	r2, #64	; 0x40
 1d0:	str	r0, [sp]
 1d4:	movt	r1, #0
 1d8:	movt	r3, #0
 1dc:	mvn	r0, #0
 1e0:	bl	0 <coda_set_error>
 1e4:	mov	r4, #0
 1e8:	mov	r0, r4
 1ec:	sub	sp, fp, #28
 1f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1f4:	mov	r0, r5
 1f8:	bl	0 <coda_grib_type_delete>
 1fc:	movw	r1, #0
 200:	movw	r3, #0
 204:	mov	r0, #130	; 0x82
 208:	mov	r2, #8
 20c:	str	r0, [sp]
 210:	movt	r1, #0
 214:	movt	r3, #0
 218:	mvn	r0, #0
 21c:	bl	0 <coda_set_error>
 220:	b	1e8 <coda_grib_value_array_new+0x12c>

00000224 <coda_grib_value_array_simple_packing_new>:
 224:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 228:	add	fp, sp, #24
 22c:	vpush	{d8}
 230:	sub	sp, sp, #8
 234:	vmov.f32	s16, s0
 238:	mov	r5, r1
 23c:	bl	bc <coda_grib_value_array_new>
 240:	cmp	r0, #0
 244:	beq	47c <coda_grib_value_array_simple_packing_new+0x258>
 248:	ldr	r1, [fp, #16]
 24c:	mov	r4, r0
 250:	ldr	r0, [fp, #12]
 254:	ldr	r3, [fp, #8]
 258:	mov	r2, #1
 25c:	vmov.f64	d16, #112	; 0x3f800000  1.0
 260:	cmp	r1, #0
 264:	strd	r2, [r4, #24]
 268:	strh	r0, [r4, #32]
 26c:	strh	r1, [r4, #34]	; 0x22
 270:	vstr	s16, [r4, #36]	; 0x24
 274:	blt	290 <coda_grib_value_array_simple_packing_new+0x6c>
 278:	beq	2a4 <coda_grib_value_array_simple_packing_new+0x80>
 27c:	rsb	r1, r1, #0
 280:	adds	r1, r1, #1
 284:	vadd.f64	d16, d16, d16
 288:	bne	280 <coda_grib_value_array_simple_packing_new+0x5c>
 28c:	b	2a4 <coda_grib_value_array_simple_packing_new+0x80>
 290:	adds	r1, r1, #1
 294:	vadd.f64	d16, d16, d16
 298:	bne	290 <coda_grib_value_array_simple_packing_new+0x6c>
 29c:	vmov.f64	d17, #112	; 0x3f800000  1.0
 2a0:	vdiv.f64	d16, d17, d16
 2a4:	ldr	r8, [fp, #20]
 2a8:	cmp	r0, #1
 2ac:	blt	2d4 <coda_grib_value_array_simple_packing_new+0xb0>
 2b0:	rsb	r1, r0, #0
 2b4:	vmov.f64	d17, #112	; 0x3f800000  1.0
 2b8:	vmov.f64	d18, #36	; 0x41200000  10.0
 2bc:	adds	r1, r1, #1
 2c0:	vmul.f64	d17, d17, d18
 2c4:	bne	2bc <coda_grib_value_array_simple_packing_new+0x98>
 2c8:	vmov.f64	d18, #112	; 0x3f800000  1.0
 2cc:	vdiv.f64	d17, d18, d17
 2d0:	b	2f4 <coda_grib_value_array_simple_packing_new+0xd0>
 2d4:	cmp	r0, #0
 2d8:	beq	34c <coda_grib_value_array_simple_packing_new+0x128>
 2dc:	vmov.f64	d17, #112	; 0x3f800000  1.0
 2e0:	vmov.f64	d18, #36	; 0x41200000  10.0
 2e4:	mov	r1, r0
 2e8:	adds	r1, r1, #1
 2ec:	vmul.f64	d17, d17, d18
 2f0:	bne	2e8 <coda_grib_value_array_simple_packing_new+0xc4>
 2f4:	vmul.f64	d16, d16, d17
 2f8:	vcvt.f64.f32	d17, s16
 2fc:	cmp	r0, #1
 300:	vstr	d16, [r4, #40]	; 0x28
 304:	blt	32c <coda_grib_value_array_simple_packing_new+0x108>
 308:	vmov.f64	d16, #112	; 0x3f800000  1.0
 30c:	rsb	r0, r0, #0
 310:	vmov.f64	d18, #36	; 0x41200000  10.0
 314:	adds	r0, r0, #1
 318:	vmul.f64	d16, d16, d18
 31c:	bne	314 <coda_grib_value_array_simple_packing_new+0xf0>
 320:	vmov.f64	d18, #112	; 0x3f800000  1.0
 324:	vdiv.f64	d18, d18, d16
 328:	b	358 <coda_grib_value_array_simple_packing_new+0x134>
 32c:	vmov.f64	d18, #112	; 0x3f800000  1.0
 330:	cmp	r0, #0
 334:	beq	358 <coda_grib_value_array_simple_packing_new+0x134>
 338:	vmov.f64	d16, #36	; 0x41200000  10.0
 33c:	adds	r0, r0, #1
 340:	vmul.f64	d18, d18, d16
 344:	bne	33c <coda_grib_value_array_simple_packing_new+0x118>
 348:	b	358 <coda_grib_value_array_simple_packing_new+0x134>
 34c:	vmov.f64	d18, #112	; 0x3f800000  1.0
 350:	vcvt.f64.f32	d17, s16
 354:	vstr	d16, [r4, #40]	; 0x28
 358:	mov	r0, #0
 35c:	cmp	r8, #0
 360:	vmul.f64	d16, d17, d18
 364:	str	r0, [r4, #56]	; 0x38
 368:	str	r0, [r4, #60]	; 0x3c
 36c:	vstr	d16, [r4, #48]	; 0x30
 370:	beq	480 <coda_grib_value_array_simple_packing_new+0x25c>
 374:	ands	r6, r5, #7
 378:	movwne	r6, #1
 37c:	add	r7, r6, r5, asr #3
 380:	mov	r0, r7
 384:	bl	0 <malloc>
 388:	cmp	r0, #0
 38c:	str	r0, [r4, #56]	; 0x38
 390:	beq	440 <coda_grib_value_array_simple_packing_new+0x21c>
 394:	mov	r1, r8
 398:	mov	r2, r7
 39c:	bl	0 <memcpy>
 3a0:	mov	r0, r7
 3a4:	bl	0 <malloc>
 3a8:	cmp	r0, #0
 3ac:	str	r0, [r4, #60]	; 0x3c
 3b0:	beq	450 <coda_grib_value_array_simple_packing_new+0x22c>
 3b4:	cmp	r7, #1
 3b8:	blt	480 <coda_grib_value_array_simple_packing_new+0x25c>
 3bc:	asr	r1, r5, #3
 3c0:	mov	r2, #0
 3c4:	add	r1, r1, r6
 3c8:	sub	r1, r1, #1
 3cc:	b	3d8 <coda_grib_value_array_simple_packing_new+0x1b4>
 3d0:	ldr	r0, [r4, #60]	; 0x3c
 3d4:	add	r2, r2, #1
 3d8:	ldr	r3, [r4, #56]	; 0x38
 3dc:	tst	r2, #15
 3e0:	ldrb	r3, [r3, r2]
 3e4:	and	r7, r3, #1
 3e8:	ubfx	r6, r3, #6, #1
 3ec:	add	r7, r7, r3, lsr #7
 3f0:	add	r7, r7, r6
 3f4:	ubfx	r6, r3, #5, #1
 3f8:	add	r7, r7, r6
 3fc:	ubfx	r6, r3, #4, #1
 400:	add	r7, r7, r6
 404:	ubfx	r6, r3, #3, #1
 408:	add	r7, r7, r6
 40c:	ubfx	r6, r3, #2, #1
 410:	ubfx	r3, r3, #1, #1
 414:	add	r7, r7, r6
 418:	add	r3, r7, r3
 41c:	strb	r3, [r0, r2]
 420:	ldrne	r0, [r4, #60]	; 0x3c
 424:	ldrbne	r3, [r0, r2]!
 428:	ldrbne	r7, [r0, #-1]
 42c:	addne	r3, r3, r7
 430:	strbne	r3, [r0]
 434:	cmp	r1, r2
 438:	bne	3d0 <coda_grib_value_array_simple_packing_new+0x1ac>
 43c:	b	480 <coda_grib_value_array_simple_packing_new+0x25c>
 440:	mov	r0, r4
 444:	bl	0 <coda_grib_type_delete>
 448:	mov	r0, #173	; 0xad
 44c:	b	45c <coda_grib_value_array_simple_packing_new+0x238>
 450:	mov	r0, r4
 454:	bl	0 <coda_grib_type_delete>
 458:	mov	r0, #183	; 0xb7
 45c:	movw	r1, #0
 460:	movw	r3, #0
 464:	str	r0, [sp]
 468:	mvn	r0, #0
 46c:	mov	r2, r7
 470:	movt	r1, #0
 474:	movt	r3, #0
 478:	bl	0 <coda_set_error>
 47c:	mov	r4, #0
 480:	mov	r0, r4
 484:	sub	sp, fp, #32
 488:	vpop	{d8}
 48c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
