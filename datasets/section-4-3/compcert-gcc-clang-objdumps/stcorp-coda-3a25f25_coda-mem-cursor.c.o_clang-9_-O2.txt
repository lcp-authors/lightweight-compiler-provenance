
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_cursor_update_offset>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	ldr	r1, [r0, #4]
       c:	sub	r1, r1, #1
      10:	add	r0, r0, r1, lsl #4
      14:	ldr	r1, [r0, #8]
      18:	ldr	r2, [r1, #8]
      1c:	cmp	r2, #2
      20:	popne	{r4, r5, fp, pc}
      24:	ldrd	r2, [r1, #24]
      28:	lsl	r1, r3, #3
      2c:	lsl	r4, r2, #3
      30:	orr	r5, r1, r2, lsr #29
      34:	strd	r4, [r0, #16]
      38:	pop	{r4, r5, fp, pc}

0000003c <coda_mem_cursor_goto_record_field_by_index>:
      3c:	push	{r4, r5, fp, lr}
      40:	add	fp, sp, #8
      44:	mov	r4, r1
      48:	ldr	r1, [r0, #4]
      4c:	mov	r5, r0
      50:	add	r0, r0, r1, lsl #4
      54:	ldr	r2, [r0, #-8]
      58:	ldr	r0, [r2, #8]
      5c:	cmp	r0, #2
      60:	beq	cc <coda_mem_cursor_goto_record_field_by_index+0x90>
      64:	cmp	r0, #0
      68:	bne	f8 <coda_mem_cursor_goto_record_field_by_index+0xbc>
      6c:	ldr	r3, [r2, #16]
      70:	cmp	r4, #0
      74:	bmi	dc <coda_mem_cursor_goto_record_field_by_index+0xa0>
      78:	cmp	r3, r4
      7c:	ble	dc <coda_mem_cursor_goto_record_field_by_index+0xa0>
      80:	add	r0, r1, #1
      84:	str	r0, [r5, #4]
      88:	ldr	r0, [r2, #20]
      8c:	ldr	r0, [r0, r4, lsl #2]
      90:	cmp	r0, #0
      94:	bne	ac <coda_mem_cursor_goto_record_field_by_index+0x70>
      98:	ldr	r0, [r2, #4]
      9c:	ldr	r0, [r0]
      a0:	bl	0 <coda_no_data_singleton>
      a4:	ldr	r1, [r5, #4]
      a8:	sub	r1, r1, #1
      ac:	add	r1, r5, r1, lsl #4
      b0:	mvn	r2, #0
      b4:	str	r0, [r1, #8]
      b8:	mov	r0, #0
      bc:	str	r4, [r1, #12]
      c0:	str	r2, [r1, #16]
      c4:	str	r2, [r1, #20]
      c8:	pop	{r4, r5, fp, pc}
      cc:	mov	r0, r5
      d0:	mov	r1, r4
      d4:	pop	{r4, r5, fp, lr}
      d8:	b	0 <coda_ascbin_cursor_goto_record_field_by_index>
      dc:	movw	r1, #0
      e0:	mvn	r0, #100	; 0x64
      e4:	mov	r2, r4
      e8:	movt	r1, #0
      ec:	bl	0 <coda_set_error>
      f0:	mvn	r0, #0
      f4:	pop	{r4, r5, fp, pc}
      f8:	movw	r0, #0
      fc:	movw	r1, #0
     100:	movw	r3, #0
     104:	mov	r2, #79	; 0x4f
     108:	movt	r0, #0
     10c:	movt	r1, #0
     110:	movt	r3, #0
     114:	bl	0 <__assert_fail>

00000118 <coda_mem_cursor_goto_next_record_field>:
     118:	push	{r4, r5, fp, lr}
     11c:	add	fp, sp, #8
     120:	mov	r4, r0
     124:	ldr	r0, [r0, #4]
     128:	add	r1, r4, r0, lsl #4
     12c:	ldr	r1, [r1, #-24]	; 0xffffffe8
     130:	ldr	r2, [r1, #8]
     134:	cmp	r2, #2
     138:	beq	1ac <coda_mem_cursor_goto_next_record_field+0x94>
     13c:	cmp	r2, #0
     140:	bne	1d4 <coda_mem_cursor_goto_next_record_field+0xbc>
     144:	sub	r2, r0, #1
     148:	ldr	r3, [r1, #16]
     14c:	add	r0, r4, r2, lsl #4
     150:	ldr	r0, [r0, #12]
     154:	add	r5, r0, #1
     158:	cmn	r0, #1
     15c:	blt	1b8 <coda_mem_cursor_goto_next_record_field+0xa0>
     160:	cmp	r5, r3
     164:	bge	1b8 <coda_mem_cursor_goto_next_record_field+0xa0>
     168:	ldr	r0, [r1, #20]
     16c:	ldr	r0, [r0, r5, lsl #2]
     170:	cmp	r0, #0
     174:	bne	18c <coda_mem_cursor_goto_next_record_field+0x74>
     178:	ldr	r0, [r1, #4]
     17c:	ldr	r0, [r0]
     180:	bl	0 <coda_no_data_singleton>
     184:	ldr	r1, [r4, #4]
     188:	sub	r2, r1, #1
     18c:	add	r1, r4, r2, lsl #4
     190:	mvn	r2, #0
     194:	str	r0, [r1, #8]
     198:	mov	r0, #0
     19c:	str	r5, [r1, #12]
     1a0:	str	r2, [r1, #16]
     1a4:	str	r2, [r1, #20]
     1a8:	pop	{r4, r5, fp, pc}
     1ac:	mov	r0, r4
     1b0:	pop	{r4, r5, fp, lr}
     1b4:	b	0 <coda_ascbin_cursor_goto_next_record_field>
     1b8:	movw	r1, #0
     1bc:	mvn	r0, #100	; 0x64
     1c0:	mov	r2, r5
     1c4:	movt	r1, #0
     1c8:	bl	0 <coda_set_error>
     1cc:	mvn	r0, #0
     1d0:	pop	{r4, r5, fp, pc}
     1d4:	movw	r0, #0
     1d8:	movw	r1, #0
     1dc:	movw	r3, #0
     1e0:	mov	r2, #111	; 0x6f
     1e4:	movt	r0, #0
     1e8:	movt	r1, #0
     1ec:	movt	r3, #0
     1f0:	bl	0 <__assert_fail>

000001f4 <coda_mem_cursor_goto_available_union_field>:
     1f4:	push	{fp, lr}
     1f8:	mov	fp, sp
     1fc:	ldr	r1, [r0, #4]
     200:	sub	r1, r1, #1
     204:	add	ip, r0, r1, lsl #4
     208:	ldr	r2, [ip, #8]
     20c:	ldr	r3, [r2, #8]
     210:	cmp	r3, #2
     214:	beq	268 <coda_mem_cursor_goto_available_union_field+0x74>
     218:	cmp	r3, #0
     21c:	bne	290 <coda_mem_cursor_goto_available_union_field+0x9c>
     220:	ldr	r0, [r2, #16]
     224:	cmp	r0, #1
     228:	blt	24c <coda_mem_cursor_goto_available_union_field+0x58>
     22c:	ldr	r3, [r2, #20]
     230:	mov	r2, #0
     234:	ldr	r1, [r3, r2, lsl #2]
     238:	cmp	r1, #0
     23c:	bne	270 <coda_mem_cursor_goto_available_union_field+0x7c>
     240:	add	r2, r2, #1
     244:	cmp	r0, r2
     248:	bne	234 <coda_mem_cursor_goto_available_union_field+0x40>
     24c:	movw	r0, #65236	; 0xfed4
     250:	movw	r1, #0
     254:	movt	r0, #65535	; 0xffff
     258:	movt	r1, #0
     25c:	bl	0 <coda_set_error>
     260:	mvn	r0, #0
     264:	pop	{fp, pc}
     268:	pop	{fp, lr}
     26c:	b	0 <coda_ascbin_cursor_goto_available_union_field>
     270:	ldr	r0, [r3, r2, lsl #2]
     274:	mvn	r1, #0
     278:	str	r0, [ip, #8]
     27c:	mov	r0, #0
     280:	str	r2, [ip, #12]
     284:	str	r1, [ip, #16]
     288:	str	r1, [ip, #20]
     28c:	pop	{fp, pc}
     290:	movw	r0, #0
     294:	movw	r1, #0
     298:	movw	r3, #0
     29c:	mov	r2, #134	; 0x86
     2a0:	movt	r0, #0
     2a4:	movt	r1, #0
     2a8:	movt	r3, #0
     2ac:	bl	0 <__assert_fail>

000002b0 <coda_mem_cursor_get_available_union_field_index>:
     2b0:	push	{fp, lr}
     2b4:	mov	fp, sp
     2b8:	ldr	r2, [r0, #4]
     2bc:	add	r2, r0, r2, lsl #4
     2c0:	ldr	r2, [r2, #-8]
     2c4:	ldr	r3, [r2, #8]
     2c8:	cmp	r3, #2
     2cc:	beq	320 <coda_mem_cursor_get_available_union_field_index+0x70>
     2d0:	cmp	r3, #0
     2d4:	bne	334 <coda_mem_cursor_get_available_union_field_index+0x84>
     2d8:	ldr	ip, [r2, #16]
     2dc:	cmp	ip, #1
     2e0:	blt	304 <coda_mem_cursor_get_available_union_field_index+0x54>
     2e4:	ldr	r3, [r2, #20]
     2e8:	mov	r2, #0
     2ec:	ldr	r0, [r3, r2, lsl #2]
     2f0:	cmp	r0, #0
     2f4:	bne	328 <coda_mem_cursor_get_available_union_field_index+0x78>
     2f8:	add	r2, r2, #1
     2fc:	cmp	r2, ip
     300:	blt	2ec <coda_mem_cursor_get_available_union_field_index+0x3c>
     304:	movw	r0, #65236	; 0xfed4
     308:	movw	r1, #0
     30c:	movt	r0, #65535	; 0xffff
     310:	movt	r1, #0
     314:	bl	0 <coda_set_error>
     318:	mvn	r0, #0
     31c:	pop	{fp, pc}
     320:	pop	{fp, lr}
     324:	b	0 <coda_ascbin_cursor_get_available_union_field_index>
     328:	mov	r0, #0
     32c:	str	r2, [r1]
     330:	pop	{fp, pc}
     334:	movw	r0, #0
     338:	movw	r1, #0
     33c:	movw	r3, #0
     340:	movw	r2, #399	; 0x18f
     344:	movt	r0, #0
     348:	movt	r1, #0
     34c:	movt	r3, #0
     350:	bl	0 <__assert_fail>

00000354 <coda_mem_cursor_goto_array_element>:
     354:	push	{r4, r5, r6, sl, fp, lr}
     358:	add	fp, sp, #16
     35c:	ldr	r5, [r0, #4]
     360:	mov	r3, r1
     364:	mov	r1, r0
     368:	add	r4, r0, r5, lsl #4
     36c:	ldr	r6, [r4, #-8]
     370:	ldr	r0, [r6, #8]
     374:	cmp	r0, #2
     378:	beq	3e8 <coda_mem_cursor_goto_array_element+0x94>
     37c:	cmp	r0, #1
     380:	bne	42c <coda_mem_cursor_goto_array_element+0xd8>
     384:	cmp	r3, #1
     388:	bne	3f8 <coda_mem_cursor_goto_array_element+0xa4>
     38c:	ldr	r0, [pc, #184]	; 44c <coda_mem_cursor_goto_array_element+0xf8>
     390:	ldr	r3, [pc, r0]
     394:	bl	0 <__aeabi_read_tp>
     398:	ldr	r0, [r0, r3]
     39c:	ldr	r2, [r2]
     3a0:	cmp	r0, #0
     3a4:	beq	3bc <coda_mem_cursor_goto_array_element+0x68>
     3a8:	ldr	r3, [r6, #16]
     3ac:	cmp	r2, #0
     3b0:	bmi	414 <coda_mem_cursor_goto_array_element+0xc0>
     3b4:	cmp	r2, r3
     3b8:	bge	414 <coda_mem_cursor_goto_array_element+0xc0>
     3bc:	add	r0, r5, #1
     3c0:	str	r0, [r1, #4]
     3c4:	mvn	r1, #0
     3c8:	ldr	r0, [r6, #20]
     3cc:	ldr	r0, [r0, r2, lsl #2]
     3d0:	str	r0, [r4, #8]
     3d4:	mov	r0, #0
     3d8:	str	r2, [r4, #12]
     3dc:	str	r1, [r4, #16]
     3e0:	str	r1, [r4, #20]
     3e4:	pop	{r4, r5, r6, sl, fp, pc}
     3e8:	mov	r0, r1
     3ec:	mov	r1, r3
     3f0:	pop	{r4, r5, r6, sl, fp, lr}
     3f4:	b	0 <coda_ascbin_cursor_goto_array_element>
     3f8:	movw	r1, #0
     3fc:	mvn	r0, #105	; 0x69
     400:	mov	r2, r3
     404:	movt	r1, #0
     408:	bl	0 <coda_set_error>
     40c:	mvn	r0, #0
     410:	pop	{r4, r5, r6, sl, fp, pc}
     414:	movw	r1, #0
     418:	mvn	r0, #106	; 0x6a
     41c:	movt	r1, #0
     420:	bl	0 <coda_set_error>
     424:	mvn	r0, #0
     428:	pop	{r4, r5, r6, sl, fp, pc}
     42c:	movw	r0, #0
     430:	movw	r1, #0
     434:	movw	r3, #0
     438:	mov	r2, #169	; 0xa9
     43c:	movt	r0, #0
     440:	movt	r1, #0
     444:	movt	r3, #0
     448:	bl	0 <__assert_fail>
     44c:	.word	0x000000b4

00000450 <coda_mem_cursor_goto_array_element_by_index>:
     450:	push	{r4, r5, r6, sl, fp, lr}
     454:	add	fp, sp, #16
     458:	ldr	r5, [r0, #4]
     45c:	mov	r2, r1
     460:	mov	r1, r0
     464:	add	r4, r0, r5, lsl #4
     468:	ldr	r6, [r4, #-8]
     46c:	ldr	r0, [r6, #8]
     470:	cmp	r0, #2
     474:	beq	4d8 <coda_mem_cursor_goto_array_element_by_index+0x88>
     478:	cmp	r0, #1
     47c:	bne	500 <coda_mem_cursor_goto_array_element_by_index+0xb0>
     480:	ldr	r0, [pc, #152]	; 520 <coda_mem_cursor_goto_array_element_by_index+0xd0>
     484:	ldr	r3, [pc, r0]
     488:	bl	0 <__aeabi_read_tp>
     48c:	ldr	r0, [r0, r3]
     490:	cmp	r0, #0
     494:	beq	4ac <coda_mem_cursor_goto_array_element_by_index+0x5c>
     498:	ldr	r3, [r6, #16]
     49c:	cmp	r2, #0
     4a0:	bmi	4e8 <coda_mem_cursor_goto_array_element_by_index+0x98>
     4a4:	cmp	r3, r2
     4a8:	ble	4e8 <coda_mem_cursor_goto_array_element_by_index+0x98>
     4ac:	add	r0, r5, #1
     4b0:	str	r0, [r1, #4]
     4b4:	mvn	r1, #0
     4b8:	ldr	r0, [r6, #20]
     4bc:	ldr	r0, [r0, r2, lsl #2]
     4c0:	str	r0, [r4, #8]
     4c4:	mov	r0, #0
     4c8:	str	r2, [r4, #12]
     4cc:	str	r1, [r4, #16]
     4d0:	str	r1, [r4, #20]
     4d4:	pop	{r4, r5, r6, sl, fp, pc}
     4d8:	mov	r0, r1
     4dc:	mov	r1, r2
     4e0:	pop	{r4, r5, r6, sl, fp, lr}
     4e4:	b	0 <coda_ascbin_cursor_goto_array_element_by_index>
     4e8:	movw	r1, #0
     4ec:	mvn	r0, #106	; 0x6a
     4f0:	movt	r1, #0
     4f4:	bl	0 <coda_set_error>
     4f8:	mvn	r0, #0
     4fc:	pop	{r4, r5, r6, sl, fp, pc}
     500:	movw	r0, #0
     504:	movw	r1, #0
     508:	movw	r3, #0
     50c:	mov	r2, #197	; 0xc5
     510:	movt	r0, #0
     514:	movt	r1, #0
     518:	movt	r3, #0
     51c:	bl	0 <__assert_fail>
     520:	.word	0x00000094

00000524 <coda_mem_cursor_goto_next_array_element>:
     524:	push	{r4, r5, fp, lr}
     528:	add	fp, sp, #8
     52c:	mov	r4, r0
     530:	ldr	r0, [r0, #4]
     534:	add	r1, r4, r0, lsl #4
     538:	ldr	r1, [r1, #-24]	; 0xffffffe8
     53c:	ldr	r2, [r1, #8]
     540:	cmp	r2, #2
     544:	beq	5b8 <coda_mem_cursor_goto_next_array_element+0x94>
     548:	cmp	r2, #1
     54c:	bne	5e0 <coda_mem_cursor_goto_next_array_element+0xbc>
     550:	sub	r2, r0, #1
     554:	ldr	r3, [r1, #16]
     558:	add	r0, r4, r2, lsl #4
     55c:	ldr	r0, [r0, #12]
     560:	add	r5, r0, #1
     564:	cmn	r0, #1
     568:	blt	5c4 <coda_mem_cursor_goto_next_array_element+0xa0>
     56c:	cmp	r5, r3
     570:	bge	5c4 <coda_mem_cursor_goto_next_array_element+0xa0>
     574:	ldr	r0, [r1, #20]
     578:	ldr	r0, [r0, r5, lsl #2]
     57c:	cmp	r0, #0
     580:	bne	598 <coda_mem_cursor_goto_next_array_element+0x74>
     584:	ldr	r0, [r1, #4]
     588:	ldr	r0, [r0]
     58c:	bl	0 <coda_no_data_singleton>
     590:	ldr	r1, [r4, #4]
     594:	sub	r2, r1, #1
     598:	add	r1, r4, r2, lsl #4
     59c:	mvn	r2, #0
     5a0:	str	r0, [r1, #8]
     5a4:	mov	r0, #0
     5a8:	str	r5, [r1, #12]
     5ac:	str	r2, [r1, #16]
     5b0:	str	r2, [r1, #20]
     5b4:	pop	{r4, r5, fp, pc}
     5b8:	mov	r0, r4
     5bc:	pop	{r4, r5, fp, lr}
     5c0:	b	0 <coda_ascbin_cursor_goto_next_array_element>
     5c4:	movw	r1, #0
     5c8:	mvn	r0, #106	; 0x6a
     5cc:	mov	r2, r5
     5d0:	movt	r1, #0
     5d4:	bl	0 <coda_set_error>
     5d8:	mvn	r0, #0
     5dc:	pop	{r4, r5, fp, pc}
     5e0:	movw	r0, #0
     5e4:	movw	r1, #0
     5e8:	movw	r3, #0
     5ec:	mov	r2, #229	; 0xe5
     5f0:	movt	r0, #0
     5f4:	movt	r1, #0
     5f8:	movt	r3, #0
     5fc:	bl	0 <__assert_fail>

00000600 <coda_mem_cursor_goto_attributes>:
     600:	push	{r4, sl, fp, lr}
     604:	add	fp, sp, #8
     608:	ldr	r1, [r0, #4]
     60c:	mov	r4, r0
     610:	add	r0, r1, #1
     614:	str	r0, [r4, #4]
     618:	add	r0, r4, r1, lsl #4
     61c:	ldr	r2, [r0, #-8]
     620:	ldr	r0, [r2, #12]
     624:	cmp	r0, #0
     628:	bne	640 <coda_mem_cursor_goto_attributes+0x40>
     62c:	ldr	r0, [r2, #4]
     630:	ldr	r0, [r0]
     634:	bl	0 <coda_mem_empty_record>
     638:	ldr	r1, [r4, #4]
     63c:	sub	r1, r1, #1
     640:	add	r1, r4, r1, lsl #4
     644:	mvn	r2, #0
     648:	str	r0, [r1, #8]
     64c:	mov	r0, #0
     650:	str	r2, [r1, #12]
     654:	str	r2, [r1, #16]
     658:	str	r2, [r1, #20]
     65c:	pop	{r4, sl, fp, pc}

00000660 <coda_mem_cursor_use_base_type_of_special_type>:
     660:	push	{fp, lr}
     664:	mov	fp, sp
     668:	ldr	r1, [r0, #4]
     66c:	add	r0, r0, r1, lsl #4
     670:	ldr	r1, [r0, #-8]!
     674:	ldr	r2, [r1, #8]
     678:	cmp	r2, #2
     67c:	beq	690 <coda_mem_cursor_use_base_type_of_special_type+0x30>
     680:	cmp	r2, #3
     684:	bne	6a8 <coda_mem_cursor_use_base_type_of_special_type+0x48>
     688:	add	r1, r1, #16
     68c:	b	698 <coda_mem_cursor_use_base_type_of_special_type+0x38>
     690:	ldr	r1, [r1, #4]
     694:	add	r1, r1, #44	; 0x2c
     698:	ldr	r1, [r1]
     69c:	str	r1, [r0]
     6a0:	mov	r0, #0
     6a4:	pop	{fp, pc}
     6a8:	movw	r0, #0
     6ac:	movw	r1, #0
     6b0:	movw	r3, #0
     6b4:	movw	r2, #263	; 0x107
     6b8:	movt	r0, #0
     6bc:	movt	r1, #0
     6c0:	movt	r3, #0
     6c4:	bl	0 <__assert_fail>

000006c8 <coda_mem_cursor_get_string_length>:
     6c8:	push	{r4, sl, fp, lr}
     6cc:	add	fp, sp, #8
     6d0:	sub	sp, sp, #8
     6d4:	mov	r4, r1
     6d8:	mov	r1, sp
     6dc:	bl	71c <coda_mem_cursor_get_bit_size>
     6e0:	mov	r1, r0
     6e4:	mvn	r0, #0
     6e8:	cmp	r1, #0
     6ec:	beq	6f8 <coda_mem_cursor_get_string_length+0x30>
     6f0:	sub	sp, fp, #8
     6f4:	pop	{r4, sl, fp, pc}
     6f8:	ldm	sp, {r0, r1}
     6fc:	cmp	r1, #0
     700:	lsr	r0, r0, #3
     704:	orr	r0, r0, r1, lsl #29
     708:	mvnmi	r0, #0
     70c:	str	r0, [r4]
     710:	mov	r0, #0
     714:	sub	sp, fp, #8
     718:	pop	{r4, sl, fp, pc}

0000071c <coda_mem_cursor_get_bit_size>:
     71c:	push	{r4, r5, r6, r7, fp, lr}
     720:	add	fp, sp, #16
     724:	sub	sp, sp, #520	; 0x208
     728:	mov	r4, r1
     72c:	mov	r1, r0
     730:	ldr	r0, [r0, #4]
     734:	add	r0, r1, r0, lsl #4
     738:	ldr	r5, [r0, #-8]
     73c:	ldr	r0, [r5, #8]
     740:	cmp	r0, #2
     744:	beq	78c <coda_mem_cursor_get_bit_size+0x70>
     748:	cmp	r0, #3
     74c:	bne	7ac <coda_mem_cursor_get_bit_size+0x90>
     750:	mov	r5, sp
     754:	mov	r2, #520	; 0x208
     758:	mov	r0, r5
     75c:	bl	0 <memcpy>
     760:	mov	r0, r5
     764:	bl	0 <coda_cursor_use_base_type_of_special_type>
     768:	mov	r1, r0
     76c:	mvn	r0, #0
     770:	cmp	r1, #0
     774:	bne	7f0 <coda_mem_cursor_get_bit_size+0xd4>
     778:	mov	r0, sp
     77c:	mov	r1, r4
     780:	bl	0 <coda_cursor_get_bit_size>
     784:	sub	sp, fp, #16
     788:	pop	{r4, r5, r6, r7, fp, pc}
     78c:	ldr	r0, [r5, #4]
     790:	ldr	r0, [r0]
     794:	cmp	r0, #0
     798:	beq	7c4 <coda_mem_cursor_get_bit_size+0xa8>
     79c:	mov	r0, r1
     7a0:	mov	r1, r4
     7a4:	bl	0 <coda_bin_cursor_get_bit_size>
     7a8:	b	7d0 <coda_mem_cursor_get_bit_size+0xb4>
     7ac:	mvn	r0, #0
     7b0:	str	r0, [r4]
     7b4:	str	r0, [r4, #4]
     7b8:	mov	r0, #0
     7bc:	sub	sp, fp, #16
     7c0:	pop	{r4, r5, r6, r7, fp, pc}
     7c4:	mov	r0, r1
     7c8:	mov	r1, r4
     7cc:	bl	0 <coda_ascii_cursor_get_bit_size>
     7d0:	mov	r1, r0
     7d4:	mvn	r0, #0
     7d8:	cmp	r1, #0
     7dc:	bne	7f0 <coda_mem_cursor_get_bit_size+0xd4>
     7e0:	ldr	r1, [r4, #4]
     7e4:	mov	r0, #0
     7e8:	cmn	r1, #1
     7ec:	ble	7f8 <coda_mem_cursor_get_bit_size+0xdc>
     7f0:	sub	sp, fp, #16
     7f4:	pop	{r4, r5, r6, r7, fp, pc}
     7f8:	ldr	r1, [r5, #16]
     7fc:	sbfx	r3, r1, #28, #1
     800:	lsl	r2, r1, #3
     804:	strd	r2, [r4]
     808:	sub	sp, fp, #16
     80c:	pop	{r4, r5, r6, r7, fp, pc}

00000810 <coda_mem_cursor_get_num_elements>:
     810:	ldr	r2, [r0, #4]
     814:	add	r2, r0, r2, lsl #4
     818:	ldr	ip, [r2, #-8]
     81c:	ldr	r3, [ip, #8]
     820:	cmp	r3, #3
     824:	bhi	864 <coda_mem_cursor_get_num_elements+0x54>
     828:	add	r2, pc, #0
     82c:	ldr	pc, [r2, r3, lsl #2]
     830:	.word	0x00000840
     834:	.word	0x00000840
     838:	.word	0x00000848
     83c:	.word	0x0000085c
     840:	ldr	r0, [ip, #16]
     844:	b	860 <coda_mem_cursor_get_num_elements+0x50>
     848:	ldr	r2, [ip, #4]
     84c:	ldr	r2, [r2]
     850:	cmp	r2, #0
     854:	beq	86c <coda_mem_cursor_get_num_elements+0x5c>
     858:	b	0 <coda_bin_cursor_get_num_elements>
     85c:	mov	r0, #1
     860:	str	r0, [r1]
     864:	mov	r0, #0
     868:	bx	lr
     86c:	b	0 <coda_ascii_cursor_get_num_elements>

00000870 <coda_mem_cursor_get_record_field_available_status>:
     870:	push	{fp, lr}
     874:	mov	fp, sp
     878:	mov	ip, r1
     87c:	ldr	r1, [r0, #4]
     880:	add	r1, r0, r1, lsl #4
     884:	ldr	r1, [r1, #-8]
     888:	ldr	r3, [r1, #8]
     88c:	cmp	r3, #0
     890:	beq	8a8 <coda_mem_cursor_get_record_field_available_status+0x38>
     894:	cmp	r3, #2
     898:	bne	8f4 <coda_mem_cursor_get_record_field_available_status+0x84>
     89c:	mov	r1, ip
     8a0:	pop	{fp, lr}
     8a4:	b	0 <coda_ascbin_cursor_get_record_field_available_status>
     8a8:	ldr	r3, [r1, #16]
     8ac:	cmp	ip, #0
     8b0:	bmi	8d8 <coda_mem_cursor_get_record_field_available_status+0x68>
     8b4:	cmp	r3, ip
     8b8:	ble	8d8 <coda_mem_cursor_get_record_field_available_status+0x68>
     8bc:	ldr	r0, [r1, #20]
     8c0:	ldr	r0, [r0, ip, lsl #2]
     8c4:	cmp	r0, #0
     8c8:	movwne	r0, #1
     8cc:	str	r0, [r2]
     8d0:	mov	r0, #0
     8d4:	pop	{fp, pc}
     8d8:	movw	r1, #0
     8dc:	mvn	r0, #100	; 0x64
     8e0:	mov	r2, ip
     8e4:	movt	r1, #0
     8e8:	bl	0 <coda_set_error>
     8ec:	mvn	r0, #0
     8f0:	pop	{fp, pc}
     8f4:	movw	r0, #0
     8f8:	movw	r1, #0
     8fc:	movw	r3, #0
     900:	mov	r2, #364	; 0x16c
     904:	movt	r0, #0
     908:	movt	r1, #0
     90c:	movt	r3, #0
     910:	bl	0 <__assert_fail>

00000914 <coda_mem_cursor_get_array_dim>:
     914:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     918:	add	fp, sp, #24
     91c:	ldr	r3, [r0, #4]
     920:	add	r3, r0, r3, lsl #4
     924:	ldr	r3, [r3, #-8]
     928:	ldr	r7, [r3, #8]
     92c:	cmp	r7, #1
     930:	beq	944 <coda_mem_cursor_get_array_dim+0x30>
     934:	cmp	r7, #2
     938:	bne	a50 <coda_mem_cursor_get_array_dim+0x13c>
     93c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
     940:	b	0 <coda_ascbin_cursor_get_array_dim>
     944:	ldr	ip, [r3, #4]
     948:	ldr	r0, [ip, #44]	; 0x2c
     94c:	cmp	r0, #0
     950:	bmi	a28 <coda_mem_cursor_get_array_dim+0x114>
     954:	ldr	r0, [ip, #48]	; 0x30
     958:	str	r0, [r1]
     95c:	ldr	r0, [ip, #48]	; 0x30
     960:	cmp	r0, #1
     964:	blt	a20 <coda_mem_cursor_get_array_dim+0x10c>
     968:	mov	r1, #0
     96c:	cmp	r0, #4
     970:	bcc	a08 <coda_mem_cursor_get_array_dim+0xf4>
     974:	add	r3, ip, r0, lsl #2
     978:	add	r3, r3, #52	; 0x34
     97c:	cmp	r3, r2
     980:	bls	994 <coda_mem_cursor_get_array_dim+0x80>
     984:	add	r3, r2, r0, lsl #2
     988:	add	r7, ip, #52	; 0x34
     98c:	cmp	r7, r3
     990:	bcc	a08 <coda_mem_cursor_get_array_dim+0xf4>
     994:	bic	r1, r0, #3
     998:	mov	r7, #1
     99c:	subs	r3, r1, #4
     9a0:	add	r3, r7, r3, lsr #2
     9a4:	and	lr, r3, #1
     9a8:	beq	a40 <coda_mem_cursor_get_array_dim+0x12c>
     9ac:	sub	r4, r3, lr
     9b0:	add	r5, ip, #68	; 0x44
     9b4:	mov	r3, #0
     9b8:	mov	r8, #32
     9bc:	mov	r7, r2
     9c0:	sub	r6, r5, #16
     9c4:	subs	r4, r4, #2
     9c8:	add	r3, r3, #8
     9cc:	vld1.32	{d16-d17}, [r6]
     9d0:	add	r6, r7, #16
     9d4:	vst1.32	{d16-d17}, [r7], r8
     9d8:	vld1.32	{d16-d17}, [r5], r8
     9dc:	vst1.32	{d16-d17}, [r6]
     9e0:	bne	9c0 <coda_mem_cursor_get_array_dim+0xac>
     9e4:	cmp	lr, #0
     9e8:	beq	a00 <coda_mem_cursor_get_array_dim+0xec>
     9ec:	add	r7, ip, r3, lsl #2
     9f0:	add	r3, r2, r3, lsl #2
     9f4:	add	r7, r7, #52	; 0x34
     9f8:	vld1.32	{d16-d17}, [r7]
     9fc:	vst1.32	{d16-d17}, [r3]
     a00:	cmp	r0, r1
     a04:	beq	a20 <coda_mem_cursor_get_array_dim+0x10c>
     a08:	add	r3, ip, #52	; 0x34
     a0c:	ldr	r7, [r3, r1, lsl #2]
     a10:	str	r7, [r2, r1, lsl #2]
     a14:	add	r1, r1, #1
     a18:	cmp	r1, r0
     a1c:	blt	a0c <coda_mem_cursor_get_array_dim+0xf8>
     a20:	mov	r0, #0
     a24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     a28:	mov	r0, #1
     a2c:	str	r0, [r1]
     a30:	ldr	r0, [r3, #16]
     a34:	str	r0, [r2]
     a38:	mov	r0, #0
     a3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     a40:	mov	r3, #0
     a44:	cmp	lr, #0
     a48:	bne	9ec <coda_mem_cursor_get_array_dim+0xd8>
     a4c:	b	a00 <coda_mem_cursor_get_array_dim+0xec>
     a50:	movw	r0, #0
     a54:	movw	r1, #0
     a58:	movw	r3, #0
     a5c:	movw	r2, #413	; 0x19d
     a60:	movt	r0, #0
     a64:	movt	r1, #0
     a68:	movt	r3, #0
     a6c:	bl	0 <__assert_fail>

00000a70 <coda_mem_cursor_read_int8>:
     a70:	push	{fp, lr}
     a74:	mov	fp, sp
     a78:	ldr	r2, [r0, #4]
     a7c:	add	r2, r0, r2, lsl #4
     a80:	ldr	r2, [r2, #-8]
     a84:	ldr	r3, [r2, #8]
     a88:	cmp	r3, #2
     a8c:	bne	ab0 <coda_mem_cursor_read_int8+0x40>
     a90:	ldr	r2, [r2, #4]
     a94:	ldr	r2, [r2]
     a98:	cmp	r2, #0
     a9c:	beq	aa8 <coda_mem_cursor_read_int8+0x38>
     aa0:	pop	{fp, lr}
     aa4:	b	0 <coda_bin_cursor_read_int8>
     aa8:	pop	{fp, lr}
     aac:	b	0 <coda_ascii_cursor_read_int8>
     ab0:	movw	r0, #0
     ab4:	movw	r1, #0
     ab8:	movw	r3, #0
     abc:	movw	r2, #439	; 0x1b7
     ac0:	movt	r0, #0
     ac4:	movt	r1, #0
     ac8:	movt	r3, #0
     acc:	bl	0 <__assert_fail>

00000ad0 <coda_mem_cursor_read_uint8>:
     ad0:	push	{fp, lr}
     ad4:	mov	fp, sp
     ad8:	ldr	r2, [r0, #4]
     adc:	add	r2, r0, r2, lsl #4
     ae0:	ldr	r2, [r2, #-8]
     ae4:	ldr	r3, [r2, #8]
     ae8:	cmp	r3, #2
     aec:	bne	b10 <coda_mem_cursor_read_uint8+0x40>
     af0:	ldr	r2, [r2, #4]
     af4:	ldr	r2, [r2]
     af8:	cmp	r2, #0
     afc:	beq	b08 <coda_mem_cursor_read_uint8+0x38>
     b00:	pop	{fp, lr}
     b04:	b	0 <coda_bin_cursor_read_uint8>
     b08:	pop	{fp, lr}
     b0c:	b	0 <coda_ascii_cursor_read_uint8>
     b10:	movw	r0, #0
     b14:	movw	r1, #0
     b18:	movw	r3, #0
     b1c:	movw	r2, #451	; 0x1c3
     b20:	movt	r0, #0
     b24:	movt	r1, #0
     b28:	movt	r3, #0
     b2c:	bl	0 <__assert_fail>

00000b30 <coda_mem_cursor_read_int16>:
     b30:	push	{fp, lr}
     b34:	mov	fp, sp
     b38:	ldr	r2, [r0, #4]
     b3c:	add	r2, r0, r2, lsl #4
     b40:	ldr	r2, [r2, #-8]
     b44:	ldr	r3, [r2, #8]
     b48:	cmp	r3, #2
     b4c:	bne	b70 <coda_mem_cursor_read_int16+0x40>
     b50:	ldr	r2, [r2, #4]
     b54:	ldr	r2, [r2]
     b58:	cmp	r2, #0
     b5c:	beq	b68 <coda_mem_cursor_read_int16+0x38>
     b60:	pop	{fp, lr}
     b64:	b	0 <coda_bin_cursor_read_int16>
     b68:	pop	{fp, lr}
     b6c:	b	0 <coda_ascii_cursor_read_int16>
     b70:	movw	r0, #0
     b74:	movw	r1, #0
     b78:	movw	r3, #0
     b7c:	movw	r2, #463	; 0x1cf
     b80:	movt	r0, #0
     b84:	movt	r1, #0
     b88:	movt	r3, #0
     b8c:	bl	0 <__assert_fail>

00000b90 <coda_mem_cursor_read_uint16>:
     b90:	push	{fp, lr}
     b94:	mov	fp, sp
     b98:	ldr	r2, [r0, #4]
     b9c:	add	r2, r0, r2, lsl #4
     ba0:	ldr	r2, [r2, #-8]
     ba4:	ldr	r3, [r2, #8]
     ba8:	cmp	r3, #2
     bac:	bne	bd0 <coda_mem_cursor_read_uint16+0x40>
     bb0:	ldr	r2, [r2, #4]
     bb4:	ldr	r2, [r2]
     bb8:	cmp	r2, #0
     bbc:	beq	bc8 <coda_mem_cursor_read_uint16+0x38>
     bc0:	pop	{fp, lr}
     bc4:	b	0 <coda_bin_cursor_read_uint16>
     bc8:	pop	{fp, lr}
     bcc:	b	0 <coda_ascii_cursor_read_uint16>
     bd0:	movw	r0, #0
     bd4:	movw	r1, #0
     bd8:	movw	r3, #0
     bdc:	movw	r2, #475	; 0x1db
     be0:	movt	r0, #0
     be4:	movt	r1, #0
     be8:	movt	r3, #0
     bec:	bl	0 <__assert_fail>

00000bf0 <coda_mem_cursor_read_int32>:
     bf0:	push	{fp, lr}
     bf4:	mov	fp, sp
     bf8:	ldr	r2, [r0, #4]
     bfc:	add	r2, r0, r2, lsl #4
     c00:	ldr	r2, [r2, #-8]
     c04:	ldr	r3, [r2, #8]
     c08:	cmp	r3, #2
     c0c:	bne	c30 <coda_mem_cursor_read_int32+0x40>
     c10:	ldr	r2, [r2, #4]
     c14:	ldr	r2, [r2]
     c18:	cmp	r2, #0
     c1c:	beq	c28 <coda_mem_cursor_read_int32+0x38>
     c20:	pop	{fp, lr}
     c24:	b	0 <coda_bin_cursor_read_int32>
     c28:	pop	{fp, lr}
     c2c:	b	0 <coda_ascii_cursor_read_int32>
     c30:	movw	r0, #0
     c34:	movw	r1, #0
     c38:	movw	r3, #0
     c3c:	movw	r2, #487	; 0x1e7
     c40:	movt	r0, #0
     c44:	movt	r1, #0
     c48:	movt	r3, #0
     c4c:	bl	0 <__assert_fail>

00000c50 <coda_mem_cursor_read_uint32>:
     c50:	push	{fp, lr}
     c54:	mov	fp, sp
     c58:	ldr	r2, [r0, #4]
     c5c:	add	r2, r0, r2, lsl #4
     c60:	ldr	r2, [r2, #-8]
     c64:	ldr	r3, [r2, #8]
     c68:	cmp	r3, #2
     c6c:	bne	c90 <coda_mem_cursor_read_uint32+0x40>
     c70:	ldr	r2, [r2, #4]
     c74:	ldr	r2, [r2]
     c78:	cmp	r2, #0
     c7c:	beq	c88 <coda_mem_cursor_read_uint32+0x38>
     c80:	pop	{fp, lr}
     c84:	b	0 <coda_bin_cursor_read_uint32>
     c88:	pop	{fp, lr}
     c8c:	b	0 <coda_ascii_cursor_read_uint32>
     c90:	movw	r0, #0
     c94:	movw	r1, #0
     c98:	movw	r3, #0
     c9c:	movw	r2, #499	; 0x1f3
     ca0:	movt	r0, #0
     ca4:	movt	r1, #0
     ca8:	movt	r3, #0
     cac:	bl	0 <__assert_fail>

00000cb0 <coda_mem_cursor_read_int64>:
     cb0:	push	{fp, lr}
     cb4:	mov	fp, sp
     cb8:	ldr	r2, [r0, #4]
     cbc:	add	r2, r0, r2, lsl #4
     cc0:	ldr	r2, [r2, #-8]
     cc4:	ldr	r3, [r2, #8]
     cc8:	cmp	r3, #2
     ccc:	bne	cf0 <coda_mem_cursor_read_int64+0x40>
     cd0:	ldr	r2, [r2, #4]
     cd4:	ldr	r2, [r2]
     cd8:	cmp	r2, #0
     cdc:	beq	ce8 <coda_mem_cursor_read_int64+0x38>
     ce0:	pop	{fp, lr}
     ce4:	b	0 <coda_bin_cursor_read_int64>
     ce8:	pop	{fp, lr}
     cec:	b	0 <coda_ascii_cursor_read_int64>
     cf0:	movw	r0, #0
     cf4:	movw	r1, #0
     cf8:	movw	r3, #0
     cfc:	movw	r2, #511	; 0x1ff
     d00:	movt	r0, #0
     d04:	movt	r1, #0
     d08:	movt	r3, #0
     d0c:	bl	0 <__assert_fail>

00000d10 <coda_mem_cursor_read_uint64>:
     d10:	push	{fp, lr}
     d14:	mov	fp, sp
     d18:	ldr	r2, [r0, #4]
     d1c:	add	r2, r0, r2, lsl #4
     d20:	ldr	r2, [r2, #-8]
     d24:	ldr	r3, [r2, #8]
     d28:	cmp	r3, #2
     d2c:	bne	d50 <coda_mem_cursor_read_uint64+0x40>
     d30:	ldr	r2, [r2, #4]
     d34:	ldr	r2, [r2]
     d38:	cmp	r2, #0
     d3c:	beq	d48 <coda_mem_cursor_read_uint64+0x38>
     d40:	pop	{fp, lr}
     d44:	b	0 <coda_bin_cursor_read_uint64>
     d48:	pop	{fp, lr}
     d4c:	b	0 <coda_ascii_cursor_read_uint64>
     d50:	movw	r0, #0
     d54:	movw	r1, #0
     d58:	movw	r3, #0
     d5c:	movw	r2, #523	; 0x20b
     d60:	movt	r0, #0
     d64:	movt	r1, #0
     d68:	movt	r3, #0
     d6c:	bl	0 <__assert_fail>

00000d70 <coda_mem_cursor_read_float>:
     d70:	push	{fp, lr}
     d74:	mov	fp, sp
     d78:	ldr	r2, [r0, #4]
     d7c:	add	r2, r0, r2, lsl #4
     d80:	ldr	r2, [r2, #-8]
     d84:	ldr	r3, [r2, #8]
     d88:	cmp	r3, #2
     d8c:	bne	db0 <coda_mem_cursor_read_float+0x40>
     d90:	ldr	r2, [r2, #4]
     d94:	ldr	r2, [r2]
     d98:	cmp	r2, #0
     d9c:	beq	da8 <coda_mem_cursor_read_float+0x38>
     da0:	pop	{fp, lr}
     da4:	b	0 <coda_bin_cursor_read_float>
     da8:	pop	{fp, lr}
     dac:	b	0 <coda_ascii_cursor_read_float>
     db0:	movw	r0, #0
     db4:	movw	r1, #0
     db8:	movw	r3, #0
     dbc:	movw	r2, #535	; 0x217
     dc0:	movt	r0, #0
     dc4:	movt	r1, #0
     dc8:	movt	r3, #0
     dcc:	bl	0 <__assert_fail>

00000dd0 <coda_mem_cursor_read_double>:
     dd0:	push	{fp, lr}
     dd4:	mov	fp, sp
     dd8:	ldr	r2, [r0, #4]
     ddc:	add	r2, r0, r2, lsl #4
     de0:	ldr	r2, [r2, #-8]
     de4:	ldr	r3, [r2, #8]
     de8:	cmp	r3, #2
     dec:	bne	e10 <coda_mem_cursor_read_double+0x40>
     df0:	ldr	r2, [r2, #4]
     df4:	ldr	r2, [r2]
     df8:	cmp	r2, #0
     dfc:	beq	e08 <coda_mem_cursor_read_double+0x38>
     e00:	pop	{fp, lr}
     e04:	b	0 <coda_bin_cursor_read_double>
     e08:	pop	{fp, lr}
     e0c:	b	0 <coda_ascii_cursor_read_double>
     e10:	movw	r0, #0
     e14:	movw	r1, #0
     e18:	movw	r3, #0
     e1c:	movw	r2, #547	; 0x223
     e20:	movt	r0, #0
     e24:	movt	r1, #0
     e28:	movt	r3, #0
     e2c:	bl	0 <__assert_fail>

00000e30 <coda_mem_cursor_read_char>:
     e30:	push	{fp, lr}
     e34:	mov	fp, sp
     e38:	ldr	r2, [r0, #4]
     e3c:	add	r2, r0, r2, lsl #4
     e40:	ldr	r2, [r2, #-8]
     e44:	ldr	r3, [r2, #8]
     e48:	cmp	r3, #2
     e4c:	bne	e74 <coda_mem_cursor_read_char+0x44>
     e50:	ldr	r2, [r2, #4]
     e54:	ldr	r2, [r2]
     e58:	orr	r2, r2, #2
     e5c:	cmp	r2, #2
     e60:	bne	e6c <coda_mem_cursor_read_char+0x3c>
     e64:	pop	{fp, lr}
     e68:	b	0 <coda_ascii_cursor_read_char>
     e6c:	pop	{fp, lr}
     e70:	b	0 <coda_bin_cursor_read_char>
     e74:	movw	r0, #0
     e78:	movw	r1, #0
     e7c:	movw	r3, #0
     e80:	movw	r2, #559	; 0x22f
     e84:	movt	r0, #0
     e88:	movt	r1, #0
     e8c:	movt	r3, #0
     e90:	bl	0 <__assert_fail>

00000e94 <coda_mem_cursor_read_string>:
     e94:	push	{r4, r5, r6, sl, fp, lr}
     e98:	add	fp, sp, #16
     e9c:	sub	sp, sp, #520	; 0x208
     ea0:	mov	r5, r1
     ea4:	mov	r1, r0
     ea8:	ldr	r0, [r0, #4]
     eac:	mov	r4, r2
     eb0:	add	r0, r1, r0, lsl #4
     eb4:	ldr	r0, [r0, #-8]
     eb8:	ldr	r0, [r0, #8]
     ebc:	cmp	r0, #2
     ec0:	beq	efc <coda_mem_cursor_read_string+0x68>
     ec4:	cmp	r0, #3
     ec8:	bne	f2c <coda_mem_cursor_read_string+0x98>
     ecc:	mov	r6, sp
     ed0:	mov	r2, #520	; 0x208
     ed4:	mov	r0, r6
     ed8:	bl	0 <memcpy>
     edc:	mov	r0, r6
     ee0:	bl	0 <coda_cursor_use_base_type_of_special_type>
     ee4:	mov	r1, r0
     ee8:	mvn	r0, #0
     eec:	cmp	r1, #0
     ef0:	beq	f14 <coda_mem_cursor_read_string+0x80>
     ef4:	sub	sp, fp, #16
     ef8:	pop	{r4, r5, r6, sl, fp, pc}
     efc:	mov	r0, r1
     f00:	mov	r1, r5
     f04:	mov	r2, r4
     f08:	sub	sp, fp, #16
     f0c:	pop	{r4, r5, r6, sl, fp, lr}
     f10:	b	0 <coda_ascii_cursor_read_string>
     f14:	mov	r0, sp
     f18:	mov	r1, r5
     f1c:	mov	r2, r4
     f20:	bl	0 <coda_cursor_read_string>
     f24:	sub	sp, fp, #16
     f28:	pop	{r4, r5, r6, sl, fp, pc}
     f2c:	movw	r0, #0
     f30:	movw	r1, #0
     f34:	movw	r3, #0
     f38:	movw	r2, #582	; 0x246
     f3c:	movt	r0, #0
     f40:	movt	r1, #0
     f44:	movt	r3, #0
     f48:	bl	0 <__assert_fail>

00000f4c <coda_mem_cursor_read_bits>:
     f4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     f50:	add	fp, sp, #24
     f54:	sub	sp, sp, #536	; 0x218
     f58:	mov	r6, r1
     f5c:	mov	r1, r0
     f60:	ldr	r0, [r0, #4]
     f64:	mov	r5, r2
     f68:	mov	r4, r3
     f6c:	add	r0, r1, r0, lsl #4
     f70:	ldr	r0, [r0, #-8]
     f74:	ldr	r2, [r0, #8]
     f78:	cmp	r2, #2
     f7c:	beq	fc0 <coda_mem_cursor_read_bits+0x74>
     f80:	cmp	r2, #3
     f84:	bne	fec <coda_mem_cursor_read_bits+0xa0>
     f88:	ldr	r8, [fp, #12]
     f8c:	ldr	r9, [fp, #8]
     f90:	add	r7, sp, #8
     f94:	mov	r2, #520	; 0x208
     f98:	mov	r0, r7
     f9c:	bl	0 <memcpy>
     fa0:	mov	r0, r7
     fa4:	bl	0 <coda_cursor_use_base_type_of_special_type>
     fa8:	mov	r1, r0
     fac:	mvn	r0, #0
     fb0:	cmp	r1, #0
     fb4:	beq	1008 <coda_mem_cursor_read_bits+0xbc>
     fb8:	sub	sp, fp, #24
     fbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     fc0:	ldr	r0, [r0, #4]
     fc4:	ldr	r0, [r0]
     fc8:	cmp	r0, #0
     fcc:	beq	102c <coda_mem_cursor_read_bits+0xe0>
     fd0:	mov	r0, r1
     fd4:	mov	r1, r6
     fd8:	mov	r2, r5
     fdc:	mov	r3, r4
     fe0:	sub	sp, fp, #24
     fe4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
     fe8:	b	0 <coda_bin_cursor_read_bits>
     fec:	movw	r1, #0
     ff0:	mvn	r0, #104	; 0x68
     ff4:	movt	r1, #0
     ff8:	bl	0 <coda_set_error>
     ffc:	mvn	r0, #0
    1000:	sub	sp, fp, #24
    1004:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1008:	add	r0, sp, #8
    100c:	mov	r1, r6
    1010:	mov	r2, r5
    1014:	mov	r3, r4
    1018:	str	r9, [sp]
    101c:	str	r8, [sp, #4]
    1020:	bl	0 <coda_cursor_read_bits>
    1024:	sub	sp, fp, #24
    1028:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    102c:	mov	r0, r1
    1030:	mov	r1, r6
    1034:	mov	r2, r5
    1038:	mov	r3, r4
    103c:	sub	sp, fp, #24
    1040:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    1044:	b	0 <coda_ascii_cursor_read_bits>

00001048 <coda_mem_cursor_read_bytes>:
    1048:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    104c:	add	fp, sp, #24
    1050:	sub	sp, sp, #536	; 0x218
    1054:	mov	r6, r1
    1058:	mov	r1, r0
    105c:	ldr	r0, [r0, #4]
    1060:	mov	r5, r2
    1064:	mov	r4, r3
    1068:	add	r0, r1, r0, lsl #4
    106c:	ldr	r0, [r0, #-8]
    1070:	ldr	r2, [r0, #8]
    1074:	cmp	r2, #2
    1078:	beq	10bc <coda_mem_cursor_read_bytes+0x74>
    107c:	cmp	r2, #3
    1080:	bne	10ec <coda_mem_cursor_read_bytes+0xa4>
    1084:	ldr	r8, [fp, #12]
    1088:	ldr	r9, [fp, #8]
    108c:	add	r7, sp, #8
    1090:	mov	r2, #520	; 0x208
    1094:	mov	r0, r7
    1098:	bl	0 <memcpy>
    109c:	mov	r0, r7
    10a0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    10a4:	mov	r1, r0
    10a8:	mvn	r0, #0
    10ac:	cmp	r1, #0
    10b0:	beq	1108 <coda_mem_cursor_read_bytes+0xc0>
    10b4:	sub	sp, fp, #24
    10b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    10bc:	ldr	r0, [r0, #4]
    10c0:	ldr	r0, [r0]
    10c4:	orr	r0, r0, #2
    10c8:	cmp	r0, #2
    10cc:	bne	112c <coda_mem_cursor_read_bytes+0xe4>
    10d0:	mov	r0, r1
    10d4:	mov	r1, r6
    10d8:	mov	r2, r5
    10dc:	mov	r3, r4
    10e0:	sub	sp, fp, #24
    10e4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    10e8:	b	0 <coda_ascii_cursor_read_bytes>
    10ec:	movw	r1, #0
    10f0:	mvn	r0, #104	; 0x68
    10f4:	movt	r1, #0
    10f8:	bl	0 <coda_set_error>
    10fc:	mvn	r0, #0
    1100:	sub	sp, fp, #24
    1104:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1108:	add	r0, sp, #8
    110c:	mov	r1, r6
    1110:	mov	r2, r5
    1114:	mov	r3, r4
    1118:	str	r9, [sp]
    111c:	str	r8, [sp, #4]
    1120:	bl	0 <coda_cursor_read_bytes>
    1124:	sub	sp, fp, #24
    1128:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    112c:	mov	r0, r1
    1130:	mov	r1, r6
    1134:	mov	r2, r5
    1138:	mov	r3, r4
    113c:	sub	sp, fp, #24
    1140:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    1144:	b	0 <coda_bin_cursor_read_bytes>

00001148 <coda_mem_cursor_read_int8_array>:
    1148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    114c:	add	fp, sp, #28
    1150:	sub	sp, sp, #604	; 0x25c
    1154:	mov	r6, r0
    1158:	ldr	r0, [r0, #4]
    115c:	mov	r9, r1
    1160:	mov	r8, r2
    1164:	add	r0, r6, r0, lsl #4
    1168:	ldr	r0, [r0, #-8]
    116c:	ldr	r1, [r0, #8]
    1170:	cmp	r1, #2
    1174:	beq	12f0 <coda_mem_cursor_read_int8_array+0x1a8>
    1178:	cmp	r1, #1
    117c:	bne	1918 <coda_mem_cursor_read_int8_array+0x7d0>
    1180:	add	r4, sp, #44	; 0x2c
    1184:	add	r1, sp, #76	; 0x4c
    1188:	mov	r0, r6
    118c:	mov	r2, r4
    1190:	bl	0 <coda_cursor_get_array_dim>
    1194:	cmp	r0, #0
    1198:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    119c:	add	r0, sp, #80	; 0x50
    11a0:	mov	r1, r6
    11a4:	mov	r2, #520	; 0x208
    11a8:	bl	0 <memcpy>
    11ac:	ldr	r0, [sp, #76]	; 0x4c
    11b0:	cmp	r8, #1
    11b4:	bne	14c8 <coda_mem_cursor_read_int8_array+0x380>
    11b8:	cmp	r0, #1
    11bc:	ble	14c8 <coda_mem_cursor_read_int8_array+0x380>
    11c0:	and	r6, r0, #1
    11c4:	add	r8, sp, #8
    11c8:	mov	r1, #1
    11cc:	add	r2, r4, #4
    11d0:	sub	r7, r6, r0
    11d4:	add	r3, r8, #4
    11d8:	str	r1, [sp, #8]
    11dc:	ldr	r5, [r2, #-4]
    11e0:	ldr	r4, [r2]
    11e4:	adds	r7, r7, #2
    11e8:	add	r2, r2, #8
    11ec:	mul	r5, r5, r1
    11f0:	mul	r1, r4, r5
    11f4:	str	r5, [r3]
    11f8:	str	r1, [r3, #4]
    11fc:	add	r3, r3, #8
    1200:	bne	11dc <coda_mem_cursor_read_int8_array+0x94>
    1204:	cmp	r6, #0
    1208:	beq	1218 <coda_mem_cursor_read_int8_array+0xd0>
    120c:	ldr	r2, [r2, #-4]
    1210:	mul	r1, r2, r1
    1214:	str	r1, [r3]
    1218:	ldr	r7, [r8, r0, lsl #2]
    121c:	cmp	r7, #1
    1220:	blt	18c0 <coda_mem_cursor_read_int8_array+0x778>
    1224:	add	r0, r8, r0, lsl #2
    1228:	mov	r1, #0
    122c:	mov	r4, #0
    1230:	ldr	r6, [r0, #-4]
    1234:	add	r0, sp, #80	; 0x50
    1238:	bl	0 <coda_cursor_goto_array_element_by_index>
    123c:	cmp	r0, #0
    1240:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    1244:	sub	r0, r8, #4
    1248:	add	r5, sp, #80	; 0x50
    124c:	mov	sl, #0
    1250:	str	r0, [sp, #4]
    1254:	add	r1, r9, sl
    1258:	mov	r0, r5
    125c:	bl	0 <coda_cursor_read_int8>
    1260:	cmp	r0, #0
    1264:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    1268:	add	r4, r4, #1
    126c:	cmp	r4, r7
    1270:	bge	1284 <coda_mem_cursor_read_int8_array+0x13c>
    1274:	mov	r0, r5
    1278:	bl	0 <coda_cursor_goto_next_array_element>
    127c:	cmp	r0, #0
    1280:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    1284:	add	sl, sl, r6
    1288:	cmp	sl, r7
    128c:	blt	1254 <coda_mem_cursor_read_int8_array+0x10c>
    1290:	cmp	r4, r7
    1294:	beq	18c0 <coda_mem_cursor_read_int8_array+0x778>
    1298:	ldr	r1, [sp, #76]	; 0x4c
    129c:	add	r2, r8, r1, lsl #2
    12a0:	ldr	r0, [r8, r1, lsl #2]
    12a4:	ldr	r2, [r2, #-8]
    12a8:	add	r2, r2, sl
    12ac:	sub	sl, r2, r0
    12b0:	subs	r0, r1, #3
    12b4:	bmi	1254 <coda_mem_cursor_read_int8_array+0x10c>
    12b8:	ldr	r0, [sp, #4]
    12bc:	add	r0, r0, r1, lsl #2
    12c0:	sub	r1, r1, #2
    12c4:	ldr	r2, [r0]
    12c8:	cmp	sl, r2
    12cc:	blt	1254 <coda_mem_cursor_read_int8_array+0x10c>
    12d0:	ldr	r3, [r0, #-8]
    12d4:	sub	r2, sl, r2
    12d8:	sub	r1, r1, #1
    12dc:	sub	r0, r0, #4
    12e0:	cmp	r1, #0
    12e4:	add	sl, r3, r2
    12e8:	bgt	12c4 <coda_mem_cursor_read_int8_array+0x17c>
    12ec:	b	1254 <coda_mem_cursor_read_int8_array+0x10c>
    12f0:	ldr	r0, [r0, #4]
    12f4:	ldr	r0, [r0, #40]	; 0x28
    12f8:	ldr	r0, [r0]
    12fc:	cmp	r0, #0
    1300:	beq	147c <coda_mem_cursor_read_int8_array+0x334>
    1304:	cmp	r0, #1
    1308:	bne	1930 <coda_mem_cursor_read_int8_array+0x7e8>
    130c:	add	r4, sp, #44	; 0x2c
    1310:	add	r1, sp, #76	; 0x4c
    1314:	mov	r0, r6
    1318:	mov	r2, r4
    131c:	bl	0 <coda_cursor_get_array_dim>
    1320:	cmp	r0, #0
    1324:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    1328:	add	r0, sp, #80	; 0x50
    132c:	mov	r1, r6
    1330:	mov	r2, #520	; 0x208
    1334:	bl	0 <memcpy>
    1338:	ldr	r0, [sp, #76]	; 0x4c
    133c:	cmp	r8, #1
    1340:	bne	14e4 <coda_mem_cursor_read_int8_array+0x39c>
    1344:	cmp	r0, #1
    1348:	ble	14e4 <coda_mem_cursor_read_int8_array+0x39c>
    134c:	and	r6, r0, #1
    1350:	add	r8, sp, #8
    1354:	mov	r1, #1
    1358:	add	r2, r4, #4
    135c:	sub	r7, r6, r0
    1360:	add	r3, r8, #4
    1364:	str	r1, [sp, #8]
    1368:	ldr	r5, [r2, #-4]
    136c:	ldr	r4, [r2]
    1370:	adds	r7, r7, #2
    1374:	add	r2, r2, #8
    1378:	mul	r5, r5, r1
    137c:	mul	r1, r4, r5
    1380:	str	r5, [r3]
    1384:	str	r1, [r3, #4]
    1388:	add	r3, r3, #8
    138c:	bne	1368 <coda_mem_cursor_read_int8_array+0x220>
    1390:	cmp	r6, #0
    1394:	beq	13a4 <coda_mem_cursor_read_int8_array+0x25c>
    1398:	ldr	r2, [r2, #-4]
    139c:	mul	r1, r2, r1
    13a0:	str	r1, [r3]
    13a4:	ldr	r7, [r8, r0, lsl #2]
    13a8:	cmp	r7, #1
    13ac:	blt	18c0 <coda_mem_cursor_read_int8_array+0x778>
    13b0:	add	r0, r8, r0, lsl #2
    13b4:	mov	r1, #0
    13b8:	mov	r4, #0
    13bc:	ldr	r6, [r0, #-4]
    13c0:	add	r0, sp, #80	; 0x50
    13c4:	bl	0 <coda_cursor_goto_array_element_by_index>
    13c8:	cmp	r0, #0
    13cc:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    13d0:	sub	r0, r8, #4
    13d4:	add	r5, sp, #80	; 0x50
    13d8:	mov	sl, #0
    13dc:	str	r0, [sp, #4]
    13e0:	add	r1, r9, sl
    13e4:	mov	r0, r5
    13e8:	bl	0 <coda_bin_cursor_read_int8>
    13ec:	cmp	r0, #0
    13f0:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    13f4:	add	r4, r4, #1
    13f8:	cmp	r4, r7
    13fc:	bge	1410 <coda_mem_cursor_read_int8_array+0x2c8>
    1400:	mov	r0, r5
    1404:	bl	0 <coda_cursor_goto_next_array_element>
    1408:	cmp	r0, #0
    140c:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    1410:	add	sl, sl, r6
    1414:	cmp	sl, r7
    1418:	blt	13e0 <coda_mem_cursor_read_int8_array+0x298>
    141c:	cmp	r4, r7
    1420:	beq	18c0 <coda_mem_cursor_read_int8_array+0x778>
    1424:	ldr	r1, [sp, #76]	; 0x4c
    1428:	add	r2, r8, r1, lsl #2
    142c:	ldr	r0, [r8, r1, lsl #2]
    1430:	ldr	r2, [r2, #-8]
    1434:	add	r2, r2, sl
    1438:	sub	sl, r2, r0
    143c:	subs	r0, r1, #3
    1440:	bmi	13e0 <coda_mem_cursor_read_int8_array+0x298>
    1444:	ldr	r0, [sp, #4]
    1448:	add	r0, r0, r1, lsl #2
    144c:	sub	r1, r1, #2
    1450:	ldr	r2, [r0]
    1454:	cmp	sl, r2
    1458:	blt	13e0 <coda_mem_cursor_read_int8_array+0x298>
    145c:	ldr	r3, [r0, #-8]
    1460:	sub	r2, sl, r2
    1464:	sub	r1, r1, #1
    1468:	sub	r0, r0, #4
    146c:	cmp	r1, #0
    1470:	add	sl, r3, r2
    1474:	bgt	1450 <coda_mem_cursor_read_int8_array+0x308>
    1478:	b	13e0 <coda_mem_cursor_read_int8_array+0x298>
    147c:	add	r4, sp, #44	; 0x2c
    1480:	add	r1, sp, #76	; 0x4c
    1484:	mov	r0, r6
    1488:	mov	r2, r4
    148c:	bl	0 <coda_cursor_get_array_dim>
    1490:	cmp	r0, #0
    1494:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    1498:	add	r0, sp, #80	; 0x50
    149c:	mov	r1, r6
    14a0:	mov	r2, #520	; 0x208
    14a4:	bl	0 <memcpy>
    14a8:	ldr	sl, [sp, #76]	; 0x4c
    14ac:	cmp	sl, #1
    14b0:	blt	1508 <coda_mem_cursor_read_int8_array+0x3c0>
    14b4:	cmp	sl, #4
    14b8:	bcs	1540 <coda_mem_cursor_read_int8_array+0x3f8>
    14bc:	mov	r4, #1
    14c0:	mov	lr, #0
    14c4:	b	1740 <coda_mem_cursor_read_int8_array+0x5f8>
    14c8:	cmp	r0, #1
    14cc:	blt	1500 <coda_mem_cursor_read_int8_array+0x3b8>
    14d0:	cmp	r0, #4
    14d4:	bcs	1510 <coda_mem_cursor_read_int8_array+0x3c8>
    14d8:	mov	r4, #1
    14dc:	mov	lr, #0
    14e0:	b	1600 <coda_mem_cursor_read_int8_array+0x4b8>
    14e4:	cmp	r0, #1
    14e8:	blt	1570 <coda_mem_cursor_read_int8_array+0x428>
    14ec:	cmp	r0, #4
    14f0:	bcs	1688 <coda_mem_cursor_read_int8_array+0x540>
    14f4:	mov	r4, #1
    14f8:	mov	lr, #0
    14fc:	b	1878 <coda_mem_cursor_read_int8_array+0x730>
    1500:	mov	r4, #1
    1504:	b	1624 <coda_mem_cursor_read_int8_array+0x4dc>
    1508:	mov	r4, #1
    150c:	b	1764 <coda_mem_cursor_read_int8_array+0x61c>
    1510:	bic	lr, r0, #3
    1514:	mov	r2, #1
    1518:	vmov.i32	q8, #1	; 0x00000001
    151c:	sub	r7, lr, #4
    1520:	add	r3, r2, r7, lsr #2
    1524:	cmp	r7, #12
    1528:	and	ip, r3, #3
    152c:	bcs	1578 <coda_mem_cursor_read_int8_array+0x430>
    1530:	mov	r3, #0
    1534:	cmp	ip, #0
    1538:	bne	15cc <coda_mem_cursor_read_int8_array+0x484>
    153c:	b	15e8 <coda_mem_cursor_read_int8_array+0x4a0>
    1540:	bic	lr, sl, #3
    1544:	mov	r2, #1
    1548:	vmov.i32	q8, #1	; 0x00000001
    154c:	sub	r3, lr, #4
    1550:	add	r2, r2, r3, lsr #2
    1554:	cmp	r3, #12
    1558:	and	ip, r2, #3
    155c:	bcs	16b8 <coda_mem_cursor_read_int8_array+0x570>
    1560:	mov	r3, #0
    1564:	cmp	ip, #0
    1568:	bne	170c <coda_mem_cursor_read_int8_array+0x5c4>
    156c:	b	1728 <coda_mem_cursor_read_int8_array+0x5e0>
    1570:	mov	r4, #1
    1574:	b	189c <coda_mem_cursor_read_int8_array+0x754>
    1578:	sub	r6, r3, ip
    157c:	mov	r3, #0
    1580:	mov	r5, #64	; 0x40
    1584:	mov	r7, r4
    1588:	vld1.32	{d18-d19}, [r7], r5
    158c:	add	r1, r4, #16
    1590:	add	r2, r4, #32
    1594:	subs	r6, r6, #4
    1598:	add	r3, r3, #16
    159c:	vld1.32	{d20-d21}, [r1]
    15a0:	add	r1, r4, #48	; 0x30
    15a4:	mov	r4, r7
    15a8:	vmul.i32	q8, q9, q8
    15ac:	vld1.32	{d18-d19}, [r2]
    15b0:	vmul.i32	q8, q10, q8
    15b4:	vld1.32	{d20-d21}, [r1]
    15b8:	vmul.i32	q8, q9, q8
    15bc:	vmul.i32	q8, q10, q8
    15c0:	bne	1588 <coda_mem_cursor_read_int8_array+0x440>
    15c4:	cmp	ip, #0
    15c8:	beq	15e8 <coda_mem_cursor_read_int8_array+0x4a0>
    15cc:	add	r1, sp, #44	; 0x2c
    15d0:	rsb	r2, ip, #0
    15d4:	add	r3, r1, r3, lsl #2
    15d8:	vld1.32	{d18-d19}, [r3]!
    15dc:	adds	r2, r2, #1
    15e0:	vmul.i32	q8, q9, q8
    15e4:	bcc	15d8 <coda_mem_cursor_read_int8_array+0x490>
    15e8:	vext.8	q9, q8, q8, #8
    15ec:	cmp	r0, lr
    15f0:	vmul.i32	q0, q8, q9
    15f4:	vmul.i32	q8, q0, d0[1]
    15f8:	vmov.32	r4, d16[0]
    15fc:	beq	161c <coda_mem_cursor_read_int8_array+0x4d4>
    1600:	add	r1, sp, #44	; 0x2c
    1604:	sub	r0, r0, lr
    1608:	add	r2, r1, lr, lsl #2
    160c:	ldr	r1, [r2], #4
    1610:	subs	r0, r0, #1
    1614:	mul	r4, r1, r4
    1618:	bne	160c <coda_mem_cursor_read_int8_array+0x4c4>
    161c:	cmp	r4, #1
    1620:	blt	18c0 <coda_mem_cursor_read_int8_array+0x778>
    1624:	add	r0, sp, #80	; 0x50
    1628:	mov	r1, #0
    162c:	mov	r6, #0
    1630:	bl	0 <coda_cursor_goto_array_element_by_index>
    1634:	cmp	r0, #0
    1638:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    163c:	sub	r7, r4, #1
    1640:	add	r5, sp, #80	; 0x50
    1644:	b	1658 <coda_mem_cursor_read_int8_array+0x510>
    1648:	add	r6, r6, #1
    164c:	mov	r0, #0
    1650:	cmp	r4, r6
    1654:	beq	18b8 <coda_mem_cursor_read_int8_array+0x770>
    1658:	add	r1, r9, r6
    165c:	mov	r0, r5
    1660:	bl	0 <coda_cursor_read_int8>
    1664:	cmp	r0, #0
    1668:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    166c:	cmp	r6, r7
    1670:	bge	1648 <coda_mem_cursor_read_int8_array+0x500>
    1674:	mov	r0, r5
    1678:	bl	0 <coda_cursor_goto_next_array_element>
    167c:	cmp	r0, #0
    1680:	beq	1648 <coda_mem_cursor_read_int8_array+0x500>
    1684:	b	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    1688:	bic	lr, r0, #3
    168c:	mov	r2, #1
    1690:	vmov.i32	q8, #1	; 0x00000001
    1694:	sub	r7, lr, #4
    1698:	add	r3, r2, r7, lsr #2
    169c:	cmp	r7, #12
    16a0:	and	ip, r3, #3
    16a4:	bcs	17f0 <coda_mem_cursor_read_int8_array+0x6a8>
    16a8:	mov	r3, #0
    16ac:	cmp	ip, #0
    16b0:	bne	1844 <coda_mem_cursor_read_int8_array+0x6fc>
    16b4:	b	1860 <coda_mem_cursor_read_int8_array+0x718>
    16b8:	sub	r5, r2, ip
    16bc:	mov	r3, #0
    16c0:	mov	r2, #64	; 0x40
    16c4:	mov	r7, r4
    16c8:	vld1.32	{d18-d19}, [r7], r2
    16cc:	add	r0, r4, #16
    16d0:	add	r1, r4, #32
    16d4:	subs	r5, r5, #4
    16d8:	add	r3, r3, #16
    16dc:	vld1.32	{d20-d21}, [r0]
    16e0:	add	r0, r4, #48	; 0x30
    16e4:	mov	r4, r7
    16e8:	vmul.i32	q8, q9, q8
    16ec:	vld1.32	{d18-d19}, [r1]
    16f0:	vmul.i32	q8, q10, q8
    16f4:	vld1.32	{d20-d21}, [r0]
    16f8:	vmul.i32	q8, q9, q8
    16fc:	vmul.i32	q8, q10, q8
    1700:	bne	16c8 <coda_mem_cursor_read_int8_array+0x580>
    1704:	cmp	ip, #0
    1708:	beq	1728 <coda_mem_cursor_read_int8_array+0x5e0>
    170c:	add	r0, sp, #44	; 0x2c
    1710:	add	r2, r0, r3, lsl #2
    1714:	rsb	r3, ip, #0
    1718:	vld1.32	{d18-d19}, [r2]!
    171c:	adds	r3, r3, #1
    1720:	vmul.i32	q8, q9, q8
    1724:	bcc	1718 <coda_mem_cursor_read_int8_array+0x5d0>
    1728:	vext.8	q9, q8, q8, #8
    172c:	cmp	sl, lr
    1730:	vmul.i32	q0, q8, q9
    1734:	vmul.i32	q8, q0, d0[1]
    1738:	vmov.32	r4, d16[0]
    173c:	beq	175c <coda_mem_cursor_read_int8_array+0x614>
    1740:	add	r0, sp, #44	; 0x2c
    1744:	add	r2, r0, lr, lsl #2
    1748:	sub	r0, sl, lr
    174c:	ldr	r1, [r2], #4
    1750:	subs	r0, r0, #1
    1754:	mul	r4, r1, r4
    1758:	bne	174c <coda_mem_cursor_read_int8_array+0x604>
    175c:	cmp	r4, #1
    1760:	blt	17c4 <coda_mem_cursor_read_int8_array+0x67c>
    1764:	add	r0, sp, #80	; 0x50
    1768:	mov	r1, #0
    176c:	mov	r5, #0
    1770:	bl	0 <coda_cursor_goto_array_element_by_index>
    1774:	cmp	r0, #0
    1778:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    177c:	sub	r7, r4, #1
    1780:	add	sl, sp, #80	; 0x50
    1784:	b	1794 <coda_mem_cursor_read_int8_array+0x64c>
    1788:	add	r5, r5, #1
    178c:	cmp	r4, r5
    1790:	beq	17c4 <coda_mem_cursor_read_int8_array+0x67c>
    1794:	add	r1, r9, r5
    1798:	mov	r0, sl
    179c:	bl	0 <coda_ascii_cursor_read_int8>
    17a0:	cmp	r0, #0
    17a4:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    17a8:	cmp	r5, r7
    17ac:	bge	1788 <coda_mem_cursor_read_int8_array+0x640>
    17b0:	mov	r0, sl
    17b4:	bl	0 <coda_cursor_goto_next_array_element>
    17b8:	cmp	r0, #0
    17bc:	beq	1788 <coda_mem_cursor_read_int8_array+0x640>
    17c0:	b	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    17c4:	cmp	r8, #0
    17c8:	beq	18c0 <coda_mem_cursor_read_int8_array+0x778>
    17cc:	mov	r0, r6
    17d0:	mov	r1, r9
    17d4:	mov	r2, #1
    17d8:	bl	1c78 <transpose_array>
    17dc:	mov	r1, r0
    17e0:	mvn	r0, #0
    17e4:	cmp	r1, #0
    17e8:	bne	18b8 <coda_mem_cursor_read_int8_array+0x770>
    17ec:	b	18c0 <coda_mem_cursor_read_int8_array+0x778>
    17f0:	sub	r6, r3, ip
    17f4:	mov	r3, #0
    17f8:	mov	r5, #64	; 0x40
    17fc:	mov	r7, r4
    1800:	vld1.32	{d18-d19}, [r7], r5
    1804:	add	r1, r4, #16
    1808:	add	r2, r4, #32
    180c:	subs	r6, r6, #4
    1810:	add	r3, r3, #16
    1814:	vld1.32	{d20-d21}, [r1]
    1818:	add	r1, r4, #48	; 0x30
    181c:	mov	r4, r7
    1820:	vmul.i32	q8, q9, q8
    1824:	vld1.32	{d18-d19}, [r2]
    1828:	vmul.i32	q8, q10, q8
    182c:	vld1.32	{d20-d21}, [r1]
    1830:	vmul.i32	q8, q9, q8
    1834:	vmul.i32	q8, q10, q8
    1838:	bne	1800 <coda_mem_cursor_read_int8_array+0x6b8>
    183c:	cmp	ip, #0
    1840:	beq	1860 <coda_mem_cursor_read_int8_array+0x718>
    1844:	add	r1, sp, #44	; 0x2c
    1848:	rsb	r2, ip, #0
    184c:	add	r3, r1, r3, lsl #2
    1850:	vld1.32	{d18-d19}, [r3]!
    1854:	adds	r2, r2, #1
    1858:	vmul.i32	q8, q9, q8
    185c:	bcc	1850 <coda_mem_cursor_read_int8_array+0x708>
    1860:	vext.8	q9, q8, q8, #8
    1864:	cmp	r0, lr
    1868:	vmul.i32	q0, q8, q9
    186c:	vmul.i32	q8, q0, d0[1]
    1870:	vmov.32	r4, d16[0]
    1874:	beq	1894 <coda_mem_cursor_read_int8_array+0x74c>
    1878:	add	r1, sp, #44	; 0x2c
    187c:	sub	r0, r0, lr
    1880:	add	r2, r1, lr, lsl #2
    1884:	ldr	r1, [r2], #4
    1888:	subs	r0, r0, #1
    188c:	mul	r4, r1, r4
    1890:	bne	1884 <coda_mem_cursor_read_int8_array+0x73c>
    1894:	cmp	r4, #1
    1898:	blt	18c0 <coda_mem_cursor_read_int8_array+0x778>
    189c:	add	r0, sp, #80	; 0x50
    18a0:	mov	r1, #0
    18a4:	mov	r6, #0
    18a8:	bl	0 <coda_cursor_goto_array_element_by_index>
    18ac:	cmp	r0, #0
    18b0:	beq	18cc <coda_mem_cursor_read_int8_array+0x784>
    18b4:	mvn	r0, #0
    18b8:	sub	sp, fp, #28
    18bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18c0:	mov	r0, #0
    18c4:	sub	sp, fp, #28
    18c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18cc:	sub	r7, r4, #1
    18d0:	add	r5, sp, #80	; 0x50
    18d4:	b	18e8 <coda_mem_cursor_read_int8_array+0x7a0>
    18d8:	add	r6, r6, #1
    18dc:	mov	r0, #0
    18e0:	cmp	r4, r6
    18e4:	beq	18b8 <coda_mem_cursor_read_int8_array+0x770>
    18e8:	add	r1, r9, r6
    18ec:	mov	r0, r5
    18f0:	bl	0 <coda_bin_cursor_read_int8>
    18f4:	cmp	r0, #0
    18f8:	bne	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    18fc:	cmp	r6, r7
    1900:	bge	18d8 <coda_mem_cursor_read_int8_array+0x790>
    1904:	mov	r0, r5
    1908:	bl	0 <coda_cursor_goto_next_array_element>
    190c:	cmp	r0, #0
    1910:	beq	18d8 <coda_mem_cursor_read_int8_array+0x790>
    1914:	b	18b4 <coda_mem_cursor_read_int8_array+0x76c>
    1918:	movw	r0, #0
    191c:	movw	r1, #0
    1920:	movw	r3, #0
    1924:	movw	r2, #651	; 0x28b
    1928:	movt	r0, #0
    192c:	b	1944 <coda_mem_cursor_read_int8_array+0x7fc>
    1930:	movw	r0, #0
    1934:	movw	r1, #0
    1938:	movw	r3, #0
    193c:	movw	r2, #657	; 0x291
    1940:	movt	r0, #0
    1944:	movt	r1, #0
    1948:	movt	r3, #0
    194c:	bl	0 <__assert_fail>

00001950 <read_array>:
    1950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1954:	add	fp, sp, #28
    1958:	sub	sp, sp, #604	; 0x25c
    195c:	add	r5, sp, #48	; 0x30
    1960:	mov	r8, r2
    1964:	mov	sl, r1
    1968:	add	r1, sp, #44	; 0x2c
    196c:	mov	r6, r3
    1970:	mov	r4, r0
    1974:	mov	r2, r5
    1978:	bl	0 <coda_cursor_get_array_dim>
    197c:	cmp	r0, #0
    1980:	beq	1990 <read_array+0x40>
    1984:	mvn	r0, #0
    1988:	sub	sp, fp, #28
    198c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1990:	mov	r9, r6
    1994:	ldr	r6, [fp, #8]
    1998:	add	r0, sp, #80	; 0x50
    199c:	mov	r1, r4
    19a0:	mov	r2, #520	; 0x208
    19a4:	bl	0 <memcpy>
    19a8:	ldr	r0, [sp, #44]	; 0x2c
    19ac:	cmp	r6, #1
    19b0:	bne	1af8 <read_array+0x1a8>
    19b4:	cmp	r0, #1
    19b8:	ble	1af8 <read_array+0x1a8>
    19bc:	and	r6, r0, #1
    19c0:	add	ip, sp, #8
    19c4:	mov	r1, #1
    19c8:	add	r2, r5, #4
    19cc:	sub	r7, r6, r0
    19d0:	add	r3, ip, #4
    19d4:	str	r1, [sp, #8]
    19d8:	ldr	r5, [r2, #-4]
    19dc:	ldr	r4, [r2]
    19e0:	adds	r7, r7, #2
    19e4:	add	r2, r2, #8
    19e8:	mul	r5, r5, r1
    19ec:	mul	r1, r4, r5
    19f0:	str	r5, [r3]
    19f4:	str	r1, [r3, #4]
    19f8:	add	r3, r3, #8
    19fc:	bne	19d8 <read_array+0x88>
    1a00:	mov	r7, sl
    1a04:	cmp	r6, #0
    1a08:	beq	1a18 <read_array+0xc8>
    1a0c:	ldr	r2, [r2, #-4]
    1a10:	mul	r1, r2, r1
    1a14:	str	r1, [r3]
    1a18:	ldr	r4, [ip, r0, lsl #2]
    1a1c:	cmp	r4, #1
    1a20:	blt	1c6c <read_array+0x31c>
    1a24:	add	r0, ip, r0, lsl #2
    1a28:	mov	r1, #0
    1a2c:	mov	r5, r9
    1a30:	mov	r9, #0
    1a34:	mov	sl, ip
    1a38:	ldr	r6, [r0, #-4]
    1a3c:	add	r0, sp, #80	; 0x50
    1a40:	bl	0 <coda_cursor_goto_array_element_by_index>
    1a44:	cmp	r0, #0
    1a48:	bne	1984 <read_array+0x34>
    1a4c:	sub	r0, sl, #4
    1a50:	mov	sl, #0
    1a54:	str	r0, [sp, #4]
    1a58:	mla	r1, sl, r5, r8
    1a5c:	add	r0, sp, #80	; 0x50
    1a60:	blx	r7
    1a64:	cmp	r0, #0
    1a68:	bne	1984 <read_array+0x34>
    1a6c:	add	r9, r9, #1
    1a70:	cmp	r9, r4
    1a74:	bge	1a88 <read_array+0x138>
    1a78:	add	r0, sp, #80	; 0x50
    1a7c:	bl	0 <coda_cursor_goto_next_array_element>
    1a80:	cmp	r0, #0
    1a84:	bne	1984 <read_array+0x34>
    1a88:	add	sl, sl, r6
    1a8c:	cmp	sl, r4
    1a90:	blt	1a58 <read_array+0x108>
    1a94:	cmp	r9, r4
    1a98:	add	r2, sp, #8
    1a9c:	beq	1c6c <read_array+0x31c>
    1aa0:	ldr	r1, [sp, #44]	; 0x2c
    1aa4:	ldr	r0, [r2, r1, lsl #2]
    1aa8:	add	r2, r2, r1, lsl #2
    1aac:	ldr	r2, [r2, #-8]
    1ab0:	add	r2, r2, sl
    1ab4:	sub	sl, r2, r0
    1ab8:	subs	r0, r1, #3
    1abc:	bmi	1a58 <read_array+0x108>
    1ac0:	ldr	r0, [sp, #4]
    1ac4:	add	r0, r0, r1, lsl #2
    1ac8:	sub	r1, r1, #2
    1acc:	ldr	r2, [r0]
    1ad0:	cmp	sl, r2
    1ad4:	blt	1a58 <read_array+0x108>
    1ad8:	ldr	r3, [r0, #-8]
    1adc:	sub	r2, sl, r2
    1ae0:	sub	r1, r1, #1
    1ae4:	sub	r0, r0, #4
    1ae8:	cmp	r1, #0
    1aec:	add	sl, r2, r3
    1af0:	bgt	1acc <read_array+0x17c>
    1af4:	b	1a58 <read_array+0x108>
    1af8:	cmp	r0, #1
    1afc:	blt	1b18 <read_array+0x1c8>
    1b00:	cmp	r0, #4
    1b04:	bcs	1b24 <read_array+0x1d4>
    1b08:	mov	r4, #1
    1b0c:	mov	lr, #0
    1b10:	mov	r5, r9
    1b14:	b	1be0 <read_array+0x290>
    1b18:	mov	r4, #1
    1b1c:	mov	r5, r9
    1b20:	b	1c04 <read_array+0x2b4>
    1b24:	bic	lr, r0, #3
    1b28:	mov	r2, #1
    1b2c:	vmov.i32	q8, #1	; 0x00000001
    1b30:	sub	r7, lr, #4
    1b34:	add	r3, r2, r7, lsr #2
    1b38:	cmp	r7, #12
    1b3c:	and	ip, r3, #3
    1b40:	bcs	1b54 <read_array+0x204>
    1b44:	mov	r3, #0
    1b48:	cmp	ip, #0
    1b4c:	bne	1ba8 <read_array+0x258>
    1b50:	b	1bc4 <read_array+0x274>
    1b54:	sub	r6, r3, ip
    1b58:	mov	r3, #0
    1b5c:	mov	r4, #64	; 0x40
    1b60:	mov	r7, r5
    1b64:	vld1.32	{d18-d19}, [r7], r4
    1b68:	add	r1, r5, #16
    1b6c:	add	r2, r5, #32
    1b70:	subs	r6, r6, #4
    1b74:	add	r3, r3, #16
    1b78:	vld1.32	{d20-d21}, [r1]
    1b7c:	add	r1, r5, #48	; 0x30
    1b80:	mov	r5, r7
    1b84:	vmul.i32	q8, q9, q8
    1b88:	vld1.32	{d18-d19}, [r2]
    1b8c:	vmul.i32	q8, q10, q8
    1b90:	vld1.32	{d20-d21}, [r1]
    1b94:	vmul.i32	q8, q9, q8
    1b98:	vmul.i32	q8, q10, q8
    1b9c:	bne	1b64 <read_array+0x214>
    1ba0:	cmp	ip, #0
    1ba4:	beq	1bc4 <read_array+0x274>
    1ba8:	add	r1, sp, #48	; 0x30
    1bac:	rsb	r2, ip, #0
    1bb0:	add	r3, r1, r3, lsl #2
    1bb4:	vld1.32	{d18-d19}, [r3]!
    1bb8:	adds	r2, r2, #1
    1bbc:	vmul.i32	q8, q9, q8
    1bc0:	bcc	1bb4 <read_array+0x264>
    1bc4:	vext.8	q9, q8, q8, #8
    1bc8:	cmp	r0, lr
    1bcc:	mov	r5, r9
    1bd0:	vmul.i32	q0, q8, q9
    1bd4:	vmul.i32	q8, q0, d0[1]
    1bd8:	vmov.32	r4, d16[0]
    1bdc:	beq	1bfc <read_array+0x2ac>
    1be0:	add	r1, sp, #48	; 0x30
    1be4:	sub	r0, r0, lr
    1be8:	add	r2, r1, lr, lsl #2
    1bec:	ldr	r1, [r2], #4
    1bf0:	subs	r0, r0, #1
    1bf4:	mul	r4, r1, r4
    1bf8:	bne	1bec <read_array+0x29c>
    1bfc:	cmp	r4, #1
    1c00:	blt	1c6c <read_array+0x31c>
    1c04:	add	r0, sp, #80	; 0x50
    1c08:	mov	r1, #0
    1c0c:	mov	r6, #0
    1c10:	bl	0 <coda_cursor_goto_array_element_by_index>
    1c14:	cmp	r0, #0
    1c18:	bne	1984 <read_array+0x34>
    1c1c:	sub	r7, r4, #1
    1c20:	add	r9, sp, #80	; 0x50
    1c24:	b	1c3c <read_array+0x2ec>
    1c28:	add	r6, r6, #1
    1c2c:	add	r8, r8, r5
    1c30:	mov	r0, #0
    1c34:	cmp	r4, r6
    1c38:	beq	1988 <read_array+0x38>
    1c3c:	mov	r0, r9
    1c40:	mov	r1, r8
    1c44:	blx	sl
    1c48:	cmp	r0, #0
    1c4c:	bne	1984 <read_array+0x34>
    1c50:	cmp	r6, r7
    1c54:	bge	1c28 <read_array+0x2d8>
    1c58:	mov	r0, r9
    1c5c:	bl	0 <coda_cursor_goto_next_array_element>
    1c60:	cmp	r0, #0
    1c64:	beq	1c28 <read_array+0x2d8>
    1c68:	b	1984 <read_array+0x34>
    1c6c:	mov	r0, #0
    1c70:	sub	sp, fp, #28
    1c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001c78 <transpose_array>:
    1c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c7c:	add	fp, sp, #28
    1c80:	sub	sp, sp, #180	; 0xb4
    1c84:	sub	r6, fp, #60	; 0x3c
    1c88:	mov	r8, r2
    1c8c:	str	r1, [sp, #32]
    1c90:	sub	r1, fp, #64	; 0x40
    1c94:	mov	r2, r6
    1c98:	bl	0 <coda_cursor_get_array_dim>
    1c9c:	mvn	r7, #0
    1ca0:	cmp	r0, #0
    1ca4:	bne	214c <transpose_array+0x4d4>
    1ca8:	ldr	r5, [fp, #-64]	; 0xffffffc0
    1cac:	mov	r7, #0
    1cb0:	cmp	r5, #2
    1cb4:	blt	214c <transpose_array+0x4d4>
    1cb8:	add	r9, sp, #72	; 0x48
    1cbc:	lsl	r2, r5, #2
    1cc0:	mov	r1, #0
    1cc4:	mov	r7, #0
    1cc8:	mov	r0, r9
    1ccc:	bl	0 <memset>
    1cd0:	mov	r4, #1
    1cd4:	cmp	r5, #4
    1cd8:	bcc	1d30 <transpose_array+0xb8>
    1cdc:	add	r0, r6, r5, lsl #2
    1ce0:	vmov.i32	q8, #1	; 0x00000001
    1ce4:	bic	r7, r5, #3
    1ce8:	add	r1, sp, #36	; 0x24
    1cec:	mvn	r2, #15
    1cf0:	mov	r3, r7
    1cf4:	sub	r0, r0, #16
    1cf8:	vld1.32	{d18-d19}, [r0], r2
    1cfc:	vld1.32	{d20-d21}, [r6]!
    1d00:	subs	r3, r3, #4
    1d04:	vrev64.32	q9, q9
    1d08:	vmul.i32	q8, q10, q8
    1d0c:	vext.8	q9, q9, q9, #8
    1d10:	vst1.32	{d18-d19}, [r1]!
    1d14:	bne	1cf8 <transpose_array+0x80>
    1d18:	vext.8	q9, q8, q8, #8
    1d1c:	cmp	r5, r7
    1d20:	vmul.i32	q0, q8, q9
    1d24:	vmul.i32	q8, q0, d0[1]
    1d28:	vmov.32	r4, d16[0]
    1d2c:	beq	1d60 <transpose_array+0xe8>
    1d30:	sub	r0, r7, r5
    1d34:	sub	r1, fp, #60	; 0x3c
    1d38:	add	r2, sp, #36	; 0x24
    1d3c:	add	r0, r0, #1
    1d40:	ldr	r3, [r1, -r0, lsl #2]
    1d44:	add	r0, r0, #1
    1d48:	cmp	r0, #1
    1d4c:	str	r3, [r2, r7, lsl #2]
    1d50:	ldr	r3, [r1, r7, lsl #2]
    1d54:	add	r7, r7, #1
    1d58:	mul	r4, r3, r4
    1d5c:	bne	1d40 <transpose_array+0xc8>
    1d60:	mov	r7, #0
    1d64:	cmp	r4, #2
    1d68:	blt	214c <transpose_array+0x4d4>
    1d6c:	cmp	r5, #1
    1d70:	mov	r1, #1
    1d74:	sub	r6, fp, #100	; 0x64
    1d78:	add	sl, sp, #36	; 0x24
    1d7c:	subge	r0, r5, #1
    1d80:	str	r1, [r6, r5, lsl #2]
    1d84:	str	r1, [sl, r5, lsl #2]
    1d88:	strge	r1, [r6, r0, lsl #2]
    1d8c:	cmpge	r0, #1
    1d90:	bge	1ed8 <transpose_array+0x260>
    1d94:	mov	r0, #0
    1d98:	str	r0, [r9, r5, lsl #2]
    1d9c:	str	r0, [sl, r5, lsl #2]
    1da0:	mul	r5, r4, r8
    1da4:	mov	r0, r5
    1da8:	bl	0 <malloc>
    1dac:	cmp	r0, #0
    1db0:	str	r0, [sp, #28]
    1db4:	beq	1eac <transpose_array+0x234>
    1db8:	sub	r0, r8, #1
    1dbc:	str	r5, [sp, #8]
    1dc0:	cmp	r0, #7
    1dc4:	bhi	21b8 <transpose_array+0x540>
    1dc8:	add	r1, pc, #0
    1dcc:	ldr	pc, [r1, r0, lsl #2]
    1dd0:	.word	0x00001df0
    1dd4:	.word	0x00001fb4
    1dd8:	.word	0x000021b8
    1ddc:	.word	0x00002074
    1de0:	.word	0x000021b8
    1de4:	.word	0x000021b8
    1de8:	.word	0x000021b8
    1dec:	.word	0x00001ef4
    1df0:	cmp	r4, #1
    1df4:	blt	212c <transpose_array+0x4b4>
    1df8:	add	r0, r6, #4
    1dfc:	ldr	ip, [sp, #36]	; 0x24
    1e00:	ldr	lr, [fp, #-100]	; 0xffffff9c
    1e04:	mov	r3, #0
    1e08:	mov	r1, #0
    1e0c:	str	r0, [sp, #20]
    1e10:	add	r0, sl, #4
    1e14:	str	r0, [sp, #16]
    1e18:	orr	r0, r9, #4
    1e1c:	str	r0, [sp, #12]
    1e20:	mov	r0, #0
    1e24:	str	ip, [sp, #24]
    1e28:	b	1e3c <transpose_array+0x1c4>
    1e2c:	ldr	ip, [sp, #24]
    1e30:	add	r0, r0, #1
    1e34:	cmp	r0, r4
    1e38:	beq	212c <transpose_array+0x4b4>
    1e3c:	ldr	r2, [sp, #32]
    1e40:	ldr	r7, [sp, #28]
    1e44:	ldrb	r2, [r2, r0]
    1e48:	strb	r2, [r7, r1]
    1e4c:	ldr	r2, [sp, #72]	; 0x48
    1e50:	add	r1, lr, r1
    1e54:	add	r2, r2, #1
    1e58:	cmp	r2, ip
    1e5c:	str	r2, [sp, #72]	; 0x48
    1e60:	bne	1e2c <transpose_array+0x1b4>
    1e64:	ldr	r2, [sp, #20]
    1e68:	ldr	r6, [sp, #16]
    1e6c:	ldr	r8, [sp, #12]
    1e70:	mov	r5, lr
    1e74:	ldr	sl, [r2], #4
    1e78:	str	r3, [r8, #-4]
    1e7c:	ldr	r9, [r8]
    1e80:	add	r1, sl, r1
    1e84:	mls	r1, r5, ip, r1
    1e88:	ldr	r5, [r6], #4
    1e8c:	add	r7, r9, #1
    1e90:	str	r7, [r8]
    1e94:	add	r8, r8, #4
    1e98:	mov	ip, r7
    1e9c:	cmp	r7, r5
    1ea0:	mov	r5, sl
    1ea4:	beq	1e74 <transpose_array+0x1fc>
    1ea8:	b	1e2c <transpose_array+0x1b4>
    1eac:	movw	r1, #0
    1eb0:	movw	r3, #0
    1eb4:	mov	r0, #93	; 0x5d
    1eb8:	mov	r2, r5
    1ebc:	mvn	r7, #0
    1ec0:	movt	r1, #0
    1ec4:	movt	r3, #0
    1ec8:	str	r0, [sp]
    1ecc:	mvn	r0, #0
    1ed0:	bl	0 <coda_set_error>
    1ed4:	b	214c <transpose_array+0x4d4>
    1ed8:	sub	r3, r5, #1
    1edc:	mov	r2, #1
    1ee0:	cmp	r5, #2
    1ee4:	and	ip, r3, #1
    1ee8:	bne	2158 <transpose_array+0x4e0>
    1eec:	mov	lr, r6
    1ef0:	b	2198 <transpose_array+0x520>
    1ef4:	cmp	r4, #1
    1ef8:	blt	212c <transpose_array+0x4b4>
    1efc:	ldr	ip, [sp, #36]	; 0x24
    1f00:	ldr	lr, [fp, #-100]	; 0xffffff9c
    1f04:	add	r0, r6, #4
    1f08:	mov	r1, #0
    1f0c:	str	r0, [sp, #24]
    1f10:	add	r0, sl, #4
    1f14:	mov	sl, #0
    1f18:	str	r0, [sp, #20]
    1f1c:	orr	r0, r9, #4
    1f20:	mov	r9, #0
    1f24:	str	r0, [sp, #16]
    1f28:	b	1f38 <transpose_array+0x2c0>
    1f2c:	add	sl, sl, #1
    1f30:	cmp	sl, r4
    1f34:	beq	212c <transpose_array+0x4b4>
    1f38:	ldr	r2, [sp, #32]
    1f3c:	ldr	r6, [sp, #28]
    1f40:	ldr	r5, [r2, sl, lsl #3]!
    1f44:	ldr	r2, [r2, #4]
    1f48:	str	r5, [r6, r1, lsl #3]!
    1f4c:	add	r1, lr, r1
    1f50:	str	r2, [r6, #4]
    1f54:	ldr	r2, [sp, #72]	; 0x48
    1f58:	add	r2, r2, #1
    1f5c:	cmp	r2, ip
    1f60:	str	r2, [sp, #72]	; 0x48
    1f64:	bne	1f2c <transpose_array+0x2b4>
    1f68:	ldr	r2, [sp, #24]
    1f6c:	ldr	r6, [sp, #20]
    1f70:	ldr	r8, [sp, #16]
    1f74:	mov	r5, lr
    1f78:	mov	r7, ip
    1f7c:	ldr	r3, [r2], #4
    1f80:	str	r9, [r8, #-4]
    1f84:	ldr	r0, [r8]
    1f88:	add	r1, r3, r1
    1f8c:	mls	r1, r5, r7, r1
    1f90:	ldr	r5, [r6], #4
    1f94:	add	r0, r0, #1
    1f98:	str	r0, [r8]
    1f9c:	add	r8, r8, #4
    1fa0:	mov	r7, r0
    1fa4:	cmp	r0, r5
    1fa8:	mov	r5, r3
    1fac:	beq	1f7c <transpose_array+0x304>
    1fb0:	b	1f2c <transpose_array+0x2b4>
    1fb4:	cmp	r4, #1
    1fb8:	blt	212c <transpose_array+0x4b4>
    1fbc:	ldr	ip, [sp, #36]	; 0x24
    1fc0:	ldr	lr, [fp, #-100]	; 0xffffff9c
    1fc4:	add	r0, r6, #4
    1fc8:	mov	r1, #0
    1fcc:	str	r0, [sp, #24]
    1fd0:	add	r0, sl, #4
    1fd4:	mov	sl, #0
    1fd8:	str	r0, [sp, #20]
    1fdc:	orr	r0, r9, #4
    1fe0:	mov	r9, #0
    1fe4:	str	r0, [sp, #16]
    1fe8:	b	1ff8 <transpose_array+0x380>
    1fec:	add	sl, sl, #1
    1ff0:	cmp	sl, r4
    1ff4:	beq	212c <transpose_array+0x4b4>
    1ff8:	ldr	r0, [sp, #28]
    1ffc:	add	r2, r0, r1, lsl #1
    2000:	ldr	r0, [sp, #32]
    2004:	add	r1, lr, r1
    2008:	add	r5, r0, sl, lsl #1
    200c:	ldrh	r5, [r5]
    2010:	strh	r5, [r2]
    2014:	ldr	r2, [sp, #72]	; 0x48
    2018:	add	r2, r2, #1
    201c:	cmp	r2, ip
    2020:	str	r2, [sp, #72]	; 0x48
    2024:	bne	1fec <transpose_array+0x374>
    2028:	ldr	r2, [sp, #24]
    202c:	ldr	r6, [sp, #20]
    2030:	ldr	r8, [sp, #16]
    2034:	mov	r5, lr
    2038:	mov	r7, ip
    203c:	ldr	r3, [r2], #4
    2040:	str	r9, [r8, #-4]
    2044:	ldr	r0, [r8]
    2048:	add	r1, r3, r1
    204c:	mls	r1, r5, r7, r1
    2050:	ldr	r5, [r6], #4
    2054:	add	r0, r0, #1
    2058:	str	r0, [r8]
    205c:	add	r8, r8, #4
    2060:	mov	r7, r0
    2064:	cmp	r0, r5
    2068:	mov	r5, r3
    206c:	beq	203c <transpose_array+0x3c4>
    2070:	b	1fec <transpose_array+0x374>
    2074:	cmp	r4, #1
    2078:	blt	212c <transpose_array+0x4b4>
    207c:	ldr	ip, [sp, #36]	; 0x24
    2080:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2084:	add	r0, r6, #4
    2088:	mov	r1, #0
    208c:	str	r0, [sp, #24]
    2090:	add	r0, sl, #4
    2094:	mov	sl, #0
    2098:	str	r0, [sp, #20]
    209c:	orr	r0, r9, #4
    20a0:	mov	r9, #0
    20a4:	str	r0, [sp, #16]
    20a8:	b	20b8 <transpose_array+0x440>
    20ac:	add	sl, sl, #1
    20b0:	cmp	sl, r4
    20b4:	beq	212c <transpose_array+0x4b4>
    20b8:	ldr	r0, [sp, #32]
    20bc:	ldr	r2, [r0, sl, lsl #2]
    20c0:	ldr	r0, [sp, #28]
    20c4:	str	r2, [r0, r1, lsl #2]
    20c8:	ldr	r2, [sp, #72]	; 0x48
    20cc:	add	r1, lr, r1
    20d0:	add	r2, r2, #1
    20d4:	cmp	r2, ip
    20d8:	str	r2, [sp, #72]	; 0x48
    20dc:	bne	20ac <transpose_array+0x434>
    20e0:	ldr	r2, [sp, #24]
    20e4:	ldr	r6, [sp, #20]
    20e8:	ldr	r8, [sp, #16]
    20ec:	mov	r5, lr
    20f0:	mov	r7, ip
    20f4:	ldr	r3, [r2], #4
    20f8:	str	r9, [r8, #-4]
    20fc:	ldr	r0, [r8]
    2100:	add	r1, r3, r1
    2104:	mls	r1, r5, r7, r1
    2108:	ldr	r5, [r6], #4
    210c:	add	r0, r0, #1
    2110:	str	r0, [r8]
    2114:	add	r8, r8, #4
    2118:	mov	r7, r0
    211c:	cmp	r0, r5
    2120:	mov	r5, r3
    2124:	beq	20f4 <transpose_array+0x47c>
    2128:	b	20ac <transpose_array+0x434>
    212c:	ldr	r4, [sp, #28]
    2130:	ldr	r0, [sp, #32]
    2134:	ldr	r2, [sp, #8]
    2138:	mov	r1, r4
    213c:	bl	0 <memcpy>
    2140:	mov	r0, r4
    2144:	bl	0 <free>
    2148:	mov	r7, #0
    214c:	mov	r0, r7
    2150:	sub	sp, fp, #28
    2154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2158:	add	r2, r6, r5, lsl #2
    215c:	add	r3, sl, r3, lsl #2
    2160:	mov	lr, r6
    2164:	sub	r6, r2, #12
    2168:	mov	r2, #1
    216c:	ldr	r1, [r3]
    2170:	ldr	r7, [r3, #-4]
    2174:	sub	r0, r0, #2
    2178:	sub	r3, r3, #8
    217c:	cmp	ip, r0
    2180:	mul	r1, r1, r2
    2184:	mul	r2, r7, r1
    2188:	str	r2, [r6]
    218c:	str	r1, [r6, #4]
    2190:	sub	r6, r6, #8
    2194:	bne	216c <transpose_array+0x4f4>
    2198:	cmp	ip, #0
    219c:	mov	r6, lr
    21a0:	beq	1d94 <transpose_array+0x11c>
    21a4:	add	r1, r6, r0, lsl #2
    21a8:	ldr	r0, [sl, r0, lsl #2]
    21ac:	mul	r0, r0, r2
    21b0:	str	r0, [r1, #-4]
    21b4:	b	1d94 <transpose_array+0x11c>
    21b8:	movw	r0, #0
    21bc:	movw	r1, #0
    21c0:	movw	r3, #0
    21c4:	mov	r2, #172	; 0xac
    21c8:	movt	r0, #0
    21cc:	movt	r1, #0
    21d0:	movt	r3, #0
    21d4:	bl	0 <__assert_fail>

000021d8 <coda_mem_cursor_read_uint8_array>:
    21d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21dc:	add	fp, sp, #28
    21e0:	sub	sp, sp, #604	; 0x25c
    21e4:	mov	r6, r0
    21e8:	ldr	r0, [r0, #4]
    21ec:	mov	r9, r1
    21f0:	mov	r8, r2
    21f4:	add	r0, r6, r0, lsl #4
    21f8:	ldr	r0, [r0, #-8]
    21fc:	ldr	r1, [r0, #8]
    2200:	cmp	r1, #2
    2204:	beq	2380 <coda_mem_cursor_read_uint8_array+0x1a8>
    2208:	cmp	r1, #1
    220c:	bne	29a8 <coda_mem_cursor_read_uint8_array+0x7d0>
    2210:	add	r4, sp, #44	; 0x2c
    2214:	add	r1, sp, #76	; 0x4c
    2218:	mov	r0, r6
    221c:	mov	r2, r4
    2220:	bl	0 <coda_cursor_get_array_dim>
    2224:	cmp	r0, #0
    2228:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    222c:	add	r0, sp, #80	; 0x50
    2230:	mov	r1, r6
    2234:	mov	r2, #520	; 0x208
    2238:	bl	0 <memcpy>
    223c:	ldr	r0, [sp, #76]	; 0x4c
    2240:	cmp	r8, #1
    2244:	bne	2558 <coda_mem_cursor_read_uint8_array+0x380>
    2248:	cmp	r0, #1
    224c:	ble	2558 <coda_mem_cursor_read_uint8_array+0x380>
    2250:	and	r6, r0, #1
    2254:	add	r8, sp, #8
    2258:	mov	r1, #1
    225c:	add	r2, r4, #4
    2260:	sub	r7, r6, r0
    2264:	add	r3, r8, #4
    2268:	str	r1, [sp, #8]
    226c:	ldr	r5, [r2, #-4]
    2270:	ldr	r4, [r2]
    2274:	adds	r7, r7, #2
    2278:	add	r2, r2, #8
    227c:	mul	r5, r5, r1
    2280:	mul	r1, r4, r5
    2284:	str	r5, [r3]
    2288:	str	r1, [r3, #4]
    228c:	add	r3, r3, #8
    2290:	bne	226c <coda_mem_cursor_read_uint8_array+0x94>
    2294:	cmp	r6, #0
    2298:	beq	22a8 <coda_mem_cursor_read_uint8_array+0xd0>
    229c:	ldr	r2, [r2, #-4]
    22a0:	mul	r1, r2, r1
    22a4:	str	r1, [r3]
    22a8:	ldr	r7, [r8, r0, lsl #2]
    22ac:	cmp	r7, #1
    22b0:	blt	2950 <coda_mem_cursor_read_uint8_array+0x778>
    22b4:	add	r0, r8, r0, lsl #2
    22b8:	mov	r1, #0
    22bc:	mov	r4, #0
    22c0:	ldr	r6, [r0, #-4]
    22c4:	add	r0, sp, #80	; 0x50
    22c8:	bl	0 <coda_cursor_goto_array_element_by_index>
    22cc:	cmp	r0, #0
    22d0:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    22d4:	sub	r0, r8, #4
    22d8:	add	r5, sp, #80	; 0x50
    22dc:	mov	sl, #0
    22e0:	str	r0, [sp, #4]
    22e4:	add	r1, r9, sl
    22e8:	mov	r0, r5
    22ec:	bl	0 <coda_cursor_read_uint8>
    22f0:	cmp	r0, #0
    22f4:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    22f8:	add	r4, r4, #1
    22fc:	cmp	r4, r7
    2300:	bge	2314 <coda_mem_cursor_read_uint8_array+0x13c>
    2304:	mov	r0, r5
    2308:	bl	0 <coda_cursor_goto_next_array_element>
    230c:	cmp	r0, #0
    2310:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    2314:	add	sl, sl, r6
    2318:	cmp	sl, r7
    231c:	blt	22e4 <coda_mem_cursor_read_uint8_array+0x10c>
    2320:	cmp	r4, r7
    2324:	beq	2950 <coda_mem_cursor_read_uint8_array+0x778>
    2328:	ldr	r1, [sp, #76]	; 0x4c
    232c:	add	r2, r8, r1, lsl #2
    2330:	ldr	r0, [r8, r1, lsl #2]
    2334:	ldr	r2, [r2, #-8]
    2338:	add	r2, r2, sl
    233c:	sub	sl, r2, r0
    2340:	subs	r0, r1, #3
    2344:	bmi	22e4 <coda_mem_cursor_read_uint8_array+0x10c>
    2348:	ldr	r0, [sp, #4]
    234c:	add	r0, r0, r1, lsl #2
    2350:	sub	r1, r1, #2
    2354:	ldr	r2, [r0]
    2358:	cmp	sl, r2
    235c:	blt	22e4 <coda_mem_cursor_read_uint8_array+0x10c>
    2360:	ldr	r3, [r0, #-8]
    2364:	sub	r2, sl, r2
    2368:	sub	r1, r1, #1
    236c:	sub	r0, r0, #4
    2370:	cmp	r1, #0
    2374:	add	sl, r3, r2
    2378:	bgt	2354 <coda_mem_cursor_read_uint8_array+0x17c>
    237c:	b	22e4 <coda_mem_cursor_read_uint8_array+0x10c>
    2380:	ldr	r0, [r0, #4]
    2384:	ldr	r0, [r0, #40]	; 0x28
    2388:	ldr	r0, [r0]
    238c:	cmp	r0, #0
    2390:	beq	250c <coda_mem_cursor_read_uint8_array+0x334>
    2394:	cmp	r0, #1
    2398:	bne	29c0 <coda_mem_cursor_read_uint8_array+0x7e8>
    239c:	add	r4, sp, #44	; 0x2c
    23a0:	add	r1, sp, #76	; 0x4c
    23a4:	mov	r0, r6
    23a8:	mov	r2, r4
    23ac:	bl	0 <coda_cursor_get_array_dim>
    23b0:	cmp	r0, #0
    23b4:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    23b8:	add	r0, sp, #80	; 0x50
    23bc:	mov	r1, r6
    23c0:	mov	r2, #520	; 0x208
    23c4:	bl	0 <memcpy>
    23c8:	ldr	r0, [sp, #76]	; 0x4c
    23cc:	cmp	r8, #1
    23d0:	bne	2574 <coda_mem_cursor_read_uint8_array+0x39c>
    23d4:	cmp	r0, #1
    23d8:	ble	2574 <coda_mem_cursor_read_uint8_array+0x39c>
    23dc:	and	r6, r0, #1
    23e0:	add	r8, sp, #8
    23e4:	mov	r1, #1
    23e8:	add	r2, r4, #4
    23ec:	sub	r7, r6, r0
    23f0:	add	r3, r8, #4
    23f4:	str	r1, [sp, #8]
    23f8:	ldr	r5, [r2, #-4]
    23fc:	ldr	r4, [r2]
    2400:	adds	r7, r7, #2
    2404:	add	r2, r2, #8
    2408:	mul	r5, r5, r1
    240c:	mul	r1, r4, r5
    2410:	str	r5, [r3]
    2414:	str	r1, [r3, #4]
    2418:	add	r3, r3, #8
    241c:	bne	23f8 <coda_mem_cursor_read_uint8_array+0x220>
    2420:	cmp	r6, #0
    2424:	beq	2434 <coda_mem_cursor_read_uint8_array+0x25c>
    2428:	ldr	r2, [r2, #-4]
    242c:	mul	r1, r2, r1
    2430:	str	r1, [r3]
    2434:	ldr	r7, [r8, r0, lsl #2]
    2438:	cmp	r7, #1
    243c:	blt	2950 <coda_mem_cursor_read_uint8_array+0x778>
    2440:	add	r0, r8, r0, lsl #2
    2444:	mov	r1, #0
    2448:	mov	r4, #0
    244c:	ldr	r6, [r0, #-4]
    2450:	add	r0, sp, #80	; 0x50
    2454:	bl	0 <coda_cursor_goto_array_element_by_index>
    2458:	cmp	r0, #0
    245c:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    2460:	sub	r0, r8, #4
    2464:	add	r5, sp, #80	; 0x50
    2468:	mov	sl, #0
    246c:	str	r0, [sp, #4]
    2470:	add	r1, r9, sl
    2474:	mov	r0, r5
    2478:	bl	0 <coda_bin_cursor_read_uint8>
    247c:	cmp	r0, #0
    2480:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    2484:	add	r4, r4, #1
    2488:	cmp	r4, r7
    248c:	bge	24a0 <coda_mem_cursor_read_uint8_array+0x2c8>
    2490:	mov	r0, r5
    2494:	bl	0 <coda_cursor_goto_next_array_element>
    2498:	cmp	r0, #0
    249c:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    24a0:	add	sl, sl, r6
    24a4:	cmp	sl, r7
    24a8:	blt	2470 <coda_mem_cursor_read_uint8_array+0x298>
    24ac:	cmp	r4, r7
    24b0:	beq	2950 <coda_mem_cursor_read_uint8_array+0x778>
    24b4:	ldr	r1, [sp, #76]	; 0x4c
    24b8:	add	r2, r8, r1, lsl #2
    24bc:	ldr	r0, [r8, r1, lsl #2]
    24c0:	ldr	r2, [r2, #-8]
    24c4:	add	r2, r2, sl
    24c8:	sub	sl, r2, r0
    24cc:	subs	r0, r1, #3
    24d0:	bmi	2470 <coda_mem_cursor_read_uint8_array+0x298>
    24d4:	ldr	r0, [sp, #4]
    24d8:	add	r0, r0, r1, lsl #2
    24dc:	sub	r1, r1, #2
    24e0:	ldr	r2, [r0]
    24e4:	cmp	sl, r2
    24e8:	blt	2470 <coda_mem_cursor_read_uint8_array+0x298>
    24ec:	ldr	r3, [r0, #-8]
    24f0:	sub	r2, sl, r2
    24f4:	sub	r1, r1, #1
    24f8:	sub	r0, r0, #4
    24fc:	cmp	r1, #0
    2500:	add	sl, r3, r2
    2504:	bgt	24e0 <coda_mem_cursor_read_uint8_array+0x308>
    2508:	b	2470 <coda_mem_cursor_read_uint8_array+0x298>
    250c:	add	r4, sp, #44	; 0x2c
    2510:	add	r1, sp, #76	; 0x4c
    2514:	mov	r0, r6
    2518:	mov	r2, r4
    251c:	bl	0 <coda_cursor_get_array_dim>
    2520:	cmp	r0, #0
    2524:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    2528:	add	r0, sp, #80	; 0x50
    252c:	mov	r1, r6
    2530:	mov	r2, #520	; 0x208
    2534:	bl	0 <memcpy>
    2538:	ldr	sl, [sp, #76]	; 0x4c
    253c:	cmp	sl, #1
    2540:	blt	2598 <coda_mem_cursor_read_uint8_array+0x3c0>
    2544:	cmp	sl, #4
    2548:	bcs	25d0 <coda_mem_cursor_read_uint8_array+0x3f8>
    254c:	mov	r4, #1
    2550:	mov	lr, #0
    2554:	b	27d0 <coda_mem_cursor_read_uint8_array+0x5f8>
    2558:	cmp	r0, #1
    255c:	blt	2590 <coda_mem_cursor_read_uint8_array+0x3b8>
    2560:	cmp	r0, #4
    2564:	bcs	25a0 <coda_mem_cursor_read_uint8_array+0x3c8>
    2568:	mov	r4, #1
    256c:	mov	lr, #0
    2570:	b	2690 <coda_mem_cursor_read_uint8_array+0x4b8>
    2574:	cmp	r0, #1
    2578:	blt	2600 <coda_mem_cursor_read_uint8_array+0x428>
    257c:	cmp	r0, #4
    2580:	bcs	2718 <coda_mem_cursor_read_uint8_array+0x540>
    2584:	mov	r4, #1
    2588:	mov	lr, #0
    258c:	b	2908 <coda_mem_cursor_read_uint8_array+0x730>
    2590:	mov	r4, #1
    2594:	b	26b4 <coda_mem_cursor_read_uint8_array+0x4dc>
    2598:	mov	r4, #1
    259c:	b	27f4 <coda_mem_cursor_read_uint8_array+0x61c>
    25a0:	bic	lr, r0, #3
    25a4:	mov	r2, #1
    25a8:	vmov.i32	q8, #1	; 0x00000001
    25ac:	sub	r7, lr, #4
    25b0:	add	r3, r2, r7, lsr #2
    25b4:	cmp	r7, #12
    25b8:	and	ip, r3, #3
    25bc:	bcs	2608 <coda_mem_cursor_read_uint8_array+0x430>
    25c0:	mov	r3, #0
    25c4:	cmp	ip, #0
    25c8:	bne	265c <coda_mem_cursor_read_uint8_array+0x484>
    25cc:	b	2678 <coda_mem_cursor_read_uint8_array+0x4a0>
    25d0:	bic	lr, sl, #3
    25d4:	mov	r2, #1
    25d8:	vmov.i32	q8, #1	; 0x00000001
    25dc:	sub	r3, lr, #4
    25e0:	add	r2, r2, r3, lsr #2
    25e4:	cmp	r3, #12
    25e8:	and	ip, r2, #3
    25ec:	bcs	2748 <coda_mem_cursor_read_uint8_array+0x570>
    25f0:	mov	r3, #0
    25f4:	cmp	ip, #0
    25f8:	bne	279c <coda_mem_cursor_read_uint8_array+0x5c4>
    25fc:	b	27b8 <coda_mem_cursor_read_uint8_array+0x5e0>
    2600:	mov	r4, #1
    2604:	b	292c <coda_mem_cursor_read_uint8_array+0x754>
    2608:	sub	r6, r3, ip
    260c:	mov	r3, #0
    2610:	mov	r5, #64	; 0x40
    2614:	mov	r7, r4
    2618:	vld1.32	{d18-d19}, [r7], r5
    261c:	add	r1, r4, #16
    2620:	add	r2, r4, #32
    2624:	subs	r6, r6, #4
    2628:	add	r3, r3, #16
    262c:	vld1.32	{d20-d21}, [r1]
    2630:	add	r1, r4, #48	; 0x30
    2634:	mov	r4, r7
    2638:	vmul.i32	q8, q9, q8
    263c:	vld1.32	{d18-d19}, [r2]
    2640:	vmul.i32	q8, q10, q8
    2644:	vld1.32	{d20-d21}, [r1]
    2648:	vmul.i32	q8, q9, q8
    264c:	vmul.i32	q8, q10, q8
    2650:	bne	2618 <coda_mem_cursor_read_uint8_array+0x440>
    2654:	cmp	ip, #0
    2658:	beq	2678 <coda_mem_cursor_read_uint8_array+0x4a0>
    265c:	add	r1, sp, #44	; 0x2c
    2660:	rsb	r2, ip, #0
    2664:	add	r3, r1, r3, lsl #2
    2668:	vld1.32	{d18-d19}, [r3]!
    266c:	adds	r2, r2, #1
    2670:	vmul.i32	q8, q9, q8
    2674:	bcc	2668 <coda_mem_cursor_read_uint8_array+0x490>
    2678:	vext.8	q9, q8, q8, #8
    267c:	cmp	r0, lr
    2680:	vmul.i32	q0, q8, q9
    2684:	vmul.i32	q8, q0, d0[1]
    2688:	vmov.32	r4, d16[0]
    268c:	beq	26ac <coda_mem_cursor_read_uint8_array+0x4d4>
    2690:	add	r1, sp, #44	; 0x2c
    2694:	sub	r0, r0, lr
    2698:	add	r2, r1, lr, lsl #2
    269c:	ldr	r1, [r2], #4
    26a0:	subs	r0, r0, #1
    26a4:	mul	r4, r1, r4
    26a8:	bne	269c <coda_mem_cursor_read_uint8_array+0x4c4>
    26ac:	cmp	r4, #1
    26b0:	blt	2950 <coda_mem_cursor_read_uint8_array+0x778>
    26b4:	add	r0, sp, #80	; 0x50
    26b8:	mov	r1, #0
    26bc:	mov	r6, #0
    26c0:	bl	0 <coda_cursor_goto_array_element_by_index>
    26c4:	cmp	r0, #0
    26c8:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    26cc:	sub	r7, r4, #1
    26d0:	add	r5, sp, #80	; 0x50
    26d4:	b	26e8 <coda_mem_cursor_read_uint8_array+0x510>
    26d8:	add	r6, r6, #1
    26dc:	mov	r0, #0
    26e0:	cmp	r4, r6
    26e4:	beq	2948 <coda_mem_cursor_read_uint8_array+0x770>
    26e8:	add	r1, r9, r6
    26ec:	mov	r0, r5
    26f0:	bl	0 <coda_cursor_read_uint8>
    26f4:	cmp	r0, #0
    26f8:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    26fc:	cmp	r6, r7
    2700:	bge	26d8 <coda_mem_cursor_read_uint8_array+0x500>
    2704:	mov	r0, r5
    2708:	bl	0 <coda_cursor_goto_next_array_element>
    270c:	cmp	r0, #0
    2710:	beq	26d8 <coda_mem_cursor_read_uint8_array+0x500>
    2714:	b	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    2718:	bic	lr, r0, #3
    271c:	mov	r2, #1
    2720:	vmov.i32	q8, #1	; 0x00000001
    2724:	sub	r7, lr, #4
    2728:	add	r3, r2, r7, lsr #2
    272c:	cmp	r7, #12
    2730:	and	ip, r3, #3
    2734:	bcs	2880 <coda_mem_cursor_read_uint8_array+0x6a8>
    2738:	mov	r3, #0
    273c:	cmp	ip, #0
    2740:	bne	28d4 <coda_mem_cursor_read_uint8_array+0x6fc>
    2744:	b	28f0 <coda_mem_cursor_read_uint8_array+0x718>
    2748:	sub	r5, r2, ip
    274c:	mov	r3, #0
    2750:	mov	r2, #64	; 0x40
    2754:	mov	r7, r4
    2758:	vld1.32	{d18-d19}, [r7], r2
    275c:	add	r0, r4, #16
    2760:	add	r1, r4, #32
    2764:	subs	r5, r5, #4
    2768:	add	r3, r3, #16
    276c:	vld1.32	{d20-d21}, [r0]
    2770:	add	r0, r4, #48	; 0x30
    2774:	mov	r4, r7
    2778:	vmul.i32	q8, q9, q8
    277c:	vld1.32	{d18-d19}, [r1]
    2780:	vmul.i32	q8, q10, q8
    2784:	vld1.32	{d20-d21}, [r0]
    2788:	vmul.i32	q8, q9, q8
    278c:	vmul.i32	q8, q10, q8
    2790:	bne	2758 <coda_mem_cursor_read_uint8_array+0x580>
    2794:	cmp	ip, #0
    2798:	beq	27b8 <coda_mem_cursor_read_uint8_array+0x5e0>
    279c:	add	r0, sp, #44	; 0x2c
    27a0:	add	r2, r0, r3, lsl #2
    27a4:	rsb	r3, ip, #0
    27a8:	vld1.32	{d18-d19}, [r2]!
    27ac:	adds	r3, r3, #1
    27b0:	vmul.i32	q8, q9, q8
    27b4:	bcc	27a8 <coda_mem_cursor_read_uint8_array+0x5d0>
    27b8:	vext.8	q9, q8, q8, #8
    27bc:	cmp	sl, lr
    27c0:	vmul.i32	q0, q8, q9
    27c4:	vmul.i32	q8, q0, d0[1]
    27c8:	vmov.32	r4, d16[0]
    27cc:	beq	27ec <coda_mem_cursor_read_uint8_array+0x614>
    27d0:	add	r0, sp, #44	; 0x2c
    27d4:	add	r2, r0, lr, lsl #2
    27d8:	sub	r0, sl, lr
    27dc:	ldr	r1, [r2], #4
    27e0:	subs	r0, r0, #1
    27e4:	mul	r4, r1, r4
    27e8:	bne	27dc <coda_mem_cursor_read_uint8_array+0x604>
    27ec:	cmp	r4, #1
    27f0:	blt	2854 <coda_mem_cursor_read_uint8_array+0x67c>
    27f4:	add	r0, sp, #80	; 0x50
    27f8:	mov	r1, #0
    27fc:	mov	r5, #0
    2800:	bl	0 <coda_cursor_goto_array_element_by_index>
    2804:	cmp	r0, #0
    2808:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    280c:	sub	r7, r4, #1
    2810:	add	sl, sp, #80	; 0x50
    2814:	b	2824 <coda_mem_cursor_read_uint8_array+0x64c>
    2818:	add	r5, r5, #1
    281c:	cmp	r4, r5
    2820:	beq	2854 <coda_mem_cursor_read_uint8_array+0x67c>
    2824:	add	r1, r9, r5
    2828:	mov	r0, sl
    282c:	bl	0 <coda_ascii_cursor_read_uint8>
    2830:	cmp	r0, #0
    2834:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    2838:	cmp	r5, r7
    283c:	bge	2818 <coda_mem_cursor_read_uint8_array+0x640>
    2840:	mov	r0, sl
    2844:	bl	0 <coda_cursor_goto_next_array_element>
    2848:	cmp	r0, #0
    284c:	beq	2818 <coda_mem_cursor_read_uint8_array+0x640>
    2850:	b	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    2854:	cmp	r8, #0
    2858:	beq	2950 <coda_mem_cursor_read_uint8_array+0x778>
    285c:	mov	r0, r6
    2860:	mov	r1, r9
    2864:	mov	r2, #1
    2868:	bl	1c78 <transpose_array>
    286c:	mov	r1, r0
    2870:	mvn	r0, #0
    2874:	cmp	r1, #0
    2878:	bne	2948 <coda_mem_cursor_read_uint8_array+0x770>
    287c:	b	2950 <coda_mem_cursor_read_uint8_array+0x778>
    2880:	sub	r6, r3, ip
    2884:	mov	r3, #0
    2888:	mov	r5, #64	; 0x40
    288c:	mov	r7, r4
    2890:	vld1.32	{d18-d19}, [r7], r5
    2894:	add	r1, r4, #16
    2898:	add	r2, r4, #32
    289c:	subs	r6, r6, #4
    28a0:	add	r3, r3, #16
    28a4:	vld1.32	{d20-d21}, [r1]
    28a8:	add	r1, r4, #48	; 0x30
    28ac:	mov	r4, r7
    28b0:	vmul.i32	q8, q9, q8
    28b4:	vld1.32	{d18-d19}, [r2]
    28b8:	vmul.i32	q8, q10, q8
    28bc:	vld1.32	{d20-d21}, [r1]
    28c0:	vmul.i32	q8, q9, q8
    28c4:	vmul.i32	q8, q10, q8
    28c8:	bne	2890 <coda_mem_cursor_read_uint8_array+0x6b8>
    28cc:	cmp	ip, #0
    28d0:	beq	28f0 <coda_mem_cursor_read_uint8_array+0x718>
    28d4:	add	r1, sp, #44	; 0x2c
    28d8:	rsb	r2, ip, #0
    28dc:	add	r3, r1, r3, lsl #2
    28e0:	vld1.32	{d18-d19}, [r3]!
    28e4:	adds	r2, r2, #1
    28e8:	vmul.i32	q8, q9, q8
    28ec:	bcc	28e0 <coda_mem_cursor_read_uint8_array+0x708>
    28f0:	vext.8	q9, q8, q8, #8
    28f4:	cmp	r0, lr
    28f8:	vmul.i32	q0, q8, q9
    28fc:	vmul.i32	q8, q0, d0[1]
    2900:	vmov.32	r4, d16[0]
    2904:	beq	2924 <coda_mem_cursor_read_uint8_array+0x74c>
    2908:	add	r1, sp, #44	; 0x2c
    290c:	sub	r0, r0, lr
    2910:	add	r2, r1, lr, lsl #2
    2914:	ldr	r1, [r2], #4
    2918:	subs	r0, r0, #1
    291c:	mul	r4, r1, r4
    2920:	bne	2914 <coda_mem_cursor_read_uint8_array+0x73c>
    2924:	cmp	r4, #1
    2928:	blt	2950 <coda_mem_cursor_read_uint8_array+0x778>
    292c:	add	r0, sp, #80	; 0x50
    2930:	mov	r1, #0
    2934:	mov	r6, #0
    2938:	bl	0 <coda_cursor_goto_array_element_by_index>
    293c:	cmp	r0, #0
    2940:	beq	295c <coda_mem_cursor_read_uint8_array+0x784>
    2944:	mvn	r0, #0
    2948:	sub	sp, fp, #28
    294c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2950:	mov	r0, #0
    2954:	sub	sp, fp, #28
    2958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    295c:	sub	r7, r4, #1
    2960:	add	r5, sp, #80	; 0x50
    2964:	b	2978 <coda_mem_cursor_read_uint8_array+0x7a0>
    2968:	add	r6, r6, #1
    296c:	mov	r0, #0
    2970:	cmp	r4, r6
    2974:	beq	2948 <coda_mem_cursor_read_uint8_array+0x770>
    2978:	add	r1, r9, r6
    297c:	mov	r0, r5
    2980:	bl	0 <coda_bin_cursor_read_uint8>
    2984:	cmp	r0, #0
    2988:	bne	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    298c:	cmp	r6, r7
    2990:	bge	2968 <coda_mem_cursor_read_uint8_array+0x790>
    2994:	mov	r0, r5
    2998:	bl	0 <coda_cursor_goto_next_array_element>
    299c:	cmp	r0, #0
    29a0:	beq	2968 <coda_mem_cursor_read_uint8_array+0x790>
    29a4:	b	2944 <coda_mem_cursor_read_uint8_array+0x76c>
    29a8:	movw	r0, #0
    29ac:	movw	r1, #0
    29b0:	movw	r3, #0
    29b4:	movw	r2, #682	; 0x2aa
    29b8:	movt	r0, #0
    29bc:	b	29d4 <coda_mem_cursor_read_uint8_array+0x7fc>
    29c0:	movw	r0, #0
    29c4:	movw	r1, #0
    29c8:	movw	r3, #0
    29cc:	mov	r2, #688	; 0x2b0
    29d0:	movt	r0, #0
    29d4:	movt	r1, #0
    29d8:	movt	r3, #0
    29dc:	bl	0 <__assert_fail>

000029e0 <coda_mem_cursor_read_int16_array>:
    29e0:	push	{r4, r5, r6, r7, fp, lr}
    29e4:	add	fp, sp, #16
    29e8:	sub	sp, sp, #8
    29ec:	mov	r5, r0
    29f0:	ldr	r0, [r0, #4]
    29f4:	mov	r4, r1
    29f8:	mov	r6, r2
    29fc:	add	r0, r5, r0, lsl #4
    2a00:	ldr	r0, [r0, #-8]
    2a04:	ldr	r1, [r0, #8]
    2a08:	cmp	r1, #2
    2a0c:	beq	2a28 <coda_mem_cursor_read_int16_array+0x48>
    2a10:	cmp	r1, #1
    2a14:	bne	2ac8 <coda_mem_cursor_read_int16_array+0xe8>
    2a18:	movw	r1, #0
    2a1c:	str	r6, [sp]
    2a20:	movt	r1, #0
    2a24:	b	2a50 <coda_mem_cursor_read_int16_array+0x70>
    2a28:	ldr	r0, [r0, #4]
    2a2c:	ldr	r0, [r0, #40]	; 0x28
    2a30:	ldr	r0, [r0]
    2a34:	cmp	r0, #0
    2a38:	beq	2a68 <coda_mem_cursor_read_int16_array+0x88>
    2a3c:	cmp	r0, #1
    2a40:	bne	2ae0 <coda_mem_cursor_read_int16_array+0x100>
    2a44:	movw	r1, #0
    2a48:	str	r6, [sp]
    2a4c:	movt	r1, #0
    2a50:	mov	r0, r5
    2a54:	mov	r2, r4
    2a58:	mov	r3, #2
    2a5c:	bl	1950 <read_array>
    2a60:	sub	sp, fp, #16
    2a64:	pop	{r4, r5, r6, r7, fp, pc}
    2a68:	movw	r1, #0
    2a6c:	mov	r0, #0
    2a70:	mov	r2, r4
    2a74:	mov	r3, #2
    2a78:	movt	r1, #0
    2a7c:	str	r0, [sp]
    2a80:	mov	r0, r5
    2a84:	bl	1950 <read_array>
    2a88:	mvn	r7, #0
    2a8c:	cmp	r0, #0
    2a90:	bne	2abc <coda_mem_cursor_read_int16_array+0xdc>
    2a94:	cmp	r6, #0
    2a98:	beq	2ab8 <coda_mem_cursor_read_int16_array+0xd8>
    2a9c:	mov	r0, r5
    2aa0:	mov	r1, r4
    2aa4:	mov	r2, #2
    2aa8:	bl	1c78 <transpose_array>
    2aac:	cmp	r0, #0
    2ab0:	moveq	r7, #0
    2ab4:	b	2abc <coda_mem_cursor_read_int16_array+0xdc>
    2ab8:	mov	r7, #0
    2abc:	mov	r0, r7
    2ac0:	sub	sp, fp, #16
    2ac4:	pop	{r4, r5, r6, r7, fp, pc}
    2ac8:	movw	r0, #0
    2acc:	movw	r1, #0
    2ad0:	movw	r3, #0
    2ad4:	movw	r2, #713	; 0x2c9
    2ad8:	movt	r0, #0
    2adc:	b	2af4 <coda_mem_cursor_read_int16_array+0x114>
    2ae0:	movw	r0, #0
    2ae4:	movw	r1, #0
    2ae8:	movw	r3, #0
    2aec:	movw	r2, #719	; 0x2cf
    2af0:	movt	r0, #0
    2af4:	movt	r1, #0
    2af8:	movt	r3, #0
    2afc:	bl	0 <__assert_fail>

00002b00 <coda_mem_cursor_read_uint16_array>:
    2b00:	push	{r4, r5, r6, r7, fp, lr}
    2b04:	add	fp, sp, #16
    2b08:	sub	sp, sp, #8
    2b0c:	mov	r5, r0
    2b10:	ldr	r0, [r0, #4]
    2b14:	mov	r4, r1
    2b18:	mov	r6, r2
    2b1c:	add	r0, r5, r0, lsl #4
    2b20:	ldr	r0, [r0, #-8]
    2b24:	ldr	r1, [r0, #8]
    2b28:	cmp	r1, #2
    2b2c:	beq	2b48 <coda_mem_cursor_read_uint16_array+0x48>
    2b30:	cmp	r1, #1
    2b34:	bne	2be8 <coda_mem_cursor_read_uint16_array+0xe8>
    2b38:	movw	r1, #0
    2b3c:	str	r6, [sp]
    2b40:	movt	r1, #0
    2b44:	b	2b70 <coda_mem_cursor_read_uint16_array+0x70>
    2b48:	ldr	r0, [r0, #4]
    2b4c:	ldr	r0, [r0, #40]	; 0x28
    2b50:	ldr	r0, [r0]
    2b54:	cmp	r0, #0
    2b58:	beq	2b88 <coda_mem_cursor_read_uint16_array+0x88>
    2b5c:	cmp	r0, #1
    2b60:	bne	2c00 <coda_mem_cursor_read_uint16_array+0x100>
    2b64:	movw	r1, #0
    2b68:	str	r6, [sp]
    2b6c:	movt	r1, #0
    2b70:	mov	r0, r5
    2b74:	mov	r2, r4
    2b78:	mov	r3, #2
    2b7c:	bl	1950 <read_array>
    2b80:	sub	sp, fp, #16
    2b84:	pop	{r4, r5, r6, r7, fp, pc}
    2b88:	movw	r1, #0
    2b8c:	mov	r0, #0
    2b90:	mov	r2, r4
    2b94:	mov	r3, #2
    2b98:	movt	r1, #0
    2b9c:	str	r0, [sp]
    2ba0:	mov	r0, r5
    2ba4:	bl	1950 <read_array>
    2ba8:	mvn	r7, #0
    2bac:	cmp	r0, #0
    2bb0:	bne	2bdc <coda_mem_cursor_read_uint16_array+0xdc>
    2bb4:	cmp	r6, #0
    2bb8:	beq	2bd8 <coda_mem_cursor_read_uint16_array+0xd8>
    2bbc:	mov	r0, r5
    2bc0:	mov	r1, r4
    2bc4:	mov	r2, #2
    2bc8:	bl	1c78 <transpose_array>
    2bcc:	cmp	r0, #0
    2bd0:	moveq	r7, #0
    2bd4:	b	2bdc <coda_mem_cursor_read_uint16_array+0xdc>
    2bd8:	mov	r7, #0
    2bdc:	mov	r0, r7
    2be0:	sub	sp, fp, #16
    2be4:	pop	{r4, r5, r6, r7, fp, pc}
    2be8:	movw	r0, #0
    2bec:	movw	r1, #0
    2bf0:	movw	r3, #0
    2bf4:	mov	r2, #744	; 0x2e8
    2bf8:	movt	r0, #0
    2bfc:	b	2c14 <coda_mem_cursor_read_uint16_array+0x114>
    2c00:	movw	r0, #0
    2c04:	movw	r1, #0
    2c08:	movw	r3, #0
    2c0c:	movw	r2, #750	; 0x2ee
    2c10:	movt	r0, #0
    2c14:	movt	r1, #0
    2c18:	movt	r3, #0
    2c1c:	bl	0 <__assert_fail>

00002c20 <coda_mem_cursor_read_int32_array>:
    2c20:	push	{r4, r5, r6, r7, fp, lr}
    2c24:	add	fp, sp, #16
    2c28:	sub	sp, sp, #8
    2c2c:	mov	r5, r0
    2c30:	ldr	r0, [r0, #4]
    2c34:	mov	r4, r1
    2c38:	mov	r6, r2
    2c3c:	add	r0, r5, r0, lsl #4
    2c40:	ldr	r0, [r0, #-8]
    2c44:	ldr	r1, [r0, #8]
    2c48:	cmp	r1, #2
    2c4c:	beq	2c68 <coda_mem_cursor_read_int32_array+0x48>
    2c50:	cmp	r1, #1
    2c54:	bne	2d08 <coda_mem_cursor_read_int32_array+0xe8>
    2c58:	movw	r1, #0
    2c5c:	str	r6, [sp]
    2c60:	movt	r1, #0
    2c64:	b	2c90 <coda_mem_cursor_read_int32_array+0x70>
    2c68:	ldr	r0, [r0, #4]
    2c6c:	ldr	r0, [r0, #40]	; 0x28
    2c70:	ldr	r0, [r0]
    2c74:	cmp	r0, #0
    2c78:	beq	2ca8 <coda_mem_cursor_read_int32_array+0x88>
    2c7c:	cmp	r0, #1
    2c80:	bne	2d20 <coda_mem_cursor_read_int32_array+0x100>
    2c84:	movw	r1, #0
    2c88:	str	r6, [sp]
    2c8c:	movt	r1, #0
    2c90:	mov	r0, r5
    2c94:	mov	r2, r4
    2c98:	mov	r3, #4
    2c9c:	bl	1950 <read_array>
    2ca0:	sub	sp, fp, #16
    2ca4:	pop	{r4, r5, r6, r7, fp, pc}
    2ca8:	movw	r1, #0
    2cac:	mov	r0, #0
    2cb0:	mov	r2, r4
    2cb4:	mov	r3, #4
    2cb8:	movt	r1, #0
    2cbc:	str	r0, [sp]
    2cc0:	mov	r0, r5
    2cc4:	bl	1950 <read_array>
    2cc8:	mvn	r7, #0
    2ccc:	cmp	r0, #0
    2cd0:	bne	2cfc <coda_mem_cursor_read_int32_array+0xdc>
    2cd4:	cmp	r6, #0
    2cd8:	beq	2cf8 <coda_mem_cursor_read_int32_array+0xd8>
    2cdc:	mov	r0, r5
    2ce0:	mov	r1, r4
    2ce4:	mov	r2, #4
    2ce8:	bl	1c78 <transpose_array>
    2cec:	cmp	r0, #0
    2cf0:	moveq	r7, #0
    2cf4:	b	2cfc <coda_mem_cursor_read_int32_array+0xdc>
    2cf8:	mov	r7, #0
    2cfc:	mov	r0, r7
    2d00:	sub	sp, fp, #16
    2d04:	pop	{r4, r5, r6, r7, fp, pc}
    2d08:	movw	r0, #0
    2d0c:	movw	r1, #0
    2d10:	movw	r3, #0
    2d14:	movw	r2, #775	; 0x307
    2d18:	movt	r0, #0
    2d1c:	b	2d34 <coda_mem_cursor_read_int32_array+0x114>
    2d20:	movw	r0, #0
    2d24:	movw	r1, #0
    2d28:	movw	r3, #0
    2d2c:	movw	r2, #781	; 0x30d
    2d30:	movt	r0, #0
    2d34:	movt	r1, #0
    2d38:	movt	r3, #0
    2d3c:	bl	0 <__assert_fail>

00002d40 <coda_mem_cursor_read_uint32_array>:
    2d40:	push	{r4, r5, r6, r7, fp, lr}
    2d44:	add	fp, sp, #16
    2d48:	sub	sp, sp, #8
    2d4c:	mov	r5, r0
    2d50:	ldr	r0, [r0, #4]
    2d54:	mov	r4, r1
    2d58:	mov	r6, r2
    2d5c:	add	r0, r5, r0, lsl #4
    2d60:	ldr	r0, [r0, #-8]
    2d64:	ldr	r1, [r0, #8]
    2d68:	cmp	r1, #2
    2d6c:	beq	2d88 <coda_mem_cursor_read_uint32_array+0x48>
    2d70:	cmp	r1, #1
    2d74:	bne	2e28 <coda_mem_cursor_read_uint32_array+0xe8>
    2d78:	movw	r1, #0
    2d7c:	str	r6, [sp]
    2d80:	movt	r1, #0
    2d84:	b	2db0 <coda_mem_cursor_read_uint32_array+0x70>
    2d88:	ldr	r0, [r0, #4]
    2d8c:	ldr	r0, [r0, #40]	; 0x28
    2d90:	ldr	r0, [r0]
    2d94:	cmp	r0, #0
    2d98:	beq	2dc8 <coda_mem_cursor_read_uint32_array+0x88>
    2d9c:	cmp	r0, #1
    2da0:	bne	2e40 <coda_mem_cursor_read_uint32_array+0x100>
    2da4:	movw	r1, #0
    2da8:	str	r6, [sp]
    2dac:	movt	r1, #0
    2db0:	mov	r0, r5
    2db4:	mov	r2, r4
    2db8:	mov	r3, #4
    2dbc:	bl	1950 <read_array>
    2dc0:	sub	sp, fp, #16
    2dc4:	pop	{r4, r5, r6, r7, fp, pc}
    2dc8:	movw	r1, #0
    2dcc:	mov	r0, #0
    2dd0:	mov	r2, r4
    2dd4:	mov	r3, #4
    2dd8:	movt	r1, #0
    2ddc:	str	r0, [sp]
    2de0:	mov	r0, r5
    2de4:	bl	1950 <read_array>
    2de8:	mvn	r7, #0
    2dec:	cmp	r0, #0
    2df0:	bne	2e1c <coda_mem_cursor_read_uint32_array+0xdc>
    2df4:	cmp	r6, #0
    2df8:	beq	2e18 <coda_mem_cursor_read_uint32_array+0xd8>
    2dfc:	mov	r0, r5
    2e00:	mov	r1, r4
    2e04:	mov	r2, #4
    2e08:	bl	1c78 <transpose_array>
    2e0c:	cmp	r0, #0
    2e10:	moveq	r7, #0
    2e14:	b	2e1c <coda_mem_cursor_read_uint32_array+0xdc>
    2e18:	mov	r7, #0
    2e1c:	mov	r0, r7
    2e20:	sub	sp, fp, #16
    2e24:	pop	{r4, r5, r6, r7, fp, pc}
    2e28:	movw	r0, #0
    2e2c:	movw	r1, #0
    2e30:	movw	r3, #0
    2e34:	movw	r2, #806	; 0x326
    2e38:	movt	r0, #0
    2e3c:	b	2e54 <coda_mem_cursor_read_uint32_array+0x114>
    2e40:	movw	r0, #0
    2e44:	movw	r1, #0
    2e48:	movw	r3, #0
    2e4c:	mov	r2, #812	; 0x32c
    2e50:	movt	r0, #0
    2e54:	movt	r1, #0
    2e58:	movt	r3, #0
    2e5c:	bl	0 <__assert_fail>

00002e60 <coda_mem_cursor_read_int64_array>:
    2e60:	push	{r4, r5, r6, r7, fp, lr}
    2e64:	add	fp, sp, #16
    2e68:	sub	sp, sp, #8
    2e6c:	mov	r5, r0
    2e70:	ldr	r0, [r0, #4]
    2e74:	mov	r4, r1
    2e78:	mov	r6, r2
    2e7c:	add	r0, r5, r0, lsl #4
    2e80:	ldr	r0, [r0, #-8]
    2e84:	ldr	r1, [r0, #8]
    2e88:	cmp	r1, #2
    2e8c:	beq	2ea8 <coda_mem_cursor_read_int64_array+0x48>
    2e90:	cmp	r1, #1
    2e94:	bne	2f48 <coda_mem_cursor_read_int64_array+0xe8>
    2e98:	movw	r1, #0
    2e9c:	str	r6, [sp]
    2ea0:	movt	r1, #0
    2ea4:	b	2ed0 <coda_mem_cursor_read_int64_array+0x70>
    2ea8:	ldr	r0, [r0, #4]
    2eac:	ldr	r0, [r0, #40]	; 0x28
    2eb0:	ldr	r0, [r0]
    2eb4:	cmp	r0, #0
    2eb8:	beq	2ee8 <coda_mem_cursor_read_int64_array+0x88>
    2ebc:	cmp	r0, #1
    2ec0:	bne	2f60 <coda_mem_cursor_read_int64_array+0x100>
    2ec4:	movw	r1, #0
    2ec8:	str	r6, [sp]
    2ecc:	movt	r1, #0
    2ed0:	mov	r0, r5
    2ed4:	mov	r2, r4
    2ed8:	mov	r3, #8
    2edc:	bl	1950 <read_array>
    2ee0:	sub	sp, fp, #16
    2ee4:	pop	{r4, r5, r6, r7, fp, pc}
    2ee8:	movw	r1, #0
    2eec:	mov	r0, #0
    2ef0:	mov	r2, r4
    2ef4:	mov	r3, #8
    2ef8:	movt	r1, #0
    2efc:	str	r0, [sp]
    2f00:	mov	r0, r5
    2f04:	bl	1950 <read_array>
    2f08:	mvn	r7, #0
    2f0c:	cmp	r0, #0
    2f10:	bne	2f3c <coda_mem_cursor_read_int64_array+0xdc>
    2f14:	cmp	r6, #0
    2f18:	beq	2f38 <coda_mem_cursor_read_int64_array+0xd8>
    2f1c:	mov	r0, r5
    2f20:	mov	r1, r4
    2f24:	mov	r2, #8
    2f28:	bl	1c78 <transpose_array>
    2f2c:	cmp	r0, #0
    2f30:	moveq	r7, #0
    2f34:	b	2f3c <coda_mem_cursor_read_int64_array+0xdc>
    2f38:	mov	r7, #0
    2f3c:	mov	r0, r7
    2f40:	sub	sp, fp, #16
    2f44:	pop	{r4, r5, r6, r7, fp, pc}
    2f48:	movw	r0, #0
    2f4c:	movw	r1, #0
    2f50:	movw	r3, #0
    2f54:	movw	r2, #837	; 0x345
    2f58:	movt	r0, #0
    2f5c:	b	2f74 <coda_mem_cursor_read_int64_array+0x114>
    2f60:	movw	r0, #0
    2f64:	movw	r1, #0
    2f68:	movw	r3, #0
    2f6c:	movw	r2, #843	; 0x34b
    2f70:	movt	r0, #0
    2f74:	movt	r1, #0
    2f78:	movt	r3, #0
    2f7c:	bl	0 <__assert_fail>

00002f80 <coda_mem_cursor_read_uint64_array>:
    2f80:	push	{r4, r5, r6, r7, fp, lr}
    2f84:	add	fp, sp, #16
    2f88:	sub	sp, sp, #8
    2f8c:	mov	r5, r0
    2f90:	ldr	r0, [r0, #4]
    2f94:	mov	r4, r1
    2f98:	mov	r6, r2
    2f9c:	add	r0, r5, r0, lsl #4
    2fa0:	ldr	r0, [r0, #-8]
    2fa4:	ldr	r1, [r0, #8]
    2fa8:	cmp	r1, #2
    2fac:	beq	2fc8 <coda_mem_cursor_read_uint64_array+0x48>
    2fb0:	cmp	r1, #1
    2fb4:	bne	3068 <coda_mem_cursor_read_uint64_array+0xe8>
    2fb8:	movw	r1, #0
    2fbc:	str	r6, [sp]
    2fc0:	movt	r1, #0
    2fc4:	b	2ff0 <coda_mem_cursor_read_uint64_array+0x70>
    2fc8:	ldr	r0, [r0, #4]
    2fcc:	ldr	r0, [r0, #40]	; 0x28
    2fd0:	ldr	r0, [r0]
    2fd4:	cmp	r0, #0
    2fd8:	beq	3008 <coda_mem_cursor_read_uint64_array+0x88>
    2fdc:	cmp	r0, #1
    2fe0:	bne	3080 <coda_mem_cursor_read_uint64_array+0x100>
    2fe4:	movw	r1, #0
    2fe8:	str	r6, [sp]
    2fec:	movt	r1, #0
    2ff0:	mov	r0, r5
    2ff4:	mov	r2, r4
    2ff8:	mov	r3, #8
    2ffc:	bl	1950 <read_array>
    3000:	sub	sp, fp, #16
    3004:	pop	{r4, r5, r6, r7, fp, pc}
    3008:	movw	r1, #0
    300c:	mov	r0, #0
    3010:	mov	r2, r4
    3014:	mov	r3, #8
    3018:	movt	r1, #0
    301c:	str	r0, [sp]
    3020:	mov	r0, r5
    3024:	bl	1950 <read_array>
    3028:	mvn	r7, #0
    302c:	cmp	r0, #0
    3030:	bne	305c <coda_mem_cursor_read_uint64_array+0xdc>
    3034:	cmp	r6, #0
    3038:	beq	3058 <coda_mem_cursor_read_uint64_array+0xd8>
    303c:	mov	r0, r5
    3040:	mov	r1, r4
    3044:	mov	r2, #8
    3048:	bl	1c78 <transpose_array>
    304c:	cmp	r0, #0
    3050:	moveq	r7, #0
    3054:	b	305c <coda_mem_cursor_read_uint64_array+0xdc>
    3058:	mov	r7, #0
    305c:	mov	r0, r7
    3060:	sub	sp, fp, #16
    3064:	pop	{r4, r5, r6, r7, fp, pc}
    3068:	movw	r0, #0
    306c:	movw	r1, #0
    3070:	movw	r3, #0
    3074:	mov	r2, #868	; 0x364
    3078:	movt	r0, #0
    307c:	b	3094 <coda_mem_cursor_read_uint64_array+0x114>
    3080:	movw	r0, #0
    3084:	movw	r1, #0
    3088:	movw	r3, #0
    308c:	movw	r2, #874	; 0x36a
    3090:	movt	r0, #0
    3094:	movt	r1, #0
    3098:	movt	r3, #0
    309c:	bl	0 <__assert_fail>

000030a0 <coda_mem_cursor_read_float_array>:
    30a0:	push	{r4, r5, r6, r7, fp, lr}
    30a4:	add	fp, sp, #16
    30a8:	sub	sp, sp, #8
    30ac:	mov	r5, r0
    30b0:	ldr	r0, [r0, #4]
    30b4:	mov	r4, r1
    30b8:	mov	r6, r2
    30bc:	add	r0, r5, r0, lsl #4
    30c0:	ldr	r0, [r0, #-8]
    30c4:	ldr	r1, [r0, #8]
    30c8:	cmp	r1, #2
    30cc:	beq	30e8 <coda_mem_cursor_read_float_array+0x48>
    30d0:	cmp	r1, #1
    30d4:	bne	3188 <coda_mem_cursor_read_float_array+0xe8>
    30d8:	movw	r1, #0
    30dc:	str	r6, [sp]
    30e0:	movt	r1, #0
    30e4:	b	3110 <coda_mem_cursor_read_float_array+0x70>
    30e8:	ldr	r0, [r0, #4]
    30ec:	ldr	r0, [r0, #40]	; 0x28
    30f0:	ldr	r0, [r0]
    30f4:	cmp	r0, #0
    30f8:	beq	3128 <coda_mem_cursor_read_float_array+0x88>
    30fc:	cmp	r0, #1
    3100:	bne	31a0 <coda_mem_cursor_read_float_array+0x100>
    3104:	movw	r1, #0
    3108:	str	r6, [sp]
    310c:	movt	r1, #0
    3110:	mov	r0, r5
    3114:	mov	r2, r4
    3118:	mov	r3, #4
    311c:	bl	1950 <read_array>
    3120:	sub	sp, fp, #16
    3124:	pop	{r4, r5, r6, r7, fp, pc}
    3128:	movw	r1, #0
    312c:	mov	r0, #0
    3130:	mov	r2, r4
    3134:	mov	r3, #4
    3138:	movt	r1, #0
    313c:	str	r0, [sp]
    3140:	mov	r0, r5
    3144:	bl	1950 <read_array>
    3148:	mvn	r7, #0
    314c:	cmp	r0, #0
    3150:	bne	317c <coda_mem_cursor_read_float_array+0xdc>
    3154:	cmp	r6, #0
    3158:	beq	3178 <coda_mem_cursor_read_float_array+0xd8>
    315c:	mov	r0, r5
    3160:	mov	r1, r4
    3164:	mov	r2, #4
    3168:	bl	1c78 <transpose_array>
    316c:	cmp	r0, #0
    3170:	moveq	r7, #0
    3174:	b	317c <coda_mem_cursor_read_float_array+0xdc>
    3178:	mov	r7, #0
    317c:	mov	r0, r7
    3180:	sub	sp, fp, #16
    3184:	pop	{r4, r5, r6, r7, fp, pc}
    3188:	movw	r0, #0
    318c:	movw	r1, #0
    3190:	movw	r3, #0
    3194:	movw	r2, #899	; 0x383
    3198:	movt	r0, #0
    319c:	b	31b4 <coda_mem_cursor_read_float_array+0x114>
    31a0:	movw	r0, #0
    31a4:	movw	r1, #0
    31a8:	movw	r3, #0
    31ac:	movw	r2, #905	; 0x389
    31b0:	movt	r0, #0
    31b4:	movt	r1, #0
    31b8:	movt	r3, #0
    31bc:	bl	0 <__assert_fail>

000031c0 <coda_mem_cursor_read_double_array>:
    31c0:	push	{r4, r5, r6, r7, fp, lr}
    31c4:	add	fp, sp, #16
    31c8:	sub	sp, sp, #8
    31cc:	mov	r5, r0
    31d0:	ldr	r0, [r0, #4]
    31d4:	mov	r4, r1
    31d8:	mov	r6, r2
    31dc:	add	r0, r5, r0, lsl #4
    31e0:	ldr	r0, [r0, #-8]
    31e4:	ldr	r1, [r0, #8]
    31e8:	cmp	r1, #2
    31ec:	beq	3208 <coda_mem_cursor_read_double_array+0x48>
    31f0:	cmp	r1, #1
    31f4:	bne	32a8 <coda_mem_cursor_read_double_array+0xe8>
    31f8:	movw	r1, #0
    31fc:	str	r6, [sp]
    3200:	movt	r1, #0
    3204:	b	3230 <coda_mem_cursor_read_double_array+0x70>
    3208:	ldr	r0, [r0, #4]
    320c:	ldr	r0, [r0, #40]	; 0x28
    3210:	ldr	r0, [r0]
    3214:	cmp	r0, #0
    3218:	beq	3248 <coda_mem_cursor_read_double_array+0x88>
    321c:	cmp	r0, #1
    3220:	bne	32c0 <coda_mem_cursor_read_double_array+0x100>
    3224:	movw	r1, #0
    3228:	str	r6, [sp]
    322c:	movt	r1, #0
    3230:	mov	r0, r5
    3234:	mov	r2, r4
    3238:	mov	r3, #8
    323c:	bl	1950 <read_array>
    3240:	sub	sp, fp, #16
    3244:	pop	{r4, r5, r6, r7, fp, pc}
    3248:	movw	r1, #0
    324c:	mov	r0, #0
    3250:	mov	r2, r4
    3254:	mov	r3, #8
    3258:	movt	r1, #0
    325c:	str	r0, [sp]
    3260:	mov	r0, r5
    3264:	bl	1950 <read_array>
    3268:	mvn	r7, #0
    326c:	cmp	r0, #0
    3270:	bne	329c <coda_mem_cursor_read_double_array+0xdc>
    3274:	cmp	r6, #0
    3278:	beq	3298 <coda_mem_cursor_read_double_array+0xd8>
    327c:	mov	r0, r5
    3280:	mov	r1, r4
    3284:	mov	r2, #8
    3288:	bl	1c78 <transpose_array>
    328c:	cmp	r0, #0
    3290:	moveq	r7, #0
    3294:	b	329c <coda_mem_cursor_read_double_array+0xdc>
    3298:	mov	r7, #0
    329c:	mov	r0, r7
    32a0:	sub	sp, fp, #16
    32a4:	pop	{r4, r5, r6, r7, fp, pc}
    32a8:	movw	r0, #0
    32ac:	movw	r1, #0
    32b0:	movw	r3, #0
    32b4:	movw	r2, #930	; 0x3a2
    32b8:	movt	r0, #0
    32bc:	b	32d4 <coda_mem_cursor_read_double_array+0x114>
    32c0:	movw	r0, #0
    32c4:	movw	r1, #0
    32c8:	movw	r3, #0
    32cc:	mov	r2, #936	; 0x3a8
    32d0:	movt	r0, #0
    32d4:	movt	r1, #0
    32d8:	movt	r3, #0
    32dc:	bl	0 <__assert_fail>

000032e0 <coda_mem_cursor_read_char_array>:
    32e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32e4:	add	fp, sp, #28
    32e8:	sub	sp, sp, #604	; 0x25c
    32ec:	mov	r6, r0
    32f0:	ldr	r0, [r0, #4]
    32f4:	mov	r9, r1
    32f8:	mov	r8, r2
    32fc:	add	r0, r6, r0, lsl #4
    3300:	ldr	r0, [r0, #-8]
    3304:	ldr	r1, [r0, #8]
    3308:	cmp	r1, #2
    330c:	beq	3488 <coda_mem_cursor_read_char_array+0x1a8>
    3310:	cmp	r1, #1
    3314:	bne	3ab0 <coda_mem_cursor_read_char_array+0x7d0>
    3318:	add	r4, sp, #44	; 0x2c
    331c:	add	r1, sp, #76	; 0x4c
    3320:	mov	r0, r6
    3324:	mov	r2, r4
    3328:	bl	0 <coda_cursor_get_array_dim>
    332c:	cmp	r0, #0
    3330:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3334:	add	r0, sp, #80	; 0x50
    3338:	mov	r1, r6
    333c:	mov	r2, #520	; 0x208
    3340:	bl	0 <memcpy>
    3344:	ldr	r0, [sp, #76]	; 0x4c
    3348:	cmp	r8, #1
    334c:	bne	3660 <coda_mem_cursor_read_char_array+0x380>
    3350:	cmp	r0, #1
    3354:	ble	3660 <coda_mem_cursor_read_char_array+0x380>
    3358:	and	r6, r0, #1
    335c:	add	r8, sp, #8
    3360:	mov	r1, #1
    3364:	add	r2, r4, #4
    3368:	sub	r7, r6, r0
    336c:	add	r3, r8, #4
    3370:	str	r1, [sp, #8]
    3374:	ldr	r5, [r2, #-4]
    3378:	ldr	r4, [r2]
    337c:	adds	r7, r7, #2
    3380:	add	r2, r2, #8
    3384:	mul	r5, r5, r1
    3388:	mul	r1, r4, r5
    338c:	str	r5, [r3]
    3390:	str	r1, [r3, #4]
    3394:	add	r3, r3, #8
    3398:	bne	3374 <coda_mem_cursor_read_char_array+0x94>
    339c:	cmp	r6, #0
    33a0:	beq	33b0 <coda_mem_cursor_read_char_array+0xd0>
    33a4:	ldr	r2, [r2, #-4]
    33a8:	mul	r1, r2, r1
    33ac:	str	r1, [r3]
    33b0:	ldr	r7, [r8, r0, lsl #2]
    33b4:	cmp	r7, #1
    33b8:	blt	3a58 <coda_mem_cursor_read_char_array+0x778>
    33bc:	add	r0, r8, r0, lsl #2
    33c0:	mov	r1, #0
    33c4:	mov	r4, #0
    33c8:	ldr	r6, [r0, #-4]
    33cc:	add	r0, sp, #80	; 0x50
    33d0:	bl	0 <coda_cursor_goto_array_element_by_index>
    33d4:	cmp	r0, #0
    33d8:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    33dc:	sub	r0, r8, #4
    33e0:	add	r5, sp, #80	; 0x50
    33e4:	mov	sl, #0
    33e8:	str	r0, [sp, #4]
    33ec:	add	r1, r9, sl
    33f0:	mov	r0, r5
    33f4:	bl	0 <coda_cursor_read_char>
    33f8:	cmp	r0, #0
    33fc:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3400:	add	r4, r4, #1
    3404:	cmp	r4, r7
    3408:	bge	341c <coda_mem_cursor_read_char_array+0x13c>
    340c:	mov	r0, r5
    3410:	bl	0 <coda_cursor_goto_next_array_element>
    3414:	cmp	r0, #0
    3418:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    341c:	add	sl, sl, r6
    3420:	cmp	sl, r7
    3424:	blt	33ec <coda_mem_cursor_read_char_array+0x10c>
    3428:	cmp	r4, r7
    342c:	beq	3a58 <coda_mem_cursor_read_char_array+0x778>
    3430:	ldr	r1, [sp, #76]	; 0x4c
    3434:	add	r2, r8, r1, lsl #2
    3438:	ldr	r0, [r8, r1, lsl #2]
    343c:	ldr	r2, [r2, #-8]
    3440:	add	r2, r2, sl
    3444:	sub	sl, r2, r0
    3448:	subs	r0, r1, #3
    344c:	bmi	33ec <coda_mem_cursor_read_char_array+0x10c>
    3450:	ldr	r0, [sp, #4]
    3454:	add	r0, r0, r1, lsl #2
    3458:	sub	r1, r1, #2
    345c:	ldr	r2, [r0]
    3460:	cmp	sl, r2
    3464:	blt	33ec <coda_mem_cursor_read_char_array+0x10c>
    3468:	ldr	r3, [r0, #-8]
    346c:	sub	r2, sl, r2
    3470:	sub	r1, r1, #1
    3474:	sub	r0, r0, #4
    3478:	cmp	r1, #0
    347c:	add	sl, r3, r2
    3480:	bgt	345c <coda_mem_cursor_read_char_array+0x17c>
    3484:	b	33ec <coda_mem_cursor_read_char_array+0x10c>
    3488:	ldr	r0, [r0, #4]
    348c:	ldr	r0, [r0, #40]	; 0x28
    3490:	ldr	r0, [r0]
    3494:	cmp	r0, #0
    3498:	beq	3614 <coda_mem_cursor_read_char_array+0x334>
    349c:	cmp	r0, #1
    34a0:	bne	3ac8 <coda_mem_cursor_read_char_array+0x7e8>
    34a4:	add	r4, sp, #44	; 0x2c
    34a8:	add	r1, sp, #76	; 0x4c
    34ac:	mov	r0, r6
    34b0:	mov	r2, r4
    34b4:	bl	0 <coda_cursor_get_array_dim>
    34b8:	cmp	r0, #0
    34bc:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    34c0:	add	r0, sp, #80	; 0x50
    34c4:	mov	r1, r6
    34c8:	mov	r2, #520	; 0x208
    34cc:	bl	0 <memcpy>
    34d0:	ldr	r0, [sp, #76]	; 0x4c
    34d4:	cmp	r8, #1
    34d8:	bne	367c <coda_mem_cursor_read_char_array+0x39c>
    34dc:	cmp	r0, #1
    34e0:	ble	367c <coda_mem_cursor_read_char_array+0x39c>
    34e4:	and	r6, r0, #1
    34e8:	add	r8, sp, #8
    34ec:	mov	r1, #1
    34f0:	add	r2, r4, #4
    34f4:	sub	r7, r6, r0
    34f8:	add	r3, r8, #4
    34fc:	str	r1, [sp, #8]
    3500:	ldr	r5, [r2, #-4]
    3504:	ldr	r4, [r2]
    3508:	adds	r7, r7, #2
    350c:	add	r2, r2, #8
    3510:	mul	r5, r5, r1
    3514:	mul	r1, r4, r5
    3518:	str	r5, [r3]
    351c:	str	r1, [r3, #4]
    3520:	add	r3, r3, #8
    3524:	bne	3500 <coda_mem_cursor_read_char_array+0x220>
    3528:	cmp	r6, #0
    352c:	beq	353c <coda_mem_cursor_read_char_array+0x25c>
    3530:	ldr	r2, [r2, #-4]
    3534:	mul	r1, r2, r1
    3538:	str	r1, [r3]
    353c:	ldr	r7, [r8, r0, lsl #2]
    3540:	cmp	r7, #1
    3544:	blt	3a58 <coda_mem_cursor_read_char_array+0x778>
    3548:	add	r0, r8, r0, lsl #2
    354c:	mov	r1, #0
    3550:	mov	r4, #0
    3554:	ldr	r6, [r0, #-4]
    3558:	add	r0, sp, #80	; 0x50
    355c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3560:	cmp	r0, #0
    3564:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3568:	sub	r0, r8, #4
    356c:	add	r5, sp, #80	; 0x50
    3570:	mov	sl, #0
    3574:	str	r0, [sp, #4]
    3578:	add	r1, r9, sl
    357c:	mov	r0, r5
    3580:	bl	0 <coda_bin_cursor_read_char>
    3584:	cmp	r0, #0
    3588:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    358c:	add	r4, r4, #1
    3590:	cmp	r4, r7
    3594:	bge	35a8 <coda_mem_cursor_read_char_array+0x2c8>
    3598:	mov	r0, r5
    359c:	bl	0 <coda_cursor_goto_next_array_element>
    35a0:	cmp	r0, #0
    35a4:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    35a8:	add	sl, sl, r6
    35ac:	cmp	sl, r7
    35b0:	blt	3578 <coda_mem_cursor_read_char_array+0x298>
    35b4:	cmp	r4, r7
    35b8:	beq	3a58 <coda_mem_cursor_read_char_array+0x778>
    35bc:	ldr	r1, [sp, #76]	; 0x4c
    35c0:	add	r2, r8, r1, lsl #2
    35c4:	ldr	r0, [r8, r1, lsl #2]
    35c8:	ldr	r2, [r2, #-8]
    35cc:	add	r2, r2, sl
    35d0:	sub	sl, r2, r0
    35d4:	subs	r0, r1, #3
    35d8:	bmi	3578 <coda_mem_cursor_read_char_array+0x298>
    35dc:	ldr	r0, [sp, #4]
    35e0:	add	r0, r0, r1, lsl #2
    35e4:	sub	r1, r1, #2
    35e8:	ldr	r2, [r0]
    35ec:	cmp	sl, r2
    35f0:	blt	3578 <coda_mem_cursor_read_char_array+0x298>
    35f4:	ldr	r3, [r0, #-8]
    35f8:	sub	r2, sl, r2
    35fc:	sub	r1, r1, #1
    3600:	sub	r0, r0, #4
    3604:	cmp	r1, #0
    3608:	add	sl, r3, r2
    360c:	bgt	35e8 <coda_mem_cursor_read_char_array+0x308>
    3610:	b	3578 <coda_mem_cursor_read_char_array+0x298>
    3614:	add	r4, sp, #44	; 0x2c
    3618:	add	r1, sp, #76	; 0x4c
    361c:	mov	r0, r6
    3620:	mov	r2, r4
    3624:	bl	0 <coda_cursor_get_array_dim>
    3628:	cmp	r0, #0
    362c:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3630:	add	r0, sp, #80	; 0x50
    3634:	mov	r1, r6
    3638:	mov	r2, #520	; 0x208
    363c:	bl	0 <memcpy>
    3640:	ldr	sl, [sp, #76]	; 0x4c
    3644:	cmp	sl, #1
    3648:	blt	36a0 <coda_mem_cursor_read_char_array+0x3c0>
    364c:	cmp	sl, #4
    3650:	bcs	36d8 <coda_mem_cursor_read_char_array+0x3f8>
    3654:	mov	r4, #1
    3658:	mov	lr, #0
    365c:	b	38d8 <coda_mem_cursor_read_char_array+0x5f8>
    3660:	cmp	r0, #1
    3664:	blt	3698 <coda_mem_cursor_read_char_array+0x3b8>
    3668:	cmp	r0, #4
    366c:	bcs	36a8 <coda_mem_cursor_read_char_array+0x3c8>
    3670:	mov	r4, #1
    3674:	mov	lr, #0
    3678:	b	3798 <coda_mem_cursor_read_char_array+0x4b8>
    367c:	cmp	r0, #1
    3680:	blt	3708 <coda_mem_cursor_read_char_array+0x428>
    3684:	cmp	r0, #4
    3688:	bcs	3820 <coda_mem_cursor_read_char_array+0x540>
    368c:	mov	r4, #1
    3690:	mov	lr, #0
    3694:	b	3a10 <coda_mem_cursor_read_char_array+0x730>
    3698:	mov	r4, #1
    369c:	b	37bc <coda_mem_cursor_read_char_array+0x4dc>
    36a0:	mov	r4, #1
    36a4:	b	38fc <coda_mem_cursor_read_char_array+0x61c>
    36a8:	bic	lr, r0, #3
    36ac:	mov	r2, #1
    36b0:	vmov.i32	q8, #1	; 0x00000001
    36b4:	sub	r7, lr, #4
    36b8:	add	r3, r2, r7, lsr #2
    36bc:	cmp	r7, #12
    36c0:	and	ip, r3, #3
    36c4:	bcs	3710 <coda_mem_cursor_read_char_array+0x430>
    36c8:	mov	r3, #0
    36cc:	cmp	ip, #0
    36d0:	bne	3764 <coda_mem_cursor_read_char_array+0x484>
    36d4:	b	3780 <coda_mem_cursor_read_char_array+0x4a0>
    36d8:	bic	lr, sl, #3
    36dc:	mov	r2, #1
    36e0:	vmov.i32	q8, #1	; 0x00000001
    36e4:	sub	r3, lr, #4
    36e8:	add	r2, r2, r3, lsr #2
    36ec:	cmp	r3, #12
    36f0:	and	ip, r2, #3
    36f4:	bcs	3850 <coda_mem_cursor_read_char_array+0x570>
    36f8:	mov	r3, #0
    36fc:	cmp	ip, #0
    3700:	bne	38a4 <coda_mem_cursor_read_char_array+0x5c4>
    3704:	b	38c0 <coda_mem_cursor_read_char_array+0x5e0>
    3708:	mov	r4, #1
    370c:	b	3a34 <coda_mem_cursor_read_char_array+0x754>
    3710:	sub	r6, r3, ip
    3714:	mov	r3, #0
    3718:	mov	r5, #64	; 0x40
    371c:	mov	r7, r4
    3720:	vld1.32	{d18-d19}, [r7], r5
    3724:	add	r1, r4, #16
    3728:	add	r2, r4, #32
    372c:	subs	r6, r6, #4
    3730:	add	r3, r3, #16
    3734:	vld1.32	{d20-d21}, [r1]
    3738:	add	r1, r4, #48	; 0x30
    373c:	mov	r4, r7
    3740:	vmul.i32	q8, q9, q8
    3744:	vld1.32	{d18-d19}, [r2]
    3748:	vmul.i32	q8, q10, q8
    374c:	vld1.32	{d20-d21}, [r1]
    3750:	vmul.i32	q8, q9, q8
    3754:	vmul.i32	q8, q10, q8
    3758:	bne	3720 <coda_mem_cursor_read_char_array+0x440>
    375c:	cmp	ip, #0
    3760:	beq	3780 <coda_mem_cursor_read_char_array+0x4a0>
    3764:	add	r1, sp, #44	; 0x2c
    3768:	rsb	r2, ip, #0
    376c:	add	r3, r1, r3, lsl #2
    3770:	vld1.32	{d18-d19}, [r3]!
    3774:	adds	r2, r2, #1
    3778:	vmul.i32	q8, q9, q8
    377c:	bcc	3770 <coda_mem_cursor_read_char_array+0x490>
    3780:	vext.8	q9, q8, q8, #8
    3784:	cmp	r0, lr
    3788:	vmul.i32	q0, q8, q9
    378c:	vmul.i32	q8, q0, d0[1]
    3790:	vmov.32	r4, d16[0]
    3794:	beq	37b4 <coda_mem_cursor_read_char_array+0x4d4>
    3798:	add	r1, sp, #44	; 0x2c
    379c:	sub	r0, r0, lr
    37a0:	add	r2, r1, lr, lsl #2
    37a4:	ldr	r1, [r2], #4
    37a8:	subs	r0, r0, #1
    37ac:	mul	r4, r1, r4
    37b0:	bne	37a4 <coda_mem_cursor_read_char_array+0x4c4>
    37b4:	cmp	r4, #1
    37b8:	blt	3a58 <coda_mem_cursor_read_char_array+0x778>
    37bc:	add	r0, sp, #80	; 0x50
    37c0:	mov	r1, #0
    37c4:	mov	r6, #0
    37c8:	bl	0 <coda_cursor_goto_array_element_by_index>
    37cc:	cmp	r0, #0
    37d0:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    37d4:	sub	r7, r4, #1
    37d8:	add	r5, sp, #80	; 0x50
    37dc:	b	37f0 <coda_mem_cursor_read_char_array+0x510>
    37e0:	add	r6, r6, #1
    37e4:	mov	r0, #0
    37e8:	cmp	r4, r6
    37ec:	beq	3a50 <coda_mem_cursor_read_char_array+0x770>
    37f0:	add	r1, r9, r6
    37f4:	mov	r0, r5
    37f8:	bl	0 <coda_cursor_read_char>
    37fc:	cmp	r0, #0
    3800:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3804:	cmp	r6, r7
    3808:	bge	37e0 <coda_mem_cursor_read_char_array+0x500>
    380c:	mov	r0, r5
    3810:	bl	0 <coda_cursor_goto_next_array_element>
    3814:	cmp	r0, #0
    3818:	beq	37e0 <coda_mem_cursor_read_char_array+0x500>
    381c:	b	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3820:	bic	lr, r0, #3
    3824:	mov	r2, #1
    3828:	vmov.i32	q8, #1	; 0x00000001
    382c:	sub	r7, lr, #4
    3830:	add	r3, r2, r7, lsr #2
    3834:	cmp	r7, #12
    3838:	and	ip, r3, #3
    383c:	bcs	3988 <coda_mem_cursor_read_char_array+0x6a8>
    3840:	mov	r3, #0
    3844:	cmp	ip, #0
    3848:	bne	39dc <coda_mem_cursor_read_char_array+0x6fc>
    384c:	b	39f8 <coda_mem_cursor_read_char_array+0x718>
    3850:	sub	r5, r2, ip
    3854:	mov	r3, #0
    3858:	mov	r2, #64	; 0x40
    385c:	mov	r7, r4
    3860:	vld1.32	{d18-d19}, [r7], r2
    3864:	add	r0, r4, #16
    3868:	add	r1, r4, #32
    386c:	subs	r5, r5, #4
    3870:	add	r3, r3, #16
    3874:	vld1.32	{d20-d21}, [r0]
    3878:	add	r0, r4, #48	; 0x30
    387c:	mov	r4, r7
    3880:	vmul.i32	q8, q9, q8
    3884:	vld1.32	{d18-d19}, [r1]
    3888:	vmul.i32	q8, q10, q8
    388c:	vld1.32	{d20-d21}, [r0]
    3890:	vmul.i32	q8, q9, q8
    3894:	vmul.i32	q8, q10, q8
    3898:	bne	3860 <coda_mem_cursor_read_char_array+0x580>
    389c:	cmp	ip, #0
    38a0:	beq	38c0 <coda_mem_cursor_read_char_array+0x5e0>
    38a4:	add	r0, sp, #44	; 0x2c
    38a8:	add	r2, r0, r3, lsl #2
    38ac:	rsb	r3, ip, #0
    38b0:	vld1.32	{d18-d19}, [r2]!
    38b4:	adds	r3, r3, #1
    38b8:	vmul.i32	q8, q9, q8
    38bc:	bcc	38b0 <coda_mem_cursor_read_char_array+0x5d0>
    38c0:	vext.8	q9, q8, q8, #8
    38c4:	cmp	sl, lr
    38c8:	vmul.i32	q0, q8, q9
    38cc:	vmul.i32	q8, q0, d0[1]
    38d0:	vmov.32	r4, d16[0]
    38d4:	beq	38f4 <coda_mem_cursor_read_char_array+0x614>
    38d8:	add	r0, sp, #44	; 0x2c
    38dc:	add	r2, r0, lr, lsl #2
    38e0:	sub	r0, sl, lr
    38e4:	ldr	r1, [r2], #4
    38e8:	subs	r0, r0, #1
    38ec:	mul	r4, r1, r4
    38f0:	bne	38e4 <coda_mem_cursor_read_char_array+0x604>
    38f4:	cmp	r4, #1
    38f8:	blt	395c <coda_mem_cursor_read_char_array+0x67c>
    38fc:	add	r0, sp, #80	; 0x50
    3900:	mov	r1, #0
    3904:	mov	r5, #0
    3908:	bl	0 <coda_cursor_goto_array_element_by_index>
    390c:	cmp	r0, #0
    3910:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3914:	sub	r7, r4, #1
    3918:	add	sl, sp, #80	; 0x50
    391c:	b	392c <coda_mem_cursor_read_char_array+0x64c>
    3920:	add	r5, r5, #1
    3924:	cmp	r4, r5
    3928:	beq	395c <coda_mem_cursor_read_char_array+0x67c>
    392c:	add	r1, r9, r5
    3930:	mov	r0, sl
    3934:	bl	0 <coda_ascii_cursor_read_char>
    3938:	cmp	r0, #0
    393c:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3940:	cmp	r5, r7
    3944:	bge	3920 <coda_mem_cursor_read_char_array+0x640>
    3948:	mov	r0, sl
    394c:	bl	0 <coda_cursor_goto_next_array_element>
    3950:	cmp	r0, #0
    3954:	beq	3920 <coda_mem_cursor_read_char_array+0x640>
    3958:	b	3a4c <coda_mem_cursor_read_char_array+0x76c>
    395c:	cmp	r8, #0
    3960:	beq	3a58 <coda_mem_cursor_read_char_array+0x778>
    3964:	mov	r0, r6
    3968:	mov	r1, r9
    396c:	mov	r2, #1
    3970:	bl	1c78 <transpose_array>
    3974:	mov	r1, r0
    3978:	mvn	r0, #0
    397c:	cmp	r1, #0
    3980:	bne	3a50 <coda_mem_cursor_read_char_array+0x770>
    3984:	b	3a58 <coda_mem_cursor_read_char_array+0x778>
    3988:	sub	r6, r3, ip
    398c:	mov	r3, #0
    3990:	mov	r5, #64	; 0x40
    3994:	mov	r7, r4
    3998:	vld1.32	{d18-d19}, [r7], r5
    399c:	add	r1, r4, #16
    39a0:	add	r2, r4, #32
    39a4:	subs	r6, r6, #4
    39a8:	add	r3, r3, #16
    39ac:	vld1.32	{d20-d21}, [r1]
    39b0:	add	r1, r4, #48	; 0x30
    39b4:	mov	r4, r7
    39b8:	vmul.i32	q8, q9, q8
    39bc:	vld1.32	{d18-d19}, [r2]
    39c0:	vmul.i32	q8, q10, q8
    39c4:	vld1.32	{d20-d21}, [r1]
    39c8:	vmul.i32	q8, q9, q8
    39cc:	vmul.i32	q8, q10, q8
    39d0:	bne	3998 <coda_mem_cursor_read_char_array+0x6b8>
    39d4:	cmp	ip, #0
    39d8:	beq	39f8 <coda_mem_cursor_read_char_array+0x718>
    39dc:	add	r1, sp, #44	; 0x2c
    39e0:	rsb	r2, ip, #0
    39e4:	add	r3, r1, r3, lsl #2
    39e8:	vld1.32	{d18-d19}, [r3]!
    39ec:	adds	r2, r2, #1
    39f0:	vmul.i32	q8, q9, q8
    39f4:	bcc	39e8 <coda_mem_cursor_read_char_array+0x708>
    39f8:	vext.8	q9, q8, q8, #8
    39fc:	cmp	r0, lr
    3a00:	vmul.i32	q0, q8, q9
    3a04:	vmul.i32	q8, q0, d0[1]
    3a08:	vmov.32	r4, d16[0]
    3a0c:	beq	3a2c <coda_mem_cursor_read_char_array+0x74c>
    3a10:	add	r1, sp, #44	; 0x2c
    3a14:	sub	r0, r0, lr
    3a18:	add	r2, r1, lr, lsl #2
    3a1c:	ldr	r1, [r2], #4
    3a20:	subs	r0, r0, #1
    3a24:	mul	r4, r1, r4
    3a28:	bne	3a1c <coda_mem_cursor_read_char_array+0x73c>
    3a2c:	cmp	r4, #1
    3a30:	blt	3a58 <coda_mem_cursor_read_char_array+0x778>
    3a34:	add	r0, sp, #80	; 0x50
    3a38:	mov	r1, #0
    3a3c:	mov	r6, #0
    3a40:	bl	0 <coda_cursor_goto_array_element_by_index>
    3a44:	cmp	r0, #0
    3a48:	beq	3a64 <coda_mem_cursor_read_char_array+0x784>
    3a4c:	mvn	r0, #0
    3a50:	sub	sp, fp, #28
    3a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a58:	mov	r0, #0
    3a5c:	sub	sp, fp, #28
    3a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a64:	sub	r7, r4, #1
    3a68:	add	r5, sp, #80	; 0x50
    3a6c:	b	3a80 <coda_mem_cursor_read_char_array+0x7a0>
    3a70:	add	r6, r6, #1
    3a74:	mov	r0, #0
    3a78:	cmp	r4, r6
    3a7c:	beq	3a50 <coda_mem_cursor_read_char_array+0x770>
    3a80:	add	r1, r9, r6
    3a84:	mov	r0, r5
    3a88:	bl	0 <coda_bin_cursor_read_char>
    3a8c:	cmp	r0, #0
    3a90:	bne	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3a94:	cmp	r6, r7
    3a98:	bge	3a70 <coda_mem_cursor_read_char_array+0x790>
    3a9c:	mov	r0, r5
    3aa0:	bl	0 <coda_cursor_goto_next_array_element>
    3aa4:	cmp	r0, #0
    3aa8:	beq	3a70 <coda_mem_cursor_read_char_array+0x790>
    3aac:	b	3a4c <coda_mem_cursor_read_char_array+0x76c>
    3ab0:	movw	r0, #0
    3ab4:	movw	r1, #0
    3ab8:	movw	r3, #0
    3abc:	mov	r2, #960	; 0x3c0
    3ac0:	movt	r0, #0
    3ac4:	b	3adc <coda_mem_cursor_read_char_array+0x7fc>
    3ac8:	movw	r0, #0
    3acc:	movw	r1, #0
    3ad0:	movw	r3, #0
    3ad4:	movw	r2, #966	; 0x3c6
    3ad8:	movt	r0, #0
    3adc:	movt	r1, #0
    3ae0:	movt	r3, #0
    3ae4:	bl	0 <__assert_fail>

00003ae8 <coda_mem_cursor_read_int8_partial_array>:
    3ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3aec:	add	fp, sp, #28
    3af0:	sub	sp, sp, #524	; 0x20c
    3af4:	mov	r6, r1
    3af8:	mov	r1, r0
    3afc:	ldr	r0, [r0, #4]
    3b00:	mov	r5, r2
    3b04:	mov	sl, r3
    3b08:	add	r0, r1, r0, lsl #4
    3b0c:	ldr	r0, [r0, #-8]
    3b10:	ldr	r2, [r0, #8]
    3b14:	cmp	r2, #2
    3b18:	beq	3b9c <coda_mem_cursor_read_int8_partial_array+0xb4>
    3b1c:	cmp	r2, #1
    3b20:	bne	3cc0 <coda_mem_cursor_read_int8_partial_array+0x1d8>
    3b24:	mov	r0, sp
    3b28:	mov	r2, #520	; 0x208
    3b2c:	bl	0 <memcpy>
    3b30:	cmp	r5, #1
    3b34:	blt	3c60 <coda_mem_cursor_read_int8_partial_array+0x178>
    3b38:	mov	r0, sp
    3b3c:	mov	r1, r6
    3b40:	bl	0 <coda_cursor_goto_array_element_by_index>
    3b44:	mvn	r6, #0
    3b48:	cmp	r0, #0
    3b4c:	bne	3c64 <coda_mem_cursor_read_int8_partial_array+0x17c>
    3b50:	sub	r4, r5, #1
    3b54:	mov	r7, #0
    3b58:	mov	r8, sp
    3b5c:	b	3b6c <coda_mem_cursor_read_int8_partial_array+0x84>
    3b60:	add	r7, r7, #1
    3b64:	cmp	r5, r7
    3b68:	beq	3c60 <coda_mem_cursor_read_int8_partial_array+0x178>
    3b6c:	add	r1, sl, r7
    3b70:	mov	r0, r8
    3b74:	bl	0 <coda_cursor_read_int8>
    3b78:	cmp	r0, #0
    3b7c:	bne	3c64 <coda_mem_cursor_read_int8_partial_array+0x17c>
    3b80:	cmp	r7, r4
    3b84:	bge	3b60 <coda_mem_cursor_read_int8_partial_array+0x78>
    3b88:	mov	r0, r8
    3b8c:	bl	0 <coda_cursor_goto_next_array_element>
    3b90:	cmp	r0, #0
    3b94:	beq	3b60 <coda_mem_cursor_read_int8_partial_array+0x78>
    3b98:	b	3c64 <coda_mem_cursor_read_int8_partial_array+0x17c>
    3b9c:	ldr	r0, [r0, #4]
    3ba0:	ldr	r0, [r0, #40]	; 0x28
    3ba4:	ldr	r0, [r0]
    3ba8:	cmp	r0, #0
    3bac:	beq	3c30 <coda_mem_cursor_read_int8_partial_array+0x148>
    3bb0:	cmp	r0, #1
    3bb4:	bne	3cd8 <coda_mem_cursor_read_int8_partial_array+0x1f0>
    3bb8:	mov	r0, sp
    3bbc:	mov	r2, #520	; 0x208
    3bc0:	bl	0 <memcpy>
    3bc4:	cmp	r5, #1
    3bc8:	blt	3c60 <coda_mem_cursor_read_int8_partial_array+0x178>
    3bcc:	mov	r0, sp
    3bd0:	mov	r1, r6
    3bd4:	bl	0 <coda_cursor_goto_array_element_by_index>
    3bd8:	cmp	r0, #0
    3bdc:	bne	3c58 <coda_mem_cursor_read_int8_partial_array+0x170>
    3be0:	sub	r9, r5, #1
    3be4:	mov	r7, #0
    3be8:	mov	r8, sp
    3bec:	mov	r6, #0
    3bf0:	b	3c00 <coda_mem_cursor_read_int8_partial_array+0x118>
    3bf4:	add	r7, r7, #1
    3bf8:	cmp	r5, r7
    3bfc:	beq	3c64 <coda_mem_cursor_read_int8_partial_array+0x17c>
    3c00:	add	r1, sl, r7
    3c04:	mov	r0, r8
    3c08:	bl	0 <coda_bin_cursor_read_int8>
    3c0c:	cmp	r0, #0
    3c10:	bne	3c58 <coda_mem_cursor_read_int8_partial_array+0x170>
    3c14:	cmp	r7, r9
    3c18:	bge	3bf4 <coda_mem_cursor_read_int8_partial_array+0x10c>
    3c1c:	mov	r0, r8
    3c20:	bl	0 <coda_cursor_goto_next_array_element>
    3c24:	cmp	r0, #0
    3c28:	beq	3bf4 <coda_mem_cursor_read_int8_partial_array+0x10c>
    3c2c:	b	3c58 <coda_mem_cursor_read_int8_partial_array+0x170>
    3c30:	mov	r0, sp
    3c34:	mov	r2, #520	; 0x208
    3c38:	bl	0 <memcpy>
    3c3c:	cmp	r5, #1
    3c40:	blt	3c60 <coda_mem_cursor_read_int8_partial_array+0x178>
    3c44:	mov	r0, sp
    3c48:	mov	r1, r6
    3c4c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3c50:	cmp	r0, #0
    3c54:	beq	3c70 <coda_mem_cursor_read_int8_partial_array+0x188>
    3c58:	mvn	r6, #0
    3c5c:	b	3c64 <coda_mem_cursor_read_int8_partial_array+0x17c>
    3c60:	mov	r6, #0
    3c64:	mov	r0, r6
    3c68:	sub	sp, fp, #28
    3c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c70:	sub	r9, r5, #1
    3c74:	mov	r7, #0
    3c78:	mov	r8, sp
    3c7c:	mov	r6, #0
    3c80:	b	3c90 <coda_mem_cursor_read_int8_partial_array+0x1a8>
    3c84:	add	r7, r7, #1
    3c88:	cmp	r5, r7
    3c8c:	beq	3c64 <coda_mem_cursor_read_int8_partial_array+0x17c>
    3c90:	add	r1, sl, r7
    3c94:	mov	r0, r8
    3c98:	bl	0 <coda_ascii_cursor_read_int8>
    3c9c:	cmp	r0, #0
    3ca0:	bne	3c58 <coda_mem_cursor_read_int8_partial_array+0x170>
    3ca4:	cmp	r7, r9
    3ca8:	bge	3c84 <coda_mem_cursor_read_int8_partial_array+0x19c>
    3cac:	mov	r0, r8
    3cb0:	bl	0 <coda_cursor_goto_next_array_element>
    3cb4:	cmp	r0, #0
    3cb8:	beq	3c84 <coda_mem_cursor_read_int8_partial_array+0x19c>
    3cbc:	b	3c58 <coda_mem_cursor_read_int8_partial_array+0x170>
    3cc0:	movw	r0, #0
    3cc4:	movw	r1, #0
    3cc8:	movw	r3, #0
    3ccc:	movw	r2, #991	; 0x3df
    3cd0:	movt	r0, #0
    3cd4:	b	3cec <coda_mem_cursor_read_int8_partial_array+0x204>
    3cd8:	movw	r0, #0
    3cdc:	movw	r1, #0
    3ce0:	movw	r3, #0
    3ce4:	movw	r2, #997	; 0x3e5
    3ce8:	movt	r0, #0
    3cec:	movt	r1, #0
    3cf0:	movt	r3, #0
    3cf4:	bl	0 <__assert_fail>

00003cf8 <coda_mem_cursor_read_uint8_partial_array>:
    3cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cfc:	add	fp, sp, #28
    3d00:	sub	sp, sp, #524	; 0x20c
    3d04:	mov	r6, r1
    3d08:	mov	r1, r0
    3d0c:	ldr	r0, [r0, #4]
    3d10:	mov	r5, r2
    3d14:	mov	sl, r3
    3d18:	add	r0, r1, r0, lsl #4
    3d1c:	ldr	r0, [r0, #-8]
    3d20:	ldr	r2, [r0, #8]
    3d24:	cmp	r2, #2
    3d28:	beq	3dac <coda_mem_cursor_read_uint8_partial_array+0xb4>
    3d2c:	cmp	r2, #1
    3d30:	bne	3ed0 <coda_mem_cursor_read_uint8_partial_array+0x1d8>
    3d34:	mov	r0, sp
    3d38:	mov	r2, #520	; 0x208
    3d3c:	bl	0 <memcpy>
    3d40:	cmp	r5, #1
    3d44:	blt	3e70 <coda_mem_cursor_read_uint8_partial_array+0x178>
    3d48:	mov	r0, sp
    3d4c:	mov	r1, r6
    3d50:	bl	0 <coda_cursor_goto_array_element_by_index>
    3d54:	mvn	r6, #0
    3d58:	cmp	r0, #0
    3d5c:	bne	3e74 <coda_mem_cursor_read_uint8_partial_array+0x17c>
    3d60:	sub	r4, r5, #1
    3d64:	mov	r7, #0
    3d68:	mov	r8, sp
    3d6c:	b	3d7c <coda_mem_cursor_read_uint8_partial_array+0x84>
    3d70:	add	r7, r7, #1
    3d74:	cmp	r5, r7
    3d78:	beq	3e70 <coda_mem_cursor_read_uint8_partial_array+0x178>
    3d7c:	add	r1, sl, r7
    3d80:	mov	r0, r8
    3d84:	bl	0 <coda_cursor_read_uint8>
    3d88:	cmp	r0, #0
    3d8c:	bne	3e74 <coda_mem_cursor_read_uint8_partial_array+0x17c>
    3d90:	cmp	r7, r4
    3d94:	bge	3d70 <coda_mem_cursor_read_uint8_partial_array+0x78>
    3d98:	mov	r0, r8
    3d9c:	bl	0 <coda_cursor_goto_next_array_element>
    3da0:	cmp	r0, #0
    3da4:	beq	3d70 <coda_mem_cursor_read_uint8_partial_array+0x78>
    3da8:	b	3e74 <coda_mem_cursor_read_uint8_partial_array+0x17c>
    3dac:	ldr	r0, [r0, #4]
    3db0:	ldr	r0, [r0, #40]	; 0x28
    3db4:	ldr	r0, [r0]
    3db8:	cmp	r0, #0
    3dbc:	beq	3e40 <coda_mem_cursor_read_uint8_partial_array+0x148>
    3dc0:	cmp	r0, #1
    3dc4:	bne	3ee8 <coda_mem_cursor_read_uint8_partial_array+0x1f0>
    3dc8:	mov	r0, sp
    3dcc:	mov	r2, #520	; 0x208
    3dd0:	bl	0 <memcpy>
    3dd4:	cmp	r5, #1
    3dd8:	blt	3e70 <coda_mem_cursor_read_uint8_partial_array+0x178>
    3ddc:	mov	r0, sp
    3de0:	mov	r1, r6
    3de4:	bl	0 <coda_cursor_goto_array_element_by_index>
    3de8:	cmp	r0, #0
    3dec:	bne	3e68 <coda_mem_cursor_read_uint8_partial_array+0x170>
    3df0:	sub	r9, r5, #1
    3df4:	mov	r7, #0
    3df8:	mov	r8, sp
    3dfc:	mov	r6, #0
    3e00:	b	3e10 <coda_mem_cursor_read_uint8_partial_array+0x118>
    3e04:	add	r7, r7, #1
    3e08:	cmp	r5, r7
    3e0c:	beq	3e74 <coda_mem_cursor_read_uint8_partial_array+0x17c>
    3e10:	add	r1, sl, r7
    3e14:	mov	r0, r8
    3e18:	bl	0 <coda_bin_cursor_read_uint8>
    3e1c:	cmp	r0, #0
    3e20:	bne	3e68 <coda_mem_cursor_read_uint8_partial_array+0x170>
    3e24:	cmp	r7, r9
    3e28:	bge	3e04 <coda_mem_cursor_read_uint8_partial_array+0x10c>
    3e2c:	mov	r0, r8
    3e30:	bl	0 <coda_cursor_goto_next_array_element>
    3e34:	cmp	r0, #0
    3e38:	beq	3e04 <coda_mem_cursor_read_uint8_partial_array+0x10c>
    3e3c:	b	3e68 <coda_mem_cursor_read_uint8_partial_array+0x170>
    3e40:	mov	r0, sp
    3e44:	mov	r2, #520	; 0x208
    3e48:	bl	0 <memcpy>
    3e4c:	cmp	r5, #1
    3e50:	blt	3e70 <coda_mem_cursor_read_uint8_partial_array+0x178>
    3e54:	mov	r0, sp
    3e58:	mov	r1, r6
    3e5c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3e60:	cmp	r0, #0
    3e64:	beq	3e80 <coda_mem_cursor_read_uint8_partial_array+0x188>
    3e68:	mvn	r6, #0
    3e6c:	b	3e74 <coda_mem_cursor_read_uint8_partial_array+0x17c>
    3e70:	mov	r6, #0
    3e74:	mov	r0, r6
    3e78:	sub	sp, fp, #28
    3e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e80:	sub	r9, r5, #1
    3e84:	mov	r7, #0
    3e88:	mov	r8, sp
    3e8c:	mov	r6, #0
    3e90:	b	3ea0 <coda_mem_cursor_read_uint8_partial_array+0x1a8>
    3e94:	add	r7, r7, #1
    3e98:	cmp	r5, r7
    3e9c:	beq	3e74 <coda_mem_cursor_read_uint8_partial_array+0x17c>
    3ea0:	add	r1, sl, r7
    3ea4:	mov	r0, r8
    3ea8:	bl	0 <coda_ascii_cursor_read_uint8>
    3eac:	cmp	r0, #0
    3eb0:	bne	3e68 <coda_mem_cursor_read_uint8_partial_array+0x170>
    3eb4:	cmp	r7, r9
    3eb8:	bge	3e94 <coda_mem_cursor_read_uint8_partial_array+0x19c>
    3ebc:	mov	r0, r8
    3ec0:	bl	0 <coda_cursor_goto_next_array_element>
    3ec4:	cmp	r0, #0
    3ec8:	beq	3e94 <coda_mem_cursor_read_uint8_partial_array+0x19c>
    3ecc:	b	3e68 <coda_mem_cursor_read_uint8_partial_array+0x170>
    3ed0:	movw	r0, #0
    3ed4:	movw	r1, #0
    3ed8:	movw	r3, #0
    3edc:	movw	r2, #1011	; 0x3f3
    3ee0:	movt	r0, #0
    3ee4:	b	3efc <coda_mem_cursor_read_uint8_partial_array+0x204>
    3ee8:	movw	r0, #0
    3eec:	movw	r1, #0
    3ef0:	movw	r3, #0
    3ef4:	movw	r2, #1017	; 0x3f9
    3ef8:	movt	r0, #0
    3efc:	movt	r1, #0
    3f00:	movt	r3, #0
    3f04:	bl	0 <__assert_fail>

00003f08 <coda_mem_cursor_read_int16_partial_array>:
    3f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f0c:	add	fp, sp, #28
    3f10:	sub	sp, sp, #524	; 0x20c
    3f14:	mov	r6, r1
    3f18:	mov	r1, r0
    3f1c:	ldr	r0, [r0, #4]
    3f20:	mov	sl, r2
    3f24:	mov	r4, r3
    3f28:	add	r0, r1, r0, lsl #4
    3f2c:	ldr	r0, [r0, #-8]
    3f30:	ldr	r2, [r0, #8]
    3f34:	cmp	r2, #2
    3f38:	beq	3fc0 <coda_mem_cursor_read_int16_partial_array+0xb8>
    3f3c:	cmp	r2, #1
    3f40:	bne	40ec <coda_mem_cursor_read_int16_partial_array+0x1e4>
    3f44:	mov	r0, sp
    3f48:	mov	r2, #520	; 0x208
    3f4c:	bl	0 <memcpy>
    3f50:	cmp	sl, #1
    3f54:	blt	4088 <coda_mem_cursor_read_int16_partial_array+0x180>
    3f58:	mov	r0, sp
    3f5c:	mov	r1, r6
    3f60:	bl	0 <coda_cursor_goto_array_element_by_index>
    3f64:	mvn	r6, #0
    3f68:	cmp	r0, #0
    3f6c:	bne	408c <coda_mem_cursor_read_int16_partial_array+0x184>
    3f70:	sub	r7, sl, #1
    3f74:	mov	r5, #0
    3f78:	mov	r8, sp
    3f7c:	b	3f90 <coda_mem_cursor_read_int16_partial_array+0x88>
    3f80:	add	r5, r5, #1
    3f84:	add	r4, r4, #2
    3f88:	cmp	sl, r5
    3f8c:	beq	4088 <coda_mem_cursor_read_int16_partial_array+0x180>
    3f90:	mov	r0, r8
    3f94:	mov	r1, r4
    3f98:	bl	0 <coda_cursor_read_int16>
    3f9c:	cmp	r0, #0
    3fa0:	bne	408c <coda_mem_cursor_read_int16_partial_array+0x184>
    3fa4:	cmp	r5, r7
    3fa8:	bge	3f80 <coda_mem_cursor_read_int16_partial_array+0x78>
    3fac:	mov	r0, r8
    3fb0:	bl	0 <coda_cursor_goto_next_array_element>
    3fb4:	cmp	r0, #0
    3fb8:	beq	3f80 <coda_mem_cursor_read_int16_partial_array+0x78>
    3fbc:	b	408c <coda_mem_cursor_read_int16_partial_array+0x184>
    3fc0:	ldr	r0, [r0, #4]
    3fc4:	ldr	r0, [r0, #40]	; 0x28
    3fc8:	ldr	r0, [r0]
    3fcc:	cmp	r0, #0
    3fd0:	beq	4058 <coda_mem_cursor_read_int16_partial_array+0x150>
    3fd4:	cmp	r0, #1
    3fd8:	bne	4104 <coda_mem_cursor_read_int16_partial_array+0x1fc>
    3fdc:	mov	r0, sp
    3fe0:	mov	r2, #520	; 0x208
    3fe4:	bl	0 <memcpy>
    3fe8:	cmp	sl, #1
    3fec:	blt	4088 <coda_mem_cursor_read_int16_partial_array+0x180>
    3ff0:	mov	r0, sp
    3ff4:	mov	r1, r6
    3ff8:	bl	0 <coda_cursor_goto_array_element_by_index>
    3ffc:	cmp	r0, #0
    4000:	bne	4080 <coda_mem_cursor_read_int16_partial_array+0x178>
    4004:	sub	r9, sl, #1
    4008:	mov	r7, #0
    400c:	mov	r8, sp
    4010:	mov	r6, #0
    4014:	b	4028 <coda_mem_cursor_read_int16_partial_array+0x120>
    4018:	add	r7, r7, #1
    401c:	add	r4, r4, #2
    4020:	cmp	sl, r7
    4024:	beq	408c <coda_mem_cursor_read_int16_partial_array+0x184>
    4028:	mov	r0, r8
    402c:	mov	r1, r4
    4030:	bl	0 <coda_bin_cursor_read_int16>
    4034:	cmp	r0, #0
    4038:	bne	4080 <coda_mem_cursor_read_int16_partial_array+0x178>
    403c:	cmp	r7, r9
    4040:	bge	4018 <coda_mem_cursor_read_int16_partial_array+0x110>
    4044:	mov	r0, r8
    4048:	bl	0 <coda_cursor_goto_next_array_element>
    404c:	cmp	r0, #0
    4050:	beq	4018 <coda_mem_cursor_read_int16_partial_array+0x110>
    4054:	b	4080 <coda_mem_cursor_read_int16_partial_array+0x178>
    4058:	mov	r0, sp
    405c:	mov	r2, #520	; 0x208
    4060:	bl	0 <memcpy>
    4064:	cmp	sl, #1
    4068:	blt	4088 <coda_mem_cursor_read_int16_partial_array+0x180>
    406c:	mov	r0, sp
    4070:	mov	r1, r6
    4074:	bl	0 <coda_cursor_goto_array_element_by_index>
    4078:	cmp	r0, #0
    407c:	beq	4098 <coda_mem_cursor_read_int16_partial_array+0x190>
    4080:	mvn	r6, #0
    4084:	b	408c <coda_mem_cursor_read_int16_partial_array+0x184>
    4088:	mov	r6, #0
    408c:	mov	r0, r6
    4090:	sub	sp, fp, #28
    4094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4098:	sub	r9, sl, #1
    409c:	mov	r7, #0
    40a0:	mov	r8, sp
    40a4:	mov	r6, #0
    40a8:	b	40bc <coda_mem_cursor_read_int16_partial_array+0x1b4>
    40ac:	add	r7, r7, #1
    40b0:	add	r4, r4, #2
    40b4:	cmp	sl, r7
    40b8:	beq	408c <coda_mem_cursor_read_int16_partial_array+0x184>
    40bc:	mov	r0, r8
    40c0:	mov	r1, r4
    40c4:	bl	0 <coda_ascii_cursor_read_int16>
    40c8:	cmp	r0, #0
    40cc:	bne	4080 <coda_mem_cursor_read_int16_partial_array+0x178>
    40d0:	cmp	r7, r9
    40d4:	bge	40ac <coda_mem_cursor_read_int16_partial_array+0x1a4>
    40d8:	mov	r0, r8
    40dc:	bl	0 <coda_cursor_goto_next_array_element>
    40e0:	cmp	r0, #0
    40e4:	beq	40ac <coda_mem_cursor_read_int16_partial_array+0x1a4>
    40e8:	b	4080 <coda_mem_cursor_read_int16_partial_array+0x178>
    40ec:	movw	r0, #0
    40f0:	movw	r1, #0
    40f4:	movw	r3, #0
    40f8:	movw	r2, #1031	; 0x407
    40fc:	movt	r0, #0
    4100:	b	4118 <coda_mem_cursor_read_int16_partial_array+0x210>
    4104:	movw	r0, #0
    4108:	movw	r1, #0
    410c:	movw	r3, #0
    4110:	movw	r2, #1037	; 0x40d
    4114:	movt	r0, #0
    4118:	movt	r1, #0
    411c:	movt	r3, #0
    4120:	bl	0 <__assert_fail>

00004124 <coda_mem_cursor_read_uint16_partial_array>:
    4124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4128:	add	fp, sp, #28
    412c:	sub	sp, sp, #524	; 0x20c
    4130:	mov	r6, r1
    4134:	mov	r1, r0
    4138:	ldr	r0, [r0, #4]
    413c:	mov	sl, r2
    4140:	mov	r4, r3
    4144:	add	r0, r1, r0, lsl #4
    4148:	ldr	r0, [r0, #-8]
    414c:	ldr	r2, [r0, #8]
    4150:	cmp	r2, #2
    4154:	beq	41dc <coda_mem_cursor_read_uint16_partial_array+0xb8>
    4158:	cmp	r2, #1
    415c:	bne	4308 <coda_mem_cursor_read_uint16_partial_array+0x1e4>
    4160:	mov	r0, sp
    4164:	mov	r2, #520	; 0x208
    4168:	bl	0 <memcpy>
    416c:	cmp	sl, #1
    4170:	blt	42a4 <coda_mem_cursor_read_uint16_partial_array+0x180>
    4174:	mov	r0, sp
    4178:	mov	r1, r6
    417c:	bl	0 <coda_cursor_goto_array_element_by_index>
    4180:	mvn	r6, #0
    4184:	cmp	r0, #0
    4188:	bne	42a8 <coda_mem_cursor_read_uint16_partial_array+0x184>
    418c:	sub	r7, sl, #1
    4190:	mov	r5, #0
    4194:	mov	r8, sp
    4198:	b	41ac <coda_mem_cursor_read_uint16_partial_array+0x88>
    419c:	add	r5, r5, #1
    41a0:	add	r4, r4, #2
    41a4:	cmp	sl, r5
    41a8:	beq	42a4 <coda_mem_cursor_read_uint16_partial_array+0x180>
    41ac:	mov	r0, r8
    41b0:	mov	r1, r4
    41b4:	bl	0 <coda_cursor_read_uint16>
    41b8:	cmp	r0, #0
    41bc:	bne	42a8 <coda_mem_cursor_read_uint16_partial_array+0x184>
    41c0:	cmp	r5, r7
    41c4:	bge	419c <coda_mem_cursor_read_uint16_partial_array+0x78>
    41c8:	mov	r0, r8
    41cc:	bl	0 <coda_cursor_goto_next_array_element>
    41d0:	cmp	r0, #0
    41d4:	beq	419c <coda_mem_cursor_read_uint16_partial_array+0x78>
    41d8:	b	42a8 <coda_mem_cursor_read_uint16_partial_array+0x184>
    41dc:	ldr	r0, [r0, #4]
    41e0:	ldr	r0, [r0, #40]	; 0x28
    41e4:	ldr	r0, [r0]
    41e8:	cmp	r0, #0
    41ec:	beq	4274 <coda_mem_cursor_read_uint16_partial_array+0x150>
    41f0:	cmp	r0, #1
    41f4:	bne	4320 <coda_mem_cursor_read_uint16_partial_array+0x1fc>
    41f8:	mov	r0, sp
    41fc:	mov	r2, #520	; 0x208
    4200:	bl	0 <memcpy>
    4204:	cmp	sl, #1
    4208:	blt	42a4 <coda_mem_cursor_read_uint16_partial_array+0x180>
    420c:	mov	r0, sp
    4210:	mov	r1, r6
    4214:	bl	0 <coda_cursor_goto_array_element_by_index>
    4218:	cmp	r0, #0
    421c:	bne	429c <coda_mem_cursor_read_uint16_partial_array+0x178>
    4220:	sub	r9, sl, #1
    4224:	mov	r7, #0
    4228:	mov	r8, sp
    422c:	mov	r6, #0
    4230:	b	4244 <coda_mem_cursor_read_uint16_partial_array+0x120>
    4234:	add	r7, r7, #1
    4238:	add	r4, r4, #2
    423c:	cmp	sl, r7
    4240:	beq	42a8 <coda_mem_cursor_read_uint16_partial_array+0x184>
    4244:	mov	r0, r8
    4248:	mov	r1, r4
    424c:	bl	0 <coda_bin_cursor_read_uint16>
    4250:	cmp	r0, #0
    4254:	bne	429c <coda_mem_cursor_read_uint16_partial_array+0x178>
    4258:	cmp	r7, r9
    425c:	bge	4234 <coda_mem_cursor_read_uint16_partial_array+0x110>
    4260:	mov	r0, r8
    4264:	bl	0 <coda_cursor_goto_next_array_element>
    4268:	cmp	r0, #0
    426c:	beq	4234 <coda_mem_cursor_read_uint16_partial_array+0x110>
    4270:	b	429c <coda_mem_cursor_read_uint16_partial_array+0x178>
    4274:	mov	r0, sp
    4278:	mov	r2, #520	; 0x208
    427c:	bl	0 <memcpy>
    4280:	cmp	sl, #1
    4284:	blt	42a4 <coda_mem_cursor_read_uint16_partial_array+0x180>
    4288:	mov	r0, sp
    428c:	mov	r1, r6
    4290:	bl	0 <coda_cursor_goto_array_element_by_index>
    4294:	cmp	r0, #0
    4298:	beq	42b4 <coda_mem_cursor_read_uint16_partial_array+0x190>
    429c:	mvn	r6, #0
    42a0:	b	42a8 <coda_mem_cursor_read_uint16_partial_array+0x184>
    42a4:	mov	r6, #0
    42a8:	mov	r0, r6
    42ac:	sub	sp, fp, #28
    42b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42b4:	sub	r9, sl, #1
    42b8:	mov	r7, #0
    42bc:	mov	r8, sp
    42c0:	mov	r6, #0
    42c4:	b	42d8 <coda_mem_cursor_read_uint16_partial_array+0x1b4>
    42c8:	add	r7, r7, #1
    42cc:	add	r4, r4, #2
    42d0:	cmp	sl, r7
    42d4:	beq	42a8 <coda_mem_cursor_read_uint16_partial_array+0x184>
    42d8:	mov	r0, r8
    42dc:	mov	r1, r4
    42e0:	bl	0 <coda_ascii_cursor_read_uint16>
    42e4:	cmp	r0, #0
    42e8:	bne	429c <coda_mem_cursor_read_uint16_partial_array+0x178>
    42ec:	cmp	r7, r9
    42f0:	bge	42c8 <coda_mem_cursor_read_uint16_partial_array+0x1a4>
    42f4:	mov	r0, r8
    42f8:	bl	0 <coda_cursor_goto_next_array_element>
    42fc:	cmp	r0, #0
    4300:	beq	42c8 <coda_mem_cursor_read_uint16_partial_array+0x1a4>
    4304:	b	429c <coda_mem_cursor_read_uint16_partial_array+0x178>
    4308:	movw	r0, #0
    430c:	movw	r1, #0
    4310:	movw	r3, #0
    4314:	movw	r2, #1051	; 0x41b
    4318:	movt	r0, #0
    431c:	b	4334 <coda_mem_cursor_read_uint16_partial_array+0x210>
    4320:	movw	r0, #0
    4324:	movw	r1, #0
    4328:	movw	r3, #0
    432c:	movw	r2, #1057	; 0x421
    4330:	movt	r0, #0
    4334:	movt	r1, #0
    4338:	movt	r3, #0
    433c:	bl	0 <__assert_fail>

00004340 <coda_mem_cursor_read_int32_partial_array>:
    4340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4344:	add	fp, sp, #28
    4348:	sub	sp, sp, #524	; 0x20c
    434c:	mov	r6, r1
    4350:	mov	r1, r0
    4354:	ldr	r0, [r0, #4]
    4358:	mov	sl, r2
    435c:	mov	r4, r3
    4360:	add	r0, r1, r0, lsl #4
    4364:	ldr	r0, [r0, #-8]
    4368:	ldr	r2, [r0, #8]
    436c:	cmp	r2, #2
    4370:	beq	43f8 <coda_mem_cursor_read_int32_partial_array+0xb8>
    4374:	cmp	r2, #1
    4378:	bne	4524 <coda_mem_cursor_read_int32_partial_array+0x1e4>
    437c:	mov	r0, sp
    4380:	mov	r2, #520	; 0x208
    4384:	bl	0 <memcpy>
    4388:	cmp	sl, #1
    438c:	blt	44c0 <coda_mem_cursor_read_int32_partial_array+0x180>
    4390:	mov	r0, sp
    4394:	mov	r1, r6
    4398:	bl	0 <coda_cursor_goto_array_element_by_index>
    439c:	mvn	r6, #0
    43a0:	cmp	r0, #0
    43a4:	bne	44c4 <coda_mem_cursor_read_int32_partial_array+0x184>
    43a8:	sub	r7, sl, #1
    43ac:	mov	r5, #0
    43b0:	mov	r8, sp
    43b4:	b	43c8 <coda_mem_cursor_read_int32_partial_array+0x88>
    43b8:	add	r5, r5, #1
    43bc:	add	r4, r4, #4
    43c0:	cmp	sl, r5
    43c4:	beq	44c0 <coda_mem_cursor_read_int32_partial_array+0x180>
    43c8:	mov	r0, r8
    43cc:	mov	r1, r4
    43d0:	bl	0 <coda_cursor_read_int32>
    43d4:	cmp	r0, #0
    43d8:	bne	44c4 <coda_mem_cursor_read_int32_partial_array+0x184>
    43dc:	cmp	r5, r7
    43e0:	bge	43b8 <coda_mem_cursor_read_int32_partial_array+0x78>
    43e4:	mov	r0, r8
    43e8:	bl	0 <coda_cursor_goto_next_array_element>
    43ec:	cmp	r0, #0
    43f0:	beq	43b8 <coda_mem_cursor_read_int32_partial_array+0x78>
    43f4:	b	44c4 <coda_mem_cursor_read_int32_partial_array+0x184>
    43f8:	ldr	r0, [r0, #4]
    43fc:	ldr	r0, [r0, #40]	; 0x28
    4400:	ldr	r0, [r0]
    4404:	cmp	r0, #0
    4408:	beq	4490 <coda_mem_cursor_read_int32_partial_array+0x150>
    440c:	cmp	r0, #1
    4410:	bne	453c <coda_mem_cursor_read_int32_partial_array+0x1fc>
    4414:	mov	r0, sp
    4418:	mov	r2, #520	; 0x208
    441c:	bl	0 <memcpy>
    4420:	cmp	sl, #1
    4424:	blt	44c0 <coda_mem_cursor_read_int32_partial_array+0x180>
    4428:	mov	r0, sp
    442c:	mov	r1, r6
    4430:	bl	0 <coda_cursor_goto_array_element_by_index>
    4434:	cmp	r0, #0
    4438:	bne	44b8 <coda_mem_cursor_read_int32_partial_array+0x178>
    443c:	sub	r9, sl, #1
    4440:	mov	r7, #0
    4444:	mov	r8, sp
    4448:	mov	r6, #0
    444c:	b	4460 <coda_mem_cursor_read_int32_partial_array+0x120>
    4450:	add	r7, r7, #1
    4454:	add	r4, r4, #4
    4458:	cmp	sl, r7
    445c:	beq	44c4 <coda_mem_cursor_read_int32_partial_array+0x184>
    4460:	mov	r0, r8
    4464:	mov	r1, r4
    4468:	bl	0 <coda_bin_cursor_read_int32>
    446c:	cmp	r0, #0
    4470:	bne	44b8 <coda_mem_cursor_read_int32_partial_array+0x178>
    4474:	cmp	r7, r9
    4478:	bge	4450 <coda_mem_cursor_read_int32_partial_array+0x110>
    447c:	mov	r0, r8
    4480:	bl	0 <coda_cursor_goto_next_array_element>
    4484:	cmp	r0, #0
    4488:	beq	4450 <coda_mem_cursor_read_int32_partial_array+0x110>
    448c:	b	44b8 <coda_mem_cursor_read_int32_partial_array+0x178>
    4490:	mov	r0, sp
    4494:	mov	r2, #520	; 0x208
    4498:	bl	0 <memcpy>
    449c:	cmp	sl, #1
    44a0:	blt	44c0 <coda_mem_cursor_read_int32_partial_array+0x180>
    44a4:	mov	r0, sp
    44a8:	mov	r1, r6
    44ac:	bl	0 <coda_cursor_goto_array_element_by_index>
    44b0:	cmp	r0, #0
    44b4:	beq	44d0 <coda_mem_cursor_read_int32_partial_array+0x190>
    44b8:	mvn	r6, #0
    44bc:	b	44c4 <coda_mem_cursor_read_int32_partial_array+0x184>
    44c0:	mov	r6, #0
    44c4:	mov	r0, r6
    44c8:	sub	sp, fp, #28
    44cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44d0:	sub	r9, sl, #1
    44d4:	mov	r7, #0
    44d8:	mov	r8, sp
    44dc:	mov	r6, #0
    44e0:	b	44f4 <coda_mem_cursor_read_int32_partial_array+0x1b4>
    44e4:	add	r7, r7, #1
    44e8:	add	r4, r4, #4
    44ec:	cmp	sl, r7
    44f0:	beq	44c4 <coda_mem_cursor_read_int32_partial_array+0x184>
    44f4:	mov	r0, r8
    44f8:	mov	r1, r4
    44fc:	bl	0 <coda_ascii_cursor_read_int32>
    4500:	cmp	r0, #0
    4504:	bne	44b8 <coda_mem_cursor_read_int32_partial_array+0x178>
    4508:	cmp	r7, r9
    450c:	bge	44e4 <coda_mem_cursor_read_int32_partial_array+0x1a4>
    4510:	mov	r0, r8
    4514:	bl	0 <coda_cursor_goto_next_array_element>
    4518:	cmp	r0, #0
    451c:	beq	44e4 <coda_mem_cursor_read_int32_partial_array+0x1a4>
    4520:	b	44b8 <coda_mem_cursor_read_int32_partial_array+0x178>
    4524:	movw	r0, #0
    4528:	movw	r1, #0
    452c:	movw	r3, #0
    4530:	movw	r2, #1071	; 0x42f
    4534:	movt	r0, #0
    4538:	b	4550 <coda_mem_cursor_read_int32_partial_array+0x210>
    453c:	movw	r0, #0
    4540:	movw	r1, #0
    4544:	movw	r3, #0
    4548:	movw	r2, #1077	; 0x435
    454c:	movt	r0, #0
    4550:	movt	r1, #0
    4554:	movt	r3, #0
    4558:	bl	0 <__assert_fail>

0000455c <coda_mem_cursor_read_uint32_partial_array>:
    455c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4560:	add	fp, sp, #28
    4564:	sub	sp, sp, #524	; 0x20c
    4568:	mov	r6, r1
    456c:	mov	r1, r0
    4570:	ldr	r0, [r0, #4]
    4574:	mov	sl, r2
    4578:	mov	r4, r3
    457c:	add	r0, r1, r0, lsl #4
    4580:	ldr	r0, [r0, #-8]
    4584:	ldr	r2, [r0, #8]
    4588:	cmp	r2, #2
    458c:	beq	4614 <coda_mem_cursor_read_uint32_partial_array+0xb8>
    4590:	cmp	r2, #1
    4594:	bne	4740 <coda_mem_cursor_read_uint32_partial_array+0x1e4>
    4598:	mov	r0, sp
    459c:	mov	r2, #520	; 0x208
    45a0:	bl	0 <memcpy>
    45a4:	cmp	sl, #1
    45a8:	blt	46dc <coda_mem_cursor_read_uint32_partial_array+0x180>
    45ac:	mov	r0, sp
    45b0:	mov	r1, r6
    45b4:	bl	0 <coda_cursor_goto_array_element_by_index>
    45b8:	mvn	r6, #0
    45bc:	cmp	r0, #0
    45c0:	bne	46e0 <coda_mem_cursor_read_uint32_partial_array+0x184>
    45c4:	sub	r7, sl, #1
    45c8:	mov	r5, #0
    45cc:	mov	r8, sp
    45d0:	b	45e4 <coda_mem_cursor_read_uint32_partial_array+0x88>
    45d4:	add	r5, r5, #1
    45d8:	add	r4, r4, #4
    45dc:	cmp	sl, r5
    45e0:	beq	46dc <coda_mem_cursor_read_uint32_partial_array+0x180>
    45e4:	mov	r0, r8
    45e8:	mov	r1, r4
    45ec:	bl	0 <coda_cursor_read_uint32>
    45f0:	cmp	r0, #0
    45f4:	bne	46e0 <coda_mem_cursor_read_uint32_partial_array+0x184>
    45f8:	cmp	r5, r7
    45fc:	bge	45d4 <coda_mem_cursor_read_uint32_partial_array+0x78>
    4600:	mov	r0, r8
    4604:	bl	0 <coda_cursor_goto_next_array_element>
    4608:	cmp	r0, #0
    460c:	beq	45d4 <coda_mem_cursor_read_uint32_partial_array+0x78>
    4610:	b	46e0 <coda_mem_cursor_read_uint32_partial_array+0x184>
    4614:	ldr	r0, [r0, #4]
    4618:	ldr	r0, [r0, #40]	; 0x28
    461c:	ldr	r0, [r0]
    4620:	cmp	r0, #0
    4624:	beq	46ac <coda_mem_cursor_read_uint32_partial_array+0x150>
    4628:	cmp	r0, #1
    462c:	bne	4758 <coda_mem_cursor_read_uint32_partial_array+0x1fc>
    4630:	mov	r0, sp
    4634:	mov	r2, #520	; 0x208
    4638:	bl	0 <memcpy>
    463c:	cmp	sl, #1
    4640:	blt	46dc <coda_mem_cursor_read_uint32_partial_array+0x180>
    4644:	mov	r0, sp
    4648:	mov	r1, r6
    464c:	bl	0 <coda_cursor_goto_array_element_by_index>
    4650:	cmp	r0, #0
    4654:	bne	46d4 <coda_mem_cursor_read_uint32_partial_array+0x178>
    4658:	sub	r9, sl, #1
    465c:	mov	r7, #0
    4660:	mov	r8, sp
    4664:	mov	r6, #0
    4668:	b	467c <coda_mem_cursor_read_uint32_partial_array+0x120>
    466c:	add	r7, r7, #1
    4670:	add	r4, r4, #4
    4674:	cmp	sl, r7
    4678:	beq	46e0 <coda_mem_cursor_read_uint32_partial_array+0x184>
    467c:	mov	r0, r8
    4680:	mov	r1, r4
    4684:	bl	0 <coda_bin_cursor_read_uint32>
    4688:	cmp	r0, #0
    468c:	bne	46d4 <coda_mem_cursor_read_uint32_partial_array+0x178>
    4690:	cmp	r7, r9
    4694:	bge	466c <coda_mem_cursor_read_uint32_partial_array+0x110>
    4698:	mov	r0, r8
    469c:	bl	0 <coda_cursor_goto_next_array_element>
    46a0:	cmp	r0, #0
    46a4:	beq	466c <coda_mem_cursor_read_uint32_partial_array+0x110>
    46a8:	b	46d4 <coda_mem_cursor_read_uint32_partial_array+0x178>
    46ac:	mov	r0, sp
    46b0:	mov	r2, #520	; 0x208
    46b4:	bl	0 <memcpy>
    46b8:	cmp	sl, #1
    46bc:	blt	46dc <coda_mem_cursor_read_uint32_partial_array+0x180>
    46c0:	mov	r0, sp
    46c4:	mov	r1, r6
    46c8:	bl	0 <coda_cursor_goto_array_element_by_index>
    46cc:	cmp	r0, #0
    46d0:	beq	46ec <coda_mem_cursor_read_uint32_partial_array+0x190>
    46d4:	mvn	r6, #0
    46d8:	b	46e0 <coda_mem_cursor_read_uint32_partial_array+0x184>
    46dc:	mov	r6, #0
    46e0:	mov	r0, r6
    46e4:	sub	sp, fp, #28
    46e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46ec:	sub	r9, sl, #1
    46f0:	mov	r7, #0
    46f4:	mov	r8, sp
    46f8:	mov	r6, #0
    46fc:	b	4710 <coda_mem_cursor_read_uint32_partial_array+0x1b4>
    4700:	add	r7, r7, #1
    4704:	add	r4, r4, #4
    4708:	cmp	sl, r7
    470c:	beq	46e0 <coda_mem_cursor_read_uint32_partial_array+0x184>
    4710:	mov	r0, r8
    4714:	mov	r1, r4
    4718:	bl	0 <coda_ascii_cursor_read_uint32>
    471c:	cmp	r0, #0
    4720:	bne	46d4 <coda_mem_cursor_read_uint32_partial_array+0x178>
    4724:	cmp	r7, r9
    4728:	bge	4700 <coda_mem_cursor_read_uint32_partial_array+0x1a4>
    472c:	mov	r0, r8
    4730:	bl	0 <coda_cursor_goto_next_array_element>
    4734:	cmp	r0, #0
    4738:	beq	4700 <coda_mem_cursor_read_uint32_partial_array+0x1a4>
    473c:	b	46d4 <coda_mem_cursor_read_uint32_partial_array+0x178>
    4740:	movw	r0, #0
    4744:	movw	r1, #0
    4748:	movw	r3, #0
    474c:	movw	r2, #1091	; 0x443
    4750:	movt	r0, #0
    4754:	b	476c <coda_mem_cursor_read_uint32_partial_array+0x210>
    4758:	movw	r0, #0
    475c:	movw	r1, #0
    4760:	movw	r3, #0
    4764:	movw	r2, #1097	; 0x449
    4768:	movt	r0, #0
    476c:	movt	r1, #0
    4770:	movt	r3, #0
    4774:	bl	0 <__assert_fail>

00004778 <coda_mem_cursor_read_int64_partial_array>:
    4778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    477c:	add	fp, sp, #28
    4780:	sub	sp, sp, #524	; 0x20c
    4784:	mov	r6, r1
    4788:	mov	r1, r0
    478c:	ldr	r0, [r0, #4]
    4790:	mov	sl, r2
    4794:	mov	r4, r3
    4798:	add	r0, r1, r0, lsl #4
    479c:	ldr	r0, [r0, #-8]
    47a0:	ldr	r2, [r0, #8]
    47a4:	cmp	r2, #2
    47a8:	beq	4830 <coda_mem_cursor_read_int64_partial_array+0xb8>
    47ac:	cmp	r2, #1
    47b0:	bne	495c <coda_mem_cursor_read_int64_partial_array+0x1e4>
    47b4:	mov	r0, sp
    47b8:	mov	r2, #520	; 0x208
    47bc:	bl	0 <memcpy>
    47c0:	cmp	sl, #1
    47c4:	blt	48f8 <coda_mem_cursor_read_int64_partial_array+0x180>
    47c8:	mov	r0, sp
    47cc:	mov	r1, r6
    47d0:	bl	0 <coda_cursor_goto_array_element_by_index>
    47d4:	mvn	r6, #0
    47d8:	cmp	r0, #0
    47dc:	bne	48fc <coda_mem_cursor_read_int64_partial_array+0x184>
    47e0:	sub	r7, sl, #1
    47e4:	mov	r5, #0
    47e8:	mov	r8, sp
    47ec:	b	4800 <coda_mem_cursor_read_int64_partial_array+0x88>
    47f0:	add	r5, r5, #1
    47f4:	add	r4, r4, #8
    47f8:	cmp	sl, r5
    47fc:	beq	48f8 <coda_mem_cursor_read_int64_partial_array+0x180>
    4800:	mov	r0, r8
    4804:	mov	r1, r4
    4808:	bl	0 <coda_cursor_read_int64>
    480c:	cmp	r0, #0
    4810:	bne	48fc <coda_mem_cursor_read_int64_partial_array+0x184>
    4814:	cmp	r5, r7
    4818:	bge	47f0 <coda_mem_cursor_read_int64_partial_array+0x78>
    481c:	mov	r0, r8
    4820:	bl	0 <coda_cursor_goto_next_array_element>
    4824:	cmp	r0, #0
    4828:	beq	47f0 <coda_mem_cursor_read_int64_partial_array+0x78>
    482c:	b	48fc <coda_mem_cursor_read_int64_partial_array+0x184>
    4830:	ldr	r0, [r0, #4]
    4834:	ldr	r0, [r0, #40]	; 0x28
    4838:	ldr	r0, [r0]
    483c:	cmp	r0, #0
    4840:	beq	48c8 <coda_mem_cursor_read_int64_partial_array+0x150>
    4844:	cmp	r0, #1
    4848:	bne	4974 <coda_mem_cursor_read_int64_partial_array+0x1fc>
    484c:	mov	r0, sp
    4850:	mov	r2, #520	; 0x208
    4854:	bl	0 <memcpy>
    4858:	cmp	sl, #1
    485c:	blt	48f8 <coda_mem_cursor_read_int64_partial_array+0x180>
    4860:	mov	r0, sp
    4864:	mov	r1, r6
    4868:	bl	0 <coda_cursor_goto_array_element_by_index>
    486c:	cmp	r0, #0
    4870:	bne	48f0 <coda_mem_cursor_read_int64_partial_array+0x178>
    4874:	sub	r9, sl, #1
    4878:	mov	r7, #0
    487c:	mov	r8, sp
    4880:	mov	r6, #0
    4884:	b	4898 <coda_mem_cursor_read_int64_partial_array+0x120>
    4888:	add	r7, r7, #1
    488c:	add	r4, r4, #8
    4890:	cmp	sl, r7
    4894:	beq	48fc <coda_mem_cursor_read_int64_partial_array+0x184>
    4898:	mov	r0, r8
    489c:	mov	r1, r4
    48a0:	bl	0 <coda_bin_cursor_read_int64>
    48a4:	cmp	r0, #0
    48a8:	bne	48f0 <coda_mem_cursor_read_int64_partial_array+0x178>
    48ac:	cmp	r7, r9
    48b0:	bge	4888 <coda_mem_cursor_read_int64_partial_array+0x110>
    48b4:	mov	r0, r8
    48b8:	bl	0 <coda_cursor_goto_next_array_element>
    48bc:	cmp	r0, #0
    48c0:	beq	4888 <coda_mem_cursor_read_int64_partial_array+0x110>
    48c4:	b	48f0 <coda_mem_cursor_read_int64_partial_array+0x178>
    48c8:	mov	r0, sp
    48cc:	mov	r2, #520	; 0x208
    48d0:	bl	0 <memcpy>
    48d4:	cmp	sl, #1
    48d8:	blt	48f8 <coda_mem_cursor_read_int64_partial_array+0x180>
    48dc:	mov	r0, sp
    48e0:	mov	r1, r6
    48e4:	bl	0 <coda_cursor_goto_array_element_by_index>
    48e8:	cmp	r0, #0
    48ec:	beq	4908 <coda_mem_cursor_read_int64_partial_array+0x190>
    48f0:	mvn	r6, #0
    48f4:	b	48fc <coda_mem_cursor_read_int64_partial_array+0x184>
    48f8:	mov	r6, #0
    48fc:	mov	r0, r6
    4900:	sub	sp, fp, #28
    4904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4908:	sub	r9, sl, #1
    490c:	mov	r7, #0
    4910:	mov	r8, sp
    4914:	mov	r6, #0
    4918:	b	492c <coda_mem_cursor_read_int64_partial_array+0x1b4>
    491c:	add	r7, r7, #1
    4920:	add	r4, r4, #8
    4924:	cmp	sl, r7
    4928:	beq	48fc <coda_mem_cursor_read_int64_partial_array+0x184>
    492c:	mov	r0, r8
    4930:	mov	r1, r4
    4934:	bl	0 <coda_ascii_cursor_read_int64>
    4938:	cmp	r0, #0
    493c:	bne	48f0 <coda_mem_cursor_read_int64_partial_array+0x178>
    4940:	cmp	r7, r9
    4944:	bge	491c <coda_mem_cursor_read_int64_partial_array+0x1a4>
    4948:	mov	r0, r8
    494c:	bl	0 <coda_cursor_goto_next_array_element>
    4950:	cmp	r0, #0
    4954:	beq	491c <coda_mem_cursor_read_int64_partial_array+0x1a4>
    4958:	b	48f0 <coda_mem_cursor_read_int64_partial_array+0x178>
    495c:	movw	r0, #0
    4960:	movw	r1, #0
    4964:	movw	r3, #0
    4968:	movw	r2, #1111	; 0x457
    496c:	movt	r0, #0
    4970:	b	4988 <coda_mem_cursor_read_int64_partial_array+0x210>
    4974:	movw	r0, #0
    4978:	movw	r1, #0
    497c:	movw	r3, #0
    4980:	movw	r2, #1117	; 0x45d
    4984:	movt	r0, #0
    4988:	movt	r1, #0
    498c:	movt	r3, #0
    4990:	bl	0 <__assert_fail>

00004994 <coda_mem_cursor_read_uint64_partial_array>:
    4994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4998:	add	fp, sp, #28
    499c:	sub	sp, sp, #524	; 0x20c
    49a0:	mov	r6, r1
    49a4:	mov	r1, r0
    49a8:	ldr	r0, [r0, #4]
    49ac:	mov	sl, r2
    49b0:	mov	r4, r3
    49b4:	add	r0, r1, r0, lsl #4
    49b8:	ldr	r0, [r0, #-8]
    49bc:	ldr	r2, [r0, #8]
    49c0:	cmp	r2, #2
    49c4:	beq	4a4c <coda_mem_cursor_read_uint64_partial_array+0xb8>
    49c8:	cmp	r2, #1
    49cc:	bne	4b78 <coda_mem_cursor_read_uint64_partial_array+0x1e4>
    49d0:	mov	r0, sp
    49d4:	mov	r2, #520	; 0x208
    49d8:	bl	0 <memcpy>
    49dc:	cmp	sl, #1
    49e0:	blt	4b14 <coda_mem_cursor_read_uint64_partial_array+0x180>
    49e4:	mov	r0, sp
    49e8:	mov	r1, r6
    49ec:	bl	0 <coda_cursor_goto_array_element_by_index>
    49f0:	mvn	r6, #0
    49f4:	cmp	r0, #0
    49f8:	bne	4b18 <coda_mem_cursor_read_uint64_partial_array+0x184>
    49fc:	sub	r7, sl, #1
    4a00:	mov	r5, #0
    4a04:	mov	r8, sp
    4a08:	b	4a1c <coda_mem_cursor_read_uint64_partial_array+0x88>
    4a0c:	add	r5, r5, #1
    4a10:	add	r4, r4, #8
    4a14:	cmp	sl, r5
    4a18:	beq	4b14 <coda_mem_cursor_read_uint64_partial_array+0x180>
    4a1c:	mov	r0, r8
    4a20:	mov	r1, r4
    4a24:	bl	0 <coda_cursor_read_uint64>
    4a28:	cmp	r0, #0
    4a2c:	bne	4b18 <coda_mem_cursor_read_uint64_partial_array+0x184>
    4a30:	cmp	r5, r7
    4a34:	bge	4a0c <coda_mem_cursor_read_uint64_partial_array+0x78>
    4a38:	mov	r0, r8
    4a3c:	bl	0 <coda_cursor_goto_next_array_element>
    4a40:	cmp	r0, #0
    4a44:	beq	4a0c <coda_mem_cursor_read_uint64_partial_array+0x78>
    4a48:	b	4b18 <coda_mem_cursor_read_uint64_partial_array+0x184>
    4a4c:	ldr	r0, [r0, #4]
    4a50:	ldr	r0, [r0, #40]	; 0x28
    4a54:	ldr	r0, [r0]
    4a58:	cmp	r0, #0
    4a5c:	beq	4ae4 <coda_mem_cursor_read_uint64_partial_array+0x150>
    4a60:	cmp	r0, #1
    4a64:	bne	4b90 <coda_mem_cursor_read_uint64_partial_array+0x1fc>
    4a68:	mov	r0, sp
    4a6c:	mov	r2, #520	; 0x208
    4a70:	bl	0 <memcpy>
    4a74:	cmp	sl, #1
    4a78:	blt	4b14 <coda_mem_cursor_read_uint64_partial_array+0x180>
    4a7c:	mov	r0, sp
    4a80:	mov	r1, r6
    4a84:	bl	0 <coda_cursor_goto_array_element_by_index>
    4a88:	cmp	r0, #0
    4a8c:	bne	4b0c <coda_mem_cursor_read_uint64_partial_array+0x178>
    4a90:	sub	r9, sl, #1
    4a94:	mov	r7, #0
    4a98:	mov	r8, sp
    4a9c:	mov	r6, #0
    4aa0:	b	4ab4 <coda_mem_cursor_read_uint64_partial_array+0x120>
    4aa4:	add	r7, r7, #1
    4aa8:	add	r4, r4, #8
    4aac:	cmp	sl, r7
    4ab0:	beq	4b18 <coda_mem_cursor_read_uint64_partial_array+0x184>
    4ab4:	mov	r0, r8
    4ab8:	mov	r1, r4
    4abc:	bl	0 <coda_bin_cursor_read_uint64>
    4ac0:	cmp	r0, #0
    4ac4:	bne	4b0c <coda_mem_cursor_read_uint64_partial_array+0x178>
    4ac8:	cmp	r7, r9
    4acc:	bge	4aa4 <coda_mem_cursor_read_uint64_partial_array+0x110>
    4ad0:	mov	r0, r8
    4ad4:	bl	0 <coda_cursor_goto_next_array_element>
    4ad8:	cmp	r0, #0
    4adc:	beq	4aa4 <coda_mem_cursor_read_uint64_partial_array+0x110>
    4ae0:	b	4b0c <coda_mem_cursor_read_uint64_partial_array+0x178>
    4ae4:	mov	r0, sp
    4ae8:	mov	r2, #520	; 0x208
    4aec:	bl	0 <memcpy>
    4af0:	cmp	sl, #1
    4af4:	blt	4b14 <coda_mem_cursor_read_uint64_partial_array+0x180>
    4af8:	mov	r0, sp
    4afc:	mov	r1, r6
    4b00:	bl	0 <coda_cursor_goto_array_element_by_index>
    4b04:	cmp	r0, #0
    4b08:	beq	4b24 <coda_mem_cursor_read_uint64_partial_array+0x190>
    4b0c:	mvn	r6, #0
    4b10:	b	4b18 <coda_mem_cursor_read_uint64_partial_array+0x184>
    4b14:	mov	r6, #0
    4b18:	mov	r0, r6
    4b1c:	sub	sp, fp, #28
    4b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b24:	sub	r9, sl, #1
    4b28:	mov	r7, #0
    4b2c:	mov	r8, sp
    4b30:	mov	r6, #0
    4b34:	b	4b48 <coda_mem_cursor_read_uint64_partial_array+0x1b4>
    4b38:	add	r7, r7, #1
    4b3c:	add	r4, r4, #8
    4b40:	cmp	sl, r7
    4b44:	beq	4b18 <coda_mem_cursor_read_uint64_partial_array+0x184>
    4b48:	mov	r0, r8
    4b4c:	mov	r1, r4
    4b50:	bl	0 <coda_ascii_cursor_read_uint64>
    4b54:	cmp	r0, #0
    4b58:	bne	4b0c <coda_mem_cursor_read_uint64_partial_array+0x178>
    4b5c:	cmp	r7, r9
    4b60:	bge	4b38 <coda_mem_cursor_read_uint64_partial_array+0x1a4>
    4b64:	mov	r0, r8
    4b68:	bl	0 <coda_cursor_goto_next_array_element>
    4b6c:	cmp	r0, #0
    4b70:	beq	4b38 <coda_mem_cursor_read_uint64_partial_array+0x1a4>
    4b74:	b	4b0c <coda_mem_cursor_read_uint64_partial_array+0x178>
    4b78:	movw	r0, #0
    4b7c:	movw	r1, #0
    4b80:	movw	r3, #0
    4b84:	movw	r2, #1131	; 0x46b
    4b88:	movt	r0, #0
    4b8c:	b	4ba4 <coda_mem_cursor_read_uint64_partial_array+0x210>
    4b90:	movw	r0, #0
    4b94:	movw	r1, #0
    4b98:	movw	r3, #0
    4b9c:	movw	r2, #1137	; 0x471
    4ba0:	movt	r0, #0
    4ba4:	movt	r1, #0
    4ba8:	movt	r3, #0
    4bac:	bl	0 <__assert_fail>

00004bb0 <coda_mem_cursor_read_float_partial_array>:
    4bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bb4:	add	fp, sp, #28
    4bb8:	sub	sp, sp, #524	; 0x20c
    4bbc:	mov	r6, r1
    4bc0:	mov	r1, r0
    4bc4:	ldr	r0, [r0, #4]
    4bc8:	mov	sl, r2
    4bcc:	mov	r4, r3
    4bd0:	add	r0, r1, r0, lsl #4
    4bd4:	ldr	r0, [r0, #-8]
    4bd8:	ldr	r2, [r0, #8]
    4bdc:	cmp	r2, #2
    4be0:	beq	4c68 <coda_mem_cursor_read_float_partial_array+0xb8>
    4be4:	cmp	r2, #1
    4be8:	bne	4d94 <coda_mem_cursor_read_float_partial_array+0x1e4>
    4bec:	mov	r0, sp
    4bf0:	mov	r2, #520	; 0x208
    4bf4:	bl	0 <memcpy>
    4bf8:	cmp	sl, #1
    4bfc:	blt	4d30 <coda_mem_cursor_read_float_partial_array+0x180>
    4c00:	mov	r0, sp
    4c04:	mov	r1, r6
    4c08:	bl	0 <coda_cursor_goto_array_element_by_index>
    4c0c:	mvn	r6, #0
    4c10:	cmp	r0, #0
    4c14:	bne	4d34 <coda_mem_cursor_read_float_partial_array+0x184>
    4c18:	sub	r7, sl, #1
    4c1c:	mov	r5, #0
    4c20:	mov	r8, sp
    4c24:	b	4c38 <coda_mem_cursor_read_float_partial_array+0x88>
    4c28:	add	r5, r5, #1
    4c2c:	add	r4, r4, #4
    4c30:	cmp	sl, r5
    4c34:	beq	4d30 <coda_mem_cursor_read_float_partial_array+0x180>
    4c38:	mov	r0, r8
    4c3c:	mov	r1, r4
    4c40:	bl	0 <coda_cursor_read_float>
    4c44:	cmp	r0, #0
    4c48:	bne	4d34 <coda_mem_cursor_read_float_partial_array+0x184>
    4c4c:	cmp	r5, r7
    4c50:	bge	4c28 <coda_mem_cursor_read_float_partial_array+0x78>
    4c54:	mov	r0, r8
    4c58:	bl	0 <coda_cursor_goto_next_array_element>
    4c5c:	cmp	r0, #0
    4c60:	beq	4c28 <coda_mem_cursor_read_float_partial_array+0x78>
    4c64:	b	4d34 <coda_mem_cursor_read_float_partial_array+0x184>
    4c68:	ldr	r0, [r0, #4]
    4c6c:	ldr	r0, [r0, #40]	; 0x28
    4c70:	ldr	r0, [r0]
    4c74:	cmp	r0, #0
    4c78:	beq	4d00 <coda_mem_cursor_read_float_partial_array+0x150>
    4c7c:	cmp	r0, #1
    4c80:	bne	4dac <coda_mem_cursor_read_float_partial_array+0x1fc>
    4c84:	mov	r0, sp
    4c88:	mov	r2, #520	; 0x208
    4c8c:	bl	0 <memcpy>
    4c90:	cmp	sl, #1
    4c94:	blt	4d30 <coda_mem_cursor_read_float_partial_array+0x180>
    4c98:	mov	r0, sp
    4c9c:	mov	r1, r6
    4ca0:	bl	0 <coda_cursor_goto_array_element_by_index>
    4ca4:	cmp	r0, #0
    4ca8:	bne	4d28 <coda_mem_cursor_read_float_partial_array+0x178>
    4cac:	sub	r9, sl, #1
    4cb0:	mov	r7, #0
    4cb4:	mov	r8, sp
    4cb8:	mov	r6, #0
    4cbc:	b	4cd0 <coda_mem_cursor_read_float_partial_array+0x120>
    4cc0:	add	r7, r7, #1
    4cc4:	add	r4, r4, #4
    4cc8:	cmp	sl, r7
    4ccc:	beq	4d34 <coda_mem_cursor_read_float_partial_array+0x184>
    4cd0:	mov	r0, r8
    4cd4:	mov	r1, r4
    4cd8:	bl	0 <coda_bin_cursor_read_float>
    4cdc:	cmp	r0, #0
    4ce0:	bne	4d28 <coda_mem_cursor_read_float_partial_array+0x178>
    4ce4:	cmp	r7, r9
    4ce8:	bge	4cc0 <coda_mem_cursor_read_float_partial_array+0x110>
    4cec:	mov	r0, r8
    4cf0:	bl	0 <coda_cursor_goto_next_array_element>
    4cf4:	cmp	r0, #0
    4cf8:	beq	4cc0 <coda_mem_cursor_read_float_partial_array+0x110>
    4cfc:	b	4d28 <coda_mem_cursor_read_float_partial_array+0x178>
    4d00:	mov	r0, sp
    4d04:	mov	r2, #520	; 0x208
    4d08:	bl	0 <memcpy>
    4d0c:	cmp	sl, #1
    4d10:	blt	4d30 <coda_mem_cursor_read_float_partial_array+0x180>
    4d14:	mov	r0, sp
    4d18:	mov	r1, r6
    4d1c:	bl	0 <coda_cursor_goto_array_element_by_index>
    4d20:	cmp	r0, #0
    4d24:	beq	4d40 <coda_mem_cursor_read_float_partial_array+0x190>
    4d28:	mvn	r6, #0
    4d2c:	b	4d34 <coda_mem_cursor_read_float_partial_array+0x184>
    4d30:	mov	r6, #0
    4d34:	mov	r0, r6
    4d38:	sub	sp, fp, #28
    4d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d40:	sub	r9, sl, #1
    4d44:	mov	r7, #0
    4d48:	mov	r8, sp
    4d4c:	mov	r6, #0
    4d50:	b	4d64 <coda_mem_cursor_read_float_partial_array+0x1b4>
    4d54:	add	r7, r7, #1
    4d58:	add	r4, r4, #4
    4d5c:	cmp	sl, r7
    4d60:	beq	4d34 <coda_mem_cursor_read_float_partial_array+0x184>
    4d64:	mov	r0, r8
    4d68:	mov	r1, r4
    4d6c:	bl	0 <coda_ascii_cursor_read_float>
    4d70:	cmp	r0, #0
    4d74:	bne	4d28 <coda_mem_cursor_read_float_partial_array+0x178>
    4d78:	cmp	r7, r9
    4d7c:	bge	4d54 <coda_mem_cursor_read_float_partial_array+0x1a4>
    4d80:	mov	r0, r8
    4d84:	bl	0 <coda_cursor_goto_next_array_element>
    4d88:	cmp	r0, #0
    4d8c:	beq	4d54 <coda_mem_cursor_read_float_partial_array+0x1a4>
    4d90:	b	4d28 <coda_mem_cursor_read_float_partial_array+0x178>
    4d94:	movw	r0, #0
    4d98:	movw	r1, #0
    4d9c:	movw	r3, #0
    4da0:	movw	r2, #1151	; 0x47f
    4da4:	movt	r0, #0
    4da8:	b	4dc0 <coda_mem_cursor_read_float_partial_array+0x210>
    4dac:	movw	r0, #0
    4db0:	movw	r1, #0
    4db4:	movw	r3, #0
    4db8:	movw	r2, #1157	; 0x485
    4dbc:	movt	r0, #0
    4dc0:	movt	r1, #0
    4dc4:	movt	r3, #0
    4dc8:	bl	0 <__assert_fail>

00004dcc <coda_mem_cursor_read_double_partial_array>:
    4dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dd0:	add	fp, sp, #28
    4dd4:	sub	sp, sp, #524	; 0x20c
    4dd8:	mov	r6, r1
    4ddc:	mov	r1, r0
    4de0:	ldr	r0, [r0, #4]
    4de4:	mov	sl, r2
    4de8:	mov	r4, r3
    4dec:	add	r0, r1, r0, lsl #4
    4df0:	ldr	r0, [r0, #-8]
    4df4:	ldr	r2, [r0, #8]
    4df8:	cmp	r2, #2
    4dfc:	beq	4e84 <coda_mem_cursor_read_double_partial_array+0xb8>
    4e00:	cmp	r2, #1
    4e04:	bne	4fb0 <coda_mem_cursor_read_double_partial_array+0x1e4>
    4e08:	mov	r0, sp
    4e0c:	mov	r2, #520	; 0x208
    4e10:	bl	0 <memcpy>
    4e14:	cmp	sl, #1
    4e18:	blt	4f4c <coda_mem_cursor_read_double_partial_array+0x180>
    4e1c:	mov	r0, sp
    4e20:	mov	r1, r6
    4e24:	bl	0 <coda_cursor_goto_array_element_by_index>
    4e28:	mvn	r6, #0
    4e2c:	cmp	r0, #0
    4e30:	bne	4f50 <coda_mem_cursor_read_double_partial_array+0x184>
    4e34:	sub	r7, sl, #1
    4e38:	mov	r5, #0
    4e3c:	mov	r8, sp
    4e40:	b	4e54 <coda_mem_cursor_read_double_partial_array+0x88>
    4e44:	add	r5, r5, #1
    4e48:	add	r4, r4, #8
    4e4c:	cmp	sl, r5
    4e50:	beq	4f4c <coda_mem_cursor_read_double_partial_array+0x180>
    4e54:	mov	r0, r8
    4e58:	mov	r1, r4
    4e5c:	bl	0 <coda_cursor_read_double>
    4e60:	cmp	r0, #0
    4e64:	bne	4f50 <coda_mem_cursor_read_double_partial_array+0x184>
    4e68:	cmp	r5, r7
    4e6c:	bge	4e44 <coda_mem_cursor_read_double_partial_array+0x78>
    4e70:	mov	r0, r8
    4e74:	bl	0 <coda_cursor_goto_next_array_element>
    4e78:	cmp	r0, #0
    4e7c:	beq	4e44 <coda_mem_cursor_read_double_partial_array+0x78>
    4e80:	b	4f50 <coda_mem_cursor_read_double_partial_array+0x184>
    4e84:	ldr	r0, [r0, #4]
    4e88:	ldr	r0, [r0, #40]	; 0x28
    4e8c:	ldr	r0, [r0]
    4e90:	cmp	r0, #0
    4e94:	beq	4f1c <coda_mem_cursor_read_double_partial_array+0x150>
    4e98:	cmp	r0, #1
    4e9c:	bne	4fc8 <coda_mem_cursor_read_double_partial_array+0x1fc>
    4ea0:	mov	r0, sp
    4ea4:	mov	r2, #520	; 0x208
    4ea8:	bl	0 <memcpy>
    4eac:	cmp	sl, #1
    4eb0:	blt	4f4c <coda_mem_cursor_read_double_partial_array+0x180>
    4eb4:	mov	r0, sp
    4eb8:	mov	r1, r6
    4ebc:	bl	0 <coda_cursor_goto_array_element_by_index>
    4ec0:	cmp	r0, #0
    4ec4:	bne	4f44 <coda_mem_cursor_read_double_partial_array+0x178>
    4ec8:	sub	r9, sl, #1
    4ecc:	mov	r7, #0
    4ed0:	mov	r8, sp
    4ed4:	mov	r6, #0
    4ed8:	b	4eec <coda_mem_cursor_read_double_partial_array+0x120>
    4edc:	add	r7, r7, #1
    4ee0:	add	r4, r4, #8
    4ee4:	cmp	sl, r7
    4ee8:	beq	4f50 <coda_mem_cursor_read_double_partial_array+0x184>
    4eec:	mov	r0, r8
    4ef0:	mov	r1, r4
    4ef4:	bl	0 <coda_bin_cursor_read_double>
    4ef8:	cmp	r0, #0
    4efc:	bne	4f44 <coda_mem_cursor_read_double_partial_array+0x178>
    4f00:	cmp	r7, r9
    4f04:	bge	4edc <coda_mem_cursor_read_double_partial_array+0x110>
    4f08:	mov	r0, r8
    4f0c:	bl	0 <coda_cursor_goto_next_array_element>
    4f10:	cmp	r0, #0
    4f14:	beq	4edc <coda_mem_cursor_read_double_partial_array+0x110>
    4f18:	b	4f44 <coda_mem_cursor_read_double_partial_array+0x178>
    4f1c:	mov	r0, sp
    4f20:	mov	r2, #520	; 0x208
    4f24:	bl	0 <memcpy>
    4f28:	cmp	sl, #1
    4f2c:	blt	4f4c <coda_mem_cursor_read_double_partial_array+0x180>
    4f30:	mov	r0, sp
    4f34:	mov	r1, r6
    4f38:	bl	0 <coda_cursor_goto_array_element_by_index>
    4f3c:	cmp	r0, #0
    4f40:	beq	4f5c <coda_mem_cursor_read_double_partial_array+0x190>
    4f44:	mvn	r6, #0
    4f48:	b	4f50 <coda_mem_cursor_read_double_partial_array+0x184>
    4f4c:	mov	r6, #0
    4f50:	mov	r0, r6
    4f54:	sub	sp, fp, #28
    4f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f5c:	sub	r9, sl, #1
    4f60:	mov	r7, #0
    4f64:	mov	r8, sp
    4f68:	mov	r6, #0
    4f6c:	b	4f80 <coda_mem_cursor_read_double_partial_array+0x1b4>
    4f70:	add	r7, r7, #1
    4f74:	add	r4, r4, #8
    4f78:	cmp	sl, r7
    4f7c:	beq	4f50 <coda_mem_cursor_read_double_partial_array+0x184>
    4f80:	mov	r0, r8
    4f84:	mov	r1, r4
    4f88:	bl	0 <coda_ascii_cursor_read_double>
    4f8c:	cmp	r0, #0
    4f90:	bne	4f44 <coda_mem_cursor_read_double_partial_array+0x178>
    4f94:	cmp	r7, r9
    4f98:	bge	4f70 <coda_mem_cursor_read_double_partial_array+0x1a4>
    4f9c:	mov	r0, r8
    4fa0:	bl	0 <coda_cursor_goto_next_array_element>
    4fa4:	cmp	r0, #0
    4fa8:	beq	4f70 <coda_mem_cursor_read_double_partial_array+0x1a4>
    4fac:	b	4f44 <coda_mem_cursor_read_double_partial_array+0x178>
    4fb0:	movw	r0, #0
    4fb4:	movw	r1, #0
    4fb8:	movw	r3, #0
    4fbc:	movw	r2, #1171	; 0x493
    4fc0:	movt	r0, #0
    4fc4:	b	4fdc <coda_mem_cursor_read_double_partial_array+0x210>
    4fc8:	movw	r0, #0
    4fcc:	movw	r1, #0
    4fd0:	movw	r3, #0
    4fd4:	movw	r2, #1177	; 0x499
    4fd8:	movt	r0, #0
    4fdc:	movt	r1, #0
    4fe0:	movt	r3, #0
    4fe4:	bl	0 <__assert_fail>

00004fe8 <coda_mem_cursor_read_char_partial_array>:
    4fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fec:	add	fp, sp, #28
    4ff0:	sub	sp, sp, #524	; 0x20c
    4ff4:	mov	r6, r1
    4ff8:	mov	r1, r0
    4ffc:	ldr	r0, [r0, #4]
    5000:	mov	r5, r2
    5004:	mov	sl, r3
    5008:	add	r0, r1, r0, lsl #4
    500c:	ldr	r0, [r0, #-8]
    5010:	ldr	r2, [r0, #8]
    5014:	cmp	r2, #2
    5018:	beq	509c <coda_mem_cursor_read_char_partial_array+0xb4>
    501c:	cmp	r2, #1
    5020:	bne	51c0 <coda_mem_cursor_read_char_partial_array+0x1d8>
    5024:	mov	r0, sp
    5028:	mov	r2, #520	; 0x208
    502c:	bl	0 <memcpy>
    5030:	cmp	r5, #1
    5034:	blt	5160 <coda_mem_cursor_read_char_partial_array+0x178>
    5038:	mov	r0, sp
    503c:	mov	r1, r6
    5040:	bl	0 <coda_cursor_goto_array_element_by_index>
    5044:	mvn	r6, #0
    5048:	cmp	r0, #0
    504c:	bne	5164 <coda_mem_cursor_read_char_partial_array+0x17c>
    5050:	sub	r4, r5, #1
    5054:	mov	r7, #0
    5058:	mov	r8, sp
    505c:	b	506c <coda_mem_cursor_read_char_partial_array+0x84>
    5060:	add	r7, r7, #1
    5064:	cmp	r5, r7
    5068:	beq	5160 <coda_mem_cursor_read_char_partial_array+0x178>
    506c:	add	r1, sl, r7
    5070:	mov	r0, r8
    5074:	bl	0 <coda_cursor_read_char>
    5078:	cmp	r0, #0
    507c:	bne	5164 <coda_mem_cursor_read_char_partial_array+0x17c>
    5080:	cmp	r7, r4
    5084:	bge	5060 <coda_mem_cursor_read_char_partial_array+0x78>
    5088:	mov	r0, r8
    508c:	bl	0 <coda_cursor_goto_next_array_element>
    5090:	cmp	r0, #0
    5094:	beq	5060 <coda_mem_cursor_read_char_partial_array+0x78>
    5098:	b	5164 <coda_mem_cursor_read_char_partial_array+0x17c>
    509c:	ldr	r0, [r0, #4]
    50a0:	ldr	r0, [r0, #40]	; 0x28
    50a4:	ldr	r0, [r0]
    50a8:	cmp	r0, #0
    50ac:	beq	5130 <coda_mem_cursor_read_char_partial_array+0x148>
    50b0:	cmp	r0, #1
    50b4:	bne	51d8 <coda_mem_cursor_read_char_partial_array+0x1f0>
    50b8:	mov	r0, sp
    50bc:	mov	r2, #520	; 0x208
    50c0:	bl	0 <memcpy>
    50c4:	cmp	r5, #1
    50c8:	blt	5160 <coda_mem_cursor_read_char_partial_array+0x178>
    50cc:	mov	r0, sp
    50d0:	mov	r1, r6
    50d4:	bl	0 <coda_cursor_goto_array_element_by_index>
    50d8:	cmp	r0, #0
    50dc:	bne	5158 <coda_mem_cursor_read_char_partial_array+0x170>
    50e0:	sub	r9, r5, #1
    50e4:	mov	r7, #0
    50e8:	mov	r8, sp
    50ec:	mov	r6, #0
    50f0:	b	5100 <coda_mem_cursor_read_char_partial_array+0x118>
    50f4:	add	r7, r7, #1
    50f8:	cmp	r5, r7
    50fc:	beq	5164 <coda_mem_cursor_read_char_partial_array+0x17c>
    5100:	add	r1, sl, r7
    5104:	mov	r0, r8
    5108:	bl	0 <coda_bin_cursor_read_char>
    510c:	cmp	r0, #0
    5110:	bne	5158 <coda_mem_cursor_read_char_partial_array+0x170>
    5114:	cmp	r7, r9
    5118:	bge	50f4 <coda_mem_cursor_read_char_partial_array+0x10c>
    511c:	mov	r0, r8
    5120:	bl	0 <coda_cursor_goto_next_array_element>
    5124:	cmp	r0, #0
    5128:	beq	50f4 <coda_mem_cursor_read_char_partial_array+0x10c>
    512c:	b	5158 <coda_mem_cursor_read_char_partial_array+0x170>
    5130:	mov	r0, sp
    5134:	mov	r2, #520	; 0x208
    5138:	bl	0 <memcpy>
    513c:	cmp	r5, #1
    5140:	blt	5160 <coda_mem_cursor_read_char_partial_array+0x178>
    5144:	mov	r0, sp
    5148:	mov	r1, r6
    514c:	bl	0 <coda_cursor_goto_array_element_by_index>
    5150:	cmp	r0, #0
    5154:	beq	5170 <coda_mem_cursor_read_char_partial_array+0x188>
    5158:	mvn	r6, #0
    515c:	b	5164 <coda_mem_cursor_read_char_partial_array+0x17c>
    5160:	mov	r6, #0
    5164:	mov	r0, r6
    5168:	sub	sp, fp, #28
    516c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5170:	sub	r9, r5, #1
    5174:	mov	r7, #0
    5178:	mov	r8, sp
    517c:	mov	r6, #0
    5180:	b	5190 <coda_mem_cursor_read_char_partial_array+0x1a8>
    5184:	add	r7, r7, #1
    5188:	cmp	r5, r7
    518c:	beq	5164 <coda_mem_cursor_read_char_partial_array+0x17c>
    5190:	add	r1, sl, r7
    5194:	mov	r0, r8
    5198:	bl	0 <coda_ascii_cursor_read_char>
    519c:	cmp	r0, #0
    51a0:	bne	5158 <coda_mem_cursor_read_char_partial_array+0x170>
    51a4:	cmp	r7, r9
    51a8:	bge	5184 <coda_mem_cursor_read_char_partial_array+0x19c>
    51ac:	mov	r0, r8
    51b0:	bl	0 <coda_cursor_goto_next_array_element>
    51b4:	cmp	r0, #0
    51b8:	beq	5184 <coda_mem_cursor_read_char_partial_array+0x19c>
    51bc:	b	5158 <coda_mem_cursor_read_char_partial_array+0x170>
    51c0:	movw	r0, #0
    51c4:	movw	r1, #0
    51c8:	movw	r3, #0
    51cc:	movw	r2, #1191	; 0x4a7
    51d0:	movt	r0, #0
    51d4:	b	51ec <coda_mem_cursor_read_char_partial_array+0x204>
    51d8:	movw	r0, #0
    51dc:	movw	r1, #0
    51e0:	movw	r3, #0
    51e4:	movw	r2, #1197	; 0x4ad
    51e8:	movt	r0, #0
    51ec:	movt	r1, #0
    51f0:	movt	r3, #0
    51f4:	bl	0 <__assert_fail>
