
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #632	; 0x278
      10:	str	r0, [fp, #-624]	; 0xfffffd90
      14:	str	r1, [fp, #-628]	; 0xfffffd8c
      18:	str	r2, [fp, #-632]	; 0xfffffd88
      1c:	str	r3, [fp, #-636]	; 0xfffffd84
      20:	sub	r2, fp, #580	; 0x244
      24:	sub	r3, fp, #584	; 0x248
      28:	mov	r1, r3
      2c:	ldr	r0, [fp, #-624]	; 0xfffffd90
      30:	bl	0 <coda_cursor_get_array_dim>
      34:	mov	r3, r0
      38:	cmp	r3, #0
      3c:	beq	48 <read_array+0x48>
      40:	mvn	r3, #0
      44:	b	3f4 <read_array+0x3f4>
      48:	ldr	r2, [fp, #-624]	; 0xfffffd90
      4c:	sub	r3, fp, #548	; 0x224
      50:	mov	r1, r2
      54:	mov	r2, #520	; 0x208
      58:	mov	r0, r3
      5c:	bl	0 <memcpy>
      60:	ldr	r3, [fp, #-584]	; 0xfffffdb8
      64:	cmp	r3, #1
      68:	ble	78 <read_array+0x78>
      6c:	ldr	r3, [fp, #4]
      70:	cmp	r3, #1
      74:	beq	194 <read_array+0x194>
      78:	mov	r3, #1
      7c:	str	r3, [fp, #-8]
      80:	mov	r3, #0
      84:	str	r3, [fp, #-12]
      88:	b	b8 <read_array+0xb8>
      8c:	ldr	r3, [fp, #-12]
      90:	lsl	r3, r3, #2
      94:	sub	r2, fp, #4
      98:	add	r3, r2, r3
      9c:	ldr	r2, [r3, #-576]	; 0xfffffdc0
      a0:	ldr	r3, [fp, #-8]
      a4:	mul	r3, r2, r3
      a8:	str	r3, [fp, #-8]
      ac:	ldr	r3, [fp, #-12]
      b0:	add	r3, r3, #1
      b4:	str	r3, [fp, #-12]
      b8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
      bc:	ldr	r2, [fp, #-12]
      c0:	cmp	r2, r3
      c4:	blt	8c <read_array+0x8c>
      c8:	ldr	r3, [fp, #-8]
      cc:	cmp	r3, #0
      d0:	ble	3f0 <read_array+0x3f0>
      d4:	sub	r3, fp, #548	; 0x224
      d8:	mov	r1, #0
      dc:	mov	r0, r3
      e0:	bl	0 <coda_cursor_goto_array_element_by_index>
      e4:	mov	r3, r0
      e8:	cmp	r3, #0
      ec:	beq	f8 <read_array+0xf8>
      f0:	mvn	r3, #0
      f4:	b	3f4 <read_array+0x3f4>
      f8:	mov	r3, #0
      fc:	str	r3, [fp, #-12]
     100:	b	180 <read_array+0x180>
     104:	ldr	r3, [fp, #-12]
     108:	ldr	r2, [fp, #-636]	; 0xfffffd84
     10c:	mul	r3, r2, r3
     110:	mov	r2, r3
     114:	ldr	r3, [fp, #-632]	; 0xfffffd88
     118:	add	r1, r3, r2
     11c:	sub	r2, fp, #548	; 0x224
     120:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     124:	mov	r0, r2
     128:	blx	r3
     12c:	mov	r3, r0
     130:	cmp	r3, #0
     134:	beq	140 <read_array+0x140>
     138:	mvn	r3, #0
     13c:	b	3f4 <read_array+0x3f4>
     140:	ldr	r3, [fp, #-8]
     144:	sub	r3, r3, #1
     148:	ldr	r2, [fp, #-12]
     14c:	cmp	r2, r3
     150:	bge	174 <read_array+0x174>
     154:	sub	r3, fp, #548	; 0x224
     158:	mov	r0, r3
     15c:	bl	0 <coda_cursor_goto_next_array_element>
     160:	mov	r3, r0
     164:	cmp	r3, #0
     168:	beq	174 <read_array+0x174>
     16c:	mvn	r3, #0
     170:	b	3f4 <read_array+0x3f4>
     174:	ldr	r3, [fp, #-12]
     178:	add	r3, r3, #1
     17c:	str	r3, [fp, #-12]
     180:	ldr	r2, [fp, #-12]
     184:	ldr	r3, [fp, #-8]
     188:	cmp	r2, r3
     18c:	blt	104 <read_array+0x104>
     190:	b	3f0 <read_array+0x3f0>
     194:	mov	r3, #1
     198:	str	r3, [fp, #-620]	; 0xfffffd94
     19c:	mov	r3, #0
     1a0:	str	r3, [fp, #-12]
     1a4:	b	1f8 <read_array+0x1f8>
     1a8:	ldr	r3, [fp, #-12]
     1ac:	lsl	r3, r3, #2
     1b0:	sub	r2, fp, #4
     1b4:	add	r3, r2, r3
     1b8:	ldr	r2, [r3, #-616]	; 0xfffffd98
     1bc:	ldr	r3, [fp, #-12]
     1c0:	lsl	r3, r3, #2
     1c4:	sub	r1, fp, #4
     1c8:	add	r3, r1, r3
     1cc:	ldr	r1, [r3, #-576]	; 0xfffffdc0
     1d0:	ldr	r3, [fp, #-12]
     1d4:	add	r3, r3, #1
     1d8:	mul	r2, r1, r2
     1dc:	lsl	r3, r3, #2
     1e0:	sub	r1, fp, #4
     1e4:	add	r3, r1, r3
     1e8:	str	r2, [r3, #-616]	; 0xfffffd98
     1ec:	ldr	r3, [fp, #-12]
     1f0:	add	r3, r3, #1
     1f4:	str	r3, [fp, #-12]
     1f8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     1fc:	ldr	r2, [fp, #-12]
     200:	cmp	r2, r3
     204:	blt	1a8 <read_array+0x1a8>
     208:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     20c:	sub	r3, r3, #1
     210:	lsl	r3, r3, #2
     214:	sub	r2, fp, #4
     218:	add	r3, r2, r3
     21c:	ldr	r3, [r3, #-616]	; 0xfffffd98
     220:	str	r3, [fp, #-24]	; 0xffffffe8
     224:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     228:	lsl	r3, r3, #2
     22c:	sub	r2, fp, #4
     230:	add	r3, r2, r3
     234:	ldr	r3, [r3, #-616]	; 0xfffffd98
     238:	str	r3, [fp, #-8]
     23c:	ldr	r3, [fp, #-8]
     240:	cmp	r3, #0
     244:	ble	3f0 <read_array+0x3f0>
     248:	mov	r3, #0
     24c:	str	r3, [fp, #-16]
     250:	mov	r3, #0
     254:	str	r3, [fp, #-20]	; 0xffffffec
     258:	sub	r3, fp, #548	; 0x224
     25c:	mov	r1, #0
     260:	mov	r0, r3
     264:	bl	0 <coda_cursor_goto_array_element_by_index>
     268:	mov	r3, r0
     26c:	cmp	r3, #0
     270:	beq	27c <read_array+0x27c>
     274:	mvn	r3, #0
     278:	b	3f4 <read_array+0x3f4>
     27c:	ldr	r3, [fp, #-20]	; 0xffffffec
     280:	ldr	r2, [fp, #-636]	; 0xfffffd84
     284:	mul	r3, r2, r3
     288:	mov	r2, r3
     28c:	ldr	r3, [fp, #-632]	; 0xfffffd88
     290:	add	r1, r3, r2
     294:	sub	r2, fp, #548	; 0x224
     298:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     29c:	mov	r0, r2
     2a0:	blx	r3
     2a4:	mov	r3, r0
     2a8:	cmp	r3, #0
     2ac:	beq	2b8 <read_array+0x2b8>
     2b0:	mvn	r3, #0
     2b4:	b	3f4 <read_array+0x3f4>
     2b8:	ldr	r3, [fp, #-16]
     2bc:	add	r3, r3, #1
     2c0:	str	r3, [fp, #-16]
     2c4:	ldr	r2, [fp, #-16]
     2c8:	ldr	r3, [fp, #-8]
     2cc:	cmp	r2, r3
     2d0:	bge	2f4 <read_array+0x2f4>
     2d4:	sub	r3, fp, #548	; 0x224
     2d8:	mov	r0, r3
     2dc:	bl	0 <coda_cursor_goto_next_array_element>
     2e0:	mov	r3, r0
     2e4:	cmp	r3, #0
     2e8:	beq	2f4 <read_array+0x2f4>
     2ec:	mvn	r3, #0
     2f0:	b	3f4 <read_array+0x3f4>
     2f4:	ldr	r2, [fp, #-20]	; 0xffffffec
     2f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     2fc:	add	r3, r2, r3
     300:	str	r3, [fp, #-20]	; 0xffffffec
     304:	ldr	r2, [fp, #-20]	; 0xffffffec
     308:	ldr	r3, [fp, #-8]
     30c:	cmp	r2, r3
     310:	blt	27c <read_array+0x27c>
     314:	ldr	r2, [fp, #-16]
     318:	ldr	r3, [fp, #-8]
     31c:	cmp	r2, r3
     320:	beq	3ec <read_array+0x3ec>
     324:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     328:	sub	r3, r3, #2
     32c:	lsl	r3, r3, #2
     330:	sub	r2, fp, #4
     334:	add	r3, r2, r3
     338:	ldr	r2, [r3, #-616]	; 0xfffffd98
     33c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     340:	lsl	r3, r3, #2
     344:	sub	r1, fp, #4
     348:	add	r3, r1, r3
     34c:	ldr	r3, [r3, #-616]	; 0xfffffd98
     350:	sub	r3, r2, r3
     354:	ldr	r2, [fp, #-20]	; 0xffffffec
     358:	add	r3, r2, r3
     35c:	str	r3, [fp, #-20]	; 0xffffffec
     360:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     364:	sub	r3, r3, #3
     368:	str	r3, [fp, #-12]
     36c:	b	3b8 <read_array+0x3b8>
     370:	ldr	r3, [fp, #-12]
     374:	lsl	r3, r3, #2
     378:	sub	r2, fp, #4
     37c:	add	r3, r2, r3
     380:	ldr	r2, [r3, #-616]	; 0xfffffd98
     384:	ldr	r3, [fp, #-12]
     388:	add	r3, r3, #2
     38c:	lsl	r3, r3, #2
     390:	sub	r1, fp, #4
     394:	add	r3, r1, r3
     398:	ldr	r3, [r3, #-616]	; 0xfffffd98
     39c:	sub	r3, r2, r3
     3a0:	ldr	r2, [fp, #-20]	; 0xffffffec
     3a4:	add	r3, r2, r3
     3a8:	str	r3, [fp, #-20]	; 0xffffffec
     3ac:	ldr	r3, [fp, #-12]
     3b0:	sub	r3, r3, #1
     3b4:	str	r3, [fp, #-12]
     3b8:	ldr	r3, [fp, #-12]
     3bc:	cmp	r3, #0
     3c0:	blt	27c <read_array+0x27c>
     3c4:	ldr	r3, [fp, #-12]
     3c8:	add	r3, r3, #2
     3cc:	lsl	r3, r3, #2
     3d0:	sub	r2, fp, #4
     3d4:	add	r3, r2, r3
     3d8:	ldr	r3, [r3, #-616]	; 0xfffffd98
     3dc:	ldr	r2, [fp, #-20]	; 0xffffffec
     3e0:	cmp	r2, r3
     3e4:	bge	370 <read_array+0x370>
     3e8:	b	27c <read_array+0x27c>
     3ec:	nop	{0}
     3f0:	mov	r3, #0
     3f4:	mov	r0, r3
     3f8:	sub	sp, fp, #4
     3fc:	ldr	fp, [sp]
     400:	add	sp, sp, #4
     404:	pop	{pc}		; (ldr pc, [sp], #4)

00000408 <read_partial_array>:
     408:	str	fp, [sp, #-8]!
     40c:	str	lr, [sp, #4]
     410:	add	fp, sp, #4
     414:	sub	sp, sp, #544	; 0x220
     418:	str	r0, [fp, #-536]	; 0xfffffde8
     41c:	str	r1, [fp, #-540]	; 0xfffffde4
     420:	str	r2, [fp, #-544]	; 0xfffffde0
     424:	str	r3, [fp, #-548]	; 0xfffffddc
     428:	ldr	r2, [fp, #-536]	; 0xfffffde8
     42c:	sub	r3, fp, #532	; 0x214
     430:	mov	r1, r2
     434:	mov	r2, #520	; 0x208
     438:	mov	r0, r3
     43c:	bl	0 <memcpy>
     440:	ldr	r3, [fp, #-548]	; 0xfffffddc
     444:	cmp	r3, #0
     448:	ble	508 <read_partial_array+0x100>
     44c:	sub	r3, fp, #532	; 0x214
     450:	ldr	r1, [fp, #-544]	; 0xfffffde0
     454:	mov	r0, r3
     458:	bl	0 <coda_cursor_goto_array_element_by_index>
     45c:	mov	r3, r0
     460:	cmp	r3, #0
     464:	beq	470 <read_partial_array+0x68>
     468:	mvn	r3, #0
     46c:	b	50c <read_partial_array+0x104>
     470:	mov	r3, #0
     474:	str	r3, [fp, #-8]
     478:	b	4f8 <read_partial_array+0xf0>
     47c:	ldr	r3, [fp, #-8]
     480:	ldr	r2, [fp, #8]
     484:	mul	r3, r2, r3
     488:	mov	r2, r3
     48c:	ldr	r3, [fp, #4]
     490:	add	r1, r3, r2
     494:	sub	r2, fp, #532	; 0x214
     498:	ldr	r3, [fp, #-540]	; 0xfffffde4
     49c:	mov	r0, r2
     4a0:	blx	r3
     4a4:	mov	r3, r0
     4a8:	cmp	r3, #0
     4ac:	beq	4b8 <read_partial_array+0xb0>
     4b0:	mvn	r3, #0
     4b4:	b	50c <read_partial_array+0x104>
     4b8:	ldr	r3, [fp, #-548]	; 0xfffffddc
     4bc:	sub	r3, r3, #1
     4c0:	ldr	r2, [fp, #-8]
     4c4:	cmp	r2, r3
     4c8:	bge	4ec <read_partial_array+0xe4>
     4cc:	sub	r3, fp, #532	; 0x214
     4d0:	mov	r0, r3
     4d4:	bl	0 <coda_cursor_goto_next_array_element>
     4d8:	mov	r3, r0
     4dc:	cmp	r3, #0
     4e0:	beq	4ec <read_partial_array+0xe4>
     4e4:	mvn	r3, #0
     4e8:	b	50c <read_partial_array+0x104>
     4ec:	ldr	r3, [fp, #-8]
     4f0:	add	r3, r3, #1
     4f4:	str	r3, [fp, #-8]
     4f8:	ldr	r2, [fp, #-8]
     4fc:	ldr	r3, [fp, #-548]	; 0xfffffddc
     500:	cmp	r2, r3
     504:	blt	47c <read_partial_array+0x74>
     508:	mov	r3, #0
     50c:	mov	r0, r3
     510:	sub	sp, fp, #4
     514:	ldr	fp, [sp]
     518:	add	sp, sp, #4
     51c:	pop	{pc}		; (ldr pc, [sp], #4)

00000520 <transpose_array>:
     520:	str	fp, [sp, #-8]!
     524:	str	lr, [sp, #4]
     528:	add	fp, sp, #4
     52c:	sub	sp, sp, #208	; 0xd0
     530:	str	r0, [fp, #-192]	; 0xffffff40
     534:	str	r1, [fp, #-196]	; 0xffffff3c
     538:	str	r2, [fp, #-200]	; 0xffffff38
     53c:	mov	r3, #0
     540:	str	r3, [fp, #-12]
     544:	sub	r2, fp, #72	; 0x48
     548:	sub	r3, fp, #76	; 0x4c
     54c:	mov	r1, r3
     550:	ldr	r0, [fp, #-192]	; 0xffffff40
     554:	bl	0 <coda_cursor_get_array_dim>
     558:	mov	r3, r0
     55c:	cmp	r3, #0
     560:	beq	56c <transpose_array+0x4c>
     564:	mvn	r3, #0
     568:	b	df0 <transpose_array+0x8d0>
     56c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     570:	cmp	r3, #1
     574:	bgt	580 <transpose_array+0x60>
     578:	mov	r3, #0
     57c:	b	df0 <transpose_array+0x8d0>
     580:	ldr	r3, [fp, #-196]	; 0xffffff3c
     584:	str	r3, [fp, #-36]	; 0xffffffdc
     588:	mov	r3, #1
     58c:	str	r3, [fp, #-8]
     590:	mov	r3, #0
     594:	str	r3, [fp, #-16]
     598:	b	614 <transpose_array+0xf4>
     59c:	ldr	r3, [fp, #-16]
     5a0:	lsl	r3, r3, #2
     5a4:	sub	r2, fp, #4
     5a8:	add	r3, r2, r3
     5ac:	ldr	r2, [r3, #-68]	; 0xffffffbc
     5b0:	ldr	r3, [fp, #-8]
     5b4:	mul	r3, r2, r3
     5b8:	str	r3, [fp, #-8]
     5bc:	ldr	r3, [fp, #-16]
     5c0:	lsl	r3, r3, #2
     5c4:	sub	r2, fp, #4
     5c8:	add	r3, r2, r3
     5cc:	mov	r2, #0
     5d0:	str	r2, [r3, #-144]	; 0xffffff70
     5d4:	ldr	r3, [fp, #-76]	; 0xffffffb4
     5d8:	sub	r2, r3, #1
     5dc:	ldr	r3, [fp, #-16]
     5e0:	sub	r3, r2, r3
     5e4:	lsl	r3, r3, #2
     5e8:	sub	r2, fp, #4
     5ec:	add	r3, r2, r3
     5f0:	ldr	r2, [r3, #-68]	; 0xffffffbc
     5f4:	ldr	r3, [fp, #-16]
     5f8:	lsl	r3, r3, #2
     5fc:	sub	r1, fp, #4
     600:	add	r3, r1, r3
     604:	str	r2, [r3, #-180]	; 0xffffff4c
     608:	ldr	r3, [fp, #-16]
     60c:	add	r3, r3, #1
     610:	str	r3, [fp, #-16]
     614:	ldr	r3, [fp, #-76]	; 0xffffffb4
     618:	ldr	r2, [fp, #-16]
     61c:	cmp	r2, r3
     620:	blt	59c <transpose_array+0x7c>
     624:	ldr	r3, [fp, #-8]
     628:	cmp	r3, #1
     62c:	bgt	638 <transpose_array+0x118>
     630:	mov	r3, #0
     634:	b	df0 <transpose_array+0x8d0>
     638:	ldr	r3, [fp, #-76]	; 0xffffffb4
     63c:	lsl	r3, r3, #2
     640:	sub	r2, fp, #4
     644:	add	r3, r2, r3
     648:	mov	r2, #1
     64c:	str	r2, [r3, #-108]	; 0xffffff94
     650:	ldr	r3, [fp, #-76]	; 0xffffffb4
     654:	lsl	r3, r3, #2
     658:	sub	r2, fp, #4
     65c:	add	r3, r2, r3
     660:	mov	r2, #1
     664:	str	r2, [r3, #-180]	; 0xffffff4c
     668:	ldr	r3, [fp, #-76]	; 0xffffffb4
     66c:	str	r3, [fp, #-16]
     670:	b	6c4 <transpose_array+0x1a4>
     674:	ldr	r3, [fp, #-16]
     678:	lsl	r3, r3, #2
     67c:	sub	r2, fp, #4
     680:	add	r3, r2, r3
     684:	ldr	r2, [r3, #-108]	; 0xffffff94
     688:	ldr	r3, [fp, #-16]
     68c:	lsl	r3, r3, #2
     690:	sub	r1, fp, #4
     694:	add	r3, r1, r3
     698:	ldr	r1, [r3, #-180]	; 0xffffff4c
     69c:	ldr	r3, [fp, #-16]
     6a0:	sub	r3, r3, #1
     6a4:	mul	r2, r1, r2
     6a8:	lsl	r3, r3, #2
     6ac:	sub	r1, fp, #4
     6b0:	add	r3, r1, r3
     6b4:	str	r2, [r3, #-108]	; 0xffffff94
     6b8:	ldr	r3, [fp, #-16]
     6bc:	sub	r3, r3, #1
     6c0:	str	r3, [fp, #-16]
     6c4:	ldr	r3, [fp, #-16]
     6c8:	cmp	r3, #0
     6cc:	bgt	674 <transpose_array+0x154>
     6d0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6d4:	lsl	r3, r3, #2
     6d8:	sub	r2, fp, #4
     6dc:	add	r3, r2, r3
     6e0:	mov	r2, #0
     6e4:	str	r2, [r3, #-180]	; 0xffffff4c
     6e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6ec:	lsl	r3, r3, #2
     6f0:	sub	r2, fp, #4
     6f4:	add	r3, r2, r3
     6f8:	mov	r2, #0
     6fc:	str	r2, [r3, #-144]	; 0xffffff70
     700:	ldr	r3, [fp, #-8]
     704:	ldr	r2, [fp, #-200]	; 0xffffff38
     708:	mul	r3, r2, r3
     70c:	mov	r0, r3
     710:	bl	0 <malloc>
     714:	mov	r3, r0
     718:	str	r3, [fp, #-40]	; 0xffffffd8
     71c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     720:	cmp	r3, #0
     724:	bne	75c <transpose_array+0x23c>
     728:	ldr	r3, [fp, #-8]
     72c:	ldr	r2, [fp, #-200]	; 0xffffff38
     730:	mul	r2, r2, r3
     734:	mov	r3, #93	; 0x5d
     738:	str	r3, [sp]
     73c:	movw	r3, #0
     740:	movt	r3, #0
     744:	movw	r1, #0
     748:	movt	r1, #0
     74c:	mvn	r0, #0
     750:	bl	0 <coda_set_error>
     754:	mvn	r3, #0
     758:	b	df0 <transpose_array+0x8d0>
     75c:	ldr	r3, [fp, #-200]	; 0xffffff38
     760:	sub	r3, r3, #1
     764:	cmp	r3, #7
     768:	ldrls	pc, [pc, r3, lsl #2]
     76c:	b	da8 <transpose_array+0x888>
     770:	.word	0x00000790
     774:	.word	0x00000910
     778:	.word	0x00000da8
     77c:	.word	0x00000a98
     780:	.word	0x00000da8
     784:	.word	0x00000da8
     788:	.word	0x00000da8
     78c:	.word	0x00000c20
     790:	mov	r3, #0
     794:	str	r3, [fp, #-16]
     798:	b	8fc <transpose_array+0x3dc>
     79c:	mov	r3, #0
     7a0:	str	r3, [fp, #-20]	; 0xffffffec
     7a4:	ldr	r3, [fp, #-16]
     7a8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     7ac:	add	r2, r2, r3
     7b0:	ldr	r3, [fp, #-12]
     7b4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     7b8:	add	r3, r1, r3
     7bc:	ldrb	r2, [r2]
     7c0:	strb	r2, [r3]
     7c4:	ldr	r3, [fp, #-20]	; 0xffffffec
     7c8:	lsl	r3, r3, #2
     7cc:	sub	r2, fp, #4
     7d0:	add	r3, r2, r3
     7d4:	ldr	r3, [r3, #-108]	; 0xffffff94
     7d8:	ldr	r2, [fp, #-12]
     7dc:	add	r3, r2, r3
     7e0:	str	r3, [fp, #-12]
     7e4:	ldr	r3, [fp, #-20]	; 0xffffffec
     7e8:	lsl	r3, r3, #2
     7ec:	sub	r2, fp, #4
     7f0:	add	r3, r2, r3
     7f4:	ldr	r3, [r3, #-144]	; 0xffffff70
     7f8:	add	r2, r3, #1
     7fc:	ldr	r3, [fp, #-20]	; 0xffffffec
     800:	lsl	r3, r3, #2
     804:	sub	r1, fp, #4
     808:	add	r3, r1, r3
     80c:	str	r2, [r3, #-144]	; 0xffffff70
     810:	b	8bc <transpose_array+0x39c>
     814:	ldr	r3, [fp, #-20]	; 0xffffffec
     818:	lsl	r3, r3, #2
     81c:	sub	r2, fp, #4
     820:	add	r3, r2, r3
     824:	mov	r2, #0
     828:	str	r2, [r3, #-144]	; 0xffffff70
     82c:	ldr	r3, [fp, #-20]	; 0xffffffec
     830:	lsl	r3, r3, #2
     834:	sub	r2, fp, #4
     838:	add	r3, r2, r3
     83c:	ldr	r2, [r3, #-108]	; 0xffffff94
     840:	ldr	r3, [fp, #-20]	; 0xffffffec
     844:	lsl	r3, r3, #2
     848:	sub	r1, fp, #4
     84c:	add	r3, r1, r3
     850:	ldr	r3, [r3, #-180]	; 0xffffff4c
     854:	mul	r3, r3, r2
     858:	ldr	r2, [fp, #-12]
     85c:	sub	r3, r2, r3
     860:	str	r3, [fp, #-12]
     864:	ldr	r3, [fp, #-20]	; 0xffffffec
     868:	add	r3, r3, #1
     86c:	str	r3, [fp, #-20]	; 0xffffffec
     870:	ldr	r3, [fp, #-20]	; 0xffffffec
     874:	lsl	r3, r3, #2
     878:	sub	r2, fp, #4
     87c:	add	r3, r2, r3
     880:	ldr	r3, [r3, #-108]	; 0xffffff94
     884:	ldr	r2, [fp, #-12]
     888:	add	r3, r2, r3
     88c:	str	r3, [fp, #-12]
     890:	ldr	r3, [fp, #-20]	; 0xffffffec
     894:	lsl	r3, r3, #2
     898:	sub	r2, fp, #4
     89c:	add	r3, r2, r3
     8a0:	ldr	r3, [r3, #-144]	; 0xffffff70
     8a4:	add	r2, r3, #1
     8a8:	ldr	r3, [fp, #-20]	; 0xffffffec
     8ac:	lsl	r3, r3, #2
     8b0:	sub	r1, fp, #4
     8b4:	add	r3, r1, r3
     8b8:	str	r2, [r3, #-144]	; 0xffffff70
     8bc:	ldr	r3, [fp, #-20]	; 0xffffffec
     8c0:	lsl	r3, r3, #2
     8c4:	sub	r2, fp, #4
     8c8:	add	r3, r2, r3
     8cc:	ldr	r2, [r3, #-144]	; 0xffffff70
     8d0:	ldr	r3, [fp, #-20]	; 0xffffffec
     8d4:	lsl	r3, r3, #2
     8d8:	sub	r1, fp, #4
     8dc:	add	r3, r1, r3
     8e0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     8e4:	cmp	r2, r3
     8e8:	beq	814 <transpose_array+0x2f4>
     8ec:	nop	{0}
     8f0:	ldr	r3, [fp, #-16]
     8f4:	add	r3, r3, #1
     8f8:	str	r3, [fp, #-16]
     8fc:	ldr	r2, [fp, #-16]
     900:	ldr	r3, [fp, #-8]
     904:	cmp	r2, r3
     908:	blt	79c <transpose_array+0x27c>
     90c:	b	dc8 <transpose_array+0x8a8>
     910:	mov	r3, #0
     914:	str	r3, [fp, #-16]
     918:	b	a84 <transpose_array+0x564>
     91c:	mov	r3, #0
     920:	str	r3, [fp, #-24]	; 0xffffffe8
     924:	ldr	r3, [fp, #-16]
     928:	lsl	r3, r3, #1
     92c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     930:	add	r2, r2, r3
     934:	ldr	r3, [fp, #-12]
     938:	lsl	r3, r3, #1
     93c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     940:	add	r3, r1, r3
     944:	ldrh	r2, [r2]
     948:	strh	r2, [r3]
     94c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     950:	lsl	r3, r3, #2
     954:	sub	r2, fp, #4
     958:	add	r3, r2, r3
     95c:	ldr	r3, [r3, #-108]	; 0xffffff94
     960:	ldr	r2, [fp, #-12]
     964:	add	r3, r2, r3
     968:	str	r3, [fp, #-12]
     96c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     970:	lsl	r3, r3, #2
     974:	sub	r2, fp, #4
     978:	add	r3, r2, r3
     97c:	ldr	r3, [r3, #-144]	; 0xffffff70
     980:	add	r2, r3, #1
     984:	ldr	r3, [fp, #-24]	; 0xffffffe8
     988:	lsl	r3, r3, #2
     98c:	sub	r1, fp, #4
     990:	add	r3, r1, r3
     994:	str	r2, [r3, #-144]	; 0xffffff70
     998:	b	a44 <transpose_array+0x524>
     99c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9a0:	lsl	r3, r3, #2
     9a4:	sub	r2, fp, #4
     9a8:	add	r3, r2, r3
     9ac:	mov	r2, #0
     9b0:	str	r2, [r3, #-144]	; 0xffffff70
     9b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9b8:	lsl	r3, r3, #2
     9bc:	sub	r2, fp, #4
     9c0:	add	r3, r2, r3
     9c4:	ldr	r2, [r3, #-108]	; 0xffffff94
     9c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9cc:	lsl	r3, r3, #2
     9d0:	sub	r1, fp, #4
     9d4:	add	r3, r1, r3
     9d8:	ldr	r3, [r3, #-180]	; 0xffffff4c
     9dc:	mul	r3, r3, r2
     9e0:	ldr	r2, [fp, #-12]
     9e4:	sub	r3, r2, r3
     9e8:	str	r3, [fp, #-12]
     9ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9f0:	add	r3, r3, #1
     9f4:	str	r3, [fp, #-24]	; 0xffffffe8
     9f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9fc:	lsl	r3, r3, #2
     a00:	sub	r2, fp, #4
     a04:	add	r3, r2, r3
     a08:	ldr	r3, [r3, #-108]	; 0xffffff94
     a0c:	ldr	r2, [fp, #-12]
     a10:	add	r3, r2, r3
     a14:	str	r3, [fp, #-12]
     a18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a1c:	lsl	r3, r3, #2
     a20:	sub	r2, fp, #4
     a24:	add	r3, r2, r3
     a28:	ldr	r3, [r3, #-144]	; 0xffffff70
     a2c:	add	r2, r3, #1
     a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a34:	lsl	r3, r3, #2
     a38:	sub	r1, fp, #4
     a3c:	add	r3, r1, r3
     a40:	str	r2, [r3, #-144]	; 0xffffff70
     a44:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a48:	lsl	r3, r3, #2
     a4c:	sub	r2, fp, #4
     a50:	add	r3, r2, r3
     a54:	ldr	r2, [r3, #-144]	; 0xffffff70
     a58:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a5c:	lsl	r3, r3, #2
     a60:	sub	r1, fp, #4
     a64:	add	r3, r1, r3
     a68:	ldr	r3, [r3, #-180]	; 0xffffff4c
     a6c:	cmp	r2, r3
     a70:	beq	99c <transpose_array+0x47c>
     a74:	nop	{0}
     a78:	ldr	r3, [fp, #-16]
     a7c:	add	r3, r3, #1
     a80:	str	r3, [fp, #-16]
     a84:	ldr	r2, [fp, #-16]
     a88:	ldr	r3, [fp, #-8]
     a8c:	cmp	r2, r3
     a90:	blt	91c <transpose_array+0x3fc>
     a94:	b	dc8 <transpose_array+0x8a8>
     a98:	mov	r3, #0
     a9c:	str	r3, [fp, #-16]
     aa0:	b	c0c <transpose_array+0x6ec>
     aa4:	mov	r3, #0
     aa8:	str	r3, [fp, #-28]	; 0xffffffe4
     aac:	ldr	r3, [fp, #-16]
     ab0:	lsl	r3, r3, #2
     ab4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ab8:	add	r2, r2, r3
     abc:	ldr	r3, [fp, #-12]
     ac0:	lsl	r3, r3, #2
     ac4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     ac8:	add	r3, r1, r3
     acc:	ldr	r2, [r2]
     ad0:	str	r2, [r3]
     ad4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ad8:	lsl	r3, r3, #2
     adc:	sub	r2, fp, #4
     ae0:	add	r3, r2, r3
     ae4:	ldr	r3, [r3, #-108]	; 0xffffff94
     ae8:	ldr	r2, [fp, #-12]
     aec:	add	r3, r2, r3
     af0:	str	r3, [fp, #-12]
     af4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     af8:	lsl	r3, r3, #2
     afc:	sub	r2, fp, #4
     b00:	add	r3, r2, r3
     b04:	ldr	r3, [r3, #-144]	; 0xffffff70
     b08:	add	r2, r3, #1
     b0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b10:	lsl	r3, r3, #2
     b14:	sub	r1, fp, #4
     b18:	add	r3, r1, r3
     b1c:	str	r2, [r3, #-144]	; 0xffffff70
     b20:	b	bcc <transpose_array+0x6ac>
     b24:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b28:	lsl	r3, r3, #2
     b2c:	sub	r2, fp, #4
     b30:	add	r3, r2, r3
     b34:	mov	r2, #0
     b38:	str	r2, [r3, #-144]	; 0xffffff70
     b3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b40:	lsl	r3, r3, #2
     b44:	sub	r2, fp, #4
     b48:	add	r3, r2, r3
     b4c:	ldr	r2, [r3, #-108]	; 0xffffff94
     b50:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b54:	lsl	r3, r3, #2
     b58:	sub	r1, fp, #4
     b5c:	add	r3, r1, r3
     b60:	ldr	r3, [r3, #-180]	; 0xffffff4c
     b64:	mul	r3, r3, r2
     b68:	ldr	r2, [fp, #-12]
     b6c:	sub	r3, r2, r3
     b70:	str	r3, [fp, #-12]
     b74:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b78:	add	r3, r3, #1
     b7c:	str	r3, [fp, #-28]	; 0xffffffe4
     b80:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b84:	lsl	r3, r3, #2
     b88:	sub	r2, fp, #4
     b8c:	add	r3, r2, r3
     b90:	ldr	r3, [r3, #-108]	; 0xffffff94
     b94:	ldr	r2, [fp, #-12]
     b98:	add	r3, r2, r3
     b9c:	str	r3, [fp, #-12]
     ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ba4:	lsl	r3, r3, #2
     ba8:	sub	r2, fp, #4
     bac:	add	r3, r2, r3
     bb0:	ldr	r3, [r3, #-144]	; 0xffffff70
     bb4:	add	r2, r3, #1
     bb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     bbc:	lsl	r3, r3, #2
     bc0:	sub	r1, fp, #4
     bc4:	add	r3, r1, r3
     bc8:	str	r2, [r3, #-144]	; 0xffffff70
     bcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     bd0:	lsl	r3, r3, #2
     bd4:	sub	r2, fp, #4
     bd8:	add	r3, r2, r3
     bdc:	ldr	r2, [r3, #-144]	; 0xffffff70
     be0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     be4:	lsl	r3, r3, #2
     be8:	sub	r1, fp, #4
     bec:	add	r3, r1, r3
     bf0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     bf4:	cmp	r2, r3
     bf8:	beq	b24 <transpose_array+0x604>
     bfc:	nop	{0}
     c00:	ldr	r3, [fp, #-16]
     c04:	add	r3, r3, #1
     c08:	str	r3, [fp, #-16]
     c0c:	ldr	r2, [fp, #-16]
     c10:	ldr	r3, [fp, #-8]
     c14:	cmp	r2, r3
     c18:	blt	aa4 <transpose_array+0x584>
     c1c:	b	dc8 <transpose_array+0x8a8>
     c20:	mov	r3, #0
     c24:	str	r3, [fp, #-16]
     c28:	b	d94 <transpose_array+0x874>
     c2c:	mov	r3, #0
     c30:	str	r3, [fp, #-32]	; 0xffffffe0
     c34:	ldr	r3, [fp, #-16]
     c38:	lsl	r3, r3, #3
     c3c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c40:	add	r3, r2, r3
     c44:	ldr	r2, [fp, #-12]
     c48:	lsl	r2, r2, #3
     c4c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     c50:	add	r1, r1, r2
     c54:	ldrd	r2, [r3]
     c58:	strd	r2, [r1]
     c5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c60:	lsl	r3, r3, #2
     c64:	sub	r2, fp, #4
     c68:	add	r3, r2, r3
     c6c:	ldr	r3, [r3, #-108]	; 0xffffff94
     c70:	ldr	r2, [fp, #-12]
     c74:	add	r3, r2, r3
     c78:	str	r3, [fp, #-12]
     c7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c80:	lsl	r3, r3, #2
     c84:	sub	r2, fp, #4
     c88:	add	r3, r2, r3
     c8c:	ldr	r3, [r3, #-144]	; 0xffffff70
     c90:	add	r2, r3, #1
     c94:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c98:	lsl	r3, r3, #2
     c9c:	sub	r1, fp, #4
     ca0:	add	r3, r1, r3
     ca4:	str	r2, [r3, #-144]	; 0xffffff70
     ca8:	b	d54 <transpose_array+0x834>
     cac:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cb0:	lsl	r3, r3, #2
     cb4:	sub	r2, fp, #4
     cb8:	add	r3, r2, r3
     cbc:	mov	r2, #0
     cc0:	str	r2, [r3, #-144]	; 0xffffff70
     cc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cc8:	lsl	r3, r3, #2
     ccc:	sub	r2, fp, #4
     cd0:	add	r3, r2, r3
     cd4:	ldr	r2, [r3, #-108]	; 0xffffff94
     cd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cdc:	lsl	r3, r3, #2
     ce0:	sub	r1, fp, #4
     ce4:	add	r3, r1, r3
     ce8:	ldr	r3, [r3, #-180]	; 0xffffff4c
     cec:	mul	r3, r3, r2
     cf0:	ldr	r2, [fp, #-12]
     cf4:	sub	r3, r2, r3
     cf8:	str	r3, [fp, #-12]
     cfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d00:	add	r3, r3, #1
     d04:	str	r3, [fp, #-32]	; 0xffffffe0
     d08:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d0c:	lsl	r3, r3, #2
     d10:	sub	r2, fp, #4
     d14:	add	r3, r2, r3
     d18:	ldr	r3, [r3, #-108]	; 0xffffff94
     d1c:	ldr	r2, [fp, #-12]
     d20:	add	r3, r2, r3
     d24:	str	r3, [fp, #-12]
     d28:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d2c:	lsl	r3, r3, #2
     d30:	sub	r2, fp, #4
     d34:	add	r3, r2, r3
     d38:	ldr	r3, [r3, #-144]	; 0xffffff70
     d3c:	add	r2, r3, #1
     d40:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d44:	lsl	r3, r3, #2
     d48:	sub	r1, fp, #4
     d4c:	add	r3, r1, r3
     d50:	str	r2, [r3, #-144]	; 0xffffff70
     d54:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d58:	lsl	r3, r3, #2
     d5c:	sub	r2, fp, #4
     d60:	add	r3, r2, r3
     d64:	ldr	r2, [r3, #-144]	; 0xffffff70
     d68:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d6c:	lsl	r3, r3, #2
     d70:	sub	r1, fp, #4
     d74:	add	r3, r1, r3
     d78:	ldr	r3, [r3, #-180]	; 0xffffff4c
     d7c:	cmp	r2, r3
     d80:	beq	cac <transpose_array+0x78c>
     d84:	nop	{0}
     d88:	ldr	r3, [fp, #-16]
     d8c:	add	r3, r3, #1
     d90:	str	r3, [fp, #-16]
     d94:	ldr	r2, [fp, #-16]
     d98:	ldr	r3, [fp, #-8]
     d9c:	cmp	r2, r3
     da0:	blt	c2c <transpose_array+0x70c>
     da4:	b	dc8 <transpose_array+0x8a8>
     da8:	movw	r3, #0
     dac:	movt	r3, #0
     db0:	mov	r2, #172	; 0xac
     db4:	movw	r1, #0
     db8:	movt	r1, #0
     dbc:	movw	r0, #0
     dc0:	movt	r0, #0
     dc4:	bl	0 <__assert_fail>
     dc8:	ldr	r3, [fp, #-8]
     dcc:	ldr	r2, [fp, #-200]	; 0xffffff38
     dd0:	mul	r3, r2, r3
     dd4:	mov	r2, r3
     dd8:	ldr	r1, [fp, #-40]	; 0xffffffd8
     ddc:	ldr	r0, [fp, #-196]	; 0xffffff3c
     de0:	bl	0 <memcpy>
     de4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     de8:	bl	0 <free>
     dec:	mov	r3, #0
     df0:	mov	r0, r3
     df4:	sub	sp, fp, #4
     df8:	ldr	fp, [sp]
     dfc:	add	sp, sp, #4
     e00:	pop	{pc}		; (ldr pc, [sp], #4)

00000e04 <ipow>:
     e04:	push	{fp}		; (str fp, [sp, #-4]!)
     e08:	add	fp, sp, #0
     e0c:	sub	sp, sp, #28
     e10:	vstr	d0, [fp, #-20]	; 0xffffffec
     e14:	str	r0, [fp, #-24]	; 0xffffffe8
     e18:	mov	r2, #0
     e1c:	mov	r3, #0
     e20:	movt	r3, #16368	; 0x3ff0
     e24:	strd	r2, [fp, #-12]
     e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e2c:	cmp	r3, #0
     e30:	bge	e80 <ipow+0x7c>
     e34:	b	e48 <ipow+0x44>
     e38:	vldr	d6, [fp, #-12]
     e3c:	vldr	d7, [fp, #-20]	; 0xffffffec
     e40:	vmul.f64	d7, d6, d7
     e44:	vstr	d7, [fp, #-12]
     e48:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e4c:	add	r2, r3, #1
     e50:	str	r2, [fp, #-24]	; 0xffffffe8
     e54:	cmp	r3, #0
     e58:	bne	e38 <ipow+0x34>
     e5c:	vldr	d5, [pc, #76]	; eb0 <ipow+0xac>
     e60:	vldr	d6, [fp, #-12]
     e64:	vdiv.f64	d7, d5, d6
     e68:	vstr	d7, [fp, #-12]
     e6c:	b	e94 <ipow+0x90>
     e70:	vldr	d6, [fp, #-12]
     e74:	vldr	d7, [fp, #-20]	; 0xffffffec
     e78:	vmul.f64	d7, d6, d7
     e7c:	vstr	d7, [fp, #-12]
     e80:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e84:	sub	r2, r3, #1
     e88:	str	r2, [fp, #-24]	; 0xffffffe8
     e8c:	cmp	r3, #0
     e90:	bne	e70 <ipow+0x6c>
     e94:	ldrd	r2, [fp, #-12]
     e98:	vmov	d7, r2, r3
     e9c:	vmov.f64	d0, d7
     ea0:	add	sp, fp, #0
     ea4:	pop	{fp}		; (ldr fp, [sp], #4)
     ea8:	bx	lr
     eac:	nop	{0}
     eb0:	.word	0x00000000
     eb4:	.word	0x3ff00000

00000eb8 <get_read_type>:
     eb8:	push	{fp}		; (str fp, [sp, #-4]!)
     ebc:	add	fp, sp, #0
     ec0:	sub	sp, sp, #20
     ec4:	str	r0, [fp, #-16]
     ec8:	str	r1, [fp, #-20]	; 0xffffffec
     ecc:	ldr	r3, [fp, #-16]
     ed0:	ldr	r3, [r3, #4]
     ed4:	sub	r3, r3, #1
     ed8:	ldr	r2, [fp, #-16]
     edc:	lsl	r3, r3, #4
     ee0:	add	r3, r2, r3
     ee4:	ldr	r3, [r3, #8]
     ee8:	ldr	r3, [r3]
     eec:	cmp	r3, #99	; 0x63
     ef0:	bhi	f14 <get_read_type+0x5c>
     ef4:	ldr	r3, [fp, #-16]
     ef8:	ldr	r3, [r3, #4]
     efc:	sub	r3, r3, #1
     f00:	ldr	r2, [fp, #-16]
     f04:	lsl	r3, r3, #4
     f08:	add	r3, r2, r3
     f0c:	ldr	r3, [r3, #8]
     f10:	b	f34 <get_read_type+0x7c>
     f14:	ldr	r3, [fp, #-16]
     f18:	ldr	r3, [r3, #4]
     f1c:	sub	r3, r3, #1
     f20:	ldr	r2, [fp, #-16]
     f24:	lsl	r3, r3, #4
     f28:	add	r3, r2, r3
     f2c:	ldr	r3, [r3, #8]
     f30:	ldr	r3, [r3, #4]
     f34:	str	r3, [fp, #-8]
     f38:	ldr	r3, [fp, #-8]
     f3c:	ldr	r3, [r3, #8]
     f40:	cmp	r3, #2
     f44:	beq	f58 <get_read_type+0xa0>
     f48:	ldr	r3, [fp, #-8]
     f4c:	ldr	r3, [r3, #8]
     f50:	cmp	r3, #3
     f54:	bne	f90 <get_read_type+0xd8>
     f58:	ldr	r3, [pc, #84]	; fb4 <get_read_type+0xfc>
     f5c:	ldr	r3, [pc, r3]
     f60:	mrc	15, 0, r2, cr13, cr0, {3}
     f64:	ldr	r3, [r2, r3]
     f68:	cmp	r3, #0
     f6c:	beq	f90 <get_read_type+0xd8>
     f70:	ldr	r3, [fp, #-8]
     f74:	ldr	r3, [r3, #48]	; 0x30
     f78:	cmp	r3, #0
     f7c:	beq	f90 <get_read_type+0xd8>
     f80:	ldr	r3, [fp, #-20]	; 0xffffffec
     f84:	mov	r2, #9
     f88:	str	r2, [r3]
     f8c:	b	fa0 <get_read_type+0xe8>
     f90:	ldr	r3, [fp, #-8]
     f94:	ldr	r2, [r3, #12]
     f98:	ldr	r3, [fp, #-20]	; 0xffffffec
     f9c:	str	r2, [r3]
     fa0:	mov	r3, #0
     fa4:	mov	r0, r3
     fa8:	add	sp, fp, #0
     fac:	pop	{fp}		; (ldr fp, [sp], #4)
     fb0:	bx	lr
     fb4:	.word	0x00000050

00000fb8 <get_unconverted_read_type>:
     fb8:	push	{fp}		; (str fp, [sp, #-4]!)
     fbc:	add	fp, sp, #0
     fc0:	sub	sp, sp, #28
     fc4:	str	r0, [fp, #-16]
     fc8:	str	r1, [fp, #-20]	; 0xffffffec
     fcc:	str	r2, [fp, #-24]	; 0xffffffe8
     fd0:	ldr	r3, [fp, #-16]
     fd4:	ldr	r3, [r3, #4]
     fd8:	sub	r3, r3, #1
     fdc:	ldr	r2, [fp, #-16]
     fe0:	lsl	r3, r3, #4
     fe4:	add	r3, r2, r3
     fe8:	ldr	r3, [r3, #8]
     fec:	ldr	r3, [r3]
     ff0:	cmp	r3, #99	; 0x63
     ff4:	bhi	1018 <get_unconverted_read_type+0x60>
     ff8:	ldr	r3, [fp, #-16]
     ffc:	ldr	r3, [r3, #4]
    1000:	sub	r3, r3, #1
    1004:	ldr	r2, [fp, #-16]
    1008:	lsl	r3, r3, #4
    100c:	add	r3, r2, r3
    1010:	ldr	r3, [r3, #8]
    1014:	b	1038 <get_unconverted_read_type+0x80>
    1018:	ldr	r3, [fp, #-16]
    101c:	ldr	r3, [r3, #4]
    1020:	sub	r3, r3, #1
    1024:	ldr	r2, [fp, #-16]
    1028:	lsl	r3, r3, #4
    102c:	add	r3, r2, r3
    1030:	ldr	r3, [r3, #8]
    1034:	ldr	r3, [r3, #4]
    1038:	str	r3, [fp, #-8]
    103c:	ldr	r3, [fp, #-8]
    1040:	ldr	r2, [r3, #12]
    1044:	ldr	r3, [fp, #-20]	; 0xffffffec
    1048:	str	r2, [r3]
    104c:	ldr	r3, [fp, #-8]
    1050:	ldr	r3, [r3, #8]
    1054:	cmp	r3, #2
    1058:	beq	106c <get_unconverted_read_type+0xb4>
    105c:	ldr	r3, [fp, #-8]
    1060:	ldr	r3, [r3, #8]
    1064:	cmp	r3, #3
    1068:	bne	1098 <get_unconverted_read_type+0xe0>
    106c:	ldr	r3, [pc, #68]	; 10b8 <get_unconverted_read_type+0x100>
    1070:	ldr	r3, [pc, r3]
    1074:	mrc	15, 0, r2, cr13, cr0, {3}
    1078:	ldr	r3, [r2, r3]
    107c:	cmp	r3, #0
    1080:	beq	1098 <get_unconverted_read_type+0xe0>
    1084:	ldr	r3, [fp, #-8]
    1088:	ldr	r2, [r3, #48]	; 0x30
    108c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1090:	str	r2, [r3]
    1094:	b	10a4 <get_unconverted_read_type+0xec>
    1098:	ldr	r3, [fp, #-24]	; 0xffffffe8
    109c:	mov	r2, #0
    10a0:	str	r2, [r3]
    10a4:	mov	r3, #0
    10a8:	mov	r0, r3
    10ac:	add	sp, fp, #0
    10b0:	pop	{fp}		; (ldr fp, [sp], #4)
    10b4:	bx	lr
    10b8:	.word	0x00000040

000010bc <get_array_element_read_type>:
    10bc:	push	{fp}		; (str fp, [sp, #-4]!)
    10c0:	add	fp, sp, #0
    10c4:	sub	sp, sp, #20
    10c8:	str	r0, [fp, #-16]
    10cc:	str	r1, [fp, #-20]	; 0xffffffec
    10d0:	ldr	r3, [fp, #-16]
    10d4:	ldr	r3, [r3, #40]	; 0x28
    10d8:	str	r3, [fp, #-8]
    10dc:	ldr	r3, [fp, #-8]
    10e0:	ldr	r3, [r3, #8]
    10e4:	cmp	r3, #2
    10e8:	beq	10fc <get_array_element_read_type+0x40>
    10ec:	ldr	r3, [fp, #-8]
    10f0:	ldr	r3, [r3, #8]
    10f4:	cmp	r3, #3
    10f8:	bne	1134 <get_array_element_read_type+0x78>
    10fc:	ldr	r3, [pc, #84]	; 1158 <get_array_element_read_type+0x9c>
    1100:	ldr	r3, [pc, r3]
    1104:	mrc	15, 0, r2, cr13, cr0, {3}
    1108:	ldr	r3, [r2, r3]
    110c:	cmp	r3, #0
    1110:	beq	1134 <get_array_element_read_type+0x78>
    1114:	ldr	r3, [fp, #-8]
    1118:	ldr	r3, [r3, #48]	; 0x30
    111c:	cmp	r3, #0
    1120:	beq	1134 <get_array_element_read_type+0x78>
    1124:	ldr	r3, [fp, #-20]	; 0xffffffec
    1128:	mov	r2, #9
    112c:	str	r2, [r3]
    1130:	b	1144 <get_array_element_read_type+0x88>
    1134:	ldr	r3, [fp, #-8]
    1138:	ldr	r2, [r3, #12]
    113c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1140:	str	r2, [r3]
    1144:	mov	r3, #0
    1148:	mov	r0, r3
    114c:	add	sp, fp, #0
    1150:	pop	{fp}		; (ldr fp, [sp], #4)
    1154:	bx	lr
    1158:	.word	0x00000050

0000115c <get_array_element_unconverted_read_type>:
    115c:	push	{fp}		; (str fp, [sp, #-4]!)
    1160:	add	fp, sp, #0
    1164:	sub	sp, sp, #28
    1168:	str	r0, [fp, #-16]
    116c:	str	r1, [fp, #-20]	; 0xffffffec
    1170:	str	r2, [fp, #-24]	; 0xffffffe8
    1174:	ldr	r3, [fp, #-16]
    1178:	ldr	r3, [r3, #40]	; 0x28
    117c:	str	r3, [fp, #-8]
    1180:	ldr	r3, [fp, #-8]
    1184:	ldr	r2, [r3, #12]
    1188:	ldr	r3, [fp, #-20]	; 0xffffffec
    118c:	str	r2, [r3]
    1190:	ldr	r3, [fp, #-8]
    1194:	ldr	r3, [r3, #8]
    1198:	cmp	r3, #2
    119c:	beq	11b0 <get_array_element_unconverted_read_type+0x54>
    11a0:	ldr	r3, [fp, #-8]
    11a4:	ldr	r3, [r3, #8]
    11a8:	cmp	r3, #3
    11ac:	bne	11dc <get_array_element_unconverted_read_type+0x80>
    11b0:	ldr	r3, [pc, #68]	; 11fc <get_array_element_unconverted_read_type+0xa0>
    11b4:	ldr	r3, [pc, r3]
    11b8:	mrc	15, 0, r2, cr13, cr0, {3}
    11bc:	ldr	r3, [r2, r3]
    11c0:	cmp	r3, #0
    11c4:	beq	11dc <get_array_element_unconverted_read_type+0x80>
    11c8:	ldr	r3, [fp, #-8]
    11cc:	ldr	r2, [r3, #48]	; 0x30
    11d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11d4:	str	r2, [r3]
    11d8:	b	11e8 <get_array_element_unconverted_read_type+0x8c>
    11dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11e0:	mov	r2, #0
    11e4:	str	r2, [r3]
    11e8:	mov	r3, #0
    11ec:	mov	r0, r3
    11f0:	add	sp, fp, #0
    11f4:	pop	{fp}		; (ldr fp, [sp], #4)
    11f8:	bx	lr
    11fc:	.word	0x00000040

00001200 <read_split_array>:
    1200:	str	fp, [sp, #-8]!
    1204:	str	lr, [sp, #4]
    1208:	add	fp, sp, #4
    120c:	sub	sp, sp, #648	; 0x288
    1210:	str	r0, [fp, #-640]	; 0xfffffd80
    1214:	str	r1, [fp, #-644]	; 0xfffffd7c
    1218:	str	r2, [fp, #-648]	; 0xfffffd78
    121c:	str	r3, [fp, #-652]	; 0xfffffd74
    1220:	sub	r2, fp, #596	; 0x254
    1224:	sub	r3, fp, #600	; 0x258
    1228:	mov	r1, r3
    122c:	ldr	r0, [fp, #-640]	; 0xfffffd80
    1230:	bl	0 <coda_cursor_get_array_dim>
    1234:	mov	r3, r0
    1238:	cmp	r3, #0
    123c:	beq	1248 <read_split_array+0x48>
    1240:	mvn	r3, #0
    1244:	b	1654 <read_split_array+0x454>
    1248:	ldr	r2, [fp, #-640]	; 0xfffffd80
    124c:	sub	r3, fp, #548	; 0x224
    1250:	mov	r1, r2
    1254:	mov	r2, #520	; 0x208
    1258:	mov	r0, r3
    125c:	bl	0 <memcpy>
    1260:	ldr	r3, [fp, #-600]	; 0xfffffda8
    1264:	cmp	r3, #1
    1268:	ble	1278 <read_split_array+0x78>
    126c:	ldr	r3, [fp, #8]
    1270:	cmp	r3, #1
    1274:	beq	13c4 <read_split_array+0x1c4>
    1278:	mov	r3, #1
    127c:	str	r3, [fp, #-8]
    1280:	mov	r3, #0
    1284:	str	r3, [fp, #-12]
    1288:	b	12b8 <read_split_array+0xb8>
    128c:	ldr	r3, [fp, #-12]
    1290:	lsl	r3, r3, #2
    1294:	sub	r2, fp, #4
    1298:	add	r3, r2, r3
    129c:	ldr	r2, [r3, #-592]	; 0xfffffdb0
    12a0:	ldr	r3, [fp, #-8]
    12a4:	mul	r3, r2, r3
    12a8:	str	r3, [fp, #-8]
    12ac:	ldr	r3, [fp, #-12]
    12b0:	add	r3, r3, #1
    12b4:	str	r3, [fp, #-12]
    12b8:	ldr	r3, [fp, #-600]	; 0xfffffda8
    12bc:	ldr	r2, [fp, #-12]
    12c0:	cmp	r2, r3
    12c4:	blt	128c <read_split_array+0x8c>
    12c8:	ldr	r3, [fp, #-8]
    12cc:	cmp	r3, #0
    12d0:	ble	1650 <read_split_array+0x450>
    12d4:	sub	r3, fp, #548	; 0x224
    12d8:	mov	r1, #0
    12dc:	mov	r0, r3
    12e0:	bl	0 <coda_cursor_goto_array_element_by_index>
    12e4:	mov	r3, r0
    12e8:	cmp	r3, #0
    12ec:	beq	12f8 <read_split_array+0xf8>
    12f0:	mvn	r3, #0
    12f4:	b	1654 <read_split_array+0x454>
    12f8:	mov	r3, #0
    12fc:	str	r3, [fp, #-12]
    1300:	b	13b0 <read_split_array+0x1b0>
    1304:	sub	r1, fp, #564	; 0x234
    1308:	sub	r2, fp, #548	; 0x224
    130c:	ldr	r3, [fp, #-644]	; 0xfffffd7c
    1310:	mov	r0, r2
    1314:	blx	r3
    1318:	ldr	r3, [fp, #-12]
    131c:	ldr	r2, [fp, #4]
    1320:	mul	r3, r2, r3
    1324:	mov	r2, r3
    1328:	ldr	r3, [fp, #-648]	; 0xfffffd78
    132c:	add	r3, r3, r2
    1330:	ldr	r2, [fp, #4]
    1334:	sub	r1, fp, #564	; 0x234
    1338:	mov	r0, r3
    133c:	bl	0 <memcpy>
    1340:	ldr	r3, [fp, #-12]
    1344:	ldr	r2, [fp, #4]
    1348:	mul	r3, r2, r3
    134c:	mov	r2, r3
    1350:	ldr	r3, [fp, #-652]	; 0xfffffd74
    1354:	add	r0, r3, r2
    1358:	sub	r2, fp, #564	; 0x234
    135c:	ldr	r3, [fp, #4]
    1360:	add	r3, r2, r3
    1364:	ldr	r2, [fp, #4]
    1368:	mov	r1, r3
    136c:	bl	0 <memcpy>
    1370:	ldr	r3, [fp, #-8]
    1374:	sub	r3, r3, #1
    1378:	ldr	r2, [fp, #-12]
    137c:	cmp	r2, r3
    1380:	bge	13a4 <read_split_array+0x1a4>
    1384:	sub	r3, fp, #548	; 0x224
    1388:	mov	r0, r3
    138c:	bl	0 <coda_cursor_goto_next_array_element>
    1390:	mov	r3, r0
    1394:	cmp	r3, #0
    1398:	beq	13a4 <read_split_array+0x1a4>
    139c:	mvn	r3, #0
    13a0:	b	1654 <read_split_array+0x454>
    13a4:	ldr	r3, [fp, #-12]
    13a8:	add	r3, r3, #1
    13ac:	str	r3, [fp, #-12]
    13b0:	ldr	r2, [fp, #-12]
    13b4:	ldr	r3, [fp, #-8]
    13b8:	cmp	r2, r3
    13bc:	blt	1304 <read_split_array+0x104>
    13c0:	b	1650 <read_split_array+0x450>
    13c4:	mov	r3, #1
    13c8:	str	r3, [fp, #-636]	; 0xfffffd84
    13cc:	mov	r3, #0
    13d0:	str	r3, [fp, #-12]
    13d4:	b	1428 <read_split_array+0x228>
    13d8:	ldr	r3, [fp, #-12]
    13dc:	lsl	r3, r3, #2
    13e0:	sub	r2, fp, #4
    13e4:	add	r3, r2, r3
    13e8:	ldr	r2, [r3, #-632]	; 0xfffffd88
    13ec:	ldr	r3, [fp, #-12]
    13f0:	lsl	r3, r3, #2
    13f4:	sub	r1, fp, #4
    13f8:	add	r3, r1, r3
    13fc:	ldr	r1, [r3, #-592]	; 0xfffffdb0
    1400:	ldr	r3, [fp, #-12]
    1404:	add	r3, r3, #1
    1408:	mul	r2, r1, r2
    140c:	lsl	r3, r3, #2
    1410:	sub	r1, fp, #4
    1414:	add	r3, r1, r3
    1418:	str	r2, [r3, #-632]	; 0xfffffd88
    141c:	ldr	r3, [fp, #-12]
    1420:	add	r3, r3, #1
    1424:	str	r3, [fp, #-12]
    1428:	ldr	r3, [fp, #-600]	; 0xfffffda8
    142c:	ldr	r2, [fp, #-12]
    1430:	cmp	r2, r3
    1434:	blt	13d8 <read_split_array+0x1d8>
    1438:	ldr	r3, [fp, #-600]	; 0xfffffda8
    143c:	sub	r3, r3, #1
    1440:	lsl	r3, r3, #2
    1444:	sub	r2, fp, #4
    1448:	add	r3, r2, r3
    144c:	ldr	r3, [r3, #-632]	; 0xfffffd88
    1450:	str	r3, [fp, #-24]	; 0xffffffe8
    1454:	ldr	r3, [fp, #-600]	; 0xfffffda8
    1458:	lsl	r3, r3, #2
    145c:	sub	r2, fp, #4
    1460:	add	r3, r2, r3
    1464:	ldr	r3, [r3, #-632]	; 0xfffffd88
    1468:	str	r3, [fp, #-8]
    146c:	ldr	r3, [fp, #-8]
    1470:	cmp	r3, #0
    1474:	ble	1650 <read_split_array+0x450>
    1478:	mov	r3, #0
    147c:	str	r3, [fp, #-16]
    1480:	mov	r3, #0
    1484:	str	r3, [fp, #-20]	; 0xffffffec
    1488:	sub	r3, fp, #548	; 0x224
    148c:	mov	r1, #0
    1490:	mov	r0, r3
    1494:	bl	0 <coda_cursor_goto_array_element_by_index>
    1498:	mov	r3, r0
    149c:	cmp	r3, #0
    14a0:	beq	14ac <read_split_array+0x2ac>
    14a4:	mvn	r3, #0
    14a8:	b	1654 <read_split_array+0x454>
    14ac:	sub	r1, fp, #564	; 0x234
    14b0:	sub	r2, fp, #548	; 0x224
    14b4:	ldr	r3, [fp, #-644]	; 0xfffffd7c
    14b8:	mov	r0, r2
    14bc:	blx	r3
    14c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    14c4:	ldr	r2, [fp, #4]
    14c8:	mul	r3, r2, r3
    14cc:	mov	r2, r3
    14d0:	ldr	r3, [fp, #-648]	; 0xfffffd78
    14d4:	add	r3, r3, r2
    14d8:	ldr	r2, [fp, #4]
    14dc:	sub	r1, fp, #564	; 0x234
    14e0:	mov	r0, r3
    14e4:	bl	0 <memcpy>
    14e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    14ec:	ldr	r2, [fp, #4]
    14f0:	mul	r3, r2, r3
    14f4:	mov	r2, r3
    14f8:	ldr	r3, [fp, #-652]	; 0xfffffd74
    14fc:	add	r0, r3, r2
    1500:	sub	r2, fp, #564	; 0x234
    1504:	ldr	r3, [fp, #4]
    1508:	add	r3, r2, r3
    150c:	ldr	r2, [fp, #4]
    1510:	mov	r1, r3
    1514:	bl	0 <memcpy>
    1518:	ldr	r3, [fp, #-16]
    151c:	add	r3, r3, #1
    1520:	str	r3, [fp, #-16]
    1524:	ldr	r2, [fp, #-16]
    1528:	ldr	r3, [fp, #-8]
    152c:	cmp	r2, r3
    1530:	bge	1554 <read_split_array+0x354>
    1534:	sub	r3, fp, #548	; 0x224
    1538:	mov	r0, r3
    153c:	bl	0 <coda_cursor_goto_next_array_element>
    1540:	mov	r3, r0
    1544:	cmp	r3, #0
    1548:	beq	1554 <read_split_array+0x354>
    154c:	mvn	r3, #0
    1550:	b	1654 <read_split_array+0x454>
    1554:	ldr	r2, [fp, #-20]	; 0xffffffec
    1558:	ldr	r3, [fp, #-24]	; 0xffffffe8
    155c:	add	r3, r2, r3
    1560:	str	r3, [fp, #-20]	; 0xffffffec
    1564:	ldr	r2, [fp, #-20]	; 0xffffffec
    1568:	ldr	r3, [fp, #-8]
    156c:	cmp	r2, r3
    1570:	blt	14ac <read_split_array+0x2ac>
    1574:	ldr	r2, [fp, #-16]
    1578:	ldr	r3, [fp, #-8]
    157c:	cmp	r2, r3
    1580:	beq	164c <read_split_array+0x44c>
    1584:	ldr	r3, [fp, #-600]	; 0xfffffda8
    1588:	sub	r3, r3, #2
    158c:	lsl	r3, r3, #2
    1590:	sub	r2, fp, #4
    1594:	add	r3, r2, r3
    1598:	ldr	r2, [r3, #-632]	; 0xfffffd88
    159c:	ldr	r3, [fp, #-600]	; 0xfffffda8
    15a0:	lsl	r3, r3, #2
    15a4:	sub	r1, fp, #4
    15a8:	add	r3, r1, r3
    15ac:	ldr	r3, [r3, #-632]	; 0xfffffd88
    15b0:	sub	r3, r2, r3
    15b4:	ldr	r2, [fp, #-20]	; 0xffffffec
    15b8:	add	r3, r2, r3
    15bc:	str	r3, [fp, #-20]	; 0xffffffec
    15c0:	ldr	r3, [fp, #-600]	; 0xfffffda8
    15c4:	sub	r3, r3, #3
    15c8:	str	r3, [fp, #-12]
    15cc:	b	1618 <read_split_array+0x418>
    15d0:	ldr	r3, [fp, #-12]
    15d4:	lsl	r3, r3, #2
    15d8:	sub	r2, fp, #4
    15dc:	add	r3, r2, r3
    15e0:	ldr	r2, [r3, #-632]	; 0xfffffd88
    15e4:	ldr	r3, [fp, #-12]
    15e8:	add	r3, r3, #2
    15ec:	lsl	r3, r3, #2
    15f0:	sub	r1, fp, #4
    15f4:	add	r3, r1, r3
    15f8:	ldr	r3, [r3, #-632]	; 0xfffffd88
    15fc:	sub	r3, r2, r3
    1600:	ldr	r2, [fp, #-20]	; 0xffffffec
    1604:	add	r3, r2, r3
    1608:	str	r3, [fp, #-20]	; 0xffffffec
    160c:	ldr	r3, [fp, #-12]
    1610:	sub	r3, r3, #1
    1614:	str	r3, [fp, #-12]
    1618:	ldr	r3, [fp, #-12]
    161c:	cmp	r3, #0
    1620:	blt	14ac <read_split_array+0x2ac>
    1624:	ldr	r3, [fp, #-12]
    1628:	add	r3, r3, #2
    162c:	lsl	r3, r3, #2
    1630:	sub	r2, fp, #4
    1634:	add	r3, r2, r3
    1638:	ldr	r3, [r3, #-632]	; 0xfffffd88
    163c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1640:	cmp	r2, r3
    1644:	bge	15d0 <read_split_array+0x3d0>
    1648:	b	14ac <read_split_array+0x2ac>
    164c:	nop	{0}
    1650:	mov	r3, #0
    1654:	mov	r0, r3
    1658:	sub	sp, fp, #4
    165c:	ldr	fp, [sp]
    1660:	add	sp, sp, #4
    1664:	pop	{pc}		; (ldr pc, [sp], #4)

00001668 <read_double_pair>:
    1668:	str	fp, [sp, #-8]!
    166c:	str	lr, [sp, #4]
    1670:	add	fp, sp, #4
    1674:	sub	sp, sp, #528	; 0x210
    1678:	str	r0, [fp, #-528]	; 0xfffffdf0
    167c:	str	r1, [fp, #-532]	; 0xfffffdec
    1680:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1684:	ldr	r3, [r3, #4]
    1688:	sub	r3, r3, #1
    168c:	ldr	r2, [fp, #-528]	; 0xfffffdf0
    1690:	lsl	r3, r3, #4
    1694:	add	r3, r2, r3
    1698:	ldr	r3, [r3, #8]
    169c:	ldr	r3, [r3, #8]
    16a0:	cmp	r3, #6
    16a4:	bne	16d0 <read_double_pair+0x68>
    16a8:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    16ac:	ldr	r3, [r3, #4]
    16b0:	sub	r3, r3, #1
    16b4:	ldr	r2, [fp, #-528]	; 0xfffffdf0
    16b8:	lsl	r3, r3, #4
    16bc:	add	r3, r2, r3
    16c0:	ldr	r3, [r3, #8]
    16c4:	ldr	r3, [r3, #40]	; 0x28
    16c8:	cmp	r3, #3
    16cc:	beq	16e8 <read_double_pair+0x80>
    16d0:	movw	r1, #0
    16d4:	movt	r1, #0
    16d8:	mvn	r0, #104	; 0x68
    16dc:	bl	0 <coda_set_error>
    16e0:	mvn	r3, #0
    16e4:	b	17b8 <read_double_pair+0x150>
    16e8:	ldr	r2, [fp, #-528]	; 0xfffffdf0
    16ec:	sub	r3, fp, #524	; 0x20c
    16f0:	mov	r1, r2
    16f4:	mov	r2, #520	; 0x208
    16f8:	mov	r0, r3
    16fc:	bl	0 <memcpy>
    1700:	sub	r3, fp, #524	; 0x20c
    1704:	mov	r0, r3
    1708:	bl	0 <coda_cursor_use_base_type_of_special_type>
    170c:	mov	r3, r0
    1710:	cmp	r3, #0
    1714:	beq	1720 <read_double_pair+0xb8>
    1718:	mvn	r3, #0
    171c:	b	17b8 <read_double_pair+0x150>
    1720:	sub	r3, fp, #524	; 0x20c
    1724:	mov	r1, #0
    1728:	mov	r0, r3
    172c:	bl	0 <coda_cursor_goto_record_field_by_index>
    1730:	mov	r3, r0
    1734:	cmp	r3, #0
    1738:	beq	1744 <read_double_pair+0xdc>
    173c:	mvn	r3, #0
    1740:	b	17b8 <read_double_pair+0x150>
    1744:	sub	r3, fp, #524	; 0x20c
    1748:	ldr	r1, [fp, #-532]	; 0xfffffdec
    174c:	mov	r0, r3
    1750:	bl	5d94 <coda_cursor_read_double>
    1754:	mov	r3, r0
    1758:	cmp	r3, #0
    175c:	beq	1768 <read_double_pair+0x100>
    1760:	mvn	r3, #0
    1764:	b	17b8 <read_double_pair+0x150>
    1768:	sub	r3, fp, #524	; 0x20c
    176c:	mov	r0, r3
    1770:	bl	0 <coda_cursor_goto_next_record_field>
    1774:	mov	r3, r0
    1778:	cmp	r3, #0
    177c:	beq	1788 <read_double_pair+0x120>
    1780:	mvn	r3, #0
    1784:	b	17b8 <read_double_pair+0x150>
    1788:	ldr	r3, [fp, #-532]	; 0xfffffdec
    178c:	add	r2, r3, #8
    1790:	sub	r3, fp, #524	; 0x20c
    1794:	mov	r1, r2
    1798:	mov	r0, r3
    179c:	bl	5d94 <coda_cursor_read_double>
    17a0:	mov	r3, r0
    17a4:	cmp	r3, #0
    17a8:	beq	17b4 <read_double_pair+0x14c>
    17ac:	mvn	r3, #0
    17b0:	b	17b8 <read_double_pair+0x150>
    17b4:	mov	r3, #0
    17b8:	mov	r0, r3
    17bc:	sub	sp, fp, #4
    17c0:	ldr	fp, [sp]
    17c4:	add	sp, sp, #4
    17c8:	pop	{pc}		; (ldr pc, [sp], #4)

000017cc <read_time>:
    17cc:	str	fp, [sp, #-8]!
    17d0:	str	lr, [sp, #4]
    17d4:	add	fp, sp, #4
    17d8:	sub	sp, sp, #536	; 0x218
    17dc:	str	r0, [fp, #-536]	; 0xfffffde8
    17e0:	str	r1, [fp, #-540]	; 0xfffffde4
    17e4:	ldr	r2, [fp, #-536]	; 0xfffffde8
    17e8:	sub	r3, fp, #532	; 0x214
    17ec:	mov	r1, r2
    17f0:	mov	r2, #520	; 0x208
    17f4:	mov	r0, r3
    17f8:	bl	0 <memcpy>
    17fc:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1800:	ldr	r3, [r3, #4]
    1804:	sub	r3, r3, #1
    1808:	ldr	r2, [fp, #-536]	; 0xfffffde8
    180c:	lsl	r3, r3, #4
    1810:	add	r3, r2, r3
    1814:	ldr	r3, [r3, #8]
    1818:	ldr	r3, [r3]
    181c:	cmp	r3, #99	; 0x63
    1820:	bhi	1844 <read_time+0x78>
    1824:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1828:	ldr	r3, [r3, #4]
    182c:	sub	r3, r3, #1
    1830:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1834:	lsl	r3, r3, #4
    1838:	add	r3, r2, r3
    183c:	ldr	r3, [r3, #8]
    1840:	b	1864 <read_time+0x98>
    1844:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1848:	ldr	r3, [r3, #4]
    184c:	sub	r3, r3, #1
    1850:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1854:	lsl	r3, r3, #4
    1858:	add	r3, r2, r3
    185c:	ldr	r3, [r3, #8]
    1860:	ldr	r3, [r3, #4]
    1864:	str	r3, [fp, #-8]
    1868:	sub	r3, fp, #532	; 0x214
    186c:	mov	r0, r3
    1870:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1874:	mov	r3, r0
    1878:	cmp	r3, #0
    187c:	beq	1888 <read_time+0xbc>
    1880:	mvn	r3, #0
    1884:	b	18a4 <read_time+0xd8>
    1888:	ldr	r3, [fp, #-8]
    188c:	ldr	r3, [r3, #52]	; 0x34
    1890:	sub	r1, fp, #532	; 0x214
    1894:	ldr	r2, [fp, #-540]	; 0xfffffde4
    1898:	mov	r0, r3
    189c:	bl	0 <coda_expression_eval_float>
    18a0:	mov	r3, r0
    18a4:	mov	r0, r3
    18a8:	sub	sp, fp, #4
    18ac:	ldr	fp, [sp]
    18b0:	add	sp, sp, #4
    18b4:	pop	{pc}		; (ldr pc, [sp], #4)

000018b8 <read_vsf_integer>:
    18b8:	str	fp, [sp, #-8]!
    18bc:	str	lr, [sp, #4]
    18c0:	add	fp, sp, #4
    18c4:	sub	sp, sp, #544	; 0x220
    18c8:	str	r0, [fp, #-544]	; 0xfffffde0
    18cc:	str	r1, [fp, #-548]	; 0xfffffddc
    18d0:	ldr	r2, [fp, #-544]	; 0xfffffde0
    18d4:	sub	r3, fp, #524	; 0x20c
    18d8:	mov	r1, r2
    18dc:	mov	r2, #520	; 0x208
    18e0:	mov	r0, r3
    18e4:	bl	0 <memcpy>
    18e8:	sub	r3, fp, #524	; 0x20c
    18ec:	mov	r0, r3
    18f0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    18f4:	mov	r3, r0
    18f8:	cmp	r3, #0
    18fc:	beq	1908 <read_vsf_integer+0x50>
    1900:	mvn	r3, #0
    1904:	b	19c4 <read_vsf_integer+0x10c>
    1908:	sub	r3, fp, #524	; 0x20c
    190c:	mov	r0, r3
    1910:	bl	0 <coda_cursor_goto_first_record_field>
    1914:	mov	r3, r0
    1918:	cmp	r3, #0
    191c:	beq	1928 <read_vsf_integer+0x70>
    1920:	mvn	r3, #0
    1924:	b	19c4 <read_vsf_integer+0x10c>
    1928:	sub	r2, fp, #528	; 0x210
    192c:	sub	r3, fp, #524	; 0x20c
    1930:	mov	r1, r2
    1934:	mov	r0, r3
    1938:	bl	50c8 <coda_cursor_read_int32>
    193c:	mov	r3, r0
    1940:	cmp	r3, #0
    1944:	beq	1950 <read_vsf_integer+0x98>
    1948:	mvn	r3, #0
    194c:	b	19c4 <read_vsf_integer+0x10c>
    1950:	sub	r3, fp, #524	; 0x20c
    1954:	mov	r0, r3
    1958:	bl	0 <coda_cursor_goto_next_record_field>
    195c:	mov	r3, r0
    1960:	cmp	r3, #0
    1964:	beq	1970 <read_vsf_integer+0xb8>
    1968:	mvn	r3, #0
    196c:	b	19c4 <read_vsf_integer+0x10c>
    1970:	sub	r2, fp, #540	; 0x21c
    1974:	sub	r3, fp, #524	; 0x20c
    1978:	mov	r1, r2
    197c:	mov	r0, r3
    1980:	bl	5d94 <coda_cursor_read_double>
    1984:	mov	r3, r0
    1988:	cmp	r3, #0
    198c:	beq	1998 <read_vsf_integer+0xe0>
    1990:	mvn	r3, #0
    1994:	b	19c4 <read_vsf_integer+0x10c>
    1998:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    199c:	rsb	r3, r3, #0
    19a0:	mov	r0, r3
    19a4:	vldr	d0, [pc, #44]	; 19d8 <read_vsf_integer+0x120>
    19a8:	bl	e04 <ipow>
    19ac:	vmov.f64	d6, d0
    19b0:	vldr	d7, [fp, #-540]	; 0xfffffde4
    19b4:	vmul.f64	d7, d6, d7
    19b8:	ldr	r3, [fp, #-548]	; 0xfffffddc
    19bc:	vstr	d7, [r3]
    19c0:	mov	r3, #0
    19c4:	mov	r0, r3
    19c8:	sub	sp, fp, #4
    19cc:	ldr	fp, [sp]
    19d0:	add	sp, sp, #4
    19d4:	pop	{pc}		; (ldr pc, [sp], #4)
    19d8:	.word	0x00000000
    19dc:	.word	0x40240000

000019e0 <read_int8>:
    19e0:	str	fp, [sp, #-8]!
    19e4:	str	lr, [sp, #4]
    19e8:	add	fp, sp, #4
    19ec:	sub	sp, sp, #8
    19f0:	str	r0, [fp, #-8]
    19f4:	str	r1, [fp, #-12]
    19f8:	ldr	r3, [fp, #-8]
    19fc:	ldr	r3, [r3, #4]
    1a00:	sub	r3, r3, #1
    1a04:	ldr	r2, [fp, #-8]
    1a08:	lsl	r3, r3, #4
    1a0c:	add	r3, r2, r3
    1a10:	ldr	r3, [r3, #8]
    1a14:	ldr	r3, [r3]
    1a18:	cmp	r3, #101	; 0x65
    1a1c:	beq	1aa0 <read_int8+0xc0>
    1a20:	cmp	r3, #101	; 0x65
    1a24:	bhi	1a44 <read_int8+0x64>
    1a28:	cmp	r3, #1
    1a2c:	beq	1a78 <read_int8+0x98>
    1a30:	cmp	r3, #0
    1a34:	beq	1a64 <read_int8+0x84>
    1a38:	cmp	r3, #100	; 0x64
    1a3c:	beq	1a8c <read_int8+0xac>
    1a40:	b	1af0 <read_int8+0x110>
    1a44:	cmp	r3, #103	; 0x67
    1a48:	beq	1ac8 <read_int8+0xe8>
    1a4c:	cmp	r3, #103	; 0x67
    1a50:	bcc	1ab4 <read_int8+0xd4>
    1a54:	cmp	r3, #104	; 0x68
    1a58:	beq	1adc <read_int8+0xfc>
    1a5c:	cmp	r3, #105	; 0x69
    1a60:	b	1af0 <read_int8+0x110>
    1a64:	ldr	r1, [fp, #-12]
    1a68:	ldr	r0, [fp, #-8]
    1a6c:	bl	0 <coda_ascii_cursor_read_int8>
    1a70:	mov	r3, r0
    1a74:	b	1b10 <read_int8+0x130>
    1a78:	ldr	r1, [fp, #-12]
    1a7c:	ldr	r0, [fp, #-8]
    1a80:	bl	0 <coda_bin_cursor_read_int8>
    1a84:	mov	r3, r0
    1a88:	b	1b10 <read_int8+0x130>
    1a8c:	ldr	r1, [fp, #-12]
    1a90:	ldr	r0, [fp, #-8]
    1a94:	bl	0 <coda_mem_cursor_read_int8>
    1a98:	mov	r3, r0
    1a9c:	b	1b10 <read_int8+0x130>
    1aa0:	mov	r1, #0
    1aa4:	mvn	r0, #10
    1aa8:	bl	0 <coda_set_error>
    1aac:	mvn	r3, #0
    1ab0:	b	1b10 <read_int8+0x130>
    1ab4:	mov	r1, #0
    1ab8:	mvn	r0, #12
    1abc:	bl	0 <coda_set_error>
    1ac0:	mvn	r3, #0
    1ac4:	b	1b10 <read_int8+0x130>
    1ac8:	ldr	r1, [fp, #-12]
    1acc:	ldr	r0, [fp, #-8]
    1ad0:	bl	0 <coda_cdf_cursor_read_int8>
    1ad4:	mov	r3, r0
    1ad8:	b	1b10 <read_int8+0x130>
    1adc:	ldr	r1, [fp, #-12]
    1ae0:	ldr	r0, [fp, #-8]
    1ae4:	bl	0 <coda_netcdf_cursor_read_int8>
    1ae8:	mov	r3, r0
    1aec:	b	1b10 <read_int8+0x130>
    1af0:	movw	r3, #0
    1af4:	movt	r3, #0
    1af8:	movw	r2, #359	; 0x167
    1afc:	movw	r1, #0
    1b00:	movt	r1, #0
    1b04:	movw	r0, #0
    1b08:	movt	r0, #0
    1b0c:	bl	0 <__assert_fail>
    1b10:	mov	r0, r3
    1b14:	sub	sp, fp, #4
    1b18:	ldr	fp, [sp]
    1b1c:	add	sp, sp, #4
    1b20:	pop	{pc}		; (ldr pc, [sp], #4)

00001b24 <read_uint8>:
    1b24:	str	fp, [sp, #-8]!
    1b28:	str	lr, [sp, #4]
    1b2c:	add	fp, sp, #4
    1b30:	sub	sp, sp, #8
    1b34:	str	r0, [fp, #-8]
    1b38:	str	r1, [fp, #-12]
    1b3c:	ldr	r3, [fp, #-8]
    1b40:	ldr	r3, [r3, #4]
    1b44:	sub	r3, r3, #1
    1b48:	ldr	r2, [fp, #-8]
    1b4c:	lsl	r3, r3, #4
    1b50:	add	r3, r2, r3
    1b54:	ldr	r3, [r3, #8]
    1b58:	ldr	r3, [r3]
    1b5c:	cmp	r3, #101	; 0x65
    1b60:	beq	1be0 <read_uint8+0xbc>
    1b64:	cmp	r3, #101	; 0x65
    1b68:	bhi	1b88 <read_uint8+0x64>
    1b6c:	cmp	r3, #1
    1b70:	beq	1bb8 <read_uint8+0x94>
    1b74:	cmp	r3, #0
    1b78:	beq	1ba4 <read_uint8+0x80>
    1b7c:	cmp	r3, #100	; 0x64
    1b80:	beq	1bcc <read_uint8+0xa8>
    1b84:	b	1c1c <read_uint8+0xf8>
    1b88:	cmp	r3, #103	; 0x67
    1b8c:	beq	1c08 <read_uint8+0xe4>
    1b90:	cmp	r3, #103	; 0x67
    1b94:	bcc	1bf4 <read_uint8+0xd0>
    1b98:	cmp	r3, #105	; 0x69
    1b9c:	bhi	1c1c <read_uint8+0xf8>
    1ba0:	b	1c1c <read_uint8+0xf8>
    1ba4:	ldr	r1, [fp, #-12]
    1ba8:	ldr	r0, [fp, #-8]
    1bac:	bl	0 <coda_ascii_cursor_read_uint8>
    1bb0:	mov	r3, r0
    1bb4:	b	1c3c <read_uint8+0x118>
    1bb8:	ldr	r1, [fp, #-12]
    1bbc:	ldr	r0, [fp, #-8]
    1bc0:	bl	0 <coda_bin_cursor_read_uint8>
    1bc4:	mov	r3, r0
    1bc8:	b	1c3c <read_uint8+0x118>
    1bcc:	ldr	r1, [fp, #-12]
    1bd0:	ldr	r0, [fp, #-8]
    1bd4:	bl	0 <coda_mem_cursor_read_uint8>
    1bd8:	mov	r3, r0
    1bdc:	b	1c3c <read_uint8+0x118>
    1be0:	mov	r1, #0
    1be4:	mvn	r0, #10
    1be8:	bl	0 <coda_set_error>
    1bec:	mvn	r3, #0
    1bf0:	b	1c3c <read_uint8+0x118>
    1bf4:	mov	r1, #0
    1bf8:	mvn	r0, #12
    1bfc:	bl	0 <coda_set_error>
    1c00:	mvn	r3, #0
    1c04:	b	1c3c <read_uint8+0x118>
    1c08:	ldr	r1, [fp, #-12]
    1c0c:	ldr	r0, [fp, #-8]
    1c10:	bl	0 <coda_cdf_cursor_read_uint8>
    1c14:	mov	r3, r0
    1c18:	b	1c3c <read_uint8+0x118>
    1c1c:	movw	r3, #0
    1c20:	movt	r3, #0
    1c24:	movw	r2, #394	; 0x18a
    1c28:	movw	r1, #0
    1c2c:	movt	r1, #0
    1c30:	movw	r0, #0
    1c34:	movt	r0, #0
    1c38:	bl	0 <__assert_fail>
    1c3c:	mov	r0, r3
    1c40:	sub	sp, fp, #4
    1c44:	ldr	fp, [sp]
    1c48:	add	sp, sp, #4
    1c4c:	pop	{pc}		; (ldr pc, [sp], #4)

00001c50 <read_int16>:
    1c50:	str	fp, [sp, #-8]!
    1c54:	str	lr, [sp, #4]
    1c58:	add	fp, sp, #4
    1c5c:	sub	sp, sp, #8
    1c60:	str	r0, [fp, #-8]
    1c64:	str	r1, [fp, #-12]
    1c68:	ldr	r3, [fp, #-8]
    1c6c:	ldr	r3, [r3, #4]
    1c70:	sub	r3, r3, #1
    1c74:	ldr	r2, [fp, #-8]
    1c78:	lsl	r3, r3, #4
    1c7c:	add	r3, r2, r3
    1c80:	ldr	r3, [r3, #8]
    1c84:	ldr	r3, [r3]
    1c88:	cmp	r3, #101	; 0x65
    1c8c:	beq	1d14 <read_int16+0xc4>
    1c90:	cmp	r3, #101	; 0x65
    1c94:	bhi	1cb4 <read_int16+0x64>
    1c98:	cmp	r3, #1
    1c9c:	beq	1cec <read_int16+0x9c>
    1ca0:	cmp	r3, #0
    1ca4:	beq	1cd8 <read_int16+0x88>
    1ca8:	cmp	r3, #100	; 0x64
    1cac:	beq	1d00 <read_int16+0xb0>
    1cb0:	b	1d84 <read_int16+0x134>
    1cb4:	cmp	r3, #103	; 0x67
    1cb8:	beq	1d3c <read_int16+0xec>
    1cbc:	cmp	r3, #103	; 0x67
    1cc0:	bcc	1d28 <read_int16+0xd8>
    1cc4:	cmp	r3, #104	; 0x68
    1cc8:	beq	1d50 <read_int16+0x100>
    1ccc:	cmp	r3, #105	; 0x69
    1cd0:	beq	1d64 <read_int16+0x114>
    1cd4:	b	1d84 <read_int16+0x134>
    1cd8:	ldr	r1, [fp, #-12]
    1cdc:	ldr	r0, [fp, #-8]
    1ce0:	bl	0 <coda_ascii_cursor_read_int16>
    1ce4:	mov	r3, r0
    1ce8:	b	1d88 <read_int16+0x138>
    1cec:	ldr	r1, [fp, #-12]
    1cf0:	ldr	r0, [fp, #-8]
    1cf4:	bl	0 <coda_bin_cursor_read_int16>
    1cf8:	mov	r3, r0
    1cfc:	b	1d88 <read_int16+0x138>
    1d00:	ldr	r1, [fp, #-12]
    1d04:	ldr	r0, [fp, #-8]
    1d08:	bl	0 <coda_mem_cursor_read_int16>
    1d0c:	mov	r3, r0
    1d10:	b	1d88 <read_int16+0x138>
    1d14:	mov	r1, #0
    1d18:	mvn	r0, #10
    1d1c:	bl	0 <coda_set_error>
    1d20:	mvn	r3, #0
    1d24:	b	1d88 <read_int16+0x138>
    1d28:	mov	r1, #0
    1d2c:	mvn	r0, #12
    1d30:	bl	0 <coda_set_error>
    1d34:	mvn	r3, #0
    1d38:	b	1d88 <read_int16+0x138>
    1d3c:	ldr	r1, [fp, #-12]
    1d40:	ldr	r0, [fp, #-8]
    1d44:	bl	0 <coda_cdf_cursor_read_int16>
    1d48:	mov	r3, r0
    1d4c:	b	1d88 <read_int16+0x138>
    1d50:	ldr	r1, [fp, #-12]
    1d54:	ldr	r0, [fp, #-8]
    1d58:	bl	0 <coda_netcdf_cursor_read_int16>
    1d5c:	mov	r3, r0
    1d60:	b	1d88 <read_int16+0x138>
    1d64:	movw	r3, #0
    1d68:	movt	r3, #0
    1d6c:	movw	r2, #427	; 0x1ab
    1d70:	movw	r1, #0
    1d74:	movt	r1, #0
    1d78:	movw	r0, #0
    1d7c:	movt	r0, #0
    1d80:	bl	0 <__assert_fail>
    1d84:	mov	r3, #0
    1d88:	mov	r0, r3
    1d8c:	sub	sp, fp, #4
    1d90:	ldr	fp, [sp]
    1d94:	add	sp, sp, #4
    1d98:	pop	{pc}		; (ldr pc, [sp], #4)

00001d9c <read_uint16>:
    1d9c:	str	fp, [sp, #-8]!
    1da0:	str	lr, [sp, #4]
    1da4:	add	fp, sp, #4
    1da8:	sub	sp, sp, #8
    1dac:	str	r0, [fp, #-8]
    1db0:	str	r1, [fp, #-12]
    1db4:	ldr	r3, [fp, #-8]
    1db8:	ldr	r3, [r3, #4]
    1dbc:	sub	r3, r3, #1
    1dc0:	ldr	r2, [fp, #-8]
    1dc4:	lsl	r3, r3, #4
    1dc8:	add	r3, r2, r3
    1dcc:	ldr	r3, [r3, #8]
    1dd0:	ldr	r3, [r3]
    1dd4:	cmp	r3, #101	; 0x65
    1dd8:	beq	1e58 <read_uint16+0xbc>
    1ddc:	cmp	r3, #101	; 0x65
    1de0:	bhi	1e00 <read_uint16+0x64>
    1de4:	cmp	r3, #1
    1de8:	beq	1e30 <read_uint16+0x94>
    1dec:	cmp	r3, #0
    1df0:	beq	1e1c <read_uint16+0x80>
    1df4:	cmp	r3, #100	; 0x64
    1df8:	beq	1e44 <read_uint16+0xa8>
    1dfc:	b	1e94 <read_uint16+0xf8>
    1e00:	cmp	r3, #103	; 0x67
    1e04:	beq	1e80 <read_uint16+0xe4>
    1e08:	cmp	r3, #103	; 0x67
    1e0c:	bcc	1e6c <read_uint16+0xd0>
    1e10:	cmp	r3, #105	; 0x69
    1e14:	bhi	1e94 <read_uint16+0xf8>
    1e18:	b	1e94 <read_uint16+0xf8>
    1e1c:	ldr	r1, [fp, #-12]
    1e20:	ldr	r0, [fp, #-8]
    1e24:	bl	0 <coda_ascii_cursor_read_uint16>
    1e28:	mov	r3, r0
    1e2c:	b	1eb4 <read_uint16+0x118>
    1e30:	ldr	r1, [fp, #-12]
    1e34:	ldr	r0, [fp, #-8]
    1e38:	bl	0 <coda_bin_cursor_read_uint16>
    1e3c:	mov	r3, r0
    1e40:	b	1eb4 <read_uint16+0x118>
    1e44:	ldr	r1, [fp, #-12]
    1e48:	ldr	r0, [fp, #-8]
    1e4c:	bl	0 <coda_mem_cursor_read_uint16>
    1e50:	mov	r3, r0
    1e54:	b	1eb4 <read_uint16+0x118>
    1e58:	mov	r1, #0
    1e5c:	mvn	r0, #10
    1e60:	bl	0 <coda_set_error>
    1e64:	mvn	r3, #0
    1e68:	b	1eb4 <read_uint16+0x118>
    1e6c:	mov	r1, #0
    1e70:	mvn	r0, #12
    1e74:	bl	0 <coda_set_error>
    1e78:	mvn	r3, #0
    1e7c:	b	1eb4 <read_uint16+0x118>
    1e80:	ldr	r1, [fp, #-12]
    1e84:	ldr	r0, [fp, #-8]
    1e88:	bl	0 <coda_cdf_cursor_read_uint16>
    1e8c:	mov	r3, r0
    1e90:	b	1eb4 <read_uint16+0x118>
    1e94:	movw	r3, #0
    1e98:	movt	r3, #0
    1e9c:	movw	r2, #465	; 0x1d1
    1ea0:	movw	r1, #0
    1ea4:	movt	r1, #0
    1ea8:	movw	r0, #0
    1eac:	movt	r0, #0
    1eb0:	bl	0 <__assert_fail>
    1eb4:	mov	r0, r3
    1eb8:	sub	sp, fp, #4
    1ebc:	ldr	fp, [sp]
    1ec0:	add	sp, sp, #4
    1ec4:	pop	{pc}		; (ldr pc, [sp], #4)

00001ec8 <read_int32>:
    1ec8:	str	fp, [sp, #-8]!
    1ecc:	str	lr, [sp, #4]
    1ed0:	add	fp, sp, #4
    1ed4:	sub	sp, sp, #8
    1ed8:	str	r0, [fp, #-8]
    1edc:	str	r1, [fp, #-12]
    1ee0:	ldr	r3, [fp, #-8]
    1ee4:	ldr	r3, [r3, #4]
    1ee8:	sub	r3, r3, #1
    1eec:	ldr	r2, [fp, #-8]
    1ef0:	lsl	r3, r3, #4
    1ef4:	add	r3, r2, r3
    1ef8:	ldr	r3, [r3, #8]
    1efc:	ldr	r3, [r3]
    1f00:	cmp	r3, #101	; 0x65
    1f04:	beq	1f8c <read_int32+0xc4>
    1f08:	cmp	r3, #101	; 0x65
    1f0c:	bhi	1f2c <read_int32+0x64>
    1f10:	cmp	r3, #1
    1f14:	beq	1f64 <read_int32+0x9c>
    1f18:	cmp	r3, #0
    1f1c:	beq	1f50 <read_int32+0x88>
    1f20:	cmp	r3, #100	; 0x64
    1f24:	beq	1f78 <read_int32+0xb0>
    1f28:	b	1ffc <read_int32+0x134>
    1f2c:	cmp	r3, #103	; 0x67
    1f30:	beq	1fb4 <read_int32+0xec>
    1f34:	cmp	r3, #103	; 0x67
    1f38:	bcc	1fa0 <read_int32+0xd8>
    1f3c:	cmp	r3, #104	; 0x68
    1f40:	beq	1fc8 <read_int32+0x100>
    1f44:	cmp	r3, #105	; 0x69
    1f48:	beq	1fdc <read_int32+0x114>
    1f4c:	b	1ffc <read_int32+0x134>
    1f50:	ldr	r1, [fp, #-12]
    1f54:	ldr	r0, [fp, #-8]
    1f58:	bl	0 <coda_ascii_cursor_read_int32>
    1f5c:	mov	r3, r0
    1f60:	b	2000 <read_int32+0x138>
    1f64:	ldr	r1, [fp, #-12]
    1f68:	ldr	r0, [fp, #-8]
    1f6c:	bl	0 <coda_bin_cursor_read_int32>
    1f70:	mov	r3, r0
    1f74:	b	2000 <read_int32+0x138>
    1f78:	ldr	r1, [fp, #-12]
    1f7c:	ldr	r0, [fp, #-8]
    1f80:	bl	0 <coda_mem_cursor_read_int32>
    1f84:	mov	r3, r0
    1f88:	b	2000 <read_int32+0x138>
    1f8c:	mov	r1, #0
    1f90:	mvn	r0, #10
    1f94:	bl	0 <coda_set_error>
    1f98:	mvn	r3, #0
    1f9c:	b	2000 <read_int32+0x138>
    1fa0:	mov	r1, #0
    1fa4:	mvn	r0, #12
    1fa8:	bl	0 <coda_set_error>
    1fac:	mvn	r3, #0
    1fb0:	b	2000 <read_int32+0x138>
    1fb4:	ldr	r1, [fp, #-12]
    1fb8:	ldr	r0, [fp, #-8]
    1fbc:	bl	0 <coda_cdf_cursor_read_int32>
    1fc0:	mov	r3, r0
    1fc4:	b	2000 <read_int32+0x138>
    1fc8:	ldr	r1, [fp, #-12]
    1fcc:	ldr	r0, [fp, #-8]
    1fd0:	bl	0 <coda_netcdf_cursor_read_int32>
    1fd4:	mov	r3, r0
    1fd8:	b	2000 <read_int32+0x138>
    1fdc:	movw	r3, #0
    1fe0:	movt	r3, #0
    1fe4:	movw	r2, #499	; 0x1f3
    1fe8:	movw	r1, #0
    1fec:	movt	r1, #0
    1ff0:	movw	r0, #0
    1ff4:	movt	r0, #0
    1ff8:	bl	0 <__assert_fail>
    1ffc:	mov	r3, #0
    2000:	mov	r0, r3
    2004:	sub	sp, fp, #4
    2008:	ldr	fp, [sp]
    200c:	add	sp, sp, #4
    2010:	pop	{pc}		; (ldr pc, [sp], #4)

00002014 <read_uint32>:
    2014:	str	fp, [sp, #-8]!
    2018:	str	lr, [sp, #4]
    201c:	add	fp, sp, #4
    2020:	sub	sp, sp, #8
    2024:	str	r0, [fp, #-8]
    2028:	str	r1, [fp, #-12]
    202c:	ldr	r3, [fp, #-8]
    2030:	ldr	r3, [r3, #4]
    2034:	sub	r3, r3, #1
    2038:	ldr	r2, [fp, #-8]
    203c:	lsl	r3, r3, #4
    2040:	add	r3, r2, r3
    2044:	ldr	r3, [r3, #8]
    2048:	ldr	r3, [r3]
    204c:	cmp	r3, #101	; 0x65
    2050:	beq	20d0 <read_uint32+0xbc>
    2054:	cmp	r3, #101	; 0x65
    2058:	bhi	2078 <read_uint32+0x64>
    205c:	cmp	r3, #1
    2060:	beq	20a8 <read_uint32+0x94>
    2064:	cmp	r3, #0
    2068:	beq	2094 <read_uint32+0x80>
    206c:	cmp	r3, #100	; 0x64
    2070:	beq	20bc <read_uint32+0xa8>
    2074:	b	210c <read_uint32+0xf8>
    2078:	cmp	r3, #103	; 0x67
    207c:	beq	20f8 <read_uint32+0xe4>
    2080:	cmp	r3, #103	; 0x67
    2084:	bcc	20e4 <read_uint32+0xd0>
    2088:	cmp	r3, #105	; 0x69
    208c:	bhi	210c <read_uint32+0xf8>
    2090:	b	210c <read_uint32+0xf8>
    2094:	ldr	r1, [fp, #-12]
    2098:	ldr	r0, [fp, #-8]
    209c:	bl	0 <coda_ascii_cursor_read_uint32>
    20a0:	mov	r3, r0
    20a4:	b	212c <read_uint32+0x118>
    20a8:	ldr	r1, [fp, #-12]
    20ac:	ldr	r0, [fp, #-8]
    20b0:	bl	0 <coda_bin_cursor_read_uint32>
    20b4:	mov	r3, r0
    20b8:	b	212c <read_uint32+0x118>
    20bc:	ldr	r1, [fp, #-12]
    20c0:	ldr	r0, [fp, #-8]
    20c4:	bl	0 <coda_mem_cursor_read_uint32>
    20c8:	mov	r3, r0
    20cc:	b	212c <read_uint32+0x118>
    20d0:	mov	r1, #0
    20d4:	mvn	r0, #10
    20d8:	bl	0 <coda_set_error>
    20dc:	mvn	r3, #0
    20e0:	b	212c <read_uint32+0x118>
    20e4:	mov	r1, #0
    20e8:	mvn	r0, #12
    20ec:	bl	0 <coda_set_error>
    20f0:	mvn	r3, #0
    20f4:	b	212c <read_uint32+0x118>
    20f8:	ldr	r1, [fp, #-12]
    20fc:	ldr	r0, [fp, #-8]
    2100:	bl	0 <coda_cdf_cursor_read_uint32>
    2104:	mov	r3, r0
    2108:	b	212c <read_uint32+0x118>
    210c:	movw	r3, #0
    2110:	movt	r3, #0
    2114:	movw	r2, #537	; 0x219
    2118:	movw	r1, #0
    211c:	movt	r1, #0
    2120:	movw	r0, #0
    2124:	movt	r0, #0
    2128:	bl	0 <__assert_fail>
    212c:	mov	r0, r3
    2130:	sub	sp, fp, #4
    2134:	ldr	fp, [sp]
    2138:	add	sp, sp, #4
    213c:	pop	{pc}		; (ldr pc, [sp], #4)

00002140 <read_int64>:
    2140:	str	fp, [sp, #-8]!
    2144:	str	lr, [sp, #4]
    2148:	add	fp, sp, #4
    214c:	sub	sp, sp, #8
    2150:	str	r0, [fp, #-8]
    2154:	str	r1, [fp, #-12]
    2158:	ldr	r3, [fp, #-8]
    215c:	ldr	r3, [r3, #4]
    2160:	sub	r3, r3, #1
    2164:	ldr	r2, [fp, #-8]
    2168:	lsl	r3, r3, #4
    216c:	add	r3, r2, r3
    2170:	ldr	r3, [r3, #8]
    2174:	ldr	r3, [r3]
    2178:	cmp	r3, #101	; 0x65
    217c:	beq	21fc <read_int64+0xbc>
    2180:	cmp	r3, #101	; 0x65
    2184:	bhi	21a4 <read_int64+0x64>
    2188:	cmp	r3, #1
    218c:	beq	21d4 <read_int64+0x94>
    2190:	cmp	r3, #0
    2194:	beq	21c0 <read_int64+0x80>
    2198:	cmp	r3, #100	; 0x64
    219c:	beq	21e8 <read_int64+0xa8>
    21a0:	b	2238 <read_int64+0xf8>
    21a4:	cmp	r3, #103	; 0x67
    21a8:	beq	2224 <read_int64+0xe4>
    21ac:	cmp	r3, #103	; 0x67
    21b0:	bcc	2210 <read_int64+0xd0>
    21b4:	cmp	r3, #105	; 0x69
    21b8:	bhi	2238 <read_int64+0xf8>
    21bc:	b	2238 <read_int64+0xf8>
    21c0:	ldr	r1, [fp, #-12]
    21c4:	ldr	r0, [fp, #-8]
    21c8:	bl	0 <coda_ascii_cursor_read_int64>
    21cc:	mov	r3, r0
    21d0:	b	2258 <read_int64+0x118>
    21d4:	ldr	r1, [fp, #-12]
    21d8:	ldr	r0, [fp, #-8]
    21dc:	bl	0 <coda_bin_cursor_read_int64>
    21e0:	mov	r3, r0
    21e4:	b	2258 <read_int64+0x118>
    21e8:	ldr	r1, [fp, #-12]
    21ec:	ldr	r0, [fp, #-8]
    21f0:	bl	0 <coda_mem_cursor_read_int64>
    21f4:	mov	r3, r0
    21f8:	b	2258 <read_int64+0x118>
    21fc:	mov	r1, #0
    2200:	mvn	r0, #10
    2204:	bl	0 <coda_set_error>
    2208:	mvn	r3, #0
    220c:	b	2258 <read_int64+0x118>
    2210:	mov	r1, #0
    2214:	mvn	r0, #12
    2218:	bl	0 <coda_set_error>
    221c:	mvn	r3, #0
    2220:	b	2258 <read_int64+0x118>
    2224:	ldr	r1, [fp, #-12]
    2228:	ldr	r0, [fp, #-8]
    222c:	bl	0 <coda_cdf_cursor_read_int64>
    2230:	mov	r3, r0
    2234:	b	2258 <read_int64+0x118>
    2238:	movw	r3, #0
    223c:	movt	r3, #0
    2240:	mov	r2, #572	; 0x23c
    2244:	movw	r1, #0
    2248:	movt	r1, #0
    224c:	movw	r0, #0
    2250:	movt	r0, #0
    2254:	bl	0 <__assert_fail>
    2258:	mov	r0, r3
    225c:	sub	sp, fp, #4
    2260:	ldr	fp, [sp]
    2264:	add	sp, sp, #4
    2268:	pop	{pc}		; (ldr pc, [sp], #4)

0000226c <read_uint64>:
    226c:	str	fp, [sp, #-8]!
    2270:	str	lr, [sp, #4]
    2274:	add	fp, sp, #4
    2278:	sub	sp, sp, #8
    227c:	str	r0, [fp, #-8]
    2280:	str	r1, [fp, #-12]
    2284:	ldr	r3, [fp, #-8]
    2288:	ldr	r3, [r3, #4]
    228c:	sub	r3, r3, #1
    2290:	ldr	r2, [fp, #-8]
    2294:	lsl	r3, r3, #4
    2298:	add	r3, r2, r3
    229c:	ldr	r3, [r3, #8]
    22a0:	ldr	r3, [r3]
    22a4:	cmp	r3, #101	; 0x65
    22a8:	beq	2320 <read_uint64+0xb4>
    22ac:	cmp	r3, #101	; 0x65
    22b0:	bhi	22d0 <read_uint64+0x64>
    22b4:	cmp	r3, #1
    22b8:	beq	22f8 <read_uint64+0x8c>
    22bc:	cmp	r3, #0
    22c0:	beq	22e4 <read_uint64+0x78>
    22c4:	cmp	r3, #100	; 0x64
    22c8:	beq	230c <read_uint64+0xa0>
    22cc:	b	2348 <read_uint64+0xdc>
    22d0:	cmp	r3, #102	; 0x66
    22d4:	beq	2334 <read_uint64+0xc8>
    22d8:	cmp	r3, #105	; 0x69
    22dc:	bhi	2348 <read_uint64+0xdc>
    22e0:	b	2348 <read_uint64+0xdc>
    22e4:	ldr	r1, [fp, #-12]
    22e8:	ldr	r0, [fp, #-8]
    22ec:	bl	0 <coda_ascii_cursor_read_uint64>
    22f0:	mov	r3, r0
    22f4:	b	2368 <read_uint64+0xfc>
    22f8:	ldr	r1, [fp, #-12]
    22fc:	ldr	r0, [fp, #-8]
    2300:	bl	0 <coda_bin_cursor_read_uint64>
    2304:	mov	r3, r0
    2308:	b	2368 <read_uint64+0xfc>
    230c:	ldr	r1, [fp, #-12]
    2310:	ldr	r0, [fp, #-8]
    2314:	bl	0 <coda_mem_cursor_read_uint64>
    2318:	mov	r3, r0
    231c:	b	2368 <read_uint64+0xfc>
    2320:	mov	r1, #0
    2324:	mvn	r0, #10
    2328:	bl	0 <coda_set_error>
    232c:	mvn	r3, #0
    2330:	b	2368 <read_uint64+0xfc>
    2334:	mov	r1, #0
    2338:	mvn	r0, #12
    233c:	bl	0 <coda_set_error>
    2340:	mvn	r3, #0
    2344:	b	2368 <read_uint64+0xfc>
    2348:	movw	r3, #0
    234c:	movt	r3, #0
    2350:	movw	r2, #606	; 0x25e
    2354:	movw	r1, #0
    2358:	movt	r1, #0
    235c:	movw	r0, #0
    2360:	movt	r0, #0
    2364:	bl	0 <__assert_fail>
    2368:	mov	r0, r3
    236c:	sub	sp, fp, #4
    2370:	ldr	fp, [sp]
    2374:	add	sp, sp, #4
    2378:	pop	{pc}		; (ldr pc, [sp], #4)

0000237c <read_float>:
    237c:	str	fp, [sp, #-8]!
    2380:	str	lr, [sp, #4]
    2384:	add	fp, sp, #4
    2388:	sub	sp, sp, #8
    238c:	str	r0, [fp, #-8]
    2390:	str	r1, [fp, #-12]
    2394:	ldr	r3, [fp, #-8]
    2398:	ldr	r3, [r3, #4]
    239c:	sub	r3, r3, #1
    23a0:	ldr	r2, [fp, #-8]
    23a4:	lsl	r3, r3, #4
    23a8:	add	r3, r2, r3
    23ac:	ldr	r3, [r3, #8]
    23b0:	ldr	r3, [r3]
    23b4:	cmp	r3, #101	; 0x65
    23b8:	beq	2440 <read_float+0xc4>
    23bc:	cmp	r3, #101	; 0x65
    23c0:	bhi	23e0 <read_float+0x64>
    23c4:	cmp	r3, #1
    23c8:	beq	2418 <read_float+0x9c>
    23cc:	cmp	r3, #0
    23d0:	beq	2404 <read_float+0x88>
    23d4:	cmp	r3, #100	; 0x64
    23d8:	beq	242c <read_float+0xb0>
    23dc:	b	24a4 <read_float+0x128>
    23e0:	cmp	r3, #103	; 0x67
    23e4:	beq	2468 <read_float+0xec>
    23e8:	cmp	r3, #103	; 0x67
    23ec:	bcc	2454 <read_float+0xd8>
    23f0:	cmp	r3, #104	; 0x68
    23f4:	beq	247c <read_float+0x100>
    23f8:	cmp	r3, #105	; 0x69
    23fc:	beq	2490 <read_float+0x114>
    2400:	b	24a4 <read_float+0x128>
    2404:	ldr	r1, [fp, #-12]
    2408:	ldr	r0, [fp, #-8]
    240c:	bl	0 <coda_ascii_cursor_read_float>
    2410:	mov	r3, r0
    2414:	b	24c4 <read_float+0x148>
    2418:	ldr	r1, [fp, #-12]
    241c:	ldr	r0, [fp, #-8]
    2420:	bl	0 <coda_bin_cursor_read_float>
    2424:	mov	r3, r0
    2428:	b	24c4 <read_float+0x148>
    242c:	ldr	r1, [fp, #-12]
    2430:	ldr	r0, [fp, #-8]
    2434:	bl	0 <coda_mem_cursor_read_float>
    2438:	mov	r3, r0
    243c:	b	24c4 <read_float+0x148>
    2440:	mov	r1, #0
    2444:	mvn	r0, #10
    2448:	bl	0 <coda_set_error>
    244c:	mvn	r3, #0
    2450:	b	24c4 <read_float+0x148>
    2454:	mov	r1, #0
    2458:	mvn	r0, #12
    245c:	bl	0 <coda_set_error>
    2460:	mvn	r3, #0
    2464:	b	24c4 <read_float+0x148>
    2468:	ldr	r1, [fp, #-12]
    246c:	ldr	r0, [fp, #-8]
    2470:	bl	0 <coda_cdf_cursor_read_float>
    2474:	mov	r3, r0
    2478:	b	24c4 <read_float+0x148>
    247c:	ldr	r1, [fp, #-12]
    2480:	ldr	r0, [fp, #-8]
    2484:	bl	0 <coda_netcdf_cursor_read_float>
    2488:	mov	r3, r0
    248c:	b	24c4 <read_float+0x148>
    2490:	ldr	r1, [fp, #-12]
    2494:	ldr	r0, [fp, #-8]
    2498:	bl	0 <coda_grib_cursor_read_float>
    249c:	mov	r3, r0
    24a0:	b	24c4 <read_float+0x148>
    24a4:	movw	r3, #0
    24a8:	movt	r3, #0
    24ac:	movw	r2, #642	; 0x282
    24b0:	movw	r1, #0
    24b4:	movt	r1, #0
    24b8:	movw	r0, #0
    24bc:	movt	r0, #0
    24c0:	bl	0 <__assert_fail>
    24c4:	mov	r0, r3
    24c8:	sub	sp, fp, #4
    24cc:	ldr	fp, [sp]
    24d0:	add	sp, sp, #4
    24d4:	pop	{pc}		; (ldr pc, [sp], #4)

000024d8 <read_double>:
    24d8:	str	fp, [sp, #-8]!
    24dc:	str	lr, [sp, #4]
    24e0:	add	fp, sp, #4
    24e4:	sub	sp, sp, #16
    24e8:	str	r0, [fp, #-16]
    24ec:	str	r1, [fp, #-20]	; 0xffffffec
    24f0:	ldr	r3, [fp, #-16]
    24f4:	ldr	r3, [r3, #4]
    24f8:	sub	r3, r3, #1
    24fc:	ldr	r2, [fp, #-16]
    2500:	lsl	r3, r3, #4
    2504:	add	r3, r2, r3
    2508:	ldr	r3, [r3, #8]
    250c:	ldr	r3, [r3]
    2510:	cmp	r3, #99	; 0x63
    2514:	bhi	2538 <read_double+0x60>
    2518:	ldr	r3, [fp, #-16]
    251c:	ldr	r3, [r3, #4]
    2520:	sub	r3, r3, #1
    2524:	ldr	r2, [fp, #-16]
    2528:	lsl	r3, r3, #4
    252c:	add	r3, r2, r3
    2530:	ldr	r3, [r3, #8]
    2534:	b	2558 <read_double+0x80>
    2538:	ldr	r3, [fp, #-16]
    253c:	ldr	r3, [r3, #4]
    2540:	sub	r3, r3, #1
    2544:	ldr	r2, [fp, #-16]
    2548:	lsl	r3, r3, #4
    254c:	add	r3, r2, r3
    2550:	ldr	r3, [r3, #8]
    2554:	ldr	r3, [r3, #4]
    2558:	str	r3, [fp, #-8]
    255c:	ldr	r3, [fp, #-8]
    2560:	ldr	r3, [r3, #8]
    2564:	cmp	r3, #6
    2568:	bne	25b4 <read_double+0xdc>
    256c:	ldr	r3, [fp, #-8]
    2570:	ldr	r3, [r3, #40]	; 0x28
    2574:	cmp	r3, #2
    2578:	bne	2590 <read_double+0xb8>
    257c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2580:	ldr	r0, [fp, #-16]
    2584:	bl	17cc <read_time>
    2588:	mov	r3, r0
    258c:	b	26cc <read_double+0x1f4>
    2590:	ldr	r3, [fp, #-8]
    2594:	ldr	r3, [r3, #40]	; 0x28
    2598:	cmp	r3, #1
    259c:	bne	25b4 <read_double+0xdc>
    25a0:	ldr	r1, [fp, #-20]	; 0xffffffec
    25a4:	ldr	r0, [fp, #-16]
    25a8:	bl	18b8 <read_vsf_integer>
    25ac:	mov	r3, r0
    25b0:	b	26cc <read_double+0x1f4>
    25b4:	ldr	r3, [fp, #-16]
    25b8:	ldr	r3, [r3, #4]
    25bc:	sub	r3, r3, #1
    25c0:	ldr	r2, [fp, #-16]
    25c4:	lsl	r3, r3, #4
    25c8:	add	r3, r2, r3
    25cc:	ldr	r3, [r3, #8]
    25d0:	ldr	r3, [r3]
    25d4:	cmp	r3, #101	; 0x65
    25d8:	beq	265c <read_double+0x184>
    25dc:	cmp	r3, #101	; 0x65
    25e0:	bhi	2600 <read_double+0x128>
    25e4:	cmp	r3, #1
    25e8:	beq	2634 <read_double+0x15c>
    25ec:	cmp	r3, #0
    25f0:	beq	2620 <read_double+0x148>
    25f4:	cmp	r3, #100	; 0x64
    25f8:	beq	2648 <read_double+0x170>
    25fc:	b	26ac <read_double+0x1d4>
    2600:	cmp	r3, #103	; 0x67
    2604:	beq	2684 <read_double+0x1ac>
    2608:	cmp	r3, #103	; 0x67
    260c:	bcc	2670 <read_double+0x198>
    2610:	cmp	r3, #104	; 0x68
    2614:	beq	2698 <read_double+0x1c0>
    2618:	cmp	r3, #105	; 0x69
    261c:	b	26ac <read_double+0x1d4>
    2620:	ldr	r1, [fp, #-20]	; 0xffffffec
    2624:	ldr	r0, [fp, #-16]
    2628:	bl	0 <coda_ascii_cursor_read_double>
    262c:	mov	r3, r0
    2630:	b	26cc <read_double+0x1f4>
    2634:	ldr	r1, [fp, #-20]	; 0xffffffec
    2638:	ldr	r0, [fp, #-16]
    263c:	bl	0 <coda_bin_cursor_read_double>
    2640:	mov	r3, r0
    2644:	b	26cc <read_double+0x1f4>
    2648:	ldr	r1, [fp, #-20]	; 0xffffffec
    264c:	ldr	r0, [fp, #-16]
    2650:	bl	0 <coda_mem_cursor_read_double>
    2654:	mov	r3, r0
    2658:	b	26cc <read_double+0x1f4>
    265c:	mov	r1, #0
    2660:	mvn	r0, #10
    2664:	bl	0 <coda_set_error>
    2668:	mvn	r3, #0
    266c:	b	26cc <read_double+0x1f4>
    2670:	mov	r1, #0
    2674:	mvn	r0, #12
    2678:	bl	0 <coda_set_error>
    267c:	mvn	r3, #0
    2680:	b	26cc <read_double+0x1f4>
    2684:	ldr	r1, [fp, #-20]	; 0xffffffec
    2688:	ldr	r0, [fp, #-16]
    268c:	bl	0 <coda_cdf_cursor_read_double>
    2690:	mov	r3, r0
    2694:	b	26cc <read_double+0x1f4>
    2698:	ldr	r1, [fp, #-20]	; 0xffffffec
    269c:	ldr	r0, [fp, #-16]
    26a0:	bl	0 <coda_netcdf_cursor_read_double>
    26a4:	mov	r3, r0
    26a8:	b	26cc <read_double+0x1f4>
    26ac:	movw	r3, #0
    26b0:	movt	r3, #0
    26b4:	mov	r2, #692	; 0x2b4
    26b8:	movw	r1, #0
    26bc:	movt	r1, #0
    26c0:	movw	r0, #0
    26c4:	movt	r0, #0
    26c8:	bl	0 <__assert_fail>
    26cc:	mov	r0, r3
    26d0:	sub	sp, fp, #4
    26d4:	ldr	fp, [sp]
    26d8:	add	sp, sp, #4
    26dc:	pop	{pc}		; (ldr pc, [sp], #4)

000026e0 <read_char>:
    26e0:	str	fp, [sp, #-8]!
    26e4:	str	lr, [sp, #4]
    26e8:	add	fp, sp, #4
    26ec:	sub	sp, sp, #8
    26f0:	str	r0, [fp, #-8]
    26f4:	str	r1, [fp, #-12]
    26f8:	ldr	r3, [fp, #-8]
    26fc:	ldr	r3, [r3, #4]
    2700:	sub	r3, r3, #1
    2704:	ldr	r2, [fp, #-8]
    2708:	lsl	r3, r3, #4
    270c:	add	r3, r2, r3
    2710:	ldr	r3, [r3, #8]
    2714:	ldr	r3, [r3]
    2718:	cmp	r3, #101	; 0x65
    271c:	beq	27a0 <read_char+0xc0>
    2720:	cmp	r3, #101	; 0x65
    2724:	bhi	2744 <read_char+0x64>
    2728:	cmp	r3, #1
    272c:	beq	2778 <read_char+0x98>
    2730:	cmp	r3, #0
    2734:	beq	2764 <read_char+0x84>
    2738:	cmp	r3, #100	; 0x64
    273c:	beq	278c <read_char+0xac>
    2740:	b	27e0 <read_char+0x100>
    2744:	cmp	r3, #103	; 0x67
    2748:	beq	27b4 <read_char+0xd4>
    274c:	cmp	r3, #103	; 0x67
    2750:	bcc	27dc <read_char+0xfc>
    2754:	cmp	r3, #104	; 0x68
    2758:	beq	27c8 <read_char+0xe8>
    275c:	cmp	r3, #105	; 0x69
    2760:	b	27dc <read_char+0xfc>
    2764:	ldr	r1, [fp, #-12]
    2768:	ldr	r0, [fp, #-8]
    276c:	bl	0 <coda_ascii_cursor_read_char>
    2770:	mov	r3, r0
    2774:	b	2800 <read_char+0x120>
    2778:	ldr	r1, [fp, #-12]
    277c:	ldr	r0, [fp, #-8]
    2780:	bl	0 <coda_bin_cursor_read_char>
    2784:	mov	r3, r0
    2788:	b	2800 <read_char+0x120>
    278c:	ldr	r1, [fp, #-12]
    2790:	ldr	r0, [fp, #-8]
    2794:	bl	0 <coda_mem_cursor_read_char>
    2798:	mov	r3, r0
    279c:	b	2800 <read_char+0x120>
    27a0:	mov	r1, #0
    27a4:	mvn	r0, #10
    27a8:	bl	0 <coda_set_error>
    27ac:	mvn	r3, #0
    27b0:	b	2800 <read_char+0x120>
    27b4:	ldr	r1, [fp, #-12]
    27b8:	ldr	r0, [fp, #-8]
    27bc:	bl	0 <coda_cdf_cursor_read_char>
    27c0:	mov	r3, r0
    27c4:	b	2800 <read_char+0x120>
    27c8:	ldr	r1, [fp, #-12]
    27cc:	ldr	r0, [fp, #-8]
    27d0:	bl	0 <coda_netcdf_cursor_read_char>
    27d4:	mov	r3, r0
    27d8:	b	2800 <read_char+0x120>
    27dc:	nop	{0}
    27e0:	movw	r3, #0
    27e4:	movt	r3, #0
    27e8:	movw	r2, #722	; 0x2d2
    27ec:	movw	r1, #0
    27f0:	movt	r1, #0
    27f4:	movw	r0, #0
    27f8:	movt	r0, #0
    27fc:	bl	0 <__assert_fail>
    2800:	mov	r0, r3
    2804:	sub	sp, fp, #4
    2808:	ldr	fp, [sp]
    280c:	add	sp, sp, #4
    2810:	pop	{pc}		; (ldr pc, [sp], #4)

00002814 <read_string>:
    2814:	str	fp, [sp, #-8]!
    2818:	str	lr, [sp, #4]
    281c:	add	fp, sp, #4
    2820:	sub	sp, sp, #16
    2824:	str	r0, [fp, #-8]
    2828:	str	r1, [fp, #-12]
    282c:	str	r2, [fp, #-16]
    2830:	ldr	r3, [fp, #-8]
    2834:	ldr	r3, [r3, #4]
    2838:	sub	r3, r3, #1
    283c:	ldr	r2, [fp, #-8]
    2840:	lsl	r3, r3, #4
    2844:	add	r3, r2, r3
    2848:	ldr	r3, [r3, #8]
    284c:	ldr	r3, [r3]
    2850:	cmp	r3, #101	; 0x65
    2854:	beq	28e4 <read_string+0xd0>
    2858:	cmp	r3, #101	; 0x65
    285c:	bhi	287c <read_string+0x68>
    2860:	cmp	r3, #1
    2864:	beq	28b4 <read_string+0xa0>
    2868:	cmp	r3, #0
    286c:	beq	289c <read_string+0x88>
    2870:	cmp	r3, #100	; 0x64
    2874:	beq	28cc <read_string+0xb8>
    2878:	b	293c <read_string+0x128>
    287c:	cmp	r3, #103	; 0x67
    2880:	beq	290c <read_string+0xf8>
    2884:	cmp	r3, #103	; 0x67
    2888:	bcc	28f8 <read_string+0xe4>
    288c:	cmp	r3, #104	; 0x68
    2890:	beq	2924 <read_string+0x110>
    2894:	cmp	r3, #105	; 0x69
    2898:	b	293c <read_string+0x128>
    289c:	ldr	r2, [fp, #-16]
    28a0:	ldr	r1, [fp, #-12]
    28a4:	ldr	r0, [fp, #-8]
    28a8:	bl	0 <coda_ascii_cursor_read_string>
    28ac:	mov	r3, r0
    28b0:	b	295c <read_string+0x148>
    28b4:	ldr	r2, [fp, #-16]
    28b8:	ldr	r1, [fp, #-12]
    28bc:	ldr	r0, [fp, #-8]
    28c0:	bl	0 <coda_bin_cursor_read_string>
    28c4:	mov	r3, r0
    28c8:	b	295c <read_string+0x148>
    28cc:	ldr	r2, [fp, #-16]
    28d0:	ldr	r1, [fp, #-12]
    28d4:	ldr	r0, [fp, #-8]
    28d8:	bl	0 <coda_mem_cursor_read_string>
    28dc:	mov	r3, r0
    28e0:	b	295c <read_string+0x148>
    28e4:	mov	r1, #0
    28e8:	mvn	r0, #10
    28ec:	bl	0 <coda_set_error>
    28f0:	mvn	r3, #0
    28f4:	b	295c <read_string+0x148>
    28f8:	mov	r1, #0
    28fc:	mvn	r0, #12
    2900:	bl	0 <coda_set_error>
    2904:	mvn	r3, #0
    2908:	b	295c <read_string+0x148>
    290c:	ldr	r2, [fp, #-16]
    2910:	ldr	r1, [fp, #-12]
    2914:	ldr	r0, [fp, #-8]
    2918:	bl	0 <coda_cdf_cursor_read_string>
    291c:	mov	r3, r0
    2920:	b	295c <read_string+0x148>
    2924:	ldr	r2, [fp, #-16]
    2928:	ldr	r1, [fp, #-12]
    292c:	ldr	r0, [fp, #-8]
    2930:	bl	0 <coda_netcdf_cursor_read_string>
    2934:	mov	r3, r0
    2938:	b	295c <read_string+0x148>
    293c:	movw	r3, #0
    2940:	movt	r3, #0
    2944:	movw	r2, #758	; 0x2f6
    2948:	movw	r1, #0
    294c:	movt	r1, #0
    2950:	movw	r0, #0
    2954:	movt	r0, #0
    2958:	bl	0 <__assert_fail>
    295c:	mov	r0, r3
    2960:	sub	sp, fp, #4
    2964:	ldr	fp, [sp]
    2968:	add	sp, sp, #4
    296c:	pop	{pc}		; (ldr pc, [sp], #4)

00002970 <read_int8_array>:
    2970:	str	fp, [sp, #-8]!
    2974:	str	lr, [sp, #4]
    2978:	add	fp, sp, #4
    297c:	sub	sp, sp, #16
    2980:	str	r0, [fp, #-8]
    2984:	str	r1, [fp, #-12]
    2988:	str	r2, [fp, #-16]
    298c:	ldr	r3, [fp, #-8]
    2990:	ldr	r3, [r3, #4]
    2994:	sub	r3, r3, #1
    2998:	ldr	r2, [fp, #-8]
    299c:	lsl	r3, r3, #4
    29a0:	add	r3, r2, r3
    29a4:	ldr	r3, [r3, #8]
    29a8:	ldr	r3, [r3]
    29ac:	cmp	r3, #101	; 0x65
    29b0:	beq	2a44 <read_int8_array+0xd4>
    29b4:	cmp	r3, #101	; 0x65
    29b8:	bhi	29d8 <read_int8_array+0x68>
    29bc:	cmp	r3, #1
    29c0:	beq	2a14 <read_int8_array+0xa4>
    29c4:	cmp	r3, #0
    29c8:	beq	29fc <read_int8_array+0x8c>
    29cc:	cmp	r3, #100	; 0x64
    29d0:	beq	2a2c <read_int8_array+0xbc>
    29d4:	b	2ad8 <read_int8_array+0x168>
    29d8:	cmp	r3, #103	; 0x67
    29dc:	beq	2a6c <read_int8_array+0xfc>
    29e0:	cmp	r3, #103	; 0x67
    29e4:	bcc	2a58 <read_int8_array+0xe8>
    29e8:	cmp	r3, #104	; 0x68
    29ec:	beq	2a8c <read_int8_array+0x11c>
    29f0:	cmp	r3, #105	; 0x69
    29f4:	beq	2aac <read_int8_array+0x13c>
    29f8:	b	2ad8 <read_int8_array+0x168>
    29fc:	ldr	r2, [fp, #-16]
    2a00:	ldr	r1, [fp, #-12]
    2a04:	ldr	r0, [fp, #-8]
    2a08:	bl	0 <coda_ascii_cursor_read_int8_array>
    2a0c:	mov	r3, r0
    2a10:	b	2b00 <read_int8_array+0x190>
    2a14:	ldr	r2, [fp, #-16]
    2a18:	ldr	r1, [fp, #-12]
    2a1c:	ldr	r0, [fp, #-8]
    2a20:	bl	0 <coda_bin_cursor_read_int8_array>
    2a24:	mov	r3, r0
    2a28:	b	2b00 <read_int8_array+0x190>
    2a2c:	ldr	r2, [fp, #-16]
    2a30:	ldr	r1, [fp, #-12]
    2a34:	ldr	r0, [fp, #-8]
    2a38:	bl	0 <coda_mem_cursor_read_int8_array>
    2a3c:	mov	r3, r0
    2a40:	b	2b00 <read_int8_array+0x190>
    2a44:	mov	r1, #0
    2a48:	mvn	r0, #10
    2a4c:	bl	0 <coda_set_error>
    2a50:	mvn	r3, #0
    2a54:	b	2b00 <read_int8_array+0x190>
    2a58:	mov	r1, #0
    2a5c:	mvn	r0, #12
    2a60:	bl	0 <coda_set_error>
    2a64:	mvn	r3, #0
    2a68:	b	2b00 <read_int8_array+0x190>
    2a6c:	ldr	r1, [fp, #-12]
    2a70:	ldr	r0, [fp, #-8]
    2a74:	bl	0 <coda_cdf_cursor_read_int8_array>
    2a78:	mov	r3, r0
    2a7c:	cmp	r3, #0
    2a80:	beq	2acc <read_int8_array+0x15c>
    2a84:	mvn	r3, #0
    2a88:	b	2b00 <read_int8_array+0x190>
    2a8c:	ldr	r1, [fp, #-12]
    2a90:	ldr	r0, [fp, #-8]
    2a94:	bl	0 <coda_netcdf_cursor_read_int8_array>
    2a98:	mov	r3, r0
    2a9c:	cmp	r3, #0
    2aa0:	beq	2ad4 <read_int8_array+0x164>
    2aa4:	mvn	r3, #0
    2aa8:	b	2b00 <read_int8_array+0x190>
    2aac:	movw	r3, #0
    2ab0:	movt	r3, #0
    2ab4:	movw	r2, #807	; 0x327
    2ab8:	movw	r1, #0
    2abc:	movt	r1, #0
    2ac0:	movw	r0, #0
    2ac4:	movt	r0, #0
    2ac8:	bl	0 <__assert_fail>
    2acc:	nop	{0}
    2ad0:	b	2ad8 <read_int8_array+0x168>
    2ad4:	nop	{0}
    2ad8:	ldr	r3, [fp, #-16]
    2adc:	cmp	r3, #0
    2ae0:	beq	2afc <read_int8_array+0x18c>
    2ae4:	mov	r2, #1
    2ae8:	ldr	r1, [fp, #-12]
    2aec:	ldr	r0, [fp, #-8]
    2af0:	bl	520 <transpose_array>
    2af4:	mov	r3, r0
    2af8:	b	2b00 <read_int8_array+0x190>
    2afc:	mov	r3, #0
    2b00:	mov	r0, r3
    2b04:	sub	sp, fp, #4
    2b08:	ldr	fp, [sp]
    2b0c:	add	sp, sp, #4
    2b10:	pop	{pc}		; (ldr pc, [sp], #4)

00002b14 <read_uint8_array>:
    2b14:	str	fp, [sp, #-8]!
    2b18:	str	lr, [sp, #4]
    2b1c:	add	fp, sp, #4
    2b20:	sub	sp, sp, #16
    2b24:	str	r0, [fp, #-8]
    2b28:	str	r1, [fp, #-12]
    2b2c:	str	r2, [fp, #-16]
    2b30:	ldr	r3, [fp, #-8]
    2b34:	ldr	r3, [r3, #4]
    2b38:	sub	r3, r3, #1
    2b3c:	ldr	r2, [fp, #-8]
    2b40:	lsl	r3, r3, #4
    2b44:	add	r3, r2, r3
    2b48:	ldr	r3, [r3, #8]
    2b4c:	ldr	r3, [r3]
    2b50:	cmp	r3, #101	; 0x65
    2b54:	beq	2be0 <read_uint8_array+0xcc>
    2b58:	cmp	r3, #101	; 0x65
    2b5c:	bhi	2b7c <read_uint8_array+0x68>
    2b60:	cmp	r3, #1
    2b64:	beq	2bb0 <read_uint8_array+0x9c>
    2b68:	cmp	r3, #0
    2b6c:	beq	2b98 <read_uint8_array+0x84>
    2b70:	cmp	r3, #100	; 0x64
    2b74:	beq	2bc8 <read_uint8_array+0xb4>
    2b78:	b	2c4c <read_uint8_array+0x138>
    2b7c:	cmp	r3, #103	; 0x67
    2b80:	beq	2c08 <read_uint8_array+0xf4>
    2b84:	cmp	r3, #103	; 0x67
    2b88:	bcc	2bf4 <read_uint8_array+0xe0>
    2b8c:	cmp	r3, #105	; 0x69
    2b90:	bhi	2c4c <read_uint8_array+0x138>
    2b94:	b	2c28 <read_uint8_array+0x114>
    2b98:	ldr	r2, [fp, #-16]
    2b9c:	ldr	r1, [fp, #-12]
    2ba0:	ldr	r0, [fp, #-8]
    2ba4:	bl	0 <coda_ascii_cursor_read_uint8_array>
    2ba8:	mov	r3, r0
    2bac:	b	2c74 <read_uint8_array+0x160>
    2bb0:	ldr	r2, [fp, #-16]
    2bb4:	ldr	r1, [fp, #-12]
    2bb8:	ldr	r0, [fp, #-8]
    2bbc:	bl	0 <coda_bin_cursor_read_uint8_array>
    2bc0:	mov	r3, r0
    2bc4:	b	2c74 <read_uint8_array+0x160>
    2bc8:	ldr	r2, [fp, #-16]
    2bcc:	ldr	r1, [fp, #-12]
    2bd0:	ldr	r0, [fp, #-8]
    2bd4:	bl	0 <coda_mem_cursor_read_uint8_array>
    2bd8:	mov	r3, r0
    2bdc:	b	2c74 <read_uint8_array+0x160>
    2be0:	mov	r1, #0
    2be4:	mvn	r0, #10
    2be8:	bl	0 <coda_set_error>
    2bec:	mvn	r3, #0
    2bf0:	b	2c74 <read_uint8_array+0x160>
    2bf4:	mov	r1, #0
    2bf8:	mvn	r0, #12
    2bfc:	bl	0 <coda_set_error>
    2c00:	mvn	r3, #0
    2c04:	b	2c74 <read_uint8_array+0x160>
    2c08:	ldr	r1, [fp, #-12]
    2c0c:	ldr	r0, [fp, #-8]
    2c10:	bl	0 <coda_cdf_cursor_read_uint8_array>
    2c14:	mov	r3, r0
    2c18:	cmp	r3, #0
    2c1c:	beq	2c48 <read_uint8_array+0x134>
    2c20:	mvn	r3, #0
    2c24:	b	2c74 <read_uint8_array+0x160>
    2c28:	movw	r3, #0
    2c2c:	movt	r3, #0
    2c30:	movw	r2, #859	; 0x35b
    2c34:	movw	r1, #0
    2c38:	movt	r1, #0
    2c3c:	movw	r0, #0
    2c40:	movt	r0, #0
    2c44:	bl	0 <__assert_fail>
    2c48:	nop	{0}
    2c4c:	ldr	r3, [fp, #-16]
    2c50:	cmp	r3, #0
    2c54:	beq	2c70 <read_uint8_array+0x15c>
    2c58:	mov	r2, #1
    2c5c:	ldr	r1, [fp, #-12]
    2c60:	ldr	r0, [fp, #-8]
    2c64:	bl	520 <transpose_array>
    2c68:	mov	r3, r0
    2c6c:	b	2c74 <read_uint8_array+0x160>
    2c70:	mov	r3, #0
    2c74:	mov	r0, r3
    2c78:	sub	sp, fp, #4
    2c7c:	ldr	fp, [sp]
    2c80:	add	sp, sp, #4
    2c84:	pop	{pc}		; (ldr pc, [sp], #4)

00002c88 <read_int16_array>:
    2c88:	str	fp, [sp, #-8]!
    2c8c:	str	lr, [sp, #4]
    2c90:	add	fp, sp, #4
    2c94:	sub	sp, sp, #16
    2c98:	str	r0, [fp, #-8]
    2c9c:	str	r1, [fp, #-12]
    2ca0:	str	r2, [fp, #-16]
    2ca4:	ldr	r3, [fp, #-8]
    2ca8:	ldr	r3, [r3, #4]
    2cac:	sub	r3, r3, #1
    2cb0:	ldr	r2, [fp, #-8]
    2cb4:	lsl	r3, r3, #4
    2cb8:	add	r3, r2, r3
    2cbc:	ldr	r3, [r3, #8]
    2cc0:	ldr	r3, [r3]
    2cc4:	cmp	r3, #101	; 0x65
    2cc8:	beq	2d5c <read_int16_array+0xd4>
    2ccc:	cmp	r3, #101	; 0x65
    2cd0:	bhi	2cf0 <read_int16_array+0x68>
    2cd4:	cmp	r3, #1
    2cd8:	beq	2d2c <read_int16_array+0xa4>
    2cdc:	cmp	r3, #0
    2ce0:	beq	2d14 <read_int16_array+0x8c>
    2ce4:	cmp	r3, #100	; 0x64
    2ce8:	beq	2d44 <read_int16_array+0xbc>
    2cec:	b	2df0 <read_int16_array+0x168>
    2cf0:	cmp	r3, #103	; 0x67
    2cf4:	beq	2d84 <read_int16_array+0xfc>
    2cf8:	cmp	r3, #103	; 0x67
    2cfc:	bcc	2d70 <read_int16_array+0xe8>
    2d00:	cmp	r3, #104	; 0x68
    2d04:	beq	2da4 <read_int16_array+0x11c>
    2d08:	cmp	r3, #105	; 0x69
    2d0c:	beq	2dc4 <read_int16_array+0x13c>
    2d10:	b	2df0 <read_int16_array+0x168>
    2d14:	ldr	r2, [fp, #-16]
    2d18:	ldr	r1, [fp, #-12]
    2d1c:	ldr	r0, [fp, #-8]
    2d20:	bl	0 <coda_ascii_cursor_read_int16_array>
    2d24:	mov	r3, r0
    2d28:	b	2e18 <read_int16_array+0x190>
    2d2c:	ldr	r2, [fp, #-16]
    2d30:	ldr	r1, [fp, #-12]
    2d34:	ldr	r0, [fp, #-8]
    2d38:	bl	0 <coda_bin_cursor_read_int16_array>
    2d3c:	mov	r3, r0
    2d40:	b	2e18 <read_int16_array+0x190>
    2d44:	ldr	r2, [fp, #-16]
    2d48:	ldr	r1, [fp, #-12]
    2d4c:	ldr	r0, [fp, #-8]
    2d50:	bl	0 <coda_mem_cursor_read_int16_array>
    2d54:	mov	r3, r0
    2d58:	b	2e18 <read_int16_array+0x190>
    2d5c:	mov	r1, #0
    2d60:	mvn	r0, #10
    2d64:	bl	0 <coda_set_error>
    2d68:	mvn	r3, #0
    2d6c:	b	2e18 <read_int16_array+0x190>
    2d70:	mov	r1, #0
    2d74:	mvn	r0, #12
    2d78:	bl	0 <coda_set_error>
    2d7c:	mvn	r3, #0
    2d80:	b	2e18 <read_int16_array+0x190>
    2d84:	ldr	r1, [fp, #-12]
    2d88:	ldr	r0, [fp, #-8]
    2d8c:	bl	0 <coda_cdf_cursor_read_int16_array>
    2d90:	mov	r3, r0
    2d94:	cmp	r3, #0
    2d98:	beq	2de4 <read_int16_array+0x15c>
    2d9c:	mvn	r3, #0
    2da0:	b	2e18 <read_int16_array+0x190>
    2da4:	ldr	r1, [fp, #-12]
    2da8:	ldr	r0, [fp, #-8]
    2dac:	bl	0 <coda_netcdf_cursor_read_int16_array>
    2db0:	mov	r3, r0
    2db4:	cmp	r3, #0
    2db8:	beq	2dec <read_int16_array+0x164>
    2dbc:	mvn	r3, #0
    2dc0:	b	2e18 <read_int16_array+0x190>
    2dc4:	movw	r3, #0
    2dc8:	movt	r3, #0
    2dcc:	mov	r2, #916	; 0x394
    2dd0:	movw	r1, #0
    2dd4:	movt	r1, #0
    2dd8:	movw	r0, #0
    2ddc:	movt	r0, #0
    2de0:	bl	0 <__assert_fail>
    2de4:	nop	{0}
    2de8:	b	2df0 <read_int16_array+0x168>
    2dec:	nop	{0}
    2df0:	ldr	r3, [fp, #-16]
    2df4:	cmp	r3, #0
    2df8:	beq	2e14 <read_int16_array+0x18c>
    2dfc:	mov	r2, #2
    2e00:	ldr	r1, [fp, #-12]
    2e04:	ldr	r0, [fp, #-8]
    2e08:	bl	520 <transpose_array>
    2e0c:	mov	r3, r0
    2e10:	b	2e18 <read_int16_array+0x190>
    2e14:	mov	r3, #0
    2e18:	mov	r0, r3
    2e1c:	sub	sp, fp, #4
    2e20:	ldr	fp, [sp]
    2e24:	add	sp, sp, #4
    2e28:	pop	{pc}		; (ldr pc, [sp], #4)

00002e2c <read_uint16_array>:
    2e2c:	str	fp, [sp, #-8]!
    2e30:	str	lr, [sp, #4]
    2e34:	add	fp, sp, #4
    2e38:	sub	sp, sp, #16
    2e3c:	str	r0, [fp, #-8]
    2e40:	str	r1, [fp, #-12]
    2e44:	str	r2, [fp, #-16]
    2e48:	ldr	r3, [fp, #-8]
    2e4c:	ldr	r3, [r3, #4]
    2e50:	sub	r3, r3, #1
    2e54:	ldr	r2, [fp, #-8]
    2e58:	lsl	r3, r3, #4
    2e5c:	add	r3, r2, r3
    2e60:	ldr	r3, [r3, #8]
    2e64:	ldr	r3, [r3]
    2e68:	cmp	r3, #101	; 0x65
    2e6c:	beq	2ef8 <read_uint16_array+0xcc>
    2e70:	cmp	r3, #101	; 0x65
    2e74:	bhi	2e94 <read_uint16_array+0x68>
    2e78:	cmp	r3, #1
    2e7c:	beq	2ec8 <read_uint16_array+0x9c>
    2e80:	cmp	r3, #0
    2e84:	beq	2eb0 <read_uint16_array+0x84>
    2e88:	cmp	r3, #100	; 0x64
    2e8c:	beq	2ee0 <read_uint16_array+0xb4>
    2e90:	b	2f64 <read_uint16_array+0x138>
    2e94:	cmp	r3, #103	; 0x67
    2e98:	beq	2f20 <read_uint16_array+0xf4>
    2e9c:	cmp	r3, #103	; 0x67
    2ea0:	bcc	2f0c <read_uint16_array+0xe0>
    2ea4:	cmp	r3, #105	; 0x69
    2ea8:	bhi	2f64 <read_uint16_array+0x138>
    2eac:	b	2f40 <read_uint16_array+0x114>
    2eb0:	ldr	r2, [fp, #-16]
    2eb4:	ldr	r1, [fp, #-12]
    2eb8:	ldr	r0, [fp, #-8]
    2ebc:	bl	0 <coda_ascii_cursor_read_uint16_array>
    2ec0:	mov	r3, r0
    2ec4:	b	2f8c <read_uint16_array+0x160>
    2ec8:	ldr	r2, [fp, #-16]
    2ecc:	ldr	r1, [fp, #-12]
    2ed0:	ldr	r0, [fp, #-8]
    2ed4:	bl	0 <coda_bin_cursor_read_uint16_array>
    2ed8:	mov	r3, r0
    2edc:	b	2f8c <read_uint16_array+0x160>
    2ee0:	ldr	r2, [fp, #-16]
    2ee4:	ldr	r1, [fp, #-12]
    2ee8:	ldr	r0, [fp, #-8]
    2eec:	bl	0 <coda_mem_cursor_read_uint16_array>
    2ef0:	mov	r3, r0
    2ef4:	b	2f8c <read_uint16_array+0x160>
    2ef8:	mov	r1, #0
    2efc:	mvn	r0, #10
    2f00:	bl	0 <coda_set_error>
    2f04:	mvn	r3, #0
    2f08:	b	2f8c <read_uint16_array+0x160>
    2f0c:	mov	r1, #0
    2f10:	mvn	r0, #12
    2f14:	bl	0 <coda_set_error>
    2f18:	mvn	r3, #0
    2f1c:	b	2f8c <read_uint16_array+0x160>
    2f20:	ldr	r1, [fp, #-12]
    2f24:	ldr	r0, [fp, #-8]
    2f28:	bl	0 <coda_cdf_cursor_read_uint16_array>
    2f2c:	mov	r3, r0
    2f30:	cmp	r3, #0
    2f34:	beq	2f60 <read_uint16_array+0x134>
    2f38:	mvn	r3, #0
    2f3c:	b	2f8c <read_uint16_array+0x160>
    2f40:	movw	r3, #0
    2f44:	movt	r3, #0
    2f48:	mov	r2, #968	; 0x3c8
    2f4c:	movw	r1, #0
    2f50:	movt	r1, #0
    2f54:	movw	r0, #0
    2f58:	movt	r0, #0
    2f5c:	bl	0 <__assert_fail>
    2f60:	nop	{0}
    2f64:	ldr	r3, [fp, #-16]
    2f68:	cmp	r3, #0
    2f6c:	beq	2f88 <read_uint16_array+0x15c>
    2f70:	mov	r2, #2
    2f74:	ldr	r1, [fp, #-12]
    2f78:	ldr	r0, [fp, #-8]
    2f7c:	bl	520 <transpose_array>
    2f80:	mov	r3, r0
    2f84:	b	2f8c <read_uint16_array+0x160>
    2f88:	mov	r3, #0
    2f8c:	mov	r0, r3
    2f90:	sub	sp, fp, #4
    2f94:	ldr	fp, [sp]
    2f98:	add	sp, sp, #4
    2f9c:	pop	{pc}		; (ldr pc, [sp], #4)

00002fa0 <read_int32_array>:
    2fa0:	str	fp, [sp, #-8]!
    2fa4:	str	lr, [sp, #4]
    2fa8:	add	fp, sp, #4
    2fac:	sub	sp, sp, #16
    2fb0:	str	r0, [fp, #-8]
    2fb4:	str	r1, [fp, #-12]
    2fb8:	str	r2, [fp, #-16]
    2fbc:	ldr	r3, [fp, #-8]
    2fc0:	ldr	r3, [r3, #4]
    2fc4:	sub	r3, r3, #1
    2fc8:	ldr	r2, [fp, #-8]
    2fcc:	lsl	r3, r3, #4
    2fd0:	add	r3, r2, r3
    2fd4:	ldr	r3, [r3, #8]
    2fd8:	ldr	r3, [r3]
    2fdc:	cmp	r3, #101	; 0x65
    2fe0:	beq	3074 <read_int32_array+0xd4>
    2fe4:	cmp	r3, #101	; 0x65
    2fe8:	bhi	3008 <read_int32_array+0x68>
    2fec:	cmp	r3, #1
    2ff0:	beq	3044 <read_int32_array+0xa4>
    2ff4:	cmp	r3, #0
    2ff8:	beq	302c <read_int32_array+0x8c>
    2ffc:	cmp	r3, #100	; 0x64
    3000:	beq	305c <read_int32_array+0xbc>
    3004:	b	3108 <read_int32_array+0x168>
    3008:	cmp	r3, #103	; 0x67
    300c:	beq	309c <read_int32_array+0xfc>
    3010:	cmp	r3, #103	; 0x67
    3014:	bcc	3088 <read_int32_array+0xe8>
    3018:	cmp	r3, #104	; 0x68
    301c:	beq	30bc <read_int32_array+0x11c>
    3020:	cmp	r3, #105	; 0x69
    3024:	beq	30dc <read_int32_array+0x13c>
    3028:	b	3108 <read_int32_array+0x168>
    302c:	ldr	r2, [fp, #-16]
    3030:	ldr	r1, [fp, #-12]
    3034:	ldr	r0, [fp, #-8]
    3038:	bl	0 <coda_ascii_cursor_read_int32_array>
    303c:	mov	r3, r0
    3040:	b	3130 <read_int32_array+0x190>
    3044:	ldr	r2, [fp, #-16]
    3048:	ldr	r1, [fp, #-12]
    304c:	ldr	r0, [fp, #-8]
    3050:	bl	0 <coda_bin_cursor_read_int32_array>
    3054:	mov	r3, r0
    3058:	b	3130 <read_int32_array+0x190>
    305c:	ldr	r2, [fp, #-16]
    3060:	ldr	r1, [fp, #-12]
    3064:	ldr	r0, [fp, #-8]
    3068:	bl	0 <coda_mem_cursor_read_int32_array>
    306c:	mov	r3, r0
    3070:	b	3130 <read_int32_array+0x190>
    3074:	mov	r1, #0
    3078:	mvn	r0, #10
    307c:	bl	0 <coda_set_error>
    3080:	mvn	r3, #0
    3084:	b	3130 <read_int32_array+0x190>
    3088:	mov	r1, #0
    308c:	mvn	r0, #12
    3090:	bl	0 <coda_set_error>
    3094:	mvn	r3, #0
    3098:	b	3130 <read_int32_array+0x190>
    309c:	ldr	r1, [fp, #-12]
    30a0:	ldr	r0, [fp, #-8]
    30a4:	bl	0 <coda_cdf_cursor_read_int32_array>
    30a8:	mov	r3, r0
    30ac:	cmp	r3, #0
    30b0:	beq	30fc <read_int32_array+0x15c>
    30b4:	mvn	r3, #0
    30b8:	b	3130 <read_int32_array+0x190>
    30bc:	ldr	r1, [fp, #-12]
    30c0:	ldr	r0, [fp, #-8]
    30c4:	bl	0 <coda_netcdf_cursor_read_int32_array>
    30c8:	mov	r3, r0
    30cc:	cmp	r3, #0
    30d0:	beq	3104 <read_int32_array+0x164>
    30d4:	mvn	r3, #0
    30d8:	b	3130 <read_int32_array+0x190>
    30dc:	movw	r3, #0
    30e0:	movt	r3, #0
    30e4:	movw	r2, #1025	; 0x401
    30e8:	movw	r1, #0
    30ec:	movt	r1, #0
    30f0:	movw	r0, #0
    30f4:	movt	r0, #0
    30f8:	bl	0 <__assert_fail>
    30fc:	nop	{0}
    3100:	b	3108 <read_int32_array+0x168>
    3104:	nop	{0}
    3108:	ldr	r3, [fp, #-16]
    310c:	cmp	r3, #0
    3110:	beq	312c <read_int32_array+0x18c>
    3114:	mov	r2, #4
    3118:	ldr	r1, [fp, #-12]
    311c:	ldr	r0, [fp, #-8]
    3120:	bl	520 <transpose_array>
    3124:	mov	r3, r0
    3128:	b	3130 <read_int32_array+0x190>
    312c:	mov	r3, #0
    3130:	mov	r0, r3
    3134:	sub	sp, fp, #4
    3138:	ldr	fp, [sp]
    313c:	add	sp, sp, #4
    3140:	pop	{pc}		; (ldr pc, [sp], #4)

00003144 <read_uint32_array>:
    3144:	str	fp, [sp, #-8]!
    3148:	str	lr, [sp, #4]
    314c:	add	fp, sp, #4
    3150:	sub	sp, sp, #16
    3154:	str	r0, [fp, #-8]
    3158:	str	r1, [fp, #-12]
    315c:	str	r2, [fp, #-16]
    3160:	ldr	r3, [fp, #-8]
    3164:	ldr	r3, [r3, #4]
    3168:	sub	r3, r3, #1
    316c:	ldr	r2, [fp, #-8]
    3170:	lsl	r3, r3, #4
    3174:	add	r3, r2, r3
    3178:	ldr	r3, [r3, #8]
    317c:	ldr	r3, [r3]
    3180:	cmp	r3, #101	; 0x65
    3184:	beq	3210 <read_uint32_array+0xcc>
    3188:	cmp	r3, #101	; 0x65
    318c:	bhi	31ac <read_uint32_array+0x68>
    3190:	cmp	r3, #1
    3194:	beq	31e0 <read_uint32_array+0x9c>
    3198:	cmp	r3, #0
    319c:	beq	31c8 <read_uint32_array+0x84>
    31a0:	cmp	r3, #100	; 0x64
    31a4:	beq	31f8 <read_uint32_array+0xb4>
    31a8:	b	327c <read_uint32_array+0x138>
    31ac:	cmp	r3, #103	; 0x67
    31b0:	beq	3238 <read_uint32_array+0xf4>
    31b4:	cmp	r3, #103	; 0x67
    31b8:	bcc	3224 <read_uint32_array+0xe0>
    31bc:	cmp	r3, #105	; 0x69
    31c0:	bhi	327c <read_uint32_array+0x138>
    31c4:	b	3258 <read_uint32_array+0x114>
    31c8:	ldr	r2, [fp, #-16]
    31cc:	ldr	r1, [fp, #-12]
    31d0:	ldr	r0, [fp, #-8]
    31d4:	bl	0 <coda_ascii_cursor_read_uint32_array>
    31d8:	mov	r3, r0
    31dc:	b	32a4 <read_uint32_array+0x160>
    31e0:	ldr	r2, [fp, #-16]
    31e4:	ldr	r1, [fp, #-12]
    31e8:	ldr	r0, [fp, #-8]
    31ec:	bl	0 <coda_bin_cursor_read_uint32_array>
    31f0:	mov	r3, r0
    31f4:	b	32a4 <read_uint32_array+0x160>
    31f8:	ldr	r2, [fp, #-16]
    31fc:	ldr	r1, [fp, #-12]
    3200:	ldr	r0, [fp, #-8]
    3204:	bl	0 <coda_mem_cursor_read_uint32_array>
    3208:	mov	r3, r0
    320c:	b	32a4 <read_uint32_array+0x160>
    3210:	mov	r1, #0
    3214:	mvn	r0, #10
    3218:	bl	0 <coda_set_error>
    321c:	mvn	r3, #0
    3220:	b	32a4 <read_uint32_array+0x160>
    3224:	mov	r1, #0
    3228:	mvn	r0, #12
    322c:	bl	0 <coda_set_error>
    3230:	mvn	r3, #0
    3234:	b	32a4 <read_uint32_array+0x160>
    3238:	ldr	r1, [fp, #-12]
    323c:	ldr	r0, [fp, #-8]
    3240:	bl	0 <coda_cdf_cursor_read_uint32_array>
    3244:	mov	r3, r0
    3248:	cmp	r3, #0
    324c:	beq	3278 <read_uint32_array+0x134>
    3250:	mvn	r3, #0
    3254:	b	32a4 <read_uint32_array+0x160>
    3258:	movw	r3, #0
    325c:	movt	r3, #0
    3260:	movw	r2, #1077	; 0x435
    3264:	movw	r1, #0
    3268:	movt	r1, #0
    326c:	movw	r0, #0
    3270:	movt	r0, #0
    3274:	bl	0 <__assert_fail>
    3278:	nop	{0}
    327c:	ldr	r3, [fp, #-16]
    3280:	cmp	r3, #0
    3284:	beq	32a0 <read_uint32_array+0x15c>
    3288:	mov	r2, #4
    328c:	ldr	r1, [fp, #-12]
    3290:	ldr	r0, [fp, #-8]
    3294:	bl	520 <transpose_array>
    3298:	mov	r3, r0
    329c:	b	32a4 <read_uint32_array+0x160>
    32a0:	mov	r3, #0
    32a4:	mov	r0, r3
    32a8:	sub	sp, fp, #4
    32ac:	ldr	fp, [sp]
    32b0:	add	sp, sp, #4
    32b4:	pop	{pc}		; (ldr pc, [sp], #4)

000032b8 <read_int64_array>:
    32b8:	str	fp, [sp, #-8]!
    32bc:	str	lr, [sp, #4]
    32c0:	add	fp, sp, #4
    32c4:	sub	sp, sp, #16
    32c8:	str	r0, [fp, #-8]
    32cc:	str	r1, [fp, #-12]
    32d0:	str	r2, [fp, #-16]
    32d4:	ldr	r3, [fp, #-8]
    32d8:	ldr	r3, [r3, #4]
    32dc:	sub	r3, r3, #1
    32e0:	ldr	r2, [fp, #-8]
    32e4:	lsl	r3, r3, #4
    32e8:	add	r3, r2, r3
    32ec:	ldr	r3, [r3, #8]
    32f0:	ldr	r3, [r3]
    32f4:	cmp	r3, #101	; 0x65
    32f8:	beq	3384 <read_int64_array+0xcc>
    32fc:	cmp	r3, #101	; 0x65
    3300:	bhi	3320 <read_int64_array+0x68>
    3304:	cmp	r3, #1
    3308:	beq	3354 <read_int64_array+0x9c>
    330c:	cmp	r3, #0
    3310:	beq	333c <read_int64_array+0x84>
    3314:	cmp	r3, #100	; 0x64
    3318:	beq	336c <read_int64_array+0xb4>
    331c:	b	33f0 <read_int64_array+0x138>
    3320:	cmp	r3, #103	; 0x67
    3324:	beq	33ac <read_int64_array+0xf4>
    3328:	cmp	r3, #103	; 0x67
    332c:	bcc	3398 <read_int64_array+0xe0>
    3330:	cmp	r3, #105	; 0x69
    3334:	bhi	33f0 <read_int64_array+0x138>
    3338:	b	33cc <read_int64_array+0x114>
    333c:	ldr	r2, [fp, #-16]
    3340:	ldr	r1, [fp, #-12]
    3344:	ldr	r0, [fp, #-8]
    3348:	bl	0 <coda_ascii_cursor_read_int64_array>
    334c:	mov	r3, r0
    3350:	b	3418 <read_int64_array+0x160>
    3354:	ldr	r2, [fp, #-16]
    3358:	ldr	r1, [fp, #-12]
    335c:	ldr	r0, [fp, #-8]
    3360:	bl	0 <coda_bin_cursor_read_int64_array>
    3364:	mov	r3, r0
    3368:	b	3418 <read_int64_array+0x160>
    336c:	ldr	r2, [fp, #-16]
    3370:	ldr	r1, [fp, #-12]
    3374:	ldr	r0, [fp, #-8]
    3378:	bl	0 <coda_mem_cursor_read_int64_array>
    337c:	mov	r3, r0
    3380:	b	3418 <read_int64_array+0x160>
    3384:	mov	r1, #0
    3388:	mvn	r0, #10
    338c:	bl	0 <coda_set_error>
    3390:	mvn	r3, #0
    3394:	b	3418 <read_int64_array+0x160>
    3398:	mov	r1, #0
    339c:	mvn	r0, #12
    33a0:	bl	0 <coda_set_error>
    33a4:	mvn	r3, #0
    33a8:	b	3418 <read_int64_array+0x160>
    33ac:	ldr	r1, [fp, #-12]
    33b0:	ldr	r0, [fp, #-8]
    33b4:	bl	0 <coda_cdf_cursor_read_int64_array>
    33b8:	mov	r3, r0
    33bc:	cmp	r3, #0
    33c0:	beq	33ec <read_int64_array+0x134>
    33c4:	mvn	r3, #0
    33c8:	b	3418 <read_int64_array+0x160>
    33cc:	movw	r3, #0
    33d0:	movt	r3, #0
    33d4:	movw	r2, #1129	; 0x469
    33d8:	movw	r1, #0
    33dc:	movt	r1, #0
    33e0:	movw	r0, #0
    33e4:	movt	r0, #0
    33e8:	bl	0 <__assert_fail>
    33ec:	nop	{0}
    33f0:	ldr	r3, [fp, #-16]
    33f4:	cmp	r3, #0
    33f8:	beq	3414 <read_int64_array+0x15c>
    33fc:	mov	r2, #8
    3400:	ldr	r1, [fp, #-12]
    3404:	ldr	r0, [fp, #-8]
    3408:	bl	520 <transpose_array>
    340c:	mov	r3, r0
    3410:	b	3418 <read_int64_array+0x160>
    3414:	mov	r3, #0
    3418:	mov	r0, r3
    341c:	sub	sp, fp, #4
    3420:	ldr	fp, [sp]
    3424:	add	sp, sp, #4
    3428:	pop	{pc}		; (ldr pc, [sp], #4)

0000342c <read_uint64_array>:
    342c:	str	fp, [sp, #-8]!
    3430:	str	lr, [sp, #4]
    3434:	add	fp, sp, #4
    3438:	sub	sp, sp, #16
    343c:	str	r0, [fp, #-8]
    3440:	str	r1, [fp, #-12]
    3444:	str	r2, [fp, #-16]
    3448:	ldr	r3, [fp, #-8]
    344c:	ldr	r3, [r3, #4]
    3450:	sub	r3, r3, #1
    3454:	ldr	r2, [fp, #-8]
    3458:	lsl	r3, r3, #4
    345c:	add	r3, r2, r3
    3460:	ldr	r3, [r3, #8]
    3464:	ldr	r3, [r3]
    3468:	cmp	r3, #101	; 0x65
    346c:	beq	34f0 <read_uint64_array+0xc4>
    3470:	cmp	r3, #101	; 0x65
    3474:	bhi	3494 <read_uint64_array+0x68>
    3478:	cmp	r3, #1
    347c:	beq	34c0 <read_uint64_array+0x94>
    3480:	cmp	r3, #0
    3484:	beq	34a8 <read_uint64_array+0x7c>
    3488:	cmp	r3, #100	; 0x64
    348c:	beq	34d8 <read_uint64_array+0xac>
    3490:	b	3538 <read_uint64_array+0x10c>
    3494:	cmp	r3, #102	; 0x66
    3498:	beq	3504 <read_uint64_array+0xd8>
    349c:	cmp	r3, #105	; 0x69
    34a0:	bhi	3538 <read_uint64_array+0x10c>
    34a4:	b	3518 <read_uint64_array+0xec>
    34a8:	ldr	r2, [fp, #-16]
    34ac:	ldr	r1, [fp, #-12]
    34b0:	ldr	r0, [fp, #-8]
    34b4:	bl	0 <coda_ascii_cursor_read_uint64_array>
    34b8:	mov	r3, r0
    34bc:	b	3560 <read_uint64_array+0x134>
    34c0:	ldr	r2, [fp, #-16]
    34c4:	ldr	r1, [fp, #-12]
    34c8:	ldr	r0, [fp, #-8]
    34cc:	bl	0 <coda_bin_cursor_read_uint64_array>
    34d0:	mov	r3, r0
    34d4:	b	3560 <read_uint64_array+0x134>
    34d8:	ldr	r2, [fp, #-16]
    34dc:	ldr	r1, [fp, #-12]
    34e0:	ldr	r0, [fp, #-8]
    34e4:	bl	0 <coda_mem_cursor_read_uint64_array>
    34e8:	mov	r3, r0
    34ec:	b	3560 <read_uint64_array+0x134>
    34f0:	mov	r1, #0
    34f4:	mvn	r0, #10
    34f8:	bl	0 <coda_set_error>
    34fc:	mvn	r3, #0
    3500:	b	3560 <read_uint64_array+0x134>
    3504:	mov	r1, #0
    3508:	mvn	r0, #12
    350c:	bl	0 <coda_set_error>
    3510:	mvn	r3, #0
    3514:	b	3560 <read_uint64_array+0x134>
    3518:	movw	r3, #0
    351c:	movt	r3, #0
    3520:	movw	r2, #1176	; 0x498
    3524:	movw	r1, #0
    3528:	movt	r1, #0
    352c:	movw	r0, #0
    3530:	movt	r0, #0
    3534:	bl	0 <__assert_fail>
    3538:	ldr	r3, [fp, #-16]
    353c:	cmp	r3, #0
    3540:	beq	355c <read_uint64_array+0x130>
    3544:	mov	r2, #8
    3548:	ldr	r1, [fp, #-12]
    354c:	ldr	r0, [fp, #-8]
    3550:	bl	520 <transpose_array>
    3554:	mov	r3, r0
    3558:	b	3560 <read_uint64_array+0x134>
    355c:	mov	r3, #0
    3560:	mov	r0, r3
    3564:	sub	sp, fp, #4
    3568:	ldr	fp, [sp]
    356c:	add	sp, sp, #4
    3570:	pop	{pc}		; (ldr pc, [sp], #4)

00003574 <read_float_array>:
    3574:	str	fp, [sp, #-8]!
    3578:	str	lr, [sp, #4]
    357c:	add	fp, sp, #4
    3580:	sub	sp, sp, #16
    3584:	str	r0, [fp, #-8]
    3588:	str	r1, [fp, #-12]
    358c:	str	r2, [fp, #-16]
    3590:	ldr	r3, [fp, #-8]
    3594:	ldr	r3, [r3, #4]
    3598:	sub	r3, r3, #1
    359c:	ldr	r2, [fp, #-8]
    35a0:	lsl	r3, r3, #4
    35a4:	add	r3, r2, r3
    35a8:	ldr	r3, [r3, #8]
    35ac:	ldr	r3, [r3]
    35b0:	cmp	r3, #101	; 0x65
    35b4:	beq	3648 <read_float_array+0xd4>
    35b8:	cmp	r3, #101	; 0x65
    35bc:	bhi	35dc <read_float_array+0x68>
    35c0:	cmp	r3, #1
    35c4:	beq	3618 <read_float_array+0xa4>
    35c8:	cmp	r3, #0
    35cc:	beq	3600 <read_float_array+0x8c>
    35d0:	cmp	r3, #100	; 0x64
    35d4:	beq	3630 <read_float_array+0xbc>
    35d8:	b	36e4 <read_float_array+0x170>
    35dc:	cmp	r3, #103	; 0x67
    35e0:	beq	3670 <read_float_array+0xfc>
    35e4:	cmp	r3, #103	; 0x67
    35e8:	bcc	365c <read_float_array+0xe8>
    35ec:	cmp	r3, #104	; 0x68
    35f0:	beq	3690 <read_float_array+0x11c>
    35f4:	cmp	r3, #105	; 0x69
    35f8:	beq	36b0 <read_float_array+0x13c>
    35fc:	b	36e4 <read_float_array+0x170>
    3600:	ldr	r2, [fp, #-16]
    3604:	ldr	r1, [fp, #-12]
    3608:	ldr	r0, [fp, #-8]
    360c:	bl	0 <coda_ascii_cursor_read_float_array>
    3610:	mov	r3, r0
    3614:	b	370c <read_float_array+0x198>
    3618:	ldr	r2, [fp, #-16]
    361c:	ldr	r1, [fp, #-12]
    3620:	ldr	r0, [fp, #-8]
    3624:	bl	0 <coda_bin_cursor_read_float_array>
    3628:	mov	r3, r0
    362c:	b	370c <read_float_array+0x198>
    3630:	ldr	r2, [fp, #-16]
    3634:	ldr	r1, [fp, #-12]
    3638:	ldr	r0, [fp, #-8]
    363c:	bl	0 <coda_mem_cursor_read_float_array>
    3640:	mov	r3, r0
    3644:	b	370c <read_float_array+0x198>
    3648:	mov	r1, #0
    364c:	mvn	r0, #10
    3650:	bl	0 <coda_set_error>
    3654:	mvn	r3, #0
    3658:	b	370c <read_float_array+0x198>
    365c:	mov	r1, #0
    3660:	mvn	r0, #12
    3664:	bl	0 <coda_set_error>
    3668:	mvn	r3, #0
    366c:	b	370c <read_float_array+0x198>
    3670:	ldr	r1, [fp, #-12]
    3674:	ldr	r0, [fp, #-8]
    3678:	bl	0 <coda_cdf_cursor_read_float_array>
    367c:	mov	r3, r0
    3680:	cmp	r3, #0
    3684:	beq	36d0 <read_float_array+0x15c>
    3688:	mvn	r3, #0
    368c:	b	370c <read_float_array+0x198>
    3690:	ldr	r1, [fp, #-12]
    3694:	ldr	r0, [fp, #-8]
    3698:	bl	0 <coda_netcdf_cursor_read_float_array>
    369c:	mov	r3, r0
    36a0:	cmp	r3, #0
    36a4:	beq	36d8 <read_float_array+0x164>
    36a8:	mvn	r3, #0
    36ac:	b	370c <read_float_array+0x198>
    36b0:	ldr	r1, [fp, #-12]
    36b4:	ldr	r0, [fp, #-8]
    36b8:	bl	0 <coda_grib_cursor_read_float_array>
    36bc:	mov	r3, r0
    36c0:	cmp	r3, #0
    36c4:	beq	36e0 <read_float_array+0x16c>
    36c8:	mvn	r3, #0
    36cc:	b	370c <read_float_array+0x198>
    36d0:	nop	{0}
    36d4:	b	36e4 <read_float_array+0x170>
    36d8:	nop	{0}
    36dc:	b	36e4 <read_float_array+0x170>
    36e0:	nop	{0}
    36e4:	ldr	r3, [fp, #-16]
    36e8:	cmp	r3, #0
    36ec:	beq	3708 <read_float_array+0x194>
    36f0:	mov	r2, #4
    36f4:	ldr	r1, [fp, #-12]
    36f8:	ldr	r0, [fp, #-8]
    36fc:	bl	520 <transpose_array>
    3700:	mov	r3, r0
    3704:	b	370c <read_float_array+0x198>
    3708:	mov	r3, #0
    370c:	mov	r0, r3
    3710:	sub	sp, fp, #4
    3714:	ldr	fp, [sp]
    3718:	add	sp, sp, #4
    371c:	pop	{pc}		; (ldr pc, [sp], #4)

00003720 <read_double_array>:
    3720:	str	fp, [sp, #-8]!
    3724:	str	lr, [sp, #4]
    3728:	add	fp, sp, #4
    372c:	sub	sp, sp, #32
    3730:	str	r0, [fp, #-16]
    3734:	str	r1, [fp, #-20]	; 0xffffffec
    3738:	str	r2, [fp, #-24]	; 0xffffffe8
    373c:	ldr	r3, [fp, #-16]
    3740:	ldr	r3, [r3, #4]
    3744:	sub	r3, r3, #1
    3748:	ldr	r2, [fp, #-16]
    374c:	lsl	r3, r3, #4
    3750:	add	r3, r2, r3
    3754:	ldr	r3, [r3, #8]
    3758:	ldr	r3, [r3]
    375c:	cmp	r3, #99	; 0x63
    3760:	bhi	3784 <read_double_array+0x64>
    3764:	ldr	r3, [fp, #-16]
    3768:	ldr	r3, [r3, #4]
    376c:	sub	r3, r3, #1
    3770:	ldr	r2, [fp, #-16]
    3774:	lsl	r3, r3, #4
    3778:	add	r3, r2, r3
    377c:	ldr	r3, [r3, #8]
    3780:	b	37a4 <read_double_array+0x84>
    3784:	ldr	r3, [fp, #-16]
    3788:	ldr	r3, [r3, #4]
    378c:	sub	r3, r3, #1
    3790:	ldr	r2, [fp, #-16]
    3794:	lsl	r3, r3, #4
    3798:	add	r3, r2, r3
    379c:	ldr	r3, [r3, #8]
    37a0:	ldr	r3, [r3, #4]
    37a4:	str	r3, [fp, #-8]
    37a8:	ldr	r3, [fp, #-8]
    37ac:	ldr	r3, [r3, #40]	; 0x28
    37b0:	ldr	r3, [r3, #8]
    37b4:	cmp	r3, #6
    37b8:	bne	37e4 <read_double_array+0xc4>
    37bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37c0:	str	r3, [sp]
    37c4:	mov	r3, #8
    37c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    37cc:	movw	r1, #0
    37d0:	movt	r1, #0
    37d4:	ldr	r0, [fp, #-16]
    37d8:	bl	0 <read_array>
    37dc:	mov	r3, r0
    37e0:	b	3958 <read_double_array+0x238>
    37e4:	ldr	r3, [fp, #-16]
    37e8:	ldr	r3, [r3, #4]
    37ec:	sub	r3, r3, #1
    37f0:	ldr	r2, [fp, #-16]
    37f4:	lsl	r3, r3, #4
    37f8:	add	r3, r2, r3
    37fc:	ldr	r3, [r3, #8]
    3800:	ldr	r3, [r3]
    3804:	cmp	r3, #101	; 0x65
    3808:	beq	389c <read_double_array+0x17c>
    380c:	cmp	r3, #101	; 0x65
    3810:	bhi	3830 <read_double_array+0x110>
    3814:	cmp	r3, #1
    3818:	beq	386c <read_double_array+0x14c>
    381c:	cmp	r3, #0
    3820:	beq	3854 <read_double_array+0x134>
    3824:	cmp	r3, #100	; 0x64
    3828:	beq	3884 <read_double_array+0x164>
    382c:	b	3930 <read_double_array+0x210>
    3830:	cmp	r3, #103	; 0x67
    3834:	beq	38c4 <read_double_array+0x1a4>
    3838:	cmp	r3, #103	; 0x67
    383c:	bcc	38b0 <read_double_array+0x190>
    3840:	cmp	r3, #104	; 0x68
    3844:	beq	38e4 <read_double_array+0x1c4>
    3848:	cmp	r3, #105	; 0x69
    384c:	beq	3904 <read_double_array+0x1e4>
    3850:	b	3930 <read_double_array+0x210>
    3854:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3858:	ldr	r1, [fp, #-20]	; 0xffffffec
    385c:	ldr	r0, [fp, #-16]
    3860:	bl	0 <coda_ascii_cursor_read_double_array>
    3864:	mov	r3, r0
    3868:	b	3958 <read_double_array+0x238>
    386c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3870:	ldr	r1, [fp, #-20]	; 0xffffffec
    3874:	ldr	r0, [fp, #-16]
    3878:	bl	0 <coda_bin_cursor_read_double_array>
    387c:	mov	r3, r0
    3880:	b	3958 <read_double_array+0x238>
    3884:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3888:	ldr	r1, [fp, #-20]	; 0xffffffec
    388c:	ldr	r0, [fp, #-16]
    3890:	bl	0 <coda_mem_cursor_read_double_array>
    3894:	mov	r3, r0
    3898:	b	3958 <read_double_array+0x238>
    389c:	mov	r1, #0
    38a0:	mvn	r0, #10
    38a4:	bl	0 <coda_set_error>
    38a8:	mvn	r3, #0
    38ac:	b	3958 <read_double_array+0x238>
    38b0:	mov	r1, #0
    38b4:	mvn	r0, #12
    38b8:	bl	0 <coda_set_error>
    38bc:	mvn	r3, #0
    38c0:	b	3958 <read_double_array+0x238>
    38c4:	ldr	r1, [fp, #-20]	; 0xffffffec
    38c8:	ldr	r0, [fp, #-16]
    38cc:	bl	0 <coda_cdf_cursor_read_double_array>
    38d0:	mov	r3, r0
    38d4:	cmp	r3, #0
    38d8:	beq	3924 <read_double_array+0x204>
    38dc:	mvn	r3, #0
    38e0:	b	3958 <read_double_array+0x238>
    38e4:	ldr	r1, [fp, #-20]	; 0xffffffec
    38e8:	ldr	r0, [fp, #-16]
    38ec:	bl	0 <coda_netcdf_cursor_read_double_array>
    38f0:	mov	r3, r0
    38f4:	cmp	r3, #0
    38f8:	beq	392c <read_double_array+0x20c>
    38fc:	mvn	r3, #0
    3900:	b	3958 <read_double_array+0x238>
    3904:	movw	r3, #0
    3908:	movt	r3, #0
    390c:	movw	r2, #1301	; 0x515
    3910:	movw	r1, #0
    3914:	movt	r1, #0
    3918:	movw	r0, #0
    391c:	movt	r0, #0
    3920:	bl	0 <__assert_fail>
    3924:	nop	{0}
    3928:	b	3930 <read_double_array+0x210>
    392c:	nop	{0}
    3930:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3934:	cmp	r3, #0
    3938:	beq	3954 <read_double_array+0x234>
    393c:	mov	r2, #8
    3940:	ldr	r1, [fp, #-20]	; 0xffffffec
    3944:	ldr	r0, [fp, #-16]
    3948:	bl	520 <transpose_array>
    394c:	mov	r3, r0
    3950:	b	3958 <read_double_array+0x238>
    3954:	mov	r3, #0
    3958:	mov	r0, r3
    395c:	sub	sp, fp, #4
    3960:	ldr	fp, [sp]
    3964:	add	sp, sp, #4
    3968:	pop	{pc}		; (ldr pc, [sp], #4)

0000396c <read_char_array>:
    396c:	str	fp, [sp, #-8]!
    3970:	str	lr, [sp, #4]
    3974:	add	fp, sp, #4
    3978:	sub	sp, sp, #16
    397c:	str	r0, [fp, #-8]
    3980:	str	r1, [fp, #-12]
    3984:	str	r2, [fp, #-16]
    3988:	ldr	r3, [fp, #-8]
    398c:	ldr	r3, [r3, #4]
    3990:	sub	r3, r3, #1
    3994:	ldr	r2, [fp, #-8]
    3998:	lsl	r3, r3, #4
    399c:	add	r3, r2, r3
    39a0:	ldr	r3, [r3, #8]
    39a4:	ldr	r3, [r3]
    39a8:	cmp	r3, #101	; 0x65
    39ac:	beq	3a40 <read_char_array+0xd4>
    39b0:	cmp	r3, #101	; 0x65
    39b4:	bhi	39d4 <read_char_array+0x68>
    39b8:	cmp	r3, #1
    39bc:	beq	3a10 <read_char_array+0xa4>
    39c0:	cmp	r3, #0
    39c4:	beq	39f8 <read_char_array+0x8c>
    39c8:	cmp	r3, #100	; 0x64
    39cc:	beq	3a28 <read_char_array+0xbc>
    39d0:	b	3ac0 <read_char_array+0x154>
    39d4:	cmp	r3, #103	; 0x67
    39d8:	beq	3a54 <read_char_array+0xe8>
    39dc:	cmp	r3, #103	; 0x67
    39e0:	bcc	3a94 <read_char_array+0x128>
    39e4:	cmp	r3, #104	; 0x68
    39e8:	beq	3a74 <read_char_array+0x108>
    39ec:	cmp	r3, #105	; 0x69
    39f0:	beq	3a94 <read_char_array+0x128>
    39f4:	b	3ac0 <read_char_array+0x154>
    39f8:	ldr	r2, [fp, #-16]
    39fc:	ldr	r1, [fp, #-12]
    3a00:	ldr	r0, [fp, #-8]
    3a04:	bl	0 <coda_ascii_cursor_read_char_array>
    3a08:	mov	r3, r0
    3a0c:	b	3ae8 <read_char_array+0x17c>
    3a10:	ldr	r2, [fp, #-16]
    3a14:	ldr	r1, [fp, #-12]
    3a18:	ldr	r0, [fp, #-8]
    3a1c:	bl	0 <coda_bin_cursor_read_char_array>
    3a20:	mov	r3, r0
    3a24:	b	3ae8 <read_char_array+0x17c>
    3a28:	ldr	r2, [fp, #-16]
    3a2c:	ldr	r1, [fp, #-12]
    3a30:	ldr	r0, [fp, #-8]
    3a34:	bl	0 <coda_mem_cursor_read_char_array>
    3a38:	mov	r3, r0
    3a3c:	b	3ae8 <read_char_array+0x17c>
    3a40:	mov	r1, #0
    3a44:	mvn	r0, #10
    3a48:	bl	0 <coda_set_error>
    3a4c:	mvn	r3, #0
    3a50:	b	3ae8 <read_char_array+0x17c>
    3a54:	ldr	r1, [fp, #-12]
    3a58:	ldr	r0, [fp, #-8]
    3a5c:	bl	0 <coda_cdf_cursor_read_char_array>
    3a60:	mov	r3, r0
    3a64:	cmp	r3, #0
    3a68:	beq	3ab4 <read_char_array+0x148>
    3a6c:	mvn	r3, #0
    3a70:	b	3ae8 <read_char_array+0x17c>
    3a74:	ldr	r1, [fp, #-12]
    3a78:	ldr	r0, [fp, #-8]
    3a7c:	bl	0 <coda_netcdf_cursor_read_char_array>
    3a80:	mov	r3, r0
    3a84:	cmp	r3, #0
    3a88:	beq	3abc <read_char_array+0x150>
    3a8c:	mvn	r3, #0
    3a90:	b	3ae8 <read_char_array+0x17c>
    3a94:	movw	r3, #0
    3a98:	movt	r3, #0
    3a9c:	movw	r2, #1348	; 0x544
    3aa0:	movw	r1, #0
    3aa4:	movt	r1, #0
    3aa8:	movw	r0, #0
    3aac:	movt	r0, #0
    3ab0:	bl	0 <__assert_fail>
    3ab4:	nop	{0}
    3ab8:	b	3ac0 <read_char_array+0x154>
    3abc:	nop	{0}
    3ac0:	ldr	r3, [fp, #-16]
    3ac4:	cmp	r3, #0
    3ac8:	beq	3ae4 <read_char_array+0x178>
    3acc:	mov	r2, #1
    3ad0:	ldr	r1, [fp, #-12]
    3ad4:	ldr	r0, [fp, #-8]
    3ad8:	bl	520 <transpose_array>
    3adc:	mov	r3, r0
    3ae0:	b	3ae8 <read_char_array+0x17c>
    3ae4:	mov	r3, #0
    3ae8:	mov	r0, r3
    3aec:	sub	sp, fp, #4
    3af0:	ldr	fp, [sp]
    3af4:	add	sp, sp, #4
    3af8:	pop	{pc}		; (ldr pc, [sp], #4)

00003afc <read_int8_partial_array>:
    3afc:	str	fp, [sp, #-8]!
    3b00:	str	lr, [sp, #4]
    3b04:	add	fp, sp, #4
    3b08:	sub	sp, sp, #16
    3b0c:	str	r0, [fp, #-8]
    3b10:	str	r1, [fp, #-12]
    3b14:	str	r2, [fp, #-16]
    3b18:	str	r3, [fp, #-20]	; 0xffffffec
    3b1c:	ldr	r3, [fp, #-8]
    3b20:	ldr	r3, [r3, #4]
    3b24:	sub	r3, r3, #1
    3b28:	ldr	r2, [fp, #-8]
    3b2c:	lsl	r3, r3, #4
    3b30:	add	r3, r2, r3
    3b34:	ldr	r3, [r3, #8]
    3b38:	ldr	r3, [r3]
    3b3c:	cmp	r3, #101	; 0x65
    3b40:	beq	3bdc <read_int8_partial_array+0xe0>
    3b44:	cmp	r3, #101	; 0x65
    3b48:	bhi	3b68 <read_int8_partial_array+0x6c>
    3b4c:	cmp	r3, #1
    3b50:	beq	3ba4 <read_int8_partial_array+0xa8>
    3b54:	cmp	r3, #0
    3b58:	beq	3b88 <read_int8_partial_array+0x8c>
    3b5c:	cmp	r3, #100	; 0x64
    3b60:	beq	3bc0 <read_int8_partial_array+0xc4>
    3b64:	b	3c3c <read_int8_partial_array+0x140>
    3b68:	cmp	r3, #103	; 0x67
    3b6c:	beq	3c04 <read_int8_partial_array+0x108>
    3b70:	cmp	r3, #103	; 0x67
    3b74:	bcc	3bf0 <read_int8_partial_array+0xf4>
    3b78:	cmp	r3, #104	; 0x68
    3b7c:	beq	3c20 <read_int8_partial_array+0x124>
    3b80:	cmp	r3, #105	; 0x69
    3b84:	b	3c3c <read_int8_partial_array+0x140>
    3b88:	ldr	r3, [fp, #-20]	; 0xffffffec
    3b8c:	ldr	r2, [fp, #-16]
    3b90:	ldr	r1, [fp, #-12]
    3b94:	ldr	r0, [fp, #-8]
    3b98:	bl	0 <coda_ascii_cursor_read_int8_partial_array>
    3b9c:	mov	r3, r0
    3ba0:	b	3c5c <read_int8_partial_array+0x160>
    3ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ba8:	ldr	r2, [fp, #-16]
    3bac:	ldr	r1, [fp, #-12]
    3bb0:	ldr	r0, [fp, #-8]
    3bb4:	bl	0 <coda_bin_cursor_read_int8_partial_array>
    3bb8:	mov	r3, r0
    3bbc:	b	3c5c <read_int8_partial_array+0x160>
    3bc0:	ldr	r3, [fp, #-20]	; 0xffffffec
    3bc4:	ldr	r2, [fp, #-16]
    3bc8:	ldr	r1, [fp, #-12]
    3bcc:	ldr	r0, [fp, #-8]
    3bd0:	bl	0 <coda_mem_cursor_read_int8_partial_array>
    3bd4:	mov	r3, r0
    3bd8:	b	3c5c <read_int8_partial_array+0x160>
    3bdc:	mov	r1, #0
    3be0:	mvn	r0, #10
    3be4:	bl	0 <coda_set_error>
    3be8:	mvn	r3, #0
    3bec:	b	3c5c <read_int8_partial_array+0x160>
    3bf0:	mov	r1, #0
    3bf4:	mvn	r0, #12
    3bf8:	bl	0 <coda_set_error>
    3bfc:	mvn	r3, #0
    3c00:	b	3c5c <read_int8_partial_array+0x160>
    3c04:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c08:	ldr	r2, [fp, #-16]
    3c0c:	ldr	r1, [fp, #-12]
    3c10:	ldr	r0, [fp, #-8]
    3c14:	bl	0 <coda_cdf_cursor_read_int8_partial_array>
    3c18:	mov	r3, r0
    3c1c:	b	3c5c <read_int8_partial_array+0x160>
    3c20:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c24:	ldr	r2, [fp, #-16]
    3c28:	ldr	r1, [fp, #-12]
    3c2c:	ldr	r0, [fp, #-8]
    3c30:	bl	0 <coda_netcdf_cursor_read_int8_partial_array>
    3c34:	mov	r3, r0
    3c38:	b	3c5c <read_int8_partial_array+0x160>
    3c3c:	movw	r3, #0
    3c40:	movt	r3, #0
    3c44:	mov	r2, #1392	; 0x570
    3c48:	movw	r1, #0
    3c4c:	movt	r1, #0
    3c50:	movw	r0, #0
    3c54:	movt	r0, #0
    3c58:	bl	0 <__assert_fail>
    3c5c:	mov	r0, r3
    3c60:	sub	sp, fp, #4
    3c64:	ldr	fp, [sp]
    3c68:	add	sp, sp, #4
    3c6c:	pop	{pc}		; (ldr pc, [sp], #4)

00003c70 <read_uint8_partial_array>:
    3c70:	str	fp, [sp, #-8]!
    3c74:	str	lr, [sp, #4]
    3c78:	add	fp, sp, #4
    3c7c:	sub	sp, sp, #16
    3c80:	str	r0, [fp, #-8]
    3c84:	str	r1, [fp, #-12]
    3c88:	str	r2, [fp, #-16]
    3c8c:	str	r3, [fp, #-20]	; 0xffffffec
    3c90:	ldr	r3, [fp, #-8]
    3c94:	ldr	r3, [r3, #4]
    3c98:	sub	r3, r3, #1
    3c9c:	ldr	r2, [fp, #-8]
    3ca0:	lsl	r3, r3, #4
    3ca4:	add	r3, r2, r3
    3ca8:	ldr	r3, [r3, #8]
    3cac:	ldr	r3, [r3]
    3cb0:	cmp	r3, #101	; 0x65
    3cb4:	beq	3d4c <read_uint8_partial_array+0xdc>
    3cb8:	cmp	r3, #101	; 0x65
    3cbc:	bhi	3cdc <read_uint8_partial_array+0x6c>
    3cc0:	cmp	r3, #1
    3cc4:	beq	3d14 <read_uint8_partial_array+0xa4>
    3cc8:	cmp	r3, #0
    3ccc:	beq	3cf8 <read_uint8_partial_array+0x88>
    3cd0:	cmp	r3, #100	; 0x64
    3cd4:	beq	3d30 <read_uint8_partial_array+0xc0>
    3cd8:	b	3d90 <read_uint8_partial_array+0x120>
    3cdc:	cmp	r3, #103	; 0x67
    3ce0:	beq	3d74 <read_uint8_partial_array+0x104>
    3ce4:	cmp	r3, #103	; 0x67
    3ce8:	bcc	3d60 <read_uint8_partial_array+0xf0>
    3cec:	cmp	r3, #105	; 0x69
    3cf0:	bhi	3d90 <read_uint8_partial_array+0x120>
    3cf4:	b	3d90 <read_uint8_partial_array+0x120>
    3cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3cfc:	ldr	r2, [fp, #-16]
    3d00:	ldr	r1, [fp, #-12]
    3d04:	ldr	r0, [fp, #-8]
    3d08:	bl	0 <coda_ascii_cursor_read_uint8_partial_array>
    3d0c:	mov	r3, r0
    3d10:	b	3db0 <read_uint8_partial_array+0x140>
    3d14:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d18:	ldr	r2, [fp, #-16]
    3d1c:	ldr	r1, [fp, #-12]
    3d20:	ldr	r0, [fp, #-8]
    3d24:	bl	0 <coda_bin_cursor_read_uint8_partial_array>
    3d28:	mov	r3, r0
    3d2c:	b	3db0 <read_uint8_partial_array+0x140>
    3d30:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d34:	ldr	r2, [fp, #-16]
    3d38:	ldr	r1, [fp, #-12]
    3d3c:	ldr	r0, [fp, #-8]
    3d40:	bl	0 <coda_mem_cursor_read_uint8_partial_array>
    3d44:	mov	r3, r0
    3d48:	b	3db0 <read_uint8_partial_array+0x140>
    3d4c:	mov	r1, #0
    3d50:	mvn	r0, #10
    3d54:	bl	0 <coda_set_error>
    3d58:	mvn	r3, #0
    3d5c:	b	3db0 <read_uint8_partial_array+0x140>
    3d60:	mov	r1, #0
    3d64:	mvn	r0, #12
    3d68:	bl	0 <coda_set_error>
    3d6c:	mvn	r3, #0
    3d70:	b	3db0 <read_uint8_partial_array+0x140>
    3d74:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d78:	ldr	r2, [fp, #-16]
    3d7c:	ldr	r1, [fp, #-12]
    3d80:	ldr	r0, [fp, #-8]
    3d84:	bl	0 <coda_cdf_cursor_read_uint8_partial_array>
    3d88:	mov	r3, r0
    3d8c:	b	3db0 <read_uint8_partial_array+0x140>
    3d90:	movw	r3, #0
    3d94:	movt	r3, #0
    3d98:	movw	r2, #1427	; 0x593
    3d9c:	movw	r1, #0
    3da0:	movt	r1, #0
    3da4:	movw	r0, #0
    3da8:	movt	r0, #0
    3dac:	bl	0 <__assert_fail>
    3db0:	mov	r0, r3
    3db4:	sub	sp, fp, #4
    3db8:	ldr	fp, [sp]
    3dbc:	add	sp, sp, #4
    3dc0:	pop	{pc}		; (ldr pc, [sp], #4)

00003dc4 <read_int16_partial_array>:
    3dc4:	str	fp, [sp, #-8]!
    3dc8:	str	lr, [sp, #4]
    3dcc:	add	fp, sp, #4
    3dd0:	sub	sp, sp, #16
    3dd4:	str	r0, [fp, #-8]
    3dd8:	str	r1, [fp, #-12]
    3ddc:	str	r2, [fp, #-16]
    3de0:	str	r3, [fp, #-20]	; 0xffffffec
    3de4:	ldr	r3, [fp, #-8]
    3de8:	ldr	r3, [r3, #4]
    3dec:	sub	r3, r3, #1
    3df0:	ldr	r2, [fp, #-8]
    3df4:	lsl	r3, r3, #4
    3df8:	add	r3, r2, r3
    3dfc:	ldr	r3, [r3, #8]
    3e00:	ldr	r3, [r3]
    3e04:	cmp	r3, #101	; 0x65
    3e08:	beq	3ea4 <read_int16_partial_array+0xe0>
    3e0c:	cmp	r3, #101	; 0x65
    3e10:	bhi	3e30 <read_int16_partial_array+0x6c>
    3e14:	cmp	r3, #1
    3e18:	beq	3e6c <read_int16_partial_array+0xa8>
    3e1c:	cmp	r3, #0
    3e20:	beq	3e50 <read_int16_partial_array+0x8c>
    3e24:	cmp	r3, #100	; 0x64
    3e28:	beq	3e88 <read_int16_partial_array+0xc4>
    3e2c:	b	3f04 <read_int16_partial_array+0x140>
    3e30:	cmp	r3, #103	; 0x67
    3e34:	beq	3ecc <read_int16_partial_array+0x108>
    3e38:	cmp	r3, #103	; 0x67
    3e3c:	bcc	3eb8 <read_int16_partial_array+0xf4>
    3e40:	cmp	r3, #104	; 0x68
    3e44:	beq	3ee8 <read_int16_partial_array+0x124>
    3e48:	cmp	r3, #105	; 0x69
    3e4c:	b	3f04 <read_int16_partial_array+0x140>
    3e50:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e54:	ldr	r2, [fp, #-16]
    3e58:	ldr	r1, [fp, #-12]
    3e5c:	ldr	r0, [fp, #-8]
    3e60:	bl	0 <coda_ascii_cursor_read_int16_partial_array>
    3e64:	mov	r3, r0
    3e68:	b	3f24 <read_int16_partial_array+0x160>
    3e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e70:	ldr	r2, [fp, #-16]
    3e74:	ldr	r1, [fp, #-12]
    3e78:	ldr	r0, [fp, #-8]
    3e7c:	bl	0 <coda_bin_cursor_read_int16_partial_array>
    3e80:	mov	r3, r0
    3e84:	b	3f24 <read_int16_partial_array+0x160>
    3e88:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e8c:	ldr	r2, [fp, #-16]
    3e90:	ldr	r1, [fp, #-12]
    3e94:	ldr	r0, [fp, #-8]
    3e98:	bl	0 <coda_mem_cursor_read_int16_partial_array>
    3e9c:	mov	r3, r0
    3ea0:	b	3f24 <read_int16_partial_array+0x160>
    3ea4:	mov	r1, #0
    3ea8:	mvn	r0, #10
    3eac:	bl	0 <coda_set_error>
    3eb0:	mvn	r3, #0
    3eb4:	b	3f24 <read_int16_partial_array+0x160>
    3eb8:	mov	r1, #0
    3ebc:	mvn	r0, #12
    3ec0:	bl	0 <coda_set_error>
    3ec4:	mvn	r3, #0
    3ec8:	b	3f24 <read_int16_partial_array+0x160>
    3ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ed0:	ldr	r2, [fp, #-16]
    3ed4:	ldr	r1, [fp, #-12]
    3ed8:	ldr	r0, [fp, #-8]
    3edc:	bl	0 <coda_cdf_cursor_read_int16_partial_array>
    3ee0:	mov	r3, r0
    3ee4:	b	3f24 <read_int16_partial_array+0x160>
    3ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3eec:	ldr	r2, [fp, #-16]
    3ef0:	ldr	r1, [fp, #-12]
    3ef4:	ldr	r0, [fp, #-8]
    3ef8:	bl	0 <coda_netcdf_cursor_read_int16_partial_array>
    3efc:	mov	r3, r0
    3f00:	b	3f24 <read_int16_partial_array+0x160>
    3f04:	movw	r3, #0
    3f08:	movt	r3, #0
    3f0c:	movw	r2, #1463	; 0x5b7
    3f10:	movw	r1, #0
    3f14:	movt	r1, #0
    3f18:	movw	r0, #0
    3f1c:	movt	r0, #0
    3f20:	bl	0 <__assert_fail>
    3f24:	mov	r0, r3
    3f28:	sub	sp, fp, #4
    3f2c:	ldr	fp, [sp]
    3f30:	add	sp, sp, #4
    3f34:	pop	{pc}		; (ldr pc, [sp], #4)

00003f38 <read_uint16_partial_array>:
    3f38:	str	fp, [sp, #-8]!
    3f3c:	str	lr, [sp, #4]
    3f40:	add	fp, sp, #4
    3f44:	sub	sp, sp, #16
    3f48:	str	r0, [fp, #-8]
    3f4c:	str	r1, [fp, #-12]
    3f50:	str	r2, [fp, #-16]
    3f54:	str	r3, [fp, #-20]	; 0xffffffec
    3f58:	ldr	r3, [fp, #-8]
    3f5c:	ldr	r3, [r3, #4]
    3f60:	sub	r3, r3, #1
    3f64:	ldr	r2, [fp, #-8]
    3f68:	lsl	r3, r3, #4
    3f6c:	add	r3, r2, r3
    3f70:	ldr	r3, [r3, #8]
    3f74:	ldr	r3, [r3]
    3f78:	cmp	r3, #101	; 0x65
    3f7c:	beq	4014 <read_uint16_partial_array+0xdc>
    3f80:	cmp	r3, #101	; 0x65
    3f84:	bhi	3fa4 <read_uint16_partial_array+0x6c>
    3f88:	cmp	r3, #1
    3f8c:	beq	3fdc <read_uint16_partial_array+0xa4>
    3f90:	cmp	r3, #0
    3f94:	beq	3fc0 <read_uint16_partial_array+0x88>
    3f98:	cmp	r3, #100	; 0x64
    3f9c:	beq	3ff8 <read_uint16_partial_array+0xc0>
    3fa0:	b	4058 <read_uint16_partial_array+0x120>
    3fa4:	cmp	r3, #103	; 0x67
    3fa8:	beq	403c <read_uint16_partial_array+0x104>
    3fac:	cmp	r3, #103	; 0x67
    3fb0:	bcc	4028 <read_uint16_partial_array+0xf0>
    3fb4:	cmp	r3, #105	; 0x69
    3fb8:	bhi	4058 <read_uint16_partial_array+0x120>
    3fbc:	b	4058 <read_uint16_partial_array+0x120>
    3fc0:	ldr	r3, [fp, #-20]	; 0xffffffec
    3fc4:	ldr	r2, [fp, #-16]
    3fc8:	ldr	r1, [fp, #-12]
    3fcc:	ldr	r0, [fp, #-8]
    3fd0:	bl	0 <coda_ascii_cursor_read_uint16_partial_array>
    3fd4:	mov	r3, r0
    3fd8:	b	4078 <read_uint16_partial_array+0x140>
    3fdc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3fe0:	ldr	r2, [fp, #-16]
    3fe4:	ldr	r1, [fp, #-12]
    3fe8:	ldr	r0, [fp, #-8]
    3fec:	bl	0 <coda_bin_cursor_read_uint16_partial_array>
    3ff0:	mov	r3, r0
    3ff4:	b	4078 <read_uint16_partial_array+0x140>
    3ff8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ffc:	ldr	r2, [fp, #-16]
    4000:	ldr	r1, [fp, #-12]
    4004:	ldr	r0, [fp, #-8]
    4008:	bl	0 <coda_mem_cursor_read_uint16_partial_array>
    400c:	mov	r3, r0
    4010:	b	4078 <read_uint16_partial_array+0x140>
    4014:	mov	r1, #0
    4018:	mvn	r0, #10
    401c:	bl	0 <coda_set_error>
    4020:	mvn	r3, #0
    4024:	b	4078 <read_uint16_partial_array+0x140>
    4028:	mov	r1, #0
    402c:	mvn	r0, #12
    4030:	bl	0 <coda_set_error>
    4034:	mvn	r3, #0
    4038:	b	4078 <read_uint16_partial_array+0x140>
    403c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4040:	ldr	r2, [fp, #-16]
    4044:	ldr	r1, [fp, #-12]
    4048:	ldr	r0, [fp, #-8]
    404c:	bl	0 <coda_cdf_cursor_read_uint16_partial_array>
    4050:	mov	r3, r0
    4054:	b	4078 <read_uint16_partial_array+0x140>
    4058:	movw	r3, #0
    405c:	movt	r3, #0
    4060:	movw	r2, #1498	; 0x5da
    4064:	movw	r1, #0
    4068:	movt	r1, #0
    406c:	movw	r0, #0
    4070:	movt	r0, #0
    4074:	bl	0 <__assert_fail>
    4078:	mov	r0, r3
    407c:	sub	sp, fp, #4
    4080:	ldr	fp, [sp]
    4084:	add	sp, sp, #4
    4088:	pop	{pc}		; (ldr pc, [sp], #4)

0000408c <read_int32_partial_array>:
    408c:	str	fp, [sp, #-8]!
    4090:	str	lr, [sp, #4]
    4094:	add	fp, sp, #4
    4098:	sub	sp, sp, #16
    409c:	str	r0, [fp, #-8]
    40a0:	str	r1, [fp, #-12]
    40a4:	str	r2, [fp, #-16]
    40a8:	str	r3, [fp, #-20]	; 0xffffffec
    40ac:	ldr	r3, [fp, #-8]
    40b0:	ldr	r3, [r3, #4]
    40b4:	sub	r3, r3, #1
    40b8:	ldr	r2, [fp, #-8]
    40bc:	lsl	r3, r3, #4
    40c0:	add	r3, r2, r3
    40c4:	ldr	r3, [r3, #8]
    40c8:	ldr	r3, [r3]
    40cc:	cmp	r3, #101	; 0x65
    40d0:	beq	416c <read_int32_partial_array+0xe0>
    40d4:	cmp	r3, #101	; 0x65
    40d8:	bhi	40f8 <read_int32_partial_array+0x6c>
    40dc:	cmp	r3, #1
    40e0:	beq	4134 <read_int32_partial_array+0xa8>
    40e4:	cmp	r3, #0
    40e8:	beq	4118 <read_int32_partial_array+0x8c>
    40ec:	cmp	r3, #100	; 0x64
    40f0:	beq	4150 <read_int32_partial_array+0xc4>
    40f4:	b	41cc <read_int32_partial_array+0x140>
    40f8:	cmp	r3, #103	; 0x67
    40fc:	beq	4194 <read_int32_partial_array+0x108>
    4100:	cmp	r3, #103	; 0x67
    4104:	bcc	4180 <read_int32_partial_array+0xf4>
    4108:	cmp	r3, #104	; 0x68
    410c:	beq	41b0 <read_int32_partial_array+0x124>
    4110:	cmp	r3, #105	; 0x69
    4114:	b	41cc <read_int32_partial_array+0x140>
    4118:	ldr	r3, [fp, #-20]	; 0xffffffec
    411c:	ldr	r2, [fp, #-16]
    4120:	ldr	r1, [fp, #-12]
    4124:	ldr	r0, [fp, #-8]
    4128:	bl	0 <coda_ascii_cursor_read_int32_partial_array>
    412c:	mov	r3, r0
    4130:	b	41ec <read_int32_partial_array+0x160>
    4134:	ldr	r3, [fp, #-20]	; 0xffffffec
    4138:	ldr	r2, [fp, #-16]
    413c:	ldr	r1, [fp, #-12]
    4140:	ldr	r0, [fp, #-8]
    4144:	bl	0 <coda_bin_cursor_read_int32_partial_array>
    4148:	mov	r3, r0
    414c:	b	41ec <read_int32_partial_array+0x160>
    4150:	ldr	r3, [fp, #-20]	; 0xffffffec
    4154:	ldr	r2, [fp, #-16]
    4158:	ldr	r1, [fp, #-12]
    415c:	ldr	r0, [fp, #-8]
    4160:	bl	0 <coda_mem_cursor_read_int32_partial_array>
    4164:	mov	r3, r0
    4168:	b	41ec <read_int32_partial_array+0x160>
    416c:	mov	r1, #0
    4170:	mvn	r0, #10
    4174:	bl	0 <coda_set_error>
    4178:	mvn	r3, #0
    417c:	b	41ec <read_int32_partial_array+0x160>
    4180:	mov	r1, #0
    4184:	mvn	r0, #12
    4188:	bl	0 <coda_set_error>
    418c:	mvn	r3, #0
    4190:	b	41ec <read_int32_partial_array+0x160>
    4194:	ldr	r3, [fp, #-20]	; 0xffffffec
    4198:	ldr	r2, [fp, #-16]
    419c:	ldr	r1, [fp, #-12]
    41a0:	ldr	r0, [fp, #-8]
    41a4:	bl	0 <coda_cdf_cursor_read_int32_partial_array>
    41a8:	mov	r3, r0
    41ac:	b	41ec <read_int32_partial_array+0x160>
    41b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    41b4:	ldr	r2, [fp, #-16]
    41b8:	ldr	r1, [fp, #-12]
    41bc:	ldr	r0, [fp, #-8]
    41c0:	bl	0 <coda_netcdf_cursor_read_int32_partial_array>
    41c4:	mov	r3, r0
    41c8:	b	41ec <read_int32_partial_array+0x160>
    41cc:	movw	r3, #0
    41d0:	movt	r3, #0
    41d4:	movw	r2, #1534	; 0x5fe
    41d8:	movw	r1, #0
    41dc:	movt	r1, #0
    41e0:	movw	r0, #0
    41e4:	movt	r0, #0
    41e8:	bl	0 <__assert_fail>
    41ec:	mov	r0, r3
    41f0:	sub	sp, fp, #4
    41f4:	ldr	fp, [sp]
    41f8:	add	sp, sp, #4
    41fc:	pop	{pc}		; (ldr pc, [sp], #4)

00004200 <read_uint32_partial_array>:
    4200:	str	fp, [sp, #-8]!
    4204:	str	lr, [sp, #4]
    4208:	add	fp, sp, #4
    420c:	sub	sp, sp, #16
    4210:	str	r0, [fp, #-8]
    4214:	str	r1, [fp, #-12]
    4218:	str	r2, [fp, #-16]
    421c:	str	r3, [fp, #-20]	; 0xffffffec
    4220:	ldr	r3, [fp, #-8]
    4224:	ldr	r3, [r3, #4]
    4228:	sub	r3, r3, #1
    422c:	ldr	r2, [fp, #-8]
    4230:	lsl	r3, r3, #4
    4234:	add	r3, r2, r3
    4238:	ldr	r3, [r3, #8]
    423c:	ldr	r3, [r3]
    4240:	cmp	r3, #101	; 0x65
    4244:	beq	42dc <read_uint32_partial_array+0xdc>
    4248:	cmp	r3, #101	; 0x65
    424c:	bhi	426c <read_uint32_partial_array+0x6c>
    4250:	cmp	r3, #1
    4254:	beq	42a4 <read_uint32_partial_array+0xa4>
    4258:	cmp	r3, #0
    425c:	beq	4288 <read_uint32_partial_array+0x88>
    4260:	cmp	r3, #100	; 0x64
    4264:	beq	42c0 <read_uint32_partial_array+0xc0>
    4268:	b	4320 <read_uint32_partial_array+0x120>
    426c:	cmp	r3, #103	; 0x67
    4270:	beq	4304 <read_uint32_partial_array+0x104>
    4274:	cmp	r3, #103	; 0x67
    4278:	bcc	42f0 <read_uint32_partial_array+0xf0>
    427c:	cmp	r3, #105	; 0x69
    4280:	bhi	4320 <read_uint32_partial_array+0x120>
    4284:	b	4320 <read_uint32_partial_array+0x120>
    4288:	ldr	r3, [fp, #-20]	; 0xffffffec
    428c:	ldr	r2, [fp, #-16]
    4290:	ldr	r1, [fp, #-12]
    4294:	ldr	r0, [fp, #-8]
    4298:	bl	0 <coda_ascii_cursor_read_uint32_partial_array>
    429c:	mov	r3, r0
    42a0:	b	4340 <read_uint32_partial_array+0x140>
    42a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    42a8:	ldr	r2, [fp, #-16]
    42ac:	ldr	r1, [fp, #-12]
    42b0:	ldr	r0, [fp, #-8]
    42b4:	bl	0 <coda_bin_cursor_read_uint32_partial_array>
    42b8:	mov	r3, r0
    42bc:	b	4340 <read_uint32_partial_array+0x140>
    42c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    42c4:	ldr	r2, [fp, #-16]
    42c8:	ldr	r1, [fp, #-12]
    42cc:	ldr	r0, [fp, #-8]
    42d0:	bl	0 <coda_mem_cursor_read_uint32_partial_array>
    42d4:	mov	r3, r0
    42d8:	b	4340 <read_uint32_partial_array+0x140>
    42dc:	mov	r1, #0
    42e0:	mvn	r0, #10
    42e4:	bl	0 <coda_set_error>
    42e8:	mvn	r3, #0
    42ec:	b	4340 <read_uint32_partial_array+0x140>
    42f0:	mov	r1, #0
    42f4:	mvn	r0, #12
    42f8:	bl	0 <coda_set_error>
    42fc:	mvn	r3, #0
    4300:	b	4340 <read_uint32_partial_array+0x140>
    4304:	ldr	r3, [fp, #-20]	; 0xffffffec
    4308:	ldr	r2, [fp, #-16]
    430c:	ldr	r1, [fp, #-12]
    4310:	ldr	r0, [fp, #-8]
    4314:	bl	0 <coda_cdf_cursor_read_uint32_partial_array>
    4318:	mov	r3, r0
    431c:	b	4340 <read_uint32_partial_array+0x140>
    4320:	movw	r3, #0
    4324:	movt	r3, #0
    4328:	movw	r2, #1569	; 0x621
    432c:	movw	r1, #0
    4330:	movt	r1, #0
    4334:	movw	r0, #0
    4338:	movt	r0, #0
    433c:	bl	0 <__assert_fail>
    4340:	mov	r0, r3
    4344:	sub	sp, fp, #4
    4348:	ldr	fp, [sp]
    434c:	add	sp, sp, #4
    4350:	pop	{pc}		; (ldr pc, [sp], #4)

00004354 <read_int64_partial_array>:
    4354:	str	fp, [sp, #-8]!
    4358:	str	lr, [sp, #4]
    435c:	add	fp, sp, #4
    4360:	sub	sp, sp, #16
    4364:	str	r0, [fp, #-8]
    4368:	str	r1, [fp, #-12]
    436c:	str	r2, [fp, #-16]
    4370:	str	r3, [fp, #-20]	; 0xffffffec
    4374:	ldr	r3, [fp, #-8]
    4378:	ldr	r3, [r3, #4]
    437c:	sub	r3, r3, #1
    4380:	ldr	r2, [fp, #-8]
    4384:	lsl	r3, r3, #4
    4388:	add	r3, r2, r3
    438c:	ldr	r3, [r3, #8]
    4390:	ldr	r3, [r3]
    4394:	cmp	r3, #101	; 0x65
    4398:	beq	4430 <read_int64_partial_array+0xdc>
    439c:	cmp	r3, #101	; 0x65
    43a0:	bhi	43c0 <read_int64_partial_array+0x6c>
    43a4:	cmp	r3, #1
    43a8:	beq	43f8 <read_int64_partial_array+0xa4>
    43ac:	cmp	r3, #0
    43b0:	beq	43dc <read_int64_partial_array+0x88>
    43b4:	cmp	r3, #100	; 0x64
    43b8:	beq	4414 <read_int64_partial_array+0xc0>
    43bc:	b	4474 <read_int64_partial_array+0x120>
    43c0:	cmp	r3, #103	; 0x67
    43c4:	beq	4458 <read_int64_partial_array+0x104>
    43c8:	cmp	r3, #103	; 0x67
    43cc:	bcc	4444 <read_int64_partial_array+0xf0>
    43d0:	cmp	r3, #105	; 0x69
    43d4:	bhi	4474 <read_int64_partial_array+0x120>
    43d8:	b	4474 <read_int64_partial_array+0x120>
    43dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    43e0:	ldr	r2, [fp, #-16]
    43e4:	ldr	r1, [fp, #-12]
    43e8:	ldr	r0, [fp, #-8]
    43ec:	bl	0 <coda_ascii_cursor_read_int64_partial_array>
    43f0:	mov	r3, r0
    43f4:	b	4494 <read_int64_partial_array+0x140>
    43f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    43fc:	ldr	r2, [fp, #-16]
    4400:	ldr	r1, [fp, #-12]
    4404:	ldr	r0, [fp, #-8]
    4408:	bl	0 <coda_bin_cursor_read_int64_partial_array>
    440c:	mov	r3, r0
    4410:	b	4494 <read_int64_partial_array+0x140>
    4414:	ldr	r3, [fp, #-20]	; 0xffffffec
    4418:	ldr	r2, [fp, #-16]
    441c:	ldr	r1, [fp, #-12]
    4420:	ldr	r0, [fp, #-8]
    4424:	bl	0 <coda_mem_cursor_read_int64_partial_array>
    4428:	mov	r3, r0
    442c:	b	4494 <read_int64_partial_array+0x140>
    4430:	mov	r1, #0
    4434:	mvn	r0, #10
    4438:	bl	0 <coda_set_error>
    443c:	mvn	r3, #0
    4440:	b	4494 <read_int64_partial_array+0x140>
    4444:	mov	r1, #0
    4448:	mvn	r0, #12
    444c:	bl	0 <coda_set_error>
    4450:	mvn	r3, #0
    4454:	b	4494 <read_int64_partial_array+0x140>
    4458:	ldr	r3, [fp, #-20]	; 0xffffffec
    445c:	ldr	r2, [fp, #-16]
    4460:	ldr	r1, [fp, #-12]
    4464:	ldr	r0, [fp, #-8]
    4468:	bl	0 <coda_cdf_cursor_read_int64_partial_array>
    446c:	mov	r3, r0
    4470:	b	4494 <read_int64_partial_array+0x140>
    4474:	movw	r3, #0
    4478:	movt	r3, #0
    447c:	movw	r2, #1604	; 0x644
    4480:	movw	r1, #0
    4484:	movt	r1, #0
    4488:	movw	r0, #0
    448c:	movt	r0, #0
    4490:	bl	0 <__assert_fail>
    4494:	mov	r0, r3
    4498:	sub	sp, fp, #4
    449c:	ldr	fp, [sp]
    44a0:	add	sp, sp, #4
    44a4:	pop	{pc}		; (ldr pc, [sp], #4)

000044a8 <read_uint64_partial_array>:
    44a8:	str	fp, [sp, #-8]!
    44ac:	str	lr, [sp, #4]
    44b0:	add	fp, sp, #4
    44b4:	sub	sp, sp, #16
    44b8:	str	r0, [fp, #-8]
    44bc:	str	r1, [fp, #-12]
    44c0:	str	r2, [fp, #-16]
    44c4:	str	r3, [fp, #-20]	; 0xffffffec
    44c8:	ldr	r3, [fp, #-8]
    44cc:	ldr	r3, [r3, #4]
    44d0:	sub	r3, r3, #1
    44d4:	ldr	r2, [fp, #-8]
    44d8:	lsl	r3, r3, #4
    44dc:	add	r3, r2, r3
    44e0:	ldr	r3, [r3, #8]
    44e4:	ldr	r3, [r3]
    44e8:	cmp	r3, #101	; 0x65
    44ec:	beq	457c <read_uint64_partial_array+0xd4>
    44f0:	cmp	r3, #101	; 0x65
    44f4:	bhi	4514 <read_uint64_partial_array+0x6c>
    44f8:	cmp	r3, #1
    44fc:	beq	4544 <read_uint64_partial_array+0x9c>
    4500:	cmp	r3, #0
    4504:	beq	4528 <read_uint64_partial_array+0x80>
    4508:	cmp	r3, #100	; 0x64
    450c:	beq	4560 <read_uint64_partial_array+0xb8>
    4510:	b	45a4 <read_uint64_partial_array+0xfc>
    4514:	cmp	r3, #102	; 0x66
    4518:	beq	4590 <read_uint64_partial_array+0xe8>
    451c:	cmp	r3, #105	; 0x69
    4520:	bhi	45a4 <read_uint64_partial_array+0xfc>
    4524:	b	45a4 <read_uint64_partial_array+0xfc>
    4528:	ldr	r3, [fp, #-20]	; 0xffffffec
    452c:	ldr	r2, [fp, #-16]
    4530:	ldr	r1, [fp, #-12]
    4534:	ldr	r0, [fp, #-8]
    4538:	bl	0 <coda_ascii_cursor_read_uint64_partial_array>
    453c:	mov	r3, r0
    4540:	b	45c4 <read_uint64_partial_array+0x11c>
    4544:	ldr	r3, [fp, #-20]	; 0xffffffec
    4548:	ldr	r2, [fp, #-16]
    454c:	ldr	r1, [fp, #-12]
    4550:	ldr	r0, [fp, #-8]
    4554:	bl	0 <coda_bin_cursor_read_uint64_partial_array>
    4558:	mov	r3, r0
    455c:	b	45c4 <read_uint64_partial_array+0x11c>
    4560:	ldr	r3, [fp, #-20]	; 0xffffffec
    4564:	ldr	r2, [fp, #-16]
    4568:	ldr	r1, [fp, #-12]
    456c:	ldr	r0, [fp, #-8]
    4570:	bl	0 <coda_mem_cursor_read_uint64_partial_array>
    4574:	mov	r3, r0
    4578:	b	45c4 <read_uint64_partial_array+0x11c>
    457c:	mov	r1, #0
    4580:	mvn	r0, #10
    4584:	bl	0 <coda_set_error>
    4588:	mvn	r3, #0
    458c:	b	45c4 <read_uint64_partial_array+0x11c>
    4590:	mov	r1, #0
    4594:	mvn	r0, #12
    4598:	bl	0 <coda_set_error>
    459c:	mvn	r3, #0
    45a0:	b	45c4 <read_uint64_partial_array+0x11c>
    45a4:	movw	r3, #0
    45a8:	movt	r3, #0
    45ac:	movw	r2, #1638	; 0x666
    45b0:	movw	r1, #0
    45b4:	movt	r1, #0
    45b8:	movw	r0, #0
    45bc:	movt	r0, #0
    45c0:	bl	0 <__assert_fail>
    45c4:	mov	r0, r3
    45c8:	sub	sp, fp, #4
    45cc:	ldr	fp, [sp]
    45d0:	add	sp, sp, #4
    45d4:	pop	{pc}		; (ldr pc, [sp], #4)

000045d8 <read_float_partial_array>:
    45d8:	str	fp, [sp, #-8]!
    45dc:	str	lr, [sp, #4]
    45e0:	add	fp, sp, #4
    45e4:	sub	sp, sp, #16
    45e8:	str	r0, [fp, #-8]
    45ec:	str	r1, [fp, #-12]
    45f0:	str	r2, [fp, #-16]
    45f4:	str	r3, [fp, #-20]	; 0xffffffec
    45f8:	ldr	r3, [fp, #-8]
    45fc:	ldr	r3, [r3, #4]
    4600:	sub	r3, r3, #1
    4604:	ldr	r2, [fp, #-8]
    4608:	lsl	r3, r3, #4
    460c:	add	r3, r2, r3
    4610:	ldr	r3, [r3, #8]
    4614:	ldr	r3, [r3]
    4618:	cmp	r3, #101	; 0x65
    461c:	beq	46bc <read_float_partial_array+0xe4>
    4620:	cmp	r3, #101	; 0x65
    4624:	bhi	4644 <read_float_partial_array+0x6c>
    4628:	cmp	r3, #1
    462c:	beq	4684 <read_float_partial_array+0xac>
    4630:	cmp	r3, #0
    4634:	beq	4668 <read_float_partial_array+0x90>
    4638:	cmp	r3, #100	; 0x64
    463c:	beq	46a0 <read_float_partial_array+0xc8>
    4640:	b	4738 <read_float_partial_array+0x160>
    4644:	cmp	r3, #103	; 0x67
    4648:	beq	46e4 <read_float_partial_array+0x10c>
    464c:	cmp	r3, #103	; 0x67
    4650:	bcc	46d0 <read_float_partial_array+0xf8>
    4654:	cmp	r3, #104	; 0x68
    4658:	beq	4700 <read_float_partial_array+0x128>
    465c:	cmp	r3, #105	; 0x69
    4660:	beq	471c <read_float_partial_array+0x144>
    4664:	b	4738 <read_float_partial_array+0x160>
    4668:	ldr	r3, [fp, #-20]	; 0xffffffec
    466c:	ldr	r2, [fp, #-16]
    4670:	ldr	r1, [fp, #-12]
    4674:	ldr	r0, [fp, #-8]
    4678:	bl	0 <coda_ascii_cursor_read_float_partial_array>
    467c:	mov	r3, r0
    4680:	b	4758 <read_float_partial_array+0x180>
    4684:	ldr	r3, [fp, #-20]	; 0xffffffec
    4688:	ldr	r2, [fp, #-16]
    468c:	ldr	r1, [fp, #-12]
    4690:	ldr	r0, [fp, #-8]
    4694:	bl	0 <coda_bin_cursor_read_float_partial_array>
    4698:	mov	r3, r0
    469c:	b	4758 <read_float_partial_array+0x180>
    46a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    46a4:	ldr	r2, [fp, #-16]
    46a8:	ldr	r1, [fp, #-12]
    46ac:	ldr	r0, [fp, #-8]
    46b0:	bl	0 <coda_mem_cursor_read_float_partial_array>
    46b4:	mov	r3, r0
    46b8:	b	4758 <read_float_partial_array+0x180>
    46bc:	mov	r1, #0
    46c0:	mvn	r0, #10
    46c4:	bl	0 <coda_set_error>
    46c8:	mvn	r3, #0
    46cc:	b	4758 <read_float_partial_array+0x180>
    46d0:	mov	r1, #0
    46d4:	mvn	r0, #12
    46d8:	bl	0 <coda_set_error>
    46dc:	mvn	r3, #0
    46e0:	b	4758 <read_float_partial_array+0x180>
    46e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    46e8:	ldr	r2, [fp, #-16]
    46ec:	ldr	r1, [fp, #-12]
    46f0:	ldr	r0, [fp, #-8]
    46f4:	bl	0 <coda_cdf_cursor_read_float_partial_array>
    46f8:	mov	r3, r0
    46fc:	b	4758 <read_float_partial_array+0x180>
    4700:	ldr	r3, [fp, #-20]	; 0xffffffec
    4704:	ldr	r2, [fp, #-16]
    4708:	ldr	r1, [fp, #-12]
    470c:	ldr	r0, [fp, #-8]
    4710:	bl	0 <coda_netcdf_cursor_read_float_partial_array>
    4714:	mov	r3, r0
    4718:	b	4758 <read_float_partial_array+0x180>
    471c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4720:	ldr	r2, [fp, #-16]
    4724:	ldr	r1, [fp, #-12]
    4728:	ldr	r0, [fp, #-8]
    472c:	bl	0 <coda_grib_cursor_read_float_partial_array>
    4730:	mov	r3, r0
    4734:	b	4758 <read_float_partial_array+0x180>
    4738:	movw	r3, #0
    473c:	movt	r3, #0
    4740:	movw	r2, #1674	; 0x68a
    4744:	movw	r1, #0
    4748:	movt	r1, #0
    474c:	movw	r0, #0
    4750:	movt	r0, #0
    4754:	bl	0 <__assert_fail>
    4758:	mov	r0, r3
    475c:	sub	sp, fp, #4
    4760:	ldr	fp, [sp]
    4764:	add	sp, sp, #4
    4768:	pop	{pc}		; (ldr pc, [sp], #4)

0000476c <read_double_partial_array>:
    476c:	str	fp, [sp, #-8]!
    4770:	str	lr, [sp, #4]
    4774:	add	fp, sp, #4
    4778:	sub	sp, sp, #32
    477c:	str	r0, [fp, #-16]
    4780:	str	r1, [fp, #-20]	; 0xffffffec
    4784:	str	r2, [fp, #-24]	; 0xffffffe8
    4788:	str	r3, [fp, #-28]	; 0xffffffe4
    478c:	ldr	r3, [fp, #-16]
    4790:	ldr	r3, [r3, #4]
    4794:	sub	r3, r3, #1
    4798:	ldr	r2, [fp, #-16]
    479c:	lsl	r3, r3, #4
    47a0:	add	r3, r2, r3
    47a4:	ldr	r3, [r3, #8]
    47a8:	ldr	r3, [r3]
    47ac:	cmp	r3, #99	; 0x63
    47b0:	bhi	47d4 <read_double_partial_array+0x68>
    47b4:	ldr	r3, [fp, #-16]
    47b8:	ldr	r3, [r3, #4]
    47bc:	sub	r3, r3, #1
    47c0:	ldr	r2, [fp, #-16]
    47c4:	lsl	r3, r3, #4
    47c8:	add	r3, r2, r3
    47cc:	ldr	r3, [r3, #8]
    47d0:	b	47f4 <read_double_partial_array+0x88>
    47d4:	ldr	r3, [fp, #-16]
    47d8:	ldr	r3, [r3, #4]
    47dc:	sub	r3, r3, #1
    47e0:	ldr	r2, [fp, #-16]
    47e4:	lsl	r3, r3, #4
    47e8:	add	r3, r2, r3
    47ec:	ldr	r3, [r3, #8]
    47f0:	ldr	r3, [r3, #4]
    47f4:	str	r3, [fp, #-8]
    47f8:	ldr	r3, [fp, #-8]
    47fc:	ldr	r3, [r3, #40]	; 0x28
    4800:	ldr	r3, [r3, #8]
    4804:	cmp	r3, #6
    4808:	bne	483c <read_double_partial_array+0xd0>
    480c:	mov	r3, #8
    4810:	str	r3, [sp, #4]
    4814:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4818:	str	r3, [sp]
    481c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4820:	ldr	r2, [fp, #-20]	; 0xffffffec
    4824:	movw	r1, #0
    4828:	movt	r1, #0
    482c:	ldr	r0, [fp, #-16]
    4830:	bl	408 <read_partial_array>
    4834:	mov	r3, r0
    4838:	b	497c <read_double_partial_array+0x210>
    483c:	ldr	r3, [fp, #-16]
    4840:	ldr	r3, [r3, #4]
    4844:	sub	r3, r3, #1
    4848:	ldr	r2, [fp, #-16]
    484c:	lsl	r3, r3, #4
    4850:	add	r3, r2, r3
    4854:	ldr	r3, [r3, #8]
    4858:	ldr	r3, [r3]
    485c:	cmp	r3, #101	; 0x65
    4860:	beq	48fc <read_double_partial_array+0x190>
    4864:	cmp	r3, #101	; 0x65
    4868:	bhi	4888 <read_double_partial_array+0x11c>
    486c:	cmp	r3, #1
    4870:	beq	48c4 <read_double_partial_array+0x158>
    4874:	cmp	r3, #0
    4878:	beq	48a8 <read_double_partial_array+0x13c>
    487c:	cmp	r3, #100	; 0x64
    4880:	beq	48e0 <read_double_partial_array+0x174>
    4884:	b	495c <read_double_partial_array+0x1f0>
    4888:	cmp	r3, #103	; 0x67
    488c:	beq	4924 <read_double_partial_array+0x1b8>
    4890:	cmp	r3, #103	; 0x67
    4894:	bcc	4910 <read_double_partial_array+0x1a4>
    4898:	cmp	r3, #104	; 0x68
    489c:	beq	4940 <read_double_partial_array+0x1d4>
    48a0:	cmp	r3, #105	; 0x69
    48a4:	b	495c <read_double_partial_array+0x1f0>
    48a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    48ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    48b0:	ldr	r1, [fp, #-20]	; 0xffffffec
    48b4:	ldr	r0, [fp, #-16]
    48b8:	bl	0 <coda_ascii_cursor_read_double_partial_array>
    48bc:	mov	r3, r0
    48c0:	b	497c <read_double_partial_array+0x210>
    48c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    48c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    48cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    48d0:	ldr	r0, [fp, #-16]
    48d4:	bl	0 <coda_bin_cursor_read_double_partial_array>
    48d8:	mov	r3, r0
    48dc:	b	497c <read_double_partial_array+0x210>
    48e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    48e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    48e8:	ldr	r1, [fp, #-20]	; 0xffffffec
    48ec:	ldr	r0, [fp, #-16]
    48f0:	bl	0 <coda_mem_cursor_read_double_partial_array>
    48f4:	mov	r3, r0
    48f8:	b	497c <read_double_partial_array+0x210>
    48fc:	mov	r1, #0
    4900:	mvn	r0, #10
    4904:	bl	0 <coda_set_error>
    4908:	mvn	r3, #0
    490c:	b	497c <read_double_partial_array+0x210>
    4910:	mov	r1, #0
    4914:	mvn	r0, #12
    4918:	bl	0 <coda_set_error>
    491c:	mvn	r3, #0
    4920:	b	497c <read_double_partial_array+0x210>
    4924:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4928:	ldr	r2, [fp, #-24]	; 0xffffffe8
    492c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4930:	ldr	r0, [fp, #-16]
    4934:	bl	0 <coda_cdf_cursor_read_double_partial_array>
    4938:	mov	r3, r0
    493c:	b	497c <read_double_partial_array+0x210>
    4940:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4944:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4948:	ldr	r1, [fp, #-20]	; 0xffffffec
    494c:	ldr	r0, [fp, #-16]
    4950:	bl	0 <coda_netcdf_cursor_read_double_partial_array>
    4954:	mov	r3, r0
    4958:	b	497c <read_double_partial_array+0x210>
    495c:	movw	r3, #0
    4960:	movt	r3, #0
    4964:	movw	r2, #1718	; 0x6b6
    4968:	movw	r1, #0
    496c:	movt	r1, #0
    4970:	movw	r0, #0
    4974:	movt	r0, #0
    4978:	bl	0 <__assert_fail>
    497c:	mov	r0, r3
    4980:	sub	sp, fp, #4
    4984:	ldr	fp, [sp]
    4988:	add	sp, sp, #4
    498c:	pop	{pc}		; (ldr pc, [sp], #4)

00004990 <read_char_partial_array>:
    4990:	str	fp, [sp, #-8]!
    4994:	str	lr, [sp, #4]
    4998:	add	fp, sp, #4
    499c:	sub	sp, sp, #16
    49a0:	str	r0, [fp, #-8]
    49a4:	str	r1, [fp, #-12]
    49a8:	str	r2, [fp, #-16]
    49ac:	str	r3, [fp, #-20]	; 0xffffffec
    49b0:	ldr	r3, [fp, #-8]
    49b4:	ldr	r3, [r3, #4]
    49b8:	sub	r3, r3, #1
    49bc:	ldr	r2, [fp, #-8]
    49c0:	lsl	r3, r3, #4
    49c4:	add	r3, r2, r3
    49c8:	ldr	r3, [r3, #8]
    49cc:	ldr	r3, [r3]
    49d0:	cmp	r3, #101	; 0x65
    49d4:	beq	4a70 <read_char_partial_array+0xe0>
    49d8:	cmp	r3, #101	; 0x65
    49dc:	bhi	49fc <read_char_partial_array+0x6c>
    49e0:	cmp	r3, #1
    49e4:	beq	4a38 <read_char_partial_array+0xa8>
    49e8:	cmp	r3, #0
    49ec:	beq	4a1c <read_char_partial_array+0x8c>
    49f0:	cmp	r3, #100	; 0x64
    49f4:	beq	4a54 <read_char_partial_array+0xc4>
    49f8:	b	4ac0 <read_char_partial_array+0x130>
    49fc:	cmp	r3, #103	; 0x67
    4a00:	beq	4a84 <read_char_partial_array+0xf4>
    4a04:	cmp	r3, #103	; 0x67
    4a08:	bcc	4abc <read_char_partial_array+0x12c>
    4a0c:	cmp	r3, #104	; 0x68
    4a10:	beq	4aa0 <read_char_partial_array+0x110>
    4a14:	cmp	r3, #105	; 0x69
    4a18:	b	4abc <read_char_partial_array+0x12c>
    4a1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4a20:	ldr	r2, [fp, #-16]
    4a24:	ldr	r1, [fp, #-12]
    4a28:	ldr	r0, [fp, #-8]
    4a2c:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    4a30:	mov	r3, r0
    4a34:	b	4ae0 <read_char_partial_array+0x150>
    4a38:	ldr	r3, [fp, #-20]	; 0xffffffec
    4a3c:	ldr	r2, [fp, #-16]
    4a40:	ldr	r1, [fp, #-12]
    4a44:	ldr	r0, [fp, #-8]
    4a48:	bl	0 <coda_bin_cursor_read_char_partial_array>
    4a4c:	mov	r3, r0
    4a50:	b	4ae0 <read_char_partial_array+0x150>
    4a54:	ldr	r3, [fp, #-20]	; 0xffffffec
    4a58:	ldr	r2, [fp, #-16]
    4a5c:	ldr	r1, [fp, #-12]
    4a60:	ldr	r0, [fp, #-8]
    4a64:	bl	0 <coda_mem_cursor_read_char_partial_array>
    4a68:	mov	r3, r0
    4a6c:	b	4ae0 <read_char_partial_array+0x150>
    4a70:	mov	r1, #0
    4a74:	mvn	r0, #10
    4a78:	bl	0 <coda_set_error>
    4a7c:	mvn	r3, #0
    4a80:	b	4ae0 <read_char_partial_array+0x150>
    4a84:	ldr	r3, [fp, #-20]	; 0xffffffec
    4a88:	ldr	r2, [fp, #-16]
    4a8c:	ldr	r1, [fp, #-12]
    4a90:	ldr	r0, [fp, #-8]
    4a94:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    4a98:	mov	r3, r0
    4a9c:	b	4ae0 <read_char_partial_array+0x150>
    4aa0:	ldr	r3, [fp, #-20]	; 0xffffffec
    4aa4:	ldr	r2, [fp, #-16]
    4aa8:	ldr	r1, [fp, #-12]
    4aac:	ldr	r0, [fp, #-8]
    4ab0:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    4ab4:	mov	r3, r0
    4ab8:	b	4ae0 <read_char_partial_array+0x150>
    4abc:	nop	{0}
    4ac0:	movw	r3, #0
    4ac4:	movt	r3, #0
    4ac8:	movw	r2, #1748	; 0x6d4
    4acc:	movw	r1, #0
    4ad0:	movt	r1, #0
    4ad4:	movw	r0, #0
    4ad8:	movt	r0, #0
    4adc:	bl	0 <__assert_fail>
    4ae0:	mov	r0, r3
    4ae4:	sub	sp, fp, #4
    4ae8:	ldr	fp, [sp]
    4aec:	add	sp, sp, #4
    4af0:	pop	{pc}		; (ldr pc, [sp], #4)

00004af4 <coda_cursor_read_int8>:
    4af4:	str	fp, [sp, #-8]!
    4af8:	str	lr, [sp, #4]
    4afc:	add	fp, sp, #4
    4b00:	sub	sp, sp, #16
    4b04:	str	r0, [fp, #-16]
    4b08:	str	r1, [fp, #-20]	; 0xffffffec
    4b0c:	ldr	r3, [fp, #-16]
    4b10:	cmp	r3, #0
    4b14:	beq	4b4c <coda_cursor_read_int8+0x58>
    4b18:	ldr	r3, [fp, #-16]
    4b1c:	ldr	r3, [r3, #4]
    4b20:	cmp	r3, #0
    4b24:	ble	4b4c <coda_cursor_read_int8+0x58>
    4b28:	ldr	r3, [fp, #-16]
    4b2c:	ldr	r3, [r3, #4]
    4b30:	sub	r3, r3, #1
    4b34:	ldr	r2, [fp, #-16]
    4b38:	lsl	r3, r3, #4
    4b3c:	add	r3, r2, r3
    4b40:	ldr	r3, [r3, #8]
    4b44:	cmp	r3, #0
    4b48:	bne	4b70 <coda_cursor_read_int8+0x7c>
    4b4c:	movw	r3, #1773	; 0x6ed
    4b50:	movw	r2, #0
    4b54:	movt	r2, #0
    4b58:	movw	r1, #0
    4b5c:	movt	r1, #0
    4b60:	mvn	r0, #99	; 0x63
    4b64:	bl	0 <coda_set_error>
    4b68:	mvn	r3, #0
    4b6c:	b	4c24 <coda_cursor_read_int8+0x130>
    4b70:	ldr	r3, [fp, #-20]	; 0xffffffec
    4b74:	cmp	r3, #0
    4b78:	bne	4ba0 <coda_cursor_read_int8+0xac>
    4b7c:	movw	r3, #1778	; 0x6f2
    4b80:	movw	r2, #0
    4b84:	movt	r2, #0
    4b88:	movw	r1, #0
    4b8c:	movt	r1, #0
    4b90:	mvn	r0, #99	; 0x63
    4b94:	bl	0 <coda_set_error>
    4b98:	mvn	r3, #0
    4b9c:	b	4c24 <coda_cursor_read_int8+0x130>
    4ba0:	sub	r3, fp, #8
    4ba4:	mov	r1, r3
    4ba8:	ldr	r0, [fp, #-16]
    4bac:	bl	eb8 <get_read_type>
    4bb0:	mov	r3, r0
    4bb4:	cmp	r3, #0
    4bb8:	beq	4bc4 <coda_cursor_read_int8+0xd0>
    4bbc:	mvn	r3, #0
    4bc0:	b	4c24 <coda_cursor_read_int8+0x130>
    4bc4:	ldr	r3, [fp, #-8]
    4bc8:	cmp	r3, #0
    4bcc:	bne	4bf0 <coda_cursor_read_int8+0xfc>
    4bd0:	ldr	r1, [fp, #-20]	; 0xffffffec
    4bd4:	ldr	r0, [fp, #-16]
    4bd8:	bl	19e0 <read_int8>
    4bdc:	mov	r3, r0
    4be0:	cmp	r3, #0
    4be4:	beq	4c1c <coda_cursor_read_int8+0x128>
    4be8:	mvn	r3, #0
    4bec:	b	4c24 <coda_cursor_read_int8+0x130>
    4bf0:	ldr	r3, [fp, #-8]
    4bf4:	mov	r0, r3
    4bf8:	bl	0 <coda_type_get_native_type_name>
    4bfc:	mov	r3, r0
    4c00:	mov	r2, r3
    4c04:	movw	r1, #0
    4c08:	movt	r1, #0
    4c0c:	mvn	r0, #104	; 0x68
    4c10:	bl	0 <coda_set_error>
    4c14:	mvn	r3, #0
    4c18:	b	4c24 <coda_cursor_read_int8+0x130>
    4c1c:	nop	{0}
    4c20:	mov	r3, #0
    4c24:	mov	r0, r3
    4c28:	sub	sp, fp, #4
    4c2c:	ldr	fp, [sp]
    4c30:	add	sp, sp, #4
    4c34:	pop	{pc}		; (ldr pc, [sp], #4)

00004c38 <coda_cursor_read_uint8>:
    4c38:	str	fp, [sp, #-8]!
    4c3c:	str	lr, [sp, #4]
    4c40:	add	fp, sp, #4
    4c44:	sub	sp, sp, #16
    4c48:	str	r0, [fp, #-16]
    4c4c:	str	r1, [fp, #-20]	; 0xffffffec
    4c50:	ldr	r3, [fp, #-16]
    4c54:	cmp	r3, #0
    4c58:	beq	4c90 <coda_cursor_read_uint8+0x58>
    4c5c:	ldr	r3, [fp, #-16]
    4c60:	ldr	r3, [r3, #4]
    4c64:	cmp	r3, #0
    4c68:	ble	4c90 <coda_cursor_read_uint8+0x58>
    4c6c:	ldr	r3, [fp, #-16]
    4c70:	ldr	r3, [r3, #4]
    4c74:	sub	r3, r3, #1
    4c78:	ldr	r2, [fp, #-16]
    4c7c:	lsl	r3, r3, #4
    4c80:	add	r3, r2, r3
    4c84:	ldr	r3, [r3, #8]
    4c88:	cmp	r3, #0
    4c8c:	bne	4cb4 <coda_cursor_read_uint8+0x7c>
    4c90:	movw	r3, #1820	; 0x71c
    4c94:	movw	r2, #0
    4c98:	movt	r2, #0
    4c9c:	movw	r1, #0
    4ca0:	movt	r1, #0
    4ca4:	mvn	r0, #99	; 0x63
    4ca8:	bl	0 <coda_set_error>
    4cac:	mvn	r3, #0
    4cb0:	b	4d68 <coda_cursor_read_uint8+0x130>
    4cb4:	ldr	r3, [fp, #-20]	; 0xffffffec
    4cb8:	cmp	r3, #0
    4cbc:	bne	4ce4 <coda_cursor_read_uint8+0xac>
    4cc0:	movw	r3, #1825	; 0x721
    4cc4:	movw	r2, #0
    4cc8:	movt	r2, #0
    4ccc:	movw	r1, #0
    4cd0:	movt	r1, #0
    4cd4:	mvn	r0, #99	; 0x63
    4cd8:	bl	0 <coda_set_error>
    4cdc:	mvn	r3, #0
    4ce0:	b	4d68 <coda_cursor_read_uint8+0x130>
    4ce4:	sub	r3, fp, #8
    4ce8:	mov	r1, r3
    4cec:	ldr	r0, [fp, #-16]
    4cf0:	bl	eb8 <get_read_type>
    4cf4:	mov	r3, r0
    4cf8:	cmp	r3, #0
    4cfc:	beq	4d08 <coda_cursor_read_uint8+0xd0>
    4d00:	mvn	r3, #0
    4d04:	b	4d68 <coda_cursor_read_uint8+0x130>
    4d08:	ldr	r3, [fp, #-8]
    4d0c:	cmp	r3, #1
    4d10:	bne	4d34 <coda_cursor_read_uint8+0xfc>
    4d14:	ldr	r1, [fp, #-20]	; 0xffffffec
    4d18:	ldr	r0, [fp, #-16]
    4d1c:	bl	1b24 <read_uint8>
    4d20:	mov	r3, r0
    4d24:	cmp	r3, #0
    4d28:	beq	4d60 <coda_cursor_read_uint8+0x128>
    4d2c:	mvn	r3, #0
    4d30:	b	4d68 <coda_cursor_read_uint8+0x130>
    4d34:	ldr	r3, [fp, #-8]
    4d38:	mov	r0, r3
    4d3c:	bl	0 <coda_type_get_native_type_name>
    4d40:	mov	r3, r0
    4d44:	mov	r2, r3
    4d48:	movw	r1, #0
    4d4c:	movt	r1, #0
    4d50:	mvn	r0, #104	; 0x68
    4d54:	bl	0 <coda_set_error>
    4d58:	mvn	r3, #0
    4d5c:	b	4d68 <coda_cursor_read_uint8+0x130>
    4d60:	nop	{0}
    4d64:	mov	r3, #0
    4d68:	mov	r0, r3
    4d6c:	sub	sp, fp, #4
    4d70:	ldr	fp, [sp]
    4d74:	add	sp, sp, #4
    4d78:	pop	{pc}		; (ldr pc, [sp], #4)

00004d7c <coda_cursor_read_int16>:
    4d7c:	str	fp, [sp, #-8]!
    4d80:	str	lr, [sp, #4]
    4d84:	add	fp, sp, #4
    4d88:	sub	sp, sp, #16
    4d8c:	str	r0, [fp, #-16]
    4d90:	str	r1, [fp, #-20]	; 0xffffffec
    4d94:	ldr	r3, [fp, #-16]
    4d98:	cmp	r3, #0
    4d9c:	beq	4dd4 <coda_cursor_read_int16+0x58>
    4da0:	ldr	r3, [fp, #-16]
    4da4:	ldr	r3, [r3, #4]
    4da8:	cmp	r3, #0
    4dac:	ble	4dd4 <coda_cursor_read_int16+0x58>
    4db0:	ldr	r3, [fp, #-16]
    4db4:	ldr	r3, [r3, #4]
    4db8:	sub	r3, r3, #1
    4dbc:	ldr	r2, [fp, #-16]
    4dc0:	lsl	r3, r3, #4
    4dc4:	add	r3, r2, r3
    4dc8:	ldr	r3, [r3, #8]
    4dcc:	cmp	r3, #0
    4dd0:	bne	4df8 <coda_cursor_read_int16+0x7c>
    4dd4:	movw	r3, #1869	; 0x74d
    4dd8:	movw	r2, #0
    4ddc:	movt	r2, #0
    4de0:	movw	r1, #0
    4de4:	movt	r1, #0
    4de8:	mvn	r0, #99	; 0x63
    4dec:	bl	0 <coda_set_error>
    4df0:	mvn	r3, #0
    4df4:	b	4f2c <coda_cursor_read_int16+0x1b0>
    4df8:	ldr	r3, [fp, #-20]	; 0xffffffec
    4dfc:	cmp	r3, #0
    4e00:	bne	4e28 <coda_cursor_read_int16+0xac>
    4e04:	movw	r3, #1874	; 0x752
    4e08:	movw	r2, #0
    4e0c:	movt	r2, #0
    4e10:	movw	r1, #0
    4e14:	movt	r1, #0
    4e18:	mvn	r0, #99	; 0x63
    4e1c:	bl	0 <coda_set_error>
    4e20:	mvn	r3, #0
    4e24:	b	4f2c <coda_cursor_read_int16+0x1b0>
    4e28:	sub	r3, fp, #8
    4e2c:	mov	r1, r3
    4e30:	ldr	r0, [fp, #-16]
    4e34:	bl	eb8 <get_read_type>
    4e38:	mov	r3, r0
    4e3c:	cmp	r3, #0
    4e40:	beq	4e4c <coda_cursor_read_int16+0xd0>
    4e44:	mvn	r3, #0
    4e48:	b	4f2c <coda_cursor_read_int16+0x1b0>
    4e4c:	ldr	r3, [fp, #-8]
    4e50:	cmp	r3, #1
    4e54:	beq	4ea0 <coda_cursor_read_int16+0x124>
    4e58:	cmp	r3, #2
    4e5c:	beq	4ed8 <coda_cursor_read_int16+0x15c>
    4e60:	cmp	r3, #0
    4e64:	bne	4ef8 <coda_cursor_read_int16+0x17c>
    4e68:	sub	r3, fp, #9
    4e6c:	mov	r1, r3
    4e70:	ldr	r0, [fp, #-16]
    4e74:	bl	19e0 <read_int8>
    4e78:	mov	r3, r0
    4e7c:	cmp	r3, #0
    4e80:	beq	4e8c <coda_cursor_read_int16+0x110>
    4e84:	mvn	r3, #0
    4e88:	b	4f2c <coda_cursor_read_int16+0x1b0>
    4e8c:	ldrsb	r3, [fp, #-9]
    4e90:	sxth	r2, r3
    4e94:	ldr	r3, [fp, #-20]	; 0xffffffec
    4e98:	strh	r2, [r3]
    4e9c:	b	4f28 <coda_cursor_read_int16+0x1ac>
    4ea0:	sub	r3, fp, #10
    4ea4:	mov	r1, r3
    4ea8:	ldr	r0, [fp, #-16]
    4eac:	bl	1b24 <read_uint8>
    4eb0:	mov	r3, r0
    4eb4:	cmp	r3, #0
    4eb8:	beq	4ec4 <coda_cursor_read_int16+0x148>
    4ebc:	mvn	r3, #0
    4ec0:	b	4f2c <coda_cursor_read_int16+0x1b0>
    4ec4:	ldrb	r3, [fp, #-10]
    4ec8:	sxth	r2, r3
    4ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
    4ed0:	strh	r2, [r3]
    4ed4:	b	4f28 <coda_cursor_read_int16+0x1ac>
    4ed8:	ldr	r1, [fp, #-20]	; 0xffffffec
    4edc:	ldr	r0, [fp, #-16]
    4ee0:	bl	1c50 <read_int16>
    4ee4:	mov	r3, r0
    4ee8:	cmp	r3, #0
    4eec:	beq	4f24 <coda_cursor_read_int16+0x1a8>
    4ef0:	mvn	r3, #0
    4ef4:	b	4f2c <coda_cursor_read_int16+0x1b0>
    4ef8:	ldr	r3, [fp, #-8]
    4efc:	mov	r0, r3
    4f00:	bl	0 <coda_type_get_native_type_name>
    4f04:	mov	r3, r0
    4f08:	mov	r2, r3
    4f0c:	movw	r1, #0
    4f10:	movt	r1, #0
    4f14:	mvn	r0, #104	; 0x68
    4f18:	bl	0 <coda_set_error>
    4f1c:	mvn	r3, #0
    4f20:	b	4f2c <coda_cursor_read_int16+0x1b0>
    4f24:	nop	{0}
    4f28:	mov	r3, #0
    4f2c:	mov	r0, r3
    4f30:	sub	sp, fp, #4
    4f34:	ldr	fp, [sp]
    4f38:	add	sp, sp, #4
    4f3c:	pop	{pc}		; (ldr pc, [sp], #4)

00004f40 <coda_cursor_read_uint16>:
    4f40:	str	fp, [sp, #-8]!
    4f44:	str	lr, [sp, #4]
    4f48:	add	fp, sp, #4
    4f4c:	sub	sp, sp, #16
    4f50:	str	r0, [fp, #-16]
    4f54:	str	r1, [fp, #-20]	; 0xffffffec
    4f58:	ldr	r3, [fp, #-16]
    4f5c:	cmp	r3, #0
    4f60:	beq	4f98 <coda_cursor_read_uint16+0x58>
    4f64:	ldr	r3, [fp, #-16]
    4f68:	ldr	r3, [r3, #4]
    4f6c:	cmp	r3, #0
    4f70:	ble	4f98 <coda_cursor_read_uint16+0x58>
    4f74:	ldr	r3, [fp, #-16]
    4f78:	ldr	r3, [r3, #4]
    4f7c:	sub	r3, r3, #1
    4f80:	ldr	r2, [fp, #-16]
    4f84:	lsl	r3, r3, #4
    4f88:	add	r3, r2, r3
    4f8c:	ldr	r3, [r3, #8]
    4f90:	cmp	r3, #0
    4f94:	bne	4fbc <coda_cursor_read_uint16+0x7c>
    4f98:	movw	r3, #1939	; 0x793
    4f9c:	movw	r2, #0
    4fa0:	movt	r2, #0
    4fa4:	movw	r1, #0
    4fa8:	movt	r1, #0
    4fac:	mvn	r0, #99	; 0x63
    4fb0:	bl	0 <coda_set_error>
    4fb4:	mvn	r3, #0
    4fb8:	b	50b4 <coda_cursor_read_uint16+0x174>
    4fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
    4fc0:	cmp	r3, #0
    4fc4:	bne	4fec <coda_cursor_read_uint16+0xac>
    4fc8:	movw	r3, #1944	; 0x798
    4fcc:	movw	r2, #0
    4fd0:	movt	r2, #0
    4fd4:	movw	r1, #0
    4fd8:	movt	r1, #0
    4fdc:	mvn	r0, #99	; 0x63
    4fe0:	bl	0 <coda_set_error>
    4fe4:	mvn	r3, #0
    4fe8:	b	50b4 <coda_cursor_read_uint16+0x174>
    4fec:	sub	r3, fp, #8
    4ff0:	mov	r1, r3
    4ff4:	ldr	r0, [fp, #-16]
    4ff8:	bl	eb8 <get_read_type>
    4ffc:	mov	r3, r0
    5000:	cmp	r3, #0
    5004:	beq	5010 <coda_cursor_read_uint16+0xd0>
    5008:	mvn	r3, #0
    500c:	b	50b4 <coda_cursor_read_uint16+0x174>
    5010:	ldr	r3, [fp, #-8]
    5014:	cmp	r3, #1
    5018:	beq	5028 <coda_cursor_read_uint16+0xe8>
    501c:	cmp	r3, #3
    5020:	beq	5060 <coda_cursor_read_uint16+0x120>
    5024:	b	5080 <coda_cursor_read_uint16+0x140>
    5028:	sub	r3, fp, #9
    502c:	mov	r1, r3
    5030:	ldr	r0, [fp, #-16]
    5034:	bl	1b24 <read_uint8>
    5038:	mov	r3, r0
    503c:	cmp	r3, #0
    5040:	beq	504c <coda_cursor_read_uint16+0x10c>
    5044:	mvn	r3, #0
    5048:	b	50b4 <coda_cursor_read_uint16+0x174>
    504c:	ldrb	r3, [fp, #-9]
    5050:	uxth	r2, r3
    5054:	ldr	r3, [fp, #-20]	; 0xffffffec
    5058:	strh	r2, [r3]
    505c:	b	50b0 <coda_cursor_read_uint16+0x170>
    5060:	ldr	r1, [fp, #-20]	; 0xffffffec
    5064:	ldr	r0, [fp, #-16]
    5068:	bl	1d9c <read_uint16>
    506c:	mov	r3, r0
    5070:	cmp	r3, #0
    5074:	beq	50ac <coda_cursor_read_uint16+0x16c>
    5078:	mvn	r3, #0
    507c:	b	50b4 <coda_cursor_read_uint16+0x174>
    5080:	ldr	r3, [fp, #-8]
    5084:	mov	r0, r3
    5088:	bl	0 <coda_type_get_native_type_name>
    508c:	mov	r3, r0
    5090:	mov	r2, r3
    5094:	movw	r1, #0
    5098:	movt	r1, #0
    509c:	mvn	r0, #104	; 0x68
    50a0:	bl	0 <coda_set_error>
    50a4:	mvn	r3, #0
    50a8:	b	50b4 <coda_cursor_read_uint16+0x174>
    50ac:	nop	{0}
    50b0:	mov	r3, #0
    50b4:	mov	r0, r3
    50b8:	sub	sp, fp, #4
    50bc:	ldr	fp, [sp]
    50c0:	add	sp, sp, #4
    50c4:	pop	{pc}		; (ldr pc, [sp], #4)

000050c8 <coda_cursor_read_int32>:
    50c8:	str	fp, [sp, #-8]!
    50cc:	str	lr, [sp, #4]
    50d0:	add	fp, sp, #4
    50d4:	sub	sp, sp, #24
    50d8:	str	r0, [fp, #-24]	; 0xffffffe8
    50dc:	str	r1, [fp, #-28]	; 0xffffffe4
    50e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    50e4:	cmp	r3, #0
    50e8:	beq	5120 <coda_cursor_read_int32+0x58>
    50ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    50f0:	ldr	r3, [r3, #4]
    50f4:	cmp	r3, #0
    50f8:	ble	5120 <coda_cursor_read_int32+0x58>
    50fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5100:	ldr	r3, [r3, #4]
    5104:	sub	r3, r3, #1
    5108:	ldr	r2, [fp, #-24]	; 0xffffffe8
    510c:	lsl	r3, r3, #4
    5110:	add	r3, r2, r3
    5114:	ldr	r3, [r3, #8]
    5118:	cmp	r3, #0
    511c:	bne	5144 <coda_cursor_read_int32+0x7c>
    5120:	movw	r3, #2001	; 0x7d1
    5124:	movw	r2, #0
    5128:	movt	r2, #0
    512c:	movw	r1, #0
    5130:	movt	r1, #0
    5134:	mvn	r0, #99	; 0x63
    5138:	bl	0 <coda_set_error>
    513c:	mvn	r3, #0
    5140:	b	52f0 <coda_cursor_read_int32+0x228>
    5144:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5148:	cmp	r3, #0
    514c:	bne	5174 <coda_cursor_read_int32+0xac>
    5150:	movw	r3, #2006	; 0x7d6
    5154:	movw	r2, #0
    5158:	movt	r2, #0
    515c:	movw	r1, #0
    5160:	movt	r1, #0
    5164:	mvn	r0, #99	; 0x63
    5168:	bl	0 <coda_set_error>
    516c:	mvn	r3, #0
    5170:	b	52f0 <coda_cursor_read_int32+0x228>
    5174:	sub	r3, fp, #8
    5178:	mov	r1, r3
    517c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5180:	bl	eb8 <get_read_type>
    5184:	mov	r3, r0
    5188:	cmp	r3, #0
    518c:	beq	5198 <coda_cursor_read_int32+0xd0>
    5190:	mvn	r3, #0
    5194:	b	52f0 <coda_cursor_read_int32+0x228>
    5198:	ldr	r3, [fp, #-8]
    519c:	cmp	r3, #4
    51a0:	ldrls	pc, [pc, r3, lsl #2]
    51a4:	b	52bc <coda_cursor_read_int32+0x1f4>
    51a8:	.word	0x000051bc
    51ac:	.word	0x000051f4
    51b0:	.word	0x0000522c
    51b4:	.word	0x00005264
    51b8:	.word	0x0000529c
    51bc:	sub	r3, fp, #9
    51c0:	mov	r1, r3
    51c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    51c8:	bl	19e0 <read_int8>
    51cc:	mov	r3, r0
    51d0:	cmp	r3, #0
    51d4:	beq	51e0 <coda_cursor_read_int32+0x118>
    51d8:	mvn	r3, #0
    51dc:	b	52f0 <coda_cursor_read_int32+0x228>
    51e0:	ldrsb	r3, [fp, #-9]
    51e4:	mov	r2, r3
    51e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    51ec:	str	r2, [r3]
    51f0:	b	52ec <coda_cursor_read_int32+0x224>
    51f4:	sub	r3, fp, #10
    51f8:	mov	r1, r3
    51fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5200:	bl	1b24 <read_uint8>
    5204:	mov	r3, r0
    5208:	cmp	r3, #0
    520c:	beq	5218 <coda_cursor_read_int32+0x150>
    5210:	mvn	r3, #0
    5214:	b	52f0 <coda_cursor_read_int32+0x228>
    5218:	ldrb	r3, [fp, #-10]
    521c:	mov	r2, r3
    5220:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5224:	str	r2, [r3]
    5228:	b	52ec <coda_cursor_read_int32+0x224>
    522c:	sub	r3, fp, #12
    5230:	mov	r1, r3
    5234:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5238:	bl	1c50 <read_int16>
    523c:	mov	r3, r0
    5240:	cmp	r3, #0
    5244:	beq	5250 <coda_cursor_read_int32+0x188>
    5248:	mvn	r3, #0
    524c:	b	52f0 <coda_cursor_read_int32+0x228>
    5250:	ldrsh	r3, [fp, #-12]
    5254:	mov	r2, r3
    5258:	ldr	r3, [fp, #-28]	; 0xffffffe4
    525c:	str	r2, [r3]
    5260:	b	52ec <coda_cursor_read_int32+0x224>
    5264:	sub	r3, fp, #14
    5268:	mov	r1, r3
    526c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5270:	bl	1d9c <read_uint16>
    5274:	mov	r3, r0
    5278:	cmp	r3, #0
    527c:	beq	5288 <coda_cursor_read_int32+0x1c0>
    5280:	mvn	r3, #0
    5284:	b	52f0 <coda_cursor_read_int32+0x228>
    5288:	ldrh	r3, [fp, #-14]
    528c:	mov	r2, r3
    5290:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5294:	str	r2, [r3]
    5298:	b	52ec <coda_cursor_read_int32+0x224>
    529c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    52a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    52a4:	bl	1ec8 <read_int32>
    52a8:	mov	r3, r0
    52ac:	cmp	r3, #0
    52b0:	beq	52e8 <coda_cursor_read_int32+0x220>
    52b4:	mvn	r3, #0
    52b8:	b	52f0 <coda_cursor_read_int32+0x228>
    52bc:	ldr	r3, [fp, #-8]
    52c0:	mov	r0, r3
    52c4:	bl	0 <coda_type_get_native_type_name>
    52c8:	mov	r3, r0
    52cc:	mov	r2, r3
    52d0:	movw	r1, #0
    52d4:	movt	r1, #0
    52d8:	mvn	r0, #104	; 0x68
    52dc:	bl	0 <coda_set_error>
    52e0:	mvn	r3, #0
    52e4:	b	52f0 <coda_cursor_read_int32+0x228>
    52e8:	nop	{0}
    52ec:	mov	r3, #0
    52f0:	mov	r0, r3
    52f4:	sub	sp, fp, #4
    52f8:	ldr	fp, [sp]
    52fc:	add	sp, sp, #4
    5300:	pop	{pc}		; (ldr pc, [sp], #4)

00005304 <coda_cursor_read_uint32>:
    5304:	str	fp, [sp, #-8]!
    5308:	str	lr, [sp, #4]
    530c:	add	fp, sp, #4
    5310:	sub	sp, sp, #16
    5314:	str	r0, [fp, #-16]
    5318:	str	r1, [fp, #-20]	; 0xffffffec
    531c:	ldr	r3, [fp, #-16]
    5320:	cmp	r3, #0
    5324:	beq	535c <coda_cursor_read_uint32+0x58>
    5328:	ldr	r3, [fp, #-16]
    532c:	ldr	r3, [r3, #4]
    5330:	cmp	r3, #0
    5334:	ble	535c <coda_cursor_read_uint32+0x58>
    5338:	ldr	r3, [fp, #-16]
    533c:	ldr	r3, [r3, #4]
    5340:	sub	r3, r3, #1
    5344:	ldr	r2, [fp, #-16]
    5348:	lsl	r3, r3, #4
    534c:	add	r3, r2, r3
    5350:	ldr	r3, [r3, #8]
    5354:	cmp	r3, #0
    5358:	bne	5380 <coda_cursor_read_uint32+0x7c>
    535c:	movw	r3, #2094	; 0x82e
    5360:	movw	r2, #0
    5364:	movt	r2, #0
    5368:	movw	r1, #0
    536c:	movt	r1, #0
    5370:	mvn	r0, #99	; 0x63
    5374:	bl	0 <coda_set_error>
    5378:	mvn	r3, #0
    537c:	b	54b4 <coda_cursor_read_uint32+0x1b0>
    5380:	ldr	r3, [fp, #-20]	; 0xffffffec
    5384:	cmp	r3, #0
    5388:	bne	53b0 <coda_cursor_read_uint32+0xac>
    538c:	movw	r3, #2099	; 0x833
    5390:	movw	r2, #0
    5394:	movt	r2, #0
    5398:	movw	r1, #0
    539c:	movt	r1, #0
    53a0:	mvn	r0, #99	; 0x63
    53a4:	bl	0 <coda_set_error>
    53a8:	mvn	r3, #0
    53ac:	b	54b4 <coda_cursor_read_uint32+0x1b0>
    53b0:	sub	r3, fp, #8
    53b4:	mov	r1, r3
    53b8:	ldr	r0, [fp, #-16]
    53bc:	bl	eb8 <get_read_type>
    53c0:	mov	r3, r0
    53c4:	cmp	r3, #0
    53c8:	beq	53d4 <coda_cursor_read_uint32+0xd0>
    53cc:	mvn	r3, #0
    53d0:	b	54b4 <coda_cursor_read_uint32+0x1b0>
    53d4:	ldr	r3, [fp, #-8]
    53d8:	cmp	r3, #3
    53dc:	beq	5428 <coda_cursor_read_uint32+0x124>
    53e0:	cmp	r3, #5
    53e4:	beq	5460 <coda_cursor_read_uint32+0x15c>
    53e8:	cmp	r3, #1
    53ec:	bne	5480 <coda_cursor_read_uint32+0x17c>
    53f0:	sub	r3, fp, #9
    53f4:	mov	r1, r3
    53f8:	ldr	r0, [fp, #-16]
    53fc:	bl	1b24 <read_uint8>
    5400:	mov	r3, r0
    5404:	cmp	r3, #0
    5408:	beq	5414 <coda_cursor_read_uint32+0x110>
    540c:	mvn	r3, #0
    5410:	b	54b4 <coda_cursor_read_uint32+0x1b0>
    5414:	ldrb	r3, [fp, #-9]
    5418:	mov	r2, r3
    541c:	ldr	r3, [fp, #-20]	; 0xffffffec
    5420:	str	r2, [r3]
    5424:	b	54b0 <coda_cursor_read_uint32+0x1ac>
    5428:	sub	r3, fp, #12
    542c:	mov	r1, r3
    5430:	ldr	r0, [fp, #-16]
    5434:	bl	1d9c <read_uint16>
    5438:	mov	r3, r0
    543c:	cmp	r3, #0
    5440:	beq	544c <coda_cursor_read_uint32+0x148>
    5444:	mvn	r3, #0
    5448:	b	54b4 <coda_cursor_read_uint32+0x1b0>
    544c:	ldrh	r3, [fp, #-12]
    5450:	mov	r2, r3
    5454:	ldr	r3, [fp, #-20]	; 0xffffffec
    5458:	str	r2, [r3]
    545c:	b	54b0 <coda_cursor_read_uint32+0x1ac>
    5460:	ldr	r1, [fp, #-20]	; 0xffffffec
    5464:	ldr	r0, [fp, #-16]
    5468:	bl	2014 <read_uint32>
    546c:	mov	r3, r0
    5470:	cmp	r3, #0
    5474:	beq	54ac <coda_cursor_read_uint32+0x1a8>
    5478:	mvn	r3, #0
    547c:	b	54b4 <coda_cursor_read_uint32+0x1b0>
    5480:	ldr	r3, [fp, #-8]
    5484:	mov	r0, r3
    5488:	bl	0 <coda_type_get_native_type_name>
    548c:	mov	r3, r0
    5490:	mov	r2, r3
    5494:	movw	r1, #0
    5498:	movt	r1, #0
    549c:	mvn	r0, #104	; 0x68
    54a0:	bl	0 <coda_set_error>
    54a4:	mvn	r3, #0
    54a8:	b	54b4 <coda_cursor_read_uint32+0x1b0>
    54ac:	nop	{0}
    54b0:	mov	r3, #0
    54b4:	mov	r0, r3
    54b8:	sub	sp, fp, #4
    54bc:	ldr	fp, [sp]
    54c0:	add	sp, sp, #4
    54c4:	pop	{pc}		; (ldr pc, [sp], #4)

000054c8 <coda_cursor_read_int64>:
    54c8:	str	fp, [sp, #-8]!
    54cc:	str	lr, [sp, #4]
    54d0:	add	fp, sp, #4
    54d4:	sub	sp, sp, #32
    54d8:	str	r0, [fp, #-32]	; 0xffffffe0
    54dc:	str	r1, [fp, #-36]	; 0xffffffdc
    54e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    54e4:	cmp	r3, #0
    54e8:	beq	5520 <coda_cursor_read_int64+0x58>
    54ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
    54f0:	ldr	r3, [r3, #4]
    54f4:	cmp	r3, #0
    54f8:	ble	5520 <coda_cursor_read_int64+0x58>
    54fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5500:	ldr	r3, [r3, #4]
    5504:	sub	r3, r3, #1
    5508:	ldr	r2, [fp, #-32]	; 0xffffffe0
    550c:	lsl	r3, r3, #4
    5510:	add	r3, r2, r3
    5514:	ldr	r3, [r3, #8]
    5518:	cmp	r3, #0
    551c:	bne	5544 <coda_cursor_read_int64+0x7c>
    5520:	movw	r3, #2169	; 0x879
    5524:	movw	r2, #0
    5528:	movt	r2, #0
    552c:	movw	r1, #0
    5530:	movt	r1, #0
    5534:	mvn	r0, #99	; 0x63
    5538:	bl	0 <coda_set_error>
    553c:	mvn	r3, #0
    5540:	b	5780 <coda_cursor_read_int64+0x2b8>
    5544:	ldr	r3, [fp, #-36]	; 0xffffffdc
    5548:	cmp	r3, #0
    554c:	bne	5574 <coda_cursor_read_int64+0xac>
    5550:	movw	r3, #2174	; 0x87e
    5554:	movw	r2, #0
    5558:	movt	r2, #0
    555c:	movw	r1, #0
    5560:	movt	r1, #0
    5564:	mvn	r0, #99	; 0x63
    5568:	bl	0 <coda_set_error>
    556c:	mvn	r3, #0
    5570:	b	5780 <coda_cursor_read_int64+0x2b8>
    5574:	sub	r3, fp, #8
    5578:	mov	r1, r3
    557c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5580:	bl	eb8 <get_read_type>
    5584:	mov	r3, r0
    5588:	cmp	r3, #0
    558c:	beq	5598 <coda_cursor_read_int64+0xd0>
    5590:	mvn	r3, #0
    5594:	b	5780 <coda_cursor_read_int64+0x2b8>
    5598:	ldr	r3, [fp, #-8]
    559c:	cmp	r3, #6
    55a0:	ldrls	pc, [pc, r3, lsl #2]
    55a4:	b	574c <coda_cursor_read_int64+0x284>
    55a8:	.word	0x000055c4
    55ac:	.word	0x00005600
    55b0:	.word	0x0000563c
    55b4:	.word	0x00005678
    55b8:	.word	0x000056b4
    55bc:	.word	0x000056f0
    55c0:	.word	0x0000572c
    55c4:	sub	r3, fp, #9
    55c8:	mov	r1, r3
    55cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    55d0:	bl	19e0 <read_int8>
    55d4:	mov	r3, r0
    55d8:	cmp	r3, #0
    55dc:	beq	55e8 <coda_cursor_read_int64+0x120>
    55e0:	mvn	r3, #0
    55e4:	b	5780 <coda_cursor_read_int64+0x2b8>
    55e8:	ldrsb	r3, [fp, #-9]
    55ec:	sxtb	r2, r3
    55f0:	asr	r3, r2, #31
    55f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    55f8:	strd	r2, [r1]
    55fc:	b	577c <coda_cursor_read_int64+0x2b4>
    5600:	sub	r3, fp, #10
    5604:	mov	r1, r3
    5608:	ldr	r0, [fp, #-32]	; 0xffffffe0
    560c:	bl	1b24 <read_uint8>
    5610:	mov	r3, r0
    5614:	cmp	r3, #0
    5618:	beq	5624 <coda_cursor_read_int64+0x15c>
    561c:	mvn	r3, #0
    5620:	b	5780 <coda_cursor_read_int64+0x2b8>
    5624:	ldrb	r3, [fp, #-10]
    5628:	uxtb	r2, r3
    562c:	mov	r3, #0
    5630:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5634:	strd	r2, [r1]
    5638:	b	577c <coda_cursor_read_int64+0x2b4>
    563c:	sub	r3, fp, #12
    5640:	mov	r1, r3
    5644:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5648:	bl	1c50 <read_int16>
    564c:	mov	r3, r0
    5650:	cmp	r3, #0
    5654:	beq	5660 <coda_cursor_read_int64+0x198>
    5658:	mvn	r3, #0
    565c:	b	5780 <coda_cursor_read_int64+0x2b8>
    5660:	ldrsh	r3, [fp, #-12]
    5664:	sxth	r2, r3
    5668:	asr	r3, r2, #31
    566c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5670:	strd	r2, [r1]
    5674:	b	577c <coda_cursor_read_int64+0x2b4>
    5678:	sub	r3, fp, #14
    567c:	mov	r1, r3
    5680:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5684:	bl	1d9c <read_uint16>
    5688:	mov	r3, r0
    568c:	cmp	r3, #0
    5690:	beq	569c <coda_cursor_read_int64+0x1d4>
    5694:	mvn	r3, #0
    5698:	b	5780 <coda_cursor_read_int64+0x2b8>
    569c:	ldrh	r3, [fp, #-14]
    56a0:	uxth	r2, r3
    56a4:	mov	r3, #0
    56a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    56ac:	strd	r2, [r1]
    56b0:	b	577c <coda_cursor_read_int64+0x2b4>
    56b4:	sub	r3, fp, #20
    56b8:	mov	r1, r3
    56bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    56c0:	bl	1ec8 <read_int32>
    56c4:	mov	r3, r0
    56c8:	cmp	r3, #0
    56cc:	beq	56d8 <coda_cursor_read_int64+0x210>
    56d0:	mvn	r3, #0
    56d4:	b	5780 <coda_cursor_read_int64+0x2b8>
    56d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    56dc:	mov	r2, r3
    56e0:	asr	r3, r2, #31
    56e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    56e8:	strd	r2, [r1]
    56ec:	b	577c <coda_cursor_read_int64+0x2b4>
    56f0:	sub	r3, fp, #24
    56f4:	mov	r1, r3
    56f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    56fc:	bl	2014 <read_uint32>
    5700:	mov	r3, r0
    5704:	cmp	r3, #0
    5708:	beq	5714 <coda_cursor_read_int64+0x24c>
    570c:	mvn	r3, #0
    5710:	b	5780 <coda_cursor_read_int64+0x2b8>
    5714:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5718:	mov	r2, r3
    571c:	mov	r3, #0
    5720:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5724:	strd	r2, [r1]
    5728:	b	577c <coda_cursor_read_int64+0x2b4>
    572c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5730:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5734:	bl	2140 <read_int64>
    5738:	mov	r3, r0
    573c:	cmp	r3, #0
    5740:	beq	5778 <coda_cursor_read_int64+0x2b0>
    5744:	mvn	r3, #0
    5748:	b	5780 <coda_cursor_read_int64+0x2b8>
    574c:	ldr	r3, [fp, #-8]
    5750:	mov	r0, r3
    5754:	bl	0 <coda_type_get_native_type_name>
    5758:	mov	r3, r0
    575c:	mov	r2, r3
    5760:	movw	r1, #0
    5764:	movt	r1, #0
    5768:	mvn	r0, #104	; 0x68
    576c:	bl	0 <coda_set_error>
    5770:	mvn	r3, #0
    5774:	b	5780 <coda_cursor_read_int64+0x2b8>
    5778:	nop	{0}
    577c:	mov	r3, #0
    5780:	mov	r0, r3
    5784:	sub	sp, fp, #4
    5788:	ldr	fp, [sp]
    578c:	add	sp, sp, #4
    5790:	pop	{pc}		; (ldr pc, [sp], #4)

00005794 <coda_cursor_read_uint64>:
    5794:	str	fp, [sp, #-8]!
    5798:	str	lr, [sp, #4]
    579c:	add	fp, sp, #4
    57a0:	sub	sp, sp, #24
    57a4:	str	r0, [fp, #-24]	; 0xffffffe8
    57a8:	str	r1, [fp, #-28]	; 0xffffffe4
    57ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    57b0:	cmp	r3, #0
    57b4:	beq	57ec <coda_cursor_read_uint64+0x58>
    57b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    57bc:	ldr	r3, [r3, #4]
    57c0:	cmp	r3, #0
    57c4:	ble	57ec <coda_cursor_read_uint64+0x58>
    57c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    57cc:	ldr	r3, [r3, #4]
    57d0:	sub	r3, r3, #1
    57d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    57d8:	lsl	r3, r3, #4
    57dc:	add	r3, r2, r3
    57e0:	ldr	r3, [r3, #8]
    57e4:	cmp	r3, #0
    57e8:	bne	5810 <coda_cursor_read_uint64+0x7c>
    57ec:	movw	r3, #2285	; 0x8ed
    57f0:	movw	r2, #0
    57f4:	movt	r2, #0
    57f8:	movw	r1, #0
    57fc:	movt	r1, #0
    5800:	mvn	r0, #99	; 0x63
    5804:	bl	0 <coda_set_error>
    5808:	mvn	r3, #0
    580c:	b	599c <coda_cursor_read_uint64+0x208>
    5810:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5814:	cmp	r3, #0
    5818:	bne	5840 <coda_cursor_read_uint64+0xac>
    581c:	movw	r3, #2290	; 0x8f2
    5820:	movw	r2, #0
    5824:	movt	r2, #0
    5828:	movw	r1, #0
    582c:	movt	r1, #0
    5830:	mvn	r0, #99	; 0x63
    5834:	bl	0 <coda_set_error>
    5838:	mvn	r3, #0
    583c:	b	599c <coda_cursor_read_uint64+0x208>
    5840:	sub	r3, fp, #8
    5844:	mov	r1, r3
    5848:	ldr	r0, [fp, #-24]	; 0xffffffe8
    584c:	bl	eb8 <get_read_type>
    5850:	mov	r3, r0
    5854:	cmp	r3, #0
    5858:	beq	5864 <coda_cursor_read_uint64+0xd0>
    585c:	mvn	r3, #0
    5860:	b	599c <coda_cursor_read_uint64+0x208>
    5864:	ldr	r3, [fp, #-8]
    5868:	sub	r3, r3, #1
    586c:	cmp	r3, #6
    5870:	ldrls	pc, [pc, r3, lsl #2]
    5874:	b	5968 <coda_cursor_read_uint64+0x1d4>
    5878:	.word	0x00005894
    587c:	.word	0x00005968
    5880:	.word	0x000058d0
    5884:	.word	0x00005968
    5888:	.word	0x0000590c
    588c:	.word	0x00005968
    5890:	.word	0x00005948
    5894:	sub	r3, fp, #9
    5898:	mov	r1, r3
    589c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    58a0:	bl	1b24 <read_uint8>
    58a4:	mov	r3, r0
    58a8:	cmp	r3, #0
    58ac:	beq	58b8 <coda_cursor_read_uint64+0x124>
    58b0:	mvn	r3, #0
    58b4:	b	599c <coda_cursor_read_uint64+0x208>
    58b8:	ldrb	r3, [fp, #-9]
    58bc:	uxtb	r2, r3
    58c0:	mov	r3, #0
    58c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    58c8:	strd	r2, [r1]
    58cc:	b	5998 <coda_cursor_read_uint64+0x204>
    58d0:	sub	r3, fp, #12
    58d4:	mov	r1, r3
    58d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    58dc:	bl	1d9c <read_uint16>
    58e0:	mov	r3, r0
    58e4:	cmp	r3, #0
    58e8:	beq	58f4 <coda_cursor_read_uint64+0x160>
    58ec:	mvn	r3, #0
    58f0:	b	599c <coda_cursor_read_uint64+0x208>
    58f4:	ldrh	r3, [fp, #-12]
    58f8:	uxth	r2, r3
    58fc:	mov	r3, #0
    5900:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5904:	strd	r2, [r1]
    5908:	b	5998 <coda_cursor_read_uint64+0x204>
    590c:	sub	r3, fp, #16
    5910:	mov	r1, r3
    5914:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5918:	bl	2014 <read_uint32>
    591c:	mov	r3, r0
    5920:	cmp	r3, #0
    5924:	beq	5930 <coda_cursor_read_uint64+0x19c>
    5928:	mvn	r3, #0
    592c:	b	599c <coda_cursor_read_uint64+0x208>
    5930:	ldr	r3, [fp, #-16]
    5934:	mov	r2, r3
    5938:	mov	r3, #0
    593c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5940:	strd	r2, [r1]
    5944:	b	5998 <coda_cursor_read_uint64+0x204>
    5948:	ldr	r1, [fp, #-28]	; 0xffffffe4
    594c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5950:	bl	226c <read_uint64>
    5954:	mov	r3, r0
    5958:	cmp	r3, #0
    595c:	beq	5994 <coda_cursor_read_uint64+0x200>
    5960:	mvn	r3, #0
    5964:	b	599c <coda_cursor_read_uint64+0x208>
    5968:	ldr	r3, [fp, #-8]
    596c:	mov	r0, r3
    5970:	bl	0 <coda_type_get_native_type_name>
    5974:	mov	r3, r0
    5978:	mov	r2, r3
    597c:	movw	r1, #0
    5980:	movt	r1, #0
    5984:	mvn	r0, #104	; 0x68
    5988:	bl	0 <coda_set_error>
    598c:	mvn	r3, #0
    5990:	b	599c <coda_cursor_read_uint64+0x208>
    5994:	nop	{0}
    5998:	mov	r3, #0
    599c:	mov	r0, r3
    59a0:	sub	sp, fp, #4
    59a4:	ldr	fp, [sp]
    59a8:	add	sp, sp, #4
    59ac:	pop	{pc}		; (ldr pc, [sp], #4)

000059b0 <coda_cursor_read_float>:
    59b0:	str	fp, [sp, #-8]!
    59b4:	str	lr, [sp, #4]
    59b8:	add	fp, sp, #4
    59bc:	sub	sp, sp, #64	; 0x40
    59c0:	str	r0, [fp, #-64]	; 0xffffffc0
    59c4:	str	r1, [fp, #-68]	; 0xffffffbc
    59c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    59cc:	cmp	r3, #0
    59d0:	beq	5a08 <coda_cursor_read_float+0x58>
    59d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    59d8:	ldr	r3, [r3, #4]
    59dc:	cmp	r3, #0
    59e0:	ble	5a08 <coda_cursor_read_float+0x58>
    59e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    59e8:	ldr	r3, [r3, #4]
    59ec:	sub	r3, r3, #1
    59f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    59f4:	lsl	r3, r3, #4
    59f8:	add	r3, r2, r3
    59fc:	ldr	r3, [r3, #8]
    5a00:	cmp	r3, #0
    5a04:	bne	5a2c <coda_cursor_read_float+0x7c>
    5a08:	movw	r3, #2375	; 0x947
    5a0c:	movw	r2, #0
    5a10:	movt	r2, #0
    5a14:	movw	r1, #0
    5a18:	movt	r1, #0
    5a1c:	mvn	r0, #99	; 0x63
    5a20:	bl	0 <coda_set_error>
    5a24:	mvn	r3, #0
    5a28:	b	5d80 <coda_cursor_read_float+0x3d0>
    5a2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5a30:	cmp	r3, #0
    5a34:	bne	5a5c <coda_cursor_read_float+0xac>
    5a38:	movw	r3, #2380	; 0x94c
    5a3c:	movw	r2, #0
    5a40:	movt	r2, #0
    5a44:	movw	r1, #0
    5a48:	movt	r1, #0
    5a4c:	mvn	r0, #99	; 0x63
    5a50:	bl	0 <coda_set_error>
    5a54:	mvn	r3, #0
    5a58:	b	5d80 <coda_cursor_read_float+0x3d0>
    5a5c:	sub	r2, fp, #12
    5a60:	sub	r3, fp, #8
    5a64:	mov	r1, r3
    5a68:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5a6c:	bl	fb8 <get_unconverted_read_type>
    5a70:	mov	r3, r0
    5a74:	cmp	r3, #0
    5a78:	beq	5a84 <coda_cursor_read_float+0xd4>
    5a7c:	mvn	r3, #0
    5a80:	b	5d80 <coda_cursor_read_float+0x3d0>
    5a84:	ldr	r3, [fp, #-12]
    5a88:	cmp	r3, #0
    5a8c:	beq	5acc <coda_cursor_read_float+0x11c>
    5a90:	sub	r3, fp, #20
    5a94:	mov	r1, r3
    5a98:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5a9c:	bl	5d94 <coda_cursor_read_double>
    5aa0:	mov	r3, r0
    5aa4:	cmp	r3, #0
    5aa8:	beq	5ab4 <coda_cursor_read_float+0x104>
    5aac:	mvn	r3, #0
    5ab0:	b	5d80 <coda_cursor_read_float+0x3d0>
    5ab4:	vldr	d7, [fp, #-20]	; 0xffffffec
    5ab8:	vcvt.f32.f64	s15, d7
    5abc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5ac0:	vstr	s15, [r3]
    5ac4:	mov	r3, #0
    5ac8:	b	5d80 <coda_cursor_read_float+0x3d0>
    5acc:	ldr	r3, [fp, #-8]
    5ad0:	cmp	r3, #9
    5ad4:	ldrls	pc, [pc, r3, lsl #2]
    5ad8:	b	5d4c <coda_cursor_read_float+0x39c>
    5adc:	.word	0x00005b04
    5ae0:	.word	0x00005b40
    5ae4:	.word	0x00005b7c
    5ae8:	.word	0x00005bb8
    5aec:	.word	0x00005bf4
    5af0:	.word	0x00005c30
    5af4:	.word	0x00005c6c
    5af8:	.word	0x00005cb0
    5afc:	.word	0x00005cf4
    5b00:	.word	0x00005d14
    5b04:	sub	r3, fp, #21
    5b08:	mov	r1, r3
    5b0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5b10:	bl	19e0 <read_int8>
    5b14:	mov	r3, r0
    5b18:	cmp	r3, #0
    5b1c:	beq	5b28 <coda_cursor_read_float+0x178>
    5b20:	mvn	r3, #0
    5b24:	b	5d80 <coda_cursor_read_float+0x3d0>
    5b28:	ldrsb	r3, [fp, #-21]	; 0xffffffeb
    5b2c:	vmov	s15, r3
    5b30:	vcvt.f32.s32	s15, s15
    5b34:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5b38:	vstr	s15, [r3]
    5b3c:	b	5d7c <coda_cursor_read_float+0x3cc>
    5b40:	sub	r3, fp, #22
    5b44:	mov	r1, r3
    5b48:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5b4c:	bl	1b24 <read_uint8>
    5b50:	mov	r3, r0
    5b54:	cmp	r3, #0
    5b58:	beq	5b64 <coda_cursor_read_float+0x1b4>
    5b5c:	mvn	r3, #0
    5b60:	b	5d80 <coda_cursor_read_float+0x3d0>
    5b64:	ldrb	r3, [fp, #-22]	; 0xffffffea
    5b68:	vmov	s15, r3
    5b6c:	vcvt.f32.u32	s15, s15
    5b70:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5b74:	vstr	s15, [r3]
    5b78:	b	5d7c <coda_cursor_read_float+0x3cc>
    5b7c:	sub	r3, fp, #24
    5b80:	mov	r1, r3
    5b84:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5b88:	bl	1c50 <read_int16>
    5b8c:	mov	r3, r0
    5b90:	cmp	r3, #0
    5b94:	beq	5ba0 <coda_cursor_read_float+0x1f0>
    5b98:	mvn	r3, #0
    5b9c:	b	5d80 <coda_cursor_read_float+0x3d0>
    5ba0:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
    5ba4:	vmov	s15, r3
    5ba8:	vcvt.f32.s32	s15, s15
    5bac:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5bb0:	vstr	s15, [r3]
    5bb4:	b	5d7c <coda_cursor_read_float+0x3cc>
    5bb8:	sub	r3, fp, #26
    5bbc:	mov	r1, r3
    5bc0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5bc4:	bl	1d9c <read_uint16>
    5bc8:	mov	r3, r0
    5bcc:	cmp	r3, #0
    5bd0:	beq	5bdc <coda_cursor_read_float+0x22c>
    5bd4:	mvn	r3, #0
    5bd8:	b	5d80 <coda_cursor_read_float+0x3d0>
    5bdc:	ldrh	r3, [fp, #-26]	; 0xffffffe6
    5be0:	vmov	s15, r3
    5be4:	vcvt.f32.u32	s15, s15
    5be8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5bec:	vstr	s15, [r3]
    5bf0:	b	5d7c <coda_cursor_read_float+0x3cc>
    5bf4:	sub	r3, fp, #32
    5bf8:	mov	r1, r3
    5bfc:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5c00:	bl	1ec8 <read_int32>
    5c04:	mov	r3, r0
    5c08:	cmp	r3, #0
    5c0c:	beq	5c18 <coda_cursor_read_float+0x268>
    5c10:	mvn	r3, #0
    5c14:	b	5d80 <coda_cursor_read_float+0x3d0>
    5c18:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5c1c:	vmov	s15, r3
    5c20:	vcvt.f32.s32	s15, s15
    5c24:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5c28:	vstr	s15, [r3]
    5c2c:	b	5d7c <coda_cursor_read_float+0x3cc>
    5c30:	sub	r3, fp, #36	; 0x24
    5c34:	mov	r1, r3
    5c38:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5c3c:	bl	2014 <read_uint32>
    5c40:	mov	r3, r0
    5c44:	cmp	r3, #0
    5c48:	beq	5c54 <coda_cursor_read_float+0x2a4>
    5c4c:	mvn	r3, #0
    5c50:	b	5d80 <coda_cursor_read_float+0x3d0>
    5c54:	ldr	r3, [fp, #-36]	; 0xffffffdc
    5c58:	vmov	s15, r3
    5c5c:	vcvt.f32.u32	s15, s15
    5c60:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5c64:	vstr	s15, [r3]
    5c68:	b	5d7c <coda_cursor_read_float+0x3cc>
    5c6c:	sub	r3, fp, #44	; 0x2c
    5c70:	mov	r1, r3
    5c74:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5c78:	bl	2140 <read_int64>
    5c7c:	mov	r3, r0
    5c80:	cmp	r3, #0
    5c84:	beq	5c90 <coda_cursor_read_float+0x2e0>
    5c88:	mvn	r3, #0
    5c8c:	b	5d80 <coda_cursor_read_float+0x3d0>
    5c90:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    5c94:	mov	r0, r2
    5c98:	mov	r1, r3
    5c9c:	bl	0 <__aeabi_l2f>
    5ca0:	mov	r2, r0
    5ca4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5ca8:	str	r2, [r3]
    5cac:	b	5d7c <coda_cursor_read_float+0x3cc>
    5cb0:	sub	r3, fp, #52	; 0x34
    5cb4:	mov	r1, r3
    5cb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5cbc:	bl	226c <read_uint64>
    5cc0:	mov	r3, r0
    5cc4:	cmp	r3, #0
    5cc8:	beq	5cd4 <coda_cursor_read_float+0x324>
    5ccc:	mvn	r3, #0
    5cd0:	b	5d80 <coda_cursor_read_float+0x3d0>
    5cd4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    5cd8:	mov	r0, r2
    5cdc:	mov	r1, r3
    5ce0:	bl	0 <__aeabi_l2f>
    5ce4:	mov	r2, r0
    5ce8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5cec:	str	r2, [r3]
    5cf0:	b	5d7c <coda_cursor_read_float+0x3cc>
    5cf4:	ldr	r1, [fp, #-68]	; 0xffffffbc
    5cf8:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5cfc:	bl	237c <read_float>
    5d00:	mov	r3, r0
    5d04:	cmp	r3, #0
    5d08:	beq	5d78 <coda_cursor_read_float+0x3c8>
    5d0c:	mvn	r3, #0
    5d10:	b	5d80 <coda_cursor_read_float+0x3d0>
    5d14:	sub	r3, fp, #60	; 0x3c
    5d18:	mov	r1, r3
    5d1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5d20:	bl	24d8 <read_double>
    5d24:	mov	r3, r0
    5d28:	cmp	r3, #0
    5d2c:	beq	5d38 <coda_cursor_read_float+0x388>
    5d30:	mvn	r3, #0
    5d34:	b	5d80 <coda_cursor_read_float+0x3d0>
    5d38:	vldr	d7, [fp, #-60]	; 0xffffffc4
    5d3c:	vcvt.f32.f64	s15, d7
    5d40:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5d44:	vstr	s15, [r3]
    5d48:	b	5d7c <coda_cursor_read_float+0x3cc>
    5d4c:	ldr	r3, [fp, #-8]
    5d50:	mov	r0, r3
    5d54:	bl	0 <coda_type_get_native_type_name>
    5d58:	mov	r3, r0
    5d5c:	mov	r2, r3
    5d60:	movw	r1, #0
    5d64:	movt	r1, #0
    5d68:	mvn	r0, #104	; 0x68
    5d6c:	bl	0 <coda_set_error>
    5d70:	mvn	r3, #0
    5d74:	b	5d80 <coda_cursor_read_float+0x3d0>
    5d78:	nop	{0}
    5d7c:	mov	r3, #0
    5d80:	mov	r0, r3
    5d84:	sub	sp, fp, #4
    5d88:	ldr	fp, [sp]
    5d8c:	add	sp, sp, #4
    5d90:	pop	{pc}		; (ldr pc, [sp], #4)

00005d94 <coda_cursor_read_double>:
    5d94:	str	fp, [sp, #-8]!
    5d98:	str	lr, [sp, #4]
    5d9c:	add	fp, sp, #4
    5da0:	sub	sp, sp, #56	; 0x38
    5da4:	str	r0, [fp, #-56]	; 0xffffffc8
    5da8:	str	r1, [fp, #-60]	; 0xffffffc4
    5dac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5db0:	cmp	r3, #0
    5db4:	beq	5dec <coda_cursor_read_double+0x58>
    5db8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5dbc:	ldr	r3, [r3, #4]
    5dc0:	cmp	r3, #0
    5dc4:	ble	5dec <coda_cursor_read_double+0x58>
    5dc8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5dcc:	ldr	r3, [r3, #4]
    5dd0:	sub	r3, r3, #1
    5dd4:	ldr	r2, [fp, #-56]	; 0xffffffc8
    5dd8:	lsl	r3, r3, #4
    5ddc:	add	r3, r2, r3
    5de0:	ldr	r3, [r3, #8]
    5de4:	cmp	r3, #0
    5de8:	bne	5e10 <coda_cursor_read_double+0x7c>
    5dec:	movw	r3, #2543	; 0x9ef
    5df0:	movw	r2, #0
    5df4:	movt	r2, #0
    5df8:	movw	r1, #0
    5dfc:	movt	r1, #0
    5e00:	mvn	r0, #99	; 0x63
    5e04:	bl	0 <coda_set_error>
    5e08:	mvn	r3, #0
    5e0c:	b	6194 <coda_cursor_read_double+0x400>
    5e10:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5e14:	cmp	r3, #0
    5e18:	bne	5e40 <coda_cursor_read_double+0xac>
    5e1c:	movw	r3, #2548	; 0x9f4
    5e20:	movw	r2, #0
    5e24:	movt	r2, #0
    5e28:	movw	r1, #0
    5e2c:	movt	r1, #0
    5e30:	mvn	r0, #99	; 0x63
    5e34:	bl	0 <coda_set_error>
    5e38:	mvn	r3, #0
    5e3c:	b	6194 <coda_cursor_read_double+0x400>
    5e40:	sub	r2, fp, #12
    5e44:	sub	r3, fp, #8
    5e48:	mov	r1, r3
    5e4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5e50:	bl	fb8 <get_unconverted_read_type>
    5e54:	mov	r3, r0
    5e58:	cmp	r3, #0
    5e5c:	beq	5e68 <coda_cursor_read_double+0xd4>
    5e60:	mvn	r3, #0
    5e64:	b	6194 <coda_cursor_read_double+0x400>
    5e68:	ldr	r3, [fp, #-8]
    5e6c:	cmp	r3, #9
    5e70:	ldrls	pc, [pc, r3, lsl #2]
    5e74:	b	60f0 <coda_cursor_read_double+0x35c>
    5e78:	.word	0x00005ea0
    5e7c:	.word	0x00005edc
    5e80:	.word	0x00005f18
    5e84:	.word	0x00005f54
    5e88:	.word	0x00005f90
    5e8c:	.word	0x00005fcc
    5e90:	.word	0x00006008
    5e94:	.word	0x00006050
    5e98:	.word	0x00006098
    5e9c:	.word	0x000060d0
    5ea0:	sub	r3, fp, #13
    5ea4:	mov	r1, r3
    5ea8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5eac:	bl	19e0 <read_int8>
    5eb0:	mov	r3, r0
    5eb4:	cmp	r3, #0
    5eb8:	beq	5ec4 <coda_cursor_read_double+0x130>
    5ebc:	mvn	r3, #0
    5ec0:	b	6194 <coda_cursor_read_double+0x400>
    5ec4:	ldrsb	r3, [fp, #-13]
    5ec8:	vmov	s15, r3
    5ecc:	vcvt.f64.s32	d7, s15
    5ed0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5ed4:	vstr	d7, [r3]
    5ed8:	b	6120 <coda_cursor_read_double+0x38c>
    5edc:	sub	r3, fp, #14
    5ee0:	mov	r1, r3
    5ee4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5ee8:	bl	1b24 <read_uint8>
    5eec:	mov	r3, r0
    5ef0:	cmp	r3, #0
    5ef4:	beq	5f00 <coda_cursor_read_double+0x16c>
    5ef8:	mvn	r3, #0
    5efc:	b	6194 <coda_cursor_read_double+0x400>
    5f00:	ldrb	r3, [fp, #-14]
    5f04:	vmov	s15, r3
    5f08:	vcvt.f64.u32	d7, s15
    5f0c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5f10:	vstr	d7, [r3]
    5f14:	b	6120 <coda_cursor_read_double+0x38c>
    5f18:	sub	r3, fp, #16
    5f1c:	mov	r1, r3
    5f20:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5f24:	bl	1c50 <read_int16>
    5f28:	mov	r3, r0
    5f2c:	cmp	r3, #0
    5f30:	beq	5f3c <coda_cursor_read_double+0x1a8>
    5f34:	mvn	r3, #0
    5f38:	b	6194 <coda_cursor_read_double+0x400>
    5f3c:	ldrsh	r3, [fp, #-16]
    5f40:	vmov	s15, r3
    5f44:	vcvt.f64.s32	d7, s15
    5f48:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5f4c:	vstr	d7, [r3]
    5f50:	b	6120 <coda_cursor_read_double+0x38c>
    5f54:	sub	r3, fp, #18
    5f58:	mov	r1, r3
    5f5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5f60:	bl	1d9c <read_uint16>
    5f64:	mov	r3, r0
    5f68:	cmp	r3, #0
    5f6c:	beq	5f78 <coda_cursor_read_double+0x1e4>
    5f70:	mvn	r3, #0
    5f74:	b	6194 <coda_cursor_read_double+0x400>
    5f78:	ldrh	r3, [fp, #-18]	; 0xffffffee
    5f7c:	vmov	s15, r3
    5f80:	vcvt.f64.u32	d7, s15
    5f84:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5f88:	vstr	d7, [r3]
    5f8c:	b	6120 <coda_cursor_read_double+0x38c>
    5f90:	sub	r3, fp, #24
    5f94:	mov	r1, r3
    5f98:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5f9c:	bl	1ec8 <read_int32>
    5fa0:	mov	r3, r0
    5fa4:	cmp	r3, #0
    5fa8:	beq	5fb4 <coda_cursor_read_double+0x220>
    5fac:	mvn	r3, #0
    5fb0:	b	6194 <coda_cursor_read_double+0x400>
    5fb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5fb8:	vmov	s15, r3
    5fbc:	vcvt.f64.s32	d7, s15
    5fc0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5fc4:	vstr	d7, [r3]
    5fc8:	b	6120 <coda_cursor_read_double+0x38c>
    5fcc:	sub	r3, fp, #28
    5fd0:	mov	r1, r3
    5fd4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5fd8:	bl	2014 <read_uint32>
    5fdc:	mov	r3, r0
    5fe0:	cmp	r3, #0
    5fe4:	beq	5ff0 <coda_cursor_read_double+0x25c>
    5fe8:	mvn	r3, #0
    5fec:	b	6194 <coda_cursor_read_double+0x400>
    5ff0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5ff4:	vmov	s15, r3
    5ff8:	vcvt.f64.u32	d7, s15
    5ffc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    6000:	vstr	d7, [r3]
    6004:	b	6120 <coda_cursor_read_double+0x38c>
    6008:	sub	r3, fp, #36	; 0x24
    600c:	mov	r1, r3
    6010:	ldr	r0, [fp, #-56]	; 0xffffffc8
    6014:	bl	2140 <read_int64>
    6018:	mov	r3, r0
    601c:	cmp	r3, #0
    6020:	beq	602c <coda_cursor_read_double+0x298>
    6024:	mvn	r3, #0
    6028:	b	6194 <coda_cursor_read_double+0x400>
    602c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    6030:	mov	r0, r2
    6034:	mov	r1, r3
    6038:	bl	0 <__aeabi_l2d>
    603c:	mov	r2, r0
    6040:	mov	r3, r1
    6044:	ldr	r1, [fp, #-60]	; 0xffffffc4
    6048:	strd	r2, [r1]
    604c:	b	6120 <coda_cursor_read_double+0x38c>
    6050:	sub	r3, fp, #44	; 0x2c
    6054:	mov	r1, r3
    6058:	ldr	r0, [fp, #-56]	; 0xffffffc8
    605c:	bl	226c <read_uint64>
    6060:	mov	r3, r0
    6064:	cmp	r3, #0
    6068:	beq	6074 <coda_cursor_read_double+0x2e0>
    606c:	mvn	r3, #0
    6070:	b	6194 <coda_cursor_read_double+0x400>
    6074:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    6078:	mov	r0, r2
    607c:	mov	r1, r3
    6080:	bl	0 <__aeabi_l2d>
    6084:	mov	r2, r0
    6088:	mov	r3, r1
    608c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    6090:	strd	r2, [r1]
    6094:	b	6120 <coda_cursor_read_double+0x38c>
    6098:	sub	r3, fp, #48	; 0x30
    609c:	mov	r1, r3
    60a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    60a4:	bl	237c <read_float>
    60a8:	mov	r3, r0
    60ac:	cmp	r3, #0
    60b0:	beq	60bc <coda_cursor_read_double+0x328>
    60b4:	mvn	r3, #0
    60b8:	b	6194 <coda_cursor_read_double+0x400>
    60bc:	vldr	s15, [fp, #-48]	; 0xffffffd0
    60c0:	vcvt.f64.f32	d7, s15
    60c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    60c8:	vstr	d7, [r3]
    60cc:	b	6120 <coda_cursor_read_double+0x38c>
    60d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    60d4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    60d8:	bl	24d8 <read_double>
    60dc:	mov	r3, r0
    60e0:	cmp	r3, #0
    60e4:	beq	611c <coda_cursor_read_double+0x388>
    60e8:	mvn	r3, #0
    60ec:	b	6194 <coda_cursor_read_double+0x400>
    60f0:	ldr	r3, [fp, #-8]
    60f4:	mov	r0, r3
    60f8:	bl	0 <coda_type_get_native_type_name>
    60fc:	mov	r3, r0
    6100:	mov	r2, r3
    6104:	movw	r1, #0
    6108:	movt	r1, #0
    610c:	mvn	r0, #104	; 0x68
    6110:	bl	0 <coda_set_error>
    6114:	mvn	r3, #0
    6118:	b	6194 <coda_cursor_read_double+0x400>
    611c:	nop	{0}
    6120:	ldr	r3, [fp, #-12]
    6124:	cmp	r3, #0
    6128:	beq	6190 <coda_cursor_read_double+0x3fc>
    612c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    6130:	vldr	d6, [r3]
    6134:	ldr	r3, [fp, #-12]
    6138:	vldr	d7, [r3, #24]
    613c:	vcmp.f64	d6, d7
    6140:	vmrs	APSR_nzcv, fpscr
    6144:	bne	615c <coda_cursor_read_double+0x3c8>
    6148:	bl	0 <coda_NaN>
    614c:	vmov.f64	d7, d0
    6150:	ldr	r3, [fp, #-60]	; 0xffffffc4
    6154:	vstr	d7, [r3]
    6158:	b	6190 <coda_cursor_read_double+0x3fc>
    615c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    6160:	vldr	d6, [r3]
    6164:	ldr	r3, [fp, #-12]
    6168:	vldr	d7, [r3]
    616c:	vmul.f64	d5, d6, d7
    6170:	ldr	r3, [fp, #-12]
    6174:	vldr	d7, [r3, #8]
    6178:	vdiv.f64	d6, d5, d7
    617c:	ldr	r3, [fp, #-12]
    6180:	vldr	d7, [r3, #16]
    6184:	vadd.f64	d7, d6, d7
    6188:	ldr	r3, [fp, #-60]	; 0xffffffc4
    618c:	vstr	d7, [r3]
    6190:	mov	r3, #0
    6194:	mov	r0, r3
    6198:	sub	sp, fp, #4
    619c:	ldr	fp, [sp]
    61a0:	add	sp, sp, #4
    61a4:	pop	{pc}		; (ldr pc, [sp], #4)

000061a8 <coda_cursor_read_char>:
    61a8:	str	fp, [sp, #-8]!
    61ac:	str	lr, [sp, #4]
    61b0:	add	fp, sp, #4
    61b4:	sub	sp, sp, #16
    61b8:	str	r0, [fp, #-16]
    61bc:	str	r1, [fp, #-20]	; 0xffffffec
    61c0:	ldr	r3, [fp, #-16]
    61c4:	cmp	r3, #0
    61c8:	beq	6200 <coda_cursor_read_char+0x58>
    61cc:	ldr	r3, [fp, #-16]
    61d0:	ldr	r3, [r3, #4]
    61d4:	cmp	r3, #0
    61d8:	ble	6200 <coda_cursor_read_char+0x58>
    61dc:	ldr	r3, [fp, #-16]
    61e0:	ldr	r3, [r3, #4]
    61e4:	sub	r3, r3, #1
    61e8:	ldr	r2, [fp, #-16]
    61ec:	lsl	r3, r3, #4
    61f0:	add	r3, r2, r3
    61f4:	ldr	r3, [r3, #8]
    61f8:	cmp	r3, #0
    61fc:	bne	6224 <coda_cursor_read_char+0x7c>
    6200:	movw	r3, #2698	; 0xa8a
    6204:	movw	r2, #0
    6208:	movt	r2, #0
    620c:	movw	r1, #0
    6210:	movt	r1, #0
    6214:	mvn	r0, #99	; 0x63
    6218:	bl	0 <coda_set_error>
    621c:	mvn	r3, #0
    6220:	b	62d8 <coda_cursor_read_char+0x130>
    6224:	ldr	r3, [fp, #-20]	; 0xffffffec
    6228:	cmp	r3, #0
    622c:	bne	6254 <coda_cursor_read_char+0xac>
    6230:	movw	r3, #2703	; 0xa8f
    6234:	movw	r2, #0
    6238:	movt	r2, #0
    623c:	movw	r1, #0
    6240:	movt	r1, #0
    6244:	mvn	r0, #99	; 0x63
    6248:	bl	0 <coda_set_error>
    624c:	mvn	r3, #0
    6250:	b	62d8 <coda_cursor_read_char+0x130>
    6254:	sub	r3, fp, #8
    6258:	mov	r1, r3
    625c:	ldr	r0, [fp, #-16]
    6260:	bl	eb8 <get_read_type>
    6264:	mov	r3, r0
    6268:	cmp	r3, #0
    626c:	beq	6278 <coda_cursor_read_char+0xd0>
    6270:	mvn	r3, #0
    6274:	b	62d8 <coda_cursor_read_char+0x130>
    6278:	ldr	r3, [fp, #-8]
    627c:	cmp	r3, #10
    6280:	bne	62a4 <coda_cursor_read_char+0xfc>
    6284:	ldr	r1, [fp, #-20]	; 0xffffffec
    6288:	ldr	r0, [fp, #-16]
    628c:	bl	26e0 <read_char>
    6290:	mov	r3, r0
    6294:	cmp	r3, #0
    6298:	beq	62d0 <coda_cursor_read_char+0x128>
    629c:	mvn	r3, #0
    62a0:	b	62d8 <coda_cursor_read_char+0x130>
    62a4:	ldr	r3, [fp, #-8]
    62a8:	mov	r0, r3
    62ac:	bl	0 <coda_type_get_native_type_name>
    62b0:	mov	r3, r0
    62b4:	mov	r2, r3
    62b8:	movw	r1, #0
    62bc:	movt	r1, #0
    62c0:	mvn	r0, #104	; 0x68
    62c4:	bl	0 <coda_set_error>
    62c8:	mvn	r3, #0
    62cc:	b	62d8 <coda_cursor_read_char+0x130>
    62d0:	nop	{0}
    62d4:	mov	r3, #0
    62d8:	mov	r0, r3
    62dc:	sub	sp, fp, #4
    62e0:	ldr	fp, [sp]
    62e4:	add	sp, sp, #4
    62e8:	pop	{pc}		; (ldr pc, [sp], #4)

000062ec <coda_cursor_read_string>:
    62ec:	str	fp, [sp, #-8]!
    62f0:	str	lr, [sp, #4]
    62f4:	add	fp, sp, #4
    62f8:	sub	sp, sp, #32
    62fc:	str	r0, [fp, #-16]
    6300:	str	r1, [fp, #-20]	; 0xffffffec
    6304:	str	r2, [fp, #-24]	; 0xffffffe8
    6308:	ldr	r3, [fp, #-20]	; 0xffffffec
    630c:	cmp	r3, #0
    6310:	bne	6338 <coda_cursor_read_string+0x4c>
    6314:	movw	r3, #2747	; 0xabb
    6318:	movw	r2, #0
    631c:	movt	r2, #0
    6320:	movw	r1, #0
    6324:	movt	r1, #0
    6328:	mvn	r0, #99	; 0x63
    632c:	bl	0 <coda_set_error>
    6330:	mvn	r3, #0
    6334:	b	63cc <coda_cursor_read_string+0xe0>
    6338:	ldr	r3, [fp, #-24]	; 0xffffffe8
    633c:	cmp	r3, #0
    6340:	bgt	6370 <coda_cursor_read_string+0x84>
    6344:	movw	r3, #2753	; 0xac1
    6348:	str	r3, [sp]
    634c:	movw	r3, #0
    6350:	movt	r3, #0
    6354:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6358:	movw	r1, #0
    635c:	movt	r1, #0
    6360:	mvn	r0, #99	; 0x63
    6364:	bl	0 <coda_set_error>
    6368:	mvn	r3, #0
    636c:	b	63cc <coda_cursor_read_string+0xe0>
    6370:	sub	r3, fp, #8
    6374:	mov	r1, r3
    6378:	ldr	r0, [fp, #-16]
    637c:	bl	0 <coda_cursor_has_ascii_content>
    6380:	mov	r3, r0
    6384:	cmp	r3, #0
    6388:	beq	6394 <coda_cursor_read_string+0xa8>
    638c:	mvn	r3, #0
    6390:	b	63cc <coda_cursor_read_string+0xe0>
    6394:	ldr	r3, [fp, #-8]
    6398:	cmp	r3, #0
    639c:	bne	63b8 <coda_cursor_read_string+0xcc>
    63a0:	movw	r1, #0
    63a4:	movt	r1, #0
    63a8:	mvn	r0, #104	; 0x68
    63ac:	bl	0 <coda_set_error>
    63b0:	mvn	r3, #0
    63b4:	b	63cc <coda_cursor_read_string+0xe0>
    63b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    63bc:	ldr	r1, [fp, #-20]	; 0xffffffec
    63c0:	ldr	r0, [fp, #-16]
    63c4:	bl	2814 <read_string>
    63c8:	mov	r3, r0
    63cc:	mov	r0, r3
    63d0:	sub	sp, fp, #4
    63d4:	ldr	fp, [sp]
    63d8:	add	sp, sp, #4
    63dc:	pop	{pc}		; (ldr pc, [sp], #4)

000063e0 <coda_cursor_read_bits>:
    63e0:	str	fp, [sp, #-8]!
    63e4:	str	lr, [sp, #4]
    63e8:	add	fp, sp, #4
    63ec:	sub	sp, sp, #24
    63f0:	str	r0, [fp, #-8]
    63f4:	str	r1, [fp, #-12]
    63f8:	strd	r2, [fp, #-20]	; 0xffffffec
    63fc:	ldr	r3, [fp, #-8]
    6400:	cmp	r3, #0
    6404:	beq	643c <coda_cursor_read_bits+0x5c>
    6408:	ldr	r3, [fp, #-8]
    640c:	ldr	r3, [r3, #4]
    6410:	cmp	r3, #0
    6414:	ble	643c <coda_cursor_read_bits+0x5c>
    6418:	ldr	r3, [fp, #-8]
    641c:	ldr	r3, [r3, #4]
    6420:	sub	r3, r3, #1
    6424:	ldr	r2, [fp, #-8]
    6428:	lsl	r3, r3, #4
    642c:	add	r3, r2, r3
    6430:	ldr	r3, [r3, #8]
    6434:	cmp	r3, #0
    6438:	bne	6460 <coda_cursor_read_bits+0x80>
    643c:	movw	r3, #2789	; 0xae5
    6440:	movw	r2, #0
    6444:	movt	r2, #0
    6448:	movw	r1, #0
    644c:	movt	r1, #0
    6450:	mvn	r0, #99	; 0x63
    6454:	bl	0 <coda_set_error>
    6458:	mvn	r3, #0
    645c:	b	659c <coda_cursor_read_bits+0x1bc>
    6460:	ldr	r3, [fp, #-12]
    6464:	cmp	r3, #0
    6468:	bne	6490 <coda_cursor_read_bits+0xb0>
    646c:	movw	r3, #2794	; 0xaea
    6470:	movw	r2, #0
    6474:	movt	r2, #0
    6478:	movw	r1, #0
    647c:	movt	r1, #0
    6480:	mvn	r0, #99	; 0x63
    6484:	bl	0 <coda_set_error>
    6488:	mvn	r3, #0
    648c:	b	659c <coda_cursor_read_bits+0x1bc>
    6490:	ldrd	r2, [fp, #4]
    6494:	cmp	r2, #0
    6498:	sbcs	r3, r3, #0
    649c:	bge	64c4 <coda_cursor_read_bits+0xe4>
    64a0:	movw	r3, #2799	; 0xaef
    64a4:	movw	r2, #0
    64a8:	movt	r2, #0
    64ac:	movw	r1, #0
    64b0:	movt	r1, #0
    64b4:	mvn	r0, #99	; 0x63
    64b8:	bl	0 <coda_set_error>
    64bc:	mvn	r3, #0
    64c0:	b	659c <coda_cursor_read_bits+0x1bc>
    64c4:	ldrd	r2, [fp, #4]
    64c8:	orrs	r3, r2, r3
    64cc:	bne	64d8 <coda_cursor_read_bits+0xf8>
    64d0:	mov	r3, #0
    64d4:	b	659c <coda_cursor_read_bits+0x1bc>
    64d8:	ldr	r3, [fp, #-8]
    64dc:	ldr	r3, [r3, #4]
    64e0:	sub	r3, r3, #1
    64e4:	ldr	r2, [fp, #-8]
    64e8:	lsl	r3, r3, #4
    64ec:	add	r3, r2, r3
    64f0:	ldr	r3, [r3, #8]
    64f4:	ldr	r3, [r3]
    64f8:	cmp	r3, #100	; 0x64
    64fc:	beq	6568 <coda_cursor_read_bits+0x188>
    6500:	cmp	r3, #100	; 0x64
    6504:	bhi	651c <coda_cursor_read_bits+0x13c>
    6508:	cmp	r3, #0
    650c:	beq	6528 <coda_cursor_read_bits+0x148>
    6510:	cmp	r3, #1
    6514:	beq	6548 <coda_cursor_read_bits+0x168>
    6518:	b	6588 <coda_cursor_read_bits+0x1a8>
    651c:	cmp	r3, #105	; 0x69
    6520:	bhi	6588 <coda_cursor_read_bits+0x1a8>
    6524:	b	6588 <coda_cursor_read_bits+0x1a8>
    6528:	ldrd	r2, [fp, #4]
    652c:	strd	r2, [sp]
    6530:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6534:	ldr	r1, [fp, #-12]
    6538:	ldr	r0, [fp, #-8]
    653c:	bl	0 <coda_ascii_cursor_read_bits>
    6540:	mov	r3, r0
    6544:	b	659c <coda_cursor_read_bits+0x1bc>
    6548:	ldrd	r2, [fp, #4]
    654c:	strd	r2, [sp]
    6550:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6554:	ldr	r1, [fp, #-12]
    6558:	ldr	r0, [fp, #-8]
    655c:	bl	0 <coda_bin_cursor_read_bits>
    6560:	mov	r3, r0
    6564:	b	659c <coda_cursor_read_bits+0x1bc>
    6568:	ldrd	r2, [fp, #4]
    656c:	strd	r2, [sp]
    6570:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6574:	ldr	r1, [fp, #-12]
    6578:	ldr	r0, [fp, #-8]
    657c:	bl	0 <coda_mem_cursor_read_bits>
    6580:	mov	r3, r0
    6584:	b	659c <coda_cursor_read_bits+0x1bc>
    6588:	movw	r1, #0
    658c:	movt	r1, #0
    6590:	mvn	r0, #104	; 0x68
    6594:	bl	0 <coda_set_error>
    6598:	mvn	r3, #0
    659c:	mov	r0, r3
    65a0:	sub	sp, fp, #4
    65a4:	ldr	fp, [sp]
    65a8:	add	sp, sp, #4
    65ac:	pop	{pc}		; (ldr pc, [sp], #4)

000065b0 <coda_cursor_read_bytes>:
    65b0:	str	fp, [sp, #-8]!
    65b4:	str	lr, [sp, #4]
    65b8:	add	fp, sp, #4
    65bc:	sub	sp, sp, #24
    65c0:	str	r0, [fp, #-8]
    65c4:	str	r1, [fp, #-12]
    65c8:	strd	r2, [fp, #-20]	; 0xffffffec
    65cc:	ldr	r3, [fp, #-8]
    65d0:	cmp	r3, #0
    65d4:	beq	660c <coda_cursor_read_bytes+0x5c>
    65d8:	ldr	r3, [fp, #-8]
    65dc:	ldr	r3, [r3, #4]
    65e0:	cmp	r3, #0
    65e4:	ble	660c <coda_cursor_read_bytes+0x5c>
    65e8:	ldr	r3, [fp, #-8]
    65ec:	ldr	r3, [r3, #4]
    65f0:	sub	r3, r3, #1
    65f4:	ldr	r2, [fp, #-8]
    65f8:	lsl	r3, r3, #4
    65fc:	add	r3, r2, r3
    6600:	ldr	r3, [r3, #8]
    6604:	cmp	r3, #0
    6608:	bne	6630 <coda_cursor_read_bytes+0x80>
    660c:	movw	r3, #2845	; 0xb1d
    6610:	movw	r2, #0
    6614:	movt	r2, #0
    6618:	movw	r1, #0
    661c:	movt	r1, #0
    6620:	mvn	r0, #99	; 0x63
    6624:	bl	0 <coda_set_error>
    6628:	mvn	r3, #0
    662c:	b	67a0 <coda_cursor_read_bytes+0x1f0>
    6630:	ldr	r3, [fp, #-12]
    6634:	cmp	r3, #0
    6638:	bne	6660 <coda_cursor_read_bytes+0xb0>
    663c:	movw	r3, #2850	; 0xb22
    6640:	movw	r2, #0
    6644:	movt	r2, #0
    6648:	movw	r1, #0
    664c:	movt	r1, #0
    6650:	mvn	r0, #99	; 0x63
    6654:	bl	0 <coda_set_error>
    6658:	mvn	r3, #0
    665c:	b	67a0 <coda_cursor_read_bytes+0x1f0>
    6660:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6664:	cmp	r2, #0
    6668:	sbcs	r3, r3, #0
    666c:	bge	6694 <coda_cursor_read_bytes+0xe4>
    6670:	movw	r3, #2855	; 0xb27
    6674:	movw	r2, #0
    6678:	movt	r2, #0
    667c:	movw	r1, #0
    6680:	movt	r1, #0
    6684:	mvn	r0, #99	; 0x63
    6688:	bl	0 <coda_set_error>
    668c:	mvn	r3, #0
    6690:	b	67a0 <coda_cursor_read_bytes+0x1f0>
    6694:	ldrd	r2, [fp, #4]
    6698:	cmp	r2, #0
    669c:	sbcs	r3, r3, #0
    66a0:	bge	66c8 <coda_cursor_read_bytes+0x118>
    66a4:	movw	r3, #2860	; 0xb2c
    66a8:	movw	r2, #0
    66ac:	movt	r2, #0
    66b0:	movw	r1, #0
    66b4:	movt	r1, #0
    66b8:	mvn	r0, #99	; 0x63
    66bc:	bl	0 <coda_set_error>
    66c0:	mvn	r3, #0
    66c4:	b	67a0 <coda_cursor_read_bytes+0x1f0>
    66c8:	ldrd	r2, [fp, #4]
    66cc:	orrs	r3, r2, r3
    66d0:	bne	66dc <coda_cursor_read_bytes+0x12c>
    66d4:	mov	r3, #0
    66d8:	b	67a0 <coda_cursor_read_bytes+0x1f0>
    66dc:	ldr	r3, [fp, #-8]
    66e0:	ldr	r3, [r3, #4]
    66e4:	sub	r3, r3, #1
    66e8:	ldr	r2, [fp, #-8]
    66ec:	lsl	r3, r3, #4
    66f0:	add	r3, r2, r3
    66f4:	ldr	r3, [r3, #8]
    66f8:	ldr	r3, [r3]
    66fc:	cmp	r3, #100	; 0x64
    6700:	beq	676c <coda_cursor_read_bytes+0x1bc>
    6704:	cmp	r3, #100	; 0x64
    6708:	bhi	6720 <coda_cursor_read_bytes+0x170>
    670c:	cmp	r3, #0
    6710:	beq	672c <coda_cursor_read_bytes+0x17c>
    6714:	cmp	r3, #1
    6718:	beq	674c <coda_cursor_read_bytes+0x19c>
    671c:	b	678c <coda_cursor_read_bytes+0x1dc>
    6720:	cmp	r3, #105	; 0x69
    6724:	bhi	678c <coda_cursor_read_bytes+0x1dc>
    6728:	b	678c <coda_cursor_read_bytes+0x1dc>
    672c:	ldrd	r2, [fp, #4]
    6730:	strd	r2, [sp]
    6734:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6738:	ldr	r1, [fp, #-12]
    673c:	ldr	r0, [fp, #-8]
    6740:	bl	0 <coda_ascii_cursor_read_bytes>
    6744:	mov	r3, r0
    6748:	b	67a0 <coda_cursor_read_bytes+0x1f0>
    674c:	ldrd	r2, [fp, #4]
    6750:	strd	r2, [sp]
    6754:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6758:	ldr	r1, [fp, #-12]
    675c:	ldr	r0, [fp, #-8]
    6760:	bl	0 <coda_bin_cursor_read_bytes>
    6764:	mov	r3, r0
    6768:	b	67a0 <coda_cursor_read_bytes+0x1f0>
    676c:	ldrd	r2, [fp, #4]
    6770:	strd	r2, [sp]
    6774:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6778:	ldr	r1, [fp, #-12]
    677c:	ldr	r0, [fp, #-8]
    6780:	bl	0 <coda_mem_cursor_read_bytes>
    6784:	mov	r3, r0
    6788:	b	67a0 <coda_cursor_read_bytes+0x1f0>
    678c:	movw	r1, #0
    6790:	movt	r1, #0
    6794:	mvn	r0, #104	; 0x68
    6798:	bl	0 <coda_set_error>
    679c:	mvn	r3, #0
    67a0:	mov	r0, r3
    67a4:	sub	sp, fp, #4
    67a8:	ldr	fp, [sp]
    67ac:	add	sp, sp, #4
    67b0:	pop	{pc}		; (ldr pc, [sp], #4)

000067b4 <coda_cursor_read_int8_array>:
    67b4:	str	fp, [sp, #-8]!
    67b8:	str	lr, [sp, #4]
    67bc:	add	fp, sp, #4
    67c0:	sub	sp, sp, #24
    67c4:	str	r0, [fp, #-16]
    67c8:	str	r1, [fp, #-20]	; 0xffffffec
    67cc:	str	r2, [fp, #-24]	; 0xffffffe8
    67d0:	ldr	r3, [fp, #-16]
    67d4:	cmp	r3, #0
    67d8:	beq	6810 <coda_cursor_read_int8_array+0x5c>
    67dc:	ldr	r3, [fp, #-16]
    67e0:	ldr	r3, [r3, #4]
    67e4:	cmp	r3, #0
    67e8:	ble	6810 <coda_cursor_read_int8_array+0x5c>
    67ec:	ldr	r3, [fp, #-16]
    67f0:	ldr	r3, [r3, #4]
    67f4:	sub	r3, r3, #1
    67f8:	ldr	r2, [fp, #-16]
    67fc:	lsl	r3, r3, #4
    6800:	add	r3, r2, r3
    6804:	ldr	r3, [r3, #8]
    6808:	cmp	r3, #0
    680c:	bne	6834 <coda_cursor_read_int8_array+0x80>
    6810:	movw	r3, #2908	; 0xb5c
    6814:	movw	r2, #0
    6818:	movt	r2, #0
    681c:	movw	r1, #0
    6820:	movt	r1, #0
    6824:	mvn	r0, #99	; 0x63
    6828:	bl	0 <coda_set_error>
    682c:	mvn	r3, #0
    6830:	b	6998 <coda_cursor_read_int8_array+0x1e4>
    6834:	ldr	r3, [fp, #-20]	; 0xffffffec
    6838:	cmp	r3, #0
    683c:	bne	6864 <coda_cursor_read_int8_array+0xb0>
    6840:	movw	r3, #2913	; 0xb61
    6844:	movw	r2, #0
    6848:	movt	r2, #0
    684c:	movw	r1, #0
    6850:	movt	r1, #0
    6854:	mvn	r0, #99	; 0x63
    6858:	bl	0 <coda_set_error>
    685c:	mvn	r3, #0
    6860:	b	6998 <coda_cursor_read_int8_array+0x1e4>
    6864:	ldr	r3, [fp, #-16]
    6868:	ldr	r3, [r3, #4]
    686c:	sub	r3, r3, #1
    6870:	ldr	r2, [fp, #-16]
    6874:	lsl	r3, r3, #4
    6878:	add	r3, r2, r3
    687c:	ldr	r3, [r3, #8]
    6880:	ldr	r3, [r3]
    6884:	cmp	r3, #99	; 0x63
    6888:	bhi	68ac <coda_cursor_read_int8_array+0xf8>
    688c:	ldr	r3, [fp, #-16]
    6890:	ldr	r3, [r3, #4]
    6894:	sub	r3, r3, #1
    6898:	ldr	r2, [fp, #-16]
    689c:	lsl	r3, r3, #4
    68a0:	add	r3, r2, r3
    68a4:	ldr	r3, [r3, #8]
    68a8:	b	68cc <coda_cursor_read_int8_array+0x118>
    68ac:	ldr	r3, [fp, #-16]
    68b0:	ldr	r3, [r3, #4]
    68b4:	sub	r3, r3, #1
    68b8:	ldr	r2, [fp, #-16]
    68bc:	lsl	r3, r3, #4
    68c0:	add	r3, r2, r3
    68c4:	ldr	r3, [r3, #8]
    68c8:	ldr	r3, [r3, #4]
    68cc:	str	r3, [fp, #-8]
    68d0:	ldr	r3, [fp, #-8]
    68d4:	ldr	r3, [r3, #8]
    68d8:	cmp	r3, #1
    68dc:	beq	6910 <coda_cursor_read_int8_array+0x15c>
    68e0:	ldr	r3, [fp, #-8]
    68e4:	ldr	r3, [r3, #8]
    68e8:	mov	r0, r3
    68ec:	bl	0 <coda_type_get_class_name>
    68f0:	mov	r3, r0
    68f4:	mov	r2, r3
    68f8:	movw	r1, #0
    68fc:	movt	r1, #0
    6900:	mvn	r0, #104	; 0x68
    6904:	bl	0 <coda_set_error>
    6908:	mvn	r3, #0
    690c:	b	6998 <coda_cursor_read_int8_array+0x1e4>
    6910:	sub	r3, fp, #12
    6914:	mov	r1, r3
    6918:	ldr	r0, [fp, #-8]
    691c:	bl	10bc <get_array_element_read_type>
    6920:	mov	r3, r0
    6924:	cmp	r3, #0
    6928:	beq	6934 <coda_cursor_read_int8_array+0x180>
    692c:	mvn	r3, #0
    6930:	b	6998 <coda_cursor_read_int8_array+0x1e4>
    6934:	ldr	r3, [fp, #-12]
    6938:	cmp	r3, #0
    693c:	bne	6964 <coda_cursor_read_int8_array+0x1b0>
    6940:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6944:	ldr	r1, [fp, #-20]	; 0xffffffec
    6948:	ldr	r0, [fp, #-16]
    694c:	bl	2970 <read_int8_array>
    6950:	mov	r3, r0
    6954:	cmp	r3, #0
    6958:	beq	6990 <coda_cursor_read_int8_array+0x1dc>
    695c:	mvn	r3, #0
    6960:	b	6998 <coda_cursor_read_int8_array+0x1e4>
    6964:	ldr	r3, [fp, #-12]
    6968:	mov	r0, r3
    696c:	bl	0 <coda_type_get_native_type_name>
    6970:	mov	r3, r0
    6974:	mov	r2, r3
    6978:	movw	r1, #0
    697c:	movt	r1, #0
    6980:	mvn	r0, #104	; 0x68
    6984:	bl	0 <coda_set_error>
    6988:	mvn	r3, #0
    698c:	b	6998 <coda_cursor_read_int8_array+0x1e4>
    6990:	nop	{0}
    6994:	mov	r3, #0
    6998:	mov	r0, r3
    699c:	sub	sp, fp, #4
    69a0:	ldr	fp, [sp]
    69a4:	add	sp, sp, #4
    69a8:	pop	{pc}		; (ldr pc, [sp], #4)

000069ac <coda_cursor_read_uint8_array>:
    69ac:	str	fp, [sp, #-8]!
    69b0:	str	lr, [sp, #4]
    69b4:	add	fp, sp, #4
    69b8:	sub	sp, sp, #24
    69bc:	str	r0, [fp, #-16]
    69c0:	str	r1, [fp, #-20]	; 0xffffffec
    69c4:	str	r2, [fp, #-24]	; 0xffffffe8
    69c8:	ldr	r3, [fp, #-16]
    69cc:	cmp	r3, #0
    69d0:	beq	6a08 <coda_cursor_read_uint8_array+0x5c>
    69d4:	ldr	r3, [fp, #-16]
    69d8:	ldr	r3, [r3, #4]
    69dc:	cmp	r3, #0
    69e0:	ble	6a08 <coda_cursor_read_uint8_array+0x5c>
    69e4:	ldr	r3, [fp, #-16]
    69e8:	ldr	r3, [r3, #4]
    69ec:	sub	r3, r3, #1
    69f0:	ldr	r2, [fp, #-16]
    69f4:	lsl	r3, r3, #4
    69f8:	add	r3, r2, r3
    69fc:	ldr	r3, [r3, #8]
    6a00:	cmp	r3, #0
    6a04:	bne	6a2c <coda_cursor_read_uint8_array+0x80>
    6a08:	movw	r3, #2967	; 0xb97
    6a0c:	movw	r2, #0
    6a10:	movt	r2, #0
    6a14:	movw	r1, #0
    6a18:	movt	r1, #0
    6a1c:	mvn	r0, #99	; 0x63
    6a20:	bl	0 <coda_set_error>
    6a24:	mvn	r3, #0
    6a28:	b	6b90 <coda_cursor_read_uint8_array+0x1e4>
    6a2c:	ldr	r3, [fp, #-20]	; 0xffffffec
    6a30:	cmp	r3, #0
    6a34:	bne	6a5c <coda_cursor_read_uint8_array+0xb0>
    6a38:	movw	r3, #2972	; 0xb9c
    6a3c:	movw	r2, #0
    6a40:	movt	r2, #0
    6a44:	movw	r1, #0
    6a48:	movt	r1, #0
    6a4c:	mvn	r0, #99	; 0x63
    6a50:	bl	0 <coda_set_error>
    6a54:	mvn	r3, #0
    6a58:	b	6b90 <coda_cursor_read_uint8_array+0x1e4>
    6a5c:	ldr	r3, [fp, #-16]
    6a60:	ldr	r3, [r3, #4]
    6a64:	sub	r3, r3, #1
    6a68:	ldr	r2, [fp, #-16]
    6a6c:	lsl	r3, r3, #4
    6a70:	add	r3, r2, r3
    6a74:	ldr	r3, [r3, #8]
    6a78:	ldr	r3, [r3]
    6a7c:	cmp	r3, #99	; 0x63
    6a80:	bhi	6aa4 <coda_cursor_read_uint8_array+0xf8>
    6a84:	ldr	r3, [fp, #-16]
    6a88:	ldr	r3, [r3, #4]
    6a8c:	sub	r3, r3, #1
    6a90:	ldr	r2, [fp, #-16]
    6a94:	lsl	r3, r3, #4
    6a98:	add	r3, r2, r3
    6a9c:	ldr	r3, [r3, #8]
    6aa0:	b	6ac4 <coda_cursor_read_uint8_array+0x118>
    6aa4:	ldr	r3, [fp, #-16]
    6aa8:	ldr	r3, [r3, #4]
    6aac:	sub	r3, r3, #1
    6ab0:	ldr	r2, [fp, #-16]
    6ab4:	lsl	r3, r3, #4
    6ab8:	add	r3, r2, r3
    6abc:	ldr	r3, [r3, #8]
    6ac0:	ldr	r3, [r3, #4]
    6ac4:	str	r3, [fp, #-8]
    6ac8:	ldr	r3, [fp, #-8]
    6acc:	ldr	r3, [r3, #8]
    6ad0:	cmp	r3, #1
    6ad4:	beq	6b08 <coda_cursor_read_uint8_array+0x15c>
    6ad8:	ldr	r3, [fp, #-8]
    6adc:	ldr	r3, [r3, #8]
    6ae0:	mov	r0, r3
    6ae4:	bl	0 <coda_type_get_class_name>
    6ae8:	mov	r3, r0
    6aec:	mov	r2, r3
    6af0:	movw	r1, #0
    6af4:	movt	r1, #0
    6af8:	mvn	r0, #104	; 0x68
    6afc:	bl	0 <coda_set_error>
    6b00:	mvn	r3, #0
    6b04:	b	6b90 <coda_cursor_read_uint8_array+0x1e4>
    6b08:	sub	r3, fp, #12
    6b0c:	mov	r1, r3
    6b10:	ldr	r0, [fp, #-8]
    6b14:	bl	10bc <get_array_element_read_type>
    6b18:	mov	r3, r0
    6b1c:	cmp	r3, #0
    6b20:	beq	6b2c <coda_cursor_read_uint8_array+0x180>
    6b24:	mvn	r3, #0
    6b28:	b	6b90 <coda_cursor_read_uint8_array+0x1e4>
    6b2c:	ldr	r3, [fp, #-12]
    6b30:	cmp	r3, #1
    6b34:	bne	6b5c <coda_cursor_read_uint8_array+0x1b0>
    6b38:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6b3c:	ldr	r1, [fp, #-20]	; 0xffffffec
    6b40:	ldr	r0, [fp, #-16]
    6b44:	bl	2b14 <read_uint8_array>
    6b48:	mov	r3, r0
    6b4c:	cmp	r3, #0
    6b50:	beq	6b88 <coda_cursor_read_uint8_array+0x1dc>
    6b54:	mvn	r3, #0
    6b58:	b	6b90 <coda_cursor_read_uint8_array+0x1e4>
    6b5c:	ldr	r3, [fp, #-12]
    6b60:	mov	r0, r3
    6b64:	bl	0 <coda_type_get_native_type_name>
    6b68:	mov	r3, r0
    6b6c:	mov	r2, r3
    6b70:	movw	r1, #0
    6b74:	movt	r1, #0
    6b78:	mvn	r0, #104	; 0x68
    6b7c:	bl	0 <coda_set_error>
    6b80:	mvn	r3, #0
    6b84:	b	6b90 <coda_cursor_read_uint8_array+0x1e4>
    6b88:	nop	{0}
    6b8c:	mov	r3, #0
    6b90:	mov	r0, r3
    6b94:	sub	sp, fp, #4
    6b98:	ldr	fp, [sp]
    6b9c:	add	sp, sp, #4
    6ba0:	pop	{pc}		; (ldr pc, [sp], #4)

00006ba4 <coda_cursor_read_int16_array>:
    6ba4:	str	fp, [sp, #-8]!
    6ba8:	str	lr, [sp, #4]
    6bac:	add	fp, sp, #4
    6bb0:	sub	sp, sp, #32
    6bb4:	str	r0, [fp, #-24]	; 0xffffffe8
    6bb8:	str	r1, [fp, #-28]	; 0xffffffe4
    6bbc:	str	r2, [fp, #-32]	; 0xffffffe0
    6bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6bc4:	cmp	r3, #0
    6bc8:	beq	6c00 <coda_cursor_read_int16_array+0x5c>
    6bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6bd0:	ldr	r3, [r3, #4]
    6bd4:	cmp	r3, #0
    6bd8:	ble	6c00 <coda_cursor_read_int16_array+0x5c>
    6bdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6be0:	ldr	r3, [r3, #4]
    6be4:	sub	r3, r3, #1
    6be8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6bec:	lsl	r3, r3, #4
    6bf0:	add	r3, r2, r3
    6bf4:	ldr	r3, [r3, #8]
    6bf8:	cmp	r3, #0
    6bfc:	bne	6c24 <coda_cursor_read_int16_array+0x80>
    6c00:	movw	r3, #3030	; 0xbd6
    6c04:	movw	r2, #0
    6c08:	movt	r2, #0
    6c0c:	movw	r1, #0
    6c10:	movt	r1, #0
    6c14:	mvn	r0, #99	; 0x63
    6c18:	bl	0 <coda_set_error>
    6c1c:	mvn	r3, #0
    6c20:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6c24:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6c28:	cmp	r3, #0
    6c2c:	bne	6c54 <coda_cursor_read_int16_array+0xb0>
    6c30:	movw	r3, #3035	; 0xbdb
    6c34:	movw	r2, #0
    6c38:	movt	r2, #0
    6c3c:	movw	r1, #0
    6c40:	movt	r1, #0
    6c44:	mvn	r0, #99	; 0x63
    6c48:	bl	0 <coda_set_error>
    6c4c:	mvn	r3, #0
    6c50:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6c54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6c58:	ldr	r3, [r3, #4]
    6c5c:	sub	r3, r3, #1
    6c60:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6c64:	lsl	r3, r3, #4
    6c68:	add	r3, r2, r3
    6c6c:	ldr	r3, [r3, #8]
    6c70:	ldr	r3, [r3]
    6c74:	cmp	r3, #99	; 0x63
    6c78:	bhi	6c9c <coda_cursor_read_int16_array+0xf8>
    6c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6c80:	ldr	r3, [r3, #4]
    6c84:	sub	r3, r3, #1
    6c88:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6c8c:	lsl	r3, r3, #4
    6c90:	add	r3, r2, r3
    6c94:	ldr	r3, [r3, #8]
    6c98:	b	6cbc <coda_cursor_read_int16_array+0x118>
    6c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6ca0:	ldr	r3, [r3, #4]
    6ca4:	sub	r3, r3, #1
    6ca8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6cac:	lsl	r3, r3, #4
    6cb0:	add	r3, r2, r3
    6cb4:	ldr	r3, [r3, #8]
    6cb8:	ldr	r3, [r3, #4]
    6cbc:	str	r3, [fp, #-12]
    6cc0:	ldr	r3, [fp, #-12]
    6cc4:	ldr	r3, [r3, #8]
    6cc8:	cmp	r3, #1
    6ccc:	beq	6d00 <coda_cursor_read_int16_array+0x15c>
    6cd0:	ldr	r3, [fp, #-12]
    6cd4:	ldr	r3, [r3, #8]
    6cd8:	mov	r0, r3
    6cdc:	bl	0 <coda_type_get_class_name>
    6ce0:	mov	r3, r0
    6ce4:	mov	r2, r3
    6ce8:	movw	r1, #0
    6cec:	movt	r1, #0
    6cf0:	mvn	r0, #104	; 0x68
    6cf4:	bl	0 <coda_set_error>
    6cf8:	mvn	r3, #0
    6cfc:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6d00:	sub	r3, fp, #16
    6d04:	mov	r1, r3
    6d08:	ldr	r0, [fp, #-12]
    6d0c:	bl	10bc <get_array_element_read_type>
    6d10:	mov	r3, r0
    6d14:	cmp	r3, #0
    6d18:	beq	6d24 <coda_cursor_read_int16_array+0x180>
    6d1c:	mvn	r3, #0
    6d20:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6d24:	ldr	r3, [fp, #-16]
    6d28:	cmp	r3, #1
    6d2c:	beq	6ddc <coda_cursor_read_int16_array+0x238>
    6d30:	cmp	r3, #2
    6d34:	beq	6e78 <coda_cursor_read_int16_array+0x2d4>
    6d38:	cmp	r3, #0
    6d3c:	bne	6e9c <coda_cursor_read_int16_array+0x2f8>
    6d40:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6d44:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6d48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6d4c:	bl	2970 <read_int8_array>
    6d50:	mov	r3, r0
    6d54:	cmp	r3, #0
    6d58:	beq	6d64 <coda_cursor_read_int16_array+0x1c0>
    6d5c:	mvn	r3, #0
    6d60:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6d64:	sub	r3, fp, #20
    6d68:	mov	r1, r3
    6d6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6d70:	bl	0 <coda_cursor_get_num_elements>
    6d74:	mov	r3, r0
    6d78:	cmp	r3, #0
    6d7c:	beq	6d88 <coda_cursor_read_int16_array+0x1e4>
    6d80:	mvn	r3, #0
    6d84:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6d88:	ldr	r3, [fp, #-20]	; 0xffffffec
    6d8c:	sub	r3, r3, #1
    6d90:	str	r3, [fp, #-8]
    6d94:	b	6dcc <coda_cursor_read_int16_array+0x228>
    6d98:	ldr	r3, [fp, #-8]
    6d9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6da0:	add	r3, r2, r3
    6da4:	ldrsb	r1, [r3]
    6da8:	ldr	r3, [fp, #-8]
    6dac:	lsl	r3, r3, #1
    6db0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6db4:	add	r3, r2, r3
    6db8:	sxth	r2, r1
    6dbc:	strh	r2, [r3]
    6dc0:	ldr	r3, [fp, #-8]
    6dc4:	sub	r3, r3, #1
    6dc8:	str	r3, [fp, #-8]
    6dcc:	ldr	r3, [fp, #-8]
    6dd0:	cmp	r3, #0
    6dd4:	bge	6d98 <coda_cursor_read_int16_array+0x1f4>
    6dd8:	b	6ecc <coda_cursor_read_int16_array+0x328>
    6ddc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6de0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6de4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6de8:	bl	2b14 <read_uint8_array>
    6dec:	mov	r3, r0
    6df0:	cmp	r3, #0
    6df4:	beq	6e00 <coda_cursor_read_int16_array+0x25c>
    6df8:	mvn	r3, #0
    6dfc:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6e00:	sub	r3, fp, #20
    6e04:	mov	r1, r3
    6e08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6e0c:	bl	0 <coda_cursor_get_num_elements>
    6e10:	mov	r3, r0
    6e14:	cmp	r3, #0
    6e18:	beq	6e24 <coda_cursor_read_int16_array+0x280>
    6e1c:	mvn	r3, #0
    6e20:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6e24:	ldr	r3, [fp, #-20]	; 0xffffffec
    6e28:	sub	r3, r3, #1
    6e2c:	str	r3, [fp, #-8]
    6e30:	b	6e68 <coda_cursor_read_int16_array+0x2c4>
    6e34:	ldr	r3, [fp, #-8]
    6e38:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6e3c:	add	r3, r2, r3
    6e40:	ldrb	r1, [r3]
    6e44:	ldr	r3, [fp, #-8]
    6e48:	lsl	r3, r3, #1
    6e4c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6e50:	add	r3, r2, r3
    6e54:	sxth	r2, r1
    6e58:	strh	r2, [r3]
    6e5c:	ldr	r3, [fp, #-8]
    6e60:	sub	r3, r3, #1
    6e64:	str	r3, [fp, #-8]
    6e68:	ldr	r3, [fp, #-8]
    6e6c:	cmp	r3, #0
    6e70:	bge	6e34 <coda_cursor_read_int16_array+0x290>
    6e74:	b	6ecc <coda_cursor_read_int16_array+0x328>
    6e78:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6e7c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6e80:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6e84:	bl	2c88 <read_int16_array>
    6e88:	mov	r3, r0
    6e8c:	cmp	r3, #0
    6e90:	beq	6ec8 <coda_cursor_read_int16_array+0x324>
    6e94:	mvn	r3, #0
    6e98:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6e9c:	ldr	r3, [fp, #-16]
    6ea0:	mov	r0, r3
    6ea4:	bl	0 <coda_type_get_native_type_name>
    6ea8:	mov	r3, r0
    6eac:	mov	r2, r3
    6eb0:	movw	r1, #0
    6eb4:	movt	r1, #0
    6eb8:	mvn	r0, #104	; 0x68
    6ebc:	bl	0 <coda_set_error>
    6ec0:	mvn	r3, #0
    6ec4:	b	6ed0 <coda_cursor_read_int16_array+0x32c>
    6ec8:	nop	{0}
    6ecc:	mov	r3, #0
    6ed0:	mov	r0, r3
    6ed4:	sub	sp, fp, #4
    6ed8:	ldr	fp, [sp]
    6edc:	add	sp, sp, #4
    6ee0:	pop	{pc}		; (ldr pc, [sp], #4)

00006ee4 <coda_cursor_read_uint16_array>:
    6ee4:	str	fp, [sp, #-8]!
    6ee8:	str	lr, [sp, #4]
    6eec:	add	fp, sp, #4
    6ef0:	sub	sp, sp, #32
    6ef4:	str	r0, [fp, #-24]	; 0xffffffe8
    6ef8:	str	r1, [fp, #-28]	; 0xffffffe4
    6efc:	str	r2, [fp, #-32]	; 0xffffffe0
    6f00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6f04:	cmp	r3, #0
    6f08:	beq	6f40 <coda_cursor_read_uint16_array+0x5c>
    6f0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6f10:	ldr	r3, [r3, #4]
    6f14:	cmp	r3, #0
    6f18:	ble	6f40 <coda_cursor_read_uint16_array+0x5c>
    6f1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6f20:	ldr	r3, [r3, #4]
    6f24:	sub	r3, r3, #1
    6f28:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6f2c:	lsl	r3, r3, #4
    6f30:	add	r3, r2, r3
    6f34:	ldr	r3, [r3, #8]
    6f38:	cmp	r3, #0
    6f3c:	bne	6f64 <coda_cursor_read_uint16_array+0x80>
    6f40:	mov	r3, #3120	; 0xc30
    6f44:	movw	r2, #0
    6f48:	movt	r2, #0
    6f4c:	movw	r1, #0
    6f50:	movt	r1, #0
    6f54:	mvn	r0, #99	; 0x63
    6f58:	bl	0 <coda_set_error>
    6f5c:	mvn	r3, #0
    6f60:	b	7170 <coda_cursor_read_uint16_array+0x28c>
    6f64:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6f68:	cmp	r3, #0
    6f6c:	bne	6f94 <coda_cursor_read_uint16_array+0xb0>
    6f70:	movw	r3, #3125	; 0xc35
    6f74:	movw	r2, #0
    6f78:	movt	r2, #0
    6f7c:	movw	r1, #0
    6f80:	movt	r1, #0
    6f84:	mvn	r0, #99	; 0x63
    6f88:	bl	0 <coda_set_error>
    6f8c:	mvn	r3, #0
    6f90:	b	7170 <coda_cursor_read_uint16_array+0x28c>
    6f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6f98:	ldr	r3, [r3, #4]
    6f9c:	sub	r3, r3, #1
    6fa0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6fa4:	lsl	r3, r3, #4
    6fa8:	add	r3, r2, r3
    6fac:	ldr	r3, [r3, #8]
    6fb0:	ldr	r3, [r3]
    6fb4:	cmp	r3, #99	; 0x63
    6fb8:	bhi	6fdc <coda_cursor_read_uint16_array+0xf8>
    6fbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6fc0:	ldr	r3, [r3, #4]
    6fc4:	sub	r3, r3, #1
    6fc8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6fcc:	lsl	r3, r3, #4
    6fd0:	add	r3, r2, r3
    6fd4:	ldr	r3, [r3, #8]
    6fd8:	b	6ffc <coda_cursor_read_uint16_array+0x118>
    6fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6fe0:	ldr	r3, [r3, #4]
    6fe4:	sub	r3, r3, #1
    6fe8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6fec:	lsl	r3, r3, #4
    6ff0:	add	r3, r2, r3
    6ff4:	ldr	r3, [r3, #8]
    6ff8:	ldr	r3, [r3, #4]
    6ffc:	str	r3, [fp, #-12]
    7000:	ldr	r3, [fp, #-12]
    7004:	ldr	r3, [r3, #8]
    7008:	cmp	r3, #1
    700c:	beq	7040 <coda_cursor_read_uint16_array+0x15c>
    7010:	ldr	r3, [fp, #-12]
    7014:	ldr	r3, [r3, #8]
    7018:	mov	r0, r3
    701c:	bl	0 <coda_type_get_class_name>
    7020:	mov	r3, r0
    7024:	mov	r2, r3
    7028:	movw	r1, #0
    702c:	movt	r1, #0
    7030:	mvn	r0, #104	; 0x68
    7034:	bl	0 <coda_set_error>
    7038:	mvn	r3, #0
    703c:	b	7170 <coda_cursor_read_uint16_array+0x28c>
    7040:	sub	r3, fp, #16
    7044:	mov	r1, r3
    7048:	ldr	r0, [fp, #-12]
    704c:	bl	10bc <get_array_element_read_type>
    7050:	mov	r3, r0
    7054:	cmp	r3, #0
    7058:	beq	7064 <coda_cursor_read_uint16_array+0x180>
    705c:	mvn	r3, #0
    7060:	b	7170 <coda_cursor_read_uint16_array+0x28c>
    7064:	ldr	r3, [fp, #-16]
    7068:	cmp	r3, #1
    706c:	beq	707c <coda_cursor_read_uint16_array+0x198>
    7070:	cmp	r3, #3
    7074:	beq	7118 <coda_cursor_read_uint16_array+0x234>
    7078:	b	713c <coda_cursor_read_uint16_array+0x258>
    707c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7080:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7084:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7088:	bl	2b14 <read_uint8_array>
    708c:	mov	r3, r0
    7090:	cmp	r3, #0
    7094:	beq	70a0 <coda_cursor_read_uint16_array+0x1bc>
    7098:	mvn	r3, #0
    709c:	b	7170 <coda_cursor_read_uint16_array+0x28c>
    70a0:	sub	r3, fp, #20
    70a4:	mov	r1, r3
    70a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    70ac:	bl	0 <coda_cursor_get_num_elements>
    70b0:	mov	r3, r0
    70b4:	cmp	r3, #0
    70b8:	beq	70c4 <coda_cursor_read_uint16_array+0x1e0>
    70bc:	mvn	r3, #0
    70c0:	b	7170 <coda_cursor_read_uint16_array+0x28c>
    70c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    70c8:	sub	r3, r3, #1
    70cc:	str	r3, [fp, #-8]
    70d0:	b	7108 <coda_cursor_read_uint16_array+0x224>
    70d4:	ldr	r3, [fp, #-8]
    70d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    70dc:	add	r3, r2, r3
    70e0:	ldrb	r1, [r3]
    70e4:	ldr	r3, [fp, #-8]
    70e8:	lsl	r3, r3, #1
    70ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
    70f0:	add	r3, r2, r3
    70f4:	uxth	r2, r1
    70f8:	strh	r2, [r3]
    70fc:	ldr	r3, [fp, #-8]
    7100:	sub	r3, r3, #1
    7104:	str	r3, [fp, #-8]
    7108:	ldr	r3, [fp, #-8]
    710c:	cmp	r3, #0
    7110:	bge	70d4 <coda_cursor_read_uint16_array+0x1f0>
    7114:	b	716c <coda_cursor_read_uint16_array+0x288>
    7118:	ldr	r2, [fp, #-32]	; 0xffffffe0
    711c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7120:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7124:	bl	2e2c <read_uint16_array>
    7128:	mov	r3, r0
    712c:	cmp	r3, #0
    7130:	beq	7168 <coda_cursor_read_uint16_array+0x284>
    7134:	mvn	r3, #0
    7138:	b	7170 <coda_cursor_read_uint16_array+0x28c>
    713c:	ldr	r3, [fp, #-16]
    7140:	mov	r0, r3
    7144:	bl	0 <coda_type_get_native_type_name>
    7148:	mov	r3, r0
    714c:	mov	r2, r3
    7150:	movw	r1, #0
    7154:	movt	r1, #0
    7158:	mvn	r0, #104	; 0x68
    715c:	bl	0 <coda_set_error>
    7160:	mvn	r3, #0
    7164:	b	7170 <coda_cursor_read_uint16_array+0x28c>
    7168:	nop	{0}
    716c:	mov	r3, #0
    7170:	mov	r0, r3
    7174:	sub	sp, fp, #4
    7178:	ldr	fp, [sp]
    717c:	add	sp, sp, #4
    7180:	pop	{pc}		; (ldr pc, [sp], #4)

00007184 <coda_cursor_read_int32_array>:
    7184:	str	fp, [sp, #-8]!
    7188:	str	lr, [sp, #4]
    718c:	add	fp, sp, #4
    7190:	sub	sp, sp, #32
    7194:	str	r0, [fp, #-24]	; 0xffffffe8
    7198:	str	r1, [fp, #-28]	; 0xffffffe4
    719c:	str	r2, [fp, #-32]	; 0xffffffe0
    71a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    71a4:	cmp	r3, #0
    71a8:	beq	71e0 <coda_cursor_read_int32_array+0x5c>
    71ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    71b0:	ldr	r3, [r3, #4]
    71b4:	cmp	r3, #0
    71b8:	ble	71e0 <coda_cursor_read_int32_array+0x5c>
    71bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    71c0:	ldr	r3, [r3, #4]
    71c4:	sub	r3, r3, #1
    71c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    71cc:	lsl	r3, r3, #4
    71d0:	add	r3, r2, r3
    71d4:	ldr	r3, [r3, #8]
    71d8:	cmp	r3, #0
    71dc:	bne	7204 <coda_cursor_read_int32_array+0x80>
    71e0:	movw	r3, #3199	; 0xc7f
    71e4:	movw	r2, #0
    71e8:	movt	r2, #0
    71ec:	movw	r1, #0
    71f0:	movt	r1, #0
    71f4:	mvn	r0, #99	; 0x63
    71f8:	bl	0 <coda_set_error>
    71fc:	mvn	r3, #0
    7200:	b	75f8 <coda_cursor_read_int32_array+0x474>
    7204:	ldr	r3, [fp, #-28]	; 0xffffffe4
    7208:	cmp	r3, #0
    720c:	bne	7234 <coda_cursor_read_int32_array+0xb0>
    7210:	movw	r3, #3204	; 0xc84
    7214:	movw	r2, #0
    7218:	movt	r2, #0
    721c:	movw	r1, #0
    7220:	movt	r1, #0
    7224:	mvn	r0, #99	; 0x63
    7228:	bl	0 <coda_set_error>
    722c:	mvn	r3, #0
    7230:	b	75f8 <coda_cursor_read_int32_array+0x474>
    7234:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7238:	ldr	r3, [r3, #4]
    723c:	sub	r3, r3, #1
    7240:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7244:	lsl	r3, r3, #4
    7248:	add	r3, r2, r3
    724c:	ldr	r3, [r3, #8]
    7250:	ldr	r3, [r3]
    7254:	cmp	r3, #99	; 0x63
    7258:	bhi	727c <coda_cursor_read_int32_array+0xf8>
    725c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7260:	ldr	r3, [r3, #4]
    7264:	sub	r3, r3, #1
    7268:	ldr	r2, [fp, #-24]	; 0xffffffe8
    726c:	lsl	r3, r3, #4
    7270:	add	r3, r2, r3
    7274:	ldr	r3, [r3, #8]
    7278:	b	729c <coda_cursor_read_int32_array+0x118>
    727c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7280:	ldr	r3, [r3, #4]
    7284:	sub	r3, r3, #1
    7288:	ldr	r2, [fp, #-24]	; 0xffffffe8
    728c:	lsl	r3, r3, #4
    7290:	add	r3, r2, r3
    7294:	ldr	r3, [r3, #8]
    7298:	ldr	r3, [r3, #4]
    729c:	str	r3, [fp, #-12]
    72a0:	ldr	r3, [fp, #-12]
    72a4:	ldr	r3, [r3, #8]
    72a8:	cmp	r3, #1
    72ac:	beq	72e0 <coda_cursor_read_int32_array+0x15c>
    72b0:	ldr	r3, [fp, #-12]
    72b4:	ldr	r3, [r3, #8]
    72b8:	mov	r0, r3
    72bc:	bl	0 <coda_type_get_class_name>
    72c0:	mov	r3, r0
    72c4:	mov	r2, r3
    72c8:	movw	r1, #0
    72cc:	movt	r1, #0
    72d0:	mvn	r0, #104	; 0x68
    72d4:	bl	0 <coda_set_error>
    72d8:	mvn	r3, #0
    72dc:	b	75f8 <coda_cursor_read_int32_array+0x474>
    72e0:	sub	r3, fp, #16
    72e4:	mov	r1, r3
    72e8:	ldr	r0, [fp, #-12]
    72ec:	bl	10bc <get_array_element_read_type>
    72f0:	mov	r3, r0
    72f4:	cmp	r3, #0
    72f8:	beq	7304 <coda_cursor_read_int32_array+0x180>
    72fc:	mvn	r3, #0
    7300:	b	75f8 <coda_cursor_read_int32_array+0x474>
    7304:	ldr	r3, [fp, #-16]
    7308:	cmp	r3, #4
    730c:	ldrls	pc, [pc, r3, lsl #2]
    7310:	b	75c4 <coda_cursor_read_int32_array+0x440>
    7314:	.word	0x00007328
    7318:	.word	0x000073c4
    731c:	.word	0x00007460
    7320:	.word	0x00007500
    7324:	.word	0x000075a0
    7328:	ldr	r2, [fp, #-32]	; 0xffffffe0
    732c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7330:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7334:	bl	2970 <read_int8_array>
    7338:	mov	r3, r0
    733c:	cmp	r3, #0
    7340:	beq	734c <coda_cursor_read_int32_array+0x1c8>
    7344:	mvn	r3, #0
    7348:	b	75f8 <coda_cursor_read_int32_array+0x474>
    734c:	sub	r3, fp, #20
    7350:	mov	r1, r3
    7354:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7358:	bl	0 <coda_cursor_get_num_elements>
    735c:	mov	r3, r0
    7360:	cmp	r3, #0
    7364:	beq	7370 <coda_cursor_read_int32_array+0x1ec>
    7368:	mvn	r3, #0
    736c:	b	75f8 <coda_cursor_read_int32_array+0x474>
    7370:	ldr	r3, [fp, #-20]	; 0xffffffec
    7374:	sub	r3, r3, #1
    7378:	str	r3, [fp, #-8]
    737c:	b	73b4 <coda_cursor_read_int32_array+0x230>
    7380:	ldr	r3, [fp, #-8]
    7384:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7388:	add	r3, r2, r3
    738c:	ldrsb	r1, [r3]
    7390:	ldr	r3, [fp, #-8]
    7394:	lsl	r3, r3, #2
    7398:	ldr	r2, [fp, #-28]	; 0xffffffe4
    739c:	add	r3, r2, r3
    73a0:	mov	r2, r1
    73a4:	str	r2, [r3]
    73a8:	ldr	r3, [fp, #-8]
    73ac:	sub	r3, r3, #1
    73b0:	str	r3, [fp, #-8]
    73b4:	ldr	r3, [fp, #-8]
    73b8:	cmp	r3, #0
    73bc:	bge	7380 <coda_cursor_read_int32_array+0x1fc>
    73c0:	b	75f4 <coda_cursor_read_int32_array+0x470>
    73c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    73c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    73cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    73d0:	bl	2b14 <read_uint8_array>
    73d4:	mov	r3, r0
    73d8:	cmp	r3, #0
    73dc:	beq	73e8 <coda_cursor_read_int32_array+0x264>
    73e0:	mvn	r3, #0
    73e4:	b	75f8 <coda_cursor_read_int32_array+0x474>
    73e8:	sub	r3, fp, #20
    73ec:	mov	r1, r3
    73f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    73f4:	bl	0 <coda_cursor_get_num_elements>
    73f8:	mov	r3, r0
    73fc:	cmp	r3, #0
    7400:	beq	740c <coda_cursor_read_int32_array+0x288>
    7404:	mvn	r3, #0
    7408:	b	75f8 <coda_cursor_read_int32_array+0x474>
    740c:	ldr	r3, [fp, #-20]	; 0xffffffec
    7410:	sub	r3, r3, #1
    7414:	str	r3, [fp, #-8]
    7418:	b	7450 <coda_cursor_read_int32_array+0x2cc>
    741c:	ldr	r3, [fp, #-8]
    7420:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7424:	add	r3, r2, r3
    7428:	ldrb	r1, [r3]
    742c:	ldr	r3, [fp, #-8]
    7430:	lsl	r3, r3, #2
    7434:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7438:	add	r3, r2, r3
    743c:	mov	r2, r1
    7440:	str	r2, [r3]
    7444:	ldr	r3, [fp, #-8]
    7448:	sub	r3, r3, #1
    744c:	str	r3, [fp, #-8]
    7450:	ldr	r3, [fp, #-8]
    7454:	cmp	r3, #0
    7458:	bge	741c <coda_cursor_read_int32_array+0x298>
    745c:	b	75f4 <coda_cursor_read_int32_array+0x470>
    7460:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7464:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7468:	ldr	r0, [fp, #-24]	; 0xffffffe8
    746c:	bl	2c88 <read_int16_array>
    7470:	mov	r3, r0
    7474:	cmp	r3, #0
    7478:	beq	7484 <coda_cursor_read_int32_array+0x300>
    747c:	mvn	r3, #0
    7480:	b	75f8 <coda_cursor_read_int32_array+0x474>
    7484:	sub	r3, fp, #20
    7488:	mov	r1, r3
    748c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7490:	bl	0 <coda_cursor_get_num_elements>
    7494:	mov	r3, r0
    7498:	cmp	r3, #0
    749c:	beq	74a8 <coda_cursor_read_int32_array+0x324>
    74a0:	mvn	r3, #0
    74a4:	b	75f8 <coda_cursor_read_int32_array+0x474>
    74a8:	ldr	r3, [fp, #-20]	; 0xffffffec
    74ac:	sub	r3, r3, #1
    74b0:	str	r3, [fp, #-8]
    74b4:	b	74f0 <coda_cursor_read_int32_array+0x36c>
    74b8:	ldr	r3, [fp, #-8]
    74bc:	lsl	r3, r3, #1
    74c0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    74c4:	add	r3, r2, r3
    74c8:	ldrsh	r1, [r3]
    74cc:	ldr	r3, [fp, #-8]
    74d0:	lsl	r3, r3, #2
    74d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    74d8:	add	r3, r2, r3
    74dc:	mov	r2, r1
    74e0:	str	r2, [r3]
    74e4:	ldr	r3, [fp, #-8]
    74e8:	sub	r3, r3, #1
    74ec:	str	r3, [fp, #-8]
    74f0:	ldr	r3, [fp, #-8]
    74f4:	cmp	r3, #0
    74f8:	bge	74b8 <coda_cursor_read_int32_array+0x334>
    74fc:	b	75f4 <coda_cursor_read_int32_array+0x470>
    7500:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7504:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7508:	ldr	r0, [fp, #-24]	; 0xffffffe8
    750c:	bl	2e2c <read_uint16_array>
    7510:	mov	r3, r0
    7514:	cmp	r3, #0
    7518:	beq	7524 <coda_cursor_read_int32_array+0x3a0>
    751c:	mvn	r3, #0
    7520:	b	75f8 <coda_cursor_read_int32_array+0x474>
    7524:	sub	r3, fp, #20
    7528:	mov	r1, r3
    752c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7530:	bl	0 <coda_cursor_get_num_elements>
    7534:	mov	r3, r0
    7538:	cmp	r3, #0
    753c:	beq	7548 <coda_cursor_read_int32_array+0x3c4>
    7540:	mvn	r3, #0
    7544:	b	75f8 <coda_cursor_read_int32_array+0x474>
    7548:	ldr	r3, [fp, #-20]	; 0xffffffec
    754c:	sub	r3, r3, #1
    7550:	str	r3, [fp, #-8]
    7554:	b	7590 <coda_cursor_read_int32_array+0x40c>
    7558:	ldr	r3, [fp, #-8]
    755c:	lsl	r3, r3, #1
    7560:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7564:	add	r3, r2, r3
    7568:	ldrh	r1, [r3]
    756c:	ldr	r3, [fp, #-8]
    7570:	lsl	r3, r3, #2
    7574:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7578:	add	r3, r2, r3
    757c:	mov	r2, r1
    7580:	str	r2, [r3]
    7584:	ldr	r3, [fp, #-8]
    7588:	sub	r3, r3, #1
    758c:	str	r3, [fp, #-8]
    7590:	ldr	r3, [fp, #-8]
    7594:	cmp	r3, #0
    7598:	bge	7558 <coda_cursor_read_int32_array+0x3d4>
    759c:	b	75f4 <coda_cursor_read_int32_array+0x470>
    75a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    75a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    75a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    75ac:	bl	2fa0 <read_int32_array>
    75b0:	mov	r3, r0
    75b4:	cmp	r3, #0
    75b8:	beq	75f0 <coda_cursor_read_int32_array+0x46c>
    75bc:	mvn	r3, #0
    75c0:	b	75f8 <coda_cursor_read_int32_array+0x474>
    75c4:	ldr	r3, [fp, #-16]
    75c8:	mov	r0, r3
    75cc:	bl	0 <coda_type_get_native_type_name>
    75d0:	mov	r3, r0
    75d4:	mov	r2, r3
    75d8:	movw	r1, #0
    75dc:	movt	r1, #0
    75e0:	mvn	r0, #104	; 0x68
    75e4:	bl	0 <coda_set_error>
    75e8:	mvn	r3, #0
    75ec:	b	75f8 <coda_cursor_read_int32_array+0x474>
    75f0:	nop	{0}
    75f4:	mov	r3, #0
    75f8:	mov	r0, r3
    75fc:	sub	sp, fp, #4
    7600:	ldr	fp, [sp]
    7604:	add	sp, sp, #4
    7608:	pop	{pc}		; (ldr pc, [sp], #4)

0000760c <coda_cursor_read_uint32_array>:
    760c:	str	fp, [sp, #-8]!
    7610:	str	lr, [sp, #4]
    7614:	add	fp, sp, #4
    7618:	sub	sp, sp, #32
    761c:	str	r0, [fp, #-24]	; 0xffffffe8
    7620:	str	r1, [fp, #-28]	; 0xffffffe4
    7624:	str	r2, [fp, #-32]	; 0xffffffe0
    7628:	ldr	r3, [fp, #-24]	; 0xffffffe8
    762c:	cmp	r3, #0
    7630:	beq	7668 <coda_cursor_read_uint32_array+0x5c>
    7634:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7638:	ldr	r3, [r3, #4]
    763c:	cmp	r3, #0
    7640:	ble	7668 <coda_cursor_read_uint32_array+0x5c>
    7644:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7648:	ldr	r3, [r3, #4]
    764c:	sub	r3, r3, #1
    7650:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7654:	lsl	r3, r3, #4
    7658:	add	r3, r2, r3
    765c:	ldr	r3, [r3, #8]
    7660:	cmp	r3, #0
    7664:	bne	768c <coda_cursor_read_uint32_array+0x80>
    7668:	movw	r3, #3318	; 0xcf6
    766c:	movw	r2, #0
    7670:	movt	r2, #0
    7674:	movw	r1, #0
    7678:	movt	r1, #0
    767c:	mvn	r0, #99	; 0x63
    7680:	bl	0 <coda_set_error>
    7684:	mvn	r3, #0
    7688:	b	793c <coda_cursor_read_uint32_array+0x330>
    768c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    7690:	cmp	r3, #0
    7694:	bne	76bc <coda_cursor_read_uint32_array+0xb0>
    7698:	movw	r3, #3323	; 0xcfb
    769c:	movw	r2, #0
    76a0:	movt	r2, #0
    76a4:	movw	r1, #0
    76a8:	movt	r1, #0
    76ac:	mvn	r0, #99	; 0x63
    76b0:	bl	0 <coda_set_error>
    76b4:	mvn	r3, #0
    76b8:	b	793c <coda_cursor_read_uint32_array+0x330>
    76bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    76c0:	ldr	r3, [r3, #4]
    76c4:	sub	r3, r3, #1
    76c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    76cc:	lsl	r3, r3, #4
    76d0:	add	r3, r2, r3
    76d4:	ldr	r3, [r3, #8]
    76d8:	ldr	r3, [r3]
    76dc:	cmp	r3, #99	; 0x63
    76e0:	bhi	7704 <coda_cursor_read_uint32_array+0xf8>
    76e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    76e8:	ldr	r3, [r3, #4]
    76ec:	sub	r3, r3, #1
    76f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    76f4:	lsl	r3, r3, #4
    76f8:	add	r3, r2, r3
    76fc:	ldr	r3, [r3, #8]
    7700:	b	7724 <coda_cursor_read_uint32_array+0x118>
    7704:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7708:	ldr	r3, [r3, #4]
    770c:	sub	r3, r3, #1
    7710:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7714:	lsl	r3, r3, #4
    7718:	add	r3, r2, r3
    771c:	ldr	r3, [r3, #8]
    7720:	ldr	r3, [r3, #4]
    7724:	str	r3, [fp, #-12]
    7728:	ldr	r3, [fp, #-12]
    772c:	ldr	r3, [r3, #8]
    7730:	cmp	r3, #1
    7734:	beq	7768 <coda_cursor_read_uint32_array+0x15c>
    7738:	ldr	r3, [fp, #-12]
    773c:	ldr	r3, [r3, #8]
    7740:	mov	r0, r3
    7744:	bl	0 <coda_type_get_class_name>
    7748:	mov	r3, r0
    774c:	mov	r2, r3
    7750:	movw	r1, #0
    7754:	movt	r1, #0
    7758:	mvn	r0, #104	; 0x68
    775c:	bl	0 <coda_set_error>
    7760:	mvn	r3, #0
    7764:	b	793c <coda_cursor_read_uint32_array+0x330>
    7768:	sub	r3, fp, #16
    776c:	mov	r1, r3
    7770:	ldr	r0, [fp, #-12]
    7774:	bl	10bc <get_array_element_read_type>
    7778:	mov	r3, r0
    777c:	cmp	r3, #0
    7780:	beq	778c <coda_cursor_read_uint32_array+0x180>
    7784:	mvn	r3, #0
    7788:	b	793c <coda_cursor_read_uint32_array+0x330>
    778c:	ldr	r3, [fp, #-16]
    7790:	cmp	r3, #3
    7794:	beq	7844 <coda_cursor_read_uint32_array+0x238>
    7798:	cmp	r3, #5
    779c:	beq	78e4 <coda_cursor_read_uint32_array+0x2d8>
    77a0:	cmp	r3, #1
    77a4:	bne	7908 <coda_cursor_read_uint32_array+0x2fc>
    77a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    77ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    77b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    77b4:	bl	2b14 <read_uint8_array>
    77b8:	mov	r3, r0
    77bc:	cmp	r3, #0
    77c0:	beq	77cc <coda_cursor_read_uint32_array+0x1c0>
    77c4:	mvn	r3, #0
    77c8:	b	793c <coda_cursor_read_uint32_array+0x330>
    77cc:	sub	r3, fp, #20
    77d0:	mov	r1, r3
    77d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    77d8:	bl	0 <coda_cursor_get_num_elements>
    77dc:	mov	r3, r0
    77e0:	cmp	r3, #0
    77e4:	beq	77f0 <coda_cursor_read_uint32_array+0x1e4>
    77e8:	mvn	r3, #0
    77ec:	b	793c <coda_cursor_read_uint32_array+0x330>
    77f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    77f4:	sub	r3, r3, #1
    77f8:	str	r3, [fp, #-8]
    77fc:	b	7834 <coda_cursor_read_uint32_array+0x228>
    7800:	ldr	r3, [fp, #-8]
    7804:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7808:	add	r3, r2, r3
    780c:	ldrb	r1, [r3]
    7810:	ldr	r3, [fp, #-8]
    7814:	lsl	r3, r3, #2
    7818:	ldr	r2, [fp, #-28]	; 0xffffffe4
    781c:	add	r3, r2, r3
    7820:	mov	r2, r1
    7824:	str	r2, [r3]
    7828:	ldr	r3, [fp, #-8]
    782c:	sub	r3, r3, #1
    7830:	str	r3, [fp, #-8]
    7834:	ldr	r3, [fp, #-8]
    7838:	cmp	r3, #0
    783c:	bge	7800 <coda_cursor_read_uint32_array+0x1f4>
    7840:	b	7938 <coda_cursor_read_uint32_array+0x32c>
    7844:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7848:	ldr	r1, [fp, #-28]	; 0xffffffe4
    784c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7850:	bl	2e2c <read_uint16_array>
    7854:	mov	r3, r0
    7858:	cmp	r3, #0
    785c:	beq	7868 <coda_cursor_read_uint32_array+0x25c>
    7860:	mvn	r3, #0
    7864:	b	793c <coda_cursor_read_uint32_array+0x330>
    7868:	sub	r3, fp, #20
    786c:	mov	r1, r3
    7870:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7874:	bl	0 <coda_cursor_get_num_elements>
    7878:	mov	r3, r0
    787c:	cmp	r3, #0
    7880:	beq	788c <coda_cursor_read_uint32_array+0x280>
    7884:	mvn	r3, #0
    7888:	b	793c <coda_cursor_read_uint32_array+0x330>
    788c:	ldr	r3, [fp, #-20]	; 0xffffffec
    7890:	sub	r3, r3, #1
    7894:	str	r3, [fp, #-8]
    7898:	b	78d4 <coda_cursor_read_uint32_array+0x2c8>
    789c:	ldr	r3, [fp, #-8]
    78a0:	lsl	r3, r3, #1
    78a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    78a8:	add	r3, r2, r3
    78ac:	ldrh	r1, [r3]
    78b0:	ldr	r3, [fp, #-8]
    78b4:	lsl	r3, r3, #2
    78b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    78bc:	add	r3, r2, r3
    78c0:	mov	r2, r1
    78c4:	str	r2, [r3]
    78c8:	ldr	r3, [fp, #-8]
    78cc:	sub	r3, r3, #1
    78d0:	str	r3, [fp, #-8]
    78d4:	ldr	r3, [fp, #-8]
    78d8:	cmp	r3, #0
    78dc:	bge	789c <coda_cursor_read_uint32_array+0x290>
    78e0:	b	7938 <coda_cursor_read_uint32_array+0x32c>
    78e4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    78e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    78ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    78f0:	bl	3144 <read_uint32_array>
    78f4:	mov	r3, r0
    78f8:	cmp	r3, #0
    78fc:	beq	7934 <coda_cursor_read_uint32_array+0x328>
    7900:	mvn	r3, #0
    7904:	b	793c <coda_cursor_read_uint32_array+0x330>
    7908:	ldr	r3, [fp, #-16]
    790c:	mov	r0, r3
    7910:	bl	0 <coda_type_get_native_type_name>
    7914:	mov	r3, r0
    7918:	mov	r2, r3
    791c:	movw	r1, #0
    7920:	movt	r1, #0
    7924:	mvn	r0, #104	; 0x68
    7928:	bl	0 <coda_set_error>
    792c:	mvn	r3, #0
    7930:	b	793c <coda_cursor_read_uint32_array+0x330>
    7934:	nop	{0}
    7938:	mov	r3, #0
    793c:	mov	r0, r3
    7940:	sub	sp, fp, #4
    7944:	ldr	fp, [sp]
    7948:	add	sp, sp, #4
    794c:	pop	{pc}		; (ldr pc, [sp], #4)

00007950 <coda_cursor_read_int64_array>:
    7950:	str	fp, [sp, #-8]!
    7954:	str	lr, [sp, #4]
    7958:	add	fp, sp, #4
    795c:	sub	sp, sp, #32
    7960:	str	r0, [fp, #-24]	; 0xffffffe8
    7964:	str	r1, [fp, #-28]	; 0xffffffe4
    7968:	str	r2, [fp, #-32]	; 0xffffffe0
    796c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7970:	cmp	r3, #0
    7974:	beq	79ac <coda_cursor_read_int64_array+0x5c>
    7978:	ldr	r3, [fp, #-24]	; 0xffffffe8
    797c:	ldr	r3, [r3, #4]
    7980:	cmp	r3, #0
    7984:	ble	79ac <coda_cursor_read_int64_array+0x5c>
    7988:	ldr	r3, [fp, #-24]	; 0xffffffe8
    798c:	ldr	r3, [r3, #4]
    7990:	sub	r3, r3, #1
    7994:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7998:	lsl	r3, r3, #4
    799c:	add	r3, r2, r3
    79a0:	ldr	r3, [r3, #8]
    79a4:	cmp	r3, #0
    79a8:	bne	79d0 <coda_cursor_read_int64_array+0x80>
    79ac:	movw	r3, #3413	; 0xd55
    79b0:	movw	r2, #0
    79b4:	movt	r2, #0
    79b8:	movw	r1, #0
    79bc:	movt	r1, #0
    79c0:	mvn	r0, #99	; 0x63
    79c4:	bl	0 <coda_set_error>
    79c8:	mvn	r3, #0
    79cc:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    79d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    79d4:	cmp	r3, #0
    79d8:	bne	7a00 <coda_cursor_read_int64_array+0xb0>
    79dc:	movw	r3, #3418	; 0xd5a
    79e0:	movw	r2, #0
    79e4:	movt	r2, #0
    79e8:	movw	r1, #0
    79ec:	movt	r1, #0
    79f0:	mvn	r0, #99	; 0x63
    79f4:	bl	0 <coda_set_error>
    79f8:	mvn	r3, #0
    79fc:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7a00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7a04:	ldr	r3, [r3, #4]
    7a08:	sub	r3, r3, #1
    7a0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7a10:	lsl	r3, r3, #4
    7a14:	add	r3, r2, r3
    7a18:	ldr	r3, [r3, #8]
    7a1c:	ldr	r3, [r3]
    7a20:	cmp	r3, #99	; 0x63
    7a24:	bhi	7a48 <coda_cursor_read_int64_array+0xf8>
    7a28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7a2c:	ldr	r3, [r3, #4]
    7a30:	sub	r3, r3, #1
    7a34:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7a38:	lsl	r3, r3, #4
    7a3c:	add	r3, r2, r3
    7a40:	ldr	r3, [r3, #8]
    7a44:	b	7a68 <coda_cursor_read_int64_array+0x118>
    7a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7a4c:	ldr	r3, [r3, #4]
    7a50:	sub	r3, r3, #1
    7a54:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7a58:	lsl	r3, r3, #4
    7a5c:	add	r3, r2, r3
    7a60:	ldr	r3, [r3, #8]
    7a64:	ldr	r3, [r3, #4]
    7a68:	str	r3, [fp, #-12]
    7a6c:	ldr	r3, [fp, #-12]
    7a70:	ldr	r3, [r3, #8]
    7a74:	cmp	r3, #1
    7a78:	beq	7aac <coda_cursor_read_int64_array+0x15c>
    7a7c:	ldr	r3, [fp, #-12]
    7a80:	ldr	r3, [r3, #8]
    7a84:	mov	r0, r3
    7a88:	bl	0 <coda_type_get_class_name>
    7a8c:	mov	r3, r0
    7a90:	mov	r2, r3
    7a94:	movw	r1, #0
    7a98:	movt	r1, #0
    7a9c:	mvn	r0, #104	; 0x68
    7aa0:	bl	0 <coda_set_error>
    7aa4:	mvn	r3, #0
    7aa8:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7aac:	sub	r3, fp, #16
    7ab0:	mov	r1, r3
    7ab4:	ldr	r0, [fp, #-12]
    7ab8:	bl	10bc <get_array_element_read_type>
    7abc:	mov	r3, r0
    7ac0:	cmp	r3, #0
    7ac4:	beq	7ad0 <coda_cursor_read_int64_array+0x180>
    7ac8:	mvn	r3, #0
    7acc:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7ad0:	ldr	r3, [fp, #-16]
    7ad4:	cmp	r3, #6
    7ad8:	ldrls	pc, [pc, r3, lsl #2]
    7adc:	b	7ef0 <coda_cursor_read_int64_array+0x5a0>
    7ae0:	.word	0x00007afc
    7ae4:	.word	0x00007b9c
    7ae8:	.word	0x00007c3c
    7aec:	.word	0x00007ce0
    7af0:	.word	0x00007d84
    7af4:	.word	0x00007e28
    7af8:	.word	0x00007ecc
    7afc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7b00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7b04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7b08:	bl	2970 <read_int8_array>
    7b0c:	mov	r3, r0
    7b10:	cmp	r3, #0
    7b14:	beq	7b20 <coda_cursor_read_int64_array+0x1d0>
    7b18:	mvn	r3, #0
    7b1c:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7b20:	sub	r3, fp, #20
    7b24:	mov	r1, r3
    7b28:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7b2c:	bl	0 <coda_cursor_get_num_elements>
    7b30:	mov	r3, r0
    7b34:	cmp	r3, #0
    7b38:	beq	7b44 <coda_cursor_read_int64_array+0x1f4>
    7b3c:	mvn	r3, #0
    7b40:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7b44:	ldr	r3, [fp, #-20]	; 0xffffffec
    7b48:	sub	r3, r3, #1
    7b4c:	str	r3, [fp, #-8]
    7b50:	b	7b8c <coda_cursor_read_int64_array+0x23c>
    7b54:	ldr	r3, [fp, #-8]
    7b58:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7b5c:	add	r3, r2, r3
    7b60:	ldrsb	r3, [r3]
    7b64:	ldr	r2, [fp, #-8]
    7b68:	lsl	r2, r2, #3
    7b6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7b70:	add	r1, r1, r2
    7b74:	sxtb	r2, r3
    7b78:	asr	r3, r2, #31
    7b7c:	strd	r2, [r1]
    7b80:	ldr	r3, [fp, #-8]
    7b84:	sub	r3, r3, #1
    7b88:	str	r3, [fp, #-8]
    7b8c:	ldr	r3, [fp, #-8]
    7b90:	cmp	r3, #0
    7b94:	bge	7b54 <coda_cursor_read_int64_array+0x204>
    7b98:	b	7f20 <coda_cursor_read_int64_array+0x5d0>
    7b9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7ba0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7ba4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7ba8:	bl	2b14 <read_uint8_array>
    7bac:	mov	r3, r0
    7bb0:	cmp	r3, #0
    7bb4:	beq	7bc0 <coda_cursor_read_int64_array+0x270>
    7bb8:	mvn	r3, #0
    7bbc:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7bc0:	sub	r3, fp, #20
    7bc4:	mov	r1, r3
    7bc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7bcc:	bl	0 <coda_cursor_get_num_elements>
    7bd0:	mov	r3, r0
    7bd4:	cmp	r3, #0
    7bd8:	beq	7be4 <coda_cursor_read_int64_array+0x294>
    7bdc:	mvn	r3, #0
    7be0:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7be4:	ldr	r3, [fp, #-20]	; 0xffffffec
    7be8:	sub	r3, r3, #1
    7bec:	str	r3, [fp, #-8]
    7bf0:	b	7c2c <coda_cursor_read_int64_array+0x2dc>
    7bf4:	ldr	r3, [fp, #-8]
    7bf8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7bfc:	add	r3, r2, r3
    7c00:	ldrb	r3, [r3]
    7c04:	ldr	r2, [fp, #-8]
    7c08:	lsl	r2, r2, #3
    7c0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7c10:	add	r1, r1, r2
    7c14:	uxtb	r2, r3
    7c18:	mov	r3, #0
    7c1c:	strd	r2, [r1]
    7c20:	ldr	r3, [fp, #-8]
    7c24:	sub	r3, r3, #1
    7c28:	str	r3, [fp, #-8]
    7c2c:	ldr	r3, [fp, #-8]
    7c30:	cmp	r3, #0
    7c34:	bge	7bf4 <coda_cursor_read_int64_array+0x2a4>
    7c38:	b	7f20 <coda_cursor_read_int64_array+0x5d0>
    7c3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7c40:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7c44:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7c48:	bl	2c88 <read_int16_array>
    7c4c:	mov	r3, r0
    7c50:	cmp	r3, #0
    7c54:	beq	7c60 <coda_cursor_read_int64_array+0x310>
    7c58:	mvn	r3, #0
    7c5c:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7c60:	sub	r3, fp, #20
    7c64:	mov	r1, r3
    7c68:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7c6c:	bl	0 <coda_cursor_get_num_elements>
    7c70:	mov	r3, r0
    7c74:	cmp	r3, #0
    7c78:	beq	7c84 <coda_cursor_read_int64_array+0x334>
    7c7c:	mvn	r3, #0
    7c80:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7c84:	ldr	r3, [fp, #-20]	; 0xffffffec
    7c88:	sub	r3, r3, #1
    7c8c:	str	r3, [fp, #-8]
    7c90:	b	7cd0 <coda_cursor_read_int64_array+0x380>
    7c94:	ldr	r3, [fp, #-8]
    7c98:	lsl	r3, r3, #1
    7c9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7ca0:	add	r3, r2, r3
    7ca4:	ldrsh	r3, [r3]
    7ca8:	ldr	r2, [fp, #-8]
    7cac:	lsl	r2, r2, #3
    7cb0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7cb4:	add	r1, r1, r2
    7cb8:	sxth	r2, r3
    7cbc:	asr	r3, r2, #31
    7cc0:	strd	r2, [r1]
    7cc4:	ldr	r3, [fp, #-8]
    7cc8:	sub	r3, r3, #1
    7ccc:	str	r3, [fp, #-8]
    7cd0:	ldr	r3, [fp, #-8]
    7cd4:	cmp	r3, #0
    7cd8:	bge	7c94 <coda_cursor_read_int64_array+0x344>
    7cdc:	b	7f20 <coda_cursor_read_int64_array+0x5d0>
    7ce0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7ce4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7ce8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7cec:	bl	2e2c <read_uint16_array>
    7cf0:	mov	r3, r0
    7cf4:	cmp	r3, #0
    7cf8:	beq	7d04 <coda_cursor_read_int64_array+0x3b4>
    7cfc:	mvn	r3, #0
    7d00:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7d04:	sub	r3, fp, #20
    7d08:	mov	r1, r3
    7d0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7d10:	bl	0 <coda_cursor_get_num_elements>
    7d14:	mov	r3, r0
    7d18:	cmp	r3, #0
    7d1c:	beq	7d28 <coda_cursor_read_int64_array+0x3d8>
    7d20:	mvn	r3, #0
    7d24:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7d28:	ldr	r3, [fp, #-20]	; 0xffffffec
    7d2c:	sub	r3, r3, #1
    7d30:	str	r3, [fp, #-8]
    7d34:	b	7d74 <coda_cursor_read_int64_array+0x424>
    7d38:	ldr	r3, [fp, #-8]
    7d3c:	lsl	r3, r3, #1
    7d40:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7d44:	add	r3, r2, r3
    7d48:	ldrh	r3, [r3]
    7d4c:	ldr	r2, [fp, #-8]
    7d50:	lsl	r2, r2, #3
    7d54:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7d58:	add	r1, r1, r2
    7d5c:	uxth	r2, r3
    7d60:	mov	r3, #0
    7d64:	strd	r2, [r1]
    7d68:	ldr	r3, [fp, #-8]
    7d6c:	sub	r3, r3, #1
    7d70:	str	r3, [fp, #-8]
    7d74:	ldr	r3, [fp, #-8]
    7d78:	cmp	r3, #0
    7d7c:	bge	7d38 <coda_cursor_read_int64_array+0x3e8>
    7d80:	b	7f20 <coda_cursor_read_int64_array+0x5d0>
    7d84:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7d88:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7d8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7d90:	bl	2fa0 <read_int32_array>
    7d94:	mov	r3, r0
    7d98:	cmp	r3, #0
    7d9c:	beq	7da8 <coda_cursor_read_int64_array+0x458>
    7da0:	mvn	r3, #0
    7da4:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7da8:	sub	r3, fp, #20
    7dac:	mov	r1, r3
    7db0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7db4:	bl	0 <coda_cursor_get_num_elements>
    7db8:	mov	r3, r0
    7dbc:	cmp	r3, #0
    7dc0:	beq	7dcc <coda_cursor_read_int64_array+0x47c>
    7dc4:	mvn	r3, #0
    7dc8:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7dcc:	ldr	r3, [fp, #-20]	; 0xffffffec
    7dd0:	sub	r3, r3, #1
    7dd4:	str	r3, [fp, #-8]
    7dd8:	b	7e18 <coda_cursor_read_int64_array+0x4c8>
    7ddc:	ldr	r3, [fp, #-8]
    7de0:	lsl	r3, r3, #2
    7de4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7de8:	add	r3, r2, r3
    7dec:	ldr	r3, [r3]
    7df0:	ldr	r2, [fp, #-8]
    7df4:	lsl	r2, r2, #3
    7df8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7dfc:	add	r1, r1, r2
    7e00:	mov	r2, r3
    7e04:	asr	r3, r2, #31
    7e08:	strd	r2, [r1]
    7e0c:	ldr	r3, [fp, #-8]
    7e10:	sub	r3, r3, #1
    7e14:	str	r3, [fp, #-8]
    7e18:	ldr	r3, [fp, #-8]
    7e1c:	cmp	r3, #0
    7e20:	bge	7ddc <coda_cursor_read_int64_array+0x48c>
    7e24:	b	7f20 <coda_cursor_read_int64_array+0x5d0>
    7e28:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7e2c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7e30:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7e34:	bl	3144 <read_uint32_array>
    7e38:	mov	r3, r0
    7e3c:	cmp	r3, #0
    7e40:	beq	7e4c <coda_cursor_read_int64_array+0x4fc>
    7e44:	mvn	r3, #0
    7e48:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7e4c:	sub	r3, fp, #20
    7e50:	mov	r1, r3
    7e54:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7e58:	bl	0 <coda_cursor_get_num_elements>
    7e5c:	mov	r3, r0
    7e60:	cmp	r3, #0
    7e64:	beq	7e70 <coda_cursor_read_int64_array+0x520>
    7e68:	mvn	r3, #0
    7e6c:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7e70:	ldr	r3, [fp, #-20]	; 0xffffffec
    7e74:	sub	r3, r3, #1
    7e78:	str	r3, [fp, #-8]
    7e7c:	b	7ebc <coda_cursor_read_int64_array+0x56c>
    7e80:	ldr	r3, [fp, #-8]
    7e84:	lsl	r3, r3, #2
    7e88:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7e8c:	add	r3, r2, r3
    7e90:	ldr	r3, [r3]
    7e94:	ldr	r2, [fp, #-8]
    7e98:	lsl	r2, r2, #3
    7e9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7ea0:	add	r1, r1, r2
    7ea4:	mov	r2, r3
    7ea8:	mov	r3, #0
    7eac:	strd	r2, [r1]
    7eb0:	ldr	r3, [fp, #-8]
    7eb4:	sub	r3, r3, #1
    7eb8:	str	r3, [fp, #-8]
    7ebc:	ldr	r3, [fp, #-8]
    7ec0:	cmp	r3, #0
    7ec4:	bge	7e80 <coda_cursor_read_int64_array+0x530>
    7ec8:	b	7f20 <coda_cursor_read_int64_array+0x5d0>
    7ecc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7ed0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7ed4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7ed8:	bl	32b8 <read_int64_array>
    7edc:	mov	r3, r0
    7ee0:	cmp	r3, #0
    7ee4:	beq	7f1c <coda_cursor_read_int64_array+0x5cc>
    7ee8:	mvn	r3, #0
    7eec:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7ef0:	ldr	r3, [fp, #-16]
    7ef4:	mov	r0, r3
    7ef8:	bl	0 <coda_type_get_native_type_name>
    7efc:	mov	r3, r0
    7f00:	mov	r2, r3
    7f04:	movw	r1, #0
    7f08:	movt	r1, #0
    7f0c:	mvn	r0, #104	; 0x68
    7f10:	bl	0 <coda_set_error>
    7f14:	mvn	r3, #0
    7f18:	b	7f24 <coda_cursor_read_int64_array+0x5d4>
    7f1c:	nop	{0}
    7f20:	mov	r3, #0
    7f24:	mov	r0, r3
    7f28:	sub	sp, fp, #4
    7f2c:	ldr	fp, [sp]
    7f30:	add	sp, sp, #4
    7f34:	pop	{pc}		; (ldr pc, [sp], #4)

00007f38 <coda_cursor_read_uint64_array>:
    7f38:	str	fp, [sp, #-8]!
    7f3c:	str	lr, [sp, #4]
    7f40:	add	fp, sp, #4
    7f44:	sub	sp, sp, #32
    7f48:	str	r0, [fp, #-24]	; 0xffffffe8
    7f4c:	str	r1, [fp, #-28]	; 0xffffffe4
    7f50:	str	r2, [fp, #-32]	; 0xffffffe0
    7f54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7f58:	cmp	r3, #0
    7f5c:	beq	7f94 <coda_cursor_read_uint64_array+0x5c>
    7f60:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7f64:	ldr	r3, [r3, #4]
    7f68:	cmp	r3, #0
    7f6c:	ble	7f94 <coda_cursor_read_uint64_array+0x5c>
    7f70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7f74:	ldr	r3, [r3, #4]
    7f78:	sub	r3, r3, #1
    7f7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7f80:	lsl	r3, r3, #4
    7f84:	add	r3, r2, r3
    7f88:	ldr	r3, [r3, #8]
    7f8c:	cmp	r3, #0
    7f90:	bne	7fb8 <coda_cursor_read_uint64_array+0x80>
    7f94:	movw	r3, #3561	; 0xde9
    7f98:	movw	r2, #0
    7f9c:	movt	r2, #0
    7fa0:	movw	r1, #0
    7fa4:	movt	r1, #0
    7fa8:	mvn	r0, #99	; 0x63
    7fac:	bl	0 <coda_set_error>
    7fb0:	mvn	r3, #0
    7fb4:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    7fb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    7fbc:	cmp	r3, #0
    7fc0:	bne	7fe8 <coda_cursor_read_uint64_array+0xb0>
    7fc4:	movw	r3, #3566	; 0xdee
    7fc8:	movw	r2, #0
    7fcc:	movt	r2, #0
    7fd0:	movw	r1, #0
    7fd4:	movt	r1, #0
    7fd8:	mvn	r0, #99	; 0x63
    7fdc:	bl	0 <coda_set_error>
    7fe0:	mvn	r3, #0
    7fe4:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    7fe8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7fec:	ldr	r3, [r3, #4]
    7ff0:	sub	r3, r3, #1
    7ff4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7ff8:	lsl	r3, r3, #4
    7ffc:	add	r3, r2, r3
    8000:	ldr	r3, [r3, #8]
    8004:	ldr	r3, [r3]
    8008:	cmp	r3, #99	; 0x63
    800c:	bhi	8030 <coda_cursor_read_uint64_array+0xf8>
    8010:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8014:	ldr	r3, [r3, #4]
    8018:	sub	r3, r3, #1
    801c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8020:	lsl	r3, r3, #4
    8024:	add	r3, r2, r3
    8028:	ldr	r3, [r3, #8]
    802c:	b	8050 <coda_cursor_read_uint64_array+0x118>
    8030:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8034:	ldr	r3, [r3, #4]
    8038:	sub	r3, r3, #1
    803c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8040:	lsl	r3, r3, #4
    8044:	add	r3, r2, r3
    8048:	ldr	r3, [r3, #8]
    804c:	ldr	r3, [r3, #4]
    8050:	str	r3, [fp, #-12]
    8054:	ldr	r3, [fp, #-12]
    8058:	ldr	r3, [r3, #8]
    805c:	cmp	r3, #1
    8060:	beq	8094 <coda_cursor_read_uint64_array+0x15c>
    8064:	ldr	r3, [fp, #-12]
    8068:	ldr	r3, [r3, #8]
    806c:	mov	r0, r3
    8070:	bl	0 <coda_type_get_class_name>
    8074:	mov	r3, r0
    8078:	mov	r2, r3
    807c:	movw	r1, #0
    8080:	movt	r1, #0
    8084:	mvn	r0, #104	; 0x68
    8088:	bl	0 <coda_set_error>
    808c:	mvn	r3, #0
    8090:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    8094:	sub	r3, fp, #16
    8098:	mov	r1, r3
    809c:	ldr	r0, [fp, #-12]
    80a0:	bl	10bc <get_array_element_read_type>
    80a4:	mov	r3, r0
    80a8:	cmp	r3, #0
    80ac:	beq	80b8 <coda_cursor_read_uint64_array+0x180>
    80b0:	mvn	r3, #0
    80b4:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    80b8:	ldr	r3, [fp, #-16]
    80bc:	sub	r3, r3, #1
    80c0:	cmp	r3, #6
    80c4:	ldrls	pc, [pc, r3, lsl #2]
    80c8:	b	82f4 <coda_cursor_read_uint64_array+0x3bc>
    80cc:	.word	0x000080e8
    80d0:	.word	0x000082f4
    80d4:	.word	0x00008188
    80d8:	.word	0x000082f4
    80dc:	.word	0x0000822c
    80e0:	.word	0x000082f4
    80e4:	.word	0x000082d0
    80e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    80ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    80f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    80f4:	bl	2b14 <read_uint8_array>
    80f8:	mov	r3, r0
    80fc:	cmp	r3, #0
    8100:	beq	810c <coda_cursor_read_uint64_array+0x1d4>
    8104:	mvn	r3, #0
    8108:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    810c:	sub	r3, fp, #20
    8110:	mov	r1, r3
    8114:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8118:	bl	0 <coda_cursor_get_num_elements>
    811c:	mov	r3, r0
    8120:	cmp	r3, #0
    8124:	beq	8130 <coda_cursor_read_uint64_array+0x1f8>
    8128:	mvn	r3, #0
    812c:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    8130:	ldr	r3, [fp, #-20]	; 0xffffffec
    8134:	sub	r3, r3, #1
    8138:	str	r3, [fp, #-8]
    813c:	b	8178 <coda_cursor_read_uint64_array+0x240>
    8140:	ldr	r3, [fp, #-8]
    8144:	ldr	r2, [fp, #-28]	; 0xffffffe4
    8148:	add	r3, r2, r3
    814c:	ldrb	r3, [r3]
    8150:	ldr	r2, [fp, #-8]
    8154:	lsl	r2, r2, #3
    8158:	ldr	r1, [fp, #-28]	; 0xffffffe4
    815c:	add	r1, r1, r2
    8160:	uxtb	r2, r3
    8164:	mov	r3, #0
    8168:	strd	r2, [r1]
    816c:	ldr	r3, [fp, #-8]
    8170:	sub	r3, r3, #1
    8174:	str	r3, [fp, #-8]
    8178:	ldr	r3, [fp, #-8]
    817c:	cmp	r3, #0
    8180:	bge	8140 <coda_cursor_read_uint64_array+0x208>
    8184:	b	8324 <coda_cursor_read_uint64_array+0x3ec>
    8188:	ldr	r2, [fp, #-32]	; 0xffffffe0
    818c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8190:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8194:	bl	2e2c <read_uint16_array>
    8198:	mov	r3, r0
    819c:	cmp	r3, #0
    81a0:	beq	81ac <coda_cursor_read_uint64_array+0x274>
    81a4:	mvn	r3, #0
    81a8:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    81ac:	sub	r3, fp, #20
    81b0:	mov	r1, r3
    81b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    81b8:	bl	0 <coda_cursor_get_num_elements>
    81bc:	mov	r3, r0
    81c0:	cmp	r3, #0
    81c4:	beq	81d0 <coda_cursor_read_uint64_array+0x298>
    81c8:	mvn	r3, #0
    81cc:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    81d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    81d4:	sub	r3, r3, #1
    81d8:	str	r3, [fp, #-8]
    81dc:	b	821c <coda_cursor_read_uint64_array+0x2e4>
    81e0:	ldr	r3, [fp, #-8]
    81e4:	lsl	r3, r3, #1
    81e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    81ec:	add	r3, r2, r3
    81f0:	ldrh	r3, [r3]
    81f4:	ldr	r2, [fp, #-8]
    81f8:	lsl	r2, r2, #3
    81fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8200:	add	r1, r1, r2
    8204:	uxth	r2, r3
    8208:	mov	r3, #0
    820c:	strd	r2, [r1]
    8210:	ldr	r3, [fp, #-8]
    8214:	sub	r3, r3, #1
    8218:	str	r3, [fp, #-8]
    821c:	ldr	r3, [fp, #-8]
    8220:	cmp	r3, #0
    8224:	bge	81e0 <coda_cursor_read_uint64_array+0x2a8>
    8228:	b	8324 <coda_cursor_read_uint64_array+0x3ec>
    822c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8230:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8234:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8238:	bl	3144 <read_uint32_array>
    823c:	mov	r3, r0
    8240:	cmp	r3, #0
    8244:	beq	8250 <coda_cursor_read_uint64_array+0x318>
    8248:	mvn	r3, #0
    824c:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    8250:	sub	r3, fp, #20
    8254:	mov	r1, r3
    8258:	ldr	r0, [fp, #-24]	; 0xffffffe8
    825c:	bl	0 <coda_cursor_get_num_elements>
    8260:	mov	r3, r0
    8264:	cmp	r3, #0
    8268:	beq	8274 <coda_cursor_read_uint64_array+0x33c>
    826c:	mvn	r3, #0
    8270:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    8274:	ldr	r3, [fp, #-20]	; 0xffffffec
    8278:	sub	r3, r3, #1
    827c:	str	r3, [fp, #-8]
    8280:	b	82c0 <coda_cursor_read_uint64_array+0x388>
    8284:	ldr	r3, [fp, #-8]
    8288:	lsl	r3, r3, #2
    828c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    8290:	add	r3, r2, r3
    8294:	ldr	r3, [r3]
    8298:	ldr	r2, [fp, #-8]
    829c:	lsl	r2, r2, #3
    82a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    82a4:	add	r1, r1, r2
    82a8:	mov	r2, r3
    82ac:	mov	r3, #0
    82b0:	strd	r2, [r1]
    82b4:	ldr	r3, [fp, #-8]
    82b8:	sub	r3, r3, #1
    82bc:	str	r3, [fp, #-8]
    82c0:	ldr	r3, [fp, #-8]
    82c4:	cmp	r3, #0
    82c8:	bge	8284 <coda_cursor_read_uint64_array+0x34c>
    82cc:	b	8324 <coda_cursor_read_uint64_array+0x3ec>
    82d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    82d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    82d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    82dc:	bl	342c <read_uint64_array>
    82e0:	mov	r3, r0
    82e4:	cmp	r3, #0
    82e8:	beq	8320 <coda_cursor_read_uint64_array+0x3e8>
    82ec:	mvn	r3, #0
    82f0:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    82f4:	ldr	r3, [fp, #-16]
    82f8:	mov	r0, r3
    82fc:	bl	0 <coda_type_get_native_type_name>
    8300:	mov	r3, r0
    8304:	mov	r2, r3
    8308:	movw	r1, #0
    830c:	movt	r1, #0
    8310:	mvn	r0, #104	; 0x68
    8314:	bl	0 <coda_set_error>
    8318:	mvn	r3, #0
    831c:	b	8328 <coda_cursor_read_uint64_array+0x3f0>
    8320:	nop	{0}
    8324:	mov	r3, #0
    8328:	mov	r0, r3
    832c:	sub	sp, fp, #4
    8330:	ldr	fp, [sp]
    8334:	add	sp, sp, #4
    8338:	pop	{pc}		; (ldr pc, [sp], #4)

0000833c <coda_cursor_read_float_array>:
    833c:	str	r4, [sp, #-12]!
    8340:	str	fp, [sp, #4]
    8344:	str	lr, [sp, #8]
    8348:	add	fp, sp, #8
    834c:	sub	sp, sp, #68	; 0x44
    8350:	str	r0, [fp, #-56]	; 0xffffffc8
    8354:	str	r1, [fp, #-60]	; 0xffffffc4
    8358:	str	r2, [fp, #-64]	; 0xffffffc0
    835c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8360:	cmp	r3, #0
    8364:	beq	839c <coda_cursor_read_float_array+0x60>
    8368:	ldr	r3, [fp, #-56]	; 0xffffffc8
    836c:	ldr	r3, [r3, #4]
    8370:	cmp	r3, #0
    8374:	ble	839c <coda_cursor_read_float_array+0x60>
    8378:	ldr	r3, [fp, #-56]	; 0xffffffc8
    837c:	ldr	r3, [r3, #4]
    8380:	sub	r3, r3, #1
    8384:	ldr	r2, [fp, #-56]	; 0xffffffc8
    8388:	lsl	r3, r3, #4
    838c:	add	r3, r2, r3
    8390:	ldr	r3, [r3, #8]
    8394:	cmp	r3, #0
    8398:	bne	83c0 <coda_cursor_read_float_array+0x84>
    839c:	movw	r3, #3673	; 0xe59
    83a0:	movw	r2, #0
    83a4:	movt	r2, #0
    83a8:	movw	r1, #0
    83ac:	movt	r1, #0
    83b0:	mvn	r0, #99	; 0x63
    83b4:	bl	0 <coda_set_error>
    83b8:	mvn	r3, #0
    83bc:	b	8d5c <coda_cursor_read_float_array+0xa20>
    83c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    83c4:	cmp	r3, #0
    83c8:	bne	83f0 <coda_cursor_read_float_array+0xb4>
    83cc:	movw	r3, #3678	; 0xe5e
    83d0:	movw	r2, #0
    83d4:	movt	r2, #0
    83d8:	movw	r1, #0
    83dc:	movt	r1, #0
    83e0:	mvn	r0, #99	; 0x63
    83e4:	bl	0 <coda_set_error>
    83e8:	mvn	r3, #0
    83ec:	b	8d5c <coda_cursor_read_float_array+0xa20>
    83f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    83f4:	ldr	r3, [r3, #4]
    83f8:	sub	r3, r3, #1
    83fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
    8400:	lsl	r3, r3, #4
    8404:	add	r3, r2, r3
    8408:	ldr	r3, [r3, #8]
    840c:	ldr	r3, [r3]
    8410:	cmp	r3, #99	; 0x63
    8414:	bhi	8438 <coda_cursor_read_float_array+0xfc>
    8418:	ldr	r3, [fp, #-56]	; 0xffffffc8
    841c:	ldr	r3, [r3, #4]
    8420:	sub	r3, r3, #1
    8424:	ldr	r2, [fp, #-56]	; 0xffffffc8
    8428:	lsl	r3, r3, #4
    842c:	add	r3, r2, r3
    8430:	ldr	r3, [r3, #8]
    8434:	b	8458 <coda_cursor_read_float_array+0x11c>
    8438:	ldr	r3, [fp, #-56]	; 0xffffffc8
    843c:	ldr	r3, [r3, #4]
    8440:	sub	r3, r3, #1
    8444:	ldr	r2, [fp, #-56]	; 0xffffffc8
    8448:	lsl	r3, r3, #4
    844c:	add	r3, r2, r3
    8450:	ldr	r3, [r3, #8]
    8454:	ldr	r3, [r3, #4]
    8458:	str	r3, [fp, #-20]	; 0xffffffec
    845c:	ldr	r3, [fp, #-20]	; 0xffffffec
    8460:	ldr	r3, [r3, #8]
    8464:	cmp	r3, #1
    8468:	beq	849c <coda_cursor_read_float_array+0x160>
    846c:	ldr	r3, [fp, #-20]	; 0xffffffec
    8470:	ldr	r3, [r3, #8]
    8474:	mov	r0, r3
    8478:	bl	0 <coda_type_get_class_name>
    847c:	mov	r3, r0
    8480:	mov	r2, r3
    8484:	movw	r1, #0
    8488:	movt	r1, #0
    848c:	mvn	r0, #104	; 0x68
    8490:	bl	0 <coda_set_error>
    8494:	mvn	r3, #0
    8498:	b	8d5c <coda_cursor_read_float_array+0xa20>
    849c:	sub	r2, fp, #44	; 0x2c
    84a0:	sub	r3, fp, #40	; 0x28
    84a4:	mov	r1, r3
    84a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    84ac:	bl	115c <get_array_element_unconverted_read_type>
    84b0:	mov	r3, r0
    84b4:	cmp	r3, #0
    84b8:	beq	84c4 <coda_cursor_read_float_array+0x188>
    84bc:	mvn	r3, #0
    84c0:	b	8d5c <coda_cursor_read_float_array+0xa20>
    84c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    84c8:	cmp	r3, #0
    84cc:	beq	85d8 <coda_cursor_read_float_array+0x29c>
    84d0:	sub	r3, fp, #48	; 0x30
    84d4:	mov	r1, r3
    84d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    84dc:	bl	0 <coda_cursor_get_num_elements>
    84e0:	mov	r3, r0
    84e4:	cmp	r3, #0
    84e8:	beq	84f4 <coda_cursor_read_float_array+0x1b8>
    84ec:	mvn	r3, #0
    84f0:	b	8d5c <coda_cursor_read_float_array+0xa20>
    84f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    84f8:	lsl	r3, r3, #3
    84fc:	mov	r0, r3
    8500:	bl	0 <malloc>
    8504:	mov	r3, r0
    8508:	str	r3, [fp, #-24]	; 0xffffffe8
    850c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8510:	cmp	r3, #0
    8514:	bne	8548 <coda_cursor_read_float_array+0x20c>
    8518:	ldr	r3, [fp, #-48]	; 0xffffffd0
    851c:	lsl	r2, r3, #3
    8520:	movw	r3, #3707	; 0xe7b
    8524:	str	r3, [sp]
    8528:	movw	r3, #0
    852c:	movt	r3, #0
    8530:	movw	r1, #0
    8534:	movt	r1, #0
    8538:	mvn	r0, #0
    853c:	bl	0 <coda_set_error>
    8540:	mvn	r3, #0
    8544:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8548:	ldr	r2, [fp, #-64]	; 0xffffffc0
    854c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8550:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8554:	bl	8d74 <coda_cursor_read_double_array>
    8558:	mov	r3, r0
    855c:	cmp	r3, #0
    8560:	beq	8574 <coda_cursor_read_float_array+0x238>
    8564:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8568:	bl	0 <free>
    856c:	mvn	r3, #0
    8570:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8574:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8578:	sub	r3, r3, #1
    857c:	str	r3, [fp, #-16]
    8580:	b	85bc <coda_cursor_read_float_array+0x280>
    8584:	ldr	r3, [fp, #-16]
    8588:	lsl	r3, r3, #3
    858c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8590:	add	r3, r2, r3
    8594:	vldr	d7, [r3]
    8598:	ldr	r3, [fp, #-16]
    859c:	lsl	r3, r3, #2
    85a0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    85a4:	add	r3, r2, r3
    85a8:	vcvt.f32.f64	s15, d7
    85ac:	vstr	s15, [r3]
    85b0:	ldr	r3, [fp, #-16]
    85b4:	sub	r3, r3, #1
    85b8:	str	r3, [fp, #-16]
    85bc:	ldr	r3, [fp, #-16]
    85c0:	cmp	r3, #0
    85c4:	bge	8584 <coda_cursor_read_float_array+0x248>
    85c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    85cc:	bl	0 <free>
    85d0:	mov	r3, #0
    85d4:	b	8d5c <coda_cursor_read_float_array+0xa20>
    85d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    85dc:	cmp	r3, #9
    85e0:	ldrls	pc, [pc, r3, lsl #2]
    85e4:	b	8d28 <coda_cursor_read_float_array+0x9ec>
    85e8:	.word	0x00008610
    85ec:	.word	0x000086b0
    85f0:	.word	0x00008750
    85f4:	.word	0x000087f4
    85f8:	.word	0x00008898
    85fc:	.word	0x0000893c
    8600:	.word	0x000089e0
    8604:	.word	0x00008af0
    8608:	.word	0x00008c00
    860c:	.word	0x00008c24
    8610:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8614:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8618:	ldr	r0, [fp, #-56]	; 0xffffffc8
    861c:	bl	2970 <read_int8_array>
    8620:	mov	r3, r0
    8624:	cmp	r3, #0
    8628:	beq	8634 <coda_cursor_read_float_array+0x2f8>
    862c:	mvn	r3, #0
    8630:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8634:	sub	r3, fp, #48	; 0x30
    8638:	mov	r1, r3
    863c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8640:	bl	0 <coda_cursor_get_num_elements>
    8644:	mov	r3, r0
    8648:	cmp	r3, #0
    864c:	beq	8658 <coda_cursor_read_float_array+0x31c>
    8650:	mvn	r3, #0
    8654:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8658:	ldr	r3, [fp, #-48]	; 0xffffffd0
    865c:	sub	r3, r3, #1
    8660:	str	r3, [fp, #-16]
    8664:	b	86a0 <coda_cursor_read_float_array+0x364>
    8668:	ldr	r3, [fp, #-16]
    866c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8670:	add	r3, r2, r3
    8674:	ldrsb	r1, [r3]
    8678:	ldr	r3, [fp, #-16]
    867c:	lsl	r3, r3, #2
    8680:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8684:	add	r3, r2, r3
    8688:	vmov	s15, r1
    868c:	vcvt.f32.s32	s15, s15
    8690:	vstr	s15, [r3]
    8694:	ldr	r3, [fp, #-16]
    8698:	sub	r3, r3, #1
    869c:	str	r3, [fp, #-16]
    86a0:	ldr	r3, [fp, #-16]
    86a4:	cmp	r3, #0
    86a8:	bge	8668 <coda_cursor_read_float_array+0x32c>
    86ac:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    86b0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    86b4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    86b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    86bc:	bl	2b14 <read_uint8_array>
    86c0:	mov	r3, r0
    86c4:	cmp	r3, #0
    86c8:	beq	86d4 <coda_cursor_read_float_array+0x398>
    86cc:	mvn	r3, #0
    86d0:	b	8d5c <coda_cursor_read_float_array+0xa20>
    86d4:	sub	r3, fp, #48	; 0x30
    86d8:	mov	r1, r3
    86dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    86e0:	bl	0 <coda_cursor_get_num_elements>
    86e4:	mov	r3, r0
    86e8:	cmp	r3, #0
    86ec:	beq	86f8 <coda_cursor_read_float_array+0x3bc>
    86f0:	mvn	r3, #0
    86f4:	b	8d5c <coda_cursor_read_float_array+0xa20>
    86f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    86fc:	sub	r3, r3, #1
    8700:	str	r3, [fp, #-16]
    8704:	b	8740 <coda_cursor_read_float_array+0x404>
    8708:	ldr	r3, [fp, #-16]
    870c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8710:	add	r3, r2, r3
    8714:	ldrb	r1, [r3]
    8718:	ldr	r3, [fp, #-16]
    871c:	lsl	r3, r3, #2
    8720:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8724:	add	r3, r2, r3
    8728:	vmov	s15, r1
    872c:	vcvt.f32.u32	s15, s15
    8730:	vstr	s15, [r3]
    8734:	ldr	r3, [fp, #-16]
    8738:	sub	r3, r3, #1
    873c:	str	r3, [fp, #-16]
    8740:	ldr	r3, [fp, #-16]
    8744:	cmp	r3, #0
    8748:	bge	8708 <coda_cursor_read_float_array+0x3cc>
    874c:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    8750:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8754:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8758:	ldr	r0, [fp, #-56]	; 0xffffffc8
    875c:	bl	2c88 <read_int16_array>
    8760:	mov	r3, r0
    8764:	cmp	r3, #0
    8768:	beq	8774 <coda_cursor_read_float_array+0x438>
    876c:	mvn	r3, #0
    8770:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8774:	sub	r3, fp, #48	; 0x30
    8778:	mov	r1, r3
    877c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8780:	bl	0 <coda_cursor_get_num_elements>
    8784:	mov	r3, r0
    8788:	cmp	r3, #0
    878c:	beq	8798 <coda_cursor_read_float_array+0x45c>
    8790:	mvn	r3, #0
    8794:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8798:	ldr	r3, [fp, #-48]	; 0xffffffd0
    879c:	sub	r3, r3, #1
    87a0:	str	r3, [fp, #-16]
    87a4:	b	87e4 <coda_cursor_read_float_array+0x4a8>
    87a8:	ldr	r3, [fp, #-16]
    87ac:	lsl	r3, r3, #1
    87b0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    87b4:	add	r3, r2, r3
    87b8:	ldrsh	r1, [r3]
    87bc:	ldr	r3, [fp, #-16]
    87c0:	lsl	r3, r3, #2
    87c4:	ldr	r2, [fp, #-60]	; 0xffffffc4
    87c8:	add	r3, r2, r3
    87cc:	vmov	s15, r1
    87d0:	vcvt.f32.s32	s15, s15
    87d4:	vstr	s15, [r3]
    87d8:	ldr	r3, [fp, #-16]
    87dc:	sub	r3, r3, #1
    87e0:	str	r3, [fp, #-16]
    87e4:	ldr	r3, [fp, #-16]
    87e8:	cmp	r3, #0
    87ec:	bge	87a8 <coda_cursor_read_float_array+0x46c>
    87f0:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    87f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    87f8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    87fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8800:	bl	2e2c <read_uint16_array>
    8804:	mov	r3, r0
    8808:	cmp	r3, #0
    880c:	beq	8818 <coda_cursor_read_float_array+0x4dc>
    8810:	mvn	r3, #0
    8814:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8818:	sub	r3, fp, #48	; 0x30
    881c:	mov	r1, r3
    8820:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8824:	bl	0 <coda_cursor_get_num_elements>
    8828:	mov	r3, r0
    882c:	cmp	r3, #0
    8830:	beq	883c <coda_cursor_read_float_array+0x500>
    8834:	mvn	r3, #0
    8838:	b	8d5c <coda_cursor_read_float_array+0xa20>
    883c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8840:	sub	r3, r3, #1
    8844:	str	r3, [fp, #-16]
    8848:	b	8888 <coda_cursor_read_float_array+0x54c>
    884c:	ldr	r3, [fp, #-16]
    8850:	lsl	r3, r3, #1
    8854:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8858:	add	r3, r2, r3
    885c:	ldrh	r1, [r3]
    8860:	ldr	r3, [fp, #-16]
    8864:	lsl	r3, r3, #2
    8868:	ldr	r2, [fp, #-60]	; 0xffffffc4
    886c:	add	r3, r2, r3
    8870:	vmov	s15, r1
    8874:	vcvt.f32.u32	s15, s15
    8878:	vstr	s15, [r3]
    887c:	ldr	r3, [fp, #-16]
    8880:	sub	r3, r3, #1
    8884:	str	r3, [fp, #-16]
    8888:	ldr	r3, [fp, #-16]
    888c:	cmp	r3, #0
    8890:	bge	884c <coda_cursor_read_float_array+0x510>
    8894:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    8898:	ldr	r2, [fp, #-64]	; 0xffffffc0
    889c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    88a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    88a4:	bl	2fa0 <read_int32_array>
    88a8:	mov	r3, r0
    88ac:	cmp	r3, #0
    88b0:	beq	88bc <coda_cursor_read_float_array+0x580>
    88b4:	mvn	r3, #0
    88b8:	b	8d5c <coda_cursor_read_float_array+0xa20>
    88bc:	sub	r3, fp, #48	; 0x30
    88c0:	mov	r1, r3
    88c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    88c8:	bl	0 <coda_cursor_get_num_elements>
    88cc:	mov	r3, r0
    88d0:	cmp	r3, #0
    88d4:	beq	88e0 <coda_cursor_read_float_array+0x5a4>
    88d8:	mvn	r3, #0
    88dc:	b	8d5c <coda_cursor_read_float_array+0xa20>
    88e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    88e4:	sub	r3, r3, #1
    88e8:	str	r3, [fp, #-16]
    88ec:	b	892c <coda_cursor_read_float_array+0x5f0>
    88f0:	ldr	r3, [fp, #-16]
    88f4:	lsl	r3, r3, #2
    88f8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    88fc:	add	r3, r2, r3
    8900:	ldr	r1, [r3]
    8904:	ldr	r3, [fp, #-16]
    8908:	lsl	r3, r3, #2
    890c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8910:	add	r3, r2, r3
    8914:	vmov	s15, r1
    8918:	vcvt.f32.s32	s15, s15
    891c:	vstr	s15, [r3]
    8920:	ldr	r3, [fp, #-16]
    8924:	sub	r3, r3, #1
    8928:	str	r3, [fp, #-16]
    892c:	ldr	r3, [fp, #-16]
    8930:	cmp	r3, #0
    8934:	bge	88f0 <coda_cursor_read_float_array+0x5b4>
    8938:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    893c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8940:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8944:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8948:	bl	3144 <read_uint32_array>
    894c:	mov	r3, r0
    8950:	cmp	r3, #0
    8954:	beq	8960 <coda_cursor_read_float_array+0x624>
    8958:	mvn	r3, #0
    895c:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8960:	sub	r3, fp, #48	; 0x30
    8964:	mov	r1, r3
    8968:	ldr	r0, [fp, #-56]	; 0xffffffc8
    896c:	bl	0 <coda_cursor_get_num_elements>
    8970:	mov	r3, r0
    8974:	cmp	r3, #0
    8978:	beq	8984 <coda_cursor_read_float_array+0x648>
    897c:	mvn	r3, #0
    8980:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8984:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8988:	sub	r3, r3, #1
    898c:	str	r3, [fp, #-16]
    8990:	b	89d0 <coda_cursor_read_float_array+0x694>
    8994:	ldr	r3, [fp, #-16]
    8998:	lsl	r3, r3, #2
    899c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    89a0:	add	r3, r2, r3
    89a4:	ldr	r1, [r3]
    89a8:	ldr	r3, [fp, #-16]
    89ac:	lsl	r3, r3, #2
    89b0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    89b4:	add	r3, r2, r3
    89b8:	vmov	s15, r1
    89bc:	vcvt.f32.u32	s15, s15
    89c0:	vstr	s15, [r3]
    89c4:	ldr	r3, [fp, #-16]
    89c8:	sub	r3, r3, #1
    89cc:	str	r3, [fp, #-16]
    89d0:	ldr	r3, [fp, #-16]
    89d4:	cmp	r3, #0
    89d8:	bge	8994 <coda_cursor_read_float_array+0x658>
    89dc:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    89e0:	sub	r3, fp, #48	; 0x30
    89e4:	mov	r1, r3
    89e8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    89ec:	bl	0 <coda_cursor_get_num_elements>
    89f0:	mov	r3, r0
    89f4:	cmp	r3, #0
    89f8:	beq	8a04 <coda_cursor_read_float_array+0x6c8>
    89fc:	mvn	r3, #0
    8a00:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8a04:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8a08:	lsl	r3, r3, #3
    8a0c:	mov	r0, r3
    8a10:	bl	0 <malloc>
    8a14:	mov	r3, r0
    8a18:	str	r3, [fp, #-28]	; 0xffffffe4
    8a1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8a20:	cmp	r3, #0
    8a24:	bne	8a58 <coda_cursor_read_float_array+0x71c>
    8a28:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8a2c:	lsl	r2, r3, #3
    8a30:	movw	r3, #3820	; 0xeec
    8a34:	str	r3, [sp]
    8a38:	movw	r3, #0
    8a3c:	movt	r3, #0
    8a40:	movw	r1, #0
    8a44:	movt	r1, #0
    8a48:	mvn	r0, #0
    8a4c:	bl	0 <coda_set_error>
    8a50:	mvn	r3, #0
    8a54:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8a58:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8a5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8a60:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8a64:	bl	32b8 <read_int64_array>
    8a68:	mov	r3, r0
    8a6c:	cmp	r3, #0
    8a70:	beq	8a84 <coda_cursor_read_float_array+0x748>
    8a74:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8a78:	bl	0 <free>
    8a7c:	mvn	r3, #0
    8a80:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8a84:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8a88:	sub	r3, r3, #1
    8a8c:	str	r3, [fp, #-16]
    8a90:	b	8ad8 <coda_cursor_read_float_array+0x79c>
    8a94:	ldr	r3, [fp, #-16]
    8a98:	lsl	r3, r3, #3
    8a9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    8aa0:	add	r3, r2, r3
    8aa4:	ldrd	r2, [r3]
    8aa8:	ldr	r1, [fp, #-16]
    8aac:	lsl	r1, r1, #2
    8ab0:	ldr	r0, [fp, #-60]	; 0xffffffc4
    8ab4:	add	r4, r0, r1
    8ab8:	mov	r0, r2
    8abc:	mov	r1, r3
    8ac0:	bl	0 <__aeabi_l2f>
    8ac4:	mov	r3, r0
    8ac8:	str	r3, [r4]
    8acc:	ldr	r3, [fp, #-16]
    8ad0:	sub	r3, r3, #1
    8ad4:	str	r3, [fp, #-16]
    8ad8:	ldr	r3, [fp, #-16]
    8adc:	cmp	r3, #0
    8ae0:	bge	8a94 <coda_cursor_read_float_array+0x758>
    8ae4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8ae8:	bl	0 <free>
    8aec:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    8af0:	sub	r3, fp, #48	; 0x30
    8af4:	mov	r1, r3
    8af8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8afc:	bl	0 <coda_cursor_get_num_elements>
    8b00:	mov	r3, r0
    8b04:	cmp	r3, #0
    8b08:	beq	8b14 <coda_cursor_read_float_array+0x7d8>
    8b0c:	mvn	r3, #0
    8b10:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8b14:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8b18:	lsl	r3, r3, #3
    8b1c:	mov	r0, r3
    8b20:	bl	0 <malloc>
    8b24:	mov	r3, r0
    8b28:	str	r3, [fp, #-32]	; 0xffffffe0
    8b2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    8b30:	cmp	r3, #0
    8b34:	bne	8b68 <coda_cursor_read_float_array+0x82c>
    8b38:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8b3c:	lsl	r2, r3, #3
    8b40:	movw	r3, #3847	; 0xf07
    8b44:	str	r3, [sp]
    8b48:	movw	r3, #0
    8b4c:	movt	r3, #0
    8b50:	movw	r1, #0
    8b54:	movt	r1, #0
    8b58:	mvn	r0, #0
    8b5c:	bl	0 <coda_set_error>
    8b60:	mvn	r3, #0
    8b64:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8b68:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8b6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8b70:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8b74:	bl	342c <read_uint64_array>
    8b78:	mov	r3, r0
    8b7c:	cmp	r3, #0
    8b80:	beq	8b94 <coda_cursor_read_float_array+0x858>
    8b84:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8b88:	bl	0 <free>
    8b8c:	mvn	r3, #0
    8b90:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8b94:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8b98:	sub	r3, r3, #1
    8b9c:	str	r3, [fp, #-16]
    8ba0:	b	8be8 <coda_cursor_read_float_array+0x8ac>
    8ba4:	ldr	r3, [fp, #-16]
    8ba8:	lsl	r3, r3, #3
    8bac:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8bb0:	add	r3, r2, r3
    8bb4:	ldrd	r2, [r3]
    8bb8:	ldr	r1, [fp, #-16]
    8bbc:	lsl	r1, r1, #2
    8bc0:	ldr	r0, [fp, #-60]	; 0xffffffc4
    8bc4:	add	r4, r0, r1
    8bc8:	mov	r0, r2
    8bcc:	mov	r1, r3
    8bd0:	bl	0 <__aeabi_ul2f>
    8bd4:	mov	r3, r0
    8bd8:	str	r3, [r4]
    8bdc:	ldr	r3, [fp, #-16]
    8be0:	sub	r3, r3, #1
    8be4:	str	r3, [fp, #-16]
    8be8:	ldr	r3, [fp, #-16]
    8bec:	cmp	r3, #0
    8bf0:	bge	8ba4 <coda_cursor_read_float_array+0x868>
    8bf4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8bf8:	bl	0 <free>
    8bfc:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    8c00:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8c04:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8c08:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8c0c:	bl	3574 <read_float_array>
    8c10:	mov	r3, r0
    8c14:	cmp	r3, #0
    8c18:	beq	8d54 <coda_cursor_read_float_array+0xa18>
    8c1c:	mvn	r3, #0
    8c20:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8c24:	sub	r3, fp, #48	; 0x30
    8c28:	mov	r1, r3
    8c2c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8c30:	bl	0 <coda_cursor_get_num_elements>
    8c34:	mov	r3, r0
    8c38:	cmp	r3, #0
    8c3c:	beq	8c48 <coda_cursor_read_float_array+0x90c>
    8c40:	mvn	r3, #0
    8c44:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8c48:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8c4c:	lsl	r3, r3, #3
    8c50:	mov	r0, r3
    8c54:	bl	0 <malloc>
    8c58:	mov	r3, r0
    8c5c:	str	r3, [fp, #-36]	; 0xffffffdc
    8c60:	ldr	r3, [fp, #-36]	; 0xffffffdc
    8c64:	cmp	r3, #0
    8c68:	bne	8c9c <coda_cursor_read_float_array+0x960>
    8c6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8c70:	lsl	r2, r3, #3
    8c74:	movw	r3, #3880	; 0xf28
    8c78:	str	r3, [sp]
    8c7c:	movw	r3, #0
    8c80:	movt	r3, #0
    8c84:	movw	r1, #0
    8c88:	movt	r1, #0
    8c8c:	mvn	r0, #0
    8c90:	bl	0 <coda_set_error>
    8c94:	mvn	r3, #0
    8c98:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8c9c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8ca0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    8ca4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8ca8:	bl	3720 <read_double_array>
    8cac:	mov	r3, r0
    8cb0:	cmp	r3, #0
    8cb4:	beq	8cc8 <coda_cursor_read_float_array+0x98c>
    8cb8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    8cbc:	bl	0 <free>
    8cc0:	mvn	r3, #0
    8cc4:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8cc8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8ccc:	sub	r3, r3, #1
    8cd0:	str	r3, [fp, #-16]
    8cd4:	b	8d10 <coda_cursor_read_float_array+0x9d4>
    8cd8:	ldr	r3, [fp, #-16]
    8cdc:	lsl	r3, r3, #3
    8ce0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    8ce4:	add	r3, r2, r3
    8ce8:	vldr	d7, [r3]
    8cec:	ldr	r3, [fp, #-16]
    8cf0:	lsl	r3, r3, #2
    8cf4:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8cf8:	add	r3, r2, r3
    8cfc:	vcvt.f32.f64	s15, d7
    8d00:	vstr	s15, [r3]
    8d04:	ldr	r3, [fp, #-16]
    8d08:	sub	r3, r3, #1
    8d0c:	str	r3, [fp, #-16]
    8d10:	ldr	r3, [fp, #-16]
    8d14:	cmp	r3, #0
    8d18:	bge	8cd8 <coda_cursor_read_float_array+0x99c>
    8d1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    8d20:	bl	0 <free>
    8d24:	b	8d58 <coda_cursor_read_float_array+0xa1c>
    8d28:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8d2c:	mov	r0, r3
    8d30:	bl	0 <coda_type_get_native_type_name>
    8d34:	mov	r3, r0
    8d38:	mov	r2, r3
    8d3c:	movw	r1, #0
    8d40:	movt	r1, #0
    8d44:	mvn	r0, #104	; 0x68
    8d48:	bl	0 <coda_set_error>
    8d4c:	mvn	r3, #0
    8d50:	b	8d5c <coda_cursor_read_float_array+0xa20>
    8d54:	nop	{0}
    8d58:	mov	r3, #0
    8d5c:	mov	r0, r3
    8d60:	sub	sp, fp, #8
    8d64:	ldr	r4, [sp]
    8d68:	ldr	fp, [sp, #4]
    8d6c:	add	sp, sp, #8
    8d70:	pop	{pc}		; (ldr pc, [sp], #4)

00008d74 <coda_cursor_read_double_array>:
    8d74:	str	r4, [sp, #-12]!
    8d78:	str	fp, [sp, #4]
    8d7c:	str	lr, [sp, #8]
    8d80:	add	fp, sp, #8
    8d84:	sub	sp, sp, #44	; 0x2c
    8d88:	str	r0, [fp, #-40]	; 0xffffffd8
    8d8c:	str	r1, [fp, #-44]	; 0xffffffd4
    8d90:	str	r2, [fp, #-48]	; 0xffffffd0
    8d94:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8d98:	cmp	r3, #0
    8d9c:	beq	8dd4 <coda_cursor_read_double_array+0x60>
    8da0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8da4:	ldr	r3, [r3, #4]
    8da8:	cmp	r3, #0
    8dac:	ble	8dd4 <coda_cursor_read_double_array+0x60>
    8db0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8db4:	ldr	r3, [r3, #4]
    8db8:	sub	r3, r3, #1
    8dbc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8dc0:	lsl	r3, r3, #4
    8dc4:	add	r3, r2, r3
    8dc8:	ldr	r3, [r3, #8]
    8dcc:	cmp	r3, #0
    8dd0:	bne	8df8 <coda_cursor_read_double_array+0x84>
    8dd4:	movw	r3, #3937	; 0xf61
    8dd8:	movw	r2, #0
    8ddc:	movt	r2, #0
    8de0:	movw	r1, #0
    8de4:	movt	r1, #0
    8de8:	mvn	r0, #99	; 0x63
    8dec:	bl	0 <coda_set_error>
    8df0:	mvn	r3, #0
    8df4:	b	9648 <coda_cursor_read_double_array+0x8d4>
    8df8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    8dfc:	cmp	r3, #0
    8e00:	bne	8e28 <coda_cursor_read_double_array+0xb4>
    8e04:	movw	r3, #3942	; 0xf66
    8e08:	movw	r2, #0
    8e0c:	movt	r2, #0
    8e10:	movw	r1, #0
    8e14:	movt	r1, #0
    8e18:	mvn	r0, #99	; 0x63
    8e1c:	bl	0 <coda_set_error>
    8e20:	mvn	r3, #0
    8e24:	b	9648 <coda_cursor_read_double_array+0x8d4>
    8e28:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8e2c:	ldr	r3, [r3, #4]
    8e30:	sub	r3, r3, #1
    8e34:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8e38:	lsl	r3, r3, #4
    8e3c:	add	r3, r2, r3
    8e40:	ldr	r3, [r3, #8]
    8e44:	ldr	r3, [r3]
    8e48:	cmp	r3, #99	; 0x63
    8e4c:	bhi	8e70 <coda_cursor_read_double_array+0xfc>
    8e50:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8e54:	ldr	r3, [r3, #4]
    8e58:	sub	r3, r3, #1
    8e5c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8e60:	lsl	r3, r3, #4
    8e64:	add	r3, r2, r3
    8e68:	ldr	r3, [r3, #8]
    8e6c:	b	8e90 <coda_cursor_read_double_array+0x11c>
    8e70:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8e74:	ldr	r3, [r3, #4]
    8e78:	sub	r3, r3, #1
    8e7c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8e80:	lsl	r3, r3, #4
    8e84:	add	r3, r2, r3
    8e88:	ldr	r3, [r3, #8]
    8e8c:	ldr	r3, [r3, #4]
    8e90:	str	r3, [fp, #-20]	; 0xffffffec
    8e94:	ldr	r3, [fp, #-20]	; 0xffffffec
    8e98:	ldr	r3, [r3, #8]
    8e9c:	cmp	r3, #1
    8ea0:	beq	8ed4 <coda_cursor_read_double_array+0x160>
    8ea4:	ldr	r3, [fp, #-20]	; 0xffffffec
    8ea8:	ldr	r3, [r3, #8]
    8eac:	mov	r0, r3
    8eb0:	bl	0 <coda_type_get_class_name>
    8eb4:	mov	r3, r0
    8eb8:	mov	r2, r3
    8ebc:	movw	r1, #0
    8ec0:	movt	r1, #0
    8ec4:	mvn	r0, #104	; 0x68
    8ec8:	bl	0 <coda_set_error>
    8ecc:	mvn	r3, #0
    8ed0:	b	9648 <coda_cursor_read_double_array+0x8d4>
    8ed4:	sub	r2, fp, #28
    8ed8:	sub	r3, fp, #24
    8edc:	mov	r1, r3
    8ee0:	ldr	r0, [fp, #-20]	; 0xffffffec
    8ee4:	bl	115c <get_array_element_unconverted_read_type>
    8ee8:	mov	r3, r0
    8eec:	cmp	r3, #0
    8ef0:	beq	8efc <coda_cursor_read_double_array+0x188>
    8ef4:	mvn	r3, #0
    8ef8:	b	9648 <coda_cursor_read_double_array+0x8d4>
    8efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8f00:	cmp	r3, #9
    8f04:	ldrls	pc, [pc, r3, lsl #2]
    8f08:	b	9528 <coda_cursor_read_double_array+0x7b4>
    8f0c:	.word	0x00008f34
    8f10:	.word	0x00008fd4
    8f14:	.word	0x00009074
    8f18:	.word	0x00009118
    8f1c:	.word	0x000091bc
    8f20:	.word	0x00009260
    8f24:	.word	0x00009304
    8f28:	.word	0x000093b4
    8f2c:	.word	0x00009464
    8f30:	.word	0x00009504
    8f34:	ldr	r2, [fp, #-48]	; 0xffffffd0
    8f38:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8f3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8f40:	bl	2970 <read_int8_array>
    8f44:	mov	r3, r0
    8f48:	cmp	r3, #0
    8f4c:	beq	8f58 <coda_cursor_read_double_array+0x1e4>
    8f50:	mvn	r3, #0
    8f54:	b	9648 <coda_cursor_read_double_array+0x8d4>
    8f58:	sub	r3, fp, #32
    8f5c:	mov	r1, r3
    8f60:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8f64:	bl	0 <coda_cursor_get_num_elements>
    8f68:	mov	r3, r0
    8f6c:	cmp	r3, #0
    8f70:	beq	8f7c <coda_cursor_read_double_array+0x208>
    8f74:	mvn	r3, #0
    8f78:	b	9648 <coda_cursor_read_double_array+0x8d4>
    8f7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    8f80:	sub	r3, r3, #1
    8f84:	str	r3, [fp, #-16]
    8f88:	b	8fc4 <coda_cursor_read_double_array+0x250>
    8f8c:	ldr	r3, [fp, #-16]
    8f90:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8f94:	add	r3, r2, r3
    8f98:	ldrsb	r1, [r3]
    8f9c:	ldr	r3, [fp, #-16]
    8fa0:	lsl	r3, r3, #3
    8fa4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8fa8:	add	r3, r2, r3
    8fac:	vmov	s15, r1
    8fb0:	vcvt.f64.s32	d7, s15
    8fb4:	vstr	d7, [r3]
    8fb8:	ldr	r3, [fp, #-16]
    8fbc:	sub	r3, r3, #1
    8fc0:	str	r3, [fp, #-16]
    8fc4:	ldr	r3, [fp, #-16]
    8fc8:	cmp	r3, #0
    8fcc:	bge	8f8c <coda_cursor_read_double_array+0x218>
    8fd0:	b	9558 <coda_cursor_read_double_array+0x7e4>
    8fd4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    8fd8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8fdc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8fe0:	bl	2b14 <read_uint8_array>
    8fe4:	mov	r3, r0
    8fe8:	cmp	r3, #0
    8fec:	beq	8ff8 <coda_cursor_read_double_array+0x284>
    8ff0:	mvn	r3, #0
    8ff4:	b	9648 <coda_cursor_read_double_array+0x8d4>
    8ff8:	sub	r3, fp, #32
    8ffc:	mov	r1, r3
    9000:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9004:	bl	0 <coda_cursor_get_num_elements>
    9008:	mov	r3, r0
    900c:	cmp	r3, #0
    9010:	beq	901c <coda_cursor_read_double_array+0x2a8>
    9014:	mvn	r3, #0
    9018:	b	9648 <coda_cursor_read_double_array+0x8d4>
    901c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9020:	sub	r3, r3, #1
    9024:	str	r3, [fp, #-16]
    9028:	b	9064 <coda_cursor_read_double_array+0x2f0>
    902c:	ldr	r3, [fp, #-16]
    9030:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9034:	add	r3, r2, r3
    9038:	ldrb	r1, [r3]
    903c:	ldr	r3, [fp, #-16]
    9040:	lsl	r3, r3, #3
    9044:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9048:	add	r3, r2, r3
    904c:	vmov	s15, r1
    9050:	vcvt.f64.u32	d7, s15
    9054:	vstr	d7, [r3]
    9058:	ldr	r3, [fp, #-16]
    905c:	sub	r3, r3, #1
    9060:	str	r3, [fp, #-16]
    9064:	ldr	r3, [fp, #-16]
    9068:	cmp	r3, #0
    906c:	bge	902c <coda_cursor_read_double_array+0x2b8>
    9070:	b	9558 <coda_cursor_read_double_array+0x7e4>
    9074:	ldr	r2, [fp, #-48]	; 0xffffffd0
    9078:	ldr	r1, [fp, #-44]	; 0xffffffd4
    907c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9080:	bl	2c88 <read_int16_array>
    9084:	mov	r3, r0
    9088:	cmp	r3, #0
    908c:	beq	9098 <coda_cursor_read_double_array+0x324>
    9090:	mvn	r3, #0
    9094:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9098:	sub	r3, fp, #32
    909c:	mov	r1, r3
    90a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    90a4:	bl	0 <coda_cursor_get_num_elements>
    90a8:	mov	r3, r0
    90ac:	cmp	r3, #0
    90b0:	beq	90bc <coda_cursor_read_double_array+0x348>
    90b4:	mvn	r3, #0
    90b8:	b	9648 <coda_cursor_read_double_array+0x8d4>
    90bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    90c0:	sub	r3, r3, #1
    90c4:	str	r3, [fp, #-16]
    90c8:	b	9108 <coda_cursor_read_double_array+0x394>
    90cc:	ldr	r3, [fp, #-16]
    90d0:	lsl	r3, r3, #1
    90d4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    90d8:	add	r3, r2, r3
    90dc:	ldrsh	r1, [r3]
    90e0:	ldr	r3, [fp, #-16]
    90e4:	lsl	r3, r3, #3
    90e8:	ldr	r2, [fp, #-44]	; 0xffffffd4
    90ec:	add	r3, r2, r3
    90f0:	vmov	s15, r1
    90f4:	vcvt.f64.s32	d7, s15
    90f8:	vstr	d7, [r3]
    90fc:	ldr	r3, [fp, #-16]
    9100:	sub	r3, r3, #1
    9104:	str	r3, [fp, #-16]
    9108:	ldr	r3, [fp, #-16]
    910c:	cmp	r3, #0
    9110:	bge	90cc <coda_cursor_read_double_array+0x358>
    9114:	b	9558 <coda_cursor_read_double_array+0x7e4>
    9118:	ldr	r2, [fp, #-48]	; 0xffffffd0
    911c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9120:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9124:	bl	2e2c <read_uint16_array>
    9128:	mov	r3, r0
    912c:	cmp	r3, #0
    9130:	beq	913c <coda_cursor_read_double_array+0x3c8>
    9134:	mvn	r3, #0
    9138:	b	9648 <coda_cursor_read_double_array+0x8d4>
    913c:	sub	r3, fp, #32
    9140:	mov	r1, r3
    9144:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9148:	bl	0 <coda_cursor_get_num_elements>
    914c:	mov	r3, r0
    9150:	cmp	r3, #0
    9154:	beq	9160 <coda_cursor_read_double_array+0x3ec>
    9158:	mvn	r3, #0
    915c:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9160:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9164:	sub	r3, r3, #1
    9168:	str	r3, [fp, #-16]
    916c:	b	91ac <coda_cursor_read_double_array+0x438>
    9170:	ldr	r3, [fp, #-16]
    9174:	lsl	r3, r3, #1
    9178:	ldr	r2, [fp, #-44]	; 0xffffffd4
    917c:	add	r3, r2, r3
    9180:	ldrh	r1, [r3]
    9184:	ldr	r3, [fp, #-16]
    9188:	lsl	r3, r3, #3
    918c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9190:	add	r3, r2, r3
    9194:	vmov	s15, r1
    9198:	vcvt.f64.u32	d7, s15
    919c:	vstr	d7, [r3]
    91a0:	ldr	r3, [fp, #-16]
    91a4:	sub	r3, r3, #1
    91a8:	str	r3, [fp, #-16]
    91ac:	ldr	r3, [fp, #-16]
    91b0:	cmp	r3, #0
    91b4:	bge	9170 <coda_cursor_read_double_array+0x3fc>
    91b8:	b	9558 <coda_cursor_read_double_array+0x7e4>
    91bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    91c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    91c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    91c8:	bl	2fa0 <read_int32_array>
    91cc:	mov	r3, r0
    91d0:	cmp	r3, #0
    91d4:	beq	91e0 <coda_cursor_read_double_array+0x46c>
    91d8:	mvn	r3, #0
    91dc:	b	9648 <coda_cursor_read_double_array+0x8d4>
    91e0:	sub	r3, fp, #32
    91e4:	mov	r1, r3
    91e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    91ec:	bl	0 <coda_cursor_get_num_elements>
    91f0:	mov	r3, r0
    91f4:	cmp	r3, #0
    91f8:	beq	9204 <coda_cursor_read_double_array+0x490>
    91fc:	mvn	r3, #0
    9200:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9204:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9208:	sub	r3, r3, #1
    920c:	str	r3, [fp, #-16]
    9210:	b	9250 <coda_cursor_read_double_array+0x4dc>
    9214:	ldr	r3, [fp, #-16]
    9218:	lsl	r3, r3, #2
    921c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9220:	add	r3, r2, r3
    9224:	ldr	r1, [r3]
    9228:	ldr	r3, [fp, #-16]
    922c:	lsl	r3, r3, #3
    9230:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9234:	add	r3, r2, r3
    9238:	vmov	s15, r1
    923c:	vcvt.f64.s32	d7, s15
    9240:	vstr	d7, [r3]
    9244:	ldr	r3, [fp, #-16]
    9248:	sub	r3, r3, #1
    924c:	str	r3, [fp, #-16]
    9250:	ldr	r3, [fp, #-16]
    9254:	cmp	r3, #0
    9258:	bge	9214 <coda_cursor_read_double_array+0x4a0>
    925c:	b	9558 <coda_cursor_read_double_array+0x7e4>
    9260:	ldr	r2, [fp, #-48]	; 0xffffffd0
    9264:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9268:	ldr	r0, [fp, #-40]	; 0xffffffd8
    926c:	bl	3144 <read_uint32_array>
    9270:	mov	r3, r0
    9274:	cmp	r3, #0
    9278:	beq	9284 <coda_cursor_read_double_array+0x510>
    927c:	mvn	r3, #0
    9280:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9284:	sub	r3, fp, #32
    9288:	mov	r1, r3
    928c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9290:	bl	0 <coda_cursor_get_num_elements>
    9294:	mov	r3, r0
    9298:	cmp	r3, #0
    929c:	beq	92a8 <coda_cursor_read_double_array+0x534>
    92a0:	mvn	r3, #0
    92a4:	b	9648 <coda_cursor_read_double_array+0x8d4>
    92a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    92ac:	sub	r3, r3, #1
    92b0:	str	r3, [fp, #-16]
    92b4:	b	92f4 <coda_cursor_read_double_array+0x580>
    92b8:	ldr	r3, [fp, #-16]
    92bc:	lsl	r3, r3, #2
    92c0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    92c4:	add	r3, r2, r3
    92c8:	ldr	r1, [r3]
    92cc:	ldr	r3, [fp, #-16]
    92d0:	lsl	r3, r3, #3
    92d4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    92d8:	add	r3, r2, r3
    92dc:	vmov	s15, r1
    92e0:	vcvt.f64.u32	d7, s15
    92e4:	vstr	d7, [r3]
    92e8:	ldr	r3, [fp, #-16]
    92ec:	sub	r3, r3, #1
    92f0:	str	r3, [fp, #-16]
    92f4:	ldr	r3, [fp, #-16]
    92f8:	cmp	r3, #0
    92fc:	bge	92b8 <coda_cursor_read_double_array+0x544>
    9300:	b	9558 <coda_cursor_read_double_array+0x7e4>
    9304:	ldr	r2, [fp, #-48]	; 0xffffffd0
    9308:	ldr	r1, [fp, #-44]	; 0xffffffd4
    930c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9310:	bl	32b8 <read_int64_array>
    9314:	mov	r3, r0
    9318:	cmp	r3, #0
    931c:	beq	9328 <coda_cursor_read_double_array+0x5b4>
    9320:	mvn	r3, #0
    9324:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9328:	sub	r3, fp, #32
    932c:	mov	r1, r3
    9330:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9334:	bl	0 <coda_cursor_get_num_elements>
    9338:	mov	r3, r0
    933c:	cmp	r3, #0
    9340:	beq	934c <coda_cursor_read_double_array+0x5d8>
    9344:	mvn	r3, #0
    9348:	b	9648 <coda_cursor_read_double_array+0x8d4>
    934c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9350:	sub	r3, r3, #1
    9354:	str	r3, [fp, #-16]
    9358:	b	93a4 <coda_cursor_read_double_array+0x630>
    935c:	ldr	r3, [fp, #-16]
    9360:	lsl	r3, r3, #3
    9364:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9368:	add	r3, r2, r3
    936c:	ldrd	r2, [r3]
    9370:	ldr	r1, [fp, #-16]
    9374:	lsl	r1, r1, #3
    9378:	ldr	r0, [fp, #-44]	; 0xffffffd4
    937c:	add	r4, r0, r1
    9380:	mov	r0, r2
    9384:	mov	r1, r3
    9388:	bl	0 <__aeabi_l2d>
    938c:	mov	r2, r0
    9390:	mov	r3, r1
    9394:	strd	r2, [r4]
    9398:	ldr	r3, [fp, #-16]
    939c:	sub	r3, r3, #1
    93a0:	str	r3, [fp, #-16]
    93a4:	ldr	r3, [fp, #-16]
    93a8:	cmp	r3, #0
    93ac:	bge	935c <coda_cursor_read_double_array+0x5e8>
    93b0:	b	9558 <coda_cursor_read_double_array+0x7e4>
    93b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    93b8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    93bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    93c0:	bl	342c <read_uint64_array>
    93c4:	mov	r3, r0
    93c8:	cmp	r3, #0
    93cc:	beq	93d8 <coda_cursor_read_double_array+0x664>
    93d0:	mvn	r3, #0
    93d4:	b	9648 <coda_cursor_read_double_array+0x8d4>
    93d8:	sub	r3, fp, #32
    93dc:	mov	r1, r3
    93e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    93e4:	bl	0 <coda_cursor_get_num_elements>
    93e8:	mov	r3, r0
    93ec:	cmp	r3, #0
    93f0:	beq	93fc <coda_cursor_read_double_array+0x688>
    93f4:	mvn	r3, #0
    93f8:	b	9648 <coda_cursor_read_double_array+0x8d4>
    93fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9400:	sub	r3, r3, #1
    9404:	str	r3, [fp, #-16]
    9408:	b	9454 <coda_cursor_read_double_array+0x6e0>
    940c:	ldr	r3, [fp, #-16]
    9410:	lsl	r3, r3, #3
    9414:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9418:	add	r3, r2, r3
    941c:	ldrd	r2, [r3]
    9420:	ldr	r1, [fp, #-16]
    9424:	lsl	r1, r1, #3
    9428:	ldr	r0, [fp, #-44]	; 0xffffffd4
    942c:	add	r4, r0, r1
    9430:	mov	r0, r2
    9434:	mov	r1, r3
    9438:	bl	0 <__aeabi_ul2d>
    943c:	mov	r2, r0
    9440:	mov	r3, r1
    9444:	strd	r2, [r4]
    9448:	ldr	r3, [fp, #-16]
    944c:	sub	r3, r3, #1
    9450:	str	r3, [fp, #-16]
    9454:	ldr	r3, [fp, #-16]
    9458:	cmp	r3, #0
    945c:	bge	940c <coda_cursor_read_double_array+0x698>
    9460:	b	9558 <coda_cursor_read_double_array+0x7e4>
    9464:	ldr	r2, [fp, #-48]	; 0xffffffd0
    9468:	ldr	r1, [fp, #-44]	; 0xffffffd4
    946c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9470:	bl	3574 <read_float_array>
    9474:	mov	r3, r0
    9478:	cmp	r3, #0
    947c:	beq	9488 <coda_cursor_read_double_array+0x714>
    9480:	mvn	r3, #0
    9484:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9488:	sub	r3, fp, #32
    948c:	mov	r1, r3
    9490:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9494:	bl	0 <coda_cursor_get_num_elements>
    9498:	mov	r3, r0
    949c:	cmp	r3, #0
    94a0:	beq	94ac <coda_cursor_read_double_array+0x738>
    94a4:	mvn	r3, #0
    94a8:	b	9648 <coda_cursor_read_double_array+0x8d4>
    94ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    94b0:	sub	r3, r3, #1
    94b4:	str	r3, [fp, #-16]
    94b8:	b	94f4 <coda_cursor_read_double_array+0x780>
    94bc:	ldr	r3, [fp, #-16]
    94c0:	lsl	r3, r3, #2
    94c4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    94c8:	add	r3, r2, r3
    94cc:	vldr	s15, [r3]
    94d0:	ldr	r3, [fp, #-16]
    94d4:	lsl	r3, r3, #3
    94d8:	ldr	r2, [fp, #-44]	; 0xffffffd4
    94dc:	add	r3, r2, r3
    94e0:	vcvt.f64.f32	d7, s15
    94e4:	vstr	d7, [r3]
    94e8:	ldr	r3, [fp, #-16]
    94ec:	sub	r3, r3, #1
    94f0:	str	r3, [fp, #-16]
    94f4:	ldr	r3, [fp, #-16]
    94f8:	cmp	r3, #0
    94fc:	bge	94bc <coda_cursor_read_double_array+0x748>
    9500:	b	9558 <coda_cursor_read_double_array+0x7e4>
    9504:	ldr	r2, [fp, #-48]	; 0xffffffd0
    9508:	ldr	r1, [fp, #-44]	; 0xffffffd4
    950c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9510:	bl	3720 <read_double_array>
    9514:	mov	r3, r0
    9518:	cmp	r3, #0
    951c:	beq	9554 <coda_cursor_read_double_array+0x7e0>
    9520:	mvn	r3, #0
    9524:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9528:	ldr	r3, [fp, #-24]	; 0xffffffe8
    952c:	mov	r0, r3
    9530:	bl	0 <coda_type_get_native_type_name>
    9534:	mov	r3, r0
    9538:	mov	r2, r3
    953c:	movw	r1, #0
    9540:	movt	r1, #0
    9544:	mvn	r0, #104	; 0x68
    9548:	bl	0 <coda_set_error>
    954c:	mvn	r3, #0
    9550:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9554:	nop	{0}
    9558:	ldr	r3, [fp, #-28]	; 0xffffffe4
    955c:	cmp	r3, #0
    9560:	beq	9644 <coda_cursor_read_double_array+0x8d0>
    9564:	sub	r3, fp, #32
    9568:	mov	r1, r3
    956c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9570:	bl	0 <coda_cursor_get_num_elements>
    9574:	mov	r3, r0
    9578:	cmp	r3, #0
    957c:	beq	9588 <coda_cursor_read_double_array+0x814>
    9580:	mvn	r3, #0
    9584:	b	9648 <coda_cursor_read_double_array+0x8d4>
    9588:	mov	r3, #0
    958c:	str	r3, [fp, #-16]
    9590:	b	9634 <coda_cursor_read_double_array+0x8c0>
    9594:	ldr	r3, [fp, #-16]
    9598:	lsl	r3, r3, #3
    959c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    95a0:	add	r3, r2, r3
    95a4:	vldr	d6, [r3]
    95a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    95ac:	vldr	d7, [r3, #24]
    95b0:	vcmp.f64	d6, d7
    95b4:	vmrs	APSR_nzcv, fpscr
    95b8:	bne	95dc <coda_cursor_read_double_array+0x868>
    95bc:	ldr	r3, [fp, #-16]
    95c0:	lsl	r3, r3, #3
    95c4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    95c8:	add	r4, r2, r3
    95cc:	bl	0 <coda_NaN>
    95d0:	vmov.f64	d7, d0
    95d4:	vstr	d7, [r4]
    95d8:	b	9628 <coda_cursor_read_double_array+0x8b4>
    95dc:	ldr	r3, [fp, #-16]
    95e0:	lsl	r3, r3, #3
    95e4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    95e8:	add	r3, r2, r3
    95ec:	vldr	d6, [r3]
    95f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    95f4:	vldr	d7, [r3]
    95f8:	vmul.f64	d5, d6, d7
    95fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9600:	vldr	d7, [r3, #8]
    9604:	vdiv.f64	d6, d5, d7
    9608:	ldr	r3, [fp, #-28]	; 0xffffffe4
    960c:	vldr	d7, [r3, #16]
    9610:	ldr	r3, [fp, #-16]
    9614:	lsl	r3, r3, #3
    9618:	ldr	r2, [fp, #-44]	; 0xffffffd4
    961c:	add	r3, r2, r3
    9620:	vadd.f64	d7, d6, d7
    9624:	vstr	d7, [r3]
    9628:	ldr	r3, [fp, #-16]
    962c:	add	r3, r3, #1
    9630:	str	r3, [fp, #-16]
    9634:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9638:	ldr	r2, [fp, #-16]
    963c:	cmp	r2, r3
    9640:	blt	9594 <coda_cursor_read_double_array+0x820>
    9644:	mov	r3, #0
    9648:	mov	r0, r3
    964c:	sub	sp, fp, #8
    9650:	ldr	r4, [sp]
    9654:	ldr	fp, [sp, #4]
    9658:	add	sp, sp, #8
    965c:	pop	{pc}		; (ldr pc, [sp], #4)

00009660 <coda_cursor_read_char_array>:
    9660:	str	fp, [sp, #-8]!
    9664:	str	lr, [sp, #4]
    9668:	add	fp, sp, #4
    966c:	sub	sp, sp, #24
    9670:	str	r0, [fp, #-16]
    9674:	str	r1, [fp, #-20]	; 0xffffffec
    9678:	str	r2, [fp, #-24]	; 0xffffffe8
    967c:	ldr	r3, [fp, #-16]
    9680:	cmp	r3, #0
    9684:	beq	96bc <coda_cursor_read_char_array+0x5c>
    9688:	ldr	r3, [fp, #-16]
    968c:	ldr	r3, [r3, #4]
    9690:	cmp	r3, #0
    9694:	ble	96bc <coda_cursor_read_char_array+0x5c>
    9698:	ldr	r3, [fp, #-16]
    969c:	ldr	r3, [r3, #4]
    96a0:	sub	r3, r3, #1
    96a4:	ldr	r2, [fp, #-16]
    96a8:	lsl	r3, r3, #4
    96ac:	add	r3, r2, r3
    96b0:	ldr	r3, [r3, #8]
    96b4:	cmp	r3, #0
    96b8:	bne	96e0 <coda_cursor_read_char_array+0x80>
    96bc:	movw	r3, #4136	; 0x1028
    96c0:	movw	r2, #0
    96c4:	movt	r2, #0
    96c8:	movw	r1, #0
    96cc:	movt	r1, #0
    96d0:	mvn	r0, #99	; 0x63
    96d4:	bl	0 <coda_set_error>
    96d8:	mvn	r3, #0
    96dc:	b	9844 <coda_cursor_read_char_array+0x1e4>
    96e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    96e4:	cmp	r3, #0
    96e8:	bne	9710 <coda_cursor_read_char_array+0xb0>
    96ec:	movw	r3, #4141	; 0x102d
    96f0:	movw	r2, #0
    96f4:	movt	r2, #0
    96f8:	movw	r1, #0
    96fc:	movt	r1, #0
    9700:	mvn	r0, #99	; 0x63
    9704:	bl	0 <coda_set_error>
    9708:	mvn	r3, #0
    970c:	b	9844 <coda_cursor_read_char_array+0x1e4>
    9710:	ldr	r3, [fp, #-16]
    9714:	ldr	r3, [r3, #4]
    9718:	sub	r3, r3, #1
    971c:	ldr	r2, [fp, #-16]
    9720:	lsl	r3, r3, #4
    9724:	add	r3, r2, r3
    9728:	ldr	r3, [r3, #8]
    972c:	ldr	r3, [r3]
    9730:	cmp	r3, #99	; 0x63
    9734:	bhi	9758 <coda_cursor_read_char_array+0xf8>
    9738:	ldr	r3, [fp, #-16]
    973c:	ldr	r3, [r3, #4]
    9740:	sub	r3, r3, #1
    9744:	ldr	r2, [fp, #-16]
    9748:	lsl	r3, r3, #4
    974c:	add	r3, r2, r3
    9750:	ldr	r3, [r3, #8]
    9754:	b	9778 <coda_cursor_read_char_array+0x118>
    9758:	ldr	r3, [fp, #-16]
    975c:	ldr	r3, [r3, #4]
    9760:	sub	r3, r3, #1
    9764:	ldr	r2, [fp, #-16]
    9768:	lsl	r3, r3, #4
    976c:	add	r3, r2, r3
    9770:	ldr	r3, [r3, #8]
    9774:	ldr	r3, [r3, #4]
    9778:	str	r3, [fp, #-8]
    977c:	ldr	r3, [fp, #-8]
    9780:	ldr	r3, [r3, #8]
    9784:	cmp	r3, #1
    9788:	beq	97bc <coda_cursor_read_char_array+0x15c>
    978c:	ldr	r3, [fp, #-8]
    9790:	ldr	r3, [r3, #8]
    9794:	mov	r0, r3
    9798:	bl	0 <coda_type_get_class_name>
    979c:	mov	r3, r0
    97a0:	mov	r2, r3
    97a4:	movw	r1, #0
    97a8:	movt	r1, #0
    97ac:	mvn	r0, #104	; 0x68
    97b0:	bl	0 <coda_set_error>
    97b4:	mvn	r3, #0
    97b8:	b	9844 <coda_cursor_read_char_array+0x1e4>
    97bc:	sub	r3, fp, #12
    97c0:	mov	r1, r3
    97c4:	ldr	r0, [fp, #-8]
    97c8:	bl	10bc <get_array_element_read_type>
    97cc:	mov	r3, r0
    97d0:	cmp	r3, #0
    97d4:	beq	97e0 <coda_cursor_read_char_array+0x180>
    97d8:	mvn	r3, #0
    97dc:	b	9844 <coda_cursor_read_char_array+0x1e4>
    97e0:	ldr	r3, [fp, #-12]
    97e4:	cmp	r3, #10
    97e8:	bne	9810 <coda_cursor_read_char_array+0x1b0>
    97ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    97f0:	ldr	r1, [fp, #-20]	; 0xffffffec
    97f4:	ldr	r0, [fp, #-16]
    97f8:	bl	396c <read_char_array>
    97fc:	mov	r3, r0
    9800:	cmp	r3, #0
    9804:	beq	983c <coda_cursor_read_char_array+0x1dc>
    9808:	mvn	r3, #0
    980c:	b	9844 <coda_cursor_read_char_array+0x1e4>
    9810:	ldr	r3, [fp, #-12]
    9814:	mov	r0, r3
    9818:	bl	0 <coda_type_get_native_type_name>
    981c:	mov	r3, r0
    9820:	mov	r2, r3
    9824:	movw	r1, #0
    9828:	movt	r1, #0
    982c:	mvn	r0, #104	; 0x68
    9830:	bl	0 <coda_set_error>
    9834:	mvn	r3, #0
    9838:	b	9844 <coda_cursor_read_char_array+0x1e4>
    983c:	nop	{0}
    9840:	mov	r3, #0
    9844:	mov	r0, r3
    9848:	sub	sp, fp, #4
    984c:	ldr	fp, [sp]
    9850:	add	sp, sp, #4
    9854:	pop	{pc}		; (ldr pc, [sp], #4)

00009858 <coda_cursor_read_int8_partial_array>:
    9858:	str	fp, [sp, #-8]!
    985c:	str	lr, [sp, #4]
    9860:	add	fp, sp, #4
    9864:	sub	sp, sp, #40	; 0x28
    9868:	str	r0, [fp, #-24]	; 0xffffffe8
    986c:	str	r1, [fp, #-28]	; 0xffffffe4
    9870:	str	r2, [fp, #-32]	; 0xffffffe0
    9874:	str	r3, [fp, #-36]	; 0xffffffdc
    9878:	ldr	r3, [fp, #-24]	; 0xffffffe8
    987c:	cmp	r3, #0
    9880:	beq	98b8 <coda_cursor_read_int8_partial_array+0x60>
    9884:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9888:	ldr	r3, [r3, #4]
    988c:	cmp	r3, #0
    9890:	ble	98b8 <coda_cursor_read_int8_partial_array+0x60>
    9894:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9898:	ldr	r3, [r3, #4]
    989c:	sub	r3, r3, #1
    98a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    98a4:	lsl	r3, r3, #4
    98a8:	add	r3, r2, r3
    98ac:	ldr	r3, [r3, #8]
    98b0:	cmp	r3, #0
    98b4:	bne	98dc <coda_cursor_read_int8_partial_array+0x84>
    98b8:	movw	r3, #4199	; 0x1067
    98bc:	movw	r2, #0
    98c0:	movt	r2, #0
    98c4:	movw	r1, #0
    98c8:	movt	r1, #0
    98cc:	mvn	r0, #99	; 0x63
    98d0:	bl	0 <coda_set_error>
    98d4:	mvn	r3, #0
    98d8:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    98dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    98e0:	cmp	r3, #0
    98e4:	bne	990c <coda_cursor_read_int8_partial_array+0xb4>
    98e8:	movw	r3, #4204	; 0x106c
    98ec:	movw	r2, #0
    98f0:	movt	r2, #0
    98f4:	movw	r1, #0
    98f8:	movt	r1, #0
    98fc:	mvn	r0, #99	; 0x63
    9900:	bl	0 <coda_set_error>
    9904:	mvn	r3, #0
    9908:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    990c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9910:	ldr	r3, [r3, #4]
    9914:	sub	r3, r3, #1
    9918:	ldr	r2, [fp, #-24]	; 0xffffffe8
    991c:	lsl	r3, r3, #4
    9920:	add	r3, r2, r3
    9924:	ldr	r3, [r3, #8]
    9928:	ldr	r3, [r3]
    992c:	cmp	r3, #99	; 0x63
    9930:	bhi	9954 <coda_cursor_read_int8_partial_array+0xfc>
    9934:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9938:	ldr	r3, [r3, #4]
    993c:	sub	r3, r3, #1
    9940:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9944:	lsl	r3, r3, #4
    9948:	add	r3, r2, r3
    994c:	ldr	r3, [r3, #8]
    9950:	b	9974 <coda_cursor_read_int8_partial_array+0x11c>
    9954:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9958:	ldr	r3, [r3, #4]
    995c:	sub	r3, r3, #1
    9960:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9964:	lsl	r3, r3, #4
    9968:	add	r3, r2, r3
    996c:	ldr	r3, [r3, #8]
    9970:	ldr	r3, [r3, #4]
    9974:	str	r3, [fp, #-8]
    9978:	ldr	r3, [fp, #-8]
    997c:	ldr	r3, [r3, #8]
    9980:	cmp	r3, #1
    9984:	beq	99b8 <coda_cursor_read_int8_partial_array+0x160>
    9988:	ldr	r3, [fp, #-8]
    998c:	ldr	r3, [r3, #8]
    9990:	mov	r0, r3
    9994:	bl	0 <coda_type_get_class_name>
    9998:	mov	r3, r0
    999c:	mov	r2, r3
    99a0:	movw	r1, #0
    99a4:	movt	r1, #0
    99a8:	mvn	r0, #104	; 0x68
    99ac:	bl	0 <coda_set_error>
    99b0:	mvn	r3, #0
    99b4:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    99b8:	ldr	r3, [pc, #336]	; 9b10 <coda_cursor_read_int8_partial_array+0x2b8>
    99bc:	ldr	r3, [pc, r3]
    99c0:	mrc	15, 0, r2, cr13, cr0, {3}
    99c4:	ldr	r3, [r2, r3]
    99c8:	cmp	r3, #0
    99cc:	beq	9a70 <coda_cursor_read_int8_partial_array+0x218>
    99d0:	sub	r3, fp, #16
    99d4:	mov	r1, r3
    99d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    99dc:	bl	0 <coda_cursor_get_num_elements>
    99e0:	mov	r3, r0
    99e4:	cmp	r3, #0
    99e8:	beq	99f4 <coda_cursor_read_int8_partial_array+0x19c>
    99ec:	mvn	r3, #0
    99f0:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    99f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    99f8:	cmp	r3, #0
    99fc:	blt	9a10 <coda_cursor_read_int8_partial_array+0x1b8>
    9a00:	ldr	r3, [fp, #-16]
    9a04:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a08:	cmp	r2, r3
    9a0c:	blt	9a30 <coda_cursor_read_int8_partial_array+0x1d8>
    9a10:	ldr	r3, [fp, #-16]
    9a14:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a18:	movw	r1, #0
    9a1c:	movt	r1, #0
    9a20:	mvn	r0, #106	; 0x6a
    9a24:	bl	0 <coda_set_error>
    9a28:	mvn	r3, #0
    9a2c:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    9a30:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a34:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9a38:	add	r2, r2, r3
    9a3c:	ldr	r3, [fp, #-16]
    9a40:	cmp	r2, r3
    9a44:	ble	9a70 <coda_cursor_read_int8_partial_array+0x218>
    9a48:	ldr	r3, [fp, #-16]
    9a4c:	str	r3, [sp]
    9a50:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9a54:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a58:	movw	r1, #0
    9a5c:	movt	r1, #0
    9a60:	mvn	r0, #106	; 0x6a
    9a64:	bl	0 <coda_set_error>
    9a68:	mvn	r3, #0
    9a6c:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    9a70:	sub	r3, fp, #12
    9a74:	mov	r1, r3
    9a78:	ldr	r0, [fp, #-8]
    9a7c:	bl	10bc <get_array_element_read_type>
    9a80:	mov	r3, r0
    9a84:	cmp	r3, #0
    9a88:	beq	9a94 <coda_cursor_read_int8_partial_array+0x23c>
    9a8c:	mvn	r3, #0
    9a90:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    9a94:	ldr	r3, [fp, #-12]
    9a98:	cmp	r3, #0
    9a9c:	bne	9ac8 <coda_cursor_read_int8_partial_array+0x270>
    9aa0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9aa4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9aa8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9aac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9ab0:	bl	3afc <read_int8_partial_array>
    9ab4:	mov	r3, r0
    9ab8:	cmp	r3, #0
    9abc:	beq	9af4 <coda_cursor_read_int8_partial_array+0x29c>
    9ac0:	mvn	r3, #0
    9ac4:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    9ac8:	ldr	r3, [fp, #-12]
    9acc:	mov	r0, r3
    9ad0:	bl	0 <coda_type_get_native_type_name>
    9ad4:	mov	r3, r0
    9ad8:	mov	r2, r3
    9adc:	movw	r1, #0
    9ae0:	movt	r1, #0
    9ae4:	mvn	r0, #104	; 0x68
    9ae8:	bl	0 <coda_set_error>
    9aec:	mvn	r3, #0
    9af0:	b	9afc <coda_cursor_read_int8_partial_array+0x2a4>
    9af4:	nop	{0}
    9af8:	mov	r3, #0
    9afc:	mov	r0, r3
    9b00:	sub	sp, fp, #4
    9b04:	ldr	fp, [sp]
    9b08:	add	sp, sp, #4
    9b0c:	pop	{pc}		; (ldr pc, [sp], #4)
    9b10:	.word	0x0000014c

00009b14 <coda_cursor_read_uint8_partial_array>:
    9b14:	str	fp, [sp, #-8]!
    9b18:	str	lr, [sp, #4]
    9b1c:	add	fp, sp, #4
    9b20:	sub	sp, sp, #40	; 0x28
    9b24:	str	r0, [fp, #-24]	; 0xffffffe8
    9b28:	str	r1, [fp, #-28]	; 0xffffffe4
    9b2c:	str	r2, [fp, #-32]	; 0xffffffe0
    9b30:	str	r3, [fp, #-36]	; 0xffffffdc
    9b34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9b38:	cmp	r3, #0
    9b3c:	beq	9b74 <coda_cursor_read_uint8_partial_array+0x60>
    9b40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9b44:	ldr	r3, [r3, #4]
    9b48:	cmp	r3, #0
    9b4c:	ble	9b74 <coda_cursor_read_uint8_partial_array+0x60>
    9b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9b54:	ldr	r3, [r3, #4]
    9b58:	sub	r3, r3, #1
    9b5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9b60:	lsl	r3, r3, #4
    9b64:	add	r3, r2, r3
    9b68:	ldr	r3, [r3, #8]
    9b6c:	cmp	r3, #0
    9b70:	bne	9b98 <coda_cursor_read_uint8_partial_array+0x84>
    9b74:	movw	r3, #4285	; 0x10bd
    9b78:	movw	r2, #0
    9b7c:	movt	r2, #0
    9b80:	movw	r1, #0
    9b84:	movt	r1, #0
    9b88:	mvn	r0, #99	; 0x63
    9b8c:	bl	0 <coda_set_error>
    9b90:	mvn	r3, #0
    9b94:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9b98:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9b9c:	cmp	r3, #0
    9ba0:	bne	9bc8 <coda_cursor_read_uint8_partial_array+0xb4>
    9ba4:	movw	r3, #4290	; 0x10c2
    9ba8:	movw	r2, #0
    9bac:	movt	r2, #0
    9bb0:	movw	r1, #0
    9bb4:	movt	r1, #0
    9bb8:	mvn	r0, #99	; 0x63
    9bbc:	bl	0 <coda_set_error>
    9bc0:	mvn	r3, #0
    9bc4:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9bcc:	ldr	r3, [r3, #4]
    9bd0:	sub	r3, r3, #1
    9bd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9bd8:	lsl	r3, r3, #4
    9bdc:	add	r3, r2, r3
    9be0:	ldr	r3, [r3, #8]
    9be4:	ldr	r3, [r3]
    9be8:	cmp	r3, #99	; 0x63
    9bec:	bhi	9c10 <coda_cursor_read_uint8_partial_array+0xfc>
    9bf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9bf4:	ldr	r3, [r3, #4]
    9bf8:	sub	r3, r3, #1
    9bfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c00:	lsl	r3, r3, #4
    9c04:	add	r3, r2, r3
    9c08:	ldr	r3, [r3, #8]
    9c0c:	b	9c30 <coda_cursor_read_uint8_partial_array+0x11c>
    9c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c14:	ldr	r3, [r3, #4]
    9c18:	sub	r3, r3, #1
    9c1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c20:	lsl	r3, r3, #4
    9c24:	add	r3, r2, r3
    9c28:	ldr	r3, [r3, #8]
    9c2c:	ldr	r3, [r3, #4]
    9c30:	str	r3, [fp, #-8]
    9c34:	ldr	r3, [fp, #-8]
    9c38:	ldr	r3, [r3, #8]
    9c3c:	cmp	r3, #1
    9c40:	beq	9c74 <coda_cursor_read_uint8_partial_array+0x160>
    9c44:	ldr	r3, [fp, #-8]
    9c48:	ldr	r3, [r3, #8]
    9c4c:	mov	r0, r3
    9c50:	bl	0 <coda_type_get_class_name>
    9c54:	mov	r3, r0
    9c58:	mov	r2, r3
    9c5c:	movw	r1, #0
    9c60:	movt	r1, #0
    9c64:	mvn	r0, #104	; 0x68
    9c68:	bl	0 <coda_set_error>
    9c6c:	mvn	r3, #0
    9c70:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9c74:	ldr	r3, [pc, #336]	; 9dcc <coda_cursor_read_uint8_partial_array+0x2b8>
    9c78:	ldr	r3, [pc, r3]
    9c7c:	mrc	15, 0, r2, cr13, cr0, {3}
    9c80:	ldr	r3, [r2, r3]
    9c84:	cmp	r3, #0
    9c88:	beq	9d2c <coda_cursor_read_uint8_partial_array+0x218>
    9c8c:	sub	r3, fp, #16
    9c90:	mov	r1, r3
    9c94:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c98:	bl	0 <coda_cursor_get_num_elements>
    9c9c:	mov	r3, r0
    9ca0:	cmp	r3, #0
    9ca4:	beq	9cb0 <coda_cursor_read_uint8_partial_array+0x19c>
    9ca8:	mvn	r3, #0
    9cac:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9cb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9cb4:	cmp	r3, #0
    9cb8:	blt	9ccc <coda_cursor_read_uint8_partial_array+0x1b8>
    9cbc:	ldr	r3, [fp, #-16]
    9cc0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9cc4:	cmp	r2, r3
    9cc8:	blt	9cec <coda_cursor_read_uint8_partial_array+0x1d8>
    9ccc:	ldr	r3, [fp, #-16]
    9cd0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9cd4:	movw	r1, #0
    9cd8:	movt	r1, #0
    9cdc:	mvn	r0, #106	; 0x6a
    9ce0:	bl	0 <coda_set_error>
    9ce4:	mvn	r3, #0
    9ce8:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9cec:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9cf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9cf4:	add	r2, r2, r3
    9cf8:	ldr	r3, [fp, #-16]
    9cfc:	cmp	r2, r3
    9d00:	ble	9d2c <coda_cursor_read_uint8_partial_array+0x218>
    9d04:	ldr	r3, [fp, #-16]
    9d08:	str	r3, [sp]
    9d0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9d10:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9d14:	movw	r1, #0
    9d18:	movt	r1, #0
    9d1c:	mvn	r0, #106	; 0x6a
    9d20:	bl	0 <coda_set_error>
    9d24:	mvn	r3, #0
    9d28:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9d2c:	sub	r3, fp, #12
    9d30:	mov	r1, r3
    9d34:	ldr	r0, [fp, #-8]
    9d38:	bl	10bc <get_array_element_read_type>
    9d3c:	mov	r3, r0
    9d40:	cmp	r3, #0
    9d44:	beq	9d50 <coda_cursor_read_uint8_partial_array+0x23c>
    9d48:	mvn	r3, #0
    9d4c:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9d50:	ldr	r3, [fp, #-12]
    9d54:	cmp	r3, #1
    9d58:	bne	9d84 <coda_cursor_read_uint8_partial_array+0x270>
    9d5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9d60:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9d64:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9d68:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9d6c:	bl	3c70 <read_uint8_partial_array>
    9d70:	mov	r3, r0
    9d74:	cmp	r3, #0
    9d78:	beq	9db0 <coda_cursor_read_uint8_partial_array+0x29c>
    9d7c:	mvn	r3, #0
    9d80:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9d84:	ldr	r3, [fp, #-12]
    9d88:	mov	r0, r3
    9d8c:	bl	0 <coda_type_get_native_type_name>
    9d90:	mov	r3, r0
    9d94:	mov	r2, r3
    9d98:	movw	r1, #0
    9d9c:	movt	r1, #0
    9da0:	mvn	r0, #104	; 0x68
    9da4:	bl	0 <coda_set_error>
    9da8:	mvn	r3, #0
    9dac:	b	9db8 <coda_cursor_read_uint8_partial_array+0x2a4>
    9db0:	nop	{0}
    9db4:	mov	r3, #0
    9db8:	mov	r0, r3
    9dbc:	sub	sp, fp, #4
    9dc0:	ldr	fp, [sp]
    9dc4:	add	sp, sp, #4
    9dc8:	pop	{pc}		; (ldr pc, [sp], #4)
    9dcc:	.word	0x0000014c

00009dd0 <coda_cursor_read_int16_partial_array>:
    9dd0:	str	fp, [sp, #-8]!
    9dd4:	str	lr, [sp, #4]
    9dd8:	add	fp, sp, #4
    9ddc:	sub	sp, sp, #40	; 0x28
    9de0:	str	r0, [fp, #-24]	; 0xffffffe8
    9de4:	str	r1, [fp, #-28]	; 0xffffffe4
    9de8:	str	r2, [fp, #-32]	; 0xffffffe0
    9dec:	str	r3, [fp, #-36]	; 0xffffffdc
    9df0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9df4:	cmp	r3, #0
    9df8:	beq	9e30 <coda_cursor_read_int16_partial_array+0x60>
    9dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9e00:	ldr	r3, [r3, #4]
    9e04:	cmp	r3, #0
    9e08:	ble	9e30 <coda_cursor_read_int16_partial_array+0x60>
    9e0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9e10:	ldr	r3, [r3, #4]
    9e14:	sub	r3, r3, #1
    9e18:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9e1c:	lsl	r3, r3, #4
    9e20:	add	r3, r2, r3
    9e24:	ldr	r3, [r3, #8]
    9e28:	cmp	r3, #0
    9e2c:	bne	9e54 <coda_cursor_read_int16_partial_array+0x84>
    9e30:	movw	r3, #4374	; 0x1116
    9e34:	movw	r2, #0
    9e38:	movt	r2, #0
    9e3c:	movw	r1, #0
    9e40:	movt	r1, #0
    9e44:	mvn	r0, #99	; 0x63
    9e48:	bl	0 <coda_set_error>
    9e4c:	mvn	r3, #0
    9e50:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    9e54:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9e58:	cmp	r3, #0
    9e5c:	bne	9e84 <coda_cursor_read_int16_partial_array+0xb4>
    9e60:	movw	r3, #4379	; 0x111b
    9e64:	movw	r2, #0
    9e68:	movt	r2, #0
    9e6c:	movw	r1, #0
    9e70:	movt	r1, #0
    9e74:	mvn	r0, #99	; 0x63
    9e78:	bl	0 <coda_set_error>
    9e7c:	mvn	r3, #0
    9e80:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    9e84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9e88:	ldr	r3, [r3, #4]
    9e8c:	sub	r3, r3, #1
    9e90:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9e94:	lsl	r3, r3, #4
    9e98:	add	r3, r2, r3
    9e9c:	ldr	r3, [r3, #8]
    9ea0:	ldr	r3, [r3]
    9ea4:	cmp	r3, #99	; 0x63
    9ea8:	bhi	9ecc <coda_cursor_read_int16_partial_array+0xfc>
    9eac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9eb0:	ldr	r3, [r3, #4]
    9eb4:	sub	r3, r3, #1
    9eb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9ebc:	lsl	r3, r3, #4
    9ec0:	add	r3, r2, r3
    9ec4:	ldr	r3, [r3, #8]
    9ec8:	b	9eec <coda_cursor_read_int16_partial_array+0x11c>
    9ecc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9ed0:	ldr	r3, [r3, #4]
    9ed4:	sub	r3, r3, #1
    9ed8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9edc:	lsl	r3, r3, #4
    9ee0:	add	r3, r2, r3
    9ee4:	ldr	r3, [r3, #8]
    9ee8:	ldr	r3, [r3, #4]
    9eec:	str	r3, [fp, #-12]
    9ef0:	ldr	r3, [fp, #-12]
    9ef4:	ldr	r3, [r3, #8]
    9ef8:	cmp	r3, #1
    9efc:	beq	9f30 <coda_cursor_read_int16_partial_array+0x160>
    9f00:	ldr	r3, [fp, #-12]
    9f04:	ldr	r3, [r3, #8]
    9f08:	mov	r0, r3
    9f0c:	bl	0 <coda_type_get_class_name>
    9f10:	mov	r3, r0
    9f14:	mov	r2, r3
    9f18:	movw	r1, #0
    9f1c:	movt	r1, #0
    9f20:	mvn	r0, #104	; 0x68
    9f24:	bl	0 <coda_set_error>
    9f28:	mvn	r3, #0
    9f2c:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    9f30:	ldr	r3, [pc, #600]	; a190 <coda_cursor_read_int16_partial_array+0x3c0>
    9f34:	ldr	r3, [pc, r3]
    9f38:	mrc	15, 0, r2, cr13, cr0, {3}
    9f3c:	ldr	r3, [r2, r3]
    9f40:	cmp	r3, #0
    9f44:	beq	9fe8 <coda_cursor_read_int16_partial_array+0x218>
    9f48:	sub	r3, fp, #20
    9f4c:	mov	r1, r3
    9f50:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9f54:	bl	0 <coda_cursor_get_num_elements>
    9f58:	mov	r3, r0
    9f5c:	cmp	r3, #0
    9f60:	beq	9f6c <coda_cursor_read_int16_partial_array+0x19c>
    9f64:	mvn	r3, #0
    9f68:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    9f6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9f70:	cmp	r3, #0
    9f74:	blt	9f88 <coda_cursor_read_int16_partial_array+0x1b8>
    9f78:	ldr	r3, [fp, #-20]	; 0xffffffec
    9f7c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9f80:	cmp	r2, r3
    9f84:	blt	9fa8 <coda_cursor_read_int16_partial_array+0x1d8>
    9f88:	ldr	r3, [fp, #-20]	; 0xffffffec
    9f8c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9f90:	movw	r1, #0
    9f94:	movt	r1, #0
    9f98:	mvn	r0, #106	; 0x6a
    9f9c:	bl	0 <coda_set_error>
    9fa0:	mvn	r3, #0
    9fa4:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    9fa8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9fac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9fb0:	add	r2, r2, r3
    9fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
    9fb8:	cmp	r2, r3
    9fbc:	ble	9fe8 <coda_cursor_read_int16_partial_array+0x218>
    9fc0:	ldr	r3, [fp, #-20]	; 0xffffffec
    9fc4:	str	r3, [sp]
    9fc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9fcc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9fd0:	movw	r1, #0
    9fd4:	movt	r1, #0
    9fd8:	mvn	r0, #106	; 0x6a
    9fdc:	bl	0 <coda_set_error>
    9fe0:	mvn	r3, #0
    9fe4:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    9fe8:	sub	r3, fp, #16
    9fec:	mov	r1, r3
    9ff0:	ldr	r0, [fp, #-12]
    9ff4:	bl	10bc <get_array_element_read_type>
    9ff8:	mov	r3, r0
    9ffc:	cmp	r3, #0
    a000:	beq	a00c <coda_cursor_read_int16_partial_array+0x23c>
    a004:	mvn	r3, #0
    a008:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    a00c:	ldr	r3, [fp, #-16]
    a010:	cmp	r3, #1
    a014:	beq	a0a4 <coda_cursor_read_int16_partial_array+0x2d4>
    a018:	cmp	r3, #2
    a01c:	beq	a120 <coda_cursor_read_int16_partial_array+0x350>
    a020:	cmp	r3, #0
    a024:	bne	a148 <coda_cursor_read_int16_partial_array+0x378>
    a028:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a02c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a030:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a034:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a038:	bl	3afc <read_int8_partial_array>
    a03c:	mov	r3, r0
    a040:	cmp	r3, #0
    a044:	beq	a050 <coda_cursor_read_int16_partial_array+0x280>
    a048:	mvn	r3, #0
    a04c:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    a050:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a054:	sub	r3, r3, #1
    a058:	str	r3, [fp, #-8]
    a05c:	b	a094 <coda_cursor_read_int16_partial_array+0x2c4>
    a060:	ldr	r3, [fp, #-8]
    a064:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a068:	add	r3, r2, r3
    a06c:	ldrsb	r1, [r3]
    a070:	ldr	r3, [fp, #-8]
    a074:	lsl	r3, r3, #1
    a078:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a07c:	add	r3, r2, r3
    a080:	sxth	r2, r1
    a084:	strh	r2, [r3]
    a088:	ldr	r3, [fp, #-8]
    a08c:	sub	r3, r3, #1
    a090:	str	r3, [fp, #-8]
    a094:	ldr	r3, [fp, #-8]
    a098:	cmp	r3, #0
    a09c:	bge	a060 <coda_cursor_read_int16_partial_array+0x290>
    a0a0:	b	a178 <coda_cursor_read_int16_partial_array+0x3a8>
    a0a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a0a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a0ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a0b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a0b4:	bl	3c70 <read_uint8_partial_array>
    a0b8:	mov	r3, r0
    a0bc:	cmp	r3, #0
    a0c0:	beq	a0cc <coda_cursor_read_int16_partial_array+0x2fc>
    a0c4:	mvn	r3, #0
    a0c8:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    a0cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a0d0:	sub	r3, r3, #1
    a0d4:	str	r3, [fp, #-8]
    a0d8:	b	a110 <coda_cursor_read_int16_partial_array+0x340>
    a0dc:	ldr	r3, [fp, #-8]
    a0e0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a0e4:	add	r3, r2, r3
    a0e8:	ldrb	r1, [r3]
    a0ec:	ldr	r3, [fp, #-8]
    a0f0:	lsl	r3, r3, #1
    a0f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a0f8:	add	r3, r2, r3
    a0fc:	sxth	r2, r1
    a100:	strh	r2, [r3]
    a104:	ldr	r3, [fp, #-8]
    a108:	sub	r3, r3, #1
    a10c:	str	r3, [fp, #-8]
    a110:	ldr	r3, [fp, #-8]
    a114:	cmp	r3, #0
    a118:	bge	a0dc <coda_cursor_read_int16_partial_array+0x30c>
    a11c:	b	a178 <coda_cursor_read_int16_partial_array+0x3a8>
    a120:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a124:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a128:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a12c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a130:	bl	3dc4 <read_int16_partial_array>
    a134:	mov	r3, r0
    a138:	cmp	r3, #0
    a13c:	beq	a174 <coda_cursor_read_int16_partial_array+0x3a4>
    a140:	mvn	r3, #0
    a144:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    a148:	ldr	r3, [fp, #-16]
    a14c:	mov	r0, r3
    a150:	bl	0 <coda_type_get_native_type_name>
    a154:	mov	r3, r0
    a158:	mov	r2, r3
    a15c:	movw	r1, #0
    a160:	movt	r1, #0
    a164:	mvn	r0, #104	; 0x68
    a168:	bl	0 <coda_set_error>
    a16c:	mvn	r3, #0
    a170:	b	a17c <coda_cursor_read_int16_partial_array+0x3ac>
    a174:	nop	{0}
    a178:	mov	r3, #0
    a17c:	mov	r0, r3
    a180:	sub	sp, fp, #4
    a184:	ldr	fp, [sp]
    a188:	add	sp, sp, #4
    a18c:	pop	{pc}		; (ldr pc, [sp], #4)
    a190:	.word	0x00000254

0000a194 <coda_cursor_read_uint16_partial_array>:
    a194:	str	fp, [sp, #-8]!
    a198:	str	lr, [sp, #4]
    a19c:	add	fp, sp, #4
    a1a0:	sub	sp, sp, #40	; 0x28
    a1a4:	str	r0, [fp, #-24]	; 0xffffffe8
    a1a8:	str	r1, [fp, #-28]	; 0xffffffe4
    a1ac:	str	r2, [fp, #-32]	; 0xffffffe0
    a1b0:	str	r3, [fp, #-36]	; 0xffffffdc
    a1b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a1b8:	cmp	r3, #0
    a1bc:	beq	a1f4 <coda_cursor_read_uint16_partial_array+0x60>
    a1c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a1c4:	ldr	r3, [r3, #4]
    a1c8:	cmp	r3, #0
    a1cc:	ble	a1f4 <coda_cursor_read_uint16_partial_array+0x60>
    a1d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a1d4:	ldr	r3, [r3, #4]
    a1d8:	sub	r3, r3, #1
    a1dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a1e0:	lsl	r3, r3, #4
    a1e4:	add	r3, r2, r3
    a1e8:	ldr	r3, [r3, #8]
    a1ec:	cmp	r3, #0
    a1f0:	bne	a218 <coda_cursor_read_uint16_partial_array+0x84>
    a1f4:	movw	r3, #4483	; 0x1183
    a1f8:	movw	r2, #0
    a1fc:	movt	r2, #0
    a200:	movw	r1, #0
    a204:	movt	r1, #0
    a208:	mvn	r0, #99	; 0x63
    a20c:	bl	0 <coda_set_error>
    a210:	mvn	r3, #0
    a214:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a218:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a21c:	cmp	r3, #0
    a220:	bne	a248 <coda_cursor_read_uint16_partial_array+0xb4>
    a224:	movw	r3, #4488	; 0x1188
    a228:	movw	r2, #0
    a22c:	movt	r2, #0
    a230:	movw	r1, #0
    a234:	movt	r1, #0
    a238:	mvn	r0, #99	; 0x63
    a23c:	bl	0 <coda_set_error>
    a240:	mvn	r3, #0
    a244:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a248:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a24c:	ldr	r3, [r3, #4]
    a250:	sub	r3, r3, #1
    a254:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a258:	lsl	r3, r3, #4
    a25c:	add	r3, r2, r3
    a260:	ldr	r3, [r3, #8]
    a264:	ldr	r3, [r3]
    a268:	cmp	r3, #99	; 0x63
    a26c:	bhi	a290 <coda_cursor_read_uint16_partial_array+0xfc>
    a270:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a274:	ldr	r3, [r3, #4]
    a278:	sub	r3, r3, #1
    a27c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a280:	lsl	r3, r3, #4
    a284:	add	r3, r2, r3
    a288:	ldr	r3, [r3, #8]
    a28c:	b	a2b0 <coda_cursor_read_uint16_partial_array+0x11c>
    a290:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a294:	ldr	r3, [r3, #4]
    a298:	sub	r3, r3, #1
    a29c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a2a0:	lsl	r3, r3, #4
    a2a4:	add	r3, r2, r3
    a2a8:	ldr	r3, [r3, #8]
    a2ac:	ldr	r3, [r3, #4]
    a2b0:	str	r3, [fp, #-12]
    a2b4:	ldr	r3, [fp, #-12]
    a2b8:	ldr	r3, [r3, #8]
    a2bc:	cmp	r3, #1
    a2c0:	beq	a2f4 <coda_cursor_read_uint16_partial_array+0x160>
    a2c4:	ldr	r3, [fp, #-12]
    a2c8:	ldr	r3, [r3, #8]
    a2cc:	mov	r0, r3
    a2d0:	bl	0 <coda_type_get_class_name>
    a2d4:	mov	r3, r0
    a2d8:	mov	r2, r3
    a2dc:	movw	r1, #0
    a2e0:	movt	r1, #0
    a2e4:	mvn	r0, #104	; 0x68
    a2e8:	bl	0 <coda_set_error>
    a2ec:	mvn	r3, #0
    a2f0:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a2f4:	ldr	r3, [pc, #472]	; a4d4 <coda_cursor_read_uint16_partial_array+0x340>
    a2f8:	ldr	r3, [pc, r3]
    a2fc:	mrc	15, 0, r2, cr13, cr0, {3}
    a300:	ldr	r3, [r2, r3]
    a304:	cmp	r3, #0
    a308:	beq	a3ac <coda_cursor_read_uint16_partial_array+0x218>
    a30c:	sub	r3, fp, #20
    a310:	mov	r1, r3
    a314:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a318:	bl	0 <coda_cursor_get_num_elements>
    a31c:	mov	r3, r0
    a320:	cmp	r3, #0
    a324:	beq	a330 <coda_cursor_read_uint16_partial_array+0x19c>
    a328:	mvn	r3, #0
    a32c:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a330:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a334:	cmp	r3, #0
    a338:	blt	a34c <coda_cursor_read_uint16_partial_array+0x1b8>
    a33c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a340:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a344:	cmp	r2, r3
    a348:	blt	a36c <coda_cursor_read_uint16_partial_array+0x1d8>
    a34c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a350:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a354:	movw	r1, #0
    a358:	movt	r1, #0
    a35c:	mvn	r0, #106	; 0x6a
    a360:	bl	0 <coda_set_error>
    a364:	mvn	r3, #0
    a368:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a36c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a370:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a374:	add	r2, r2, r3
    a378:	ldr	r3, [fp, #-20]	; 0xffffffec
    a37c:	cmp	r2, r3
    a380:	ble	a3ac <coda_cursor_read_uint16_partial_array+0x218>
    a384:	ldr	r3, [fp, #-20]	; 0xffffffec
    a388:	str	r3, [sp]
    a38c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a390:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a394:	movw	r1, #0
    a398:	movt	r1, #0
    a39c:	mvn	r0, #106	; 0x6a
    a3a0:	bl	0 <coda_set_error>
    a3a4:	mvn	r3, #0
    a3a8:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a3ac:	sub	r3, fp, #16
    a3b0:	mov	r1, r3
    a3b4:	ldr	r0, [fp, #-12]
    a3b8:	bl	10bc <get_array_element_read_type>
    a3bc:	mov	r3, r0
    a3c0:	cmp	r3, #0
    a3c4:	beq	a3d0 <coda_cursor_read_uint16_partial_array+0x23c>
    a3c8:	mvn	r3, #0
    a3cc:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a3d0:	ldr	r3, [fp, #-16]
    a3d4:	cmp	r3, #1
    a3d8:	beq	a3e8 <coda_cursor_read_uint16_partial_array+0x254>
    a3dc:	cmp	r3, #3
    a3e0:	beq	a464 <coda_cursor_read_uint16_partial_array+0x2d0>
    a3e4:	b	a48c <coda_cursor_read_uint16_partial_array+0x2f8>
    a3e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a3ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a3f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a3f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a3f8:	bl	3c70 <read_uint8_partial_array>
    a3fc:	mov	r3, r0
    a400:	cmp	r3, #0
    a404:	beq	a410 <coda_cursor_read_uint16_partial_array+0x27c>
    a408:	mvn	r3, #0
    a40c:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a410:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a414:	sub	r3, r3, #1
    a418:	str	r3, [fp, #-8]
    a41c:	b	a454 <coda_cursor_read_uint16_partial_array+0x2c0>
    a420:	ldr	r3, [fp, #-8]
    a424:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a428:	add	r3, r2, r3
    a42c:	ldrb	r1, [r3]
    a430:	ldr	r3, [fp, #-8]
    a434:	lsl	r3, r3, #1
    a438:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a43c:	add	r3, r2, r3
    a440:	uxth	r2, r1
    a444:	strh	r2, [r3]
    a448:	ldr	r3, [fp, #-8]
    a44c:	sub	r3, r3, #1
    a450:	str	r3, [fp, #-8]
    a454:	ldr	r3, [fp, #-8]
    a458:	cmp	r3, #0
    a45c:	bge	a420 <coda_cursor_read_uint16_partial_array+0x28c>
    a460:	b	a4bc <coda_cursor_read_uint16_partial_array+0x328>
    a464:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a468:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a46c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a470:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a474:	bl	3f38 <read_uint16_partial_array>
    a478:	mov	r3, r0
    a47c:	cmp	r3, #0
    a480:	beq	a4b8 <coda_cursor_read_uint16_partial_array+0x324>
    a484:	mvn	r3, #0
    a488:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a48c:	ldr	r3, [fp, #-16]
    a490:	mov	r0, r3
    a494:	bl	0 <coda_type_get_native_type_name>
    a498:	mov	r3, r0
    a49c:	mov	r2, r3
    a4a0:	movw	r1, #0
    a4a4:	movt	r1, #0
    a4a8:	mvn	r0, #104	; 0x68
    a4ac:	bl	0 <coda_set_error>
    a4b0:	mvn	r3, #0
    a4b4:	b	a4c0 <coda_cursor_read_uint16_partial_array+0x32c>
    a4b8:	nop	{0}
    a4bc:	mov	r3, #0
    a4c0:	mov	r0, r3
    a4c4:	sub	sp, fp, #4
    a4c8:	ldr	fp, [sp]
    a4cc:	add	sp, sp, #4
    a4d0:	pop	{pc}		; (ldr pc, [sp], #4)
    a4d4:	.word	0x000001d4

0000a4d8 <coda_cursor_read_int32_partial_array>:
    a4d8:	str	fp, [sp, #-8]!
    a4dc:	str	lr, [sp, #4]
    a4e0:	add	fp, sp, #4
    a4e4:	sub	sp, sp, #40	; 0x28
    a4e8:	str	r0, [fp, #-24]	; 0xffffffe8
    a4ec:	str	r1, [fp, #-28]	; 0xffffffe4
    a4f0:	str	r2, [fp, #-32]	; 0xffffffe0
    a4f4:	str	r3, [fp, #-36]	; 0xffffffdc
    a4f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a4fc:	cmp	r3, #0
    a500:	beq	a538 <coda_cursor_read_int32_partial_array+0x60>
    a504:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a508:	ldr	r3, [r3, #4]
    a50c:	cmp	r3, #0
    a510:	ble	a538 <coda_cursor_read_int32_partial_array+0x60>
    a514:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a518:	ldr	r3, [r3, #4]
    a51c:	sub	r3, r3, #1
    a520:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a524:	lsl	r3, r3, #4
    a528:	add	r3, r2, r3
    a52c:	ldr	r3, [r3, #8]
    a530:	cmp	r3, #0
    a534:	bne	a55c <coda_cursor_read_int32_partial_array+0x84>
    a538:	movw	r3, #4584	; 0x11e8
    a53c:	movw	r2, #0
    a540:	movt	r2, #0
    a544:	movw	r1, #0
    a548:	movt	r1, #0
    a54c:	mvn	r0, #99	; 0x63
    a550:	bl	0 <coda_set_error>
    a554:	mvn	r3, #0
    a558:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a55c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a560:	cmp	r3, #0
    a564:	bne	a58c <coda_cursor_read_int32_partial_array+0xb4>
    a568:	movw	r3, #4589	; 0x11ed
    a56c:	movw	r2, #0
    a570:	movt	r2, #0
    a574:	movw	r1, #0
    a578:	movt	r1, #0
    a57c:	mvn	r0, #99	; 0x63
    a580:	bl	0 <coda_set_error>
    a584:	mvn	r3, #0
    a588:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a58c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a590:	ldr	r3, [r3, #4]
    a594:	sub	r3, r3, #1
    a598:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a59c:	lsl	r3, r3, #4
    a5a0:	add	r3, r2, r3
    a5a4:	ldr	r3, [r3, #8]
    a5a8:	ldr	r3, [r3]
    a5ac:	cmp	r3, #99	; 0x63
    a5b0:	bhi	a5d4 <coda_cursor_read_int32_partial_array+0xfc>
    a5b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a5b8:	ldr	r3, [r3, #4]
    a5bc:	sub	r3, r3, #1
    a5c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a5c4:	lsl	r3, r3, #4
    a5c8:	add	r3, r2, r3
    a5cc:	ldr	r3, [r3, #8]
    a5d0:	b	a5f4 <coda_cursor_read_int32_partial_array+0x11c>
    a5d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a5d8:	ldr	r3, [r3, #4]
    a5dc:	sub	r3, r3, #1
    a5e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a5e4:	lsl	r3, r3, #4
    a5e8:	add	r3, r2, r3
    a5ec:	ldr	r3, [r3, #8]
    a5f0:	ldr	r3, [r3, #4]
    a5f4:	str	r3, [fp, #-12]
    a5f8:	ldr	r3, [fp, #-12]
    a5fc:	ldr	r3, [r3, #8]
    a600:	cmp	r3, #1
    a604:	beq	a638 <coda_cursor_read_int32_partial_array+0x160>
    a608:	ldr	r3, [fp, #-12]
    a60c:	ldr	r3, [r3, #8]
    a610:	mov	r0, r3
    a614:	bl	0 <coda_type_get_class_name>
    a618:	mov	r3, r0
    a61c:	mov	r2, r3
    a620:	movw	r1, #0
    a624:	movt	r1, #0
    a628:	mvn	r0, #104	; 0x68
    a62c:	bl	0 <coda_set_error>
    a630:	mvn	r3, #0
    a634:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a638:	ldr	r3, [pc, #864]	; a9a0 <coda_cursor_read_int32_partial_array+0x4c8>
    a63c:	ldr	r3, [pc, r3]
    a640:	mrc	15, 0, r2, cr13, cr0, {3}
    a644:	ldr	r3, [r2, r3]
    a648:	cmp	r3, #0
    a64c:	beq	a6f0 <coda_cursor_read_int32_partial_array+0x218>
    a650:	sub	r3, fp, #20
    a654:	mov	r1, r3
    a658:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a65c:	bl	0 <coda_cursor_get_num_elements>
    a660:	mov	r3, r0
    a664:	cmp	r3, #0
    a668:	beq	a674 <coda_cursor_read_int32_partial_array+0x19c>
    a66c:	mvn	r3, #0
    a670:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a674:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a678:	cmp	r3, #0
    a67c:	blt	a690 <coda_cursor_read_int32_partial_array+0x1b8>
    a680:	ldr	r3, [fp, #-20]	; 0xffffffec
    a684:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a688:	cmp	r2, r3
    a68c:	blt	a6b0 <coda_cursor_read_int32_partial_array+0x1d8>
    a690:	ldr	r3, [fp, #-20]	; 0xffffffec
    a694:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a698:	movw	r1, #0
    a69c:	movt	r1, #0
    a6a0:	mvn	r0, #106	; 0x6a
    a6a4:	bl	0 <coda_set_error>
    a6a8:	mvn	r3, #0
    a6ac:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a6b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a6b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a6b8:	add	r2, r2, r3
    a6bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    a6c0:	cmp	r2, r3
    a6c4:	ble	a6f0 <coda_cursor_read_int32_partial_array+0x218>
    a6c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    a6cc:	str	r3, [sp]
    a6d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a6d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a6d8:	movw	r1, #0
    a6dc:	movt	r1, #0
    a6e0:	mvn	r0, #106	; 0x6a
    a6e4:	bl	0 <coda_set_error>
    a6e8:	mvn	r3, #0
    a6ec:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a6f0:	sub	r3, fp, #16
    a6f4:	mov	r1, r3
    a6f8:	ldr	r0, [fp, #-12]
    a6fc:	bl	10bc <get_array_element_read_type>
    a700:	mov	r3, r0
    a704:	cmp	r3, #0
    a708:	beq	a714 <coda_cursor_read_int32_partial_array+0x23c>
    a70c:	mvn	r3, #0
    a710:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a714:	ldr	r3, [fp, #-16]
    a718:	cmp	r3, #4
    a71c:	ldrls	pc, [pc, r3, lsl #2]
    a720:	b	a958 <coda_cursor_read_int32_partial_array+0x480>
    a724:	.word	0x0000a738
    a728:	.word	0x0000a7b4
    a72c:	.word	0x0000a830
    a730:	.word	0x0000a8b0
    a734:	.word	0x0000a930
    a738:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a73c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a740:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a744:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a748:	bl	3afc <read_int8_partial_array>
    a74c:	mov	r3, r0
    a750:	cmp	r3, #0
    a754:	beq	a760 <coda_cursor_read_int32_partial_array+0x288>
    a758:	mvn	r3, #0
    a75c:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a760:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a764:	sub	r3, r3, #1
    a768:	str	r3, [fp, #-8]
    a76c:	b	a7a4 <coda_cursor_read_int32_partial_array+0x2cc>
    a770:	ldr	r3, [fp, #-8]
    a774:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a778:	add	r3, r2, r3
    a77c:	ldrsb	r1, [r3]
    a780:	ldr	r3, [fp, #-8]
    a784:	lsl	r3, r3, #2
    a788:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a78c:	add	r3, r2, r3
    a790:	mov	r2, r1
    a794:	str	r2, [r3]
    a798:	ldr	r3, [fp, #-8]
    a79c:	sub	r3, r3, #1
    a7a0:	str	r3, [fp, #-8]
    a7a4:	ldr	r3, [fp, #-8]
    a7a8:	cmp	r3, #0
    a7ac:	bge	a770 <coda_cursor_read_int32_partial_array+0x298>
    a7b0:	b	a988 <coda_cursor_read_int32_partial_array+0x4b0>
    a7b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a7b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a7bc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a7c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a7c4:	bl	3c70 <read_uint8_partial_array>
    a7c8:	mov	r3, r0
    a7cc:	cmp	r3, #0
    a7d0:	beq	a7dc <coda_cursor_read_int32_partial_array+0x304>
    a7d4:	mvn	r3, #0
    a7d8:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a7dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a7e0:	sub	r3, r3, #1
    a7e4:	str	r3, [fp, #-8]
    a7e8:	b	a820 <coda_cursor_read_int32_partial_array+0x348>
    a7ec:	ldr	r3, [fp, #-8]
    a7f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a7f4:	add	r3, r2, r3
    a7f8:	ldrb	r1, [r3]
    a7fc:	ldr	r3, [fp, #-8]
    a800:	lsl	r3, r3, #2
    a804:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a808:	add	r3, r2, r3
    a80c:	mov	r2, r1
    a810:	str	r2, [r3]
    a814:	ldr	r3, [fp, #-8]
    a818:	sub	r3, r3, #1
    a81c:	str	r3, [fp, #-8]
    a820:	ldr	r3, [fp, #-8]
    a824:	cmp	r3, #0
    a828:	bge	a7ec <coda_cursor_read_int32_partial_array+0x314>
    a82c:	b	a988 <coda_cursor_read_int32_partial_array+0x4b0>
    a830:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a834:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a838:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a83c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a840:	bl	3dc4 <read_int16_partial_array>
    a844:	mov	r3, r0
    a848:	cmp	r3, #0
    a84c:	beq	a858 <coda_cursor_read_int32_partial_array+0x380>
    a850:	mvn	r3, #0
    a854:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a858:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a85c:	sub	r3, r3, #1
    a860:	str	r3, [fp, #-8]
    a864:	b	a8a0 <coda_cursor_read_int32_partial_array+0x3c8>
    a868:	ldr	r3, [fp, #-8]
    a86c:	lsl	r3, r3, #1
    a870:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a874:	add	r3, r2, r3
    a878:	ldrsh	r1, [r3]
    a87c:	ldr	r3, [fp, #-8]
    a880:	lsl	r3, r3, #2
    a884:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a888:	add	r3, r2, r3
    a88c:	mov	r2, r1
    a890:	str	r2, [r3]
    a894:	ldr	r3, [fp, #-8]
    a898:	sub	r3, r3, #1
    a89c:	str	r3, [fp, #-8]
    a8a0:	ldr	r3, [fp, #-8]
    a8a4:	cmp	r3, #0
    a8a8:	bge	a868 <coda_cursor_read_int32_partial_array+0x390>
    a8ac:	b	a988 <coda_cursor_read_int32_partial_array+0x4b0>
    a8b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a8b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a8b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a8bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a8c0:	bl	3f38 <read_uint16_partial_array>
    a8c4:	mov	r3, r0
    a8c8:	cmp	r3, #0
    a8cc:	beq	a8d8 <coda_cursor_read_int32_partial_array+0x400>
    a8d0:	mvn	r3, #0
    a8d4:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a8d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a8dc:	sub	r3, r3, #1
    a8e0:	str	r3, [fp, #-8]
    a8e4:	b	a920 <coda_cursor_read_int32_partial_array+0x448>
    a8e8:	ldr	r3, [fp, #-8]
    a8ec:	lsl	r3, r3, #1
    a8f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a8f4:	add	r3, r2, r3
    a8f8:	ldrh	r1, [r3]
    a8fc:	ldr	r3, [fp, #-8]
    a900:	lsl	r3, r3, #2
    a904:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a908:	add	r3, r2, r3
    a90c:	mov	r2, r1
    a910:	str	r2, [r3]
    a914:	ldr	r3, [fp, #-8]
    a918:	sub	r3, r3, #1
    a91c:	str	r3, [fp, #-8]
    a920:	ldr	r3, [fp, #-8]
    a924:	cmp	r3, #0
    a928:	bge	a8e8 <coda_cursor_read_int32_partial_array+0x410>
    a92c:	b	a988 <coda_cursor_read_int32_partial_array+0x4b0>
    a930:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a934:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a938:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a93c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a940:	bl	408c <read_int32_partial_array>
    a944:	mov	r3, r0
    a948:	cmp	r3, #0
    a94c:	beq	a984 <coda_cursor_read_int32_partial_array+0x4ac>
    a950:	mvn	r3, #0
    a954:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a958:	ldr	r3, [fp, #-16]
    a95c:	mov	r0, r3
    a960:	bl	0 <coda_type_get_native_type_name>
    a964:	mov	r3, r0
    a968:	mov	r2, r3
    a96c:	movw	r1, #0
    a970:	movt	r1, #0
    a974:	mvn	r0, #104	; 0x68
    a978:	bl	0 <coda_set_error>
    a97c:	mvn	r3, #0
    a980:	b	a98c <coda_cursor_read_int32_partial_array+0x4b4>
    a984:	nop	{0}
    a988:	mov	r3, #0
    a98c:	mov	r0, r3
    a990:	sub	sp, fp, #4
    a994:	ldr	fp, [sp]
    a998:	add	sp, sp, #4
    a99c:	pop	{pc}		; (ldr pc, [sp], #4)
    a9a0:	.word	0x0000035c

0000a9a4 <coda_cursor_read_uint32_partial_array>:
    a9a4:	str	fp, [sp, #-8]!
    a9a8:	str	lr, [sp, #4]
    a9ac:	add	fp, sp, #4
    a9b0:	sub	sp, sp, #40	; 0x28
    a9b4:	str	r0, [fp, #-24]	; 0xffffffe8
    a9b8:	str	r1, [fp, #-28]	; 0xffffffe4
    a9bc:	str	r2, [fp, #-32]	; 0xffffffe0
    a9c0:	str	r3, [fp, #-36]	; 0xffffffdc
    a9c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a9c8:	cmp	r3, #0
    a9cc:	beq	aa04 <coda_cursor_read_uint32_partial_array+0x60>
    a9d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a9d4:	ldr	r3, [r3, #4]
    a9d8:	cmp	r3, #0
    a9dc:	ble	aa04 <coda_cursor_read_uint32_partial_array+0x60>
    a9e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a9e4:	ldr	r3, [r3, #4]
    a9e8:	sub	r3, r3, #1
    a9ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a9f0:	lsl	r3, r3, #4
    a9f4:	add	r3, r2, r3
    a9f8:	ldr	r3, [r3, #8]
    a9fc:	cmp	r3, #0
    aa00:	bne	aa28 <coda_cursor_read_uint32_partial_array+0x84>
    aa04:	movw	r3, #4714	; 0x126a
    aa08:	movw	r2, #0
    aa0c:	movt	r2, #0
    aa10:	movw	r1, #0
    aa14:	movt	r1, #0
    aa18:	mvn	r0, #99	; 0x63
    aa1c:	bl	0 <coda_set_error>
    aa20:	mvn	r3, #0
    aa24:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    aa28:	ldr	r3, [fp, #-36]	; 0xffffffdc
    aa2c:	cmp	r3, #0
    aa30:	bne	aa58 <coda_cursor_read_uint32_partial_array+0xb4>
    aa34:	movw	r3, #4719	; 0x126f
    aa38:	movw	r2, #0
    aa3c:	movt	r2, #0
    aa40:	movw	r1, #0
    aa44:	movt	r1, #0
    aa48:	mvn	r0, #99	; 0x63
    aa4c:	bl	0 <coda_set_error>
    aa50:	mvn	r3, #0
    aa54:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    aa58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    aa5c:	ldr	r3, [r3, #4]
    aa60:	sub	r3, r3, #1
    aa64:	ldr	r2, [fp, #-24]	; 0xffffffe8
    aa68:	lsl	r3, r3, #4
    aa6c:	add	r3, r2, r3
    aa70:	ldr	r3, [r3, #8]
    aa74:	ldr	r3, [r3]
    aa78:	cmp	r3, #99	; 0x63
    aa7c:	bhi	aaa0 <coda_cursor_read_uint32_partial_array+0xfc>
    aa80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    aa84:	ldr	r3, [r3, #4]
    aa88:	sub	r3, r3, #1
    aa8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    aa90:	lsl	r3, r3, #4
    aa94:	add	r3, r2, r3
    aa98:	ldr	r3, [r3, #8]
    aa9c:	b	aac0 <coda_cursor_read_uint32_partial_array+0x11c>
    aaa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    aaa4:	ldr	r3, [r3, #4]
    aaa8:	sub	r3, r3, #1
    aaac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    aab0:	lsl	r3, r3, #4
    aab4:	add	r3, r2, r3
    aab8:	ldr	r3, [r3, #8]
    aabc:	ldr	r3, [r3, #4]
    aac0:	str	r3, [fp, #-12]
    aac4:	ldr	r3, [fp, #-12]
    aac8:	ldr	r3, [r3, #8]
    aacc:	cmp	r3, #1
    aad0:	beq	ab04 <coda_cursor_read_uint32_partial_array+0x160>
    aad4:	ldr	r3, [fp, #-12]
    aad8:	ldr	r3, [r3, #8]
    aadc:	mov	r0, r3
    aae0:	bl	0 <coda_type_get_class_name>
    aae4:	mov	r3, r0
    aae8:	mov	r2, r3
    aaec:	movw	r1, #0
    aaf0:	movt	r1, #0
    aaf4:	mvn	r0, #104	; 0x68
    aaf8:	bl	0 <coda_set_error>
    aafc:	mvn	r3, #0
    ab00:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    ab04:	ldr	r3, [pc, #604]	; ad68 <coda_cursor_read_uint32_partial_array+0x3c4>
    ab08:	ldr	r3, [pc, r3]
    ab0c:	mrc	15, 0, r2, cr13, cr0, {3}
    ab10:	ldr	r3, [r2, r3]
    ab14:	cmp	r3, #0
    ab18:	beq	abbc <coda_cursor_read_uint32_partial_array+0x218>
    ab1c:	sub	r3, fp, #20
    ab20:	mov	r1, r3
    ab24:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ab28:	bl	0 <coda_cursor_get_num_elements>
    ab2c:	mov	r3, r0
    ab30:	cmp	r3, #0
    ab34:	beq	ab40 <coda_cursor_read_uint32_partial_array+0x19c>
    ab38:	mvn	r3, #0
    ab3c:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    ab40:	ldr	r3, [fp, #-28]	; 0xffffffe4
    ab44:	cmp	r3, #0
    ab48:	blt	ab5c <coda_cursor_read_uint32_partial_array+0x1b8>
    ab4c:	ldr	r3, [fp, #-20]	; 0xffffffec
    ab50:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ab54:	cmp	r2, r3
    ab58:	blt	ab7c <coda_cursor_read_uint32_partial_array+0x1d8>
    ab5c:	ldr	r3, [fp, #-20]	; 0xffffffec
    ab60:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ab64:	movw	r1, #0
    ab68:	movt	r1, #0
    ab6c:	mvn	r0, #106	; 0x6a
    ab70:	bl	0 <coda_set_error>
    ab74:	mvn	r3, #0
    ab78:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    ab7c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ab80:	ldr	r3, [fp, #-32]	; 0xffffffe0
    ab84:	add	r2, r2, r3
    ab88:	ldr	r3, [fp, #-20]	; 0xffffffec
    ab8c:	cmp	r2, r3
    ab90:	ble	abbc <coda_cursor_read_uint32_partial_array+0x218>
    ab94:	ldr	r3, [fp, #-20]	; 0xffffffec
    ab98:	str	r3, [sp]
    ab9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    aba0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    aba4:	movw	r1, #0
    aba8:	movt	r1, #0
    abac:	mvn	r0, #106	; 0x6a
    abb0:	bl	0 <coda_set_error>
    abb4:	mvn	r3, #0
    abb8:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    abbc:	sub	r3, fp, #16
    abc0:	mov	r1, r3
    abc4:	ldr	r0, [fp, #-12]
    abc8:	bl	10bc <get_array_element_read_type>
    abcc:	mov	r3, r0
    abd0:	cmp	r3, #0
    abd4:	beq	abe0 <coda_cursor_read_uint32_partial_array+0x23c>
    abd8:	mvn	r3, #0
    abdc:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    abe0:	ldr	r3, [fp, #-16]
    abe4:	cmp	r3, #3
    abe8:	beq	ac78 <coda_cursor_read_uint32_partial_array+0x2d4>
    abec:	cmp	r3, #5
    abf0:	beq	acf8 <coda_cursor_read_uint32_partial_array+0x354>
    abf4:	cmp	r3, #1
    abf8:	bne	ad20 <coda_cursor_read_uint32_partial_array+0x37c>
    abfc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    ac00:	ldr	r2, [fp, #-32]	; 0xffffffe0
    ac04:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ac08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ac0c:	bl	3c70 <read_uint8_partial_array>
    ac10:	mov	r3, r0
    ac14:	cmp	r3, #0
    ac18:	beq	ac24 <coda_cursor_read_uint32_partial_array+0x280>
    ac1c:	mvn	r3, #0
    ac20:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    ac24:	ldr	r3, [fp, #-32]	; 0xffffffe0
    ac28:	sub	r3, r3, #1
    ac2c:	str	r3, [fp, #-8]
    ac30:	b	ac68 <coda_cursor_read_uint32_partial_array+0x2c4>
    ac34:	ldr	r3, [fp, #-8]
    ac38:	ldr	r2, [fp, #-36]	; 0xffffffdc
    ac3c:	add	r3, r2, r3
    ac40:	ldrb	r1, [r3]
    ac44:	ldr	r3, [fp, #-8]
    ac48:	lsl	r3, r3, #2
    ac4c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    ac50:	add	r3, r2, r3
    ac54:	mov	r2, r1
    ac58:	str	r2, [r3]
    ac5c:	ldr	r3, [fp, #-8]
    ac60:	sub	r3, r3, #1
    ac64:	str	r3, [fp, #-8]
    ac68:	ldr	r3, [fp, #-8]
    ac6c:	cmp	r3, #0
    ac70:	bge	ac34 <coda_cursor_read_uint32_partial_array+0x290>
    ac74:	b	ad50 <coda_cursor_read_uint32_partial_array+0x3ac>
    ac78:	ldr	r3, [fp, #-36]	; 0xffffffdc
    ac7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    ac80:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ac84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ac88:	bl	3f38 <read_uint16_partial_array>
    ac8c:	mov	r3, r0
    ac90:	cmp	r3, #0
    ac94:	beq	aca0 <coda_cursor_read_uint32_partial_array+0x2fc>
    ac98:	mvn	r3, #0
    ac9c:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    aca0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    aca4:	sub	r3, r3, #1
    aca8:	str	r3, [fp, #-8]
    acac:	b	ace8 <coda_cursor_read_uint32_partial_array+0x344>
    acb0:	ldr	r3, [fp, #-8]
    acb4:	lsl	r3, r3, #1
    acb8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    acbc:	add	r3, r2, r3
    acc0:	ldrh	r1, [r3]
    acc4:	ldr	r3, [fp, #-8]
    acc8:	lsl	r3, r3, #2
    accc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    acd0:	add	r3, r2, r3
    acd4:	mov	r2, r1
    acd8:	str	r2, [r3]
    acdc:	ldr	r3, [fp, #-8]
    ace0:	sub	r3, r3, #1
    ace4:	str	r3, [fp, #-8]
    ace8:	ldr	r3, [fp, #-8]
    acec:	cmp	r3, #0
    acf0:	bge	acb0 <coda_cursor_read_uint32_partial_array+0x30c>
    acf4:	b	ad50 <coda_cursor_read_uint32_partial_array+0x3ac>
    acf8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    acfc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    ad00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ad04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ad08:	bl	4200 <read_uint32_partial_array>
    ad0c:	mov	r3, r0
    ad10:	cmp	r3, #0
    ad14:	beq	ad4c <coda_cursor_read_uint32_partial_array+0x3a8>
    ad18:	mvn	r3, #0
    ad1c:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    ad20:	ldr	r3, [fp, #-16]
    ad24:	mov	r0, r3
    ad28:	bl	0 <coda_type_get_native_type_name>
    ad2c:	mov	r3, r0
    ad30:	mov	r2, r3
    ad34:	movw	r1, #0
    ad38:	movt	r1, #0
    ad3c:	mvn	r0, #104	; 0x68
    ad40:	bl	0 <coda_set_error>
    ad44:	mvn	r3, #0
    ad48:	b	ad54 <coda_cursor_read_uint32_partial_array+0x3b0>
    ad4c:	nop	{0}
    ad50:	mov	r3, #0
    ad54:	mov	r0, r3
    ad58:	sub	sp, fp, #4
    ad5c:	ldr	fp, [sp]
    ad60:	add	sp, sp, #4
    ad64:	pop	{pc}		; (ldr pc, [sp], #4)
    ad68:	.word	0x00000258

0000ad6c <coda_cursor_read_int64_partial_array>:
    ad6c:	str	fp, [sp, #-8]!
    ad70:	str	lr, [sp, #4]
    ad74:	add	fp, sp, #4
    ad78:	sub	sp, sp, #40	; 0x28
    ad7c:	str	r0, [fp, #-24]	; 0xffffffe8
    ad80:	str	r1, [fp, #-28]	; 0xffffffe4
    ad84:	str	r2, [fp, #-32]	; 0xffffffe0
    ad88:	str	r3, [fp, #-36]	; 0xffffffdc
    ad8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ad90:	cmp	r3, #0
    ad94:	beq	adcc <coda_cursor_read_int64_partial_array+0x60>
    ad98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ad9c:	ldr	r3, [r3, #4]
    ada0:	cmp	r3, #0
    ada4:	ble	adcc <coda_cursor_read_int64_partial_array+0x60>
    ada8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    adac:	ldr	r3, [r3, #4]
    adb0:	sub	r3, r3, #1
    adb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    adb8:	lsl	r3, r3, #4
    adbc:	add	r3, r2, r3
    adc0:	ldr	r3, [r3, #8]
    adc4:	cmp	r3, #0
    adc8:	bne	adf0 <coda_cursor_read_int64_partial_array+0x84>
    adcc:	movw	r3, #4827	; 0x12db
    add0:	movw	r2, #0
    add4:	movt	r2, #0
    add8:	movw	r1, #0
    addc:	movt	r1, #0
    ade0:	mvn	r0, #99	; 0x63
    ade4:	bl	0 <coda_set_error>
    ade8:	mvn	r3, #0
    adec:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    adf0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    adf4:	cmp	r3, #0
    adf8:	bne	ae20 <coda_cursor_read_int64_partial_array+0xb4>
    adfc:	movw	r3, #4832	; 0x12e0
    ae00:	movw	r2, #0
    ae04:	movt	r2, #0
    ae08:	movw	r1, #0
    ae0c:	movt	r1, #0
    ae10:	mvn	r0, #99	; 0x63
    ae14:	bl	0 <coda_set_error>
    ae18:	mvn	r3, #0
    ae1c:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    ae20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ae24:	ldr	r3, [r3, #4]
    ae28:	sub	r3, r3, #1
    ae2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    ae30:	lsl	r3, r3, #4
    ae34:	add	r3, r2, r3
    ae38:	ldr	r3, [r3, #8]
    ae3c:	ldr	r3, [r3]
    ae40:	cmp	r3, #99	; 0x63
    ae44:	bhi	ae68 <coda_cursor_read_int64_partial_array+0xfc>
    ae48:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ae4c:	ldr	r3, [r3, #4]
    ae50:	sub	r3, r3, #1
    ae54:	ldr	r2, [fp, #-24]	; 0xffffffe8
    ae58:	lsl	r3, r3, #4
    ae5c:	add	r3, r2, r3
    ae60:	ldr	r3, [r3, #8]
    ae64:	b	ae88 <coda_cursor_read_int64_partial_array+0x11c>
    ae68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ae6c:	ldr	r3, [r3, #4]
    ae70:	sub	r3, r3, #1
    ae74:	ldr	r2, [fp, #-24]	; 0xffffffe8
    ae78:	lsl	r3, r3, #4
    ae7c:	add	r3, r2, r3
    ae80:	ldr	r3, [r3, #8]
    ae84:	ldr	r3, [r3, #4]
    ae88:	str	r3, [fp, #-12]
    ae8c:	ldr	r3, [fp, #-12]
    ae90:	ldr	r3, [r3, #8]
    ae94:	cmp	r3, #1
    ae98:	beq	aecc <coda_cursor_read_int64_partial_array+0x160>
    ae9c:	ldr	r3, [fp, #-12]
    aea0:	ldr	r3, [r3, #8]
    aea4:	mov	r0, r3
    aea8:	bl	0 <coda_type_get_class_name>
    aeac:	mov	r3, r0
    aeb0:	mov	r2, r3
    aeb4:	movw	r1, #0
    aeb8:	movt	r1, #0
    aebc:	mvn	r0, #104	; 0x68
    aec0:	bl	0 <coda_set_error>
    aec4:	mvn	r3, #0
    aec8:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    aecc:	ldr	r3, [pc, #1152]	; b354 <coda_cursor_read_int64_partial_array+0x5e8>
    aed0:	ldr	r3, [pc, r3]
    aed4:	mrc	15, 0, r2, cr13, cr0, {3}
    aed8:	ldr	r3, [r2, r3]
    aedc:	cmp	r3, #0
    aee0:	beq	af84 <coda_cursor_read_int64_partial_array+0x218>
    aee4:	sub	r3, fp, #20
    aee8:	mov	r1, r3
    aeec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aef0:	bl	0 <coda_cursor_get_num_elements>
    aef4:	mov	r3, r0
    aef8:	cmp	r3, #0
    aefc:	beq	af08 <coda_cursor_read_int64_partial_array+0x19c>
    af00:	mvn	r3, #0
    af04:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    af08:	ldr	r3, [fp, #-28]	; 0xffffffe4
    af0c:	cmp	r3, #0
    af10:	blt	af24 <coda_cursor_read_int64_partial_array+0x1b8>
    af14:	ldr	r3, [fp, #-20]	; 0xffffffec
    af18:	ldr	r2, [fp, #-28]	; 0xffffffe4
    af1c:	cmp	r2, r3
    af20:	blt	af44 <coda_cursor_read_int64_partial_array+0x1d8>
    af24:	ldr	r3, [fp, #-20]	; 0xffffffec
    af28:	ldr	r2, [fp, #-28]	; 0xffffffe4
    af2c:	movw	r1, #0
    af30:	movt	r1, #0
    af34:	mvn	r0, #106	; 0x6a
    af38:	bl	0 <coda_set_error>
    af3c:	mvn	r3, #0
    af40:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    af44:	ldr	r2, [fp, #-28]	; 0xffffffe4
    af48:	ldr	r3, [fp, #-32]	; 0xffffffe0
    af4c:	add	r2, r2, r3
    af50:	ldr	r3, [fp, #-20]	; 0xffffffec
    af54:	cmp	r2, r3
    af58:	ble	af84 <coda_cursor_read_int64_partial_array+0x218>
    af5c:	ldr	r3, [fp, #-20]	; 0xffffffec
    af60:	str	r3, [sp]
    af64:	ldr	r3, [fp, #-32]	; 0xffffffe0
    af68:	ldr	r2, [fp, #-28]	; 0xffffffe4
    af6c:	movw	r1, #0
    af70:	movt	r1, #0
    af74:	mvn	r0, #106	; 0x6a
    af78:	bl	0 <coda_set_error>
    af7c:	mvn	r3, #0
    af80:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    af84:	sub	r3, fp, #16
    af88:	mov	r1, r3
    af8c:	ldr	r0, [fp, #-12]
    af90:	bl	10bc <get_array_element_read_type>
    af94:	mov	r3, r0
    af98:	cmp	r3, #0
    af9c:	beq	afa8 <coda_cursor_read_int64_partial_array+0x23c>
    afa0:	mvn	r3, #0
    afa4:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    afa8:	ldr	r3, [fp, #-16]
    afac:	cmp	r3, #6
    afb0:	ldrls	pc, [pc, r3, lsl #2]
    afb4:	b	b30c <coda_cursor_read_int64_partial_array+0x5a0>
    afb8:	.word	0x0000afd4
    afbc:	.word	0x0000b054
    afc0:	.word	0x0000b0d4
    afc4:	.word	0x0000b158
    afc8:	.word	0x0000b1dc
    afcc:	.word	0x0000b260
    afd0:	.word	0x0000b2e4
    afd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    afd8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    afdc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    afe0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    afe4:	bl	3afc <read_int8_partial_array>
    afe8:	mov	r3, r0
    afec:	cmp	r3, #0
    aff0:	beq	affc <coda_cursor_read_int64_partial_array+0x290>
    aff4:	mvn	r3, #0
    aff8:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    affc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b000:	sub	r3, r3, #1
    b004:	str	r3, [fp, #-8]
    b008:	b	b044 <coda_cursor_read_int64_partial_array+0x2d8>
    b00c:	ldr	r3, [fp, #-8]
    b010:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b014:	add	r3, r2, r3
    b018:	ldrsb	r3, [r3]
    b01c:	ldr	r2, [fp, #-8]
    b020:	lsl	r2, r2, #3
    b024:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b028:	add	r1, r1, r2
    b02c:	sxtb	r2, r3
    b030:	asr	r3, r2, #31
    b034:	strd	r2, [r1]
    b038:	ldr	r3, [fp, #-8]
    b03c:	sub	r3, r3, #1
    b040:	str	r3, [fp, #-8]
    b044:	ldr	r3, [fp, #-8]
    b048:	cmp	r3, #0
    b04c:	bge	b00c <coda_cursor_read_int64_partial_array+0x2a0>
    b050:	b	b33c <coda_cursor_read_int64_partial_array+0x5d0>
    b054:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b058:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b05c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b060:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b064:	bl	3c70 <read_uint8_partial_array>
    b068:	mov	r3, r0
    b06c:	cmp	r3, #0
    b070:	beq	b07c <coda_cursor_read_int64_partial_array+0x310>
    b074:	mvn	r3, #0
    b078:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    b07c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b080:	sub	r3, r3, #1
    b084:	str	r3, [fp, #-8]
    b088:	b	b0c4 <coda_cursor_read_int64_partial_array+0x358>
    b08c:	ldr	r3, [fp, #-8]
    b090:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b094:	add	r3, r2, r3
    b098:	ldrb	r3, [r3]
    b09c:	ldr	r2, [fp, #-8]
    b0a0:	lsl	r2, r2, #3
    b0a4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b0a8:	add	r1, r1, r2
    b0ac:	uxtb	r2, r3
    b0b0:	mov	r3, #0
    b0b4:	strd	r2, [r1]
    b0b8:	ldr	r3, [fp, #-8]
    b0bc:	sub	r3, r3, #1
    b0c0:	str	r3, [fp, #-8]
    b0c4:	ldr	r3, [fp, #-8]
    b0c8:	cmp	r3, #0
    b0cc:	bge	b08c <coda_cursor_read_int64_partial_array+0x320>
    b0d0:	b	b33c <coda_cursor_read_int64_partial_array+0x5d0>
    b0d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b0d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b0dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b0e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b0e4:	bl	3dc4 <read_int16_partial_array>
    b0e8:	mov	r3, r0
    b0ec:	cmp	r3, #0
    b0f0:	beq	b0fc <coda_cursor_read_int64_partial_array+0x390>
    b0f4:	mvn	r3, #0
    b0f8:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    b0fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b100:	sub	r3, r3, #1
    b104:	str	r3, [fp, #-8]
    b108:	b	b148 <coda_cursor_read_int64_partial_array+0x3dc>
    b10c:	ldr	r3, [fp, #-8]
    b110:	lsl	r3, r3, #1
    b114:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b118:	add	r3, r2, r3
    b11c:	ldrsh	r3, [r3]
    b120:	ldr	r2, [fp, #-8]
    b124:	lsl	r2, r2, #3
    b128:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b12c:	add	r1, r1, r2
    b130:	sxth	r2, r3
    b134:	asr	r3, r2, #31
    b138:	strd	r2, [r1]
    b13c:	ldr	r3, [fp, #-8]
    b140:	sub	r3, r3, #1
    b144:	str	r3, [fp, #-8]
    b148:	ldr	r3, [fp, #-8]
    b14c:	cmp	r3, #0
    b150:	bge	b10c <coda_cursor_read_int64_partial_array+0x3a0>
    b154:	b	b33c <coda_cursor_read_int64_partial_array+0x5d0>
    b158:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b15c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b160:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b164:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b168:	bl	3f38 <read_uint16_partial_array>
    b16c:	mov	r3, r0
    b170:	cmp	r3, #0
    b174:	beq	b180 <coda_cursor_read_int64_partial_array+0x414>
    b178:	mvn	r3, #0
    b17c:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    b180:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b184:	sub	r3, r3, #1
    b188:	str	r3, [fp, #-8]
    b18c:	b	b1cc <coda_cursor_read_int64_partial_array+0x460>
    b190:	ldr	r3, [fp, #-8]
    b194:	lsl	r3, r3, #1
    b198:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b19c:	add	r3, r2, r3
    b1a0:	ldrh	r3, [r3]
    b1a4:	ldr	r2, [fp, #-8]
    b1a8:	lsl	r2, r2, #3
    b1ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b1b0:	add	r1, r1, r2
    b1b4:	uxth	r2, r3
    b1b8:	mov	r3, #0
    b1bc:	strd	r2, [r1]
    b1c0:	ldr	r3, [fp, #-8]
    b1c4:	sub	r3, r3, #1
    b1c8:	str	r3, [fp, #-8]
    b1cc:	ldr	r3, [fp, #-8]
    b1d0:	cmp	r3, #0
    b1d4:	bge	b190 <coda_cursor_read_int64_partial_array+0x424>
    b1d8:	b	b33c <coda_cursor_read_int64_partial_array+0x5d0>
    b1dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b1e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b1e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b1e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b1ec:	bl	408c <read_int32_partial_array>
    b1f0:	mov	r3, r0
    b1f4:	cmp	r3, #0
    b1f8:	beq	b204 <coda_cursor_read_int64_partial_array+0x498>
    b1fc:	mvn	r3, #0
    b200:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    b204:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b208:	sub	r3, r3, #1
    b20c:	str	r3, [fp, #-8]
    b210:	b	b250 <coda_cursor_read_int64_partial_array+0x4e4>
    b214:	ldr	r3, [fp, #-8]
    b218:	lsl	r3, r3, #2
    b21c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b220:	add	r3, r2, r3
    b224:	ldr	r3, [r3]
    b228:	ldr	r2, [fp, #-8]
    b22c:	lsl	r2, r2, #3
    b230:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b234:	add	r1, r1, r2
    b238:	mov	r2, r3
    b23c:	asr	r3, r2, #31
    b240:	strd	r2, [r1]
    b244:	ldr	r3, [fp, #-8]
    b248:	sub	r3, r3, #1
    b24c:	str	r3, [fp, #-8]
    b250:	ldr	r3, [fp, #-8]
    b254:	cmp	r3, #0
    b258:	bge	b214 <coda_cursor_read_int64_partial_array+0x4a8>
    b25c:	b	b33c <coda_cursor_read_int64_partial_array+0x5d0>
    b260:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b264:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b268:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b26c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b270:	bl	4200 <read_uint32_partial_array>
    b274:	mov	r3, r0
    b278:	cmp	r3, #0
    b27c:	beq	b288 <coda_cursor_read_int64_partial_array+0x51c>
    b280:	mvn	r3, #0
    b284:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    b288:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b28c:	sub	r3, r3, #1
    b290:	str	r3, [fp, #-8]
    b294:	b	b2d4 <coda_cursor_read_int64_partial_array+0x568>
    b298:	ldr	r3, [fp, #-8]
    b29c:	lsl	r3, r3, #2
    b2a0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b2a4:	add	r3, r2, r3
    b2a8:	ldr	r3, [r3]
    b2ac:	ldr	r2, [fp, #-8]
    b2b0:	lsl	r2, r2, #3
    b2b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b2b8:	add	r1, r1, r2
    b2bc:	mov	r2, r3
    b2c0:	mov	r3, #0
    b2c4:	strd	r2, [r1]
    b2c8:	ldr	r3, [fp, #-8]
    b2cc:	sub	r3, r3, #1
    b2d0:	str	r3, [fp, #-8]
    b2d4:	ldr	r3, [fp, #-8]
    b2d8:	cmp	r3, #0
    b2dc:	bge	b298 <coda_cursor_read_int64_partial_array+0x52c>
    b2e0:	b	b33c <coda_cursor_read_int64_partial_array+0x5d0>
    b2e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b2e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b2ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b2f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b2f4:	bl	4354 <read_int64_partial_array>
    b2f8:	mov	r3, r0
    b2fc:	cmp	r3, #0
    b300:	beq	b338 <coda_cursor_read_int64_partial_array+0x5cc>
    b304:	mvn	r3, #0
    b308:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    b30c:	ldr	r3, [fp, #-16]
    b310:	mov	r0, r3
    b314:	bl	0 <coda_type_get_native_type_name>
    b318:	mov	r3, r0
    b31c:	mov	r2, r3
    b320:	movw	r1, #0
    b324:	movt	r1, #0
    b328:	mvn	r0, #104	; 0x68
    b32c:	bl	0 <coda_set_error>
    b330:	mvn	r3, #0
    b334:	b	b340 <coda_cursor_read_int64_partial_array+0x5d4>
    b338:	nop	{0}
    b33c:	mov	r3, #0
    b340:	mov	r0, r3
    b344:	sub	sp, fp, #4
    b348:	ldr	fp, [sp]
    b34c:	add	sp, sp, #4
    b350:	pop	{pc}		; (ldr pc, [sp], #4)
    b354:	.word	0x0000047c

0000b358 <coda_cursor_read_uint64_partial_array>:
    b358:	str	fp, [sp, #-8]!
    b35c:	str	lr, [sp, #4]
    b360:	add	fp, sp, #4
    b364:	sub	sp, sp, #40	; 0x28
    b368:	str	r0, [fp, #-24]	; 0xffffffe8
    b36c:	str	r1, [fp, #-28]	; 0xffffffe4
    b370:	str	r2, [fp, #-32]	; 0xffffffe0
    b374:	str	r3, [fp, #-36]	; 0xffffffdc
    b378:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b37c:	cmp	r3, #0
    b380:	beq	b3b8 <coda_cursor_read_uint64_partial_array+0x60>
    b384:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b388:	ldr	r3, [r3, #4]
    b38c:	cmp	r3, #0
    b390:	ble	b3b8 <coda_cursor_read_uint64_partial_array+0x60>
    b394:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b398:	ldr	r3, [r3, #4]
    b39c:	sub	r3, r3, #1
    b3a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b3a4:	lsl	r3, r3, #4
    b3a8:	add	r3, r2, r3
    b3ac:	ldr	r3, [r3, #8]
    b3b0:	cmp	r3, #0
    b3b4:	bne	b3dc <coda_cursor_read_uint64_partial_array+0x84>
    b3b8:	movw	r3, #4978	; 0x1372
    b3bc:	movw	r2, #0
    b3c0:	movt	r2, #0
    b3c4:	movw	r1, #0
    b3c8:	movt	r1, #0
    b3cc:	mvn	r0, #99	; 0x63
    b3d0:	bl	0 <coda_set_error>
    b3d4:	mvn	r3, #0
    b3d8:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b3dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b3e0:	cmp	r3, #0
    b3e4:	bne	b40c <coda_cursor_read_uint64_partial_array+0xb4>
    b3e8:	movw	r3, #4983	; 0x1377
    b3ec:	movw	r2, #0
    b3f0:	movt	r2, #0
    b3f4:	movw	r1, #0
    b3f8:	movt	r1, #0
    b3fc:	mvn	r0, #99	; 0x63
    b400:	bl	0 <coda_set_error>
    b404:	mvn	r3, #0
    b408:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b40c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b410:	ldr	r3, [r3, #4]
    b414:	sub	r3, r3, #1
    b418:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b41c:	lsl	r3, r3, #4
    b420:	add	r3, r2, r3
    b424:	ldr	r3, [r3, #8]
    b428:	ldr	r3, [r3]
    b42c:	cmp	r3, #99	; 0x63
    b430:	bhi	b454 <coda_cursor_read_uint64_partial_array+0xfc>
    b434:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b438:	ldr	r3, [r3, #4]
    b43c:	sub	r3, r3, #1
    b440:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b444:	lsl	r3, r3, #4
    b448:	add	r3, r2, r3
    b44c:	ldr	r3, [r3, #8]
    b450:	b	b474 <coda_cursor_read_uint64_partial_array+0x11c>
    b454:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b458:	ldr	r3, [r3, #4]
    b45c:	sub	r3, r3, #1
    b460:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b464:	lsl	r3, r3, #4
    b468:	add	r3, r2, r3
    b46c:	ldr	r3, [r3, #8]
    b470:	ldr	r3, [r3, #4]
    b474:	str	r3, [fp, #-12]
    b478:	ldr	r3, [fp, #-12]
    b47c:	ldr	r3, [r3, #8]
    b480:	cmp	r3, #1
    b484:	beq	b4b8 <coda_cursor_read_uint64_partial_array+0x160>
    b488:	ldr	r3, [fp, #-12]
    b48c:	ldr	r3, [r3, #8]
    b490:	mov	r0, r3
    b494:	bl	0 <coda_type_get_class_name>
    b498:	mov	r3, r0
    b49c:	mov	r2, r3
    b4a0:	movw	r1, #0
    b4a4:	movt	r1, #0
    b4a8:	mvn	r0, #104	; 0x68
    b4ac:	bl	0 <coda_set_error>
    b4b0:	mvn	r3, #0
    b4b4:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b4b8:	ldr	r3, [pc, #764]	; b7bc <coda_cursor_read_uint64_partial_array+0x464>
    b4bc:	ldr	r3, [pc, r3]
    b4c0:	mrc	15, 0, r2, cr13, cr0, {3}
    b4c4:	ldr	r3, [r2, r3]
    b4c8:	cmp	r3, #0
    b4cc:	beq	b570 <coda_cursor_read_uint64_partial_array+0x218>
    b4d0:	sub	r3, fp, #20
    b4d4:	mov	r1, r3
    b4d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b4dc:	bl	0 <coda_cursor_get_num_elements>
    b4e0:	mov	r3, r0
    b4e4:	cmp	r3, #0
    b4e8:	beq	b4f4 <coda_cursor_read_uint64_partial_array+0x19c>
    b4ec:	mvn	r3, #0
    b4f0:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b4f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    b4f8:	cmp	r3, #0
    b4fc:	blt	b510 <coda_cursor_read_uint64_partial_array+0x1b8>
    b500:	ldr	r3, [fp, #-20]	; 0xffffffec
    b504:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b508:	cmp	r2, r3
    b50c:	blt	b530 <coda_cursor_read_uint64_partial_array+0x1d8>
    b510:	ldr	r3, [fp, #-20]	; 0xffffffec
    b514:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b518:	movw	r1, #0
    b51c:	movt	r1, #0
    b520:	mvn	r0, #106	; 0x6a
    b524:	bl	0 <coda_set_error>
    b528:	mvn	r3, #0
    b52c:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b530:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b534:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b538:	add	r2, r2, r3
    b53c:	ldr	r3, [fp, #-20]	; 0xffffffec
    b540:	cmp	r2, r3
    b544:	ble	b570 <coda_cursor_read_uint64_partial_array+0x218>
    b548:	ldr	r3, [fp, #-20]	; 0xffffffec
    b54c:	str	r3, [sp]
    b550:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b554:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b558:	movw	r1, #0
    b55c:	movt	r1, #0
    b560:	mvn	r0, #106	; 0x6a
    b564:	bl	0 <coda_set_error>
    b568:	mvn	r3, #0
    b56c:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b570:	sub	r3, fp, #16
    b574:	mov	r1, r3
    b578:	ldr	r0, [fp, #-12]
    b57c:	bl	10bc <get_array_element_read_type>
    b580:	mov	r3, r0
    b584:	cmp	r3, #0
    b588:	beq	b594 <coda_cursor_read_uint64_partial_array+0x23c>
    b58c:	mvn	r3, #0
    b590:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b594:	ldr	r3, [fp, #-16]
    b598:	sub	r3, r3, #1
    b59c:	cmp	r3, #6
    b5a0:	ldrls	pc, [pc, r3, lsl #2]
    b5a4:	b	b774 <coda_cursor_read_uint64_partial_array+0x41c>
    b5a8:	.word	0x0000b5c4
    b5ac:	.word	0x0000b774
    b5b0:	.word	0x0000b644
    b5b4:	.word	0x0000b774
    b5b8:	.word	0x0000b6c8
    b5bc:	.word	0x0000b774
    b5c0:	.word	0x0000b74c
    b5c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b5c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b5cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b5d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b5d4:	bl	3c70 <read_uint8_partial_array>
    b5d8:	mov	r3, r0
    b5dc:	cmp	r3, #0
    b5e0:	beq	b5ec <coda_cursor_read_uint64_partial_array+0x294>
    b5e4:	mvn	r3, #0
    b5e8:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b5ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b5f0:	sub	r3, r3, #1
    b5f4:	str	r3, [fp, #-8]
    b5f8:	b	b634 <coda_cursor_read_uint64_partial_array+0x2dc>
    b5fc:	ldr	r3, [fp, #-8]
    b600:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b604:	add	r3, r2, r3
    b608:	ldrb	r3, [r3]
    b60c:	ldr	r2, [fp, #-8]
    b610:	lsl	r2, r2, #3
    b614:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b618:	add	r1, r1, r2
    b61c:	uxtb	r2, r3
    b620:	mov	r3, #0
    b624:	strd	r2, [r1]
    b628:	ldr	r3, [fp, #-8]
    b62c:	sub	r3, r3, #1
    b630:	str	r3, [fp, #-8]
    b634:	ldr	r3, [fp, #-8]
    b638:	cmp	r3, #0
    b63c:	bge	b5fc <coda_cursor_read_uint64_partial_array+0x2a4>
    b640:	b	b7a4 <coda_cursor_read_uint64_partial_array+0x44c>
    b644:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b648:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b64c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b650:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b654:	bl	3f38 <read_uint16_partial_array>
    b658:	mov	r3, r0
    b65c:	cmp	r3, #0
    b660:	beq	b66c <coda_cursor_read_uint64_partial_array+0x314>
    b664:	mvn	r3, #0
    b668:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b66c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b670:	sub	r3, r3, #1
    b674:	str	r3, [fp, #-8]
    b678:	b	b6b8 <coda_cursor_read_uint64_partial_array+0x360>
    b67c:	ldr	r3, [fp, #-8]
    b680:	lsl	r3, r3, #1
    b684:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b688:	add	r3, r2, r3
    b68c:	ldrh	r3, [r3]
    b690:	ldr	r2, [fp, #-8]
    b694:	lsl	r2, r2, #3
    b698:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b69c:	add	r1, r1, r2
    b6a0:	uxth	r2, r3
    b6a4:	mov	r3, #0
    b6a8:	strd	r2, [r1]
    b6ac:	ldr	r3, [fp, #-8]
    b6b0:	sub	r3, r3, #1
    b6b4:	str	r3, [fp, #-8]
    b6b8:	ldr	r3, [fp, #-8]
    b6bc:	cmp	r3, #0
    b6c0:	bge	b67c <coda_cursor_read_uint64_partial_array+0x324>
    b6c4:	b	b7a4 <coda_cursor_read_uint64_partial_array+0x44c>
    b6c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b6cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b6d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b6d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b6d8:	bl	4200 <read_uint32_partial_array>
    b6dc:	mov	r3, r0
    b6e0:	cmp	r3, #0
    b6e4:	beq	b6f0 <coda_cursor_read_uint64_partial_array+0x398>
    b6e8:	mvn	r3, #0
    b6ec:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b6f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b6f4:	sub	r3, r3, #1
    b6f8:	str	r3, [fp, #-8]
    b6fc:	b	b73c <coda_cursor_read_uint64_partial_array+0x3e4>
    b700:	ldr	r3, [fp, #-8]
    b704:	lsl	r3, r3, #2
    b708:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b70c:	add	r3, r2, r3
    b710:	ldr	r3, [r3]
    b714:	ldr	r2, [fp, #-8]
    b718:	lsl	r2, r2, #3
    b71c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b720:	add	r1, r1, r2
    b724:	mov	r2, r3
    b728:	mov	r3, #0
    b72c:	strd	r2, [r1]
    b730:	ldr	r3, [fp, #-8]
    b734:	sub	r3, r3, #1
    b738:	str	r3, [fp, #-8]
    b73c:	ldr	r3, [fp, #-8]
    b740:	cmp	r3, #0
    b744:	bge	b700 <coda_cursor_read_uint64_partial_array+0x3a8>
    b748:	b	b7a4 <coda_cursor_read_uint64_partial_array+0x44c>
    b74c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b750:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b754:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b758:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b75c:	bl	44a8 <read_uint64_partial_array>
    b760:	mov	r3, r0
    b764:	cmp	r3, #0
    b768:	beq	b7a0 <coda_cursor_read_uint64_partial_array+0x448>
    b76c:	mvn	r3, #0
    b770:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b774:	ldr	r3, [fp, #-16]
    b778:	mov	r0, r3
    b77c:	bl	0 <coda_type_get_native_type_name>
    b780:	mov	r3, r0
    b784:	mov	r2, r3
    b788:	movw	r1, #0
    b78c:	movt	r1, #0
    b790:	mvn	r0, #104	; 0x68
    b794:	bl	0 <coda_set_error>
    b798:	mvn	r3, #0
    b79c:	b	b7a8 <coda_cursor_read_uint64_partial_array+0x450>
    b7a0:	nop	{0}
    b7a4:	mov	r3, #0
    b7a8:	mov	r0, r3
    b7ac:	sub	sp, fp, #4
    b7b0:	ldr	fp, [sp]
    b7b4:	add	sp, sp, #4
    b7b8:	pop	{pc}		; (ldr pc, [sp], #4)
    b7bc:	.word	0x000002f8

0000b7c0 <coda_cursor_read_float_partial_array>:
    b7c0:	str	r4, [sp, #-12]!
    b7c4:	str	fp, [sp, #4]
    b7c8:	str	lr, [sp, #8]
    b7cc:	add	fp, sp, #8
    b7d0:	sub	sp, sp, #68	; 0x44
    b7d4:	str	r0, [fp, #-56]	; 0xffffffc8
    b7d8:	str	r1, [fp, #-60]	; 0xffffffc4
    b7dc:	str	r2, [fp, #-64]	; 0xffffffc0
    b7e0:	str	r3, [fp, #-68]	; 0xffffffbc
    b7e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b7e8:	cmp	r3, #0
    b7ec:	beq	b824 <coda_cursor_read_float_partial_array+0x64>
    b7f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b7f4:	ldr	r3, [r3, #4]
    b7f8:	cmp	r3, #0
    b7fc:	ble	b824 <coda_cursor_read_float_partial_array+0x64>
    b800:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b804:	ldr	r3, [r3, #4]
    b808:	sub	r3, r3, #1
    b80c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b810:	lsl	r3, r3, #4
    b814:	add	r3, r2, r3
    b818:	ldr	r3, [r3, #8]
    b81c:	cmp	r3, #0
    b820:	bne	b848 <coda_cursor_read_float_partial_array+0x88>
    b824:	movw	r3, #5105	; 0x13f1
    b828:	movw	r2, #0
    b82c:	movt	r2, #0
    b830:	movw	r1, #0
    b834:	movt	r1, #0
    b838:	mvn	r0, #99	; 0x63
    b83c:	bl	0 <coda_set_error>
    b840:	mvn	r3, #0
    b844:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    b848:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b84c:	cmp	r3, #0
    b850:	bne	b878 <coda_cursor_read_float_partial_array+0xb8>
    b854:	movw	r3, #5110	; 0x13f6
    b858:	movw	r2, #0
    b85c:	movt	r2, #0
    b860:	movw	r1, #0
    b864:	movt	r1, #0
    b868:	mvn	r0, #99	; 0x63
    b86c:	bl	0 <coda_set_error>
    b870:	mvn	r3, #0
    b874:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    b878:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b87c:	ldr	r3, [r3, #4]
    b880:	sub	r3, r3, #1
    b884:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b888:	lsl	r3, r3, #4
    b88c:	add	r3, r2, r3
    b890:	ldr	r3, [r3, #8]
    b894:	ldr	r3, [r3]
    b898:	cmp	r3, #99	; 0x63
    b89c:	bhi	b8c0 <coda_cursor_read_float_partial_array+0x100>
    b8a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b8a4:	ldr	r3, [r3, #4]
    b8a8:	sub	r3, r3, #1
    b8ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b8b0:	lsl	r3, r3, #4
    b8b4:	add	r3, r2, r3
    b8b8:	ldr	r3, [r3, #8]
    b8bc:	b	b8e0 <coda_cursor_read_float_partial_array+0x120>
    b8c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b8c4:	ldr	r3, [r3, #4]
    b8c8:	sub	r3, r3, #1
    b8cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b8d0:	lsl	r3, r3, #4
    b8d4:	add	r3, r2, r3
    b8d8:	ldr	r3, [r3, #8]
    b8dc:	ldr	r3, [r3, #4]
    b8e0:	str	r3, [fp, #-20]	; 0xffffffec
    b8e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    b8e8:	ldr	r3, [r3, #8]
    b8ec:	cmp	r3, #1
    b8f0:	beq	b924 <coda_cursor_read_float_partial_array+0x164>
    b8f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    b8f8:	ldr	r3, [r3, #8]
    b8fc:	mov	r0, r3
    b900:	bl	0 <coda_type_get_class_name>
    b904:	mov	r3, r0
    b908:	mov	r2, r3
    b90c:	movw	r1, #0
    b910:	movt	r1, #0
    b914:	mvn	r0, #104	; 0x68
    b918:	bl	0 <coda_set_error>
    b91c:	mvn	r3, #0
    b920:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    b924:	ldr	r3, [pc, #2076]	; c148 <coda_cursor_read_float_partial_array+0x988>
    b928:	ldr	r3, [pc, r3]
    b92c:	mrc	15, 0, r2, cr13, cr0, {3}
    b930:	ldr	r3, [r2, r3]
    b934:	cmp	r3, #0
    b938:	beq	b9dc <coda_cursor_read_float_partial_array+0x21c>
    b93c:	sub	r3, fp, #48	; 0x30
    b940:	mov	r1, r3
    b944:	ldr	r0, [fp, #-56]	; 0xffffffc8
    b948:	bl	0 <coda_cursor_get_num_elements>
    b94c:	mov	r3, r0
    b950:	cmp	r3, #0
    b954:	beq	b960 <coda_cursor_read_float_partial_array+0x1a0>
    b958:	mvn	r3, #0
    b95c:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    b960:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b964:	cmp	r3, #0
    b968:	blt	b97c <coda_cursor_read_float_partial_array+0x1bc>
    b96c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    b970:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b974:	cmp	r2, r3
    b978:	blt	b99c <coda_cursor_read_float_partial_array+0x1dc>
    b97c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    b980:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b984:	movw	r1, #0
    b988:	movt	r1, #0
    b98c:	mvn	r0, #106	; 0x6a
    b990:	bl	0 <coda_set_error>
    b994:	mvn	r3, #0
    b998:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    b99c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b9a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b9a4:	add	r2, r2, r3
    b9a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    b9ac:	cmp	r2, r3
    b9b0:	ble	b9dc <coda_cursor_read_float_partial_array+0x21c>
    b9b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    b9b8:	str	r3, [sp]
    b9bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b9c0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b9c4:	movw	r1, #0
    b9c8:	movt	r1, #0
    b9cc:	mvn	r0, #106	; 0x6a
    b9d0:	bl	0 <coda_set_error>
    b9d4:	mvn	r3, #0
    b9d8:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    b9dc:	sub	r2, fp, #44	; 0x2c
    b9e0:	sub	r3, fp, #40	; 0x28
    b9e4:	mov	r1, r3
    b9e8:	ldr	r0, [fp, #-20]	; 0xffffffec
    b9ec:	bl	115c <get_array_element_unconverted_read_type>
    b9f0:	mov	r3, r0
    b9f4:	cmp	r3, #0
    b9f8:	beq	ba04 <coda_cursor_read_float_partial_array+0x244>
    b9fc:	mvn	r3, #0
    ba00:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    ba04:	ldr	r3, [fp, #-44]	; 0xffffffd4
    ba08:	cmp	r3, #0
    ba0c:	beq	baec <coda_cursor_read_float_partial_array+0x32c>
    ba10:	ldr	r3, [fp, #-64]	; 0xffffffc0
    ba14:	lsl	r3, r3, #3
    ba18:	mov	r0, r3
    ba1c:	bl	0 <malloc>
    ba20:	mov	r3, r0
    ba24:	str	r3, [fp, #-24]	; 0xffffffe8
    ba28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ba2c:	cmp	r3, #0
    ba30:	bne	ba58 <coda_cursor_read_float_partial_array+0x298>
    ba34:	ldr	r3, [fp, #-64]	; 0xffffffc0
    ba38:	lsl	r3, r3, #3
    ba3c:	mov	r2, r3
    ba40:	movw	r1, #0
    ba44:	movt	r1, #0
    ba48:	mvn	r0, #0
    ba4c:	bl	0 <coda_set_error>
    ba50:	mvn	r3, #0
    ba54:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    ba58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ba5c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ba60:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ba64:	ldr	r0, [fp, #-56]	; 0xffffffc8
    ba68:	bl	c14c <coda_cursor_read_double_partial_array>
    ba6c:	mov	r3, r0
    ba70:	cmp	r3, #0
    ba74:	beq	ba88 <coda_cursor_read_float_partial_array+0x2c8>
    ba78:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ba7c:	bl	0 <free>
    ba80:	mvn	r3, #0
    ba84:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    ba88:	ldr	r3, [fp, #-64]	; 0xffffffc0
    ba8c:	sub	r3, r3, #1
    ba90:	str	r3, [fp, #-16]
    ba94:	b	bad0 <coda_cursor_read_float_partial_array+0x310>
    ba98:	ldr	r3, [fp, #-16]
    ba9c:	lsl	r3, r3, #3
    baa0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    baa4:	add	r3, r2, r3
    baa8:	vldr	d7, [r3]
    baac:	ldr	r3, [fp, #-16]
    bab0:	lsl	r3, r3, #2
    bab4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bab8:	add	r3, r2, r3
    babc:	vcvt.f32.f64	s15, d7
    bac0:	vstr	s15, [r3]
    bac4:	ldr	r3, [fp, #-16]
    bac8:	sub	r3, r3, #1
    bacc:	str	r3, [fp, #-16]
    bad0:	ldr	r3, [fp, #-16]
    bad4:	cmp	r3, #0
    bad8:	bge	ba98 <coda_cursor_read_float_partial_array+0x2d8>
    badc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    bae0:	bl	0 <free>
    bae4:	mov	r3, #0
    bae8:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    baec:	ldr	r3, [fp, #-40]	; 0xffffffd8
    baf0:	cmp	r3, #9
    baf4:	ldrls	pc, [pc, r3, lsl #2]
    baf8:	b	c0fc <coda_cursor_read_float_partial_array+0x93c>
    bafc:	.word	0x0000bb24
    bb00:	.word	0x0000bba4
    bb04:	.word	0x0000bc24
    bb08:	.word	0x0000bca8
    bb0c:	.word	0x0000bd2c
    bb10:	.word	0x0000bdb0
    bb14:	.word	0x0000be34
    bb18:	.word	0x0000bf18
    bb1c:	.word	0x0000bffc
    bb20:	.word	0x0000c024
    bb24:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bb28:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bb2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bb30:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bb34:	bl	3afc <read_int8_partial_array>
    bb38:	mov	r3, r0
    bb3c:	cmp	r3, #0
    bb40:	beq	bb4c <coda_cursor_read_float_partial_array+0x38c>
    bb44:	mvn	r3, #0
    bb48:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    bb4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bb50:	sub	r3, r3, #1
    bb54:	str	r3, [fp, #-16]
    bb58:	b	bb94 <coda_cursor_read_float_partial_array+0x3d4>
    bb5c:	ldr	r3, [fp, #-16]
    bb60:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bb64:	add	r3, r2, r3
    bb68:	ldrsb	r1, [r3]
    bb6c:	ldr	r3, [fp, #-16]
    bb70:	lsl	r3, r3, #2
    bb74:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bb78:	add	r3, r2, r3
    bb7c:	vmov	s15, r1
    bb80:	vcvt.f32.s32	s15, s15
    bb84:	vstr	s15, [r3]
    bb88:	ldr	r3, [fp, #-16]
    bb8c:	sub	r3, r3, #1
    bb90:	str	r3, [fp, #-16]
    bb94:	ldr	r3, [fp, #-16]
    bb98:	cmp	r3, #0
    bb9c:	bge	bb5c <coda_cursor_read_float_partial_array+0x39c>
    bba0:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    bba4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bba8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bbac:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bbb0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bbb4:	bl	3c70 <read_uint8_partial_array>
    bbb8:	mov	r3, r0
    bbbc:	cmp	r3, #0
    bbc0:	beq	bbcc <coda_cursor_read_float_partial_array+0x40c>
    bbc4:	mvn	r3, #0
    bbc8:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    bbcc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bbd0:	sub	r3, r3, #1
    bbd4:	str	r3, [fp, #-16]
    bbd8:	b	bc14 <coda_cursor_read_float_partial_array+0x454>
    bbdc:	ldr	r3, [fp, #-16]
    bbe0:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bbe4:	add	r3, r2, r3
    bbe8:	ldrb	r1, [r3]
    bbec:	ldr	r3, [fp, #-16]
    bbf0:	lsl	r3, r3, #2
    bbf4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bbf8:	add	r3, r2, r3
    bbfc:	vmov	s15, r1
    bc00:	vcvt.f32.u32	s15, s15
    bc04:	vstr	s15, [r3]
    bc08:	ldr	r3, [fp, #-16]
    bc0c:	sub	r3, r3, #1
    bc10:	str	r3, [fp, #-16]
    bc14:	ldr	r3, [fp, #-16]
    bc18:	cmp	r3, #0
    bc1c:	bge	bbdc <coda_cursor_read_float_partial_array+0x41c>
    bc20:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    bc24:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bc28:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bc2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bc30:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bc34:	bl	3dc4 <read_int16_partial_array>
    bc38:	mov	r3, r0
    bc3c:	cmp	r3, #0
    bc40:	beq	bc4c <coda_cursor_read_float_partial_array+0x48c>
    bc44:	mvn	r3, #0
    bc48:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    bc4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bc50:	sub	r3, r3, #1
    bc54:	str	r3, [fp, #-16]
    bc58:	b	bc98 <coda_cursor_read_float_partial_array+0x4d8>
    bc5c:	ldr	r3, [fp, #-16]
    bc60:	lsl	r3, r3, #1
    bc64:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bc68:	add	r3, r2, r3
    bc6c:	ldrsh	r1, [r3]
    bc70:	ldr	r3, [fp, #-16]
    bc74:	lsl	r3, r3, #2
    bc78:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bc7c:	add	r3, r2, r3
    bc80:	vmov	s15, r1
    bc84:	vcvt.f32.s32	s15, s15
    bc88:	vstr	s15, [r3]
    bc8c:	ldr	r3, [fp, #-16]
    bc90:	sub	r3, r3, #1
    bc94:	str	r3, [fp, #-16]
    bc98:	ldr	r3, [fp, #-16]
    bc9c:	cmp	r3, #0
    bca0:	bge	bc5c <coda_cursor_read_float_partial_array+0x49c>
    bca4:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    bca8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bcac:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bcb0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bcb4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bcb8:	bl	3f38 <read_uint16_partial_array>
    bcbc:	mov	r3, r0
    bcc0:	cmp	r3, #0
    bcc4:	beq	bcd0 <coda_cursor_read_float_partial_array+0x510>
    bcc8:	mvn	r3, #0
    bccc:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    bcd0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bcd4:	sub	r3, r3, #1
    bcd8:	str	r3, [fp, #-16]
    bcdc:	b	bd1c <coda_cursor_read_float_partial_array+0x55c>
    bce0:	ldr	r3, [fp, #-16]
    bce4:	lsl	r3, r3, #1
    bce8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bcec:	add	r3, r2, r3
    bcf0:	ldrh	r1, [r3]
    bcf4:	ldr	r3, [fp, #-16]
    bcf8:	lsl	r3, r3, #2
    bcfc:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bd00:	add	r3, r2, r3
    bd04:	vmov	s15, r1
    bd08:	vcvt.f32.u32	s15, s15
    bd0c:	vstr	s15, [r3]
    bd10:	ldr	r3, [fp, #-16]
    bd14:	sub	r3, r3, #1
    bd18:	str	r3, [fp, #-16]
    bd1c:	ldr	r3, [fp, #-16]
    bd20:	cmp	r3, #0
    bd24:	bge	bce0 <coda_cursor_read_float_partial_array+0x520>
    bd28:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    bd2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd30:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bd34:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bd38:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bd3c:	bl	408c <read_int32_partial_array>
    bd40:	mov	r3, r0
    bd44:	cmp	r3, #0
    bd48:	beq	bd54 <coda_cursor_read_float_partial_array+0x594>
    bd4c:	mvn	r3, #0
    bd50:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    bd54:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bd58:	sub	r3, r3, #1
    bd5c:	str	r3, [fp, #-16]
    bd60:	b	bda0 <coda_cursor_read_float_partial_array+0x5e0>
    bd64:	ldr	r3, [fp, #-16]
    bd68:	lsl	r3, r3, #2
    bd6c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bd70:	add	r3, r2, r3
    bd74:	ldr	r1, [r3]
    bd78:	ldr	r3, [fp, #-16]
    bd7c:	lsl	r3, r3, #2
    bd80:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bd84:	add	r3, r2, r3
    bd88:	vmov	s15, r1
    bd8c:	vcvt.f32.s32	s15, s15
    bd90:	vstr	s15, [r3]
    bd94:	ldr	r3, [fp, #-16]
    bd98:	sub	r3, r3, #1
    bd9c:	str	r3, [fp, #-16]
    bda0:	ldr	r3, [fp, #-16]
    bda4:	cmp	r3, #0
    bda8:	bge	bd64 <coda_cursor_read_float_partial_array+0x5a4>
    bdac:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    bdb0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bdb4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bdb8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bdbc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bdc0:	bl	4200 <read_uint32_partial_array>
    bdc4:	mov	r3, r0
    bdc8:	cmp	r3, #0
    bdcc:	beq	bdd8 <coda_cursor_read_float_partial_array+0x618>
    bdd0:	mvn	r3, #0
    bdd4:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    bdd8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bddc:	sub	r3, r3, #1
    bde0:	str	r3, [fp, #-16]
    bde4:	b	be24 <coda_cursor_read_float_partial_array+0x664>
    bde8:	ldr	r3, [fp, #-16]
    bdec:	lsl	r3, r3, #2
    bdf0:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bdf4:	add	r3, r2, r3
    bdf8:	ldr	r1, [r3]
    bdfc:	ldr	r3, [fp, #-16]
    be00:	lsl	r3, r3, #2
    be04:	ldr	r2, [fp, #-68]	; 0xffffffbc
    be08:	add	r3, r2, r3
    be0c:	vmov	s15, r1
    be10:	vcvt.f32.u32	s15, s15
    be14:	vstr	s15, [r3]
    be18:	ldr	r3, [fp, #-16]
    be1c:	sub	r3, r3, #1
    be20:	str	r3, [fp, #-16]
    be24:	ldr	r3, [fp, #-16]
    be28:	cmp	r3, #0
    be2c:	bge	bde8 <coda_cursor_read_float_partial_array+0x628>
    be30:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    be34:	ldr	r3, [fp, #-64]	; 0xffffffc0
    be38:	lsl	r3, r3, #3
    be3c:	mov	r0, r3
    be40:	bl	0 <malloc>
    be44:	mov	r3, r0
    be48:	str	r3, [fp, #-28]	; 0xffffffe4
    be4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    be50:	cmp	r3, #0
    be54:	bne	be7c <coda_cursor_read_float_partial_array+0x6bc>
    be58:	ldr	r3, [fp, #-64]	; 0xffffffc0
    be5c:	lsl	r3, r3, #3
    be60:	mov	r2, r3
    be64:	movw	r1, #0
    be68:	movt	r1, #0
    be6c:	mvn	r0, #0
    be70:	bl	0 <coda_set_error>
    be74:	mvn	r3, #0
    be78:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    be7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    be80:	ldr	r2, [fp, #-64]	; 0xffffffc0
    be84:	ldr	r1, [fp, #-60]	; 0xffffffc4
    be88:	ldr	r0, [fp, #-56]	; 0xffffffc8
    be8c:	bl	4354 <read_int64_partial_array>
    be90:	mov	r3, r0
    be94:	cmp	r3, #0
    be98:	beq	beac <coda_cursor_read_float_partial_array+0x6ec>
    be9c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bea0:	bl	0 <free>
    bea4:	mvn	r3, #0
    bea8:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    beac:	ldr	r3, [fp, #-64]	; 0xffffffc0
    beb0:	sub	r3, r3, #1
    beb4:	str	r3, [fp, #-16]
    beb8:	b	bf00 <coda_cursor_read_float_partial_array+0x740>
    bebc:	ldr	r3, [fp, #-16]
    bec0:	lsl	r3, r3, #3
    bec4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    bec8:	add	r3, r2, r3
    becc:	ldrd	r2, [r3]
    bed0:	ldr	r1, [fp, #-16]
    bed4:	lsl	r1, r1, #2
    bed8:	ldr	r0, [fp, #-68]	; 0xffffffbc
    bedc:	add	r4, r0, r1
    bee0:	mov	r0, r2
    bee4:	mov	r1, r3
    bee8:	bl	0 <__aeabi_l2f>
    beec:	mov	r3, r0
    bef0:	str	r3, [r4]
    bef4:	ldr	r3, [fp, #-16]
    bef8:	sub	r3, r3, #1
    befc:	str	r3, [fp, #-16]
    bf00:	ldr	r3, [fp, #-16]
    bf04:	cmp	r3, #0
    bf08:	bge	bebc <coda_cursor_read_float_partial_array+0x6fc>
    bf0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bf10:	bl	0 <free>
    bf14:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    bf18:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bf1c:	lsl	r3, r3, #3
    bf20:	mov	r0, r3
    bf24:	bl	0 <malloc>
    bf28:	mov	r3, r0
    bf2c:	str	r3, [fp, #-32]	; 0xffffffe0
    bf30:	ldr	r3, [fp, #-32]	; 0xffffffe0
    bf34:	cmp	r3, #0
    bf38:	bne	bf60 <coda_cursor_read_float_partial_array+0x7a0>
    bf3c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bf40:	lsl	r3, r3, #3
    bf44:	mov	r2, r3
    bf48:	movw	r1, #0
    bf4c:	movt	r1, #0
    bf50:	mvn	r0, #0
    bf54:	bl	0 <coda_set_error>
    bf58:	mvn	r3, #0
    bf5c:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    bf60:	ldr	r3, [fp, #-32]	; 0xffffffe0
    bf64:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bf68:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bf6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bf70:	bl	44a8 <read_uint64_partial_array>
    bf74:	mov	r3, r0
    bf78:	cmp	r3, #0
    bf7c:	beq	bf90 <coda_cursor_read_float_partial_array+0x7d0>
    bf80:	ldr	r0, [fp, #-32]	; 0xffffffe0
    bf84:	bl	0 <free>
    bf88:	mvn	r3, #0
    bf8c:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    bf90:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bf94:	sub	r3, r3, #1
    bf98:	str	r3, [fp, #-16]
    bf9c:	b	bfe4 <coda_cursor_read_float_partial_array+0x824>
    bfa0:	ldr	r3, [fp, #-16]
    bfa4:	lsl	r3, r3, #3
    bfa8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    bfac:	add	r3, r2, r3
    bfb0:	ldrd	r2, [r3]
    bfb4:	ldr	r1, [fp, #-16]
    bfb8:	lsl	r1, r1, #2
    bfbc:	ldr	r0, [fp, #-68]	; 0xffffffbc
    bfc0:	add	r4, r0, r1
    bfc4:	mov	r0, r2
    bfc8:	mov	r1, r3
    bfcc:	bl	0 <__aeabi_ul2f>
    bfd0:	mov	r3, r0
    bfd4:	str	r3, [r4]
    bfd8:	ldr	r3, [fp, #-16]
    bfdc:	sub	r3, r3, #1
    bfe0:	str	r3, [fp, #-16]
    bfe4:	ldr	r3, [fp, #-16]
    bfe8:	cmp	r3, #0
    bfec:	bge	bfa0 <coda_cursor_read_float_partial_array+0x7e0>
    bff0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    bff4:	bl	0 <free>
    bff8:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    bffc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c000:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c004:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c008:	ldr	r0, [fp, #-56]	; 0xffffffc8
    c00c:	bl	45d8 <read_float_partial_array>
    c010:	mov	r3, r0
    c014:	cmp	r3, #0
    c018:	beq	c128 <coda_cursor_read_float_partial_array+0x968>
    c01c:	mvn	r3, #0
    c020:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    c024:	ldr	r3, [fp, #-64]	; 0xffffffc0
    c028:	lsl	r3, r3, #3
    c02c:	mov	r0, r3
    c030:	bl	0 <malloc>
    c034:	mov	r3, r0
    c038:	str	r3, [fp, #-36]	; 0xffffffdc
    c03c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    c040:	cmp	r3, #0
    c044:	bne	c06c <coda_cursor_read_float_partial_array+0x8ac>
    c048:	ldr	r3, [fp, #-64]	; 0xffffffc0
    c04c:	lsl	r3, r3, #3
    c050:	mov	r2, r3
    c054:	movw	r1, #0
    c058:	movt	r1, #0
    c05c:	mvn	r0, #0
    c060:	bl	0 <coda_set_error>
    c064:	mvn	r3, #0
    c068:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    c06c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    c070:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c074:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c078:	ldr	r0, [fp, #-56]	; 0xffffffc8
    c07c:	bl	476c <read_double_partial_array>
    c080:	mov	r3, r0
    c084:	cmp	r3, #0
    c088:	beq	c09c <coda_cursor_read_float_partial_array+0x8dc>
    c08c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    c090:	bl	0 <free>
    c094:	mvn	r3, #0
    c098:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    c09c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    c0a0:	sub	r3, r3, #1
    c0a4:	str	r3, [fp, #-16]
    c0a8:	b	c0e4 <coda_cursor_read_float_partial_array+0x924>
    c0ac:	ldr	r3, [fp, #-16]
    c0b0:	lsl	r3, r3, #3
    c0b4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    c0b8:	add	r3, r2, r3
    c0bc:	vldr	d7, [r3]
    c0c0:	ldr	r3, [fp, #-16]
    c0c4:	lsl	r3, r3, #2
    c0c8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    c0cc:	add	r3, r2, r3
    c0d0:	vcvt.f32.f64	s15, d7
    c0d4:	vstr	s15, [r3]
    c0d8:	ldr	r3, [fp, #-16]
    c0dc:	sub	r3, r3, #1
    c0e0:	str	r3, [fp, #-16]
    c0e4:	ldr	r3, [fp, #-16]
    c0e8:	cmp	r3, #0
    c0ec:	bge	c0ac <coda_cursor_read_float_partial_array+0x8ec>
    c0f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    c0f4:	bl	0 <free>
    c0f8:	b	c12c <coda_cursor_read_float_partial_array+0x96c>
    c0fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    c100:	mov	r0, r3
    c104:	bl	0 <coda_type_get_native_type_name>
    c108:	mov	r3, r0
    c10c:	mov	r2, r3
    c110:	movw	r1, #0
    c114:	movt	r1, #0
    c118:	mvn	r0, #104	; 0x68
    c11c:	bl	0 <coda_set_error>
    c120:	mvn	r3, #0
    c124:	b	c130 <coda_cursor_read_float_partial_array+0x970>
    c128:	nop	{0}
    c12c:	mov	r3, #0
    c130:	mov	r0, r3
    c134:	sub	sp, fp, #8
    c138:	ldr	r4, [sp]
    c13c:	ldr	fp, [sp, #4]
    c140:	add	sp, sp, #8
    c144:	pop	{pc}		; (ldr pc, [sp], #4)
    c148:	.word	0x00000818

0000c14c <coda_cursor_read_double_partial_array>:
    c14c:	str	r4, [sp, #-12]!
    c150:	str	fp, [sp, #4]
    c154:	str	lr, [sp, #8]
    c158:	add	fp, sp, #8
    c15c:	sub	sp, sp, #52	; 0x34
    c160:	str	r0, [fp, #-40]	; 0xffffffd8
    c164:	str	r1, [fp, #-44]	; 0xffffffd4
    c168:	str	r2, [fp, #-48]	; 0xffffffd0
    c16c:	str	r3, [fp, #-52]	; 0xffffffcc
    c170:	ldr	r3, [fp, #-40]	; 0xffffffd8
    c174:	cmp	r3, #0
    c178:	beq	c1b0 <coda_cursor_read_double_partial_array+0x64>
    c17c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    c180:	ldr	r3, [r3, #4]
    c184:	cmp	r3, #0
    c188:	ble	c1b0 <coda_cursor_read_double_partial_array+0x64>
    c18c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    c190:	ldr	r3, [r3, #4]
    c194:	sub	r3, r3, #1
    c198:	ldr	r2, [fp, #-40]	; 0xffffffd8
    c19c:	lsl	r3, r3, #4
    c1a0:	add	r3, r2, r3
    c1a4:	ldr	r3, [r3, #8]
    c1a8:	cmp	r3, #0
    c1ac:	bne	c1d4 <coda_cursor_read_double_partial_array+0x88>
    c1b0:	movw	r3, #5355	; 0x14eb
    c1b4:	movw	r2, #0
    c1b8:	movt	r2, #0
    c1bc:	movw	r1, #0
    c1c0:	movt	r1, #0
    c1c4:	mvn	r0, #99	; 0x63
    c1c8:	bl	0 <coda_set_error>
    c1cc:	mvn	r3, #0
    c1d0:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c1d4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c1d8:	cmp	r3, #0
    c1dc:	bne	c204 <coda_cursor_read_double_partial_array+0xb8>
    c1e0:	movw	r3, #5360	; 0x14f0
    c1e4:	movw	r2, #0
    c1e8:	movt	r2, #0
    c1ec:	movw	r1, #0
    c1f0:	movt	r1, #0
    c1f4:	mvn	r0, #99	; 0x63
    c1f8:	bl	0 <coda_set_error>
    c1fc:	mvn	r3, #0
    c200:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c204:	ldr	r3, [fp, #-40]	; 0xffffffd8
    c208:	ldr	r3, [r3, #4]
    c20c:	sub	r3, r3, #1
    c210:	ldr	r2, [fp, #-40]	; 0xffffffd8
    c214:	lsl	r3, r3, #4
    c218:	add	r3, r2, r3
    c21c:	ldr	r3, [r3, #8]
    c220:	ldr	r3, [r3]
    c224:	cmp	r3, #99	; 0x63
    c228:	bhi	c24c <coda_cursor_read_double_partial_array+0x100>
    c22c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    c230:	ldr	r3, [r3, #4]
    c234:	sub	r3, r3, #1
    c238:	ldr	r2, [fp, #-40]	; 0xffffffd8
    c23c:	lsl	r3, r3, #4
    c240:	add	r3, r2, r3
    c244:	ldr	r3, [r3, #8]
    c248:	b	c26c <coda_cursor_read_double_partial_array+0x120>
    c24c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    c250:	ldr	r3, [r3, #4]
    c254:	sub	r3, r3, #1
    c258:	ldr	r2, [fp, #-40]	; 0xffffffd8
    c25c:	lsl	r3, r3, #4
    c260:	add	r3, r2, r3
    c264:	ldr	r3, [r3, #8]
    c268:	ldr	r3, [r3, #4]
    c26c:	str	r3, [fp, #-20]	; 0xffffffec
    c270:	ldr	r3, [fp, #-20]	; 0xffffffec
    c274:	ldr	r3, [r3, #8]
    c278:	cmp	r3, #1
    c27c:	beq	c2b0 <coda_cursor_read_double_partial_array+0x164>
    c280:	ldr	r3, [fp, #-20]	; 0xffffffec
    c284:	ldr	r3, [r3, #8]
    c288:	mov	r0, r3
    c28c:	bl	0 <coda_type_get_class_name>
    c290:	mov	r3, r0
    c294:	mov	r2, r3
    c298:	movw	r1, #0
    c29c:	movt	r1, #0
    c2a0:	mvn	r0, #104	; 0x68
    c2a4:	bl	0 <coda_set_error>
    c2a8:	mvn	r3, #0
    c2ac:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c2b0:	ldr	r3, [pc, #1788]	; c9b4 <coda_cursor_read_double_partial_array+0x868>
    c2b4:	ldr	r3, [pc, r3]
    c2b8:	mrc	15, 0, r2, cr13, cr0, {3}
    c2bc:	ldr	r3, [r2, r3]
    c2c0:	cmp	r3, #0
    c2c4:	beq	c368 <coda_cursor_read_double_partial_array+0x21c>
    c2c8:	sub	r3, fp, #32
    c2cc:	mov	r1, r3
    c2d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c2d4:	bl	0 <coda_cursor_get_num_elements>
    c2d8:	mov	r3, r0
    c2dc:	cmp	r3, #0
    c2e0:	beq	c2ec <coda_cursor_read_double_partial_array+0x1a0>
    c2e4:	mvn	r3, #0
    c2e8:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c2ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
    c2f0:	cmp	r3, #0
    c2f4:	blt	c308 <coda_cursor_read_double_partial_array+0x1bc>
    c2f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c2fc:	ldr	r2, [fp, #-44]	; 0xffffffd4
    c300:	cmp	r2, r3
    c304:	blt	c328 <coda_cursor_read_double_partial_array+0x1dc>
    c308:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c30c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    c310:	movw	r1, #0
    c314:	movt	r1, #0
    c318:	mvn	r0, #106	; 0x6a
    c31c:	bl	0 <coda_set_error>
    c320:	mvn	r3, #0
    c324:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c328:	ldr	r2, [fp, #-44]	; 0xffffffd4
    c32c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c330:	add	r2, r2, r3
    c334:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c338:	cmp	r2, r3
    c33c:	ble	c368 <coda_cursor_read_double_partial_array+0x21c>
    c340:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c344:	str	r3, [sp]
    c348:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c34c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    c350:	movw	r1, #0
    c354:	movt	r1, #0
    c358:	mvn	r0, #106	; 0x6a
    c35c:	bl	0 <coda_set_error>
    c360:	mvn	r3, #0
    c364:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c368:	sub	r2, fp, #28
    c36c:	sub	r3, fp, #24
    c370:	mov	r1, r3
    c374:	ldr	r0, [fp, #-20]	; 0xffffffec
    c378:	bl	115c <get_array_element_unconverted_read_type>
    c37c:	mov	r3, r0
    c380:	cmp	r3, #0
    c384:	beq	c390 <coda_cursor_read_double_partial_array+0x244>
    c388:	mvn	r3, #0
    c38c:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c390:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c394:	cmp	r3, #9
    c398:	ldrls	pc, [pc, r3, lsl #2]
    c39c:	b	c8a0 <coda_cursor_read_double_partial_array+0x754>
    c3a0:	.word	0x0000c3c8
    c3a4:	.word	0x0000c448
    c3a8:	.word	0x0000c4c8
    c3ac:	.word	0x0000c54c
    c3b0:	.word	0x0000c5d0
    c3b4:	.word	0x0000c654
    c3b8:	.word	0x0000c6d8
    c3bc:	.word	0x0000c768
    c3c0:	.word	0x0000c7f8
    c3c4:	.word	0x0000c878
    c3c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c3cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c3d0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c3d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c3d8:	bl	3afc <read_int8_partial_array>
    c3dc:	mov	r3, r0
    c3e0:	cmp	r3, #0
    c3e4:	beq	c3f0 <coda_cursor_read_double_partial_array+0x2a4>
    c3e8:	mvn	r3, #0
    c3ec:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c3f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c3f4:	sub	r3, r3, #1
    c3f8:	str	r3, [fp, #-16]
    c3fc:	b	c438 <coda_cursor_read_double_partial_array+0x2ec>
    c400:	ldr	r3, [fp, #-16]
    c404:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c408:	add	r3, r2, r3
    c40c:	ldrsb	r1, [r3]
    c410:	ldr	r3, [fp, #-16]
    c414:	lsl	r3, r3, #3
    c418:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c41c:	add	r3, r2, r3
    c420:	vmov	s15, r1
    c424:	vcvt.f64.s32	d7, s15
    c428:	vstr	d7, [r3]
    c42c:	ldr	r3, [fp, #-16]
    c430:	sub	r3, r3, #1
    c434:	str	r3, [fp, #-16]
    c438:	ldr	r3, [fp, #-16]
    c43c:	cmp	r3, #0
    c440:	bge	c400 <coda_cursor_read_double_partial_array+0x2b4>
    c444:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c448:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c44c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c450:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c454:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c458:	bl	3c70 <read_uint8_partial_array>
    c45c:	mov	r3, r0
    c460:	cmp	r3, #0
    c464:	beq	c470 <coda_cursor_read_double_partial_array+0x324>
    c468:	mvn	r3, #0
    c46c:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c470:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c474:	sub	r3, r3, #1
    c478:	str	r3, [fp, #-16]
    c47c:	b	c4b8 <coda_cursor_read_double_partial_array+0x36c>
    c480:	ldr	r3, [fp, #-16]
    c484:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c488:	add	r3, r2, r3
    c48c:	ldrb	r1, [r3]
    c490:	ldr	r3, [fp, #-16]
    c494:	lsl	r3, r3, #3
    c498:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c49c:	add	r3, r2, r3
    c4a0:	vmov	s15, r1
    c4a4:	vcvt.f64.u32	d7, s15
    c4a8:	vstr	d7, [r3]
    c4ac:	ldr	r3, [fp, #-16]
    c4b0:	sub	r3, r3, #1
    c4b4:	str	r3, [fp, #-16]
    c4b8:	ldr	r3, [fp, #-16]
    c4bc:	cmp	r3, #0
    c4c0:	bge	c480 <coda_cursor_read_double_partial_array+0x334>
    c4c4:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c4c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c4cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c4d0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c4d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c4d8:	bl	3dc4 <read_int16_partial_array>
    c4dc:	mov	r3, r0
    c4e0:	cmp	r3, #0
    c4e4:	beq	c4f0 <coda_cursor_read_double_partial_array+0x3a4>
    c4e8:	mvn	r3, #0
    c4ec:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c4f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c4f4:	sub	r3, r3, #1
    c4f8:	str	r3, [fp, #-16]
    c4fc:	b	c53c <coda_cursor_read_double_partial_array+0x3f0>
    c500:	ldr	r3, [fp, #-16]
    c504:	lsl	r3, r3, #1
    c508:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c50c:	add	r3, r2, r3
    c510:	ldrsh	r1, [r3]
    c514:	ldr	r3, [fp, #-16]
    c518:	lsl	r3, r3, #3
    c51c:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c520:	add	r3, r2, r3
    c524:	vmov	s15, r1
    c528:	vcvt.f64.s32	d7, s15
    c52c:	vstr	d7, [r3]
    c530:	ldr	r3, [fp, #-16]
    c534:	sub	r3, r3, #1
    c538:	str	r3, [fp, #-16]
    c53c:	ldr	r3, [fp, #-16]
    c540:	cmp	r3, #0
    c544:	bge	c500 <coda_cursor_read_double_partial_array+0x3b4>
    c548:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c54c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c550:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c554:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c558:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c55c:	bl	3f38 <read_uint16_partial_array>
    c560:	mov	r3, r0
    c564:	cmp	r3, #0
    c568:	beq	c574 <coda_cursor_read_double_partial_array+0x428>
    c56c:	mvn	r3, #0
    c570:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c574:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c578:	sub	r3, r3, #1
    c57c:	str	r3, [fp, #-16]
    c580:	b	c5c0 <coda_cursor_read_double_partial_array+0x474>
    c584:	ldr	r3, [fp, #-16]
    c588:	lsl	r3, r3, #1
    c58c:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c590:	add	r3, r2, r3
    c594:	ldrh	r1, [r3]
    c598:	ldr	r3, [fp, #-16]
    c59c:	lsl	r3, r3, #3
    c5a0:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c5a4:	add	r3, r2, r3
    c5a8:	vmov	s15, r1
    c5ac:	vcvt.f64.u32	d7, s15
    c5b0:	vstr	d7, [r3]
    c5b4:	ldr	r3, [fp, #-16]
    c5b8:	sub	r3, r3, #1
    c5bc:	str	r3, [fp, #-16]
    c5c0:	ldr	r3, [fp, #-16]
    c5c4:	cmp	r3, #0
    c5c8:	bge	c584 <coda_cursor_read_double_partial_array+0x438>
    c5cc:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c5d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c5d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c5d8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c5dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c5e0:	bl	408c <read_int32_partial_array>
    c5e4:	mov	r3, r0
    c5e8:	cmp	r3, #0
    c5ec:	beq	c5f8 <coda_cursor_read_double_partial_array+0x4ac>
    c5f0:	mvn	r3, #0
    c5f4:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c5f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c5fc:	sub	r3, r3, #1
    c600:	str	r3, [fp, #-16]
    c604:	b	c644 <coda_cursor_read_double_partial_array+0x4f8>
    c608:	ldr	r3, [fp, #-16]
    c60c:	lsl	r3, r3, #2
    c610:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c614:	add	r3, r2, r3
    c618:	ldr	r1, [r3]
    c61c:	ldr	r3, [fp, #-16]
    c620:	lsl	r3, r3, #3
    c624:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c628:	add	r3, r2, r3
    c62c:	vmov	s15, r1
    c630:	vcvt.f64.s32	d7, s15
    c634:	vstr	d7, [r3]
    c638:	ldr	r3, [fp, #-16]
    c63c:	sub	r3, r3, #1
    c640:	str	r3, [fp, #-16]
    c644:	ldr	r3, [fp, #-16]
    c648:	cmp	r3, #0
    c64c:	bge	c608 <coda_cursor_read_double_partial_array+0x4bc>
    c650:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c654:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c658:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c65c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c660:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c664:	bl	4200 <read_uint32_partial_array>
    c668:	mov	r3, r0
    c66c:	cmp	r3, #0
    c670:	beq	c67c <coda_cursor_read_double_partial_array+0x530>
    c674:	mvn	r3, #0
    c678:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c67c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c680:	sub	r3, r3, #1
    c684:	str	r3, [fp, #-16]
    c688:	b	c6c8 <coda_cursor_read_double_partial_array+0x57c>
    c68c:	ldr	r3, [fp, #-16]
    c690:	lsl	r3, r3, #2
    c694:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c698:	add	r3, r2, r3
    c69c:	ldr	r1, [r3]
    c6a0:	ldr	r3, [fp, #-16]
    c6a4:	lsl	r3, r3, #3
    c6a8:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c6ac:	add	r3, r2, r3
    c6b0:	vmov	s15, r1
    c6b4:	vcvt.f64.u32	d7, s15
    c6b8:	vstr	d7, [r3]
    c6bc:	ldr	r3, [fp, #-16]
    c6c0:	sub	r3, r3, #1
    c6c4:	str	r3, [fp, #-16]
    c6c8:	ldr	r3, [fp, #-16]
    c6cc:	cmp	r3, #0
    c6d0:	bge	c68c <coda_cursor_read_double_partial_array+0x540>
    c6d4:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c6d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c6dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c6e0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c6e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c6e8:	bl	4354 <read_int64_partial_array>
    c6ec:	mov	r3, r0
    c6f0:	cmp	r3, #0
    c6f4:	beq	c700 <coda_cursor_read_double_partial_array+0x5b4>
    c6f8:	mvn	r3, #0
    c6fc:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c700:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c704:	sub	r3, r3, #1
    c708:	str	r3, [fp, #-16]
    c70c:	b	c758 <coda_cursor_read_double_partial_array+0x60c>
    c710:	ldr	r3, [fp, #-16]
    c714:	lsl	r3, r3, #3
    c718:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c71c:	add	r3, r2, r3
    c720:	ldrd	r2, [r3]
    c724:	ldr	r1, [fp, #-16]
    c728:	lsl	r1, r1, #3
    c72c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    c730:	add	r4, r0, r1
    c734:	mov	r0, r2
    c738:	mov	r1, r3
    c73c:	bl	0 <__aeabi_l2d>
    c740:	mov	r2, r0
    c744:	mov	r3, r1
    c748:	strd	r2, [r4]
    c74c:	ldr	r3, [fp, #-16]
    c750:	sub	r3, r3, #1
    c754:	str	r3, [fp, #-16]
    c758:	ldr	r3, [fp, #-16]
    c75c:	cmp	r3, #0
    c760:	bge	c710 <coda_cursor_read_double_partial_array+0x5c4>
    c764:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c768:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c76c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c770:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c774:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c778:	bl	44a8 <read_uint64_partial_array>
    c77c:	mov	r3, r0
    c780:	cmp	r3, #0
    c784:	beq	c790 <coda_cursor_read_double_partial_array+0x644>
    c788:	mvn	r3, #0
    c78c:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c790:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c794:	sub	r3, r3, #1
    c798:	str	r3, [fp, #-16]
    c79c:	b	c7e8 <coda_cursor_read_double_partial_array+0x69c>
    c7a0:	ldr	r3, [fp, #-16]
    c7a4:	lsl	r3, r3, #3
    c7a8:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c7ac:	add	r3, r2, r3
    c7b0:	ldrd	r2, [r3]
    c7b4:	ldr	r1, [fp, #-16]
    c7b8:	lsl	r1, r1, #3
    c7bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    c7c0:	add	r4, r0, r1
    c7c4:	mov	r0, r2
    c7c8:	mov	r1, r3
    c7cc:	bl	0 <__aeabi_ul2d>
    c7d0:	mov	r2, r0
    c7d4:	mov	r3, r1
    c7d8:	strd	r2, [r4]
    c7dc:	ldr	r3, [fp, #-16]
    c7e0:	sub	r3, r3, #1
    c7e4:	str	r3, [fp, #-16]
    c7e8:	ldr	r3, [fp, #-16]
    c7ec:	cmp	r3, #0
    c7f0:	bge	c7a0 <coda_cursor_read_double_partial_array+0x654>
    c7f4:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c7f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c7fc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c800:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c804:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c808:	bl	45d8 <read_float_partial_array>
    c80c:	mov	r3, r0
    c810:	cmp	r3, #0
    c814:	beq	c820 <coda_cursor_read_double_partial_array+0x6d4>
    c818:	mvn	r3, #0
    c81c:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c820:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c824:	sub	r3, r3, #1
    c828:	str	r3, [fp, #-16]
    c82c:	b	c868 <coda_cursor_read_double_partial_array+0x71c>
    c830:	ldr	r3, [fp, #-16]
    c834:	lsl	r3, r3, #2
    c838:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c83c:	add	r3, r2, r3
    c840:	vldr	s15, [r3]
    c844:	ldr	r3, [fp, #-16]
    c848:	lsl	r3, r3, #3
    c84c:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c850:	add	r3, r2, r3
    c854:	vcvt.f64.f32	d7, s15
    c858:	vstr	d7, [r3]
    c85c:	ldr	r3, [fp, #-16]
    c860:	sub	r3, r3, #1
    c864:	str	r3, [fp, #-16]
    c868:	ldr	r3, [fp, #-16]
    c86c:	cmp	r3, #0
    c870:	bge	c830 <coda_cursor_read_double_partial_array+0x6e4>
    c874:	b	c8d0 <coda_cursor_read_double_partial_array+0x784>
    c878:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c87c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c880:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c884:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c888:	bl	476c <read_double_partial_array>
    c88c:	mov	r3, r0
    c890:	cmp	r3, #0
    c894:	beq	c8cc <coda_cursor_read_double_partial_array+0x780>
    c898:	mvn	r3, #0
    c89c:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c8a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c8a4:	mov	r0, r3
    c8a8:	bl	0 <coda_type_get_native_type_name>
    c8ac:	mov	r3, r0
    c8b0:	mov	r2, r3
    c8b4:	movw	r1, #0
    c8b8:	movt	r1, #0
    c8bc:	mvn	r0, #104	; 0x68
    c8c0:	bl	0 <coda_set_error>
    c8c4:	mvn	r3, #0
    c8c8:	b	c99c <coda_cursor_read_double_partial_array+0x850>
    c8cc:	nop	{0}
    c8d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c8d4:	cmp	r3, #0
    c8d8:	beq	c998 <coda_cursor_read_double_partial_array+0x84c>
    c8dc:	mov	r3, #0
    c8e0:	str	r3, [fp, #-16]
    c8e4:	b	c988 <coda_cursor_read_double_partial_array+0x83c>
    c8e8:	ldr	r3, [fp, #-16]
    c8ec:	lsl	r3, r3, #3
    c8f0:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c8f4:	add	r3, r2, r3
    c8f8:	vldr	d6, [r3]
    c8fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c900:	vldr	d7, [r3, #24]
    c904:	vcmp.f64	d6, d7
    c908:	vmrs	APSR_nzcv, fpscr
    c90c:	bne	c930 <coda_cursor_read_double_partial_array+0x7e4>
    c910:	ldr	r3, [fp, #-16]
    c914:	lsl	r3, r3, #3
    c918:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c91c:	add	r4, r2, r3
    c920:	bl	0 <coda_NaN>
    c924:	vmov.f64	d7, d0
    c928:	vstr	d7, [r4]
    c92c:	b	c97c <coda_cursor_read_double_partial_array+0x830>
    c930:	ldr	r3, [fp, #-16]
    c934:	lsl	r3, r3, #3
    c938:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c93c:	add	r3, r2, r3
    c940:	vldr	d6, [r3]
    c944:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c948:	vldr	d7, [r3]
    c94c:	vmul.f64	d5, d6, d7
    c950:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c954:	vldr	d7, [r3, #8]
    c958:	vdiv.f64	d6, d5, d7
    c95c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c960:	vldr	d7, [r3, #16]
    c964:	ldr	r3, [fp, #-16]
    c968:	lsl	r3, r3, #3
    c96c:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c970:	add	r3, r2, r3
    c974:	vadd.f64	d7, d6, d7
    c978:	vstr	d7, [r3]
    c97c:	ldr	r3, [fp, #-16]
    c980:	add	r3, r3, #1
    c984:	str	r3, [fp, #-16]
    c988:	ldr	r2, [fp, #-16]
    c98c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c990:	cmp	r2, r3
    c994:	blt	c8e8 <coda_cursor_read_double_partial_array+0x79c>
    c998:	mov	r3, #0
    c99c:	mov	r0, r3
    c9a0:	sub	sp, fp, #8
    c9a4:	ldr	r4, [sp]
    c9a8:	ldr	fp, [sp, #4]
    c9ac:	add	sp, sp, #8
    c9b0:	pop	{pc}		; (ldr pc, [sp], #4)
    c9b4:	.word	0x000006f8

0000c9b8 <coda_cursor_read_char_partial_array>:
    c9b8:	str	fp, [sp, #-8]!
    c9bc:	str	lr, [sp, #4]
    c9c0:	add	fp, sp, #4
    c9c4:	sub	sp, sp, #40	; 0x28
    c9c8:	str	r0, [fp, #-24]	; 0xffffffe8
    c9cc:	str	r1, [fp, #-28]	; 0xffffffe4
    c9d0:	str	r2, [fp, #-32]	; 0xffffffe0
    c9d4:	str	r3, [fp, #-36]	; 0xffffffdc
    c9d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c9dc:	cmp	r3, #0
    c9e0:	beq	ca18 <coda_cursor_read_char_partial_array+0x60>
    c9e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c9e8:	ldr	r3, [r3, #4]
    c9ec:	cmp	r3, #0
    c9f0:	ble	ca18 <coda_cursor_read_char_partial_array+0x60>
    c9f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c9f8:	ldr	r3, [r3, #4]
    c9fc:	sub	r3, r3, #1
    ca00:	ldr	r2, [fp, #-24]	; 0xffffffe8
    ca04:	lsl	r3, r3, #4
    ca08:	add	r3, r2, r3
    ca0c:	ldr	r3, [r3, #8]
    ca10:	cmp	r3, #0
    ca14:	bne	ca3c <coda_cursor_read_char_partial_array+0x84>
    ca18:	movw	r3, #5542	; 0x15a6
    ca1c:	movw	r2, #0
    ca20:	movt	r2, #0
    ca24:	movw	r1, #0
    ca28:	movt	r1, #0
    ca2c:	mvn	r0, #99	; 0x63
    ca30:	bl	0 <coda_set_error>
    ca34:	mvn	r3, #0
    ca38:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    ca3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    ca40:	cmp	r3, #0
    ca44:	bne	ca6c <coda_cursor_read_char_partial_array+0xb4>
    ca48:	movw	r3, #5547	; 0x15ab
    ca4c:	movw	r2, #0
    ca50:	movt	r2, #0
    ca54:	movw	r1, #0
    ca58:	movt	r1, #0
    ca5c:	mvn	r0, #99	; 0x63
    ca60:	bl	0 <coda_set_error>
    ca64:	mvn	r3, #0
    ca68:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    ca6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ca70:	ldr	r3, [r3, #4]
    ca74:	sub	r3, r3, #1
    ca78:	ldr	r2, [fp, #-24]	; 0xffffffe8
    ca7c:	lsl	r3, r3, #4
    ca80:	add	r3, r2, r3
    ca84:	ldr	r3, [r3, #8]
    ca88:	ldr	r3, [r3]
    ca8c:	cmp	r3, #99	; 0x63
    ca90:	bhi	cab4 <coda_cursor_read_char_partial_array+0xfc>
    ca94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ca98:	ldr	r3, [r3, #4]
    ca9c:	sub	r3, r3, #1
    caa0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    caa4:	lsl	r3, r3, #4
    caa8:	add	r3, r2, r3
    caac:	ldr	r3, [r3, #8]
    cab0:	b	cad4 <coda_cursor_read_char_partial_array+0x11c>
    cab4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cab8:	ldr	r3, [r3, #4]
    cabc:	sub	r3, r3, #1
    cac0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    cac4:	lsl	r3, r3, #4
    cac8:	add	r3, r2, r3
    cacc:	ldr	r3, [r3, #8]
    cad0:	ldr	r3, [r3, #4]
    cad4:	str	r3, [fp, #-8]
    cad8:	ldr	r3, [fp, #-8]
    cadc:	ldr	r3, [r3, #8]
    cae0:	cmp	r3, #1
    cae4:	beq	cb18 <coda_cursor_read_char_partial_array+0x160>
    cae8:	ldr	r3, [fp, #-8]
    caec:	ldr	r3, [r3, #8]
    caf0:	mov	r0, r3
    caf4:	bl	0 <coda_type_get_class_name>
    caf8:	mov	r3, r0
    cafc:	mov	r2, r3
    cb00:	movw	r1, #0
    cb04:	movt	r1, #0
    cb08:	mvn	r0, #104	; 0x68
    cb0c:	bl	0 <coda_set_error>
    cb10:	mvn	r3, #0
    cb14:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    cb18:	ldr	r3, [pc, #336]	; cc70 <coda_cursor_read_char_partial_array+0x2b8>
    cb1c:	ldr	r3, [pc, r3]
    cb20:	mrc	15, 0, r2, cr13, cr0, {3}
    cb24:	ldr	r3, [r2, r3]
    cb28:	cmp	r3, #0
    cb2c:	beq	cbd0 <coda_cursor_read_char_partial_array+0x218>
    cb30:	sub	r3, fp, #16
    cb34:	mov	r1, r3
    cb38:	ldr	r0, [fp, #-24]	; 0xffffffe8
    cb3c:	bl	0 <coda_cursor_get_num_elements>
    cb40:	mov	r3, r0
    cb44:	cmp	r3, #0
    cb48:	beq	cb54 <coda_cursor_read_char_partial_array+0x19c>
    cb4c:	mvn	r3, #0
    cb50:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    cb54:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cb58:	cmp	r3, #0
    cb5c:	blt	cb70 <coda_cursor_read_char_partial_array+0x1b8>
    cb60:	ldr	r3, [fp, #-16]
    cb64:	ldr	r2, [fp, #-28]	; 0xffffffe4
    cb68:	cmp	r2, r3
    cb6c:	blt	cb90 <coda_cursor_read_char_partial_array+0x1d8>
    cb70:	ldr	r3, [fp, #-16]
    cb74:	ldr	r2, [fp, #-28]	; 0xffffffe4
    cb78:	movw	r1, #0
    cb7c:	movt	r1, #0
    cb80:	mvn	r0, #106	; 0x6a
    cb84:	bl	0 <coda_set_error>
    cb88:	mvn	r3, #0
    cb8c:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    cb90:	ldr	r2, [fp, #-28]	; 0xffffffe4
    cb94:	ldr	r3, [fp, #-32]	; 0xffffffe0
    cb98:	add	r2, r2, r3
    cb9c:	ldr	r3, [fp, #-16]
    cba0:	cmp	r2, r3
    cba4:	ble	cbd0 <coda_cursor_read_char_partial_array+0x218>
    cba8:	ldr	r3, [fp, #-16]
    cbac:	str	r3, [sp]
    cbb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    cbb4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    cbb8:	movw	r1, #0
    cbbc:	movt	r1, #0
    cbc0:	mvn	r0, #106	; 0x6a
    cbc4:	bl	0 <coda_set_error>
    cbc8:	mvn	r3, #0
    cbcc:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    cbd0:	sub	r3, fp, #12
    cbd4:	mov	r1, r3
    cbd8:	ldr	r0, [fp, #-8]
    cbdc:	bl	10bc <get_array_element_read_type>
    cbe0:	mov	r3, r0
    cbe4:	cmp	r3, #0
    cbe8:	beq	cbf4 <coda_cursor_read_char_partial_array+0x23c>
    cbec:	mvn	r3, #0
    cbf0:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    cbf4:	ldr	r3, [fp, #-12]
    cbf8:	cmp	r3, #10
    cbfc:	bne	cc28 <coda_cursor_read_char_partial_array+0x270>
    cc00:	ldr	r3, [fp, #-36]	; 0xffffffdc
    cc04:	ldr	r2, [fp, #-32]	; 0xffffffe0
    cc08:	ldr	r1, [fp, #-28]	; 0xffffffe4
    cc0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    cc10:	bl	4990 <read_char_partial_array>
    cc14:	mov	r3, r0
    cc18:	cmp	r3, #0
    cc1c:	beq	cc54 <coda_cursor_read_char_partial_array+0x29c>
    cc20:	mvn	r3, #0
    cc24:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    cc28:	ldr	r3, [fp, #-12]
    cc2c:	mov	r0, r3
    cc30:	bl	0 <coda_type_get_native_type_name>
    cc34:	mov	r3, r0
    cc38:	mov	r2, r3
    cc3c:	movw	r1, #0
    cc40:	movt	r1, #0
    cc44:	mvn	r0, #104	; 0x68
    cc48:	bl	0 <coda_set_error>
    cc4c:	mvn	r3, #0
    cc50:	b	cc5c <coda_cursor_read_char_partial_array+0x2a4>
    cc54:	nop	{0}
    cc58:	mov	r3, #0
    cc5c:	mov	r0, r3
    cc60:	sub	sp, fp, #4
    cc64:	ldr	fp, [sp]
    cc68:	add	sp, sp, #4
    cc6c:	pop	{pc}		; (ldr pc, [sp], #4)
    cc70:	.word	0x0000014c

0000cc74 <coda_cursor_read_complex_double_pair>:
    cc74:	str	fp, [sp, #-8]!
    cc78:	str	lr, [sp, #4]
    cc7c:	add	fp, sp, #4
    cc80:	sub	sp, sp, #8
    cc84:	str	r0, [fp, #-8]
    cc88:	str	r1, [fp, #-12]
    cc8c:	ldr	r3, [fp, #-8]
    cc90:	cmp	r3, #0
    cc94:	beq	cccc <coda_cursor_read_complex_double_pair+0x58>
    cc98:	ldr	r3, [fp, #-8]
    cc9c:	ldr	r3, [r3, #4]
    cca0:	cmp	r3, #0
    cca4:	ble	cccc <coda_cursor_read_complex_double_pair+0x58>
    cca8:	ldr	r3, [fp, #-8]
    ccac:	ldr	r3, [r3, #4]
    ccb0:	sub	r3, r3, #1
    ccb4:	ldr	r2, [fp, #-8]
    ccb8:	lsl	r3, r3, #4
    ccbc:	add	r3, r2, r3
    ccc0:	ldr	r3, [r3, #8]
    ccc4:	cmp	r3, #0
    ccc8:	bne	ccf0 <coda_cursor_read_complex_double_pair+0x7c>
    cccc:	movw	r3, #5617	; 0x15f1
    ccd0:	movw	r2, #0
    ccd4:	movt	r2, #0
    ccd8:	movw	r1, #0
    ccdc:	movt	r1, #0
    cce0:	mvn	r0, #99	; 0x63
    cce4:	bl	0 <coda_set_error>
    cce8:	mvn	r3, #0
    ccec:	b	cd30 <coda_cursor_read_complex_double_pair+0xbc>
    ccf0:	ldr	r3, [fp, #-12]
    ccf4:	cmp	r3, #0
    ccf8:	bne	cd20 <coda_cursor_read_complex_double_pair+0xac>
    ccfc:	movw	r3, #5622	; 0x15f6
    cd00:	movw	r2, #0
    cd04:	movt	r2, #0
    cd08:	movw	r1, #0
    cd0c:	movt	r1, #0
    cd10:	mvn	r0, #99	; 0x63
    cd14:	bl	0 <coda_set_error>
    cd18:	mvn	r3, #0
    cd1c:	b	cd30 <coda_cursor_read_complex_double_pair+0xbc>
    cd20:	ldr	r1, [fp, #-12]
    cd24:	ldr	r0, [fp, #-8]
    cd28:	bl	1668 <read_double_pair>
    cd2c:	mov	r3, r0
    cd30:	mov	r0, r3
    cd34:	sub	sp, fp, #4
    cd38:	ldr	fp, [sp]
    cd3c:	add	sp, sp, #4
    cd40:	pop	{pc}		; (ldr pc, [sp], #4)

0000cd44 <coda_cursor_read_complex_double_pairs_array>:
    cd44:	str	fp, [sp, #-8]!
    cd48:	str	lr, [sp, #4]
    cd4c:	add	fp, sp, #4
    cd50:	sub	sp, sp, #32
    cd54:	str	r0, [fp, #-16]
    cd58:	str	r1, [fp, #-20]	; 0xffffffec
    cd5c:	str	r2, [fp, #-24]	; 0xffffffe8
    cd60:	ldr	r3, [fp, #-16]
    cd64:	cmp	r3, #0
    cd68:	beq	cda0 <coda_cursor_read_complex_double_pairs_array+0x5c>
    cd6c:	ldr	r3, [fp, #-16]
    cd70:	ldr	r3, [r3, #4]
    cd74:	cmp	r3, #0
    cd78:	ble	cda0 <coda_cursor_read_complex_double_pairs_array+0x5c>
    cd7c:	ldr	r3, [fp, #-16]
    cd80:	ldr	r3, [r3, #4]
    cd84:	sub	r3, r3, #1
    cd88:	ldr	r2, [fp, #-16]
    cd8c:	lsl	r3, r3, #4
    cd90:	add	r3, r2, r3
    cd94:	ldr	r3, [r3, #8]
    cd98:	cmp	r3, #0
    cd9c:	bne	cdc4 <coda_cursor_read_complex_double_pairs_array+0x80>
    cda0:	movw	r3, #5649	; 0x1611
    cda4:	movw	r2, #0
    cda8:	movt	r2, #0
    cdac:	movw	r1, #0
    cdb0:	movt	r1, #0
    cdb4:	mvn	r0, #99	; 0x63
    cdb8:	bl	0 <coda_set_error>
    cdbc:	mvn	r3, #0
    cdc0:	b	cec4 <coda_cursor_read_complex_double_pairs_array+0x180>
    cdc4:	ldr	r3, [fp, #-20]	; 0xffffffec
    cdc8:	cmp	r3, #0
    cdcc:	bne	cdf4 <coda_cursor_read_complex_double_pairs_array+0xb0>
    cdd0:	movw	r3, #5654	; 0x1616
    cdd4:	movw	r2, #0
    cdd8:	movt	r2, #0
    cddc:	movw	r1, #0
    cde0:	movt	r1, #0
    cde4:	mvn	r0, #99	; 0x63
    cde8:	bl	0 <coda_set_error>
    cdec:	mvn	r3, #0
    cdf0:	b	cec4 <coda_cursor_read_complex_double_pairs_array+0x180>
    cdf4:	ldr	r3, [fp, #-16]
    cdf8:	ldr	r3, [r3, #4]
    cdfc:	sub	r3, r3, #1
    ce00:	ldr	r2, [fp, #-16]
    ce04:	lsl	r3, r3, #4
    ce08:	add	r3, r2, r3
    ce0c:	ldr	r3, [r3, #8]
    ce10:	ldr	r3, [r3]
    ce14:	cmp	r3, #99	; 0x63
    ce18:	bhi	ce3c <coda_cursor_read_complex_double_pairs_array+0xf8>
    ce1c:	ldr	r3, [fp, #-16]
    ce20:	ldr	r3, [r3, #4]
    ce24:	sub	r3, r3, #1
    ce28:	ldr	r2, [fp, #-16]
    ce2c:	lsl	r3, r3, #4
    ce30:	add	r3, r2, r3
    ce34:	ldr	r3, [r3, #8]
    ce38:	b	ce5c <coda_cursor_read_complex_double_pairs_array+0x118>
    ce3c:	ldr	r3, [fp, #-16]
    ce40:	ldr	r3, [r3, #4]
    ce44:	sub	r3, r3, #1
    ce48:	ldr	r2, [fp, #-16]
    ce4c:	lsl	r3, r3, #4
    ce50:	add	r3, r2, r3
    ce54:	ldr	r3, [r3, #8]
    ce58:	ldr	r3, [r3, #4]
    ce5c:	str	r3, [fp, #-8]
    ce60:	ldr	r3, [fp, #-8]
    ce64:	ldr	r3, [r3, #8]
    ce68:	cmp	r3, #1
    ce6c:	beq	cea0 <coda_cursor_read_complex_double_pairs_array+0x15c>
    ce70:	ldr	r3, [fp, #-8]
    ce74:	ldr	r3, [r3, #8]
    ce78:	mov	r0, r3
    ce7c:	bl	0 <coda_type_get_class_name>
    ce80:	mov	r3, r0
    ce84:	mov	r2, r3
    ce88:	movw	r1, #0
    ce8c:	movt	r1, #0
    ce90:	mvn	r0, #104	; 0x68
    ce94:	bl	0 <coda_set_error>
    ce98:	mvn	r3, #0
    ce9c:	b	cec4 <coda_cursor_read_complex_double_pairs_array+0x180>
    cea0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cea4:	str	r3, [sp]
    cea8:	mov	r3, #16
    ceac:	ldr	r2, [fp, #-20]	; 0xffffffec
    ceb0:	movw	r1, #0
    ceb4:	movt	r1, #0
    ceb8:	ldr	r0, [fp, #-16]
    cebc:	bl	0 <read_array>
    cec0:	mov	r3, r0
    cec4:	mov	r0, r3
    cec8:	sub	sp, fp, #4
    cecc:	ldr	fp, [sp]
    ced0:	add	sp, sp, #4
    ced4:	pop	{pc}		; (ldr pc, [sp], #4)

0000ced8 <coda_cursor_read_complex_double_split>:
    ced8:	str	fp, [sp, #-8]!
    cedc:	str	lr, [sp, #4]
    cee0:	add	fp, sp, #4
    cee4:	sub	sp, sp, #32
    cee8:	str	r0, [fp, #-24]	; 0xffffffe8
    ceec:	str	r1, [fp, #-28]	; 0xffffffe4
    cef0:	str	r2, [fp, #-32]	; 0xffffffe0
    cef4:	sub	r3, fp, #20
    cef8:	mov	r1, r3
    cefc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    cf00:	bl	cc74 <coda_cursor_read_complex_double_pair>
    cf04:	mov	r3, r0
    cf08:	cmp	r3, #0
    cf0c:	beq	cf18 <coda_cursor_read_complex_double_split+0x40>
    cf10:	mvn	r3, #0
    cf14:	b	cf34 <coda_cursor_read_complex_double_split+0x5c>
    cf18:	ldrd	r2, [fp, #-20]	; 0xffffffec
    cf1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    cf20:	strd	r2, [r1]
    cf24:	ldrd	r2, [fp, #-12]
    cf28:	ldr	r1, [fp, #-32]	; 0xffffffe0
    cf2c:	strd	r2, [r1]
    cf30:	mov	r3, #0
    cf34:	mov	r0, r3
    cf38:	sub	sp, fp, #4
    cf3c:	ldr	fp, [sp]
    cf40:	add	sp, sp, #4
    cf44:	pop	{pc}		; (ldr pc, [sp], #4)

0000cf48 <coda_cursor_read_complex_double_split_array>:
    cf48:	str	fp, [sp, #-8]!
    cf4c:	str	lr, [sp, #4]
    cf50:	add	fp, sp, #4
    cf54:	sub	sp, sp, #32
    cf58:	str	r0, [fp, #-16]
    cf5c:	str	r1, [fp, #-20]	; 0xffffffec
    cf60:	str	r2, [fp, #-24]	; 0xffffffe8
    cf64:	str	r3, [fp, #-28]	; 0xffffffe4
    cf68:	ldr	r3, [fp, #-16]
    cf6c:	cmp	r3, #0
    cf70:	beq	cfa8 <coda_cursor_read_complex_double_split_array+0x60>
    cf74:	ldr	r3, [fp, #-16]
    cf78:	ldr	r3, [r3, #4]
    cf7c:	cmp	r3, #0
    cf80:	ble	cfa8 <coda_cursor_read_complex_double_split_array+0x60>
    cf84:	ldr	r3, [fp, #-16]
    cf88:	ldr	r3, [r3, #4]
    cf8c:	sub	r3, r3, #1
    cf90:	ldr	r2, [fp, #-16]
    cf94:	lsl	r3, r3, #4
    cf98:	add	r3, r2, r3
    cf9c:	ldr	r3, [r3, #8]
    cfa0:	cmp	r3, #0
    cfa4:	bne	cfcc <coda_cursor_read_complex_double_split_array+0x84>
    cfa8:	movw	r3, #5713	; 0x1651
    cfac:	movw	r2, #0
    cfb0:	movt	r2, #0
    cfb4:	movw	r1, #0
    cfb8:	movt	r1, #0
    cfbc:	mvn	r0, #99	; 0x63
    cfc0:	bl	0 <coda_set_error>
    cfc4:	mvn	r3, #0
    cfc8:	b	d104 <coda_cursor_read_complex_double_split_array+0x1bc>
    cfcc:	ldr	r3, [fp, #-20]	; 0xffffffec
    cfd0:	cmp	r3, #0
    cfd4:	bne	cffc <coda_cursor_read_complex_double_split_array+0xb4>
    cfd8:	movw	r3, #5718	; 0x1656
    cfdc:	movw	r2, #0
    cfe0:	movt	r2, #0
    cfe4:	movw	r1, #0
    cfe8:	movt	r1, #0
    cfec:	mvn	r0, #99	; 0x63
    cff0:	bl	0 <coda_set_error>
    cff4:	mvn	r3, #0
    cff8:	b	d104 <coda_cursor_read_complex_double_split_array+0x1bc>
    cffc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    d000:	cmp	r3, #0
    d004:	bne	d02c <coda_cursor_read_complex_double_split_array+0xe4>
    d008:	movw	r3, #5723	; 0x165b
    d00c:	movw	r2, #0
    d010:	movt	r2, #0
    d014:	movw	r1, #0
    d018:	movt	r1, #0
    d01c:	mvn	r0, #99	; 0x63
    d020:	bl	0 <coda_set_error>
    d024:	mvn	r3, #0
    d028:	b	d104 <coda_cursor_read_complex_double_split_array+0x1bc>
    d02c:	ldr	r3, [fp, #-16]
    d030:	ldr	r3, [r3, #4]
    d034:	sub	r3, r3, #1
    d038:	ldr	r2, [fp, #-16]
    d03c:	lsl	r3, r3, #4
    d040:	add	r3, r2, r3
    d044:	ldr	r3, [r3, #8]
    d048:	ldr	r3, [r3]
    d04c:	cmp	r3, #99	; 0x63
    d050:	bhi	d074 <coda_cursor_read_complex_double_split_array+0x12c>
    d054:	ldr	r3, [fp, #-16]
    d058:	ldr	r3, [r3, #4]
    d05c:	sub	r3, r3, #1
    d060:	ldr	r2, [fp, #-16]
    d064:	lsl	r3, r3, #4
    d068:	add	r3, r2, r3
    d06c:	ldr	r3, [r3, #8]
    d070:	b	d094 <coda_cursor_read_complex_double_split_array+0x14c>
    d074:	ldr	r3, [fp, #-16]
    d078:	ldr	r3, [r3, #4]
    d07c:	sub	r3, r3, #1
    d080:	ldr	r2, [fp, #-16]
    d084:	lsl	r3, r3, #4
    d088:	add	r3, r2, r3
    d08c:	ldr	r3, [r3, #8]
    d090:	ldr	r3, [r3, #4]
    d094:	str	r3, [fp, #-8]
    d098:	ldr	r3, [fp, #-8]
    d09c:	ldr	r3, [r3, #8]
    d0a0:	cmp	r3, #1
    d0a4:	beq	d0d8 <coda_cursor_read_complex_double_split_array+0x190>
    d0a8:	ldr	r3, [fp, #-8]
    d0ac:	ldr	r3, [r3, #8]
    d0b0:	mov	r0, r3
    d0b4:	bl	0 <coda_type_get_class_name>
    d0b8:	mov	r3, r0
    d0bc:	mov	r2, r3
    d0c0:	movw	r1, #0
    d0c4:	movt	r1, #0
    d0c8:	mvn	r0, #104	; 0x68
    d0cc:	bl	0 <coda_set_error>
    d0d0:	mvn	r3, #0
    d0d4:	b	d104 <coda_cursor_read_complex_double_split_array+0x1bc>
    d0d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d0dc:	str	r3, [sp, #4]
    d0e0:	mov	r3, #8
    d0e4:	str	r3, [sp]
    d0e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    d0ec:	ldr	r2, [fp, #-20]	; 0xffffffec
    d0f0:	movw	r1, #0
    d0f4:	movt	r1, #0
    d0f8:	ldr	r0, [fp, #-16]
    d0fc:	bl	1200 <read_split_array>
    d100:	mov	r3, r0
    d104:	mov	r0, r3
    d108:	sub	sp, fp, #4
    d10c:	ldr	fp, [sp]
    d110:	add	sp, sp, #4
    d114:	pop	{pc}		; (ldr pc, [sp], #4)
