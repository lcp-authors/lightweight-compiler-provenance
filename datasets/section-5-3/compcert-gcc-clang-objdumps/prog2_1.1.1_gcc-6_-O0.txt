
../compcert-repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

0001063c <.init>:
   1063c:	push	{r3, lr}
   10640:	bl	10710 <_start@@Base+0x3c>
   10644:	pop	{r3, pc}

Disassembly of section .plt:

00010648 <printf@plt-0x14>:
   10648:	push	{lr}		; (str lr, [sp, #-4]!)
   1064c:	ldr	lr, [pc, #4]	; 10658 <printf@plt-0x4>
   10650:	add	lr, pc, lr
   10654:	ldr	pc, [lr, #8]!
   10658:	andeq	r0, r1, r8, lsr #19

0001065c <printf@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2472]!	; 0x9a8

00010668 <fopen@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2464]!	; 0x9a0

00010674 <tolower@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2456]!	; 0x998

00010680 <puts@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2448]!	; 0x990

0001068c <__libc_start_main@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2440]!	; 0x988

00010698 <__gmon_start__@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2432]!	; 0x980

000106a4 <memset@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2424]!	; 0x978

000106b0 <fclose@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2416]!	; 0x970

000106bc <abort@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2408]!	; 0x968

000106c8 <getc@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2400]!	; 0x960

Disassembly of section .text:

000106d4 <_start@@Base>:
   106d4:	mov	fp, #0
   106d8:	mov	lr, #0
   106dc:	pop	{r1}		; (ldr r1, [sp], #4)
   106e0:	mov	r2, sp
   106e4:	push	{r2}		; (str r2, [sp, #-4]!)
   106e8:	push	{r0}		; (str r0, [sp, #-4]!)
   106ec:	ldr	ip, [pc, #16]	; 10704 <_start@@Base+0x30>
   106f0:	push	{ip}		; (str ip, [sp, #-4]!)
   106f4:	ldr	r0, [pc, #12]	; 10708 <_start@@Base+0x34>
   106f8:	ldr	r3, [pc, #12]	; 1070c <_start@@Base+0x38>
   106fc:	bl	1068c <__libc_start_main@plt>
   10700:	bl	106bc <abort@plt>
   10704:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10708:	andeq	r0, r1, r0, lsl #17
   1070c:	muleq	r1, r0, fp
   10710:	ldr	r3, [pc, #20]	; 1072c <_start@@Base+0x58>
   10714:	ldr	r2, [pc, #20]	; 10730 <_start@@Base+0x5c>
   10718:	add	r3, pc, r3
   1071c:	ldr	r2, [r3, r2]
   10720:	cmp	r2, #0
   10724:	bxeq	lr
   10728:	b	10698 <__gmon_start__@plt>
   1072c:	andeq	r0, r1, r0, ror #17
   10730:	andeq	r0, r0, r4, lsr r0
   10734:	ldr	r3, [pc, #28]	; 10758 <_start@@Base+0x84>
   10738:	ldr	r0, [pc, #28]	; 1075c <_start@@Base+0x88>
   1073c:	sub	r3, r3, r0
   10740:	cmp	r3, #6
   10744:	bxls	lr
   10748:	ldr	r3, [pc, #16]	; 10760 <_start@@Base+0x8c>
   1074c:	cmp	r3, #0
   10750:	bxeq	lr
   10754:	bx	r3
   10758:	andeq	r1, r2, r3, asr #32
   1075c:	andeq	r1, r2, r0, asr #32
   10760:	andeq	r0, r0, r0
   10764:	ldr	r1, [pc, #36]	; 10790 <_start@@Base+0xbc>
   10768:	ldr	r0, [pc, #36]	; 10794 <_start@@Base+0xc0>
   1076c:	sub	r1, r1, r0
   10770:	asr	r1, r1, #2
   10774:	add	r1, r1, r1, lsr #31
   10778:	asrs	r1, r1, #1
   1077c:	bxeq	lr
   10780:	ldr	r3, [pc, #16]	; 10798 <_start@@Base+0xc4>
   10784:	cmp	r3, #0
   10788:	bxeq	lr
   1078c:	bx	r3
   10790:	andeq	r1, r2, r0, asr #32
   10794:	andeq	r1, r2, r0, asr #32
   10798:	andeq	r0, r0, r0
   1079c:	push	{r4, lr}
   107a0:	ldr	r4, [pc, #24]	; 107c0 <_start@@Base+0xec>
   107a4:	ldrb	r3, [r4]
   107a8:	cmp	r3, #0
   107ac:	popne	{r4, pc}
   107b0:	bl	10734 <_start@@Base+0x60>
   107b4:	mov	r3, #1
   107b8:	strb	r3, [r4]
   107bc:	pop	{r4, pc}
   107c0:	andeq	r1, r2, r0, asr #32
   107c4:	ldr	r0, [pc, #40]	; 107f4 <_start@@Base+0x120>
   107c8:	ldr	r3, [r0]
   107cc:	cmp	r3, #0
   107d0:	bne	107d8 <_start@@Base+0x104>
   107d4:	b	10764 <_start@@Base+0x90>
   107d8:	ldr	r3, [pc, #24]	; 107f8 <_start@@Base+0x124>
   107dc:	cmp	r3, #0
   107e0:	beq	107d4 <_start@@Base+0x100>
   107e4:	push	{r4, lr}
   107e8:	blx	r3
   107ec:	pop	{r4, lr}
   107f0:	b	10764 <_start@@Base+0x90>
   107f4:	andeq	r0, r2, r4, lsl pc
   107f8:	andeq	r0, r0, r0

000107fc <in_array@@Base>:
   107fc:	push	{fp}		; (str fp, [sp, #-4]!)
   10800:	add	fp, sp, #0
   10804:	sub	sp, sp, #28
   10808:	str	r0, [fp, #-16]
   1080c:	str	r1, [fp, #-20]	; 0xffffffec
   10810:	str	r2, [fp, #-24]	; 0xffffffe8
   10814:	mov	r3, #0
   10818:	str	r3, [fp, #-8]
   1081c:	mov	r3, #0
   10820:	str	r3, [fp, #-8]
   10824:	b	1085c <in_array@@Base+0x60>
   10828:	ldr	r3, [fp, #-8]
   1082c:	lsl	r3, r3, #2
   10830:	ldr	r2, [fp, #-20]	; 0xffffffec
   10834:	add	r3, r2, r3
   10838:	ldr	r2, [r3]
   1083c:	ldr	r3, [fp, #-16]
   10840:	cmp	r2, r3
   10844:	bne	10850 <in_array@@Base+0x54>
   10848:	mov	r3, #1
   1084c:	b	10870 <in_array@@Base+0x74>
   10850:	ldr	r3, [fp, #-8]
   10854:	add	r3, r3, #1
   10858:	str	r3, [fp, #-8]
   1085c:	ldr	r2, [fp, #-8]
   10860:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10864:	cmp	r2, r3
   10868:	ble	10828 <in_array@@Base+0x2c>
   1086c:	mov	r3, #0
   10870:	mov	r0, r3
   10874:	add	sp, fp, #0
   10878:	pop	{fp}		; (ldr fp, [sp], #4)
   1087c:	bx	lr

00010880 <main@@Base>:
   10880:	push	{fp, lr}
   10884:	add	fp, sp, #4
   10888:	sub	sp, sp, #216	; 0xd8
   1088c:	ldr	r3, [pc, #720]	; 10b64 <main@@Base+0x2e4>
   10890:	sub	ip, fp, #52	; 0x34
   10894:	mov	lr, r3
   10898:	ldm	lr!, {r0, r1, r2, r3}
   1089c:	stmia	ip!, {r0, r1, r2, r3}
   108a0:	ldm	lr, {r0, r1, r2, r3}
   108a4:	stm	ip, {r0, r1, r2, r3}
   108a8:	ldr	r3, [pc, #696]	; 10b68 <main@@Base+0x2e8>
   108ac:	sub	ip, fp, #68	; 0x44
   108b0:	ldm	r3, {r0, r1, r2, r3}
   108b4:	stm	ip, {r0, r1, r2, r3}
   108b8:	ldr	r2, [pc, #684]	; 10b6c <main@@Base+0x2ec>
   108bc:	sub	r3, fp, #76	; 0x4c
   108c0:	ldm	r2, {r0, r1}
   108c4:	stm	r3, {r0, r1}
   108c8:	ldr	r3, [pc, #672]	; 10b70 <main@@Base+0x2f0>
   108cc:	sub	ip, fp, #100	; 0x64
   108d0:	mov	lr, r3
   108d4:	ldm	lr!, {r0, r1, r2, r3}
   108d8:	stmia	ip!, {r0, r1, r2, r3}
   108dc:	ldm	lr, {r0, r1}
   108e0:	stm	ip, {r0, r1}
   108e4:	ldr	r2, [pc, #648]	; 10b74 <main@@Base+0x2f4>
   108e8:	sub	r3, fp, #108	; 0x6c
   108ec:	ldm	r2, {r0, r1}
   108f0:	stm	r3, {r0, r1}
   108f4:	ldr	r2, [pc, #636]	; 10b78 <main@@Base+0x2f8>
   108f8:	sub	r3, fp, #116	; 0x74
   108fc:	ldm	r2, {r0, r1}
   10900:	stm	r3, {r0, r1}
   10904:	ldr	r1, [pc, #624]	; 10b7c <main@@Base+0x2fc>
   10908:	ldr	r0, [pc, #624]	; 10b80 <main@@Base+0x300>
   1090c:	bl	10668 <fopen@plt>
   10910:	str	r0, [fp, #-16]
   10914:	mov	r3, #0
   10918:	str	r3, [fp, #-12]
   1091c:	sub	r3, fp, #220	; 0xdc
   10920:	mov	r2, #104	; 0x68
   10924:	mov	r1, #0
   10928:	mov	r0, r3
   1092c:	bl	106a4 <memset@plt>
   10930:	ldr	r0, [fp, #-16]
   10934:	bl	106c8 <getc@plt>
   10938:	str	r0, [fp, #-8]
   1093c:	ldr	r3, [fp, #-8]
   10940:	cmn	r3, #1
   10944:	beq	10ab8 <main@@Base+0x238>
   10948:	sub	r3, fp, #52	; 0x34
   1094c:	mov	r2, #8
   10950:	mov	r1, r3
   10954:	ldr	r0, [fp, #-8]
   10958:	bl	107fc <in_array@@Base>
   1095c:	mov	r3, r0
   10960:	cmp	r3, #0
   10964:	beq	10974 <main@@Base+0xf4>
   10968:	mov	r3, #97	; 0x61
   1096c:	str	r3, [fp, #-8]
   10970:	b	10a4c <main@@Base+0x1cc>
   10974:	sub	r3, fp, #68	; 0x44
   10978:	mov	r2, #4
   1097c:	mov	r1, r3
   10980:	ldr	r0, [fp, #-8]
   10984:	bl	107fc <in_array@@Base>
   10988:	mov	r3, r0
   1098c:	cmp	r3, #0
   10990:	beq	109a0 <main@@Base+0x120>
   10994:	mov	r3, #101	; 0x65
   10998:	str	r3, [fp, #-8]
   1099c:	b	10a4c <main@@Base+0x1cc>
   109a0:	sub	r3, fp, #76	; 0x4c
   109a4:	mov	r2, #2
   109a8:	mov	r1, r3
   109ac:	ldr	r0, [fp, #-8]
   109b0:	bl	107fc <in_array@@Base>
   109b4:	mov	r3, r0
   109b8:	cmp	r3, #0
   109bc:	beq	109cc <main@@Base+0x14c>
   109c0:	mov	r3, #105	; 0x69
   109c4:	str	r3, [fp, #-8]
   109c8:	b	10a4c <main@@Base+0x1cc>
   109cc:	sub	r3, fp, #100	; 0x64
   109d0:	mov	r2, #6
   109d4:	mov	r1, r3
   109d8:	ldr	r0, [fp, #-8]
   109dc:	bl	107fc <in_array@@Base>
   109e0:	mov	r3, r0
   109e4:	cmp	r3, #0
   109e8:	beq	109f8 <main@@Base+0x178>
   109ec:	mov	r3, #111	; 0x6f
   109f0:	str	r3, [fp, #-8]
   109f4:	b	10a4c <main@@Base+0x1cc>
   109f8:	sub	r3, fp, #108	; 0x6c
   109fc:	mov	r2, #2
   10a00:	mov	r1, r3
   10a04:	ldr	r0, [fp, #-8]
   10a08:	bl	107fc <in_array@@Base>
   10a0c:	mov	r3, r0
   10a10:	cmp	r3, #0
   10a14:	beq	10a24 <main@@Base+0x1a4>
   10a18:	mov	r3, #117	; 0x75
   10a1c:	str	r3, [fp, #-8]
   10a20:	b	10a4c <main@@Base+0x1cc>
   10a24:	sub	r3, fp, #116	; 0x74
   10a28:	mov	r2, #2
   10a2c:	mov	r1, r3
   10a30:	ldr	r0, [fp, #-8]
   10a34:	bl	107fc <in_array@@Base>
   10a38:	mov	r3, r0
   10a3c:	cmp	r3, #0
   10a40:	beq	10a4c <main@@Base+0x1cc>
   10a44:	mov	r3, #99	; 0x63
   10a48:	str	r3, [fp, #-8]
   10a4c:	ldr	r0, [fp, #-8]
   10a50:	bl	10674 <tolower@plt>
   10a54:	str	r0, [fp, #-8]
   10a58:	ldr	r3, [fp, #-8]
   10a5c:	sub	r3, r3, #97	; 0x61
   10a60:	str	r3, [fp, #-8]
   10a64:	ldr	r3, [fp, #-8]
   10a68:	cmp	r3, #25
   10a6c:	bgt	10930 <main@@Base+0xb0>
   10a70:	ldr	r3, [fp, #-8]
   10a74:	cmp	r3, #0
   10a78:	blt	10930 <main@@Base+0xb0>
   10a7c:	ldr	r3, [fp, #-8]
   10a80:	lsl	r3, r3, #2
   10a84:	sub	r2, fp, #4
   10a88:	add	r3, r2, r3
   10a8c:	ldr	r3, [r3, #-216]	; 0xffffff28
   10a90:	add	r2, r3, #1
   10a94:	ldr	r3, [fp, #-8]
   10a98:	lsl	r3, r3, #2
   10a9c:	sub	r1, fp, #4
   10aa0:	add	r3, r1, r3
   10aa4:	str	r2, [r3, #-216]	; 0xffffff28
   10aa8:	ldr	r3, [fp, #-12]
   10aac:	add	r3, r3, #1
   10ab0:	str	r3, [fp, #-12]
   10ab4:	b	10930 <main@@Base+0xb0>
   10ab8:	nop			; (mov r0, r0)
   10abc:	ldr	r3, [fp, #-12]
   10ac0:	str	r3, [fp, #-20]	; 0xffffffec
   10ac4:	ldr	r0, [fp, #-16]
   10ac8:	bl	106b0 <fclose@plt>
   10acc:	ldr	r0, [pc, #176]	; 10b84 <main@@Base+0x304>
   10ad0:	bl	10680 <puts@plt>
   10ad4:	ldr	r1, [fp, #-12]
   10ad8:	ldr	r0, [pc, #168]	; 10b88 <main@@Base+0x308>
   10adc:	bl	1065c <printf@plt>
   10ae0:	mov	r3, #0
   10ae4:	str	r3, [fp, #-12]
   10ae8:	b	10b44 <main@@Base+0x2c4>
   10aec:	ldr	r3, [fp, #-12]
   10af0:	add	r1, r3, #97	; 0x61
   10af4:	ldr	r3, [fp, #-12]
   10af8:	lsl	r3, r3, #2
   10afc:	sub	r2, fp, #4
   10b00:	add	r3, r2, r3
   10b04:	ldr	r3, [r3, #-216]	; 0xffffff28
   10b08:	vmov	s15, r3
   10b0c:	vcvt.f32.s32	s13, s15
   10b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   10b14:	vmov	s15, r3
   10b18:	vcvt.f32.s32	s14, s15
   10b1c:	vdiv.f32	s15, s13, s14
   10b20:	vldr	s14, [pc, #56]	; 10b60 <main@@Base+0x2e0>
   10b24:	vmul.f32	s15, s15, s14
   10b28:	vcvt.f64.f32	d7, s15
   10b2c:	vmov	r2, r3, d7
   10b30:	ldr	r0, [pc, #84]	; 10b8c <main@@Base+0x30c>
   10b34:	bl	1065c <printf@plt>
   10b38:	ldr	r3, [fp, #-12]
   10b3c:	add	r3, r3, #1
   10b40:	str	r3, [fp, #-12]
   10b44:	ldr	r3, [fp, #-12]
   10b48:	cmp	r3, #25
   10b4c:	ble	10aec <main@@Base+0x26c>
   10b50:	mov	r3, #0
   10b54:	mov	r0, r3
   10b58:	sub	sp, fp, #4
   10b5c:	pop	{fp, pc}
   10b60:	sbcmi	r0, r8, #0
   10b64:	andeq	r0, r1, r8, asr ip
   10b68:	andeq	r0, r1, r8, ror ip
   10b6c:	andeq	r0, r1, r8, lsl #25
   10b70:	muleq	r1, r0, ip
   10b74:	andeq	r0, r1, r8, lsr #25
   10b78:			; <UNDEFINED> instruction: 0x00010cb0
   10b7c:	andeq	r0, r1, r0, lsl #24
   10b80:	andeq	r0, r1, r4, lsl #24
   10b84:	andeq	r0, r1, ip, lsl ip
   10b88:	andeq	r0, r1, r0, lsr #24
   10b8c:	andeq	r0, r1, r0, asr #24

00010b90 <__libc_csu_init@@Base>:
   10b90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b94:	mov	r7, r0
   10b98:	ldr	r6, [pc, #72]	; 10be8 <__libc_csu_init@@Base+0x58>
   10b9c:	ldr	r5, [pc, #72]	; 10bec <__libc_csu_init@@Base+0x5c>
   10ba0:	add	r6, pc, r6
   10ba4:	add	r5, pc, r5
   10ba8:	sub	r6, r6, r5
   10bac:	mov	r8, r1
   10bb0:	mov	r9, r2
   10bb4:	bl	1063c <printf@plt-0x20>
   10bb8:	asrs	r6, r6, #2
   10bbc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bc0:	mov	r4, #0
   10bc4:	add	r4, r4, #1
   10bc8:	ldr	r3, [r5], #4
   10bcc:	mov	r2, r9
   10bd0:	mov	r1, r8
   10bd4:	mov	r0, r7
   10bd8:	blx	r3
   10bdc:	cmp	r6, r4
   10be0:	bne	10bc4 <__libc_csu_init@@Base+0x34>
   10be4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10be8:	andeq	r0, r1, r8, ror #6
   10bec:	andeq	r0, r1, r0, ror #6

00010bf0 <__libc_csu_fini@@Base>:
   10bf0:	bx	lr

Disassembly of section .fini:

00010bf4 <.fini>:
   10bf4:	push	{r3, lr}
   10bf8:	pop	{r3, pc}
