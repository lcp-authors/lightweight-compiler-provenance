
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascbin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_relative_field_bit_offset_by_index>:
       0:	ldr	r3, [r0, #4]
       4:	strd	r4, [sp, #-36]!	; 0xffffffdc
       8:	strd	r6, [sp, #8]
       c:	strd	r8, [sp, #16]
      10:	strd	sl, [sp, #24]
      14:	add	r3, r0, r3, lsl #4
      18:	str	lr, [sp, #32]
      1c:	sub	sp, sp, #548	; 0x224
      20:	ldr	r8, [r3, #-8]
      24:	ldr	ip, [r8, #52]	; 0x34
      28:	ldr	r4, [ip, r1, lsl #2]
      2c:	add	ip, ip, r1, lsl #2
      30:	ldrd	r6, [r4, #24]
      34:	cmp	r6, #0
      38:	sbcs	r3, r7, #0
      3c:	movge	fp, #0
      40:	strdge	r6, [r2]
      44:	bge	a4 <get_relative_field_bit_offset_by_index+0xa4>
      48:	ldr	r3, [r4, #32]
      4c:	mov	r7, r2
      50:	mov	r5, r1
      54:	mov	r6, r0
      58:	cmp	r3, #0
      5c:	beq	fc <get_relative_field_bit_offset_by_index+0xfc>
      60:	ldr	r0, [r4, #20]
      64:	cmp	r0, #0
      68:	beq	c8 <get_relative_field_bit_offset_by_index+0xc8>
      6c:	add	r2, sp, #24
      70:	mov	r1, r6
      74:	bl	0 <coda_expression_eval_bool>
      78:	cmp	r0, #0
      7c:	bne	29c <get_relative_field_bit_offset_by_index+0x29c>
      80:	ldr	r3, [sp, #24]
      84:	cmp	r3, #0
      88:	bne	c4 <get_relative_field_bit_offset_by_index+0xc4>
      8c:	cmp	r5, #0
      90:	bne	2b8 <get_relative_field_bit_offset_by_index+0x2b8>
      94:	mov	r2, #0
      98:	mov	r3, #0
      9c:	mov	fp, r5
      a0:	strd	r2, [r7]
      a4:	mov	r0, fp
      a8:	add	sp, sp, #548	; 0x224
      ac:	ldrd	r4, [sp]
      b0:	ldrd	r6, [sp, #8]
      b4:	ldrd	r8, [sp, #16]
      b8:	ldrd	sl, [sp, #24]
      bc:	add	sp, sp, #32
      c0:	pop	{pc}		; (ldr pc, [sp], #4)
      c4:	ldr	r3, [r4, #32]
      c8:	mov	r2, r7
      cc:	mov	r0, r3
      d0:	mov	r1, r6
      d4:	bl	0 <coda_expression_eval_integer>
      d8:	subs	fp, r0, #0
      dc:	beq	a4 <get_relative_field_bit_offset_by_index+0xa4>
      e0:	movw	r0, #0
      e4:	movt	r0, #0
      e8:	bl	0 <coda_add_error_message>
      ec:	mov	r0, r6
      f0:	mvn	fp, #0
      f4:	bl	0 <coda_cursor_add_to_error_message>
      f8:	b	a4 <get_relative_field_bit_offset_by_index+0xa4>
      fc:	cmp	r1, #0
     100:	subne	r4, r1, #1
     104:	mvnne	r2, #0
     108:	mvnne	r3, #0
     10c:	bne	128 <get_relative_field_bit_offset_by_index+0x128>
     110:	b	2fc <get_relative_field_bit_offset_by_index+0x2fc>
     114:	ldr	r1, [lr, #32]
     118:	cmp	r1, #0
     11c:	bne	13c <get_relative_field_bit_offset_by_index+0x13c>
     120:	subs	r4, r4, #1
     124:	bmi	2d0 <get_relative_field_bit_offset_by_index+0x2d0>
     128:	ldr	lr, [ip, #-4]!
     12c:	ldrd	r0, [lr, #24]
     130:	cmp	r1, r3
     134:	cmpeq	r0, r2
     138:	beq	114 <get_relative_field_bit_offset_by_index+0x114>
     13c:	add	r2, sp, #8
     140:	mov	r1, r4
     144:	mov	r0, r6
     148:	bl	0 <get_relative_field_bit_offset_by_index>
     14c:	subs	fp, r0, #0
     150:	bne	294 <get_relative_field_bit_offset_by_index+0x294>
     154:	mov	r2, #520	; 0x208
     158:	mov	r1, r6
     15c:	add	r0, sp, #24
     160:	bl	0 <memcpy>
     164:	ldr	r3, [r6, #4]
     168:	add	ip, sp, #32
     16c:	ldr	r1, [sp, #8]
     170:	ldr	r2, [sp, #28]
     174:	lsl	r3, r3, #4
     178:	ldr	r0, [sp, #12]
     17c:	add	lr, r6, r3
     180:	ldr	r3, [r6, r3]
     184:	add	r2, r2, #1
     188:	add	ip, ip, r2, lsl #4
     18c:	str	r2, [sp, #28]
     190:	ldr	r2, [lr, #4]
     194:	adds	r3, r3, r1
     198:	str	r3, [ip, #-8]
     19c:	adc	r2, r2, r0
     1a0:	cmp	r4, r5
     1a4:	str	r2, [ip, #-4]
     1a8:	bge	27c <get_relative_field_bit_offset_by_index+0x27c>
     1ac:	mov	r9, #1
     1b0:	b	1e0 <get_relative_field_bit_offset_by_index+0x1e0>
     1b4:	add	r2, sp, #4
     1b8:	mov	r1, r6
     1bc:	bl	0 <coda_expression_eval_bool>
     1c0:	cmp	r0, #0
     1c4:	bne	288 <get_relative_field_bit_offset_by_index+0x288>
     1c8:	ldr	r3, [sp, #4]
     1cc:	cmp	r3, #0
     1d0:	bne	2f0 <get_relative_field_bit_offset_by_index+0x2f0>
     1d4:	add	r4, r4, #1
     1d8:	cmp	r5, r4
     1dc:	beq	274 <get_relative_field_bit_offset_by_index+0x274>
     1e0:	ldr	r3, [r8, #52]	; 0x34
     1e4:	lsl	sl, r4, #2
     1e8:	ldr	r3, [r3, r4, lsl #2]
     1ec:	str	r9, [sp, #4]
     1f0:	ldr	r0, [r3, #20]
     1f4:	cmp	r0, #0
     1f8:	bne	1b4 <get_relative_field_bit_offset_by_index+0x1b4>
     1fc:	ldr	r2, [sp, #28]
     200:	add	r1, sp, #16
     204:	add	r0, sp, #24
     208:	ldr	ip, [r3, #8]
     20c:	sub	r3, r2, #1
     210:	add	r2, sp, #544	; 0x220
     214:	add	r3, r2, r3, lsl #4
     218:	str	ip, [r3, #-512]	; 0xfffffe00
     21c:	str	r4, [r3, #-508]	; 0xfffffe04
     220:	bl	0 <coda_cursor_get_bit_size>
     224:	cmp	r0, #0
     228:	bne	294 <get_relative_field_bit_offset_by_index+0x294>
     22c:	ldr	r1, [sp, #8]
     230:	add	r2, sp, #32
     234:	ldr	r3, [sp, #28]
     238:	ldr	ip, [sp, #12]
     23c:	ldr	r0, [sp, #16]
     240:	add	r3, r2, r3, lsl #4
     244:	ldr	lr, [sp, #20]
     248:	ldr	r2, [r3, #-8]
     24c:	adds	r1, r1, r0
     250:	str	r1, [sp, #8]
     254:	adc	ip, ip, lr
     258:	ldr	r1, [r3, #-4]
     25c:	adds	r2, r2, r0
     260:	str	ip, [sp, #12]
     264:	str	r2, [r3, #-8]
     268:	adc	lr, r1, lr
     26c:	str	lr, [r3, #-4]
     270:	b	1d4 <get_relative_field_bit_offset_by_index+0x1d4>
     274:	ldr	r1, [sp, #8]
     278:	ldr	r0, [sp, #12]
     27c:	str	r1, [r7]
     280:	str	r0, [r7, #4]
     284:	b	a4 <get_relative_field_bit_offset_by_index+0xa4>
     288:	movw	r0, #0
     28c:	movt	r0, #0
     290:	bl	0 <coda_add_error_message>
     294:	mvn	fp, #0
     298:	b	a4 <get_relative_field_bit_offset_by_index+0xa4>
     29c:	movw	r0, #0
     2a0:	movt	r0, #0
     2a4:	bl	0 <coda_add_error_message>
     2a8:	mov	r0, r6
     2ac:	mvn	fp, #0
     2b0:	bl	0 <coda_cursor_add_to_error_message>
     2b4:	b	a4 <get_relative_field_bit_offset_by_index+0xa4>
     2b8:	mov	r2, r7
     2bc:	sub	r1, r5, #1
     2c0:	mov	r0, r6
     2c4:	bl	0 <get_relative_field_bit_offset_by_index>
     2c8:	mov	fp, r0
     2cc:	b	a4 <get_relative_field_bit_offset_by_index+0xa4>
     2d0:	movw	r3, #0
     2d4:	movt	r3, #0
     2d8:	movw	r1, #0
     2dc:	movt	r1, #0
     2e0:	movw	r0, #0
     2e4:	movt	r0, #0
     2e8:	mov	r2, #110	; 0x6e
     2ec:	bl	0 <__assert_fail>
     2f0:	ldr	r3, [r8, #52]	; 0x34
     2f4:	ldr	r3, [r3, sl]
     2f8:	b	1fc <get_relative_field_bit_offset_by_index+0x1fc>
     2fc:	movw	r3, #0
     300:	movt	r3, #0
     304:	movw	r1, #0
     308:	movt	r1, #0
     30c:	movw	r0, #0
     310:	movt	r0, #0
     314:	mov	r2, #99	; 0x63
     318:	bl	0 <__assert_fail>

0000031c <get_next_relative_field_bit_offset>:
     31c:	ldr	r3, [r0, #4]
     320:	strd	r4, [sp, #-36]!	; 0xffffffdc
     324:	strd	r6, [sp, #8]
     328:	mov	r6, r2
     32c:	strd	sl, [sp, #24]
     330:	mov	sl, r1
     334:	strd	r8, [sp, #16]
     338:	add	r1, r0, r3, lsl #4
     33c:	sub	r7, r3, #1
     340:	str	lr, [sp, #32]
     344:	add	r2, r0, r7, lsl #4
     348:	sub	sp, sp, #532	; 0x214
     34c:	ldr	r1, [r1, #-24]	; 0xffffffe8
     350:	ldr	r2, [r2, #12]
     354:	ldr	ip, [r1, #48]	; 0x30
     358:	add	r2, r2, #1
     35c:	cmp	ip, r2
     360:	ble	4e0 <get_next_relative_field_bit_offset+0x1c4>
     364:	ldr	r1, [r1, #52]	; 0x34
     368:	ldr	r5, [r1, r2, lsl #2]
     36c:	ldrd	r8, [r5, #24]
     370:	cmp	r8, #0
     374:	sbcs	r2, r9, #0
     378:	bge	43c <get_next_relative_field_bit_offset+0x120>
     37c:	lsl	r3, r3, #4
     380:	ldr	r9, [r5, #32]
     384:	mov	r4, r0
     388:	add	r1, r0, r3
     38c:	ldr	r8, [r0, r3]
     390:	mov	r3, r1
     394:	ldr	r2, [r1, #-16]
     398:	ldr	r1, [r1, #-12]
     39c:	ldr	fp, [r3, #4]
     3a0:	subs	r8, r8, r2
     3a4:	sbc	fp, fp, r1
     3a8:	cmp	r9, #0
     3ac:	beq	474 <get_next_relative_field_bit_offset+0x158>
     3b0:	mov	r2, #520	; 0x208
     3b4:	add	r0, sp, #8
     3b8:	mov	r1, r4
     3bc:	bl	0 <memcpy>
     3c0:	cmp	r6, #0
     3c4:	str	r7, [sp, #12]
     3c8:	beq	3d8 <get_next_relative_field_bit_offset+0xbc>
     3cc:	mvn	r2, #0
     3d0:	mvn	r3, #0
     3d4:	strd	r2, [r6]
     3d8:	ldr	r0, [r5, #20]
     3dc:	cmp	r0, #0
     3e0:	beq	408 <get_next_relative_field_bit_offset+0xec>
     3e4:	add	r2, sp, #4
     3e8:	add	r1, sp, #8
     3ec:	bl	0 <coda_expression_eval_bool>
     3f0:	cmp	r0, #0
     3f4:	bne	4bc <get_next_relative_field_bit_offset+0x1a0>
     3f8:	ldr	r0, [sp, #4]
     3fc:	cmp	r0, #0
     400:	beq	4ac <get_next_relative_field_bit_offset+0x190>
     404:	ldr	r9, [r5, #32]
     408:	mov	r2, sl
     40c:	add	r1, sp, #8
     410:	mov	r0, r9
     414:	bl	0 <coda_expression_eval_integer>
     418:	cmp	r0, #0
     41c:	beq	458 <get_next_relative_field_bit_offset+0x13c>
     420:	movw	r0, #0
     424:	movt	r0, #0
     428:	bl	0 <coda_add_error_message>
     42c:	mov	r0, r4
     430:	bl	0 <coda_cursor_add_to_error_message>
     434:	mvn	r0, #0
     438:	b	458 <get_next_relative_field_bit_offset+0x13c>
     43c:	cmp	r6, #0
     440:	strd	r8, [sl]
     444:	beq	4b4 <get_next_relative_field_bit_offset+0x198>
     448:	mvn	r2, #0
     44c:	mvn	r3, #0
     450:	mov	r0, #0
     454:	strd	r2, [r6]
     458:	add	sp, sp, #532	; 0x214
     45c:	ldrd	r4, [sp]
     460:	ldrd	r6, [sp, #8]
     464:	ldrd	r8, [sp, #16]
     468:	ldrd	sl, [sp, #24]
     46c:	add	sp, sp, #32
     470:	pop	{pc}		; (ldr pc, [sp], #4)
     474:	add	r1, sp, #8
     478:	bl	0 <coda_cursor_get_bit_size>
     47c:	cmp	r0, #0
     480:	bne	4d8 <get_next_relative_field_bit_offset+0x1bc>
     484:	ldr	r3, [sp, #8]
     488:	ldr	r2, [sp, #12]
     48c:	adds	r8, r3, r8
     490:	adc	fp, r2, fp
     494:	cmp	r6, #0
     498:	stm	sl, {r8, fp}
     49c:	beq	4b4 <get_next_relative_field_bit_offset+0x198>
     4a0:	str	r3, [r6]
     4a4:	str	r2, [r6, #4]
     4a8:	b	458 <get_next_relative_field_bit_offset+0x13c>
     4ac:	stm	sl, {r8, fp}
     4b0:	b	458 <get_next_relative_field_bit_offset+0x13c>
     4b4:	mov	r0, #0
     4b8:	b	458 <get_next_relative_field_bit_offset+0x13c>
     4bc:	movw	r0, #0
     4c0:	movt	r0, #0
     4c4:	bl	0 <coda_add_error_message>
     4c8:	mov	r0, r4
     4cc:	bl	0 <coda_cursor_add_to_error_message>
     4d0:	mvn	r0, #0
     4d4:	b	458 <get_next_relative_field_bit_offset+0x13c>
     4d8:	mvn	r0, #0
     4dc:	b	458 <get_next_relative_field_bit_offset+0x13c>
     4e0:	movw	r1, #0
     4e4:	movt	r1, #0
     4e8:	ldr	r3, [pc, #12]	; 4fc <get_next_relative_field_bit_offset+0x1e0>
     4ec:	movw	r0, #0
     4f0:	movt	r0, #0
     4f4:	mov	r2, #161	; 0xa1
     4f8:	bl	0 <__assert_fail>
     4fc:	.word	0x00000028

00000500 <coda_ascbin_cursor_set_product>:
     500:	ldr	r2, [r1, #20]
     504:	mov	r3, r0
     508:	mov	r0, #1
     50c:	strd	r4, [sp, #-16]!
     510:	str	r6, [sp, #8]
     514:	str	lr, [sp, #12]
     518:	str	r1, [r3]
     51c:	cmp	r2, #0
     520:	str	r0, [r3, #4]
     524:	beq	554 <coda_ascbin_cursor_set_product+0x54>
     528:	mov	r4, #0
     52c:	mov	r5, #0
     530:	ldr	r6, [sp, #8]
     534:	mvn	r1, #0
     538:	mov	r0, #0
     53c:	str	r2, [r3, #8]
     540:	strd	r4, [r3, #16]
     544:	ldrd	r4, [sp]
     548:	add	sp, sp, #12
     54c:	str	r1, [r3, #12]
     550:	pop	{pc}		; (ldr pc, [sp], #4)
     554:	movw	r1, #0
     558:	movt	r1, #0
     55c:	ldr	r3, [pc, #12]	; 570 <coda_ascbin_cursor_set_product+0x70>
     560:	movw	r0, #0
     564:	movt	r0, #0
     568:	mov	r2, #234	; 0xea
     56c:	bl	0 <__assert_fail>
     570:	.word	0x0000004c

00000574 <coda_ascbin_cursor_goto_record_field_by_index>:
     574:	ldr	r2, [r0, #4]
     578:	mov	r3, #1
     57c:	strd	r4, [sp, #-28]!	; 0xffffffe4
     580:	mov	r4, r0
     584:	strd	r6, [sp, #8]
     588:	mov	r6, r1
     58c:	strd	r8, [sp, #16]
     590:	str	lr, [sp, #24]
     594:	sub	sp, sp, #20
     598:	sub	r2, r2, #1
     59c:	str	r3, [sp, #4]
     5a0:	add	r3, r0, r2, lsl #4
     5a4:	ldr	r7, [r3, #8]
     5a8:	ldr	r3, [r7]
     5ac:	cmp	r3, #99	; 0x63
     5b0:	ldrhi	r7, [r7, #4]
     5b4:	cmp	r1, #0
     5b8:	ldr	r3, [r7, #48]	; 0x30
     5bc:	blt	6f0 <coda_ascbin_cursor_goto_record_field_by_index+0x17c>
     5c0:	cmp	r1, r3
     5c4:	bge	6f0 <coda_ascbin_cursor_goto_record_field_by_index+0x17c>
     5c8:	ldr	r3, [r7, #68]	; 0x44
     5cc:	add	r2, r0, r2, lsl #4
     5d0:	ldrd	r8, [r2, #16]
     5d4:	cmp	r3, #0
     5d8:	beq	628 <coda_ascbin_cursor_goto_record_field_by_index+0xb4>
     5dc:	add	r1, sp, #8
     5e0:	bl	0 <coda_cursor_get_available_union_field_index>
     5e4:	cmp	r0, #0
     5e8:	bne	6e8 <coda_ascbin_cursor_goto_record_field_by_index+0x174>
     5ec:	ldr	r3, [sp, #8]
     5f0:	cmp	r3, r6
     5f4:	beq	670 <coda_ascbin_cursor_goto_record_field_by_index+0xfc>
     5f8:	ldr	r5, [r4, #4]
     5fc:	str	r0, [sp, #4]
     600:	add	r3, r5, #1
     604:	str	r3, [r4, #4]
     608:	ldr	r0, [r7]
     60c:	add	r5, r4, r5, lsl #4
     610:	bl	0 <coda_no_data_singleton>
     614:	ldr	r3, [r4, #4]
     618:	str	r0, [r5, #8]
     61c:	sub	r5, r3, #1
     620:	lsl	r5, r5, #4
     624:	b	6a0 <coda_ascbin_cursor_goto_record_field_by_index+0x12c>
     628:	add	r2, sp, #8
     62c:	bl	0 <get_relative_field_bit_offset_by_index>
     630:	cmp	r0, #0
     634:	bne	6e8 <coda_ascbin_cursor_goto_record_field_by_index+0x174>
     638:	ldr	r2, [r7, #52]	; 0x34
     63c:	ldr	r3, [sp, #8]
     640:	ldr	r1, [sp, #12]
     644:	ldr	r2, [r2, r6, lsl #2]
     648:	adds	r8, r8, r3
     64c:	adc	r9, r9, r1
     650:	ldr	r0, [r2, #20]
     654:	cmp	r0, #0
     658:	beq	670 <coda_ascbin_cursor_goto_record_field_by_index+0xfc>
     65c:	add	r2, sp, #4
     660:	mov	r1, r4
     664:	bl	0 <coda_expression_eval_bool>
     668:	cmp	r0, #0
     66c:	bne	6d4 <coda_ascbin_cursor_goto_record_field_by_index+0x160>
     670:	ldr	r3, [sp, #4]
     674:	ldr	r5, [r4, #4]
     678:	cmp	r3, #0
     67c:	add	r3, r5, #1
     680:	str	r3, [r4, #4]
     684:	beq	608 <coda_ascbin_cursor_goto_record_field_by_index+0x94>
     688:	ldr	r1, [r7, #52]	; 0x34
     68c:	lsl	r5, r5, #4
     690:	add	r2, r4, r5
     694:	ldr	r1, [r1, r6, lsl #2]
     698:	ldr	r1, [r1, #8]
     69c:	str	r1, [r2, #8]
     6a0:	lsl	r3, r3, #4
     6a4:	add	r5, r4, r5
     6a8:	mov	r0, #0
     6ac:	add	r2, r4, r3
     6b0:	str	r6, [r5, #12]
     6b4:	str	r8, [r4, r3]
     6b8:	str	r9, [r2, #4]
     6bc:	add	sp, sp, #20
     6c0:	ldrd	r4, [sp]
     6c4:	ldrd	r6, [sp, #8]
     6c8:	ldrd	r8, [sp, #16]
     6cc:	add	sp, sp, #24
     6d0:	pop	{pc}		; (ldr pc, [sp], #4)
     6d4:	movw	r0, #0
     6d8:	movt	r0, #0
     6dc:	bl	0 <coda_add_error_message>
     6e0:	mov	r0, r4
     6e4:	bl	0 <coda_cursor_add_to_error_message>
     6e8:	mvn	r0, #0
     6ec:	b	6bc <coda_ascbin_cursor_goto_record_field_by_index+0x148>
     6f0:	mvn	r0, #100	; 0x64
     6f4:	mov	r2, r6
     6f8:	movw	r1, #0
     6fc:	movt	r1, #0
     700:	bl	0 <coda_set_error>
     704:	mvn	r0, #0
     708:	b	6bc <coda_ascbin_cursor_goto_record_field_by_index+0x148>

0000070c <coda_ascbin_cursor_goto_next_record_field>:
     70c:	ldr	r3, [r0, #4]
     710:	mov	r2, #1
     714:	strd	r4, [sp, #-28]!	; 0xffffffe4
     718:	mov	r4, r0
     71c:	strd	r6, [sp, #8]
     720:	strd	r8, [sp, #16]
     724:	str	lr, [sp, #24]
     728:	sub	sp, sp, #540	; 0x21c
     72c:	sub	r1, r3, #2
     730:	sub	r5, r3, #1
     734:	str	r2, [sp, #4]
     738:	add	r2, r0, r1, lsl #4
     73c:	ldr	r7, [r2, #8]
     740:	ldr	r2, [r7]
     744:	cmp	r2, #99	; 0x63
     748:	add	r2, r0, r5, lsl #4
     74c:	ldrhi	r7, [r7, #4]
     750:	ldr	r6, [r2, #12]
     754:	ldr	r3, [r7, #48]	; 0x30
     758:	adds	r6, r6, #1
     75c:	bmi	8b8 <coda_ascbin_cursor_goto_next_record_field+0x1ac>
     760:	cmp	r6, r3
     764:	bge	8b8 <coda_ascbin_cursor_goto_next_record_field+0x1ac>
     768:	ldr	r2, [r7, #68]	; 0x44
     76c:	add	r1, r0, r1, lsl #4
     770:	ldrd	r8, [r1, #16]
     774:	cmp	r2, #0
     778:	beq	7dc <coda_ascbin_cursor_goto_next_record_field+0xd0>
     77c:	mov	r2, #520	; 0x208
     780:	mov	r1, r4
     784:	add	r0, sp, #16
     788:	bl	0 <memcpy>
     78c:	add	r0, sp, #16
     790:	add	r1, sp, #8
     794:	str	r5, [sp, #20]
     798:	bl	0 <coda_cursor_get_available_union_field_index>
     79c:	cmp	r0, #0
     7a0:	bne	8b0 <coda_ascbin_cursor_goto_next_record_field+0x1a4>
     7a4:	ldr	r3, [sp, #8]
     7a8:	cmp	r3, r6
     7ac:	beq	844 <coda_ascbin_cursor_goto_next_record_field+0x138>
     7b0:	ldr	r5, [r4, #4]
     7b4:	str	r0, [sp, #4]
     7b8:	sub	r5, r5, #1
     7bc:	ldr	r0, [r7]
     7c0:	add	r5, r4, r5, lsl #4
     7c4:	bl	0 <coda_no_data_singleton>
     7c8:	ldr	r3, [r4, #4]
     7cc:	str	r0, [r5, #8]
     7d0:	sub	r5, r3, #1
     7d4:	lsl	r3, r5, #4
     7d8:	b	870 <coda_ascbin_cursor_goto_next_record_field+0x164>
     7dc:	add	r1, sp, #8
     7e0:	bl	31c <get_next_relative_field_bit_offset>
     7e4:	cmp	r0, #0
     7e8:	bne	8b0 <coda_ascbin_cursor_goto_next_record_field+0x1a4>
     7ec:	ldr	r2, [r7, #52]	; 0x34
     7f0:	ldr	r3, [sp, #8]
     7f4:	ldr	r1, [sp, #12]
     7f8:	ldr	r2, [r2, r6, lsl #2]
     7fc:	adds	r8, r8, r3
     800:	adc	r9, r9, r1
     804:	ldr	r5, [r2, #20]
     808:	cmp	r5, #0
     80c:	beq	844 <coda_ascbin_cursor_goto_next_record_field+0x138>
     810:	mov	r2, #520	; 0x208
     814:	mov	r1, r4
     818:	add	r0, sp, #16
     81c:	bl	0 <memcpy>
     820:	ldr	r3, [sp, #20]
     824:	add	r1, sp, #16
     828:	mov	r0, r5
     82c:	add	r2, sp, #4
     830:	sub	r3, r3, #1
     834:	str	r3, [sp, #20]
     838:	bl	0 <coda_expression_eval_bool>
     83c:	cmp	r0, #0
     840:	bne	89c <coda_ascbin_cursor_goto_next_record_field+0x190>
     844:	ldr	r3, [sp, #4]
     848:	ldr	r5, [r4, #4]
     84c:	cmp	r3, #0
     850:	sub	r5, r5, #1
     854:	beq	7bc <coda_ascbin_cursor_goto_next_record_field+0xb0>
     858:	ldr	r1, [r7, #52]	; 0x34
     85c:	lsl	r3, r5, #4
     860:	add	r2, r4, r3
     864:	ldr	r1, [r1, r6, lsl #2]
     868:	ldr	r1, [r1, #8]
     86c:	str	r1, [r2, #8]
     870:	add	r5, r4, r5, lsl #4
     874:	mov	r0, #0
     878:	add	r4, r4, r3
     87c:	str	r6, [r4, #12]
     880:	strd	r8, [r5, #16]
     884:	add	sp, sp, #540	; 0x21c
     888:	ldrd	r4, [sp]
     88c:	ldrd	r6, [sp, #8]
     890:	ldrd	r8, [sp, #16]
     894:	add	sp, sp, #24
     898:	pop	{pc}		; (ldr pc, [sp], #4)
     89c:	movw	r0, #0
     8a0:	movt	r0, #0
     8a4:	bl	0 <coda_add_error_message>
     8a8:	mov	r0, r4
     8ac:	bl	0 <coda_cursor_add_to_error_message>
     8b0:	mvn	r0, #0
     8b4:	b	884 <coda_ascbin_cursor_goto_next_record_field+0x178>
     8b8:	mvn	r0, #100	; 0x64
     8bc:	mov	r2, r6
     8c0:	movw	r1, #0
     8c4:	movt	r1, #0
     8c8:	bl	0 <coda_set_error>
     8cc:	mvn	r0, #0
     8d0:	b	884 <coda_ascbin_cursor_goto_next_record_field+0x178>

000008d4 <coda_ascbin_cursor_goto_array_element>:
     8d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
     8d8:	strd	r6, [sp, #8]
     8dc:	strd	sl, [sp, #24]
     8e0:	mov	sl, r0
     8e4:	ldr	r0, [r0, #4]
     8e8:	strd	r8, [sp, #16]
     8ec:	str	lr, [sp, #32]
     8f0:	sub	sp, sp, #20
     8f4:	add	r3, sl, r0, lsl #4
     8f8:	ldr	r9, [r3, #-8]
     8fc:	ldr	r3, [r9]
     900:	cmp	r3, #99	; 0x63
     904:	ldrhi	r9, [r9, #4]
     908:	ldr	r3, [r9, #48]	; 0x30
     90c:	cmp	r3, r1
     910:	bne	b30 <coda_ascbin_cursor_goto_array_element+0x25c>
     914:	cmp	r1, #0
     918:	movgt	r5, #0
     91c:	subgt	r8, r2, #4
     920:	movgt	r6, r5
     924:	addgt	r7, r9, #52	; 0x34
     928:	bgt	964 <coda_ascbin_cursor_goto_array_element+0x90>
     92c:	b	af4 <coda_ascbin_cursor_goto_array_element+0x220>
     930:	ldr	r2, [r8, #4]!
     934:	cmp	r2, r4
     938:	movlt	r3, #0
     93c:	movge	r3, #1
     940:	orrs	r3, r3, r2, lsr #31
     944:	bne	990 <coda_ascbin_cursor_goto_array_element+0xbc>
     948:	ldr	r3, [r9, #48]	; 0x30
     94c:	cmp	r5, #0
     950:	add	r5, r5, #1
     954:	mulne	r6, r4, r6
     958:	cmp	r3, r5
     95c:	add	r6, r6, r2
     960:	ble	9c8 <coda_ascbin_cursor_goto_array_element+0xf4>
     964:	ldr	r4, [r7], #4
     968:	cmn	r4, #1
     96c:	bne	930 <coda_ascbin_cursor_goto_array_element+0x5c>
     970:	add	r2, sp, #8
     974:	mov	r1, sl
     978:	ldr	r0, [r7, #28]
     97c:	bl	0 <coda_expression_eval_integer>
     980:	cmp	r0, #0
     984:	bne	ad0 <coda_ascbin_cursor_goto_array_element+0x1fc>
     988:	ldr	r4, [sp, #8]
     98c:	b	930 <coda_ascbin_cursor_goto_array_element+0x5c>
     990:	mov	r3, r4
     994:	movw	r1, #0
     998:	movt	r1, #0
     99c:	mvn	r0, #106	; 0x6a
     9a0:	mvn	r4, #0
     9a4:	bl	0 <coda_set_error>
     9a8:	mov	r0, r4
     9ac:	add	sp, sp, #20
     9b0:	ldrd	r4, [sp]
     9b4:	ldrd	r6, [sp, #8]
     9b8:	ldrd	r8, [sp, #16]
     9bc:	ldrd	sl, [sp, #24]
     9c0:	add	sp, sp, #32
     9c4:	pop	{pc}		; (ldr pc, [sp], #4)
     9c8:	ldr	r0, [sl, #4]
     9cc:	ldr	ip, [r9, #40]	; 0x28
     9d0:	lsl	lr, r0, #4
     9d4:	add	r7, r0, #1
     9d8:	ldrd	r2, [ip, #24]
     9dc:	add	r4, sl, lr
     9e0:	str	r7, [sl, #4]
     9e4:	ldr	r8, [sl, lr]
     9e8:	ldr	fp, [r4, #4]
     9ec:	cmp	r2, #0
     9f0:	strd	r2, [sp]
     9f4:	sbcs	r3, r3, #0
     9f8:	str	r8, [r4, #16]
     9fc:	str	fp, [r4, #20]
     a00:	blt	a4c <coda_ascbin_cursor_goto_array_element+0x178>
     a04:	ldrd	r0, [sp]
     a08:	asr	r5, r6, #31
     a0c:	ldr	r2, [sp]
     a10:	mul	r3, r6, r1
     a14:	umull	r0, r1, r6, r0
     a18:	mla	r2, r2, r5, r3
     a1c:	adds	r8, r0, r8
     a20:	add	r1, r2, r1
     a24:	adc	fp, r1, fp
     a28:	lsl	r7, r7, #4
     a2c:	add	r3, sl, r7
     a30:	str	r8, [sl, r7]
     a34:	str	fp, [r3, #4]
     a38:	add	sl, sl, lr
     a3c:	mov	r4, #0
     a40:	str	ip, [sl, #8]
     a44:	str	r6, [sl, #12]
     a48:	b	9a8 <coda_ascbin_cursor_goto_array_element+0xd4>
     a4c:	cmp	r6, #0
     a50:	movne	r4, #0
     a54:	bne	a98 <coda_ascbin_cursor_goto_array_element+0x1c4>
     a58:	b	a38 <coda_ascbin_cursor_goto_array_element+0x164>
     a5c:	lsl	ip, r3, #4
     a60:	sub	r0, r3, #1
     a64:	ldr	r1, [sp, #8]
     a68:	add	r2, sl, ip
     a6c:	ldr	r3, [sl, ip]
     a70:	add	lr, sl, ip
     a74:	ldr	r2, [r2, #4]
     a78:	ldr	r5, [sp, #12]
     a7c:	adds	r3, r3, r1
     a80:	str	r3, [sl, ip]
     a84:	ldr	ip, [r9, #40]	; 0x28
     a88:	adc	r2, r2, r5
     a8c:	cmp	r6, r4
     a90:	str	r2, [lr, #4]
     a94:	beq	aec <coda_ascbin_cursor_goto_array_element+0x218>
     a98:	add	r3, sl, r0, lsl #4
     a9c:	add	r1, sp, #8
     aa0:	mov	r0, sl
     aa4:	str	ip, [r3, #8]
     aa8:	str	r4, [r3, #12]
     aac:	add	r4, r4, #1
     ab0:	bl	0 <coda_cursor_get_bit_size>
     ab4:	cmp	r0, #0
     ab8:	ldr	r3, [sl, #4]
     abc:	beq	a5c <coda_ascbin_cursor_goto_array_element+0x188>
     ac0:	mvn	r4, #0
     ac4:	add	r3, r3, r4
     ac8:	str	r3, [sl, #4]
     acc:	b	9a8 <coda_ascbin_cursor_goto_array_element+0xd4>
     ad0:	mov	r1, r5
     ad4:	movw	r0, #0
     ad8:	movt	r0, #0
     adc:	bl	0 <coda_add_error_message>
     ae0:	mov	r0, sl
     ae4:	bl	0 <coda_cursor_add_to_error_message>
     ae8:	b	9a8 <coda_ascbin_cursor_goto_array_element+0xd4>
     aec:	lsl	lr, r0, #4
     af0:	b	a38 <coda_ascbin_cursor_goto_array_element+0x164>
     af4:	ldr	ip, [r9, #40]	; 0x28
     af8:	lsl	lr, r0, #4
     afc:	add	r7, r0, #1
     b00:	mov	r6, #0
     b04:	add	r0, sl, lr
     b08:	ldrd	r2, [ip, #24]
     b0c:	str	r7, [sl, #4]
     b10:	ldr	r8, [sl, lr]
     b14:	ldr	fp, [r0, #4]
     b18:	cmp	r2, #0
     b1c:	sbcs	r3, r3, #0
     b20:	str	r8, [r0, #16]
     b24:	str	fp, [r0, #20]
     b28:	bge	a28 <coda_ascbin_cursor_goto_array_element+0x154>
     b2c:	b	a38 <coda_ascbin_cursor_goto_array_element+0x164>
     b30:	mov	r2, r1
     b34:	mvn	r0, #105	; 0x69
     b38:	movw	r1, #0
     b3c:	movt	r1, #0
     b40:	mvn	r4, #0
     b44:	bl	0 <coda_set_error>
     b48:	b	9a8 <coda_ascbin_cursor_goto_array_element+0xd4>

00000b4c <coda_ascbin_cursor_goto_array_element_by_index>:
     b4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
     b50:	mov	r5, r1
     b54:	mrc	15, 0, r2, cr13, cr0, {3}
     b58:	strd	r6, [sp, #8]
     b5c:	mov	r4, r0
     b60:	ldr	r6, [r0, #4]
     b64:	strd	r8, [sp, #16]
     b68:	strd	sl, [sp, #24]
     b6c:	str	lr, [sp, #32]
     b70:	sub	sp, sp, #12
     b74:	sub	r1, r6, #1
     b78:	add	r3, r0, r1, lsl #4
     b7c:	ldr	r7, [r3, #8]
     b80:	ldr	r3, [r7]
     b84:	cmp	r3, #99	; 0x63
     b88:	ldr	r3, [pc, #376]	; d08 <coda_ascbin_cursor_goto_array_element_by_index+0x1bc>
     b8c:	ldrhi	r7, [r7, #4]
     b90:	ldr	r3, [pc, r3]
     b94:	ldr	r3, [r2, r3]
     b98:	cmp	r3, #0
     b9c:	bne	cb4 <coda_ascbin_cursor_goto_array_element_by_index+0x168>
     ba0:	ldr	r2, [r7, #40]	; 0x28
     ba4:	add	r1, r4, r1, lsl #4
     ba8:	add	r0, r6, #1
     bac:	lsl	r3, r6, #4
     bb0:	ldr	ip, [r1, #16]
     bb4:	add	lr, r4, r3
     bb8:	ldr	r1, [r1, #20]
     bbc:	ldrd	r8, [r2, #24]
     bc0:	str	r0, [r4, #4]
     bc4:	str	ip, [lr, #16]
     bc8:	str	r1, [lr, #20]
     bcc:	cmp	r8, #0
     bd0:	sbcs	r0, r9, #0
     bd4:	blt	c28 <coda_ascbin_cursor_goto_array_element_by_index+0xdc>
     bd8:	mul	r0, r5, r9
     bdc:	asr	fp, r5, #31
     be0:	umull	r6, r7, r5, r8
     be4:	mla	r8, r8, fp, r0
     be8:	adds	ip, r6, ip
     bec:	add	r7, r8, r7
     bf0:	str	ip, [lr, #16]
     bf4:	adc	r1, r7, r1
     bf8:	str	r1, [lr, #20]
     bfc:	add	r4, r4, r3
     c00:	mov	r0, #0
     c04:	str	r2, [r4, #8]
     c08:	str	r5, [r4, #12]
     c0c:	add	sp, sp, #12
     c10:	ldrd	r4, [sp]
     c14:	ldrd	r6, [sp, #8]
     c18:	ldrd	r8, [sp, #16]
     c1c:	ldrd	sl, [sp, #24]
     c20:	add	sp, sp, #32
     c24:	pop	{pc}		; (ldr pc, [sp], #4)
     c28:	cmp	r5, #0
     c2c:	movgt	r0, r6
     c30:	movgt	r6, #0
     c34:	bgt	c7c <coda_ascbin_cursor_goto_array_element_by_index+0x130>
     c38:	b	bfc <coda_ascbin_cursor_goto_array_element_by_index+0xb0>
     c3c:	ldr	r0, [r4, #4]
     c40:	ldr	lr, [sp]
     c44:	ldr	r9, [sp, #4]
     c48:	lsl	ip, r0, #4
     c4c:	sub	r0, r0, #1
     c50:	ldr	r2, [r7, #40]	; 0x28
     c54:	add	r1, r4, ip
     c58:	add	r8, r4, ip
     c5c:	ldr	r3, [r4, ip]
     c60:	ldr	r1, [r1, #4]
     c64:	adds	r3, r3, lr
     c68:	adc	r1, r1, r9
     c6c:	cmp	r5, r6
     c70:	str	r3, [r4, ip]
     c74:	str	r1, [r8, #4]
     c78:	beq	ce4 <coda_ascbin_cursor_goto_array_element_by_index+0x198>
     c7c:	add	r3, r4, r0, lsl #4
     c80:	mov	r1, sp
     c84:	mov	r0, r4
     c88:	str	r2, [r3, #8]
     c8c:	str	r6, [r3, #12]
     c90:	add	r6, r6, #1
     c94:	bl	0 <coda_cursor_get_bit_size>
     c98:	cmp	r0, #0
     c9c:	beq	c3c <coda_ascbin_cursor_goto_array_element_by_index+0xf0>
     ca0:	ldr	r3, [r4, #4]
     ca4:	mvn	r0, #0
     ca8:	add	r3, r3, r0
     cac:	str	r3, [r4, #4]
     cb0:	b	c0c <coda_ascbin_cursor_goto_array_element_by_index+0xc0>
     cb4:	mov	r1, sp
     cb8:	bl	0 <coda_cursor_get_num_elements>
     cbc:	cmp	r0, #0
     cc0:	bne	d00 <coda_ascbin_cursor_goto_array_element_by_index+0x1b4>
     cc4:	cmp	r5, #0
     cc8:	ldr	r3, [sp]
     ccc:	blt	cec <coda_ascbin_cursor_goto_array_element_by_index+0x1a0>
     cd0:	cmp	r5, r3
     cd4:	bge	cec <coda_ascbin_cursor_goto_array_element_by_index+0x1a0>
     cd8:	ldr	r6, [r4, #4]
     cdc:	sub	r1, r6, #1
     ce0:	b	ba0 <coda_ascbin_cursor_goto_array_element_by_index+0x54>
     ce4:	lsl	r3, r0, #4
     ce8:	b	bfc <coda_ascbin_cursor_goto_array_element_by_index+0xb0>
     cec:	movw	r1, #0
     cf0:	movt	r1, #0
     cf4:	mov	r2, r5
     cf8:	mvn	r0, #106	; 0x6a
     cfc:	bl	0 <coda_set_error>
     d00:	mvn	r0, #0
     d04:	b	c0c <coda_ascbin_cursor_goto_array_element_by_index+0xc0>
     d08:	.word	0x00000170

00000d0c <coda_ascbin_cursor_goto_next_array_element>:
     d0c:	ldr	r3, [r0, #4]
     d10:	mrc	15, 0, r1, cr13, cr0, {3}
     d14:	strd	r4, [sp, #-20]!	; 0xffffffec
     d18:	mov	r4, r0
     d1c:	strd	r6, [sp, #8]
     d20:	str	lr, [sp, #16]
     d24:	sub	sp, sp, #12
     d28:	mov	r7, sp
     d2c:	add	r2, r0, r3, lsl #4
     d30:	sub	r3, r3, #1
     d34:	add	r0, r0, r3, lsl #4
     d38:	ldr	r6, [r2, #-24]	; 0xffffffe8
     d3c:	ldr	r5, [r0, #12]
     d40:	ldr	r2, [r6]
     d44:	add	r5, r5, #1
     d48:	cmp	r2, #99	; 0x63
     d4c:	ldr	r2, [pc, #220]	; e30 <coda_ascbin_cursor_goto_next_array_element+0x124>
     d50:	ldrhi	r6, [r6, #4]
     d54:	ldr	r2, [pc, r2]
     d58:	ldr	r2, [r1, r2]
     d5c:	cmp	r2, #0
     d60:	beq	d9c <coda_ascbin_cursor_goto_next_array_element+0x90>
     d64:	mov	r0, r4
     d68:	mov	r1, r7
     d6c:	str	r3, [r4, #4]
     d70:	bl	0 <coda_cursor_get_num_elements>
     d74:	cmp	r0, #0
     d78:	bne	e04 <coda_ascbin_cursor_goto_next_array_element+0xf8>
     d7c:	ldr	r2, [r4, #4]
     d80:	cmp	r5, #0
     d84:	ldr	r3, [sp]
     d88:	add	r2, r2, #1
     d8c:	str	r2, [r4, #4]
     d90:	blt	e18 <coda_ascbin_cursor_goto_next_array_element+0x10c>
     d94:	cmp	r5, r3
     d98:	bge	e18 <coda_ascbin_cursor_goto_next_array_element+0x10c>
     d9c:	mov	r1, r7
     da0:	mov	r0, r4
     da4:	bl	0 <coda_cursor_get_bit_size>
     da8:	cmp	r0, #0
     dac:	bne	e10 <coda_ascbin_cursor_goto_next_array_element+0x104>
     db0:	ldr	r3, [r4, #4]
     db4:	ldr	r2, [r6, #40]	; 0x28
     db8:	ldr	ip, [sp]
     dbc:	sub	r1, r3, #1
     dc0:	lsl	r3, r3, #4
     dc4:	add	r1, r4, r1, lsl #4
     dc8:	ldr	r6, [sp, #4]
     dcc:	add	lr, r4, r3
     dd0:	str	r2, [r1, #8]
     dd4:	str	r5, [r1, #12]
     dd8:	ldr	r2, [r4, r3]
     ddc:	ldr	r1, [lr, #4]
     de0:	adds	r2, r2, ip
     de4:	adc	r1, r1, r6
     de8:	str	r2, [r4, r3]
     dec:	str	r1, [lr, #4]
     df0:	add	sp, sp, #12
     df4:	ldrd	r4, [sp]
     df8:	ldrd	r6, [sp, #8]
     dfc:	add	sp, sp, #16
     e00:	pop	{pc}		; (ldr pc, [sp], #4)
     e04:	ldr	r3, [r4, #4]
     e08:	add	r3, r3, #1
     e0c:	str	r3, [r4, #4]
     e10:	mvn	r0, #0
     e14:	b	df0 <coda_ascbin_cursor_goto_next_array_element+0xe4>
     e18:	mov	r2, r5
     e1c:	movw	r1, #0
     e20:	movt	r1, #0
     e24:	mvn	r0, #106	; 0x6a
     e28:	bl	0 <coda_set_error>
     e2c:	b	e10 <coda_ascbin_cursor_goto_next_array_element+0x104>
     e30:	.word	0x000000d4

00000e34 <coda_ascbin_cursor_goto_attributes>:
     e34:	strd	r4, [sp, #-24]!	; 0xffffffe8
     e38:	mov	r4, r0
     e3c:	ldr	r5, [r0, #4]
     e40:	add	r3, r0, r5, lsl #4
     e44:	ldr	r3, [r3, #-8]
     e48:	ldr	r0, [r3]
     e4c:	strd	r6, [sp, #8]
     e50:	mvn	r6, #0
     e54:	mvn	r7, #0
     e58:	str	r8, [sp, #16]
     e5c:	str	lr, [sp, #20]
     e60:	cmp	r0, #99	; 0x63
     e64:	ldrhi	r3, [r3, #4]
     e68:	ldrhi	r0, [r3]
     e6c:	add	r3, r5, #1
     e70:	add	r5, r4, r5, lsl #4
     e74:	str	r3, [r4, #4]
     e78:	bl	0 <coda_type_empty_record>
     e7c:	ldr	r3, [r4, #4]
     e80:	mvn	r1, #0
     e84:	ldr	r8, [sp, #16]
     e88:	str	r0, [r5, #8]
     e8c:	mov	r0, #0
     e90:	add	r2, r4, r3, lsl #4
     e94:	lsl	r3, r3, #4
     e98:	str	r1, [r2, #-4]
     e9c:	strd	r6, [r4, r3]
     ea0:	ldrd	r4, [sp]
     ea4:	ldrd	r6, [sp, #8]
     ea8:	add	sp, sp, #20
     eac:	pop	{pc}		; (ldr pc, [sp], #4)

00000eb0 <coda_ascbin_cursor_use_base_type_of_special_type>:
     eb0:	ldr	r3, [r0, #4]
     eb4:	sub	r3, r3, #1
     eb8:	lsl	r3, r3, #4
     ebc:	add	r2, r0, r3
     ec0:	add	r3, r0, r3
     ec4:	ldr	r2, [r2, #8]
     ec8:	mov	r0, #0
     ecc:	ldr	r1, [r2]
     ed0:	cmp	r1, #99	; 0x63
     ed4:	ldrhi	r2, [r2, #4]
     ed8:	ldr	r2, [r2, #44]	; 0x2c
     edc:	str	r2, [r3, #8]
     ee0:	bx	lr

00000ee4 <coda_ascbin_cursor_get_bit_size>:
     ee4:	ldr	r3, [r0, #4]
     ee8:	strd	r4, [sp, #-36]!	; 0xffffffdc
     eec:	strd	r6, [sp, #8]
     ef0:	strd	r8, [sp, #16]
     ef4:	strd	sl, [sp, #24]
     ef8:	add	r3, r0, r3, lsl #4
     efc:	str	lr, [sp, #32]
     f00:	sub	sp, sp, #556	; 0x22c
     f04:	ldr	r6, [r3, #-8]
     f08:	ldr	r3, [r6]
     f0c:	cmp	r3, #99	; 0x63
     f10:	ldrhi	r6, [r6, #4]
     f14:	ldrd	r2, [r6, #24]
     f18:	cmp	r2, #0
     f1c:	sbcs	ip, r3, #0
     f20:	movge	r8, #0
     f24:	strdge	r2, [r1]
     f28:	blt	f4c <coda_ascbin_cursor_get_bit_size+0x68>
     f2c:	mov	r0, r8
     f30:	add	sp, sp, #556	; 0x22c
     f34:	ldrd	r4, [sp]
     f38:	ldrd	r6, [sp, #8]
     f3c:	ldrd	r8, [sp, #16]
     f40:	ldrd	sl, [sp, #24]
     f44:	add	sp, sp, #32
     f48:	pop	{pc}		; (ldr pc, [sp], #4)
     f4c:	ldr	r7, [r6, #8]
     f50:	mov	r4, r0
     f54:	str	r1, [sp, #4]
     f58:	cmp	r7, #0
     f5c:	bne	fe8 <coda_ascbin_cursor_get_bit_size+0x104>
     f60:	ldr	r3, [pc, #1084]	; 13a4 <coda_ascbin_cursor_get_bit_size+0x4c0>
     f64:	mrc	15, 0, r2, cr13, cr0, {3}
     f68:	ldr	r3, [pc, r3]
     f6c:	ldr	r3, [r2, r3]
     f70:	cmp	r3, #0
     f74:	beq	1040 <coda_ascbin_cursor_get_bit_size+0x15c>
     f78:	ldr	r0, [r6, #32]
     f7c:	cmp	r0, #0
     f80:	beq	1040 <coda_ascbin_cursor_get_bit_size+0x15c>
     f84:	mov	r1, r4
     f88:	ldr	r2, [sp, #4]
     f8c:	bl	0 <coda_expression_eval_integer>
     f90:	subs	r8, r0, #0
     f94:	bne	136c <coda_ascbin_cursor_get_bit_size+0x488>
     f98:	ldrd	r6, [r6, #24]
     f9c:	mvn	r1, #0
     fa0:	mvn	r0, #7
     fa4:	ldr	r3, [sp, #4]
     fa8:	cmp	r7, r1
     fac:	cmpeq	r6, r0
     fb0:	ldrd	r2, [r3]
     fb4:	beq	1244 <coda_ascbin_cursor_get_bit_size+0x360>
     fb8:	cmp	r2, #0
     fbc:	sbcs	r1, r3, #0
     fc0:	bge	f2c <coda_ascbin_cursor_get_bit_size+0x48>
     fc4:	movw	r1, #0
     fc8:	movt	r1, #0
     fcc:	movw	r0, #65236	; 0xfed4
     fd0:	movt	r0, #65535	; 0xffff
     fd4:	bl	0 <coda_set_error>
     fd8:	mov	r0, r4
     fdc:	mvn	r8, #0
     fe0:	bl	0 <coda_cursor_add_to_error_message>
     fe4:	b	f2c <coda_ascbin_cursor_get_bit_size+0x48>
     fe8:	cmp	r7, #1
     fec:	bne	1388 <coda_ascbin_cursor_get_bit_size+0x4a4>
     ff0:	add	r1, sp, #16
     ff4:	bl	0 <coda_cursor_get_num_elements>
     ff8:	subs	r8, r0, #0
     ffc:	bne	1080 <coda_ascbin_cursor_get_bit_size+0x19c>
    1000:	ldr	r9, [sp, #16]
    1004:	cmp	r9, #0
    1008:	beq	1088 <coda_ascbin_cursor_get_bit_size+0x1a4>
    100c:	ldr	r7, [r6, #40]	; 0x28
    1010:	ldrd	sl, [r7, #24]
    1014:	cmp	sl, #0
    1018:	sbcs	r3, fp, #0
    101c:	blt	1298 <coda_ascbin_cursor_get_bit_size+0x3b4>
    1020:	mul	r3, r9, fp
    1024:	asr	r7, r9, #31
    1028:	umull	r0, r1, r9, sl
    102c:	mla	r2, sl, r7, r3
    1030:	ldr	r3, [sp, #4]
    1034:	add	r1, r2, r1
    1038:	strd	r0, [r3]
    103c:	b	f2c <coda_ascbin_cursor_get_bit_size+0x48>
    1040:	ldr	r3, [r6, #68]	; 0x44
    1044:	cmp	r3, #0
    1048:	beq	109c <coda_ascbin_cursor_get_bit_size+0x1b8>
    104c:	mov	r1, r4
    1050:	mov	r2, #520	; 0x208
    1054:	add	r0, sp, #32
    1058:	bl	0 <memcpy>
    105c:	add	r0, sp, #32
    1060:	bl	0 <coda_cursor_goto_available_union_field>
    1064:	cmp	r0, #0
    1068:	bne	1080 <coda_ascbin_cursor_get_bit_size+0x19c>
    106c:	add	r0, sp, #32
    1070:	ldr	r1, [sp, #4]
    1074:	bl	0 <coda_cursor_get_bit_size>
    1078:	subs	r8, r0, #0
    107c:	beq	f2c <coda_ascbin_cursor_get_bit_size+0x48>
    1080:	mvn	r8, #0
    1084:	b	f2c <coda_ascbin_cursor_get_bit_size+0x48>
    1088:	ldr	r1, [sp, #4]
    108c:	mov	r2, #0
    1090:	mov	r3, #0
    1094:	strd	r2, [r1]
    1098:	b	f2c <coda_ascbin_cursor_get_bit_size+0x48>
    109c:	ldr	r3, [r6, #48]	; 0x30
    10a0:	cmp	r3, #0
    10a4:	movle	r9, #0
    10a8:	movle	sl, r9
    10ac:	bgt	10c0 <coda_ascbin_cursor_get_bit_size+0x1dc>
    10b0:	ldr	r3, [sp, #4]
    10b4:	mov	r8, #0
    10b8:	stm	r3, {r9, sl}
    10bc:	b	f2c <coda_ascbin_cursor_get_bit_size+0x48>
    10c0:	add	fp, sp, #32
    10c4:	mov	r2, #520	; 0x208
    10c8:	mov	r1, r4
    10cc:	mov	r0, fp
    10d0:	bl	0 <memcpy>
    10d4:	mov	r0, fp
    10d8:	bl	0 <coda_cursor_goto_first_record_field>
    10dc:	cmp	r0, #0
    10e0:	bne	1080 <coda_ascbin_cursor_get_bit_size+0x19c>
    10e4:	ldr	r2, [r6, #48]	; 0x30
    10e8:	mov	r9, #0
    10ec:	mov	sl, r9
    10f0:	cmp	r2, #0
    10f4:	addgt	r5, sp, #24
    10f8:	strgt	r2, [sp]
    10fc:	bgt	11fc <coda_ascbin_cursor_get_bit_size+0x318>
    1100:	b	10b0 <coda_ascbin_cursor_get_bit_size+0x1cc>
    1104:	mov	r1, r5
    1108:	mov	r0, fp
    110c:	bl	0 <coda_cursor_get_bit_size>
    1110:	cmp	r0, #0
    1114:	bne	1080 <coda_ascbin_cursor_get_bit_size+0x19c>
    1118:	ldrd	r2, [r5]
    111c:	adds	r9, r9, r2
    1120:	ldr	r1, [r6, #48]	; 0x30
    1124:	adc	sl, sl, r3
    1128:	sub	r3, r1, #1
    112c:	str	r1, [sp]
    1130:	cmp	r3, r7
    1134:	addle	r7, r7, #1
    1138:	ble	11f0 <coda_ascbin_cursor_get_bit_size+0x30c>
    113c:	ldr	r3, [r6, #52]	; 0x34
    1140:	add	r7, r7, #1
    1144:	mov	r2, #1
    1148:	lsl	r8, r7, #2
    114c:	ldr	ip, [r3, r7, lsl #2]
    1150:	str	r2, [sp, #12]
    1154:	ldr	r0, [ip, #20]
    1158:	cmp	r0, #0
    115c:	beq	1264 <coda_ascbin_cursor_get_bit_size+0x380>
    1160:	add	r2, sp, #12
    1164:	mov	r1, r4
    1168:	bl	0 <coda_expression_eval_bool>
    116c:	cmp	r0, #0
    1170:	bne	1080 <coda_ascbin_cursor_get_bit_size+0x19c>
    1174:	ldr	r2, [sp, #12]
    1178:	ldr	r3, [sp, #36]	; 0x24
    117c:	cmp	r2, #0
    1180:	sub	r3, r3, #1
    1184:	bne	1284 <coda_ascbin_cursor_get_bit_size+0x3a0>
    1188:	ldr	r0, [r6]
    118c:	str	r3, [sp]
    1190:	bl	0 <coda_no_data_singleton>
    1194:	ldr	r3, [sp]
    1198:	add	r2, sp, #552	; 0x228
    119c:	ldr	r1, [sp, #36]	; 0x24
    11a0:	add	r3, r2, r3, lsl #4
    11a4:	ldr	r2, [r6, #48]	; 0x30
    11a8:	str	r0, [r3, #-512]	; 0xfffffe00
    11ac:	sub	r3, r1, #1
    11b0:	lsl	r1, r3, #4
    11b4:	str	r2, [sp]
    11b8:	ldr	r0, [r4, #4]
    11bc:	add	r2, sp, #552	; 0x228
    11c0:	add	r1, r2, r1
    11c4:	add	r3, r2, r3, lsl #4
    11c8:	ldmdb	r5, {ip, lr}
    11cc:	str	r7, [r1, #-508]	; 0xfffffe04
    11d0:	lsl	r0, r0, #4
    11d4:	add	r8, r4, r0
    11d8:	ldr	r1, [r4, r0]
    11dc:	ldr	r0, [r8, #4]
    11e0:	adds	r1, r1, ip
    11e4:	adc	lr, r0, lr
    11e8:	str	r1, [r3, #-504]	; 0xfffffe08
    11ec:	str	lr, [r3, #-500]	; 0xfffffe0c
    11f0:	ldr	r3, [sp]
    11f4:	cmp	r3, r7
    11f8:	ble	10b0 <coda_ascbin_cursor_get_bit_size+0x1cc>
    11fc:	ldr	r3, [sp]
    1200:	mvn	r0, #0
    1204:	mvn	r1, #0
    1208:	strd	r0, [r5]
    120c:	sub	r2, r3, #1
    1210:	cmp	r2, r7
    1214:	ble	1104 <coda_ascbin_cursor_get_bit_size+0x220>
    1218:	mov	r2, r5
    121c:	add	r1, sp, #16
    1220:	mov	r0, fp
    1224:	bl	31c <get_next_relative_field_bit_offset>
    1228:	cmp	r0, #0
    122c:	bne	1080 <coda_ascbin_cursor_get_bit_size+0x19c>
    1230:	ldrd	r2, [r5]
    1234:	cmp	r2, #0
    1238:	sbcs	r1, r3, #0
    123c:	bge	111c <coda_ascbin_cursor_get_bit_size+0x238>
    1240:	b	1104 <coda_ascbin_cursor_get_bit_size+0x220>
    1244:	lsl	r1, r3, #3
    1248:	lsl	r0, r2, #3
    124c:	orr	r1, r1, r2, lsr #29
    1250:	mov	r2, r0
    1254:	mov	r3, r1
    1258:	ldr	r1, [sp, #4]
    125c:	strd	r2, [r1]
    1260:	b	fb8 <coda_ascbin_cursor_get_bit_size+0xd4>
    1264:	ldr	r3, [sp, #36]	; 0x24
    1268:	sub	r3, r3, #1
    126c:	ldr	ip, [ip, #8]
    1270:	lsl	r1, r3, #4
    1274:	add	r2, sp, #552	; 0x228
    1278:	add	r0, r2, r1
    127c:	str	ip, [r0, #-512]	; 0xfffffe00
    1280:	b	11b8 <coda_ascbin_cursor_get_bit_size+0x2d4>
    1284:	ldr	r2, [r6, #48]	; 0x30
    1288:	ldr	r1, [r6, #52]	; 0x34
    128c:	str	r2, [sp]
    1290:	ldr	ip, [r1, r8]
    1294:	b	126c <coda_ascbin_cursor_get_bit_size+0x388>
    1298:	add	fp, sp, #32
    129c:	mov	r1, r4
    12a0:	mov	r2, #520	; 0x208
    12a4:	mov	r0, fp
    12a8:	bl	0 <memcpy>
    12ac:	ldr	r2, [sp, #36]	; 0x24
    12b0:	add	r3, sp, #40	; 0x28
    12b4:	cmp	r9, #0
    12b8:	add	r1, r3, r2, lsl #4
    12bc:	add	r2, r2, #1
    12c0:	add	r3, r3, r2, lsl #4
    12c4:	ldrd	r0, [r1, #-8]
    12c8:	str	r2, [sp, #36]	; 0x24
    12cc:	strd	r0, [r3, #-8]
    12d0:	ble	1358 <coda_ascbin_cursor_get_bit_size+0x474>
    12d4:	mov	r4, #0
    12d8:	mov	r9, r8
    12dc:	mov	sl, r4
    12e0:	add	r5, sp, #24
    12e4:	b	132c <coda_ascbin_cursor_get_bit_size+0x448>
    12e8:	add	r3, sp, #40	; 0x28
    12ec:	ldm	r5, {r7, ip}
    12f0:	add	r9, r9, #1
    12f4:	ldr	r2, [sp, #36]	; 0x24
    12f8:	ldr	lr, [sp, #16]
    12fc:	adds	r4, r4, r7
    1300:	adc	sl, sl, ip
    1304:	add	r1, r3, r2, lsl #4
    1308:	ldr	r3, [r1, #-8]
    130c:	ldr	r0, [r1, #-4]
    1310:	adds	r3, r3, r7
    1314:	adc	r0, r0, ip
    1318:	cmp	lr, r9
    131c:	str	r3, [r1, #-8]
    1320:	str	r0, [r1, #-4]
    1324:	ble	1360 <coda_ascbin_cursor_get_bit_size+0x47c>
    1328:	ldr	r7, [r6, #40]	; 0x28
    132c:	sub	r3, r2, #1
    1330:	add	r2, sp, #552	; 0x228
    1334:	add	r3, r2, r3, lsl #4
    1338:	mov	r1, r5
    133c:	mov	r0, fp
    1340:	str	r7, [r3, #-512]	; 0xfffffe00
    1344:	str	r9, [r3, #-508]	; 0xfffffe04
    1348:	bl	0 <coda_cursor_get_bit_size>
    134c:	cmp	r0, #0
    1350:	beq	12e8 <coda_ascbin_cursor_get_bit_size+0x404>
    1354:	b	1080 <coda_ascbin_cursor_get_bit_size+0x19c>
    1358:	mov	r4, #0
    135c:	mov	sl, r4
    1360:	ldr	r3, [sp, #4]
    1364:	stm	r3, {r4, sl}
    1368:	b	f2c <coda_ascbin_cursor_get_bit_size+0x48>
    136c:	movw	r0, #0
    1370:	movt	r0, #0
    1374:	bl	0 <coda_add_error_message>
    1378:	mov	r0, r4
    137c:	mvn	r8, #0
    1380:	bl	0 <coda_cursor_add_to_error_message>
    1384:	b	f2c <coda_ascbin_cursor_get_bit_size+0x48>
    1388:	movw	r1, #0
    138c:	movt	r1, #0
    1390:	ldr	r3, [pc, #16]	; 13a8 <coda_ascbin_cursor_get_bit_size+0x4c4>
    1394:	movw	r0, #0
    1398:	movt	r0, #0
    139c:	mov	r2, #768	; 0x300
    13a0:	bl	0 <__assert_fail>
    13a4:	.word	0x00000434
    13a8:	.word	0x0000006c

000013ac <coda_ascbin_cursor_get_num_elements>:
    13ac:	ldr	r3, [r0, #4]
    13b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    13b4:	strd	r6, [sp, #8]
    13b8:	strd	r8, [sp, #16]
    13bc:	str	sl, [sp, #24]
    13c0:	add	r3, r0, r3, lsl #4
    13c4:	str	lr, [sp, #28]
    13c8:	sub	sp, sp, #32
    13cc:	ldr	r8, [r3, #-8]
    13d0:	ldr	r3, [r8]
    13d4:	cmp	r3, #99	; 0x63
    13d8:	ldrhi	r8, [r8, #4]
    13dc:	ldr	r4, [r8, #8]
    13e0:	cmp	r4, #0
    13e4:	beq	142c <coda_ascbin_cursor_get_num_elements+0x80>
    13e8:	cmp	r4, #1
    13ec:	mov	r9, r1
    13f0:	mov	sl, r0
    13f4:	bne	1500 <coda_ascbin_cursor_get_num_elements+0x154>
    13f8:	ldr	r3, [r8, #44]	; 0x2c
    13fc:	cmn	r3, #1
    1400:	movne	r4, #0
    1404:	strne	r3, [r1]
    1408:	beq	1438 <coda_ascbin_cursor_get_num_elements+0x8c>
    140c:	mov	r0, r4
    1410:	add	sp, sp, #32
    1414:	ldrd	r4, [sp]
    1418:	ldrd	r6, [sp, #8]
    141c:	ldrd	r8, [sp, #16]
    1420:	ldr	sl, [sp, #24]
    1424:	add	sp, sp, #28
    1428:	pop	{pc}		; (ldr pc, [sp], #4)
    142c:	ldr	r3, [r8, #48]	; 0x30
    1430:	str	r3, [r1]
    1434:	b	140c <coda_ascbin_cursor_get_num_elements+0x60>
    1438:	ldr	r3, [r8, #48]	; 0x30
    143c:	mov	r5, r4
    1440:	cmp	r3, #0
    1444:	addgt	r7, r8, #52	; 0x34
    1448:	movgt	r6, #0
    144c:	bgt	1460 <coda_ascbin_cursor_get_num_elements+0xb4>
    1450:	b	14ac <coda_ascbin_cursor_get_num_elements+0x100>
    1454:	add	r6, r6, #1
    1458:	cmp	r3, r6
    145c:	ble	14ac <coda_ascbin_cursor_get_num_elements+0x100>
    1460:	ldr	r4, [r7], #4
    1464:	cmn	r4, #1
    1468:	mulne	r5, r4, r5
    146c:	bne	1454 <coda_ascbin_cursor_get_num_elements+0xa8>
    1470:	mov	r2, sp
    1474:	mov	r1, sl
    1478:	ldr	r0, [r7, #28]
    147c:	bl	0 <coda_expression_eval_integer>
    1480:	cmp	r0, #0
    1484:	bne	14b8 <coda_ascbin_cursor_get_num_elements+0x10c>
    1488:	ldrd	r0, [sp]
    148c:	cmp	r0, #0
    1490:	sbcs	r3, r1, #0
    1494:	blt	14d4 <coda_ascbin_cursor_get_num_elements+0x128>
    1498:	ldr	r3, [r8, #48]	; 0x30
    149c:	add	r6, r6, #1
    14a0:	mul	r5, r0, r5
    14a4:	cmp	r3, r6
    14a8:	bgt	1460 <coda_ascbin_cursor_get_num_elements+0xb4>
    14ac:	mov	r4, #0
    14b0:	str	r5, [r9]
    14b4:	b	140c <coda_ascbin_cursor_get_num_elements+0x60>
    14b8:	mov	r1, r6
    14bc:	movw	r0, #0
    14c0:	movt	r0, #0
    14c4:	bl	0 <coda_add_error_message>
    14c8:	mov	r0, sl
    14cc:	bl	0 <coda_cursor_add_to_error_message>
    14d0:	b	140c <coda_ascbin_cursor_get_num_elements+0x60>
    14d4:	add	r2, sp, #8
    14d8:	bl	0 <coda_str64>
    14dc:	add	r2, sp, #8
    14e0:	movw	r1, #0
    14e4:	movt	r1, #0
    14e8:	movw	r0, #65236	; 0xfed4
    14ec:	movt	r0, #65535	; 0xffff
    14f0:	bl	0 <coda_set_error>
    14f4:	mov	r0, sl
    14f8:	bl	0 <coda_cursor_add_to_error_message>
    14fc:	b	140c <coda_ascbin_cursor_get_num_elements+0x60>
    1500:	movw	r1, #0
    1504:	movt	r1, #0
    1508:	ldr	r3, [pc, #12]	; 151c <coda_ascbin_cursor_get_num_elements+0x170>
    150c:	movw	r0, #0
    1510:	movt	r0, #0
    1514:	movw	r2, #835	; 0x343
    1518:	bl	0 <__assert_fail>
    151c:	.word	0x0000008c

00001520 <coda_ascbin_cursor_get_record_field_available_status>:
    1520:	ldr	r3, [r0, #4]
    1524:	strd	r4, [sp, #-12]!
    1528:	mov	r4, r1
    152c:	mov	r5, r2
    1530:	add	r3, r0, r3, lsl #4
    1534:	ldr	r1, [r3, #-8]
    1538:	ldr	r3, [r1]
    153c:	str	lr, [sp, #8]
    1540:	sub	sp, sp, #12
    1544:	cmp	r3, #99	; 0x63
    1548:	ldrhi	r1, [r1, #4]
    154c:	cmp	r4, #0
    1550:	ldr	r3, [r1, #48]	; 0x30
    1554:	blt	15fc <coda_ascbin_cursor_get_record_field_available_status+0xdc>
    1558:	cmp	r4, r3
    155c:	bge	15fc <coda_ascbin_cursor_get_record_field_available_status+0xdc>
    1560:	ldr	r3, [r1, #68]	; 0x44
    1564:	cmp	r3, #0
    1568:	beq	15a4 <coda_ascbin_cursor_get_record_field_available_status+0x84>
    156c:	add	r1, sp, #4
    1570:	bl	0 <coda_cursor_get_available_union_field_index>
    1574:	cmp	r0, #0
    1578:	mvnne	r0, #0
    157c:	bne	1594 <coda_ascbin_cursor_get_record_field_available_status+0x74>
    1580:	ldr	r3, [sp, #4]
    1584:	sub	r4, r3, r4
    1588:	clz	r4, r4
    158c:	lsr	r4, r4, #5
    1590:	str	r4, [r5]
    1594:	add	sp, sp, #12
    1598:	ldrd	r4, [sp]
    159c:	add	sp, sp, #8
    15a0:	pop	{pc}		; (ldr pc, [sp], #4)
    15a4:	ldr	r3, [r1, #52]	; 0x34
    15a8:	ldr	r3, [r3, r4, lsl #2]
    15ac:	ldr	r3, [r3, #20]
    15b0:	cmp	r3, #0
    15b4:	beq	15e0 <coda_ascbin_cursor_get_record_field_available_status+0xc0>
    15b8:	mov	r1, r0
    15bc:	mov	r0, r3
    15c0:	bl	0 <coda_expression_eval_bool>
    15c4:	adds	r0, r0, #0
    15c8:	movne	r0, #1
    15cc:	rsb	r0, r0, #0
    15d0:	add	sp, sp, #12
    15d4:	ldrd	r4, [sp]
    15d8:	add	sp, sp, #8
    15dc:	pop	{pc}		; (ldr pc, [sp], #4)
    15e0:	mov	r0, r3
    15e4:	mov	r3, #1
    15e8:	str	r3, [r2]
    15ec:	add	sp, sp, #12
    15f0:	ldrd	r4, [sp]
    15f4:	add	sp, sp, #8
    15f8:	pop	{pc}		; (ldr pc, [sp], #4)
    15fc:	mvn	r0, #100	; 0x64
    1600:	mov	r2, r4
    1604:	movw	r1, #0
    1608:	movt	r1, #0
    160c:	bl	0 <coda_set_error>
    1610:	mvn	r0, #0
    1614:	b	1594 <coda_ascbin_cursor_get_record_field_available_status+0x74>

00001618 <coda_ascbin_cursor_get_available_union_field_index>:
    1618:	strd	r4, [sp, #-32]!	; 0xffffffe0
    161c:	ldr	r5, [r0, #4]
    1620:	strd	r6, [sp, #8]
    1624:	strd	r8, [sp, #16]
    1628:	mov	r8, r0
    162c:	mov	r9, r1
    1630:	str	sl, [sp, #24]
    1634:	str	lr, [sp, #28]
    1638:	sub	sp, sp, #584	; 0x248
    163c:	sub	r6, r5, #1
    1640:	add	r3, r0, r6, lsl #4
    1644:	ldr	r4, [r3, #8]
    1648:	ldr	r3, [r4]
    164c:	cmp	r3, #99	; 0x63
    1650:	ldrhi	r4, [r4, #4]
    1654:	ldr	r7, [r4, #68]	; 0x44
    1658:	cmp	r7, #0
    165c:	beq	17a8 <coda_ascbin_cursor_get_available_union_field_index+0x190>
    1660:	ldr	r3, [r4, #48]	; 0x30
    1664:	cmp	r3, #0
    1668:	ble	17c0 <coda_ascbin_cursor_get_available_union_field_index+0x1a8>
    166c:	mov	r2, #520	; 0x208
    1670:	mov	r1, r8
    1674:	add	r0, sp, #64	; 0x40
    1678:	mvn	sl, #0
    167c:	bl	0 <memcpy>
    1680:	ldr	r2, [r4, #52]	; 0x34
    1684:	add	r3, sp, #584	; 0x248
    1688:	mov	r0, r7
    168c:	add	ip, r3, r5, lsl #4
    1690:	add	r3, sp, #72	; 0x48
    1694:	add	r5, r5, #1
    1698:	add	r6, r3, r6, lsl #4
    169c:	add	r1, sp, #64	; 0x40
    16a0:	add	r3, r3, r5, lsl #4
    16a4:	ldrd	r6, [r6, #8]
    16a8:	ldr	lr, [r2]
    16ac:	add	r2, sp, #8
    16b0:	str	r5, [sp, #68]	; 0x44
    16b4:	ldr	lr, [lr, #8]
    16b8:	strd	r6, [r3, #-8]
    16bc:	str	lr, [ip, #-512]	; 0xfffffe00
    16c0:	str	sl, [ip, #-508]	; 0xfffffe04
    16c4:	bl	0 <coda_expression_eval_integer>
    16c8:	cmp	r0, #0
    16cc:	bne	178c <coda_ascbin_cursor_get_available_union_field_index+0x174>
    16d0:	ldrd	r2, [sp, #8]
    16d4:	cmp	r2, #0
    16d8:	sbcs	r1, r3, #0
    16dc:	blt	1714 <coda_ascbin_cursor_get_available_union_field_index+0xfc>
    16e0:	ldr	r6, [r4, #48]	; 0x30
    16e4:	asr	r7, r6, #31
    16e8:	cmp	r2, r6
    16ec:	sbcs	r1, r3, r7
    16f0:	strlt	r2, [r9]
    16f4:	bge	1714 <coda_ascbin_cursor_get_available_union_field_index+0xfc>
    16f8:	add	sp, sp, #584	; 0x248
    16fc:	ldrd	r4, [sp]
    1700:	ldrd	r6, [sp, #8]
    1704:	ldrd	r8, [sp, #16]
    1708:	ldr	sl, [sp, #24]
    170c:	add	sp, sp, #28
    1710:	pop	{pc}		; (ldr pc, [sp], #4)
    1714:	mov	r0, r2
    1718:	mov	r1, r3
    171c:	add	r2, sp, #16
    1720:	add	r5, sp, #40	; 0x28
    1724:	bl	0 <coda_str64>
    1728:	ldr	r3, [r8, #4]
    172c:	mov	r2, r5
    1730:	add	r1, r8, r3, lsl #4
    1734:	ldr	r0, [r8, r3, lsl #4]
    1738:	ldr	r1, [r1, #4]
    173c:	lsr	r0, r0, #3
    1740:	orr	r0, r0, r1, lsl #29
    1744:	asr	r1, r1, #3
    1748:	bl	0 <coda_str64>
    174c:	ldr	ip, [r8, #4]
    1750:	add	r2, sp, #16
    1754:	movw	r1, #0
    1758:	movt	r1, #0
    175c:	movw	r0, #65236	; 0xfed4
    1760:	movt	r0, #65535	; 0xffff
    1764:	ldr	r3, [r4, #48]	; 0x30
    1768:	str	r5, [sp]
    176c:	ldr	ip, [r8, ip, lsl #4]
    1770:	and	ip, ip, #7
    1774:	str	ip, [sp, #4]
    1778:	bl	0 <coda_set_error>
    177c:	mov	r0, r8
    1780:	bl	0 <coda_cursor_add_to_error_message>
    1784:	mvn	r0, #0
    1788:	b	16f8 <coda_ascbin_cursor_get_available_union_field_index+0xe0>
    178c:	movw	r0, #0
    1790:	movt	r0, #0
    1794:	bl	0 <coda_add_error_message>
    1798:	mov	r0, r8
    179c:	bl	0 <coda_cursor_add_to_error_message>
    17a0:	mov	r0, sl
    17a4:	b	16f8 <coda_ascbin_cursor_get_available_union_field_index+0xe0>
    17a8:	mvn	r0, #104	; 0x68
    17ac:	movw	r1, #0
    17b0:	movt	r1, #0
    17b4:	bl	0 <coda_set_error>
    17b8:	mvn	r0, #0
    17bc:	b	16f8 <coda_ascbin_cursor_get_available_union_field_index+0xe0>
    17c0:	movw	r1, #0
    17c4:	movt	r1, #0
    17c8:	ldr	r3, [pc, #12]	; 17dc <coda_ascbin_cursor_get_available_union_field_index+0x1c4>
    17cc:	movw	r0, #0
    17d0:	movt	r0, #0
    17d4:	movw	r2, #889	; 0x379
    17d8:	bl	0 <__assert_fail>
    17dc:	.word	0x000000b0

000017e0 <coda_ascbin_cursor_goto_available_union_field>:
    17e0:	ldr	r3, [r0, #4]
    17e4:	strd	r4, [sp, #-12]!
    17e8:	mov	r4, r0
    17ec:	add	r3, r0, r3, lsl #4
    17f0:	ldr	r5, [r3, #-8]
    17f4:	ldr	r3, [r5]
    17f8:	str	lr, [sp, #8]
    17fc:	sub	sp, sp, #12
    1800:	cmp	r3, #99	; 0x63
    1804:	ldrhi	r5, [r5, #4]
    1808:	ldr	r3, [r5, #68]	; 0x44
    180c:	cmp	r3, #0
    1810:	beq	1870 <coda_ascbin_cursor_goto_available_union_field+0x90>
    1814:	add	r1, sp, #4
    1818:	bl	1618 <coda_ascbin_cursor_get_available_union_field_index>
    181c:	cmp	r0, #0
    1820:	bne	1868 <coda_ascbin_cursor_goto_available_union_field+0x88>
    1824:	ldr	r1, [sp, #4]
    1828:	ldr	r2, [r5, #52]	; 0x34
    182c:	ldr	r3, [r4, #4]
    1830:	ldr	ip, [r2, r1, lsl #2]
    1834:	lsl	r2, r3, #4
    1838:	add	r3, r3, #1
    183c:	ldr	ip, [ip, #8]
    1840:	str	r3, [r4, #4]
    1844:	add	r3, r4, r2
    1848:	str	ip, [r3, #8]
    184c:	str	r1, [r3, #12]
    1850:	ldrd	r4, [r4, r2]
    1854:	strd	r4, [r3, #16]
    1858:	add	sp, sp, #12
    185c:	ldrd	r4, [sp]
    1860:	add	sp, sp, #8
    1864:	pop	{pc}		; (ldr pc, [sp], #4)
    1868:	mvn	r0, #0
    186c:	b	1858 <coda_ascbin_cursor_goto_available_union_field+0x78>
    1870:	mvn	r0, #104	; 0x68
    1874:	movw	r1, #0
    1878:	movt	r1, #0
    187c:	bl	0 <coda_set_error>
    1880:	mvn	r0, #0
    1884:	b	1858 <coda_ascbin_cursor_goto_available_union_field+0x78>

00001888 <coda_ascbin_cursor_get_array_dim>:
    1888:	ldr	r3, [r0, #4]
    188c:	strd	r4, [sp, #-28]!	; 0xffffffe4
    1890:	strd	r6, [sp, #8]
    1894:	strd	r8, [sp, #16]
    1898:	str	lr, [sp, #24]
    189c:	sub	sp, sp, #36	; 0x24
    18a0:	add	r3, r0, r3, lsl #4
    18a4:	ldr	r9, [r3, #-8]
    18a8:	ldr	r3, [r9]
    18ac:	cmp	r3, #99	; 0x63
    18b0:	ldrhi	r9, [r9, #4]
    18b4:	ldr	r3, [r9, #48]	; 0x30
    18b8:	str	r3, [r1]
    18bc:	ldr	r3, [r9, #48]	; 0x30
    18c0:	cmp	r3, #0
    18c4:	ble	1934 <coda_ascbin_cursor_get_array_dim+0xac>
    18c8:	mov	r7, r2
    18cc:	mov	r8, r0
    18d0:	add	r6, r9, #52	; 0x34
    18d4:	mov	r4, #0
    18d8:	b	18e8 <coda_ascbin_cursor_get_array_dim+0x60>
    18dc:	add	r4, r4, #1
    18e0:	cmp	r3, r4
    18e4:	ble	1934 <coda_ascbin_cursor_get_array_dim+0xac>
    18e8:	ldr	r5, [r6], #4
    18ec:	cmn	r5, #1
    18f0:	strne	r5, [r7, r4, lsl #2]
    18f4:	bne	18dc <coda_ascbin_cursor_get_array_dim+0x54>
    18f8:	mov	r2, sp
    18fc:	mov	r1, r8
    1900:	ldr	r0, [r6, #28]
    1904:	bl	0 <coda_expression_eval_integer>
    1908:	cmp	r0, #0
    190c:	bne	1954 <coda_ascbin_cursor_get_array_dim+0xcc>
    1910:	ldrd	r0, [sp]
    1914:	cmp	r0, #0
    1918:	sbcs	r3, r1, #0
    191c:	blt	1970 <coda_ascbin_cursor_get_array_dim+0xe8>
    1920:	ldr	r3, [r9, #48]	; 0x30
    1924:	str	r0, [r7, r4, lsl #2]
    1928:	add	r4, r4, #1
    192c:	cmp	r3, r4
    1930:	bgt	18e8 <coda_ascbin_cursor_get_array_dim+0x60>
    1934:	mov	r5, #0
    1938:	mov	r0, r5
    193c:	add	sp, sp, #36	; 0x24
    1940:	ldrd	r4, [sp]
    1944:	ldrd	r6, [sp, #8]
    1948:	ldrd	r8, [sp, #16]
    194c:	add	sp, sp, #24
    1950:	pop	{pc}		; (ldr pc, [sp], #4)
    1954:	mov	r1, r4
    1958:	movw	r0, #0
    195c:	movt	r0, #0
    1960:	bl	0 <coda_add_error_message>
    1964:	mov	r0, r8
    1968:	bl	0 <coda_cursor_add_to_error_message>
    196c:	b	1938 <coda_ascbin_cursor_get_array_dim+0xb0>
    1970:	add	r2, sp, #8
    1974:	bl	0 <coda_str64>
    1978:	add	r2, sp, #8
    197c:	movw	r1, #0
    1980:	movt	r1, #0
    1984:	movw	r0, #65236	; 0xfed4
    1988:	movt	r0, #65535	; 0xffff
    198c:	bl	0 <coda_set_error>
    1990:	mov	r0, r8
    1994:	bl	0 <coda_cursor_add_to_error_message>
    1998:	b	1938 <coda_ascbin_cursor_get_array_dim+0xb0>
