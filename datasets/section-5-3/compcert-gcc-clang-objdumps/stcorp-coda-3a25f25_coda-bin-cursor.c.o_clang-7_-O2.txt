
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_bin_cursor_get_bit_size>:
       0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
       4:	add	fp, sp, #24
       8:	sub	sp, sp, #520	; 0x208
       c:	mov	r4, r0
      10:	ldr	r0, [r0, #4]
      14:	mov	r5, r1
      18:	add	r0, r4, r0, lsl #4
      1c:	ldr	r0, [r0, #-8]
      20:	ldr	r1, [r0]
      24:	cmp	r1, #99	; 0x63
      28:	ldrhi	r0, [r0, #4]
      2c:	mov	r6, r0
      30:	ldr	r2, [r6, #24]!
      34:	ldr	r3, [r6, #4]
      38:	cmp	r3, #0
      3c:	blt	50 <coda_bin_cursor_get_bit_size+0x50>
      40:	strd	r2, [r5]
      44:	mov	r0, #0
      48:	sub	sp, fp, #24
      4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
      50:	ldr	r1, [r0, #8]
      54:	sub	r2, r1, #2
      58:	cmp	r2, #4
      5c:	bcs	9c <coda_bin_cursor_get_bit_size+0x9c>
      60:	ldr	r0, [r0, #32]
      64:	mvn	r8, #0
      68:	cmp	r0, #0
      6c:	beq	f0 <coda_bin_cursor_get_bit_size+0xf0>
      70:	mov	r1, r4
      74:	mov	r2, r5
      78:	bl	0 <coda_expression_eval_integer>
      7c:	cmp	r0, #0
      80:	beq	fc <coda_bin_cursor_get_bit_size+0xfc>
      84:	movw	r0, #0
      88:	movt	r0, #0
      8c:	bl	0 <coda_add_error_message>
      90:	mov	r0, r4
      94:	bl	0 <coda_cursor_add_to_error_message>
      98:	b	e4 <coda_bin_cursor_get_bit_size+0xe4>
      9c:	cmp	r1, #2
      a0:	bcs	b8 <coda_bin_cursor_get_bit_size+0xb8>
      a4:	mov	r0, r4
      a8:	mov	r1, r5
      ac:	sub	sp, fp, #24
      b0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
      b4:	b	0 <coda_ascbin_cursor_get_bit_size>
      b8:	cmp	r1, #6
      bc:	bne	44 <coda_bin_cursor_get_bit_size+0x44>
      c0:	mov	r6, sp
      c4:	mov	r1, r4
      c8:	mov	r2, #520	; 0x208
      cc:	mov	r0, r6
      d0:	bl	0 <memcpy>
      d4:	mov	r0, r6
      d8:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
      dc:	cmp	r0, #0
      e0:	beq	160 <coda_bin_cursor_get_bit_size+0x160>
      e4:	mvn	r0, #0
      e8:	sub	sp, fp, #24
      ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
      f0:	str	r8, [r5]
      f4:	str	r8, [r5, #4]
      f8:	b	44 <coda_bin_cursor_get_bit_size+0x44>
      fc:	ldrd	r2, [r6]
     100:	subs	r0, r8, #7
     104:	sbc	r1, r8, #0
     108:	eor	r1, r3, r1
     10c:	eor	r0, r2, r0
     110:	orrs	r0, r0, r1
     114:	ldrd	r0, [r5]
     118:	bne	13c <coda_bin_cursor_get_bit_size+0x13c>
     11c:	lsl	r1, r1, #3
     120:	lsl	r2, r0, #3
     124:	orr	r1, r1, r0, lsr #29
     128:	str	r2, [r5]
     12c:	str	r1, [r5, #4]
     130:	cmn	r1, #1
     134:	bgt	44 <coda_bin_cursor_get_bit_size+0x44>
     138:	b	148 <coda_bin_cursor_get_bit_size+0x148>
     13c:	mov	r2, r0
     140:	cmn	r1, #1
     144:	bgt	44 <coda_bin_cursor_get_bit_size+0x44>
     148:	movw	r0, #65236	; 0xfed4
     14c:	movw	r1, #0
     150:	movt	r0, #65535	; 0xffff
     154:	movt	r1, #0
     158:	bl	0 <coda_set_error>
     15c:	b	90 <coda_bin_cursor_get_bit_size+0x90>
     160:	mov	r0, sp
     164:	mov	r1, r5
     168:	bl	0 <coda_cursor_get_bit_size>
     16c:	mov	r1, r0
     170:	mvn	r0, #0
     174:	cmp	r1, #0
     178:	bne	e8 <coda_bin_cursor_get_bit_size+0xe8>
     17c:	b	44 <coda_bin_cursor_get_bit_size+0x44>

00000180 <coda_bin_cursor_get_string_length>:
     180:	push	{r4, sl, fp, lr}
     184:	add	fp, sp, #8
     188:	sub	sp, sp, #8
     18c:	mov	r4, r1
     190:	mov	r1, sp
     194:	bl	0 <coda_bin_cursor_get_bit_size>
     198:	mov	r1, r0
     19c:	mvn	r0, #0
     1a0:	cmp	r1, #0
     1a4:	beq	1b0 <coda_bin_cursor_get_string_length+0x30>
     1a8:	sub	sp, fp, #8
     1ac:	pop	{r4, sl, fp, pc}
     1b0:	ldm	sp, {r0, r1}
     1b4:	lsr	r0, r0, #3
     1b8:	cmp	r1, #0
     1bc:	orr	r0, r0, r1, lsl #29
     1c0:	mvnlt	r0, #0
     1c4:	str	r0, [r4]
     1c8:	mov	r0, #0
     1cc:	sub	sp, fp, #8
     1d0:	pop	{r4, sl, fp, pc}

000001d4 <coda_bin_cursor_get_num_elements>:
     1d4:	ldr	r2, [r0, #4]
     1d8:	add	r2, r0, r2, lsl #4
     1dc:	ldr	r2, [r2, #-8]
     1e0:	ldr	r3, [r2]
     1e4:	cmp	r3, #99	; 0x63
     1e8:	ldrhi	r2, [r2, #4]
     1ec:	ldr	r2, [r2, #8]
     1f0:	cmp	r2, #1
     1f4:	movhi	r0, #1
     1f8:	strhi	r0, [r1]
     1fc:	movhi	r0, #0
     200:	bxhi	lr
     204:	b	0 <coda_ascbin_cursor_get_num_elements>

00000208 <coda_bin_cursor_read_int8>:
     208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     20c:	add	fp, sp, #28
     210:	sub	sp, sp, #68	; 0x44
     214:	mov	r5, r0
     218:	ldr	r0, [r0, #4]
     21c:	mov	r9, r1
     220:	sub	r0, r0, #1
     224:	add	r0, r5, r0, lsl #4
     228:	ldr	r1, [r0, #8]
     22c:	ldr	r2, [r1]
     230:	cmp	r2, #99	; 0x63
     234:	ldrhi	r1, [r1, #4]
     238:	ldr	r2, [r1, #24]
     23c:	ldr	r1, [r1, #28]
     240:	str	r1, [fp, #-36]	; 0xffffffdc
     244:	str	r2, [fp, #-40]	; 0xffffffd8
     248:	cmn	r1, #1
     24c:	ldr	r8, [r0, #16]
     250:	ldr	sl, [r0, #20]
     254:	ble	2b8 <coda_bin_cursor_read_int8+0xb0>
     258:	tst	r8, #7
     25c:	eoreq	r0, r2, #8
     260:	orrseq	r0, r0, r1
     264:	beq	350 <coda_bin_cursor_read_int8+0x148>
     268:	lsr	r0, r2, #3
     26c:	lsr	r3, r1, #3
     270:	orr	r0, r0, r1, lsl #29
     274:	adds	r6, r0, #1
     278:	adc	r4, r3, #0
     27c:	ands	r7, r2, #7
     280:	moveq	r6, r0
     284:	moveq	r4, r3
     288:	subs	r0, r6, #2
     28c:	sbcs	r0, r4, #0
     290:	bcs	3c0 <coda_bin_cursor_read_int8+0x1b8>
     294:	mov	r0, #0
     298:	mov	r3, sl
     29c:	strb	r0, [r9]
     2a0:	ldr	r0, [r5]
     2a4:	str	r2, [sp]
     2a8:	mov	r2, r8
     2ac:	stmib	sp, {r1, r9}
     2b0:	bl	3e0 <read_bits>
     2b4:	b	374 <coda_bin_cursor_read_int8+0x16c>
     2b8:	sub	r1, fp, #40	; 0x28
     2bc:	mov	r0, r5
     2c0:	bl	0 <coda_bin_cursor_get_bit_size>
     2c4:	mvn	r6, #0
     2c8:	cmp	r0, #0
     2cc:	bne	3b4 <coda_bin_cursor_read_int8+0x1ac>
     2d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     2d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
     2d8:	subs	r0, r2, #9
     2dc:	sbcs	r0, r1, #0
     2e0:	bcc	258 <coda_bin_cursor_read_int8+0x50>
     2e4:	add	r8, sp, #35	; 0x23
     2e8:	mov	r0, r2
     2ec:	mov	r2, r8
     2f0:	bl	0 <coda_str64>
     2f4:	ldr	r0, [r5, #4]
     2f8:	add	r4, r5, #8
     2fc:	add	r7, sp, #14
     300:	mov	r2, r7
     304:	add	r0, r4, r0, lsl #4
     308:	ldrd	r0, [r0, #-8]
     30c:	lsr	r0, r0, #3
     310:	orr	r0, r0, r1, lsl #29
     314:	asr	r1, r1, #3
     318:	bl	0 <coda_str64>
     31c:	ldr	r0, [r5, #4]
     320:	movw	r1, #0
     324:	mov	r2, r8
     328:	mov	r3, r7
     32c:	movt	r1, #0
     330:	add	r0, r4, r0, lsl #4
     334:	ldr	r0, [r0, #-8]
     338:	and	r0, r0, #7
     33c:	str	r0, [sp]
     340:	movw	r0, #65236	; 0xfed4
     344:	movt	r0, #65535	; 0xffff
     348:	bl	0 <coda_set_error>
     34c:	b	3b4 <coda_bin_cursor_read_int8+0x1ac>
     350:	ldr	r0, [r5]
     354:	mov	r2, #1
     358:	mov	r1, #0
     35c:	asr	r3, sl, #3
     360:	str	r2, [sp]
     364:	stmib	sp, {r1, r9}
     368:	lsr	r1, r8, #3
     36c:	orr	r2, r1, sl, lsl #29
     370:	bl	7dc <read_bytes>
     374:	mvn	r6, #0
     378:	cmp	r0, #0
     37c:	bne	3b4 <coda_bin_cursor_read_int8+0x1ac>
     380:	ldr	r0, [fp, #-40]	; 0xffffffd8
     384:	ldr	r1, [fp, #-36]	; 0xffffffdc
     388:	mov	r6, #0
     38c:	rsbs	r2, r0, #7
     390:	rscs	r1, r1, #0
     394:	blt	3b4 <coda_bin_cursor_read_int8+0x1ac>
     398:	ldrb	r1, [r9]
     39c:	sub	r2, r0, #1
     3a0:	mov	r3, #1
     3a4:	tst	r1, r3, lsl r2
     3a8:	mvnne	r2, #0
     3ac:	orrne	r0, r1, r2, lsl r0
     3b0:	strbne	r0, [r9]
     3b4:	mov	r0, r6
     3b8:	sub	sp, fp, #28
     3bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3c0:	movw	r0, #0
     3c4:	movw	r1, #0
     3c8:	movw	r3, #0
     3cc:	mov	r2, #177	; 0xb1
     3d0:	movt	r0, #0
     3d4:	movt	r1, #0
     3d8:	movt	r3, #0
     3dc:	bl	0 <__assert_fail>

000003e0 <read_bits>:
     3e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3e4:	add	fp, sp, #28
     3e8:	sub	sp, sp, #52	; 0x34
     3ec:	ldr	r4, [fp, #8]
     3f0:	ldr	r9, [fp, #12]
     3f4:	and	r5, r2, #7
     3f8:	mov	r8, r0
     3fc:	ldr	sl, [fp, #16]
     400:	mov	r7, r2
     404:	mov	r6, r3
     408:	adds	r0, r5, r4
     40c:	rsb	r1, r0, #0
     410:	and	r2, r1, #7
     414:	adc	r1, r9, #0
     418:	rsbs	r0, r0, #8
     41c:	rscs	r0, r1, #0
     420:	blt	464 <read_bits+0x84>
     424:	mov	r1, #1
     428:	mov	r0, #0
     42c:	mov	r5, r2
     430:	asr	r3, r6, #3
     434:	str	r1, [sp]
     438:	stmib	sp, {r0, sl}
     43c:	lsr	r0, r7, #3
     440:	orr	r2, r0, r6, lsl #29
     444:	mov	r0, r8
     448:	bl	7dc <read_bytes>
     44c:	mov	r1, r0
     450:	mvn	r0, #0
     454:	cmp	r1, #0
     458:	beq	6f8 <read_bits+0x318>
     45c:	sub	sp, fp, #28
     460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     464:	cmp	r2, #0
     468:	beq	728 <read_bits+0x348>
     46c:	str	r2, [sp, #36]	; 0x24
     470:	mov	r0, r4
     474:	mov	r1, r9
     478:	mov	r2, #24
     47c:	mov	r3, #0
     480:	bl	0 <__aeabi_ldivmod>
     484:	orrs	r0, r2, r3
     488:	str	r8, [sp, #32]
     48c:	beq	648 <read_bits+0x268>
     490:	add	r1, r2, r5
     494:	mov	r0, r8
     498:	sub	r8, fp, #33	; 0x21
     49c:	mov	ip, r2
     4a0:	asr	r3, r6, #3
     4a4:	ands	r5, r1, #7
     4a8:	str	r1, [sp, #20]
     4ac:	movwne	r5, #1
     4b0:	add	r1, r5, r1, lsr #3
     4b4:	str	r1, [sp, #24]
     4b8:	str	r1, [sp]
     4bc:	mov	r1, #0
     4c0:	stmib	sp, {r1, r8}
     4c4:	lsr	r1, r7, #3
     4c8:	str	ip, [sp, #16]
     4cc:	orr	r2, r1, r6, lsl #29
     4d0:	ands	r1, ip, #7
     4d4:	movwne	r1, #1
     4d8:	str	r1, [sp, #28]
     4dc:	bl	7dc <read_bytes>
     4e0:	cmp	r0, #0
     4e4:	bne	764 <read_bits+0x384>
     4e8:	mov	r1, r5
     4ec:	ldr	r2, [sp, #24]
     4f0:	ldr	r5, [sp, #28]
     4f4:	ldr	lr, [sp, #16]
     4f8:	ldr	r3, [sp, #20]
     4fc:	mov	r0, #0
     500:	str	r0, [sp, #40]	; 0x28
     504:	add	ip, r5, lr, lsr #3
     508:	cmp	r2, #0
     50c:	beq	58c <read_bits+0x1ac>
     510:	lsr	r0, r3, #3
     514:	add	r1, r0, r1
     518:	mov	r0, #0
     51c:	cmp	r1, #16
     520:	bcc	558 <read_bits+0x178>
     524:	add	r0, sp, #40	; 0x28
     528:	mvn	r5, #15
     52c:	sub	r3, r0, #12
     530:	bic	r0, r1, #-1073741809	; 0xc000000f
     534:	mov	r2, r0
     538:	vld1.8	{d16-d17}, [r8]!
     53c:	subs	r2, r2, #16
     540:	vrev64.8	q8, q8
     544:	vext.8	q8, q8, q8, #8
     548:	vst1.8	{d16-d17}, [r3], r5
     54c:	bne	538 <read_bits+0x158>
     550:	cmp	r1, r0
     554:	beq	580 <read_bits+0x1a0>
     558:	sub	r2, fp, #33	; 0x21
     55c:	sub	r1, r1, r0
     560:	add	r3, r2, r0
     564:	rsb	r0, r0, #3
     568:	add	r2, sp, #40	; 0x28
     56c:	add	r0, r2, r0
     570:	ldrb	r2, [r3], #1
     574:	subs	r1, r1, #1
     578:	strb	r2, [r0], #-1
     57c:	bne	570 <read_bits+0x190>
     580:	ldr	r0, [sp, #40]	; 0x28
     584:	ldr	r5, [sp, #28]
     588:	ldr	r2, [sp, #24]
     58c:	mov	r1, #32
     590:	cmp	ip, #0
     594:	sub	r1, r1, r2, lsl #3
     598:	ldr	r2, [sp, #36]	; 0x24
     59c:	orr	r1, r1, r2
     5a0:	lsr	r0, r0, r1
     5a4:	mvn	r1, #0
     5a8:	bic	r0, r0, r1, lsl lr
     5ac:	str	r0, [sp, #40]	; 0x28
     5b0:	beq	634 <read_bits+0x254>
     5b4:	lsr	r0, lr, #3
     5b8:	mov	r2, #0
     5bc:	add	r1, r0, r5
     5c0:	cmp	r1, #16
     5c4:	bcc	614 <read_bits+0x234>
     5c8:	add	r0, sp, #40	; 0x28
     5cc:	bic	r2, r1, #-1073741809	; 0xc000000f
     5d0:	mov	r8, lr
     5d4:	mov	lr, r4
     5d8:	mvn	r5, #15
     5dc:	mov	r4, sl
     5e0:	add	r0, r0, r1
     5e4:	sub	r3, r0, #16
     5e8:	mov	r0, r2
     5ec:	vld1.8	{d16-d17}, [r3], r5
     5f0:	subs	r0, r0, #16
     5f4:	vrev64.8	q8, q8
     5f8:	vext.8	q8, q8, q8, #8
     5fc:	vst1.8	{d16-d17}, [r4]!
     600:	bne	5ec <read_bits+0x20c>
     604:	mov	r4, lr
     608:	cmp	r1, r2
     60c:	mov	lr, r8
     610:	beq	634 <read_bits+0x254>
     614:	add	r0, sl, r2
     618:	sub	r1, r1, r2
     61c:	add	r2, sp, #40	; 0x28
     620:	sub	r2, r2, #1
     624:	ldrb	r3, [r2, r1]
     628:	subs	r1, r1, #1
     62c:	strb	r3, [r0], #1
     630:	bne	624 <read_bits+0x244>
     634:	subs	r4, r4, lr
     638:	add	sl, sl, ip
     63c:	sbc	r9, r9, #0
     640:	adds	r7, lr, r7
     644:	adc	r6, r6, #0
     648:	subs	r0, r4, #1
     64c:	sbcs	r0, r9, #0
     650:	blt	71c <read_bits+0x33c>
     654:	mov	r5, #0
     658:	mov	r8, #4
     65c:	sub	r0, fp, #33	; 0x21
     660:	asr	r3, r6, #3
     664:	str	r8, [sp]
     668:	str	r5, [sp, #4]
     66c:	str	r0, [sp, #8]
     670:	lsr	r0, r7, #3
     674:	orr	r2, r0, r6, lsl #29
     678:	ldr	r0, [sp, #32]
     67c:	bl	7dc <read_bytes>
     680:	cmp	r0, #0
     684:	bne	764 <read_bits+0x384>
     688:	ldrb	r0, [fp, #-33]	; 0xffffffdf
     68c:	ldrb	r1, [fp, #-32]	; 0xffffffe0
     690:	ldrb	r2, [fp, #-31]	; 0xffffffe1
     694:	ldrb	r3, [fp, #-30]	; 0xffffffe2
     698:	strb	r0, [sp, #43]	; 0x2b
     69c:	strb	r1, [sp, #42]	; 0x2a
     6a0:	strb	r2, [sp, #41]	; 0x29
     6a4:	strb	r3, [sp, #40]	; 0x28
     6a8:	ldr	r1, [sp, #36]	; 0x24
     6ac:	ldr	r0, [sp, #40]	; 0x28
     6b0:	lsr	r0, r0, r1
     6b4:	lsr	r1, r0, #8
     6b8:	str	r0, [sp, #40]	; 0x28
     6bc:	strb	r1, [sl, #1]
     6c0:	lsr	r1, r0, #16
     6c4:	strb	r1, [sl]
     6c8:	strb	r0, [sl, #2]
     6cc:	subs	r0, r4, #24
     6d0:	add	sl, sl, #3
     6d4:	sbc	r1, r9, #0
     6d8:	adds	r7, r7, #24
     6dc:	adc	r6, r6, #0
     6e0:	rsbs	r2, r4, #24
     6e4:	mov	r4, r0
     6e8:	rscs	r2, r9, #0
     6ec:	mov	r9, r1
     6f0:	blt	65c <read_bits+0x27c>
     6f4:	b	71c <read_bits+0x33c>
     6f8:	cmp	r5, #0
     6fc:	ldrbne	r0, [sl]
     700:	lsrne	r0, r0, r5
     704:	strbne	r0, [sl]
     708:	tst	r4, #7
     70c:	ldrbne	r0, [sl]
     710:	mvnne	r1, #0
     714:	bicne	r0, r0, r1, lsl r4
     718:	strbne	r0, [sl]
     71c:	mov	r0, #0
     720:	sub	sp, fp, #28
     724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     728:	ands	r5, r4, #7
     72c:	beq	790 <read_bits+0x3b0>
     730:	sub	r0, fp, #29
     734:	mov	r2, #1
     738:	mov	r1, #0
     73c:	asr	r3, r6, #3
     740:	str	r0, [sp, #8]
     744:	lsr	r0, r7, #3
     748:	str	r2, [sp]
     74c:	str	r1, [sp, #4]
     750:	orr	r2, r0, r6, lsl #29
     754:	mov	r0, r8
     758:	bl	7dc <read_bytes>
     75c:	cmp	r0, #0
     760:	beq	770 <read_bits+0x390>
     764:	mvn	r0, #0
     768:	sub	sp, fp, #28
     76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     770:	ldrb	r0, [fp, #-29]	; 0xffffffe3
     774:	mvn	r1, #0
     778:	subs	r4, r4, r5
     77c:	sbc	r9, r9, #0
     780:	adds	r7, r5, r7
     784:	adc	r6, r6, #0
     788:	bic	r0, r0, r1, lsl r5
     78c:	strb	r0, [sl], #1
     790:	subs	r0, r4, #1
     794:	sbcs	r0, r9, #0
     798:	blt	71c <read_bits+0x33c>
     79c:	lsr	r1, r4, #3
     7a0:	lsr	r0, r9, #3
     7a4:	asr	r3, r6, #3
     7a8:	orr	r1, r1, r9, lsl #29
     7ac:	str	r1, [sp]
     7b0:	stmib	sp, {r0, sl}
     7b4:	lsr	r0, r7, #3
     7b8:	orr	r2, r0, r6, lsl #29
     7bc:	mov	r0, r8
     7c0:	bl	7dc <read_bytes>
     7c4:	mov	r1, r0
     7c8:	mvn	r0, #0
     7cc:	cmp	r1, #0
     7d0:	moveq	r0, #0
     7d4:	sub	sp, fp, #28
     7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007dc <read_bytes>:
     7dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7e0:	add	fp, sp, #28
     7e4:	sub	sp, sp, #68	; 0x44
     7e8:	ldr	r7, [r0, #48]	; 0x30
     7ec:	mov	sl, r2
     7f0:	ldr	r1, [fp, #12]
     7f4:	ldr	r2, [fp, #8]
     7f8:	ldr	ip, [fp, #16]
     7fc:	mov	r9, r3
     800:	cmp	r7, #0
     804:	beq	888 <read_bytes+0xac>
     808:	mov	r6, r0
     80c:	adds	lr, r2, sl
     810:	ldr	r4, [r6, #40]!	; 0x28
     814:	adc	r5, r1, r9
     818:	ldr	r3, [r6, #4]
     81c:	subs	r4, r4, lr
     820:	sbcs	r3, r3, r5
     824:	bcs	8c8 <read_bytes+0xec>
     828:	ldr	r0, [r0, #16]
     82c:	cmp	r0, #1
     830:	bls	8ac <read_bytes+0xd0>
     834:	add	r8, sp, #47	; 0x2f
     838:	mov	r0, r2
     83c:	mov	r2, r8
     840:	bl	0 <coda_str64>
     844:	add	r7, sp, #26
     848:	mov	r0, sl
     84c:	mov	r1, r9
     850:	mov	r2, r7
     854:	bl	0 <coda_str64>
     858:	ldrd	r0, [r6]
     85c:	add	r4, sp, #5
     860:	mov	r2, r4
     864:	bl	0 <coda_str64>
     868:	movw	r1, #0
     86c:	mvn	r0, #300	; 0x12c
     870:	mov	r2, r8
     874:	mov	r3, r7
     878:	str	r4, [sp]
     87c:	movt	r1, #0
     880:	bl	0 <coda_set_error>
     884:	b	8bc <read_bytes+0xe0>
     888:	ldr	r3, [r0, #16]
     88c:	cmp	r3, #2
     890:	bcs	924 <read_bytes+0x148>
     894:	ldrd	r4, [r0, #8]
     898:	adds	r3, r2, sl
     89c:	adc	r1, r1, r9
     8a0:	subs	r3, r4, r3
     8a4:	sbcs	r1, r5, r1
     8a8:	bcs	8e0 <read_bytes+0x104>
     8ac:	movw	r1, #0
     8b0:	mvn	r0, #300	; 0x12c
     8b4:	movt	r1, #0
     8b8:	bl	0 <coda_set_error>
     8bc:	mvn	r0, #0
     8c0:	sub	sp, fp, #28
     8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8c8:	add	r1, r7, sl
     8cc:	mov	r0, ip
     8d0:	bl	0 <memcpy>
     8d4:	mov	r0, #0
     8d8:	sub	sp, fp, #28
     8dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8e0:	ldr	r0, [r0, #56]	; 0x38
     8e4:	mov	r1, ip
     8e8:	mov	r3, sl
     8ec:	bl	0 <pread>
     8f0:	mov	r1, r0
     8f4:	mov	r0, #0
     8f8:	cmn	r1, #1
     8fc:	bgt	8c0 <read_bytes+0xe4>
     900:	bl	0 <__errno_location>
     904:	ldr	r0, [r0]
     908:	bl	0 <strerror>
     90c:	movw	r1, #0
     910:	mov	r2, r0
     914:	mvn	r0, #21
     918:	movt	r1, #0
     91c:	bl	0 <coda_set_error>
     920:	b	8bc <read_bytes+0xe0>
     924:	movw	r0, #0
     928:	movw	r1, #0
     92c:	movw	r3, #0
     930:	mov	r2, #83	; 0x53
     934:	movt	r0, #0
     938:	movt	r1, #0
     93c:	movt	r3, #0
     940:	bl	0 <__assert_fail>

00000944 <coda_bin_cursor_read_uint8>:
     944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     948:	add	fp, sp, #28
     94c:	sub	sp, sp, #68	; 0x44
     950:	mov	r4, r0
     954:	ldr	r0, [r0, #4]
     958:	mov	r9, r1
     95c:	sub	r0, r0, #1
     960:	add	r0, r4, r0, lsl #4
     964:	ldr	r1, [r0, #8]
     968:	ldr	r2, [r1]
     96c:	cmp	r2, #99	; 0x63
     970:	ldrhi	r1, [r1, #4]
     974:	ldr	r2, [r1, #24]
     978:	ldr	r1, [r1, #28]
     97c:	str	r1, [fp, #-36]	; 0xffffffdc
     980:	str	r2, [fp, #-40]	; 0xffffffd8
     984:	ldr	r8, [r0, #16]
     988:	ldr	sl, [r0, #20]
     98c:	and	r0, r2, r1
     990:	cmn	r0, #1
     994:	beq	9f8 <coda_bin_cursor_read_uint8+0xb4>
     998:	tst	r8, #7
     99c:	eoreq	r0, r2, #8
     9a0:	orrseq	r0, r0, r1
     9a4:	beq	a90 <coda_bin_cursor_read_uint8+0x14c>
     9a8:	lsr	r0, r2, #3
     9ac:	asr	r3, r1, #3
     9b0:	orr	r0, r0, r1, lsl #29
     9b4:	adds	r6, r0, #1
     9b8:	adc	r5, r3, #0
     9bc:	ands	r7, r2, #7
     9c0:	moveq	r6, r0
     9c4:	moveq	r5, r3
     9c8:	subs	r0, r6, #2
     9cc:	sbcs	r0, r5, #0
     9d0:	bge	acc <coda_bin_cursor_read_uint8+0x188>
     9d4:	mov	r0, #0
     9d8:	mov	r3, sl
     9dc:	strb	r0, [r9]
     9e0:	ldr	r0, [r4]
     9e4:	str	r2, [sp]
     9e8:	mov	r2, r8
     9ec:	stmib	sp, {r1, r9}
     9f0:	bl	3e0 <read_bits>
     9f4:	b	ab4 <coda_bin_cursor_read_uint8+0x170>
     9f8:	sub	r1, fp, #40	; 0x28
     9fc:	mov	r0, r4
     a00:	bl	0 <coda_bin_cursor_get_bit_size>
     a04:	mvn	r6, #0
     a08:	cmp	r0, #0
     a0c:	bne	ac0 <coda_bin_cursor_read_uint8+0x17c>
     a10:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a14:	ldr	r1, [fp, #-36]	; 0xffffffdc
     a18:	subs	r0, r2, #9
     a1c:	sbcs	r0, r1, #0
     a20:	bcc	998 <coda_bin_cursor_read_uint8+0x54>
     a24:	add	r8, sp, #35	; 0x23
     a28:	mov	r0, r2
     a2c:	mov	r2, r8
     a30:	bl	0 <coda_str64>
     a34:	ldr	r0, [r4, #4]
     a38:	add	r5, r4, #8
     a3c:	add	r7, sp, #14
     a40:	mov	r2, r7
     a44:	add	r0, r5, r0, lsl #4
     a48:	ldrd	r0, [r0, #-8]
     a4c:	lsr	r0, r0, #3
     a50:	orr	r0, r0, r1, lsl #29
     a54:	asr	r1, r1, #3
     a58:	bl	0 <coda_str64>
     a5c:	ldr	r0, [r4, #4]
     a60:	movw	r1, #0
     a64:	mov	r2, r8
     a68:	mov	r3, r7
     a6c:	movt	r1, #0
     a70:	add	r0, r5, r0, lsl #4
     a74:	ldr	r0, [r0, #-8]
     a78:	and	r0, r0, #7
     a7c:	str	r0, [sp]
     a80:	movw	r0, #65236	; 0xfed4
     a84:	movt	r0, #65535	; 0xffff
     a88:	bl	0 <coda_set_error>
     a8c:	b	ac0 <coda_bin_cursor_read_uint8+0x17c>
     a90:	ldr	r0, [r4]
     a94:	mov	r2, #1
     a98:	mov	r1, #0
     a9c:	asr	r3, sl, #3
     aa0:	str	r2, [sp]
     aa4:	stmib	sp, {r1, r9}
     aa8:	lsr	r1, r8, #3
     aac:	orr	r2, r1, sl, lsl #29
     ab0:	bl	7dc <read_bytes>
     ab4:	mvn	r6, #0
     ab8:	cmp	r0, #0
     abc:	moveq	r6, #0
     ac0:	mov	r0, r6
     ac4:	sub	sp, fp, #28
     ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     acc:	movw	r0, #0
     ad0:	movw	r1, #0
     ad4:	movw	r3, #0
     ad8:	mov	r2, #233	; 0xe9
     adc:	movt	r0, #0
     ae0:	movt	r1, #0
     ae4:	movt	r3, #0
     ae8:	bl	0 <__assert_fail>

00000aec <coda_bin_cursor_read_int16>:
     aec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     af0:	add	fp, sp, #24
     af4:	sub	sp, sp, #64	; 0x40
     af8:	mov	r5, r0
     afc:	ldr	r0, [r0, #4]
     b00:	mov	r4, r1
     b04:	sub	r0, r0, #1
     b08:	add	r0, r5, r0, lsl #4
     b0c:	ldr	r3, [r0, #8]
     b10:	ldr	r1, [r3]
     b14:	cmp	r1, #99	; 0x63
     b18:	ldrhi	r3, [r3, #4]
     b1c:	ldr	r2, [r3, #24]
     b20:	ldr	r1, [r3, #28]
     b24:	str	r1, [fp, #-28]	; 0xffffffe4
     b28:	str	r2, [fp, #-32]	; 0xffffffe0
     b2c:	ldrd	r8, [r0, #16]
     b30:	ldr	r7, [r3, #44]	; 0x2c
     b34:	and	r0, r2, r1
     b38:	cmn	r0, #1
     b3c:	beq	b98 <coda_bin_cursor_read_int16+0xac>
     b40:	tst	r8, #7
     b44:	eoreq	r0, r2, #16
     b48:	orrseq	r0, r0, r1
     b4c:	beq	c30 <coda_bin_cursor_read_int16+0x144>
     b50:	cmp	r7, #0
     b54:	mov	r3, r4
     b58:	bne	b74 <coda_bin_cursor_read_int16+0x88>
     b5c:	lsr	r0, r2, #3
     b60:	tst	r2, #7
     b64:	orr	r0, r0, r1, lsl #29
     b68:	addne	r0, r0, #1
     b6c:	rsb	r0, r0, #2
     b70:	add	r3, r4, r0
     b74:	mov	r0, #0
     b78:	strh	r0, [r4]
     b7c:	ldr	r0, [r5]
     b80:	str	r2, [sp]
     b84:	stmib	sp, {r1, r3}
     b88:	mov	r2, r8
     b8c:	mov	r3, r9
     b90:	bl	3e0 <read_bits>
     b94:	b	c54 <coda_bin_cursor_read_int16+0x168>
     b98:	sub	r1, fp, #32
     b9c:	mov	r0, r5
     ba0:	bl	0 <coda_bin_cursor_get_bit_size>
     ba4:	mvn	r6, #0
     ba8:	cmp	r0, #0
     bac:	bne	ca4 <coda_bin_cursor_read_int16+0x1b8>
     bb0:	ldr	r2, [fp, #-32]	; 0xffffffe0
     bb4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     bb8:	subs	r0, r2, #17
     bbc:	sbcs	r0, r1, #0
     bc0:	bcc	b40 <coda_bin_cursor_read_int16+0x54>
     bc4:	add	r8, sp, #35	; 0x23
     bc8:	mov	r0, r2
     bcc:	mov	r2, r8
     bd0:	bl	0 <coda_str64>
     bd4:	ldr	r0, [r5, #4]
     bd8:	add	r4, r5, #8
     bdc:	add	r7, sp, #14
     be0:	mov	r2, r7
     be4:	add	r0, r4, r0, lsl #4
     be8:	ldrd	r0, [r0, #-8]
     bec:	lsr	r0, r0, #3
     bf0:	orr	r0, r0, r1, lsl #29
     bf4:	asr	r1, r1, #3
     bf8:	bl	0 <coda_str64>
     bfc:	ldr	r0, [r5, #4]
     c00:	movw	r1, #0
     c04:	mov	r2, r8
     c08:	mov	r3, r7
     c0c:	movt	r1, #0
     c10:	add	r0, r4, r0, lsl #4
     c14:	ldr	r0, [r0, #-8]
     c18:	and	r0, r0, #7
     c1c:	str	r0, [sp]
     c20:	movw	r0, #65236	; 0xfed4
     c24:	movt	r0, #65535	; 0xffff
     c28:	bl	0 <coda_set_error>
     c2c:	b	ca4 <coda_bin_cursor_read_int16+0x1b8>
     c30:	ldr	r0, [r5]
     c34:	mov	r2, #2
     c38:	mov	r1, #0
     c3c:	asr	r3, r9, #3
     c40:	str	r2, [sp]
     c44:	stmib	sp, {r1, r4}
     c48:	lsr	r1, r8, #3
     c4c:	orr	r2, r1, r9, lsl #29
     c50:	bl	7dc <read_bytes>
     c54:	mvn	r6, #0
     c58:	cmp	r0, #0
     c5c:	bne	ca4 <coda_bin_cursor_read_int16+0x1b8>
     c60:	cmp	r7, #0
     c64:	mov	r6, #0
     c68:	ldrheq	r0, [r4]
     c6c:	rev16eq	r0, r0
     c70:	strheq	r0, [r4]
     c74:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c78:	ldr	r1, [fp, #-28]	; 0xffffffe4
     c7c:	rsbs	r2, r0, #15
     c80:	rscs	r1, r1, #0
     c84:	blt	ca4 <coda_bin_cursor_read_int16+0x1b8>
     c88:	ldrh	r1, [r4]
     c8c:	sub	r2, r0, #1
     c90:	mov	r3, #1
     c94:	tst	r1, r3, lsl r2
     c98:	mvnne	r2, #0
     c9c:	orrne	r0, r1, r2, lsl r0
     ca0:	strhne	r0, [r4]
     ca4:	mov	r0, r6
     ca8:	sub	sp, fp, #24
     cac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000cb0 <coda_bin_cursor_read_uint16>:
     cb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     cb4:	add	fp, sp, #24
     cb8:	sub	sp, sp, #64	; 0x40
     cbc:	mov	r5, r0
     cc0:	ldr	r0, [r0, #4]
     cc4:	mov	r4, r1
     cc8:	sub	r0, r0, #1
     ccc:	add	r0, r5, r0, lsl #4
     cd0:	ldr	r3, [r0, #8]
     cd4:	ldr	r1, [r3]
     cd8:	cmp	r1, #99	; 0x63
     cdc:	ldrhi	r3, [r3, #4]
     ce0:	ldr	r2, [r3, #24]
     ce4:	ldr	r1, [r3, #28]
     ce8:	str	r1, [fp, #-28]	; 0xffffffe4
     cec:	str	r2, [fp, #-32]	; 0xffffffe0
     cf0:	ldrd	r8, [r0, #16]
     cf4:	ldr	r7, [r3, #44]	; 0x2c
     cf8:	and	r0, r2, r1
     cfc:	cmn	r0, #1
     d00:	beq	d5c <coda_bin_cursor_read_uint16+0xac>
     d04:	tst	r8, #7
     d08:	eoreq	r0, r2, #16
     d0c:	orrseq	r0, r0, r1
     d10:	beq	df4 <coda_bin_cursor_read_uint16+0x144>
     d14:	cmp	r7, #0
     d18:	mov	r3, r4
     d1c:	bne	d38 <coda_bin_cursor_read_uint16+0x88>
     d20:	lsr	r0, r2, #3
     d24:	tst	r2, #7
     d28:	orr	r0, r0, r1, lsl #29
     d2c:	addne	r0, r0, #1
     d30:	rsb	r0, r0, #2
     d34:	add	r3, r4, r0
     d38:	mov	r0, #0
     d3c:	strh	r0, [r4]
     d40:	ldr	r0, [r5]
     d44:	str	r2, [sp]
     d48:	stmib	sp, {r1, r3}
     d4c:	mov	r2, r8
     d50:	mov	r3, r9
     d54:	bl	3e0 <read_bits>
     d58:	b	e18 <coda_bin_cursor_read_uint16+0x168>
     d5c:	sub	r1, fp, #32
     d60:	mov	r0, r5
     d64:	bl	0 <coda_bin_cursor_get_bit_size>
     d68:	mvn	r6, #0
     d6c:	cmp	r0, #0
     d70:	bne	e38 <coda_bin_cursor_read_uint16+0x188>
     d74:	ldr	r2, [fp, #-32]	; 0xffffffe0
     d78:	ldr	r1, [fp, #-28]	; 0xffffffe4
     d7c:	subs	r0, r2, #17
     d80:	sbcs	r0, r1, #0
     d84:	bcc	d04 <coda_bin_cursor_read_uint16+0x54>
     d88:	add	r8, sp, #35	; 0x23
     d8c:	mov	r0, r2
     d90:	mov	r2, r8
     d94:	bl	0 <coda_str64>
     d98:	ldr	r0, [r5, #4]
     d9c:	add	r4, r5, #8
     da0:	add	r7, sp, #14
     da4:	mov	r2, r7
     da8:	add	r0, r4, r0, lsl #4
     dac:	ldrd	r0, [r0, #-8]
     db0:	lsr	r0, r0, #3
     db4:	orr	r0, r0, r1, lsl #29
     db8:	asr	r1, r1, #3
     dbc:	bl	0 <coda_str64>
     dc0:	ldr	r0, [r5, #4]
     dc4:	movw	r1, #0
     dc8:	mov	r2, r8
     dcc:	mov	r3, r7
     dd0:	movt	r1, #0
     dd4:	add	r0, r4, r0, lsl #4
     dd8:	ldr	r0, [r0, #-8]
     ddc:	and	r0, r0, #7
     de0:	str	r0, [sp]
     de4:	movw	r0, #65236	; 0xfed4
     de8:	movt	r0, #65535	; 0xffff
     dec:	bl	0 <coda_set_error>
     df0:	b	e38 <coda_bin_cursor_read_uint16+0x188>
     df4:	ldr	r0, [r5]
     df8:	mov	r2, #2
     dfc:	mov	r1, #0
     e00:	asr	r3, r9, #3
     e04:	str	r2, [sp]
     e08:	stmib	sp, {r1, r4}
     e0c:	lsr	r1, r8, #3
     e10:	orr	r2, r1, r9, lsl #29
     e14:	bl	7dc <read_bytes>
     e18:	mvn	r6, #0
     e1c:	cmp	r0, #0
     e20:	bne	e38 <coda_bin_cursor_read_uint16+0x188>
     e24:	cmp	r7, #0
     e28:	mov	r6, #0
     e2c:	ldrheq	r0, [r4]
     e30:	rev16eq	r0, r0
     e34:	strheq	r0, [r4]
     e38:	mov	r0, r6
     e3c:	sub	sp, fp, #24
     e40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000e44 <coda_bin_cursor_read_int32>:
     e44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     e48:	add	fp, sp, #24
     e4c:	sub	sp, sp, #64	; 0x40
     e50:	mov	r5, r0
     e54:	ldr	r0, [r0, #4]
     e58:	mov	r4, r1
     e5c:	sub	r0, r0, #1
     e60:	add	r0, r5, r0, lsl #4
     e64:	ldr	r3, [r0, #8]
     e68:	ldr	r1, [r3]
     e6c:	cmp	r1, #99	; 0x63
     e70:	ldrhi	r3, [r3, #4]
     e74:	ldr	r2, [r3, #24]
     e78:	ldr	r1, [r3, #28]
     e7c:	str	r1, [fp, #-28]	; 0xffffffe4
     e80:	str	r2, [fp, #-32]	; 0xffffffe0
     e84:	ldrd	r8, [r0, #16]
     e88:	ldr	r7, [r3, #44]	; 0x2c
     e8c:	and	r0, r2, r1
     e90:	cmn	r0, #1
     e94:	beq	ef0 <coda_bin_cursor_read_int32+0xac>
     e98:	tst	r8, #7
     e9c:	eoreq	r0, r2, #32
     ea0:	orrseq	r0, r0, r1
     ea4:	beq	f88 <coda_bin_cursor_read_int32+0x144>
     ea8:	cmp	r7, #0
     eac:	mov	r3, r4
     eb0:	bne	ecc <coda_bin_cursor_read_int32+0x88>
     eb4:	lsr	r0, r2, #3
     eb8:	tst	r2, #7
     ebc:	orr	r0, r0, r1, lsl #29
     ec0:	addne	r0, r0, #1
     ec4:	rsb	r0, r0, #4
     ec8:	add	r3, r4, r0
     ecc:	mov	r0, #0
     ed0:	str	r0, [r4]
     ed4:	ldr	r0, [r5]
     ed8:	str	r2, [sp]
     edc:	stmib	sp, {r1, r3}
     ee0:	mov	r2, r8
     ee4:	mov	r3, r9
     ee8:	bl	3e0 <read_bits>
     eec:	b	fac <coda_bin_cursor_read_int32+0x168>
     ef0:	sub	r1, fp, #32
     ef4:	mov	r0, r5
     ef8:	bl	0 <coda_bin_cursor_get_bit_size>
     efc:	mvn	r6, #0
     f00:	cmp	r0, #0
     f04:	bne	ffc <coda_bin_cursor_read_int32+0x1b8>
     f08:	ldr	r2, [fp, #-32]	; 0xffffffe0
     f0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     f10:	subs	r0, r2, #33	; 0x21
     f14:	sbcs	r0, r1, #0
     f18:	bcc	e98 <coda_bin_cursor_read_int32+0x54>
     f1c:	add	r8, sp, #35	; 0x23
     f20:	mov	r0, r2
     f24:	mov	r2, r8
     f28:	bl	0 <coda_str64>
     f2c:	ldr	r0, [r5, #4]
     f30:	add	r4, r5, #8
     f34:	add	r7, sp, #14
     f38:	mov	r2, r7
     f3c:	add	r0, r4, r0, lsl #4
     f40:	ldrd	r0, [r0, #-8]
     f44:	lsr	r0, r0, #3
     f48:	orr	r0, r0, r1, lsl #29
     f4c:	asr	r1, r1, #3
     f50:	bl	0 <coda_str64>
     f54:	ldr	r0, [r5, #4]
     f58:	movw	r1, #0
     f5c:	mov	r2, r8
     f60:	mov	r3, r7
     f64:	movt	r1, #0
     f68:	add	r0, r4, r0, lsl #4
     f6c:	ldr	r0, [r0, #-8]
     f70:	and	r0, r0, #7
     f74:	str	r0, [sp]
     f78:	movw	r0, #65236	; 0xfed4
     f7c:	movt	r0, #65535	; 0xffff
     f80:	bl	0 <coda_set_error>
     f84:	b	ffc <coda_bin_cursor_read_int32+0x1b8>
     f88:	ldr	r0, [r5]
     f8c:	mov	r2, #4
     f90:	mov	r1, #0
     f94:	asr	r3, r9, #3
     f98:	str	r2, [sp]
     f9c:	stmib	sp, {r1, r4}
     fa0:	lsr	r1, r8, #3
     fa4:	orr	r2, r1, r9, lsl #29
     fa8:	bl	7dc <read_bytes>
     fac:	mvn	r6, #0
     fb0:	cmp	r0, #0
     fb4:	bne	ffc <coda_bin_cursor_read_int32+0x1b8>
     fb8:	cmp	r7, #0
     fbc:	mov	r6, #0
     fc0:	ldreq	r0, [r4]
     fc4:	reveq	r0, r0
     fc8:	streq	r0, [r4]
     fcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
     fd0:	ldr	r1, [fp, #-28]	; 0xffffffe4
     fd4:	rsbs	r2, r0, #31
     fd8:	rscs	r1, r1, #0
     fdc:	blt	ffc <coda_bin_cursor_read_int32+0x1b8>
     fe0:	ldr	r1, [r4]
     fe4:	sub	r2, r0, #1
     fe8:	mov	r3, #1
     fec:	tst	r1, r3, lsl r2
     ff0:	mvnne	r2, #0
     ff4:	orrne	r0, r1, r2, lsl r0
     ff8:	strne	r0, [r4]
     ffc:	mov	r0, r6
    1000:	sub	sp, fp, #24
    1004:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001008 <coda_bin_cursor_read_uint32>:
    1008:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    100c:	add	fp, sp, #24
    1010:	sub	sp, sp, #64	; 0x40
    1014:	mov	r5, r0
    1018:	ldr	r0, [r0, #4]
    101c:	mov	r4, r1
    1020:	sub	r0, r0, #1
    1024:	add	r0, r5, r0, lsl #4
    1028:	ldr	r3, [r0, #8]
    102c:	ldr	r1, [r3]
    1030:	cmp	r1, #99	; 0x63
    1034:	ldrhi	r3, [r3, #4]
    1038:	ldr	r2, [r3, #24]
    103c:	ldr	r1, [r3, #28]
    1040:	str	r1, [fp, #-28]	; 0xffffffe4
    1044:	str	r2, [fp, #-32]	; 0xffffffe0
    1048:	ldrd	r8, [r0, #16]
    104c:	ldr	r7, [r3, #44]	; 0x2c
    1050:	and	r0, r2, r1
    1054:	cmn	r0, #1
    1058:	beq	10b4 <coda_bin_cursor_read_uint32+0xac>
    105c:	tst	r8, #7
    1060:	eoreq	r0, r2, #32
    1064:	orrseq	r0, r0, r1
    1068:	beq	114c <coda_bin_cursor_read_uint32+0x144>
    106c:	cmp	r7, #0
    1070:	mov	r3, r4
    1074:	bne	1090 <coda_bin_cursor_read_uint32+0x88>
    1078:	lsr	r0, r2, #3
    107c:	tst	r2, #7
    1080:	orr	r0, r0, r1, lsl #29
    1084:	addne	r0, r0, #1
    1088:	rsb	r0, r0, #4
    108c:	add	r3, r4, r0
    1090:	mov	r0, #0
    1094:	str	r0, [r4]
    1098:	ldr	r0, [r5]
    109c:	str	r2, [sp]
    10a0:	stmib	sp, {r1, r3}
    10a4:	mov	r2, r8
    10a8:	mov	r3, r9
    10ac:	bl	3e0 <read_bits>
    10b0:	b	1170 <coda_bin_cursor_read_uint32+0x168>
    10b4:	sub	r1, fp, #32
    10b8:	mov	r0, r5
    10bc:	bl	0 <coda_bin_cursor_get_bit_size>
    10c0:	mvn	r6, #0
    10c4:	cmp	r0, #0
    10c8:	bne	1190 <coda_bin_cursor_read_uint32+0x188>
    10cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    10d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    10d4:	subs	r0, r2, #33	; 0x21
    10d8:	sbcs	r0, r1, #0
    10dc:	bcc	105c <coda_bin_cursor_read_uint32+0x54>
    10e0:	add	r8, sp, #35	; 0x23
    10e4:	mov	r0, r2
    10e8:	mov	r2, r8
    10ec:	bl	0 <coda_str64>
    10f0:	ldr	r0, [r5, #4]
    10f4:	add	r4, r5, #8
    10f8:	add	r7, sp, #14
    10fc:	mov	r2, r7
    1100:	add	r0, r4, r0, lsl #4
    1104:	ldrd	r0, [r0, #-8]
    1108:	lsr	r0, r0, #3
    110c:	orr	r0, r0, r1, lsl #29
    1110:	asr	r1, r1, #3
    1114:	bl	0 <coda_str64>
    1118:	ldr	r0, [r5, #4]
    111c:	movw	r1, #0
    1120:	mov	r2, r8
    1124:	mov	r3, r7
    1128:	movt	r1, #0
    112c:	add	r0, r4, r0, lsl #4
    1130:	ldr	r0, [r0, #-8]
    1134:	and	r0, r0, #7
    1138:	str	r0, [sp]
    113c:	movw	r0, #65236	; 0xfed4
    1140:	movt	r0, #65535	; 0xffff
    1144:	bl	0 <coda_set_error>
    1148:	b	1190 <coda_bin_cursor_read_uint32+0x188>
    114c:	ldr	r0, [r5]
    1150:	mov	r2, #4
    1154:	mov	r1, #0
    1158:	asr	r3, r9, #3
    115c:	str	r2, [sp]
    1160:	stmib	sp, {r1, r4}
    1164:	lsr	r1, r8, #3
    1168:	orr	r2, r1, r9, lsl #29
    116c:	bl	7dc <read_bytes>
    1170:	mvn	r6, #0
    1174:	cmp	r0, #0
    1178:	bne	1190 <coda_bin_cursor_read_uint32+0x188>
    117c:	cmp	r7, #0
    1180:	mov	r6, #0
    1184:	ldreq	r0, [r4]
    1188:	reveq	r0, r0
    118c:	streq	r0, [r4]
    1190:	mov	r0, r6
    1194:	sub	sp, fp, #24
    1198:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000119c <coda_bin_cursor_read_int64>:
    119c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    11a0:	add	fp, sp, #24
    11a4:	sub	sp, sp, #64	; 0x40
    11a8:	mov	r5, r0
    11ac:	ldr	r0, [r0, #4]
    11b0:	mov	r4, r1
    11b4:	sub	r0, r0, #1
    11b8:	add	r0, r5, r0, lsl #4
    11bc:	ldr	r3, [r0, #8]
    11c0:	ldr	r1, [r3]
    11c4:	cmp	r1, #99	; 0x63
    11c8:	ldrhi	r3, [r3, #4]
    11cc:	ldr	r2, [r3, #24]
    11d0:	ldr	r1, [r3, #28]
    11d4:	str	r1, [fp, #-28]	; 0xffffffe4
    11d8:	str	r2, [fp, #-32]	; 0xffffffe0
    11dc:	ldrd	r8, [r0, #16]
    11e0:	ldr	r7, [r3, #44]	; 0x2c
    11e4:	and	r0, r2, r1
    11e8:	cmn	r0, #1
    11ec:	beq	124c <coda_bin_cursor_read_int64+0xb0>
    11f0:	tst	r8, #7
    11f4:	eoreq	r0, r2, #64	; 0x40
    11f8:	orrseq	r0, r0, r1
    11fc:	beq	12e4 <coda_bin_cursor_read_int64+0x148>
    1200:	cmp	r7, #0
    1204:	mov	r3, r4
    1208:	bne	1224 <coda_bin_cursor_read_int64+0x88>
    120c:	lsr	r0, r2, #3
    1210:	tst	r2, #7
    1214:	orr	r0, r0, r1, lsl #29
    1218:	addne	r0, r0, #1
    121c:	rsb	r0, r0, #8
    1220:	add	r3, r4, r0
    1224:	mov	r0, #0
    1228:	str	r0, [r4]
    122c:	str	r0, [r4, #4]
    1230:	ldr	r0, [r5]
    1234:	str	r2, [sp]
    1238:	stmib	sp, {r1, r3}
    123c:	mov	r2, r8
    1240:	mov	r3, r9
    1244:	bl	3e0 <read_bits>
    1248:	b	1308 <coda_bin_cursor_read_int64+0x16c>
    124c:	sub	r1, fp, #32
    1250:	mov	r0, r5
    1254:	bl	0 <coda_bin_cursor_get_bit_size>
    1258:	mvn	r6, #0
    125c:	cmp	r0, #0
    1260:	bne	1398 <coda_bin_cursor_read_int64+0x1fc>
    1264:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1268:	ldr	r1, [fp, #-28]	; 0xffffffe4
    126c:	subs	r0, r2, #65	; 0x41
    1270:	sbcs	r0, r1, #0
    1274:	bcc	11f0 <coda_bin_cursor_read_int64+0x54>
    1278:	add	r8, sp, #35	; 0x23
    127c:	mov	r0, r2
    1280:	mov	r2, r8
    1284:	bl	0 <coda_str64>
    1288:	ldr	r0, [r5, #4]
    128c:	add	r4, r5, #8
    1290:	add	r7, sp, #14
    1294:	mov	r2, r7
    1298:	add	r0, r4, r0, lsl #4
    129c:	ldrd	r0, [r0, #-8]
    12a0:	lsr	r0, r0, #3
    12a4:	orr	r0, r0, r1, lsl #29
    12a8:	asr	r1, r1, #3
    12ac:	bl	0 <coda_str64>
    12b0:	ldr	r0, [r5, #4]
    12b4:	movw	r1, #0
    12b8:	mov	r2, r8
    12bc:	mov	r3, r7
    12c0:	movt	r1, #0
    12c4:	add	r0, r4, r0, lsl #4
    12c8:	ldr	r0, [r0, #-8]
    12cc:	and	r0, r0, #7
    12d0:	str	r0, [sp]
    12d4:	movw	r0, #65236	; 0xfed4
    12d8:	movt	r0, #65535	; 0xffff
    12dc:	bl	0 <coda_set_error>
    12e0:	b	1398 <coda_bin_cursor_read_int64+0x1fc>
    12e4:	ldr	r0, [r5]
    12e8:	mov	r2, #8
    12ec:	mov	r1, #0
    12f0:	asr	r3, r9, #3
    12f4:	str	r2, [sp]
    12f8:	stmib	sp, {r1, r4}
    12fc:	lsr	r1, r8, #3
    1300:	orr	r2, r1, r9, lsl #29
    1304:	bl	7dc <read_bytes>
    1308:	mvn	r6, #0
    130c:	cmp	r0, #0
    1310:	bne	1398 <coda_bin_cursor_read_int64+0x1fc>
    1314:	cmp	r7, #0
    1318:	bne	1330 <coda_bin_cursor_read_int64+0x194>
    131c:	ldr	r0, [r4]
    1320:	ldr	r1, [r4, #4]
    1324:	rev	r3, r0
    1328:	rev	r2, r1
    132c:	strd	r2, [r4]
    1330:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1334:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1338:	mov	r6, #0
    133c:	rsbs	r2, r0, #63	; 0x3f
    1340:	rscs	r1, r1, #0
    1344:	blt	1398 <coda_bin_cursor_read_int64+0x1fc>
    1348:	rsb	r1, r0, #33	; 0x21
    134c:	mov	ip, #1
    1350:	sub	r5, r0, #33	; 0x21
    1354:	ldr	r2, [r4]
    1358:	sub	r3, r0, #1
    135c:	lsr	r7, ip, r1
    1360:	ldr	r1, [r4, #4]
    1364:	cmp	r5, #0
    1368:	lsl	r3, ip, r3
    136c:	lslge	r7, ip, r5
    1370:	cmp	r5, #0
    1374:	movwge	r3, #0
    1378:	and	r3, r2, r3
    137c:	and	r7, r1, r7
    1380:	orrs	r3, r3, r7
    1384:	mvnne	r3, #0
    1388:	orrne	r2, r2, r3, lsl r0
    138c:	lslne	r0, r3, r0
    1390:	orrne	r3, r1, r0, asr #31
    1394:	strdne	r2, [r4]
    1398:	mov	r0, r6
    139c:	sub	sp, fp, #24
    13a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000013a4 <coda_bin_cursor_read_uint64>:
    13a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    13a8:	add	fp, sp, #24
    13ac:	sub	sp, sp, #64	; 0x40
    13b0:	mov	r5, r0
    13b4:	ldr	r0, [r0, #4]
    13b8:	mov	r4, r1
    13bc:	sub	r0, r0, #1
    13c0:	add	r0, r5, r0, lsl #4
    13c4:	ldr	r3, [r0, #8]
    13c8:	ldr	r1, [r3]
    13cc:	cmp	r1, #99	; 0x63
    13d0:	ldrhi	r3, [r3, #4]
    13d4:	ldr	r2, [r3, #24]
    13d8:	ldr	r1, [r3, #28]
    13dc:	str	r1, [fp, #-28]	; 0xffffffe4
    13e0:	str	r2, [fp, #-32]	; 0xffffffe0
    13e4:	ldrd	r8, [r0, #16]
    13e8:	ldr	r7, [r3, #44]	; 0x2c
    13ec:	and	r0, r2, r1
    13f0:	cmn	r0, #1
    13f4:	beq	1454 <coda_bin_cursor_read_uint64+0xb0>
    13f8:	tst	r8, #7
    13fc:	eoreq	r0, r2, #64	; 0x40
    1400:	orrseq	r0, r0, r1
    1404:	beq	14ec <coda_bin_cursor_read_uint64+0x148>
    1408:	cmp	r7, #0
    140c:	mov	r3, r4
    1410:	bne	142c <coda_bin_cursor_read_uint64+0x88>
    1414:	lsr	r0, r2, #3
    1418:	tst	r2, #7
    141c:	orr	r0, r0, r1, lsl #29
    1420:	addne	r0, r0, #1
    1424:	rsb	r0, r0, #8
    1428:	add	r3, r4, r0
    142c:	mov	r0, #0
    1430:	str	r0, [r4]
    1434:	str	r0, [r4, #4]
    1438:	ldr	r0, [r5]
    143c:	str	r2, [sp]
    1440:	stmib	sp, {r1, r3}
    1444:	mov	r2, r8
    1448:	mov	r3, r9
    144c:	bl	3e0 <read_bits>
    1450:	b	1510 <coda_bin_cursor_read_uint64+0x16c>
    1454:	sub	r1, fp, #32
    1458:	mov	r0, r5
    145c:	bl	0 <coda_bin_cursor_get_bit_size>
    1460:	mvn	r6, #0
    1464:	cmp	r0, #0
    1468:	bne	153c <coda_bin_cursor_read_uint64+0x198>
    146c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1470:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1474:	subs	r0, r2, #65	; 0x41
    1478:	sbcs	r0, r1, #0
    147c:	bcc	13f8 <coda_bin_cursor_read_uint64+0x54>
    1480:	add	r8, sp, #35	; 0x23
    1484:	mov	r0, r2
    1488:	mov	r2, r8
    148c:	bl	0 <coda_str64>
    1490:	ldr	r0, [r5, #4]
    1494:	add	r4, r5, #8
    1498:	add	r7, sp, #14
    149c:	mov	r2, r7
    14a0:	add	r0, r4, r0, lsl #4
    14a4:	ldrd	r0, [r0, #-8]
    14a8:	lsr	r0, r0, #3
    14ac:	orr	r0, r0, r1, lsl #29
    14b0:	asr	r1, r1, #3
    14b4:	bl	0 <coda_str64>
    14b8:	ldr	r0, [r5, #4]
    14bc:	movw	r1, #0
    14c0:	mov	r2, r8
    14c4:	mov	r3, r7
    14c8:	movt	r1, #0
    14cc:	add	r0, r4, r0, lsl #4
    14d0:	ldr	r0, [r0, #-8]
    14d4:	and	r0, r0, #7
    14d8:	str	r0, [sp]
    14dc:	movw	r0, #65236	; 0xfed4
    14e0:	movt	r0, #65535	; 0xffff
    14e4:	bl	0 <coda_set_error>
    14e8:	b	153c <coda_bin_cursor_read_uint64+0x198>
    14ec:	ldr	r0, [r5]
    14f0:	mov	r2, #8
    14f4:	mov	r1, #0
    14f8:	asr	r3, r9, #3
    14fc:	str	r2, [sp]
    1500:	stmib	sp, {r1, r4}
    1504:	lsr	r1, r8, #3
    1508:	orr	r2, r1, r9, lsl #29
    150c:	bl	7dc <read_bytes>
    1510:	mvn	r6, #0
    1514:	cmp	r0, #0
    1518:	bne	153c <coda_bin_cursor_read_uint64+0x198>
    151c:	mov	r6, #0
    1520:	cmp	r7, #0
    1524:	bne	153c <coda_bin_cursor_read_uint64+0x198>
    1528:	ldr	r0, [r4]
    152c:	ldr	r1, [r4, #4]
    1530:	rev	r3, r0
    1534:	rev	r2, r1
    1538:	strd	r2, [r4]
    153c:	mov	r0, r6
    1540:	sub	sp, fp, #24
    1544:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001548 <coda_bin_cursor_read_float>:
    1548:	push	{r4, r5, r6, sl, fp, lr}
    154c:	add	fp, sp, #16
    1550:	sub	sp, sp, #16
    1554:	mov	r4, r1
    1558:	mov	r1, r0
    155c:	ldr	r0, [r0, #4]
    1560:	sub	r0, r0, #1
    1564:	add	r2, r1, r0, lsl #4
    1568:	ldr	r0, [r1], r0, lsl #4
    156c:	ldr	r3, [r2, #8]
    1570:	ldr	r2, [r3]
    1574:	cmp	r2, #99	; 0x63
    1578:	ldrhi	r3, [r3, #4]
    157c:	ldr	r2, [r1, #16]
    1580:	ldr	r1, [r1, #20]
    1584:	ldr	r6, [r3, #44]	; 0x2c
    1588:	mov	r3, #0
    158c:	tst	r2, #7
    1590:	beq	15ac <coda_bin_cursor_read_float+0x64>
    1594:	mov	r5, #32
    1598:	str	r5, [sp]
    159c:	stmib	sp, {r3, r4}
    15a0:	mov	r3, r1
    15a4:	bl	3e0 <read_bits>
    15a8:	b	15c8 <coda_bin_cursor_read_float+0x80>
    15ac:	lsr	r2, r2, #3
    15b0:	mov	r5, #4
    15b4:	str	r5, [sp]
    15b8:	stmib	sp, {r3, r4}
    15bc:	orr	r2, r2, r1, lsl #29
    15c0:	asr	r3, r1, #3
    15c4:	bl	7dc <read_bytes>
    15c8:	mov	r1, r0
    15cc:	mvn	r0, #0
    15d0:	cmp	r1, #0
    15d4:	beq	15e0 <coda_bin_cursor_read_float+0x98>
    15d8:	sub	sp, fp, #16
    15dc:	pop	{r4, r5, r6, sl, fp, pc}
    15e0:	cmp	r6, #0
    15e4:	mov	r0, #0
    15e8:	ldreq	r1, [r4]
    15ec:	reveq	r1, r1
    15f0:	streq	r1, [r4]
    15f4:	sub	sp, fp, #16
    15f8:	pop	{r4, r5, r6, sl, fp, pc}

000015fc <coda_bin_cursor_read_double>:
    15fc:	push	{r4, r5, r6, sl, fp, lr}
    1600:	add	fp, sp, #16
    1604:	sub	sp, sp, #16
    1608:	mov	r4, r1
    160c:	mov	r1, r0
    1610:	ldr	r0, [r0, #4]
    1614:	sub	r0, r0, #1
    1618:	add	r2, r1, r0, lsl #4
    161c:	ldr	r0, [r1], r0, lsl #4
    1620:	ldr	r3, [r2, #8]
    1624:	ldr	r2, [r3]
    1628:	cmp	r2, #99	; 0x63
    162c:	ldrhi	r3, [r3, #4]
    1630:	ldr	r2, [r1, #16]
    1634:	ldr	r1, [r1, #20]
    1638:	ldr	r6, [r3, #44]	; 0x2c
    163c:	mov	r3, #0
    1640:	tst	r2, #7
    1644:	beq	1660 <coda_bin_cursor_read_double+0x64>
    1648:	mov	r5, #64	; 0x40
    164c:	str	r5, [sp]
    1650:	stmib	sp, {r3, r4}
    1654:	mov	r3, r1
    1658:	bl	3e0 <read_bits>
    165c:	b	167c <coda_bin_cursor_read_double+0x80>
    1660:	lsr	r2, r2, #3
    1664:	mov	r5, #8
    1668:	str	r5, [sp]
    166c:	stmib	sp, {r3, r4}
    1670:	orr	r2, r2, r1, lsl #29
    1674:	asr	r3, r1, #3
    1678:	bl	7dc <read_bytes>
    167c:	mov	r1, r0
    1680:	mvn	r0, #0
    1684:	cmp	r1, #0
    1688:	bne	1698 <coda_bin_cursor_read_double+0x9c>
    168c:	mov	r0, #0
    1690:	cmp	r6, #0
    1694:	beq	16a0 <coda_bin_cursor_read_double+0xa4>
    1698:	sub	sp, fp, #16
    169c:	pop	{r4, r5, r6, sl, fp, pc}
    16a0:	ldr	r1, [r4]
    16a4:	ldr	r2, [r4, #4]
    16a8:	rev	r2, r2
    16ac:	rev	r1, r1
    16b0:	str	r2, [r4]
    16b4:	str	r1, [r4, #4]
    16b8:	sub	sp, fp, #16
    16bc:	pop	{r4, r5, r6, sl, fp, pc}

000016c0 <coda_bin_cursor_read_char>:
    16c0:	b	944 <coda_bin_cursor_read_uint8>

000016c4 <coda_bin_cursor_read_string>:
    16c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    16c8:	add	fp, sp, #24
    16cc:	sub	sp, sp, #64	; 0x40
    16d0:	mov	r5, r0
    16d4:	ldr	r0, [r0, #4]
    16d8:	mov	r9, r1
    16dc:	mov	r6, r2
    16e0:	sub	r0, r0, #1
    16e4:	add	r1, r5, r0, lsl #4
    16e8:	ldr	r0, [r1, #8]
    16ec:	ldr	r2, [r0]
    16f0:	cmp	r2, #99	; 0x63
    16f4:	ldrhi	r0, [r0, #4]
    16f8:	ldr	r8, [r1, #16]
    16fc:	ldr	r7, [r1, #20]
    1700:	ldr	r1, [r0, #28]
    1704:	cmn	r1, #1
    1708:	ble	178c <coda_bin_cursor_read_string+0xc8>
    170c:	ldr	r0, [r0, #24]
    1710:	lsr	r0, r0, #3
    1714:	lsr	r2, r1, #3
    1718:	orr	r4, r0, r1, lsl #29
    171c:	mov	r0, #0
    1720:	subs	r3, r4, r6
    1724:	sbcs	r2, r2, r6, asr #31
    1728:	sub	r3, r6, #1
    172c:	mov	r2, #0
    1730:	movwlt	r2, #1
    1734:	cmp	r2, #0
    1738:	asr	r2, r3, #31
    173c:	moveq	r4, r3
    1740:	lsrne	r2, r1, #3
    1744:	subs	r1, r4, #1
    1748:	sbcs	r1, r2, #0
    174c:	blt	17ac <coda_bin_cursor_read_string+0xe8>
    1750:	ldr	r0, [r5]
    1754:	lsl	r1, r2, #3
    1758:	lsl	r2, r4, #3
    175c:	mov	r3, r7
    1760:	str	r2, [sp]
    1764:	orr	r1, r1, r4, lsr #29
    1768:	mov	r2, r8
    176c:	stmib	sp, {r1, r9}
    1770:	bl	3e0 <read_bits>
    1774:	mov	r1, r0
    1778:	mvn	r0, #0
    177c:	cmp	r1, #0
    1780:	beq	17b8 <coda_bin_cursor_read_string+0xf4>
    1784:	sub	sp, fp, #24
    1788:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    178c:	sub	r1, fp, #32
    1790:	mov	r0, r5
    1794:	bl	0 <coda_bin_cursor_get_bit_size>
    1798:	cmp	r0, #0
    179c:	beq	17c8 <coda_bin_cursor_read_string+0x104>
    17a0:	mvn	r0, #0
    17a4:	sub	sp, fp, #24
    17a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    17ac:	strb	r0, [r9]
    17b0:	sub	sp, fp, #24
    17b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    17b8:	mov	r0, #0
    17bc:	strb	r0, [r9, r4]
    17c0:	sub	sp, fp, #24
    17c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    17c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    17cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    17d0:	cmn	r1, #1
    17d4:	ble	17f8 <coda_bin_cursor_read_string+0x134>
    17d8:	tst	r0, #7
    17dc:	beq	1710 <coda_bin_cursor_read_string+0x4c>
    17e0:	movw	r0, #65236	; 0xfed4
    17e4:	movw	r1, #0
    17e8:	movt	r0, #65535	; 0xffff
    17ec:	movt	r1, #0
    17f0:	bl	0 <coda_set_error>
    17f4:	b	17a0 <coda_bin_cursor_read_string+0xdc>
    17f8:	add	r4, sp, #35	; 0x23
    17fc:	mov	r2, r4
    1800:	bl	0 <coda_str64>
    1804:	ldr	r0, [r5, #4]
    1808:	add	r7, r5, #8
    180c:	add	r6, sp, #14
    1810:	mov	r2, r6
    1814:	add	r0, r7, r0, lsl #4
    1818:	ldrd	r0, [r0, #-8]
    181c:	lsr	r0, r0, #3
    1820:	orr	r0, r0, r1, lsl #29
    1824:	asr	r1, r1, #3
    1828:	bl	0 <coda_str64>
    182c:	ldr	r0, [r5, #4]
    1830:	movw	r1, #0
    1834:	mov	r2, r4
    1838:	mov	r3, r6
    183c:	movt	r1, #0
    1840:	add	r0, r7, r0, lsl #4
    1844:	ldr	r0, [r0, #-8]
    1848:	and	r0, r0, #7
    184c:	str	r0, [sp]
    1850:	movw	r0, #65236	; 0xfed4
    1854:	movt	r0, #65535	; 0xffff
    1858:	bl	0 <coda_set_error>
    185c:	b	17a0 <coda_bin_cursor_read_string+0xdc>

00001860 <coda_bin_cursor_read_bits>:
    1860:	push	{r4, r5, fp, lr}
    1864:	add	fp, sp, #8
    1868:	sub	sp, sp, #16
    186c:	ldrd	r4, [r0]
    1870:	ldr	r5, [r0, r5, lsl #4]!
    1874:	ldr	r0, [r0, #4]
    1878:	str	r1, [sp, #8]
    187c:	ldr	r1, [fp, #12]
    1880:	adds	r2, r5, r2
    1884:	str	r1, [sp, #4]
    1888:	ldr	r1, [fp, #8]
    188c:	adc	r3, r0, r3
    1890:	mov	r0, r4
    1894:	str	r1, [sp]
    1898:	bl	3e0 <read_bits>
    189c:	sub	sp, fp, #8
    18a0:	pop	{r4, r5, fp, pc}

000018a4 <coda_bin_cursor_read_bytes>:
    18a4:	push	{r4, r5, fp, lr}
    18a8:	add	fp, sp, #8
    18ac:	sub	sp, sp, #16
    18b0:	ldr	r5, [r0, #4]
    18b4:	mov	r4, r0
    18b8:	ldr	lr, [r4, r5, lsl #4]!
    18bc:	ldr	r5, [fp, #12]
    18c0:	ldr	ip, [r4, #4]
    18c4:	ldr	r4, [fp, #8]
    18c8:	tst	lr, #7
    18cc:	beq	1904 <coda_bin_cursor_read_bytes+0x60>
    18d0:	lsl	r5, r5, #3
    18d4:	ldr	r0, [r0]
    18d8:	orr	r5, r5, r4, lsr #29
    18dc:	lsl	r4, r4, #3
    18e0:	stm	sp, {r4, r5}
    18e4:	str	r1, [sp, #8]
    18e8:	lsl	r1, r3, #3
    18ec:	orr	r1, r1, r2, lsr #29
    18f0:	adds	r2, lr, r2, lsl #3
    18f4:	adc	r3, ip, r1
    18f8:	bl	3e0 <read_bits>
    18fc:	sub	sp, fp, #8
    1900:	pop	{r4, r5, fp, pc}
    1904:	ldr	r0, [r0]
    1908:	stm	sp, {r4, r5}
    190c:	str	r1, [sp, #8]
    1910:	lsr	r1, lr, #3
    1914:	asr	r5, ip, #3
    1918:	orr	r1, r1, ip, lsl #29
    191c:	adds	r2, r1, r2
    1920:	adc	r3, r5, r3
    1924:	bl	7dc <read_bytes>
    1928:	sub	sp, fp, #8
    192c:	pop	{r4, r5, fp, pc}

00001930 <coda_bin_cursor_read_int8_array>:
    1930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1934:	add	fp, sp, #28
    1938:	sub	sp, sp, #564	; 0x234
    193c:	mov	r5, r0
    1940:	ldr	r0, [r0, #4]
    1944:	mov	sl, r1
    1948:	mov	r8, r2
    194c:	add	r0, r5, r0, lsl #4
    1950:	ldr	r0, [r0, #-8]
    1954:	ldr	r1, [r0]
    1958:	cmp	r1, #99	; 0x63
    195c:	ldrhi	r0, [r0, #4]
    1960:	ldr	r0, [r0, #40]	; 0x28
    1964:	ldr	r0, [r0]
    1968:	cmp	r0, #0
    196c:	beq	199c <coda_bin_cursor_read_int8_array+0x6c>
    1970:	cmp	r0, #1
    1974:	bne	1ae0 <coda_bin_cursor_read_int8_array+0x1b0>
    1978:	movw	r1, #0
    197c:	mov	r0, r5
    1980:	mov	r2, sl
    1984:	mov	r3, #1
    1988:	str	r8, [sp]
    198c:	movt	r1, #0
    1990:	bl	1b00 <read_array>
    1994:	sub	sp, fp, #28
    1998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    199c:	add	r7, sp, #8
    19a0:	add	r1, sp, #4
    19a4:	mov	r0, r5
    19a8:	mov	r2, r7
    19ac:	bl	0 <coda_cursor_get_array_dim>
    19b0:	cmp	r0, #0
    19b4:	bne	1a60 <coda_bin_cursor_read_int8_array+0x130>
    19b8:	add	r0, sp, #40	; 0x28
    19bc:	mov	r1, r5
    19c0:	mov	r2, #520	; 0x208
    19c4:	bl	0 <memcpy>
    19c8:	ldr	r0, [sp, #4]
    19cc:	cmp	r0, #1
    19d0:	blt	19e8 <coda_bin_cursor_read_int8_array+0xb8>
    19d4:	cmp	r0, #4
    19d8:	bcs	19f0 <coda_bin_cursor_read_int8_array+0xc0>
    19dc:	mov	r6, #1
    19e0:	mov	r1, #0
    19e4:	b	1a24 <coda_bin_cursor_read_int8_array+0xf4>
    19e8:	mov	r6, #1
    19ec:	b	1a48 <coda_bin_cursor_read_int8_array+0x118>
    19f0:	bic	r1, r0, #3
    19f4:	vmov.i32	q8, #1	; 0x00000001
    19f8:	mov	r2, r1
    19fc:	vld1.32	{d18-d19}, [r7]!
    1a00:	subs	r2, r2, #4
    1a04:	vmul.i32	q8, q9, q8
    1a08:	bne	19fc <coda_bin_cursor_read_int8_array+0xcc>
    1a0c:	vext.8	q9, q8, q8, #8
    1a10:	cmp	r0, r1
    1a14:	vmul.i32	q0, q8, q9
    1a18:	vmul.i32	q8, q0, d0[1]
    1a1c:	vmov.32	r6, d16[0]
    1a20:	beq	1a40 <coda_bin_cursor_read_int8_array+0x110>
    1a24:	add	r2, sp, #8
    1a28:	sub	r0, r0, r1
    1a2c:	add	r2, r2, r1, lsl #2
    1a30:	ldr	r1, [r2], #4
    1a34:	subs	r0, r0, #1
    1a38:	mul	r6, r1, r6
    1a3c:	bne	1a30 <coda_bin_cursor_read_int8_array+0x100>
    1a40:	cmp	r6, #1
    1a44:	blt	1aac <coda_bin_cursor_read_int8_array+0x17c>
    1a48:	add	r0, sp, #40	; 0x28
    1a4c:	mov	r1, #0
    1a50:	mov	r7, #0
    1a54:	bl	0 <coda_cursor_goto_array_element_by_index>
    1a58:	cmp	r0, #0
    1a5c:	beq	1a6c <coda_bin_cursor_read_int8_array+0x13c>
    1a60:	mvn	r0, #0
    1a64:	sub	sp, fp, #28
    1a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a6c:	sub	r4, r6, #1
    1a70:	add	r9, sp, #40	; 0x28
    1a74:	add	r1, sl, r7
    1a78:	mov	r0, r9
    1a7c:	bl	0 <coda_ascii_cursor_read_int8>
    1a80:	cmp	r0, #0
    1a84:	bne	1a60 <coda_bin_cursor_read_int8_array+0x130>
    1a88:	cmp	r7, r4
    1a8c:	bge	1aa0 <coda_bin_cursor_read_int8_array+0x170>
    1a90:	mov	r0, r9
    1a94:	bl	0 <coda_cursor_goto_next_array_element>
    1a98:	cmp	r0, #0
    1a9c:	bne	1a60 <coda_bin_cursor_read_int8_array+0x130>
    1aa0:	add	r7, r7, #1
    1aa4:	cmp	r7, r6
    1aa8:	blt	1a74 <coda_bin_cursor_read_int8_array+0x144>
    1aac:	cmp	r8, #0
    1ab0:	beq	1ad4 <coda_bin_cursor_read_int8_array+0x1a4>
    1ab4:	mov	r0, r5
    1ab8:	mov	r1, sl
    1abc:	mov	r2, #1
    1ac0:	bl	1d68 <transpose_array>
    1ac4:	mov	r1, r0
    1ac8:	mvn	r0, #0
    1acc:	cmp	r1, #0
    1ad0:	bne	1a64 <coda_bin_cursor_read_int8_array+0x134>
    1ad4:	mov	r0, #0
    1ad8:	sub	sp, fp, #28
    1adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ae0:	movw	r0, #0
    1ae4:	movw	r1, #0
    1ae8:	movw	r3, #0
    1aec:	movw	r2, #906	; 0x38a
    1af0:	movt	r0, #0
    1af4:	movt	r1, #0
    1af8:	movt	r3, #0
    1afc:	bl	0 <__assert_fail>

00001b00 <read_array>:
    1b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b04:	add	fp, sp, #28
    1b08:	sub	sp, sp, #604	; 0x25c
    1b0c:	add	r7, sp, #48	; 0x30
    1b10:	mov	r5, r2
    1b14:	mov	r8, r1
    1b18:	add	r1, sp, #44	; 0x2c
    1b1c:	mov	sl, r3
    1b20:	mov	r4, r0
    1b24:	mov	r2, r7
    1b28:	bl	0 <coda_cursor_get_array_dim>
    1b2c:	cmp	r0, #0
    1b30:	beq	1b40 <read_array+0x40>
    1b34:	mvn	r0, #0
    1b38:	sub	sp, fp, #28
    1b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b40:	ldr	r6, [fp, #8]
    1b44:	add	r0, sp, #80	; 0x50
    1b48:	mov	r1, r4
    1b4c:	mov	r2, #520	; 0x208
    1b50:	bl	0 <memcpy>
    1b54:	ldr	r0, [sp, #44]	; 0x2c
    1b58:	cmp	r6, #1
    1b5c:	bne	1c78 <read_array+0x178>
    1b60:	cmp	r0, #1
    1b64:	ble	1c78 <read_array+0x178>
    1b68:	add	r2, sp, #8
    1b6c:	mov	r1, #1
    1b70:	mov	r3, r0
    1b74:	str	sl, [sp, #4]
    1b78:	mov	r4, r2
    1b7c:	add	r2, r2, #4
    1b80:	str	r1, [sp, #8]
    1b84:	ldr	r6, [r7], #4
    1b88:	subs	r3, r3, #1
    1b8c:	mul	r1, r6, r1
    1b90:	str	r1, [r2], #4
    1b94:	bne	1b84 <read_array+0x84>
    1b98:	mov	r6, r4
    1b9c:	ldr	r4, [r4, r0, lsl #2]
    1ba0:	cmp	r4, #1
    1ba4:	blt	1d5c <read_array+0x25c>
    1ba8:	add	r0, r6, r0, lsl #2
    1bac:	mov	r1, #0
    1bb0:	mov	r9, #0
    1bb4:	ldr	r7, [r0, #-4]
    1bb8:	add	r0, sp, #80	; 0x50
    1bbc:	bl	0 <coda_cursor_goto_array_element_by_index>
    1bc0:	cmp	r0, #0
    1bc4:	bne	1b34 <read_array+0x34>
    1bc8:	sub	r0, r6, #4
    1bcc:	mov	sl, #0
    1bd0:	str	r0, [sp]
    1bd4:	b	1c5c <read_array+0x15c>
    1bd8:	add	r9, r9, #1
    1bdc:	cmp	r9, r4
    1be0:	bge	1bf4 <read_array+0xf4>
    1be4:	add	r0, sp, #80	; 0x50
    1be8:	bl	0 <coda_cursor_goto_next_array_element>
    1bec:	cmp	r0, #0
    1bf0:	bne	1b34 <read_array+0x34>
    1bf4:	add	sl, sl, r7
    1bf8:	cmp	sl, r4
    1bfc:	blt	1c5c <read_array+0x15c>
    1c00:	cmp	r9, r4
    1c04:	beq	1d5c <read_array+0x25c>
    1c08:	ldr	r1, [sp, #44]	; 0x2c
    1c0c:	add	r2, r6, r1, lsl #2
    1c10:	ldr	r0, [r6, r1, lsl #2]
    1c14:	cmp	r1, #3
    1c18:	ldr	r2, [r2, #-8]
    1c1c:	add	r2, r2, sl
    1c20:	sub	sl, r2, r0
    1c24:	blt	1c5c <read_array+0x15c>
    1c28:	ldr	r0, [sp]
    1c2c:	add	r0, r0, r1, lsl #2
    1c30:	sub	r1, r1, #2
    1c34:	ldr	r2, [r0]
    1c38:	cmp	sl, r2
    1c3c:	blt	1c5c <read_array+0x15c>
    1c40:	ldr	r3, [r0, #-8]
    1c44:	sub	r2, sl, r2
    1c48:	sub	r1, r1, #1
    1c4c:	sub	r0, r0, #4
    1c50:	cmp	r1, #0
    1c54:	add	sl, r2, r3
    1c58:	bgt	1c34 <read_array+0x134>
    1c5c:	ldr	r0, [sp, #4]
    1c60:	mla	r1, sl, r0, r5
    1c64:	add	r0, sp, #80	; 0x50
    1c68:	blx	r8
    1c6c:	cmp	r0, #0
    1c70:	beq	1bd8 <read_array+0xd8>
    1c74:	b	1b34 <read_array+0x34>
    1c78:	cmp	r0, #1
    1c7c:	blt	1c94 <read_array+0x194>
    1c80:	cmp	r0, #4
    1c84:	bcs	1c9c <read_array+0x19c>
    1c88:	mov	r4, #1
    1c8c:	mov	r1, #0
    1c90:	b	1cd4 <read_array+0x1d4>
    1c94:	mov	r4, #1
    1c98:	b	1cf8 <read_array+0x1f8>
    1c9c:	bic	r1, r0, #3
    1ca0:	vmov.i32	q8, #1	; 0x00000001
    1ca4:	add	r2, sp, #48	; 0x30
    1ca8:	mov	r3, r1
    1cac:	vld1.32	{d18-d19}, [r2]!
    1cb0:	subs	r3, r3, #4
    1cb4:	vmul.i32	q8, q9, q8
    1cb8:	bne	1cac <read_array+0x1ac>
    1cbc:	vext.8	q9, q8, q8, #8
    1cc0:	cmp	r0, r1
    1cc4:	vmul.i32	q0, q8, q9
    1cc8:	vmul.i32	q8, q0, d0[1]
    1ccc:	vmov.32	r4, d16[0]
    1cd0:	beq	1cf0 <read_array+0x1f0>
    1cd4:	add	r2, sp, #48	; 0x30
    1cd8:	sub	r0, r0, r1
    1cdc:	add	r1, r2, r1, lsl #2
    1ce0:	ldr	r2, [r1], #4
    1ce4:	subs	r0, r0, #1
    1ce8:	mul	r4, r2, r4
    1cec:	bne	1ce0 <read_array+0x1e0>
    1cf0:	cmp	r4, #1
    1cf4:	blt	1d5c <read_array+0x25c>
    1cf8:	add	r0, sp, #80	; 0x50
    1cfc:	mov	r1, #0
    1d00:	mov	r6, #0
    1d04:	bl	0 <coda_cursor_goto_array_element_by_index>
    1d08:	cmp	r0, #0
    1d0c:	bne	1b34 <read_array+0x34>
    1d10:	sub	r7, r4, #1
    1d14:	add	r9, sp, #80	; 0x50
    1d18:	mov	r0, r9
    1d1c:	mov	r1, r5
    1d20:	blx	r8
    1d24:	cmp	r0, #0
    1d28:	bne	1b34 <read_array+0x34>
    1d2c:	cmp	r6, r7
    1d30:	bge	1d44 <read_array+0x244>
    1d34:	mov	r0, r9
    1d38:	bl	0 <coda_cursor_goto_next_array_element>
    1d3c:	cmp	r0, #0
    1d40:	bne	1b34 <read_array+0x34>
    1d44:	add	r6, r6, #1
    1d48:	add	r5, r5, sl
    1d4c:	mov	r0, #0
    1d50:	cmp	r6, r4
    1d54:	blt	1d18 <read_array+0x218>
    1d58:	b	1b38 <read_array+0x38>
    1d5c:	mov	r0, #0
    1d60:	sub	sp, fp, #28
    1d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001d68 <transpose_array>:
    1d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d6c:	add	fp, sp, #28
    1d70:	sub	sp, sp, #180	; 0xb4
    1d74:	sub	r6, fp, #60	; 0x3c
    1d78:	mov	r8, r2
    1d7c:	str	r1, [sp, #32]
    1d80:	sub	r1, fp, #64	; 0x40
    1d84:	mov	r2, r6
    1d88:	bl	0 <coda_cursor_get_array_dim>
    1d8c:	mvn	r7, #0
    1d90:	cmp	r0, #0
    1d94:	bne	2238 <transpose_array+0x4d0>
    1d98:	ldr	r5, [fp, #-64]	; 0xffffffc0
    1d9c:	mov	r7, #0
    1da0:	cmp	r5, #2
    1da4:	blt	2238 <transpose_array+0x4d0>
    1da8:	add	r9, sp, #72	; 0x48
    1dac:	lsl	r2, r5, #2
    1db0:	mov	r1, #0
    1db4:	mov	r7, #0
    1db8:	mov	r0, r9
    1dbc:	bl	0 <memset>
    1dc0:	mov	r4, #1
    1dc4:	cmp	r5, #4
    1dc8:	bcc	1e20 <transpose_array+0xb8>
    1dcc:	add	r0, r6, r5, lsl #2
    1dd0:	bic	r7, r5, #3
    1dd4:	vmov.i32	q8, #1	; 0x00000001
    1dd8:	add	r1, sp, #36	; 0x24
    1ddc:	mvn	r2, #15
    1de0:	sub	r0, r0, #16
    1de4:	mov	r3, r7
    1de8:	vld1.32	{d18-d19}, [r0], r2
    1dec:	vld1.32	{d20-d21}, [r6]!
    1df0:	subs	r3, r3, #4
    1df4:	vrev64.32	q9, q9
    1df8:	vmul.i32	q8, q10, q8
    1dfc:	vext.8	q9, q9, q9, #8
    1e00:	vst1.32	{d18-d19}, [r1]!
    1e04:	bne	1de8 <transpose_array+0x80>
    1e08:	vext.8	q9, q8, q8, #8
    1e0c:	cmp	r5, r7
    1e10:	vmul.i32	q0, q8, q9
    1e14:	vmul.i32	q8, q0, d0[1]
    1e18:	vmov.32	r4, d16[0]
    1e1c:	beq	1e54 <transpose_array+0xec>
    1e20:	sub	r0, r5, #1
    1e24:	lsl	r1, r7, #2
    1e28:	sub	r2, fp, #60	; 0x3c
    1e2c:	add	r3, sp, #36	; 0x24
    1e30:	sub	r0, r0, r7
    1e34:	ldr	r7, [r2, r0, lsl #2]
    1e38:	sub	r0, r0, #1
    1e3c:	cmn	r0, #1
    1e40:	str	r7, [r3, r1]
    1e44:	ldr	r7, [r2, r1]
    1e48:	add	r1, r1, #4
    1e4c:	mul	r4, r7, r4
    1e50:	bne	1e34 <transpose_array+0xcc>
    1e54:	mov	r7, #0
    1e58:	cmp	r4, #2
    1e5c:	blt	2238 <transpose_array+0x4d0>
    1e60:	add	r7, sp, #36	; 0x24
    1e64:	mov	r0, #1
    1e68:	sub	sl, fp, #100	; 0x64
    1e6c:	cmp	r5, #1
    1e70:	str	r0, [r7, r5, lsl #2]
    1e74:	str	r0, [sl, r5, lsl #2]
    1e78:	blt	1eb0 <transpose_array+0x148>
    1e7c:	add	r1, sl, r5, lsl #2
    1e80:	str	r0, [r1, #-4]
    1e84:	beq	1eb0 <transpose_array+0x148>
    1e88:	sub	r0, r7, #4
    1e8c:	sub	r1, sl, #8
    1e90:	mov	r2, #1
    1e94:	mov	r3, r5
    1e98:	ldr	r6, [r0, r3, lsl #2]
    1e9c:	mul	r2, r6, r2
    1ea0:	str	r2, [r1, r3, lsl #2]
    1ea4:	sub	r3, r3, #1
    1ea8:	cmp	r3, #1
    1eac:	bgt	1e98 <transpose_array+0x130>
    1eb0:	mov	r0, #0
    1eb4:	str	r0, [r9, r5, lsl #2]
    1eb8:	str	r0, [r7, r5, lsl #2]
    1ebc:	mul	r5, r4, r8
    1ec0:	mov	r0, r5
    1ec4:	bl	0 <malloc>
    1ec8:	cmp	r0, #0
    1ecc:	str	r0, [sp, #28]
    1ed0:	beq	1fc4 <transpose_array+0x25c>
    1ed4:	sub	r0, r8, #1
    1ed8:	str	r5, [sp, #8]
    1edc:	cmp	r0, #7
    1ee0:	bhi	2244 <transpose_array+0x4dc>
    1ee4:	add	r1, pc, #0
    1ee8:	ldr	pc, [r1, r0, lsl #2]
    1eec:	.word	0x00001f0c
    1ef0:	.word	0x000020ac
    1ef4:	.word	0x00002244
    1ef8:	.word	0x00002168
    1efc:	.word	0x00002244
    1f00:	.word	0x00002244
    1f04:	.word	0x00002244
    1f08:	.word	0x00001ff0
    1f0c:	cmp	r4, #1
    1f10:	blt	2218 <transpose_array+0x4b0>
    1f14:	add	r0, sl, #4
    1f18:	ldr	ip, [sp, #36]	; 0x24
    1f1c:	ldr	lr, [fp, #-100]	; 0xffffff9c
    1f20:	mov	r3, #0
    1f24:	mov	r1, #0
    1f28:	str	r0, [sp, #20]
    1f2c:	add	r0, r7, #4
    1f30:	str	r0, [sp, #16]
    1f34:	orr	r0, r9, #4
    1f38:	str	r0, [sp, #12]
    1f3c:	mov	r0, #0
    1f40:	str	ip, [sp, #24]
    1f44:	ldr	r2, [sp, #32]
    1f48:	ldr	r7, [sp, #28]
    1f4c:	ldrb	r2, [r2, r0]
    1f50:	strb	r2, [r7, r1]
    1f54:	ldr	r2, [sp, #72]	; 0x48
    1f58:	add	r1, lr, r1
    1f5c:	add	r2, r2, #1
    1f60:	cmp	r2, ip
    1f64:	str	r2, [sp, #72]	; 0x48
    1f68:	bne	1fb0 <transpose_array+0x248>
    1f6c:	ldr	r2, [sp, #20]
    1f70:	ldr	r6, [sp, #16]
    1f74:	ldr	r8, [sp, #12]
    1f78:	mov	r5, lr
    1f7c:	ldr	r9, [r2], #4
    1f80:	str	r3, [r8, #-4]
    1f84:	ldr	sl, [r8]
    1f88:	add	r1, r9, r1
    1f8c:	mls	r1, r5, ip, r1
    1f90:	ldr	r5, [r6], #4
    1f94:	add	r7, sl, #1
    1f98:	str	r7, [r8]
    1f9c:	add	r8, r8, #4
    1fa0:	mov	ip, r7
    1fa4:	cmp	r7, r5
    1fa8:	mov	r5, r9
    1fac:	beq	1f7c <transpose_array+0x214>
    1fb0:	ldr	ip, [sp, #24]
    1fb4:	add	r0, r0, #1
    1fb8:	cmp	r0, r4
    1fbc:	bne	1f44 <transpose_array+0x1dc>
    1fc0:	b	2218 <transpose_array+0x4b0>
    1fc4:	movw	r1, #0
    1fc8:	movw	r3, #0
    1fcc:	mov	r0, #93	; 0x5d
    1fd0:	mov	r2, r5
    1fd4:	mvn	r7, #0
    1fd8:	str	r0, [sp]
    1fdc:	movt	r1, #0
    1fe0:	movt	r3, #0
    1fe4:	mvn	r0, #0
    1fe8:	bl	0 <coda_set_error>
    1fec:	b	2238 <transpose_array+0x4d0>
    1ff0:	cmp	r4, #1
    1ff4:	blt	2218 <transpose_array+0x4b0>
    1ff8:	ldr	ip, [sp, #36]	; 0x24
    1ffc:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2000:	add	r0, sl, #4
    2004:	mov	sl, #0
    2008:	mov	r1, #0
    200c:	str	r0, [sp, #24]
    2010:	add	r0, r7, #4
    2014:	str	r0, [sp, #20]
    2018:	orr	r0, r9, #4
    201c:	mov	r9, #0
    2020:	str	r0, [sp, #16]
    2024:	ldr	r2, [sp, #32]
    2028:	ldr	r6, [sp, #28]
    202c:	ldr	r5, [r2, sl, lsl #3]!
    2030:	ldr	r2, [r2, #4]
    2034:	str	r5, [r6, r1, lsl #3]!
    2038:	add	r1, lr, r1
    203c:	str	r2, [r6, #4]
    2040:	ldr	r2, [sp, #72]	; 0x48
    2044:	add	r2, r2, #1
    2048:	cmp	r2, ip
    204c:	str	r2, [sp, #72]	; 0x48
    2050:	bne	209c <transpose_array+0x334>
    2054:	ldr	r2, [sp, #24]
    2058:	ldr	r6, [sp, #20]
    205c:	ldr	r8, [sp, #16]
    2060:	mov	r5, lr
    2064:	mov	r7, ip
    2068:	ldr	r3, [r2], #4
    206c:	str	r9, [r8, #-4]
    2070:	ldr	r0, [r8]
    2074:	add	r1, r3, r1
    2078:	mls	r1, r5, r7, r1
    207c:	ldr	r5, [r6], #4
    2080:	add	r0, r0, #1
    2084:	str	r0, [r8]
    2088:	add	r8, r8, #4
    208c:	mov	r7, r0
    2090:	cmp	r0, r5
    2094:	mov	r5, r3
    2098:	beq	2068 <transpose_array+0x300>
    209c:	add	sl, sl, #1
    20a0:	cmp	sl, r4
    20a4:	bne	2024 <transpose_array+0x2bc>
    20a8:	b	2218 <transpose_array+0x4b0>
    20ac:	cmp	r4, #1
    20b0:	blt	2218 <transpose_array+0x4b0>
    20b4:	ldr	ip, [sp, #36]	; 0x24
    20b8:	ldr	lr, [fp, #-100]	; 0xffffff9c
    20bc:	add	r0, sl, #4
    20c0:	mov	sl, #0
    20c4:	mov	r1, #0
    20c8:	str	r0, [sp, #24]
    20cc:	add	r0, r7, #4
    20d0:	str	r0, [sp, #20]
    20d4:	orr	r0, r9, #4
    20d8:	mov	r9, #0
    20dc:	str	r0, [sp, #16]
    20e0:	ldr	r0, [sp, #28]
    20e4:	add	r2, r0, r1, lsl #1
    20e8:	ldr	r0, [sp, #32]
    20ec:	add	r1, lr, r1
    20f0:	add	r5, r0, sl, lsl #1
    20f4:	ldrh	r5, [r5]
    20f8:	strh	r5, [r2]
    20fc:	ldr	r2, [sp, #72]	; 0x48
    2100:	add	r2, r2, #1
    2104:	cmp	r2, ip
    2108:	str	r2, [sp, #72]	; 0x48
    210c:	bne	2158 <transpose_array+0x3f0>
    2110:	ldr	r2, [sp, #24]
    2114:	ldr	r6, [sp, #20]
    2118:	ldr	r8, [sp, #16]
    211c:	mov	r5, lr
    2120:	mov	r7, ip
    2124:	ldr	r3, [r2], #4
    2128:	str	r9, [r8, #-4]
    212c:	ldr	r0, [r8]
    2130:	add	r1, r3, r1
    2134:	mls	r1, r5, r7, r1
    2138:	ldr	r5, [r6], #4
    213c:	add	r0, r0, #1
    2140:	str	r0, [r8]
    2144:	add	r8, r8, #4
    2148:	mov	r7, r0
    214c:	cmp	r0, r5
    2150:	mov	r5, r3
    2154:	beq	2124 <transpose_array+0x3bc>
    2158:	add	sl, sl, #1
    215c:	cmp	sl, r4
    2160:	bne	20e0 <transpose_array+0x378>
    2164:	b	2218 <transpose_array+0x4b0>
    2168:	cmp	r4, #1
    216c:	blt	2218 <transpose_array+0x4b0>
    2170:	ldr	ip, [sp, #36]	; 0x24
    2174:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2178:	add	r0, sl, #4
    217c:	mov	sl, #0
    2180:	mov	r1, #0
    2184:	str	r0, [sp, #24]
    2188:	add	r0, r7, #4
    218c:	str	r0, [sp, #20]
    2190:	orr	r0, r9, #4
    2194:	mov	r9, #0
    2198:	str	r0, [sp, #16]
    219c:	ldr	r0, [sp, #32]
    21a0:	ldr	r2, [r0, sl, lsl #2]
    21a4:	ldr	r0, [sp, #28]
    21a8:	str	r2, [r0, r1, lsl #2]
    21ac:	ldr	r2, [sp, #72]	; 0x48
    21b0:	add	r1, lr, r1
    21b4:	add	r2, r2, #1
    21b8:	cmp	r2, ip
    21bc:	str	r2, [sp, #72]	; 0x48
    21c0:	bne	220c <transpose_array+0x4a4>
    21c4:	ldr	r2, [sp, #24]
    21c8:	ldr	r6, [sp, #20]
    21cc:	ldr	r8, [sp, #16]
    21d0:	mov	r5, lr
    21d4:	mov	r7, ip
    21d8:	ldr	r3, [r2], #4
    21dc:	str	r9, [r8, #-4]
    21e0:	ldr	r0, [r8]
    21e4:	add	r1, r3, r1
    21e8:	mls	r1, r5, r7, r1
    21ec:	ldr	r5, [r6], #4
    21f0:	add	r0, r0, #1
    21f4:	str	r0, [r8]
    21f8:	add	r8, r8, #4
    21fc:	mov	r7, r0
    2200:	cmp	r0, r5
    2204:	mov	r5, r3
    2208:	beq	21d8 <transpose_array+0x470>
    220c:	add	sl, sl, #1
    2210:	cmp	sl, r4
    2214:	bne	219c <transpose_array+0x434>
    2218:	ldr	r4, [sp, #28]
    221c:	ldr	r0, [sp, #32]
    2220:	ldr	r2, [sp, #8]
    2224:	mov	r1, r4
    2228:	bl	0 <memcpy>
    222c:	mov	r0, r4
    2230:	bl	0 <free>
    2234:	mov	r7, #0
    2238:	mov	r0, r7
    223c:	sub	sp, fp, #28
    2240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2244:	movw	r0, #0
    2248:	movw	r1, #0
    224c:	movw	r3, #0
    2250:	mov	r2, #172	; 0xac
    2254:	movt	r0, #0
    2258:	movt	r1, #0
    225c:	movt	r3, #0
    2260:	bl	0 <__assert_fail>

00002264 <coda_bin_cursor_read_uint8_array>:
    2264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2268:	add	fp, sp, #28
    226c:	sub	sp, sp, #564	; 0x234
    2270:	mov	r5, r0
    2274:	ldr	r0, [r0, #4]
    2278:	mov	sl, r1
    227c:	mov	r8, r2
    2280:	add	r0, r5, r0, lsl #4
    2284:	ldr	r0, [r0, #-8]
    2288:	ldr	r1, [r0]
    228c:	cmp	r1, #99	; 0x63
    2290:	ldrhi	r0, [r0, #4]
    2294:	ldr	r0, [r0, #40]	; 0x28
    2298:	ldr	r0, [r0]
    229c:	cmp	r0, #0
    22a0:	beq	22d0 <coda_bin_cursor_read_uint8_array+0x6c>
    22a4:	cmp	r0, #1
    22a8:	bne	2414 <coda_bin_cursor_read_uint8_array+0x1b0>
    22ac:	movw	r1, #0
    22b0:	mov	r0, r5
    22b4:	mov	r2, sl
    22b8:	mov	r3, #1
    22bc:	str	r8, [sp]
    22c0:	movt	r1, #0
    22c4:	bl	1b00 <read_array>
    22c8:	sub	sp, fp, #28
    22cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22d0:	add	r7, sp, #8
    22d4:	add	r1, sp, #4
    22d8:	mov	r0, r5
    22dc:	mov	r2, r7
    22e0:	bl	0 <coda_cursor_get_array_dim>
    22e4:	cmp	r0, #0
    22e8:	bne	2394 <coda_bin_cursor_read_uint8_array+0x130>
    22ec:	add	r0, sp, #40	; 0x28
    22f0:	mov	r1, r5
    22f4:	mov	r2, #520	; 0x208
    22f8:	bl	0 <memcpy>
    22fc:	ldr	r0, [sp, #4]
    2300:	cmp	r0, #1
    2304:	blt	231c <coda_bin_cursor_read_uint8_array+0xb8>
    2308:	cmp	r0, #4
    230c:	bcs	2324 <coda_bin_cursor_read_uint8_array+0xc0>
    2310:	mov	r6, #1
    2314:	mov	r1, #0
    2318:	b	2358 <coda_bin_cursor_read_uint8_array+0xf4>
    231c:	mov	r6, #1
    2320:	b	237c <coda_bin_cursor_read_uint8_array+0x118>
    2324:	bic	r1, r0, #3
    2328:	vmov.i32	q8, #1	; 0x00000001
    232c:	mov	r2, r1
    2330:	vld1.32	{d18-d19}, [r7]!
    2334:	subs	r2, r2, #4
    2338:	vmul.i32	q8, q9, q8
    233c:	bne	2330 <coda_bin_cursor_read_uint8_array+0xcc>
    2340:	vext.8	q9, q8, q8, #8
    2344:	cmp	r0, r1
    2348:	vmul.i32	q0, q8, q9
    234c:	vmul.i32	q8, q0, d0[1]
    2350:	vmov.32	r6, d16[0]
    2354:	beq	2374 <coda_bin_cursor_read_uint8_array+0x110>
    2358:	add	r2, sp, #8
    235c:	sub	r0, r0, r1
    2360:	add	r2, r2, r1, lsl #2
    2364:	ldr	r1, [r2], #4
    2368:	subs	r0, r0, #1
    236c:	mul	r6, r1, r6
    2370:	bne	2364 <coda_bin_cursor_read_uint8_array+0x100>
    2374:	cmp	r6, #1
    2378:	blt	23e0 <coda_bin_cursor_read_uint8_array+0x17c>
    237c:	add	r0, sp, #40	; 0x28
    2380:	mov	r1, #0
    2384:	mov	r7, #0
    2388:	bl	0 <coda_cursor_goto_array_element_by_index>
    238c:	cmp	r0, #0
    2390:	beq	23a0 <coda_bin_cursor_read_uint8_array+0x13c>
    2394:	mvn	r0, #0
    2398:	sub	sp, fp, #28
    239c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23a0:	sub	r4, r6, #1
    23a4:	add	r9, sp, #40	; 0x28
    23a8:	add	r1, sl, r7
    23ac:	mov	r0, r9
    23b0:	bl	0 <coda_ascii_cursor_read_uint8>
    23b4:	cmp	r0, #0
    23b8:	bne	2394 <coda_bin_cursor_read_uint8_array+0x130>
    23bc:	cmp	r7, r4
    23c0:	bge	23d4 <coda_bin_cursor_read_uint8_array+0x170>
    23c4:	mov	r0, r9
    23c8:	bl	0 <coda_cursor_goto_next_array_element>
    23cc:	cmp	r0, #0
    23d0:	bne	2394 <coda_bin_cursor_read_uint8_array+0x130>
    23d4:	add	r7, r7, #1
    23d8:	cmp	r7, r6
    23dc:	blt	23a8 <coda_bin_cursor_read_uint8_array+0x144>
    23e0:	cmp	r8, #0
    23e4:	beq	2408 <coda_bin_cursor_read_uint8_array+0x1a4>
    23e8:	mov	r0, r5
    23ec:	mov	r1, sl
    23f0:	mov	r2, #1
    23f4:	bl	1d68 <transpose_array>
    23f8:	mov	r1, r0
    23fc:	mvn	r0, #0
    2400:	cmp	r1, #0
    2404:	bne	2398 <coda_bin_cursor_read_uint8_array+0x134>
    2408:	mov	r0, #0
    240c:	sub	sp, fp, #28
    2410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2414:	movw	r0, #0
    2418:	movw	r1, #0
    241c:	movw	r3, #0
    2420:	mov	r2, #932	; 0x3a4
    2424:	movt	r0, #0
    2428:	movt	r1, #0
    242c:	movt	r3, #0
    2430:	bl	0 <__assert_fail>

00002434 <coda_bin_cursor_read_int16_array>:
    2434:	push	{r4, r5, r6, r7, fp, lr}
    2438:	add	fp, sp, #16
    243c:	sub	sp, sp, #8
    2440:	mov	r5, r0
    2444:	ldr	r0, [r0, #4]
    2448:	mov	r4, r1
    244c:	mov	r6, r2
    2450:	add	r0, r5, r0, lsl #4
    2454:	ldr	r0, [r0, #-8]
    2458:	ldr	r1, [r0]
    245c:	cmp	r1, #99	; 0x63
    2460:	ldrhi	r0, [r0, #4]
    2464:	ldr	r0, [r0, #40]	; 0x28
    2468:	ldr	r0, [r0]
    246c:	cmp	r0, #0
    2470:	beq	24a0 <coda_bin_cursor_read_int16_array+0x6c>
    2474:	cmp	r0, #1
    2478:	bne	2500 <coda_bin_cursor_read_int16_array+0xcc>
    247c:	movw	r1, #0
    2480:	mov	r0, r5
    2484:	mov	r2, r4
    2488:	mov	r3, #2
    248c:	str	r6, [sp]
    2490:	movt	r1, #0
    2494:	bl	1b00 <read_array>
    2498:	sub	sp, fp, #16
    249c:	pop	{r4, r5, r6, r7, fp, pc}
    24a0:	movw	r1, #0
    24a4:	mov	r0, #0
    24a8:	mov	r2, r4
    24ac:	mov	r3, #2
    24b0:	str	r0, [sp]
    24b4:	movt	r1, #0
    24b8:	mov	r0, r5
    24bc:	bl	1b00 <read_array>
    24c0:	mvn	r7, #0
    24c4:	cmp	r0, #0
    24c8:	bne	24f4 <coda_bin_cursor_read_int16_array+0xc0>
    24cc:	cmp	r6, #0
    24d0:	beq	24f0 <coda_bin_cursor_read_int16_array+0xbc>
    24d4:	mov	r0, r5
    24d8:	mov	r1, r4
    24dc:	mov	r2, #2
    24e0:	bl	1d68 <transpose_array>
    24e4:	cmp	r0, #0
    24e8:	moveq	r7, #0
    24ec:	b	24f4 <coda_bin_cursor_read_int16_array+0xc0>
    24f0:	mov	r7, #0
    24f4:	mov	r0, r7
    24f8:	sub	sp, fp, #16
    24fc:	pop	{r4, r5, r6, r7, fp, pc}
    2500:	movw	r0, #0
    2504:	movw	r1, #0
    2508:	movw	r3, #0
    250c:	movw	r2, #958	; 0x3be
    2510:	movt	r0, #0
    2514:	movt	r1, #0
    2518:	movt	r3, #0
    251c:	bl	0 <__assert_fail>

00002520 <coda_bin_cursor_read_uint16_array>:
    2520:	push	{r4, r5, r6, r7, fp, lr}
    2524:	add	fp, sp, #16
    2528:	sub	sp, sp, #8
    252c:	mov	r5, r0
    2530:	ldr	r0, [r0, #4]
    2534:	mov	r4, r1
    2538:	mov	r6, r2
    253c:	add	r0, r5, r0, lsl #4
    2540:	ldr	r0, [r0, #-8]
    2544:	ldr	r1, [r0]
    2548:	cmp	r1, #99	; 0x63
    254c:	ldrhi	r0, [r0, #4]
    2550:	ldr	r0, [r0, #40]	; 0x28
    2554:	ldr	r0, [r0]
    2558:	cmp	r0, #0
    255c:	beq	258c <coda_bin_cursor_read_uint16_array+0x6c>
    2560:	cmp	r0, #1
    2564:	bne	25ec <coda_bin_cursor_read_uint16_array+0xcc>
    2568:	movw	r1, #0
    256c:	mov	r0, r5
    2570:	mov	r2, r4
    2574:	mov	r3, #2
    2578:	str	r6, [sp]
    257c:	movt	r1, #0
    2580:	bl	1b00 <read_array>
    2584:	sub	sp, fp, #16
    2588:	pop	{r4, r5, r6, r7, fp, pc}
    258c:	movw	r1, #0
    2590:	mov	r0, #0
    2594:	mov	r2, r4
    2598:	mov	r3, #2
    259c:	str	r0, [sp]
    25a0:	movt	r1, #0
    25a4:	mov	r0, r5
    25a8:	bl	1b00 <read_array>
    25ac:	mvn	r7, #0
    25b0:	cmp	r0, #0
    25b4:	bne	25e0 <coda_bin_cursor_read_uint16_array+0xc0>
    25b8:	cmp	r6, #0
    25bc:	beq	25dc <coda_bin_cursor_read_uint16_array+0xbc>
    25c0:	mov	r0, r5
    25c4:	mov	r1, r4
    25c8:	mov	r2, #2
    25cc:	bl	1d68 <transpose_array>
    25d0:	cmp	r0, #0
    25d4:	moveq	r7, #0
    25d8:	b	25e0 <coda_bin_cursor_read_uint16_array+0xc0>
    25dc:	mov	r7, #0
    25e0:	mov	r0, r7
    25e4:	sub	sp, fp, #16
    25e8:	pop	{r4, r5, r6, r7, fp, pc}
    25ec:	movw	r0, #0
    25f0:	movw	r1, #0
    25f4:	movw	r3, #0
    25f8:	mov	r2, #984	; 0x3d8
    25fc:	movt	r0, #0
    2600:	movt	r1, #0
    2604:	movt	r3, #0
    2608:	bl	0 <__assert_fail>

0000260c <coda_bin_cursor_read_int32_array>:
    260c:	push	{r4, r5, r6, r7, fp, lr}
    2610:	add	fp, sp, #16
    2614:	sub	sp, sp, #8
    2618:	mov	r5, r0
    261c:	ldr	r0, [r0, #4]
    2620:	mov	r4, r1
    2624:	mov	r6, r2
    2628:	add	r0, r5, r0, lsl #4
    262c:	ldr	r0, [r0, #-8]
    2630:	ldr	r1, [r0]
    2634:	cmp	r1, #99	; 0x63
    2638:	ldrhi	r0, [r0, #4]
    263c:	ldr	r0, [r0, #40]	; 0x28
    2640:	ldr	r0, [r0]
    2644:	cmp	r0, #0
    2648:	beq	2678 <coda_bin_cursor_read_int32_array+0x6c>
    264c:	cmp	r0, #1
    2650:	bne	26d8 <coda_bin_cursor_read_int32_array+0xcc>
    2654:	movw	r1, #0
    2658:	mov	r0, r5
    265c:	mov	r2, r4
    2660:	mov	r3, #4
    2664:	str	r6, [sp]
    2668:	movt	r1, #0
    266c:	bl	1b00 <read_array>
    2670:	sub	sp, fp, #16
    2674:	pop	{r4, r5, r6, r7, fp, pc}
    2678:	movw	r1, #0
    267c:	mov	r0, #0
    2680:	mov	r2, r4
    2684:	mov	r3, #4
    2688:	str	r0, [sp]
    268c:	movt	r1, #0
    2690:	mov	r0, r5
    2694:	bl	1b00 <read_array>
    2698:	mvn	r7, #0
    269c:	cmp	r0, #0
    26a0:	bne	26cc <coda_bin_cursor_read_int32_array+0xc0>
    26a4:	cmp	r6, #0
    26a8:	beq	26c8 <coda_bin_cursor_read_int32_array+0xbc>
    26ac:	mov	r0, r5
    26b0:	mov	r1, r4
    26b4:	mov	r2, #4
    26b8:	bl	1d68 <transpose_array>
    26bc:	cmp	r0, #0
    26c0:	moveq	r7, #0
    26c4:	b	26cc <coda_bin_cursor_read_int32_array+0xc0>
    26c8:	mov	r7, #0
    26cc:	mov	r0, r7
    26d0:	sub	sp, fp, #16
    26d4:	pop	{r4, r5, r6, r7, fp, pc}
    26d8:	movw	r0, #0
    26dc:	movw	r1, #0
    26e0:	movw	r3, #0
    26e4:	movw	r2, #1010	; 0x3f2
    26e8:	movt	r0, #0
    26ec:	movt	r1, #0
    26f0:	movt	r3, #0
    26f4:	bl	0 <__assert_fail>

000026f8 <coda_bin_cursor_read_uint32_array>:
    26f8:	push	{r4, r5, r6, r7, fp, lr}
    26fc:	add	fp, sp, #16
    2700:	sub	sp, sp, #8
    2704:	mov	r5, r0
    2708:	ldr	r0, [r0, #4]
    270c:	mov	r4, r1
    2710:	mov	r6, r2
    2714:	add	r0, r5, r0, lsl #4
    2718:	ldr	r0, [r0, #-8]
    271c:	ldr	r1, [r0]
    2720:	cmp	r1, #99	; 0x63
    2724:	ldrhi	r0, [r0, #4]
    2728:	ldr	r0, [r0, #40]	; 0x28
    272c:	ldr	r0, [r0]
    2730:	cmp	r0, #0
    2734:	beq	2764 <coda_bin_cursor_read_uint32_array+0x6c>
    2738:	cmp	r0, #1
    273c:	bne	27c4 <coda_bin_cursor_read_uint32_array+0xcc>
    2740:	movw	r1, #0
    2744:	mov	r0, r5
    2748:	mov	r2, r4
    274c:	mov	r3, #4
    2750:	str	r6, [sp]
    2754:	movt	r1, #0
    2758:	bl	1b00 <read_array>
    275c:	sub	sp, fp, #16
    2760:	pop	{r4, r5, r6, r7, fp, pc}
    2764:	movw	r1, #0
    2768:	mov	r0, #0
    276c:	mov	r2, r4
    2770:	mov	r3, #4
    2774:	str	r0, [sp]
    2778:	movt	r1, #0
    277c:	mov	r0, r5
    2780:	bl	1b00 <read_array>
    2784:	mvn	r7, #0
    2788:	cmp	r0, #0
    278c:	bne	27b8 <coda_bin_cursor_read_uint32_array+0xc0>
    2790:	cmp	r6, #0
    2794:	beq	27b4 <coda_bin_cursor_read_uint32_array+0xbc>
    2798:	mov	r0, r5
    279c:	mov	r1, r4
    27a0:	mov	r2, #4
    27a4:	bl	1d68 <transpose_array>
    27a8:	cmp	r0, #0
    27ac:	moveq	r7, #0
    27b0:	b	27b8 <coda_bin_cursor_read_uint32_array+0xc0>
    27b4:	mov	r7, #0
    27b8:	mov	r0, r7
    27bc:	sub	sp, fp, #16
    27c0:	pop	{r4, r5, r6, r7, fp, pc}
    27c4:	movw	r0, #0
    27c8:	movw	r1, #0
    27cc:	movw	r3, #0
    27d0:	movw	r2, #1036	; 0x40c
    27d4:	movt	r0, #0
    27d8:	movt	r1, #0
    27dc:	movt	r3, #0
    27e0:	bl	0 <__assert_fail>

000027e4 <coda_bin_cursor_read_int64_array>:
    27e4:	push	{r4, r5, r6, r7, fp, lr}
    27e8:	add	fp, sp, #16
    27ec:	sub	sp, sp, #8
    27f0:	mov	r5, r0
    27f4:	ldr	r0, [r0, #4]
    27f8:	mov	r4, r1
    27fc:	mov	r6, r2
    2800:	add	r0, r5, r0, lsl #4
    2804:	ldr	r0, [r0, #-8]
    2808:	ldr	r1, [r0]
    280c:	cmp	r1, #99	; 0x63
    2810:	ldrhi	r0, [r0, #4]
    2814:	ldr	r0, [r0, #40]	; 0x28
    2818:	ldr	r0, [r0]
    281c:	cmp	r0, #0
    2820:	beq	2850 <coda_bin_cursor_read_int64_array+0x6c>
    2824:	cmp	r0, #1
    2828:	bne	28b0 <coda_bin_cursor_read_int64_array+0xcc>
    282c:	movw	r1, #0
    2830:	mov	r0, r5
    2834:	mov	r2, r4
    2838:	mov	r3, #8
    283c:	str	r6, [sp]
    2840:	movt	r1, #0
    2844:	bl	1b00 <read_array>
    2848:	sub	sp, fp, #16
    284c:	pop	{r4, r5, r6, r7, fp, pc}
    2850:	movw	r1, #0
    2854:	mov	r0, #0
    2858:	mov	r2, r4
    285c:	mov	r3, #8
    2860:	str	r0, [sp]
    2864:	movt	r1, #0
    2868:	mov	r0, r5
    286c:	bl	1b00 <read_array>
    2870:	mvn	r7, #0
    2874:	cmp	r0, #0
    2878:	bne	28a4 <coda_bin_cursor_read_int64_array+0xc0>
    287c:	cmp	r6, #0
    2880:	beq	28a0 <coda_bin_cursor_read_int64_array+0xbc>
    2884:	mov	r0, r5
    2888:	mov	r1, r4
    288c:	mov	r2, #8
    2890:	bl	1d68 <transpose_array>
    2894:	cmp	r0, #0
    2898:	moveq	r7, #0
    289c:	b	28a4 <coda_bin_cursor_read_int64_array+0xc0>
    28a0:	mov	r7, #0
    28a4:	mov	r0, r7
    28a8:	sub	sp, fp, #16
    28ac:	pop	{r4, r5, r6, r7, fp, pc}
    28b0:	movw	r0, #0
    28b4:	movw	r1, #0
    28b8:	movw	r3, #0
    28bc:	movw	r2, #1062	; 0x426
    28c0:	movt	r0, #0
    28c4:	movt	r1, #0
    28c8:	movt	r3, #0
    28cc:	bl	0 <__assert_fail>

000028d0 <coda_bin_cursor_read_uint64_array>:
    28d0:	push	{r4, r5, r6, r7, fp, lr}
    28d4:	add	fp, sp, #16
    28d8:	sub	sp, sp, #8
    28dc:	mov	r5, r0
    28e0:	ldr	r0, [r0, #4]
    28e4:	mov	r4, r1
    28e8:	mov	r6, r2
    28ec:	add	r0, r5, r0, lsl #4
    28f0:	ldr	r0, [r0, #-8]
    28f4:	ldr	r1, [r0]
    28f8:	cmp	r1, #99	; 0x63
    28fc:	ldrhi	r0, [r0, #4]
    2900:	ldr	r0, [r0, #40]	; 0x28
    2904:	ldr	r0, [r0]
    2908:	cmp	r0, #0
    290c:	beq	293c <coda_bin_cursor_read_uint64_array+0x6c>
    2910:	cmp	r0, #1
    2914:	bne	299c <coda_bin_cursor_read_uint64_array+0xcc>
    2918:	movw	r1, #0
    291c:	mov	r0, r5
    2920:	mov	r2, r4
    2924:	mov	r3, #8
    2928:	str	r6, [sp]
    292c:	movt	r1, #0
    2930:	bl	1b00 <read_array>
    2934:	sub	sp, fp, #16
    2938:	pop	{r4, r5, r6, r7, fp, pc}
    293c:	movw	r1, #0
    2940:	mov	r0, #0
    2944:	mov	r2, r4
    2948:	mov	r3, #8
    294c:	str	r0, [sp]
    2950:	movt	r1, #0
    2954:	mov	r0, r5
    2958:	bl	1b00 <read_array>
    295c:	mvn	r7, #0
    2960:	cmp	r0, #0
    2964:	bne	2990 <coda_bin_cursor_read_uint64_array+0xc0>
    2968:	cmp	r6, #0
    296c:	beq	298c <coda_bin_cursor_read_uint64_array+0xbc>
    2970:	mov	r0, r5
    2974:	mov	r1, r4
    2978:	mov	r2, #8
    297c:	bl	1d68 <transpose_array>
    2980:	cmp	r0, #0
    2984:	moveq	r7, #0
    2988:	b	2990 <coda_bin_cursor_read_uint64_array+0xc0>
    298c:	mov	r7, #0
    2990:	mov	r0, r7
    2994:	sub	sp, fp, #16
    2998:	pop	{r4, r5, r6, r7, fp, pc}
    299c:	movw	r0, #0
    29a0:	movw	r1, #0
    29a4:	movw	r3, #0
    29a8:	mov	r2, #1088	; 0x440
    29ac:	movt	r0, #0
    29b0:	movt	r1, #0
    29b4:	movt	r3, #0
    29b8:	bl	0 <__assert_fail>

000029bc <coda_bin_cursor_read_float_array>:
    29bc:	push	{r4, r5, r6, r7, fp, lr}
    29c0:	add	fp, sp, #16
    29c4:	sub	sp, sp, #8
    29c8:	mov	r5, r0
    29cc:	ldr	r0, [r0, #4]
    29d0:	mov	r4, r1
    29d4:	mov	r6, r2
    29d8:	add	r0, r5, r0, lsl #4
    29dc:	ldr	r0, [r0, #-8]
    29e0:	ldr	r1, [r0]
    29e4:	cmp	r1, #99	; 0x63
    29e8:	ldrhi	r0, [r0, #4]
    29ec:	ldr	r0, [r0, #40]	; 0x28
    29f0:	ldr	r0, [r0]
    29f4:	cmp	r0, #0
    29f8:	beq	2a28 <coda_bin_cursor_read_float_array+0x6c>
    29fc:	cmp	r0, #1
    2a00:	bne	2a88 <coda_bin_cursor_read_float_array+0xcc>
    2a04:	movw	r1, #0
    2a08:	mov	r0, r5
    2a0c:	mov	r2, r4
    2a10:	mov	r3, #4
    2a14:	str	r6, [sp]
    2a18:	movt	r1, #0
    2a1c:	bl	1b00 <read_array>
    2a20:	sub	sp, fp, #16
    2a24:	pop	{r4, r5, r6, r7, fp, pc}
    2a28:	movw	r1, #0
    2a2c:	mov	r0, #0
    2a30:	mov	r2, r4
    2a34:	mov	r3, #4
    2a38:	str	r0, [sp]
    2a3c:	movt	r1, #0
    2a40:	mov	r0, r5
    2a44:	bl	1b00 <read_array>
    2a48:	mvn	r7, #0
    2a4c:	cmp	r0, #0
    2a50:	bne	2a7c <coda_bin_cursor_read_float_array+0xc0>
    2a54:	cmp	r6, #0
    2a58:	beq	2a78 <coda_bin_cursor_read_float_array+0xbc>
    2a5c:	mov	r0, r5
    2a60:	mov	r1, r4
    2a64:	mov	r2, #4
    2a68:	bl	1d68 <transpose_array>
    2a6c:	cmp	r0, #0
    2a70:	moveq	r7, #0
    2a74:	b	2a7c <coda_bin_cursor_read_float_array+0xc0>
    2a78:	mov	r7, #0
    2a7c:	mov	r0, r7
    2a80:	sub	sp, fp, #16
    2a84:	pop	{r4, r5, r6, r7, fp, pc}
    2a88:	movw	r0, #0
    2a8c:	movw	r1, #0
    2a90:	movw	r3, #0
    2a94:	movw	r2, #1114	; 0x45a
    2a98:	movt	r0, #0
    2a9c:	movt	r1, #0
    2aa0:	movt	r3, #0
    2aa4:	bl	0 <__assert_fail>

00002aa8 <coda_bin_cursor_read_double_array>:
    2aa8:	push	{r4, r5, r6, r7, fp, lr}
    2aac:	add	fp, sp, #16
    2ab0:	sub	sp, sp, #8
    2ab4:	mov	r5, r0
    2ab8:	ldr	r0, [r0, #4]
    2abc:	mov	r4, r1
    2ac0:	mov	r6, r2
    2ac4:	add	r0, r5, r0, lsl #4
    2ac8:	ldr	r0, [r0, #-8]
    2acc:	ldr	r1, [r0]
    2ad0:	cmp	r1, #99	; 0x63
    2ad4:	ldrhi	r0, [r0, #4]
    2ad8:	ldr	r0, [r0, #40]	; 0x28
    2adc:	ldr	r0, [r0]
    2ae0:	cmp	r0, #0
    2ae4:	beq	2b14 <coda_bin_cursor_read_double_array+0x6c>
    2ae8:	cmp	r0, #1
    2aec:	bne	2b74 <coda_bin_cursor_read_double_array+0xcc>
    2af0:	movw	r1, #0
    2af4:	mov	r0, r5
    2af8:	mov	r2, r4
    2afc:	mov	r3, #8
    2b00:	str	r6, [sp]
    2b04:	movt	r1, #0
    2b08:	bl	1b00 <read_array>
    2b0c:	sub	sp, fp, #16
    2b10:	pop	{r4, r5, r6, r7, fp, pc}
    2b14:	movw	r1, #0
    2b18:	mov	r0, #0
    2b1c:	mov	r2, r4
    2b20:	mov	r3, #8
    2b24:	str	r0, [sp]
    2b28:	movt	r1, #0
    2b2c:	mov	r0, r5
    2b30:	bl	1b00 <read_array>
    2b34:	mvn	r7, #0
    2b38:	cmp	r0, #0
    2b3c:	bne	2b68 <coda_bin_cursor_read_double_array+0xc0>
    2b40:	cmp	r6, #0
    2b44:	beq	2b64 <coda_bin_cursor_read_double_array+0xbc>
    2b48:	mov	r0, r5
    2b4c:	mov	r1, r4
    2b50:	mov	r2, #8
    2b54:	bl	1d68 <transpose_array>
    2b58:	cmp	r0, #0
    2b5c:	moveq	r7, #0
    2b60:	b	2b68 <coda_bin_cursor_read_double_array+0xc0>
    2b64:	mov	r7, #0
    2b68:	mov	r0, r7
    2b6c:	sub	sp, fp, #16
    2b70:	pop	{r4, r5, r6, r7, fp, pc}
    2b74:	movw	r0, #0
    2b78:	movw	r1, #0
    2b7c:	movw	r3, #0
    2b80:	movw	r2, #1140	; 0x474
    2b84:	movt	r0, #0
    2b88:	movt	r1, #0
    2b8c:	movt	r3, #0
    2b90:	bl	0 <__assert_fail>

00002b94 <coda_bin_cursor_read_char_array>:
    2b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b98:	add	fp, sp, #28
    2b9c:	sub	sp, sp, #564	; 0x234
    2ba0:	mov	r5, r0
    2ba4:	ldr	r0, [r0, #4]
    2ba8:	mov	sl, r1
    2bac:	mov	r8, r2
    2bb0:	add	r0, r5, r0, lsl #4
    2bb4:	ldr	r0, [r0, #-8]
    2bb8:	ldr	r1, [r0]
    2bbc:	cmp	r1, #99	; 0x63
    2bc0:	ldrhi	r0, [r0, #4]
    2bc4:	ldr	r0, [r0, #40]	; 0x28
    2bc8:	ldr	r0, [r0]
    2bcc:	cmp	r0, #0
    2bd0:	beq	2c00 <coda_bin_cursor_read_char_array+0x6c>
    2bd4:	cmp	r0, #1
    2bd8:	bne	2d44 <coda_bin_cursor_read_char_array+0x1b0>
    2bdc:	movw	r1, #0
    2be0:	mov	r0, r5
    2be4:	mov	r2, sl
    2be8:	mov	r3, #1
    2bec:	str	r8, [sp]
    2bf0:	movt	r1, #0
    2bf4:	bl	1b00 <read_array>
    2bf8:	sub	sp, fp, #28
    2bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c00:	add	r7, sp, #8
    2c04:	add	r1, sp, #4
    2c08:	mov	r0, r5
    2c0c:	mov	r2, r7
    2c10:	bl	0 <coda_cursor_get_array_dim>
    2c14:	cmp	r0, #0
    2c18:	bne	2cc4 <coda_bin_cursor_read_char_array+0x130>
    2c1c:	add	r0, sp, #40	; 0x28
    2c20:	mov	r1, r5
    2c24:	mov	r2, #520	; 0x208
    2c28:	bl	0 <memcpy>
    2c2c:	ldr	r0, [sp, #4]
    2c30:	cmp	r0, #1
    2c34:	blt	2c4c <coda_bin_cursor_read_char_array+0xb8>
    2c38:	cmp	r0, #4
    2c3c:	bcs	2c54 <coda_bin_cursor_read_char_array+0xc0>
    2c40:	mov	r6, #1
    2c44:	mov	r1, #0
    2c48:	b	2c88 <coda_bin_cursor_read_char_array+0xf4>
    2c4c:	mov	r6, #1
    2c50:	b	2cac <coda_bin_cursor_read_char_array+0x118>
    2c54:	bic	r1, r0, #3
    2c58:	vmov.i32	q8, #1	; 0x00000001
    2c5c:	mov	r2, r1
    2c60:	vld1.32	{d18-d19}, [r7]!
    2c64:	subs	r2, r2, #4
    2c68:	vmul.i32	q8, q9, q8
    2c6c:	bne	2c60 <coda_bin_cursor_read_char_array+0xcc>
    2c70:	vext.8	q9, q8, q8, #8
    2c74:	cmp	r0, r1
    2c78:	vmul.i32	q0, q8, q9
    2c7c:	vmul.i32	q8, q0, d0[1]
    2c80:	vmov.32	r6, d16[0]
    2c84:	beq	2ca4 <coda_bin_cursor_read_char_array+0x110>
    2c88:	add	r2, sp, #8
    2c8c:	sub	r0, r0, r1
    2c90:	add	r2, r2, r1, lsl #2
    2c94:	ldr	r1, [r2], #4
    2c98:	subs	r0, r0, #1
    2c9c:	mul	r6, r1, r6
    2ca0:	bne	2c94 <coda_bin_cursor_read_char_array+0x100>
    2ca4:	cmp	r6, #1
    2ca8:	blt	2d10 <coda_bin_cursor_read_char_array+0x17c>
    2cac:	add	r0, sp, #40	; 0x28
    2cb0:	mov	r1, #0
    2cb4:	mov	r7, #0
    2cb8:	bl	0 <coda_cursor_goto_array_element_by_index>
    2cbc:	cmp	r0, #0
    2cc0:	beq	2cd0 <coda_bin_cursor_read_char_array+0x13c>
    2cc4:	mvn	r0, #0
    2cc8:	sub	sp, fp, #28
    2ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cd0:	sub	r4, r6, #1
    2cd4:	add	r9, sp, #40	; 0x28
    2cd8:	add	r1, sl, r7
    2cdc:	mov	r0, r9
    2ce0:	bl	0 <coda_ascii_cursor_read_char>
    2ce4:	cmp	r0, #0
    2ce8:	bne	2cc4 <coda_bin_cursor_read_char_array+0x130>
    2cec:	cmp	r7, r4
    2cf0:	bge	2d04 <coda_bin_cursor_read_char_array+0x170>
    2cf4:	mov	r0, r9
    2cf8:	bl	0 <coda_cursor_goto_next_array_element>
    2cfc:	cmp	r0, #0
    2d00:	bne	2cc4 <coda_bin_cursor_read_char_array+0x130>
    2d04:	add	r7, r7, #1
    2d08:	cmp	r7, r6
    2d0c:	blt	2cd8 <coda_bin_cursor_read_char_array+0x144>
    2d10:	cmp	r8, #0
    2d14:	beq	2d38 <coda_bin_cursor_read_char_array+0x1a4>
    2d18:	mov	r0, r5
    2d1c:	mov	r1, sl
    2d20:	mov	r2, #1
    2d24:	bl	1d68 <transpose_array>
    2d28:	mov	r1, r0
    2d2c:	mvn	r0, #0
    2d30:	cmp	r1, #0
    2d34:	bne	2cc8 <coda_bin_cursor_read_char_array+0x134>
    2d38:	mov	r0, #0
    2d3c:	sub	sp, fp, #28
    2d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d44:	movw	r0, #0
    2d48:	movw	r1, #0
    2d4c:	movw	r3, #0
    2d50:	movw	r2, #1166	; 0x48e
    2d54:	movt	r0, #0
    2d58:	movt	r1, #0
    2d5c:	movt	r3, #0
    2d60:	bl	0 <__assert_fail>

00002d64 <coda_bin_cursor_read_int8_partial_array>:
    2d64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2d68:	add	fp, sp, #24
    2d6c:	sub	sp, sp, #528	; 0x210
    2d70:	mov	r6, r1
    2d74:	mov	r1, r0
    2d78:	ldr	r0, [r0, #4]
    2d7c:	mov	r5, r2
    2d80:	mov	r4, r3
    2d84:	add	r0, r1, r0, lsl #4
    2d88:	ldr	r0, [r0, #-8]
    2d8c:	ldr	r2, [r0]
    2d90:	cmp	r2, #99	; 0x63
    2d94:	ldrhi	r0, [r0, #4]
    2d98:	ldr	r0, [r0, #40]	; 0x28
    2d9c:	ldr	r0, [r0]
    2da0:	cmp	r0, #0
    2da4:	beq	2e24 <coda_bin_cursor_read_int8_partial_array+0xc0>
    2da8:	cmp	r0, #1
    2dac:	bne	2ea4 <coda_bin_cursor_read_int8_partial_array+0x140>
    2db0:	mov	r0, sp
    2db4:	mov	r2, #520	; 0x208
    2db8:	bl	0 <memcpy>
    2dbc:	cmp	r5, #1
    2dc0:	blt	2e94 <coda_bin_cursor_read_int8_partial_array+0x130>
    2dc4:	mov	r0, sp
    2dc8:	mov	r1, r6
    2dcc:	bl	0 <coda_cursor_goto_array_element_by_index>
    2dd0:	mvn	r8, #0
    2dd4:	cmp	r0, #0
    2dd8:	bne	2e98 <coda_bin_cursor_read_int8_partial_array+0x134>
    2ddc:	sub	r6, r5, #1
    2de0:	mov	r7, #0
    2de4:	mov	r9, sp
    2de8:	add	r1, r4, r7
    2dec:	mov	r0, r9
    2df0:	bl	208 <coda_bin_cursor_read_int8>
    2df4:	cmp	r0, #0
    2df8:	bne	2e98 <coda_bin_cursor_read_int8_partial_array+0x134>
    2dfc:	cmp	r7, r6
    2e00:	bge	2e14 <coda_bin_cursor_read_int8_partial_array+0xb0>
    2e04:	mov	r0, r9
    2e08:	bl	0 <coda_cursor_goto_next_array_element>
    2e0c:	cmp	r0, #0
    2e10:	bne	2e98 <coda_bin_cursor_read_int8_partial_array+0x134>
    2e14:	add	r7, r7, #1
    2e18:	cmp	r7, r5
    2e1c:	blt	2de8 <coda_bin_cursor_read_int8_partial_array+0x84>
    2e20:	b	2e94 <coda_bin_cursor_read_int8_partial_array+0x130>
    2e24:	mov	r0, sp
    2e28:	mov	r2, #520	; 0x208
    2e2c:	bl	0 <memcpy>
    2e30:	cmp	r5, #1
    2e34:	blt	2e94 <coda_bin_cursor_read_int8_partial_array+0x130>
    2e38:	mov	r0, sp
    2e3c:	mov	r1, r6
    2e40:	bl	0 <coda_cursor_goto_array_element_by_index>
    2e44:	mvn	r8, #0
    2e48:	cmp	r0, #0
    2e4c:	bne	2e98 <coda_bin_cursor_read_int8_partial_array+0x134>
    2e50:	sub	r6, r5, #1
    2e54:	mov	r7, #0
    2e58:	mov	r9, sp
    2e5c:	add	r1, r4, r7
    2e60:	mov	r0, r9
    2e64:	bl	0 <coda_ascii_cursor_read_int8>
    2e68:	cmp	r0, #0
    2e6c:	bne	2e98 <coda_bin_cursor_read_int8_partial_array+0x134>
    2e70:	cmp	r7, r6
    2e74:	bge	2e88 <coda_bin_cursor_read_int8_partial_array+0x124>
    2e78:	mov	r0, r9
    2e7c:	bl	0 <coda_cursor_goto_next_array_element>
    2e80:	cmp	r0, #0
    2e84:	bne	2e98 <coda_bin_cursor_read_int8_partial_array+0x134>
    2e88:	add	r7, r7, #1
    2e8c:	cmp	r7, r5
    2e90:	blt	2e5c <coda_bin_cursor_read_int8_partial_array+0xf8>
    2e94:	mov	r8, #0
    2e98:	mov	r0, r8
    2e9c:	sub	sp, fp, #24
    2ea0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2ea4:	movw	r0, #0
    2ea8:	movw	r1, #0
    2eac:	movw	r3, #0
    2eb0:	movw	r2, #1192	; 0x4a8
    2eb4:	movt	r0, #0
    2eb8:	movt	r1, #0
    2ebc:	movt	r3, #0
    2ec0:	bl	0 <__assert_fail>

00002ec4 <coda_bin_cursor_read_uint8_partial_array>:
    2ec4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2ec8:	add	fp, sp, #24
    2ecc:	sub	sp, sp, #528	; 0x210
    2ed0:	mov	r6, r1
    2ed4:	mov	r1, r0
    2ed8:	ldr	r0, [r0, #4]
    2edc:	mov	r5, r2
    2ee0:	mov	r4, r3
    2ee4:	add	r0, r1, r0, lsl #4
    2ee8:	ldr	r0, [r0, #-8]
    2eec:	ldr	r2, [r0]
    2ef0:	cmp	r2, #99	; 0x63
    2ef4:	ldrhi	r0, [r0, #4]
    2ef8:	ldr	r0, [r0, #40]	; 0x28
    2efc:	ldr	r0, [r0]
    2f00:	cmp	r0, #0
    2f04:	beq	2f84 <coda_bin_cursor_read_uint8_partial_array+0xc0>
    2f08:	cmp	r0, #1
    2f0c:	bne	3004 <coda_bin_cursor_read_uint8_partial_array+0x140>
    2f10:	mov	r0, sp
    2f14:	mov	r2, #520	; 0x208
    2f18:	bl	0 <memcpy>
    2f1c:	cmp	r5, #1
    2f20:	blt	2ff4 <coda_bin_cursor_read_uint8_partial_array+0x130>
    2f24:	mov	r0, sp
    2f28:	mov	r1, r6
    2f2c:	bl	0 <coda_cursor_goto_array_element_by_index>
    2f30:	mvn	r8, #0
    2f34:	cmp	r0, #0
    2f38:	bne	2ff8 <coda_bin_cursor_read_uint8_partial_array+0x134>
    2f3c:	sub	r6, r5, #1
    2f40:	mov	r7, #0
    2f44:	mov	r9, sp
    2f48:	add	r1, r4, r7
    2f4c:	mov	r0, r9
    2f50:	bl	944 <coda_bin_cursor_read_uint8>
    2f54:	cmp	r0, #0
    2f58:	bne	2ff8 <coda_bin_cursor_read_uint8_partial_array+0x134>
    2f5c:	cmp	r7, r6
    2f60:	bge	2f74 <coda_bin_cursor_read_uint8_partial_array+0xb0>
    2f64:	mov	r0, r9
    2f68:	bl	0 <coda_cursor_goto_next_array_element>
    2f6c:	cmp	r0, #0
    2f70:	bne	2ff8 <coda_bin_cursor_read_uint8_partial_array+0x134>
    2f74:	add	r7, r7, #1
    2f78:	cmp	r7, r5
    2f7c:	blt	2f48 <coda_bin_cursor_read_uint8_partial_array+0x84>
    2f80:	b	2ff4 <coda_bin_cursor_read_uint8_partial_array+0x130>
    2f84:	mov	r0, sp
    2f88:	mov	r2, #520	; 0x208
    2f8c:	bl	0 <memcpy>
    2f90:	cmp	r5, #1
    2f94:	blt	2ff4 <coda_bin_cursor_read_uint8_partial_array+0x130>
    2f98:	mov	r0, sp
    2f9c:	mov	r1, r6
    2fa0:	bl	0 <coda_cursor_goto_array_element_by_index>
    2fa4:	mvn	r8, #0
    2fa8:	cmp	r0, #0
    2fac:	bne	2ff8 <coda_bin_cursor_read_uint8_partial_array+0x134>
    2fb0:	sub	r6, r5, #1
    2fb4:	mov	r7, #0
    2fb8:	mov	r9, sp
    2fbc:	add	r1, r4, r7
    2fc0:	mov	r0, r9
    2fc4:	bl	0 <coda_ascii_cursor_read_uint8>
    2fc8:	cmp	r0, #0
    2fcc:	bne	2ff8 <coda_bin_cursor_read_uint8_partial_array+0x134>
    2fd0:	cmp	r7, r6
    2fd4:	bge	2fe8 <coda_bin_cursor_read_uint8_partial_array+0x124>
    2fd8:	mov	r0, r9
    2fdc:	bl	0 <coda_cursor_goto_next_array_element>
    2fe0:	cmp	r0, #0
    2fe4:	bne	2ff8 <coda_bin_cursor_read_uint8_partial_array+0x134>
    2fe8:	add	r7, r7, #1
    2fec:	cmp	r7, r5
    2ff0:	blt	2fbc <coda_bin_cursor_read_uint8_partial_array+0xf8>
    2ff4:	mov	r8, #0
    2ff8:	mov	r0, r8
    2ffc:	sub	sp, fp, #24
    3000:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3004:	movw	r0, #0
    3008:	movw	r1, #0
    300c:	movw	r3, #0
    3010:	movw	r2, #1206	; 0x4b6
    3014:	movt	r0, #0
    3018:	movt	r1, #0
    301c:	movt	r3, #0
    3020:	bl	0 <__assert_fail>

00003024 <coda_bin_cursor_read_int16_partial_array>:
    3024:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3028:	add	fp, sp, #24
    302c:	sub	sp, sp, #528	; 0x210
    3030:	mov	r6, r1
    3034:	mov	r1, r0
    3038:	ldr	r0, [r0, #4]
    303c:	mov	r5, r2
    3040:	mov	r4, r3
    3044:	add	r0, r1, r0, lsl #4
    3048:	ldr	r0, [r0, #-8]
    304c:	ldr	r2, [r0]
    3050:	cmp	r2, #99	; 0x63
    3054:	ldrhi	r0, [r0, #4]
    3058:	ldr	r0, [r0, #40]	; 0x28
    305c:	ldr	r0, [r0]
    3060:	cmp	r0, #0
    3064:	beq	30e8 <coda_bin_cursor_read_int16_partial_array+0xc4>
    3068:	cmp	r0, #1
    306c:	bne	316c <coda_bin_cursor_read_int16_partial_array+0x148>
    3070:	mov	r0, sp
    3074:	mov	r2, #520	; 0x208
    3078:	bl	0 <memcpy>
    307c:	cmp	r5, #1
    3080:	blt	315c <coda_bin_cursor_read_int16_partial_array+0x138>
    3084:	mov	r0, sp
    3088:	mov	r1, r6
    308c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3090:	mvn	r8, #0
    3094:	cmp	r0, #0
    3098:	bne	3160 <coda_bin_cursor_read_int16_partial_array+0x13c>
    309c:	sub	r6, r5, #1
    30a0:	mov	r7, #0
    30a4:	mov	r9, sp
    30a8:	mov	r0, r9
    30ac:	mov	r1, r4
    30b0:	bl	aec <coda_bin_cursor_read_int16>
    30b4:	cmp	r0, #0
    30b8:	bne	3160 <coda_bin_cursor_read_int16_partial_array+0x13c>
    30bc:	cmp	r7, r6
    30c0:	bge	30d4 <coda_bin_cursor_read_int16_partial_array+0xb0>
    30c4:	mov	r0, r9
    30c8:	bl	0 <coda_cursor_goto_next_array_element>
    30cc:	cmp	r0, #0
    30d0:	bne	3160 <coda_bin_cursor_read_int16_partial_array+0x13c>
    30d4:	add	r7, r7, #1
    30d8:	add	r4, r4, #2
    30dc:	cmp	r7, r5
    30e0:	blt	30a8 <coda_bin_cursor_read_int16_partial_array+0x84>
    30e4:	b	315c <coda_bin_cursor_read_int16_partial_array+0x138>
    30e8:	mov	r0, sp
    30ec:	mov	r2, #520	; 0x208
    30f0:	bl	0 <memcpy>
    30f4:	cmp	r5, #1
    30f8:	blt	315c <coda_bin_cursor_read_int16_partial_array+0x138>
    30fc:	mov	r0, sp
    3100:	mov	r1, r6
    3104:	bl	0 <coda_cursor_goto_array_element_by_index>
    3108:	mvn	r8, #0
    310c:	cmp	r0, #0
    3110:	bne	3160 <coda_bin_cursor_read_int16_partial_array+0x13c>
    3114:	sub	r6, r5, #1
    3118:	mov	r7, #0
    311c:	mov	r9, sp
    3120:	mov	r0, r9
    3124:	mov	r1, r4
    3128:	bl	0 <coda_ascii_cursor_read_int16>
    312c:	cmp	r0, #0
    3130:	bne	3160 <coda_bin_cursor_read_int16_partial_array+0x13c>
    3134:	cmp	r7, r6
    3138:	bge	314c <coda_bin_cursor_read_int16_partial_array+0x128>
    313c:	mov	r0, r9
    3140:	bl	0 <coda_cursor_goto_next_array_element>
    3144:	cmp	r0, #0
    3148:	bne	3160 <coda_bin_cursor_read_int16_partial_array+0x13c>
    314c:	add	r7, r7, #1
    3150:	add	r4, r4, #2
    3154:	cmp	r7, r5
    3158:	blt	3120 <coda_bin_cursor_read_int16_partial_array+0xfc>
    315c:	mov	r8, #0
    3160:	mov	r0, r8
    3164:	sub	sp, fp, #24
    3168:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    316c:	movw	r0, #0
    3170:	movw	r1, #0
    3174:	movw	r3, #0
    3178:	movw	r2, #1220	; 0x4c4
    317c:	movt	r0, #0
    3180:	movt	r1, #0
    3184:	movt	r3, #0
    3188:	bl	0 <__assert_fail>

0000318c <coda_bin_cursor_read_uint16_partial_array>:
    318c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3190:	add	fp, sp, #24
    3194:	sub	sp, sp, #528	; 0x210
    3198:	mov	r6, r1
    319c:	mov	r1, r0
    31a0:	ldr	r0, [r0, #4]
    31a4:	mov	r5, r2
    31a8:	mov	r4, r3
    31ac:	add	r0, r1, r0, lsl #4
    31b0:	ldr	r0, [r0, #-8]
    31b4:	ldr	r2, [r0]
    31b8:	cmp	r2, #99	; 0x63
    31bc:	ldrhi	r0, [r0, #4]
    31c0:	ldr	r0, [r0, #40]	; 0x28
    31c4:	ldr	r0, [r0]
    31c8:	cmp	r0, #0
    31cc:	beq	3250 <coda_bin_cursor_read_uint16_partial_array+0xc4>
    31d0:	cmp	r0, #1
    31d4:	bne	32d4 <coda_bin_cursor_read_uint16_partial_array+0x148>
    31d8:	mov	r0, sp
    31dc:	mov	r2, #520	; 0x208
    31e0:	bl	0 <memcpy>
    31e4:	cmp	r5, #1
    31e8:	blt	32c4 <coda_bin_cursor_read_uint16_partial_array+0x138>
    31ec:	mov	r0, sp
    31f0:	mov	r1, r6
    31f4:	bl	0 <coda_cursor_goto_array_element_by_index>
    31f8:	mvn	r8, #0
    31fc:	cmp	r0, #0
    3200:	bne	32c8 <coda_bin_cursor_read_uint16_partial_array+0x13c>
    3204:	sub	r6, r5, #1
    3208:	mov	r7, #0
    320c:	mov	r9, sp
    3210:	mov	r0, r9
    3214:	mov	r1, r4
    3218:	bl	cb0 <coda_bin_cursor_read_uint16>
    321c:	cmp	r0, #0
    3220:	bne	32c8 <coda_bin_cursor_read_uint16_partial_array+0x13c>
    3224:	cmp	r7, r6
    3228:	bge	323c <coda_bin_cursor_read_uint16_partial_array+0xb0>
    322c:	mov	r0, r9
    3230:	bl	0 <coda_cursor_goto_next_array_element>
    3234:	cmp	r0, #0
    3238:	bne	32c8 <coda_bin_cursor_read_uint16_partial_array+0x13c>
    323c:	add	r7, r7, #1
    3240:	add	r4, r4, #2
    3244:	cmp	r7, r5
    3248:	blt	3210 <coda_bin_cursor_read_uint16_partial_array+0x84>
    324c:	b	32c4 <coda_bin_cursor_read_uint16_partial_array+0x138>
    3250:	mov	r0, sp
    3254:	mov	r2, #520	; 0x208
    3258:	bl	0 <memcpy>
    325c:	cmp	r5, #1
    3260:	blt	32c4 <coda_bin_cursor_read_uint16_partial_array+0x138>
    3264:	mov	r0, sp
    3268:	mov	r1, r6
    326c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3270:	mvn	r8, #0
    3274:	cmp	r0, #0
    3278:	bne	32c8 <coda_bin_cursor_read_uint16_partial_array+0x13c>
    327c:	sub	r6, r5, #1
    3280:	mov	r7, #0
    3284:	mov	r9, sp
    3288:	mov	r0, r9
    328c:	mov	r1, r4
    3290:	bl	0 <coda_ascii_cursor_read_uint16>
    3294:	cmp	r0, #0
    3298:	bne	32c8 <coda_bin_cursor_read_uint16_partial_array+0x13c>
    329c:	cmp	r7, r6
    32a0:	bge	32b4 <coda_bin_cursor_read_uint16_partial_array+0x128>
    32a4:	mov	r0, r9
    32a8:	bl	0 <coda_cursor_goto_next_array_element>
    32ac:	cmp	r0, #0
    32b0:	bne	32c8 <coda_bin_cursor_read_uint16_partial_array+0x13c>
    32b4:	add	r7, r7, #1
    32b8:	add	r4, r4, #2
    32bc:	cmp	r7, r5
    32c0:	blt	3288 <coda_bin_cursor_read_uint16_partial_array+0xfc>
    32c4:	mov	r8, #0
    32c8:	mov	r0, r8
    32cc:	sub	sp, fp, #24
    32d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    32d4:	movw	r0, #0
    32d8:	movw	r1, #0
    32dc:	movw	r3, #0
    32e0:	movw	r2, #1234	; 0x4d2
    32e4:	movt	r0, #0
    32e8:	movt	r1, #0
    32ec:	movt	r3, #0
    32f0:	bl	0 <__assert_fail>

000032f4 <coda_bin_cursor_read_int32_partial_array>:
    32f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    32f8:	add	fp, sp, #24
    32fc:	sub	sp, sp, #528	; 0x210
    3300:	mov	r6, r1
    3304:	mov	r1, r0
    3308:	ldr	r0, [r0, #4]
    330c:	mov	r5, r2
    3310:	mov	r4, r3
    3314:	add	r0, r1, r0, lsl #4
    3318:	ldr	r0, [r0, #-8]
    331c:	ldr	r2, [r0]
    3320:	cmp	r2, #99	; 0x63
    3324:	ldrhi	r0, [r0, #4]
    3328:	ldr	r0, [r0, #40]	; 0x28
    332c:	ldr	r0, [r0]
    3330:	cmp	r0, #0
    3334:	beq	33b8 <coda_bin_cursor_read_int32_partial_array+0xc4>
    3338:	cmp	r0, #1
    333c:	bne	343c <coda_bin_cursor_read_int32_partial_array+0x148>
    3340:	mov	r0, sp
    3344:	mov	r2, #520	; 0x208
    3348:	bl	0 <memcpy>
    334c:	cmp	r5, #1
    3350:	blt	342c <coda_bin_cursor_read_int32_partial_array+0x138>
    3354:	mov	r0, sp
    3358:	mov	r1, r6
    335c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3360:	mvn	r8, #0
    3364:	cmp	r0, #0
    3368:	bne	3430 <coda_bin_cursor_read_int32_partial_array+0x13c>
    336c:	sub	r6, r5, #1
    3370:	mov	r7, #0
    3374:	mov	r9, sp
    3378:	mov	r0, r9
    337c:	mov	r1, r4
    3380:	bl	e44 <coda_bin_cursor_read_int32>
    3384:	cmp	r0, #0
    3388:	bne	3430 <coda_bin_cursor_read_int32_partial_array+0x13c>
    338c:	cmp	r7, r6
    3390:	bge	33a4 <coda_bin_cursor_read_int32_partial_array+0xb0>
    3394:	mov	r0, r9
    3398:	bl	0 <coda_cursor_goto_next_array_element>
    339c:	cmp	r0, #0
    33a0:	bne	3430 <coda_bin_cursor_read_int32_partial_array+0x13c>
    33a4:	add	r7, r7, #1
    33a8:	add	r4, r4, #4
    33ac:	cmp	r7, r5
    33b0:	blt	3378 <coda_bin_cursor_read_int32_partial_array+0x84>
    33b4:	b	342c <coda_bin_cursor_read_int32_partial_array+0x138>
    33b8:	mov	r0, sp
    33bc:	mov	r2, #520	; 0x208
    33c0:	bl	0 <memcpy>
    33c4:	cmp	r5, #1
    33c8:	blt	342c <coda_bin_cursor_read_int32_partial_array+0x138>
    33cc:	mov	r0, sp
    33d0:	mov	r1, r6
    33d4:	bl	0 <coda_cursor_goto_array_element_by_index>
    33d8:	mvn	r8, #0
    33dc:	cmp	r0, #0
    33e0:	bne	3430 <coda_bin_cursor_read_int32_partial_array+0x13c>
    33e4:	sub	r6, r5, #1
    33e8:	mov	r7, #0
    33ec:	mov	r9, sp
    33f0:	mov	r0, r9
    33f4:	mov	r1, r4
    33f8:	bl	0 <coda_ascii_cursor_read_int32>
    33fc:	cmp	r0, #0
    3400:	bne	3430 <coda_bin_cursor_read_int32_partial_array+0x13c>
    3404:	cmp	r7, r6
    3408:	bge	341c <coda_bin_cursor_read_int32_partial_array+0x128>
    340c:	mov	r0, r9
    3410:	bl	0 <coda_cursor_goto_next_array_element>
    3414:	cmp	r0, #0
    3418:	bne	3430 <coda_bin_cursor_read_int32_partial_array+0x13c>
    341c:	add	r7, r7, #1
    3420:	add	r4, r4, #4
    3424:	cmp	r7, r5
    3428:	blt	33f0 <coda_bin_cursor_read_int32_partial_array+0xfc>
    342c:	mov	r8, #0
    3430:	mov	r0, r8
    3434:	sub	sp, fp, #24
    3438:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    343c:	movw	r0, #0
    3440:	movw	r1, #0
    3444:	movw	r3, #0
    3448:	mov	r2, #1248	; 0x4e0
    344c:	movt	r0, #0
    3450:	movt	r1, #0
    3454:	movt	r3, #0
    3458:	bl	0 <__assert_fail>

0000345c <coda_bin_cursor_read_uint32_partial_array>:
    345c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3460:	add	fp, sp, #24
    3464:	sub	sp, sp, #528	; 0x210
    3468:	mov	r6, r1
    346c:	mov	r1, r0
    3470:	ldr	r0, [r0, #4]
    3474:	mov	r5, r2
    3478:	mov	r4, r3
    347c:	add	r0, r1, r0, lsl #4
    3480:	ldr	r0, [r0, #-8]
    3484:	ldr	r2, [r0]
    3488:	cmp	r2, #99	; 0x63
    348c:	ldrhi	r0, [r0, #4]
    3490:	ldr	r0, [r0, #40]	; 0x28
    3494:	ldr	r0, [r0]
    3498:	cmp	r0, #0
    349c:	beq	3520 <coda_bin_cursor_read_uint32_partial_array+0xc4>
    34a0:	cmp	r0, #1
    34a4:	bne	35a4 <coda_bin_cursor_read_uint32_partial_array+0x148>
    34a8:	mov	r0, sp
    34ac:	mov	r2, #520	; 0x208
    34b0:	bl	0 <memcpy>
    34b4:	cmp	r5, #1
    34b8:	blt	3594 <coda_bin_cursor_read_uint32_partial_array+0x138>
    34bc:	mov	r0, sp
    34c0:	mov	r1, r6
    34c4:	bl	0 <coda_cursor_goto_array_element_by_index>
    34c8:	mvn	r8, #0
    34cc:	cmp	r0, #0
    34d0:	bne	3598 <coda_bin_cursor_read_uint32_partial_array+0x13c>
    34d4:	sub	r6, r5, #1
    34d8:	mov	r7, #0
    34dc:	mov	r9, sp
    34e0:	mov	r0, r9
    34e4:	mov	r1, r4
    34e8:	bl	1008 <coda_bin_cursor_read_uint32>
    34ec:	cmp	r0, #0
    34f0:	bne	3598 <coda_bin_cursor_read_uint32_partial_array+0x13c>
    34f4:	cmp	r7, r6
    34f8:	bge	350c <coda_bin_cursor_read_uint32_partial_array+0xb0>
    34fc:	mov	r0, r9
    3500:	bl	0 <coda_cursor_goto_next_array_element>
    3504:	cmp	r0, #0
    3508:	bne	3598 <coda_bin_cursor_read_uint32_partial_array+0x13c>
    350c:	add	r7, r7, #1
    3510:	add	r4, r4, #4
    3514:	cmp	r7, r5
    3518:	blt	34e0 <coda_bin_cursor_read_uint32_partial_array+0x84>
    351c:	b	3594 <coda_bin_cursor_read_uint32_partial_array+0x138>
    3520:	mov	r0, sp
    3524:	mov	r2, #520	; 0x208
    3528:	bl	0 <memcpy>
    352c:	cmp	r5, #1
    3530:	blt	3594 <coda_bin_cursor_read_uint32_partial_array+0x138>
    3534:	mov	r0, sp
    3538:	mov	r1, r6
    353c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3540:	mvn	r8, #0
    3544:	cmp	r0, #0
    3548:	bne	3598 <coda_bin_cursor_read_uint32_partial_array+0x13c>
    354c:	sub	r6, r5, #1
    3550:	mov	r7, #0
    3554:	mov	r9, sp
    3558:	mov	r0, r9
    355c:	mov	r1, r4
    3560:	bl	0 <coda_ascii_cursor_read_uint32>
    3564:	cmp	r0, #0
    3568:	bne	3598 <coda_bin_cursor_read_uint32_partial_array+0x13c>
    356c:	cmp	r7, r6
    3570:	bge	3584 <coda_bin_cursor_read_uint32_partial_array+0x128>
    3574:	mov	r0, r9
    3578:	bl	0 <coda_cursor_goto_next_array_element>
    357c:	cmp	r0, #0
    3580:	bne	3598 <coda_bin_cursor_read_uint32_partial_array+0x13c>
    3584:	add	r7, r7, #1
    3588:	add	r4, r4, #4
    358c:	cmp	r7, r5
    3590:	blt	3558 <coda_bin_cursor_read_uint32_partial_array+0xfc>
    3594:	mov	r8, #0
    3598:	mov	r0, r8
    359c:	sub	sp, fp, #24
    35a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    35a4:	movw	r0, #0
    35a8:	movw	r1, #0
    35ac:	movw	r3, #0
    35b0:	movw	r2, #1262	; 0x4ee
    35b4:	movt	r0, #0
    35b8:	movt	r1, #0
    35bc:	movt	r3, #0
    35c0:	bl	0 <__assert_fail>

000035c4 <coda_bin_cursor_read_int64_partial_array>:
    35c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    35c8:	add	fp, sp, #24
    35cc:	sub	sp, sp, #528	; 0x210
    35d0:	mov	r6, r1
    35d4:	mov	r1, r0
    35d8:	ldr	r0, [r0, #4]
    35dc:	mov	r5, r2
    35e0:	mov	r4, r3
    35e4:	add	r0, r1, r0, lsl #4
    35e8:	ldr	r0, [r0, #-8]
    35ec:	ldr	r2, [r0]
    35f0:	cmp	r2, #99	; 0x63
    35f4:	ldrhi	r0, [r0, #4]
    35f8:	ldr	r0, [r0, #40]	; 0x28
    35fc:	ldr	r0, [r0]
    3600:	cmp	r0, #0
    3604:	beq	3688 <coda_bin_cursor_read_int64_partial_array+0xc4>
    3608:	cmp	r0, #1
    360c:	bne	370c <coda_bin_cursor_read_int64_partial_array+0x148>
    3610:	mov	r0, sp
    3614:	mov	r2, #520	; 0x208
    3618:	bl	0 <memcpy>
    361c:	cmp	r5, #1
    3620:	blt	36fc <coda_bin_cursor_read_int64_partial_array+0x138>
    3624:	mov	r0, sp
    3628:	mov	r1, r6
    362c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3630:	mvn	r8, #0
    3634:	cmp	r0, #0
    3638:	bne	3700 <coda_bin_cursor_read_int64_partial_array+0x13c>
    363c:	sub	r6, r5, #1
    3640:	mov	r7, #0
    3644:	mov	r9, sp
    3648:	mov	r0, r9
    364c:	mov	r1, r4
    3650:	bl	119c <coda_bin_cursor_read_int64>
    3654:	cmp	r0, #0
    3658:	bne	3700 <coda_bin_cursor_read_int64_partial_array+0x13c>
    365c:	cmp	r7, r6
    3660:	bge	3674 <coda_bin_cursor_read_int64_partial_array+0xb0>
    3664:	mov	r0, r9
    3668:	bl	0 <coda_cursor_goto_next_array_element>
    366c:	cmp	r0, #0
    3670:	bne	3700 <coda_bin_cursor_read_int64_partial_array+0x13c>
    3674:	add	r7, r7, #1
    3678:	add	r4, r4, #8
    367c:	cmp	r7, r5
    3680:	blt	3648 <coda_bin_cursor_read_int64_partial_array+0x84>
    3684:	b	36fc <coda_bin_cursor_read_int64_partial_array+0x138>
    3688:	mov	r0, sp
    368c:	mov	r2, #520	; 0x208
    3690:	bl	0 <memcpy>
    3694:	cmp	r5, #1
    3698:	blt	36fc <coda_bin_cursor_read_int64_partial_array+0x138>
    369c:	mov	r0, sp
    36a0:	mov	r1, r6
    36a4:	bl	0 <coda_cursor_goto_array_element_by_index>
    36a8:	mvn	r8, #0
    36ac:	cmp	r0, #0
    36b0:	bne	3700 <coda_bin_cursor_read_int64_partial_array+0x13c>
    36b4:	sub	r6, r5, #1
    36b8:	mov	r7, #0
    36bc:	mov	r9, sp
    36c0:	mov	r0, r9
    36c4:	mov	r1, r4
    36c8:	bl	0 <coda_ascii_cursor_read_int64>
    36cc:	cmp	r0, #0
    36d0:	bne	3700 <coda_bin_cursor_read_int64_partial_array+0x13c>
    36d4:	cmp	r7, r6
    36d8:	bge	36ec <coda_bin_cursor_read_int64_partial_array+0x128>
    36dc:	mov	r0, r9
    36e0:	bl	0 <coda_cursor_goto_next_array_element>
    36e4:	cmp	r0, #0
    36e8:	bne	3700 <coda_bin_cursor_read_int64_partial_array+0x13c>
    36ec:	add	r7, r7, #1
    36f0:	add	r4, r4, #8
    36f4:	cmp	r7, r5
    36f8:	blt	36c0 <coda_bin_cursor_read_int64_partial_array+0xfc>
    36fc:	mov	r8, #0
    3700:	mov	r0, r8
    3704:	sub	sp, fp, #24
    3708:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    370c:	movw	r0, #0
    3710:	movw	r1, #0
    3714:	movw	r3, #0
    3718:	movw	r2, #1276	; 0x4fc
    371c:	movt	r0, #0
    3720:	movt	r1, #0
    3724:	movt	r3, #0
    3728:	bl	0 <__assert_fail>

0000372c <coda_bin_cursor_read_uint64_partial_array>:
    372c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3730:	add	fp, sp, #24
    3734:	sub	sp, sp, #528	; 0x210
    3738:	mov	r6, r1
    373c:	mov	r1, r0
    3740:	ldr	r0, [r0, #4]
    3744:	mov	r5, r2
    3748:	mov	r4, r3
    374c:	add	r0, r1, r0, lsl #4
    3750:	ldr	r0, [r0, #-8]
    3754:	ldr	r2, [r0]
    3758:	cmp	r2, #99	; 0x63
    375c:	ldrhi	r0, [r0, #4]
    3760:	ldr	r0, [r0, #40]	; 0x28
    3764:	ldr	r0, [r0]
    3768:	cmp	r0, #0
    376c:	beq	37f0 <coda_bin_cursor_read_uint64_partial_array+0xc4>
    3770:	cmp	r0, #1
    3774:	bne	3874 <coda_bin_cursor_read_uint64_partial_array+0x148>
    3778:	mov	r0, sp
    377c:	mov	r2, #520	; 0x208
    3780:	bl	0 <memcpy>
    3784:	cmp	r5, #1
    3788:	blt	3864 <coda_bin_cursor_read_uint64_partial_array+0x138>
    378c:	mov	r0, sp
    3790:	mov	r1, r6
    3794:	bl	0 <coda_cursor_goto_array_element_by_index>
    3798:	mvn	r8, #0
    379c:	cmp	r0, #0
    37a0:	bne	3868 <coda_bin_cursor_read_uint64_partial_array+0x13c>
    37a4:	sub	r6, r5, #1
    37a8:	mov	r7, #0
    37ac:	mov	r9, sp
    37b0:	mov	r0, r9
    37b4:	mov	r1, r4
    37b8:	bl	13a4 <coda_bin_cursor_read_uint64>
    37bc:	cmp	r0, #0
    37c0:	bne	3868 <coda_bin_cursor_read_uint64_partial_array+0x13c>
    37c4:	cmp	r7, r6
    37c8:	bge	37dc <coda_bin_cursor_read_uint64_partial_array+0xb0>
    37cc:	mov	r0, r9
    37d0:	bl	0 <coda_cursor_goto_next_array_element>
    37d4:	cmp	r0, #0
    37d8:	bne	3868 <coda_bin_cursor_read_uint64_partial_array+0x13c>
    37dc:	add	r7, r7, #1
    37e0:	add	r4, r4, #8
    37e4:	cmp	r7, r5
    37e8:	blt	37b0 <coda_bin_cursor_read_uint64_partial_array+0x84>
    37ec:	b	3864 <coda_bin_cursor_read_uint64_partial_array+0x138>
    37f0:	mov	r0, sp
    37f4:	mov	r2, #520	; 0x208
    37f8:	bl	0 <memcpy>
    37fc:	cmp	r5, #1
    3800:	blt	3864 <coda_bin_cursor_read_uint64_partial_array+0x138>
    3804:	mov	r0, sp
    3808:	mov	r1, r6
    380c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3810:	mvn	r8, #0
    3814:	cmp	r0, #0
    3818:	bne	3868 <coda_bin_cursor_read_uint64_partial_array+0x13c>
    381c:	sub	r6, r5, #1
    3820:	mov	r7, #0
    3824:	mov	r9, sp
    3828:	mov	r0, r9
    382c:	mov	r1, r4
    3830:	bl	0 <coda_ascii_cursor_read_uint64>
    3834:	cmp	r0, #0
    3838:	bne	3868 <coda_bin_cursor_read_uint64_partial_array+0x13c>
    383c:	cmp	r7, r6
    3840:	bge	3854 <coda_bin_cursor_read_uint64_partial_array+0x128>
    3844:	mov	r0, r9
    3848:	bl	0 <coda_cursor_goto_next_array_element>
    384c:	cmp	r0, #0
    3850:	bne	3868 <coda_bin_cursor_read_uint64_partial_array+0x13c>
    3854:	add	r7, r7, #1
    3858:	add	r4, r4, #8
    385c:	cmp	r7, r5
    3860:	blt	3828 <coda_bin_cursor_read_uint64_partial_array+0xfc>
    3864:	mov	r8, #0
    3868:	mov	r0, r8
    386c:	sub	sp, fp, #24
    3870:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3874:	movw	r0, #0
    3878:	movw	r1, #0
    387c:	movw	r3, #0
    3880:	movw	r2, #1290	; 0x50a
    3884:	movt	r0, #0
    3888:	movt	r1, #0
    388c:	movt	r3, #0
    3890:	bl	0 <__assert_fail>

00003894 <coda_bin_cursor_read_float_partial_array>:
    3894:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3898:	add	fp, sp, #24
    389c:	sub	sp, sp, #528	; 0x210
    38a0:	mov	r6, r1
    38a4:	mov	r1, r0
    38a8:	ldr	r0, [r0, #4]
    38ac:	mov	r5, r2
    38b0:	mov	r4, r3
    38b4:	add	r0, r1, r0, lsl #4
    38b8:	ldr	r0, [r0, #-8]
    38bc:	ldr	r2, [r0]
    38c0:	cmp	r2, #99	; 0x63
    38c4:	ldrhi	r0, [r0, #4]
    38c8:	ldr	r0, [r0, #40]	; 0x28
    38cc:	ldr	r0, [r0]
    38d0:	cmp	r0, #0
    38d4:	beq	3958 <coda_bin_cursor_read_float_partial_array+0xc4>
    38d8:	cmp	r0, #1
    38dc:	bne	39dc <coda_bin_cursor_read_float_partial_array+0x148>
    38e0:	mov	r0, sp
    38e4:	mov	r2, #520	; 0x208
    38e8:	bl	0 <memcpy>
    38ec:	cmp	r5, #1
    38f0:	blt	39cc <coda_bin_cursor_read_float_partial_array+0x138>
    38f4:	mov	r0, sp
    38f8:	mov	r1, r6
    38fc:	bl	0 <coda_cursor_goto_array_element_by_index>
    3900:	mvn	r8, #0
    3904:	cmp	r0, #0
    3908:	bne	39d0 <coda_bin_cursor_read_float_partial_array+0x13c>
    390c:	sub	r6, r5, #1
    3910:	mov	r7, #0
    3914:	mov	r9, sp
    3918:	mov	r0, r9
    391c:	mov	r1, r4
    3920:	bl	1548 <coda_bin_cursor_read_float>
    3924:	cmp	r0, #0
    3928:	bne	39d0 <coda_bin_cursor_read_float_partial_array+0x13c>
    392c:	cmp	r7, r6
    3930:	bge	3944 <coda_bin_cursor_read_float_partial_array+0xb0>
    3934:	mov	r0, r9
    3938:	bl	0 <coda_cursor_goto_next_array_element>
    393c:	cmp	r0, #0
    3940:	bne	39d0 <coda_bin_cursor_read_float_partial_array+0x13c>
    3944:	add	r7, r7, #1
    3948:	add	r4, r4, #4
    394c:	cmp	r7, r5
    3950:	blt	3918 <coda_bin_cursor_read_float_partial_array+0x84>
    3954:	b	39cc <coda_bin_cursor_read_float_partial_array+0x138>
    3958:	mov	r0, sp
    395c:	mov	r2, #520	; 0x208
    3960:	bl	0 <memcpy>
    3964:	cmp	r5, #1
    3968:	blt	39cc <coda_bin_cursor_read_float_partial_array+0x138>
    396c:	mov	r0, sp
    3970:	mov	r1, r6
    3974:	bl	0 <coda_cursor_goto_array_element_by_index>
    3978:	mvn	r8, #0
    397c:	cmp	r0, #0
    3980:	bne	39d0 <coda_bin_cursor_read_float_partial_array+0x13c>
    3984:	sub	r6, r5, #1
    3988:	mov	r7, #0
    398c:	mov	r9, sp
    3990:	mov	r0, r9
    3994:	mov	r1, r4
    3998:	bl	0 <coda_ascii_cursor_read_float>
    399c:	cmp	r0, #0
    39a0:	bne	39d0 <coda_bin_cursor_read_float_partial_array+0x13c>
    39a4:	cmp	r7, r6
    39a8:	bge	39bc <coda_bin_cursor_read_float_partial_array+0x128>
    39ac:	mov	r0, r9
    39b0:	bl	0 <coda_cursor_goto_next_array_element>
    39b4:	cmp	r0, #0
    39b8:	bne	39d0 <coda_bin_cursor_read_float_partial_array+0x13c>
    39bc:	add	r7, r7, #1
    39c0:	add	r4, r4, #4
    39c4:	cmp	r7, r5
    39c8:	blt	3990 <coda_bin_cursor_read_float_partial_array+0xfc>
    39cc:	mov	r8, #0
    39d0:	mov	r0, r8
    39d4:	sub	sp, fp, #24
    39d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    39dc:	movw	r0, #0
    39e0:	movw	r1, #0
    39e4:	movw	r3, #0
    39e8:	movw	r2, #1304	; 0x518
    39ec:	movt	r0, #0
    39f0:	movt	r1, #0
    39f4:	movt	r3, #0
    39f8:	bl	0 <__assert_fail>

000039fc <coda_bin_cursor_read_double_partial_array>:
    39fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3a00:	add	fp, sp, #24
    3a04:	sub	sp, sp, #528	; 0x210
    3a08:	mov	r6, r1
    3a0c:	mov	r1, r0
    3a10:	ldr	r0, [r0, #4]
    3a14:	mov	r5, r2
    3a18:	mov	r4, r3
    3a1c:	add	r0, r1, r0, lsl #4
    3a20:	ldr	r0, [r0, #-8]
    3a24:	ldr	r2, [r0]
    3a28:	cmp	r2, #99	; 0x63
    3a2c:	ldrhi	r0, [r0, #4]
    3a30:	ldr	r0, [r0, #40]	; 0x28
    3a34:	ldr	r0, [r0]
    3a38:	cmp	r0, #0
    3a3c:	beq	3ac0 <coda_bin_cursor_read_double_partial_array+0xc4>
    3a40:	cmp	r0, #1
    3a44:	bne	3b44 <coda_bin_cursor_read_double_partial_array+0x148>
    3a48:	mov	r0, sp
    3a4c:	mov	r2, #520	; 0x208
    3a50:	bl	0 <memcpy>
    3a54:	cmp	r5, #1
    3a58:	blt	3b34 <coda_bin_cursor_read_double_partial_array+0x138>
    3a5c:	mov	r0, sp
    3a60:	mov	r1, r6
    3a64:	bl	0 <coda_cursor_goto_array_element_by_index>
    3a68:	mvn	r8, #0
    3a6c:	cmp	r0, #0
    3a70:	bne	3b38 <coda_bin_cursor_read_double_partial_array+0x13c>
    3a74:	sub	r6, r5, #1
    3a78:	mov	r7, #0
    3a7c:	mov	r9, sp
    3a80:	mov	r0, r9
    3a84:	mov	r1, r4
    3a88:	bl	15fc <coda_bin_cursor_read_double>
    3a8c:	cmp	r0, #0
    3a90:	bne	3b38 <coda_bin_cursor_read_double_partial_array+0x13c>
    3a94:	cmp	r7, r6
    3a98:	bge	3aac <coda_bin_cursor_read_double_partial_array+0xb0>
    3a9c:	mov	r0, r9
    3aa0:	bl	0 <coda_cursor_goto_next_array_element>
    3aa4:	cmp	r0, #0
    3aa8:	bne	3b38 <coda_bin_cursor_read_double_partial_array+0x13c>
    3aac:	add	r7, r7, #1
    3ab0:	add	r4, r4, #8
    3ab4:	cmp	r7, r5
    3ab8:	blt	3a80 <coda_bin_cursor_read_double_partial_array+0x84>
    3abc:	b	3b34 <coda_bin_cursor_read_double_partial_array+0x138>
    3ac0:	mov	r0, sp
    3ac4:	mov	r2, #520	; 0x208
    3ac8:	bl	0 <memcpy>
    3acc:	cmp	r5, #1
    3ad0:	blt	3b34 <coda_bin_cursor_read_double_partial_array+0x138>
    3ad4:	mov	r0, sp
    3ad8:	mov	r1, r6
    3adc:	bl	0 <coda_cursor_goto_array_element_by_index>
    3ae0:	mvn	r8, #0
    3ae4:	cmp	r0, #0
    3ae8:	bne	3b38 <coda_bin_cursor_read_double_partial_array+0x13c>
    3aec:	sub	r6, r5, #1
    3af0:	mov	r7, #0
    3af4:	mov	r9, sp
    3af8:	mov	r0, r9
    3afc:	mov	r1, r4
    3b00:	bl	0 <coda_ascii_cursor_read_double>
    3b04:	cmp	r0, #0
    3b08:	bne	3b38 <coda_bin_cursor_read_double_partial_array+0x13c>
    3b0c:	cmp	r7, r6
    3b10:	bge	3b24 <coda_bin_cursor_read_double_partial_array+0x128>
    3b14:	mov	r0, r9
    3b18:	bl	0 <coda_cursor_goto_next_array_element>
    3b1c:	cmp	r0, #0
    3b20:	bne	3b38 <coda_bin_cursor_read_double_partial_array+0x13c>
    3b24:	add	r7, r7, #1
    3b28:	add	r4, r4, #8
    3b2c:	cmp	r7, r5
    3b30:	blt	3af8 <coda_bin_cursor_read_double_partial_array+0xfc>
    3b34:	mov	r8, #0
    3b38:	mov	r0, r8
    3b3c:	sub	sp, fp, #24
    3b40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3b44:	movw	r0, #0
    3b48:	movw	r1, #0
    3b4c:	movw	r3, #0
    3b50:	movw	r2, #1318	; 0x526
    3b54:	movt	r0, #0
    3b58:	movt	r1, #0
    3b5c:	movt	r3, #0
    3b60:	bl	0 <__assert_fail>

00003b64 <coda_bin_cursor_read_char_partial_array>:
    3b64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3b68:	add	fp, sp, #24
    3b6c:	sub	sp, sp, #528	; 0x210
    3b70:	mov	r6, r1
    3b74:	mov	r1, r0
    3b78:	ldr	r0, [r0, #4]
    3b7c:	mov	r5, r2
    3b80:	mov	r4, r3
    3b84:	add	r0, r1, r0, lsl #4
    3b88:	ldr	r0, [r0, #-8]
    3b8c:	ldr	r2, [r0]
    3b90:	cmp	r2, #99	; 0x63
    3b94:	ldrhi	r0, [r0, #4]
    3b98:	ldr	r0, [r0, #40]	; 0x28
    3b9c:	ldr	r0, [r0]
    3ba0:	cmp	r0, #0
    3ba4:	beq	3c24 <coda_bin_cursor_read_char_partial_array+0xc0>
    3ba8:	cmp	r0, #1
    3bac:	bne	3ca4 <coda_bin_cursor_read_char_partial_array+0x140>
    3bb0:	mov	r0, sp
    3bb4:	mov	r2, #520	; 0x208
    3bb8:	bl	0 <memcpy>
    3bbc:	cmp	r5, #1
    3bc0:	blt	3c94 <coda_bin_cursor_read_char_partial_array+0x130>
    3bc4:	mov	r0, sp
    3bc8:	mov	r1, r6
    3bcc:	bl	0 <coda_cursor_goto_array_element_by_index>
    3bd0:	mvn	r8, #0
    3bd4:	cmp	r0, #0
    3bd8:	bne	3c98 <coda_bin_cursor_read_char_partial_array+0x134>
    3bdc:	sub	r6, r5, #1
    3be0:	mov	r7, #0
    3be4:	mov	r9, sp
    3be8:	add	r1, r4, r7
    3bec:	mov	r0, r9
    3bf0:	bl	944 <coda_bin_cursor_read_uint8>
    3bf4:	cmp	r0, #0
    3bf8:	bne	3c98 <coda_bin_cursor_read_char_partial_array+0x134>
    3bfc:	cmp	r7, r6
    3c00:	bge	3c14 <coda_bin_cursor_read_char_partial_array+0xb0>
    3c04:	mov	r0, r9
    3c08:	bl	0 <coda_cursor_goto_next_array_element>
    3c0c:	cmp	r0, #0
    3c10:	bne	3c98 <coda_bin_cursor_read_char_partial_array+0x134>
    3c14:	add	r7, r7, #1
    3c18:	cmp	r7, r5
    3c1c:	blt	3be8 <coda_bin_cursor_read_char_partial_array+0x84>
    3c20:	b	3c94 <coda_bin_cursor_read_char_partial_array+0x130>
    3c24:	mov	r0, sp
    3c28:	mov	r2, #520	; 0x208
    3c2c:	bl	0 <memcpy>
    3c30:	cmp	r5, #1
    3c34:	blt	3c94 <coda_bin_cursor_read_char_partial_array+0x130>
    3c38:	mov	r0, sp
    3c3c:	mov	r1, r6
    3c40:	bl	0 <coda_cursor_goto_array_element_by_index>
    3c44:	mvn	r8, #0
    3c48:	cmp	r0, #0
    3c4c:	bne	3c98 <coda_bin_cursor_read_char_partial_array+0x134>
    3c50:	sub	r6, r5, #1
    3c54:	mov	r7, #0
    3c58:	mov	r9, sp
    3c5c:	add	r1, r4, r7
    3c60:	mov	r0, r9
    3c64:	bl	0 <coda_ascii_cursor_read_char>
    3c68:	cmp	r0, #0
    3c6c:	bne	3c98 <coda_bin_cursor_read_char_partial_array+0x134>
    3c70:	cmp	r7, r6
    3c74:	bge	3c88 <coda_bin_cursor_read_char_partial_array+0x124>
    3c78:	mov	r0, r9
    3c7c:	bl	0 <coda_cursor_goto_next_array_element>
    3c80:	cmp	r0, #0
    3c84:	bne	3c98 <coda_bin_cursor_read_char_partial_array+0x134>
    3c88:	add	r7, r7, #1
    3c8c:	cmp	r7, r5
    3c90:	blt	3c5c <coda_bin_cursor_read_char_partial_array+0xf8>
    3c94:	mov	r8, #0
    3c98:	mov	r0, r8
    3c9c:	sub	sp, fp, #24
    3ca0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3ca4:	movw	r0, #0
    3ca8:	movw	r1, #0
    3cac:	movw	r3, #0
    3cb0:	movw	r2, #1332	; 0x534
    3cb4:	movt	r0, #0
    3cb8:	movt	r1, #0
    3cbc:	movt	r3, #0
    3cc0:	bl	0 <__assert_fail>
