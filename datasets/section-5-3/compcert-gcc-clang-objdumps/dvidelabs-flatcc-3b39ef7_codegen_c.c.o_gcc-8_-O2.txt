
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_c.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_str_set_destructor>:
   0:	mov	r0, r1
   4:	b	0 <free>

00000008 <checkmem.part.0>:
   8:	movw	r3, #0
   c:	movt	r3, #0
  10:	str	r4, [sp, #-8]!
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	ldr	r3, [r3]
  20:	mov	r2, #34	; 0x22
  24:	mov	r1, #1
  28:	str	lr, [sp, #4]
  2c:	bl	0 <fwrite>
  30:	mov	r0, #1
  34:	bl	0 <exit>

00000038 <__flatcc_fb_close_output_file.part.1>:
  38:	ldr	r3, [r0, #204]	; 0xcc
  3c:	cmp	r3, #0
  40:	bxeq	lr
  44:	str	r4, [sp, #-8]!
  48:	mov	r4, r0
  4c:	mov	r0, r3
  50:	str	lr, [sp, #4]
  54:	bl	0 <fclose>
  58:	mov	r3, #0
  5c:	str	r3, [r4, #204]	; 0xcc
  60:	ldr	r4, [sp]
  64:	add	sp, sp, #4
  68:	pop	{pc}		; (ldr pc, [sp], #4)

0000006c <__flatcc_fb_open_output_file>:
  6c:	strd	r4, [sp, #-28]!	; 0xffffffe4
  70:	strd	r6, [sp, #8]
  74:	mov	r6, r0
  78:	mov	r7, r1
  7c:	ldr	r0, [r0, #212]	; 0xd4
  80:	strd	r8, [sp, #16]
  84:	mov	r9, r2
  88:	mov	r8, r3
  8c:	str	lr, [sp, #24]
  90:	sub	sp, sp, #12
  94:	ldr	r5, [r0, #216]	; 0xd8
  98:	subs	r0, r5, #0
  9c:	beq	d0 <__flatcc_fb_open_output_file+0x64>
  a0:	bl	0 <strlen>
  a4:	ldr	r4, [r6, #204]	; 0xcc
  a8:	cmp	r4, #0
  ac:	movne	r4, #0
  b0:	beq	e8 <__flatcc_fb_open_output_file+0x7c>
  b4:	mov	r0, r4
  b8:	add	sp, sp, #12
  bc:	ldrd	r4, [sp]
  c0:	ldrd	r6, [sp, #8]
  c4:	ldrd	r8, [sp, #16]
  c8:	add	sp, sp, #24
  cc:	pop	{pc}		; (ldr pc, [sp], #4)
  d0:	ldr	r4, [r6, #204]	; 0xcc
  d4:	movw	r5, #0
  d8:	movt	r5, #0
  dc:	cmp	r4, #0
  e0:	movne	r4, #0
  e4:	bne	b4 <__flatcc_fb_open_output_file+0x48>
  e8:	mov	ip, #1
  ec:	mov	r1, r0
  f0:	mov	r3, r9
  f4:	mov	r0, r5
  f8:	mov	r2, r7
  fc:	stm	sp, {r8, ip}
 100:	bl	0 <__flatcc_fb_create_join_path_n>
 104:	subs	r5, r0, #0
 108:	beq	154 <__flatcc_fb_open_output_file+0xe8>
 10c:	movw	r1, #0
 110:	movt	r1, #0
 114:	bl	0 <fopen>
 118:	cmp	r0, #0
 11c:	str	r0, [r6, #204]	; 0xcc
 120:	beq	130 <__flatcc_fb_open_output_file+0xc4>
 124:	mov	r0, r5
 128:	bl	0 <free>
 12c:	b	b4 <__flatcc_fb_open_output_file+0x48>
 130:	movw	r3, #0
 134:	movt	r3, #0
 138:	movw	r1, #0
 13c:	movt	r1, #0
 140:	ldr	r0, [r3]
 144:	mov	r2, r5
 148:	mvn	r4, #0
 14c:	bl	0 <fprintf>
 150:	b	124 <__flatcc_fb_open_output_file+0xb8>
 154:	bl	8 <checkmem.part.0>

00000158 <__flatcc_fb_close_output_file>:
 158:	ldr	r3, [r0, #212]	; 0xd4
 15c:	ldr	r2, [r3, #124]	; 0x7c
 160:	cmp	r2, #0
 164:	beq	16c <__flatcc_fb_close_output_file+0x14>
 168:	bx	lr
 16c:	ldr	r3, [r3, #108]	; 0x6c
 170:	cmp	r3, #0
 174:	bne	168 <__flatcc_fb_close_output_file+0x10>
 178:	b	38 <__flatcc_fb_close_output_file.part.1>

0000017c <__flatcc_fb_end_output_c>:
 17c:	movw	r3, #0
 180:	movt	r3, #0
 184:	str	r4, [sp, #-8]!
 188:	mov	r4, r0
 18c:	ldr	r3, [r3]
 190:	ldr	r0, [r0, #204]	; 0xcc
 194:	str	lr, [sp, #4]
 198:	cmp	r3, r0
 19c:	cmpne	r0, #0
 1a0:	beq	1a8 <__flatcc_fb_end_output_c+0x2c>
 1a4:	bl	0 <fclose>
 1a8:	mov	r3, #0
 1ac:	str	r3, [r4, #204]	; 0xcc
 1b0:	ldr	r4, [sp]
 1b4:	add	sp, sp, #4
 1b8:	pop	{pc}		; (ldr pc, [sp], #4)

000001bc <__flatcc_fb_init_output_c>:
 1bc:	strd	r4, [sp, #-32]!	; 0xffffffe0
 1c0:	mov	r5, r1
 1c4:	movw	ip, #0
 1c8:	movt	ip, #0
 1cc:	movw	r3, #0
 1d0:	movt	r3, #0
 1d4:	str	lr, [sp, #28]
 1d8:	mov	r2, #232	; 0xe8
 1dc:	ldr	lr, [r1, #128]	; 0x80
 1e0:	mov	r4, r0
 1e4:	str	sl, [sp, #24]
 1e8:	ldr	sl, [r1, #216]	; 0xd8
 1ec:	mov	r1, #0
 1f0:	strd	r6, [sp, #8]
 1f4:	strd	r8, [sp, #16]
 1f8:	movw	r8, #0
 1fc:	movt	r8, #0
 200:	cmp	lr, r1
 204:	moveq	r8, ip
 208:	cmp	sl, r1
 20c:	moveq	sl, r3
 210:	bl	0 <memset>
 214:	ldr	r7, [r5, #196]	; 0xc4
 218:	str	r5, [r4, #212]	; 0xd4
 21c:	cmp	r7, #0
 220:	beq	340 <__flatcc_fb_init_output_c+0x184>
 224:	mov	r0, r7
 228:	bl	0 <strlen>
 22c:	cmp	r0, #100	; 0x64
 230:	mov	r6, r0
 234:	bhi	388 <__flatcc_fb_init_output_c+0x1cc>
 238:	mov	r1, r7
 23c:	mov	r2, #100	; 0x64
 240:	mov	r0, r4
 244:	bl	0 <strncpy>
 248:	mov	r3, #0
 24c:	cmp	r6, r3
 250:	strb	r3, [r4, #100]	; 0x64
 254:	bne	328 <__flatcc_fb_init_output_c+0x16c>
 258:	mov	r7, r4
 25c:	ldrb	r9, [r7], #102	; 0x66
 260:	cmp	r9, #0
 264:	beq	288 <__flatcc_fb_init_output_c+0xcc>
 268:	bl	0 <__ctype_toupper_loc>
 26c:	mov	r3, r4
 270:	ldr	r2, [r0]
 274:	ldr	r2, [r2, r9, lsl #2]
 278:	strb	r2, [r7], #1
 27c:	ldrb	r9, [r3, #1]!
 280:	cmp	r9, #0
 284:	bne	270 <__flatcc_fb_init_output_c+0xb4>
 288:	mov	r3, #0
 28c:	add	r6, r4, r6
 290:	strb	r3, [r7]
 294:	strb	r3, [r6, #102]	; 0x66
 298:	ldr	r6, [r5, #108]	; 0x6c
 29c:	ldr	r2, [r5, #176]	; 0xb0
 2a0:	cmp	r6, r3
 2a4:	str	r2, [r4, #224]	; 0xe0
 2a8:	bne	310 <__flatcc_fb_init_output_c+0x154>
 2ac:	ldr	r3, [r4, #212]	; 0xd4
 2b0:	ldr	r1, [r3, #124]	; 0x7c
 2b4:	cmp	r1, #0
 2b8:	beq	2f4 <__flatcc_fb_init_output_c+0x138>
 2bc:	mov	r0, sl
 2c0:	movw	r2, #0
 2c4:	movt	r2, #0
 2c8:	mov	r3, #1
 2cc:	bl	0 <__flatcc_fb_create_join_path>
 2d0:	subs	r5, r0, #0
 2d4:	beq	3ac <__flatcc_fb_init_output_c+0x1f0>
 2d8:	mov	r1, r8
 2dc:	bl	0 <fopen>
 2e0:	cmp	r0, #0
 2e4:	str	r0, [r4, #204]	; 0xcc
 2e8:	beq	364 <__flatcc_fb_init_output_c+0x1a8>
 2ec:	mov	r0, r5
 2f0:	bl	0 <free>
 2f4:	mov	r0, r6
 2f8:	ldrd	r4, [sp]
 2fc:	ldrd	r6, [sp, #8]
 300:	ldrd	r8, [sp, #16]
 304:	ldr	sl, [sp, #24]
 308:	add	sp, sp, #28
 30c:	pop	{pc}		; (ldr pc, [sp], #4)
 310:	movw	r2, #0
 314:	movt	r2, #0
 318:	ldr	r2, [r2]
 31c:	mov	r6, r3
 320:	str	r2, [r4, #204]	; 0xcc
 324:	b	2f4 <__flatcc_fb_init_output_c+0x138>
 328:	add	r1, r6, #1
 32c:	mov	r2, #95	; 0x5f
 330:	mov	r3, #0
 334:	strb	r2, [r4, r6]
 338:	strb	r3, [r4, r1]
 33c:	b	258 <__flatcc_fb_init_output_c+0x9c>
 340:	movw	r1, #0
 344:	movt	r1, #0
 348:	mov	r2, #100	; 0x64
 34c:	mov	r0, r4
 350:	bl	0 <strncpy>
 354:	mov	r6, #11
 358:	mov	r1, #12
 35c:	strb	r7, [r4, #100]	; 0x64
 360:	b	32c <__flatcc_fb_init_output_c+0x170>
 364:	movw	r3, #0
 368:	movt	r3, #0
 36c:	movw	r1, #0
 370:	movt	r1, #0
 374:	ldr	r0, [r3]
 378:	mov	r2, r5
 37c:	mvn	r6, #0
 380:	bl	0 <fprintf>
 384:	b	2ec <__flatcc_fb_init_output_c+0x130>
 388:	movw	r3, #0
 38c:	movt	r3, #0
 390:	movw	r1, #0
 394:	movt	r1, #0
 398:	ldr	r0, [r3]
 39c:	mov	r2, #100	; 0x64
 3a0:	mvn	r6, #0
 3a4:	bl	0 <fprintf>
 3a8:	b	2f4 <__flatcc_fb_init_output_c+0x138>
 3ac:	bl	8 <checkmem.part.0>

000003b0 <__flatcc_fb_gen_c_includes>:
 3b0:	ldr	r3, [r0, #208]	; 0xd0
 3b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
 3b8:	ldr	r5, [r3]
 3bc:	strd	r6, [sp, #8]
 3c0:	mov	r7, r0
 3c4:	mov	r0, #0
 3c8:	strd	r8, [sp, #16]
 3cc:	mov	r9, r1
 3d0:	mov	r1, #0
 3d4:	strd	sl, [sp, #24]
 3d8:	mov	sl, r2
 3dc:	mov	r2, #0
 3e0:	str	lr, [sp, #32]
 3e4:	sub	sp, sp, #28
 3e8:	strd	r0, [sp, #8]
 3ec:	ldr	r0, [r3, #164]	; 0xa4
 3f0:	mov	r3, #0
 3f4:	strd	r2, [sp, #16]
 3f8:	bl	0 <__flatcc_fb_copy_path>
 3fc:	mov	r1, r0
 400:	mov	r2, #1
 404:	add	r0, sp, #8
 408:	bl	0 <str_set_insert_item>
 40c:	cmp	r5, #0
 410:	beq	4a0 <__flatcc_fb_gen_c_includes+0xf0>
 414:	movw	r8, #0
 418:	movt	r8, #0
 41c:	ldr	r3, [r7, #212]	; 0xd4
 420:	ldrd	r0, [r5, #8]
 424:	ldr	r2, [r3, #96]	; 0x60
 428:	bl	0 <__flatcc_fb_create_basename>
 42c:	subs	r6, r0, #0
 430:	beq	4f4 <__flatcc_fb_gen_c_includes+0x144>
 434:	ldr	r5, [r5]
 438:	bl	0 <__flatcc_fb_copy_path>
 43c:	subs	fp, r0, #0
 440:	beq	4f4 <__flatcc_fb_gen_c_includes+0x144>
 444:	ldrb	r4, [fp]
 448:	cmp	r4, #0
 44c:	beq	470 <__flatcc_fb_gen_c_includes+0xc0>
 450:	bl	0 <__ctype_toupper_loc>
 454:	mov	r3, fp
 458:	ldr	r2, [r0]
 45c:	ldr	r2, [r2, r4, lsl #2]
 460:	strb	r2, [r3]
 464:	ldrb	r4, [r3, #1]!
 468:	cmp	r4, #0
 46c:	bne	458 <__flatcc_fb_gen_c_includes+0xa8>
 470:	mov	r2, #1
 474:	mov	r1, fp
 478:	add	r0, sp, #8
 47c:	bl	0 <str_set_insert_item>
 480:	cmp	r0, #0
 484:	beq	4d0 <__flatcc_fb_gen_c_includes+0x120>
 488:	mov	r0, fp
 48c:	bl	0 <free>
 490:	mov	r0, r6
 494:	bl	0 <free>
 498:	cmp	r5, #0
 49c:	bne	41c <__flatcc_fb_gen_c_includes+0x6c>
 4a0:	add	r0, sp, #8
 4a4:	mov	r2, #0
 4a8:	movw	r1, #0
 4ac:	movt	r1, #0
 4b0:	bl	0 <str_set_destroy>
 4b4:	add	sp, sp, #28
 4b8:	ldrd	r4, [sp]
 4bc:	ldrd	r6, [sp, #8]
 4c0:	ldrd	r8, [sp, #16]
 4c4:	ldrd	sl, [sp, #24]
 4c8:	add	sp, sp, #32
 4cc:	pop	{pc}		; (ldr pc, [sp], #4)
 4d0:	mov	r2, fp
 4d4:	mov	r3, sl
 4d8:	stm	sp, {r6, r9}
 4dc:	mov	r1, r8
 4e0:	ldr	r0, [r7, #204]	; 0xcc
 4e4:	bl	0 <fprintf>
 4e8:	mov	r0, r6
 4ec:	bl	0 <free>
 4f0:	b	498 <__flatcc_fb_gen_c_includes+0xe8>
 4f4:	movw	r3, #0
 4f8:	movt	r3, #0
 4fc:	movw	r0, #0
 500:	movt	r0, #0
 504:	ldr	r3, [r3]
 508:	mov	r2, #34	; 0x22
 50c:	mov	r1, #1
 510:	bl	0 <fwrite>
 514:	mov	r0, #1
 518:	bl	0 <exit>

0000051c <__flatcc_fb_copy_scope>:
 51c:	ldr	r3, [r0]
 520:	strd	r4, [sp, #-24]!	; 0xffffffe8
 524:	ldr	r4, [r0, #24]
 528:	strd	r6, [sp, #8]
 52c:	str	r8, [sp, #16]
 530:	cmp	r3, #0
 534:	str	lr, [sp, #20]
 538:	mov	ip, r4
 53c:	mov	r6, r4
 540:	beq	560 <__flatcc_fb_copy_scope+0x44>
 544:	ldr	r2, [r3, #4]
 548:	ldr	r3, [r3]
 54c:	ldr	r2, [r2, #4]
 550:	cmp	r3, #0
 554:	add	r2, r2, #1
 558:	add	ip, ip, r2
 55c:	bne	544 <__flatcc_fb_copy_scope+0x28>
 560:	cmp	ip, #101	; 0x65
 564:	movhi	r3, #0
 568:	mvnhi	r4, #0
 56c:	strbhi	r3, [r1]
 570:	bhi	5d4 <__flatcc_fb_copy_scope+0xb8>
 574:	mov	r5, r0
 578:	mov	r7, r1
 57c:	mov	r0, r1
 580:	mov	r2, r4
 584:	ldr	r1, [r5, #20]
 588:	bl	0 <memcpy>
 58c:	ldr	r5, [r5]
 590:	cmp	r5, #0
 594:	beq	5cc <__flatcc_fb_copy_scope+0xb0>
 598:	mov	r8, #95	; 0x5f
 59c:	ldr	r3, [r5, #4]
 5a0:	add	r0, r7, r6
 5a4:	ldm	r3, {r1, r4}
 5a8:	mov	r2, r4
 5ac:	add	r4, r4, r6
 5b0:	bl	0 <memcpy>
 5b4:	strb	r8, [r7, r4]
 5b8:	add	r6, r4, #1
 5bc:	ldr	r5, [r5]
 5c0:	cmp	r5, #0
 5c4:	bne	59c <__flatcc_fb_copy_scope+0x80>
 5c8:	mov	r4, r6
 5cc:	mov	r3, #0
 5d0:	strb	r3, [r7, r6]
 5d4:	mov	r0, r4
 5d8:	ldrd	r4, [sp]
 5dc:	ldrd	r6, [sp, #8]
 5e0:	ldr	r8, [sp, #16]
 5e4:	add	sp, sp, #20
 5e8:	pop	{pc}		; (ldr pc, [sp], #4)

000005ec <__flatcc_fb_scoped_symbol_name>:
 5ec:	ldr	r3, [r2, #204]	; 0xcc
 5f0:	strd	r4, [sp, #-16]!
 5f4:	mov	r4, r2
 5f8:	ldr	r5, [r1, #4]
 5fc:	str	r6, [sp, #8]
 600:	str	lr, [sp, #12]
 604:	cmp	r3, r0
 608:	beq	684 <__flatcc_fb_scoped_symbol_name+0x98>
 60c:	mov	r1, r2
 610:	bl	51c <__flatcc_fb_copy_scope>
 614:	cmp	r0, #0
 618:	strge	r0, [r4, #208]	; 0xd0
 61c:	blt	65c <__flatcc_fb_scoped_symbol_name+0x70>
 620:	ldm	r5, {r1, r2}
 624:	add	ip, r2, r0
 628:	str	r2, [r4, #212]	; 0xd4
 62c:	cmp	ip, #203	; 0xcb
 630:	str	ip, [r4, #216]	; 0xd8
 634:	bgt	68c <__flatcc_fb_scoped_symbol_name+0xa0>
 638:	add	r0, r4, r0
 63c:	bl	0 <memcpy>
 640:	ldr	r3, [r4, #216]	; 0xd8
 644:	mov	r2, #0
 648:	strb	r2, [r4, r3]
 64c:	ldrd	r4, [sp]
 650:	ldr	r6, [sp, #8]
 654:	add	sp, sp, #12
 658:	pop	{pc}		; (ldr pc, [sp], #4)
 65c:	mov	r1, #0
 660:	movw	r3, #0
 664:	movt	r3, #0
 668:	movw	r0, #0
 66c:	movt	r0, #0
 670:	mov	r2, #28
 674:	str	r1, [r4, #208]	; 0xd0
 678:	mov	r1, #1
 67c:	ldr	r3, [r3]
 680:	bl	0 <fwrite>
 684:	ldr	r0, [r4, #208]	; 0xd0
 688:	b	620 <__flatcc_fb_scoped_symbol_name+0x34>
 68c:	movw	r0, #0
 690:	movt	r0, #0
 694:	mov	r3, r1
 698:	movw	r1, #0
 69c:	movt	r1, #0
 6a0:	ldr	r0, [r0]
 6a4:	bl	0 <fprintf>
 6a8:	ldr	r0, [r4, #208]	; 0xd0
 6ac:	mov	r3, #203	; 0xcb
 6b0:	ldr	r1, [r5]
 6b4:	sub	r2, r3, r0
 6b8:	strd	r2, [r4, #212]	; 0xd4
 6bc:	b	638 <__flatcc_fb_scoped_symbol_name+0x4c>

000006c0 <__flatcc_fb_codegen_common_c>:
 6c0:	strd	r4, [sp, #-16]!
 6c4:	mov	r4, r0
 6c8:	str	r6, [sp, #8]
 6cc:	str	lr, [sp, #12]
 6d0:	bl	0 <strlen>
 6d4:	ldr	r3, [r4, #212]	; 0xd4
 6d8:	sub	r6, r0, #1
 6dc:	ldr	r2, [r3, #144]	; 0x90
 6e0:	cmp	r2, #0
 6e4:	bne	70c <__flatcc_fb_codegen_common_c+0x4c>
 6e8:	ldr	r3, [r3, #148]	; 0x94
 6ec:	cmp	r3, #0
 6f0:	bne	760 <__flatcc_fb_codegen_common_c+0xa0>
 6f4:	mov	r5, #0
 6f8:	mov	r0, r5
 6fc:	ldrd	r4, [sp]
 700:	ldr	r6, [sp, #8]
 704:	add	sp, sp, #12
 708:	pop	{pc}		; (ldr pc, [sp], #4)
 70c:	movw	r3, #0
 710:	movt	r3, #0
 714:	mov	r2, r6
 718:	mov	r1, r4
 71c:	mov	r0, r4
 720:	bl	6c <__flatcc_fb_open_output_file>
 724:	cmp	r0, #0
 728:	bne	7c8 <__flatcc_fb_codegen_common_c+0x108>
 72c:	mov	r0, r4
 730:	bl	0 <__flatcc_fb_gen_common_c_header>
 734:	ldr	r3, [r4, #212]	; 0xd4
 738:	mov	r5, r0
 73c:	ldr	r2, [r3, #124]	; 0x7c
 740:	cmp	r2, #0
 744:	beq	7b0 <__flatcc_fb_codegen_common_c+0xf0>
 748:	cmp	r5, #0
 74c:	bne	6f8 <__flatcc_fb_codegen_common_c+0x38>
 750:	ldr	r3, [r4, #212]	; 0xd4
 754:	ldr	r3, [r3, #148]	; 0x94
 758:	cmp	r3, #0
 75c:	beq	6f4 <__flatcc_fb_codegen_common_c+0x34>
 760:	mov	r2, r6
 764:	movw	r3, #0
 768:	movt	r3, #0
 76c:	mov	r1, r4
 770:	mov	r0, r4
 774:	bl	6c <__flatcc_fb_open_output_file>
 778:	cmp	r0, #0
 77c:	bne	7c8 <__flatcc_fb_codegen_common_c+0x108>
 780:	mov	r0, r4
 784:	bl	0 <__flatcc_fb_gen_common_c_builder_header>
 788:	ldr	r3, [r4, #212]	; 0xd4
 78c:	ldr	r2, [r3, #124]	; 0x7c
 790:	cmp	r2, #0
 794:	bne	6f4 <__flatcc_fb_codegen_common_c+0x34>
 798:	ldr	r5, [r3, #108]	; 0x6c
 79c:	cmp	r5, #0
 7a0:	bne	6f4 <__flatcc_fb_codegen_common_c+0x34>
 7a4:	mov	r0, r4
 7a8:	bl	38 <__flatcc_fb_close_output_file.part.1>
 7ac:	b	6f8 <__flatcc_fb_codegen_common_c+0x38>
 7b0:	ldr	r3, [r3, #108]	; 0x6c
 7b4:	cmp	r3, #0
 7b8:	bne	748 <__flatcc_fb_codegen_common_c+0x88>
 7bc:	mov	r0, r4
 7c0:	bl	38 <__flatcc_fb_close_output_file.part.1>
 7c4:	b	748 <__flatcc_fb_codegen_common_c+0x88>
 7c8:	mvn	r5, #0
 7cc:	b	6f8 <__flatcc_fb_codegen_common_c+0x38>

000007d0 <__flatcc_fb_codegen_c>:
 7d0:	mov	r3, r1
 7d4:	strd	r4, [sp, #-16]!
 7d8:	mov	r4, r0
 7dc:	mov	r2, #0
 7e0:	ldr	r0, [r1, #60]	; 0x3c
 7e4:	mov	r1, r2
 7e8:	str	r6, [sp, #8]
 7ec:	str	lr, [sp, #12]
 7f0:	str	r3, [r4, #208]	; 0xd0
 7f4:	bl	0 <fb_scope_table_find>
 7f8:	ldr	r3, [r4, #208]	; 0xd0
 7fc:	ldr	r5, [r3, #160]	; 0xa0
 800:	str	r0, [r4, #216]	; 0xd8
 804:	mov	r0, r5
 808:	bl	0 <strlen>
 80c:	ldr	r3, [r4, #212]	; 0xd4
 810:	mov	r6, r0
 814:	ldr	r2, [r3, #152]	; 0x98
 818:	cmp	r2, #0
 81c:	bne	924 <__flatcc_fb_codegen_c+0x154>
 820:	ldr	r2, [r3, #156]	; 0x9c
 824:	cmp	r2, #0
 828:	bne	980 <__flatcc_fb_codegen_c+0x1b0>
 82c:	ldr	r2, [r3, #160]	; 0xa0
 830:	cmp	r2, #0
 834:	bne	9e0 <__flatcc_fb_codegen_c+0x210>
 838:	ldr	r2, [r3, #164]	; 0xa4
 83c:	cmp	r2, #0
 840:	bne	868 <__flatcc_fb_codegen_c+0x98>
 844:	ldr	r3, [r3, #168]	; 0xa8
 848:	cmp	r3, #0
 84c:	bne	8c8 <__flatcc_fb_codegen_c+0xf8>
 850:	mov	r5, #0
 854:	mov	r0, r5
 858:	ldrd	r4, [sp]
 85c:	ldr	r6, [sp, #8]
 860:	add	sp, sp, #12
 864:	pop	{pc}		; (ldr pc, [sp], #4)
 868:	ldr	r1, [r4, #208]	; 0xd0
 86c:	movw	r3, #0
 870:	movt	r3, #0
 874:	mov	r2, r6
 878:	mov	r0, r4
 87c:	ldr	r1, [r1, #160]	; 0xa0
 880:	bl	6c <__flatcc_fb_open_output_file>
 884:	cmp	r0, #0
 888:	bne	a40 <__flatcc_fb_codegen_c+0x270>
 88c:	mov	r0, r4
 890:	bl	0 <__flatcc_fb_gen_c_json_parser>
 894:	subs	r5, r0, #0
 898:	bne	854 <__flatcc_fb_codegen_c+0x84>
 89c:	ldr	r3, [r4, #212]	; 0xd4
 8a0:	ldr	r2, [r3, #124]	; 0x7c
 8a4:	cmp	r2, #0
 8a8:	bne	844 <__flatcc_fb_codegen_c+0x74>
 8ac:	ldr	r2, [r3, #108]	; 0x6c
 8b0:	cmp	r2, #0
 8b4:	bne	844 <__flatcc_fb_codegen_c+0x74>
 8b8:	mov	r0, r4
 8bc:	bl	38 <__flatcc_fb_close_output_file.part.1>
 8c0:	ldr	r3, [r4, #212]	; 0xd4
 8c4:	b	844 <__flatcc_fb_codegen_c+0x74>
 8c8:	ldr	r1, [r4, #208]	; 0xd0
 8cc:	mov	r2, r6
 8d0:	movw	r3, #0
 8d4:	movt	r3, #0
 8d8:	mov	r0, r4
 8dc:	ldr	r1, [r1, #160]	; 0xa0
 8e0:	bl	6c <__flatcc_fb_open_output_file>
 8e4:	cmp	r0, #0
 8e8:	bne	a40 <__flatcc_fb_codegen_c+0x270>
 8ec:	mov	r0, r4
 8f0:	bl	0 <__flatcc_fb_gen_c_json_printer>
 8f4:	subs	r5, r0, #0
 8f8:	bne	854 <__flatcc_fb_codegen_c+0x84>
 8fc:	ldr	r3, [r4, #212]	; 0xd4
 900:	ldr	r2, [r3, #124]	; 0x7c
 904:	cmp	r2, #0
 908:	bne	850 <__flatcc_fb_codegen_c+0x80>
 90c:	ldr	r5, [r3, #108]	; 0x6c
 910:	cmp	r5, #0
 914:	bne	850 <__flatcc_fb_codegen_c+0x80>
 918:	mov	r0, r4
 91c:	bl	38 <__flatcc_fb_close_output_file.part.1>
 920:	b	854 <__flatcc_fb_codegen_c+0x84>
 924:	mov	r2, r0
 928:	mov	r1, r5
 92c:	movw	r3, #0
 930:	movt	r3, #0
 934:	mov	r0, r4
 938:	bl	6c <__flatcc_fb_open_output_file>
 93c:	cmp	r0, #0
 940:	bne	a40 <__flatcc_fb_codegen_c+0x270>
 944:	mov	r0, r4
 948:	bl	0 <__flatcc_fb_gen_c_reader>
 94c:	subs	r5, r0, #0
 950:	bne	854 <__flatcc_fb_codegen_c+0x84>
 954:	ldr	r3, [r4, #212]	; 0xd4
 958:	ldr	r2, [r3, #124]	; 0x7c
 95c:	cmp	r2, #0
 960:	bne	820 <__flatcc_fb_codegen_c+0x50>
 964:	ldr	r2, [r3, #108]	; 0x6c
 968:	cmp	r2, #0
 96c:	bne	820 <__flatcc_fb_codegen_c+0x50>
 970:	mov	r0, r4
 974:	bl	38 <__flatcc_fb_close_output_file.part.1>
 978:	ldr	r3, [r4, #212]	; 0xd4
 97c:	b	820 <__flatcc_fb_codegen_c+0x50>
 980:	ldr	r1, [r4, #208]	; 0xd0
 984:	movw	r3, #0
 988:	movt	r3, #0
 98c:	mov	r2, r6
 990:	mov	r0, r4
 994:	ldr	r1, [r1, #160]	; 0xa0
 998:	bl	6c <__flatcc_fb_open_output_file>
 99c:	cmp	r0, #0
 9a0:	bne	a40 <__flatcc_fb_codegen_c+0x270>
 9a4:	mov	r0, r4
 9a8:	bl	0 <__flatcc_fb_gen_c_builder>
 9ac:	subs	r5, r0, #0
 9b0:	bne	854 <__flatcc_fb_codegen_c+0x84>
 9b4:	ldr	r3, [r4, #212]	; 0xd4
 9b8:	ldr	r2, [r3, #124]	; 0x7c
 9bc:	cmp	r2, #0
 9c0:	bne	82c <__flatcc_fb_codegen_c+0x5c>
 9c4:	ldr	r2, [r3, #108]	; 0x6c
 9c8:	cmp	r2, #0
 9cc:	bne	82c <__flatcc_fb_codegen_c+0x5c>
 9d0:	mov	r0, r4
 9d4:	bl	38 <__flatcc_fb_close_output_file.part.1>
 9d8:	ldr	r3, [r4, #212]	; 0xd4
 9dc:	b	82c <__flatcc_fb_codegen_c+0x5c>
 9e0:	ldr	r1, [r4, #208]	; 0xd0
 9e4:	movw	r3, #0
 9e8:	movt	r3, #0
 9ec:	mov	r2, r6
 9f0:	mov	r0, r4
 9f4:	ldr	r1, [r1, #160]	; 0xa0
 9f8:	bl	6c <__flatcc_fb_open_output_file>
 9fc:	cmp	r0, #0
 a00:	bne	a40 <__flatcc_fb_codegen_c+0x270>
 a04:	mov	r0, r4
 a08:	bl	0 <__flatcc_fb_gen_c_verifier>
 a0c:	subs	r5, r0, #0
 a10:	bne	854 <__flatcc_fb_codegen_c+0x84>
 a14:	ldr	r3, [r4, #212]	; 0xd4
 a18:	ldr	r2, [r3, #124]	; 0x7c
 a1c:	cmp	r2, #0
 a20:	bne	838 <__flatcc_fb_codegen_c+0x68>
 a24:	ldr	r2, [r3, #108]	; 0x6c
 a28:	cmp	r2, #0
 a2c:	bne	838 <__flatcc_fb_codegen_c+0x68>
 a30:	mov	r0, r4
 a34:	bl	38 <__flatcc_fb_close_output_file.part.1>
 a38:	ldr	r3, [r4, #212]	; 0xd4
 a3c:	b	838 <__flatcc_fb_codegen_c+0x68>
 a40:	mvn	r5, #0
 a44:	b	854 <__flatcc_fb_codegen_c+0x84>
