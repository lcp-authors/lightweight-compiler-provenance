
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/pcre/pcre_byte_order.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <swap_uint32>:
   0:	push	{fp}		; (str fp, [sp, #-4]!)
   4:	add	fp, sp, #0
   8:	sub	sp, sp, #12
   c:	str	r0, [fp, #-8]
  10:	ldr	r3, [fp, #-8]
  14:	lsl	r2, r3, #24
  18:	ldr	r3, [fp, #-8]
  1c:	lsl	r3, r3, #8
  20:	and	r3, r3, #16711680	; 0xff0000
  24:	orr	r2, r2, r3
  28:	ldr	r3, [fp, #-8]
  2c:	lsr	r3, r3, #8
  30:	and	r3, r3, #65280	; 0xff00
  34:	orr	r2, r2, r3
  38:	ldr	r3, [fp, #-8]
  3c:	lsr	r3, r3, #24
  40:	orr	r3, r2, r3
  44:	mov	r0, r3
  48:	add	sp, fp, #0
  4c:	pop	{fp}		; (ldr fp, [sp], #4)
  50:	bx	lr

00000054 <swap_uint16>:
  54:	push	{fp}		; (str fp, [sp, #-4]!)
  58:	add	fp, sp, #0
  5c:	sub	sp, sp, #12
  60:	mov	r3, r0
  64:	strh	r3, [fp, #-6]
  68:	ldrh	r3, [fp, #-6]
  6c:	lsr	r3, r3, #8
  70:	uxth	r3, r3
  74:	sxth	r2, r3
  78:	ldrh	r3, [fp, #-6]
  7c:	lsl	r3, r3, #8
  80:	sxth	r3, r3
  84:	orr	r3, r2, r3
  88:	sxth	r3, r3
  8c:	uxth	r3, r3
  90:	mov	r0, r3
  94:	add	sp, fp, #0
  98:	pop	{fp}		; (ldr fp, [sp], #4)
  9c:	bx	lr

000000a0 <coda_pcre_pattern_to_host_byte_order>:
  a0:	str	fp, [sp, #-8]!
  a4:	str	lr, [sp, #4]
  a8:	add	fp, sp, #4
  ac:	sub	sp, sp, #24
  b0:	str	r0, [fp, #-16]
  b4:	str	r1, [fp, #-20]	; 0xffffffec
  b8:	str	r2, [fp, #-24]	; 0xffffffe8
  bc:	ldr	r3, [fp, #-16]
  c0:	str	r3, [fp, #-8]
  c4:	ldr	r3, [fp, #-8]
  c8:	cmp	r3, #0
  cc:	bne	d8 <coda_pcre_pattern_to_host_byte_order+0x38>
  d0:	mvn	r3, #1
  d4:	b	3b4 <coda_pcre_pattern_to_host_byte_order+0x314>
  d8:	ldr	r3, [fp, #-8]
  dc:	ldr	r2, [r3]
  e0:	movw	r3, #21061	; 0x5245
  e4:	movt	r3, #20547	; 0x5043
  e8:	cmp	r2, r3
  ec:	bne	120 <coda_pcre_pattern_to_host_byte_order+0x80>
  f0:	ldr	r3, [fp, #-8]
  f4:	ldr	r3, [r3, #12]
  f8:	and	r3, r3, #1
  fc:	cmp	r3, #0
 100:	bne	10c <coda_pcre_pattern_to_host_byte_order+0x6c>
 104:	mvn	r3, #27
 108:	b	3b4 <coda_pcre_pattern_to_host_byte_order+0x314>
 10c:	ldr	r3, [fp, #-8]
 110:	ldr	r2, [fp, #-24]	; 0xffffffe8
 114:	str	r2, [r3, #48]	; 0x30
 118:	mov	r3, #0
 11c:	b	3b4 <coda_pcre_pattern_to_host_byte_order+0x314>
 120:	ldr	r3, [fp, #-8]
 124:	ldr	r2, [r3]
 128:	movw	r3, #17232	; 0x4350
 12c:	movt	r3, #17746	; 0x4552
 130:	cmp	r2, r3
 134:	beq	140 <coda_pcre_pattern_to_host_byte_order+0xa0>
 138:	mvn	r3, #3
 13c:	b	3b4 <coda_pcre_pattern_to_host_byte_order+0x314>
 140:	ldr	r3, [fp, #-8]
 144:	ldr	r3, [r3, #12]
 148:	mov	r0, r3
 14c:	bl	0 <swap_uint32>
 150:	mov	r3, r0
 154:	and	r3, r3, #1
 158:	cmp	r3, #0
 15c:	bne	168 <coda_pcre_pattern_to_host_byte_order+0xc8>
 160:	mvn	r3, #27
 164:	b	3b4 <coda_pcre_pattern_to_host_byte_order+0x314>
 168:	ldr	r2, [fp, #-8]
 16c:	movw	r3, #21061	; 0x5245
 170:	movt	r3, #20547	; 0x5043
 174:	str	r3, [r2]
 178:	ldr	r3, [fp, #-8]
 17c:	ldr	r3, [r3, #4]
 180:	mov	r0, r3
 184:	bl	0 <swap_uint32>
 188:	mov	r2, r0
 18c:	ldr	r3, [fp, #-8]
 190:	str	r2, [r3, #4]
 194:	ldr	r3, [fp, #-8]
 198:	ldr	r3, [r3, #8]
 19c:	mov	r0, r3
 1a0:	bl	0 <swap_uint32>
 1a4:	mov	r2, r0
 1a8:	ldr	r3, [fp, #-8]
 1ac:	str	r2, [r3, #8]
 1b0:	ldr	r3, [fp, #-8]
 1b4:	ldr	r3, [r3, #12]
 1b8:	mov	r0, r3
 1bc:	bl	0 <swap_uint32>
 1c0:	mov	r2, r0
 1c4:	ldr	r3, [fp, #-8]
 1c8:	str	r2, [r3, #12]
 1cc:	ldr	r3, [fp, #-8]
 1d0:	ldr	r3, [r3, #16]
 1d4:	mov	r0, r3
 1d8:	bl	0 <swap_uint32>
 1dc:	mov	r2, r0
 1e0:	ldr	r3, [fp, #-8]
 1e4:	str	r2, [r3, #16]
 1e8:	ldr	r3, [fp, #-8]
 1ec:	ldr	r3, [r3, #20]
 1f0:	mov	r0, r3
 1f4:	bl	0 <swap_uint32>
 1f8:	mov	r2, r0
 1fc:	ldr	r3, [fp, #-8]
 200:	str	r2, [r3, #20]
 204:	ldr	r3, [fp, #-8]
 208:	ldrh	r3, [r3, #24]
 20c:	mov	r0, r3
 210:	bl	54 <swap_uint16>
 214:	mov	r3, r0
 218:	mov	r2, r3
 21c:	ldr	r3, [fp, #-8]
 220:	strh	r2, [r3, #24]
 224:	ldr	r3, [fp, #-8]
 228:	ldrh	r3, [r3, #26]
 22c:	mov	r0, r3
 230:	bl	54 <swap_uint16>
 234:	mov	r3, r0
 238:	mov	r2, r3
 23c:	ldr	r3, [fp, #-8]
 240:	strh	r2, [r3, #26]
 244:	ldr	r3, [fp, #-8]
 248:	ldrh	r3, [r3, #28]
 24c:	mov	r0, r3
 250:	bl	54 <swap_uint16>
 254:	mov	r3, r0
 258:	mov	r2, r3
 25c:	ldr	r3, [fp, #-8]
 260:	strh	r2, [r3, #28]
 264:	ldr	r3, [fp, #-8]
 268:	ldrh	r3, [r3, #30]
 26c:	mov	r0, r3
 270:	bl	54 <swap_uint16>
 274:	mov	r3, r0
 278:	mov	r2, r3
 27c:	ldr	r3, [fp, #-8]
 280:	strh	r2, [r3, #30]
 284:	ldr	r3, [fp, #-8]
 288:	ldrh	r3, [r3, #32]
 28c:	mov	r0, r3
 290:	bl	54 <swap_uint16>
 294:	mov	r3, r0
 298:	mov	r2, r3
 29c:	ldr	r3, [fp, #-8]
 2a0:	strh	r2, [r3, #32]
 2a4:	ldr	r3, [fp, #-8]
 2a8:	ldrh	r3, [r3, #34]	; 0x22
 2ac:	mov	r0, r3
 2b0:	bl	54 <swap_uint16>
 2b4:	mov	r3, r0
 2b8:	mov	r2, r3
 2bc:	ldr	r3, [fp, #-8]
 2c0:	strh	r2, [r3, #34]	; 0x22
 2c4:	ldr	r3, [fp, #-8]
 2c8:	ldrh	r3, [r3, #36]	; 0x24
 2cc:	mov	r0, r3
 2d0:	bl	54 <swap_uint16>
 2d4:	mov	r3, r0
 2d8:	mov	r2, r3
 2dc:	ldr	r3, [fp, #-8]
 2e0:	strh	r2, [r3, #36]	; 0x24
 2e4:	ldr	r3, [fp, #-8]
 2e8:	ldrh	r3, [r3, #38]	; 0x26
 2ec:	mov	r0, r3
 2f0:	bl	54 <swap_uint16>
 2f4:	mov	r3, r0
 2f8:	mov	r2, r3
 2fc:	ldr	r3, [fp, #-8]
 300:	strh	r2, [r3, #38]	; 0x26
 304:	ldr	r3, [fp, #-8]
 308:	ldrh	r3, [r3, #40]	; 0x28
 30c:	mov	r0, r3
 310:	bl	54 <swap_uint16>
 314:	mov	r3, r0
 318:	mov	r2, r3
 31c:	ldr	r3, [fp, #-8]
 320:	strh	r2, [r3, #40]	; 0x28
 324:	ldr	r3, [fp, #-8]
 328:	ldr	r2, [fp, #-24]	; 0xffffffe8
 32c:	str	r2, [r3, #48]	; 0x30
 330:	ldr	r3, [fp, #-20]	; 0xffffffec
 334:	cmp	r3, #0
 338:	beq	3b0 <coda_pcre_pattern_to_host_byte_order+0x310>
 33c:	ldr	r3, [fp, #-20]	; 0xffffffec
 340:	ldr	r3, [r3]
 344:	and	r3, r3, #1
 348:	cmp	r3, #0
 34c:	beq	3b0 <coda_pcre_pattern_to_host_byte_order+0x310>
 350:	ldr	r3, [fp, #-20]	; 0xffffffec
 354:	ldr	r3, [r3, #4]
 358:	str	r3, [fp, #-12]
 35c:	ldr	r3, [fp, #-12]
 360:	ldr	r3, [r3]
 364:	mov	r0, r3
 368:	bl	0 <swap_uint32>
 36c:	mov	r2, r0
 370:	ldr	r3, [fp, #-12]
 374:	str	r2, [r3]
 378:	ldr	r3, [fp, #-12]
 37c:	ldr	r3, [r3, #4]
 380:	mov	r0, r3
 384:	bl	0 <swap_uint32>
 388:	mov	r2, r0
 38c:	ldr	r3, [fp, #-12]
 390:	str	r2, [r3, #4]
 394:	ldr	r3, [fp, #-12]
 398:	ldr	r3, [r3, #40]	; 0x28
 39c:	mov	r0, r3
 3a0:	bl	0 <swap_uint32>
 3a4:	mov	r2, r0
 3a8:	ldr	r3, [fp, #-12]
 3ac:	str	r2, [r3, #40]	; 0x28
 3b0:	mov	r3, #0
 3b4:	mov	r0, r3
 3b8:	sub	sp, fp, #4
 3bc:	ldr	fp, [sp]
 3c0:	add	sp, sp, #4
 3c4:	pop	{pc}		; (ldr pc, [sp], #4)
