
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-traverse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_array_dim>:
   0:	add	r1, r1, r1, lsl #2
   4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   8:	strd	r6, [sp, #8]
   c:	lsl	r1, r1, #4
  10:	str	r8, [sp, #16]
  14:	movw	r8, #0
  18:	movt	r8, #0
  1c:	str	lr, [sp, #20]
  20:	add	r6, r8, r1
  24:	ldr	r3, [r6, #804]	; 0x324
  28:	cmp	r3, #0
  2c:	ble	a8 <print_array_dim+0xa8>
  30:	add	r1, r1, #808	; 0x328
  34:	movw	r7, #0
  38:	movt	r7, #0
  3c:	mov	r5, r0
  40:	add	r8, r8, r1
  44:	mov	r4, #0
  48:	ldr	r2, [r7]
  4c:	movw	r3, #0
  50:	movt	r3, #0
  54:	cmp	r2, #0
  58:	beq	c4 <print_array_dim+0xc4>
  5c:	ldr	r2, [r6, #800]	; 0x320
  60:	movw	r1, #0
  64:	movt	r1, #0
  68:	mov	r0, r5
  6c:	add	r2, r4, r2
  70:	add	ip, r2, #18
  74:	add	lr, r3, r2, lsl #2
  78:	ldr	ip, [r3, ip, lsl #2]
  7c:	ldr	r3, [lr, #4]
  80:	cmp	ip, #0
  84:	beq	e8 <print_array_dim+0xe8>
  88:	ldr	r2, [lr, #36]	; 0x24
  8c:	bl	0 <fprintf>
  90:	ldr	r3, [r6, #804]	; 0x324
  94:	add	r4, r4, #1
  98:	mov	r1, r5
  9c:	mov	r0, #44	; 0x2c
  a0:	cmp	r4, r3
  a4:	blt	bc <print_array_dim+0xbc>
  a8:	ldrd	r4, [sp]
  ac:	ldrd	r6, [sp, #8]
  b0:	ldr	r8, [sp, #16]
  b4:	add	sp, sp, #20
  b8:	pop	{pc}		; (ldr pc, [sp], #4)
  bc:	bl	0 <fputc>
  c0:	b	48 <print_array_dim+0x48>
  c4:	ldr	r3, [r8, r4, lsl #2]
  c8:	movw	r1, #0
  cc:	movt	r1, #0
  d0:	mov	r0, r5
  d4:	cmn	r3, #1
  d8:	mov	r2, r3
  dc:	beq	fc <print_array_dim+0xfc>
  e0:	bl	0 <fprintf>
  e4:	b	90 <print_array_dim+0x90>
  e8:	mov	r2, r3
  ec:	movw	r1, #0
  f0:	movt	r1, #0
  f4:	bl	0 <fprintf>
  f8:	b	90 <print_array_dim+0x90>
  fc:	mov	r1, r5
 100:	mov	r0, #63	; 0x3f
 104:	bl	0 <fputc>
 108:	b	90 <print_array_dim+0x90>

0000010c <print_full_field_name>:
 10c:	strd	r4, [sp, #-36]!	; 0xffffffdc
 110:	cmp	r1, #1
 114:	mov	r5, r0
 118:	strd	r6, [sp, #8]
 11c:	strd	r8, [sp, #16]
 120:	strd	sl, [sp, #24]
 124:	str	lr, [sp, #32]
 128:	sub	sp, sp, #20
 12c:	str	r2, [sp, #4]
 130:	beq	2ac <print_full_field_name+0x1a0>
 134:	movw	r4, #0
 138:	movt	r4, #0
 13c:	ldr	r3, [r4, #3748]	; 0xea4
 140:	mov	r8, r1
 144:	cmp	r3, #0
 148:	ble	180 <print_full_field_name+0x74>
 14c:	add	r7, r4, #3616	; 0xe20
 150:	mov	r6, #0
 154:	b	15c <print_full_field_name+0x50>
 158:	bl	0 <fputc>
 15c:	mov	r1, r5
 160:	ldr	r0, [r7, #4]!
 164:	add	r6, r6, #1
 168:	bl	0 <fputs>
 16c:	ldr	r3, [r4, #3748]	; 0xea4
 170:	mov	r1, r5
 174:	mov	r0, #46	; 0x2e
 178:	cmp	r3, r6
 17c:	bgt	158 <print_full_field_name+0x4c>
 180:	cmp	r8, #2
 184:	beq	1a4 <print_full_field_name+0x98>
 188:	add	sp, sp, #20
 18c:	ldrd	r4, [sp]
 190:	ldrd	r6, [sp, #8]
 194:	ldrd	r8, [sp, #16]
 198:	ldrd	sl, [sp, #24]
 19c:	add	sp, sp, #32
 1a0:	pop	{pc}		; (ldr pc, [sp], #4)
 1a4:	ldr	r3, [r4, #136]	; 0x88
 1a8:	cmp	r3, #0
 1ac:	ble	414 <print_full_field_name+0x308>
 1b0:	mov	r8, #0
 1b4:	movw	sl, #0
 1b8:	movt	sl, #0
 1bc:	ldr	r7, [pc, #624]	; 434 <print_full_field_name+0x328>
 1c0:	mov	r6, r8
 1c4:	add	r9, sp, #12
 1c8:	b	1dc <print_full_field_name+0xd0>
 1cc:	ldr	r3, [r4, #136]	; 0x88
 1d0:	add	r6, r6, #1
 1d4:	cmp	r3, r6
 1d8:	ble	258 <print_full_field_name+0x14c>
 1dc:	mov	r1, r9
 1e0:	ldr	r0, [r7, #4]!
 1e4:	bl	0 <coda_type_get_class>
 1e8:	cmp	r0, #0
 1ec:	bne	3dc <print_full_field_name+0x2d0>
 1f0:	ldr	ip, [sp, #12]
 1f4:	cmp	ip, #1
 1f8:	bne	1cc <print_full_field_name+0xc0>
 1fc:	add	r3, r8, r8, lsl #2
 200:	add	r3, r4, r3, lsl #4
 204:	ldr	r2, [r3, #804]	; 0x324
 208:	cmp	r2, #0
 20c:	ble	1cc <print_full_field_name+0xc0>
 210:	ldr	lr, [r3, #800]	; 0x320
 214:	mov	r1, r5
 218:	mov	r0, #44	; 0x2c
 21c:	mov	r2, #2
 220:	mov	r3, r5
 224:	cmp	lr, #0
 228:	bne	3f0 <print_full_field_name+0x2e4>
 22c:	mov	r1, ip
 230:	mov	r0, sl
 234:	bl	0 <fwrite>
 238:	mov	r1, r8
 23c:	mov	r0, r5
 240:	bl	0 <print_array_dim>
 244:	ldr	r3, [r4, #136]	; 0x88
 248:	add	r6, r6, #1
 24c:	add	r8, r8, #1
 250:	cmp	r3, r6
 254:	bgt	1dc <print_full_field_name+0xd0>
 258:	ldr	r3, [sp, #4]
 25c:	cmp	r3, #0
 260:	beq	3e4 <print_full_field_name+0x2d8>
 264:	ldr	r3, [r4, #3360]	; 0xd20
 268:	cmp	r3, r8
 26c:	ble	3e4 <print_full_field_name+0x2d8>
 270:	add	r3, r8, r8, lsl #2
 274:	add	r4, r4, r3, lsl #4
 278:	ldr	r3, [r4, #800]	; 0x320
 27c:	cmp	r3, #0
 280:	beq	3f8 <print_full_field_name+0x2ec>
 284:	mov	r1, r5
 288:	mov	r0, #44	; 0x2c
 28c:	bl	0 <fputc>
 290:	mov	r1, r8
 294:	mov	r0, r5
 298:	bl	0 <print_array_dim>
 29c:	mov	r1, r5
 2a0:	mov	r0, #93	; 0x5d
 2a4:	bl	0 <fputc>
 2a8:	b	188 <print_full_field_name+0x7c>
 2ac:	movw	r4, #0
 2b0:	movt	r4, #0
 2b4:	ldr	r3, [r4, #136]	; 0x88
 2b8:	mov	r8, #0
 2bc:	cmp	r3, #0
 2c0:	ble	384 <print_full_field_name+0x278>
 2c4:	movw	fp, #0
 2c8:	movt	fp, #0
 2cc:	mov	sl, r8
 2d0:	mov	r6, r8
 2d4:	add	r7, r4, #4
 2d8:	add	r9, sp, #12
 2dc:	b	33c <print_full_field_name+0x230>
 2e0:	cmp	r3, #1
 2e4:	bne	32c <print_full_field_name+0x220>
 2e8:	cmp	r6, #0
 2ec:	beq	3cc <print_full_field_name+0x2c0>
 2f0:	add	r3, r8, r8, lsl #2
 2f4:	add	r3, r4, r3, lsl #4
 2f8:	ldr	r3, [r3, #804]	; 0x324
 2fc:	cmp	r3, #0
 300:	ble	328 <print_full_field_name+0x21c>
 304:	mov	r1, r5
 308:	mov	r0, #91	; 0x5b
 30c:	bl	0 <fputc>
 310:	mov	r1, r8
 314:	mov	r0, r5
 318:	bl	0 <print_array_dim>
 31c:	mov	r1, r5
 320:	mov	r0, #93	; 0x5d
 324:	bl	0 <fputc>
 328:	add	r8, r8, #1
 32c:	ldr	r3, [r4, #136]	; 0x88
 330:	add	r6, r6, #1
 334:	cmp	r3, r6
 338:	ble	384 <print_full_field_name+0x278>
 33c:	mov	r1, r9
 340:	ldr	r0, [r7, #4]!
 344:	bl	0 <coda_type_get_class>
 348:	cmp	r0, #0
 34c:	bne	3c4 <print_full_field_name+0x2b8>
 350:	ldr	r3, [sp, #12]
 354:	cmp	r3, #0
 358:	bne	2e0 <print_full_field_name+0x1d4>
 35c:	add	r3, r4, sl, lsl #2
 360:	mov	r1, fp
 364:	mov	r0, r5
 368:	add	r6, r6, #1
 36c:	add	sl, sl, #1
 370:	ldr	r2, [r3, #3620]	; 0xe24
 374:	bl	0 <fprintf>
 378:	ldr	r3, [r4, #136]	; 0x88
 37c:	cmp	r3, r6
 380:	bgt	33c <print_full_field_name+0x230>
 384:	ldr	r3, [sp, #4]
 388:	cmp	r3, #0
 38c:	beq	188 <print_full_field_name+0x7c>
 390:	ldr	r3, [r4, #3360]	; 0xd20
 394:	cmp	r3, r8
 398:	ble	188 <print_full_field_name+0x7c>
 39c:	mov	r1, r5
 3a0:	mov	r0, #91	; 0x5b
 3a4:	bl	0 <fputc>
 3a8:	mov	r1, r8
 3ac:	mov	r0, r5
 3b0:	bl	0 <print_array_dim>
 3b4:	mov	r1, r5
 3b8:	mov	r0, #93	; 0x5d
 3bc:	bl	0 <fputc>
 3c0:	b	188 <print_full_field_name+0x7c>
 3c4:	bl	0 <handle_coda_error>
 3c8:	b	350 <print_full_field_name+0x244>
 3cc:	mov	r1, r5
 3d0:	mov	r0, #47	; 0x2f
 3d4:	bl	0 <fputc>
 3d8:	b	2f0 <print_full_field_name+0x1e4>
 3dc:	bl	0 <handle_coda_error>
 3e0:	b	1f0 <print_full_field_name+0xe4>
 3e4:	cmp	r8, #0
 3e8:	beq	188 <print_full_field_name+0x7c>
 3ec:	b	29c <print_full_field_name+0x190>
 3f0:	bl	0 <fputc>
 3f4:	b	238 <print_full_field_name+0x12c>
 3f8:	movw	r0, #0
 3fc:	movt	r0, #0
 400:	mov	r3, r5
 404:	mov	r2, #2
 408:	mov	r1, #1
 40c:	bl	0 <fwrite>
 410:	b	290 <print_full_field_name+0x184>
 414:	ldr	r3, [sp, #4]
 418:	cmp	r3, #0
 41c:	beq	188 <print_full_field_name+0x7c>
 420:	ldr	r3, [r4, #3360]	; 0xd20
 424:	cmp	r3, #0
 428:	ble	188 <print_full_field_name+0x7c>
 42c:	mov	r8, #0
 430:	b	270 <print_full_field_name+0x164>
 434:	.word	0x00000004

00000438 <handle_data_element>:
 438:	movw	r3, #0
 43c:	movt	r3, #0
 440:	strd	r4, [sp, #-12]!
 444:	ldr	r2, [r3]
 448:	str	lr, [sp, #8]
 44c:	sub	sp, sp, #12
 450:	cmp	r2, #0
 454:	beq	470 <handle_data_element+0x38>
 458:	cmp	r2, #1
 45c:	beq	51c <handle_data_element+0xe4>
 460:	add	sp, sp, #12
 464:	ldrd	r4, [sp]
 468:	add	sp, sp, #8
 46c:	pop	{pc}		; (ldr pc, [sp], #4)
 470:	movw	r4, #0
 474:	movt	r4, #0
 478:	mov	r1, #1
 47c:	ldr	r0, [r4]
 480:	bl	10c <print_full_field_name>
 484:	movw	r3, #0
 488:	movt	r3, #0
 48c:	ldr	r3, [r3]
 490:	cmp	r3, #0
 494:	bne	530 <handle_data_element+0xf8>
 498:	movw	r3, #0
 49c:	movt	r3, #0
 4a0:	ldr	r3, [r3]
 4a4:	cmp	r3, #0
 4a8:	bne	61c <handle_data_element+0x1e4>
 4ac:	movw	r3, #0
 4b0:	movt	r3, #0
 4b4:	ldr	r3, [r3]
 4b8:	cmp	r3, #0
 4bc:	bne	5d0 <handle_data_element+0x198>
 4c0:	mov	r0, #10
 4c4:	bl	0 <putchar>
 4c8:	movw	r3, #0
 4cc:	movt	r3, #0
 4d0:	ldr	r3, [r3]
 4d4:	cmp	r3, #0
 4d8:	beq	460 <handle_data_element+0x28>
 4dc:	movw	r5, #0
 4e0:	movt	r5, #0
 4e4:	ldr	r3, [r5]
 4e8:	cmp	r3, #0
 4ec:	ble	460 <handle_data_element+0x28>
 4f0:	mov	r4, #0
 4f4:	mov	r0, r4
 4f8:	add	r4, r4, #1
 4fc:	bl	0 <print_all_distinct_dims>
 500:	ldr	r3, [r5]
 504:	cmp	r4, r3
 508:	blt	4f4 <handle_data_element+0xbc>
 50c:	add	sp, sp, #12
 510:	ldrd	r4, [sp]
 514:	add	sp, sp, #8
 518:	pop	{pc}		; (ldr pc, [sp], #4)
 51c:	bl	0 <export_data_element_to_ascii>
 520:	add	sp, sp, #12
 524:	ldrd	r4, [sp]
 528:	add	sp, sp, #8
 52c:	pop	{pc}		; (ldr pc, [sp], #4)
 530:	movw	r5, #0
 534:	movt	r5, #0
 538:	ldr	r3, [r5, #136]	; 0x88
 53c:	mov	r1, sp
 540:	add	r3, r3, #2
 544:	ldr	r0, [r5, r3, lsl #2]
 548:	bl	0 <coda_type_get_class>
 54c:	cmp	r0, #0
 550:	bne	6a0 <handle_data_element+0x268>
 554:	ldr	r2, [sp]
 558:	add	r1, sp, #4
 55c:	ldr	r3, [r5, #136]	; 0x88
 560:	cmp	r2, #6
 564:	add	r3, r3, #2
 568:	ldr	r0, [r5, r3, lsl #2]
 56c:	beq	670 <handle_data_element+0x238>
 570:	bl	0 <coda_type_get_read_type>
 574:	cmp	r0, #0
 578:	bne	668 <handle_data_element+0x230>
 57c:	ldr	r0, [sp, #4]
 580:	bl	0 <coda_type_get_native_type_name>
 584:	mov	r1, r0
 588:	movw	r0, #0
 58c:	movt	r0, #0
 590:	bl	0 <printf>
 594:	ldr	r3, [sp, #4]
 598:	sub	r3, r3, #11
 59c:	cmp	r3, #1
 5a0:	bhi	498 <handle_data_element+0x60>
 5a4:	mov	r0, #40	; 0x28
 5a8:	bl	0 <putchar>
 5ac:	ldr	r1, [r5, #3360]	; 0xd20
 5b0:	cmp	r1, #0
 5b4:	ble	6b8 <handle_data_element+0x280>
 5b8:	sub	r1, r1, #1
 5bc:	ldr	r0, [r4]
 5c0:	bl	0 <print_array_dim>
 5c4:	mov	r0, #41	; 0x29
 5c8:	bl	0 <putchar>
 5cc:	b	498 <handle_data_element+0x60>
 5d0:	movw	r3, #0
 5d4:	movt	r3, #0
 5d8:	ldr	r2, [r3, #136]	; 0x88
 5dc:	add	r1, sp, #4
 5e0:	add	r2, r2, #2
 5e4:	ldr	r0, [r3, r2, lsl #2]
 5e8:	bl	0 <coda_type_get_description>
 5ec:	cmp	r0, #0
 5f0:	bne	6a8 <handle_data_element+0x270>
 5f4:	ldr	r1, [sp, #4]
 5f8:	cmp	r1, #0
 5fc:	beq	4c0 <handle_data_element+0x88>
 600:	ldrb	r3, [r1]
 604:	cmp	r3, #0
 608:	beq	4c0 <handle_data_element+0x88>
 60c:	movw	r0, #0
 610:	movt	r0, #0
 614:	bl	0 <printf>
 618:	b	4c0 <handle_data_element+0x88>
 61c:	movw	r3, #0
 620:	movt	r3, #0
 624:	ldr	r2, [r3, #136]	; 0x88
 628:	add	r1, sp, #4
 62c:	add	r2, r2, #2
 630:	ldr	r0, [r3, r2, lsl #2]
 634:	bl	0 <coda_type_get_unit>
 638:	cmp	r0, #0
 63c:	bne	698 <handle_data_element+0x260>
 640:	ldr	r1, [sp, #4]
 644:	cmp	r1, #0
 648:	beq	4ac <handle_data_element+0x74>
 64c:	ldrb	r3, [r1]
 650:	cmp	r3, #0
 654:	beq	4ac <handle_data_element+0x74>
 658:	movw	r0, #0
 65c:	movt	r0, #0
 660:	bl	0 <printf>
 664:	b	4ac <handle_data_element+0x74>
 668:	bl	0 <handle_coda_error>
 66c:	b	57c <handle_data_element+0x144>
 670:	bl	0 <coda_type_get_special_type>
 674:	cmp	r0, #0
 678:	bne	6b0 <handle_data_element+0x278>
 67c:	ldr	r0, [sp, #4]
 680:	bl	0 <coda_type_get_special_type_name>
 684:	mov	r1, r0
 688:	movw	r0, #0
 68c:	movt	r0, #0
 690:	bl	0 <printf>
 694:	b	498 <handle_data_element+0x60>
 698:	bl	0 <handle_coda_error>
 69c:	b	640 <handle_data_element+0x208>
 6a0:	bl	0 <handle_coda_error>
 6a4:	b	554 <handle_data_element+0x11c>
 6a8:	bl	0 <handle_coda_error>
 6ac:	b	5f4 <handle_data_element+0x1bc>
 6b0:	bl	0 <handle_coda_error>
 6b4:	b	67c <handle_data_element+0x244>
 6b8:	movw	r3, #0
 6bc:	movt	r3, #0
 6c0:	movw	r1, #0
 6c4:	movt	r1, #0
 6c8:	movw	r0, #0
 6cc:	movt	r0, #0
 6d0:	mov	r2, #238	; 0xee
 6d4:	bl	0 <__assert_fail>

000006d8 <traverse_data>:
 6d8:	strd	r4, [sp, #-16]!
 6dc:	movw	r4, #0
 6e0:	movt	r4, #0
 6e4:	ldr	r3, [r4, #136]	; 0x88
 6e8:	str	r6, [sp, #8]
 6ec:	str	lr, [sp, #12]
 6f0:	sub	sp, sp, #16
 6f4:	add	r1, sp, #4
 6f8:	add	r3, r3, #2
 6fc:	ldr	r0, [r4, r3, lsl #2]
 700:	bl	0 <coda_type_get_class>
 704:	cmp	r0, #0
 708:	bne	944 <traverse_data+0x26c>
 70c:	ldr	r3, [sp, #4]
 710:	cmp	r3, #6
 714:	ldrls	pc, [pc, r3, lsl #2]
 718:	b	84c <traverse_data+0x174>
 71c:	.word	0x00000738
 720:	.word	0x000008dc
 724:	.word	0x000008a8
 728:	.word	0x000008a8
 72c:	.word	0x000008a8
 730:	.word	0x000008a8
 734:	.word	0x00000860
 738:	ldr	r3, [r4, #136]	; 0x88
 73c:	cmp	r3, #30
 740:	bgt	84c <traverse_data+0x174>
 744:	ldr	r2, [r4, #3748]	; 0xea4
 748:	add	r3, r3, #2
 74c:	add	r1, sp, #8
 750:	ldr	r0, [r4, r3, lsl #2]
 754:	add	r3, r2, #1
 758:	str	r3, [r4, #3748]	; 0xea4
 75c:	bl	0 <coda_type_get_num_record_fields>
 760:	cmp	r0, #0
 764:	beq	76c <traverse_data+0x94>
 768:	bl	0 <handle_coda_error>
 76c:	ldr	r3, [r4, #136]	; 0x88
 770:	ldr	r2, [r4, #796]	; 0x31c
 774:	add	r2, r2, #166	; 0xa6
 778:	ldr	r6, [r4, r2, lsl #2]
 77c:	add	r2, r3, #1
 780:	str	r2, [r4, #136]	; 0x88
 784:	cmp	r6, #0
 788:	beq	9ac <traverse_data+0x2d4>
 78c:	mov	r0, r6
 790:	bl	0 <codadump_filter_get_fieldname>
 794:	subs	r5, r0, #0
 798:	beq	9f4 <traverse_data+0x31c>
 79c:	ldr	r3, [r4, #136]	; 0x88
 7a0:	add	r2, sp, #12
 7a4:	mov	r1, r5
 7a8:	add	r3, r3, #1
 7ac:	ldr	r0, [r4, r3, lsl #2]
 7b0:	bl	0 <coda_type_get_record_field_index_from_name>
 7b4:	cmp	r0, #0
 7b8:	beq	7d0 <traverse_data+0xf8>
 7bc:	bl	0 <coda_get_errno>
 7c0:	ldr	r3, [r0]
 7c4:	cmn	r3, #102	; 0x66
 7c8:	beq	a10 <traverse_data+0x338>
 7cc:	bl	0 <handle_coda_error>
 7d0:	ldr	r5, [r4, #796]	; 0x31c
 7d4:	add	r3, r5, #166	; 0xa6
 7d8:	add	r5, r5, #167	; 0xa7
 7dc:	ldr	r0, [r4, r3, lsl #2]
 7e0:	bl	0 <codadump_filter_get_subfilter>
 7e4:	ldr	r3, [r4, #796]	; 0x31c
 7e8:	mov	r1, #1
 7ec:	str	r0, [r4, r5, lsl #2]
 7f0:	ldr	r0, [sp, #12]
 7f4:	add	r3, r3, r1
 7f8:	str	r3, [r4, #796]	; 0x31c
 7fc:	bl	a38 <traverse_record>
 800:	ldr	r5, [r4, #796]	; 0x31c
 804:	sub	r3, r5, #1
 808:	add	r5, r5, #165	; 0xa5
 80c:	ldr	r0, [r4, r5, lsl #2]
 810:	str	r3, [r4, #796]	; 0x31c
 814:	bl	0 <codadump_filter_get_next_filter>
 818:	ldr	r3, [r4, #796]	; 0x31c
 81c:	str	r0, [r4, r5, lsl #2]
 820:	add	r3, r3, #166	; 0xa6
 824:	ldr	r0, [r4, r3, lsl #2]
 828:	cmp	r0, #0
 82c:	bne	790 <traverse_data+0xb8>
 830:	ldr	r2, [r4, #136]	; 0x88
 834:	str	r6, [r4, r3, lsl #2]
 838:	sub	r3, r2, #1
 83c:	ldr	r2, [r4, #3748]	; 0xea4
 840:	str	r3, [r4, #136]	; 0x88
 844:	sub	r3, r2, #1
 848:	str	r3, [r4, #3748]	; 0xea4
 84c:	add	sp, sp, #16
 850:	ldrd	r4, [sp]
 854:	ldr	r6, [sp, #8]
 858:	add	sp, sp, #12
 85c:	pop	{pc}		; (ldr pc, [sp], #4)
 860:	bl	0 <coda_get_option_bypass_special_types>
 864:	cmp	r0, #0
 868:	ldr	r3, [r4, #136]	; 0x88
 86c:	bne	974 <traverse_data+0x29c>
 870:	add	r3, r3, #2
 874:	add	r1, sp, #12
 878:	ldr	r0, [r4, r3, lsl #2]
 87c:	bl	0 <coda_type_get_special_type>
 880:	cmp	r0, #0
 884:	bne	9ec <traverse_data+0x314>
 888:	ldr	r3, [sp, #12]
 88c:	cmp	r3, #3
 890:	ldrls	pc, [pc, r3, lsl #2]
 894:	b	84c <traverse_data+0x174>
 898:	.word	0x0000084c
 89c:	.word	0x000008d4
 8a0:	.word	0x000008d4
 8a4:	.word	0x0000094c
 8a8:	ldr	r3, [r4, #136]	; 0x88
 8ac:	add	r1, sp, #12
 8b0:	add	r3, r3, #2
 8b4:	ldr	r0, [r4, r3, lsl #2]
 8b8:	bl	0 <coda_type_get_read_type>
 8bc:	cmp	r0, #0
 8c0:	bne	994 <traverse_data+0x2bc>
 8c4:	ldr	r3, [sp, #12]
 8c8:	sub	r3, r3, #11
 8cc:	cmp	r3, #1
 8d0:	bls	94c <traverse_data+0x274>
 8d4:	bl	438 <handle_data_element>
 8d8:	b	84c <traverse_data+0x174>
 8dc:	ldr	r3, [r4, #136]	; 0x88
 8e0:	cmp	r3, #30
 8e4:	bgt	84c <traverse_data+0x174>
 8e8:	bl	0 <dim_enter_array>
 8ec:	ldr	r3, [r4, #136]	; 0x88
 8f0:	ldr	r2, [r4, #3360]	; 0xd20
 8f4:	add	ip, r3, #1
 8f8:	add	r1, r3, #3
 8fc:	add	r3, r3, #2
 900:	add	r1, r4, r1, lsl #2
 904:	add	r2, r2, #1
 908:	ldr	r0, [r4, r3, lsl #2]
 90c:	str	ip, [r4, #136]	; 0x88
 910:	str	r2, [r4, #3360]	; 0xd20
 914:	bl	0 <coda_type_get_array_base_type>
 918:	cmp	r0, #0
 91c:	bne	9a4 <traverse_data+0x2cc>
 920:	bl	6d8 <traverse_data>
 924:	ldr	r2, [r4, #136]	; 0x88
 928:	ldr	r3, [r4, #3360]	; 0xd20
 92c:	sub	r2, r2, #1
 930:	sub	r3, r3, #1
 934:	str	r2, [r4, #136]	; 0x88
 938:	str	r3, [r4, #3360]	; 0xd20
 93c:	bl	0 <dim_leave_array>
 940:	b	84c <traverse_data+0x174>
 944:	bl	0 <handle_coda_error>
 948:	b	70c <traverse_data+0x34>
 94c:	bl	0 <dim_enter_array>
 950:	ldr	r3, [r4, #3360]	; 0xd20
 954:	add	r3, r3, #1
 958:	str	r3, [r4, #3360]	; 0xd20
 95c:	bl	438 <handle_data_element>
 960:	ldr	r3, [r4, #3360]	; 0xd20
 964:	sub	r3, r3, #1
 968:	str	r3, [r4, #3360]	; 0xd20
 96c:	bl	0 <dim_leave_array>
 970:	b	84c <traverse_data+0x174>
 974:	add	r3, r3, #2
 978:	add	r1, r4, r3, lsl #2
 97c:	ldr	r0, [r4, r3, lsl #2]
 980:	bl	0 <coda_type_get_special_base_type>
 984:	cmp	r0, #0
 988:	bne	99c <traverse_data+0x2c4>
 98c:	bl	6d8 <traverse_data>
 990:	b	84c <traverse_data+0x174>
 994:	bl	0 <handle_coda_error>
 998:	b	8c4 <traverse_data+0x1ec>
 99c:	bl	0 <handle_coda_error>
 9a0:	b	98c <traverse_data+0x2b4>
 9a4:	bl	0 <handle_coda_error>
 9a8:	b	920 <traverse_data+0x248>
 9ac:	ldr	r2, [sp, #8]
 9b0:	str	r6, [sp, #12]
 9b4:	cmp	r2, #0
 9b8:	ble	83c <traverse_data+0x164>
 9bc:	mov	r0, r6
 9c0:	mov	r1, #0
 9c4:	bl	a38 <traverse_record>
 9c8:	ldr	r3, [sp, #8]
 9cc:	ldr	r0, [sp, #12]
 9d0:	add	r0, r0, #1
 9d4:	cmp	r0, r3
 9d8:	str	r0, [sp, #12]
 9dc:	blt	9c0 <traverse_data+0x2e8>
 9e0:	ldr	r3, [r4, #136]	; 0x88
 9e4:	sub	r3, r3, #1
 9e8:	b	83c <traverse_data+0x164>
 9ec:	bl	0 <handle_coda_error>
 9f0:	b	888 <traverse_data+0x1b0>
 9f4:	movw	r1, #0
 9f8:	movt	r1, #0
 9fc:	ldr	r3, [pc, #48]	; a34 <traverse_data+0x35c>
 a00:	movw	r0, #0
 a04:	movt	r0, #0
 a08:	movw	r2, #393	; 0x189
 a0c:	bl	0 <__assert_fail>
 a10:	movw	r3, #0
 a14:	movt	r3, #0
 a18:	mov	r2, r5
 a1c:	movw	r1, #0
 a20:	movt	r1, #0
 a24:	ldr	r0, [r3]
 a28:	bl	0 <fprintf>
 a2c:	mov	r0, #1
 a30:	bl	0 <exit>
 a34:	.word	0x00000014

00000a38 <traverse_record>:
 a38:	strd	r4, [sp, #-16]!
 a3c:	movw	r4, #0
 a40:	movt	r4, #0
 a44:	ldr	r3, [r4, #3748]	; 0xea4
 a48:	mov	r5, r0
 a4c:	str	r6, [sp, #8]
 a50:	mov	r6, r1
 a54:	mov	r1, r0
 a58:	str	lr, [sp, #12]
 a5c:	sub	sp, sp, #8
 a60:	mov	r2, sp
 a64:	add	r3, r4, r3, lsl #2
 a68:	str	r0, [r3, #3488]	; 0xda0
 a6c:	ldr	r0, [r4, #136]	; 0x88
 a70:	add	r0, r0, #1
 a74:	ldr	r0, [r4, r0, lsl #2]
 a78:	bl	0 <coda_type_get_record_field_hidden_status>
 a7c:	cmp	r0, #0
 a80:	bne	b50 <traverse_record+0x118>
 a84:	ldr	r1, [sp]
 a88:	eor	r6, r6, #1
 a8c:	cmp	r1, #0
 a90:	andne	r1, r6, #1
 a94:	moveq	r1, #0
 a98:	cmp	r1, #0
 a9c:	bne	b04 <traverse_record+0xcc>
 aa0:	movw	r2, #0
 aa4:	movt	r2, #0
 aa8:	ldr	r3, [r4, #136]	; 0x88
 aac:	ldr	r2, [r2]
 ab0:	add	r3, r3, #1
 ab4:	ldr	r0, [r4, r3, lsl #2]
 ab8:	cmp	r2, #0
 abc:	bne	b18 <traverse_record+0xe0>
 ac0:	ldr	r2, [r4, #3748]	; 0xea4
 ac4:	mov	r1, r5
 ac8:	add	r2, r2, #904	; 0x388
 acc:	add	r2, r4, r2, lsl #2
 ad0:	bl	0 <coda_type_get_record_field_name>
 ad4:	cmp	r0, #0
 ad8:	bne	b60 <traverse_record+0x128>
 adc:	ldr	r3, [r4, #136]	; 0x88
 ae0:	mov	r1, r5
 ae4:	add	r2, r3, #2
 ae8:	add	r3, r3, #1
 aec:	add	r2, r4, r2, lsl #2
 af0:	ldr	r0, [r4, r3, lsl #2]
 af4:	bl	0 <coda_type_get_record_field_type>
 af8:	cmp	r0, #0
 afc:	bne	b58 <traverse_record+0x120>
 b00:	bl	6d8 <traverse_data>
 b04:	add	sp, sp, #8
 b08:	ldrd	r4, [sp]
 b0c:	ldr	r6, [sp, #8]
 b10:	add	sp, sp, #12
 b14:	pop	{pc}		; (ldr pc, [sp], #4)
 b18:	add	r2, sp, #4
 b1c:	mov	r1, r5
 b20:	bl	0 <coda_type_get_record_field_available_status>
 b24:	cmp	r0, #0
 b28:	bne	b68 <traverse_record+0x130>
 b2c:	ldr	r2, [sp, #4]
 b30:	cmn	r2, #1
 b34:	beq	b70 <traverse_record+0x138>
 b38:	ldr	r3, [r4, #136]	; 0x88
 b3c:	add	r1, r3, #1
 b40:	add	r3, r4, r3, lsl #2
 b44:	ldr	r0, [r4, r1, lsl #2]
 b48:	str	r2, [r3, #3360]	; 0xd20
 b4c:	b	ac0 <traverse_record+0x88>
 b50:	bl	0 <handle_coda_error>
 b54:	b	a84 <traverse_record+0x4c>
 b58:	bl	0 <handle_coda_error>
 b5c:	b	b00 <traverse_record+0xc8>
 b60:	bl	0 <handle_coda_error>
 b64:	b	adc <traverse_record+0xa4>
 b68:	bl	0 <handle_coda_error>
 b6c:	b	b2c <traverse_record+0xf4>
 b70:	bl	0 <dim_record_field_available>
 b74:	cmp	r0, #0
 b78:	beq	b04 <traverse_record+0xcc>
 b7c:	ldr	r2, [sp, #4]
 b80:	b	b38 <traverse_record+0x100>

00000b84 <traverse_info_init>:
 b84:	mov	r2, #0
 b88:	movw	r3, #0
 b8c:	movt	r3, #0
 b90:	str	r2, [r3, #4]
 b94:	str	r2, [r3, #136]	; 0x88
 b98:	str	r2, [r3, #3360]	; 0xd20
 b9c:	str	r2, [r3, #3748]	; 0xea4
 ba0:	bx	lr

00000ba4 <traverse_info_done>:
 ba4:	str	r4, [sp, #-8]!
 ba8:	movw	r4, #0
 bac:	movt	r4, #0
 bb0:	ldr	r0, [r4, #4]
 bb4:	str	lr, [sp, #4]
 bb8:	cmp	r0, #0
 bbc:	beq	bc4 <traverse_info_done+0x20>
 bc0:	bl	0 <coda_close>
 bc4:	ldr	r3, [r4, #664]	; 0x298
 bc8:	cmp	r3, #0
 bcc:	beq	be4 <traverse_info_done+0x40>
 bd0:	ldr	r0, [pc, #24]	; bf0 <traverse_info_done+0x4c>
 bd4:	ldr	r4, [sp]
 bd8:	ldr	lr, [sp, #4]
 bdc:	add	sp, sp, #8
 be0:	b	0 <codadump_filter_remove>
 be4:	ldr	r4, [sp]
 be8:	add	sp, sp, #4
 bec:	pop	{pc}		; (ldr pc, [sp], #4)
 bf0:	.word	0x00000298

00000bf4 <traverse_product>:
 bf4:	str	r4, [sp, #-8]!
 bf8:	ldr	r4, [pc, #192]	; cc0 <traverse_product+0xcc>
 bfc:	mov	r1, r4
 c00:	ldr	r0, [r4, #-4]
 c04:	str	lr, [sp, #4]
 c08:	bl	0 <coda_open>
 c0c:	cmp	r0, #0
 c10:	bne	c6c <traverse_product+0x78>
 c14:	movw	r4, #0
 c18:	movt	r4, #0
 c1c:	add	r0, r4, #144	; 0x90
 c20:	ldr	r1, [r4, #4]
 c24:	bl	0 <coda_cursor_set_product>
 c28:	cmp	r0, #0
 c2c:	bne	c8c <traverse_product+0x98>
 c30:	ldr	r1, [r4, #136]	; 0x88
 c34:	ldr	r0, [pc, #136]	; cc4 <traverse_product+0xd0>
 c38:	add	r1, r1, #2
 c3c:	add	r1, r4, r1, lsl #2
 c40:	bl	0 <coda_cursor_get_type>
 c44:	cmp	r0, #0
 c48:	bne	c84 <traverse_product+0x90>
 c4c:	bl	6d8 <traverse_data>
 c50:	ldr	r0, [r4, #4]
 c54:	bl	0 <coda_close>
 c58:	mov	r3, #0
 c5c:	str	r3, [r4, #4]
 c60:	ldr	r4, [sp]
 c64:	add	sp, sp, #4
 c68:	pop	{pc}		; (ldr pc, [sp], #4)
 c6c:	bl	0 <coda_get_errno>
 c70:	ldr	r3, [r0]
 c74:	cmn	r3, #21
 c78:	beq	c94 <traverse_product+0xa0>
 c7c:	bl	0 <handle_coda_error>
 c80:	b	c14 <traverse_product+0x20>
 c84:	bl	0 <handle_coda_error>
 c88:	b	c4c <traverse_product+0x58>
 c8c:	bl	0 <handle_coda_error>
 c90:	b	c30 <traverse_product+0x3c>
 c94:	mov	r0, #0
 c98:	bl	0 <coda_set_option_use_mmap>
 c9c:	mov	r1, r4
 ca0:	ldr	r0, [r4, #-4]
 ca4:	bl	0 <coda_open>
 ca8:	mov	r4, r0
 cac:	mov	r0, #1
 cb0:	bl	0 <coda_set_option_use_mmap>
 cb4:	cmp	r4, #0
 cb8:	bne	c7c <traverse_product+0x88>
 cbc:	b	c14 <traverse_product+0x20>
 cc0:	.word	0x00000004
 cc4:	.word	0x00000090
