
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatbuffers_uoffset_cast_from_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	str	r0, [fp, #-8]
      10:	ldr	r3, [fp, #-8]
      14:	mov	r0, r3
      18:	add	sp, fp, #0
      1c:	pop	{fp}		; (ldr fp, [sp], #4)
      20:	bx	lr

00000024 <__flatbuffers_uoffset_read_from_pe>:
      24:	str	fp, [sp, #-8]!
      28:	str	lr, [sp, #4]
      2c:	add	fp, sp, #4
      30:	sub	sp, sp, #8
      34:	str	r0, [fp, #-8]
      38:	ldr	r3, [fp, #-8]
      3c:	ldr	r3, [r3]
      40:	mov	r0, r3
      44:	bl	0 <__flatbuffers_uoffset_cast_from_pe>
      48:	mov	r3, r0
      4c:	mov	r0, r3
      50:	sub	sp, fp, #4
      54:	ldr	fp, [sp]
      58:	add	sp, sp, #4
      5c:	pop	{pc}		; (ldr pc, [sp], #4)

00000060 <__flatbuffers_soffset_cast_from_pe>:
      60:	push	{fp}		; (str fp, [sp, #-4]!)
      64:	add	fp, sp, #0
      68:	sub	sp, sp, #12
      6c:	str	r0, [fp, #-8]
      70:	ldr	r3, [fp, #-8]
      74:	mov	r0, r3
      78:	add	sp, fp, #0
      7c:	pop	{fp}		; (ldr fp, [sp], #4)
      80:	bx	lr

00000084 <__flatbuffers_soffset_read_from_pe>:
      84:	str	fp, [sp, #-8]!
      88:	str	lr, [sp, #4]
      8c:	add	fp, sp, #4
      90:	sub	sp, sp, #8
      94:	str	r0, [fp, #-8]
      98:	ldr	r3, [fp, #-8]
      9c:	ldr	r3, [r3]
      a0:	mov	r0, r3
      a4:	bl	60 <__flatbuffers_soffset_cast_from_pe>
      a8:	mov	r3, r0
      ac:	mov	r0, r3
      b0:	sub	sp, fp, #4
      b4:	ldr	fp, [sp]
      b8:	add	sp, sp, #4
      bc:	pop	{pc}		; (ldr pc, [sp], #4)

000000c0 <__flatbuffers_voffset_cast_from_pe>:
      c0:	push	{fp}		; (str fp, [sp, #-4]!)
      c4:	add	fp, sp, #0
      c8:	sub	sp, sp, #12
      cc:	mov	r3, r0
      d0:	strh	r3, [fp, #-6]
      d4:	ldrh	r3, [fp, #-6]
      d8:	mov	r0, r3
      dc:	add	sp, fp, #0
      e0:	pop	{fp}		; (ldr fp, [sp], #4)
      e4:	bx	lr

000000e8 <__flatbuffers_voffset_read_from_pe>:
      e8:	str	fp, [sp, #-8]!
      ec:	str	lr, [sp, #4]
      f0:	add	fp, sp, #4
      f4:	sub	sp, sp, #8
      f8:	str	r0, [fp, #-8]
      fc:	ldr	r3, [fp, #-8]
     100:	ldrh	r3, [r3]
     104:	mov	r0, r3
     108:	bl	c0 <__flatbuffers_voffset_cast_from_pe>
     10c:	mov	r3, r0
     110:	mov	r0, r3
     114:	sub	sp, fp, #4
     118:	ldr	fp, [sp]
     11c:	add	sp, sp, #4
     120:	pop	{pc}		; (ldr pc, [sp], #4)

00000124 <__flatbuffers_thash_cast_from_pe>:
     124:	push	{fp}		; (str fp, [sp, #-4]!)
     128:	add	fp, sp, #0
     12c:	sub	sp, sp, #12
     130:	str	r0, [fp, #-8]
     134:	ldr	r3, [fp, #-8]
     138:	mov	r0, r3
     13c:	add	sp, fp, #0
     140:	pop	{fp}		; (ldr fp, [sp], #4)
     144:	bx	lr

00000148 <__flatbuffers_thash_cast_from_le>:
     148:	push	{fp}		; (str fp, [sp, #-4]!)
     14c:	add	fp, sp, #0
     150:	sub	sp, sp, #12
     154:	str	r0, [fp, #-8]
     158:	ldr	r3, [fp, #-8]
     15c:	mov	r0, r3
     160:	add	sp, fp, #0
     164:	pop	{fp}		; (ldr fp, [sp], #4)
     168:	bx	lr

0000016c <__flatbuffers_thash_read_from_pe>:
     16c:	str	fp, [sp, #-8]!
     170:	str	lr, [sp, #4]
     174:	add	fp, sp, #4
     178:	sub	sp, sp, #8
     17c:	str	r0, [fp, #-8]
     180:	ldr	r3, [fp, #-8]
     184:	ldr	r3, [r3]
     188:	mov	r0, r3
     18c:	bl	124 <__flatbuffers_thash_cast_from_pe>
     190:	mov	r3, r0
     194:	mov	r0, r3
     198:	sub	sp, fp, #4
     19c:	ldr	fp, [sp]
     1a0:	add	sp, sp, #4
     1a4:	pop	{pc}		; (ldr pc, [sp], #4)

000001a8 <flatbuffers_vec_len>:
     1a8:	str	fp, [sp, #-8]!
     1ac:	str	lr, [sp, #4]
     1b0:	add	fp, sp, #4
     1b4:	sub	sp, sp, #8
     1b8:	str	r0, [fp, #-8]
     1bc:	ldr	r3, [fp, #-8]
     1c0:	cmp	r3, #0
     1c4:	beq	1e0 <flatbuffers_vec_len+0x38>
     1c8:	ldr	r3, [fp, #-8]
     1cc:	sub	r3, r3, #4
     1d0:	mov	r0, r3
     1d4:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     1d8:	mov	r3, r0
     1dc:	b	1e4 <flatbuffers_vec_len+0x3c>
     1e0:	mov	r3, #0
     1e4:	mov	r0, r3
     1e8:	sub	sp, fp, #4
     1ec:	ldr	fp, [sp]
     1f0:	add	sp, sp, #4
     1f4:	pop	{pc}		; (ldr pc, [sp], #4)

000001f8 <flatbuffers_string_len>:
     1f8:	str	fp, [sp, #-8]!
     1fc:	str	lr, [sp, #4]
     200:	add	fp, sp, #4
     204:	sub	sp, sp, #8
     208:	str	r0, [fp, #-8]
     20c:	ldr	r3, [fp, #-8]
     210:	cmp	r3, #0
     214:	beq	230 <flatbuffers_string_len+0x38>
     218:	ldr	r3, [fp, #-8]
     21c:	sub	r3, r3, #4
     220:	mov	r0, r3
     224:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     228:	mov	r3, r0
     22c:	b	234 <flatbuffers_string_len+0x3c>
     230:	mov	r3, #0
     234:	mov	r0, r3
     238:	sub	sp, fp, #4
     23c:	ldr	fp, [sp]
     240:	add	sp, sp, #4
     244:	pop	{pc}		; (ldr pc, [sp], #4)

00000248 <flatbuffers_uint8_vec_len>:
     248:	str	fp, [sp, #-8]!
     24c:	str	lr, [sp, #4]
     250:	add	fp, sp, #4
     254:	sub	sp, sp, #8
     258:	str	r0, [fp, #-8]
     25c:	ldr	r0, [fp, #-8]
     260:	bl	1a8 <flatbuffers_vec_len>
     264:	mov	r3, r0
     268:	mov	r0, r3
     26c:	sub	sp, fp, #4
     270:	ldr	fp, [sp]
     274:	add	sp, sp, #4
     278:	pop	{pc}		; (ldr pc, [sp], #4)

0000027c <flatbuffers_has_identifier>:
     27c:	str	fp, [sp, #-8]!
     280:	str	lr, [sp, #4]
     284:	add	fp, sp, #4
     288:	sub	sp, sp, #16
     28c:	str	r0, [fp, #-16]
     290:	str	r1, [fp, #-20]	; 0xffffffec
     294:	mov	r3, #0
     298:	str	r3, [fp, #-12]
     29c:	ldr	r3, [fp, #-20]	; 0xffffffec
     2a0:	cmp	r3, #0
     2a4:	bne	2b0 <flatbuffers_has_identifier+0x34>
     2a8:	mov	r3, #1
     2ac:	b	314 <flatbuffers_has_identifier+0x98>
     2b0:	sub	r3, fp, #12
     2b4:	mov	r2, #4
     2b8:	ldr	r1, [fp, #-20]	; 0xffffffec
     2bc:	mov	r0, r3
     2c0:	bl	0 <strncpy>
     2c4:	ldr	r3, [fp, #-12]
     2c8:	mov	r0, r3
     2cc:	bl	148 <__flatbuffers_thash_cast_from_le>
     2d0:	mov	r3, r0
     2d4:	str	r3, [fp, #-12]
     2d8:	ldr	r3, [fp, #-16]
     2dc:	add	r3, r3, #4
     2e0:	mov	r0, r3
     2e4:	bl	16c <__flatbuffers_thash_read_from_pe>
     2e8:	str	r0, [fp, #-8]
     2ec:	ldr	r3, [fp, #-12]
     2f0:	cmp	r3, #0
     2f4:	beq	308 <flatbuffers_has_identifier+0x8c>
     2f8:	ldr	r3, [fp, #-12]
     2fc:	ldr	r2, [fp, #-8]
     300:	cmp	r2, r3
     304:	bne	310 <flatbuffers_has_identifier+0x94>
     308:	mov	r3, #1
     30c:	b	314 <flatbuffers_has_identifier+0x98>
     310:	mov	r3, #0
     314:	mov	r0, r3
     318:	sub	sp, fp, #4
     31c:	ldr	fp, [sp]
     320:	add	sp, sp, #4
     324:	pop	{pc}		; (ldr pc, [sp], #4)

00000328 <MyGame_Example_Monster_vec_len>:
     328:	str	fp, [sp, #-8]!
     32c:	str	lr, [sp, #4]
     330:	add	fp, sp, #4
     334:	sub	sp, sp, #8
     338:	str	r0, [fp, #-8]
     33c:	ldr	r3, [fp, #-8]
     340:	cmp	r3, #0
     344:	beq	360 <MyGame_Example_Monster_vec_len+0x38>
     348:	ldr	r3, [fp, #-8]
     34c:	sub	r3, r3, #4
     350:	mov	r0, r3
     354:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     358:	mov	r3, r0
     35c:	b	364 <MyGame_Example_Monster_vec_len+0x3c>
     360:	mov	r3, #0
     364:	mov	r0, r3
     368:	sub	sp, fp, #4
     36c:	ldr	fp, [sp]
     370:	add	sp, sp, #4
     374:	pop	{pc}		; (ldr pc, [sp], #4)

00000378 <MyGame_Example_Monster_vec_at>:
     378:	str	fp, [sp, #-8]!
     37c:	str	lr, [sp, #4]
     380:	add	fp, sp, #4
     384:	sub	sp, sp, #16
     388:	str	r0, [fp, #-16]
     38c:	str	r1, [fp, #-20]	; 0xffffffec
     390:	ldr	r3, [fp, #-20]	; 0xffffffec
     394:	lsl	r3, r3, #2
     398:	ldr	r2, [fp, #-16]
     39c:	add	r3, r2, r3
     3a0:	str	r3, [fp, #-8]
     3a4:	ldr	r0, [fp, #-16]
     3a8:	bl	1a8 <flatbuffers_vec_len>
     3ac:	mov	r2, r0
     3b0:	ldr	r3, [fp, #-20]	; 0xffffffec
     3b4:	cmp	r3, r2
     3b8:	bcc	3dc <MyGame_Example_Monster_vec_at+0x64>
     3bc:	movw	r3, #0
     3c0:	movt	r3, #0
     3c4:	movw	r2, #693	; 0x2b5
     3c8:	movw	r1, #0
     3cc:	movt	r1, #0
     3d0:	movw	r0, #0
     3d4:	movt	r0, #0
     3d8:	bl	0 <__assert_fail>
     3dc:	ldr	r0, [fp, #-8]
     3e0:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     3e4:	mov	r2, r0
     3e8:	ldr	r3, [fp, #-8]
     3ec:	add	r3, r3, r2
     3f0:	mov	r0, r3
     3f4:	sub	sp, fp, #4
     3f8:	ldr	fp, [sp]
     3fc:	add	sp, sp, #4
     400:	pop	{pc}		; (ldr pc, [sp], #4)

00000404 <MyGame_Example_Monster_as_root>:
     404:	str	fp, [sp, #-8]!
     408:	str	lr, [sp, #4]
     40c:	add	fp, sp, #4
     410:	sub	sp, sp, #16
     414:	str	r0, [fp, #-16]
     418:	movw	r3, #0
     41c:	movt	r3, #0
     420:	str	r3, [fp, #-8]
     424:	ldr	r3, [fp, #-16]
     428:	cmp	r3, #0
     42c:	beq	460 <MyGame_Example_Monster_as_root+0x5c>
     430:	ldr	r1, [fp, #-8]
     434:	ldr	r0, [fp, #-16]
     438:	bl	27c <flatbuffers_has_identifier>
     43c:	mov	r3, r0
     440:	cmp	r3, #0
     444:	beq	460 <MyGame_Example_Monster_as_root+0x5c>
     448:	ldr	r0, [fp, #-16]
     44c:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     450:	mov	r2, r0
     454:	ldr	r3, [fp, #-16]
     458:	add	r3, r3, r2
     45c:	b	464 <MyGame_Example_Monster_as_root+0x60>
     460:	mov	r3, #0
     464:	mov	r0, r3
     468:	sub	sp, fp, #4
     46c:	ldr	fp, [sp]
     470:	add	sp, sp, #4
     474:	pop	{pc}		; (ldr pc, [sp], #4)

00000478 <MyGame_Example_Monster_name>:
     478:	str	fp, [sp, #-8]!
     47c:	str	lr, [sp, #4]
     480:	add	fp, sp, #4
     484:	sub	sp, sp, #24
     488:	str	r0, [fp, #-24]	; 0xffffffe8
     48c:	mov	r3, #0
     490:	strh	r3, [fp, #-6]
     494:	ldr	r3, [fp, #-24]	; 0xffffffe8
     498:	cmp	r3, #0
     49c:	bne	4c0 <MyGame_Example_Monster_name+0x48>
     4a0:	movw	r3, #0
     4a4:	movt	r3, #0
     4a8:	movw	r2, #699	; 0x2bb
     4ac:	movw	r1, #0
     4b0:	movt	r1, #0
     4b4:	movw	r0, #0
     4b8:	movt	r0, #0
     4bc:	bl	0 <__assert_fail>
     4c0:	mov	r3, #3
     4c4:	strh	r3, [fp, #-8]
     4c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4cc:	bl	84 <__flatbuffers_soffset_read_from_pe>
     4d0:	mov	r3, r0
     4d4:	rsb	r3, r3, #0
     4d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     4dc:	add	r3, r2, r3
     4e0:	str	r3, [fp, #-12]
     4e4:	ldr	r0, [fp, #-12]
     4e8:	bl	e8 <__flatbuffers_voffset_read_from_pe>
     4ec:	mov	r3, r0
     4f0:	mov	r2, r3
     4f4:	ldrh	r3, [fp, #-8]
     4f8:	add	r3, r3, #3
     4fc:	lsl	r3, r3, #1
     500:	cmp	r2, r3
     504:	bcc	52c <MyGame_Example_Monster_name+0xb4>
     508:	ldrh	r3, [fp, #-8]
     50c:	add	r3, r3, #2
     510:	lsl	r3, r3, #1
     514:	ldr	r2, [fp, #-12]
     518:	add	r3, r2, r3
     51c:	mov	r0, r3
     520:	bl	e8 <__flatbuffers_voffset_read_from_pe>
     524:	mov	r3, r0
     528:	strh	r3, [fp, #-6]
     52c:	ldrh	r3, [fp, #-6]
     530:	cmp	r3, #0
     534:	beq	564 <MyGame_Example_Monster_name+0xec>
     538:	ldrh	r3, [fp, #-6]
     53c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     540:	add	r3, r2, r3
     544:	str	r3, [fp, #-16]
     548:	ldr	r0, [fp, #-16]
     54c:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     550:	mov	r3, r0
     554:	add	r3, r3, #4
     558:	ldr	r2, [fp, #-16]
     55c:	add	r3, r2, r3
     560:	b	584 <MyGame_Example_Monster_name+0x10c>
     564:	movw	r3, #0
     568:	movt	r3, #0
     56c:	movw	r2, #699	; 0x2bb
     570:	movw	r1, #0
     574:	movt	r1, #0
     578:	movw	r0, #0
     57c:	movt	r0, #0
     580:	bl	0 <__assert_fail>
     584:	mov	r0, r3
     588:	sub	sp, fp, #4
     58c:	ldr	fp, [sp]
     590:	add	sp, sp, #4
     594:	pop	{pc}		; (ldr pc, [sp], #4)

00000598 <MyGame_Example_Monster_inventory>:
     598:	str	fp, [sp, #-8]!
     59c:	str	lr, [sp, #4]
     5a0:	add	fp, sp, #4
     5a4:	sub	sp, sp, #24
     5a8:	str	r0, [fp, #-24]	; 0xffffffe8
     5ac:	mov	r3, #0
     5b0:	strh	r3, [fp, #-6]
     5b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5b8:	cmp	r3, #0
     5bc:	bne	5e0 <MyGame_Example_Monster_inventory+0x48>
     5c0:	movw	r3, #0
     5c4:	movt	r3, #0
     5c8:	movw	r2, #706	; 0x2c2
     5cc:	movw	r1, #0
     5d0:	movt	r1, #0
     5d4:	movw	r0, #0
     5d8:	movt	r0, #0
     5dc:	bl	0 <__assert_fail>
     5e0:	mov	r3, #5
     5e4:	strh	r3, [fp, #-8]
     5e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5ec:	bl	84 <__flatbuffers_soffset_read_from_pe>
     5f0:	mov	r3, r0
     5f4:	rsb	r3, r3, #0
     5f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     5fc:	add	r3, r2, r3
     600:	str	r3, [fp, #-12]
     604:	ldr	r0, [fp, #-12]
     608:	bl	e8 <__flatbuffers_voffset_read_from_pe>
     60c:	mov	r3, r0
     610:	mov	r2, r3
     614:	ldrh	r3, [fp, #-8]
     618:	add	r3, r3, #3
     61c:	lsl	r3, r3, #1
     620:	cmp	r2, r3
     624:	bcc	64c <MyGame_Example_Monster_inventory+0xb4>
     628:	ldrh	r3, [fp, #-8]
     62c:	add	r3, r3, #2
     630:	lsl	r3, r3, #1
     634:	ldr	r2, [fp, #-12]
     638:	add	r3, r2, r3
     63c:	mov	r0, r3
     640:	bl	e8 <__flatbuffers_voffset_read_from_pe>
     644:	mov	r3, r0
     648:	strh	r3, [fp, #-6]
     64c:	ldrh	r3, [fp, #-6]
     650:	cmp	r3, #0
     654:	beq	684 <MyGame_Example_Monster_inventory+0xec>
     658:	ldrh	r3, [fp, #-6]
     65c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     660:	add	r3, r2, r3
     664:	str	r3, [fp, #-16]
     668:	ldr	r0, [fp, #-16]
     66c:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     670:	mov	r3, r0
     674:	add	r3, r3, #4
     678:	ldr	r2, [fp, #-16]
     67c:	add	r3, r2, r3
     680:	b	688 <MyGame_Example_Monster_inventory+0xf0>
     684:	mov	r3, #0
     688:	mov	r0, r3
     68c:	sub	sp, fp, #4
     690:	ldr	fp, [sp]
     694:	add	sp, sp, #4
     698:	pop	{pc}		; (ldr pc, [sp], #4)

0000069c <MyGame_Example_Monster_testarrayoftables>:
     69c:	str	fp, [sp, #-8]!
     6a0:	str	lr, [sp, #4]
     6a4:	add	fp, sp, #4
     6a8:	sub	sp, sp, #24
     6ac:	str	r0, [fp, #-24]	; 0xffffffe8
     6b0:	mov	r3, #0
     6b4:	strh	r3, [fp, #-6]
     6b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     6bc:	cmp	r3, #0
     6c0:	bne	6e4 <MyGame_Example_Monster_testarrayoftables+0x48>
     6c4:	movw	r3, #0
     6c8:	movt	r3, #0
     6cc:	movw	r2, #711	; 0x2c7
     6d0:	movw	r1, #0
     6d4:	movt	r1, #0
     6d8:	movw	r0, #0
     6dc:	movt	r0, #0
     6e0:	bl	0 <__assert_fail>
     6e4:	mov	r3, #11
     6e8:	strh	r3, [fp, #-8]
     6ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6f0:	bl	84 <__flatbuffers_soffset_read_from_pe>
     6f4:	mov	r3, r0
     6f8:	rsb	r3, r3, #0
     6fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     700:	add	r3, r2, r3
     704:	str	r3, [fp, #-12]
     708:	ldr	r0, [fp, #-12]
     70c:	bl	e8 <__flatbuffers_voffset_read_from_pe>
     710:	mov	r3, r0
     714:	mov	r2, r3
     718:	ldrh	r3, [fp, #-8]
     71c:	add	r3, r3, #3
     720:	lsl	r3, r3, #1
     724:	cmp	r2, r3
     728:	bcc	750 <MyGame_Example_Monster_testarrayoftables+0xb4>
     72c:	ldrh	r3, [fp, #-8]
     730:	add	r3, r3, #2
     734:	lsl	r3, r3, #1
     738:	ldr	r2, [fp, #-12]
     73c:	add	r3, r2, r3
     740:	mov	r0, r3
     744:	bl	e8 <__flatbuffers_voffset_read_from_pe>
     748:	mov	r3, r0
     74c:	strh	r3, [fp, #-6]
     750:	ldrh	r3, [fp, #-6]
     754:	cmp	r3, #0
     758:	beq	788 <MyGame_Example_Monster_testarrayoftables+0xec>
     75c:	ldrh	r3, [fp, #-6]
     760:	ldr	r2, [fp, #-24]	; 0xffffffe8
     764:	add	r3, r2, r3
     768:	str	r3, [fp, #-16]
     76c:	ldr	r0, [fp, #-16]
     770:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     774:	mov	r3, r0
     778:	add	r3, r3, #4
     77c:	ldr	r2, [fp, #-16]
     780:	add	r3, r2, r3
     784:	b	78c <MyGame_Example_Monster_testarrayoftables+0xf0>
     788:	mov	r3, #0
     78c:	mov	r0, r3
     790:	sub	sp, fp, #4
     794:	ldr	fp, [sp]
     798:	add	sp, sp, #4
     79c:	pop	{pc}		; (ldr pc, [sp], #4)

000007a0 <flatbuffers_uint8_vec_start>:
     7a0:	str	fp, [sp, #-8]!
     7a4:	str	lr, [sp, #4]
     7a8:	add	fp, sp, #4
     7ac:	sub	sp, sp, #8
     7b0:	str	r0, [fp, #-8]
     7b4:	mvn	r3, #0
     7b8:	mov	r2, #1
     7bc:	mov	r1, #1
     7c0:	ldr	r0, [fp, #-8]
     7c4:	bl	0 <flatcc_builder_start_vector>
     7c8:	mov	r3, r0
     7cc:	mov	r0, r3
     7d0:	sub	sp, fp, #4
     7d4:	ldr	fp, [sp]
     7d8:	add	sp, sp, #4
     7dc:	pop	{pc}		; (ldr pc, [sp], #4)

000007e0 <flatbuffers_uint8_vec_end>:
     7e0:	str	fp, [sp, #-8]!
     7e4:	str	lr, [sp, #4]
     7e8:	add	fp, sp, #4
     7ec:	sub	sp, sp, #8
     7f0:	str	r0, [fp, #-8]
     7f4:	ldr	r0, [fp, #-8]
     7f8:	bl	0 <flatcc_builder_end_vector>
     7fc:	mov	r3, r0
     800:	mov	r0, r3
     804:	sub	sp, fp, #4
     808:	ldr	fp, [sp]
     80c:	add	sp, sp, #4
     810:	pop	{pc}		; (ldr pc, [sp], #4)

00000814 <flatbuffers_uint8_vec_append>:
     814:	str	fp, [sp, #-8]!
     818:	str	lr, [sp, #4]
     81c:	add	fp, sp, #4
     820:	sub	sp, sp, #16
     824:	str	r0, [fp, #-8]
     828:	str	r1, [fp, #-12]
     82c:	str	r2, [fp, #-16]
     830:	ldr	r2, [fp, #-16]
     834:	ldr	r1, [fp, #-12]
     838:	ldr	r0, [fp, #-8]
     83c:	bl	0 <flatcc_builder_append_vector>
     840:	mov	r3, r0
     844:	mov	r0, r3
     848:	sub	sp, fp, #4
     84c:	ldr	fp, [sp]
     850:	add	sp, sp, #4
     854:	pop	{pc}		; (ldr pc, [sp], #4)

00000858 <flatbuffers_string_append>:
     858:	str	fp, [sp, #-8]!
     85c:	str	lr, [sp, #4]
     860:	add	fp, sp, #4
     864:	sub	sp, sp, #16
     868:	str	r0, [fp, #-8]
     86c:	str	r1, [fp, #-12]
     870:	str	r2, [fp, #-16]
     874:	ldr	r2, [fp, #-16]
     878:	ldr	r1, [fp, #-12]
     87c:	ldr	r0, [fp, #-8]
     880:	bl	0 <flatcc_builder_append_string>
     884:	mov	r3, r0
     888:	mov	r0, r3
     88c:	sub	sp, fp, #4
     890:	ldr	fp, [sp]
     894:	add	sp, sp, #4
     898:	pop	{pc}		; (ldr pc, [sp], #4)

0000089c <flatbuffers_buffer_start>:
     89c:	str	fp, [sp, #-8]!
     8a0:	str	lr, [sp, #4]
     8a4:	add	fp, sp, #4
     8a8:	sub	sp, sp, #8
     8ac:	str	r0, [fp, #-8]
     8b0:	str	r1, [fp, #-12]
     8b4:	mov	r3, #0
     8b8:	mov	r2, #0
     8bc:	ldr	r1, [fp, #-12]
     8c0:	ldr	r0, [fp, #-8]
     8c4:	bl	0 <flatcc_builder_start_buffer>
     8c8:	mov	r3, r0
     8cc:	mov	r0, r3
     8d0:	sub	sp, fp, #4
     8d4:	ldr	fp, [sp]
     8d8:	add	sp, sp, #4
     8dc:	pop	{pc}		; (ldr pc, [sp], #4)

000008e0 <flatbuffers_buffer_end>:
     8e0:	str	fp, [sp, #-8]!
     8e4:	str	lr, [sp, #4]
     8e8:	add	fp, sp, #4
     8ec:	sub	sp, sp, #8
     8f0:	str	r0, [fp, #-8]
     8f4:	str	r1, [fp, #-12]
     8f8:	ldr	r1, [fp, #-12]
     8fc:	ldr	r0, [fp, #-8]
     900:	bl	0 <flatcc_builder_end_buffer>
     904:	mov	r3, r0
     908:	mov	r0, r3
     90c:	sub	sp, fp, #4
     910:	ldr	fp, [sp]
     914:	add	sp, sp, #4
     918:	pop	{pc}		; (ldr pc, [sp], #4)

0000091c <MyGame_Example_Monster_start>:
     91c:	str	fp, [sp, #-8]!
     920:	str	lr, [sp, #4]
     924:	add	fp, sp, #4
     928:	sub	sp, sp, #8
     92c:	str	r0, [fp, #-8]
     930:	mov	r1, #36	; 0x24
     934:	ldr	r0, [fp, #-8]
     938:	bl	0 <flatcc_builder_start_table>
     93c:	mov	r3, r0
     940:	mov	r0, r3
     944:	sub	sp, fp, #4
     948:	ldr	fp, [sp]
     94c:	add	sp, sp, #4
     950:	pop	{pc}		; (ldr pc, [sp], #4)

00000954 <MyGame_Example_Monster_end>:
     954:	str	fp, [sp, #-8]!
     958:	str	lr, [sp, #4]
     95c:	add	fp, sp, #4
     960:	sub	sp, sp, #8
     964:	str	r0, [fp, #-8]
     968:	mov	r2, #1
     96c:	movw	r1, #0
     970:	movt	r1, #0
     974:	ldr	r0, [fp, #-8]
     978:	bl	0 <flatcc_builder_check_required>
     97c:	mov	r3, r0
     980:	cmp	r3, #0
     984:	bne	9a8 <MyGame_Example_Monster_end+0x54>
     988:	movw	r3, #0
     98c:	movt	r3, #0
     990:	mov	r2, #235	; 0xeb
     994:	movw	r1, #0
     998:	movt	r1, #0
     99c:	movw	r0, #0
     9a0:	movt	r0, #0
     9a4:	bl	0 <__assert_fail>
     9a8:	ldr	r0, [fp, #-8]
     9ac:	bl	0 <flatcc_builder_end_table>
     9b0:	mov	r3, r0
     9b4:	mov	r0, r3
     9b8:	sub	sp, fp, #4
     9bc:	ldr	fp, [sp]
     9c0:	add	sp, sp, #4
     9c4:	pop	{pc}		; (ldr pc, [sp], #4)

000009c8 <MyGame_Example_Monster_vec_start>:
     9c8:	str	fp, [sp, #-8]!
     9cc:	str	lr, [sp, #4]
     9d0:	add	fp, sp, #4
     9d4:	sub	sp, sp, #8
     9d8:	str	r0, [fp, #-8]
     9dc:	ldr	r0, [fp, #-8]
     9e0:	bl	0 <flatcc_builder_start_offset_vector>
     9e4:	mov	r3, r0
     9e8:	mov	r0, r3
     9ec:	sub	sp, fp, #4
     9f0:	ldr	fp, [sp]
     9f4:	add	sp, sp, #4
     9f8:	pop	{pc}		; (ldr pc, [sp], #4)

000009fc <MyGame_Example_Monster_vec_end>:
     9fc:	str	fp, [sp, #-8]!
     a00:	str	lr, [sp, #4]
     a04:	add	fp, sp, #4
     a08:	sub	sp, sp, #8
     a0c:	str	r0, [fp, #-8]
     a10:	ldr	r0, [fp, #-8]
     a14:	bl	0 <flatcc_builder_end_offset_vector>
     a18:	mov	r3, r0
     a1c:	mov	r0, r3
     a20:	sub	sp, fp, #4
     a24:	ldr	fp, [sp]
     a28:	add	sp, sp, #4
     a2c:	pop	{pc}		; (ldr pc, [sp], #4)

00000a30 <MyGame_Example_Monster_vec_push>:
     a30:	str	fp, [sp, #-8]!
     a34:	str	lr, [sp, #4]
     a38:	add	fp, sp, #4
     a3c:	sub	sp, sp, #8
     a40:	str	r0, [fp, #-8]
     a44:	str	r1, [fp, #-12]
     a48:	ldr	r3, [fp, #-12]
     a4c:	cmp	r3, #0
     a50:	beq	a68 <MyGame_Example_Monster_vec_push+0x38>
     a54:	ldr	r1, [fp, #-12]
     a58:	ldr	r0, [fp, #-8]
     a5c:	bl	0 <flatcc_builder_offset_vector_push>
     a60:	mov	r3, r0
     a64:	b	a6c <MyGame_Example_Monster_vec_push+0x3c>
     a68:	mov	r3, #0
     a6c:	mov	r0, r3
     a70:	sub	sp, fp, #4
     a74:	ldr	fp, [sp]
     a78:	add	sp, sp, #4
     a7c:	pop	{pc}		; (ldr pc, [sp], #4)

00000a80 <MyGame_Example_Monster_name_add>:
     a80:	str	fp, [sp, #-8]!
     a84:	str	lr, [sp, #4]
     a88:	add	fp, sp, #4
     a8c:	sub	sp, sp, #16
     a90:	str	r0, [fp, #-16]
     a94:	str	r1, [fp, #-20]	; 0xffffffec
     a98:	ldr	r3, [fp, #-20]	; 0xffffffec
     a9c:	cmp	r3, #0
     aa0:	beq	ad4 <MyGame_Example_Monster_name_add+0x54>
     aa4:	mov	r1, #3
     aa8:	ldr	r0, [fp, #-16]
     aac:	bl	0 <flatcc_builder_table_add_offset>
     ab0:	str	r0, [fp, #-8]
     ab4:	ldr	r3, [fp, #-8]
     ab8:	cmp	r3, #0
     abc:	beq	ad4 <MyGame_Example_Monster_name_add+0x54>
     ac0:	ldr	r3, [fp, #-8]
     ac4:	ldr	r2, [fp, #-20]	; 0xffffffec
     ac8:	str	r2, [r3]
     acc:	mov	r3, #0
     ad0:	b	ad8 <MyGame_Example_Monster_name_add+0x58>
     ad4:	mvn	r3, #0
     ad8:	mov	r0, r3
     adc:	sub	sp, fp, #4
     ae0:	ldr	fp, [sp]
     ae4:	add	sp, sp, #4
     ae8:	pop	{pc}		; (ldr pc, [sp], #4)

00000aec <MyGame_Example_Monster_name_start>:
     aec:	str	fp, [sp, #-8]!
     af0:	str	lr, [sp, #4]
     af4:	add	fp, sp, #4
     af8:	sub	sp, sp, #8
     afc:	str	r0, [fp, #-8]
     b00:	ldr	r0, [fp, #-8]
     b04:	bl	0 <flatcc_builder_start_string>
     b08:	mov	r3, r0
     b0c:	mov	r0, r3
     b10:	sub	sp, fp, #4
     b14:	ldr	fp, [sp]
     b18:	add	sp, sp, #4
     b1c:	pop	{pc}		; (ldr pc, [sp], #4)

00000b20 <MyGame_Example_Monster_name_end>:
     b20:	str	fp, [sp, #-8]!
     b24:	str	lr, [sp, #4]
     b28:	add	fp, sp, #4
     b2c:	sub	sp, sp, #8
     b30:	str	r0, [fp, #-8]
     b34:	ldr	r0, [fp, #-8]
     b38:	bl	0 <flatcc_builder_end_string>
     b3c:	mov	r3, r0
     b40:	mov	r1, r3
     b44:	ldr	r0, [fp, #-8]
     b48:	bl	a80 <MyGame_Example_Monster_name_add>
     b4c:	mov	r3, r0
     b50:	mov	r0, r3
     b54:	sub	sp, fp, #4
     b58:	ldr	fp, [sp]
     b5c:	add	sp, sp, #4
     b60:	pop	{pc}		; (ldr pc, [sp], #4)

00000b64 <MyGame_Example_Monster_name_create_str>:
     b64:	str	fp, [sp, #-8]!
     b68:	str	lr, [sp, #4]
     b6c:	add	fp, sp, #4
     b70:	sub	sp, sp, #8
     b74:	str	r0, [fp, #-8]
     b78:	str	r1, [fp, #-12]
     b7c:	ldr	r1, [fp, #-12]
     b80:	ldr	r0, [fp, #-8]
     b84:	bl	0 <flatcc_builder_create_string_str>
     b88:	mov	r3, r0
     b8c:	mov	r1, r3
     b90:	ldr	r0, [fp, #-8]
     b94:	bl	a80 <MyGame_Example_Monster_name_add>
     b98:	mov	r3, r0
     b9c:	mov	r0, r3
     ba0:	sub	sp, fp, #4
     ba4:	ldr	fp, [sp]
     ba8:	add	sp, sp, #4
     bac:	pop	{pc}		; (ldr pc, [sp], #4)

00000bb0 <MyGame_Example_Monster_inventory_add>:
     bb0:	str	fp, [sp, #-8]!
     bb4:	str	lr, [sp, #4]
     bb8:	add	fp, sp, #4
     bbc:	sub	sp, sp, #16
     bc0:	str	r0, [fp, #-16]
     bc4:	str	r1, [fp, #-20]	; 0xffffffec
     bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
     bcc:	cmp	r3, #0
     bd0:	beq	c04 <MyGame_Example_Monster_inventory_add+0x54>
     bd4:	mov	r1, #5
     bd8:	ldr	r0, [fp, #-16]
     bdc:	bl	0 <flatcc_builder_table_add_offset>
     be0:	str	r0, [fp, #-8]
     be4:	ldr	r3, [fp, #-8]
     be8:	cmp	r3, #0
     bec:	beq	c04 <MyGame_Example_Monster_inventory_add+0x54>
     bf0:	ldr	r3, [fp, #-8]
     bf4:	ldr	r2, [fp, #-20]	; 0xffffffec
     bf8:	str	r2, [r3]
     bfc:	mov	r3, #0
     c00:	b	c08 <MyGame_Example_Monster_inventory_add+0x58>
     c04:	mvn	r3, #0
     c08:	mov	r0, r3
     c0c:	sub	sp, fp, #4
     c10:	ldr	fp, [sp]
     c14:	add	sp, sp, #4
     c18:	pop	{pc}		; (ldr pc, [sp], #4)

00000c1c <MyGame_Example_Monster_inventory_start>:
     c1c:	str	fp, [sp, #-8]!
     c20:	str	lr, [sp, #4]
     c24:	add	fp, sp, #4
     c28:	sub	sp, sp, #8
     c2c:	str	r0, [fp, #-8]
     c30:	ldr	r0, [fp, #-8]
     c34:	bl	7a0 <flatbuffers_uint8_vec_start>
     c38:	mov	r3, r0
     c3c:	mov	r0, r3
     c40:	sub	sp, fp, #4
     c44:	ldr	fp, [sp]
     c48:	add	sp, sp, #4
     c4c:	pop	{pc}		; (ldr pc, [sp], #4)

00000c50 <MyGame_Example_Monster_inventory_end>:
     c50:	str	fp, [sp, #-8]!
     c54:	str	lr, [sp, #4]
     c58:	add	fp, sp, #4
     c5c:	sub	sp, sp, #8
     c60:	str	r0, [fp, #-8]
     c64:	ldr	r0, [fp, #-8]
     c68:	bl	7e0 <flatbuffers_uint8_vec_end>
     c6c:	mov	r3, r0
     c70:	mov	r1, r3
     c74:	ldr	r0, [fp, #-8]
     c78:	bl	bb0 <MyGame_Example_Monster_inventory_add>
     c7c:	mov	r3, r0
     c80:	mov	r0, r3
     c84:	sub	sp, fp, #4
     c88:	ldr	fp, [sp]
     c8c:	add	sp, sp, #4
     c90:	pop	{pc}		; (ldr pc, [sp], #4)

00000c94 <MyGame_Example_Monster_testarrayoftables_add>:
     c94:	str	fp, [sp, #-8]!
     c98:	str	lr, [sp, #4]
     c9c:	add	fp, sp, #4
     ca0:	sub	sp, sp, #16
     ca4:	str	r0, [fp, #-16]
     ca8:	str	r1, [fp, #-20]	; 0xffffffec
     cac:	ldr	r3, [fp, #-20]	; 0xffffffec
     cb0:	cmp	r3, #0
     cb4:	beq	ce8 <MyGame_Example_Monster_testarrayoftables_add+0x54>
     cb8:	mov	r1, #11
     cbc:	ldr	r0, [fp, #-16]
     cc0:	bl	0 <flatcc_builder_table_add_offset>
     cc4:	str	r0, [fp, #-8]
     cc8:	ldr	r3, [fp, #-8]
     ccc:	cmp	r3, #0
     cd0:	beq	ce8 <MyGame_Example_Monster_testarrayoftables_add+0x54>
     cd4:	ldr	r3, [fp, #-8]
     cd8:	ldr	r2, [fp, #-20]	; 0xffffffec
     cdc:	str	r2, [r3]
     ce0:	mov	r3, #0
     ce4:	b	cec <MyGame_Example_Monster_testarrayoftables_add+0x58>
     ce8:	mvn	r3, #0
     cec:	mov	r0, r3
     cf0:	sub	sp, fp, #4
     cf4:	ldr	fp, [sp]
     cf8:	add	sp, sp, #4
     cfc:	pop	{pc}		; (ldr pc, [sp], #4)

00000d00 <MyGame_Example_Monster_start_as_root>:
     d00:	str	fp, [sp, #-8]!
     d04:	str	lr, [sp, #4]
     d08:	add	fp, sp, #4
     d0c:	sub	sp, sp, #8
     d10:	str	r0, [fp, #-8]
     d14:	movw	r1, #0
     d18:	movt	r1, #0
     d1c:	ldr	r0, [fp, #-8]
     d20:	bl	89c <flatbuffers_buffer_start>
     d24:	mov	r3, r0
     d28:	cmp	r3, #0
     d2c:	bne	d40 <MyGame_Example_Monster_start_as_root+0x40>
     d30:	ldr	r0, [fp, #-8]
     d34:	bl	91c <MyGame_Example_Monster_start>
     d38:	mov	r3, r0
     d3c:	b	d44 <MyGame_Example_Monster_start_as_root+0x44>
     d40:	mvn	r3, #0
     d44:	mov	r0, r3
     d48:	sub	sp, fp, #4
     d4c:	ldr	fp, [sp]
     d50:	add	sp, sp, #4
     d54:	pop	{pc}		; (ldr pc, [sp], #4)

00000d58 <MyGame_Example_Monster_end_as_root>:
     d58:	str	fp, [sp, #-8]!
     d5c:	str	lr, [sp, #4]
     d60:	add	fp, sp, #4
     d64:	sub	sp, sp, #8
     d68:	str	r0, [fp, #-8]
     d6c:	ldr	r0, [fp, #-8]
     d70:	bl	954 <MyGame_Example_Monster_end>
     d74:	mov	r3, r0
     d78:	mov	r1, r3
     d7c:	ldr	r0, [fp, #-8]
     d80:	bl	8e0 <flatbuffers_buffer_end>
     d84:	mov	r3, r0
     d88:	mov	r0, r3
     d8c:	sub	sp, fp, #4
     d90:	ldr	fp, [sp]
     d94:	add	sp, sp, #4
     d98:	pop	{pc}		; (ldr pc, [sp], #4)

00000d9c <elapsed_realtime>:
     d9c:	str	fp, [sp, #-8]!
     da0:	str	lr, [sp, #4]
     da4:	add	fp, sp, #4
     da8:	sub	sp, sp, #8
     dac:	sub	r3, fp, #12
     db0:	mov	r1, #0
     db4:	mov	r0, r3
     db8:	bl	0 <gettimeofday>
     dbc:	movw	r3, #0
     dc0:	movt	r3, #0
     dc4:	ldr	r3, [r3]
     dc8:	cmp	r3, #0
     dcc:	bne	de8 <elapsed_realtime+0x4c>
     dd0:	movw	r3, #0
     dd4:	movt	r3, #0
     dd8:	mov	r1, r3
     ddc:	sub	r3, fp, #12
     de0:	ldrd	r2, [r3]
     de4:	strd	r2, [r1]
     de8:	ldr	r2, [fp, #-12]
     dec:	movw	r3, #0
     df0:	movt	r3, #0
     df4:	ldr	r3, [r3]
     df8:	sub	r3, r2, r3
     dfc:	vmov	s15, r3
     e00:	vcvt.f64.s32	d6, s15
     e04:	ldr	r2, [fp, #-8]
     e08:	movw	r3, #0
     e0c:	movt	r3, #0
     e10:	ldr	r3, [r3, #4]
     e14:	sub	r3, r2, r3
     e18:	vmov	s15, r3
     e1c:	vcvt.f64.s32	d5, s15
     e20:	vldr	d4, [pc, #24]	; e40 <elapsed_realtime+0xa4>
     e24:	vdiv.f64	d7, d5, d4
     e28:	vadd.f64	d7, d6, d7
     e2c:	vmov.f64	d0, d7
     e30:	sub	sp, fp, #4
     e34:	ldr	fp, [sp]
     e38:	add	sp, sp, #4
     e3c:	pop	{pc}		; (ldr pc, [sp], #4)
     e40:	.word	0x00000000
     e44:	.word	0x412e8480

00000e48 <show_benchmark>:
     e48:	str	fp, [sp, #-8]!
     e4c:	str	lr, [sp, #4]
     e50:	add	fp, sp, #4
     e54:	sub	sp, sp, #48	; 0x30
     e58:	str	r0, [fp, #-24]	; 0xffffffe8
     e5c:	vstr	d0, [fp, #-36]	; 0xffffffdc
     e60:	vstr	d1, [fp, #-44]	; 0xffffffd4
     e64:	str	r1, [fp, #-28]	; 0xffffffe4
     e68:	str	r2, [fp, #-48]	; 0xffffffd0
     e6c:	str	r3, [fp, #-52]	; 0xffffffcc
     e70:	vldr	d6, [fp, #-44]	; 0xffffffd4
     e74:	vldr	d7, [fp, #-36]	; 0xffffffdc
     e78:	vsub.f64	d7, d6, d7
     e7c:	vstr	d7, [fp, #-12]
     e80:	ldr	r1, [fp, #-24]	; 0xffffffe8
     e84:	movw	r0, #0
     e88:	movt	r0, #0
     e8c:	bl	0 <printf>
     e90:	ldrd	r2, [fp, #-12]
     e94:	movw	r0, #0
     e98:	movt	r0, #0
     e9c:	bl	0 <printf>
     ea0:	ldr	r1, [fp, #-48]	; 0xffffffd0
     ea4:	movw	r0, #0
     ea8:	movt	r0, #0
     eac:	bl	0 <printf>
     eb0:	ldr	r1, [fp, #-28]	; 0xffffffe4
     eb4:	movw	r0, #0
     eb8:	movt	r0, #0
     ebc:	bl	0 <printf>
     ec0:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ec4:	vmov	s15, r3
     ec8:	vcvt.f64.s32	d6, s15
     ecc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ed0:	vmov	s15, r3
     ed4:	vcvt.f64.u32	d7, s15
     ed8:	vmul.f64	d7, d6, d7
     edc:	vldr	d5, [pc, #348]	; 1040 <show_benchmark+0x1f8>
     ee0:	vdiv.f64	d6, d7, d5
     ee4:	vldr	d7, [fp, #-12]
     ee8:	vdiv.f64	d5, d6, d7
     eec:	vmov	r2, r3, d5
     ef0:	movw	r0, #0
     ef4:	movt	r0, #0
     ef8:	bl	0 <printf>
     efc:	ldr	r3, [fp, #-48]	; 0xffffffd0
     f00:	vmov	s15, r3
     f04:	vcvt.f64.s32	d6, s15
     f08:	vldr	d7, [fp, #-12]
     f0c:	vdiv.f64	d5, d6, d7
     f10:	vmov	r2, r3, d5
     f14:	movw	r0, #0
     f18:	movt	r0, #0
     f1c:	bl	0 <printf>
     f20:	ldr	r3, [fp, #-52]	; 0xffffffcc
     f24:	cmp	r3, #0
     f28:	beq	f58 <show_benchmark+0x110>
     f2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     f30:	cmp	r3, #1
     f34:	beq	f58 <show_benchmark+0x110>
     f38:	vldr	d6, [pc, #264]	; 1048 <show_benchmark+0x200>
     f3c:	vldr	d7, [fp, #-12]
     f40:	vdiv.f64	d5, d6, d7
     f44:	vmov	r2, r3, d5
     f48:	ldr	r1, [fp, #-52]	; 0xffffffcc
     f4c:	movw	r0, #0
     f50:	movt	r0, #0
     f54:	bl	0 <printf>
     f58:	vldr	d7, [fp, #-12]
     f5c:	vldr	d6, [pc, #236]	; 1050 <show_benchmark+0x208>
     f60:	vmul.f64	d5, d7, d6
     f64:	ldr	r3, [fp, #-48]	; 0xffffffd0
     f68:	vmov	s15, r3
     f6c:	vcvt.f64.s32	d6, s15
     f70:	vdiv.f64	d7, d5, d6
     f74:	vstr	d7, [fp, #-20]	; 0xffffffec
     f78:	vldr	d7, [fp, #-20]	; 0xffffffec
     f7c:	vldr	d6, [pc, #212]	; 1058 <show_benchmark+0x210>
     f80:	vcmpe.f64	d7, d6
     f84:	vmrs	APSR_nzcv, fpscr
     f88:	bpl	fa0 <show_benchmark+0x158>
     f8c:	ldrd	r2, [fp, #-20]	; 0xffffffec
     f90:	movw	r0, #0
     f94:	movt	r0, #0
     f98:	bl	0 <printf>
     f9c:	b	1024 <show_benchmark+0x1dc>
     fa0:	vldr	d7, [fp, #-20]	; 0xffffffec
     fa4:	vldr	d6, [pc, #148]	; 1040 <show_benchmark+0x1f8>
     fa8:	vcmpe.f64	d7, d6
     fac:	vmrs	APSR_nzcv, fpscr
     fb0:	bpl	fd4 <show_benchmark+0x18c>
     fb4:	vldr	d7, [fp, #-20]	; 0xffffffec
     fb8:	vldr	d6, [pc, #152]	; 1058 <show_benchmark+0x210>
     fbc:	vdiv.f64	d5, d7, d6
     fc0:	vmov	r2, r3, d5
     fc4:	movw	r0, #0
     fc8:	movt	r0, #0
     fcc:	bl	0 <printf>
     fd0:	b	1024 <show_benchmark+0x1dc>
     fd4:	vldr	d7, [fp, #-20]	; 0xffffffec
     fd8:	vldr	d6, [pc, #112]	; 1050 <show_benchmark+0x208>
     fdc:	vcmpe.f64	d7, d6
     fe0:	vmrs	APSR_nzcv, fpscr
     fe4:	bpl	1008 <show_benchmark+0x1c0>
     fe8:	vldr	d7, [fp, #-20]	; 0xffffffec
     fec:	vldr	d6, [pc, #76]	; 1040 <show_benchmark+0x1f8>
     ff0:	vdiv.f64	d5, d7, d6
     ff4:	vmov	r2, r3, d5
     ff8:	movw	r0, #0
     ffc:	movt	r0, #0
    1000:	bl	0 <printf>
    1004:	b	1024 <show_benchmark+0x1dc>
    1008:	vldr	d7, [fp, #-20]	; 0xffffffec
    100c:	vldr	d6, [pc, #60]	; 1050 <show_benchmark+0x208>
    1010:	vdiv.f64	d5, d7, d6
    1014:	vmov	r2, r3, d5
    1018:	movw	r0, #0
    101c:	movt	r0, #0
    1020:	bl	0 <printf>
    1024:	mov	r3, #0
    1028:	mov	r0, r3
    102c:	sub	sp, fp, #4
    1030:	ldr	fp, [sp]
    1034:	add	sp, sp, #4
    1038:	pop	{pc}		; (ldr pc, [sp], #4)
    103c:	nop	{0}
    1040:	.word	0x00000000
    1044:	.word	0x412e8480
    1048:	.word	0x00000000
    104c:	.word	0x3ff00000
    1050:	.word	0x00000000
    1054:	.word	0x41cdcd65
    1058:	.word	0x00000000
    105c:	.word	0x408f4000

00001060 <create_monster>:
    1060:	str	fp, [sp, #-8]!
    1064:	str	lr, [sp, #4]
    1068:	add	fp, sp, #4
    106c:	sub	sp, sp, #16
    1070:	str	r0, [fp, #-16]
    1074:	ldr	r0, [fp, #-16]
    1078:	bl	91c <MyGame_Example_Monster_start>
    107c:	ldr	r0, [fp, #-16]
    1080:	bl	aec <MyGame_Example_Monster_name_start>
    1084:	mov	r3, #0
    1088:	str	r3, [fp, #-8]
    108c:	b	10b0 <create_monster+0x50>
    1090:	mov	r2, #7
    1094:	movw	r1, #0
    1098:	movt	r1, #0
    109c:	ldr	r0, [fp, #-16]
    10a0:	bl	858 <flatbuffers_string_append>
    10a4:	ldr	r3, [fp, #-8]
    10a8:	add	r3, r3, #1
    10ac:	str	r3, [fp, #-8]
    10b0:	ldr	r3, [fp, #-8]
    10b4:	cmp	r3, #99	; 0x63
    10b8:	bls	1090 <create_monster+0x30>
    10bc:	ldr	r0, [fp, #-16]
    10c0:	bl	b20 <MyGame_Example_Monster_name_end>
    10c4:	ldr	r0, [fp, #-16]
    10c8:	bl	c1c <MyGame_Example_Monster_inventory_start>
    10cc:	mov	r3, #0
    10d0:	str	r3, [fp, #-8]
    10d4:	b	10f8 <create_monster+0x98>
    10d8:	mov	r2, #1000	; 0x3e8
    10dc:	movw	r1, #0
    10e0:	movt	r1, #0
    10e4:	ldr	r0, [fp, #-16]
    10e8:	bl	814 <flatbuffers_uint8_vec_append>
    10ec:	ldr	r3, [fp, #-8]
    10f0:	add	r3, r3, #1
    10f4:	str	r3, [fp, #-8]
    10f8:	ldr	r3, [fp, #-8]
    10fc:	cmp	r3, #99	; 0x63
    1100:	bls	10d8 <create_monster+0x78>
    1104:	ldr	r0, [fp, #-16]
    1108:	bl	c50 <MyGame_Example_Monster_inventory_end>
    110c:	ldr	r0, [fp, #-16]
    1110:	bl	954 <MyGame_Example_Monster_end>
    1114:	mov	r3, r0
    1118:	mov	r0, r3
    111c:	sub	sp, fp, #4
    1120:	ldr	fp, [sp]
    1124:	add	sp, sp, #4
    1128:	pop	{pc}		; (ldr pc, [sp], #4)

0000112c <create_monsters>:
    112c:	str	fp, [sp, #-8]!
    1130:	str	lr, [sp, #4]
    1134:	add	fp, sp, #4
    1138:	sub	sp, sp, #16
    113c:	str	r0, [fp, #-16]
    1140:	ldr	r0, [fp, #-16]
    1144:	bl	9c8 <MyGame_Example_Monster_vec_start>
    1148:	mov	r3, #0
    114c:	str	r3, [fp, #-8]
    1150:	b	11a4 <create_monsters+0x78>
    1154:	ldr	r0, [fp, #-16]
    1158:	bl	1060 <create_monster>
    115c:	str	r0, [fp, #-12]
    1160:	ldr	r3, [fp, #-12]
    1164:	cmp	r3, #0
    1168:	bne	118c <create_monsters+0x60>
    116c:	movw	r3, #0
    1170:	movt	r3, #0
    1174:	mov	r2, #42	; 0x2a
    1178:	movw	r1, #0
    117c:	movt	r1, #0
    1180:	movw	r0, #0
    1184:	movt	r0, #0
    1188:	bl	0 <__assert_fail>
    118c:	ldr	r1, [fp, #-12]
    1190:	ldr	r0, [fp, #-16]
    1194:	bl	a30 <MyGame_Example_Monster_vec_push>
    1198:	ldr	r3, [fp, #-8]
    119c:	add	r3, r3, #1
    11a0:	str	r3, [fp, #-8]
    11a4:	ldr	r3, [fp, #-8]
    11a8:	cmp	r3, #1000	; 0x3e8
    11ac:	bcc	1154 <create_monsters+0x28>
    11b0:	ldr	r0, [fp, #-16]
    11b4:	bl	9fc <MyGame_Example_Monster_vec_end>
    11b8:	mov	r3, r0
    11bc:	mov	r0, r3
    11c0:	sub	sp, fp, #4
    11c4:	ldr	fp, [sp]
    11c8:	add	sp, sp, #4
    11cc:	pop	{pc}		; (ldr pc, [sp], #4)

000011d0 <create_root_monster>:
    11d0:	str	fp, [sp, #-8]!
    11d4:	str	lr, [sp, #4]
    11d8:	add	fp, sp, #4
    11dc:	sub	sp, sp, #16
    11e0:	str	r0, [fp, #-16]
    11e4:	ldr	r0, [fp, #-16]
    11e8:	bl	0 <flatcc_builder_reset>
    11ec:	ldr	r0, [fp, #-16]
    11f0:	bl	d00 <MyGame_Example_Monster_start_as_root>
    11f4:	movw	r1, #0
    11f8:	movt	r1, #0
    11fc:	ldr	r0, [fp, #-16]
    1200:	bl	b64 <MyGame_Example_Monster_name_create_str>
    1204:	ldr	r0, [fp, #-16]
    1208:	bl	112c <create_monsters>
    120c:	str	r0, [fp, #-8]
    1210:	ldr	r3, [fp, #-8]
    1214:	cmp	r3, #0
    1218:	bne	123c <create_root_monster+0x6c>
    121c:	movw	r3, #0
    1220:	movt	r3, #0
    1224:	mov	r2, #56	; 0x38
    1228:	movw	r1, #0
    122c:	movt	r1, #0
    1230:	movw	r0, #0
    1234:	movt	r0, #0
    1238:	bl	0 <__assert_fail>
    123c:	ldr	r1, [fp, #-8]
    1240:	ldr	r0, [fp, #-16]
    1244:	bl	c94 <MyGame_Example_Monster_testarrayoftables_add>
    1248:	ldr	r0, [fp, #-16]
    124c:	bl	d58 <MyGame_Example_Monster_end_as_root>
    1250:	mov	r3, #0
    1254:	mov	r0, r3
    1258:	sub	sp, fp, #4
    125c:	ldr	fp, [sp]
    1260:	add	sp, sp, #4
    1264:	pop	{pc}		; (ldr pc, [sp], #4)

00001268 <verify_monster>:
    1268:	str	fp, [sp, #-8]!
    126c:	str	lr, [sp, #4]
    1270:	add	fp, sp, #4
    1274:	sub	sp, sp, #24
    1278:	str	r0, [fp, #-24]	; 0xffffffe8
    127c:	str	r1, [fp, #-28]	; 0xffffffe4
    1280:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1284:	bl	478 <MyGame_Example_Monster_name>
    1288:	str	r0, [fp, #-12]
    128c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1290:	bl	598 <MyGame_Example_Monster_inventory>
    1294:	str	r0, [fp, #-16]
    1298:	ldr	r0, [fp, #-12]
    129c:	bl	1f8 <flatbuffers_string_len>
    12a0:	mov	r3, r0
    12a4:	cmp	r3, #700	; 0x2bc
    12a8:	beq	12cc <verify_monster+0x64>
    12ac:	movw	r3, #0
    12b0:	movt	r3, #0
    12b4:	mov	r2, #74	; 0x4a
    12b8:	movw	r1, #0
    12bc:	movt	r1, #0
    12c0:	movw	r0, #0
    12c4:	movt	r0, #0
    12c8:	bl	0 <__assert_fail>
    12cc:	ldr	r0, [fp, #-16]
    12d0:	bl	248 <flatbuffers_uint8_vec_len>
    12d4:	mov	r2, r0
    12d8:	movw	r3, #34464	; 0x86a0
    12dc:	movt	r3, #1
    12e0:	cmp	r2, r3
    12e4:	beq	1308 <verify_monster+0xa0>
    12e8:	movw	r3, #0
    12ec:	movt	r3, #0
    12f0:	mov	r2, #78	; 0x4e
    12f4:	movw	r1, #0
    12f8:	movt	r1, #0
    12fc:	movw	r0, #0
    1300:	movt	r0, #0
    1304:	bl	0 <__assert_fail>
    1308:	mov	r3, #0
    130c:	str	r3, [fp, #-8]
    1310:	b	13d8 <verify_monster+0x170>
    1314:	ldr	r2, [fp, #-8]
    1318:	mov	r3, r2
    131c:	lsl	r3, r3, #3
    1320:	sub	r3, r3, r2
    1324:	ldr	r2, [fp, #-12]
    1328:	add	r3, r2, r3
    132c:	mov	r2, #7
    1330:	movw	r1, #0
    1334:	movt	r1, #0
    1338:	mov	r0, r3
    133c:	bl	0 <memcmp>
    1340:	mov	r3, r0
    1344:	cmp	r3, #0
    1348:	beq	13cc <verify_monster+0x164>
    134c:	ldr	r3, [fp, #-12]
    1350:	cmp	r3, #0
    1354:	beq	1360 <verify_monster+0xf8>
    1358:	ldr	r3, [fp, #-12]
    135c:	b	1368 <verify_monster+0x100>
    1360:	movw	r3, #0
    1364:	movt	r3, #0
    1368:	mov	r2, r3
    136c:	ldr	r1, [fp, #-8]
    1370:	movw	r0, #0
    1374:	movt	r0, #0
    1378:	bl	0 <printf>
    137c:	ldr	r2, [fp, #-8]
    1380:	mov	r3, r2
    1384:	lsl	r3, r3, #3
    1388:	sub	r3, r3, r2
    138c:	ldr	r2, [fp, #-12]
    1390:	add	r2, r2, r3
    1394:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1398:	sub	r3, r2, r3
    139c:	mov	r1, r3
    13a0:	movw	r0, #0
    13a4:	movt	r0, #0
    13a8:	bl	0 <printf>
    13ac:	movw	r3, #0
    13b0:	movt	r3, #0
    13b4:	mov	r2, #85	; 0x55
    13b8:	movw	r1, #0
    13bc:	movt	r1, #0
    13c0:	movw	r0, #0
    13c4:	movt	r0, #0
    13c8:	bl	0 <__assert_fail>
    13cc:	ldr	r3, [fp, #-8]
    13d0:	add	r3, r3, #1
    13d4:	str	r3, [fp, #-8]
    13d8:	ldr	r3, [fp, #-8]
    13dc:	cmp	r3, #99	; 0x63
    13e0:	bls	1314 <verify_monster+0xac>
    13e4:	mov	r3, #0
    13e8:	str	r3, [fp, #-8]
    13ec:	b	1450 <verify_monster+0x1e8>
    13f0:	ldr	r3, [fp, #-8]
    13f4:	mov	r2, #1000	; 0x3e8
    13f8:	mul	r3, r2, r3
    13fc:	ldr	r2, [fp, #-16]
    1400:	add	r3, r2, r3
    1404:	mov	r2, #1000	; 0x3e8
    1408:	movw	r1, #0
    140c:	movt	r1, #0
    1410:	mov	r0, r3
    1414:	bl	0 <memcmp>
    1418:	mov	r3, r0
    141c:	cmp	r3, #0
    1420:	beq	1444 <verify_monster+0x1dc>
    1424:	movw	r3, #0
    1428:	movt	r3, #0
    142c:	mov	r2, #91	; 0x5b
    1430:	movw	r1, #0
    1434:	movt	r1, #0
    1438:	movw	r0, #0
    143c:	movt	r0, #0
    1440:	bl	0 <__assert_fail>
    1444:	ldr	r3, [fp, #-8]
    1448:	add	r3, r3, #1
    144c:	str	r3, [fp, #-8]
    1450:	ldr	r3, [fp, #-8]
    1454:	cmp	r3, #99	; 0x63
    1458:	bls	13f0 <verify_monster+0x188>
    145c:	mov	r3, #0
    1460:	mov	r0, r3
    1464:	sub	sp, fp, #4
    1468:	ldr	fp, [sp]
    146c:	add	sp, sp, #4
    1470:	pop	{pc}		; (ldr pc, [sp], #4)

00001474 <main>:
    1474:	str	fp, [sp, #-8]!
    1478:	str	lr, [sp, #4]
    147c:	add	fp, sp, #4
    1480:	sub	sp, sp, #304	; 0x130
    1484:	str	r0, [fp, #-304]	; 0xfffffed0
    1488:	str	r1, [fp, #-308]	; 0xfffffecc
    148c:	mov	r3, #10
    1490:	str	r3, [fp, #-20]	; 0xffffffec
    1494:	mov	r3, #0
    1498:	str	r3, [fp, #-12]
    149c:	sub	r3, fp, #296	; 0x128
    14a0:	str	r3, [fp, #-24]	; 0xffffffe8
    14a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14a8:	bl	0 <flatcc_builder_init>
    14ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14b0:	bl	11d0 <create_root_monster>
    14b4:	sub	r3, fp, #64	; 0x40
    14b8:	mov	r1, r3
    14bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14c0:	bl	0 <flatcc_builder_finalize_buffer>
    14c4:	str	r0, [fp, #-28]	; 0xffffffe4
    14c8:	movw	r1, #0
    14cc:	movt	r1, #0
    14d0:	movw	r0, #0
    14d4:	movt	r0, #0
    14d8:	bl	0 <fopen>
    14dc:	str	r0, [fp, #-32]	; 0xffffffe0
    14e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14e4:	cmp	r3, #0
    14e8:	bne	14f8 <main+0x84>
    14ec:	mvn	r3, #0
    14f0:	str	r3, [fp, #-12]
    14f4:	b	1740 <main+0x2cc>
    14f8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    14fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1500:	mov	r1, #1
    1504:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1508:	bl	0 <fwrite>
    150c:	mov	r2, r0
    1510:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1514:	cmp	r2, r3
    1518:	movne	r3, #1
    151c:	moveq	r3, #0
    1520:	uxtb	r3, r3
    1524:	mov	r2, r3
    1528:	ldr	r3, [fp, #-12]
    152c:	orr	r3, r3, r2
    1530:	str	r3, [fp, #-12]
    1534:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1538:	bl	0 <fclose>
    153c:	ldr	r3, [fp, #-12]
    1540:	cmp	r3, #0
    1544:	bne	1734 <main+0x2c0>
    1548:	ldr	r3, [fp, #-64]	; 0xffffffc0
    154c:	mov	r1, r3
    1550:	movw	r0, #0
    1554:	movt	r0, #0
    1558:	bl	0 <printf>
    155c:	movw	r0, #0
    1560:	movt	r0, #0
    1564:	bl	0 <puts>
    1568:	bl	d9c <elapsed_realtime>
    156c:	vstr	d0, [fp, #-44]	; 0xffffffd4
    1570:	mov	r3, #0
    1574:	str	r3, [fp, #-8]
    1578:	b	16f8 <main+0x284>
    157c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1580:	bl	11d0 <create_root_monster>
    1584:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1588:	mov	r2, r3
    158c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1590:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1594:	bl	0 <flatcc_builder_copy_buffer>
    1598:	ldr	r0, [fp, #-28]	; 0xffffffe4
    159c:	bl	404 <MyGame_Example_Monster_as_root>
    15a0:	str	r0, [fp, #-48]	; 0xffffffd0
    15a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    15a8:	bl	478 <MyGame_Example_Monster_name>
    15ac:	mov	r3, r0
    15b0:	movw	r1, #0
    15b4:	movt	r1, #0
    15b8:	mov	r0, r3
    15bc:	bl	0 <strcmp>
    15c0:	mov	r2, r0
    15c4:	ldr	r3, [fp, #-12]
    15c8:	orr	r3, r3, r2
    15cc:	str	r3, [fp, #-12]
    15d0:	ldr	r3, [fp, #-12]
    15d4:	cmp	r3, #0
    15d8:	beq	15fc <main+0x188>
    15dc:	movw	r3, #0
    15e0:	movt	r3, #0
    15e4:	mov	r2, #139	; 0x8b
    15e8:	movw	r1, #0
    15ec:	movt	r1, #0
    15f0:	movw	r0, #0
    15f4:	movt	r0, #0
    15f8:	bl	0 <__assert_fail>
    15fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1600:	bl	69c <MyGame_Example_Monster_testarrayoftables>
    1604:	str	r0, [fp, #-52]	; 0xffffffcc
    1608:	ldr	r0, [fp, #-52]	; 0xffffffcc
    160c:	bl	328 <MyGame_Example_Monster_vec_len>
    1610:	mov	r3, r0
    1614:	cmp	r3, #1000	; 0x3e8
    1618:	movne	r3, #1
    161c:	moveq	r3, #0
    1620:	uxtb	r3, r3
    1624:	mov	r2, r3
    1628:	ldr	r3, [fp, #-12]
    162c:	orr	r3, r3, r2
    1630:	str	r3, [fp, #-12]
    1634:	ldr	r3, [fp, #-12]
    1638:	cmp	r3, #0
    163c:	beq	1660 <main+0x1ec>
    1640:	movw	r3, #0
    1644:	movt	r3, #0
    1648:	mov	r2, #143	; 0x8f
    164c:	movw	r1, #0
    1650:	movt	r1, #0
    1654:	movw	r0, #0
    1658:	movt	r0, #0
    165c:	bl	0 <__assert_fail>
    1660:	mov	r3, #0
    1664:	str	r3, [fp, #-16]
    1668:	b	16d4 <main+0x260>
    166c:	ldr	r3, [fp, #-16]
    1670:	mov	r1, r3
    1674:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1678:	bl	378 <MyGame_Example_Monster_vec_at>
    167c:	mov	r3, r0
    1680:	mov	r1, r3
    1684:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1688:	bl	1268 <verify_monster>
    168c:	mov	r2, r0
    1690:	ldr	r3, [fp, #-12]
    1694:	orr	r3, r3, r2
    1698:	str	r3, [fp, #-12]
    169c:	ldr	r3, [fp, #-12]
    16a0:	cmp	r3, #0
    16a4:	beq	16c8 <main+0x254>
    16a8:	movw	r3, #0
    16ac:	movt	r3, #0
    16b0:	mov	r2, #147	; 0x93
    16b4:	movw	r1, #0
    16b8:	movt	r1, #0
    16bc:	movw	r0, #0
    16c0:	movt	r0, #0
    16c4:	bl	0 <__assert_fail>
    16c8:	ldr	r3, [fp, #-16]
    16cc:	add	r3, r3, #1
    16d0:	str	r3, [fp, #-16]
    16d4:	ldr	r3, [fp, #-16]
    16d8:	cmp	r3, #1000	; 0x3e8
    16dc:	blt	166c <main+0x1f8>
    16e0:	ldr	r3, [fp, #-12]
    16e4:	cmp	r3, #0
    16e8:	bne	173c <main+0x2c8>
    16ec:	ldr	r3, [fp, #-8]
    16f0:	add	r3, r3, #1
    16f4:	str	r3, [fp, #-8]
    16f8:	ldr	r2, [fp, #-8]
    16fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1700:	cmp	r2, r3
    1704:	blt	157c <main+0x108>
    1708:	bl	d9c <elapsed_realtime>
    170c:	vstr	d0, [fp, #-60]	; 0xffffffc4
    1710:	ldr	r1, [fp, #-64]	; 0xffffffc0
    1714:	mov	r3, #0
    1718:	ldr	r2, [fp, #-20]	; 0xffffffec
    171c:	vldr	d1, [fp, #-60]	; 0xffffffc4
    1720:	vldr	d0, [fp, #-44]	; 0xffffffd4
    1724:	movw	r0, #0
    1728:	movt	r0, #0
    172c:	bl	e48 <show_benchmark>
    1730:	b	1740 <main+0x2cc>
    1734:	nop	{0}
    1738:	b	1740 <main+0x2cc>
    173c:	nop	{0}
    1740:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1744:	bl	0 <flatcc_builder_clear>
    1748:	ldr	r0, [fp, #-28]	; 0xffffffe4
    174c:	bl	0 <free>
    1750:	ldr	r3, [fp, #-12]
    1754:	cmp	r3, #0
    1758:	beq	1768 <main+0x2f4>
    175c:	movw	r0, #0
    1760:	movt	r0, #0
    1764:	bl	0 <puts>
    1768:	ldr	r3, [fp, #-12]
    176c:	mov	r0, r3
    1770:	sub	sp, fp, #4
    1774:	ldr	fp, [sp]
    1778:	add	sp, sp, #4
    177c:	pop	{pc}		; (ldr pc, [sp], #4)
