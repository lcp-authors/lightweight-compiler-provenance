
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r4, [ip]
      34:	mov	r8, r3
      38:	mov	r6, r2
      3c:	mov	r5, r0
      40:	ldr	ip, [r5, #48]	; 0x30
      44:	cmp	ip, #0
      48:	bne	f8 <read_bytes+0xf8>
      4c:	ldr	r0, [r5, #16]
      50:	cmp	r0, #0
      54:	beq	74 <read_bytes+0x74>
      58:	cmp	r0, #1
      5c:	beq	74 <read_bytes+0x74>
      60:	ldr	r0, [pc, #384]	; 1e8 <read_bytes+0x1e8>
      64:	ldr	r1, [pc, #384]	; 1ec <read_bytes+0x1ec>
      68:	mov	r2, #83	; 0x53
      6c:	ldr	r3, [pc, #380]	; 1f0 <read_bytes+0x1f0>
      70:	bl	0 <__assert_fail>
      74:	adds	r0, r6, r4
      78:	adc	r1, r8, r9
      7c:	ldr	r2, [r5, #8]
      80:	ldr	ip, [r5, #12]
      84:	cmp	r1, ip
      88:	bne	98 <read_bytes+0x98>
      8c:	cmp	r0, r2
      90:	bhi	a0 <read_bytes+0xa0>
      94:	b	b4 <read_bytes+0xb4>
      98:	cmp	r1, ip
      9c:	bls	b4 <read_bytes+0xb4>
      a0:	mvn	r0, #300	; 0x12c
      a4:	ldr	r1, [pc, #304]	; 1dc <read_bytes+0x1dc>
      a8:	bl	0 <coda_set_error>
      ac:	mvn	r0, #0
      b0:	b	1b8 <read_bytes+0x1b8>
      b4:	ldr	r0, [r5, #56]	; 0x38
      b8:	mov	r2, r4
      bc:	mov	r3, r6
      c0:	mov	r1, r7
      c4:	bl	0 <pread>
      c8:	cmp	r0, #0
      cc:	bge	1b4 <read_bytes+0x1b4>
      d0:	bl	0 <__errno_location>
      d4:	ldr	r0, [r0]
      d8:	bl	0 <strerror>
      dc:	mvn	r3, #21
      e0:	ldr	r1, [pc, #252]	; 1e4 <read_bytes+0x1e4>
      e4:	mov	r2, r0
      e8:	mov	r0, r3
      ec:	bl	0 <coda_set_error>
      f0:	mvn	r0, #0
      f4:	b	1b8 <read_bytes+0x1b8>
      f8:	adds	ip, r6, r4
      fc:	adc	r1, r8, r9
     100:	ldr	r2, [r5, #40]	; 0x28
     104:	ldr	r3, [r5, #44]	; 0x2c
     108:	cmp	r1, r3
     10c:	bne	11c <read_bytes+0x11c>
     110:	cmp	ip, r2
     114:	bhi	124 <read_bytes+0x124>
     118:	b	1a0 <read_bytes+0x1a0>
     11c:	cmp	r1, r3
     120:	bls	1a0 <read_bytes+0x1a0>
     124:	ldr	r3, [r5, #16]
     128:	cmp	r3, #0
     12c:	beq	18c <read_bytes+0x18c>
     130:	cmp	r3, #1
     134:	beq	18c <read_bytes+0x18c>
     138:	add	r2, sp, #64	; 0x40
     13c:	mov	r1, r9
     140:	mov	r0, r4
     144:	bl	0 <coda_str64>
     148:	add	r2, sp, #88	; 0x58
     14c:	mov	r1, r8
     150:	mov	r0, r6
     154:	bl	0 <coda_str64>
     158:	ldr	r0, [r5, #40]	; 0x28
     15c:	ldr	r1, [r5, #44]	; 0x2c
     160:	add	r2, sp, #40	; 0x28
     164:	bl	0 <coda_str64>
     168:	mvn	r0, #300	; 0x12c
     16c:	ldr	r1, [pc, #108]	; 1e0 <read_bytes+0x1e0>
     170:	add	r2, sp, #64	; 0x40
     174:	add	r3, sp, #88	; 0x58
     178:	add	ip, sp, #40	; 0x28
     17c:	str	ip, [sp]
     180:	bl	0 <coda_set_error>
     184:	mvn	r0, #0
     188:	b	1b8 <read_bytes+0x1b8>
     18c:	mvn	r0, #300	; 0x12c
     190:	ldr	r1, [pc, #68]	; 1dc <read_bytes+0x1dc>
     194:	bl	0 <coda_set_error>
     198:	mvn	r0, #0
     19c:	b	1b8 <read_bytes+0x1b8>
     1a0:	ldr	r0, [r5, #48]	; 0x30
     1a4:	add	r1, r0, r6
     1a8:	mov	r2, r4
     1ac:	mov	r0, r7
     1b0:	bl	0 <memcpy>
     1b4:	mov	r0, #0
     1b8:	ldr	r4, [sp, #16]
     1bc:	ldr	r5, [sp, #20]
     1c0:	ldr	r6, [sp, #24]
     1c4:	ldr	r7, [sp, #28]
     1c8:	ldr	r8, [sp, #32]
     1cc:	ldr	r9, [sp, #36]	; 0x24
     1d0:	ldr	lr, [sp, #8]
     1d4:	add	sp, sp, #112	; 0x70
     1d8:	bx	lr
     1dc:	.word	0x00000884
     1e0:	.word	0x000003c6
     1e4:	.word	0x00000260
     1e8:	.word	0x000008d0
     1ec:	.word	0x000002ab
     1f0:	.word	0x000009e1

000001f4 <read_bytes_in_bounds>:
     1f4:	mov	ip, sp
     1f8:	sub	sp, sp, #24
     1fc:	str	ip, [sp]
     200:	str	lr, [sp, #4]
     204:	str	r4, [sp, #8]
     208:	str	r5, [sp, #12]
     20c:	str	r6, [sp, #16]
     210:	str	r7, [sp, #20]
     214:	ldr	r6, [ip, #8]
     218:	ldr	r5, [ip]
     21c:	mov	r4, r2
     220:	mov	r7, r0
     224:	ldr	r1, [r7, #48]	; 0x30
     228:	cmp	r1, #0
     22c:	bne	298 <read_bytes_in_bounds+0xa4>
     230:	ldr	r0, [r7, #16]
     234:	cmp	r0, #0
     238:	beq	258 <read_bytes_in_bounds+0x64>
     23c:	cmp	r0, #1
     240:	beq	258 <read_bytes_in_bounds+0x64>
     244:	ldr	r0, [pc, #128]	; 2cc <read_bytes_in_bounds+0xd8>
     248:	ldr	r1, [pc, #128]	; 2d0 <read_bytes_in_bounds+0xdc>
     24c:	mov	r2, #62	; 0x3e
     250:	ldr	r3, [pc, #124]	; 2d4 <read_bytes_in_bounds+0xe0>
     254:	bl	0 <__assert_fail>
     258:	ldr	r0, [r7, #56]	; 0x38
     25c:	mov	r3, r4
     260:	mov	r2, r5
     264:	mov	r1, r6
     268:	bl	0 <pread>
     26c:	cmp	r0, #0
     270:	bge	2a8 <read_bytes_in_bounds+0xb4>
     274:	bl	0 <__errno_location>
     278:	ldr	r0, [r0]
     27c:	bl	0 <strerror>
     280:	mov	r2, r0
     284:	mvn	r0, #21
     288:	ldr	r1, [pc, #56]	; 2c8 <read_bytes_in_bounds+0xd4>
     28c:	bl	0 <coda_set_error>
     290:	mvn	r0, #0
     294:	b	2ac <read_bytes_in_bounds+0xb8>
     298:	add	r1, r1, r4
     29c:	mov	r2, r5
     2a0:	mov	r0, r6
     2a4:	bl	0 <memcpy>
     2a8:	mov	r0, #0
     2ac:	ldr	r4, [sp, #8]
     2b0:	ldr	r5, [sp, #12]
     2b4:	ldr	r6, [sp, #16]
     2b8:	ldr	r7, [sp, #20]
     2bc:	ldr	lr, [sp, #4]
     2c0:	add	sp, sp, #24
     2c4:	bx	lr
     2c8:	.word	0x00000260
     2cc:	.word	0x000008d0
     2d0:	.word	0x000004d5
     2d4:	.word	0x000009ec

000002d8 <read_array>:
     2d8:	mov	ip, sp
     2dc:	sub	sp, sp, #640	; 0x280
     2e0:	str	ip, [sp]
     2e4:	str	lr, [sp, #4]
     2e8:	str	r4, [sp, #8]
     2ec:	str	r5, [sp, #12]
     2f0:	str	r6, [sp, #16]
     2f4:	str	r7, [sp, #20]
     2f8:	str	r8, [sp, #24]
     2fc:	str	r9, [sp, #28]
     300:	str	sl, [sp, #32]
     304:	ldr	r6, [ip]
     308:	mov	r5, r3
     30c:	mov	r9, r2
     310:	mov	r7, r1
     314:	mov	r4, r0
     318:	add	r1, sp, #40	; 0x28
     31c:	add	r2, sp, #48	; 0x30
     320:	mov	r0, r4
     324:	bl	0 <coda_cursor_get_array_dim>
     328:	cmp	r0, #0
     32c:	beq	338 <read_array+0x60>
     330:	mvn	r0, #0
     334:	b	564 <read_array+0x28c>
     338:	mov	r2, r4
     33c:	add	r3, sp, #120	; 0x78
     340:	mov	lr, #130	; 0x82
     344:	ldr	ip, [r2], #4
     348:	subs	lr, lr, #1
     34c:	str	ip, [r3], #4
     350:	bne	344 <read_array+0x6c>
     354:	mov	ip, #1
     358:	cmp	r6, #1
     35c:	movne	r0, #1
     360:	moveq	r0, #0
     364:	ldr	r1, [sp, #40]	; 0x28
     368:	cmp	r1, #1
     36c:	movle	ip, ip
     370:	movgt	ip, r0
     374:	cmp	ip, #0
     378:	bne	4c0 <read_array+0x1e8>
     37c:	mov	r2, #1
     380:	str	r2, [sp, #80]	; 0x50
     384:	mov	r4, #0
     388:	ldr	r1, [sp, #40]	; 0x28
     38c:	cmp	r4, r1
     390:	bge	3c0 <read_array+0xe8>
     394:	add	r1, sp, #80	; 0x50
     398:	lsl	r2, r4, #2
     39c:	add	r0, r1, r2
     3a0:	add	r2, sp, #80	; 0x50
     3a4:	ldr	r2, [r2, r4, lsl #2]
     3a8:	add	ip, sp, #48	; 0x30
     3ac:	ldr	r1, [ip, r4, lsl #2]
     3b0:	mul	r3, r2, r1
     3b4:	str	r3, [r0, #4]
     3b8:	add	r4, r4, #1
     3bc:	b	388 <read_array+0xb0>
     3c0:	add	r2, sp, #80	; 0x50
     3c4:	lsl	r3, r1, #2
     3c8:	add	ip, r2, r3
     3cc:	sub	lr, ip, #4096	; 0x1000
     3d0:	ldr	r6, [lr, #4092]	; 0xffc
     3d4:	add	r3, sp, #80	; 0x50
     3d8:	ldr	r8, [r3, r1, lsl #2]
     3dc:	cmp	r8, #0
     3e0:	ble	560 <read_array+0x288>
     3e4:	mov	r4, #0
     3e8:	mov	sl, #0
     3ec:	add	r0, sp, #120	; 0x78
     3f0:	mov	r1, #0
     3f4:	bl	0 <coda_cursor_goto_array_element_by_index>
     3f8:	cmp	r0, #0
     3fc:	beq	408 <read_array+0x130>
     400:	mvn	r0, #0
     404:	b	564 <read_array+0x28c>
     408:	add	r0, sp, #120	; 0x78
     40c:	mla	r1, sl, r5, r9
     410:	blx	r7
     414:	cmp	r0, #0
     418:	beq	424 <read_array+0x14c>
     41c:	mvn	r0, #0
     420:	b	564 <read_array+0x28c>
     424:	add	r4, r4, #1
     428:	cmp	r4, r8
     42c:	bge	448 <read_array+0x170>
     430:	add	r0, sp, #120	; 0x78
     434:	bl	0 <coda_cursor_goto_next_array_element>
     438:	cmp	r0, #0
     43c:	beq	448 <read_array+0x170>
     440:	mvn	r0, #0
     444:	b	564 <read_array+0x28c>
     448:	add	sl, sl, r6
     44c:	cmp	sl, r8
     450:	blt	408 <read_array+0x130>
     454:	cmp	r4, r8
     458:	beq	560 <read_array+0x288>
     45c:	add	r3, sp, #80	; 0x50
     460:	ldr	r2, [sp, #40]	; 0x28
     464:	lsl	ip, r2, #2
     468:	add	r1, r3, ip
     46c:	sub	lr, r1, #4096	; 0x1000
     470:	ldr	r3, [lr, #4088]	; 0xff8
     474:	add	r1, sp, #80	; 0x50
     478:	ldr	r1, [r1, r2, lsl #2]
     47c:	sub	r0, r3, r1
     480:	add	sl, sl, r0
     484:	sub	ip, r2, #3
     488:	cmp	ip, #0
     48c:	blt	408 <read_array+0x130>
     490:	add	r0, sp, #80	; 0x50
     494:	lsl	r2, ip, #2
     498:	add	r3, r0, r2
     49c:	ldr	r0, [r3, #8]
     4a0:	cmp	sl, r0
     4a4:	blt	408 <read_array+0x130>
     4a8:	add	r1, sp, #80	; 0x50
     4ac:	ldr	r1, [r1, ip, lsl #2]
     4b0:	sub	r0, r1, r0
     4b4:	add	sl, sl, r0
     4b8:	sub	ip, ip, #1
     4bc:	b	488 <read_array+0x1b0>
     4c0:	mov	r6, #1
     4c4:	mov	r0, #0
     4c8:	ldr	r2, [sp, #40]	; 0x28
     4cc:	cmp	r0, r2
     4d0:	bge	4e8 <read_array+0x210>
     4d4:	add	r3, sp, #48	; 0x30
     4d8:	ldr	r2, [r3, r0, lsl #2]
     4dc:	mul	r6, r6, r2
     4e0:	add	r0, r0, #1
     4e4:	b	4c8 <read_array+0x1f0>
     4e8:	cmp	r6, #0
     4ec:	ble	560 <read_array+0x288>
     4f0:	add	r0, sp, #120	; 0x78
     4f4:	mov	r1, #0
     4f8:	bl	0 <coda_cursor_goto_array_element_by_index>
     4fc:	cmp	r0, #0
     500:	beq	50c <read_array+0x234>
     504:	mvn	r0, #0
     508:	b	564 <read_array+0x28c>
     50c:	mov	r4, #0
     510:	cmp	r4, r6
     514:	bge	560 <read_array+0x288>
     518:	add	r0, sp, #120	; 0x78
     51c:	mla	r1, r4, r5, r9
     520:	blx	r7
     524:	cmp	r0, #0
     528:	beq	534 <read_array+0x25c>
     52c:	mvn	r0, #0
     530:	b	564 <read_array+0x28c>
     534:	sub	r3, r6, #1
     538:	cmp	r4, r3
     53c:	bge	558 <read_array+0x280>
     540:	add	r0, sp, #120	; 0x78
     544:	bl	0 <coda_cursor_goto_next_array_element>
     548:	cmp	r0, #0
     54c:	beq	558 <read_array+0x280>
     550:	mvn	r0, #0
     554:	b	564 <read_array+0x28c>
     558:	add	r4, r4, #1
     55c:	b	510 <read_array+0x238>
     560:	mov	r0, #0
     564:	ldr	r4, [sp, #8]
     568:	ldr	r5, [sp, #12]
     56c:	ldr	r6, [sp, #16]
     570:	ldr	r7, [sp, #20]
     574:	ldr	r8, [sp, #24]
     578:	ldr	r9, [sp, #28]
     57c:	ldr	sl, [sp, #32]
     580:	ldr	lr, [sp, #4]
     584:	add	sp, sp, #640	; 0x280
     588:	bx	lr

0000058c <read_partial_array>:
     58c:	mov	ip, sp
     590:	sub	sp, sp, #552	; 0x228
     594:	str	ip, [sp]
     598:	str	lr, [sp, #4]
     59c:	str	r4, [sp, #8]
     5a0:	str	r5, [sp, #12]
     5a4:	str	r6, [sp, #16]
     5a8:	str	r7, [sp, #20]
     5ac:	str	r8, [sp, #24]
     5b0:	ldr	r7, [ip, #4]
     5b4:	ldr	r5, [ip]
     5b8:	mov	r6, r3
     5bc:	mov	r4, r1
     5c0:	mov	r1, r2
     5c4:	mov	r2, r0
     5c8:	add	r3, sp, #32
     5cc:	mov	lr, #130	; 0x82
     5d0:	ldr	ip, [r2], #4
     5d4:	subs	lr, lr, #1
     5d8:	str	ip, [r3], #4
     5dc:	bne	5d0 <read_partial_array+0x44>
     5e0:	cmp	r6, #0
     5e4:	ble	654 <read_partial_array+0xc8>
     5e8:	add	r0, sp, #32
     5ec:	bl	0 <coda_cursor_goto_array_element_by_index>
     5f0:	cmp	r0, #0
     5f4:	beq	600 <read_partial_array+0x74>
     5f8:	mvn	r0, #0
     5fc:	b	658 <read_partial_array+0xcc>
     600:	mov	r8, #0
     604:	cmp	r8, r6
     608:	bge	654 <read_partial_array+0xc8>
     60c:	add	r0, sp, #32
     610:	mla	r1, r8, r7, r5
     614:	blx	r4
     618:	cmp	r0, #0
     61c:	beq	628 <read_partial_array+0x9c>
     620:	mvn	r0, #0
     624:	b	658 <read_partial_array+0xcc>
     628:	sub	r3, r6, #1
     62c:	cmp	r8, r3
     630:	bge	64c <read_partial_array+0xc0>
     634:	add	r0, sp, #32
     638:	bl	0 <coda_cursor_goto_next_array_element>
     63c:	cmp	r0, #0
     640:	beq	64c <read_partial_array+0xc0>
     644:	mvn	r0, #0
     648:	b	658 <read_partial_array+0xcc>
     64c:	add	r8, r8, #1
     650:	b	604 <read_partial_array+0x78>
     654:	mov	r0, #0
     658:	ldr	r4, [sp, #8]
     65c:	ldr	r5, [sp, #12]
     660:	ldr	r6, [sp, #16]
     664:	ldr	r7, [sp, #20]
     668:	ldr	r8, [sp, #24]
     66c:	ldr	lr, [sp, #4]
     670:	add	sp, sp, #552	; 0x228
     674:	bx	lr

00000678 <transpose_array>:
     678:	mov	ip, sp
     67c:	sub	sp, sp, #200	; 0xc8
     680:	str	ip, [sp, #4]
     684:	str	lr, [sp, #8]
     688:	str	r4, [sp, #16]
     68c:	str	r5, [sp, #20]
     690:	str	r6, [sp, #24]
     694:	str	r7, [sp, #28]
     698:	str	r8, [sp, #32]
     69c:	str	r9, [sp, #36]	; 0x24
     6a0:	mov	r6, r2
     6a4:	mov	r5, r1
     6a8:	mov	r7, #0
     6ac:	add	r1, sp, #40	; 0x28
     6b0:	add	r2, sp, #48	; 0x30
     6b4:	bl	0 <coda_cursor_get_array_dim>
     6b8:	cmp	r0, #0
     6bc:	beq	6c8 <transpose_array+0x50>
     6c0:	mvn	r0, #0
     6c4:	b	ad0 <transpose_array+0x458>
     6c8:	ldr	r0, [sp, #40]	; 0x28
     6cc:	cmp	r0, #1
     6d0:	bgt	6dc <transpose_array+0x64>
     6d4:	mov	r0, #0
     6d8:	b	ad0 <transpose_array+0x458>
     6dc:	mov	r8, #1
     6e0:	mov	ip, #0
     6e4:	ldr	r2, [sp, #40]	; 0x28
     6e8:	cmp	ip, r2
     6ec:	bge	734 <transpose_array+0xbc>
     6f0:	add	r0, sp, #48	; 0x30
     6f4:	ldr	r2, [r0, ip, lsl #2]
     6f8:	mul	r8, r8, r2
     6fc:	add	r2, sp, #160	; 0xa0
     700:	mov	r1, #0
     704:	str	r1, [r2, ip, lsl #2]
     708:	add	r4, sp, #80	; 0x50
     70c:	add	r2, sp, #48	; 0x30
     710:	ldr	r1, [sp, #40]	; 0x28
     714:	sub	r1, r1, ip
     718:	lsl	r3, r1, #2
     71c:	add	r1, r2, r3
     720:	sub	lr, r1, #4096	; 0x1000
     724:	ldr	r0, [lr, #4092]	; 0xffc
     728:	str	r0, [r4, ip, lsl #2]
     72c:	add	ip, ip, #1
     730:	b	6e4 <transpose_array+0x6c>
     734:	cmp	r8, #1
     738:	bgt	744 <transpose_array+0xcc>
     73c:	mov	r0, #0
     740:	b	ad0 <transpose_array+0x458>
     744:	add	r1, sp, #120	; 0x78
     748:	mov	r3, #1
     74c:	str	r3, [r1, r2, lsl #2]
     750:	add	r1, sp, #80	; 0x50
     754:	ldr	r2, [sp, #40]	; 0x28
     758:	mov	r3, #1
     75c:	str	r3, [r1, r2, lsl #2]
     760:	ldr	r3, [sp, #40]	; 0x28
     764:	cmp	r3, #0
     768:	ble	79c <transpose_array+0x124>
     76c:	add	r2, sp, #120	; 0x78
     770:	lsl	r1, r3, #2
     774:	add	r4, r2, r1
     778:	add	ip, sp, #120	; 0x78
     77c:	ldr	ip, [ip, r3, lsl #2]
     780:	add	r1, sp, #80	; 0x50
     784:	ldr	r0, [r1, r3, lsl #2]
     788:	mul	r2, ip, r0
     78c:	sub	lr, r4, #4096	; 0x1000
     790:	str	r2, [lr, #4092]	; 0xffc
     794:	sub	r3, r3, #1
     798:	b	764 <transpose_array+0xec>
     79c:	add	ip, sp, #80	; 0x50
     7a0:	ldr	r2, [sp, #40]	; 0x28
     7a4:	mov	r1, #0
     7a8:	str	r1, [ip, r2, lsl #2]
     7ac:	add	r2, sp, #160	; 0xa0
     7b0:	ldr	ip, [sp, #40]	; 0x28
     7b4:	mov	r3, #0
     7b8:	str	r3, [r2, ip, lsl #2]
     7bc:	mul	r0, r8, r6
     7c0:	bl	0 <malloc>
     7c4:	mov	r4, r0
     7c8:	cmp	r4, #0
     7cc:	bne	7f4 <transpose_array+0x17c>
     7d0:	mvn	r0, #0
     7d4:	ldr	r1, [pc, #796]	; af8 <transpose_array+0x480>
     7d8:	mul	r2, r8, r6
     7dc:	ldr	r3, [pc, #792]	; afc <transpose_array+0x484>
     7e0:	mov	r4, #93	; 0x5d
     7e4:	str	r4, [sp]
     7e8:	bl	0 <coda_set_error>
     7ec:	mvn	r0, #0
     7f0:	b	ad0 <transpose_array+0x458>
     7f4:	cmp	r6, #4
     7f8:	bcs	944 <transpose_array+0x2cc>
     7fc:	cmp	r6, #1
     800:	beq	8ac <transpose_array+0x234>
     804:	cmp	r6, #2
     808:	bne	9fc <transpose_array+0x384>
     80c:	mov	r3, #0
     810:	cmp	r3, r8
     814:	bge	ab4 <transpose_array+0x43c>
     818:	mov	r2, #0
     81c:	add	r0, r4, r7, lsl #1
     820:	add	ip, r5, r3, lsl #1
     824:	ldrh	r1, [ip]
     828:	strh	r1, [r0]
     82c:	ldr	r0, [sp, #120]	; 0x78
     830:	add	r7, r7, r0
     834:	ldr	ip, [sp, #160]	; 0xa0
     838:	add	r1, ip, #1
     83c:	str	r1, [sp, #160]	; 0xa0
     840:	add	r1, sp, #160	; 0xa0
     844:	ldr	r1, [r1, r2, lsl #2]
     848:	add	ip, sp, #80	; 0x50
     84c:	ldr	r0, [ip, r2, lsl #2]
     850:	cmp	r1, r0
     854:	bne	8a4 <transpose_array+0x22c>
     858:	add	ip, sp, #160	; 0xa0
     85c:	mov	r0, #0
     860:	str	r0, [ip, r2, lsl #2]
     864:	add	r0, sp, #120	; 0x78
     868:	ldr	ip, [r0, r2, lsl #2]
     86c:	add	r1, sp, #80	; 0x50
     870:	ldr	r0, [r1, r2, lsl #2]
     874:	mul	ip, ip, r0
     878:	sub	r1, r7, ip
     87c:	add	r2, r2, #1
     880:	add	ip, sp, #120	; 0x78
     884:	ldr	ip, [ip, r2, lsl #2]
     888:	add	r7, r1, ip
     88c:	add	r1, sp, #160	; 0xa0
     890:	add	r0, sp, #160	; 0xa0
     894:	ldr	ip, [r0, r2, lsl #2]
     898:	add	ip, ip, #1
     89c:	str	ip, [r1, r2, lsl #2]
     8a0:	b	840 <transpose_array+0x1c8>
     8a4:	add	r3, r3, #1
     8a8:	b	810 <transpose_array+0x198>
     8ac:	mov	r3, #0
     8b0:	cmp	r3, r8
     8b4:	bge	ab4 <transpose_array+0x43c>
     8b8:	mov	r1, #0
     8bc:	ldrb	r0, [r5, r3]
     8c0:	strb	r0, [r4, r7]
     8c4:	ldr	r0, [sp, #120]	; 0x78
     8c8:	add	r7, r7, r0
     8cc:	ldr	r0, [sp, #160]	; 0xa0
     8d0:	add	r2, r0, #1
     8d4:	str	r2, [sp, #160]	; 0xa0
     8d8:	add	ip, sp, #160	; 0xa0
     8dc:	ldr	r0, [ip, r1, lsl #2]
     8e0:	add	r2, sp, #80	; 0x50
     8e4:	ldr	ip, [r2, r1, lsl #2]
     8e8:	cmp	r0, ip
     8ec:	bne	93c <transpose_array+0x2c4>
     8f0:	add	r2, sp, #160	; 0xa0
     8f4:	mov	ip, #0
     8f8:	str	ip, [r2, r1, lsl #2]
     8fc:	add	ip, sp, #120	; 0x78
     900:	ldr	r0, [ip, r1, lsl #2]
     904:	add	ip, sp, #80	; 0x50
     908:	ldr	r2, [ip, r1, lsl #2]
     90c:	mul	ip, r0, r2
     910:	sub	r0, r7, ip
     914:	add	r1, r1, #1
     918:	add	ip, sp, #120	; 0x78
     91c:	ldr	r2, [ip, r1, lsl #2]
     920:	add	r7, r0, r2
     924:	add	r2, sp, #160	; 0xa0
     928:	add	ip, sp, #160	; 0xa0
     92c:	ldr	ip, [ip, r1, lsl #2]
     930:	add	ip, ip, #1
     934:	str	ip, [r2, r1, lsl #2]
     938:	b	8d8 <transpose_array+0x260>
     93c:	add	r3, r3, #1
     940:	b	8b0 <transpose_array+0x238>
     944:	cmp	r6, #4
     948:	beq	a1c <transpose_array+0x3a4>
     94c:	cmp	r6, #8
     950:	bne	9fc <transpose_array+0x384>
     954:	mov	r9, #0
     958:	cmp	r9, r8
     95c:	bge	ab4 <transpose_array+0x43c>
     960:	mov	r2, #0
     964:	add	r0, r4, r7, lsl #3
     968:	add	r1, r5, r9, lsl #3
     96c:	ldr	r3, [r1]
     970:	ldr	ip, [r1, #4]
     974:	str	r3, [r0]
     978:	str	ip, [r0, #4]
     97c:	ldr	r1, [sp, #120]	; 0x78
     980:	add	r7, r7, r1
     984:	ldr	r0, [sp, #160]	; 0xa0
     988:	add	ip, r0, #1
     98c:	str	ip, [sp, #160]	; 0xa0
     990:	add	r1, sp, #160	; 0xa0
     994:	ldr	ip, [r1, r2, lsl #2]
     998:	add	r0, sp, #80	; 0x50
     99c:	ldr	r3, [r0, r2, lsl #2]
     9a0:	cmp	ip, r3
     9a4:	bne	9f4 <transpose_array+0x37c>
     9a8:	add	r0, sp, #160	; 0xa0
     9ac:	mov	ip, #0
     9b0:	str	ip, [r0, r2, lsl #2]
     9b4:	add	r3, sp, #120	; 0x78
     9b8:	ldr	r3, [r3, r2, lsl #2]
     9bc:	add	r0, sp, #80	; 0x50
     9c0:	ldr	r1, [r0, r2, lsl #2]
     9c4:	mul	r0, r3, r1
     9c8:	sub	r3, r7, r0
     9cc:	add	r2, r2, #1
     9d0:	add	ip, sp, #120	; 0x78
     9d4:	ldr	ip, [ip, r2, lsl #2]
     9d8:	add	r7, r3, ip
     9dc:	add	r1, sp, #160	; 0xa0
     9e0:	add	ip, sp, #160	; 0xa0
     9e4:	ldr	ip, [ip, r2, lsl #2]
     9e8:	add	ip, ip, #1
     9ec:	str	ip, [r1, r2, lsl #2]
     9f0:	b	990 <transpose_array+0x318>
     9f4:	add	r9, r9, #1
     9f8:	b	958 <transpose_array+0x2e0>
     9fc:	ldr	r0, [pc, #252]	; b00 <transpose_array+0x488>
     a00:	ldr	r1, [pc, #244]	; afc <transpose_array+0x484>
     a04:	mov	r2, #172	; 0xac
     a08:	ldr	r3, [pc, #228]	; af4 <transpose_array+0x47c>
     a0c:	bl	0 <__assert_fail>
     a10:	mov	r0, #1
     a14:	bl	0 <exit>
     a18:	b	ab4 <transpose_array+0x43c>
     a1c:	mov	r1, #0
     a20:	cmp	r1, r8
     a24:	bge	ab4 <transpose_array+0x43c>
     a28:	mov	r9, #0
     a2c:	ldr	r2, [r5, r1, lsl #2]
     a30:	str	r2, [r4, r7, lsl #2]
     a34:	ldr	r3, [sp, #120]	; 0x78
     a38:	add	r7, r7, r3
     a3c:	ldr	r0, [sp, #160]	; 0xa0
     a40:	add	r2, r0, #1
     a44:	str	r2, [sp, #160]	; 0xa0
     a48:	add	r2, sp, #160	; 0xa0
     a4c:	ldr	ip, [r2, r9, lsl #2]
     a50:	add	r0, sp, #80	; 0x50
     a54:	ldr	r3, [r0, r9, lsl #2]
     a58:	cmp	ip, r3
     a5c:	bne	aac <transpose_array+0x434>
     a60:	add	r3, sp, #160	; 0xa0
     a64:	mov	r0, #0
     a68:	str	r0, [r3, r9, lsl #2]
     a6c:	add	ip, sp, #120	; 0x78
     a70:	ldr	r2, [ip, r9, lsl #2]
     a74:	add	r3, sp, #80	; 0x50
     a78:	ldr	ip, [r3, r9, lsl #2]
     a7c:	mul	r0, r2, ip
     a80:	sub	r3, r7, r0
     a84:	add	r9, r9, #1
     a88:	add	r0, sp, #120	; 0x78
     a8c:	ldr	r2, [r0, r9, lsl #2]
     a90:	add	r7, r3, r2
     a94:	add	ip, sp, #160	; 0xa0
     a98:	add	r3, sp, #160	; 0xa0
     a9c:	ldr	r3, [r3, r9, lsl #2]
     aa0:	add	r0, r3, #1
     aa4:	str	r0, [ip, r9, lsl #2]
     aa8:	b	a48 <transpose_array+0x3d0>
     aac:	add	r1, r1, #1
     ab0:	b	a20 <transpose_array+0x3a8>
     ab4:	mul	r2, r8, r6
     ab8:	mov	r1, r4
     abc:	mov	r0, r5
     ac0:	bl	0 <memcpy>
     ac4:	mov	r0, r4
     ac8:	bl	0 <free>
     acc:	mov	r0, #0
     ad0:	ldr	r4, [sp, #16]
     ad4:	ldr	r5, [sp, #20]
     ad8:	ldr	r6, [sp, #24]
     adc:	ldr	r7, [sp, #28]
     ae0:	ldr	r8, [sp, #32]
     ae4:	ldr	r9, [sp, #36]	; 0x24
     ae8:	ldr	lr, [sp, #8]
     aec:	add	sp, sp, #200	; 0xc8
     af0:	bx	lr
     af4:	.word	0x00000a01
     af8:	.word	0x00000801
     afc:	.word	0x000005fa
     b00:	.word	0x00000748

00000b04 <get_bit_size_boundary>:
     b04:	mov	ip, sp
     b08:	sub	sp, sp, #200	; 0xc8
     b0c:	str	ip, [sp, #4]
     b10:	str	lr, [sp, #8]
     b14:	str	r4, [sp, #16]
     b18:	str	r5, [sp, #20]
     b1c:	str	r6, [sp, #24]
     b20:	str	r7, [sp, #28]
     b24:	str	r8, [sp, #32]
     b28:	str	r9, [sp, #36]	; 0x24
     b2c:	str	sl, [sp, #40]	; 0x28
     b30:	mov	r5, r3
     b34:	mov	r4, r2
     b38:	mov	r6, r1
     b3c:	mov	sl, r0
     b40:	ldr	r0, [sl, #4]
     b44:	lsl	r2, r0, #4
     b48:	add	r0, sl, r2
     b4c:	ldr	r8, [r0]
     b50:	ldr	r9, [r0, #4]
     b54:	cmp	r5, #0
     b58:	bge	b64 <get_bit_size_boundary+0x60>
     b5c:	mov	r5, #0
     b60:	mov	r4, #0
     b64:	ldr	r1, [sl]
     b68:	ldr	r1, [r1, #16]
     b6c:	cmp	r1, #0
     b70:	beq	e1c <get_bit_size_boundary+0x318>
     b74:	cmp	r1, #1
     b78:	beq	e1c <get_bit_size_boundary+0x318>
     b7c:	ldr	r0, [sl, #4]
     b80:	sub	r7, r0, #1
     b84:	cmp	r7, #0
     b88:	ble	bb4 <get_bit_size_boundary+0xb0>
     b8c:	lsl	r1, r7, #4
     b90:	add	ip, sl, r1
     b94:	ldr	r0, [ip, #8]
     b98:	ldr	r3, [r0]
     b9c:	cmp	r3, #0
     ba0:	beq	bac <get_bit_size_boundary+0xa8>
     ba4:	cmp	r3, #1
     ba8:	bne	bb4 <get_bit_size_boundary+0xb0>
     bac:	sub	r7, r7, #1
     bb0:	b	b84 <get_bit_size_boundary+0x80>
     bb4:	cmp	r7, #0
     bb8:	blt	be0 <get_bit_size_boundary+0xdc>
     bbc:	lsl	r3, r7, #4
     bc0:	add	r3, sl, r3
     bc4:	ldr	r0, [r3, #8]
     bc8:	ldr	r2, [r0]
     bcc:	cmp	r2, #100	; 0x64
     bd0:	bne	be0 <get_bit_size_boundary+0xdc>
     bd4:	ldr	r2, [r0, #8]
     bd8:	cmp	r2, #2
     bdc:	beq	bf4 <get_bit_size_boundary+0xf0>
     be0:	ldr	r0, [pc, #764]	; ee4 <get_bit_size_boundary+0x3e0>
     be4:	ldr	r1, [pc, #768]	; eec <get_bit_size_boundary+0x3e8>
     be8:	mov	r2, #121	; 0x79
     bec:	ldr	r3, [pc, #744]	; edc <get_bit_size_boundary+0x3d8>
     bf0:	bl	0 <__assert_fail>
     bf4:	lsl	r2, r7, #4
     bf8:	add	r0, sl, r2
     bfc:	ldr	r0, [r0, #8]
     c00:	ldr	r3, [r0, #24]
     c04:	ldr	r1, [r0, #28]
     c08:	lsl	r1, r1, #3
     c0c:	orr	r1, r1, r3, lsr #29
     c10:	lsl	ip, r3, #3
     c14:	subs	r8, r8, ip
     c18:	sbc	r9, r9, r1
     c1c:	ldr	ip, [r0, #16]
     c20:	lsl	sl, ip, #3
     c24:	asr	r7, sl, #31
     c28:	mov	r3, r9
     c2c:	cmp	r3, #0
     c30:	blt	da0 <get_bit_size_boundary+0x29c>
     c34:	mov	r1, r8
     c38:	mov	r0, r7
     c3c:	cmp	r3, r0
     c40:	bne	c58 <get_bit_size_boundary+0x154>
     c44:	mov	r2, sl
     c48:	cmp	r1, r2
     c4c:	movhi	ip, #1
     c50:	movls	ip, #0
     c54:	b	c64 <get_bit_size_boundary+0x160>
     c58:	cmp	r3, r0
     c5c:	movgt	ip, #1
     c60:	movle	ip, #0
     c64:	cmp	ip, #0
     c68:	bne	da0 <get_bit_size_boundary+0x29c>
     c6c:	adds	r3, r8, r4
     c70:	adc	r1, r9, r5
     c74:	mov	r0, r7
     c78:	cmp	r1, r0
     c7c:	bne	c90 <get_bit_size_boundary+0x18c>
     c80:	mov	r0, sl
     c84:	cmp	r3, r0
     c88:	bhi	c98 <get_bit_size_boundary+0x194>
     c8c:	b	e98 <get_bit_size_boundary+0x394>
     c90:	cmp	r1, r0
     c94:	ble	e98 <get_bit_size_boundary+0x394>
     c98:	asr	r1, r5, #3
     c9c:	mov	r2, r4
     ca0:	lsr	r2, r2, #3
     ca4:	orr	r0, r2, r5, lsl #29
     ca8:	add	r2, sp, #136	; 0x88
     cac:	bl	0 <coda_str64>
     cb0:	mov	r0, #0
     cb4:	mov	r1, r4
     cb8:	and	ip, r1, #7
     cbc:	orr	r1, r0, ip
     cc0:	cmp	r1, #0
     cc4:	beq	ce4 <get_bit_size_boundary+0x1e0>
     cc8:	add	r0, sp, #136	; 0x88
     ccc:	bl	0 <strlen>
     cd0:	add	r1, sp, #136	; 0x88
     cd4:	add	r0, r1, r0
     cd8:	ldr	r1, [pc, #512]	; ee0 <get_bit_size_boundary+0x3dc>
     cdc:	and	r2, r4, #7
     ce0:	bl	0 <sprintf>
     ce4:	asr	r1, r9, #3
     ce8:	mov	r2, r8
     cec:	lsr	r3, r2, #3
     cf0:	orr	r0, r3, r9, lsl #29
     cf4:	add	r2, sp, #168	; 0xa8
     cf8:	bl	0 <coda_str64>
     cfc:	mov	ip, r8
     d00:	mov	r1, #0
     d04:	and	r2, ip, #7
     d08:	orr	ip, r1, r2
     d0c:	cmp	ip, #0
     d10:	beq	d30 <get_bit_size_boundary+0x22c>
     d14:	add	r0, sp, #168	; 0xa8
     d18:	bl	0 <strlen>
     d1c:	add	ip, sp, #168	; 0xa8
     d20:	add	r0, ip, r0
     d24:	ldr	r1, [pc, #436]	; ee0 <get_bit_size_boundary+0x3dc>
     d28:	and	r2, r8, #7
     d2c:	bl	0 <sprintf>
     d30:	asr	r1, r7, #3
     d34:	mov	r3, sl
     d38:	lsr	r2, r3, #3
     d3c:	orr	r0, r2, r7, lsl #29
     d40:	add	r2, sp, #72	; 0x48
     d44:	bl	0 <coda_str64>
     d48:	mov	ip, #0
     d4c:	mov	r2, sl
     d50:	and	r3, r2, #7
     d54:	orr	r0, ip, r3
     d58:	cmp	r0, #0
     d5c:	beq	d7c <get_bit_size_boundary+0x278>
     d60:	add	r0, sp, #72	; 0x48
     d64:	bl	0 <strlen>
     d68:	add	r3, sp, #72	; 0x48
     d6c:	add	r0, r3, r0
     d70:	ldr	r1, [pc, #360]	; ee0 <get_bit_size_boundary+0x3dc>
     d74:	and	r2, sl, #7
     d78:	bl	0 <sprintf>
     d7c:	mvn	r0, #300	; 0x12c
     d80:	ldr	r1, [pc, #336]	; ed8 <get_bit_size_boundary+0x3d4>
     d84:	add	r2, sp, #136	; 0x88
     d88:	add	r3, sp, #168	; 0xa8
     d8c:	add	ip, sp, #72	; 0x48
     d90:	str	ip, [sp]
     d94:	bl	0 <coda_set_error>
     d98:	mvn	r0, #0
     d9c:	b	eac <get_bit_size_boundary+0x3a8>
     da0:	asr	r1, r9, #3
     da4:	mov	r2, r8
     da8:	lsr	r0, r2, #3
     dac:	orr	r0, r0, r9, lsl #29
     db0:	add	r2, sp, #104	; 0x68
     db4:	bl	0 <coda_str64>
     db8:	mov	ip, r8
     dbc:	mov	r0, #0
     dc0:	and	ip, ip, #7
     dc4:	orr	r3, r0, ip
     dc8:	cmp	r3, #0
     dcc:	beq	dec <get_bit_size_boundary+0x2e8>
     dd0:	add	r0, sp, #104	; 0x68
     dd4:	bl	0 <strlen>
     dd8:	add	r1, sp, #104	; 0x68
     ddc:	add	r0, r1, r0
     de0:	ldr	r1, [pc, #248]	; ee0 <get_bit_size_boundary+0x3dc>
     de4:	and	r2, r8, #7
     de8:	bl	0 <sprintf>
     dec:	asr	r1, r7, #3
     df0:	lsr	r0, sl, #3
     df4:	orr	r0, r0, r7, lsl #29
     df8:	add	r2, sp, #48	; 0x30
     dfc:	bl	0 <coda_str64>
     e00:	mvn	r0, #300	; 0x12c
     e04:	ldr	r1, [pc, #220]	; ee8 <get_bit_size_boundary+0x3e4>
     e08:	add	r2, sp, #104	; 0x68
     e0c:	add	r3, sp, #48	; 0x30
     e10:	bl	0 <coda_set_error>
     e14:	mvn	r0, #0
     e18:	b	eac <get_bit_size_boundary+0x3a8>
     e1c:	ldr	r2, [sl]
     e20:	ldr	r3, [r2, #48]	; 0x30
     e24:	cmp	r3, #0
     e28:	bne	e44 <get_bit_size_boundary+0x340>
     e2c:	ldr	r3, [r2, #8]
     e30:	ldr	r2, [r2, #12]
     e34:	lsl	ip, r2, #3
     e38:	orr	r7, ip, r3, lsr #29
     e3c:	lsl	sl, r3, #3
     e40:	b	e58 <get_bit_size_boundary+0x354>
     e44:	ldr	r0, [r2, #40]	; 0x28
     e48:	ldr	r1, [r2, #44]	; 0x2c
     e4c:	lsl	ip, r1, #3
     e50:	orr	r7, ip, r0, lsr #29
     e54:	lsl	sl, r0, #3
     e58:	adds	r0, r8, r4
     e5c:	adc	r3, r9, r5
     e60:	mov	ip, sl
     e64:	mov	r2, r7
     e68:	cmp	r3, r2
     e6c:	bne	e7c <get_bit_size_boundary+0x378>
     e70:	cmp	r0, ip
     e74:	bcs	e84 <get_bit_size_boundary+0x380>
     e78:	b	e98 <get_bit_size_boundary+0x394>
     e7c:	cmp	r3, r2
     e80:	ble	e98 <get_bit_size_boundary+0x394>
     e84:	mvn	r0, #300	; 0x12c
     e88:	ldr	r1, [pc, #68]	; ed4 <get_bit_size_boundary+0x3d0>
     e8c:	bl	0 <coda_set_error>
     e90:	mvn	r0, #0
     e94:	b	eac <get_bit_size_boundary+0x3a8>
     e98:	subs	r3, sl, r8
     e9c:	sbc	ip, r7, r9
     ea0:	str	r3, [r6]
     ea4:	str	ip, [r6, #4]
     ea8:	mov	r0, #0
     eac:	ldr	r4, [sp, #16]
     eb0:	ldr	r5, [sp, #20]
     eb4:	ldr	r6, [sp, #24]
     eb8:	ldr	r7, [sp, #28]
     ebc:	ldr	r8, [sp, #32]
     ec0:	ldr	r9, [sp, #36]	; 0x24
     ec4:	ldr	sl, [sp, #40]	; 0x28
     ec8:	ldr	lr, [sp, #8]
     ecc:	add	sp, sp, #200	; 0xc8
     ed0:	bx	lr
     ed4:	.word	0x00000884
     ed8:	.word	0x000003c6
     edc:	.word	0x00000a11
     ee0:	.word	0x00000000
     ee4:	.word	0x0000074a
     ee8:	.word	0x00000355
     eec:	.word	0x000006a4

00000ef0 <parse_integer_mapping>:
     ef0:	mov	ip, sp
     ef4:	sub	sp, sp, #32
     ef8:	str	ip, [sp]
     efc:	str	lr, [sp, #4]
     f00:	str	r4, [sp, #8]
     f04:	str	r5, [sp, #12]
     f08:	str	r6, [sp, #16]
     f0c:	str	r7, [sp, #20]
     f10:	str	r8, [sp, #24]
     f14:	str	r9, [sp, #28]
     f18:	ldr	r6, [ip]
     f1c:	mov	r5, r3
     f20:	mov	r7, r2
     f24:	mov	r4, r1
     f28:	mov	r8, r0
     f2c:	mov	r9, #0
     f30:	ldr	r1, [r7, #8]
     f34:	cmp	r9, r1
     f38:	bge	fe4 <parse_integer_mapping+0xf4>
     f3c:	ldr	ip, [r7, #12]
     f40:	ldr	r0, [ip, r9, lsl #2]
     f44:	ldr	r2, [r0]
     f48:	cmp	r2, #0
     f4c:	beq	fbc <parse_integer_mapping+0xcc>
     f50:	cmp	r2, r4
     f54:	bgt	fdc <parse_integer_mapping+0xec>
     f58:	ldr	r0, [r0, #4]
     f5c:	mov	r1, r8
     f60:	bl	0 <memcmp>
     f64:	cmp	r0, #0
     f68:	bne	fdc <parse_integer_mapping+0xec>
     f6c:	cmp	r5, #0
     f70:	bne	f9c <parse_integer_mapping+0xac>
     f74:	ldr	r3, [r7, #12]
     f78:	ldr	r0, [r3, r9, lsl #2]
     f7c:	ldr	r1, [r0]
     f80:	cmp	r1, r4
     f84:	beq	f9c <parse_integer_mapping+0xac>
     f88:	mvn	r0, #102	; 0x66
     f8c:	ldr	r1, [pc, #120]	; 100c <parse_integer_mapping+0x11c>
     f90:	bl	0 <coda_set_error>
     f94:	mvn	r0, #0
     f98:	b	fe8 <parse_integer_mapping+0xf8>
     f9c:	ldr	r1, [r7, #12]
     fa0:	ldr	r2, [r1, r9, lsl #2]
     fa4:	ldr	ip, [r2, #8]
     fa8:	ldr	r3, [r2, #12]
     fac:	str	ip, [r6]
     fb0:	str	r3, [r6, #4]
     fb4:	mov	r0, #1
     fb8:	b	fe8 <parse_integer_mapping+0xf8>
     fbc:	cmp	r4, #0
     fc0:	bne	fdc <parse_integer_mapping+0xec>
     fc4:	ldr	ip, [r0, #8]
     fc8:	ldr	r3, [r0, #12]
     fcc:	str	ip, [r6]
     fd0:	str	r3, [r6, #4]
     fd4:	mov	r0, #1
     fd8:	b	fe8 <parse_integer_mapping+0xf8>
     fdc:	add	r9, r9, #1
     fe0:	b	f30 <parse_integer_mapping+0x40>
     fe4:	mov	r0, #0
     fe8:	ldr	r4, [sp, #8]
     fec:	ldr	r5, [sp, #12]
     ff0:	ldr	r6, [sp, #16]
     ff4:	ldr	r7, [sp, #20]
     ff8:	ldr	r8, [sp, #24]
     ffc:	ldr	r9, [sp, #28]
    1000:	ldr	lr, [sp, #4]
    1004:	add	sp, sp, #32
    1008:	bx	lr
    100c:	.word	0x0000019a

00001010 <coda_ascii_parse_int64>:
    1010:	mov	ip, sp
    1014:	sub	sp, sp, #56	; 0x38
    1018:	str	ip, [sp]
    101c:	str	lr, [sp, #4]
    1020:	str	r4, [sp, #24]
    1024:	str	r5, [sp, #28]
    1028:	str	r6, [sp, #32]
    102c:	str	r7, [sp, #36]	; 0x24
    1030:	str	r8, [sp, #40]	; 0x28
    1034:	str	r9, [sp, #44]	; 0x2c
    1038:	str	sl, [sp, #48]	; 0x30
    103c:	str	fp, [sp, #52]	; 0x34
    1040:	str	r3, [sp, #20]
    1044:	str	r2, [sp, #16]
    1048:	str	r1, [sp, #8]
    104c:	mov	fp, r0
    1050:	mov	sl, #0
    1054:	ldr	r8, [sp, #8]
    1058:	cmp	r8, #0
    105c:	ble	1080 <coda_ascii_parse_int64+0x70>
    1060:	ldrb	ip, [fp]
    1064:	cmp	ip, #32
    1068:	beq	1074 <coda_ascii_parse_int64+0x64>
    106c:	cmp	ip, #9
    1070:	bne	1080 <coda_ascii_parse_int64+0x70>
    1074:	add	fp, fp, #1
    1078:	sub	r8, r8, #1
    107c:	b	1058 <coda_ascii_parse_int64+0x48>
    1080:	ldrb	r2, [fp]
    1084:	cmp	r2, #43	; 0x2b
    1088:	beq	1094 <coda_ascii_parse_int64+0x84>
    108c:	cmp	r2, #45	; 0x2d
    1090:	bne	10ac <coda_ascii_parse_int64+0x9c>
    1094:	ldrb	r1, [fp]
    1098:	cmp	r1, #45	; 0x2d
    109c:	moveq	sl, #1
    10a0:	movne	sl, #0
    10a4:	add	fp, fp, #1
    10a8:	sub	r8, r8, #1
    10ac:	mov	r7, #0
    10b0:	mov	r6, #0
    10b4:	mov	r9, #0
    10b8:	cmp	r8, #0
    10bc:	ble	1194 <coda_ascii_parse_int64+0x184>
    10c0:	ldrb	r3, [fp]
    10c4:	cmp	r3, #48	; 0x30
    10c8:	blt	1194 <coda_ascii_parse_int64+0x184>
    10cc:	cmp	r3, #57	; 0x39
    10d0:	bgt	1194 <coda_ascii_parse_int64+0x184>
    10d4:	sub	r4, r3, #48	; 0x30
    10d8:	asr	r5, r4, #31
    10dc:	mvn	r2, #-2147483648	; 0x80000000
    10e0:	mvn	r3, #0
    10e4:	subs	r0, r3, r4
    10e8:	sbc	r2, r2, r5
    10ec:	str	r2, [sp, #12]
    10f0:	movw	r3, #26214	; 0x6666
    10f4:	movt	r3, #26214	; 0x6666
    10f8:	movw	r2, #26215	; 0x6667
    10fc:	movt	r2, #26214	; 0x6666
    1100:	ldr	r1, [sp, #12]
    1104:	bl	0 <__compcert_i64_smulh>
    1108:	mov	r3, r1
    110c:	asr	r2, r3, #2
    1110:	lsr	r0, r0, #2
    1114:	orr	r3, r0, r3, lsl #30
    1118:	mov	r0, r2
    111c:	mov	ip, #0
    1120:	ldr	r1, [sp, #12]
    1124:	lsr	r1, r1, #31
    1128:	adds	r1, r3, r1
    112c:	adc	r2, r0, ip
    1130:	mov	r3, r7
    1134:	cmp	r3, r2
    1138:	bne	114c <coda_ascii_parse_int64+0x13c>
    113c:	mov	ip, r6
    1140:	cmp	ip, r1
    1144:	bhi	1154 <coda_ascii_parse_int64+0x144>
    1148:	b	1168 <coda_ascii_parse_int64+0x158>
    114c:	cmp	r3, r2
    1150:	ble	1168 <coda_ascii_parse_int64+0x158>
    1154:	mvn	r0, #102	; 0x66
    1158:	ldr	r1, [pc, #268]	; 126c <coda_ascii_parse_int64+0x25c>
    115c:	bl	0 <coda_set_error>
    1160:	mvn	r0, #0
    1164:	b	1240 <coda_ascii_parse_int64+0x230>
    1168:	mov	r2, #10
    116c:	umull	r1, r2, r6, r2
    1170:	lsl	r3, r7, #3
    1174:	add	r3, r3, r7, lsl #1
    1178:	add	r0, r2, r3
    117c:	adds	r6, r1, r4
    1180:	adc	r7, r0, r5
    1184:	add	r9, r9, #1
    1188:	add	fp, fp, #1
    118c:	sub	r8, r8, #1
    1190:	b	10b8 <coda_ascii_parse_int64+0xa8>
    1194:	cmp	r9, #0
    1198:	bne	11b0 <coda_ascii_parse_int64+0x1a0>
    119c:	mvn	r0, #102	; 0x66
    11a0:	ldr	r1, [pc, #204]	; 1274 <coda_ascii_parse_int64+0x264>
    11a4:	bl	0 <coda_set_error>
    11a8:	mvn	r0, #0
    11ac:	b	1240 <coda_ascii_parse_int64+0x230>
    11b0:	cmp	r8, #0
    11b4:	movne	r2, #1
    11b8:	moveq	r2, #0
    11bc:	mov	r1, #0
    11c0:	ldr	r0, [sp, #20]
    11c4:	cmp	r0, #0
    11c8:	moveq	r3, r2
    11cc:	movne	r3, r1
    11d0:	cmp	r3, #0
    11d4:	beq	121c <coda_ascii_parse_int64+0x20c>
    11d8:	cmp	r8, #0
    11dc:	ble	1200 <coda_ascii_parse_int64+0x1f0>
    11e0:	ldrb	r0, [fp]
    11e4:	cmp	r0, #32
    11e8:	beq	11f4 <coda_ascii_parse_int64+0x1e4>
    11ec:	cmp	r0, #9
    11f0:	bne	1200 <coda_ascii_parse_int64+0x1f0>
    11f4:	add	fp, fp, #1
    11f8:	sub	r8, r8, #1
    11fc:	b	11d8 <coda_ascii_parse_int64+0x1c8>
    1200:	cmp	r8, #0
    1204:	beq	121c <coda_ascii_parse_int64+0x20c>
    1208:	mvn	r0, #102	; 0x66
    120c:	ldr	r1, [pc, #92]	; 1270 <coda_ascii_parse_int64+0x260>
    1210:	bl	0 <coda_set_error>
    1214:	mvn	r0, #0
    1218:	b	1240 <coda_ascii_parse_int64+0x230>
    121c:	cmp	sl, #0
    1220:	beq	122c <coda_ascii_parse_int64+0x21c>
    1224:	rsbs	r6, r6, #0
    1228:	rsc	r7, r7, #0
    122c:	ldr	ip, [sp, #16]
    1230:	str	r6, [ip]
    1234:	str	r7, [ip, #4]
    1238:	ldr	r1, [sp, #8]
    123c:	sub	r0, r1, r8
    1240:	ldr	r4, [sp, #24]
    1244:	ldr	r5, [sp, #28]
    1248:	ldr	r6, [sp, #32]
    124c:	ldr	r7, [sp, #36]	; 0x24
    1250:	ldr	r8, [sp, #40]	; 0x28
    1254:	ldr	r9, [sp, #44]	; 0x2c
    1258:	ldr	sl, [sp, #48]	; 0x30
    125c:	ldr	fp, [sp, #52]	; 0x34
    1260:	ldr	lr, [sp, #4]
    1264:	add	sp, sp, #56	; 0x38
    1268:	bx	lr
    126c:	.word	0x0000030a
    1270:	.word	0x0000019a
    1274:	.word	0x000000d3

00001278 <coda_ascii_parse_uint64>:
    1278:	mov	ip, sp
    127c:	sub	sp, sp, #48	; 0x30
    1280:	str	ip, [sp]
    1284:	str	lr, [sp, #4]
    1288:	str	r4, [sp, #16]
    128c:	str	r5, [sp, #20]
    1290:	str	r6, [sp, #24]
    1294:	str	r7, [sp, #28]
    1298:	str	r8, [sp, #32]
    129c:	str	r9, [sp, #36]	; 0x24
    12a0:	str	sl, [sp, #40]	; 0x28
    12a4:	str	fp, [sp, #44]	; 0x2c
    12a8:	str	r3, [sp, #12]
    12ac:	mov	r9, r2
    12b0:	str	r1, [sp, #8]
    12b4:	mov	fp, r0
    12b8:	ldr	r8, [sp, #8]
    12bc:	cmp	r8, #0
    12c0:	ble	12e4 <coda_ascii_parse_uint64+0x6c>
    12c4:	ldrb	r2, [fp]
    12c8:	cmp	r2, #32
    12cc:	beq	12d8 <coda_ascii_parse_uint64+0x60>
    12d0:	cmp	r2, #9
    12d4:	bne	12e4 <coda_ascii_parse_uint64+0x6c>
    12d8:	add	fp, fp, #1
    12dc:	sub	r8, r8, #1
    12e0:	b	12bc <coda_ascii_parse_uint64+0x44>
    12e4:	ldrb	r0, [fp]
    12e8:	cmp	r0, #43	; 0x2b
    12ec:	bne	12f8 <coda_ascii_parse_uint64+0x80>
    12f0:	add	fp, fp, #1
    12f4:	sub	r8, r8, #1
    12f8:	mov	r5, #0
    12fc:	mov	r4, #0
    1300:	mov	sl, #0
    1304:	cmp	r8, #0
    1308:	ble	13c0 <coda_ascii_parse_uint64+0x148>
    130c:	ldrb	r0, [fp]
    1310:	cmp	r0, #48	; 0x30
    1314:	blt	13c0 <coda_ascii_parse_uint64+0x148>
    1318:	cmp	r0, #57	; 0x39
    131c:	bgt	13c0 <coda_ascii_parse_uint64+0x148>
    1320:	sub	r6, r0, #48	; 0x30
    1324:	asr	r7, r6, #31
    1328:	mvn	r3, #0
    132c:	mvn	ip, #0
    1330:	subs	r0, ip, r6
    1334:	sbc	r1, r3, r7
    1338:	movw	r3, #52428	; 0xcccc
    133c:	movt	r3, #52428	; 0xcccc
    1340:	movw	r2, #52429	; 0xcccd
    1344:	movt	r2, #52428	; 0xcccc
    1348:	bl	0 <__compcert_i64_umulh>
    134c:	mov	ip, r1
    1350:	lsr	r3, ip, #3
    1354:	lsr	r2, r0, #3
    1358:	orr	r0, r2, ip, lsl #29
    135c:	mov	ip, r5
    1360:	cmp	ip, r3
    1364:	bne	1378 <coda_ascii_parse_uint64+0x100>
    1368:	mov	r1, r4
    136c:	cmp	r1, r0
    1370:	bhi	1380 <coda_ascii_parse_uint64+0x108>
    1374:	b	1394 <coda_ascii_parse_uint64+0x11c>
    1378:	cmp	ip, r3
    137c:	bls	1394 <coda_ascii_parse_uint64+0x11c>
    1380:	mvn	r0, #102	; 0x66
    1384:	ldr	r1, [pc, #248]	; 1484 <coda_ascii_parse_uint64+0x20c>
    1388:	bl	0 <coda_set_error>
    138c:	mvn	r0, #0
    1390:	b	1458 <coda_ascii_parse_uint64+0x1e0>
    1394:	mov	r0, #10
    1398:	umull	r1, r2, r4, r0
    139c:	lsl	ip, r5, #3
    13a0:	add	ip, ip, r5, lsl #1
    13a4:	add	r2, r2, ip
    13a8:	adds	r4, r1, r6
    13ac:	adc	r5, r2, r7
    13b0:	add	sl, sl, #1
    13b4:	add	fp, fp, #1
    13b8:	sub	r8, r8, #1
    13bc:	b	1304 <coda_ascii_parse_uint64+0x8c>
    13c0:	cmp	sl, #0
    13c4:	bne	13dc <coda_ascii_parse_uint64+0x164>
    13c8:	mvn	r0, #102	; 0x66
    13cc:	ldr	r1, [pc, #184]	; 148c <coda_ascii_parse_uint64+0x214>
    13d0:	bl	0 <coda_set_error>
    13d4:	mvn	r0, #0
    13d8:	b	1458 <coda_ascii_parse_uint64+0x1e0>
    13dc:	cmp	r8, #0
    13e0:	movne	r3, #1
    13e4:	moveq	r3, #0
    13e8:	mov	ip, #0
    13ec:	ldr	r2, [sp, #12]
    13f0:	cmp	r2, #0
    13f4:	moveq	r1, r3
    13f8:	movne	r1, ip
    13fc:	cmp	r1, #0
    1400:	beq	1448 <coda_ascii_parse_uint64+0x1d0>
    1404:	cmp	r8, #0
    1408:	ble	142c <coda_ascii_parse_uint64+0x1b4>
    140c:	ldrb	r0, [fp]
    1410:	cmp	r0, #32
    1414:	beq	1420 <coda_ascii_parse_uint64+0x1a8>
    1418:	cmp	r0, #9
    141c:	bne	142c <coda_ascii_parse_uint64+0x1b4>
    1420:	add	fp, fp, #1
    1424:	sub	r8, r8, #1
    1428:	b	1404 <coda_ascii_parse_uint64+0x18c>
    142c:	cmp	r8, #0
    1430:	beq	1448 <coda_ascii_parse_uint64+0x1d0>
    1434:	mvn	r0, #102	; 0x66
    1438:	ldr	r1, [pc, #72]	; 1488 <coda_ascii_parse_uint64+0x210>
    143c:	bl	0 <coda_set_error>
    1440:	mvn	r0, #0
    1444:	b	1458 <coda_ascii_parse_uint64+0x1e0>
    1448:	str	r4, [r9]
    144c:	str	r5, [r9, #4]
    1450:	ldr	r1, [sp, #8]
    1454:	sub	r0, r1, r8
    1458:	ldr	r4, [sp, #16]
    145c:	ldr	r5, [sp, #20]
    1460:	ldr	r6, [sp, #24]
    1464:	ldr	r7, [sp, #28]
    1468:	ldr	r8, [sp, #32]
    146c:	ldr	r9, [sp, #36]	; 0x24
    1470:	ldr	sl, [sp, #40]	; 0x28
    1474:	ldr	fp, [sp, #44]	; 0x2c
    1478:	ldr	lr, [sp, #4]
    147c:	add	sp, sp, #48	; 0x30
    1480:	bx	lr
    1484:	.word	0x0000030a
    1488:	.word	0x0000019a
    148c:	.word	0x000000d3

00001490 <coda_ascii_parse_double>:
    1490:	mov	ip, sp
    1494:	sub	sp, sp, #32
    1498:	str	ip, [sp]
    149c:	str	lr, [sp, #4]
    14a0:	str	r4, [sp, #8]
    14a4:	str	r5, [sp, #12]
    14a8:	str	r6, [sp, #16]
    14ac:	str	r7, [sp, #20]
    14b0:	str	r8, [sp, #24]
    14b4:	str	r9, [sp, #28]
    14b8:	mov	r5, r2
    14bc:	mov	r4, r1
    14c0:	mov	r7, #0
    14c4:	mov	r6, r4
    14c8:	cmp	r6, #0
    14cc:	ble	14f0 <coda_ascii_parse_double+0x60>
    14d0:	ldrb	r2, [r0]
    14d4:	cmp	r2, #32
    14d8:	beq	14e4 <coda_ascii_parse_double+0x54>
    14dc:	cmp	r2, #9
    14e0:	bne	14f0 <coda_ascii_parse_double+0x60>
    14e4:	add	r0, r0, #1
    14e8:	sub	r6, r6, #1
    14ec:	b	14c8 <coda_ascii_parse_double+0x38>
    14f0:	mov	ip, #0
    14f4:	cmp	r6, #0
    14f8:	ble	152c <coda_ascii_parse_double+0x9c>
    14fc:	ldrb	r1, [r0]
    1500:	cmp	r1, #43	; 0x2b
    1504:	beq	1510 <coda_ascii_parse_double+0x80>
    1508:	cmp	r1, #45	; 0x2d
    150c:	bne	152c <coda_ascii_parse_double+0x9c>
    1510:	ldrb	ip, [r0]
    1514:	cmp	ip, #45	; 0x2d
    1518:	moveq	r7, #1
    151c:	movne	r7, #0
    1520:	mov	ip, #1
    1524:	add	r0, r0, #1
    1528:	sub	r6, r6, #1
    152c:	cmp	r6, #3
    1530:	blt	1684 <coda_ascii_parse_double+0x1f4>
    1534:	ldrb	r1, [r0]
    1538:	cmp	r1, #78	; 0x4e
    153c:	beq	1548 <coda_ascii_parse_double+0xb8>
    1540:	cmp	r1, #110	; 0x6e
    1544:	bne	155c <coda_ascii_parse_double+0xcc>
    1548:	ldrb	r1, [r0, #1]
    154c:	cmp	r1, #65	; 0x41
    1550:	beq	1564 <coda_ascii_parse_double+0xd4>
    1554:	cmp	r1, #97	; 0x61
    1558:	beq	1564 <coda_ascii_parse_double+0xd4>
    155c:	mov	r1, #0
    1560:	b	1584 <coda_ascii_parse_double+0xf4>
    1564:	ldrb	r1, [r0, #2]
    1568:	cmp	r1, #78	; 0x4e
    156c:	beq	1580 <coda_ascii_parse_double+0xf0>
    1570:	cmp	r1, #110	; 0x6e
    1574:	moveq	r1, #1
    1578:	movne	r1, #0
    157c:	b	1584 <coda_ascii_parse_double+0xf4>
    1580:	mov	r1, #1
    1584:	eor	r2, ip, #1
    1588:	mov	ip, #0
    158c:	cmp	r1, #0
    1590:	movne	r1, r2
    1594:	moveq	r1, ip
    1598:	cmp	r1, #0
    159c:	bne	1638 <coda_ascii_parse_double+0x1a8>
    15a0:	ldrb	ip, [r0]
    15a4:	cmp	ip, #73	; 0x49
    15a8:	beq	15b4 <coda_ascii_parse_double+0x124>
    15ac:	cmp	ip, #105	; 0x69
    15b0:	bne	1684 <coda_ascii_parse_double+0x1f4>
    15b4:	ldrb	ip, [r0, #1]
    15b8:	cmp	ip, #78	; 0x4e
    15bc:	beq	15c8 <coda_ascii_parse_double+0x138>
    15c0:	cmp	ip, #110	; 0x6e
    15c4:	bne	1684 <coda_ascii_parse_double+0x1f4>
    15c8:	ldrb	r1, [r0, #2]
    15cc:	cmp	r1, #70	; 0x46
    15d0:	beq	15dc <coda_ascii_parse_double+0x14c>
    15d4:	cmp	r1, #102	; 0x66
    15d8:	bne	1684 <coda_ascii_parse_double+0x1f4>
    15dc:	sub	r6, r6, #3
    15e0:	cmp	r6, #0
    15e4:	movne	r2, #1
    15e8:	moveq	r2, #0
    15ec:	mov	ip, #0
    15f0:	cmp	r3, #0
    15f4:	moveq	r2, r2
    15f8:	movne	r2, ip
    15fc:	cmp	r2, #0
    1600:	beq	1618 <coda_ascii_parse_double+0x188>
    1604:	mvn	r0, #102	; 0x66
    1608:	ldr	r1, [pc, #800]	; 1930 <coda_ascii_parse_double+0x4a0>
    160c:	bl	0 <coda_set_error>
    1610:	mvn	r0, #0
    1614:	b	190c <coda_ascii_parse_double+0x47c>
    1618:	cmp	r7, #0
    161c:	bne	1628 <coda_ascii_parse_double+0x198>
    1620:	bl	0 <coda_PlusInf>
    1624:	b	162c <coda_ascii_parse_double+0x19c>
    1628:	bl	0 <coda_MinInf>
    162c:	vstr	d0, [r5]
    1630:	sub	r0, r4, r6
    1634:	b	190c <coda_ascii_parse_double+0x47c>
    1638:	sub	r6, r6, #3
    163c:	cmp	r6, #0
    1640:	movne	r0, #1
    1644:	moveq	r0, #0
    1648:	mov	r1, #0
    164c:	cmp	r3, #0
    1650:	moveq	ip, r0
    1654:	movne	ip, r1
    1658:	cmp	ip, #0
    165c:	beq	1674 <coda_ascii_parse_double+0x1e4>
    1660:	mvn	r0, #102	; 0x66
    1664:	ldr	r1, [pc, #708]	; 1930 <coda_ascii_parse_double+0x4a0>
    1668:	bl	0 <coda_set_error>
    166c:	mvn	r0, #0
    1670:	b	190c <coda_ascii_parse_double+0x47c>
    1674:	bl	0 <coda_NaN>
    1678:	vstr	d0, [r5]
    167c:	sub	r0, r4, r6
    1680:	b	190c <coda_ascii_parse_double+0x47c>
    1684:	vldr	d5, [pc, #688]	; 193c <coda_ascii_parse_double+0x4ac>
    1688:	mov	ip, #0
    168c:	mov	r8, #0
    1690:	cmp	r6, #0
    1694:	ble	16d4 <coda_ascii_parse_double+0x244>
    1698:	ldrb	r2, [r0]
    169c:	cmp	r2, #48	; 0x30
    16a0:	blt	16d4 <coda_ascii_parse_double+0x244>
    16a4:	cmp	r2, #57	; 0x39
    16a8:	bgt	16d4 <coda_ascii_parse_double+0x244>
    16ac:	vmov.f64	d1, #36	; 0x41200000  10.0
    16b0:	vmul.f64	d0, d1, d5
    16b4:	sub	r1, r2, #48	; 0x30
    16b8:	vmov	s12, r1
    16bc:	vcvt.f64.s32	d6, s12
    16c0:	vadd.f64	d5, d0, d6
    16c4:	add	r8, r8, #1
    16c8:	add	r0, r0, #1
    16cc:	sub	r6, r6, #1
    16d0:	b	1690 <coda_ascii_parse_double+0x200>
    16d4:	cmp	r6, #0
    16d8:	ble	1738 <coda_ascii_parse_double+0x2a8>
    16dc:	ldrb	r1, [r0]
    16e0:	cmp	r1, #46	; 0x2e
    16e4:	bne	1738 <coda_ascii_parse_double+0x2a8>
    16e8:	add	r0, r0, #1
    16ec:	sub	r6, r6, #1
    16f0:	cmp	r6, #0
    16f4:	ble	1738 <coda_ascii_parse_double+0x2a8>
    16f8:	ldrb	r1, [r0]
    16fc:	cmp	r1, #48	; 0x30
    1700:	blt	1738 <coda_ascii_parse_double+0x2a8>
    1704:	cmp	r1, #57	; 0x39
    1708:	bgt	1738 <coda_ascii_parse_double+0x2a8>
    170c:	vmov.f64	d2, #36	; 0x41200000  10.0
    1710:	vmul.f64	d1, d2, d5
    1714:	sub	r1, r1, #48	; 0x30
    1718:	vmov	s6, r1
    171c:	vcvt.f64.s32	d3, s6
    1720:	vadd.f64	d5, d1, d3
    1724:	sub	ip, ip, #1
    1728:	add	r8, r8, #1
    172c:	add	r0, r0, #1
    1730:	sub	r6, r6, #1
    1734:	b	16f0 <coda_ascii_parse_double+0x260>
    1738:	cmp	r8, #0
    173c:	bne	1754 <coda_ascii_parse_double+0x2c4>
    1740:	mvn	r0, #102	; 0x66
    1744:	ldr	r1, [pc, #492]	; 1938 <coda_ascii_parse_double+0x4a8>
    1748:	bl	0 <coda_set_error>
    174c:	mvn	r0, #0
    1750:	b	190c <coda_ascii_parse_double+0x47c>
    1754:	vneg.f64	d7, d5
    1758:	cmp	r7, #0
    175c:	vmovne.f64	d5, d7
    1760:	vmoveq.f64	d5, d5
    1764:	cmp	r6, #0
    1768:	ble	1844 <coda_ascii_parse_double+0x3b4>
    176c:	ldrb	r1, [r0]
    1770:	cmp	r1, #100	; 0x64
    1774:	beq	1790 <coda_ascii_parse_double+0x300>
    1778:	cmp	r1, #68	; 0x44
    177c:	beq	1790 <coda_ascii_parse_double+0x300>
    1780:	cmp	r1, #101	; 0x65
    1784:	beq	1790 <coda_ascii_parse_double+0x300>
    1788:	cmp	r1, #69	; 0x45
    178c:	bne	1844 <coda_ascii_parse_double+0x3b4>
    1790:	add	r0, r0, #1
    1794:	sub	r6, r6, #1
    1798:	mov	r7, #0
    179c:	cmp	r6, #0
    17a0:	ble	17d0 <coda_ascii_parse_double+0x340>
    17a4:	ldrb	r1, [r0]
    17a8:	cmp	r1, #43	; 0x2b
    17ac:	beq	17b8 <coda_ascii_parse_double+0x328>
    17b0:	cmp	r1, #45	; 0x2d
    17b4:	bne	17d0 <coda_ascii_parse_double+0x340>
    17b8:	ldrb	r1, [r0]
    17bc:	cmp	r1, #45	; 0x2d
    17c0:	moveq	r7, #1
    17c4:	movne	r7, #0
    17c8:	add	r0, r0, #1
    17cc:	sub	r6, r6, #1
    17d0:	mov	r1, #0
    17d4:	mov	r8, #0
    17d8:	cmp	r6, #0
    17dc:	ble	1814 <coda_ascii_parse_double+0x384>
    17e0:	ldrb	r2, [r0]
    17e4:	cmp	r2, #48	; 0x30
    17e8:	blt	1814 <coda_ascii_parse_double+0x384>
    17ec:	cmp	r2, #57	; 0x39
    17f0:	bgt	1814 <coda_ascii_parse_double+0x384>
    17f4:	lsl	r9, r1, #3
    17f8:	add	r1, r9, r1, lsl #1
    17fc:	add	r1, r1, r2
    1800:	sub	r1, r1, #48	; 0x30
    1804:	add	r8, r8, #1
    1808:	add	r0, r0, #1
    180c:	sub	r6, r6, #1
    1810:	b	17d8 <coda_ascii_parse_double+0x348>
    1814:	cmp	r8, #0
    1818:	bne	1830 <coda_ascii_parse_double+0x3a0>
    181c:	mvn	r0, #102	; 0x66
    1820:	ldr	r1, [pc, #268]	; 1934 <coda_ascii_parse_double+0x4a4>
    1824:	bl	0 <coda_set_error>
    1828:	mvn	r0, #0
    182c:	b	190c <coda_ascii_parse_double+0x47c>
    1830:	rsb	r2, r1, #0
    1834:	cmp	r7, #0
    1838:	movne	r1, r2
    183c:	moveq	r1, r1
    1840:	add	ip, ip, r1
    1844:	cmp	r6, #0
    1848:	movne	r2, #1
    184c:	moveq	r2, #0
    1850:	mov	r1, #0
    1854:	cmp	r3, #0
    1858:	moveq	r1, r2
    185c:	movne	r1, r1
    1860:	cmp	r1, #0
    1864:	beq	18ac <coda_ascii_parse_double+0x41c>
    1868:	cmp	r6, #0
    186c:	ble	1890 <coda_ascii_parse_double+0x400>
    1870:	ldrb	r2, [r0]
    1874:	cmp	r2, #32
    1878:	beq	1884 <coda_ascii_parse_double+0x3f4>
    187c:	cmp	r2, #9
    1880:	bne	1890 <coda_ascii_parse_double+0x400>
    1884:	add	r0, r0, #1
    1888:	sub	r6, r6, #1
    188c:	b	1868 <coda_ascii_parse_double+0x3d8>
    1890:	cmp	r6, #0
    1894:	beq	18ac <coda_ascii_parse_double+0x41c>
    1898:	mvn	r0, #102	; 0x66
    189c:	ldr	r1, [pc, #140]	; 1930 <coda_ascii_parse_double+0x4a0>
    18a0:	bl	0 <coda_set_error>
    18a4:	mvn	r0, #0
    18a8:	b	190c <coda_ascii_parse_double+0x47c>
    18ac:	cmp	ip, #0
    18b0:	beq	1904 <coda_ascii_parse_double+0x474>
    18b4:	vmov.f64	d1, #36	; 0x41200000  10.0
    18b8:	vmov.f64	d0, #112	; 0x3f800000  1.0
    18bc:	cmp	ip, #0
    18c0:	bge	18e8 <coda_ascii_parse_double+0x458>
    18c4:	mov	r1, ip
    18c8:	add	ip, r1, #1
    18cc:	cmp	r1, #0
    18d0:	beq	18dc <coda_ascii_parse_double+0x44c>
    18d4:	vmul.f64	d0, d0, d1
    18d8:	b	18c4 <coda_ascii_parse_double+0x434>
    18dc:	vmov.f64	d2, #112	; 0x3f800000  1.0
    18e0:	vdiv.f64	d0, d2, d0
    18e4:	b	1900 <coda_ascii_parse_double+0x470>
    18e8:	mov	r2, ip
    18ec:	sub	ip, r2, #1
    18f0:	cmp	r2, #0
    18f4:	beq	1900 <coda_ascii_parse_double+0x470>
    18f8:	vmul.f64	d0, d0, d1
    18fc:	b	18e8 <coda_ascii_parse_double+0x458>
    1900:	vmul.f64	d5, d5, d0
    1904:	vstr	d5, [r5]
    1908:	sub	r0, r4, r6
    190c:	ldr	r4, [sp, #8]
    1910:	ldr	r5, [sp, #12]
    1914:	ldr	r6, [sp, #16]
    1918:	ldr	r7, [sp, #20]
    191c:	ldr	r8, [sp, #24]
    1920:	ldr	r9, [sp, #28]
    1924:	ldr	lr, [sp, #4]
    1928:	add	sp, sp, #32
    192c:	bx	lr
    1930:	.word	0x0000016c
    1934:	.word	0x00000490
    1938:	.word	0x000001bb
	...

00001944 <coda_ascii_cursor_set_asciilines>:
    1944:	mov	ip, sp
    1948:	sub	sp, sp, #24
    194c:	str	ip, [sp]
    1950:	str	lr, [sp, #4]
    1954:	str	r4, [sp, #8]
    1958:	str	r5, [sp, #12]
    195c:	str	r6, [sp, #16]
    1960:	str	r7, [sp, #20]
    1964:	mov	r7, r1
    1968:	mov	r6, r0
    196c:	ldr	ip, [r7, #68]	; 0x44
    1970:	cmp	ip, #0
    1974:	bne	1990 <coda_ascii_cursor_set_asciilines+0x4c>
    1978:	mov	r0, r7
    197c:	bl	0 <coda_ascii_init_asciilines>
    1980:	cmp	r0, #0
    1984:	beq	1990 <coda_ascii_cursor_set_asciilines+0x4c>
    1988:	mvn	r0, #0
    198c:	b	1a6c <coda_ascii_cursor_set_asciilines+0x128>
    1990:	ldr	r3, [r7, #76]	; 0x4c
    1994:	cmp	r3, #0
    1998:	bne	1a3c <coda_ascii_cursor_set_asciilines+0xf8>
    199c:	mov	r0, #0
    19a0:	bl	0 <coda_type_array_new>
    19a4:	mov	r5, r0
    19a8:	cmp	r5, #0
    19ac:	bne	19b8 <coda_ascii_cursor_set_asciilines+0x74>
    19b0:	mvn	r0, #0
    19b4:	b	1a6c <coda_ascii_cursor_set_asciilines+0x128>
    19b8:	ldr	r1, [r7, #64]	; 0x40
    19bc:	mov	r0, r5
    19c0:	bl	0 <coda_type_array_add_fixed_dimension>
    19c4:	cmp	r0, #0
    19c8:	beq	19dc <coda_ascii_cursor_set_asciilines+0x98>
    19cc:	mov	r0, r5
    19d0:	bl	0 <coda_type_release>
    19d4:	mvn	r0, #0
    19d8:	b	1a6c <coda_ascii_cursor_set_asciilines+0x128>
    19dc:	mov	r0, #0
    19e0:	bl	0 <coda_type_text_new>
    19e4:	mov	r4, r0
    19e8:	cmp	r4, #0
    19ec:	bne	1a00 <coda_ascii_cursor_set_asciilines+0xbc>
    19f0:	mov	r0, r5
    19f4:	bl	0 <coda_type_release>
    19f8:	mvn	r0, #0
    19fc:	b	1a6c <coda_ascii_cursor_set_asciilines+0x128>
    1a00:	mov	r1, #2
    1a04:	mov	r0, r4
    1a08:	bl	0 <coda_type_text_set_special_text_type>
    1a0c:	mov	r1, r4
    1a10:	mov	r0, r5
    1a14:	bl	0 <coda_type_array_set_base_type>
    1a18:	cmp	r0, #0
    1a1c:	beq	1a38 <coda_ascii_cursor_set_asciilines+0xf4>
    1a20:	mov	r0, r5
    1a24:	bl	0 <coda_type_release>
    1a28:	mov	r0, r4
    1a2c:	bl	0 <coda_type_release>
    1a30:	mvn	r0, #0
    1a34:	b	1a6c <coda_ascii_cursor_set_asciilines+0x128>
    1a38:	str	r5, [r7, #76]	; 0x4c
    1a3c:	str	r7, [r6]
    1a40:	mov	r2, #1
    1a44:	str	r2, [r6, #4]
    1a48:	ldr	r0, [r7, #76]	; 0x4c
    1a4c:	str	r0, [r6, #8]
    1a50:	mvn	r2, #0
    1a54:	str	r2, [r6, #12]
    1a58:	mov	r1, #0
    1a5c:	mov	r0, #0
    1a60:	str	r0, [r6, #16]
    1a64:	str	r1, [r6, #20]
    1a68:	mov	r0, #0
    1a6c:	ldr	r4, [sp, #8]
    1a70:	ldr	r5, [sp, #12]
    1a74:	ldr	r6, [sp, #16]
    1a78:	ldr	r7, [sp, #20]
    1a7c:	ldr	lr, [sp, #4]
    1a80:	add	sp, sp, #24
    1a84:	bx	lr

00001a88 <coda_ascii_cursor_get_string_length>:
    1a88:	mov	ip, sp
    1a8c:	sub	sp, sp, #24
    1a90:	str	ip, [sp]
    1a94:	str	lr, [sp, #4]
    1a98:	str	r4, [sp, #8]
    1a9c:	mov	r4, r1
    1aa0:	add	r1, sp, #16
    1aa4:	bl	1af4 <coda_ascii_cursor_get_bit_size>
    1aa8:	cmp	r0, #0
    1aac:	beq	1ab8 <coda_ascii_cursor_get_string_length+0x30>
    1ab0:	mvn	r0, #0
    1ab4:	b	1ae4 <coda_ascii_cursor_get_string_length+0x5c>
    1ab8:	ldr	r2, [sp, #16]
    1abc:	ldr	r0, [sp, #20]
    1ac0:	cmp	r0, #0
    1ac4:	blt	1ad8 <coda_ascii_cursor_get_string_length+0x50>
    1ac8:	lsr	r1, r2, #3
    1acc:	orr	r1, r1, r0, lsl #29
    1ad0:	str	r1, [r4]
    1ad4:	b	1ae0 <coda_ascii_cursor_get_string_length+0x58>
    1ad8:	mvn	r3, #0
    1adc:	str	r3, [r4]
    1ae0:	mov	r0, #0
    1ae4:	ldr	r4, [sp, #8]
    1ae8:	ldr	lr, [sp, #4]
    1aec:	add	sp, sp, #24
    1af0:	bx	lr

00001af4 <coda_ascii_cursor_get_bit_size>:
    1af4:	mov	ip, sp
    1af8:	sub	sp, sp, #720	; 0x2d0
    1afc:	str	ip, [sp, #12]
    1b00:	str	lr, [sp, #16]
    1b04:	str	r4, [sp, #36]	; 0x24
    1b08:	str	r5, [sp, #40]	; 0x28
    1b0c:	str	r6, [sp, #44]	; 0x2c
    1b10:	str	r7, [sp, #48]	; 0x30
    1b14:	str	r8, [sp, #52]	; 0x34
    1b18:	str	r9, [sp, #56]	; 0x38
    1b1c:	str	sl, [sp, #60]	; 0x3c
    1b20:	str	fp, [sp, #64]	; 0x40
    1b24:	mov	r9, r1
    1b28:	mov	sl, r0
    1b2c:	ldr	r2, [sl, #4]
    1b30:	lsl	r0, r2, #4
    1b34:	add	r3, sl, r0
    1b38:	sub	lr, r3, #4096	; 0x1000
    1b3c:	ldr	ip, [lr, #4088]	; 0xff8
    1b40:	ldr	r1, [ip]
    1b44:	cmp	r1, #100	; 0x64
    1b48:	blt	1b54 <coda_ascii_cursor_get_bit_size+0x60>
    1b4c:	ldr	r8, [ip, #4]
    1b50:	b	1b58 <coda_ascii_cursor_get_bit_size+0x64>
    1b54:	mov	r8, ip
    1b58:	mov	r6, #0
    1b5c:	ldr	r2, [sl, #4]
    1b60:	lsl	ip, r2, #4
    1b64:	add	ip, sl, ip
    1b68:	ldr	r1, [ip]
    1b6c:	str	r1, [sp, #24]
    1b70:	ldr	r7, [ip, #4]
    1b74:	mvn	r4, #0
    1b78:	mov	r5, #0
    1b7c:	ldr	r1, [r8, #24]
    1b80:	ldr	r2, [r8, #28]
    1b84:	cmp	r2, #0
    1b88:	blt	1b9c <coda_ascii_cursor_get_bit_size+0xa8>
    1b8c:	str	r1, [r9]
    1b90:	str	r2, [r9, #4]
    1b94:	mov	r0, #0
    1b98:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1b9c:	ldr	ip, [r8, #8]
    1ba0:	cmp	ip, #0
    1ba4:	beq	2730 <coda_ascii_cursor_get_bit_size+0xc3c>
    1ba8:	cmp	ip, #1
    1bac:	beq	2730 <coda_ascii_cursor_get_bit_size+0xc3c>
    1bb0:	add	r1, sp, #80	; 0x50
    1bb4:	mvn	r3, #0
    1bb8:	mvn	r2, #0
    1bbc:	mov	r0, sl
    1bc0:	bl	b04 <get_bit_size_boundary>
    1bc4:	cmp	r0, #0
    1bc8:	beq	1bd4 <coda_ascii_cursor_get_bit_size+0xe0>
    1bcc:	mvn	r0, #0
    1bd0:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1bd4:	ldr	r1, [r8, #8]
    1bd8:	cmp	r1, #2
    1bdc:	beq	1c90 <coda_ascii_cursor_get_bit_size+0x19c>
    1be0:	cmp	r1, #3
    1be4:	beq	1c90 <coda_ascii_cursor_get_bit_size+0x19c>
    1be8:	cmp	r1, #4
    1bec:	beq	1c4c <coda_ascii_cursor_get_bit_size+0x158>
    1bf0:	cmp	r1, #6
    1bf4:	bne	1e14 <coda_ascii_cursor_get_bit_size+0x320>
    1bf8:	ldr	r0, [r8, #40]	; 0x28
    1bfc:	cmp	r0, #2
    1c00:	bne	1cb4 <coda_ascii_cursor_get_bit_size+0x1c0>
    1c04:	ldr	fp, [r8, #44]	; 0x2c
    1c08:	ldr	r1, [fp, #8]
    1c0c:	cmp	r1, #4
    1c10:	beq	1c28 <coda_ascii_cursor_get_bit_size+0x134>
    1c14:	ldr	r0, [pc, #2932]	; 2790 <coda_ascii_cursor_get_bit_size+0xc9c>
    1c18:	ldr	r1, [pc, #2932]	; 2794 <coda_ascii_cursor_get_bit_size+0xca0>
    1c1c:	movw	r2, #693	; 0x2b5
    1c20:	ldr	r3, [pc, #2880]	; 2768 <coda_ascii_cursor_get_bit_size+0xc74>
    1c24:	bl	0 <__assert_fail>
    1c28:	ldr	ip, [fp, #44]	; 0x2c
    1c2c:	cmp	ip, #0
    1c30:	bne	1cb4 <coda_ascii_cursor_get_bit_size+0x1c0>
    1c34:	ldr	r2, [sp, #80]	; 0x50
    1c38:	ldr	r3, [sp, #84]	; 0x54
    1c3c:	str	r2, [r9]
    1c40:	str	r3, [r9, #4]
    1c44:	mov	r0, #0
    1c48:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1c4c:	ldr	r0, [r8, #32]
    1c50:	cmp	r0, #0
    1c54:	bne	1c7c <coda_ascii_cursor_get_bit_size+0x188>
    1c58:	ldr	r2, [r8, #44]	; 0x2c
    1c5c:	cmp	r2, #0
    1c60:	bne	1c7c <coda_ascii_cursor_get_bit_size+0x188>
    1c64:	ldr	r3, [sp, #80]	; 0x50
    1c68:	ldr	ip, [sp, #84]	; 0x54
    1c6c:	str	r3, [r9]
    1c70:	str	ip, [r9, #4]
    1c74:	mov	r0, #0
    1c78:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1c7c:	ldr	r0, [r8, #32]
    1c80:	cmp	r0, #0
    1c84:	moveq	r5, #1
    1c88:	movne	r5, #0
    1c8c:	b	1cb4 <coda_ascii_cursor_get_bit_size+0x1c0>
    1c90:	ldr	r6, [r8, #52]	; 0x34
    1c94:	cmp	r6, #0
    1c98:	bne	1cb0 <coda_ascii_cursor_get_bit_size+0x1bc>
    1c9c:	ldr	r0, [r8, #32]
    1ca0:	cmp	r0, #0
    1ca4:	moveq	r5, #1
    1ca8:	movne	r5, #0
    1cac:	b	1cb4 <coda_ascii_cursor_get_bit_size+0x1c0>
    1cb0:	mov	r5, #1
    1cb4:	cmp	r5, #0
    1cb8:	beq	1d44 <coda_ascii_cursor_get_bit_size+0x250>
    1cbc:	ldr	r1, [sp, #80]	; 0x50
    1cc0:	ldr	r2, [sp, #84]	; 0x54
    1cc4:	asr	r3, r2, #3
    1cc8:	lsr	r1, r1, #3
    1ccc:	orr	r2, r1, r2, lsl #29
    1cd0:	cmp	r3, #0
    1cd4:	bne	1ce4 <coda_ascii_cursor_get_bit_size+0x1f0>
    1cd8:	cmp	r2, #64	; 0x40
    1cdc:	bcc	1cec <coda_ascii_cursor_get_bit_size+0x1f8>
    1ce0:	b	1d00 <coda_ascii_cursor_get_bit_size+0x20c>
    1ce4:	cmp	r3, #0
    1ce8:	bge	1d00 <coda_ascii_cursor_get_bit_size+0x20c>
    1cec:	ldr	r0, [sp, #80]	; 0x50
    1cf0:	ldr	r1, [sp, #84]	; 0x54
    1cf4:	lsr	r0, r0, #3
    1cf8:	orr	r4, r0, r1, lsl #29
    1cfc:	b	1d04 <coda_ascii_cursor_get_bit_size+0x210>
    1d00:	mov	r4, #64	; 0x40
    1d04:	ldr	r0, [sl]
    1d08:	asr	r3, r7, #3
    1d0c:	ldr	r1, [sp, #24]
    1d10:	lsr	r1, r1, #3
    1d14:	orr	r2, r1, r7, lsl #29
    1d18:	mov	r1, r4
    1d1c:	asr	r5, r1, #31
    1d20:	add	r7, sp, #136	; 0x88
    1d24:	str	r7, [sp, #8]
    1d28:	str	r5, [sp, #4]
    1d2c:	str	r1, [sp]
    1d30:	bl	1f4 <read_bytes_in_bounds>
    1d34:	cmp	r0, #0
    1d38:	beq	1d44 <coda_ascii_cursor_get_bit_size+0x250>
    1d3c:	mvn	r0, #0
    1d40:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1d44:	cmp	r6, #0
    1d48:	beq	1e14 <coda_ascii_cursor_get_bit_size+0x320>
    1d4c:	mov	r5, r9
    1d50:	add	fp, sp, #136	; 0x88
    1d54:	mov	r7, #0
    1d58:	ldr	r3, [r6, #8]
    1d5c:	cmp	r7, r3
    1d60:	bge	1de0 <coda_ascii_cursor_get_bit_size+0x2ec>
    1d64:	ldr	r2, [r6, #12]
    1d68:	ldr	r3, [r2, r7, lsl #2]
    1d6c:	ldr	r2, [r3]
    1d70:	cmp	r2, #0
    1d74:	beq	1db8 <coda_ascii_cursor_get_bit_size+0x2c4>
    1d78:	cmp	r2, r4
    1d7c:	bgt	1dd8 <coda_ascii_cursor_get_bit_size+0x2e4>
    1d80:	ldr	r0, [r3, #4]
    1d84:	mov	r1, fp
    1d88:	bl	0 <memcmp>
    1d8c:	cmp	r0, #0
    1d90:	bne	1dd8 <coda_ascii_cursor_get_bit_size+0x2e4>
    1d94:	ldr	ip, [r6, #12]
    1d98:	ldr	r3, [ip, r7, lsl #2]
    1d9c:	ldr	r0, [r3]
    1da0:	lsl	r3, r0, #3
    1da4:	asr	ip, r3, #31
    1da8:	str	r3, [r5]
    1dac:	str	ip, [r5, #4]
    1db0:	mov	r0, #1
    1db4:	b	1e04 <coda_ascii_cursor_get_bit_size+0x310>
    1db8:	cmp	r4, #0
    1dbc:	bne	1dd8 <coda_ascii_cursor_get_bit_size+0x2e4>
    1dc0:	mov	r1, #0
    1dc4:	mov	r0, #0
    1dc8:	str	r0, [r5]
    1dcc:	str	r1, [r5, #4]
    1dd0:	mov	r0, #1
    1dd4:	b	1e04 <coda_ascii_cursor_get_bit_size+0x310>
    1dd8:	add	r7, r7, #1
    1ddc:	b	1d58 <coda_ascii_cursor_get_bit_size+0x264>
    1de0:	ldr	ip, [r6]
    1de4:	ldr	r0, [r6, #4]
    1de8:	cmp	r0, #0
    1dec:	blt	1e00 <coda_ascii_cursor_get_bit_size+0x30c>
    1df0:	str	ip, [r5]
    1df4:	str	r0, [r5, #4]
    1df8:	mov	r0, #1
    1dfc:	b	1e04 <coda_ascii_cursor_get_bit_size+0x310>
    1e00:	mov	r0, #0
    1e04:	cmp	r0, #0
    1e08:	beq	1e14 <coda_ascii_cursor_get_bit_size+0x320>
    1e0c:	mov	r0, #0
    1e10:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1e14:	ldr	r1, [r8, #8]
    1e18:	cmp	r1, #6
    1e1c:	bne	1e64 <coda_ascii_cursor_get_bit_size+0x370>
    1e20:	mov	r2, sl
    1e24:	add	r3, sp, #200	; 0xc8
    1e28:	mov	lr, #130	; 0x82
    1e2c:	ldr	ip, [r2], #4
    1e30:	subs	lr, lr, #1
    1e34:	str	ip, [r3], #4
    1e38:	bne	1e2c <coda_ascii_cursor_get_bit_size+0x338>
    1e3c:	add	r0, sp, #200	; 0xc8
    1e40:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1e44:	cmp	r0, #0
    1e48:	beq	1e54 <coda_ascii_cursor_get_bit_size+0x360>
    1e4c:	mvn	r0, #0
    1e50:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1e54:	add	r0, sp, #200	; 0xc8
    1e58:	mov	r1, r9
    1e5c:	bl	0 <coda_cursor_get_bit_size>
    1e60:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1e64:	ldr	r0, [r8, #32]
    1e68:	cmp	r0, #0
    1e6c:	beq	1f18 <coda_ascii_cursor_get_bit_size+0x424>
    1e70:	mov	r2, r9
    1e74:	mov	r1, sl
    1e78:	bl	0 <coda_expression_eval_integer>
    1e7c:	cmp	r0, #0
    1e80:	beq	1e9c <coda_ascii_cursor_get_bit_size+0x3a8>
    1e84:	ldr	r0, [pc, #2296]	; 2784 <coda_ascii_cursor_get_bit_size+0xc90>
    1e88:	bl	0 <coda_add_error_message>
    1e8c:	mov	r0, sl
    1e90:	bl	0 <coda_cursor_add_to_error_message>
    1e94:	mvn	r0, #0
    1e98:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1e9c:	ldr	r3, [r8, #24]
    1ea0:	ldr	ip, [r8, #28]
    1ea4:	mvn	r2, ip
    1ea8:	eor	r3, r3, #1016	; 0x3f8
    1eac:	eor	r3, r3, #261120	; 0x3fc00
    1eb0:	eor	r3, r3, #66846720	; 0x3fc0000
    1eb4:	eor	r3, r3, #-67108864	; 0xfc000000
    1eb8:	orr	r1, r2, r3
    1ebc:	cmp	r1, #0
    1ec0:	bne	1ee0 <coda_ascii_cursor_get_bit_size+0x3ec>
    1ec4:	ldr	r2, [r9]
    1ec8:	ldr	ip, [r9, #4]
    1ecc:	lsl	r1, ip, #3
    1ed0:	orr	r3, r1, r2, lsr #29
    1ed4:	lsl	r2, r2, #3
    1ed8:	str	r2, [r9]
    1edc:	str	r3, [r9, #4]
    1ee0:	ldr	r2, [r9]
    1ee4:	ldr	r3, [r9, #4]
    1ee8:	cmp	r3, #0
    1eec:	bge	1f10 <coda_ascii_cursor_get_bit_size+0x41c>
    1ef0:	movw	r0, #65236	; 0xfed4
    1ef4:	movt	r0, #65535	; 0xffff
    1ef8:	ldr	r1, [pc, #2164]	; 2774 <coda_ascii_cursor_get_bit_size+0xc80>
    1efc:	bl	0 <coda_set_error>
    1f00:	mov	r0, sl
    1f04:	bl	0 <coda_cursor_add_to_error_message>
    1f08:	mvn	r0, #0
    1f0c:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1f10:	mov	r0, #0
    1f14:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1f18:	cmp	r1, #2
    1f1c:	beq	2658 <coda_ascii_cursor_get_bit_size+0xb64>
    1f20:	cmp	r1, #3
    1f24:	beq	2658 <coda_ascii_cursor_get_bit_size+0xb64>
    1f28:	cmp	r1, #4
    1f2c:	beq	1f44 <coda_ascii_cursor_get_bit_size+0x450>
    1f30:	ldr	r0, [pc, #2116]	; 277c <coda_ascii_cursor_get_bit_size+0xc88>
    1f34:	ldr	r1, [pc, #2136]	; 2794 <coda_ascii_cursor_get_bit_size+0xca0>
    1f38:	mov	r2, #812	; 0x32c
    1f3c:	ldr	r3, [pc, #2084]	; 2768 <coda_ascii_cursor_get_bit_size+0xc74>
    1f40:	bl	0 <__assert_fail>
    1f44:	ldr	ip, [r8, #44]	; 0x2c
    1f48:	cmp	ip, #2
    1f4c:	bcs	219c <coda_ascii_cursor_get_bit_size+0x6a8>
    1f50:	cmp	ip, #0
    1f54:	beq	217c <coda_ascii_cursor_get_bit_size+0x688>
    1f58:	ldr	r1, [sl]
    1f5c:	ldr	ip, [r1, #16]
    1f60:	cmp	ip, #0
    1f64:	beq	1f7c <coda_ascii_cursor_get_bit_size+0x488>
    1f68:	ldr	r0, [pc, #2056]	; 2778 <coda_ascii_cursor_get_bit_size+0xc84>
    1f6c:	ldr	r1, [pc, #2080]	; 2794 <coda_ascii_cursor_get_bit_size+0xca0>
    1f70:	mov	r2, #816	; 0x330
    1f74:	ldr	r3, [pc, #2028]	; 2768 <coda_ascii_cursor_get_bit_size+0xc74>
    1f78:	bl	0 <__assert_fail>
    1f7c:	ldr	ip, [sl]
    1f80:	ldr	ip, [ip, #60]	; 0x3c
    1f84:	cmp	ip, #2
    1f88:	bcs	2144 <coda_ascii_cursor_get_bit_size+0x650>
    1f8c:	cmp	ip, #0
    1f90:	bne	2168 <coda_ascii_cursor_get_bit_size+0x674>
    1f94:	ldr	r1, [sl, #4]
    1f98:	lsl	r2, r1, #4
    1f9c:	add	r2, sl, r2
    1fa0:	ldr	r2, [r2]
    1fa4:	mov	r1, #0
    1fa8:	and	r3, r2, #7
    1fac:	orr	r3, r1, r3
    1fb0:	cmp	r3, #0
    1fb4:	beq	1fd0 <coda_ascii_cursor_get_bit_size+0x4dc>
    1fb8:	movw	r0, #65236	; 0xfed4
    1fbc:	movt	r0, #65535	; 0xffff
    1fc0:	ldr	r1, [pc, #2000]	; 2798 <coda_ascii_cursor_get_bit_size+0xca4>
    1fc4:	bl	0 <coda_set_error>
    1fc8:	mvn	r0, #0
    1fcc:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    1fd0:	add	r1, sp, #74	; 0x4a
    1fd4:	mov	r3, #0
    1fd8:	mov	r2, #0
    1fdc:	mov	r0, #0
    1fe0:	mov	ip, #1
    1fe4:	str	r0, [sp, #4]
    1fe8:	str	ip, [sp]
    1fec:	mov	r0, sl
    1ff0:	bl	3704 <coda_ascii_cursor_read_bytes>
    1ff4:	cmp	r0, #0
    1ff8:	beq	2004 <coda_ascii_cursor_get_bit_size+0x510>
    1ffc:	mvn	r0, #0
    2000:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    2004:	ldrb	r1, [sp, #74]	; 0x4a
    2008:	cmp	r1, #10
    200c:	beq	2124 <coda_ascii_cursor_get_bit_size+0x630>
    2010:	cmp	r1, #13
    2014:	bne	20e0 <coda_ascii_cursor_get_bit_size+0x5ec>
    2018:	ldr	r1, [sl]
    201c:	ldr	r3, [r1, #8]
    2020:	ldr	r2, [r1, #12]
    2024:	ldr	ip, [sl, #4]
    2028:	lsl	r0, ip, #4
    202c:	add	r1, sl, r0
    2030:	ldr	ip, [r1]
    2034:	ldr	r1, [r1, #4]
    2038:	asr	r0, r1, #3
    203c:	lsr	ip, ip, #3
    2040:	orr	ip, ip, r1, lsl #29
    2044:	subs	r1, r3, ip
    2048:	sbc	r0, r2, r0
    204c:	cmp	r0, #0
    2050:	bne	2060 <coda_ascii_cursor_get_bit_size+0x56c>
    2054:	cmp	r1, #2
    2058:	bcs	2068 <coda_ascii_cursor_get_bit_size+0x574>
    205c:	b	20c0 <coda_ascii_cursor_get_bit_size+0x5cc>
    2060:	cmp	r0, #0
    2064:	ble	20c0 <coda_ascii_cursor_get_bit_size+0x5cc>
    2068:	add	r1, sp, #74	; 0x4a
    206c:	mov	r3, #0
    2070:	mov	r2, #1
    2074:	str	r3, [sp, #4]
    2078:	str	r2, [sp]
    207c:	mov	r0, sl
    2080:	bl	3704 <coda_ascii_cursor_read_bytes>
    2084:	cmp	r0, #0
    2088:	beq	2094 <coda_ascii_cursor_get_bit_size+0x5a0>
    208c:	mvn	r0, #0
    2090:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    2094:	ldrb	r3, [sp, #74]	; 0x4a
    2098:	cmp	r3, #10
    209c:	bne	20c0 <coda_ascii_cursor_get_bit_size+0x5cc>
    20a0:	mov	ip, #0
    20a4:	mov	r3, #16
    20a8:	str	r3, [r9]
    20ac:	str	ip, [r9, #4]
    20b0:	ldr	r1, [sl]
    20b4:	mov	ip, #3
    20b8:	str	ip, [r1, #60]	; 0x3c
    20bc:	b	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    20c0:	mov	r0, #0
    20c4:	mov	ip, #8
    20c8:	str	ip, [r9]
    20cc:	str	r0, [r9, #4]
    20d0:	ldr	r3, [sl]
    20d4:	mov	r0, #2
    20d8:	str	r0, [r3, #60]	; 0x3c
    20dc:	b	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    20e0:	ldr	ip, [sl, #4]
    20e4:	lsl	r2, ip, #4
    20e8:	add	ip, sl, r2
    20ec:	ldr	r0, [ip]
    20f0:	ldr	ip, [ip, #4]
    20f4:	asr	r1, ip, #3
    20f8:	lsr	r2, r0, #3
    20fc:	orr	r0, r2, ip, lsl #29
    2100:	add	r2, sp, #112	; 0x70
    2104:	bl	0 <coda_str64>
    2108:	movw	r0, #65236	; 0xfed4
    210c:	movt	r0, #65535	; 0xffff
    2110:	ldr	r1, [pc, #1624]	; 2770 <coda_ascii_cursor_get_bit_size+0xc7c>
    2114:	add	r2, sp, #112	; 0x70
    2118:	bl	0 <coda_set_error>
    211c:	mvn	r0, #0
    2120:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    2124:	mov	r0, #0
    2128:	mov	ip, #8
    212c:	str	ip, [r9]
    2130:	str	r0, [r9, #4]
    2134:	ldr	r2, [sl]
    2138:	mov	r0, #1
    213c:	str	r0, [r2, #60]	; 0x3c
    2140:	b	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    2144:	cmp	ip, #2
    2148:	beq	2168 <coda_ascii_cursor_get_bit_size+0x674>
    214c:	cmp	ip, #3
    2150:	bne	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    2154:	mov	r1, #0
    2158:	mov	r0, #16
    215c:	str	r0, [r9]
    2160:	str	r1, [r9, #4]
    2164:	b	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    2168:	mov	ip, #0
    216c:	mov	r3, #8
    2170:	str	r3, [r9]
    2174:	str	ip, [r9, #4]
    2178:	b	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    217c:	ldr	r0, [pc, #1544]	; 278c <coda_ascii_cursor_get_bit_size+0xc98>
    2180:	ldr	r1, [pc, #1548]	; 2794 <coda_ascii_cursor_get_bit_size+0xca0>
    2184:	movw	r2, #1030	; 0x406
    2188:	ldr	r3, [pc, #1496]	; 2768 <coda_ascii_cursor_get_bit_size+0xc74>
    218c:	bl	0 <__assert_fail>
    2190:	mov	r0, #1
    2194:	bl	0 <exit>
    2198:	b	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    219c:	cmp	ip, #2
    21a0:	beq	22cc <coda_ascii_cursor_get_bit_size+0x7d8>
    21a4:	cmp	ip, #3
    21a8:	beq	22cc <coda_ascii_cursor_get_bit_size+0x7d8>
    21ac:	cmp	ip, #4
    21b0:	bne	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    21b4:	ldr	r1, [sl, #4]
    21b8:	lsl	r0, r1, #4
    21bc:	add	r2, sl, r0
    21c0:	ldr	r3, [r2]
    21c4:	ldr	r0, [r2, #4]
    21c8:	mov	r2, #0
    21cc:	and	r1, r3, #7
    21d0:	orr	ip, r2, r1
    21d4:	cmp	ip, #0
    21d8:	beq	21f4 <coda_ascii_cursor_get_bit_size+0x700>
    21dc:	movw	r0, #65236	; 0xfed4
    21e0:	movt	r0, #65535	; 0xffff
    21e4:	ldr	r1, [pc, #1436]	; 2788 <coda_ascii_cursor_get_bit_size+0xc94>
    21e8:	bl	0 <coda_set_error>
    21ec:	mvn	r0, #0
    21f0:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    21f4:	asr	r7, r0, #3
    21f8:	lsr	r3, r3, #3
    21fc:	orr	r6, r3, r0, lsl #29
    2200:	ldr	r1, [sl]
    2204:	ldr	r0, [r1, #8]
    2208:	ldr	r3, [r1, #12]
    220c:	subs	lr, r0, r6
    2210:	sbc	ip, r3, r7
    2214:	mov	r3, lr
    2218:	str	ip, [sp, #24]
    221c:	str	r3, [sp, #28]
    2220:	mov	r5, #0
    2224:	mov	r4, #0
    2228:	ldr	ip, [sp, #28]
    222c:	mov	r2, r5
    2230:	ldr	r3, [sp, #24]
    2234:	cmp	r2, r3
    2238:	bne	224c <coda_ascii_cursor_get_bit_size+0x758>
    223c:	mov	r1, r4
    2240:	cmp	r1, ip
    2244:	bcc	2254 <coda_ascii_cursor_get_bit_size+0x760>
    2248:	b	22b4 <coda_ascii_cursor_get_bit_size+0x7c0>
    224c:	cmp	r2, r3
    2250:	bge	22b4 <coda_ascii_cursor_get_bit_size+0x7c0>
    2254:	ldr	r0, [sl]
    2258:	adds	r2, r6, r4
    225c:	adc	r3, r7, r5
    2260:	mov	fp, #0
    2264:	mov	r8, #1
    2268:	add	ip, sp, #73	; 0x49
    226c:	str	ip, [sp, #8]
    2270:	str	fp, [sp, #4]
    2274:	str	r8, [sp]
    2278:	bl	1f4 <read_bytes_in_bounds>
    227c:	cmp	r0, #0
    2280:	beq	228c <coda_ascii_cursor_get_bit_size+0x798>
    2284:	mvn	r0, #0
    2288:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    228c:	ldrb	r0, [sp, #73]	; 0x49
    2290:	cmp	r0, #32
    2294:	beq	22a0 <coda_ascii_cursor_get_bit_size+0x7ac>
    2298:	cmp	r0, #9
    229c:	bne	22b4 <coda_ascii_cursor_get_bit_size+0x7c0>
    22a0:	mov	r3, #0
    22a4:	mov	r2, #1
    22a8:	adds	r4, r4, r2
    22ac:	adc	r5, r5, r3
    22b0:	b	2228 <coda_ascii_cursor_get_bit_size+0x734>
    22b4:	lsl	ip, r5, #3
    22b8:	orr	r1, ip, r4, lsr #29
    22bc:	lsl	r0, r4, #3
    22c0:	str	r0, [r9]
    22c4:	str	r1, [r9, #4]
    22c8:	b	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    22cc:	ldr	r0, [sl]
    22d0:	ldr	r1, [r0, #16]
    22d4:	cmp	r1, #0
    22d8:	beq	24bc <coda_ascii_cursor_get_bit_size+0x9c8>
    22dc:	ldr	r1, [sl, #4]
    22e0:	lsl	r1, r1, #4
    22e4:	add	r1, sl, r1
    22e8:	ldr	r2, [r1]
    22ec:	ldr	ip, [r1, #4]
    22f0:	mov	r3, #0
    22f4:	and	r1, r2, #7
    22f8:	orr	r3, r3, r1
    22fc:	cmp	r3, #0
    2300:	beq	231c <coda_ascii_cursor_get_bit_size+0x828>
    2304:	movw	r0, #65236	; 0xfed4
    2308:	movt	r0, #65535	; 0xffff
    230c:	ldr	r1, [pc, #1132]	; 2780 <coda_ascii_cursor_get_bit_size+0xc8c>
    2310:	bl	0 <coda_set_error>
    2314:	mvn	r0, #0
    2318:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    231c:	asr	r4, ip, #3
    2320:	lsr	r2, r2, #3
    2324:	orr	r7, r2, ip, lsl #29
    2328:	ldr	r3, [r0, #8]
    232c:	ldr	ip, [r0, #12]
    2330:	subs	r2, r3, r7
    2334:	sbc	fp, ip, r4
    2338:	str	r2, [sp, #24]
    233c:	mov	r6, #0
    2340:	mov	r5, #0
    2344:	mov	ip, r6
    2348:	mov	r3, r5
    234c:	mov	r1, fp
    2350:	cmp	ip, r1
    2354:	bne	2368 <coda_ascii_cursor_get_bit_size+0x874>
    2358:	ldr	ip, [sp, #24]
    235c:	cmp	r3, ip
    2360:	bcc	2370 <coda_ascii_cursor_get_bit_size+0x87c>
    2364:	b	23e0 <coda_ascii_cursor_get_bit_size+0x8ec>
    2368:	cmp	ip, r1
    236c:	bge	23e0 <coda_ascii_cursor_get_bit_size+0x8ec>
    2370:	ldr	r2, [sl]
    2374:	str	r2, [sp, #32]
    2378:	adds	r2, r7, r5
    237c:	adc	r1, r4, r6
    2380:	str	r1, [sp, #28]
    2384:	mov	r3, #0
    2388:	mov	ip, #1
    238c:	add	r0, sp, #72	; 0x48
    2390:	str	r0, [sp, #8]
    2394:	str	r3, [sp, #4]
    2398:	str	ip, [sp]
    239c:	ldr	r3, [sp, #28]
    23a0:	ldr	r0, [sp, #32]
    23a4:	bl	1f4 <read_bytes_in_bounds>
    23a8:	cmp	r0, #0
    23ac:	beq	23b8 <coda_ascii_cursor_get_bit_size+0x8c4>
    23b0:	mvn	r0, #0
    23b4:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    23b8:	ldrb	r0, [sp, #72]	; 0x48
    23bc:	cmp	r0, #13
    23c0:	beq	23e0 <coda_ascii_cursor_get_bit_size+0x8ec>
    23c4:	cmp	r0, #10
    23c8:	beq	23e0 <coda_ascii_cursor_get_bit_size+0x8ec>
    23cc:	mov	r3, #0
    23d0:	mov	r2, #1
    23d4:	adds	r5, r5, r2
    23d8:	adc	r6, r6, r3
    23dc:	b	2344 <coda_ascii_cursor_get_bit_size+0x850>
    23e0:	ldr	ip, [r8, #44]	; 0x2c
    23e4:	cmp	ip, #2
    23e8:	bne	24a4 <coda_ascii_cursor_get_bit_size+0x9b0>
    23ec:	ldrb	ip, [sp, #72]	; 0x48
    23f0:	cmp	ip, #13
    23f4:	bne	2494 <coda_ascii_cursor_get_bit_size+0x9a0>
    23f8:	mov	r3, #0
    23fc:	mov	r2, #1
    2400:	adds	r1, r5, r2
    2404:	adc	r0, r6, r3
    2408:	cmp	r0, fp
    240c:	bne	2424 <coda_ascii_cursor_get_bit_size+0x930>
    2410:	ldr	ip, [sp, #24]
    2414:	cmp	r1, ip
    2418:	movcc	r0, #1
    241c:	movcs	r0, #0
    2420:	b	2430 <coda_ascii_cursor_get_bit_size+0x93c>
    2424:	cmp	r0, fp
    2428:	movlt	r0, #1
    242c:	movge	r0, #0
    2430:	cmp	r0, #0
    2434:	beq	2494 <coda_ascii_cursor_get_bit_size+0x9a0>
    2438:	ldr	r0, [sl]
    243c:	adds	r2, r7, r5
    2440:	adc	r3, r4, r6
    2444:	mov	r1, #0
    2448:	mov	ip, #1
    244c:	adds	r2, r2, ip
    2450:	adc	r3, r3, r1
    2454:	add	r4, sp, #72	; 0x48
    2458:	str	r4, [sp, #8]
    245c:	str	r1, [sp, #4]
    2460:	str	ip, [sp]
    2464:	bl	1f4 <read_bytes_in_bounds>
    2468:	cmp	r0, #0
    246c:	beq	2478 <coda_ascii_cursor_get_bit_size+0x984>
    2470:	mvn	r0, #0
    2474:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    2478:	ldrb	r0, [sp, #72]	; 0x48
    247c:	cmp	r0, #10
    2480:	bne	2494 <coda_ascii_cursor_get_bit_size+0x9a0>
    2484:	mov	ip, #0
    2488:	mov	r3, #1
    248c:	adds	r5, r5, r3
    2490:	adc	r6, r6, ip
    2494:	mov	r2, #0
    2498:	mov	r1, #1
    249c:	adds	r5, r5, r1
    24a0:	adc	r6, r6, r2
    24a4:	lsl	ip, r6, #3
    24a8:	orr	r1, ip, r5, lsr #29
    24ac:	lsl	r0, r5, #3
    24b0:	str	r0, [r9]
    24b4:	str	r1, [r9, #4]
    24b8:	b	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    24bc:	ldr	r3, [sl, #4]
    24c0:	lsl	r1, r3, #4
    24c4:	add	r1, sl, r1
    24c8:	ldr	r2, [r1]
    24cc:	mov	r1, #0
    24d0:	and	r3, r2, #7
    24d4:	orr	r2, r1, r3
    24d8:	cmp	r2, #0
    24dc:	beq	24f8 <coda_ascii_cursor_get_bit_size+0xa04>
    24e0:	movw	r0, #65236	; 0xfed4
    24e4:	movt	r0, #65535	; 0xffff
    24e8:	ldr	r1, [pc, #656]	; 2780 <coda_ascii_cursor_get_bit_size+0xc8c>
    24ec:	bl	0 <coda_set_error>
    24f0:	mvn	r0, #0
    24f4:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    24f8:	ldr	ip, [r0, #68]	; 0x44
    24fc:	cmp	ip, #0
    2500:	bne	2518 <coda_ascii_cursor_get_bit_size+0xa24>
    2504:	bl	0 <coda_ascii_init_asciilines>
    2508:	cmp	r0, #0
    250c:	beq	2518 <coda_ascii_cursor_get_bit_size+0xa24>
    2510:	mvn	r0, #0
    2514:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    2518:	ldr	ip, [sl]
    251c:	ldr	r2, [ip, #64]	; 0x40
    2520:	cmp	r2, #0
    2524:	bne	253c <coda_ascii_cursor_get_bit_size+0xa48>
    2528:	mvn	r0, #300	; 0x12c
    252c:	ldr	r1, [pc, #568]	; 276c <coda_ascii_cursor_get_bit_size+0xc78>
    2530:	bl	0 <coda_set_error>
    2534:	mvn	r0, #0
    2538:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    253c:	mov	r4, #0
    2540:	sub	r0, r2, #1
    2544:	ldr	ip, [ip, #68]	; 0x44
    2548:	ldr	r2, [sl, #4]
    254c:	lsl	r1, r2, #4
    2550:	add	r1, sl, r1
    2554:	ldr	r3, [r1]
    2558:	ldr	r1, [r1, #4]
    255c:	asr	r2, r1, #3
    2560:	lsr	r3, r3, #3
    2564:	orr	r1, r3, r1, lsl #29
    2568:	cmp	r0, r4
    256c:	beq	25bc <coda_ascii_cursor_get_bit_size+0xac8>
    2570:	add	r3, r4, r0
    2574:	asr	lr, r3, #31
    2578:	add	lr, r3, lr, lsr #31
    257c:	asr	r7, lr, #1
    2580:	mov	r6, r1
    2584:	ldr	r5, [ip, r7, lsl #2]
    2588:	asr	fp, r5, #31
    258c:	mov	r3, r2
    2590:	cmp	r3, fp
    2594:	bne	25a4 <coda_ascii_cursor_get_bit_size+0xab0>
    2598:	cmp	r6, r5
    259c:	bcc	25b4 <coda_ascii_cursor_get_bit_size+0xac0>
    25a0:	b	25ac <coda_ascii_cursor_get_bit_size+0xab8>
    25a4:	cmp	r3, fp
    25a8:	blt	25b4 <coda_ascii_cursor_get_bit_size+0xac0>
    25ac:	add	r4, r7, #1
    25b0:	b	2568 <coda_ascii_cursor_get_bit_size+0xa74>
    25b4:	mov	r0, r7
    25b8:	b	2568 <coda_ascii_cursor_get_bit_size+0xa74>
    25bc:	ldr	r3, [ip, r0, lsl #2]
    25c0:	asr	ip, r3, #31
    25c4:	subs	r3, r3, r1
    25c8:	sbc	r1, ip, r2
    25cc:	lsl	ip, r1, #3
    25d0:	orr	r2, ip, r3, lsr #29
    25d4:	lsl	r1, r3, #3
    25d8:	str	r1, [r9]
    25dc:	str	r2, [r9, #4]
    25e0:	ldr	ip, [r8, #44]	; 0x2c
    25e4:	cmp	ip, #3
    25e8:	bne	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    25ec:	ldr	r1, [sl]
    25f0:	ldr	r2, [r1, #64]	; 0x40
    25f4:	sub	r2, r2, #1
    25f8:	cmp	r0, r2
    25fc:	bne	260c <coda_ascii_cursor_get_bit_size+0xb18>
    2600:	ldr	ip, [r1, #72]	; 0x48
    2604:	cmp	ip, #0
    2608:	beq	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    260c:	ldr	r1, [r9]
    2610:	ldr	ip, [r9, #4]
    2614:	mov	r3, #0
    2618:	mov	r2, #8
    261c:	subs	lr, r1, r2
    2620:	sbc	r0, ip, r3
    2624:	mov	ip, lr
    2628:	str	ip, [r9]
    262c:	str	r0, [r9, #4]
    2630:	ldr	r1, [sl]
    2634:	ldr	r1, [r1, #60]	; 0x3c
    2638:	cmp	r1, #3
    263c:	bne	2650 <coda_ascii_cursor_get_bit_size+0xb5c>
    2640:	subs	r1, ip, r2
    2644:	sbc	r0, r0, r3
    2648:	str	r1, [r9]
    264c:	str	r0, [r9, #4]
    2650:	mov	r0, #0
    2654:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    2658:	ldr	ip, [r8, #12]
    265c:	cmp	ip, #10
    2660:	bcs	26e8 <coda_ascii_cursor_get_bit_size+0xbf4>
    2664:	add	pc, pc, ip, lsl #2
    2668:	nop	{0}
    266c:	b	2694 <coda_ascii_cursor_get_bit_size+0xba0>
    2670:	b	26b0 <coda_ascii_cursor_get_bit_size+0xbbc>
    2674:	b	2694 <coda_ascii_cursor_get_bit_size+0xba0>
    2678:	b	26b0 <coda_ascii_cursor_get_bit_size+0xbbc>
    267c:	b	2694 <coda_ascii_cursor_get_bit_size+0xba0>
    2680:	b	26b0 <coda_ascii_cursor_get_bit_size+0xbbc>
    2684:	b	2694 <coda_ascii_cursor_get_bit_size+0xba0>
    2688:	b	26b0 <coda_ascii_cursor_get_bit_size+0xbbc>
    268c:	b	26cc <coda_ascii_cursor_get_bit_size+0xbd8>
    2690:	b	26cc <coda_ascii_cursor_get_bit_size+0xbd8>
    2694:	add	r0, sp, #136	; 0x88
    2698:	add	r2, sp, #88	; 0x58
    269c:	mov	r3, #1
    26a0:	mov	r1, r4
    26a4:	bl	1010 <coda_ascii_parse_int64>
    26a8:	str	r0, [sp, #28]
    26ac:	b	2704 <coda_ascii_cursor_get_bit_size+0xc10>
    26b0:	add	r0, sp, #136	; 0x88
    26b4:	add	r2, sp, #96	; 0x60
    26b8:	mov	r3, #1
    26bc:	mov	r1, r4
    26c0:	bl	1278 <coda_ascii_parse_uint64>
    26c4:	str	r0, [sp, #28]
    26c8:	b	2704 <coda_ascii_cursor_get_bit_size+0xc10>
    26cc:	add	r0, sp, #136	; 0x88
    26d0:	add	r2, sp, #104	; 0x68
    26d4:	mov	r3, #1
    26d8:	mov	r1, r4
    26dc:	bl	1490 <coda_ascii_parse_double>
    26e0:	str	r0, [sp, #28]
    26e4:	b	2704 <coda_ascii_cursor_get_bit_size+0xc10>
    26e8:	ldr	r0, [pc, #156]	; 278c <coda_ascii_cursor_get_bit_size+0xc98>
    26ec:	ldr	r1, [pc, #160]	; 2794 <coda_ascii_cursor_get_bit_size+0xca0>
    26f0:	mov	r2, #800	; 0x320
    26f4:	ldr	r3, [pc, #108]	; 2768 <coda_ascii_cursor_get_bit_size+0xc74>
    26f8:	bl	0 <__assert_fail>
    26fc:	mov	r0, #1
    2700:	bl	0 <exit>
    2704:	ldr	r0, [sp, #28]
    2708:	cmp	r0, #0
    270c:	bge	2718 <coda_ascii_cursor_get_bit_size+0xc24>
    2710:	mvn	r0, #0
    2714:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    2718:	lsl	r3, r0, #3
    271c:	asr	ip, r3, #31
    2720:	str	r3, [r9]
    2724:	str	ip, [r9, #4]
    2728:	mov	r0, #0
    272c:	b	273c <coda_ascii_cursor_get_bit_size+0xc48>
    2730:	mov	r1, r9
    2734:	mov	r0, sl
    2738:	bl	0 <coda_ascbin_cursor_get_bit_size>
    273c:	ldr	r4, [sp, #36]	; 0x24
    2740:	ldr	r5, [sp, #40]	; 0x28
    2744:	ldr	r6, [sp, #44]	; 0x2c
    2748:	ldr	r7, [sp, #48]	; 0x30
    274c:	ldr	r8, [sp, #52]	; 0x34
    2750:	ldr	r9, [sp, #56]	; 0x38
    2754:	ldr	sl, [sp, #60]	; 0x3c
    2758:	ldr	fp, [sp, #64]	; 0x40
    275c:	ldr	lr, [sp, #16]
    2760:	add	sp, sp, #720	; 0x2d0
    2764:	bx	lr
    2768:	.word	0x00000a27
    276c:	.word	0x000008ae
    2770:	.word	0x0000091e
    2774:	.word	0x00000100
    2778:	.word	0x00000995
    277c:	.word	0x0000053e
    2780:	.word	0x000001f5
    2784:	.word	0x000005e5
    2788:	.word	0x00000401
    278c:	.word	0x00000748
    2790:	.word	0x0000032c
    2794:	.word	0x000006a4
    2798:	.word	0x00000836

0000279c <coda_ascii_cursor_get_num_elements>:
    279c:	mov	ip, sp
    27a0:	sub	sp, sp, #8
    27a4:	str	ip, [sp]
    27a8:	str	lr, [sp, #4]
    27ac:	ldr	r2, [r0, #4]
    27b0:	lsl	r3, r2, #4
    27b4:	add	r2, r0, r3
    27b8:	sub	lr, r2, #4096	; 0x1000
    27bc:	ldr	r2, [lr, #4088]	; 0xff8
    27c0:	ldr	r3, [r2]
    27c4:	cmp	r3, #100	; 0x64
    27c8:	blt	27d0 <coda_ascii_cursor_get_num_elements+0x34>
    27cc:	ldr	r2, [r2, #4]
    27d0:	ldr	ip, [r2, #8]
    27d4:	cmp	ip, #0
    27d8:	beq	27fc <coda_ascii_cursor_get_num_elements+0x60>
    27dc:	cmp	ip, #1
    27e0:	beq	27fc <coda_ascii_cursor_get_num_elements+0x60>
    27e4:	mov	r3, #1
    27e8:	str	r3, [r1]
    27ec:	mov	r0, #0
    27f0:	ldr	lr, [sp, #4]
    27f4:	add	sp, sp, #8
    27f8:	bx	lr
    27fc:	ldr	lr, [sp, #4]
    2800:	add	sp, sp, #8
    2804:	b	0 <coda_ascbin_cursor_get_num_elements>

00002808 <coda_ascii_cursor_read_int64>:
    2808:	mov	ip, sp
    280c:	sub	sp, sp, #128	; 0x80
    2810:	str	ip, [sp, #12]
    2814:	str	lr, [sp, #16]
    2818:	str	r4, [sp, #24]
    281c:	str	r5, [sp, #28]
    2820:	str	r6, [sp, #32]
    2824:	str	r7, [sp, #36]	; 0x24
    2828:	str	r8, [sp, #40]	; 0x28
    282c:	str	r9, [sp, #44]	; 0x2c
    2830:	str	sl, [sp, #48]	; 0x30
    2834:	mov	r7, r1
    2838:	mov	r6, r0
    283c:	ldr	r2, [r6, #4]
    2840:	lsl	r0, r2, #4
    2844:	add	r1, r6, r0
    2848:	sub	lr, r1, #4096	; 0x1000
    284c:	ldr	r4, [lr, #4088]	; 0xff8
    2850:	ldr	r1, [r4]
    2854:	cmp	r1, #100	; 0x64
    2858:	blt	2860 <coda_ascii_cursor_read_int64+0x58>
    285c:	ldr	r4, [r4, #4]
    2860:	ldr	ip, [r6, #4]
    2864:	lsl	r1, ip, #4
    2868:	add	ip, r6, r1
    286c:	ldr	r8, [ip]
    2870:	ldr	r9, [ip, #4]
    2874:	mov	r5, #1
    2878:	add	r1, sp, #56	; 0x38
    287c:	ldr	r2, [r4, #24]
    2880:	ldr	r3, [r4, #28]
    2884:	mov	r0, r6
    2888:	bl	b04 <get_bit_size_boundary>
    288c:	cmp	r0, #0
    2890:	beq	289c <coda_ascii_cursor_read_int64+0x94>
    2894:	mvn	r0, #0
    2898:	b	29f0 <coda_ascii_cursor_read_int64+0x1e8>
    289c:	mov	r3, #0
    28a0:	mov	r0, r8
    28a4:	and	r2, r0, #7
    28a8:	orr	r0, r3, r2
    28ac:	cmp	r0, #0
    28b0:	beq	28c8 <coda_ascii_cursor_read_int64+0xc0>
    28b4:	mvn	r0, #21
    28b8:	ldr	r1, [pc, #344]	; 2a18 <coda_ascii_cursor_read_int64+0x210>
    28bc:	bl	0 <coda_set_error>
    28c0:	mvn	r0, #0
    28c4:	b	29f0 <coda_ascii_cursor_read_int64+0x1e8>
    28c8:	ldr	ip, [r4, #24]
    28cc:	ldr	r2, [r4, #28]
    28d0:	cmp	r2, #0
    28d4:	bge	2924 <coda_ascii_cursor_read_int64+0x11c>
    28d8:	ldr	r1, [sp, #56]	; 0x38
    28dc:	ldr	r2, [sp, #60]	; 0x3c
    28e0:	asr	r3, r2, #3
    28e4:	lsr	ip, r1, #3
    28e8:	orr	r0, ip, r2, lsl #29
    28ec:	cmp	r3, #0
    28f0:	bne	2900 <coda_ascii_cursor_read_int64+0xf8>
    28f4:	cmp	r0, #64	; 0x40
    28f8:	bcc	2908 <coda_ascii_cursor_read_int64+0x100>
    28fc:	b	291c <coda_ascii_cursor_read_int64+0x114>
    2900:	cmp	r3, #0
    2904:	bge	291c <coda_ascii_cursor_read_int64+0x114>
    2908:	ldr	ip, [sp, #56]	; 0x38
    290c:	ldr	r1, [sp, #60]	; 0x3c
    2910:	lsr	r2, ip, #3
    2914:	orr	sl, r2, r1, lsl #29
    2918:	b	294c <coda_ascii_cursor_read_int64+0x144>
    291c:	mov	sl, #64	; 0x40
    2920:	b	294c <coda_ascii_cursor_read_int64+0x144>
    2924:	mov	r5, #0
    2928:	lsr	r3, ip, #3
    292c:	orr	sl, r3, r2, lsl #29
    2930:	cmp	sl, #64	; 0x40
    2934:	ble	294c <coda_ascii_cursor_read_int64+0x144>
    2938:	ldr	r0, [pc, #224]	; 2a20 <coda_ascii_cursor_read_int64+0x218>
    293c:	ldr	r1, [pc, #224]	; 2a24 <coda_ascii_cursor_read_int64+0x21c>
    2940:	movw	r2, #1076	; 0x434
    2944:	ldr	r3, [pc, #208]	; 2a1c <coda_ascii_cursor_read_int64+0x214>
    2948:	bl	0 <__assert_fail>
    294c:	ldr	r0, [r6]
    2950:	asr	r3, r9, #3
    2954:	lsr	ip, r8, #3
    2958:	orr	r2, ip, r9, lsl #29
    295c:	asr	r1, sl, #31
    2960:	mov	ip, sl
    2964:	add	r8, sp, #64	; 0x40
    2968:	str	r8, [sp, #8]
    296c:	str	r1, [sp, #4]
    2970:	str	ip, [sp]
    2974:	bl	1f4 <read_bytes_in_bounds>
    2978:	cmp	r0, #0
    297c:	beq	2988 <coda_ascii_cursor_read_int64+0x180>
    2980:	mvn	r0, #0
    2984:	b	29f0 <coda_ascii_cursor_read_int64+0x1e8>
    2988:	ldr	r2, [r4, #52]	; 0x34
    298c:	cmp	r2, #0
    2990:	beq	29c8 <coda_ascii_cursor_read_int64+0x1c0>
    2994:	add	r0, sp, #64	; 0x40
    2998:	str	r7, [sp]
    299c:	mov	r3, r5
    29a0:	mov	r1, sl
    29a4:	bl	ef0 <parse_integer_mapping>
    29a8:	cmp	r0, #0
    29ac:	beq	29c8 <coda_ascii_cursor_read_int64+0x1c0>
    29b0:	cmp	r0, #1
    29b4:	bne	29c0 <coda_ascii_cursor_read_int64+0x1b8>
    29b8:	mov	r0, #0
    29bc:	b	29f0 <coda_ascii_cursor_read_int64+0x1e8>
    29c0:	mvn	r0, #0
    29c4:	b	29f0 <coda_ascii_cursor_read_int64+0x1e8>
    29c8:	add	r0, sp, #64	; 0x40
    29cc:	mov	r3, r5
    29d0:	mov	r2, r7
    29d4:	mov	r1, sl
    29d8:	bl	1010 <coda_ascii_parse_int64>
    29dc:	cmp	r0, #0
    29e0:	bge	29ec <coda_ascii_cursor_read_int64+0x1e4>
    29e4:	mvn	r0, #0
    29e8:	b	29f0 <coda_ascii_cursor_read_int64+0x1e8>
    29ec:	mov	r0, #0
    29f0:	ldr	r4, [sp, #24]
    29f4:	ldr	r5, [sp, #28]
    29f8:	ldr	r6, [sp, #32]
    29fc:	ldr	r7, [sp, #36]	; 0x24
    2a00:	ldr	r8, [sp, #40]	; 0x28
    2a04:	ldr	r9, [sp, #44]	; 0x2c
    2a08:	ldr	sl, [sp, #48]	; 0x30
    2a0c:	ldr	lr, [sp, #16]
    2a10:	add	sp, sp, #128	; 0x80
    2a14:	bx	lr
    2a18:	.word	0x000007cb
    2a1c:	.word	0x00000a46
    2a20:	.word	0x00000239
    2a24:	.word	0x000006a4

00002a28 <coda_ascii_cursor_read_uint64>:
    2a28:	mov	ip, sp
    2a2c:	sub	sp, sp, #128	; 0x80
    2a30:	str	ip, [sp, #12]
    2a34:	str	lr, [sp, #16]
    2a38:	str	r4, [sp, #24]
    2a3c:	str	r5, [sp, #28]
    2a40:	str	r6, [sp, #32]
    2a44:	str	r7, [sp, #36]	; 0x24
    2a48:	str	r8, [sp, #40]	; 0x28
    2a4c:	str	r9, [sp, #44]	; 0x2c
    2a50:	str	sl, [sp, #48]	; 0x30
    2a54:	mov	r7, r1
    2a58:	mov	r6, r0
    2a5c:	ldr	r2, [r6, #4]
    2a60:	lsl	r0, r2, #4
    2a64:	add	r1, r6, r0
    2a68:	sub	lr, r1, #4096	; 0x1000
    2a6c:	ldr	r4, [lr, #4088]	; 0xff8
    2a70:	ldr	r1, [r4]
    2a74:	cmp	r1, #100	; 0x64
    2a78:	blt	2a80 <coda_ascii_cursor_read_uint64+0x58>
    2a7c:	ldr	r4, [r4, #4]
    2a80:	ldr	ip, [r6, #4]
    2a84:	lsl	r1, ip, #4
    2a88:	add	ip, r6, r1
    2a8c:	ldr	r8, [ip]
    2a90:	ldr	r9, [ip, #4]
    2a94:	mov	r5, #1
    2a98:	add	r1, sp, #56	; 0x38
    2a9c:	ldr	r2, [r4, #24]
    2aa0:	ldr	r3, [r4, #28]
    2aa4:	mov	r0, r6
    2aa8:	bl	b04 <get_bit_size_boundary>
    2aac:	cmp	r0, #0
    2ab0:	beq	2abc <coda_ascii_cursor_read_uint64+0x94>
    2ab4:	mvn	r0, #0
    2ab8:	b	2c10 <coda_ascii_cursor_read_uint64+0x1e8>
    2abc:	mov	r3, #0
    2ac0:	mov	r0, r8
    2ac4:	and	r2, r0, #7
    2ac8:	orr	r0, r3, r2
    2acc:	cmp	r0, #0
    2ad0:	beq	2ae8 <coda_ascii_cursor_read_uint64+0xc0>
    2ad4:	mvn	r0, #21
    2ad8:	ldr	r1, [pc, #344]	; 2c38 <coda_ascii_cursor_read_uint64+0x210>
    2adc:	bl	0 <coda_set_error>
    2ae0:	mvn	r0, #0
    2ae4:	b	2c10 <coda_ascii_cursor_read_uint64+0x1e8>
    2ae8:	ldr	ip, [r4, #24]
    2aec:	ldr	r2, [r4, #28]
    2af0:	cmp	r2, #0
    2af4:	bge	2b44 <coda_ascii_cursor_read_uint64+0x11c>
    2af8:	ldr	r1, [sp, #56]	; 0x38
    2afc:	ldr	r2, [sp, #60]	; 0x3c
    2b00:	asr	r3, r2, #3
    2b04:	lsr	ip, r1, #3
    2b08:	orr	r0, ip, r2, lsl #29
    2b0c:	cmp	r3, #0
    2b10:	bne	2b20 <coda_ascii_cursor_read_uint64+0xf8>
    2b14:	cmp	r0, #64	; 0x40
    2b18:	bcc	2b28 <coda_ascii_cursor_read_uint64+0x100>
    2b1c:	b	2b3c <coda_ascii_cursor_read_uint64+0x114>
    2b20:	cmp	r3, #0
    2b24:	bge	2b3c <coda_ascii_cursor_read_uint64+0x114>
    2b28:	ldr	ip, [sp, #56]	; 0x38
    2b2c:	ldr	r1, [sp, #60]	; 0x3c
    2b30:	lsr	r2, ip, #3
    2b34:	orr	sl, r2, r1, lsl #29
    2b38:	b	2b6c <coda_ascii_cursor_read_uint64+0x144>
    2b3c:	mov	sl, #64	; 0x40
    2b40:	b	2b6c <coda_ascii_cursor_read_uint64+0x144>
    2b44:	mov	r5, #0
    2b48:	lsr	r3, ip, #3
    2b4c:	orr	sl, r3, r2, lsl #29
    2b50:	cmp	sl, #64	; 0x40
    2b54:	ble	2b6c <coda_ascii_cursor_read_uint64+0x144>
    2b58:	ldr	r0, [pc, #220]	; 2c3c <coda_ascii_cursor_read_uint64+0x214>
    2b5c:	ldr	r1, [pc, #220]	; 2c40 <coda_ascii_cursor_read_uint64+0x218>
    2b60:	movw	r2, #1137	; 0x471
    2b64:	ldr	r3, [pc, #216]	; 2c44 <coda_ascii_cursor_read_uint64+0x21c>
    2b68:	bl	0 <__assert_fail>
    2b6c:	ldr	r0, [r6]
    2b70:	asr	r3, r9, #3
    2b74:	lsr	ip, r8, #3
    2b78:	orr	r2, ip, r9, lsl #29
    2b7c:	asr	r1, sl, #31
    2b80:	mov	ip, sl
    2b84:	add	r8, sp, #64	; 0x40
    2b88:	str	r8, [sp, #8]
    2b8c:	str	r1, [sp, #4]
    2b90:	str	ip, [sp]
    2b94:	bl	1f4 <read_bytes_in_bounds>
    2b98:	cmp	r0, #0
    2b9c:	beq	2ba8 <coda_ascii_cursor_read_uint64+0x180>
    2ba0:	mvn	r0, #0
    2ba4:	b	2c10 <coda_ascii_cursor_read_uint64+0x1e8>
    2ba8:	ldr	r2, [r4, #52]	; 0x34
    2bac:	cmp	r2, #0
    2bb0:	beq	2be8 <coda_ascii_cursor_read_uint64+0x1c0>
    2bb4:	add	r0, sp, #64	; 0x40
    2bb8:	str	r7, [sp]
    2bbc:	mov	r3, r5
    2bc0:	mov	r1, sl
    2bc4:	bl	ef0 <parse_integer_mapping>
    2bc8:	cmp	r0, #0
    2bcc:	beq	2be8 <coda_ascii_cursor_read_uint64+0x1c0>
    2bd0:	cmp	r0, #1
    2bd4:	bne	2be0 <coda_ascii_cursor_read_uint64+0x1b8>
    2bd8:	mov	r0, #0
    2bdc:	b	2c10 <coda_ascii_cursor_read_uint64+0x1e8>
    2be0:	mvn	r0, #0
    2be4:	b	2c10 <coda_ascii_cursor_read_uint64+0x1e8>
    2be8:	add	r0, sp, #64	; 0x40
    2bec:	mov	r3, r5
    2bf0:	mov	r2, r7
    2bf4:	mov	r1, sl
    2bf8:	bl	1278 <coda_ascii_parse_uint64>
    2bfc:	cmp	r0, #0
    2c00:	bge	2c0c <coda_ascii_cursor_read_uint64+0x1e4>
    2c04:	mvn	r0, #0
    2c08:	b	2c10 <coda_ascii_cursor_read_uint64+0x1e8>
    2c0c:	mov	r0, #0
    2c10:	ldr	r4, [sp, #24]
    2c14:	ldr	r5, [sp, #28]
    2c18:	ldr	r6, [sp, #32]
    2c1c:	ldr	r7, [sp, #36]	; 0x24
    2c20:	ldr	r8, [sp, #40]	; 0x28
    2c24:	ldr	r9, [sp, #44]	; 0x2c
    2c28:	ldr	sl, [sp, #48]	; 0x30
    2c2c:	ldr	lr, [sp, #16]
    2c30:	add	sp, sp, #128	; 0x80
    2c34:	bx	lr
    2c38:	.word	0x000007cb
    2c3c:	.word	0x00000239
    2c40:	.word	0x000006a4
    2c44:	.word	0x00000a63

00002c48 <coda_ascii_cursor_read_int8>:
    2c48:	mov	ip, sp
    2c4c:	sub	sp, sp, #24
    2c50:	str	ip, [sp]
    2c54:	str	lr, [sp, #4]
    2c58:	str	r4, [sp, #8]
    2c5c:	mov	r4, r1
    2c60:	add	r1, sp, #16
    2c64:	bl	2808 <coda_ascii_cursor_read_int64>
    2c68:	cmp	r0, #0
    2c6c:	beq	2c78 <coda_ascii_cursor_read_int8+0x30>
    2c70:	mvn	r0, #0
    2c74:	b	2cf4 <coda_ascii_cursor_read_int8+0xac>
    2c78:	ldr	r3, [sp, #16]
    2c7c:	ldr	r0, [sp, #20]
    2c80:	cmp	r0, #0
    2c84:	bne	2c94 <coda_ascii_cursor_read_int8+0x4c>
    2c88:	cmp	r3, #127	; 0x7f
    2c8c:	bhi	2ce0 <coda_ascii_cursor_read_int8+0x98>
    2c90:	b	2c9c <coda_ascii_cursor_read_int8+0x54>
    2c94:	cmp	r0, #0
    2c98:	bgt	2ce0 <coda_ascii_cursor_read_int8+0x98>
    2c9c:	ldr	ip, [sp, #16]
    2ca0:	ldr	r1, [sp, #20]
    2ca4:	cmn	r1, #1
    2ca8:	bne	2cbc <coda_ascii_cursor_read_int8+0x74>
    2cac:	cmn	ip, #128	; 0x80
    2cb0:	movcc	r1, #1
    2cb4:	movcs	r1, #0
    2cb8:	b	2cc8 <coda_ascii_cursor_read_int8+0x80>
    2cbc:	cmn	r1, #1
    2cc0:	movlt	r1, #1
    2cc4:	movge	r1, #0
    2cc8:	cmp	r1, #0
    2ccc:	bne	2ce0 <coda_ascii_cursor_read_int8+0x98>
    2cd0:	ldr	r2, [sp, #16]
    2cd4:	strb	r2, [r4]
    2cd8:	mov	r0, #0
    2cdc:	b	2cf4 <coda_ascii_cursor_read_int8+0xac>
    2ce0:	movw	r0, #65236	; 0xfed4
    2ce4:	movt	r0, #65535	; 0xffff
    2ce8:	ldr	r1, [pc, #20]	; 2d04 <coda_ascii_cursor_read_int8+0xbc>
    2cec:	bl	0 <coda_set_error>
    2cf0:	mvn	r0, #0
    2cf4:	ldr	r4, [sp, #8]
    2cf8:	ldr	lr, [sp, #4]
    2cfc:	add	sp, sp, #24
    2d00:	bx	lr
    2d04:	.word	0x00000004

00002d08 <coda_ascii_cursor_read_uint8>:
    2d08:	mov	ip, sp
    2d0c:	sub	sp, sp, #24
    2d10:	str	ip, [sp]
    2d14:	str	lr, [sp, #4]
    2d18:	str	r4, [sp, #8]
    2d1c:	mov	r4, r1
    2d20:	add	r1, sp, #16
    2d24:	bl	2a28 <coda_ascii_cursor_read_uint64>
    2d28:	cmp	r0, #0
    2d2c:	beq	2d38 <coda_ascii_cursor_read_uint8+0x30>
    2d30:	mvn	r0, #0
    2d34:	b	2d80 <coda_ascii_cursor_read_uint8+0x78>
    2d38:	ldr	r0, [sp, #16]
    2d3c:	ldr	r2, [sp, #20]
    2d40:	cmp	r2, #0
    2d44:	bne	2d54 <coda_ascii_cursor_read_uint8+0x4c>
    2d48:	cmp	r0, #255	; 0xff
    2d4c:	bhi	2d5c <coda_ascii_cursor_read_uint8+0x54>
    2d50:	b	2d74 <coda_ascii_cursor_read_uint8+0x6c>
    2d54:	cmp	r2, #0
    2d58:	bls	2d74 <coda_ascii_cursor_read_uint8+0x6c>
    2d5c:	movw	r0, #65236	; 0xfed4
    2d60:	movt	r0, #65535	; 0xffff
    2d64:	ldr	r1, [pc, #36]	; 2d90 <coda_ascii_cursor_read_uint8+0x88>
    2d68:	bl	0 <coda_set_error>
    2d6c:	mvn	r0, #0
    2d70:	b	2d80 <coda_ascii_cursor_read_uint8+0x78>
    2d74:	ldr	r1, [sp, #16]
    2d78:	strb	r1, [r4]
    2d7c:	mov	r0, #0
    2d80:	ldr	r4, [sp, #8]
    2d84:	ldr	lr, [sp, #4]
    2d88:	add	sp, sp, #24
    2d8c:	bx	lr
    2d90:	.word	0x00000127

00002d94 <coda_ascii_cursor_read_int16>:
    2d94:	mov	ip, sp
    2d98:	sub	sp, sp, #24
    2d9c:	str	ip, [sp]
    2da0:	str	lr, [sp, #4]
    2da4:	str	r4, [sp, #8]
    2da8:	mov	r4, r1
    2dac:	add	r1, sp, #16
    2db0:	bl	2808 <coda_ascii_cursor_read_int64>
    2db4:	cmp	r0, #0
    2db8:	beq	2dc4 <coda_ascii_cursor_read_int16+0x30>
    2dbc:	mvn	r0, #0
    2dc0:	b	2e44 <coda_ascii_cursor_read_int16+0xb0>
    2dc4:	ldr	r3, [sp, #16]
    2dc8:	ldr	r0, [sp, #20]
    2dcc:	cmp	r0, #0
    2dd0:	bne	2de4 <coda_ascii_cursor_read_int16+0x50>
    2dd4:	movw	lr, #32767	; 0x7fff
    2dd8:	cmp	r3, lr
    2ddc:	bhi	2e30 <coda_ascii_cursor_read_int16+0x9c>
    2de0:	b	2dec <coda_ascii_cursor_read_int16+0x58>
    2de4:	cmp	r0, #0
    2de8:	bgt	2e30 <coda_ascii_cursor_read_int16+0x9c>
    2dec:	ldr	ip, [sp, #16]
    2df0:	ldr	r1, [sp, #20]
    2df4:	cmn	r1, #1
    2df8:	bne	2e0c <coda_ascii_cursor_read_int16+0x78>
    2dfc:	cmn	ip, #32768	; 0x8000
    2e00:	movcc	r1, #1
    2e04:	movcs	r1, #0
    2e08:	b	2e18 <coda_ascii_cursor_read_int16+0x84>
    2e0c:	cmn	r1, #1
    2e10:	movlt	r1, #1
    2e14:	movge	r1, #0
    2e18:	cmp	r1, #0
    2e1c:	bne	2e30 <coda_ascii_cursor_read_int16+0x9c>
    2e20:	ldr	r2, [sp, #16]
    2e24:	strh	r2, [r4]
    2e28:	mov	r0, #0
    2e2c:	b	2e44 <coda_ascii_cursor_read_int16+0xb0>
    2e30:	movw	r0, #65236	; 0xfed4
    2e34:	movt	r0, #65535	; 0xffff
    2e38:	ldr	r1, [pc, #20]	; 2e54 <coda_ascii_cursor_read_int16+0xc0>
    2e3c:	bl	0 <coda_set_error>
    2e40:	mvn	r0, #0
    2e44:	ldr	r4, [sp, #8]
    2e48:	ldr	lr, [sp, #4]
    2e4c:	add	sp, sp, #24
    2e50:	bx	lr
    2e54:	.word	0x00000048

00002e58 <coda_ascii_cursor_read_uint16>:
    2e58:	mov	ip, sp
    2e5c:	sub	sp, sp, #24
    2e60:	str	ip, [sp]
    2e64:	str	lr, [sp, #4]
    2e68:	str	r4, [sp, #8]
    2e6c:	mov	r4, r1
    2e70:	add	r1, sp, #16
    2e74:	bl	2a28 <coda_ascii_cursor_read_uint64>
    2e78:	cmp	r0, #0
    2e7c:	beq	2e88 <coda_ascii_cursor_read_uint16+0x30>
    2e80:	mvn	r0, #0
    2e84:	b	2ed4 <coda_ascii_cursor_read_uint16+0x7c>
    2e88:	ldr	r0, [sp, #16]
    2e8c:	ldr	r2, [sp, #20]
    2e90:	cmp	r2, #0
    2e94:	bne	2ea8 <coda_ascii_cursor_read_uint16+0x50>
    2e98:	movw	lr, #65535	; 0xffff
    2e9c:	cmp	r0, lr
    2ea0:	bhi	2eb0 <coda_ascii_cursor_read_uint16+0x58>
    2ea4:	b	2ec8 <coda_ascii_cursor_read_uint16+0x70>
    2ea8:	cmp	r2, #0
    2eac:	bls	2ec8 <coda_ascii_cursor_read_uint16+0x70>
    2eb0:	movw	r0, #65236	; 0xfed4
    2eb4:	movt	r0, #65535	; 0xffff
    2eb8:	ldr	r1, [pc, #36]	; 2ee4 <coda_ascii_cursor_read_uint16+0x8c>
    2ebc:	bl	0 <coda_set_error>
    2ec0:	mvn	r0, #0
    2ec4:	b	2ed4 <coda_ascii_cursor_read_uint16+0x7c>
    2ec8:	ldr	r1, [sp, #16]
    2ecc:	strh	r1, [r4]
    2ed0:	mov	r0, #0
    2ed4:	ldr	r4, [sp, #8]
    2ed8:	ldr	lr, [sp, #4]
    2edc:	add	sp, sp, #24
    2ee0:	bx	lr
    2ee4:	.word	0x0000008d

00002ee8 <coda_ascii_cursor_read_int32>:
    2ee8:	mov	ip, sp
    2eec:	sub	sp, sp, #24
    2ef0:	str	ip, [sp]
    2ef4:	str	lr, [sp, #4]
    2ef8:	str	r4, [sp, #8]
    2efc:	mov	r4, r1
    2f00:	add	r1, sp, #16
    2f04:	bl	2808 <coda_ascii_cursor_read_int64>
    2f08:	cmp	r0, #0
    2f0c:	beq	2f18 <coda_ascii_cursor_read_int32+0x30>
    2f10:	mvn	r0, #0
    2f14:	b	2f94 <coda_ascii_cursor_read_int32+0xac>
    2f18:	ldr	ip, [sp, #16]
    2f1c:	ldr	r0, [sp, #20]
    2f20:	cmp	r0, #0
    2f24:	bne	2f34 <coda_ascii_cursor_read_int32+0x4c>
    2f28:	cmn	ip, #-2147483647	; 0x80000001
    2f2c:	bhi	2f80 <coda_ascii_cursor_read_int32+0x98>
    2f30:	b	2f3c <coda_ascii_cursor_read_int32+0x54>
    2f34:	cmp	r0, #0
    2f38:	bgt	2f80 <coda_ascii_cursor_read_int32+0x98>
    2f3c:	ldr	r2, [sp, #16]
    2f40:	ldr	r1, [sp, #20]
    2f44:	cmn	r1, #1
    2f48:	bne	2f5c <coda_ascii_cursor_read_int32+0x74>
    2f4c:	cmp	r2, #-2147483648	; 0x80000000
    2f50:	movcc	r2, #1
    2f54:	movcs	r2, #0
    2f58:	b	2f68 <coda_ascii_cursor_read_int32+0x80>
    2f5c:	cmn	r1, #1
    2f60:	movlt	r2, #1
    2f64:	movge	r2, #0
    2f68:	cmp	r2, #0
    2f6c:	bne	2f80 <coda_ascii_cursor_read_int32+0x98>
    2f70:	ldr	r3, [sp, #16]
    2f74:	str	r3, [r4]
    2f78:	mov	r0, #0
    2f7c:	b	2f94 <coda_ascii_cursor_read_int32+0xac>
    2f80:	movw	r0, #65236	; 0xfed4
    2f84:	movt	r0, #65535	; 0xffff
    2f88:	ldr	r1, [pc, #20]	; 2fa4 <coda_ascii_cursor_read_int32+0xbc>
    2f8c:	bl	0 <coda_set_error>
    2f90:	mvn	r0, #0
    2f94:	ldr	r4, [sp, #8]
    2f98:	ldr	lr, [sp, #4]
    2f9c:	add	sp, sp, #24
    2fa0:	bx	lr
    2fa4:	.word	0x000005a0

00002fa8 <coda_ascii_cursor_read_uint32>:
    2fa8:	mov	ip, sp
    2fac:	sub	sp, sp, #24
    2fb0:	str	ip, [sp]
    2fb4:	str	lr, [sp, #4]
    2fb8:	str	r4, [sp, #8]
    2fbc:	mov	r4, r1
    2fc0:	add	r1, sp, #16
    2fc4:	bl	2a28 <coda_ascii_cursor_read_uint64>
    2fc8:	cmp	r0, #0
    2fcc:	beq	2fd8 <coda_ascii_cursor_read_uint32+0x30>
    2fd0:	mvn	r0, #0
    2fd4:	b	3010 <coda_ascii_cursor_read_uint32+0x68>
    2fd8:	ldr	r1, [sp, #20]
    2fdc:	cmp	r1, #0
    2fe0:	beq	3004 <coda_ascii_cursor_read_uint32+0x5c>
    2fe4:	cmp	r1, #0
    2fe8:	bls	3004 <coda_ascii_cursor_read_uint32+0x5c>
    2fec:	movw	r0, #65236	; 0xfed4
    2ff0:	movt	r0, #65535	; 0xffff
    2ff4:	ldr	r1, [pc, #36]	; 3020 <coda_ascii_cursor_read_uint32+0x78>
    2ff8:	bl	0 <coda_set_error>
    2ffc:	mvn	r0, #0
    3000:	b	3010 <coda_ascii_cursor_read_uint32+0x68>
    3004:	ldr	r0, [sp, #16]
    3008:	str	r0, [r4]
    300c:	mov	r0, #0
    3010:	ldr	r4, [sp, #8]
    3014:	ldr	lr, [sp, #4]
    3018:	add	sp, sp, #24
    301c:	bx	lr
    3020:	.word	0x0000065e

00003024 <coda_ascii_cursor_read_double>:
    3024:	mov	ip, sp
    3028:	sub	sp, sp, #128	; 0x80
    302c:	str	ip, [sp, #12]
    3030:	str	lr, [sp, #16]
    3034:	str	r4, [sp, #24]
    3038:	str	r5, [sp, #28]
    303c:	str	r6, [sp, #32]
    3040:	str	r7, [sp, #36]	; 0x24
    3044:	str	r8, [sp, #40]	; 0x28
    3048:	str	r9, [sp, #44]	; 0x2c
    304c:	str	sl, [sp, #48]	; 0x30
    3050:	mov	r5, r1
    3054:	mov	r8, r0
    3058:	ldr	r3, [r8, #4]
    305c:	lsl	r2, r3, #4
    3060:	add	r0, r8, r2
    3064:	sub	lr, r0, #4096	; 0x1000
    3068:	ldr	r4, [lr, #4088]	; 0xff8
    306c:	ldr	r1, [r4]
    3070:	cmp	r1, #100	; 0x64
    3074:	blt	307c <coda_ascii_cursor_read_double+0x58>
    3078:	ldr	r4, [r4, #4]
    307c:	ldr	r0, [r8, #4]
    3080:	lsl	r1, r0, #4
    3084:	add	r3, r8, r1
    3088:	ldr	r7, [r3]
    308c:	ldr	r9, [r3, #4]
    3090:	mov	r6, #1
    3094:	add	r1, sp, #56	; 0x38
    3098:	ldr	r2, [r4, #24]
    309c:	ldr	r3, [r4, #28]
    30a0:	mov	r0, r8
    30a4:	bl	b04 <get_bit_size_boundary>
    30a8:	cmp	r0, #0
    30ac:	beq	30b8 <coda_ascii_cursor_read_double+0x94>
    30b0:	mvn	r0, #0
    30b4:	b	32a8 <coda_ascii_cursor_read_double+0x284>
    30b8:	mov	r0, r7
    30bc:	mov	ip, #0
    30c0:	and	r2, r0, #7
    30c4:	orr	r0, ip, r2
    30c8:	cmp	r0, #0
    30cc:	beq	30e4 <coda_ascii_cursor_read_double+0xc0>
    30d0:	mvn	r0, #21
    30d4:	ldr	r1, [pc, #500]	; 32d0 <coda_ascii_cursor_read_double+0x2ac>
    30d8:	bl	0 <coda_set_error>
    30dc:	mvn	r0, #0
    30e0:	b	32a8 <coda_ascii_cursor_read_double+0x284>
    30e4:	ldr	r1, [r4, #24]
    30e8:	ldr	r0, [r4, #28]
    30ec:	cmp	r0, #0
    30f0:	bge	3140 <coda_ascii_cursor_read_double+0x11c>
    30f4:	ldr	r2, [sp, #56]	; 0x38
    30f8:	ldr	r0, [sp, #60]	; 0x3c
    30fc:	asr	r1, r0, #3
    3100:	lsr	r2, r2, #3
    3104:	orr	r2, r2, r0, lsl #29
    3108:	cmp	r1, #0
    310c:	bne	311c <coda_ascii_cursor_read_double+0xf8>
    3110:	cmp	r2, #64	; 0x40
    3114:	bcc	3124 <coda_ascii_cursor_read_double+0x100>
    3118:	b	3138 <coda_ascii_cursor_read_double+0x114>
    311c:	cmp	r1, #0
    3120:	bge	3138 <coda_ascii_cursor_read_double+0x114>
    3124:	ldr	r2, [sp, #56]	; 0x38
    3128:	ldr	r0, [sp, #60]	; 0x3c
    312c:	lsr	ip, r2, #3
    3130:	orr	sl, ip, r0, lsl #29
    3134:	b	3168 <coda_ascii_cursor_read_double+0x144>
    3138:	mov	sl, #64	; 0x40
    313c:	b	3168 <coda_ascii_cursor_read_double+0x144>
    3140:	mov	r6, #0
    3144:	lsr	ip, r1, #3
    3148:	orr	sl, ip, r0, lsl #29
    314c:	cmp	sl, #64	; 0x40
    3150:	ble	3168 <coda_ascii_cursor_read_double+0x144>
    3154:	ldr	r0, [pc, #380]	; 32d8 <coda_ascii_cursor_read_double+0x2b4>
    3158:	ldr	r1, [pc, #384]	; 32e0 <coda_ascii_cursor_read_double+0x2bc>
    315c:	movw	r2, #1306	; 0x51a
    3160:	ldr	r3, [pc, #364]	; 32d4 <coda_ascii_cursor_read_double+0x2b0>
    3164:	bl	0 <__assert_fail>
    3168:	ldr	r0, [r8]
    316c:	asr	r3, r9, #3
    3170:	lsr	r1, r7, #3
    3174:	orr	r2, r1, r9, lsl #29
    3178:	asr	r1, sl, #31
    317c:	mov	ip, sl
    3180:	add	r8, sp, #64	; 0x40
    3184:	str	r8, [sp, #8]
    3188:	str	r1, [sp, #4]
    318c:	str	ip, [sp]
    3190:	bl	1f4 <read_bytes_in_bounds>
    3194:	cmp	r0, #0
    3198:	beq	31a4 <coda_ascii_cursor_read_double+0x180>
    319c:	mvn	r0, #0
    31a0:	b	32a8 <coda_ascii_cursor_read_double+0x284>
    31a4:	ldr	r4, [r4, #52]	; 0x34
    31a8:	cmp	r4, #0
    31ac:	beq	3280 <coda_ascii_cursor_read_double+0x25c>
    31b0:	add	r8, sp, #64	; 0x40
    31b4:	mov	r7, #0
    31b8:	ldr	ip, [r4, #8]
    31bc:	cmp	r7, ip
    31c0:	bge	325c <coda_ascii_cursor_read_double+0x238>
    31c4:	ldr	r3, [r4, #12]
    31c8:	ldr	r1, [r3, r7, lsl #2]
    31cc:	ldr	r2, [r1]
    31d0:	cmp	r2, #0
    31d4:	beq	323c <coda_ascii_cursor_read_double+0x218>
    31d8:	cmp	r2, sl
    31dc:	bgt	3254 <coda_ascii_cursor_read_double+0x230>
    31e0:	ldr	r0, [r1, #4]
    31e4:	mov	r1, r8
    31e8:	bl	0 <memcmp>
    31ec:	cmp	r0, #0
    31f0:	bne	3254 <coda_ascii_cursor_read_double+0x230>
    31f4:	cmp	r6, #0
    31f8:	bne	3224 <coda_ascii_cursor_read_double+0x200>
    31fc:	ldr	r1, [r4, #12]
    3200:	ldr	r0, [r1, r7, lsl #2]
    3204:	ldr	ip, [r0]
    3208:	cmp	ip, sl
    320c:	beq	3224 <coda_ascii_cursor_read_double+0x200>
    3210:	mvn	r0, #102	; 0x66
    3214:	ldr	r1, [pc, #192]	; 32dc <coda_ascii_cursor_read_double+0x2b8>
    3218:	bl	0 <coda_set_error>
    321c:	mvn	r3, #0
    3220:	b	3260 <coda_ascii_cursor_read_double+0x23c>
    3224:	ldr	r3, [r4, #12]
    3228:	ldr	r3, [r3, r7, lsl #2]
    322c:	vldr	d3, [r3, #8]
    3230:	vstr	d3, [r5]
    3234:	mov	r3, #1
    3238:	b	3260 <coda_ascii_cursor_read_double+0x23c>
    323c:	cmp	sl, #0
    3240:	bne	3254 <coda_ascii_cursor_read_double+0x230>
    3244:	vldr	d7, [r1, #8]
    3248:	vstr	d7, [r5]
    324c:	mov	r3, #1
    3250:	b	3260 <coda_ascii_cursor_read_double+0x23c>
    3254:	add	r7, r7, #1
    3258:	b	31b8 <coda_ascii_cursor_read_double+0x194>
    325c:	mov	r3, #0
    3260:	cmp	r3, #0
    3264:	beq	3280 <coda_ascii_cursor_read_double+0x25c>
    3268:	cmp	r3, #1
    326c:	bne	3278 <coda_ascii_cursor_read_double+0x254>
    3270:	mov	r0, #0
    3274:	b	32a8 <coda_ascii_cursor_read_double+0x284>
    3278:	mvn	r0, #0
    327c:	b	32a8 <coda_ascii_cursor_read_double+0x284>
    3280:	add	r0, sp, #64	; 0x40
    3284:	mov	r3, r6
    3288:	mov	r2, r5
    328c:	mov	r1, sl
    3290:	bl	1490 <coda_ascii_parse_double>
    3294:	cmp	r0, #0
    3298:	bge	32a4 <coda_ascii_cursor_read_double+0x280>
    329c:	mvn	r0, #0
    32a0:	b	32a8 <coda_ascii_cursor_read_double+0x284>
    32a4:	mov	r0, #0
    32a8:	ldr	r4, [sp, #24]
    32ac:	ldr	r5, [sp, #28]
    32b0:	ldr	r6, [sp, #32]
    32b4:	ldr	r7, [sp, #36]	; 0x24
    32b8:	ldr	r8, [sp, #40]	; 0x28
    32bc:	ldr	r9, [sp, #44]	; 0x2c
    32c0:	ldr	sl, [sp, #48]	; 0x30
    32c4:	ldr	lr, [sp, #16]
    32c8:	add	sp, sp, #128	; 0x80
    32cc:	bx	lr
    32d0:	.word	0x000007cb
    32d4:	.word	0x00000a81
    32d8:	.word	0x00000239
    32dc:	.word	0x000009c2
    32e0:	.word	0x000006a4

000032e4 <coda_ascii_cursor_read_float>:
    32e4:	mov	ip, sp
    32e8:	sub	sp, sp, #24
    32ec:	str	ip, [sp]
    32f0:	str	lr, [sp, #4]
    32f4:	str	r4, [sp, #8]
    32f8:	mov	r4, r1
    32fc:	add	r1, sp, #16
    3300:	bl	3024 <coda_ascii_cursor_read_double>
    3304:	cmp	r0, #0
    3308:	beq	3314 <coda_ascii_cursor_read_float+0x30>
    330c:	mvn	r0, #0
    3310:	b	3324 <coda_ascii_cursor_read_float+0x40>
    3314:	vldr	d3, [sp, #16]
    3318:	vcvt.f32.f64	s4, d3
    331c:	vstr	s4, [r4]
    3320:	mov	r0, #0
    3324:	ldr	r4, [sp, #8]
    3328:	ldr	lr, [sp, #4]
    332c:	add	sp, sp, #24
    3330:	bx	lr

00003334 <coda_ascii_cursor_read_char>:
    3334:	mov	ip, sp
    3338:	sub	sp, sp, #40	; 0x28
    333c:	str	ip, [sp, #12]
    3340:	str	lr, [sp, #16]
    3344:	str	r4, [sp, #24]
    3348:	str	r5, [sp, #28]
    334c:	mov	r4, r1
    3350:	mov	r5, r0
    3354:	add	r1, sp, #32
    3358:	mov	r3, #0
    335c:	mov	r2, #8
    3360:	mov	r0, r5
    3364:	bl	b04 <get_bit_size_boundary>
    3368:	cmp	r0, #0
    336c:	beq	3378 <coda_ascii_cursor_read_char+0x44>
    3370:	mvn	r0, #0
    3374:	b	33e0 <coda_ascii_cursor_read_char+0xac>
    3378:	ldr	r3, [r5, #4]
    337c:	lsl	ip, r3, #4
    3380:	add	r3, r5, ip
    3384:	ldr	r2, [r3]
    3388:	ldr	ip, [r3, #4]
    338c:	mov	r1, #0
    3390:	and	r0, r2, #7
    3394:	orr	r1, r1, r0
    3398:	cmp	r1, #0
    339c:	beq	33b8 <coda_ascii_cursor_read_char+0x84>
    33a0:	movw	r0, #65236	; 0xfed4
    33a4:	movt	r0, #65535	; 0xffff
    33a8:	ldr	r1, [pc, #68]	; 33f4 <coda_ascii_cursor_read_char+0xc0>
    33ac:	bl	0 <coda_set_error>
    33b0:	mvn	r0, #0
    33b4:	b	33e0 <coda_ascii_cursor_read_char+0xac>
    33b8:	ldr	r0, [r5]
    33bc:	asr	r3, ip, #3
    33c0:	lsr	r1, r2, #3
    33c4:	orr	r2, r1, ip, lsl #29
    33c8:	mov	r1, #0
    33cc:	mov	ip, #1
    33d0:	str	r4, [sp, #8]
    33d4:	str	r1, [sp, #4]
    33d8:	str	ip, [sp]
    33dc:	bl	1f4 <read_bytes_in_bounds>
    33e0:	ldr	r4, [sp, #24]
    33e4:	ldr	r5, [sp, #28]
    33e8:	ldr	lr, [sp, #16]
    33ec:	add	sp, sp, #40	; 0x28
    33f0:	bx	lr
    33f4:	.word	0x0000044c

000033f8 <coda_ascii_cursor_read_string>:
    33f8:	mov	ip, sp
    33fc:	sub	sp, sp, #64	; 0x40
    3400:	str	ip, [sp, #12]
    3404:	str	lr, [sp, #16]
    3408:	str	r4, [sp, #24]
    340c:	str	r5, [sp, #28]
    3410:	str	r6, [sp, #32]
    3414:	str	r7, [sp, #36]	; 0x24
    3418:	str	r8, [sp, #40]	; 0x28
    341c:	str	r9, [sp, #44]	; 0x2c
    3420:	mov	r5, r2
    3424:	mov	r6, r1
    3428:	mov	r4, r0
    342c:	ldr	r1, [r4, #4]
    3430:	lsl	r1, r1, #4
    3434:	add	r2, r4, r1
    3438:	sub	lr, r2, #4096	; 0x1000
    343c:	ldr	r9, [lr, #4088]	; 0xff8
    3440:	ldr	r0, [r9]
    3444:	cmp	r0, #100	; 0x64
    3448:	blt	3450 <coda_ascii_cursor_read_string+0x58>
    344c:	ldr	r9, [r9, #4]
    3450:	ldr	r0, [r4, #4]
    3454:	lsl	ip, r0, #4
    3458:	add	r3, r4, ip
    345c:	ldr	r7, [r3]
    3460:	ldr	r8, [r3, #4]
    3464:	mov	r3, r7
    3468:	mov	r0, #0
    346c:	and	ip, r3, #7
    3470:	orr	r2, r0, ip
    3474:	cmp	r2, #0
    3478:	beq	3494 <coda_ascii_cursor_read_string+0x9c>
    347c:	movw	r0, #65236	; 0xfed4
    3480:	movt	r0, #65535	; 0xffff
    3484:	ldr	r1, [pc, #380]	; 3608 <coda_ascii_cursor_read_string+0x210>
    3488:	bl	0 <coda_set_error>
    348c:	mvn	r0, #0
    3490:	b	35e0 <coda_ascii_cursor_read_string+0x1e8>
    3494:	ldr	r2, [r9, #24]
    3498:	ldr	r3, [r9, #28]
    349c:	cmp	r3, #0
    34a0:	bge	3504 <coda_ascii_cursor_read_string+0x10c>
    34a4:	add	r1, sp, #48	; 0x30
    34a8:	mov	r0, r4
    34ac:	bl	1af4 <coda_ascii_cursor_get_bit_size>
    34b0:	cmp	r0, #0
    34b4:	beq	34c0 <coda_ascii_cursor_read_string+0xc8>
    34b8:	mvn	r0, #0
    34bc:	b	35e0 <coda_ascii_cursor_read_string+0x1e8>
    34c0:	ldr	r3, [sp, #48]	; 0x30
    34c4:	ldr	r0, [sp, #52]	; 0x34
    34c8:	mov	r1, #0
    34cc:	and	r2, r3, #7
    34d0:	orr	ip, r1, r2
    34d4:	cmp	ip, #0
    34d8:	beq	34f4 <coda_ascii_cursor_read_string+0xfc>
    34dc:	movw	r0, #65236	; 0xfed4
    34e0:	movt	r0, #65535	; 0xffff
    34e4:	ldr	r1, [pc, #280]	; 3604 <coda_ascii_cursor_read_string+0x20c>
    34e8:	bl	0 <coda_set_error>
    34ec:	mvn	r0, #0
    34f0:	b	35e0 <coda_ascii_cursor_read_string+0x1e8>
    34f4:	asr	ip, r0, #3
    34f8:	lsr	r1, r3, #3
    34fc:	orr	r9, r1, r0, lsl #29
    3500:	b	3534 <coda_ascii_cursor_read_string+0x13c>
    3504:	add	r1, sp, #56	; 0x38
    3508:	mov	r0, r4
    350c:	bl	b04 <get_bit_size_boundary>
    3510:	cmp	r0, #0
    3514:	beq	3520 <coda_ascii_cursor_read_string+0x128>
    3518:	mvn	r0, #0
    351c:	b	35e0 <coda_ascii_cursor_read_string+0x1e8>
    3520:	ldr	r1, [r9, #24]
    3524:	ldr	r2, [r9, #28]
    3528:	asr	ip, r2, #3
    352c:	lsr	r3, r1, #3
    3530:	orr	r9, r3, r2, lsl #29
    3534:	mov	r0, #0
    3538:	mov	r3, #1
    353c:	adds	lr, r9, r3
    3540:	adc	r1, ip, r0
    3544:	mov	r0, lr
    3548:	mov	r2, r5
    354c:	asr	r3, r2, #31
    3550:	cmp	r1, r3
    3554:	bne	3564 <coda_ascii_cursor_read_string+0x16c>
    3558:	cmp	r0, r2
    355c:	bhi	356c <coda_ascii_cursor_read_string+0x174>
    3560:	b	3574 <coda_ascii_cursor_read_string+0x17c>
    3564:	cmp	r1, r3
    3568:	ble	3574 <coda_ascii_cursor_read_string+0x17c>
    356c:	sub	r9, r5, #1
    3570:	asr	ip, r9, #31
    3574:	mov	r0, ip
    3578:	cmp	r0, #0
    357c:	bne	3590 <coda_ascii_cursor_read_string+0x198>
    3580:	mov	r0, r9
    3584:	cmp	r0, #0
    3588:	bhi	3598 <coda_ascii_cursor_read_string+0x1a0>
    358c:	b	35d4 <coda_ascii_cursor_read_string+0x1dc>
    3590:	cmp	r0, #0
    3594:	ble	35d4 <coda_ascii_cursor_read_string+0x1dc>
    3598:	ldr	r0, [r4]
    359c:	asr	r3, r8, #3
    35a0:	lsr	r1, r7, #3
    35a4:	orr	r2, r1, r8, lsl #29
    35a8:	str	r6, [sp, #8]
    35ac:	str	ip, [sp, #4]
    35b0:	str	r9, [sp]
    35b4:	bl	0 <read_bytes>
    35b8:	cmp	r0, #0
    35bc:	beq	35c8 <coda_ascii_cursor_read_string+0x1d0>
    35c0:	mvn	r0, #0
    35c4:	b	35e0 <coda_ascii_cursor_read_string+0x1e8>
    35c8:	mov	r0, #0
    35cc:	strb	r0, [r6, r9]
    35d0:	b	35dc <coda_ascii_cursor_read_string+0x1e4>
    35d4:	mov	r1, #0
    35d8:	strb	r1, [r6]
    35dc:	mov	r0, #0
    35e0:	ldr	r4, [sp, #24]
    35e4:	ldr	r5, [sp, #28]
    35e8:	ldr	r6, [sp, #32]
    35ec:	ldr	r7, [sp, #36]	; 0x24
    35f0:	ldr	r8, [sp, #40]	; 0x28
    35f4:	ldr	r9, [sp, #44]	; 0x2c
    35f8:	ldr	lr, [sp, #16]
    35fc:	add	sp, sp, #64	; 0x40
    3600:	bx	lr
    3604:	.word	0x00000386
    3608:	.word	0x00000562

0000360c <coda_ascii_cursor_read_bits>:
    360c:	mov	ip, sp
    3610:	sub	sp, sp, #48	; 0x30
    3614:	str	ip, [sp, #12]
    3618:	str	lr, [sp, #16]
    361c:	str	r4, [sp, #24]
    3620:	str	r5, [sp, #28]
    3624:	str	r6, [sp, #32]
    3628:	str	r7, [sp, #36]	; 0x24
    362c:	str	r8, [sp, #40]	; 0x28
    3630:	ldr	r5, [ip, #4]
    3634:	ldr	r4, [ip]
    3638:	mov	r6, #0
    363c:	and	ip, r4, #7
    3640:	orr	ip, r6, ip
    3644:	cmp	ip, #0
    3648:	beq	3660 <coda_ascii_cursor_read_bits+0x54>
    364c:	mvn	r0, #99	; 0x63
    3650:	ldr	r1, [pc, #168]	; 3700 <coda_ascii_cursor_read_bits+0xf4>
    3654:	bl	0 <coda_set_error>
    3658:	mvn	r0, #0
    365c:	b	36dc <coda_ascii_cursor_read_bits+0xd0>
    3660:	ldr	ip, [r0, #4]
    3664:	lsl	ip, ip, #4
    3668:	add	ip, r0, ip
    366c:	ldr	r8, [ip]
    3670:	ldr	r7, [ip, #4]
    3674:	adds	r6, r8, r2
    3678:	adc	ip, r7, r3
    367c:	mov	ip, #0
    3680:	and	r6, r6, #7
    3684:	orr	ip, ip, r6
    3688:	cmp	ip, #0
    368c:	beq	36a8 <coda_ascii_cursor_read_bits+0x9c>
    3690:	movw	r0, #65236	; 0xfed4
    3694:	movt	r0, #65535	; 0xffff
    3698:	ldr	r1, [pc, #92]	; 36fc <coda_ascii_cursor_read_bits+0xf0>
    369c:	bl	0 <coda_set_error>
    36a0:	mvn	r0, #0
    36a4:	b	36dc <coda_ascii_cursor_read_bits+0xd0>
    36a8:	ldr	r0, [r0]
    36ac:	adds	r2, r8, r2
    36b0:	adc	ip, r7, r3
    36b4:	asr	r3, ip, #3
    36b8:	lsr	r2, r2, #3
    36bc:	orr	r2, r2, ip, lsl #29
    36c0:	asr	r6, r5, #3
    36c4:	lsr	ip, r4, #3
    36c8:	orr	ip, ip, r5, lsl #29
    36cc:	str	r1, [sp, #8]
    36d0:	str	r6, [sp, #4]
    36d4:	str	ip, [sp]
    36d8:	bl	0 <read_bytes>
    36dc:	ldr	r4, [sp, #24]
    36e0:	ldr	r5, [sp, #28]
    36e4:	ldr	r6, [sp, #32]
    36e8:	ldr	r7, [sp, #36]	; 0x24
    36ec:	ldr	r8, [sp, #40]	; 0x28
    36f0:	ldr	lr, [sp, #16]
    36f4:	add	sp, sp, #48	; 0x30
    36f8:	bx	lr
    36fc:	.word	0x0000044c
    3700:	.word	0x00000705

00003704 <coda_ascii_cursor_read_bytes>:
    3704:	mov	ip, sp
    3708:	sub	sp, sp, #48	; 0x30
    370c:	str	ip, [sp, #12]
    3710:	str	lr, [sp, #16]
    3714:	str	r4, [sp, #24]
    3718:	str	r5, [sp, #28]
    371c:	str	r6, [sp, #32]
    3720:	str	r7, [sp, #36]	; 0x24
    3724:	str	r8, [sp, #40]	; 0x28
    3728:	ldr	r5, [ip, #4]
    372c:	ldr	r4, [ip]
    3730:	ldr	ip, [r0, #4]
    3734:	lsl	ip, ip, #4
    3738:	add	ip, r0, ip
    373c:	ldr	r7, [ip]
    3740:	ldr	r6, [ip, #4]
    3744:	mov	ip, #0
    3748:	and	r8, r7, #7
    374c:	orr	ip, ip, r8
    3750:	cmp	ip, #0
    3754:	beq	3770 <coda_ascii_cursor_read_bytes+0x6c>
    3758:	movw	r0, #65236	; 0xfed4
    375c:	movt	r0, #65535	; 0xffff
    3760:	ldr	r1, [pc, #80]	; 37b8 <coda_ascii_cursor_read_bytes+0xb4>
    3764:	bl	0 <coda_set_error>
    3768:	mvn	r0, #0
    376c:	b	3798 <coda_ascii_cursor_read_bytes+0x94>
    3770:	ldr	r0, [r0]
    3774:	asr	r8, r6, #3
    3778:	lsr	ip, r7, #3
    377c:	orr	ip, ip, r6, lsl #29
    3780:	adds	r2, ip, r2
    3784:	adc	r3, r8, r3
    3788:	str	r1, [sp, #8]
    378c:	str	r5, [sp, #4]
    3790:	str	r4, [sp]
    3794:	bl	0 <read_bytes>
    3798:	ldr	r4, [sp, #24]
    379c:	ldr	r5, [sp, #28]
    37a0:	ldr	r6, [sp, #32]
    37a4:	ldr	r7, [sp, #36]	; 0x24
    37a8:	ldr	r8, [sp, #40]	; 0x28
    37ac:	ldr	lr, [sp, #16]
    37b0:	add	sp, sp, #48	; 0x30
    37b4:	bx	lr
    37b8:	.word	0x0000044c

000037bc <coda_ascii_cursor_read_int8_array>:
    37bc:	mov	ip, sp
    37c0:	sub	sp, sp, #32
    37c4:	str	ip, [sp, #4]
    37c8:	str	lr, [sp, #8]
    37cc:	str	r4, [sp, #16]
    37d0:	str	r5, [sp, #20]
    37d4:	str	r6, [sp, #24]
    37d8:	mov	r6, r2
    37dc:	mov	r4, r1
    37e0:	mov	r5, r0
    37e4:	ldr	r1, [r5, #4]
    37e8:	lsl	r3, r1, #4
    37ec:	add	r1, r5, r3
    37f0:	sub	lr, r1, #4096	; 0x1000
    37f4:	ldr	r0, [lr, #4088]	; 0xff8
    37f8:	ldr	r1, [r0]
    37fc:	cmp	r1, #100	; 0x64
    3800:	blt	3808 <coda_ascii_cursor_read_int8_array+0x4c>
    3804:	ldr	r0, [r0, #4]
    3808:	ldr	ip, [r0, #40]	; 0x28
    380c:	ldr	r2, [ip]
    3810:	cmp	r2, #0
    3814:	beq	382c <coda_ascii_cursor_read_int8_array+0x70>
    3818:	ldr	r0, [pc, #132]	; 38a4 <coda_ascii_cursor_read_int8_array+0xe8>
    381c:	ldr	r1, [pc, #132]	; 38a8 <coda_ascii_cursor_read_int8_array+0xec>
    3820:	movw	r2, #1464	; 0x5b8
    3824:	ldr	r3, [pc, #112]	; 389c <coda_ascii_cursor_read_int8_array+0xe0>
    3828:	bl	0 <__assert_fail>
    382c:	ldr	r1, [pc, #108]	; 38a0 <coda_ascii_cursor_read_int8_array+0xe4>
    3830:	mov	r3, #1
    3834:	mov	r0, #0
    3838:	str	r0, [sp]
    383c:	mov	r2, r4
    3840:	mov	r0, r5
    3844:	bl	2d8 <read_array>
    3848:	cmp	r0, #0
    384c:	beq	3858 <coda_ascii_cursor_read_int8_array+0x9c>
    3850:	mvn	r0, #0
    3854:	b	3884 <coda_ascii_cursor_read_int8_array+0xc8>
    3858:	cmp	r6, #0
    385c:	beq	3880 <coda_ascii_cursor_read_int8_array+0xc4>
    3860:	mov	r2, #1
    3864:	mov	r1, r4
    3868:	mov	r0, r5
    386c:	bl	678 <transpose_array>
    3870:	cmp	r0, #0
    3874:	beq	3880 <coda_ascii_cursor_read_int8_array+0xc4>
    3878:	mvn	r0, #0
    387c:	b	3884 <coda_ascii_cursor_read_int8_array+0xc8>
    3880:	mov	r0, #0
    3884:	ldr	r4, [sp, #16]
    3888:	ldr	r5, [sp, #20]
    388c:	ldr	r6, [sp, #24]
    3890:	ldr	lr, [sp, #8]
    3894:	add	sp, sp, #32
    3898:	bx	lr
    389c:	.word	0x00000a9f
    38a0:	.word	0x00000000
    38a4:	.word	0x0000027e
    38a8:	.word	0x000006a4

000038ac <coda_ascii_cursor_read_uint8_array>:
    38ac:	mov	ip, sp
    38b0:	sub	sp, sp, #32
    38b4:	str	ip, [sp, #4]
    38b8:	str	lr, [sp, #8]
    38bc:	str	r4, [sp, #16]
    38c0:	str	r5, [sp, #20]
    38c4:	str	r6, [sp, #24]
    38c8:	mov	r6, r2
    38cc:	mov	r4, r1
    38d0:	mov	r5, r0
    38d4:	ldr	r1, [r5, #4]
    38d8:	lsl	r3, r1, #4
    38dc:	add	r1, r5, r3
    38e0:	sub	lr, r1, #4096	; 0x1000
    38e4:	ldr	r0, [lr, #4088]	; 0xff8
    38e8:	ldr	r1, [r0]
    38ec:	cmp	r1, #100	; 0x64
    38f0:	blt	38f8 <coda_ascii_cursor_read_uint8_array+0x4c>
    38f4:	ldr	r0, [r0, #4]
    38f8:	ldr	ip, [r0, #40]	; 0x28
    38fc:	ldr	r2, [ip]
    3900:	cmp	r2, #0
    3904:	beq	391c <coda_ascii_cursor_read_uint8_array+0x70>
    3908:	ldr	r0, [pc, #128]	; 3990 <coda_ascii_cursor_read_uint8_array+0xe4>
    390c:	ldr	r1, [pc, #128]	; 3994 <coda_ascii_cursor_read_uint8_array+0xe8>
    3910:	movw	r2, #1484	; 0x5cc
    3914:	ldr	r3, [pc, #124]	; 3998 <coda_ascii_cursor_read_uint8_array+0xec>
    3918:	bl	0 <__assert_fail>
    391c:	ldr	r1, [pc, #104]	; 398c <coda_ascii_cursor_read_uint8_array+0xe0>
    3920:	mov	r3, #1
    3924:	mov	r0, #0
    3928:	str	r0, [sp]
    392c:	mov	r2, r4
    3930:	mov	r0, r5
    3934:	bl	2d8 <read_array>
    3938:	cmp	r0, #0
    393c:	beq	3948 <coda_ascii_cursor_read_uint8_array+0x9c>
    3940:	mvn	r0, #0
    3944:	b	3974 <coda_ascii_cursor_read_uint8_array+0xc8>
    3948:	cmp	r6, #0
    394c:	beq	3970 <coda_ascii_cursor_read_uint8_array+0xc4>
    3950:	mov	r2, #1
    3954:	mov	r1, r4
    3958:	mov	r0, r5
    395c:	bl	678 <transpose_array>
    3960:	cmp	r0, #0
    3964:	beq	3970 <coda_ascii_cursor_read_uint8_array+0xc4>
    3968:	mvn	r0, #0
    396c:	b	3974 <coda_ascii_cursor_read_uint8_array+0xc8>
    3970:	mov	r0, #0
    3974:	ldr	r4, [sp, #16]
    3978:	ldr	r5, [sp, #20]
    397c:	ldr	r6, [sp, #24]
    3980:	ldr	lr, [sp, #8]
    3984:	add	sp, sp, #32
    3988:	bx	lr
    398c:	.word	0x00000000
    3990:	.word	0x0000027e
    3994:	.word	0x000006a4
    3998:	.word	0x00000ac1

0000399c <coda_ascii_cursor_read_int16_array>:
    399c:	mov	ip, sp
    39a0:	sub	sp, sp, #32
    39a4:	str	ip, [sp, #4]
    39a8:	str	lr, [sp, #8]
    39ac:	str	r4, [sp, #16]
    39b0:	str	r5, [sp, #20]
    39b4:	str	r6, [sp, #24]
    39b8:	mov	r6, r2
    39bc:	mov	r4, r1
    39c0:	mov	r5, r0
    39c4:	ldr	r1, [r5, #4]
    39c8:	lsl	r3, r1, #4
    39cc:	add	r1, r5, r3
    39d0:	sub	lr, r1, #4096	; 0x1000
    39d4:	ldr	r0, [lr, #4088]	; 0xff8
    39d8:	ldr	r1, [r0]
    39dc:	cmp	r1, #100	; 0x64
    39e0:	blt	39e8 <coda_ascii_cursor_read_int16_array+0x4c>
    39e4:	ldr	r0, [r0, #4]
    39e8:	ldr	ip, [r0, #40]	; 0x28
    39ec:	ldr	r2, [ip]
    39f0:	cmp	r2, #0
    39f4:	beq	3a0c <coda_ascii_cursor_read_int16_array+0x70>
    39f8:	ldr	r0, [pc, #128]	; 3a80 <coda_ascii_cursor_read_int16_array+0xe4>
    39fc:	ldr	r1, [pc, #132]	; 3a88 <coda_ascii_cursor_read_int16_array+0xec>
    3a00:	mov	r2, #1504	; 0x5e0
    3a04:	ldr	r3, [pc, #120]	; 3a84 <coda_ascii_cursor_read_int16_array+0xe8>
    3a08:	bl	0 <__assert_fail>
    3a0c:	ldr	r1, [pc, #104]	; 3a7c <coda_ascii_cursor_read_int16_array+0xe0>
    3a10:	mov	r3, #2
    3a14:	mov	r0, #0
    3a18:	str	r0, [sp]
    3a1c:	mov	r2, r4
    3a20:	mov	r0, r5
    3a24:	bl	2d8 <read_array>
    3a28:	cmp	r0, #0
    3a2c:	beq	3a38 <coda_ascii_cursor_read_int16_array+0x9c>
    3a30:	mvn	r0, #0
    3a34:	b	3a64 <coda_ascii_cursor_read_int16_array+0xc8>
    3a38:	cmp	r6, #0
    3a3c:	beq	3a60 <coda_ascii_cursor_read_int16_array+0xc4>
    3a40:	mov	r2, #2
    3a44:	mov	r1, r4
    3a48:	mov	r0, r5
    3a4c:	bl	678 <transpose_array>
    3a50:	cmp	r0, #0
    3a54:	beq	3a60 <coda_ascii_cursor_read_int16_array+0xc4>
    3a58:	mvn	r0, #0
    3a5c:	b	3a64 <coda_ascii_cursor_read_int16_array+0xc8>
    3a60:	mov	r0, #0
    3a64:	ldr	r4, [sp, #16]
    3a68:	ldr	r5, [sp, #20]
    3a6c:	ldr	r6, [sp, #24]
    3a70:	ldr	lr, [sp, #8]
    3a74:	add	sp, sp, #32
    3a78:	bx	lr
    3a7c:	.word	0x00000000
    3a80:	.word	0x0000027e
    3a84:	.word	0x00000ae4
    3a88:	.word	0x000006a4

00003a8c <coda_ascii_cursor_read_uint16_array>:
    3a8c:	mov	ip, sp
    3a90:	sub	sp, sp, #32
    3a94:	str	ip, [sp, #4]
    3a98:	str	lr, [sp, #8]
    3a9c:	str	r4, [sp, #16]
    3aa0:	str	r5, [sp, #20]
    3aa4:	str	r6, [sp, #24]
    3aa8:	mov	r6, r2
    3aac:	mov	r4, r1
    3ab0:	mov	r5, r0
    3ab4:	ldr	r1, [r5, #4]
    3ab8:	lsl	r3, r1, #4
    3abc:	add	r1, r5, r3
    3ac0:	sub	lr, r1, #4096	; 0x1000
    3ac4:	ldr	r0, [lr, #4088]	; 0xff8
    3ac8:	ldr	r1, [r0]
    3acc:	cmp	r1, #100	; 0x64
    3ad0:	blt	3ad8 <coda_ascii_cursor_read_uint16_array+0x4c>
    3ad4:	ldr	r0, [r0, #4]
    3ad8:	ldr	ip, [r0, #40]	; 0x28
    3adc:	ldr	r2, [ip]
    3ae0:	cmp	r2, #0
    3ae4:	beq	3afc <coda_ascii_cursor_read_uint16_array+0x70>
    3ae8:	ldr	r0, [pc, #132]	; 3b74 <coda_ascii_cursor_read_uint16_array+0xe8>
    3aec:	ldr	r1, [pc, #132]	; 3b78 <coda_ascii_cursor_read_uint16_array+0xec>
    3af0:	movw	r2, #1524	; 0x5f4
    3af4:	ldr	r3, [pc, #112]	; 3b6c <coda_ascii_cursor_read_uint16_array+0xe0>
    3af8:	bl	0 <__assert_fail>
    3afc:	ldr	r1, [pc, #108]	; 3b70 <coda_ascii_cursor_read_uint16_array+0xe4>
    3b00:	mov	r3, #2
    3b04:	mov	r0, #0
    3b08:	str	r0, [sp]
    3b0c:	mov	r2, r4
    3b10:	mov	r0, r5
    3b14:	bl	2d8 <read_array>
    3b18:	cmp	r0, #0
    3b1c:	beq	3b28 <coda_ascii_cursor_read_uint16_array+0x9c>
    3b20:	mvn	r0, #0
    3b24:	b	3b54 <coda_ascii_cursor_read_uint16_array+0xc8>
    3b28:	cmp	r6, #0
    3b2c:	beq	3b50 <coda_ascii_cursor_read_uint16_array+0xc4>
    3b30:	mov	r2, #2
    3b34:	mov	r1, r4
    3b38:	mov	r0, r5
    3b3c:	bl	678 <transpose_array>
    3b40:	cmp	r0, #0
    3b44:	beq	3b50 <coda_ascii_cursor_read_uint16_array+0xc4>
    3b48:	mvn	r0, #0
    3b4c:	b	3b54 <coda_ascii_cursor_read_uint16_array+0xc8>
    3b50:	mov	r0, #0
    3b54:	ldr	r4, [sp, #16]
    3b58:	ldr	r5, [sp, #20]
    3b5c:	ldr	r6, [sp, #24]
    3b60:	ldr	lr, [sp, #8]
    3b64:	add	sp, sp, #32
    3b68:	bx	lr
    3b6c:	.word	0x00000b07
    3b70:	.word	0x00000000
    3b74:	.word	0x0000027e
    3b78:	.word	0x000006a4

00003b7c <coda_ascii_cursor_read_int32_array>:
    3b7c:	mov	ip, sp
    3b80:	sub	sp, sp, #32
    3b84:	str	ip, [sp, #4]
    3b88:	str	lr, [sp, #8]
    3b8c:	str	r4, [sp, #16]
    3b90:	str	r5, [sp, #20]
    3b94:	str	r6, [sp, #24]
    3b98:	mov	r6, r2
    3b9c:	mov	r4, r1
    3ba0:	mov	r5, r0
    3ba4:	ldr	r1, [r5, #4]
    3ba8:	lsl	r3, r1, #4
    3bac:	add	r1, r5, r3
    3bb0:	sub	lr, r1, #4096	; 0x1000
    3bb4:	ldr	r0, [lr, #4088]	; 0xff8
    3bb8:	ldr	r1, [r0]
    3bbc:	cmp	r1, #100	; 0x64
    3bc0:	blt	3bc8 <coda_ascii_cursor_read_int32_array+0x4c>
    3bc4:	ldr	r0, [r0, #4]
    3bc8:	ldr	ip, [r0, #40]	; 0x28
    3bcc:	ldr	r2, [ip]
    3bd0:	cmp	r2, #0
    3bd4:	beq	3bec <coda_ascii_cursor_read_int32_array+0x70>
    3bd8:	ldr	r0, [pc, #132]	; 3c64 <coda_ascii_cursor_read_int32_array+0xe8>
    3bdc:	ldr	r1, [pc, #132]	; 3c68 <coda_ascii_cursor_read_int32_array+0xec>
    3be0:	movw	r2, #1544	; 0x608
    3be4:	ldr	r3, [pc, #116]	; 3c60 <coda_ascii_cursor_read_int32_array+0xe4>
    3be8:	bl	0 <__assert_fail>
    3bec:	ldr	r1, [pc, #104]	; 3c5c <coda_ascii_cursor_read_int32_array+0xe0>
    3bf0:	mov	r3, #4
    3bf4:	mov	r0, #0
    3bf8:	str	r0, [sp]
    3bfc:	mov	r2, r4
    3c00:	mov	r0, r5
    3c04:	bl	2d8 <read_array>
    3c08:	cmp	r0, #0
    3c0c:	beq	3c18 <coda_ascii_cursor_read_int32_array+0x9c>
    3c10:	mvn	r0, #0
    3c14:	b	3c44 <coda_ascii_cursor_read_int32_array+0xc8>
    3c18:	cmp	r6, #0
    3c1c:	beq	3c40 <coda_ascii_cursor_read_int32_array+0xc4>
    3c20:	mov	r2, #4
    3c24:	mov	r1, r4
    3c28:	mov	r0, r5
    3c2c:	bl	678 <transpose_array>
    3c30:	cmp	r0, #0
    3c34:	beq	3c40 <coda_ascii_cursor_read_int32_array+0xc4>
    3c38:	mvn	r0, #0
    3c3c:	b	3c44 <coda_ascii_cursor_read_int32_array+0xc8>
    3c40:	mov	r0, #0
    3c44:	ldr	r4, [sp, #16]
    3c48:	ldr	r5, [sp, #20]
    3c4c:	ldr	r6, [sp, #24]
    3c50:	ldr	lr, [sp, #8]
    3c54:	add	sp, sp, #32
    3c58:	bx	lr
    3c5c:	.word	0x00000000
    3c60:	.word	0x00000b2b
    3c64:	.word	0x0000027e
    3c68:	.word	0x000006a4

00003c6c <coda_ascii_cursor_read_uint32_array>:
    3c6c:	mov	ip, sp
    3c70:	sub	sp, sp, #32
    3c74:	str	ip, [sp, #4]
    3c78:	str	lr, [sp, #8]
    3c7c:	str	r4, [sp, #16]
    3c80:	str	r5, [sp, #20]
    3c84:	str	r6, [sp, #24]
    3c88:	mov	r6, r2
    3c8c:	mov	r4, r1
    3c90:	mov	r5, r0
    3c94:	ldr	r1, [r5, #4]
    3c98:	lsl	r3, r1, #4
    3c9c:	add	r1, r5, r3
    3ca0:	sub	lr, r1, #4096	; 0x1000
    3ca4:	ldr	r0, [lr, #4088]	; 0xff8
    3ca8:	ldr	r1, [r0]
    3cac:	cmp	r1, #100	; 0x64
    3cb0:	blt	3cb8 <coda_ascii_cursor_read_uint32_array+0x4c>
    3cb4:	ldr	r0, [r0, #4]
    3cb8:	ldr	ip, [r0, #40]	; 0x28
    3cbc:	ldr	r2, [ip]
    3cc0:	cmp	r2, #0
    3cc4:	beq	3cdc <coda_ascii_cursor_read_uint32_array+0x70>
    3cc8:	ldr	r0, [pc, #132]	; 3d54 <coda_ascii_cursor_read_uint32_array+0xe8>
    3ccc:	ldr	r1, [pc, #132]	; 3d58 <coda_ascii_cursor_read_uint32_array+0xec>
    3cd0:	movw	r2, #1564	; 0x61c
    3cd4:	ldr	r3, [pc, #112]	; 3d4c <coda_ascii_cursor_read_uint32_array+0xe0>
    3cd8:	bl	0 <__assert_fail>
    3cdc:	ldr	r1, [pc, #108]	; 3d50 <coda_ascii_cursor_read_uint32_array+0xe4>
    3ce0:	mov	r3, #4
    3ce4:	mov	r0, #0
    3ce8:	str	r0, [sp]
    3cec:	mov	r2, r4
    3cf0:	mov	r0, r5
    3cf4:	bl	2d8 <read_array>
    3cf8:	cmp	r0, #0
    3cfc:	beq	3d08 <coda_ascii_cursor_read_uint32_array+0x9c>
    3d00:	mvn	r0, #0
    3d04:	b	3d34 <coda_ascii_cursor_read_uint32_array+0xc8>
    3d08:	cmp	r6, #0
    3d0c:	beq	3d30 <coda_ascii_cursor_read_uint32_array+0xc4>
    3d10:	mov	r2, #4
    3d14:	mov	r1, r4
    3d18:	mov	r0, r5
    3d1c:	bl	678 <transpose_array>
    3d20:	cmp	r0, #0
    3d24:	beq	3d30 <coda_ascii_cursor_read_uint32_array+0xc4>
    3d28:	mvn	r0, #0
    3d2c:	b	3d34 <coda_ascii_cursor_read_uint32_array+0xc8>
    3d30:	mov	r0, #0
    3d34:	ldr	r4, [sp, #16]
    3d38:	ldr	r5, [sp, #20]
    3d3c:	ldr	r6, [sp, #24]
    3d40:	ldr	lr, [sp, #8]
    3d44:	add	sp, sp, #32
    3d48:	bx	lr
    3d4c:	.word	0x00000b4e
    3d50:	.word	0x00000000
    3d54:	.word	0x0000027e
    3d58:	.word	0x000006a4

00003d5c <coda_ascii_cursor_read_int64_array>:
    3d5c:	mov	ip, sp
    3d60:	sub	sp, sp, #32
    3d64:	str	ip, [sp, #4]
    3d68:	str	lr, [sp, #8]
    3d6c:	str	r4, [sp, #16]
    3d70:	str	r5, [sp, #20]
    3d74:	str	r6, [sp, #24]
    3d78:	mov	r6, r2
    3d7c:	mov	r4, r1
    3d80:	mov	r5, r0
    3d84:	ldr	r1, [r5, #4]
    3d88:	lsl	r3, r1, #4
    3d8c:	add	r1, r5, r3
    3d90:	sub	lr, r1, #4096	; 0x1000
    3d94:	ldr	r0, [lr, #4088]	; 0xff8
    3d98:	ldr	r1, [r0]
    3d9c:	cmp	r1, #100	; 0x64
    3da0:	blt	3da8 <coda_ascii_cursor_read_int64_array+0x4c>
    3da4:	ldr	r0, [r0, #4]
    3da8:	ldr	ip, [r0, #40]	; 0x28
    3dac:	ldr	r2, [ip]
    3db0:	cmp	r2, #0
    3db4:	beq	3dcc <coda_ascii_cursor_read_int64_array+0x70>
    3db8:	ldr	r0, [pc, #128]	; 3e40 <coda_ascii_cursor_read_int64_array+0xe4>
    3dbc:	ldr	r1, [pc, #128]	; 3e44 <coda_ascii_cursor_read_int64_array+0xe8>
    3dc0:	mov	r2, #1584	; 0x630
    3dc4:	ldr	r3, [pc, #124]	; 3e48 <coda_ascii_cursor_read_int64_array+0xec>
    3dc8:	bl	0 <__assert_fail>
    3dcc:	ldr	r1, [pc, #104]	; 3e3c <coda_ascii_cursor_read_int64_array+0xe0>
    3dd0:	mov	r3, #8
    3dd4:	mov	r0, #0
    3dd8:	str	r0, [sp]
    3ddc:	mov	r2, r4
    3de0:	mov	r0, r5
    3de4:	bl	2d8 <read_array>
    3de8:	cmp	r0, #0
    3dec:	beq	3df8 <coda_ascii_cursor_read_int64_array+0x9c>
    3df0:	mvn	r0, #0
    3df4:	b	3e24 <coda_ascii_cursor_read_int64_array+0xc8>
    3df8:	cmp	r6, #0
    3dfc:	beq	3e20 <coda_ascii_cursor_read_int64_array+0xc4>
    3e00:	mov	r2, #4
    3e04:	mov	r1, r4
    3e08:	mov	r0, r5
    3e0c:	bl	678 <transpose_array>
    3e10:	cmp	r0, #0
    3e14:	beq	3e20 <coda_ascii_cursor_read_int64_array+0xc4>
    3e18:	mvn	r0, #0
    3e1c:	b	3e24 <coda_ascii_cursor_read_int64_array+0xc8>
    3e20:	mov	r0, #0
    3e24:	ldr	r4, [sp, #16]
    3e28:	ldr	r5, [sp, #20]
    3e2c:	ldr	r6, [sp, #24]
    3e30:	ldr	lr, [sp, #8]
    3e34:	add	sp, sp, #32
    3e38:	bx	lr
    3e3c:	.word	0x00000000
    3e40:	.word	0x0000027e
    3e44:	.word	0x000006a4
    3e48:	.word	0x00000b72

00003e4c <coda_ascii_cursor_read_uint64_array>:
    3e4c:	mov	ip, sp
    3e50:	sub	sp, sp, #32
    3e54:	str	ip, [sp, #4]
    3e58:	str	lr, [sp, #8]
    3e5c:	str	r4, [sp, #16]
    3e60:	str	r5, [sp, #20]
    3e64:	str	r6, [sp, #24]
    3e68:	mov	r6, r2
    3e6c:	mov	r4, r1
    3e70:	mov	r5, r0
    3e74:	ldr	r1, [r5, #4]
    3e78:	lsl	r3, r1, #4
    3e7c:	add	r1, r5, r3
    3e80:	sub	lr, r1, #4096	; 0x1000
    3e84:	ldr	r0, [lr, #4088]	; 0xff8
    3e88:	ldr	r1, [r0]
    3e8c:	cmp	r1, #100	; 0x64
    3e90:	blt	3e98 <coda_ascii_cursor_read_uint64_array+0x4c>
    3e94:	ldr	r0, [r0, #4]
    3e98:	ldr	ip, [r0, #40]	; 0x28
    3e9c:	ldr	r2, [ip]
    3ea0:	cmp	r2, #0
    3ea4:	beq	3ebc <coda_ascii_cursor_read_uint64_array+0x70>
    3ea8:	ldr	r0, [pc, #132]	; 3f34 <coda_ascii_cursor_read_uint64_array+0xe8>
    3eac:	ldr	r1, [pc, #132]	; 3f38 <coda_ascii_cursor_read_uint64_array+0xec>
    3eb0:	movw	r2, #1604	; 0x644
    3eb4:	ldr	r3, [pc, #112]	; 3f2c <coda_ascii_cursor_read_uint64_array+0xe0>
    3eb8:	bl	0 <__assert_fail>
    3ebc:	ldr	r1, [pc, #108]	; 3f30 <coda_ascii_cursor_read_uint64_array+0xe4>
    3ec0:	mov	r3, #8
    3ec4:	mov	r0, #0
    3ec8:	str	r0, [sp]
    3ecc:	mov	r2, r4
    3ed0:	mov	r0, r5
    3ed4:	bl	2d8 <read_array>
    3ed8:	cmp	r0, #0
    3edc:	beq	3ee8 <coda_ascii_cursor_read_uint64_array+0x9c>
    3ee0:	mvn	r0, #0
    3ee4:	b	3f14 <coda_ascii_cursor_read_uint64_array+0xc8>
    3ee8:	cmp	r6, #0
    3eec:	beq	3f10 <coda_ascii_cursor_read_uint64_array+0xc4>
    3ef0:	mov	r2, #8
    3ef4:	mov	r1, r4
    3ef8:	mov	r0, r5
    3efc:	bl	678 <transpose_array>
    3f00:	cmp	r0, #0
    3f04:	beq	3f10 <coda_ascii_cursor_read_uint64_array+0xc4>
    3f08:	mvn	r0, #0
    3f0c:	b	3f14 <coda_ascii_cursor_read_uint64_array+0xc8>
    3f10:	mov	r0, #0
    3f14:	ldr	r4, [sp, #16]
    3f18:	ldr	r5, [sp, #20]
    3f1c:	ldr	r6, [sp, #24]
    3f20:	ldr	lr, [sp, #8]
    3f24:	add	sp, sp, #32
    3f28:	bx	lr
    3f2c:	.word	0x00000b95
    3f30:	.word	0x00000000
    3f34:	.word	0x0000027e
    3f38:	.word	0x000006a4

00003f3c <coda_ascii_cursor_read_float_array>:
    3f3c:	mov	ip, sp
    3f40:	sub	sp, sp, #32
    3f44:	str	ip, [sp, #4]
    3f48:	str	lr, [sp, #8]
    3f4c:	str	r4, [sp, #16]
    3f50:	str	r5, [sp, #20]
    3f54:	str	r6, [sp, #24]
    3f58:	mov	r6, r2
    3f5c:	mov	r4, r1
    3f60:	mov	r5, r0
    3f64:	ldr	r1, [r5, #4]
    3f68:	lsl	r3, r1, #4
    3f6c:	add	r1, r5, r3
    3f70:	sub	lr, r1, #4096	; 0x1000
    3f74:	ldr	r0, [lr, #4088]	; 0xff8
    3f78:	ldr	r1, [r0]
    3f7c:	cmp	r1, #100	; 0x64
    3f80:	blt	3f88 <coda_ascii_cursor_read_float_array+0x4c>
    3f84:	ldr	r0, [r0, #4]
    3f88:	ldr	ip, [r0, #40]	; 0x28
    3f8c:	ldr	r2, [ip]
    3f90:	cmp	r2, #0
    3f94:	beq	3fac <coda_ascii_cursor_read_float_array+0x70>
    3f98:	ldr	r0, [pc, #128]	; 4020 <coda_ascii_cursor_read_float_array+0xe4>
    3f9c:	ldr	r1, [pc, #132]	; 4028 <coda_ascii_cursor_read_float_array+0xec>
    3fa0:	movw	r2, #1624	; 0x658
    3fa4:	ldr	r3, [pc, #112]	; 401c <coda_ascii_cursor_read_float_array+0xe0>
    3fa8:	bl	0 <__assert_fail>
    3fac:	ldr	r1, [pc, #112]	; 4024 <coda_ascii_cursor_read_float_array+0xe8>
    3fb0:	mov	r3, #4
    3fb4:	mov	r0, #0
    3fb8:	str	r0, [sp]
    3fbc:	mov	r2, r4
    3fc0:	mov	r0, r5
    3fc4:	bl	2d8 <read_array>
    3fc8:	cmp	r0, #0
    3fcc:	beq	3fd8 <coda_ascii_cursor_read_float_array+0x9c>
    3fd0:	mvn	r0, #0
    3fd4:	b	4004 <coda_ascii_cursor_read_float_array+0xc8>
    3fd8:	cmp	r6, #0
    3fdc:	beq	4000 <coda_ascii_cursor_read_float_array+0xc4>
    3fe0:	mov	r2, #4
    3fe4:	mov	r1, r4
    3fe8:	mov	r0, r5
    3fec:	bl	678 <transpose_array>
    3ff0:	cmp	r0, #0
    3ff4:	beq	4000 <coda_ascii_cursor_read_float_array+0xc4>
    3ff8:	mvn	r0, #0
    3ffc:	b	4004 <coda_ascii_cursor_read_float_array+0xc8>
    4000:	mov	r0, #0
    4004:	ldr	r4, [sp, #16]
    4008:	ldr	r5, [sp, #20]
    400c:	ldr	r6, [sp, #24]
    4010:	ldr	lr, [sp, #8]
    4014:	add	sp, sp, #32
    4018:	bx	lr
    401c:	.word	0x00000bb9
    4020:	.word	0x0000027e
    4024:	.word	0x00000000
    4028:	.word	0x000006a4

0000402c <coda_ascii_cursor_read_double_array>:
    402c:	mov	ip, sp
    4030:	sub	sp, sp, #32
    4034:	str	ip, [sp, #4]
    4038:	str	lr, [sp, #8]
    403c:	str	r4, [sp, #16]
    4040:	str	r5, [sp, #20]
    4044:	str	r6, [sp, #24]
    4048:	mov	r6, r2
    404c:	mov	r4, r1
    4050:	mov	r5, r0
    4054:	ldr	r1, [r5, #4]
    4058:	lsl	r3, r1, #4
    405c:	add	r1, r5, r3
    4060:	sub	lr, r1, #4096	; 0x1000
    4064:	ldr	r0, [lr, #4088]	; 0xff8
    4068:	ldr	r1, [r0]
    406c:	cmp	r1, #100	; 0x64
    4070:	blt	4078 <coda_ascii_cursor_read_double_array+0x4c>
    4074:	ldr	r0, [r0, #4]
    4078:	ldr	ip, [r0, #40]	; 0x28
    407c:	ldr	r2, [ip]
    4080:	cmp	r2, #0
    4084:	beq	409c <coda_ascii_cursor_read_double_array+0x70>
    4088:	ldr	r0, [pc, #124]	; 410c <coda_ascii_cursor_read_double_array+0xe0>
    408c:	ldr	r1, [pc, #124]	; 4110 <coda_ascii_cursor_read_double_array+0xe4>
    4090:	movw	r2, #1644	; 0x66c
    4094:	ldr	r3, [pc, #120]	; 4114 <coda_ascii_cursor_read_double_array+0xe8>
    4098:	bl	0 <__assert_fail>
    409c:	ldr	r1, [pc, #116]	; 4118 <coda_ascii_cursor_read_double_array+0xec>
    40a0:	mov	r3, #8
    40a4:	mov	r0, #0
    40a8:	str	r0, [sp]
    40ac:	mov	r2, r4
    40b0:	mov	r0, r5
    40b4:	bl	2d8 <read_array>
    40b8:	cmp	r0, #0
    40bc:	beq	40c8 <coda_ascii_cursor_read_double_array+0x9c>
    40c0:	mvn	r0, #0
    40c4:	b	40f4 <coda_ascii_cursor_read_double_array+0xc8>
    40c8:	cmp	r6, #0
    40cc:	beq	40f0 <coda_ascii_cursor_read_double_array+0xc4>
    40d0:	mov	r2, #8
    40d4:	mov	r1, r4
    40d8:	mov	r0, r5
    40dc:	bl	678 <transpose_array>
    40e0:	cmp	r0, #0
    40e4:	beq	40f0 <coda_ascii_cursor_read_double_array+0xc4>
    40e8:	mvn	r0, #0
    40ec:	b	40f4 <coda_ascii_cursor_read_double_array+0xc8>
    40f0:	mov	r0, #0
    40f4:	ldr	r4, [sp, #16]
    40f8:	ldr	r5, [sp, #20]
    40fc:	ldr	r6, [sp, #24]
    4100:	ldr	lr, [sp, #8]
    4104:	add	sp, sp, #32
    4108:	bx	lr
    410c:	.word	0x0000027e
    4110:	.word	0x000006a4
    4114:	.word	0x00000bdc
    4118:	.word	0x00000000

0000411c <coda_ascii_cursor_read_char_array>:
    411c:	mov	ip, sp
    4120:	sub	sp, sp, #32
    4124:	str	ip, [sp, #4]
    4128:	str	lr, [sp, #8]
    412c:	str	r4, [sp, #16]
    4130:	str	r5, [sp, #20]
    4134:	str	r6, [sp, #24]
    4138:	mov	r6, r2
    413c:	mov	r4, r1
    4140:	mov	r5, r0
    4144:	ldr	r1, [r5, #4]
    4148:	lsl	r3, r1, #4
    414c:	add	r1, r5, r3
    4150:	sub	lr, r1, #4096	; 0x1000
    4154:	ldr	r0, [lr, #4088]	; 0xff8
    4158:	ldr	r1, [r0]
    415c:	cmp	r1, #100	; 0x64
    4160:	blt	4168 <coda_ascii_cursor_read_char_array+0x4c>
    4164:	ldr	r0, [r0, #4]
    4168:	ldr	ip, [r0, #40]	; 0x28
    416c:	ldr	r2, [ip]
    4170:	cmp	r2, #0
    4174:	beq	418c <coda_ascii_cursor_read_char_array+0x70>
    4178:	ldr	r0, [pc, #132]	; 4204 <coda_ascii_cursor_read_char_array+0xe8>
    417c:	ldr	r1, [pc, #132]	; 4208 <coda_ascii_cursor_read_char_array+0xec>
    4180:	mov	r2, #1664	; 0x680
    4184:	ldr	r3, [pc, #116]	; 4200 <coda_ascii_cursor_read_char_array+0xe4>
    4188:	bl	0 <__assert_fail>
    418c:	ldr	r1, [pc, #104]	; 41fc <coda_ascii_cursor_read_char_array+0xe0>
    4190:	mov	r3, #1
    4194:	mov	r0, #0
    4198:	str	r0, [sp]
    419c:	mov	r2, r4
    41a0:	mov	r0, r5
    41a4:	bl	2d8 <read_array>
    41a8:	cmp	r0, #0
    41ac:	beq	41b8 <coda_ascii_cursor_read_char_array+0x9c>
    41b0:	mvn	r0, #0
    41b4:	b	41e4 <coda_ascii_cursor_read_char_array+0xc8>
    41b8:	cmp	r6, #0
    41bc:	beq	41e0 <coda_ascii_cursor_read_char_array+0xc4>
    41c0:	mov	r2, #1
    41c4:	mov	r1, r4
    41c8:	mov	r0, r5
    41cc:	bl	678 <transpose_array>
    41d0:	cmp	r0, #0
    41d4:	beq	41e0 <coda_ascii_cursor_read_char_array+0xc4>
    41d8:	mvn	r0, #0
    41dc:	b	41e4 <coda_ascii_cursor_read_char_array+0xc8>
    41e0:	mov	r0, #0
    41e4:	ldr	r4, [sp, #16]
    41e8:	ldr	r5, [sp, #20]
    41ec:	ldr	r6, [sp, #24]
    41f0:	ldr	lr, [sp, #8]
    41f4:	add	sp, sp, #32
    41f8:	bx	lr
    41fc:	.word	0x00000000
    4200:	.word	0x00000c00
    4204:	.word	0x0000027e
    4208:	.word	0x000006a4

0000420c <coda_ascii_cursor_read_int8_partial_array>:
    420c:	mov	ip, sp
    4210:	sub	sp, sp, #32
    4214:	str	ip, [sp, #8]
    4218:	str	lr, [sp, #12]
    421c:	str	r4, [sp, #16]
    4220:	str	r5, [sp, #20]
    4224:	str	r6, [sp, #24]
    4228:	str	r7, [sp, #28]
    422c:	mov	r5, r3
    4230:	mov	r4, r2
    4234:	mov	r7, r1
    4238:	mov	r6, r0
    423c:	ldr	r3, [r6, #4]
    4240:	lsl	ip, r3, #4
    4244:	add	r3, r6, ip
    4248:	sub	lr, r3, #4096	; 0x1000
    424c:	ldr	r0, [lr, #4088]	; 0xff8
    4250:	ldr	r2, [r0]
    4254:	cmp	r2, #100	; 0x64
    4258:	blt	4260 <coda_ascii_cursor_read_int8_partial_array+0x54>
    425c:	ldr	r0, [r0, #4]
    4260:	ldr	r0, [r0, #40]	; 0x28
    4264:	ldr	ip, [r0]
    4268:	cmp	ip, #0
    426c:	beq	4284 <coda_ascii_cursor_read_int8_partial_array+0x78>
    4270:	ldr	r0, [pc, #76]	; 42c4 <coda_ascii_cursor_read_int8_partial_array+0xb8>
    4274:	ldr	r1, [pc, #76]	; 42c8 <coda_ascii_cursor_read_int8_partial_array+0xbc>
    4278:	movw	r2, #1684	; 0x694
    427c:	ldr	r3, [pc, #72]	; 42cc <coda_ascii_cursor_read_int8_partial_array+0xc0>
    4280:	bl	0 <__assert_fail>
    4284:	ldr	r1, [pc, #52]	; 42c0 <coda_ascii_cursor_read_int8_partial_array+0xb4>
    4288:	mov	r2, #1
    428c:	str	r2, [sp, #4]
    4290:	str	r5, [sp]
    4294:	mov	r3, r4
    4298:	mov	r2, r7
    429c:	mov	r0, r6
    42a0:	bl	58c <read_partial_array>
    42a4:	ldr	r4, [sp, #16]
    42a8:	ldr	r5, [sp, #20]
    42ac:	ldr	r6, [sp, #24]
    42b0:	ldr	r7, [sp, #28]
    42b4:	ldr	lr, [sp, #12]
    42b8:	add	sp, sp, #32
    42bc:	bx	lr
    42c0:	.word	0x00000000
    42c4:	.word	0x0000027e
    42c8:	.word	0x000006a4
    42cc:	.word	0x00000c22

000042d0 <coda_ascii_cursor_read_uint8_partial_array>:
    42d0:	mov	ip, sp
    42d4:	sub	sp, sp, #32
    42d8:	str	ip, [sp, #8]
    42dc:	str	lr, [sp, #12]
    42e0:	str	r4, [sp, #16]
    42e4:	str	r5, [sp, #20]
    42e8:	str	r6, [sp, #24]
    42ec:	str	r7, [sp, #28]
    42f0:	mov	r5, r3
    42f4:	mov	r4, r2
    42f8:	mov	r7, r1
    42fc:	mov	r6, r0
    4300:	ldr	r3, [r6, #4]
    4304:	lsl	ip, r3, #4
    4308:	add	r3, r6, ip
    430c:	sub	lr, r3, #4096	; 0x1000
    4310:	ldr	r0, [lr, #4088]	; 0xff8
    4314:	ldr	r2, [r0]
    4318:	cmp	r2, #100	; 0x64
    431c:	blt	4324 <coda_ascii_cursor_read_uint8_partial_array+0x54>
    4320:	ldr	r0, [r0, #4]
    4324:	ldr	r0, [r0, #40]	; 0x28
    4328:	ldr	ip, [r0]
    432c:	cmp	ip, #0
    4330:	beq	4348 <coda_ascii_cursor_read_uint8_partial_array+0x78>
    4334:	ldr	r0, [pc, #80]	; 438c <coda_ascii_cursor_read_uint8_partial_array+0xbc>
    4338:	ldr	r1, [pc, #80]	; 4390 <coda_ascii_cursor_read_uint8_partial_array+0xc0>
    433c:	movw	r2, #1693	; 0x69d
    4340:	ldr	r3, [pc, #64]	; 4388 <coda_ascii_cursor_read_uint8_partial_array+0xb8>
    4344:	bl	0 <__assert_fail>
    4348:	ldr	r1, [pc, #52]	; 4384 <coda_ascii_cursor_read_uint8_partial_array+0xb4>
    434c:	mov	r2, #1
    4350:	str	r2, [sp, #4]
    4354:	str	r5, [sp]
    4358:	mov	r3, r4
    435c:	mov	r2, r7
    4360:	mov	r0, r6
    4364:	bl	58c <read_partial_array>
    4368:	ldr	r4, [sp, #16]
    436c:	ldr	r5, [sp, #20]
    4370:	ldr	r6, [sp, #24]
    4374:	ldr	r7, [sp, #28]
    4378:	ldr	lr, [sp, #12]
    437c:	add	sp, sp, #32
    4380:	bx	lr
    4384:	.word	0x00000000
    4388:	.word	0x00000c4c
    438c:	.word	0x0000027e
    4390:	.word	0x000006a4

00004394 <coda_ascii_cursor_read_int16_partial_array>:
    4394:	mov	ip, sp
    4398:	sub	sp, sp, #32
    439c:	str	ip, [sp, #8]
    43a0:	str	lr, [sp, #12]
    43a4:	str	r4, [sp, #16]
    43a8:	str	r5, [sp, #20]
    43ac:	str	r6, [sp, #24]
    43b0:	str	r7, [sp, #28]
    43b4:	mov	r5, r3
    43b8:	mov	r4, r2
    43bc:	mov	r7, r1
    43c0:	mov	r6, r0
    43c4:	ldr	r3, [r6, #4]
    43c8:	lsl	ip, r3, #4
    43cc:	add	r3, r6, ip
    43d0:	sub	lr, r3, #4096	; 0x1000
    43d4:	ldr	r0, [lr, #4088]	; 0xff8
    43d8:	ldr	r2, [r0]
    43dc:	cmp	r2, #100	; 0x64
    43e0:	blt	43e8 <coda_ascii_cursor_read_int16_partial_array+0x54>
    43e4:	ldr	r0, [r0, #4]
    43e8:	ldr	r0, [r0, #40]	; 0x28
    43ec:	ldr	ip, [r0]
    43f0:	cmp	ip, #0
    43f4:	beq	440c <coda_ascii_cursor_read_int16_partial_array+0x78>
    43f8:	ldr	r0, [pc, #80]	; 4450 <coda_ascii_cursor_read_int16_partial_array+0xbc>
    43fc:	ldr	r1, [pc, #80]	; 4454 <coda_ascii_cursor_read_int16_partial_array+0xc0>
    4400:	movw	r2, #1702	; 0x6a6
    4404:	ldr	r3, [pc, #60]	; 4448 <coda_ascii_cursor_read_int16_partial_array+0xb4>
    4408:	bl	0 <__assert_fail>
    440c:	ldr	r1, [pc, #56]	; 444c <coda_ascii_cursor_read_int16_partial_array+0xb8>
    4410:	mov	r2, #2
    4414:	str	r2, [sp, #4]
    4418:	str	r5, [sp]
    441c:	mov	r3, r4
    4420:	mov	r2, r7
    4424:	mov	r0, r6
    4428:	bl	58c <read_partial_array>
    442c:	ldr	r4, [sp, #16]
    4430:	ldr	r5, [sp, #20]
    4434:	ldr	r6, [sp, #24]
    4438:	ldr	r7, [sp, #28]
    443c:	ldr	lr, [sp, #12]
    4440:	add	sp, sp, #32
    4444:	bx	lr
    4448:	.word	0x00000c77
    444c:	.word	0x00000000
    4450:	.word	0x0000027e
    4454:	.word	0x000006a4

00004458 <coda_ascii_cursor_read_uint16_partial_array>:
    4458:	mov	ip, sp
    445c:	sub	sp, sp, #32
    4460:	str	ip, [sp, #8]
    4464:	str	lr, [sp, #12]
    4468:	str	r4, [sp, #16]
    446c:	str	r5, [sp, #20]
    4470:	str	r6, [sp, #24]
    4474:	str	r7, [sp, #28]
    4478:	mov	r5, r3
    447c:	mov	r4, r2
    4480:	mov	r7, r1
    4484:	mov	r6, r0
    4488:	ldr	r3, [r6, #4]
    448c:	lsl	ip, r3, #4
    4490:	add	r3, r6, ip
    4494:	sub	lr, r3, #4096	; 0x1000
    4498:	ldr	r0, [lr, #4088]	; 0xff8
    449c:	ldr	r2, [r0]
    44a0:	cmp	r2, #100	; 0x64
    44a4:	blt	44ac <coda_ascii_cursor_read_uint16_partial_array+0x54>
    44a8:	ldr	r0, [r0, #4]
    44ac:	ldr	r0, [r0, #40]	; 0x28
    44b0:	ldr	ip, [r0]
    44b4:	cmp	ip, #0
    44b8:	beq	44d0 <coda_ascii_cursor_read_uint16_partial_array+0x78>
    44bc:	ldr	r0, [pc, #80]	; 4514 <coda_ascii_cursor_read_uint16_partial_array+0xbc>
    44c0:	ldr	r1, [pc, #80]	; 4518 <coda_ascii_cursor_read_uint16_partial_array+0xc0>
    44c4:	movw	r2, #1711	; 0x6af
    44c8:	ldr	r3, [pc, #60]	; 450c <coda_ascii_cursor_read_uint16_partial_array+0xb4>
    44cc:	bl	0 <__assert_fail>
    44d0:	ldr	r1, [pc, #56]	; 4510 <coda_ascii_cursor_read_uint16_partial_array+0xb8>
    44d4:	mov	r2, #2
    44d8:	str	r2, [sp, #4]
    44dc:	str	r5, [sp]
    44e0:	mov	r3, r4
    44e4:	mov	r2, r7
    44e8:	mov	r0, r6
    44ec:	bl	58c <read_partial_array>
    44f0:	ldr	r4, [sp, #16]
    44f4:	ldr	r5, [sp, #20]
    44f8:	ldr	r6, [sp, #24]
    44fc:	ldr	r7, [sp, #28]
    4500:	ldr	lr, [sp, #12]
    4504:	add	sp, sp, #32
    4508:	bx	lr
    450c:	.word	0x00000ca2
    4510:	.word	0x00000000
    4514:	.word	0x0000027e
    4518:	.word	0x000006a4

0000451c <coda_ascii_cursor_read_int32_partial_array>:
    451c:	mov	ip, sp
    4520:	sub	sp, sp, #32
    4524:	str	ip, [sp, #8]
    4528:	str	lr, [sp, #12]
    452c:	str	r4, [sp, #16]
    4530:	str	r5, [sp, #20]
    4534:	str	r6, [sp, #24]
    4538:	str	r7, [sp, #28]
    453c:	mov	r5, r3
    4540:	mov	r4, r2
    4544:	mov	r7, r1
    4548:	mov	r6, r0
    454c:	ldr	r3, [r6, #4]
    4550:	lsl	ip, r3, #4
    4554:	add	r3, r6, ip
    4558:	sub	lr, r3, #4096	; 0x1000
    455c:	ldr	r0, [lr, #4088]	; 0xff8
    4560:	ldr	r2, [r0]
    4564:	cmp	r2, #100	; 0x64
    4568:	blt	4570 <coda_ascii_cursor_read_int32_partial_array+0x54>
    456c:	ldr	r0, [r0, #4]
    4570:	ldr	r0, [r0, #40]	; 0x28
    4574:	ldr	ip, [r0]
    4578:	cmp	ip, #0
    457c:	beq	4594 <coda_ascii_cursor_read_int32_partial_array+0x78>
    4580:	ldr	r0, [pc, #80]	; 45d8 <coda_ascii_cursor_read_int32_partial_array+0xbc>
    4584:	ldr	r1, [pc, #80]	; 45dc <coda_ascii_cursor_read_int32_partial_array+0xc0>
    4588:	movw	r2, #1720	; 0x6b8
    458c:	ldr	r3, [pc, #64]	; 45d4 <coda_ascii_cursor_read_int32_partial_array+0xb8>
    4590:	bl	0 <__assert_fail>
    4594:	ldr	r1, [pc, #52]	; 45d0 <coda_ascii_cursor_read_int32_partial_array+0xb4>
    4598:	mov	r2, #4
    459c:	str	r2, [sp, #4]
    45a0:	str	r5, [sp]
    45a4:	mov	r3, r4
    45a8:	mov	r2, r7
    45ac:	mov	r0, r6
    45b0:	bl	58c <read_partial_array>
    45b4:	ldr	r4, [sp, #16]
    45b8:	ldr	r5, [sp, #20]
    45bc:	ldr	r6, [sp, #24]
    45c0:	ldr	r7, [sp, #28]
    45c4:	ldr	lr, [sp, #12]
    45c8:	add	sp, sp, #32
    45cc:	bx	lr
    45d0:	.word	0x00000000
    45d4:	.word	0x00000cce
    45d8:	.word	0x0000027e
    45dc:	.word	0x000006a4

000045e0 <coda_ascii_cursor_read_uint32_partial_array>:
    45e0:	mov	ip, sp
    45e4:	sub	sp, sp, #32
    45e8:	str	ip, [sp, #8]
    45ec:	str	lr, [sp, #12]
    45f0:	str	r4, [sp, #16]
    45f4:	str	r5, [sp, #20]
    45f8:	str	r6, [sp, #24]
    45fc:	str	r7, [sp, #28]
    4600:	mov	r5, r3
    4604:	mov	r4, r2
    4608:	mov	r7, r1
    460c:	mov	r6, r0
    4610:	ldr	r3, [r6, #4]
    4614:	lsl	ip, r3, #4
    4618:	add	r3, r6, ip
    461c:	sub	lr, r3, #4096	; 0x1000
    4620:	ldr	r0, [lr, #4088]	; 0xff8
    4624:	ldr	r2, [r0]
    4628:	cmp	r2, #100	; 0x64
    462c:	blt	4634 <coda_ascii_cursor_read_uint32_partial_array+0x54>
    4630:	ldr	r0, [r0, #4]
    4634:	ldr	r0, [r0, #40]	; 0x28
    4638:	ldr	ip, [r0]
    463c:	cmp	ip, #0
    4640:	beq	4658 <coda_ascii_cursor_read_uint32_partial_array+0x78>
    4644:	ldr	r0, [pc, #80]	; 469c <coda_ascii_cursor_read_uint32_partial_array+0xbc>
    4648:	ldr	r1, [pc, #80]	; 46a0 <coda_ascii_cursor_read_uint32_partial_array+0xc0>
    464c:	movw	r2, #1729	; 0x6c1
    4650:	ldr	r3, [pc, #64]	; 4698 <coda_ascii_cursor_read_uint32_partial_array+0xb8>
    4654:	bl	0 <__assert_fail>
    4658:	ldr	r1, [pc, #52]	; 4694 <coda_ascii_cursor_read_uint32_partial_array+0xb4>
    465c:	mov	r2, #4
    4660:	str	r2, [sp, #4]
    4664:	str	r5, [sp]
    4668:	mov	r3, r4
    466c:	mov	r2, r7
    4670:	mov	r0, r6
    4674:	bl	58c <read_partial_array>
    4678:	ldr	r4, [sp, #16]
    467c:	ldr	r5, [sp, #20]
    4680:	ldr	r6, [sp, #24]
    4684:	ldr	r7, [sp, #28]
    4688:	ldr	lr, [sp, #12]
    468c:	add	sp, sp, #32
    4690:	bx	lr
    4694:	.word	0x00000000
    4698:	.word	0x00000cf9
    469c:	.word	0x0000027e
    46a0:	.word	0x000006a4

000046a4 <coda_ascii_cursor_read_int64_partial_array>:
    46a4:	mov	ip, sp
    46a8:	sub	sp, sp, #32
    46ac:	str	ip, [sp, #8]
    46b0:	str	lr, [sp, #12]
    46b4:	str	r4, [sp, #16]
    46b8:	str	r5, [sp, #20]
    46bc:	str	r6, [sp, #24]
    46c0:	str	r7, [sp, #28]
    46c4:	mov	r5, r3
    46c8:	mov	r4, r2
    46cc:	mov	r7, r1
    46d0:	mov	r6, r0
    46d4:	ldr	r3, [r6, #4]
    46d8:	lsl	ip, r3, #4
    46dc:	add	r3, r6, ip
    46e0:	sub	lr, r3, #4096	; 0x1000
    46e4:	ldr	r0, [lr, #4088]	; 0xff8
    46e8:	ldr	r2, [r0]
    46ec:	cmp	r2, #100	; 0x64
    46f0:	blt	46f8 <coda_ascii_cursor_read_int64_partial_array+0x54>
    46f4:	ldr	r0, [r0, #4]
    46f8:	ldr	r0, [r0, #40]	; 0x28
    46fc:	ldr	ip, [r0]
    4700:	cmp	ip, #0
    4704:	beq	471c <coda_ascii_cursor_read_int64_partial_array+0x78>
    4708:	ldr	r0, [pc, #80]	; 4760 <coda_ascii_cursor_read_int64_partial_array+0xbc>
    470c:	ldr	r1, [pc, #80]	; 4764 <coda_ascii_cursor_read_int64_partial_array+0xc0>
    4710:	movw	r2, #1738	; 0x6ca
    4714:	ldr	r3, [pc, #64]	; 475c <coda_ascii_cursor_read_int64_partial_array+0xb8>
    4718:	bl	0 <__assert_fail>
    471c:	ldr	r1, [pc, #52]	; 4758 <coda_ascii_cursor_read_int64_partial_array+0xb4>
    4720:	mov	r2, #8
    4724:	str	r2, [sp, #4]
    4728:	str	r5, [sp]
    472c:	mov	r3, r4
    4730:	mov	r2, r7
    4734:	mov	r0, r6
    4738:	bl	58c <read_partial_array>
    473c:	ldr	r4, [sp, #16]
    4740:	ldr	r5, [sp, #20]
    4744:	ldr	r6, [sp, #24]
    4748:	ldr	r7, [sp, #28]
    474c:	ldr	lr, [sp, #12]
    4750:	add	sp, sp, #32
    4754:	bx	lr
    4758:	.word	0x00000000
    475c:	.word	0x00000d25
    4760:	.word	0x0000027e
    4764:	.word	0x000006a4

00004768 <coda_ascii_cursor_read_uint64_partial_array>:
    4768:	mov	ip, sp
    476c:	sub	sp, sp, #32
    4770:	str	ip, [sp, #8]
    4774:	str	lr, [sp, #12]
    4778:	str	r4, [sp, #16]
    477c:	str	r5, [sp, #20]
    4780:	str	r6, [sp, #24]
    4784:	str	r7, [sp, #28]
    4788:	mov	r5, r3
    478c:	mov	r4, r2
    4790:	mov	r7, r1
    4794:	mov	r6, r0
    4798:	ldr	r3, [r6, #4]
    479c:	lsl	ip, r3, #4
    47a0:	add	r3, r6, ip
    47a4:	sub	lr, r3, #4096	; 0x1000
    47a8:	ldr	r0, [lr, #4088]	; 0xff8
    47ac:	ldr	r2, [r0]
    47b0:	cmp	r2, #100	; 0x64
    47b4:	blt	47bc <coda_ascii_cursor_read_uint64_partial_array+0x54>
    47b8:	ldr	r0, [r0, #4]
    47bc:	ldr	r0, [r0, #40]	; 0x28
    47c0:	ldr	ip, [r0]
    47c4:	cmp	ip, #0
    47c8:	beq	47e0 <coda_ascii_cursor_read_uint64_partial_array+0x78>
    47cc:	ldr	r0, [pc, #80]	; 4824 <coda_ascii_cursor_read_uint64_partial_array+0xbc>
    47d0:	ldr	r1, [pc, #80]	; 4828 <coda_ascii_cursor_read_uint64_partial_array+0xc0>
    47d4:	movw	r2, #1747	; 0x6d3
    47d8:	ldr	r3, [pc, #60]	; 481c <coda_ascii_cursor_read_uint64_partial_array+0xb4>
    47dc:	bl	0 <__assert_fail>
    47e0:	ldr	r1, [pc, #56]	; 4820 <coda_ascii_cursor_read_uint64_partial_array+0xb8>
    47e4:	mov	r2, #8
    47e8:	str	r2, [sp, #4]
    47ec:	str	r5, [sp]
    47f0:	mov	r3, r4
    47f4:	mov	r2, r7
    47f8:	mov	r0, r6
    47fc:	bl	58c <read_partial_array>
    4800:	ldr	r4, [sp, #16]
    4804:	ldr	r5, [sp, #20]
    4808:	ldr	r6, [sp, #24]
    480c:	ldr	r7, [sp, #28]
    4810:	ldr	lr, [sp, #12]
    4814:	add	sp, sp, #32
    4818:	bx	lr
    481c:	.word	0x00000d50
    4820:	.word	0x00000000
    4824:	.word	0x0000027e
    4828:	.word	0x000006a4

0000482c <coda_ascii_cursor_read_float_partial_array>:
    482c:	mov	ip, sp
    4830:	sub	sp, sp, #32
    4834:	str	ip, [sp, #8]
    4838:	str	lr, [sp, #12]
    483c:	str	r4, [sp, #16]
    4840:	str	r5, [sp, #20]
    4844:	str	r6, [sp, #24]
    4848:	str	r7, [sp, #28]
    484c:	mov	r5, r3
    4850:	mov	r4, r2
    4854:	mov	r7, r1
    4858:	mov	r6, r0
    485c:	ldr	r3, [r6, #4]
    4860:	lsl	ip, r3, #4
    4864:	add	r3, r6, ip
    4868:	sub	lr, r3, #4096	; 0x1000
    486c:	ldr	r0, [lr, #4088]	; 0xff8
    4870:	ldr	r2, [r0]
    4874:	cmp	r2, #100	; 0x64
    4878:	blt	4880 <coda_ascii_cursor_read_float_partial_array+0x54>
    487c:	ldr	r0, [r0, #4]
    4880:	ldr	r0, [r0, #40]	; 0x28
    4884:	ldr	ip, [r0]
    4888:	cmp	ip, #0
    488c:	beq	48a4 <coda_ascii_cursor_read_float_partial_array+0x78>
    4890:	ldr	r0, [pc, #76]	; 48e4 <coda_ascii_cursor_read_float_partial_array+0xb8>
    4894:	ldr	r1, [pc, #80]	; 48ec <coda_ascii_cursor_read_float_partial_array+0xc0>
    4898:	movw	r2, #1756	; 0x6dc
    489c:	ldr	r3, [pc, #60]	; 48e0 <coda_ascii_cursor_read_float_partial_array+0xb4>
    48a0:	bl	0 <__assert_fail>
    48a4:	ldr	r1, [pc, #60]	; 48e8 <coda_ascii_cursor_read_float_partial_array+0xbc>
    48a8:	mov	r2, #4
    48ac:	str	r2, [sp, #4]
    48b0:	str	r5, [sp]
    48b4:	mov	r3, r4
    48b8:	mov	r2, r7
    48bc:	mov	r0, r6
    48c0:	bl	58c <read_partial_array>
    48c4:	ldr	r4, [sp, #16]
    48c8:	ldr	r5, [sp, #20]
    48cc:	ldr	r6, [sp, #24]
    48d0:	ldr	r7, [sp, #28]
    48d4:	ldr	lr, [sp, #12]
    48d8:	add	sp, sp, #32
    48dc:	bx	lr
    48e0:	.word	0x00000d7c
    48e4:	.word	0x0000027e
    48e8:	.word	0x00000000
    48ec:	.word	0x000006a4

000048f0 <coda_ascii_cursor_read_double_partial_array>:
    48f0:	mov	ip, sp
    48f4:	sub	sp, sp, #32
    48f8:	str	ip, [sp, #8]
    48fc:	str	lr, [sp, #12]
    4900:	str	r4, [sp, #16]
    4904:	str	r5, [sp, #20]
    4908:	str	r6, [sp, #24]
    490c:	str	r7, [sp, #28]
    4910:	mov	r5, r3
    4914:	mov	r4, r2
    4918:	mov	r7, r1
    491c:	mov	r6, r0
    4920:	ldr	r3, [r6, #4]
    4924:	lsl	ip, r3, #4
    4928:	add	r3, r6, ip
    492c:	sub	lr, r3, #4096	; 0x1000
    4930:	ldr	r0, [lr, #4088]	; 0xff8
    4934:	ldr	r2, [r0]
    4938:	cmp	r2, #100	; 0x64
    493c:	blt	4944 <coda_ascii_cursor_read_double_partial_array+0x54>
    4940:	ldr	r0, [r0, #4]
    4944:	ldr	r0, [r0, #40]	; 0x28
    4948:	ldr	ip, [r0]
    494c:	cmp	ip, #0
    4950:	beq	4968 <coda_ascii_cursor_read_double_partial_array+0x78>
    4954:	ldr	r0, [pc, #76]	; 49a8 <coda_ascii_cursor_read_double_partial_array+0xb8>
    4958:	ldr	r1, [pc, #76]	; 49ac <coda_ascii_cursor_read_double_partial_array+0xbc>
    495c:	movw	r2, #1765	; 0x6e5
    4960:	ldr	r3, [pc, #60]	; 49a4 <coda_ascii_cursor_read_double_partial_array+0xb4>
    4964:	bl	0 <__assert_fail>
    4968:	ldr	r1, [pc, #64]	; 49b0 <coda_ascii_cursor_read_double_partial_array+0xc0>
    496c:	mov	r2, #8
    4970:	str	r2, [sp, #4]
    4974:	str	r5, [sp]
    4978:	mov	r3, r4
    497c:	mov	r2, r7
    4980:	mov	r0, r6
    4984:	bl	58c <read_partial_array>
    4988:	ldr	r4, [sp, #16]
    498c:	ldr	r5, [sp, #20]
    4990:	ldr	r6, [sp, #24]
    4994:	ldr	r7, [sp, #28]
    4998:	ldr	lr, [sp, #12]
    499c:	add	sp, sp, #32
    49a0:	bx	lr
    49a4:	.word	0x00000da7
    49a8:	.word	0x0000027e
    49ac:	.word	0x000006a4
    49b0:	.word	0x00000000

000049b4 <coda_ascii_cursor_read_char_partial_array>:
    49b4:	mov	ip, sp
    49b8:	sub	sp, sp, #32
    49bc:	str	ip, [sp, #8]
    49c0:	str	lr, [sp, #12]
    49c4:	str	r4, [sp, #16]
    49c8:	str	r5, [sp, #20]
    49cc:	str	r6, [sp, #24]
    49d0:	str	r7, [sp, #28]
    49d4:	mov	r5, r3
    49d8:	mov	r4, r2
    49dc:	mov	r7, r1
    49e0:	mov	r6, r0
    49e4:	ldr	r3, [r6, #4]
    49e8:	lsl	ip, r3, #4
    49ec:	add	r3, r6, ip
    49f0:	sub	lr, r3, #4096	; 0x1000
    49f4:	ldr	r0, [lr, #4088]	; 0xff8
    49f8:	ldr	r2, [r0]
    49fc:	cmp	r2, #100	; 0x64
    4a00:	blt	4a08 <coda_ascii_cursor_read_char_partial_array+0x54>
    4a04:	ldr	r0, [r0, #4]
    4a08:	ldr	r0, [r0, #40]	; 0x28
    4a0c:	ldr	ip, [r0]
    4a10:	cmp	ip, #0
    4a14:	beq	4a2c <coda_ascii_cursor_read_char_partial_array+0x78>
    4a18:	ldr	r0, [pc, #80]	; 4a70 <coda_ascii_cursor_read_char_partial_array+0xbc>
    4a1c:	ldr	r1, [pc, #80]	; 4a74 <coda_ascii_cursor_read_char_partial_array+0xc0>
    4a20:	movw	r2, #1774	; 0x6ee
    4a24:	ldr	r3, [pc, #64]	; 4a6c <coda_ascii_cursor_read_char_partial_array+0xb8>
    4a28:	bl	0 <__assert_fail>
    4a2c:	ldr	r1, [pc, #52]	; 4a68 <coda_ascii_cursor_read_char_partial_array+0xb4>
    4a30:	mov	r2, #1
    4a34:	str	r2, [sp, #4]
    4a38:	str	r5, [sp]
    4a3c:	mov	r3, r4
    4a40:	mov	r2, r7
    4a44:	mov	r0, r6
    4a48:	bl	58c <read_partial_array>
    4a4c:	ldr	r4, [sp, #16]
    4a50:	ldr	r5, [sp, #20]
    4a54:	ldr	r6, [sp, #24]
    4a58:	ldr	r7, [sp, #28]
    4a5c:	ldr	lr, [sp, #12]
    4a60:	add	sp, sp, #32
    4a64:	bx	lr
    4a68:	.word	0x00000000
    4a6c:	.word	0x00000dd3
    4a70:	.word	0x0000027e
    4a74:	.word	0x000006a4
