
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codaeval.dir/tools/codaeval/codaeval.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_escaped_string>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #16
       c:	str	r0, [fp, #-16]
      10:	str	r1, [fp, #-20]	; 0xffffffec
      14:	mov	r3, #0
      18:	str	r3, [fp, #-8]
      1c:	ldr	r3, [fp, #-20]	; 0xffffffec
      20:	cmp	r3, #0
      24:	beq	2d4 <generate_escaped_string+0x2d4>
      28:	ldr	r3, [fp, #-16]
      2c:	cmp	r3, #0
      30:	beq	2d4 <generate_escaped_string+0x2d4>
      34:	ldr	r3, [fp, #-20]	; 0xffffffec
      38:	cmp	r3, #0
      3c:	bge	2c0 <generate_escaped_string+0x2c0>
      40:	ldr	r0, [fp, #-16]
      44:	bl	0 <strlen>
      48:	mov	r3, r0
      4c:	str	r3, [fp, #-20]	; 0xffffffec
      50:	b	2c0 <generate_escaped_string+0x2c0>
      54:	ldr	r3, [fp, #-8]
      58:	ldr	r2, [fp, #-16]
      5c:	add	r3, r2, r3
      60:	ldrb	r3, [r3]
      64:	sub	r3, r3, #7
      68:	cmp	r3, #85	; 0x55
      6c:	ldrls	pc, [pc, r3, lsl #2]
      70:	b	244 <generate_escaped_string+0x244>
      74:	.word	0x000001d8
      78:	.word	0x000001e4
      7c:	.word	0x00000214
      80:	.word	0x000001fc
      84:	.word	0x00000220
      88:	.word	0x000001f0
      8c:	.word	0x00000208
      90:	.word	0x00000244
      94:	.word	0x00000244
      98:	.word	0x00000244
      9c:	.word	0x00000244
      a0:	.word	0x00000244
      a4:	.word	0x00000244
      a8:	.word	0x00000244
      ac:	.word	0x00000244
      b0:	.word	0x00000244
      b4:	.word	0x00000244
      b8:	.word	0x00000244
      bc:	.word	0x00000244
      c0:	.word	0x00000244
      c4:	.word	0x000001cc
      c8:	.word	0x00000244
      cc:	.word	0x00000244
      d0:	.word	0x00000244
      d4:	.word	0x00000244
      d8:	.word	0x00000244
      dc:	.word	0x00000244
      e0:	.word	0x00000238
      e4:	.word	0x00000244
      e8:	.word	0x00000244
      ec:	.word	0x00000244
      f0:	.word	0x00000244
      f4:	.word	0x00000244
      f8:	.word	0x00000244
      fc:	.word	0x00000244
     100:	.word	0x00000244
     104:	.word	0x00000244
     108:	.word	0x00000244
     10c:	.word	0x00000244
     110:	.word	0x00000244
     114:	.word	0x00000244
     118:	.word	0x00000244
     11c:	.word	0x00000244
     120:	.word	0x00000244
     124:	.word	0x00000244
     128:	.word	0x00000244
     12c:	.word	0x00000244
     130:	.word	0x00000244
     134:	.word	0x00000244
     138:	.word	0x00000244
     13c:	.word	0x00000244
     140:	.word	0x00000244
     144:	.word	0x00000244
     148:	.word	0x00000244
     14c:	.word	0x00000244
     150:	.word	0x00000244
     154:	.word	0x00000244
     158:	.word	0x00000244
     15c:	.word	0x00000244
     160:	.word	0x00000244
     164:	.word	0x00000244
     168:	.word	0x00000244
     16c:	.word	0x00000244
     170:	.word	0x00000244
     174:	.word	0x00000244
     178:	.word	0x00000244
     17c:	.word	0x00000244
     180:	.word	0x00000244
     184:	.word	0x00000244
     188:	.word	0x00000244
     18c:	.word	0x00000244
     190:	.word	0x00000244
     194:	.word	0x00000244
     198:	.word	0x00000244
     19c:	.word	0x00000244
     1a0:	.word	0x00000244
     1a4:	.word	0x00000244
     1a8:	.word	0x00000244
     1ac:	.word	0x00000244
     1b0:	.word	0x00000244
     1b4:	.word	0x00000244
     1b8:	.word	0x00000244
     1bc:	.word	0x00000244
     1c0:	.word	0x00000244
     1c4:	.word	0x00000244
     1c8:	.word	0x0000022c
     1cc:	ldr	r0, [pc, #268]	; 2e0 <generate_escaped_string+0x2e0>
     1d0:	bl	0 <printf>
     1d4:	b	2b4 <generate_escaped_string+0x2b4>
     1d8:	ldr	r0, [pc, #260]	; 2e4 <generate_escaped_string+0x2e4>
     1dc:	bl	0 <printf>
     1e0:	b	2b4 <generate_escaped_string+0x2b4>
     1e4:	ldr	r0, [pc, #252]	; 2e8 <generate_escaped_string+0x2e8>
     1e8:	bl	0 <printf>
     1ec:	b	2b4 <generate_escaped_string+0x2b4>
     1f0:	ldr	r0, [pc, #244]	; 2ec <generate_escaped_string+0x2ec>
     1f4:	bl	0 <printf>
     1f8:	b	2b4 <generate_escaped_string+0x2b4>
     1fc:	ldr	r0, [pc, #236]	; 2f0 <generate_escaped_string+0x2f0>
     200:	bl	0 <printf>
     204:	b	2b4 <generate_escaped_string+0x2b4>
     208:	ldr	r0, [pc, #228]	; 2f4 <generate_escaped_string+0x2f4>
     20c:	bl	0 <printf>
     210:	b	2b4 <generate_escaped_string+0x2b4>
     214:	ldr	r0, [pc, #220]	; 2f8 <generate_escaped_string+0x2f8>
     218:	bl	0 <printf>
     21c:	b	2b4 <generate_escaped_string+0x2b4>
     220:	ldr	r0, [pc, #212]	; 2fc <generate_escaped_string+0x2fc>
     224:	bl	0 <printf>
     228:	b	2b4 <generate_escaped_string+0x2b4>
     22c:	ldr	r0, [pc, #204]	; 300 <generate_escaped_string+0x300>
     230:	bl	0 <printf>
     234:	b	2b4 <generate_escaped_string+0x2b4>
     238:	ldr	r0, [pc, #196]	; 304 <generate_escaped_string+0x304>
     23c:	bl	0 <printf>
     240:	b	2b4 <generate_escaped_string+0x2b4>
     244:	bl	0 <__ctype_b_loc>
     248:	mov	r3, r0
     24c:	ldr	r2, [r3]
     250:	ldr	r3, [fp, #-8]
     254:	ldr	r1, [fp, #-16]
     258:	add	r3, r1, r3
     25c:	ldrb	r3, [r3]
     260:	lsl	r3, r3, #1
     264:	add	r3, r2, r3
     268:	ldrh	r3, [r3]
     26c:	and	r3, r3, #16384	; 0x4000
     270:	cmp	r3, #0
     274:	bne	298 <generate_escaped_string+0x298>
     278:	ldr	r3, [fp, #-8]
     27c:	ldr	r2, [fp, #-16]
     280:	add	r3, r2, r3
     284:	ldrb	r3, [r3]
     288:	mov	r1, r3
     28c:	ldr	r0, [pc, #116]	; 308 <generate_escaped_string+0x308>
     290:	bl	0 <printf>
     294:	b	2b0 <generate_escaped_string+0x2b0>
     298:	ldr	r3, [fp, #-8]
     29c:	ldr	r2, [fp, #-16]
     2a0:	add	r3, r2, r3
     2a4:	ldrb	r3, [r3]
     2a8:	mov	r0, r3
     2ac:	bl	0 <putchar>
     2b0:	nop			; (mov r0, r0)
     2b4:	ldr	r3, [fp, #-8]
     2b8:	add	r3, r3, #1
     2bc:	str	r3, [fp, #-8]
     2c0:	ldr	r2, [fp, #-8]
     2c4:	ldr	r3, [fp, #-20]	; 0xffffffec
     2c8:	cmp	r2, r3
     2cc:	blt	54 <generate_escaped_string+0x54>
     2d0:	b	2d8 <generate_escaped_string+0x2d8>
     2d4:	nop			; (mov r0, r0)
     2d8:	sub	sp, fp, #4
     2dc:	pop	{fp, pc}
     2e0:	.word	0x00000000
     2e4:	.word	0x00000004
     2e8:	.word	0x00000008
     2ec:	.word	0x0000000c
     2f0:	.word	0x00000010
     2f4:	.word	0x00000014
     2f8:	.word	0x00000018
     2fc:	.word	0x0000001c
     300:	.word	0x00000020
     304:	.word	0x00000024
     308:	.word	0x00000028

0000030c <print_version>:
     30c:	push	{fp, lr}
     310:	add	fp, sp, #4
     314:	bl	0 <coda_get_libcoda_version>
     318:	mov	r3, r0
     31c:	mov	r1, r3
     320:	ldr	r0, [pc, #24]	; 340 <print_version+0x34>
     324:	bl	0 <printf>
     328:	ldr	r0, [pc, #20]	; 344 <print_version+0x38>
     32c:	bl	0 <puts>
     330:	mov	r0, #10
     334:	bl	0 <putchar>
     338:	nop			; (mov r0, r0)
     33c:	pop	{fp, pc}
     340:	.word	0x00000030
     344:	.word	0x00000040

00000348 <print_help>:
     348:	push	{fp, lr}
     34c:	add	fp, sp, #4
     350:	ldr	r0, [pc, #304]	; 488 <print_help+0x140>
     354:	bl	0 <puts>
     358:	ldr	r0, [pc, #300]	; 48c <print_help+0x144>
     35c:	bl	0 <puts>
     360:	ldr	r0, [pc, #296]	; 490 <print_help+0x148>
     364:	bl	0 <puts>
     368:	ldr	r0, [pc, #292]	; 494 <print_help+0x14c>
     36c:	bl	0 <puts>
     370:	ldr	r0, [pc, #288]	; 498 <print_help+0x150>
     374:	bl	0 <puts>
     378:	ldr	r0, [pc, #284]	; 49c <print_help+0x154>
     37c:	bl	0 <puts>
     380:	ldr	r0, [pc, #280]	; 4a0 <print_help+0x158>
     384:	bl	0 <puts>
     388:	mov	r0, #10
     38c:	bl	0 <putchar>
     390:	ldr	r0, [pc, #268]	; 4a4 <print_help+0x15c>
     394:	bl	0 <puts>
     398:	ldr	r0, [pc, #264]	; 4a8 <print_help+0x160>
     39c:	bl	0 <puts>
     3a0:	ldr	r0, [pc, #260]	; 4ac <print_help+0x164>
     3a4:	bl	0 <puts>
     3a8:	ldr	r0, [pc, #256]	; 4b0 <print_help+0x168>
     3ac:	bl	0 <puts>
     3b0:	ldr	r0, [pc, #252]	; 4b4 <print_help+0x16c>
     3b4:	bl	0 <puts>
     3b8:	ldr	r0, [pc, #248]	; 4b8 <print_help+0x170>
     3bc:	bl	0 <puts>
     3c0:	ldr	r0, [pc, #244]	; 4bc <print_help+0x174>
     3c4:	bl	0 <puts>
     3c8:	ldr	r0, [pc, #240]	; 4c0 <print_help+0x178>
     3cc:	bl	0 <puts>
     3d0:	ldr	r0, [pc, #236]	; 4c4 <print_help+0x17c>
     3d4:	bl	0 <puts>
     3d8:	ldr	r0, [pc, #232]	; 4c8 <print_help+0x180>
     3dc:	bl	0 <puts>
     3e0:	ldr	r0, [pc, #228]	; 4cc <print_help+0x184>
     3e4:	bl	0 <puts>
     3e8:	ldr	r0, [pc, #224]	; 4d0 <print_help+0x188>
     3ec:	bl	0 <puts>
     3f0:	mov	r0, #10
     3f4:	bl	0 <putchar>
     3f8:	ldr	r0, [pc, #212]	; 4d4 <print_help+0x18c>
     3fc:	bl	0 <puts>
     400:	ldr	r0, [pc, #208]	; 4d8 <print_help+0x190>
     404:	bl	0 <puts>
     408:	mov	r0, #10
     40c:	bl	0 <putchar>
     410:	ldr	r0, [pc, #196]	; 4dc <print_help+0x194>
     414:	bl	0 <puts>
     418:	ldr	r0, [pc, #192]	; 4e0 <print_help+0x198>
     41c:	bl	0 <puts>
     420:	mov	r0, #10
     424:	bl	0 <putchar>
     428:	ldr	r0, [pc, #180]	; 4e4 <print_help+0x19c>
     42c:	bl	0 <puts>
     430:	ldr	r0, [pc, #176]	; 4e8 <print_help+0x1a0>
     434:	bl	0 <puts>
     438:	mov	r0, #10
     43c:	bl	0 <putchar>
     440:	ldr	r0, [pc, #164]	; 4ec <print_help+0x1a4>
     444:	bl	0 <puts>
     448:	ldr	r0, [pc, #160]	; 4f0 <print_help+0x1a8>
     44c:	bl	0 <puts>
     450:	ldr	r0, [pc, #156]	; 4f4 <print_help+0x1ac>
     454:	bl	0 <puts>
     458:	ldr	r0, [pc, #152]	; 4f8 <print_help+0x1b0>
     45c:	bl	0 <puts>
     460:	ldr	r0, [pc, #148]	; 4fc <print_help+0x1b4>
     464:	bl	0 <puts>
     468:	ldr	r0, [pc, #144]	; 500 <print_help+0x1b8>
     46c:	bl	0 <puts>
     470:	ldr	r0, [pc, #140]	; 504 <print_help+0x1bc>
     474:	bl	0 <puts>
     478:	mov	r0, #10
     47c:	bl	0 <putchar>
     480:	nop			; (mov r0, r0)
     484:	pop	{fp, pc}
     488:	.word	0x00000070
     48c:	.word	0x00000078
     490:	.word	0x000000c8
     494:	.word	0x00000118
     498:	.word	0x0000013c
     49c:	.word	0x00000188
     4a0:	.word	0x000001d4
     4a4:	.word	0x00000204
     4a8:	.word	0x00000218
     4ac:	.word	0x00000230
     4b0:	.word	0x00000280
     4b4:	.word	0x000002d0
     4b8:	.word	0x000002f8
     4bc:	.word	0x00000334
     4c0:	.word	0x0000034c
     4c4:	.word	0x00000398
     4c8:	.word	0x000003e4
     4cc:	.word	0x00000404
     4d0:	.word	0x00000450
     4d4:	.word	0x00000480
     4d8:	.word	0x000004d0
     4dc:	.word	0x000004e8
     4e0:	.word	0x00000500
     4e4:	.word	0x00000520
     4e8:	.word	0x0000053c
     4ec:	.word	0x00000570
     4f0:	.word	0x000005bc
     4f4:	.word	0x00000608
     4f8:	.word	0x00000638
     4fc:	.word	0x00000684
     500:	.word	0x000006d0
     504:	.word	0x00000710

00000508 <eval_expression>:
     508:	push	{fp, lr}
     50c:	add	fp, sp, #4
     510:	sub	sp, sp, #64	; 0x40
     514:	str	r0, [fp, #-64]	; 0xffffffc0
     518:	ldr	r3, [pc, #560]	; 750 <eval_expression+0x248>
     51c:	ldr	r3, [r3]
     520:	cmp	r3, #5
     524:	ldrls	pc, [pc, r3, lsl #2]
     528:	b	740 <eval_expression+0x238>
     52c:	.word	0x00000544
     530:	.word	0x000005bc
     534:	.word	0x00000630
     538:	.word	0x00000694
     53c:	.word	0x00000728
     540:	.word	0x00000728
     544:	ldr	r3, [pc, #520]	; 754 <eval_expression+0x24c>
     548:	ldr	r3, [r3]
     54c:	sub	r2, fp, #8
     550:	ldr	r1, [fp, #-64]	; 0xffffffc0
     554:	mov	r0, r3
     558:	bl	0 <coda_expression_eval_bool>
     55c:	mov	r3, r0
     560:	cmp	r3, #0
     564:	beq	598 <eval_expression+0x90>
     568:	bl	0 <coda_get_errno>
     56c:	mov	r3, r0
     570:	ldr	r3, [r3]
     574:	mov	r0, r3
     578:	bl	0 <coda_errno_to_string>
     57c:	mov	r3, r0
     580:	mov	r2, r3
     584:	ldr	r1, [pc, #460]	; 758 <eval_expression+0x250>
     588:	mvn	r0, #400	; 0x190
     58c:	bl	0 <coda_set_error>
     590:	mvn	r3, #0
     594:	b	744 <eval_expression+0x23c>
     598:	ldr	r3, [fp, #-8]
     59c:	cmp	r3, #0
     5a0:	beq	5ac <eval_expression+0xa4>
     5a4:	ldr	r3, [pc, #432]	; 75c <eval_expression+0x254>
     5a8:	b	5b0 <eval_expression+0xa8>
     5ac:	ldr	r3, [pc, #428]	; 760 <eval_expression+0x258>
     5b0:	mov	r0, r3
     5b4:	bl	0 <puts>
     5b8:	b	740 <eval_expression+0x238>
     5bc:	ldr	r3, [pc, #400]	; 754 <eval_expression+0x24c>
     5c0:	ldr	r3, [r3]
     5c4:	sub	r2, fp, #20
     5c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
     5cc:	mov	r0, r3
     5d0:	bl	0 <coda_expression_eval_integer>
     5d4:	mov	r3, r0
     5d8:	cmp	r3, #0
     5dc:	beq	610 <eval_expression+0x108>
     5e0:	bl	0 <coda_get_errno>
     5e4:	mov	r3, r0
     5e8:	ldr	r3, [r3]
     5ec:	mov	r0, r3
     5f0:	bl	0 <coda_errno_to_string>
     5f4:	mov	r3, r0
     5f8:	mov	r2, r3
     5fc:	ldr	r1, [pc, #352]	; 764 <eval_expression+0x25c>
     600:	mvn	r0, #400	; 0x190
     604:	bl	0 <coda_set_error>
     608:	mvn	r3, #0
     60c:	b	744 <eval_expression+0x23c>
     610:	ldrd	r0, [fp, #-20]	; 0xffffffec
     614:	sub	r3, fp, #44	; 0x2c
     618:	mov	r2, r3
     61c:	bl	0 <coda_str64>
     620:	sub	r3, fp, #44	; 0x2c
     624:	mov	r0, r3
     628:	bl	0 <puts>
     62c:	b	740 <eval_expression+0x238>
     630:	ldr	r3, [pc, #284]	; 754 <eval_expression+0x24c>
     634:	ldr	r3, [r3]
     638:	sub	r2, fp, #52	; 0x34
     63c:	ldr	r1, [fp, #-64]	; 0xffffffc0
     640:	mov	r0, r3
     644:	bl	0 <coda_expression_eval_float>
     648:	mov	r3, r0
     64c:	cmp	r3, #0
     650:	beq	684 <eval_expression+0x17c>
     654:	bl	0 <coda_get_errno>
     658:	mov	r3, r0
     65c:	ldr	r3, [r3]
     660:	mov	r0, r3
     664:	bl	0 <coda_errno_to_string>
     668:	mov	r3, r0
     66c:	mov	r2, r3
     670:	ldr	r1, [pc, #240]	; 768 <eval_expression+0x260>
     674:	mvn	r0, #400	; 0x190
     678:	bl	0 <coda_set_error>
     67c:	mvn	r3, #0
     680:	b	744 <eval_expression+0x23c>
     684:	ldrd	r2, [fp, #-52]	; 0xffffffcc
     688:	ldr	r0, [pc, #220]	; 76c <eval_expression+0x264>
     68c:	bl	0 <printf>
     690:	b	740 <eval_expression+0x238>
     694:	mov	r3, #0
     698:	str	r3, [fp, #-56]	; 0xffffffc8
     69c:	ldr	r3, [pc, #176]	; 754 <eval_expression+0x24c>
     6a0:	ldr	r0, [r3]
     6a4:	sub	r3, fp, #60	; 0x3c
     6a8:	sub	r2, fp, #56	; 0x38
     6ac:	ldr	r1, [fp, #-64]	; 0xffffffc0
     6b0:	bl	0 <coda_expression_eval_string>
     6b4:	mov	r3, r0
     6b8:	cmp	r3, #0
     6bc:	beq	6f0 <eval_expression+0x1e8>
     6c0:	bl	0 <coda_get_errno>
     6c4:	mov	r3, r0
     6c8:	ldr	r3, [r3]
     6cc:	mov	r0, r3
     6d0:	bl	0 <coda_errno_to_string>
     6d4:	mov	r3, r0
     6d8:	mov	r2, r3
     6dc:	ldr	r1, [pc, #140]	; 770 <eval_expression+0x268>
     6e0:	mvn	r0, #400	; 0x190
     6e4:	bl	0 <coda_set_error>
     6e8:	mvn	r3, #0
     6ec:	b	744 <eval_expression+0x23c>
     6f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
     6f4:	ldr	r2, [fp, #-60]	; 0xffffffc4
     6f8:	mov	r1, r2
     6fc:	mov	r0, r3
     700:	bl	0 <generate_escaped_string>
     704:	mov	r0, #10
     708:	bl	0 <putchar>
     70c:	ldr	r3, [fp, #-56]	; 0xffffffc8
     710:	cmp	r3, #0
     714:	beq	73c <eval_expression+0x234>
     718:	ldr	r3, [fp, #-56]	; 0xffffffc8
     71c:	mov	r0, r3
     720:	bl	0 <free>
     724:	b	73c <eval_expression+0x234>
     728:	ldr	r3, [pc, #68]	; 774 <eval_expression+0x26c>
     72c:	mov	r2, #230	; 0xe6
     730:	ldr	r1, [pc, #64]	; 778 <eval_expression+0x270>
     734:	ldr	r0, [pc, #64]	; 77c <eval_expression+0x274>
     738:	bl	0 <__assert_fail>
     73c:	nop			; (mov r0, r0)
     740:	mov	r3, #0
     744:	mov	r0, r3
     748:	sub	sp, fp, #4
     74c:	pop	{fp, pc}
     750:	.word	0x00000004
     754:	.word	0x00000000
     758:	.word	0x00000750
     75c:	.word	0x00000778
     760:	.word	0x00000780
     764:	.word	0x00000788
     768:	.word	0x000007b0
     76c:	.word	0x000007e0
     770:	.word	0x000007e8
     774:	.word	0x00000ad0
     778:	.word	0x00000810
     77c:	.word	0x00000860

00000780 <eval_expression_for_file>:
     780:	push	{r4, fp, lr}
     784:	add	fp, sp, #8
     788:	sub	sp, sp, #540	; 0x21c
     78c:	str	r0, [fp, #-544]	; 0xfffffde0
     790:	mov	r3, #0
     794:	str	r3, [fp, #-16]
     798:	sub	r3, fp, #16
     79c:	mov	r1, r3
     7a0:	ldr	r0, [fp, #-544]	; 0xfffffde0
     7a4:	bl	0 <coda_open>
     7a8:	mov	r3, r0
     7ac:	cmp	r3, #0
     7b0:	beq	7bc <eval_expression_for_file+0x3c>
     7b4:	mov	r3, #1
     7b8:	b	8d4 <eval_expression_for_file+0x154>
     7bc:	ldr	r2, [fp, #-16]
     7c0:	sub	r3, fp, #540	; 0x21c
     7c4:	mov	r1, r2
     7c8:	mov	r0, r3
     7cc:	bl	0 <coda_cursor_set_product>
     7d0:	mov	r3, r0
     7d4:	cmp	r3, #0
     7d8:	beq	7f0 <eval_expression_for_file+0x70>
     7dc:	ldr	r3, [fp, #-16]
     7e0:	mov	r0, r3
     7e4:	bl	0 <coda_close>
     7e8:	mov	r3, #1
     7ec:	b	8d4 <eval_expression_for_file+0x154>
     7f0:	ldr	r3, [pc, #232]	; 8e0 <eval_expression_for_file+0x160>
     7f4:	ldr	r3, [r3]
     7f8:	cmp	r3, #0
     7fc:	beq	868 <eval_expression_for_file+0xe8>
     800:	ldr	r3, [pc, #216]	; 8e0 <eval_expression_for_file+0x160>
     804:	ldr	r3, [r3]
     808:	sub	r2, fp, #540	; 0x21c
     80c:	mov	r1, r2
     810:	mov	r0, r3
     814:	bl	0 <coda_expression_eval_node>
     818:	mov	r3, r0
     81c:	cmp	r3, #0
     820:	beq	868 <eval_expression_for_file+0xe8>
     824:	ldr	r3, [pc, #184]	; 8e4 <eval_expression_for_file+0x164>
     828:	ldr	r4, [r3]
     82c:	bl	0 <coda_get_errno>
     830:	mov	r3, r0
     834:	ldr	r3, [r3]
     838:	mov	r0, r3
     83c:	bl	0 <coda_errno_to_string>
     840:	mov	r3, r0
     844:	mov	r2, r3
     848:	ldr	r1, [pc, #152]	; 8e8 <eval_expression_for_file+0x168>
     84c:	mov	r0, r4
     850:	bl	0 <fprintf>
     854:	ldr	r3, [fp, #-16]
     858:	mov	r0, r3
     85c:	bl	0 <coda_close>
     860:	mov	r3, #0
     864:	b	8d4 <eval_expression_for_file+0x154>
     868:	sub	r3, fp, #540	; 0x21c
     86c:	mov	r0, r3
     870:	bl	508 <eval_expression>
     874:	mov	r3, r0
     878:	cmp	r3, #0
     87c:	beq	8b0 <eval_expression_for_file+0x130>
     880:	ldr	r3, [pc, #92]	; 8e4 <eval_expression_for_file+0x164>
     884:	ldr	r4, [r3]
     888:	bl	0 <coda_get_errno>
     88c:	mov	r3, r0
     890:	ldr	r3, [r3]
     894:	mov	r0, r3
     898:	bl	0 <coda_errno_to_string>
     89c:	mov	r2, r0
     8a0:	ldr	r3, [fp, #-544]	; 0xfffffde0
     8a4:	ldr	r1, [pc, #64]	; 8ec <eval_expression_for_file+0x16c>
     8a8:	mov	r0, r4
     8ac:	bl	0 <fprintf>
     8b0:	ldr	r3, [fp, #-16]
     8b4:	mov	r0, r3
     8b8:	bl	0 <coda_close>
     8bc:	mov	r3, r0
     8c0:	cmp	r3, #0
     8c4:	beq	8d0 <eval_expression_for_file+0x150>
     8c8:	mov	r3, #1
     8cc:	b	8d4 <eval_expression_for_file+0x154>
     8d0:	mov	r3, #0
     8d4:	mov	r0, r3
     8d8:	sub	sp, fp, #8
     8dc:	pop	{r4, fp, pc}
     8e0:	.word	0x00000008
     8e4:	.word	0x00000000
     8e8:	.word	0x00000864
     8ec:	.word	0x00000894

000008f0 <callback>:
     8f0:	push	{fp, lr}
     8f4:	add	fp, sp, #4
     8f8:	sub	sp, sp, #16
     8fc:	str	r0, [fp, #-8]
     900:	str	r1, [fp, #-12]
     904:	str	r2, [fp, #-16]
     908:	str	r3, [fp, #-20]	; 0xffffffec
     90c:	ldr	r3, [fp, #-12]
     910:	cmp	r3, #0
     914:	bne	934 <callback+0x44>
     918:	ldr	r3, [pc, #140]	; 9ac <callback+0xbc>
     91c:	ldr	r0, [r3]
     920:	ldr	r3, [fp, #-8]
     924:	ldr	r2, [fp, #-16]
     928:	ldr	r1, [pc, #128]	; 9b0 <callback+0xc0>
     92c:	bl	0 <fprintf>
     930:	b	980 <callback+0x90>
     934:	ldr	r3, [fp, #-12]
     938:	cmp	r3, #2
     93c:	bne	95c <callback+0x6c>
     940:	ldr	r3, [pc, #100]	; 9ac <callback+0xbc>
     944:	ldr	r3, [r3]
     948:	ldr	r2, [fp, #-8]
     94c:	ldr	r1, [pc, #96]	; 9b4 <callback+0xc4>
     950:	mov	r0, r3
     954:	bl	0 <fprintf>
     958:	b	980 <callback+0x90>
     95c:	ldr	r3, [fp, #-12]
     960:	cmp	r3, #1
     964:	bne	980 <callback+0x90>
     968:	ldr	r3, [pc, #60]	; 9ac <callback+0xbc>
     96c:	ldr	r0, [r3]
     970:	ldr	r3, [fp, #-16]
     974:	ldr	r2, [fp, #-8]
     978:	ldr	r1, [pc, #56]	; 9b8 <callback+0xc8>
     97c:	bl	0 <fprintf>
     980:	ldr	r3, [fp, #-12]
     984:	cmp	r3, #4
     988:	bne	99c <callback+0xac>
     98c:	ldr	r0, [fp, #-8]
     990:	bl	780 <eval_expression_for_file>
     994:	mov	r3, r0
     998:	b	9a0 <callback+0xb0>
     99c:	mov	r3, #0
     9a0:	mov	r0, r3
     9a4:	sub	sp, fp, #4
     9a8:	pop	{fp, pc}
     9ac:	.word	0x00000000
     9b0:	.word	0x00000894
     9b4:	.word	0x000008a8
     9b8:	.word	0x000008d0

000009bc <main>:
     9bc:	push	{r4, fp, lr}
     9c0:	add	fp, sp, #8
     9c4:	sub	sp, sp, #36	; 0x24
     9c8:	str	r0, [fp, #-32]	; 0xffffffe0
     9cc:	str	r1, [fp, #-36]	; 0xffffffdc
     9d0:	mov	r3, #1
     9d4:	str	r3, [fp, #-16]
     9d8:	mov	r3, #0
     9dc:	str	r3, [fp, #-20]	; 0xffffffec
     9e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     9e4:	cmp	r3, #1
     9e8:	beq	a34 <main+0x78>
     9ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9f0:	add	r3, r3, #4
     9f4:	ldr	r3, [r3]
     9f8:	ldr	r1, [pc, #1768]	; 10e8 <main+0x72c>
     9fc:	mov	r0, r3
     a00:	bl	0 <strcmp>
     a04:	mov	r3, r0
     a08:	cmp	r3, #0
     a0c:	beq	a34 <main+0x78>
     a10:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a14:	add	r3, r3, #4
     a18:	ldr	r3, [r3]
     a1c:	ldr	r1, [pc, #1736]	; 10ec <main+0x730>
     a20:	mov	r0, r3
     a24:	bl	0 <strcmp>
     a28:	mov	r3, r0
     a2c:	cmp	r3, #0
     a30:	bne	a40 <main+0x84>
     a34:	bl	348 <print_help>
     a38:	mov	r0, #0
     a3c:	bl	0 <exit>
     a40:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a44:	add	r3, r3, #4
     a48:	ldr	r3, [r3]
     a4c:	ldr	r1, [pc, #1692]	; 10f0 <main+0x734>
     a50:	mov	r0, r3
     a54:	bl	0 <strcmp>
     a58:	mov	r3, r0
     a5c:	cmp	r3, #0
     a60:	beq	a88 <main+0xcc>
     a64:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a68:	add	r3, r3, #4
     a6c:	ldr	r3, [r3]
     a70:	ldr	r1, [pc, #1660]	; 10f4 <main+0x738>
     a74:	mov	r0, r3
     a78:	bl	0 <strcmp>
     a7c:	mov	r3, r0
     a80:	cmp	r3, #0
     a84:	bne	a94 <main+0xd8>
     a88:	bl	30c <print_version>
     a8c:	mov	r0, #0
     a90:	bl	0 <exit>
     a94:	mov	r3, #1
     a98:	str	r3, [fp, #-24]	; 0xffffffe8
     a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     aa0:	add	r2, r3, #1
     aa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     aa8:	cmp	r2, r3
     aac:	bge	b0c <main+0x150>
     ab0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ab4:	lsl	r3, r3, #2
     ab8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     abc:	add	r3, r2, r3
     ac0:	ldr	r3, [r3]
     ac4:	ldr	r1, [pc, #1580]	; 10f8 <main+0x73c>
     ac8:	mov	r0, r3
     acc:	bl	0 <strcmp>
     ad0:	mov	r3, r0
     ad4:	cmp	r3, #0
     ad8:	bne	b0c <main+0x150>
     adc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ae0:	add	r3, r3, #1
     ae4:	lsl	r3, r3, #2
     ae8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     aec:	add	r3, r2, r3
     af0:	ldr	r3, [r3]
     af4:	mov	r0, r3
     af8:	bl	0 <coda_set_definition_path>
     afc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b00:	add	r3, r3, #2
     b04:	str	r3, [fp, #-24]	; 0xffffffe8
     b08:	b	b70 <main+0x1b4>
     b0c:	ldr	r3, [pc, #1512]	; 10fc <main+0x740>
     b10:	str	r3, [fp, #-28]	; 0xffffffe4
     b14:	ldr	r3, [fp, #-36]	; 0xffffffdc
     b18:	ldr	r3, [r3]
     b1c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     b20:	mov	r1, #0
     b24:	mov	r0, r3
     b28:	bl	0 <coda_set_definition_path_conditional>
     b2c:	mov	r3, r0
     b30:	cmp	r3, #0
     b34:	beq	d68 <main+0x3ac>
     b38:	ldr	r3, [pc, #1472]	; 1100 <main+0x744>
     b3c:	ldr	r4, [r3]
     b40:	bl	0 <coda_get_errno>
     b44:	mov	r3, r0
     b48:	ldr	r3, [r3]
     b4c:	mov	r0, r3
     b50:	bl	0 <coda_errno_to_string>
     b54:	mov	r3, r0
     b58:	mov	r2, r3
     b5c:	ldr	r1, [pc, #1440]	; 1104 <main+0x748>
     b60:	mov	r0, r4
     b64:	bl	0 <fprintf>
     b68:	mov	r0, #1
     b6c:	bl	0 <exit>
     b70:	b	d68 <main+0x3ac>
     b74:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b78:	lsl	r3, r3, #2
     b7c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     b80:	add	r3, r2, r3
     b84:	ldr	r3, [r3]
     b88:	ldr	r1, [pc, #1400]	; 1108 <main+0x74c>
     b8c:	mov	r0, r3
     b90:	bl	0 <strcmp>
     b94:	mov	r3, r0
     b98:	cmp	r3, #0
     b9c:	beq	bcc <main+0x210>
     ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ba4:	lsl	r3, r3, #2
     ba8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     bac:	add	r3, r2, r3
     bb0:	ldr	r3, [r3]
     bb4:	ldr	r1, [pc, #1360]	; 110c <main+0x750>
     bb8:	mov	r0, r3
     bbc:	bl	0 <strcmp>
     bc0:	mov	r3, r0
     bc4:	cmp	r3, #0
     bc8:	bne	bd8 <main+0x21c>
     bcc:	mov	r3, #1
     bd0:	str	r3, [fp, #-20]	; 0xffffffec
     bd4:	b	d5c <main+0x3a0>
     bd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     bdc:	lsl	r3, r3, #2
     be0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     be4:	add	r3, r2, r3
     be8:	ldr	r3, [r3]
     bec:	ldr	r1, [pc, #1308]	; 1110 <main+0x754>
     bf0:	mov	r0, r3
     bf4:	bl	0 <strcmp>
     bf8:	mov	r3, r0
     bfc:	cmp	r3, #0
     c00:	beq	c30 <main+0x274>
     c04:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c08:	lsl	r3, r3, #2
     c0c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c10:	add	r3, r2, r3
     c14:	ldr	r3, [r3]
     c18:	ldr	r1, [pc, #1268]	; 1114 <main+0x758>
     c1c:	mov	r0, r3
     c20:	bl	0 <strcmp>
     c24:	mov	r3, r0
     c28:	cmp	r3, #0
     c2c:	bne	c3c <main+0x280>
     c30:	mov	r3, #0
     c34:	str	r3, [fp, #-16]
     c38:	b	d5c <main+0x3a0>
     c3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c40:	lsl	r3, r3, #2
     c44:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c48:	add	r3, r2, r3
     c4c:	ldr	r3, [r3]
     c50:	ldr	r1, [pc, #1216]	; 1118 <main+0x75c>
     c54:	mov	r0, r3
     c58:	bl	0 <strcmp>
     c5c:	mov	r3, r0
     c60:	cmp	r3, #0
     c64:	bne	d18 <main+0x35c>
     c68:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c6c:	add	r2, r3, #1
     c70:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c74:	cmp	r2, r3
     c78:	bge	d18 <main+0x35c>
     c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c80:	add	r3, r3, #1
     c84:	lsl	r3, r3, #2
     c88:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c8c:	add	r3, r2, r3
     c90:	ldr	r3, [r3]
     c94:	ldrb	r3, [r3]
     c98:	cmp	r3, #45	; 0x2d
     c9c:	beq	d18 <main+0x35c>
     ca0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ca4:	add	r3, r3, #1
     ca8:	lsl	r3, r3, #2
     cac:	ldr	r2, [fp, #-36]	; 0xffffffdc
     cb0:	add	r3, r2, r3
     cb4:	ldr	r3, [r3]
     cb8:	ldr	r1, [pc, #1116]	; 111c <main+0x760>
     cbc:	mov	r0, r3
     cc0:	bl	0 <coda_expression_from_string>
     cc4:	mov	r3, r0
     cc8:	cmp	r3, #0
     ccc:	beq	d08 <main+0x34c>
     cd0:	ldr	r3, [pc, #1064]	; 1100 <main+0x744>
     cd4:	ldr	r4, [r3]
     cd8:	bl	0 <coda_get_errno>
     cdc:	mov	r3, r0
     ce0:	ldr	r3, [r3]
     ce4:	mov	r0, r3
     ce8:	bl	0 <coda_errno_to_string>
     cec:	mov	r3, r0
     cf0:	mov	r2, r3
     cf4:	ldr	r1, [pc, #1060]	; 1120 <main+0x764>
     cf8:	mov	r0, r4
     cfc:	bl	0 <fprintf>
     d00:	mov	r0, #1
     d04:	bl	0 <exit>
     d08:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d0c:	add	r3, r3, #1
     d10:	str	r3, [fp, #-24]	; 0xffffffe8
     d14:	b	d5c <main+0x3a0>
     d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d1c:	lsl	r3, r3, #2
     d20:	ldr	r2, [fp, #-36]	; 0xffffffdc
     d24:	add	r3, r2, r3
     d28:	ldr	r3, [r3]
     d2c:	ldrb	r3, [r3]
     d30:	cmp	r3, #45	; 0x2d
     d34:	bne	d7c <main+0x3c0>
     d38:	ldr	r3, [pc, #960]	; 1100 <main+0x744>
     d3c:	ldr	r3, [r3]
     d40:	mov	r2, #25
     d44:	mov	r1, #1
     d48:	ldr	r0, [pc, #980]	; 1124 <main+0x768>
     d4c:	bl	0 <fwrite>
     d50:	bl	348 <print_help>
     d54:	mov	r0, #1
     d58:	bl	0 <exit>
     d5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d60:	add	r3, r3, #1
     d64:	str	r3, [fp, #-24]	; 0xffffffe8
     d68:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d70:	cmp	r2, r3
     d74:	blt	b74 <main+0x1b8>
     d78:	b	d80 <main+0x3c4>
     d7c:	nop			; (mov r0, r0)
     d80:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d84:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d88:	cmp	r2, r3
     d8c:	blt	db4 <main+0x3f8>
     d90:	ldr	r3, [pc, #872]	; 1100 <main+0x744>
     d94:	ldr	r3, [r3]
     d98:	mov	r2, #25
     d9c:	mov	r1, #1
     da0:	ldr	r0, [pc, #892]	; 1124 <main+0x768>
     da4:	bl	0 <fwrite>
     da8:	bl	348 <print_help>
     dac:	mov	r0, #1
     db0:	bl	0 <exit>
     db4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     db8:	lsl	r3, r3, #2
     dbc:	ldr	r2, [fp, #-36]	; 0xffffffdc
     dc0:	add	r3, r2, r3
     dc4:	ldr	r3, [r3]
     dc8:	ldr	r1, [pc, #856]	; 1128 <main+0x76c>
     dcc:	mov	r0, r3
     dd0:	bl	0 <coda_expression_from_string>
     dd4:	mov	r3, r0
     dd8:	cmp	r3, #0
     ddc:	beq	e18 <main+0x45c>
     de0:	ldr	r3, [pc, #792]	; 1100 <main+0x744>
     de4:	ldr	r4, [r3]
     de8:	bl	0 <coda_get_errno>
     dec:	mov	r3, r0
     df0:	ldr	r3, [r3]
     df4:	mov	r0, r3
     df8:	bl	0 <coda_errno_to_string>
     dfc:	mov	r3, r0
     e00:	mov	r2, r3
     e04:	ldr	r1, [pc, #800]	; 112c <main+0x770>
     e08:	mov	r0, r4
     e0c:	bl	0 <fprintf>
     e10:	mov	r0, #1
     e14:	bl	0 <exit>
     e18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e1c:	add	r3, r3, #1
     e20:	str	r3, [fp, #-24]	; 0xffffffe8
     e24:	ldr	r3, [pc, #764]	; 1128 <main+0x76c>
     e28:	ldr	r3, [r3]
     e2c:	ldr	r1, [pc, #764]	; 1130 <main+0x774>
     e30:	mov	r0, r3
     e34:	bl	0 <coda_expression_get_type>
     e38:	mov	r3, r0
     e3c:	cmp	r3, #0
     e40:	beq	e7c <main+0x4c0>
     e44:	ldr	r3, [pc, #692]	; 1100 <main+0x744>
     e48:	ldr	r4, [r3]
     e4c:	bl	0 <coda_get_errno>
     e50:	mov	r3, r0
     e54:	ldr	r3, [r3]
     e58:	mov	r0, r3
     e5c:	bl	0 <coda_errno_to_string>
     e60:	mov	r3, r0
     e64:	mov	r2, r3
     e68:	ldr	r1, [pc, #660]	; 1104 <main+0x748>
     e6c:	mov	r0, r4
     e70:	bl	0 <fprintf>
     e74:	mov	r0, #1
     e78:	bl	0 <exit>
     e7c:	ldr	r3, [pc, #684]	; 1130 <main+0x774>
     e80:	ldr	r3, [r3]
     e84:	cmp	r3, #4
     e88:	beq	e9c <main+0x4e0>
     e8c:	ldr	r3, [pc, #668]	; 1130 <main+0x774>
     e90:	ldr	r3, [r3]
     e94:	cmp	r3, #5
     e98:	bne	ed0 <main+0x514>
     e9c:	ldr	r3, [pc, #604]	; 1100 <main+0x744>
     ea0:	ldr	r4, [r3]
     ea4:	ldr	r3, [pc, #644]	; 1130 <main+0x774>
     ea8:	ldr	r3, [r3]
     eac:	mov	r0, r3
     eb0:	bl	0 <coda_expression_get_type_name>
     eb4:	mov	r3, r0
     eb8:	mov	r2, r3
     ebc:	ldr	r1, [pc, #624]	; 1134 <main+0x778>
     ec0:	mov	r0, r4
     ec4:	bl	0 <fprintf>
     ec8:	mov	r0, #1
     ecc:	bl	0 <exit>
     ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ed4:	cmp	r3, #0
     ed8:	beq	f14 <main+0x558>
     edc:	ldr	r3, [pc, #580]	; 1128 <main+0x76c>
     ee0:	ldr	r3, [r3]
     ee4:	mov	r0, r3
     ee8:	bl	0 <coda_expression_delete>
     eec:	ldr	r3, [pc, #552]	; 111c <main+0x760>
     ef0:	ldr	r3, [r3]
     ef4:	cmp	r3, #0
     ef8:	beq	f0c <main+0x550>
     efc:	ldr	r3, [pc, #536]	; 111c <main+0x760>
     f00:	ldr	r3, [r3]
     f04:	mov	r0, r3
     f08:	bl	0 <coda_expression_delete>
     f0c:	mov	r3, #0
     f10:	b	10dc <main+0x720>
     f14:	ldr	r2, [fp, #-24]	; 0xffffffe8
     f18:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f1c:	cmp	r2, r3
     f20:	bge	ff0 <main+0x634>
     f24:	bl	0 <coda_init>
     f28:	mov	r3, r0
     f2c:	cmp	r3, #0
     f30:	beq	f6c <main+0x5b0>
     f34:	ldr	r3, [pc, #452]	; 1100 <main+0x744>
     f38:	ldr	r4, [r3]
     f3c:	bl	0 <coda_get_errno>
     f40:	mov	r3, r0
     f44:	ldr	r3, [r3]
     f48:	mov	r0, r3
     f4c:	bl	0 <coda_errno_to_string>
     f50:	mov	r3, r0
     f54:	mov	r2, r3
     f58:	ldr	r1, [pc, #420]	; 1104 <main+0x748>
     f5c:	mov	r0, r4
     f60:	bl	0 <fprintf>
     f64:	mov	r0, #1
     f68:	bl	0 <exit>
     f6c:	ldr	r0, [fp, #-16]
     f70:	bl	0 <coda_set_option_perform_conversions>
     f74:	ldr	r2, [fp, #-32]	; 0xffffffe0
     f78:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f7c:	sub	r1, r2, r3
     f80:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f84:	lsl	r3, r3, #2
     f88:	ldr	r2, [fp, #-36]	; 0xffffffdc
     f8c:	add	r2, r2, r3
     f90:	mov	r3, #0
     f94:	str	r3, [sp]
     f98:	ldr	r3, [pc, #408]	; 1138 <main+0x77c>
     f9c:	mov	r0, #0
     fa0:	bl	0 <coda_match_filefilter>
     fa4:	mov	r3, r0
     fa8:	cmp	r3, #0
     fac:	beq	fe8 <main+0x62c>
     fb0:	ldr	r3, [pc, #328]	; 1100 <main+0x744>
     fb4:	ldr	r4, [r3]
     fb8:	bl	0 <coda_get_errno>
     fbc:	mov	r3, r0
     fc0:	ldr	r3, [r3]
     fc4:	mov	r0, r3
     fc8:	bl	0 <coda_errno_to_string>
     fcc:	mov	r3, r0
     fd0:	mov	r2, r3
     fd4:	ldr	r1, [pc, #296]	; 1104 <main+0x748>
     fd8:	mov	r0, r4
     fdc:	bl	0 <fprintf>
     fe0:	mov	r0, #1
     fe4:	bl	0 <exit>
     fe8:	bl	0 <coda_done>
     fec:	b	10a8 <main+0x6ec>
     ff0:	ldr	r3, [pc, #292]	; 111c <main+0x760>
     ff4:	ldr	r3, [r3]
     ff8:	cmp	r3, #0
     ffc:	beq	1020 <main+0x664>
    1000:	ldr	r3, [pc, #248]	; 1100 <main+0x744>
    1004:	ldr	r3, [r3]
    1008:	mov	r2, #96	; 0x60
    100c:	mov	r1, #1
    1010:	ldr	r0, [pc, #292]	; 113c <main+0x780>
    1014:	bl	0 <fwrite>
    1018:	mov	r0, #1
    101c:	bl	0 <exit>
    1020:	ldr	r3, [pc, #256]	; 1128 <main+0x76c>
    1024:	ldr	r3, [r3]
    1028:	mov	r0, r3
    102c:	bl	0 <coda_expression_is_constant>
    1030:	mov	r3, r0
    1034:	cmp	r3, #0
    1038:	bne	105c <main+0x6a0>
    103c:	ldr	r3, [pc, #188]	; 1100 <main+0x744>
    1040:	ldr	r3, [r3]
    1044:	mov	r2, #111	; 0x6f
    1048:	mov	r1, #1
    104c:	ldr	r0, [pc, #236]	; 1140 <main+0x784>
    1050:	bl	0 <fwrite>
    1054:	mov	r0, #1
    1058:	bl	0 <exit>
    105c:	mov	r0, #0
    1060:	bl	508 <eval_expression>
    1064:	mov	r3, r0
    1068:	cmp	r3, #0
    106c:	beq	10a8 <main+0x6ec>
    1070:	ldr	r3, [pc, #136]	; 1100 <main+0x744>
    1074:	ldr	r4, [r3]
    1078:	bl	0 <coda_get_errno>
    107c:	mov	r3, r0
    1080:	ldr	r3, [r3]
    1084:	mov	r0, r3
    1088:	bl	0 <coda_errno_to_string>
    108c:	mov	r3, r0
    1090:	mov	r2, r3
    1094:	ldr	r1, [pc, #104]	; 1104 <main+0x748>
    1098:	mov	r0, r4
    109c:	bl	0 <fprintf>
    10a0:	mov	r0, #1
    10a4:	bl	0 <exit>
    10a8:	ldr	r3, [pc, #120]	; 1128 <main+0x76c>
    10ac:	ldr	r3, [r3]
    10b0:	mov	r0, r3
    10b4:	bl	0 <coda_expression_delete>
    10b8:	ldr	r3, [pc, #92]	; 111c <main+0x760>
    10bc:	ldr	r3, [r3]
    10c0:	cmp	r3, #0
    10c4:	beq	10d8 <main+0x71c>
    10c8:	ldr	r3, [pc, #76]	; 111c <main+0x760>
    10cc:	ldr	r3, [r3]
    10d0:	mov	r0, r3
    10d4:	bl	0 <coda_expression_delete>
    10d8:	mov	r3, #0
    10dc:	mov	r0, r3
    10e0:	sub	sp, fp, #8
    10e4:	pop	{r4, fp, pc}
    10e8:	.word	0x000008f4
    10ec:	.word	0x000008f8
    10f0:	.word	0x00000900
    10f4:	.word	0x00000904
    10f8:	.word	0x00000910
    10fc:	.word	0x00000914
    1100:	.word	0x00000000
    1104:	.word	0x00000930
    1108:	.word	0x0000093c
    110c:	.word	0x00000940
    1110:	.word	0x00000948
    1114:	.word	0x0000094c
    1118:	.word	0x00000964
    111c:	.word	0x00000008
    1120:	.word	0x00000968
    1124:	.word	0x00000990
    1128:	.word	0x00000000
    112c:	.word	0x000009ac
    1130:	.word	0x00000004
    1134:	.word	0x000009cc
    1138:	.word	0x00000000
    113c:	.word	0x000009fc
    1140:	.word	0x00000a60
