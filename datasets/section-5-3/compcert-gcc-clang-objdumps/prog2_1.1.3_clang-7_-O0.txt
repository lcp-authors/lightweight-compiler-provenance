
../compcert-repos/prog2/1.1.3:     file format elf32-littlearm


Disassembly of section .init:

00010674 <.init>:
   10674:	push	{r3, lr}
   10678:	bl	10730 <_start@@Base+0x3c>
   1067c:	pop	{r3, pc}

Disassembly of section .plt:

00010680 <printf@plt-0x14>:
   10680:	push	{lr}		; (str lr, [sp, #-4]!)
   10684:	ldr	lr, [pc, #4]	; 10690 <printf@plt-0x4>
   10688:	add	lr, pc, lr
   1068c:	ldr	pc, [lr, #8]!
   10690:	andeq	r0, r1, r0, ror r9

00010694 <printf@plt>:
   10694:	add	ip, pc, #0, 12
   10698:	add	ip, ip, #16, 20	; 0x10000
   1069c:	ldr	pc, [ip, #2416]!	; 0x970

000106a0 <fopen@plt>:
   106a0:	add	ip, pc, #0, 12
   106a4:	add	ip, ip, #16, 20	; 0x10000
   106a8:	ldr	pc, [ip, #2408]!	; 0x968

000106ac <__libc_start_main@plt>:
   106ac:	add	ip, pc, #0, 12
   106b0:	add	ip, ip, #16, 20	; 0x10000
   106b4:	ldr	pc, [ip, #2400]!	; 0x960

000106b8 <__gmon_start__@plt>:
   106b8:	add	ip, pc, #0, 12
   106bc:	add	ip, ip, #16, 20	; 0x10000
   106c0:	ldr	pc, [ip, #2392]!	; 0x958

000106c4 <memset@plt>:
   106c4:	add	ip, pc, #0, 12
   106c8:	add	ip, ip, #16, 20	; 0x10000
   106cc:	ldr	pc, [ip, #2384]!	; 0x950

000106d0 <fclose@plt>:
   106d0:	add	ip, pc, #0, 12
   106d4:	add	ip, ip, #16, 20	; 0x10000
   106d8:	ldr	pc, [ip, #2376]!	; 0x948

000106dc <abort@plt>:
   106dc:	add	ip, pc, #0, 12
   106e0:	add	ip, ip, #16, 20	; 0x10000
   106e4:	ldr	pc, [ip, #2368]!	; 0x940

000106e8 <getc@plt>:
   106e8:	add	ip, pc, #0, 12
   106ec:	add	ip, ip, #16, 20	; 0x10000
   106f0:	ldr	pc, [ip, #2360]!	; 0x938

Disassembly of section .text:

000106f4 <_start@@Base>:
   106f4:	mov	fp, #0
   106f8:	mov	lr, #0
   106fc:	pop	{r1}		; (ldr r1, [sp], #4)
   10700:	mov	r2, sp
   10704:	push	{r2}		; (str r2, [sp, #-4]!)
   10708:	push	{r0}		; (str r0, [sp, #-4]!)
   1070c:	ldr	ip, [pc, #16]	; 10724 <_start@@Base+0x30>
   10710:	push	{ip}		; (str ip, [sp, #-4]!)
   10714:	ldr	r0, [pc, #12]	; 10728 <_start@@Base+0x34>
   10718:	ldr	r3, [pc, #12]	; 1072c <_start@@Base+0x38>
   1071c:	bl	106ac <__libc_start_main@plt>
   10720:	bl	106dc <abort@plt>
   10724:			; <UNDEFINED> instruction: 0x00010ab8
   10728:	andeq	r0, r1, r0, ror #16
   1072c:	andeq	r0, r1, r8, asr sl
   10730:	ldr	r3, [pc, #20]	; 1074c <_start@@Base+0x58>
   10734:	ldr	r2, [pc, #20]	; 10750 <_start@@Base+0x5c>
   10738:	add	r3, pc, r3
   1073c:	ldr	r2, [r3, r2]
   10740:	cmp	r2, #0
   10744:	bxeq	lr
   10748:	b	106b8 <__gmon_start__@plt>
   1074c:	andeq	r0, r1, r0, asr #17
   10750:	andeq	r0, r0, ip, lsr #32
   10754:	ldr	r0, [pc, #24]	; 10774 <_start@@Base+0x80>
   10758:	ldr	r3, [pc, #24]	; 10778 <_start@@Base+0x84>
   1075c:	cmp	r3, r0
   10760:	bxeq	lr
   10764:	ldr	r3, [pc, #16]	; 1077c <_start@@Base+0x88>
   10768:	cmp	r3, #0
   1076c:	bxeq	lr
   10770:	bx	r3
   10774:	andeq	r1, r2, r8, lsr r0
   10778:	andeq	r1, r2, r8, lsr r0
   1077c:	andeq	r0, r0, r0
   10780:	ldr	r0, [pc, #36]	; 107ac <_start@@Base+0xb8>
   10784:	ldr	r1, [pc, #36]	; 107b0 <_start@@Base+0xbc>
   10788:	sub	r1, r1, r0
   1078c:	asr	r1, r1, #2
   10790:	add	r1, r1, r1, lsr #31
   10794:	asrs	r1, r1, #1
   10798:	bxeq	lr
   1079c:	ldr	r3, [pc, #16]	; 107b4 <_start@@Base+0xc0>
   107a0:	cmp	r3, #0
   107a4:	bxeq	lr
   107a8:	bx	r3
   107ac:	andeq	r1, r2, r8, lsr r0
   107b0:	andeq	r1, r2, r8, lsr r0
   107b4:	andeq	r0, r0, r0
   107b8:	push	{r4, lr}
   107bc:	ldr	r4, [pc, #24]	; 107dc <_start@@Base+0xe8>
   107c0:	ldrb	r3, [r4]
   107c4:	cmp	r3, #0
   107c8:	popne	{r4, pc}
   107cc:	bl	10754 <_start@@Base+0x60>
   107d0:	mov	r3, #1
   107d4:	strb	r3, [r4]
   107d8:	pop	{r4, pc}
   107dc:	andeq	r1, r2, r8, lsr r0
   107e0:	b	10780 <_start@@Base+0x8c>

000107e4 <in_array@@Base>:
   107e4:	sub	sp, sp, #20
   107e8:	str	r0, [sp, #12]
   107ec:	str	r1, [sp, #8]
   107f0:	str	r2, [sp, #4]
   107f4:	movw	r0, #0
   107f8:	str	r0, [sp]
   107fc:	str	r0, [sp]
   10800:	ldr	r0, [sp]
   10804:	ldr	r1, [sp, #4]
   10808:	cmp	r0, r1
   1080c:	bgt	1084c <in_array@@Base+0x68>
   10810:	ldr	r0, [sp, #8]
   10814:	ldr	r1, [sp]
   10818:	add	r0, r0, r1, lsl #2
   1081c:	ldr	r0, [r0]
   10820:	ldr	r1, [sp, #12]
   10824:	cmp	r0, r1
   10828:	bne	10838 <in_array@@Base+0x54>
   1082c:	movw	r0, #1
   10830:	str	r0, [sp, #16]
   10834:	b	10854 <in_array@@Base+0x70>
   10838:	b	1083c <in_array@@Base+0x58>
   1083c:	ldr	r0, [sp]
   10840:	add	r0, r0, #1
   10844:	str	r0, [sp]
   10848:	b	10800 <in_array@@Base+0x1c>
   1084c:	movw	r0, #0
   10850:	str	r0, [sp, #16]
   10854:	ldr	r0, [sp, #16]
   10858:	add	sp, sp, #20
   1085c:	bx	lr

00010860 <main@@Base>:
   10860:	push	{fp, lr}
   10864:	mov	fp, sp
   10868:	sub	sp, sp, #72	; 0x48
   1086c:	movw	r0, #0
   10870:	str	r0, [fp, #-4]
   10874:	movw	r0, #2760	; 0xac8
   10878:	movt	r0, #1
   1087c:	ldr	r1, [r0]
   10880:	str	r1, [fp, #-16]
   10884:	ldr	r0, [r0, #4]
   10888:	str	r0, [fp, #-12]
   1088c:	movw	r0, #2768	; 0xad0
   10890:	movt	r0, #1
   10894:	ldr	r1, [r0]
   10898:	str	r1, [fp, #-24]	; 0xffffffe8
   1089c:	ldr	r0, [r0, #4]
   108a0:	str	r0, [fp, #-20]	; 0xffffffec
   108a4:	movw	r0, #2776	; 0xad8
   108a8:	movt	r0, #1
   108ac:	ldr	r1, [r0]
   108b0:	str	r1, [fp, #-32]	; 0xffffffe0
   108b4:	ldr	r0, [r0, #4]
   108b8:	str	r0, [fp, #-28]	; 0xffffffe4
   108bc:	movw	r0, #2784	; 0xae0
   108c0:	movt	r0, #1
   108c4:	movw	r1, #2812	; 0xafc
   108c8:	movt	r1, #1
   108cc:	bl	106a0 <fopen@plt>
   108d0:	str	r0, [fp, #-8]
   108d4:	movw	r0, #0
   108d8:	str	r0, [sp, #36]	; 0x24
   108dc:	add	r0, sp, #24
   108e0:	movw	r1, #0
   108e4:	and	r1, r1, #255	; 0xff
   108e8:	movw	r2, #12
   108ec:	bl	106c4 <memset@plt>
   108f0:	movw	r0, #2864	; 0xb30
   108f4:	movt	r0, #1
   108f8:	ldrb	r1, [r0]
   108fc:	strb	r1, [sp, #21]
   10900:	ldrb	r1, [r0, #1]
   10904:	strb	r1, [sp, #22]
   10908:	ldrb	r0, [r0, #2]
   1090c:	strb	r0, [sp, #23]
   10910:	ldr	r0, [sp, #36]	; 0x24
   10914:	cmn	r0, #1
   10918:	beq	109c4 <main@@Base+0x164>
   1091c:	ldr	r0, [fp, #-8]
   10920:	bl	106e8 <getc@plt>
   10924:	str	r0, [sp, #36]	; 0x24
   10928:	ldr	r0, [sp, #36]	; 0x24
   1092c:	cmp	r0, #195	; 0xc3
   10930:	bne	109c0 <main@@Base+0x160>
   10934:	ldr	r0, [fp, #-8]
   10938:	bl	106e8 <getc@plt>
   1093c:	sub	r1, fp, #16
   10940:	str	r0, [sp, #36]	; 0x24
   10944:	ldr	r0, [sp, #36]	; 0x24
   10948:	movw	r2, #2
   1094c:	bl	107e4 <in_array@@Base>
   10950:	cmp	r0, #0
   10954:	beq	10968 <main@@Base+0x108>
   10958:	ldr	r0, [sp, #24]
   1095c:	add	r0, r0, #1
   10960:	str	r0, [sp, #24]
   10964:	b	109bc <main@@Base+0x15c>
   10968:	sub	r1, fp, #24
   1096c:	ldr	r0, [sp, #36]	; 0x24
   10970:	movw	r2, #2
   10974:	bl	107e4 <in_array@@Base>
   10978:	cmp	r0, #0
   1097c:	beq	10990 <main@@Base+0x130>
   10980:	ldr	r0, [sp, #28]
   10984:	add	r0, r0, #1
   10988:	str	r0, [sp, #28]
   1098c:	b	109b8 <main@@Base+0x158>
   10990:	sub	r1, fp, #32
   10994:	ldr	r0, [sp, #36]	; 0x24
   10998:	movw	r2, #2
   1099c:	bl	107e4 <in_array@@Base>
   109a0:	cmp	r0, #0
   109a4:	beq	109b4 <main@@Base+0x154>
   109a8:	ldr	r0, [sp, #32]
   109ac:	add	r0, r0, #1
   109b0:	str	r0, [sp, #32]
   109b4:	b	109b8 <main@@Base+0x158>
   109b8:	b	109bc <main@@Base+0x15c>
   109bc:	b	109c0 <main@@Base+0x160>
   109c0:	b	10910 <main@@Base+0xb0>
   109c4:	ldr	r0, [sp, #16]
   109c8:	str	r0, [sp, #12]
   109cc:	ldr	r0, [fp, #-8]
   109d0:	bl	106d0 <fclose@plt>
   109d4:	movw	lr, #0
   109d8:	str	lr, [sp, #16]
   109dc:	str	r0, [sp, #8]
   109e0:	ldr	r0, [sp, #16]
   109e4:	cmp	r0, #2
   109e8:	bge	10a24 <main@@Base+0x1c4>
   109ec:	ldr	r0, [sp, #16]
   109f0:	add	r1, sp, #21
   109f4:	ldrb	r1, [r1, r0]
   109f8:	add	r2, sp, #24
   109fc:	add	r0, r2, r0, lsl #2
   10a00:	ldr	r2, [r0]
   10a04:	movw	r0, #2814	; 0xafe
   10a08:	movt	r0, #1
   10a0c:	bl	10694 <printf@plt>
   10a10:	str	r0, [sp, #4]
   10a14:	ldr	r0, [sp, #16]
   10a18:	add	r0, r0, #1
   10a1c:	str	r0, [sp, #16]
   10a20:	b	109e0 <main@@Base+0x180>
   10a24:	ldr	r0, [sp, #16]
   10a28:	add	r1, sp, #21
   10a2c:	add	r0, r1, r0
   10a30:	ldrb	r1, [r0]
   10a34:	ldr	r2, [sp, #32]
   10a38:	movw	r0, #2837	; 0xb15
   10a3c:	movt	r0, #1
   10a40:	bl	10694 <printf@plt>
   10a44:	ldr	r1, [fp, #-4]
   10a48:	str	r0, [sp]
   10a4c:	mov	r0, r1
   10a50:	mov	sp, fp
   10a54:	pop	{fp, pc}

00010a58 <__libc_csu_init@@Base>:
   10a58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a5c:	mov	r7, r0
   10a60:	ldr	r6, [pc, #72]	; 10ab0 <__libc_csu_init@@Base+0x58>
   10a64:	ldr	r5, [pc, #72]	; 10ab4 <__libc_csu_init@@Base+0x5c>
   10a68:	add	r6, pc, r6
   10a6c:	add	r5, pc, r5
   10a70:	sub	r6, r6, r5
   10a74:	mov	r8, r1
   10a78:	mov	r9, r2
   10a7c:	bl	10674 <printf@plt-0x20>
   10a80:	asrs	r6, r6, #2
   10a84:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a88:	mov	r4, #0
   10a8c:	add	r4, r4, #1
   10a90:	ldr	r3, [r5], #4
   10a94:	mov	r2, r9
   10a98:	mov	r1, r8
   10a9c:	mov	r0, r7
   10aa0:	blx	r3
   10aa4:	cmp	r6, r4
   10aa8:	bne	10a8c <__libc_csu_init@@Base+0x34>
   10aac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ab0:	muleq	r1, ip, r4
   10ab4:	muleq	r1, r4, r4

00010ab8 <__libc_csu_fini@@Base>:
   10ab8:	bx	lr

Disassembly of section .fini:

00010abc <.fini>:
   10abc:	push	{r3, lr}
   10ac0:	pop	{r3, pc}
