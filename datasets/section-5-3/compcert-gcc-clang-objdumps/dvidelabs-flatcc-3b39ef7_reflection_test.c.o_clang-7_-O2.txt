
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/CMakeFiles/reflection_test.dir/reflection_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <test_schema>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #4
   c:	movw	r1, #0
  10:	movt	r1, #0
  14:	bl	0 <fopen>
  18:	cmp	r0, #0
  1c:	beq	270 <test_schema+0x270>
  20:	mov	r1, #0
  24:	mov	r2, #2
  28:	mov	r5, r0
  2c:	bl	0 <fseek>
  30:	mov	r0, r5
  34:	bl	0 <ftell>
  38:	mov	r6, r0
  3c:	movw	r0, #10000	; 0x2710
  40:	cmp	r6, r0
  44:	bhi	268 <test_schema+0x268>
  48:	mov	r0, r5
  4c:	bl	0 <rewind>
  50:	cmp	r6, #0
  54:	mov	r0, r6
  58:	movweq	r0, #1
  5c:	bl	0 <malloc>
  60:	cmp	r0, #0
  64:	beq	268 <test_schema+0x268>
  68:	mov	r8, r0
  6c:	mov	r1, #0
  70:	mov	r4, r1
  74:	add	r0, r8, r1
  78:	sub	r2, r6, r1
  7c:	mov	r1, #1
  80:	mov	r3, r5
  84:	bl	0 <fread_unlocked>
  88:	add	r1, r0, r4
  8c:	cmp	r0, #0
  90:	bne	70 <test_schema+0x70>
  94:	mov	r0, r5
  98:	bl	0 <fclose>
  9c:	cmp	r6, r4
  a0:	bne	28c <test_schema+0x28c>
  a4:	ldr	r0, [r8, #4]
  a8:	movw	r1, #17986	; 0x4642
  ac:	movt	r1, #21314	; 0x5342
  b0:	cmp	r0, r1
  b4:	bne	640 <test_schema+0x640>
  b8:	ldr	r1, [r8]
  bc:	mov	r0, r8
  c0:	ldr	r2, [r0, r1]!
  c4:	mov	r1, r0
  c8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
  cc:	cmp	r2, #5
  d0:	bls	634 <test_schema+0x634>
  d4:	ldrh	r1, [r1, #4]
  d8:	cmp	r1, #0
  dc:	beq	634 <test_schema+0x634>
  e0:	ldr	r1, [r0, r1]!
  e4:	ldr	r1, [r0, r1]!
  e8:	cmp	r1, #0
  ec:	beq	24c <test_schema+0x24c>
  f0:	movw	r9, #0
  f4:	add	r6, r0, #4
  f8:	mov	r5, #0
  fc:	movt	r9, #0
 100:	mov	r7, r6
 104:	ldr	r0, [r7]
 108:	adds	r1, r7, r0
 10c:	beq	5f4 <test_schema+0x5f4>
 110:	ldr	r1, [r7, r0]
 114:	sub	r1, r0, r1
 118:	add	r1, r7, r1
 11c:	ldrh	r2, [r1]
 120:	cmp	r2, #6
 124:	bcc	5e8 <test_schema+0x5e8>
 128:	ldrh	r1, [r1, #4]
 12c:	cmp	r1, #0
 130:	beq	5e8 <test_schema+0x5e8>
 134:	add	r2, r0, r1
 138:	ldr	r2, [r7, r2]
 13c:	add	r0, r2, r0
 140:	add	r0, r0, r1
 144:	mov	r1, r5
 148:	add	r0, r7, r0
 14c:	add	r2, r0, #4
 150:	mov	r0, r9
 154:	bl	0 <printf>
 158:	ldr	r4, [r6, #-4]
 15c:	add	r5, r5, #1
 160:	add	r7, r7, #4
 164:	cmp	r5, r4
 168:	bcc	104 <test_schema+0x104>
 16c:	cmp	r4, #0
 170:	beq	24c <test_schema+0x24c>
 174:	mov	sl, #0
 178:	subs	r5, r4, #1
 17c:	beq	1fc <test_schema+0x1fc>
 180:	movw	r9, #0
 184:	movt	r9, #0
 188:	sub	r0, r5, sl
 18c:	add	r7, sl, r0, lsr #1
 190:	cmp	r4, r7
 194:	bls	614 <test_schema+0x614>
 198:	mov	r0, r6
 19c:	ldr	r1, [r0, r7, lsl #2]!
 1a0:	adds	r0, r0, r1
 1a4:	beq	5f4 <test_schema+0x5f4>
 1a8:	ldr	r2, [r0]
 1ac:	mov	r1, r0
 1b0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
 1b4:	cmp	r2, #6
 1b8:	bcc	5e8 <test_schema+0x5e8>
 1bc:	ldrh	r1, [r1, #4]
 1c0:	cmp	r1, #0
 1c4:	beq	5e8 <test_schema+0x5e8>
 1c8:	ldr	r1, [r0, r1]!
 1cc:	add	r0, r0, r1
 1d0:	mov	r1, r9
 1d4:	add	r0, r0, #4
 1d8:	bl	0 <strcmp>
 1dc:	cmp	r0, #0
 1e0:	movge	r5, r7
 1e4:	addlt	sl, r7, #1
 1e8:	cmp	r5, sl
 1ec:	bhi	188 <test_schema+0x188>
 1f0:	bne	24c <test_schema+0x24c>
 1f4:	cmp	r4, sl
 1f8:	bls	614 <test_schema+0x614>
 1fc:	ldr	r0, [r6, sl, lsl #2]!
 200:	adds	r5, r6, r0
 204:	beq	5f4 <test_schema+0x5f4>
 208:	ldr	r0, [r5]
 20c:	mov	r6, r5
 210:	ldrh	r7, [r6, -r0]!
 214:	cmp	r7, #6
 218:	bcc	5e8 <test_schema+0x5e8>
 21c:	ldrh	r0, [r6, #4]
 220:	cmp	r0, #0
 224:	beq	5e8 <test_schema+0x5e8>
 228:	mov	r1, r5
 22c:	ldr	r0, [r1, r0]!
 230:	add	r0, r1, r0
 234:	movw	r1, #0
 238:	add	r0, r0, #4
 23c:	movt	r1, #0
 240:	bl	0 <strcmp>
 244:	cmp	r0, #0
 248:	beq	298 <test_schema+0x298>
 24c:	movw	r0, #0
 250:	movt	r0, #0
 254:	bl	0 <puts>
 258:	mvn	r5, #0
 25c:	mov	r0, r8
 260:	bl	0 <free>
 264:	b	280 <test_schema+0x280>
 268:	mov	r0, r5
 26c:	bl	0 <fclose>
 270:	movw	r0, #0
 274:	movt	r0, #0
 278:	bl	0 <puts>
 27c:	mvn	r5, #0
 280:	mov	r0, r5
 284:	sub	sp, fp, #28
 288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 28c:	mov	r0, r8
 290:	bl	0 <free>
 294:	b	270 <test_schema+0x270>
 298:	cmp	r4, sl
 29c:	bls	614 <test_schema+0x614>
 2a0:	cmp	r7, #8
 2a4:	bcc	660 <test_schema+0x660>
 2a8:	ldrh	r0, [r6, #6]
 2ac:	cmp	r0, #0
 2b0:	beq	660 <test_schema+0x660>
 2b4:	ldr	r0, [r5, r0]!
 2b8:	movw	r1, #0
 2bc:	movt	r1, #0
 2c0:	add	r0, r5, r0
 2c4:	add	r5, r0, #4
 2c8:	mov	r0, r5
 2cc:	bl	72c <reflection_Field_vec_find>
 2d0:	cmn	r0, #1
 2d4:	beq	570 <test_schema+0x570>
 2d8:	ldr	r1, [r5, #-4]
 2dc:	cmp	r1, r0
 2e0:	bls	6a0 <test_schema+0x6a0>
 2e4:	mov	r1, r5
 2e8:	ldr	r0, [r1, r0, lsl #2]!
 2ec:	adds	r4, r1, r0
 2f0:	beq	6c0 <test_schema+0x6c0>
 2f4:	ldr	r1, [r4]
 2f8:	mov	r0, r4
 2fc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 300:	cmp	r1, #14
 304:	bcc	4f4 <test_schema+0x4f4>
 308:	ldrh	r1, [r0, #12]
 30c:	cmp	r1, #0
 310:	beq	4f4 <test_schema+0x4f4>
 314:	mov	r2, r4
 318:	ldr	r1, [r2, r1]!
 31c:	ldr	r2, [r2, #4]
 320:	eor	r1, r1, #150	; 0x96
 324:	orrs	r1, r1, r2
 328:	bne	4f4 <test_schema+0x4f4>
 32c:	ldrh	r0, [r0, #6]
 330:	cmp	r0, #0
 334:	beq	6e0 <test_schema+0x6e0>
 338:	ldr	r0, [r4, r0]!
 33c:	adds	r0, r4, r0
 340:	beq	700 <test_schema+0x700>
 344:	ldr	r2, [r0]
 348:	mov	r1, r0
 34c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
 350:	cmp	r2, #6
 354:	bcc	594 <test_schema+0x594>
 358:	ldrh	r1, [r1, #4]
 35c:	cmp	r1, #0
 360:	beq	594 <test_schema+0x594>
 364:	ldrb	r0, [r0, r1]
 368:	cmp	r0, #5
 36c:	bne	594 <test_schema+0x594>
 370:	movw	r1, #0
 374:	mov	r0, r5
 378:	movt	r1, #0
 37c:	bl	72c <reflection_Field_vec_find>
 380:	cmn	r0, #1
 384:	beq	5ac <test_schema+0x5ac>
 388:	ldr	r1, [r5, #-4]
 38c:	cmp	r1, r0
 390:	bls	6a0 <test_schema+0x6a0>
 394:	mov	r1, r5
 398:	ldr	r0, [r1, r0, lsl #2]!
 39c:	adds	r0, r1, r0
 3a0:	beq	720 <test_schema+0x720>
 3a4:	ldr	r2, [r0]
 3a8:	mov	r1, r0
 3ac:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
 3b0:	cmp	r2, #8
 3b4:	bcc	6e0 <test_schema+0x6e0>
 3b8:	ldrh	r1, [r1, #6]
 3bc:	cmp	r1, #0
 3c0:	beq	6e0 <test_schema+0x6e0>
 3c4:	ldr	r1, [r0, r1]!
 3c8:	adds	r0, r0, r1
 3cc:	beq	700 <test_schema+0x700>
 3d0:	ldr	r2, [r0]
 3d4:	mov	r1, r0
 3d8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
 3dc:	cmp	r2, #6
 3e0:	bcc	5a0 <test_schema+0x5a0>
 3e4:	ldrh	r3, [r1, #4]
 3e8:	cmp	r3, #0
 3ec:	beq	5a0 <test_schema+0x5a0>
 3f0:	ldrb	r3, [r0, r3]
 3f4:	cmp	r3, #15
 3f8:	bne	5a0 <test_schema+0x5a0>
 3fc:	mvn	r3, #0
 400:	cmp	r2, #10
 404:	bcc	414 <test_schema+0x414>
 408:	ldrh	r1, [r1, #8]
 40c:	cmp	r1, #0
 410:	ldrne	r3, [r0, r1]
 414:	cmp	r3, sl
 418:	bne	5b8 <test_schema+0x5b8>
 41c:	movw	r1, #0
 420:	mov	r0, r5
 424:	movt	r1, #0
 428:	bl	72c <reflection_Field_vec_find>
 42c:	cmn	r0, #1
 430:	beq	5d0 <test_schema+0x5d0>
 434:	ldr	r1, [r5, #-4]
 438:	cmp	r1, r0
 43c:	bls	6a0 <test_schema+0x6a0>
 440:	ldr	r0, [r5, r0, lsl #2]!
 444:	adds	r0, r5, r0
 448:	beq	720 <test_schema+0x720>
 44c:	ldr	r2, [r0]
 450:	mov	r1, r0
 454:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
 458:	cmp	r2, #8
 45c:	bcc	6e0 <test_schema+0x6e0>
 460:	ldrh	r1, [r1, #6]
 464:	cmp	r1, #0
 468:	beq	6e0 <test_schema+0x6e0>
 46c:	ldr	r1, [r0, r1]!
 470:	adds	r0, r0, r1
 474:	beq	700 <test_schema+0x700>
 478:	ldr	r2, [r0]
 47c:	mov	r1, r0
 480:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
 484:	cmp	r2, #6
 488:	bcc	5c4 <test_schema+0x5c4>
 48c:	ldrh	r3, [r1, #4]
 490:	cmp	r3, #0
 494:	beq	5c4 <test_schema+0x5c4>
 498:	ldrb	r3, [r0, r3]
 49c:	cmp	r3, #14
 4a0:	bne	5c4 <test_schema+0x5c4>
 4a4:	cmp	r2, #8
 4a8:	bcc	5dc <test_schema+0x5dc>
 4ac:	ldrh	r3, [r1, #6]
 4b0:	cmp	r3, #0
 4b4:	beq	5dc <test_schema+0x5dc>
 4b8:	ldrb	r3, [r0, r3]
 4bc:	cmp	r3, #15
 4c0:	bne	5dc <test_schema+0x5dc>
 4c4:	mvn	r3, #0
 4c8:	cmp	r2, #10
 4cc:	bcc	4dc <test_schema+0x4dc>
 4d0:	ldrh	r1, [r1, #8]
 4d4:	cmp	r1, #0
 4d8:	ldrne	r3, [r0, r1]
 4dc:	mov	r5, #0
 4e0:	cmp	r3, sl
 4e4:	beq	25c <test_schema+0x25c>
 4e8:	movw	r0, #0
 4ec:	movt	r0, #0
 4f0:	b	254 <test_schema+0x254>
 4f4:	movw	r0, #0
 4f8:	movt	r0, #0
 4fc:	bl	0 <puts>
 500:	ldr	r1, [r4]
 504:	mov	r0, r4
 508:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 50c:	cmp	r1, #6
 510:	bcc	680 <test_schema+0x680>
 514:	ldrh	r0, [r0, #4]
 518:	cmp	r0, #0
 51c:	beq	680 <test_schema+0x680>
 520:	mov	r1, r4
 524:	ldr	r0, [r1, r0]!
 528:	add	r0, r1, r0
 52c:	add	r1, r0, #4
 530:	movw	r0, #0
 534:	movt	r0, #0
 538:	bl	0 <printf>
 53c:	ldr	r1, [r4]
 540:	mov	r0, r4
 544:	mov	r2, #0
 548:	mov	r3, #0
 54c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 550:	cmp	r1, #14
 554:	bcc	584 <test_schema+0x584>
 558:	ldrh	r0, [r0, #12]
 55c:	cmp	r0, #0
 560:	beq	57c <test_schema+0x57c>
 564:	ldr	r2, [r4, r0]!
 568:	ldr	r3, [r4, #4]
 56c:	b	584 <test_schema+0x584>
 570:	movw	r0, #0
 574:	movt	r0, #0
 578:	b	254 <test_schema+0x254>
 57c:	mov	r2, #0
 580:	mov	r3, #0
 584:	movw	r0, #0
 588:	movt	r0, #0
 58c:	bl	0 <printf>
 590:	b	258 <test_schema+0x258>
 594:	movw	r0, #0
 598:	movt	r0, #0
 59c:	b	254 <test_schema+0x254>
 5a0:	movw	r0, #0
 5a4:	movt	r0, #0
 5a8:	b	254 <test_schema+0x254>
 5ac:	movw	r0, #0
 5b0:	movt	r0, #0
 5b4:	b	254 <test_schema+0x254>
 5b8:	movw	r0, #0
 5bc:	movt	r0, #0
 5c0:	b	254 <test_schema+0x254>
 5c4:	movw	r0, #0
 5c8:	movt	r0, #0
 5cc:	b	254 <test_schema+0x254>
 5d0:	movw	r0, #0
 5d4:	movt	r0, #0
 5d8:	b	254 <test_schema+0x254>
 5dc:	movw	r0, #0
 5e0:	movt	r0, #0
 5e4:	b	254 <test_schema+0x254>
 5e8:	movw	r0, #0
 5ec:	movt	r0, #0
 5f0:	b	5fc <test_schema+0x5fc>
 5f4:	movw	r0, #0
 5f8:	movt	r0, #0
 5fc:	movw	r1, #0
 600:	movw	r3, #0
 604:	mov	r2, #218	; 0xda
 608:	movt	r1, #0
 60c:	movt	r3, #0
 610:	bl	0 <__assert_fail>
 614:	movw	r0, #0
 618:	movw	r1, #0
 61c:	movw	r3, #0
 620:	mov	r2, #215	; 0xd7
 624:	movt	r0, #0
 628:	movt	r1, #0
 62c:	movt	r3, #0
 630:	bl	0 <__assert_fail>
 634:	movw	r0, #0
 638:	movt	r0, #0
 63c:	b	648 <test_schema+0x648>
 640:	movw	r0, #0
 644:	movt	r0, #0
 648:	movw	r1, #0
 64c:	movw	r3, #0
 650:	mov	r2, #237	; 0xed
 654:	movt	r1, #0
 658:	movt	r3, #0
 65c:	bl	0 <__assert_fail>
 660:	movw	r0, #0
 664:	movw	r1, #0
 668:	movw	r3, #0
 66c:	mov	r2, #224	; 0xe0
 670:	movt	r0, #0
 674:	movt	r1, #0
 678:	movt	r3, #0
 67c:	bl	0 <__assert_fail>
 680:	movw	r0, #0
 684:	movw	r1, #0
 688:	movw	r3, #0
 68c:	mov	r2, #195	; 0xc3
 690:	movt	r0, #0
 694:	movt	r1, #0
 698:	movt	r3, #0
 69c:	bl	0 <__assert_fail>
 6a0:	movw	r0, #0
 6a4:	movw	r1, #0
 6a8:	movw	r3, #0
 6ac:	mov	r2, #192	; 0xc0
 6b0:	movt	r0, #0
 6b4:	movt	r1, #0
 6b8:	movt	r3, #0
 6bc:	bl	0 <__assert_fail>
 6c0:	movw	r0, #0
 6c4:	movw	r1, #0
 6c8:	movw	r3, #0
 6cc:	mov	r2, #204	; 0xcc
 6d0:	movt	r0, #0
 6d4:	movt	r1, #0
 6d8:	movt	r3, #0
 6dc:	bl	0 <__assert_fail>
 6e0:	movw	r0, #0
 6e4:	movt	r0, #0
 6e8:	movw	r1, #0
 6ec:	movw	r3, #0
 6f0:	mov	r2, #201	; 0xc9
 6f4:	movt	r1, #0
 6f8:	movt	r3, #0
 6fc:	bl	0 <__assert_fail>
 700:	movw	r0, #0
 704:	movw	r1, #0
 708:	movw	r3, #0
 70c:	mov	r2, #147	; 0x93
 710:	movt	r0, #0
 714:	movt	r1, #0
 718:	movt	r3, #0
 71c:	bl	0 <__assert_fail>
 720:	movw	r0, #0
 724:	movt	r0, #0
 728:	b	6e8 <test_schema+0x6e8>

0000072c <reflection_Field_vec_find>:
 72c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 730:	add	fp, sp, #24
 734:	mvn	r4, #0
 738:	cmp	r0, #0
 73c:	beq	81c <reflection_Field_vec_find+0xf0>
 740:	ldr	r7, [r0, #-4]
 744:	mov	r9, r0
 748:	cmp	r7, #0
 74c:	beq	81c <reflection_Field_vec_find+0xf0>
 750:	mov	r8, r1
 754:	mov	r4, #0
 758:	subs	r5, r7, #1
 75c:	beq	7d4 <reflection_Field_vec_find+0xa8>
 760:	sub	r0, r5, r4
 764:	add	r6, r4, r0, lsr #1
 768:	cmp	r7, r6
 76c:	bls	83c <reflection_Field_vec_find+0x110>
 770:	mov	r0, r9
 774:	ldr	r1, [r0, r6, lsl #2]!
 778:	adds	r0, r0, r1
 77c:	beq	85c <reflection_Field_vec_find+0x130>
 780:	ldr	r2, [r0]
 784:	mov	r1, r0
 788:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
 78c:	cmp	r2, #6
 790:	bcc	830 <reflection_Field_vec_find+0x104>
 794:	ldrh	r1, [r1, #4]
 798:	cmp	r1, #0
 79c:	beq	830 <reflection_Field_vec_find+0x104>
 7a0:	ldr	r1, [r0, r1]!
 7a4:	add	r0, r0, r1
 7a8:	mov	r1, r8
 7ac:	add	r0, r0, #4
 7b0:	bl	0 <strcmp>
 7b4:	cmp	r0, #0
 7b8:	movge	r5, r6
 7bc:	addlt	r4, r6, #1
 7c0:	cmp	r5, r4
 7c4:	bhi	760 <reflection_Field_vec_find+0x34>
 7c8:	bne	824 <reflection_Field_vec_find+0xf8>
 7cc:	cmp	r7, r4
 7d0:	bls	83c <reflection_Field_vec_find+0x110>
 7d4:	ldr	r0, [r9, r4, lsl #2]!
 7d8:	adds	r0, r9, r0
 7dc:	beq	85c <reflection_Field_vec_find+0x130>
 7e0:	ldr	r2, [r0]
 7e4:	mov	r1, r0
 7e8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
 7ec:	cmp	r2, #6
 7f0:	bcc	830 <reflection_Field_vec_find+0x104>
 7f4:	ldrh	r1, [r1, #4]
 7f8:	cmp	r1, #0
 7fc:	beq	830 <reflection_Field_vec_find+0x104>
 800:	ldr	r1, [r0, r1]!
 804:	add	r0, r0, r1
 808:	mov	r1, r8
 80c:	add	r0, r0, #4
 810:	bl	0 <strcmp>
 814:	cmp	r0, #0
 818:	mvnne	r4, #0
 81c:	mov	r0, r4
 820:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 824:	mvn	r4, #0
 828:	mov	r0, r4
 82c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 830:	movw	r0, #0
 834:	movt	r0, #0
 838:	b	864 <reflection_Field_vec_find+0x138>
 83c:	movw	r0, #0
 840:	movw	r1, #0
 844:	movw	r3, #0
 848:	mov	r2, #192	; 0xc0
 84c:	movt	r0, #0
 850:	movt	r1, #0
 854:	movt	r3, #0
 858:	bl	0 <__assert_fail>
 85c:	movw	r0, #0
 860:	movt	r0, #0
 864:	movw	r1, #0
 868:	movw	r3, #0
 86c:	mov	r2, #195	; 0xc3
 870:	movt	r1, #0
 874:	movt	r3, #0
 878:	bl	0 <__assert_fail>

0000087c <main>:
 87c:	sub	r2, r0, #1
 880:	cmp	r2, #2
 884:	bcs	8b4 <main+0x38>
 888:	cmp	r0, #2
 88c:	bne	8a4 <main+0x28>
 890:	ldr	r0, [r1, #4]
 894:	movw	r1, #0
 898:	movt	r1, #0
 89c:	str	r0, [r1]
 8a0:	b	0 <test_schema>
 8a4:	movw	r0, #0
 8a8:	movt	r0, #0
 8ac:	ldr	r0, [r0]
 8b0:	b	0 <test_schema>
 8b4:	push	{fp, lr}
 8b8:	mov	fp, sp
 8bc:	movw	r0, #0
 8c0:	mov	r1, #64	; 0x40
 8c4:	mov	r2, #1
 8c8:	movt	r0, #0
 8cc:	ldr	r3, [r0]
 8d0:	movw	r0, #0
 8d4:	movt	r0, #0
 8d8:	bl	0 <fwrite>
 8dc:	mov	r0, #1
 8e0:	bl	0 <exit>
