
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-netcdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	mov	r4, r2
   8:	ldr	r5, [r0, #48]	; 0x30
   c:	strd	r6, [sp, #8]
  10:	mov	r6, r0
  14:	mov	r7, r3
  18:	strd	r8, [sp, #16]
  1c:	strd	sl, [sp, #24]
  20:	str	lr, [sp, #32]
  24:	sub	sp, sp, #84	; 0x54
  28:	cmp	r5, #0
  2c:	ldr	r2, [sp, #120]	; 0x78
  30:	ldr	r1, [sp, #124]	; 0x7c
  34:	beq	d8 <read_bytes+0xd8>
  38:	adds	r8, r4, r2
  3c:	ldrd	sl, [r0, #40]	; 0x28
  40:	adc	r9, r3, r1
  44:	cmp	r9, fp
  48:	cmpeq	r8, sl
  4c:	bls	c4 <read_bytes+0xc4>
  50:	ldr	r3, [r0, #16]
  54:	cmp	r3, #1
  58:	bls	140 <read_bytes+0x140>
  5c:	mov	r0, r2
  60:	add	r2, sp, #8
  64:	bl	0 <coda_str64>
  68:	add	r5, sp, #56	; 0x38
  6c:	mov	r0, r4
  70:	mov	r1, r7
  74:	add	r2, sp, #32
  78:	bl	0 <coda_str64>
  7c:	mov	r2, r5
  80:	ldrd	r0, [r6, #40]	; 0x28
  84:	bl	0 <coda_str64>
  88:	mvn	r0, #300	; 0x12c
  8c:	add	r3, sp, #32
  90:	str	r5, [sp]
  94:	add	r2, sp, #8
  98:	movw	r1, #0
  9c:	movt	r1, #0
  a0:	bl	0 <coda_set_error>
  a4:	mvn	r0, #0
  a8:	add	sp, sp, #84	; 0x54
  ac:	ldrd	r4, [sp]
  b0:	ldrd	r6, [sp, #8]
  b4:	ldrd	r8, [sp, #16]
  b8:	ldrd	sl, [sp, #24]
  bc:	add	sp, sp, #32
  c0:	pop	{pc}		; (ldr pc, [sp], #4)
  c4:	add	r1, r5, r4
  c8:	ldr	r0, [sp, #128]	; 0x80
  cc:	bl	0 <memcpy>
  d0:	mov	r0, #0
  d4:	b	a8 <read_bytes+0xa8>
  d8:	ldr	r3, [r0, #16]
  dc:	cmp	r3, #1
  e0:	bhi	158 <read_bytes+0x158>
  e4:	ldrd	r8, [r0, #8]
  e8:	adds	sl, r4, r2
  ec:	adc	fp, r7, r1
  f0:	cmp	fp, r9
  f4:	cmpeq	sl, r8
  f8:	bhi	140 <read_bytes+0x140>
  fc:	mov	r3, r4
 100:	ldr	r0, [r0, #56]	; 0x38
 104:	ldr	r1, [sp, #128]	; 0x80
 108:	bl	0 <pread>
 10c:	cmp	r0, #0
 110:	movge	r0, r5
 114:	bge	a8 <read_bytes+0xa8>
 118:	bl	0 <__errno_location>
 11c:	ldr	r0, [r0]
 120:	bl	0 <strerror>
 124:	mov	r2, r0
 128:	movw	r1, #0
 12c:	movt	r1, #0
 130:	mvn	r0, #21
 134:	bl	0 <coda_set_error>
 138:	mvn	r0, #0
 13c:	b	a8 <read_bytes+0xa8>
 140:	mvn	r0, #300	; 0x12c
 144:	movw	r1, #0
 148:	movt	r1, #0
 14c:	bl	0 <coda_set_error>
 150:	mvn	r0, #0
 154:	b	a8 <read_bytes+0xa8>
 158:	movw	r3, #0
 15c:	movt	r3, #0
 160:	movw	r1, #0
 164:	movt	r1, #0
 168:	movw	r0, #0
 16c:	movt	r0, #0
 170:	mov	r2, #83	; 0x53
 174:	bl	0 <__assert_fail>

00000178 <read_basic_type>:
 178:	ldm	r0, {r3, ip}
 17c:	strd	r4, [sp, #-36]!	; 0xffffffdc
 180:	strd	r6, [sp, #8]
 184:	mov	r6, r1
 188:	strd	r8, [sp, #16]
 18c:	str	lr, [sp, #32]
 190:	sub	r1, ip, #1
 194:	add	ip, r0, ip, lsl #4
 198:	strd	sl, [sp, #24]
 19c:	add	r0, r0, r1, lsl #4
 1a0:	sub	sp, sp, #28
 1a4:	ldr	ip, [ip, #-24]	; 0xffffffe8
 1a8:	ldr	r7, [r0, #8]
 1ac:	ldr	lr, [ip]
 1b0:	ldr	r1, [r7, #4]
 1b4:	ldrd	sl, [r7, #16]
 1b8:	cmp	lr, #104	; 0x68
 1bc:	ldr	lr, [r1, #24]
 1c0:	ldr	r1, [r1, #28]
 1c4:	lsr	r4, lr, #3
 1c8:	asr	r5, r1, #3
 1cc:	orr	r4, r4, r1, lsl #29
 1d0:	beq	334 <read_basic_type+0x1bc>
 1d4:	cmp	r2, #0
 1d8:	ldr	r0, [r3, #52]	; 0x34
 1dc:	blt	1f4 <read_basic_type+0x7c>
 1e0:	asr	r9, r2, #31
 1e4:	cmp	r2, r4
 1e8:	mov	r8, r2
 1ec:	sbcs	r3, r9, r5
 1f0:	blt	244 <read_basic_type+0xcc>
 1f4:	mov	r2, sl
 1f8:	mov	r3, fp
 1fc:	strd	r4, [sp]
 200:	str	r6, [sp, #8]
 204:	bl	0 <read_bytes>
 208:	cmp	r0, #0
 20c:	bne	260 <read_basic_type+0xe8>
 210:	ldr	r2, [r7, #4]
 214:	ldr	r3, [r2, #8]
 218:	sub	r3, r3, #2
 21c:	cmp	r3, #1
 220:	bls	268 <read_basic_type+0xf0>
 224:	mov	r0, #0
 228:	add	sp, sp, #28
 22c:	ldrd	r4, [sp]
 230:	ldrd	r6, [sp, #8]
 234:	ldrd	r8, [sp, #16]
 238:	ldrd	sl, [sp, #24]
 23c:	add	sp, sp, #32
 240:	pop	{pc}		; (ldr pc, [sp], #4)
 244:	mov	r2, sl
 248:	mov	r3, fp
 24c:	strd	r8, [sp]
 250:	str	r6, [sp, #8]
 254:	bl	0 <read_bytes>
 258:	cmp	r0, #0
 25c:	beq	210 <read_basic_type+0x98>
 260:	mvn	r0, #0
 264:	b	228 <read_basic_type+0xb0>
 268:	ldrd	r2, [r2, #24]
 26c:	cmp	r3, #0
 270:	cmpeq	r2, #16
 274:	beq	3a4 <read_basic_type+0x22c>
 278:	cmp	r2, #17
 27c:	sbcs	r1, r3, #0
 280:	blt	2b8 <read_basic_type+0x140>
 284:	cmp	r3, #0
 288:	cmpeq	r2, #32
 28c:	bne	2e0 <read_basic_type+0x168>
 290:	ldrb	r3, [r6, #3]
 294:	mov	r0, #0
 298:	ldrb	r1, [r6]
 29c:	ldrb	r2, [r6, #2]
 2a0:	strb	r3, [r6]
 2a4:	ldrb	r3, [r6, #1]
 2a8:	strb	r2, [r6, #1]
 2ac:	strb	r1, [r6, #3]
 2b0:	strb	r3, [r6, #2]
 2b4:	b	228 <read_basic_type+0xb0>
 2b8:	cmp	r3, #0
 2bc:	cmpeq	r2, #8
 2c0:	beq	224 <read_basic_type+0xac>
 2c4:	movw	r1, #0
 2c8:	movt	r1, #0
 2cc:	ldr	r3, [pc, #264]	; 3dc <read_basic_type+0x264>
 2d0:	movw	r0, #0
 2d4:	movt	r0, #0
 2d8:	movw	r2, #422	; 0x1a6
 2dc:	bl	0 <__assert_fail>
 2e0:	cmp	r3, #0
 2e4:	cmpeq	r2, #64	; 0x40
 2e8:	bne	2c4 <read_basic_type+0x14c>
 2ec:	ldrb	r2, [r6, #7]
 2f0:	mov	r0, #0
 2f4:	ldrb	r3, [r6]
 2f8:	ldrb	r1, [r6, #6]
 2fc:	strb	r2, [r6]
 300:	ldrb	r2, [r6, #1]
 304:	strb	r3, [r6, #7]
 308:	ldrb	r3, [r6, #5]
 30c:	strb	r1, [r6, #1]
 310:	ldrb	r1, [r6, #2]
 314:	strb	r3, [r6, #2]
 318:	ldrb	r3, [r6, #3]
 31c:	strb	r2, [r6, #6]
 320:	ldrb	r2, [r6, #4]
 324:	strb	r1, [r6, #5]
 328:	strb	r2, [r6, #3]
 32c:	strb	r3, [r6, #4]
 330:	b	228 <read_basic_type+0xb0>
 334:	ldr	r1, [ip, #4]
 338:	ldr	ip, [r1, #8]
 33c:	cmp	ip, #1
 340:	bne	1d4 <read_basic_type+0x5c>
 344:	ldr	lr, [r7, #24]
 348:	ldr	ip, [r0, #12]
 34c:	cmp	lr, #0
 350:	beq	3bc <read_basic_type+0x244>
 354:	ldr	r0, [r1, #44]	; 0x2c
 358:	ldr	r1, [r1, #52]	; 0x34
 35c:	ldr	lr, [r3, #60]	; 0x3c
 360:	sdiv	r0, r0, r1
 364:	sdiv	r1, ip, r0
 368:	mls	r0, r0, r1, ip
 36c:	mul	lr, lr, r1
 370:	asr	r9, r0, #31
 374:	mov	r8, r0
 378:	mul	ip, r0, r5
 37c:	umull	r0, r1, r0, r4
 380:	strd	r8, [sp, #16]
 384:	adds	r8, sl, lr
 388:	adc	r9, fp, lr, asr #31
 38c:	ldr	lr, [sp, #20]
 390:	adds	sl, r0, r8
 394:	mla	ip, r4, lr, ip
 398:	add	r1, ip, r1
 39c:	adc	fp, r1, r9
 3a0:	b	1d4 <read_basic_type+0x5c>
 3a4:	ldrb	r2, [r6, #1]
 3a8:	mov	r0, #0
 3ac:	ldrb	r3, [r6]
 3b0:	strb	r2, [r6]
 3b4:	strb	r3, [r6, #1]
 3b8:	b	228 <read_basic_type+0xb0>
 3bc:	mul	lr, ip, r5
 3c0:	asr	r9, ip, #31
 3c4:	umull	r0, r1, ip, r4
 3c8:	mla	ip, r4, r9, lr
 3cc:	adds	sl, sl, r0
 3d0:	add	r1, ip, r1
 3d4:	adc	fp, fp, r1
 3d8:	b	1d4 <read_basic_type+0x5c>
 3dc:	.word	0x0000000c

000003e0 <read_array>:
 3e0:	ldr	r3, [r0, #4]
 3e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
 3e8:	ldr	r4, [r0]
 3ec:	strd	r6, [sp, #8]
 3f0:	strd	sl, [sp, #24]
 3f4:	add	r0, r0, r3, lsl #4
 3f8:	strd	r8, [sp, #16]
 3fc:	str	lr, [sp, #32]
 400:	sub	sp, sp, #28
 404:	ldr	sl, [r0, #-8]
 408:	str	r1, [sp, #20]
 40c:	ldr	r2, [sl, #4]
 410:	ldr	r3, [sl, #12]
 414:	ldr	r6, [r2, #44]	; 0x2c
 418:	ldr	ip, [r3, #4]
 41c:	ldr	r0, [r3, #24]
 420:	ldrd	r8, [ip, #24]
 424:	cmp	r0, #0
 428:	lsr	r7, r8, #3
 42c:	orr	r7, r7, r9, lsl #29
 430:	mul	r7, r7, r6
 434:	beq	4a4 <read_array+0xc4>
 438:	ldr	fp, [r2, #52]	; 0x34
 43c:	cmp	fp, #0
 440:	sdiv	r7, r7, fp
 444:	ble	4d8 <read_array+0xf8>
 448:	mov	r8, r7
 44c:	mov	r6, r1
 450:	mov	r5, #0
 454:	asr	r9, r7, #31
 458:	b	470 <read_array+0x90>
 45c:	add	r5, r5, #1
 460:	add	r6, r6, r7
 464:	ldr	r3, [sl, #12]
 468:	cmp	fp, r5
 46c:	beq	4d0 <read_array+0xf0>
 470:	ldrd	r2, [r3, #16]
 474:	ldr	ip, [r4, #60]	; 0x3c
 478:	ldr	r0, [r4, #52]	; 0x34
 47c:	strd	r8, [sp]
 480:	str	r6, [sp, #8]
 484:	mul	ip, ip, r5
 488:	adds	r2, r2, ip
 48c:	adc	r3, r3, ip, asr #31
 490:	bl	0 <read_bytes>
 494:	cmp	r0, #0
 498:	beq	45c <read_array+0x7c>
 49c:	mvn	r0, #0
 4a0:	b	58c <read_array+0x1ac>
 4a4:	ldr	r1, [sp, #20]
 4a8:	mov	r6, r7
 4ac:	asr	r7, r7, #31
 4b0:	ldrd	r2, [r3, #16]
 4b4:	ldr	r0, [r4, #52]	; 0x34
 4b8:	strd	r6, [sp]
 4bc:	str	r1, [sp, #8]
 4c0:	bl	0 <read_bytes>
 4c4:	cmp	r0, #0
 4c8:	bne	49c <read_array+0xbc>
 4cc:	ldr	r3, [sl, #12]
 4d0:	ldr	r3, [r3, #4]
 4d4:	ldrd	r8, [r3, #24]
 4d8:	cmp	r9, #0
 4dc:	cmpeq	r8, #16
 4e0:	beq	5fc <read_array+0x21c>
 4e4:	cmp	r8, #17
 4e8:	sbcs	r3, r9, #0
 4ec:	blt	57c <read_array+0x19c>
 4f0:	cmp	r9, #0
 4f4:	cmpeq	r8, #32
 4f8:	beq	5a8 <read_array+0x1c8>
 4fc:	cmp	r9, #0
 500:	cmpeq	r8, #64	; 0x40
 504:	bne	644 <read_array+0x264>
 508:	ldr	r3, [sl, #4]
 50c:	ldr	r3, [r3, #44]	; 0x2c
 510:	cmp	r3, #0
 514:	ble	588 <read_array+0x1a8>
 518:	ldr	r1, [sp, #20]
 51c:	mov	r3, #0
 520:	add	r3, r3, #1
 524:	add	r1, r1, #8
 528:	ldrb	r0, [r1, #-1]
 52c:	ldrb	r2, [r1, #-8]
 530:	ldrb	ip, [r1, #-2]
 534:	strb	r0, [r1, #-8]
 538:	ldrb	r0, [r1, #-7]
 53c:	strb	r2, [r1, #-1]
 540:	ldrb	r2, [r1, #-3]
 544:	strb	ip, [r1, #-7]
 548:	ldrb	ip, [r1, #-6]
 54c:	strb	r2, [r1, #-6]
 550:	ldrb	r2, [r1, #-5]
 554:	strb	r0, [r1, #-2]
 558:	ldrb	r0, [r1, #-4]
 55c:	strb	ip, [r1, #-3]
 560:	strb	r0, [r1, #-5]
 564:	strb	r2, [r1, #-4]
 568:	ldr	r2, [sl, #4]
 56c:	ldr	r2, [r2, #44]	; 0x2c
 570:	cmp	r2, r3
 574:	bgt	520 <read_array+0x140>
 578:	b	588 <read_array+0x1a8>
 57c:	cmp	r9, #0
 580:	cmpeq	r8, #8
 584:	bne	644 <read_array+0x264>
 588:	mov	r0, #0
 58c:	add	sp, sp, #28
 590:	ldrd	r4, [sp]
 594:	ldrd	r6, [sp, #8]
 598:	ldrd	r8, [sp, #16]
 59c:	ldrd	sl, [sp, #24]
 5a0:	add	sp, sp, #32
 5a4:	pop	{pc}		; (ldr pc, [sp], #4)
 5a8:	ldr	r3, [sl, #4]
 5ac:	ldr	r3, [r3, #44]	; 0x2c
 5b0:	cmp	r3, #0
 5b4:	ble	588 <read_array+0x1a8>
 5b8:	ldr	r1, [sp, #20]
 5bc:	mov	r3, #0
 5c0:	add	r3, r3, #1
 5c4:	add	r1, r1, #4
 5c8:	ldrb	r2, [r1, #-1]
 5cc:	ldrb	ip, [r1, #-4]
 5d0:	ldrb	r0, [r1, #-2]
 5d4:	strb	r2, [r1, #-4]
 5d8:	ldrb	r2, [r1, #-3]
 5dc:	strb	r0, [r1, #-3]
 5e0:	strb	ip, [r1, #-1]
 5e4:	strb	r2, [r1, #-2]
 5e8:	ldr	r2, [sl, #4]
 5ec:	ldr	r2, [r2, #44]	; 0x2c
 5f0:	cmp	r2, r3
 5f4:	bgt	5c0 <read_array+0x1e0>
 5f8:	b	588 <read_array+0x1a8>
 5fc:	ldr	r3, [sl, #4]
 600:	ldr	r3, [r3, #44]	; 0x2c
 604:	cmp	r3, #0
 608:	ble	588 <read_array+0x1a8>
 60c:	ldr	r2, [sp, #20]
 610:	mov	r3, #0
 614:	add	r2, r2, #1
 618:	ldr	ip, [sp, #20]
 61c:	ldrb	r1, [r2, r3, lsl #1]
 620:	ldrb	r0, [ip, r3, lsl #1]
 624:	strb	r0, [r2, r3, lsl #1]
 628:	strb	r1, [ip, r3, lsl #1]
 62c:	add	r3, r3, #1
 630:	ldr	r1, [sl, #4]
 634:	ldr	r1, [r1, #44]	; 0x2c
 638:	cmp	r1, r3
 63c:	bgt	618 <read_array+0x238>
 640:	b	588 <read_array+0x1a8>
 644:	movw	r1, #0
 648:	movt	r1, #0
 64c:	ldr	r3, [pc, #12]	; 660 <read_array+0x280>
 650:	movw	r0, #0
 654:	movt	r0, #0
 658:	movw	r2, #262	; 0x106
 65c:	bl	0 <__assert_fail>
 660:	.word	0x0000001c

00000664 <read_partial_array>:
 664:	ldr	ip, [r0, #4]
 668:	strd	r4, [sp, #-36]!	; 0xffffffdc
 66c:	strd	r6, [sp, #8]
 670:	mov	r6, r1
 674:	strd	r8, [sp, #16]
 678:	strd	sl, [sp, #24]
 67c:	str	lr, [sp, #32]
 680:	sub	sp, sp, #68	; 0x44
 684:	str	r3, [sp, #36]	; 0x24
 688:	str	r1, [sp, #40]	; 0x28
 68c:	ldr	r1, [r0]
 690:	add	r0, r0, ip, lsl #4
 694:	ldr	fp, [r0, #-8]
 698:	ldr	ip, [fp, #12]
 69c:	ldr	r0, [ip, #4]
 6a0:	ldr	r3, [ip, #24]
 6a4:	ldrd	r4, [r0, #24]
 6a8:	cmp	r3, #0
 6ac:	lsr	lr, r4, #3
 6b0:	orr	lr, lr, r5, lsl #29
 6b4:	beq	7f4 <read_partial_array+0x190>
 6b8:	ldr	r3, [fp, #4]
 6bc:	ldr	r0, [r3, #52]	; 0x34
 6c0:	ldr	r3, [r3, #44]	; 0x2c
 6c4:	cmp	r0, #0
 6c8:	str	r0, [sp, #56]	; 0x38
 6cc:	sdiv	r7, r3, r0
 6d0:	str	r7, [sp, #44]	; 0x2c
 6d4:	ble	838 <read_partial_array+0x1d4>
 6d8:	add	r3, r6, r2
 6dc:	mul	r4, r7, lr
 6e0:	mov	r0, #0
 6e4:	mul	r2, lr, r2
 6e8:	mov	r5, r0
 6ec:	str	r1, [sp, #28]
 6f0:	mul	r8, lr, r6
 6f4:	str	r4, [sp, #32]
 6f8:	str	r3, [sp, #48]	; 0x30
 6fc:	mov	r3, r0
 700:	str	fp, [sp, #52]	; 0x34
 704:	str	r2, [sp, #60]	; 0x3c
 708:	b	73c <read_partial_array+0xd8>
 70c:	ldr	r3, [sp, #16]
 710:	mov	r0, r6
 714:	adds	r3, r9, r3
 718:	mov	r5, r3
 71c:	ldr	r3, [sp, #32]
 720:	sub	r8, r8, r3
 724:	ldr	r3, [sp, #52]	; 0x34
 728:	ldr	ip, [r3, #12]
 72c:	ldr	r3, [sp, #56]	; 0x38
 730:	cmp	r7, r3
 734:	mov	r3, r7
 738:	beq	908 <read_partial_array+0x2a4>
 73c:	ldr	r1, [sp, #40]	; 0x28
 740:	add	r7, r3, #1
 744:	ldr	r2, [sp, #44]	; 0x2c
 748:	add	r6, r2, r0
 74c:	ldr	r2, [sp, #48]	; 0x30
 750:	cmp	r2, r6
 754:	ldrlt	r2, [sp, #60]	; 0x3c
 758:	ldrge	r2, [sp, #32]
 75c:	addlt	r2, r8, r2
 760:	cmp	r1, r0
 764:	asr	r1, r2, #31
 768:	mov	r0, r2
 76c:	strd	r0, [sp, #16]
 770:	movle	r0, #0
 774:	movle	r1, #0
 778:	ble	79c <read_partial_array+0x138>
 77c:	ldr	r2, [sp, #16]
 780:	asr	r1, r8, #31
 784:	mov	r0, r8
 788:	subs	r2, r2, r8
 78c:	str	r2, [sp, #16]
 790:	ldr	r2, [sp, #20]
 794:	sbc	r2, r2, r1
 798:	str	r2, [sp, #20]
 79c:	mov	r9, r5
 7a0:	ldrd	sl, [sp, #16]
 7a4:	ldr	r2, [sp, #28]
 7a8:	ldr	r4, [sp, #36]	; 0x24
 7ac:	ldr	lr, [r2, #60]	; 0x3c
 7b0:	add	r2, r4, r5
 7b4:	ldrd	r4, [ip, #16]
 7b8:	ldr	ip, [sp, #28]
 7bc:	mul	r3, lr, r3
 7c0:	ldr	ip, [ip, #52]	; 0x34
 7c4:	strd	sl, [sp]
 7c8:	adds	sl, r4, r3
 7cc:	adc	fp, r5, r3, asr #31
 7d0:	str	r2, [sp, #8]
 7d4:	adds	r2, sl, r0
 7d8:	adc	r3, fp, r1
 7dc:	mov	r0, ip
 7e0:	bl	0 <read_bytes>
 7e4:	cmp	r0, #0
 7e8:	beq	70c <read_partial_array+0xa8>
 7ec:	mvn	r0, #0
 7f0:	b	8ec <read_partial_array+0x288>
 7f4:	ldr	r3, [sp, #40]	; 0x28
 7f8:	mul	r2, r2, lr
 7fc:	ldrd	r6, [ip, #16]
 800:	ldr	r0, [r1, #52]	; 0x34
 804:	mul	lr, r3, lr
 808:	ldr	r1, [sp, #36]	; 0x24
 80c:	asr	r3, r2, #31
 810:	strd	r2, [sp]
 814:	adds	r2, r6, lr
 818:	adc	r3, r7, lr, asr #31
 81c:	str	r1, [sp, #8]
 820:	bl	0 <read_bytes>
 824:	cmp	r0, #0
 828:	bne	7ec <read_partial_array+0x188>
 82c:	ldr	r3, [fp, #12]
 830:	ldr	r3, [r3, #4]
 834:	ldrd	r4, [r3, #24]
 838:	cmp	r5, #0
 83c:	cmpeq	r4, #16
 840:	beq	920 <read_partial_array+0x2bc>
 844:	cmp	r4, #17
 848:	sbcs	r3, r5, #0
 84c:	blt	8dc <read_partial_array+0x278>
 850:	cmp	r5, #0
 854:	cmpeq	r4, #32
 858:	beq	964 <read_partial_array+0x300>
 85c:	cmp	r5, #0
 860:	cmpeq	r4, #64	; 0x40
 864:	bne	9b8 <read_partial_array+0x354>
 868:	ldr	r3, [fp, #4]
 86c:	ldr	r3, [r3, #44]	; 0x2c
 870:	cmp	r3, #0
 874:	ble	8e8 <read_partial_array+0x284>
 878:	ldr	r3, [sp, #36]	; 0x24
 87c:	mov	r2, #0
 880:	add	r2, r2, #1
 884:	add	r3, r3, #8
 888:	ldrb	r0, [r3, #-1]
 88c:	ldrb	r1, [r3, #-8]
 890:	ldrb	ip, [r3, #-2]
 894:	strb	r0, [r3, #-8]
 898:	ldrb	r0, [r3, #-7]
 89c:	strb	r1, [r3, #-1]
 8a0:	ldrb	r1, [r3, #-3]
 8a4:	strb	ip, [r3, #-7]
 8a8:	ldrb	ip, [r3, #-6]
 8ac:	strb	r1, [r3, #-6]
 8b0:	ldrb	r1, [r3, #-5]
 8b4:	strb	r0, [r3, #-2]
 8b8:	ldrb	r0, [r3, #-4]
 8bc:	strb	ip, [r3, #-3]
 8c0:	strb	r0, [r3, #-5]
 8c4:	strb	r1, [r3, #-4]
 8c8:	ldr	r1, [fp, #4]
 8cc:	ldr	r1, [r1, #44]	; 0x2c
 8d0:	cmp	r1, r2
 8d4:	bgt	880 <read_partial_array+0x21c>
 8d8:	b	8e8 <read_partial_array+0x284>
 8dc:	cmp	r5, #0
 8e0:	cmpeq	r4, #8
 8e4:	bne	9b8 <read_partial_array+0x354>
 8e8:	mov	r0, #0
 8ec:	add	sp, sp, #68	; 0x44
 8f0:	ldrd	r4, [sp]
 8f4:	ldrd	r6, [sp, #8]
 8f8:	ldrd	r8, [sp, #16]
 8fc:	ldrd	sl, [sp, #24]
 900:	add	sp, sp, #32
 904:	pop	{pc}		; (ldr pc, [sp], #4)
 908:	ldr	r3, [ip, #4]
 90c:	ldr	fp, [sp, #52]	; 0x34
 910:	ldrd	r4, [r3, #24]
 914:	cmp	r5, #0
 918:	cmpeq	r4, #16
 91c:	bne	844 <read_partial_array+0x1e0>
 920:	ldr	r3, [fp, #4]
 924:	ldr	r3, [r3, #44]	; 0x2c
 928:	cmp	r3, #0
 92c:	ble	8e8 <read_partial_array+0x284>
 930:	ldr	r1, [sp, #36]	; 0x24
 934:	mov	r3, #0
 938:	add	r2, r1, #1
 93c:	ldrb	r0, [r2, r3, lsl #1]
 940:	ldrb	ip, [r1, r3, lsl #1]
 944:	strb	ip, [r2, r3, lsl #1]
 948:	strb	r0, [r1, r3, lsl #1]
 94c:	add	r3, r3, #1
 950:	ldr	r0, [fp, #4]
 954:	ldr	r0, [r0, #44]	; 0x2c
 958:	cmp	r0, r3
 95c:	bgt	93c <read_partial_array+0x2d8>
 960:	b	8e8 <read_partial_array+0x284>
 964:	ldr	r3, [fp, #4]
 968:	ldr	r3, [r3, #44]	; 0x2c
 96c:	cmp	r3, #0
 970:	ble	8e8 <read_partial_array+0x284>
 974:	ldr	r3, [sp, #36]	; 0x24
 978:	mov	r2, #0
 97c:	add	r2, r2, #1
 980:	add	r3, r3, #4
 984:	ldrb	r1, [r3, #-1]
 988:	ldrb	ip, [r3, #-4]
 98c:	ldrb	r0, [r3, #-2]
 990:	strb	r1, [r3, #-4]
 994:	ldrb	r1, [r3, #-3]
 998:	strb	r0, [r3, #-3]
 99c:	strb	ip, [r3, #-1]
 9a0:	strb	r1, [r3, #-2]
 9a4:	ldr	r1, [fp, #4]
 9a8:	ldr	r1, [r1, #44]	; 0x2c
 9ac:	cmp	r1, r2
 9b0:	bgt	97c <read_partial_array+0x318>
 9b4:	b	8e8 <read_partial_array+0x284>
 9b8:	movw	r1, #0
 9bc:	movt	r1, #0
 9c0:	ldr	r3, [pc, #12]	; 9d4 <read_partial_array+0x370>
 9c4:	movw	r0, #0
 9c8:	movt	r0, #0
 9cc:	movw	r2, #347	; 0x15b
 9d0:	bl	0 <__assert_fail>
 9d4:	.word	0x00000028

000009d8 <coda_netcdf_cursor_set_product>:
 9d8:	ldr	r2, [r1, #20]
 9dc:	mov	r3, r0
 9e0:	mvn	ip, #0
 9e4:	mov	r0, #1
 9e8:	strd	r4, [sp, #-8]!
 9ec:	mvn	r4, #0
 9f0:	mvn	r5, #0
 9f4:	str	r1, [r3]
 9f8:	stmib	r3, {r0, r2, ip}
 9fc:	mov	r0, #0
 a00:	strd	r4, [r3, #16]
 a04:	ldrd	r4, [sp]
 a08:	add	sp, sp, #8
 a0c:	bx	lr

00000a10 <coda_netcdf_cursor_goto_array_element>:
 a10:	ldr	r3, [r0, #4]
 a14:	strd	r4, [sp, #-16]!
 a18:	mov	r5, r1
 a1c:	mov	r4, r2
 a20:	add	r3, r0, r3, lsl #4
 a24:	ldr	r3, [r3, #-8]
 a28:	str	r6, [sp, #8]
 a2c:	mov	r6, r0
 a30:	str	lr, [sp, #12]
 a34:	sub	sp, sp, #40	; 0x28
 a38:	add	r1, sp, #4
 a3c:	add	r2, sp, #8
 a40:	ldr	r0, [r3, #4]
 a44:	bl	0 <coda_type_get_array_dim>
 a48:	cmp	r0, #0
 a4c:	bne	b40 <coda_netcdf_cursor_goto_array_element+0x130>
 a50:	ldr	r3, [sp, #4]
 a54:	cmp	r3, r5
 a58:	bne	b24 <coda_netcdf_cursor_goto_array_element+0x114>
 a5c:	cmp	r5, #0
 a60:	ble	b1c <coda_netcdf_cursor_goto_array_element+0x10c>
 a64:	ldr	r2, [r4]
 a68:	ldr	r3, [sp, #8]
 a6c:	cmp	r2, #0
 a70:	blt	af4 <coda_netcdf_cursor_goto_array_element+0xe4>
 a74:	cmp	r3, r2
 a78:	ble	af4 <coda_netcdf_cursor_goto_array_element+0xe4>
 a7c:	mov	ip, r4
 a80:	mov	r1, r0
 a84:	add	r4, sp, #12
 a88:	mov	lr, r0
 a8c:	b	aac <coda_netcdf_cursor_goto_array_element+0x9c>
 a90:	ldr	r2, [ip, #4]!
 a94:	ldr	r3, [r4], #4
 a98:	cmp	r2, #0
 a9c:	blt	af4 <coda_netcdf_cursor_goto_array_element+0xe4>
 aa0:	cmp	r2, r3
 aa4:	mul	lr, r3, lr
 aa8:	bge	af4 <coda_netcdf_cursor_goto_array_element+0xe4>
 aac:	add	r1, r1, #1
 ab0:	add	lr, lr, r2
 ab4:	cmp	r5, r1
 ab8:	bne	a90 <coda_netcdf_cursor_goto_array_element+0x80>
 abc:	ldr	r3, [r6, #4]
 ac0:	mvn	r4, #0
 ac4:	mvn	r5, #0
 ac8:	add	r1, r6, r3, lsl #4
 acc:	add	r2, r3, #1
 ad0:	ldr	ip, [r1, #-8]
 ad4:	mov	r3, r1
 ad8:	lsl	r1, r2, #4
 adc:	ldr	ip, [ip, #12]
 ae0:	str	r2, [r6, #4]
 ae4:	str	ip, [r3, #8]
 ae8:	str	lr, [r3, #12]
 aec:	strd	r4, [r6, r1]
 af0:	b	b08 <coda_netcdf_cursor_goto_array_element+0xf8>
 af4:	mvn	r0, #106	; 0x6a
 af8:	movw	r1, #0
 afc:	movt	r1, #0
 b00:	bl	0 <coda_set_error>
 b04:	mvn	r0, #0
 b08:	add	sp, sp, #40	; 0x28
 b0c:	ldrd	r4, [sp]
 b10:	ldr	r6, [sp, #8]
 b14:	add	sp, sp, #12
 b18:	pop	{pc}		; (ldr pc, [sp], #4)
 b1c:	mov	lr, r0
 b20:	b	abc <coda_netcdf_cursor_goto_array_element+0xac>
 b24:	mvn	r0, #105	; 0x69
 b28:	mov	r2, r5
 b2c:	movw	r1, #0
 b30:	movt	r1, #0
 b34:	bl	0 <coda_set_error>
 b38:	mvn	r0, #0
 b3c:	b	b08 <coda_netcdf_cursor_goto_array_element+0xf8>
 b40:	mvn	r0, #0
 b44:	b	b08 <coda_netcdf_cursor_goto_array_element+0xf8>

00000b48 <coda_netcdf_cursor_goto_array_element_by_index>:
 b48:	ldr	ip, [r0, #4]
 b4c:	strd	r4, [sp, #-16]!
 b50:	ldr	r3, [pc, #152]	; bf0 <coda_netcdf_cursor_goto_array_element_by_index+0xa8>
 b54:	add	r2, r0, ip, lsl #4
 b58:	ldr	r2, [r2, #-8]
 b5c:	str	r6, [sp, #8]
 b60:	str	lr, [sp, #12]
 b64:	mrc	15, 0, lr, cr13, cr0, {3}
 b68:	ldr	r3, [pc, r3]
 b6c:	ldr	r3, [lr, r3]
 b70:	cmp	r3, #0
 b74:	beq	b94 <coda_netcdf_cursor_goto_array_element_by_index+0x4c>
 b78:	ldr	r3, [r2, #4]
 b7c:	ldr	r3, [r3, #44]	; 0x2c
 b80:	cmp	r3, r1
 b84:	movgt	lr, #0
 b88:	movle	lr, #1
 b8c:	orrs	lr, lr, r1, lsr #31
 b90:	bne	bd4 <coda_netcdf_cursor_goto_array_element_by_index+0x8c>
 b94:	ldr	r6, [r2, #12]
 b98:	add	r3, ip, #1
 b9c:	add	ip, r0, ip, lsl #4
 ba0:	lsl	lr, r3, #4
 ba4:	mvn	r4, #0
 ba8:	mvn	r5, #0
 bac:	mov	r2, #0
 bb0:	str	r3, [r0, #4]
 bb4:	str	r6, [ip, #8]
 bb8:	str	r1, [ip, #12]
 bbc:	strd	r4, [r0, lr]
 bc0:	ldrd	r4, [sp]
 bc4:	mov	r0, r2
 bc8:	ldr	r6, [sp, #8]
 bcc:	add	sp, sp, #12
 bd0:	pop	{pc}		; (ldr pc, [sp], #4)
 bd4:	mov	r2, r1
 bd8:	mvn	r0, #106	; 0x6a
 bdc:	movw	r1, #0
 be0:	movt	r1, #0
 be4:	bl	0 <coda_set_error>
 be8:	mvn	r2, #0
 bec:	b	bc0 <coda_netcdf_cursor_goto_array_element_by_index+0x78>
 bf0:	.word	0x00000080

00000bf4 <coda_netcdf_cursor_goto_next_array_element>:
 bf4:	ldr	r2, [pc, #136]	; c84 <coda_netcdf_cursor_goto_next_array_element+0x90>
 bf8:	mrc	15, 0, r1, cr13, cr0, {3}
 bfc:	str	r4, [sp, #-8]!
 c00:	ldr	ip, [r0, #4]
 c04:	str	lr, [sp, #4]
 c08:	ldr	r2, [pc, r2]
 c0c:	sub	r3, ip, #1
 c10:	lsl	r3, r3, #4
 c14:	add	lr, r0, r3
 c18:	ldr	r1, [r1, r2]
 c1c:	ldr	r2, [lr, #12]
 c20:	cmp	r1, #0
 c24:	add	r2, r2, #1
 c28:	beq	c50 <coda_netcdf_cursor_goto_next_array_element+0x5c>
 c2c:	add	ip, r0, ip, lsl #4
 c30:	ldr	r1, [ip, #-24]	; 0xffffffe8
 c34:	ldr	r1, [r1, #4]
 c38:	ldr	r1, [r1, #44]	; 0x2c
 c3c:	cmp	r1, r2
 c40:	movgt	ip, #0
 c44:	movle	ip, #1
 c48:	orrs	ip, ip, r2, lsr #31
 c4c:	bne	c68 <coda_netcdf_cursor_goto_next_array_element+0x74>
 c50:	add	r3, r0, r3
 c54:	mov	r0, #0
 c58:	str	r2, [r3, #12]
 c5c:	ldr	r4, [sp]
 c60:	add	sp, sp, #4
 c64:	pop	{pc}		; (ldr pc, [sp], #4)
 c68:	mov	r3, r1
 c6c:	mvn	r0, #106	; 0x6a
 c70:	movw	r1, #0
 c74:	movt	r1, #0
 c78:	bl	0 <coda_set_error>
 c7c:	mvn	r0, #0
 c80:	b	c5c <coda_netcdf_cursor_goto_next_array_element+0x68>
 c84:	.word	0x00000074

00000c88 <coda_netcdf_cursor_goto_attributes>:
 c88:	strd	r4, [sp, #-24]!	; 0xffffffe8
 c8c:	mov	r5, r0
 c90:	ldr	r4, [r0, #4]
 c94:	add	r2, r0, r4, lsl #4
 c98:	add	r3, r4, #1
 c9c:	ldr	r2, [r2, #-8]
 ca0:	ldr	r2, [r2, #8]
 ca4:	strd	r6, [sp, #8]
 ca8:	str	r8, [sp, #16]
 cac:	str	lr, [sp, #20]
 cb0:	str	r3, [r0, #4]
 cb4:	cmp	r2, #0
 cb8:	beq	cfc <coda_netcdf_cursor_goto_attributes+0x74>
 cbc:	lsl	r4, r4, #4
 cc0:	add	r1, r0, r4
 cc4:	str	r2, [r1, #8]
 cc8:	lsl	r3, r3, #4
 ccc:	add	r4, r5, r4
 cd0:	mvn	r6, #0
 cd4:	mvn	r7, #0
 cd8:	mvn	r2, #0
 cdc:	ldr	r8, [sp, #16]
 ce0:	mov	r0, #0
 ce4:	str	r2, [r4, #12]
 ce8:	strd	r6, [r5, r3]
 cec:	ldrd	r4, [sp]
 cf0:	ldrd	r6, [sp, #8]
 cf4:	add	sp, sp, #20
 cf8:	pop	{pc}		; (ldr pc, [sp], #4)
 cfc:	mov	r0, #6
 d00:	add	r4, r5, r4, lsl #4
 d04:	bl	0 <coda_mem_empty_record>
 d08:	ldr	r3, [r5, #4]
 d0c:	str	r0, [r4, #8]
 d10:	sub	r4, r3, #1
 d14:	lsl	r4, r4, #4
 d18:	b	cc8 <coda_netcdf_cursor_goto_attributes+0x40>

00000d1c <coda_netcdf_cursor_get_num_elements>:
 d1c:	ldr	r3, [r0, #4]
 d20:	add	r0, r0, r3, lsl #4
 d24:	ldr	r3, [r0, #-8]
 d28:	mov	r0, #0
 d2c:	ldr	r3, [r3, #4]
 d30:	ldr	r2, [r3, #8]
 d34:	cmp	r2, #1
 d38:	ldreq	r3, [r3, #44]	; 0x2c
 d3c:	movne	r3, #1
 d40:	str	r3, [r1]
 d44:	bx	lr

00000d48 <coda_netcdf_cursor_get_string_length>:
 d48:	ldr	r3, [r0, #4]
 d4c:	add	r0, r0, r3, lsl #4
 d50:	ldr	r3, [r0, #-8]
 d54:	ldr	r0, [r3, #4]
 d58:	b	0 <coda_type_get_string_length>

00000d5c <coda_netcdf_cursor_get_array_dim>:
 d5c:	ldr	r3, [r0, #4]
 d60:	add	r0, r0, r3, lsl #4
 d64:	ldr	r3, [r0, #-8]
 d68:	ldr	r0, [r3, #4]
 d6c:	b	0 <coda_type_get_array_dim>

00000d70 <coda_netcdf_cursor_read_int8>:
 d70:	mvn	r2, #0
 d74:	b	178 <read_basic_type>

00000d78 <coda_netcdf_cursor_read_int16>:
 d78:	mvn	r2, #0
 d7c:	b	178 <read_basic_type>

00000d80 <coda_netcdf_cursor_read_int32>:
 d80:	mvn	r2, #0
 d84:	b	178 <read_basic_type>

00000d88 <coda_netcdf_cursor_read_float>:
 d88:	mvn	r2, #0
 d8c:	b	178 <read_basic_type>

00000d90 <coda_netcdf_cursor_read_double>:
 d90:	mvn	r2, #0
 d94:	b	178 <read_basic_type>

00000d98 <coda_netcdf_cursor_read_char>:
 d98:	mvn	r2, #0
 d9c:	b	178 <read_basic_type>

00000da0 <coda_netcdf_cursor_read_string>:
 da0:	strd	r4, [sp, #-16]!
 da4:	mov	r4, r1
 da8:	mov	r5, r2
 dac:	str	r6, [sp, #8]
 db0:	str	lr, [sp, #12]
 db4:	bl	178 <read_basic_type>
 db8:	cmp	r0, #0
 dbc:	addeq	r4, r4, r5
 dc0:	mvnne	r0, #0
 dc4:	strbeq	r0, [r4, #-1]
 dc8:	ldrd	r4, [sp]
 dcc:	ldr	r6, [sp, #8]
 dd0:	add	sp, sp, #12
 dd4:	pop	{pc}		; (ldr pc, [sp], #4)

00000dd8 <coda_netcdf_cursor_read_int8_array>:
 dd8:	b	3e0 <read_array>

00000ddc <coda_netcdf_cursor_read_int16_array>:
 ddc:	b	3e0 <read_array>

00000de0 <coda_netcdf_cursor_read_int32_array>:
 de0:	b	3e0 <read_array>

00000de4 <coda_netcdf_cursor_read_float_array>:
 de4:	b	3e0 <read_array>

00000de8 <coda_netcdf_cursor_read_double_array>:
 de8:	b	3e0 <read_array>

00000dec <coda_netcdf_cursor_read_char_array>:
 dec:	b	3e0 <read_array>

00000df0 <coda_netcdf_cursor_read_int8_partial_array>:
 df0:	b	664 <read_partial_array>

00000df4 <coda_netcdf_cursor_read_int16_partial_array>:
 df4:	b	664 <read_partial_array>

00000df8 <coda_netcdf_cursor_read_int32_partial_array>:
 df8:	b	664 <read_partial_array>

00000dfc <coda_netcdf_cursor_read_float_partial_array>:
 dfc:	b	664 <read_partial_array>

00000e00 <coda_netcdf_cursor_read_double_partial_array>:
 e00:	b	664 <read_partial_array>

00000e04 <coda_netcdf_cursor_read_char_partial_array>:
 e04:	b	664 <read_partial_array>
