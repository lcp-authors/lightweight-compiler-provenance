
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #4
   c:	vpush	{d8-d10}
  10:	sub	sp, sp, #280	; 0x118
  14:	add	r4, sp, #28
  18:	mov	r0, r4
  1c:	bl	0 <flatcc_builder_init>
  20:	mov	r0, r4
  24:	bl	628 <create_root_monster>
  28:	sub	r1, fp, #76	; 0x4c
  2c:	mov	r0, r4
  30:	bl	0 <flatcc_builder_finalize_buffer>
  34:	movw	r1, #0
  38:	mov	r7, r0
  3c:	movw	r0, #0
  40:	movt	r0, #0
  44:	movt	r1, #0
  48:	bl	0 <fopen>
  4c:	cmp	r0, #0
  50:	beq	d0 <main+0xd0>
  54:	ldr	r6, [fp, #-76]	; 0xffffffb4
  58:	mov	r5, r0
  5c:	mov	r0, r7
  60:	mov	r1, #1
  64:	mov	r4, #1
  68:	mov	r3, r5
  6c:	mov	r2, r6
  70:	bl	0 <fwrite_unlocked>
  74:	mov	r8, r0
  78:	mov	r0, r5
  7c:	bl	0 <fclose>
  80:	cmp	r6, r8
  84:	bne	49c <main+0x49c>
  88:	ldr	r1, [fp, #-76]	; 0xffffffb4
  8c:	movw	r0, #0
  90:	movt	r0, #0
  94:	bl	0 <printf>
  98:	movw	r0, #0
  9c:	movt	r0, #0
  a0:	bl	0 <puts>
  a4:	sub	r0, fp, #72	; 0x48
  a8:	mov	r1, #0
  ac:	bl	0 <gettimeofday>
  b0:	movw	r2, #0
  b4:	movt	r2, #0
  b8:	ldr	r0, [r2]
  bc:	cmp	r0, #0
  c0:	beq	d8 <main+0xd8>
  c4:	ldr	r1, [r2, #4]
  c8:	ldr	r2, [fp, #-72]	; 0xffffffb8
  cc:	b	e8 <main+0xe8>
  d0:	mvn	r4, #0
  d4:	b	49c <main+0x49c>
  d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
  dc:	ldr	r1, [fp, #-68]	; 0xffffffbc
  e0:	strd	r0, [r2]
  e4:	mov	r2, r0
  e8:	sub	r0, r2, r0
  ec:	ldr	r2, [fp, #-68]	; 0xffffffbc
  f0:	vldr	d8, [pc, #992]	; 4d8 <main+0x4d8>
  f4:	movw	sl, #0
  f8:	movw	r6, #0
  fc:	vmov	s2, r0
 100:	add	r0, r7, #8
 104:	movt	sl, #0
 108:	movt	r6, #0
 10c:	sub	r1, r2, r1
 110:	vmov	s0, r1
 114:	vcvt.f64.s32	d16, s0
 118:	vcvt.f64.s32	d17, s2
 11c:	str	r0, [sp, #4]
 120:	mov	r0, #0
 124:	str	r7, [sp]
 128:	vdiv.f64	d16, d16, d8
 12c:	vadd.f64	d9, d16, d17
 130:	add	r4, sp, #28
 134:	str	r0, [sp, #8]
 138:	mov	r0, r4
 13c:	bl	628 <create_root_monster>
 140:	ldr	r2, [fp, #-76]	; 0xffffffb4
 144:	mov	r0, r4
 148:	mov	r1, r7
 14c:	bl	0 <flatcc_builder_copy_buffer>
 150:	cmp	r7, #0
 154:	beq	574 <main+0x574>
 158:	ldr	r0, [r7, #4]
 15c:	movw	r1, #20301	; 0x4f4d
 160:	movt	r1, #21326	; 0x534e
 164:	cmp	r0, r1
 168:	bne	574 <main+0x574>
 16c:	ldr	r8, [r7]
 170:	mov	r5, r7
 174:	ldr	r0, [r5, r8]!
 178:	mov	r4, r5
 17c:	ldrh	r9, [r4, -r0]!
 180:	cmp	r9, #11
 184:	bls	548 <main+0x548>
 188:	ldrh	r0, [r4, #10]
 18c:	cmp	r0, #0
 190:	beq	548 <main+0x548>
 194:	mov	r1, r5
 198:	ldr	r0, [r1, r0]!
 19c:	add	r0, r1, r0
 1a0:	movw	r1, #0
 1a4:	add	r0, r0, #4
 1a8:	movt	r1, #0
 1ac:	bl	0 <strcmp>
 1b0:	cmp	r0, #0
 1b4:	bne	5f4 <main+0x5f4>
 1b8:	cmp	r9, #28
 1bc:	bcc	5d4 <main+0x5d4>
 1c0:	ldrh	r0, [r4, #26]
 1c4:	cmp	r0, #0
 1c8:	beq	5d4 <main+0x5d4>
 1cc:	ldr	r1, [r5, r0]!
 1d0:	ldr	r2, [r5, r1]!
 1d4:	cmp	r2, #1000	; 0x3e8
 1d8:	bne	5d4 <main+0x5d4>
 1dc:	add	r1, r1, r8
 1e0:	add	r2, r5, #4
 1e4:	add	r0, r1, r0
 1e8:	ldr	r1, [sp, #4]
 1ec:	str	r2, [sp, #16]
 1f0:	add	r7, r1, r0
 1f4:	ldr	r0, [r2, #-4]
 1f8:	mov	r2, #0
 1fc:	str	r0, [sp, #12]
 200:	ldr	r0, [sp, #12]
 204:	cmp	r0, r2
 208:	bls	594 <main+0x594>
 20c:	ldr	r1, [sp, #16]
 210:	ldr	lr, [r1, r2, lsl #2]!
 214:	adds	r0, r1, lr
 218:	beq	574 <main+0x574>
 21c:	ldr	r1, [r0]
 220:	mov	r3, r0
 224:	str	r2, [sp, #20]
 228:	ldrh	r2, [r3, -r1]!
 22c:	cmp	r2, #12
 230:	bcc	548 <main+0x548>
 234:	ldrh	r1, [r3, #10]
 238:	cmp	r1, #0
 23c:	beq	548 <main+0x548>
 240:	mov	r4, r0
 244:	mov	r5, #0
 248:	cmp	r2, #16
 24c:	ldr	ip, [r4, r1]!
 250:	add	r4, r4, ip
 254:	add	r4, r4, #4
 258:	bcc	270 <main+0x270>
 25c:	ldrh	r2, [r3, #14]
 260:	cmp	r2, #0
 264:	ldrne	r2, [r0, r2]!
 268:	addne	r0, r0, r2
 26c:	addne	r5, r0, #4
 270:	ldr	r0, [r4, #-4]
 274:	cmp	r0, #700	; 0x2bc
 278:	bne	5b4 <main+0x5b4>
 27c:	cmp	r5, #0
 280:	beq	554 <main+0x554>
 284:	ldr	r0, [r5, #-4]
 288:	movw	r2, #34464	; 0x86a0
 28c:	movt	r2, #1
 290:	cmp	r0, r2
 294:	bne	554 <main+0x554>
 298:	add	r0, ip, lr
 29c:	mov	r9, #0
 2a0:	str	r7, [sp, #24]
 2a4:	add	r0, r0, r1
 2a8:	add	r8, r7, r0
 2ac:	mov	r0, r8
 2b0:	mov	r1, sl
 2b4:	mov	r2, #7
 2b8:	bl	0 <memcmp>
 2bc:	cmp	r0, #0
 2c0:	bne	4e0 <main+0x4e0>
 2c4:	add	r9, r9, #1
 2c8:	add	r8, r8, #7
 2cc:	cmp	r9, #100	; 0x64
 2d0:	bcc	2ac <main+0x2ac>
 2d4:	ldr	r7, [sp, #24]
 2d8:	mov	r4, #0
 2dc:	mov	r0, r5
 2e0:	mov	r1, r6
 2e4:	mov	r2, #1000	; 0x3e8
 2e8:	bl	0 <memcmp>
 2ec:	cmp	r0, #0
 2f0:	bne	528 <main+0x528>
 2f4:	add	r4, r4, #1
 2f8:	add	r5, r5, #1000	; 0x3e8
 2fc:	cmp	r4, #99	; 0x63
 300:	bls	2dc <main+0x2dc>
 304:	ldr	r2, [sp, #20]
 308:	add	r7, r7, #4
 30c:	add	r2, r2, #1
 310:	lsr	r0, r2, #3
 314:	cmp	r0, #124	; 0x7c
 318:	bls	200 <main+0x200>
 31c:	ldr	r0, [sp, #8]
 320:	ldr	r7, [sp]
 324:	add	r0, r0, #1
 328:	cmp	r0, #10
 32c:	bcc	130 <main+0x130>
 330:	sub	r0, fp, #72	; 0x48
 334:	mov	r1, #0
 338:	bl	0 <gettimeofday>
 33c:	movw	r0, #0
 340:	movt	r0, #0
 344:	ldr	r6, [r0]
 348:	cmp	r6, #0
 34c:	beq	35c <main+0x35c>
 350:	ldr	r9, [r0, #4]
 354:	ldr	r8, [fp, #-72]	; 0xffffffb8
 358:	b	36c <main+0x36c>
 35c:	ldr	r6, [fp, #-72]	; 0xffffffb8
 360:	ldr	r9, [fp, #-68]	; 0xffffffbc
 364:	mov	r8, r6
 368:	stm	r0, {r6, r9}
 36c:	ldr	r5, [fp, #-68]	; 0xffffffbc
 370:	ldr	r4, [fp, #-76]	; 0xffffffb4
 374:	movw	r0, #0
 378:	movw	r1, #0
 37c:	movt	r0, #0
 380:	movt	r1, #0
 384:	bl	0 <printf>
 388:	sub	r1, r5, r9
 38c:	sub	r0, r8, r6
 390:	vmov	s0, r1
 394:	vmov	s2, r0
 398:	movw	r0, #0
 39c:	vcvt.f64.s32	d16, s0
 3a0:	vcvt.f64.s32	d17, s2
 3a4:	movt	r0, #0
 3a8:	vdiv.f64	d16, d16, d8
 3ac:	vadd.f64	d16, d16, d17
 3b0:	vsub.f64	d9, d16, d9
 3b4:	vmov	r2, r3, d9
 3b8:	bl	0 <printf>
 3bc:	movw	r0, #0
 3c0:	mov	r1, #10
 3c4:	movt	r0, #0
 3c8:	bl	0 <printf>
 3cc:	movw	r0, #0
 3d0:	mov	r1, r4
 3d4:	movt	r0, #0
 3d8:	bl	0 <printf>
 3dc:	vmov	s0, r4
 3e0:	vmov.f64	d10, #36	; 0x41200000  10.0
 3e4:	movw	r0, #0
 3e8:	vcvt.f64.u32	d16, s0
 3ec:	movt	r0, #0
 3f0:	vmul.f64	d16, d16, d10
 3f4:	vdiv.f64	d16, d16, d8
 3f8:	vdiv.f64	d16, d16, d9
 3fc:	vmov	r2, r3, d16
 400:	bl	0 <printf>
 404:	movw	r0, #0
 408:	vdiv.f64	d16, d10, d9
 40c:	vmov	r2, r3, d16
 410:	movt	r0, #0
 414:	bl	0 <printf>
 418:	vldr	d17, [pc, #504]	; 618 <main+0x618>
 41c:	vldr	d18, [pc, #508]	; 620 <main+0x620>
 420:	vmul.f64	d16, d9, d17
 424:	vdiv.f64	d16, d16, d10
 428:	vcmpe.f64	d16, d18
 42c:	vmrs	APSR_nzcv, fpscr
 430:	bpl	444 <main+0x444>
 434:	movw	r0, #0
 438:	vmov	r2, r3, d16
 43c:	movt	r0, #0
 440:	b	494 <main+0x494>
 444:	vcmpe.f64	d16, d8
 448:	vmrs	APSR_nzcv, fpscr
 44c:	bpl	464 <main+0x464>
 450:	movw	r0, #0
 454:	vdiv.f64	d16, d16, d18
 458:	vmov	r2, r3, d16
 45c:	movt	r0, #0
 460:	b	494 <main+0x494>
 464:	vcmpe.f64	d16, d17
 468:	vmrs	APSR_nzcv, fpscr
 46c:	bpl	484 <main+0x484>
 470:	movw	r0, #0
 474:	vdiv.f64	d16, d16, d8
 478:	vmov	r2, r3, d16
 47c:	movt	r0, #0
 480:	b	494 <main+0x494>
 484:	movw	r0, #0
 488:	vdiv.f64	d16, d16, d17
 48c:	vmov	r2, r3, d16
 490:	movt	r0, #0
 494:	bl	0 <printf>
 498:	mov	r4, #0
 49c:	add	r0, sp, #28
 4a0:	bl	0 <flatcc_builder_clear>
 4a4:	mov	r0, r7
 4a8:	bl	0 <free>
 4ac:	cmp	r4, #0
 4b0:	beq	4c0 <main+0x4c0>
 4b4:	movw	r0, #0
 4b8:	movt	r0, #0
 4bc:	bl	0 <puts>
 4c0:	mov	r0, r4
 4c4:	sub	sp, fp, #56	; 0x38
 4c8:	vpop	{d8-d10}
 4cc:	add	sp, sp, #4
 4d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4d4:	nop	{0}
 4d8:	.word	0x00000000
 4dc:	.word	0x412e8480
 4e0:	movw	r0, #0
 4e4:	mov	r1, r9
 4e8:	mov	r2, r4
 4ec:	movt	r0, #0
 4f0:	bl	0 <printf>
 4f4:	ldr	r0, [sp]
 4f8:	sub	r1, r8, r0
 4fc:	movw	r0, #0
 500:	movt	r0, #0
 504:	bl	0 <printf>
 508:	movw	r0, #0
 50c:	movw	r1, #0
 510:	movw	r3, #0
 514:	mov	r2, #85	; 0x55
 518:	movt	r0, #0
 51c:	movt	r1, #0
 520:	movt	r3, #0
 524:	bl	0 <__assert_fail>
 528:	movw	r0, #0
 52c:	movw	r1, #0
 530:	movw	r3, #0
 534:	mov	r2, #91	; 0x5b
 538:	movt	r0, #0
 53c:	movt	r1, #0
 540:	movt	r3, #0
 544:	bl	0 <__assert_fail>
 548:	movw	r0, #0
 54c:	movt	r0, #0
 550:	b	57c <main+0x57c>
 554:	movw	r0, #0
 558:	movw	r1, #0
 55c:	movw	r3, #0
 560:	mov	r2, #78	; 0x4e
 564:	movt	r0, #0
 568:	movt	r1, #0
 56c:	movt	r3, #0
 570:	bl	0 <__assert_fail>
 574:	movw	r0, #0
 578:	movt	r0, #0
 57c:	movw	r1, #0
 580:	movw	r3, #0
 584:	movw	r2, #699	; 0x2bb
 588:	movt	r1, #0
 58c:	movt	r3, #0
 590:	bl	0 <__assert_fail>
 594:	movw	r0, #0
 598:	movw	r1, #0
 59c:	movw	r3, #0
 5a0:	movw	r2, #693	; 0x2b5
 5a4:	movt	r0, #0
 5a8:	movt	r1, #0
 5ac:	movt	r3, #0
 5b0:	bl	0 <__assert_fail>
 5b4:	movw	r0, #0
 5b8:	movw	r1, #0
 5bc:	movw	r3, #0
 5c0:	mov	r2, #74	; 0x4a
 5c4:	movt	r0, #0
 5c8:	movt	r1, #0
 5cc:	movt	r3, #0
 5d0:	bl	0 <__assert_fail>
 5d4:	movw	r0, #0
 5d8:	movw	r1, #0
 5dc:	movw	r3, #0
 5e0:	mov	r2, #143	; 0x8f
 5e4:	movt	r0, #0
 5e8:	movt	r1, #0
 5ec:	movt	r3, #0
 5f0:	bl	0 <__assert_fail>
 5f4:	movw	r0, #0
 5f8:	movw	r1, #0
 5fc:	movw	r3, #0
 600:	mov	r2, #139	; 0x8b
 604:	movt	r0, #0
 608:	movt	r1, #0
 60c:	movt	r3, #0
 610:	bl	0 <__assert_fail>
 614:	nop	{0}
 618:	.word	0x00000000
 61c:	.word	0x41cdcd65
 620:	.word	0x00000000
 624:	.word	0x408f4000

00000628 <create_root_monster>:
 628:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 62c:	add	fp, sp, #24
 630:	mov	r4, r0
 634:	bl	0 <flatcc_builder_reset>
 638:	movw	r1, #0
 63c:	mov	r0, r4
 640:	mov	r2, #0
 644:	mov	r3, #0
 648:	movt	r1, #0
 64c:	bl	0 <flatcc_builder_start_buffer>
 650:	cmp	r0, #0
 654:	bne	664 <create_root_monster+0x3c>
 658:	mov	r0, r4
 65c:	mov	r1, #36	; 0x24
 660:	bl	0 <flatcc_builder_start_table>
 664:	movw	r1, #0
 668:	mov	r0, r4
 66c:	movt	r1, #0
 670:	bl	0 <flatcc_builder_create_string_str>
 674:	cmp	r0, #0
 678:	beq	694 <create_root_monster+0x6c>
 67c:	mov	r5, r0
 680:	mov	r0, r4
 684:	mov	r1, #3
 688:	bl	0 <flatcc_builder_table_add_offset>
 68c:	cmp	r0, #0
 690:	strne	r5, [r0]
 694:	mov	r0, r4
 698:	bl	0 <flatcc_builder_start_offset_vector>
 69c:	movw	r5, #0
 6a0:	movw	r6, #0
 6a4:	movw	r8, #0
 6a8:	mov	r9, #0
 6ac:	movt	r5, #0
 6b0:	movt	r6, #0
 6b4:	movt	r8, #0
 6b8:	mov	r0, r4
 6bc:	mov	r1, #36	; 0x24
 6c0:	bl	0 <flatcc_builder_start_table>
 6c4:	mov	r0, r4
 6c8:	bl	0 <flatcc_builder_start_string>
 6cc:	mov	r7, #100	; 0x64
 6d0:	mov	r0, r4
 6d4:	mov	r1, r5
 6d8:	mov	r2, #7
 6dc:	bl	0 <flatcc_builder_append_string>
 6e0:	subs	r7, r7, #1
 6e4:	bne	6d0 <create_root_monster+0xa8>
 6e8:	mov	r0, r4
 6ec:	bl	0 <flatcc_builder_end_string>
 6f0:	cmp	r0, #0
 6f4:	beq	710 <create_root_monster+0xe8>
 6f8:	mov	r7, r0
 6fc:	mov	r0, r4
 700:	mov	r1, #3
 704:	bl	0 <flatcc_builder_table_add_offset>
 708:	cmp	r0, #0
 70c:	strne	r7, [r0]
 710:	mov	r0, r4
 714:	mov	r1, #1
 718:	mov	r2, #1
 71c:	mvn	r3, #0
 720:	bl	0 <flatcc_builder_start_vector>
 724:	mov	r7, #100	; 0x64
 728:	mov	r0, r4
 72c:	mov	r1, r6
 730:	mov	r2, #1000	; 0x3e8
 734:	bl	0 <flatcc_builder_append_vector>
 738:	subs	r7, r7, #1
 73c:	bne	728 <create_root_monster+0x100>
 740:	mov	r0, r4
 744:	bl	0 <flatcc_builder_end_vector>
 748:	cmp	r0, #0
 74c:	beq	768 <create_root_monster+0x140>
 750:	mov	r7, r0
 754:	mov	r0, r4
 758:	mov	r1, #5
 75c:	bl	0 <flatcc_builder_table_add_offset>
 760:	cmp	r0, #0
 764:	strne	r7, [r0]
 768:	mov	r0, r4
 76c:	mov	r1, r8
 770:	mov	r2, #1
 774:	bl	0 <flatcc_builder_check_required>
 778:	cmp	r0, #0
 77c:	beq	804 <create_root_monster+0x1dc>
 780:	mov	r0, r4
 784:	bl	0 <flatcc_builder_end_table>
 788:	cmp	r0, #0
 78c:	beq	824 <create_root_monster+0x1fc>
 790:	mov	r1, r0
 794:	mov	r0, r4
 798:	bl	0 <flatcc_builder_offset_vector_push>
 79c:	add	r9, r9, #1
 7a0:	cmp	r9, #1000	; 0x3e8
 7a4:	bcc	6b8 <create_root_monster+0x90>
 7a8:	mov	r0, r4
 7ac:	bl	0 <flatcc_builder_end_offset_vector>
 7b0:	cmp	r0, #0
 7b4:	beq	844 <create_root_monster+0x21c>
 7b8:	mov	r5, r0
 7bc:	mov	r0, r4
 7c0:	mov	r1, #11
 7c4:	bl	0 <flatcc_builder_table_add_offset>
 7c8:	movw	r1, #0
 7cc:	cmp	r0, #0
 7d0:	mov	r2, #1
 7d4:	strne	r5, [r0]
 7d8:	movt	r1, #0
 7dc:	mov	r0, r4
 7e0:	bl	0 <flatcc_builder_check_required>
 7e4:	cmp	r0, #0
 7e8:	beq	804 <create_root_monster+0x1dc>
 7ec:	mov	r0, r4
 7f0:	bl	0 <flatcc_builder_end_table>
 7f4:	mov	r1, r0
 7f8:	mov	r0, r4
 7fc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
 800:	b	0 <flatcc_builder_end_buffer>
 804:	movw	r0, #0
 808:	movw	r1, #0
 80c:	movw	r3, #0
 810:	mov	r2, #235	; 0xeb
 814:	movt	r0, #0
 818:	movt	r1, #0
 81c:	movt	r3, #0
 820:	bl	0 <__assert_fail>
 824:	movw	r0, #0
 828:	movw	r1, #0
 82c:	movw	r3, #0
 830:	mov	r2, #42	; 0x2a
 834:	movt	r0, #0
 838:	movt	r1, #0
 83c:	movt	r3, #0
 840:	bl	0 <__assert_fail>
 844:	movw	r0, #0
 848:	movw	r1, #0
 84c:	movw	r3, #0
 850:	mov	r2, #56	; 0x38
 854:	movt	r0, #0
 858:	movt	r1, #0
 85c:	movt	r3, #0
 860:	bl	0 <__assert_fail>
