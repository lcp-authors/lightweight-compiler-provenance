
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/monster_test/CMakeFiles/monster_test.dir/monster_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <verify_empty_monster>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	cmp	r0, #0
       c:	beq	64 <verify_empty_monster+0x64>
      10:	ldr	r1, [r0, #4]
      14:	movw	r2, #20301	; 0x4f4d
      18:	movt	r2, #21326	; 0x534e
      1c:	cmp	r1, r2
      20:	bne	64 <verify_empty_monster+0x64>
      24:	ldr	r1, [r0]
      28:	ldr	r2, [r0, r1]!
      2c:	mov	r1, r0
      30:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
      34:	cmp	r2, #9
      38:	bls	78 <verify_empty_monster+0x78>
      3c:	ldrh	r2, [r1, #8]
      40:	cmp	r2, #0
      44:	beq	84 <verify_empty_monster+0x84>
      48:	add	r0, r0, r2
      4c:	ldrh	r0, [r0]
      50:	cmp	r0, #100	; 0x64
      54:	bne	a4 <verify_empty_monster+0xa4>
      58:	movw	r0, #0
      5c:	movt	r0, #0
      60:	b	6c <verify_empty_monster+0x6c>
      64:	movw	r0, #0
      68:	movt	r0, #0
      6c:	bl	0 <puts>
      70:	mvn	r0, #0
      74:	pop	{fp, pc}
      78:	mov	r0, #0
      7c:	cmp	r2, #6
      80:	popcc	{fp, pc}
      84:	ldrh	r0, [r1, #4]
      88:	cmp	r0, #0
      8c:	beq	9c <verify_empty_monster+0x9c>
      90:	movw	r0, #0
      94:	movt	r0, #0
      98:	b	6c <verify_empty_monster+0x6c>
      9c:	mov	r0, #0
      a0:	pop	{fp, pc}
      a4:	movw	r0, #0
      a8:	movt	r0, #0
      ac:	b	6c <verify_empty_monster+0x6c>

000000b0 <test_enums>:
      b0:	mov	r0, #0
      b4:	bx	lr

000000b8 <test_type_aliases>:
      b8:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
      bc:	add	fp, sp, #24
      c0:	sub	sp, sp, #16
      c4:	mov	r4, r0
      c8:	bl	0 <flatcc_builder_reset>
      cc:	mvn	r0, #0
      d0:	mov	r1, #1
      d4:	mov	r2, #0
      d8:	mov	r3, #1
      dc:	mov	r8, #0
      e0:	str	r1, [sp]
      e4:	str	r0, [sp, #4]
      e8:	mov	r0, r4
      ec:	mov	r1, #0
      f0:	bl	0 <flatcc_builder_create_vector>
      f4:	mov	r6, r0
      f8:	mvn	r0, #-536870912	; 0xe0000000
      fc:	mov	r1, #8
     100:	mov	r2, #0
     104:	mov	r3, #8
     108:	str	r1, [sp]
     10c:	str	r0, [sp, #4]
     110:	mov	r0, r4
     114:	mov	r1, #0
     118:	bl	0 <flatcc_builder_create_vector>
     11c:	movw	r1, #0
     120:	mov	r5, r0
     124:	mov	r0, r4
     128:	mov	r2, #0
     12c:	mov	r3, #0
     130:	movt	r1, #0
     134:	bl	0 <flatcc_builder_start_buffer>
     138:	cmp	r0, #0
     13c:	bne	160 <test_type_aliases+0xa8>
     140:	mov	r0, r4
     144:	mov	r1, #12
     148:	bl	0 <flatcc_builder_start_table>
     14c:	cmp	r0, #0
     150:	beq	2cc <test_type_aliases+0x214>
     154:	mov	r0, r4
     158:	mov	r1, r8
     15c:	bl	0 <flatcc_builder_end_buffer>
     160:	add	r1, sp, #12
     164:	mov	r0, r4
     168:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     16c:	ldr	r1, [sp, #12]
     170:	movw	r2, #0
     174:	movw	r3, #0
     178:	mov	r4, r0
     17c:	movt	r2, #0
     180:	movt	r3, #0
     184:	bl	0 <flatcc_verify_table_as_root>
     188:	cmp	r0, #0
     18c:	beq	1d0 <test_type_aliases+0x118>
     190:	mov	r5, r0
     194:	movw	r0, #0
     198:	ldr	r2, [sp, #12]
     19c:	mov	r1, r4
     1a0:	movt	r0, #0
     1a4:	ldr	r3, [r0]
     1a8:	movw	r0, #0
     1ac:	movt	r0, #0
     1b0:	bl	5d4 <hexdump>
     1b4:	mov	r0, r5
     1b8:	bl	0 <flatcc_verify_error_string>
     1bc:	mov	r1, r0
     1c0:	movw	r0, #0
     1c4:	movt	r0, #0
     1c8:	bl	0 <printf>
     1cc:	b	2b8 <test_type_aliases+0x200>
     1d0:	cmp	r4, #0
     1d4:	beq	588 <test_type_aliases+0x4d0>
     1d8:	ldr	r0, [r4, #4]
     1dc:	movw	r1, #20301	; 0x4f4d
     1e0:	movt	r1, #21326	; 0x534e
     1e4:	cmp	r0, r1
     1e8:	bne	588 <test_type_aliases+0x4d0>
     1ec:	ldr	r1, [r4]
     1f0:	mov	r6, r4
     1f4:	ldr	r2, [r6, r1]!
     1f8:	mov	r1, r6
     1fc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     200:	cmp	r2, #5
     204:	bls	2a8 <test_type_aliases+0x1f0>
     208:	ldrh	r3, [r1, #4]
     20c:	cmp	r3, #0
     210:	beq	2a8 <test_type_aliases+0x1f0>
     214:	cmp	r2, #10
     218:	bcc	2a8 <test_type_aliases+0x1f0>
     21c:	ldrb	r3, [r6, r3]
     220:	cmp	r3, #128	; 0x80
     224:	bne	2a8 <test_type_aliases+0x1f0>
     228:	ldrh	r3, [r1, #8]
     22c:	cmp	r3, #0
     230:	beq	2a8 <test_type_aliases+0x1f0>
     234:	cmp	r2, #14
     238:	bcc	2a8 <test_type_aliases+0x1f0>
     23c:	add	r3, r6, r3
     240:	ldrh	r3, [r3]
     244:	cmp	r3, #32768	; 0x8000
     248:	bne	2a8 <test_type_aliases+0x1f0>
     24c:	ldrh	r3, [r1, #12]
     250:	cmp	r3, #0
     254:	beq	2a8 <test_type_aliases+0x1f0>
     258:	cmp	r2, #18
     25c:	bcc	2a8 <test_type_aliases+0x1f0>
     260:	ldr	r3, [r6, r3]
     264:	cmp	r3, #-2147483648	; 0x80000000
     268:	bne	2a8 <test_type_aliases+0x1f0>
     26c:	ldrh	r3, [r1, #16]
     270:	cmp	r3, #0
     274:	beq	2a8 <test_type_aliases+0x1f0>
     278:	mov	r0, r6
     27c:	ldr	r3, [r0, r3]!
     280:	ldr	r0, [r0, #4]
     284:	eor	r0, r0, #-2147483648	; 0x80000000
     288:	orrs	r0, r3, r0
     28c:	bne	2a8 <test_type_aliases+0x1f0>
     290:	ldrh	r3, [r1, #6]
     294:	cmp	r3, #0
     298:	beq	2a8 <test_type_aliases+0x1f0>
     29c:	ldrb	r0, [r6, r3]
     2a0:	cmp	r0, #255	; 0xff
     2a4:	beq	4bc <test_type_aliases+0x404>
     2a8:	movw	r0, #0
     2ac:	movt	r0, #0
     2b0:	bl	0 <puts>
     2b4:	mvn	r5, #0
     2b8:	mov	r0, r4
     2bc:	bl	0 <flatcc_builder_aligned_free>
     2c0:	mov	r0, r5
     2c4:	sub	sp, fp, #24
     2c8:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
     2cc:	mov	r0, r4
     2d0:	mov	r1, #6
     2d4:	mov	r2, #8
     2d8:	mov	r3, #8
     2dc:	bl	0 <flatcc_builder_table_add>
     2e0:	cmp	r0, #0
     2e4:	beq	154 <test_type_aliases+0x9c>
     2e8:	mov	r9, #-2147483648	; 0x80000000
     2ec:	mov	r8, #0
     2f0:	mov	r1, #7
     2f4:	mov	r2, #8
     2f8:	mov	r3, #8
     2fc:	strd	r8, [r0]
     300:	mov	r0, r4
     304:	bl	0 <flatcc_builder_table_add>
     308:	cmp	r0, #0
     30c:	beq	154 <test_type_aliases+0x9c>
     310:	mvn	r1, #0
     314:	mov	r2, #8
     318:	mov	r3, #8
     31c:	str	r1, [r0]
     320:	str	r1, [r0, #4]
     324:	mov	r0, r4
     328:	mov	r1, #9
     32c:	bl	0 <flatcc_builder_table_add>
     330:	cmp	r0, #0
     334:	beq	154 <test_type_aliases+0x9c>
     338:	movw	r1, #26214	; 0x6666
     33c:	movw	r2, #26214	; 0x6666
     340:	mov	r3, #4
     344:	movt	r2, #26214	; 0x6666
     348:	movt	r1, #16386	; 0x4002
     34c:	str	r2, [r0]
     350:	str	r1, [r0, #4]
     354:	mov	r0, r4
     358:	mov	r1, #4
     35c:	mov	r2, #4
     360:	bl	0 <flatcc_builder_table_add>
     364:	cmp	r0, #0
     368:	beq	154 <test_type_aliases+0x9c>
     36c:	mov	r1, #-2147483648	; 0x80000000
     370:	mov	r2, #4
     374:	mov	r3, #4
     378:	str	r1, [r0]
     37c:	mov	r0, r4
     380:	mov	r1, #5
     384:	bl	0 <flatcc_builder_table_add>
     388:	cmp	r0, #0
     38c:	beq	154 <test_type_aliases+0x9c>
     390:	mvn	r1, #0
     394:	mov	r2, #4
     398:	mov	r3, #4
     39c:	str	r1, [r0]
     3a0:	mov	r0, r4
     3a4:	mov	r1, #8
     3a8:	bl	0 <flatcc_builder_table_add>
     3ac:	cmp	r0, #0
     3b0:	beq	154 <test_type_aliases+0x9c>
     3b4:	movw	r1, #13107	; 0x3333
     3b8:	cmp	r6, #0
     3bc:	movt	r1, #16403	; 0x4013
     3c0:	str	r1, [r0]
     3c4:	beq	154 <test_type_aliases+0x9c>
     3c8:	mov	r0, r4
     3cc:	mov	r1, #10
     3d0:	bl	0 <flatcc_builder_table_add_offset>
     3d4:	cmp	r0, #0
     3d8:	strne	r6, [r0]
     3dc:	cmpne	r5, #0
     3e0:	beq	154 <test_type_aliases+0x9c>
     3e4:	mov	r0, r4
     3e8:	mov	r1, #11
     3ec:	bl	0 <flatcc_builder_table_add_offset>
     3f0:	cmp	r0, #0
     3f4:	beq	154 <test_type_aliases+0x9c>
     3f8:	str	r5, [r0]
     3fc:	mov	r0, r4
     400:	mov	r1, #2
     404:	mov	r2, #2
     408:	mov	r3, #2
     40c:	bl	0 <flatcc_builder_table_add>
     410:	cmp	r0, #0
     414:	beq	154 <test_type_aliases+0x9c>
     418:	mov	r1, #32768	; 0x8000
     41c:	mov	r2, #2
     420:	mov	r3, #2
     424:	strh	r1, [r0]
     428:	mov	r0, r4
     42c:	mov	r1, #3
     430:	bl	0 <flatcc_builder_table_add>
     434:	cmp	r0, #0
     438:	beq	154 <test_type_aliases+0x9c>
     43c:	mvn	r1, #0
     440:	mov	r2, #1
     444:	mov	r3, #1
     448:	mov	r8, #0
     44c:	strh	r1, [r0]
     450:	mov	r0, r4
     454:	mov	r1, #0
     458:	bl	0 <flatcc_builder_table_add>
     45c:	cmp	r0, #0
     460:	beq	154 <test_type_aliases+0x9c>
     464:	mov	r1, #128	; 0x80
     468:	mov	r2, #1
     46c:	mov	r3, #1
     470:	strb	r1, [r0]
     474:	mov	r0, r4
     478:	mov	r1, #1
     47c:	bl	0 <flatcc_builder_table_add>
     480:	cmp	r0, #0
     484:	beq	154 <test_type_aliases+0x9c>
     488:	mov	r1, #255	; 0xff
     48c:	mov	r2, #0
     490:	strb	r1, [r0]
     494:	movw	r1, #0
     498:	mov	r0, r4
     49c:	movt	r1, #0
     4a0:	bl	0 <flatcc_builder_check_required>
     4a4:	cmp	r0, #0
     4a8:	beq	5a8 <test_type_aliases+0x4f0>
     4ac:	mov	r0, r4
     4b0:	bl	0 <flatcc_builder_end_table>
     4b4:	mov	r8, r0
     4b8:	b	154 <test_type_aliases+0x9c>
     4bc:	ldrh	r3, [r1, #10]
     4c0:	cmp	r3, #0
     4c4:	beq	2a8 <test_type_aliases+0x1f0>
     4c8:	add	r0, r6, r3
     4cc:	movw	r3, #65535	; 0xffff
     4d0:	ldrh	r0, [r0]
     4d4:	cmp	r0, r3
     4d8:	bne	2a8 <test_type_aliases+0x1f0>
     4dc:	ldrh	r3, [r1, #14]
     4e0:	cmp	r3, #0
     4e4:	beq	2a8 <test_type_aliases+0x1f0>
     4e8:	cmp	r2, #20
     4ec:	bcc	2a8 <test_type_aliases+0x1f0>
     4f0:	ldr	r0, [r6, r3]
     4f4:	cmn	r0, #1
     4f8:	bne	2a8 <test_type_aliases+0x1f0>
     4fc:	ldrh	r3, [r1, #18]
     500:	cmp	r3, #0
     504:	beq	2a8 <test_type_aliases+0x1f0>
     508:	cmp	r2, #22
     50c:	bcc	2a8 <test_type_aliases+0x1f0>
     510:	mov	r0, r6
     514:	mvn	r5, #0
     518:	ldr	r3, [r0, r3]!
     51c:	ldr	r0, [r0, #4]
     520:	eor	r3, r3, r5
     524:	eor	r0, r0, r5
     528:	orrs	r0, r3, r0
     52c:	bne	2a8 <test_type_aliases+0x1f0>
     530:	ldrh	r3, [r1, #20]
     534:	cmp	r3, #0
     538:	beq	2a8 <test_type_aliases+0x1f0>
     53c:	cmp	r2, #24
     540:	bcc	2a8 <test_type_aliases+0x1f0>
     544:	add	r0, r6, r3
     548:	vldr	s2, [pc, #128]	; 5d0 <test_type_aliases+0x518>
     54c:	vldr	s0, [r0]
     550:	vcmp.f32	s0, s2
     554:	vmrs	APSR_nzcv, fpscr
     558:	bne	2a8 <test_type_aliases+0x1f0>
     55c:	ldrh	r1, [r1, #22]
     560:	cmp	r1, #0
     564:	beq	2a8 <test_type_aliases+0x1f0>
     568:	add	r0, r6, r1
     56c:	vldr	d16, [pc, #84]	; 5c8 <test_type_aliases+0x510>
     570:	vldr	d17, [r0]
     574:	vcmp.f64	d17, d16
     578:	vmrs	APSR_nzcv, fpscr
     57c:	bne	2a8 <test_type_aliases+0x1f0>
     580:	mov	r5, #0
     584:	b	2b8 <test_type_aliases+0x200>
     588:	movw	r0, #0
     58c:	movw	r1, #0
     590:	movw	r3, #0
     594:	movw	r2, #749	; 0x2ed
     598:	movt	r0, #0
     59c:	movt	r1, #0
     5a0:	movt	r3, #0
     5a4:	bl	0 <__assert_fail>
     5a8:	movw	r0, #0
     5ac:	movw	r1, #0
     5b0:	movw	r3, #0
     5b4:	mov	r2, #237	; 0xed
     5b8:	movt	r0, #0
     5bc:	movt	r1, #0
     5c0:	movt	r3, #0
     5c4:	bl	0 <__assert_fail>
     5c8:	.word	0x66666666
     5cc:	.word	0x40026666
     5d0:	.word	0x40133333

000005d4 <hexdump>:
     5d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d8:	add	fp, sp, #28
     5dc:	sub	sp, sp, #20
     5e0:	mov	r4, r3
     5e4:	mov	r5, r2
     5e8:	mov	r6, r1
     5ec:	cmp	r0, #0
     5f0:	beq	608 <hexdump+0x34>
     5f4:	movw	r1, #0
     5f8:	mov	r2, r0
     5fc:	mov	r0, r4
     600:	movt	r1, #0
     604:	bl	0 <fprintf>
     608:	cmp	r5, #0
     60c:	beq	6f8 <hexdump+0x124>
     610:	movw	sl, #0
     614:	add	r7, sp, #3
     618:	mov	r8, #0
     61c:	movt	sl, #0
     620:	ands	r9, r8, #15
     624:	bne	688 <hexdump+0xb4>
     628:	b	6a0 <hexdump+0xcc>
     62c:	movw	r1, #0
     630:	mov	r0, r4
     634:	mov	r2, r8
     638:	movt	r1, #0
     63c:	bl	0 <fprintf>
     640:	ldrb	r2, [r6, r8]
     644:	mov	r0, r4
     648:	mov	r1, sl
     64c:	bl	0 <fprintf>
     650:	ldrb	r0, [r6, r8]
     654:	add	r8, r8, #1
     658:	sub	r1, r0, #32
     65c:	uxtb	r1, r1
     660:	cmp	r1, #94	; 0x5e
     664:	mov	r1, #0
     668:	movwhi	r0, #46	; 0x2e
     66c:	cmp	r5, r8
     670:	strb	r0, [r7, r9]
     674:	add	r0, r7, r9
     678:	strb	r1, [r0, #1]
     67c:	beq	6c0 <hexdump+0xec>
     680:	ands	r9, r8, #15
     684:	beq	6a0 <hexdump+0xcc>
     688:	tst	r8, #7
     68c:	bne	640 <hexdump+0x6c>
     690:	mov	r0, #32
     694:	mov	r1, r4
     698:	bl	0 <fputc>
     69c:	b	640 <hexdump+0x6c>
     6a0:	cmp	r8, #0
     6a4:	beq	62c <hexdump+0x58>
     6a8:	movw	r1, #0
     6ac:	mov	r0, r4
     6b0:	mov	r2, r7
     6b4:	movt	r1, #0
     6b8:	bl	0 <fprintf>
     6bc:	b	62c <hexdump+0x58>
     6c0:	tst	r5, #15
     6c4:	beq	6f8 <hexdump+0x124>
     6c8:	add	r6, r5, #1
     6cc:	movw	r5, #0
     6d0:	movt	r5, #0
     6d4:	mov	r0, r5
     6d8:	mov	r1, #3
     6dc:	mov	r2, #1
     6e0:	mov	r3, r4
     6e4:	bl	0 <fwrite>
     6e8:	add	r0, r6, #1
     6ec:	tst	r6, #15
     6f0:	mov	r6, r0
     6f4:	bne	6d4 <hexdump+0x100>
     6f8:	movw	r1, #0
     6fc:	add	r2, sp, #3
     700:	mov	r0, r4
     704:	movt	r1, #0
     708:	bl	0 <fprintf>
     70c:	sub	sp, fp, #28
     710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000714 <test_empty_monster>:
     714:	push	{r4, r5, fp, lr}
     718:	add	fp, sp, #8
     71c:	sub	sp, sp, #8
     720:	mov	r4, r0
     724:	bl	0 <flatcc_builder_reset>
     728:	movw	r1, #0
     72c:	mov	r0, r4
     730:	mov	r2, #0
     734:	mov	r3, #0
     738:	movt	r1, #0
     73c:	bl	0 <flatcc_builder_start_buffer>
     740:	mov	r0, r4
     744:	mov	r1, #36	; 0x24
     748:	bl	0 <flatcc_builder_start_table>
     74c:	movw	r1, #0
     750:	mov	r0, r4
     754:	movt	r1, #0
     758:	bl	0 <flatcc_builder_create_string_str>
     75c:	cmp	r0, #0
     760:	beq	77c <test_empty_monster+0x68>
     764:	mov	r5, r0
     768:	mov	r0, r4
     76c:	mov	r1, #3
     770:	bl	0 <flatcc_builder_table_add_offset>
     774:	cmp	r0, #0
     778:	strne	r5, [r0]
     77c:	movw	r1, #0
     780:	mov	r0, r4
     784:	mov	r2, #1
     788:	movt	r1, #0
     78c:	bl	0 <flatcc_builder_check_required>
     790:	cmp	r0, #0
     794:	beq	900 <test_empty_monster+0x1ec>
     798:	mov	r0, r4
     79c:	bl	0 <flatcc_builder_end_table>
     7a0:	mov	r1, r0
     7a4:	mov	r0, r4
     7a8:	bl	0 <flatcc_builder_end_buffer>
     7ac:	add	r1, sp, #4
     7b0:	mov	r0, r4
     7b4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     7b8:	mov	r4, r0
     7bc:	movw	r0, #0
     7c0:	ldr	r2, [sp, #4]
     7c4:	movt	r0, #0
     7c8:	mov	r1, r4
     7cc:	ldr	r3, [r0]
     7d0:	movw	r0, #0
     7d4:	movt	r0, #0
     7d8:	bl	5d4 <hexdump>
     7dc:	movw	r0, #0
     7e0:	cmp	r4, #0
     7e4:	movt	r0, #0
     7e8:	beq	868 <test_empty_monster+0x154>
     7ec:	ldr	r1, [r4, #4]
     7f0:	movw	r2, #20301	; 0x4f4d
     7f4:	movt	r2, #21326	; 0x534e
     7f8:	cmp	r1, r2
     7fc:	bne	868 <test_empty_monster+0x154>
     800:	ldr	r0, [r4]
     804:	mov	r1, r4
     808:	ldr	r2, [r1, r0]!
     80c:	mov	r0, r1
     810:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
     814:	cmp	r2, #10
     818:	bcc	84c <test_empty_monster+0x138>
     81c:	ldrh	r2, [r0, #8]
     820:	cmp	r2, #0
     824:	beq	854 <test_empty_monster+0x140>
     828:	add	r0, r1, r2
     82c:	movw	r2, #0
     830:	ldrh	r1, [r0]
     834:	movt	r2, #0
     838:	movw	r0, #0
     83c:	movt	r0, #0
     840:	cmp	r1, #100	; 0x64
     844:	moveq	r0, r2
     848:	b	868 <test_empty_monster+0x154>
     84c:	cmp	r2, #6
     850:	bcc	884 <test_empty_monster+0x170>
     854:	ldrh	r0, [r0, #4]
     858:	cmp	r0, #0
     85c:	beq	884 <test_empty_monster+0x170>
     860:	movw	r0, #0
     864:	movt	r0, #0
     868:	bl	0 <puts>
     86c:	mvn	r5, #0
     870:	mov	r0, r4
     874:	bl	0 <flatcc_builder_aligned_free>
     878:	mov	r0, r5
     87c:	sub	sp, fp, #8
     880:	pop	{r4, r5, fp, pc}
     884:	ldr	r1, [sp, #4]
     888:	movw	r2, #0
     88c:	movw	r3, #0
     890:	mov	r0, r4
     894:	movt	r2, #0
     898:	movt	r3, #0
     89c:	bl	0 <flatcc_verify_table_as_root>
     8a0:	cmp	r0, #0
     8a4:	beq	8c4 <test_empty_monster+0x1b0>
     8a8:	bl	0 <flatcc_verify_error_string>
     8ac:	mov	r1, r0
     8b0:	movw	r0, #0
     8b4:	movt	r0, #0
     8b8:	bl	0 <printf>
     8bc:	mvn	r5, #0
     8c0:	b	878 <test_empty_monster+0x164>
     8c4:	ldr	r0, [sp, #4]
     8c8:	movw	r2, #0
     8cc:	movw	r3, #0
     8d0:	movt	r2, #0
     8d4:	movt	r3, #0
     8d8:	sub	r1, r0, #1
     8dc:	mov	r0, r4
     8e0:	bl	0 <flatcc_verify_table_as_root>
     8e4:	mov	r5, #0
     8e8:	cmp	r0, #0
     8ec:	bne	870 <test_empty_monster+0x15c>
     8f0:	movw	r0, #0
     8f4:	movt	r0, #0
     8f8:	bl	0 <puts>
     8fc:	b	8bc <test_empty_monster+0x1a8>
     900:	movw	r0, #0
     904:	movw	r1, #0
     908:	movw	r3, #0
     90c:	mov	r2, #235	; 0xeb
     910:	movt	r0, #0
     914:	movt	r1, #0
     918:	movt	r3, #0
     91c:	bl	0 <__assert_fail>

00000920 <test_typed_empty_monster>:
     920:	push	{r4, r5, r6, sl, fp, lr}
     924:	add	fp, sp, #16
     928:	sub	sp, sp, #8
     92c:	mov	r4, r0
     930:	mov	r0, #0
     934:	str	r0, [sp]
     938:	mov	r0, r4
     93c:	bl	0 <flatcc_builder_reset>
     940:	movw	r1, #0
     944:	mov	r0, r4
     948:	mov	r2, #0
     94c:	mov	r3, #0
     950:	movt	r1, #0
     954:	bl	0 <flatcc_builder_start_buffer>
     958:	mov	r0, r4
     95c:	mov	r1, #36	; 0x24
     960:	bl	0 <flatcc_builder_start_table>
     964:	movw	r1, #0
     968:	mov	r0, r4
     96c:	movt	r1, #0
     970:	bl	0 <flatcc_builder_create_string_str>
     974:	cmp	r0, #0
     978:	beq	994 <test_typed_empty_monster+0x74>
     97c:	mov	r5, r0
     980:	mov	r0, r4
     984:	mov	r1, #3
     988:	bl	0 <flatcc_builder_table_add_offset>
     98c:	cmp	r0, #0
     990:	strne	r5, [r0]
     994:	movw	r1, #0
     998:	mov	r0, r4
     99c:	mov	r2, #1
     9a0:	movt	r1, #0
     9a4:	bl	0 <flatcc_builder_check_required>
     9a8:	cmp	r0, #0
     9ac:	beq	b70 <test_typed_empty_monster+0x250>
     9b0:	mov	r0, r4
     9b4:	bl	0 <flatcc_builder_end_table>
     9b8:	mov	r1, r0
     9bc:	mov	r0, r4
     9c0:	bl	0 <flatcc_builder_end_buffer>
     9c4:	add	r1, sp, #4
     9c8:	mov	r0, r4
     9cc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     9d0:	mov	r4, r0
     9d4:	movw	r0, #0
     9d8:	ldr	r2, [sp, #4]
     9dc:	movt	r0, #0
     9e0:	mov	r1, r4
     9e4:	ldr	r3, [r0]
     9e8:	movw	r0, #0
     9ec:	movt	r0, #0
     9f0:	bl	5d4 <hexdump>
     9f4:	ldr	r1, [r4, #4]
     9f8:	movw	r6, #62593	; 0xf481
     9fc:	movt	r6, #13070	; 0x330e
     a00:	cmp	r1, r6
     a04:	bne	a78 <test_typed_empty_monster+0x158>
     a08:	movw	r0, #0
     a0c:	movt	r0, #0
     a10:	bl	0 <puts>
     a14:	ldr	r1, [sp, #4]
     a18:	movw	r2, #0
     a1c:	movw	r3, #0
     a20:	mov	r0, r4
     a24:	movt	r2, #0
     a28:	movt	r3, #0
     a2c:	bl	0 <flatcc_verify_table_as_root>
     a30:	cmp	r0, #0
     a34:	bne	a5c <test_typed_empty_monster+0x13c>
     a38:	ldr	r1, [sp, #4]
     a3c:	movw	r2, #0
     a40:	movw	r3, #0
     a44:	mov	r0, r4
     a48:	movt	r2, #0
     a4c:	movt	r3, #0
     a50:	bl	0 <flatcc_verify_table_as_root>
     a54:	cmp	r0, #0
     a58:	beq	a9c <test_typed_empty_monster+0x17c>
     a5c:	mov	r5, r0
     a60:	bl	0 <flatcc_verify_error_string>
     a64:	mov	r1, r0
     a68:	movw	r0, #0
     a6c:	movt	r0, #0
     a70:	bl	0 <printf>
     a74:	b	a88 <test_typed_empty_monster+0x168>
     a78:	movw	r0, #0
     a7c:	movt	r0, #0
     a80:	bl	0 <printf>
     a84:	mvn	r5, #0
     a88:	mov	r0, r4
     a8c:	bl	0 <flatcc_builder_aligned_free>
     a90:	mov	r0, r5
     a94:	sub	sp, fp, #16
     a98:	pop	{r4, r5, r6, sl, fp, pc}
     a9c:	ldr	r1, [sp, #4]
     aa0:	movw	r3, #0
     aa4:	mov	r0, r4
     aa8:	mov	r2, r6
     aac:	movt	r3, #0
     ab0:	bl	0 <flatcc_verify_table_as_typed_root>
     ab4:	cmp	r0, #0
     ab8:	beq	ad8 <test_typed_empty_monster+0x1b8>
     abc:	mov	r5, r0
     ac0:	bl	0 <flatcc_verify_error_string>
     ac4:	mov	r1, r0
     ac8:	movw	r0, #0
     acc:	movt	r0, #0
     ad0:	bl	0 <printf>
     ad4:	b	a88 <test_typed_empty_monster+0x168>
     ad8:	ldr	r1, [sp, #4]
     adc:	movw	r3, #0
     ae0:	mov	r0, r4
     ae4:	mov	r2, r6
     ae8:	movt	r3, #0
     aec:	bl	0 <flatcc_verify_table_as_typed_root>
     af0:	cmp	r0, #0
     af4:	beq	b14 <test_typed_empty_monster+0x1f4>
     af8:	mov	r5, r0
     afc:	bl	0 <flatcc_verify_error_string>
     b00:	mov	r1, r0
     b04:	movw	r0, #0
     b08:	movt	r0, #0
     b0c:	bl	0 <printf>
     b10:	b	a88 <test_typed_empty_monster+0x168>
     b14:	ldr	r1, [sp, #4]
     b18:	movw	r3, #0
     b1c:	mov	r2, sp
     b20:	mov	r0, r4
     b24:	str	r6, [sp]
     b28:	movt	r3, #0
     b2c:	bl	0 <flatcc_verify_table_as_root>
     b30:	cmp	r0, #0
     b34:	bne	a5c <test_typed_empty_monster+0x13c>
     b38:	ldr	r1, [sp, #4]
     b3c:	movw	r2, #0
     b40:	movw	r3, #0
     b44:	mov	r0, r4
     b48:	movt	r2, #0
     b4c:	movt	r3, #0
     b50:	bl	0 <flatcc_verify_table_as_root>
     b54:	mov	r5, #0
     b58:	cmp	r0, #0
     b5c:	bne	a88 <test_typed_empty_monster+0x168>
     b60:	movw	r0, #0
     b64:	movt	r0, #0
     b68:	bl	0 <puts>
     b6c:	b	a88 <test_typed_empty_monster+0x168>
     b70:	movw	r0, #0
     b74:	movw	r1, #0
     b78:	movw	r3, #0
     b7c:	mov	r2, #235	; 0xeb
     b80:	movt	r0, #0
     b84:	movt	r1, #0
     b88:	movt	r3, #0
     b8c:	bl	0 <__assert_fail>

00000b90 <verify_table_with_emptystruct>:
     b90:	push	{fp, lr}
     b94:	mov	fp, sp
     b98:	mov	r1, r0
     b9c:	movw	r0, #0
     ba0:	movt	r0, #0
     ba4:	cmp	r1, #0
     ba8:	beq	bf4 <verify_table_with_emptystruct+0x64>
     bac:	ldr	r2, [r1, #4]
     bb0:	movw	r3, #20301	; 0x4f4d
     bb4:	movt	r3, #21326	; 0x534e
     bb8:	cmp	r2, r3
     bbc:	bne	bf4 <verify_table_with_emptystruct+0x64>
     bc0:	ldr	r0, [r1]
     bc4:	ldr	r0, [r1, r0]!
     bc8:	ldrh	r2, [r1, -r0]!
     bcc:	movw	r0, #0
     bd0:	movt	r0, #0
     bd4:	cmp	r2, #6
     bd8:	bcc	bf4 <verify_table_with_emptystruct+0x64>
     bdc:	ldrh	r2, [r1, #4]
     be0:	mov	r1, #0
     be4:	cmp	r2, #0
     be8:	beq	bf4 <verify_table_with_emptystruct+0x64>
     bec:	mov	r0, r1
     bf0:	pop	{fp, pc}
     bf4:	bl	0 <puts>
     bf8:	mvn	r1, #0
     bfc:	mov	r0, r1
     c00:	pop	{fp, pc}

00000c04 <test_table_with_emptystruct>:
     c04:	push	{r4, r5, fp, lr}
     c08:	add	fp, sp, #8
     c0c:	sub	sp, sp, #8
     c10:	mov	r4, r0
     c14:	bl	0 <flatcc_builder_reset>
     c18:	movw	r1, #0
     c1c:	mov	r0, r4
     c20:	mov	r2, #0
     c24:	mov	r3, #0
     c28:	mov	r5, #0
     c2c:	movt	r1, #0
     c30:	bl	0 <flatcc_builder_start_buffer>
     c34:	cmp	r0, #0
     c38:	bne	ca4 <test_table_with_emptystruct+0xa0>
     c3c:	mov	r0, r4
     c40:	mov	r1, #1
     c44:	bl	0 <flatcc_builder_start_table>
     c48:	cmp	r0, #0
     c4c:	bne	c98 <test_table_with_emptystruct+0x94>
     c50:	mov	r0, r4
     c54:	mov	r1, #0
     c58:	mov	r2, #0
     c5c:	mov	r3, #1
     c60:	mov	r5, #0
     c64:	bl	0 <flatcc_builder_table_add>
     c68:	cmp	r0, #0
     c6c:	beq	c98 <test_table_with_emptystruct+0x94>
     c70:	movw	r1, #0
     c74:	mov	r0, r4
     c78:	mov	r2, #0
     c7c:	movt	r1, #0
     c80:	bl	0 <flatcc_builder_check_required>
     c84:	cmp	r0, #0
     c88:	beq	d44 <test_table_with_emptystruct+0x140>
     c8c:	mov	r0, r4
     c90:	bl	0 <flatcc_builder_end_table>
     c94:	mov	r5, r0
     c98:	mov	r0, r4
     c9c:	mov	r1, r5
     ca0:	bl	0 <flatcc_builder_end_buffer>
     ca4:	add	r1, sp, #4
     ca8:	mov	r0, r4
     cac:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     cb0:	mov	r4, r0
     cb4:	movw	r0, #0
     cb8:	ldr	r2, [sp, #4]
     cbc:	movt	r0, #0
     cc0:	mov	r1, r4
     cc4:	ldr	r3, [r0]
     cc8:	movw	r0, #0
     ccc:	movt	r0, #0
     cd0:	bl	5d4 <hexdump>
     cd4:	movw	r0, #0
     cd8:	cmp	r4, #0
     cdc:	movt	r0, #0
     ce0:	beq	d28 <test_table_with_emptystruct+0x124>
     ce4:	ldr	r1, [r4, #4]
     ce8:	movw	r2, #20301	; 0x4f4d
     cec:	movt	r2, #21326	; 0x534e
     cf0:	cmp	r1, r2
     cf4:	bne	d28 <test_table_with_emptystruct+0x124>
     cf8:	ldr	r0, [r4]
     cfc:	mov	r1, r4
     d00:	ldr	r0, [r1, r0]!
     d04:	ldrh	r2, [r1, -r0]!
     d08:	movw	r0, #0
     d0c:	movt	r0, #0
     d10:	cmp	r2, #6
     d14:	bcc	d28 <test_table_with_emptystruct+0x124>
     d18:	ldrh	r1, [r1, #4]
     d1c:	mov	r5, #0
     d20:	cmp	r1, #0
     d24:	bne	d30 <test_table_with_emptystruct+0x12c>
     d28:	bl	0 <puts>
     d2c:	mvn	r5, #0
     d30:	mov	r0, r4
     d34:	bl	0 <flatcc_builder_aligned_free>
     d38:	mov	r0, r5
     d3c:	sub	sp, fp, #8
     d40:	pop	{r4, r5, fp, pc}
     d44:	movw	r0, #0
     d48:	movw	r1, #0
     d4c:	movw	r3, #0
     d50:	mov	r2, #215	; 0xd7
     d54:	movt	r0, #0
     d58:	movt	r1, #0
     d5c:	movt	r3, #0
     d60:	bl	0 <__assert_fail>

00000d64 <test_typed_table_with_emptystruct>:
     d64:	push	{r4, r5, fp, lr}
     d68:	add	fp, sp, #8
     d6c:	sub	sp, sp, #8
     d70:	mov	r4, r0
     d74:	bl	0 <flatcc_builder_reset>
     d78:	movw	r1, #0
     d7c:	mov	r0, r4
     d80:	mov	r2, #0
     d84:	mov	r3, #0
     d88:	mov	r5, #0
     d8c:	movt	r1, #0
     d90:	bl	0 <flatcc_builder_start_buffer>
     d94:	cmp	r0, #0
     d98:	bne	e04 <test_typed_table_with_emptystruct+0xa0>
     d9c:	mov	r0, r4
     da0:	mov	r1, #1
     da4:	bl	0 <flatcc_builder_start_table>
     da8:	cmp	r0, #0
     dac:	bne	df8 <test_typed_table_with_emptystruct+0x94>
     db0:	mov	r0, r4
     db4:	mov	r1, #0
     db8:	mov	r2, #0
     dbc:	mov	r3, #1
     dc0:	mov	r5, #0
     dc4:	bl	0 <flatcc_builder_table_add>
     dc8:	cmp	r0, #0
     dcc:	beq	df8 <test_typed_table_with_emptystruct+0x94>
     dd0:	movw	r1, #0
     dd4:	mov	r0, r4
     dd8:	mov	r2, #0
     ddc:	movt	r1, #0
     de0:	bl	0 <flatcc_builder_check_required>
     de4:	cmp	r0, #0
     de8:	beq	f04 <test_typed_table_with_emptystruct+0x1a0>
     dec:	mov	r0, r4
     df0:	bl	0 <flatcc_builder_end_table>
     df4:	mov	r5, r0
     df8:	mov	r0, r4
     dfc:	mov	r1, r5
     e00:	bl	0 <flatcc_builder_end_buffer>
     e04:	add	r1, sp, #4
     e08:	mov	r0, r4
     e0c:	bl	0 <flatcc_builder_get_direct_buffer>
     e10:	mov	r4, r0
     e14:	movw	r0, #0
     e18:	ldr	r2, [sp, #4]
     e1c:	movt	r0, #0
     e20:	mov	r1, r4
     e24:	ldr	r3, [r0]
     e28:	movw	r0, #0
     e2c:	movt	r0, #0
     e30:	bl	5d4 <hexdump>
     e34:	ldr	r1, [sp, #4]
     e38:	movw	r2, #0
     e3c:	movw	r3, #0
     e40:	mov	r0, r4
     e44:	movt	r2, #0
     e48:	movt	r3, #0
     e4c:	bl	0 <flatcc_verify_table_as_root>
     e50:	cmp	r0, #0
     e54:	beq	e64 <test_typed_table_with_emptystruct+0x100>
     e58:	movw	r0, #0
     e5c:	movt	r0, #0
     e60:	b	ec4 <test_typed_table_with_emptystruct+0x160>
     e64:	ldr	r1, [sp, #4]
     e68:	movw	r2, #0
     e6c:	movw	r3, #0
     e70:	mov	r0, r4
     e74:	movt	r2, #0
     e78:	movt	r3, #0
     e7c:	bl	0 <flatcc_verify_table_as_root>
     e80:	cmp	r0, #0
     e84:	beq	e94 <test_typed_table_with_emptystruct+0x130>
     e88:	movw	r0, #0
     e8c:	movt	r0, #0
     e90:	b	ec4 <test_typed_table_with_emptystruct+0x160>
     e94:	movw	r5, #14262	; 0x37b6
     e98:	ldr	r1, [sp, #4]
     e9c:	movw	r3, #0
     ea0:	mov	r0, r4
     ea4:	movt	r5, #45277	; 0xb0dd
     ea8:	movt	r3, #0
     eac:	mov	r2, r5
     eb0:	bl	0 <flatcc_verify_table_as_typed_root>
     eb4:	cmp	r0, #0
     eb8:	beq	ed4 <test_typed_table_with_emptystruct+0x170>
     ebc:	movw	r0, #0
     ec0:	movt	r0, #0
     ec4:	bl	0 <puts>
     ec8:	mvn	r0, #0
     ecc:	sub	sp, fp, #8
     ed0:	pop	{r4, r5, fp, pc}
     ed4:	cmp	r4, #0
     ed8:	beq	ef8 <test_typed_table_with_emptystruct+0x194>
     edc:	ldr	r1, [r4, #4]
     ee0:	mov	r0, #0
     ee4:	cmp	r1, r5
     ee8:	beq	ecc <test_typed_table_with_emptystruct+0x168>
     eec:	movw	r0, #0
     ef0:	movt	r0, #0
     ef4:	b	ec4 <test_typed_table_with_emptystruct+0x160>
     ef8:	movw	r0, #0
     efc:	movt	r0, #0
     f00:	b	ec4 <test_typed_table_with_emptystruct+0x160>
     f04:	movw	r0, #0
     f08:	movw	r1, #0
     f0c:	movw	r3, #0
     f10:	mov	r2, #215	; 0xd7
     f14:	movt	r0, #0
     f18:	movt	r1, #0
     f1c:	movt	r3, #0
     f20:	bl	0 <__assert_fail>

00000f24 <verify_monster>:
     f24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     f28:	add	fp, sp, #24
     f2c:	ldr	r1, [r0, #4]
     f30:	movw	r2, #20301	; 0x4f4d
     f34:	movt	r2, #21326	; 0x534e
     f38:	cmp	r1, r2
     f3c:	bne	fc0 <verify_monster+0x9c>
     f40:	ldr	r1, [r0]
     f44:	adds	r5, r0, r1
     f48:	beq	fd8 <verify_monster+0xb4>
     f4c:	ldr	r1, [r5]
     f50:	mov	r0, r5
     f54:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
     f58:	cmp	r1, #10
     f5c:	bcc	fcc <verify_monster+0xa8>
     f60:	ldrh	r1, [r0, #8]
     f64:	cmp	r1, #0
     f68:	beq	fcc <verify_monster+0xa8>
     f6c:	add	r1, r5, r1
     f70:	ldrh	r1, [r1]
     f74:	cmp	r1, #80	; 0x50
     f78:	bne	fcc <verify_monster+0xa8>
     f7c:	ldrh	r0, [r0, #4]
     f80:	cmp	r0, #0
     f84:	beq	fec <verify_monster+0xc8>
     f88:	add	r4, r5, r0
     f8c:	tst	r4, #15
     f90:	beq	fa0 <verify_monster+0x7c>
     f94:	movw	r0, #0
     f98:	movt	r0, #0
     f9c:	bl	0 <puts>
     fa0:	vldr	s0, [pc, #1012]	; 139c <verify_monster+0x478>
     fa4:	vldr	s2, [r4, #8]
     fa8:	vcmp.f32	s2, s0
     fac:	vmrs	APSR_nzcv, fpscr
     fb0:	beq	ff8 <verify_monster+0xd4>
     fb4:	movw	r0, #0
     fb8:	movt	r0, #0
     fbc:	b	fe0 <verify_monster+0xbc>
     fc0:	movw	r0, #0
     fc4:	movt	r0, #0
     fc8:	b	fe0 <verify_monster+0xbc>
     fcc:	movw	r0, #0
     fd0:	movt	r0, #0
     fd4:	b	fe0 <verify_monster+0xbc>
     fd8:	movw	r0, #0
     fdc:	movt	r0, #0
     fe0:	bl	0 <puts>
     fe4:	mvn	r0, #0
     fe8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     fec:	movw	r0, #0
     ff0:	movt	r0, #0
     ff4:	b	fe0 <verify_monster+0xbc>
     ff8:	vldr	s0, [r4]
     ffc:	vmov.f32	s2, #112	; 0x3f800000  1.0
    1000:	vcmp.f32	s0, s2
    1004:	vmrs	APSR_nzcv, fpscr
    1008:	bne	1020 <verify_monster+0xfc>
    100c:	vldr	s0, [r4, #4]
    1010:	vmov.f32	s2, #0	; 0x40000000  2.0
    1014:	vcmp.f32	s0, s2
    1018:	vmrs	APSR_nzcv, fpscr
    101c:	beq	102c <verify_monster+0x108>
    1020:	movw	r0, #0
    1024:	movt	r0, #0
    1028:	b	fe0 <verify_monster+0xbc>
    102c:	vldr	d16, [r4, #16]
    1030:	vcmp.f64	d16, #0.0
    1034:	vmrs	APSR_nzcv, fpscr
    1038:	bne	1058 <verify_monster+0x134>
    103c:	movw	r1, #0
    1040:	add	r0, r4, #26
    1044:	mov	r2, #4
    1048:	movt	r1, #0
    104c:	bl	0 <bcmp>
    1050:	cmp	r0, #0
    1054:	beq	1064 <verify_monster+0x140>
    1058:	movw	r0, #0
    105c:	movt	r0, #0
    1060:	b	fe0 <verify_monster+0xbc>
    1064:	ldr	r0, [r5]
    1068:	mov	r6, r5
    106c:	ldrh	r7, [r6, -r0]!
    1070:	cmp	r7, #12
    1074:	bcc	19f4 <verify_monster+0xad0>
    1078:	ldrh	r0, [r6, #10]
    107c:	cmp	r0, #0
    1080:	beq	19f4 <verify_monster+0xad0>
    1084:	mov	r1, r5
    1088:	ldr	r0, [r1, r0]!
    108c:	add	r0, r1, r0
    1090:	movw	r1, #0
    1094:	add	r4, r0, #4
    1098:	movt	r1, #0
    109c:	mov	r0, r4
    10a0:	bl	0 <strcmp>
    10a4:	cmp	r0, #0
    10a8:	beq	10b8 <verify_monster+0x194>
    10ac:	movw	r0, #0
    10b0:	movt	r0, #0
    10b4:	b	fe0 <verify_monster+0xbc>
    10b8:	ldr	r0, [r4, #-4]
    10bc:	cmp	r0, #9
    10c0:	bne	11d8 <verify_monster+0x2b4>
    10c4:	cmp	r7, #18
    10c8:	bcc	11e4 <verify_monster+0x2c0>
    10cc:	ldrh	r0, [r6, #16]
    10d0:	cmp	r0, #0
    10d4:	beq	11e4 <verify_monster+0x2c0>
    10d8:	ldrb	r0, [r5, r0]
    10dc:	cmp	r0, #2
    10e0:	bne	11e4 <verify_monster+0x2c0>
    10e4:	ldrh	r1, [r6, #14]
    10e8:	cmp	r1, #0
    10ec:	beq	11f0 <verify_monster+0x2cc>
    10f0:	mov	r0, r5
    10f4:	ldr	r1, [r0, r1]!
    10f8:	ldr	r1, [r0, r1]!
    10fc:	cmp	r1, #10
    1100:	bne	11f0 <verify_monster+0x2cc>
    1104:	add	r0, r0, #4
    1108:	mov	r1, #0
    110c:	ldrb	r2, [r0]
    1110:	cmp	r2, #0
    1114:	bne	11fc <verify_monster+0x2d8>
    1118:	ldrb	r2, [r0, #1]
    111c:	mov	r1, #1
    1120:	cmp	r2, #1
    1124:	bne	11fc <verify_monster+0x2d8>
    1128:	ldrb	r2, [r0, #2]
    112c:	mov	r1, #2
    1130:	cmp	r2, #2
    1134:	bne	11fc <verify_monster+0x2d8>
    1138:	ldrb	r2, [r0, #3]
    113c:	mov	r1, #3
    1140:	cmp	r2, #3
    1144:	bne	11fc <verify_monster+0x2d8>
    1148:	ldrb	r2, [r0, #4]
    114c:	mov	r1, #4
    1150:	cmp	r2, #4
    1154:	bne	11fc <verify_monster+0x2d8>
    1158:	ldrb	r2, [r0, #5]
    115c:	mov	r1, #5
    1160:	cmp	r2, #5
    1164:	bne	11fc <verify_monster+0x2d8>
    1168:	ldrb	r2, [r0, #6]
    116c:	mov	r1, #6
    1170:	cmp	r2, #6
    1174:	bne	11fc <verify_monster+0x2d8>
    1178:	ldrb	r2, [r0, #7]
    117c:	mov	r1, #7
    1180:	cmp	r2, #7
    1184:	bne	11fc <verify_monster+0x2d8>
    1188:	ldrb	r2, [r0, #8]
    118c:	mov	r1, #8
    1190:	cmp	r2, #8
    1194:	bne	11fc <verify_monster+0x2d8>
    1198:	ldrb	r0, [r0, #9]
    119c:	mov	r1, #9
    11a0:	cmp	r0, #9
    11a4:	bne	11fc <verify_monster+0x2d8>
    11a8:	cmp	r7, #7
    11ac:	bls	1384 <verify_monster+0x460>
    11b0:	ldrh	r0, [r6, #6]
    11b4:	cmp	r0, #0
    11b8:	beq	120c <verify_monster+0x2e8>
    11bc:	add	r0, r5, r0
    11c0:	ldrh	r0, [r0]
    11c4:	cmp	r0, #150	; 0x96
    11c8:	bne	1390 <verify_monster+0x46c>
    11cc:	movw	r0, #0
    11d0:	movt	r0, #0
    11d4:	b	fe0 <verify_monster+0xbc>
    11d8:	movw	r0, #0
    11dc:	movt	r0, #0
    11e0:	b	fe0 <verify_monster+0xbc>
    11e4:	movw	r0, #0
    11e8:	movt	r0, #0
    11ec:	b	fe0 <verify_monster+0xbc>
    11f0:	movw	r0, #0
    11f4:	movt	r0, #0
    11f8:	b	fe0 <verify_monster+0xbc>
    11fc:	movw	r0, #0
    1200:	movt	r0, #0
    1204:	bl	0 <printf>
    1208:	b	fe4 <verify_monster+0xc0>
    120c:	cmp	r7, #10
    1210:	bcc	1384 <verify_monster+0x460>
    1214:	ldrh	r0, [r6, #8]
    1218:	cmp	r0, #0
    121c:	beq	1384 <verify_monster+0x460>
    1220:	ldrh	r0, [r6, #4]
    1224:	cmp	r0, #0
    1228:	beq	13ac <verify_monster+0x488>
    122c:	cmp	r7, #24
    1230:	bcc	13a0 <verify_monster+0x47c>
    1234:	ldrh	r1, [r6, #22]
    1238:	cmp	r1, #0
    123c:	beq	13a0 <verify_monster+0x47c>
    1240:	mov	r0, r5
    1244:	ldr	r1, [r0, r1]!
    1248:	ldr	r1, [r0, r1]!
    124c:	cmp	r1, #5
    1250:	bne	13a0 <verify_monster+0x47c>
    1254:	add	r0, r0, #4
    1258:	mov	r1, #0
    125c:	ldrh	r2, [r0]
    1260:	cmp	r2, #16
    1264:	bne	13b8 <verify_monster+0x494>
    1268:	ldrb	r2, [r0, #2]
    126c:	mov	r1, #0
    1270:	cmp	r2, #32
    1274:	bne	13b8 <verify_monster+0x494>
    1278:	ldrh	r2, [r0, #4]
    127c:	mov	r1, #1
    1280:	cmp	r2, #48	; 0x30
    1284:	bne	13b8 <verify_monster+0x494>
    1288:	ldrb	r2, [r0, #6]
    128c:	mov	r1, #1
    1290:	cmp	r2, #64	; 0x40
    1294:	bne	13b8 <verify_monster+0x494>
    1298:	ldrh	r2, [r0, #8]
    129c:	mov	r1, #2
    12a0:	cmp	r2, #80	; 0x50
    12a4:	bne	13b8 <verify_monster+0x494>
    12a8:	ldrb	r2, [r0, #10]
    12ac:	mov	r1, #2
    12b0:	cmp	r2, #96	; 0x60
    12b4:	bne	13b8 <verify_monster+0x494>
    12b8:	ldrh	r2, [r0, #12]
    12bc:	mov	r1, #3
    12c0:	cmp	r2, #112	; 0x70
    12c4:	bne	13b8 <verify_monster+0x494>
    12c8:	ldrb	r2, [r0, #14]
    12cc:	mov	r1, #3
    12d0:	cmp	r2, #128	; 0x80
    12d4:	bne	13b8 <verify_monster+0x494>
    12d8:	ldrh	r2, [r0, #16]
    12dc:	movw	r3, #401	; 0x191
    12e0:	mov	r1, #4
    12e4:	cmp	r2, r3
    12e8:	bne	13b8 <verify_monster+0x494>
    12ec:	ldrb	r0, [r0, #18]
    12f0:	mov	r1, #4
    12f4:	cmp	r0, #145	; 0x91
    12f8:	bne	13b8 <verify_monster+0x494>
    12fc:	cmp	r7, #27
    1300:	bls	13c8 <verify_monster+0x4a4>
    1304:	ldrh	r1, [r6, #26]
    1308:	cmp	r1, #0
    130c:	beq	13c8 <verify_monster+0x4a4>
    1310:	mov	r0, r5
    1314:	ldr	r1, [r0, r1]!
    1318:	ldr	r1, [r0, r1]!
    131c:	cmp	r1, #8
    1320:	bne	13c8 <verify_monster+0x4a4>
    1324:	add	r9, r0, #4
    1328:	mov	r4, r9
    132c:	ldr	r0, [r4, #20]!
    1330:	ldr	r8, [r4, r0]!
    1334:	mov	r0, r4
    1338:	ldrh	r1, [r0, -r8]!
    133c:	cmp	r1, #12
    1340:	bcc	19f4 <verify_monster+0xad0>
    1344:	ldrh	r0, [r0, #10]
    1348:	cmp	r0, #0
    134c:	beq	19f4 <verify_monster+0xad0>
    1350:	mov	r1, r4
    1354:	ldr	r0, [r1, r0]!
    1358:	add	r0, r1, r0
    135c:	movw	r1, #0
    1360:	movt	r1, #0
    1364:	add	r0, r0, #4
    1368:	bl	0 <strcmp>
    136c:	cmp	r0, #0
    1370:	beq	13d4 <verify_monster+0x4b0>
    1374:	movw	r0, #0
    1378:	movt	r0, #0
    137c:	bl	0 <printf>
    1380:	b	fe4 <verify_monster+0xc0>
    1384:	movw	r0, #0
    1388:	movt	r0, #0
    138c:	b	fe0 <verify_monster+0xbc>
    1390:	movw	r0, #0
    1394:	movt	r0, #0
    1398:	b	fe0 <verify_monster+0xbc>
    139c:	.word	0xc04ccccd
    13a0:	movw	r0, #0
    13a4:	movt	r0, #0
    13a8:	b	fe0 <verify_monster+0xbc>
    13ac:	movw	r0, #0
    13b0:	movt	r0, #0
    13b4:	b	fe0 <verify_monster+0xbc>
    13b8:	movw	r0, #0
    13bc:	movt	r0, #0
    13c0:	bl	0 <printf>
    13c4:	b	fe4 <verify_monster+0xc0>
    13c8:	movw	r0, #0
    13cc:	movt	r0, #0
    13d0:	b	fe0 <verify_monster+0xbc>
    13d4:	mov	r0, r9
    13d8:	ldr	r1, [r0, #4]!
    13dc:	add	r0, r0, r1
    13e0:	cmp	r0, r4
    13e4:	beq	13f4 <verify_monster+0x4d0>
    13e8:	movw	r0, #0
    13ec:	movt	r0, #0
    13f0:	b	fe0 <verify_monster+0xbc>
    13f4:	rsb	r2, r8, #0
    13f8:	mov	r1, r0
    13fc:	ldrh	r2, [r1, r2]!	; <UNPREDICTABLE>
    1400:	cmp	r2, #12
    1404:	bcc	19f4 <verify_monster+0xad0>
    1408:	ldrh	r1, [r1, #10]
    140c:	cmp	r1, #0
    1410:	beq	19f4 <verify_monster+0xad0>
    1414:	ldr	r1, [r0, r1]!
    1418:	add	r0, r0, r1
    141c:	movw	r1, #0
    1420:	add	r8, r0, #4
    1424:	movt	r1, #0
    1428:	mov	r0, r8
    142c:	bl	0 <strcmp>
    1430:	cmp	r0, #0
    1434:	beq	1444 <verify_monster+0x520>
    1438:	movw	r0, #0
    143c:	movt	r0, #0
    1440:	b	15f8 <verify_monster+0x6d4>
    1444:	mov	r0, r9
    1448:	ldr	r1, [r0, #8]!
    144c:	ldr	r2, [r0, r1]!
    1450:	mov	r1, r0
    1454:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    1458:	cmp	r2, #12
    145c:	bcc	19f4 <verify_monster+0xad0>
    1460:	ldrh	r1, [r1, #10]
    1464:	cmp	r1, #0
    1468:	beq	19f4 <verify_monster+0xad0>
    146c:	ldr	r1, [r0, r1]!
    1470:	add	r0, r0, r1
    1474:	movw	r1, #0
    1478:	add	r8, r0, #4
    147c:	movt	r1, #0
    1480:	mov	r0, r8
    1484:	bl	0 <strcmp>
    1488:	cmp	r0, #0
    148c:	beq	149c <verify_monster+0x578>
    1490:	movw	r0, #0
    1494:	movt	r0, #0
    1498:	b	15f8 <verify_monster+0x6d4>
    149c:	ldr	r1, [r9]
    14a0:	mov	r0, r9
    14a4:	ldr	r2, [r0, r1]!
    14a8:	mov	r1, r0
    14ac:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    14b0:	cmp	r2, #12
    14b4:	bcc	19f4 <verify_monster+0xad0>
    14b8:	ldrh	r1, [r1, #10]
    14bc:	cmp	r1, #0
    14c0:	beq	19f4 <verify_monster+0xad0>
    14c4:	ldr	r1, [r0, r1]!
    14c8:	add	r0, r0, r1
    14cc:	movw	r1, #0
    14d0:	add	r8, r0, #4
    14d4:	movt	r1, #0
    14d8:	mov	r0, r8
    14dc:	bl	0 <strcmp>
    14e0:	cmp	r0, #0
    14e4:	beq	14f4 <verify_monster+0x5d0>
    14e8:	movw	r0, #0
    14ec:	movt	r0, #0
    14f0:	b	15f8 <verify_monster+0x6d4>
    14f4:	mov	r0, r9
    14f8:	ldr	r1, [r0, #12]!
    14fc:	ldr	r2, [r0, r1]!
    1500:	mov	r1, r0
    1504:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    1508:	cmp	r2, #12
    150c:	bcc	19f4 <verify_monster+0xad0>
    1510:	ldrh	r1, [r1, #10]
    1514:	cmp	r1, #0
    1518:	beq	19f4 <verify_monster+0xad0>
    151c:	ldr	r1, [r0, r1]!
    1520:	add	r0, r0, r1
    1524:	movw	r1, #0
    1528:	add	r8, r0, #4
    152c:	movt	r1, #0
    1530:	mov	r0, r8
    1534:	bl	0 <strcmp>
    1538:	cmp	r0, #0
    153c:	beq	154c <verify_monster+0x628>
    1540:	movw	r0, #0
    1544:	movt	r0, #0
    1548:	b	15f8 <verify_monster+0x6d4>
    154c:	mov	r0, r9
    1550:	ldr	r1, [r0, #16]!
    1554:	ldr	r2, [r0, r1]!
    1558:	mov	r1, r0
    155c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    1560:	cmp	r2, #12
    1564:	bcc	19f4 <verify_monster+0xad0>
    1568:	ldrh	r1, [r1, #10]
    156c:	cmp	r1, #0
    1570:	beq	19f4 <verify_monster+0xad0>
    1574:	ldr	r1, [r0, r1]!
    1578:	add	r0, r0, r1
    157c:	movw	r1, #0
    1580:	add	r8, r0, #4
    1584:	movt	r1, #0
    1588:	mov	r0, r8
    158c:	bl	0 <strcmp>
    1590:	cmp	r0, #0
    1594:	beq	15a4 <verify_monster+0x680>
    1598:	movw	r0, #0
    159c:	movt	r0, #0
    15a0:	b	15f8 <verify_monster+0x6d4>
    15a4:	mov	r0, r9
    15a8:	ldr	r1, [r0, #24]!
    15ac:	ldr	r2, [r0, r1]!
    15b0:	mov	r1, r0
    15b4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    15b8:	cmp	r2, #12
    15bc:	bcc	19f4 <verify_monster+0xad0>
    15c0:	ldrh	r1, [r1, #10]
    15c4:	cmp	r1, #0
    15c8:	beq	19f4 <verify_monster+0xad0>
    15cc:	ldr	r1, [r0, r1]!
    15d0:	add	r0, r0, r1
    15d4:	movw	r1, #0
    15d8:	add	r8, r0, #4
    15dc:	movt	r1, #0
    15e0:	mov	r0, r8
    15e4:	bl	0 <strcmp>
    15e8:	cmp	r0, #0
    15ec:	beq	1604 <verify_monster+0x6e0>
    15f0:	movw	r0, #0
    15f4:	movt	r0, #0
    15f8:	mov	r1, r8
    15fc:	bl	0 <printf>
    1600:	b	fe4 <verify_monster+0xc0>
    1604:	ldr	r0, [r9, #28]!
    1608:	ldr	r1, [r9, r0]!
    160c:	mov	r0, r9
    1610:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    1614:	cmp	r1, #12
    1618:	bcc	19f4 <verify_monster+0xad0>
    161c:	ldrh	r0, [r0, #10]
    1620:	cmp	r0, #0
    1624:	beq	19f4 <verify_monster+0xad0>
    1628:	ldr	r0, [r9, r0]!
    162c:	movw	r1, #0
    1630:	movt	r1, #0
    1634:	add	r0, r9, r0
    1638:	add	r4, r0, #4
    163c:	mov	r0, r4
    1640:	bl	0 <strcmp>
    1644:	cmp	r0, #0
    1648:	beq	1660 <verify_monster+0x73c>
    164c:	movw	r0, #0
    1650:	mov	r1, r4
    1654:	movt	r0, #0
    1658:	bl	0 <printf>
    165c:	b	fe4 <verify_monster+0xc0>
    1660:	ldrh	r1, [r6, #24]
    1664:	cmp	r1, #0
    1668:	beq	16b0 <verify_monster+0x78c>
    166c:	mov	r0, r5
    1670:	ldr	r1, [r0, r1]!
    1674:	ldr	r1, [r0, r1]!
    1678:	cmp	r1, #3
    167c:	bne	16b0 <verify_monster+0x78c>
    1680:	add	r4, r0, #4
    1684:	movw	r1, #0
    1688:	ldr	r0, [r4]
    168c:	movt	r1, #0
    1690:	add	r0, r4, r0
    1694:	add	r0, r0, #4
    1698:	bl	0 <strcmp>
    169c:	cmp	r0, #0
    16a0:	beq	16bc <verify_monster+0x798>
    16a4:	movw	r0, #0
    16a8:	movt	r0, #0
    16ac:	b	fe0 <verify_monster+0xbc>
    16b0:	movw	r0, #0
    16b4:	movt	r0, #0
    16b8:	b	fe0 <verify_monster+0xbc>
    16bc:	mov	r0, r4
    16c0:	ldr	r1, [r0, #4]!
    16c4:	ldr	r1, [r0, r1]!
    16c8:	cmp	r1, #2
    16cc:	bne	16f8 <verify_monster+0x7d4>
    16d0:	movw	r1, #0
    16d4:	add	r0, r0, #4
    16d8:	mov	r2, #2
    16dc:	movt	r1, #0
    16e0:	bl	0 <bcmp>
    16e4:	cmp	r0, #0
    16e8:	beq	1708 <verify_monster+0x7e4>
    16ec:	movw	r0, #0
    16f0:	movt	r0, #0
    16f4:	b	fe0 <verify_monster+0xbc>
    16f8:	movw	r0, #0
    16fc:	movt	r0, #0
    1700:	bl	0 <printf>
    1704:	b	fe4 <verify_monster+0xc0>
    1708:	ldr	r0, [r4, #8]!
    170c:	movw	r1, #0
    1710:	movt	r1, #0
    1714:	add	r0, r4, r0
    1718:	add	r0, r0, #4
    171c:	bl	0 <strcmp>
    1720:	cmp	r0, #0
    1724:	beq	1734 <verify_monster+0x810>
    1728:	movw	r0, #0
    172c:	movt	r0, #0
    1730:	b	fe0 <verify_monster+0xbc>
    1734:	cmp	r7, #54	; 0x36
    1738:	bcc	17b0 <verify_monster+0x88c>
    173c:	ldrh	r1, [r6, #52]	; 0x34
    1740:	cmp	r1, #0
    1744:	beq	17b0 <verify_monster+0x88c>
    1748:	mov	r0, r5
    174c:	ldr	r1, [r0, r1]!
    1750:	ldr	r1, [r0, r1]!
    1754:	cmp	r1, #4
    1758:	bne	17bc <verify_monster+0x898>
    175c:	add	r0, r0, #4
    1760:	mov	r1, #0
    1764:	ldrb	r2, [r0]
    1768:	cmp	r2, #0
    176c:	bne	17a0 <verify_monster+0x87c>
    1770:	ldrb	r2, [r0, #1]
    1774:	mov	r1, #1
    1778:	cmp	r2, #1
    177c:	bne	17a0 <verify_monster+0x87c>
    1780:	ldrb	r2, [r0, #2]
    1784:	mov	r1, #2
    1788:	cmp	r2, #1
    178c:	bne	17a0 <verify_monster+0x87c>
    1790:	ldrb	r0, [r0, #3]
    1794:	mov	r1, #3
    1798:	cmp	r0, #0
    179c:	beq	17c8 <verify_monster+0x8a4>
    17a0:	movw	r0, #0
    17a4:	movt	r0, #0
    17a8:	bl	0 <printf>
    17ac:	b	fe4 <verify_monster+0xc0>
    17b0:	movw	r0, #0
    17b4:	movt	r0, #0
    17b8:	b	fe0 <verify_monster+0xbc>
    17bc:	movw	r0, #0
    17c0:	movt	r0, #0
    17c4:	b	fe0 <verify_monster+0xbc>
    17c8:	ldrh	r0, [r6, #18]
    17cc:	cmp	r0, #0
    17d0:	beq	1840 <verify_monster+0x91c>
    17d4:	ldrb	r0, [r5, r0]
    17d8:	cmp	r0, #1
    17dc:	bne	1840 <verify_monster+0x91c>
    17e0:	ldrh	r1, [r6, #20]
    17e4:	cmp	r1, #0
    17e8:	beq	1a20 <verify_monster+0xafc>
    17ec:	mov	r0, r5
    17f0:	ldr	r1, [r0, r1]!
    17f4:	ldr	r2, [r0, r1]!
    17f8:	mov	r1, r0
    17fc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    1800:	cmp	r2, #11
    1804:	bls	19f4 <verify_monster+0xad0>
    1808:	ldrh	r1, [r1, #10]
    180c:	cmp	r1, #0
    1810:	beq	19f4 <verify_monster+0xad0>
    1814:	ldr	r1, [r0, r1]!
    1818:	add	r0, r0, r1
    181c:	movw	r1, #0
    1820:	movt	r1, #0
    1824:	add	r0, r0, #4
    1828:	bl	0 <strcmp>
    182c:	cmp	r0, #0
    1830:	beq	184c <verify_monster+0x928>
    1834:	movw	r0, #0
    1838:	movt	r0, #0
    183c:	b	fe0 <verify_monster+0xbc>
    1840:	movw	r0, #0
    1844:	movt	r0, #0
    1848:	b	fe0 <verify_monster+0xbc>
    184c:	ldrh	r0, [r6, #28]
    1850:	cmp	r0, #0
    1854:	beq	1a20 <verify_monster+0xafc>
    1858:	mov	r4, r5
    185c:	ldr	r0, [r4, r0]!
    1860:	ldr	r0, [r4, r0]!
    1864:	mov	r7, r4
    1868:	ldrh	r8, [r7, -r0]!
    186c:	cmp	r8, #11
    1870:	bls	19f4 <verify_monster+0xad0>
    1874:	ldrh	r0, [r7, #10]
    1878:	cmp	r0, #0
    187c:	beq	19f4 <verify_monster+0xad0>
    1880:	mov	r1, r4
    1884:	ldr	r0, [r1, r0]!
    1888:	add	r0, r1, r0
    188c:	movw	r1, #0
    1890:	movt	r1, #0
    1894:	add	r0, r0, #4
    1898:	bl	0 <strcmp>
    189c:	cmp	r0, #0
    18a0:	beq	18b0 <verify_monster+0x98c>
    18a4:	movw	r0, #0
    18a8:	movt	r0, #0
    18ac:	b	fe0 <verify_monster+0xbc>
    18b0:	cmp	r8, #20
    18b4:	bcc	18dc <verify_monster+0x9b8>
    18b8:	ldrh	r0, [r7, #18]
    18bc:	cmp	r0, #0
    18c0:	beq	18dc <verify_monster+0x9b8>
    18c4:	ldrb	r0, [r4, r0]
    18c8:	cmp	r0, #0
    18cc:	beq	18dc <verify_monster+0x9b8>
    18d0:	movw	r0, #0
    18d4:	movt	r0, #0
    18d8:	b	fe0 <verify_monster+0xbc>
    18dc:	ldrh	r0, [r6, #20]
    18e0:	cmp	r0, #0
    18e4:	beq	1914 <verify_monster+0x9f0>
    18e8:	mov	r1, r5
    18ec:	ldr	r2, [r1, r0]!
    18f0:	add	r1, r1, r2
    18f4:	mov	r2, r5
    18f8:	ldr	r0, [r2, r0]!
    18fc:	add	r0, r2, r0
    1900:	cmp	r0, r1
    1904:	beq	1914 <verify_monster+0x9f0>
    1908:	movw	r0, #0
    190c:	movt	r0, #0
    1910:	b	fe0 <verify_monster+0xbc>
    1914:	cmp	r8, #28
    1918:	bcc	1934 <verify_monster+0xa10>
    191c:	ldrh	r0, [r7, #26]
    1920:	cmp	r0, #0
    1924:	ldrne	r0, [r4, r0]!
    1928:	ldrne	r0, [r4, r0]!
    192c:	cmpne	r0, #0
    1930:	bne	1954 <verify_monster+0xa30>
    1934:	movw	r0, #0
    1938:	movw	r1, #0
    193c:	movw	r3, #0
    1940:	movw	r2, #693	; 0x2b5
    1944:	movt	r0, #0
    1948:	movt	r1, #0
    194c:	movt	r3, #0
    1950:	bl	0 <__assert_fail>
    1954:	add	r1, r4, #4
    1958:	add	r0, r1, r0, lsl #2
    195c:	ldr	r1, [r0, #-4]!
    1960:	ldr	r2, [r0, r1]!
    1964:	mov	r1, r0
    1968:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    196c:	cmp	r2, #20
    1970:	bcc	1a14 <verify_monster+0xaf0>
    1974:	ldrh	r3, [r1, #18]
    1978:	cmp	r3, #0
    197c:	beq	1a14 <verify_monster+0xaf0>
    1980:	ldrb	r3, [r0, r3]
    1984:	cmp	r3, #1
    1988:	bne	1a14 <verify_monster+0xaf0>
    198c:	cmp	r2, #22
    1990:	bcc	1a20 <verify_monster+0xafc>
    1994:	ldrh	r1, [r1, #20]
    1998:	cmp	r1, #0
    199c:	ldrne	r1, [r0, r1]!
    19a0:	addsne	r0, r0, r1
    19a4:	beq	1a20 <verify_monster+0xafc>
    19a8:	ldr	r2, [r0]
    19ac:	mov	r1, r0
    19b0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    19b4:	cmp	r2, #12
    19b8:	bcc	19f4 <verify_monster+0xad0>
    19bc:	ldrh	r1, [r1, #10]
    19c0:	cmp	r1, #0
    19c4:	beq	19f4 <verify_monster+0xad0>
    19c8:	ldr	r1, [r0, r1]!
    19cc:	add	r0, r0, r1
    19d0:	movw	r1, #0
    19d4:	movt	r1, #0
    19d8:	add	r0, r0, #4
    19dc:	bl	0 <strcmp>
    19e0:	cmp	r0, #0
    19e4:	beq	1a2c <verify_monster+0xb08>
    19e8:	movw	r0, #0
    19ec:	movt	r0, #0
    19f0:	b	fe0 <verify_monster+0xbc>
    19f4:	movw	r0, #0
    19f8:	movt	r0, #0
    19fc:	movw	r1, #0
    1a00:	movw	r3, #0
    1a04:	movw	r2, #699	; 0x2bb
    1a08:	movt	r1, #0
    1a0c:	movt	r3, #0
    1a10:	bl	0 <__assert_fail>
    1a14:	movw	r0, #0
    1a18:	movt	r0, #0
    1a1c:	b	fe0 <verify_monster+0xbc>
    1a20:	movw	r0, #0
    1a24:	movt	r0, #0
    1a28:	b	19fc <verify_monster+0xad8>
    1a2c:	ldrh	r0, [r6, #34]	; 0x22
    1a30:	cmp	r0, #0
    1a34:	beq	1a44 <verify_monster+0xb20>
    1a38:	ldrb	r0, [r5, r0]
    1a3c:	cmp	r0, #0
    1a40:	beq	1a50 <verify_monster+0xb2c>
    1a44:	movw	r0, #0
    1a48:	movt	r0, #0
    1a4c:	b	fe0 <verify_monster+0xbc>
    1a50:	ldrh	r0, [r6, #32]
    1a54:	cmp	r0, #0
    1a58:	beq	1ab4 <verify_monster+0xb90>
    1a5c:	ldr	r0, [r5, r0]!
    1a60:	ldr	r0, [r5, r0]!
    1a64:	ldrh	r1, [r5, -r0]!
    1a68:	mov	r0, #0
    1a6c:	cmp	r1, #6
    1a70:	bcc	fe8 <verify_monster+0xc4>
    1a74:	ldrh	r2, [r5, #4]
    1a78:	cmp	r2, #0
    1a7c:	bne	1aa8 <verify_monster+0xb84>
    1a80:	cmp	r1, #8
    1a84:	bcc	fe8 <verify_monster+0xc4>
    1a88:	ldrh	r2, [r5, #6]
    1a8c:	cmp	r2, #0
    1a90:	bne	1aa8 <verify_monster+0xb84>
    1a94:	cmp	r1, #10
    1a98:	bcc	fe8 <verify_monster+0xc4>
    1a9c:	ldrh	r1, [r5, #8]
    1aa0:	cmp	r1, #0
    1aa4:	beq	fe8 <verify_monster+0xc4>
    1aa8:	movw	r0, #0
    1aac:	movt	r0, #0
    1ab0:	b	fe0 <verify_monster+0xbc>
    1ab4:	movw	r0, #0
    1ab8:	movt	r0, #0
    1abc:	b	fe0 <verify_monster+0xbc>

00001ac0 <gen_monster>:
    1ac0:	push	{r4, r5, r6, sl, fp, lr}
    1ac4:	add	fp, sp, #16
    1ac8:	sub	sp, sp, #48	; 0x30
    1acc:	mov	r4, r0
    1ad0:	movw	r0, #0
    1ad4:	mov	r5, r1
    1ad8:	movt	r0, #0
    1adc:	vldr	d16, [r0]
    1ae0:	movw	r0, #2312	; 0x908
    1ae4:	strh	r0, [sp, #40]	; 0x28
    1ae8:	movw	r0, #256	; 0x100
    1aec:	movt	r0, #1
    1af0:	str	r0, [sp, #8]
    1af4:	mov	r0, r4
    1af8:	vstr	d16, [sp, #32]
    1afc:	bl	0 <flatcc_builder_reset>
    1b00:	movw	r1, #0
    1b04:	cmp	r5, #0
    1b08:	mov	r0, r4
    1b0c:	mov	r2, #0
    1b10:	movt	r1, #0
    1b14:	moveq	r3, #0
    1b18:	movne	r3, #2
    1b1c:	bl	0 <flatcc_builder_start_buffer>
    1b20:	cmp	r0, #0
    1b24:	bne	1b34 <gen_monster+0x74>
    1b28:	mov	r0, r4
    1b2c:	mov	r1, #36	; 0x24
    1b30:	bl	0 <flatcc_builder_start_table>
    1b34:	mov	r0, r4
    1b38:	mov	r1, #2
    1b3c:	mov	r2, #2
    1b40:	mov	r3, #2
    1b44:	bl	0 <flatcc_builder_table_add>
    1b48:	cmp	r0, #0
    1b4c:	mov	r2, #32
    1b50:	mov	r3, #16
    1b54:	movne	r1, #80	; 0x50
    1b58:	strhne	r1, [r0]
    1b5c:	mov	r0, r4
    1b60:	mov	r1, #0
    1b64:	bl	0 <flatcc_builder_table_add>
    1b68:	movw	r1, #52429	; 0xcccd
    1b6c:	mov	r3, #1065353216	; 0x3f800000
    1b70:	mov	r2, #1073741824	; 0x40000000
    1b74:	movt	r1, #49228	; 0xc04c
    1b78:	str	r3, [r0]
    1b7c:	str	r2, [r0, #4]
    1b80:	str	r1, [r0, #8]
    1b84:	movw	r1, #0
    1b88:	mov	r0, r4
    1b8c:	movt	r1, #0
    1b90:	bl	0 <flatcc_builder_create_string_str>
    1b94:	cmp	r0, #0
    1b98:	beq	1bb4 <gen_monster+0xf4>
    1b9c:	mov	r5, r0
    1ba0:	mov	r0, r4
    1ba4:	mov	r1, #3
    1ba8:	bl	0 <flatcc_builder_table_add_offset>
    1bac:	cmp	r0, #0
    1bb0:	strne	r5, [r0]
    1bb4:	mov	r0, r4
    1bb8:	mov	r1, #6
    1bbc:	mov	r2, #1
    1bc0:	mov	r3, #1
    1bc4:	mov	r5, #1
    1bc8:	bl	0 <flatcc_builder_table_add>
    1bcc:	cmp	r0, #0
    1bd0:	mov	r2, #10
    1bd4:	mov	r3, #1
    1bd8:	movne	r1, #2
    1bdc:	strbne	r1, [r0]
    1be0:	mvn	r0, #0
    1be4:	add	r1, sp, #32
    1be8:	str	r5, [sp]
    1bec:	str	r0, [sp, #4]
    1bf0:	mov	r0, r4
    1bf4:	bl	0 <flatcc_builder_create_vector>
    1bf8:	cmp	r0, #0
    1bfc:	beq	1c18 <gen_monster+0x158>
    1c00:	mov	r5, r0
    1c04:	mov	r0, r4
    1c08:	mov	r1, #5
    1c0c:	bl	0 <flatcc_builder_table_add_offset>
    1c10:	cmp	r0, #0
    1c14:	strne	r5, [r0]
    1c18:	mov	r0, r4
    1c1c:	mov	r1, #4
    1c20:	mov	r2, #2
    1c24:	mvn	r3, #-1073741824	; 0xc0000000
    1c28:	bl	0 <flatcc_builder_start_vector>
    1c2c:	mov	r0, r4
    1c30:	mov	r1, #1
    1c34:	bl	0 <flatcc_builder_extend_vector>
    1c38:	mov	r1, #32
    1c3c:	strb	r1, [r0, #2]
    1c40:	mov	r1, #16
    1c44:	strh	r1, [r0]
    1c48:	mov	r0, r4
    1c4c:	mov	r1, #2
    1c50:	bl	0 <flatcc_builder_extend_vector>
    1c54:	mov	r1, #96	; 0x60
    1c58:	strb	r1, [r0, #6]
    1c5c:	mov	r1, #80	; 0x50
    1c60:	strh	r1, [r0, #4]
    1c64:	mov	r1, #64	; 0x40
    1c68:	strb	r1, [r0, #2]
    1c6c:	mov	r1, #48	; 0x30
    1c70:	strh	r1, [r0]
    1c74:	mov	r0, r4
    1c78:	mov	r1, #1
    1c7c:	bl	0 <flatcc_builder_extend_vector>
    1c80:	cmp	r0, #0
    1c84:	movne	r1, #128	; 0x80
    1c88:	strbne	r1, [r0, #2]
    1c8c:	movne	r1, #112	; 0x70
    1c90:	strhne	r1, [r0]
    1c94:	mov	r0, r4
    1c98:	mov	r1, #1
    1c9c:	bl	0 <flatcc_builder_extend_vector>
    1ca0:	movw	r5, #400	; 0x190
    1ca4:	cmp	r0, #0
    1ca8:	mov	r1, #1
    1cac:	movt	r5, #145	; 0x91
    1cb0:	strne	r5, [r0]
    1cb4:	mov	r0, r4
    1cb8:	bl	0 <flatcc_builder_extend_vector>
    1cbc:	cmp	r0, #0
    1cc0:	mov	r1, #1
    1cc4:	strne	r5, [r0]
    1cc8:	mov	r0, r4
    1ccc:	bl	0 <flatcc_builder_extend_vector>
    1cd0:	cmp	r0, #0
    1cd4:	strne	r5, [r0]
    1cd8:	mov	r0, r4
    1cdc:	bl	0 <flatcc_builder_vector_count>
    1ce0:	cmp	r0, #7
    1ce4:	bne	23e8 <gen_monster+0x928>
    1ce8:	mov	r0, r4
    1cec:	mov	r1, #2
    1cf0:	bl	0 <flatcc_builder_truncate_vector>
    1cf4:	mov	r0, r4
    1cf8:	bl	0 <flatcc_builder_vector_count>
    1cfc:	cmp	r0, #5
    1d00:	bne	2400 <gen_monster+0x940>
    1d04:	mov	r0, r4
    1d08:	bl	0 <flatcc_builder_vector_edit>
    1d0c:	ldrh	r1, [r0, #16]
    1d10:	add	r1, r1, #1
    1d14:	strh	r1, [r0, #16]
    1d18:	mov	r0, r4
    1d1c:	bl	0 <flatcc_builder_end_vector>
    1d20:	cmp	r0, #0
    1d24:	beq	1d40 <gen_monster+0x280>
    1d28:	mov	r5, r0
    1d2c:	mov	r0, r4
    1d30:	mov	r1, #9
    1d34:	bl	0 <flatcc_builder_table_add_offset>
    1d38:	cmp	r0, #0
    1d3c:	strne	r5, [r0]
    1d40:	mov	r0, r4
    1d44:	mov	r1, #36	; 0x24
    1d48:	bl	0 <flatcc_builder_start_table>
    1d4c:	movw	r1, #0
    1d50:	mov	r0, r4
    1d54:	mov	r2, #7
    1d58:	movt	r1, #0
    1d5c:	bl	0 <flatcc_builder_create_string>
    1d60:	cmp	r0, #0
    1d64:	beq	1d80 <gen_monster+0x2c0>
    1d68:	mov	r5, r0
    1d6c:	mov	r0, r4
    1d70:	mov	r1, #3
    1d74:	bl	0 <flatcc_builder_table_add_offset>
    1d78:	cmp	r0, #0
    1d7c:	strne	r5, [r0]
    1d80:	movw	r1, #0
    1d84:	mov	r0, r4
    1d88:	mov	r2, #1
    1d8c:	movt	r1, #0
    1d90:	bl	0 <flatcc_builder_check_required>
    1d94:	cmp	r0, #0
    1d98:	beq	23c8 <gen_monster+0x908>
    1d9c:	mov	r0, r4
    1da0:	bl	0 <flatcc_builder_end_table>
    1da4:	mov	r5, r0
    1da8:	mov	r0, r4
    1dac:	bl	0 <flatcc_builder_start_offset_vector>
    1db0:	mov	r0, r4
    1db4:	mov	r1, #2
    1db8:	bl	0 <flatcc_builder_extend_offset_vector>
    1dbc:	str	r5, [r0]
    1dc0:	str	r5, [r0, #4]
    1dc4:	mov	r0, r4
    1dc8:	mov	r1, #36	; 0x24
    1dcc:	bl	0 <flatcc_builder_start_table>
    1dd0:	movw	r1, #0
    1dd4:	mov	r0, r4
    1dd8:	mov	r2, #30
    1ddc:	movt	r1, #0
    1de0:	bl	0 <flatcc_builder_create_string_strn>
    1de4:	cmp	r0, #0
    1de8:	beq	1e04 <gen_monster+0x344>
    1dec:	mov	r6, r0
    1df0:	mov	r0, r4
    1df4:	mov	r1, #3
    1df8:	bl	0 <flatcc_builder_table_add_offset>
    1dfc:	cmp	r0, #0
    1e00:	strne	r6, [r0]
    1e04:	movw	r1, #0
    1e08:	mov	r0, r4
    1e0c:	mov	r2, #1
    1e10:	movt	r1, #0
    1e14:	bl	0 <flatcc_builder_check_required>
    1e18:	cmp	r0, #0
    1e1c:	beq	23c8 <gen_monster+0x908>
    1e20:	mov	r0, r4
    1e24:	bl	0 <flatcc_builder_end_table>
    1e28:	mov	r1, r0
    1e2c:	mov	r0, r4
    1e30:	bl	0 <flatcc_builder_offset_vector_push>
    1e34:	ldr	r6, [r0]
    1e38:	mov	r0, r4
    1e3c:	mov	r1, #3
    1e40:	bl	0 <flatcc_builder_extend_offset_vector>
    1e44:	stm	r0, {r5, r6}
    1e48:	mov	r0, r4
    1e4c:	mov	r1, #1
    1e50:	bl	0 <flatcc_builder_truncate_offset_vector>
    1e54:	mov	r0, r4
    1e58:	bl	0 <flatcc_builder_offset_vector_count>
    1e5c:	cmp	r0, #5
    1e60:	bne	2418 <gen_monster+0x958>
    1e64:	mov	r0, r4
    1e68:	mov	r1, #36	; 0x24
    1e6c:	bl	0 <flatcc_builder_start_table>
    1e70:	movw	r1, #0
    1e74:	mov	r0, r4
    1e78:	mov	r2, #8
    1e7c:	movt	r1, #0
    1e80:	bl	0 <flatcc_builder_create_string_strn>
    1e84:	cmp	r0, #0
    1e88:	beq	1ea4 <gen_monster+0x3e4>
    1e8c:	mov	r6, r0
    1e90:	mov	r0, r4
    1e94:	mov	r1, #3
    1e98:	bl	0 <flatcc_builder_table_add_offset>
    1e9c:	cmp	r0, #0
    1ea0:	strne	r6, [r0]
    1ea4:	movw	r1, #0
    1ea8:	mov	r0, r4
    1eac:	mov	r2, #1
    1eb0:	movt	r1, #0
    1eb4:	bl	0 <flatcc_builder_check_required>
    1eb8:	cmp	r0, #0
    1ebc:	beq	23c8 <gen_monster+0x908>
    1ec0:	mov	r0, r4
    1ec4:	bl	0 <flatcc_builder_end_table>
    1ec8:	mov	r1, r0
    1ecc:	mov	r0, r4
    1ed0:	bl	0 <flatcc_builder_offset_vector_push>
    1ed4:	ldr	r0, [r0]
    1ed8:	str	r0, [sp, #24]
    1edc:	mov	r0, r4
    1ee0:	bl	0 <flatcc_builder_offset_vector_count>
    1ee4:	cmp	r0, #6
    1ee8:	bne	2430 <gen_monster+0x970>
    1eec:	mov	r0, r4
    1ef0:	bl	0 <flatcc_builder_offset_vector_edit>
    1ef4:	ldr	r1, [r0, #8]
    1ef8:	ldr	r2, [r0, #20]
    1efc:	str	r1, [sp, #28]
    1f00:	str	r2, [r0]
    1f04:	str	r5, [r0, #20]
    1f08:	add	r1, sp, #24
    1f0c:	mov	r0, r4
    1f10:	mov	r2, #2
    1f14:	bl	0 <flatcc_builder_append_offset_vector>
    1f18:	mov	r0, r4
    1f1c:	bl	0 <flatcc_builder_end_offset_vector>
    1f20:	cmp	r0, #0
    1f24:	beq	1f40 <gen_monster+0x480>
    1f28:	mov	r6, r0
    1f2c:	mov	r0, r4
    1f30:	mov	r1, #11
    1f34:	bl	0 <flatcc_builder_table_add_offset>
    1f38:	cmp	r0, #0
    1f3c:	strne	r6, [r0]
    1f40:	movw	r1, #0
    1f44:	mov	r0, r4
    1f48:	movt	r1, #0
    1f4c:	bl	0 <flatcc_builder_create_string_str>
    1f50:	movw	r1, #0
    1f54:	str	r0, [sp, #12]
    1f58:	mov	r0, r4
    1f5c:	mov	r2, #2
    1f60:	movt	r1, #0
    1f64:	bl	0 <flatcc_builder_create_string>
    1f68:	movw	r1, #0
    1f6c:	str	r0, [sp, #16]
    1f70:	mov	r0, r4
    1f74:	movt	r1, #0
    1f78:	bl	0 <flatcc_builder_create_string_str>
    1f7c:	str	r0, [sp, #20]
    1f80:	add	r1, sp, #12
    1f84:	mov	r0, r4
    1f88:	mov	r2, #3
    1f8c:	bl	0 <flatcc_builder_create_offset_vector>
    1f90:	cmp	r0, #0
    1f94:	beq	1fb0 <gen_monster+0x4f0>
    1f98:	mov	r6, r0
    1f9c:	mov	r0, r4
    1fa0:	mov	r1, #10
    1fa4:	bl	0 <flatcc_builder_table_add_offset>
    1fa8:	cmp	r0, #0
    1fac:	strne	r6, [r0]
    1fb0:	mov	r0, r4
    1fb4:	mov	r1, #1
    1fb8:	mov	r2, #1
    1fbc:	mvn	r3, #0
    1fc0:	bl	0 <flatcc_builder_start_vector>
    1fc4:	add	r6, sp, #8
    1fc8:	mov	r0, r4
    1fcc:	mov	r2, #1
    1fd0:	mov	r1, r6
    1fd4:	bl	0 <flatcc_builder_append_vector>
    1fd8:	orr	r1, r6, #1
    1fdc:	mov	r0, r4
    1fe0:	mov	r2, #3
    1fe4:	bl	0 <flatcc_builder_append_vector>
    1fe8:	mov	r0, r4
    1fec:	bl	0 <flatcc_builder_end_vector>
    1ff0:	cmp	r0, #0
    1ff4:	beq	2010 <gen_monster+0x550>
    1ff8:	mov	r6, r0
    1ffc:	mov	r0, r4
    2000:	mov	r1, #24
    2004:	bl	0 <flatcc_builder_table_add_offset>
    2008:	cmp	r0, #0
    200c:	strne	r6, [r0]
    2010:	cmp	r5, #0
    2014:	beq	2054 <gen_monster+0x594>
    2018:	mov	r0, r4
    201c:	mov	r1, #7
    2020:	mov	r2, #1
    2024:	mov	r3, #1
    2028:	bl	0 <flatcc_builder_table_add>
    202c:	cmp	r0, #0
    2030:	beq	2054 <gen_monster+0x594>
    2034:	mov	r6, r0
    2038:	mov	r0, r4
    203c:	mov	r1, #8
    2040:	bl	0 <flatcc_builder_table_add_offset>
    2044:	cmp	r0, #0
    2048:	movne	r1, #1
    204c:	strbne	r1, [r6]
    2050:	strne	r5, [r0]
    2054:	mov	r0, r4
    2058:	mov	r1, #36	; 0x24
    205c:	bl	0 <flatcc_builder_start_table>
    2060:	movw	r1, #0
    2064:	mov	r0, r4
    2068:	movt	r1, #0
    206c:	bl	0 <flatcc_builder_create_string_str>
    2070:	cmp	r0, #0
    2074:	beq	2090 <gen_monster+0x5d0>
    2078:	mov	r6, r0
    207c:	mov	r0, r4
    2080:	mov	r1, #3
    2084:	bl	0 <flatcc_builder_table_add_offset>
    2088:	cmp	r0, #0
    208c:	strne	r6, [r0]
    2090:	mov	r0, r4
    2094:	bl	0 <flatcc_builder_start_offset_vector>
    2098:	mov	r0, r4
    209c:	mov	r1, #36	; 0x24
    20a0:	bl	0 <flatcc_builder_start_table>
    20a4:	cmp	r5, #0
    20a8:	beq	20e8 <gen_monster+0x628>
    20ac:	mov	r0, r4
    20b0:	mov	r1, #7
    20b4:	mov	r2, #1
    20b8:	mov	r3, #1
    20bc:	bl	0 <flatcc_builder_table_add>
    20c0:	cmp	r0, #0
    20c4:	beq	20e8 <gen_monster+0x628>
    20c8:	mov	r6, r0
    20cc:	mov	r0, r4
    20d0:	mov	r1, #8
    20d4:	bl	0 <flatcc_builder_table_add_offset>
    20d8:	cmp	r0, #0
    20dc:	movne	r1, #1
    20e0:	strbne	r1, [r6]
    20e4:	strne	r5, [r0]
    20e8:	movw	r1, #0
    20ec:	mov	r0, r4
    20f0:	movt	r1, #0
    20f4:	bl	0 <flatcc_builder_create_string_str>
    20f8:	cmp	r0, #0
    20fc:	beq	2118 <gen_monster+0x658>
    2100:	mov	r6, r0
    2104:	mov	r0, r4
    2108:	mov	r1, #3
    210c:	bl	0 <flatcc_builder_table_add_offset>
    2110:	cmp	r0, #0
    2114:	strne	r6, [r0]
    2118:	movw	r1, #0
    211c:	mov	r0, r4
    2120:	mov	r2, #1
    2124:	movt	r1, #0
    2128:	bl	0 <flatcc_builder_check_required>
    212c:	cmp	r0, #0
    2130:	beq	23c8 <gen_monster+0x908>
    2134:	mov	r0, r4
    2138:	bl	0 <flatcc_builder_end_table>
    213c:	cmp	r0, #0
    2140:	beq	2150 <gen_monster+0x690>
    2144:	mov	r1, r0
    2148:	mov	r0, r4
    214c:	bl	0 <flatcc_builder_offset_vector_push>
    2150:	mov	r0, r4
    2154:	mov	r1, #36	; 0x24
    2158:	bl	0 <flatcc_builder_start_table>
    215c:	cmp	r5, #0
    2160:	beq	21a0 <gen_monster+0x6e0>
    2164:	mov	r0, r4
    2168:	mov	r1, #7
    216c:	mov	r2, #1
    2170:	mov	r3, #1
    2174:	bl	0 <flatcc_builder_table_add>
    2178:	cmp	r0, #0
    217c:	beq	21a0 <gen_monster+0x6e0>
    2180:	mov	r6, r0
    2184:	mov	r0, r4
    2188:	mov	r1, #8
    218c:	bl	0 <flatcc_builder_table_add_offset>
    2190:	cmp	r0, #0
    2194:	movne	r1, #1
    2198:	strbne	r1, [r6]
    219c:	strne	r5, [r0]
    21a0:	movw	r1, #0
    21a4:	mov	r0, r4
    21a8:	movt	r1, #0
    21ac:	bl	0 <flatcc_builder_create_string_str>
    21b0:	cmp	r0, #0
    21b4:	beq	21d0 <gen_monster+0x710>
    21b8:	mov	r6, r0
    21bc:	mov	r0, r4
    21c0:	mov	r1, #3
    21c4:	bl	0 <flatcc_builder_table_add_offset>
    21c8:	cmp	r0, #0
    21cc:	strne	r6, [r0]
    21d0:	movw	r1, #0
    21d4:	mov	r0, r4
    21d8:	mov	r2, #1
    21dc:	movt	r1, #0
    21e0:	bl	0 <flatcc_builder_check_required>
    21e4:	cmp	r0, #0
    21e8:	beq	23c8 <gen_monster+0x908>
    21ec:	mov	r0, r4
    21f0:	bl	0 <flatcc_builder_end_table>
    21f4:	cmp	r0, #0
    21f8:	beq	2208 <gen_monster+0x748>
    21fc:	mov	r1, r0
    2200:	mov	r0, r4
    2204:	bl	0 <flatcc_builder_offset_vector_push>
    2208:	mov	r0, r4
    220c:	mov	r1, #36	; 0x24
    2210:	bl	0 <flatcc_builder_start_table>
    2214:	mov	r0, r4
    2218:	mov	r1, #8
    221c:	bl	0 <flatcc_builder_table_add_offset>
    2220:	movw	r1, #0
    2224:	cmp	r0, #0
    2228:	movt	r1, #0
    222c:	strne	r5, [r0]
    2230:	mov	r0, r4
    2234:	bl	0 <flatcc_builder_create_string_str>
    2238:	cmp	r0, #0
    223c:	beq	2258 <gen_monster+0x798>
    2240:	mov	r5, r0
    2244:	mov	r0, r4
    2248:	mov	r1, #3
    224c:	bl	0 <flatcc_builder_table_add_offset>
    2250:	cmp	r0, #0
    2254:	strne	r5, [r0]
    2258:	mov	r0, r4
    225c:	mov	r1, #7
    2260:	mov	r2, #1
    2264:	mov	r3, #1
    2268:	mov	r5, #1
    226c:	bl	0 <flatcc_builder_table_add>
    2270:	movw	r1, #0
    2274:	cmp	r0, #0
    2278:	mov	r2, #1
    227c:	movt	r1, #0
    2280:	strbne	r5, [r0]
    2284:	mov	r0, r4
    2288:	bl	0 <flatcc_builder_check_required>
    228c:	cmp	r0, #0
    2290:	beq	23c8 <gen_monster+0x908>
    2294:	mov	r0, r4
    2298:	bl	0 <flatcc_builder_end_table>
    229c:	cmp	r0, #0
    22a0:	beq	22b0 <gen_monster+0x7f0>
    22a4:	mov	r1, r0
    22a8:	mov	r0, r4
    22ac:	bl	0 <flatcc_builder_offset_vector_push>
    22b0:	mov	r0, r4
    22b4:	bl	0 <flatcc_builder_end_offset_vector>
    22b8:	cmp	r0, #0
    22bc:	beq	22d8 <gen_monster+0x818>
    22c0:	mov	r5, r0
    22c4:	mov	r0, r4
    22c8:	mov	r1, #11
    22cc:	bl	0 <flatcc_builder_table_add_offset>
    22d0:	cmp	r0, #0
    22d4:	strne	r5, [r0]
    22d8:	movw	r1, #0
    22dc:	mov	r0, r4
    22e0:	mov	r2, #1
    22e4:	movt	r1, #0
    22e8:	bl	0 <flatcc_builder_check_required>
    22ec:	cmp	r0, #0
    22f0:	beq	23c8 <gen_monster+0x908>
    22f4:	mov	r0, r4
    22f8:	bl	0 <flatcc_builder_end_table>
    22fc:	cmp	r0, #0
    2300:	beq	231c <gen_monster+0x85c>
    2304:	mov	r5, r0
    2308:	mov	r0, r4
    230c:	mov	r1, #12
    2310:	bl	0 <flatcc_builder_table_add_offset>
    2314:	cmp	r0, #0
    2318:	strne	r5, [r0]
    231c:	mov	r0, r4
    2320:	mov	r1, #15
    2324:	mov	r2, #1
    2328:	mov	r3, #1
    232c:	bl	0 <flatcc_builder_table_add>
    2330:	cmp	r0, #0
    2334:	movne	r1, #0
    2338:	strbne	r1, [r0]
    233c:	mov	r0, r4
    2340:	mov	r1, #3
    2344:	bl	0 <flatcc_builder_start_table>
    2348:	movw	r1, #0
    234c:	mov	r0, r4
    2350:	mov	r2, #0
    2354:	movt	r1, #0
    2358:	bl	0 <flatcc_builder_check_required>
    235c:	cmp	r0, #0
    2360:	beq	2450 <gen_monster+0x990>
    2364:	mov	r0, r4
    2368:	bl	0 <flatcc_builder_end_table>
    236c:	cmp	r0, #0
    2370:	beq	238c <gen_monster+0x8cc>
    2374:	mov	r5, r0
    2378:	mov	r0, r4
    237c:	mov	r1, #14
    2380:	bl	0 <flatcc_builder_table_add_offset>
    2384:	cmp	r0, #0
    2388:	strne	r5, [r0]
    238c:	movw	r1, #0
    2390:	mov	r0, r4
    2394:	mov	r2, #1
    2398:	movt	r1, #0
    239c:	bl	0 <flatcc_builder_check_required>
    23a0:	cmp	r0, #0
    23a4:	beq	23c8 <gen_monster+0x908>
    23a8:	mov	r0, r4
    23ac:	bl	0 <flatcc_builder_end_table>
    23b0:	mov	r1, r0
    23b4:	mov	r0, r4
    23b8:	bl	0 <flatcc_builder_end_buffer>
    23bc:	mov	r0, #0
    23c0:	sub	sp, fp, #16
    23c4:	pop	{r4, r5, r6, sl, fp, pc}
    23c8:	movw	r0, #0
    23cc:	movw	r1, #0
    23d0:	movw	r3, #0
    23d4:	mov	r2, #235	; 0xeb
    23d8:	movt	r0, #0
    23dc:	movt	r1, #0
    23e0:	movt	r3, #0
    23e4:	bl	0 <__assert_fail>
    23e8:	movw	r0, #0
    23ec:	movw	r1, #0
    23f0:	movw	r3, #0
    23f4:	movw	r2, #881	; 0x371
    23f8:	movt	r0, #0
    23fc:	b	2444 <gen_monster+0x984>
    2400:	movw	r0, #0
    2404:	movw	r1, #0
    2408:	movw	r3, #0
    240c:	movw	r2, #883	; 0x373
    2410:	movt	r0, #0
    2414:	b	2444 <gen_monster+0x984>
    2418:	movw	r0, #0
    241c:	movw	r1, #0
    2420:	movw	r3, #0
    2424:	movw	r2, #923	; 0x39b
    2428:	movt	r0, #0
    242c:	b	2444 <gen_monster+0x984>
    2430:	movw	r0, #0
    2434:	movw	r1, #0
    2438:	movw	r3, #0
    243c:	movw	r2, #929	; 0x3a1
    2440:	movt	r0, #0
    2444:	movt	r1, #0
    2448:	movt	r3, #0
    244c:	bl	0 <__assert_fail>
    2450:	movw	r0, #0
    2454:	movw	r1, #0
    2458:	movw	r3, #0
    245c:	mov	r2, #221	; 0xdd
    2460:	movt	r0, #0
    2464:	movt	r1, #0
    2468:	movt	r3, #0
    246c:	bl	0 <__assert_fail>

00002470 <test_monster>:
    2470:	push	{r4, r5, fp, lr}
    2474:	add	fp, sp, #8
    2478:	sub	sp, sp, #8
    247c:	mov	r1, #0
    2480:	mov	r4, r0
    2484:	bl	1ac0 <gen_monster>
    2488:	add	r1, sp, #4
    248c:	mov	r0, r4
    2490:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    2494:	mov	r4, r0
    2498:	movw	r0, #0
    249c:	ldr	r2, [sp, #4]
    24a0:	movt	r0, #0
    24a4:	mov	r1, r4
    24a8:	ldr	r3, [r0]
    24ac:	movw	r0, #0
    24b0:	movt	r0, #0
    24b4:	bl	5d4 <hexdump>
    24b8:	ldr	r1, [sp, #4]
    24bc:	movw	r2, #0
    24c0:	movw	r3, #0
    24c4:	mov	r0, r4
    24c8:	movt	r2, #0
    24cc:	movt	r3, #0
    24d0:	bl	0 <flatcc_verify_table_as_root>
    24d4:	cmp	r0, #0
    24d8:	beq	24f8 <test_monster+0x88>
    24dc:	bl	0 <flatcc_verify_error_string>
    24e0:	mov	r1, r0
    24e4:	movw	r0, #0
    24e8:	movt	r0, #0
    24ec:	bl	0 <printf>
    24f0:	mvn	r5, #0
    24f4:	b	250c <test_monster+0x9c>
    24f8:	mov	r0, r4
    24fc:	bl	f24 <verify_monster>
    2500:	mov	r5, r0
    2504:	mov	r0, r4
    2508:	bl	0 <flatcc_builder_aligned_free>
    250c:	mov	r0, r5
    2510:	sub	sp, fp, #8
    2514:	pop	{r4, r5, fp, pc}

00002518 <test_monster_with_size>:
    2518:	push	{r4, r5, fp, lr}
    251c:	add	fp, sp, #8
    2520:	sub	sp, sp, #8
    2524:	mov	r1, #1
    2528:	mov	r4, r0
    252c:	bl	1ac0 <gen_monster>
    2530:	add	r1, sp, #4
    2534:	mov	r0, r4
    2538:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    253c:	mov	r4, r0
    2540:	movw	r0, #0
    2544:	ldr	r2, [sp, #4]
    2548:	movt	r0, #0
    254c:	mov	r1, r4
    2550:	ldr	r3, [r0]
    2554:	movw	r0, #0
    2558:	movt	r0, #0
    255c:	bl	5d4 <hexdump>
    2560:	tst	r4, #15
    2564:	beq	258c <test_monster_with_size+0x74>
    2568:	movw	r0, #0
    256c:	movt	r0, #0
    2570:	bl	0 <printf>
    2574:	movw	r0, #0
    2578:	mov	r1, r4
    257c:	movt	r0, #0
    2580:	bl	0 <printf>
    2584:	mvn	r5, #0
    2588:	b	2600 <test_monster_with_size+0xe8>
    258c:	mov	r5, r4
    2590:	ldr	r0, [sp, #4]
    2594:	ldr	r1, [r5], #4
    2598:	sub	r2, r0, #4
    259c:	cmp	r1, r2
    25a0:	bne	25d8 <test_monster_with_size+0xc0>
    25a4:	movw	r2, #0
    25a8:	movw	r3, #0
    25ac:	mov	r0, r5
    25b0:	movt	r2, #0
    25b4:	movt	r3, #0
    25b8:	bl	0 <flatcc_verify_table_as_root>
    25bc:	cmp	r0, #0
    25c0:	beq	25ec <test_monster_with_size+0xd4>
    25c4:	bl	0 <flatcc_verify_error_string>
    25c8:	mov	r1, r0
    25cc:	movw	r0, #0
    25d0:	movt	r0, #0
    25d4:	b	2580 <test_monster_with_size+0x68>
    25d8:	movw	r0, #0
    25dc:	movt	r0, #0
    25e0:	bl	0 <printf>
    25e4:	mvn	r5, #0
    25e8:	b	2600 <test_monster_with_size+0xe8>
    25ec:	mov	r0, r5
    25f0:	bl	f24 <verify_monster>
    25f4:	mov	r5, r0
    25f8:	mov	r0, r4
    25fc:	bl	0 <flatcc_builder_aligned_free>
    2600:	mov	r0, r5
    2604:	sub	sp, fp, #8
    2608:	pop	{r4, r5, fp, pc}

0000260c <test_string>:
    260c:	push	{r4, r5, fp, lr}
    2610:	add	fp, sp, #8
    2614:	mov	r4, r0
    2618:	bl	0 <flatcc_builder_reset>
    261c:	movw	r1, #0
    2620:	mov	r0, r4
    2624:	mov	r2, #0
    2628:	mov	r3, #0
    262c:	movt	r1, #0
    2630:	bl	0 <flatcc_builder_start_buffer>
    2634:	cmp	r0, #0
    2638:	bne	2648 <test_string+0x3c>
    263c:	mov	r0, r4
    2640:	mov	r1, #36	; 0x24
    2644:	bl	0 <flatcc_builder_start_table>
    2648:	mov	r0, r4
    264c:	bl	0 <flatcc_builder_start_string>
    2650:	mov	r0, r4
    2654:	mov	r1, #3
    2658:	bl	0 <flatcc_builder_extend_string>
    265c:	mov	r1, #51	; 0x33
    2660:	strb	r1, [r0, #2]
    2664:	movw	r1, #12849	; 0x3231
    2668:	strh	r1, [r0]
    266c:	movw	r1, #0
    2670:	mov	r0, r4
    2674:	movt	r1, #0
    2678:	bl	0 <flatcc_builder_append_string_str>
    267c:	mov	r0, r4
    2680:	bl	0 <flatcc_builder_string_len>
    2684:	cmp	r0, #4
    2688:	bne	27ec <test_string+0x1e0>
    268c:	movw	r1, #0
    2690:	mov	r0, r4
    2694:	mov	r2, #30
    2698:	movt	r1, #0
    269c:	bl	0 <flatcc_builder_append_string_strn>
    26a0:	mov	r0, r4
    26a4:	bl	0 <flatcc_builder_string_len>
    26a8:	cmp	r0, #8
    26ac:	bne	2804 <test_string+0x1f8>
    26b0:	movw	r1, #0
    26b4:	mov	r0, r4
    26b8:	mov	r2, #2
    26bc:	movt	r1, #0
    26c0:	bl	0 <flatcc_builder_append_string>
    26c4:	mov	r0, r4
    26c8:	bl	0 <flatcc_builder_string_len>
    26cc:	cmp	r0, #10
    26d0:	bne	281c <test_string+0x210>
    26d4:	mov	r0, r4
    26d8:	mov	r1, #3
    26dc:	bl	0 <flatcc_builder_truncate_string>
    26e0:	mov	r0, r4
    26e4:	bl	0 <flatcc_builder_string_len>
    26e8:	cmp	r0, #7
    26ec:	bne	2834 <test_string+0x228>
    26f0:	mov	r0, r4
    26f4:	bl	0 <flatcc_builder_string_edit>
    26f8:	mov	r1, #46	; 0x2e
    26fc:	strb	r1, [r0, #4]
    2700:	mov	r0, r4
    2704:	bl	0 <flatcc_builder_end_string>
    2708:	cmp	r0, #0
    270c:	beq	2728 <test_string+0x11c>
    2710:	mov	r5, r0
    2714:	mov	r0, r4
    2718:	mov	r1, #3
    271c:	bl	0 <flatcc_builder_table_add_offset>
    2720:	cmp	r0, #0
    2724:	strne	r5, [r0]
    2728:	movw	r1, #0
    272c:	mov	r0, r4
    2730:	mov	r2, #1
    2734:	movt	r1, #0
    2738:	bl	0 <flatcc_builder_check_required>
    273c:	cmp	r0, #0
    2740:	beq	284c <test_string+0x240>
    2744:	mov	r0, r4
    2748:	bl	0 <flatcc_builder_end_table>
    274c:	mov	r1, r0
    2750:	mov	r0, r4
    2754:	bl	0 <flatcc_builder_end_buffer>
    2758:	mov	r0, r4
    275c:	mov	r1, #0
    2760:	bl	0 <flatcc_builder_get_direct_buffer>
    2764:	cmp	r0, #0
    2768:	beq	286c <test_string+0x260>
    276c:	ldr	r1, [r0, #4]
    2770:	movw	r2, #20301	; 0x4f4d
    2774:	movt	r2, #21326	; 0x534e
    2778:	cmp	r1, r2
    277c:	bne	288c <test_string+0x280>
    2780:	ldr	r1, [r0]
    2784:	ldr	r2, [r0, r1]!
    2788:	mov	r1, r0
    278c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2790:	cmp	r2, #11
    2794:	bls	27e0 <test_string+0x1d4>
    2798:	ldrh	r1, [r1, #10]
    279c:	cmp	r1, #0
    27a0:	beq	27e0 <test_string+0x1d4>
    27a4:	ldr	r1, [r0, r1]!
    27a8:	add	r0, r0, r1
    27ac:	movw	r1, #0
    27b0:	movt	r1, #0
    27b4:	add	r0, r0, #4
    27b8:	bl	0 <strcmp>
    27bc:	cmp	r0, #0
    27c0:	beq	27d8 <test_string+0x1cc>
    27c4:	movw	r0, #0
    27c8:	movt	r0, #0
    27cc:	bl	0 <puts>
    27d0:	mvn	r0, #0
    27d4:	pop	{r4, r5, fp, pc}
    27d8:	mov	r0, #0
    27dc:	pop	{r4, r5, fp, pc}
    27e0:	movw	r0, #0
    27e4:	movt	r0, #0
    27e8:	b	2894 <test_string+0x288>
    27ec:	movw	r0, #0
    27f0:	movw	r1, #0
    27f4:	movw	r3, #0
    27f8:	movw	r2, #1080	; 0x438
    27fc:	movt	r0, #0
    2800:	b	2880 <test_string+0x274>
    2804:	movw	r0, #0
    2808:	movw	r1, #0
    280c:	movw	r3, #0
    2810:	movw	r2, #1082	; 0x43a
    2814:	movt	r0, #0
    2818:	b	2880 <test_string+0x274>
    281c:	movw	r0, #0
    2820:	movw	r1, #0
    2824:	movw	r3, #0
    2828:	movw	r2, #1084	; 0x43c
    282c:	movt	r0, #0
    2830:	b	2880 <test_string+0x274>
    2834:	movw	r0, #0
    2838:	movw	r1, #0
    283c:	movw	r3, #0
    2840:	movw	r2, #1086	; 0x43e
    2844:	movt	r0, #0
    2848:	b	2880 <test_string+0x274>
    284c:	movw	r0, #0
    2850:	movw	r1, #0
    2854:	movw	r3, #0
    2858:	mov	r2, #235	; 0xeb
    285c:	movt	r0, #0
    2860:	movt	r1, #0
    2864:	movt	r3, #0
    2868:	bl	0 <__assert_fail>
    286c:	movw	r0, #0
    2870:	movw	r1, #0
    2874:	movw	r3, #0
    2878:	movw	r2, #1093	; 0x445
    287c:	movt	r0, #0
    2880:	movt	r1, #0
    2884:	movt	r3, #0
    2888:	bl	0 <__assert_fail>
    288c:	movw	r0, #0
    2890:	movt	r0, #0
    2894:	movw	r1, #0
    2898:	movw	r3, #0
    289c:	movw	r2, #699	; 0x2bb
    28a0:	movt	r1, #0
    28a4:	movt	r3, #0
    28a8:	bl	0 <__assert_fail>

000028ac <test_sort_find>:
    28ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28b0:	add	fp, sp, #28
    28b4:	sub	sp, sp, #20
    28b8:	mov	r4, r0
    28bc:	bl	0 <flatcc_builder_reset>
    28c0:	movw	r1, #0
    28c4:	mov	r0, r4
    28c8:	mov	r2, #0
    28cc:	mov	r3, #0
    28d0:	movt	r1, #0
    28d4:	bl	0 <flatcc_builder_start_buffer>
    28d8:	cmp	r0, #0
    28dc:	bne	28ec <test_sort_find+0x40>
    28e0:	mov	r0, r4
    28e4:	mov	r1, #36	; 0x24
    28e8:	bl	0 <flatcc_builder_start_table>
    28ec:	movw	r1, #0
    28f0:	mov	r0, r4
    28f4:	movt	r1, #0
    28f8:	bl	0 <flatcc_builder_create_string_str>
    28fc:	cmp	r0, #0
    2900:	beq	291c <test_sort_find+0x70>
    2904:	mov	r5, r0
    2908:	mov	r0, r4
    290c:	mov	r1, #3
    2910:	bl	0 <flatcc_builder_table_add_offset>
    2914:	cmp	r0, #0
    2918:	strne	r5, [r0]
    291c:	mov	r0, r4
    2920:	bl	0 <flatcc_builder_start_offset_vector>
    2924:	mov	r0, r4
    2928:	mov	r1, #36	; 0x24
    292c:	bl	0 <flatcc_builder_start_table>
    2930:	movw	r1, #0
    2934:	mov	r0, r4
    2938:	movt	r1, #0
    293c:	bl	0 <flatcc_builder_create_string_str>
    2940:	cmp	r0, #0
    2944:	beq	2960 <test_sort_find+0xb4>
    2948:	mov	r5, r0
    294c:	mov	r0, r4
    2950:	mov	r1, #3
    2954:	bl	0 <flatcc_builder_table_add_offset>
    2958:	cmp	r0, #0
    295c:	strne	r5, [r0]
    2960:	movw	r1, #0
    2964:	mov	r0, r4
    2968:	mov	r2, #1
    296c:	movt	r1, #0
    2970:	bl	0 <flatcc_builder_check_required>
    2974:	cmp	r0, #0
    2978:	beq	335c <test_sort_find+0xab0>
    297c:	mov	r0, r4
    2980:	bl	0 <flatcc_builder_end_table>
    2984:	cmp	r0, #0
    2988:	beq	2998 <test_sort_find+0xec>
    298c:	mov	r1, r0
    2990:	mov	r0, r4
    2994:	bl	0 <flatcc_builder_offset_vector_push>
    2998:	mov	r0, r4
    299c:	mov	r1, #36	; 0x24
    29a0:	bl	0 <flatcc_builder_start_table>
    29a4:	movw	r1, #0
    29a8:	mov	r0, r4
    29ac:	movt	r1, #0
    29b0:	bl	0 <flatcc_builder_create_string_str>
    29b4:	cmp	r0, #0
    29b8:	beq	29d4 <test_sort_find+0x128>
    29bc:	mov	r5, r0
    29c0:	mov	r0, r4
    29c4:	mov	r1, #3
    29c8:	bl	0 <flatcc_builder_table_add_offset>
    29cc:	cmp	r0, #0
    29d0:	strne	r5, [r0]
    29d4:	movw	r1, #0
    29d8:	mov	r0, r4
    29dc:	mov	r2, #1
    29e0:	movt	r1, #0
    29e4:	bl	0 <flatcc_builder_check_required>
    29e8:	cmp	r0, #0
    29ec:	beq	335c <test_sort_find+0xab0>
    29f0:	mov	r0, r4
    29f4:	bl	0 <flatcc_builder_end_table>
    29f8:	cmp	r0, #0
    29fc:	beq	2a0c <test_sort_find+0x160>
    2a00:	mov	r1, r0
    2a04:	mov	r0, r4
    2a08:	bl	0 <flatcc_builder_offset_vector_push>
    2a0c:	mov	r0, r4
    2a10:	mov	r1, #36	; 0x24
    2a14:	bl	0 <flatcc_builder_start_table>
    2a18:	movw	r1, #0
    2a1c:	mov	r0, r4
    2a20:	movt	r1, #0
    2a24:	bl	0 <flatcc_builder_create_string_str>
    2a28:	cmp	r0, #0
    2a2c:	beq	2a48 <test_sort_find+0x19c>
    2a30:	mov	r5, r0
    2a34:	mov	r0, r4
    2a38:	mov	r1, #3
    2a3c:	bl	0 <flatcc_builder_table_add_offset>
    2a40:	cmp	r0, #0
    2a44:	strne	r5, [r0]
    2a48:	movw	r1, #0
    2a4c:	mov	r0, r4
    2a50:	mov	r2, #1
    2a54:	movt	r1, #0
    2a58:	bl	0 <flatcc_builder_check_required>
    2a5c:	cmp	r0, #0
    2a60:	beq	335c <test_sort_find+0xab0>
    2a64:	mov	r0, r4
    2a68:	bl	0 <flatcc_builder_end_table>
    2a6c:	cmp	r0, #0
    2a70:	beq	2a80 <test_sort_find+0x1d4>
    2a74:	mov	r1, r0
    2a78:	mov	r0, r4
    2a7c:	bl	0 <flatcc_builder_offset_vector_push>
    2a80:	mov	r0, r4
    2a84:	mov	r1, #36	; 0x24
    2a88:	bl	0 <flatcc_builder_start_table>
    2a8c:	movw	r1, #0
    2a90:	mov	r0, r4
    2a94:	movt	r1, #0
    2a98:	bl	0 <flatcc_builder_create_string_str>
    2a9c:	cmp	r0, #0
    2aa0:	beq	2abc <test_sort_find+0x210>
    2aa4:	mov	r5, r0
    2aa8:	mov	r0, r4
    2aac:	mov	r1, #3
    2ab0:	bl	0 <flatcc_builder_table_add_offset>
    2ab4:	cmp	r0, #0
    2ab8:	strne	r5, [r0]
    2abc:	movw	r1, #0
    2ac0:	mov	r0, r4
    2ac4:	mov	r2, #1
    2ac8:	movt	r1, #0
    2acc:	bl	0 <flatcc_builder_check_required>
    2ad0:	cmp	r0, #0
    2ad4:	beq	335c <test_sort_find+0xab0>
    2ad8:	mov	r0, r4
    2adc:	bl	0 <flatcc_builder_end_table>
    2ae0:	cmp	r0, #0
    2ae4:	beq	2af4 <test_sort_find+0x248>
    2ae8:	mov	r1, r0
    2aec:	mov	r0, r4
    2af0:	bl	0 <flatcc_builder_offset_vector_push>
    2af4:	mov	r0, r4
    2af8:	mov	r1, #36	; 0x24
    2afc:	bl	0 <flatcc_builder_start_table>
    2b00:	movw	r1, #0
    2b04:	mov	r0, r4
    2b08:	movt	r1, #0
    2b0c:	bl	0 <flatcc_builder_create_string_str>
    2b10:	cmp	r0, #0
    2b14:	beq	2b30 <test_sort_find+0x284>
    2b18:	mov	r5, r0
    2b1c:	mov	r0, r4
    2b20:	mov	r1, #3
    2b24:	bl	0 <flatcc_builder_table_add_offset>
    2b28:	cmp	r0, #0
    2b2c:	strne	r5, [r0]
    2b30:	movw	r1, #0
    2b34:	mov	r0, r4
    2b38:	mov	r2, #1
    2b3c:	movt	r1, #0
    2b40:	bl	0 <flatcc_builder_check_required>
    2b44:	cmp	r0, #0
    2b48:	beq	335c <test_sort_find+0xab0>
    2b4c:	mov	r0, r4
    2b50:	bl	0 <flatcc_builder_end_table>
    2b54:	cmp	r0, #0
    2b58:	beq	2b68 <test_sort_find+0x2bc>
    2b5c:	mov	r1, r0
    2b60:	mov	r0, r4
    2b64:	bl	0 <flatcc_builder_offset_vector_push>
    2b68:	mov	r0, r4
    2b6c:	bl	0 <flatcc_builder_end_offset_vector>
    2b70:	cmp	r0, #0
    2b74:	beq	2b90 <test_sort_find+0x2e4>
    2b78:	mov	r5, r0
    2b7c:	mov	r0, r4
    2b80:	mov	r1, #11
    2b84:	bl	0 <flatcc_builder_table_add_offset>
    2b88:	cmp	r0, #0
    2b8c:	strne	r5, [r0]
    2b90:	movw	r1, #0
    2b94:	mov	r0, r4
    2b98:	mov	r2, #1
    2b9c:	movt	r1, #0
    2ba0:	bl	0 <flatcc_builder_check_required>
    2ba4:	cmp	r0, #0
    2ba8:	beq	335c <test_sort_find+0xab0>
    2bac:	mov	r0, r4
    2bb0:	bl	0 <flatcc_builder_end_table>
    2bb4:	mov	r1, r0
    2bb8:	mov	r0, r4
    2bbc:	bl	0 <flatcc_builder_end_buffer>
    2bc0:	add	r1, sp, #16
    2bc4:	mov	r0, r4
    2bc8:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    2bcc:	movw	r9, #0
    2bd0:	ldr	r2, [sp, #16]
    2bd4:	mov	r4, r0
    2bd8:	movw	r0, #0
    2bdc:	movt	r9, #0
    2be0:	movt	r0, #0
    2be4:	mov	r1, r4
    2be8:	ldr	r3, [r9]
    2bec:	bl	5d4 <hexdump>
    2bf0:	cmp	r4, #0
    2bf4:	beq	337c <test_sort_find+0xad0>
    2bf8:	ldr	r0, [r4, #4]
    2bfc:	movw	r1, #20301	; 0x4f4d
    2c00:	movt	r1, #21326	; 0x534e
    2c04:	cmp	r0, r1
    2c08:	bne	337c <test_sort_find+0xad0>
    2c0c:	ldr	r1, [r4]
    2c10:	str	r4, [sp, #12]
    2c14:	ldr	r2, [r4, r1]!
    2c18:	str	r1, [sp, #8]
    2c1c:	mov	r1, r4
    2c20:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2c24:	cmp	r2, #27
    2c28:	bls	339c <test_sort_find+0xaf0>
    2c2c:	ldrh	r1, [r1, #26]
    2c30:	cmp	r1, #0
    2c34:	beq	339c <test_sort_find+0xaf0>
    2c38:	str	r1, [sp, #4]
    2c3c:	ldr	r1, [r4, r1]!
    2c40:	ldr	sl, [r4, r1]!
    2c44:	str	r1, [sp]
    2c48:	add	r5, r4, #4
    2c4c:	cmp	sl, #0
    2c50:	beq	2cf0 <test_sort_find+0x444>
    2c54:	lsr	r7, sl, #1
    2c58:	sub	r6, sl, #1
    2c5c:	mov	r0, r5
    2c60:	mov	r1, r7
    2c64:	mov	r2, r6
    2c68:	bl	9ff8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    2c6c:	sub	r7, r7, #1
    2c70:	cmn	r7, #1
    2c74:	bne	2c5c <test_sort_find+0x3b0>
    2c78:	cmp	r6, #0
    2c7c:	beq	2cf0 <test_sort_find+0x444>
    2c80:	mvn	r0, #3
    2c84:	ldr	r1, [sp]
    2c88:	sub	r6, sl, #2
    2c8c:	add	r7, r0, sl, lsl #2
    2c90:	mov	r0, #4
    2c94:	sub	r8, r0, sl, lsl #2
    2c98:	ldr	r0, [sp, #8]
    2c9c:	add	r0, r1, r0
    2ca0:	ldr	r1, [sp, #4]
    2ca4:	add	r0, r0, sl, lsl #2
    2ca8:	add	r0, r0, r1
    2cac:	ldr	r1, [sp, #12]
    2cb0:	add	r4, r1, r0
    2cb4:	ldr	r0, [r4]
    2cb8:	ldr	r1, [r5]
    2cbc:	mov	r2, r6
    2cc0:	add	r0, r7, r0
    2cc4:	str	r0, [r5]
    2cc8:	add	r0, r8, r1
    2ccc:	mov	r1, #0
    2cd0:	str	r0, [r4], #-4
    2cd4:	mov	r0, r5
    2cd8:	bl	9ff8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    2cdc:	sub	r6, r6, #1
    2ce0:	sub	r7, r7, #4
    2ce4:	add	r8, r8, #4
    2ce8:	cmn	r6, #1
    2cec:	bne	2cb4 <test_sort_find+0x408>
    2cf0:	ldr	r4, [sp, #12]
    2cf4:	ldr	r3, [r9]
    2cf8:	ldr	r2, [sp, #16]
    2cfc:	movw	r0, #0
    2d00:	movt	r0, #0
    2d04:	mov	r1, r4
    2d08:	bl	5d4 <hexdump>
    2d0c:	ldr	r0, [r5, #-4]
    2d10:	cmp	r0, #5
    2d14:	bne	2d6c <test_sort_find+0x4c0>
    2d18:	ldr	r1, [r5]
    2d1c:	mov	r0, r5
    2d20:	ldr	r2, [r0, r1]!
    2d24:	mov	r1, r0
    2d28:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2d2c:	cmp	r2, #12
    2d30:	bcc	33bc <test_sort_find+0xb10>
    2d34:	ldrh	r1, [r1, #10]
    2d38:	cmp	r1, #0
    2d3c:	beq	33bc <test_sort_find+0xb10>
    2d40:	ldr	r1, [r0, r1]!
    2d44:	add	r0, r0, r1
    2d48:	movw	r1, #0
    2d4c:	movt	r1, #0
    2d50:	add	r0, r0, #4
    2d54:	bl	0 <strcmp>
    2d58:	cmp	r0, #0
    2d5c:	beq	2d90 <test_sort_find+0x4e4>
    2d60:	movw	r0, #0
    2d64:	movt	r0, #0
    2d68:	b	2d74 <test_sort_find+0x4c8>
    2d6c:	movw	r0, #0
    2d70:	movt	r0, #0
    2d74:	bl	0 <puts>
    2d78:	mvn	r6, #0
    2d7c:	mov	r0, r4
    2d80:	bl	0 <flatcc_builder_aligned_free>
    2d84:	mov	r0, r6
    2d88:	sub	sp, fp, #28
    2d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d90:	mov	r6, r5
    2d94:	ldr	r0, [r6, #4]!
    2d98:	ldr	r1, [r6, r0]!
    2d9c:	mov	r0, r6
    2da0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    2da4:	cmp	r1, #12
    2da8:	bcc	33bc <test_sort_find+0xb10>
    2dac:	ldrh	r0, [r0, #10]
    2db0:	cmp	r0, #0
    2db4:	beq	33bc <test_sort_find+0xb10>
    2db8:	mov	r1, r6
    2dbc:	ldr	r0, [r1, r0]!
    2dc0:	add	r0, r1, r0
    2dc4:	movw	r1, #0
    2dc8:	movt	r1, #0
    2dcc:	add	r0, r0, #4
    2dd0:	bl	0 <strcmp>
    2dd4:	cmp	r0, #0
    2dd8:	beq	2de8 <test_sort_find+0x53c>
    2ddc:	movw	r0, #0
    2de0:	movt	r0, #0
    2de4:	b	2d74 <test_sort_find+0x4c8>
    2de8:	mov	r7, r5
    2dec:	ldr	r0, [r7, #8]!
    2df0:	ldr	r1, [r7, r0]!
    2df4:	mov	r0, r7
    2df8:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    2dfc:	cmp	r1, #12
    2e00:	bcc	33bc <test_sort_find+0xb10>
    2e04:	ldrh	r0, [r0, #10]
    2e08:	cmp	r0, #0
    2e0c:	beq	33bc <test_sort_find+0xb10>
    2e10:	mov	r1, r7
    2e14:	ldr	r0, [r1, r0]!
    2e18:	add	r0, r1, r0
    2e1c:	movw	r1, #0
    2e20:	movt	r1, #0
    2e24:	add	r0, r0, #4
    2e28:	bl	0 <strcmp>
    2e2c:	cmp	r0, #0
    2e30:	beq	2e40 <test_sort_find+0x594>
    2e34:	movw	r0, #0
    2e38:	movt	r0, #0
    2e3c:	b	2d74 <test_sort_find+0x4c8>
    2e40:	mov	r0, r5
    2e44:	ldr	r1, [r0, #12]!
    2e48:	ldr	r2, [r0, r1]!
    2e4c:	mov	r1, r0
    2e50:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2e54:	cmp	r2, #12
    2e58:	bcc	33bc <test_sort_find+0xb10>
    2e5c:	ldrh	r1, [r1, #10]
    2e60:	cmp	r1, #0
    2e64:	beq	33bc <test_sort_find+0xb10>
    2e68:	ldr	r1, [r0, r1]!
    2e6c:	add	r0, r0, r1
    2e70:	movw	r1, #0
    2e74:	movt	r1, #0
    2e78:	add	r0, r0, #4
    2e7c:	bl	0 <strcmp>
    2e80:	cmp	r0, #0
    2e84:	beq	2e94 <test_sort_find+0x5e8>
    2e88:	movw	r0, #0
    2e8c:	movt	r0, #0
    2e90:	b	2d74 <test_sort_find+0x4c8>
    2e94:	mov	r0, r5
    2e98:	ldr	r1, [r0, #16]!
    2e9c:	ldr	r2, [r0, r1]!
    2ea0:	mov	r1, r0
    2ea4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2ea8:	cmp	r2, #12
    2eac:	bcc	33bc <test_sort_find+0xb10>
    2eb0:	ldrh	r1, [r1, #10]
    2eb4:	cmp	r1, #0
    2eb8:	beq	33bc <test_sort_find+0xb10>
    2ebc:	ldr	r1, [r0, r1]!
    2ec0:	add	r0, r0, r1
    2ec4:	movw	r1, #0
    2ec8:	movt	r1, #0
    2ecc:	add	r0, r0, #4
    2ed0:	bl	0 <strcmp>
    2ed4:	cmp	r0, #0
    2ed8:	beq	2ee8 <test_sort_find+0x63c>
    2edc:	movw	r0, #0
    2ee0:	movt	r0, #0
    2ee4:	b	2d74 <test_sort_find+0x4c8>
    2ee8:	cmp	r6, r7
    2eec:	beq	3058 <test_sort_find+0x7ac>
    2ef0:	movw	r1, #0
    2ef4:	mov	r0, r5
    2ef8:	movt	r1, #0
    2efc:	bl	33fc <MyGame_Example_Monster_vec_find_by_name>
    2f00:	cmp	r0, #3
    2f04:	bne	3064 <test_sort_find+0x7b8>
    2f08:	ldr	r8, [r5, #-4]
    2f0c:	cmp	r8, #0
    2f10:	beq	304c <test_sort_find+0x7a0>
    2f14:	mov	r7, #0
    2f18:	subs	r9, r8, #1
    2f1c:	beq	2fc8 <test_sort_find+0x71c>
    2f20:	movw	sl, #0
    2f24:	movt	sl, #0
    2f28:	sub	r0, r9, r7
    2f2c:	add	r6, r7, r0, lsr #1
    2f30:	cmp	r8, r6
    2f34:	bls	33dc <test_sort_find+0xb30>
    2f38:	mov	r0, r5
    2f3c:	ldr	r1, [r0, r6, lsl #2]!
    2f40:	ldr	r2, [r0, r1]!
    2f44:	mov	r1, r0
    2f48:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2f4c:	cmp	r2, #12
    2f50:	bcc	33bc <test_sort_find+0xb10>
    2f54:	ldrh	r1, [r1, #10]
    2f58:	cmp	r1, #0
    2f5c:	beq	33bc <test_sort_find+0xb10>
    2f60:	ldr	r1, [r0, r1]!
    2f64:	ldr	r4, [r0, r1]!
    2f68:	mov	r1, sl
    2f6c:	add	r0, r0, #4
    2f70:	cmp	r4, #5
    2f74:	mov	r2, r4
    2f78:	movcs	r2, #5
    2f7c:	bl	0 <strncmp>
    2f80:	cmp	r0, #1
    2f84:	mov	r1, #0
    2f88:	mov	r2, #0
    2f8c:	movwlt	r1, #1
    2f90:	cmp	r0, #0
    2f94:	movwne	r0, #1
    2f98:	cmp	r4, #5
    2f9c:	ldr	r4, [sp, #12]
    2fa0:	movwcc	r2, #1
    2fa4:	orr	r0, r2, r0
    2fa8:	ands	r0, r0, r1
    2fac:	moveq	r9, r6
    2fb0:	addne	r7, r6, #1
    2fb4:	cmp	r9, r7
    2fb8:	bhi	2f28 <test_sort_find+0x67c>
    2fbc:	bne	304c <test_sort_find+0x7a0>
    2fc0:	cmp	r8, r7
    2fc4:	bls	33dc <test_sort_find+0xb30>
    2fc8:	mov	r0, r5
    2fcc:	ldr	r1, [r0, r7, lsl #2]!
    2fd0:	ldr	r2, [r0, r1]!
    2fd4:	mov	r1, r0
    2fd8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2fdc:	cmp	r2, #12
    2fe0:	bcc	33bc <test_sort_find+0xb10>
    2fe4:	ldrh	r1, [r1, #10]
    2fe8:	cmp	r1, #0
    2fec:	beq	33bc <test_sort_find+0xb10>
    2ff0:	ldr	r1, [r0, r1]!
    2ff4:	ldr	r4, [r0, r1]!
    2ff8:	movw	r1, #0
    2ffc:	movt	r1, #0
    3000:	add	r0, r0, #4
    3004:	cmp	r4, #5
    3008:	mov	r2, r4
    300c:	movcs	r2, #5
    3010:	bl	0 <strncmp>
    3014:	cmp	r0, #0
    3018:	mov	r2, r0
    301c:	mov	r1, #0
    3020:	mvneq	r2, #0
    3024:	cmp	r4, #5
    3028:	movwhi	r1, #1
    302c:	cmp	r0, #0
    3030:	movne	r1, r2
    3034:	cmp	r4, #5
    3038:	ldr	r4, [sp, #12]
    303c:	movcc	r1, r2
    3040:	cmp	r7, #3
    3044:	cmpeq	r1, #0
    3048:	beq	3070 <test_sort_find+0x7c4>
    304c:	movw	r0, #0
    3050:	movt	r0, #0
    3054:	b	2d74 <test_sort_find+0x4c8>
    3058:	movw	r0, #0
    305c:	movt	r0, #0
    3060:	b	2d74 <test_sort_find+0x4c8>
    3064:	movw	r0, #0
    3068:	movt	r0, #0
    306c:	b	2d74 <test_sort_find+0x4c8>
    3070:	movw	r1, #0
    3074:	mov	r0, r5
    3078:	movt	r1, #0
    307c:	bl	33fc <MyGame_Example_Monster_vec_find_by_name>
    3080:	cmp	r0, #3
    3084:	bne	31d8 <test_sort_find+0x92c>
    3088:	ldr	r8, [r5, #-4]
    308c:	cmp	r8, #0
    3090:	beq	31cc <test_sort_find+0x920>
    3094:	mov	r7, #0
    3098:	subs	r9, r8, #1
    309c:	beq	3148 <test_sort_find+0x89c>
    30a0:	movw	sl, #0
    30a4:	movt	sl, #0
    30a8:	sub	r0, r9, r7
    30ac:	add	r6, r7, r0, lsr #1
    30b0:	cmp	r8, r6
    30b4:	bls	33dc <test_sort_find+0xb30>
    30b8:	mov	r0, r5
    30bc:	ldr	r1, [r0, r6, lsl #2]!
    30c0:	ldr	r2, [r0, r1]!
    30c4:	mov	r1, r0
    30c8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    30cc:	cmp	r2, #12
    30d0:	bcc	33bc <test_sort_find+0xb10>
    30d4:	ldrh	r1, [r1, #10]
    30d8:	cmp	r1, #0
    30dc:	beq	33bc <test_sort_find+0xb10>
    30e0:	ldr	r1, [r0, r1]!
    30e4:	ldr	r4, [r0, r1]!
    30e8:	mov	r1, sl
    30ec:	add	r0, r0, #4
    30f0:	cmp	r4, #5
    30f4:	mov	r2, r4
    30f8:	movcs	r2, #5
    30fc:	bl	0 <strncmp>
    3100:	cmp	r0, #1
    3104:	mov	r1, #0
    3108:	mov	r2, #0
    310c:	movwlt	r1, #1
    3110:	cmp	r0, #0
    3114:	movwne	r0, #1
    3118:	cmp	r4, #5
    311c:	movwcc	r2, #1
    3120:	orr	r0, r2, r0
    3124:	ands	r0, r0, r1
    3128:	moveq	r9, r6
    312c:	addne	r7, r6, #1
    3130:	cmp	r9, r7
    3134:	bhi	30a8 <test_sort_find+0x7fc>
    3138:	ldr	r4, [sp, #12]
    313c:	bne	31cc <test_sort_find+0x920>
    3140:	cmp	r8, r7
    3144:	bls	33dc <test_sort_find+0xb30>
    3148:	mov	r0, r5
    314c:	ldr	r1, [r0, r7, lsl #2]!
    3150:	ldr	r2, [r0, r1]!
    3154:	mov	r1, r0
    3158:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    315c:	cmp	r2, #12
    3160:	bcc	33bc <test_sort_find+0xb10>
    3164:	ldrh	r1, [r1, #10]
    3168:	cmp	r1, #0
    316c:	beq	33bc <test_sort_find+0xb10>
    3170:	ldr	r1, [r0, r1]!
    3174:	ldr	r4, [r0, r1]!
    3178:	movw	r1, #0
    317c:	movt	r1, #0
    3180:	add	r0, r0, #4
    3184:	cmp	r4, #5
    3188:	mov	r2, r4
    318c:	movcs	r2, #5
    3190:	bl	0 <strncmp>
    3194:	cmp	r0, #0
    3198:	mov	r2, r0
    319c:	mov	r1, #0
    31a0:	mvneq	r2, #0
    31a4:	cmp	r4, #5
    31a8:	movwhi	r1, #1
    31ac:	cmp	r0, #0
    31b0:	movne	r1, r2
    31b4:	cmp	r4, #5
    31b8:	ldr	r4, [sp, #12]
    31bc:	movcc	r1, r2
    31c0:	cmp	r7, #3
    31c4:	cmpeq	r1, #0
    31c8:	beq	31e4 <test_sort_find+0x938>
    31cc:	movw	r0, #0
    31d0:	movt	r0, #0
    31d4:	b	2d74 <test_sort_find+0x4c8>
    31d8:	movw	r0, #0
    31dc:	movt	r0, #0
    31e0:	b	2d74 <test_sort_find+0x4c8>
    31e4:	movw	r1, #0
    31e8:	mov	r0, r5
    31ec:	movt	r1, #0
    31f0:	bl	33fc <MyGame_Example_Monster_vec_find_by_name>
    31f4:	cmn	r0, #1
    31f8:	beq	3208 <test_sort_find+0x95c>
    31fc:	movw	r0, #0
    3200:	movt	r0, #0
    3204:	b	3228 <test_sort_find+0x97c>
    3208:	movw	r1, #0
    320c:	mov	r0, r5
    3210:	movt	r1, #0
    3214:	bl	33fc <MyGame_Example_Monster_vec_find_by_name>
    3218:	cmp	r0, #0
    321c:	beq	3234 <test_sort_find+0x988>
    3220:	movw	r0, #0
    3224:	movt	r0, #0
    3228:	bl	0 <puts>
    322c:	ldr	r4, [sp, #12]
    3230:	b	2d78 <test_sort_find+0x4cc>
    3234:	movw	r1, #0
    3238:	mov	r0, r5
    323c:	movt	r1, #0
    3240:	bl	33fc <MyGame_Example_Monster_vec_find_by_name>
    3244:	cmp	r0, #1
    3248:	bne	3320 <test_sort_find+0xa74>
    324c:	movw	r1, #0
    3250:	mov	r0, r5
    3254:	movt	r1, #0
    3258:	bl	33fc <MyGame_Example_Monster_vec_find_by_name>
    325c:	cmp	r0, #4
    3260:	bne	3330 <test_sort_find+0xa84>
    3264:	ldr	sl, [r5, #-4]
    3268:	mov	r6, #0
    326c:	cmp	sl, #0
    3270:	beq	3354 <test_sort_find+0xaa8>
    3274:	lsr	r7, sl, #1
    3278:	sub	r4, sl, #1
    327c:	mov	r0, r5
    3280:	mov	r1, r7
    3284:	mov	r2, r4
    3288:	bl	9ff8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    328c:	sub	r7, r7, #1
    3290:	cmn	r7, #1
    3294:	bne	327c <test_sort_find+0x9d0>
    3298:	cmp	r4, #0
    329c:	ldr	r4, [sp, #12]
    32a0:	beq	2d7c <test_sort_find+0x4d0>
    32a4:	mvn	r0, #3
    32a8:	ldr	r1, [sp]
    32ac:	sub	r7, sl, #2
    32b0:	mov	r6, #0
    32b4:	add	r2, r0, sl, lsl #2
    32b8:	mov	r0, #4
    32bc:	sub	r9, r0, sl, lsl #2
    32c0:	ldr	r0, [sp, #8]
    32c4:	add	r0, r1, r0
    32c8:	ldr	r1, [sp, #4]
    32cc:	add	r0, r0, sl, lsl #2
    32d0:	add	r0, r0, r1
    32d4:	add	r8, r4, r0
    32d8:	ldr	r0, [r8]
    32dc:	ldr	r1, [r5]
    32e0:	mov	sl, r2
    32e4:	add	r0, r2, r0
    32e8:	mov	r2, r7
    32ec:	str	r0, [r5]
    32f0:	add	r0, r9, r1
    32f4:	mov	r1, #0
    32f8:	str	r0, [r8], #-4
    32fc:	mov	r0, r5
    3300:	bl	9ff8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    3304:	sub	sl, sl, #4
    3308:	sub	r7, r7, #1
    330c:	add	r9, r9, #4
    3310:	mov	r2, sl
    3314:	cmn	r7, #1
    3318:	bne	32d8 <test_sort_find+0xa2c>
    331c:	b	2d7c <test_sort_find+0x4d0>
    3320:	mov	r6, r0
    3324:	movw	r0, #0
    3328:	movt	r0, #0
    332c:	b	333c <test_sort_find+0xa90>
    3330:	mov	r6, r0
    3334:	movw	r0, #0
    3338:	movt	r0, #0
    333c:	bl	0 <puts>
    3340:	movw	r0, #0
    3344:	mov	r1, r6
    3348:	movt	r0, #0
    334c:	bl	0 <printf>
    3350:	b	322c <test_sort_find+0x980>
    3354:	ldr	r4, [sp, #12]
    3358:	b	2d7c <test_sort_find+0x4d0>
    335c:	movw	r0, #0
    3360:	movw	r1, #0
    3364:	movw	r3, #0
    3368:	mov	r2, #235	; 0xeb
    336c:	movt	r0, #0
    3370:	movt	r1, #0
    3374:	movt	r3, #0
    3378:	bl	0 <__assert_fail>
    337c:	movw	r0, #0
    3380:	movw	r1, #0
    3384:	movw	r3, #0
    3388:	movw	r2, #711	; 0x2c7
    338c:	movt	r0, #0
    3390:	movt	r1, #0
    3394:	movt	r3, #0
    3398:	bl	0 <__assert_fail>
    339c:	movw	r0, #0
    33a0:	movw	r1, #0
    33a4:	movw	r3, #0
    33a8:	movw	r2, #1147	; 0x47b
    33ac:	movt	r0, #0
    33b0:	movt	r1, #0
    33b4:	movt	r3, #0
    33b8:	bl	0 <__assert_fail>
    33bc:	movw	r0, #0
    33c0:	movw	r1, #0
    33c4:	movw	r3, #0
    33c8:	movw	r2, #699	; 0x2bb
    33cc:	movt	r0, #0
    33d0:	movt	r1, #0
    33d4:	movt	r3, #0
    33d8:	bl	0 <__assert_fail>
    33dc:	movw	r0, #0
    33e0:	movw	r1, #0
    33e4:	movw	r3, #0
    33e8:	movw	r2, #693	; 0x2b5
    33ec:	movt	r0, #0
    33f0:	movt	r1, #0
    33f4:	movt	r3, #0
    33f8:	bl	0 <__assert_fail>

000033fc <MyGame_Example_Monster_vec_find_by_name>:
    33fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3400:	add	fp, sp, #24
    3404:	mvn	r4, #0
    3408:	cmp	r0, #0
    340c:	beq	34dc <MyGame_Example_Monster_vec_find_by_name+0xe0>
    3410:	ldr	r7, [r0, #-4]
    3414:	mov	r9, r0
    3418:	cmp	r7, #0
    341c:	beq	34dc <MyGame_Example_Monster_vec_find_by_name+0xe0>
    3420:	mov	r8, r1
    3424:	mov	r4, #0
    3428:	subs	r5, r7, #1
    342c:	beq	349c <MyGame_Example_Monster_vec_find_by_name+0xa0>
    3430:	sub	r0, r5, r4
    3434:	add	r6, r4, r0, lsr #1
    3438:	cmp	r7, r6
    343c:	bls	3510 <MyGame_Example_Monster_vec_find_by_name+0x114>
    3440:	mov	r0, r9
    3444:	ldr	r1, [r0, r6, lsl #2]!
    3448:	ldr	r2, [r0, r1]!
    344c:	mov	r1, r0
    3450:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    3454:	cmp	r2, #12
    3458:	bcc	34f0 <MyGame_Example_Monster_vec_find_by_name+0xf4>
    345c:	ldrh	r1, [r1, #10]
    3460:	cmp	r1, #0
    3464:	beq	34f0 <MyGame_Example_Monster_vec_find_by_name+0xf4>
    3468:	ldr	r1, [r0, r1]!
    346c:	add	r0, r0, r1
    3470:	mov	r1, r8
    3474:	add	r0, r0, #4
    3478:	bl	0 <strcmp>
    347c:	cmp	r0, #0
    3480:	movpl	r5, r6
    3484:	addmi	r4, r6, #1
    3488:	cmp	r5, r4
    348c:	bhi	3430 <MyGame_Example_Monster_vec_find_by_name+0x34>
    3490:	bne	34e4 <MyGame_Example_Monster_vec_find_by_name+0xe8>
    3494:	cmp	r7, r4
    3498:	bls	3510 <MyGame_Example_Monster_vec_find_by_name+0x114>
    349c:	ldr	r0, [r9, r4, lsl #2]!
    34a0:	ldr	r1, [r9, r0]!
    34a4:	mov	r0, r9
    34a8:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    34ac:	cmp	r1, #12
    34b0:	bcc	34f0 <MyGame_Example_Monster_vec_find_by_name+0xf4>
    34b4:	ldrh	r0, [r0, #10]
    34b8:	cmp	r0, #0
    34bc:	beq	34f0 <MyGame_Example_Monster_vec_find_by_name+0xf4>
    34c0:	ldr	r0, [r9, r0]!
    34c4:	mov	r1, r8
    34c8:	add	r0, r9, r0
    34cc:	add	r0, r0, #4
    34d0:	bl	0 <strcmp>
    34d4:	cmp	r0, #0
    34d8:	mvnne	r4, #0
    34dc:	mov	r0, r4
    34e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    34e4:	mvn	r4, #0
    34e8:	mov	r0, r4
    34ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    34f0:	movw	r0, #0
    34f4:	movw	r1, #0
    34f8:	movw	r3, #0
    34fc:	movw	r2, #699	; 0x2bb
    3500:	movt	r0, #0
    3504:	movt	r1, #0
    3508:	movt	r3, #0
    350c:	bl	0 <__assert_fail>
    3510:	movw	r0, #0
    3514:	movw	r1, #0
    3518:	movw	r3, #0
    351c:	movw	r2, #693	; 0x2b5
    3520:	movt	r0, #0
    3524:	movt	r1, #0
    3528:	movt	r3, #0
    352c:	bl	0 <__assert_fail>

00003530 <test_scan>:
    3530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3534:	add	fp, sp, #28
    3538:	sub	sp, sp, #92	; 0x5c
    353c:	mov	r4, r0
    3540:	movw	r0, #1027	; 0x403
    3544:	movt	r0, #515	; 0x203
    3548:	str	r0, [fp, #-37]	; 0xffffffdb
    354c:	movw	r0, #1798	; 0x706
    3550:	movt	r0, #769	; 0x301
    3554:	str	r0, [fp, #-40]	; 0xffffffd8
    3558:	mov	r0, r4
    355c:	bl	0 <flatcc_builder_reset>
    3560:	movw	r1, #0
    3564:	mov	r0, r4
    3568:	mov	r2, #0
    356c:	mov	r3, #0
    3570:	movt	r1, #0
    3574:	bl	0 <flatcc_builder_start_buffer>
    3578:	cmp	r0, #0
    357c:	bne	358c <test_scan+0x5c>
    3580:	mov	r0, r4
    3584:	mov	r1, #36	; 0x24
    3588:	bl	0 <flatcc_builder_start_table>
    358c:	movw	r1, #0
    3590:	mov	r0, r4
    3594:	movt	r1, #0
    3598:	bl	0 <flatcc_builder_create_string_str>
    359c:	cmp	r0, #0
    35a0:	beq	35bc <test_scan+0x8c>
    35a4:	mov	r5, r0
    35a8:	mov	r0, r4
    35ac:	mov	r1, #3
    35b0:	bl	0 <flatcc_builder_table_add_offset>
    35b4:	cmp	r0, #0
    35b8:	strne	r5, [r0]
    35bc:	mvn	r0, #0
    35c0:	mov	r1, #1
    35c4:	mov	r2, #7
    35c8:	mov	r3, #1
    35cc:	str	r1, [sp]
    35d0:	str	r0, [sp, #4]
    35d4:	sub	r1, fp, #40	; 0x28
    35d8:	mov	r0, r4
    35dc:	bl	0 <flatcc_builder_create_vector>
    35e0:	cmp	r0, #0
    35e4:	beq	3600 <test_scan+0xd0>
    35e8:	mov	r5, r0
    35ec:	mov	r0, r4
    35f0:	mov	r1, #5
    35f4:	bl	0 <flatcc_builder_table_add_offset>
    35f8:	cmp	r0, #0
    35fc:	strne	r5, [r0]
    3600:	mov	r0, r4
    3604:	bl	0 <flatcc_builder_start_offset_vector>
    3608:	mov	r0, r4
    360c:	bl	0 <flatcc_builder_end_offset_vector>
    3610:	cmp	r0, #0
    3614:	beq	3630 <test_scan+0x100>
    3618:	mov	r5, r0
    361c:	mov	r0, r4
    3620:	mov	r1, #10
    3624:	bl	0 <flatcc_builder_table_add_offset>
    3628:	cmp	r0, #0
    362c:	strne	r5, [r0]
    3630:	mov	r0, r4
    3634:	bl	0 <flatcc_builder_start_offset_vector>
    3638:	mov	r0, r4
    363c:	mov	r1, #36	; 0x24
    3640:	bl	0 <flatcc_builder_start_table>
    3644:	movw	r1, #0
    3648:	mov	r0, r4
    364c:	movt	r1, #0
    3650:	bl	0 <flatcc_builder_create_string_str>
    3654:	cmp	r0, #0
    3658:	beq	3674 <test_scan+0x144>
    365c:	mov	r5, r0
    3660:	mov	r0, r4
    3664:	mov	r1, #3
    3668:	bl	0 <flatcc_builder_table_add_offset>
    366c:	cmp	r0, #0
    3670:	strne	r5, [r0]
    3674:	movw	r1, #0
    3678:	mov	r0, r4
    367c:	mov	r2, #1
    3680:	movt	r1, #0
    3684:	bl	0 <flatcc_builder_check_required>
    3688:	cmp	r0, #0
    368c:	beq	4578 <test_scan+0x1048>
    3690:	mov	r0, r4
    3694:	bl	0 <flatcc_builder_end_table>
    3698:	cmp	r0, #0
    369c:	beq	36ac <test_scan+0x17c>
    36a0:	mov	r1, r0
    36a4:	mov	r0, r4
    36a8:	bl	0 <flatcc_builder_offset_vector_push>
    36ac:	mov	r0, r4
    36b0:	mov	r1, #36	; 0x24
    36b4:	bl	0 <flatcc_builder_start_table>
    36b8:	movw	r1, #0
    36bc:	mov	r0, r4
    36c0:	movt	r1, #0
    36c4:	bl	0 <flatcc_builder_create_string_str>
    36c8:	cmp	r0, #0
    36cc:	beq	36e8 <test_scan+0x1b8>
    36d0:	mov	r5, r0
    36d4:	mov	r0, r4
    36d8:	mov	r1, #3
    36dc:	bl	0 <flatcc_builder_table_add_offset>
    36e0:	cmp	r0, #0
    36e4:	strne	r5, [r0]
    36e8:	movw	r1, #0
    36ec:	mov	r0, r4
    36f0:	mov	r2, #1
    36f4:	movt	r1, #0
    36f8:	bl	0 <flatcc_builder_check_required>
    36fc:	cmp	r0, #0
    3700:	beq	4578 <test_scan+0x1048>
    3704:	mov	r0, r4
    3708:	bl	0 <flatcc_builder_end_table>
    370c:	cmp	r0, #0
    3710:	beq	3720 <test_scan+0x1f0>
    3714:	mov	r1, r0
    3718:	mov	r0, r4
    371c:	bl	0 <flatcc_builder_offset_vector_push>
    3720:	mov	r0, r4
    3724:	mov	r1, #36	; 0x24
    3728:	bl	0 <flatcc_builder_start_table>
    372c:	movw	r1, #0
    3730:	mov	r0, r4
    3734:	movt	r1, #0
    3738:	bl	0 <flatcc_builder_create_string_str>
    373c:	cmp	r0, #0
    3740:	beq	375c <test_scan+0x22c>
    3744:	mov	r5, r0
    3748:	mov	r0, r4
    374c:	mov	r1, #3
    3750:	bl	0 <flatcc_builder_table_add_offset>
    3754:	cmp	r0, #0
    3758:	strne	r5, [r0]
    375c:	movw	r1, #0
    3760:	mov	r0, r4
    3764:	mov	r2, #1
    3768:	movt	r1, #0
    376c:	bl	0 <flatcc_builder_check_required>
    3770:	cmp	r0, #0
    3774:	beq	4578 <test_scan+0x1048>
    3778:	mov	r0, r4
    377c:	bl	0 <flatcc_builder_end_table>
    3780:	cmp	r0, #0
    3784:	beq	3794 <test_scan+0x264>
    3788:	mov	r1, r0
    378c:	mov	r0, r4
    3790:	bl	0 <flatcc_builder_offset_vector_push>
    3794:	mov	r0, r4
    3798:	mov	r1, #36	; 0x24
    379c:	bl	0 <flatcc_builder_start_table>
    37a0:	movw	r1, #0
    37a4:	mov	r0, r4
    37a8:	movt	r1, #0
    37ac:	bl	0 <flatcc_builder_create_string_str>
    37b0:	cmp	r0, #0
    37b4:	beq	37d0 <test_scan+0x2a0>
    37b8:	mov	r5, r0
    37bc:	mov	r0, r4
    37c0:	mov	r1, #3
    37c4:	bl	0 <flatcc_builder_table_add_offset>
    37c8:	cmp	r0, #0
    37cc:	strne	r5, [r0]
    37d0:	movw	r1, #0
    37d4:	mov	r0, r4
    37d8:	mov	r2, #1
    37dc:	movt	r1, #0
    37e0:	bl	0 <flatcc_builder_check_required>
    37e4:	cmp	r0, #0
    37e8:	beq	4578 <test_scan+0x1048>
    37ec:	mov	r0, r4
    37f0:	bl	0 <flatcc_builder_end_table>
    37f4:	cmp	r0, #0
    37f8:	beq	3808 <test_scan+0x2d8>
    37fc:	mov	r1, r0
    3800:	mov	r0, r4
    3804:	bl	0 <flatcc_builder_offset_vector_push>
    3808:	mov	r0, r4
    380c:	mov	r1, #36	; 0x24
    3810:	bl	0 <flatcc_builder_start_table>
    3814:	movw	r1, #0
    3818:	mov	r0, r4
    381c:	movt	r1, #0
    3820:	bl	0 <flatcc_builder_create_string_str>
    3824:	cmp	r0, #0
    3828:	beq	3844 <test_scan+0x314>
    382c:	mov	r5, r0
    3830:	mov	r0, r4
    3834:	mov	r1, #3
    3838:	bl	0 <flatcc_builder_table_add_offset>
    383c:	cmp	r0, #0
    3840:	strne	r5, [r0]
    3844:	movw	r1, #0
    3848:	mov	r0, r4
    384c:	mov	r2, #1
    3850:	movt	r1, #0
    3854:	bl	0 <flatcc_builder_check_required>
    3858:	cmp	r0, #0
    385c:	beq	4578 <test_scan+0x1048>
    3860:	mov	r0, r4
    3864:	bl	0 <flatcc_builder_end_table>
    3868:	cmp	r0, #0
    386c:	beq	387c <test_scan+0x34c>
    3870:	mov	r1, r0
    3874:	mov	r0, r4
    3878:	bl	0 <flatcc_builder_offset_vector_push>
    387c:	mov	r0, r4
    3880:	bl	0 <flatcc_builder_end_offset_vector>
    3884:	cmp	r0, #0
    3888:	beq	38a4 <test_scan+0x374>
    388c:	mov	r5, r0
    3890:	mov	r0, r4
    3894:	mov	r1, #11
    3898:	bl	0 <flatcc_builder_table_add_offset>
    389c:	cmp	r0, #0
    38a0:	strne	r5, [r0]
    38a4:	movw	r1, #0
    38a8:	mov	r0, r4
    38ac:	mov	r2, #1
    38b0:	movt	r1, #0
    38b4:	bl	0 <flatcc_builder_check_required>
    38b8:	cmp	r0, #0
    38bc:	beq	4578 <test_scan+0x1048>
    38c0:	mov	r0, r4
    38c4:	bl	0 <flatcc_builder_end_table>
    38c8:	mov	r1, r0
    38cc:	mov	r0, r4
    38d0:	bl	0 <flatcc_builder_end_buffer>
    38d4:	sub	r1, fp, #32
    38d8:	mov	r0, r4
    38dc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    38e0:	cmp	r0, #0
    38e4:	beq	4598 <test_scan+0x1068>
    38e8:	mov	r9, r0
    38ec:	ldr	r0, [r0, #4]
    38f0:	movw	r1, #20301	; 0x4f4d
    38f4:	movt	r1, #21326	; 0x534e
    38f8:	cmp	r0, r1
    38fc:	bne	4598 <test_scan+0x1068>
    3900:	ldr	r1, [r9]
    3904:	mov	r0, r9
    3908:	ldr	r2, [r0, r1]!
    390c:	str	r1, [fp, #-56]	; 0xffffffc8
    3910:	mov	r1, r0
    3914:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    3918:	cmp	r2, #27
    391c:	bls	45b8 <test_scan+0x1088>
    3920:	ldrh	r6, [r1, #26]
    3924:	cmp	r6, #0
    3928:	beq	45b8 <test_scan+0x1088>
    392c:	ldrh	r3, [r1, #14]
    3930:	cmp	r3, #0
    3934:	mov	r2, r3
    3938:	str	r3, [sp, #60]	; 0x3c
    393c:	beq	45dc <test_scan+0x10ac>
    3940:	ldrh	r2, [r1, #24]
    3944:	cmp	r2, #0
    3948:	mov	r1, r2
    394c:	str	r2, [fp, #-52]	; 0xffffffcc
    3950:	beq	45f4 <test_scan+0x10c4>
    3954:	mov	r2, r0
    3958:	ldr	r1, [r2, r6]!
    395c:	ldr	sl, [r2, r1]
    3960:	cmp	sl, #0
    3964:	beq	3bbc <test_scan+0x68c>
    3968:	ldr	r2, [sp, #60]	; 0x3c
    396c:	mov	r3, r0
    3970:	movw	r5, #0
    3974:	mov	r4, #0
    3978:	movt	r5, #0
    397c:	ldr	r2, [r3, r2]!
    3980:	str	r3, [sp, #40]	; 0x28
    3984:	str	r2, [sp, #44]	; 0x2c
    3988:	ldr	r2, [fp, #-52]	; 0xffffffcc
    398c:	ldr	r2, [r0, r2]!
    3990:	add	r0, r0, r2
    3994:	str	r2, [sp, #52]	; 0x34
    3998:	add	r0, r0, #4
    399c:	str	r0, [sp, #48]	; 0x30
    39a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    39a4:	add	r8, r1, r0
    39a8:	add	r0, r8, r6
    39ac:	add	r0, r0, r9
    39b0:	add	r7, r0, #8
    39b4:	str	r0, [sp, #56]	; 0x38
    39b8:	cmp	sl, r4
    39bc:	beq	57c8 <test_scan+0x2298>
    39c0:	ldr	r0, [r7, #-4]
    39c4:	add	r1, r7, r0
    39c8:	ldr	r1, [r1, #-4]
    39cc:	sub	r1, r0, r1
    39d0:	add	r1, r7, r1
    39d4:	ldrh	r2, [r1, #-4]
    39d8:	cmp	r2, #12
    39dc:	bcc	4f3c <test_scan+0x1a0c>
    39e0:	ldrh	r1, [r1, #6]
    39e4:	cmp	r1, #0
    39e8:	beq	4f3c <test_scan+0x1a0c>
    39ec:	add	r2, r0, r1
    39f0:	add	r2, r7, r2
    39f4:	ldr	r2, [r2, #-4]
    39f8:	add	r0, r2, r0
    39fc:	add	r0, r0, r1
    3a00:	mov	r1, r5
    3a04:	add	r0, r7, r0
    3a08:	bl	0 <strcmp>
    3a0c:	cmp	r0, #0
    3a10:	beq	3a28 <test_scan+0x4f8>
    3a14:	add	r4, r4, #1
    3a18:	add	r7, r7, #4
    3a1c:	cmp	r4, sl
    3a20:	bcc	39b8 <test_scan+0x488>
    3a24:	b	3bbc <test_scan+0x68c>
    3a28:	cmp	r4, #1
    3a2c:	bne	3bbc <test_scan+0x68c>
    3a30:	add	r0, r8, sl, lsl #2
    3a34:	movw	r5, #0
    3a38:	str	r8, [sp, #36]	; 0x24
    3a3c:	mov	r4, #0
    3a40:	mov	r7, #0
    3a44:	movt	r5, #0
    3a48:	add	r0, r0, r6
    3a4c:	add	r8, r9, r0
    3a50:	str	r0, [sp, #32]
    3a54:	sub	r0, sl, #1
    3a58:	str	r0, [fp, #-48]	; 0xffffffd0
    3a5c:	rsb	r0, sl, #0
    3a60:	str	r0, [fp, #-44]	; 0xffffffd4
    3a64:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3a68:	cmp	r0, r7
    3a6c:	beq	3be0 <test_scan+0x6b0>
    3a70:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3a74:	add	r0, r0, r7
    3a78:	cmp	sl, r0
    3a7c:	bls	57c8 <test_scan+0x2298>
    3a80:	ldr	r0, [r8, r7, lsl #2]
    3a84:	add	r1, r8, r0
    3a88:	ldr	r1, [r1, r7, lsl #2]
    3a8c:	sub	r1, r0, r1
    3a90:	add	r1, r4, r1
    3a94:	add	r1, r8, r1
    3a98:	ldrh	r2, [r1]
    3a9c:	cmp	r2, #12
    3aa0:	bcc	4f3c <test_scan+0x1a0c>
    3aa4:	ldrh	r1, [r1, #10]
    3aa8:	cmp	r1, #0
    3aac:	beq	4f3c <test_scan+0x1a0c>
    3ab0:	add	r2, r0, r1
    3ab4:	add	r2, r8, r2
    3ab8:	ldr	r2, [r2, r7, lsl #2]
    3abc:	add	r0, r2, r0
    3ac0:	add	r0, r0, r1
    3ac4:	mov	r1, r5
    3ac8:	add	r0, r4, r0
    3acc:	add	r0, r8, r0
    3ad0:	add	r0, r0, #4
    3ad4:	bl	0 <strcmp>
    3ad8:	sub	r4, r4, #4
    3adc:	sub	r7, r7, #1
    3ae0:	cmp	r0, #0
    3ae4:	bne	3a64 <test_scan+0x534>
    3ae8:	rsb	r0, sl, #1
    3aec:	cmp	r0, r7
    3af0:	bne	3be0 <test_scan+0x6b0>
    3af4:	str	r6, [sp, #20]
    3af8:	ldr	r6, [sp, #56]	; 0x38
    3afc:	str	r9, [sp, #28]
    3b00:	movw	r9, #0
    3b04:	mov	r7, #0
    3b08:	str	r0, [sp, #24]
    3b0c:	movt	r9, #0
    3b10:	add	r4, r6, #8
    3b14:	cmp	sl, r7
    3b18:	beq	57c8 <test_scan+0x2298>
    3b1c:	ldr	r0, [r4, #-4]
    3b20:	add	r1, r4, r0
    3b24:	ldr	r1, [r1, #-4]
    3b28:	sub	r1, r0, r1
    3b2c:	add	r1, r4, r1
    3b30:	ldrh	r2, [r1, #-4]
    3b34:	cmp	r2, #12
    3b38:	bcc	4f3c <test_scan+0x1a0c>
    3b3c:	ldrh	r1, [r1, #6]
    3b40:	cmp	r1, #0
    3b44:	beq	4f3c <test_scan+0x1a0c>
    3b48:	add	r2, r0, r1
    3b4c:	add	r2, r4, r2
    3b50:	ldr	r2, [r2, #-4]
    3b54:	add	r0, r2, r0
    3b58:	add	r0, r0, r1
    3b5c:	mov	r1, r9
    3b60:	add	r0, r4, r0
    3b64:	ldr	r5, [r0, #-4]
    3b68:	cmp	r5, #5
    3b6c:	mov	r2, r5
    3b70:	movcs	r2, #5
    3b74:	bl	0 <strncmp>
    3b78:	cmp	r0, #0
    3b7c:	mov	r1, r0
    3b80:	mov	r2, #0
    3b84:	mvneq	r1, #0
    3b88:	cmp	r5, #5
    3b8c:	movwhi	r2, #1
    3b90:	cmp	r0, #0
    3b94:	movne	r2, r1
    3b98:	cmp	r5, #5
    3b9c:	movcc	r2, r1
    3ba0:	cmp	r2, #0
    3ba4:	beq	3bec <test_scan+0x6bc>
    3ba8:	add	r7, r7, #1
    3bac:	add	r4, r4, #4
    3bb0:	cmp	r7, sl
    3bb4:	bcc	3b14 <test_scan+0x5e4>
    3bb8:	b	3e50 <test_scan+0x920>
    3bbc:	movw	r0, #0
    3bc0:	movt	r0, #0
    3bc4:	bl	0 <puts>
    3bc8:	mvn	r5, #0
    3bcc:	mov	r0, r9
    3bd0:	bl	0 <flatcc_builder_aligned_free>
    3bd4:	mov	r0, r5
    3bd8:	sub	sp, fp, #28
    3bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3be0:	movw	r0, #0
    3be4:	movt	r0, #0
    3be8:	b	3bc4 <test_scan+0x694>
    3bec:	cmp	r7, #1
    3bf0:	bne	3e50 <test_scan+0x920>
    3bf4:	movw	r7, #0
    3bf8:	mov	r5, #0
    3bfc:	mov	r9, #0
    3c00:	movt	r7, #0
    3c04:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3c08:	cmp	r0, r9
    3c0c:	beq	3e50 <test_scan+0x920>
    3c10:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3c14:	add	r0, r0, r9
    3c18:	cmp	sl, r0
    3c1c:	bls	57c8 <test_scan+0x2298>
    3c20:	ldr	r0, [r8, r9, lsl #2]
    3c24:	add	r1, r8, r0
    3c28:	ldr	r1, [r1, r9, lsl #2]
    3c2c:	sub	r1, r0, r1
    3c30:	add	r1, r5, r1
    3c34:	add	r1, r8, r1
    3c38:	ldrh	r2, [r1]
    3c3c:	cmp	r2, #12
    3c40:	bcc	4f3c <test_scan+0x1a0c>
    3c44:	ldrh	r1, [r1, #10]
    3c48:	cmp	r1, #0
    3c4c:	beq	4f3c <test_scan+0x1a0c>
    3c50:	add	r2, r0, r1
    3c54:	add	r2, r8, r2
    3c58:	ldr	r2, [r2, r9, lsl #2]
    3c5c:	add	r0, r2, r0
    3c60:	add	r0, r0, r1
    3c64:	add	r1, r8, r0
    3c68:	add	r0, r5, r0
    3c6c:	ldr	r4, [r1, r9, lsl #2]
    3c70:	add	r0, r8, r0
    3c74:	mov	r1, r7
    3c78:	add	r0, r0, #4
    3c7c:	cmp	r4, #5
    3c80:	mov	r2, r4
    3c84:	movcs	r2, #5
    3c88:	bl	0 <strncmp>
    3c8c:	cmp	r0, #0
    3c90:	mov	r1, r0
    3c94:	mov	r2, #0
    3c98:	sub	r5, r5, #4
    3c9c:	sub	r9, r9, #1
    3ca0:	mvneq	r1, #0
    3ca4:	cmp	r4, #5
    3ca8:	movwhi	r2, #1
    3cac:	cmp	r0, #0
    3cb0:	movne	r2, r1
    3cb4:	cmp	r4, #5
    3cb8:	movcc	r2, r1
    3cbc:	cmp	r2, #0
    3cc0:	bne	3c04 <test_scan+0x6d4>
    3cc4:	ldr	r0, [sp, #24]
    3cc8:	cmp	r0, r9
    3ccc:	bne	3e50 <test_scan+0x920>
    3cd0:	ldr	r9, [sp, #28]
    3cd4:	cmp	sl, #3
    3cd8:	bcc	3d54 <test_scan+0x824>
    3cdc:	movw	r5, #0
    3ce0:	add	r4, r6, #12
    3ce4:	mov	r7, #2
    3ce8:	movt	r5, #0
    3cec:	cmp	sl, r7
    3cf0:	bls	57c8 <test_scan+0x2298>
    3cf4:	ldr	r0, [r4]
    3cf8:	ldr	r1, [r4, r0]
    3cfc:	sub	r1, r0, r1
    3d00:	add	r1, r4, r1
    3d04:	ldrh	r2, [r1]
    3d08:	cmp	r2, #12
    3d0c:	bcc	4f3c <test_scan+0x1a0c>
    3d10:	ldrh	r1, [r1, #10]
    3d14:	cmp	r1, #0
    3d18:	beq	4f3c <test_scan+0x1a0c>
    3d1c:	add	r2, r0, r1
    3d20:	ldr	r2, [r4, r2]
    3d24:	add	r0, r2, r0
    3d28:	add	r0, r0, r1
    3d2c:	mov	r1, r5
    3d30:	add	r0, r4, r0
    3d34:	add	r0, r0, #4
    3d38:	bl	0 <strcmp>
    3d3c:	cmp	r0, #0
    3d40:	beq	3e70 <test_scan+0x940>
    3d44:	add	r7, r7, #1
    3d48:	add	r4, r4, #4
    3d4c:	cmp	r7, sl
    3d50:	bcc	3cec <test_scan+0x7bc>
    3d54:	movw	r5, #0
    3d58:	add	r4, r6, #8
    3d5c:	mov	r7, #0
    3d60:	movt	r5, #0
    3d64:	cmp	sl, r7
    3d68:	beq	57c8 <test_scan+0x2298>
    3d6c:	ldr	r0, [r4, #-4]
    3d70:	add	r1, r4, r0
    3d74:	ldr	r1, [r1, #-4]
    3d78:	sub	r1, r0, r1
    3d7c:	add	r1, r4, r1
    3d80:	ldrh	r2, [r1, #-4]
    3d84:	cmp	r2, #12
    3d88:	bcc	4f3c <test_scan+0x1a0c>
    3d8c:	ldrh	r1, [r1, #6]
    3d90:	cmp	r1, #0
    3d94:	beq	4f3c <test_scan+0x1a0c>
    3d98:	add	r2, r0, r1
    3d9c:	add	r2, r4, r2
    3da0:	ldr	r2, [r2, #-4]
    3da4:	add	r0, r2, r0
    3da8:	add	r0, r0, r1
    3dac:	mov	r1, r5
    3db0:	add	r0, r4, r0
    3db4:	bl	0 <strcmp>
    3db8:	cmp	r0, #0
    3dbc:	beq	3e64 <test_scan+0x934>
    3dc0:	add	r7, r7, #1
    3dc4:	add	r4, r4, #4
    3dc8:	cmp	r7, sl
    3dcc:	bcc	3d64 <test_scan+0x834>
    3dd0:	movw	r5, #0
    3dd4:	add	r7, r6, #8
    3dd8:	mov	r4, #0
    3ddc:	movt	r5, #0
    3de0:	cmp	sl, r4
    3de4:	beq	57c8 <test_scan+0x2298>
    3de8:	ldr	r0, [r7, #-4]
    3dec:	add	r1, r7, r0
    3df0:	ldr	r1, [r1, #-4]
    3df4:	sub	r1, r0, r1
    3df8:	add	r1, r7, r1
    3dfc:	ldrh	r2, [r1, #-4]
    3e00:	cmp	r2, #12
    3e04:	bcc	4f3c <test_scan+0x1a0c>
    3e08:	ldrh	r1, [r1, #6]
    3e0c:	cmp	r1, #0
    3e10:	beq	4f3c <test_scan+0x1a0c>
    3e14:	add	r2, r0, r1
    3e18:	add	r2, r7, r2
    3e1c:	ldr	r2, [r2, #-4]
    3e20:	add	r0, r2, r0
    3e24:	add	r0, r0, r1
    3e28:	mov	r1, r5
    3e2c:	add	r0, r7, r0
    3e30:	bl	0 <strcmp>
    3e34:	cmp	r0, #0
    3e38:	beq	3e7c <test_scan+0x94c>
    3e3c:	add	r4, r4, #1
    3e40:	add	r7, r7, #4
    3e44:	cmp	r4, sl
    3e48:	bcc	3de0 <test_scan+0x8b0>
    3e4c:	b	3e84 <test_scan+0x954>
    3e50:	movw	r0, #0
    3e54:	movt	r0, #0
    3e58:	bl	0 <puts>
    3e5c:	ldr	r9, [sp, #28]
    3e60:	b	3bc8 <test_scan+0x698>
    3e64:	movw	r0, #0
    3e68:	movt	r0, #0
    3e6c:	b	3bc4 <test_scan+0x694>
    3e70:	movw	r0, #0
    3e74:	movt	r0, #0
    3e78:	b	3bc4 <test_scan+0x694>
    3e7c:	cmp	r4, #0
    3e80:	beq	3e90 <test_scan+0x960>
    3e84:	movw	r0, #0
    3e88:	movt	r0, #0
    3e8c:	b	3bc4 <test_scan+0x694>
    3e90:	movw	r5, #0
    3e94:	add	r7, r6, #8
    3e98:	mov	r4, #0
    3e9c:	movt	r5, #0
    3ea0:	cmp	sl, r4
    3ea4:	beq	57c8 <test_scan+0x2298>
    3ea8:	ldr	r0, [r7, #-4]
    3eac:	add	r1, r7, r0
    3eb0:	ldr	r1, [r1, #-4]
    3eb4:	sub	r1, r0, r1
    3eb8:	add	r1, r7, r1
    3ebc:	ldrh	r2, [r1, #-4]
    3ec0:	cmp	r2, #12
    3ec4:	bcc	4f3c <test_scan+0x1a0c>
    3ec8:	ldrh	r1, [r1, #6]
    3ecc:	cmp	r1, #0
    3ed0:	beq	4f3c <test_scan+0x1a0c>
    3ed4:	add	r2, r0, r1
    3ed8:	add	r2, r7, r2
    3edc:	ldr	r2, [r2, #-4]
    3ee0:	add	r0, r2, r0
    3ee4:	add	r0, r0, r1
    3ee8:	mov	r1, r5
    3eec:	add	r0, r7, r0
    3ef0:	bl	0 <strcmp>
    3ef4:	cmp	r0, #0
    3ef8:	beq	3f10 <test_scan+0x9e0>
    3efc:	add	r4, r4, #1
    3f00:	add	r7, r7, #4
    3f04:	cmp	r4, sl
    3f08:	bcc	3ea0 <test_scan+0x970>
    3f0c:	b	41c0 <test_scan+0xc90>
    3f10:	cmp	r4, #2
    3f14:	bne	41c0 <test_scan+0xc90>
    3f18:	movw	r5, #0
    3f1c:	mov	r4, #0
    3f20:	mov	r7, #0
    3f24:	movt	r5, #0
    3f28:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3f2c:	cmp	r0, r7
    3f30:	beq	41cc <test_scan+0xc9c>
    3f34:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3f38:	add	r0, r0, r7
    3f3c:	cmp	sl, r0
    3f40:	bls	57c8 <test_scan+0x2298>
    3f44:	ldr	r0, [r8, r7, lsl #2]
    3f48:	add	r1, r8, r0
    3f4c:	ldr	r1, [r1, r7, lsl #2]
    3f50:	sub	r1, r0, r1
    3f54:	add	r1, r4, r1
    3f58:	add	r1, r8, r1
    3f5c:	ldrh	r2, [r1]
    3f60:	cmp	r2, #12
    3f64:	bcc	4f3c <test_scan+0x1a0c>
    3f68:	ldrh	r1, [r1, #10]
    3f6c:	cmp	r1, #0
    3f70:	beq	4f3c <test_scan+0x1a0c>
    3f74:	add	r2, r0, r1
    3f78:	add	r2, r8, r2
    3f7c:	ldr	r2, [r2, r7, lsl #2]
    3f80:	add	r0, r2, r0
    3f84:	add	r0, r0, r1
    3f88:	mov	r1, r5
    3f8c:	add	r0, r4, r0
    3f90:	add	r0, r8, r0
    3f94:	add	r0, r0, #4
    3f98:	bl	0 <strcmp>
    3f9c:	sub	r4, r4, #4
    3fa0:	sub	r7, r7, #1
    3fa4:	cmp	r0, #0
    3fa8:	bne	3f28 <test_scan+0x9f8>
    3fac:	rsb	r6, sl, #4
    3fb0:	cmp	r6, r7
    3fb4:	bne	41cc <test_scan+0xc9c>
    3fb8:	movw	r7, #0
    3fbc:	mov	r9, #0
    3fc0:	mov	r5, #0
    3fc4:	movt	r7, #0
    3fc8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3fcc:	cmp	r0, r5
    3fd0:	beq	41b4 <test_scan+0xc84>
    3fd4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3fd8:	add	r0, r0, r5
    3fdc:	cmp	sl, r0
    3fe0:	bls	57c8 <test_scan+0x2298>
    3fe4:	ldr	r0, [r8, r5, lsl #2]
    3fe8:	add	r1, r8, r0
    3fec:	ldr	r1, [r1, r5, lsl #2]
    3ff0:	sub	r1, r0, r1
    3ff4:	add	r1, r9, r1
    3ff8:	add	r1, r8, r1
    3ffc:	ldrh	r2, [r1]
    4000:	cmp	r2, #12
    4004:	bcc	4f3c <test_scan+0x1a0c>
    4008:	ldrh	r1, [r1, #10]
    400c:	cmp	r1, #0
    4010:	beq	4f3c <test_scan+0x1a0c>
    4014:	add	r2, r0, r1
    4018:	add	r2, r8, r2
    401c:	ldr	r2, [r2, r5, lsl #2]
    4020:	add	r0, r2, r0
    4024:	add	r0, r0, r1
    4028:	add	r1, r8, r0
    402c:	add	r0, r9, r0
    4030:	ldr	r4, [r1, r5, lsl #2]
    4034:	add	r0, r8, r0
    4038:	mov	r1, r7
    403c:	add	r0, r0, #4
    4040:	cmp	r4, #8
    4044:	mov	r2, r4
    4048:	movcs	r2, #8
    404c:	bl	0 <strncmp>
    4050:	cmp	r0, #0
    4054:	mov	r1, r0
    4058:	mov	r2, #0
    405c:	sub	r9, r9, #4
    4060:	sub	r5, r5, #1
    4064:	mvneq	r1, #0
    4068:	cmp	r4, #8
    406c:	movwhi	r2, #1
    4070:	cmp	r0, #0
    4074:	movne	r2, r1
    4078:	cmp	r4, #8
    407c:	movcc	r2, r1
    4080:	cmp	r2, #0
    4084:	bne	3fc8 <test_scan+0xa98>
    4088:	cmp	r6, r5
    408c:	bne	41b4 <test_scan+0xc84>
    4090:	ldr	r0, [sp, #36]	; 0x24
    4094:	cmp	sl, #3
    4098:	ldr	r1, [sp, #20]
    409c:	mov	r2, sl
    40a0:	movw	r6, #0
    40a4:	mov	r9, #0
    40a8:	mov	r5, #0
    40ac:	movcs	r2, #3
    40b0:	movt	r6, #0
    40b4:	str	r2, [sp, #24]
    40b8:	add	r0, r0, r2, lsl #2
    40bc:	add	r1, r0, r1
    40c0:	ldr	r0, [sp, #28]
    40c4:	str	r1, [sp, #12]
    40c8:	add	r0, r0, r1
    40cc:	str	r0, [fp, #-44]	; 0xffffffd4
    40d0:	sub	r0, r2, #1
    40d4:	str	r0, [sp, #16]
    40d8:	ldr	r0, [sp, #24]
    40dc:	add	r0, r0, r5
    40e0:	cmp	r0, #2
    40e4:	bcc	41b4 <test_scan+0xc84>
    40e8:	ldr	r0, [sp, #16]
    40ec:	add	r0, r0, r5
    40f0:	cmp	sl, r0
    40f4:	bls	57c8 <test_scan+0x2298>
    40f8:	ldr	r2, [fp, #-44]	; 0xffffffd4
    40fc:	ldr	r0, [r2, r5, lsl #2]
    4100:	add	r1, r2, r0
    4104:	ldr	r1, [r1, r5, lsl #2]
    4108:	sub	r1, r0, r1
    410c:	add	r1, r9, r1
    4110:	add	r1, r2, r1
    4114:	ldrh	r2, [r1]
    4118:	cmp	r2, #12
    411c:	bcc	4f3c <test_scan+0x1a0c>
    4120:	ldrh	r1, [r1, #10]
    4124:	cmp	r1, #0
    4128:	beq	4f3c <test_scan+0x1a0c>
    412c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    4130:	add	r2, r0, r1
    4134:	add	r2, r3, r2
    4138:	ldr	r2, [r2, r5, lsl #2]
    413c:	add	r0, r2, r0
    4140:	add	r0, r0, r1
    4144:	add	r1, r3, r0
    4148:	add	r0, r9, r0
    414c:	ldr	r4, [r1, r5, lsl #2]
    4150:	add	r0, r3, r0
    4154:	mov	r1, r6
    4158:	add	r0, r0, #4
    415c:	cmp	r4, #8
    4160:	mov	r2, r4
    4164:	movcs	r2, #8
    4168:	bl	0 <strncmp>
    416c:	cmp	r0, #0
    4170:	mov	r1, r0
    4174:	mov	r2, #0
    4178:	sub	r9, r9, #4
    417c:	sub	r5, r5, #1
    4180:	mvneq	r1, #0
    4184:	cmp	r4, #8
    4188:	movwhi	r2, #1
    418c:	cmp	r0, #0
    4190:	movne	r2, r1
    4194:	cmp	r4, #8
    4198:	movcc	r2, r1
    419c:	cmp	r2, #0
    41a0:	bne	40d8 <test_scan+0xba8>
    41a4:	ldr	r0, [sp, #24]
    41a8:	add	r0, r0, r5
    41ac:	cmp	r0, #2
    41b0:	beq	41d8 <test_scan+0xca8>
    41b4:	movw	r0, #0
    41b8:	movt	r0, #0
    41bc:	b	3e58 <test_scan+0x928>
    41c0:	movw	r0, #0
    41c4:	movt	r0, #0
    41c8:	b	3bc4 <test_scan+0x694>
    41cc:	movw	r0, #0
    41d0:	movt	r0, #0
    41d4:	b	3e58 <test_scan+0x928>
    41d8:	cmp	sl, #3
    41dc:	bcc	43b0 <test_scan+0xe80>
    41e0:	ldr	r0, [sp, #56]	; 0x38
    41e4:	movw	r5, #0
    41e8:	mov	r4, #2
    41ec:	movt	r5, #0
    41f0:	add	r7, r0, #12
    41f4:	cmp	sl, r4
    41f8:	bls	57c8 <test_scan+0x2298>
    41fc:	ldr	r0, [r7]
    4200:	ldr	r1, [r7, r0]
    4204:	sub	r1, r0, r1
    4208:	add	r1, r7, r1
    420c:	ldrh	r2, [r1]
    4210:	cmp	r2, #12
    4214:	bcc	4f3c <test_scan+0x1a0c>
    4218:	ldrh	r1, [r1, #10]
    421c:	cmp	r1, #0
    4220:	beq	4f3c <test_scan+0x1a0c>
    4224:	add	r2, r0, r1
    4228:	ldr	r2, [r7, r2]
    422c:	add	r0, r2, r0
    4230:	add	r0, r0, r1
    4234:	mov	r1, r5
    4238:	add	r0, r7, r0
    423c:	add	r0, r0, #4
    4240:	bl	0 <strcmp>
    4244:	cmp	r0, #0
    4248:	beq	4260 <test_scan+0xd30>
    424c:	add	r4, r4, #1
    4250:	add	r7, r7, #4
    4254:	cmp	r4, sl
    4258:	bcc	41f4 <test_scan+0xcc4>
    425c:	b	43b0 <test_scan+0xe80>
    4260:	cmp	r4, #2
    4264:	bne	43b0 <test_scan+0xe80>
    4268:	ldr	r0, [sp, #56]	; 0x38
    426c:	movw	r6, #0
    4270:	mov	r7, #2
    4274:	movt	r6, #0
    4278:	add	r4, r0, #12
    427c:	cmp	sl, r7
    4280:	bls	57c8 <test_scan+0x2298>
    4284:	ldr	r0, [r4]
    4288:	ldr	r1, [r4, r0]
    428c:	sub	r1, r0, r1
    4290:	add	r1, r4, r1
    4294:	ldrh	r2, [r1]
    4298:	cmp	r2, #12
    429c:	bcc	4f3c <test_scan+0x1a0c>
    42a0:	ldrh	r1, [r1, #10]
    42a4:	cmp	r1, #0
    42a8:	beq	4f3c <test_scan+0x1a0c>
    42ac:	add	r2, r0, r1
    42b0:	ldr	r2, [r4, r2]
    42b4:	add	r0, r2, r0
    42b8:	add	r0, r0, r1
    42bc:	mov	r1, r4
    42c0:	ldr	r5, [r1, r0]!
    42c4:	add	r0, r1, #4
    42c8:	mov	r1, r6
    42cc:	cmp	r5, #8
    42d0:	mov	r2, r5
    42d4:	movcs	r2, #8
    42d8:	bl	0 <strncmp>
    42dc:	cmp	r0, #0
    42e0:	mov	r1, r0
    42e4:	mov	r2, #0
    42e8:	mvneq	r1, #0
    42ec:	cmp	r5, #8
    42f0:	movwhi	r2, #1
    42f4:	cmp	r0, #0
    42f8:	movne	r2, r1
    42fc:	cmp	r5, #8
    4300:	movcc	r2, r1
    4304:	cmp	r2, #0
    4308:	beq	4320 <test_scan+0xdf0>
    430c:	add	r7, r7, #1
    4310:	add	r4, r4, #4
    4314:	cmp	r7, sl
    4318:	bcc	427c <test_scan+0xd4c>
    431c:	b	43b0 <test_scan+0xe80>
    4320:	cmp	r7, #2
    4324:	bne	43b0 <test_scan+0xe80>
    4328:	cmp	sl, #4
    432c:	bcc	456c <test_scan+0x103c>
    4330:	ldr	r0, [sp, #56]	; 0x38
    4334:	movw	r5, #0
    4338:	mov	r4, #3
    433c:	movt	r5, #0
    4340:	add	r7, r0, #16
    4344:	cmp	sl, r4
    4348:	bls	57c8 <test_scan+0x2298>
    434c:	ldr	r0, [r7]
    4350:	ldr	r1, [r7, r0]
    4354:	sub	r1, r0, r1
    4358:	add	r1, r7, r1
    435c:	ldrh	r2, [r1]
    4360:	cmp	r2, #12
    4364:	bcc	4f3c <test_scan+0x1a0c>
    4368:	ldrh	r1, [r1, #10]
    436c:	cmp	r1, #0
    4370:	beq	4f3c <test_scan+0x1a0c>
    4374:	add	r2, r0, r1
    4378:	ldr	r2, [r7, r2]
    437c:	add	r0, r2, r0
    4380:	add	r0, r0, r1
    4384:	mov	r1, r5
    4388:	add	r0, r7, r0
    438c:	add	r0, r0, #4
    4390:	bl	0 <strcmp>
    4394:	cmp	r0, #0
    4398:	beq	43bc <test_scan+0xe8c>
    439c:	add	r4, r4, #1
    43a0:	add	r7, r7, #4
    43a4:	cmp	r4, sl
    43a8:	bcc	4344 <test_scan+0xe14>
    43ac:	b	456c <test_scan+0x103c>
    43b0:	movw	r0, #0
    43b4:	movt	r0, #0
    43b8:	b	3e58 <test_scan+0x928>
    43bc:	cmp	r4, #4
    43c0:	bne	456c <test_scan+0x103c>
    43c4:	cmp	sl, #2
    43c8:	bcc	46b0 <test_scan+0x1180>
    43cc:	ldr	r0, [sp, #56]	; 0x38
    43d0:	movw	r5, #0
    43d4:	mov	r7, #1
    43d8:	movt	r5, #0
    43dc:	add	r4, r0, #12
    43e0:	cmp	sl, r7
    43e4:	bls	57c8 <test_scan+0x2298>
    43e8:	ldr	r0, [r4, #-4]
    43ec:	add	r1, r4, r0
    43f0:	ldr	r1, [r1, #-4]
    43f4:	sub	r1, r0, r1
    43f8:	add	r1, r4, r1
    43fc:	ldrh	r2, [r1, #-4]
    4400:	cmp	r2, #12
    4404:	bcc	4f3c <test_scan+0x1a0c>
    4408:	ldrh	r1, [r1, #6]
    440c:	cmp	r1, #0
    4410:	beq	4f3c <test_scan+0x1a0c>
    4414:	add	r2, r0, r1
    4418:	add	r2, r4, r2
    441c:	ldr	r2, [r2, #-4]
    4420:	add	r0, r2, r0
    4424:	add	r0, r0, r1
    4428:	mov	r1, r5
    442c:	add	r0, r4, r0
    4430:	bl	0 <strcmp>
    4434:	cmp	r0, #0
    4438:	beq	45d0 <test_scan+0x10a0>
    443c:	ldr	r0, [sp, #24]
    4440:	add	r7, r7, #1
    4444:	add	r4, r4, #4
    4448:	cmp	r7, r0
    444c:	bcc	43e0 <test_scan+0xeb0>
    4450:	cmp	sl, #2
    4454:	bcc	46b0 <test_scan+0x1180>
    4458:	ldr	r0, [sp, #56]	; 0x38
    445c:	movw	r5, #0
    4460:	mov	r7, #1
    4464:	movt	r5, #0
    4468:	add	r4, r0, #12
    446c:	cmp	sl, r7
    4470:	bls	57c8 <test_scan+0x2298>
    4474:	ldr	r0, [r4, #-4]
    4478:	add	r1, r4, r0
    447c:	ldr	r1, [r1, #-4]
    4480:	sub	r1, r0, r1
    4484:	add	r1, r4, r1
    4488:	ldrh	r2, [r1, #-4]
    448c:	cmp	r2, #12
    4490:	bcc	4f3c <test_scan+0x1a0c>
    4494:	ldrh	r1, [r1, #6]
    4498:	cmp	r1, #0
    449c:	beq	4f3c <test_scan+0x1a0c>
    44a0:	add	r2, r0, r1
    44a4:	add	r2, r4, r2
    44a8:	ldr	r2, [r2, #-4]
    44ac:	add	r0, r2, r0
    44b0:	add	r0, r0, r1
    44b4:	mov	r1, r5
    44b8:	add	r0, r4, r0
    44bc:	bl	0 <strcmp>
    44c0:	cmp	r0, #0
    44c4:	beq	4614 <test_scan+0x10e4>
    44c8:	ldr	r0, [sp, #24]
    44cc:	add	r7, r7, #1
    44d0:	add	r4, r4, #4
    44d4:	cmp	r7, r0
    44d8:	bcc	446c <test_scan+0xf3c>
    44dc:	cmp	sl, #2
    44e0:	bcc	46b0 <test_scan+0x1180>
    44e4:	ldr	r0, [sp, #56]	; 0x38
    44e8:	movw	r5, #0
    44ec:	mov	r4, #1
    44f0:	movt	r5, #0
    44f4:	add	r7, r0, #12
    44f8:	cmp	sl, r4
    44fc:	bls	57c8 <test_scan+0x2298>
    4500:	ldr	r0, [r7, #-4]
    4504:	add	r1, r7, r0
    4508:	ldr	r1, [r1, #-4]
    450c:	sub	r1, r0, r1
    4510:	add	r1, r7, r1
    4514:	ldrh	r2, [r1, #-4]
    4518:	cmp	r2, #12
    451c:	bcc	4f3c <test_scan+0x1a0c>
    4520:	ldrh	r1, [r1, #6]
    4524:	cmp	r1, #0
    4528:	beq	4f3c <test_scan+0x1a0c>
    452c:	add	r2, r0, r1
    4530:	add	r2, r7, r2
    4534:	ldr	r2, [r2, #-4]
    4538:	add	r0, r2, r0
    453c:	add	r0, r0, r1
    4540:	mov	r1, r5
    4544:	add	r0, r7, r0
    4548:	bl	0 <strcmp>
    454c:	cmp	r0, #0
    4550:	beq	4620 <test_scan+0x10f0>
    4554:	ldr	r0, [sp, #24]
    4558:	add	r4, r4, #1
    455c:	add	r7, r7, #4
    4560:	cmp	r4, r0
    4564:	bcc	44f8 <test_scan+0xfc8>
    4568:	b	46b0 <test_scan+0x1180>
    456c:	movw	r0, #0
    4570:	movt	r0, #0
    4574:	b	3e58 <test_scan+0x928>
    4578:	movw	r0, #0
    457c:	movw	r1, #0
    4580:	movw	r3, #0
    4584:	mov	r2, #235	; 0xeb
    4588:	movt	r0, #0
    458c:	movt	r1, #0
    4590:	movt	r3, #0
    4594:	bl	0 <__assert_fail>
    4598:	movw	r0, #0
    459c:	movw	r1, #0
    45a0:	movw	r3, #0
    45a4:	movw	r2, #711	; 0x2c7
    45a8:	movt	r0, #0
    45ac:	movt	r1, #0
    45b0:	movt	r3, #0
    45b4:	bl	0 <__assert_fail>
    45b8:	movw	r0, #0
    45bc:	movw	r1, #0
    45c0:	movw	r3, #0
    45c4:	movw	r2, #1305	; 0x519
    45c8:	movt	r0, #0
    45cc:	b	4608 <test_scan+0x10d8>
    45d0:	movw	r0, #0
    45d4:	movt	r0, #0
    45d8:	b	3e58 <test_scan+0x928>
    45dc:	movw	r0, #0
    45e0:	movw	r1, #0
    45e4:	movw	r3, #0
    45e8:	movw	r2, #1307	; 0x51b
    45ec:	movt	r0, #0
    45f0:	b	4608 <test_scan+0x10d8>
    45f4:	movw	r0, #0
    45f8:	movw	r1, #0
    45fc:	movw	r3, #0
    4600:	movw	r2, #1309	; 0x51d
    4604:	movt	r0, #0
    4608:	movt	r1, #0
    460c:	movt	r3, #0
    4610:	bl	0 <__assert_fail>
    4614:	movw	r0, #0
    4618:	movt	r0, #0
    461c:	b	3e58 <test_scan+0x928>
    4620:	cmp	r4, #1
    4624:	bne	46b0 <test_scan+0x1180>
    4628:	ldr	r0, [sp, #56]	; 0x38
    462c:	movw	r5, #0
    4630:	mov	r4, #1
    4634:	movt	r5, #0
    4638:	add	r7, r0, #12
    463c:	cmp	sl, r4
    4640:	bls	57c8 <test_scan+0x2298>
    4644:	ldr	r0, [r7, #-4]
    4648:	add	r1, r7, r0
    464c:	ldr	r1, [r1, #-4]
    4650:	sub	r1, r0, r1
    4654:	add	r1, r7, r1
    4658:	ldrh	r2, [r1, #-4]
    465c:	cmp	r2, #12
    4660:	bcc	4f3c <test_scan+0x1a0c>
    4664:	ldrh	r1, [r1, #6]
    4668:	cmp	r1, #0
    466c:	beq	4f3c <test_scan+0x1a0c>
    4670:	add	r2, r0, r1
    4674:	add	r2, r7, r2
    4678:	ldr	r2, [r2, #-4]
    467c:	add	r0, r2, r0
    4680:	add	r0, r0, r1
    4684:	mov	r1, r5
    4688:	add	r0, r7, r0
    468c:	bl	0 <strcmp>
    4690:	cmp	r0, #0
    4694:	beq	46bc <test_scan+0x118c>
    4698:	ldr	r0, [sp, #24]
    469c:	add	r4, r4, #1
    46a0:	add	r7, r7, #4
    46a4:	cmp	r4, r0
    46a8:	bcc	463c <test_scan+0x110c>
    46ac:	b	47d0 <test_scan+0x12a0>
    46b0:	movw	r0, #0
    46b4:	movt	r0, #0
    46b8:	b	3e58 <test_scan+0x928>
    46bc:	cmp	r4, #2
    46c0:	bne	47d0 <test_scan+0x12a0>
    46c4:	ldr	r0, [sp, #56]	; 0x38
    46c8:	movw	r5, #0
    46cc:	mov	r7, #1
    46d0:	movt	r5, #0
    46d4:	add	r4, r0, #12
    46d8:	cmp	sl, r7
    46dc:	bls	57c8 <test_scan+0x2298>
    46e0:	ldr	r0, [r4, #-4]
    46e4:	add	r1, r4, r0
    46e8:	ldr	r1, [r1, #-4]
    46ec:	sub	r1, r0, r1
    46f0:	add	r1, r4, r1
    46f4:	ldrh	r2, [r1, #-4]
    46f8:	cmp	r2, #12
    46fc:	bcc	4f3c <test_scan+0x1a0c>
    4700:	ldrh	r1, [r1, #6]
    4704:	cmp	r1, #0
    4708:	beq	4f3c <test_scan+0x1a0c>
    470c:	add	r2, r0, r1
    4710:	add	r2, r4, r2
    4714:	ldr	r2, [r2, #-4]
    4718:	add	r0, r2, r0
    471c:	add	r0, r0, r1
    4720:	mov	r1, r5
    4724:	add	r0, r4, r0
    4728:	bl	0 <strcmp>
    472c:	cmp	r0, #0
    4730:	beq	47dc <test_scan+0x12ac>
    4734:	ldr	r0, [sp, #24]
    4738:	add	r7, r7, #1
    473c:	add	r4, r4, #4
    4740:	cmp	r7, r0
    4744:	bcc	46d8 <test_scan+0x11a8>
    4748:	ldr	r4, [sp, #24]
    474c:	movw	r5, #0
    4750:	movt	r5, #0
    4754:	subs	r4, r4, #1
    4758:	bls	47e8 <test_scan+0x12b8>
    475c:	cmp	sl, r4
    4760:	bls	57c8 <test_scan+0x2298>
    4764:	ldr	r2, [fp, #-44]	; 0xffffffd4
    4768:	ldr	r0, [r2]
    476c:	ldr	r1, [r2, r0]
    4770:	sub	r1, r0, r1
    4774:	add	r1, r2, r1
    4778:	ldrh	r2, [r1]
    477c:	cmp	r2, #12
    4780:	bcc	4f3c <test_scan+0x1a0c>
    4784:	ldrh	r1, [r1, #10]
    4788:	cmp	r1, #0
    478c:	beq	4f3c <test_scan+0x1a0c>
    4790:	ldr	r6, [fp, #-44]	; 0xffffffd4
    4794:	add	r2, r0, r1
    4798:	ldr	r2, [r6, r2]
    479c:	add	r0, r2, r0
    47a0:	add	r0, r0, r1
    47a4:	mov	r1, r5
    47a8:	add	r0, r6, r0
    47ac:	add	r0, r0, #4
    47b0:	bl	0 <strcmp>
    47b4:	sub	r6, r6, #4
    47b8:	cmp	r0, #0
    47bc:	str	r6, [fp, #-44]	; 0xffffffd4
    47c0:	bne	4754 <test_scan+0x1224>
    47c4:	movw	r0, #0
    47c8:	movt	r0, #0
    47cc:	b	3e58 <test_scan+0x928>
    47d0:	movw	r0, #0
    47d4:	movt	r0, #0
    47d8:	b	3e58 <test_scan+0x928>
    47dc:	movw	r0, #0
    47e0:	movt	r0, #0
    47e4:	b	3e58 <test_scan+0x928>
    47e8:	ldr	r0, [sp, #28]
    47ec:	ldr	r1, [sp, #12]
    47f0:	ldr	r7, [sp, #24]
    47f4:	movw	r5, #0
    47f8:	movt	r5, #0
    47fc:	add	r4, r0, r1
    4800:	subs	r7, r7, #1
    4804:	bls	4870 <test_scan+0x1340>
    4808:	cmp	sl, r7
    480c:	bls	57c8 <test_scan+0x2298>
    4810:	ldr	r0, [r4]
    4814:	ldr	r1, [r4, r0]
    4818:	sub	r1, r0, r1
    481c:	add	r1, r4, r1
    4820:	ldrh	r2, [r1]
    4824:	cmp	r2, #12
    4828:	bcc	4f3c <test_scan+0x1a0c>
    482c:	ldrh	r1, [r1, #10]
    4830:	cmp	r1, #0
    4834:	beq	4f3c <test_scan+0x1a0c>
    4838:	add	r2, r0, r1
    483c:	ldr	r2, [r4, r2]
    4840:	add	r0, r2, r0
    4844:	add	r0, r0, r1
    4848:	mov	r1, r5
    484c:	add	r0, r4, r0
    4850:	add	r0, r0, #4
    4854:	bl	0 <strcmp>
    4858:	sub	r4, r4, #4
    485c:	cmp	r0, #0
    4860:	bne	4800 <test_scan+0x12d0>
    4864:	movw	r0, #0
    4868:	movt	r0, #0
    486c:	b	3e58 <test_scan+0x928>
    4870:	ldr	r0, [sp, #28]
    4874:	ldr	r1, [sp, #12]
    4878:	movw	r6, #0
    487c:	mov	r4, #0
    4880:	mov	r7, #0
    4884:	movt	r6, #0
    4888:	add	r5, r0, r1
    488c:	ldr	r0, [sp, #24]
    4890:	add	r0, r0, r7
    4894:	cmp	r0, #2
    4898:	bcc	4924 <test_scan+0x13f4>
    489c:	ldr	r0, [sp, #16]
    48a0:	add	r0, r0, r7
    48a4:	cmp	sl, r0
    48a8:	bls	57c8 <test_scan+0x2298>
    48ac:	ldr	r0, [r5, r7, lsl #2]
    48b0:	add	r1, r5, r0
    48b4:	ldr	r1, [r1, r7, lsl #2]
    48b8:	sub	r1, r0, r1
    48bc:	add	r1, r4, r1
    48c0:	add	r1, r5, r1
    48c4:	ldrh	r2, [r1]
    48c8:	cmp	r2, #12
    48cc:	bcc	4f3c <test_scan+0x1a0c>
    48d0:	ldrh	r1, [r1, #10]
    48d4:	cmp	r1, #0
    48d8:	beq	4f3c <test_scan+0x1a0c>
    48dc:	add	r2, r0, r1
    48e0:	add	r2, r5, r2
    48e4:	ldr	r2, [r2, r7, lsl #2]
    48e8:	add	r0, r2, r0
    48ec:	add	r0, r0, r1
    48f0:	mov	r1, r6
    48f4:	add	r0, r4, r0
    48f8:	add	r0, r5, r0
    48fc:	add	r0, r0, #4
    4900:	bl	0 <strcmp>
    4904:	sub	r4, r4, #4
    4908:	sub	r7, r7, #1
    490c:	cmp	r0, #0
    4910:	bne	488c <test_scan+0x135c>
    4914:	ldr	r0, [sp, #24]
    4918:	add	r0, r0, r7
    491c:	cmp	r0, #1
    4920:	beq	4930 <test_scan+0x1400>
    4924:	movw	r0, #0
    4928:	movt	r0, #0
    492c:	b	3e58 <test_scan+0x928>
    4930:	movw	r6, #0
    4934:	mov	r4, #0
    4938:	mov	r7, #0
    493c:	movt	r6, #0
    4940:	ldr	r0, [sp, #24]
    4944:	add	r0, r0, r7
    4948:	cmp	r0, #2
    494c:	bcc	49d8 <test_scan+0x14a8>
    4950:	ldr	r0, [sp, #16]
    4954:	add	r0, r0, r7
    4958:	cmp	sl, r0
    495c:	bls	57c8 <test_scan+0x2298>
    4960:	ldr	r0, [r5, r7, lsl #2]
    4964:	add	r1, r5, r0
    4968:	ldr	r1, [r1, r7, lsl #2]
    496c:	sub	r1, r0, r1
    4970:	add	r1, r4, r1
    4974:	add	r1, r5, r1
    4978:	ldrh	r2, [r1]
    497c:	cmp	r2, #12
    4980:	bcc	4f3c <test_scan+0x1a0c>
    4984:	ldrh	r1, [r1, #10]
    4988:	cmp	r1, #0
    498c:	beq	4f3c <test_scan+0x1a0c>
    4990:	add	r2, r0, r1
    4994:	add	r2, r5, r2
    4998:	ldr	r2, [r2, r7, lsl #2]
    499c:	add	r0, r2, r0
    49a0:	add	r0, r0, r1
    49a4:	mov	r1, r6
    49a8:	add	r0, r4, r0
    49ac:	add	r0, r5, r0
    49b0:	add	r0, r0, #4
    49b4:	bl	0 <strcmp>
    49b8:	sub	r4, r4, #4
    49bc:	sub	r7, r7, #1
    49c0:	cmp	r0, #0
    49c4:	bne	4940 <test_scan+0x1410>
    49c8:	ldr	r0, [sp, #24]
    49cc:	add	r0, r0, r7
    49d0:	cmp	r0, #2
    49d4:	beq	49e4 <test_scan+0x14b4>
    49d8:	movw	r0, #0
    49dc:	movt	r0, #0
    49e0:	b	3e58 <test_scan+0x928>
    49e4:	movw	r4, #0
    49e8:	movt	r4, #0
    49ec:	ldr	r0, [sp, #24]
    49f0:	subs	r0, r0, #1
    49f4:	str	r0, [sp, #24]
    49f8:	bls	4a68 <test_scan+0x1538>
    49fc:	ldr	r0, [sp, #24]
    4a00:	cmp	sl, r0
    4a04:	bls	57c8 <test_scan+0x2298>
    4a08:	ldr	r0, [r5]
    4a0c:	ldr	r1, [r5, r0]
    4a10:	sub	r1, r0, r1
    4a14:	add	r1, r5, r1
    4a18:	ldrh	r2, [r1]
    4a1c:	cmp	r2, #12
    4a20:	bcc	4f3c <test_scan+0x1a0c>
    4a24:	ldrh	r1, [r1, #10]
    4a28:	cmp	r1, #0
    4a2c:	beq	4f3c <test_scan+0x1a0c>
    4a30:	add	r2, r0, r1
    4a34:	ldr	r2, [r5, r2]
    4a38:	add	r0, r2, r0
    4a3c:	add	r0, r0, r1
    4a40:	mov	r1, r4
    4a44:	add	r0, r5, r0
    4a48:	add	r0, r0, #4
    4a4c:	bl	0 <strcmp>
    4a50:	sub	r5, r5, #4
    4a54:	cmp	r0, #0
    4a58:	bne	49ec <test_scan+0x14bc>
    4a5c:	movw	r0, #0
    4a60:	movt	r0, #0
    4a64:	b	3e58 <test_scan+0x928>
    4a68:	movw	r5, #0
    4a6c:	mov	r4, sl
    4a70:	movt	r5, #0
    4a74:	cmp	r4, sl
    4a78:	bls	4ae8 <test_scan+0x15b8>
    4a7c:	sub	r4, r4, #1
    4a80:	cmp	sl, r4
    4a84:	bls	57c8 <test_scan+0x2298>
    4a88:	ldr	r0, [r8]
    4a8c:	ldr	r1, [r8, r0]
    4a90:	sub	r1, r0, r1
    4a94:	add	r1, r8, r1
    4a98:	ldrh	r2, [r1]
    4a9c:	cmp	r2, #12
    4aa0:	bcc	4f3c <test_scan+0x1a0c>
    4aa4:	ldrh	r1, [r1, #10]
    4aa8:	cmp	r1, #0
    4aac:	beq	4f3c <test_scan+0x1a0c>
    4ab0:	add	r2, r0, r1
    4ab4:	ldr	r2, [r8, r2]
    4ab8:	add	r0, r2, r0
    4abc:	add	r0, r0, r1
    4ac0:	mov	r1, r5
    4ac4:	add	r0, r8, r0
    4ac8:	add	r0, r0, #4
    4acc:	bl	0 <strcmp>
    4ad0:	sub	r8, r8, #4
    4ad4:	cmp	r0, #0
    4ad8:	bne	4a74 <test_scan+0x1544>
    4adc:	movw	r0, #0
    4ae0:	movt	r0, #0
    4ae4:	b	3e58 <test_scan+0x928>
    4ae8:	ldr	r0, [sp, #56]	; 0x38
    4aec:	movw	r8, #0
    4af0:	mov	r5, #0
    4af4:	movt	r8, #0
    4af8:	add	r4, r0, #8
    4afc:	cmp	sl, r5
    4b00:	beq	57c8 <test_scan+0x2298>
    4b04:	ldr	r0, [r4, #-4]
    4b08:	add	r1, r4, r0
    4b0c:	ldr	r1, [r1, #-4]
    4b10:	sub	r1, r0, r1
    4b14:	add	r1, r4, r1
    4b18:	ldrh	r2, [r1, #-4]
    4b1c:	cmp	r2, #12
    4b20:	bcc	4f3c <test_scan+0x1a0c>
    4b24:	ldrh	r1, [r1, #6]
    4b28:	cmp	r1, #0
    4b2c:	beq	4f3c <test_scan+0x1a0c>
    4b30:	add	r2, r0, r1
    4b34:	add	r2, r4, r2
    4b38:	ldr	r2, [r2, #-4]
    4b3c:	add	r0, r2, r0
    4b40:	add	r0, r0, r1
    4b44:	mov	r1, r8
    4b48:	add	r0, r4, r0
    4b4c:	bl	0 <strcmp>
    4b50:	cmp	r0, #0
    4b54:	beq	4b6c <test_scan+0x163c>
    4b58:	add	r5, r5, #1
    4b5c:	add	r4, r4, #4
    4b60:	cmp	r5, sl
    4b64:	bcc	4afc <test_scan+0x15cc>
    4b68:	b	4bfc <test_scan+0x16cc>
    4b6c:	ldr	r0, [sp, #56]	; 0x38
    4b70:	movw	r8, #0
    4b74:	mov	r4, #0
    4b78:	movt	r8, #0
    4b7c:	add	r6, r0, #12
    4b80:	add	r7, r6, r5, lsl #2
    4b84:	add	r9, r4, #1
    4b88:	add	r5, r5, #1
    4b8c:	cmp	r5, sl
    4b90:	bcs	4bf4 <test_scan+0x16c4>
    4b94:	ldr	r0, [r7, #-4]
    4b98:	add	r1, r7, r0
    4b9c:	ldr	r1, [r1, #-4]
    4ba0:	sub	r1, r0, r1
    4ba4:	add	r1, r7, r1
    4ba8:	ldrh	r2, [r1, #-4]
    4bac:	cmp	r2, #12
    4bb0:	bcc	4f3c <test_scan+0x1a0c>
    4bb4:	ldrh	r1, [r1, #6]
    4bb8:	cmp	r1, #0
    4bbc:	beq	4f3c <test_scan+0x1a0c>
    4bc0:	add	r2, r0, r1
    4bc4:	add	r2, r7, r2
    4bc8:	ldr	r2, [r2, #-4]
    4bcc:	add	r0, r2, r0
    4bd0:	add	r0, r0, r1
    4bd4:	mov	r1, r8
    4bd8:	add	r0, r7, r0
    4bdc:	bl	0 <strcmp>
    4be0:	add	r7, r7, #4
    4be4:	cmp	r0, #0
    4be8:	bne	4b88 <test_scan+0x1658>
    4bec:	mov	r4, r9
    4bf0:	b	4b80 <test_scan+0x1650>
    4bf4:	cmp	r4, #0
    4bf8:	beq	4c08 <test_scan+0x16d8>
    4bfc:	movw	r0, #0
    4c00:	movt	r0, #0
    4c04:	b	3e58 <test_scan+0x928>
    4c08:	ldr	r0, [sp, #56]	; 0x38
    4c0c:	movw	r8, #0
    4c10:	mov	r5, #0
    4c14:	movt	r8, #0
    4c18:	add	r4, r0, #8
    4c1c:	cmp	sl, r5
    4c20:	beq	57c8 <test_scan+0x2298>
    4c24:	ldr	r0, [r4, #-4]
    4c28:	add	r1, r4, r0
    4c2c:	ldr	r1, [r1, #-4]
    4c30:	sub	r1, r0, r1
    4c34:	add	r1, r4, r1
    4c38:	ldrh	r2, [r1, #-4]
    4c3c:	cmp	r2, #12
    4c40:	bcc	4f3c <test_scan+0x1a0c>
    4c44:	ldrh	r1, [r1, #6]
    4c48:	cmp	r1, #0
    4c4c:	beq	4f3c <test_scan+0x1a0c>
    4c50:	add	r2, r0, r1
    4c54:	add	r2, r4, r2
    4c58:	ldr	r2, [r2, #-4]
    4c5c:	add	r0, r2, r0
    4c60:	add	r0, r0, r1
    4c64:	mov	r1, r8
    4c68:	add	r0, r4, r0
    4c6c:	bl	0 <strcmp>
    4c70:	cmp	r0, #0
    4c74:	beq	4c8c <test_scan+0x175c>
    4c78:	add	r5, r5, #1
    4c7c:	add	r4, r4, #4
    4c80:	cmp	r5, sl
    4c84:	bcc	4c1c <test_scan+0x16ec>
    4c88:	b	4d24 <test_scan+0x17f4>
    4c8c:	ldr	r0, [sp, #56]	; 0x38
    4c90:	movw	r8, #0
    4c94:	mov	r4, #0
    4c98:	movt	r8, #0
    4c9c:	add	r9, r0, #12
    4ca0:	add	r7, r9, r5, lsl #2
    4ca4:	add	r4, r4, #1
    4ca8:	add	r5, r5, #1
    4cac:	cmp	r5, sl
    4cb0:	bcs	4d10 <test_scan+0x17e0>
    4cb4:	ldr	r0, [r7, #-4]
    4cb8:	add	r1, r7, r0
    4cbc:	ldr	r1, [r1, #-4]
    4cc0:	sub	r1, r0, r1
    4cc4:	add	r1, r7, r1
    4cc8:	ldrh	r2, [r1, #-4]
    4ccc:	cmp	r2, #12
    4cd0:	bcc	4f3c <test_scan+0x1a0c>
    4cd4:	ldrh	r1, [r1, #6]
    4cd8:	cmp	r1, #0
    4cdc:	beq	4f3c <test_scan+0x1a0c>
    4ce0:	add	r2, r0, r1
    4ce4:	add	r2, r7, r2
    4ce8:	ldr	r2, [r2, #-4]
    4cec:	add	r0, r2, r0
    4cf0:	add	r0, r0, r1
    4cf4:	mov	r1, r8
    4cf8:	add	r0, r7, r0
    4cfc:	bl	0 <strcmp>
    4d00:	add	r7, r7, #4
    4d04:	cmp	r0, #0
    4d08:	bne	4ca8 <test_scan+0x1778>
    4d0c:	b	4ca0 <test_scan+0x1770>
    4d10:	cmp	r4, #0
    4d14:	beq	4d24 <test_scan+0x17f4>
    4d18:	movw	r0, #0
    4d1c:	movt	r0, #0
    4d20:	b	3e58 <test_scan+0x928>
    4d24:	ldr	r0, [sp, #56]	; 0x38
    4d28:	movw	r8, #0
    4d2c:	mov	r5, #0
    4d30:	movt	r8, #0
    4d34:	add	r4, r0, #8
    4d38:	cmp	sl, r5
    4d3c:	beq	57c8 <test_scan+0x2298>
    4d40:	ldr	r0, [r4, #-4]
    4d44:	add	r1, r4, r0
    4d48:	ldr	r1, [r1, #-4]
    4d4c:	sub	r1, r0, r1
    4d50:	add	r1, r4, r1
    4d54:	ldrh	r2, [r1, #-4]
    4d58:	cmp	r2, #12
    4d5c:	bcc	4f3c <test_scan+0x1a0c>
    4d60:	ldrh	r1, [r1, #6]
    4d64:	cmp	r1, #0
    4d68:	beq	4f3c <test_scan+0x1a0c>
    4d6c:	add	r2, r0, r1
    4d70:	add	r2, r4, r2
    4d74:	ldr	r2, [r2, #-4]
    4d78:	add	r0, r2, r0
    4d7c:	add	r0, r0, r1
    4d80:	mov	r1, r8
    4d84:	add	r0, r4, r0
    4d88:	bl	0 <strcmp>
    4d8c:	cmp	r0, #0
    4d90:	beq	4da8 <test_scan+0x1878>
    4d94:	add	r5, r5, #1
    4d98:	add	r4, r4, #4
    4d9c:	cmp	r5, sl
    4da0:	bcc	4d38 <test_scan+0x1808>
    4da4:	b	4e30 <test_scan+0x1900>
    4da8:	movw	r8, #0
    4dac:	mov	r4, #0
    4db0:	movt	r8, #0
    4db4:	add	r7, r6, r5, lsl #2
    4db8:	add	r9, r4, #1
    4dbc:	add	r5, r5, #1
    4dc0:	cmp	r5, sl
    4dc4:	bcs	4e28 <test_scan+0x18f8>
    4dc8:	ldr	r0, [r7, #-4]
    4dcc:	add	r1, r7, r0
    4dd0:	ldr	r1, [r1, #-4]
    4dd4:	sub	r1, r0, r1
    4dd8:	add	r1, r7, r1
    4ddc:	ldrh	r2, [r1, #-4]
    4de0:	cmp	r2, #12
    4de4:	bcc	4f3c <test_scan+0x1a0c>
    4de8:	ldrh	r1, [r1, #6]
    4dec:	cmp	r1, #0
    4df0:	beq	4f3c <test_scan+0x1a0c>
    4df4:	add	r2, r0, r1
    4df8:	add	r2, r7, r2
    4dfc:	ldr	r2, [r2, #-4]
    4e00:	add	r0, r2, r0
    4e04:	add	r0, r0, r1
    4e08:	mov	r1, r8
    4e0c:	add	r0, r7, r0
    4e10:	bl	0 <strcmp>
    4e14:	add	r7, r7, #4
    4e18:	cmp	r0, #0
    4e1c:	bne	4dbc <test_scan+0x188c>
    4e20:	mov	r4, r9
    4e24:	b	4db4 <test_scan+0x1884>
    4e28:	cmp	r4, #0
    4e2c:	beq	4e3c <test_scan+0x190c>
    4e30:	movw	r0, #0
    4e34:	movt	r0, #0
    4e38:	b	3e58 <test_scan+0x928>
    4e3c:	ldr	r0, [sp, #56]	; 0x38
    4e40:	movw	r8, #0
    4e44:	mov	r5, #0
    4e48:	movt	r8, #0
    4e4c:	add	r4, r0, #8
    4e50:	cmp	sl, r5
    4e54:	beq	57c8 <test_scan+0x2298>
    4e58:	ldr	r0, [r4, #-4]
    4e5c:	add	r1, r4, r0
    4e60:	ldr	r1, [r1, #-4]
    4e64:	sub	r1, r0, r1
    4e68:	add	r1, r4, r1
    4e6c:	ldrh	r2, [r1, #-4]
    4e70:	cmp	r2, #12
    4e74:	bcc	4f3c <test_scan+0x1a0c>
    4e78:	ldrh	r1, [r1, #6]
    4e7c:	cmp	r1, #0
    4e80:	beq	4f3c <test_scan+0x1a0c>
    4e84:	add	r2, r0, r1
    4e88:	add	r2, r4, r2
    4e8c:	ldr	r2, [r2, #-4]
    4e90:	add	r0, r2, r0
    4e94:	add	r0, r0, r1
    4e98:	mov	r1, r8
    4e9c:	add	r0, r4, r0
    4ea0:	bl	0 <strcmp>
    4ea4:	cmp	r0, #0
    4ea8:	beq	4ec0 <test_scan+0x1990>
    4eac:	add	r5, r5, #1
    4eb0:	add	r4, r4, #4
    4eb4:	cmp	r5, sl
    4eb8:	bcc	4e50 <test_scan+0x1920>
    4ebc:	b	4fc0 <test_scan+0x1a90>
    4ec0:	movw	r8, #0
    4ec4:	mov	r4, #0
    4ec8:	movt	r8, #0
    4ecc:	add	r7, r6, r5, lsl #2
    4ed0:	add	r4, r4, #1
    4ed4:	add	r5, r5, #1
    4ed8:	cmp	r5, sl
    4edc:	bcs	4f5c <test_scan+0x1a2c>
    4ee0:	ldr	r0, [r7, #-4]
    4ee4:	add	r1, r7, r0
    4ee8:	ldr	r1, [r1, #-4]
    4eec:	sub	r1, r0, r1
    4ef0:	add	r1, r7, r1
    4ef4:	ldrh	r2, [r1, #-4]
    4ef8:	cmp	r2, #12
    4efc:	bcc	4f3c <test_scan+0x1a0c>
    4f00:	ldrh	r1, [r1, #6]
    4f04:	cmp	r1, #0
    4f08:	beq	4f3c <test_scan+0x1a0c>
    4f0c:	add	r2, r0, r1
    4f10:	add	r2, r7, r2
    4f14:	ldr	r2, [r2, #-4]
    4f18:	add	r0, r2, r0
    4f1c:	add	r0, r0, r1
    4f20:	mov	r1, r8
    4f24:	add	r0, r7, r0
    4f28:	bl	0 <strcmp>
    4f2c:	add	r7, r7, #4
    4f30:	cmp	r0, #0
    4f34:	bne	4ed4 <test_scan+0x19a4>
    4f38:	b	4ecc <test_scan+0x199c>
    4f3c:	movw	r0, #0
    4f40:	movw	r1, #0
    4f44:	movw	r3, #0
    4f48:	movw	r2, #699	; 0x2bb
    4f4c:	movt	r0, #0
    4f50:	movt	r1, #0
    4f54:	movt	r3, #0
    4f58:	bl	0 <__assert_fail>
    4f5c:	cmp	r4, #2
    4f60:	bne	4fc0 <test_scan+0x1a90>
    4f64:	ldr	r0, [sp, #44]	; 0x2c
    4f68:	ldr	r1, [sp, #40]	; 0x28
    4f6c:	ldr	r0, [r1, r0]
    4f70:	cmp	r0, #0
    4f74:	beq	4fd4 <test_scan+0x1aa4>
    4f78:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4f7c:	ldr	r2, [sp, #44]	; 0x2c
    4f80:	ldr	r3, [sp, #28]
    4f84:	mov	r7, #0
    4f88:	add	r1, r1, r2
    4f8c:	ldr	r2, [sp, #60]	; 0x3c
    4f90:	add	r2, r1, r2
    4f94:	add	r2, r2, r3
    4f98:	add	r3, r2, #4
    4f9c:	cmp	r0, r7
    4fa0:	beq	5800 <test_scan+0x22d0>
    4fa4:	ldrb	r5, [r3, r7]
    4fa8:	cmp	r5, #6
    4fac:	beq	4fcc <test_scan+0x1a9c>
    4fb0:	add	r7, r7, #1
    4fb4:	cmp	r7, r0
    4fb8:	bcc	4f9c <test_scan+0x1a6c>
    4fbc:	b	4fd4 <test_scan+0x1aa4>
    4fc0:	movw	r0, #0
    4fc4:	movt	r0, #0
    4fc8:	b	3e58 <test_scan+0x928>
    4fcc:	cmp	r7, #0
    4fd0:	beq	4fe0 <test_scan+0x1ab0>
    4fd4:	movw	r0, #0
    4fd8:	movt	r0, #0
    4fdc:	b	3e58 <test_scan+0x928>
    4fe0:	mov	r7, #0
    4fe4:	cmp	r0, r7
    4fe8:	beq	5800 <test_scan+0x22d0>
    4fec:	ldrb	r5, [r3, r7]
    4ff0:	cmp	r5, #1
    4ff4:	beq	5008 <test_scan+0x1ad8>
    4ff8:	add	r7, r7, #1
    4ffc:	cmp	r7, r0
    5000:	bcc	4fe4 <test_scan+0x1ab4>
    5004:	b	5098 <test_scan+0x1b68>
    5008:	cmp	r7, #2
    500c:	bne	5098 <test_scan+0x1b68>
    5010:	cmp	r0, #4
    5014:	bcc	504c <test_scan+0x1b1c>
    5018:	add	r7, r2, #7
    501c:	mov	r5, #0
    5020:	add	r4, r5, #3
    5024:	cmp	r0, r4
    5028:	bls	5800 <test_scan+0x22d0>
    502c:	ldrb	r4, [r7, r5]
    5030:	cmp	r4, #1
    5034:	beq	50a4 <test_scan+0x1b74>
    5038:	add	r4, r5, #1
    503c:	add	r5, r5, #4
    5040:	cmp	r5, r0
    5044:	mov	r5, r4
    5048:	bcc	5020 <test_scan+0x1af0>
    504c:	mov	r7, #0
    5050:	cmp	r0, r7
    5054:	beq	5800 <test_scan+0x22d0>
    5058:	ldrb	r5, [r3, r7]
    505c:	cmp	r5, #5
    5060:	beq	5134 <test_scan+0x1c04>
    5064:	add	r7, r7, #1
    5068:	cmp	r7, r0
    506c:	bcc	5050 <test_scan+0x1b20>
    5070:	mov	r7, #0
    5074:	cmp	r0, r7
    5078:	beq	5800 <test_scan+0x22d0>
    507c:	ldrb	r5, [r3, r7]
    5080:	cmp	r5, #2
    5084:	beq	50b0 <test_scan+0x1b80>
    5088:	add	r7, r7, #1
    508c:	cmp	r7, r0
    5090:	bcc	5074 <test_scan+0x1b44>
    5094:	b	50e0 <test_scan+0x1bb0>
    5098:	movw	r0, #0
    509c:	movt	r0, #0
    50a0:	b	3e58 <test_scan+0x928>
    50a4:	movw	r0, #0
    50a8:	movt	r0, #0
    50ac:	b	3e58 <test_scan+0x928>
    50b0:	cmp	r7, #6
    50b4:	bne	50e0 <test_scan+0x1bb0>
    50b8:	mov	r7, #0
    50bc:	cmp	r0, r7
    50c0:	beq	5800 <test_scan+0x22d0>
    50c4:	ldrb	r5, [r3, r7]
    50c8:	cmp	r5, #3
    50cc:	beq	50ec <test_scan+0x1bbc>
    50d0:	add	r7, r7, #1
    50d4:	cmp	r7, r0
    50d8:	bcc	50bc <test_scan+0x1b8c>
    50dc:	b	5134 <test_scan+0x1c04>
    50e0:	movw	r0, #0
    50e4:	movt	r0, #0
    50e8:	b	3e58 <test_scan+0x928>
    50ec:	cmp	r7, #3
    50f0:	bne	5134 <test_scan+0x1c04>
    50f4:	cmp	r0, #4
    50f8:	bcc	5148 <test_scan+0x1c18>
    50fc:	add	r3, r2, #7
    5100:	mov	r7, #0
    5104:	add	r5, r7, #3
    5108:	cmp	r0, r5
    510c:	bls	5800 <test_scan+0x22d0>
    5110:	ldrb	r5, [r3, r7]
    5114:	cmp	r5, #3
    5118:	beq	5140 <test_scan+0x1c10>
    511c:	add	r5, r7, #1
    5120:	add	r7, r7, #4
    5124:	cmp	r7, r0
    5128:	mov	r7, r5
    512c:	bcc	5104 <test_scan+0x1bd4>
    5130:	b	5148 <test_scan+0x1c18>
    5134:	movw	r0, #0
    5138:	movt	r0, #0
    513c:	b	3e58 <test_scan+0x928>
    5140:	cmp	r7, #0
    5144:	beq	5154 <test_scan+0x1c24>
    5148:	movw	r0, #0
    514c:	movt	r0, #0
    5150:	b	3e58 <test_scan+0x928>
    5154:	cmp	r0, #5
    5158:	bcc	57e8 <test_scan+0x22b8>
    515c:	add	r3, r2, #8
    5160:	mov	r7, #0
    5164:	add	r5, r7, #4
    5168:	cmp	r0, r5
    516c:	bls	5800 <test_scan+0x22d0>
    5170:	ldrb	r5, [r3, r7]
    5174:	cmp	r5, #3
    5178:	beq	5194 <test_scan+0x1c64>
    517c:	add	r5, r7, #1
    5180:	add	r7, r7, #5
    5184:	cmp	r7, r0
    5188:	mov	r7, r5
    518c:	bcc	5164 <test_scan+0x1c34>
    5190:	b	57e8 <test_scan+0x22b8>
    5194:	cmp	r7, #1
    5198:	bne	57e8 <test_scan+0x22b8>
    519c:	add	r3, r2, #3
    51a0:	sub	r2, r0, #1
    51a4:	cmn	r2, #1
    51a8:	beq	57f4 <test_scan+0x22c4>
    51ac:	cmp	r0, r2
    51b0:	bls	5800 <test_scan+0x22d0>
    51b4:	ldrb	r7, [r3, r0]
    51b8:	sub	r3, r3, #1
    51bc:	sub	r2, r2, #1
    51c0:	cmp	r7, #3
    51c4:	bne	51a4 <test_scan+0x1c74>
    51c8:	cmp	r2, #4
    51cc:	bne	57f4 <test_scan+0x22c4>
    51d0:	ldr	r2, [sp, #60]	; 0x3c
    51d4:	cmp	r0, #4
    51d8:	mov	r3, r0
    51dc:	movcs	r3, #4
    51e0:	add	r1, r1, r3
    51e4:	add	r1, r1, r2
    51e8:	ldr	r2, [sp, #28]
    51ec:	add	r1, r1, r2
    51f0:	add	r2, r1, #3
    51f4:	sub	r1, r3, #1
    51f8:	add	r3, r1, #1
    51fc:	cmp	r3, #2
    5200:	bcc	5820 <test_scan+0x22f0>
    5204:	cmp	r0, r1
    5208:	bls	5800 <test_scan+0x22d0>
    520c:	ldrb	r3, [r2], #-1
    5210:	sub	r1, r1, #1
    5214:	cmp	r3, #3
    5218:	bne	51f8 <test_scan+0x1cc8>
    521c:	cmp	r1, #2
    5220:	bne	5820 <test_scan+0x22f0>
    5224:	ldr	r0, [sp, #48]	; 0x30
    5228:	movw	r8, #0
    522c:	mov	r4, #0
    5230:	movt	r8, #0
    5234:	mov	r2, r0
    5238:	ldr	r1, [r2, #-4]!
    523c:	str	r2, [sp, #60]	; 0x3c
    5240:	str	r1, [fp, #-44]	; 0xffffffd4
    5244:	ldr	r1, [fp, #-44]	; 0xffffffd4
    5248:	cmp	r1, r4
    524c:	beq	527c <test_scan+0x1d4c>
    5250:	bls	582c <test_scan+0x22fc>
    5254:	mov	r7, r0
    5258:	ldr	r1, [r7], #4
    525c:	add	r0, r0, r1
    5260:	mov	r1, r8
    5264:	add	r0, r0, #4
    5268:	bl	0 <strcmp>
    526c:	cmp	r0, #0
    5270:	add	r4, r4, #1
    5274:	mov	r0, r7
    5278:	bne	5244 <test_scan+0x1d14>
    527c:	movw	r8, #0
    5280:	mov	r4, #0
    5284:	movt	r8, #0
    5288:	ldr	r0, [fp, #-44]	; 0xffffffd4
    528c:	cmp	r0, r4
    5290:	beq	52c4 <test_scan+0x1d94>
    5294:	bls	582c <test_scan+0x22fc>
    5298:	ldr	r1, [sp, #48]	; 0x30
    529c:	mov	r7, r1
    52a0:	ldr	r0, [r7], #4
    52a4:	add	r0, r1, r0
    52a8:	mov	r1, r8
    52ac:	add	r0, r0, #4
    52b0:	bl	0 <strcmp>
    52b4:	add	r4, r4, #1
    52b8:	cmp	r0, #0
    52bc:	str	r7, [sp, #48]	; 0x30
    52c0:	bne	5288 <test_scan+0x1d58>
    52c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    52c8:	ldr	r1, [sp, #52]	; 0x34
    52cc:	movw	r5, #0
    52d0:	mov	r8, #0
    52d4:	movt	r5, #0
    52d8:	add	r1, r1, r0
    52dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    52e0:	str	r1, [fp, #-56]	; 0xffffffc8
    52e4:	add	r0, r1, r0
    52e8:	ldr	r1, [sp, #28]
    52ec:	add	r4, r0, r1
    52f0:	add	r7, r4, #8
    52f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    52f8:	cmp	r0, r8
    52fc:	beq	536c <test_scan+0x1e3c>
    5300:	bls	582c <test_scan+0x22fc>
    5304:	ldr	r2, [sp, #60]	; 0x3c
    5308:	add	r0, r2, r8, lsl #2
    530c:	ldr	r1, [r0, #4]
    5310:	add	r0, r7, r1
    5314:	add	r1, r2, r1
    5318:	add	r1, r1, r8, lsl #2
    531c:	ldr	r9, [r1, #4]
    5320:	mov	r1, r5
    5324:	cmp	r9, #4
    5328:	mov	r2, r9
    532c:	movcs	r2, #4
    5330:	bl	0 <strncmp>
    5334:	cmp	r0, #0
    5338:	mov	r1, r0
    533c:	mov	r2, #0
    5340:	add	r7, r7, #4
    5344:	add	r8, r8, #1
    5348:	mvneq	r1, #0
    534c:	cmp	r9, #4
    5350:	movwhi	r2, #1
    5354:	cmp	r0, #0
    5358:	movne	r2, r1
    535c:	cmp	r9, #4
    5360:	movcc	r2, r1
    5364:	cmp	r2, #0
    5368:	bne	52f4 <test_scan+0x1dc4>
    536c:	movw	r8, #0
    5370:	add	r4, r4, #8
    5374:	mov	r7, #0
    5378:	movt	r8, #0
    537c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5380:	cmp	r0, r7
    5384:	beq	53f4 <test_scan+0x1ec4>
    5388:	bls	582c <test_scan+0x22fc>
    538c:	ldr	r2, [sp, #60]	; 0x3c
    5390:	add	r0, r2, r7, lsl #2
    5394:	ldr	r1, [r0, #4]
    5398:	add	r0, r4, r1
    539c:	add	r1, r2, r1
    53a0:	add	r1, r1, r7, lsl #2
    53a4:	ldr	r5, [r1, #4]
    53a8:	mov	r1, r8
    53ac:	cmp	r5, #4
    53b0:	mov	r2, r5
    53b4:	movcs	r2, #4
    53b8:	bl	0 <strncmp>
    53bc:	cmp	r0, #0
    53c0:	mov	r1, r0
    53c4:	mov	r2, #0
    53c8:	add	r4, r4, #4
    53cc:	add	r7, r7, #1
    53d0:	mvneq	r1, #0
    53d4:	cmp	r5, #4
    53d8:	movwhi	r2, #1
    53dc:	cmp	r0, #0
    53e0:	movne	r2, r1
    53e4:	cmp	r5, #4
    53e8:	movcc	r2, r1
    53ec:	cmp	r2, #0
    53f0:	bne	537c <test_scan+0x1e4c>
    53f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    53f8:	ldr	r1, [fp, #-56]	; 0xffffffc8
    53fc:	movw	r8, #0
    5400:	mov	r4, #0
    5404:	mvn	r7, #0
    5408:	movt	r8, #0
    540c:	add	r0, r1, r0, lsl #2
    5410:	ldr	r1, [fp, #-52]	; 0xffffffcc
    5414:	add	r0, r0, r1
    5418:	ldr	r1, [sp, #28]
    541c:	add	r9, r0, r1
    5420:	add	r0, r9, #4
    5424:	ldr	r1, [fp, #-44]	; 0xffffffd4
    5428:	cmp	r1, r4
    542c:	beq	5468 <test_scan+0x1f38>
    5430:	ldr	r2, [fp, #-44]	; 0xffffffd4
    5434:	add	r1, r2, r7
    5438:	cmp	r2, r1
    543c:	bls	582c <test_scan+0x22fc>
    5440:	mov	r5, r0
    5444:	ldr	r1, [r5, #-4]!
    5448:	add	r0, r0, r1
    544c:	mov	r1, r8
    5450:	bl	0 <strcmp>
    5454:	cmp	r0, #0
    5458:	sub	r7, r7, #1
    545c:	add	r4, r4, #1
    5460:	mov	r0, r5
    5464:	bne	5424 <test_scan+0x1ef4>
    5468:	movw	r8, #0
    546c:	add	r0, r9, #4
    5470:	mov	r4, #0
    5474:	mvn	r7, #0
    5478:	movt	r8, #0
    547c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    5480:	cmp	r1, r4
    5484:	beq	54c0 <test_scan+0x1f90>
    5488:	ldr	r2, [fp, #-44]	; 0xffffffd4
    548c:	add	r1, r2, r7
    5490:	cmp	r2, r1
    5494:	bls	582c <test_scan+0x22fc>
    5498:	mov	r5, r0
    549c:	ldr	r1, [r5, #-4]!
    54a0:	add	r0, r0, r1
    54a4:	mov	r1, r8
    54a8:	bl	0 <strcmp>
    54ac:	cmp	r0, #0
    54b0:	sub	r7, r7, #1
    54b4:	add	r4, r4, #1
    54b8:	mov	r0, r5
    54bc:	bne	547c <test_scan+0x1f4c>
    54c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    54c4:	movw	r8, #0
    54c8:	add	r4, r9, #4
    54cc:	mov	r7, #0
    54d0:	movt	r8, #0
    54d4:	sub	r0, r0, #1
    54d8:	str	r0, [fp, #-52]	; 0xffffffcc
    54dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    54e0:	adds	r0, r0, r7
    54e4:	beq	5558 <test_scan+0x2028>
    54e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    54ec:	ldr	r1, [fp, #-44]	; 0xffffffd4
    54f0:	add	r0, r0, r7
    54f4:	cmp	r1, r0
    54f8:	bls	582c <test_scan+0x22fc>
    54fc:	ldr	r1, [r9, r7, lsl #2]
    5500:	add	r0, r4, r1
    5504:	add	r1, r9, r1
    5508:	ldr	r5, [r1, r7, lsl #2]
    550c:	mov	r1, r8
    5510:	cmp	r5, #4
    5514:	mov	r2, r5
    5518:	movcs	r2, #4
    551c:	bl	0 <strncmp>
    5520:	cmp	r0, #0
    5524:	mov	r1, r0
    5528:	mov	r2, #0
    552c:	sub	r7, r7, #1
    5530:	sub	r4, r4, #4
    5534:	mvneq	r1, #0
    5538:	cmp	r5, #4
    553c:	movwhi	r2, #1
    5540:	cmp	r0, #0
    5544:	movne	r2, r1
    5548:	cmp	r5, #4
    554c:	movcc	r2, r1
    5550:	cmp	r2, #0
    5554:	bne	54dc <test_scan+0x1fac>
    5558:	ldr	r0, [fp, #-44]	; 0xffffffd4
    555c:	add	r4, r9, #4
    5560:	mov	r8, #0
    5564:	rsb	r7, r0, #0
    5568:	cmp	r7, r8
    556c:	beq	55e4 <test_scan+0x20b4>
    5570:	ldr	r0, [fp, #-52]	; 0xffffffcc
    5574:	ldr	r1, [fp, #-44]	; 0xffffffd4
    5578:	add	r0, r0, r8
    557c:	cmp	r1, r0
    5580:	bls	582c <test_scan+0x22fc>
    5584:	ldr	r1, [r9, r8, lsl #2]
    5588:	add	r0, r4, r1
    558c:	add	r1, r9, r1
    5590:	ldr	r5, [r1, r8, lsl #2]
    5594:	movw	r1, #0
    5598:	movt	r1, #0
    559c:	cmp	r5, #4
    55a0:	mov	r2, r5
    55a4:	movcs	r2, #4
    55a8:	bl	0 <strncmp>
    55ac:	cmp	r0, #0
    55b0:	mov	r1, r0
    55b4:	mov	r2, #0
    55b8:	sub	r8, r8, #1
    55bc:	sub	r4, r4, #4
    55c0:	mvneq	r1, #0
    55c4:	cmp	r5, #4
    55c8:	movwhi	r2, #1
    55cc:	cmp	r0, #0
    55d0:	movne	r2, r1
    55d4:	cmp	r5, #4
    55d8:	movcc	r2, r1
    55dc:	cmp	r2, #0
    55e0:	bne	5568 <test_scan+0x2038>
    55e4:	mov	r0, #0
    55e8:	cmp	sl, r0
    55ec:	beq	57c8 <test_scan+0x2298>
    55f0:	ldr	r1, [r6, #-8]
    55f4:	add	r2, r6, r1
    55f8:	ldr	r2, [r2, #-8]
    55fc:	sub	r2, r1, r2
    5600:	add	r2, r6, r2
    5604:	ldrh	r3, [r2, #-8]
    5608:	cmp	r3, #10
    560c:	bcc	5630 <test_scan+0x2100>
    5610:	ldrh	r2, [r2]
    5614:	cmp	r2, #0
    5618:	beq	5630 <test_scan+0x2100>
    561c:	add	r1, r1, r2
    5620:	add	r1, r6, r1
    5624:	ldrh	r1, [r1, #-8]
    5628:	cmp	r1, #13
    562c:	beq	5640 <test_scan+0x2110>
    5630:	add	r0, r0, #1
    5634:	add	r6, r6, #4
    5638:	cmp	r0, sl
    563c:	bcc	55e8 <test_scan+0x20b8>
    5640:	ldr	r0, [sp, #56]	; 0x38
    5644:	mov	r1, #1
    5648:	add	r0, r0, #8
    564c:	cmp	sl, r1
    5650:	bls	57c8 <test_scan+0x2298>
    5654:	ldr	r2, [r0]
    5658:	ldr	r3, [r0, r2]
    565c:	sub	r3, r2, r3
    5660:	add	r3, r0, r3
    5664:	ldrh	r7, [r3]
    5668:	cmp	r7, #10
    566c:	bcc	5690 <test_scan+0x2160>
    5670:	ldrh	r3, [r3, #8]
    5674:	cmp	r3, #0
    5678:	beq	5690 <test_scan+0x2160>
    567c:	add	r2, r2, r3
    5680:	add	r2, r0, r2
    5684:	ldrh	r2, [r2]
    5688:	cmp	r2, #42	; 0x2a
    568c:	beq	56a0 <test_scan+0x2170>
    5690:	add	r1, r1, #1
    5694:	add	r0, r0, #4
    5698:	cmp	r1, sl
    569c:	bcc	564c <test_scan+0x211c>
    56a0:	ldr	r0, [sp, #28]
    56a4:	ldr	r1, [sp, #32]
    56a8:	add	r0, r0, r1
    56ac:	ldr	r1, [fp, #-48]	; 0xffffffd0
    56b0:	cmn	r1, #1
    56b4:	beq	5728 <test_scan+0x21f8>
    56b8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    56bc:	cmp	sl, r1
    56c0:	bls	57c8 <test_scan+0x2298>
    56c4:	ldr	r2, [r0]
    56c8:	ldr	r1, [r0, r2]
    56cc:	sub	r1, r2, r1
    56d0:	add	r3, r0, r1
    56d4:	mov	r1, #1
    56d8:	ldrh	r7, [r3]
    56dc:	cmp	r7, #10
    56e0:	bcc	5710 <test_scan+0x21e0>
    56e4:	ldrh	r3, [r3, #8]
    56e8:	cmp	r3, #0
    56ec:	beq	5710 <test_scan+0x21e0>
    56f0:	add	r1, r2, r3
    56f4:	add	r1, r0, r1
    56f8:	ldrsh	r2, [r1]
    56fc:	uxth	r1, r2
    5700:	subs	r1, r1, #1
    5704:	movwne	r1, #1
    5708:	cmp	r2, #1
    570c:	mvnlt	r1, #0
    5710:	ldr	r2, [fp, #-48]	; 0xffffffd0
    5714:	sub	r0, r0, #4
    5718:	cmp	r1, #0
    571c:	sub	r2, r2, #1
    5720:	str	r2, [fp, #-48]	; 0xffffffd0
    5724:	bne	56ac <test_scan+0x217c>
    5728:	ldr	r0, [sp, #36]	; 0x24
    572c:	cmp	sl, #2
    5730:	ldr	r2, [sp, #20]
    5734:	mov	r1, sl
    5738:	ldr	r9, [sp, #28]
    573c:	mov	r5, #0
    5740:	movcs	r1, #2
    5744:	add	r0, r0, r1, lsl #2
    5748:	sub	r1, r1, #1
    574c:	add	r0, r0, r2
    5750:	ldr	r2, [sp, #28]
    5754:	add	r0, r2, r0
    5758:	cmn	r1, #1
    575c:	beq	584c <test_scan+0x231c>
    5760:	cmp	sl, r1
    5764:	bls	57c8 <test_scan+0x2298>
    5768:	ldr	r3, [r0]
    576c:	ldr	r2, [r0, r3]
    5770:	sub	r2, r3, r2
    5774:	add	r7, r0, r2
    5778:	mov	r2, #1
    577c:	ldrh	r4, [r7]
    5780:	cmp	r4, #10
    5784:	bcc	57b4 <test_scan+0x2284>
    5788:	ldrh	r7, [r7, #8]
    578c:	cmp	r7, #0
    5790:	beq	57b4 <test_scan+0x2284>
    5794:	add	r2, r3, r7
    5798:	add	r2, r0, r2
    579c:	ldrsh	r3, [r2]
    57a0:	uxth	r2, r3
    57a4:	subs	r2, r2, #42	; 0x2a
    57a8:	movwne	r2, #1
    57ac:	cmp	r3, #42	; 0x2a
    57b0:	mvnlt	r2, #0
    57b4:	sub	r0, r0, #4
    57b8:	sub	r1, r1, #1
    57bc:	cmp	r2, #0
    57c0:	bne	5758 <test_scan+0x2228>
    57c4:	b	3bcc <test_scan+0x69c>
    57c8:	movw	r0, #0
    57cc:	movw	r1, #0
    57d0:	movw	r3, #0
    57d4:	movw	r2, #693	; 0x2b5
    57d8:	movt	r0, #0
    57dc:	movt	r1, #0
    57e0:	movt	r3, #0
    57e4:	bl	0 <__assert_fail>
    57e8:	movw	r0, #0
    57ec:	movt	r0, #0
    57f0:	b	3e58 <test_scan+0x928>
    57f4:	movw	r0, #0
    57f8:	movt	r0, #0
    57fc:	b	3e58 <test_scan+0x928>
    5800:	movw	r0, #0
    5804:	movw	r1, #0
    5808:	movw	r3, #0
    580c:	movw	r2, #395	; 0x18b
    5810:	movt	r0, #0
    5814:	movt	r1, #0
    5818:	movt	r3, #0
    581c:	bl	0 <__assert_fail>
    5820:	movw	r0, #0
    5824:	movt	r0, #0
    5828:	b	3e58 <test_scan+0x928>
    582c:	movw	r0, #0
    5830:	movw	r1, #0
    5834:	movw	r3, #0
    5838:	mov	r2, #108	; 0x6c
    583c:	movt	r0, #0
    5840:	movt	r1, #0
    5844:	movt	r3, #0
    5848:	bl	0 <__assert_fail>
    584c:	ldr	r9, [sp, #28]
    5850:	b	3bcc <test_scan+0x69c>

00005854 <test_basic_sort>:
    5854:	push	{r4, r5, r6, r7, fp, lr}
    5858:	add	fp, sp, #16
    585c:	sub	sp, sp, #24
    5860:	mov	r4, r0
    5864:	movw	r0, #1027	; 0x403
    5868:	movt	r0, #515	; 0x203
    586c:	str	r0, [sp, #15]
    5870:	movw	r0, #1798	; 0x706
    5874:	movt	r0, #769	; 0x301
    5878:	str	r0, [sp, #12]
    587c:	mov	r0, r4
    5880:	bl	0 <flatcc_builder_reset>
    5884:	movw	r1, #0
    5888:	mov	r0, r4
    588c:	mov	r2, #0
    5890:	mov	r3, #0
    5894:	movt	r1, #0
    5898:	bl	0 <flatcc_builder_start_buffer>
    589c:	cmp	r0, #0
    58a0:	bne	58b0 <test_basic_sort+0x5c>
    58a4:	mov	r0, r4
    58a8:	mov	r1, #36	; 0x24
    58ac:	bl	0 <flatcc_builder_start_table>
    58b0:	movw	r1, #0
    58b4:	mov	r0, r4
    58b8:	movt	r1, #0
    58bc:	bl	0 <flatcc_builder_create_string_str>
    58c0:	cmp	r0, #0
    58c4:	beq	58e0 <test_basic_sort+0x8c>
    58c8:	mov	r5, r0
    58cc:	mov	r0, r4
    58d0:	mov	r1, #3
    58d4:	bl	0 <flatcc_builder_table_add_offset>
    58d8:	cmp	r0, #0
    58dc:	strne	r5, [r0]
    58e0:	mvn	r0, #0
    58e4:	mov	r1, #1
    58e8:	mov	r2, #7
    58ec:	mov	r3, #1
    58f0:	str	r1, [sp]
    58f4:	str	r0, [sp, #4]
    58f8:	add	r1, sp, #12
    58fc:	mov	r0, r4
    5900:	bl	0 <flatcc_builder_create_vector>
    5904:	cmp	r0, #0
    5908:	beq	5924 <test_basic_sort+0xd0>
    590c:	mov	r5, r0
    5910:	mov	r0, r4
    5914:	mov	r1, #5
    5918:	bl	0 <flatcc_builder_table_add_offset>
    591c:	cmp	r0, #0
    5920:	strne	r5, [r0]
    5924:	movw	r1, #0
    5928:	mov	r0, r4
    592c:	mov	r2, #1
    5930:	movt	r1, #0
    5934:	bl	0 <flatcc_builder_check_required>
    5938:	cmp	r0, #0
    593c:	beq	5c04 <test_basic_sort+0x3b0>
    5940:	mov	r0, r4
    5944:	bl	0 <flatcc_builder_end_table>
    5948:	mov	r1, r0
    594c:	mov	r0, r4
    5950:	bl	0 <flatcc_builder_end_buffer>
    5954:	add	r1, sp, #20
    5958:	mov	r0, r4
    595c:	bl	0 <flatcc_builder_get_direct_buffer>
    5960:	cmp	r0, #0
    5964:	beq	5be4 <test_basic_sort+0x390>
    5968:	ldr	r1, [r0, #4]
    596c:	movw	r2, #20301	; 0x4f4d
    5970:	movt	r2, #21326	; 0x534e
    5974:	cmp	r1, r2
    5978:	bne	5be4 <test_basic_sort+0x390>
    597c:	ldr	r1, [r0]
    5980:	ldr	r2, [r0, r1]!
    5984:	mov	r1, r0
    5988:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    598c:	cmp	r2, #15
    5990:	bls	59ac <test_basic_sort+0x158>
    5994:	ldrh	r1, [r1, #14]
    5998:	cmp	r1, #0
    599c:	ldrne	r1, [r0, r1]!
    59a0:	ldrne	r3, [r0, r1]!
    59a4:	cmpne	r3, #0
    59a8:	bne	59cc <test_basic_sort+0x178>
    59ac:	movw	r0, #0
    59b0:	movw	r1, #0
    59b4:	movw	r3, #0
    59b8:	mov	r2, #1552	; 0x610
    59bc:	movt	r0, #0
    59c0:	movt	r1, #0
    59c4:	movt	r3, #0
    59c8:	bl	0 <__assert_fail>
    59cc:	add	r1, r0, #4
    59d0:	lsr	r2, r3, #1
    59d4:	sub	lr, r3, #1
    59d8:	cmp	lr, r2, lsl #1
    59dc:	mov	ip, r2
    59e0:	bcs	59f4 <test_basic_sort+0x1a0>
    59e4:	sub	r2, ip, #1
    59e8:	cmp	ip, #0
    59ec:	bne	59d8 <test_basic_sort+0x184>
    59f0:	b	5ae4 <test_basic_sort+0x290>
    59f4:	lsl	r2, ip, #1
    59f8:	mov	r3, ip
    59fc:	ldr	r4, [r1, #-4]
    5a00:	cmp	r2, lr
    5a04:	bcs	5a28 <test_basic_sort+0x1d4>
    5a08:	cmp	r4, r2
    5a0c:	orrhi	r6, r2, #1
    5a10:	cmphi	r4, r6
    5a14:	bls	5bb0 <test_basic_sort+0x35c>
    5a18:	ldrb	r5, [r1, r6]
    5a1c:	ldrb	r0, [r1, r2]
    5a20:	cmp	r0, r5
    5a24:	movcc	r2, r6
    5a28:	mov	r5, r2
    5a2c:	cmp	r4, r3
    5a30:	cmphi	r4, r5
    5a34:	bls	5bb0 <test_basic_sort+0x35c>
    5a38:	ldrb	r2, [r1, r3]
    5a3c:	ldrb	r6, [r1, r5]
    5a40:	cmp	r2, r6
    5a44:	bcs	59e4 <test_basic_sort+0x190>
    5a48:	cmp	lr, r5, lsl #1
    5a4c:	strb	r2, [r1, r5]
    5a50:	strb	r6, [r1, r3]
    5a54:	lsl	r2, r5, #1
    5a58:	mov	r3, r5
    5a5c:	bcs	59fc <test_basic_sort+0x1a8>
    5a60:	b	59e4 <test_basic_sort+0x190>
    5a64:	ldrb	r2, [r1]
    5a68:	ldrb	r0, [r1, lr]
    5a6c:	mov	r4, #0
    5a70:	strb	r2, [r1, lr]
    5a74:	sub	lr, lr, #1
    5a78:	mov	r2, #0
    5a7c:	strb	r0, [r1]
    5a80:	ldr	r5, [r1, #-4]
    5a84:	cmp	r4, lr
    5a88:	bcs	5aac <test_basic_sort+0x258>
    5a8c:	cmp	r5, r4
    5a90:	orrhi	r3, r4, #1
    5a94:	cmphi	r5, r3
    5a98:	bls	5bb0 <test_basic_sort+0x35c>
    5a9c:	ldrb	r0, [r1, r3]
    5aa0:	ldrb	r6, [r1, r4]
    5aa4:	cmp	r6, r0
    5aa8:	movcc	r4, r3
    5aac:	mov	r3, r4
    5ab0:	cmp	r5, r2
    5ab4:	cmphi	r5, r3
    5ab8:	bls	5bb0 <test_basic_sort+0x35c>
    5abc:	ldrb	r6, [r1, r2]
    5ac0:	ldrb	r5, [r1, r3]
    5ac4:	cmp	r6, r5
    5ac8:	bcs	5ae4 <test_basic_sort+0x290>
    5acc:	cmp	lr, r3, lsl #1
    5ad0:	strb	r6, [r1, r3]
    5ad4:	strb	r5, [r1, r2]
    5ad8:	lsl	r4, r3, #1
    5adc:	mov	r2, r3
    5ae0:	bcs	5a80 <test_basic_sort+0x22c>
    5ae4:	cmp	lr, #0
    5ae8:	bne	5a64 <test_basic_sort+0x210>
    5aec:	ldr	r0, [r1, #-4]
    5af0:	cmp	r0, #7
    5af4:	bne	59ac <test_basic_sort+0x158>
    5af8:	movw	lr, #0
    5afc:	movw	r0, #0
    5b00:	movw	ip, #0
    5b04:	mov	r3, #0
    5b08:	mov	r5, #0
    5b0c:	movt	lr, #0
    5b10:	movt	r0, #0
    5b14:	movt	ip, #0
    5b18:	cmp	r3, #7
    5b1c:	bcs	5bb0 <test_basic_sort+0x35c>
    5b20:	ldrb	r2, [r1, r3]
    5b24:	ldrb	r3, [lr, r3]
    5b28:	cmp	r2, r3
    5b2c:	bne	5bd4 <test_basic_sort+0x380>
    5b30:	mov	r4, #0
    5b34:	mov	r3, #6
    5b38:	sub	r6, r3, r4
    5b3c:	add	r6, r4, r6, lsr #1
    5b40:	cmp	r6, #7
    5b44:	bcs	5bb0 <test_basic_sort+0x35c>
    5b48:	ldrb	r7, [r1, r6]
    5b4c:	cmp	r7, r2
    5b50:	movcs	r3, r6
    5b54:	addcc	r4, r6, #1
    5b58:	cmp	r3, r4
    5b5c:	bhi	5b38 <test_basic_sort+0x2e4>
    5b60:	bne	5bd0 <test_basic_sort+0x37c>
    5b64:	cmp	r4, #7
    5b68:	bcs	5bb0 <test_basic_sort+0x35c>
    5b6c:	ldrb	r3, [r1, r4]
    5b70:	cmp	r3, r2
    5b74:	bne	5bd0 <test_basic_sort+0x37c>
    5b78:	uxtb	r2, r5
    5b7c:	cmp	r2, #3
    5b80:	mov	r2, r5
    5b84:	movweq	r2, #2
    5b88:	uxtb	r2, r2
    5b8c:	cmp	r4, r2
    5b90:	bne	5bd0 <test_basic_sort+0x37c>
    5b94:	add	r5, r5, #1
    5b98:	uxtb	r3, r5
    5b9c:	cmp	r3, #6
    5ba0:	bls	5b18 <test_basic_sort+0x2c4>
    5ba4:	mov	r0, #0
    5ba8:	sub	sp, fp, #16
    5bac:	pop	{r4, r5, r6, r7, fp, pc}
    5bb0:	movw	r0, #0
    5bb4:	movw	r1, #0
    5bb8:	movw	r3, #0
    5bbc:	movw	r2, #395	; 0x18b
    5bc0:	movt	r0, #0
    5bc4:	movt	r1, #0
    5bc8:	movt	r3, #0
    5bcc:	bl	0 <__assert_fail>
    5bd0:	mov	r0, ip
    5bd4:	bl	0 <puts>
    5bd8:	mvn	r0, #0
    5bdc:	sub	sp, fp, #16
    5be0:	pop	{r4, r5, r6, r7, fp, pc}
    5be4:	movw	r0, #0
    5be8:	movw	r1, #0
    5bec:	movw	r3, #0
    5bf0:	movw	r2, #706	; 0x2c2
    5bf4:	movt	r0, #0
    5bf8:	movt	r1, #0
    5bfc:	movt	r3, #0
    5c00:	bl	0 <__assert_fail>
    5c04:	movw	r0, #0
    5c08:	movw	r1, #0
    5c0c:	movw	r3, #0
    5c10:	mov	r2, #235	; 0xeb
    5c14:	movt	r0, #0
    5c18:	movt	r1, #0
    5c1c:	movt	r3, #0
    5c20:	bl	0 <__assert_fail>

00005c24 <test_clone_slice>:
    5c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c28:	add	fp, sp, #28
    5c2c:	sub	sp, sp, #36	; 0x24
    5c30:	mov	r5, r0
    5c34:	mov	r0, #256	; 0x100
    5c38:	str	r0, [sp, #27]
    5c3c:	str	r0, [sp, #24]
    5c40:	mov	r0, r5
    5c44:	bl	0 <flatcc_builder_reset>
    5c48:	movw	r1, #0
    5c4c:	mov	r0, r5
    5c50:	mov	r2, #0
    5c54:	mov	r3, #0
    5c58:	movt	r1, #0
    5c5c:	bl	0 <flatcc_builder_start_buffer>
    5c60:	cmp	r0, #0
    5c64:	bne	5c74 <test_clone_slice+0x50>
    5c68:	mov	r0, r5
    5c6c:	mov	r1, #36	; 0x24
    5c70:	bl	0 <flatcc_builder_start_table>
    5c74:	movw	r1, #0
    5c78:	mov	r0, r5
    5c7c:	movt	r1, #0
    5c80:	bl	0 <flatcc_builder_create_string_str>
    5c84:	cmp	r0, #0
    5c88:	beq	5ca4 <test_clone_slice+0x80>
    5c8c:	mov	r4, r0
    5c90:	mov	r0, r5
    5c94:	mov	r1, #3
    5c98:	bl	0 <flatcc_builder_table_add_offset>
    5c9c:	cmp	r0, #0
    5ca0:	strne	r4, [r0]
    5ca4:	mvn	r0, #0
    5ca8:	mov	r1, #1
    5cac:	mov	r2, #7
    5cb0:	mov	r3, #1
    5cb4:	str	r1, [sp]
    5cb8:	str	r0, [sp, #4]
    5cbc:	add	r1, sp, #24
    5cc0:	mov	r0, r5
    5cc4:	bl	0 <flatcc_builder_create_vector>
    5cc8:	cmp	r0, #0
    5ccc:	beq	5ce8 <test_clone_slice+0xc4>
    5cd0:	mov	r4, r0
    5cd4:	mov	r0, r5
    5cd8:	mov	r1, #24
    5cdc:	bl	0 <flatcc_builder_table_add_offset>
    5ce0:	cmp	r0, #0
    5ce4:	strne	r4, [r0]
    5ce8:	mov	r0, r5
    5cec:	mov	r1, #4
    5cf0:	mov	r2, #2
    5cf4:	mvn	r3, #-1073741824	; 0xc0000000
    5cf8:	bl	0 <flatcc_builder_start_vector>
    5cfc:	mov	r0, r5
    5d00:	mov	r1, #2
    5d04:	bl	0 <flatcc_builder_extend_vector>
    5d08:	mov	r1, #44	; 0x2c
    5d0c:	strh	r1, [r0, #4]
    5d10:	mov	r1, #22
    5d14:	strh	r1, [r0]
    5d18:	mov	r0, r5
    5d1c:	bl	0 <flatcc_builder_end_vector>
    5d20:	cmp	r0, #0
    5d24:	beq	5d40 <test_clone_slice+0x11c>
    5d28:	mov	r4, r0
    5d2c:	mov	r0, r5
    5d30:	mov	r1, #9
    5d34:	bl	0 <flatcc_builder_table_add_offset>
    5d38:	cmp	r0, #0
    5d3c:	strne	r4, [r0]
    5d40:	mov	r0, r5
    5d44:	mov	r1, #0
    5d48:	mov	r2, #32
    5d4c:	mov	r3, #16
    5d50:	mov	r8, #0
    5d54:	bl	0 <flatcc_builder_table_add>
    5d58:	movw	r1, #13107	; 0x3333
    5d5c:	mov	r2, #1
    5d60:	movt	r1, #49705	; 0xc229
    5d64:	str	r1, [r0]
    5d68:	movw	r1, #0
    5d6c:	mov	r0, r5
    5d70:	movt	r1, #0
    5d74:	bl	0 <flatcc_builder_check_required>
    5d78:	cmp	r0, #0
    5d7c:	beq	65ac <test_clone_slice+0x988>
    5d80:	mov	r0, r5
    5d84:	bl	0 <flatcc_builder_end_table>
    5d88:	mov	r1, r0
    5d8c:	mov	r0, r5
    5d90:	bl	0 <flatcc_builder_end_buffer>
    5d94:	add	r1, sp, #32
    5d98:	mov	r0, r5
    5d9c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    5da0:	mov	r4, r0
    5da4:	movw	r0, #0
    5da8:	ldr	r2, [sp, #32]
    5dac:	movt	r0, #0
    5db0:	mov	r1, r4
    5db4:	ldr	r3, [r0]
    5db8:	movw	r0, #0
    5dbc:	movt	r0, #0
    5dc0:	bl	5d4 <hexdump>
    5dc4:	movw	r1, #20301	; 0x4f4d
    5dc8:	cmp	r4, #0
    5dcc:	movt	r1, #21326	; 0x534e
    5dd0:	beq	5de4 <test_clone_slice+0x1c0>
    5dd4:	ldr	r0, [r4, #4]
    5dd8:	cmp	r0, r1
    5ddc:	ldreq	r0, [r4]
    5de0:	addeq	r8, r4, r0
    5de4:	mov	r0, r5
    5de8:	bl	0 <flatcc_builder_reset>
    5dec:	movw	r1, #0
    5df0:	mov	r0, r5
    5df4:	mov	r2, #0
    5df8:	mov	r3, #0
    5dfc:	movt	r1, #0
    5e00:	bl	0 <flatcc_builder_start_buffer>
    5e04:	cmp	r0, #0
    5e08:	bne	5e18 <test_clone_slice+0x1f4>
    5e0c:	mov	r0, r5
    5e10:	mov	r1, #36	; 0x24
    5e14:	bl	0 <flatcc_builder_start_table>
    5e18:	cmp	r8, #0
    5e1c:	beq	65cc <test_clone_slice+0x9a8>
    5e20:	ldr	r1, [r8]
    5e24:	mov	r0, r8
    5e28:	ldrh	r2, [r0, -r1]!
    5e2c:	cmp	r2, #12
    5e30:	bcc	65a0 <test_clone_slice+0x97c>
    5e34:	ldrh	r1, [r0, #10]
    5e38:	cmp	r1, #0
    5e3c:	beq	65a0 <test_clone_slice+0x97c>
    5e40:	cmp	r2, #54	; 0x36
    5e44:	bcc	65ec <test_clone_slice+0x9c8>
    5e48:	ldrh	r2, [r0, #52]	; 0x34
    5e4c:	cmp	r2, #0
    5e50:	beq	65ec <test_clone_slice+0x9c8>
    5e54:	ldrh	r0, [r0, #22]
    5e58:	str	r4, [sp, #20]
    5e5c:	cmp	r0, #0
    5e60:	beq	6604 <test_clone_slice+0x9e0>
    5e64:	mov	r3, r8
    5e68:	mov	sl, r8
    5e6c:	str	r8, [sp, #16]
    5e70:	ldr	r0, [r8, r0]!
    5e74:	ldr	r1, [r3, r1]!
    5e78:	ldr	r9, [sl, r2]!
    5e7c:	str	r0, [sp, #12]
    5e80:	mov	r0, r5
    5e84:	add	r1, r3, r1
    5e88:	add	r6, r1, #4
    5e8c:	ldr	r2, [r6, #-4]
    5e90:	mov	r1, r6
    5e94:	bl	0 <flatcc_builder_create_string>
    5e98:	cmp	r0, #0
    5e9c:	beq	5eb8 <test_clone_slice+0x294>
    5ea0:	mov	r4, r0
    5ea4:	mov	r0, r5
    5ea8:	mov	r1, #3
    5eac:	bl	0 <flatcc_builder_table_add_offset>
    5eb0:	cmp	r0, #0
    5eb4:	strne	r4, [r0]
    5eb8:	mov	r0, r5
    5ebc:	bl	0 <flatcc_builder_start_offset_vector>
    5ec0:	ldr	r2, [r6, #-4]
    5ec4:	mov	r0, r5
    5ec8:	mov	r1, r6
    5ecc:	bl	0 <flatcc_builder_create_string>
    5ed0:	cmp	r0, #0
    5ed4:	beq	5ee4 <test_clone_slice+0x2c0>
    5ed8:	mov	r1, r0
    5edc:	mov	r0, r5
    5ee0:	bl	0 <flatcc_builder_offset_vector_push>
    5ee4:	ldr	r0, [r6, #-4]
    5ee8:	cmp	r0, #4
    5eec:	mov	r2, r0
    5ef0:	movcs	r2, #4
    5ef4:	add	r1, r6, r2
    5ef8:	sub	r2, r0, r2
    5efc:	mov	r0, r5
    5f00:	cmp	r2, #20
    5f04:	movcs	r2, #20
    5f08:	bl	0 <flatcc_builder_create_string>
    5f0c:	cmp	r0, #0
    5f10:	beq	5f20 <test_clone_slice+0x2fc>
    5f14:	mov	r1, r0
    5f18:	mov	r0, r5
    5f1c:	bl	0 <flatcc_builder_offset_vector_push>
    5f20:	ldr	r2, [r6, #-4]
    5f24:	mov	r0, r5
    5f28:	mov	r1, r6
    5f2c:	cmp	r2, #3
    5f30:	movcs	r2, #3
    5f34:	bl	0 <flatcc_builder_create_string>
    5f38:	cmp	r0, #0
    5f3c:	beq	5f4c <test_clone_slice+0x328>
    5f40:	mov	r1, r0
    5f44:	mov	r0, r5
    5f48:	bl	0 <flatcc_builder_offset_vector_push>
    5f4c:	mov	r0, r5
    5f50:	add	r7, sl, r9
    5f54:	bl	0 <flatcc_builder_end_offset_vector>
    5f58:	cmp	r0, #0
    5f5c:	beq	5f78 <test_clone_slice+0x354>
    5f60:	mov	r4, r0
    5f64:	mov	r0, r5
    5f68:	mov	r1, #10
    5f6c:	bl	0 <flatcc_builder_table_add_offset>
    5f70:	cmp	r0, #0
    5f74:	strne	r4, [r0]
    5f78:	ldr	r0, [sp, #12]
    5f7c:	mov	r1, #36	; 0x24
    5f80:	add	sl, r7, #4
    5f84:	add	r8, r8, r0
    5f88:	mov	r0, r5
    5f8c:	bl	0 <flatcc_builder_start_table>
    5f90:	ldr	r0, [r6, #-4]
    5f94:	cmp	r0, #2
    5f98:	mov	r2, r0
    5f9c:	movcs	r2, #2
    5fa0:	add	r1, r6, r2
    5fa4:	sub	r2, r0, r2
    5fa8:	mov	r0, r5
    5fac:	cmp	r2, #20
    5fb0:	movcs	r2, #20
    5fb4:	bl	0 <flatcc_builder_create_string>
    5fb8:	cmp	r0, #0
    5fbc:	beq	5fd8 <test_clone_slice+0x3b4>
    5fc0:	mov	r4, r0
    5fc4:	mov	r0, r5
    5fc8:	mov	r1, #3
    5fcc:	bl	0 <flatcc_builder_table_add_offset>
    5fd0:	cmp	r0, #0
    5fd4:	strne	r4, [r0]
    5fd8:	ldr	r2, [sl, #-4]
    5fdc:	mvn	r0, #0
    5fe0:	mov	r1, #1
    5fe4:	mov	r3, #1
    5fe8:	add	r9, r8, #4
    5fec:	str	r1, [sp]
    5ff0:	str	r0, [sp, #4]
    5ff4:	mov	r0, r5
    5ff8:	mov	r1, sl
    5ffc:	bl	0 <flatcc_builder_create_vector>
    6000:	cmp	r0, #0
    6004:	beq	6020 <test_clone_slice+0x3fc>
    6008:	mov	r4, r0
    600c:	mov	r0, r5
    6010:	mov	r1, #24
    6014:	bl	0 <flatcc_builder_table_add_offset>
    6018:	cmp	r0, #0
    601c:	strne	r4, [r0]
    6020:	ldr	r0, [r9, #-4]
    6024:	mvn	r1, #-1073741824	; 0xc0000000
    6028:	mov	r2, #2
    602c:	str	r1, [sp, #4]
    6030:	str	r2, [sp]
    6034:	cmp	r0, #0
    6038:	mov	r3, r0
    603c:	movwne	r3, #1
    6040:	sub	r0, r0, r3
    6044:	add	r1, r9, r3, lsl #2
    6048:	mov	r3, #4
    604c:	cmp	r0, #2
    6050:	movcc	r2, r0
    6054:	mov	r0, r5
    6058:	bl	0 <flatcc_builder_create_vector>
    605c:	ldr	r7, [sp, #16]
    6060:	cmp	r0, #0
    6064:	beq	6080 <test_clone_slice+0x45c>
    6068:	mov	r4, r0
    606c:	mov	r0, r5
    6070:	mov	r1, #9
    6074:	bl	0 <flatcc_builder_table_add_offset>
    6078:	cmp	r0, #0
    607c:	strne	r4, [r0]
    6080:	movw	r1, #0
    6084:	mov	r0, r5
    6088:	mov	r2, #1
    608c:	movt	r1, #0
    6090:	bl	0 <flatcc_builder_check_required>
    6094:	cmp	r0, #0
    6098:	beq	65ac <test_clone_slice+0x988>
    609c:	mov	r0, r5
    60a0:	bl	0 <flatcc_builder_end_table>
    60a4:	cmp	r0, #0
    60a8:	beq	60ec <test_clone_slice+0x4c8>
    60ac:	mov	r4, r0
    60b0:	mov	r0, r5
    60b4:	mov	r1, #7
    60b8:	mov	r2, #1
    60bc:	mov	r3, #1
    60c0:	bl	0 <flatcc_builder_table_add>
    60c4:	cmp	r0, #0
    60c8:	beq	60ec <test_clone_slice+0x4c8>
    60cc:	mov	r6, r0
    60d0:	mov	r0, r5
    60d4:	mov	r1, #8
    60d8:	bl	0 <flatcc_builder_table_add_offset>
    60dc:	cmp	r0, #0
    60e0:	movne	r1, #1
    60e4:	strbne	r1, [r6]
    60e8:	strne	r4, [r0]
    60ec:	ldr	r0, [sl, #-4]
    60f0:	mov	r2, #1
    60f4:	mvn	r1, #0
    60f8:	mov	r3, #1
    60fc:	str	r2, [sp]
    6100:	str	r1, [sp, #4]
    6104:	cmp	r0, #3
    6108:	mov	r2, r0
    610c:	movcs	r2, #3
    6110:	add	r1, sl, r2
    6114:	sub	r2, r0, r2
    6118:	mov	r0, r5
    611c:	bl	0 <flatcc_builder_create_vector>
    6120:	cmp	r0, #0
    6124:	beq	6140 <test_clone_slice+0x51c>
    6128:	mov	r4, r0
    612c:	mov	r0, r5
    6130:	mov	r1, #24
    6134:	bl	0 <flatcc_builder_table_add_offset>
    6138:	cmp	r0, #0
    613c:	strne	r4, [r0]
    6140:	ldr	r1, [r7]
    6144:	mov	r0, r7
    6148:	movw	r6, #20301	; 0x4f4d
    614c:	movt	r6, #21326	; 0x534e
    6150:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    6154:	cmp	r1, #6
    6158:	bcc	6170 <test_clone_slice+0x54c>
    615c:	ldrh	r0, [r0, #4]
    6160:	cmp	r0, #0
    6164:	beq	6170 <test_clone_slice+0x54c>
    6168:	add	r2, r7, r0
    616c:	b	6174 <test_clone_slice+0x550>
    6170:	mov	r2, #0
    6174:	mov	r0, #16
    6178:	mov	r1, #0
    617c:	mov	r3, #32
    6180:	str	r0, [sp]
    6184:	mov	r0, r5
    6188:	bl	0 <flatcc_builder_table_add_copy>
    618c:	ldr	r2, [r9, #-4]
    6190:	mvn	r0, #-1073741824	; 0xc0000000
    6194:	mov	r1, #2
    6198:	mov	r3, #4
    619c:	str	r1, [sp]
    61a0:	str	r0, [sp, #4]
    61a4:	mov	r0, r5
    61a8:	mov	r1, r9
    61ac:	bl	0 <flatcc_builder_create_vector>
    61b0:	cmp	r0, #0
    61b4:	beq	61d0 <test_clone_slice+0x5ac>
    61b8:	mov	r4, r0
    61bc:	mov	r0, r5
    61c0:	mov	r1, #9
    61c4:	bl	0 <flatcc_builder_table_add_offset>
    61c8:	cmp	r0, #0
    61cc:	strne	r4, [r0]
    61d0:	movw	r1, #0
    61d4:	mov	r0, r5
    61d8:	mov	r2, #1
    61dc:	movt	r1, #0
    61e0:	bl	0 <flatcc_builder_check_required>
    61e4:	cmp	r0, #0
    61e8:	beq	65ac <test_clone_slice+0x988>
    61ec:	mov	r0, r5
    61f0:	bl	0 <flatcc_builder_end_table>
    61f4:	mov	r1, r0
    61f8:	mov	r0, r5
    61fc:	bl	0 <flatcc_builder_end_buffer>
    6200:	add	r1, sp, #32
    6204:	mov	r0, r5
    6208:	bl	0 <flatcc_builder_get_direct_buffer>
    620c:	mov	r5, r0
    6210:	movw	r0, #0
    6214:	ldr	r2, [sp, #32]
    6218:	movt	r0, #0
    621c:	mov	r1, r5
    6220:	ldr	r3, [r0]
    6224:	movw	r0, #0
    6228:	movt	r0, #0
    622c:	bl	5d4 <hexdump>
    6230:	cmp	r5, #0
    6234:	beq	65cc <test_clone_slice+0x9a8>
    6238:	ldr	r0, [r5, #4]
    623c:	cmp	r0, r6
    6240:	bne	65cc <test_clone_slice+0x9a8>
    6244:	ldr	r0, [r5]
    6248:	ldr	r0, [r5, r0]!
    624c:	mov	r6, r5
    6250:	ldrh	r8, [r6, -r0]!
    6254:	cmp	r8, #11
    6258:	bls	65a0 <test_clone_slice+0x97c>
    625c:	ldrh	r0, [r6, #10]
    6260:	cmp	r0, #0
    6264:	beq	65a0 <test_clone_slice+0x97c>
    6268:	mov	r1, r5
    626c:	ldr	r0, [r1, r0]!
    6270:	add	r0, r1, r0
    6274:	movw	r1, #0
    6278:	movt	r1, #0
    627c:	add	r0, r0, #4
    6280:	bl	0 <strcmp>
    6284:	cmp	r0, #0
    6288:	beq	62b0 <test_clone_slice+0x68c>
    628c:	movw	r0, #0
    6290:	movt	r0, #0
    6294:	bl	0 <puts>
    6298:	mvn	r5, #0
    629c:	ldr	r0, [sp, #20]
    62a0:	bl	0 <flatcc_builder_aligned_free>
    62a4:	mov	r0, r5
    62a8:	sub	sp, fp, #28
    62ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62b0:	cmp	r8, #26
    62b4:	bcc	62d4 <test_clone_slice+0x6b0>
    62b8:	ldrh	r1, [r6, #24]
    62bc:	cmp	r1, #0
    62c0:	movne	r0, r5
    62c4:	ldrne	r1, [r0, r1]!
    62c8:	ldrne	r7, [r0, r1]!
    62cc:	cmpne	r7, #0
    62d0:	bne	62f4 <test_clone_slice+0x6d0>
    62d4:	movw	r0, #0
    62d8:	movw	r1, #0
    62dc:	movw	r3, #0
    62e0:	mov	r2, #108	; 0x6c
    62e4:	movt	r0, #0
    62e8:	movt	r1, #0
    62ec:	movt	r3, #0
    62f0:	bl	0 <__assert_fail>
    62f4:	add	r4, r0, #4
    62f8:	movw	r1, #0
    62fc:	ldr	r0, [r4]
    6300:	movt	r1, #0
    6304:	add	r0, r4, r0
    6308:	add	r0, r0, #4
    630c:	bl	0 <strcmp>
    6310:	cmp	r0, #0
    6314:	beq	6324 <test_clone_slice+0x700>
    6318:	movw	r0, #0
    631c:	movt	r0, #0
    6320:	b	6294 <test_clone_slice+0x670>
    6324:	cmp	r7, #1
    6328:	bls	62d4 <test_clone_slice+0x6b0>
    632c:	mov	r0, r4
    6330:	ldr	r1, [r0, #4]!
    6334:	ldr	r1, [r0, r1]!
    6338:	cmp	r1, #6
    633c:	bne	6364 <test_clone_slice+0x740>
    6340:	movw	r1, #0
    6344:	add	r0, r0, #4
    6348:	movt	r1, #0
    634c:	bl	0 <strcmp>
    6350:	cmp	r0, #0
    6354:	beq	6370 <test_clone_slice+0x74c>
    6358:	movw	r0, #0
    635c:	movt	r0, #0
    6360:	b	6294 <test_clone_slice+0x670>
    6364:	movw	r0, #0
    6368:	movt	r0, #0
    636c:	b	6294 <test_clone_slice+0x670>
    6370:	cmp	r7, #2
    6374:	bls	62d4 <test_clone_slice+0x6b0>
    6378:	ldr	r0, [r4, #8]!
    637c:	ldr	r0, [r4, r0]!
    6380:	cmp	r0, #3
    6384:	bne	63ac <test_clone_slice+0x788>
    6388:	movw	r1, #0
    638c:	add	r0, r4, #4
    6390:	movt	r1, #0
    6394:	bl	0 <strcmp>
    6398:	cmp	r0, #0
    639c:	beq	63b8 <test_clone_slice+0x794>
    63a0:	movw	r0, #0
    63a4:	movt	r0, #0
    63a8:	b	6294 <test_clone_slice+0x670>
    63ac:	movw	r0, #0
    63b0:	movt	r0, #0
    63b4:	b	6294 <test_clone_slice+0x670>
    63b8:	ldrh	r0, [r6, #20]
    63bc:	cmp	r0, #0
    63c0:	beq	6624 <test_clone_slice+0xa00>
    63c4:	mov	r4, r5
    63c8:	ldr	r0, [r4, r0]!
    63cc:	ldr	r0, [r4, r0]!
    63d0:	mov	sl, r4
    63d4:	ldrh	r7, [sl, -r0]!
    63d8:	cmp	r7, #11
    63dc:	bls	65a0 <test_clone_slice+0x97c>
    63e0:	ldrh	r0, [sl, #10]
    63e4:	cmp	r0, #0
    63e8:	beq	65a0 <test_clone_slice+0x97c>
    63ec:	mov	r1, r4
    63f0:	ldr	r0, [r1, r0]!
    63f4:	add	r0, r1, r0
    63f8:	movw	r1, #0
    63fc:	movt	r1, #0
    6400:	add	r0, r0, #4
    6404:	bl	0 <strcmp>
    6408:	cmp	r0, #0
    640c:	beq	6420 <test_clone_slice+0x7fc>
    6410:	movw	r0, #0
    6414:	movt	r0, #0
    6418:	bl	0 <printf>
    641c:	b	6298 <test_clone_slice+0x674>
    6420:	cmp	r7, #54	; 0x36
    6424:	bcc	6470 <test_clone_slice+0x84c>
    6428:	ldrh	r1, [sl, #52]	; 0x34
    642c:	cmp	r1, #0
    6430:	beq	6470 <test_clone_slice+0x84c>
    6434:	mov	r0, r4
    6438:	ldr	r1, [r0, r1]!
    643c:	ldr	r1, [r0, r1]!
    6440:	cmp	r1, #7
    6444:	bne	6470 <test_clone_slice+0x84c>
    6448:	add	r9, sp, #24
    644c:	add	r0, r0, #4
    6450:	mov	r2, #7
    6454:	mov	r1, r9
    6458:	bl	0 <bcmp>
    645c:	cmp	r0, #0
    6460:	beq	647c <test_clone_slice+0x858>
    6464:	movw	r0, #0
    6468:	movt	r0, #0
    646c:	b	6294 <test_clone_slice+0x670>
    6470:	movw	r0, #0
    6474:	movt	r0, #0
    6478:	b	6294 <test_clone_slice+0x670>
    647c:	cmp	r8, #54	; 0x36
    6480:	bcc	64c8 <test_clone_slice+0x8a4>
    6484:	ldrh	r1, [r6, #52]	; 0x34
    6488:	cmp	r1, #0
    648c:	beq	64c8 <test_clone_slice+0x8a4>
    6490:	mov	r0, r5
    6494:	ldr	r1, [r0, r1]!
    6498:	ldr	r1, [r0, r1]!
    649c:	cmp	r1, #4
    64a0:	bne	64c8 <test_clone_slice+0x8a4>
    64a4:	add	r0, r0, #4
    64a8:	orr	r1, r9, #3
    64ac:	mov	r2, #4
    64b0:	bl	0 <bcmp>
    64b4:	cmp	r0, #0
    64b8:	beq	64d4 <test_clone_slice+0x8b0>
    64bc:	movw	r0, #0
    64c0:	movt	r0, #0
    64c4:	b	6294 <test_clone_slice+0x670>
    64c8:	movw	r0, #0
    64cc:	movt	r0, #0
    64d0:	b	6294 <test_clone_slice+0x670>
    64d4:	ldrh	r0, [r6, #4]
    64d8:	vldr	s0, [pc, #348]	; 663c <test_clone_slice+0xa18>
    64dc:	add	r0, r5, r0
    64e0:	vldr	s2, [r0]
    64e4:	vcmp.f32	s2, s0
    64e8:	vmrs	APSR_nzcv, fpscr
    64ec:	beq	64fc <test_clone_slice+0x8d8>
    64f0:	movw	r0, #0
    64f4:	movt	r0, #0
    64f8:	b	6294 <test_clone_slice+0x670>
    64fc:	ldrh	r0, [r6, #22]
    6500:	cmp	r0, #0
    6504:	beq	6570 <test_clone_slice+0x94c>
    6508:	ldr	r0, [r5, r0]!
    650c:	ldr	r0, [r5, r0]!
    6510:	cmp	r0, #2
    6514:	bne	6570 <test_clone_slice+0x94c>
    6518:	add	r0, r5, #4
    651c:	ldrh	r1, [r0]
    6520:	cmp	r1, #22
    6524:	bne	657c <test_clone_slice+0x958>
    6528:	ldrh	r0, [r0, #4]
    652c:	cmp	r0, #44	; 0x2c
    6530:	bne	6588 <test_clone_slice+0x964>
    6534:	ldrh	r0, [sl, #22]
    6538:	cmp	r0, #0
    653c:	beq	6594 <test_clone_slice+0x970>
    6540:	ldr	r0, [r4, r0]!
    6544:	ldr	r0, [r4, r0]!
    6548:	cmp	r0, #1
    654c:	bne	6594 <test_clone_slice+0x970>
    6550:	add	r0, r4, #4
    6554:	mov	r5, #0
    6558:	ldrh	r0, [r0]
    655c:	cmp	r0, #44	; 0x2c
    6560:	beq	629c <test_clone_slice+0x678>
    6564:	movw	r0, #0
    6568:	movt	r0, #0
    656c:	b	6294 <test_clone_slice+0x670>
    6570:	movw	r0, #0
    6574:	movt	r0, #0
    6578:	b	6294 <test_clone_slice+0x670>
    657c:	movw	r0, #0
    6580:	movt	r0, #0
    6584:	b	6294 <test_clone_slice+0x670>
    6588:	movw	r0, #0
    658c:	movt	r0, #0
    6590:	b	6294 <test_clone_slice+0x670>
    6594:	movw	r0, #0
    6598:	movt	r0, #0
    659c:	b	6294 <test_clone_slice+0x670>
    65a0:	movw	r0, #0
    65a4:	movt	r0, #0
    65a8:	b	65d4 <test_clone_slice+0x9b0>
    65ac:	movw	r0, #0
    65b0:	movw	r1, #0
    65b4:	movw	r3, #0
    65b8:	mov	r2, #235	; 0xeb
    65bc:	movt	r0, #0
    65c0:	movt	r1, #0
    65c4:	movt	r3, #0
    65c8:	bl	0 <__assert_fail>
    65cc:	movw	r0, #0
    65d0:	movt	r0, #0
    65d4:	movw	r1, #0
    65d8:	movw	r3, #0
    65dc:	movw	r2, #699	; 0x2bb
    65e0:	movt	r1, #0
    65e4:	movt	r3, #0
    65e8:	bl	0 <__assert_fail>
    65ec:	movw	r0, #0
    65f0:	movw	r1, #0
    65f4:	movw	r3, #0
    65f8:	movw	r2, #1606	; 0x646
    65fc:	movt	r0, #0
    6600:	b	6618 <test_clone_slice+0x9f4>
    6604:	movw	r0, #0
    6608:	movw	r1, #0
    660c:	movw	r3, #0
    6610:	movw	r2, #1608	; 0x648
    6614:	movt	r0, #0
    6618:	movt	r1, #0
    661c:	movt	r3, #0
    6620:	bl	0 <__assert_fail>
    6624:	movw	r0, #0
    6628:	movw	r1, #0
    662c:	movw	r3, #0
    6630:	mov	r2, #1664	; 0x680
    6634:	movt	r0, #0
    6638:	b	6618 <test_clone_slice+0x9f4>
    663c:	.word	0xc2293333

00006640 <test_create_add_field>:
    6640:	push	{r4, r5, fp, lr}
    6644:	add	fp, sp, #8
    6648:	sub	sp, sp, #8
    664c:	mov	r4, r0
    6650:	bl	0 <flatcc_builder_reset>
    6654:	movw	r1, #0
    6658:	mov	r0, r4
    665c:	mov	r2, #0
    6660:	mov	r3, #0
    6664:	movt	r1, #0
    6668:	bl	0 <flatcc_builder_start_buffer>
    666c:	cmp	r0, #0
    6670:	bne	6680 <test_create_add_field+0x40>
    6674:	mov	r0, r4
    6678:	mov	r1, #36	; 0x24
    667c:	bl	0 <flatcc_builder_start_table>
    6680:	movw	r1, #0
    6684:	mov	r0, r4
    6688:	movt	r1, #0
    668c:	bl	0 <flatcc_builder_create_string_str>
    6690:	cmp	r0, #0
    6694:	beq	66b0 <test_create_add_field+0x70>
    6698:	mov	r5, r0
    669c:	mov	r0, r4
    66a0:	mov	r1, #3
    66a4:	bl	0 <flatcc_builder_table_add_offset>
    66a8:	cmp	r0, #0
    66ac:	strne	r5, [r0]
    66b0:	movw	r1, #0
    66b4:	mov	r0, r4
    66b8:	movt	r1, #0
    66bc:	bl	0 <flatcc_builder_create_string_str>
    66c0:	mov	r5, r0
    66c4:	mov	r0, r4
    66c8:	mov	r1, #3
    66cc:	bl	0 <flatcc_builder_start_table>
    66d0:	cmp	r0, #0
    66d4:	beq	6768 <test_create_add_field+0x128>
    66d8:	movw	r1, #0
    66dc:	mov	r0, r4
    66e0:	mov	r2, #1
    66e4:	movt	r1, #0
    66e8:	bl	0 <flatcc_builder_check_required>
    66ec:	cmp	r0, #0
    66f0:	beq	68dc <test_create_add_field+0x29c>
    66f4:	mov	r0, r4
    66f8:	bl	0 <flatcc_builder_end_table>
    66fc:	mov	r1, r0
    6700:	mov	r0, r4
    6704:	bl	0 <flatcc_builder_end_buffer>
    6708:	add	r1, sp, #4
    670c:	mov	r0, r4
    6710:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    6714:	cmp	r0, #0
    6718:	beq	689c <test_create_add_field+0x25c>
    671c:	mov	r4, r0
    6720:	ldr	r0, [r0, #4]
    6724:	movw	r1, #20301	; 0x4f4d
    6728:	movt	r1, #21326	; 0x534e
    672c:	cmp	r0, r1
    6730:	bne	689c <test_create_add_field+0x25c>
    6734:	ldr	r0, [r4]
    6738:	mov	r1, r4
    673c:	ldr	r2, [r1, r0]!
    6740:	mov	r0, r1
    6744:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
    6748:	cmp	r2, #29
    674c:	bls	68bc <test_create_add_field+0x27c>
    6750:	ldrh	r3, [r0, #28]
    6754:	cmp	r3, #0
    6758:	beq	6820 <test_create_add_field+0x1e0>
    675c:	movw	r0, #0
    6760:	movt	r0, #0
    6764:	b	6880 <test_create_add_field+0x240>
    6768:	mov	r0, r4
    676c:	mov	r1, #1
    6770:	mov	r2, #8
    6774:	mov	r3, #8
    6778:	bl	0 <flatcc_builder_table_add>
    677c:	cmp	r0, #0
    6780:	beq	66d8 <test_create_add_field+0x98>
    6784:	mvn	r2, #99	; 0x63
    6788:	cmp	r5, #0
    678c:	mvn	r1, #0
    6790:	str	r2, [r0]
    6794:	str	r1, [r0, #4]
    6798:	beq	66d8 <test_create_add_field+0x98>
    679c:	mov	r0, r4
    67a0:	mov	r1, #0
    67a4:	bl	0 <flatcc_builder_table_add_offset>
    67a8:	cmp	r0, #0
    67ac:	beq	66d8 <test_create_add_field+0x98>
    67b0:	str	r5, [r0]
    67b4:	mov	r0, r4
    67b8:	mov	r1, #2
    67bc:	mov	r2, #2
    67c0:	mov	r3, #2
    67c4:	mov	r5, #2
    67c8:	bl	0 <flatcc_builder_table_add>
    67cc:	cmp	r0, #0
    67d0:	beq	66d8 <test_create_add_field+0x98>
    67d4:	movw	r1, #0
    67d8:	strh	r5, [r0]
    67dc:	mov	r0, r4
    67e0:	mov	r2, #0
    67e4:	movt	r1, #0
    67e8:	bl	0 <flatcc_builder_check_required>
    67ec:	cmp	r0, #0
    67f0:	beq	68fc <test_create_add_field+0x2bc>
    67f4:	mov	r0, r4
    67f8:	bl	0 <flatcc_builder_end_table>
    67fc:	cmp	r0, #0
    6800:	beq	66d8 <test_create_add_field+0x98>
    6804:	mov	r5, r0
    6808:	mov	r0, r4
    680c:	mov	r1, #14
    6810:	bl	0 <flatcc_builder_table_add_offset>
    6814:	cmp	r0, #0
    6818:	strne	r5, [r0]
    681c:	b	66d8 <test_create_add_field+0x98>
    6820:	cmp	r2, #34	; 0x22
    6824:	bcc	68bc <test_create_add_field+0x27c>
    6828:	ldrh	r0, [r0, #32]
    682c:	cmp	r0, #0
    6830:	beq	68bc <test_create_add_field+0x27c>
    6834:	ldr	r0, [r1, r0]!
    6838:	ldr	r0, [r1, r0]!
    683c:	mov	r2, r1
    6840:	ldrh	r3, [r2, -r0]!
    6844:	movw	r0, #0
    6848:	movt	r0, #0
    684c:	cmp	r3, #7
    6850:	bls	6880 <test_create_add_field+0x240>
    6854:	ldrh	r2, [r2, #6]
    6858:	cmp	r2, #0
    685c:	beq	6880 <test_create_add_field+0x240>
    6860:	ldr	r2, [r1, r2]!
    6864:	mvn	r3, #99	; 0x63
    6868:	mov	r5, #0
    686c:	ldr	r1, [r1, #4]
    6870:	eor	r2, r2, r3
    6874:	mvn	r1, r1
    6878:	orrs	r1, r2, r1
    687c:	beq	6888 <test_create_add_field+0x248>
    6880:	bl	0 <puts>
    6884:	mvn	r5, #0
    6888:	mov	r0, r4
    688c:	bl	0 <flatcc_builder_aligned_free>
    6890:	mov	r0, r5
    6894:	sub	sp, fp, #8
    6898:	pop	{r4, r5, fp, pc}
    689c:	movw	r0, #0
    68a0:	movw	r1, #0
    68a4:	movw	r3, #0
    68a8:	mov	r2, #716	; 0x2cc
    68ac:	movt	r0, #0
    68b0:	movt	r1, #0
    68b4:	movt	r3, #0
    68b8:	bl	0 <__assert_fail>
    68bc:	movw	r0, #0
    68c0:	movw	r1, #0
    68c4:	movw	r3, #0
    68c8:	mov	r2, #608	; 0x260
    68cc:	movt	r0, #0
    68d0:	movt	r1, #0
    68d4:	movt	r3, #0
    68d8:	bl	0 <__assert_fail>
    68dc:	movw	r0, #0
    68e0:	movw	r1, #0
    68e4:	movw	r3, #0
    68e8:	mov	r2, #235	; 0xeb
    68ec:	movt	r0, #0
    68f0:	movt	r1, #0
    68f4:	movt	r3, #0
    68f8:	bl	0 <__assert_fail>
    68fc:	movw	r0, #0
    6900:	movw	r1, #0
    6904:	movw	r3, #0
    6908:	mov	r2, #221	; 0xdd
    690c:	movt	r0, #0
    6910:	movt	r1, #0
    6914:	movt	r3, #0
    6918:	bl	0 <__assert_fail>

0000691c <test_union_vector>:
    691c:	push	{r4, r5, r6, r7, fp, lr}
    6920:	add	fp, sp, #16
    6924:	sub	sp, sp, #16
    6928:	mov	r4, r0
    692c:	bl	0 <flatcc_builder_reset>
    6930:	movw	r1, #0
    6934:	mov	r0, r4
    6938:	mov	r2, #0
    693c:	mov	r3, #0
    6940:	movt	r1, #0
    6944:	bl	0 <flatcc_builder_start_buffer>
    6948:	cmp	r0, #0
    694c:	bne	695c <test_union_vector+0x40>
    6950:	mov	r0, r4
    6954:	mov	r1, #36	; 0x24
    6958:	bl	0 <flatcc_builder_start_table>
    695c:	movw	r1, #0
    6960:	mov	r0, r4
    6964:	movt	r1, #0
    6968:	bl	0 <flatcc_builder_create_string_str>
    696c:	cmp	r0, #0
    6970:	beq	698c <test_union_vector+0x70>
    6974:	mov	r5, r0
    6978:	mov	r0, r4
    697c:	mov	r1, #3
    6980:	bl	0 <flatcc_builder_table_add_offset>
    6984:	cmp	r0, #0
    6988:	strne	r5, [r0]
    698c:	mov	r0, r4
    6990:	mov	r1, #4
    6994:	bl	0 <flatcc_builder_start_table>
    6998:	mov	r5, #0
    699c:	cmp	r0, #0
    69a0:	bne	69cc <test_union_vector+0xb0>
    69a4:	movw	r1, #0
    69a8:	mov	r0, r4
    69ac:	mov	r2, #0
    69b0:	movt	r1, #0
    69b4:	bl	0 <flatcc_builder_check_required>
    69b8:	cmp	r0, #0
    69bc:	beq	6e18 <test_union_vector+0x4fc>
    69c0:	mov	r0, r4
    69c4:	bl	0 <flatcc_builder_end_table>
    69c8:	mov	r5, r0
    69cc:	mov	r0, r4
    69d0:	bl	0 <flatcc_builder_start_union_vector>
    69d4:	mov	r0, r4
    69d8:	mov	r1, #2
    69dc:	mov	r2, r5
    69e0:	bl	0 <flatcc_builder_union_vector_push>
    69e4:	add	r0, sp, #4
    69e8:	mov	r1, r4
    69ec:	bl	0 <flatcc_builder_end_union_vector>
    69f0:	ldr	r6, [sp, #4]
    69f4:	ldr	r5, [sp, #8]
    69f8:	mov	r0, r4
    69fc:	mov	r1, #4
    6a00:	bl	0 <flatcc_builder_start_table>
    6a04:	cmp	r6, #0
    6a08:	cmpne	r5, #0
    6a0c:	bne	6b94 <test_union_vector+0x278>
    6a10:	movw	r1, #0
    6a14:	mov	r0, r4
    6a18:	mov	r2, #0
    6a1c:	movt	r1, #0
    6a20:	bl	0 <flatcc_builder_check_required>
    6a24:	cmp	r0, #0
    6a28:	beq	6db8 <test_union_vector+0x49c>
    6a2c:	mov	r0, r4
    6a30:	bl	0 <flatcc_builder_end_table>
    6a34:	cmp	r0, #0
    6a38:	beq	6a7c <test_union_vector+0x160>
    6a3c:	mov	r5, r0
    6a40:	mov	r0, r4
    6a44:	mov	r1, #7
    6a48:	mov	r2, #1
    6a4c:	mov	r3, #1
    6a50:	bl	0 <flatcc_builder_table_add>
    6a54:	cmp	r0, #0
    6a58:	beq	6a7c <test_union_vector+0x160>
    6a5c:	mov	r6, r0
    6a60:	mov	r0, r4
    6a64:	mov	r1, #8
    6a68:	bl	0 <flatcc_builder_table_add_offset>
    6a6c:	cmp	r0, #0
    6a70:	movne	r1, #4
    6a74:	strbne	r1, [r6]
    6a78:	strne	r5, [r0]
    6a7c:	movw	r1, #0
    6a80:	mov	r0, r4
    6a84:	mov	r2, #1
    6a88:	movt	r1, #0
    6a8c:	bl	0 <flatcc_builder_check_required>
    6a90:	cmp	r0, #0
    6a94:	beq	6dd8 <test_union_vector+0x4bc>
    6a98:	mov	r0, r4
    6a9c:	bl	0 <flatcc_builder_end_table>
    6aa0:	mov	r1, r0
    6aa4:	mov	r0, r4
    6aa8:	bl	0 <flatcc_builder_end_buffer>
    6aac:	add	r1, sp, #12
    6ab0:	mov	r0, r4
    6ab4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    6ab8:	ldr	r1, [sp, #12]
    6abc:	movw	r2, #0
    6ac0:	movw	r3, #0
    6ac4:	mov	r4, r0
    6ac8:	movt	r2, #0
    6acc:	movt	r3, #0
    6ad0:	bl	0 <flatcc_verify_table_as_root>
    6ad4:	cmp	r0, #0
    6ad8:	beq	6afc <test_union_vector+0x1e0>
    6adc:	bl	0 <flatcc_verify_error_string>
    6ae0:	mov	r1, r0
    6ae4:	movw	r0, #0
    6ae8:	movt	r0, #0
    6aec:	bl	0 <printf>
    6af0:	mvn	r0, #0
    6af4:	sub	sp, fp, #16
    6af8:	pop	{r4, r5, r6, r7, fp, pc}
    6afc:	cmp	r4, #0
    6b00:	beq	6df8 <test_union_vector+0x4dc>
    6b04:	ldr	r0, [r4, #4]
    6b08:	movw	r1, #20301	; 0x4f4d
    6b0c:	movt	r1, #21326	; 0x534e
    6b10:	cmp	r0, r1
    6b14:	bne	6df8 <test_union_vector+0x4dc>
    6b18:	ldr	r0, [r4]
    6b1c:	mov	r7, r4
    6b20:	ldr	r1, [r7, r0]!
    6b24:	mov	r0, r7
    6b28:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    6b2c:	cmp	r1, #19
    6b30:	bls	6bc4 <test_union_vector+0x2a8>
    6b34:	ldrh	r3, [r0, #18]
    6b38:	cmp	r3, #0
    6b3c:	beq	6bc4 <test_union_vector+0x2a8>
    6b40:	ldrb	r3, [r7, r3]
    6b44:	cmp	r3, #4
    6b48:	bne	6bc4 <test_union_vector+0x2a8>
    6b4c:	cmp	r1, #22
    6b50:	bcc	6b84 <test_union_vector+0x268>
    6b54:	ldrh	r0, [r0, #20]
    6b58:	cmp	r0, #0
    6b5c:	beq	6b84 <test_union_vector+0x268>
    6b60:	ldr	r0, [r7, r0]!
    6b64:	ldr	r0, [r7, r0]!
    6b68:	mov	r3, r7
    6b6c:	ldrh	r6, [r3, -r0]!
    6b70:	cmp	r6, #12
    6b74:	bcc	6be4 <test_union_vector+0x2c8>
    6b78:	ldrh	r0, [r3, #10]
    6b7c:	cmp	r0, #0
    6b80:	beq	6bec <test_union_vector+0x2d0>
    6b84:	movw	r0, #0
    6b88:	movt	r0, #0
    6b8c:	bl	0 <puts>
    6b90:	b	6bd0 <test_union_vector+0x2b4>
    6b94:	mov	r0, r4
    6b98:	mov	r1, #2
    6b9c:	bl	0 <flatcc_builder_table_add_offset>
    6ba0:	cmp	r0, #0
    6ba4:	beq	6a10 <test_union_vector+0xf4>
    6ba8:	str	r6, [r0]
    6bac:	mov	r0, r4
    6bb0:	mov	r1, #3
    6bb4:	bl	0 <flatcc_builder_table_add_offset>
    6bb8:	cmp	r0, #0
    6bbc:	strne	r5, [r0]
    6bc0:	b	6a10 <test_union_vector+0xf4>
    6bc4:	movw	r0, #0
    6bc8:	movt	r0, #0
    6bcc:	bl	0 <printf>
    6bd0:	mov	r0, r4
    6bd4:	bl	0 <flatcc_builder_aligned_free>
    6bd8:	mov	r0, #0
    6bdc:	sub	sp, fp, #16
    6be0:	pop	{r4, r5, r6, r7, fp, pc}
    6be4:	cmp	r6, #10
    6be8:	bcc	6c94 <test_union_vector+0x378>
    6bec:	ldrh	r5, [r3, #8]
    6bf0:	mov	lr, #0
    6bf4:	mov	r1, #0
    6bf8:	cmp	r5, #0
    6bfc:	beq	6c10 <test_union_vector+0x2f4>
    6c00:	mov	r1, r7
    6c04:	ldr	r0, [r1, r5]!
    6c08:	add	r0, r1, r0
    6c0c:	add	r1, r0, #4
    6c10:	cmp	r6, #12
    6c14:	bcc	6c44 <test_union_vector+0x328>
    6c18:	ldrh	r0, [r3, #10]
    6c1c:	cmp	r0, #0
    6c20:	beq	6c40 <test_union_vector+0x324>
    6c24:	mov	r2, r7
    6c28:	ldr	r0, [r2, r0]!
    6c2c:	add	r0, r2, r0
    6c30:	add	lr, r0, #4
    6c34:	cmp	r1, #0
    6c38:	bne	6c4c <test_union_vector+0x330>
    6c3c:	b	6c94 <test_union_vector+0x378>
    6c40:	mov	lr, #0
    6c44:	cmp	r1, #0
    6c48:	beq	6c94 <test_union_vector+0x378>
    6c4c:	ldr	r0, [r1, #-4]
    6c50:	cmp	r0, #1
    6c54:	bne	6c94 <test_union_vector+0x378>
    6c58:	ldrb	r0, [r1]
    6c5c:	cmp	r0, #2
    6c60:	bne	6ca0 <test_union_vector+0x384>
    6c64:	cmp	lr, #0
    6c68:	ldrne	r0, [lr, #-4]
    6c6c:	cmpne	r0, #0
    6c70:	bne	6cac <test_union_vector+0x390>
    6c74:	movw	r0, #0
    6c78:	movw	r1, #0
    6c7c:	movw	r3, #0
    6c80:	mov	r2, #117	; 0x75
    6c84:	movt	r0, #0
    6c88:	movt	r1, #0
    6c8c:	movt	r3, #0
    6c90:	bl	0 <__assert_fail>
    6c94:	movw	r0, #0
    6c98:	movt	r0, #0
    6c9c:	b	6b8c <test_union_vector+0x270>
    6ca0:	movw	r0, #0
    6ca4:	movt	r0, #0
    6ca8:	b	6b8c <test_union_vector+0x270>
    6cac:	ldr	r0, [lr]
    6cb0:	ldr	r0, [lr, r0]!
    6cb4:	mov	r1, lr
    6cb8:	ldrh	r0, [r1, -r0]!	; <UNPREDICTABLE>
    6cbc:	cmp	r0, #6
    6cc0:	bcc	6ce0 <test_union_vector+0x3c4>
    6cc4:	ldrh	r1, [r1, #4]
    6cc8:	cmp	r1, #0
    6ccc:	beq	6ce0 <test_union_vector+0x3c4>
    6cd0:	add	r0, lr, r1
    6cd4:	ldrsb	r1, [r0]
    6cd8:	cmp	r1, #2
    6cdc:	bne	6d9c <test_union_vector+0x480>
    6ce0:	mov	ip, #0
    6ce4:	cmp	r5, #0
    6ce8:	mov	r1, #0
    6cec:	beq	6d00 <test_union_vector+0x3e4>
    6cf0:	mov	r0, r7
    6cf4:	ldr	r1, [r0, r5]!
    6cf8:	add	r0, r0, r1
    6cfc:	add	r1, r0, #4
    6d00:	cmp	r6, #12
    6d04:	bcc	6d1c <test_union_vector+0x400>
    6d08:	ldrh	r3, [r3, #10]
    6d0c:	cmp	r3, #0
    6d10:	ldrne	r0, [r7, r3]!
    6d14:	addne	r0, r7, r0
    6d18:	addne	ip, r0, #4
    6d1c:	cmp	r1, #0
    6d20:	mov	r3, #0
    6d24:	mov	r2, #0
    6d28:	ldrne	r3, [r1, #-4]
    6d2c:	cmp	ip, #0
    6d30:	ldrne	r2, [ip, #-4]
    6d34:	cmp	r3, r2
    6d38:	bne	6e38 <test_union_vector+0x51c>
    6d3c:	cmp	r1, #0
    6d40:	beq	6d90 <test_union_vector+0x474>
    6d44:	ldr	r0, [r1, #-4]
    6d48:	cmp	r0, #1
    6d4c:	bne	6d90 <test_union_vector+0x474>
    6d50:	ldrb	r1, [r1]
    6d54:	cmp	r1, #0
    6d58:	beq	6dac <test_union_vector+0x490>
    6d5c:	cmp	ip, #0
    6d60:	ldrne	r0, [ip, #-4]
    6d64:	cmpne	r0, #0
    6d68:	beq	6c74 <test_union_vector+0x358>
    6d6c:	cmp	r1, #2
    6d70:	bne	6dac <test_union_vector+0x490>
    6d74:	ldr	r0, [ip]
    6d78:	add	r0, ip, r0
    6d7c:	cmp	r0, lr
    6d80:	beq	6bd0 <test_union_vector+0x2b4>
    6d84:	movw	r0, #0
    6d88:	movt	r0, #0
    6d8c:	b	6b8c <test_union_vector+0x270>
    6d90:	movw	r0, #0
    6d94:	movt	r0, #0
    6d98:	b	6b8c <test_union_vector+0x270>
    6d9c:	movw	r0, #0
    6da0:	movt	r0, #0
    6da4:	bl	0 <printf>
    6da8:	b	6bd0 <test_union_vector+0x2b4>
    6dac:	movw	r0, #0
    6db0:	movt	r0, #0
    6db4:	b	6b8c <test_union_vector+0x270>
    6db8:	movw	r0, #0
    6dbc:	movw	r1, #0
    6dc0:	movw	r3, #0
    6dc4:	mov	r2, #223	; 0xdf
    6dc8:	movt	r0, #0
    6dcc:	movt	r1, #0
    6dd0:	movt	r3, #0
    6dd4:	bl	0 <__assert_fail>
    6dd8:	movw	r0, #0
    6ddc:	movw	r1, #0
    6de0:	movw	r3, #0
    6de4:	mov	r2, #235	; 0xeb
    6de8:	movt	r0, #0
    6dec:	movt	r1, #0
    6df0:	movt	r3, #0
    6df4:	bl	0 <__assert_fail>
    6df8:	movw	r0, #0
    6dfc:	movw	r1, #0
    6e00:	movw	r3, #0
    6e04:	movw	r2, #717	; 0x2cd
    6e08:	movt	r0, #0
    6e0c:	movt	r1, #0
    6e10:	movt	r3, #0
    6e14:	bl	0 <__assert_fail>
    6e18:	movw	r0, #0
    6e1c:	movw	r1, #0
    6e20:	movw	r3, #0
    6e24:	mov	r2, #217	; 0xd9
    6e28:	movt	r0, #0
    6e2c:	movt	r1, #0
    6e30:	movt	r3, #0
    6e34:	bl	0 <__assert_fail>
    6e38:	movw	r0, #0
    6e3c:	movw	r1, #0
    6e40:	movw	r3, #0
    6e44:	movw	r2, #621	; 0x26d
    6e48:	movt	r0, #0
    6e4c:	movt	r1, #0
    6e50:	movt	r3, #0
    6e54:	bl	0 <__assert_fail>

00006e58 <test_mixed_type_union>:
    6e58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    6e5c:	add	fp, sp, #24
    6e60:	sub	sp, sp, #16
    6e64:	mov	r4, r0
    6e68:	bl	0 <flatcc_builder_reset>
    6e6c:	movw	r1, #0
    6e70:	mov	r0, r4
    6e74:	mov	r2, #0
    6e78:	mov	r3, #0
    6e7c:	mov	r8, #0
    6e80:	movt	r1, #0
    6e84:	bl	0 <flatcc_builder_start_buffer>
    6e88:	cmp	r0, #0
    6e8c:	bne	6e9c <test_mixed_type_union+0x44>
    6e90:	mov	r0, r4
    6e94:	mov	r1, #10
    6e98:	bl	0 <flatcc_builder_start_table>
    6e9c:	mov	r0, r4
    6ea0:	mov	r1, #4
    6ea4:	mov	r2, #4
    6ea8:	bl	0 <flatcc_builder_start_struct>
    6eac:	cmp	r0, #0
    6eb0:	beq	6ec8 <test_mixed_type_union+0x70>
    6eb4:	mov	r1, #10
    6eb8:	str	r1, [r0]
    6ebc:	mov	r0, r4
    6ec0:	bl	0 <flatcc_builder_end_struct>
    6ec4:	mov	r8, r0
    6ec8:	mov	r0, r4
    6ecc:	mov	r1, #2
    6ed0:	mov	r2, #2
    6ed4:	bl	0 <flatcc_builder_start_struct>
    6ed8:	cmp	r0, #0
    6edc:	beq	6ef8 <test_mixed_type_union+0xa0>
    6ee0:	mov	r1, #22
    6ee4:	strh	r1, [r0]
    6ee8:	mov	r0, r4
    6eec:	bl	0 <flatcc_builder_end_struct>
    6ef0:	mov	r9, r0
    6ef4:	b	6efc <test_mixed_type_union+0xa4>
    6ef8:	mov	r9, #0
    6efc:	mov	r0, r4
    6f00:	mov	r1, #2
    6f04:	mov	r2, #2
    6f08:	bl	0 <flatcc_builder_start_struct>
    6f0c:	cmp	r0, #0
    6f10:	beq	6f6c <test_mixed_type_union+0x114>
    6f14:	mov	r1, #19
    6f18:	strh	r1, [r0]
    6f1c:	mov	r0, r4
    6f20:	bl	0 <flatcc_builder_end_struct>
    6f24:	cmp	r0, #0
    6f28:	beq	6f6c <test_mixed_type_union+0x114>
    6f2c:	mov	r5, r0
    6f30:	mov	r0, r4
    6f34:	mov	r1, #0
    6f38:	mov	r2, #1
    6f3c:	mov	r3, #1
    6f40:	bl	0 <flatcc_builder_table_add>
    6f44:	cmp	r0, #0
    6f48:	beq	6f6c <test_mixed_type_union+0x114>
    6f4c:	mov	r7, r0
    6f50:	mov	r0, r4
    6f54:	mov	r1, #1
    6f58:	bl	0 <flatcc_builder_table_add_offset>
    6f5c:	cmp	r0, #0
    6f60:	movne	r1, #8
    6f64:	strbne	r1, [r7]
    6f68:	strne	r5, [r0]
    6f6c:	cmp	r9, #0
    6f70:	beq	6fb0 <test_mixed_type_union+0x158>
    6f74:	mov	r0, r4
    6f78:	mov	r1, #6
    6f7c:	mov	r2, #1
    6f80:	mov	r3, #1
    6f84:	bl	0 <flatcc_builder_table_add>
    6f88:	cmp	r0, #0
    6f8c:	beq	6fb0 <test_mixed_type_union+0x158>
    6f90:	mov	r5, r0
    6f94:	mov	r0, r4
    6f98:	mov	r1, #7
    6f9c:	bl	0 <flatcc_builder_table_add_offset>
    6fa0:	cmp	r0, #0
    6fa4:	movne	r1, #8
    6fa8:	strbne	r1, [r5]
    6fac:	strne	r9, [r0]
    6fb0:	mov	r0, r4
    6fb4:	mov	r1, #1
    6fb8:	bl	0 <flatcc_builder_start_table>
    6fbc:	mov	r7, #0
    6fc0:	cmp	r0, #0
    6fc4:	beq	7190 <test_mixed_type_union+0x338>
    6fc8:	movw	r1, #0
    6fcc:	mov	r0, r4
    6fd0:	movt	r1, #0
    6fd4:	bl	0 <flatcc_builder_create_string_str>
    6fd8:	cmp	r0, #0
    6fdc:	beq	7020 <test_mixed_type_union+0x1c8>
    6fe0:	mov	r5, r0
    6fe4:	mov	r0, r4
    6fe8:	mov	r1, #4
    6fec:	mov	r2, #1
    6ff0:	mov	r3, #1
    6ff4:	bl	0 <flatcc_builder_table_add>
    6ff8:	cmp	r0, #0
    6ffc:	beq	7020 <test_mixed_type_union+0x1c8>
    7000:	mov	r6, r0
    7004:	mov	r0, r4
    7008:	mov	r1, #5
    700c:	bl	0 <flatcc_builder_table_add_offset>
    7010:	cmp	r0, #0
    7014:	movne	r1, #11
    7018:	strbne	r1, [r6]
    701c:	strne	r5, [r0]
    7020:	mov	r0, r4
    7024:	bl	0 <flatcc_builder_start_union_vector>
    7028:	mov	r0, r4
    702c:	mov	r1, #8
    7030:	mov	r2, r9
    7034:	bl	0 <flatcc_builder_union_vector_push>
    7038:	mov	r0, r4
    703c:	mov	r1, #2
    7040:	mov	r2, r7
    7044:	bl	0 <flatcc_builder_union_vector_push>
    7048:	mov	r0, r4
    704c:	mov	r1, #1
    7050:	bl	0 <flatcc_builder_start_table>
    7054:	mov	r6, #0
    7058:	cmp	r0, #0
    705c:	mov	r5, #0
    7060:	bne	70b4 <test_mixed_type_union+0x25c>
    7064:	mov	r0, r4
    7068:	mov	r1, #0
    706c:	mov	r2, #4
    7070:	mov	r3, #4
    7074:	mov	r5, #0
    7078:	bl	0 <flatcc_builder_table_add>
    707c:	cmp	r0, #0
    7080:	beq	70b4 <test_mixed_type_union+0x25c>
    7084:	mov	r1, #1
    7088:	mov	r2, #0
    708c:	str	r1, [r0]
    7090:	movw	r1, #0
    7094:	mov	r0, r4
    7098:	movt	r1, #0
    709c:	bl	0 <flatcc_builder_check_required>
    70a0:	cmp	r0, #0
    70a4:	beq	77c0 <test_mixed_type_union+0x968>
    70a8:	mov	r0, r4
    70ac:	bl	0 <flatcc_builder_end_table>
    70b0:	mov	r5, r0
    70b4:	mov	r0, r4
    70b8:	mov	r1, #2
    70bc:	mov	r2, r5
    70c0:	bl	0 <flatcc_builder_union_vector_push>
    70c4:	movw	r1, #0
    70c8:	mov	r0, r4
    70cc:	movt	r1, #0
    70d0:	bl	0 <flatcc_builder_create_string_str>
    70d4:	mov	r2, r0
    70d8:	mov	r0, r4
    70dc:	mov	r1, #11
    70e0:	bl	0 <flatcc_builder_union_vector_push>
    70e4:	mov	r0, r4
    70e8:	mov	r1, #9
    70ec:	mov	r2, r8
    70f0:	bl	0 <flatcc_builder_union_vector_push>
    70f4:	mov	r0, r4
    70f8:	mov	r1, #4
    70fc:	mov	r2, #4
    7100:	bl	0 <flatcc_builder_start_struct>
    7104:	mov	r1, #3
    7108:	str	r1, [r0]
    710c:	mov	r0, r4
    7110:	bl	0 <flatcc_builder_end_struct>
    7114:	mov	r2, r0
    7118:	mov	r0, r4
    711c:	mov	r1, #9
    7120:	bl	0 <flatcc_builder_union_vector_push>
    7124:	mov	r0, r4
    7128:	mov	r1, #4
    712c:	mov	r2, #4
    7130:	bl	0 <flatcc_builder_start_struct>
    7134:	cmp	r0, #0
    7138:	beq	7150 <test_mixed_type_union+0x2f8>
    713c:	mov	r1, #1
    7140:	str	r1, [r0]
    7144:	mov	r0, r4
    7148:	bl	0 <flatcc_builder_end_struct>
    714c:	mov	r6, r0
    7150:	mov	r0, r4
    7154:	mov	r1, #9
    7158:	mov	r2, r6
    715c:	bl	0 <flatcc_builder_union_vector_push>
    7160:	mov	r0, r4
    7164:	mov	r1, #4
    7168:	mov	r2, #4
    716c:	bl	0 <flatcc_builder_start_struct>
    7170:	cmp	r0, #0
    7174:	beq	7230 <test_mixed_type_union+0x3d8>
    7178:	mov	r1, #2
    717c:	str	r1, [r0]
    7180:	mov	r0, r4
    7184:	bl	0 <flatcc_builder_end_struct>
    7188:	mov	r2, r0
    718c:	b	7234 <test_mixed_type_union+0x3dc>
    7190:	mov	r0, r4
    7194:	mov	r1, #0
    7198:	mov	r2, #4
    719c:	mov	r3, #4
    71a0:	mov	r7, #0
    71a4:	bl	0 <flatcc_builder_table_add>
    71a8:	cmp	r0, #0
    71ac:	beq	6fc8 <test_mixed_type_union+0x170>
    71b0:	mov	r1, #42	; 0x2a
    71b4:	mov	r2, #0
    71b8:	mov	r7, #0
    71bc:	str	r1, [r0]
    71c0:	movw	r1, #0
    71c4:	mov	r0, r4
    71c8:	movt	r1, #0
    71cc:	bl	0 <flatcc_builder_check_required>
    71d0:	cmp	r0, #0
    71d4:	beq	77c0 <test_mixed_type_union+0x968>
    71d8:	mov	r0, r4
    71dc:	bl	0 <flatcc_builder_end_table>
    71e0:	cmp	r0, #0
    71e4:	beq	6fc8 <test_mixed_type_union+0x170>
    71e8:	mov	r5, r0
    71ec:	mov	r0, r4
    71f0:	mov	r1, #2
    71f4:	mov	r2, #1
    71f8:	mov	r3, #1
    71fc:	bl	0 <flatcc_builder_table_add>
    7200:	cmp	r0, #0
    7204:	beq	7228 <test_mixed_type_union+0x3d0>
    7208:	mov	r6, r0
    720c:	mov	r0, r4
    7210:	mov	r1, #3
    7214:	bl	0 <flatcc_builder_table_add_offset>
    7218:	cmp	r0, #0
    721c:	movne	r1, #2
    7220:	strbne	r1, [r6]
    7224:	strne	r5, [r0]
    7228:	mov	r7, r5
    722c:	b	6fc8 <test_mixed_type_union+0x170>
    7230:	mov	r2, #0
    7234:	mov	r0, r4
    7238:	mov	r1, #9
    723c:	bl	0 <flatcc_builder_union_vector_push>
    7240:	movw	r1, #0
    7244:	mov	r0, r4
    7248:	movt	r1, #0
    724c:	bl	0 <flatcc_builder_create_string_str>
    7250:	mov	r2, r0
    7254:	mov	r0, r4
    7258:	mov	r1, #11
    725c:	bl	0 <flatcc_builder_union_vector_push>
    7260:	movw	r1, #0
    7264:	mov	r0, r4
    7268:	movt	r1, #0
    726c:	bl	0 <flatcc_builder_create_string_str>
    7270:	mov	r2, r0
    7274:	mov	r0, r4
    7278:	mov	r1, #11
    727c:	bl	0 <flatcc_builder_union_vector_push>
    7280:	add	r0, sp, #8
    7284:	mov	r1, r4
    7288:	bl	0 <flatcc_builder_end_union_vector>
    728c:	ldr	r6, [sp, #8]
    7290:	cmp	r6, #0
    7294:	ldrne	r5, [sp, #12]
    7298:	cmpne	r5, #0
    729c:	bne	73dc <test_mixed_type_union+0x584>
    72a0:	movw	r1, #0
    72a4:	mov	r0, r4
    72a8:	mov	r2, #0
    72ac:	movt	r1, #0
    72b0:	bl	0 <flatcc_builder_check_required>
    72b4:	cmp	r0, #0
    72b8:	beq	7780 <test_mixed_type_union+0x928>
    72bc:	mov	r0, r4
    72c0:	bl	0 <flatcc_builder_end_table>
    72c4:	mov	r1, r0
    72c8:	mov	r0, r4
    72cc:	bl	0 <flatcc_builder_end_buffer>
    72d0:	add	r1, sp, #4
    72d4:	mov	r0, r4
    72d8:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    72dc:	mov	r4, r0
    72e0:	movw	r0, #0
    72e4:	ldr	r2, [sp, #4]
    72e8:	movt	r0, #0
    72ec:	mov	r1, r4
    72f0:	ldr	r3, [r0]
    72f4:	movw	r0, #0
    72f8:	movt	r0, #0
    72fc:	bl	5d4 <hexdump>
    7300:	ldr	r1, [sp, #4]
    7304:	movw	r2, #0
    7308:	movw	r3, #0
    730c:	mov	r0, r4
    7310:	movt	r2, #0
    7314:	movt	r3, #0
    7318:	bl	0 <flatcc_verify_table_as_root>
    731c:	cmp	r0, #0
    7320:	beq	7340 <test_mixed_type_union+0x4e8>
    7324:	bl	0 <flatcc_verify_error_string>
    7328:	mov	r1, r0
    732c:	movw	r0, #0
    7330:	movt	r0, #0
    7334:	bl	0 <printf>
    7338:	mvn	r5, #0
    733c:	b	743c <test_mixed_type_union+0x5e4>
    7340:	cmp	r4, #0
    7344:	beq	77a0 <test_mixed_type_union+0x948>
    7348:	ldr	r0, [r4, #4]
    734c:	movw	r1, #20301	; 0x4f4d
    7350:	movt	r1, #21326	; 0x534e
    7354:	cmp	r0, r1
    7358:	bne	77a0 <test_mixed_type_union+0x948>
    735c:	ldr	r0, [r4]
    7360:	mov	r6, r4
    7364:	ldr	r0, [r6, r0]!
    7368:	mov	r7, r6
    736c:	ldrh	r1, [r7, -r0]!
    7370:	cmp	r1, #7
    7374:	bls	740c <test_mixed_type_union+0x5b4>
    7378:	ldrh	r0, [r7, #6]
    737c:	cmp	r0, #0
    7380:	beq	740c <test_mixed_type_union+0x5b4>
    7384:	cmp	r1, #24
    7388:	bcc	7418 <test_mixed_type_union+0x5c0>
    738c:	ldrh	r5, [r7, #22]
    7390:	cmp	r5, #0
    7394:	beq	7418 <test_mixed_type_union+0x5c0>
    7398:	ldrh	r1, [r7, #4]
    739c:	cmp	r1, #0
    73a0:	beq	7424 <test_mixed_type_union+0x5cc>
    73a4:	ldrb	r1, [r6, r1]
    73a8:	cmp	r1, #0
    73ac:	beq	7424 <test_mixed_type_union+0x5cc>
    73b0:	cmp	r1, #8
    73b4:	bne	7424 <test_mixed_type_union+0x5cc>
    73b8:	add	r0, r6, r0
    73bc:	ldr	r1, [r0]
    73c0:	add	r0, r0, r1
    73c4:	ldrh	r0, [r0]
    73c8:	cmp	r0, #20
    73cc:	bcc	7448 <test_mixed_type_union+0x5f0>
    73d0:	movw	r0, #0
    73d4:	movt	r0, #0
    73d8:	b	742c <test_mixed_type_union+0x5d4>
    73dc:	mov	r0, r4
    73e0:	mov	r1, #8
    73e4:	bl	0 <flatcc_builder_table_add_offset>
    73e8:	cmp	r0, #0
    73ec:	beq	72a0 <test_mixed_type_union+0x448>
    73f0:	str	r6, [r0]
    73f4:	mov	r0, r4
    73f8:	mov	r1, #9
    73fc:	bl	0 <flatcc_builder_table_add_offset>
    7400:	cmp	r0, #0
    7404:	strne	r5, [r0]
    7408:	b	72a0 <test_mixed_type_union+0x448>
    740c:	movw	r0, #0
    7410:	movt	r0, #0
    7414:	b	742c <test_mixed_type_union+0x5d4>
    7418:	movw	r0, #0
    741c:	movt	r0, #0
    7420:	b	742c <test_mixed_type_union+0x5d4>
    7424:	movw	r0, #0
    7428:	movt	r0, #0
    742c:	bl	0 <puts>
    7430:	mvn	r5, #0
    7434:	mov	r0, r4
    7438:	bl	0 <flatcc_builder_aligned_free>
    743c:	mov	r0, r5
    7440:	sub	sp, fp, #24
    7444:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    7448:	cmp	r0, #19
    744c:	bne	753c <test_mixed_type_union+0x6e4>
    7450:	ldrh	r0, [r7, #16]
    7454:	cmp	r0, #0
    7458:	beq	7548 <test_mixed_type_union+0x6f0>
    745c:	ldrb	r0, [r6, r0]
    7460:	cmp	r0, #8
    7464:	bne	7548 <test_mixed_type_union+0x6f0>
    7468:	ldrh	r0, [r7, #18]
    746c:	cmp	r0, #0
    7470:	beq	7554 <test_mixed_type_union+0x6fc>
    7474:	mov	r1, r6
    7478:	ldr	r0, [r1, r0]!
    747c:	add	r0, r1, r0
    7480:	ldrh	r0, [r0]
    7484:	cmp	r0, #22
    7488:	bne	7560 <test_mixed_type_union+0x708>
    748c:	ldrh	r0, [r7, #8]
    7490:	cmp	r0, #0
    7494:	beq	756c <test_mixed_type_union+0x714>
    7498:	ldrb	r0, [r6, r0]
    749c:	cmp	r0, #2
    74a0:	bne	756c <test_mixed_type_union+0x714>
    74a4:	ldrh	r1, [r7, #10]
    74a8:	cmp	r1, #0
    74ac:	beq	7578 <test_mixed_type_union+0x720>
    74b0:	mov	r0, r6
    74b4:	ldr	r1, [r0, r1]!
    74b8:	ldr	r2, [r0, r1]!
    74bc:	mov	r1, r0
    74c0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    74c4:	cmp	r2, #6
    74c8:	bcc	7578 <test_mixed_type_union+0x720>
    74cc:	ldrh	r1, [r1, #4]
    74d0:	cmp	r1, #0
    74d4:	beq	7578 <test_mixed_type_union+0x720>
    74d8:	ldr	r0, [r0, r1]
    74dc:	cmp	r0, #42	; 0x2a
    74e0:	bne	7578 <test_mixed_type_union+0x720>
    74e4:	ldrh	r0, [r7, #12]
    74e8:	cmp	r0, #0
    74ec:	beq	7584 <test_mixed_type_union+0x72c>
    74f0:	ldrb	r0, [r6, r0]
    74f4:	cmp	r0, #11
    74f8:	bne	7584 <test_mixed_type_union+0x72c>
    74fc:	ldrh	r0, [r7, #14]
    7500:	cmp	r0, #0
    7504:	beq	7590 <test_mixed_type_union+0x738>
    7508:	mov	r1, r6
    750c:	ldr	r0, [r1, r0]!
    7510:	add	r0, r1, r0
    7514:	movw	r1, #0
    7518:	add	r8, r0, #4
    751c:	movt	r1, #0
    7520:	mov	r0, r8
    7524:	bl	0 <strcmp>
    7528:	cmp	r0, #0
    752c:	beq	759c <test_mixed_type_union+0x744>
    7530:	movw	r0, #0
    7534:	movt	r0, #0
    7538:	b	75bc <test_mixed_type_union+0x764>
    753c:	movw	r0, #0
    7540:	movt	r0, #0
    7544:	b	742c <test_mixed_type_union+0x5d4>
    7548:	movw	r0, #0
    754c:	movt	r0, #0
    7550:	b	742c <test_mixed_type_union+0x5d4>
    7554:	movw	r0, #0
    7558:	movt	r0, #0
    755c:	b	742c <test_mixed_type_union+0x5d4>
    7560:	movw	r0, #0
    7564:	movt	r0, #0
    7568:	b	742c <test_mixed_type_union+0x5d4>
    756c:	movw	r0, #0
    7570:	movt	r0, #0
    7574:	b	742c <test_mixed_type_union+0x5d4>
    7578:	movw	r0, #0
    757c:	movt	r0, #0
    7580:	b	742c <test_mixed_type_union+0x5d4>
    7584:	movw	r0, #0
    7588:	movt	r0, #0
    758c:	b	742c <test_mixed_type_union+0x5d4>
    7590:	movw	r0, #0
    7594:	movt	r0, #0
    7598:	b	742c <test_mixed_type_union+0x5d4>
    759c:	movw	r1, #0
    75a0:	mov	r0, r8
    75a4:	movt	r1, #0
    75a8:	bl	0 <strcmp>
    75ac:	cmp	r0, #0
    75b0:	beq	75c8 <test_mixed_type_union+0x770>
    75b4:	movw	r0, #0
    75b8:	movt	r0, #0
    75bc:	mov	r1, r8
    75c0:	bl	0 <printf>
    75c4:	b	7430 <test_mixed_type_union+0x5d8>
    75c8:	ldrh	r1, [r7, #20]
    75cc:	mov	r0, r6
    75d0:	cmp	r1, #0
    75d4:	beq	75fc <test_mixed_type_union+0x7a4>
    75d8:	ldr	r2, [r0, r5]!
    75dc:	add	r0, r0, r2
    75e0:	mov	r2, r6
    75e4:	ldr	r3, [r2, r1]!
    75e8:	add	r0, r0, #4
    75ec:	ldr	r3, [r2, r3]!
    75f0:	add	r7, r2, #4
    75f4:	mov	r2, #0
    75f8:	b	7614 <test_mixed_type_union+0x7bc>
    75fc:	ldr	r2, [r0, r5]!
    7600:	mov	r7, #0
    7604:	mov	r3, #0
    7608:	add	r0, r0, r2
    760c:	mov	r2, #1
    7610:	add	r0, r0, #4
    7614:	ldr	r5, [r0, #-4]
    7618:	cmp	r3, r5
    761c:	bne	79c4 <test_mixed_type_union+0xb6c>
    7620:	cmp	r2, #0
    7624:	bne	79a4 <test_mixed_type_union+0xb4c>
    7628:	ldr	r8, [r7, #-4]
    762c:	cmp	r8, #0
    7630:	beq	79a4 <test_mixed_type_union+0xb4c>
    7634:	ldrb	r2, [r7]
    7638:	cmp	r2, #0
    763c:	beq	7740 <test_mixed_type_union+0x8e8>
    7640:	ldr	r9, [r0, #-4]
    7644:	cmp	r9, #0
    7648:	beq	79e4 <test_mixed_type_union+0xb8c>
    764c:	cmp	r2, #8
    7650:	bne	7740 <test_mixed_type_union+0x8e8>
    7654:	cmp	r8, #1
    7658:	bls	79a4 <test_mixed_type_union+0xb4c>
    765c:	ldrb	r2, [r7, #1]
    7660:	cmp	r2, #0
    7664:	beq	774c <test_mixed_type_union+0x8f4>
    7668:	cmp	r9, #1
    766c:	bls	79e4 <test_mixed_type_union+0xb8c>
    7670:	cmp	r2, #2
    7674:	bne	774c <test_mixed_type_union+0x8f4>
    7678:	mov	r2, r0
    767c:	ldr	r3, [r2, #4]!
    7680:	add	r2, r2, r3
    7684:	ldr	r5, [r2]
    7688:	mov	r3, r2
    768c:	ldrh	r5, [r3, -r5]!	; <UNPREDICTABLE>
    7690:	cmp	r5, #6
    7694:	bcc	7758 <test_mixed_type_union+0x900>
    7698:	ldrh	r3, [r3, #4]
    769c:	cmp	r3, #0
    76a0:	beq	7758 <test_mixed_type_union+0x900>
    76a4:	ldr	r2, [r2, r3]
    76a8:	cmp	r2, #42	; 0x2a
    76ac:	bne	7758 <test_mixed_type_union+0x900>
    76b0:	cmp	r8, #2
    76b4:	bls	79a4 <test_mixed_type_union+0xb4c>
    76b8:	ldrb	r2, [r7, #2]
    76bc:	cmp	r2, #0
    76c0:	beq	7768 <test_mixed_type_union+0x910>
    76c4:	cmp	r9, #2
    76c8:	bls	79e4 <test_mixed_type_union+0xb8c>
    76cc:	cmp	r2, #2
    76d0:	bne	7768 <test_mixed_type_union+0x910>
    76d4:	mov	r2, r0
    76d8:	ldr	r3, [r2, #8]!
    76dc:	add	r2, r2, r3
    76e0:	ldr	r5, [r2]
    76e4:	mov	r3, r2
    76e8:	ldrh	r5, [r3, -r5]!	; <UNPREDICTABLE>
    76ec:	cmp	r5, #6
    76f0:	bcc	7774 <test_mixed_type_union+0x91c>
    76f4:	ldrh	r3, [r3, #4]
    76f8:	cmp	r3, #0
    76fc:	beq	7774 <test_mixed_type_union+0x91c>
    7700:	ldr	r2, [r2, r3]
    7704:	cmp	r2, #1
    7708:	bne	7774 <test_mixed_type_union+0x91c>
    770c:	cmp	r1, #0
    7710:	ldrne	r1, [r6, r1]!
    7714:	ldrne	r1, [r6, r1]!
    7718:	cmpne	r1, #3
    771c:	bhi	77e0 <test_mixed_type_union+0x988>
    7720:	movw	r0, #0
    7724:	movw	r1, #0
    7728:	movw	r3, #0
    772c:	movw	r2, #405	; 0x195
    7730:	movt	r0, #0
    7734:	movt	r1, #0
    7738:	movt	r3, #0
    773c:	bl	0 <__assert_fail>
    7740:	movw	r0, #0
    7744:	movt	r0, #0
    7748:	b	7760 <test_mixed_type_union+0x908>
    774c:	movw	r0, #0
    7750:	movt	r0, #0
    7754:	b	7760 <test_mixed_type_union+0x908>
    7758:	movw	r0, #0
    775c:	movt	r0, #0
    7760:	bl	0 <printf>
    7764:	b	7430 <test_mixed_type_union+0x5d8>
    7768:	movw	r0, #0
    776c:	movt	r0, #0
    7770:	b	7760 <test_mixed_type_union+0x908>
    7774:	movw	r0, #0
    7778:	movt	r0, #0
    777c:	b	7760 <test_mixed_type_union+0x908>
    7780:	movw	r0, #0
    7784:	movw	r1, #0
    7788:	movw	r3, #0
    778c:	mov	r2, #241	; 0xf1
    7790:	movt	r0, #0
    7794:	movt	r1, #0
    7798:	movt	r3, #0
    779c:	bl	0 <__assert_fail>
    77a0:	movw	r0, #0
    77a4:	movw	r1, #0
    77a8:	movw	r3, #0
    77ac:	movw	r2, #819	; 0x333
    77b0:	movt	r0, #0
    77b4:	movt	r1, #0
    77b8:	movt	r3, #0
    77bc:	bl	0 <__assert_fail>
    77c0:	movw	r0, #0
    77c4:	movw	r1, #0
    77c8:	movw	r3, #0
    77cc:	mov	r2, #239	; 0xef
    77d0:	movt	r0, #0
    77d4:	movt	r1, #0
    77d8:	movt	r3, #0
    77dc:	bl	0 <__assert_fail>
    77e0:	add	r1, r6, #4
    77e4:	ldrb	r1, [r1, #3]
    77e8:	cmp	r1, #11
    77ec:	bne	7828 <test_mixed_type_union+0x9d0>
    77f0:	cmp	r9, #3
    77f4:	bls	7a04 <test_mixed_type_union+0xbac>
    77f8:	ldr	r1, [r0, #12]!
    77fc:	add	r0, r0, r1
    7800:	movw	r1, #0
    7804:	add	r6, r0, #4
    7808:	movt	r1, #0
    780c:	mov	r0, r6
    7810:	bl	0 <strcmp>
    7814:	cmp	r0, #0
    7818:	beq	7834 <test_mixed_type_union+0x9dc>
    781c:	movw	r0, #0
    7820:	movt	r0, #0
    7824:	b	742c <test_mixed_type_union+0x5d4>
    7828:	movw	r0, #0
    782c:	movt	r0, #0
    7830:	b	742c <test_mixed_type_union+0x5d4>
    7834:	cmp	r8, #3
    7838:	bls	79a4 <test_mixed_type_union+0xb4c>
    783c:	ldrb	r0, [r7, #3]
    7840:	cmp	r0, #11
    7844:	bne	786c <test_mixed_type_union+0xa14>
    7848:	movw	r1, #0
    784c:	mov	r0, r6
    7850:	movt	r1, #0
    7854:	bl	0 <strcmp>
    7858:	cmp	r0, #0
    785c:	beq	7878 <test_mixed_type_union+0xa20>
    7860:	movw	r0, #0
    7864:	movt	r0, #0
    7868:	b	742c <test_mixed_type_union+0x5d4>
    786c:	movw	r0, #0
    7870:	movt	r0, #0
    7874:	b	7760 <test_mixed_type_union+0x908>
    7878:	cmp	r8, #4
    787c:	bls	79a4 <test_mixed_type_union+0xb4c>
    7880:	ldrb	r0, [r7, #4]
    7884:	cmp	r0, #0
    7888:	beq	7968 <test_mixed_type_union+0xb10>
    788c:	cmp	r9, #4
    7890:	bls	79e4 <test_mixed_type_union+0xb8c>
    7894:	cmp	r0, #9
    7898:	bne	7968 <test_mixed_type_union+0xb10>
    789c:	cmp	r8, #5
    78a0:	bls	79a4 <test_mixed_type_union+0xb4c>
    78a4:	ldrb	r0, [r7, #5]
    78a8:	cmp	r0, #0
    78ac:	beq	7974 <test_mixed_type_union+0xb1c>
    78b0:	cmp	r9, #5
    78b4:	bls	79e4 <test_mixed_type_union+0xb8c>
    78b8:	cmp	r0, #9
    78bc:	bne	7974 <test_mixed_type_union+0xb1c>
    78c0:	cmp	r8, #6
    78c4:	bls	79a4 <test_mixed_type_union+0xb4c>
    78c8:	ldrb	r0, [r7, #6]
    78cc:	cmp	r0, #0
    78d0:	beq	7980 <test_mixed_type_union+0xb28>
    78d4:	cmp	r9, #6
    78d8:	bls	79e4 <test_mixed_type_union+0xb8c>
    78dc:	cmp	r0, #9
    78e0:	bne	7980 <test_mixed_type_union+0xb28>
    78e4:	cmp	r8, #7
    78e8:	bls	79a4 <test_mixed_type_union+0xb4c>
    78ec:	ldrb	r0, [r7, #7]
    78f0:	cmp	r0, #0
    78f4:	beq	798c <test_mixed_type_union+0xb34>
    78f8:	cmp	r9, #7
    78fc:	bls	79e4 <test_mixed_type_union+0xb8c>
    7900:	cmp	r0, #9
    7904:	bne	798c <test_mixed_type_union+0xb34>
    7908:	cmp	r8, #8
    790c:	bls	79a4 <test_mixed_type_union+0xb4c>
    7910:	ldrb	r0, [r7, #8]
    7914:	cmp	r0, #0
    7918:	beq	7998 <test_mixed_type_union+0xb40>
    791c:	cmp	r9, #8
    7920:	bls	79e4 <test_mixed_type_union+0xb8c>
    7924:	cmp	r0, #11
    7928:	bne	7998 <test_mixed_type_union+0xb40>
    792c:	cmp	r8, #9
    7930:	bls	79a4 <test_mixed_type_union+0xb4c>
    7934:	ldrb	r0, [r7, #9]
    7938:	cmp	r0, #0
    793c:	beq	7998 <test_mixed_type_union+0xb40>
    7940:	cmp	r9, #9
    7944:	bls	79e4 <test_mixed_type_union+0xb8c>
    7948:	cmp	r0, #11
    794c:	bne	7998 <test_mixed_type_union+0xb40>
    7950:	mov	r5, #0
    7954:	cmp	r8, #10
    7958:	beq	7434 <test_mixed_type_union+0x5dc>
    795c:	movw	r0, #0
    7960:	movt	r0, #0
    7964:	b	7760 <test_mixed_type_union+0x908>
    7968:	movw	r0, #0
    796c:	movt	r0, #0
    7970:	b	7760 <test_mixed_type_union+0x908>
    7974:	movw	r0, #0
    7978:	movt	r0, #0
    797c:	b	7760 <test_mixed_type_union+0x908>
    7980:	movw	r0, #0
    7984:	movt	r0, #0
    7988:	b	7760 <test_mixed_type_union+0x908>
    798c:	movw	r0, #0
    7990:	movt	r0, #0
    7994:	b	7760 <test_mixed_type_union+0x908>
    7998:	movw	r0, #0
    799c:	movt	r0, #0
    79a0:	b	7760 <test_mixed_type_union+0x908>
    79a4:	movw	r0, #0
    79a8:	movw	r1, #0
    79ac:	movw	r3, #0
    79b0:	movw	r2, #773	; 0x305
    79b4:	movt	r0, #0
    79b8:	movt	r1, #0
    79bc:	movt	r3, #0
    79c0:	bl	0 <__assert_fail>
    79c4:	movw	r0, #0
    79c8:	movw	r1, #0
    79cc:	movw	r3, #0
    79d0:	movw	r2, #823	; 0x337
    79d4:	movt	r0, #0
    79d8:	movt	r1, #0
    79dc:	movt	r3, #0
    79e0:	bl	0 <__assert_fail>
    79e4:	movw	r0, #0
    79e8:	movw	r1, #0
    79ec:	movw	r3, #0
    79f0:	mov	r2, #117	; 0x75
    79f4:	movt	r0, #0
    79f8:	movt	r1, #0
    79fc:	movt	r3, #0
    7a00:	bl	0 <__assert_fail>
    7a04:	movw	r0, #0
    7a08:	movw	r1, #0
    7a0c:	movw	r3, #0
    7a10:	mov	r2, #119	; 0x77
    7a14:	movt	r0, #0
    7a18:	movt	r1, #0
    7a1c:	movt	r3, #0
    7a20:	bl	0 <__assert_fail>

00007a24 <test_add_set_defaults>:
    7a24:	push	{r4, r5, r6, sl, fp, lr}
    7a28:	add	fp, sp, #16
    7a2c:	sub	sp, sp, #8
    7a30:	mov	r4, r0
    7a34:	bl	0 <flatcc_builder_reset>
    7a38:	movw	r1, #0
    7a3c:	mov	r0, r4
    7a40:	mov	r2, #0
    7a44:	mov	r3, #0
    7a48:	movt	r1, #0
    7a4c:	bl	0 <flatcc_builder_start_buffer>
    7a50:	cmp	r0, #0
    7a54:	bne	7a64 <test_add_set_defaults+0x40>
    7a58:	mov	r0, r4
    7a5c:	mov	r1, #36	; 0x24
    7a60:	bl	0 <flatcc_builder_start_table>
    7a64:	movw	r1, #0
    7a68:	mov	r0, r4
    7a6c:	movt	r1, #0
    7a70:	bl	0 <flatcc_builder_create_string_str>
    7a74:	cmp	r0, #0
    7a78:	beq	7a94 <test_add_set_defaults+0x70>
    7a7c:	mov	r5, r0
    7a80:	mov	r0, r4
    7a84:	mov	r1, #3
    7a88:	bl	0 <flatcc_builder_table_add_offset>
    7a8c:	cmp	r0, #0
    7a90:	strne	r5, [r0]
    7a94:	mov	r0, r4
    7a98:	mov	r1, #1
    7a9c:	mov	r2, #2
    7aa0:	mov	r3, #2
    7aa4:	bl	0 <flatcc_builder_table_add>
    7aa8:	cmp	r0, #0
    7aac:	mov	r2, #1
    7ab0:	movne	r1, #100	; 0x64
    7ab4:	strhne	r1, [r0]
    7ab8:	movw	r1, #0
    7abc:	mov	r0, r4
    7ac0:	movt	r1, #0
    7ac4:	bl	0 <flatcc_builder_check_required>
    7ac8:	cmp	r0, #0
    7acc:	beq	7d24 <test_add_set_defaults+0x300>
    7ad0:	mov	r0, r4
    7ad4:	bl	0 <flatcc_builder_end_table>
    7ad8:	mov	r1, r0
    7adc:	mov	r0, r4
    7ae0:	bl	0 <flatcc_builder_end_buffer>
    7ae4:	add	r1, sp, #4
    7ae8:	mov	r0, r4
    7aec:	bl	0 <flatcc_builder_get_direct_buffer>
    7af0:	cmp	r0, #0
    7af4:	beq	7d04 <test_add_set_defaults+0x2e0>
    7af8:	ldr	r1, [r0, #4]
    7afc:	movw	r6, #20301	; 0x4f4d
    7b00:	movt	r6, #21326	; 0x534e
    7b04:	cmp	r1, r6
    7b08:	bne	7d04 <test_add_set_defaults+0x2e0>
    7b0c:	ldr	r1, [r0]
    7b10:	ldr	r1, [r0, r1]!
    7b14:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    7b18:	cmp	r1, #9
    7b1c:	bls	7b38 <test_add_set_defaults+0x114>
    7b20:	ldrh	r2, [r0, #8]
    7b24:	cmp	r2, #0
    7b28:	beq	7b40 <test_add_set_defaults+0x11c>
    7b2c:	movw	r0, #0
    7b30:	movt	r0, #0
    7b34:	b	7b74 <test_add_set_defaults+0x150>
    7b38:	cmp	r1, #8
    7b3c:	bcc	7b6c <test_add_set_defaults+0x148>
    7b40:	ldrh	r2, [r0, #6]
    7b44:	cmp	r2, #0
    7b48:	beq	7b6c <test_add_set_defaults+0x148>
    7b4c:	cmp	r1, #18
    7b50:	bcc	7b88 <test_add_set_defaults+0x164>
    7b54:	ldrh	r0, [r0, #16]
    7b58:	cmp	r0, #0
    7b5c:	beq	7b88 <test_add_set_defaults+0x164>
    7b60:	movw	r0, #0
    7b64:	movt	r0, #0
    7b68:	b	7b74 <test_add_set_defaults+0x150>
    7b6c:	movw	r0, #0
    7b70:	movt	r0, #0
    7b74:	bl	0 <puts>
    7b78:	mvn	r1, #0
    7b7c:	mov	r0, r1
    7b80:	sub	sp, fp, #16
    7b84:	pop	{r4, r5, r6, sl, fp, pc}
    7b88:	mov	r0, r4
    7b8c:	bl	0 <flatcc_builder_reset>
    7b90:	movw	r1, #0
    7b94:	mov	r0, r4
    7b98:	mov	r2, #0
    7b9c:	mov	r3, #0
    7ba0:	movt	r1, #0
    7ba4:	bl	0 <flatcc_builder_start_buffer>
    7ba8:	cmp	r0, #0
    7bac:	bne	7bbc <test_add_set_defaults+0x198>
    7bb0:	mov	r0, r4
    7bb4:	mov	r1, #36	; 0x24
    7bb8:	bl	0 <flatcc_builder_start_table>
    7bbc:	movw	r1, #0
    7bc0:	mov	r0, r4
    7bc4:	movt	r1, #0
    7bc8:	bl	0 <flatcc_builder_create_string_str>
    7bcc:	cmp	r0, #0
    7bd0:	beq	7bec <test_add_set_defaults+0x1c8>
    7bd4:	mov	r5, r0
    7bd8:	mov	r0, r4
    7bdc:	mov	r1, #3
    7be0:	bl	0 <flatcc_builder_table_add_offset>
    7be4:	cmp	r0, #0
    7be8:	strne	r5, [r0]
    7bec:	mov	r0, r4
    7bf0:	mov	r1, #2
    7bf4:	mov	r2, #2
    7bf8:	mov	r3, #2
    7bfc:	bl	0 <flatcc_builder_table_add>
    7c00:	cmp	r0, #0
    7c04:	mov	r2, #2
    7c08:	mov	r3, #2
    7c0c:	movne	r1, #100	; 0x64
    7c10:	strhne	r1, [r0]
    7c14:	mov	r0, r4
    7c18:	mov	r1, #1
    7c1c:	bl	0 <flatcc_builder_table_add>
    7c20:	cmp	r0, #0
    7c24:	mov	r2, #1
    7c28:	mov	r3, #1
    7c2c:	movne	r1, #100	; 0x64
    7c30:	strhne	r1, [r0]
    7c34:	mov	r0, r4
    7c38:	mov	r1, #6
    7c3c:	bl	0 <flatcc_builder_table_add>
    7c40:	cmp	r0, #0
    7c44:	mov	r2, #1
    7c48:	movne	r1, #8
    7c4c:	strbne	r1, [r0]
    7c50:	movw	r1, #0
    7c54:	mov	r0, r4
    7c58:	movt	r1, #0
    7c5c:	bl	0 <flatcc_builder_check_required>
    7c60:	cmp	r0, #0
    7c64:	beq	7d24 <test_add_set_defaults+0x300>
    7c68:	mov	r0, r4
    7c6c:	bl	0 <flatcc_builder_end_table>
    7c70:	mov	r1, r0
    7c74:	mov	r0, r4
    7c78:	bl	0 <flatcc_builder_end_buffer>
    7c7c:	add	r1, sp, #4
    7c80:	mov	r0, r4
    7c84:	bl	0 <flatcc_builder_get_direct_buffer>
    7c88:	cmp	r0, #0
    7c8c:	beq	7d04 <test_add_set_defaults+0x2e0>
    7c90:	mov	r1, r0
    7c94:	ldr	r0, [r0, #4]
    7c98:	cmp	r0, r6
    7c9c:	bne	7d04 <test_add_set_defaults+0x2e0>
    7ca0:	ldr	r0, [r1]
    7ca4:	ldr	r0, [r1, r0]!
    7ca8:	ldrh	r2, [r1, -r0]!
    7cac:	movw	r0, #0
    7cb0:	movt	r0, #0
    7cb4:	cmp	r2, #9
    7cb8:	bls	7b74 <test_add_set_defaults+0x150>
    7cbc:	ldrh	r3, [r1, #8]
    7cc0:	cmp	r3, #0
    7cc4:	beq	7b74 <test_add_set_defaults+0x150>
    7cc8:	ldrh	r0, [r1, #6]
    7ccc:	cmp	r0, #0
    7cd0:	beq	7cf8 <test_add_set_defaults+0x2d4>
    7cd4:	movw	r0, #0
    7cd8:	cmp	r2, #18
    7cdc:	movt	r0, #0
    7ce0:	bcc	7b74 <test_add_set_defaults+0x150>
    7ce4:	ldrh	r2, [r1, #16]
    7ce8:	mov	r1, #0
    7cec:	cmp	r2, #0
    7cf0:	bne	7b7c <test_add_set_defaults+0x158>
    7cf4:	b	7b74 <test_add_set_defaults+0x150>
    7cf8:	movw	r0, #0
    7cfc:	movt	r0, #0
    7d00:	b	7b74 <test_add_set_defaults+0x150>
    7d04:	movw	r0, #0
    7d08:	movw	r1, #0
    7d0c:	movw	r3, #0
    7d10:	movw	r2, #697	; 0x2b9
    7d14:	movt	r0, #0
    7d18:	movt	r1, #0
    7d1c:	movt	r3, #0
    7d20:	bl	0 <__assert_fail>
    7d24:	movw	r0, #0
    7d28:	movw	r1, #0
    7d2c:	movw	r3, #0
    7d30:	mov	r2, #235	; 0xeb
    7d34:	movt	r0, #0
    7d38:	movt	r1, #0
    7d3c:	movt	r3, #0
    7d40:	bl	0 <__assert_fail>

00007d44 <test_nested_buffer>:
    7d44:	push	{r4, r5, r6, r7, fp, lr}
    7d48:	add	fp, sp, #16
    7d4c:	sub	sp, sp, #8
    7d50:	mov	r4, r0
    7d54:	bl	0 <flatcc_builder_reset>
    7d58:	movw	r1, #0
    7d5c:	mov	r0, r4
    7d60:	mov	r2, #0
    7d64:	mov	r3, #0
    7d68:	movt	r1, #0
    7d6c:	bl	0 <flatcc_builder_start_buffer>
    7d70:	cmp	r0, #0
    7d74:	bne	7d84 <test_nested_buffer+0x40>
    7d78:	mov	r0, r4
    7d7c:	mov	r1, #36	; 0x24
    7d80:	bl	0 <flatcc_builder_start_table>
    7d84:	movw	r1, #0
    7d88:	mov	r0, r4
    7d8c:	movt	r1, #0
    7d90:	bl	0 <flatcc_builder_create_string_str>
    7d94:	cmp	r0, #0
    7d98:	beq	7db4 <test_nested_buffer+0x70>
    7d9c:	mov	r5, r0
    7da0:	mov	r0, r4
    7da4:	mov	r1, #3
    7da8:	bl	0 <flatcc_builder_table_add_offset>
    7dac:	cmp	r0, #0
    7db0:	strne	r5, [r0]
    7db4:	movw	r1, #0
    7db8:	mov	r0, r4
    7dbc:	mov	r2, #0
    7dc0:	mov	r3, #0
    7dc4:	movt	r1, #0
    7dc8:	bl	0 <flatcc_builder_start_buffer>
    7dcc:	cmp	r0, #0
    7dd0:	bne	7de0 <test_nested_buffer+0x9c>
    7dd4:	mov	r0, r4
    7dd8:	mov	r1, #36	; 0x24
    7ddc:	bl	0 <flatcc_builder_start_table>
    7de0:	movw	r1, #0
    7de4:	mov	r0, r4
    7de8:	movt	r1, #0
    7dec:	bl	0 <flatcc_builder_create_string_str>
    7df0:	cmp	r0, #0
    7df4:	beq	7e10 <test_nested_buffer+0xcc>
    7df8:	mov	r5, r0
    7dfc:	mov	r0, r4
    7e00:	mov	r1, #3
    7e04:	bl	0 <flatcc_builder_table_add_offset>
    7e08:	cmp	r0, #0
    7e0c:	strne	r5, [r0]
    7e10:	movw	r1, #0
    7e14:	mov	r0, r4
    7e18:	mov	r2, #1
    7e1c:	movt	r1, #0
    7e20:	bl	0 <flatcc_builder_check_required>
    7e24:	cmp	r0, #0
    7e28:	beq	8040 <test_nested_buffer+0x2fc>
    7e2c:	mov	r0, r4
    7e30:	bl	0 <flatcc_builder_end_table>
    7e34:	mov	r1, r0
    7e38:	mov	r0, r4
    7e3c:	bl	0 <flatcc_builder_end_buffer>
    7e40:	cmp	r0, #0
    7e44:	beq	7e60 <test_nested_buffer+0x11c>
    7e48:	mov	r5, r0
    7e4c:	mov	r0, r4
    7e50:	mov	r1, #13
    7e54:	bl	0 <flatcc_builder_table_add_offset>
    7e58:	cmp	r0, #0
    7e5c:	strne	r5, [r0]
    7e60:	mov	r0, r4
    7e64:	mov	r1, #2
    7e68:	mov	r2, #2
    7e6c:	mov	r3, #2
    7e70:	bl	0 <flatcc_builder_table_add>
    7e74:	cmp	r0, #0
    7e78:	mov	r2, #1
    7e7c:	movne	r1, #10
    7e80:	strhne	r1, [r0]
    7e84:	movw	r1, #0
    7e88:	mov	r0, r4
    7e8c:	movt	r1, #0
    7e90:	bl	0 <flatcc_builder_check_required>
    7e94:	cmp	r0, #0
    7e98:	beq	8040 <test_nested_buffer+0x2fc>
    7e9c:	mov	r0, r4
    7ea0:	bl	0 <flatcc_builder_end_table>
    7ea4:	mov	r1, r0
    7ea8:	mov	r0, r4
    7eac:	bl	0 <flatcc_builder_end_buffer>
    7eb0:	add	r1, sp, #4
    7eb4:	mov	r0, r4
    7eb8:	bl	0 <flatcc_builder_get_direct_buffer>
    7ebc:	mov	r4, r0
    7ec0:	movw	r0, #0
    7ec4:	ldr	r2, [sp, #4]
    7ec8:	movt	r0, #0
    7ecc:	mov	r1, r4
    7ed0:	ldr	r3, [r0]
    7ed4:	movw	r0, #0
    7ed8:	movt	r0, #0
    7edc:	bl	5d4 <hexdump>
    7ee0:	cmp	r4, #0
    7ee4:	beq	8014 <test_nested_buffer+0x2d0>
    7ee8:	ldr	r0, [r4, #4]
    7eec:	movw	r6, #20301	; 0x4f4d
    7ef0:	movt	r6, #21326	; 0x534e
    7ef4:	cmp	r0, r6
    7ef8:	bne	8014 <test_nested_buffer+0x2d0>
    7efc:	ldr	r0, [r4]
    7f00:	ldr	r0, [r4, r0]!
    7f04:	mov	r5, r4
    7f08:	ldrh	r7, [r5, -r0]!
    7f0c:	cmp	r7, #11
    7f10:	bls	8020 <test_nested_buffer+0x2dc>
    7f14:	ldrh	r0, [r5, #10]
    7f18:	cmp	r0, #0
    7f1c:	beq	8020 <test_nested_buffer+0x2dc>
    7f20:	mov	r1, r4
    7f24:	ldr	r0, [r1, r0]!
    7f28:	add	r0, r1, r0
    7f2c:	movw	r1, #0
    7f30:	movt	r1, #0
    7f34:	add	r0, r0, #4
    7f38:	bl	0 <strcmp>
    7f3c:	cmp	r0, #0
    7f40:	beq	7f5c <test_nested_buffer+0x218>
    7f44:	movw	r0, #0
    7f48:	movt	r0, #0
    7f4c:	bl	0 <puts>
    7f50:	mvn	r0, #0
    7f54:	sub	sp, fp, #16
    7f58:	pop	{r4, r5, r6, r7, fp, pc}
    7f5c:	mov	r1, #0
    7f60:	cmp	r7, #32
    7f64:	bcc	7f90 <test_nested_buffer+0x24c>
    7f68:	ldrh	r0, [r5, #30]
    7f6c:	cmp	r0, #0
    7f70:	beq	7f90 <test_nested_buffer+0x24c>
    7f74:	mov	r2, r4
    7f78:	ldr	r0, [r2, r0]!
    7f7c:	add	r0, r2, r0
    7f80:	ldr	r2, [r0, #8]
    7f84:	cmp	r2, r6
    7f88:	ldreq	r1, [r0, #4]!
    7f8c:	addeq	r1, r0, r1
    7f90:	ldrh	r2, [r5, #8]
    7f94:	movw	r0, #0
    7f98:	movt	r0, #0
    7f9c:	cmp	r2, #0
    7fa0:	beq	7f4c <test_nested_buffer+0x208>
    7fa4:	add	r2, r4, r2
    7fa8:	ldrh	r2, [r2]
    7fac:	cmp	r2, #10
    7fb0:	bne	7f4c <test_nested_buffer+0x208>
    7fb4:	cmp	r1, #0
    7fb8:	beq	8014 <test_nested_buffer+0x2d0>
    7fbc:	ldr	r2, [r1]
    7fc0:	mov	r0, r1
    7fc4:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
    7fc8:	cmp	r2, #12
    7fcc:	bcc	8020 <test_nested_buffer+0x2dc>
    7fd0:	ldrh	r0, [r0, #10]
    7fd4:	cmp	r0, #0
    7fd8:	beq	8020 <test_nested_buffer+0x2dc>
    7fdc:	ldr	r0, [r1, r0]!
    7fe0:	add	r0, r1, r0
    7fe4:	movw	r1, #0
    7fe8:	movt	r1, #0
    7fec:	add	r0, r0, #4
    7ff0:	bl	0 <strcmp>
    7ff4:	cmp	r0, #0
    7ff8:	beq	8008 <test_nested_buffer+0x2c4>
    7ffc:	movw	r0, #0
    8000:	movt	r0, #0
    8004:	b	7f4c <test_nested_buffer+0x208>
    8008:	mov	r0, #0
    800c:	sub	sp, fp, #16
    8010:	pop	{r4, r5, r6, r7, fp, pc}
    8014:	movw	r0, #0
    8018:	movt	r0, #0
    801c:	b	8028 <test_nested_buffer+0x2e4>
    8020:	movw	r0, #0
    8024:	movt	r0, #0
    8028:	movw	r1, #0
    802c:	movw	r3, #0
    8030:	movw	r2, #699	; 0x2bb
    8034:	movt	r1, #0
    8038:	movt	r3, #0
    803c:	bl	0 <__assert_fail>
    8040:	movw	r0, #0
    8044:	movw	r1, #0
    8048:	movw	r3, #0
    804c:	mov	r2, #235	; 0xeb
    8050:	movt	r0, #0
    8054:	movt	r1, #0
    8058:	movt	r3, #0
    805c:	bl	0 <__assert_fail>

00008060 <test_nested_buffer_first>:
    8060:	push	{r4, r5, r6, r7, fp, lr}
    8064:	add	fp, sp, #16
    8068:	sub	sp, sp, #8
    806c:	mov	r4, r0
    8070:	bl	0 <flatcc_builder_reset>
    8074:	movw	r1, #0
    8078:	mov	r0, r4
    807c:	mov	r2, #0
    8080:	mov	r3, #0
    8084:	movt	r1, #0
    8088:	bl	0 <flatcc_builder_start_buffer>
    808c:	cmp	r0, #0
    8090:	bne	80a0 <test_nested_buffer_first+0x40>
    8094:	mov	r0, r4
    8098:	mov	r1, #36	; 0x24
    809c:	bl	0 <flatcc_builder_start_table>
    80a0:	movw	r1, #0
    80a4:	mov	r0, r4
    80a8:	mov	r2, #0
    80ac:	mov	r3, #0
    80b0:	movt	r1, #0
    80b4:	bl	0 <flatcc_builder_start_buffer>
    80b8:	cmp	r0, #0
    80bc:	bne	80cc <test_nested_buffer_first+0x6c>
    80c0:	mov	r0, r4
    80c4:	mov	r1, #36	; 0x24
    80c8:	bl	0 <flatcc_builder_start_table>
    80cc:	movw	r1, #0
    80d0:	mov	r0, r4
    80d4:	movt	r1, #0
    80d8:	bl	0 <flatcc_builder_create_string_str>
    80dc:	cmp	r0, #0
    80e0:	beq	80fc <test_nested_buffer_first+0x9c>
    80e4:	mov	r5, r0
    80e8:	mov	r0, r4
    80ec:	mov	r1, #3
    80f0:	bl	0 <flatcc_builder_table_add_offset>
    80f4:	cmp	r0, #0
    80f8:	strne	r5, [r0]
    80fc:	movw	r1, #0
    8100:	mov	r0, r4
    8104:	mov	r2, #1
    8108:	movt	r1, #0
    810c:	bl	0 <flatcc_builder_check_required>
    8110:	cmp	r0, #0
    8114:	beq	835c <test_nested_buffer_first+0x2fc>
    8118:	mov	r0, r4
    811c:	bl	0 <flatcc_builder_end_table>
    8120:	mov	r1, r0
    8124:	mov	r0, r4
    8128:	bl	0 <flatcc_builder_end_buffer>
    812c:	cmp	r0, #0
    8130:	beq	814c <test_nested_buffer_first+0xec>
    8134:	mov	r5, r0
    8138:	mov	r0, r4
    813c:	mov	r1, #13
    8140:	bl	0 <flatcc_builder_table_add_offset>
    8144:	cmp	r0, #0
    8148:	strne	r5, [r0]
    814c:	mov	r0, r4
    8150:	mov	r1, #2
    8154:	mov	r2, #2
    8158:	mov	r3, #2
    815c:	bl	0 <flatcc_builder_table_add>
    8160:	cmp	r0, #0
    8164:	movne	r1, #10
    8168:	strhne	r1, [r0]
    816c:	movw	r1, #0
    8170:	mov	r0, r4
    8174:	movt	r1, #0
    8178:	bl	0 <flatcc_builder_create_string_str>
    817c:	cmp	r0, #0
    8180:	beq	819c <test_nested_buffer_first+0x13c>
    8184:	mov	r5, r0
    8188:	mov	r0, r4
    818c:	mov	r1, #3
    8190:	bl	0 <flatcc_builder_table_add_offset>
    8194:	cmp	r0, #0
    8198:	strne	r5, [r0]
    819c:	movw	r1, #0
    81a0:	mov	r0, r4
    81a4:	mov	r2, #1
    81a8:	movt	r1, #0
    81ac:	bl	0 <flatcc_builder_check_required>
    81b0:	cmp	r0, #0
    81b4:	beq	835c <test_nested_buffer_first+0x2fc>
    81b8:	mov	r0, r4
    81bc:	bl	0 <flatcc_builder_end_table>
    81c0:	mov	r1, r0
    81c4:	mov	r0, r4
    81c8:	bl	0 <flatcc_builder_end_buffer>
    81cc:	add	r1, sp, #4
    81d0:	mov	r0, r4
    81d4:	bl	0 <flatcc_builder_get_direct_buffer>
    81d8:	mov	r4, r0
    81dc:	movw	r0, #0
    81e0:	ldr	r2, [sp, #4]
    81e4:	movt	r0, #0
    81e8:	mov	r1, r4
    81ec:	ldr	r3, [r0]
    81f0:	movw	r0, #0
    81f4:	movt	r0, #0
    81f8:	bl	5d4 <hexdump>
    81fc:	cmp	r4, #0
    8200:	beq	8330 <test_nested_buffer_first+0x2d0>
    8204:	ldr	r0, [r4, #4]
    8208:	movw	r6, #20301	; 0x4f4d
    820c:	movt	r6, #21326	; 0x534e
    8210:	cmp	r0, r6
    8214:	bne	8330 <test_nested_buffer_first+0x2d0>
    8218:	ldr	r0, [r4]
    821c:	ldr	r0, [r4, r0]!
    8220:	mov	r5, r4
    8224:	ldrh	r7, [r5, -r0]!
    8228:	cmp	r7, #11
    822c:	bls	833c <test_nested_buffer_first+0x2dc>
    8230:	ldrh	r0, [r5, #10]
    8234:	cmp	r0, #0
    8238:	beq	833c <test_nested_buffer_first+0x2dc>
    823c:	mov	r1, r4
    8240:	ldr	r0, [r1, r0]!
    8244:	add	r0, r1, r0
    8248:	movw	r1, #0
    824c:	movt	r1, #0
    8250:	add	r0, r0, #4
    8254:	bl	0 <strcmp>
    8258:	cmp	r0, #0
    825c:	beq	8278 <test_nested_buffer_first+0x218>
    8260:	movw	r0, #0
    8264:	movt	r0, #0
    8268:	bl	0 <puts>
    826c:	mvn	r0, #0
    8270:	sub	sp, fp, #16
    8274:	pop	{r4, r5, r6, r7, fp, pc}
    8278:	mov	r1, #0
    827c:	cmp	r7, #32
    8280:	bcc	82ac <test_nested_buffer_first+0x24c>
    8284:	ldrh	r0, [r5, #30]
    8288:	cmp	r0, #0
    828c:	beq	82ac <test_nested_buffer_first+0x24c>
    8290:	mov	r2, r4
    8294:	ldr	r0, [r2, r0]!
    8298:	add	r0, r2, r0
    829c:	ldr	r2, [r0, #8]
    82a0:	cmp	r2, r6
    82a4:	ldreq	r1, [r0, #4]!
    82a8:	addeq	r1, r0, r1
    82ac:	ldrh	r2, [r5, #8]
    82b0:	movw	r0, #0
    82b4:	movt	r0, #0
    82b8:	cmp	r2, #0
    82bc:	beq	8268 <test_nested_buffer_first+0x208>
    82c0:	add	r2, r4, r2
    82c4:	ldrh	r2, [r2]
    82c8:	cmp	r2, #10
    82cc:	bne	8268 <test_nested_buffer_first+0x208>
    82d0:	cmp	r1, #0
    82d4:	beq	8330 <test_nested_buffer_first+0x2d0>
    82d8:	ldr	r2, [r1]
    82dc:	mov	r0, r1
    82e0:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
    82e4:	cmp	r2, #12
    82e8:	bcc	833c <test_nested_buffer_first+0x2dc>
    82ec:	ldrh	r0, [r0, #10]
    82f0:	cmp	r0, #0
    82f4:	beq	833c <test_nested_buffer_first+0x2dc>
    82f8:	ldr	r0, [r1, r0]!
    82fc:	add	r0, r1, r0
    8300:	movw	r1, #0
    8304:	movt	r1, #0
    8308:	add	r0, r0, #4
    830c:	bl	0 <strcmp>
    8310:	cmp	r0, #0
    8314:	beq	8324 <test_nested_buffer_first+0x2c4>
    8318:	movw	r0, #0
    831c:	movt	r0, #0
    8320:	b	8268 <test_nested_buffer_first+0x208>
    8324:	mov	r0, #0
    8328:	sub	sp, fp, #16
    832c:	pop	{r4, r5, r6, r7, fp, pc}
    8330:	movw	r0, #0
    8334:	movt	r0, #0
    8338:	b	8344 <test_nested_buffer_first+0x2e4>
    833c:	movw	r0, #0
    8340:	movt	r0, #0
    8344:	movw	r1, #0
    8348:	movw	r3, #0
    834c:	movw	r2, #699	; 0x2bb
    8350:	movt	r1, #0
    8354:	movt	r3, #0
    8358:	bl	0 <__assert_fail>
    835c:	movw	r0, #0
    8360:	movw	r1, #0
    8364:	movw	r3, #0
    8368:	mov	r2, #235	; 0xeb
    836c:	movt	r0, #0
    8370:	movt	r1, #0
    8374:	movt	r3, #0
    8378:	bl	0 <__assert_fail>

0000837c <test_nested_buffer_using_nest>:
    837c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    8380:	add	fp, sp, #24
    8384:	sub	sp, sp, #1040	; 0x410
    8388:	mov	r4, r0
    838c:	bl	0 <flatcc_builder_reset>
    8390:	movw	r1, #0
    8394:	mov	r0, r4
    8398:	mov	r2, #0
    839c:	mov	r3, #0
    83a0:	movt	r1, #0
    83a4:	bl	0 <flatcc_builder_start_buffer>
    83a8:	cmp	r0, #0
    83ac:	bne	83bc <test_nested_buffer_using_nest+0x40>
    83b0:	mov	r0, r4
    83b4:	mov	r1, #36	; 0x24
    83b8:	bl	0 <flatcc_builder_start_table>
    83bc:	movw	r1, #0
    83c0:	mov	r0, r4
    83c4:	movt	r1, #0
    83c8:	bl	0 <flatcc_builder_create_string_str>
    83cc:	cmp	r0, #0
    83d0:	beq	83ec <test_nested_buffer_using_nest+0x70>
    83d4:	mov	r5, r0
    83d8:	mov	r0, r4
    83dc:	mov	r1, #3
    83e0:	bl	0 <flatcc_builder_table_add_offset>
    83e4:	cmp	r0, #0
    83e8:	strne	r5, [r0]
    83ec:	mov	r0, r4
    83f0:	mov	r1, #1
    83f4:	mov	r2, #2
    83f8:	mov	r3, #2
    83fc:	bl	0 <flatcc_builder_table_add>
    8400:	cmp	r0, #0
    8404:	mov	r2, #1
    8408:	movne	r1, #42	; 0x2a
    840c:	strhne	r1, [r0]
    8410:	movw	r1, #0
    8414:	mov	r0, r4
    8418:	movt	r1, #0
    841c:	bl	0 <flatcc_builder_check_required>
    8420:	cmp	r0, #0
    8424:	beq	86f0 <test_nested_buffer_using_nest+0x374>
    8428:	mov	r0, r4
    842c:	bl	0 <flatcc_builder_end_table>
    8430:	mov	r1, r0
    8434:	mov	r0, r4
    8438:	bl	0 <flatcc_builder_end_buffer>
    843c:	mov	r0, r4
    8440:	bl	0 <flatcc_builder_get_buffer_size>
    8444:	mov	r5, r0
    8448:	add	r1, sp, #16
    844c:	mov	r0, r4
    8450:	mov	r2, #1024	; 0x400
    8454:	bl	0 <flatcc_builder_copy_buffer>
    8458:	cmp	r0, #0
    845c:	beq	85f8 <test_nested_buffer_using_nest+0x27c>
    8460:	mov	r0, r4
    8464:	bl	0 <flatcc_builder_reset>
    8468:	movw	r1, #0
    846c:	mov	r0, r4
    8470:	mov	r2, #0
    8474:	mov	r3, #0
    8478:	movt	r1, #0
    847c:	bl	0 <flatcc_builder_start_buffer>
    8480:	cmp	r0, #0
    8484:	bne	8494 <test_nested_buffer_using_nest+0x118>
    8488:	mov	r0, r4
    848c:	mov	r1, #36	; 0x24
    8490:	bl	0 <flatcc_builder_start_table>
    8494:	mvn	r0, #0
    8498:	mov	r1, #8
    849c:	mov	r2, r5
    84a0:	mov	r3, #1
    84a4:	str	r1, [sp]
    84a8:	str	r0, [sp, #4]
    84ac:	add	r1, sp, #16
    84b0:	mov	r0, r4
    84b4:	bl	0 <flatcc_builder_create_vector>
    84b8:	cmp	r0, #0
    84bc:	beq	84d8 <test_nested_buffer_using_nest+0x15c>
    84c0:	mov	r5, r0
    84c4:	mov	r0, r4
    84c8:	mov	r1, #13
    84cc:	bl	0 <flatcc_builder_table_add_offset>
    84d0:	cmp	r0, #0
    84d4:	strne	r5, [r0]
    84d8:	mov	r0, r4
    84dc:	mov	r1, #2
    84e0:	mov	r2, #2
    84e4:	mov	r3, #2
    84e8:	bl	0 <flatcc_builder_table_add>
    84ec:	cmp	r0, #0
    84f0:	movne	r1, #10
    84f4:	strhne	r1, [r0]
    84f8:	movw	r1, #0
    84fc:	mov	r0, r4
    8500:	movt	r1, #0
    8504:	bl	0 <flatcc_builder_create_string_str>
    8508:	cmp	r0, #0
    850c:	beq	8528 <test_nested_buffer_using_nest+0x1ac>
    8510:	mov	r5, r0
    8514:	mov	r0, r4
    8518:	mov	r1, #3
    851c:	bl	0 <flatcc_builder_table_add_offset>
    8520:	cmp	r0, #0
    8524:	strne	r5, [r0]
    8528:	movw	r1, #0
    852c:	mov	r0, r4
    8530:	mov	r2, #1
    8534:	movt	r1, #0
    8538:	bl	0 <flatcc_builder_check_required>
    853c:	cmp	r0, #0
    8540:	beq	86f0 <test_nested_buffer_using_nest+0x374>
    8544:	mov	r0, r4
    8548:	bl	0 <flatcc_builder_end_table>
    854c:	mov	r1, r0
    8550:	mov	r0, r4
    8554:	bl	0 <flatcc_builder_end_buffer>
    8558:	add	r1, sp, #12
    855c:	mov	r0, r4
    8560:	bl	0 <flatcc_builder_get_direct_buffer>
    8564:	mov	r4, r0
    8568:	movw	r0, #0
    856c:	ldr	r2, [sp, #12]
    8570:	movt	r0, #0
    8574:	mov	r1, r4
    8578:	ldr	r3, [r0]
    857c:	movw	r0, #0
    8580:	movt	r0, #0
    8584:	bl	5d4 <hexdump>
    8588:	cmp	r4, #0
    858c:	beq	8710 <test_nested_buffer_using_nest+0x394>
    8590:	ldr	r0, [r4, #4]
    8594:	movw	r7, #20301	; 0x4f4d
    8598:	movt	r7, #21326	; 0x534e
    859c:	cmp	r0, r7
    85a0:	bne	8710 <test_nested_buffer_using_nest+0x394>
    85a4:	ldr	r0, [r4]
    85a8:	ldr	r0, [r4, r0]!
    85ac:	mov	r6, r4
    85b0:	ldrh	r5, [r6, -r0]!
    85b4:	cmp	r5, #11
    85b8:	bls	871c <test_nested_buffer_using_nest+0x3a0>
    85bc:	ldrh	r0, [r6, #10]
    85c0:	cmp	r0, #0
    85c4:	beq	871c <test_nested_buffer_using_nest+0x3a0>
    85c8:	mov	r1, r4
    85cc:	ldr	r0, [r1, r0]!
    85d0:	add	r0, r1, r0
    85d4:	movw	r1, #0
    85d8:	movt	r1, #0
    85dc:	add	r0, r0, #4
    85e0:	bl	0 <strcmp>
    85e4:	cmp	r0, #0
    85e8:	beq	8614 <test_nested_buffer_using_nest+0x298>
    85ec:	movw	r0, #0
    85f0:	movt	r0, #0
    85f4:	b	8600 <test_nested_buffer_using_nest+0x284>
    85f8:	movw	r0, #0
    85fc:	movt	r0, #0
    8600:	bl	0 <puts>
    8604:	mvn	r1, #0
    8608:	mov	r0, r1
    860c:	sub	sp, fp, #24
    8610:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    8614:	mov	r8, #0
    8618:	cmp	r5, #32
    861c:	bcc	8648 <test_nested_buffer_using_nest+0x2cc>
    8620:	ldrh	r0, [r6, #30]
    8624:	cmp	r0, #0
    8628:	beq	8648 <test_nested_buffer_using_nest+0x2cc>
    862c:	mov	r1, r4
    8630:	ldr	r0, [r1, r0]!
    8634:	add	r0, r1, r0
    8638:	ldr	r1, [r0, #8]
    863c:	cmp	r1, r7
    8640:	ldreq	r1, [r0, #4]!
    8644:	addeq	r8, r0, r1
    8648:	ldrh	r1, [r6, #8]
    864c:	movw	r0, #0
    8650:	movt	r0, #0
    8654:	cmp	r1, #0
    8658:	beq	8600 <test_nested_buffer_using_nest+0x284>
    865c:	add	r1, r4, r1
    8660:	ldrh	r1, [r1]
    8664:	cmp	r1, #10
    8668:	bne	8600 <test_nested_buffer_using_nest+0x284>
    866c:	cmp	r8, #0
    8670:	beq	8710 <test_nested_buffer_using_nest+0x394>
    8674:	ldr	r0, [r8]
    8678:	mov	r4, r8
    867c:	ldrh	r0, [r4, -r0]!	; <UNPREDICTABLE>
    8680:	cmp	r0, #12
    8684:	bcc	871c <test_nested_buffer_using_nest+0x3a0>
    8688:	ldrh	r0, [r4, #10]
    868c:	cmp	r0, #0
    8690:	beq	871c <test_nested_buffer_using_nest+0x3a0>
    8694:	mov	r1, r8
    8698:	ldr	r0, [r1, r0]!
    869c:	add	r0, r1, r0
    86a0:	movw	r1, #0
    86a4:	movt	r1, #0
    86a8:	add	r0, r0, #4
    86ac:	bl	0 <strcmp>
    86b0:	cmp	r0, #0
    86b4:	beq	86c4 <test_nested_buffer_using_nest+0x348>
    86b8:	movw	r0, #0
    86bc:	movt	r0, #0
    86c0:	b	8600 <test_nested_buffer_using_nest+0x284>
    86c4:	ldrh	r1, [r4, #6]
    86c8:	movw	r0, #0
    86cc:	movt	r0, #0
    86d0:	cmp	r1, #0
    86d4:	beq	8600 <test_nested_buffer_using_nest+0x284>
    86d8:	add	r1, r8, r1
    86dc:	ldrh	r2, [r1]
    86e0:	mov	r1, #0
    86e4:	cmp	r2, #42	; 0x2a
    86e8:	bne	8600 <test_nested_buffer_using_nest+0x284>
    86ec:	b	8608 <test_nested_buffer_using_nest+0x28c>
    86f0:	movw	r0, #0
    86f4:	movw	r1, #0
    86f8:	movw	r3, #0
    86fc:	mov	r2, #235	; 0xeb
    8700:	movt	r0, #0
    8704:	movt	r1, #0
    8708:	movt	r3, #0
    870c:	bl	0 <__assert_fail>
    8710:	movw	r0, #0
    8714:	movt	r0, #0
    8718:	b	8724 <test_nested_buffer_using_nest+0x3a8>
    871c:	movw	r0, #0
    8720:	movt	r0, #0
    8724:	movw	r1, #0
    8728:	movw	r3, #0
    872c:	movw	r2, #699	; 0x2bb
    8730:	movt	r1, #0
    8734:	movt	r3, #0
    8738:	bl	0 <__assert_fail>

0000873c <verify_include>:
    873c:	mov	r0, #0
    8740:	bx	lr
    8744:	nop	{0}

00008748 <test_struct_buffer>:
    8748:	push	{r4, r5, r6, sl, fp, lr}
    874c:	add	fp, sp, #16
    8750:	sub	sp, sp, #112	; 0x70
    8754:	mov	r4, r0
    8758:	bl	0 <flatcc_builder_reset>
    875c:	mov	r0, r4
    8760:	mov	r1, #32
    8764:	mov	r2, #16
    8768:	mov	r5, #16
    876c:	bl	0 <flatcc_builder_start_struct>
    8770:	mov	r6, #0
    8774:	cmp	r0, #0
    8778:	mov	r3, #0
    877c:	beq	87d8 <test_struct_buffer+0x90>
    8780:	movw	r1, #52428	; 0xcccc
    8784:	movw	r2, #52429	; 0xcccd
    8788:	mov	r3, #1065353216	; 0x3f800000
    878c:	movt	r2, #52428	; 0xcccc
    8790:	movt	r1, #16400	; 0x4010
    8794:	str	r2, [r0, #16]
    8798:	str	r1, [r0, #20]
    879c:	mov	r1, #239	; 0xef
    87a0:	mov	r2, #1073741824	; 0x40000000
    87a4:	strb	r1, [r0, #28]
    87a8:	movw	r1, #2730	; 0xaaa
    87ac:	strh	r1, [r0, #26]
    87b0:	mov	r1, #8
    87b4:	strb	r1, [r0, #24]
    87b8:	movw	r1, #0
    87bc:	str	r3, [r0]
    87c0:	str	r2, [r0, #4]
    87c4:	movt	r1, #16448	; 0x4040
    87c8:	str	r1, [r0, #8]
    87cc:	mov	r0, r4
    87d0:	bl	0 <flatcc_builder_end_struct>
    87d4:	mov	r3, r0
    87d8:	movw	r1, #0
    87dc:	mov	r0, r4
    87e0:	mov	r2, #0
    87e4:	stm	sp, {r5, r6}
    87e8:	movt	r1, #0
    87ec:	bl	0 <flatcc_builder_create_buffer>
    87f0:	mov	r0, r4
    87f4:	bl	0 <flatcc_builder_get_buffer_size>
    87f8:	cmp	r0, #48	; 0x30
    87fc:	bne	892c <test_struct_buffer+0x1e4>
    8800:	movw	r0, #0
    8804:	mov	r1, #48	; 0x30
    8808:	movt	r0, #0
    880c:	bl	0 <printf>
    8810:	mov	r0, r4
    8814:	bl	0 <flatcc_builder_get_emit_context>
    8818:	ldr	r0, [r0, #24]
    881c:	cmp	r0, #48	; 0x30
    8820:	bne	8944 <test_struct_buffer+0x1fc>
    8824:	add	r1, sp, #12
    8828:	mov	r0, r4
    882c:	mov	r2, #100	; 0x64
    8830:	bl	0 <flatcc_builder_copy_buffer>
    8834:	cmp	r0, #0
    8838:	beq	8904 <test_struct_buffer+0x1bc>
    883c:	movw	r0, #0
    8840:	add	r4, sp, #12
    8844:	mov	r2, #48	; 0x30
    8848:	movt	r0, #0
    884c:	mov	r1, r4
    8850:	ldr	r3, [r0]
    8854:	movw	r0, #0
    8858:	movt	r0, #0
    885c:	bl	5d4 <hexdump>
    8860:	ldr	r0, [sp, #16]
    8864:	movw	r1, #20301	; 0x4f4d
    8868:	movt	r1, #21326	; 0x534e
    886c:	cmp	r0, r1
    8870:	bne	8910 <test_struct_buffer+0x1c8>
    8874:	ldr	r0, [sp, #12]
    8878:	vmov.f32	s2, #112	; 0x3f800000  1.0
    887c:	add	r1, r4, r0
    8880:	movw	r0, #0
    8884:	vldr	s0, [r1]
    8888:	movt	r0, #0
    888c:	vcmp.f32	s0, s2
    8890:	vmrs	APSR_nzcv, fpscr
    8894:	bne	8918 <test_struct_buffer+0x1d0>
    8898:	vldr	s0, [r1, #4]
    889c:	vmov.f32	s2, #0	; 0x40000000  2.0
    88a0:	vcmp.f32	s0, s2
    88a4:	vmrs	APSR_nzcv, fpscr
    88a8:	bne	8918 <test_struct_buffer+0x1d0>
    88ac:	vldr	s0, [r1, #8]
    88b0:	vmov.f32	s2, #8	; 0x40400000  3.0
    88b4:	vcmp.f32	s0, s2
    88b8:	vmrs	APSR_nzcv, fpscr
    88bc:	bne	8918 <test_struct_buffer+0x1d0>
    88c0:	vldr	d16, [pc, #160]	; 8968 <test_struct_buffer+0x220>
    88c4:	vldr	d17, [r1, #16]
    88c8:	vcmp.f64	d17, d16
    88cc:	vmrs	APSR_nzcv, fpscr
    88d0:	bne	8918 <test_struct_buffer+0x1d0>
    88d4:	ldrb	r2, [r1, #24]
    88d8:	cmp	r2, #8
    88dc:	bne	8918 <test_struct_buffer+0x1d0>
    88e0:	ldrh	r2, [r1, #26]
    88e4:	movw	r3, #2730	; 0xaaa
    88e8:	cmp	r2, r3
    88ec:	bne	8918 <test_struct_buffer+0x1d0>
    88f0:	ldrb	r2, [r1, #28]
    88f4:	mov	r1, #0
    88f8:	cmp	r2, #239	; 0xef
    88fc:	bne	8918 <test_struct_buffer+0x1d0>
    8900:	b	8920 <test_struct_buffer+0x1d8>
    8904:	movw	r0, #0
    8908:	movt	r0, #0
    890c:	b	8918 <test_struct_buffer+0x1d0>
    8910:	movw	r0, #0
    8914:	movt	r0, #0
    8918:	bl	0 <puts>
    891c:	mvn	r1, #0
    8920:	mov	r0, r1
    8924:	sub	sp, fp, #16
    8928:	pop	{r4, r5, r6, sl, fp, pc}
    892c:	movw	r0, #0
    8930:	movw	r1, #0
    8934:	movw	r3, #0
    8938:	movw	r2, #2339	; 0x923
    893c:	movt	r0, #0
    8940:	b	8958 <test_struct_buffer+0x210>
    8944:	movw	r0, #0
    8948:	movw	r1, #0
    894c:	movw	r3, #0
    8950:	movw	r2, #2341	; 0x925
    8954:	movt	r0, #0
    8958:	movt	r1, #0
    895c:	movt	r3, #0
    8960:	bl	0 <__assert_fail>
    8964:	nop	{0}
    8968:	.word	0xcccccccd
    896c:	.word	0x4010cccc

00008970 <test_typed_struct_buffer>:
    8970:	push	{r4, r5, r6, sl, fp, lr}
    8974:	add	fp, sp, #16
    8978:	sub	sp, sp, #112	; 0x70
    897c:	mov	r4, r0
    8980:	bl	0 <flatcc_builder_reset>
    8984:	mov	r0, r4
    8988:	mov	r1, #32
    898c:	mov	r2, #16
    8990:	mov	r5, #16
    8994:	bl	0 <flatcc_builder_start_struct>
    8998:	mov	r6, #0
    899c:	cmp	r0, #0
    89a0:	mov	r3, #0
    89a4:	beq	8a00 <test_typed_struct_buffer+0x90>
    89a8:	movw	r1, #52428	; 0xcccc
    89ac:	movw	r2, #52429	; 0xcccd
    89b0:	mov	r3, #1065353216	; 0x3f800000
    89b4:	movt	r2, #52428	; 0xcccc
    89b8:	movt	r1, #16400	; 0x4010
    89bc:	str	r2, [r0, #16]
    89c0:	str	r1, [r0, #20]
    89c4:	mov	r1, #239	; 0xef
    89c8:	mov	r2, #1073741824	; 0x40000000
    89cc:	strb	r1, [r0, #28]
    89d0:	movw	r1, #2730	; 0xaaa
    89d4:	strh	r1, [r0, #26]
    89d8:	mov	r1, #8
    89dc:	strb	r1, [r0, #24]
    89e0:	movw	r1, #0
    89e4:	str	r3, [r0]
    89e8:	str	r2, [r0, #4]
    89ec:	movt	r1, #16448	; 0x4040
    89f0:	str	r1, [r0, #8]
    89f4:	mov	r0, r4
    89f8:	bl	0 <flatcc_builder_end_struct>
    89fc:	mov	r3, r0
    8a00:	movw	r1, #0
    8a04:	mov	r0, r4
    8a08:	mov	r2, #0
    8a0c:	stm	sp, {r5, r6}
    8a10:	movt	r1, #0
    8a14:	bl	0 <flatcc_builder_create_buffer>
    8a18:	mov	r0, r4
    8a1c:	bl	0 <flatcc_builder_get_buffer_size>
    8a20:	cmp	r0, #48	; 0x30
    8a24:	bne	8bcc <test_typed_struct_buffer+0x25c>
    8a28:	movw	r0, #0
    8a2c:	mov	r1, #48	; 0x30
    8a30:	movt	r0, #0
    8a34:	bl	0 <printf>
    8a38:	mov	r0, r4
    8a3c:	bl	0 <flatcc_builder_get_emit_context>
    8a40:	ldr	r0, [r0, #24]
    8a44:	cmp	r0, #48	; 0x30
    8a48:	bne	8be4 <test_typed_struct_buffer+0x274>
    8a4c:	add	r1, sp, #12
    8a50:	mov	r0, r4
    8a54:	mov	r2, #100	; 0x64
    8a58:	bl	0 <flatcc_builder_copy_buffer>
    8a5c:	cmp	r0, #0
    8a60:	beq	8acc <test_typed_struct_buffer+0x15c>
    8a64:	movw	r0, #0
    8a68:	add	r1, sp, #12
    8a6c:	mov	r2, #48	; 0x30
    8a70:	movt	r0, #0
    8a74:	ldr	r3, [r0]
    8a78:	movw	r0, #0
    8a7c:	movt	r0, #0
    8a80:	bl	5d4 <hexdump>
    8a84:	ldr	r0, [sp, #16]
    8a88:	movw	r4, #16082	; 0x3ed2
    8a8c:	movt	r4, #43253	; 0xa8f5
    8a90:	cmp	r0, r4
    8a94:	bne	8ad8 <test_typed_struct_buffer+0x168>
    8a98:	mov	r0, #16
    8a9c:	add	r5, sp, #12
    8aa0:	mov	r1, #48	; 0x30
    8aa4:	mov	r2, r4
    8aa8:	mov	r3, #32
    8aac:	str	r0, [sp]
    8ab0:	mov	r0, r5
    8ab4:	bl	0 <flatcc_verify_struct_as_typed_root>
    8ab8:	cmp	r0, #0
    8abc:	beq	8af4 <test_typed_struct_buffer+0x184>
    8ac0:	movw	r0, #0
    8ac4:	movt	r0, #0
    8ac8:	b	8ae0 <test_typed_struct_buffer+0x170>
    8acc:	movw	r0, #0
    8ad0:	movt	r0, #0
    8ad4:	b	8ae0 <test_typed_struct_buffer+0x170>
    8ad8:	movw	r0, #0
    8adc:	movt	r0, #0
    8ae0:	bl	0 <puts>
    8ae4:	mvn	r1, #0
    8ae8:	mov	r0, r1
    8aec:	sub	sp, fp, #16
    8af0:	pop	{r4, r5, r6, sl, fp, pc}
    8af4:	ldr	r0, [sp, #16]
    8af8:	cmp	r0, r4
    8afc:	bne	8b34 <test_typed_struct_buffer+0x1c4>
    8b00:	ldr	r6, [sp, #12]
    8b04:	mov	r0, #16
    8b08:	mov	r1, #48	; 0x30
    8b0c:	mov	r2, r4
    8b10:	mov	r3, #32
    8b14:	str	r0, [sp]
    8b18:	mov	r0, r5
    8b1c:	bl	0 <flatcc_verify_struct_as_typed_root>
    8b20:	cmp	r0, #0
    8b24:	beq	8b40 <test_typed_struct_buffer+0x1d0>
    8b28:	movw	r0, #0
    8b2c:	movt	r0, #0
    8b30:	b	8ae0 <test_typed_struct_buffer+0x170>
    8b34:	movw	r0, #0
    8b38:	movt	r0, #0
    8b3c:	b	8ae0 <test_typed_struct_buffer+0x170>
    8b40:	add	r1, r5, r6
    8b44:	vmov.f32	s2, #112	; 0x3f800000  1.0
    8b48:	movw	r0, #0
    8b4c:	vldr	s0, [r1]
    8b50:	movt	r0, #0
    8b54:	vcmp.f32	s0, s2
    8b58:	vmrs	APSR_nzcv, fpscr
    8b5c:	bne	8ae0 <test_typed_struct_buffer+0x170>
    8b60:	vldr	s0, [r1, #4]
    8b64:	vmov.f32	s2, #0	; 0x40000000  2.0
    8b68:	vcmp.f32	s0, s2
    8b6c:	vmrs	APSR_nzcv, fpscr
    8b70:	bne	8ae0 <test_typed_struct_buffer+0x170>
    8b74:	vldr	s0, [r1, #8]
    8b78:	vmov.f32	s2, #8	; 0x40400000  3.0
    8b7c:	vcmp.f32	s0, s2
    8b80:	vmrs	APSR_nzcv, fpscr
    8b84:	bne	8ae0 <test_typed_struct_buffer+0x170>
    8b88:	vldr	d16, [pc, #120]	; 8c08 <test_typed_struct_buffer+0x298>
    8b8c:	vldr	d17, [r1, #16]
    8b90:	vcmp.f64	d17, d16
    8b94:	vmrs	APSR_nzcv, fpscr
    8b98:	bne	8ae0 <test_typed_struct_buffer+0x170>
    8b9c:	ldrb	r2, [r1, #24]
    8ba0:	cmp	r2, #8
    8ba4:	bne	8ae0 <test_typed_struct_buffer+0x170>
    8ba8:	ldrh	r2, [r1, #26]
    8bac:	movw	r3, #2730	; 0xaaa
    8bb0:	cmp	r2, r3
    8bb4:	bne	8ae0 <test_typed_struct_buffer+0x170>
    8bb8:	ldrb	r2, [r1, #28]
    8bbc:	mov	r1, #0
    8bc0:	cmp	r2, #239	; 0xef
    8bc4:	bne	8ae0 <test_typed_struct_buffer+0x170>
    8bc8:	b	8ae8 <test_typed_struct_buffer+0x178>
    8bcc:	movw	r0, #0
    8bd0:	movw	r1, #0
    8bd4:	movw	r3, #0
    8bd8:	movw	r2, #2388	; 0x954
    8bdc:	movt	r0, #0
    8be0:	b	8bf8 <test_typed_struct_buffer+0x288>
    8be4:	movw	r0, #0
    8be8:	movw	r1, #0
    8bec:	movw	r3, #0
    8bf0:	movw	r2, #2390	; 0x956
    8bf4:	movt	r0, #0
    8bf8:	movt	r1, #0
    8bfc:	movt	r3, #0
    8c00:	bl	0 <__assert_fail>
    8c04:	nop	{0}
    8c08:	.word	0xcccccccd
    8c0c:	.word	0x4010cccc

00008c10 <gen_monster_benchmark>:
    8c10:	push	{r4, r5, fp, lr}
    8c14:	add	fp, sp, #8
    8c18:	sub	sp, sp, #24
    8c1c:	mov	r4, r0
    8c20:	movw	r0, #0
    8c24:	movt	r0, #0
    8c28:	vldr	d16, [r0]
    8c2c:	movw	r0, #2312	; 0x908
    8c30:	strh	r0, [sp, #16]
    8c34:	mov	r0, r4
    8c38:	vstr	d16, [sp, #8]
    8c3c:	bl	0 <flatcc_builder_reset>
    8c40:	movw	r1, #0
    8c44:	mov	r0, r4
    8c48:	mov	r2, #0
    8c4c:	mov	r3, #0
    8c50:	movt	r1, #0
    8c54:	bl	0 <flatcc_builder_start_buffer>
    8c58:	cmp	r0, #0
    8c5c:	bne	8c6c <gen_monster_benchmark+0x5c>
    8c60:	mov	r0, r4
    8c64:	mov	r1, #36	; 0x24
    8c68:	bl	0 <flatcc_builder_start_table>
    8c6c:	mov	r0, r4
    8c70:	mov	r1, #2
    8c74:	mov	r2, #2
    8c78:	mov	r3, #2
    8c7c:	bl	0 <flatcc_builder_table_add>
    8c80:	cmp	r0, #0
    8c84:	mov	r2, #32
    8c88:	mov	r3, #16
    8c8c:	movne	r1, #80	; 0x50
    8c90:	strhne	r1, [r0]
    8c94:	mov	r0, r4
    8c98:	mov	r1, #0
    8c9c:	bl	0 <flatcc_builder_table_add>
    8ca0:	movw	r1, #52429	; 0xcccd
    8ca4:	mov	r3, #1065353216	; 0x3f800000
    8ca8:	mov	r2, #1073741824	; 0x40000000
    8cac:	movt	r1, #49228	; 0xc04c
    8cb0:	str	r3, [r0]
    8cb4:	str	r2, [r0, #4]
    8cb8:	str	r1, [r0, #8]
    8cbc:	movw	r1, #0
    8cc0:	mov	r0, r4
    8cc4:	movt	r1, #0
    8cc8:	bl	0 <flatcc_builder_create_string_str>
    8ccc:	cmp	r0, #0
    8cd0:	beq	8cec <gen_monster_benchmark+0xdc>
    8cd4:	mov	r5, r0
    8cd8:	mov	r0, r4
    8cdc:	mov	r1, #3
    8ce0:	bl	0 <flatcc_builder_table_add_offset>
    8ce4:	cmp	r0, #0
    8ce8:	strne	r5, [r0]
    8cec:	mvn	r0, #0
    8cf0:	mov	r1, #1
    8cf4:	mov	r2, #10
    8cf8:	mov	r3, #1
    8cfc:	str	r1, [sp]
    8d00:	str	r0, [sp, #4]
    8d04:	add	r1, sp, #8
    8d08:	mov	r0, r4
    8d0c:	bl	0 <flatcc_builder_create_vector>
    8d10:	cmp	r0, #0
    8d14:	beq	8d30 <gen_monster_benchmark+0x120>
    8d18:	mov	r5, r0
    8d1c:	mov	r0, r4
    8d20:	mov	r1, #5
    8d24:	bl	0 <flatcc_builder_table_add_offset>
    8d28:	cmp	r0, #0
    8d2c:	strne	r5, [r0]
    8d30:	mov	r0, r4
    8d34:	mov	r1, #4
    8d38:	mov	r2, #2
    8d3c:	mvn	r3, #-1073741824	; 0xc0000000
    8d40:	bl	0 <flatcc_builder_start_vector>
    8d44:	mov	r0, r4
    8d48:	mov	r1, #1
    8d4c:	bl	0 <flatcc_builder_extend_vector>
    8d50:	mov	r1, #32
    8d54:	strb	r1, [r0, #2]
    8d58:	mov	r1, #16
    8d5c:	strh	r1, [r0]
    8d60:	mov	r0, r4
    8d64:	mov	r1, #2
    8d68:	bl	0 <flatcc_builder_extend_vector>
    8d6c:	mov	r1, #96	; 0x60
    8d70:	strb	r1, [r0, #6]
    8d74:	mov	r1, #80	; 0x50
    8d78:	strh	r1, [r0, #4]
    8d7c:	mov	r1, #64	; 0x40
    8d80:	strb	r1, [r0, #2]
    8d84:	mov	r1, #48	; 0x30
    8d88:	strh	r1, [r0]
    8d8c:	mov	r0, r4
    8d90:	mov	r1, #1
    8d94:	bl	0 <flatcc_builder_extend_vector>
    8d98:	cmp	r0, #0
    8d9c:	movne	r1, #128	; 0x80
    8da0:	strbne	r1, [r0, #2]
    8da4:	movne	r1, #112	; 0x70
    8da8:	strhne	r1, [r0]
    8dac:	mov	r0, r4
    8db0:	mov	r1, #1
    8db4:	bl	0 <flatcc_builder_extend_vector>
    8db8:	cmp	r0, #0
    8dbc:	movwne	r1, #401	; 0x191
    8dc0:	movtne	r1, #145	; 0x91
    8dc4:	strne	r1, [r0]
    8dc8:	mov	r0, r4
    8dcc:	bl	0 <flatcc_builder_end_vector>
    8dd0:	cmp	r0, #0
    8dd4:	beq	8df0 <gen_monster_benchmark+0x1e0>
    8dd8:	mov	r5, r0
    8ddc:	mov	r0, r4
    8de0:	mov	r1, #9
    8de4:	bl	0 <flatcc_builder_table_add_offset>
    8de8:	cmp	r0, #0
    8dec:	strne	r5, [r0]
    8df0:	movw	r1, #0
    8df4:	mov	r0, r4
    8df8:	mov	r2, #1
    8dfc:	movt	r1, #0
    8e00:	bl	0 <flatcc_builder_check_required>
    8e04:	cmp	r0, #0
    8e08:	beq	8e2c <gen_monster_benchmark+0x21c>
    8e0c:	mov	r0, r4
    8e10:	bl	0 <flatcc_builder_end_table>
    8e14:	mov	r1, r0
    8e18:	mov	r0, r4
    8e1c:	bl	0 <flatcc_builder_end_buffer>
    8e20:	mov	r0, #0
    8e24:	sub	sp, fp, #8
    8e28:	pop	{r4, r5, fp, pc}
    8e2c:	movw	r0, #0
    8e30:	movw	r1, #0
    8e34:	movw	r3, #0
    8e38:	mov	r2, #235	; 0xeb
    8e3c:	movt	r0, #0
    8e40:	movt	r1, #0
    8e44:	movt	r3, #0
    8e48:	bl	0 <__assert_fail>
    8e4c:	nop	{0}

00008e50 <time_monster>:
    8e50:	push	{r4, r5, r6, r7, fp, lr}
    8e54:	add	fp, sp, #16
    8e58:	vpush	{d8-d9}
    8e5c:	sub	sp, sp, #8
    8e60:	mov	r4, r0
    8e64:	movw	r0, #0
    8e68:	movt	r0, #0
    8e6c:	bl	0 <puts>
    8e70:	mov	r0, sp
    8e74:	mov	r1, #0
    8e78:	bl	0 <gettimeofday>
    8e7c:	movw	r5, #0
    8e80:	movt	r5, #0
    8e84:	ldr	r0, [r5]
    8e88:	cmp	r0, #0
    8e8c:	beq	8e9c <time_monster+0x4c>
    8e90:	ldr	r1, [r5, #4]
    8e94:	ldr	r2, [sp]
    8e98:	b	8ea8 <time_monster+0x58>
    8e9c:	ldm	sp, {r0, r1}
    8ea0:	mov	r2, r0
    8ea4:	strd	r0, [r5]
    8ea8:	ldr	r3, [sp, #4]
    8eac:	vldr	d8, [pc, #180]	; 8f68 <time_monster+0x118>
    8eb0:	movw	r7, #16960	; 0x4240
    8eb4:	sub	r6, r2, r0
    8eb8:	movt	r7, #15
    8ebc:	sub	r1, r3, r1
    8ec0:	vmov	s0, r1
    8ec4:	vcvt.f64.s32	d16, s0
    8ec8:	vdiv.f64	d9, d16, d8
    8ecc:	mov	r0, r4
    8ed0:	bl	8c10 <gen_monster_benchmark>
    8ed4:	subs	r7, r7, #1
    8ed8:	bne	8ecc <time_monster+0x7c>
    8edc:	mov	r0, r4
    8ee0:	bl	0 <flatcc_builder_get_buffer_size>
    8ee4:	mov	r4, r0
    8ee8:	mov	r0, sp
    8eec:	mov	r1, #0
    8ef0:	bl	0 <gettimeofday>
    8ef4:	vmov	s0, r6
    8ef8:	vcvt.f64.s32	d16, s0
    8efc:	ldr	r0, [r5]
    8f00:	cmp	r0, #0
    8f04:	vadd.f64	d0, d9, d16
    8f08:	beq	8f18 <time_monster+0xc8>
    8f0c:	ldr	r1, [r5, #4]
    8f10:	ldr	r2, [sp]
    8f14:	b	8f24 <time_monster+0xd4>
    8f18:	ldm	sp, {r0, r1}
    8f1c:	mov	r2, r0
    8f20:	strd	r0, [r5]
    8f24:	sub	r0, r2, r0
    8f28:	ldr	r2, [sp, #4]
    8f2c:	vmov	s4, r0
    8f30:	movw	r0, #0
    8f34:	movt	r0, #0
    8f38:	sub	r1, r2, r1
    8f3c:	vmov	s2, r1
    8f40:	mov	r1, r4
    8f44:	vcvt.f64.s32	d16, s2
    8f48:	vcvt.f64.s32	d17, s4
    8f4c:	vdiv.f64	d16, d16, d8
    8f50:	vadd.f64	d1, d16, d17
    8f54:	bl	8f70 <show_benchmark>
    8f58:	mov	r0, #0
    8f5c:	sub	sp, fp, #32
    8f60:	vpop	{d8-d9}
    8f64:	pop	{r4, r5, r6, r7, fp, pc}
    8f68:	.word	0x00000000
    8f6c:	.word	0x412e8480

00008f70 <show_benchmark>:
    8f70:	push	{r4, sl, fp, lr}
    8f74:	add	fp, sp, #8
    8f78:	vpush	{d8-d9}
    8f7c:	mov	r4, r1
    8f80:	mov	r1, r0
    8f84:	movw	r0, #0
    8f88:	vmov.f64	d8, d1
    8f8c:	vmov.f64	d9, d0
    8f90:	movt	r0, #0
    8f94:	bl	0 <printf>
    8f98:	vsub.f64	d9, d8, d9
    8f9c:	movw	r0, #0
    8fa0:	movt	r0, #0
    8fa4:	vmov	r2, r3, d9
    8fa8:	bl	0 <printf>
    8fac:	movw	r0, #0
    8fb0:	movw	r1, #16960	; 0x4240
    8fb4:	movt	r0, #0
    8fb8:	movt	r1, #15
    8fbc:	bl	0 <printf>
    8fc0:	movw	r0, #0
    8fc4:	mov	r1, r4
    8fc8:	movt	r0, #0
    8fcc:	bl	0 <printf>
    8fd0:	vmov	s0, r4
    8fd4:	vldr	d8, [pc, #212]	; 90b0 <show_benchmark+0x140>
    8fd8:	movw	r0, #0
    8fdc:	movt	r0, #0
    8fe0:	vcvt.f64.u32	d16, s0
    8fe4:	vmul.f64	d16, d16, d8
    8fe8:	vdiv.f64	d16, d16, d8
    8fec:	vdiv.f64	d16, d16, d9
    8ff0:	vmov	r2, r3, d16
    8ff4:	bl	0 <printf>
    8ff8:	vdiv.f64	d16, d8, d9
    8ffc:	movw	r0, #0
    9000:	movt	r0, #0
    9004:	vmov	r2, r3, d16
    9008:	bl	0 <printf>
    900c:	vmov.f64	d16, #112	; 0x3f800000  1.0
    9010:	movw	r0, #0
    9014:	movw	r1, #0
    9018:	movt	r0, #0
    901c:	movt	r1, #0
    9020:	vdiv.f64	d16, d16, d9
    9024:	vmov	r2, r3, d16
    9028:	bl	0 <printf>
    902c:	vldr	d17, [pc, #132]	; 90b8 <show_benchmark+0x148>
    9030:	vldr	d18, [pc, #136]	; 90c0 <show_benchmark+0x150>
    9034:	vmul.f64	d16, d9, d17
    9038:	vdiv.f64	d16, d16, d8
    903c:	vcmpe.f64	d16, d18
    9040:	vmrs	APSR_nzcv, fpscr
    9044:	bpl	9058 <show_benchmark+0xe8>
    9048:	vmov	r2, r3, d16
    904c:	movw	r0, #0
    9050:	movt	r0, #0
    9054:	b	90a0 <show_benchmark+0x130>
    9058:	vcmpe.f64	d16, d8
    905c:	vmrs	APSR_nzcv, fpscr
    9060:	bpl	9074 <show_benchmark+0x104>
    9064:	vdiv.f64	d16, d16, d18
    9068:	movw	r0, #0
    906c:	movt	r0, #0
    9070:	b	909c <show_benchmark+0x12c>
    9074:	vcmpe.f64	d16, d17
    9078:	vmrs	APSR_nzcv, fpscr
    907c:	bpl	9090 <show_benchmark+0x120>
    9080:	vdiv.f64	d16, d16, d8
    9084:	movw	r0, #0
    9088:	movt	r0, #0
    908c:	b	909c <show_benchmark+0x12c>
    9090:	vdiv.f64	d16, d16, d17
    9094:	movw	r0, #0
    9098:	movt	r0, #0
    909c:	vmov	r2, r3, d16
    90a0:	vpop	{d8-d9}
    90a4:	pop	{r4, sl, fp, lr}
    90a8:	b	0 <printf>
    90ac:	nop	{0}
    90b0:	.word	0x00000000
    90b4:	.word	0x412e8480
    90b8:	.word	0x00000000
    90bc:	.word	0x41cdcd65
    90c0:	.word	0x00000000
    90c4:	.word	0x408f4000

000090c8 <gen_struct_buffer_benchmark>:
    90c8:	push	{r4, r5, r6, sl, fp, lr}
    90cc:	add	fp, sp, #16
    90d0:	sub	sp, sp, #8
    90d4:	mov	r4, r0
    90d8:	bl	0 <flatcc_builder_reset>
    90dc:	mov	r0, r4
    90e0:	mov	r1, #32
    90e4:	mov	r2, #16
    90e8:	mov	r5, #16
    90ec:	bl	0 <flatcc_builder_start_struct>
    90f0:	mov	r6, #0
    90f4:	cmp	r0, #0
    90f8:	mov	r3, #0
    90fc:	beq	9158 <gen_struct_buffer_benchmark+0x90>
    9100:	movw	r1, #52428	; 0xcccc
    9104:	movw	r2, #52429	; 0xcccd
    9108:	mov	r3, #1065353216	; 0x3f800000
    910c:	movt	r2, #52428	; 0xcccc
    9110:	movt	r1, #16400	; 0x4010
    9114:	str	r2, [r0, #16]
    9118:	str	r1, [r0, #20]
    911c:	mov	r1, #239	; 0xef
    9120:	mov	r2, #1073741824	; 0x40000000
    9124:	strb	r1, [r0, #28]
    9128:	movw	r1, #2730	; 0xaaa
    912c:	strh	r1, [r0, #26]
    9130:	mov	r1, #8
    9134:	strb	r1, [r0, #24]
    9138:	movw	r1, #0
    913c:	str	r3, [r0]
    9140:	str	r2, [r0, #4]
    9144:	movt	r1, #16448	; 0x4040
    9148:	str	r1, [r0, #8]
    914c:	mov	r0, r4
    9150:	bl	0 <flatcc_builder_end_struct>
    9154:	mov	r3, r0
    9158:	movw	r1, #0
    915c:	mov	r0, r4
    9160:	mov	r2, #0
    9164:	stm	sp, {r5, r6}
    9168:	movt	r1, #0
    916c:	bl	0 <flatcc_builder_create_buffer>
    9170:	mov	r0, r4
    9174:	mov	r1, #0
    9178:	bl	0 <flatcc_builder_get_direct_buffer>
    917c:	cmp	r0, #0
    9180:	beq	920c <gen_struct_buffer_benchmark+0x144>
    9184:	ldr	r1, [r0]
    9188:	vmov.f32	s2, #112	; 0x3f800000  1.0
    918c:	add	r0, r0, r1
    9190:	vldr	s0, [r0]
    9194:	vcmp.f32	s0, s2
    9198:	vmrs	APSR_nzcv, fpscr
    919c:	bne	920c <gen_struct_buffer_benchmark+0x144>
    91a0:	vldr	s0, [r0, #4]
    91a4:	vmov.f32	s2, #0	; 0x40000000  2.0
    91a8:	vcmp.f32	s0, s2
    91ac:	vmrs	APSR_nzcv, fpscr
    91b0:	bne	920c <gen_struct_buffer_benchmark+0x144>
    91b4:	vldr	s0, [r0, #8]
    91b8:	vmov.f32	s2, #8	; 0x40400000  3.0
    91bc:	vcmp.f32	s0, s2
    91c0:	vmrs	APSR_nzcv, fpscr
    91c4:	bne	920c <gen_struct_buffer_benchmark+0x144>
    91c8:	vldr	d16, [pc, #72]	; 9218 <gen_struct_buffer_benchmark+0x150>
    91cc:	vldr	d17, [r0, #16]
    91d0:	vcmp.f64	d17, d16
    91d4:	vmrs	APSR_nzcv, fpscr
    91d8:	bne	920c <gen_struct_buffer_benchmark+0x144>
    91dc:	ldrb	r1, [r0, #24]
    91e0:	cmp	r1, #8
    91e4:	bne	920c <gen_struct_buffer_benchmark+0x144>
    91e8:	ldrh	r1, [r0, #26]
    91ec:	movw	r2, #2730	; 0xaaa
    91f0:	cmp	r1, r2
    91f4:	bne	920c <gen_struct_buffer_benchmark+0x144>
    91f8:	ldrb	r0, [r0, #28]
    91fc:	subs	r0, r0, #239	; 0xef
    9200:	mvnne	r0, #0
    9204:	sub	sp, fp, #16
    9208:	pop	{r4, r5, r6, sl, fp, pc}
    920c:	mvn	r0, #0
    9210:	sub	sp, fp, #16
    9214:	pop	{r4, r5, r6, sl, fp, pc}
    9218:	.word	0xcccccccd
    921c:	.word	0x4010cccc

00009220 <time_struct_buffer>:
    9220:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    9224:	add	fp, sp, #24
    9228:	vpush	{d8-d9}
    922c:	sub	sp, sp, #8
    9230:	mov	r4, r0
    9234:	movw	r0, #0
    9238:	movt	r0, #0
    923c:	bl	0 <puts>
    9240:	mov	r0, sp
    9244:	mov	r1, #0
    9248:	bl	0 <gettimeofday>
    924c:	movw	r8, #0
    9250:	movt	r8, #0
    9254:	ldr	r0, [r8]
    9258:	cmp	r0, #0
    925c:	beq	926c <time_struct_buffer+0x4c>
    9260:	ldr	r1, [r8, #4]
    9264:	ldr	r2, [sp]
    9268:	b	9278 <time_struct_buffer+0x58>
    926c:	ldm	sp, {r0, r1}
    9270:	mov	r2, r0
    9274:	strd	r0, [r8]
    9278:	ldr	r3, [sp, #4]
    927c:	vldr	d9, [pc, #220]	; 9360 <time_struct_buffer+0x140>
    9280:	movw	r6, #16960	; 0x4240
    9284:	sub	r7, r2, r0
    9288:	mov	r5, #0
    928c:	movt	r6, #15
    9290:	sub	r1, r3, r1
    9294:	vmov	s0, r1
    9298:	vcvt.f64.s32	d16, s0
    929c:	vdiv.f64	d8, d16, d9
    92a0:	mov	r0, r4
    92a4:	bl	90c8 <gen_struct_buffer_benchmark>
    92a8:	orr	r5, r0, r5
    92ac:	subs	r6, r6, #1
    92b0:	bne	92a0 <time_struct_buffer+0x80>
    92b4:	mov	r0, sp
    92b8:	mov	r1, #0
    92bc:	bl	0 <gettimeofday>
    92c0:	vmov	s0, r7
    92c4:	vcvt.f64.s32	d16, s0
    92c8:	ldr	r0, [r8]
    92cc:	cmp	r0, #0
    92d0:	beq	92e0 <time_struct_buffer+0xc0>
    92d4:	ldr	r1, [r8, #4]
    92d8:	ldr	r2, [sp]
    92dc:	b	92ec <time_struct_buffer+0xcc>
    92e0:	ldm	sp, {r0, r1}
    92e4:	mov	r2, r0
    92e8:	strd	r0, [r8]
    92ec:	sub	r0, r2, r0
    92f0:	ldr	r2, [sp, #4]
    92f4:	vadd.f64	d8, d8, d16
    92f8:	vmov	s2, r0
    92fc:	mov	r0, r4
    9300:	sub	r1, r2, r1
    9304:	vmov	s0, r1
    9308:	vcvt.f64.s32	d16, s0
    930c:	vcvt.f64.s32	d17, s2
    9310:	vdiv.f64	d16, d16, d9
    9314:	vadd.f64	d9, d16, d17
    9318:	bl	0 <flatcc_builder_get_buffer_size>
    931c:	mov	r4, r0
    9320:	cmp	r5, #0
    9324:	beq	9334 <time_struct_buffer+0x114>
    9328:	movw	r0, #0
    932c:	movt	r0, #0
    9330:	bl	0 <puts>
    9334:	movw	r0, #0
    9338:	vmov.f64	d0, d8
    933c:	vmov.f64	d1, d9
    9340:	mov	r1, r4
    9344:	movt	r0, #0
    9348:	bl	8f70 <show_benchmark>
    934c:	mov	r0, r5
    9350:	sub	sp, fp, #40	; 0x28
    9354:	vpop	{d8-d9}
    9358:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    935c:	nop	{0}
    9360:	.word	0x00000000
    9364:	.word	0x412e8480

00009368 <main>:
    9368:	push	{r4, sl, fp, lr}
    936c:	add	fp, sp, #8
    9370:	sub	sp, sp, #232	; 0xe8
    9374:	mov	r4, sp
    9378:	mov	r0, r4
    937c:	bl	0 <flatcc_builder_init>
    9380:	movw	r0, #0
    9384:	movt	r0, #0
    9388:	bl	0 <puts>
    938c:	mov	r0, r4
    9390:	bl	c04 <test_table_with_emptystruct>
    9394:	cmp	r0, #0
    9398:	bne	94dc <main+0x174>
    939c:	mov	r0, sp
    93a0:	bl	714 <test_empty_monster>
    93a4:	cmp	r0, #0
    93a8:	bne	94dc <main+0x174>
    93ac:	mov	r0, sp
    93b0:	bl	2470 <test_monster>
    93b4:	cmp	r0, #0
    93b8:	bne	94dc <main+0x174>
    93bc:	mov	r0, sp
    93c0:	bl	2518 <test_monster_with_size>
    93c4:	cmp	r0, #0
    93c8:	bne	94dc <main+0x174>
    93cc:	mov	r0, sp
    93d0:	bl	260c <test_string>
    93d4:	cmp	r0, #0
    93d8:	bne	94dc <main+0x174>
    93dc:	mov	r0, sp
    93e0:	bl	8748 <test_struct_buffer>
    93e4:	cmp	r0, #0
    93e8:	bne	94dc <main+0x174>
    93ec:	mov	r0, sp
    93f0:	bl	920 <test_typed_empty_monster>
    93f4:	cmp	r0, #0
    93f8:	bne	94dc <main+0x174>
    93fc:	mov	r0, sp
    9400:	bl	d64 <test_typed_table_with_emptystruct>
    9404:	cmp	r0, #0
    9408:	bne	94dc <main+0x174>
    940c:	mov	r0, sp
    9410:	bl	8970 <test_typed_struct_buffer>
    9414:	cmp	r0, #0
    9418:	bne	94dc <main+0x174>
    941c:	mov	r0, sp
    9420:	bl	5c24 <test_clone_slice>
    9424:	cmp	r0, #0
    9428:	bne	94dc <main+0x174>
    942c:	mov	r0, sp
    9430:	bl	7a24 <test_add_set_defaults>
    9434:	cmp	r0, #0
    9438:	bne	94dc <main+0x174>
    943c:	mov	r0, sp
    9440:	bl	6640 <test_create_add_field>
    9444:	cmp	r0, #0
    9448:	bne	94dc <main+0x174>
    944c:	mov	r0, sp
    9450:	bl	691c <test_union_vector>
    9454:	cmp	r0, #0
    9458:	bne	94dc <main+0x174>
    945c:	mov	r0, sp
    9460:	bl	5854 <test_basic_sort>
    9464:	cmp	r0, #0
    9468:	bne	94dc <main+0x174>
    946c:	mov	r0, sp
    9470:	bl	28ac <test_sort_find>
    9474:	cmp	r0, #0
    9478:	bne	94dc <main+0x174>
    947c:	mov	r0, sp
    9480:	bl	3530 <test_scan>
    9484:	cmp	r0, #0
    9488:	bne	94dc <main+0x174>
    948c:	mov	r0, sp
    9490:	bl	7d44 <test_nested_buffer>
    9494:	cmp	r0, #0
    9498:	bne	94dc <main+0x174>
    949c:	mov	r0, sp
    94a0:	bl	8060 <test_nested_buffer_first>
    94a4:	cmp	r0, #0
    94a8:	bne	94dc <main+0x174>
    94ac:	mov	r0, sp
    94b0:	bl	837c <test_nested_buffer_using_nest>
    94b4:	cmp	r0, #0
    94b8:	bne	94dc <main+0x174>
    94bc:	mov	r0, sp
    94c0:	bl	b8 <test_type_aliases>
    94c4:	cmp	r0, #0
    94c8:	bne	94dc <main+0x174>
    94cc:	mov	r0, sp
    94d0:	bl	6e58 <test_mixed_type_union>
    94d4:	cmp	r0, #0
    94d8:	beq	94f4 <main+0x18c>
    94dc:	movw	r0, #0
    94e0:	movt	r0, #0
    94e4:	bl	0 <puts>
    94e8:	mvn	r0, #0
    94ec:	sub	sp, fp, #8
    94f0:	pop	{r4, sl, fp, pc}
    94f4:	mov	r0, sp
    94f8:	bl	0 <flatcc_builder_clear>
    94fc:	mov	r0, #0
    9500:	sub	sp, fp, #8
    9504:	pop	{r4, sl, fp, pc}

00009508 <MyGame_Example_TypeAliases_verify_table>:
    9508:	push	{r4, sl, fp, lr}
    950c:	add	fp, sp, #8
    9510:	sub	sp, sp, #8
    9514:	mov	r1, #0
    9518:	mov	r2, #1
    951c:	mov	r3, #1
    9520:	mov	r4, r0
    9524:	bl	0 <flatcc_verify_field>
    9528:	cmp	r0, #0
    952c:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    9530:	mov	r0, r4
    9534:	mov	r1, #1
    9538:	mov	r2, #1
    953c:	mov	r3, #1
    9540:	bl	0 <flatcc_verify_field>
    9544:	cmp	r0, #0
    9548:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    954c:	mov	r0, r4
    9550:	mov	r1, #2
    9554:	mov	r2, #2
    9558:	mov	r3, #2
    955c:	bl	0 <flatcc_verify_field>
    9560:	cmp	r0, #0
    9564:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    9568:	mov	r0, r4
    956c:	mov	r1, #3
    9570:	mov	r2, #2
    9574:	mov	r3, #2
    9578:	bl	0 <flatcc_verify_field>
    957c:	cmp	r0, #0
    9580:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    9584:	mov	r0, r4
    9588:	mov	r1, #4
    958c:	mov	r2, #4
    9590:	mov	r3, #4
    9594:	bl	0 <flatcc_verify_field>
    9598:	cmp	r0, #0
    959c:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    95a0:	mov	r0, r4
    95a4:	mov	r1, #5
    95a8:	mov	r2, #4
    95ac:	mov	r3, #4
    95b0:	bl	0 <flatcc_verify_field>
    95b4:	cmp	r0, #0
    95b8:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    95bc:	mov	r0, r4
    95c0:	mov	r1, #6
    95c4:	mov	r2, #8
    95c8:	mov	r3, #8
    95cc:	bl	0 <flatcc_verify_field>
    95d0:	cmp	r0, #0
    95d4:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    95d8:	mov	r0, r4
    95dc:	mov	r1, #7
    95e0:	mov	r2, #8
    95e4:	mov	r3, #8
    95e8:	bl	0 <flatcc_verify_field>
    95ec:	cmp	r0, #0
    95f0:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    95f4:	mov	r0, r4
    95f8:	mov	r1, #8
    95fc:	mov	r2, #4
    9600:	mov	r3, #4
    9604:	bl	0 <flatcc_verify_field>
    9608:	cmp	r0, #0
    960c:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    9610:	mov	r0, r4
    9614:	mov	r1, #9
    9618:	mov	r2, #8
    961c:	mov	r3, #8
    9620:	bl	0 <flatcc_verify_field>
    9624:	cmp	r0, #0
    9628:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    962c:	mvn	r0, #0
    9630:	mov	r1, #1
    9634:	mov	r2, #0
    9638:	mov	r3, #1
    963c:	str	r1, [sp]
    9640:	str	r0, [sp, #4]
    9644:	mov	r0, r4
    9648:	mov	r1, #10
    964c:	bl	0 <flatcc_verify_vector_field>
    9650:	cmp	r0, #0
    9654:	bne	967c <MyGame_Example_TypeAliases_verify_table+0x174>
    9658:	mvn	r0, #-536870912	; 0xe0000000
    965c:	mov	r1, #8
    9660:	mov	r2, #0
    9664:	mov	r3, #8
    9668:	str	r1, [sp]
    966c:	str	r0, [sp, #4]
    9670:	mov	r0, r4
    9674:	mov	r1, #11
    9678:	bl	0 <flatcc_verify_vector_field>
    967c:	sub	sp, fp, #8
    9680:	pop	{r4, sl, fp, pc}

00009684 <MyGame_Example_Monster_verify_table>:
    9684:	push	{r4, r5, r6, r7, fp, lr}
    9688:	add	fp, sp, #16
    968c:	sub	sp, sp, #8
    9690:	mov	r1, #0
    9694:	mov	r2, #32
    9698:	mov	r3, #16
    969c:	mov	r4, r0
    96a0:	bl	0 <flatcc_verify_field>
    96a4:	cmp	r0, #0
    96a8:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    96ac:	mov	r0, r4
    96b0:	mov	r1, #2
    96b4:	mov	r2, #2
    96b8:	mov	r3, #2
    96bc:	bl	0 <flatcc_verify_field>
    96c0:	cmp	r0, #0
    96c4:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    96c8:	mov	r0, r4
    96cc:	mov	r1, #1
    96d0:	mov	r2, #2
    96d4:	mov	r3, #2
    96d8:	bl	0 <flatcc_verify_field>
    96dc:	cmp	r0, #0
    96e0:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    96e4:	mov	r0, r4
    96e8:	mov	r1, #3
    96ec:	mov	r2, #1
    96f0:	bl	0 <flatcc_verify_string_field>
    96f4:	cmp	r0, #0
    96f8:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    96fc:	mov	r0, r4
    9700:	mov	r1, #6
    9704:	mov	r2, #1
    9708:	mov	r3, #1
    970c:	mov	r5, #1
    9710:	bl	0 <flatcc_verify_field>
    9714:	cmp	r0, #0
    9718:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    971c:	mvn	r0, #0
    9720:	mov	r1, #5
    9724:	mov	r2, #0
    9728:	mov	r3, #1
    972c:	str	r5, [sp]
    9730:	str	r0, [sp, #4]
    9734:	mov	r0, r4
    9738:	bl	0 <flatcc_verify_vector_field>
    973c:	cmp	r0, #0
    9740:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9744:	movw	r3, #0
    9748:	mov	r0, r4
    974c:	mov	r1, #11
    9750:	mov	r2, #0
    9754:	movt	r3, #0
    9758:	bl	0 <flatcc_verify_table_vector_field>
    975c:	cmp	r0, #0
    9760:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9764:	mov	r0, r4
    9768:	mov	r1, #10
    976c:	mov	r2, #0
    9770:	bl	0 <flatcc_verify_string_vector_field>
    9774:	cmp	r0, #0
    9778:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    977c:	mov	r0, r4
    9780:	mov	r1, #28
    9784:	mov	r2, #0
    9788:	bl	0 <flatcc_verify_string_vector_field>
    978c:	cmp	r0, #0
    9790:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9794:	mvn	r0, #0
    9798:	mov	r1, #1
    979c:	mov	r2, #0
    97a0:	mov	r3, #1
    97a4:	str	r1, [sp]
    97a8:	str	r0, [sp, #4]
    97ac:	mov	r0, r4
    97b0:	mov	r1, #24
    97b4:	bl	0 <flatcc_verify_vector_field>
    97b8:	cmp	r0, #0
    97bc:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    97c0:	mvn	r0, #-536870912	; 0xe0000000
    97c4:	mov	r1, #4
    97c8:	mov	r2, #0
    97cc:	mov	r3, #8
    97d0:	str	r1, [sp]
    97d4:	str	r0, [sp, #4]
    97d8:	mov	r0, r4
    97dc:	mov	r1, #29
    97e0:	bl	0 <flatcc_verify_vector_field>
    97e4:	cmp	r0, #0
    97e8:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    97ec:	movw	r5, #0
    97f0:	mov	r0, r4
    97f4:	mov	r1, #12
    97f8:	mov	r2, #0
    97fc:	movt	r5, #0
    9800:	mov	r3, r5
    9804:	bl	0 <flatcc_verify_table_field>
    9808:	cmp	r0, #0
    980c:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9810:	movw	r3, #0
    9814:	mov	r0, r4
    9818:	mov	r1, #8
    981c:	mov	r2, #0
    9820:	movt	r3, #0
    9824:	bl	0 <flatcc_verify_union_field>
    9828:	cmp	r0, #0
    982c:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9830:	mvn	r6, #-1073741824	; 0xc0000000
    9834:	mov	r7, #2
    9838:	mov	r0, r4
    983c:	mov	r1, #9
    9840:	mov	r2, #0
    9844:	mov	r3, #4
    9848:	str	r7, [sp]
    984c:	str	r6, [sp, #4]
    9850:	bl	0 <flatcc_verify_vector_field>
    9854:	cmp	r0, #0
    9858:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    985c:	mov	r0, r4
    9860:	mov	r1, #31
    9864:	mov	r2, #0
    9868:	mov	r3, #4
    986c:	str	r7, [sp]
    9870:	str	r6, [sp, #4]
    9874:	bl	0 <flatcc_verify_vector_field>
    9878:	cmp	r0, #0
    987c:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9880:	mov	r0, #1
    9884:	mov	r1, #13
    9888:	mov	r2, #0
    988c:	mov	r3, #0
    9890:	stm	sp, {r0, r5}
    9894:	mov	r0, r4
    9898:	bl	0 <flatcc_verify_table_as_nested_root>
    989c:	cmp	r0, #0
    98a0:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    98a4:	movw	r3, #0
    98a8:	mov	r0, r4
    98ac:	mov	r1, #14
    98b0:	mov	r2, #0
    98b4:	movt	r3, #0
    98b8:	bl	0 <flatcc_verify_table_field>
    98bc:	cmp	r0, #0
    98c0:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    98c4:	mov	r0, r4
    98c8:	mov	r1, #15
    98cc:	mov	r2, #1
    98d0:	mov	r3, #1
    98d4:	bl	0 <flatcc_verify_field>
    98d8:	cmp	r0, #0
    98dc:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    98e0:	mov	r0, r4
    98e4:	mov	r1, #16
    98e8:	mov	r2, #4
    98ec:	mov	r3, #4
    98f0:	bl	0 <flatcc_verify_field>
    98f4:	cmp	r0, #0
    98f8:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    98fc:	mov	r0, r4
    9900:	mov	r1, #17
    9904:	mov	r2, #4
    9908:	mov	r3, #4
    990c:	bl	0 <flatcc_verify_field>
    9910:	cmp	r0, #0
    9914:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9918:	mov	r0, r4
    991c:	mov	r1, #18
    9920:	mov	r2, #8
    9924:	mov	r3, #8
    9928:	bl	0 <flatcc_verify_field>
    992c:	cmp	r0, #0
    9930:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9934:	mov	r0, r4
    9938:	mov	r1, #19
    993c:	mov	r2, #8
    9940:	mov	r3, #8
    9944:	bl	0 <flatcc_verify_field>
    9948:	cmp	r0, #0
    994c:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9950:	mov	r0, r4
    9954:	mov	r1, #20
    9958:	mov	r2, #4
    995c:	mov	r3, #4
    9960:	bl	0 <flatcc_verify_field>
    9964:	cmp	r0, #0
    9968:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    996c:	mov	r0, r4
    9970:	mov	r1, #21
    9974:	mov	r2, #4
    9978:	mov	r3, #4
    997c:	bl	0 <flatcc_verify_field>
    9980:	cmp	r0, #0
    9984:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9988:	mov	r0, r4
    998c:	mov	r1, #22
    9990:	mov	r2, #8
    9994:	mov	r3, #8
    9998:	bl	0 <flatcc_verify_field>
    999c:	cmp	r0, #0
    99a0:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    99a4:	mov	r0, r4
    99a8:	mov	r1, #23
    99ac:	mov	r2, #8
    99b0:	mov	r3, #8
    99b4:	bl	0 <flatcc_verify_field>
    99b8:	cmp	r0, #0
    99bc:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    99c0:	mov	r0, r4
    99c4:	mov	r1, #25
    99c8:	mov	r2, #4
    99cc:	mov	r3, #4
    99d0:	bl	0 <flatcc_verify_field>
    99d4:	cmp	r0, #0
    99d8:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    99dc:	mov	r0, r4
    99e0:	mov	r1, #26
    99e4:	mov	r2, #4
    99e8:	mov	r3, #4
    99ec:	bl	0 <flatcc_verify_field>
    99f0:	cmp	r0, #0
    99f4:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    99f8:	mov	r0, r4
    99fc:	mov	r1, #27
    9a00:	mov	r2, #4
    9a04:	mov	r3, #4
    9a08:	bl	0 <flatcc_verify_field>
    9a0c:	cmp	r0, #0
    9a10:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9a14:	mvn	r0, #0
    9a18:	mov	r1, #1
    9a1c:	mov	r2, #0
    9a20:	mov	r3, #1
    9a24:	str	r1, [sp]
    9a28:	str	r0, [sp, #4]
    9a2c:	mov	r0, r4
    9a30:	mov	r1, #30
    9a34:	bl	0 <flatcc_verify_vector_field>
    9a38:	cmp	r0, #0
    9a3c:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9a40:	mvn	r5, #-536870912	; 0xe0000000
    9a44:	mov	r6, #8
    9a48:	mov	r0, r4
    9a4c:	mov	r1, #32
    9a50:	mov	r2, #0
    9a54:	mov	r3, #8
    9a58:	str	r6, [sp]
    9a5c:	str	r5, [sp, #4]
    9a60:	bl	0 <flatcc_verify_vector_field>
    9a64:	cmp	r0, #0
    9a68:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9a6c:	mov	r0, r4
    9a70:	mov	r1, #33	; 0x21
    9a74:	mov	r2, #0
    9a78:	mov	r3, #8
    9a7c:	str	r6, [sp]
    9a80:	str	r5, [sp, #4]
    9a84:	bl	0 <flatcc_verify_vector_field>
    9a88:	cmp	r0, #0
    9a8c:	bne	9ab0 <MyGame_Example_Monster_verify_table+0x42c>
    9a90:	movw	r3, #0
    9a94:	mov	r0, r4
    9a98:	mov	r1, #34	; 0x22
    9a9c:	mov	r2, #0
    9aa0:	movt	r3, #0
    9aa4:	bl	0 <flatcc_verify_table_field>
    9aa8:	cmp	r0, #0
    9aac:	beq	9ab8 <MyGame_Example_Monster_verify_table+0x434>
    9ab0:	sub	sp, fp, #16
    9ab4:	pop	{r4, r5, r6, r7, fp, pc}
    9ab8:	movw	r3, #0
    9abc:	mov	r0, r4
    9ac0:	mov	r1, #35	; 0x23
    9ac4:	mov	r2, #0
    9ac8:	movt	r3, #0
    9acc:	sub	sp, fp, #16
    9ad0:	pop	{r4, r5, r6, r7, fp, lr}
    9ad4:	b	0 <flatcc_verify_table_field>

00009ad8 <MyGame_Example_Any_union_verifier>:
    9ad8:	ldrb	r1, [r0, #12]
    9adc:	sub	r1, r1, #1
    9ae0:	uxtb	r2, r1
    9ae4:	cmp	r2, #3
    9ae8:	movhi	r0, #0
    9aec:	bxhi	lr
    9af0:	movw	r2, #0
    9af4:	sxtb	r1, r1
    9af8:	movt	r2, #0
    9afc:	ldr	r1, [r2, r1, lsl #2]
    9b00:	b	0 <flatcc_verify_union_table>

00009b04 <MyGame_Example_Stat_verify_table>:
    9b04:	push	{r4, sl, fp, lr}
    9b08:	add	fp, sp, #8
    9b0c:	mov	r1, #0
    9b10:	mov	r2, #0
    9b14:	mov	r4, r0
    9b18:	bl	0 <flatcc_verify_string_field>
    9b1c:	cmp	r0, #0
    9b20:	popne	{r4, sl, fp, pc}
    9b24:	mov	r0, r4
    9b28:	mov	r1, #1
    9b2c:	mov	r2, #8
    9b30:	mov	r3, #8
    9b34:	bl	0 <flatcc_verify_field>
    9b38:	cmp	r0, #0
    9b3c:	beq	9b44 <MyGame_Example_Stat_verify_table+0x40>
    9b40:	pop	{r4, sl, fp, pc}
    9b44:	mov	r0, r4
    9b48:	mov	r1, #2
    9b4c:	mov	r2, #2
    9b50:	mov	r3, #2
    9b54:	pop	{r4, sl, fp, lr}
    9b58:	b	0 <flatcc_verify_field>

00009b5c <MyGame_InParentNamespace_verify_table>:
    9b5c:	mov	r0, #0
    9b60:	bx	lr

00009b64 <MyGame_Example_TestBase64_verify_table>:
    9b64:	push	{r4, r5, r6, sl, fp, lr}
    9b68:	add	fp, sp, #16
    9b6c:	sub	sp, sp, #8
    9b70:	mvn	r5, #0
    9b74:	mov	r6, #1
    9b78:	mov	r1, #0
    9b7c:	mov	r2, #0
    9b80:	mov	r3, #1
    9b84:	mov	r4, r0
    9b88:	str	r6, [sp]
    9b8c:	str	r5, [sp, #4]
    9b90:	bl	0 <flatcc_verify_vector_field>
    9b94:	cmp	r0, #0
    9b98:	bne	9bc0 <MyGame_Example_TestBase64_verify_table+0x5c>
    9b9c:	mov	r0, r4
    9ba0:	mov	r1, #1
    9ba4:	mov	r2, #0
    9ba8:	mov	r3, #1
    9bac:	str	r6, [sp]
    9bb0:	str	r5, [sp, #4]
    9bb4:	bl	0 <flatcc_verify_vector_field>
    9bb8:	cmp	r0, #0
    9bbc:	beq	9bc8 <MyGame_Example_TestBase64_verify_table+0x64>
    9bc0:	sub	sp, fp, #16
    9bc4:	pop	{r4, r5, r6, sl, fp, pc}
    9bc8:	movw	r0, #0
    9bcc:	mov	r1, #1
    9bd0:	mov	r2, #0
    9bd4:	mov	r3, #0
    9bd8:	movt	r0, #0
    9bdc:	str	r1, [sp]
    9be0:	mov	r1, #2
    9be4:	str	r0, [sp, #4]
    9be8:	mov	r0, r4
    9bec:	bl	0 <flatcc_verify_table_as_nested_root>
    9bf0:	sub	sp, fp, #16
    9bf4:	pop	{r4, r5, r6, sl, fp, pc}

00009bf8 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
    9bf8:	push	{r4, sl, fp, lr}
    9bfc:	add	fp, sp, #8
    9c00:	mov	r1, #0
    9c04:	mov	r2, #1
    9c08:	mov	r3, #1
    9c0c:	mov	r4, r0
    9c10:	bl	0 <flatcc_verify_field>
    9c14:	cmp	r0, #0
    9c18:	bne	9c54 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x5c>
    9c1c:	mov	r0, r4
    9c20:	mov	r1, #1
    9c24:	mov	r2, #1
    9c28:	mov	r3, #1
    9c2c:	bl	0 <flatcc_verify_field>
    9c30:	cmp	r0, #0
    9c34:	popne	{r4, sl, fp, pc}
    9c38:	mov	r0, r4
    9c3c:	mov	r1, #2
    9c40:	mov	r2, #1
    9c44:	mov	r3, #1
    9c48:	bl	0 <flatcc_verify_field>
    9c4c:	cmp	r0, #0
    9c50:	beq	9c58 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x60>
    9c54:	pop	{r4, sl, fp, pc}
    9c58:	mov	r0, r4
    9c5c:	mov	r1, #3
    9c60:	mov	r2, #1
    9c64:	mov	r3, #1
    9c68:	pop	{r4, sl, fp, lr}
    9c6c:	b	0 <flatcc_verify_field>

00009c70 <MyGame_Example2_Monster_verify_table>:
    9c70:	mov	r0, #0
    9c74:	bx	lr

00009c78 <MyGame_Example_Alt_verify_table>:
    9c78:	push	{r4, sl, fp, lr}
    9c7c:	add	fp, sp, #8
    9c80:	movw	r3, #0
    9c84:	mov	r1, #0
    9c88:	mov	r2, #0
    9c8c:	mov	r4, r0
    9c90:	movt	r3, #0
    9c94:	bl	0 <flatcc_verify_table_field>
    9c98:	cmp	r0, #0
    9c9c:	popne	{r4, sl, fp, pc}
    9ca0:	movw	r3, #0
    9ca4:	mov	r0, r4
    9ca8:	mov	r1, #1
    9cac:	mov	r2, #0
    9cb0:	movt	r3, #0
    9cb4:	bl	0 <flatcc_verify_table_field>
    9cb8:	cmp	r0, #0
    9cbc:	beq	9cc4 <MyGame_Example_Alt_verify_table+0x4c>
    9cc0:	pop	{r4, sl, fp, pc}
    9cc4:	movw	r3, #0
    9cc8:	mov	r0, r4
    9ccc:	mov	r1, #3
    9cd0:	mov	r2, #0
    9cd4:	movt	r3, #0
    9cd8:	pop	{r4, sl, fp, lr}
    9cdc:	b	0 <flatcc_verify_union_vector_field>

00009ce0 <MyGame_Example_TestJSONPrefix_verify_table>:
    9ce0:	push	{r4, sl, fp, lr}
    9ce4:	add	fp, sp, #8
    9ce8:	movw	r3, #0
    9cec:	mov	r1, #0
    9cf0:	mov	r2, #0
    9cf4:	mov	r4, r0
    9cf8:	movt	r3, #0
    9cfc:	bl	0 <flatcc_verify_table_field>
    9d00:	cmp	r0, #0
    9d04:	popne	{r4, sl, fp, pc}
    9d08:	movw	r3, #0
    9d0c:	mov	r0, r4
    9d10:	mov	r1, #1
    9d14:	mov	r2, #0
    9d18:	movt	r3, #0
    9d1c:	bl	0 <flatcc_verify_table_field>
    9d20:	cmp	r0, #0
    9d24:	beq	9d2c <MyGame_Example_TestJSONPrefix_verify_table+0x4c>
    9d28:	pop	{r4, sl, fp, pc}
    9d2c:	movw	r3, #0
    9d30:	mov	r0, r4
    9d34:	mov	r1, #2
    9d38:	mov	r2, #0
    9d3c:	movt	r3, #0
    9d40:	pop	{r4, sl, fp, lr}
    9d44:	b	0 <flatcc_verify_table_field>

00009d48 <Fantasy_Movie_verify_table>:
    9d48:	push	{r4, sl, fp, lr}
    9d4c:	add	fp, sp, #8
    9d50:	movw	r3, #0
    9d54:	mov	r1, #1
    9d58:	mov	r2, #0
    9d5c:	mov	r4, r0
    9d60:	movt	r3, #0
    9d64:	bl	0 <flatcc_verify_union_field>
    9d68:	cmp	r0, #0
    9d6c:	bne	9dd0 <Fantasy_Movie_verify_table+0x88>
    9d70:	movw	r3, #0
    9d74:	mov	r0, r4
    9d78:	mov	r1, #3
    9d7c:	mov	r2, #0
    9d80:	movt	r3, #0
    9d84:	bl	0 <flatcc_verify_union_field>
    9d88:	cmp	r0, #0
    9d8c:	bne	9dd0 <Fantasy_Movie_verify_table+0x88>
    9d90:	movw	r3, #0
    9d94:	mov	r0, r4
    9d98:	mov	r1, #5
    9d9c:	mov	r2, #0
    9da0:	movt	r3, #0
    9da4:	bl	0 <flatcc_verify_union_field>
    9da8:	cmp	r0, #0
    9dac:	popne	{r4, sl, fp, pc}
    9db0:	movw	r3, #0
    9db4:	mov	r0, r4
    9db8:	mov	r1, #7
    9dbc:	mov	r2, #0
    9dc0:	movt	r3, #0
    9dc4:	bl	0 <flatcc_verify_union_field>
    9dc8:	cmp	r0, #0
    9dcc:	beq	9dd4 <Fantasy_Movie_verify_table+0x8c>
    9dd0:	pop	{r4, sl, fp, pc}
    9dd4:	movw	r3, #0
    9dd8:	mov	r0, r4
    9ddc:	mov	r1, #9
    9de0:	mov	r2, #0
    9de4:	movt	r3, #0
    9de8:	pop	{r4, sl, fp, lr}
    9dec:	b	0 <flatcc_verify_union_vector_field>

00009df0 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    9df0:	push	{r4, sl, fp, lr}
    9df4:	add	fp, sp, #8
    9df8:	mov	r1, #0
    9dfc:	mov	r2, #0
    9e00:	mov	r4, r0
    9e04:	bl	0 <flatcc_verify_string_field>
    9e08:	cmp	r0, #0
    9e0c:	bne	9ecc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    9e10:	mov	r0, r4
    9e14:	mov	r1, #1
    9e18:	mov	r2, #4
    9e1c:	mov	r3, #4
    9e20:	bl	0 <flatcc_verify_field>
    9e24:	cmp	r0, #0
    9e28:	bne	9ecc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    9e2c:	mov	r0, r4
    9e30:	mov	r1, #2
    9e34:	mov	r2, #0
    9e38:	bl	0 <flatcc_verify_string_field>
    9e3c:	cmp	r0, #0
    9e40:	bne	9ecc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    9e44:	mov	r0, r4
    9e48:	mov	r1, #3
    9e4c:	mov	r2, #8
    9e50:	mov	r3, #8
    9e54:	bl	0 <flatcc_verify_field>
    9e58:	cmp	r0, #0
    9e5c:	bne	9ecc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    9e60:	mov	r0, r4
    9e64:	mov	r1, #4
    9e68:	mov	r2, #0
    9e6c:	bl	0 <flatcc_verify_string_field>
    9e70:	cmp	r0, #0
    9e74:	bne	9ecc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    9e78:	mov	r0, r4
    9e7c:	mov	r1, #5
    9e80:	mov	r2, #8
    9e84:	mov	r3, #8
    9e88:	bl	0 <flatcc_verify_field>
    9e8c:	cmp	r0, #0
    9e90:	bne	9ecc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    9e94:	mov	r0, r4
    9e98:	mov	r1, #6
    9e9c:	mov	r2, #4
    9ea0:	mov	r3, #4
    9ea4:	bl	0 <flatcc_verify_field>
    9ea8:	cmp	r0, #0
    9eac:	popne	{r4, sl, fp, pc}
    9eb0:	mov	r0, r4
    9eb4:	mov	r1, #7
    9eb8:	mov	r2, #8
    9ebc:	mov	r3, #8
    9ec0:	bl	0 <flatcc_verify_field>
    9ec4:	cmp	r0, #0
    9ec8:	beq	9ed0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xe0>
    9ecc:	pop	{r4, sl, fp, pc}
    9ed0:	mov	r0, r4
    9ed4:	mov	r1, #8
    9ed8:	mov	r2, #4
    9edc:	mov	r3, #4
    9ee0:	pop	{r4, sl, fp, lr}
    9ee4:	b	0 <flatcc_verify_field>

00009ee8 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    9ee8:	push	{r4, sl, fp, lr}
    9eec:	add	fp, sp, #8
    9ef0:	mov	r1, #0
    9ef4:	mov	r2, #8
    9ef8:	mov	r3, #8
    9efc:	mov	r4, r0
    9f00:	bl	0 <flatcc_verify_field>
    9f04:	cmp	r0, #0
    9f08:	popne	{r4, sl, fp, pc}
    9f0c:	mov	r0, r4
    9f10:	mov	r1, #1
    9f14:	mov	r2, #4
    9f18:	mov	r3, #4
    9f1c:	pop	{r4, sl, fp, lr}
    9f20:	b	0 <flatcc_verify_field>

00009f24 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    9f24:	push	{r4, sl, fp, lr}
    9f28:	add	fp, sp, #8
    9f2c:	mov	r1, #0
    9f30:	mov	r2, #8
    9f34:	mov	r3, #8
    9f38:	mov	r4, r0
    9f3c:	bl	0 <flatcc_verify_field>
    9f40:	cmp	r0, #0
    9f44:	popne	{r4, sl, fp, pc}
    9f48:	mov	r0, r4
    9f4c:	mov	r1, #1
    9f50:	mov	r2, #4
    9f54:	mov	r3, #4
    9f58:	pop	{r4, sl, fp, lr}
    9f5c:	b	0 <flatcc_verify_field>

00009f60 <Fantasy_Character_union_verifier>:
    9f60:	ldrb	r2, [r0, #12]
    9f64:	sub	r1, r2, #2
    9f68:	cmp	r1, #9
    9f6c:	bhi	9fac <Fantasy_Character_union_verifier+0x4c>
    9f70:	add	r2, pc, #0
    9f74:	ldr	pc, [r2, r1, lsl #2]
    9f78:	.word	0x00009fc0
    9f7c:	.word	0x00009fb8
    9f80:	.word	0x00009fb8
    9f84:	.word	0x00009fb8
    9f88:	.word	0x00009fb8
    9f8c:	.word	0x00009fb8
    9f90:	.word	0x00009fcc
    9f94:	.word	0x00009fa0
    9f98:	.word	0x00009fa0
    9f9c:	.word	0x00009fb4
    9fa0:	mov	r1, #4
    9fa4:	mov	r2, #4
    9fa8:	b	0 <flatcc_verify_union_struct>
    9fac:	cmp	r2, #255	; 0xff
    9fb0:	bne	9fb8 <Fantasy_Character_union_verifier+0x58>
    9fb4:	b	0 <flatcc_verify_union_string>
    9fb8:	mov	r0, #0
    9fbc:	bx	lr
    9fc0:	movw	r1, #0
    9fc4:	movt	r1, #0
    9fc8:	b	0 <flatcc_verify_union_table>
    9fcc:	mov	r1, #2
    9fd0:	mov	r2, #2
    9fd4:	b	0 <flatcc_verify_union_struct>

00009fd8 <Fantasy_Attacker_verify_table>:
    9fd8:	mov	r1, #0
    9fdc:	mov	r2, #4
    9fe0:	mov	r3, #4
    9fe4:	b	0 <flatcc_verify_field>

00009fe8 <MyGame_Example_with_emptystruct_verify_table>:
    9fe8:	mov	r1, #0
    9fec:	mov	r2, #0
    9ff0:	mov	r3, #1
    9ff4:	b	0 <flatcc_verify_field>

00009ff8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>:
    9ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ffc:	add	fp, sp, #28
    a000:	sub	sp, sp, #20
    a004:	cmp	r2, r1, lsl #1
    a008:	bcs	a014 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1c>
    a00c:	sub	sp, fp, #28
    a010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a014:	mov	sl, r2
    a018:	lsl	r7, r1, #1
    a01c:	str	r0, [sp, #4]
    a020:	str	r2, [sp]
    a024:	cmp	r7, sl
    a028:	bcs	a0f0 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xf8>
    a02c:	cmp	r0, #0
    a030:	ldrne	r8, [r0, #-4]
    a034:	cmpne	r8, r7
    a038:	bls	a210 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x218>
    a03c:	mov	r4, r0
    a040:	ldr	r2, [r4, r7, lsl #2]!
    a044:	ldr	r2, [r4, r2]!
    a048:	mov	r3, r4
    a04c:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
    a050:	cmp	r2, #12
    a054:	bcc	a230 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x238>
    a058:	ldrh	r2, [r3, #10]
    a05c:	cmp	r2, #0
    a060:	beq	a230 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x238>
    a064:	orr	r5, r7, #1
    a068:	cmp	r8, r5
    a06c:	bls	a210 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x218>
    a070:	mov	r9, r1
    a074:	mov	r1, r0
    a078:	ldr	r3, [r1, r5, lsl #2]!
    a07c:	ldr	r6, [r1, r3]!
    a080:	mov	r3, r1
    a084:	ldrh	r6, [r3, -r6]!	; <UNPREDICTABLE>
    a088:	cmp	r6, #12
    a08c:	bcc	a230 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x238>
    a090:	ldrh	r3, [r3, #10]
    a094:	cmp	r3, #0
    a098:	beq	a230 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x238>
    a09c:	ldr	r2, [r4, r2]!
    a0a0:	add	r0, r4, r2
    a0a4:	ldr	r2, [r1, r3]!
    a0a8:	add	r0, r0, #4
    a0ac:	ldr	r4, [r0, #-4]
    a0b0:	ldr	r6, [r1, r2]!
    a0b4:	add	r1, r1, #4
    a0b8:	cmp	r4, r6
    a0bc:	mov	r2, r6
    a0c0:	movcc	r2, r4
    a0c4:	bl	0 <strncmp>
    a0c8:	cmp	r0, #0
    a0cc:	mov	r0, r5
    a0d0:	mov	r1, r9
    a0d4:	movne	r0, r7
    a0d8:	movmi	r0, r5
    a0dc:	movne	r7, r0
    a0e0:	cmp	r4, r6
    a0e4:	movcc	r7, r0
    a0e8:	ldr	r0, [sp, #4]
    a0ec:	b	a0fc <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x104>
    a0f0:	cmp	r0, #0
    a0f4:	beq	a210 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x218>
    a0f8:	ldr	r8, [r0, #-4]
    a0fc:	mov	r5, r7
    a100:	cmp	r8, r1
    a104:	bls	a210 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x218>
    a108:	mov	r9, r0
    a10c:	ldr	r4, [r9, r1, lsl #2]!
    a110:	mov	r7, r9
    a114:	ldr	r2, [r7, r4]!
    a118:	mov	r3, r7
    a11c:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
    a120:	cmp	r2, #12
    a124:	bcc	a230 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x238>
    a128:	ldrh	r6, [r3, #10]
    a12c:	cmp	r6, #0
    a130:	beq	a230 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x238>
    a134:	cmp	r8, r5
    a138:	bls	a210 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x218>
    a13c:	str	r4, [sp, #8]
    a140:	mov	r4, r0
    a144:	str	r5, [sp, #12]
    a148:	str	r1, [sp, #16]
    a14c:	ldr	r8, [r4, r5, lsl #2]!
    a150:	mov	r3, r4
    a154:	ldr	r5, [r3, r8]!
    a158:	mov	r2, r3
    a15c:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
    a160:	cmp	r5, #12
    a164:	bcc	a230 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x238>
    a168:	ldrh	r2, [r2, #10]
    a16c:	cmp	r2, #0
    a170:	beq	a230 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x238>
    a174:	ldr	r1, [r7, r6]!
    a178:	add	r0, r7, r1
    a17c:	ldr	r1, [r3, r2]!
    a180:	add	r0, r0, #4
    a184:	ldr	sl, [r0, #-4]
    a188:	ldr	r5, [r3, r1]!
    a18c:	add	r1, r3, #4
    a190:	cmp	sl, r5
    a194:	mov	r2, r5
    a198:	movcc	r2, sl
    a19c:	bl	0 <strncmp>
    a1a0:	cmp	r0, #1
    a1a4:	mov	r1, #0
    a1a8:	mov	r2, #0
    a1ac:	movwlt	r1, #1
    a1b0:	cmp	r0, #0
    a1b4:	movwne	r0, #1
    a1b8:	cmp	sl, r5
    a1bc:	ldr	sl, [sp]
    a1c0:	movwcc	r2, #1
    a1c4:	orr	r0, r2, r0
    a1c8:	ldr	r2, [sp, #16]
    a1cc:	cmp	r0, #1
    a1d0:	ldr	r0, [sp, #4]
    a1d4:	bne	a00c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x14>
    a1d8:	cmp	r1, #0
    a1dc:	beq	a00c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x14>
    a1e0:	ldr	r3, [sp, #12]
    a1e4:	sub	r2, r2, r3
    a1e8:	cmp	sl, r3, lsl #1
    a1ec:	lsl	r7, r3, #1
    a1f0:	sub	r1, r8, r2, lsl #2
    a1f4:	str	r1, [r9]
    a1f8:	ldr	r1, [sp, #8]
    a1fc:	add	r1, r1, r2, lsl #2
    a200:	str	r1, [r4]
    a204:	mov	r1, r3
    a208:	bcs	a024 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x2c>
    a20c:	b	a00c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x14>
    a210:	movw	r0, #0
    a214:	movw	r1, #0
    a218:	movw	r3, #0
    a21c:	movw	r2, #693	; 0x2b5
    a220:	movt	r0, #0
    a224:	movt	r1, #0
    a228:	movt	r3, #0
    a22c:	bl	0 <__assert_fail>
    a230:	movw	r0, #0
    a234:	movw	r1, #0
    a238:	movw	r3, #0
    a23c:	movw	r2, #699	; 0x2bb
    a240:	movt	r0, #0
    a244:	movt	r1, #0
    a248:	movt	r3, #0
    a24c:	bl	0 <__assert_fail>
