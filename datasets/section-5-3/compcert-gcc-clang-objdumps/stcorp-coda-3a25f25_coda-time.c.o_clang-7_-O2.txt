
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-time.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_month_to_integer>:
       0:	push	{r4, sl, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #8
       c:	ldrb	r1, [r0]
      10:	mov	r2, #3
      14:	strb	r1, [sp, #4]
      18:	ldrb	r1, [r0, #1]
      1c:	strb	r1, [sp, #5]
      20:	mov	r1, #0
      24:	ldrb	r0, [r0, #2]
      28:	strb	r1, [sp, #7]
      2c:	movw	r1, #0
      30:	movt	r1, #0
      34:	strb	r0, [sp, #6]
      38:	add	r0, sp, #4
      3c:	bl	0 <strncasecmp>
      40:	cmp	r0, #0
      44:	beq	19c <coda_month_to_integer+0x19c>
      48:	movw	r1, #0
      4c:	add	r0, sp, #4
      50:	mov	r2, #3
      54:	mov	r4, #3
      58:	movt	r1, #0
      5c:	bl	0 <strncasecmp>
      60:	cmp	r0, #0
      64:	beq	1a4 <coda_month_to_integer+0x1a4>
      68:	movw	r1, #0
      6c:	add	r0, sp, #4
      70:	mov	r2, #3
      74:	movt	r1, #0
      78:	bl	0 <strncasecmp>
      7c:	cmp	r0, #0
      80:	beq	1f0 <coda_month_to_integer+0x1f0>
      84:	movw	r1, #0
      88:	add	r0, sp, #4
      8c:	mov	r2, #3
      90:	movt	r1, #0
      94:	bl	0 <strncasecmp>
      98:	cmp	r0, #0
      9c:	beq	1ac <coda_month_to_integer+0x1ac>
      a0:	movw	r1, #0
      a4:	add	r0, sp, #4
      a8:	mov	r2, #3
      ac:	movt	r1, #0
      b0:	bl	0 <strncasecmp>
      b4:	cmp	r0, #0
      b8:	beq	1b4 <coda_month_to_integer+0x1b4>
      bc:	movw	r1, #0
      c0:	add	r0, sp, #4
      c4:	mov	r2, #3
      c8:	movt	r1, #0
      cc:	bl	0 <strncasecmp>
      d0:	cmp	r0, #0
      d4:	beq	1bc <coda_month_to_integer+0x1bc>
      d8:	movw	r1, #0
      dc:	add	r0, sp, #4
      e0:	mov	r2, #3
      e4:	movt	r1, #0
      e8:	bl	0 <strncasecmp>
      ec:	cmp	r0, #0
      f0:	beq	1c4 <coda_month_to_integer+0x1c4>
      f4:	movw	r1, #0
      f8:	add	r0, sp, #4
      fc:	mov	r2, #3
     100:	movt	r1, #0
     104:	bl	0 <strncasecmp>
     108:	cmp	r0, #0
     10c:	beq	1cc <coda_month_to_integer+0x1cc>
     110:	movw	r1, #0
     114:	add	r0, sp, #4
     118:	mov	r2, #3
     11c:	movt	r1, #0
     120:	bl	0 <strncasecmp>
     124:	cmp	r0, #0
     128:	beq	1d4 <coda_month_to_integer+0x1d4>
     12c:	movw	r1, #0
     130:	add	r0, sp, #4
     134:	mov	r2, #3
     138:	movt	r1, #0
     13c:	bl	0 <strncasecmp>
     140:	cmp	r0, #0
     144:	beq	1dc <coda_month_to_integer+0x1dc>
     148:	movw	r1, #0
     14c:	add	r0, sp, #4
     150:	mov	r2, #3
     154:	movt	r1, #0
     158:	bl	0 <strncasecmp>
     15c:	cmp	r0, #0
     160:	beq	1e4 <coda_month_to_integer+0x1e4>
     164:	movw	r1, #0
     168:	add	r0, sp, #4
     16c:	mov	r2, #3
     170:	movt	r1, #0
     174:	bl	0 <strncasecmp>
     178:	cmp	r0, #0
     17c:	beq	1ec <coda_month_to_integer+0x1ec>
     180:	movw	r1, #0
     184:	add	r2, sp, #4
     188:	mvn	r0, #99	; 0x63
     18c:	movt	r1, #0
     190:	bl	0 <coda_set_error>
     194:	mvn	r4, #0
     198:	b	1f0 <coda_month_to_integer+0x1f0>
     19c:	mov	r4, #1
     1a0:	b	1f0 <coda_month_to_integer+0x1f0>
     1a4:	mov	r4, #2
     1a8:	b	1f0 <coda_month_to_integer+0x1f0>
     1ac:	mov	r4, #4
     1b0:	b	1f0 <coda_month_to_integer+0x1f0>
     1b4:	mov	r4, #5
     1b8:	b	1f0 <coda_month_to_integer+0x1f0>
     1bc:	mov	r4, #6
     1c0:	b	1f0 <coda_month_to_integer+0x1f0>
     1c4:	mov	r4, #7
     1c8:	b	1f0 <coda_month_to_integer+0x1f0>
     1cc:	mov	r4, #8
     1d0:	b	1f0 <coda_month_to_integer+0x1f0>
     1d4:	mov	r4, #9
     1d8:	b	1f0 <coda_month_to_integer+0x1f0>
     1dc:	mov	r4, #10
     1e0:	b	1f0 <coda_month_to_integer+0x1f0>
     1e4:	mov	r4, #11
     1e8:	b	1f0 <coda_month_to_integer+0x1f0>
     1ec:	mov	r4, #12
     1f0:	mov	r0, r4
     1f4:	sub	sp, fp, #8
     1f8:	pop	{r4, sl, fp, pc}

000001fc <coda_dayofyear_to_month_day>:
     1fc:	push	{r4, r5, r6, sl, fp, lr}
     200:	add	fp, sp, #16
     204:	sub	sp, sp, #8
     208:	cmp	r2, #0
     20c:	mov	r4, r2
     210:	str	r0, [sp, #4]
     214:	movne	r5, r3
     218:	cmpne	r3, #0
     21c:	bne	240 <coda_dayofyear_to_month_day+0x44>
     220:	movw	r1, #0
     224:	movw	r2, #0
     228:	mvn	r0, #99	; 0x63
     22c:	movw	r3, #549	; 0x225
     230:	movt	r1, #0
     234:	movt	r2, #0
     238:	bl	0 <coda_set_error>
     23c:	b	268 <coda_dayofyear_to_month_day+0x6c>
     240:	mov	r2, r0
     244:	movw	r0, #367	; 0x16f
     248:	mov	r6, r1
     24c:	cmp	r1, r0
     250:	bcc	274 <coda_dayofyear_to_month_day+0x78>
     254:	movw	r1, #0
     258:	mvn	r0, #103	; 0x67
     25c:	mov	r2, r6
     260:	movt	r1, #0
     264:	bl	0 <coda_set_error>
     268:	mvn	r0, #0
     26c:	sub	sp, fp, #16
     270:	pop	{r4, r5, r6, sl, fp, pc}
     274:	mov	r3, sp
     278:	mov	r0, #1
     27c:	mov	r1, #1
     280:	bl	2cc <dmy_to_mjd2000>
     284:	mov	r1, r0
     288:	mvn	r0, #0
     28c:	cmp	r1, #0
     290:	beq	29c <coda_dayofyear_to_month_day+0xa0>
     294:	sub	sp, fp, #16
     298:	pop	{r4, r5, r6, sl, fp, pc}
     29c:	ldr	r0, [sp]
     2a0:	add	r3, sp, #4
     2a4:	mov	r1, r5
     2a8:	mov	r2, r4
     2ac:	add	r0, r6, r0
     2b0:	sub	r0, r0, #1
     2b4:	str	r0, [sp]
     2b8:	bl	52c <mjd2000_to_dmy>
     2bc:	cmp	r0, #0
     2c0:	mvnne	r0, #0
     2c4:	sub	sp, fp, #16
     2c8:	pop	{r4, r5, r6, sl, fp, pc}

000002cc <dmy_to_mjd2000>:
     2cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2d0:	add	fp, sp, #28
     2d4:	sub	sp, sp, #28
     2d8:	mov	ip, r1
     2dc:	mov	lr, r0
     2e0:	cmp	r0, #1
     2e4:	blt	334 <dmy_to_mjd2000+0x68>
     2e8:	sub	r0, ip, #1
     2ec:	cmp	r0, #11
     2f0:	bhi	334 <dmy_to_mjd2000+0x68>
     2f4:	cmp	r2, #0
     2f8:	beq	334 <dmy_to_mjd2000+0x68>
     2fc:	movw	r1, #0
     300:	cmp	ip, #2
     304:	movt	r1, #0
     308:	ldr	r9, [r1, r0, lsl #2]
     30c:	ldr	r1, [r1, ip, lsl #2]
     310:	sub	r5, r1, r9
     314:	mov	r1, #0
     318:	addeq	r1, r2, r2, lsr #31
     31c:	andeq	r1, r1, #3
     320:	clzeq	r1, r1
     324:	lsreq	r1, r1, #5
     328:	add	r1, r5, r1
     32c:	cmp	r1, lr
     330:	bge	35c <dmy_to_mjd2000+0x90>
     334:	movw	r1, #0
     338:	str	r2, [sp]
     33c:	mvn	r0, #103	; 0x67
     340:	mov	r2, lr
     344:	mov	r3, ip
     348:	movt	r1, #0
     34c:	bl	0 <coda_set_error>
     350:	mvn	r0, #0
     354:	sub	sp, fp, #28
     358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     35c:	add	r1, r2, r2, lsr #31
     360:	movw	r0, #365	; 0x16d
     364:	cmp	ip, #3
     368:	mov	r8, #0
     36c:	str	r3, [sp, #24]
     370:	asr	r6, r1, #31
     374:	mla	r4, r1, r0, lr
     378:	and	r0, r1, #3
     37c:	movwlt	r8, #1
     380:	add	r7, r1, r6, lsr #30
     384:	clz	r0, r0
     388:	bic	r6, r7, #3
     38c:	add	r4, r4, r7, asr #2
     390:	lsr	r3, r0, #5
     394:	sub	sl, r1, r6
     398:	movw	r6, #17122	; 0x42e2
     39c:	and	r0, r8, r3
     3a0:	add	r4, r4, sl, asr #31
     3a4:	movt	r6, #26
     3a8:	add	r6, r4, r6
     3ac:	mov	r4, #0
     3b0:	sub	r0, r6, r0
     3b4:	add	r6, r0, r9
     3b8:	movw	r0, #1925	; 0x785
     3bc:	movt	r0, #36	; 0x24
     3c0:	cmp	r6, r0
     3c4:	ble	50c <dmy_to_mjd2000+0x240>
     3c8:	cmp	ip, #2
     3cc:	bne	414 <dmy_to_mjd2000+0x148>
     3d0:	movw	r0, #34079	; 0x851f
     3d4:	mov	r6, #100	; 0x64
     3d8:	movt	r0, #20971	; 0x51eb
     3dc:	smmul	r0, r1, r0
     3e0:	asr	r4, r0, #5
     3e4:	add	r4, r4, r0, lsr #31
     3e8:	mls	r4, r4, r6, r1
     3ec:	asr	r6, r0, #7
     3f0:	add	r0, r6, r0, lsr #31
     3f4:	mov	r6, #400	; 0x190
     3f8:	clz	r4, r4
     3fc:	mls	r0, r0, r6, r1
     400:	lsr	r4, r4, #5
     404:	clz	r0, r0
     408:	eor	r4, r3, r4
     40c:	lsr	r0, r0, #5
     410:	eor	r4, r0, r4
     414:	add	r0, r5, r4
     418:	cmp	r0, lr
     41c:	movw	r0, #365	; 0x16d
     420:	blt	334 <dmy_to_mjd2000+0x68>
     424:	mul	r0, r1, r0
     428:	mov	r8, #0
     42c:	cmp	ip, #2
     430:	str	r0, [sp, #16]
     434:	asr	r0, r7, #2
     438:	str	r0, [sp, #12]
     43c:	asr	r0, sl, #31
     440:	str	r0, [sp, #20]
     444:	movw	r0, #31457	; 0x7ae1
     448:	movt	r0, #44564	; 0xae14
     44c:	smmul	r0, r1, r0
     450:	asr	r4, r0, #5
     454:	add	r0, r4, r0, lsr #31
     458:	str	r0, [sp, #8]
     45c:	movw	r0, #34079	; 0x851f
     460:	movt	r0, #20971	; 0x51eb
     464:	smmul	r0, r1, r0
     468:	asr	r4, r0, #7
     46c:	asr	r6, r0, #5
     470:	add	r7, r4, r0, lsr #31
     474:	mov	r4, #400	; 0x190
     478:	add	r0, r6, r0, lsr #31
     47c:	mov	r6, #100	; 0x64
     480:	mls	r4, r7, r4, r1
     484:	mls	sl, r0, r6, r1
     488:	asr	r5, r4, #31
     48c:	lsr	r1, sl, #31
     490:	bgt	4b0 <dmy_to_mjd2000+0x1e4>
     494:	cmp	sl, #0
     498:	mov	r0, #0
     49c:	subeq	r3, r3, #1
     4a0:	cmp	r4, #0
     4a4:	mvneq	r0, #0
     4a8:	subs	r8, r3, r0
     4ac:	mvnne	r8, #0
     4b0:	ldr	r3, [sp, #8]
     4b4:	add	r0, lr, r7
     4b8:	add	r0, r0, r3
     4bc:	ldr	r3, [sp, #12]
     4c0:	add	r0, r0, r3
     4c4:	ldr	r3, [sp, #16]
     4c8:	add	r0, r0, r3
     4cc:	add	r0, r0, r5
     4d0:	add	r0, r0, r1
     4d4:	ldr	r1, [sp, #20]
     4d8:	add	r0, r0, r1
     4dc:	movw	r1, #10273	; 0x2821
     4e0:	add	r0, r0, r9
     4e4:	movt	r1, #65527	; 0xfff7
     4e8:	add	r0, r0, r8
     4ec:	add	r0, r0, r1
     4f0:	movw	r1, #60610	; 0xecc2
     4f4:	cmp	r0, r1
     4f8:	ble	334 <dmy_to_mjd2000+0x68>
     4fc:	movw	r1, #45674	; 0xb26a
     500:	movt	r1, #65533	; 0xfffd
     504:	add	r0, r0, r1
     508:	b	518 <dmy_to_mjd2000+0x24c>
     50c:	movw	r0, #38823	; 0x97a7
     510:	movt	r0, #65498	; 0xffda
     514:	add	r0, r6, r0
     518:	ldr	r1, [sp, #24]
     51c:	str	r0, [r1]
     520:	mov	r0, #0
     524:	sub	sp, fp, #28
     528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000052c <mjd2000_to_dmy>:
     52c:	push	{r4, r5, r6, sl, fp, lr}
     530:	add	fp, sp, #16
     534:	movw	r5, #40748	; 0x9f2c
     538:	movt	r5, #65534	; 0xfffe
     53c:	cmp	r0, r5
     540:	ble	60c <mjd2000_to_dmy+0xe0>
     544:	movw	r6, #1725	; 0x6bd
     548:	movw	ip, #15025	; 0x3ab1
     54c:	movt	r6, #14699	; 0x396b
     550:	movt	ip, #2
     554:	smmul	r6, r0, r6
     558:	asr	r5, r6, #15
     55c:	add	r6, r5, r6, lsr #31
     560:	mls	r5, r6, ip, r0
     564:	add	r0, r6, r5, asr #31
     568:	mov	r6, #400	; 0x190
     56c:	mul	r0, r0, r6
     570:	and	r6, ip, r5, asr #31
     574:	movw	ip, #36524	; 0x8eac
     578:	add	r5, r6, r5
     57c:	add	r4, r0, #2000	; 0x7d0
     580:	cmp	r5, ip
     584:	str	r4, [r3]
     588:	bgt	6d0 <mjd2000_to_dmy+0x1a4>
     58c:	movw	r0, #45171	; 0xb073
     590:	movw	ip, #365	; 0x16d
     594:	movt	r0, #5741	; 0x166d
     598:	smmul	r0, r5, r0
     59c:	asr	r6, r0, #7
     5a0:	add	r0, r6, r0, lsr #31
     5a4:	movw	r6, #1461	; 0x5b5
     5a8:	mls	r5, r0, r6, r5
     5ac:	add	r0, r0, r5, asr #31
     5b0:	add	r4, r4, r0, lsl #2
     5b4:	and	r0, r6, r5, asr #31
     5b8:	add	r5, r0, r5
     5bc:	str	r4, [r3]
     5c0:	cmp	r5, ip
     5c4:	ble	8a4 <mjd2000_to_dmy+0x378>
     5c8:	movw	r6, #366	; 0x16e
     5cc:	sub	r6, r5, r6
     5d0:	movw	r5, #63921	; 0xf9b1
     5d4:	movt	r5, #45964	; 0xb38c
     5d8:	smmla	r5, r6, r5, r6
     5dc:	asr	r0, r5, #8
     5e0:	add	r0, r0, r5, lsr #31
     5e4:	orr	r5, r4, #1
     5e8:	mls	r6, r0, ip, r6
     5ec:	add	r0, r5, r0
     5f0:	add	r0, r0, r6, asr #31
     5f4:	str	r0, [r3]
     5f8:	and	r0, ip, r6, asr #31
     5fc:	add	r5, r0, r6
     600:	cmn	r5, #1
     604:	bgt	754 <mjd2000_to_dmy+0x228>
     608:	b	938 <mjd2000_to_dmy+0x40c>
     60c:	movw	r5, #45171	; 0xb073
     610:	sub	r0, r0, #13
     614:	movw	ip, #1461	; 0x5b5
     618:	movt	r5, #5741	; 0x166d
     61c:	smmul	r5, r0, r5
     620:	asr	r4, r5, #7
     624:	add	r5, r4, r5, lsr #31
     628:	mov	r4, #2000	; 0x7d0
     62c:	mls	r0, r5, ip, r0
     630:	add	r5, r5, r0, asr #31
     634:	add	r4, r4, r5, lsl #2
     638:	str	r4, [r3]
     63c:	and	r4, ip, r0, asr #31
     640:	add	r6, r4, r0
     644:	movw	r0, #365	; 0x16d
     648:	cmp	r6, r0
     64c:	bgt	7d4 <mjd2000_to_dmy+0x2a8>
     650:	cmn	r6, #1
     654:	ble	a3c <mjd2000_to_dmy+0x510>
     658:	movw	ip, #0
     65c:	mov	lr, #1
     660:	cmp	r6, #31
     664:	movge	lr, #2
     668:	movt	ip, #0
     66c:	cmpge	r6, #60	; 0x3c
     670:	blt	84c <mjd2000_to_dmy+0x320>
     674:	mov	lr, #3
     678:	cmp	r6, #91	; 0x5b
     67c:	movge	lr, #4
     680:	cmpge	r6, #121	; 0x79
     684:	blt	84c <mjd2000_to_dmy+0x320>
     688:	mov	lr, #5
     68c:	cmp	r6, #152	; 0x98
     690:	movge	lr, #6
     694:	cmpge	r6, #182	; 0xb6
     698:	blt	84c <mjd2000_to_dmy+0x320>
     69c:	mov	lr, #7
     6a0:	cmp	r6, #213	; 0xd5
     6a4:	movge	lr, #8
     6a8:	cmpge	r6, #244	; 0xf4
     6ac:	blt	84c <mjd2000_to_dmy+0x320>
     6b0:	movw	r0, #274	; 0x112
     6b4:	mov	lr, #9
     6b8:	cmp	r6, r0
     6bc:	movge	lr, #10
     6c0:	cmpge	r6, #304	; 0x130
     6c4:	ble	84c <mjd2000_to_dmy+0x320>
     6c8:	movw	r0, #335	; 0x14f
     6cc:	b	a0c <mjd2000_to_dmy+0x4e0>
     6d0:	movw	r6, #36525	; 0x8ead
     6d4:	sub	r6, r5, r6
     6d8:	movw	r5, #33275	; 0x81fb
     6dc:	movt	r5, #58796	; 0xe5ac
     6e0:	smmla	r5, r6, r5, r6
     6e4:	asr	r4, r5, #15
     6e8:	add	r5, r4, r5, lsr #31
     6ec:	mov	r4, #100	; 0x64
     6f0:	mls	r6, r5, ip, r6
     6f4:	add	r5, r5, r6, asr #31
     6f8:	mla	r0, r5, r4, r0
     6fc:	movw	r5, #2100	; 0x834
     700:	add	r0, r0, r5
     704:	and	r5, ip, r6, asr #31
     708:	add	r5, r5, r6
     70c:	movw	r6, #1459	; 0x5b3
     710:	str	r0, [r3]
     714:	cmp	r5, r6
     718:	bgt	85c <mjd2000_to_dmy+0x330>
     71c:	movw	r6, #63921	; 0xf9b1
     720:	movt	r6, #45964	; 0xb38c
     724:	smmla	r6, r5, r6, r5
     728:	asr	r4, r6, #8
     72c:	add	r6, r4, r6, lsr #31
     730:	movw	r4, #365	; 0x16d
     734:	mls	r5, r6, r4, r5
     738:	add	r0, r0, r6
     73c:	add	r0, r0, r5, asr #31
     740:	str	r0, [r3]
     744:	and	r0, r4, r5, asr #31
     748:	add	r5, r0, r5
     74c:	cmn	r5, #1
     750:	ble	938 <mjd2000_to_dmy+0x40c>
     754:	cmp	r5, #364	; 0x16c
     758:	bgt	a1c <mjd2000_to_dmy+0x4f0>
     75c:	movw	ip, #0
     760:	mov	lr, #1
     764:	cmp	r5, #31
     768:	movt	ip, #0
     76c:	blt	8c8 <mjd2000_to_dmy+0x39c>
     770:	mov	lr, #2
     774:	cmp	r5, #59	; 0x3b
     778:	movge	lr, #3
     77c:	cmpge	r5, #90	; 0x5a
     780:	blt	8c8 <mjd2000_to_dmy+0x39c>
     784:	mov	lr, #4
     788:	cmp	r5, #120	; 0x78
     78c:	movge	lr, #5
     790:	cmpge	r5, #151	; 0x97
     794:	blt	8c8 <mjd2000_to_dmy+0x39c>
     798:	mov	lr, #6
     79c:	cmp	r5, #181	; 0xb5
     7a0:	movge	lr, #7
     7a4:	cmpge	r5, #212	; 0xd4
     7a8:	blt	8c8 <mjd2000_to_dmy+0x39c>
     7ac:	mov	lr, #8
     7b0:	cmp	r5, #243	; 0xf3
     7b4:	movge	lr, #9
     7b8:	cmpge	r5, #272	; 0x110
     7bc:	ble	8c8 <mjd2000_to_dmy+0x39c>
     7c0:	mov	lr, #10
     7c4:	cmp	r5, #304	; 0x130
     7c8:	blt	8c8 <mjd2000_to_dmy+0x39c>
     7cc:	movw	r0, #334	; 0x14e
     7d0:	b	9b0 <mjd2000_to_dmy+0x484>
     7d4:	movw	r4, #366	; 0x16e
     7d8:	lsl	ip, r5, #2
     7dc:	sub	r6, r6, r4
     7e0:	movw	r4, #63921	; 0xf9b1
     7e4:	movt	r4, #45964	; 0xb38c
     7e8:	smmla	r4, r6, r4, r6
     7ec:	asr	r5, r4, #8
     7f0:	add	r5, r5, r4, lsr #31
     7f4:	movw	r4, #2001	; 0x7d1
     7f8:	mls	r6, r5, r0, r6
     7fc:	add	r5, ip, r5
     800:	and	r0, r0, r6, asr #31
     804:	add	r5, r5, r6, asr #31
     808:	add	r6, r0, r6
     80c:	add	r5, r5, r4
     810:	cmn	r6, #1
     814:	str	r5, [r3]
     818:	ble	938 <mjd2000_to_dmy+0x40c>
     81c:	cmp	r6, #364	; 0x16c
     820:	bgt	a1c <mjd2000_to_dmy+0x4f0>
     824:	movw	ip, #0
     828:	mov	lr, #1
     82c:	cmp	r6, #31
     830:	movt	ip, #0
     834:	blt	84c <mjd2000_to_dmy+0x320>
     838:	mov	lr, #2
     83c:	cmp	r6, #59	; 0x3b
     840:	movge	lr, #3
     844:	cmpge	r6, #90	; 0x5a
     848:	bge	9c0 <mjd2000_to_dmy+0x494>
     84c:	str	lr, [r2]
     850:	add	r0, ip, lr, lsl #2
     854:	add	r2, r6, #1
     858:	b	8d4 <mjd2000_to_dmy+0x3a8>
     85c:	movw	r6, #1460	; 0x5b4
     860:	movw	ip, #1461	; 0x5b5
     864:	sub	r6, r5, r6
     868:	movw	r5, #45171	; 0xb073
     86c:	movt	r5, #5741	; 0x166d
     870:	smmul	r5, r6, r5
     874:	asr	r4, r5, #7
     878:	add	r5, r4, r5, lsr #31
     87c:	mls	r6, r5, ip, r6
     880:	add	r5, r5, r6, asr #31
     884:	add	r0, r0, r5, lsl #2
     888:	add	r4, r0, #4
     88c:	and	r0, ip, r6, asr #31
     890:	movw	ip, #365	; 0x16d
     894:	add	r5, r0, r6
     898:	str	r4, [r3]
     89c:	cmp	r5, ip
     8a0:	bgt	8f8 <mjd2000_to_dmy+0x3cc>
     8a4:	cmn	r5, #1
     8a8:	ble	a3c <mjd2000_to_dmy+0x510>
     8ac:	movw	ip, #0
     8b0:	mov	lr, #1
     8b4:	cmp	r5, #31
     8b8:	movge	lr, #2
     8bc:	movt	ip, #0
     8c0:	cmpge	r5, #60	; 0x3c
     8c4:	bge	958 <mjd2000_to_dmy+0x42c>
     8c8:	str	lr, [r2]
     8cc:	add	r0, ip, lr, lsl #2
     8d0:	add	r2, r5, #1
     8d4:	ldr	r0, [r0, #-4]
     8d8:	sub	r0, r2, r0
     8dc:	str	r0, [r1]
     8e0:	ldr	r0, [r3]
     8e4:	cmp	r0, #0
     8e8:	suble	r0, r0, #1
     8ec:	strle	r0, [r3]
     8f0:	mov	r0, #0
     8f4:	pop	{r4, r5, r6, sl, fp, pc}
     8f8:	movw	r0, #366	; 0x16e
     8fc:	movw	r6, #63921	; 0xf9b1
     900:	sub	r0, r5, r0
     904:	movt	r6, #45964	; 0xb38c
     908:	smmla	r6, r0, r6, r0
     90c:	asr	r5, r6, #8
     910:	add	r6, r5, r6, lsr #31
     914:	orr	r5, r4, #1
     918:	mls	r0, r6, ip, r0
     91c:	add	r6, r5, r6
     920:	add	r6, r6, r0, asr #31
     924:	str	r6, [r3]
     928:	and	r6, ip, r0, asr #31
     92c:	add	r5, r6, r0
     930:	cmn	r5, #1
     934:	bgt	754 <mjd2000_to_dmy+0x228>
     938:	movw	r0, #0
     93c:	movw	r1, #0
     940:	movw	r3, #0
     944:	movw	r2, #377	; 0x179
     948:	movt	r0, #0
     94c:	movt	r1, #0
     950:	movt	r3, #0
     954:	bl	0 <__assert_fail>
     958:	mov	lr, #3
     95c:	cmp	r5, #91	; 0x5b
     960:	movge	lr, #4
     964:	cmpge	r5, #121	; 0x79
     968:	blt	8c8 <mjd2000_to_dmy+0x39c>
     96c:	mov	lr, #5
     970:	cmp	r5, #152	; 0x98
     974:	movge	lr, #6
     978:	cmpge	r5, #182	; 0xb6
     97c:	blt	8c8 <mjd2000_to_dmy+0x39c>
     980:	mov	lr, #7
     984:	cmp	r5, #213	; 0xd5
     988:	movge	lr, #8
     98c:	cmpge	r5, #244	; 0xf4
     990:	blt	8c8 <mjd2000_to_dmy+0x39c>
     994:	movw	r0, #274	; 0x112
     998:	mov	lr, #9
     99c:	cmp	r5, r0
     9a0:	movge	lr, #10
     9a4:	cmpge	r5, #304	; 0x130
     9a8:	ble	8c8 <mjd2000_to_dmy+0x39c>
     9ac:	movw	r0, #335	; 0x14f
     9b0:	mov	lr, #12
     9b4:	cmp	r5, r0
     9b8:	movwlt	lr, #11
     9bc:	b	8c8 <mjd2000_to_dmy+0x39c>
     9c0:	mov	lr, #4
     9c4:	cmp	r6, #120	; 0x78
     9c8:	movge	lr, #5
     9cc:	cmpge	r6, #151	; 0x97
     9d0:	blt	84c <mjd2000_to_dmy+0x320>
     9d4:	mov	lr, #6
     9d8:	cmp	r6, #181	; 0xb5
     9dc:	movge	lr, #7
     9e0:	cmpge	r6, #212	; 0xd4
     9e4:	blt	84c <mjd2000_to_dmy+0x320>
     9e8:	mov	lr, #8
     9ec:	cmp	r6, #243	; 0xf3
     9f0:	movge	lr, #9
     9f4:	cmpge	r6, #272	; 0x110
     9f8:	ble	84c <mjd2000_to_dmy+0x320>
     9fc:	mov	lr, #10
     a00:	cmp	r6, #304	; 0x130
     a04:	blt	84c <mjd2000_to_dmy+0x320>
     a08:	movw	r0, #334	; 0x14e
     a0c:	mov	lr, #12
     a10:	cmp	r6, r0
     a14:	movwlt	lr, #11
     a18:	b	84c <mjd2000_to_dmy+0x320>
     a1c:	movw	r0, #0
     a20:	movw	r1, #0
     a24:	movw	r3, #0
     a28:	movw	r2, #378	; 0x17a
     a2c:	movt	r0, #0
     a30:	movt	r1, #0
     a34:	movt	r3, #0
     a38:	bl	0 <__assert_fail>
     a3c:	movw	r0, #0
     a40:	movw	r1, #0
     a44:	movw	r3, #0
     a48:	movw	r2, #358	; 0x166
     a4c:	movt	r0, #0
     a50:	movt	r1, #0
     a54:	movt	r3, #0
     a58:	bl	0 <__assert_fail>

00000a5c <coda_leap_second_table_done>:
     a5c:	push	{r4, sl, fp, lr}
     a60:	add	fp, sp, #8
     a64:	ldr	r4, [pc, #48]	; a9c <coda_leap_second_table_done+0x40>
     a68:	bl	0 <__aeabi_read_tp>
     a6c:	ldr	r0, [r0, r4]
     a70:	cmp	r0, #0
     a74:	beq	a88 <coda_leap_second_table_done+0x2c>
     a78:	bl	0 <free>
     a7c:	mov	r1, #0
     a80:	bl	0 <__aeabi_read_tp>
     a84:	str	r1, [r0, r4]
     a88:	ldr	r1, [pc, #16]	; aa0 <coda_leap_second_table_done+0x44>
     a8c:	mov	r2, #0
     a90:	bl	0 <__aeabi_read_tp>
     a94:	str	r2, [r0, r1]
     a98:	pop	{r4, sl, fp, pc}
	...
     aa4:	.word	0xe320f000

00000aa8 <coda_leap_second_table_init>:
     aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aac:	add	fp, sp, #28
     ab0:	sub	sp, sp, #4
     ab4:	vpush	{d8-d10}
     ab8:	sub	sp, sp, #192	; 0xc0
     abc:	ldr	r4, [pc, #988]	; ea0 <coda_leap_second_table_init+0x3f8>
     ac0:	bl	0 <__aeabi_read_tp>
     ac4:	ldr	r0, [r0, r4]
     ac8:	cmp	r0, #0
     acc:	beq	ae0 <coda_leap_second_table_init+0x38>
     ad0:	bl	0 <free>
     ad4:	mov	r1, #0
     ad8:	bl	0 <__aeabi_read_tp>
     adc:	str	r1, [r0, r4]
     ae0:	ldr	r1, [pc, #956]	; ea4 <coda_leap_second_table_init+0x3fc>
     ae4:	mov	r5, #0
     ae8:	bl	0 <__aeabi_read_tp>
     aec:	str	r5, [r0, r1]
     af0:	movw	r0, #0
     af4:	movt	r0, #0
     af8:	bl	0 <getenv>
     afc:	cmp	r0, #0
     b00:	beq	ca4 <coda_leap_second_table_init+0x1fc>
     b04:	movw	r1, #0
     b08:	mov	r4, r0
     b0c:	movt	r1, #0
     b10:	bl	0 <fopen>
     b14:	cmp	r0, #0
     b18:	beq	d80 <coda_leap_second_table_init+0x2d8>
     b1c:	vldr	d8, [pc, #652]	; db0 <coda_leap_second_table_init+0x308>
     b20:	vldr	d9, [pc, #656]	; db8 <coda_leap_second_table_init+0x310>
     b24:	vldr	d10, [pc, #660]	; dc0 <coda_leap_second_table_init+0x318>
     b28:	mov	r5, r0
     b2c:	add	r0, sp, #77	; 0x4d
     b30:	mov	r8, #0
     b34:	add	r6, sp, #88	; 0x58
     b38:	add	r7, sp, #84	; 0x54
     b3c:	mov	r9, #0
     b40:	add	r1, r0, #2
     b44:	add	r0, r0, #1
     b48:	str	r1, [sp, #36]	; 0x24
     b4c:	str	r0, [sp, #32]
     b50:	movw	r1, #0
     b54:	mov	r0, r5
     b58:	mov	r2, r6
     b5c:	mov	r3, r7
     b60:	str	r8, [sp, #84]	; 0x54
     b64:	movt	r1, #0
     b68:	bl	0 <__isoc99_fscanf>
     b6c:	ldr	r0, [sp, #84]	; 0x54
     b70:	cmp	r0, #1
     b74:	blt	c70 <coda_leap_second_table_init+0x1c8>
     b78:	cmp	r0, #80	; 0x50
     b7c:	bne	c44 <coda_leap_second_table_init+0x19c>
     b80:	movw	r1, #0
     b84:	mov	r0, r5
     b88:	strb	r8, [sp, #168]	; 0xa8
     b8c:	movt	r1, #0
     b90:	bl	0 <__isoc99_fscanf>
     b94:	ldr	r0, [sp, #32]
     b98:	movw	r1, #0
     b9c:	add	r2, sp, #80	; 0x50
     ba0:	add	r3, sp, #77	; 0x4d
     ba4:	str	r7, [sp, #28]
     ba8:	movt	r1, #0
     bac:	str	r0, [sp]
     bb0:	ldr	r0, [sp, #36]	; 0x24
     bb4:	str	r0, [sp, #4]
     bb8:	add	r0, sp, #72	; 0x48
     bbc:	str	r0, [sp, #8]
     bc0:	add	r0, sp, #64	; 0x40
     bc4:	str	r0, [sp, #12]
     bc8:	add	r0, sp, #56	; 0x38
     bcc:	str	r0, [sp, #16]
     bd0:	add	r0, sp, #48	; 0x30
     bd4:	str	r0, [sp, #20]
     bd8:	add	r0, sp, #40	; 0x28
     bdc:	str	r0, [sp, #24]
     be0:	mov	r0, r6
     be4:	bl	0 <__isoc99_sscanf>
     be8:	cmp	r0, #9
     bec:	ldrne	r0, [sp, #84]	; 0x54
     bf0:	cmpne	r0, #80	; 0x50
     bf4:	bne	c44 <coda_leap_second_table_init+0x19c>
     bf8:	vldr	d16, [sp, #64]	; 0x40
     bfc:	mov	sl, #0
     c00:	vcmpe.f64	d16, d8
     c04:	vmrs	APSR_nzcv, fpscr
     c08:	ble	c38 <coda_leap_second_table_init+0x190>
     c0c:	add	r0, r9, #10
     c10:	vadd.f64	d16, d16, d9
     c14:	vmov	s0, r0
     c18:	vcvt.f64.s32	d0, s0
     c1c:	vmla.f64	d0, d16, d10
     c20:	bl	ea8 <register_leap_second>
     c24:	cmp	r0, #0
     c28:	beq	c80 <coda_leap_second_table_init+0x1d8>
     c2c:	mov	r0, r5
     c30:	bl	0 <fclose>
     c34:	mov	sl, #1
     c38:	cmp	sl, #0
     c3c:	beq	b50 <coda_leap_second_table_init+0xa8>
     c40:	b	c8c <coda_leap_second_table_init+0x1e4>
     c44:	mov	r0, r5
     c48:	bl	0 <fclose>
     c4c:	movw	r1, #0
     c50:	mvn	r0, #21
     c54:	mov	r2, r4
     c58:	movt	r1, #0
     c5c:	bl	0 <coda_set_error>
     c60:	mov	sl, #1
     c64:	cmp	sl, #0
     c68:	beq	b50 <coda_leap_second_table_init+0xa8>
     c6c:	b	c8c <coda_leap_second_table_init+0x1e4>
     c70:	mov	sl, #2
     c74:	cmp	sl, #0
     c78:	beq	b50 <coda_leap_second_table_init+0xa8>
     c7c:	b	c8c <coda_leap_second_table_init+0x1e4>
     c80:	add	r9, r9, #1
     c84:	cmp	sl, #0
     c88:	beq	b50 <coda_leap_second_table_init+0xa8>
     c8c:	cmp	sl, #2
     c90:	bne	d94 <coda_leap_second_table_init+0x2ec>
     c94:	mov	r0, r5
     c98:	bl	0 <fclose>
     c9c:	mov	r5, #0
     ca0:	b	d98 <coda_leap_second_table_init+0x2f0>
     ca4:	vldr	d0, [pc, #284]	; dc8 <coda_leap_second_table_init+0x320>
     ca8:	bl	ea8 <register_leap_second>
     cac:	vldr	d0, [pc, #284]	; dd0 <coda_leap_second_table_init+0x328>
     cb0:	bl	ea8 <register_leap_second>
     cb4:	vldr	d0, [pc, #284]	; dd8 <coda_leap_second_table_init+0x330>
     cb8:	bl	ea8 <register_leap_second>
     cbc:	vldr	d0, [pc, #284]	; de0 <coda_leap_second_table_init+0x338>
     cc0:	bl	ea8 <register_leap_second>
     cc4:	vldr	d0, [pc, #284]	; de8 <coda_leap_second_table_init+0x340>
     cc8:	bl	ea8 <register_leap_second>
     ccc:	vldr	d0, [pc, #284]	; df0 <coda_leap_second_table_init+0x348>
     cd0:	bl	ea8 <register_leap_second>
     cd4:	vldr	d0, [pc, #284]	; df8 <coda_leap_second_table_init+0x350>
     cd8:	bl	ea8 <register_leap_second>
     cdc:	vldr	d0, [pc, #284]	; e00 <coda_leap_second_table_init+0x358>
     ce0:	bl	ea8 <register_leap_second>
     ce4:	vldr	d0, [pc, #284]	; e08 <coda_leap_second_table_init+0x360>
     ce8:	bl	ea8 <register_leap_second>
     cec:	vldr	d0, [pc, #284]	; e10 <coda_leap_second_table_init+0x368>
     cf0:	bl	ea8 <register_leap_second>
     cf4:	vldr	d0, [pc, #284]	; e18 <coda_leap_second_table_init+0x370>
     cf8:	bl	ea8 <register_leap_second>
     cfc:	vldr	d0, [pc, #284]	; e20 <coda_leap_second_table_init+0x378>
     d00:	bl	ea8 <register_leap_second>
     d04:	vldr	d0, [pc, #284]	; e28 <coda_leap_second_table_init+0x380>
     d08:	bl	ea8 <register_leap_second>
     d0c:	vldr	d0, [pc, #284]	; e30 <coda_leap_second_table_init+0x388>
     d10:	bl	ea8 <register_leap_second>
     d14:	vldr	d0, [pc, #284]	; e38 <coda_leap_second_table_init+0x390>
     d18:	bl	ea8 <register_leap_second>
     d1c:	vldr	d0, [pc, #284]	; e40 <coda_leap_second_table_init+0x398>
     d20:	bl	ea8 <register_leap_second>
     d24:	vldr	d0, [pc, #284]	; e48 <coda_leap_second_table_init+0x3a0>
     d28:	bl	ea8 <register_leap_second>
     d2c:	vldr	d0, [pc, #284]	; e50 <coda_leap_second_table_init+0x3a8>
     d30:	bl	ea8 <register_leap_second>
     d34:	vldr	d0, [pc, #284]	; e58 <coda_leap_second_table_init+0x3b0>
     d38:	bl	ea8 <register_leap_second>
     d3c:	vldr	d0, [pc, #284]	; e60 <coda_leap_second_table_init+0x3b8>
     d40:	bl	ea8 <register_leap_second>
     d44:	vldr	d0, [pc, #284]	; e68 <coda_leap_second_table_init+0x3c0>
     d48:	bl	ea8 <register_leap_second>
     d4c:	vldr	d0, [pc, #284]	; e70 <coda_leap_second_table_init+0x3c8>
     d50:	bl	ea8 <register_leap_second>
     d54:	vldr	d0, [pc, #284]	; e78 <coda_leap_second_table_init+0x3d0>
     d58:	bl	ea8 <register_leap_second>
     d5c:	vldr	d0, [pc, #284]	; e80 <coda_leap_second_table_init+0x3d8>
     d60:	bl	ea8 <register_leap_second>
     d64:	vldr	d0, [pc, #284]	; e88 <coda_leap_second_table_init+0x3e0>
     d68:	bl	ea8 <register_leap_second>
     d6c:	vldr	d0, [pc, #284]	; e90 <coda_leap_second_table_init+0x3e8>
     d70:	bl	ea8 <register_leap_second>
     d74:	vldr	d0, [pc, #284]	; e98 <coda_leap_second_table_init+0x3f0>
     d78:	bl	ea8 <register_leap_second>
     d7c:	b	d98 <coda_leap_second_table_init+0x2f0>
     d80:	movw	r1, #0
     d84:	mvn	r0, #20
     d88:	mov	r2, r4
     d8c:	movt	r1, #0
     d90:	bl	0 <coda_set_error>
     d94:	mvn	r5, #0
     d98:	mov	r0, r5
     d9c:	sub	sp, fp, #56	; 0x38
     da0:	vpop	{d8-d10}
     da4:	add	sp, sp, #4
     da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dac:	nop	{0}
     db0:	.word	0xc0000000
     db4:	.word	0x4142a032
     db8:	.word	0x40000000
     dbc:	.word	0xc142b42c
     dc0:	.word	0x00000000
     dc4:	.word	0x40f51800
     dc8:	.word	0xbb000000
     dcc:	.word	0xc1c9dd75
     dd0:	.word	0xba800000
     dd4:	.word	0xc1c9642b
     dd8:	.word	0xfa000000
     ddc:	.word	0xc1c87391
     de0:	.word	0x39800000
     de4:	.word	0xc1c782f8
     de8:	.word	0x79000000
     dec:	.word	0xc1c6925e
     df0:	.word	0xf8800000
     df4:	.word	0xc1c5a11b
     df8:	.word	0x38000000
     dfc:	.word	0xc1c4b082
     e00:	.word	0x77800000
     e04:	.word	0xc1c3bfe8
     e08:	.word	0xb7000000
     e0c:	.word	0xc1c2cf4e
     e10:	.word	0x76800000
     e14:	.word	0xc1c166bc
     e18:	.word	0xb6000000
     e1c:	.word	0xc1c07622
     e20:	.word	0xeb000000
     e24:	.word	0xc1bf0b11
     e28:	.word	0x6a000000
     e2c:	.word	0xc1bb4759
     e30:	.word	0x69000000
     e34:	.word	0xc1b6925e
     e38:	.word	0xe8000000
     e3c:	.word	0xc1b2cea5
     e40:	.word	0x67000000
     e44:	.word	0xc1b0ed72
     e48:	.word	0xcc000000
     e4c:	.word	0xc1ac389b
     e50:	.word	0xca000000
     e54:	.word	0xc1a87634
     e58:	.word	0xc8000000
     e5c:	.word	0xc1a4b3cd
     e60:	.word	0x8c000000
     e64:	.word	0xc19e187d
     e68:	.word	0x88000000
     e6c:	.word	0xc192d3eb
     e70:	.word	0x10000000
     e74:	.word	0xc17e1336
     e78:	.word	0x40000000
     e7c:	.word	0x41a693b0
     e80:	.word	0x21000000
     e84:	.word	0x41b0eec4
     e88:	.word	0xa2000000
     e8c:	.word	0x41b7824f
     e90:	.word	0x23000000
     e94:	.word	0x41bd25ea
     e98:	.word	0x24000000
     e9c:	.word	0x41bffb03
	...

00000ea8 <register_leap_second>:
     ea8:	push	{r4, r5, r6, sl, fp, lr}
     eac:	add	fp, sp, #16
     eb0:	vpush	{d8}
     eb4:	sub	sp, sp, #8
     eb8:	ldr	r4, [pc, #256]	; fc0 <register_leap_second+0x118>
     ebc:	vmov.f64	d8, d0
     ec0:	bl	0 <__aeabi_read_tp>
     ec4:	ldr	r1, [r0, r4]
     ec8:	tst	r1, #15
     ecc:	bne	f00 <register_leap_second+0x58>
     ed0:	ldr	r5, [pc, #236]	; fc4 <register_leap_second+0x11c>
     ed4:	bl	0 <__aeabi_read_tp>
     ed8:	ldr	r0, [r0, r5]
     edc:	mov	r6, #128	; 0x80
     ee0:	add	r1, r6, r1, lsl #3
     ee4:	bl	0 <realloc>
     ee8:	cmp	r0, #0
     eec:	beq	f8c <register_leap_second+0xe4>
     ef0:	mov	r1, r0
     ef4:	bl	0 <__aeabi_read_tp>
     ef8:	str	r1, [r0, r5]
     efc:	ldr	r1, [r0, r4]
     f00:	ldr	r2, [pc, #188]	; fc4 <register_leap_second+0x11c>
     f04:	bl	0 <__aeabi_read_tp>
     f08:	ldr	r0, [r0, r2]
     f0c:	cmp	r1, #1
     f10:	blt	f64 <register_leap_second+0xbc>
     f14:	add	r2, r0, r1, lsl #3
     f18:	vldr	d16, [r2, #-8]
     f1c:	vcmpe.f64	d16, d8
     f20:	vmrs	APSR_nzcv, fpscr
     f24:	blt	f64 <register_leap_second+0xbc>
     f28:	mov	r2, #0
     f2c:	mov	r3, r0
     f30:	vldr	d16, [r3]
     f34:	vcmpe.f64	d8, d16
     f38:	vmrs	APSR_nzcv, fpscr
     f3c:	bhi	f54 <register_leap_second+0xac>
     f40:	vcmp.f64	d8, d16
     f44:	vmrs	APSR_nzcv, fpscr
     f48:	beq	f78 <register_leap_second+0xd0>
     f4c:	vstr	d8, [r3]
     f50:	vmov.f64	d8, d16
     f54:	add	r2, r2, #1
     f58:	add	r3, r3, #8
     f5c:	cmp	r2, r1
     f60:	blt	f30 <register_leap_second+0x88>
     f64:	add	r0, r0, r1, lsl #3
     f68:	add	r1, r1, #1
     f6c:	vstr	d8, [r0]
     f70:	bl	0 <__aeabi_read_tp>
     f74:	str	r1, [r0, r4]
     f78:	mov	r4, #0
     f7c:	mov	r0, r4
     f80:	sub	sp, fp, #24
     f84:	vpop	{d8}
     f88:	pop	{r4, r5, r6, sl, fp, pc}
     f8c:	bl	0 <__aeabi_read_tp>
     f90:	ldr	r0, [r0, r4]
     f94:	movw	r1, #609	; 0x261
     f98:	movw	r3, #0
     f9c:	mvn	r4, #0
     fa0:	str	r1, [sp]
     fa4:	movw	r1, #0
     fa8:	movt	r3, #0
     fac:	movt	r1, #0
     fb0:	add	r2, r6, r0, lsl #3
     fb4:	mvn	r0, #0
     fb8:	bl	0 <coda_set_error>
     fbc:	b	f7c <register_leap_second+0xd4>
	...

00000fc8 <coda_time_double_to_parts>:
     fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fcc:	add	fp, sp, #28
     fd0:	sub	sp, sp, #4
     fd4:	vpush	{d8-d10}
     fd8:	sub	sp, sp, #16
     fdc:	cmp	r0, #0
     fe0:	movne	r6, r1
     fe4:	cmpne	r1, #0
     fe8:	beq	1014 <coda_time_double_to_parts+0x4c>
     fec:	cmp	r2, #0
     ff0:	mov	r5, r2
     ff4:	movne	r8, r3
     ff8:	cmpne	r3, #0
     ffc:	beq	1014 <coda_time_double_to_parts+0x4c>
    1000:	ldr	r9, [fp, #8]
    1004:	cmp	r9, #0
    1008:	ldrne	sl, [fp, #12]
    100c:	cmpne	sl, #0
    1010:	bne	1048 <coda_time_double_to_parts+0x80>
    1014:	movw	r1, #0
    1018:	movw	r2, #0
    101c:	mvn	r0, #99	; 0x63
    1020:	movw	r3, #787	; 0x313
    1024:	movt	r1, #0
    1028:	movt	r2, #0
    102c:	bl	0 <coda_set_error>
    1030:	mvn	r4, #0
    1034:	mov	r0, r4
    1038:	sub	sp, fp, #56	; 0x38
    103c:	vpop	{d8-d10}
    1040:	add	sp, sp, #4
    1044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1048:	mov	r7, r0
    104c:	ldr	r0, [fp, #16]
    1050:	cmp	r0, #0
    1054:	beq	1014 <coda_time_double_to_parts+0x4c>
    1058:	vmov.f64	d8, d0
    105c:	bl	0 <coda_isNaN>
    1060:	cmp	r0, #0
    1064:	beq	1074 <coda_time_double_to_parts+0xac>
    1068:	movw	r1, #0
    106c:	movt	r1, #0
    1070:	b	108c <coda_time_double_to_parts+0xc4>
    1074:	vmov.f64	d0, d8
    1078:	bl	0 <coda_isInf>
    107c:	cmp	r0, #0
    1080:	beq	1098 <coda_time_double_to_parts+0xd0>
    1084:	movw	r1, #0
    1088:	movt	r1, #0
    108c:	mvn	r0, #103	; 0x67
    1090:	bl	0 <coda_set_error>
    1094:	b	1030 <coda_time_double_to_parts+0x68>
    1098:	vldr	d16, [pc, #232]	; 1188 <coda_time_double_to_parts+0x1c0>
    109c:	vldr	d17, [pc, #236]	; 1190 <coda_time_double_to_parts+0x1c8>
    10a0:	add	r1, sp, #12
    10a4:	add	r2, sp, #8
    10a8:	add	r3, sp, #4
    10ac:	vadd.f64	d8, d8, d16
    10b0:	vrintm.f64	d9, d8
    10b4:	vdiv.f64	d16, d9, d17
    10b8:	vcvtm.s32.f64	s20, d16
    10bc:	vmov	r0, s20
    10c0:	bl	52c <mjd2000_to_dmy>
    10c4:	mvn	r4, #0
    10c8:	cmp	r0, #0
    10cc:	bne	1034 <coda_time_double_to_parts+0x6c>
    10d0:	vldr	d16, [pc, #192]	; 1198 <coda_time_double_to_parts+0x1d0>
    10d4:	vcvt.f64.s32	d17, s20
    10d8:	vmov.f64	d18, d9
    10dc:	movw	r0, #20864	; 0x5180
    10e0:	movt	r0, #1
    10e4:	vmla.f64	d18, d17, d16
    10e8:	vcvt.s32.f64	s0, d18
    10ec:	vmov	r2, s0
    10f0:	cmp	r2, r0
    10f4:	bcc	110c <coda_time_double_to_parts+0x144>
    10f8:	movw	r1, #0
    10fc:	mvn	r0, #103	; 0x67
    1100:	movt	r1, #0
    1104:	bl	0 <coda_set_error>
    1108:	b	1034 <coda_time_double_to_parts+0x6c>
    110c:	ldr	r0, [sp, #4]
    1110:	vldr	d16, [pc, #136]	; 11a0 <coda_time_double_to_parts+0x1d8>
    1114:	vsub.f64	d17, d8, d9
    1118:	mov	r4, #0
    111c:	str	r0, [r7]
    1120:	vmul.f64	d16, d17, d16
    1124:	ldr	r0, [sp, #8]
    1128:	vrintm.f64	d16, d16
    112c:	str	r0, [r6]
    1130:	ldr	r0, [sp, #12]
    1134:	str	r0, [r5]
    1138:	movw	r0, #46021	; 0xb3c5
    113c:	movt	r0, #37282	; 0x91a2
    1140:	umull	r0, r1, r2, r0
    1144:	lsr	r0, r1, #11
    1148:	mov	r1, #3600	; 0xe10
    114c:	str	r0, [r8]
    1150:	mls	r0, r0, r1, r2
    1154:	movw	r1, #34953	; 0x8889
    1158:	movt	r1, #34952	; 0x8888
    115c:	umull	r1, r2, r0, r1
    1160:	lsr	r1, r2, #5
    1164:	str	r1, [r9]
    1168:	lsl	r1, r1, #4
    116c:	sub	r1, r1, r2, lsr #5
    1170:	sub	r0, r0, r1, lsl #2
    1174:	str	r0, [sl]
    1178:	ldr	r0, [fp, #16]
    117c:	vcvt.s32.f64	s0, d16
    1180:	vstr	s0, [r0]
    1184:	b	1034 <coda_time_double_to_parts+0x6c>
    1188:	.word	0xa0b5ed8d
    118c:	.word	0x3ea0c6f7
    1190:	.word	0x00000000
    1194:	.word	0x40f51800
    1198:	.word	0x00000000
    119c:	.word	0xc0f51800
    11a0:	.word	0x00000000
    11a4:	.word	0x412e8480

000011a8 <coda_time_double_to_parts_utc>:
    11a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11ac:	add	fp, sp, #28
    11b0:	sub	sp, sp, #4
    11b4:	vpush	{d8-d11}
    11b8:	sub	sp, sp, #16
    11bc:	cmp	r0, #0
    11c0:	movne	r6, r1
    11c4:	cmpne	r1, #0
    11c8:	beq	11f8 <coda_time_double_to_parts_utc+0x50>
    11cc:	cmp	r2, #0
    11d0:	mov	r5, r2
    11d4:	movne	r8, r3
    11d8:	cmpne	r3, #0
    11dc:	beq	11f8 <coda_time_double_to_parts_utc+0x50>
    11e0:	ldr	sl, [fp, #8]
    11e4:	cmp	sl, #0
    11e8:	movne	r7, r0
    11ec:	ldrne	r0, [fp, #12]
    11f0:	cmpne	r0, #0
    11f4:	bne	122c <coda_time_double_to_parts_utc+0x84>
    11f8:	movw	r1, #0
    11fc:	movw	r2, #0
    1200:	mvn	r0, #99	; 0x63
    1204:	movw	r3, #874	; 0x36a
    1208:	movt	r1, #0
    120c:	movt	r2, #0
    1210:	bl	0 <coda_set_error>
    1214:	mvn	r4, #0
    1218:	mov	r0, r4
    121c:	sub	sp, fp, #64	; 0x40
    1220:	vpop	{d8-d11}
    1224:	add	sp, sp, #4
    1228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    122c:	ldr	r0, [fp, #16]
    1230:	cmp	r0, #0
    1234:	beq	11f8 <coda_time_double_to_parts_utc+0x50>
    1238:	vmov.f64	d8, d0
    123c:	bl	0 <coda_isNaN>
    1240:	cmp	r0, #0
    1244:	beq	1254 <coda_time_double_to_parts_utc+0xac>
    1248:	movw	r1, #0
    124c:	movt	r1, #0
    1250:	b	126c <coda_time_double_to_parts_utc+0xc4>
    1254:	vmov.f64	d0, d8
    1258:	bl	0 <coda_isInf>
    125c:	cmp	r0, #0
    1260:	beq	1278 <coda_time_double_to_parts_utc+0xd0>
    1264:	movw	r1, #0
    1268:	movt	r1, #0
    126c:	mvn	r0, #103	; 0x67
    1270:	bl	0 <coda_set_error>
    1274:	b	1214 <coda_time_double_to_parts_utc+0x6c>
    1278:	bl	0 <__aeabi_read_tp>
    127c:	ldr	r1, [pc, #440]	; 143c <coda_time_double_to_parts_utc+0x294>
    1280:	ldr	r1, [r0, r1]
    1284:	cmp	r1, #0
    1288:	beq	13f0 <coda_time_double_to_parts_utc+0x248>
    128c:	ldr	r2, [pc, #420]	; 1438 <coda_time_double_to_parts_utc+0x290>
    1290:	ldr	r2, [r0, r2]
    1294:	cmp	r2, #1
    1298:	blt	13f0 <coda_time_double_to_parts_utc+0x248>
    129c:	vldr	d16, [pc, #364]	; 1410 <coda_time_double_to_parts_utc+0x268>
    12a0:	mov	r0, #0
    12a4:	vadd.f64	d8, d8, d16
    12a8:	vrintm.f64	d16, d8
    12ac:	vldr	d17, [r1]
    12b0:	vcmpe.f64	d16, d17
    12b4:	vmrs	APSR_nzcv, fpscr
    12b8:	ble	12d0 <coda_time_double_to_parts_utc+0x128>
    12bc:	add	r0, r0, #1
    12c0:	add	r1, r1, #8
    12c4:	cmp	r0, r2
    12c8:	blt	12ac <coda_time_double_to_parts_utc+0x104>
    12cc:	vldr	d17, [r1]
    12d0:	vldr	d18, [pc, #320]	; 1418 <coda_time_double_to_parts_utc+0x270>
    12d4:	vsub.f64	d17, d16, d17
    12d8:	mov	r9, #0
    12dc:	add	r1, sp, #12
    12e0:	add	r2, sp, #8
    12e4:	add	r3, sp, #4
    12e8:	vabs.f64	d17, d17
    12ec:	vcmpe.f64	d17, d18
    12f0:	vldr	d17, [pc, #296]	; 1420 <coda_time_double_to_parts_utc+0x278>
    12f4:	vmrs	APSR_nzcv, fpscr
    12f8:	movwmi	r9, #1
    12fc:	add	r0, r0, r9
    1300:	add	r0, r0, #10
    1304:	vmov	s0, r0
    1308:	vcvt.f64.s32	d10, s0
    130c:	vsub.f64	d9, d16, d10
    1310:	vdiv.f64	d16, d9, d17
    1314:	vcvtm.s32.f64	s22, d16
    1318:	vmov	r0, s22
    131c:	bl	52c <mjd2000_to_dmy>
    1320:	mvn	r4, #0
    1324:	cmp	r0, #0
    1328:	bne	1218 <coda_time_double_to_parts_utc+0x70>
    132c:	vldr	d16, [pc, #244]	; 1428 <coda_time_double_to_parts_utc+0x280>
    1330:	vcvt.f64.s32	d17, s22
    1334:	vmov.f64	d18, d9
    1338:	movw	r0, #20864	; 0x5180
    133c:	movt	r0, #1
    1340:	vmla.f64	d18, d17, d16
    1344:	vcvt.s32.f64	s0, d18
    1348:	vmov	r2, s0
    134c:	cmp	r2, r0
    1350:	bcc	1368 <coda_time_double_to_parts_utc+0x1c0>
    1354:	movw	r1, #0
    1358:	mvn	r0, #103	; 0x67
    135c:	movt	r1, #0
    1360:	bl	0 <coda_set_error>
    1364:	b	1218 <coda_time_double_to_parts_utc+0x70>
    1368:	ldr	r0, [sp, #4]
    136c:	vldr	d17, [pc, #188]	; 1430 <coda_time_double_to_parts_utc+0x288>
    1370:	vsub.f64	d16, d8, d10
    1374:	mov	r4, #0
    1378:	vsub.f64	d16, d16, d9
    137c:	str	r0, [r7]
    1380:	vmul.f64	d16, d16, d17
    1384:	ldr	r0, [sp, #8]
    1388:	vrintm.f64	d16, d16
    138c:	str	r0, [r6]
    1390:	ldr	r0, [sp, #12]
    1394:	str	r0, [r5]
    1398:	movw	r0, #46021	; 0xb3c5
    139c:	movt	r0, #37282	; 0x91a2
    13a0:	umull	r0, r1, r2, r0
    13a4:	lsr	r0, r1, #11
    13a8:	mov	r1, #3600	; 0xe10
    13ac:	str	r0, [r8]
    13b0:	mls	r0, r0, r1, r2
    13b4:	movw	r1, #34953	; 0x8889
    13b8:	movt	r1, #34952	; 0x8888
    13bc:	umull	r1, r2, r0, r1
    13c0:	lsr	r1, r2, #5
    13c4:	str	r1, [sl]
    13c8:	lsl	r1, r1, #4
    13cc:	sub	r1, r1, r2, lsr #5
    13d0:	sub	r0, r0, r1, lsl #2
    13d4:	ldr	r1, [fp, #12]
    13d8:	add	r0, r0, r9
    13dc:	str	r0, [r1]
    13e0:	ldr	r0, [fp, #16]
    13e4:	vcvt.s32.f64	s0, d16
    13e8:	vstr	s0, [r0]
    13ec:	b	1218 <coda_time_double_to_parts_utc+0x70>
    13f0:	movw	r0, #0
    13f4:	movw	r1, #0
    13f8:	movw	r3, #0
    13fc:	movw	r2, #894	; 0x37e
    1400:	movt	r0, #0
    1404:	movt	r1, #0
    1408:	movt	r3, #0
    140c:	bl	0 <__assert_fail>
    1410:	.word	0xa0b5ed8d
    1414:	.word	0x3ea0c6f7
    1418:	.word	0x9999999a
    141c:	.word	0x3fb99999
    1420:	.word	0x00000000
    1424:	.word	0x40f51800
    1428:	.word	0x00000000
    142c:	.word	0xc0f51800
    1430:	.word	0x00000000
    1434:	.word	0x412e8480
	...

00001440 <coda_time_parts_to_double>:
    1440:	push	{r4, r5, r6, sl, fp, lr}
    1444:	add	fp, sp, #16
    1448:	sub	sp, sp, #16
    144c:	ldr	r6, [fp, #20]
    1450:	cmp	r6, #0
    1454:	beq	14c0 <coda_time_parts_to_double+0x80>
    1458:	mov	r5, r0
    145c:	mov	r4, r3
    1460:	mov	r0, r2
    1464:	add	r3, sp, #12
    1468:	mov	r2, r5
    146c:	bl	2cc <dmy_to_mjd2000>
    1470:	mvn	r5, #0
    1474:	cmp	r0, #0
    1478:	bne	14e0 <coda_time_parts_to_double+0xa0>
    147c:	ldr	r1, [fp, #16]
    1480:	ldr	r0, [fp, #12]
    1484:	ldr	r3, [fp, #8]
    1488:	movw	r2, #16959	; 0x423f
    148c:	movt	r2, #15
    1490:	cmp	r1, r2
    1494:	bhi	14a4 <coda_time_parts_to_double+0x64>
    1498:	cmp	r0, #60	; 0x3c
    149c:	cmpls	r4, #23
    14a0:	bls	14ec <coda_time_parts_to_double+0xac>
    14a4:	stm	sp, {r0, r1}
    14a8:	movw	r1, #0
    14ac:	mvn	r0, #103	; 0x67
    14b0:	mov	r2, r4
    14b4:	movt	r1, #0
    14b8:	bl	0 <coda_set_error>
    14bc:	b	14e0 <coda_time_parts_to_double+0xa0>
    14c0:	movw	r1, #0
    14c4:	movw	r2, #0
    14c8:	mvn	r0, #99	; 0x63
    14cc:	movw	r3, #954	; 0x3ba
    14d0:	movt	r1, #0
    14d4:	movt	r2, #0
    14d8:	bl	0 <coda_set_error>
    14dc:	mvn	r5, #0
    14e0:	mov	r0, r5
    14e4:	sub	sp, fp, #16
    14e8:	pop	{r4, r5, r6, sl, fp, pc}
    14ec:	cmp	r3, #60	; 0x3c
    14f0:	bcs	14a4 <coda_time_parts_to_double+0x64>
    14f4:	vldr	d16, [pc, #84]	; 1550 <coda_time_parts_to_double+0x110>
    14f8:	vldr	d18, [pc, #88]	; 1558 <coda_time_parts_to_double+0x118>
    14fc:	vmov	s0, r3
    1500:	vmov	s2, r4
    1504:	vldr	d19, [pc, #84]	; 1560 <coda_time_parts_to_double+0x120>
    1508:	mov	r5, #0
    150c:	vcvt.f64.s32	d17, s0
    1510:	vcvt.f64.s32	d20, s2
    1514:	vldr	s4, [sp, #12]
    1518:	vmov	s0, r1
    151c:	vmov	s2, r0
    1520:	vmul.f64	d16, d17, d16
    1524:	vcvt.f64.s32	d17, s0
    1528:	vcvt.f64.s32	d21, s2
    152c:	vmla.f64	d16, d20, d18
    1530:	vldr	d18, [pc, #48]	; 1568 <coda_time_parts_to_double+0x128>
    1534:	vdiv.f64	d17, d17, d19
    1538:	vcvt.f64.s32	d19, s4
    153c:	vadd.f64	d16, d16, d21
    1540:	vadd.f64	d16, d16, d17
    1544:	vmla.f64	d16, d19, d18
    1548:	vstr	d16, [r6]
    154c:	b	14e0 <coda_time_parts_to_double+0xa0>
    1550:	.word	0x00000000
    1554:	.word	0x404e0000
    1558:	.word	0x00000000
    155c:	.word	0x40ac2000
    1560:	.word	0x00000000
    1564:	.word	0x412e8480
    1568:	.word	0x00000000
    156c:	.word	0x40f51800

00001570 <coda_time_parts_to_double_utc>:
    1570:	push	{r4, r5, r6, sl, fp, lr}
    1574:	add	fp, sp, #16
    1578:	sub	sp, sp, #16
    157c:	ldr	r6, [fp, #20]
    1580:	cmp	r6, #0
    1584:	beq	15f4 <coda_time_parts_to_double_utc+0x84>
    1588:	mov	r5, r0
    158c:	mov	r4, r3
    1590:	mov	r0, r2
    1594:	add	r3, sp, #12
    1598:	mov	r2, r5
    159c:	bl	2cc <dmy_to_mjd2000>
    15a0:	mvn	r5, #0
    15a4:	cmp	r0, #0
    15a8:	bne	1614 <coda_time_parts_to_double_utc+0xa4>
    15ac:	ldr	r1, [fp, #16]
    15b0:	ldr	r2, [fp, #12]
    15b4:	ldr	r3, [fp, #8]
    15b8:	movw	r0, #16959	; 0x423f
    15bc:	movt	r0, #15
    15c0:	cmp	r1, r0
    15c4:	bhi	15d4 <coda_time_parts_to_double_utc+0x64>
    15c8:	cmp	r2, #60	; 0x3c
    15cc:	cmpls	r4, #23
    15d0:	bls	1620 <coda_time_parts_to_double_utc+0xb0>
    15d4:	str	r1, [sp, #4]
    15d8:	movw	r1, #0
    15dc:	str	r2, [sp]
    15e0:	mvn	r0, #103	; 0x67
    15e4:	mov	r2, r4
    15e8:	movt	r1, #0
    15ec:	bl	0 <coda_set_error>
    15f0:	b	1614 <coda_time_parts_to_double_utc+0xa4>
    15f4:	movw	r1, #0
    15f8:	movw	r2, #0
    15fc:	mvn	r0, #99	; 0x63
    1600:	mov	r3, #1008	; 0x3f0
    1604:	movt	r1, #0
    1608:	movt	r2, #0
    160c:	bl	0 <coda_set_error>
    1610:	mvn	r5, #0
    1614:	mov	r0, r5
    1618:	sub	sp, fp, #16
    161c:	pop	{r4, r5, r6, sl, fp, pc}
    1620:	cmp	r3, #60	; 0x3c
    1624:	bcs	15d4 <coda_time_parts_to_double_utc+0x64>
    1628:	vmov	s0, r3
    162c:	vmov	s2, r4
    1630:	vcvt.f64.s32	d16, s0
    1634:	bl	0 <__aeabi_read_tp>
    1638:	vcvt.f64.s32	d17, s2
    163c:	vmov	s2, r1
    1640:	ldr	r1, [pc, #220]	; 1724 <coda_time_parts_to_double_utc+0x1b4>
    1644:	vmov	s0, r2
    1648:	vcvt.f64.s32	d18, s0
    164c:	vcvt.f64.s32	d19, s2
    1650:	ldr	r1, [r0, r1]
    1654:	cmp	r1, #0
    1658:	beq	16dc <coda_time_parts_to_double_utc+0x16c>
    165c:	ldr	r2, [pc, #188]	; 1720 <coda_time_parts_to_double_utc+0x1b0>
    1660:	ldr	r0, [r0, r2]
    1664:	cmp	r0, #0
    1668:	ble	16dc <coda_time_parts_to_double_utc+0x16c>
    166c:	vldr	d20, [pc, #140]	; 1700 <coda_time_parts_to_double_utc+0x190>
    1670:	vldr	d21, [pc, #144]	; 1708 <coda_time_parts_to_double_utc+0x198>
    1674:	vldr	d22, [pc, #148]	; 1710 <coda_time_parts_to_double_utc+0x1a0>
    1678:	vldr	s0, [sp, #12]
    167c:	mov	r2, #0
    1680:	vmul.f64	d16, d16, d20
    1684:	vmla.f64	d16, d17, d21
    1688:	vdiv.f64	d17, d19, d22
    168c:	vcvt.f64.s32	d19, s0
    1690:	vadd.f64	d16, d16, d18
    1694:	vldr	d18, [pc, #124]	; 1718 <coda_time_parts_to_double_utc+0x1a8>
    1698:	vadd.f64	d16, d16, d17
    169c:	vmov.f64	d17, #36	; 0x41200000  10.0
    16a0:	vmla.f64	d17, d19, d18
    16a4:	vmov.f64	d18, #112	; 0x3f800000  1.0
    16a8:	vldr	d19, [r1]
    16ac:	vcmpe.f64	d17, d19
    16b0:	vmrs	APSR_nzcv, fpscr
    16b4:	blt	16cc <coda_time_parts_to_double_utc+0x15c>
    16b8:	add	r2, r2, #1
    16bc:	add	r1, r1, #8
    16c0:	vadd.f64	d17, d17, d18
    16c4:	cmp	r2, r0
    16c8:	blt	16a8 <coda_time_parts_to_double_utc+0x138>
    16cc:	vadd.f64	d16, d16, d17
    16d0:	mov	r5, #0
    16d4:	vstr	d16, [r6]
    16d8:	b	1614 <coda_time_parts_to_double_utc+0xa4>
    16dc:	movw	r0, #0
    16e0:	movw	r1, #0
    16e4:	movw	r3, #0
    16e8:	mov	r2, #1024	; 0x400
    16ec:	movt	r0, #0
    16f0:	movt	r1, #0
    16f4:	movt	r3, #0
    16f8:	bl	0 <__assert_fail>
    16fc:	nop	{0}
    1700:	.word	0x00000000
    1704:	.word	0x404e0000
    1708:	.word	0x00000000
    170c:	.word	0x40ac2000
    1710:	.word	0x00000000
    1714:	.word	0x412e8480
    1718:	.word	0x00000000
    171c:	.word	0x40f51800
	...

00001728 <coda_time_parts_to_string>:
    1728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    172c:	add	fp, sp, #28
    1730:	sub	sp, sp, #44	; 0x2c
    1734:	ldr	r5, [fp, #20]
    1738:	str	r3, [sp, #32]
    173c:	cmp	r5, #0
    1740:	beq	1c04 <coda_time_parts_to_string+0x4dc>
    1744:	ldr	ip, [fp, #24]
    1748:	cmp	ip, #0
    174c:	beq	1c1c <coda_time_parts_to_string+0x4f4>
    1750:	ldrb	r4, [r5]
    1754:	cmp	r4, #0
    1758:	beq	1c54 <coda_time_parts_to_string+0x52c>
    175c:	str	r0, [sp, #12]
    1760:	add	r0, r5, #1
    1764:	movw	sl, #0
    1768:	str	r2, [sp, #20]
    176c:	str	r1, [sp, #16]
    1770:	mov	r8, #0
    1774:	mvn	r6, #123	; 0x7b
    1778:	mov	r9, #0
    177c:	mov	r3, #0
    1780:	str	r0, [sp, #8]
    1784:	sub	r0, r2, #1
    1788:	movt	sl, #0
    178c:	str	r0, [sp, #4]
    1790:	sub	r0, r1, #1
    1794:	str	r0, [sp]
    1798:	clz	r1, r3
    179c:	mov	r7, r3
    17a0:	lsr	r3, r1, #5
    17a4:	str	r7, [sp, #28]
    17a8:	str	r3, [sp, #24]
    17ac:	uxtab	r1, r6, r4
    17b0:	clz	r1, r1
    17b4:	lsr	r1, r1, #5
    17b8:	tst	r1, r3
    17bc:	bne	1c3c <coda_time_parts_to_string+0x514>
    17c0:	uxtb	r0, r4
    17c4:	cmp	r0, #39	; 0x27
    17c8:	bne	17ec <coda_time_parts_to_string+0xc4>
    17cc:	add	r9, r9, #1
    17d0:	mov	r1, #39	; 0x27
    17d4:	ldrb	r4, [r5, r9]
    17d8:	cmp	r4, #39	; 0x27
    17dc:	bne	1bf8 <coda_time_parts_to_string+0x4d0>
    17e0:	cmp	r7, #0
    17e4:	bne	17f8 <coda_time_parts_to_string+0xd0>
    17e8:	b	1814 <coda_time_parts_to_string+0xec>
    17ec:	ldrb	r1, [r5, r9]
    17f0:	cmp	r7, #0
    17f4:	beq	1814 <coda_time_parts_to_string+0xec>
    17f8:	strb	r1, [ip, r8]
    17fc:	add	r8, r8, #1
    1800:	add	r9, r9, #1
    1804:	ldrb	r4, [r5, r9]
    1808:	cmp	r4, #0
    180c:	bne	17ac <coda_time_parts_to_string+0x84>
    1810:	b	1c3c <coda_time_parts_to_string+0x514>
    1814:	sub	r0, r1, #68	; 0x44
    1818:	cmp	r0, #53	; 0x35
    181c:	bhi	1988 <coda_time_parts_to_string+0x260>
    1820:	add	r2, pc, #0
    1824:	ldr	pc, [r2, r0, lsl #2]
    1828:	.word	0x00001900
    182c:	.word	0x00001988
    1830:	.word	0x00001988
    1834:	.word	0x00001988
    1838:	.word	0x000019a0
    183c:	.word	0x00001988
    1840:	.word	0x00001988
    1844:	.word	0x00001988
    1848:	.word	0x00001988
    184c:	.word	0x000019c4
    1850:	.word	0x00001988
    1854:	.word	0x00001988
    1858:	.word	0x00001988
    185c:	.word	0x00001988
    1860:	.word	0x00001988
    1864:	.word	0x00001a30
    1868:	.word	0x00001988
    186c:	.word	0x00001988
    1870:	.word	0x00001988
    1874:	.word	0x00001988
    1878:	.word	0x00001988
    187c:	.word	0x00001988
    1880:	.word	0x00001988
    1884:	.word	0x00001988
    1888:	.word	0x00001988
    188c:	.word	0x00001988
    1890:	.word	0x00001988
    1894:	.word	0x00001988
    1898:	.word	0x00001988
    189c:	.word	0x00001988
    18a0:	.word	0x00001988
    18a4:	.word	0x00001988
    18a8:	.word	0x00001ad4
    18ac:	.word	0x00001988
    18b0:	.word	0x00001988
    18b4:	.word	0x00001988
    18b8:	.word	0x00001988
    18bc:	.word	0x00001988
    18c0:	.word	0x00001988
    18c4:	.word	0x00001988
    18c8:	.word	0x00001988
    18cc:	.word	0x00001af8
    18d0:	.word	0x00001988
    18d4:	.word	0x00001988
    18d8:	.word	0x00001988
    18dc:	.word	0x00001988
    18e0:	.word	0x00001988
    18e4:	.word	0x00001b18
    18e8:	.word	0x00001988
    18ec:	.word	0x00001988
    18f0:	.word	0x00001988
    18f4:	.word	0x00001988
    18f8:	.word	0x00001988
    18fc:	.word	0x00001b64
    1900:	add	r0, r5, r9
    1904:	ldrb	r1, [r0, #1]
    1908:	cmp	r1, #68	; 0x44
    190c:	ldrbeq	r0, [r0, #2]
    1910:	cmpeq	r0, #68	; 0x44
    1914:	bne	1c60 <coda_time_parts_to_string+0x538>
    1918:	ldr	sl, [sp, #12]
    191c:	ldr	r0, [sp, #20]
    1920:	ldr	r1, [sp, #16]
    1924:	sub	r3, fp, #32
    1928:	mov	r6, ip
    192c:	mov	r2, sl
    1930:	bl	2cc <dmy_to_mjd2000>
    1934:	cmp	r0, #0
    1938:	bne	1c74 <coda_time_parts_to_string+0x54c>
    193c:	mov	r0, #1
    1940:	mov	r1, #1
    1944:	mov	r2, sl
    1948:	add	r3, sp, #36	; 0x24
    194c:	bl	2cc <dmy_to_mjd2000>
    1950:	cmp	r0, #0
    1954:	bne	1c74 <coda_time_parts_to_string+0x54c>
    1958:	ldr	r1, [fp, #-32]	; 0xffffffe0
    195c:	ldr	r2, [sp, #36]	; 0x24
    1960:	add	r0, r6, r8
    1964:	add	r1, r1, #1
    1968:	sub	r2, r1, r2
    196c:	movw	r1, #0
    1970:	movt	r1, #0
    1974:	bl	0 <sprintf>
    1978:	mov	ip, r6
    197c:	add	r8, r8, #3
    1980:	add	r9, r9, #3
    1984:	b	1ab8 <coda_time_parts_to_string+0x390>
    1988:	and	r0, r1, #223	; 0xdf
    198c:	sub	r0, r0, #65	; 0x41
    1990:	uxtb	r0, r0
    1994:	cmp	r0, #25
    1998:	bhi	17f8 <coda_time_parts_to_string+0xd0>
    199c:	b	1c60 <coda_time_parts_to_string+0x538>
    19a0:	add	r0, r5, r9
    19a4:	ldrb	r0, [r0, #1]
    19a8:	cmp	r0, #72	; 0x48
    19ac:	bne	1c60 <coda_time_parts_to_string+0x538>
    19b0:	ldr	r0, [sp, #32]
    19b4:	cmp	r0, #24
    19b8:	bcs	1c8c <coda_time_parts_to_string+0x564>
    19bc:	ldr	r2, [sp, #32]
    19c0:	b	1b34 <coda_time_parts_to_string+0x40c>
    19c4:	add	r0, r5, r9
    19c8:	ldrb	r0, [r0, #1]
    19cc:	cmp	r0, #77	; 0x4d
    19d0:	bne	1c60 <coda_time_parts_to_string+0x538>
    19d4:	ldr	r0, [sp]
    19d8:	cmp	r0, #12
    19dc:	bcs	1c98 <coda_time_parts_to_string+0x570>
    19e0:	mov	r6, ip
    19e4:	ldr	r2, [sp, #16]
    19e8:	add	sl, ip, r8
    19ec:	add	r6, r9, #2
    19f0:	ldrb	r0, [r5, r6]
    19f4:	cmp	r0, #77	; 0x4d
    19f8:	bne	1bcc <coda_time_parts_to_string+0x4a4>
    19fc:	movw	r0, #0
    1a00:	movt	r0, #0
    1a04:	ldr	r6, [r0, r2, lsl #2]
    1a08:	mov	r0, r6
    1a0c:	bl	0 <strlen>
    1a10:	add	r2, r0, #1
    1a14:	mov	r0, sl
    1a18:	mov	r1, r6
    1a1c:	bl	0 <memcpy>
    1a20:	ldr	r6, [fp, #24]
    1a24:	add	r8, r8, #3
    1a28:	add	r9, r9, #3
    1a2c:	b	1ab4 <coda_time_parts_to_string+0x38c>
    1a30:	ldr	r0, [fp, #16]
    1a34:	movw	r1, #16959	; 0x423f
    1a38:	movt	r1, #15
    1a3c:	cmp	r0, r1
    1a40:	bhi	1c80 <coda_time_parts_to_string+0x558>
    1a44:	ldr	r0, [sp, #8]
    1a48:	mov	r6, ip
    1a4c:	mov	sl, #0
    1a50:	add	r0, r0, r9
    1a54:	ldrb	r1, [r0, sl]
    1a58:	add	sl, sl, #1
    1a5c:	cmp	r1, #83	; 0x53
    1a60:	beq	1a54 <coda_time_parts_to_string+0x32c>
    1a64:	ldr	r3, [fp, #16]
    1a68:	movw	r5, #26215	; 0x6667
    1a6c:	cmp	sl, #5
    1a70:	movt	r5, #26214	; 0x6666
    1a74:	bhi	1a98 <coda_time_parts_to_string+0x370>
    1a78:	ldr	r3, [fp, #16]
    1a7c:	mov	r0, #6
    1a80:	smmul	r1, r3, r5
    1a84:	sub	r0, r0, #1
    1a88:	asr	r2, r1, #2
    1a8c:	cmp	sl, r0
    1a90:	add	r3, r2, r1, lsr #31
    1a94:	bne	1a80 <coda_time_parts_to_string+0x358>
    1a98:	movw	r1, #0
    1a9c:	add	r0, r6, r8
    1aa0:	mov	r2, sl
    1aa4:	add	r9, r9, sl
    1aa8:	movt	r1, #0
    1aac:	bl	0 <sprintf>
    1ab0:	add	r8, r8, sl
    1ab4:	mov	ip, r6
    1ab8:	movw	sl, #0
    1abc:	mvn	r6, #123	; 0x7b
    1ac0:	movt	sl, #0
    1ac4:	ldr	r7, [sp, #28]
    1ac8:	ldr	r5, [fp, #20]
    1acc:	ldr	r3, [sp, #24]
    1ad0:	b	1804 <coda_time_parts_to_string+0xdc>
    1ad4:	add	r0, r5, r9
    1ad8:	ldrb	r0, [r0, #1]
    1adc:	cmp	r0, #100	; 0x64
    1ae0:	bne	1c60 <coda_time_parts_to_string+0x538>
    1ae4:	ldr	r0, [sp, #4]
    1ae8:	cmp	r0, #31
    1aec:	bcs	1ca4 <coda_time_parts_to_string+0x57c>
    1af0:	ldr	r2, [sp, #20]
    1af4:	b	1b34 <coda_time_parts_to_string+0x40c>
    1af8:	add	r0, r5, r9
    1afc:	ldrb	r0, [r0, #1]
    1b00:	cmp	r0, #109	; 0x6d
    1b04:	bne	1c60 <coda_time_parts_to_string+0x538>
    1b08:	ldr	r2, [fp, #8]
    1b0c:	cmp	r2, #60	; 0x3c
    1b10:	bcc	1b34 <coda_time_parts_to_string+0x40c>
    1b14:	b	1cb0 <coda_time_parts_to_string+0x588>
    1b18:	add	r0, r5, r9
    1b1c:	ldrb	r0, [r0, #1]
    1b20:	cmp	r0, #115	; 0x73
    1b24:	bne	1c60 <coda_time_parts_to_string+0x538>
    1b28:	ldr	r2, [fp, #12]
    1b2c:	cmp	r2, #61	; 0x3d
    1b30:	bcs	1cbc <coda_time_parts_to_string+0x594>
    1b34:	add	r0, ip, r8
    1b38:	mov	r1, sl
    1b3c:	mov	r4, ip
    1b40:	bl	0 <sprintf>
    1b44:	ldr	r3, [sp, #24]
    1b48:	ldr	r5, [fp, #20]
    1b4c:	ldr	r7, [sp, #28]
    1b50:	mov	ip, r4
    1b54:	mvn	r6, #123	; 0x7b
    1b58:	add	r8, r8, #2
    1b5c:	add	r9, r9, #2
    1b60:	b	1804 <coda_time_parts_to_string+0xdc>
    1b64:	add	r0, r5, r9
    1b68:	ldrb	r1, [r0, #1]
    1b6c:	cmp	r1, #121	; 0x79
    1b70:	bne	1c60 <coda_time_parts_to_string+0x538>
    1b74:	ldrb	r1, [r0, #2]
    1b78:	cmp	r1, #121	; 0x79
    1b7c:	ldrbeq	r0, [r0, #3]
    1b80:	cmpeq	r0, #121	; 0x79
    1b84:	bne	1c60 <coda_time_parts_to_string+0x538>
    1b88:	ldr	r2, [sp, #12]
    1b8c:	movw	r0, #10000	; 0x2710
    1b90:	cmp	r2, r0
    1b94:	bcs	1cc8 <coda_time_parts_to_string+0x5a0>
    1b98:	movw	r1, #0
    1b9c:	add	r0, ip, r8
    1ba0:	mov	r4, ip
    1ba4:	movt	r1, #0
    1ba8:	bl	0 <sprintf>
    1bac:	ldr	r3, [sp, #24]
    1bb0:	ldr	r5, [fp, #20]
    1bb4:	ldr	r7, [sp, #28]
    1bb8:	mov	ip, r4
    1bbc:	mvn	r6, #123	; 0x7b
    1bc0:	add	r8, r8, #4
    1bc4:	add	r9, r9, #4
    1bc8:	b	1804 <coda_time_parts_to_string+0xdc>
    1bcc:	mov	r0, sl
    1bd0:	movw	sl, #0
    1bd4:	movt	sl, #0
    1bd8:	mov	r1, sl
    1bdc:	bl	0 <sprintf>
    1be0:	mov	r9, r6
    1be4:	ldr	r6, [fp, #24]
    1be8:	add	r8, r8, #2
    1bec:	mov	ip, r6
    1bf0:	mvn	r6, #123	; 0x7b
    1bf4:	b	1ac4 <coda_time_parts_to_string+0x39c>
    1bf8:	cmp	r4, #0
    1bfc:	bne	1798 <coda_time_parts_to_string+0x70>
    1c00:	b	1c40 <coda_time_parts_to_string+0x518>
    1c04:	movw	r1, #0
    1c08:	movw	r2, #0
    1c0c:	mvn	r0, #99	; 0x63
    1c10:	movw	r3, #1069	; 0x42d
    1c14:	movt	r1, #0
    1c18:	b	1c30 <coda_time_parts_to_string+0x508>
    1c1c:	movw	r1, #0
    1c20:	movw	r2, #0
    1c24:	mvn	r0, #99	; 0x63
    1c28:	movw	r3, #1074	; 0x432
    1c2c:	movt	r1, #0
    1c30:	movt	r2, #0
    1c34:	bl	0 <coda_set_error>
    1c38:	b	1c74 <coda_time_parts_to_string+0x54c>
    1c3c:	mov	r3, r7
    1c40:	cmp	r3, #0
    1c44:	beq	1c54 <coda_time_parts_to_string+0x52c>
    1c48:	movw	r1, #0
    1c4c:	movt	r1, #0
    1c50:	b	1c68 <coda_time_parts_to_string+0x540>
    1c54:	mov	r0, #0
    1c58:	sub	sp, fp, #28
    1c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c60:	movw	r1, #0
    1c64:	movt	r1, #0
    1c68:	mvn	r0, #102	; 0x66
    1c6c:	mov	r2, r5
    1c70:	bl	0 <coda_set_error>
    1c74:	mvn	r0, #0
    1c78:	sub	sp, fp, #28
    1c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c80:	movw	r1, #0
    1c84:	movt	r1, #0
    1c88:	b	1cd0 <coda_time_parts_to_string+0x5a8>
    1c8c:	movw	r1, #0
    1c90:	movt	r1, #0
    1c94:	b	1cd0 <coda_time_parts_to_string+0x5a8>
    1c98:	movw	r1, #0
    1c9c:	movt	r1, #0
    1ca0:	b	1cd0 <coda_time_parts_to_string+0x5a8>
    1ca4:	movw	r1, #0
    1ca8:	movt	r1, #0
    1cac:	b	1cd0 <coda_time_parts_to_string+0x5a8>
    1cb0:	movw	r1, #0
    1cb4:	movt	r1, #0
    1cb8:	b	1cd0 <coda_time_parts_to_string+0x5a8>
    1cbc:	movw	r1, #0
    1cc0:	movt	r1, #0
    1cc4:	b	1cd0 <coda_time_parts_to_string+0x5a8>
    1cc8:	movw	r1, #0
    1ccc:	movt	r1, #0
    1cd0:	mvn	r0, #103	; 0x67
    1cd4:	bl	0 <coda_set_error>
    1cd8:	b	1c74 <coda_time_parts_to_string+0x54c>

00001cdc <coda_time_string_to_parts>:
    1cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ce0:	add	fp, sp, #28
    1ce4:	sub	sp, sp, #36	; 0x24
    1ce8:	cmp	r0, #0
    1cec:	beq	1d70 <coda_time_string_to_parts+0x94>
    1cf0:	mov	r4, r1
    1cf4:	cmp	r1, #0
    1cf8:	beq	1d88 <coda_time_string_to_parts+0xac>
    1cfc:	mov	r7, r2
    1d00:	cmp	r2, #0
    1d04:	beq	1d58 <coda_time_string_to_parts+0x7c>
    1d08:	cmp	r3, #0
    1d0c:	mov	r6, r3
    1d10:	movne	r5, r0
    1d14:	ldrne	r0, [fp, #8]
    1d18:	strne	r0, [sp, #32]
    1d1c:	cmpne	r0, #0
    1d20:	beq	1d58 <coda_time_string_to_parts+0x7c>
    1d24:	ldr	r0, [fp, #12]
    1d28:	str	r0, [sp, #28]
    1d2c:	cmp	r0, #0
    1d30:	ldrne	sl, [fp, #16]
    1d34:	cmpne	sl, #0
    1d38:	beq	1d58 <coda_time_string_to_parts+0x7c>
    1d3c:	ldr	r0, [fp, #20]
    1d40:	str	r0, [sp, #24]
    1d44:	cmp	r0, #0
    1d48:	ldrne	r0, [fp, #24]
    1d4c:	strne	r0, [sp, #20]
    1d50:	cmpne	r0, #0
    1d54:	bne	1db0 <coda_time_string_to_parts+0xd4>
    1d58:	movw	r1, #0
    1d5c:	movw	r2, #0
    1d60:	mvn	r0, #99	; 0x63
    1d64:	movw	r3, #1479	; 0x5c7
    1d68:	movt	r1, #0
    1d6c:	b	1d9c <coda_time_string_to_parts+0xc0>
    1d70:	movw	r1, #0
    1d74:	movw	r2, #0
    1d78:	mvn	r0, #99	; 0x63
    1d7c:	movw	r3, #1468	; 0x5bc
    1d80:	movt	r1, #0
    1d84:	b	1d9c <coda_time_string_to_parts+0xc0>
    1d88:	movw	r1, #0
    1d8c:	movw	r2, #0
    1d90:	mvn	r0, #99	; 0x63
    1d94:	movw	r3, #1473	; 0x5c1
    1d98:	movt	r1, #0
    1d9c:	movt	r2, #0
    1da0:	bl	0 <coda_set_error>
    1da4:	mvn	r0, #0
    1da8:	sub	sp, fp, #28
    1dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1db0:	ldrb	r0, [r5]
    1db4:	cmp	r0, #0
    1db8:	beq	1df8 <coda_time_string_to_parts+0x11c>
    1dbc:	mov	r9, #0
    1dc0:	mov	r1, #0
    1dc4:	cmp	r1, #0
    1dc8:	uxtbeq	r2, r0
    1dcc:	cmpeq	r2, #124	; 0x7c
    1dd0:	beq	1e14 <coda_time_string_to_parts+0x138>
    1dd4:	uxtb	r0, r0
    1dd8:	clz	r2, r1
    1ddc:	cmp	r0, #39	; 0x27
    1de0:	add	r0, r5, r9
    1de4:	add	r9, r9, #1
    1de8:	ldrb	r0, [r0, #1]
    1dec:	lsreq	r1, r2, #5
    1df0:	cmp	r0, #0
    1df4:	bne	1dc4 <coda_time_string_to_parts+0xe8>
    1df8:	mov	r0, r5
    1dfc:	mov	r1, r4
    1e00:	mov	r2, r7
    1e04:	mov	r3, r6
    1e08:	sub	sp, fp, #28
    1e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e10:	b	1f2c <string_to_parts>
    1e14:	ldr	r0, [sp, #32]
    1e18:	mov	r1, r4
    1e1c:	mov	r2, r7
    1e20:	mov	r3, r6
    1e24:	str	r0, [sp]
    1e28:	ldr	r0, [sp, #28]
    1e2c:	stmib	sp, {r0, sl}
    1e30:	ldr	r0, [sp, #24]
    1e34:	str	r0, [sp, #12]
    1e38:	ldr	r0, [sp, #20]
    1e3c:	str	r0, [sp, #16]
    1e40:	mov	r0, r5
    1e44:	bl	1f2c <string_to_parts>
    1e48:	cmp	r0, #0
    1e4c:	moveq	r0, #0
    1e50:	subeq	sp, fp, #28
    1e54:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e58:	mov	r8, #0
    1e5c:	b	1ea4 <coda_time_string_to_parts+0x1c8>
    1e60:	ldr	r1, [sp, #32]
    1e64:	mov	r2, r7
    1e68:	mov	r3, r6
    1e6c:	str	r1, [sp]
    1e70:	ldr	r1, [sp, #28]
    1e74:	stmib	sp, {r1, sl}
    1e78:	ldr	r1, [sp, #24]
    1e7c:	str	r1, [sp, #12]
    1e80:	ldr	r1, [sp, #20]
    1e84:	str	r1, [sp, #16]
    1e88:	mov	r1, r4
    1e8c:	bl	1f2c <string_to_parts>
    1e90:	mov	r1, r0
    1e94:	mov	r0, #0
    1e98:	cmp	r1, #0
    1e9c:	subeq	sp, fp, #28
    1ea0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ea4:	ldrb	r0, [r5, r9]
    1ea8:	cmp	r0, #0
    1eac:	beq	1f14 <coda_time_string_to_parts+0x238>
    1eb0:	add	r1, r9, #1
    1eb4:	mov	r0, r5
    1eb8:	ldrb	r2, [r0, r1]!
    1ebc:	cmp	r2, #0
    1ec0:	beq	1f00 <coda_time_string_to_parts+0x224>
    1ec4:	add	r1, r9, #2
    1ec8:	cmp	r8, #0
    1ecc:	uxtbeq	r3, r2
    1ed0:	cmpeq	r3, #124	; 0x7c
    1ed4:	beq	1f08 <coda_time_string_to_parts+0x22c>
    1ed8:	uxtb	r2, r2
    1edc:	clz	r3, r8
    1ee0:	cmp	r2, #39	; 0x27
    1ee4:	ldrb	r2, [r5, r1]
    1ee8:	add	r1, r1, #1
    1eec:	lsreq	r8, r3, #5
    1ef0:	cmp	r2, #0
    1ef4:	bne	1ec8 <coda_time_string_to_parts+0x1ec>
    1ef8:	sub	r9, r1, #1
    1efc:	b	1e60 <coda_time_string_to_parts+0x184>
    1f00:	mov	r9, r1
    1f04:	b	1e60 <coda_time_string_to_parts+0x184>
    1f08:	sub	r9, r1, #1
    1f0c:	mov	r8, #0
    1f10:	b	1e60 <coda_time_string_to_parts+0x184>
    1f14:	movw	r1, #0
    1f18:	mvn	r0, #103	; 0x67
    1f1c:	mov	r2, r4
    1f20:	mov	r3, r5
    1f24:	movt	r1, #0
    1f28:	b	1da0 <coda_time_string_to_parts+0xc4>

00001f2c <string_to_parts>:
    1f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f30:	add	fp, sp, #28
    1f34:	sub	sp, sp, #4
    1f38:	vpush	{d8-d11}
    1f3c:	sub	sp, sp, #16
    1f40:	mov	lr, r2
    1f44:	mov	r4, r0
    1f48:	mov	r0, #2000	; 0x7d0
    1f4c:	ldr	r6, [fp, #8]
    1f50:	ldr	r5, [fp, #12]
    1f54:	ldr	r7, [fp, #16]
    1f58:	mov	r2, r1
    1f5c:	mov	r1, #1
    1f60:	mov	sl, #0
    1f64:	mov	ip, #0
    1f68:	str	r0, [lr]
    1f6c:	ldr	r0, [fp, #20]
    1f70:	str	r1, [r3]
    1f74:	str	r1, [r6]
    1f78:	str	sl, [r5]
    1f7c:	str	sl, [r7]
    1f80:	str	sl, [r0]
    1f84:	ldr	r0, [fp, #24]
    1f88:	str	sl, [r0]
    1f8c:	ldrb	r0, [r4]
    1f90:	cmp	r0, #0
    1f94:	beq	2828 <string_to_parts+0x8fc>
    1f98:	mov	r9, #0
    1f9c:	vdup.32	q4, r1
    1fa0:	vmov.i32	q5, #10	; 0x0000000a
    1fa4:	mov	ip, #0
    1fa8:	mov	r8, #0
    1fac:	str	r3, [sp, #8]
    1fb0:	mov	r1, r9
    1fb4:	mov	r9, r1
    1fb8:	clz	r1, r1
    1fbc:	uxtb	r0, r0
    1fc0:	lsr	r1, r1, #5
    1fc4:	cmp	r0, #124	; 0x7c
    1fc8:	bne	1fd4 <string_to_parts+0xa8>
    1fcc:	cmp	r1, #0
    1fd0:	bne	2808 <string_to_parts+0x8dc>
    1fd4:	cmp	r0, #39	; 0x27
    1fd8:	bne	200c <string_to_parts+0xe0>
    1fdc:	add	r0, r4, r8
    1fe0:	ldrb	r0, [r0, #1]
    1fe4:	cmp	r0, #0
    1fe8:	beq	2804 <string_to_parts+0x8d8>
    1fec:	add	r8, r8, #1
    1ff0:	cmp	r0, #39	; 0x27
    1ff4:	bne	1fb4 <string_to_parts+0x88>
    1ff8:	add	r0, r4, r8
    1ffc:	mov	r1, #39	; 0x27
    2000:	cmp	r9, #0
    2004:	bne	201c <string_to_parts+0xf0>
    2008:	b	2040 <string_to_parts+0x114>
    200c:	mov	r0, r4
    2010:	ldrb	r1, [r0, r8]!
    2014:	cmp	r9, #0
    2018:	beq	2040 <string_to_parts+0x114>
    201c:	ldrb	r0, [r2, ip]
    2020:	cmp	r1, r0
    2024:	bne	2884 <string_to_parts+0x958>
    2028:	add	ip, ip, #1
    202c:	add	r8, r8, #1
    2030:	ldrb	r0, [r4, r8]
    2034:	cmp	r0, #0
    2038:	bne	1fb0 <string_to_parts+0x84>
    203c:	b	2808 <string_to_parts+0x8dc>
    2040:	str	r2, [sp, #12]
    2044:	sub	r2, r1, #68	; 0x44
    2048:	str	ip, [sp, #4]
    204c:	cmp	r2, #53	; 0x35
    2050:	bhi	21f8 <string_to_parts+0x2cc>
    2054:	add	r3, pc, #0
    2058:	ldr	pc, [r3, r2, lsl #2]
    205c:	.word	0x00002134
    2060:	.word	0x000021f8
    2064:	.word	0x000021f8
    2068:	.word	0x000021f8
    206c:	.word	0x00002228
    2070:	.word	0x000021f8
    2074:	.word	0x000021f8
    2078:	.word	0x000021f8
    207c:	.word	0x000021f8
    2080:	.word	0x00002274
    2084:	.word	0x000021f8
    2088:	.word	0x000021f8
    208c:	.word	0x000021f8
    2090:	.word	0x000021f8
    2094:	.word	0x000021f8
    2098:	.word	0x000022e4
    209c:	.word	0x000021f8
    20a0:	.word	0x000021f8
    20a4:	.word	0x000021f8
    20a8:	.word	0x000021f8
    20ac:	.word	0x000021f8
    20b0:	.word	0x000021f8
    20b4:	.word	0x000021f8
    20b8:	.word	0x000021f8
    20bc:	.word	0x000021f8
    20c0:	.word	0x000021f8
    20c4:	.word	0x000021f8
    20c8:	.word	0x000021f8
    20cc:	.word	0x000021f8
    20d0:	.word	0x000021f8
    20d4:	.word	0x000021f8
    20d8:	.word	0x000021f8
    20dc:	.word	0x00002398
    20e0:	.word	0x000021f8
    20e4:	.word	0x000021f8
    20e8:	.word	0x000021f8
    20ec:	.word	0x000021f8
    20f0:	.word	0x000021f8
    20f4:	.word	0x000021f8
    20f8:	.word	0x000021f8
    20fc:	.word	0x000021f8
    2100:	.word	0x000023e4
    2104:	.word	0x000021f8
    2108:	.word	0x000021f8
    210c:	.word	0x000021f8
    2110:	.word	0x000021f8
    2114:	.word	0x000021f8
    2118:	.word	0x00002430
    211c:	.word	0x000021f8
    2120:	.word	0x000021f8
    2124:	.word	0x000021f8
    2128:	.word	0x000021f8
    212c:	.word	0x000021f8
    2130:	.word	0x0000247c
    2134:	add	r0, r4, r8
    2138:	ldrb	r1, [r0, #1]
    213c:	cmp	r1, #68	; 0x44
    2140:	ldrbeq	r0, [r0, #2]
    2144:	cmpeq	r0, #68	; 0x44
    2148:	bne	2860 <string_to_parts+0x934>
    214c:	add	r5, r8, #3
    2150:	ldr	r0, [sp, #4]
    2154:	ldr	r1, [sp, #12]
    2158:	ldrb	r2, [r4, r5]
    215c:	add	r0, r1, r0
    2160:	mov	r1, #3
    2164:	cmp	r2, #42	; 0x2a
    2168:	ldrbeq	r2, [r0]
    216c:	cmpeq	r2, #32
    2170:	beq	27c4 <string_to_parts+0x898>
    2174:	add	r2, r1, #1
    2178:	mov	r1, #0
    217c:	ldrb	r3, [r0]
    2180:	sub	r7, r3, #48	; 0x30
    2184:	uxtb	r7, r7
    2188:	cmp	r7, #9
    218c:	bhi	286c <string_to_parts+0x940>
    2190:	add	r1, r1, r1, lsl #2
    2194:	sub	r2, r2, #1
    2198:	add	r0, r0, #1
    219c:	add	r1, r3, r1, lsl #1
    21a0:	cmp	r2, #1
    21a4:	sub	r1, r1, #48	; 0x30
    21a8:	bgt	217c <string_to_parts+0x250>
    21ac:	ldr	r0, [lr]
    21b0:	ldr	r2, [sp, #8]
    21b4:	mov	r3, r6
    21b8:	str	lr, [sp]
    21bc:	mov	r7, r6
    21c0:	bl	1fc <coda_dayofyear_to_month_day>
    21c4:	cmp	r0, #0
    21c8:	bne	28d0 <string_to_parts+0x9a4>
    21cc:	ldrb	r0, [r4, r5]
    21d0:	ldr	ip, [sp, #4]
    21d4:	ldr	r2, [sp, #12]
    21d8:	ldr	lr, [sp]
    21dc:	mov	r6, r7
    21e0:	cmp	r0, #42	; 0x2a
    21e4:	mov	r0, #3
    21e8:	add	ip, ip, #3
    21ec:	movweq	r0, #4
    21f0:	add	r8, r0, r8
    21f4:	b	22d8 <string_to_parts+0x3ac>
    21f8:	sub	r0, r1, #65	; 0x41
    21fc:	uxtb	r0, r0
    2200:	cmp	r0, #26
    2204:	bcc	2860 <string_to_parts+0x934>
    2208:	cmp	r1, #42	; 0x2a
    220c:	subne	r0, r1, #97	; 0x61
    2210:	uxtbne	r0, r0
    2214:	cmpne	r0, #25
    2218:	bls	2860 <string_to_parts+0x934>
    221c:	ldr	ip, [sp, #4]
    2220:	ldr	r2, [sp, #12]
    2224:	b	201c <string_to_parts+0xf0>
    2228:	add	r0, r4, r8
    222c:	ldrb	r0, [r0, #1]
    2230:	cmp	r0, #72	; 0x48
    2234:	bne	2860 <string_to_parts+0x934>
    2238:	ldr	r0, [sp, #4]
    223c:	ldr	r1, [sp, #12]
    2240:	add	ip, r8, #2
    2244:	mov	r2, #2
    2248:	add	r3, r1, r0
    224c:	ldrb	r1, [r4, ip]
    2250:	cmp	r1, #42	; 0x2a
    2254:	bne	2520 <string_to_parts+0x5f4>
    2258:	mov	r1, r3
    225c:	ldrb	r2, [r1], #1
    2260:	cmp	r2, #32
    2264:	mov	r2, #2
    2268:	movne	r1, r3
    226c:	movweq	r2, #1
    2270:	b	2524 <string_to_parts+0x5f8>
    2274:	add	r0, r4, r8
    2278:	ldrb	r0, [r0, #1]
    227c:	cmp	r0, #77	; 0x4d
    2280:	bne	2860 <string_to_parts+0x934>
    2284:	add	r0, r8, #2
    2288:	ldrb	r1, [r4, r0]
    228c:	cmp	r1, #77	; 0x4d
    2290:	bne	258c <string_to_parts+0x660>
    2294:	ldr	r1, [sp, #4]
    2298:	ldr	r0, [sp, #12]
    229c:	mov	r5, r6
    22a0:	mov	r6, lr
    22a4:	add	r0, r0, r1
    22a8:	mov	r7, r1
    22ac:	bl	0 <coda_month_to_integer>
    22b0:	ldr	r1, [sp, #8]
    22b4:	cmn	r0, #1
    22b8:	str	r0, [r1]
    22bc:	beq	28b4 <string_to_parts+0x988>
    22c0:	ldr	r2, [sp, #12]
    22c4:	mov	ip, r7
    22c8:	mov	lr, r6
    22cc:	add	r8, r8, #3
    22d0:	mov	r6, r5
    22d4:	add	ip, r7, #3
    22d8:	ldr	r5, [fp, #12]
    22dc:	ldr	r7, [fp, #16]
    22e0:	b	2030 <string_to_parts+0x104>
    22e4:	mov	r0, #0
    22e8:	str	lr, [sp]
    22ec:	add	r8, r8, #1
    22f0:	mov	r2, r0
    22f4:	add	r0, r0, #1
    22f8:	ldrb	r1, [r4, r8]
    22fc:	cmp	r1, #83	; 0x53
    2300:	beq	22ec <string_to_parts+0x3c0>
    2304:	ldr	r3, [fp, #24]
    2308:	mov	r1, #0
    230c:	ldr	r7, [sp, #4]
    2310:	str	r1, [r3]
    2314:	mvn	r3, #1
    2318:	sub	r3, r3, r2
    231c:	cmn	r3, #7
    2320:	mvnls	r3, #6
    2324:	rsb	r3, r3, #0
    2328:	ldr	r6, [sp, #12]
    232c:	ldrb	r5, [r6, r7]
    2330:	sub	r6, r5, #48	; 0x30
    2334:	uxtb	r6, r6
    2338:	cmp	r6, #9
    233c:	bhi	2878 <string_to_parts+0x94c>
    2340:	add	r1, r1, r1, lsl #2
    2344:	sub	r3, r3, #1
    2348:	add	r7, r7, #1
    234c:	add	r1, r5, r1, lsl #1
    2350:	ldr	r5, [fp, #24]
    2354:	cmp	r3, #1
    2358:	sub	r1, r1, #48	; 0x30
    235c:	str	r1, [r5]
    2360:	bgt	2328 <string_to_parts+0x3fc>
    2364:	ldr	ip, [sp, #4]
    2368:	cmp	r0, #5
    236c:	add	ip, r0, ip
    2370:	bhi	26cc <string_to_parts+0x7a0>
    2374:	ldr	r5, [fp, #12]
    2378:	ldr	r7, [fp, #16]
    237c:	rsb	r2, r2, #5
    2380:	cmp	r2, #4
    2384:	bcs	2750 <string_to_parts+0x824>
    2388:	ldr	lr, [sp]
    238c:	ldr	r6, [fp, #8]
    2390:	ldr	r2, [sp, #12]
    2394:	b	27a4 <string_to_parts+0x878>
    2398:	add	r0, r4, r8
    239c:	ldrb	r0, [r0, #1]
    23a0:	cmp	r0, #100	; 0x64
    23a4:	bne	2860 <string_to_parts+0x934>
    23a8:	ldr	r0, [sp, #4]
    23ac:	ldr	r1, [sp, #12]
    23b0:	mov	r2, #2
    23b4:	add	r3, r1, r0
    23b8:	add	r0, r8, #2
    23bc:	ldrb	r1, [r4, r0]
    23c0:	cmp	r1, #42	; 0x2a
    23c4:	bne	25c0 <string_to_parts+0x694>
    23c8:	mov	r1, r3
    23cc:	ldrb	r2, [r1], #1
    23d0:	cmp	r2, #32
    23d4:	mov	r2, #2
    23d8:	movne	r1, r3
    23dc:	movweq	r2, #1
    23e0:	b	25c4 <string_to_parts+0x698>
    23e4:	add	r0, r4, r8
    23e8:	ldrb	r0, [r0, #1]
    23ec:	cmp	r0, #109	; 0x6d
    23f0:	bne	2860 <string_to_parts+0x934>
    23f4:	ldr	r0, [sp, #4]
    23f8:	ldr	r1, [sp, #12]
    23fc:	add	ip, r8, #2
    2400:	mov	r2, #2
    2404:	add	r3, r1, r0
    2408:	ldrb	r1, [r4, ip]
    240c:	cmp	r1, #42	; 0x2a
    2410:	bne	2608 <string_to_parts+0x6dc>
    2414:	mov	r1, r3
    2418:	ldrb	r2, [r1], #1
    241c:	cmp	r2, #32
    2420:	mov	r2, #2
    2424:	movne	r1, r3
    2428:	movweq	r2, #1
    242c:	b	260c <string_to_parts+0x6e0>
    2430:	add	r0, r4, r8
    2434:	ldrb	r0, [r0, #1]
    2438:	cmp	r0, #115	; 0x73
    243c:	bne	2860 <string_to_parts+0x934>
    2440:	ldr	r0, [sp, #4]
    2444:	ldr	r1, [sp, #12]
    2448:	mov	r2, #2
    244c:	add	r3, r1, r0
    2450:	add	r0, r8, #2
    2454:	ldrb	r1, [r4, r0]
    2458:	cmp	r1, #42	; 0x2a
    245c:	bne	267c <string_to_parts+0x750>
    2460:	mov	r1, r3
    2464:	ldrb	r2, [r1], #1
    2468:	cmp	r2, #32
    246c:	mov	r2, #2
    2470:	movne	r1, r3
    2474:	movweq	r2, #1
    2478:	b	2680 <string_to_parts+0x754>
    247c:	add	r2, r4, r8
    2480:	ldrb	r1, [r2, #1]
    2484:	cmp	r1, #121	; 0x79
    2488:	bne	2860 <string_to_parts+0x934>
    248c:	ldrb	r1, [r2, #2]
    2490:	cmp	r1, #121	; 0x79
    2494:	ldrbeq	r1, [r2, #3]
    2498:	cmpeq	r1, #121	; 0x79
    249c:	bne	2860 <string_to_parts+0x934>
    24a0:	ldr	r1, [sp, #4]
    24a4:	ldr	r3, [sp, #12]
    24a8:	add	r1, r3, r1
    24ac:	ldrb	r3, [r2, #4]
    24b0:	mov	r2, #4
    24b4:	cmp	r3, #42	; 0x2a
    24b8:	ldrbeq	r3, [r1]
    24bc:	cmpeq	r3, #32
    24c0:	beq	27dc <string_to_parts+0x8b0>
    24c4:	mov	r3, #0
    24c8:	add	r2, r2, #1
    24cc:	str	r3, [lr]
    24d0:	ldrb	r7, [r1]
    24d4:	sub	r5, r7, #48	; 0x30
    24d8:	uxtb	r5, r5
    24dc:	cmp	r5, #9
    24e0:	bhi	28c0 <string_to_parts+0x994>
    24e4:	add	r3, r3, r3, lsl #2
    24e8:	sub	r2, r2, #1
    24ec:	add	r1, r1, #1
    24f0:	add	r3, r7, r3, lsl #1
    24f4:	cmp	r2, #1
    24f8:	sub	r3, r3, #48	; 0x30
    24fc:	str	r3, [lr]
    2500:	bgt	24d0 <string_to_parts+0x5a4>
    2504:	ldrb	r0, [r0]
    2508:	ldr	ip, [sp, #4]
    250c:	cmp	r0, #42	; 0x2a
    2510:	mov	r0, #4
    2514:	add	ip, ip, #4
    2518:	movweq	r0, #5
    251c:	b	273c <string_to_parts+0x810>
    2520:	mov	r1, r3
    2524:	mov	r3, #0
    2528:	add	r2, r2, #1
    252c:	str	r3, [r5]
    2530:	ldrb	r7, [r1]
    2534:	mov	r0, r5
    2538:	sub	r5, r7, #48	; 0x30
    253c:	uxtb	r5, r5
    2540:	cmp	r5, #9
    2544:	bhi	2890 <string_to_parts+0x964>
    2548:	add	r3, r3, r3, lsl #2
    254c:	sub	r2, r2, #1
    2550:	mov	r5, r0
    2554:	add	r1, r1, #1
    2558:	add	r3, r7, r3, lsl #1
    255c:	cmp	r2, #1
    2560:	sub	r3, r3, #48	; 0x30
    2564:	str	r3, [r0]
    2568:	bhi	2530 <string_to_parts+0x604>
    256c:	ldrb	r0, [r4, ip]
    2570:	ldr	ip, [sp, #4]
    2574:	cmp	r0, #42	; 0x2a
    2578:	mov	r0, #2
    257c:	add	ip, ip, #2
    2580:	movweq	r0, #3
    2584:	add	r8, r0, r8
    2588:	b	2744 <string_to_parts+0x818>
    258c:	ldr	r2, [sp, #4]
    2590:	ldr	r3, [sp, #12]
    2594:	cmp	r1, #42	; 0x2a
    2598:	add	r3, r3, r2
    259c:	mov	r2, #2
    25a0:	bne	26d8 <string_to_parts+0x7ac>
    25a4:	mov	r1, r3
    25a8:	ldrb	r2, [r1], #1
    25ac:	cmp	r2, #32
    25b0:	mov	r2, #2
    25b4:	movne	r1, r3
    25b8:	movweq	r2, #1
    25bc:	b	26dc <string_to_parts+0x7b0>
    25c0:	mov	r1, r3
    25c4:	mov	r3, #0
    25c8:	add	r2, r2, #1
    25cc:	str	r3, [r6]
    25d0:	ldrb	r7, [r1]
    25d4:	sub	r5, r7, #48	; 0x30
    25d8:	uxtb	r5, r5
    25dc:	cmp	r5, #9
    25e0:	bhi	286c <string_to_parts+0x940>
    25e4:	add	r3, r3, r3, lsl #2
    25e8:	sub	r2, r2, #1
    25ec:	add	r1, r1, #1
    25f0:	add	r3, r7, r3, lsl #1
    25f4:	cmp	r2, #1
    25f8:	sub	r3, r3, #48	; 0x30
    25fc:	str	r3, [r6]
    2600:	bhi	25d0 <string_to_parts+0x6a4>
    2604:	b	2724 <string_to_parts+0x7f8>
    2608:	mov	r1, r3
    260c:	mov	r3, #0
    2610:	add	r2, r2, #1
    2614:	str	r3, [r7]
    2618:	mov	r0, r7
    261c:	ldrb	r7, [r1]
    2620:	sub	r5, r7, #48	; 0x30
    2624:	uxtb	r5, r5
    2628:	cmp	r5, #9
    262c:	bhi	289c <string_to_parts+0x970>
    2630:	add	r3, r3, r3, lsl #2
    2634:	sub	r2, r2, #1
    2638:	add	r1, r1, #1
    263c:	add	r3, r7, r3, lsl #1
    2640:	mov	r7, r0
    2644:	cmp	r2, #1
    2648:	sub	r3, r3, #48	; 0x30
    264c:	str	r3, [r0]
    2650:	bhi	2618 <string_to_parts+0x6ec>
    2654:	ldrb	r0, [r4, ip]
    2658:	ldr	ip, [sp, #4]
    265c:	ldr	r5, [fp, #12]
    2660:	ldr	r2, [sp, #12]
    2664:	cmp	r0, #42	; 0x2a
    2668:	mov	r0, #2
    266c:	add	ip, ip, #2
    2670:	movweq	r0, #3
    2674:	add	r8, r0, r8
    2678:	b	2030 <string_to_parts+0x104>
    267c:	mov	r1, r3
    2680:	ldr	r5, [fp, #20]
    2684:	mov	r3, #0
    2688:	add	r2, r2, #1
    268c:	str	r3, [r5]
    2690:	ldrb	r7, [r1]
    2694:	sub	r5, r7, #48	; 0x30
    2698:	uxtb	r5, r5
    269c:	cmp	r5, #9
    26a0:	bhi	28a8 <string_to_parts+0x97c>
    26a4:	ldr	r5, [fp, #20]
    26a8:	add	r3, r3, r3, lsl #2
    26ac:	sub	r2, r2, #1
    26b0:	add	r1, r1, #1
    26b4:	add	r3, r7, r3, lsl #1
    26b8:	cmp	r2, #1
    26bc:	sub	r3, r3, #48	; 0x30
    26c0:	str	r3, [r5]
    26c4:	bhi	2690 <string_to_parts+0x764>
    26c8:	b	2724 <string_to_parts+0x7f8>
    26cc:	ldr	lr, [sp]
    26d0:	ldr	r6, [fp, #8]
    26d4:	b	2740 <string_to_parts+0x814>
    26d8:	mov	r1, r3
    26dc:	ldr	r7, [sp, #8]
    26e0:	mov	r3, #0
    26e4:	add	r2, r2, #1
    26e8:	str	r3, [r7]
    26ec:	ldrb	r7, [r1]
    26f0:	sub	r5, r7, #48	; 0x30
    26f4:	uxtb	r5, r5
    26f8:	cmp	r5, #9
    26fc:	bhi	28b4 <string_to_parts+0x988>
    2700:	add	r3, r3, r3, lsl #2
    2704:	sub	r2, r2, #1
    2708:	add	r1, r1, #1
    270c:	add	r3, r7, r3, lsl #1
    2710:	ldr	r7, [sp, #8]
    2714:	cmp	r2, #1
    2718:	sub	r3, r3, #48	; 0x30
    271c:	str	r3, [r7]
    2720:	bhi	26ec <string_to_parts+0x7c0>
    2724:	ldrb	r0, [r4, r0]
    2728:	ldr	ip, [sp, #4]
    272c:	cmp	r0, #42	; 0x2a
    2730:	mov	r0, #2
    2734:	add	ip, ip, #2
    2738:	movweq	r0, #3
    273c:	add	r8, r0, r8
    2740:	ldr	r5, [fp, #12]
    2744:	ldr	r7, [fp, #16]
    2748:	ldr	r2, [sp, #12]
    274c:	b	2030 <string_to_parts+0x104>
    2750:	ldr	lr, [sp]
    2754:	ldr	r6, [fp, #8]
    2758:	vorr	d18, d8, d8
    275c:	bic	r3, r2, #3
    2760:	vorr	q8, q4, q4
    2764:	str	ip, [sp, #4]
    2768:	vmov.32	d18[0], r1
    276c:	add	r0, r0, r3
    2770:	mov	r1, r3
    2774:	vorr	d16, d18, d18
    2778:	subs	r1, r1, #4
    277c:	vmul.i32	q8, q8, q5
    2780:	bne	2778 <string_to_parts+0x84c>
    2784:	vext.8	q9, q8, q8, #8
    2788:	cmp	r2, r3
    278c:	ldr	ip, [sp, #4]
    2790:	ldr	r2, [sp, #12]
    2794:	vmul.i32	q0, q8, q9
    2798:	vmul.i32	q8, q0, d0[1]
    279c:	vmov.32	r1, d16[0]
    27a0:	beq	27b8 <string_to_parts+0x88c>
    27a4:	rsb	r0, r0, #6
    27a8:	add	r1, r1, r1, lsl #2
    27ac:	subs	r0, r0, #1
    27b0:	lsl	r1, r1, #1
    27b4:	bne	27a8 <string_to_parts+0x87c>
    27b8:	ldr	r0, [fp, #24]
    27bc:	str	r1, [r0]
    27c0:	b	2030 <string_to_parts+0x104>
    27c4:	ldrb	r1, [r0, #1]!
    27c8:	cmp	r1, #32
    27cc:	mov	r1, #2
    27d0:	movweq	r1, #1
    27d4:	addeq	r0, r0, #1
    27d8:	b	2174 <string_to_parts+0x248>
    27dc:	ldrb	r3, [r1, #1]!
    27e0:	mov	r2, #3
    27e4:	cmp	r3, #32
    27e8:	bne	24c4 <string_to_parts+0x598>
    27ec:	ldrb	r2, [r1, #1]!
    27f0:	cmp	r2, #32
    27f4:	mov	r2, #2
    27f8:	movweq	r2, #1
    27fc:	addeq	r1, r1, #1
    2800:	b	24c4 <string_to_parts+0x598>
    2804:	mov	r9, r1
    2808:	cmp	r9, #0
    280c:	beq	2828 <string_to_parts+0x8fc>
    2810:	movw	r1, #0
    2814:	movt	r1, #0
    2818:	mvn	r0, #102	; 0x66
    281c:	mov	r2, r4
    2820:	bl	0 <coda_set_error>
    2824:	b	2848 <string_to_parts+0x91c>
    2828:	ldrb	r0, [r2, ip]
    282c:	cmp	r0, #0
    2830:	beq	284c <string_to_parts+0x920>
    2834:	movw	r1, #0
    2838:	movt	r1, #0
    283c:	mvn	r0, #103	; 0x67
    2840:	mov	r3, r4
    2844:	bl	0 <coda_set_error>
    2848:	mvn	sl, #0
    284c:	mov	r0, sl
    2850:	sub	sp, fp, #64	; 0x40
    2854:	vpop	{d8-d11}
    2858:	add	sp, sp, #4
    285c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2860:	movw	r1, #0
    2864:	movt	r1, #0
    2868:	b	2818 <string_to_parts+0x8ec>
    286c:	movw	r1, #0
    2870:	movt	r1, #0
    2874:	b	28c8 <string_to_parts+0x99c>
    2878:	movw	r1, #0
    287c:	movt	r1, #0
    2880:	b	28c8 <string_to_parts+0x99c>
    2884:	movw	r1, #0
    2888:	movt	r1, #0
    288c:	b	283c <string_to_parts+0x910>
    2890:	movw	r1, #0
    2894:	movt	r1, #0
    2898:	b	28c8 <string_to_parts+0x99c>
    289c:	movw	r1, #0
    28a0:	movt	r1, #0
    28a4:	b	28c8 <string_to_parts+0x99c>
    28a8:	movw	r1, #0
    28ac:	movt	r1, #0
    28b0:	b	28c8 <string_to_parts+0x99c>
    28b4:	movw	r1, #0
    28b8:	movt	r1, #0
    28bc:	b	28c8 <string_to_parts+0x99c>
    28c0:	movw	r1, #0
    28c4:	movt	r1, #0
    28c8:	ldr	r2, [sp, #12]
    28cc:	b	283c <string_to_parts+0x910>
    28d0:	movw	r1, #0
    28d4:	movt	r1, #0
    28d8:	b	28c8 <string_to_parts+0x99c>

000028dc <coda_time_double_to_string>:
    28dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    28e0:	add	fp, sp, #24
    28e4:	sub	sp, sp, #48	; 0x30
    28e8:	mov	r8, r1
    28ec:	mov	r5, r0
    28f0:	add	r0, sp, #20
    28f4:	add	r1, sp, #24
    28f8:	add	r2, sp, #28
    28fc:	add	r3, sp, #32
    2900:	str	r2, [sp]
    2904:	str	r1, [sp, #4]
    2908:	str	r0, [sp, #8]
    290c:	sub	r0, fp, #28
    2910:	sub	r1, fp, #32
    2914:	add	r2, sp, #36	; 0x24
    2918:	bl	fc8 <coda_time_double_to_parts>
    291c:	mov	r1, r0
    2920:	mvn	r0, #0
    2924:	cmp	r1, #0
    2928:	beq	2934 <coda_time_double_to_string+0x58>
    292c:	sub	sp, fp, #24
    2930:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    2934:	ldr	r3, [sp, #32]
    2938:	ldr	r2, [sp, #36]	; 0x24
    293c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2940:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2944:	ldr	r4, [sp, #28]
    2948:	ldr	r6, [sp, #24]
    294c:	ldr	r7, [sp, #20]
    2950:	stm	sp, {r4, r6, r7}
    2954:	str	r5, [sp, #12]
    2958:	str	r8, [sp, #16]
    295c:	bl	1728 <coda_time_parts_to_string>
    2960:	sub	sp, fp, #24
    2964:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00002968 <coda_time_double_to_string_utc>:
    2968:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    296c:	add	fp, sp, #24
    2970:	sub	sp, sp, #48	; 0x30
    2974:	mov	r8, r1
    2978:	mov	r5, r0
    297c:	add	r0, sp, #20
    2980:	add	r1, sp, #24
    2984:	add	r2, sp, #28
    2988:	add	r3, sp, #32
    298c:	str	r2, [sp]
    2990:	str	r1, [sp, #4]
    2994:	str	r0, [sp, #8]
    2998:	sub	r0, fp, #28
    299c:	sub	r1, fp, #32
    29a0:	add	r2, sp, #36	; 0x24
    29a4:	bl	11a8 <coda_time_double_to_parts_utc>
    29a8:	mov	r1, r0
    29ac:	mvn	r0, #0
    29b0:	cmp	r1, #0
    29b4:	beq	29c0 <coda_time_double_to_string_utc+0x58>
    29b8:	sub	sp, fp, #24
    29bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    29c0:	ldr	r3, [sp, #32]
    29c4:	ldr	r2, [sp, #36]	; 0x24
    29c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    29cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    29d0:	ldr	r4, [sp, #28]
    29d4:	ldr	r6, [sp, #24]
    29d8:	ldr	r7, [sp, #20]
    29dc:	stm	sp, {r4, r6, r7}
    29e0:	str	r5, [sp, #12]
    29e4:	str	r8, [sp, #16]
    29e8:	bl	1728 <coda_time_parts_to_string>
    29ec:	sub	sp, fp, #24
    29f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000029f4 <coda_time_string_to_double>:
    29f4:	push	{r4, r5, r6, r7, fp, lr}
    29f8:	add	fp, sp, #16
    29fc:	sub	sp, sp, #48	; 0x30
    2a00:	mov	r7, r2
    2a04:	add	r2, sp, #20
    2a08:	add	r3, sp, #24
    2a0c:	add	r4, sp, #28
    2a10:	add	r5, sp, #32
    2a14:	sub	r6, fp, #28
    2a18:	str	r3, [sp, #12]
    2a1c:	str	r2, [sp, #16]
    2a20:	sub	r2, fp, #20
    2a24:	sub	r3, fp, #24
    2a28:	str	r6, [sp]
    2a2c:	str	r5, [sp, #4]
    2a30:	str	r4, [sp, #8]
    2a34:	bl	1cdc <coda_time_string_to_parts>
    2a38:	mov	r1, r0
    2a3c:	mvn	r0, #0
    2a40:	cmp	r1, #0
    2a44:	beq	2a50 <coda_time_string_to_double+0x5c>
    2a48:	sub	sp, fp, #16
    2a4c:	pop	{r4, r5, r6, r7, fp, pc}
    2a50:	add	r6, sp, #20
    2a54:	ldr	r3, [sp, #32]
    2a58:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2a5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2a60:	ldr	r0, [fp, #-20]	; 0xffffffec
    2a64:	ldm	r6, {r4, r5, r6}
    2a68:	str	r7, [sp, #12]
    2a6c:	str	r6, [sp]
    2a70:	str	r5, [sp, #4]
    2a74:	str	r4, [sp, #8]
    2a78:	bl	1440 <coda_time_parts_to_double>
    2a7c:	sub	sp, fp, #16
    2a80:	pop	{r4, r5, r6, r7, fp, pc}

00002a84 <coda_time_string_to_double_utc>:
    2a84:	push	{r4, r5, r6, r7, fp, lr}
    2a88:	add	fp, sp, #16
    2a8c:	sub	sp, sp, #48	; 0x30
    2a90:	mov	r7, r2
    2a94:	add	r2, sp, #20
    2a98:	add	r3, sp, #24
    2a9c:	add	r4, sp, #28
    2aa0:	add	r5, sp, #32
    2aa4:	sub	r6, fp, #28
    2aa8:	str	r3, [sp, #12]
    2aac:	str	r2, [sp, #16]
    2ab0:	sub	r2, fp, #20
    2ab4:	sub	r3, fp, #24
    2ab8:	str	r6, [sp]
    2abc:	str	r5, [sp, #4]
    2ac0:	str	r4, [sp, #8]
    2ac4:	bl	1cdc <coda_time_string_to_parts>
    2ac8:	mov	r1, r0
    2acc:	mvn	r0, #0
    2ad0:	cmp	r1, #0
    2ad4:	beq	2ae0 <coda_time_string_to_double_utc+0x5c>
    2ad8:	sub	sp, fp, #16
    2adc:	pop	{r4, r5, r6, r7, fp, pc}
    2ae0:	add	r6, sp, #20
    2ae4:	ldr	r3, [sp, #32]
    2ae8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2aec:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2af0:	ldr	r0, [fp, #-20]	; 0xffffffec
    2af4:	ldm	r6, {r4, r5, r6}
    2af8:	str	r7, [sp, #12]
    2afc:	str	r6, [sp]
    2b00:	str	r5, [sp, #4]
    2b04:	str	r4, [sp, #8]
    2b08:	bl	1570 <coda_time_parts_to_double_utc>
    2b0c:	sub	sp, fp, #16
    2b10:	pop	{r4, r5, r6, r7, fp, pc}

00002b14 <coda_datetime_to_double>:
    2b14:	b	1440 <coda_time_parts_to_double>

00002b18 <coda_double_to_datetime>:
    2b18:	b	fc8 <coda_time_double_to_parts>

00002b1c <coda_time_to_string>:
    2b1c:	push	{r4, r5, r6, r7, fp, lr}
    2b20:	add	fp, sp, #16
    2b24:	sub	sp, sp, #48	; 0x30
    2b28:	mov	r7, r0
    2b2c:	add	r0, sp, #20
    2b30:	add	r1, sp, #24
    2b34:	add	r2, sp, #28
    2b38:	add	r3, sp, #32
    2b3c:	str	r2, [sp]
    2b40:	str	r1, [sp, #4]
    2b44:	str	r0, [sp, #8]
    2b48:	sub	r0, fp, #20
    2b4c:	sub	r1, fp, #24
    2b50:	sub	r2, fp, #28
    2b54:	bl	fc8 <coda_time_double_to_parts>
    2b58:	mov	r1, r0
    2b5c:	mvn	r0, #0
    2b60:	cmp	r1, #0
    2b64:	beq	2b70 <coda_time_to_string+0x54>
    2b68:	sub	sp, fp, #16
    2b6c:	pop	{r4, r5, r6, r7, fp, pc}
    2b70:	ldr	r3, [sp, #32]
    2b74:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2b78:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2b7c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b80:	ldr	r4, [sp, #28]
    2b84:	ldr	r5, [sp, #24]
    2b88:	ldr	r6, [sp, #20]
    2b8c:	movw	ip, #0
    2b90:	movt	ip, #0
    2b94:	stm	sp, {r4, r5, r6, ip}
    2b98:	str	r7, [sp, #16]
    2b9c:	bl	1728 <coda_time_parts_to_string>
    2ba0:	sub	sp, fp, #16
    2ba4:	pop	{r4, r5, r6, r7, fp, pc}

00002ba8 <coda_string_to_time>:
    2ba8:	push	{r4, r5, r6, r7, fp, lr}
    2bac:	add	fp, sp, #16
    2bb0:	sub	sp, sp, #48	; 0x30
    2bb4:	mov	r7, r1
    2bb8:	mov	r1, r0
    2bbc:	add	r0, sp, #20
    2bc0:	add	r2, sp, #24
    2bc4:	add	r3, sp, #28
    2bc8:	add	r4, sp, #32
    2bcc:	sub	r5, fp, #28
    2bd0:	str	r0, [sp, #16]
    2bd4:	movw	r0, #0
    2bd8:	str	r3, [sp, #8]
    2bdc:	str	r2, [sp, #12]
    2be0:	sub	r2, fp, #20
    2be4:	sub	r3, fp, #24
    2be8:	str	r5, [sp]
    2bec:	str	r4, [sp, #4]
    2bf0:	movt	r0, #0
    2bf4:	bl	1cdc <coda_time_string_to_parts>
    2bf8:	mov	r1, r0
    2bfc:	mvn	r0, #0
    2c00:	cmp	r1, #0
    2c04:	beq	2c10 <coda_string_to_time+0x68>
    2c08:	sub	sp, fp, #16
    2c0c:	pop	{r4, r5, r6, r7, fp, pc}
    2c10:	ldr	r5, [sp, #28]
    2c14:	ldr	r3, [sp, #32]
    2c18:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2c1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2c20:	ldr	r0, [fp, #-20]	; 0xffffffec
    2c24:	ldr	r4, [sp, #24]
    2c28:	ldr	r6, [sp, #20]
    2c2c:	str	r5, [sp]
    2c30:	stmib	sp, {r4, r6, r7}
    2c34:	bl	1440 <coda_time_parts_to_double>
    2c38:	sub	sp, fp, #16
    2c3c:	pop	{r4, r5, r6, r7, fp, pc}

00002c40 <coda_utcdatetime_to_double>:
    2c40:	b	1570 <coda_time_parts_to_double_utc>

00002c44 <coda_double_to_utcdatetime>:
    2c44:	b	11a8 <coda_time_double_to_parts_utc>

00002c48 <coda_time_to_utcstring>:
    2c48:	push	{r4, r5, r6, r7, fp, lr}
    2c4c:	add	fp, sp, #16
    2c50:	sub	sp, sp, #48	; 0x30
    2c54:	mov	r7, r0
    2c58:	add	r0, sp, #20
    2c5c:	add	r1, sp, #24
    2c60:	add	r2, sp, #28
    2c64:	add	r3, sp, #32
    2c68:	str	r2, [sp]
    2c6c:	str	r1, [sp, #4]
    2c70:	str	r0, [sp, #8]
    2c74:	sub	r0, fp, #20
    2c78:	sub	r1, fp, #24
    2c7c:	sub	r2, fp, #28
    2c80:	bl	11a8 <coda_time_double_to_parts_utc>
    2c84:	mov	r1, r0
    2c88:	mvn	r0, #0
    2c8c:	cmp	r1, #0
    2c90:	beq	2c9c <coda_time_to_utcstring+0x54>
    2c94:	sub	sp, fp, #16
    2c98:	pop	{r4, r5, r6, r7, fp, pc}
    2c9c:	ldr	r3, [sp, #32]
    2ca0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2ca4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2ca8:	ldr	r0, [fp, #-20]	; 0xffffffec
    2cac:	ldr	r4, [sp, #28]
    2cb0:	ldr	r5, [sp, #24]
    2cb4:	ldr	r6, [sp, #20]
    2cb8:	movw	ip, #0
    2cbc:	movt	ip, #0
    2cc0:	stm	sp, {r4, r5, r6, ip}
    2cc4:	str	r7, [sp, #16]
    2cc8:	bl	1728 <coda_time_parts_to_string>
    2ccc:	sub	sp, fp, #16
    2cd0:	pop	{r4, r5, r6, r7, fp, pc}

00002cd4 <coda_utcstring_to_time>:
    2cd4:	push	{r4, r5, r6, r7, fp, lr}
    2cd8:	add	fp, sp, #16
    2cdc:	sub	sp, sp, #48	; 0x30
    2ce0:	mov	r7, r1
    2ce4:	mov	r1, r0
    2ce8:	add	r0, sp, #20
    2cec:	add	r2, sp, #24
    2cf0:	add	r3, sp, #28
    2cf4:	add	r4, sp, #32
    2cf8:	sub	r5, fp, #28
    2cfc:	str	r0, [sp, #16]
    2d00:	movw	r0, #0
    2d04:	str	r3, [sp, #8]
    2d08:	str	r2, [sp, #12]
    2d0c:	sub	r2, fp, #20
    2d10:	sub	r3, fp, #24
    2d14:	str	r5, [sp]
    2d18:	str	r4, [sp, #4]
    2d1c:	movt	r0, #0
    2d20:	bl	1cdc <coda_time_string_to_parts>
    2d24:	mov	r1, r0
    2d28:	mvn	r0, #0
    2d2c:	cmp	r1, #0
    2d30:	beq	2d3c <coda_utcstring_to_time+0x68>
    2d34:	sub	sp, fp, #16
    2d38:	pop	{r4, r5, r6, r7, fp, pc}
    2d3c:	ldr	r5, [sp, #28]
    2d40:	ldr	r3, [sp, #32]
    2d44:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2d48:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2d4c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2d50:	ldr	r4, [sp, #24]
    2d54:	ldr	r6, [sp, #20]
    2d58:	str	r5, [sp]
    2d5c:	stmib	sp, {r4, r6, r7}
    2d60:	bl	1570 <coda_time_parts_to_double_utc>
    2d64:	sub	sp, fp, #16
    2d68:	pop	{r4, r5, r6, r7, fp, pc}
