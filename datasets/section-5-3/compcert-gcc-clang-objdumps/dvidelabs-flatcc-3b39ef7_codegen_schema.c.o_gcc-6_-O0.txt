
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_schema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_uint16_cast_to_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	mov	r3, r0
      10:	strh	r3, [fp, #-6]
      14:	ldrh	r3, [fp, #-6]
      18:	mov	r0, r3
      1c:	add	sp, fp, #0
      20:	pop	{fp}		; (ldr fp, [sp], #4)
      24:	bx	lr

00000028 <flatbuffers_int32_cast_to_pe>:
      28:	push	{fp}		; (str fp, [sp, #-4]!)
      2c:	add	fp, sp, #0
      30:	sub	sp, sp, #12
      34:	str	r0, [fp, #-8]
      38:	ldr	r3, [fp, #-8]
      3c:	mov	r0, r3
      40:	add	sp, fp, #0
      44:	pop	{fp}		; (ldr fp, [sp], #4)
      48:	bx	lr

0000004c <flatbuffers_int64_cast_to_pe>:
      4c:	push	{fp}		; (str fp, [sp, #-4]!)
      50:	add	fp, sp, #0
      54:	sub	sp, sp, #12
      58:	strd	r0, [fp, #-12]
      5c:	ldrd	r2, [fp, #-12]
      60:	mov	r0, r2
      64:	mov	r1, r3
      68:	add	sp, fp, #0
      6c:	pop	{fp}		; (ldr fp, [sp], #4)
      70:	bx	lr

00000074 <flatbuffers_double_cast_to_pe>:
      74:	push	{fp}		; (str fp, [sp, #-4]!)
      78:	add	fp, sp, #0
      7c:	sub	sp, sp, #20
      80:	vstr	d0, [fp, #-20]	; 0xffffffec
      84:	ldrd	r2, [fp, #-20]	; 0xffffffec
      88:	strd	r2, [fp, #-12]
      8c:	ldrd	r2, [fp, #-12]
      90:	strd	r2, [fp, #-12]
      94:	ldrd	r2, [fp, #-12]
      98:	vmov	d7, r2, r3
      9c:	vmov.f64	d0, d7
      a0:	add	sp, fp, #0
      a4:	pop	{fp}		; (ldr fp, [sp], #4)
      a8:	bx	lr

000000ac <flatbuffers_bool_cast_to_pe>:
      ac:	push	{fp}		; (str fp, [sp, #-4]!)
      b0:	add	fp, sp, #0
      b4:	sub	sp, sp, #12
      b8:	mov	r3, r0
      bc:	strb	r3, [fp, #-5]
      c0:	ldrb	r3, [fp, #-5]
      c4:	mov	r0, r3
      c8:	add	sp, fp, #0
      cc:	pop	{fp}		; (ldr fp, [sp], #4)
      d0:	bx	lr

000000d4 <__flatbuffers_uoffset_cast_from_pe>:
      d4:	push	{fp}		; (str fp, [sp, #-4]!)
      d8:	add	fp, sp, #0
      dc:	sub	sp, sp, #12
      e0:	str	r0, [fp, #-8]
      e4:	ldr	r3, [fp, #-8]
      e8:	mov	r0, r3
      ec:	add	sp, fp, #0
      f0:	pop	{fp}		; (ldr fp, [sp], #4)
      f4:	bx	lr

000000f8 <__flatbuffers_uoffset_cast_to_pe>:
      f8:	push	{fp}		; (str fp, [sp, #-4]!)
      fc:	add	fp, sp, #0
     100:	sub	sp, sp, #12
     104:	str	r0, [fp, #-8]
     108:	ldr	r3, [fp, #-8]
     10c:	mov	r0, r3
     110:	add	sp, fp, #0
     114:	pop	{fp}		; (ldr fp, [sp], #4)
     118:	bx	lr

0000011c <__flatbuffers_uoffset_read_from_pe>:
     11c:	push	{fp, lr}
     120:	add	fp, sp, #4
     124:	sub	sp, sp, #8
     128:	str	r0, [fp, #-8]
     12c:	ldr	r3, [fp, #-8]
     130:	ldr	r3, [r3]
     134:	mov	r0, r3
     138:	bl	d4 <__flatbuffers_uoffset_cast_from_pe>
     13c:	mov	r3, r0
     140:	mov	r0, r3
     144:	sub	sp, fp, #4
     148:	pop	{fp, pc}

0000014c <__flatbuffers_uoffset_write_to_pe>:
     14c:	push	{fp, lr}
     150:	add	fp, sp, #4
     154:	sub	sp, sp, #8
     158:	str	r0, [fp, #-8]
     15c:	str	r1, [fp, #-12]
     160:	ldr	r0, [fp, #-12]
     164:	bl	f8 <__flatbuffers_uoffset_cast_to_pe>
     168:	mov	r2, r0
     16c:	ldr	r3, [fp, #-8]
     170:	str	r2, [r3]
     174:	nop			; (mov r0, r0)
     178:	sub	sp, fp, #4
     17c:	pop	{fp, pc}

00000180 <__flatbuffers_soffset_cast_from_pe>:
     180:	push	{fp}		; (str fp, [sp, #-4]!)
     184:	add	fp, sp, #0
     188:	sub	sp, sp, #12
     18c:	str	r0, [fp, #-8]
     190:	ldr	r3, [fp, #-8]
     194:	mov	r0, r3
     198:	add	sp, fp, #0
     19c:	pop	{fp}		; (ldr fp, [sp], #4)
     1a0:	bx	lr

000001a4 <__flatbuffers_soffset_read_from_pe>:
     1a4:	push	{fp, lr}
     1a8:	add	fp, sp, #4
     1ac:	sub	sp, sp, #8
     1b0:	str	r0, [fp, #-8]
     1b4:	ldr	r3, [fp, #-8]
     1b8:	ldr	r3, [r3]
     1bc:	mov	r0, r3
     1c0:	bl	180 <__flatbuffers_soffset_cast_from_pe>
     1c4:	mov	r3, r0
     1c8:	mov	r0, r3
     1cc:	sub	sp, fp, #4
     1d0:	pop	{fp, pc}

000001d4 <__flatbuffers_voffset_cast_from_pe>:
     1d4:	push	{fp}		; (str fp, [sp, #-4]!)
     1d8:	add	fp, sp, #0
     1dc:	sub	sp, sp, #12
     1e0:	mov	r3, r0
     1e4:	strh	r3, [fp, #-6]
     1e8:	ldrh	r3, [fp, #-6]
     1ec:	mov	r0, r3
     1f0:	add	sp, fp, #0
     1f4:	pop	{fp}		; (ldr fp, [sp], #4)
     1f8:	bx	lr

000001fc <__flatbuffers_voffset_read_from_pe>:
     1fc:	push	{fp, lr}
     200:	add	fp, sp, #4
     204:	sub	sp, sp, #8
     208:	str	r0, [fp, #-8]
     20c:	ldr	r3, [fp, #-8]
     210:	ldrh	r3, [r3]
     214:	mov	r0, r3
     218:	bl	1d4 <__flatbuffers_voffset_cast_from_pe>
     21c:	mov	r3, r0
     220:	mov	r0, r3
     224:	sub	sp, fp, #4
     228:	pop	{fp, pc}

0000022c <__flatbuffers_thash_cast_from_pe>:
     22c:	push	{fp}		; (str fp, [sp, #-4]!)
     230:	add	fp, sp, #0
     234:	sub	sp, sp, #12
     238:	str	r0, [fp, #-8]
     23c:	ldr	r3, [fp, #-8]
     240:	mov	r0, r3
     244:	add	sp, fp, #0
     248:	pop	{fp}		; (ldr fp, [sp], #4)
     24c:	bx	lr

00000250 <__flatbuffers_thash_cast_from_le>:
     250:	push	{fp}		; (str fp, [sp, #-4]!)
     254:	add	fp, sp, #0
     258:	sub	sp, sp, #12
     25c:	str	r0, [fp, #-8]
     260:	ldr	r3, [fp, #-8]
     264:	mov	r0, r3
     268:	add	sp, fp, #0
     26c:	pop	{fp}		; (ldr fp, [sp], #4)
     270:	bx	lr

00000274 <__flatbuffers_thash_read_from_pe>:
     274:	push	{fp, lr}
     278:	add	fp, sp, #4
     27c:	sub	sp, sp, #8
     280:	str	r0, [fp, #-8]
     284:	ldr	r3, [fp, #-8]
     288:	ldr	r3, [r3]
     28c:	mov	r0, r3
     290:	bl	22c <__flatbuffers_thash_cast_from_pe>
     294:	mov	r3, r0
     298:	mov	r0, r3
     29c:	sub	sp, fp, #4
     2a0:	pop	{fp, pc}

000002a4 <flatbuffers_vec_len>:
     2a4:	push	{fp, lr}
     2a8:	add	fp, sp, #4
     2ac:	sub	sp, sp, #8
     2b0:	str	r0, [fp, #-8]
     2b4:	ldr	r3, [fp, #-8]
     2b8:	cmp	r3, #0
     2bc:	beq	2d8 <flatbuffers_vec_len+0x34>
     2c0:	ldr	r3, [fp, #-8]
     2c4:	sub	r3, r3, #4
     2c8:	mov	r0, r3
     2cc:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     2d0:	mov	r3, r0
     2d4:	b	2dc <flatbuffers_vec_len+0x38>
     2d8:	mov	r3, #0
     2dc:	mov	r0, r3
     2e0:	sub	sp, fp, #4
     2e4:	pop	{fp, pc}

000002e8 <flatbuffers_string_len>:
     2e8:	push	{fp, lr}
     2ec:	add	fp, sp, #4
     2f0:	sub	sp, sp, #8
     2f4:	str	r0, [fp, #-8]
     2f8:	ldr	r3, [fp, #-8]
     2fc:	cmp	r3, #0
     300:	beq	31c <flatbuffers_string_len+0x34>
     304:	ldr	r3, [fp, #-8]
     308:	sub	r3, r3, #4
     30c:	mov	r0, r3
     310:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     314:	mov	r3, r0
     318:	b	320 <flatbuffers_string_len+0x38>
     31c:	mov	r3, #0
     320:	mov	r0, r3
     324:	sub	sp, fp, #4
     328:	pop	{fp, pc}

0000032c <__flatbuffers_string_n_cmp>:
     32c:	push	{fp, lr}
     330:	add	fp, sp, #4
     334:	sub	sp, sp, #24
     338:	str	r0, [fp, #-16]
     33c:	str	r1, [fp, #-20]	; 0xffffffec
     340:	str	r2, [fp, #-24]	; 0xffffffe8
     344:	ldr	r0, [fp, #-16]
     348:	bl	2e8 <flatbuffers_string_len>
     34c:	str	r0, [fp, #-8]
     350:	ldr	r2, [fp, #-24]	; 0xffffffe8
     354:	ldr	r3, [fp, #-8]
     358:	cmp	r2, r3
     35c:	movcc	r3, r2
     360:	movcs	r3, r3
     364:	mov	r2, r3
     368:	ldr	r1, [fp, #-20]	; 0xffffffec
     36c:	ldr	r0, [fp, #-16]
     370:	bl	0 <strncmp>
     374:	str	r0, [fp, #-12]
     378:	ldr	r3, [fp, #-12]
     37c:	cmp	r3, #0
     380:	bne	3b8 <__flatbuffers_string_n_cmp+0x8c>
     384:	ldr	r2, [fp, #-8]
     388:	ldr	r3, [fp, #-24]	; 0xffffffe8
     38c:	cmp	r2, r3
     390:	bcc	3b0 <__flatbuffers_string_n_cmp+0x84>
     394:	ldr	r2, [fp, #-8]
     398:	ldr	r3, [fp, #-24]	; 0xffffffe8
     39c:	cmp	r2, r3
     3a0:	movhi	r3, #1
     3a4:	movls	r3, #0
     3a8:	uxtb	r3, r3
     3ac:	b	3bc <__flatbuffers_string_n_cmp+0x90>
     3b0:	mvn	r3, #0
     3b4:	b	3bc <__flatbuffers_string_n_cmp+0x90>
     3b8:	ldr	r3, [fp, #-12]
     3bc:	mov	r0, r3
     3c0:	sub	sp, fp, #4
     3c4:	pop	{fp, pc}

000003c8 <flatbuffers_has_identifier>:
     3c8:	push	{fp, lr}
     3cc:	add	fp, sp, #4
     3d0:	sub	sp, sp, #16
     3d4:	str	r0, [fp, #-16]
     3d8:	str	r1, [fp, #-20]	; 0xffffffec
     3dc:	mov	r3, #0
     3e0:	str	r3, [fp, #-12]
     3e4:	ldr	r3, [fp, #-20]	; 0xffffffec
     3e8:	cmp	r3, #0
     3ec:	bne	3f8 <flatbuffers_has_identifier+0x30>
     3f0:	mov	r3, #1
     3f4:	b	45c <flatbuffers_has_identifier+0x94>
     3f8:	sub	r3, fp, #12
     3fc:	mov	r2, #4
     400:	ldr	r1, [fp, #-20]	; 0xffffffec
     404:	mov	r0, r3
     408:	bl	0 <strncpy>
     40c:	ldr	r3, [fp, #-12]
     410:	mov	r0, r3
     414:	bl	250 <__flatbuffers_thash_cast_from_le>
     418:	mov	r3, r0
     41c:	str	r3, [fp, #-12]
     420:	ldr	r3, [fp, #-16]
     424:	add	r3, r3, #4
     428:	mov	r0, r3
     42c:	bl	274 <__flatbuffers_thash_read_from_pe>
     430:	str	r0, [fp, #-8]
     434:	ldr	r3, [fp, #-12]
     438:	cmp	r3, #0
     43c:	beq	450 <flatbuffers_has_identifier+0x88>
     440:	ldr	r3, [fp, #-12]
     444:	ldr	r2, [fp, #-8]
     448:	cmp	r2, r3
     44c:	bne	458 <flatbuffers_has_identifier+0x90>
     450:	mov	r3, #1
     454:	b	45c <flatbuffers_has_identifier+0x94>
     458:	mov	r3, #0
     45c:	mov	r0, r3
     460:	sub	sp, fp, #4
     464:	pop	{fp, pc}

00000468 <reflection_BaseType_cast_to_pe>:
     468:	push	{fp}		; (str fp, [sp, #-4]!)
     46c:	add	fp, sp, #0
     470:	sub	sp, sp, #12
     474:	mov	r3, r0
     478:	strb	r3, [fp, #-5]
     47c:	ldrsb	r3, [fp, #-5]
     480:	mov	r0, r3
     484:	add	sp, fp, #0
     488:	pop	{fp}		; (ldr fp, [sp], #4)
     48c:	bx	lr

00000490 <reflection_Field_vec_len>:
     490:	push	{fp, lr}
     494:	add	fp, sp, #4
     498:	sub	sp, sp, #8
     49c:	str	r0, [fp, #-8]
     4a0:	ldr	r3, [fp, #-8]
     4a4:	cmp	r3, #0
     4a8:	beq	4c4 <reflection_Field_vec_len+0x34>
     4ac:	ldr	r3, [fp, #-8]
     4b0:	sub	r3, r3, #4
     4b4:	mov	r0, r3
     4b8:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     4bc:	mov	r3, r0
     4c0:	b	4c8 <reflection_Field_vec_len+0x38>
     4c4:	mov	r3, #0
     4c8:	mov	r0, r3
     4cc:	sub	sp, fp, #4
     4d0:	pop	{fp, pc}

000004d4 <reflection_Field_vec_at>:
     4d4:	push	{fp, lr}
     4d8:	add	fp, sp, #4
     4dc:	sub	sp, sp, #16
     4e0:	str	r0, [fp, #-16]
     4e4:	str	r1, [fp, #-20]	; 0xffffffec
     4e8:	ldr	r3, [fp, #-20]	; 0xffffffec
     4ec:	lsl	r3, r3, #2
     4f0:	ldr	r2, [fp, #-16]
     4f4:	add	r3, r2, r3
     4f8:	str	r3, [fp, #-8]
     4fc:	ldr	r0, [fp, #-16]
     500:	bl	2a4 <flatbuffers_vec_len>
     504:	mov	r2, r0
     508:	ldr	r3, [fp, #-20]	; 0xffffffec
     50c:	cmp	r2, r3
     510:	bhi	528 <reflection_Field_vec_at+0x54>
     514:	ldr	r3, [pc, #44]	; 548 <reflection_Field_vec_at+0x74>
     518:	mov	r2, #192	; 0xc0
     51c:	ldr	r1, [pc, #40]	; 54c <reflection_Field_vec_at+0x78>
     520:	ldr	r0, [pc, #40]	; 550 <reflection_Field_vec_at+0x7c>
     524:	bl	0 <__assert_fail>
     528:	ldr	r0, [fp, #-8]
     52c:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     530:	mov	r2, r0
     534:	ldr	r3, [fp, #-8]
     538:	add	r3, r3, r2
     53c:	mov	r0, r3
     540:	sub	sp, fp, #4
     544:	pop	{fp, pc}
     548:	.word	0x00000690
     54c:	.word	0x00000004
     550:	.word	0x0000006c

00000554 <reflection_Field_name>:
     554:	push	{fp, lr}
     558:	add	fp, sp, #4
     55c:	sub	sp, sp, #24
     560:	str	r0, [fp, #-24]	; 0xffffffe8
     564:	mov	r3, #0
     568:	strh	r3, [fp, #-6]
     56c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     570:	cmp	r3, #0
     574:	bne	58c <reflection_Field_name+0x38>
     578:	ldr	r3, [pc, #208]	; 650 <reflection_Field_name+0xfc>
     57c:	mov	r2, #195	; 0xc3
     580:	ldr	r1, [pc, #204]	; 654 <reflection_Field_name+0x100>
     584:	ldr	r0, [pc, #204]	; 658 <reflection_Field_name+0x104>
     588:	bl	0 <__assert_fail>
     58c:	mov	r3, #0
     590:	strh	r3, [fp, #-8]
     594:	ldr	r0, [fp, #-24]	; 0xffffffe8
     598:	bl	1a4 <__flatbuffers_soffset_read_from_pe>
     59c:	mov	r3, r0
     5a0:	rsb	r3, r3, #0
     5a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     5a8:	add	r3, r2, r3
     5ac:	str	r3, [fp, #-12]
     5b0:	ldr	r0, [fp, #-12]
     5b4:	bl	1fc <__flatbuffers_voffset_read_from_pe>
     5b8:	mov	r3, r0
     5bc:	mov	r2, r3
     5c0:	ldrh	r3, [fp, #-8]
     5c4:	add	r3, r3, #3
     5c8:	lsl	r3, r3, #1
     5cc:	cmp	r2, r3
     5d0:	bcc	5f8 <reflection_Field_name+0xa4>
     5d4:	ldrh	r3, [fp, #-8]
     5d8:	add	r3, r3, #2
     5dc:	lsl	r3, r3, #1
     5e0:	ldr	r2, [fp, #-12]
     5e4:	add	r3, r2, r3
     5e8:	mov	r0, r3
     5ec:	bl	1fc <__flatbuffers_voffset_read_from_pe>
     5f0:	mov	r3, r0
     5f4:	strh	r3, [fp, #-6]
     5f8:	ldrh	r3, [fp, #-6]
     5fc:	cmp	r3, #0
     600:	beq	630 <reflection_Field_name+0xdc>
     604:	ldrh	r3, [fp, #-6]
     608:	ldr	r2, [fp, #-24]	; 0xffffffe8
     60c:	add	r3, r2, r3
     610:	str	r3, [fp, #-16]
     614:	ldr	r0, [fp, #-16]
     618:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     61c:	mov	r3, r0
     620:	add	r3, r3, #4
     624:	ldr	r2, [fp, #-16]
     628:	add	r3, r2, r3
     62c:	b	644 <reflection_Field_name+0xf0>
     630:	ldr	r3, [pc, #24]	; 650 <reflection_Field_name+0xfc>
     634:	mov	r2, #195	; 0xc3
     638:	ldr	r1, [pc, #20]	; 654 <reflection_Field_name+0x100>
     63c:	ldr	r0, [pc, #24]	; 65c <reflection_Field_name+0x108>
     640:	bl	0 <__assert_fail>
     644:	mov	r0, r3
     648:	sub	sp, fp, #4
     64c:	pop	{fp, pc}
     650:	.word	0x000006a8
     654:	.word	0x00000004
     658:	.word	0x000000a4
     65c:	.word	0x000000cc

00000660 <__reflection_Field_sort_by_name__heap_sift_down>:
     660:	push	{fp, lr}
     664:	add	fp, sp, #4
     668:	sub	sp, sp, #48	; 0x30
     66c:	str	r0, [fp, #-40]	; 0xffffffd8
     670:	str	r1, [fp, #-44]	; 0xffffffd4
     674:	str	r2, [fp, #-48]	; 0xffffffd0
     678:	ldr	r3, [fp, #-44]	; 0xffffffd4
     67c:	str	r3, [fp, #-12]
     680:	b	818 <__reflection_Field_sort_by_name__heap_sift_down+0x1b8>
     684:	ldr	r3, [fp, #-12]
     688:	lsl	r3, r3, #1
     68c:	str	r3, [fp, #-8]
     690:	ldr	r2, [fp, #-8]
     694:	ldr	r3, [fp, #-48]	; 0xffffffd0
     698:	cmp	r2, r3
     69c:	bcs	714 <__reflection_Field_sort_by_name__heap_sift_down+0xb4>
     6a0:	ldr	r1, [fp, #-8]
     6a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     6a8:	bl	4d4 <reflection_Field_vec_at>
     6ac:	mov	r3, r0
     6b0:	mov	r0, r3
     6b4:	bl	554 <reflection_Field_name>
     6b8:	str	r0, [fp, #-16]
     6bc:	ldr	r3, [fp, #-8]
     6c0:	add	r3, r3, #1
     6c4:	mov	r1, r3
     6c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
     6cc:	bl	4d4 <reflection_Field_vec_at>
     6d0:	mov	r3, r0
     6d4:	mov	r0, r3
     6d8:	bl	554 <reflection_Field_name>
     6dc:	str	r0, [fp, #-20]	; 0xffffffec
     6e0:	ldr	r0, [fp, #-20]	; 0xffffffec
     6e4:	bl	2e8 <flatbuffers_string_len>
     6e8:	mov	r3, r0
     6ec:	mov	r2, r3
     6f0:	ldr	r1, [fp, #-20]	; 0xffffffec
     6f4:	ldr	r0, [fp, #-16]
     6f8:	bl	32c <__flatbuffers_string_n_cmp>
     6fc:	mov	r3, r0
     700:	cmp	r3, #0
     704:	bge	714 <__reflection_Field_sort_by_name__heap_sift_down+0xb4>
     708:	ldr	r3, [fp, #-8]
     70c:	add	r3, r3, #1
     710:	str	r3, [fp, #-8]
     714:	ldr	r1, [fp, #-12]
     718:	ldr	r0, [fp, #-40]	; 0xffffffd8
     71c:	bl	4d4 <reflection_Field_vec_at>
     720:	mov	r3, r0
     724:	mov	r0, r3
     728:	bl	554 <reflection_Field_name>
     72c:	str	r0, [fp, #-24]	; 0xffffffe8
     730:	ldr	r1, [fp, #-8]
     734:	ldr	r0, [fp, #-40]	; 0xffffffd8
     738:	bl	4d4 <reflection_Field_vec_at>
     73c:	mov	r3, r0
     740:	mov	r0, r3
     744:	bl	554 <reflection_Field_name>
     748:	str	r0, [fp, #-16]
     74c:	ldr	r0, [fp, #-16]
     750:	bl	2e8 <flatbuffers_string_len>
     754:	mov	r3, r0
     758:	mov	r2, r3
     75c:	ldr	r1, [fp, #-16]
     760:	ldr	r0, [fp, #-24]	; 0xffffffe8
     764:	bl	32c <__flatbuffers_string_n_cmp>
     768:	mov	r3, r0
     76c:	cmp	r3, #0
     770:	bge	830 <__reflection_Field_sort_by_name__heap_sift_down+0x1d0>
     774:	ldr	r2, [fp, #-12]
     778:	ldr	r3, [fp, #-8]
     77c:	sub	r3, r2, r3
     780:	lsl	r3, r3, #2
     784:	str	r3, [fp, #-28]	; 0xffffffe4
     788:	ldr	r3, [fp, #-8]
     78c:	lsl	r3, r3, #2
     790:	ldr	r2, [fp, #-40]	; 0xffffffd8
     794:	add	r3, r2, r3
     798:	mov	r0, r3
     79c:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     7a0:	mov	r2, r0
     7a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7a8:	sub	r3, r2, r3
     7ac:	str	r3, [fp, #-32]	; 0xffffffe0
     7b0:	ldr	r3, [fp, #-12]
     7b4:	lsl	r3, r3, #2
     7b8:	ldr	r2, [fp, #-40]	; 0xffffffd8
     7bc:	add	r3, r2, r3
     7c0:	mov	r0, r3
     7c4:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     7c8:	mov	r2, r0
     7cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7d0:	add	r3, r2, r3
     7d4:	str	r3, [fp, #-36]	; 0xffffffdc
     7d8:	ldr	r3, [fp, #-12]
     7dc:	lsl	r3, r3, #2
     7e0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     7e4:	add	r3, r2, r3
     7e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     7ec:	mov	r0, r3
     7f0:	bl	14c <__flatbuffers_uoffset_write_to_pe>
     7f4:	ldr	r3, [fp, #-8]
     7f8:	lsl	r3, r3, #2
     7fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
     800:	add	r3, r2, r3
     804:	ldr	r1, [fp, #-36]	; 0xffffffdc
     808:	mov	r0, r3
     80c:	bl	14c <__flatbuffers_uoffset_write_to_pe>
     810:	ldr	r3, [fp, #-8]
     814:	str	r3, [fp, #-12]
     818:	ldr	r3, [fp, #-12]
     81c:	lsl	r2, r3, #1
     820:	ldr	r3, [fp, #-48]	; 0xffffffd0
     824:	cmp	r2, r3
     828:	bls	684 <__reflection_Field_sort_by_name__heap_sift_down+0x24>
     82c:	b	834 <__reflection_Field_sort_by_name__heap_sift_down+0x1d4>
     830:	nop			; (mov r0, r0)
     834:	sub	sp, fp, #4
     838:	pop	{fp, pc}

0000083c <__reflection_Field_sort_by_name__heap_sort>:
     83c:	push	{fp, lr}
     840:	add	fp, sp, #4
     844:	sub	sp, sp, #32
     848:	str	r0, [fp, #-32]	; 0xffffffe0
     84c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     850:	bl	490 <reflection_Field_vec_len>
     854:	str	r0, [fp, #-16]
     858:	ldr	r3, [fp, #-16]
     85c:	cmp	r3, #0
     860:	beq	950 <__reflection_Field_sort_by_name__heap_sort+0x114>
     864:	ldr	r3, [fp, #-16]
     868:	sub	r3, r3, #1
     86c:	str	r3, [fp, #-12]
     870:	ldr	r3, [fp, #-16]
     874:	lsr	r3, r3, #1
     878:	str	r3, [fp, #-8]
     87c:	ldr	r2, [fp, #-12]
     880:	ldr	r1, [fp, #-8]
     884:	ldr	r0, [fp, #-32]	; 0xffffffe0
     888:	bl	660 <__reflection_Field_sort_by_name__heap_sift_down>
     88c:	ldr	r3, [fp, #-8]
     890:	sub	r2, r3, #1
     894:	str	r2, [fp, #-8]
     898:	cmp	r3, #0
     89c:	bne	87c <__reflection_Field_sort_by_name__heap_sort+0x40>
     8a0:	b	940 <__reflection_Field_sort_by_name__heap_sort+0x104>
     8a4:	ldr	r2, [fp, #-12]
     8a8:	mov	r3, r2
     8ac:	lsl	r3, r3, #30
     8b0:	sub	r3, r3, r2
     8b4:	lsl	r3, r3, #2
     8b8:	str	r3, [fp, #-20]	; 0xffffffec
     8bc:	ldr	r3, [fp, #-12]
     8c0:	lsl	r3, r3, #2
     8c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
     8c8:	add	r3, r2, r3
     8cc:	mov	r0, r3
     8d0:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     8d4:	mov	r2, r0
     8d8:	ldr	r3, [fp, #-20]	; 0xffffffec
     8dc:	sub	r3, r2, r3
     8e0:	str	r3, [fp, #-24]	; 0xffffffe8
     8e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8e8:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     8ec:	mov	r2, r0
     8f0:	ldr	r3, [fp, #-20]	; 0xffffffec
     8f4:	add	r3, r2, r3
     8f8:	str	r3, [fp, #-28]	; 0xffffffe4
     8fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
     900:	ldr	r0, [fp, #-32]	; 0xffffffe0
     904:	bl	14c <__flatbuffers_uoffset_write_to_pe>
     908:	ldr	r3, [fp, #-12]
     90c:	lsl	r3, r3, #2
     910:	ldr	r2, [fp, #-32]	; 0xffffffe0
     914:	add	r3, r2, r3
     918:	ldr	r1, [fp, #-28]	; 0xffffffe4
     91c:	mov	r0, r3
     920:	bl	14c <__flatbuffers_uoffset_write_to_pe>
     924:	ldr	r3, [fp, #-12]
     928:	sub	r3, r3, #1
     92c:	str	r3, [fp, #-12]
     930:	ldr	r2, [fp, #-12]
     934:	mov	r1, #0
     938:	ldr	r0, [fp, #-32]	; 0xffffffe0
     93c:	bl	660 <__reflection_Field_sort_by_name__heap_sift_down>
     940:	ldr	r3, [fp, #-12]
     944:	cmp	r3, #0
     948:	bne	8a4 <__reflection_Field_sort_by_name__heap_sort+0x68>
     94c:	b	954 <__reflection_Field_sort_by_name__heap_sort+0x118>
     950:	nop			; (mov r0, r0)
     954:	sub	sp, fp, #4
     958:	pop	{fp, pc}

0000095c <reflection_Field_vec_sort_by_name>:
     95c:	push	{fp, lr}
     960:	add	fp, sp, #4
     964:	sub	sp, sp, #8
     968:	str	r0, [fp, #-8]
     96c:	ldr	r0, [fp, #-8]
     970:	bl	83c <__reflection_Field_sort_by_name__heap_sort>
     974:	nop			; (mov r0, r0)
     978:	sub	sp, fp, #4
     97c:	pop	{fp, pc}

00000980 <reflection_Object_vec_len>:
     980:	push	{fp, lr}
     984:	add	fp, sp, #4
     988:	sub	sp, sp, #8
     98c:	str	r0, [fp, #-8]
     990:	ldr	r3, [fp, #-8]
     994:	cmp	r3, #0
     998:	beq	9b4 <reflection_Object_vec_len+0x34>
     99c:	ldr	r3, [fp, #-8]
     9a0:	sub	r3, r3, #4
     9a4:	mov	r0, r3
     9a8:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     9ac:	mov	r3, r0
     9b0:	b	9b8 <reflection_Object_vec_len+0x38>
     9b4:	mov	r3, #0
     9b8:	mov	r0, r3
     9bc:	sub	sp, fp, #4
     9c0:	pop	{fp, pc}

000009c4 <reflection_Object_vec_at>:
     9c4:	push	{fp, lr}
     9c8:	add	fp, sp, #4
     9cc:	sub	sp, sp, #16
     9d0:	str	r0, [fp, #-16]
     9d4:	str	r1, [fp, #-20]	; 0xffffffec
     9d8:	ldr	r3, [fp, #-20]	; 0xffffffec
     9dc:	lsl	r3, r3, #2
     9e0:	ldr	r2, [fp, #-16]
     9e4:	add	r3, r2, r3
     9e8:	str	r3, [fp, #-8]
     9ec:	ldr	r0, [fp, #-16]
     9f0:	bl	2a4 <flatbuffers_vec_len>
     9f4:	mov	r2, r0
     9f8:	ldr	r3, [fp, #-20]	; 0xffffffec
     9fc:	cmp	r2, r3
     a00:	bhi	a18 <reflection_Object_vec_at+0x54>
     a04:	ldr	r3, [pc, #44]	; a38 <reflection_Object_vec_at+0x74>
     a08:	mov	r2, #215	; 0xd7
     a0c:	ldr	r1, [pc, #40]	; a3c <reflection_Object_vec_at+0x78>
     a10:	ldr	r0, [pc, #40]	; a40 <reflection_Object_vec_at+0x7c>
     a14:	bl	0 <__assert_fail>
     a18:	ldr	r0, [fp, #-8]
     a1c:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     a20:	mov	r2, r0
     a24:	ldr	r3, [fp, #-8]
     a28:	add	r3, r3, r2
     a2c:	mov	r0, r3
     a30:	sub	sp, fp, #4
     a34:	pop	{fp, pc}
     a38:	.word	0x00000658
     a3c:	.word	0x00000004
     a40:	.word	0x0000006c

00000a44 <reflection_Object_fields>:
     a44:	push	{fp, lr}
     a48:	add	fp, sp, #4
     a4c:	sub	sp, sp, #24
     a50:	str	r0, [fp, #-24]	; 0xffffffe8
     a54:	mov	r3, #0
     a58:	strh	r3, [fp, #-6]
     a5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a60:	cmp	r3, #0
     a64:	bne	a7c <reflection_Object_fields+0x38>
     a68:	ldr	r3, [pc, #208]	; b40 <reflection_Object_fields+0xfc>
     a6c:	mov	r2, #224	; 0xe0
     a70:	ldr	r1, [pc, #204]	; b44 <reflection_Object_fields+0x100>
     a74:	ldr	r0, [pc, #204]	; b48 <reflection_Object_fields+0x104>
     a78:	bl	0 <__assert_fail>
     a7c:	mov	r3, #1
     a80:	strh	r3, [fp, #-8]
     a84:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a88:	bl	1a4 <__flatbuffers_soffset_read_from_pe>
     a8c:	mov	r3, r0
     a90:	rsb	r3, r3, #0
     a94:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a98:	add	r3, r2, r3
     a9c:	str	r3, [fp, #-12]
     aa0:	ldr	r0, [fp, #-12]
     aa4:	bl	1fc <__flatbuffers_voffset_read_from_pe>
     aa8:	mov	r3, r0
     aac:	mov	r2, r3
     ab0:	ldrh	r3, [fp, #-8]
     ab4:	add	r3, r3, #3
     ab8:	lsl	r3, r3, #1
     abc:	cmp	r2, r3
     ac0:	bcc	ae8 <reflection_Object_fields+0xa4>
     ac4:	ldrh	r3, [fp, #-8]
     ac8:	add	r3, r3, #2
     acc:	lsl	r3, r3, #1
     ad0:	ldr	r2, [fp, #-12]
     ad4:	add	r3, r2, r3
     ad8:	mov	r0, r3
     adc:	bl	1fc <__flatbuffers_voffset_read_from_pe>
     ae0:	mov	r3, r0
     ae4:	strh	r3, [fp, #-6]
     ae8:	ldrh	r3, [fp, #-6]
     aec:	cmp	r3, #0
     af0:	beq	b20 <reflection_Object_fields+0xdc>
     af4:	ldrh	r3, [fp, #-6]
     af8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     afc:	add	r3, r2, r3
     b00:	str	r3, [fp, #-16]
     b04:	ldr	r0, [fp, #-16]
     b08:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     b0c:	mov	r3, r0
     b10:	add	r3, r3, #4
     b14:	ldr	r2, [fp, #-16]
     b18:	add	r3, r2, r3
     b1c:	b	b34 <reflection_Object_fields+0xf0>
     b20:	ldr	r3, [pc, #24]	; b40 <reflection_Object_fields+0xfc>
     b24:	mov	r2, #224	; 0xe0
     b28:	ldr	r1, [pc, #20]	; b44 <reflection_Object_fields+0x100>
     b2c:	ldr	r0, [pc, #24]	; b4c <reflection_Object_fields+0x108>
     b30:	bl	0 <__assert_fail>
     b34:	mov	r0, r3
     b38:	sub	sp, fp, #4
     b3c:	pop	{fp, pc}
     b40:	.word	0x00000674
     b44:	.word	0x00000004
     b48:	.word	0x000000a4
     b4c:	.word	0x000000cc

00000b50 <reflection_Schema_as_root>:
     b50:	push	{fp, lr}
     b54:	add	fp, sp, #4
     b58:	sub	sp, sp, #16
     b5c:	str	r0, [fp, #-16]
     b60:	ldr	r3, [pc, #76]	; bb4 <reflection_Schema_as_root+0x64>
     b64:	str	r3, [fp, #-8]
     b68:	ldr	r3, [fp, #-16]
     b6c:	cmp	r3, #0
     b70:	beq	ba4 <reflection_Schema_as_root+0x54>
     b74:	ldr	r1, [fp, #-8]
     b78:	ldr	r0, [fp, #-16]
     b7c:	bl	3c8 <flatbuffers_has_identifier>
     b80:	mov	r3, r0
     b84:	cmp	r3, #0
     b88:	beq	ba4 <reflection_Schema_as_root+0x54>
     b8c:	ldr	r0, [fp, #-16]
     b90:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     b94:	mov	r2, r0
     b98:	ldr	r3, [fp, #-16]
     b9c:	add	r3, r3, r2
     ba0:	b	ba8 <reflection_Schema_as_root+0x58>
     ba4:	mov	r3, #0
     ba8:	mov	r0, r3
     bac:	sub	sp, fp, #4
     bb0:	pop	{fp, pc}
     bb4:	.word	0x000000f0

00000bb8 <reflection_Schema_objects>:
     bb8:	push	{fp, lr}
     bbc:	add	fp, sp, #4
     bc0:	sub	sp, sp, #24
     bc4:	str	r0, [fp, #-24]	; 0xffffffe8
     bc8:	mov	r3, #0
     bcc:	strh	r3, [fp, #-6]
     bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     bd4:	cmp	r3, #0
     bd8:	bne	bf0 <reflection_Schema_objects+0x38>
     bdc:	ldr	r3, [pc, #208]	; cb4 <reflection_Schema_objects+0xfc>
     be0:	mov	r2, #237	; 0xed
     be4:	ldr	r1, [pc, #204]	; cb8 <reflection_Schema_objects+0x100>
     be8:	ldr	r0, [pc, #204]	; cbc <reflection_Schema_objects+0x104>
     bec:	bl	0 <__assert_fail>
     bf0:	mov	r3, #0
     bf4:	strh	r3, [fp, #-8]
     bf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bfc:	bl	1a4 <__flatbuffers_soffset_read_from_pe>
     c00:	mov	r3, r0
     c04:	rsb	r3, r3, #0
     c08:	ldr	r2, [fp, #-24]	; 0xffffffe8
     c0c:	add	r3, r2, r3
     c10:	str	r3, [fp, #-12]
     c14:	ldr	r0, [fp, #-12]
     c18:	bl	1fc <__flatbuffers_voffset_read_from_pe>
     c1c:	mov	r3, r0
     c20:	mov	r2, r3
     c24:	ldrh	r3, [fp, #-8]
     c28:	add	r3, r3, #3
     c2c:	lsl	r3, r3, #1
     c30:	cmp	r2, r3
     c34:	bcc	c5c <reflection_Schema_objects+0xa4>
     c38:	ldrh	r3, [fp, #-8]
     c3c:	add	r3, r3, #2
     c40:	lsl	r3, r3, #1
     c44:	ldr	r2, [fp, #-12]
     c48:	add	r3, r2, r3
     c4c:	mov	r0, r3
     c50:	bl	1fc <__flatbuffers_voffset_read_from_pe>
     c54:	mov	r3, r0
     c58:	strh	r3, [fp, #-6]
     c5c:	ldrh	r3, [fp, #-6]
     c60:	cmp	r3, #0
     c64:	beq	c94 <reflection_Schema_objects+0xdc>
     c68:	ldrh	r3, [fp, #-6]
     c6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     c70:	add	r3, r2, r3
     c74:	str	r3, [fp, #-16]
     c78:	ldr	r0, [fp, #-16]
     c7c:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     c80:	mov	r3, r0
     c84:	add	r3, r3, #4
     c88:	ldr	r2, [fp, #-16]
     c8c:	add	r3, r2, r3
     c90:	b	ca8 <reflection_Schema_objects+0xf0>
     c94:	ldr	r3, [pc, #24]	; cb4 <reflection_Schema_objects+0xfc>
     c98:	mov	r2, #237	; 0xed
     c9c:	ldr	r1, [pc, #20]	; cb8 <reflection_Schema_objects+0x100>
     ca0:	ldr	r0, [pc, #24]	; cc0 <reflection_Schema_objects+0x108>
     ca4:	bl	0 <__assert_fail>
     ca8:	mov	r0, r3
     cac:	sub	sp, fp, #4
     cb0:	pop	{fp, pc}
     cb4:	.word	0x0000063c
     cb8:	.word	0x00000004
     cbc:	.word	0x000000a4
     cc0:	.word	0x000000cc

00000cc4 <flatbuffers_bool_assign_to_pe>:
     cc4:	push	{fp, lr}
     cc8:	add	fp, sp, #4
     ccc:	sub	sp, sp, #8
     cd0:	str	r0, [fp, #-8]
     cd4:	mov	r3, r1
     cd8:	strb	r3, [fp, #-9]
     cdc:	ldrb	r3, [fp, #-9]
     ce0:	mov	r0, r3
     ce4:	bl	ac <flatbuffers_bool_cast_to_pe>
     ce8:	mov	r3, r0
     cec:	mov	r2, r3
     cf0:	ldr	r3, [fp, #-8]
     cf4:	strb	r2, [r3]
     cf8:	ldr	r3, [fp, #-8]
     cfc:	mov	r0, r3
     d00:	sub	sp, fp, #4
     d04:	pop	{fp, pc}

00000d08 <flatbuffers_uint16_assign_to_pe>:
     d08:	push	{fp, lr}
     d0c:	add	fp, sp, #4
     d10:	sub	sp, sp, #8
     d14:	str	r0, [fp, #-8]
     d18:	mov	r3, r1
     d1c:	strh	r3, [fp, #-10]
     d20:	ldrh	r3, [fp, #-10]
     d24:	mov	r0, r3
     d28:	bl	0 <flatbuffers_uint16_cast_to_pe>
     d2c:	mov	r3, r0
     d30:	mov	r2, r3
     d34:	ldr	r3, [fp, #-8]
     d38:	strh	r2, [r3]
     d3c:	ldr	r3, [fp, #-8]
     d40:	mov	r0, r3
     d44:	sub	sp, fp, #4
     d48:	pop	{fp, pc}

00000d4c <flatbuffers_int32_assign_to_pe>:
     d4c:	push	{fp, lr}
     d50:	add	fp, sp, #4
     d54:	sub	sp, sp, #8
     d58:	str	r0, [fp, #-8]
     d5c:	str	r1, [fp, #-12]
     d60:	ldr	r0, [fp, #-12]
     d64:	bl	28 <flatbuffers_int32_cast_to_pe>
     d68:	mov	r2, r0
     d6c:	ldr	r3, [fp, #-8]
     d70:	str	r2, [r3]
     d74:	ldr	r3, [fp, #-8]
     d78:	mov	r0, r3
     d7c:	sub	sp, fp, #4
     d80:	pop	{fp, pc}

00000d84 <flatbuffers_int64_assign_to_pe>:
     d84:	push	{fp, lr}
     d88:	add	fp, sp, #4
     d8c:	sub	sp, sp, #16
     d90:	str	r0, [fp, #-8]
     d94:	strd	r2, [fp, #-20]	; 0xffffffec
     d98:	ldrd	r0, [fp, #-20]	; 0xffffffec
     d9c:	bl	4c <flatbuffers_int64_cast_to_pe>
     da0:	mov	r2, r0
     da4:	mov	r3, r1
     da8:	ldr	r1, [fp, #-8]
     dac:	strd	r2, [r1]
     db0:	ldr	r3, [fp, #-8]
     db4:	mov	r0, r3
     db8:	sub	sp, fp, #4
     dbc:	pop	{fp, pc}

00000dc0 <flatbuffers_double_assign_to_pe>:
     dc0:	push	{fp, lr}
     dc4:	add	fp, sp, #4
     dc8:	sub	sp, sp, #16
     dcc:	str	r0, [fp, #-8]
     dd0:	vstr	d0, [fp, #-20]	; 0xffffffec
     dd4:	vldr	d0, [fp, #-20]	; 0xffffffec
     dd8:	bl	74 <flatbuffers_double_cast_to_pe>
     ddc:	vmov.f64	d7, d0
     de0:	ldr	r3, [fp, #-8]
     de4:	vstr	d7, [r3]
     de8:	ldr	r3, [fp, #-8]
     dec:	mov	r0, r3
     df0:	sub	sp, fp, #4
     df4:	pop	{fp, pc}

00000df8 <flatbuffers_buffer_start>:
     df8:	push	{fp, lr}
     dfc:	add	fp, sp, #4
     e00:	sub	sp, sp, #8
     e04:	str	r0, [fp, #-8]
     e08:	str	r1, [fp, #-12]
     e0c:	mov	r3, #0
     e10:	mov	r2, #0
     e14:	ldr	r1, [fp, #-12]
     e18:	ldr	r0, [fp, #-8]
     e1c:	bl	0 <flatcc_builder_start_buffer>
     e20:	mov	r3, r0
     e24:	mov	r0, r3
     e28:	sub	sp, fp, #4
     e2c:	pop	{fp, pc}

00000e30 <flatbuffers_buffer_start_with_size>:
     e30:	push	{fp, lr}
     e34:	add	fp, sp, #4
     e38:	sub	sp, sp, #8
     e3c:	str	r0, [fp, #-8]
     e40:	str	r1, [fp, #-12]
     e44:	mov	r3, #2
     e48:	mov	r2, #0
     e4c:	ldr	r1, [fp, #-12]
     e50:	ldr	r0, [fp, #-8]
     e54:	bl	0 <flatcc_builder_start_buffer>
     e58:	mov	r3, r0
     e5c:	mov	r0, r3
     e60:	sub	sp, fp, #4
     e64:	pop	{fp, pc}

00000e68 <flatbuffers_buffer_end>:
     e68:	push	{fp, lr}
     e6c:	add	fp, sp, #4
     e70:	sub	sp, sp, #8
     e74:	str	r0, [fp, #-8]
     e78:	str	r1, [fp, #-12]
     e7c:	ldr	r1, [fp, #-12]
     e80:	ldr	r0, [fp, #-8]
     e84:	bl	0 <flatcc_builder_end_buffer>
     e88:	mov	r3, r0
     e8c:	mov	r0, r3
     e90:	sub	sp, fp, #4
     e94:	pop	{fp, pc}

00000e98 <reflection_BaseType_assign_to_pe>:
     e98:	push	{fp, lr}
     e9c:	add	fp, sp, #4
     ea0:	sub	sp, sp, #8
     ea4:	str	r0, [fp, #-8]
     ea8:	mov	r3, r1
     eac:	strb	r3, [fp, #-9]
     eb0:	ldrsb	r3, [fp, #-9]
     eb4:	mov	r0, r3
     eb8:	bl	468 <reflection_BaseType_cast_to_pe>
     ebc:	mov	r3, r0
     ec0:	mov	r2, r3
     ec4:	ldr	r3, [fp, #-8]
     ec8:	strb	r2, [r3]
     ecc:	ldr	r3, [fp, #-8]
     ed0:	mov	r0, r3
     ed4:	sub	sp, fp, #4
     ed8:	pop	{fp, pc}

00000edc <reflection_Type_start>:
     edc:	push	{fp, lr}
     ee0:	add	fp, sp, #4
     ee4:	sub	sp, sp, #8
     ee8:	str	r0, [fp, #-8]
     eec:	mov	r1, #3
     ef0:	ldr	r0, [fp, #-8]
     ef4:	bl	0 <flatcc_builder_start_table>
     ef8:	mov	r3, r0
     efc:	mov	r0, r3
     f00:	sub	sp, fp, #4
     f04:	pop	{fp, pc}

00000f08 <reflection_Type_end>:
     f08:	push	{fp, lr}
     f0c:	add	fp, sp, #4
     f10:	sub	sp, sp, #8
     f14:	str	r0, [fp, #-8]
     f18:	mov	r2, #0
     f1c:	ldr	r1, [pc, #60]	; f60 <reflection_Type_end+0x58>
     f20:	ldr	r0, [fp, #-8]
     f24:	bl	0 <flatcc_builder_check_required>
     f28:	mov	r3, r0
     f2c:	cmp	r3, #0
     f30:	bne	f48 <reflection_Type_end+0x40>
     f34:	ldr	r3, [pc, #40]	; f64 <reflection_Type_end+0x5c>
     f38:	mov	r2, #23
     f3c:	ldr	r1, [pc, #36]	; f68 <reflection_Type_end+0x60>
     f40:	ldr	r0, [pc, #36]	; f6c <reflection_Type_end+0x64>
     f44:	bl	0 <__assert_fail>
     f48:	ldr	r0, [fp, #-8]
     f4c:	bl	0 <flatcc_builder_end_table>
     f50:	mov	r3, r0
     f54:	mov	r0, r3
     f58:	sub	sp, fp, #4
     f5c:	pop	{fp, pc}
     f60:	.word	0x000000f8
     f64:	.word	0x000005b4
     f68:	.word	0x000000fc
     f6c:	.word	0x00000164

00000f70 <reflection_EnumVal_start>:
     f70:	push	{fp, lr}
     f74:	add	fp, sp, #4
     f78:	sub	sp, sp, #8
     f7c:	str	r0, [fp, #-8]
     f80:	mov	r1, #3
     f84:	ldr	r0, [fp, #-8]
     f88:	bl	0 <flatcc_builder_start_table>
     f8c:	mov	r3, r0
     f90:	mov	r0, r3
     f94:	sub	sp, fp, #4
     f98:	pop	{fp, pc}

00000f9c <reflection_EnumVal_end>:
     f9c:	push	{fp, lr}
     fa0:	add	fp, sp, #4
     fa4:	sub	sp, sp, #8
     fa8:	str	r0, [fp, #-8]
     fac:	mov	r2, #1
     fb0:	ldr	r1, [pc, #60]	; ff4 <reflection_EnumVal_end+0x58>
     fb4:	ldr	r0, [fp, #-8]
     fb8:	bl	0 <flatcc_builder_check_required>
     fbc:	mov	r3, r0
     fc0:	cmp	r3, #0
     fc4:	bne	fdc <reflection_EnumVal_end+0x40>
     fc8:	ldr	r3, [pc, #40]	; ff8 <reflection_EnumVal_end+0x5c>
     fcc:	mov	r2, #25
     fd0:	ldr	r1, [pc, #36]	; ffc <reflection_EnumVal_end+0x60>
     fd4:	ldr	r0, [pc, #36]	; 1000 <reflection_EnumVal_end+0x64>
     fd8:	bl	0 <__assert_fail>
     fdc:	ldr	r0, [fp, #-8]
     fe0:	bl	0 <flatcc_builder_end_table>
     fe4:	mov	r3, r0
     fe8:	mov	r0, r3
     fec:	sub	sp, fp, #4
     ff0:	pop	{fp, pc}
     ff4:	.word	0x000001f4
     ff8:	.word	0x000005f8
     ffc:	.word	0x000000fc
    1000:	.word	0x000001f8

00001004 <reflection_EnumVal_vec_push>:
    1004:	push	{fp, lr}
    1008:	add	fp, sp, #4
    100c:	sub	sp, sp, #8
    1010:	str	r0, [fp, #-8]
    1014:	str	r1, [fp, #-12]
    1018:	ldr	r3, [fp, #-12]
    101c:	cmp	r3, #0
    1020:	beq	1038 <reflection_EnumVal_vec_push+0x34>
    1024:	ldr	r1, [fp, #-12]
    1028:	ldr	r0, [fp, #-8]
    102c:	bl	0 <flatcc_builder_offset_vector_push>
    1030:	mov	r3, r0
    1034:	b	103c <reflection_EnumVal_vec_push+0x38>
    1038:	mov	r3, #0
    103c:	mov	r0, r3
    1040:	sub	sp, fp, #4
    1044:	pop	{fp, pc}

00001048 <reflection_Enum_start>:
    1048:	push	{fp, lr}
    104c:	add	fp, sp, #4
    1050:	sub	sp, sp, #8
    1054:	str	r0, [fp, #-8]
    1058:	mov	r1, #4
    105c:	ldr	r0, [fp, #-8]
    1060:	bl	0 <flatcc_builder_start_table>
    1064:	mov	r3, r0
    1068:	mov	r0, r3
    106c:	sub	sp, fp, #4
    1070:	pop	{fp, pc}

00001074 <reflection_Enum_end>:
    1074:	push	{fp, lr}
    1078:	add	fp, sp, #4
    107c:	sub	sp, sp, #8
    1080:	str	r0, [fp, #-8]
    1084:	mov	r2, #3
    1088:	ldr	r1, [pc, #60]	; 10cc <reflection_Enum_end+0x58>
    108c:	ldr	r0, [fp, #-8]
    1090:	bl	0 <flatcc_builder_check_required>
    1094:	mov	r3, r0
    1098:	cmp	r3, #0
    109c:	bne	10b4 <reflection_Enum_end+0x40>
    10a0:	ldr	r3, [pc, #40]	; 10d0 <reflection_Enum_end+0x5c>
    10a4:	mov	r2, #27
    10a8:	ldr	r1, [pc, #36]	; 10d4 <reflection_Enum_end+0x60>
    10ac:	ldr	r0, [pc, #36]	; 10d8 <reflection_Enum_end+0x64>
    10b0:	bl	0 <__assert_fail>
    10b4:	ldr	r0, [fp, #-8]
    10b8:	bl	0 <flatcc_builder_end_table>
    10bc:	mov	r3, r0
    10c0:	mov	r0, r3
    10c4:	sub	sp, fp, #4
    10c8:	pop	{fp, pc}
    10cc:	.word	0x00000290
    10d0:	.word	0x00000610
    10d4:	.word	0x000000fc
    10d8:	.word	0x00000298

000010dc <reflection_Enum_vec_push>:
    10dc:	push	{fp, lr}
    10e0:	add	fp, sp, #4
    10e4:	sub	sp, sp, #8
    10e8:	str	r0, [fp, #-8]
    10ec:	str	r1, [fp, #-12]
    10f0:	ldr	r3, [fp, #-12]
    10f4:	cmp	r3, #0
    10f8:	beq	1110 <reflection_Enum_vec_push+0x34>
    10fc:	ldr	r1, [fp, #-12]
    1100:	ldr	r0, [fp, #-8]
    1104:	bl	0 <flatcc_builder_offset_vector_push>
    1108:	mov	r3, r0
    110c:	b	1114 <reflection_Enum_vec_push+0x38>
    1110:	mov	r3, #0
    1114:	mov	r0, r3
    1118:	sub	sp, fp, #4
    111c:	pop	{fp, pc}

00001120 <reflection_Field_start>:
    1120:	push	{fp, lr}
    1124:	add	fp, sp, #4
    1128:	sub	sp, sp, #8
    112c:	str	r0, [fp, #-8]
    1130:	mov	r1, #9
    1134:	ldr	r0, [fp, #-8]
    1138:	bl	0 <flatcc_builder_start_table>
    113c:	mov	r3, r0
    1140:	mov	r0, r3
    1144:	sub	sp, fp, #4
    1148:	pop	{fp, pc}

0000114c <reflection_Field_end>:
    114c:	push	{fp, lr}
    1150:	add	fp, sp, #4
    1154:	sub	sp, sp, #8
    1158:	str	r0, [fp, #-8]
    115c:	mov	r2, #2
    1160:	ldr	r1, [pc, #60]	; 11a4 <reflection_Field_end+0x58>
    1164:	ldr	r0, [fp, #-8]
    1168:	bl	0 <flatcc_builder_check_required>
    116c:	mov	r3, r0
    1170:	cmp	r3, #0
    1174:	bne	118c <reflection_Field_end+0x40>
    1178:	ldr	r3, [pc, #40]	; 11a8 <reflection_Field_end+0x5c>
    117c:	mov	r2, #29
    1180:	ldr	r1, [pc, #36]	; 11ac <reflection_Field_end+0x60>
    1184:	ldr	r0, [pc, #36]	; 11b0 <reflection_Field_end+0x64>
    1188:	bl	0 <__assert_fail>
    118c:	ldr	r0, [fp, #-8]
    1190:	bl	0 <flatcc_builder_end_table>
    1194:	mov	r3, r0
    1198:	mov	r0, r3
    119c:	sub	sp, fp, #4
    11a0:	pop	{fp, pc}
    11a4:	.word	0x00000328
    11a8:	.word	0x000005c8
    11ac:	.word	0x000000fc
    11b0:	.word	0x00000330

000011b4 <reflection_Field_vec_push>:
    11b4:	push	{fp, lr}
    11b8:	add	fp, sp, #4
    11bc:	sub	sp, sp, #8
    11c0:	str	r0, [fp, #-8]
    11c4:	str	r1, [fp, #-12]
    11c8:	ldr	r3, [fp, #-12]
    11cc:	cmp	r3, #0
    11d0:	beq	11e8 <reflection_Field_vec_push+0x34>
    11d4:	ldr	r1, [fp, #-12]
    11d8:	ldr	r0, [fp, #-8]
    11dc:	bl	0 <flatcc_builder_offset_vector_push>
    11e0:	mov	r3, r0
    11e4:	b	11ec <reflection_Field_vec_push+0x38>
    11e8:	mov	r3, #0
    11ec:	mov	r0, r3
    11f0:	sub	sp, fp, #4
    11f4:	pop	{fp, pc}

000011f8 <reflection_Object_start>:
    11f8:	push	{fp, lr}
    11fc:	add	fp, sp, #4
    1200:	sub	sp, sp, #8
    1204:	str	r0, [fp, #-8]
    1208:	mov	r1, #5
    120c:	ldr	r0, [fp, #-8]
    1210:	bl	0 <flatcc_builder_start_table>
    1214:	mov	r3, r0
    1218:	mov	r0, r3
    121c:	sub	sp, fp, #4
    1220:	pop	{fp, pc}

00001224 <reflection_Object_end>:
    1224:	push	{fp, lr}
    1228:	add	fp, sp, #4
    122c:	sub	sp, sp, #8
    1230:	str	r0, [fp, #-8]
    1234:	mov	r2, #2
    1238:	ldr	r1, [pc, #60]	; 127c <reflection_Object_end+0x58>
    123c:	ldr	r0, [fp, #-8]
    1240:	bl	0 <flatcc_builder_check_required>
    1244:	mov	r3, r0
    1248:	cmp	r3, #0
    124c:	bne	1264 <reflection_Object_end+0x40>
    1250:	ldr	r3, [pc, #40]	; 1280 <reflection_Object_end+0x5c>
    1254:	mov	r2, #31
    1258:	ldr	r1, [pc, #36]	; 1284 <reflection_Object_end+0x60>
    125c:	ldr	r0, [pc, #36]	; 1288 <reflection_Object_end+0x64>
    1260:	bl	0 <__assert_fail>
    1264:	ldr	r0, [fp, #-8]
    1268:	bl	0 <flatcc_builder_end_table>
    126c:	mov	r3, r0
    1270:	mov	r0, r3
    1274:	sub	sp, fp, #4
    1278:	pop	{fp, pc}
    127c:	.word	0x000003c0
    1280:	.word	0x000005e0
    1284:	.word	0x000000fc
    1288:	.word	0x000003c8

0000128c <reflection_Schema_start>:
    128c:	push	{fp, lr}
    1290:	add	fp, sp, #4
    1294:	sub	sp, sp, #8
    1298:	str	r0, [fp, #-8]
    129c:	mov	r1, #5
    12a0:	ldr	r0, [fp, #-8]
    12a4:	bl	0 <flatcc_builder_start_table>
    12a8:	mov	r3, r0
    12ac:	mov	r0, r3
    12b0:	sub	sp, fp, #4
    12b4:	pop	{fp, pc}

000012b8 <reflection_Schema_end>:
    12b8:	push	{fp, lr}
    12bc:	add	fp, sp, #4
    12c0:	sub	sp, sp, #8
    12c4:	str	r0, [fp, #-8]
    12c8:	mov	r2, #2
    12cc:	ldr	r1, [pc, #60]	; 1310 <reflection_Schema_end+0x58>
    12d0:	ldr	r0, [fp, #-8]
    12d4:	bl	0 <flatcc_builder_check_required>
    12d8:	mov	r3, r0
    12dc:	cmp	r3, #0
    12e0:	bne	12f8 <reflection_Schema_end+0x40>
    12e4:	ldr	r3, [pc, #40]	; 1314 <reflection_Schema_end+0x5c>
    12e8:	mov	r2, #33	; 0x21
    12ec:	ldr	r1, [pc, #36]	; 1318 <reflection_Schema_end+0x60>
    12f0:	ldr	r0, [pc, #36]	; 131c <reflection_Schema_end+0x64>
    12f4:	bl	0 <__assert_fail>
    12f8:	ldr	r0, [fp, #-8]
    12fc:	bl	0 <flatcc_builder_end_table>
    1300:	mov	r3, r0
    1304:	mov	r0, r3
    1308:	sub	sp, fp, #4
    130c:	pop	{fp, pc}
    1310:	.word	0x0000045c
    1314:	.word	0x00000624
    1318:	.word	0x000000fc
    131c:	.word	0x00000464

00001320 <reflection_Type_base_type_add>:
    1320:	push	{fp, lr}
    1324:	add	fp, sp, #4
    1328:	sub	sp, sp, #16
    132c:	str	r0, [fp, #-16]
    1330:	mov	r3, r1
    1334:	strb	r3, [fp, #-17]	; 0xffffffef
    1338:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    133c:	cmp	r3, #0
    1340:	bne	134c <reflection_Type_base_type_add+0x2c>
    1344:	mov	r3, #0
    1348:	b	138c <reflection_Type_base_type_add+0x6c>
    134c:	mov	r3, #1
    1350:	mov	r2, #1
    1354:	mov	r1, #0
    1358:	ldr	r0, [fp, #-16]
    135c:	bl	0 <flatcc_builder_table_add>
    1360:	str	r0, [fp, #-8]
    1364:	ldr	r3, [fp, #-8]
    1368:	cmp	r3, #0
    136c:	bne	1378 <reflection_Type_base_type_add+0x58>
    1370:	mvn	r3, #0
    1374:	b	138c <reflection_Type_base_type_add+0x6c>
    1378:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    137c:	mov	r1, r3
    1380:	ldr	r0, [fp, #-8]
    1384:	bl	e98 <reflection_BaseType_assign_to_pe>
    1388:	mov	r3, #0
    138c:	mov	r0, r3
    1390:	sub	sp, fp, #4
    1394:	pop	{fp, pc}

00001398 <reflection_Type_element_add>:
    1398:	push	{fp, lr}
    139c:	add	fp, sp, #4
    13a0:	sub	sp, sp, #16
    13a4:	str	r0, [fp, #-16]
    13a8:	mov	r3, r1
    13ac:	strb	r3, [fp, #-17]	; 0xffffffef
    13b0:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    13b4:	cmp	r3, #0
    13b8:	bne	13c4 <reflection_Type_element_add+0x2c>
    13bc:	mov	r3, #0
    13c0:	b	1404 <reflection_Type_element_add+0x6c>
    13c4:	mov	r3, #1
    13c8:	mov	r2, #1
    13cc:	mov	r1, #1
    13d0:	ldr	r0, [fp, #-16]
    13d4:	bl	0 <flatcc_builder_table_add>
    13d8:	str	r0, [fp, #-8]
    13dc:	ldr	r3, [fp, #-8]
    13e0:	cmp	r3, #0
    13e4:	bne	13f0 <reflection_Type_element_add+0x58>
    13e8:	mvn	r3, #0
    13ec:	b	1404 <reflection_Type_element_add+0x6c>
    13f0:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    13f4:	mov	r1, r3
    13f8:	ldr	r0, [fp, #-8]
    13fc:	bl	e98 <reflection_BaseType_assign_to_pe>
    1400:	mov	r3, #0
    1404:	mov	r0, r3
    1408:	sub	sp, fp, #4
    140c:	pop	{fp, pc}

00001410 <reflection_Type_index_add>:
    1410:	push	{fp, lr}
    1414:	add	fp, sp, #4
    1418:	sub	sp, sp, #16
    141c:	str	r0, [fp, #-16]
    1420:	str	r1, [fp, #-20]	; 0xffffffec
    1424:	ldr	r3, [fp, #-20]	; 0xffffffec
    1428:	cmn	r3, #1
    142c:	bne	1438 <reflection_Type_index_add+0x28>
    1430:	mov	r3, #0
    1434:	b	1474 <reflection_Type_index_add+0x64>
    1438:	mov	r3, #4
    143c:	mov	r2, #4
    1440:	mov	r1, #2
    1444:	ldr	r0, [fp, #-16]
    1448:	bl	0 <flatcc_builder_table_add>
    144c:	str	r0, [fp, #-8]
    1450:	ldr	r3, [fp, #-8]
    1454:	cmp	r3, #0
    1458:	bne	1464 <reflection_Type_index_add+0x54>
    145c:	mvn	r3, #0
    1460:	b	1474 <reflection_Type_index_add+0x64>
    1464:	ldr	r1, [fp, #-20]	; 0xffffffec
    1468:	ldr	r0, [fp, #-8]
    146c:	bl	d4c <flatbuffers_int32_assign_to_pe>
    1470:	mov	r3, #0
    1474:	mov	r0, r3
    1478:	sub	sp, fp, #4
    147c:	pop	{fp, pc}

00001480 <reflection_Type_create>:
    1480:	push	{fp, lr}
    1484:	add	fp, sp, #4
    1488:	sub	sp, sp, #16
    148c:	str	r0, [fp, #-8]
    1490:	str	r3, [fp, #-16]
    1494:	mov	r3, r1
    1498:	strb	r3, [fp, #-9]
    149c:	mov	r3, r2
    14a0:	strb	r3, [fp, #-10]
    14a4:	ldr	r0, [fp, #-8]
    14a8:	bl	edc <reflection_Type_start>
    14ac:	mov	r3, r0
    14b0:	cmp	r3, #0
    14b4:	bne	1508 <reflection_Type_create+0x88>
    14b8:	ldr	r1, [fp, #-16]
    14bc:	ldr	r0, [fp, #-8]
    14c0:	bl	1410 <reflection_Type_index_add>
    14c4:	mov	r3, r0
    14c8:	cmp	r3, #0
    14cc:	bne	1508 <reflection_Type_create+0x88>
    14d0:	ldrsb	r3, [fp, #-9]
    14d4:	mov	r1, r3
    14d8:	ldr	r0, [fp, #-8]
    14dc:	bl	1320 <reflection_Type_base_type_add>
    14e0:	mov	r3, r0
    14e4:	cmp	r3, #0
    14e8:	bne	1508 <reflection_Type_create+0x88>
    14ec:	ldrsb	r3, [fp, #-10]
    14f0:	mov	r1, r3
    14f4:	ldr	r0, [fp, #-8]
    14f8:	bl	1398 <reflection_Type_element_add>
    14fc:	mov	r3, r0
    1500:	cmp	r3, #0
    1504:	beq	1510 <reflection_Type_create+0x90>
    1508:	mov	r3, #0
    150c:	b	151c <reflection_Type_create+0x9c>
    1510:	ldr	r0, [fp, #-8]
    1514:	bl	f08 <reflection_Type_end>
    1518:	mov	r3, r0
    151c:	mov	r0, r3
    1520:	sub	sp, fp, #4
    1524:	pop	{fp, pc}

00001528 <reflection_EnumVal_name_add>:
    1528:	push	{fp, lr}
    152c:	add	fp, sp, #4
    1530:	sub	sp, sp, #16
    1534:	str	r0, [fp, #-16]
    1538:	str	r1, [fp, #-20]	; 0xffffffec
    153c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1540:	cmp	r3, #0
    1544:	beq	1578 <reflection_EnumVal_name_add+0x50>
    1548:	mov	r1, #0
    154c:	ldr	r0, [fp, #-16]
    1550:	bl	0 <flatcc_builder_table_add_offset>
    1554:	str	r0, [fp, #-8]
    1558:	ldr	r3, [fp, #-8]
    155c:	cmp	r3, #0
    1560:	beq	1578 <reflection_EnumVal_name_add+0x50>
    1564:	ldr	r3, [fp, #-8]
    1568:	ldr	r2, [fp, #-20]	; 0xffffffec
    156c:	str	r2, [r3]
    1570:	mov	r3, #0
    1574:	b	157c <reflection_EnumVal_name_add+0x54>
    1578:	mvn	r3, #0
    157c:	mov	r0, r3
    1580:	sub	sp, fp, #4
    1584:	pop	{fp, pc}

00001588 <reflection_EnumVal_name_create>:
    1588:	push	{fp, lr}
    158c:	add	fp, sp, #4
    1590:	sub	sp, sp, #16
    1594:	str	r0, [fp, #-8]
    1598:	str	r1, [fp, #-12]
    159c:	str	r2, [fp, #-16]
    15a0:	ldr	r2, [fp, #-16]
    15a4:	ldr	r1, [fp, #-12]
    15a8:	ldr	r0, [fp, #-8]
    15ac:	bl	0 <flatcc_builder_create_string>
    15b0:	mov	r3, r0
    15b4:	mov	r1, r3
    15b8:	ldr	r0, [fp, #-8]
    15bc:	bl	1528 <reflection_EnumVal_name_add>
    15c0:	mov	r3, r0
    15c4:	mov	r0, r3
    15c8:	sub	sp, fp, #4
    15cc:	pop	{fp, pc}

000015d0 <reflection_EnumVal_value_add>:
    15d0:	push	{fp, lr}
    15d4:	add	fp, sp, #4
    15d8:	sub	sp, sp, #24
    15dc:	str	r0, [fp, #-16]
    15e0:	strd	r2, [fp, #-28]	; 0xffffffe4
    15e4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    15e8:	orrs	r3, r2, r3
    15ec:	bne	15f8 <reflection_EnumVal_value_add+0x28>
    15f0:	mov	r3, #0
    15f4:	b	1634 <reflection_EnumVal_value_add+0x64>
    15f8:	mov	r3, #8
    15fc:	mov	r2, #8
    1600:	mov	r1, #1
    1604:	ldr	r0, [fp, #-16]
    1608:	bl	0 <flatcc_builder_table_add>
    160c:	str	r0, [fp, #-8]
    1610:	ldr	r3, [fp, #-8]
    1614:	cmp	r3, #0
    1618:	bne	1624 <reflection_EnumVal_value_add+0x54>
    161c:	mvn	r3, #0
    1620:	b	1634 <reflection_EnumVal_value_add+0x64>
    1624:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    1628:	ldr	r0, [fp, #-8]
    162c:	bl	d84 <flatbuffers_int64_assign_to_pe>
    1630:	mov	r3, #0
    1634:	mov	r0, r3
    1638:	sub	sp, fp, #4
    163c:	pop	{fp, pc}

00001640 <reflection_EnumVal_object_add>:
    1640:	push	{fp, lr}
    1644:	add	fp, sp, #4
    1648:	sub	sp, sp, #16
    164c:	str	r0, [fp, #-16]
    1650:	str	r1, [fp, #-20]	; 0xffffffec
    1654:	ldr	r3, [fp, #-20]	; 0xffffffec
    1658:	cmp	r3, #0
    165c:	beq	1690 <reflection_EnumVal_object_add+0x50>
    1660:	mov	r1, #2
    1664:	ldr	r0, [fp, #-16]
    1668:	bl	0 <flatcc_builder_table_add_offset>
    166c:	str	r0, [fp, #-8]
    1670:	ldr	r3, [fp, #-8]
    1674:	cmp	r3, #0
    1678:	beq	1690 <reflection_EnumVal_object_add+0x50>
    167c:	ldr	r3, [fp, #-8]
    1680:	ldr	r2, [fp, #-20]	; 0xffffffec
    1684:	str	r2, [r3]
    1688:	mov	r3, #0
    168c:	b	1694 <reflection_EnumVal_object_add+0x54>
    1690:	mvn	r3, #0
    1694:	mov	r0, r3
    1698:	sub	sp, fp, #4
    169c:	pop	{fp, pc}

000016a0 <reflection_EnumVal_vec_push_start>:
    16a0:	push	{fp, lr}
    16a4:	add	fp, sp, #4
    16a8:	sub	sp, sp, #8
    16ac:	str	r0, [fp, #-8]
    16b0:	ldr	r0, [fp, #-8]
    16b4:	bl	f70 <reflection_EnumVal_start>
    16b8:	mov	r3, r0
    16bc:	mov	r0, r3
    16c0:	sub	sp, fp, #4
    16c4:	pop	{fp, pc}

000016c8 <reflection_EnumVal_vec_push_end>:
    16c8:	push	{fp, lr}
    16cc:	add	fp, sp, #4
    16d0:	sub	sp, sp, #8
    16d4:	str	r0, [fp, #-8]
    16d8:	ldr	r0, [fp, #-8]
    16dc:	bl	f9c <reflection_EnumVal_end>
    16e0:	mov	r3, r0
    16e4:	mov	r1, r3
    16e8:	ldr	r0, [fp, #-8]
    16ec:	bl	1004 <reflection_EnumVal_vec_push>
    16f0:	mov	r3, r0
    16f4:	mov	r0, r3
    16f8:	sub	sp, fp, #4
    16fc:	pop	{fp, pc}

00001700 <reflection_Enum_name_add>:
    1700:	push	{fp, lr}
    1704:	add	fp, sp, #4
    1708:	sub	sp, sp, #16
    170c:	str	r0, [fp, #-16]
    1710:	str	r1, [fp, #-20]	; 0xffffffec
    1714:	ldr	r3, [fp, #-20]	; 0xffffffec
    1718:	cmp	r3, #0
    171c:	beq	1750 <reflection_Enum_name_add+0x50>
    1720:	mov	r1, #0
    1724:	ldr	r0, [fp, #-16]
    1728:	bl	0 <flatcc_builder_table_add_offset>
    172c:	str	r0, [fp, #-8]
    1730:	ldr	r3, [fp, #-8]
    1734:	cmp	r3, #0
    1738:	beq	1750 <reflection_Enum_name_add+0x50>
    173c:	ldr	r3, [fp, #-8]
    1740:	ldr	r2, [fp, #-20]	; 0xffffffec
    1744:	str	r2, [r3]
    1748:	mov	r3, #0
    174c:	b	1754 <reflection_Enum_name_add+0x54>
    1750:	mvn	r3, #0
    1754:	mov	r0, r3
    1758:	sub	sp, fp, #4
    175c:	pop	{fp, pc}

00001760 <reflection_Enum_name_create_str>:
    1760:	push	{fp, lr}
    1764:	add	fp, sp, #4
    1768:	sub	sp, sp, #8
    176c:	str	r0, [fp, #-8]
    1770:	str	r1, [fp, #-12]
    1774:	ldr	r1, [fp, #-12]
    1778:	ldr	r0, [fp, #-8]
    177c:	bl	0 <flatcc_builder_create_string_str>
    1780:	mov	r3, r0
    1784:	mov	r1, r3
    1788:	ldr	r0, [fp, #-8]
    178c:	bl	1700 <reflection_Enum_name_add>
    1790:	mov	r3, r0
    1794:	mov	r0, r3
    1798:	sub	sp, fp, #4
    179c:	pop	{fp, pc}

000017a0 <reflection_Enum_values_add>:
    17a0:	push	{fp, lr}
    17a4:	add	fp, sp, #4
    17a8:	sub	sp, sp, #16
    17ac:	str	r0, [fp, #-16]
    17b0:	str	r1, [fp, #-20]	; 0xffffffec
    17b4:	ldr	r3, [fp, #-20]	; 0xffffffec
    17b8:	cmp	r3, #0
    17bc:	beq	17f0 <reflection_Enum_values_add+0x50>
    17c0:	mov	r1, #1
    17c4:	ldr	r0, [fp, #-16]
    17c8:	bl	0 <flatcc_builder_table_add_offset>
    17cc:	str	r0, [fp, #-8]
    17d0:	ldr	r3, [fp, #-8]
    17d4:	cmp	r3, #0
    17d8:	beq	17f0 <reflection_Enum_values_add+0x50>
    17dc:	ldr	r3, [fp, #-8]
    17e0:	ldr	r2, [fp, #-20]	; 0xffffffec
    17e4:	str	r2, [r3]
    17e8:	mov	r3, #0
    17ec:	b	17f4 <reflection_Enum_values_add+0x54>
    17f0:	mvn	r3, #0
    17f4:	mov	r0, r3
    17f8:	sub	sp, fp, #4
    17fc:	pop	{fp, pc}

00001800 <reflection_Enum_values_start>:
    1800:	push	{fp, lr}
    1804:	add	fp, sp, #4
    1808:	sub	sp, sp, #8
    180c:	str	r0, [fp, #-8]
    1810:	ldr	r0, [fp, #-8]
    1814:	bl	0 <flatcc_builder_start_offset_vector>
    1818:	mov	r3, r0
    181c:	mov	r0, r3
    1820:	sub	sp, fp, #4
    1824:	pop	{fp, pc}

00001828 <reflection_Enum_values_end>:
    1828:	push	{fp, lr}
    182c:	add	fp, sp, #4
    1830:	sub	sp, sp, #8
    1834:	str	r0, [fp, #-8]
    1838:	ldr	r0, [fp, #-8]
    183c:	bl	0 <flatcc_builder_end_offset_vector>
    1840:	mov	r3, r0
    1844:	mov	r1, r3
    1848:	ldr	r0, [fp, #-8]
    184c:	bl	17a0 <reflection_Enum_values_add>
    1850:	mov	r3, r0
    1854:	mov	r0, r3
    1858:	sub	sp, fp, #4
    185c:	pop	{fp, pc}

00001860 <reflection_Enum_is_union_add>:
    1860:	push	{fp, lr}
    1864:	add	fp, sp, #4
    1868:	sub	sp, sp, #16
    186c:	str	r0, [fp, #-16]
    1870:	mov	r3, r1
    1874:	strb	r3, [fp, #-17]	; 0xffffffef
    1878:	ldrb	r3, [fp, #-17]	; 0xffffffef
    187c:	cmp	r3, #0
    1880:	bne	188c <reflection_Enum_is_union_add+0x2c>
    1884:	mov	r3, #0
    1888:	b	18cc <reflection_Enum_is_union_add+0x6c>
    188c:	mov	r3, #1
    1890:	mov	r2, #1
    1894:	mov	r1, #2
    1898:	ldr	r0, [fp, #-16]
    189c:	bl	0 <flatcc_builder_table_add>
    18a0:	str	r0, [fp, #-8]
    18a4:	ldr	r3, [fp, #-8]
    18a8:	cmp	r3, #0
    18ac:	bne	18b8 <reflection_Enum_is_union_add+0x58>
    18b0:	mvn	r3, #0
    18b4:	b	18cc <reflection_Enum_is_union_add+0x6c>
    18b8:	ldrb	r3, [fp, #-17]	; 0xffffffef
    18bc:	mov	r1, r3
    18c0:	ldr	r0, [fp, #-8]
    18c4:	bl	cc4 <flatbuffers_bool_assign_to_pe>
    18c8:	mov	r3, #0
    18cc:	mov	r0, r3
    18d0:	sub	sp, fp, #4
    18d4:	pop	{fp, pc}

000018d8 <reflection_Enum_underlying_type_add>:
    18d8:	push	{fp, lr}
    18dc:	add	fp, sp, #4
    18e0:	sub	sp, sp, #16
    18e4:	str	r0, [fp, #-16]
    18e8:	str	r1, [fp, #-20]	; 0xffffffec
    18ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    18f0:	cmp	r3, #0
    18f4:	beq	1928 <reflection_Enum_underlying_type_add+0x50>
    18f8:	mov	r1, #3
    18fc:	ldr	r0, [fp, #-16]
    1900:	bl	0 <flatcc_builder_table_add_offset>
    1904:	str	r0, [fp, #-8]
    1908:	ldr	r3, [fp, #-8]
    190c:	cmp	r3, #0
    1910:	beq	1928 <reflection_Enum_underlying_type_add+0x50>
    1914:	ldr	r3, [fp, #-8]
    1918:	ldr	r2, [fp, #-20]	; 0xffffffec
    191c:	str	r2, [r3]
    1920:	mov	r3, #0
    1924:	b	192c <reflection_Enum_underlying_type_add+0x54>
    1928:	mvn	r3, #0
    192c:	mov	r0, r3
    1930:	sub	sp, fp, #4
    1934:	pop	{fp, pc}

00001938 <reflection_Enum_vec_push_start>:
    1938:	push	{fp, lr}
    193c:	add	fp, sp, #4
    1940:	sub	sp, sp, #8
    1944:	str	r0, [fp, #-8]
    1948:	ldr	r0, [fp, #-8]
    194c:	bl	1048 <reflection_Enum_start>
    1950:	mov	r3, r0
    1954:	mov	r0, r3
    1958:	sub	sp, fp, #4
    195c:	pop	{fp, pc}

00001960 <reflection_Enum_vec_push_end>:
    1960:	push	{fp, lr}
    1964:	add	fp, sp, #4
    1968:	sub	sp, sp, #8
    196c:	str	r0, [fp, #-8]
    1970:	ldr	r0, [fp, #-8]
    1974:	bl	1074 <reflection_Enum_end>
    1978:	mov	r3, r0
    197c:	mov	r1, r3
    1980:	ldr	r0, [fp, #-8]
    1984:	bl	10dc <reflection_Enum_vec_push>
    1988:	mov	r3, r0
    198c:	mov	r0, r3
    1990:	sub	sp, fp, #4
    1994:	pop	{fp, pc}

00001998 <reflection_Field_name_add>:
    1998:	push	{fp, lr}
    199c:	add	fp, sp, #4
    19a0:	sub	sp, sp, #16
    19a4:	str	r0, [fp, #-16]
    19a8:	str	r1, [fp, #-20]	; 0xffffffec
    19ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    19b0:	cmp	r3, #0
    19b4:	beq	19e8 <reflection_Field_name_add+0x50>
    19b8:	mov	r1, #0
    19bc:	ldr	r0, [fp, #-16]
    19c0:	bl	0 <flatcc_builder_table_add_offset>
    19c4:	str	r0, [fp, #-8]
    19c8:	ldr	r3, [fp, #-8]
    19cc:	cmp	r3, #0
    19d0:	beq	19e8 <reflection_Field_name_add+0x50>
    19d4:	ldr	r3, [fp, #-8]
    19d8:	ldr	r2, [fp, #-20]	; 0xffffffec
    19dc:	str	r2, [r3]
    19e0:	mov	r3, #0
    19e4:	b	19ec <reflection_Field_name_add+0x54>
    19e8:	mvn	r3, #0
    19ec:	mov	r0, r3
    19f0:	sub	sp, fp, #4
    19f4:	pop	{fp, pc}

000019f8 <reflection_Field_name_start>:
    19f8:	push	{fp, lr}
    19fc:	add	fp, sp, #4
    1a00:	sub	sp, sp, #8
    1a04:	str	r0, [fp, #-8]
    1a08:	ldr	r0, [fp, #-8]
    1a0c:	bl	0 <flatcc_builder_start_string>
    1a10:	mov	r3, r0
    1a14:	mov	r0, r3
    1a18:	sub	sp, fp, #4
    1a1c:	pop	{fp, pc}

00001a20 <reflection_Field_name_end>:
    1a20:	push	{fp, lr}
    1a24:	add	fp, sp, #4
    1a28:	sub	sp, sp, #8
    1a2c:	str	r0, [fp, #-8]
    1a30:	ldr	r0, [fp, #-8]
    1a34:	bl	0 <flatcc_builder_end_string>
    1a38:	mov	r3, r0
    1a3c:	mov	r1, r3
    1a40:	ldr	r0, [fp, #-8]
    1a44:	bl	1998 <reflection_Field_name_add>
    1a48:	mov	r3, r0
    1a4c:	mov	r0, r3
    1a50:	sub	sp, fp, #4
    1a54:	pop	{fp, pc}

00001a58 <reflection_Field_name_create>:
    1a58:	push	{fp, lr}
    1a5c:	add	fp, sp, #4
    1a60:	sub	sp, sp, #16
    1a64:	str	r0, [fp, #-8]
    1a68:	str	r1, [fp, #-12]
    1a6c:	str	r2, [fp, #-16]
    1a70:	ldr	r2, [fp, #-16]
    1a74:	ldr	r1, [fp, #-12]
    1a78:	ldr	r0, [fp, #-8]
    1a7c:	bl	0 <flatcc_builder_create_string>
    1a80:	mov	r3, r0
    1a84:	mov	r1, r3
    1a88:	ldr	r0, [fp, #-8]
    1a8c:	bl	1998 <reflection_Field_name_add>
    1a90:	mov	r3, r0
    1a94:	mov	r0, r3
    1a98:	sub	sp, fp, #4
    1a9c:	pop	{fp, pc}

00001aa0 <reflection_Field_name_append>:
    1aa0:	push	{fp, lr}
    1aa4:	add	fp, sp, #4
    1aa8:	sub	sp, sp, #16
    1aac:	str	r0, [fp, #-8]
    1ab0:	str	r1, [fp, #-12]
    1ab4:	str	r2, [fp, #-16]
    1ab8:	ldr	r2, [fp, #-16]
    1abc:	ldr	r1, [fp, #-12]
    1ac0:	ldr	r0, [fp, #-8]
    1ac4:	bl	0 <flatcc_builder_append_string>
    1ac8:	mov	r3, r0
    1acc:	mov	r0, r3
    1ad0:	sub	sp, fp, #4
    1ad4:	pop	{fp, pc}

00001ad8 <reflection_Field_type_add>:
    1ad8:	push	{fp, lr}
    1adc:	add	fp, sp, #4
    1ae0:	sub	sp, sp, #16
    1ae4:	str	r0, [fp, #-16]
    1ae8:	str	r1, [fp, #-20]	; 0xffffffec
    1aec:	ldr	r3, [fp, #-20]	; 0xffffffec
    1af0:	cmp	r3, #0
    1af4:	beq	1b28 <reflection_Field_type_add+0x50>
    1af8:	mov	r1, #1
    1afc:	ldr	r0, [fp, #-16]
    1b00:	bl	0 <flatcc_builder_table_add_offset>
    1b04:	str	r0, [fp, #-8]
    1b08:	ldr	r3, [fp, #-8]
    1b0c:	cmp	r3, #0
    1b10:	beq	1b28 <reflection_Field_type_add+0x50>
    1b14:	ldr	r3, [fp, #-8]
    1b18:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b1c:	str	r2, [r3]
    1b20:	mov	r3, #0
    1b24:	b	1b2c <reflection_Field_type_add+0x54>
    1b28:	mvn	r3, #0
    1b2c:	mov	r0, r3
    1b30:	sub	sp, fp, #4
    1b34:	pop	{fp, pc}

00001b38 <reflection_Field_type_create>:
    1b38:	push	{fp, lr}
    1b3c:	add	fp, sp, #4
    1b40:	sub	sp, sp, #16
    1b44:	str	r0, [fp, #-8]
    1b48:	str	r3, [fp, #-16]
    1b4c:	mov	r3, r1
    1b50:	strb	r3, [fp, #-9]
    1b54:	mov	r3, r2
    1b58:	strb	r3, [fp, #-10]
    1b5c:	ldrsb	r2, [fp, #-10]
    1b60:	ldrsb	r1, [fp, #-9]
    1b64:	ldr	r3, [fp, #-16]
    1b68:	ldr	r0, [fp, #-8]
    1b6c:	bl	1480 <reflection_Type_create>
    1b70:	mov	r3, r0
    1b74:	mov	r1, r3
    1b78:	ldr	r0, [fp, #-8]
    1b7c:	bl	1ad8 <reflection_Field_type_add>
    1b80:	mov	r3, r0
    1b84:	mov	r0, r3
    1b88:	sub	sp, fp, #4
    1b8c:	pop	{fp, pc}

00001b90 <reflection_Field_id_add>:
    1b90:	push	{fp, lr}
    1b94:	add	fp, sp, #4
    1b98:	sub	sp, sp, #16
    1b9c:	str	r0, [fp, #-16]
    1ba0:	mov	r3, r1
    1ba4:	strh	r3, [fp, #-18]	; 0xffffffee
    1ba8:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1bac:	cmp	r3, #0
    1bb0:	bne	1bbc <reflection_Field_id_add+0x2c>
    1bb4:	mov	r3, #0
    1bb8:	b	1bfc <reflection_Field_id_add+0x6c>
    1bbc:	mov	r3, #2
    1bc0:	mov	r2, #2
    1bc4:	mov	r1, #2
    1bc8:	ldr	r0, [fp, #-16]
    1bcc:	bl	0 <flatcc_builder_table_add>
    1bd0:	str	r0, [fp, #-8]
    1bd4:	ldr	r3, [fp, #-8]
    1bd8:	cmp	r3, #0
    1bdc:	bne	1be8 <reflection_Field_id_add+0x58>
    1be0:	mvn	r3, #0
    1be4:	b	1bfc <reflection_Field_id_add+0x6c>
    1be8:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1bec:	mov	r1, r3
    1bf0:	ldr	r0, [fp, #-8]
    1bf4:	bl	d08 <flatbuffers_uint16_assign_to_pe>
    1bf8:	mov	r3, #0
    1bfc:	mov	r0, r3
    1c00:	sub	sp, fp, #4
    1c04:	pop	{fp, pc}

00001c08 <reflection_Field_offset_add>:
    1c08:	push	{fp, lr}
    1c0c:	add	fp, sp, #4
    1c10:	sub	sp, sp, #16
    1c14:	str	r0, [fp, #-16]
    1c18:	mov	r3, r1
    1c1c:	strh	r3, [fp, #-18]	; 0xffffffee
    1c20:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1c24:	cmp	r3, #0
    1c28:	bne	1c34 <reflection_Field_offset_add+0x2c>
    1c2c:	mov	r3, #0
    1c30:	b	1c74 <reflection_Field_offset_add+0x6c>
    1c34:	mov	r3, #2
    1c38:	mov	r2, #2
    1c3c:	mov	r1, #3
    1c40:	ldr	r0, [fp, #-16]
    1c44:	bl	0 <flatcc_builder_table_add>
    1c48:	str	r0, [fp, #-8]
    1c4c:	ldr	r3, [fp, #-8]
    1c50:	cmp	r3, #0
    1c54:	bne	1c60 <reflection_Field_offset_add+0x58>
    1c58:	mvn	r3, #0
    1c5c:	b	1c74 <reflection_Field_offset_add+0x6c>
    1c60:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1c64:	mov	r1, r3
    1c68:	ldr	r0, [fp, #-8]
    1c6c:	bl	d08 <flatbuffers_uint16_assign_to_pe>
    1c70:	mov	r3, #0
    1c74:	mov	r0, r3
    1c78:	sub	sp, fp, #4
    1c7c:	pop	{fp, pc}

00001c80 <reflection_Field_default_integer_add>:
    1c80:	push	{fp, lr}
    1c84:	add	fp, sp, #4
    1c88:	sub	sp, sp, #24
    1c8c:	str	r0, [fp, #-16]
    1c90:	strd	r2, [fp, #-28]	; 0xffffffe4
    1c94:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    1c98:	orrs	r3, r2, r3
    1c9c:	bne	1ca8 <reflection_Field_default_integer_add+0x28>
    1ca0:	mov	r3, #0
    1ca4:	b	1ce4 <reflection_Field_default_integer_add+0x64>
    1ca8:	mov	r3, #8
    1cac:	mov	r2, #8
    1cb0:	mov	r1, #4
    1cb4:	ldr	r0, [fp, #-16]
    1cb8:	bl	0 <flatcc_builder_table_add>
    1cbc:	str	r0, [fp, #-8]
    1cc0:	ldr	r3, [fp, #-8]
    1cc4:	cmp	r3, #0
    1cc8:	bne	1cd4 <reflection_Field_default_integer_add+0x54>
    1ccc:	mvn	r3, #0
    1cd0:	b	1ce4 <reflection_Field_default_integer_add+0x64>
    1cd4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    1cd8:	ldr	r0, [fp, #-8]
    1cdc:	bl	d84 <flatbuffers_int64_assign_to_pe>
    1ce0:	mov	r3, #0
    1ce4:	mov	r0, r3
    1ce8:	sub	sp, fp, #4
    1cec:	pop	{fp, pc}

00001cf0 <reflection_Field_default_real_add>:
    1cf0:	push	{fp, lr}
    1cf4:	add	fp, sp, #4
    1cf8:	sub	sp, sp, #24
    1cfc:	str	r0, [fp, #-16]
    1d00:	vstr	d0, [fp, #-28]	; 0xffffffe4
    1d04:	vldr	d7, [fp, #-28]	; 0xffffffe4
    1d08:	vcmp.f64	d7, #0.0
    1d0c:	vmrs	APSR_nzcv, fpscr
    1d10:	bne	1d1c <reflection_Field_default_real_add+0x2c>
    1d14:	mov	r3, #0
    1d18:	b	1d58 <reflection_Field_default_real_add+0x68>
    1d1c:	mov	r3, #8
    1d20:	mov	r2, #8
    1d24:	mov	r1, #5
    1d28:	ldr	r0, [fp, #-16]
    1d2c:	bl	0 <flatcc_builder_table_add>
    1d30:	str	r0, [fp, #-8]
    1d34:	ldr	r3, [fp, #-8]
    1d38:	cmp	r3, #0
    1d3c:	bne	1d48 <reflection_Field_default_real_add+0x58>
    1d40:	mvn	r3, #0
    1d44:	b	1d58 <reflection_Field_default_real_add+0x68>
    1d48:	vldr	d0, [fp, #-28]	; 0xffffffe4
    1d4c:	ldr	r0, [fp, #-8]
    1d50:	bl	dc0 <flatbuffers_double_assign_to_pe>
    1d54:	mov	r3, #0
    1d58:	mov	r0, r3
    1d5c:	sub	sp, fp, #4
    1d60:	pop	{fp, pc}

00001d64 <reflection_Field_deprecated_add>:
    1d64:	push	{fp, lr}
    1d68:	add	fp, sp, #4
    1d6c:	sub	sp, sp, #16
    1d70:	str	r0, [fp, #-16]
    1d74:	mov	r3, r1
    1d78:	strb	r3, [fp, #-17]	; 0xffffffef
    1d7c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1d80:	cmp	r3, #0
    1d84:	bne	1d90 <reflection_Field_deprecated_add+0x2c>
    1d88:	mov	r3, #0
    1d8c:	b	1dd0 <reflection_Field_deprecated_add+0x6c>
    1d90:	mov	r3, #1
    1d94:	mov	r2, #1
    1d98:	mov	r1, #6
    1d9c:	ldr	r0, [fp, #-16]
    1da0:	bl	0 <flatcc_builder_table_add>
    1da4:	str	r0, [fp, #-8]
    1da8:	ldr	r3, [fp, #-8]
    1dac:	cmp	r3, #0
    1db0:	bne	1dbc <reflection_Field_deprecated_add+0x58>
    1db4:	mvn	r3, #0
    1db8:	b	1dd0 <reflection_Field_deprecated_add+0x6c>
    1dbc:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1dc0:	mov	r1, r3
    1dc4:	ldr	r0, [fp, #-8]
    1dc8:	bl	cc4 <flatbuffers_bool_assign_to_pe>
    1dcc:	mov	r3, #0
    1dd0:	mov	r0, r3
    1dd4:	sub	sp, fp, #4
    1dd8:	pop	{fp, pc}

00001ddc <reflection_Field_required_add>:
    1ddc:	push	{fp, lr}
    1de0:	add	fp, sp, #4
    1de4:	sub	sp, sp, #16
    1de8:	str	r0, [fp, #-16]
    1dec:	mov	r3, r1
    1df0:	strb	r3, [fp, #-17]	; 0xffffffef
    1df4:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1df8:	cmp	r3, #0
    1dfc:	bne	1e08 <reflection_Field_required_add+0x2c>
    1e00:	mov	r3, #0
    1e04:	b	1e48 <reflection_Field_required_add+0x6c>
    1e08:	mov	r3, #1
    1e0c:	mov	r2, #1
    1e10:	mov	r1, #7
    1e14:	ldr	r0, [fp, #-16]
    1e18:	bl	0 <flatcc_builder_table_add>
    1e1c:	str	r0, [fp, #-8]
    1e20:	ldr	r3, [fp, #-8]
    1e24:	cmp	r3, #0
    1e28:	bne	1e34 <reflection_Field_required_add+0x58>
    1e2c:	mvn	r3, #0
    1e30:	b	1e48 <reflection_Field_required_add+0x6c>
    1e34:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1e38:	mov	r1, r3
    1e3c:	ldr	r0, [fp, #-8]
    1e40:	bl	cc4 <flatbuffers_bool_assign_to_pe>
    1e44:	mov	r3, #0
    1e48:	mov	r0, r3
    1e4c:	sub	sp, fp, #4
    1e50:	pop	{fp, pc}

00001e54 <reflection_Field_key_add>:
    1e54:	push	{fp, lr}
    1e58:	add	fp, sp, #4
    1e5c:	sub	sp, sp, #16
    1e60:	str	r0, [fp, #-16]
    1e64:	mov	r3, r1
    1e68:	strb	r3, [fp, #-17]	; 0xffffffef
    1e6c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1e70:	cmp	r3, #0
    1e74:	bne	1e80 <reflection_Field_key_add+0x2c>
    1e78:	mov	r3, #0
    1e7c:	b	1ec0 <reflection_Field_key_add+0x6c>
    1e80:	mov	r3, #1
    1e84:	mov	r2, #1
    1e88:	mov	r1, #8
    1e8c:	ldr	r0, [fp, #-16]
    1e90:	bl	0 <flatcc_builder_table_add>
    1e94:	str	r0, [fp, #-8]
    1e98:	ldr	r3, [fp, #-8]
    1e9c:	cmp	r3, #0
    1ea0:	bne	1eac <reflection_Field_key_add+0x58>
    1ea4:	mvn	r3, #0
    1ea8:	b	1ec0 <reflection_Field_key_add+0x6c>
    1eac:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1eb0:	mov	r1, r3
    1eb4:	ldr	r0, [fp, #-8]
    1eb8:	bl	cc4 <flatbuffers_bool_assign_to_pe>
    1ebc:	mov	r3, #0
    1ec0:	mov	r0, r3
    1ec4:	sub	sp, fp, #4
    1ec8:	pop	{fp, pc}

00001ecc <reflection_Field_vec_push_start>:
    1ecc:	push	{fp, lr}
    1ed0:	add	fp, sp, #4
    1ed4:	sub	sp, sp, #8
    1ed8:	str	r0, [fp, #-8]
    1edc:	ldr	r0, [fp, #-8]
    1ee0:	bl	1120 <reflection_Field_start>
    1ee4:	mov	r3, r0
    1ee8:	mov	r0, r3
    1eec:	sub	sp, fp, #4
    1ef0:	pop	{fp, pc}

00001ef4 <reflection_Field_vec_push_end>:
    1ef4:	push	{fp, lr}
    1ef8:	add	fp, sp, #4
    1efc:	sub	sp, sp, #8
    1f00:	str	r0, [fp, #-8]
    1f04:	ldr	r0, [fp, #-8]
    1f08:	bl	114c <reflection_Field_end>
    1f0c:	mov	r3, r0
    1f10:	mov	r1, r3
    1f14:	ldr	r0, [fp, #-8]
    1f18:	bl	11b4 <reflection_Field_vec_push>
    1f1c:	mov	r3, r0
    1f20:	mov	r0, r3
    1f24:	sub	sp, fp, #4
    1f28:	pop	{fp, pc}

00001f2c <reflection_Object_name_add>:
    1f2c:	push	{fp, lr}
    1f30:	add	fp, sp, #4
    1f34:	sub	sp, sp, #16
    1f38:	str	r0, [fp, #-16]
    1f3c:	str	r1, [fp, #-20]	; 0xffffffec
    1f40:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f44:	cmp	r3, #0
    1f48:	beq	1f7c <reflection_Object_name_add+0x50>
    1f4c:	mov	r1, #0
    1f50:	ldr	r0, [fp, #-16]
    1f54:	bl	0 <flatcc_builder_table_add_offset>
    1f58:	str	r0, [fp, #-8]
    1f5c:	ldr	r3, [fp, #-8]
    1f60:	cmp	r3, #0
    1f64:	beq	1f7c <reflection_Object_name_add+0x50>
    1f68:	ldr	r3, [fp, #-8]
    1f6c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1f70:	str	r2, [r3]
    1f74:	mov	r3, #0
    1f78:	b	1f80 <reflection_Object_name_add+0x54>
    1f7c:	mvn	r3, #0
    1f80:	mov	r0, r3
    1f84:	sub	sp, fp, #4
    1f88:	pop	{fp, pc}

00001f8c <reflection_Object_name_create_str>:
    1f8c:	push	{fp, lr}
    1f90:	add	fp, sp, #4
    1f94:	sub	sp, sp, #8
    1f98:	str	r0, [fp, #-8]
    1f9c:	str	r1, [fp, #-12]
    1fa0:	ldr	r1, [fp, #-12]
    1fa4:	ldr	r0, [fp, #-8]
    1fa8:	bl	0 <flatcc_builder_create_string_str>
    1fac:	mov	r3, r0
    1fb0:	mov	r1, r3
    1fb4:	ldr	r0, [fp, #-8]
    1fb8:	bl	1f2c <reflection_Object_name_add>
    1fbc:	mov	r3, r0
    1fc0:	mov	r0, r3
    1fc4:	sub	sp, fp, #4
    1fc8:	pop	{fp, pc}

00001fcc <reflection_Object_fields_add>:
    1fcc:	push	{fp, lr}
    1fd0:	add	fp, sp, #4
    1fd4:	sub	sp, sp, #16
    1fd8:	str	r0, [fp, #-16]
    1fdc:	str	r1, [fp, #-20]	; 0xffffffec
    1fe0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1fe4:	cmp	r3, #0
    1fe8:	beq	201c <reflection_Object_fields_add+0x50>
    1fec:	mov	r1, #1
    1ff0:	ldr	r0, [fp, #-16]
    1ff4:	bl	0 <flatcc_builder_table_add_offset>
    1ff8:	str	r0, [fp, #-8]
    1ffc:	ldr	r3, [fp, #-8]
    2000:	cmp	r3, #0
    2004:	beq	201c <reflection_Object_fields_add+0x50>
    2008:	ldr	r3, [fp, #-8]
    200c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2010:	str	r2, [r3]
    2014:	mov	r3, #0
    2018:	b	2020 <reflection_Object_fields_add+0x54>
    201c:	mvn	r3, #0
    2020:	mov	r0, r3
    2024:	sub	sp, fp, #4
    2028:	pop	{fp, pc}

0000202c <reflection_Object_fields_start>:
    202c:	push	{fp, lr}
    2030:	add	fp, sp, #4
    2034:	sub	sp, sp, #8
    2038:	str	r0, [fp, #-8]
    203c:	ldr	r0, [fp, #-8]
    2040:	bl	0 <flatcc_builder_start_offset_vector>
    2044:	mov	r3, r0
    2048:	mov	r0, r3
    204c:	sub	sp, fp, #4
    2050:	pop	{fp, pc}

00002054 <reflection_Object_fields_end>:
    2054:	push	{fp, lr}
    2058:	add	fp, sp, #4
    205c:	sub	sp, sp, #8
    2060:	str	r0, [fp, #-8]
    2064:	ldr	r0, [fp, #-8]
    2068:	bl	0 <flatcc_builder_end_offset_vector>
    206c:	mov	r3, r0
    2070:	mov	r1, r3
    2074:	ldr	r0, [fp, #-8]
    2078:	bl	1fcc <reflection_Object_fields_add>
    207c:	mov	r3, r0
    2080:	mov	r0, r3
    2084:	sub	sp, fp, #4
    2088:	pop	{fp, pc}

0000208c <reflection_Object_is_struct_add>:
    208c:	push	{fp, lr}
    2090:	add	fp, sp, #4
    2094:	sub	sp, sp, #16
    2098:	str	r0, [fp, #-16]
    209c:	mov	r3, r1
    20a0:	strb	r3, [fp, #-17]	; 0xffffffef
    20a4:	ldrb	r3, [fp, #-17]	; 0xffffffef
    20a8:	cmp	r3, #0
    20ac:	bne	20b8 <reflection_Object_is_struct_add+0x2c>
    20b0:	mov	r3, #0
    20b4:	b	20f8 <reflection_Object_is_struct_add+0x6c>
    20b8:	mov	r3, #1
    20bc:	mov	r2, #1
    20c0:	mov	r1, #2
    20c4:	ldr	r0, [fp, #-16]
    20c8:	bl	0 <flatcc_builder_table_add>
    20cc:	str	r0, [fp, #-8]
    20d0:	ldr	r3, [fp, #-8]
    20d4:	cmp	r3, #0
    20d8:	bne	20e4 <reflection_Object_is_struct_add+0x58>
    20dc:	mvn	r3, #0
    20e0:	b	20f8 <reflection_Object_is_struct_add+0x6c>
    20e4:	ldrb	r3, [fp, #-17]	; 0xffffffef
    20e8:	mov	r1, r3
    20ec:	ldr	r0, [fp, #-8]
    20f0:	bl	cc4 <flatbuffers_bool_assign_to_pe>
    20f4:	mov	r3, #0
    20f8:	mov	r0, r3
    20fc:	sub	sp, fp, #4
    2100:	pop	{fp, pc}

00002104 <reflection_Object_minalign_add>:
    2104:	push	{fp, lr}
    2108:	add	fp, sp, #4
    210c:	sub	sp, sp, #16
    2110:	str	r0, [fp, #-16]
    2114:	str	r1, [fp, #-20]	; 0xffffffec
    2118:	ldr	r3, [fp, #-20]	; 0xffffffec
    211c:	cmp	r3, #0
    2120:	bne	212c <reflection_Object_minalign_add+0x28>
    2124:	mov	r3, #0
    2128:	b	2168 <reflection_Object_minalign_add+0x64>
    212c:	mov	r3, #4
    2130:	mov	r2, #4
    2134:	mov	r1, #3
    2138:	ldr	r0, [fp, #-16]
    213c:	bl	0 <flatcc_builder_table_add>
    2140:	str	r0, [fp, #-8]
    2144:	ldr	r3, [fp, #-8]
    2148:	cmp	r3, #0
    214c:	bne	2158 <reflection_Object_minalign_add+0x54>
    2150:	mvn	r3, #0
    2154:	b	2168 <reflection_Object_minalign_add+0x64>
    2158:	ldr	r1, [fp, #-20]	; 0xffffffec
    215c:	ldr	r0, [fp, #-8]
    2160:	bl	d4c <flatbuffers_int32_assign_to_pe>
    2164:	mov	r3, #0
    2168:	mov	r0, r3
    216c:	sub	sp, fp, #4
    2170:	pop	{fp, pc}

00002174 <reflection_Object_bytesize_add>:
    2174:	push	{fp, lr}
    2178:	add	fp, sp, #4
    217c:	sub	sp, sp, #16
    2180:	str	r0, [fp, #-16]
    2184:	str	r1, [fp, #-20]	; 0xffffffec
    2188:	ldr	r3, [fp, #-20]	; 0xffffffec
    218c:	cmp	r3, #0
    2190:	bne	219c <reflection_Object_bytesize_add+0x28>
    2194:	mov	r3, #0
    2198:	b	21d8 <reflection_Object_bytesize_add+0x64>
    219c:	mov	r3, #4
    21a0:	mov	r2, #4
    21a4:	mov	r1, #4
    21a8:	ldr	r0, [fp, #-16]
    21ac:	bl	0 <flatcc_builder_table_add>
    21b0:	str	r0, [fp, #-8]
    21b4:	ldr	r3, [fp, #-8]
    21b8:	cmp	r3, #0
    21bc:	bne	21c8 <reflection_Object_bytesize_add+0x54>
    21c0:	mvn	r3, #0
    21c4:	b	21d8 <reflection_Object_bytesize_add+0x64>
    21c8:	ldr	r1, [fp, #-20]	; 0xffffffec
    21cc:	ldr	r0, [fp, #-8]
    21d0:	bl	d4c <flatbuffers_int32_assign_to_pe>
    21d4:	mov	r3, #0
    21d8:	mov	r0, r3
    21dc:	sub	sp, fp, #4
    21e0:	pop	{fp, pc}

000021e4 <reflection_Schema_objects_add>:
    21e4:	push	{fp, lr}
    21e8:	add	fp, sp, #4
    21ec:	sub	sp, sp, #16
    21f0:	str	r0, [fp, #-16]
    21f4:	str	r1, [fp, #-20]	; 0xffffffec
    21f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    21fc:	cmp	r3, #0
    2200:	beq	2234 <reflection_Schema_objects_add+0x50>
    2204:	mov	r1, #0
    2208:	ldr	r0, [fp, #-16]
    220c:	bl	0 <flatcc_builder_table_add_offset>
    2210:	str	r0, [fp, #-8]
    2214:	ldr	r3, [fp, #-8]
    2218:	cmp	r3, #0
    221c:	beq	2234 <reflection_Schema_objects_add+0x50>
    2220:	ldr	r3, [fp, #-8]
    2224:	ldr	r2, [fp, #-20]	; 0xffffffec
    2228:	str	r2, [r3]
    222c:	mov	r3, #0
    2230:	b	2238 <reflection_Schema_objects_add+0x54>
    2234:	mvn	r3, #0
    2238:	mov	r0, r3
    223c:	sub	sp, fp, #4
    2240:	pop	{fp, pc}

00002244 <reflection_Schema_objects_create>:
    2244:	push	{fp, lr}
    2248:	add	fp, sp, #4
    224c:	sub	sp, sp, #16
    2250:	str	r0, [fp, #-8]
    2254:	str	r1, [fp, #-12]
    2258:	str	r2, [fp, #-16]
    225c:	ldr	r2, [fp, #-16]
    2260:	ldr	r1, [fp, #-12]
    2264:	ldr	r0, [fp, #-8]
    2268:	bl	0 <flatcc_builder_create_offset_vector>
    226c:	mov	r3, r0
    2270:	mov	r1, r3
    2274:	ldr	r0, [fp, #-8]
    2278:	bl	21e4 <reflection_Schema_objects_add>
    227c:	mov	r3, r0
    2280:	mov	r0, r3
    2284:	sub	sp, fp, #4
    2288:	pop	{fp, pc}

0000228c <reflection_Schema_enums_add>:
    228c:	push	{fp, lr}
    2290:	add	fp, sp, #4
    2294:	sub	sp, sp, #16
    2298:	str	r0, [fp, #-16]
    229c:	str	r1, [fp, #-20]	; 0xffffffec
    22a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    22a4:	cmp	r3, #0
    22a8:	beq	22dc <reflection_Schema_enums_add+0x50>
    22ac:	mov	r1, #1
    22b0:	ldr	r0, [fp, #-16]
    22b4:	bl	0 <flatcc_builder_table_add_offset>
    22b8:	str	r0, [fp, #-8]
    22bc:	ldr	r3, [fp, #-8]
    22c0:	cmp	r3, #0
    22c4:	beq	22dc <reflection_Schema_enums_add+0x50>
    22c8:	ldr	r3, [fp, #-8]
    22cc:	ldr	r2, [fp, #-20]	; 0xffffffec
    22d0:	str	r2, [r3]
    22d4:	mov	r3, #0
    22d8:	b	22e0 <reflection_Schema_enums_add+0x54>
    22dc:	mvn	r3, #0
    22e0:	mov	r0, r3
    22e4:	sub	sp, fp, #4
    22e8:	pop	{fp, pc}

000022ec <reflection_Schema_enums_start>:
    22ec:	push	{fp, lr}
    22f0:	add	fp, sp, #4
    22f4:	sub	sp, sp, #8
    22f8:	str	r0, [fp, #-8]
    22fc:	ldr	r0, [fp, #-8]
    2300:	bl	0 <flatcc_builder_start_offset_vector>
    2304:	mov	r3, r0
    2308:	mov	r0, r3
    230c:	sub	sp, fp, #4
    2310:	pop	{fp, pc}

00002314 <reflection_Schema_enums_end>:
    2314:	push	{fp, lr}
    2318:	add	fp, sp, #4
    231c:	sub	sp, sp, #8
    2320:	str	r0, [fp, #-8]
    2324:	ldr	r0, [fp, #-8]
    2328:	bl	0 <flatcc_builder_end_offset_vector>
    232c:	mov	r3, r0
    2330:	mov	r1, r3
    2334:	ldr	r0, [fp, #-8]
    2338:	bl	228c <reflection_Schema_enums_add>
    233c:	mov	r3, r0
    2340:	mov	r0, r3
    2344:	sub	sp, fp, #4
    2348:	pop	{fp, pc}

0000234c <reflection_Schema_file_ident_add>:
    234c:	push	{fp, lr}
    2350:	add	fp, sp, #4
    2354:	sub	sp, sp, #16
    2358:	str	r0, [fp, #-16]
    235c:	str	r1, [fp, #-20]	; 0xffffffec
    2360:	ldr	r3, [fp, #-20]	; 0xffffffec
    2364:	cmp	r3, #0
    2368:	beq	239c <reflection_Schema_file_ident_add+0x50>
    236c:	mov	r1, #2
    2370:	ldr	r0, [fp, #-16]
    2374:	bl	0 <flatcc_builder_table_add_offset>
    2378:	str	r0, [fp, #-8]
    237c:	ldr	r3, [fp, #-8]
    2380:	cmp	r3, #0
    2384:	beq	239c <reflection_Schema_file_ident_add+0x50>
    2388:	ldr	r3, [fp, #-8]
    238c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2390:	str	r2, [r3]
    2394:	mov	r3, #0
    2398:	b	23a0 <reflection_Schema_file_ident_add+0x54>
    239c:	mvn	r3, #0
    23a0:	mov	r0, r3
    23a4:	sub	sp, fp, #4
    23a8:	pop	{fp, pc}

000023ac <reflection_Schema_file_ident_create>:
    23ac:	push	{fp, lr}
    23b0:	add	fp, sp, #4
    23b4:	sub	sp, sp, #16
    23b8:	str	r0, [fp, #-8]
    23bc:	str	r1, [fp, #-12]
    23c0:	str	r2, [fp, #-16]
    23c4:	ldr	r2, [fp, #-16]
    23c8:	ldr	r1, [fp, #-12]
    23cc:	ldr	r0, [fp, #-8]
    23d0:	bl	0 <flatcc_builder_create_string>
    23d4:	mov	r3, r0
    23d8:	mov	r1, r3
    23dc:	ldr	r0, [fp, #-8]
    23e0:	bl	234c <reflection_Schema_file_ident_add>
    23e4:	mov	r3, r0
    23e8:	mov	r0, r3
    23ec:	sub	sp, fp, #4
    23f0:	pop	{fp, pc}

000023f4 <reflection_Schema_file_ext_add>:
    23f4:	push	{fp, lr}
    23f8:	add	fp, sp, #4
    23fc:	sub	sp, sp, #16
    2400:	str	r0, [fp, #-16]
    2404:	str	r1, [fp, #-20]	; 0xffffffec
    2408:	ldr	r3, [fp, #-20]	; 0xffffffec
    240c:	cmp	r3, #0
    2410:	beq	2444 <reflection_Schema_file_ext_add+0x50>
    2414:	mov	r1, #3
    2418:	ldr	r0, [fp, #-16]
    241c:	bl	0 <flatcc_builder_table_add_offset>
    2420:	str	r0, [fp, #-8]
    2424:	ldr	r3, [fp, #-8]
    2428:	cmp	r3, #0
    242c:	beq	2444 <reflection_Schema_file_ext_add+0x50>
    2430:	ldr	r3, [fp, #-8]
    2434:	ldr	r2, [fp, #-20]	; 0xffffffec
    2438:	str	r2, [r3]
    243c:	mov	r3, #0
    2440:	b	2448 <reflection_Schema_file_ext_add+0x54>
    2444:	mvn	r3, #0
    2448:	mov	r0, r3
    244c:	sub	sp, fp, #4
    2450:	pop	{fp, pc}

00002454 <reflection_Schema_file_ext_create>:
    2454:	push	{fp, lr}
    2458:	add	fp, sp, #4
    245c:	sub	sp, sp, #16
    2460:	str	r0, [fp, #-8]
    2464:	str	r1, [fp, #-12]
    2468:	str	r2, [fp, #-16]
    246c:	ldr	r2, [fp, #-16]
    2470:	ldr	r1, [fp, #-12]
    2474:	ldr	r0, [fp, #-8]
    2478:	bl	0 <flatcc_builder_create_string>
    247c:	mov	r3, r0
    2480:	mov	r1, r3
    2484:	ldr	r0, [fp, #-8]
    2488:	bl	23f4 <reflection_Schema_file_ext_add>
    248c:	mov	r3, r0
    2490:	mov	r0, r3
    2494:	sub	sp, fp, #4
    2498:	pop	{fp, pc}

0000249c <reflection_Schema_root_table_add>:
    249c:	push	{fp, lr}
    24a0:	add	fp, sp, #4
    24a4:	sub	sp, sp, #16
    24a8:	str	r0, [fp, #-16]
    24ac:	str	r1, [fp, #-20]	; 0xffffffec
    24b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    24b4:	cmp	r3, #0
    24b8:	beq	24ec <reflection_Schema_root_table_add+0x50>
    24bc:	mov	r1, #4
    24c0:	ldr	r0, [fp, #-16]
    24c4:	bl	0 <flatcc_builder_table_add_offset>
    24c8:	str	r0, [fp, #-8]
    24cc:	ldr	r3, [fp, #-8]
    24d0:	cmp	r3, #0
    24d4:	beq	24ec <reflection_Schema_root_table_add+0x50>
    24d8:	ldr	r3, [fp, #-8]
    24dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    24e0:	str	r2, [r3]
    24e4:	mov	r3, #0
    24e8:	b	24f0 <reflection_Schema_root_table_add+0x54>
    24ec:	mvn	r3, #0
    24f0:	mov	r0, r3
    24f4:	sub	sp, fp, #4
    24f8:	pop	{fp, pc}

000024fc <reflection_Schema_start_as_root>:
    24fc:	push	{fp, lr}
    2500:	add	fp, sp, #4
    2504:	sub	sp, sp, #8
    2508:	str	r0, [fp, #-8]
    250c:	ldr	r1, [pc, #48]	; 2544 <reflection_Schema_start_as_root+0x48>
    2510:	ldr	r0, [fp, #-8]
    2514:	bl	df8 <flatbuffers_buffer_start>
    2518:	mov	r3, r0
    251c:	cmp	r3, #0
    2520:	bne	2534 <reflection_Schema_start_as_root+0x38>
    2524:	ldr	r0, [fp, #-8]
    2528:	bl	128c <reflection_Schema_start>
    252c:	mov	r3, r0
    2530:	b	2538 <reflection_Schema_start_as_root+0x3c>
    2534:	mvn	r3, #0
    2538:	mov	r0, r3
    253c:	sub	sp, fp, #4
    2540:	pop	{fp, pc}
    2544:	.word	0x000000f0

00002548 <reflection_Schema_start_as_root_with_size>:
    2548:	push	{fp, lr}
    254c:	add	fp, sp, #4
    2550:	sub	sp, sp, #8
    2554:	str	r0, [fp, #-8]
    2558:	ldr	r1, [pc, #48]	; 2590 <reflection_Schema_start_as_root_with_size+0x48>
    255c:	ldr	r0, [fp, #-8]
    2560:	bl	e30 <flatbuffers_buffer_start_with_size>
    2564:	mov	r3, r0
    2568:	cmp	r3, #0
    256c:	bne	2580 <reflection_Schema_start_as_root_with_size+0x38>
    2570:	ldr	r0, [fp, #-8]
    2574:	bl	128c <reflection_Schema_start>
    2578:	mov	r3, r0
    257c:	b	2584 <reflection_Schema_start_as_root_with_size+0x3c>
    2580:	mvn	r3, #0
    2584:	mov	r0, r3
    2588:	sub	sp, fp, #4
    258c:	pop	{fp, pc}
    2590:	.word	0x000000f0

00002594 <reflection_Schema_end_as_root>:
    2594:	push	{fp, lr}
    2598:	add	fp, sp, #4
    259c:	sub	sp, sp, #8
    25a0:	str	r0, [fp, #-8]
    25a4:	ldr	r0, [fp, #-8]
    25a8:	bl	12b8 <reflection_Schema_end>
    25ac:	mov	r3, r0
    25b0:	mov	r1, r3
    25b4:	ldr	r0, [fp, #-8]
    25b8:	bl	e68 <flatbuffers_buffer_end>
    25bc:	mov	r3, r0
    25c0:	mov	r0, r3
    25c4:	sub	sp, fp, #4
    25c8:	pop	{fp, pc}

000025cc <ptr_set_exists>:
    25cc:	push	{fp, lr}
    25d0:	add	fp, sp, #4
    25d4:	sub	sp, sp, #8
    25d8:	str	r0, [fp, #-8]
    25dc:	str	r1, [fp, #-12]
    25e0:	ldr	r1, [fp, #-12]
    25e4:	ldr	r0, [fp, #-8]
    25e8:	bl	0 <ptr_set_find_item>
    25ec:	mov	r3, r0
    25f0:	cmp	r3, #0
    25f4:	movne	r3, #1
    25f8:	moveq	r3, #0
    25fc:	uxtb	r3, r3
    2600:	mov	r0, r3
    2604:	sub	sp, fp, #4
    2608:	pop	{fp, pc}

0000260c <get_compound_if_visible>:
    260c:	push	{fp, lr}
    2610:	add	fp, sp, #4
    2614:	sub	sp, sp, #16
    2618:	str	r0, [fp, #-16]
    261c:	str	r1, [fp, #-20]	; 0xffffffec
    2620:	mov	r3, #0
    2624:	str	r3, [fp, #-8]
    2628:	ldr	r3, [fp, #-20]	; 0xffffffec
    262c:	ldrh	r3, [r3, #8]
    2630:	add	r3, r3, #0
    2634:	cmp	r3, #4
    2638:	bhi	2678 <get_compound_if_visible+0x6c>
    263c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2640:	str	r3, [fp, #-8]
    2644:	ldr	r3, [fp, #-16]
    2648:	add	r2, r3, #172	; 0xac
    264c:	ldr	r3, [fp, #-8]
    2650:	ldr	r3, [r3, #16]
    2654:	mov	r1, r3
    2658:	mov	r0, r2
    265c:	bl	25cc <ptr_set_exists>
    2660:	mov	r3, r0
    2664:	cmp	r3, #0
    2668:	bne	2680 <get_compound_if_visible+0x74>
    266c:	mov	r3, #0
    2670:	str	r3, [fp, #-8]
    2674:	b	2680 <get_compound_if_visible+0x74>
    2678:	nop			; (mov r0, r0)
    267c:	b	2684 <get_compound_if_visible+0x78>
    2680:	nop			; (mov r0, r0)
    2684:	ldr	r3, [fp, #-8]
    2688:	mov	r0, r3
    268c:	sub	sp, fp, #4
    2690:	pop	{fp, pc}

00002694 <checkmem>:
    2694:	push	{fp, lr}
    2698:	add	fp, sp, #4
    269c:	sub	sp, sp, #8
    26a0:	str	r0, [fp, #-8]
    26a4:	ldr	r3, [fp, #-8]
    26a8:	cmp	r3, #0
    26ac:	bne	26d0 <checkmem+0x3c>
    26b0:	ldr	r3, [pc, #36]	; 26dc <checkmem+0x48>
    26b4:	ldr	r3, [r3]
    26b8:	mov	r2, #34	; 0x22
    26bc:	mov	r1, #1
    26c0:	ldr	r0, [pc, #24]	; 26e0 <checkmem+0x4c>
    26c4:	bl	0 <fwrite>
    26c8:	mov	r0, #1
    26cc:	bl	0 <exit>
    26d0:	nop			; (mov r0, r0)
    26d4:	sub	sp, fp, #4
    26d8:	pop	{fp, pc}
    26dc:	.word	0x00000000
    26e0:	.word	0x000004f8

000026e4 <error_tok_2>:
    26e4:	push	{fp, lr}
    26e8:	add	fp, sp, #4
    26ec:	sub	sp, sp, #24
    26f0:	str	r0, [fp, #-8]
    26f4:	str	r1, [fp, #-12]
    26f8:	str	r2, [fp, #-16]
    26fc:	str	r3, [fp, #-20]	; 0xffffffec
    2700:	mov	r3, #0
    2704:	str	r3, [sp, #4]
    2708:	mov	r3, #0
    270c:	str	r3, [sp]
    2710:	ldr	r3, [fp, #-20]	; 0xffffffec
    2714:	ldr	r2, [fp, #-16]
    2718:	ldr	r1, [fp, #-12]
    271c:	ldr	r0, [fp, #-8]
    2720:	bl	0 <__flatcc_error_report>
    2724:	nop			; (mov r0, r0)
    2728:	sub	sp, fp, #4
    272c:	pop	{fp, pc}

00002730 <count_symbol>:
    2730:	push	{fp, lr}
    2734:	add	fp, sp, #4
    2738:	sub	sp, sp, #24
    273c:	str	r0, [fp, #-24]	; 0xffffffe8
    2740:	str	r1, [fp, #-28]	; 0xffffffe4
    2744:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2748:	str	r3, [fp, #-16]
    274c:	mov	r3, #0
    2750:	str	r3, [fp, #-12]
    2754:	ldr	r3, [fp, #-16]
    2758:	ldr	r3, [r3, #40]	; 0x28
    275c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2760:	mov	r0, r3
    2764:	bl	260c <get_compound_if_visible>
    2768:	str	r0, [fp, #-20]	; 0xffffffec
    276c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2770:	cmp	r3, #0
    2774:	beq	2864 <count_symbol+0x134>
    2778:	ldr	r3, [fp, #-16]
    277c:	ldr	r3, [r3]
    2780:	cmp	r3, #0
    2784:	beq	27d4 <count_symbol+0xa4>
    2788:	ldr	r3, [fp, #-20]	; 0xffffffec
    278c:	ldr	r3, [r3, #12]
    2790:	ldr	r3, [r3]
    2794:	str	r3, [fp, #-8]
    2798:	b	27c8 <count_symbol+0x98>
    279c:	ldr	r3, [fp, #-8]
    27a0:	ldr	r3, [r3, #4]
    27a4:	ldr	r3, [r3, #4]
    27a8:	mov	r2, r3
    27ac:	ldr	r3, [fp, #-12]
    27b0:	add	r3, r2, r3
    27b4:	add	r3, r3, #1
    27b8:	str	r3, [fp, #-12]
    27bc:	ldr	r3, [fp, #-8]
    27c0:	ldr	r3, [r3]
    27c4:	str	r3, [fp, #-8]
    27c8:	ldr	r3, [fp, #-8]
    27cc:	cmp	r3, #0
    27d0:	bne	279c <count_symbol+0x6c>
    27d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    27d8:	ldr	r3, [r3, #4]
    27dc:	ldr	r3, [r3, #4]
    27e0:	mov	r2, r3
    27e4:	ldr	r3, [fp, #-12]
    27e8:	add	r3, r2, r3
    27ec:	add	r3, r3, #1
    27f0:	str	r3, [fp, #-12]
    27f4:	ldr	r3, [fp, #-16]
    27f8:	ldr	r2, [r3, #12]
    27fc:	ldr	r3, [fp, #-12]
    2800:	add	r2, r2, r3
    2804:	ldr	r3, [fp, #-16]
    2808:	str	r2, [r3, #12]
    280c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2810:	ldrh	r3, [r3, #8]
    2814:	cmp	r3, #4
    2818:	ldrls	pc, [pc, r3, lsl #2]
    281c:	b	286c <count_symbol+0x13c>
    2820:	.word	0x00002834
    2824:	.word	0x00002834
    2828:	.word	0x0000286c
    282c:	.word	0x0000284c
    2830:	.word	0x0000284c
    2834:	ldr	r3, [fp, #-16]
    2838:	ldr	r3, [r3, #4]
    283c:	add	r2, r3, #1
    2840:	ldr	r3, [fp, #-16]
    2844:	str	r2, [r3, #4]
    2848:	b	2870 <count_symbol+0x140>
    284c:	ldr	r3, [fp, #-16]
    2850:	ldr	r3, [r3, #8]
    2854:	add	r2, r3, #1
    2858:	ldr	r3, [fp, #-16]
    285c:	str	r2, [r3, #8]
    2860:	b	2870 <count_symbol+0x140>
    2864:	nop			; (mov r0, r0)
    2868:	b	2870 <count_symbol+0x140>
    286c:	nop			; (mov r0, r0)
    2870:	sub	sp, fp, #4
    2874:	pop	{fp, pc}

00002878 <install_symbol>:
    2878:	push	{fp, lr}
    287c:	add	fp, sp, #4
    2880:	sub	sp, sp, #32
    2884:	str	r0, [fp, #-32]	; 0xffffffe0
    2888:	str	r1, [fp, #-36]	; 0xffffffdc
    288c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2890:	str	r3, [fp, #-16]
    2894:	mov	r3, #0
    2898:	str	r3, [fp, #-20]	; 0xffffffec
    289c:	ldr	r3, [fp, #-16]
    28a0:	ldr	r3, [r3, #40]	; 0x28
    28a4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    28a8:	mov	r0, r3
    28ac:	bl	260c <get_compound_if_visible>
    28b0:	str	r0, [fp, #-24]	; 0xffffffe8
    28b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    28b8:	cmp	r3, #0
    28bc:	beq	2a54 <install_symbol+0x1dc>
    28c0:	ldr	r3, [fp, #-16]
    28c4:	ldr	r3, [r3, #36]	; 0x24
    28c8:	str	r3, [fp, #-12]
    28cc:	ldr	r3, [fp, #-12]
    28d0:	str	r3, [fp, #-28]	; 0xffffffe4
    28d4:	ldr	r3, [fp, #-16]
    28d8:	ldr	r3, [r3]
    28dc:	cmp	r3, #0
    28e0:	beq	2960 <install_symbol+0xe8>
    28e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    28e8:	ldr	r3, [r3, #12]
    28ec:	ldr	r3, [r3]
    28f0:	str	r3, [fp, #-8]
    28f4:	b	2954 <install_symbol+0xdc>
    28f8:	ldr	r3, [fp, #-8]
    28fc:	ldr	r3, [r3, #4]
    2900:	ldr	r3, [r3, #4]
    2904:	str	r3, [fp, #-20]	; 0xffffffec
    2908:	ldr	r3, [fp, #-8]
    290c:	ldr	r3, [r3, #4]
    2910:	ldr	r3, [r3]
    2914:	ldr	r2, [fp, #-20]	; 0xffffffec
    2918:	mov	r1, r3
    291c:	ldr	r0, [fp, #-12]
    2920:	bl	0 <memcpy>
    2924:	ldr	r3, [fp, #-20]	; 0xffffffec
    2928:	ldr	r2, [fp, #-12]
    292c:	add	r3, r2, r3
    2930:	str	r3, [fp, #-12]
    2934:	ldr	r3, [fp, #-12]
    2938:	add	r2, r3, #1
    293c:	str	r2, [fp, #-12]
    2940:	mov	r2, #46	; 0x2e
    2944:	strb	r2, [r3]
    2948:	ldr	r3, [fp, #-8]
    294c:	ldr	r3, [r3]
    2950:	str	r3, [fp, #-8]
    2954:	ldr	r3, [fp, #-8]
    2958:	cmp	r3, #0
    295c:	bne	28f8 <install_symbol+0x80>
    2960:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2964:	ldr	r3, [r3, #4]
    2968:	ldr	r3, [r3, #4]
    296c:	str	r3, [fp, #-20]	; 0xffffffec
    2970:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2974:	ldr	r3, [r3, #4]
    2978:	ldr	r3, [r3]
    297c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2980:	mov	r1, r3
    2984:	ldr	r0, [fp, #-12]
    2988:	bl	0 <memcpy>
    298c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2990:	ldr	r2, [fp, #-12]
    2994:	add	r3, r2, r3
    2998:	str	r3, [fp, #-12]
    299c:	ldr	r3, [fp, #-12]
    29a0:	add	r2, r3, #1
    29a4:	str	r2, [fp, #-12]
    29a8:	mov	r2, #0
    29ac:	strb	r2, [r3]
    29b0:	ldr	r3, [fp, #-16]
    29b4:	ldr	r2, [fp, #-12]
    29b8:	str	r2, [r3, #36]	; 0x24
    29bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    29c0:	ldrh	r3, [r3, #8]
    29c4:	cmp	r3, #4
    29c8:	ldrls	pc, [pc, r3, lsl #2]
    29cc:	b	2a5c <install_symbol+0x1e4>
    29d0:	.word	0x000029e4
    29d4:	.word	0x000029e4
    29d8:	.word	0x00002a5c
    29dc:	.word	0x00002a1c
    29e0:	.word	0x00002a1c
    29e4:	ldr	r3, [fp, #-16]
    29e8:	ldr	r3, [r3, #28]
    29ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
    29f0:	str	r2, [r3]
    29f4:	ldr	r3, [fp, #-16]
    29f8:	ldr	r3, [r3, #28]
    29fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2a00:	str	r2, [r3, #4]
    2a04:	ldr	r3, [fp, #-16]
    2a08:	ldr	r3, [r3, #28]
    2a0c:	add	r2, r3, #8
    2a10:	ldr	r3, [fp, #-16]
    2a14:	str	r2, [r3, #28]
    2a18:	b	2a60 <install_symbol+0x1e8>
    2a1c:	ldr	r3, [fp, #-16]
    2a20:	ldr	r3, [r3, #32]
    2a24:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2a28:	str	r2, [r3]
    2a2c:	ldr	r3, [fp, #-16]
    2a30:	ldr	r3, [r3, #32]
    2a34:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2a38:	str	r2, [r3, #4]
    2a3c:	ldr	r3, [fp, #-16]
    2a40:	ldr	r3, [r3, #32]
    2a44:	add	r2, r3, #8
    2a48:	ldr	r3, [fp, #-16]
    2a4c:	str	r2, [r3, #32]
    2a50:	b	2a60 <install_symbol+0x1e8>
    2a54:	nop			; (mov r0, r0)
    2a58:	b	2a60 <install_symbol+0x1e8>
    2a5c:	nop			; (mov r0, r0)
    2a60:	sub	sp, fp, #4
    2a64:	pop	{fp, pc}

00002a68 <count_symbols>:
    2a68:	push	{fp, lr}
    2a6c:	add	fp, sp, #4
    2a70:	sub	sp, sp, #8
    2a74:	str	r0, [fp, #-8]
    2a78:	str	r1, [fp, #-12]
    2a7c:	ldr	r3, [fp, #-12]
    2a80:	add	r3, r3, #4
    2a84:	ldr	r2, [fp, #-8]
    2a88:	ldr	r1, [pc, #16]	; 2aa0 <count_symbols+0x38>
    2a8c:	mov	r0, r3
    2a90:	bl	0 <fb_symbol_table_visit>
    2a94:	nop			; (mov r0, r0)
    2a98:	sub	sp, fp, #4
    2a9c:	pop	{fp, pc}
    2aa0:	.word	0x00000000

00002aa4 <install_symbols>:
    2aa4:	push	{fp, lr}
    2aa8:	add	fp, sp, #4
    2aac:	sub	sp, sp, #8
    2ab0:	str	r0, [fp, #-8]
    2ab4:	str	r1, [fp, #-12]
    2ab8:	ldr	r3, [fp, #-12]
    2abc:	add	r3, r3, #4
    2ac0:	ldr	r2, [fp, #-8]
    2ac4:	ldr	r1, [pc, #16]	; 2adc <install_symbols+0x38>
    2ac8:	mov	r0, r3
    2acc:	bl	0 <fb_symbol_table_visit>
    2ad0:	nop			; (mov r0, r0)
    2ad4:	sub	sp, fp, #4
    2ad8:	pop	{fp, pc}
    2adc:	.word	0x00000000

00002ae0 <compare_entries>:
    2ae0:	push	{fp, lr}
    2ae4:	add	fp, sp, #4
    2ae8:	sub	sp, sp, #8
    2aec:	str	r0, [fp, #-8]
    2af0:	str	r1, [fp, #-12]
    2af4:	ldr	r3, [fp, #-8]
    2af8:	ldr	r2, [r3, #4]
    2afc:	ldr	r3, [fp, #-12]
    2b00:	ldr	r3, [r3, #4]
    2b04:	mov	r1, r3
    2b08:	mov	r0, r2
    2b0c:	bl	0 <strcmp>
    2b10:	mov	r3, r0
    2b14:	mov	r0, r3
    2b18:	sub	sp, fp, #4
    2b1c:	pop	{fp, pc}

00002b20 <sort_entries>:
    2b20:	push	{fp, lr}
    2b24:	add	fp, sp, #4
    2b28:	sub	sp, sp, #16
    2b2c:	str	r0, [fp, #-16]
    2b30:	str	r1, [fp, #-20]	; 0xffffffec
    2b34:	ldr	r1, [fp, #-20]	; 0xffffffec
    2b38:	ldr	r3, [pc, #88]	; 2b98 <sort_entries+0x78>
    2b3c:	mov	r2, #8
    2b40:	ldr	r0, [fp, #-16]
    2b44:	bl	0 <qsort>
    2b48:	mov	r3, #0
    2b4c:	str	r3, [fp, #-8]
    2b50:	b	2b7c <sort_entries+0x5c>
    2b54:	ldr	r3, [fp, #-8]
    2b58:	lsl	r3, r3, #3
    2b5c:	ldr	r2, [fp, #-16]
    2b60:	add	r3, r2, r3
    2b64:	ldr	r3, [r3]
    2b68:	ldr	r2, [fp, #-8]
    2b6c:	str	r2, [r3, #124]	; 0x7c
    2b70:	ldr	r3, [fp, #-8]
    2b74:	add	r3, r3, #1
    2b78:	str	r3, [fp, #-8]
    2b7c:	ldr	r2, [fp, #-8]
    2b80:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b84:	cmp	r2, r3
    2b88:	blt	2b54 <sort_entries+0x34>
    2b8c:	nop			; (mov r0, r0)
    2b90:	sub	sp, fp, #4
    2b94:	pop	{fp, pc}
    2b98:	.word	0x00000000

00002b9c <clear_catalog>:
    2b9c:	push	{fp, lr}
    2ba0:	add	fp, sp, #4
    2ba4:	sub	sp, sp, #8
    2ba8:	str	r0, [fp, #-8]
    2bac:	ldr	r3, [fp, #-8]
    2bb0:	ldr	r3, [r3, #16]
    2bb4:	cmp	r3, #0
    2bb8:	beq	2bcc <clear_catalog+0x30>
    2bbc:	ldr	r3, [fp, #-8]
    2bc0:	ldr	r3, [r3, #16]
    2bc4:	mov	r0, r3
    2bc8:	bl	0 <free>
    2bcc:	ldr	r3, [fp, #-8]
    2bd0:	ldr	r3, [r3, #20]
    2bd4:	cmp	r3, #0
    2bd8:	beq	2bec <clear_catalog+0x50>
    2bdc:	ldr	r3, [fp, #-8]
    2be0:	ldr	r3, [r3, #20]
    2be4:	mov	r0, r3
    2be8:	bl	0 <free>
    2bec:	ldr	r3, [fp, #-8]
    2bf0:	ldr	r3, [r3, #24]
    2bf4:	cmp	r3, #0
    2bf8:	beq	2c0c <clear_catalog+0x70>
    2bfc:	ldr	r3, [fp, #-8]
    2c00:	ldr	r3, [r3, #24]
    2c04:	mov	r0, r3
    2c08:	bl	0 <free>
    2c0c:	mov	r2, #44	; 0x2c
    2c10:	mov	r1, #0
    2c14:	ldr	r0, [fp, #-8]
    2c18:	bl	0 <memset>
    2c1c:	nop			; (mov r0, r0)
    2c20:	sub	sp, fp, #4
    2c24:	pop	{fp, pc}

00002c28 <build_catalog>:
    2c28:	push	{fp, lr}
    2c2c:	add	fp, sp, #4
    2c30:	sub	sp, sp, #16
    2c34:	str	r0, [fp, #-8]
    2c38:	str	r1, [fp, #-12]
    2c3c:	str	r2, [fp, #-16]
    2c40:	str	r3, [fp, #-20]	; 0xffffffec
    2c44:	mov	r2, #44	; 0x2c
    2c48:	mov	r1, #0
    2c4c:	ldr	r0, [fp, #-8]
    2c50:	bl	0 <memset>
    2c54:	ldr	r3, [fp, #-8]
    2c58:	ldr	r2, [fp, #-16]
    2c5c:	str	r2, [r3]
    2c60:	ldr	r3, [fp, #-8]
    2c64:	ldr	r2, [fp, #-12]
    2c68:	str	r2, [r3, #40]	; 0x28
    2c6c:	ldr	r2, [fp, #-8]
    2c70:	ldr	r1, [pc, #356]	; 2ddc <build_catalog+0x1b4>
    2c74:	ldr	r0, [fp, #-20]	; 0xffffffec
    2c78:	bl	0 <fb_scope_table_visit>
    2c7c:	ldr	r3, [fp, #-8]
    2c80:	ldr	r3, [r3, #4]
    2c84:	mov	r1, #8
    2c88:	mov	r0, r3
    2c8c:	bl	0 <calloc>
    2c90:	mov	r3, r0
    2c94:	mov	r2, r3
    2c98:	ldr	r3, [fp, #-8]
    2c9c:	str	r2, [r3, #16]
    2ca0:	ldr	r3, [fp, #-8]
    2ca4:	ldr	r3, [r3, #8]
    2ca8:	mov	r1, #8
    2cac:	mov	r0, r3
    2cb0:	bl	0 <calloc>
    2cb4:	mov	r3, r0
    2cb8:	mov	r2, r3
    2cbc:	ldr	r3, [fp, #-8]
    2cc0:	str	r2, [r3, #20]
    2cc4:	ldr	r3, [fp, #-8]
    2cc8:	ldr	r3, [r3, #12]
    2ccc:	mov	r0, r3
    2cd0:	bl	0 <malloc>
    2cd4:	mov	r3, r0
    2cd8:	mov	r2, r3
    2cdc:	ldr	r3, [fp, #-8]
    2ce0:	str	r2, [r3, #24]
    2ce4:	ldr	r3, [fp, #-8]
    2ce8:	ldr	r2, [r3, #16]
    2cec:	ldr	r3, [fp, #-8]
    2cf0:	str	r2, [r3, #28]
    2cf4:	ldr	r3, [fp, #-8]
    2cf8:	ldr	r2, [r3, #20]
    2cfc:	ldr	r3, [fp, #-8]
    2d00:	str	r2, [r3, #32]
    2d04:	ldr	r3, [fp, #-8]
    2d08:	ldr	r2, [r3, #24]
    2d0c:	ldr	r3, [fp, #-8]
    2d10:	str	r2, [r3, #36]	; 0x24
    2d14:	ldr	r3, [fp, #-8]
    2d18:	ldr	r3, [r3, #16]
    2d1c:	cmp	r3, #0
    2d20:	bne	2d34 <build_catalog+0x10c>
    2d24:	ldr	r3, [fp, #-8]
    2d28:	ldr	r3, [r3, #4]
    2d2c:	cmp	r3, #0
    2d30:	bgt	2d74 <build_catalog+0x14c>
    2d34:	ldr	r3, [fp, #-8]
    2d38:	ldr	r3, [r3, #20]
    2d3c:	cmp	r3, #0
    2d40:	bne	2d54 <build_catalog+0x12c>
    2d44:	ldr	r3, [fp, #-8]
    2d48:	ldr	r3, [r3, #8]
    2d4c:	cmp	r3, #0
    2d50:	bgt	2d74 <build_catalog+0x14c>
    2d54:	ldr	r3, [fp, #-8]
    2d58:	ldr	r3, [r3, #24]
    2d5c:	cmp	r3, #0
    2d60:	bne	2d84 <build_catalog+0x15c>
    2d64:	ldr	r3, [fp, #-8]
    2d68:	ldr	r3, [r3, #12]
    2d6c:	cmp	r3, #0
    2d70:	beq	2d84 <build_catalog+0x15c>
    2d74:	ldr	r0, [fp, #-8]
    2d78:	bl	2b9c <clear_catalog>
    2d7c:	mvn	r3, #0
    2d80:	b	2dd0 <build_catalog+0x1a8>
    2d84:	ldr	r2, [fp, #-8]
    2d88:	ldr	r1, [pc, #80]	; 2de0 <build_catalog+0x1b8>
    2d8c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2d90:	bl	0 <fb_scope_table_visit>
    2d94:	ldr	r3, [fp, #-8]
    2d98:	ldr	r2, [r3, #16]
    2d9c:	ldr	r3, [fp, #-8]
    2da0:	ldr	r3, [r3, #4]
    2da4:	mov	r1, r3
    2da8:	mov	r0, r2
    2dac:	bl	2b20 <sort_entries>
    2db0:	ldr	r3, [fp, #-8]
    2db4:	ldr	r2, [r3, #20]
    2db8:	ldr	r3, [fp, #-8]
    2dbc:	ldr	r3, [r3, #8]
    2dc0:	mov	r1, r3
    2dc4:	mov	r0, r2
    2dc8:	bl	2b20 <sort_entries>
    2dcc:	mov	r3, #0
    2dd0:	mov	r0, r3
    2dd4:	sub	sp, fp, #4
    2dd8:	pop	{fp, pc}
	...

00002de4 <export_type>:
    2de4:	sub	sp, sp, #8
    2de8:	push	{fp, lr}
    2dec:	add	fp, sp, #4
    2df0:	sub	sp, sp, #24
    2df4:	str	r0, [fp, #-24]	; 0xffffffe8
    2df8:	add	r1, fp, #4
    2dfc:	stm	r1, {r2, r3}
    2e00:	mov	r3, #0
    2e04:	str	r3, [fp, #-8]
    2e08:	mvn	r3, #0
    2e0c:	str	r3, [fp, #-12]
    2e10:	mov	r3, #0
    2e14:	strb	r3, [fp, #-13]
    2e18:	mov	r3, #0
    2e1c:	strb	r3, [fp, #-14]
    2e20:	mov	r3, #0
    2e24:	strb	r3, [fp, #-15]
    2e28:	ldrh	r3, [fp, #12]
    2e2c:	sub	r3, r3, #2
    2e30:	cmp	r3, #13
    2e34:	ldrls	pc, [pc, r3, lsl #2]
    2e38:	b	2f84 <export_type+0x1a0>
    2e3c:	.word	0x00002f0c
    2e40:	.word	0x00002f84
    2e44:	.word	0x00002f84
    2e48:	.word	0x00002f84
    2e4c:	.word	0x00002f84
    2e50:	.word	0x00002e80
    2e54:	.word	0x00002e74
    2e58:	.word	0x00002e94
    2e5c:	.word	0x00002f84
    2e60:	.word	0x00002f84
    2e64:	.word	0x00002f84
    2e68:	.word	0x00002f84
    2e6c:	.word	0x00002f18
    2e70:	.word	0x00002ea8
    2e74:	ldr	r3, [fp, #4]
    2e78:	str	r3, [fp, #-8]
    2e7c:	b	2f88 <export_type+0x1a4>
    2e80:	ldr	r3, [fp, #4]
    2e84:	str	r3, [fp, #-8]
    2e88:	mov	r3, #14
    2e8c:	strb	r3, [fp, #-13]
    2e90:	b	2f88 <export_type+0x1a4>
    2e94:	mov	r3, #13
    2e98:	strb	r3, [fp, #-14]
    2e9c:	mov	r3, #14
    2ea0:	strb	r3, [fp, #-13]
    2ea4:	b	2f88 <export_type+0x1a4>
    2ea8:	ldr	r3, [fp, #4]
    2eac:	ldr	r3, [r3, #124]	; 0x7c
    2eb0:	str	r3, [fp, #-12]
    2eb4:	ldr	r3, [fp, #4]
    2eb8:	ldrh	r3, [r3, #8]
    2ebc:	cmp	r3, #0
    2ec0:	blt	2f04 <export_type+0x120>
    2ec4:	cmp	r3, #1
    2ec8:	ble	2ef0 <export_type+0x10c>
    2ecc:	cmp	r3, #3
    2ed0:	beq	2ed8 <export_type+0xf4>
    2ed4:	b	2f04 <export_type+0x120>
    2ed8:	ldr	r3, [fp, #4]
    2edc:	ldr	r3, [r3, #40]	; 0x28
    2ee0:	str	r3, [fp, #-8]
    2ee4:	mov	r3, #14
    2ee8:	strb	r3, [fp, #-13]
    2eec:	b	2f08 <export_type+0x124>
    2ef0:	mov	r3, #14
    2ef4:	strb	r3, [fp, #-13]
    2ef8:	mov	r3, #15
    2efc:	strb	r3, [fp, #-14]
    2f00:	b	2f08 <export_type+0x124>
    2f04:	nop			; (mov r0, r0)
    2f08:	b	2f88 <export_type+0x1a4>
    2f0c:	mov	r3, #13
    2f10:	strb	r3, [fp, #-13]
    2f14:	b	2f88 <export_type+0x1a4>
    2f18:	ldr	r3, [fp, #4]
    2f1c:	ldr	r3, [r3, #124]	; 0x7c
    2f20:	str	r3, [fp, #-12]
    2f24:	ldr	r3, [fp, #4]
    2f28:	ldrh	r3, [r3, #8]
    2f2c:	cmp	r3, #4
    2f30:	ldrls	pc, [pc, r3, lsl #2]
    2f34:	b	2f74 <export_type+0x190>
    2f38:	.word	0x00002f5c
    2f3c:	.word	0x00002f5c
    2f40:	.word	0x00002f74
    2f44:	.word	0x00002f4c
    2f48:	.word	0x00002f68
    2f4c:	ldr	r3, [fp, #4]
    2f50:	ldr	r3, [r3, #40]	; 0x28
    2f54:	str	r3, [fp, #-8]
    2f58:	b	2f80 <export_type+0x19c>
    2f5c:	mov	r3, #15
    2f60:	strb	r3, [fp, #-13]
    2f64:	b	2f80 <export_type+0x19c>
    2f68:	mov	r3, #16
    2f6c:	strb	r3, [fp, #-13]
    2f70:	b	2f80 <export_type+0x19c>
    2f74:	mvn	r3, #0
    2f78:	str	r3, [fp, #-12]
    2f7c:	nop			; (mov r0, r0)
    2f80:	b	2f88 <export_type+0x1a4>
    2f84:	nop			; (mov r0, r0)
    2f88:	ldr	r3, [fp, #-8]
    2f8c:	cmp	r3, #11
    2f90:	ldrls	pc, [pc, r3, lsl #2]
    2f94:	b	304c <export_type+0x268>
    2f98:	.word	0x0000304c
    2f9c:	.word	0x00002fc8
    2fa0:	.word	0x00002fd4
    2fa4:	.word	0x00002fe0
    2fa8:	.word	0x00002fec
    2fac:	.word	0x00002ff8
    2fb0:	.word	0x00003004
    2fb4:	.word	0x00003010
    2fb8:	.word	0x0000301c
    2fbc:	.word	0x00003028
    2fc0:	.word	0x00003034
    2fc4:	.word	0x00003040
    2fc8:	mov	r3, #10
    2fcc:	strb	r3, [fp, #-15]
    2fd0:	b	3050 <export_type+0x26c>
    2fd4:	mov	r3, #8
    2fd8:	strb	r3, [fp, #-15]
    2fdc:	b	3050 <export_type+0x26c>
    2fe0:	mov	r3, #6
    2fe4:	strb	r3, [fp, #-15]
    2fe8:	b	3050 <export_type+0x26c>
    2fec:	mov	r3, #4
    2ff0:	strb	r3, [fp, #-15]
    2ff4:	b	3050 <export_type+0x26c>
    2ff8:	mov	r3, #2
    2ffc:	strb	r3, [fp, #-15]
    3000:	b	3050 <export_type+0x26c>
    3004:	mov	r3, #9
    3008:	strb	r3, [fp, #-15]
    300c:	b	3050 <export_type+0x26c>
    3010:	mov	r3, #7
    3014:	strb	r3, [fp, #-15]
    3018:	b	3050 <export_type+0x26c>
    301c:	mov	r3, #5
    3020:	strb	r3, [fp, #-15]
    3024:	b	3050 <export_type+0x26c>
    3028:	mov	r3, #3
    302c:	strb	r3, [fp, #-15]
    3030:	b	3050 <export_type+0x26c>
    3034:	mov	r3, #12
    3038:	strb	r3, [fp, #-15]
    303c:	b	3050 <export_type+0x26c>
    3040:	mov	r3, #11
    3044:	strb	r3, [fp, #-15]
    3048:	b	3050 <export_type+0x26c>
    304c:	nop			; (mov r0, r0)
    3050:	ldrsb	r3, [fp, #-13]
    3054:	cmp	r3, #0
    3058:	bne	3068 <export_type+0x284>
    305c:	ldrb	r3, [fp, #-15]
    3060:	strb	r3, [fp, #-13]
    3064:	b	3088 <export_type+0x2a4>
    3068:	ldrsb	r3, [fp, #-13]
    306c:	cmp	r3, #14
    3070:	bne	3088 <export_type+0x2a4>
    3074:	ldrsb	r3, [fp, #-14]
    3078:	cmp	r3, #0
    307c:	bne	3088 <export_type+0x2a4>
    3080:	ldrb	r3, [fp, #-15]
    3084:	strb	r3, [fp, #-14]
    3088:	ldrsb	r2, [fp, #-14]
    308c:	ldrsb	r1, [fp, #-13]
    3090:	ldr	r3, [fp, #-12]
    3094:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3098:	bl	1480 <reflection_Type_create>
    309c:	mov	r3, r0
    30a0:	mov	r0, r3
    30a4:	sub	sp, fp, #4
    30a8:	pop	{fp, lr}
    30ac:	add	sp, sp, #8
    30b0:	bx	lr

000030b4 <export_fields>:
    30b4:	push	{fp, lr}
    30b8:	add	fp, sp, #4
    30bc:	sub	sp, sp, #48	; 0x30
    30c0:	str	r0, [fp, #-40]	; 0xffffffd8
    30c4:	str	r1, [fp, #-44]	; 0xffffffd4
    30c8:	mov	r3, #0
    30cc:	strb	r3, [fp, #-9]
    30d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    30d4:	ldr	r3, [r3, #20]
    30d8:	str	r3, [fp, #-8]
    30dc:	b	340c <export_fields+0x358>
    30e0:	ldr	r3, [fp, #-8]
    30e4:	str	r3, [fp, #-32]	; 0xffffffe0
    30e8:	ldrb	r3, [fp, #-9]
    30ec:	cmp	r3, #0
    30f0:	bne	3110 <export_fields+0x5c>
    30f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    30f8:	ldrh	r3, [r3, #72]	; 0x48
    30fc:	and	r3, r3, #128	; 0x80
    3100:	cmp	r3, #0
    3104:	beq	3110 <export_fields+0x5c>
    3108:	mov	r3, #1
    310c:	b	3114 <export_fields+0x60>
    3110:	mov	r3, #0
    3114:	strb	r3, [fp, #-33]	; 0xffffffdf
    3118:	ldr	r3, [fp, #-32]	; 0xffffffe0
    311c:	ldrh	r3, [r3, #72]	; 0x48
    3120:	and	r3, r3, #256	; 0x100
    3124:	cmp	r3, #0
    3128:	movne	r3, #1
    312c:	moveq	r3, #0
    3130:	uxtb	r3, r3
    3134:	strb	r3, [fp, #-34]	; 0xffffffde
    3138:	mov	r2, #0
    313c:	mov	r3, #0
    3140:	strd	r2, [fp, #-20]	; 0xffffffec
    3144:	mov	r2, #0
    3148:	mov	r3, #0
    314c:	strd	r2, [fp, #-28]	; 0xffffffe4
    3150:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3154:	ldrh	r3, [r3, #72]	; 0x48
    3158:	and	r3, r3, #4
    315c:	cmp	r3, #0
    3160:	movne	r3, #1
    3164:	moveq	r3, #0
    3168:	uxtb	r3, r3
    316c:	strb	r3, [fp, #-35]	; 0xffffffdd
    3170:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3174:	ldrh	r3, [r3, #24]
    3178:	cmp	r3, #14
    317c:	bne	3254 <export_fields+0x1a0>
    3180:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3184:	ldr	r3, [r3, #16]
    3188:	ldrh	r3, [r3, #8]
    318c:	cmp	r3, #4
    3190:	bne	3254 <export_fields+0x1a0>
    3194:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3198:	bl	1ecc <reflection_Field_vec_push_start>
    319c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    31a0:	bl	19f8 <reflection_Field_name_start>
    31a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    31a8:	ldr	r3, [r3, #4]
    31ac:	ldr	r1, [r3]
    31b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    31b4:	ldr	r3, [r3, #4]
    31b8:	ldr	r3, [r3, #4]
    31bc:	mov	r2, r3
    31c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    31c4:	bl	1aa0 <reflection_Field_name_append>
    31c8:	mov	r2, #5
    31cc:	ldr	r1, [pc, #592]	; 3424 <export_fields+0x370>
    31d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    31d4:	bl	1aa0 <reflection_Field_name_append>
    31d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    31dc:	bl	1a20 <reflection_Field_name_end>
    31e0:	mvn	r3, #0
    31e4:	mov	r2, #0
    31e8:	mov	r1, #1
    31ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
    31f0:	bl	1b38 <reflection_Field_type_create>
    31f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    31f8:	ldrd	r2, [r3, #96]	; 0x60
    31fc:	uxth	r3, r2
    3200:	add	r3, r3, #1
    3204:	uxth	r3, r3
    3208:	lsl	r3, r3, #1
    320c:	uxth	r3, r3
    3210:	mov	r1, r3
    3214:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3218:	bl	1c08 <reflection_Field_offset_add>
    321c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3220:	ldrd	r2, [r3, #96]	; 0x60
    3224:	uxth	r3, r2
    3228:	sub	r3, r3, #1
    322c:	uxth	r3, r3
    3230:	mov	r1, r3
    3234:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3238:	bl	1b90 <reflection_Field_id_add>
    323c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
    3240:	mov	r1, r3
    3244:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3248:	bl	1d64 <reflection_Field_deprecated_add>
    324c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3250:	bl	1ef4 <reflection_Field_vec_push_end>
    3254:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3258:	bl	1ecc <reflection_Field_vec_push_start>
    325c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3260:	ldr	r3, [r3, #4]
    3264:	ldr	r1, [r3]
    3268:	ldr	r3, [fp, #-32]	; 0xffffffe0
    326c:	ldr	r3, [r3, #4]
    3270:	ldr	r3, [r3, #4]
    3274:	mov	r2, r3
    3278:	ldr	r0, [fp, #-40]	; 0xffffffd8
    327c:	bl	1a58 <reflection_Field_name_create>
    3280:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3284:	mov	ip, sp
    3288:	add	r2, r3, #24
    328c:	ldm	r2, {r0, r1}
    3290:	stm	ip, {r0, r1}
    3294:	add	r3, r3, #16
    3298:	ldm	r3, {r2, r3}
    329c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    32a0:	bl	2de4 <export_type>
    32a4:	mov	r3, r0
    32a8:	mov	r1, r3
    32ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
    32b0:	bl	1ad8 <reflection_Field_type_add>
    32b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    32b8:	ldrh	r3, [r3, #8]
    32bc:	cmp	r3, #0
    32c0:	beq	32d0 <export_fields+0x21c>
    32c4:	cmp	r3, #1
    32c8:	beq	33bc <export_fields+0x308>
    32cc:	b	33d8 <export_fields+0x324>
    32d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    32d4:	ldrh	r3, [r3, #56]	; 0x38
    32d8:	sub	r3, r3, #3
    32dc:	cmp	r3, #3
    32e0:	ldrls	pc, [pc, r3, lsl #2]
    32e4:	b	3340 <export_fields+0x28c>
    32e8:	.word	0x00003330
    32ec:	.word	0x00003308
    32f0:	.word	0x000032f8
    32f4:	.word	0x00003318
    32f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    32fc:	ldrd	r2, [r3, #48]	; 0x30
    3300:	strd	r2, [fp, #-20]	; 0xffffffec
    3304:	b	3340 <export_fields+0x28c>
    3308:	ldr	r3, [fp, #-32]	; 0xffffffe0
    330c:	ldrd	r2, [r3, #48]	; 0x30
    3310:	strd	r2, [fp, #-20]	; 0xffffffec
    3314:	b	3340 <export_fields+0x28c>
    3318:	ldr	r3, [fp, #-32]	; 0xffffffe0
    331c:	ldrb	r3, [r3, #48]	; 0x30
    3320:	uxtb	r2, r3
    3324:	mov	r3, #0
    3328:	strd	r2, [fp, #-20]	; 0xffffffec
    332c:	b	3340 <export_fields+0x28c>
    3330:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3334:	ldrd	r2, [r3, #48]	; 0x30
    3338:	strd	r2, [fp, #-28]	; 0xffffffe4
    333c:	nop			; (mov r0, r0)
    3340:	ldrd	r2, [fp, #-20]	; 0xffffffec
    3344:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3348:	bl	1c80 <reflection_Field_default_integer_add>
    334c:	vldr	d0, [fp, #-28]	; 0xffffffe4
    3350:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3354:	bl	1cf0 <reflection_Field_default_real_add>
    3358:	ldr	r3, [fp, #-32]	; 0xffffffe0
    335c:	ldrd	r2, [r3, #96]	; 0x60
    3360:	uxth	r3, r2
    3364:	mov	r1, r3
    3368:	ldr	r0, [fp, #-40]	; 0xffffffd8
    336c:	bl	1b90 <reflection_Field_id_add>
    3370:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3374:	ldrd	r2, [r3, #96]	; 0x60
    3378:	uxth	r3, r2
    337c:	add	r3, r3, #2
    3380:	uxth	r3, r3
    3384:	lsl	r3, r3, #1
    3388:	uxth	r3, r3
    338c:	mov	r1, r3
    3390:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3394:	bl	1c08 <reflection_Field_offset_add>
    3398:	ldrb	r3, [fp, #-33]	; 0xffffffdf
    339c:	mov	r1, r3
    33a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    33a4:	bl	1e54 <reflection_Field_key_add>
    33a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
    33ac:	mov	r1, r3
    33b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    33b4:	bl	1ddc <reflection_Field_required_add>
    33b8:	b	33d8 <export_fields+0x324>
    33bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    33c0:	ldrd	r2, [r3, #80]	; 0x50
    33c4:	uxth	r3, r2
    33c8:	mov	r1, r3
    33cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    33d0:	bl	1c08 <reflection_Field_offset_add>
    33d4:	nop			; (mov r0, r0)
    33d8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
    33dc:	mov	r1, r3
    33e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    33e4:	bl	1d64 <reflection_Field_deprecated_add>
    33e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    33ec:	bl	1ef4 <reflection_Field_vec_push_end>
    33f0:	ldrb	r2, [fp, #-9]
    33f4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
    33f8:	orr	r3, r2, r3
    33fc:	strb	r3, [fp, #-9]
    3400:	ldr	r3, [fp, #-8]
    3404:	ldr	r3, [r3]
    3408:	str	r3, [fp, #-8]
    340c:	ldr	r3, [fp, #-8]
    3410:	cmp	r3, #0
    3414:	bne	30e0 <export_fields+0x2c>
    3418:	nop			; (mov r0, r0)
    341c:	sub	sp, fp, #4
    3420:	pop	{fp, pc}
    3424:	.word	0x0000051c

00003428 <export_objects>:
    3428:	push	{r4, fp, lr}
    342c:	add	fp, sp, #8
    3430:	sub	sp, sp, #36	; 0x24
    3434:	str	r0, [fp, #-32]	; 0xffffffe0
    3438:	str	r1, [fp, #-36]	; 0xffffffdc
    343c:	str	r2, [fp, #-40]	; 0xffffffd8
    3440:	str	r3, [fp, #-44]	; 0xffffffd4
    3444:	mov	r3, #0
    3448:	str	r3, [fp, #-16]
    344c:	b	3540 <export_objects+0x118>
    3450:	ldr	r3, [fp, #-16]
    3454:	lsl	r3, r3, #3
    3458:	ldr	r2, [fp, #-36]	; 0xffffffdc
    345c:	add	r3, r2, r3
    3460:	ldr	r3, [r3]
    3464:	str	r3, [fp, #-20]	; 0xffffffec
    3468:	ldr	r0, [fp, #-32]	; 0xffffffe0
    346c:	bl	11f8 <reflection_Object_start>
    3470:	ldr	r3, [fp, #-16]
    3474:	lsl	r3, r3, #3
    3478:	ldr	r2, [fp, #-36]	; 0xffffffdc
    347c:	add	r3, r2, r3
    3480:	ldr	r3, [r3, #4]
    3484:	mov	r1, r3
    3488:	ldr	r0, [fp, #-32]	; 0xffffffe0
    348c:	bl	1f8c <reflection_Object_name_create_str>
    3490:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3494:	bl	202c <reflection_Object_fields_start>
    3498:	ldr	r1, [fp, #-20]	; 0xffffffec
    349c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    34a0:	bl	30b4 <export_fields>
    34a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    34a8:	bl	2054 <reflection_Object_fields_end>
    34ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    34b0:	ldrh	r3, [r3, #8]
    34b4:	cmp	r3, #1
    34b8:	moveq	r3, #1
    34bc:	movne	r3, #0
    34c0:	uxtb	r3, r3
    34c4:	str	r3, [fp, #-24]	; 0xffffffe8
    34c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    34cc:	cmp	r3, #0
    34d0:	beq	34ec <export_objects+0xc4>
    34d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    34d8:	ldrd	r2, [r3, #112]	; 0x70
    34dc:	mov	r3, r2
    34e0:	mov	r1, r3
    34e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    34e8:	bl	2174 <reflection_Object_bytesize_add>
    34ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    34f0:	uxtb	r3, r3
    34f4:	mov	r1, r3
    34f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    34fc:	bl	208c <reflection_Object_is_struct_add>
    3500:	ldr	r3, [fp, #-20]	; 0xffffffec
    3504:	ldrh	r3, [r3, #104]	; 0x68
    3508:	mov	r1, r3
    350c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3510:	bl	2104 <reflection_Object_minalign_add>
    3514:	ldr	r3, [fp, #-16]
    3518:	lsl	r3, r3, #2
    351c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3520:	add	r4, r2, r3
    3524:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3528:	bl	1224 <reflection_Object_end>
    352c:	mov	r3, r0
    3530:	str	r3, [r4]
    3534:	ldr	r3, [fp, #-16]
    3538:	add	r3, r3, #1
    353c:	str	r3, [fp, #-16]
    3540:	ldr	r2, [fp, #-16]
    3544:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3548:	cmp	r2, r3
    354c:	blt	3450 <export_objects+0x28>
    3550:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3554:	mov	r2, r3
    3558:	ldr	r1, [fp, #-44]	; 0xffffffd4
    355c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3560:	bl	2244 <reflection_Schema_objects_create>
    3564:	nop			; (mov r0, r0)
    3568:	sub	sp, fp, #8
    356c:	pop	{r4, fp, pc}

00003570 <export_enumval>:
    3570:	push	{fp, lr}
    3574:	add	fp, sp, #4
    3578:	sub	sp, sp, #16
    357c:	str	r0, [fp, #-8]
    3580:	str	r1, [fp, #-12]
    3584:	str	r2, [fp, #-16]
    3588:	ldr	r0, [fp, #-8]
    358c:	bl	16a0 <reflection_EnumVal_vec_push_start>
    3590:	ldr	r3, [fp, #-12]
    3594:	ldr	r3, [r3, #4]
    3598:	ldr	r1, [r3]
    359c:	ldr	r3, [fp, #-12]
    35a0:	ldr	r3, [r3, #4]
    35a4:	ldr	r3, [r3, #4]
    35a8:	mov	r2, r3
    35ac:	ldr	r0, [fp, #-8]
    35b0:	bl	1588 <reflection_EnumVal_name_create>
    35b4:	ldr	r3, [fp, #-16]
    35b8:	cmp	r3, #0
    35bc:	beq	35f8 <export_enumval+0x88>
    35c0:	ldr	r3, [fp, #-12]
    35c4:	ldrh	r3, [r3, #24]
    35c8:	cmp	r3, #14
    35cc:	bne	35f8 <export_enumval+0x88>
    35d0:	ldr	r3, [fp, #-12]
    35d4:	ldr	r3, [r3, #16]
    35d8:	ldr	r3, [r3, #124]	; 0x7c
    35dc:	lsl	r3, r3, #2
    35e0:	ldr	r2, [fp, #-16]
    35e4:	add	r3, r2, r3
    35e8:	ldr	r3, [r3]
    35ec:	mov	r1, r3
    35f0:	ldr	r0, [fp, #-8]
    35f4:	bl	1640 <reflection_EnumVal_object_add>
    35f8:	ldr	r3, [fp, #-12]
    35fc:	ldrd	r2, [r3, #48]	; 0x30
    3600:	ldr	r0, [fp, #-8]
    3604:	bl	15d0 <reflection_EnumVal_value_add>
    3608:	ldr	r0, [fp, #-8]
    360c:	bl	16c8 <reflection_EnumVal_vec_push_end>
    3610:	nop			; (mov r0, r0)
    3614:	sub	sp, fp, #4
    3618:	pop	{fp, pc}

0000361c <export_enums>:
    361c:	push	{fp, lr}
    3620:	add	fp, sp, #4
    3624:	sub	sp, sp, #40	; 0x28
    3628:	str	r0, [fp, #-24]	; 0xffffffe8
    362c:	str	r1, [fp, #-28]	; 0xffffffe4
    3630:	str	r2, [fp, #-32]	; 0xffffffe0
    3634:	str	r3, [fp, #-36]	; 0xffffffdc
    3638:	ldr	r0, [fp, #-24]	; 0xffffffe8
    363c:	bl	22ec <reflection_Schema_enums_start>
    3640:	mov	r3, #0
    3644:	str	r3, [fp, #-8]
    3648:	b	3764 <export_enums+0x148>
    364c:	ldr	r3, [fp, #-8]
    3650:	lsl	r3, r3, #3
    3654:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3658:	add	r3, r2, r3
    365c:	ldr	r3, [r3]
    3660:	str	r3, [fp, #-16]
    3664:	ldr	r3, [fp, #-16]
    3668:	ldrh	r3, [r3, #8]
    366c:	cmp	r3, #4
    3670:	moveq	r3, #1
    3674:	movne	r3, #0
    3678:	uxtb	r3, r3
    367c:	str	r3, [fp, #-20]	; 0xffffffec
    3680:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3684:	bl	1938 <reflection_Enum_vec_push_start>
    3688:	ldr	r3, [fp, #-8]
    368c:	lsl	r3, r3, #3
    3690:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3694:	add	r3, r2, r3
    3698:	ldr	r3, [r3, #4]
    369c:	mov	r1, r3
    36a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    36a4:	bl	1760 <reflection_Enum_name_create_str>
    36a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    36ac:	bl	1800 <reflection_Enum_values_start>
    36b0:	ldr	r3, [fp, #-16]
    36b4:	ldr	r3, [r3, #20]
    36b8:	str	r3, [fp, #-12]
    36bc:	b	36f4 <export_enums+0xd8>
    36c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    36c4:	cmp	r3, #0
    36c8:	beq	36d4 <export_enums+0xb8>
    36cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    36d0:	b	36d8 <export_enums+0xbc>
    36d4:	mov	r3, #0
    36d8:	mov	r2, r3
    36dc:	ldr	r1, [fp, #-12]
    36e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    36e4:	bl	3570 <export_enumval>
    36e8:	ldr	r3, [fp, #-12]
    36ec:	ldr	r3, [r3]
    36f0:	str	r3, [fp, #-12]
    36f4:	ldr	r3, [fp, #-12]
    36f8:	cmp	r3, #0
    36fc:	bne	36c0 <export_enums+0xa4>
    3700:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3704:	bl	1828 <reflection_Enum_values_end>
    3708:	ldr	r3, [fp, #-20]	; 0xffffffec
    370c:	uxtb	r3, r3
    3710:	mov	r1, r3
    3714:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3718:	bl	1860 <reflection_Enum_is_union_add>
    371c:	ldr	r3, [fp, #-16]
    3720:	mov	ip, sp
    3724:	add	r2, r3, #48	; 0x30
    3728:	ldm	r2, {r0, r1}
    372c:	stm	ip, {r0, r1}
    3730:	add	r3, r3, #40	; 0x28
    3734:	ldm	r3, {r2, r3}
    3738:	ldr	r0, [fp, #-24]	; 0xffffffe8
    373c:	bl	2de4 <export_type>
    3740:	mov	r3, r0
    3744:	mov	r1, r3
    3748:	ldr	r0, [fp, #-24]	; 0xffffffe8
    374c:	bl	18d8 <reflection_Enum_underlying_type_add>
    3750:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3754:	bl	1960 <reflection_Enum_vec_push_end>
    3758:	ldr	r3, [fp, #-8]
    375c:	add	r3, r3, #1
    3760:	str	r3, [fp, #-8]
    3764:	ldr	r2, [fp, #-8]
    3768:	ldr	r3, [fp, #-32]	; 0xffffffe0
    376c:	cmp	r2, r3
    3770:	blt	364c <export_enums+0x30>
    3774:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3778:	bl	2314 <reflection_Schema_enums_end>
    377c:	nop			; (mov r0, r0)
    3780:	sub	sp, fp, #4
    3784:	pop	{fp, pc}

00003788 <export_root_type>:
    3788:	push	{fp, lr}
    378c:	add	fp, sp, #4
    3790:	sub	sp, sp, #24
    3794:	str	r0, [fp, #-16]
    3798:	str	r1, [fp, #-20]	; 0xffffffec
    379c:	str	r2, [fp, #-24]	; 0xffffffe8
    37a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    37a4:	cmp	r3, #0
    37a8:	beq	37e8 <export_root_type+0x60>
    37ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    37b0:	ldrh	r3, [r3, #8]
    37b4:	cmp	r3, #0
    37b8:	bne	37e8 <export_root_type+0x60>
    37bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    37c0:	str	r3, [fp, #-8]
    37c4:	ldr	r3, [fp, #-8]
    37c8:	ldr	r3, [r3, #124]	; 0x7c
    37cc:	lsl	r3, r3, #2
    37d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    37d4:	add	r3, r2, r3
    37d8:	ldr	r3, [r3]
    37dc:	mov	r1, r3
    37e0:	ldr	r0, [fp, #-16]
    37e4:	bl	249c <reflection_Schema_root_table_add>
    37e8:	nop			; (mov r0, r0)
    37ec:	sub	sp, fp, #4
    37f0:	pop	{fp, pc}

000037f4 <export_schema>:
    37f4:	push	{fp, lr}
    37f8:	add	fp, sp, #4
    37fc:	sub	sp, sp, #64	; 0x40
    3800:	str	r0, [fp, #-56]	; 0xffffffc8
    3804:	str	r1, [fp, #-60]	; 0xffffffc4
    3808:	str	r2, [fp, #-64]	; 0xffffffc0
    380c:	mov	r3, #0
    3810:	str	r3, [fp, #-8]
    3814:	ldr	r3, [fp, #-60]	; 0xffffffc4
    3818:	ldr	r2, [r3, #184]	; 0xb8
    381c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3820:	ldr	r3, [r3, #60]	; 0x3c
    3824:	sub	r0, fp, #52	; 0x34
    3828:	ldr	r1, [fp, #-64]	; 0xffffffc0
    382c:	bl	2c28 <build_catalog>
    3830:	mov	r3, r0
    3834:	cmp	r3, #0
    3838:	beq	3844 <export_schema+0x50>
    383c:	mvn	r3, #0
    3840:	b	3970 <export_schema+0x17c>
    3844:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3848:	cmp	r3, #0
    384c:	ble	3888 <export_schema+0x94>
    3850:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3854:	lsl	r3, r3, #2
    3858:	mov	r0, r3
    385c:	bl	0 <malloc>
    3860:	mov	r3, r0
    3864:	str	r3, [fp, #-8]
    3868:	ldr	r3, [fp, #-8]
    386c:	cmp	r3, #0
    3870:	bne	3888 <export_schema+0x94>
    3874:	sub	r3, fp, #52	; 0x34
    3878:	mov	r0, r3
    387c:	bl	2b9c <clear_catalog>
    3880:	mvn	r3, #0
    3884:	b	3970 <export_schema+0x17c>
    3888:	ldr	r3, [fp, #-60]	; 0xffffffc4
    388c:	ldr	r3, [r3, #188]	; 0xbc
    3890:	cmp	r3, #0
    3894:	beq	38a4 <export_schema+0xb0>
    3898:	ldr	r0, [fp, #-56]	; 0xffffffc8
    389c:	bl	2548 <reflection_Schema_start_as_root_with_size>
    38a0:	b	38ac <export_schema+0xb8>
    38a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    38a8:	bl	24fc <reflection_Schema_start_as_root>
    38ac:	ldr	r3, [fp, #-64]	; 0xffffffc0
    38b0:	ldrh	r3, [r3, #16]
    38b4:	cmp	r3, #2
    38b8:	bne	38d8 <export_schema+0xe4>
    38bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    38c0:	ldr	r1, [r3, #8]
    38c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    38c8:	ldr	r3, [r3, #12]
    38cc:	mov	r2, r3
    38d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    38d4:	bl	23ac <reflection_Schema_file_ident_create>
    38d8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    38dc:	ldrh	r3, [r3, #32]
    38e0:	cmp	r3, #2
    38e4:	bne	3904 <export_schema+0x110>
    38e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    38ec:	ldr	r1, [r3, #24]
    38f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    38f4:	ldr	r3, [r3, #28]
    38f8:	mov	r2, r3
    38fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3900:	bl	2454 <reflection_Schema_file_ext_create>
    3904:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3908:	ldr	r2, [fp, #-48]	; 0xffffffd0
    390c:	ldr	r3, [fp, #-8]
    3910:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3914:	bl	3428 <export_objects>
    3918:	ldr	r1, [fp, #-32]	; 0xffffffe0
    391c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3920:	ldr	r3, [fp, #-8]
    3924:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3928:	bl	361c <export_enums>
    392c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3930:	ldr	r3, [r3, #52]	; 0x34
    3934:	ldr	r2, [fp, #-8]
    3938:	mov	r1, r3
    393c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3940:	bl	3788 <export_root_type>
    3944:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3948:	bl	2594 <reflection_Schema_end_as_root>
    394c:	sub	r3, fp, #52	; 0x34
    3950:	mov	r0, r3
    3954:	bl	2b9c <clear_catalog>
    3958:	ldr	r3, [fp, #-8]
    395c:	cmp	r3, #0
    3960:	beq	396c <export_schema+0x178>
    3964:	ldr	r0, [fp, #-8]
    3968:	bl	0 <free>
    396c:	mov	r3, #0
    3970:	mov	r0, r3
    3974:	sub	sp, fp, #4
    3978:	pop	{fp, pc}

0000397c <sort_fields>:
    397c:	push	{fp, lr}
    3980:	add	fp, sp, #4
    3984:	sub	sp, sp, #32
    3988:	str	r0, [fp, #-32]	; 0xffffffe0
    398c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3990:	bl	b50 <reflection_Schema_as_root>
    3994:	str	r0, [fp, #-12]
    3998:	ldr	r0, [fp, #-12]
    399c:	bl	bb8 <reflection_Schema_objects>
    39a0:	str	r0, [fp, #-16]
    39a4:	mov	r3, #0
    39a8:	str	r3, [fp, #-8]
    39ac:	b	39e8 <sort_fields+0x6c>
    39b0:	ldr	r1, [fp, #-8]
    39b4:	ldr	r0, [fp, #-16]
    39b8:	bl	9c4 <reflection_Object_vec_at>
    39bc:	str	r0, [fp, #-20]	; 0xffffffec
    39c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    39c4:	bl	a44 <reflection_Object_fields>
    39c8:	str	r0, [fp, #-24]	; 0xffffffe8
    39cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    39d0:	str	r3, [fp, #-28]	; 0xffffffe4
    39d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    39d8:	bl	95c <reflection_Field_vec_sort_by_name>
    39dc:	ldr	r3, [fp, #-8]
    39e0:	add	r3, r3, #1
    39e4:	str	r3, [fp, #-8]
    39e8:	ldr	r0, [fp, #-16]
    39ec:	bl	980 <reflection_Object_vec_len>
    39f0:	mov	r2, r0
    39f4:	ldr	r3, [fp, #-8]
    39f8:	cmp	r2, r3
    39fc:	bhi	39b0 <sort_fields+0x34>
    3a00:	nop			; (mov r0, r0)
    3a04:	sub	sp, fp, #4
    3a08:	pop	{fp, pc}

00003a0c <open_file>:
    3a0c:	push	{fp, lr}
    3a10:	add	fp, sp, #4
    3a14:	sub	sp, sp, #48	; 0x30
    3a18:	str	r0, [fp, #-40]	; 0xffffffd8
    3a1c:	str	r1, [fp, #-44]	; 0xffffffd4
    3a20:	mov	r3, #0
    3a24:	str	r3, [fp, #-8]
    3a28:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3a2c:	ldr	r3, [r3, #216]	; 0xd8
    3a30:	cmp	r3, #0
    3a34:	beq	3a44 <open_file+0x38>
    3a38:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3a3c:	ldr	r3, [r3, #216]	; 0xd8
    3a40:	b	3a48 <open_file+0x3c>
    3a44:	ldr	r3, [pc, #196]	; 3b10 <open_file+0x104>
    3a48:	str	r3, [fp, #-12]
    3a4c:	ldr	r0, [fp, #-12]
    3a50:	bl	0 <strlen>
    3a54:	str	r0, [fp, #-16]
    3a58:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3a5c:	ldr	r3, [r3, #160]	; 0xa0
    3a60:	str	r3, [fp, #-20]	; 0xffffffec
    3a64:	ldr	r0, [fp, #-20]	; 0xffffffec
    3a68:	bl	0 <strlen>
    3a6c:	str	r0, [fp, #-24]	; 0xffffffe8
    3a70:	ldr	r3, [pc, #156]	; 3b14 <open_file+0x108>
    3a74:	str	r3, [fp, #-28]	; 0xffffffe4
    3a78:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3a7c:	ldr	r3, [r3, #108]	; 0x6c
    3a80:	cmp	r3, #0
    3a84:	beq	3a94 <open_file+0x88>
    3a88:	ldr	r3, [pc, #136]	; 3b18 <open_file+0x10c>
    3a8c:	ldr	r3, [r3]
    3a90:	b	3b04 <open_file+0xf8>
    3a94:	mov	r3, #1
    3a98:	str	r3, [sp, #4]
    3a9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3aa0:	str	r3, [sp]
    3aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3aa8:	ldr	r2, [fp, #-20]	; 0xffffffec
    3aac:	ldr	r1, [fp, #-16]
    3ab0:	ldr	r0, [fp, #-12]
    3ab4:	bl	0 <__flatcc_fb_create_join_path_n>
    3ab8:	str	r0, [fp, #-32]	; 0xffffffe0
    3abc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3ac0:	bl	2694 <checkmem>
    3ac4:	ldr	r1, [pc, #80]	; 3b1c <open_file+0x110>
    3ac8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3acc:	bl	0 <fopen>
    3ad0:	str	r0, [fp, #-8]
    3ad4:	ldr	r3, [fp, #-8]
    3ad8:	cmp	r3, #0
    3adc:	bne	3af8 <open_file+0xec>
    3ae0:	ldr	r3, [pc, #56]	; 3b20 <open_file+0x114>
    3ae4:	ldr	r3, [r3]
    3ae8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3aec:	ldr	r1, [pc, #48]	; 3b24 <open_file+0x118>
    3af0:	mov	r0, r3
    3af4:	bl	0 <fprintf>
    3af8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3afc:	bl	0 <free>
    3b00:	ldr	r3, [fp, #-8]
    3b04:	mov	r0, r3
    3b08:	sub	sp, fp, #4
    3b0c:	pop	{fp, pc}
    3b10:	.word	0x00000524
    3b14:	.word	0x00000528
    3b18:	.word	0x00000000
    3b1c:	.word	0x00000530
    3b20:	.word	0x00000000
    3b24:	.word	0x00000534

00003b28 <close_file>:
    3b28:	push	{fp, lr}
    3b2c:	add	fp, sp, #4
    3b30:	sub	sp, sp, #8
    3b34:	str	r0, [fp, #-8]
    3b38:	ldr	r3, [fp, #-8]
    3b3c:	cmp	r3, #0
    3b40:	beq	3b60 <close_file+0x38>
    3b44:	ldr	r3, [pc, #32]	; 3b6c <close_file+0x44>
    3b48:	ldr	r3, [r3]
    3b4c:	ldr	r2, [fp, #-8]
    3b50:	cmp	r2, r3
    3b54:	beq	3b60 <close_file+0x38>
    3b58:	ldr	r0, [fp, #-8]
    3b5c:	bl	0 <fclose>
    3b60:	nop			; (mov r0, r0)
    3b64:	sub	sp, fp, #4
    3b68:	pop	{fp, pc}
    3b6c:	.word	0x00000000

00003b70 <__flatcc_fb_codegen_bfbs_to_buffer>:
    3b70:	push	{fp, lr}
    3b74:	add	fp, sp, #4
    3b78:	sub	sp, sp, #256	; 0x100
    3b7c:	str	r0, [fp, #-248]	; 0xffffff08
    3b80:	str	r1, [fp, #-252]	; 0xffffff04
    3b84:	str	r2, [fp, #-256]	; 0xffffff00
    3b88:	str	r3, [fp, #-260]	; 0xfffffefc
    3b8c:	sub	r3, fp, #240	; 0xf0
    3b90:	str	r3, [fp, #-8]
    3b94:	ldr	r0, [fp, #-8]
    3b98:	bl	0 <flatcc_builder_init>
    3b9c:	ldr	r2, [fp, #-252]	; 0xffffff04
    3ba0:	ldr	r1, [fp, #-248]	; 0xffffff08
    3ba4:	ldr	r0, [fp, #-8]
    3ba8:	bl	37f4 <export_schema>
    3bac:	ldr	r3, [fp, #-260]	; 0xfffffefc
    3bb0:	ldr	r3, [r3]
    3bb4:	mov	r2, r3
    3bb8:	ldr	r1, [fp, #-256]	; 0xffffff00
    3bbc:	ldr	r0, [fp, #-8]
    3bc0:	bl	0 <flatcc_builder_copy_buffer>
    3bc4:	mov	r3, r0
    3bc8:	cmp	r3, #0
    3bcc:	beq	3bdc <__flatcc_fb_codegen_bfbs_to_buffer+0x6c>
    3bd0:	ldr	r0, [fp, #-256]	; 0xffffff00
    3bd4:	bl	397c <sort_fields>
    3bd8:	b	3be0 <__flatcc_fb_codegen_bfbs_to_buffer+0x70>
    3bdc:	nop			; (mov r0, r0)
    3be0:	ldr	r0, [fp, #-8]
    3be4:	bl	0 <flatcc_builder_get_buffer_size>
    3be8:	mov	r2, r0
    3bec:	ldr	r3, [fp, #-260]	; 0xfffffefc
    3bf0:	str	r2, [r3]
    3bf4:	ldr	r0, [fp, #-8]
    3bf8:	bl	0 <flatcc_builder_clear>
    3bfc:	ldr	r3, [fp, #-256]	; 0xffffff00
    3c00:	mov	r0, r3
    3c04:	sub	sp, fp, #4
    3c08:	pop	{fp, pc}

00003c0c <__flatcc_fb_codegen_bfbs_alloc_buffer>:
    3c0c:	push	{fp, lr}
    3c10:	add	fp, sp, #4
    3c14:	sub	sp, sp, #256	; 0x100
    3c18:	str	r0, [fp, #-248]	; 0xffffff08
    3c1c:	str	r1, [fp, #-252]	; 0xffffff04
    3c20:	str	r2, [fp, #-256]	; 0xffffff00
    3c24:	mov	r3, #0
    3c28:	str	r3, [fp, #-8]
    3c2c:	sub	r3, fp, #244	; 0xf4
    3c30:	str	r3, [fp, #-12]
    3c34:	ldr	r0, [fp, #-12]
    3c38:	bl	0 <flatcc_builder_init>
    3c3c:	ldr	r2, [fp, #-252]	; 0xffffff04
    3c40:	ldr	r1, [fp, #-248]	; 0xffffff08
    3c44:	ldr	r0, [fp, #-12]
    3c48:	bl	37f4 <export_schema>
    3c4c:	mov	r3, r0
    3c50:	cmp	r3, #0
    3c54:	bne	3c80 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x74>
    3c58:	ldr	r1, [fp, #-256]	; 0xffffff00
    3c5c:	ldr	r0, [fp, #-12]
    3c60:	bl	0 <flatcc_builder_finalize_buffer>
    3c64:	str	r0, [fp, #-8]
    3c68:	ldr	r3, [fp, #-8]
    3c6c:	cmp	r3, #0
    3c70:	beq	3c88 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x7c>
    3c74:	ldr	r0, [fp, #-8]
    3c78:	bl	397c <sort_fields>
    3c7c:	b	3c8c <__flatcc_fb_codegen_bfbs_alloc_buffer+0x80>
    3c80:	nop			; (mov r0, r0)
    3c84:	b	3c8c <__flatcc_fb_codegen_bfbs_alloc_buffer+0x80>
    3c88:	nop			; (mov r0, r0)
    3c8c:	ldr	r0, [fp, #-12]
    3c90:	bl	0 <flatcc_builder_clear>
    3c94:	ldr	r3, [fp, #-8]
    3c98:	mov	r0, r3
    3c9c:	sub	sp, fp, #4
    3ca0:	pop	{fp, pc}

00003ca4 <__flatcc_fb_codegen_bfbs_to_file>:
    3ca4:	push	{fp, lr}
    3ca8:	add	fp, sp, #4
    3cac:	sub	sp, sp, #24
    3cb0:	str	r0, [fp, #-24]	; 0xffffffe8
    3cb4:	str	r1, [fp, #-28]	; 0xffffffe4
    3cb8:	mvn	r3, #0
    3cbc:	str	r3, [fp, #-8]
    3cc0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3cc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3cc8:	bl	3a0c <open_file>
    3ccc:	str	r0, [fp, #-12]
    3cd0:	ldr	r3, [fp, #-12]
    3cd4:	cmp	r3, #0
    3cd8:	bne	3ce4 <__flatcc_fb_codegen_bfbs_to_file+0x40>
    3cdc:	mvn	r3, #0
    3ce0:	b	3d7c <__flatcc_fb_codegen_bfbs_to_file+0xd8>
    3ce4:	sub	r3, fp, #20
    3ce8:	mov	r2, r3
    3cec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3cf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3cf4:	bl	3c0c <__flatcc_fb_codegen_bfbs_alloc_buffer>
    3cf8:	str	r0, [fp, #-16]
    3cfc:	ldr	r3, [fp, #-16]
    3d00:	cmp	r3, #0
    3d04:	bne	3d14 <__flatcc_fb_codegen_bfbs_to_file+0x70>
    3d08:	ldr	r0, [pc, #120]	; 3d88 <__flatcc_fb_codegen_bfbs_to_file+0xe4>
    3d0c:	bl	0 <puts>
    3d10:	b	3d5c <__flatcc_fb_codegen_bfbs_to_file+0xb8>
    3d14:	ldr	r2, [fp, #-20]	; 0xffffffec
    3d18:	ldr	r3, [fp, #-12]
    3d1c:	mov	r1, #1
    3d20:	ldr	r0, [fp, #-16]
    3d24:	bl	0 <fwrite>
    3d28:	mov	r2, r0
    3d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d30:	cmp	r2, r3
    3d34:	beq	3d54 <__flatcc_fb_codegen_bfbs_to_file+0xb0>
    3d38:	ldr	r3, [pc, #76]	; 3d8c <__flatcc_fb_codegen_bfbs_to_file+0xe8>
    3d3c:	ldr	r3, [r3]
    3d40:	mov	r2, #38	; 0x26
    3d44:	mov	r1, #1
    3d48:	ldr	r0, [pc, #64]	; 3d90 <__flatcc_fb_codegen_bfbs_to_file+0xec>
    3d4c:	bl	0 <fwrite>
    3d50:	b	3d5c <__flatcc_fb_codegen_bfbs_to_file+0xb8>
    3d54:	mov	r3, #0
    3d58:	str	r3, [fp, #-8]
    3d5c:	ldr	r3, [fp, #-16]
    3d60:	cmp	r3, #0
    3d64:	beq	3d70 <__flatcc_fb_codegen_bfbs_to_file+0xcc>
    3d68:	ldr	r0, [fp, #-16]
    3d6c:	bl	0 <free>
    3d70:	ldr	r0, [fp, #-12]
    3d74:	bl	3b28 <close_file>
    3d78:	ldr	r3, [fp, #-8]
    3d7c:	mov	r0, r3
    3d80:	sub	sp, fp, #4
    3d84:	pop	{fp, pc}
    3d88:	.word	0x00000568
    3d8c:	.word	0x00000000
    3d90:	.word	0x0000058c
