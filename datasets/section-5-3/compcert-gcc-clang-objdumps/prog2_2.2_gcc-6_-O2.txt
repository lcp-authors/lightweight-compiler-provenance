
../compcert-repos/prog2/2.2:     file format elf32-littlearm


Disassembly of section .init:

000106d0 <.init>:
   106d0:	push	{r3, lr}
   106d4:	bl	10920 <_start@@Base+0x3c>
   106d8:	pop	{r3, pc}

Disassembly of section .plt:

000106dc <printf@plt-0x14>:
   106dc:	push	{lr}		; (str lr, [sp, #-4]!)
   106e0:	ldr	lr, [pc, #4]	; 106ec <printf@plt-0x4>
   106e4:	add	lr, pc, lr
   106e8:	ldr	pc, [lr, #8]!
   106ec:	andeq	r0, r1, r4, lsl r9

000106f0 <printf@plt>:
   106f0:	add	ip, pc, #0, 12
   106f4:	add	ip, ip, #16, 20	; 0x10000
   106f8:	ldr	pc, [ip, #2324]!	; 0x914

000106fc <free@plt>:
   106fc:	add	ip, pc, #0, 12
   10700:	add	ip, ip, #16, 20	; 0x10000
   10704:	ldr	pc, [ip, #2316]!	; 0x90c

00010708 <fgets@plt>:
   10708:	add	ip, pc, #0, 12
   1070c:	add	ip, ip, #16, 20	; 0x10000
   10710:	ldr	pc, [ip, #2308]!	; 0x904

00010714 <memcpy@plt>:
   10714:	add	ip, pc, #0, 12
   10718:	add	ip, ip, #16, 20	; 0x10000
   1071c:	ldr	pc, [ip, #2300]!	; 0x8fc

00010720 <realloc@plt>:
   10720:	add	ip, pc, #0, 12
   10724:	add	ip, ip, #16, 20	; 0x10000
   10728:	ldr	pc, [ip, #2292]!	; 0x8f4

0001072c <puts@plt>:
   1072c:	add	ip, pc, #0, 12
   10730:	add	ip, ip, #16, 20	; 0x10000
   10734:	ldr	pc, [ip, #2284]!	; 0x8ec

00010738 <malloc@plt>:
   10738:	add	ip, pc, #0, 12
   1073c:	add	ip, ip, #16, 20	; 0x10000
   10740:	ldr	pc, [ip, #2276]!	; 0x8e4

00010744 <__libc_start_main@plt>:
   10744:	add	ip, pc, #0, 12
   10748:	add	ip, ip, #16, 20	; 0x10000
   1074c:	ldr	pc, [ip, #2268]!	; 0x8dc

00010750 <__gmon_start__@plt>:
   10750:	add	ip, pc, #0, 12
   10754:	add	ip, ip, #16, 20	; 0x10000
   10758:	ldr	pc, [ip, #2260]!	; 0x8d4

0001075c <strlen@plt>:
   1075c:	add	ip, pc, #0, 12
   10760:	add	ip, ip, #16, 20	; 0x10000
   10764:	ldr	pc, [ip, #2252]!	; 0x8cc

00010768 <__isoc99_scanf@plt>:
   10768:	add	ip, pc, #0, 12
   1076c:	add	ip, ip, #16, 20	; 0x10000
   10770:	ldr	pc, [ip, #2244]!	; 0x8c4

00010774 <abort@plt>:
   10774:	add	ip, pc, #0, 12
   10778:	add	ip, ip, #16, 20	; 0x10000
   1077c:	ldr	pc, [ip, #2236]!	; 0x8bc

00010780 <getc@plt>:
   10780:	add	ip, pc, #0, 12
   10784:	add	ip, ip, #16, 20	; 0x10000
   10788:	ldr	pc, [ip, #2228]!	; 0x8b4

Disassembly of section .text:

0001078c <main@@Base>:
   1078c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10790:	mov	r0, #12
   10794:	sub	sp, sp, #100	; 0x64
   10798:	bl	10738 <malloc@plt>
   1079c:	ldr	r4, [pc, #296]	; 108cc <main@@Base+0x140>
   107a0:	ldr	sl, [pc, #296]	; 108d0 <main@@Base+0x144>
   107a4:	ldr	r7, [pc, #296]	; 108d4 <main@@Base+0x148>
   107a8:	ldr	r6, [pc, #296]	; 108d8 <main@@Base+0x14c>
   107ac:	mov	r5, #3
   107b0:	sub	r3, r0, #4
   107b4:	mov	r9, r0
   107b8:	str	r3, [sp, #4]
   107bc:	mov	r3, #0
   107c0:	str	r3, [r0]
   107c4:	str	r3, [r0, #4]
   107c8:	str	r3, [r0, #8]
   107cc:	ldr	r8, [sp, #4]
   107d0:	mov	fp, #0
   107d4:	add	fp, fp, #1
   107d8:	mov	r1, fp
   107dc:	mov	r0, sl
   107e0:	bl	106f0 <printf@plt>
   107e4:	ldr	r3, [r8, #4]!
   107e8:	subs	r0, r3, #0
   107ec:	ldreq	r0, [pc, #232]	; 108dc <main@@Base+0x150>
   107f0:	bl	1072c <puts@plt>
   107f4:	cmp	fp, #3
   107f8:	bne	107d4 <main@@Base+0x48>
   107fc:	mov	r1, r5
   10800:	mov	r0, r7
   10804:	bl	106f0 <printf@plt>
   10808:	add	r1, sp, #12
   1080c:	mov	r0, r6
   10810:	bl	10768 <__isoc99_scanf@plt>
   10814:	ldr	r0, [r4]
   10818:	bl	10780 <getc@plt>
   1081c:	ldr	r8, [sp, #12]
   10820:	cmp	r8, #3
   10824:	bhi	107fc <main@@Base+0x70>
   10828:	cmp	r8, #0
   1082c:	beq	108a0 <main@@Base+0x114>
   10830:	ldr	r0, [pc, #168]	; 108e0 <main@@Base+0x154>
   10834:	bl	106f0 <printf@plt>
   10838:	ldr	r2, [r4]
   1083c:	mov	r1, #80	; 0x50
   10840:	add	r0, sp, #16
   10844:	bl	10708 <fgets@plt>
   10848:	add	r0, sp, #16
   1084c:	bl	1075c <strlen@plt>
   10850:	add	r3, sp, #96	; 0x60
   10854:	mov	r2, #0
   10858:	ldr	r8, [sp, #12]
   1085c:	sub	r8, r8, #-1073741823	; 0xc0000001
   10860:	add	r3, r3, r0
   10864:	add	r0, sp, #16
   10868:	strb	r2, [r3, #-81]	; 0xffffffaf
   1086c:	bl	1075c <strlen@plt>
   10870:	add	fp, r0, #1
   10874:	mov	r1, fp
   10878:	ldr	r0, [r9, r8, lsl #2]
   1087c:	bl	10720 <realloc@plt>
   10880:	ldr	r3, [sp, #12]
   10884:	mov	r2, fp
   10888:	sub	r3, r3, #-1073741823	; 0xc0000001
   1088c:	add	r1, sp, #16
   10890:	str	r0, [r9, r8, lsl #2]
   10894:	ldr	r0, [r9, r3, lsl #2]
   10898:	bl	10714 <memcpy@plt>
   1089c:	b	107cc <main@@Base+0x40>
   108a0:	ldr	r0, [r9]
   108a4:	bl	106fc <free@plt>
   108a8:	ldr	r0, [r9, #4]
   108ac:	bl	106fc <free@plt>
   108b0:	ldr	r0, [r9, #8]
   108b4:	bl	106fc <free@plt>
   108b8:	mov	r0, r9
   108bc:	bl	106fc <free@plt>
   108c0:	mov	r0, r8
   108c4:	add	sp, sp, #100	; 0x64
   108c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108cc:	andeq	r1, r2, r0, asr r0
   108d0:	andeq	r0, r1, ip, ror sl
   108d4:	andeq	r0, r1, ip, lsl #21
   108d8:			; <UNDEFINED> instruction: 0x00010ab0
   108dc:	andeq	r0, r1, r4, lsl #21
   108e0:			; <UNDEFINED> instruction: 0x00010ab4

000108e4 <_start@@Base>:
   108e4:	mov	fp, #0
   108e8:	mov	lr, #0
   108ec:	pop	{r1}		; (ldr r1, [sp], #4)
   108f0:	mov	r2, sp
   108f4:	push	{r2}		; (str r2, [sp, #-4]!)
   108f8:	push	{r0}		; (str r0, [sp, #-4]!)
   108fc:	ldr	ip, [pc, #16]	; 10914 <_start@@Base+0x30>
   10900:	push	{ip}		; (str ip, [sp, #-4]!)
   10904:	ldr	r0, [pc, #12]	; 10918 <_start@@Base+0x34>
   10908:	ldr	r3, [pc, #12]	; 1091c <_start@@Base+0x38>
   1090c:	bl	10744 <__libc_start_main@plt>
   10910:	bl	10774 <abort@plt>
   10914:	andeq	r0, r1, ip, ror #20
   10918:	andeq	r0, r1, ip, lsl #15
   1091c:	andeq	r0, r1, ip, lsl #20
   10920:	ldr	r3, [pc, #20]	; 1093c <_start@@Base+0x58>
   10924:	ldr	r2, [pc, #20]	; 10940 <_start@@Base+0x5c>
   10928:	add	r3, pc, r3
   1092c:	ldr	r2, [r3, r2]
   10930:	cmp	r2, #0
   10934:	bxeq	lr
   10938:	b	10750 <__gmon_start__@plt>
   1093c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10940:	andeq	r0, r0, r0, asr #32
   10944:	ldr	r3, [pc, #28]	; 10968 <_start@@Base+0x84>
   10948:	ldr	r0, [pc, #28]	; 1096c <_start@@Base+0x88>
   1094c:	sub	r3, r3, r0
   10950:	cmp	r3, #6
   10954:	bxls	lr
   10958:	ldr	r3, [pc, #16]	; 10970 <_start@@Base+0x8c>
   1095c:	cmp	r3, #0
   10960:	bxeq	lr
   10964:	bx	r3
   10968:	andeq	r1, r2, pc, asr #32
   1096c:	andeq	r1, r2, ip, asr #32
   10970:	andeq	r0, r0, r0
   10974:	ldr	r1, [pc, #36]	; 109a0 <_start@@Base+0xbc>
   10978:	ldr	r0, [pc, #36]	; 109a4 <_start@@Base+0xc0>
   1097c:	sub	r1, r1, r0
   10980:	asr	r1, r1, #2
   10984:	add	r1, r1, r1, lsr #31
   10988:	asrs	r1, r1, #1
   1098c:	bxeq	lr
   10990:	ldr	r3, [pc, #16]	; 109a8 <_start@@Base+0xc4>
   10994:	cmp	r3, #0
   10998:	bxeq	lr
   1099c:	bx	r3
   109a0:	andeq	r1, r2, ip, asr #32
   109a4:	andeq	r1, r2, ip, asr #32
   109a8:	andeq	r0, r0, r0
   109ac:	push	{r4, lr}
   109b0:	ldr	r4, [pc, #24]	; 109d0 <_start@@Base+0xec>
   109b4:	ldrb	r3, [r4]
   109b8:	cmp	r3, #0
   109bc:	popne	{r4, pc}
   109c0:	bl	10944 <_start@@Base+0x60>
   109c4:	mov	r3, #1
   109c8:	strb	r3, [r4]
   109cc:	pop	{r4, pc}
   109d0:	andeq	r1, r2, r4, asr r0
   109d4:	ldr	r0, [pc, #40]	; 10a04 <_start@@Base+0x120>
   109d8:	ldr	r3, [r0]
   109dc:	cmp	r3, #0
   109e0:	bne	109e8 <_start@@Base+0x104>
   109e4:	b	10974 <_start@@Base+0x90>
   109e8:	ldr	r3, [pc, #24]	; 10a08 <_start@@Base+0x124>
   109ec:	cmp	r3, #0
   109f0:	beq	109e4 <_start@@Base+0x100>
   109f4:	push	{r4, lr}
   109f8:	blx	r3
   109fc:	pop	{r4, lr}
   10a00:	b	10974 <_start@@Base+0x90>
   10a04:	andeq	r0, r2, r4, lsl pc
   10a08:	andeq	r0, r0, r0

00010a0c <__libc_csu_init@@Base>:
   10a0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a10:	mov	r7, r0
   10a14:	ldr	r6, [pc, #72]	; 10a64 <__libc_csu_init@@Base+0x58>
   10a18:	ldr	r5, [pc, #72]	; 10a68 <__libc_csu_init@@Base+0x5c>
   10a1c:	add	r6, pc, r6
   10a20:	add	r5, pc, r5
   10a24:	sub	r6, r6, r5
   10a28:	mov	r8, r1
   10a2c:	mov	r9, r2
   10a30:	bl	106d0 <printf@plt-0x20>
   10a34:	asrs	r6, r6, #2
   10a38:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a3c:	mov	r4, #0
   10a40:	add	r4, r4, #1
   10a44:	ldr	r3, [r5], #4
   10a48:	mov	r2, r9
   10a4c:	mov	r1, r8
   10a50:	mov	r0, r7
   10a54:	blx	r3
   10a58:	cmp	r6, r4
   10a5c:	bne	10a40 <__libc_csu_init@@Base+0x34>
   10a60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a64:	andeq	r0, r1, ip, ror #9
   10a68:	andeq	r0, r1, r4, ror #9

00010a6c <__libc_csu_fini@@Base>:
   10a6c:	bx	lr

Disassembly of section .fini:

00010a70 <.fini>:
   10a70:	push	{r3, lr}
   10a74:	pop	{r3, pc}
