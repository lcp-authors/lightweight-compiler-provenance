
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-netcdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <swap8>:
   0:	push	{r4, r5, r6, lr}
   4:	ldrb	ip, [r0]
   8:	ldrb	r6, [r0, #7]
   c:	ldrb	r5, [r0, #6]
  10:	ldrb	r4, [r0, #5]
  14:	ldrb	lr, [r0, #4]
  18:	ldrb	r1, [r0, #1]
  1c:	ldrb	r2, [r0, #2]
  20:	ldrb	r3, [r0, #3]
  24:	eor	ip, ip, r6
  28:	eor	r1, r1, r5
  2c:	eor	r2, r2, r4
  30:	eor	r3, r3, lr
  34:	eor	r6, r6, ip
  38:	eor	r5, r5, r1
  3c:	eor	r4, r4, r2
  40:	eor	lr, lr, r3
  44:	eor	ip, ip, r6
  48:	eor	r1, r1, r5
  4c:	eor	r2, r2, r4
  50:	eor	r3, r3, lr
  54:	strb	ip, [r0]
  58:	strb	r6, [r0, #7]
  5c:	strb	r1, [r0, #1]
  60:	strb	r5, [r0, #6]
  64:	strb	r2, [r0, #2]
  68:	strb	r4, [r0, #5]
  6c:	strb	r3, [r0, #3]
  70:	strb	lr, [r0, #4]
  74:	pop	{r4, r5, r6, pc}

00000078 <read_bytes>:
  78:	push	{r4, r5, r6, r7, r8, r9, lr}
  7c:	sub	sp, sp, #84	; 0x54
  80:	ldr	r5, [r0, #48]	; 0x30
  84:	mov	r6, r2
  88:	cmp	r5, #0
  8c:	mov	r7, r3
  90:	mov	r4, r0
  94:	ldrd	r2, [sp, #112]	; 0x70
  98:	beq	144 <read_bytes+0xcc>
  9c:	ldrd	r8, [r0, #40]	; 0x28
  a0:	adds	r0, r6, r2
  a4:	adc	r1, r7, r3
  a8:	cmp	r1, r9
  ac:	cmpeq	r0, r8
  b0:	bls	12c <read_bytes+0xb4>
  b4:	ldr	r1, [r4, #16]
  b8:	cmp	r1, #1
  bc:	bls	114 <read_bytes+0x9c>
  c0:	mov	r1, r3
  c4:	mov	r0, r2
  c8:	add	r2, sp, #8
  cc:	bl	0 <coda_str64>
  d0:	add	r5, sp, #56	; 0x38
  d4:	mov	r0, r6
  d8:	mov	r1, r7
  dc:	add	r2, sp, #32
  e0:	bl	0 <coda_str64>
  e4:	ldrd	r0, [r4, #40]	; 0x28
  e8:	mov	r2, r5
  ec:	bl	0 <coda_str64>
  f0:	mvn	r0, #300	; 0x12c
  f4:	str	r5, [sp]
  f8:	add	r3, sp, #32
  fc:	add	r2, sp, #8
 100:	ldr	r1, [pc, #180]	; 1bc <read_bytes+0x144>
 104:	bl	0 <coda_set_error>
 108:	mvn	r0, #0
 10c:	add	sp, sp, #84	; 0x54
 110:	pop	{r4, r5, r6, r7, r8, r9, pc}
 114:	ldr	r1, [pc, #164]	; 1c0 <read_bytes+0x148>
 118:	mvn	r0, #300	; 0x12c
 11c:	bl	0 <coda_set_error>
 120:	mvn	r0, #0
 124:	add	sp, sp, #84	; 0x54
 128:	pop	{r4, r5, r6, r7, r8, r9, pc}
 12c:	add	r1, r5, r6
 130:	ldr	r0, [sp, #120]	; 0x78
 134:	bl	0 <memcpy>
 138:	mov	r0, #0
 13c:	add	sp, sp, #84	; 0x54
 140:	pop	{r4, r5, r6, r7, r8, r9, pc}
 144:	ldr	r1, [r0, #16]
 148:	cmp	r1, #1
 14c:	bhi	1a8 <read_bytes+0x130>
 150:	ldrd	r8, [r0, #8]
 154:	adds	r0, r6, r2
 158:	adc	r1, r7, r3
 15c:	cmp	r1, r9
 160:	cmpeq	r0, r8
 164:	bhi	114 <read_bytes+0x9c>
 168:	mov	r3, r6
 16c:	ldr	r0, [r4, #56]	; 0x38
 170:	ldr	r1, [sp, #120]	; 0x78
 174:	bl	0 <pread>
 178:	cmp	r0, #0
 17c:	movge	r0, r5
 180:	bge	10c <read_bytes+0x94>
 184:	bl	0 <__errno_location>
 188:	ldr	r0, [r0]
 18c:	bl	0 <strerror>
 190:	ldr	r1, [pc, #44]	; 1c4 <read_bytes+0x14c>
 194:	mov	r2, r0
 198:	mvn	r0, #21
 19c:	bl	0 <coda_set_error>
 1a0:	mvn	r0, #0
 1a4:	b	10c <read_bytes+0x94>
 1a8:	ldr	r3, [pc, #24]	; 1c8 <read_bytes+0x150>
 1ac:	mov	r2, #83	; 0x53
 1b0:	ldr	r1, [pc, #20]	; 1cc <read_bytes+0x154>
 1b4:	ldr	r0, [pc, #20]	; 1d0 <read_bytes+0x158>
 1b8:	bl	0 <__assert_fail>
 1bc:	.word	0x0000002c
 1c0:	.word	0x00000000
 1c4:	.word	0x00000108
 1c8:	.word	0x00000000
 1cc:	.word	0x00000068
 1d0:	.word	0x000000b8

000001d4 <read_basic_type>:
 1d4:	ldr	r3, [r0, #4]
 1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1dc:	sub	sl, r3, #1
 1e0:	add	r3, r0, r3, lsl #4
 1e4:	add	sl, r0, sl, lsl #4
 1e8:	ldr	ip, [r3, #-24]	; 0xffffffe8
 1ec:	ldr	r7, [sl, #8]
 1f0:	mov	r6, r2
 1f4:	ldr	r2, [ip]
 1f8:	ldr	r3, [r7, #4]
 1fc:	ldr	r9, [r0]
 200:	mov	r8, r1
 204:	ldr	r0, [r3, #24]
 208:	ldr	r1, [r3, #28]
 20c:	cmp	r2, #104	; 0x68
 210:	ldrd	r2, [r7, #16]
 214:	sub	sp, sp, #28
 218:	lsr	r4, r0, #3
 21c:	strd	r2, [sp, #16]
 220:	orr	r4, r4, r1, lsl #29
 224:	asr	r5, r1, #3
 228:	beq	2c8 <read_basic_type+0xf4>
 22c:	cmp	r6, #0
 230:	ldr	r0, [r9, #52]	; 0x34
 234:	blt	24c <read_basic_type+0x78>
 238:	asr	fp, r6, #31
 23c:	cmp	r6, r4
 240:	sbcs	r3, fp, r5
 244:	mov	sl, r6
 248:	blt	358 <read_basic_type+0x184>
 24c:	ldrd	r2, [sp, #16]
 250:	str	r8, [sp, #8]
 254:	strd	r4, [sp]
 258:	bl	78 <read_bytes>
 25c:	cmp	r0, #0
 260:	bne	370 <read_basic_type+0x19c>
 264:	ldr	r2, [r7, #4]
 268:	ldr	r3, [r2, #8]
 26c:	sub	r3, r3, #2
 270:	cmp	r3, #1
 274:	bls	284 <read_basic_type+0xb0>
 278:	mov	r0, #0
 27c:	add	sp, sp, #28
 280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 284:	ldrd	r2, [r2, #24]
 288:	cmp	r3, #0
 28c:	cmpeq	r2, #16
 290:	beq	3d8 <read_basic_type+0x204>
 294:	cmp	r2, #17
 298:	sbcs	r1, r3, #0
 29c:	blt	378 <read_basic_type+0x1a4>
 2a0:	cmp	r3, #0
 2a4:	cmpeq	r2, #32
 2a8:	beq	398 <read_basic_type+0x1c4>
 2ac:	cmp	r3, #0
 2b0:	cmpeq	r2, #64	; 0x40
 2b4:	bne	384 <read_basic_type+0x1b0>
 2b8:	mov	r0, r8
 2bc:	bl	0 <swap8>
 2c0:	mov	r0, #0
 2c4:	b	27c <read_basic_type+0xa8>
 2c8:	ldr	r0, [ip, #4]
 2cc:	ldr	r1, [r0, #8]
 2d0:	cmp	r1, #1
 2d4:	bne	22c <read_basic_type+0x58>
 2d8:	ldr	r1, [r7, #24]
 2dc:	cmp	r1, #0
 2e0:	beq	3fc <read_basic_type+0x228>
 2e4:	ldr	r1, [r0, #52]	; 0x34
 2e8:	ldr	r0, [r0, #44]	; 0x2c
 2ec:	bl	0 <__aeabi_idiv>
 2f0:	ldr	sl, [sl, #12]
 2f4:	mov	fp, r0
 2f8:	mov	r1, r0
 2fc:	mov	r0, sl
 300:	bl	0 <__aeabi_idiv>
 304:	ldr	ip, [r9, #60]	; 0x3c
 308:	mov	r1, fp
 30c:	mul	ip, ip, r0
 310:	mov	r0, sl
 314:	ldrd	sl, [sp, #16]
 318:	adds	sl, sl, ip
 31c:	adc	fp, fp, ip, asr #31
 320:	bl	0 <__aeabi_idivmod>
 324:	mov	r2, r1
 328:	mov	r0, r1
 32c:	asr	r1, r1, #31
 330:	strd	r0, [sp, #16]
 334:	ldr	r1, [sp, #20]
 338:	mul	r0, r2, r5
 33c:	umull	r2, r3, r2, r4
 340:	mla	r1, r4, r1, r0
 344:	adds	r0, r2, sl
 348:	add	r3, r1, r3
 34c:	adc	r1, r3, fp
 350:	strd	r0, [sp, #16]
 354:	b	22c <read_basic_type+0x58>
 358:	ldrd	r2, [sp, #16]
 35c:	str	r8, [sp, #8]
 360:	strd	sl, [sp]
 364:	bl	78 <read_bytes>
 368:	cmp	r0, #0
 36c:	beq	264 <read_basic_type+0x90>
 370:	mvn	r0, #0
 374:	b	27c <read_basic_type+0xa8>
 378:	cmp	r3, #0
 37c:	cmpeq	r2, #8
 380:	beq	278 <read_basic_type+0xa4>
 384:	ldr	r3, [pc, #156]	; 428 <read_basic_type+0x254>
 388:	ldr	r2, [pc, #156]	; 42c <read_basic_type+0x258>
 38c:	ldr	r1, [pc, #156]	; 430 <read_basic_type+0x25c>
 390:	ldr	r0, [pc, #156]	; 434 <read_basic_type+0x260>
 394:	bl	0 <__assert_fail>
 398:	ldrb	r0, [r8, #3]
 39c:	ldrb	r1, [r8, #2]
 3a0:	ldrb	r2, [r8]
 3a4:	ldrb	r3, [r8, #1]
 3a8:	eor	r2, r2, r0
 3ac:	eor	r3, r3, r1
 3b0:	eor	r0, r0, r2
 3b4:	eor	r1, r1, r3
 3b8:	eor	r2, r2, r0
 3bc:	eor	r3, r3, r1
 3c0:	strb	r0, [r8, #3]
 3c4:	strb	r2, [r8]
 3c8:	strb	r3, [r8, #1]
 3cc:	strb	r1, [r8, #2]
 3d0:	mov	r0, #0
 3d4:	b	27c <read_basic_type+0xa8>
 3d8:	ldrb	r2, [r8, #1]
 3dc:	ldrb	r3, [r8]
 3e0:	mov	r0, #0
 3e4:	eor	r3, r3, r2
 3e8:	eor	r2, r2, r3
 3ec:	eor	r3, r3, r2
 3f0:	strb	r3, [r8]
 3f4:	strb	r2, [r8, #1]
 3f8:	b	27c <read_basic_type+0xa8>
 3fc:	ldr	r0, [sl, #12]
 400:	ldrd	r2, [sp, #16]
 404:	mul	ip, r0, r5
 408:	asr	fp, r0, #31
 40c:	umull	r0, r1, r0, r4
 410:	mla	ip, r4, fp, ip
 414:	adds	r2, r2, r0
 418:	add	r1, ip, r1
 41c:	adc	r3, r3, r1
 420:	strd	r2, [sp, #16]
 424:	b	22c <read_basic_type+0x58>
 428:	.word	0x0000000c
 42c:	.word	0x000001a6
 430:	.word	0x00000128
 434:	.word	0x0000017c

00000438 <read_array>:
 438:	ldr	r3, [r0, #4]
 43c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 440:	sub	sp, sp, #36	; 0x24
 444:	ldr	r5, [r0]
 448:	add	r0, r0, r3, lsl #4
 44c:	mov	sl, r1
 450:	ldr	r6, [r0, #-8]
 454:	str	r1, [sp, #28]
 458:	ldr	fp, [r6, #12]
 45c:	ldr	r3, [r6, #4]
 460:	ldr	r1, [fp, #4]
 464:	ldr	r4, [r3, #44]	; 0x2c
 468:	ldr	r2, [fp, #24]
 46c:	ldrd	r8, [r1, #24]
 470:	cmp	r2, #0
 474:	lsr	r0, r8, #3
 478:	orr	r0, r0, r9, lsl #29
 47c:	mul	r0, r0, r4
 480:	beq	508 <read_array+0xd0>
 484:	ldr	r7, [r3, #52]	; 0x34
 488:	mov	r1, r7
 48c:	bl	0 <__aeabi_idiv>
 490:	cmp	r7, #0
 494:	str	r0, [sp, #24]
 498:	ble	540 <read_array+0x108>
 49c:	mov	r2, r0
 4a0:	asr	r3, r0, #31
 4a4:	mov	r8, sl
 4a8:	strd	r2, [sp, #16]
 4ac:	mov	r4, #0
 4b0:	b	4cc <read_array+0x94>
 4b4:	add	r4, r4, #1
 4b8:	ldr	r3, [sp, #24]
 4bc:	cmp	r7, r4
 4c0:	add	r8, r8, r3
 4c4:	beq	534 <read_array+0xfc>
 4c8:	ldr	fp, [r6, #12]
 4cc:	ldr	ip, [r5, #60]	; 0x3c
 4d0:	ldrd	r2, [fp, #16]
 4d4:	ldrd	sl, [sp, #16]
 4d8:	mul	ip, ip, r4
 4dc:	ldr	r0, [r5, #52]	; 0x34
 4e0:	adds	r2, r2, ip
 4e4:	adc	r3, r3, ip, asr #31
 4e8:	str	r8, [sp, #8]
 4ec:	strd	sl, [sp]
 4f0:	bl	78 <read_bytes>
 4f4:	cmp	r0, #0
 4f8:	beq	4b4 <read_array+0x7c>
 4fc:	mvn	r0, #0
 500:	add	sp, sp, #36	; 0x24
 504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 508:	ldr	r1, [r5, #52]	; 0x34
 50c:	mov	r4, r0
 510:	asr	r5, r0, #31
 514:	mov	r0, r1
 518:	ldr	r1, [sp, #28]
 51c:	ldrd	r2, [fp, #16]
 520:	str	r1, [sp, #8]
 524:	strd	r4, [sp]
 528:	bl	78 <read_bytes>
 52c:	cmp	r0, #0
 530:	bne	4fc <read_array+0xc4>
 534:	ldr	r3, [r6, #12]
 538:	ldr	r3, [r3, #4]
 53c:	ldrd	r8, [r3, #24]
 540:	cmp	r9, #0
 544:	cmpeq	r8, #16
 548:	beq	644 <read_array+0x20c>
 54c:	cmp	r8, #17
 550:	sbcs	r3, r9, #0
 554:	blt	5ac <read_array+0x174>
 558:	cmp	r9, #0
 55c:	cmpeq	r8, #32
 560:	beq	5c4 <read_array+0x18c>
 564:	cmp	r9, #0
 568:	cmpeq	r8, #64	; 0x40
 56c:	bne	630 <read_array+0x1f8>
 570:	ldr	r3, [r6, #4]
 574:	ldr	r3, [r3, #44]	; 0x2c
 578:	cmp	r3, #0
 57c:	movgt	r5, #0
 580:	ldrgt	r4, [sp, #28]
 584:	ble	5b8 <read_array+0x180>
 588:	mov	r0, r4
 58c:	bl	0 <swap8>
 590:	ldr	r3, [r6, #4]
 594:	add	r5, r5, #1
 598:	add	r4, r4, #8
 59c:	ldr	r3, [r3, #44]	; 0x2c
 5a0:	cmp	r3, r5
 5a4:	bgt	588 <read_array+0x150>
 5a8:	b	5b8 <read_array+0x180>
 5ac:	cmp	r9, #0
 5b0:	cmpeq	r8, #8
 5b4:	bne	630 <read_array+0x1f8>
 5b8:	mov	r0, #0
 5bc:	add	sp, sp, #36	; 0x24
 5c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 5c4:	ldr	r3, [r6, #4]
 5c8:	ldr	r3, [r3, #44]	; 0x2c
 5cc:	cmp	r3, #0
 5d0:	movgt	lr, #0
 5d4:	ldrgt	r3, [sp, #28]
 5d8:	ble	5b8 <read_array+0x180>
 5dc:	ldrb	ip, [r3, #3]
 5e0:	ldrb	r0, [r3, #2]
 5e4:	ldrb	r1, [r3]
 5e8:	ldrb	r2, [r3, #1]
 5ec:	add	lr, lr, #1
 5f0:	eor	r1, r1, ip
 5f4:	eor	r2, r2, r0
 5f8:	eor	ip, ip, r1
 5fc:	eor	r0, r0, r2
 600:	eor	r2, r2, r0
 604:	eor	r1, r1, ip
 608:	strb	r1, [r3]
 60c:	strb	ip, [r3, #3]
 610:	strb	r2, [r3, #1]
 614:	strb	r0, [r3, #2]
 618:	ldr	r2, [r6, #4]
 61c:	add	r3, r3, #4
 620:	ldr	r2, [r2, #44]	; 0x2c
 624:	cmp	r2, lr
 628:	bgt	5dc <read_array+0x1a4>
 62c:	b	5b8 <read_array+0x180>
 630:	ldr	r3, [pc, #96]	; 698 <read_array+0x260>
 634:	ldr	r2, [pc, #96]	; 69c <read_array+0x264>
 638:	ldr	r1, [pc, #96]	; 6a0 <read_array+0x268>
 63c:	ldr	r0, [pc, #96]	; 6a4 <read_array+0x26c>
 640:	bl	0 <__assert_fail>
 644:	ldr	r3, [r6, #4]
 648:	ldr	r3, [r3, #44]	; 0x2c
 64c:	cmp	r3, #0
 650:	ble	5b8 <read_array+0x180>
 654:	ldr	r0, [sp, #28]
 658:	mov	r1, #0
 65c:	ldr	ip, [sp, #28]
 660:	ldrb	r2, [r0, #1]
 664:	add	r0, r0, #2
 668:	ldrb	r3, [ip, r1, lsl #1]
 66c:	eor	r3, r3, r2
 670:	eor	r2, r2, r3
 674:	eor	r3, r3, r2
 678:	strb	r2, [r0, #-1]
 67c:	strb	r3, [ip, r1, lsl #1]
 680:	ldr	r3, [r6, #4]
 684:	add	r1, r1, #1
 688:	ldr	r3, [r3, #44]	; 0x2c
 68c:	cmp	r3, r1
 690:	bgt	65c <read_array+0x224>
 694:	b	5b8 <read_array+0x180>
 698:	.word	0x0000001c
 69c:	.word	0x00000106
 6a0:	.word	0x00000128
 6a4:	.word	0x0000017c

000006a8 <read_partial_array>:
 6a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 6ac:	sub	sp, sp, #76	; 0x4c
 6b0:	mov	r9, r1
 6b4:	str	r1, [sp, #32]
 6b8:	ldr	r1, [r0, #4]
 6bc:	ldr	sl, [r0]
 6c0:	str	r3, [sp, #24]
 6c4:	add	r1, r0, r1, lsl #4
 6c8:	mov	r7, r2
 6cc:	ldr	r0, [r1, #-8]
 6d0:	str	r0, [sp, #28]
 6d4:	ldr	r3, [r0, #12]
 6d8:	ldr	r1, [r3, #4]
 6dc:	ldr	r2, [r3, #24]
 6e0:	ldrd	r4, [r1, #24]
 6e4:	cmp	r2, #0
 6e8:	lsr	r6, r4, #3
 6ec:	orr	r6, r6, r5, lsl #29
 6f0:	beq	83c <read_partial_array+0x194>
 6f4:	ldr	r2, [r0, #4]
 6f8:	str	r3, [sp, #68]	; 0x44
 6fc:	ldr	r8, [r2, #52]	; 0x34
 700:	ldr	r0, [r2, #44]	; 0x2c
 704:	mov	r1, r8
 708:	str	r8, [sp, #48]	; 0x30
 70c:	bl	0 <__aeabi_idiv>
 710:	cmp	r8, #0
 714:	str	r0, [sp, #36]	; 0x24
 718:	ble	890 <read_partial_array+0x1e8>
 71c:	add	r3, r9, r7
 720:	rsb	r7, r7, #0
 724:	mov	r1, r3
 728:	rsb	r2, r0, #0
 72c:	str	r3, [sp, #44]	; 0x2c
 730:	mov	r3, r0
 734:	mul	r0, r6, r7
 738:	mul	r2, r6, r2
 73c:	mul	r3, r3, r6
 740:	str	r0, [sp, #56]	; 0x38
 744:	mul	fp, r6, r1
 748:	mov	r0, #0
 74c:	mov	r1, #0
 750:	mov	r5, r1
 754:	mov	r4, r0
 758:	str	r2, [sp, #52]	; 0x34
 75c:	mov	r2, #0
 760:	str	r3, [sp, #40]	; 0x28
 764:	strd	r4, [sp, #16]
 768:	mov	r1, r2
 76c:	str	r0, [sp, #60]	; 0x3c
 770:	str	r5, [sp, #64]	; 0x40
 774:	ldr	r3, [sp, #68]	; 0x44
 778:	b	804 <read_partial_array+0x15c>
 77c:	ldr	r2, [sp, #56]	; 0x38
 780:	add	r4, r2, fp
 784:	subs	r8, r8, r4
 788:	asr	r5, r4, #31
 78c:	sbc	r9, r9, r5
 790:	ldr	r0, [sl, #60]	; 0x3c
 794:	ldrd	r2, [r3, #16]
 798:	ldr	ip, [sp, #16]
 79c:	mul	r1, r0, r1
 7a0:	ldr	r0, [sl, #52]	; 0x34
 7a4:	adds	r2, r2, r1
 7a8:	adc	r3, r3, r1, asr #31
 7ac:	ldr	r1, [sp, #24]
 7b0:	adds	r2, r2, r4
 7b4:	add	r1, r1, ip
 7b8:	adc	r3, r3, r5
 7bc:	strd	r8, [sp]
 7c0:	str	r1, [sp, #8]
 7c4:	bl	78 <read_bytes>
 7c8:	cmp	r0, #0
 7cc:	bne	904 <read_partial_array+0x25c>
 7d0:	ldrd	r2, [sp, #16]
 7d4:	adds	r2, r2, r8
 7d8:	adc	r3, r3, r9
 7dc:	strd	r2, [sp, #16]
 7e0:	ldr	r3, [sp, #48]	; 0x30
 7e4:	cmp	r3, r7
 7e8:	ldr	r3, [sp, #52]	; 0x34
 7ec:	add	fp, fp, r3
 7f0:	beq	880 <read_partial_array+0x1d8>
 7f4:	ldr	r3, [sp, #28]
 7f8:	mov	r1, r7
 7fc:	mov	r2, r6
 800:	ldr	r3, [r3, #12]
 804:	ldr	r0, [sp, #36]	; 0x24
 808:	ldr	r8, [sp, #40]	; 0x28
 80c:	add	r6, r2, r0
 810:	ldr	r0, [sp, #44]	; 0x2c
 814:	add	r7, r1, #1
 818:	cmp	r6, r0
 81c:	ldr	r0, [sp, #32]
 820:	movgt	r8, fp
 824:	cmp	r0, r2
 828:	asr	r9, r8, #31
 82c:	bgt	77c <read_partial_array+0xd4>
 830:	ldr	r4, [sp, #60]	; 0x3c
 834:	ldr	r5, [sp, #64]	; 0x40
 838:	b	790 <read_partial_array+0xe8>
 83c:	ldr	r2, [sp, #32]
 840:	mul	r7, r7, r6
 844:	ldrd	r8, [r3, #16]
 848:	mul	r2, r2, r6
 84c:	mov	r4, r7
 850:	adds	r6, r8, r2
 854:	asr	r5, r7, #31
 858:	ldr	r1, [sp, #24]
 85c:	adc	r7, r9, r2, asr #31
 860:	ldr	r0, [sl, #52]	; 0x34
 864:	mov	r2, r6
 868:	mov	r3, r7
 86c:	str	r1, [sp, #8]
 870:	strd	r4, [sp]
 874:	bl	78 <read_bytes>
 878:	cmp	r0, #0
 87c:	bne	904 <read_partial_array+0x25c>
 880:	ldr	r3, [sp, #28]
 884:	ldr	r3, [r3, #12]
 888:	ldr	r3, [r3, #4]
 88c:	ldrd	r4, [r3, #24]
 890:	cmp	r5, #0
 894:	cmpeq	r4, #16
 898:	beq	9b0 <read_partial_array+0x308>
 89c:	cmp	r4, #17
 8a0:	sbcs	r3, r5, #0
 8a4:	blt	910 <read_partial_array+0x268>
 8a8:	cmp	r5, #0
 8ac:	cmpeq	r4, #32
 8b0:	beq	928 <read_partial_array+0x280>
 8b4:	cmp	r5, #0
 8b8:	cmpeq	r4, #64	; 0x40
 8bc:	bne	99c <read_partial_array+0x2f4>
 8c0:	ldr	r3, [sp, #28]
 8c4:	ldr	r3, [r3, #4]
 8c8:	ldr	r3, [r3, #44]	; 0x2c
 8cc:	cmp	r3, #0
 8d0:	ble	91c <read_partial_array+0x274>
 8d4:	ldr	r4, [sp, #24]
 8d8:	ldr	r6, [sp, #28]
 8dc:	mov	r5, #0
 8e0:	mov	r0, r4
 8e4:	bl	0 <swap8>
 8e8:	ldr	r3, [r6, #4]
 8ec:	add	r5, r5, #1
 8f0:	add	r4, r4, #8
 8f4:	ldr	r3, [r3, #44]	; 0x2c
 8f8:	cmp	r3, r5
 8fc:	bgt	8e0 <read_partial_array+0x238>
 900:	b	91c <read_partial_array+0x274>
 904:	mvn	r0, #0
 908:	add	sp, sp, #76	; 0x4c
 90c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 910:	cmp	r5, #0
 914:	cmpeq	r4, #8
 918:	bne	99c <read_partial_array+0x2f4>
 91c:	mov	r0, #0
 920:	add	sp, sp, #76	; 0x4c
 924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 928:	ldr	r3, [sp, #28]
 92c:	ldr	r3, [r3, #4]
 930:	ldr	r3, [r3, #44]	; 0x2c
 934:	cmp	r3, #0
 938:	ble	91c <read_partial_array+0x274>
 93c:	ldr	r3, [sp, #24]
 940:	ldr	r4, [sp, #28]
 944:	mov	lr, #0
 948:	ldrb	ip, [r3, #3]
 94c:	ldrb	r0, [r3, #2]
 950:	ldrb	r1, [r3]
 954:	ldrb	r2, [r3, #1]
 958:	add	lr, lr, #1
 95c:	eor	r1, r1, ip
 960:	eor	r2, r2, r0
 964:	eor	ip, ip, r1
 968:	eor	r0, r0, r2
 96c:	eor	r2, r2, r0
 970:	eor	r1, r1, ip
 974:	strb	r1, [r3]
 978:	strb	ip, [r3, #3]
 97c:	strb	r2, [r3, #1]
 980:	strb	r0, [r3, #2]
 984:	ldr	r2, [r4, #4]
 988:	add	r3, r3, #4
 98c:	ldr	r2, [r2, #44]	; 0x2c
 990:	cmp	r2, lr
 994:	bgt	948 <read_partial_array+0x2a0>
 998:	b	91c <read_partial_array+0x274>
 99c:	ldr	r3, [pc, #100]	; a08 <read_partial_array+0x360>
 9a0:	ldr	r2, [pc, #100]	; a0c <read_partial_array+0x364>
 9a4:	ldr	r1, [pc, #100]	; a10 <read_partial_array+0x368>
 9a8:	ldr	r0, [pc, #100]	; a14 <read_partial_array+0x36c>
 9ac:	bl	0 <__assert_fail>
 9b0:	ldr	lr, [sp, #28]
 9b4:	ldr	r3, [lr, #4]
 9b8:	ldr	r3, [r3, #44]	; 0x2c
 9bc:	cmp	r3, #0
 9c0:	ble	91c <read_partial_array+0x274>
 9c4:	ldr	ip, [sp, #24]
 9c8:	mov	r1, #0
 9cc:	mov	r0, ip
 9d0:	ldrb	r2, [r0, #1]
 9d4:	ldrb	r3, [ip, r1, lsl #1]
 9d8:	add	r0, r0, #2
 9dc:	eor	r3, r3, r2
 9e0:	eor	r2, r2, r3
 9e4:	eor	r3, r3, r2
 9e8:	strb	r2, [r0, #-1]
 9ec:	strb	r3, [ip, r1, lsl #1]
 9f0:	ldr	r3, [lr, #4]
 9f4:	add	r1, r1, #1
 9f8:	ldr	r3, [r3, #44]	; 0x2c
 9fc:	cmp	r3, r1
 a00:	bgt	9d0 <read_partial_array+0x328>
 a04:	b	91c <read_partial_array+0x274>
 a08:	.word	0x00000028
 a0c:	.word	0x0000015b
 a10:	.word	0x00000128
 a14:	.word	0x0000017c

00000a18 <coda_netcdf_cursor_set_product>:
 a18:	push	{r4, lr}
 a1c:	mvn	r2, #0
 a20:	ldr	r4, [r1, #20]
 a24:	mvn	r3, #0
 a28:	mov	lr, #1
 a2c:	mvn	ip, #0
 a30:	str	r1, [r0]
 a34:	str	r4, [r0, #8]
 a38:	str	lr, [r0, #4]
 a3c:	str	ip, [r0, #12]
 a40:	strd	r2, [r0, #16]
 a44:	mov	r0, #0
 a48:	pop	{r4, pc}

00000a4c <coda_netcdf_cursor_goto_array_element>:
 a4c:	ldr	r3, [r0, #4]
 a50:	push	{r4, r5, r6, r7, r8, lr}
 a54:	sub	sp, sp, #40	; 0x28
 a58:	add	r3, r0, r3, lsl #4
 a5c:	add	r5, sp, #8
 a60:	ldr	r3, [r3, #-8]
 a64:	mov	r6, r0
 a68:	mov	r8, r1
 a6c:	mov	r4, r2
 a70:	add	r1, sp, #4
 a74:	mov	r2, r5
 a78:	ldr	r0, [r3, #4]
 a7c:	bl	0 <coda_type_get_array_dim>
 a80:	cmp	r0, #0
 a84:	bne	b50 <coda_netcdf_cursor_goto_array_element+0x104>
 a88:	ldr	r7, [sp, #4]
 a8c:	cmp	r7, r8
 a90:	bne	b58 <coda_netcdf_cursor_goto_array_element+0x10c>
 a94:	cmp	r7, #0
 a98:	ble	b74 <coda_netcdf_cursor_goto_array_element+0x128>
 a9c:	ldr	r2, [r4]
 aa0:	ldr	r3, [sp, #8]
 aa4:	cmp	r2, #0
 aa8:	blt	b38 <coda_netcdf_cursor_goto_array_element+0xec>
 aac:	cmp	r3, r2
 ab0:	ble	b38 <coda_netcdf_cursor_goto_array_element+0xec>
 ab4:	mov	ip, r4
 ab8:	mov	r1, r0
 abc:	mov	lr, r0
 ac0:	b	ae0 <coda_netcdf_cursor_goto_array_element+0x94>
 ac4:	ldr	r2, [ip, #4]!
 ac8:	cmp	r2, #0
 acc:	blt	b2c <coda_netcdf_cursor_goto_array_element+0xe0>
 ad0:	ldr	r3, [r5, r1, lsl #2]
 ad4:	cmp	r2, r3
 ad8:	mul	lr, lr, r3
 adc:	bge	b38 <coda_netcdf_cursor_goto_array_element+0xec>
 ae0:	add	r1, r1, #1
 ae4:	cmp	r7, r1
 ae8:	add	lr, lr, r2
 aec:	bne	ac4 <coda_netcdf_cursor_goto_array_element+0x78>
 af0:	ldr	r3, [r6, #4]
 af4:	mvn	r4, #0
 af8:	add	r2, r3, #1
 afc:	add	r1, r6, r3, lsl #4
 b00:	mov	r3, r1
 b04:	ldr	ip, [r1, #-8]
 b08:	mvn	r5, #0
 b0c:	lsl	r1, r2, #4
 b10:	ldr	ip, [ip, #12]
 b14:	str	r2, [r6, #4]
 b18:	str	ip, [r3, #8]
 b1c:	str	lr, [r3, #12]
 b20:	strd	r4, [r6, r1]
 b24:	add	sp, sp, #40	; 0x28
 b28:	pop	{r4, r5, r6, r7, r8, pc}
 b2c:	add	r3, sp, #40	; 0x28
 b30:	add	r1, r3, r1, lsl #2
 b34:	ldr	r3, [r1, #-32]	; 0xffffffe0
 b38:	mvn	r0, #106	; 0x6a
 b3c:	ldr	r1, [pc, #56]	; b7c <coda_netcdf_cursor_goto_array_element+0x130>
 b40:	bl	0 <coda_set_error>
 b44:	mvn	r0, #0
 b48:	add	sp, sp, #40	; 0x28
 b4c:	pop	{r4, r5, r6, r7, r8, pc}
 b50:	mvn	r0, #0
 b54:	b	b48 <coda_netcdf_cursor_goto_array_element+0xfc>
 b58:	mvn	r0, #105	; 0x69
 b5c:	mov	r3, r7
 b60:	mov	r2, r8
 b64:	ldr	r1, [pc, #20]	; b80 <coda_netcdf_cursor_goto_array_element+0x134>
 b68:	bl	0 <coda_set_error>
 b6c:	mvn	r0, #0
 b70:	b	b48 <coda_netcdf_cursor_goto_array_element+0xfc>
 b74:	mov	lr, r0
 b78:	b	af0 <coda_netcdf_cursor_goto_array_element+0xa4>
 b7c:	.word	0x000001c8
 b80:	.word	0x00000180

00000b84 <coda_netcdf_cursor_goto_array_element_by_index>:
 b84:	ldr	r3, [pc, #136]	; c14 <coda_netcdf_cursor_goto_array_element_by_index+0x90>
 b88:	push	{r4, r6, r7, lr}
 b8c:	mov	r4, r0
 b90:	ldr	r3, [pc, r3]
 b94:	bl	0 <__aeabi_read_tp>
 b98:	ldr	r3, [r0, r3]
 b9c:	ldr	r0, [r4, #4]
 ba0:	cmp	r3, #0
 ba4:	add	r3, r4, r0, lsl #4
 ba8:	ldr	ip, [r3, #-8]
 bac:	beq	bcc <coda_netcdf_cursor_goto_array_element_by_index+0x48>
 bb0:	ldr	r3, [ip, #4]
 bb4:	ldr	r3, [r3, #44]	; 0x2c
 bb8:	cmp	r3, r1
 bbc:	movgt	r2, #0
 bc0:	movle	r2, #1
 bc4:	orrs	r2, r2, r1, lsr #31
 bc8:	bne	bfc <coda_netcdf_cursor_goto_array_element_by_index+0x78>
 bcc:	add	r2, r0, #1
 bd0:	ldr	lr, [ip, #12]
 bd4:	add	r3, r4, r0, lsl #4
 bd8:	lsl	ip, r2, #4
 bdc:	mvn	r6, #0
 be0:	mvn	r7, #0
 be4:	str	r2, [r4, #4]
 be8:	mov	r0, #0
 bec:	str	lr, [r3, #8]
 bf0:	str	r1, [r3, #12]
 bf4:	strd	r6, [r4, ip]
 bf8:	pop	{r4, r6, r7, pc}
 bfc:	mov	r2, r1
 c00:	mvn	r0, #106	; 0x6a
 c04:	ldr	r1, [pc, #12]	; c18 <coda_netcdf_cursor_goto_array_element_by_index+0x94>
 c08:	bl	0 <coda_set_error>
 c0c:	mvn	r0, #0
 c10:	pop	{r4, r6, r7, pc}
 c14:	.word	0x0000007c
 c18:	.word	0x000001c8

00000c1c <coda_netcdf_cursor_goto_next_array_element>:
 c1c:	ldr	r3, [pc, #148]	; cb8 <coda_netcdf_cursor_goto_next_array_element+0x9c>
 c20:	push	{r4, lr}
 c24:	mov	r1, r0
 c28:	ldr	r3, [pc, r3]
 c2c:	bl	0 <__aeabi_read_tp>
 c30:	ldr	r3, [r0, r3]
 c34:	cmp	r3, #0
 c38:	beq	c88 <coda_netcdf_cursor_goto_next_array_element+0x6c>
 c3c:	ldr	r3, [r1, #4]
 c40:	sub	r0, r3, #1
 c44:	add	r3, r1, r3, lsl #4
 c48:	lsl	r0, r0, #4
 c4c:	ldr	r3, [r3, #-24]	; 0xffffffe8
 c50:	add	r2, r1, r0
 c54:	ldr	r3, [r3, #4]
 c58:	ldr	r2, [r2, #12]
 c5c:	ldr	r3, [r3, #44]	; 0x2c
 c60:	add	r2, r2, #1
 c64:	cmp	r2, r3
 c68:	movlt	ip, #0
 c6c:	movge	ip, #1
 c70:	orrs	ip, ip, r2, lsr #31
 c74:	bne	ca4 <coda_netcdf_cursor_goto_next_array_element+0x88>
 c78:	add	r1, r1, r0
 c7c:	mov	r0, #0
 c80:	str	r2, [r1, #12]
 c84:	pop	{r4, pc}
 c88:	ldr	r0, [r1, #4]
 c8c:	sub	r0, r0, #1
 c90:	lsl	r0, r0, #4
 c94:	add	r3, r1, r0
 c98:	ldr	r2, [r3, #12]
 c9c:	add	r2, r2, #1
 ca0:	b	c78 <coda_netcdf_cursor_goto_next_array_element+0x5c>
 ca4:	ldr	r1, [pc, #16]	; cbc <coda_netcdf_cursor_goto_next_array_element+0xa0>
 ca8:	mvn	r0, #106	; 0x6a
 cac:	bl	0 <coda_set_error>
 cb0:	mvn	r0, #0
 cb4:	pop	{r4, pc}
 cb8:	.word	0x00000088
 cbc:	.word	0x000001c8

00000cc0 <coda_netcdf_cursor_goto_attributes>:
 cc0:	push	{r4, r5, r6, r7, r8, lr}
 cc4:	mov	r4, r0
 cc8:	ldr	r5, [r0, #4]
 ccc:	add	r3, r5, #1
 cd0:	add	r2, r0, r5, lsl #4
 cd4:	ldr	r2, [r2, #-8]
 cd8:	str	r3, [r0, #4]
 cdc:	ldr	r2, [r2, #8]
 ce0:	cmp	r2, #0
 ce4:	beq	d14 <coda_netcdf_cursor_goto_attributes+0x54>
 ce8:	add	r5, r0, r5, lsl #4
 cec:	str	r2, [r5, #8]
 cf0:	add	r2, r4, r3, lsl #4
 cf4:	mvn	r6, #0
 cf8:	lsl	r3, r3, #4
 cfc:	mvn	r7, #0
 d00:	mvn	r1, #0
 d04:	str	r1, [r2, #-4]
 d08:	mov	r0, #0
 d0c:	strd	r6, [r4, r3]
 d10:	pop	{r4, r5, r6, r7, r8, pc}
 d14:	mov	r0, #6
 d18:	bl	0 <coda_mem_empty_record>
 d1c:	add	r5, r4, r5, lsl #4
 d20:	ldr	r3, [r4, #4]
 d24:	str	r0, [r5, #8]
 d28:	b	cf0 <coda_netcdf_cursor_goto_attributes+0x30>

00000d2c <coda_netcdf_cursor_get_num_elements>:
 d2c:	ldr	r3, [r0, #4]
 d30:	add	r0, r0, r3, lsl #4
 d34:	ldr	r3, [r0, #-8]
 d38:	mov	r0, #0
 d3c:	ldr	r3, [r3, #4]
 d40:	ldr	r2, [r3, #8]
 d44:	cmp	r2, #1
 d48:	movne	r3, #1
 d4c:	ldreq	r3, [r3, #44]	; 0x2c
 d50:	str	r3, [r1]
 d54:	bx	lr

00000d58 <coda_netcdf_cursor_get_string_length>:
 d58:	ldr	r3, [r0, #4]
 d5c:	add	r0, r0, r3, lsl #4
 d60:	ldr	r3, [r0, #-8]
 d64:	ldr	r0, [r3, #4]
 d68:	b	0 <coda_type_get_string_length>

00000d6c <coda_netcdf_cursor_get_array_dim>:
 d6c:	ldr	r3, [r0, #4]
 d70:	add	r0, r0, r3, lsl #4
 d74:	ldr	r3, [r0, #-8]
 d78:	ldr	r0, [r3, #4]
 d7c:	b	0 <coda_type_get_array_dim>

00000d80 <coda_netcdf_cursor_read_int8>:
 d80:	mvn	r2, #0
 d84:	b	1d4 <read_basic_type>

00000d88 <coda_netcdf_cursor_read_int16>:
 d88:	mvn	r2, #0
 d8c:	b	1d4 <read_basic_type>

00000d90 <coda_netcdf_cursor_read_int32>:
 d90:	mvn	r2, #0
 d94:	b	1d4 <read_basic_type>

00000d98 <coda_netcdf_cursor_read_float>:
 d98:	mvn	r2, #0
 d9c:	b	1d4 <read_basic_type>

00000da0 <coda_netcdf_cursor_read_double>:
 da0:	mvn	r2, #0
 da4:	b	1d4 <read_basic_type>

00000da8 <coda_netcdf_cursor_read_char>:
 da8:	mvn	r2, #0
 dac:	b	1d4 <read_basic_type>

00000db0 <coda_netcdf_cursor_read_string>:
 db0:	push	{r4, r5, r6, lr}
 db4:	mov	r4, r1
 db8:	mov	r5, r2
 dbc:	bl	1d4 <read_basic_type>
 dc0:	cmp	r0, #0
 dc4:	addeq	r4, r4, r5
 dc8:	mvnne	r0, #0
 dcc:	strbeq	r0, [r4, #-1]
 dd0:	pop	{r4, r5, r6, pc}

00000dd4 <coda_netcdf_cursor_read_int8_array>:
 dd4:	b	438 <read_array>

00000dd8 <coda_netcdf_cursor_read_int16_array>:
 dd8:	b	438 <read_array>

00000ddc <coda_netcdf_cursor_read_int32_array>:
 ddc:	b	438 <read_array>

00000de0 <coda_netcdf_cursor_read_float_array>:
 de0:	b	438 <read_array>

00000de4 <coda_netcdf_cursor_read_double_array>:
 de4:	b	438 <read_array>

00000de8 <coda_netcdf_cursor_read_char_array>:
 de8:	b	438 <read_array>

00000dec <coda_netcdf_cursor_read_int8_partial_array>:
 dec:	b	6a8 <read_partial_array>

00000df0 <coda_netcdf_cursor_read_int16_partial_array>:
 df0:	b	6a8 <read_partial_array>

00000df4 <coda_netcdf_cursor_read_int32_partial_array>:
 df4:	b	6a8 <read_partial_array>

00000df8 <coda_netcdf_cursor_read_float_partial_array>:
 df8:	b	6a8 <read_partial_array>

00000dfc <coda_netcdf_cursor_read_double_partial_array>:
 dfc:	b	6a8 <read_partial_array>

00000e00 <coda_netcdf_cursor_read_char_partial_array>:
 e00:	b	6a8 <read_partial_array>
