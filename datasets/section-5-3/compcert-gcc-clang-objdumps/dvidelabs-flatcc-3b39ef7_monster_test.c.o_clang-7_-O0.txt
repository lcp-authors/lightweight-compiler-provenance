
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/monster_test/CMakeFiles/monster_test.dir/monster_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <verify_empty_monster>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #64	; 0x40
       c:	str	r0, [fp, #-8]
      10:	ldr	r0, [fp, #-8]
      14:	movw	r1, #0
      18:	movt	r1, #0
      1c:	bl	210 <MyGame_Example_Monster_as_root_with_identifier>
      20:	str	r0, [fp, #-12]
      24:	ldr	r0, [fp, #-8]
      28:	movw	r1, #0
      2c:	movt	r1, #0
      30:	bl	210 <MyGame_Example_Monster_as_root_with_identifier>
      34:	str	r0, [fp, #-16]
      38:	ldr	r0, [fp, #-8]
      3c:	movw	r1, #0
      40:	bl	210 <MyGame_Example_Monster_as_root_with_identifier>
      44:	str	r0, [fp, #-20]	; 0xffffffec
      48:	ldr	r0, [fp, #-8]
      4c:	movw	r1, #0
      50:	movt	r1, #0
      54:	bl	210 <MyGame_Example_Monster_as_root_with_identifier>
      58:	str	r0, [fp, #-24]	; 0xffffffe8
      5c:	ldr	r0, [fp, #-8]
      60:	bl	280 <MyGame_Example_Monster_as_root>
      64:	str	r0, [fp, #-28]	; 0xffffffe4
      68:	ldr	r0, [fp, #-12]
      6c:	movw	r1, #0
      70:	cmp	r0, r1
      74:	bne	94 <verify_empty_monster+0x94>
      78:	movw	r0, #0
      7c:	movt	r0, #0
      80:	bl	0 <printf>
      84:	mvn	lr, #0
      88:	str	lr, [fp, #-4]
      8c:	str	r0, [sp, #32]
      90:	b	204 <verify_empty_monster+0x204>
      94:	ldr	r0, [fp, #-16]
      98:	movw	r1, #0
      9c:	cmp	r0, r1
      a0:	beq	c0 <verify_empty_monster+0xc0>
      a4:	movw	r0, #0
      a8:	movt	r0, #0
      ac:	bl	0 <printf>
      b0:	mvn	lr, #0
      b4:	str	lr, [fp, #-4]
      b8:	str	r0, [sp, #28]
      bc:	b	204 <verify_empty_monster+0x204>
      c0:	ldr	r0, [fp, #-20]	; 0xffffffec
      c4:	ldr	r1, [fp, #-12]
      c8:	cmp	r0, r1
      cc:	beq	ec <verify_empty_monster+0xec>
      d0:	movw	r0, #0
      d4:	movt	r0, #0
      d8:	bl	0 <printf>
      dc:	mvn	lr, #0
      e0:	str	lr, [fp, #-4]
      e4:	str	r0, [sp, #24]
      e8:	b	204 <verify_empty_monster+0x204>
      ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
      f0:	ldr	r1, [fp, #-12]
      f4:	cmp	r0, r1
      f8:	beq	118 <verify_empty_monster+0x118>
      fc:	movw	r0, #0
     100:	movt	r0, #0
     104:	bl	0 <printf>
     108:	mvn	lr, #0
     10c:	str	lr, [fp, #-4]
     110:	str	r0, [sp, #20]
     114:	b	204 <verify_empty_monster+0x204>
     118:	ldr	r0, [fp, #-28]	; 0xffffffe4
     11c:	ldr	r1, [fp, #-12]
     120:	cmp	r0, r1
     124:	beq	144 <verify_empty_monster+0x144>
     128:	movw	r0, #0
     12c:	movt	r0, #0
     130:	bl	0 <printf>
     134:	mvn	lr, #0
     138:	str	lr, [fp, #-4]
     13c:	str	r0, [sp, #16]
     140:	b	204 <verify_empty_monster+0x204>
     144:	ldr	r0, [fp, #-12]
     148:	bl	2f8 <MyGame_Example_Monster_hp>
     14c:	sxth	r0, r0
     150:	cmp	r0, #100	; 0x64
     154:	beq	174 <verify_empty_monster+0x174>
     158:	movw	r0, #0
     15c:	movt	r0, #0
     160:	bl	0 <printf>
     164:	mvn	lr, #0
     168:	str	lr, [fp, #-4]
     16c:	str	r0, [sp, #12]
     170:	b	204 <verify_empty_monster+0x204>
     174:	ldr	r0, [fp, #-12]
     178:	bl	3e0 <MyGame_Example_Monster_hp_is_present>
     17c:	cmp	r0, #0
     180:	beq	1a0 <verify_empty_monster+0x1a0>
     184:	movw	r0, #0
     188:	movt	r0, #0
     18c:	bl	0 <printf>
     190:	mvn	lr, #0
     194:	str	lr, [fp, #-4]
     198:	str	r0, [sp, #8]
     19c:	b	204 <verify_empty_monster+0x204>
     1a0:	ldr	r0, [fp, #-12]
     1a4:	bl	4a0 <MyGame_Example_Monster_pos_is_present>
     1a8:	cmp	r0, #0
     1ac:	beq	1cc <verify_empty_monster+0x1cc>
     1b0:	movw	r0, #0
     1b4:	movt	r0, #0
     1b8:	bl	0 <printf>
     1bc:	mvn	lr, #0
     1c0:	str	lr, [fp, #-4]
     1c4:	str	r0, [sp, #4]
     1c8:	b	204 <verify_empty_monster+0x204>
     1cc:	ldr	r0, [fp, #-12]
     1d0:	bl	560 <MyGame_Example_Monster_pos>
     1d4:	movw	lr, #0
     1d8:	cmp	r0, lr
     1dc:	beq	1fc <verify_empty_monster+0x1fc>
     1e0:	movw	r0, #0
     1e4:	movt	r0, #0
     1e8:	bl	0 <printf>
     1ec:	mvn	lr, #0
     1f0:	str	lr, [fp, #-4]
     1f4:	str	r0, [sp]
     1f8:	b	204 <verify_empty_monster+0x204>
     1fc:	movw	r0, #0
     200:	str	r0, [fp, #-4]
     204:	ldr	r0, [fp, #-4]
     208:	mov	sp, fp
     20c:	pop	{fp, pc}

00000210 <MyGame_Example_Monster_as_root_with_identifier>:
     210:	push	{fp, lr}
     214:	mov	fp, sp
     218:	sub	sp, sp, #16
     21c:	str	r0, [fp, #-4]
     220:	str	r1, [sp, #8]
     224:	ldr	r0, [fp, #-4]
     228:	movw	r1, #0
     22c:	cmp	r0, r1
     230:	beq	248 <MyGame_Example_Monster_as_root_with_identifier+0x38>
     234:	ldr	r0, [fp, #-4]
     238:	ldr	r1, [sp, #8]
     23c:	bl	2674 <flatbuffers_has_identifier>
     240:	cmp	r0, #0
     244:	bne	254 <MyGame_Example_Monster_as_root_with_identifier+0x44>
     248:	movw	r0, #0
     24c:	str	r0, [sp, #4]
     250:	b	274 <MyGame_Example_Monster_as_root_with_identifier+0x64>
     254:	ldr	r0, [fp, #-4]
     258:	ldr	r1, [fp, #-4]
     25c:	str	r0, [sp]
     260:	mov	r0, r1
     264:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
     268:	ldr	r1, [sp]
     26c:	add	r0, r1, r0
     270:	str	r0, [sp, #4]
     274:	ldr	r0, [sp, #4]
     278:	mov	sp, fp
     27c:	pop	{fp, pc}

00000280 <MyGame_Example_Monster_as_root>:
     280:	push	{fp, lr}
     284:	mov	fp, sp
     288:	sub	sp, sp, #16
     28c:	str	r0, [fp, #-4]
     290:	movw	r0, #0
     294:	movt	r0, #0
     298:	str	r0, [sp, #8]
     29c:	ldr	r0, [fp, #-4]
     2a0:	movw	r1, #0
     2a4:	cmp	r0, r1
     2a8:	beq	2c0 <MyGame_Example_Monster_as_root+0x40>
     2ac:	ldr	r0, [fp, #-4]
     2b0:	ldr	r1, [sp, #8]
     2b4:	bl	2674 <flatbuffers_has_identifier>
     2b8:	cmp	r0, #0
     2bc:	bne	2cc <MyGame_Example_Monster_as_root+0x4c>
     2c0:	movw	r0, #0
     2c4:	str	r0, [sp, #4]
     2c8:	b	2ec <MyGame_Example_Monster_as_root+0x6c>
     2cc:	ldr	r0, [fp, #-4]
     2d0:	ldr	r1, [fp, #-4]
     2d4:	str	r0, [sp]
     2d8:	mov	r0, r1
     2dc:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
     2e0:	ldr	r1, [sp]
     2e4:	add	r0, r1, r0
     2e8:	str	r0, [sp, #4]
     2ec:	ldr	r0, [sp, #4]
     2f0:	mov	sp, fp
     2f4:	pop	{fp, pc}

000002f8 <MyGame_Example_Monster_hp>:
     2f8:	push	{fp, lr}
     2fc:	mov	fp, sp
     300:	sub	sp, sp, #24
     304:	str	r0, [fp, #-4]
     308:	movw	r0, #0
     30c:	strh	r0, [fp, #-6]
     310:	ldr	r0, [fp, #-4]
     314:	movw	r1, #0
     318:	cmp	r0, r1
     31c:	beq	328 <MyGame_Example_Monster_hp+0x30>
     320:	b	324 <MyGame_Example_Monster_hp+0x2c>
     324:	b	348 <MyGame_Example_Monster_hp+0x50>
     328:	movw	r0, #0
     32c:	movt	r0, #0
     330:	movw	r1, #0
     334:	movt	r1, #0
     338:	movw	r2, #697	; 0x2b9
     33c:	movw	r3, #0
     340:	movt	r3, #0
     344:	bl	0 <__assert_fail>
     348:	mov	r0, #2
     34c:	strh	r0, [fp, #-8]
     350:	ldr	r0, [fp, #-4]
     354:	str	r0, [sp, #8]
     358:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
     35c:	ldr	lr, [sp, #8]
     360:	sub	r0, lr, r0
     364:	str	r0, [sp, #12]
     368:	ldr	r0, [sp, #12]
     36c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     370:	ldrh	lr, [fp, #-8]
     374:	add	lr, lr, #3
     378:	lsl	lr, lr, #1
     37c:	cmp	r0, lr
     380:	bcc	39c <MyGame_Example_Monster_hp+0xa4>
     384:	ldr	r0, [sp, #12]
     388:	ldrh	r1, [fp, #-8]
     38c:	add	r0, r0, r1, lsl #1
     390:	add	r0, r0, #4
     394:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     398:	strh	r0, [fp, #-6]
     39c:	ldrh	r0, [fp, #-6]
     3a0:	cmp	r0, #0
     3a4:	beq	3c4 <MyGame_Example_Monster_hp+0xcc>
     3a8:	ldr	r0, [fp, #-4]
     3ac:	ldrh	r1, [fp, #-6]
     3b0:	add	r0, r0, r1
     3b4:	bl	fa0c <flatbuffers_int16_read_from_pe>
     3b8:	sxth	r0, r0
     3bc:	str	r0, [sp, #4]
     3c0:	b	3d0 <MyGame_Example_Monster_hp+0xd8>
     3c4:	movw	r0, #100	; 0x64
     3c8:	str	r0, [sp, #4]
     3cc:	b	3d0 <MyGame_Example_Monster_hp+0xd8>
     3d0:	ldr	r0, [sp, #4]
     3d4:	sxth	r0, r0
     3d8:	mov	sp, fp
     3dc:	pop	{fp, pc}

000003e0 <MyGame_Example_Monster_hp_is_present>:
     3e0:	push	{fp, lr}
     3e4:	mov	fp, sp
     3e8:	sub	sp, sp, #16
     3ec:	str	r0, [fp, #-4]
     3f0:	movw	r0, #0
     3f4:	strh	r0, [fp, #-6]
     3f8:	ldr	r0, [fp, #-4]
     3fc:	movw	r1, #0
     400:	cmp	r0, r1
     404:	beq	410 <MyGame_Example_Monster_hp_is_present+0x30>
     408:	b	40c <MyGame_Example_Monster_hp_is_present+0x2c>
     40c:	b	430 <MyGame_Example_Monster_hp_is_present+0x50>
     410:	movw	r0, #0
     414:	movt	r0, #0
     418:	movw	r1, #0
     41c:	movt	r1, #0
     420:	movw	r2, #697	; 0x2b9
     424:	movw	r3, #0
     428:	movt	r3, #0
     42c:	bl	0 <__assert_fail>
     430:	mov	r0, #2
     434:	strh	r0, [sp, #8]
     438:	ldr	r0, [fp, #-4]
     43c:	str	r0, [sp]
     440:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
     444:	ldr	lr, [sp]
     448:	sub	r0, lr, r0
     44c:	str	r0, [sp, #4]
     450:	ldr	r0, [sp, #4]
     454:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     458:	ldrh	lr, [sp, #8]
     45c:	add	lr, lr, #3
     460:	lsl	lr, lr, #1
     464:	cmp	r0, lr
     468:	bcc	484 <MyGame_Example_Monster_hp_is_present+0xa4>
     46c:	ldr	r0, [sp, #4]
     470:	ldrh	r1, [sp, #8]
     474:	add	r0, r0, r1, lsl #1
     478:	add	r0, r0, #4
     47c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     480:	strh	r0, [fp, #-6]
     484:	ldrh	r0, [fp, #-6]
     488:	cmp	r0, #0
     48c:	movw	r0, #0
     490:	movne	r0, #1
     494:	and	r0, r0, #1
     498:	mov	sp, fp
     49c:	pop	{fp, pc}

000004a0 <MyGame_Example_Monster_pos_is_present>:
     4a0:	push	{fp, lr}
     4a4:	mov	fp, sp
     4a8:	sub	sp, sp, #16
     4ac:	str	r0, [fp, #-4]
     4b0:	movw	r0, #0
     4b4:	strh	r0, [fp, #-6]
     4b8:	ldr	r0, [fp, #-4]
     4bc:	movw	r1, #0
     4c0:	cmp	r0, r1
     4c4:	beq	4d0 <MyGame_Example_Monster_pos_is_present+0x30>
     4c8:	b	4cc <MyGame_Example_Monster_pos_is_present+0x2c>
     4cc:	b	4f0 <MyGame_Example_Monster_pos_is_present+0x50>
     4d0:	movw	r0, #0
     4d4:	movt	r0, #0
     4d8:	movw	r1, #0
     4dc:	movt	r1, #0
     4e0:	movw	r2, #696	; 0x2b8
     4e4:	movw	r3, #0
     4e8:	movt	r3, #0
     4ec:	bl	0 <__assert_fail>
     4f0:	mov	r0, #0
     4f4:	strh	r0, [sp, #8]
     4f8:	ldr	r0, [fp, #-4]
     4fc:	str	r0, [sp]
     500:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
     504:	ldr	lr, [sp]
     508:	sub	r0, lr, r0
     50c:	str	r0, [sp, #4]
     510:	ldr	r0, [sp, #4]
     514:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     518:	ldrh	lr, [sp, #8]
     51c:	add	lr, lr, #3
     520:	lsl	lr, lr, #1
     524:	cmp	r0, lr
     528:	bcc	544 <MyGame_Example_Monster_pos_is_present+0xa4>
     52c:	ldr	r0, [sp, #4]
     530:	ldrh	r1, [sp, #8]
     534:	add	r0, r0, r1, lsl #1
     538:	add	r0, r0, #4
     53c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     540:	strh	r0, [fp, #-6]
     544:	ldrh	r0, [fp, #-6]
     548:	cmp	r0, #0
     54c:	movw	r0, #0
     550:	movne	r0, #1
     554:	and	r0, r0, #1
     558:	mov	sp, fp
     55c:	pop	{fp, pc}

00000560 <MyGame_Example_Monster_pos>:
     560:	push	{fp, lr}
     564:	mov	fp, sp
     568:	sub	sp, sp, #24
     56c:	str	r0, [fp, #-8]
     570:	movw	r0, #0
     574:	strh	r0, [fp, #-10]
     578:	ldr	r0, [fp, #-8]
     57c:	movw	r1, #0
     580:	cmp	r0, r1
     584:	beq	590 <MyGame_Example_Monster_pos+0x30>
     588:	b	58c <MyGame_Example_Monster_pos+0x2c>
     58c:	b	5b0 <MyGame_Example_Monster_pos+0x50>
     590:	movw	r0, #0
     594:	movt	r0, #0
     598:	movw	r1, #0
     59c:	movt	r1, #0
     5a0:	movw	r2, #696	; 0x2b8
     5a4:	movw	r3, #0
     5a8:	movt	r3, #0
     5ac:	bl	0 <__assert_fail>
     5b0:	mov	r0, #0
     5b4:	strh	r0, [sp, #12]
     5b8:	ldr	r0, [fp, #-8]
     5bc:	str	r0, [sp, #4]
     5c0:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
     5c4:	ldr	lr, [sp, #4]
     5c8:	sub	r0, lr, r0
     5cc:	str	r0, [sp, #8]
     5d0:	ldr	r0, [sp, #8]
     5d4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     5d8:	ldrh	lr, [sp, #12]
     5dc:	add	lr, lr, #3
     5e0:	lsl	lr, lr, #1
     5e4:	cmp	r0, lr
     5e8:	bcc	604 <MyGame_Example_Monster_pos+0xa4>
     5ec:	ldr	r0, [sp, #8]
     5f0:	ldrh	r1, [sp, #12]
     5f4:	add	r0, r0, r1, lsl #1
     5f8:	add	r0, r0, #4
     5fc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     600:	strh	r0, [fp, #-10]
     604:	ldrsh	r0, [fp, #-10]
     608:	cmp	r0, #0
     60c:	beq	624 <MyGame_Example_Monster_pos+0xc4>
     610:	ldr	r0, [fp, #-8]
     614:	ldrh	r1, [fp, #-10]
     618:	add	r0, r0, r1
     61c:	str	r0, [fp, #-4]
     620:	b	62c <MyGame_Example_Monster_pos+0xcc>
     624:	movw	r0, #0
     628:	str	r0, [fp, #-4]
     62c:	ldr	r0, [fp, #-4]
     630:	mov	sp, fp
     634:	pop	{fp, pc}

00000638 <test_enums>:
     638:	sub	sp, sp, #4
     63c:	str	r0, [sp]
     640:	movw	r0, #0
     644:	add	sp, sp, #4
     648:	bx	lr
     64c:	nop	{0}

00000650 <test_type_aliases>:
     650:	push	{fp, lr}
     654:	mov	fp, sp
     658:	sub	sp, sp, #96	; 0x60
     65c:	str	r0, [fp, #-4]
     660:	movw	r0, #0
     664:	str	r0, [fp, #-8]
     668:	str	r0, [fp, #-12]
     66c:	ldr	r0, [fp, #-4]
     670:	bl	0 <flatcc_builder_reset>
     674:	ldr	lr, [fp, #-4]
     678:	str	r0, [fp, #-32]	; 0xffffffe0
     67c:	mov	r0, lr
     680:	movw	lr, #0
     684:	mov	r1, lr
     688:	mov	r2, lr
     68c:	bl	8e8 <flatbuffers_uint8_vec_create>
     690:	str	r0, [fp, #-24]	; 0xffffffe8
     694:	ldr	r0, [fp, #-4]
     698:	movw	r1, #0
     69c:	str	r1, [fp, #-36]	; 0xffffffdc
     6a0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     6a4:	bl	930 <flatbuffers_double_vec_create>
     6a8:	ldr	r1, [pc, #560]	; 8e0 <test_type_aliases+0x290>
     6ac:	str	r0, [fp, #-28]	; 0xffffffe4
     6b0:	ldr	r0, [fp, #-4]
     6b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     6b8:	ldr	lr, [fp, #-28]	; 0xffffffe4
     6bc:	mov	r3, sp
     6c0:	str	lr, [r3, #36]	; 0x24
     6c4:	str	r2, [r3, #32]
     6c8:	mvn	r2, #0
     6cc:	str	r2, [r3, #28]
     6d0:	str	r2, [r3, #24]
     6d4:	mov	lr, #-2147483648	; 0x80000000
     6d8:	str	lr, [r3, #20]
     6dc:	mov	ip, #0
     6e0:	str	ip, [r3, #16]
     6e4:	str	r2, [r3, #8]
     6e8:	str	lr, [r3, #4]
     6ec:	movw	r2, #65535	; 0xffff
     6f0:	str	r2, [r3]
     6f4:	mvn	r2, #127	; 0x7f
     6f8:	mov	r3, #255	; 0xff
     6fc:	movw	ip, #32768	; 0x8000
     700:	movt	ip, #65535	; 0xffff
     704:	vldr	s0, [pc, #472]	; 8e4 <test_type_aliases+0x294>
     708:	vldr	d1, [pc, #456]	; 8d8 <test_type_aliases+0x288>
     70c:	str	r1, [fp, #-40]	; 0xffffffd8
     710:	mov	r1, r2
     714:	mov	r2, r3
     718:	mov	r3, ip
     71c:	bl	988 <MyGame_Example_TypeAliases_create_as_root>
     720:	ldr	r1, [fp, #-4]
     724:	str	r0, [fp, #-44]	; 0xffffffd4
     728:	mov	r0, r1
     72c:	sub	r1, fp, #16
     730:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     734:	str	r0, [fp, #-12]
     738:	ldr	r0, [fp, #-12]
     73c:	ldr	r1, [fp, #-16]
     740:	bl	ad4 <MyGame_Example_TypeAliases_verify_as_root>
     744:	str	r0, [fp, #-8]
     748:	cmp	r0, #0
     74c:	beq	798 <test_type_aliases+0x148>
     750:	ldr	r1, [fp, #-12]
     754:	ldr	r2, [fp, #-16]
     758:	movw	r0, #0
     75c:	movt	r0, #0
     760:	ldr	r3, [r0]
     764:	movw	r0, #0
     768:	movt	r0, #0
     76c:	bl	b0c <hexdump>
     770:	ldr	r0, [fp, #-8]
     774:	bl	0 <flatcc_verify_error_string>
     778:	movw	r1, #0
     77c:	movt	r1, #0
     780:	str	r0, [sp, #48]	; 0x30
     784:	mov	r0, r1
     788:	ldr	r1, [sp, #48]	; 0x30
     78c:	bl	0 <printf>
     790:	str	r0, [sp, #44]	; 0x2c
     794:	b	8a8 <test_type_aliases+0x258>
     798:	ldr	r0, [fp, #-12]
     79c:	bl	d00 <MyGame_Example_TypeAliases_as_root>
     7a0:	str	r0, [fp, #-20]	; 0xffffffec
     7a4:	ldr	r0, [fp, #-20]	; 0xffffffec
     7a8:	bl	d78 <MyGame_Example_TypeAliases_i8>
     7ac:	sxtb	r0, r0
     7b0:	cmn	r0, #128	; 0x80
     7b4:	beq	7bc <test_type_aliases+0x16c>
     7b8:	b	8bc <test_type_aliases+0x26c>
     7bc:	ldr	r0, [fp, #-20]	; 0xffffffec
     7c0:	bl	e60 <MyGame_Example_TypeAliases_i16>
     7c4:	sxth	r0, r0
     7c8:	cmn	r0, #32768	; 0x8000
     7cc:	beq	7d4 <test_type_aliases+0x184>
     7d0:	b	8bc <test_type_aliases+0x26c>
     7d4:	ldr	r0, [fp, #-20]	; 0xffffffec
     7d8:	bl	f48 <MyGame_Example_TypeAliases_i32>
     7dc:	cmp	r0, #-2147483648	; 0x80000000
     7e0:	beq	7e8 <test_type_aliases+0x198>
     7e4:	b	8bc <test_type_aliases+0x26c>
     7e8:	ldr	r0, [fp, #-20]	; 0xffffffec
     7ec:	bl	1028 <MyGame_Example_TypeAliases_i64>
     7f0:	eor	r1, r1, #-2147483648	; 0x80000000
     7f4:	orr	r0, r0, r1
     7f8:	cmp	r0, #0
     7fc:	beq	808 <test_type_aliases+0x1b8>
     800:	b	804 <test_type_aliases+0x1b4>
     804:	b	8bc <test_type_aliases+0x26c>
     808:	ldr	r0, [fp, #-20]	; 0xffffffec
     80c:	bl	1124 <MyGame_Example_TypeAliases_u8>
     810:	and	r0, r0, #255	; 0xff
     814:	cmp	r0, #255	; 0xff
     818:	beq	820 <test_type_aliases+0x1d0>
     81c:	b	8bc <test_type_aliases+0x26c>
     820:	ldr	r0, [fp, #-20]	; 0xffffffec
     824:	bl	120c <MyGame_Example_TypeAliases_u16>
     828:	uxth	r0, r0
     82c:	movw	lr, #65535	; 0xffff
     830:	cmp	r0, lr
     834:	beq	83c <test_type_aliases+0x1ec>
     838:	b	8bc <test_type_aliases+0x26c>
     83c:	ldr	r0, [fp, #-20]	; 0xffffffec
     840:	bl	12f4 <MyGame_Example_TypeAliases_u32>
     844:	cmn	r0, #1
     848:	beq	850 <test_type_aliases+0x200>
     84c:	b	8bc <test_type_aliases+0x26c>
     850:	ldr	r0, [fp, #-20]	; 0xffffffec
     854:	bl	13d4 <MyGame_Example_TypeAliases_u64>
     858:	and	r0, r0, r1
     85c:	cmn	r0, #1
     860:	beq	86c <test_type_aliases+0x21c>
     864:	b	868 <test_type_aliases+0x218>
     868:	b	8bc <test_type_aliases+0x26c>
     86c:	ldr	r0, [fp, #-20]	; 0xffffffec
     870:	bl	14d0 <MyGame_Example_TypeAliases_f32>
     874:	vldr	s2, [pc, #104]	; 8e4 <test_type_aliases+0x294>
     878:	vcmp.f32	s0, s2
     87c:	vmrs	APSR_nzcv, fpscr
     880:	beq	888 <test_type_aliases+0x238>
     884:	b	8bc <test_type_aliases+0x26c>
     888:	ldr	r0, [fp, #-20]	; 0xffffffec
     88c:	bl	15b8 <MyGame_Example_TypeAliases_f64>
     890:	vldr	d16, [pc, #64]	; 8d8 <test_type_aliases+0x288>
     894:	vcmp.f64	d0, d16
     898:	vmrs	APSR_nzcv, fpscr
     89c:	beq	8a4 <test_type_aliases+0x254>
     8a0:	b	8bc <test_type_aliases+0x26c>
     8a4:	b	8a8 <test_type_aliases+0x258>
     8a8:	ldr	r0, [fp, #-12]
     8ac:	bl	0 <flatcc_builder_aligned_free>
     8b0:	ldr	r0, [fp, #-8]
     8b4:	mov	sp, fp
     8b8:	pop	{fp, pc}
     8bc:	mvn	r0, #0
     8c0:	str	r0, [fp, #-8]
     8c4:	movw	r0, #0
     8c8:	movt	r0, #0
     8cc:	bl	0 <printf>
     8d0:	str	r0, [sp, #40]	; 0x28
     8d4:	b	8a8 <test_type_aliases+0x258>
     8d8:	.word	0x66666666
     8dc:	.word	0x40026666
     8e0:	.word	0x80000000
     8e4:	.word	0x40133333

000008e8 <flatbuffers_uint8_vec_create>:
     8e8:	push	{fp, lr}
     8ec:	mov	fp, sp
     8f0:	sub	sp, sp, #24
     8f4:	str	r0, [fp, #-4]
     8f8:	str	r1, [fp, #-8]
     8fc:	str	r2, [sp, #12]
     900:	ldr	r0, [fp, #-4]
     904:	ldr	r1, [fp, #-8]
     908:	ldr	r2, [sp, #12]
     90c:	movw	r3, #1
     910:	movw	ip, #1
     914:	uxth	ip, ip
     918:	str	ip, [sp]
     91c:	mvn	ip, #0
     920:	str	ip, [sp, #4]
     924:	bl	0 <flatcc_builder_create_vector>
     928:	mov	sp, fp
     92c:	pop	{fp, pc}

00000930 <flatbuffers_double_vec_create>:
     930:	push	{fp, lr}
     934:	mov	fp, sp
     938:	sub	sp, sp, #24
     93c:	ldr	r3, [pc, #64]	; 984 <flatbuffers_double_vec_create+0x54>
     940:	str	r0, [fp, #-4]
     944:	str	r1, [fp, #-8]
     948:	str	r2, [sp, #12]
     94c:	ldr	r0, [fp, #-4]
     950:	ldr	r1, [fp, #-8]
     954:	ldr	r2, [sp, #12]
     958:	movw	ip, #8
     95c:	str	r3, [sp, #8]
     960:	mov	r3, ip
     964:	movw	ip, #8
     968:	uxth	ip, ip
     96c:	str	ip, [sp]
     970:	ldr	ip, [sp, #8]
     974:	str	ip, [sp, #4]
     978:	bl	0 <flatcc_builder_create_vector>
     97c:	mov	sp, fp
     980:	pop	{fp, pc}
     984:	.word	0x1fffffff

00000988 <MyGame_Example_TypeAliases_create_as_root>:
     988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     98c:	add	fp, sp, #28
     990:	sub	sp, sp, #132	; 0x84
     994:	ldr	ip, [fp, #36]	; 0x24
     998:	ldr	lr, [fp, #32]
     99c:	ldr	r4, [fp, #28]
     9a0:	ldr	r5, [fp, #24]
     9a4:	ldr	r6, [fp, #44]	; 0x2c
     9a8:	ldr	r7, [fp, #40]	; 0x28
     9ac:	ldr	r8, [fp, #16]
     9b0:	ldr	r9, [fp, #12]
     9b4:	ldr	sl, [fp, #8]
     9b8:	str	r0, [fp, #-36]	; 0xffffffdc
     9bc:	strb	r1, [fp, #-37]	; 0xffffffdb
     9c0:	strb	r2, [fp, #-38]	; 0xffffffda
     9c4:	strh	r3, [fp, #-40]	; 0xffffffd8
     9c8:	strh	sl, [fp, #-42]	; 0xffffffd6
     9cc:	str	r4, [fp, #-52]	; 0xffffffcc
     9d0:	str	r5, [fp, #-56]	; 0xffffffc8
     9d4:	str	ip, [fp, #-60]	; 0xffffffc4
     9d8:	str	lr, [fp, #-64]	; 0xffffffc0
     9dc:	vstr	s0, [fp, #-68]	; 0xffffffbc
     9e0:	vstr	d1, [sp, #80]	; 0x50
     9e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
     9e8:	movw	r1, #0
     9ec:	movt	r1, #0
     9f0:	str	r7, [sp, #76]	; 0x4c
     9f4:	str	r8, [sp, #72]	; 0x48
     9f8:	str	r6, [sp, #68]	; 0x44
     9fc:	str	r9, [sp, #64]	; 0x40
     a00:	bl	1818 <flatbuffers_buffer_start>
     a04:	cmp	r0, #0
     a08:	beq	a18 <MyGame_Example_TypeAliases_create_as_root+0x90>
     a0c:	movw	r0, #0
     a10:	str	r0, [fp, #-32]	; 0xffffffe0
     a14:	b	ac8 <MyGame_Example_TypeAliases_create_as_root+0x140>
     a18:	ldr	r0, [fp, #-36]	; 0xffffffdc
     a1c:	mov	r1, r0
     a20:	ldrb	r2, [fp, #-37]	; 0xffffffdb
     a24:	ldrb	r3, [fp, #-38]	; 0xffffffda
     a28:	ldrh	ip, [fp, #-40]	; 0xffffffd8
     a2c:	ldrh	lr, [fp, #-42]	; 0xffffffd6
     a30:	ldr	r4, [fp, #12]
     a34:	ldr	r5, [fp, #16]
     a38:	ldr	r6, [fp, #-56]	; 0xffffffc8
     a3c:	ldr	r7, [fp, #-52]	; 0xffffffcc
     a40:	ldr	r8, [fp, #-64]	; 0xffffffc0
     a44:	ldr	r9, [fp, #-60]	; 0xffffffc4
     a48:	vldr	s0, [fp, #-68]	; 0xffffffbc
     a4c:	vldr	d1, [sp, #80]	; 0x50
     a50:	ldr	sl, [fp, #40]	; 0x28
     a54:	str	r0, [sp, #60]	; 0x3c
     a58:	ldr	r0, [fp, #44]	; 0x2c
     a5c:	str	r0, [sp, #56]	; 0x38
     a60:	mov	r0, sp
     a64:	str	r0, [sp, #52]	; 0x34
     a68:	ldr	r0, [sp, #56]	; 0x38
     a6c:	str	r1, [sp, #48]	; 0x30
     a70:	ldr	r1, [sp, #52]	; 0x34
     a74:	str	r0, [r1, #36]	; 0x24
     a78:	str	sl, [r1, #32]
     a7c:	str	r9, [r1, #28]
     a80:	str	r8, [r1, #24]
     a84:	str	r7, [r1, #20]
     a88:	str	r6, [r1, #16]
     a8c:	str	r5, [r1, #8]
     a90:	str	r4, [r1, #4]
     a94:	uxth	lr, lr
     a98:	str	lr, [r1]
     a9c:	sxtb	r1, r2
     aa0:	uxtb	r2, r3
     aa4:	sxth	r3, ip
     aa8:	ldr	r0, [sp, #60]	; 0x3c
     aac:	bl	fa70 <MyGame_Example_TypeAliases_create>
     ab0:	ldr	r1, [sp, #48]	; 0x30
     ab4:	str	r0, [sp, #44]	; 0x2c
     ab8:	mov	r0, r1
     abc:	ldr	r1, [sp, #44]	; 0x2c
     ac0:	bl	191c <flatbuffers_buffer_end>
     ac4:	str	r0, [fp, #-32]	; 0xffffffe0
     ac8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     acc:	sub	sp, fp, #28
     ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ad4 <MyGame_Example_TypeAliases_verify_as_root>:
     ad4:	push	{fp, lr}
     ad8:	mov	fp, sp
     adc:	sub	sp, sp, #8
     ae0:	str	r0, [sp, #4]
     ae4:	str	r1, [sp]
     ae8:	ldr	r0, [sp, #4]
     aec:	ldr	r1, [sp]
     af0:	movw	r2, #0
     af4:	movt	r2, #0
     af8:	movw	r3, #0
     afc:	movt	r3, #0
     b00:	bl	0 <flatcc_verify_table_as_root>
     b04:	mov	sp, fp
     b08:	pop	{fp, pc}

00000b0c <hexdump>:
     b0c:	push	{fp, lr}
     b10:	mov	fp, sp
     b14:	sub	sp, sp, #72	; 0x48
     b18:	str	r0, [fp, #-4]
     b1c:	str	r1, [fp, #-8]
     b20:	str	r2, [fp, #-12]
     b24:	str	r3, [fp, #-16]
     b28:	ldr	r0, [fp, #-8]
     b2c:	str	r0, [sp, #28]
     b30:	ldr	r0, [fp, #-4]
     b34:	movw	r1, #0
     b38:	cmp	r0, r1
     b3c:	beq	b58 <hexdump+0x4c>
     b40:	ldr	r0, [fp, #-16]
     b44:	ldr	r2, [fp, #-4]
     b48:	movw	r1, #0
     b4c:	movt	r1, #0
     b50:	bl	0 <fprintf>
     b54:	str	r0, [sp, #24]
     b58:	movw	r0, #0
     b5c:	str	r0, [fp, #-20]	; 0xffffffec
     b60:	ldr	r0, [fp, #-20]	; 0xffffffec
     b64:	ldr	r1, [fp, #-12]
     b68:	cmp	r0, r1
     b6c:	bcs	ca8 <hexdump+0x19c>
     b70:	ldr	r0, [fp, #-20]	; 0xffffffec
     b74:	and	r0, r0, #15
     b78:	cmp	r0, #0
     b7c:	bne	bc0 <hexdump+0xb4>
     b80:	ldr	r0, [fp, #-20]	; 0xffffffec
     b84:	cmp	r0, #0
     b88:	beq	ba4 <hexdump+0x98>
     b8c:	add	r2, sp, #35	; 0x23
     b90:	ldr	r0, [fp, #-16]
     b94:	movw	r1, #0
     b98:	movt	r1, #0
     b9c:	bl	0 <fprintf>
     ba0:	str	r0, [sp, #20]
     ba4:	ldr	r0, [fp, #-16]
     ba8:	ldr	r2, [fp, #-20]	; 0xffffffec
     bac:	movw	r1, #0
     bb0:	movt	r1, #0
     bb4:	bl	0 <fprintf>
     bb8:	str	r0, [sp, #16]
     bbc:	b	be8 <hexdump+0xdc>
     bc0:	ldr	r0, [fp, #-20]	; 0xffffffec
     bc4:	and	r0, r0, #7
     bc8:	cmp	r0, #0
     bcc:	bne	be4 <hexdump+0xd8>
     bd0:	ldr	r0, [fp, #-16]
     bd4:	movw	r1, #0
     bd8:	movt	r1, #0
     bdc:	bl	0 <fprintf>
     be0:	str	r0, [sp, #12]
     be4:	b	be8 <hexdump+0xdc>
     be8:	ldr	r0, [fp, #-16]
     bec:	ldr	r1, [sp, #28]
     bf0:	ldr	r2, [fp, #-20]	; 0xffffffec
     bf4:	add	r1, r1, r2
     bf8:	ldrb	r2, [r1]
     bfc:	movw	r1, #0
     c00:	movt	r1, #0
     c04:	bl	0 <fprintf>
     c08:	ldr	r1, [sp, #28]
     c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
     c10:	add	r1, r1, r2
     c14:	ldrb	r1, [r1]
     c18:	cmp	r1, #32
     c1c:	str	r0, [sp, #8]
     c20:	blt	c3c <hexdump+0x130>
     c24:	ldr	r0, [sp, #28]
     c28:	ldr	r1, [fp, #-20]	; 0xffffffec
     c2c:	add	r0, r0, r1
     c30:	ldrb	r0, [r0]
     c34:	cmp	r0, #126	; 0x7e
     c38:	ble	c58 <hexdump+0x14c>
     c3c:	ldr	r0, [fp, #-20]	; 0xffffffec
     c40:	and	r0, r0, #15
     c44:	add	r1, sp, #35	; 0x23
     c48:	add	r0, r1, r0
     c4c:	movw	r1, #46	; 0x2e
     c50:	strb	r1, [r0]
     c54:	b	c7c <hexdump+0x170>
     c58:	ldr	r0, [sp, #28]
     c5c:	ldr	r1, [fp, #-20]	; 0xffffffec
     c60:	add	r0, r0, r1
     c64:	ldrb	r0, [r0]
     c68:	ldr	r1, [fp, #-20]	; 0xffffffec
     c6c:	and	r1, r1, #15
     c70:	add	r2, sp, #35	; 0x23
     c74:	add	r1, r2, r1
     c78:	strb	r0, [r1]
     c7c:	ldr	r0, [fp, #-20]	; 0xffffffec
     c80:	and	r0, r0, #15
     c84:	add	r0, r0, #1
     c88:	add	r1, sp, #35	; 0x23
     c8c:	add	r0, r1, r0
     c90:	movw	r1, #0
     c94:	strb	r1, [r0]
     c98:	ldr	r0, [fp, #-20]	; 0xffffffec
     c9c:	add	r0, r0, #1
     ca0:	str	r0, [fp, #-20]	; 0xffffffec
     ca4:	b	b60 <hexdump+0x54>
     ca8:	b	cac <hexdump+0x1a0>
     cac:	ldr	r0, [fp, #-20]	; 0xffffffec
     cb0:	and	r0, r0, #15
     cb4:	cmp	r0, #0
     cb8:	beq	ce0 <hexdump+0x1d4>
     cbc:	ldr	r0, [fp, #-16]
     cc0:	movw	r1, #0
     cc4:	movt	r1, #0
     cc8:	bl	0 <fprintf>
     ccc:	ldr	r1, [fp, #-20]	; 0xffffffec
     cd0:	add	r1, r1, #1
     cd4:	str	r1, [fp, #-20]	; 0xffffffec
     cd8:	str	r0, [sp, #4]
     cdc:	b	cac <hexdump+0x1a0>
     ce0:	add	r2, sp, #35	; 0x23
     ce4:	ldr	r0, [fp, #-16]
     ce8:	movw	r1, #0
     cec:	movt	r1, #0
     cf0:	bl	0 <fprintf>
     cf4:	str	r0, [sp]
     cf8:	mov	sp, fp
     cfc:	pop	{fp, pc}

00000d00 <MyGame_Example_TypeAliases_as_root>:
     d00:	push	{fp, lr}
     d04:	mov	fp, sp
     d08:	sub	sp, sp, #16
     d0c:	str	r0, [fp, #-4]
     d10:	movw	r0, #0
     d14:	movt	r0, #0
     d18:	str	r0, [sp, #8]
     d1c:	ldr	r0, [fp, #-4]
     d20:	movw	r1, #0
     d24:	cmp	r0, r1
     d28:	beq	d40 <MyGame_Example_TypeAliases_as_root+0x40>
     d2c:	ldr	r0, [fp, #-4]
     d30:	ldr	r1, [sp, #8]
     d34:	bl	2674 <flatbuffers_has_identifier>
     d38:	cmp	r0, #0
     d3c:	bne	d4c <MyGame_Example_TypeAliases_as_root+0x4c>
     d40:	movw	r0, #0
     d44:	str	r0, [sp, #4]
     d48:	b	d6c <MyGame_Example_TypeAliases_as_root+0x6c>
     d4c:	ldr	r0, [fp, #-4]
     d50:	ldr	r1, [fp, #-4]
     d54:	str	r0, [sp]
     d58:	mov	r0, r1
     d5c:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
     d60:	ldr	r1, [sp]
     d64:	add	r0, r1, r0
     d68:	str	r0, [sp, #4]
     d6c:	ldr	r0, [sp, #4]
     d70:	mov	sp, fp
     d74:	pop	{fp, pc}

00000d78 <MyGame_Example_TypeAliases_i8>:
     d78:	push	{fp, lr}
     d7c:	mov	fp, sp
     d80:	sub	sp, sp, #24
     d84:	str	r0, [fp, #-4]
     d88:	movw	r0, #0
     d8c:	strh	r0, [fp, #-6]
     d90:	ldr	r0, [fp, #-4]
     d94:	movw	r1, #0
     d98:	cmp	r0, r1
     d9c:	beq	da8 <MyGame_Example_TypeAliases_i8+0x30>
     da0:	b	da4 <MyGame_Example_TypeAliases_i8+0x2c>
     da4:	b	dc8 <MyGame_Example_TypeAliases_i8+0x50>
     da8:	movw	r0, #0
     dac:	movt	r0, #0
     db0:	movw	r1, #0
     db4:	movt	r1, #0
     db8:	movw	r2, #749	; 0x2ed
     dbc:	movw	r3, #0
     dc0:	movt	r3, #0
     dc4:	bl	0 <__assert_fail>
     dc8:	mov	r0, #0
     dcc:	strh	r0, [fp, #-8]
     dd0:	ldr	r0, [fp, #-4]
     dd4:	str	r0, [sp, #8]
     dd8:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
     ddc:	ldr	lr, [sp, #8]
     de0:	sub	r0, lr, r0
     de4:	str	r0, [sp, #12]
     de8:	ldr	r0, [sp, #12]
     dec:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     df0:	ldrh	lr, [fp, #-8]
     df4:	add	lr, lr, #3
     df8:	lsl	lr, lr, #1
     dfc:	cmp	r0, lr
     e00:	bcc	e1c <MyGame_Example_TypeAliases_i8+0xa4>
     e04:	ldr	r0, [sp, #12]
     e08:	ldrh	r1, [fp, #-8]
     e0c:	add	r0, r0, r1, lsl #1
     e10:	add	r0, r0, #4
     e14:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     e18:	strh	r0, [fp, #-6]
     e1c:	ldrh	r0, [fp, #-6]
     e20:	cmp	r0, #0
     e24:	beq	e44 <MyGame_Example_TypeAliases_i8+0xcc>
     e28:	ldr	r0, [fp, #-4]
     e2c:	ldrh	r1, [fp, #-6]
     e30:	add	r0, r0, r1
     e34:	bl	1088c <flatbuffers_int8_read_from_pe>
     e38:	sxtb	r0, r0
     e3c:	str	r0, [sp, #4]
     e40:	b	e50 <MyGame_Example_TypeAliases_i8+0xd8>
     e44:	movw	r0, #0
     e48:	str	r0, [sp, #4]
     e4c:	b	e50 <MyGame_Example_TypeAliases_i8+0xd8>
     e50:	ldr	r0, [sp, #4]
     e54:	sxtb	r0, r0
     e58:	mov	sp, fp
     e5c:	pop	{fp, pc}

00000e60 <MyGame_Example_TypeAliases_i16>:
     e60:	push	{fp, lr}
     e64:	mov	fp, sp
     e68:	sub	sp, sp, #24
     e6c:	str	r0, [fp, #-4]
     e70:	movw	r0, #0
     e74:	strh	r0, [fp, #-6]
     e78:	ldr	r0, [fp, #-4]
     e7c:	movw	r1, #0
     e80:	cmp	r0, r1
     e84:	beq	e90 <MyGame_Example_TypeAliases_i16+0x30>
     e88:	b	e8c <MyGame_Example_TypeAliases_i16+0x2c>
     e8c:	b	eb0 <MyGame_Example_TypeAliases_i16+0x50>
     e90:	movw	r0, #0
     e94:	movt	r0, #0
     e98:	movw	r1, #0
     e9c:	movt	r1, #0
     ea0:	movw	r2, #751	; 0x2ef
     ea4:	movw	r3, #0
     ea8:	movt	r3, #0
     eac:	bl	0 <__assert_fail>
     eb0:	mov	r0, #2
     eb4:	strh	r0, [fp, #-8]
     eb8:	ldr	r0, [fp, #-4]
     ebc:	str	r0, [sp, #8]
     ec0:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
     ec4:	ldr	lr, [sp, #8]
     ec8:	sub	r0, lr, r0
     ecc:	str	r0, [sp, #12]
     ed0:	ldr	r0, [sp, #12]
     ed4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     ed8:	ldrh	lr, [fp, #-8]
     edc:	add	lr, lr, #3
     ee0:	lsl	lr, lr, #1
     ee4:	cmp	r0, lr
     ee8:	bcc	f04 <MyGame_Example_TypeAliases_i16+0xa4>
     eec:	ldr	r0, [sp, #12]
     ef0:	ldrh	r1, [fp, #-8]
     ef4:	add	r0, r0, r1, lsl #1
     ef8:	add	r0, r0, #4
     efc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     f00:	strh	r0, [fp, #-6]
     f04:	ldrh	r0, [fp, #-6]
     f08:	cmp	r0, #0
     f0c:	beq	f2c <MyGame_Example_TypeAliases_i16+0xcc>
     f10:	ldr	r0, [fp, #-4]
     f14:	ldrh	r1, [fp, #-6]
     f18:	add	r0, r0, r1
     f1c:	bl	fa0c <flatbuffers_int16_read_from_pe>
     f20:	sxth	r0, r0
     f24:	str	r0, [sp, #4]
     f28:	b	f38 <MyGame_Example_TypeAliases_i16+0xd8>
     f2c:	movw	r0, #0
     f30:	str	r0, [sp, #4]
     f34:	b	f38 <MyGame_Example_TypeAliases_i16+0xd8>
     f38:	ldr	r0, [sp, #4]
     f3c:	sxth	r0, r0
     f40:	mov	sp, fp
     f44:	pop	{fp, pc}

00000f48 <MyGame_Example_TypeAliases_i32>:
     f48:	push	{fp, lr}
     f4c:	mov	fp, sp
     f50:	sub	sp, sp, #24
     f54:	str	r0, [fp, #-4]
     f58:	movw	r0, #0
     f5c:	strh	r0, [fp, #-6]
     f60:	ldr	r0, [fp, #-4]
     f64:	movw	r1, #0
     f68:	cmp	r0, r1
     f6c:	beq	f78 <MyGame_Example_TypeAliases_i32+0x30>
     f70:	b	f74 <MyGame_Example_TypeAliases_i32+0x2c>
     f74:	b	f98 <MyGame_Example_TypeAliases_i32+0x50>
     f78:	movw	r0, #0
     f7c:	movt	r0, #0
     f80:	movw	r1, #0
     f84:	movt	r1, #0
     f88:	movw	r2, #753	; 0x2f1
     f8c:	movw	r3, #0
     f90:	movt	r3, #0
     f94:	bl	0 <__assert_fail>
     f98:	mov	r0, #4
     f9c:	strh	r0, [fp, #-8]
     fa0:	ldr	r0, [fp, #-4]
     fa4:	str	r0, [sp, #8]
     fa8:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
     fac:	ldr	lr, [sp, #8]
     fb0:	sub	r0, lr, r0
     fb4:	str	r0, [sp, #12]
     fb8:	ldr	r0, [sp, #12]
     fbc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     fc0:	ldrh	lr, [fp, #-8]
     fc4:	add	lr, lr, #3
     fc8:	lsl	lr, lr, #1
     fcc:	cmp	r0, lr
     fd0:	bcc	fec <MyGame_Example_TypeAliases_i32+0xa4>
     fd4:	ldr	r0, [sp, #12]
     fd8:	ldrh	r1, [fp, #-8]
     fdc:	add	r0, r0, r1, lsl #1
     fe0:	add	r0, r0, #4
     fe4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
     fe8:	strh	r0, [fp, #-6]
     fec:	ldrh	r0, [fp, #-6]
     ff0:	cmp	r0, #0
     ff4:	beq	1010 <MyGame_Example_TypeAliases_i32+0xc8>
     ff8:	ldr	r0, [fp, #-4]
     ffc:	ldrh	r1, [fp, #-6]
    1000:	add	r0, r0, r1
    1004:	bl	108c8 <flatbuffers_int32_read_from_pe>
    1008:	str	r0, [sp, #4]
    100c:	b	101c <MyGame_Example_TypeAliases_i32+0xd4>
    1010:	movw	r0, #0
    1014:	str	r0, [sp, #4]
    1018:	b	101c <MyGame_Example_TypeAliases_i32+0xd4>
    101c:	ldr	r0, [sp, #4]
    1020:	mov	sp, fp
    1024:	pop	{fp, pc}

00001028 <MyGame_Example_TypeAliases_i64>:
    1028:	push	{fp, lr}
    102c:	mov	fp, sp
    1030:	sub	sp, sp, #32
    1034:	str	r0, [fp, #-4]
    1038:	movw	r0, #0
    103c:	strh	r0, [fp, #-6]
    1040:	ldr	r0, [fp, #-4]
    1044:	movw	r1, #0
    1048:	cmp	r0, r1
    104c:	beq	1058 <MyGame_Example_TypeAliases_i64+0x30>
    1050:	b	1054 <MyGame_Example_TypeAliases_i64+0x2c>
    1054:	b	1078 <MyGame_Example_TypeAliases_i64+0x50>
    1058:	movw	r0, #0
    105c:	movt	r0, #0
    1060:	movw	r1, #0
    1064:	movt	r1, #0
    1068:	movw	r2, #755	; 0x2f3
    106c:	movw	r3, #0
    1070:	movt	r3, #0
    1074:	bl	0 <__assert_fail>
    1078:	mov	r0, #6
    107c:	strh	r0, [fp, #-8]
    1080:	ldr	r0, [fp, #-4]
    1084:	str	r0, [sp, #16]
    1088:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    108c:	ldr	lr, [sp, #16]
    1090:	sub	r0, lr, r0
    1094:	str	r0, [fp, #-12]
    1098:	ldr	r0, [fp, #-12]
    109c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    10a0:	ldrh	lr, [fp, #-8]
    10a4:	add	lr, lr, #3
    10a8:	lsl	lr, lr, #1
    10ac:	cmp	r0, lr
    10b0:	bcc	10cc <MyGame_Example_TypeAliases_i64+0xa4>
    10b4:	ldr	r0, [fp, #-12]
    10b8:	ldrh	r1, [fp, #-8]
    10bc:	add	r0, r0, r1, lsl #1
    10c0:	add	r0, r0, #4
    10c4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    10c8:	strh	r0, [fp, #-6]
    10cc:	ldrh	r0, [fp, #-6]
    10d0:	cmp	r0, #0
    10d4:	beq	10f4 <MyGame_Example_TypeAliases_i64+0xcc>
    10d8:	ldr	r0, [fp, #-4]
    10dc:	ldrh	r1, [fp, #-6]
    10e0:	add	r0, r0, r1
    10e4:	bl	10900 <flatbuffers_int64_read_from_pe>
    10e8:	str	r0, [sp, #12]
    10ec:	str	r1, [sp, #8]
    10f0:	b	1108 <MyGame_Example_TypeAliases_i64+0xe0>
    10f4:	mov	r0, #0
    10f8:	mov	r1, r0
    10fc:	str	r1, [sp, #12]
    1100:	str	r0, [sp, #8]
    1104:	b	1108 <MyGame_Example_TypeAliases_i64+0xe0>
    1108:	ldr	r0, [sp, #8]
    110c:	ldr	r1, [sp, #12]
    1110:	str	r0, [sp, #4]
    1114:	mov	r0, r1
    1118:	ldr	r1, [sp, #4]
    111c:	mov	sp, fp
    1120:	pop	{fp, pc}

00001124 <MyGame_Example_TypeAliases_u8>:
    1124:	push	{fp, lr}
    1128:	mov	fp, sp
    112c:	sub	sp, sp, #24
    1130:	str	r0, [fp, #-4]
    1134:	movw	r0, #0
    1138:	strh	r0, [fp, #-6]
    113c:	ldr	r0, [fp, #-4]
    1140:	movw	r1, #0
    1144:	cmp	r0, r1
    1148:	beq	1154 <MyGame_Example_TypeAliases_u8+0x30>
    114c:	b	1150 <MyGame_Example_TypeAliases_u8+0x2c>
    1150:	b	1174 <MyGame_Example_TypeAliases_u8+0x50>
    1154:	movw	r0, #0
    1158:	movt	r0, #0
    115c:	movw	r1, #0
    1160:	movt	r1, #0
    1164:	movw	r2, #750	; 0x2ee
    1168:	movw	r3, #0
    116c:	movt	r3, #0
    1170:	bl	0 <__assert_fail>
    1174:	mov	r0, #1
    1178:	strh	r0, [fp, #-8]
    117c:	ldr	r0, [fp, #-4]
    1180:	str	r0, [sp, #8]
    1184:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    1188:	ldr	lr, [sp, #8]
    118c:	sub	r0, lr, r0
    1190:	str	r0, [sp, #12]
    1194:	ldr	r0, [sp, #12]
    1198:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    119c:	ldrh	lr, [fp, #-8]
    11a0:	add	lr, lr, #3
    11a4:	lsl	lr, lr, #1
    11a8:	cmp	r0, lr
    11ac:	bcc	11c8 <MyGame_Example_TypeAliases_u8+0xa4>
    11b0:	ldr	r0, [sp, #12]
    11b4:	ldrh	r1, [fp, #-8]
    11b8:	add	r0, r0, r1, lsl #1
    11bc:	add	r0, r0, #4
    11c0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    11c4:	strh	r0, [fp, #-6]
    11c8:	ldrh	r0, [fp, #-6]
    11cc:	cmp	r0, #0
    11d0:	beq	11f0 <MyGame_Example_TypeAliases_u8+0xcc>
    11d4:	ldr	r0, [fp, #-4]
    11d8:	ldrh	r1, [fp, #-6]
    11dc:	add	r0, r0, r1
    11e0:	bl	10950 <flatbuffers_uint8_read_from_pe>
    11e4:	and	r0, r0, #255	; 0xff
    11e8:	str	r0, [sp, #4]
    11ec:	b	11fc <MyGame_Example_TypeAliases_u8+0xd8>
    11f0:	movw	r0, #0
    11f4:	str	r0, [sp, #4]
    11f8:	b	11fc <MyGame_Example_TypeAliases_u8+0xd8>
    11fc:	ldr	r0, [sp, #4]
    1200:	and	r0, r0, #255	; 0xff
    1204:	mov	sp, fp
    1208:	pop	{fp, pc}

0000120c <MyGame_Example_TypeAliases_u16>:
    120c:	push	{fp, lr}
    1210:	mov	fp, sp
    1214:	sub	sp, sp, #24
    1218:	str	r0, [fp, #-4]
    121c:	movw	r0, #0
    1220:	strh	r0, [fp, #-6]
    1224:	ldr	r0, [fp, #-4]
    1228:	movw	r1, #0
    122c:	cmp	r0, r1
    1230:	beq	123c <MyGame_Example_TypeAliases_u16+0x30>
    1234:	b	1238 <MyGame_Example_TypeAliases_u16+0x2c>
    1238:	b	125c <MyGame_Example_TypeAliases_u16+0x50>
    123c:	movw	r0, #0
    1240:	movt	r0, #0
    1244:	movw	r1, #0
    1248:	movt	r1, #0
    124c:	movw	r2, #752	; 0x2f0
    1250:	movw	r3, #0
    1254:	movt	r3, #0
    1258:	bl	0 <__assert_fail>
    125c:	mov	r0, #3
    1260:	strh	r0, [fp, #-8]
    1264:	ldr	r0, [fp, #-4]
    1268:	str	r0, [sp, #8]
    126c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    1270:	ldr	lr, [sp, #8]
    1274:	sub	r0, lr, r0
    1278:	str	r0, [sp, #12]
    127c:	ldr	r0, [sp, #12]
    1280:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    1284:	ldrh	lr, [fp, #-8]
    1288:	add	lr, lr, #3
    128c:	lsl	lr, lr, #1
    1290:	cmp	r0, lr
    1294:	bcc	12b0 <MyGame_Example_TypeAliases_u16+0xa4>
    1298:	ldr	r0, [sp, #12]
    129c:	ldrh	r1, [fp, #-8]
    12a0:	add	r0, r0, r1, lsl #1
    12a4:	add	r0, r0, #4
    12a8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    12ac:	strh	r0, [fp, #-6]
    12b0:	ldrh	r0, [fp, #-6]
    12b4:	cmp	r0, #0
    12b8:	beq	12d8 <MyGame_Example_TypeAliases_u16+0xcc>
    12bc:	ldr	r0, [fp, #-4]
    12c0:	ldrh	r1, [fp, #-6]
    12c4:	add	r0, r0, r1
    12c8:	bl	1098c <flatbuffers_uint16_read_from_pe>
    12cc:	uxth	r0, r0
    12d0:	str	r0, [sp, #4]
    12d4:	b	12e4 <MyGame_Example_TypeAliases_u16+0xd8>
    12d8:	movw	r0, #0
    12dc:	str	r0, [sp, #4]
    12e0:	b	12e4 <MyGame_Example_TypeAliases_u16+0xd8>
    12e4:	ldr	r0, [sp, #4]
    12e8:	uxth	r0, r0
    12ec:	mov	sp, fp
    12f0:	pop	{fp, pc}

000012f4 <MyGame_Example_TypeAliases_u32>:
    12f4:	push	{fp, lr}
    12f8:	mov	fp, sp
    12fc:	sub	sp, sp, #24
    1300:	str	r0, [fp, #-4]
    1304:	movw	r0, #0
    1308:	strh	r0, [fp, #-6]
    130c:	ldr	r0, [fp, #-4]
    1310:	movw	r1, #0
    1314:	cmp	r0, r1
    1318:	beq	1324 <MyGame_Example_TypeAliases_u32+0x30>
    131c:	b	1320 <MyGame_Example_TypeAliases_u32+0x2c>
    1320:	b	1344 <MyGame_Example_TypeAliases_u32+0x50>
    1324:	movw	r0, #0
    1328:	movt	r0, #0
    132c:	movw	r1, #0
    1330:	movt	r1, #0
    1334:	movw	r2, #754	; 0x2f2
    1338:	movw	r3, #0
    133c:	movt	r3, #0
    1340:	bl	0 <__assert_fail>
    1344:	mov	r0, #5
    1348:	strh	r0, [fp, #-8]
    134c:	ldr	r0, [fp, #-4]
    1350:	str	r0, [sp, #8]
    1354:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    1358:	ldr	lr, [sp, #8]
    135c:	sub	r0, lr, r0
    1360:	str	r0, [sp, #12]
    1364:	ldr	r0, [sp, #12]
    1368:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    136c:	ldrh	lr, [fp, #-8]
    1370:	add	lr, lr, #3
    1374:	lsl	lr, lr, #1
    1378:	cmp	r0, lr
    137c:	bcc	1398 <MyGame_Example_TypeAliases_u32+0xa4>
    1380:	ldr	r0, [sp, #12]
    1384:	ldrh	r1, [fp, #-8]
    1388:	add	r0, r0, r1, lsl #1
    138c:	add	r0, r0, #4
    1390:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    1394:	strh	r0, [fp, #-6]
    1398:	ldrh	r0, [fp, #-6]
    139c:	cmp	r0, #0
    13a0:	beq	13bc <MyGame_Example_TypeAliases_u32+0xc8>
    13a4:	ldr	r0, [fp, #-4]
    13a8:	ldrh	r1, [fp, #-6]
    13ac:	add	r0, r0, r1
    13b0:	bl	109c8 <flatbuffers_uint32_read_from_pe>
    13b4:	str	r0, [sp, #4]
    13b8:	b	13c8 <MyGame_Example_TypeAliases_u32+0xd4>
    13bc:	movw	r0, #0
    13c0:	str	r0, [sp, #4]
    13c4:	b	13c8 <MyGame_Example_TypeAliases_u32+0xd4>
    13c8:	ldr	r0, [sp, #4]
    13cc:	mov	sp, fp
    13d0:	pop	{fp, pc}

000013d4 <MyGame_Example_TypeAliases_u64>:
    13d4:	push	{fp, lr}
    13d8:	mov	fp, sp
    13dc:	sub	sp, sp, #32
    13e0:	str	r0, [fp, #-4]
    13e4:	movw	r0, #0
    13e8:	strh	r0, [fp, #-6]
    13ec:	ldr	r0, [fp, #-4]
    13f0:	movw	r1, #0
    13f4:	cmp	r0, r1
    13f8:	beq	1404 <MyGame_Example_TypeAliases_u64+0x30>
    13fc:	b	1400 <MyGame_Example_TypeAliases_u64+0x2c>
    1400:	b	1424 <MyGame_Example_TypeAliases_u64+0x50>
    1404:	movw	r0, #0
    1408:	movt	r0, #0
    140c:	movw	r1, #0
    1410:	movt	r1, #0
    1414:	movw	r2, #756	; 0x2f4
    1418:	movw	r3, #0
    141c:	movt	r3, #0
    1420:	bl	0 <__assert_fail>
    1424:	mov	r0, #7
    1428:	strh	r0, [fp, #-8]
    142c:	ldr	r0, [fp, #-4]
    1430:	str	r0, [sp, #16]
    1434:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    1438:	ldr	lr, [sp, #16]
    143c:	sub	r0, lr, r0
    1440:	str	r0, [fp, #-12]
    1444:	ldr	r0, [fp, #-12]
    1448:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    144c:	ldrh	lr, [fp, #-8]
    1450:	add	lr, lr, #3
    1454:	lsl	lr, lr, #1
    1458:	cmp	r0, lr
    145c:	bcc	1478 <MyGame_Example_TypeAliases_u64+0xa4>
    1460:	ldr	r0, [fp, #-12]
    1464:	ldrh	r1, [fp, #-8]
    1468:	add	r0, r0, r1, lsl #1
    146c:	add	r0, r0, #4
    1470:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    1474:	strh	r0, [fp, #-6]
    1478:	ldrh	r0, [fp, #-6]
    147c:	cmp	r0, #0
    1480:	beq	14a0 <MyGame_Example_TypeAliases_u64+0xcc>
    1484:	ldr	r0, [fp, #-4]
    1488:	ldrh	r1, [fp, #-6]
    148c:	add	r0, r0, r1
    1490:	bl	10a00 <flatbuffers_uint64_read_from_pe>
    1494:	str	r0, [sp, #12]
    1498:	str	r1, [sp, #8]
    149c:	b	14b4 <MyGame_Example_TypeAliases_u64+0xe0>
    14a0:	mov	r0, #0
    14a4:	mov	r1, r0
    14a8:	str	r1, [sp, #12]
    14ac:	str	r0, [sp, #8]
    14b0:	b	14b4 <MyGame_Example_TypeAliases_u64+0xe0>
    14b4:	ldr	r0, [sp, #8]
    14b8:	ldr	r1, [sp, #12]
    14bc:	str	r0, [sp, #4]
    14c0:	mov	r0, r1
    14c4:	ldr	r1, [sp, #4]
    14c8:	mov	sp, fp
    14cc:	pop	{fp, pc}

000014d0 <MyGame_Example_TypeAliases_f32>:
    14d0:	push	{fp, lr}
    14d4:	mov	fp, sp
    14d8:	sub	sp, sp, #24
    14dc:	str	r0, [fp, #-4]
    14e0:	movw	r0, #0
    14e4:	strh	r0, [fp, #-6]
    14e8:	ldr	r0, [fp, #-4]
    14ec:	movw	r1, #0
    14f0:	cmp	r0, r1
    14f4:	beq	1500 <MyGame_Example_TypeAliases_f32+0x30>
    14f8:	b	14fc <MyGame_Example_TypeAliases_f32+0x2c>
    14fc:	b	1520 <MyGame_Example_TypeAliases_f32+0x50>
    1500:	movw	r0, #0
    1504:	movt	r0, #0
    1508:	movw	r1, #0
    150c:	movt	r1, #0
    1510:	movw	r2, #757	; 0x2f5
    1514:	movw	r3, #0
    1518:	movt	r3, #0
    151c:	bl	0 <__assert_fail>
    1520:	mov	r0, #8
    1524:	strh	r0, [fp, #-8]
    1528:	ldr	r0, [fp, #-4]
    152c:	str	r0, [sp, #8]
    1530:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    1534:	ldr	lr, [sp, #8]
    1538:	sub	r0, lr, r0
    153c:	str	r0, [sp, #12]
    1540:	ldr	r0, [sp, #12]
    1544:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    1548:	ldrh	lr, [fp, #-8]
    154c:	add	lr, lr, #3
    1550:	lsl	lr, lr, #1
    1554:	cmp	r0, lr
    1558:	bcc	1574 <MyGame_Example_TypeAliases_f32+0xa4>
    155c:	ldr	r0, [sp, #12]
    1560:	ldrh	r1, [fp, #-8]
    1564:	add	r0, r0, r1, lsl #1
    1568:	add	r0, r0, #4
    156c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    1570:	strh	r0, [fp, #-6]
    1574:	ldrh	r0, [fp, #-6]
    1578:	cmp	r0, #0
    157c:	beq	1598 <MyGame_Example_TypeAliases_f32+0xc8>
    1580:	ldr	r0, [fp, #-4]
    1584:	ldrh	r1, [fp, #-6]
    1588:	add	r0, r0, r1
    158c:	bl	10a50 <flatbuffers_float_read_from_pe>
    1590:	vstr	s0, [sp, #4]
    1594:	b	15a4 <MyGame_Example_TypeAliases_f32+0xd4>
    1598:	vldr	s0, [pc, #16]	; 15b0 <MyGame_Example_TypeAliases_f32+0xe0>
    159c:	vstr	s0, [sp, #4]
    15a0:	b	15a4 <MyGame_Example_TypeAliases_f32+0xd4>
    15a4:	vldr	s0, [sp, #4]
    15a8:	mov	sp, fp
    15ac:	pop	{fp, pc}
    15b0:	.word	0x00000000
    15b4:	.word	0xe320f000

000015b8 <MyGame_Example_TypeAliases_f64>:
    15b8:	push	{fp, lr}
    15bc:	mov	fp, sp
    15c0:	sub	sp, sp, #24
    15c4:	str	r0, [fp, #-4]
    15c8:	movw	r0, #0
    15cc:	strh	r0, [fp, #-6]
    15d0:	ldr	r0, [fp, #-4]
    15d4:	movw	r1, #0
    15d8:	cmp	r0, r1
    15dc:	beq	15e8 <MyGame_Example_TypeAliases_f64+0x30>
    15e0:	b	15e4 <MyGame_Example_TypeAliases_f64+0x2c>
    15e4:	b	1608 <MyGame_Example_TypeAliases_f64+0x50>
    15e8:	movw	r0, #0
    15ec:	movt	r0, #0
    15f0:	movw	r1, #0
    15f4:	movt	r1, #0
    15f8:	movw	r2, #758	; 0x2f6
    15fc:	movw	r3, #0
    1600:	movt	r3, #0
    1604:	bl	0 <__assert_fail>
    1608:	mov	r0, #9
    160c:	strh	r0, [fp, #-8]
    1610:	ldr	r0, [fp, #-4]
    1614:	str	r0, [sp, #8]
    1618:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    161c:	ldr	lr, [sp, #8]
    1620:	sub	r0, lr, r0
    1624:	str	r0, [sp, #12]
    1628:	ldr	r0, [sp, #12]
    162c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    1630:	ldrh	lr, [fp, #-8]
    1634:	add	lr, lr, #3
    1638:	lsl	lr, lr, #1
    163c:	cmp	r0, lr
    1640:	bcc	165c <MyGame_Example_TypeAliases_f64+0xa4>
    1644:	ldr	r0, [sp, #12]
    1648:	ldrh	r1, [fp, #-8]
    164c:	add	r0, r0, r1, lsl #1
    1650:	add	r0, r0, #4
    1654:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    1658:	strh	r0, [fp, #-6]
    165c:	ldrh	r0, [fp, #-6]
    1660:	cmp	r0, #0
    1664:	beq	1680 <MyGame_Example_TypeAliases_f64+0xc8>
    1668:	ldr	r0, [fp, #-4]
    166c:	ldrh	r1, [fp, #-6]
    1670:	add	r0, r0, r1
    1674:	bl	10a98 <flatbuffers_double_read_from_pe>
    1678:	vstr	d0, [sp]
    167c:	b	168c <MyGame_Example_TypeAliases_f64+0xd4>
    1680:	vldr	d16, [pc, #24]	; 16a0 <MyGame_Example_TypeAliases_f64+0xe8>
    1684:	vstr	d16, [sp]
    1688:	b	168c <MyGame_Example_TypeAliases_f64+0xd4>
    168c:	vldr	d16, [sp]
    1690:	vmov.f64	d0, d16
    1694:	mov	sp, fp
    1698:	pop	{fp, pc}
    169c:	nop	{0}
	...

000016a8 <test_empty_monster>:
    16a8:	push	{fp, lr}
    16ac:	mov	fp, sp
    16b0:	sub	sp, sp, #56	; 0x38
    16b4:	str	r0, [fp, #-8]
    16b8:	ldr	r0, [fp, #-8]
    16bc:	bl	0 <flatcc_builder_reset>
    16c0:	ldr	lr, [fp, #-8]
    16c4:	str	r0, [sp, #28]
    16c8:	mov	r0, lr
    16cc:	movw	r1, #0
    16d0:	movt	r1, #0
    16d4:	bl	1818 <flatbuffers_buffer_start>
    16d8:	ldr	r1, [fp, #-8]
    16dc:	str	r0, [sp, #24]
    16e0:	mov	r0, r1
    16e4:	bl	184c <MyGame_Example_Monster_start>
    16e8:	ldr	r1, [fp, #-8]
    16ec:	str	r0, [sp, #20]
    16f0:	mov	r0, r1
    16f4:	movw	r1, #0
    16f8:	movt	r1, #0
    16fc:	bl	1870 <MyGame_Example_Monster_name_create_str>
    1700:	ldr	r1, [fp, #-8]
    1704:	str	r0, [sp, #16]
    1708:	mov	r0, r1
    170c:	bl	18bc <MyGame_Example_Monster_end>
    1710:	str	r0, [fp, #-16]
    1714:	ldr	r0, [fp, #-8]
    1718:	ldr	r1, [fp, #-16]
    171c:	bl	191c <flatbuffers_buffer_end>
    1720:	ldr	r1, [fp, #-8]
    1724:	str	r0, [sp, #12]
    1728:	mov	r0, r1
    172c:	sub	r1, fp, #24
    1730:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    1734:	str	r0, [fp, #-20]	; 0xffffffec
    1738:	ldr	r1, [fp, #-20]	; 0xffffffec
    173c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1740:	movw	r0, #0
    1744:	movt	r0, #0
    1748:	ldr	r3, [r0]
    174c:	movw	r0, #0
    1750:	movt	r0, #0
    1754:	bl	b0c <hexdump>
    1758:	ldr	r0, [fp, #-20]	; 0xffffffec
    175c:	bl	0 <verify_empty_monster>
    1760:	str	r0, [fp, #-12]
    1764:	cmp	r0, #0
    1768:	beq	1770 <test_empty_monster+0xc8>
    176c:	b	17fc <test_empty_monster+0x154>
    1770:	ldr	r0, [fp, #-20]	; 0xffffffec
    1774:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1778:	movw	r2, #0
    177c:	movt	r2, #0
    1780:	bl	1944 <MyGame_Example_Monster_verify_as_root_with_identifier>
    1784:	str	r0, [fp, #-12]
    1788:	cmp	r0, #0
    178c:	beq	17c0 <test_empty_monster+0x118>
    1790:	ldr	r0, [fp, #-12]
    1794:	bl	0 <flatcc_verify_error_string>
    1798:	movw	lr, #0
    179c:	movt	lr, #0
    17a0:	str	r0, [sp, #8]
    17a4:	mov	r0, lr
    17a8:	ldr	r1, [sp, #8]
    17ac:	bl	0 <printf>
    17b0:	mvn	r1, #0
    17b4:	str	r1, [fp, #-4]
    17b8:	str	r0, [sp, #4]
    17bc:	b	180c <test_empty_monster+0x164>
    17c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    17c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    17c8:	sub	r1, r1, #1
    17cc:	bl	197c <MyGame_Example_Monster_verify_as_root>
    17d0:	movw	r1, #0
    17d4:	cmp	r1, r0
    17d8:	bne	17f8 <test_empty_monster+0x150>
    17dc:	movw	r0, #0
    17e0:	movt	r0, #0
    17e4:	bl	0 <printf>
    17e8:	mvn	lr, #0
    17ec:	str	lr, [fp, #-4]
    17f0:	str	r0, [sp]
    17f4:	b	180c <test_empty_monster+0x164>
    17f8:	b	17fc <test_empty_monster+0x154>
    17fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    1800:	bl	0 <flatcc_builder_aligned_free>
    1804:	ldr	r0, [fp, #-12]
    1808:	str	r0, [fp, #-4]
    180c:	ldr	r0, [fp, #-4]
    1810:	mov	sp, fp
    1814:	pop	{fp, pc}

00001818 <flatbuffers_buffer_start>:
    1818:	push	{fp, lr}
    181c:	mov	fp, sp
    1820:	sub	sp, sp, #8
    1824:	str	r0, [sp, #4]
    1828:	str	r1, [sp]
    182c:	ldr	r0, [sp, #4]
    1830:	ldr	r1, [sp]
    1834:	movw	r2, #0
    1838:	uxth	r2, r2
    183c:	movw	r3, #0
    1840:	bl	0 <flatcc_builder_start_buffer>
    1844:	mov	sp, fp
    1848:	pop	{fp, pc}

0000184c <MyGame_Example_Monster_start>:
    184c:	push	{fp, lr}
    1850:	mov	fp, sp
    1854:	sub	sp, sp, #8
    1858:	str	r0, [sp, #4]
    185c:	ldr	r0, [sp, #4]
    1860:	movw	r1, #36	; 0x24
    1864:	bl	0 <flatcc_builder_start_table>
    1868:	mov	sp, fp
    186c:	pop	{fp, pc}

00001870 <MyGame_Example_Monster_name_create_str>:
    1870:	push	{fp, lr}
    1874:	mov	fp, sp
    1878:	sub	sp, sp, #16
    187c:	str	r0, [fp, #-4]
    1880:	str	r1, [sp, #8]
    1884:	ldr	r0, [fp, #-4]
    1888:	ldr	r1, [fp, #-4]
    188c:	ldr	r2, [sp, #8]
    1890:	str	r0, [sp, #4]
    1894:	mov	r0, r1
    1898:	mov	r1, r2
    189c:	bl	0 <flatcc_builder_create_string_str>
    18a0:	ldr	r1, [sp, #4]
    18a4:	str	r0, [sp]
    18a8:	mov	r0, r1
    18ac:	ldr	r1, [sp]
    18b0:	bl	5e08 <MyGame_Example_Monster_name_add>
    18b4:	mov	sp, fp
    18b8:	pop	{fp, pc}

000018bc <MyGame_Example_Monster_end>:
    18bc:	push	{fp, lr}
    18c0:	mov	fp, sp
    18c4:	sub	sp, sp, #8
    18c8:	str	r0, [sp, #4]
    18cc:	ldr	r0, [sp, #4]
    18d0:	movw	r1, #0
    18d4:	movt	r1, #0
    18d8:	movw	r2, #1
    18dc:	bl	0 <flatcc_builder_check_required>
    18e0:	cmp	r0, #0
    18e4:	beq	18ec <MyGame_Example_Monster_end+0x30>
    18e8:	b	190c <MyGame_Example_Monster_end+0x50>
    18ec:	movw	r0, #0
    18f0:	movt	r0, #0
    18f4:	movw	r1, #0
    18f8:	movt	r1, #0
    18fc:	movw	r2, #235	; 0xeb
    1900:	movw	r3, #0
    1904:	movt	r3, #0
    1908:	bl	0 <__assert_fail>
    190c:	ldr	r0, [sp, #4]
    1910:	bl	0 <flatcc_builder_end_table>
    1914:	mov	sp, fp
    1918:	pop	{fp, pc}

0000191c <flatbuffers_buffer_end>:
    191c:	push	{fp, lr}
    1920:	mov	fp, sp
    1924:	sub	sp, sp, #8
    1928:	str	r0, [sp, #4]
    192c:	str	r1, [sp]
    1930:	ldr	r0, [sp, #4]
    1934:	ldr	r1, [sp]
    1938:	bl	0 <flatcc_builder_end_buffer>
    193c:	mov	sp, fp
    1940:	pop	{fp, pc}

00001944 <MyGame_Example_Monster_verify_as_root_with_identifier>:
    1944:	push	{fp, lr}
    1948:	mov	fp, sp
    194c:	sub	sp, sp, #16
    1950:	str	r0, [fp, #-4]
    1954:	str	r1, [sp, #8]
    1958:	str	r2, [sp, #4]
    195c:	ldr	r0, [fp, #-4]
    1960:	ldr	r1, [sp, #8]
    1964:	ldr	r2, [sp, #4]
    1968:	movw	r3, #0
    196c:	movt	r3, #0
    1970:	bl	0 <flatcc_verify_table_as_root>
    1974:	mov	sp, fp
    1978:	pop	{fp, pc}

0000197c <MyGame_Example_Monster_verify_as_root>:
    197c:	push	{fp, lr}
    1980:	mov	fp, sp
    1984:	sub	sp, sp, #8
    1988:	str	r0, [sp, #4]
    198c:	str	r1, [sp]
    1990:	ldr	r0, [sp, #4]
    1994:	ldr	r1, [sp]
    1998:	movw	r2, #0
    199c:	movt	r2, #0
    19a0:	movw	r3, #0
    19a4:	movt	r3, #0
    19a8:	bl	0 <flatcc_verify_table_as_root>
    19ac:	mov	sp, fp
    19b0:	pop	{fp, pc}

000019b4 <test_typed_empty_monster>:
    19b4:	push	{fp, lr}
    19b8:	mov	fp, sp
    19bc:	sub	sp, sp, #128	; 0x80
    19c0:	str	r0, [fp, #-4]
    19c4:	mvn	r0, #0
    19c8:	str	r0, [fp, #-8]
    19cc:	sub	r0, fp, #24
    19d0:	movw	r1, #0
    19d4:	and	r1, r1, #255	; 0xff
    19d8:	movw	r2, #4
    19dc:	bl	0 <memset>
    19e0:	ldr	r0, [fp, #-4]
    19e4:	bl	0 <flatcc_builder_reset>
    19e8:	ldr	r1, [fp, #-4]
    19ec:	str	r0, [fp, #-28]	; 0xffffffe4
    19f0:	mov	r0, r1
    19f4:	movw	r1, #0
    19f8:	movt	r1, #0
    19fc:	bl	1818 <flatbuffers_buffer_start>
    1a00:	ldr	r1, [fp, #-4]
    1a04:	str	r0, [fp, #-32]	; 0xffffffe0
    1a08:	mov	r0, r1
    1a0c:	bl	184c <MyGame_Example_Monster_start>
    1a10:	ldr	r1, [fp, #-4]
    1a14:	str	r0, [fp, #-36]	; 0xffffffdc
    1a18:	mov	r0, r1
    1a1c:	movw	r1, #0
    1a20:	movt	r1, #0
    1a24:	bl	1870 <MyGame_Example_Monster_name_create_str>
    1a28:	ldr	r1, [fp, #-4]
    1a2c:	str	r0, [fp, #-40]	; 0xffffffd8
    1a30:	mov	r0, r1
    1a34:	bl	18bc <MyGame_Example_Monster_end>
    1a38:	str	r0, [fp, #-12]
    1a3c:	ldr	r0, [fp, #-4]
    1a40:	ldr	r1, [fp, #-12]
    1a44:	bl	191c <flatbuffers_buffer_end>
    1a48:	ldr	r1, [fp, #-4]
    1a4c:	str	r0, [fp, #-44]	; 0xffffffd4
    1a50:	mov	r0, r1
    1a54:	sub	r1, fp, #20
    1a58:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    1a5c:	str	r0, [fp, #-16]
    1a60:	ldr	r1, [fp, #-16]
    1a64:	ldr	r2, [fp, #-20]	; 0xffffffec
    1a68:	movw	r0, #0
    1a6c:	movt	r0, #0
    1a70:	ldr	r3, [r0]
    1a74:	movw	r0, #0
    1a78:	movt	r0, #0
    1a7c:	bl	b0c <hexdump>
    1a80:	ldr	r0, [fp, #-16]
    1a84:	bl	1d14 <flatbuffers_get_type_hash>
    1a88:	movw	r1, #0
    1a8c:	movt	r1, #0
    1a90:	str	r0, [fp, #-48]	; 0xffffffd0
    1a94:	mov	r0, r1
    1a98:	bl	1d38 <flatbuffers_type_hash_from_name>
    1a9c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1aa0:	cmp	r1, r0
    1aa4:	beq	1ad0 <test_typed_empty_monster+0x11c>
    1aa8:	ldr	r0, [fp, #-16]
    1aac:	bl	1d14 <flatbuffers_get_type_hash>
    1ab0:	movw	lr, #0
    1ab4:	movt	lr, #0
    1ab8:	str	r0, [fp, #-52]	; 0xffffffcc
    1abc:	mov	r0, lr
    1ac0:	ldr	r1, [fp, #-52]	; 0xffffffcc
    1ac4:	bl	0 <printf>
    1ac8:	str	r0, [fp, #-56]	; 0xffffffc8
    1acc:	b	1cfc <test_typed_empty_monster+0x348>
    1ad0:	ldr	r1, [pc, #568]	; 1d10 <test_typed_empty_monster+0x35c>
    1ad4:	ldr	r0, [fp, #-16]
    1ad8:	bl	1db4 <flatbuffers_has_type_hash>
    1adc:	cmp	r0, #0
    1ae0:	bne	1af8 <test_typed_empty_monster+0x144>
    1ae4:	movw	r0, #0
    1ae8:	movt	r0, #0
    1aec:	bl	0 <printf>
    1af0:	str	r0, [fp, #-60]	; 0xffffffc4
    1af4:	b	1cfc <test_typed_empty_monster+0x348>
    1af8:	ldr	r1, [pc, #528]	; 1d10 <test_typed_empty_monster+0x35c>
    1afc:	ldr	r0, [fp, #-16]
    1b00:	bl	1db4 <flatbuffers_has_type_hash>
    1b04:	cmp	r0, #0
    1b08:	bne	1b20 <test_typed_empty_monster+0x16c>
    1b0c:	movw	r0, #0
    1b10:	movt	r0, #0
    1b14:	bl	0 <printf>
    1b18:	str	r0, [sp, #64]	; 0x40
    1b1c:	b	1cfc <test_typed_empty_monster+0x348>
    1b20:	ldr	r0, [fp, #-16]
    1b24:	bl	0 <verify_empty_monster>
    1b28:	cmp	r0, #0
    1b2c:	bne	1b44 <test_typed_empty_monster+0x190>
    1b30:	movw	r0, #0
    1b34:	movt	r0, #0
    1b38:	bl	0 <printf>
    1b3c:	str	r0, [sp, #60]	; 0x3c
    1b40:	b	1cfc <test_typed_empty_monster+0x348>
    1b44:	ldr	r0, [fp, #-16]
    1b48:	ldr	r1, [fp, #-20]	; 0xffffffec
    1b4c:	movw	r2, #0
    1b50:	movt	r2, #0
    1b54:	bl	1944 <MyGame_Example_Monster_verify_as_root_with_identifier>
    1b58:	str	r0, [fp, #-8]
    1b5c:	cmp	r0, #0
    1b60:	beq	1b8c <test_typed_empty_monster+0x1d8>
    1b64:	ldr	r0, [fp, #-8]
    1b68:	bl	0 <flatcc_verify_error_string>
    1b6c:	movw	lr, #0
    1b70:	movt	lr, #0
    1b74:	str	r0, [sp, #56]	; 0x38
    1b78:	mov	r0, lr
    1b7c:	ldr	r1, [sp, #56]	; 0x38
    1b80:	bl	0 <printf>
    1b84:	str	r0, [sp, #52]	; 0x34
    1b88:	b	1cfc <test_typed_empty_monster+0x348>
    1b8c:	ldr	r0, [fp, #-16]
    1b90:	ldr	r1, [fp, #-20]	; 0xffffffec
    1b94:	bl	1e0c <MyGame_Example_Monster_verify_as_typed_root>
    1b98:	str	r0, [fp, #-8]
    1b9c:	cmp	r0, #0
    1ba0:	beq	1bcc <test_typed_empty_monster+0x218>
    1ba4:	ldr	r0, [fp, #-8]
    1ba8:	bl	0 <flatcc_verify_error_string>
    1bac:	movw	lr, #0
    1bb0:	movt	lr, #0
    1bb4:	str	r0, [sp, #48]	; 0x30
    1bb8:	mov	r0, lr
    1bbc:	ldr	r1, [sp, #48]	; 0x30
    1bc0:	bl	0 <printf>
    1bc4:	str	r0, [sp, #44]	; 0x2c
    1bc8:	b	1cfc <test_typed_empty_monster+0x348>
    1bcc:	ldr	r2, [pc, #316]	; 1d10 <test_typed_empty_monster+0x35c>
    1bd0:	ldr	r0, [fp, #-16]
    1bd4:	ldr	r1, [fp, #-20]	; 0xffffffec
    1bd8:	bl	1e44 <MyGame_Example_Monster_verify_as_root_with_type_hash>
    1bdc:	str	r0, [fp, #-8]
    1be0:	cmp	r0, #0
    1be4:	beq	1c10 <test_typed_empty_monster+0x25c>
    1be8:	ldr	r0, [fp, #-8]
    1bec:	bl	0 <flatcc_verify_error_string>
    1bf0:	movw	lr, #0
    1bf4:	movt	lr, #0
    1bf8:	str	r0, [sp, #40]	; 0x28
    1bfc:	mov	r0, lr
    1c00:	ldr	r1, [sp, #40]	; 0x28
    1c04:	bl	0 <printf>
    1c08:	str	r0, [sp, #36]	; 0x24
    1c0c:	b	1cfc <test_typed_empty_monster+0x348>
    1c10:	ldr	r0, [fp, #-16]
    1c14:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c18:	movw	r2, #0
    1c1c:	movt	r2, #0
    1c20:	str	r0, [sp, #32]
    1c24:	mov	r0, r2
    1c28:	str	r1, [sp, #28]
    1c2c:	bl	1d38 <flatbuffers_type_hash_from_name>
    1c30:	ldr	r1, [sp, #32]
    1c34:	str	r0, [sp, #24]
    1c38:	mov	r0, r1
    1c3c:	ldr	r1, [sp, #28]
    1c40:	ldr	r2, [sp, #24]
    1c44:	bl	1e44 <MyGame_Example_Monster_verify_as_root_with_type_hash>
    1c48:	str	r0, [fp, #-8]
    1c4c:	cmp	r0, #0
    1c50:	beq	1c7c <test_typed_empty_monster+0x2c8>
    1c54:	ldr	r0, [fp, #-8]
    1c58:	bl	0 <flatcc_verify_error_string>
    1c5c:	movw	lr, #0
    1c60:	movt	lr, #0
    1c64:	str	r0, [sp, #20]
    1c68:	mov	r0, lr
    1c6c:	ldr	r1, [sp, #20]
    1c70:	bl	0 <printf>
    1c74:	str	r0, [sp, #16]
    1c78:	b	1cfc <test_typed_empty_monster+0x348>
    1c7c:	ldr	r0, [pc, #140]	; 1d10 <test_typed_empty_monster+0x35c>
    1c80:	sub	r1, fp, #24
    1c84:	bl	1e7c <flatbuffers_identifier_from_type_hash>
    1c88:	sub	r2, fp, #24
    1c8c:	ldr	r0, [fp, #-16]
    1c90:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c94:	bl	1944 <MyGame_Example_Monster_verify_as_root_with_identifier>
    1c98:	str	r0, [fp, #-8]
    1c9c:	cmp	r0, #0
    1ca0:	beq	1ccc <test_typed_empty_monster+0x318>
    1ca4:	ldr	r0, [fp, #-8]
    1ca8:	bl	0 <flatcc_verify_error_string>
    1cac:	movw	lr, #0
    1cb0:	movt	lr, #0
    1cb4:	str	r0, [sp, #12]
    1cb8:	mov	r0, lr
    1cbc:	ldr	r1, [sp, #12]
    1cc0:	bl	0 <printf>
    1cc4:	str	r0, [sp, #8]
    1cc8:	b	1cfc <test_typed_empty_monster+0x348>
    1ccc:	ldr	r0, [fp, #-16]
    1cd0:	ldr	r1, [fp, #-20]	; 0xffffffec
    1cd4:	bl	197c <MyGame_Example_Monster_verify_as_root>
    1cd8:	cmp	r0, #0
    1cdc:	bne	1cf4 <test_typed_empty_monster+0x340>
    1ce0:	movw	r0, #0
    1ce4:	movt	r0, #0
    1ce8:	bl	0 <printf>
    1cec:	str	r0, [sp, #4]
    1cf0:	b	1cfc <test_typed_empty_monster+0x348>
    1cf4:	movw	r0, #0
    1cf8:	str	r0, [fp, #-8]
    1cfc:	ldr	r0, [fp, #-16]
    1d00:	bl	0 <flatcc_builder_aligned_free>
    1d04:	ldr	r0, [fp, #-8]
    1d08:	mov	sp, fp
    1d0c:	pop	{fp, pc}
    1d10:	.word	0x330ef481

00001d14 <flatbuffers_get_type_hash>:
    1d14:	push	{fp, lr}
    1d18:	mov	fp, sp
    1d1c:	sub	sp, sp, #8
    1d20:	str	r0, [sp, #4]
    1d24:	ldr	r0, [sp, #4]
    1d28:	add	r0, r0, #4
    1d2c:	bl	11d64 <__flatbuffers_thash_read_from_pe>
    1d30:	mov	sp, fp
    1d34:	pop	{fp, pc}

00001d38 <flatbuffers_type_hash_from_name>:
    1d38:	sub	sp, sp, #8
    1d3c:	ldr	r1, [pc, #104]	; 1dac <flatbuffers_type_hash_from_name+0x74>
    1d40:	str	r0, [sp, #4]
    1d44:	str	r1, [sp]
    1d48:	ldr	r0, [sp, #4]
    1d4c:	ldrsb	r0, [r0]
    1d50:	cmp	r0, #0
    1d54:	beq	1d8c <flatbuffers_type_hash_from_name+0x54>
    1d58:	ldr	r0, [pc, #80]	; 1db0 <flatbuffers_type_hash_from_name+0x78>
    1d5c:	ldr	r1, [sp, #4]
    1d60:	ldrb	r1, [r1]
    1d64:	ldr	r2, [sp]
    1d68:	eor	r1, r2, r1
    1d6c:	str	r1, [sp]
    1d70:	ldr	r1, [sp]
    1d74:	mul	r0, r1, r0
    1d78:	str	r0, [sp]
    1d7c:	ldr	r0, [sp, #4]
    1d80:	add	r0, r0, #1
    1d84:	str	r0, [sp, #4]
    1d88:	b	1d48 <flatbuffers_type_hash_from_name+0x10>
    1d8c:	ldr	r0, [sp]
    1d90:	cmp	r0, #0
    1d94:	bne	1da0 <flatbuffers_type_hash_from_name+0x68>
    1d98:	ldr	r0, [pc, #12]	; 1dac <flatbuffers_type_hash_from_name+0x74>
    1d9c:	str	r0, [sp]
    1da0:	ldr	r0, [sp]
    1da4:	add	sp, sp, #8
    1da8:	bx	lr
    1dac:	.word	0x811c9dc5
    1db0:	.word	0x01000193

00001db4 <flatbuffers_has_type_hash>:
    1db4:	push	{fp, lr}
    1db8:	mov	fp, sp
    1dbc:	sub	sp, sp, #16
    1dc0:	str	r0, [fp, #-4]
    1dc4:	str	r1, [sp, #8]
    1dc8:	ldr	r0, [sp, #8]
    1dcc:	cmp	r0, #0
    1dd0:	movw	r0, #1
    1dd4:	str	r0, [sp, #4]
    1dd8:	beq	1dfc <flatbuffers_has_type_hash+0x48>
    1ddc:	ldr	r0, [fp, #-4]
    1de0:	add	r0, r0, #4
    1de4:	bl	11d64 <__flatbuffers_thash_read_from_pe>
    1de8:	ldr	lr, [sp, #8]
    1dec:	cmp	r0, lr
    1df0:	movw	r0, #0
    1df4:	moveq	r0, #1
    1df8:	str	r0, [sp, #4]
    1dfc:	ldr	r0, [sp, #4]
    1e00:	and	r0, r0, #1
    1e04:	mov	sp, fp
    1e08:	pop	{fp, pc}

00001e0c <MyGame_Example_Monster_verify_as_typed_root>:
    1e0c:	push	{fp, lr}
    1e10:	mov	fp, sp
    1e14:	sub	sp, sp, #8
    1e18:	str	r0, [sp, #4]
    1e1c:	str	r1, [sp]
    1e20:	ldr	r0, [sp, #4]
    1e24:	ldr	r1, [sp]
    1e28:	movw	r2, #0
    1e2c:	movt	r2, #0
    1e30:	movw	r3, #0
    1e34:	movt	r3, #0
    1e38:	bl	0 <flatcc_verify_table_as_root>
    1e3c:	mov	sp, fp
    1e40:	pop	{fp, pc}

00001e44 <MyGame_Example_Monster_verify_as_root_with_type_hash>:
    1e44:	push	{fp, lr}
    1e48:	mov	fp, sp
    1e4c:	sub	sp, sp, #16
    1e50:	str	r0, [fp, #-4]
    1e54:	str	r1, [sp, #8]
    1e58:	str	r2, [sp, #4]
    1e5c:	ldr	r0, [fp, #-4]
    1e60:	ldr	r1, [sp, #8]
    1e64:	ldr	r2, [sp, #4]
    1e68:	movw	r3, #0
    1e6c:	movt	r3, #0
    1e70:	bl	0 <flatcc_verify_table_as_typed_root>
    1e74:	mov	sp, fp
    1e78:	pop	{fp, pc}

00001e7c <flatbuffers_identifier_from_type_hash>:
    1e7c:	sub	sp, sp, #8
    1e80:	str	r0, [sp, #4]
    1e84:	str	r1, [sp]
    1e88:	ldr	r0, [sp, #4]
    1e8c:	and	r0, r0, #255	; 0xff
    1e90:	ldr	r1, [sp]
    1e94:	strb	r0, [r1]
    1e98:	ldr	r0, [sp, #4]
    1e9c:	lsr	r0, r0, #8
    1ea0:	str	r0, [sp, #4]
    1ea4:	ldr	r0, [sp, #4]
    1ea8:	and	r0, r0, #255	; 0xff
    1eac:	ldr	r1, [sp]
    1eb0:	strb	r0, [r1, #1]
    1eb4:	ldr	r0, [sp, #4]
    1eb8:	lsr	r0, r0, #8
    1ebc:	str	r0, [sp, #4]
    1ec0:	ldr	r0, [sp, #4]
    1ec4:	and	r0, r0, #255	; 0xff
    1ec8:	ldr	r1, [sp]
    1ecc:	strb	r0, [r1, #2]
    1ed0:	ldr	r0, [sp, #4]
    1ed4:	lsr	r0, r0, #8
    1ed8:	str	r0, [sp, #4]
    1edc:	ldr	r0, [sp, #4]
    1ee0:	and	r0, r0, #255	; 0xff
    1ee4:	ldr	r1, [sp]
    1ee8:	strb	r0, [r1, #3]
    1eec:	add	sp, sp, #8
    1ef0:	bx	lr

00001ef4 <verify_table_with_emptystruct>:
    1ef4:	push	{fp, lr}
    1ef8:	mov	fp, sp
    1efc:	sub	sp, sp, #32
    1f00:	str	r0, [fp, #-8]
    1f04:	ldr	r0, [fp, #-8]
    1f08:	bl	1fb0 <MyGame_Example_with_emptystruct_as_root>
    1f0c:	str	r0, [fp, #-12]
    1f10:	ldr	r0, [fp, #-12]
    1f14:	movw	lr, #0
    1f18:	cmp	r0, lr
    1f1c:	bne	1f3c <verify_table_with_emptystruct+0x48>
    1f20:	movw	r0, #0
    1f24:	movt	r0, #0
    1f28:	bl	0 <printf>
    1f2c:	mvn	lr, #0
    1f30:	str	lr, [fp, #-4]
    1f34:	str	r0, [sp, #12]
    1f38:	b	1fa4 <verify_table_with_emptystruct+0xb0>
    1f3c:	ldr	r0, [fp, #-12]
    1f40:	bl	2028 <MyGame_Example_with_emptystruct_empty>
    1f44:	str	r0, [sp, #16]
    1f48:	ldr	r0, [sp, #16]
    1f4c:	movw	lr, #0
    1f50:	cmp	r0, lr
    1f54:	bne	1f74 <verify_table_with_emptystruct+0x80>
    1f58:	movw	r0, #0
    1f5c:	movt	r0, #0
    1f60:	bl	0 <printf>
    1f64:	mvn	lr, #0
    1f68:	str	lr, [fp, #-4]
    1f6c:	str	r0, [sp, #8]
    1f70:	b	1fa4 <verify_table_with_emptystruct+0xb0>
    1f74:	bl	11d9c <MyGame_Example_emptystruct__size>
    1f78:	cmp	r0, #0
    1f7c:	beq	1f9c <verify_table_with_emptystruct+0xa8>
    1f80:	movw	r0, #0
    1f84:	movt	r0, #0
    1f88:	bl	0 <printf>
    1f8c:	mvn	lr, #0
    1f90:	str	lr, [fp, #-4]
    1f94:	str	r0, [sp, #4]
    1f98:	b	1fa4 <verify_table_with_emptystruct+0xb0>
    1f9c:	movw	r0, #0
    1fa0:	str	r0, [fp, #-4]
    1fa4:	ldr	r0, [fp, #-4]
    1fa8:	mov	sp, fp
    1fac:	pop	{fp, pc}

00001fb0 <MyGame_Example_with_emptystruct_as_root>:
    1fb0:	push	{fp, lr}
    1fb4:	mov	fp, sp
    1fb8:	sub	sp, sp, #16
    1fbc:	str	r0, [fp, #-4]
    1fc0:	movw	r0, #0
    1fc4:	movt	r0, #0
    1fc8:	str	r0, [sp, #8]
    1fcc:	ldr	r0, [fp, #-4]
    1fd0:	movw	r1, #0
    1fd4:	cmp	r0, r1
    1fd8:	beq	1ff0 <MyGame_Example_with_emptystruct_as_root+0x40>
    1fdc:	ldr	r0, [fp, #-4]
    1fe0:	ldr	r1, [sp, #8]
    1fe4:	bl	2674 <flatbuffers_has_identifier>
    1fe8:	cmp	r0, #0
    1fec:	bne	1ffc <MyGame_Example_with_emptystruct_as_root+0x4c>
    1ff0:	movw	r0, #0
    1ff4:	str	r0, [sp, #4]
    1ff8:	b	201c <MyGame_Example_with_emptystruct_as_root+0x6c>
    1ffc:	ldr	r0, [fp, #-4]
    2000:	ldr	r1, [fp, #-4]
    2004:	str	r0, [sp]
    2008:	mov	r0, r1
    200c:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    2010:	ldr	r1, [sp]
    2014:	add	r0, r1, r0
    2018:	str	r0, [sp, #4]
    201c:	ldr	r0, [sp, #4]
    2020:	mov	sp, fp
    2024:	pop	{fp, pc}

00002028 <MyGame_Example_with_emptystruct_empty>:
    2028:	push	{fp, lr}
    202c:	mov	fp, sp
    2030:	sub	sp, sp, #24
    2034:	str	r0, [fp, #-8]
    2038:	movw	r0, #0
    203c:	strh	r0, [fp, #-10]
    2040:	ldr	r0, [fp, #-8]
    2044:	movw	r1, #0
    2048:	cmp	r0, r1
    204c:	beq	2058 <MyGame_Example_with_emptystruct_empty+0x30>
    2050:	b	2054 <MyGame_Example_with_emptystruct_empty+0x2c>
    2054:	b	2078 <MyGame_Example_with_emptystruct_empty+0x50>
    2058:	movw	r0, #0
    205c:	movt	r0, #0
    2060:	movw	r1, #0
    2064:	movt	r1, #0
    2068:	movw	r2, #569	; 0x239
    206c:	movw	r3, #0
    2070:	movt	r3, #0
    2074:	bl	0 <__assert_fail>
    2078:	mov	r0, #0
    207c:	strh	r0, [sp, #12]
    2080:	ldr	r0, [fp, #-8]
    2084:	str	r0, [sp, #4]
    2088:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    208c:	ldr	lr, [sp, #4]
    2090:	sub	r0, lr, r0
    2094:	str	r0, [sp, #8]
    2098:	ldr	r0, [sp, #8]
    209c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    20a0:	ldrh	lr, [sp, #12]
    20a4:	add	lr, lr, #3
    20a8:	lsl	lr, lr, #1
    20ac:	cmp	r0, lr
    20b0:	bcc	20cc <MyGame_Example_with_emptystruct_empty+0xa4>
    20b4:	ldr	r0, [sp, #8]
    20b8:	ldrh	r1, [sp, #12]
    20bc:	add	r0, r0, r1, lsl #1
    20c0:	add	r0, r0, #4
    20c4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    20c8:	strh	r0, [fp, #-10]
    20cc:	ldrsh	r0, [fp, #-10]
    20d0:	cmp	r0, #0
    20d4:	beq	20ec <MyGame_Example_with_emptystruct_empty+0xc4>
    20d8:	ldr	r0, [fp, #-8]
    20dc:	ldrh	r1, [fp, #-10]
    20e0:	add	r0, r0, r1
    20e4:	str	r0, [fp, #-4]
    20e8:	b	20f4 <MyGame_Example_with_emptystruct_empty+0xcc>
    20ec:	movw	r0, #0
    20f0:	str	r0, [fp, #-4]
    20f4:	ldr	r0, [fp, #-4]
    20f8:	mov	sp, fp
    20fc:	pop	{fp, pc}

00002100 <test_table_with_emptystruct>:
    2100:	push	{fp, lr}
    2104:	mov	fp, sp
    2108:	sub	sp, sp, #32
    210c:	str	r0, [fp, #-4]
    2110:	movw	r0, #0
    2114:	str	r0, [fp, #-12]
    2118:	ldr	r0, [fp, #-4]
    211c:	bl	0 <flatcc_builder_reset>
    2120:	ldr	lr, [fp, #-4]
    2124:	ldr	r1, [fp, #-12]
    2128:	str	r0, [sp, #8]
    212c:	mov	r0, lr
    2130:	bl	218c <MyGame_Example_with_emptystruct_create_as_root>
    2134:	ldr	r1, [fp, #-4]
    2138:	str	r0, [sp, #4]
    213c:	mov	r0, r1
    2140:	add	r1, sp, #12
    2144:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    2148:	str	r0, [sp, #16]
    214c:	ldr	r1, [sp, #16]
    2150:	ldr	r2, [sp, #12]
    2154:	movw	r0, #0
    2158:	movt	r0, #0
    215c:	ldr	r3, [r0]
    2160:	movw	r0, #0
    2164:	movt	r0, #0
    2168:	bl	b0c <hexdump>
    216c:	ldr	r0, [sp, #16]
    2170:	bl	1ef4 <verify_table_with_emptystruct>
    2174:	str	r0, [fp, #-8]
    2178:	ldr	r0, [sp, #16]
    217c:	bl	0 <flatcc_builder_aligned_free>
    2180:	ldr	r0, [fp, #-8]
    2184:	mov	sp, fp
    2188:	pop	{fp, pc}

0000218c <MyGame_Example_with_emptystruct_create_as_root>:
    218c:	push	{fp, lr}
    2190:	mov	fp, sp
    2194:	sub	sp, sp, #24
    2198:	str	r0, [fp, #-8]
    219c:	str	r1, [sp, #12]
    21a0:	ldr	r0, [fp, #-8]
    21a4:	movw	r1, #0
    21a8:	movt	r1, #0
    21ac:	bl	1818 <flatbuffers_buffer_start>
    21b0:	cmp	r0, #0
    21b4:	beq	21c4 <MyGame_Example_with_emptystruct_create_as_root+0x38>
    21b8:	movw	r0, #0
    21bc:	str	r0, [fp, #-4]
    21c0:	b	21f8 <MyGame_Example_with_emptystruct_create_as_root+0x6c>
    21c4:	ldr	r0, [fp, #-8]
    21c8:	ldr	r1, [fp, #-8]
    21cc:	ldr	r2, [sp, #12]
    21d0:	str	r0, [sp, #8]
    21d4:	mov	r0, r1
    21d8:	mov	r1, r2
    21dc:	bl	11da4 <MyGame_Example_with_emptystruct_create>
    21e0:	ldr	r1, [sp, #8]
    21e4:	str	r0, [sp, #4]
    21e8:	mov	r0, r1
    21ec:	ldr	r1, [sp, #4]
    21f0:	bl	191c <flatbuffers_buffer_end>
    21f4:	str	r0, [fp, #-4]
    21f8:	ldr	r0, [fp, #-4]
    21fc:	mov	sp, fp
    2200:	pop	{fp, pc}

00002204 <test_typed_table_with_emptystruct>:
    2204:	push	{fp, lr}
    2208:	mov	fp, sp
    220c:	sub	sp, sp, #88	; 0x58
    2210:	str	r0, [fp, #-8]
    2214:	movw	r0, #0
    2218:	str	r0, [fp, #-12]
    221c:	str	r0, [fp, #-16]
    2220:	ldr	r0, [fp, #-8]
    2224:	bl	0 <flatcc_builder_reset>
    2228:	ldr	lr, [fp, #-8]
    222c:	ldr	r1, [fp, #-16]
    2230:	str	r0, [fp, #-28]	; 0xffffffe4
    2234:	mov	r0, lr
    2238:	bl	2554 <MyGame_Example_with_emptystruct_create_as_typed_root>
    223c:	ldr	r1, [fp, #-8]
    2240:	str	r0, [fp, #-32]	; 0xffffffe0
    2244:	mov	r0, r1
    2248:	sub	r1, fp, #24
    224c:	bl	0 <flatcc_builder_get_direct_buffer>
    2250:	str	r0, [fp, #-20]	; 0xffffffec
    2254:	ldr	r1, [fp, #-20]	; 0xffffffec
    2258:	ldr	r2, [fp, #-24]	; 0xffffffe8
    225c:	movw	r0, #0
    2260:	movt	r0, #0
    2264:	ldr	r3, [r0]
    2268:	movw	r0, #0
    226c:	movt	r0, #0
    2270:	bl	b0c <hexdump>
    2274:	ldr	r0, [fp, #-20]	; 0xffffffec
    2278:	ldr	r1, [fp, #-24]	; 0xffffffe8
    227c:	movw	r2, #0
    2280:	movt	r2, #0
    2284:	bl	25cc <MyGame_Example_with_emptystruct_verify_as_root_with_identifier>
    2288:	movw	r1, #0
    228c:	cmp	r1, r0
    2290:	beq	22b0 <test_typed_table_with_emptystruct+0xac>
    2294:	movw	r0, #0
    2298:	movt	r0, #0
    229c:	bl	0 <printf>
    22a0:	mvn	lr, #0
    22a4:	str	lr, [fp, #-4]
    22a8:	str	r0, [fp, #-36]	; 0xffffffdc
    22ac:	b	2544 <test_typed_table_with_emptystruct+0x340>
    22b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    22b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    22b8:	bl	2604 <MyGame_Example_with_emptystruct_verify_as_typed_root>
    22bc:	movw	r1, #0
    22c0:	cmp	r1, r0
    22c4:	beq	22e4 <test_typed_table_with_emptystruct+0xe0>
    22c8:	movw	r0, #0
    22cc:	movt	r0, #0
    22d0:	bl	0 <printf>
    22d4:	mvn	lr, #0
    22d8:	str	lr, [fp, #-4]
    22dc:	str	r0, [fp, #-40]	; 0xffffffd8
    22e0:	b	2544 <test_typed_table_with_emptystruct+0x340>
    22e4:	ldr	r2, [pc, #612]	; 2550 <test_typed_table_with_emptystruct+0x34c>
    22e8:	ldr	r0, [fp, #-20]	; 0xffffffec
    22ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
    22f0:	bl	263c <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash>
    22f4:	movw	r1, #0
    22f8:	cmp	r1, r0
    22fc:	beq	231c <test_typed_table_with_emptystruct+0x118>
    2300:	movw	r0, #0
    2304:	movt	r0, #0
    2308:	bl	0 <printf>
    230c:	mvn	lr, #0
    2310:	str	lr, [fp, #-4]
    2314:	str	r0, [sp, #44]	; 0x2c
    2318:	b	2544 <test_typed_table_with_emptystruct+0x340>
    231c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2320:	movw	r1, #0
    2324:	cmp	r0, r1
    2328:	bne	2348 <test_typed_table_with_emptystruct+0x144>
    232c:	movw	r0, #0
    2330:	movt	r0, #0
    2334:	bl	0 <printf>
    2338:	mvn	lr, #0
    233c:	str	lr, [fp, #-4]
    2340:	str	r0, [sp, #40]	; 0x28
    2344:	b	2544 <test_typed_table_with_emptystruct+0x340>
    2348:	ldr	r1, [pc, #512]	; 2550 <test_typed_table_with_emptystruct+0x34c>
    234c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2350:	bl	1db4 <flatbuffers_has_type_hash>
    2354:	cmp	r0, #0
    2358:	bne	2378 <test_typed_table_with_emptystruct+0x174>
    235c:	movw	r0, #0
    2360:	movt	r0, #0
    2364:	bl	0 <printf>
    2368:	mvn	lr, #0
    236c:	str	lr, [fp, #-4]
    2370:	str	r0, [sp, #36]	; 0x24
    2374:	b	2544 <test_typed_table_with_emptystruct+0x340>
    2378:	ldr	r0, [fp, #-20]	; 0xffffffec
    237c:	movw	r1, #0
    2380:	bl	1db4 <flatbuffers_has_type_hash>
    2384:	cmp	r0, #0
    2388:	bne	23a8 <test_typed_table_with_emptystruct+0x1a4>
    238c:	movw	r0, #0
    2390:	movt	r0, #0
    2394:	bl	0 <printf>
    2398:	mvn	lr, #0
    239c:	str	lr, [fp, #-4]
    23a0:	str	r0, [sp, #32]
    23a4:	b	2544 <test_typed_table_with_emptystruct+0x340>
    23a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    23ac:	movw	r1, #1
    23b0:	bl	1db4 <flatbuffers_has_type_hash>
    23b4:	cmp	r0, #0
    23b8:	beq	23d8 <test_typed_table_with_emptystruct+0x1d4>
    23bc:	movw	r0, #0
    23c0:	movt	r0, #0
    23c4:	bl	0 <printf>
    23c8:	mvn	lr, #0
    23cc:	str	lr, [fp, #-4]
    23d0:	str	r0, [sp, #28]
    23d4:	b	2544 <test_typed_table_with_emptystruct+0x340>
    23d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    23dc:	movw	r1, #0
    23e0:	bl	2674 <flatbuffers_has_identifier>
    23e4:	cmp	r0, #0
    23e8:	bne	2408 <test_typed_table_with_emptystruct+0x204>
    23ec:	movw	r0, #0
    23f0:	movt	r0, #0
    23f4:	bl	0 <printf>
    23f8:	mvn	lr, #0
    23fc:	str	lr, [fp, #-4]
    2400:	str	r0, [sp, #24]
    2404:	b	2544 <test_typed_table_with_emptystruct+0x340>
    2408:	ldr	r0, [fp, #-20]	; 0xffffffec
    240c:	movw	r1, #0
    2410:	movt	r1, #0
    2414:	bl	2674 <flatbuffers_has_identifier>
    2418:	cmp	r0, #0
    241c:	bne	243c <test_typed_table_with_emptystruct+0x238>
    2420:	movw	r0, #0
    2424:	movt	r0, #0
    2428:	bl	0 <printf>
    242c:	mvn	lr, #0
    2430:	str	lr, [fp, #-4]
    2434:	str	r0, [sp, #20]
    2438:	b	2544 <test_typed_table_with_emptystruct+0x340>
    243c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2440:	bl	1fb0 <MyGame_Example_with_emptystruct_as_root>
    2444:	movw	lr, #0
    2448:	cmp	r0, lr
    244c:	beq	246c <test_typed_table_with_emptystruct+0x268>
    2450:	movw	r0, #0
    2454:	movt	r0, #0
    2458:	bl	0 <printf>
    245c:	mvn	lr, #0
    2460:	str	lr, [fp, #-4]
    2464:	str	r0, [sp, #16]
    2468:	b	2544 <test_typed_table_with_emptystruct+0x340>
    246c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2470:	movw	r1, #1
    2474:	bl	2720 <MyGame_Example_with_emptystruct_as_root_with_type_hash>
    2478:	movw	r1, #0
    247c:	cmp	r0, r1
    2480:	beq	24a0 <test_typed_table_with_emptystruct+0x29c>
    2484:	movw	r0, #0
    2488:	movt	r0, #0
    248c:	bl	0 <printf>
    2490:	mvn	lr, #0
    2494:	str	lr, [fp, #-4]
    2498:	str	r0, [sp, #12]
    249c:	b	2544 <test_typed_table_with_emptystruct+0x340>
    24a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    24a4:	movw	r1, #0
    24a8:	movt	r1, #0
    24ac:	bl	2790 <MyGame_Example_with_emptystruct_as_root_with_identifier>
    24b0:	movw	r1, #0
    24b4:	cmp	r0, r1
    24b8:	bne	24d8 <test_typed_table_with_emptystruct+0x2d4>
    24bc:	movw	r0, #0
    24c0:	movt	r0, #0
    24c4:	bl	0 <printf>
    24c8:	mvn	lr, #0
    24cc:	str	lr, [fp, #-4]
    24d0:	str	r0, [sp, #8]
    24d4:	b	2544 <test_typed_table_with_emptystruct+0x340>
    24d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    24dc:	bl	2800 <MyGame_Example_with_emptystruct_as_typed_root>
    24e0:	movw	lr, #0
    24e4:	cmp	r0, lr
    24e8:	bne	2508 <test_typed_table_with_emptystruct+0x304>
    24ec:	movw	r0, #0
    24f0:	movt	r0, #0
    24f4:	bl	0 <printf>
    24f8:	mvn	lr, #0
    24fc:	str	lr, [fp, #-4]
    2500:	str	r0, [sp, #4]
    2504:	b	2544 <test_typed_table_with_emptystruct+0x340>
    2508:	ldr	r0, [fp, #-20]	; 0xffffffec
    250c:	movw	r1, #0
    2510:	bl	2720 <MyGame_Example_with_emptystruct_as_root_with_type_hash>
    2514:	movw	r1, #0
    2518:	cmp	r0, r1
    251c:	bne	253c <test_typed_table_with_emptystruct+0x338>
    2520:	movw	r0, #0
    2524:	movt	r0, #0
    2528:	bl	0 <printf>
    252c:	mvn	lr, #0
    2530:	str	lr, [fp, #-4]
    2534:	str	r0, [sp]
    2538:	b	2544 <test_typed_table_with_emptystruct+0x340>
    253c:	ldr	r0, [fp, #-12]
    2540:	str	r0, [fp, #-4]
    2544:	ldr	r0, [fp, #-4]
    2548:	mov	sp, fp
    254c:	pop	{fp, pc}
    2550:	.word	0xb0dd37b6

00002554 <MyGame_Example_with_emptystruct_create_as_typed_root>:
    2554:	push	{fp, lr}
    2558:	mov	fp, sp
    255c:	sub	sp, sp, #24
    2560:	str	r0, [fp, #-8]
    2564:	str	r1, [sp, #12]
    2568:	ldr	r0, [fp, #-8]
    256c:	movw	r1, #0
    2570:	movt	r1, #0
    2574:	bl	1818 <flatbuffers_buffer_start>
    2578:	cmp	r0, #0
    257c:	beq	258c <MyGame_Example_with_emptystruct_create_as_typed_root+0x38>
    2580:	movw	r0, #0
    2584:	str	r0, [fp, #-4]
    2588:	b	25c0 <MyGame_Example_with_emptystruct_create_as_typed_root+0x6c>
    258c:	ldr	r0, [fp, #-8]
    2590:	ldr	r1, [fp, #-8]
    2594:	ldr	r2, [sp, #12]
    2598:	str	r0, [sp, #8]
    259c:	mov	r0, r1
    25a0:	mov	r1, r2
    25a4:	bl	11da4 <MyGame_Example_with_emptystruct_create>
    25a8:	ldr	r1, [sp, #8]
    25ac:	str	r0, [sp, #4]
    25b0:	mov	r0, r1
    25b4:	ldr	r1, [sp, #4]
    25b8:	bl	191c <flatbuffers_buffer_end>
    25bc:	str	r0, [fp, #-4]
    25c0:	ldr	r0, [fp, #-4]
    25c4:	mov	sp, fp
    25c8:	pop	{fp, pc}

000025cc <MyGame_Example_with_emptystruct_verify_as_root_with_identifier>:
    25cc:	push	{fp, lr}
    25d0:	mov	fp, sp
    25d4:	sub	sp, sp, #16
    25d8:	str	r0, [fp, #-4]
    25dc:	str	r1, [sp, #8]
    25e0:	str	r2, [sp, #4]
    25e4:	ldr	r0, [fp, #-4]
    25e8:	ldr	r1, [sp, #8]
    25ec:	ldr	r2, [sp, #4]
    25f0:	movw	r3, #0
    25f4:	movt	r3, #0
    25f8:	bl	0 <flatcc_verify_table_as_root>
    25fc:	mov	sp, fp
    2600:	pop	{fp, pc}

00002604 <MyGame_Example_with_emptystruct_verify_as_typed_root>:
    2604:	push	{fp, lr}
    2608:	mov	fp, sp
    260c:	sub	sp, sp, #8
    2610:	str	r0, [sp, #4]
    2614:	str	r1, [sp]
    2618:	ldr	r0, [sp, #4]
    261c:	ldr	r1, [sp]
    2620:	movw	r2, #0
    2624:	movt	r2, #0
    2628:	movw	r3, #0
    262c:	movt	r3, #0
    2630:	bl	0 <flatcc_verify_table_as_root>
    2634:	mov	sp, fp
    2638:	pop	{fp, pc}

0000263c <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash>:
    263c:	push	{fp, lr}
    2640:	mov	fp, sp
    2644:	sub	sp, sp, #16
    2648:	str	r0, [fp, #-4]
    264c:	str	r1, [sp, #8]
    2650:	str	r2, [sp, #4]
    2654:	ldr	r0, [fp, #-4]
    2658:	ldr	r1, [sp, #8]
    265c:	ldr	r2, [sp, #4]
    2660:	movw	r3, #0
    2664:	movt	r3, #0
    2668:	bl	0 <flatcc_verify_table_as_typed_root>
    266c:	mov	sp, fp
    2670:	pop	{fp, pc}

00002674 <flatbuffers_has_identifier>:
    2674:	push	{fp, lr}
    2678:	mov	fp, sp
    267c:	sub	sp, sp, #32
    2680:	str	r0, [fp, #-8]
    2684:	str	r1, [fp, #-12]
    2688:	movw	r0, #0
    268c:	str	r0, [sp, #12]
    2690:	ldr	r1, [fp, #-12]
    2694:	cmp	r1, r0
    2698:	bne	26a8 <flatbuffers_has_identifier+0x34>
    269c:	movw	r0, #1
    26a0:	str	r0, [fp, #-4]
    26a4:	b	2714 <flatbuffers_has_identifier+0xa0>
    26a8:	add	r0, sp, #12
    26ac:	ldr	r1, [fp, #-12]
    26b0:	movw	r2, #4
    26b4:	bl	0 <strncpy>
    26b8:	ldr	r1, [sp, #12]
    26bc:	str	r0, [sp, #8]
    26c0:	mov	r0, r1
    26c4:	bl	11f88 <__flatbuffers_thash_cast_from_le>
    26c8:	str	r0, [sp, #12]
    26cc:	ldr	r0, [fp, #-8]
    26d0:	add	r0, r0, #4
    26d4:	bl	11d64 <__flatbuffers_thash_read_from_pe>
    26d8:	str	r0, [sp, #16]
    26dc:	ldr	r0, [sp, #12]
    26e0:	cmp	r0, #0
    26e4:	movw	r0, #1
    26e8:	str	r0, [sp, #4]
    26ec:	beq	2708 <flatbuffers_has_identifier+0x94>
    26f0:	ldr	r0, [sp, #16]
    26f4:	ldr	r1, [sp, #12]
    26f8:	cmp	r0, r1
    26fc:	movw	r0, #0
    2700:	moveq	r0, #1
    2704:	str	r0, [sp, #4]
    2708:	ldr	r0, [sp, #4]
    270c:	and	r0, r0, #1
    2710:	str	r0, [fp, #-4]
    2714:	ldr	r0, [fp, #-4]
    2718:	mov	sp, fp
    271c:	pop	{fp, pc}

00002720 <MyGame_Example_with_emptystruct_as_root_with_type_hash>:
    2720:	push	{fp, lr}
    2724:	mov	fp, sp
    2728:	sub	sp, sp, #16
    272c:	str	r0, [fp, #-4]
    2730:	str	r1, [sp, #8]
    2734:	ldr	r0, [fp, #-4]
    2738:	movw	r1, #0
    273c:	cmp	r0, r1
    2740:	beq	2758 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x38>
    2744:	ldr	r0, [fp, #-4]
    2748:	ldr	r1, [sp, #8]
    274c:	bl	1db4 <flatbuffers_has_type_hash>
    2750:	cmp	r0, #0
    2754:	bne	2764 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x44>
    2758:	movw	r0, #0
    275c:	str	r0, [sp, #4]
    2760:	b	2784 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x64>
    2764:	ldr	r0, [fp, #-4]
    2768:	ldr	r1, [fp, #-4]
    276c:	str	r0, [sp]
    2770:	mov	r0, r1
    2774:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    2778:	ldr	r1, [sp]
    277c:	add	r0, r1, r0
    2780:	str	r0, [sp, #4]
    2784:	ldr	r0, [sp, #4]
    2788:	mov	sp, fp
    278c:	pop	{fp, pc}

00002790 <MyGame_Example_with_emptystruct_as_root_with_identifier>:
    2790:	push	{fp, lr}
    2794:	mov	fp, sp
    2798:	sub	sp, sp, #16
    279c:	str	r0, [fp, #-4]
    27a0:	str	r1, [sp, #8]
    27a4:	ldr	r0, [fp, #-4]
    27a8:	movw	r1, #0
    27ac:	cmp	r0, r1
    27b0:	beq	27c8 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x38>
    27b4:	ldr	r0, [fp, #-4]
    27b8:	ldr	r1, [sp, #8]
    27bc:	bl	2674 <flatbuffers_has_identifier>
    27c0:	cmp	r0, #0
    27c4:	bne	27d4 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x44>
    27c8:	movw	r0, #0
    27cc:	str	r0, [sp, #4]
    27d0:	b	27f4 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x64>
    27d4:	ldr	r0, [fp, #-4]
    27d8:	ldr	r1, [fp, #-4]
    27dc:	str	r0, [sp]
    27e0:	mov	r0, r1
    27e4:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    27e8:	ldr	r1, [sp]
    27ec:	add	r0, r1, r0
    27f0:	str	r0, [sp, #4]
    27f4:	ldr	r0, [sp, #4]
    27f8:	mov	sp, fp
    27fc:	pop	{fp, pc}

00002800 <MyGame_Example_with_emptystruct_as_typed_root>:
    2800:	push	{fp, lr}
    2804:	mov	fp, sp
    2808:	sub	sp, sp, #16
    280c:	str	r0, [fp, #-4]
    2810:	ldr	r0, [fp, #-4]
    2814:	movw	r1, #0
    2818:	cmp	r0, r1
    281c:	beq	2834 <MyGame_Example_with_emptystruct_as_typed_root+0x34>
    2820:	ldr	r1, [pc, #68]	; 286c <MyGame_Example_with_emptystruct_as_typed_root+0x6c>
    2824:	ldr	r0, [fp, #-4]
    2828:	bl	1db4 <flatbuffers_has_type_hash>
    282c:	cmp	r0, #0
    2830:	bne	2840 <MyGame_Example_with_emptystruct_as_typed_root+0x40>
    2834:	movw	r0, #0
    2838:	str	r0, [sp, #8]
    283c:	b	2860 <MyGame_Example_with_emptystruct_as_typed_root+0x60>
    2840:	ldr	r0, [fp, #-4]
    2844:	ldr	r1, [fp, #-4]
    2848:	str	r0, [sp, #4]
    284c:	mov	r0, r1
    2850:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    2854:	ldr	r1, [sp, #4]
    2858:	add	r0, r1, r0
    285c:	str	r0, [sp, #8]
    2860:	ldr	r0, [sp, #8]
    2864:	mov	sp, fp
    2868:	pop	{fp, pc}
    286c:	.word	0xb0dd37b6

00002870 <verify_monster>:
    2870:	push	{r4, r5, fp, lr}
    2874:	add	fp, sp, #8
    2878:	sub	sp, sp, #432	; 0x1b0
    287c:	bfc	sp, #0, #4
    2880:	movw	r1, #0
    2884:	movt	r1, #0
    2888:	str	r0, [sp, #424]	; 0x1a8
    288c:	add	r0, sp, #328	; 0x148
    2890:	movw	r2, #20
    2894:	bl	0 <memcpy>
    2898:	movw	r0, #0
    289c:	movt	r0, #0
    28a0:	ldr	r1, [r0]
    28a4:	str	r1, [sp, #292]	; 0x124
    28a8:	ldr	r1, [r0, #4]
    28ac:	str	r1, [sp, #296]	; 0x128
    28b0:	ldr	r1, [r0, #8]
    28b4:	str	r1, [sp, #300]	; 0x12c
    28b8:	ldr	r0, [r0, #12]
    28bc:	str	r0, [sp, #304]	; 0x130
    28c0:	ldr	r0, [sp, #424]	; 0x1a8
    28c4:	movw	r1, #0
    28c8:	bl	2674 <flatbuffers_has_identifier>
    28cc:	cmp	r0, #0
    28d0:	bne	28f0 <verify_monster+0x80>
    28d4:	movw	r0, #0
    28d8:	movt	r0, #0
    28dc:	bl	0 <printf>
    28e0:	mvn	lr, #0
    28e4:	str	lr, [sp, #428]	; 0x1ac
    28e8:	str	r0, [sp, #272]	; 0x110
    28ec:	b	38a8 <verify_monster+0x1038>
    28f0:	ldr	r0, [sp, #424]	; 0x1a8
    28f4:	movw	r1, #0
    28f8:	movt	r1, #0
    28fc:	bl	2674 <flatbuffers_has_identifier>
    2900:	cmp	r0, #0
    2904:	bne	2924 <verify_monster+0xb4>
    2908:	movw	r0, #0
    290c:	movt	r0, #0
    2910:	bl	0 <printf>
    2914:	mvn	lr, #0
    2918:	str	lr, [sp, #428]	; 0x1ac
    291c:	str	r0, [sp, #268]	; 0x10c
    2920:	b	38a8 <verify_monster+0x1038>
    2924:	ldr	r0, [sp, #424]	; 0x1a8
    2928:	movw	r1, #0
    292c:	movt	r1, #0
    2930:	bl	2674 <flatbuffers_has_identifier>
    2934:	cmp	r0, #0
    2938:	bne	2958 <verify_monster+0xe8>
    293c:	movw	r0, #0
    2940:	movt	r0, #0
    2944:	bl	0 <printf>
    2948:	mvn	lr, #0
    294c:	str	lr, [sp, #428]	; 0x1ac
    2950:	str	r0, [sp, #264]	; 0x108
    2954:	b	38a8 <verify_monster+0x1038>
    2958:	ldr	r0, [sp, #424]	; 0x1a8
    295c:	movw	r1, #0
    2960:	movt	r1, #0
    2964:	bl	2674 <flatbuffers_has_identifier>
    2968:	cmp	r0, #0
    296c:	beq	298c <verify_monster+0x11c>
    2970:	movw	r0, #0
    2974:	movt	r0, #0
    2978:	bl	0 <printf>
    297c:	mvn	lr, #0
    2980:	str	lr, [sp, #428]	; 0x1ac
    2984:	str	r0, [sp, #260]	; 0x104
    2988:	b	38a8 <verify_monster+0x1038>
    298c:	ldr	r0, [sp, #424]	; 0x1a8
    2990:	movw	r1, #0
    2994:	movt	r1, #0
    2998:	bl	2674 <flatbuffers_has_identifier>
    299c:	cmp	r0, #0
    29a0:	bne	29c0 <verify_monster+0x150>
    29a4:	movw	r0, #0
    29a8:	movt	r0, #0
    29ac:	bl	0 <printf>
    29b0:	mvn	lr, #0
    29b4:	str	lr, [sp, #428]	; 0x1ac
    29b8:	str	r0, [sp, #256]	; 0x100
    29bc:	b	38a8 <verify_monster+0x1038>
    29c0:	ldr	r0, [sp, #424]	; 0x1a8
    29c4:	bl	280 <MyGame_Example_Monster_as_root>
    29c8:	str	r0, [sp, #420]	; 0x1a4
    29cc:	movw	lr, #0
    29d0:	cmp	r0, lr
    29d4:	bne	29f4 <verify_monster+0x184>
    29d8:	movw	r0, #0
    29dc:	movt	r0, #0
    29e0:	bl	0 <printf>
    29e4:	mvn	lr, #0
    29e8:	str	lr, [sp, #428]	; 0x1ac
    29ec:	str	r0, [sp, #252]	; 0xfc
    29f0:	b	38a8 <verify_monster+0x1038>
    29f4:	ldr	r0, [sp, #420]	; 0x1a4
    29f8:	bl	2f8 <MyGame_Example_Monster_hp>
    29fc:	sxth	r0, r0
    2a00:	cmp	r0, #80	; 0x50
    2a04:	beq	2a24 <verify_monster+0x1b4>
    2a08:	movw	r0, #0
    2a0c:	movt	r0, #0
    2a10:	bl	0 <printf>
    2a14:	mvn	lr, #0
    2a18:	str	lr, [sp, #428]	; 0x1ac
    2a1c:	str	r0, [sp, #248]	; 0xf8
    2a20:	b	38a8 <verify_monster+0x1038>
    2a24:	ldr	r0, [sp, #420]	; 0x1a4
    2a28:	bl	560 <MyGame_Example_Monster_pos>
    2a2c:	str	r0, [sp, #392]	; 0x188
    2a30:	movw	lr, #0
    2a34:	cmp	r0, lr
    2a38:	bne	2a58 <verify_monster+0x1e8>
    2a3c:	movw	r0, #0
    2a40:	movt	r0, #0
    2a44:	bl	0 <printf>
    2a48:	mvn	lr, #0
    2a4c:	str	lr, [sp, #428]	; 0x1ac
    2a50:	str	r0, [sp, #244]	; 0xf4
    2a54:	b	38a8 <verify_monster+0x1038>
    2a58:	ldr	r0, [sp, #392]	; 0x188
    2a5c:	and	r0, r0, #15
    2a60:	cmp	r0, #0
    2a64:	beq	2a78 <verify_monster+0x208>
    2a68:	movw	r0, #0
    2a6c:	movt	r0, #0
    2a70:	bl	0 <printf>
    2a74:	str	r0, [sp, #240]	; 0xf0
    2a78:	ldr	r0, [sp, #392]	; 0x188
    2a7c:	bl	38b4 <MyGame_Example_Vec3_z>
    2a80:	vldr	s2, [pc, #1004]	; 2e74 <verify_monster+0x604>
    2a84:	vcmp.f32	s0, s2
    2a88:	vmrs	APSR_nzcv, fpscr
    2a8c:	beq	2aac <verify_monster+0x23c>
    2a90:	movw	r0, #0
    2a94:	movt	r0, #0
    2a98:	bl	0 <printf>
    2a9c:	mvn	lr, #0
    2aa0:	str	lr, [sp, #428]	; 0x1ac
    2aa4:	str	r0, [sp, #236]	; 0xec
    2aa8:	b	38a8 <verify_monster+0x1038>
    2aac:	ldr	r0, [sp, #392]	; 0x188
    2ab0:	vldr	s0, [r0]
    2ab4:	vmov.f32	s2, #112	; 0x3f800000  1.0
    2ab8:	vcmp.f32	s0, s2
    2abc:	vmrs	APSR_nzcv, fpscr
    2ac0:	bne	2af4 <verify_monster+0x284>
    2ac4:	ldr	r0, [sp, #392]	; 0x188
    2ac8:	vldr	s0, [r0, #4]
    2acc:	vmov.f32	s2, #0	; 0x40000000  2.0
    2ad0:	vcmp.f32	s0, s2
    2ad4:	vmrs	APSR_nzcv, fpscr
    2ad8:	bne	2af4 <verify_monster+0x284>
    2adc:	vldr	s0, [pc, #912]	; 2e74 <verify_monster+0x604>
    2ae0:	ldr	r0, [sp, #392]	; 0x188
    2ae4:	vldr	s2, [r0, #8]
    2ae8:	vcmp.f32	s2, s0
    2aec:	vmrs	APSR_nzcv, fpscr
    2af0:	beq	2b10 <verify_monster+0x2a0>
    2af4:	movw	r0, #0
    2af8:	movt	r0, #0
    2afc:	bl	0 <printf>
    2b00:	mvn	lr, #0
    2b04:	str	lr, [sp, #428]	; 0x1ac
    2b08:	str	r0, [sp, #232]	; 0xe8
    2b0c:	b	38a8 <verify_monster+0x1038>
    2b10:	add	r0, sp, #352	; 0x160
    2b14:	bl	3904 <MyGame_Example_Vec3_clear>
    2b18:	ldr	r1, [sp, #392]	; 0x188
    2b1c:	add	lr, sp, #352	; 0x160
    2b20:	str	r0, [sp, #228]	; 0xe4
    2b24:	mov	r0, lr
    2b28:	bl	3948 <MyGame_Example_Vec3_copy_from_pe>
    2b2c:	vldr	s0, [sp, #352]	; 0x160
    2b30:	vmov.f32	s2, #112	; 0x3f800000  1.0
    2b34:	vcmp.f32	s0, s2
    2b38:	vmrs	APSR_nzcv, fpscr
    2b3c:	str	r0, [sp, #224]	; 0xe0
    2b40:	bne	2b6c <verify_monster+0x2fc>
    2b44:	vldr	s0, [sp, #356]	; 0x164
    2b48:	vmov.f32	s2, #0	; 0x40000000  2.0
    2b4c:	vcmp.f32	s0, s2
    2b50:	vmrs	APSR_nzcv, fpscr
    2b54:	bne	2b6c <verify_monster+0x2fc>
    2b58:	vldr	s0, [pc, #788]	; 2e74 <verify_monster+0x604>
    2b5c:	vldr	s2, [sp, #360]	; 0x168
    2b60:	vcmp.f32	s2, s0
    2b64:	vmrs	APSR_nzcv, fpscr
    2b68:	beq	2b88 <verify_monster+0x318>
    2b6c:	movw	r0, #0
    2b70:	movt	r0, #0
    2b74:	bl	0 <printf>
    2b78:	mvn	lr, #0
    2b7c:	str	lr, [sp, #428]	; 0x1ac
    2b80:	str	r0, [sp, #220]	; 0xdc
    2b84:	b	38a8 <verify_monster+0x1038>
    2b88:	ldr	r0, [sp, #392]	; 0x188
    2b8c:	vldr	d16, [r0, #16]
    2b90:	vcmp.f64	d16, #0.0
    2b94:	vmrs	APSR_nzcv, fpscr
    2b98:	bne	2bcc <verify_monster+0x35c>
    2b9c:	ldr	r0, [sp, #392]	; 0x188
    2ba0:	vldr	d16, [r0, #16]
    2ba4:	vcmp.f64	d16, #0.0
    2ba8:	vmrs	APSR_nzcv, fpscr
    2bac:	bne	2bcc <verify_monster+0x35c>
    2bb0:	ldr	r0, [sp, #392]	; 0x188
    2bb4:	add	r0, r0, #26
    2bb8:	ldr	r0, [r0]
    2bbc:	cmp	r0, #0
    2bc0:	movwne	r0, #1
    2bc4:	cmp	r0, #0
    2bc8:	beq	2be8 <verify_monster+0x378>
    2bcc:	movw	r0, #0
    2bd0:	movt	r0, #0
    2bd4:	bl	0 <printf>
    2bd8:	mvn	lr, #0
    2bdc:	str	lr, [sp, #428]	; 0x1ac
    2be0:	str	r0, [sp, #216]	; 0xd8
    2be4:	b	38a8 <verify_monster+0x1038>
    2be8:	ldr	r0, [sp, #420]	; 0x1a4
    2bec:	bl	3a0c <MyGame_Example_Monster_name>
    2bf0:	str	r0, [sp, #388]	; 0x184
    2bf4:	ldr	r0, [sp, #388]	; 0x184
    2bf8:	movw	lr, #0
    2bfc:	cmp	r0, lr
    2c00:	beq	2c1c <verify_monster+0x3ac>
    2c04:	ldr	r0, [sp, #388]	; 0x184
    2c08:	movw	r1, #0
    2c0c:	movt	r1, #0
    2c10:	bl	0 <strcmp>
    2c14:	cmp	r0, #0
    2c18:	beq	2c38 <verify_monster+0x3c8>
    2c1c:	movw	r0, #0
    2c20:	movt	r0, #0
    2c24:	bl	0 <printf>
    2c28:	mvn	lr, #0
    2c2c:	str	lr, [sp, #428]	; 0x1ac
    2c30:	str	r0, [sp, #212]	; 0xd4
    2c34:	b	38a8 <verify_monster+0x1038>
    2c38:	ldr	r0, [sp, #420]	; 0x1a4
    2c3c:	bl	3a0c <MyGame_Example_Monster_name>
    2c40:	str	r0, [sp, #384]	; 0x180
    2c44:	ldr	r0, [sp, #388]	; 0x184
    2c48:	bl	3b14 <flatbuffers_string_len>
    2c4c:	cmp	r0, #9
    2c50:	bne	2c64 <verify_monster+0x3f4>
    2c54:	ldr	r0, [sp, #384]	; 0x180
    2c58:	bl	3b14 <flatbuffers_string_len>
    2c5c:	cmp	r0, #9
    2c60:	beq	2c80 <verify_monster+0x410>
    2c64:	movw	r0, #0
    2c68:	movt	r0, #0
    2c6c:	bl	0 <printf>
    2c70:	mvn	lr, #0
    2c74:	str	lr, [sp, #428]	; 0x1ac
    2c78:	str	r0, [sp, #208]	; 0xd0
    2c7c:	b	38a8 <verify_monster+0x1038>
    2c80:	ldr	r0, [sp, #420]	; 0x1a4
    2c84:	bl	3b64 <MyGame_Example_Monster_color>
    2c88:	sxtb	r0, r0
    2c8c:	cmp	r0, #2
    2c90:	beq	2cb0 <verify_monster+0x440>
    2c94:	movw	r0, #0
    2c98:	movt	r0, #0
    2c9c:	bl	0 <printf>
    2ca0:	mvn	lr, #0
    2ca4:	str	lr, [sp, #428]	; 0x1ac
    2ca8:	str	r0, [sp, #204]	; 0xcc
    2cac:	b	38a8 <verify_monster+0x1038>
    2cb0:	movw	r0, #2
    2cb4:	sxtb	r0, r0
    2cb8:	bl	3c4c <MyGame_Example_Color_name>
    2cbc:	movw	r1, #0
    2cc0:	movt	r1, #0
    2cc4:	bl	0 <strcmp>
    2cc8:	cmp	r0, #0
    2ccc:	beq	2cec <verify_monster+0x47c>
    2cd0:	movw	r0, #0
    2cd4:	movt	r0, #0
    2cd8:	bl	0 <printf>
    2cdc:	mvn	lr, #0
    2ce0:	str	lr, [sp, #428]	; 0x1ac
    2ce4:	str	r0, [sp, #200]	; 0xc8
    2ce8:	b	38a8 <verify_monster+0x1038>
    2cec:	movw	r0, #2
    2cf0:	sxtb	r0, r0
    2cf4:	bl	3cd0 <MyGame_Example_Color_is_known_value>
    2cf8:	cmp	r0, #0
    2cfc:	bne	2d1c <verify_monster+0x4ac>
    2d00:	movw	r0, #0
    2d04:	movt	r0, #0
    2d08:	bl	0 <printf>
    2d0c:	mvn	lr, #0
    2d10:	str	lr, [sp, #428]	; 0x1ac
    2d14:	str	r0, [sp, #196]	; 0xc4
    2d18:	b	38a8 <verify_monster+0x1038>
    2d1c:	movw	r0, #1
    2d20:	sxtb	r0, r0
    2d24:	bl	3cd0 <MyGame_Example_Color_is_known_value>
    2d28:	cmp	r0, #0
    2d2c:	bne	2d4c <verify_monster+0x4dc>
    2d30:	movw	r0, #0
    2d34:	movt	r0, #0
    2d38:	bl	0 <printf>
    2d3c:	mvn	lr, #0
    2d40:	str	lr, [sp, #428]	; 0x1ac
    2d44:	str	r0, [sp, #192]	; 0xc0
    2d48:	b	38a8 <verify_monster+0x1038>
    2d4c:	movw	r0, #4
    2d50:	sxtb	r0, r0
    2d54:	bl	3cd0 <MyGame_Example_Color_is_known_value>
    2d58:	cmp	r0, #0
    2d5c:	beq	2d7c <verify_monster+0x50c>
    2d60:	movw	r0, #0
    2d64:	movt	r0, #0
    2d68:	bl	0 <printf>
    2d6c:	mvn	lr, #0
    2d70:	str	lr, [sp, #428]	; 0x1ac
    2d74:	str	r0, [sp, #188]	; 0xbc
    2d78:	b	38a8 <verify_monster+0x1038>
    2d7c:	movw	r0, #8
    2d80:	sxtb	r0, r0
    2d84:	bl	3cd0 <MyGame_Example_Color_is_known_value>
    2d88:	cmp	r0, #0
    2d8c:	bne	2dac <verify_monster+0x53c>
    2d90:	movw	r0, #0
    2d94:	movt	r0, #0
    2d98:	bl	0 <printf>
    2d9c:	mvn	lr, #0
    2da0:	str	lr, [sp, #428]	; 0x1ac
    2da4:	str	r0, [sp, #184]	; 0xb8
    2da8:	b	38a8 <verify_monster+0x1038>
    2dac:	movw	r0, #9
    2db0:	sxtb	r0, r0
    2db4:	bl	3cd0 <MyGame_Example_Color_is_known_value>
    2db8:	cmp	r0, #0
    2dbc:	beq	2ddc <verify_monster+0x56c>
    2dc0:	movw	r0, #0
    2dc4:	movt	r0, #0
    2dc8:	bl	0 <printf>
    2dcc:	mvn	lr, #0
    2dd0:	str	lr, [sp, #428]	; 0x1ac
    2dd4:	str	r0, [sp, #180]	; 0xb4
    2dd8:	b	38a8 <verify_monster+0x1038>
    2ddc:	movw	r0, #1
    2de0:	and	r0, r0, #255	; 0xff
    2de4:	bl	3d44 <MyGame_Example_Any_is_known_type>
    2de8:	cmp	r0, #0
    2dec:	bne	2e0c <verify_monster+0x59c>
    2df0:	movw	r0, #0
    2df4:	movt	r0, #0
    2df8:	bl	0 <printf>
    2dfc:	mvn	lr, #0
    2e00:	str	lr, [sp, #428]	; 0x1ac
    2e04:	str	r0, [sp, #176]	; 0xb0
    2e08:	b	38a8 <verify_monster+0x1038>
    2e0c:	movw	r0, #42	; 0x2a
    2e10:	and	r0, r0, #255	; 0xff
    2e14:	bl	3d44 <MyGame_Example_Any_is_known_type>
    2e18:	cmp	r0, #0
    2e1c:	beq	2e3c <verify_monster+0x5cc>
    2e20:	movw	r0, #0
    2e24:	movt	r0, #0
    2e28:	bl	0 <printf>
    2e2c:	mvn	lr, #0
    2e30:	str	lr, [sp, #428]	; 0x1ac
    2e34:	str	r0, [sp, #172]	; 0xac
    2e38:	b	38a8 <verify_monster+0x1038>
    2e3c:	ldr	r0, [sp, #420]	; 0x1a4
    2e40:	bl	3dd4 <MyGame_Example_Monster_inventory>
    2e44:	str	r0, [sp, #288]	; 0x120
    2e48:	ldr	r0, [sp, #288]	; 0x120
    2e4c:	bl	3ed0 <flatbuffers_uint8_vec_len>
    2e50:	cmp	r0, #10
    2e54:	beq	2e78 <verify_monster+0x608>
    2e58:	movw	r0, #0
    2e5c:	movt	r0, #0
    2e60:	bl	0 <printf>
    2e64:	mvn	lr, #0
    2e68:	str	lr, [sp, #428]	; 0x1ac
    2e6c:	str	r0, [sp, #168]	; 0xa8
    2e70:	b	38a8 <verify_monster+0x1038>
    2e74:	.word	0xc04ccccd
    2e78:	movw	r0, #0
    2e7c:	str	r0, [sp, #284]	; 0x11c
    2e80:	ldr	r0, [sp, #284]	; 0x11c
    2e84:	ldr	r1, [sp, #288]	; 0x120
    2e88:	str	r0, [sp, #164]	; 0xa4
    2e8c:	mov	r0, r1
    2e90:	bl	3ed0 <flatbuffers_uint8_vec_len>
    2e94:	ldr	r1, [sp, #164]	; 0xa4
    2e98:	cmp	r1, r0
    2e9c:	bcs	2ef0 <verify_monster+0x680>
    2ea0:	ldr	r0, [sp, #288]	; 0x120
    2ea4:	ldr	r1, [sp, #284]	; 0x11c
    2ea8:	bl	3ef0 <flatbuffers_uint8_vec_at>
    2eac:	and	r0, r0, #255	; 0xff
    2eb0:	ldr	r1, [sp, #284]	; 0x11c
    2eb4:	cmp	r0, r1
    2eb8:	beq	2edc <verify_monster+0x66c>
    2ebc:	ldr	r1, [sp, #284]	; 0x11c
    2ec0:	movw	r0, #0
    2ec4:	movt	r0, #0
    2ec8:	bl	0 <printf>
    2ecc:	mvn	r1, #0
    2ed0:	str	r1, [sp, #428]	; 0x1ac
    2ed4:	str	r0, [sp, #160]	; 0xa0
    2ed8:	b	38a8 <verify_monster+0x1038>
    2edc:	b	2ee0 <verify_monster+0x670>
    2ee0:	ldr	r0, [sp, #284]	; 0x11c
    2ee4:	add	r0, r0, #1
    2ee8:	str	r0, [sp, #284]	; 0x11c
    2eec:	b	2e80 <verify_monster+0x610>
    2ef0:	ldr	r0, [sp, #420]	; 0x1a4
    2ef4:	bl	3f5c <MyGame_Example_Monster_mana>
    2ef8:	sxth	r0, r0
    2efc:	cmp	r0, #150	; 0x96
    2f00:	beq	2f20 <verify_monster+0x6b0>
    2f04:	movw	r0, #0
    2f08:	movt	r0, #0
    2f0c:	bl	0 <printf>
    2f10:	mvn	lr, #0
    2f14:	str	lr, [sp, #428]	; 0x1ac
    2f18:	str	r0, [sp, #156]	; 0x9c
    2f1c:	b	38a8 <verify_monster+0x1038>
    2f20:	ldr	r0, [sp, #420]	; 0x1a4
    2f24:	bl	4044 <MyGame_Example_Monster_mana_is_present>
    2f28:	cmp	r0, #0
    2f2c:	beq	2f4c <verify_monster+0x6dc>
    2f30:	movw	r0, #0
    2f34:	movt	r0, #0
    2f38:	bl	0 <printf>
    2f3c:	mvn	lr, #0
    2f40:	str	lr, [sp, #428]	; 0x1ac
    2f44:	str	r0, [sp, #152]	; 0x98
    2f48:	b	38a8 <verify_monster+0x1038>
    2f4c:	ldr	r0, [sp, #420]	; 0x1a4
    2f50:	bl	3e0 <MyGame_Example_Monster_hp_is_present>
    2f54:	cmp	r0, #0
    2f58:	bne	2f78 <verify_monster+0x708>
    2f5c:	movw	r0, #0
    2f60:	movt	r0, #0
    2f64:	bl	0 <printf>
    2f68:	mvn	lr, #0
    2f6c:	str	lr, [sp, #428]	; 0x1ac
    2f70:	str	r0, [sp, #148]	; 0x94
    2f74:	b	38a8 <verify_monster+0x1038>
    2f78:	ldr	r0, [sp, #420]	; 0x1a4
    2f7c:	bl	4a0 <MyGame_Example_Monster_pos_is_present>
    2f80:	cmp	r0, #0
    2f84:	bne	2fa4 <verify_monster+0x734>
    2f88:	movw	r0, #0
    2f8c:	movt	r0, #0
    2f90:	bl	0 <printf>
    2f94:	mvn	lr, #0
    2f98:	str	lr, [sp, #428]	; 0x1ac
    2f9c:	str	r0, [sp, #144]	; 0x90
    2fa0:	b	38a8 <verify_monster+0x1038>
    2fa4:	ldr	r0, [sp, #420]	; 0x1a4
    2fa8:	bl	4104 <MyGame_Example_Monster_test4>
    2fac:	str	r0, [sp, #348]	; 0x15c
    2fb0:	ldr	r0, [sp, #348]	; 0x15c
    2fb4:	bl	4200 <MyGame_Example_Test_vec_len>
    2fb8:	cmp	r0, #5
    2fbc:	beq	2fdc <verify_monster+0x76c>
    2fc0:	movw	r0, #0
    2fc4:	movt	r0, #0
    2fc8:	bl	0 <printf>
    2fcc:	mvn	lr, #0
    2fd0:	str	lr, [sp, #428]	; 0x1ac
    2fd4:	str	r0, [sp, #140]	; 0x8c
    2fd8:	b	38a8 <verify_monster+0x1038>
    2fdc:	movw	r0, #0
    2fe0:	str	r0, [sp, #284]	; 0x11c
    2fe4:	ldr	r0, [sp, #284]	; 0x11c
    2fe8:	cmp	r0, #5
    2fec:	bcs	30b4 <verify_monster+0x844>
    2ff0:	ldr	r0, [sp, #348]	; 0x15c
    2ff4:	ldr	r1, [sp, #284]	; 0x11c
    2ff8:	bl	4250 <MyGame_Example_Test_vec_at>
    2ffc:	str	r0, [sp, #324]	; 0x144
    3000:	ldr	r0, [sp, #284]	; 0x11c
    3004:	add	r1, sp, #328	; 0x148
    3008:	add	r0, r1, r0, lsl #2
    300c:	ldrsh	r0, [r0]
    3010:	ldr	r1, [sp, #324]	; 0x144
    3014:	str	r0, [sp, #136]	; 0x88
    3018:	mov	r0, r1
    301c:	bl	42b4 <MyGame_Example_Test_a>
    3020:	sxth	r0, r0
    3024:	ldr	r1, [sp, #136]	; 0x88
    3028:	cmp	r1, r0
    302c:	beq	3050 <verify_monster+0x7e0>
    3030:	ldr	r1, [sp, #284]	; 0x11c
    3034:	movw	r0, #0
    3038:	movt	r0, #0
    303c:	bl	0 <printf>
    3040:	mvn	r1, #0
    3044:	str	r1, [sp, #428]	; 0x1ac
    3048:	str	r0, [sp, #132]	; 0x84
    304c:	b	38a8 <verify_monster+0x1038>
    3050:	ldr	r0, [sp, #284]	; 0x11c
    3054:	add	r1, sp, #328	; 0x148
    3058:	add	r0, r1, r0, lsl #2
    305c:	ldrsb	r0, [r0, #2]
    3060:	ldr	r1, [sp, #324]	; 0x144
    3064:	str	r0, [sp, #128]	; 0x80
    3068:	mov	r0, r1
    306c:	bl	4304 <MyGame_Example_Test_b>
    3070:	sxtb	r0, r0
    3074:	ldr	r1, [sp, #128]	; 0x80
    3078:	cmp	r1, r0
    307c:	beq	30a0 <verify_monster+0x830>
    3080:	ldr	r1, [sp, #284]	; 0x11c
    3084:	movw	r0, #0
    3088:	movt	r0, #0
    308c:	bl	0 <printf>
    3090:	mvn	r1, #0
    3094:	str	r1, [sp, #428]	; 0x1ac
    3098:	str	r0, [sp, #124]	; 0x7c
    309c:	b	38a8 <verify_monster+0x1038>
    30a0:	b	30a4 <verify_monster+0x834>
    30a4:	ldr	r0, [sp, #284]	; 0x11c
    30a8:	add	r0, r0, #1
    30ac:	str	r0, [sp, #284]	; 0x11c
    30b0:	b	2fe4 <verify_monster+0x774>
    30b4:	ldr	r0, [sp, #420]	; 0x1a4
    30b8:	bl	4358 <MyGame_Example_Monster_testarrayoftables>
    30bc:	str	r0, [sp, #408]	; 0x198
    30c0:	ldr	r0, [sp, #408]	; 0x198
    30c4:	bl	4454 <MyGame_Example_Monster_vec_len>
    30c8:	cmp	r0, #8
    30cc:	beq	30ec <verify_monster+0x87c>
    30d0:	movw	r0, #0
    30d4:	movt	r0, #0
    30d8:	bl	0 <printf>
    30dc:	mvn	lr, #0
    30e0:	str	lr, [sp, #428]	; 0x1ac
    30e4:	str	r0, [sp, #120]	; 0x78
    30e8:	b	38a8 <verify_monster+0x1038>
    30ec:	ldr	r0, [sp, #408]	; 0x198
    30f0:	movw	r1, #5
    30f4:	bl	44a4 <MyGame_Example_Monster_vec_at>
    30f8:	str	r0, [sp, #416]	; 0x1a0
    30fc:	ldr	r0, [sp, #416]	; 0x1a0
    3100:	movw	r1, #0
    3104:	cmp	r0, r1
    3108:	beq	3110 <verify_monster+0x8a0>
    310c:	b	3130 <verify_monster+0x8c0>
    3110:	movw	r0, #0
    3114:	movt	r0, #0
    3118:	movw	r1, #0
    311c:	movt	r1, #0
    3120:	movw	r2, #662	; 0x296
    3124:	movw	r3, #0
    3128:	movt	r3, #0
    312c:	bl	0 <__assert_fail>
    3130:	ldr	r0, [sp, #416]	; 0x1a0
    3134:	bl	3a0c <MyGame_Example_Monster_name>
    3138:	str	r0, [sp, #388]	; 0x184
    313c:	ldr	r0, [sp, #388]	; 0x184
    3140:	movw	r1, #0
    3144:	movt	r1, #0
    3148:	bl	0 <strcmp>
    314c:	cmp	r0, #0
    3150:	beq	3170 <verify_monster+0x900>
    3154:	movw	r0, #0
    3158:	movt	r0, #0
    315c:	bl	0 <printf>
    3160:	mvn	lr, #0
    3164:	str	lr, [sp, #428]	; 0x1ac
    3168:	str	r0, [sp, #116]	; 0x74
    316c:	b	38a8 <verify_monster+0x1038>
    3170:	ldr	r0, [sp, #408]	; 0x198
    3174:	movw	r1, #1
    3178:	bl	44a4 <MyGame_Example_Monster_vec_at>
    317c:	str	r0, [sp, #412]	; 0x19c
    3180:	ldr	r0, [sp, #412]	; 0x19c
    3184:	ldr	r1, [sp, #416]	; 0x1a0
    3188:	cmp	r0, r1
    318c:	beq	31ac <verify_monster+0x93c>
    3190:	movw	r0, #0
    3194:	movt	r0, #0
    3198:	bl	0 <printf>
    319c:	mvn	lr, #0
    31a0:	str	lr, [sp, #428]	; 0x1ac
    31a4:	str	r0, [sp, #112]	; 0x70
    31a8:	b	38a8 <verify_monster+0x1038>
    31ac:	ldr	r0, [sp, #412]	; 0x19c
    31b0:	bl	3a0c <MyGame_Example_Monster_name>
    31b4:	str	r0, [sp, #388]	; 0x184
    31b8:	ldr	r0, [sp, #388]	; 0x184
    31bc:	movw	r1, #0
    31c0:	movt	r1, #0
    31c4:	bl	0 <strcmp>
    31c8:	cmp	r0, #0
    31cc:	beq	31f0 <verify_monster+0x980>
    31d0:	ldr	r1, [sp, #388]	; 0x184
    31d4:	movw	r0, #0
    31d8:	movt	r0, #0
    31dc:	bl	0 <printf>
    31e0:	mvn	r1, #0
    31e4:	str	r1, [sp, #428]	; 0x1ac
    31e8:	str	r0, [sp, #108]	; 0x6c
    31ec:	b	38a8 <verify_monster+0x1038>
    31f0:	ldr	r0, [sp, #408]	; 0x198
    31f4:	movw	r1, #2
    31f8:	bl	44a4 <MyGame_Example_Monster_vec_at>
    31fc:	str	r0, [sp, #416]	; 0x1a0
    3200:	ldr	r0, [sp, #416]	; 0x1a0
    3204:	bl	3a0c <MyGame_Example_Monster_name>
    3208:	str	r0, [sp, #388]	; 0x184
    320c:	ldr	r0, [sp, #388]	; 0x184
    3210:	movw	r1, #0
    3214:	movt	r1, #0
    3218:	bl	0 <strcmp>
    321c:	cmp	r0, #0
    3220:	beq	3244 <verify_monster+0x9d4>
    3224:	ldr	r1, [sp, #388]	; 0x184
    3228:	movw	r0, #0
    322c:	movt	r0, #0
    3230:	bl	0 <printf>
    3234:	mvn	r1, #0
    3238:	str	r1, [sp, #428]	; 0x1ac
    323c:	str	r0, [sp, #104]	; 0x68
    3240:	b	38a8 <verify_monster+0x1038>
    3244:	ldr	r0, [sp, #408]	; 0x198
    3248:	movw	r1, #0
    324c:	bl	44a4 <MyGame_Example_Monster_vec_at>
    3250:	str	r0, [sp, #416]	; 0x1a0
    3254:	ldr	r0, [sp, #416]	; 0x1a0
    3258:	bl	3a0c <MyGame_Example_Monster_name>
    325c:	str	r0, [sp, #388]	; 0x184
    3260:	ldr	r0, [sp, #388]	; 0x184
    3264:	movw	r1, #0
    3268:	movt	r1, #0
    326c:	bl	0 <strcmp>
    3270:	cmp	r0, #0
    3274:	beq	3298 <verify_monster+0xa28>
    3278:	ldr	r1, [sp, #388]	; 0x184
    327c:	movw	r0, #0
    3280:	movt	r0, #0
    3284:	bl	0 <printf>
    3288:	mvn	r1, #0
    328c:	str	r1, [sp, #428]	; 0x1ac
    3290:	str	r0, [sp, #100]	; 0x64
    3294:	b	38a8 <verify_monster+0x1038>
    3298:	ldr	r0, [sp, #408]	; 0x198
    329c:	movw	r1, #3
    32a0:	bl	44a4 <MyGame_Example_Monster_vec_at>
    32a4:	str	r0, [sp, #416]	; 0x1a0
    32a8:	ldr	r0, [sp, #416]	; 0x1a0
    32ac:	bl	3a0c <MyGame_Example_Monster_name>
    32b0:	str	r0, [sp, #388]	; 0x184
    32b4:	ldr	r0, [sp, #388]	; 0x184
    32b8:	movw	r1, #0
    32bc:	movt	r1, #0
    32c0:	bl	0 <strcmp>
    32c4:	cmp	r0, #0
    32c8:	beq	32ec <verify_monster+0xa7c>
    32cc:	ldr	r1, [sp, #388]	; 0x184
    32d0:	movw	r0, #0
    32d4:	movt	r0, #0
    32d8:	bl	0 <printf>
    32dc:	mvn	r1, #0
    32e0:	str	r1, [sp, #428]	; 0x1ac
    32e4:	str	r0, [sp, #96]	; 0x60
    32e8:	b	38a8 <verify_monster+0x1038>
    32ec:	ldr	r0, [sp, #408]	; 0x198
    32f0:	movw	r1, #4
    32f4:	bl	44a4 <MyGame_Example_Monster_vec_at>
    32f8:	str	r0, [sp, #416]	; 0x1a0
    32fc:	ldr	r0, [sp, #416]	; 0x1a0
    3300:	bl	3a0c <MyGame_Example_Monster_name>
    3304:	str	r0, [sp, #388]	; 0x184
    3308:	ldr	r0, [sp, #388]	; 0x184
    330c:	movw	r1, #0
    3310:	movt	r1, #0
    3314:	bl	0 <strcmp>
    3318:	cmp	r0, #0
    331c:	beq	3340 <verify_monster+0xad0>
    3320:	ldr	r1, [sp, #388]	; 0x184
    3324:	movw	r0, #0
    3328:	movt	r0, #0
    332c:	bl	0 <printf>
    3330:	mvn	r1, #0
    3334:	str	r1, [sp, #428]	; 0x1ac
    3338:	str	r0, [sp, #92]	; 0x5c
    333c:	b	38a8 <verify_monster+0x1038>
    3340:	ldr	r0, [sp, #408]	; 0x198
    3344:	movw	r1, #6
    3348:	bl	44a4 <MyGame_Example_Monster_vec_at>
    334c:	str	r0, [sp, #416]	; 0x1a0
    3350:	ldr	r0, [sp, #416]	; 0x1a0
    3354:	bl	3a0c <MyGame_Example_Monster_name>
    3358:	str	r0, [sp, #388]	; 0x184
    335c:	ldr	r0, [sp, #388]	; 0x184
    3360:	movw	r1, #0
    3364:	movt	r1, #0
    3368:	bl	0 <strcmp>
    336c:	cmp	r0, #0
    3370:	beq	3394 <verify_monster+0xb24>
    3374:	ldr	r1, [sp, #388]	; 0x184
    3378:	movw	r0, #0
    337c:	movt	r0, #0
    3380:	bl	0 <printf>
    3384:	mvn	r1, #0
    3388:	str	r1, [sp, #428]	; 0x1ac
    338c:	str	r0, [sp, #88]	; 0x58
    3390:	b	38a8 <verify_monster+0x1038>
    3394:	ldr	r0, [sp, #408]	; 0x198
    3398:	movw	r1, #7
    339c:	bl	44a4 <MyGame_Example_Monster_vec_at>
    33a0:	str	r0, [sp, #416]	; 0x1a0
    33a4:	ldr	r0, [sp, #416]	; 0x1a0
    33a8:	bl	3a0c <MyGame_Example_Monster_name>
    33ac:	str	r0, [sp, #388]	; 0x184
    33b0:	ldr	r0, [sp, #388]	; 0x184
    33b4:	movw	r1, #0
    33b8:	movt	r1, #0
    33bc:	bl	0 <strcmp>
    33c0:	cmp	r0, #0
    33c4:	beq	33e8 <verify_monster+0xb78>
    33c8:	ldr	r1, [sp, #388]	; 0x184
    33cc:	movw	r0, #0
    33d0:	movt	r0, #0
    33d4:	bl	0 <printf>
    33d8:	mvn	r1, #0
    33dc:	str	r1, [sp, #428]	; 0x1ac
    33e0:	str	r0, [sp, #84]	; 0x54
    33e4:	b	38a8 <verify_monster+0x1038>
    33e8:	ldr	r0, [sp, #420]	; 0x1a4
    33ec:	bl	4528 <MyGame_Example_Monster_testarrayofstring>
    33f0:	str	r0, [sp, #320]	; 0x140
    33f4:	ldr	r0, [sp, #320]	; 0x140
    33f8:	bl	4624 <flatbuffers_string_vec_len>
    33fc:	cmp	r0, #3
    3400:	beq	3420 <verify_monster+0xbb0>
    3404:	movw	r0, #0
    3408:	movt	r0, #0
    340c:	bl	0 <printf>
    3410:	mvn	lr, #0
    3414:	str	lr, [sp, #428]	; 0x1ac
    3418:	str	r0, [sp, #80]	; 0x50
    341c:	b	38a8 <verify_monster+0x1038>
    3420:	ldr	r0, [sp, #320]	; 0x140
    3424:	movw	r1, #0
    3428:	bl	4674 <flatbuffers_string_vec_at>
    342c:	movw	r1, #0
    3430:	movt	r1, #0
    3434:	bl	0 <strcmp>
    3438:	cmp	r0, #0
    343c:	beq	345c <verify_monster+0xbec>
    3440:	movw	r0, #0
    3444:	movt	r0, #0
    3448:	bl	0 <printf>
    344c:	mvn	lr, #0
    3450:	str	lr, [sp, #428]	; 0x1ac
    3454:	str	r0, [sp, #76]	; 0x4c
    3458:	b	38a8 <verify_monster+0x1038>
    345c:	ldr	r0, [sp, #320]	; 0x140
    3460:	movw	r1, #1
    3464:	bl	4674 <flatbuffers_string_vec_at>
    3468:	str	r0, [sp, #316]	; 0x13c
    346c:	ldr	r0, [sp, #316]	; 0x13c
    3470:	bl	3b14 <flatbuffers_string_len>
    3474:	cmp	r0, #2
    3478:	beq	3498 <verify_monster+0xc28>
    347c:	movw	r0, #0
    3480:	movt	r0, #0
    3484:	bl	0 <printf>
    3488:	mvn	lr, #0
    348c:	str	lr, [sp, #428]	; 0x1ac
    3490:	str	r0, [sp, #72]	; 0x48
    3494:	b	38a8 <verify_monster+0x1038>
    3498:	ldr	r0, [sp, #316]	; 0x13c
    349c:	ldrh	r0, [r0]
    34a0:	sub	r1, r0, #44	; 0x2c
    34a4:	cmp	r0, #44	; 0x2c
    34a8:	movwne	r1, #1
    34ac:	cmp	r1, #0
    34b0:	beq	34d0 <verify_monster+0xc60>
    34b4:	movw	r0, #0
    34b8:	movt	r0, #0
    34bc:	bl	0 <printf>
    34c0:	mvn	lr, #0
    34c4:	str	lr, [sp, #428]	; 0x1ac
    34c8:	str	r0, [sp, #68]	; 0x44
    34cc:	b	38a8 <verify_monster+0x1038>
    34d0:	ldr	r0, [sp, #320]	; 0x140
    34d4:	movw	r1, #2
    34d8:	bl	4674 <flatbuffers_string_vec_at>
    34dc:	movw	r1, #0
    34e0:	movt	r1, #0
    34e4:	bl	0 <strcmp>
    34e8:	cmp	r0, #0
    34ec:	beq	350c <verify_monster+0xc9c>
    34f0:	movw	r0, #0
    34f4:	movt	r0, #0
    34f8:	bl	0 <printf>
    34fc:	mvn	lr, #0
    3500:	str	lr, [sp, #428]	; 0x1ac
    3504:	str	r0, [sp, #64]	; 0x40
    3508:	b	38a8 <verify_monster+0x1038>
    350c:	ldr	r0, [sp, #420]	; 0x1a4
    3510:	bl	46fc <MyGame_Example_Monster_testarrayofbools_is_present>
    3514:	cmp	r0, #0
    3518:	bne	3538 <verify_monster+0xcc8>
    351c:	movw	r0, #0
    3520:	movt	r0, #0
    3524:	bl	0 <printf>
    3528:	mvn	lr, #0
    352c:	str	lr, [sp, #428]	; 0x1ac
    3530:	str	r0, [sp, #60]	; 0x3c
    3534:	b	38a8 <verify_monster+0x1038>
    3538:	ldr	r0, [sp, #420]	; 0x1a4
    353c:	bl	47bc <MyGame_Example_Monster_testarrayofbools>
    3540:	str	r0, [sp, #312]	; 0x138
    3544:	ldr	r0, [sp, #312]	; 0x138
    3548:	bl	48b8 <flatbuffers_bool_vec_len>
    354c:	cmp	r0, #4
    3550:	beq	3570 <verify_monster+0xd00>
    3554:	movw	r0, #0
    3558:	movt	r0, #0
    355c:	bl	0 <printf>
    3560:	mvn	lr, #0
    3564:	str	lr, [sp, #428]	; 0x1ac
    3568:	str	r0, [sp, #56]	; 0x38
    356c:	b	38a8 <verify_monster+0x1038>
    3570:	movw	r0, #0
    3574:	str	r0, [sp, #284]	; 0x11c
    3578:	ldr	r0, [sp, #284]	; 0x11c
    357c:	cmp	r0, #4
    3580:	bcs	35dc <verify_monster+0xd6c>
    3584:	ldr	r0, [sp, #312]	; 0x138
    3588:	ldr	r1, [sp, #284]	; 0x11c
    358c:	bl	48d8 <flatbuffers_bool_vec_at>
    3590:	ldr	r1, [sp, #284]	; 0x11c
    3594:	add	lr, sp, #292	; 0x124
    3598:	add	r1, lr, r1, lsl #2
    359c:	ldr	r1, [r1]
    35a0:	cmp	r0, r1
    35a4:	beq	35c8 <verify_monster+0xd58>
    35a8:	ldr	r1, [sp, #284]	; 0x11c
    35ac:	movw	r0, #0
    35b0:	movt	r0, #0
    35b4:	bl	0 <printf>
    35b8:	mvn	r1, #0
    35bc:	str	r1, [sp, #428]	; 0x1ac
    35c0:	str	r0, [sp, #52]	; 0x34
    35c4:	b	38a8 <verify_monster+0x1038>
    35c8:	b	35cc <verify_monster+0xd5c>
    35cc:	ldr	r0, [sp, #284]	; 0x11c
    35d0:	add	r0, r0, #1
    35d4:	str	r0, [sp, #284]	; 0x11c
    35d8:	b	3578 <verify_monster+0xd08>
    35dc:	ldr	r0, [sp, #420]	; 0x1a4
    35e0:	bl	4944 <MyGame_Example_Monster_test_type>
    35e4:	strb	r0, [sp, #407]	; 0x197
    35e8:	ldrb	r0, [sp, #407]	; 0x197
    35ec:	cmp	r0, #1
    35f0:	beq	3610 <verify_monster+0xda0>
    35f4:	movw	r0, #0
    35f8:	movt	r0, #0
    35fc:	bl	0 <printf>
    3600:	mvn	lr, #0
    3604:	str	lr, [sp, #428]	; 0x1ac
    3608:	str	r0, [sp, #48]	; 0x30
    360c:	b	38a8 <verify_monster+0x1038>
    3610:	ldr	r0, [sp, #420]	; 0x1a4
    3614:	bl	4a2c <MyGame_Example_Monster_test>
    3618:	str	r0, [sp, #416]	; 0x1a0
    361c:	ldr	r0, [sp, #416]	; 0x1a0
    3620:	bl	3a0c <MyGame_Example_Monster_name>
    3624:	movw	r1, #0
    3628:	movt	r1, #0
    362c:	bl	0 <strcmp>
    3630:	cmp	r0, #0
    3634:	beq	3654 <verify_monster+0xde4>
    3638:	movw	r0, #0
    363c:	movt	r0, #0
    3640:	bl	0 <printf>
    3644:	mvn	lr, #0
    3648:	str	lr, [sp, #428]	; 0x1ac
    364c:	str	r0, [sp, #44]	; 0x2c
    3650:	b	38a8 <verify_monster+0x1038>
    3654:	ldr	r0, [sp, #420]	; 0x1a4
    3658:	bl	4b24 <MyGame_Example_Monster_enemy>
    365c:	str	r0, [sp, #416]	; 0x1a0
    3660:	ldr	r0, [sp, #416]	; 0x1a0
    3664:	bl	3a0c <MyGame_Example_Monster_name>
    3668:	movw	r1, #0
    366c:	movt	r1, #0
    3670:	bl	0 <strcmp>
    3674:	cmp	r0, #0
    3678:	beq	3698 <verify_monster+0xe28>
    367c:	movw	r0, #0
    3680:	movt	r0, #0
    3684:	bl	0 <printf>
    3688:	mvn	lr, #0
    368c:	str	lr, [sp, #428]	; 0x1ac
    3690:	str	r0, [sp, #40]	; 0x28
    3694:	b	38a8 <verify_monster+0x1038>
    3698:	ldr	r0, [sp, #416]	; 0x1a0
    369c:	bl	4944 <MyGame_Example_Monster_test_type>
    36a0:	and	r0, r0, #255	; 0xff
    36a4:	cmp	r0, #0
    36a8:	beq	36c8 <verify_monster+0xe58>
    36ac:	movw	r0, #0
    36b0:	movt	r0, #0
    36b4:	bl	0 <printf>
    36b8:	mvn	lr, #0
    36bc:	str	lr, [sp, #428]	; 0x1ac
    36c0:	str	r0, [sp, #36]	; 0x24
    36c4:	b	38a8 <verify_monster+0x1038>
    36c8:	ldr	r1, [sp, #420]	; 0x1a4
    36cc:	add	r0, sp, #276	; 0x114
    36d0:	bl	4c1c <MyGame_Example_Monster_test_union>
    36d4:	ldr	r0, [sp, #276]	; 0x114
    36d8:	str	r0, [sp, #396]	; 0x18c
    36dc:	ldr	r0, [sp, #280]	; 0x118
    36e0:	str	r0, [sp, #400]	; 0x190
    36e4:	ldrb	r0, [sp, #396]	; 0x18c
    36e8:	ldrb	r1, [sp, #407]	; 0x197
    36ec:	cmp	r0, r1
    36f0:	beq	3710 <verify_monster+0xea0>
    36f4:	movw	r0, #0
    36f8:	movt	r0, #0
    36fc:	bl	0 <printf>
    3700:	mvn	lr, #0
    3704:	str	lr, [sp, #428]	; 0x1ac
    3708:	str	r0, [sp, #32]
    370c:	b	38a8 <verify_monster+0x1038>
    3710:	ldr	r0, [sp, #400]	; 0x190
    3714:	ldr	r1, [sp, #420]	; 0x1a4
    3718:	str	r0, [sp, #28]
    371c:	mov	r0, r1
    3720:	bl	4a2c <MyGame_Example_Monster_test>
    3724:	ldr	r1, [sp, #28]
    3728:	cmp	r1, r0
    372c:	beq	374c <verify_monster+0xedc>
    3730:	movw	r0, #0
    3734:	movt	r0, #0
    3738:	bl	0 <printf>
    373c:	mvn	lr, #0
    3740:	str	lr, [sp, #428]	; 0x1ac
    3744:	str	r0, [sp, #24]
    3748:	b	38a8 <verify_monster+0x1038>
    374c:	ldr	r0, [sp, #416]	; 0x1a0
    3750:	bl	4358 <MyGame_Example_Monster_testarrayoftables>
    3754:	str	r0, [sp, #408]	; 0x198
    3758:	ldr	r0, [sp, #408]	; 0x198
    375c:	bl	4454 <MyGame_Example_Monster_vec_len>
    3760:	str	r0, [sp, #284]	; 0x11c
    3764:	ldr	r0, [sp, #408]	; 0x198
    3768:	ldr	lr, [sp, #284]	; 0x11c
    376c:	sub	r1, lr, #1
    3770:	bl	44a4 <MyGame_Example_Monster_vec_at>
    3774:	str	r0, [sp, #416]	; 0x1a0
    3778:	ldr	r0, [sp, #416]	; 0x1a0
    377c:	bl	4944 <MyGame_Example_Monster_test_type>
    3780:	and	r0, r0, #255	; 0xff
    3784:	cmp	r0, #1
    3788:	beq	37a8 <verify_monster+0xf38>
    378c:	movw	r0, #0
    3790:	movt	r0, #0
    3794:	bl	0 <printf>
    3798:	mvn	lr, #0
    379c:	str	lr, [sp, #428]	; 0x1ac
    37a0:	str	r0, [sp, #20]
    37a4:	b	38a8 <verify_monster+0x1038>
    37a8:	ldr	r0, [sp, #416]	; 0x1a0
    37ac:	bl	4a2c <MyGame_Example_Monster_test>
    37b0:	str	r0, [sp, #416]	; 0x1a0
    37b4:	ldr	r0, [sp, #416]	; 0x1a0
    37b8:	bl	3a0c <MyGame_Example_Monster_name>
    37bc:	movw	r1, #0
    37c0:	movt	r1, #0
    37c4:	bl	0 <strcmp>
    37c8:	cmp	r0, #0
    37cc:	beq	37ec <verify_monster+0xf7c>
    37d0:	movw	r0, #0
    37d4:	movt	r0, #0
    37d8:	bl	0 <printf>
    37dc:	mvn	lr, #0
    37e0:	str	lr, [sp, #428]	; 0x1ac
    37e4:	str	r0, [sp, #16]
    37e8:	b	38a8 <verify_monster+0x1038>
    37ec:	ldr	r0, [sp, #420]	; 0x1a4
    37f0:	bl	4c80 <MyGame_Example_Monster_testbool>
    37f4:	sxtb	r0, r0
    37f8:	cmp	r0, #0
    37fc:	beq	381c <verify_monster+0xfac>
    3800:	movw	r0, #0
    3804:	movt	r0, #0
    3808:	bl	0 <printf>
    380c:	mvn	lr, #0
    3810:	str	lr, [sp, #428]	; 0x1ac
    3814:	str	r0, [sp, #12]
    3818:	b	38a8 <verify_monster+0x1038>
    381c:	ldr	r0, [sp, #420]	; 0x1a4
    3820:	bl	4d68 <MyGame_Example_Monster_testempty_is_present>
    3824:	cmp	r0, #0
    3828:	bne	3848 <verify_monster+0xfd8>
    382c:	movw	r0, #0
    3830:	movt	r0, #0
    3834:	bl	0 <printf>
    3838:	mvn	lr, #0
    383c:	str	lr, [sp, #428]	; 0x1ac
    3840:	str	r0, [sp, #8]
    3844:	b	38a8 <verify_monster+0x1038>
    3848:	ldr	r0, [sp, #420]	; 0x1a4
    384c:	bl	4e28 <MyGame_Example_Monster_testempty>
    3850:	str	r0, [sp, #308]	; 0x134
    3854:	ldr	r0, [sp, #308]	; 0x134
    3858:	bl	4f20 <MyGame_Example_Stat_id_is_present>
    385c:	cmp	r0, #0
    3860:	bne	3884 <verify_monster+0x1014>
    3864:	ldr	r0, [sp, #308]	; 0x134
    3868:	bl	4fe0 <MyGame_Example_Stat_val_is_present>
    386c:	cmp	r0, #0
    3870:	bne	3884 <verify_monster+0x1014>
    3874:	ldr	r0, [sp, #308]	; 0x134
    3878:	bl	50a0 <MyGame_Example_Stat_count_is_present>
    387c:	cmp	r0, #0
    3880:	beq	38a0 <verify_monster+0x1030>
    3884:	movw	r0, #0
    3888:	movt	r0, #0
    388c:	bl	0 <printf>
    3890:	mvn	lr, #0
    3894:	str	lr, [sp, #428]	; 0x1ac
    3898:	str	r0, [sp, #4]
    389c:	b	38a8 <verify_monster+0x1038>
    38a0:	movw	r0, #0
    38a4:	str	r0, [sp, #428]	; 0x1ac
    38a8:	ldr	r0, [sp, #428]	; 0x1ac
    38ac:	sub	sp, fp, #8
    38b0:	pop	{r4, r5, fp, pc}

000038b4 <MyGame_Example_Vec3_z>:
    38b4:	push	{fp, lr}
    38b8:	mov	fp, sp
    38bc:	sub	sp, sp, #8
    38c0:	str	r0, [sp, #4]
    38c4:	ldr	r0, [sp, #4]
    38c8:	movw	r1, #0
    38cc:	cmp	r0, r1
    38d0:	beq	38e8 <MyGame_Example_Vec3_z+0x34>
    38d4:	ldr	r0, [sp, #4]
    38d8:	add	r0, r0, #8
    38dc:	bl	10a50 <flatbuffers_float_read_from_pe>
    38e0:	vstr	s0, [sp]
    38e4:	b	38f4 <MyGame_Example_Vec3_z+0x40>
    38e8:	vldr	s0, [pc, #16]	; 3900 <MyGame_Example_Vec3_z+0x4c>
    38ec:	vstr	s0, [sp]
    38f0:	b	38f4 <MyGame_Example_Vec3_z+0x40>
    38f4:	vldr	s0, [sp]
    38f8:	mov	sp, fp
    38fc:	pop	{fp, pc}
    3900:	.word	0x00000000

00003904 <MyGame_Example_Vec3_clear>:
    3904:	push	{fp, lr}
    3908:	mov	fp, sp
    390c:	sub	sp, sp, #16
    3910:	str	r0, [fp, #-4]
    3914:	ldr	r0, [fp, #-4]
    3918:	str	r0, [sp, #8]
    391c:	bl	11f9c <MyGame_Example_Vec3__size>
    3920:	ldr	lr, [sp, #8]
    3924:	str	r0, [sp, #4]
    3928:	mov	r0, lr
    392c:	movw	r1, #0
    3930:	and	r1, r1, #255	; 0xff
    3934:	ldr	r2, [sp, #4]
    3938:	bl	0 <memset>
    393c:	ldr	r0, [sp, #8]
    3940:	mov	sp, fp
    3944:	pop	{fp, pc}

00003948 <MyGame_Example_Vec3_copy_from_pe>:
    3948:	push	{fp, lr}
    394c:	mov	fp, sp
    3950:	sub	sp, sp, #32
    3954:	str	r0, [fp, #-4]
    3958:	str	r1, [fp, #-8]
    395c:	ldr	r0, [fp, #-4]
    3960:	ldr	r1, [fp, #-8]
    3964:	bl	11fa4 <flatbuffers_float_copy_from_pe>
    3968:	ldr	r1, [fp, #-4]
    396c:	add	r1, r1, #4
    3970:	ldr	lr, [fp, #-8]
    3974:	add	lr, lr, #4
    3978:	str	r0, [fp, #-12]
    397c:	mov	r0, r1
    3980:	mov	r1, lr
    3984:	bl	11fa4 <flatbuffers_float_copy_from_pe>
    3988:	ldr	r1, [fp, #-4]
    398c:	add	r1, r1, #8
    3990:	ldr	lr, [fp, #-8]
    3994:	add	lr, lr, #8
    3998:	str	r0, [sp, #16]
    399c:	mov	r0, r1
    39a0:	mov	r1, lr
    39a4:	bl	11fa4 <flatbuffers_float_copy_from_pe>
    39a8:	ldr	r1, [fp, #-4]
    39ac:	add	r1, r1, #16
    39b0:	ldr	lr, [fp, #-8]
    39b4:	add	lr, lr, #16
    39b8:	str	r0, [sp, #12]
    39bc:	mov	r0, r1
    39c0:	mov	r1, lr
    39c4:	bl	11fd8 <flatbuffers_double_copy_from_pe>
    39c8:	ldr	r1, [fp, #-8]
    39cc:	ldrb	r1, [r1, #24]
    39d0:	ldr	lr, [fp, #-4]
    39d4:	strb	r1, [lr, #24]
    39d8:	ldr	r1, [fp, #-4]
    39dc:	add	r1, r1, #26
    39e0:	ldr	lr, [fp, #-8]
    39e4:	add	lr, lr, #26
    39e8:	str	r0, [sp, #8]
    39ec:	mov	r0, r1
    39f0:	mov	r1, lr
    39f4:	bl	1200c <MyGame_Example_Test_copy_from_pe>
    39f8:	ldr	r1, [fp, #-4]
    39fc:	str	r0, [sp, #4]
    3a00:	mov	r0, r1
    3a04:	mov	sp, fp
    3a08:	pop	{fp, pc}

00003a0c <MyGame_Example_Monster_name>:
    3a0c:	push	{fp, lr}
    3a10:	mov	fp, sp
    3a14:	sub	sp, sp, #24
    3a18:	str	r0, [fp, #-4]
    3a1c:	movw	r0, #0
    3a20:	strh	r0, [fp, #-10]
    3a24:	ldr	r0, [fp, #-4]
    3a28:	movw	r1, #0
    3a2c:	cmp	r0, r1
    3a30:	beq	3a3c <MyGame_Example_Monster_name+0x30>
    3a34:	b	3a38 <MyGame_Example_Monster_name+0x2c>
    3a38:	b	3a5c <MyGame_Example_Monster_name+0x50>
    3a3c:	movw	r0, #0
    3a40:	movt	r0, #0
    3a44:	movw	r1, #0
    3a48:	movt	r1, #0
    3a4c:	movw	r2, #699	; 0x2bb
    3a50:	movw	r3, #0
    3a54:	movt	r3, #0
    3a58:	bl	0 <__assert_fail>
    3a5c:	mov	r0, #3
    3a60:	strh	r0, [sp, #12]
    3a64:	ldr	r0, [fp, #-4]
    3a68:	str	r0, [sp, #4]
    3a6c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    3a70:	ldr	lr, [sp, #4]
    3a74:	sub	r0, lr, r0
    3a78:	str	r0, [sp, #8]
    3a7c:	ldr	r0, [sp, #8]
    3a80:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    3a84:	ldrh	lr, [sp, #12]
    3a88:	add	lr, lr, #3
    3a8c:	lsl	lr, lr, #1
    3a90:	cmp	r0, lr
    3a94:	bcc	3ab0 <MyGame_Example_Monster_name+0xa4>
    3a98:	ldr	r0, [sp, #8]
    3a9c:	ldrh	r1, [sp, #12]
    3aa0:	add	r0, r0, r1, lsl #1
    3aa4:	add	r0, r0, #4
    3aa8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    3aac:	strh	r0, [fp, #-10]
    3ab0:	ldrsh	r0, [fp, #-10]
    3ab4:	cmp	r0, #0
    3ab8:	beq	3af4 <MyGame_Example_Monster_name+0xe8>
    3abc:	ldr	r0, [fp, #-4]
    3ac0:	ldrh	r1, [fp, #-10]
    3ac4:	add	r0, r0, r1
    3ac8:	str	r0, [fp, #-8]
    3acc:	ldr	r0, [fp, #-8]
    3ad0:	add	r0, r0, #4
    3ad4:	ldr	r1, [fp, #-8]
    3ad8:	str	r0, [sp]
    3adc:	mov	r0, r1
    3ae0:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    3ae4:	ldr	r1, [sp]
    3ae8:	add	r0, r1, r0
    3aec:	mov	sp, fp
    3af0:	pop	{fp, pc}
    3af4:	movw	r0, #0
    3af8:	movt	r0, #0
    3afc:	movw	r1, #0
    3b00:	movt	r1, #0
    3b04:	movw	r2, #699	; 0x2bb
    3b08:	movw	r3, #0
    3b0c:	movt	r3, #0
    3b10:	bl	0 <__assert_fail>

00003b14 <flatbuffers_string_len>:
    3b14:	push	{fp, lr}
    3b18:	mov	fp, sp
    3b1c:	sub	sp, sp, #8
    3b20:	str	r0, [sp, #4]
    3b24:	ldr	r0, [sp, #4]
    3b28:	movw	r1, #0
    3b2c:	cmp	r0, r1
    3b30:	beq	3b4c <flatbuffers_string_len+0x38>
    3b34:	ldr	r0, [sp, #4]
    3b38:	mvn	r1, #3
    3b3c:	add	r0, r0, r1
    3b40:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    3b44:	str	r0, [sp]
    3b48:	b	3b58 <flatbuffers_string_len+0x44>
    3b4c:	movw	r0, #0
    3b50:	str	r0, [sp]
    3b54:	b	3b58 <flatbuffers_string_len+0x44>
    3b58:	ldr	r0, [sp]
    3b5c:	mov	sp, fp
    3b60:	pop	{fp, pc}

00003b64 <MyGame_Example_Monster_color>:
    3b64:	push	{fp, lr}
    3b68:	mov	fp, sp
    3b6c:	sub	sp, sp, #24
    3b70:	str	r0, [fp, #-4]
    3b74:	movw	r0, #0
    3b78:	strh	r0, [fp, #-6]
    3b7c:	ldr	r0, [fp, #-4]
    3b80:	movw	r1, #0
    3b84:	cmp	r0, r1
    3b88:	beq	3b94 <MyGame_Example_Monster_color+0x30>
    3b8c:	b	3b90 <MyGame_Example_Monster_color+0x2c>
    3b90:	b	3bb4 <MyGame_Example_Monster_color+0x50>
    3b94:	movw	r0, #0
    3b98:	movt	r0, #0
    3b9c:	movw	r1, #0
    3ba0:	movt	r1, #0
    3ba4:	movw	r2, #705	; 0x2c1
    3ba8:	movw	r3, #0
    3bac:	movt	r3, #0
    3bb0:	bl	0 <__assert_fail>
    3bb4:	mov	r0, #6
    3bb8:	strh	r0, [fp, #-8]
    3bbc:	ldr	r0, [fp, #-4]
    3bc0:	str	r0, [sp, #8]
    3bc4:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    3bc8:	ldr	lr, [sp, #8]
    3bcc:	sub	r0, lr, r0
    3bd0:	str	r0, [sp, #12]
    3bd4:	ldr	r0, [sp, #12]
    3bd8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    3bdc:	ldrh	lr, [fp, #-8]
    3be0:	add	lr, lr, #3
    3be4:	lsl	lr, lr, #1
    3be8:	cmp	r0, lr
    3bec:	bcc	3c08 <MyGame_Example_Monster_color+0xa4>
    3bf0:	ldr	r0, [sp, #12]
    3bf4:	ldrh	r1, [fp, #-8]
    3bf8:	add	r0, r0, r1, lsl #1
    3bfc:	add	r0, r0, #4
    3c00:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    3c04:	strh	r0, [fp, #-6]
    3c08:	ldrh	r0, [fp, #-6]
    3c0c:	cmp	r0, #0
    3c10:	beq	3c30 <MyGame_Example_Monster_color+0xcc>
    3c14:	ldr	r0, [fp, #-4]
    3c18:	ldrh	r1, [fp, #-6]
    3c1c:	add	r0, r0, r1
    3c20:	bl	12084 <MyGame_Example_Color_read_from_pe>
    3c24:	sxtb	r0, r0
    3c28:	str	r0, [sp, #4]
    3c2c:	b	3c3c <MyGame_Example_Monster_color+0xd8>
    3c30:	movw	r0, #8
    3c34:	str	r0, [sp, #4]
    3c38:	b	3c3c <MyGame_Example_Monster_color+0xd8>
    3c3c:	ldr	r0, [sp, #4]
    3c40:	sxtb	r0, r0
    3c44:	mov	sp, fp
    3c48:	pop	{fp, pc}

00003c4c <MyGame_Example_Color_name>:
    3c4c:	sub	sp, sp, #12
    3c50:	strb	r0, [sp, #7]
    3c54:	ldrsb	r0, [sp, #7]
    3c58:	cmp	r0, #1
    3c5c:	str	r0, [sp]
    3c60:	beq	3c88 <MyGame_Example_Color_name+0x3c>
    3c64:	b	3c68 <MyGame_Example_Color_name+0x1c>
    3c68:	ldr	r0, [sp]
    3c6c:	cmp	r0, #2
    3c70:	beq	3c98 <MyGame_Example_Color_name+0x4c>
    3c74:	b	3c78 <MyGame_Example_Color_name+0x2c>
    3c78:	ldr	r0, [sp]
    3c7c:	cmp	r0, #8
    3c80:	beq	3ca8 <MyGame_Example_Color_name+0x5c>
    3c84:	b	3cb8 <MyGame_Example_Color_name+0x6c>
    3c88:	movw	r0, #0
    3c8c:	movt	r0, #0
    3c90:	str	r0, [sp, #8]
    3c94:	b	3cc4 <MyGame_Example_Color_name+0x78>
    3c98:	movw	r0, #0
    3c9c:	movt	r0, #0
    3ca0:	str	r0, [sp, #8]
    3ca4:	b	3cc4 <MyGame_Example_Color_name+0x78>
    3ca8:	movw	r0, #0
    3cac:	movt	r0, #0
    3cb0:	str	r0, [sp, #8]
    3cb4:	b	3cc4 <MyGame_Example_Color_name+0x78>
    3cb8:	movw	r0, #0
    3cbc:	movt	r0, #0
    3cc0:	str	r0, [sp, #8]
    3cc4:	ldr	r0, [sp, #8]
    3cc8:	add	sp, sp, #12
    3ccc:	bx	lr

00003cd0 <MyGame_Example_Color_is_known_value>:
    3cd0:	sub	sp, sp, #12
    3cd4:	strb	r0, [sp, #7]
    3cd8:	ldrsb	r0, [sp, #7]
    3cdc:	cmp	r0, #1
    3ce0:	str	r0, [sp]
    3ce4:	beq	3d0c <MyGame_Example_Color_is_known_value+0x3c>
    3ce8:	b	3cec <MyGame_Example_Color_is_known_value+0x1c>
    3cec:	ldr	r0, [sp]
    3cf0:	cmp	r0, #2
    3cf4:	beq	3d18 <MyGame_Example_Color_is_known_value+0x48>
    3cf8:	b	3cfc <MyGame_Example_Color_is_known_value+0x2c>
    3cfc:	ldr	r0, [sp]
    3d00:	cmp	r0, #8
    3d04:	beq	3d24 <MyGame_Example_Color_is_known_value+0x54>
    3d08:	b	3d30 <MyGame_Example_Color_is_known_value+0x60>
    3d0c:	movw	r0, #1
    3d10:	str	r0, [sp, #8]
    3d14:	b	3d38 <MyGame_Example_Color_is_known_value+0x68>
    3d18:	movw	r0, #1
    3d1c:	str	r0, [sp, #8]
    3d20:	b	3d38 <MyGame_Example_Color_is_known_value+0x68>
    3d24:	movw	r0, #1
    3d28:	str	r0, [sp, #8]
    3d2c:	b	3d38 <MyGame_Example_Color_is_known_value+0x68>
    3d30:	movw	r0, #0
    3d34:	str	r0, [sp, #8]
    3d38:	ldr	r0, [sp, #8]
    3d3c:	add	sp, sp, #12
    3d40:	bx	lr

00003d44 <MyGame_Example_Any_is_known_type>:
    3d44:	sub	sp, sp, #12
    3d48:	strb	r0, [sp, #7]
    3d4c:	ldrb	r0, [sp, #7]
    3d50:	mov	r1, r0
    3d54:	cmp	r0, #4
    3d58:	str	r1, [sp]
    3d5c:	bhi	3dc0 <MyGame_Example_Any_is_known_type+0x7c>
    3d60:	add	r0, pc, #8
    3d64:	ldr	r1, [sp]
    3d68:	ldr	r0, [r0, r1, lsl #2]
    3d6c:	mov	pc, r0
    3d70:	.word	0x00003d84
    3d74:	.word	0x00003d90
    3d78:	.word	0x00003d9c
    3d7c:	.word	0x00003da8
    3d80:	.word	0x00003db4
    3d84:	movw	r0, #1
    3d88:	str	r0, [sp, #8]
    3d8c:	b	3dc8 <MyGame_Example_Any_is_known_type+0x84>
    3d90:	movw	r0, #1
    3d94:	str	r0, [sp, #8]
    3d98:	b	3dc8 <MyGame_Example_Any_is_known_type+0x84>
    3d9c:	movw	r0, #1
    3da0:	str	r0, [sp, #8]
    3da4:	b	3dc8 <MyGame_Example_Any_is_known_type+0x84>
    3da8:	movw	r0, #1
    3dac:	str	r0, [sp, #8]
    3db0:	b	3dc8 <MyGame_Example_Any_is_known_type+0x84>
    3db4:	movw	r0, #1
    3db8:	str	r0, [sp, #8]
    3dbc:	b	3dc8 <MyGame_Example_Any_is_known_type+0x84>
    3dc0:	movw	r0, #0
    3dc4:	str	r0, [sp, #8]
    3dc8:	ldr	r0, [sp, #8]
    3dcc:	add	sp, sp, #12
    3dd0:	bx	lr

00003dd4 <MyGame_Example_Monster_inventory>:
    3dd4:	push	{fp, lr}
    3dd8:	mov	fp, sp
    3ddc:	sub	sp, sp, #32
    3de0:	str	r0, [fp, #-8]
    3de4:	movw	r0, #0
    3de8:	strh	r0, [fp, #-14]
    3dec:	ldr	r0, [fp, #-8]
    3df0:	movw	r1, #0
    3df4:	cmp	r0, r1
    3df8:	beq	3e04 <MyGame_Example_Monster_inventory+0x30>
    3dfc:	b	3e00 <MyGame_Example_Monster_inventory+0x2c>
    3e00:	b	3e24 <MyGame_Example_Monster_inventory+0x50>
    3e04:	movw	r0, #0
    3e08:	movt	r0, #0
    3e0c:	movw	r1, #0
    3e10:	movt	r1, #0
    3e14:	movw	r2, #706	; 0x2c2
    3e18:	movw	r3, #0
    3e1c:	movt	r3, #0
    3e20:	bl	0 <__assert_fail>
    3e24:	mov	r0, #5
    3e28:	strh	r0, [sp, #16]
    3e2c:	ldr	r0, [fp, #-8]
    3e30:	str	r0, [sp, #8]
    3e34:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    3e38:	ldr	lr, [sp, #8]
    3e3c:	sub	r0, lr, r0
    3e40:	str	r0, [sp, #12]
    3e44:	ldr	r0, [sp, #12]
    3e48:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    3e4c:	ldrh	lr, [sp, #16]
    3e50:	add	lr, lr, #3
    3e54:	lsl	lr, lr, #1
    3e58:	cmp	r0, lr
    3e5c:	bcc	3e78 <MyGame_Example_Monster_inventory+0xa4>
    3e60:	ldr	r0, [sp, #12]
    3e64:	ldrh	r1, [sp, #16]
    3e68:	add	r0, r0, r1, lsl #1
    3e6c:	add	r0, r0, #4
    3e70:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    3e74:	strh	r0, [fp, #-14]
    3e78:	ldrsh	r0, [fp, #-14]
    3e7c:	cmp	r0, #0
    3e80:	beq	3ebc <MyGame_Example_Monster_inventory+0xe8>
    3e84:	ldr	r0, [fp, #-8]
    3e88:	ldrh	r1, [fp, #-14]
    3e8c:	add	r0, r0, r1
    3e90:	str	r0, [fp, #-12]
    3e94:	ldr	r0, [fp, #-12]
    3e98:	add	r0, r0, #4
    3e9c:	ldr	r1, [fp, #-12]
    3ea0:	str	r0, [sp, #4]
    3ea4:	mov	r0, r1
    3ea8:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    3eac:	ldr	r1, [sp, #4]
    3eb0:	add	r0, r1, r0
    3eb4:	str	r0, [fp, #-4]
    3eb8:	b	3ec4 <MyGame_Example_Monster_inventory+0xf0>
    3ebc:	movw	r0, #0
    3ec0:	str	r0, [fp, #-4]
    3ec4:	ldr	r0, [fp, #-4]
    3ec8:	mov	sp, fp
    3ecc:	pop	{fp, pc}

00003ed0 <flatbuffers_uint8_vec_len>:
    3ed0:	push	{fp, lr}
    3ed4:	mov	fp, sp
    3ed8:	sub	sp, sp, #8
    3edc:	str	r0, [sp, #4]
    3ee0:	ldr	r0, [sp, #4]
    3ee4:	bl	120c0 <flatbuffers_vec_len>
    3ee8:	mov	sp, fp
    3eec:	pop	{fp, pc}

00003ef0 <flatbuffers_uint8_vec_at>:
    3ef0:	push	{fp, lr}
    3ef4:	mov	fp, sp
    3ef8:	sub	sp, sp, #8
    3efc:	str	r0, [sp, #4]
    3f00:	str	r1, [sp]
    3f04:	ldr	r0, [sp, #4]
    3f08:	bl	120c0 <flatbuffers_vec_len>
    3f0c:	ldr	r1, [sp]
    3f10:	cmp	r0, r1
    3f14:	bls	3f20 <flatbuffers_uint8_vec_at+0x30>
    3f18:	b	3f1c <flatbuffers_uint8_vec_at+0x2c>
    3f1c:	b	3f40 <flatbuffers_uint8_vec_at+0x50>
    3f20:	movw	r0, #0
    3f24:	movt	r0, #0
    3f28:	movw	r1, #0
    3f2c:	movt	r1, #0
    3f30:	movw	r2, #395	; 0x18b
    3f34:	movw	r3, #0
    3f38:	movt	r3, #0
    3f3c:	bl	0 <__assert_fail>
    3f40:	ldr	r0, [sp, #4]
    3f44:	ldr	r1, [sp]
    3f48:	add	r0, r0, r1
    3f4c:	bl	10950 <flatbuffers_uint8_read_from_pe>
    3f50:	and	r0, r0, #255	; 0xff
    3f54:	mov	sp, fp
    3f58:	pop	{fp, pc}

00003f5c <MyGame_Example_Monster_mana>:
    3f5c:	push	{fp, lr}
    3f60:	mov	fp, sp
    3f64:	sub	sp, sp, #24
    3f68:	str	r0, [fp, #-4]
    3f6c:	movw	r0, #0
    3f70:	strh	r0, [fp, #-6]
    3f74:	ldr	r0, [fp, #-4]
    3f78:	movw	r1, #0
    3f7c:	cmp	r0, r1
    3f80:	beq	3f8c <MyGame_Example_Monster_mana+0x30>
    3f84:	b	3f88 <MyGame_Example_Monster_mana+0x2c>
    3f88:	b	3fac <MyGame_Example_Monster_mana+0x50>
    3f8c:	movw	r0, #0
    3f90:	movt	r0, #0
    3f94:	movw	r1, #0
    3f98:	movt	r1, #0
    3f9c:	movw	r2, #698	; 0x2ba
    3fa0:	movw	r3, #0
    3fa4:	movt	r3, #0
    3fa8:	bl	0 <__assert_fail>
    3fac:	mov	r0, #1
    3fb0:	strh	r0, [fp, #-8]
    3fb4:	ldr	r0, [fp, #-4]
    3fb8:	str	r0, [sp, #8]
    3fbc:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    3fc0:	ldr	lr, [sp, #8]
    3fc4:	sub	r0, lr, r0
    3fc8:	str	r0, [sp, #12]
    3fcc:	ldr	r0, [sp, #12]
    3fd0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    3fd4:	ldrh	lr, [fp, #-8]
    3fd8:	add	lr, lr, #3
    3fdc:	lsl	lr, lr, #1
    3fe0:	cmp	r0, lr
    3fe4:	bcc	4000 <MyGame_Example_Monster_mana+0xa4>
    3fe8:	ldr	r0, [sp, #12]
    3fec:	ldrh	r1, [fp, #-8]
    3ff0:	add	r0, r0, r1, lsl #1
    3ff4:	add	r0, r0, #4
    3ff8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    3ffc:	strh	r0, [fp, #-6]
    4000:	ldrh	r0, [fp, #-6]
    4004:	cmp	r0, #0
    4008:	beq	4028 <MyGame_Example_Monster_mana+0xcc>
    400c:	ldr	r0, [fp, #-4]
    4010:	ldrh	r1, [fp, #-6]
    4014:	add	r0, r0, r1
    4018:	bl	fa0c <flatbuffers_int16_read_from_pe>
    401c:	sxth	r0, r0
    4020:	str	r0, [sp, #4]
    4024:	b	4034 <MyGame_Example_Monster_mana+0xd8>
    4028:	movw	r0, #150	; 0x96
    402c:	str	r0, [sp, #4]
    4030:	b	4034 <MyGame_Example_Monster_mana+0xd8>
    4034:	ldr	r0, [sp, #4]
    4038:	sxth	r0, r0
    403c:	mov	sp, fp
    4040:	pop	{fp, pc}

00004044 <MyGame_Example_Monster_mana_is_present>:
    4044:	push	{fp, lr}
    4048:	mov	fp, sp
    404c:	sub	sp, sp, #16
    4050:	str	r0, [fp, #-4]
    4054:	movw	r0, #0
    4058:	strh	r0, [fp, #-6]
    405c:	ldr	r0, [fp, #-4]
    4060:	movw	r1, #0
    4064:	cmp	r0, r1
    4068:	beq	4074 <MyGame_Example_Monster_mana_is_present+0x30>
    406c:	b	4070 <MyGame_Example_Monster_mana_is_present+0x2c>
    4070:	b	4094 <MyGame_Example_Monster_mana_is_present+0x50>
    4074:	movw	r0, #0
    4078:	movt	r0, #0
    407c:	movw	r1, #0
    4080:	movt	r1, #0
    4084:	movw	r2, #698	; 0x2ba
    4088:	movw	r3, #0
    408c:	movt	r3, #0
    4090:	bl	0 <__assert_fail>
    4094:	mov	r0, #1
    4098:	strh	r0, [sp, #8]
    409c:	ldr	r0, [fp, #-4]
    40a0:	str	r0, [sp]
    40a4:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    40a8:	ldr	lr, [sp]
    40ac:	sub	r0, lr, r0
    40b0:	str	r0, [sp, #4]
    40b4:	ldr	r0, [sp, #4]
    40b8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    40bc:	ldrh	lr, [sp, #8]
    40c0:	add	lr, lr, #3
    40c4:	lsl	lr, lr, #1
    40c8:	cmp	r0, lr
    40cc:	bcc	40e8 <MyGame_Example_Monster_mana_is_present+0xa4>
    40d0:	ldr	r0, [sp, #4]
    40d4:	ldrh	r1, [sp, #8]
    40d8:	add	r0, r0, r1, lsl #1
    40dc:	add	r0, r0, #4
    40e0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    40e4:	strh	r0, [fp, #-6]
    40e8:	ldrh	r0, [fp, #-6]
    40ec:	cmp	r0, #0
    40f0:	movw	r0, #0
    40f4:	movne	r0, #1
    40f8:	and	r0, r0, #1
    40fc:	mov	sp, fp
    4100:	pop	{fp, pc}

00004104 <MyGame_Example_Monster_test4>:
    4104:	push	{fp, lr}
    4108:	mov	fp, sp
    410c:	sub	sp, sp, #32
    4110:	str	r0, [fp, #-8]
    4114:	movw	r0, #0
    4118:	strh	r0, [fp, #-14]
    411c:	ldr	r0, [fp, #-8]
    4120:	movw	r1, #0
    4124:	cmp	r0, r1
    4128:	beq	4134 <MyGame_Example_Monster_test4+0x30>
    412c:	b	4130 <MyGame_Example_Monster_test4+0x2c>
    4130:	b	4154 <MyGame_Example_Monster_test4+0x50>
    4134:	movw	r0, #0
    4138:	movt	r0, #0
    413c:	movw	r1, #0
    4140:	movt	r1, #0
    4144:	movw	r2, #718	; 0x2ce
    4148:	movw	r3, #0
    414c:	movt	r3, #0
    4150:	bl	0 <__assert_fail>
    4154:	mov	r0, #9
    4158:	strh	r0, [sp, #16]
    415c:	ldr	r0, [fp, #-8]
    4160:	str	r0, [sp, #8]
    4164:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4168:	ldr	lr, [sp, #8]
    416c:	sub	r0, lr, r0
    4170:	str	r0, [sp, #12]
    4174:	ldr	r0, [sp, #12]
    4178:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    417c:	ldrh	lr, [sp, #16]
    4180:	add	lr, lr, #3
    4184:	lsl	lr, lr, #1
    4188:	cmp	r0, lr
    418c:	bcc	41a8 <MyGame_Example_Monster_test4+0xa4>
    4190:	ldr	r0, [sp, #12]
    4194:	ldrh	r1, [sp, #16]
    4198:	add	r0, r0, r1, lsl #1
    419c:	add	r0, r0, #4
    41a0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    41a4:	strh	r0, [fp, #-14]
    41a8:	ldrsh	r0, [fp, #-14]
    41ac:	cmp	r0, #0
    41b0:	beq	41ec <MyGame_Example_Monster_test4+0xe8>
    41b4:	ldr	r0, [fp, #-8]
    41b8:	ldrh	r1, [fp, #-14]
    41bc:	add	r0, r0, r1
    41c0:	str	r0, [fp, #-12]
    41c4:	ldr	r0, [fp, #-12]
    41c8:	add	r0, r0, #4
    41cc:	ldr	r1, [fp, #-12]
    41d0:	str	r0, [sp, #4]
    41d4:	mov	r0, r1
    41d8:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    41dc:	ldr	r1, [sp, #4]
    41e0:	add	r0, r1, r0
    41e4:	str	r0, [fp, #-4]
    41e8:	b	41f4 <MyGame_Example_Monster_test4+0xf0>
    41ec:	movw	r0, #0
    41f0:	str	r0, [fp, #-4]
    41f4:	ldr	r0, [fp, #-4]
    41f8:	mov	sp, fp
    41fc:	pop	{fp, pc}

00004200 <MyGame_Example_Test_vec_len>:
    4200:	push	{fp, lr}
    4204:	mov	fp, sp
    4208:	sub	sp, sp, #8
    420c:	str	r0, [sp, #4]
    4210:	ldr	r0, [sp, #4]
    4214:	movw	r1, #0
    4218:	cmp	r0, r1
    421c:	beq	4238 <MyGame_Example_Test_vec_len+0x38>
    4220:	ldr	r0, [sp, #4]
    4224:	mvn	r1, #3
    4228:	add	r0, r0, r1
    422c:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4230:	str	r0, [sp]
    4234:	b	4244 <MyGame_Example_Test_vec_len+0x44>
    4238:	movw	r0, #0
    423c:	str	r0, [sp]
    4240:	b	4244 <MyGame_Example_Test_vec_len+0x44>
    4244:	ldr	r0, [sp]
    4248:	mov	sp, fp
    424c:	pop	{fp, pc}

00004250 <MyGame_Example_Test_vec_at>:
    4250:	push	{fp, lr}
    4254:	mov	fp, sp
    4258:	sub	sp, sp, #8
    425c:	str	r0, [sp, #4]
    4260:	str	r1, [sp]
    4264:	ldr	r0, [sp, #4]
    4268:	bl	120c0 <flatbuffers_vec_len>
    426c:	ldr	r1, [sp]
    4270:	cmp	r0, r1
    4274:	bls	4280 <MyGame_Example_Test_vec_at+0x30>
    4278:	b	427c <MyGame_Example_Test_vec_at+0x2c>
    427c:	b	42a0 <MyGame_Example_Test_vec_at+0x50>
    4280:	movw	r0, #0
    4284:	movt	r0, #0
    4288:	movw	r1, #0
    428c:	movt	r1, #0
    4290:	movw	r2, #380	; 0x17c
    4294:	movw	r3, #0
    4298:	movt	r3, #0
    429c:	bl	0 <__assert_fail>
    42a0:	ldr	r0, [sp, #4]
    42a4:	ldr	r1, [sp]
    42a8:	add	r0, r0, r1, lsl #2
    42ac:	mov	sp, fp
    42b0:	pop	{fp, pc}

000042b4 <MyGame_Example_Test_a>:
    42b4:	push	{fp, lr}
    42b8:	mov	fp, sp
    42bc:	sub	sp, sp, #8
    42c0:	str	r0, [sp, #4]
    42c4:	ldr	r0, [sp, #4]
    42c8:	movw	r1, #0
    42cc:	cmp	r0, r1
    42d0:	beq	42e8 <MyGame_Example_Test_a+0x34>
    42d4:	ldr	r0, [sp, #4]
    42d8:	bl	fa0c <flatbuffers_int16_read_from_pe>
    42dc:	sxth	r0, r0
    42e0:	str	r0, [sp]
    42e4:	b	42f4 <MyGame_Example_Test_a+0x40>
    42e8:	movw	r0, #0
    42ec:	str	r0, [sp]
    42f0:	b	42f4 <MyGame_Example_Test_a+0x40>
    42f4:	ldr	r0, [sp]
    42f8:	sxth	r0, r0
    42fc:	mov	sp, fp
    4300:	pop	{fp, pc}

00004304 <MyGame_Example_Test_b>:
    4304:	push	{fp, lr}
    4308:	mov	fp, sp
    430c:	sub	sp, sp, #8
    4310:	str	r0, [sp, #4]
    4314:	ldr	r0, [sp, #4]
    4318:	movw	r1, #0
    431c:	cmp	r0, r1
    4320:	beq	433c <MyGame_Example_Test_b+0x38>
    4324:	ldr	r0, [sp, #4]
    4328:	add	r0, r0, #2
    432c:	bl	1088c <flatbuffers_int8_read_from_pe>
    4330:	sxtb	r0, r0
    4334:	str	r0, [sp]
    4338:	b	4348 <MyGame_Example_Test_b+0x44>
    433c:	movw	r0, #0
    4340:	str	r0, [sp]
    4344:	b	4348 <MyGame_Example_Test_b+0x44>
    4348:	ldr	r0, [sp]
    434c:	sxtb	r0, r0
    4350:	mov	sp, fp
    4354:	pop	{fp, pc}

00004358 <MyGame_Example_Monster_testarrayoftables>:
    4358:	push	{fp, lr}
    435c:	mov	fp, sp
    4360:	sub	sp, sp, #32
    4364:	str	r0, [fp, #-8]
    4368:	movw	r0, #0
    436c:	strh	r0, [fp, #-14]
    4370:	ldr	r0, [fp, #-8]
    4374:	movw	r1, #0
    4378:	cmp	r0, r1
    437c:	beq	4388 <MyGame_Example_Monster_testarrayoftables+0x30>
    4380:	b	4384 <MyGame_Example_Monster_testarrayoftables+0x2c>
    4384:	b	43a8 <MyGame_Example_Monster_testarrayoftables+0x50>
    4388:	movw	r0, #0
    438c:	movt	r0, #0
    4390:	movw	r1, #0
    4394:	movt	r1, #0
    4398:	movw	r2, #711	; 0x2c7
    439c:	movw	r3, #0
    43a0:	movt	r3, #0
    43a4:	bl	0 <__assert_fail>
    43a8:	mov	r0, #11
    43ac:	strh	r0, [sp, #16]
    43b0:	ldr	r0, [fp, #-8]
    43b4:	str	r0, [sp, #8]
    43b8:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    43bc:	ldr	lr, [sp, #8]
    43c0:	sub	r0, lr, r0
    43c4:	str	r0, [sp, #12]
    43c8:	ldr	r0, [sp, #12]
    43cc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    43d0:	ldrh	lr, [sp, #16]
    43d4:	add	lr, lr, #3
    43d8:	lsl	lr, lr, #1
    43dc:	cmp	r0, lr
    43e0:	bcc	43fc <MyGame_Example_Monster_testarrayoftables+0xa4>
    43e4:	ldr	r0, [sp, #12]
    43e8:	ldrh	r1, [sp, #16]
    43ec:	add	r0, r0, r1, lsl #1
    43f0:	add	r0, r0, #4
    43f4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    43f8:	strh	r0, [fp, #-14]
    43fc:	ldrsh	r0, [fp, #-14]
    4400:	cmp	r0, #0
    4404:	beq	4440 <MyGame_Example_Monster_testarrayoftables+0xe8>
    4408:	ldr	r0, [fp, #-8]
    440c:	ldrh	r1, [fp, #-14]
    4410:	add	r0, r0, r1
    4414:	str	r0, [fp, #-12]
    4418:	ldr	r0, [fp, #-12]
    441c:	add	r0, r0, #4
    4420:	ldr	r1, [fp, #-12]
    4424:	str	r0, [sp, #4]
    4428:	mov	r0, r1
    442c:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4430:	ldr	r1, [sp, #4]
    4434:	add	r0, r1, r0
    4438:	str	r0, [fp, #-4]
    443c:	b	4448 <MyGame_Example_Monster_testarrayoftables+0xf0>
    4440:	movw	r0, #0
    4444:	str	r0, [fp, #-4]
    4448:	ldr	r0, [fp, #-4]
    444c:	mov	sp, fp
    4450:	pop	{fp, pc}

00004454 <MyGame_Example_Monster_vec_len>:
    4454:	push	{fp, lr}
    4458:	mov	fp, sp
    445c:	sub	sp, sp, #8
    4460:	str	r0, [sp, #4]
    4464:	ldr	r0, [sp, #4]
    4468:	movw	r1, #0
    446c:	cmp	r0, r1
    4470:	beq	448c <MyGame_Example_Monster_vec_len+0x38>
    4474:	ldr	r0, [sp, #4]
    4478:	mvn	r1, #3
    447c:	add	r0, r0, r1
    4480:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4484:	str	r0, [sp]
    4488:	b	4498 <MyGame_Example_Monster_vec_len+0x44>
    448c:	movw	r0, #0
    4490:	str	r0, [sp]
    4494:	b	4498 <MyGame_Example_Monster_vec_len+0x44>
    4498:	ldr	r0, [sp]
    449c:	mov	sp, fp
    44a0:	pop	{fp, pc}

000044a4 <MyGame_Example_Monster_vec_at>:
    44a4:	push	{fp, lr}
    44a8:	mov	fp, sp
    44ac:	sub	sp, sp, #16
    44b0:	str	r0, [fp, #-4]
    44b4:	str	r1, [sp, #8]
    44b8:	ldr	r0, [fp, #-4]
    44bc:	ldr	r1, [sp, #8]
    44c0:	add	r0, r0, r1, lsl #2
    44c4:	str	r0, [sp, #4]
    44c8:	ldr	r0, [fp, #-4]
    44cc:	bl	120c0 <flatbuffers_vec_len>
    44d0:	ldr	r1, [sp, #8]
    44d4:	cmp	r0, r1
    44d8:	bls	44e4 <MyGame_Example_Monster_vec_at+0x40>
    44dc:	b	44e0 <MyGame_Example_Monster_vec_at+0x3c>
    44e0:	b	4504 <MyGame_Example_Monster_vec_at+0x60>
    44e4:	movw	r0, #0
    44e8:	movt	r0, #0
    44ec:	movw	r1, #0
    44f0:	movt	r1, #0
    44f4:	movw	r2, #693	; 0x2b5
    44f8:	movw	r3, #0
    44fc:	movt	r3, #0
    4500:	bl	0 <__assert_fail>
    4504:	ldr	r0, [sp, #4]
    4508:	ldr	r1, [sp, #4]
    450c:	str	r0, [sp]
    4510:	mov	r0, r1
    4514:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4518:	ldr	r1, [sp]
    451c:	add	r0, r1, r0
    4520:	mov	sp, fp
    4524:	pop	{fp, pc}

00004528 <MyGame_Example_Monster_testarrayofstring>:
    4528:	push	{fp, lr}
    452c:	mov	fp, sp
    4530:	sub	sp, sp, #32
    4534:	str	r0, [fp, #-8]
    4538:	movw	r0, #0
    453c:	strh	r0, [fp, #-14]
    4540:	ldr	r0, [fp, #-8]
    4544:	movw	r1, #0
    4548:	cmp	r0, r1
    454c:	beq	4558 <MyGame_Example_Monster_testarrayofstring+0x30>
    4550:	b	4554 <MyGame_Example_Monster_testarrayofstring+0x2c>
    4554:	b	4578 <MyGame_Example_Monster_testarrayofstring+0x50>
    4558:	movw	r0, #0
    455c:	movt	r0, #0
    4560:	movw	r1, #0
    4564:	movt	r1, #0
    4568:	movw	r2, #712	; 0x2c8
    456c:	movw	r3, #0
    4570:	movt	r3, #0
    4574:	bl	0 <__assert_fail>
    4578:	mov	r0, #10
    457c:	strh	r0, [sp, #16]
    4580:	ldr	r0, [fp, #-8]
    4584:	str	r0, [sp, #8]
    4588:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    458c:	ldr	lr, [sp, #8]
    4590:	sub	r0, lr, r0
    4594:	str	r0, [sp, #12]
    4598:	ldr	r0, [sp, #12]
    459c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    45a0:	ldrh	lr, [sp, #16]
    45a4:	add	lr, lr, #3
    45a8:	lsl	lr, lr, #1
    45ac:	cmp	r0, lr
    45b0:	bcc	45cc <MyGame_Example_Monster_testarrayofstring+0xa4>
    45b4:	ldr	r0, [sp, #12]
    45b8:	ldrh	r1, [sp, #16]
    45bc:	add	r0, r0, r1, lsl #1
    45c0:	add	r0, r0, #4
    45c4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    45c8:	strh	r0, [fp, #-14]
    45cc:	ldrsh	r0, [fp, #-14]
    45d0:	cmp	r0, #0
    45d4:	beq	4610 <MyGame_Example_Monster_testarrayofstring+0xe8>
    45d8:	ldr	r0, [fp, #-8]
    45dc:	ldrh	r1, [fp, #-14]
    45e0:	add	r0, r0, r1
    45e4:	str	r0, [fp, #-12]
    45e8:	ldr	r0, [fp, #-12]
    45ec:	add	r0, r0, #4
    45f0:	ldr	r1, [fp, #-12]
    45f4:	str	r0, [sp, #4]
    45f8:	mov	r0, r1
    45fc:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4600:	ldr	r1, [sp, #4]
    4604:	add	r0, r1, r0
    4608:	str	r0, [fp, #-4]
    460c:	b	4618 <MyGame_Example_Monster_testarrayofstring+0xf0>
    4610:	movw	r0, #0
    4614:	str	r0, [fp, #-4]
    4618:	ldr	r0, [fp, #-4]
    461c:	mov	sp, fp
    4620:	pop	{fp, pc}

00004624 <flatbuffers_string_vec_len>:
    4624:	push	{fp, lr}
    4628:	mov	fp, sp
    462c:	sub	sp, sp, #8
    4630:	str	r0, [sp, #4]
    4634:	ldr	r0, [sp, #4]
    4638:	movw	r1, #0
    463c:	cmp	r0, r1
    4640:	beq	465c <flatbuffers_string_vec_len+0x38>
    4644:	ldr	r0, [sp, #4]
    4648:	mvn	r1, #3
    464c:	add	r0, r0, r1
    4650:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4654:	str	r0, [sp]
    4658:	b	4668 <flatbuffers_string_vec_len+0x44>
    465c:	movw	r0, #0
    4660:	str	r0, [sp]
    4664:	b	4668 <flatbuffers_string_vec_len+0x44>
    4668:	ldr	r0, [sp]
    466c:	mov	sp, fp
    4670:	pop	{fp, pc}

00004674 <flatbuffers_string_vec_at>:
    4674:	push	{fp, lr}
    4678:	mov	fp, sp
    467c:	sub	sp, sp, #16
    4680:	str	r0, [fp, #-4]
    4684:	str	r1, [sp, #8]
    4688:	ldr	r0, [fp, #-4]
    468c:	ldr	r1, [sp, #8]
    4690:	add	r0, r0, r1, lsl #2
    4694:	str	r0, [sp, #4]
    4698:	ldr	r0, [fp, #-4]
    469c:	bl	120c0 <flatbuffers_vec_len>
    46a0:	ldr	r1, [sp, #8]
    46a4:	cmp	r0, r1
    46a8:	bls	46b4 <flatbuffers_string_vec_at+0x40>
    46ac:	b	46b0 <flatbuffers_string_vec_at+0x3c>
    46b0:	b	46d4 <flatbuffers_string_vec_at+0x60>
    46b4:	movw	r0, #0
    46b8:	movt	r0, #0
    46bc:	movw	r1, #0
    46c0:	movt	r1, #0
    46c4:	movw	r2, #108	; 0x6c
    46c8:	movw	r3, #0
    46cc:	movt	r3, #0
    46d0:	bl	0 <__assert_fail>
    46d4:	ldr	r0, [sp, #4]
    46d8:	ldr	r1, [sp, #4]
    46dc:	str	r0, [sp]
    46e0:	mov	r0, r1
    46e4:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    46e8:	ldr	r1, [sp]
    46ec:	add	r0, r1, r0
    46f0:	add	r0, r0, #4
    46f4:	mov	sp, fp
    46f8:	pop	{fp, pc}

000046fc <MyGame_Example_Monster_testarrayofbools_is_present>:
    46fc:	push	{fp, lr}
    4700:	mov	fp, sp
    4704:	sub	sp, sp, #16
    4708:	str	r0, [fp, #-4]
    470c:	movw	r0, #0
    4710:	strh	r0, [fp, #-6]
    4714:	ldr	r0, [fp, #-4]
    4718:	movw	r1, #0
    471c:	cmp	r0, r1
    4720:	beq	472c <MyGame_Example_Monster_testarrayofbools_is_present+0x30>
    4724:	b	4728 <MyGame_Example_Monster_testarrayofbools_is_present+0x2c>
    4728:	b	474c <MyGame_Example_Monster_testarrayofbools_is_present+0x50>
    472c:	movw	r0, #0
    4730:	movt	r0, #0
    4734:	movw	r1, #0
    4738:	movt	r1, #0
    473c:	movw	r2, #714	; 0x2ca
    4740:	movw	r3, #0
    4744:	movt	r3, #0
    4748:	bl	0 <__assert_fail>
    474c:	mov	r0, #24
    4750:	strh	r0, [sp, #8]
    4754:	ldr	r0, [fp, #-4]
    4758:	str	r0, [sp]
    475c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4760:	ldr	lr, [sp]
    4764:	sub	r0, lr, r0
    4768:	str	r0, [sp, #4]
    476c:	ldr	r0, [sp, #4]
    4770:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4774:	ldrh	lr, [sp, #8]
    4778:	add	lr, lr, #3
    477c:	lsl	lr, lr, #1
    4780:	cmp	r0, lr
    4784:	bcc	47a0 <MyGame_Example_Monster_testarrayofbools_is_present+0xa4>
    4788:	ldr	r0, [sp, #4]
    478c:	ldrh	r1, [sp, #8]
    4790:	add	r0, r0, r1, lsl #1
    4794:	add	r0, r0, #4
    4798:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    479c:	strh	r0, [fp, #-6]
    47a0:	ldrh	r0, [fp, #-6]
    47a4:	cmp	r0, #0
    47a8:	movw	r0, #0
    47ac:	movne	r0, #1
    47b0:	and	r0, r0, #1
    47b4:	mov	sp, fp
    47b8:	pop	{fp, pc}

000047bc <MyGame_Example_Monster_testarrayofbools>:
    47bc:	push	{fp, lr}
    47c0:	mov	fp, sp
    47c4:	sub	sp, sp, #32
    47c8:	str	r0, [fp, #-8]
    47cc:	movw	r0, #0
    47d0:	strh	r0, [fp, #-14]
    47d4:	ldr	r0, [fp, #-8]
    47d8:	movw	r1, #0
    47dc:	cmp	r0, r1
    47e0:	beq	47ec <MyGame_Example_Monster_testarrayofbools+0x30>
    47e4:	b	47e8 <MyGame_Example_Monster_testarrayofbools+0x2c>
    47e8:	b	480c <MyGame_Example_Monster_testarrayofbools+0x50>
    47ec:	movw	r0, #0
    47f0:	movt	r0, #0
    47f4:	movw	r1, #0
    47f8:	movt	r1, #0
    47fc:	movw	r2, #714	; 0x2ca
    4800:	movw	r3, #0
    4804:	movt	r3, #0
    4808:	bl	0 <__assert_fail>
    480c:	mov	r0, #24
    4810:	strh	r0, [sp, #16]
    4814:	ldr	r0, [fp, #-8]
    4818:	str	r0, [sp, #8]
    481c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4820:	ldr	lr, [sp, #8]
    4824:	sub	r0, lr, r0
    4828:	str	r0, [sp, #12]
    482c:	ldr	r0, [sp, #12]
    4830:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4834:	ldrh	lr, [sp, #16]
    4838:	add	lr, lr, #3
    483c:	lsl	lr, lr, #1
    4840:	cmp	r0, lr
    4844:	bcc	4860 <MyGame_Example_Monster_testarrayofbools+0xa4>
    4848:	ldr	r0, [sp, #12]
    484c:	ldrh	r1, [sp, #16]
    4850:	add	r0, r0, r1, lsl #1
    4854:	add	r0, r0, #4
    4858:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    485c:	strh	r0, [fp, #-14]
    4860:	ldrsh	r0, [fp, #-14]
    4864:	cmp	r0, #0
    4868:	beq	48a4 <MyGame_Example_Monster_testarrayofbools+0xe8>
    486c:	ldr	r0, [fp, #-8]
    4870:	ldrh	r1, [fp, #-14]
    4874:	add	r0, r0, r1
    4878:	str	r0, [fp, #-12]
    487c:	ldr	r0, [fp, #-12]
    4880:	add	r0, r0, #4
    4884:	ldr	r1, [fp, #-12]
    4888:	str	r0, [sp, #4]
    488c:	mov	r0, r1
    4890:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4894:	ldr	r1, [sp, #4]
    4898:	add	r0, r1, r0
    489c:	str	r0, [fp, #-4]
    48a0:	b	48ac <MyGame_Example_Monster_testarrayofbools+0xf0>
    48a4:	movw	r0, #0
    48a8:	str	r0, [fp, #-4]
    48ac:	ldr	r0, [fp, #-4]
    48b0:	mov	sp, fp
    48b4:	pop	{fp, pc}

000048b8 <flatbuffers_bool_vec_len>:
    48b8:	push	{fp, lr}
    48bc:	mov	fp, sp
    48c0:	sub	sp, sp, #8
    48c4:	str	r0, [sp, #4]
    48c8:	ldr	r0, [sp, #4]
    48cc:	bl	120c0 <flatbuffers_vec_len>
    48d0:	mov	sp, fp
    48d4:	pop	{fp, pc}

000048d8 <flatbuffers_bool_vec_at>:
    48d8:	push	{fp, lr}
    48dc:	mov	fp, sp
    48e0:	sub	sp, sp, #8
    48e4:	str	r0, [sp, #4]
    48e8:	str	r1, [sp]
    48ec:	ldr	r0, [sp, #4]
    48f0:	bl	120c0 <flatbuffers_vec_len>
    48f4:	ldr	r1, [sp]
    48f8:	cmp	r0, r1
    48fc:	bls	4908 <flatbuffers_bool_vec_at+0x30>
    4900:	b	4904 <flatbuffers_bool_vec_at+0x2c>
    4904:	b	4928 <flatbuffers_bool_vec_at+0x50>
    4908:	movw	r0, #0
    490c:	movt	r0, #0
    4910:	movw	r1, #0
    4914:	movt	r1, #0
    4918:	movw	r2, #394	; 0x18a
    491c:	movw	r3, #0
    4920:	movt	r3, #0
    4924:	bl	0 <__assert_fail>
    4928:	ldr	r0, [sp, #4]
    492c:	ldr	r1, [sp]
    4930:	add	r0, r0, r1
    4934:	bl	12110 <flatbuffers_bool_read_from_pe>
    4938:	and	r0, r0, #255	; 0xff
    493c:	mov	sp, fp
    4940:	pop	{fp, pc}

00004944 <MyGame_Example_Monster_test_type>:
    4944:	push	{fp, lr}
    4948:	mov	fp, sp
    494c:	sub	sp, sp, #24
    4950:	str	r0, [fp, #-4]
    4954:	movw	r0, #0
    4958:	strh	r0, [fp, #-6]
    495c:	ldr	r0, [fp, #-4]
    4960:	movw	r1, #0
    4964:	cmp	r0, r1
    4968:	beq	4974 <MyGame_Example_Monster_test_type+0x30>
    496c:	b	4970 <MyGame_Example_Monster_test_type+0x2c>
    4970:	b	4994 <MyGame_Example_Monster_test_type+0x50>
    4974:	movw	r0, #0
    4978:	movt	r0, #0
    497c:	movw	r1, #0
    4980:	movt	r1, #0
    4984:	movw	r2, #717	; 0x2cd
    4988:	movw	r3, #0
    498c:	movt	r3, #0
    4990:	bl	0 <__assert_fail>
    4994:	mov	r0, #7
    4998:	strh	r0, [fp, #-8]
    499c:	ldr	r0, [fp, #-4]
    49a0:	str	r0, [sp, #8]
    49a4:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    49a8:	ldr	lr, [sp, #8]
    49ac:	sub	r0, lr, r0
    49b0:	str	r0, [sp, #12]
    49b4:	ldr	r0, [sp, #12]
    49b8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    49bc:	ldrh	lr, [fp, #-8]
    49c0:	add	lr, lr, #3
    49c4:	lsl	lr, lr, #1
    49c8:	cmp	r0, lr
    49cc:	bcc	49e8 <MyGame_Example_Monster_test_type+0xa4>
    49d0:	ldr	r0, [sp, #12]
    49d4:	ldrh	r1, [fp, #-8]
    49d8:	add	r0, r0, r1, lsl #1
    49dc:	add	r0, r0, #4
    49e0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    49e4:	strh	r0, [fp, #-6]
    49e8:	ldrh	r0, [fp, #-6]
    49ec:	cmp	r0, #0
    49f0:	beq	4a10 <MyGame_Example_Monster_test_type+0xcc>
    49f4:	ldr	r0, [fp, #-4]
    49f8:	ldrh	r1, [fp, #-6]
    49fc:	add	r0, r0, r1
    4a00:	bl	1214c <__flatbuffers_utype_read_from_pe>
    4a04:	and	r0, r0, #255	; 0xff
    4a08:	str	r0, [sp, #4]
    4a0c:	b	4a1c <MyGame_Example_Monster_test_type+0xd8>
    4a10:	movw	r0, #0
    4a14:	str	r0, [sp, #4]
    4a18:	b	4a1c <MyGame_Example_Monster_test_type+0xd8>
    4a1c:	ldr	r0, [sp, #4]
    4a20:	and	r0, r0, #255	; 0xff
    4a24:	mov	sp, fp
    4a28:	pop	{fp, pc}

00004a2c <MyGame_Example_Monster_test>:
    4a2c:	push	{fp, lr}
    4a30:	mov	fp, sp
    4a34:	sub	sp, sp, #32
    4a38:	str	r0, [fp, #-8]
    4a3c:	movw	r0, #0
    4a40:	strh	r0, [fp, #-14]
    4a44:	ldr	r0, [fp, #-8]
    4a48:	movw	r1, #0
    4a4c:	cmp	r0, r1
    4a50:	beq	4a5c <MyGame_Example_Monster_test+0x30>
    4a54:	b	4a58 <MyGame_Example_Monster_test+0x2c>
    4a58:	b	4a7c <MyGame_Example_Monster_test+0x50>
    4a5c:	movw	r0, #0
    4a60:	movt	r0, #0
    4a64:	movw	r1, #0
    4a68:	movt	r1, #0
    4a6c:	movw	r2, #717	; 0x2cd
    4a70:	movw	r3, #0
    4a74:	movt	r3, #0
    4a78:	bl	0 <__assert_fail>
    4a7c:	mov	r0, #8
    4a80:	strh	r0, [sp, #16]
    4a84:	ldr	r0, [fp, #-8]
    4a88:	str	r0, [sp, #8]
    4a8c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4a90:	ldr	lr, [sp, #8]
    4a94:	sub	r0, lr, r0
    4a98:	str	r0, [sp, #12]
    4a9c:	ldr	r0, [sp, #12]
    4aa0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4aa4:	ldrh	lr, [sp, #16]
    4aa8:	add	lr, lr, #3
    4aac:	lsl	lr, lr, #1
    4ab0:	cmp	r0, lr
    4ab4:	bcc	4ad0 <MyGame_Example_Monster_test+0xa4>
    4ab8:	ldr	r0, [sp, #12]
    4abc:	ldrh	r1, [sp, #16]
    4ac0:	add	r0, r0, r1, lsl #1
    4ac4:	add	r0, r0, #4
    4ac8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4acc:	strh	r0, [fp, #-14]
    4ad0:	ldrsh	r0, [fp, #-14]
    4ad4:	cmp	r0, #0
    4ad8:	beq	4b10 <MyGame_Example_Monster_test+0xe4>
    4adc:	ldr	r0, [fp, #-8]
    4ae0:	ldrh	r1, [fp, #-14]
    4ae4:	add	r0, r0, r1
    4ae8:	str	r0, [fp, #-12]
    4aec:	ldr	r0, [fp, #-12]
    4af0:	ldr	r1, [fp, #-12]
    4af4:	str	r0, [sp, #4]
    4af8:	mov	r0, r1
    4afc:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4b00:	ldr	r1, [sp, #4]
    4b04:	add	r0, r1, r0
    4b08:	str	r0, [fp, #-4]
    4b0c:	b	4b18 <MyGame_Example_Monster_test+0xec>
    4b10:	movw	r0, #0
    4b14:	str	r0, [fp, #-4]
    4b18:	ldr	r0, [fp, #-4]
    4b1c:	mov	sp, fp
    4b20:	pop	{fp, pc}

00004b24 <MyGame_Example_Monster_enemy>:
    4b24:	push	{fp, lr}
    4b28:	mov	fp, sp
    4b2c:	sub	sp, sp, #32
    4b30:	str	r0, [fp, #-8]
    4b34:	movw	r0, #0
    4b38:	strh	r0, [fp, #-14]
    4b3c:	ldr	r0, [fp, #-8]
    4b40:	movw	r1, #0
    4b44:	cmp	r0, r1
    4b48:	beq	4b54 <MyGame_Example_Monster_enemy+0x30>
    4b4c:	b	4b50 <MyGame_Example_Monster_enemy+0x2c>
    4b50:	b	4b74 <MyGame_Example_Monster_enemy+0x50>
    4b54:	movw	r0, #0
    4b58:	movt	r0, #0
    4b5c:	movw	r1, #0
    4b60:	movt	r1, #0
    4b64:	movw	r2, #716	; 0x2cc
    4b68:	movw	r3, #0
    4b6c:	movt	r3, #0
    4b70:	bl	0 <__assert_fail>
    4b74:	mov	r0, #12
    4b78:	strh	r0, [sp, #16]
    4b7c:	ldr	r0, [fp, #-8]
    4b80:	str	r0, [sp, #8]
    4b84:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4b88:	ldr	lr, [sp, #8]
    4b8c:	sub	r0, lr, r0
    4b90:	str	r0, [sp, #12]
    4b94:	ldr	r0, [sp, #12]
    4b98:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4b9c:	ldrh	lr, [sp, #16]
    4ba0:	add	lr, lr, #3
    4ba4:	lsl	lr, lr, #1
    4ba8:	cmp	r0, lr
    4bac:	bcc	4bc8 <MyGame_Example_Monster_enemy+0xa4>
    4bb0:	ldr	r0, [sp, #12]
    4bb4:	ldrh	r1, [sp, #16]
    4bb8:	add	r0, r0, r1, lsl #1
    4bbc:	add	r0, r0, #4
    4bc0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4bc4:	strh	r0, [fp, #-14]
    4bc8:	ldrsh	r0, [fp, #-14]
    4bcc:	cmp	r0, #0
    4bd0:	beq	4c08 <MyGame_Example_Monster_enemy+0xe4>
    4bd4:	ldr	r0, [fp, #-8]
    4bd8:	ldrh	r1, [fp, #-14]
    4bdc:	add	r0, r0, r1
    4be0:	str	r0, [fp, #-12]
    4be4:	ldr	r0, [fp, #-12]
    4be8:	ldr	r1, [fp, #-12]
    4bec:	str	r0, [sp, #4]
    4bf0:	mov	r0, r1
    4bf4:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4bf8:	ldr	r1, [sp, #4]
    4bfc:	add	r0, r1, r0
    4c00:	str	r0, [fp, #-4]
    4c04:	b	4c10 <MyGame_Example_Monster_enemy+0xec>
    4c08:	movw	r0, #0
    4c0c:	str	r0, [fp, #-4]
    4c10:	ldr	r0, [fp, #-4]
    4c14:	mov	sp, fp
    4c18:	pop	{fp, pc}

00004c1c <MyGame_Example_Monster_test_union>:
    4c1c:	push	{fp, lr}
    4c20:	mov	fp, sp
    4c24:	sub	sp, sp, #8
    4c28:	str	r1, [sp, #4]
    4c2c:	mov	r1, r0
    4c30:	str	r0, [sp]
    4c34:	mov	r0, r1
    4c38:	movw	r1, #0
    4c3c:	and	r1, r1, #255	; 0xff
    4c40:	movw	r2, #8
    4c44:	bl	0 <memset>
    4c48:	ldr	r0, [sp, #4]
    4c4c:	bl	4944 <MyGame_Example_Monster_test_type>
    4c50:	ldr	r1, [sp]
    4c54:	strb	r0, [r1]
    4c58:	ldrb	r0, [r1]
    4c5c:	cmp	r0, #0
    4c60:	bne	4c68 <MyGame_Example_Monster_test_union+0x4c>
    4c64:	b	4c78 <MyGame_Example_Monster_test_union+0x5c>
    4c68:	ldr	r0, [sp, #4]
    4c6c:	bl	4a2c <MyGame_Example_Monster_test>
    4c70:	ldr	lr, [sp]
    4c74:	str	r0, [lr, #4]
    4c78:	mov	sp, fp
    4c7c:	pop	{fp, pc}

00004c80 <MyGame_Example_Monster_testbool>:
    4c80:	push	{fp, lr}
    4c84:	mov	fp, sp
    4c88:	sub	sp, sp, #24
    4c8c:	str	r0, [fp, #-4]
    4c90:	movw	r0, #0
    4c94:	strh	r0, [fp, #-6]
    4c98:	ldr	r0, [fp, #-4]
    4c9c:	movw	r1, #0
    4ca0:	cmp	r0, r1
    4ca4:	beq	4cb0 <MyGame_Example_Monster_testbool+0x30>
    4ca8:	b	4cac <MyGame_Example_Monster_testbool+0x2c>
    4cac:	b	4cd0 <MyGame_Example_Monster_testbool+0x50>
    4cb0:	movw	r0, #0
    4cb4:	movt	r0, #0
    4cb8:	movw	r1, #0
    4cbc:	movt	r1, #0
    4cc0:	movw	r2, #723	; 0x2d3
    4cc4:	movw	r3, #0
    4cc8:	movt	r3, #0
    4ccc:	bl	0 <__assert_fail>
    4cd0:	mov	r0, #15
    4cd4:	strh	r0, [fp, #-8]
    4cd8:	ldr	r0, [fp, #-4]
    4cdc:	str	r0, [sp, #8]
    4ce0:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4ce4:	ldr	lr, [sp, #8]
    4ce8:	sub	r0, lr, r0
    4cec:	str	r0, [sp, #12]
    4cf0:	ldr	r0, [sp, #12]
    4cf4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4cf8:	ldrh	lr, [fp, #-8]
    4cfc:	add	lr, lr, #3
    4d00:	lsl	lr, lr, #1
    4d04:	cmp	r0, lr
    4d08:	bcc	4d24 <MyGame_Example_Monster_testbool+0xa4>
    4d0c:	ldr	r0, [sp, #12]
    4d10:	ldrh	r1, [fp, #-8]
    4d14:	add	r0, r0, r1, lsl #1
    4d18:	add	r0, r0, #4
    4d1c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4d20:	strh	r0, [fp, #-6]
    4d24:	ldrh	r0, [fp, #-6]
    4d28:	cmp	r0, #0
    4d2c:	beq	4d4c <MyGame_Example_Monster_testbool+0xcc>
    4d30:	ldr	r0, [fp, #-4]
    4d34:	ldrh	r1, [fp, #-6]
    4d38:	add	r0, r0, r1
    4d3c:	bl	12110 <flatbuffers_bool_read_from_pe>
    4d40:	and	r0, r0, #255	; 0xff
    4d44:	str	r0, [sp, #4]
    4d48:	b	4d58 <MyGame_Example_Monster_testbool+0xd8>
    4d4c:	movw	r0, #1
    4d50:	str	r0, [sp, #4]
    4d54:	b	4d58 <MyGame_Example_Monster_testbool+0xd8>
    4d58:	ldr	r0, [sp, #4]
    4d5c:	and	r0, r0, #255	; 0xff
    4d60:	mov	sp, fp
    4d64:	pop	{fp, pc}

00004d68 <MyGame_Example_Monster_testempty_is_present>:
    4d68:	push	{fp, lr}
    4d6c:	mov	fp, sp
    4d70:	sub	sp, sp, #16
    4d74:	str	r0, [fp, #-4]
    4d78:	movw	r0, #0
    4d7c:	strh	r0, [fp, #-6]
    4d80:	ldr	r0, [fp, #-4]
    4d84:	movw	r1, #0
    4d88:	cmp	r0, r1
    4d8c:	beq	4d98 <MyGame_Example_Monster_testempty_is_present+0x30>
    4d90:	b	4d94 <MyGame_Example_Monster_testempty_is_present+0x2c>
    4d94:	b	4db8 <MyGame_Example_Monster_testempty_is_present+0x50>
    4d98:	movw	r0, #0
    4d9c:	movt	r0, #0
    4da0:	movw	r1, #0
    4da4:	movt	r1, #0
    4da8:	movw	r2, #722	; 0x2d2
    4dac:	movw	r3, #0
    4db0:	movt	r3, #0
    4db4:	bl	0 <__assert_fail>
    4db8:	mov	r0, #14
    4dbc:	strh	r0, [sp, #8]
    4dc0:	ldr	r0, [fp, #-4]
    4dc4:	str	r0, [sp]
    4dc8:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4dcc:	ldr	lr, [sp]
    4dd0:	sub	r0, lr, r0
    4dd4:	str	r0, [sp, #4]
    4dd8:	ldr	r0, [sp, #4]
    4ddc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4de0:	ldrh	lr, [sp, #8]
    4de4:	add	lr, lr, #3
    4de8:	lsl	lr, lr, #1
    4dec:	cmp	r0, lr
    4df0:	bcc	4e0c <MyGame_Example_Monster_testempty_is_present+0xa4>
    4df4:	ldr	r0, [sp, #4]
    4df8:	ldrh	r1, [sp, #8]
    4dfc:	add	r0, r0, r1, lsl #1
    4e00:	add	r0, r0, #4
    4e04:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4e08:	strh	r0, [fp, #-6]
    4e0c:	ldrh	r0, [fp, #-6]
    4e10:	cmp	r0, #0
    4e14:	movw	r0, #0
    4e18:	movne	r0, #1
    4e1c:	and	r0, r0, #1
    4e20:	mov	sp, fp
    4e24:	pop	{fp, pc}

00004e28 <MyGame_Example_Monster_testempty>:
    4e28:	push	{fp, lr}
    4e2c:	mov	fp, sp
    4e30:	sub	sp, sp, #32
    4e34:	str	r0, [fp, #-8]
    4e38:	movw	r0, #0
    4e3c:	strh	r0, [fp, #-14]
    4e40:	ldr	r0, [fp, #-8]
    4e44:	movw	r1, #0
    4e48:	cmp	r0, r1
    4e4c:	beq	4e58 <MyGame_Example_Monster_testempty+0x30>
    4e50:	b	4e54 <MyGame_Example_Monster_testempty+0x2c>
    4e54:	b	4e78 <MyGame_Example_Monster_testempty+0x50>
    4e58:	movw	r0, #0
    4e5c:	movt	r0, #0
    4e60:	movw	r1, #0
    4e64:	movt	r1, #0
    4e68:	movw	r2, #722	; 0x2d2
    4e6c:	movw	r3, #0
    4e70:	movt	r3, #0
    4e74:	bl	0 <__assert_fail>
    4e78:	mov	r0, #14
    4e7c:	strh	r0, [sp, #16]
    4e80:	ldr	r0, [fp, #-8]
    4e84:	str	r0, [sp, #8]
    4e88:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4e8c:	ldr	lr, [sp, #8]
    4e90:	sub	r0, lr, r0
    4e94:	str	r0, [sp, #12]
    4e98:	ldr	r0, [sp, #12]
    4e9c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4ea0:	ldrh	lr, [sp, #16]
    4ea4:	add	lr, lr, #3
    4ea8:	lsl	lr, lr, #1
    4eac:	cmp	r0, lr
    4eb0:	bcc	4ecc <MyGame_Example_Monster_testempty+0xa4>
    4eb4:	ldr	r0, [sp, #12]
    4eb8:	ldrh	r1, [sp, #16]
    4ebc:	add	r0, r0, r1, lsl #1
    4ec0:	add	r0, r0, #4
    4ec4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4ec8:	strh	r0, [fp, #-14]
    4ecc:	ldrsh	r0, [fp, #-14]
    4ed0:	cmp	r0, #0
    4ed4:	beq	4f0c <MyGame_Example_Monster_testempty+0xe4>
    4ed8:	ldr	r0, [fp, #-8]
    4edc:	ldrh	r1, [fp, #-14]
    4ee0:	add	r0, r0, r1
    4ee4:	str	r0, [fp, #-12]
    4ee8:	ldr	r0, [fp, #-12]
    4eec:	ldr	r1, [fp, #-12]
    4ef0:	str	r0, [sp, #4]
    4ef4:	mov	r0, r1
    4ef8:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    4efc:	ldr	r1, [sp, #4]
    4f00:	add	r0, r1, r0
    4f04:	str	r0, [fp, #-4]
    4f08:	b	4f14 <MyGame_Example_Monster_testempty+0xec>
    4f0c:	movw	r0, #0
    4f10:	str	r0, [fp, #-4]
    4f14:	ldr	r0, [fp, #-4]
    4f18:	mov	sp, fp
    4f1c:	pop	{fp, pc}

00004f20 <MyGame_Example_Stat_id_is_present>:
    4f20:	push	{fp, lr}
    4f24:	mov	fp, sp
    4f28:	sub	sp, sp, #16
    4f2c:	str	r0, [fp, #-4]
    4f30:	movw	r0, #0
    4f34:	strh	r0, [fp, #-6]
    4f38:	ldr	r0, [fp, #-4]
    4f3c:	movw	r1, #0
    4f40:	cmp	r0, r1
    4f44:	beq	4f50 <MyGame_Example_Stat_id_is_present+0x30>
    4f48:	b	4f4c <MyGame_Example_Stat_id_is_present+0x2c>
    4f4c:	b	4f70 <MyGame_Example_Stat_id_is_present+0x50>
    4f50:	movw	r0, #0
    4f54:	movt	r0, #0
    4f58:	movw	r1, #0
    4f5c:	movt	r1, #0
    4f60:	movw	r2, #607	; 0x25f
    4f64:	movw	r3, #0
    4f68:	movt	r3, #0
    4f6c:	bl	0 <__assert_fail>
    4f70:	mov	r0, #0
    4f74:	strh	r0, [sp, #8]
    4f78:	ldr	r0, [fp, #-4]
    4f7c:	str	r0, [sp]
    4f80:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    4f84:	ldr	lr, [sp]
    4f88:	sub	r0, lr, r0
    4f8c:	str	r0, [sp, #4]
    4f90:	ldr	r0, [sp, #4]
    4f94:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4f98:	ldrh	lr, [sp, #8]
    4f9c:	add	lr, lr, #3
    4fa0:	lsl	lr, lr, #1
    4fa4:	cmp	r0, lr
    4fa8:	bcc	4fc4 <MyGame_Example_Stat_id_is_present+0xa4>
    4fac:	ldr	r0, [sp, #4]
    4fb0:	ldrh	r1, [sp, #8]
    4fb4:	add	r0, r0, r1, lsl #1
    4fb8:	add	r0, r0, #4
    4fbc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    4fc0:	strh	r0, [fp, #-6]
    4fc4:	ldrh	r0, [fp, #-6]
    4fc8:	cmp	r0, #0
    4fcc:	movw	r0, #0
    4fd0:	movne	r0, #1
    4fd4:	and	r0, r0, #1
    4fd8:	mov	sp, fp
    4fdc:	pop	{fp, pc}

00004fe0 <MyGame_Example_Stat_val_is_present>:
    4fe0:	push	{fp, lr}
    4fe4:	mov	fp, sp
    4fe8:	sub	sp, sp, #16
    4fec:	str	r0, [fp, #-4]
    4ff0:	movw	r0, #0
    4ff4:	strh	r0, [fp, #-6]
    4ff8:	ldr	r0, [fp, #-4]
    4ffc:	movw	r1, #0
    5000:	cmp	r0, r1
    5004:	beq	5010 <MyGame_Example_Stat_val_is_present+0x30>
    5008:	b	500c <MyGame_Example_Stat_val_is_present+0x2c>
    500c:	b	5030 <MyGame_Example_Stat_val_is_present+0x50>
    5010:	movw	r0, #0
    5014:	movt	r0, #0
    5018:	movw	r1, #0
    501c:	movt	r1, #0
    5020:	movw	r2, #608	; 0x260
    5024:	movw	r3, #0
    5028:	movt	r3, #0
    502c:	bl	0 <__assert_fail>
    5030:	mov	r0, #1
    5034:	strh	r0, [sp, #8]
    5038:	ldr	r0, [fp, #-4]
    503c:	str	r0, [sp]
    5040:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    5044:	ldr	lr, [sp]
    5048:	sub	r0, lr, r0
    504c:	str	r0, [sp, #4]
    5050:	ldr	r0, [sp, #4]
    5054:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    5058:	ldrh	lr, [sp, #8]
    505c:	add	lr, lr, #3
    5060:	lsl	lr, lr, #1
    5064:	cmp	r0, lr
    5068:	bcc	5084 <MyGame_Example_Stat_val_is_present+0xa4>
    506c:	ldr	r0, [sp, #4]
    5070:	ldrh	r1, [sp, #8]
    5074:	add	r0, r0, r1, lsl #1
    5078:	add	r0, r0, #4
    507c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    5080:	strh	r0, [fp, #-6]
    5084:	ldrh	r0, [fp, #-6]
    5088:	cmp	r0, #0
    508c:	movw	r0, #0
    5090:	movne	r0, #1
    5094:	and	r0, r0, #1
    5098:	mov	sp, fp
    509c:	pop	{fp, pc}

000050a0 <MyGame_Example_Stat_count_is_present>:
    50a0:	push	{fp, lr}
    50a4:	mov	fp, sp
    50a8:	sub	sp, sp, #16
    50ac:	str	r0, [fp, #-4]
    50b0:	movw	r0, #0
    50b4:	strh	r0, [fp, #-6]
    50b8:	ldr	r0, [fp, #-4]
    50bc:	movw	r1, #0
    50c0:	cmp	r0, r1
    50c4:	beq	50d0 <MyGame_Example_Stat_count_is_present+0x30>
    50c8:	b	50cc <MyGame_Example_Stat_count_is_present+0x2c>
    50cc:	b	50f0 <MyGame_Example_Stat_count_is_present+0x50>
    50d0:	movw	r0, #0
    50d4:	movt	r0, #0
    50d8:	movw	r1, #0
    50dc:	movt	r1, #0
    50e0:	movw	r2, #609	; 0x261
    50e4:	movw	r3, #0
    50e8:	movt	r3, #0
    50ec:	bl	0 <__assert_fail>
    50f0:	mov	r0, #2
    50f4:	strh	r0, [sp, #8]
    50f8:	ldr	r0, [fp, #-4]
    50fc:	str	r0, [sp]
    5100:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    5104:	ldr	lr, [sp]
    5108:	sub	r0, lr, r0
    510c:	str	r0, [sp, #4]
    5110:	ldr	r0, [sp, #4]
    5114:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    5118:	ldrh	lr, [sp, #8]
    511c:	add	lr, lr, #3
    5120:	lsl	lr, lr, #1
    5124:	cmp	r0, lr
    5128:	bcc	5144 <MyGame_Example_Stat_count_is_present+0xa4>
    512c:	ldr	r0, [sp, #4]
    5130:	ldrh	r1, [sp, #8]
    5134:	add	r0, r0, r1, lsl #1
    5138:	add	r0, r0, #4
    513c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    5140:	strh	r0, [fp, #-6]
    5144:	ldrh	r0, [fp, #-6]
    5148:	cmp	r0, #0
    514c:	movw	r0, #0
    5150:	movne	r0, #1
    5154:	and	r0, r0, #1
    5158:	mov	sp, fp
    515c:	pop	{fp, pc}

00005160 <gen_monster>:
    5160:	push	{r4, r5, fp, lr}
    5164:	add	fp, sp, #8
    5168:	sub	sp, sp, #336	; 0x150
    516c:	str	r0, [fp, #-12]
    5170:	str	r1, [fp, #-16]
    5174:	movw	r0, #0
    5178:	movt	r0, #0
    517c:	ldrb	r1, [r0]
    5180:	strb	r1, [fp, #-26]	; 0xffffffe6
    5184:	ldrb	r1, [r0, #1]
    5188:	strb	r1, [fp, #-25]	; 0xffffffe7
    518c:	ldrb	r1, [r0, #2]
    5190:	strb	r1, [fp, #-24]	; 0xffffffe8
    5194:	ldrb	r1, [r0, #3]
    5198:	strb	r1, [fp, #-23]	; 0xffffffe9
    519c:	ldrb	r1, [r0, #4]
    51a0:	strb	r1, [fp, #-22]	; 0xffffffea
    51a4:	ldrb	r1, [r0, #5]
    51a8:	strb	r1, [fp, #-21]	; 0xffffffeb
    51ac:	ldrb	r1, [r0, #6]
    51b0:	strb	r1, [fp, #-20]	; 0xffffffec
    51b4:	ldrb	r1, [r0, #7]
    51b8:	strb	r1, [fp, #-19]	; 0xffffffed
    51bc:	ldrb	r1, [r0, #8]
    51c0:	strb	r1, [fp, #-18]	; 0xffffffee
    51c4:	ldrb	r0, [r0, #9]
    51c8:	strb	r0, [fp, #-17]	; 0xffffffef
    51cc:	movw	r0, #0
    51d0:	movt	r0, #0
    51d4:	ldrb	r1, [r0]
    51d8:	strb	r1, [fp, #-80]	; 0xffffffb0
    51dc:	ldrb	r1, [r0, #1]
    51e0:	strb	r1, [fp, #-79]	; 0xffffffb1
    51e4:	ldrb	r1, [r0, #2]
    51e8:	strb	r1, [fp, #-78]	; 0xffffffb2
    51ec:	ldrb	r0, [r0, #3]
    51f0:	strb	r0, [fp, #-77]	; 0xffffffb3
    51f4:	ldr	r0, [fp, #-12]
    51f8:	bl	0 <flatcc_builder_reset>
    51fc:	ldr	r1, [fp, #-16]
    5200:	cmp	r1, #0
    5204:	str	r0, [fp, #-108]	; 0xffffff94
    5208:	beq	521c <gen_monster+0xbc>
    520c:	ldr	r0, [fp, #-12]
    5210:	bl	5940 <MyGame_Example_Monster_start_as_root_with_size>
    5214:	str	r0, [fp, #-112]	; 0xffffff90
    5218:	b	5228 <gen_monster+0xc8>
    521c:	ldr	r0, [fp, #-12]
    5220:	bl	598c <MyGame_Example_Monster_start_as_root>
    5224:	str	r0, [fp, #-116]	; 0xffffff8c
    5228:	ldr	r0, [fp, #-12]
    522c:	movw	r1, #80	; 0x50
    5230:	sxth	r1, r1
    5234:	bl	59d8 <MyGame_Example_Monster_hp_add>
    5238:	ldr	r1, [fp, #-12]
    523c:	str	r0, [fp, #-120]	; 0xffffff88
    5240:	mov	r0, r1
    5244:	bl	5a60 <MyGame_Example_Monster_pos_start>
    5248:	vldr	s0, [pc, #928]	; 55f0 <gen_monster+0x490>
    524c:	str	r0, [fp, #-32]	; 0xffffffe0
    5250:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5254:	vmov.f32	s2, #112	; 0x3f800000  1.0
    5258:	vstr	s2, [r0]
    525c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5260:	vmov.f32	s2, #0	; 0x40000000  2.0
    5264:	vstr	s2, [r0, #4]
    5268:	ldr	r0, [fp, #-32]	; 0xffffffe0
    526c:	vstr	s0, [r0, #8]
    5270:	ldr	r0, [fp, #-12]
    5274:	bl	5a90 <MyGame_Example_Monster_pos_end>
    5278:	ldr	r1, [fp, #-12]
    527c:	str	r0, [fp, #-124]	; 0xffffff84
    5280:	mov	r0, r1
    5284:	movw	r1, #0
    5288:	movt	r1, #0
    528c:	bl	1870 <MyGame_Example_Monster_name_create_str>
    5290:	ldr	r1, [fp, #-12]
    5294:	str	r0, [fp, #-128]	; 0xffffff80
    5298:	mov	r0, r1
    529c:	movw	r1, #2
    52a0:	sxtb	r1, r1
    52a4:	bl	5aa4 <MyGame_Example_Monster_color_add>
    52a8:	sub	r1, fp, #26
    52ac:	ldr	lr, [fp, #-12]
    52b0:	str	r0, [fp, #-132]	; 0xffffff7c
    52b4:	mov	r0, lr
    52b8:	movw	r2, #10
    52bc:	bl	5b28 <MyGame_Example_Monster_inventory_create>
    52c0:	ldr	r1, [fp, #-12]
    52c4:	str	r0, [fp, #-136]	; 0xffffff78
    52c8:	mov	r0, r1
    52cc:	bl	5b80 <MyGame_Example_Monster_test4_start>
    52d0:	ldr	r1, [fp, #-12]
    52d4:	str	r0, [fp, #-140]	; 0xffffff74
    52d8:	mov	r0, r1
    52dc:	movw	r1, #1
    52e0:	bl	5ba0 <MyGame_Example_Monster_test4_extend>
    52e4:	str	r0, [fp, #-36]	; 0xffffffdc
    52e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    52ec:	movw	r1, #16
    52f0:	strh	r1, [r0]
    52f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    52f8:	movw	r1, #32
    52fc:	strb	r1, [r0, #2]
    5300:	ldr	r0, [fp, #-12]
    5304:	movw	r1, #2
    5308:	bl	5ba0 <MyGame_Example_Monster_test4_extend>
    530c:	str	r0, [fp, #-36]	; 0xffffffdc
    5310:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5314:	movw	r1, #48	; 0x30
    5318:	strh	r1, [r0]
    531c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5320:	movw	r1, #64	; 0x40
    5324:	strb	r1, [r0, #2]
    5328:	ldr	r0, [fp, #-36]	; 0xffffffdc
    532c:	movw	r1, #80	; 0x50
    5330:	strh	r1, [r0, #4]
    5334:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5338:	movw	r1, #96	; 0x60
    533c:	strb	r1, [r0, #6]
    5340:	ldr	r0, [fp, #-12]
    5344:	movw	r1, #112	; 0x70
    5348:	sxth	r1, r1
    534c:	movw	r2, #128	; 0x80
    5350:	sxtb	r2, r2
    5354:	bl	5bc8 <MyGame_Example_Monster_test4_push_create>
    5358:	movw	r1, #400	; 0x190
    535c:	strh	r1, [fp, #-40]	; 0xffffffd8
    5360:	movw	r1, #145	; 0x91
    5364:	strb	r1, [fp, #-38]	; 0xffffffda
    5368:	ldr	r1, [fp, #-12]
    536c:	str	r0, [fp, #-144]	; 0xffffff70
    5370:	mov	r0, r1
    5374:	sub	r1, fp, #40	; 0x28
    5378:	bl	5c30 <MyGame_Example_Monster_test4_push>
    537c:	ldr	r1, [fp, #-12]
    5380:	str	r0, [fp, #-148]	; 0xffffff6c
    5384:	mov	r0, r1
    5388:	sub	r1, fp, #40	; 0x28
    538c:	bl	5c30 <MyGame_Example_Monster_test4_push>
    5390:	ldr	r1, [fp, #-12]
    5394:	str	r0, [fp, #-152]	; 0xffffff68
    5398:	mov	r0, r1
    539c:	sub	r1, fp, #40	; 0x28
    53a0:	bl	5cb0 <MyGame_Example_Test_vec_push>
    53a4:	ldr	r1, [fp, #-12]
    53a8:	str	r0, [fp, #-156]	; 0xffffff64
    53ac:	mov	r0, r1
    53b0:	bl	5d30 <MyGame_Example_Monster_test4_reserved_len>
    53b4:	cmp	r0, #7
    53b8:	bne	53c0 <gen_monster+0x260>
    53bc:	b	53e0 <gen_monster+0x280>
    53c0:	movw	r0, #0
    53c4:	movt	r0, #0
    53c8:	movw	r1, #0
    53cc:	movt	r1, #0
    53d0:	movw	r2, #881	; 0x371
    53d4:	movw	r3, #0
    53d8:	movt	r3, #0
    53dc:	bl	0 <__assert_fail>
    53e0:	ldr	r0, [fp, #-12]
    53e4:	movw	r1, #2
    53e8:	bl	5d50 <MyGame_Example_Monster_test4_truncate>
    53ec:	ldr	r1, [fp, #-12]
    53f0:	str	r0, [fp, #-160]	; 0xffffff60
    53f4:	mov	r0, r1
    53f8:	bl	5d30 <MyGame_Example_Monster_test4_reserved_len>
    53fc:	cmp	r0, #5
    5400:	bne	5408 <gen_monster+0x2a8>
    5404:	b	5428 <gen_monster+0x2c8>
    5408:	movw	r0, #0
    540c:	movt	r0, #0
    5410:	movw	r1, #0
    5414:	movt	r1, #0
    5418:	movw	r2, #883	; 0x373
    541c:	movw	r3, #0
    5420:	movt	r3, #0
    5424:	bl	0 <__assert_fail>
    5428:	ldr	r0, [fp, #-12]
    542c:	bl	5d78 <MyGame_Example_Monster_test4_edit>
    5430:	str	r0, [fp, #-36]	; 0xffffffdc
    5434:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5438:	ldrsh	lr, [r0, #16]
    543c:	add	lr, lr, #1
    5440:	strh	lr, [r0, #16]
    5444:	ldr	r0, [fp, #-12]
    5448:	bl	5d98 <MyGame_Example_Monster_test4_end>
    544c:	ldr	lr, [fp, #-12]
    5450:	str	r0, [fp, #-164]	; 0xffffff5c
    5454:	mov	r0, lr
    5458:	bl	184c <MyGame_Example_Monster_start>
    545c:	ldr	lr, [fp, #-12]
    5460:	str	r0, [fp, #-168]	; 0xffffff58
    5464:	mov	r0, lr
    5468:	movw	r1, #0
    546c:	movt	r1, #0
    5470:	movw	r2, #7
    5474:	bl	5dd8 <flatbuffers_string_create>
    5478:	str	r0, [fp, #-64]	; 0xffffffc0
    547c:	ldr	r0, [fp, #-12]
    5480:	ldr	r1, [fp, #-64]	; 0xffffffc0
    5484:	bl	5e08 <MyGame_Example_Monster_name_add>
    5488:	ldr	r1, [fp, #-12]
    548c:	str	r0, [sp, #172]	; 0xac
    5490:	mov	r0, r1
    5494:	bl	18bc <MyGame_Example_Monster_end>
    5498:	str	r0, [fp, #-44]	; 0xffffffd4
    549c:	ldr	r0, [fp, #-12]
    54a0:	bl	5e74 <MyGame_Example_Monster_testarrayoftables_start>
    54a4:	ldr	r1, [fp, #-12]
    54a8:	str	r0, [sp, #168]	; 0xa8
    54ac:	mov	r0, r1
    54b0:	movw	r1, #2
    54b4:	bl	5e94 <MyGame_Example_Monster_testarrayoftables_extend>
    54b8:	str	r0, [fp, #-60]	; 0xffffffc4
    54bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    54c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    54c4:	str	r0, [r1]
    54c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    54cc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    54d0:	str	r0, [r1, #4]
    54d4:	ldr	r0, [fp, #-12]
    54d8:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    54dc:	ldr	r1, [fp, #-12]
    54e0:	str	r0, [sp, #164]	; 0xa4
    54e4:	mov	r0, r1
    54e8:	movw	r1, #0
    54ec:	movt	r1, #0
    54f0:	movw	r2, #30
    54f4:	bl	5edc <MyGame_Example_Monster_name_create_strn>
    54f8:	ldr	r1, [fp, #-12]
    54fc:	str	r0, [sp, #160]	; 0xa0
    5500:	mov	r0, r1
    5504:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    5508:	ldr	r0, [r0]
    550c:	str	r0, [fp, #-48]	; 0xffffffd0
    5510:	ldr	r0, [fp, #-12]
    5514:	movw	r1, #3
    5518:	bl	5e94 <MyGame_Example_Monster_testarrayoftables_extend>
    551c:	str	r0, [fp, #-60]	; 0xffffffc4
    5520:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5524:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5528:	str	r0, [r1]
    552c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    5530:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5534:	str	r0, [r1, #4]
    5538:	ldr	r0, [fp, #-12]
    553c:	movw	r1, #1
    5540:	bl	5f74 <MyGame_Example_Monster_testarrayoftables_truncate>
    5544:	ldr	r1, [fp, #-12]
    5548:	str	r0, [sp, #156]	; 0x9c
    554c:	mov	r0, r1
    5550:	bl	5f9c <MyGame_Example_Monster_testarrayoftables_reserved_len>
    5554:	cmp	r0, #5
    5558:	bne	5560 <gen_monster+0x400>
    555c:	b	5580 <gen_monster+0x420>
    5560:	movw	r0, #0
    5564:	movt	r0, #0
    5568:	movw	r1, #0
    556c:	movt	r1, #0
    5570:	movw	r2, #923	; 0x39b
    5574:	movw	r3, #0
    5578:	movt	r3, #0
    557c:	bl	0 <__assert_fail>
    5580:	ldr	r0, [fp, #-12]
    5584:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    5588:	ldr	lr, [fp, #-12]
    558c:	str	r0, [sp, #152]	; 0x98
    5590:	mov	r0, lr
    5594:	movw	r1, #0
    5598:	movt	r1, #0
    559c:	movw	r2, #8
    55a0:	bl	5edc <MyGame_Example_Monster_name_create_strn>
    55a4:	ldr	r1, [fp, #-12]
    55a8:	str	r0, [sp, #148]	; 0x94
    55ac:	mov	r0, r1
    55b0:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    55b4:	ldr	r0, [r0]
    55b8:	str	r0, [fp, #-56]	; 0xffffffc8
    55bc:	ldr	r0, [fp, #-12]
    55c0:	bl	5f9c <MyGame_Example_Monster_testarrayoftables_reserved_len>
    55c4:	cmp	r0, #6
    55c8:	bne	55d0 <gen_monster+0x470>
    55cc:	b	55f4 <gen_monster+0x494>
    55d0:	movw	r0, #0
    55d4:	movt	r0, #0
    55d8:	movw	r1, #0
    55dc:	movt	r1, #0
    55e0:	movw	r2, #929	; 0x3a1
    55e4:	movw	r3, #0
    55e8:	movt	r3, #0
    55ec:	bl	0 <__assert_fail>
    55f0:	.word	0xc04ccccd
    55f4:	ldr	r0, [fp, #-12]
    55f8:	bl	5fbc <MyGame_Example_Monster_testarrayoftables_edit>
    55fc:	str	r0, [fp, #-60]	; 0xffffffc4
    5600:	ldr	r0, [fp, #-60]	; 0xffffffc4
    5604:	ldr	r0, [r0, #20]
    5608:	str	r0, [fp, #-48]	; 0xffffffd0
    560c:	ldr	r0, [fp, #-60]	; 0xffffffc4
    5610:	ldr	r0, [r0, #8]
    5614:	str	r0, [fp, #-52]	; 0xffffffcc
    5618:	ldr	r0, [fp, #-44]	; 0xffffffd4
    561c:	ldr	lr, [fp, #-60]	; 0xffffffc4
    5620:	str	r0, [lr, #20]
    5624:	ldr	r0, [fp, #-48]	; 0xffffffd0
    5628:	ldr	lr, [fp, #-60]	; 0xffffffc4
    562c:	str	r0, [lr]
    5630:	ldr	r0, [fp, #-12]
    5634:	sub	r1, fp, #56	; 0x38
    5638:	mov	lr, #2
    563c:	mov	r2, lr
    5640:	str	lr, [sp, #144]	; 0x90
    5644:	bl	5fdc <MyGame_Example_Monster_testarrayoftables_append>
    5648:	ldr	r1, [fp, #-12]
    564c:	str	r0, [sp, #140]	; 0x8c
    5650:	mov	r0, r1
    5654:	bl	600c <MyGame_Example_Monster_testarrayoftables_end>
    5658:	ldr	r1, [fp, #-12]
    565c:	movw	r2, #0
    5660:	movt	r2, #0
    5664:	str	r0, [sp, #136]	; 0x88
    5668:	mov	r0, r1
    566c:	mov	r1, r2
    5670:	bl	604c <flatbuffers_string_create_str>
    5674:	str	r0, [fp, #-76]	; 0xffffffb4
    5678:	ldr	r0, [fp, #-12]
    567c:	movw	r1, #0
    5680:	movt	r1, #0
    5684:	ldr	r2, [sp, #144]	; 0x90
    5688:	bl	5dd8 <flatbuffers_string_create>
    568c:	str	r0, [fp, #-72]	; 0xffffffb8
    5690:	ldr	r0, [fp, #-12]
    5694:	movw	r1, #0
    5698:	movt	r1, #0
    569c:	bl	604c <flatbuffers_string_create_str>
    56a0:	str	r0, [fp, #-68]	; 0xffffffbc
    56a4:	ldr	r0, [fp, #-12]
    56a8:	sub	r1, fp, #76	; 0x4c
    56ac:	mov	r2, #3
    56b0:	str	r2, [sp, #132]	; 0x84
    56b4:	bl	6074 <MyGame_Example_Monster_testarrayofstring_create>
    56b8:	ldr	r1, [fp, #-12]
    56bc:	str	r0, [sp, #128]	; 0x80
    56c0:	mov	r0, r1
    56c4:	bl	60cc <MyGame_Example_Monster_testarrayofbools_start>
    56c8:	ldr	r1, [fp, #-12]
    56cc:	sub	r2, fp, #80	; 0x50
    56d0:	mov	lr, #1
    56d4:	str	r0, [sp, #124]	; 0x7c
    56d8:	mov	r0, r1
    56dc:	mov	r1, r2
    56e0:	str	r2, [sp, #120]	; 0x78
    56e4:	mov	r2, lr
    56e8:	bl	60ec <MyGame_Example_Monster_testarrayofbools_append>
    56ec:	ldr	r1, [fp, #-12]
    56f0:	ldr	r2, [sp, #120]	; 0x78
    56f4:	add	lr, r2, #1
    56f8:	str	r0, [sp, #116]	; 0x74
    56fc:	mov	r0, r1
    5700:	mov	r1, lr
    5704:	ldr	r2, [sp, #132]	; 0x84
    5708:	bl	60ec <MyGame_Example_Monster_testarrayofbools_append>
    570c:	ldr	r1, [fp, #-12]
    5710:	str	r0, [sp, #112]	; 0x70
    5714:	mov	r0, r1
    5718:	bl	611c <MyGame_Example_Monster_testarrayofbools_end>
    571c:	ldr	r1, [fp, #-12]
    5720:	ldr	r2, [fp, #-44]	; 0xffffffd4
    5724:	sub	lr, fp, #88	; 0x58
    5728:	str	r0, [sp, #108]	; 0x6c
    572c:	mov	r0, lr
    5730:	str	r1, [sp, #104]	; 0x68
    5734:	mov	r1, r2
    5738:	bl	6220 <MyGame_Example_Any_as_Monster>
    573c:	ldr	r1, [fp, #-88]	; 0xffffffa8
    5740:	ldr	r2, [fp, #-84]	; 0xffffffac
    5744:	ldr	r0, [sp, #104]	; 0x68
    5748:	bl	615c <MyGame_Example_Monster_test_add>
    574c:	ldr	r1, [fp, #-12]
    5750:	str	r0, [sp, #100]	; 0x64
    5754:	mov	r0, r1
    5758:	bl	6240 <MyGame_Example_Monster_enemy_start>
    575c:	ldr	r1, [fp, #-12]
    5760:	movw	r2, #0
    5764:	movt	r2, #0
    5768:	str	r0, [sp, #96]	; 0x60
    576c:	mov	r0, r1
    5770:	mov	r1, r2
    5774:	bl	1870 <MyGame_Example_Monster_name_create_str>
    5778:	ldr	r1, [fp, #-12]
    577c:	str	r0, [sp, #92]	; 0x5c
    5780:	mov	r0, r1
    5784:	bl	5e74 <MyGame_Example_Monster_testarrayoftables_start>
    5788:	ldr	r1, [fp, #-12]
    578c:	str	r0, [sp, #88]	; 0x58
    5790:	mov	r0, r1
    5794:	bl	6260 <MyGame_Example_Monster_vec_push_start>
    5798:	ldr	r1, [fp, #-12]
    579c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    57a0:	sub	lr, fp, #96	; 0x60
    57a4:	str	r0, [sp, #84]	; 0x54
    57a8:	mov	r0, lr
    57ac:	str	r1, [sp, #80]	; 0x50
    57b0:	mov	r1, r2
    57b4:	bl	6220 <MyGame_Example_Any_as_Monster>
    57b8:	ldr	r1, [fp, #-96]	; 0xffffffa0
    57bc:	ldr	r2, [fp, #-92]	; 0xffffffa4
    57c0:	ldr	r0, [sp, #80]	; 0x50
    57c4:	bl	615c <MyGame_Example_Monster_test_add>
    57c8:	ldr	r1, [fp, #-12]
    57cc:	movw	r2, #0
    57d0:	movt	r2, #0
    57d4:	str	r0, [sp, #76]	; 0x4c
    57d8:	mov	r0, r1
    57dc:	mov	r1, r2
    57e0:	str	r2, [sp, #72]	; 0x48
    57e4:	bl	1870 <MyGame_Example_Monster_name_create_str>
    57e8:	ldr	r1, [fp, #-12]
    57ec:	str	r0, [sp, #68]	; 0x44
    57f0:	mov	r0, r1
    57f4:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    57f8:	ldr	r1, [fp, #-12]
    57fc:	str	r0, [sp, #64]	; 0x40
    5800:	mov	r0, r1
    5804:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    5808:	ldr	r1, [fp, #-12]
    580c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    5810:	str	r0, [sp, #60]	; 0x3c
    5814:	mov	r0, r1
    5818:	mov	r1, r2
    581c:	bl	6280 <MyGame_Example_Monster_test_Monster_add>
    5820:	ldr	r1, [fp, #-12]
    5824:	str	r0, [sp, #56]	; 0x38
    5828:	mov	r0, r1
    582c:	ldr	r1, [sp, #72]	; 0x48
    5830:	bl	1870 <MyGame_Example_Monster_name_create_str>
    5834:	ldr	r1, [fp, #-12]
    5838:	str	r0, [sp, #52]	; 0x34
    583c:	mov	r0, r1
    5840:	bl	62c4 <MyGame_Example_Monster_vec_push_end>
    5844:	ldr	r1, [fp, #-12]
    5848:	str	r0, [sp, #48]	; 0x30
    584c:	mov	r0, r1
    5850:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    5854:	ldr	r1, [fp, #-12]
    5858:	ldr	r2, [fp, #-44]	; 0xffffffd4
    585c:	sub	lr, fp, #104	; 0x68
    5860:	str	r0, [sp, #44]	; 0x2c
    5864:	mov	r0, lr
    5868:	str	r1, [sp, #40]	; 0x28
    586c:	mov	r1, r2
    5870:	bl	6220 <MyGame_Example_Any_as_Monster>
    5874:	ldr	r1, [fp, #-104]	; 0xffffff98
    5878:	ldr	r2, [fp, #-100]	; 0xffffff9c
    587c:	ldr	r0, [sp, #40]	; 0x28
    5880:	bl	6304 <MyGame_Example_Monster_test_add_value>
    5884:	ldr	r1, [fp, #-12]
    5888:	str	r0, [sp, #36]	; 0x24
    588c:	mov	r0, r1
    5890:	movw	r1, #0
    5894:	movt	r1, #0
    5898:	bl	1870 <MyGame_Example_Monster_name_create_str>
    589c:	ldr	r1, [fp, #-12]
    58a0:	str	r0, [sp, #32]
    58a4:	mov	r0, r1
    58a8:	movw	r1, #1
    58ac:	and	r1, r1, #255	; 0xff
    58b0:	bl	6388 <MyGame_Example_Monster_test_add_type>
    58b4:	ldr	r1, [fp, #-12]
    58b8:	str	r0, [sp, #28]
    58bc:	mov	r0, r1
    58c0:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    58c4:	ldr	r1, [fp, #-12]
    58c8:	str	r0, [sp, #24]
    58cc:	mov	r0, r1
    58d0:	bl	600c <MyGame_Example_Monster_testarrayoftables_end>
    58d4:	ldr	r1, [fp, #-12]
    58d8:	str	r0, [sp, #20]
    58dc:	mov	r0, r1
    58e0:	bl	6414 <MyGame_Example_Monster_enemy_end>
    58e4:	ldr	r1, [fp, #-12]
    58e8:	str	r0, [sp, #16]
    58ec:	mov	r0, r1
    58f0:	movw	r1, #0
    58f4:	and	r1, r1, #255	; 0xff
    58f8:	bl	6454 <MyGame_Example_Monster_testbool_add>
    58fc:	ldr	r1, [fp, #-12]
    5900:	str	r0, [sp, #12]
    5904:	mov	r0, r1
    5908:	bl	64d8 <MyGame_Example_Monster_testempty_start>
    590c:	ldr	r1, [fp, #-12]
    5910:	str	r0, [sp, #8]
    5914:	mov	r0, r1
    5918:	bl	64f8 <MyGame_Example_Monster_testempty_end>
    591c:	ldr	r1, [fp, #-12]
    5920:	str	r0, [sp, #4]
    5924:	mov	r0, r1
    5928:	bl	6538 <MyGame_Example_Monster_end_as_root>
    592c:	movw	r1, #0
    5930:	str	r0, [sp]
    5934:	mov	r0, r1
    5938:	sub	sp, fp, #8
    593c:	pop	{r4, r5, fp, pc}

00005940 <MyGame_Example_Monster_start_as_root_with_size>:
    5940:	push	{fp, lr}
    5944:	mov	fp, sp
    5948:	sub	sp, sp, #8
    594c:	str	r0, [sp, #4]
    5950:	ldr	r0, [sp, #4]
    5954:	movw	r1, #0
    5958:	movt	r1, #0
    595c:	bl	12188 <flatbuffers_buffer_start_with_size>
    5960:	cmp	r0, #0
    5964:	beq	5974 <MyGame_Example_Monster_start_as_root_with_size+0x34>
    5968:	mvn	r0, #0
    596c:	str	r0, [sp]
    5970:	b	5980 <MyGame_Example_Monster_start_as_root_with_size+0x40>
    5974:	ldr	r0, [sp, #4]
    5978:	bl	184c <MyGame_Example_Monster_start>
    597c:	str	r0, [sp]
    5980:	ldr	r0, [sp]
    5984:	mov	sp, fp
    5988:	pop	{fp, pc}

0000598c <MyGame_Example_Monster_start_as_root>:
    598c:	push	{fp, lr}
    5990:	mov	fp, sp
    5994:	sub	sp, sp, #8
    5998:	str	r0, [sp, #4]
    599c:	ldr	r0, [sp, #4]
    59a0:	movw	r1, #0
    59a4:	movt	r1, #0
    59a8:	bl	1818 <flatbuffers_buffer_start>
    59ac:	cmp	r0, #0
    59b0:	beq	59c0 <MyGame_Example_Monster_start_as_root+0x34>
    59b4:	mvn	r0, #0
    59b8:	str	r0, [sp]
    59bc:	b	59cc <MyGame_Example_Monster_start_as_root+0x40>
    59c0:	ldr	r0, [sp, #4]
    59c4:	bl	184c <MyGame_Example_Monster_start>
    59c8:	str	r0, [sp]
    59cc:	ldr	r0, [sp]
    59d0:	mov	sp, fp
    59d4:	pop	{fp, pc}

000059d8 <MyGame_Example_Monster_hp_add>:
    59d8:	push	{fp, lr}
    59dc:	mov	fp, sp
    59e0:	sub	sp, sp, #24
    59e4:	str	r0, [fp, #-8]
    59e8:	strh	r1, [fp, #-10]
    59ec:	ldrsh	r0, [fp, #-10]
    59f0:	cmp	r0, #100	; 0x64
    59f4:	bne	5a04 <MyGame_Example_Monster_hp_add+0x2c>
    59f8:	movw	r0, #0
    59fc:	str	r0, [fp, #-4]
    5a00:	b	5a54 <MyGame_Example_Monster_hp_add+0x7c>
    5a04:	ldr	r0, [fp, #-8]
    5a08:	movw	r1, #2
    5a0c:	str	r1, [sp, #4]
    5a10:	ldr	r2, [sp, #4]
    5a14:	movw	r3, #2
    5a18:	uxth	r3, r3
    5a1c:	bl	0 <flatcc_builder_table_add>
    5a20:	str	r0, [sp, #8]
    5a24:	movw	r1, #0
    5a28:	cmp	r0, r1
    5a2c:	bne	5a3c <MyGame_Example_Monster_hp_add+0x64>
    5a30:	mvn	r0, #0
    5a34:	str	r0, [fp, #-4]
    5a38:	b	5a54 <MyGame_Example_Monster_hp_add+0x7c>
    5a3c:	ldr	r0, [sp, #8]
    5a40:	ldrsh	r1, [fp, #-10]
    5a44:	bl	104a0 <flatbuffers_int16_assign_to_pe>
    5a48:	movw	r1, #0
    5a4c:	str	r1, [fp, #-4]
    5a50:	str	r0, [sp]
    5a54:	ldr	r0, [fp, #-4]
    5a58:	mov	sp, fp
    5a5c:	pop	{fp, pc}

00005a60 <MyGame_Example_Monster_pos_start>:
    5a60:	push	{fp, lr}
    5a64:	mov	fp, sp
    5a68:	sub	sp, sp, #8
    5a6c:	str	r0, [sp, #4]
    5a70:	ldr	r0, [sp, #4]
    5a74:	movw	r1, #0
    5a78:	movw	r2, #32
    5a7c:	movw	r3, #16
    5a80:	uxth	r3, r3
    5a84:	bl	0 <flatcc_builder_table_add>
    5a88:	mov	sp, fp
    5a8c:	pop	{fp, pc}

00005a90 <MyGame_Example_Monster_pos_end>:
    5a90:	sub	sp, sp, #4
    5a94:	str	r0, [sp]
    5a98:	movw	r0, #0
    5a9c:	add	sp, sp, #4
    5aa0:	bx	lr

00005aa4 <MyGame_Example_Monster_color_add>:
    5aa4:	push	{fp, lr}
    5aa8:	mov	fp, sp
    5aac:	sub	sp, sp, #24
    5ab0:	str	r0, [fp, #-8]
    5ab4:	strb	r1, [fp, #-9]
    5ab8:	ldrsb	r0, [fp, #-9]
    5abc:	cmp	r0, #8
    5ac0:	bne	5ad0 <MyGame_Example_Monster_color_add+0x2c>
    5ac4:	movw	r0, #0
    5ac8:	str	r0, [fp, #-4]
    5acc:	b	5b1c <MyGame_Example_Monster_color_add+0x78>
    5ad0:	ldr	r0, [fp, #-8]
    5ad4:	movw	r1, #6
    5ad8:	movw	r2, #1
    5adc:	movw	r3, #1
    5ae0:	uxth	r3, r3
    5ae4:	bl	0 <flatcc_builder_table_add>
    5ae8:	str	r0, [sp, #8]
    5aec:	movw	r1, #0
    5af0:	cmp	r0, r1
    5af4:	bne	5b04 <MyGame_Example_Monster_color_add+0x60>
    5af8:	mvn	r0, #0
    5afc:	str	r0, [fp, #-4]
    5b00:	b	5b1c <MyGame_Example_Monster_color_add+0x78>
    5b04:	ldr	r0, [sp, #8]
    5b08:	ldrsb	r1, [fp, #-9]
    5b0c:	bl	121bc <MyGame_Example_Color_assign_to_pe>
    5b10:	movw	r1, #0
    5b14:	str	r1, [fp, #-4]
    5b18:	str	r0, [sp, #4]
    5b1c:	ldr	r0, [fp, #-4]
    5b20:	mov	sp, fp
    5b24:	pop	{fp, pc}

00005b28 <MyGame_Example_Monster_inventory_create>:
    5b28:	push	{fp, lr}
    5b2c:	mov	fp, sp
    5b30:	sub	sp, sp, #24
    5b34:	str	r0, [fp, #-4]
    5b38:	str	r1, [fp, #-8]
    5b3c:	str	r2, [sp, #12]
    5b40:	ldr	r0, [fp, #-4]
    5b44:	ldr	r1, [fp, #-4]
    5b48:	ldr	r2, [fp, #-8]
    5b4c:	ldr	r3, [sp, #12]
    5b50:	str	r0, [sp, #8]
    5b54:	mov	r0, r1
    5b58:	mov	r1, r2
    5b5c:	mov	r2, r3
    5b60:	bl	8e8 <flatbuffers_uint8_vec_create>
    5b64:	ldr	r1, [sp, #8]
    5b68:	str	r0, [sp, #4]
    5b6c:	mov	r0, r1
    5b70:	ldr	r1, [sp, #4]
    5b74:	bl	12200 <MyGame_Example_Monster_inventory_add>
    5b78:	mov	sp, fp
    5b7c:	pop	{fp, pc}

00005b80 <MyGame_Example_Monster_test4_start>:
    5b80:	push	{fp, lr}
    5b84:	mov	fp, sp
    5b88:	sub	sp, sp, #8
    5b8c:	str	r0, [sp, #4]
    5b90:	ldr	r0, [sp, #4]
    5b94:	bl	1226c <MyGame_Example_Test_vec_start>
    5b98:	mov	sp, fp
    5b9c:	pop	{fp, pc}

00005ba0 <MyGame_Example_Monster_test4_extend>:
    5ba0:	push	{fp, lr}
    5ba4:	mov	fp, sp
    5ba8:	sub	sp, sp, #8
    5bac:	str	r0, [sp, #4]
    5bb0:	str	r1, [sp]
    5bb4:	ldr	r0, [sp, #4]
    5bb8:	ldr	r1, [sp]
    5bbc:	bl	0 <flatcc_builder_extend_vector>
    5bc0:	mov	sp, fp
    5bc4:	pop	{fp, pc}

00005bc8 <MyGame_Example_Monster_test4_push_create>:
    5bc8:	push	{fp, lr}
    5bcc:	mov	fp, sp
    5bd0:	sub	sp, sp, #16
    5bd4:	str	r0, [fp, #-4]
    5bd8:	strh	r1, [fp, #-6]
    5bdc:	strb	r2, [fp, #-7]
    5be0:	ldr	r0, [fp, #-4]
    5be4:	movw	r1, #1
    5be8:	bl	0 <flatcc_builder_extend_vector>
    5bec:	str	r0, [sp, #4]
    5bf0:	movw	r1, #0
    5bf4:	cmp	r0, r1
    5bf8:	beq	5c18 <MyGame_Example_Monster_test4_push_create+0x50>
    5bfc:	ldr	r0, [sp, #4]
    5c00:	ldrh	r1, [fp, #-6]
    5c04:	sxth	r1, r1
    5c08:	ldrsb	r2, [fp, #-7]
    5c0c:	bl	122a0 <MyGame_Example_Test_assign>
    5c10:	str	r0, [sp]
    5c14:	b	5c24 <MyGame_Example_Monster_test4_push_create+0x5c>
    5c18:	movw	r0, #0
    5c1c:	str	r0, [sp]
    5c20:	b	5c24 <MyGame_Example_Monster_test4_push_create+0x5c>
    5c24:	ldr	r0, [sp]
    5c28:	mov	sp, fp
    5c2c:	pop	{fp, pc}

00005c30 <MyGame_Example_Monster_test4_push>:
    5c30:	push	{fp, lr}
    5c34:	mov	fp, sp
    5c38:	sub	sp, sp, #32
    5c3c:	str	r0, [fp, #-4]
    5c40:	str	r1, [fp, #-8]
    5c44:	ldr	r0, [fp, #-4]
    5c48:	movw	r1, #1
    5c4c:	bl	0 <flatcc_builder_extend_vector>
    5c50:	str	r0, [fp, #-12]
    5c54:	movw	r1, #0
    5c58:	cmp	r0, r1
    5c5c:	beq	5c98 <MyGame_Example_Monster_test4_push+0x68>
    5c60:	ldr	r0, [fp, #-12]
    5c64:	ldr	r1, [fp, #-8]
    5c68:	str	r0, [sp, #16]
    5c6c:	str	r1, [sp, #12]
    5c70:	bl	122d4 <MyGame_Example_Test__size>
    5c74:	ldr	r1, [sp, #16]
    5c78:	str	r0, [sp, #8]
    5c7c:	mov	r0, r1
    5c80:	ldr	r1, [sp, #12]
    5c84:	ldr	r2, [sp, #8]
    5c88:	bl	0 <memcpy>
    5c8c:	ldr	r0, [fp, #-12]
    5c90:	str	r0, [sp, #4]
    5c94:	b	5ca4 <MyGame_Example_Monster_test4_push+0x74>
    5c98:	movw	r0, #0
    5c9c:	str	r0, [sp, #4]
    5ca0:	b	5ca4 <MyGame_Example_Monster_test4_push+0x74>
    5ca4:	ldr	r0, [sp, #4]
    5ca8:	mov	sp, fp
    5cac:	pop	{fp, pc}

00005cb0 <MyGame_Example_Test_vec_push>:
    5cb0:	push	{fp, lr}
    5cb4:	mov	fp, sp
    5cb8:	sub	sp, sp, #32
    5cbc:	str	r0, [fp, #-4]
    5cc0:	str	r1, [fp, #-8]
    5cc4:	ldr	r0, [fp, #-4]
    5cc8:	movw	r1, #1
    5ccc:	bl	0 <flatcc_builder_extend_vector>
    5cd0:	str	r0, [fp, #-12]
    5cd4:	movw	r1, #0
    5cd8:	cmp	r0, r1
    5cdc:	beq	5d18 <MyGame_Example_Test_vec_push+0x68>
    5ce0:	ldr	r0, [fp, #-12]
    5ce4:	ldr	r1, [fp, #-8]
    5ce8:	str	r0, [sp, #16]
    5cec:	str	r1, [sp, #12]
    5cf0:	bl	122d4 <MyGame_Example_Test__size>
    5cf4:	ldr	r1, [sp, #16]
    5cf8:	str	r0, [sp, #8]
    5cfc:	mov	r0, r1
    5d00:	ldr	r1, [sp, #12]
    5d04:	ldr	r2, [sp, #8]
    5d08:	bl	0 <memcpy>
    5d0c:	ldr	r0, [fp, #-12]
    5d10:	str	r0, [sp, #4]
    5d14:	b	5d24 <MyGame_Example_Test_vec_push+0x74>
    5d18:	movw	r0, #0
    5d1c:	str	r0, [sp, #4]
    5d20:	b	5d24 <MyGame_Example_Test_vec_push+0x74>
    5d24:	ldr	r0, [sp, #4]
    5d28:	mov	sp, fp
    5d2c:	pop	{fp, pc}

00005d30 <MyGame_Example_Monster_test4_reserved_len>:
    5d30:	push	{fp, lr}
    5d34:	mov	fp, sp
    5d38:	sub	sp, sp, #8
    5d3c:	str	r0, [sp, #4]
    5d40:	ldr	r0, [sp, #4]
    5d44:	bl	0 <flatcc_builder_vector_count>
    5d48:	mov	sp, fp
    5d4c:	pop	{fp, pc}

00005d50 <MyGame_Example_Monster_test4_truncate>:
    5d50:	push	{fp, lr}
    5d54:	mov	fp, sp
    5d58:	sub	sp, sp, #8
    5d5c:	str	r0, [sp, #4]
    5d60:	str	r1, [sp]
    5d64:	ldr	r0, [sp, #4]
    5d68:	ldr	r1, [sp]
    5d6c:	bl	0 <flatcc_builder_truncate_vector>
    5d70:	mov	sp, fp
    5d74:	pop	{fp, pc}

00005d78 <MyGame_Example_Monster_test4_edit>:
    5d78:	push	{fp, lr}
    5d7c:	mov	fp, sp
    5d80:	sub	sp, sp, #8
    5d84:	str	r0, [sp, #4]
    5d88:	ldr	r0, [sp, #4]
    5d8c:	bl	0 <flatcc_builder_vector_edit>
    5d90:	mov	sp, fp
    5d94:	pop	{fp, pc}

00005d98 <MyGame_Example_Monster_test4_end>:
    5d98:	push	{fp, lr}
    5d9c:	mov	fp, sp
    5da0:	sub	sp, sp, #16
    5da4:	str	r0, [fp, #-4]
    5da8:	ldr	r0, [fp, #-4]
    5dac:	ldr	r1, [fp, #-4]
    5db0:	str	r0, [sp, #8]
    5db4:	mov	r0, r1
    5db8:	bl	12348 <MyGame_Example_Test_vec_end>
    5dbc:	ldr	r1, [sp, #8]
    5dc0:	str	r0, [sp, #4]
    5dc4:	mov	r0, r1
    5dc8:	ldr	r1, [sp, #4]
    5dcc:	bl	122dc <MyGame_Example_Monster_test4_add>
    5dd0:	mov	sp, fp
    5dd4:	pop	{fp, pc}

00005dd8 <flatbuffers_string_create>:
    5dd8:	push	{fp, lr}
    5ddc:	mov	fp, sp
    5de0:	sub	sp, sp, #16
    5de4:	str	r0, [fp, #-4]
    5de8:	str	r1, [sp, #8]
    5dec:	str	r2, [sp, #4]
    5df0:	ldr	r0, [fp, #-4]
    5df4:	ldr	r1, [sp, #8]
    5df8:	ldr	r2, [sp, #4]
    5dfc:	bl	0 <flatcc_builder_create_string>
    5e00:	mov	sp, fp
    5e04:	pop	{fp, pc}

00005e08 <MyGame_Example_Monster_name_add>:
    5e08:	push	{fp, lr}
    5e0c:	mov	fp, sp
    5e10:	sub	sp, sp, #16
    5e14:	str	r0, [fp, #-4]
    5e18:	str	r1, [sp, #8]
    5e1c:	ldr	r0, [sp, #8]
    5e20:	cmp	r0, #0
    5e24:	beq	5e5c <MyGame_Example_Monster_name_add+0x54>
    5e28:	ldr	r0, [fp, #-4]
    5e2c:	movw	r1, #3
    5e30:	bl	0 <flatcc_builder_table_add_offset>
    5e34:	str	r0, [sp, #4]
    5e38:	movw	r1, #0
    5e3c:	cmp	r0, r1
    5e40:	beq	5e5c <MyGame_Example_Monster_name_add+0x54>
    5e44:	ldr	r0, [sp, #8]
    5e48:	ldr	r1, [sp, #4]
    5e4c:	str	r0, [r1]
    5e50:	movw	r0, #0
    5e54:	str	r0, [sp]
    5e58:	b	5e68 <MyGame_Example_Monster_name_add+0x60>
    5e5c:	mvn	r0, #0
    5e60:	str	r0, [sp]
    5e64:	b	5e68 <MyGame_Example_Monster_name_add+0x60>
    5e68:	ldr	r0, [sp]
    5e6c:	mov	sp, fp
    5e70:	pop	{fp, pc}

00005e74 <MyGame_Example_Monster_testarrayoftables_start>:
    5e74:	push	{fp, lr}
    5e78:	mov	fp, sp
    5e7c:	sub	sp, sp, #8
    5e80:	str	r0, [sp, #4]
    5e84:	ldr	r0, [sp, #4]
    5e88:	bl	0 <flatcc_builder_start_offset_vector>
    5e8c:	mov	sp, fp
    5e90:	pop	{fp, pc}

00005e94 <MyGame_Example_Monster_testarrayoftables_extend>:
    5e94:	push	{fp, lr}
    5e98:	mov	fp, sp
    5e9c:	sub	sp, sp, #8
    5ea0:	str	r0, [sp, #4]
    5ea4:	str	r1, [sp]
    5ea8:	ldr	r0, [sp, #4]
    5eac:	ldr	r1, [sp]
    5eb0:	bl	0 <flatcc_builder_extend_offset_vector>
    5eb4:	mov	sp, fp
    5eb8:	pop	{fp, pc}

00005ebc <MyGame_Example_Monster_testarrayoftables_push_start>:
    5ebc:	push	{fp, lr}
    5ec0:	mov	fp, sp
    5ec4:	sub	sp, sp, #8
    5ec8:	str	r0, [sp, #4]
    5ecc:	ldr	r0, [sp, #4]
    5ed0:	bl	184c <MyGame_Example_Monster_start>
    5ed4:	mov	sp, fp
    5ed8:	pop	{fp, pc}

00005edc <MyGame_Example_Monster_name_create_strn>:
    5edc:	push	{fp, lr}
    5ee0:	mov	fp, sp
    5ee4:	sub	sp, sp, #24
    5ee8:	str	r0, [fp, #-4]
    5eec:	str	r1, [fp, #-8]
    5ef0:	str	r2, [sp, #12]
    5ef4:	ldr	r0, [fp, #-4]
    5ef8:	ldr	r1, [fp, #-4]
    5efc:	ldr	r2, [fp, #-8]
    5f00:	ldr	r3, [sp, #12]
    5f04:	str	r0, [sp, #8]
    5f08:	mov	r0, r1
    5f0c:	mov	r1, r2
    5f10:	mov	r2, r3
    5f14:	bl	0 <flatcc_builder_create_string_strn>
    5f18:	ldr	r1, [sp, #8]
    5f1c:	str	r0, [sp, #4]
    5f20:	mov	r0, r1
    5f24:	ldr	r1, [sp, #4]
    5f28:	bl	5e08 <MyGame_Example_Monster_name_add>
    5f2c:	mov	sp, fp
    5f30:	pop	{fp, pc}

00005f34 <MyGame_Example_Monster_testarrayoftables_push_end>:
    5f34:	push	{fp, lr}
    5f38:	mov	fp, sp
    5f3c:	sub	sp, sp, #16
    5f40:	str	r0, [fp, #-4]
    5f44:	ldr	r0, [fp, #-4]
    5f48:	ldr	r1, [fp, #-4]
    5f4c:	str	r0, [sp, #8]
    5f50:	mov	r0, r1
    5f54:	bl	18bc <MyGame_Example_Monster_end>
    5f58:	ldr	r1, [sp, #8]
    5f5c:	str	r0, [sp, #4]
    5f60:	mov	r0, r1
    5f64:	ldr	r1, [sp, #4]
    5f68:	bl	12368 <MyGame_Example_Monster_testarrayoftables_push>
    5f6c:	mov	sp, fp
    5f70:	pop	{fp, pc}

00005f74 <MyGame_Example_Monster_testarrayoftables_truncate>:
    5f74:	push	{fp, lr}
    5f78:	mov	fp, sp
    5f7c:	sub	sp, sp, #8
    5f80:	str	r0, [sp, #4]
    5f84:	str	r1, [sp]
    5f88:	ldr	r0, [sp, #4]
    5f8c:	ldr	r1, [sp]
    5f90:	bl	0 <flatcc_builder_truncate_offset_vector>
    5f94:	mov	sp, fp
    5f98:	pop	{fp, pc}

00005f9c <MyGame_Example_Monster_testarrayoftables_reserved_len>:
    5f9c:	push	{fp, lr}
    5fa0:	mov	fp, sp
    5fa4:	sub	sp, sp, #8
    5fa8:	str	r0, [sp, #4]
    5fac:	ldr	r0, [sp, #4]
    5fb0:	bl	0 <flatcc_builder_offset_vector_count>
    5fb4:	mov	sp, fp
    5fb8:	pop	{fp, pc}

00005fbc <MyGame_Example_Monster_testarrayoftables_edit>:
    5fbc:	push	{fp, lr}
    5fc0:	mov	fp, sp
    5fc4:	sub	sp, sp, #8
    5fc8:	str	r0, [sp, #4]
    5fcc:	ldr	r0, [sp, #4]
    5fd0:	bl	0 <flatcc_builder_offset_vector_edit>
    5fd4:	mov	sp, fp
    5fd8:	pop	{fp, pc}

00005fdc <MyGame_Example_Monster_testarrayoftables_append>:
    5fdc:	push	{fp, lr}
    5fe0:	mov	fp, sp
    5fe4:	sub	sp, sp, #16
    5fe8:	str	r0, [fp, #-4]
    5fec:	str	r1, [sp, #8]
    5ff0:	str	r2, [sp, #4]
    5ff4:	ldr	r0, [fp, #-4]
    5ff8:	ldr	r1, [sp, #8]
    5ffc:	ldr	r2, [sp, #4]
    6000:	bl	0 <flatcc_builder_append_offset_vector>
    6004:	mov	sp, fp
    6008:	pop	{fp, pc}

0000600c <MyGame_Example_Monster_testarrayoftables_end>:
    600c:	push	{fp, lr}
    6010:	mov	fp, sp
    6014:	sub	sp, sp, #16
    6018:	str	r0, [fp, #-4]
    601c:	ldr	r0, [fp, #-4]
    6020:	ldr	r1, [fp, #-4]
    6024:	str	r0, [sp, #8]
    6028:	mov	r0, r1
    602c:	bl	0 <flatcc_builder_end_offset_vector>
    6030:	ldr	r1, [sp, #8]
    6034:	str	r0, [sp, #4]
    6038:	mov	r0, r1
    603c:	ldr	r1, [sp, #4]
    6040:	bl	123b4 <MyGame_Example_Monster_testarrayoftables_add>
    6044:	mov	sp, fp
    6048:	pop	{fp, pc}

0000604c <flatbuffers_string_create_str>:
    604c:	push	{fp, lr}
    6050:	mov	fp, sp
    6054:	sub	sp, sp, #8
    6058:	str	r0, [sp, #4]
    605c:	str	r1, [sp]
    6060:	ldr	r0, [sp, #4]
    6064:	ldr	r1, [sp]
    6068:	bl	0 <flatcc_builder_create_string_str>
    606c:	mov	sp, fp
    6070:	pop	{fp, pc}

00006074 <MyGame_Example_Monster_testarrayofstring_create>:
    6074:	push	{fp, lr}
    6078:	mov	fp, sp
    607c:	sub	sp, sp, #24
    6080:	str	r0, [fp, #-4]
    6084:	str	r1, [fp, #-8]
    6088:	str	r2, [sp, #12]
    608c:	ldr	r0, [fp, #-4]
    6090:	ldr	r1, [fp, #-4]
    6094:	ldr	r2, [fp, #-8]
    6098:	ldr	r3, [sp, #12]
    609c:	str	r0, [sp, #8]
    60a0:	mov	r0, r1
    60a4:	mov	r1, r2
    60a8:	mov	r2, r3
    60ac:	bl	0 <flatcc_builder_create_offset_vector>
    60b0:	ldr	r1, [sp, #8]
    60b4:	str	r0, [sp, #4]
    60b8:	mov	r0, r1
    60bc:	ldr	r1, [sp, #4]
    60c0:	bl	12420 <MyGame_Example_Monster_testarrayofstring_add>
    60c4:	mov	sp, fp
    60c8:	pop	{fp, pc}

000060cc <MyGame_Example_Monster_testarrayofbools_start>:
    60cc:	push	{fp, lr}
    60d0:	mov	fp, sp
    60d4:	sub	sp, sp, #8
    60d8:	str	r0, [sp, #4]
    60dc:	ldr	r0, [sp, #4]
    60e0:	bl	1248c <flatbuffers_bool_vec_start>
    60e4:	mov	sp, fp
    60e8:	pop	{fp, pc}

000060ec <MyGame_Example_Monster_testarrayofbools_append>:
    60ec:	push	{fp, lr}
    60f0:	mov	fp, sp
    60f4:	sub	sp, sp, #16
    60f8:	str	r0, [fp, #-4]
    60fc:	str	r1, [sp, #8]
    6100:	str	r2, [sp, #4]
    6104:	ldr	r0, [fp, #-4]
    6108:	ldr	r1, [sp, #8]
    610c:	ldr	r2, [sp, #4]
    6110:	bl	0 <flatcc_builder_append_vector>
    6114:	mov	sp, fp
    6118:	pop	{fp, pc}

0000611c <MyGame_Example_Monster_testarrayofbools_end>:
    611c:	push	{fp, lr}
    6120:	mov	fp, sp
    6124:	sub	sp, sp, #16
    6128:	str	r0, [fp, #-4]
    612c:	ldr	r0, [fp, #-4]
    6130:	ldr	r1, [fp, #-4]
    6134:	str	r0, [sp, #8]
    6138:	mov	r0, r1
    613c:	bl	12528 <flatbuffers_bool_vec_end>
    6140:	ldr	r1, [sp, #8]
    6144:	str	r0, [sp, #4]
    6148:	mov	r0, r1
    614c:	ldr	r1, [sp, #4]
    6150:	bl	124bc <MyGame_Example_Monster_testarrayofbools_add>
    6154:	mov	sp, fp
    6158:	pop	{fp, pc}

0000615c <MyGame_Example_Monster_test_add>:
    615c:	push	{fp, lr}
    6160:	mov	fp, sp
    6164:	sub	sp, sp, #24
    6168:	str	r1, [sp, #12]
    616c:	str	r2, [sp, #16]
    6170:	str	r0, [sp, #8]
    6174:	ldrb	r0, [sp, #12]
    6178:	cmp	r0, #0
    617c:	bne	618c <MyGame_Example_Monster_test_add+0x30>
    6180:	movw	r0, #0
    6184:	str	r0, [fp, #-4]
    6188:	b	6214 <MyGame_Example_Monster_test_add+0xb8>
    618c:	ldr	r0, [sp, #16]
    6190:	cmp	r0, #0
    6194:	bne	61a4 <MyGame_Example_Monster_test_add+0x48>
    6198:	mvn	r0, #0
    619c:	str	r0, [fp, #-4]
    61a0:	b	6214 <MyGame_Example_Monster_test_add+0xb8>
    61a4:	ldr	r0, [sp, #8]
    61a8:	movw	r1, #7
    61ac:	movw	r2, #1
    61b0:	movw	r3, #1
    61b4:	uxth	r3, r3
    61b8:	bl	0 <flatcc_builder_table_add>
    61bc:	str	r0, [sp]
    61c0:	movw	r1, #0
    61c4:	cmp	r0, r1
    61c8:	beq	61e8 <MyGame_Example_Monster_test_add+0x8c>
    61cc:	ldr	r0, [sp, #8]
    61d0:	movw	r1, #8
    61d4:	bl	0 <flatcc_builder_table_add_offset>
    61d8:	str	r0, [sp, #4]
    61dc:	movw	r1, #0
    61e0:	cmp	r0, r1
    61e4:	bne	61f4 <MyGame_Example_Monster_test_add+0x98>
    61e8:	mvn	r0, #0
    61ec:	str	r0, [fp, #-4]
    61f0:	b	6214 <MyGame_Example_Monster_test_add+0xb8>
    61f4:	ldrb	r0, [sp, #12]
    61f8:	ldr	r1, [sp]
    61fc:	strb	r0, [r1]
    6200:	ldr	r0, [sp, #16]
    6204:	ldr	r1, [sp, #4]
    6208:	str	r0, [r1]
    620c:	movw	r0, #0
    6210:	str	r0, [fp, #-4]
    6214:	ldr	r0, [fp, #-4]
    6218:	mov	sp, fp
    621c:	pop	{fp, pc}

00006220 <MyGame_Example_Any_as_Monster>:
    6220:	sub	sp, sp, #4
    6224:	str	r1, [sp]
    6228:	movw	r1, #1
    622c:	strb	r1, [r0]
    6230:	ldr	r1, [sp]
    6234:	str	r1, [r0, #4]
    6238:	add	sp, sp, #4
    623c:	bx	lr

00006240 <MyGame_Example_Monster_enemy_start>:
    6240:	push	{fp, lr}
    6244:	mov	fp, sp
    6248:	sub	sp, sp, #8
    624c:	str	r0, [sp, #4]
    6250:	ldr	r0, [sp, #4]
    6254:	bl	184c <MyGame_Example_Monster_start>
    6258:	mov	sp, fp
    625c:	pop	{fp, pc}

00006260 <MyGame_Example_Monster_vec_push_start>:
    6260:	push	{fp, lr}
    6264:	mov	fp, sp
    6268:	sub	sp, sp, #8
    626c:	str	r0, [sp, #4]
    6270:	ldr	r0, [sp, #4]
    6274:	bl	184c <MyGame_Example_Monster_start>
    6278:	mov	sp, fp
    627c:	pop	{fp, pc}

00006280 <MyGame_Example_Monster_test_Monster_add>:
    6280:	push	{fp, lr}
    6284:	mov	fp, sp
    6288:	sub	sp, sp, #24
    628c:	str	r0, [fp, #-4]
    6290:	str	r1, [fp, #-8]
    6294:	ldr	r0, [fp, #-4]
    6298:	ldr	r1, [fp, #-8]
    629c:	add	r2, sp, #8
    62a0:	str	r0, [sp, #4]
    62a4:	mov	r0, r2
    62a8:	bl	6220 <MyGame_Example_Any_as_Monster>
    62ac:	ldr	r1, [sp, #8]
    62b0:	ldr	r2, [sp, #12]
    62b4:	ldr	r0, [sp, #4]
    62b8:	bl	615c <MyGame_Example_Monster_test_add>
    62bc:	mov	sp, fp
    62c0:	pop	{fp, pc}

000062c4 <MyGame_Example_Monster_vec_push_end>:
    62c4:	push	{fp, lr}
    62c8:	mov	fp, sp
    62cc:	sub	sp, sp, #16
    62d0:	str	r0, [fp, #-4]
    62d4:	ldr	r0, [fp, #-4]
    62d8:	ldr	r1, [fp, #-4]
    62dc:	str	r0, [sp, #8]
    62e0:	mov	r0, r1
    62e4:	bl	18bc <MyGame_Example_Monster_end>
    62e8:	ldr	r1, [sp, #8]
    62ec:	str	r0, [sp, #4]
    62f0:	mov	r0, r1
    62f4:	ldr	r1, [sp, #4]
    62f8:	bl	12548 <MyGame_Example_Monster_vec_push>
    62fc:	mov	sp, fp
    6300:	pop	{fp, pc}

00006304 <MyGame_Example_Monster_test_add_value>:
    6304:	push	{fp, lr}
    6308:	mov	fp, sp
    630c:	sub	sp, sp, #24
    6310:	str	r1, [sp, #12]
    6314:	str	r2, [sp, #16]
    6318:	str	r0, [sp, #8]
    631c:	ldrb	r0, [sp, #12]
    6320:	cmp	r0, #0
    6324:	bne	6334 <MyGame_Example_Monster_test_add_value+0x30>
    6328:	movw	r0, #0
    632c:	str	r0, [fp, #-4]
    6330:	b	637c <MyGame_Example_Monster_test_add_value+0x78>
    6334:	ldr	r0, [sp, #8]
    6338:	movw	r1, #8
    633c:	bl	0 <flatcc_builder_table_add_offset>
    6340:	str	r0, [sp, #4]
    6344:	movw	r1, #0
    6348:	cmp	r0, r1
    634c:	beq	6368 <MyGame_Example_Monster_test_add_value+0x64>
    6350:	ldr	r0, [sp, #16]
    6354:	ldr	r1, [sp, #4]
    6358:	str	r0, [r1]
    635c:	movw	r0, #0
    6360:	str	r0, [sp]
    6364:	b	6374 <MyGame_Example_Monster_test_add_value+0x70>
    6368:	mvn	r0, #0
    636c:	str	r0, [sp]
    6370:	b	6374 <MyGame_Example_Monster_test_add_value+0x70>
    6374:	ldr	r0, [sp]
    6378:	str	r0, [fp, #-4]
    637c:	ldr	r0, [fp, #-4]
    6380:	mov	sp, fp
    6384:	pop	{fp, pc}

00006388 <MyGame_Example_Monster_test_add_type>:
    6388:	push	{fp, lr}
    638c:	mov	fp, sp
    6390:	sub	sp, sp, #24
    6394:	str	r0, [fp, #-8]
    6398:	strb	r1, [fp, #-9]
    639c:	ldrb	r0, [fp, #-9]
    63a0:	cmp	r0, #0
    63a4:	bne	63b4 <MyGame_Example_Monster_test_add_type+0x2c>
    63a8:	movw	r0, #0
    63ac:	str	r0, [fp, #-4]
    63b0:	b	6408 <MyGame_Example_Monster_test_add_type+0x80>
    63b4:	ldr	r0, [fp, #-8]
    63b8:	movw	r1, #7
    63bc:	movw	r2, #1
    63c0:	movw	r3, #1
    63c4:	uxth	r3, r3
    63c8:	bl	0 <flatcc_builder_table_add>
    63cc:	str	r0, [sp, #8]
    63d0:	movw	r1, #0
    63d4:	cmp	r0, r1
    63d8:	beq	63f4 <MyGame_Example_Monster_test_add_type+0x6c>
    63dc:	ldrb	r0, [fp, #-9]
    63e0:	ldr	r1, [sp, #8]
    63e4:	strb	r0, [r1]
    63e8:	movw	r0, #0
    63ec:	str	r0, [sp, #4]
    63f0:	b	6400 <MyGame_Example_Monster_test_add_type+0x78>
    63f4:	mvn	r0, #0
    63f8:	str	r0, [sp, #4]
    63fc:	b	6400 <MyGame_Example_Monster_test_add_type+0x78>
    6400:	ldr	r0, [sp, #4]
    6404:	str	r0, [fp, #-4]
    6408:	ldr	r0, [fp, #-4]
    640c:	mov	sp, fp
    6410:	pop	{fp, pc}

00006414 <MyGame_Example_Monster_enemy_end>:
    6414:	push	{fp, lr}
    6418:	mov	fp, sp
    641c:	sub	sp, sp, #16
    6420:	str	r0, [fp, #-4]
    6424:	ldr	r0, [fp, #-4]
    6428:	ldr	r1, [fp, #-4]
    642c:	str	r0, [sp, #8]
    6430:	mov	r0, r1
    6434:	bl	18bc <MyGame_Example_Monster_end>
    6438:	ldr	r1, [sp, #8]
    643c:	str	r0, [sp, #4]
    6440:	mov	r0, r1
    6444:	ldr	r1, [sp, #4]
    6448:	bl	aa04 <MyGame_Example_Monster_enemy_add>
    644c:	mov	sp, fp
    6450:	pop	{fp, pc}

00006454 <MyGame_Example_Monster_testbool_add>:
    6454:	push	{fp, lr}
    6458:	mov	fp, sp
    645c:	sub	sp, sp, #24
    6460:	str	r0, [fp, #-8]
    6464:	strb	r1, [fp, #-9]
    6468:	ldrb	r0, [fp, #-9]
    646c:	cmp	r0, #1
    6470:	bne	6480 <MyGame_Example_Monster_testbool_add+0x2c>
    6474:	movw	r0, #0
    6478:	str	r0, [fp, #-4]
    647c:	b	64cc <MyGame_Example_Monster_testbool_add+0x78>
    6480:	ldr	r0, [fp, #-8]
    6484:	movw	r1, #15
    6488:	movw	r2, #1
    648c:	movw	r3, #1
    6490:	uxth	r3, r3
    6494:	bl	0 <flatcc_builder_table_add>
    6498:	str	r0, [sp, #8]
    649c:	movw	r1, #0
    64a0:	cmp	r0, r1
    64a4:	bne	64b4 <MyGame_Example_Monster_testbool_add+0x60>
    64a8:	mvn	r0, #0
    64ac:	str	r0, [fp, #-4]
    64b0:	b	64cc <MyGame_Example_Monster_testbool_add+0x78>
    64b4:	ldr	r0, [sp, #8]
    64b8:	ldrb	r1, [fp, #-9]
    64bc:	bl	12594 <flatbuffers_bool_assign_to_pe>
    64c0:	movw	r1, #0
    64c4:	str	r1, [fp, #-4]
    64c8:	str	r0, [sp, #4]
    64cc:	ldr	r0, [fp, #-4]
    64d0:	mov	sp, fp
    64d4:	pop	{fp, pc}

000064d8 <MyGame_Example_Monster_testempty_start>:
    64d8:	push	{fp, lr}
    64dc:	mov	fp, sp
    64e0:	sub	sp, sp, #8
    64e4:	str	r0, [sp, #4]
    64e8:	ldr	r0, [sp, #4]
    64ec:	bl	125d8 <MyGame_Example_Stat_start>
    64f0:	mov	sp, fp
    64f4:	pop	{fp, pc}

000064f8 <MyGame_Example_Monster_testempty_end>:
    64f8:	push	{fp, lr}
    64fc:	mov	fp, sp
    6500:	sub	sp, sp, #16
    6504:	str	r0, [fp, #-4]
    6508:	ldr	r0, [fp, #-4]
    650c:	ldr	r1, [fp, #-4]
    6510:	str	r0, [sp, #8]
    6514:	mov	r0, r1
    6518:	bl	12668 <MyGame_Example_Stat_end>
    651c:	ldr	r1, [sp, #8]
    6520:	str	r0, [sp, #4]
    6524:	mov	r0, r1
    6528:	ldr	r1, [sp, #4]
    652c:	bl	125fc <MyGame_Example_Monster_testempty_add>
    6530:	mov	sp, fp
    6534:	pop	{fp, pc}

00006538 <MyGame_Example_Monster_end_as_root>:
    6538:	push	{fp, lr}
    653c:	mov	fp, sp
    6540:	sub	sp, sp, #16
    6544:	str	r0, [fp, #-4]
    6548:	ldr	r0, [fp, #-4]
    654c:	ldr	r1, [fp, #-4]
    6550:	str	r0, [sp, #8]
    6554:	mov	r0, r1
    6558:	bl	18bc <MyGame_Example_Monster_end>
    655c:	ldr	r1, [sp, #8]
    6560:	str	r0, [sp, #4]
    6564:	mov	r0, r1
    6568:	ldr	r1, [sp, #4]
    656c:	bl	191c <flatbuffers_buffer_end>
    6570:	mov	sp, fp
    6574:	pop	{fp, pc}

00006578 <test_monster>:
    6578:	push	{fp, lr}
    657c:	mov	fp, sp
    6580:	sub	sp, sp, #32
    6584:	str	r0, [fp, #-8]
    6588:	ldr	r0, [fp, #-8]
    658c:	movw	r1, #0
    6590:	bl	5160 <gen_monster>
    6594:	ldr	r1, [fp, #-8]
    6598:	str	r0, [sp, #8]
    659c:	mov	r0, r1
    65a0:	add	r1, sp, #16
    65a4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    65a8:	str	r0, [fp, #-12]
    65ac:	ldr	r1, [fp, #-12]
    65b0:	ldr	r2, [sp, #16]
    65b4:	movw	r0, #0
    65b8:	movt	r0, #0
    65bc:	ldr	r3, [r0]
    65c0:	movw	r0, #0
    65c4:	movt	r0, #0
    65c8:	bl	b0c <hexdump>
    65cc:	ldr	r0, [fp, #-12]
    65d0:	ldr	r1, [sp, #16]
    65d4:	bl	197c <MyGame_Example_Monster_verify_as_root>
    65d8:	str	r0, [sp, #12]
    65dc:	cmp	r0, #0
    65e0:	beq	6614 <test_monster+0x9c>
    65e4:	ldr	r0, [sp, #12]
    65e8:	bl	0 <flatcc_verify_error_string>
    65ec:	movw	lr, #0
    65f0:	movt	lr, #0
    65f4:	str	r0, [sp, #4]
    65f8:	mov	r0, lr
    65fc:	ldr	r1, [sp, #4]
    6600:	bl	0 <printf>
    6604:	mvn	r1, #0
    6608:	str	r1, [fp, #-4]
    660c:	str	r0, [sp]
    6610:	b	6630 <test_monster+0xb8>
    6614:	ldr	r0, [fp, #-12]
    6618:	bl	2870 <verify_monster>
    661c:	str	r0, [sp, #12]
    6620:	ldr	r0, [fp, #-12]
    6624:	bl	0 <flatcc_builder_aligned_free>
    6628:	ldr	r0, [sp, #12]
    662c:	str	r0, [fp, #-4]
    6630:	ldr	r0, [fp, #-4]
    6634:	mov	sp, fp
    6638:	pop	{fp, pc}

0000663c <test_monster_with_size>:
    663c:	push	{fp, lr}
    6640:	mov	fp, sp
    6644:	sub	sp, sp, #56	; 0x38
    6648:	str	r0, [fp, #-8]
    664c:	ldr	r0, [fp, #-8]
    6650:	movw	r1, #1
    6654:	bl	5160 <gen_monster>
    6658:	ldr	r1, [fp, #-8]
    665c:	str	r0, [sp, #20]
    6660:	mov	r0, r1
    6664:	sub	r1, fp, #20
    6668:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    666c:	str	r0, [fp, #-16]
    6670:	ldr	r1, [fp, #-16]
    6674:	ldr	r2, [fp, #-20]	; 0xffffffec
    6678:	movw	r0, #0
    667c:	movt	r0, #0
    6680:	ldr	r3, [r0]
    6684:	movw	r0, #0
    6688:	movt	r0, #0
    668c:	bl	b0c <hexdump>
    6690:	ldr	r0, [fp, #-16]
    6694:	and	r0, r0, #15
    6698:	cmp	r0, #0
    669c:	beq	66d4 <test_monster_with_size+0x98>
    66a0:	movw	r0, #0
    66a4:	movt	r0, #0
    66a8:	bl	0 <printf>
    66ac:	ldr	r1, [fp, #-16]
    66b0:	movw	lr, #0
    66b4:	movt	lr, #0
    66b8:	str	r0, [sp, #16]
    66bc:	mov	r0, lr
    66c0:	bl	0 <printf>
    66c4:	mvn	r1, #0
    66c8:	str	r1, [fp, #-4]
    66cc:	str	r0, [sp, #12]
    66d0:	b	6788 <test_monster_with_size+0x14c>
    66d4:	ldr	r0, [fp, #-16]
    66d8:	sub	r1, fp, #24
    66dc:	bl	6794 <flatbuffers_read_size_prefix>
    66e0:	str	r0, [fp, #-12]
    66e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    66e8:	sub	r0, r0, #4
    66ec:	str	r0, [sp, #28]
    66f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    66f4:	ldr	r1, [sp, #28]
    66f8:	cmp	r0, r1
    66fc:	beq	6724 <test_monster_with_size+0xe8>
    6700:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6704:	ldr	r2, [sp, #28]
    6708:	movw	r0, #0
    670c:	movt	r0, #0
    6710:	bl	0 <printf>
    6714:	mvn	r1, #0
    6718:	str	r1, [fp, #-4]
    671c:	str	r0, [sp, #8]
    6720:	b	6788 <test_monster_with_size+0x14c>
    6724:	ldr	r0, [fp, #-12]
    6728:	ldr	r1, [fp, #-24]	; 0xffffffe8
    672c:	bl	197c <MyGame_Example_Monster_verify_as_root>
    6730:	str	r0, [sp, #24]
    6734:	cmp	r0, #0
    6738:	beq	676c <test_monster_with_size+0x130>
    673c:	ldr	r0, [sp, #24]
    6740:	bl	0 <flatcc_verify_error_string>
    6744:	movw	lr, #0
    6748:	movt	lr, #0
    674c:	str	r0, [sp, #4]
    6750:	mov	r0, lr
    6754:	ldr	r1, [sp, #4]
    6758:	bl	0 <printf>
    675c:	mvn	r1, #0
    6760:	str	r1, [fp, #-4]
    6764:	str	r0, [sp]
    6768:	b	6788 <test_monster_with_size+0x14c>
    676c:	ldr	r0, [fp, #-12]
    6770:	bl	2870 <verify_monster>
    6774:	str	r0, [sp, #24]
    6778:	ldr	r0, [fp, #-16]
    677c:	bl	0 <flatcc_builder_aligned_free>
    6780:	ldr	r0, [sp, #24]
    6784:	str	r0, [fp, #-4]
    6788:	ldr	r0, [fp, #-4]
    678c:	mov	sp, fp
    6790:	pop	{fp, pc}

00006794 <flatbuffers_read_size_prefix>:
    6794:	push	{fp, lr}
    6798:	mov	fp, sp
    679c:	sub	sp, sp, #8
    67a0:	str	r0, [sp, #4]
    67a4:	str	r1, [sp]
    67a8:	ldr	r0, [sp]
    67ac:	movw	r1, #0
    67b0:	cmp	r0, r1
    67b4:	beq	67c8 <flatbuffers_read_size_prefix+0x34>
    67b8:	ldr	r0, [sp, #4]
    67bc:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    67c0:	ldr	lr, [sp]
    67c4:	str	r0, [lr]
    67c8:	ldr	r0, [sp, #4]
    67cc:	add	r0, r0, #4
    67d0:	mov	sp, fp
    67d4:	pop	{fp, pc}

000067d8 <test_string>:
    67d8:	push	{fp, lr}
    67dc:	mov	fp, sp
    67e0:	sub	sp, sp, #64	; 0x40
    67e4:	str	r0, [fp, #-8]
    67e8:	ldr	r0, [fp, #-8]
    67ec:	bl	0 <flatcc_builder_reset>
    67f0:	ldr	lr, [fp, #-8]
    67f4:	str	r0, [fp, #-24]	; 0xffffffe8
    67f8:	mov	r0, lr
    67fc:	bl	598c <MyGame_Example_Monster_start_as_root>
    6800:	ldr	lr, [fp, #-8]
    6804:	str	r0, [fp, #-28]	; 0xffffffe4
    6808:	mov	r0, lr
    680c:	bl	6a54 <MyGame_Example_Monster_name_start>
    6810:	ldr	lr, [fp, #-8]
    6814:	str	r0, [sp, #32]
    6818:	mov	r0, lr
    681c:	movw	r1, #3
    6820:	bl	6a74 <MyGame_Example_Monster_name_extend>
    6824:	str	r0, [fp, #-20]	; 0xffffffec
    6828:	ldr	r0, [fp, #-20]	; 0xffffffec
    682c:	movw	r1, #49	; 0x31
    6830:	strb	r1, [r0]
    6834:	ldr	r0, [fp, #-20]	; 0xffffffec
    6838:	movw	r1, #50	; 0x32
    683c:	strb	r1, [r0, #1]
    6840:	ldr	r0, [fp, #-20]	; 0xffffffec
    6844:	movw	r1, #51	; 0x33
    6848:	strb	r1, [r0, #2]
    684c:	ldr	r0, [fp, #-8]
    6850:	movw	r1, #0
    6854:	movt	r1, #0
    6858:	bl	6a9c <MyGame_Example_Monster_name_append_str>
    685c:	ldr	r1, [fp, #-8]
    6860:	str	r0, [sp, #28]
    6864:	mov	r0, r1
    6868:	bl	6ac4 <MyGame_Example_Monster_name_reserved_len>
    686c:	cmp	r0, #4
    6870:	bne	6878 <test_string+0xa0>
    6874:	b	6898 <test_string+0xc0>
    6878:	movw	r0, #0
    687c:	movt	r0, #0
    6880:	movw	r1, #0
    6884:	movt	r1, #0
    6888:	movw	r2, #1080	; 0x438
    688c:	movw	r3, #0
    6890:	movt	r3, #0
    6894:	bl	0 <__assert_fail>
    6898:	ldr	r0, [fp, #-8]
    689c:	movw	r1, #0
    68a0:	movt	r1, #0
    68a4:	movw	r2, #30
    68a8:	bl	6ae4 <MyGame_Example_Monster_name_append_strn>
    68ac:	ldr	r1, [fp, #-8]
    68b0:	str	r0, [sp, #24]
    68b4:	mov	r0, r1
    68b8:	bl	6ac4 <MyGame_Example_Monster_name_reserved_len>
    68bc:	cmp	r0, #8
    68c0:	bne	68c8 <test_string+0xf0>
    68c4:	b	68e8 <test_string+0x110>
    68c8:	movw	r0, #0
    68cc:	movt	r0, #0
    68d0:	movw	r1, #0
    68d4:	movt	r1, #0
    68d8:	movw	r2, #1082	; 0x43a
    68dc:	movw	r3, #0
    68e0:	movt	r3, #0
    68e4:	bl	0 <__assert_fail>
    68e8:	ldr	r0, [fp, #-8]
    68ec:	movw	r1, #0
    68f0:	movt	r1, #0
    68f4:	movw	r2, #2
    68f8:	bl	6b14 <MyGame_Example_Monster_name_append>
    68fc:	ldr	r1, [fp, #-8]
    6900:	str	r0, [sp, #20]
    6904:	mov	r0, r1
    6908:	bl	6ac4 <MyGame_Example_Monster_name_reserved_len>
    690c:	cmp	r0, #10
    6910:	bne	6918 <test_string+0x140>
    6914:	b	6938 <test_string+0x160>
    6918:	movw	r0, #0
    691c:	movt	r0, #0
    6920:	movw	r1, #0
    6924:	movt	r1, #0
    6928:	movw	r2, #1084	; 0x43c
    692c:	movw	r3, #0
    6930:	movt	r3, #0
    6934:	bl	0 <__assert_fail>
    6938:	ldr	r0, [fp, #-8]
    693c:	movw	r1, #3
    6940:	bl	6b44 <MyGame_Example_Monster_name_truncate>
    6944:	ldr	r1, [fp, #-8]
    6948:	str	r0, [sp, #16]
    694c:	mov	r0, r1
    6950:	bl	6ac4 <MyGame_Example_Monster_name_reserved_len>
    6954:	cmp	r0, #7
    6958:	bne	6960 <test_string+0x188>
    695c:	b	6980 <test_string+0x1a8>
    6960:	movw	r0, #0
    6964:	movt	r0, #0
    6968:	movw	r1, #0
    696c:	movt	r1, #0
    6970:	movw	r2, #1086	; 0x43e
    6974:	movw	r3, #0
    6978:	movt	r3, #0
    697c:	bl	0 <__assert_fail>
    6980:	ldr	r0, [fp, #-8]
    6984:	bl	6b6c <MyGame_Example_Monster_name_edit>
    6988:	str	r0, [fp, #-20]	; 0xffffffec
    698c:	ldr	r0, [fp, #-20]	; 0xffffffec
    6990:	movw	lr, #46	; 0x2e
    6994:	strb	lr, [r0, #4]
    6998:	ldr	r0, [fp, #-8]
    699c:	bl	6b8c <MyGame_Example_Monster_name_end>
    69a0:	ldr	lr, [fp, #-8]
    69a4:	str	r0, [sp, #12]
    69a8:	mov	r0, lr
    69ac:	bl	6538 <MyGame_Example_Monster_end_as_root>
    69b0:	ldr	lr, [fp, #-8]
    69b4:	str	r0, [sp, #8]
    69b8:	mov	r0, lr
    69bc:	movw	r1, #0
    69c0:	bl	0 <flatcc_builder_get_direct_buffer>
    69c4:	str	r0, [fp, #-16]
    69c8:	ldr	r0, [fp, #-16]
    69cc:	movw	r1, #0
    69d0:	cmp	r0, r1
    69d4:	beq	69dc <test_string+0x204>
    69d8:	b	69fc <test_string+0x224>
    69dc:	movw	r0, #0
    69e0:	movt	r0, #0
    69e4:	movw	r1, #0
    69e8:	movt	r1, #0
    69ec:	movw	r2, #1093	; 0x445
    69f0:	movw	r3, #0
    69f4:	movt	r3, #0
    69f8:	bl	0 <__assert_fail>
    69fc:	ldr	r0, [fp, #-16]
    6a00:	bl	280 <MyGame_Example_Monster_as_root>
    6a04:	str	r0, [fp, #-12]
    6a08:	ldr	r0, [fp, #-12]
    6a0c:	bl	3a0c <MyGame_Example_Monster_name>
    6a10:	movw	r1, #0
    6a14:	movt	r1, #0
    6a18:	bl	0 <strcmp>
    6a1c:	cmp	r0, #0
    6a20:	beq	6a40 <test_string+0x268>
    6a24:	movw	r0, #0
    6a28:	movt	r0, #0
    6a2c:	bl	0 <printf>
    6a30:	mvn	lr, #0
    6a34:	str	lr, [fp, #-4]
    6a38:	str	r0, [sp, #4]
    6a3c:	b	6a48 <test_string+0x270>
    6a40:	movw	r0, #0
    6a44:	str	r0, [fp, #-4]
    6a48:	ldr	r0, [fp, #-4]
    6a4c:	mov	sp, fp
    6a50:	pop	{fp, pc}

00006a54 <MyGame_Example_Monster_name_start>:
    6a54:	push	{fp, lr}
    6a58:	mov	fp, sp
    6a5c:	sub	sp, sp, #8
    6a60:	str	r0, [sp, #4]
    6a64:	ldr	r0, [sp, #4]
    6a68:	bl	0 <flatcc_builder_start_string>
    6a6c:	mov	sp, fp
    6a70:	pop	{fp, pc}

00006a74 <MyGame_Example_Monster_name_extend>:
    6a74:	push	{fp, lr}
    6a78:	mov	fp, sp
    6a7c:	sub	sp, sp, #8
    6a80:	str	r0, [sp, #4]
    6a84:	str	r1, [sp]
    6a88:	ldr	r0, [sp, #4]
    6a8c:	ldr	r1, [sp]
    6a90:	bl	0 <flatcc_builder_extend_string>
    6a94:	mov	sp, fp
    6a98:	pop	{fp, pc}

00006a9c <MyGame_Example_Monster_name_append_str>:
    6a9c:	push	{fp, lr}
    6aa0:	mov	fp, sp
    6aa4:	sub	sp, sp, #8
    6aa8:	str	r0, [sp, #4]
    6aac:	str	r1, [sp]
    6ab0:	ldr	r0, [sp, #4]
    6ab4:	ldr	r1, [sp]
    6ab8:	bl	0 <flatcc_builder_append_string_str>
    6abc:	mov	sp, fp
    6ac0:	pop	{fp, pc}

00006ac4 <MyGame_Example_Monster_name_reserved_len>:
    6ac4:	push	{fp, lr}
    6ac8:	mov	fp, sp
    6acc:	sub	sp, sp, #8
    6ad0:	str	r0, [sp, #4]
    6ad4:	ldr	r0, [sp, #4]
    6ad8:	bl	0 <flatcc_builder_string_len>
    6adc:	mov	sp, fp
    6ae0:	pop	{fp, pc}

00006ae4 <MyGame_Example_Monster_name_append_strn>:
    6ae4:	push	{fp, lr}
    6ae8:	mov	fp, sp
    6aec:	sub	sp, sp, #16
    6af0:	str	r0, [fp, #-4]
    6af4:	str	r1, [sp, #8]
    6af8:	str	r2, [sp, #4]
    6afc:	ldr	r0, [fp, #-4]
    6b00:	ldr	r1, [sp, #8]
    6b04:	ldr	r2, [sp, #4]
    6b08:	bl	0 <flatcc_builder_append_string_strn>
    6b0c:	mov	sp, fp
    6b10:	pop	{fp, pc}

00006b14 <MyGame_Example_Monster_name_append>:
    6b14:	push	{fp, lr}
    6b18:	mov	fp, sp
    6b1c:	sub	sp, sp, #16
    6b20:	str	r0, [fp, #-4]
    6b24:	str	r1, [sp, #8]
    6b28:	str	r2, [sp, #4]
    6b2c:	ldr	r0, [fp, #-4]
    6b30:	ldr	r1, [sp, #8]
    6b34:	ldr	r2, [sp, #4]
    6b38:	bl	0 <flatcc_builder_append_string>
    6b3c:	mov	sp, fp
    6b40:	pop	{fp, pc}

00006b44 <MyGame_Example_Monster_name_truncate>:
    6b44:	push	{fp, lr}
    6b48:	mov	fp, sp
    6b4c:	sub	sp, sp, #8
    6b50:	str	r0, [sp, #4]
    6b54:	str	r1, [sp]
    6b58:	ldr	r0, [sp, #4]
    6b5c:	ldr	r1, [sp]
    6b60:	bl	0 <flatcc_builder_truncate_string>
    6b64:	mov	sp, fp
    6b68:	pop	{fp, pc}

00006b6c <MyGame_Example_Monster_name_edit>:
    6b6c:	push	{fp, lr}
    6b70:	mov	fp, sp
    6b74:	sub	sp, sp, #8
    6b78:	str	r0, [sp, #4]
    6b7c:	ldr	r0, [sp, #4]
    6b80:	bl	0 <flatcc_builder_string_edit>
    6b84:	mov	sp, fp
    6b88:	pop	{fp, pc}

00006b8c <MyGame_Example_Monster_name_end>:
    6b8c:	push	{fp, lr}
    6b90:	mov	fp, sp
    6b94:	sub	sp, sp, #16
    6b98:	str	r0, [fp, #-4]
    6b9c:	ldr	r0, [fp, #-4]
    6ba0:	ldr	r1, [fp, #-4]
    6ba4:	str	r0, [sp, #8]
    6ba8:	mov	r0, r1
    6bac:	bl	0 <flatcc_builder_end_string>
    6bb0:	ldr	r1, [sp, #8]
    6bb4:	str	r0, [sp, #4]
    6bb8:	mov	r0, r1
    6bbc:	ldr	r1, [sp, #4]
    6bc0:	bl	5e08 <MyGame_Example_Monster_name_add>
    6bc4:	mov	sp, fp
    6bc8:	pop	{fp, pc}

00006bcc <test_sort_find>:
    6bcc:	push	{fp, lr}
    6bd0:	mov	fp, sp
    6bd4:	sub	sp, sp, #192	; 0xc0
    6bd8:	str	r0, [fp, #-4]
    6bdc:	mvn	r0, #0
    6be0:	str	r0, [fp, #-32]	; 0xffffffe0
    6be4:	ldr	r0, [fp, #-4]
    6be8:	bl	0 <flatcc_builder_reset>
    6bec:	ldr	lr, [fp, #-4]
    6bf0:	str	r0, [fp, #-36]	; 0xffffffdc
    6bf4:	mov	r0, lr
    6bf8:	bl	598c <MyGame_Example_Monster_start_as_root>
    6bfc:	ldr	lr, [fp, #-4]
    6c00:	str	r0, [fp, #-40]	; 0xffffffd8
    6c04:	mov	r0, lr
    6c08:	movw	r1, #0
    6c0c:	movt	r1, #0
    6c10:	bl	1870 <MyGame_Example_Monster_name_create_str>
    6c14:	ldr	r1, [fp, #-4]
    6c18:	str	r0, [fp, #-44]	; 0xffffffd4
    6c1c:	mov	r0, r1
    6c20:	bl	5e74 <MyGame_Example_Monster_testarrayoftables_start>
    6c24:	ldr	r1, [fp, #-4]
    6c28:	str	r0, [fp, #-48]	; 0xffffffd0
    6c2c:	mov	r0, r1
    6c30:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    6c34:	ldr	r1, [fp, #-4]
    6c38:	str	r0, [fp, #-52]	; 0xffffffcc
    6c3c:	mov	r0, r1
    6c40:	movw	r1, #0
    6c44:	movt	r1, #0
    6c48:	bl	1870 <MyGame_Example_Monster_name_create_str>
    6c4c:	ldr	r1, [fp, #-4]
    6c50:	str	r0, [fp, #-56]	; 0xffffffc8
    6c54:	mov	r0, r1
    6c58:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    6c5c:	ldr	r1, [fp, #-4]
    6c60:	str	r0, [fp, #-60]	; 0xffffffc4
    6c64:	mov	r0, r1
    6c68:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    6c6c:	ldr	r1, [fp, #-4]
    6c70:	str	r0, [fp, #-64]	; 0xffffffc0
    6c74:	mov	r0, r1
    6c78:	movw	r1, #0
    6c7c:	movt	r1, #0
    6c80:	bl	1870 <MyGame_Example_Monster_name_create_str>
    6c84:	ldr	r1, [fp, #-4]
    6c88:	str	r0, [fp, #-68]	; 0xffffffbc
    6c8c:	mov	r0, r1
    6c90:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    6c94:	ldr	r1, [fp, #-4]
    6c98:	str	r0, [fp, #-72]	; 0xffffffb8
    6c9c:	mov	r0, r1
    6ca0:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    6ca4:	ldr	r1, [fp, #-4]
    6ca8:	str	r0, [fp, #-76]	; 0xffffffb4
    6cac:	mov	r0, r1
    6cb0:	movw	r1, #0
    6cb4:	movt	r1, #0
    6cb8:	bl	1870 <MyGame_Example_Monster_name_create_str>
    6cbc:	ldr	r1, [fp, #-4]
    6cc0:	str	r0, [fp, #-80]	; 0xffffffb0
    6cc4:	mov	r0, r1
    6cc8:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    6ccc:	ldr	r1, [fp, #-4]
    6cd0:	str	r0, [fp, #-84]	; 0xffffffac
    6cd4:	mov	r0, r1
    6cd8:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    6cdc:	ldr	r1, [fp, #-4]
    6ce0:	str	r0, [fp, #-88]	; 0xffffffa8
    6ce4:	mov	r0, r1
    6ce8:	movw	r1, #0
    6cec:	movt	r1, #0
    6cf0:	bl	1870 <MyGame_Example_Monster_name_create_str>
    6cf4:	ldr	r1, [fp, #-4]
    6cf8:	str	r0, [fp, #-92]	; 0xffffffa4
    6cfc:	mov	r0, r1
    6d00:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    6d04:	ldr	r1, [fp, #-4]
    6d08:	str	r0, [sp, #96]	; 0x60
    6d0c:	mov	r0, r1
    6d10:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    6d14:	ldr	r1, [fp, #-4]
    6d18:	str	r0, [sp, #92]	; 0x5c
    6d1c:	mov	r0, r1
    6d20:	movw	r1, #0
    6d24:	movt	r1, #0
    6d28:	bl	1870 <MyGame_Example_Monster_name_create_str>
    6d2c:	ldr	r1, [fp, #-4]
    6d30:	str	r0, [sp, #88]	; 0x58
    6d34:	mov	r0, r1
    6d38:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    6d3c:	ldr	r1, [fp, #-4]
    6d40:	str	r0, [sp, #84]	; 0x54
    6d44:	mov	r0, r1
    6d48:	bl	600c <MyGame_Example_Monster_testarrayoftables_end>
    6d4c:	ldr	r1, [fp, #-4]
    6d50:	str	r0, [sp, #80]	; 0x50
    6d54:	mov	r0, r1
    6d58:	bl	6538 <MyGame_Example_Monster_end_as_root>
    6d5c:	ldr	r1, [fp, #-4]
    6d60:	str	r0, [sp, #76]	; 0x4c
    6d64:	mov	r0, r1
    6d68:	sub	r1, fp, #28
    6d6c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    6d70:	str	r0, [fp, #-24]	; 0xffffffe8
    6d74:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6d78:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6d7c:	movw	r0, #0
    6d80:	movt	r0, #0
    6d84:	ldr	r3, [r0]
    6d88:	movw	r0, #0
    6d8c:	movt	r0, #0
    6d90:	bl	b0c <hexdump>
    6d94:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6d98:	bl	280 <MyGame_Example_Monster_as_root>
    6d9c:	str	r0, [fp, #-12]
    6da0:	ldr	r0, [fp, #-12]
    6da4:	bl	4358 <MyGame_Example_Monster_testarrayoftables>
    6da8:	str	r0, [fp, #-16]
    6dac:	ldr	r0, [fp, #-16]
    6db0:	movw	r1, #0
    6db4:	cmp	r0, r1
    6db8:	beq	6dc0 <test_sort_find+0x1f4>
    6dbc:	b	6de0 <test_sort_find+0x214>
    6dc0:	movw	r0, #0
    6dc4:	movt	r0, #0
    6dc8:	movw	r1, #0
    6dcc:	movt	r1, #0
    6dd0:	movw	r2, #1147	; 0x47b
    6dd4:	movw	r3, #0
    6dd8:	movt	r3, #0
    6ddc:	bl	0 <__assert_fail>
    6de0:	ldr	r0, [fp, #-16]
    6de4:	str	r0, [fp, #-20]	; 0xffffffec
    6de8:	ldr	r0, [fp, #-20]	; 0xffffffec
    6dec:	bl	7184 <MyGame_Example_Monster_vec_sort_by_name>
    6df0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6df4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6df8:	movw	r0, #0
    6dfc:	movt	r0, #0
    6e00:	ldr	r3, [r0]
    6e04:	movw	r0, #0
    6e08:	movt	r0, #0
    6e0c:	bl	b0c <hexdump>
    6e10:	ldr	r0, [fp, #-16]
    6e14:	bl	4454 <MyGame_Example_Monster_vec_len>
    6e18:	cmp	r0, #5
    6e1c:	beq	6e34 <test_sort_find+0x268>
    6e20:	movw	r0, #0
    6e24:	movt	r0, #0
    6e28:	bl	0 <printf>
    6e2c:	str	r0, [sp, #72]	; 0x48
    6e30:	b	7170 <test_sort_find+0x5a4>
    6e34:	ldr	r0, [fp, #-16]
    6e38:	movw	r1, #0
    6e3c:	bl	44a4 <MyGame_Example_Monster_vec_at>
    6e40:	bl	3a0c <MyGame_Example_Monster_name>
    6e44:	movw	r1, #0
    6e48:	movt	r1, #0
    6e4c:	bl	0 <strcmp>
    6e50:	cmp	r0, #0
    6e54:	beq	6e6c <test_sort_find+0x2a0>
    6e58:	movw	r0, #0
    6e5c:	movt	r0, #0
    6e60:	bl	0 <printf>
    6e64:	str	r0, [sp, #68]	; 0x44
    6e68:	b	7170 <test_sort_find+0x5a4>
    6e6c:	ldr	r0, [fp, #-16]
    6e70:	movw	r1, #1
    6e74:	bl	44a4 <MyGame_Example_Monster_vec_at>
    6e78:	bl	3a0c <MyGame_Example_Monster_name>
    6e7c:	movw	r1, #0
    6e80:	movt	r1, #0
    6e84:	bl	0 <strcmp>
    6e88:	cmp	r0, #0
    6e8c:	beq	6ea4 <test_sort_find+0x2d8>
    6e90:	movw	r0, #0
    6e94:	movt	r0, #0
    6e98:	bl	0 <printf>
    6e9c:	str	r0, [sp, #64]	; 0x40
    6ea0:	b	7170 <test_sort_find+0x5a4>
    6ea4:	ldr	r0, [fp, #-16]
    6ea8:	movw	r1, #2
    6eac:	bl	44a4 <MyGame_Example_Monster_vec_at>
    6eb0:	bl	3a0c <MyGame_Example_Monster_name>
    6eb4:	movw	r1, #0
    6eb8:	movt	r1, #0
    6ebc:	bl	0 <strcmp>
    6ec0:	cmp	r0, #0
    6ec4:	beq	6edc <test_sort_find+0x310>
    6ec8:	movw	r0, #0
    6ecc:	movt	r0, #0
    6ed0:	bl	0 <printf>
    6ed4:	str	r0, [sp, #60]	; 0x3c
    6ed8:	b	7170 <test_sort_find+0x5a4>
    6edc:	ldr	r0, [fp, #-16]
    6ee0:	movw	r1, #3
    6ee4:	bl	44a4 <MyGame_Example_Monster_vec_at>
    6ee8:	bl	3a0c <MyGame_Example_Monster_name>
    6eec:	movw	r1, #0
    6ef0:	movt	r1, #0
    6ef4:	bl	0 <strcmp>
    6ef8:	cmp	r0, #0
    6efc:	beq	6f14 <test_sort_find+0x348>
    6f00:	movw	r0, #0
    6f04:	movt	r0, #0
    6f08:	bl	0 <printf>
    6f0c:	str	r0, [sp, #56]	; 0x38
    6f10:	b	7170 <test_sort_find+0x5a4>
    6f14:	ldr	r0, [fp, #-16]
    6f18:	movw	r1, #4
    6f1c:	bl	44a4 <MyGame_Example_Monster_vec_at>
    6f20:	bl	3a0c <MyGame_Example_Monster_name>
    6f24:	movw	r1, #0
    6f28:	movt	r1, #0
    6f2c:	bl	0 <strcmp>
    6f30:	cmp	r0, #0
    6f34:	beq	6f4c <test_sort_find+0x380>
    6f38:	movw	r0, #0
    6f3c:	movt	r0, #0
    6f40:	bl	0 <printf>
    6f44:	str	r0, [sp, #52]	; 0x34
    6f48:	b	7170 <test_sort_find+0x5a4>
    6f4c:	ldr	r0, [fp, #-16]
    6f50:	movw	r1, #1
    6f54:	bl	44a4 <MyGame_Example_Monster_vec_at>
    6f58:	ldr	r1, [fp, #-16]
    6f5c:	str	r0, [sp, #48]	; 0x30
    6f60:	mov	r0, r1
    6f64:	movw	r1, #2
    6f68:	bl	44a4 <MyGame_Example_Monster_vec_at>
    6f6c:	ldr	r1, [sp, #48]	; 0x30
    6f70:	cmp	r1, r0
    6f74:	bne	6f8c <test_sort_find+0x3c0>
    6f78:	movw	r0, #0
    6f7c:	movt	r0, #0
    6f80:	bl	0 <printf>
    6f84:	str	r0, [sp, #44]	; 0x2c
    6f88:	b	7170 <test_sort_find+0x5a4>
    6f8c:	ldr	r0, [fp, #-16]
    6f90:	movw	r1, #0
    6f94:	movt	r1, #0
    6f98:	bl	71a4 <MyGame_Example_Monster_vec_find>
    6f9c:	movw	r1, #3
    6fa0:	cmp	r1, r0
    6fa4:	beq	6fbc <test_sort_find+0x3f0>
    6fa8:	movw	r0, #0
    6fac:	movt	r0, #0
    6fb0:	bl	0 <printf>
    6fb4:	str	r0, [sp, #40]	; 0x28
    6fb8:	b	7170 <test_sort_find+0x5a4>
    6fbc:	ldr	r0, [fp, #-16]
    6fc0:	movw	r1, #0
    6fc4:	movt	r1, #0
    6fc8:	movw	r2, #5
    6fcc:	bl	71cc <MyGame_Example_Monster_vec_find_n>
    6fd0:	movw	r1, #3
    6fd4:	cmp	r1, r0
    6fd8:	beq	6ff0 <test_sort_find+0x424>
    6fdc:	movw	r0, #0
    6fe0:	movt	r0, #0
    6fe4:	bl	0 <printf>
    6fe8:	str	r0, [sp, #36]	; 0x24
    6fec:	b	7170 <test_sort_find+0x5a4>
    6ff0:	ldr	r0, [fp, #-16]
    6ff4:	movw	r1, #0
    6ff8:	movt	r1, #0
    6ffc:	bl	71fc <MyGame_Example_Monster_vec_find_by_name>
    7000:	movw	r1, #3
    7004:	cmp	r1, r0
    7008:	beq	7020 <test_sort_find+0x454>
    700c:	movw	r0, #0
    7010:	movt	r0, #0
    7014:	bl	0 <printf>
    7018:	str	r0, [sp, #32]
    701c:	b	7170 <test_sort_find+0x5a4>
    7020:	ldr	r0, [fp, #-16]
    7024:	movw	r1, #0
    7028:	movt	r1, #0
    702c:	movw	r2, #5
    7030:	bl	732c <MyGame_Example_Monster_vec_find_n_by_name>
    7034:	movw	r1, #3
    7038:	cmp	r1, r0
    703c:	beq	7054 <test_sort_find+0x488>
    7040:	movw	r0, #0
    7044:	movt	r0, #0
    7048:	bl	0 <printf>
    704c:	str	r0, [sp, #28]
    7050:	b	7170 <test_sort_find+0x5a4>
    7054:	movw	r0, #0
    7058:	movt	r0, #0
    705c:	ldr	r0, [r0]
    7060:	ldr	r1, [fp, #-16]
    7064:	str	r0, [sp, #24]
    7068:	mov	r0, r1
    706c:	movw	r1, #0
    7070:	movt	r1, #0
    7074:	bl	71fc <MyGame_Example_Monster_vec_find_by_name>
    7078:	ldr	r1, [sp, #24]
    707c:	cmp	r1, r0
    7080:	beq	7098 <test_sort_find+0x4cc>
    7084:	movw	r0, #0
    7088:	movt	r0, #0
    708c:	bl	0 <printf>
    7090:	str	r0, [sp, #20]
    7094:	b	7170 <test_sort_find+0x5a4>
    7098:	ldr	r0, [fp, #-16]
    709c:	movw	r1, #0
    70a0:	movt	r1, #0
    70a4:	bl	71fc <MyGame_Example_Monster_vec_find_by_name>
    70a8:	movw	r1, #0
    70ac:	cmp	r1, r0
    70b0:	beq	70c8 <test_sort_find+0x4fc>
    70b4:	movw	r0, #0
    70b8:	movt	r0, #0
    70bc:	bl	0 <printf>
    70c0:	str	r0, [sp, #16]
    70c4:	b	7170 <test_sort_find+0x5a4>
    70c8:	ldr	r0, [fp, #-16]
    70cc:	movw	r1, #0
    70d0:	movt	r1, #0
    70d4:	bl	71fc <MyGame_Example_Monster_vec_find_by_name>
    70d8:	str	r0, [fp, #-8]
    70dc:	movw	r1, #1
    70e0:	cmp	r1, r0
    70e4:	beq	7114 <test_sort_find+0x548>
    70e8:	movw	r0, #0
    70ec:	movt	r0, #0
    70f0:	bl	0 <printf>
    70f4:	ldr	r1, [fp, #-8]
    70f8:	movw	lr, #0
    70fc:	movt	lr, #0
    7100:	str	r0, [sp, #12]
    7104:	mov	r0, lr
    7108:	bl	0 <printf>
    710c:	str	r0, [sp, #8]
    7110:	b	7170 <test_sort_find+0x5a4>
    7114:	ldr	r0, [fp, #-16]
    7118:	movw	r1, #0
    711c:	movt	r1, #0
    7120:	bl	71fc <MyGame_Example_Monster_vec_find_by_name>
    7124:	str	r0, [fp, #-8]
    7128:	movw	r1, #4
    712c:	cmp	r1, r0
    7130:	beq	7160 <test_sort_find+0x594>
    7134:	movw	r0, #0
    7138:	movt	r0, #0
    713c:	bl	0 <printf>
    7140:	ldr	r1, [fp, #-8]
    7144:	movw	lr, #0
    7148:	movt	lr, #0
    714c:	str	r0, [sp, #4]
    7150:	mov	r0, lr
    7154:	bl	0 <printf>
    7158:	str	r0, [sp]
    715c:	b	7170 <test_sort_find+0x5a4>
    7160:	ldr	r0, [fp, #-20]	; 0xffffffec
    7164:	bl	7184 <MyGame_Example_Monster_vec_sort_by_name>
    7168:	movw	r0, #0
    716c:	str	r0, [fp, #-32]	; 0xffffffe0
    7170:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7174:	bl	0 <flatcc_builder_aligned_free>
    7178:	ldr	r0, [fp, #-32]	; 0xffffffe0
    717c:	mov	sp, fp
    7180:	pop	{fp, pc}

00007184 <MyGame_Example_Monster_vec_sort_by_name>:
    7184:	push	{fp, lr}
    7188:	mov	fp, sp
    718c:	sub	sp, sp, #8
    7190:	str	r0, [sp, #4]
    7194:	ldr	r0, [sp, #4]
    7198:	bl	126c8 <__MyGame_Example_Monster_sort_by_name__heap_sort>
    719c:	mov	sp, fp
    71a0:	pop	{fp, pc}

000071a4 <MyGame_Example_Monster_vec_find>:
    71a4:	push	{fp, lr}
    71a8:	mov	fp, sp
    71ac:	sub	sp, sp, #8
    71b0:	str	r0, [sp, #4]
    71b4:	str	r1, [sp]
    71b8:	ldr	r0, [sp, #4]
    71bc:	ldr	r1, [sp]
    71c0:	bl	71fc <MyGame_Example_Monster_vec_find_by_name>
    71c4:	mov	sp, fp
    71c8:	pop	{fp, pc}

000071cc <MyGame_Example_Monster_vec_find_n>:
    71cc:	push	{fp, lr}
    71d0:	mov	fp, sp
    71d4:	sub	sp, sp, #16
    71d8:	str	r0, [fp, #-4]
    71dc:	str	r1, [sp, #8]
    71e0:	str	r2, [sp, #4]
    71e4:	ldr	r0, [fp, #-4]
    71e8:	ldr	r1, [sp, #8]
    71ec:	ldr	r2, [sp, #4]
    71f0:	bl	732c <MyGame_Example_Monster_vec_find_n_by_name>
    71f4:	mov	sp, fp
    71f8:	pop	{fp, pc}

000071fc <MyGame_Example_Monster_vec_find_by_name>:
    71fc:	push	{fp, lr}
    7200:	mov	fp, sp
    7204:	sub	sp, sp, #32
    7208:	str	r0, [fp, #-8]
    720c:	str	r1, [fp, #-12]
    7210:	movw	r0, #0
    7214:	str	r0, [sp, #12]
    7218:	ldr	r0, [fp, #-8]
    721c:	bl	4454 <MyGame_Example_Monster_vec_len>
    7220:	str	r0, [sp, #8]
    7224:	cmp	r0, #0
    7228:	bne	7240 <MyGame_Example_Monster_vec_find_by_name+0x44>
    722c:	movw	r0, #0
    7230:	movt	r0, #0
    7234:	ldr	r0, [r0]
    7238:	str	r0, [fp, #-4]
    723c:	b	7320 <MyGame_Example_Monster_vec_find_by_name+0x124>
    7240:	ldr	r0, [sp, #8]
    7244:	mvn	r1, #0
    7248:	add	r0, r0, r1
    724c:	str	r0, [sp, #8]
    7250:	ldr	r0, [sp, #12]
    7254:	ldr	r1, [sp, #8]
    7258:	cmp	r0, r1
    725c:	bcs	72c4 <MyGame_Example_Monster_vec_find_by_name+0xc8>
    7260:	ldr	r0, [sp, #12]
    7264:	ldr	r1, [sp, #8]
    7268:	ldr	r2, [sp, #12]
    726c:	sub	r1, r1, r2
    7270:	lsr	r1, r1, #1
    7274:	add	r0, r0, r1
    7278:	str	r0, [sp, #4]
    727c:	ldr	r0, [fp, #-8]
    7280:	ldr	r1, [sp, #4]
    7284:	bl	44a4 <MyGame_Example_Monster_vec_at>
    7288:	bl	3a0c <MyGame_Example_Monster_name>
    728c:	str	r0, [sp, #16]
    7290:	ldr	r0, [sp, #16]
    7294:	ldr	r1, [fp, #-12]
    7298:	movw	r2, #0
    729c:	bl	12ab0 <__flatbuffers_string_cmp>
    72a0:	cmp	r0, #0
    72a4:	bge	72b8 <MyGame_Example_Monster_vec_find_by_name+0xbc>
    72a8:	ldr	r0, [sp, #4]
    72ac:	add	r0, r0, #1
    72b0:	str	r0, [sp, #12]
    72b4:	b	72c0 <MyGame_Example_Monster_vec_find_by_name+0xc4>
    72b8:	ldr	r0, [sp, #4]
    72bc:	str	r0, [sp, #8]
    72c0:	b	7250 <MyGame_Example_Monster_vec_find_by_name+0x54>
    72c4:	ldr	r0, [sp, #12]
    72c8:	ldr	r1, [sp, #8]
    72cc:	cmp	r0, r1
    72d0:	bne	7310 <MyGame_Example_Monster_vec_find_by_name+0x114>
    72d4:	ldr	r0, [fp, #-8]
    72d8:	ldr	r1, [sp, #12]
    72dc:	bl	44a4 <MyGame_Example_Monster_vec_at>
    72e0:	bl	3a0c <MyGame_Example_Monster_name>
    72e4:	str	r0, [sp, #16]
    72e8:	ldr	r0, [sp, #16]
    72ec:	ldr	r1, [fp, #-12]
    72f0:	movw	r2, #0
    72f4:	bl	12ab0 <__flatbuffers_string_cmp>
    72f8:	cmp	r0, #0
    72fc:	bne	730c <MyGame_Example_Monster_vec_find_by_name+0x110>
    7300:	ldr	r0, [sp, #12]
    7304:	str	r0, [fp, #-4]
    7308:	b	7320 <MyGame_Example_Monster_vec_find_by_name+0x124>
    730c:	b	7310 <MyGame_Example_Monster_vec_find_by_name+0x114>
    7310:	movw	r0, #0
    7314:	movt	r0, #0
    7318:	ldr	r0, [r0]
    731c:	str	r0, [fp, #-4]
    7320:	ldr	r0, [fp, #-4]
    7324:	mov	sp, fp
    7328:	pop	{fp, pc}

0000732c <MyGame_Example_Monster_vec_find_n_by_name>:
    732c:	push	{fp, lr}
    7330:	mov	fp, sp
    7334:	sub	sp, sp, #32
    7338:	str	r0, [fp, #-8]
    733c:	str	r1, [fp, #-12]
    7340:	str	r2, [sp, #16]
    7344:	movw	r0, #0
    7348:	str	r0, [sp, #8]
    734c:	ldr	r0, [fp, #-8]
    7350:	bl	4454 <MyGame_Example_Monster_vec_len>
    7354:	str	r0, [sp, #4]
    7358:	cmp	r0, #0
    735c:	bne	7374 <MyGame_Example_Monster_vec_find_n_by_name+0x48>
    7360:	movw	r0, #0
    7364:	movt	r0, #0
    7368:	ldr	r0, [r0]
    736c:	str	r0, [fp, #-4]
    7370:	b	7454 <MyGame_Example_Monster_vec_find_n_by_name+0x128>
    7374:	ldr	r0, [sp, #4]
    7378:	mvn	r1, #0
    737c:	add	r0, r0, r1
    7380:	str	r0, [sp, #4]
    7384:	ldr	r0, [sp, #8]
    7388:	ldr	r1, [sp, #4]
    738c:	cmp	r0, r1
    7390:	bcs	73f8 <MyGame_Example_Monster_vec_find_n_by_name+0xcc>
    7394:	ldr	r0, [sp, #8]
    7398:	ldr	r1, [sp, #4]
    739c:	ldr	r2, [sp, #8]
    73a0:	sub	r1, r1, r2
    73a4:	lsr	r1, r1, #1
    73a8:	add	r0, r0, r1
    73ac:	str	r0, [sp]
    73b0:	ldr	r0, [fp, #-8]
    73b4:	ldr	r1, [sp]
    73b8:	bl	44a4 <MyGame_Example_Monster_vec_at>
    73bc:	bl	3a0c <MyGame_Example_Monster_name>
    73c0:	str	r0, [sp, #12]
    73c4:	ldr	r0, [sp, #12]
    73c8:	ldr	r1, [fp, #-12]
    73cc:	ldr	r2, [sp, #16]
    73d0:	bl	129c0 <__flatbuffers_string_n_cmp>
    73d4:	cmp	r0, #0
    73d8:	bge	73ec <MyGame_Example_Monster_vec_find_n_by_name+0xc0>
    73dc:	ldr	r0, [sp]
    73e0:	add	r0, r0, #1
    73e4:	str	r0, [sp, #8]
    73e8:	b	73f4 <MyGame_Example_Monster_vec_find_n_by_name+0xc8>
    73ec:	ldr	r0, [sp]
    73f0:	str	r0, [sp, #4]
    73f4:	b	7384 <MyGame_Example_Monster_vec_find_n_by_name+0x58>
    73f8:	ldr	r0, [sp, #8]
    73fc:	ldr	r1, [sp, #4]
    7400:	cmp	r0, r1
    7404:	bne	7444 <MyGame_Example_Monster_vec_find_n_by_name+0x118>
    7408:	ldr	r0, [fp, #-8]
    740c:	ldr	r1, [sp, #8]
    7410:	bl	44a4 <MyGame_Example_Monster_vec_at>
    7414:	bl	3a0c <MyGame_Example_Monster_name>
    7418:	str	r0, [sp, #12]
    741c:	ldr	r0, [sp, #12]
    7420:	ldr	r1, [fp, #-12]
    7424:	ldr	r2, [sp, #16]
    7428:	bl	129c0 <__flatbuffers_string_n_cmp>
    742c:	cmp	r0, #0
    7430:	bne	7440 <MyGame_Example_Monster_vec_find_n_by_name+0x114>
    7434:	ldr	r0, [sp, #8]
    7438:	str	r0, [fp, #-4]
    743c:	b	7454 <MyGame_Example_Monster_vec_find_n_by_name+0x128>
    7440:	b	7444 <MyGame_Example_Monster_vec_find_n_by_name+0x118>
    7444:	movw	r0, #0
    7448:	movt	r0, #0
    744c:	ldr	r0, [r0]
    7450:	str	r0, [fp, #-4]
    7454:	ldr	r0, [fp, #-4]
    7458:	mov	sp, fp
    745c:	pop	{fp, pc}

00007460 <test_scan>:
    7460:	push	{r4, r5, fp, lr}
    7464:	add	fp, sp, #8
    7468:	sub	sp, sp, #488	; 0x1e8
    746c:	str	r0, [fp, #-12]
    7470:	movw	r0, #0
    7474:	movt	r0, #0
    7478:	ldrb	r1, [r0]
    747c:	strb	r1, [fp, #-47]	; 0xffffffd1
    7480:	ldrb	r1, [r0, #1]
    7484:	strb	r1, [fp, #-46]	; 0xffffffd2
    7488:	ldrb	r1, [r0, #2]
    748c:	strb	r1, [fp, #-45]	; 0xffffffd3
    7490:	ldrb	r1, [r0, #3]
    7494:	strb	r1, [fp, #-44]	; 0xffffffd4
    7498:	ldrb	r1, [r0, #4]
    749c:	strb	r1, [fp, #-43]	; 0xffffffd5
    74a0:	ldrb	r1, [r0, #5]
    74a4:	strb	r1, [fp, #-42]	; 0xffffffd6
    74a8:	ldrb	r0, [r0, #6]
    74ac:	strb	r0, [fp, #-41]	; 0xffffffd7
    74b0:	mvn	r0, #0
    74b4:	str	r0, [fp, #-52]	; 0xffffffcc
    74b8:	ldr	r0, [fp, #-12]
    74bc:	bl	0 <flatcc_builder_reset>
    74c0:	ldr	r1, [fp, #-12]
    74c4:	str	r0, [fp, #-56]	; 0xffffffc8
    74c8:	mov	r0, r1
    74cc:	bl	598c <MyGame_Example_Monster_start_as_root>
    74d0:	ldr	r1, [fp, #-12]
    74d4:	str	r0, [fp, #-60]	; 0xffffffc4
    74d8:	mov	r0, r1
    74dc:	movw	r1, #0
    74e0:	movt	r1, #0
    74e4:	bl	1870 <MyGame_Example_Monster_name_create_str>
    74e8:	sub	r1, fp, #47	; 0x2f
    74ec:	ldr	lr, [fp, #-12]
    74f0:	str	r0, [fp, #-64]	; 0xffffffc0
    74f4:	mov	r0, lr
    74f8:	movw	r2, #7
    74fc:	bl	5b28 <MyGame_Example_Monster_inventory_create>
    7500:	ldr	r1, [fp, #-12]
    7504:	str	r0, [fp, #-68]	; 0xffffffbc
    7508:	mov	r0, r1
    750c:	bl	84a8 <MyGame_Example_Monster_testarrayofstring_start>
    7510:	ldr	r1, [fp, #-12]
    7514:	str	r0, [fp, #-72]	; 0xffffffb8
    7518:	mov	r0, r1
    751c:	bl	84c8 <MyGame_Example_Monster_testarrayofstring_end>
    7520:	ldr	r1, [fp, #-12]
    7524:	str	r0, [fp, #-76]	; 0xffffffb4
    7528:	mov	r0, r1
    752c:	bl	5e74 <MyGame_Example_Monster_testarrayoftables_start>
    7530:	ldr	r1, [fp, #-12]
    7534:	str	r0, [fp, #-80]	; 0xffffffb0
    7538:	mov	r0, r1
    753c:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    7540:	ldr	r1, [fp, #-12]
    7544:	str	r0, [fp, #-84]	; 0xffffffac
    7548:	mov	r0, r1
    754c:	movw	r1, #0
    7550:	movt	r1, #0
    7554:	bl	1870 <MyGame_Example_Monster_name_create_str>
    7558:	ldr	r1, [fp, #-12]
    755c:	str	r0, [fp, #-88]	; 0xffffffa8
    7560:	mov	r0, r1
    7564:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    7568:	ldr	r1, [fp, #-12]
    756c:	str	r0, [fp, #-92]	; 0xffffffa4
    7570:	mov	r0, r1
    7574:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    7578:	ldr	r1, [fp, #-12]
    757c:	str	r0, [fp, #-96]	; 0xffffffa0
    7580:	mov	r0, r1
    7584:	movw	r1, #0
    7588:	movt	r1, #0
    758c:	bl	1870 <MyGame_Example_Monster_name_create_str>
    7590:	ldr	r1, [fp, #-12]
    7594:	str	r0, [fp, #-100]	; 0xffffff9c
    7598:	mov	r0, r1
    759c:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    75a0:	ldr	r1, [fp, #-12]
    75a4:	str	r0, [fp, #-104]	; 0xffffff98
    75a8:	mov	r0, r1
    75ac:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    75b0:	ldr	r1, [fp, #-12]
    75b4:	str	r0, [fp, #-108]	; 0xffffff94
    75b8:	mov	r0, r1
    75bc:	movw	r1, #0
    75c0:	movt	r1, #0
    75c4:	bl	1870 <MyGame_Example_Monster_name_create_str>
    75c8:	ldr	r1, [fp, #-12]
    75cc:	str	r0, [fp, #-112]	; 0xffffff90
    75d0:	mov	r0, r1
    75d4:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    75d8:	ldr	r1, [fp, #-12]
    75dc:	str	r0, [fp, #-116]	; 0xffffff8c
    75e0:	mov	r0, r1
    75e4:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    75e8:	ldr	r1, [fp, #-12]
    75ec:	str	r0, [fp, #-120]	; 0xffffff88
    75f0:	mov	r0, r1
    75f4:	movw	r1, #0
    75f8:	movt	r1, #0
    75fc:	bl	1870 <MyGame_Example_Monster_name_create_str>
    7600:	ldr	r1, [fp, #-12]
    7604:	str	r0, [fp, #-124]	; 0xffffff84
    7608:	mov	r0, r1
    760c:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    7610:	ldr	r1, [fp, #-12]
    7614:	str	r0, [fp, #-128]	; 0xffffff80
    7618:	mov	r0, r1
    761c:	bl	5ebc <MyGame_Example_Monster_testarrayoftables_push_start>
    7620:	ldr	r1, [fp, #-12]
    7624:	str	r0, [fp, #-132]	; 0xffffff7c
    7628:	mov	r0, r1
    762c:	movw	r1, #0
    7630:	movt	r1, #0
    7634:	bl	1870 <MyGame_Example_Monster_name_create_str>
    7638:	ldr	r1, [fp, #-12]
    763c:	str	r0, [fp, #-136]	; 0xffffff78
    7640:	mov	r0, r1
    7644:	bl	5f34 <MyGame_Example_Monster_testarrayoftables_push_end>
    7648:	ldr	r1, [fp, #-12]
    764c:	str	r0, [fp, #-140]	; 0xffffff74
    7650:	mov	r0, r1
    7654:	bl	600c <MyGame_Example_Monster_testarrayoftables_end>
    7658:	ldr	r1, [fp, #-12]
    765c:	str	r0, [fp, #-144]	; 0xffffff70
    7660:	mov	r0, r1
    7664:	bl	6538 <MyGame_Example_Monster_end_as_root>
    7668:	ldr	r1, [fp, #-12]
    766c:	str	r0, [fp, #-148]	; 0xffffff6c
    7670:	mov	r0, r1
    7674:	sub	r1, fp, #40	; 0x28
    7678:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    767c:	str	r0, [fp, #-36]	; 0xffffffdc
    7680:	ldr	r0, [fp, #-36]	; 0xffffffdc
    7684:	bl	280 <MyGame_Example_Monster_as_root>
    7688:	str	r0, [fp, #-20]	; 0xffffffec
    768c:	ldr	r0, [fp, #-20]	; 0xffffffec
    7690:	bl	4358 <MyGame_Example_Monster_testarrayoftables>
    7694:	str	r0, [fp, #-24]	; 0xffffffe8
    7698:	ldr	r0, [fp, #-24]	; 0xffffffe8
    769c:	movw	r1, #0
    76a0:	cmp	r0, r1
    76a4:	beq	76ac <test_scan+0x24c>
    76a8:	b	76cc <test_scan+0x26c>
    76ac:	movw	r0, #0
    76b0:	movt	r0, #0
    76b4:	movw	r1, #0
    76b8:	movt	r1, #0
    76bc:	movw	r2, #1305	; 0x519
    76c0:	movw	r3, #0
    76c4:	movt	r3, #0
    76c8:	bl	0 <__assert_fail>
    76cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    76d0:	bl	3dd4 <MyGame_Example_Monster_inventory>
    76d4:	str	r0, [fp, #-28]	; 0xffffffe4
    76d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    76dc:	movw	lr, #0
    76e0:	cmp	r0, lr
    76e4:	beq	76ec <test_scan+0x28c>
    76e8:	b	770c <test_scan+0x2ac>
    76ec:	movw	r0, #0
    76f0:	movt	r0, #0
    76f4:	movw	r1, #0
    76f8:	movt	r1, #0
    76fc:	movw	r2, #1307	; 0x51b
    7700:	movw	r3, #0
    7704:	movt	r3, #0
    7708:	bl	0 <__assert_fail>
    770c:	ldr	r0, [fp, #-20]	; 0xffffffec
    7710:	bl	4528 <MyGame_Example_Monster_testarrayofstring>
    7714:	str	r0, [fp, #-32]	; 0xffffffe0
    7718:	ldr	r0, [fp, #-32]	; 0xffffffe0
    771c:	movw	lr, #0
    7720:	cmp	r0, lr
    7724:	beq	772c <test_scan+0x2cc>
    7728:	b	774c <test_scan+0x2ec>
    772c:	movw	r0, #0
    7730:	movt	r0, #0
    7734:	movw	r1, #0
    7738:	movt	r1, #0
    773c:	movw	r2, #1309	; 0x51d
    7740:	movw	r3, #0
    7744:	movt	r3, #0
    7748:	bl	0 <__assert_fail>
    774c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7750:	movw	r1, #0
    7754:	movt	r1, #0
    7758:	bl	8508 <MyGame_Example_Monster_vec_scan>
    775c:	movw	r1, #1
    7760:	cmp	r1, r0
    7764:	beq	777c <test_scan+0x31c>
    7768:	movw	r0, #0
    776c:	movt	r0, #0
    7770:	bl	0 <printf>
    7774:	str	r0, [fp, #-152]	; 0xffffff68
    7778:	b	8494 <test_scan+0x1034>
    777c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7780:	movw	r1, #0
    7784:	movt	r1, #0
    7788:	bl	8530 <MyGame_Example_Monster_vec_rscan>
    778c:	movw	r1, #1
    7790:	cmp	r1, r0
    7794:	beq	77ac <test_scan+0x34c>
    7798:	movw	r0, #0
    779c:	movt	r0, #0
    77a0:	bl	0 <printf>
    77a4:	str	r0, [fp, #-156]	; 0xffffff64
    77a8:	b	8494 <test_scan+0x1034>
    77ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    77b0:	movw	r1, #0
    77b4:	movt	r1, #0
    77b8:	movw	r2, #5
    77bc:	bl	8558 <MyGame_Example_Monster_vec_scan_n>
    77c0:	movw	r1, #1
    77c4:	cmp	r1, r0
    77c8:	beq	77e0 <test_scan+0x380>
    77cc:	movw	r0, #0
    77d0:	movt	r0, #0
    77d4:	bl	0 <printf>
    77d8:	str	r0, [fp, #-160]	; 0xffffff60
    77dc:	b	8494 <test_scan+0x1034>
    77e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    77e4:	movw	r1, #0
    77e8:	movt	r1, #0
    77ec:	movw	r2, #5
    77f0:	bl	8588 <MyGame_Example_Monster_vec_rscan_n>
    77f4:	movw	r1, #1
    77f8:	cmp	r1, r0
    77fc:	beq	7814 <test_scan+0x3b4>
    7800:	movw	r0, #0
    7804:	movt	r0, #0
    7808:	bl	0 <printf>
    780c:	str	r0, [fp, #-164]	; 0xffffff5c
    7810:	b	8494 <test_scan+0x1034>
    7814:	movw	r0, #0
    7818:	movt	r0, #0
    781c:	ldr	r0, [r0]
    7820:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7824:	movw	r2, #0
    7828:	movt	r2, #0
    782c:	ldr	r2, [r2]
    7830:	str	r0, [fp, #-168]	; 0xffffff58
    7834:	mov	r0, r1
    7838:	movw	r1, #2
    783c:	movw	r3, #0
    7840:	movt	r3, #0
    7844:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    7848:	ldr	r1, [fp, #-168]	; 0xffffff58
    784c:	cmp	r1, r0
    7850:	beq	7868 <test_scan+0x408>
    7854:	movw	r0, #0
    7858:	movt	r0, #0
    785c:	bl	0 <printf>
    7860:	str	r0, [fp, #-172]	; 0xffffff54
    7864:	b	8494 <test_scan+0x1034>
    7868:	movw	r0, #0
    786c:	movt	r0, #0
    7870:	ldr	r0, [r0]
    7874:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7878:	str	r0, [fp, #-176]	; 0xffffff50
    787c:	mov	r0, r1
    7880:	movw	r1, #0
    7884:	movt	r1, #0
    7888:	bl	8508 <MyGame_Example_Monster_vec_scan>
    788c:	ldr	r1, [fp, #-176]	; 0xffffff50
    7890:	cmp	r1, r0
    7894:	beq	78ac <test_scan+0x44c>
    7898:	movw	r0, #0
    789c:	movt	r0, #0
    78a0:	bl	0 <printf>
    78a4:	str	r0, [fp, #-180]	; 0xffffff4c
    78a8:	b	8494 <test_scan+0x1034>
    78ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    78b0:	movw	r1, #0
    78b4:	movt	r1, #0
    78b8:	bl	8508 <MyGame_Example_Monster_vec_scan>
    78bc:	movw	r1, #0
    78c0:	cmp	r1, r0
    78c4:	beq	78dc <test_scan+0x47c>
    78c8:	movw	r0, #0
    78cc:	movt	r0, #0
    78d0:	bl	0 <printf>
    78d4:	str	r0, [fp, #-184]	; 0xffffff48
    78d8:	b	8494 <test_scan+0x1034>
    78dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    78e0:	movw	r1, #0
    78e4:	movt	r1, #0
    78e8:	bl	85f0 <MyGame_Example_Monster_vec_scan_by_name>
    78ec:	movw	r1, #2
    78f0:	cmp	r1, r0
    78f4:	beq	790c <test_scan+0x4ac>
    78f8:	movw	r0, #0
    78fc:	movt	r0, #0
    7900:	bl	0 <printf>
    7904:	str	r0, [fp, #-188]	; 0xffffff44
    7908:	b	8494 <test_scan+0x1034>
    790c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7910:	movw	r1, #0
    7914:	movt	r1, #0
    7918:	bl	8694 <MyGame_Example_Monster_vec_rscan_by_name>
    791c:	movw	r1, #4
    7920:	cmp	r1, r0
    7924:	beq	793c <test_scan+0x4dc>
    7928:	movw	r0, #0
    792c:	movt	r0, #0
    7930:	bl	0 <printf>
    7934:	str	r0, [fp, #-192]	; 0xffffff40
    7938:	b	8494 <test_scan+0x1034>
    793c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7940:	movw	r1, #0
    7944:	movt	r1, #0
    7948:	movw	r2, #8
    794c:	bl	8724 <MyGame_Example_Monster_vec_rscan_n_by_name>
    7950:	movw	r1, #4
    7954:	cmp	r1, r0
    7958:	beq	7970 <test_scan+0x510>
    795c:	movw	r0, #0
    7960:	movt	r0, #0
    7964:	bl	0 <printf>
    7968:	str	r0, [fp, #-196]	; 0xffffff3c
    796c:	b	8494 <test_scan+0x1034>
    7970:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7974:	movw	r1, #1
    7978:	movw	r2, #3
    797c:	movw	r3, #0
    7980:	movt	r3, #0
    7984:	movw	ip, #8
    7988:	str	ip, [sp]
    798c:	bl	87b8 <MyGame_Example_Monster_vec_rscan_ex_n_by_name>
    7990:	movw	r1, #2
    7994:	cmp	r1, r0
    7998:	beq	79b0 <test_scan+0x550>
    799c:	movw	r0, #0
    79a0:	movt	r0, #0
    79a4:	bl	0 <printf>
    79a8:	str	r0, [fp, #-200]	; 0xffffff38
    79ac:	b	8494 <test_scan+0x1034>
    79b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    79b4:	movw	r1, #0
    79b8:	movt	r1, #0
    79bc:	ldr	r2, [r1]
    79c0:	movw	r1, #2
    79c4:	movw	r3, #0
    79c8:	movt	r3, #0
    79cc:	bl	8890 <MyGame_Example_Monster_vec_scan_ex_by_name>
    79d0:	movw	r1, #2
    79d4:	cmp	r1, r0
    79d8:	beq	79f0 <test_scan+0x590>
    79dc:	movw	r0, #0
    79e0:	movt	r0, #0
    79e4:	bl	0 <printf>
    79e8:	str	r0, [fp, #-204]	; 0xffffff34
    79ec:	b	8494 <test_scan+0x1034>
    79f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    79f4:	movw	r1, #0
    79f8:	movt	r1, #0
    79fc:	ldr	r2, [r1]
    7a00:	movw	r1, #2
    7a04:	movw	r3, #0
    7a08:	movt	r3, #0
    7a0c:	movw	ip, #8
    7a10:	str	ip, [sp]
    7a14:	bl	896c <MyGame_Example_Monster_vec_scan_ex_n_by_name>
    7a18:	movw	r1, #2
    7a1c:	cmp	r1, r0
    7a20:	beq	7a38 <test_scan+0x5d8>
    7a24:	movw	r0, #0
    7a28:	movt	r0, #0
    7a2c:	bl	0 <printf>
    7a30:	str	r0, [fp, #-208]	; 0xffffff30
    7a34:	b	8494 <test_scan+0x1034>
    7a38:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7a3c:	movw	r1, #0
    7a40:	movt	r1, #0
    7a44:	ldr	r2, [r1]
    7a48:	movw	r1, #3
    7a4c:	movw	r3, #0
    7a50:	movt	r3, #0
    7a54:	bl	8890 <MyGame_Example_Monster_vec_scan_ex_by_name>
    7a58:	movw	r1, #4
    7a5c:	cmp	r1, r0
    7a60:	beq	7a78 <test_scan+0x618>
    7a64:	movw	r0, #0
    7a68:	movt	r0, #0
    7a6c:	bl	0 <printf>
    7a70:	str	r0, [fp, #-212]	; 0xffffff2c
    7a74:	b	8494 <test_scan+0x1034>
    7a78:	movw	r0, #0
    7a7c:	movt	r0, #0
    7a80:	ldr	r0, [r0]
    7a84:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7a88:	str	r0, [fp, #-216]	; 0xffffff28
    7a8c:	mov	r0, r1
    7a90:	movw	r1, #1
    7a94:	movw	r2, #3
    7a98:	movw	r3, #0
    7a9c:	movt	r3, #0
    7aa0:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    7aa4:	ldr	r1, [fp, #-216]	; 0xffffff28
    7aa8:	cmp	r1, r0
    7aac:	beq	7ac4 <test_scan+0x664>
    7ab0:	movw	r0, #0
    7ab4:	movt	r0, #0
    7ab8:	bl	0 <printf>
    7abc:	str	r0, [fp, #-220]	; 0xffffff24
    7ac0:	b	8494 <test_scan+0x1034>
    7ac4:	movw	r0, #0
    7ac8:	movt	r0, #0
    7acc:	ldr	r0, [r0]
    7ad0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7ad4:	str	r0, [fp, #-224]	; 0xffffff20
    7ad8:	mov	r0, r1
    7adc:	movw	r1, #1
    7ae0:	movw	r2, #3
    7ae4:	movw	r3, #0
    7ae8:	movt	r3, #0
    7aec:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    7af0:	ldr	r1, [fp, #-224]	; 0xffffff20
    7af4:	cmp	r1, r0
    7af8:	beq	7b10 <test_scan+0x6b0>
    7afc:	movw	r0, #0
    7b00:	movt	r0, #0
    7b04:	bl	0 <printf>
    7b08:	str	r0, [fp, #-228]	; 0xffffff1c
    7b0c:	b	8494 <test_scan+0x1034>
    7b10:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7b14:	movw	r1, #1
    7b18:	movw	r2, #3
    7b1c:	movw	r3, #0
    7b20:	movt	r3, #0
    7b24:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    7b28:	movw	r1, #1
    7b2c:	cmp	r1, r0
    7b30:	beq	7b48 <test_scan+0x6e8>
    7b34:	movw	r0, #0
    7b38:	movt	r0, #0
    7b3c:	bl	0 <printf>
    7b40:	str	r0, [fp, #-232]	; 0xffffff18
    7b44:	b	8494 <test_scan+0x1034>
    7b48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7b4c:	movw	r1, #1
    7b50:	movw	r2, #3
    7b54:	movw	r3, #0
    7b58:	movt	r3, #0
    7b5c:	bl	8890 <MyGame_Example_Monster_vec_scan_ex_by_name>
    7b60:	movw	r1, #2
    7b64:	cmp	r1, r0
    7b68:	beq	7b80 <test_scan+0x720>
    7b6c:	movw	r0, #0
    7b70:	movt	r0, #0
    7b74:	bl	0 <printf>
    7b78:	str	r0, [fp, #-236]	; 0xffffff14
    7b7c:	b	8494 <test_scan+0x1034>
    7b80:	movw	r0, #0
    7b84:	movt	r0, #0
    7b88:	ldr	r0, [r0]
    7b8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7b90:	str	r0, [fp, #-240]	; 0xffffff10
    7b94:	mov	r0, r1
    7b98:	movw	r1, #1
    7b9c:	movw	r2, #3
    7ba0:	movw	r3, #0
    7ba4:	movt	r3, #0
    7ba8:	bl	8890 <MyGame_Example_Monster_vec_scan_ex_by_name>
    7bac:	ldr	r1, [fp, #-240]	; 0xffffff10
    7bb0:	cmp	r1, r0
    7bb4:	beq	7bcc <test_scan+0x76c>
    7bb8:	movw	r0, #0
    7bbc:	movt	r0, #0
    7bc0:	bl	0 <printf>
    7bc4:	str	r0, [fp, #-244]	; 0xffffff0c
    7bc8:	b	8494 <test_scan+0x1034>
    7bcc:	movw	r0, #0
    7bd0:	movt	r0, #0
    7bd4:	ldr	r0, [r0]
    7bd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7bdc:	str	r0, [sp, #248]	; 0xf8
    7be0:	mov	r0, r1
    7be4:	movw	r1, #1
    7be8:	movw	r2, #3
    7bec:	movw	r3, #0
    7bf0:	movt	r3, #0
    7bf4:	bl	8a50 <MyGame_Example_Monster_vec_rscan_ex>
    7bf8:	ldr	r1, [sp, #248]	; 0xf8
    7bfc:	cmp	r1, r0
    7c00:	beq	7c18 <test_scan+0x7b8>
    7c04:	movw	r0, #0
    7c08:	movt	r0, #0
    7c0c:	bl	0 <printf>
    7c10:	str	r0, [sp, #244]	; 0xf4
    7c14:	b	8494 <test_scan+0x1034>
    7c18:	movw	r0, #0
    7c1c:	movt	r0, #0
    7c20:	ldr	r0, [r0]
    7c24:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7c28:	str	r0, [sp, #240]	; 0xf0
    7c2c:	mov	r0, r1
    7c30:	movw	r1, #1
    7c34:	movw	r2, #3
    7c38:	movw	r3, #0
    7c3c:	movt	r3, #0
    7c40:	bl	8a50 <MyGame_Example_Monster_vec_rscan_ex>
    7c44:	ldr	r1, [sp, #240]	; 0xf0
    7c48:	cmp	r1, r0
    7c4c:	beq	7c64 <test_scan+0x804>
    7c50:	movw	r0, #0
    7c54:	movt	r0, #0
    7c58:	bl	0 <printf>
    7c5c:	str	r0, [sp, #236]	; 0xec
    7c60:	b	8494 <test_scan+0x1034>
    7c64:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7c68:	movw	r1, #1
    7c6c:	movw	r2, #3
    7c70:	movw	r3, #0
    7c74:	movt	r3, #0
    7c78:	bl	8a50 <MyGame_Example_Monster_vec_rscan_ex>
    7c7c:	movw	r1, #1
    7c80:	cmp	r1, r0
    7c84:	beq	7c9c <test_scan+0x83c>
    7c88:	movw	r0, #0
    7c8c:	movt	r0, #0
    7c90:	bl	0 <printf>
    7c94:	str	r0, [sp, #232]	; 0xe8
    7c98:	b	8494 <test_scan+0x1034>
    7c9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7ca0:	movw	r1, #1
    7ca4:	movw	r2, #3
    7ca8:	movw	r3, #0
    7cac:	movt	r3, #0
    7cb0:	bl	8a88 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    7cb4:	movw	r1, #2
    7cb8:	cmp	r1, r0
    7cbc:	beq	7cd4 <test_scan+0x874>
    7cc0:	movw	r0, #0
    7cc4:	movt	r0, #0
    7cc8:	bl	0 <printf>
    7ccc:	str	r0, [sp, #228]	; 0xe4
    7cd0:	b	8494 <test_scan+0x1034>
    7cd4:	movw	r0, #0
    7cd8:	movt	r0, #0
    7cdc:	ldr	r0, [r0]
    7ce0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7ce4:	str	r0, [sp, #224]	; 0xe0
    7ce8:	mov	r0, r1
    7cec:	movw	r1, #1
    7cf0:	movw	r2, #3
    7cf4:	movw	r3, #0
    7cf8:	movt	r3, #0
    7cfc:	bl	8a88 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    7d00:	ldr	r1, [sp, #224]	; 0xe0
    7d04:	cmp	r1, r0
    7d08:	beq	7d20 <test_scan+0x8c0>
    7d0c:	movw	r0, #0
    7d10:	movt	r0, #0
    7d14:	bl	0 <printf>
    7d18:	str	r0, [sp, #220]	; 0xdc
    7d1c:	b	8494 <test_scan+0x1034>
    7d20:	movw	r0, #0
    7d24:	movt	r0, #0
    7d28:	ldr	r0, [r0]
    7d2c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7d30:	str	r0, [sp, #216]	; 0xd8
    7d34:	mov	r0, r1
    7d38:	movw	r1, #0
    7d3c:	str	r1, [sp, #212]	; 0xd4
    7d40:	ldr	r2, [sp, #212]	; 0xd4
    7d44:	movw	r3, #0
    7d48:	movt	r3, #0
    7d4c:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    7d50:	ldr	r1, [sp, #216]	; 0xd8
    7d54:	cmp	r1, r0
    7d58:	beq	7d70 <test_scan+0x910>
    7d5c:	movw	r0, #0
    7d60:	movt	r0, #0
    7d64:	bl	0 <printf>
    7d68:	str	r0, [sp, #208]	; 0xd0
    7d6c:	b	8494 <test_scan+0x1034>
    7d70:	movw	r0, #0
    7d74:	movt	r0, #0
    7d78:	ldr	r0, [r0]
    7d7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7d80:	str	r0, [sp, #204]	; 0xcc
    7d84:	mov	r0, r1
    7d88:	movw	r1, #0
    7d8c:	str	r1, [sp, #200]	; 0xc8
    7d90:	ldr	r2, [sp, #200]	; 0xc8
    7d94:	movw	r3, #0
    7d98:	movt	r3, #0
    7d9c:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    7da0:	ldr	r1, [sp, #204]	; 0xcc
    7da4:	cmp	r1, r0
    7da8:	beq	7dc0 <test_scan+0x960>
    7dac:	movw	r0, #0
    7db0:	movt	r0, #0
    7db4:	bl	0 <printf>
    7db8:	str	r0, [sp, #196]	; 0xc4
    7dbc:	b	8494 <test_scan+0x1034>
    7dc0:	movw	r0, #0
    7dc4:	movt	r0, #0
    7dc8:	ldr	r0, [r0]
    7dcc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7dd0:	str	r0, [sp, #192]	; 0xc0
    7dd4:	mov	r0, r1
    7dd8:	movw	r1, #1
    7ddc:	str	r1, [sp, #188]	; 0xbc
    7de0:	ldr	r2, [sp, #188]	; 0xbc
    7de4:	movw	r3, #0
    7de8:	movt	r3, #0
    7dec:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    7df0:	ldr	r1, [sp, #192]	; 0xc0
    7df4:	cmp	r1, r0
    7df8:	beq	7e10 <test_scan+0x9b0>
    7dfc:	movw	r0, #0
    7e00:	movt	r0, #0
    7e04:	bl	0 <printf>
    7e08:	str	r0, [sp, #184]	; 0xb8
    7e0c:	b	8494 <test_scan+0x1034>
    7e10:	movw	r0, #0
    7e14:	movt	r0, #0
    7e18:	ldr	r0, [r0]
    7e1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7e20:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7e24:	str	r0, [sp, #180]	; 0xb4
    7e28:	mov	r0, r2
    7e2c:	str	r1, [sp, #176]	; 0xb0
    7e30:	bl	4454 <MyGame_Example_Monster_vec_len>
    7e34:	movw	r1, #0
    7e38:	movt	r1, #0
    7e3c:	ldr	r2, [r1]
    7e40:	ldr	r1, [sp, #176]	; 0xb0
    7e44:	str	r0, [sp, #172]	; 0xac
    7e48:	mov	r0, r1
    7e4c:	ldr	r1, [sp, #172]	; 0xac
    7e50:	movw	r3, #0
    7e54:	movt	r3, #0
    7e58:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    7e5c:	ldr	r1, [sp, #180]	; 0xb4
    7e60:	cmp	r1, r0
    7e64:	beq	7e7c <test_scan+0xa1c>
    7e68:	movw	r0, #0
    7e6c:	movt	r0, #0
    7e70:	bl	0 <printf>
    7e74:	str	r0, [sp, #168]	; 0xa8
    7e78:	b	8494 <test_scan+0x1034>
    7e7c:	movw	r0, #0
    7e80:	movt	r0, #0
    7e84:	ldr	r0, [r0]
    7e88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7e8c:	str	r0, [sp, #164]	; 0xa4
    7e90:	mov	r0, r1
    7e94:	movw	r1, #0
    7e98:	str	r1, [sp, #160]	; 0xa0
    7e9c:	ldr	r2, [sp, #160]	; 0xa0
    7ea0:	movw	r3, #0
    7ea4:	movt	r3, #0
    7ea8:	bl	8a50 <MyGame_Example_Monster_vec_rscan_ex>
    7eac:	ldr	r1, [sp, #164]	; 0xa4
    7eb0:	cmp	r1, r0
    7eb4:	beq	7ecc <test_scan+0xa6c>
    7eb8:	movw	r0, #0
    7ebc:	movt	r0, #0
    7ec0:	bl	0 <printf>
    7ec4:	str	r0, [sp, #156]	; 0x9c
    7ec8:	b	8494 <test_scan+0x1034>
    7ecc:	movw	r0, #0
    7ed0:	movt	r0, #0
    7ed4:	ldr	r0, [r0]
    7ed8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7edc:	str	r0, [sp, #152]	; 0x98
    7ee0:	mov	r0, r1
    7ee4:	movw	r1, #0
    7ee8:	str	r1, [sp, #148]	; 0x94
    7eec:	ldr	r2, [sp, #148]	; 0x94
    7ef0:	movw	r3, #0
    7ef4:	movt	r3, #0
    7ef8:	bl	8a50 <MyGame_Example_Monster_vec_rscan_ex>
    7efc:	ldr	r1, [sp, #152]	; 0x98
    7f00:	cmp	r1, r0
    7f04:	beq	7f1c <test_scan+0xabc>
    7f08:	movw	r0, #0
    7f0c:	movt	r0, #0
    7f10:	bl	0 <printf>
    7f14:	str	r0, [sp, #144]	; 0x90
    7f18:	b	8494 <test_scan+0x1034>
    7f1c:	movw	r0, #0
    7f20:	movt	r0, #0
    7f24:	ldr	r0, [r0]
    7f28:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7f2c:	str	r0, [sp, #140]	; 0x8c
    7f30:	mov	r0, r1
    7f34:	movw	r1, #1
    7f38:	str	r1, [sp, #136]	; 0x88
    7f3c:	ldr	r2, [sp, #136]	; 0x88
    7f40:	movw	r3, #0
    7f44:	movt	r3, #0
    7f48:	bl	8a50 <MyGame_Example_Monster_vec_rscan_ex>
    7f4c:	ldr	r1, [sp, #140]	; 0x8c
    7f50:	cmp	r1, r0
    7f54:	beq	7f6c <test_scan+0xb0c>
    7f58:	movw	r0, #0
    7f5c:	movt	r0, #0
    7f60:	bl	0 <printf>
    7f64:	str	r0, [sp, #132]	; 0x84
    7f68:	b	8494 <test_scan+0x1034>
    7f6c:	movw	r0, #0
    7f70:	movt	r0, #0
    7f74:	ldr	r0, [r0]
    7f78:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7f7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7f80:	str	r0, [sp, #128]	; 0x80
    7f84:	mov	r0, r2
    7f88:	str	r1, [sp, #124]	; 0x7c
    7f8c:	bl	4454 <MyGame_Example_Monster_vec_len>
    7f90:	movw	r1, #0
    7f94:	movt	r1, #0
    7f98:	ldr	r2, [r1]
    7f9c:	ldr	r1, [sp, #124]	; 0x7c
    7fa0:	str	r0, [sp, #120]	; 0x78
    7fa4:	mov	r0, r1
    7fa8:	ldr	r1, [sp, #120]	; 0x78
    7fac:	movw	r3, #0
    7fb0:	movt	r3, #0
    7fb4:	bl	8a50 <MyGame_Example_Monster_vec_rscan_ex>
    7fb8:	ldr	r1, [sp, #128]	; 0x80
    7fbc:	cmp	r1, r0
    7fc0:	beq	7fd8 <test_scan+0xb78>
    7fc4:	movw	r0, #0
    7fc8:	movt	r0, #0
    7fcc:	bl	0 <printf>
    7fd0:	str	r0, [sp, #116]	; 0x74
    7fd4:	b	8494 <test_scan+0x1034>
    7fd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7fdc:	movw	r1, #0
    7fe0:	movt	r1, #0
    7fe4:	bl	8b58 <count_monsters>
    7fe8:	movw	r1, #1
    7fec:	cmp	r1, r0
    7ff0:	beq	8008 <test_scan+0xba8>
    7ff4:	movw	r0, #0
    7ff8:	movt	r0, #0
    7ffc:	bl	0 <printf>
    8000:	str	r0, [sp, #112]	; 0x70
    8004:	b	8494 <test_scan+0x1034>
    8008:	ldr	r0, [fp, #-24]	; 0xffffffe8
    800c:	movw	r1, #0
    8010:	movt	r1, #0
    8014:	bl	8b58 <count_monsters>
    8018:	movw	r1, #0
    801c:	cmp	r1, r0
    8020:	beq	8038 <test_scan+0xbd8>
    8024:	movw	r0, #0
    8028:	movt	r0, #0
    802c:	bl	0 <printf>
    8030:	str	r0, [sp, #108]	; 0x6c
    8034:	b	8494 <test_scan+0x1034>
    8038:	ldr	r0, [fp, #-24]	; 0xffffffe8
    803c:	movw	r1, #0
    8040:	movt	r1, #0
    8044:	bl	8b58 <count_monsters>
    8048:	movw	r1, #1
    804c:	cmp	r1, r0
    8050:	beq	8068 <test_scan+0xc08>
    8054:	movw	r0, #0
    8058:	movt	r0, #0
    805c:	bl	0 <printf>
    8060:	str	r0, [sp, #104]	; 0x68
    8064:	b	8494 <test_scan+0x1034>
    8068:	ldr	r0, [fp, #-24]	; 0xffffffe8
    806c:	movw	r1, #0
    8070:	movt	r1, #0
    8074:	bl	8b58 <count_monsters>
    8078:	movw	r1, #2
    807c:	cmp	r1, r0
    8080:	beq	8098 <test_scan+0xc38>
    8084:	movw	r0, #0
    8088:	movt	r0, #0
    808c:	bl	0 <printf>
    8090:	str	r0, [sp, #100]	; 0x64
    8094:	b	8494 <test_scan+0x1034>
    8098:	ldr	r0, [fp, #-28]	; 0xffffffe4
    809c:	movw	r1, #6
    80a0:	and	r1, r1, #255	; 0xff
    80a4:	bl	8bdc <flatbuffers_uint8_vec_scan>
    80a8:	str	r0, [fp, #-16]
    80ac:	movw	r1, #0
    80b0:	cmp	r1, r0
    80b4:	beq	80cc <test_scan+0xc6c>
    80b8:	movw	r0, #0
    80bc:	movt	r0, #0
    80c0:	bl	0 <printf>
    80c4:	str	r0, [sp, #96]	; 0x60
    80c8:	b	8494 <test_scan+0x1034>
    80cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    80d0:	movw	r1, #1
    80d4:	and	r1, r1, #255	; 0xff
    80d8:	bl	8bdc <flatbuffers_uint8_vec_scan>
    80dc:	str	r0, [fp, #-16]
    80e0:	movw	r1, #2
    80e4:	cmp	r1, r0
    80e8:	beq	8100 <test_scan+0xca0>
    80ec:	movw	r0, #0
    80f0:	movt	r0, #0
    80f4:	bl	0 <printf>
    80f8:	str	r0, [sp, #92]	; 0x5c
    80fc:	b	8494 <test_scan+0x1034>
    8100:	movw	r0, #0
    8104:	movt	r0, #0
    8108:	ldr	r0, [r0]
    810c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8110:	movw	r2, #0
    8114:	movt	r2, #0
    8118:	ldr	r2, [r2]
    811c:	str	r0, [sp, #88]	; 0x58
    8120:	mov	r0, r1
    8124:	movw	r1, #3
    8128:	movw	r3, #1
    812c:	and	r3, r3, #255	; 0xff
    8130:	bl	8ca8 <flatbuffers_uint8_vec_scan_ex>
    8134:	str	r0, [fp, #-16]
    8138:	ldr	r1, [sp, #88]	; 0x58
    813c:	cmp	r1, r0
    8140:	beq	8158 <test_scan+0xcf8>
    8144:	movw	r0, #0
    8148:	movt	r0, #0
    814c:	bl	0 <printf>
    8150:	str	r0, [sp, #84]	; 0x54
    8154:	b	8494 <test_scan+0x1034>
    8158:	movw	r0, #0
    815c:	movt	r0, #0
    8160:	ldr	r0, [r0]
    8164:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8168:	str	r0, [sp, #80]	; 0x50
    816c:	mov	r0, r1
    8170:	movw	r1, #5
    8174:	and	r1, r1, #255	; 0xff
    8178:	bl	8bdc <flatbuffers_uint8_vec_scan>
    817c:	str	r0, [fp, #-16]
    8180:	ldr	r1, [sp, #80]	; 0x50
    8184:	cmp	r1, r0
    8188:	beq	81a0 <test_scan+0xd40>
    818c:	movw	r0, #0
    8190:	movt	r0, #0
    8194:	bl	0 <printf>
    8198:	str	r0, [sp, #76]	; 0x4c
    819c:	b	8494 <test_scan+0x1034>
    81a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    81a4:	movw	r1, #2
    81a8:	and	r1, r1, #255	; 0xff
    81ac:	bl	8bdc <flatbuffers_uint8_vec_scan>
    81b0:	str	r0, [fp, #-16]
    81b4:	movw	r1, #6
    81b8:	cmp	r1, r0
    81bc:	beq	81d4 <test_scan+0xd74>
    81c0:	movw	r0, #0
    81c4:	movt	r0, #0
    81c8:	bl	0 <printf>
    81cc:	str	r0, [sp, #72]	; 0x48
    81d0:	b	8494 <test_scan+0x1034>
    81d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    81d8:	movw	r1, #3
    81dc:	and	r1, r1, #255	; 0xff
    81e0:	bl	8bdc <flatbuffers_uint8_vec_scan>
    81e4:	str	r0, [fp, #-16]
    81e8:	movw	r1, #3
    81ec:	cmp	r1, r0
    81f0:	beq	8208 <test_scan+0xda8>
    81f4:	movw	r0, #0
    81f8:	movt	r0, #0
    81fc:	bl	0 <printf>
    8200:	str	r0, [sp, #68]	; 0x44
    8204:	b	8494 <test_scan+0x1034>
    8208:	ldr	r0, [fp, #-28]	; 0xffffffe4
    820c:	movw	r1, #0
    8210:	movt	r1, #0
    8214:	ldr	r2, [r1]
    8218:	movw	r1, #3
    821c:	movw	r3, #3
    8220:	and	r3, r3, #255	; 0xff
    8224:	bl	8ca8 <flatbuffers_uint8_vec_scan_ex>
    8228:	str	r0, [fp, #-16]
    822c:	movw	r1, #3
    8230:	cmp	r1, r0
    8234:	beq	824c <test_scan+0xdec>
    8238:	movw	r0, #0
    823c:	movt	r0, #0
    8240:	bl	0 <printf>
    8244:	str	r0, [sp, #64]	; 0x40
    8248:	b	8494 <test_scan+0x1034>
    824c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8250:	movw	r1, #0
    8254:	movt	r1, #0
    8258:	ldr	r2, [r1]
    825c:	movw	r1, #4
    8260:	movw	r3, #3
    8264:	and	r3, r3, #255	; 0xff
    8268:	bl	8ca8 <flatbuffers_uint8_vec_scan_ex>
    826c:	str	r0, [fp, #-16]
    8270:	movw	r1, #5
    8274:	cmp	r1, r0
    8278:	beq	8290 <test_scan+0xe30>
    827c:	movw	r0, #0
    8280:	movt	r0, #0
    8284:	bl	0 <printf>
    8288:	str	r0, [sp, #60]	; 0x3c
    828c:	b	8494 <test_scan+0x1034>
    8290:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8294:	movw	r1, #3
    8298:	and	r1, r1, #255	; 0xff
    829c:	bl	8dac <flatbuffers_uint8_vec_rscan>
    82a0:	str	r0, [fp, #-16]
    82a4:	movw	r1, #5
    82a8:	cmp	r1, r0
    82ac:	beq	82c4 <test_scan+0xe64>
    82b0:	movw	r0, #0
    82b4:	movt	r0, #0
    82b8:	bl	0 <printf>
    82bc:	str	r0, [sp, #56]	; 0x38
    82c0:	b	8494 <test_scan+0x1034>
    82c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    82c8:	movw	r1, #1
    82cc:	movw	r2, #4
    82d0:	movw	r3, #3
    82d4:	and	r3, r3, #255	; 0xff
    82d8:	bl	8e64 <flatbuffers_uint8_vec_rscan_ex>
    82dc:	str	r0, [fp, #-16]
    82e0:	movw	r1, #3
    82e4:	cmp	r1, r0
    82e8:	beq	8300 <test_scan+0xea0>
    82ec:	movw	r0, #0
    82f0:	movt	r0, #0
    82f4:	bl	0 <printf>
    82f8:	str	r0, [sp, #52]	; 0x34
    82fc:	b	8494 <test_scan+0x1034>
    8300:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8304:	movw	r1, #0
    8308:	movt	r1, #0
    830c:	bl	8f5c <flatbuffers_string_vec_scan>
    8310:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8314:	movw	lr, #0
    8318:	movt	lr, #0
    831c:	ldr	r2, [lr]
    8320:	str	r0, [sp, #48]	; 0x30
    8324:	mov	r0, r1
    8328:	movw	r1, #0
    832c:	movw	r3, #0
    8330:	movt	r3, #0
    8334:	bl	8ffc <flatbuffers_string_vec_scan_ex>
    8338:	ldr	r1, [fp, #-32]	; 0xffffffe0
    833c:	str	r0, [sp, #44]	; 0x2c
    8340:	mov	r0, r1
    8344:	movw	r1, #0
    8348:	movt	r1, #0
    834c:	movw	r2, #4
    8350:	bl	90d4 <flatbuffers_string_vec_scan_n>
    8354:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8358:	movw	r2, #0
    835c:	movt	r2, #0
    8360:	ldr	r2, [r2]
    8364:	str	r0, [sp, #40]	; 0x28
    8368:	mov	r0, r1
    836c:	movw	r1, #0
    8370:	movw	r3, #0
    8374:	movt	r3, #0
    8378:	movw	lr, #4
    837c:	str	lr, [sp]
    8380:	bl	9178 <flatbuffers_string_vec_scan_ex_n>
    8384:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8388:	str	r0, [sp, #36]	; 0x24
    838c:	mov	r0, r1
    8390:	movw	r1, #0
    8394:	movt	r1, #0
    8398:	bl	9258 <flatbuffers_string_vec_rscan>
    839c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    83a0:	movw	r2, #0
    83a4:	movt	r2, #0
    83a8:	ldr	r2, [r2]
    83ac:	str	r0, [sp, #32]
    83b0:	mov	r0, r1
    83b4:	movw	r1, #0
    83b8:	movw	r3, #0
    83bc:	movt	r3, #0
    83c0:	bl	92e4 <flatbuffers_string_vec_rscan_ex>
    83c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    83c8:	str	r0, [sp, #28]
    83cc:	mov	r0, r1
    83d0:	movw	r1, #0
    83d4:	movt	r1, #0
    83d8:	movw	r2, #4
    83dc:	bl	93b0 <flatbuffers_string_vec_rscan_n>
    83e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    83e4:	movw	r2, #0
    83e8:	movt	r2, #0
    83ec:	ldr	r2, [r2]
    83f0:	str	r0, [sp, #24]
    83f4:	mov	r0, r1
    83f8:	movw	r1, #0
    83fc:	movw	r3, #0
    8400:	movt	r3, #0
    8404:	movw	lr, #4
    8408:	str	lr, [sp]
    840c:	bl	9440 <flatbuffers_string_vec_rscan_ex_n>
    8410:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8414:	str	r0, [sp, #20]
    8418:	mov	r0, r1
    841c:	movw	r1, #13
    8420:	sxth	r1, r1
    8424:	bl	9514 <MyGame_Example_Monster_vec_scan_by_hp>
    8428:	ldr	r1, [fp, #-24]	; 0xffffffe8
    842c:	movw	r2, #0
    8430:	movt	r2, #0
    8434:	ldr	r2, [r2]
    8438:	str	r0, [sp, #16]
    843c:	mov	r0, r1
    8440:	movw	r1, #1
    8444:	movw	r3, #42	; 0x2a
    8448:	sxth	r3, r3
    844c:	bl	95e4 <MyGame_Example_Monster_vec_scan_ex_by_hp>
    8450:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8454:	str	r0, [sp, #12]
    8458:	mov	r0, r1
    845c:	movw	r1, #1
    8460:	sxth	r1, r1
    8464:	bl	96ec <MyGame_Example_Monster_vec_rscan_by_hp>
    8468:	ldr	r1, [fp, #-24]	; 0xffffffe8
    846c:	str	r0, [sp, #8]
    8470:	mov	r0, r1
    8474:	movw	r1, #0
    8478:	movw	r2, #2
    847c:	movw	r3, #42	; 0x2a
    8480:	sxth	r3, r3
    8484:	bl	97a8 <MyGame_Example_Monster_vec_rscan_ex_by_hp>
    8488:	movw	r1, #0
    848c:	str	r1, [fp, #-52]	; 0xffffffcc
    8490:	str	r0, [sp, #4]
    8494:	ldr	r0, [fp, #-36]	; 0xffffffdc
    8498:	bl	0 <flatcc_builder_aligned_free>
    849c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    84a0:	sub	sp, fp, #8
    84a4:	pop	{r4, r5, fp, pc}

000084a8 <MyGame_Example_Monster_testarrayofstring_start>:
    84a8:	push	{fp, lr}
    84ac:	mov	fp, sp
    84b0:	sub	sp, sp, #8
    84b4:	str	r0, [sp, #4]
    84b8:	ldr	r0, [sp, #4]
    84bc:	bl	0 <flatcc_builder_start_offset_vector>
    84c0:	mov	sp, fp
    84c4:	pop	{fp, pc}

000084c8 <MyGame_Example_Monster_testarrayofstring_end>:
    84c8:	push	{fp, lr}
    84cc:	mov	fp, sp
    84d0:	sub	sp, sp, #16
    84d4:	str	r0, [fp, #-4]
    84d8:	ldr	r0, [fp, #-4]
    84dc:	ldr	r1, [fp, #-4]
    84e0:	str	r0, [sp, #8]
    84e4:	mov	r0, r1
    84e8:	bl	0 <flatcc_builder_end_offset_vector>
    84ec:	ldr	r1, [sp, #8]
    84f0:	str	r0, [sp, #4]
    84f4:	mov	r0, r1
    84f8:	ldr	r1, [sp, #4]
    84fc:	bl	12420 <MyGame_Example_Monster_testarrayofstring_add>
    8500:	mov	sp, fp
    8504:	pop	{fp, pc}

00008508 <MyGame_Example_Monster_vec_scan>:
    8508:	push	{fp, lr}
    850c:	mov	fp, sp
    8510:	sub	sp, sp, #8
    8514:	str	r0, [sp, #4]
    8518:	str	r1, [sp]
    851c:	ldr	r0, [sp, #4]
    8520:	ldr	r1, [sp]
    8524:	bl	85f0 <MyGame_Example_Monster_vec_scan_by_name>
    8528:	mov	sp, fp
    852c:	pop	{fp, pc}

00008530 <MyGame_Example_Monster_vec_rscan>:
    8530:	push	{fp, lr}
    8534:	mov	fp, sp
    8538:	sub	sp, sp, #8
    853c:	str	r0, [sp, #4]
    8540:	str	r1, [sp]
    8544:	ldr	r0, [sp, #4]
    8548:	ldr	r1, [sp]
    854c:	bl	8694 <MyGame_Example_Monster_vec_rscan_by_name>
    8550:	mov	sp, fp
    8554:	pop	{fp, pc}

00008558 <MyGame_Example_Monster_vec_scan_n>:
    8558:	push	{fp, lr}
    855c:	mov	fp, sp
    8560:	sub	sp, sp, #16
    8564:	str	r0, [fp, #-4]
    8568:	str	r1, [sp, #8]
    856c:	str	r2, [sp, #4]
    8570:	ldr	r0, [fp, #-4]
    8574:	ldr	r1, [sp, #8]
    8578:	ldr	r2, [sp, #4]
    857c:	bl	12adc <MyGame_Example_Monster_vec_scan_n_by_name>
    8580:	mov	sp, fp
    8584:	pop	{fp, pc}

00008588 <MyGame_Example_Monster_vec_rscan_n>:
    8588:	push	{fp, lr}
    858c:	mov	fp, sp
    8590:	sub	sp, sp, #16
    8594:	str	r0, [fp, #-4]
    8598:	str	r1, [sp, #8]
    859c:	str	r2, [sp, #4]
    85a0:	ldr	r0, [fp, #-4]
    85a4:	ldr	r1, [sp, #8]
    85a8:	ldr	r2, [sp, #4]
    85ac:	bl	8724 <MyGame_Example_Monster_vec_rscan_n_by_name>
    85b0:	mov	sp, fp
    85b4:	pop	{fp, pc}

000085b8 <MyGame_Example_Monster_vec_scan_ex>:
    85b8:	push	{fp, lr}
    85bc:	mov	fp, sp
    85c0:	sub	sp, sp, #16
    85c4:	str	r0, [fp, #-4]
    85c8:	str	r1, [sp, #8]
    85cc:	str	r2, [sp, #4]
    85d0:	str	r3, [sp]
    85d4:	ldr	r0, [fp, #-4]
    85d8:	ldr	r1, [sp, #8]
    85dc:	ldr	r2, [sp, #4]
    85e0:	ldr	r3, [sp]
    85e4:	bl	8890 <MyGame_Example_Monster_vec_scan_ex_by_name>
    85e8:	mov	sp, fp
    85ec:	pop	{fp, pc}

000085f0 <MyGame_Example_Monster_vec_scan_by_name>:
    85f0:	push	{fp, lr}
    85f4:	mov	fp, sp
    85f8:	sub	sp, sp, #24
    85fc:	str	r0, [fp, #-8]
    8600:	str	r1, [sp, #12]
    8604:	movw	r0, #0
    8608:	str	r0, [sp, #4]
    860c:	ldr	r0, [sp, #4]
    8610:	ldr	r1, [fp, #-8]
    8614:	str	r0, [sp]
    8618:	mov	r0, r1
    861c:	bl	4454 <MyGame_Example_Monster_vec_len>
    8620:	ldr	r1, [sp]
    8624:	cmp	r1, r0
    8628:	bcs	8678 <MyGame_Example_Monster_vec_scan_by_name+0x88>
    862c:	ldr	r0, [fp, #-8]
    8630:	ldr	r1, [sp, #4]
    8634:	bl	44a4 <MyGame_Example_Monster_vec_at>
    8638:	bl	3a0c <MyGame_Example_Monster_name>
    863c:	str	r0, [sp, #8]
    8640:	ldr	r0, [sp, #8]
    8644:	ldr	r1, [sp, #12]
    8648:	movw	r2, #0
    864c:	bl	12ab0 <__flatbuffers_string_cmp>
    8650:	cmp	r0, #0
    8654:	bne	8664 <MyGame_Example_Monster_vec_scan_by_name+0x74>
    8658:	ldr	r0, [sp, #4]
    865c:	str	r0, [fp, #-4]
    8660:	b	8688 <MyGame_Example_Monster_vec_scan_by_name+0x98>
    8664:	b	8668 <MyGame_Example_Monster_vec_scan_by_name+0x78>
    8668:	ldr	r0, [sp, #4]
    866c:	add	r0, r0, #1
    8670:	str	r0, [sp, #4]
    8674:	b	860c <MyGame_Example_Monster_vec_scan_by_name+0x1c>
    8678:	movw	r0, #0
    867c:	movt	r0, #0
    8680:	ldr	r0, [r0]
    8684:	str	r0, [fp, #-4]
    8688:	ldr	r0, [fp, #-4]
    868c:	mov	sp, fp
    8690:	pop	{fp, pc}

00008694 <MyGame_Example_Monster_vec_rscan_by_name>:
    8694:	push	{fp, lr}
    8698:	mov	fp, sp
    869c:	sub	sp, sp, #24
    86a0:	str	r0, [fp, #-8]
    86a4:	str	r1, [sp, #12]
    86a8:	ldr	r0, [fp, #-8]
    86ac:	bl	4454 <MyGame_Example_Monster_vec_len>
    86b0:	str	r0, [sp, #4]
    86b4:	ldr	r0, [sp, #4]
    86b8:	mvn	r1, #0
    86bc:	add	r1, r0, r1
    86c0:	str	r1, [sp, #4]
    86c4:	cmp	r0, #0
    86c8:	bls	8708 <MyGame_Example_Monster_vec_rscan_by_name+0x74>
    86cc:	ldr	r0, [fp, #-8]
    86d0:	ldr	r1, [sp, #4]
    86d4:	bl	44a4 <MyGame_Example_Monster_vec_at>
    86d8:	bl	3a0c <MyGame_Example_Monster_name>
    86dc:	str	r0, [sp, #8]
    86e0:	ldr	r0, [sp, #8]
    86e4:	ldr	r1, [sp, #12]
    86e8:	movw	r2, #0
    86ec:	bl	12ab0 <__flatbuffers_string_cmp>
    86f0:	cmp	r0, #0
    86f4:	bne	8704 <MyGame_Example_Monster_vec_rscan_by_name+0x70>
    86f8:	ldr	r0, [sp, #4]
    86fc:	str	r0, [fp, #-4]
    8700:	b	8718 <MyGame_Example_Monster_vec_rscan_by_name+0x84>
    8704:	b	86b4 <MyGame_Example_Monster_vec_rscan_by_name+0x20>
    8708:	movw	r0, #0
    870c:	movt	r0, #0
    8710:	ldr	r0, [r0]
    8714:	str	r0, [fp, #-4]
    8718:	ldr	r0, [fp, #-4]
    871c:	mov	sp, fp
    8720:	pop	{fp, pc}

00008724 <MyGame_Example_Monster_vec_rscan_n_by_name>:
    8724:	push	{fp, lr}
    8728:	mov	fp, sp
    872c:	sub	sp, sp, #24
    8730:	str	r0, [fp, #-8]
    8734:	str	r1, [sp, #12]
    8738:	str	r2, [sp, #8]
    873c:	ldr	r0, [fp, #-8]
    8740:	bl	4454 <MyGame_Example_Monster_vec_len>
    8744:	str	r0, [sp]
    8748:	ldr	r0, [sp]
    874c:	mvn	r1, #0
    8750:	add	r1, r0, r1
    8754:	str	r1, [sp]
    8758:	cmp	r0, #0
    875c:	bls	879c <MyGame_Example_Monster_vec_rscan_n_by_name+0x78>
    8760:	ldr	r0, [fp, #-8]
    8764:	ldr	r1, [sp]
    8768:	bl	44a4 <MyGame_Example_Monster_vec_at>
    876c:	bl	3a0c <MyGame_Example_Monster_name>
    8770:	str	r0, [sp, #4]
    8774:	ldr	r0, [sp, #4]
    8778:	ldr	r1, [sp, #12]
    877c:	ldr	r2, [sp, #8]
    8780:	bl	129c0 <__flatbuffers_string_n_cmp>
    8784:	cmp	r0, #0
    8788:	bne	8798 <MyGame_Example_Monster_vec_rscan_n_by_name+0x74>
    878c:	ldr	r0, [sp]
    8790:	str	r0, [fp, #-4]
    8794:	b	87ac <MyGame_Example_Monster_vec_rscan_n_by_name+0x88>
    8798:	b	8748 <MyGame_Example_Monster_vec_rscan_n_by_name+0x24>
    879c:	movw	r0, #0
    87a0:	movt	r0, #0
    87a4:	ldr	r0, [r0]
    87a8:	str	r0, [fp, #-4]
    87ac:	ldr	r0, [fp, #-4]
    87b0:	mov	sp, fp
    87b4:	pop	{fp, pc}

000087b8 <MyGame_Example_Monster_vec_rscan_ex_n_by_name>:
    87b8:	push	{fp, lr}
    87bc:	mov	fp, sp
    87c0:	sub	sp, sp, #40	; 0x28
    87c4:	ldr	ip, [fp, #8]
    87c8:	str	r0, [fp, #-8]
    87cc:	str	r1, [fp, #-12]
    87d0:	str	r2, [fp, #-16]
    87d4:	str	r3, [sp, #20]
    87d8:	ldr	r0, [fp, #-16]
    87dc:	ldr	r1, [fp, #-8]
    87e0:	str	r0, [sp, #8]
    87e4:	mov	r0, r1
    87e8:	str	ip, [sp, #4]
    87ec:	bl	4454 <MyGame_Example_Monster_vec_len>
    87f0:	ldr	r1, [sp, #8]
    87f4:	cmp	r1, r0
    87f8:	bcs	8808 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x50>
    87fc:	ldr	r0, [fp, #-16]
    8800:	str	r0, [sp]
    8804:	b	8814 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x5c>
    8808:	ldr	r0, [fp, #-8]
    880c:	bl	4454 <MyGame_Example_Monster_vec_len>
    8810:	str	r0, [sp]
    8814:	ldr	r0, [sp]
    8818:	str	r0, [sp, #12]
    881c:	ldr	r0, [sp, #12]
    8820:	mvn	r1, #0
    8824:	add	r1, r0, r1
    8828:	str	r1, [sp, #12]
    882c:	ldr	r1, [fp, #-12]
    8830:	cmp	r0, r1
    8834:	bls	8874 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xbc>
    8838:	ldr	r0, [fp, #-8]
    883c:	ldr	r1, [sp, #12]
    8840:	bl	44a4 <MyGame_Example_Monster_vec_at>
    8844:	bl	3a0c <MyGame_Example_Monster_name>
    8848:	str	r0, [sp, #16]
    884c:	ldr	r0, [sp, #16]
    8850:	ldr	r1, [sp, #20]
    8854:	ldr	r2, [fp, #8]
    8858:	bl	129c0 <__flatbuffers_string_n_cmp>
    885c:	cmp	r0, #0
    8860:	bne	8870 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xb8>
    8864:	ldr	r0, [sp, #12]
    8868:	str	r0, [fp, #-4]
    886c:	b	8884 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xcc>
    8870:	b	881c <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x64>
    8874:	movw	r0, #0
    8878:	movt	r0, #0
    887c:	ldr	r0, [r0]
    8880:	str	r0, [fp, #-4]
    8884:	ldr	r0, [fp, #-4]
    8888:	mov	sp, fp
    888c:	pop	{fp, pc}

00008890 <MyGame_Example_Monster_vec_scan_ex_by_name>:
    8890:	push	{fp, lr}
    8894:	mov	fp, sp
    8898:	sub	sp, sp, #40	; 0x28
    889c:	str	r0, [fp, #-8]
    88a0:	str	r1, [fp, #-12]
    88a4:	str	r2, [fp, #-16]
    88a8:	str	r3, [sp, #20]
    88ac:	ldr	r0, [fp, #-12]
    88b0:	str	r0, [sp, #12]
    88b4:	ldr	r0, [sp, #12]
    88b8:	ldr	r1, [fp, #-16]
    88bc:	ldr	r2, [fp, #-8]
    88c0:	str	r0, [sp, #8]
    88c4:	mov	r0, r2
    88c8:	str	r1, [sp, #4]
    88cc:	bl	4454 <MyGame_Example_Monster_vec_len>
    88d0:	ldr	r1, [sp, #4]
    88d4:	cmp	r1, r0
    88d8:	bcs	88e8 <MyGame_Example_Monster_vec_scan_ex_by_name+0x58>
    88dc:	ldr	r0, [fp, #-16]
    88e0:	str	r0, [sp]
    88e4:	b	88f4 <MyGame_Example_Monster_vec_scan_ex_by_name+0x64>
    88e8:	ldr	r0, [fp, #-8]
    88ec:	bl	4454 <MyGame_Example_Monster_vec_len>
    88f0:	str	r0, [sp]
    88f4:	ldr	r0, [sp]
    88f8:	ldr	r1, [sp, #8]
    88fc:	cmp	r1, r0
    8900:	bcs	8950 <MyGame_Example_Monster_vec_scan_ex_by_name+0xc0>
    8904:	ldr	r0, [fp, #-8]
    8908:	ldr	r1, [sp, #12]
    890c:	bl	44a4 <MyGame_Example_Monster_vec_at>
    8910:	bl	3a0c <MyGame_Example_Monster_name>
    8914:	str	r0, [sp, #16]
    8918:	ldr	r0, [sp, #16]
    891c:	ldr	r1, [sp, #20]
    8920:	movw	r2, #0
    8924:	bl	12ab0 <__flatbuffers_string_cmp>
    8928:	cmp	r0, #0
    892c:	bne	893c <MyGame_Example_Monster_vec_scan_ex_by_name+0xac>
    8930:	ldr	r0, [sp, #12]
    8934:	str	r0, [fp, #-4]
    8938:	b	8960 <MyGame_Example_Monster_vec_scan_ex_by_name+0xd0>
    893c:	b	8940 <MyGame_Example_Monster_vec_scan_ex_by_name+0xb0>
    8940:	ldr	r0, [sp, #12]
    8944:	add	r0, r0, #1
    8948:	str	r0, [sp, #12]
    894c:	b	88b4 <MyGame_Example_Monster_vec_scan_ex_by_name+0x24>
    8950:	movw	r0, #0
    8954:	movt	r0, #0
    8958:	ldr	r0, [r0]
    895c:	str	r0, [fp, #-4]
    8960:	ldr	r0, [fp, #-4]
    8964:	mov	sp, fp
    8968:	pop	{fp, pc}

0000896c <MyGame_Example_Monster_vec_scan_ex_n_by_name>:
    896c:	push	{fp, lr}
    8970:	mov	fp, sp
    8974:	sub	sp, sp, #48	; 0x30
    8978:	ldr	ip, [fp, #8]
    897c:	str	r0, [fp, #-8]
    8980:	str	r1, [fp, #-12]
    8984:	str	r2, [fp, #-16]
    8988:	str	r3, [fp, #-20]	; 0xffffffec
    898c:	ldr	r0, [fp, #-12]
    8990:	str	r0, [sp, #20]
    8994:	str	ip, [sp, #16]
    8998:	ldr	r0, [sp, #20]
    899c:	ldr	r1, [fp, #-16]
    89a0:	ldr	r2, [fp, #-8]
    89a4:	str	r0, [sp, #12]
    89a8:	mov	r0, r2
    89ac:	str	r1, [sp, #8]
    89b0:	bl	4454 <MyGame_Example_Monster_vec_len>
    89b4:	ldr	r1, [sp, #8]
    89b8:	cmp	r1, r0
    89bc:	bcs	89cc <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x60>
    89c0:	ldr	r0, [fp, #-16]
    89c4:	str	r0, [sp, #4]
    89c8:	b	89d8 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x6c>
    89cc:	ldr	r0, [fp, #-8]
    89d0:	bl	4454 <MyGame_Example_Monster_vec_len>
    89d4:	str	r0, [sp, #4]
    89d8:	ldr	r0, [sp, #4]
    89dc:	ldr	r1, [sp, #12]
    89e0:	cmp	r1, r0
    89e4:	bcs	8a34 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xc8>
    89e8:	ldr	r0, [fp, #-8]
    89ec:	ldr	r1, [sp, #20]
    89f0:	bl	44a4 <MyGame_Example_Monster_vec_at>
    89f4:	bl	3a0c <MyGame_Example_Monster_name>
    89f8:	str	r0, [sp, #24]
    89fc:	ldr	r0, [sp, #24]
    8a00:	ldr	r1, [fp, #-20]	; 0xffffffec
    8a04:	ldr	r2, [fp, #8]
    8a08:	bl	129c0 <__flatbuffers_string_n_cmp>
    8a0c:	cmp	r0, #0
    8a10:	bne	8a20 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xb4>
    8a14:	ldr	r0, [sp, #20]
    8a18:	str	r0, [fp, #-4]
    8a1c:	b	8a44 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xd8>
    8a20:	b	8a24 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xb8>
    8a24:	ldr	r0, [sp, #20]
    8a28:	add	r0, r0, #1
    8a2c:	str	r0, [sp, #20]
    8a30:	b	8998 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x2c>
    8a34:	movw	r0, #0
    8a38:	movt	r0, #0
    8a3c:	ldr	r0, [r0]
    8a40:	str	r0, [fp, #-4]
    8a44:	ldr	r0, [fp, #-4]
    8a48:	mov	sp, fp
    8a4c:	pop	{fp, pc}

00008a50 <MyGame_Example_Monster_vec_rscan_ex>:
    8a50:	push	{fp, lr}
    8a54:	mov	fp, sp
    8a58:	sub	sp, sp, #16
    8a5c:	str	r0, [fp, #-4]
    8a60:	str	r1, [sp, #8]
    8a64:	str	r2, [sp, #4]
    8a68:	str	r3, [sp]
    8a6c:	ldr	r0, [fp, #-4]
    8a70:	ldr	r1, [sp, #8]
    8a74:	ldr	r2, [sp, #4]
    8a78:	ldr	r3, [sp]
    8a7c:	bl	8a88 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    8a80:	mov	sp, fp
    8a84:	pop	{fp, pc}

00008a88 <MyGame_Example_Monster_vec_rscan_ex_by_name>:
    8a88:	push	{fp, lr}
    8a8c:	mov	fp, sp
    8a90:	sub	sp, sp, #40	; 0x28
    8a94:	str	r0, [fp, #-8]
    8a98:	str	r1, [fp, #-12]
    8a9c:	str	r2, [fp, #-16]
    8aa0:	str	r3, [sp, #20]
    8aa4:	ldr	r0, [fp, #-16]
    8aa8:	ldr	r1, [fp, #-8]
    8aac:	str	r0, [sp, #8]
    8ab0:	mov	r0, r1
    8ab4:	bl	4454 <MyGame_Example_Monster_vec_len>
    8ab8:	ldr	r1, [sp, #8]
    8abc:	cmp	r1, r0
    8ac0:	bcs	8ad0 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x48>
    8ac4:	ldr	r0, [fp, #-16]
    8ac8:	str	r0, [sp, #4]
    8acc:	b	8adc <MyGame_Example_Monster_vec_rscan_ex_by_name+0x54>
    8ad0:	ldr	r0, [fp, #-8]
    8ad4:	bl	4454 <MyGame_Example_Monster_vec_len>
    8ad8:	str	r0, [sp, #4]
    8adc:	ldr	r0, [sp, #4]
    8ae0:	str	r0, [sp, #12]
    8ae4:	ldr	r0, [sp, #12]
    8ae8:	mvn	r1, #0
    8aec:	add	r1, r0, r1
    8af0:	str	r1, [sp, #12]
    8af4:	ldr	r1, [fp, #-12]
    8af8:	cmp	r0, r1
    8afc:	bls	8b3c <MyGame_Example_Monster_vec_rscan_ex_by_name+0xb4>
    8b00:	ldr	r0, [fp, #-8]
    8b04:	ldr	r1, [sp, #12]
    8b08:	bl	44a4 <MyGame_Example_Monster_vec_at>
    8b0c:	bl	3a0c <MyGame_Example_Monster_name>
    8b10:	str	r0, [sp, #16]
    8b14:	ldr	r0, [sp, #16]
    8b18:	ldr	r1, [sp, #20]
    8b1c:	movw	r2, #0
    8b20:	bl	12ab0 <__flatbuffers_string_cmp>
    8b24:	cmp	r0, #0
    8b28:	bne	8b38 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xb0>
    8b2c:	ldr	r0, [sp, #12]
    8b30:	str	r0, [fp, #-4]
    8b34:	b	8b4c <MyGame_Example_Monster_vec_rscan_ex_by_name+0xc4>
    8b38:	b	8ae4 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x5c>
    8b3c:	movw	r0, #0
    8b40:	movt	r0, #0
    8b44:	ldr	r0, [r0]
    8b48:	str	r0, [fp, #-4]
    8b4c:	ldr	r0, [fp, #-4]
    8b50:	mov	sp, fp
    8b54:	pop	{fp, pc}

00008b58 <count_monsters>:
    8b58:	push	{fp, lr}
    8b5c:	mov	fp, sp
    8b60:	sub	sp, sp, #16
    8b64:	str	r0, [fp, #-4]
    8b68:	str	r1, [sp, #8]
    8b6c:	movw	r0, #0
    8b70:	str	r0, [sp]
    8b74:	ldr	r0, [fp, #-4]
    8b78:	ldr	r1, [sp, #8]
    8b7c:	bl	8508 <MyGame_Example_Monster_vec_scan>
    8b80:	str	r0, [sp, #4]
    8b84:	ldr	r0, [sp, #4]
    8b88:	movw	r1, #0
    8b8c:	movt	r1, #0
    8b90:	ldr	r1, [r1]
    8b94:	cmp	r0, r1
    8b98:	beq	8bd0 <count_monsters+0x78>
    8b9c:	ldr	r0, [sp]
    8ba0:	add	r0, r0, #1
    8ba4:	str	r0, [sp]
    8ba8:	ldr	r0, [fp, #-4]
    8bac:	ldr	r1, [sp, #4]
    8bb0:	add	r1, r1, #1
    8bb4:	movw	r2, #0
    8bb8:	movt	r2, #0
    8bbc:	ldr	r2, [r2]
    8bc0:	ldr	r3, [sp, #8]
    8bc4:	bl	85b8 <MyGame_Example_Monster_vec_scan_ex>
    8bc8:	str	r0, [sp, #4]
    8bcc:	b	8b84 <count_monsters+0x2c>
    8bd0:	ldr	r0, [sp]
    8bd4:	mov	sp, fp
    8bd8:	pop	{fp, pc}

00008bdc <flatbuffers_uint8_vec_scan>:
    8bdc:	push	{fp, lr}
    8be0:	mov	fp, sp
    8be4:	sub	sp, sp, #24
    8be8:	str	r0, [fp, #-8]
    8bec:	strb	r1, [fp, #-9]
    8bf0:	movw	r0, #0
    8bf4:	str	r0, [sp, #8]
    8bf8:	ldr	r0, [sp, #8]
    8bfc:	ldr	r1, [fp, #-8]
    8c00:	str	r0, [sp, #4]
    8c04:	mov	r0, r1
    8c08:	bl	3ed0 <flatbuffers_uint8_vec_len>
    8c0c:	ldr	r1, [sp, #4]
    8c10:	cmp	r1, r0
    8c14:	bcs	8c8c <flatbuffers_uint8_vec_scan+0xb0>
    8c18:	ldr	r0, [fp, #-8]
    8c1c:	ldr	r1, [sp, #8]
    8c20:	bl	3ef0 <flatbuffers_uint8_vec_at>
    8c24:	strb	r0, [fp, #-10]
    8c28:	ldrb	r0, [fp, #-10]
    8c2c:	ldrb	r1, [fp, #-9]
    8c30:	cmp	r0, r1
    8c34:	bge	8c44 <flatbuffers_uint8_vec_scan+0x68>
    8c38:	mvn	r0, #0
    8c3c:	str	r0, [sp]
    8c40:	b	8c60 <flatbuffers_uint8_vec_scan+0x84>
    8c44:	ldrb	r0, [fp, #-10]
    8c48:	ldrb	r1, [fp, #-9]
    8c4c:	cmp	r0, r1
    8c50:	movw	r0, #0
    8c54:	movgt	r0, #1
    8c58:	and	r0, r0, #1
    8c5c:	str	r0, [sp]
    8c60:	ldr	r0, [sp]
    8c64:	cmp	r0, #0
    8c68:	bne	8c78 <flatbuffers_uint8_vec_scan+0x9c>
    8c6c:	ldr	r0, [sp, #8]
    8c70:	str	r0, [fp, #-4]
    8c74:	b	8c9c <flatbuffers_uint8_vec_scan+0xc0>
    8c78:	b	8c7c <flatbuffers_uint8_vec_scan+0xa0>
    8c7c:	ldr	r0, [sp, #8]
    8c80:	add	r0, r0, #1
    8c84:	str	r0, [sp, #8]
    8c88:	b	8bf8 <flatbuffers_uint8_vec_scan+0x1c>
    8c8c:	movw	r0, #0
    8c90:	movt	r0, #0
    8c94:	ldr	r0, [r0]
    8c98:	str	r0, [fp, #-4]
    8c9c:	ldr	r0, [fp, #-4]
    8ca0:	mov	sp, fp
    8ca4:	pop	{fp, pc}

00008ca8 <flatbuffers_uint8_vec_scan_ex>:
    8ca8:	push	{fp, lr}
    8cac:	mov	fp, sp
    8cb0:	sub	sp, sp, #40	; 0x28
    8cb4:	str	r0, [fp, #-8]
    8cb8:	str	r1, [fp, #-12]
    8cbc:	str	r2, [fp, #-16]
    8cc0:	strb	r3, [fp, #-17]	; 0xffffffef
    8cc4:	ldr	r0, [fp, #-12]
    8cc8:	str	r0, [sp, #16]
    8ccc:	ldr	r0, [sp, #16]
    8cd0:	ldr	r1, [fp, #-16]
    8cd4:	ldr	r2, [fp, #-8]
    8cd8:	str	r0, [sp, #12]
    8cdc:	mov	r0, r2
    8ce0:	str	r1, [sp, #8]
    8ce4:	bl	3ed0 <flatbuffers_uint8_vec_len>
    8ce8:	ldr	r1, [sp, #8]
    8cec:	cmp	r1, r0
    8cf0:	bcs	8d00 <flatbuffers_uint8_vec_scan_ex+0x58>
    8cf4:	ldr	r0, [fp, #-16]
    8cf8:	str	r0, [sp, #4]
    8cfc:	b	8d0c <flatbuffers_uint8_vec_scan_ex+0x64>
    8d00:	ldr	r0, [fp, #-8]
    8d04:	bl	3ed0 <flatbuffers_uint8_vec_len>
    8d08:	str	r0, [sp, #4]
    8d0c:	ldr	r0, [sp, #4]
    8d10:	ldr	r1, [sp, #12]
    8d14:	cmp	r1, r0
    8d18:	bcs	8d90 <flatbuffers_uint8_vec_scan_ex+0xe8>
    8d1c:	ldr	r0, [fp, #-8]
    8d20:	ldr	r1, [sp, #16]
    8d24:	bl	3ef0 <flatbuffers_uint8_vec_at>
    8d28:	strb	r0, [fp, #-18]	; 0xffffffee
    8d2c:	ldrb	r0, [fp, #-18]	; 0xffffffee
    8d30:	ldrb	r1, [fp, #-17]	; 0xffffffef
    8d34:	cmp	r0, r1
    8d38:	bge	8d48 <flatbuffers_uint8_vec_scan_ex+0xa0>
    8d3c:	mvn	r0, #0
    8d40:	str	r0, [sp]
    8d44:	b	8d64 <flatbuffers_uint8_vec_scan_ex+0xbc>
    8d48:	ldrb	r0, [fp, #-18]	; 0xffffffee
    8d4c:	ldrb	r1, [fp, #-17]	; 0xffffffef
    8d50:	cmp	r0, r1
    8d54:	movw	r0, #0
    8d58:	movgt	r0, #1
    8d5c:	and	r0, r0, #1
    8d60:	str	r0, [sp]
    8d64:	ldr	r0, [sp]
    8d68:	cmp	r0, #0
    8d6c:	bne	8d7c <flatbuffers_uint8_vec_scan_ex+0xd4>
    8d70:	ldr	r0, [sp, #16]
    8d74:	str	r0, [fp, #-4]
    8d78:	b	8da0 <flatbuffers_uint8_vec_scan_ex+0xf8>
    8d7c:	b	8d80 <flatbuffers_uint8_vec_scan_ex+0xd8>
    8d80:	ldr	r0, [sp, #16]
    8d84:	add	r0, r0, #1
    8d88:	str	r0, [sp, #16]
    8d8c:	b	8ccc <flatbuffers_uint8_vec_scan_ex+0x24>
    8d90:	movw	r0, #0
    8d94:	movt	r0, #0
    8d98:	ldr	r0, [r0]
    8d9c:	str	r0, [fp, #-4]
    8da0:	ldr	r0, [fp, #-4]
    8da4:	mov	sp, fp
    8da8:	pop	{fp, pc}

00008dac <flatbuffers_uint8_vec_rscan>:
    8dac:	push	{fp, lr}
    8db0:	mov	fp, sp
    8db4:	sub	sp, sp, #24
    8db8:	str	r0, [fp, #-8]
    8dbc:	strb	r1, [fp, #-9]
    8dc0:	ldr	r0, [fp, #-8]
    8dc4:	bl	3ed0 <flatbuffers_uint8_vec_len>
    8dc8:	str	r0, [sp, #8]
    8dcc:	ldr	r0, [sp, #8]
    8dd0:	mvn	r1, #0
    8dd4:	add	r1, r0, r1
    8dd8:	str	r1, [sp, #8]
    8ddc:	cmp	r0, #0
    8de0:	bls	8e48 <flatbuffers_uint8_vec_rscan+0x9c>
    8de4:	ldr	r0, [fp, #-8]
    8de8:	ldr	r1, [sp, #8]
    8dec:	bl	3ef0 <flatbuffers_uint8_vec_at>
    8df0:	strb	r0, [fp, #-10]
    8df4:	ldrb	r0, [fp, #-10]
    8df8:	ldrb	r1, [fp, #-9]
    8dfc:	cmp	r0, r1
    8e00:	bge	8e10 <flatbuffers_uint8_vec_rscan+0x64>
    8e04:	mvn	r0, #0
    8e08:	str	r0, [sp, #4]
    8e0c:	b	8e2c <flatbuffers_uint8_vec_rscan+0x80>
    8e10:	ldrb	r0, [fp, #-10]
    8e14:	ldrb	r1, [fp, #-9]
    8e18:	cmp	r0, r1
    8e1c:	movw	r0, #0
    8e20:	movgt	r0, #1
    8e24:	and	r0, r0, #1
    8e28:	str	r0, [sp, #4]
    8e2c:	ldr	r0, [sp, #4]
    8e30:	cmp	r0, #0
    8e34:	bne	8e44 <flatbuffers_uint8_vec_rscan+0x98>
    8e38:	ldr	r0, [sp, #8]
    8e3c:	str	r0, [fp, #-4]
    8e40:	b	8e58 <flatbuffers_uint8_vec_rscan+0xac>
    8e44:	b	8dcc <flatbuffers_uint8_vec_rscan+0x20>
    8e48:	movw	r0, #0
    8e4c:	movt	r0, #0
    8e50:	ldr	r0, [r0]
    8e54:	str	r0, [fp, #-4]
    8e58:	ldr	r0, [fp, #-4]
    8e5c:	mov	sp, fp
    8e60:	pop	{fp, pc}

00008e64 <flatbuffers_uint8_vec_rscan_ex>:
    8e64:	push	{fp, lr}
    8e68:	mov	fp, sp
    8e6c:	sub	sp, sp, #40	; 0x28
    8e70:	str	r0, [fp, #-8]
    8e74:	str	r1, [fp, #-12]
    8e78:	str	r2, [fp, #-16]
    8e7c:	strb	r3, [fp, #-17]	; 0xffffffef
    8e80:	ldr	r0, [fp, #-16]
    8e84:	ldr	r1, [fp, #-8]
    8e88:	str	r0, [sp, #12]
    8e8c:	mov	r0, r1
    8e90:	bl	3ed0 <flatbuffers_uint8_vec_len>
    8e94:	ldr	r1, [sp, #12]
    8e98:	cmp	r1, r0
    8e9c:	bcs	8eac <flatbuffers_uint8_vec_rscan_ex+0x48>
    8ea0:	ldr	r0, [fp, #-16]
    8ea4:	str	r0, [sp, #8]
    8ea8:	b	8eb8 <flatbuffers_uint8_vec_rscan_ex+0x54>
    8eac:	ldr	r0, [fp, #-8]
    8eb0:	bl	3ed0 <flatbuffers_uint8_vec_len>
    8eb4:	str	r0, [sp, #8]
    8eb8:	ldr	r0, [sp, #8]
    8ebc:	str	r0, [sp, #16]
    8ec0:	ldr	r0, [sp, #16]
    8ec4:	mvn	r1, #0
    8ec8:	add	r1, r0, r1
    8ecc:	str	r1, [sp, #16]
    8ed0:	ldr	r1, [fp, #-12]
    8ed4:	cmp	r0, r1
    8ed8:	bls	8f40 <flatbuffers_uint8_vec_rscan_ex+0xdc>
    8edc:	ldr	r0, [fp, #-8]
    8ee0:	ldr	r1, [sp, #16]
    8ee4:	bl	3ef0 <flatbuffers_uint8_vec_at>
    8ee8:	strb	r0, [fp, #-18]	; 0xffffffee
    8eec:	ldrb	r0, [fp, #-18]	; 0xffffffee
    8ef0:	ldrb	r1, [fp, #-17]	; 0xffffffef
    8ef4:	cmp	r0, r1
    8ef8:	bge	8f08 <flatbuffers_uint8_vec_rscan_ex+0xa4>
    8efc:	mvn	r0, #0
    8f00:	str	r0, [sp, #4]
    8f04:	b	8f24 <flatbuffers_uint8_vec_rscan_ex+0xc0>
    8f08:	ldrb	r0, [fp, #-18]	; 0xffffffee
    8f0c:	ldrb	r1, [fp, #-17]	; 0xffffffef
    8f10:	cmp	r0, r1
    8f14:	movw	r0, #0
    8f18:	movgt	r0, #1
    8f1c:	and	r0, r0, #1
    8f20:	str	r0, [sp, #4]
    8f24:	ldr	r0, [sp, #4]
    8f28:	cmp	r0, #0
    8f2c:	bne	8f3c <flatbuffers_uint8_vec_rscan_ex+0xd8>
    8f30:	ldr	r0, [sp, #16]
    8f34:	str	r0, [fp, #-4]
    8f38:	b	8f50 <flatbuffers_uint8_vec_rscan_ex+0xec>
    8f3c:	b	8ec0 <flatbuffers_uint8_vec_rscan_ex+0x5c>
    8f40:	movw	r0, #0
    8f44:	movt	r0, #0
    8f48:	ldr	r0, [r0]
    8f4c:	str	r0, [fp, #-4]
    8f50:	ldr	r0, [fp, #-4]
    8f54:	mov	sp, fp
    8f58:	pop	{fp, pc}

00008f5c <flatbuffers_string_vec_scan>:
    8f5c:	push	{fp, lr}
    8f60:	mov	fp, sp
    8f64:	sub	sp, sp, #24
    8f68:	str	r0, [fp, #-8]
    8f6c:	str	r1, [sp, #12]
    8f70:	movw	r0, #0
    8f74:	str	r0, [sp, #4]
    8f78:	ldr	r0, [sp, #4]
    8f7c:	ldr	r1, [fp, #-8]
    8f80:	str	r0, [sp]
    8f84:	mov	r0, r1
    8f88:	bl	4624 <flatbuffers_string_vec_len>
    8f8c:	ldr	r1, [sp]
    8f90:	cmp	r1, r0
    8f94:	bcs	8fe0 <flatbuffers_string_vec_scan+0x84>
    8f98:	ldr	r0, [fp, #-8]
    8f9c:	ldr	r1, [sp, #4]
    8fa0:	bl	4674 <flatbuffers_string_vec_at>
    8fa4:	str	r0, [sp, #8]
    8fa8:	ldr	r0, [sp, #8]
    8fac:	ldr	r1, [sp, #12]
    8fb0:	movw	r2, #0
    8fb4:	bl	12ab0 <__flatbuffers_string_cmp>
    8fb8:	cmp	r0, #0
    8fbc:	bne	8fcc <flatbuffers_string_vec_scan+0x70>
    8fc0:	ldr	r0, [sp, #4]
    8fc4:	str	r0, [fp, #-4]
    8fc8:	b	8ff0 <flatbuffers_string_vec_scan+0x94>
    8fcc:	b	8fd0 <flatbuffers_string_vec_scan+0x74>
    8fd0:	ldr	r0, [sp, #4]
    8fd4:	add	r0, r0, #1
    8fd8:	str	r0, [sp, #4]
    8fdc:	b	8f78 <flatbuffers_string_vec_scan+0x1c>
    8fe0:	movw	r0, #0
    8fe4:	movt	r0, #0
    8fe8:	ldr	r0, [r0]
    8fec:	str	r0, [fp, #-4]
    8ff0:	ldr	r0, [fp, #-4]
    8ff4:	mov	sp, fp
    8ff8:	pop	{fp, pc}

00008ffc <flatbuffers_string_vec_scan_ex>:
    8ffc:	push	{fp, lr}
    9000:	mov	fp, sp
    9004:	sub	sp, sp, #40	; 0x28
    9008:	str	r0, [fp, #-8]
    900c:	str	r1, [fp, #-12]
    9010:	str	r2, [fp, #-16]
    9014:	str	r3, [sp, #20]
    9018:	ldr	r0, [fp, #-12]
    901c:	str	r0, [sp, #12]
    9020:	ldr	r0, [sp, #12]
    9024:	ldr	r1, [fp, #-16]
    9028:	ldr	r2, [fp, #-8]
    902c:	str	r0, [sp, #8]
    9030:	mov	r0, r2
    9034:	str	r1, [sp, #4]
    9038:	bl	4624 <flatbuffers_string_vec_len>
    903c:	ldr	r1, [sp, #4]
    9040:	cmp	r1, r0
    9044:	bcs	9054 <flatbuffers_string_vec_scan_ex+0x58>
    9048:	ldr	r0, [fp, #-16]
    904c:	str	r0, [sp]
    9050:	b	9060 <flatbuffers_string_vec_scan_ex+0x64>
    9054:	ldr	r0, [fp, #-8]
    9058:	bl	4624 <flatbuffers_string_vec_len>
    905c:	str	r0, [sp]
    9060:	ldr	r0, [sp]
    9064:	ldr	r1, [sp, #8]
    9068:	cmp	r1, r0
    906c:	bcs	90b8 <flatbuffers_string_vec_scan_ex+0xbc>
    9070:	ldr	r0, [fp, #-8]
    9074:	ldr	r1, [sp, #12]
    9078:	bl	4674 <flatbuffers_string_vec_at>
    907c:	str	r0, [sp, #16]
    9080:	ldr	r0, [sp, #16]
    9084:	ldr	r1, [sp, #20]
    9088:	movw	r2, #0
    908c:	bl	12ab0 <__flatbuffers_string_cmp>
    9090:	cmp	r0, #0
    9094:	bne	90a4 <flatbuffers_string_vec_scan_ex+0xa8>
    9098:	ldr	r0, [sp, #12]
    909c:	str	r0, [fp, #-4]
    90a0:	b	90c8 <flatbuffers_string_vec_scan_ex+0xcc>
    90a4:	b	90a8 <flatbuffers_string_vec_scan_ex+0xac>
    90a8:	ldr	r0, [sp, #12]
    90ac:	add	r0, r0, #1
    90b0:	str	r0, [sp, #12]
    90b4:	b	9020 <flatbuffers_string_vec_scan_ex+0x24>
    90b8:	movw	r0, #0
    90bc:	movt	r0, #0
    90c0:	ldr	r0, [r0]
    90c4:	str	r0, [fp, #-4]
    90c8:	ldr	r0, [fp, #-4]
    90cc:	mov	sp, fp
    90d0:	pop	{fp, pc}

000090d4 <flatbuffers_string_vec_scan_n>:
    90d4:	push	{fp, lr}
    90d8:	mov	fp, sp
    90dc:	sub	sp, sp, #32
    90e0:	str	r0, [fp, #-8]
    90e4:	str	r1, [fp, #-12]
    90e8:	str	r2, [sp, #16]
    90ec:	movw	r0, #0
    90f0:	str	r0, [sp, #8]
    90f4:	ldr	r0, [sp, #8]
    90f8:	ldr	r1, [fp, #-8]
    90fc:	str	r0, [sp, #4]
    9100:	mov	r0, r1
    9104:	bl	4624 <flatbuffers_string_vec_len>
    9108:	ldr	r1, [sp, #4]
    910c:	cmp	r1, r0
    9110:	bcs	915c <flatbuffers_string_vec_scan_n+0x88>
    9114:	ldr	r0, [fp, #-8]
    9118:	ldr	r1, [sp, #8]
    911c:	bl	4674 <flatbuffers_string_vec_at>
    9120:	str	r0, [sp, #12]
    9124:	ldr	r0, [sp, #12]
    9128:	ldr	r1, [fp, #-12]
    912c:	ldr	r2, [sp, #16]
    9130:	bl	129c0 <__flatbuffers_string_n_cmp>
    9134:	cmp	r0, #0
    9138:	bne	9148 <flatbuffers_string_vec_scan_n+0x74>
    913c:	ldr	r0, [sp, #8]
    9140:	str	r0, [fp, #-4]
    9144:	b	916c <flatbuffers_string_vec_scan_n+0x98>
    9148:	b	914c <flatbuffers_string_vec_scan_n+0x78>
    914c:	ldr	r0, [sp, #8]
    9150:	add	r0, r0, #1
    9154:	str	r0, [sp, #8]
    9158:	b	90f4 <flatbuffers_string_vec_scan_n+0x20>
    915c:	movw	r0, #0
    9160:	movt	r0, #0
    9164:	ldr	r0, [r0]
    9168:	str	r0, [fp, #-4]
    916c:	ldr	r0, [fp, #-4]
    9170:	mov	sp, fp
    9174:	pop	{fp, pc}

00009178 <flatbuffers_string_vec_scan_ex_n>:
    9178:	push	{fp, lr}
    917c:	mov	fp, sp
    9180:	sub	sp, sp, #48	; 0x30
    9184:	ldr	ip, [fp, #8]
    9188:	str	r0, [fp, #-8]
    918c:	str	r1, [fp, #-12]
    9190:	str	r2, [fp, #-16]
    9194:	str	r3, [fp, #-20]	; 0xffffffec
    9198:	ldr	r0, [fp, #-12]
    919c:	str	r0, [sp, #20]
    91a0:	str	ip, [sp, #16]
    91a4:	ldr	r0, [sp, #20]
    91a8:	ldr	r1, [fp, #-16]
    91ac:	ldr	r2, [fp, #-8]
    91b0:	str	r0, [sp, #12]
    91b4:	mov	r0, r2
    91b8:	str	r1, [sp, #8]
    91bc:	bl	4624 <flatbuffers_string_vec_len>
    91c0:	ldr	r1, [sp, #8]
    91c4:	cmp	r1, r0
    91c8:	bcs	91d8 <flatbuffers_string_vec_scan_ex_n+0x60>
    91cc:	ldr	r0, [fp, #-16]
    91d0:	str	r0, [sp, #4]
    91d4:	b	91e4 <flatbuffers_string_vec_scan_ex_n+0x6c>
    91d8:	ldr	r0, [fp, #-8]
    91dc:	bl	4624 <flatbuffers_string_vec_len>
    91e0:	str	r0, [sp, #4]
    91e4:	ldr	r0, [sp, #4]
    91e8:	ldr	r1, [sp, #12]
    91ec:	cmp	r1, r0
    91f0:	bcs	923c <flatbuffers_string_vec_scan_ex_n+0xc4>
    91f4:	ldr	r0, [fp, #-8]
    91f8:	ldr	r1, [sp, #20]
    91fc:	bl	4674 <flatbuffers_string_vec_at>
    9200:	str	r0, [sp, #24]
    9204:	ldr	r0, [sp, #24]
    9208:	ldr	r1, [fp, #-20]	; 0xffffffec
    920c:	ldr	r2, [fp, #8]
    9210:	bl	129c0 <__flatbuffers_string_n_cmp>
    9214:	cmp	r0, #0
    9218:	bne	9228 <flatbuffers_string_vec_scan_ex_n+0xb0>
    921c:	ldr	r0, [sp, #20]
    9220:	str	r0, [fp, #-4]
    9224:	b	924c <flatbuffers_string_vec_scan_ex_n+0xd4>
    9228:	b	922c <flatbuffers_string_vec_scan_ex_n+0xb4>
    922c:	ldr	r0, [sp, #20]
    9230:	add	r0, r0, #1
    9234:	str	r0, [sp, #20]
    9238:	b	91a4 <flatbuffers_string_vec_scan_ex_n+0x2c>
    923c:	movw	r0, #0
    9240:	movt	r0, #0
    9244:	ldr	r0, [r0]
    9248:	str	r0, [fp, #-4]
    924c:	ldr	r0, [fp, #-4]
    9250:	mov	sp, fp
    9254:	pop	{fp, pc}

00009258 <flatbuffers_string_vec_rscan>:
    9258:	push	{fp, lr}
    925c:	mov	fp, sp
    9260:	sub	sp, sp, #24
    9264:	str	r0, [fp, #-8]
    9268:	str	r1, [sp, #12]
    926c:	ldr	r0, [fp, #-8]
    9270:	bl	4624 <flatbuffers_string_vec_len>
    9274:	str	r0, [sp, #4]
    9278:	ldr	r0, [sp, #4]
    927c:	mvn	r1, #0
    9280:	add	r1, r0, r1
    9284:	str	r1, [sp, #4]
    9288:	cmp	r0, #0
    928c:	bls	92c8 <flatbuffers_string_vec_rscan+0x70>
    9290:	ldr	r0, [fp, #-8]
    9294:	ldr	r1, [sp, #4]
    9298:	bl	4674 <flatbuffers_string_vec_at>
    929c:	str	r0, [sp, #8]
    92a0:	ldr	r0, [sp, #8]
    92a4:	ldr	r1, [sp, #12]
    92a8:	movw	r2, #0
    92ac:	bl	12ab0 <__flatbuffers_string_cmp>
    92b0:	cmp	r0, #0
    92b4:	bne	92c4 <flatbuffers_string_vec_rscan+0x6c>
    92b8:	ldr	r0, [sp, #4]
    92bc:	str	r0, [fp, #-4]
    92c0:	b	92d8 <flatbuffers_string_vec_rscan+0x80>
    92c4:	b	9278 <flatbuffers_string_vec_rscan+0x20>
    92c8:	movw	r0, #0
    92cc:	movt	r0, #0
    92d0:	ldr	r0, [r0]
    92d4:	str	r0, [fp, #-4]
    92d8:	ldr	r0, [fp, #-4]
    92dc:	mov	sp, fp
    92e0:	pop	{fp, pc}

000092e4 <flatbuffers_string_vec_rscan_ex>:
    92e4:	push	{fp, lr}
    92e8:	mov	fp, sp
    92ec:	sub	sp, sp, #40	; 0x28
    92f0:	str	r0, [fp, #-8]
    92f4:	str	r1, [fp, #-12]
    92f8:	str	r2, [fp, #-16]
    92fc:	str	r3, [sp, #20]
    9300:	ldr	r0, [fp, #-16]
    9304:	ldr	r1, [fp, #-8]
    9308:	str	r0, [sp, #8]
    930c:	mov	r0, r1
    9310:	bl	4624 <flatbuffers_string_vec_len>
    9314:	ldr	r1, [sp, #8]
    9318:	cmp	r1, r0
    931c:	bcs	932c <flatbuffers_string_vec_rscan_ex+0x48>
    9320:	ldr	r0, [fp, #-16]
    9324:	str	r0, [sp, #4]
    9328:	b	9338 <flatbuffers_string_vec_rscan_ex+0x54>
    932c:	ldr	r0, [fp, #-8]
    9330:	bl	4624 <flatbuffers_string_vec_len>
    9334:	str	r0, [sp, #4]
    9338:	ldr	r0, [sp, #4]
    933c:	str	r0, [sp, #12]
    9340:	ldr	r0, [sp, #12]
    9344:	mvn	r1, #0
    9348:	add	r1, r0, r1
    934c:	str	r1, [sp, #12]
    9350:	ldr	r1, [fp, #-12]
    9354:	cmp	r0, r1
    9358:	bls	9394 <flatbuffers_string_vec_rscan_ex+0xb0>
    935c:	ldr	r0, [fp, #-8]
    9360:	ldr	r1, [sp, #12]
    9364:	bl	4674 <flatbuffers_string_vec_at>
    9368:	str	r0, [sp, #16]
    936c:	ldr	r0, [sp, #16]
    9370:	ldr	r1, [sp, #20]
    9374:	movw	r2, #0
    9378:	bl	12ab0 <__flatbuffers_string_cmp>
    937c:	cmp	r0, #0
    9380:	bne	9390 <flatbuffers_string_vec_rscan_ex+0xac>
    9384:	ldr	r0, [sp, #12]
    9388:	str	r0, [fp, #-4]
    938c:	b	93a4 <flatbuffers_string_vec_rscan_ex+0xc0>
    9390:	b	9340 <flatbuffers_string_vec_rscan_ex+0x5c>
    9394:	movw	r0, #0
    9398:	movt	r0, #0
    939c:	ldr	r0, [r0]
    93a0:	str	r0, [fp, #-4]
    93a4:	ldr	r0, [fp, #-4]
    93a8:	mov	sp, fp
    93ac:	pop	{fp, pc}

000093b0 <flatbuffers_string_vec_rscan_n>:
    93b0:	push	{fp, lr}
    93b4:	mov	fp, sp
    93b8:	sub	sp, sp, #24
    93bc:	str	r0, [fp, #-8]
    93c0:	str	r1, [sp, #12]
    93c4:	str	r2, [sp, #8]
    93c8:	ldr	r0, [fp, #-8]
    93cc:	bl	4624 <flatbuffers_string_vec_len>
    93d0:	str	r0, [sp]
    93d4:	ldr	r0, [sp]
    93d8:	mvn	r1, #0
    93dc:	add	r1, r0, r1
    93e0:	str	r1, [sp]
    93e4:	cmp	r0, #0
    93e8:	bls	9424 <flatbuffers_string_vec_rscan_n+0x74>
    93ec:	ldr	r0, [fp, #-8]
    93f0:	ldr	r1, [sp]
    93f4:	bl	4674 <flatbuffers_string_vec_at>
    93f8:	str	r0, [sp, #4]
    93fc:	ldr	r0, [sp, #4]
    9400:	ldr	r1, [sp, #12]
    9404:	ldr	r2, [sp, #8]
    9408:	bl	129c0 <__flatbuffers_string_n_cmp>
    940c:	cmp	r0, #0
    9410:	bne	9420 <flatbuffers_string_vec_rscan_n+0x70>
    9414:	ldr	r0, [sp]
    9418:	str	r0, [fp, #-4]
    941c:	b	9434 <flatbuffers_string_vec_rscan_n+0x84>
    9420:	b	93d4 <flatbuffers_string_vec_rscan_n+0x24>
    9424:	movw	r0, #0
    9428:	movt	r0, #0
    942c:	ldr	r0, [r0]
    9430:	str	r0, [fp, #-4]
    9434:	ldr	r0, [fp, #-4]
    9438:	mov	sp, fp
    943c:	pop	{fp, pc}

00009440 <flatbuffers_string_vec_rscan_ex_n>:
    9440:	push	{fp, lr}
    9444:	mov	fp, sp
    9448:	sub	sp, sp, #40	; 0x28
    944c:	ldr	ip, [fp, #8]
    9450:	str	r0, [fp, #-8]
    9454:	str	r1, [fp, #-12]
    9458:	str	r2, [fp, #-16]
    945c:	str	r3, [sp, #20]
    9460:	ldr	r0, [fp, #-16]
    9464:	ldr	r1, [fp, #-8]
    9468:	str	r0, [sp, #8]
    946c:	mov	r0, r1
    9470:	str	ip, [sp, #4]
    9474:	bl	4624 <flatbuffers_string_vec_len>
    9478:	ldr	r1, [sp, #8]
    947c:	cmp	r1, r0
    9480:	bcs	9490 <flatbuffers_string_vec_rscan_ex_n+0x50>
    9484:	ldr	r0, [fp, #-16]
    9488:	str	r0, [sp]
    948c:	b	949c <flatbuffers_string_vec_rscan_ex_n+0x5c>
    9490:	ldr	r0, [fp, #-8]
    9494:	bl	4624 <flatbuffers_string_vec_len>
    9498:	str	r0, [sp]
    949c:	ldr	r0, [sp]
    94a0:	str	r0, [sp, #12]
    94a4:	ldr	r0, [sp, #12]
    94a8:	mvn	r1, #0
    94ac:	add	r1, r0, r1
    94b0:	str	r1, [sp, #12]
    94b4:	ldr	r1, [fp, #-12]
    94b8:	cmp	r0, r1
    94bc:	bls	94f8 <flatbuffers_string_vec_rscan_ex_n+0xb8>
    94c0:	ldr	r0, [fp, #-8]
    94c4:	ldr	r1, [sp, #12]
    94c8:	bl	4674 <flatbuffers_string_vec_at>
    94cc:	str	r0, [sp, #16]
    94d0:	ldr	r0, [sp, #16]
    94d4:	ldr	r1, [sp, #20]
    94d8:	ldr	r2, [fp, #8]
    94dc:	bl	129c0 <__flatbuffers_string_n_cmp>
    94e0:	cmp	r0, #0
    94e4:	bne	94f4 <flatbuffers_string_vec_rscan_ex_n+0xb4>
    94e8:	ldr	r0, [sp, #12]
    94ec:	str	r0, [fp, #-4]
    94f0:	b	9508 <flatbuffers_string_vec_rscan_ex_n+0xc8>
    94f4:	b	94a4 <flatbuffers_string_vec_rscan_ex_n+0x64>
    94f8:	movw	r0, #0
    94fc:	movt	r0, #0
    9500:	ldr	r0, [r0]
    9504:	str	r0, [fp, #-4]
    9508:	ldr	r0, [fp, #-4]
    950c:	mov	sp, fp
    9510:	pop	{fp, pc}

00009514 <MyGame_Example_Monster_vec_scan_by_hp>:
    9514:	push	{fp, lr}
    9518:	mov	fp, sp
    951c:	sub	sp, sp, #24
    9520:	str	r0, [fp, #-8]
    9524:	strh	r1, [fp, #-10]
    9528:	movw	r0, #0
    952c:	str	r0, [sp, #8]
    9530:	ldr	r0, [sp, #8]
    9534:	ldr	r1, [fp, #-8]
    9538:	str	r0, [sp, #4]
    953c:	mov	r0, r1
    9540:	bl	4454 <MyGame_Example_Monster_vec_len>
    9544:	ldr	r1, [sp, #4]
    9548:	cmp	r1, r0
    954c:	bcs	95c8 <MyGame_Example_Monster_vec_scan_by_hp+0xb4>
    9550:	ldr	r0, [fp, #-8]
    9554:	ldr	r1, [sp, #8]
    9558:	bl	44a4 <MyGame_Example_Monster_vec_at>
    955c:	bl	2f8 <MyGame_Example_Monster_hp>
    9560:	strh	r0, [sp, #12]
    9564:	ldrsh	r0, [sp, #12]
    9568:	ldrsh	r1, [fp, #-10]
    956c:	cmp	r0, r1
    9570:	bge	9580 <MyGame_Example_Monster_vec_scan_by_hp+0x6c>
    9574:	mvn	r0, #0
    9578:	str	r0, [sp]
    957c:	b	959c <MyGame_Example_Monster_vec_scan_by_hp+0x88>
    9580:	ldrsh	r0, [sp, #12]
    9584:	ldrsh	r1, [fp, #-10]
    9588:	cmp	r0, r1
    958c:	movw	r0, #0
    9590:	movgt	r0, #1
    9594:	and	r0, r0, #1
    9598:	str	r0, [sp]
    959c:	ldr	r0, [sp]
    95a0:	cmp	r0, #0
    95a4:	bne	95b4 <MyGame_Example_Monster_vec_scan_by_hp+0xa0>
    95a8:	ldr	r0, [sp, #8]
    95ac:	str	r0, [fp, #-4]
    95b0:	b	95d8 <MyGame_Example_Monster_vec_scan_by_hp+0xc4>
    95b4:	b	95b8 <MyGame_Example_Monster_vec_scan_by_hp+0xa4>
    95b8:	ldr	r0, [sp, #8]
    95bc:	add	r0, r0, #1
    95c0:	str	r0, [sp, #8]
    95c4:	b	9530 <MyGame_Example_Monster_vec_scan_by_hp+0x1c>
    95c8:	movw	r0, #0
    95cc:	movt	r0, #0
    95d0:	ldr	r0, [r0]
    95d4:	str	r0, [fp, #-4]
    95d8:	ldr	r0, [fp, #-4]
    95dc:	mov	sp, fp
    95e0:	pop	{fp, pc}

000095e4 <MyGame_Example_Monster_vec_scan_ex_by_hp>:
    95e4:	push	{fp, lr}
    95e8:	mov	fp, sp
    95ec:	sub	sp, sp, #40	; 0x28
    95f0:	str	r0, [fp, #-8]
    95f4:	str	r1, [fp, #-12]
    95f8:	str	r2, [fp, #-16]
    95fc:	strh	r3, [fp, #-18]	; 0xffffffee
    9600:	ldr	r0, [fp, #-12]
    9604:	str	r0, [sp, #16]
    9608:	ldr	r0, [sp, #16]
    960c:	ldr	r1, [fp, #-16]
    9610:	ldr	r2, [fp, #-8]
    9614:	str	r0, [sp, #12]
    9618:	mov	r0, r2
    961c:	str	r1, [sp, #8]
    9620:	bl	4454 <MyGame_Example_Monster_vec_len>
    9624:	ldr	r1, [sp, #8]
    9628:	cmp	r1, r0
    962c:	bcs	963c <MyGame_Example_Monster_vec_scan_ex_by_hp+0x58>
    9630:	ldr	r0, [fp, #-16]
    9634:	str	r0, [sp, #4]
    9638:	b	9648 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x64>
    963c:	ldr	r0, [fp, #-8]
    9640:	bl	4454 <MyGame_Example_Monster_vec_len>
    9644:	str	r0, [sp, #4]
    9648:	ldr	r0, [sp, #4]
    964c:	ldr	r1, [sp, #12]
    9650:	cmp	r1, r0
    9654:	bcs	96d0 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xec>
    9658:	ldr	r0, [fp, #-8]
    965c:	ldr	r1, [sp, #16]
    9660:	bl	44a4 <MyGame_Example_Monster_vec_at>
    9664:	bl	2f8 <MyGame_Example_Monster_hp>
    9668:	strh	r0, [sp, #20]
    966c:	ldrsh	r0, [sp, #20]
    9670:	ldrsh	r1, [fp, #-18]	; 0xffffffee
    9674:	cmp	r0, r1
    9678:	bge	9688 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xa4>
    967c:	mvn	r0, #0
    9680:	str	r0, [sp]
    9684:	b	96a4 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xc0>
    9688:	ldrsh	r0, [sp, #20]
    968c:	ldrsh	r1, [fp, #-18]	; 0xffffffee
    9690:	cmp	r0, r1
    9694:	movw	r0, #0
    9698:	movgt	r0, #1
    969c:	and	r0, r0, #1
    96a0:	str	r0, [sp]
    96a4:	ldr	r0, [sp]
    96a8:	cmp	r0, #0
    96ac:	bne	96bc <MyGame_Example_Monster_vec_scan_ex_by_hp+0xd8>
    96b0:	ldr	r0, [sp, #16]
    96b4:	str	r0, [fp, #-4]
    96b8:	b	96e0 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xfc>
    96bc:	b	96c0 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xdc>
    96c0:	ldr	r0, [sp, #16]
    96c4:	add	r0, r0, #1
    96c8:	str	r0, [sp, #16]
    96cc:	b	9608 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x24>
    96d0:	movw	r0, #0
    96d4:	movt	r0, #0
    96d8:	ldr	r0, [r0]
    96dc:	str	r0, [fp, #-4]
    96e0:	ldr	r0, [fp, #-4]
    96e4:	mov	sp, fp
    96e8:	pop	{fp, pc}

000096ec <MyGame_Example_Monster_vec_rscan_by_hp>:
    96ec:	push	{fp, lr}
    96f0:	mov	fp, sp
    96f4:	sub	sp, sp, #24
    96f8:	str	r0, [fp, #-8]
    96fc:	strh	r1, [fp, #-10]
    9700:	ldr	r0, [fp, #-8]
    9704:	bl	4454 <MyGame_Example_Monster_vec_len>
    9708:	str	r0, [sp, #8]
    970c:	ldr	r0, [sp, #8]
    9710:	mvn	r1, #0
    9714:	add	r1, r0, r1
    9718:	str	r1, [sp, #8]
    971c:	cmp	r0, #0
    9720:	bls	978c <MyGame_Example_Monster_vec_rscan_by_hp+0xa0>
    9724:	ldr	r0, [fp, #-8]
    9728:	ldr	r1, [sp, #8]
    972c:	bl	44a4 <MyGame_Example_Monster_vec_at>
    9730:	bl	2f8 <MyGame_Example_Monster_hp>
    9734:	strh	r0, [sp, #12]
    9738:	ldrsh	r0, [sp, #12]
    973c:	ldrsh	r1, [fp, #-10]
    9740:	cmp	r0, r1
    9744:	bge	9754 <MyGame_Example_Monster_vec_rscan_by_hp+0x68>
    9748:	mvn	r0, #0
    974c:	str	r0, [sp, #4]
    9750:	b	9770 <MyGame_Example_Monster_vec_rscan_by_hp+0x84>
    9754:	ldrsh	r0, [sp, #12]
    9758:	ldrsh	r1, [fp, #-10]
    975c:	cmp	r0, r1
    9760:	movw	r0, #0
    9764:	movgt	r0, #1
    9768:	and	r0, r0, #1
    976c:	str	r0, [sp, #4]
    9770:	ldr	r0, [sp, #4]
    9774:	cmp	r0, #0
    9778:	bne	9788 <MyGame_Example_Monster_vec_rscan_by_hp+0x9c>
    977c:	ldr	r0, [sp, #8]
    9780:	str	r0, [fp, #-4]
    9784:	b	979c <MyGame_Example_Monster_vec_rscan_by_hp+0xb0>
    9788:	b	970c <MyGame_Example_Monster_vec_rscan_by_hp+0x20>
    978c:	movw	r0, #0
    9790:	movt	r0, #0
    9794:	ldr	r0, [r0]
    9798:	str	r0, [fp, #-4]
    979c:	ldr	r0, [fp, #-4]
    97a0:	mov	sp, fp
    97a4:	pop	{fp, pc}

000097a8 <MyGame_Example_Monster_vec_rscan_ex_by_hp>:
    97a8:	push	{fp, lr}
    97ac:	mov	fp, sp
    97b0:	sub	sp, sp, #40	; 0x28
    97b4:	str	r0, [fp, #-8]
    97b8:	str	r1, [fp, #-12]
    97bc:	str	r2, [fp, #-16]
    97c0:	strh	r3, [fp, #-18]	; 0xffffffee
    97c4:	ldr	r0, [fp, #-16]
    97c8:	ldr	r1, [fp, #-8]
    97cc:	str	r0, [sp, #12]
    97d0:	mov	r0, r1
    97d4:	bl	4454 <MyGame_Example_Monster_vec_len>
    97d8:	ldr	r1, [sp, #12]
    97dc:	cmp	r1, r0
    97e0:	bcs	97f0 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x48>
    97e4:	ldr	r0, [fp, #-16]
    97e8:	str	r0, [sp, #8]
    97ec:	b	97fc <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x54>
    97f0:	ldr	r0, [fp, #-8]
    97f4:	bl	4454 <MyGame_Example_Monster_vec_len>
    97f8:	str	r0, [sp, #8]
    97fc:	ldr	r0, [sp, #8]
    9800:	str	r0, [sp, #16]
    9804:	ldr	r0, [sp, #16]
    9808:	mvn	r1, #0
    980c:	add	r1, r0, r1
    9810:	str	r1, [sp, #16]
    9814:	ldr	r1, [fp, #-12]
    9818:	cmp	r0, r1
    981c:	bls	9888 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xe0>
    9820:	ldr	r0, [fp, #-8]
    9824:	ldr	r1, [sp, #16]
    9828:	bl	44a4 <MyGame_Example_Monster_vec_at>
    982c:	bl	2f8 <MyGame_Example_Monster_hp>
    9830:	strh	r0, [sp, #20]
    9834:	ldrsh	r0, [sp, #20]
    9838:	ldrsh	r1, [fp, #-18]	; 0xffffffee
    983c:	cmp	r0, r1
    9840:	bge	9850 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xa8>
    9844:	mvn	r0, #0
    9848:	str	r0, [sp, #4]
    984c:	b	986c <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xc4>
    9850:	ldrsh	r0, [sp, #20]
    9854:	ldrsh	r1, [fp, #-18]	; 0xffffffee
    9858:	cmp	r0, r1
    985c:	movw	r0, #0
    9860:	movgt	r0, #1
    9864:	and	r0, r0, #1
    9868:	str	r0, [sp, #4]
    986c:	ldr	r0, [sp, #4]
    9870:	cmp	r0, #0
    9874:	bne	9884 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xdc>
    9878:	ldr	r0, [sp, #16]
    987c:	str	r0, [fp, #-4]
    9880:	b	9898 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xf0>
    9884:	b	9804 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x5c>
    9888:	movw	r0, #0
    988c:	movt	r0, #0
    9890:	ldr	r0, [r0]
    9894:	str	r0, [fp, #-4]
    9898:	ldr	r0, [fp, #-4]
    989c:	mov	sp, fp
    98a0:	pop	{fp, pc}

000098a4 <test_basic_sort>:
    98a4:	push	{fp, lr}
    98a8:	mov	fp, sp
    98ac:	sub	sp, sp, #88	; 0x58
    98b0:	str	r0, [fp, #-8]
    98b4:	movw	r0, #0
    98b8:	movt	r0, #0
    98bc:	ldrb	r1, [r0]
    98c0:	strb	r1, [fp, #-35]	; 0xffffffdd
    98c4:	ldrb	r1, [r0, #1]
    98c8:	strb	r1, [fp, #-34]	; 0xffffffde
    98cc:	ldrb	r1, [r0, #2]
    98d0:	strb	r1, [fp, #-33]	; 0xffffffdf
    98d4:	ldrb	r1, [r0, #3]
    98d8:	strb	r1, [fp, #-32]	; 0xffffffe0
    98dc:	ldrb	r1, [r0, #4]
    98e0:	strb	r1, [fp, #-31]	; 0xffffffe1
    98e4:	ldrb	r1, [r0, #5]
    98e8:	strb	r1, [fp, #-30]	; 0xffffffe2
    98ec:	ldrb	r0, [r0, #6]
    98f0:	strb	r0, [fp, #-29]	; 0xffffffe3
    98f4:	movw	r0, #0
    98f8:	movt	r0, #0
    98fc:	ldrb	r1, [r0]
    9900:	strb	r1, [fp, #-42]	; 0xffffffd6
    9904:	ldrb	r1, [r0, #1]
    9908:	strb	r1, [fp, #-41]	; 0xffffffd7
    990c:	ldrb	r1, [r0, #2]
    9910:	strb	r1, [fp, #-40]	; 0xffffffd8
    9914:	ldrb	r1, [r0, #3]
    9918:	strb	r1, [fp, #-39]	; 0xffffffd9
    991c:	ldrb	r1, [r0, #4]
    9920:	strb	r1, [fp, #-38]	; 0xffffffda
    9924:	ldrb	r1, [r0, #5]
    9928:	strb	r1, [fp, #-37]	; 0xffffffdb
    992c:	ldrb	r0, [r0, #6]
    9930:	strb	r0, [fp, #-36]	; 0xffffffdc
    9934:	ldr	r0, [fp, #-8]
    9938:	bl	0 <flatcc_builder_reset>
    993c:	ldr	r1, [fp, #-8]
    9940:	str	r0, [sp, #40]	; 0x28
    9944:	mov	r0, r1
    9948:	bl	598c <MyGame_Example_Monster_start_as_root>
    994c:	ldr	r1, [fp, #-8]
    9950:	str	r0, [sp, #36]	; 0x24
    9954:	mov	r0, r1
    9958:	movw	r1, #0
    995c:	movt	r1, #0
    9960:	bl	1870 <MyGame_Example_Monster_name_create_str>
    9964:	sub	r1, fp, #35	; 0x23
    9968:	ldr	lr, [fp, #-8]
    996c:	str	r0, [sp, #32]
    9970:	mov	r0, lr
    9974:	movw	r2, #7
    9978:	bl	5b28 <MyGame_Example_Monster_inventory_create>
    997c:	ldr	r1, [fp, #-8]
    9980:	str	r0, [sp, #28]
    9984:	mov	r0, r1
    9988:	bl	6538 <MyGame_Example_Monster_end_as_root>
    998c:	ldr	r1, [fp, #-8]
    9990:	str	r0, [sp, #24]
    9994:	mov	r0, r1
    9998:	sub	r1, fp, #28
    999c:	bl	0 <flatcc_builder_get_direct_buffer>
    99a0:	str	r0, [fp, #-24]	; 0xffffffe8
    99a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    99a8:	bl	280 <MyGame_Example_Monster_as_root>
    99ac:	str	r0, [fp, #-12]
    99b0:	ldr	r0, [fp, #-12]
    99b4:	bl	3dd4 <MyGame_Example_Monster_inventory>
    99b8:	str	r0, [fp, #-16]
    99bc:	ldr	r0, [fp, #-16]
    99c0:	str	r0, [fp, #-20]	; 0xffffffec
    99c4:	ldr	r0, [fp, #-20]	; 0xffffffec
    99c8:	bl	9af8 <flatbuffers_uint8_vec_sort>
    99cc:	ldr	r0, [fp, #-16]
    99d0:	bl	3ed0 <flatbuffers_uint8_vec_len>
    99d4:	cmp	r0, #7
    99d8:	bne	99e0 <test_basic_sort+0x13c>
    99dc:	b	9a00 <test_basic_sort+0x15c>
    99e0:	movw	r0, #0
    99e4:	movt	r0, #0
    99e8:	movw	r1, #0
    99ec:	movt	r1, #0
    99f0:	movw	r2, #1552	; 0x610
    99f4:	movw	r3, #0
    99f8:	movt	r3, #0
    99fc:	bl	0 <__assert_fail>
    9a00:	movw	r0, #0
    9a04:	strb	r0, [sp, #44]	; 0x2c
    9a08:	ldrb	r0, [sp, #44]	; 0x2c
    9a0c:	ldr	r1, [fp, #-16]
    9a10:	str	r0, [sp, #20]
    9a14:	mov	r0, r1
    9a18:	bl	3ed0 <flatbuffers_uint8_vec_len>
    9a1c:	ldr	r1, [sp, #20]
    9a20:	cmp	r1, r0
    9a24:	bcs	9ae4 <test_basic_sort+0x240>
    9a28:	ldr	r0, [fp, #-16]
    9a2c:	ldrb	r1, [sp, #44]	; 0x2c
    9a30:	bl	3ef0 <flatbuffers_uint8_vec_at>
    9a34:	strb	r0, [fp, #-43]	; 0xffffffd5
    9a38:	ldrb	r0, [fp, #-43]	; 0xffffffd5
    9a3c:	ldrb	r1, [sp, #44]	; 0x2c
    9a40:	sub	lr, fp, #42	; 0x2a
    9a44:	add	r1, lr, r1
    9a48:	ldrb	r1, [r1]
    9a4c:	cmp	r0, r1
    9a50:	beq	9a70 <test_basic_sort+0x1cc>
    9a54:	movw	r0, #0
    9a58:	movt	r0, #0
    9a5c:	bl	0 <printf>
    9a60:	mvn	lr, #0
    9a64:	str	lr, [fp, #-4]
    9a68:	str	r0, [sp, #16]
    9a6c:	b	9aec <test_basic_sort+0x248>
    9a70:	ldr	r0, [fp, #-16]
    9a74:	ldrb	r1, [fp, #-43]	; 0xffffffd5
    9a78:	bl	9b18 <flatbuffers_uint8_vec_find>
    9a7c:	ldrb	r1, [sp, #44]	; 0x2c
    9a80:	cmp	r1, #3
    9a84:	str	r0, [sp, #12]
    9a88:	bne	9a98 <test_basic_sort+0x1f4>
    9a8c:	movw	r0, #2
    9a90:	str	r0, [sp, #8]
    9a94:	b	9aa0 <test_basic_sort+0x1fc>
    9a98:	ldrb	r0, [sp, #44]	; 0x2c
    9a9c:	str	r0, [sp, #8]
    9aa0:	ldr	r0, [sp, #8]
    9aa4:	ldr	r1, [sp, #12]
    9aa8:	cmp	r1, r0
    9aac:	beq	9acc <test_basic_sort+0x228>
    9ab0:	movw	r0, #0
    9ab4:	movt	r0, #0
    9ab8:	bl	0 <printf>
    9abc:	mvn	lr, #0
    9ac0:	str	lr, [fp, #-4]
    9ac4:	str	r0, [sp, #4]
    9ac8:	b	9aec <test_basic_sort+0x248>
    9acc:	b	9ad0 <test_basic_sort+0x22c>
    9ad0:	ldrb	r0, [sp, #44]	; 0x2c
    9ad4:	movw	r1, #1
    9ad8:	add	r0, r0, r1
    9adc:	strb	r0, [sp, #44]	; 0x2c
    9ae0:	b	9a08 <test_basic_sort+0x164>
    9ae4:	movw	r0, #0
    9ae8:	str	r0, [fp, #-4]
    9aec:	ldr	r0, [fp, #-4]
    9af0:	mov	sp, fp
    9af4:	pop	{fp, pc}

00009af8 <flatbuffers_uint8_vec_sort>:
    9af8:	push	{fp, lr}
    9afc:	mov	fp, sp
    9b00:	sub	sp, sp, #8
    9b04:	str	r0, [sp, #4]
    9b08:	ldr	r0, [sp, #4]
    9b0c:	bl	12b84 <__flatbuffers_uint8__heap_sort>
    9b10:	mov	sp, fp
    9b14:	pop	{fp, pc}

00009b18 <flatbuffers_uint8_vec_find>:
    9b18:	push	{fp, lr}
    9b1c:	mov	fp, sp
    9b20:	sub	sp, sp, #32
    9b24:	str	r0, [fp, #-8]
    9b28:	strb	r1, [fp, #-9]
    9b2c:	movw	r0, #0
    9b30:	str	r0, [sp, #16]
    9b34:	ldr	r0, [fp, #-8]
    9b38:	bl	3ed0 <flatbuffers_uint8_vec_len>
    9b3c:	str	r0, [sp, #12]
    9b40:	cmp	r0, #0
    9b44:	bne	9b5c <flatbuffers_uint8_vec_find+0x44>
    9b48:	movw	r0, #0
    9b4c:	movt	r0, #0
    9b50:	ldr	r0, [r0]
    9b54:	str	r0, [fp, #-4]
    9b58:	b	9c8c <flatbuffers_uint8_vec_find+0x174>
    9b5c:	ldr	r0, [sp, #12]
    9b60:	mvn	r1, #0
    9b64:	add	r0, r0, r1
    9b68:	str	r0, [sp, #12]
    9b6c:	ldr	r0, [sp, #16]
    9b70:	ldr	r1, [sp, #12]
    9b74:	cmp	r0, r1
    9b78:	bcs	9c08 <flatbuffers_uint8_vec_find+0xf0>
    9b7c:	ldr	r0, [sp, #16]
    9b80:	ldr	r1, [sp, #12]
    9b84:	ldr	r2, [sp, #16]
    9b88:	sub	r1, r1, r2
    9b8c:	lsr	r1, r1, #1
    9b90:	add	r0, r0, r1
    9b94:	str	r0, [sp, #8]
    9b98:	ldr	r0, [fp, #-8]
    9b9c:	ldr	r1, [sp, #8]
    9ba0:	bl	3ef0 <flatbuffers_uint8_vec_at>
    9ba4:	strb	r0, [fp, #-10]
    9ba8:	ldrb	r0, [fp, #-10]
    9bac:	ldrb	r1, [fp, #-9]
    9bb0:	cmp	r0, r1
    9bb4:	bge	9bc4 <flatbuffers_uint8_vec_find+0xac>
    9bb8:	mvn	r0, #0
    9bbc:	str	r0, [sp, #4]
    9bc0:	b	9be0 <flatbuffers_uint8_vec_find+0xc8>
    9bc4:	ldrb	r0, [fp, #-10]
    9bc8:	ldrb	r1, [fp, #-9]
    9bcc:	cmp	r0, r1
    9bd0:	movw	r0, #0
    9bd4:	movgt	r0, #1
    9bd8:	and	r0, r0, #1
    9bdc:	str	r0, [sp, #4]
    9be0:	ldr	r0, [sp, #4]
    9be4:	cmp	r0, #0
    9be8:	bge	9bfc <flatbuffers_uint8_vec_find+0xe4>
    9bec:	ldr	r0, [sp, #8]
    9bf0:	add	r0, r0, #1
    9bf4:	str	r0, [sp, #16]
    9bf8:	b	9c04 <flatbuffers_uint8_vec_find+0xec>
    9bfc:	ldr	r0, [sp, #8]
    9c00:	str	r0, [sp, #12]
    9c04:	b	9b6c <flatbuffers_uint8_vec_find+0x54>
    9c08:	ldr	r0, [sp, #16]
    9c0c:	ldr	r1, [sp, #12]
    9c10:	cmp	r0, r1
    9c14:	bne	9c7c <flatbuffers_uint8_vec_find+0x164>
    9c18:	ldr	r0, [fp, #-8]
    9c1c:	ldr	r1, [sp, #16]
    9c20:	bl	3ef0 <flatbuffers_uint8_vec_at>
    9c24:	strb	r0, [fp, #-10]
    9c28:	ldrb	r0, [fp, #-10]
    9c2c:	ldrb	r1, [fp, #-9]
    9c30:	cmp	r0, r1
    9c34:	bge	9c44 <flatbuffers_uint8_vec_find+0x12c>
    9c38:	mvn	r0, #0
    9c3c:	str	r0, [sp]
    9c40:	b	9c60 <flatbuffers_uint8_vec_find+0x148>
    9c44:	ldrb	r0, [fp, #-10]
    9c48:	ldrb	r1, [fp, #-9]
    9c4c:	cmp	r0, r1
    9c50:	movw	r0, #0
    9c54:	movgt	r0, #1
    9c58:	and	r0, r0, #1
    9c5c:	str	r0, [sp]
    9c60:	ldr	r0, [sp]
    9c64:	cmp	r0, #0
    9c68:	bne	9c78 <flatbuffers_uint8_vec_find+0x160>
    9c6c:	ldr	r0, [sp, #16]
    9c70:	str	r0, [fp, #-4]
    9c74:	b	9c8c <flatbuffers_uint8_vec_find+0x174>
    9c78:	b	9c7c <flatbuffers_uint8_vec_find+0x164>
    9c7c:	movw	r0, #0
    9c80:	movt	r0, #0
    9c84:	ldr	r0, [r0]
    9c88:	str	r0, [fp, #-4]
    9c8c:	ldr	r0, [fp, #-4]
    9c90:	mov	sp, fp
    9c94:	pop	{fp, pc}

00009c98 <test_clone_slice>:
    9c98:	push	{r4, r5, fp, lr}
    9c9c:	add	fp, sp, #8
    9ca0:	sub	sp, sp, #264	; 0x108
    9ca4:	str	r0, [fp, #-12]
    9ca8:	mvn	r0, #0
    9cac:	str	r0, [fp, #-64]	; 0xffffffc0
    9cb0:	movw	r0, #0
    9cb4:	movt	r0, #0
    9cb8:	ldrb	r1, [r0]
    9cbc:	strb	r1, [fp, #-71]	; 0xffffffb9
    9cc0:	ldrb	r1, [r0, #1]
    9cc4:	strb	r1, [fp, #-70]	; 0xffffffba
    9cc8:	ldrb	r1, [r0, #2]
    9ccc:	strb	r1, [fp, #-69]	; 0xffffffbb
    9cd0:	ldrb	r1, [r0, #3]
    9cd4:	strb	r1, [fp, #-68]	; 0xffffffbc
    9cd8:	ldrb	r1, [r0, #4]
    9cdc:	strb	r1, [fp, #-67]	; 0xffffffbd
    9ce0:	ldrb	r1, [r0, #5]
    9ce4:	strb	r1, [fp, #-66]	; 0xffffffbe
    9ce8:	ldrb	r0, [r0, #6]
    9cec:	strb	r0, [fp, #-65]	; 0xffffffbf
    9cf0:	ldr	r0, [fp, #-12]
    9cf4:	bl	0 <flatcc_builder_reset>
    9cf8:	ldr	r1, [fp, #-12]
    9cfc:	str	r0, [fp, #-84]	; 0xffffffac
    9d00:	mov	r0, r1
    9d04:	bl	598c <MyGame_Example_Monster_start_as_root>
    9d08:	ldr	r1, [fp, #-12]
    9d0c:	str	r0, [fp, #-88]	; 0xffffffa8
    9d10:	mov	r0, r1
    9d14:	movw	r1, #0
    9d18:	movt	r1, #0
    9d1c:	bl	1870 <MyGame_Example_Monster_name_create_str>
    9d20:	sub	r1, fp, #71	; 0x47
    9d24:	ldr	lr, [fp, #-12]
    9d28:	str	r0, [fp, #-92]	; 0xffffffa4
    9d2c:	mov	r0, lr
    9d30:	movw	r2, #7
    9d34:	bl	a4b0 <MyGame_Example_Monster_testarrayofbools_create>
    9d38:	ldr	r1, [fp, #-12]
    9d3c:	str	r0, [fp, #-96]	; 0xffffffa0
    9d40:	mov	r0, r1
    9d44:	bl	5b80 <MyGame_Example_Monster_test4_start>
    9d48:	ldr	r1, [fp, #-12]
    9d4c:	str	r0, [fp, #-100]	; 0xffffff9c
    9d50:	mov	r0, r1
    9d54:	movw	r1, #2
    9d58:	bl	5ba0 <MyGame_Example_Monster_test4_extend>
    9d5c:	str	r0, [fp, #-40]	; 0xffffffd8
    9d60:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9d64:	movw	r1, #22
    9d68:	strh	r1, [r0]
    9d6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9d70:	movw	r1, #44	; 0x2c
    9d74:	strh	r1, [r0, #4]
    9d78:	ldr	r0, [fp, #-12]
    9d7c:	bl	5d98 <MyGame_Example_Monster_test4_end>
    9d80:	ldr	r1, [fp, #-12]
    9d84:	str	r0, [fp, #-104]	; 0xffffff98
    9d88:	mov	r0, r1
    9d8c:	bl	5a60 <MyGame_Example_Monster_pos_start>
    9d90:	vldr	s0, [pc, #1016]	; a190 <test_clone_slice+0x4f8>
    9d94:	vstr	s0, [r0]
    9d98:	ldr	r0, [fp, #-12]
    9d9c:	bl	6538 <MyGame_Example_Monster_end_as_root>
    9da0:	ldr	r1, [fp, #-12]
    9da4:	str	r0, [fp, #-108]	; 0xffffff94
    9da8:	mov	r0, r1
    9dac:	sub	r1, fp, #60	; 0x3c
    9db0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    9db4:	str	r0, [fp, #-52]	; 0xffffffcc
    9db8:	ldr	r1, [fp, #-52]	; 0xffffffcc
    9dbc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    9dc0:	movw	r0, #0
    9dc4:	movt	r0, #0
    9dc8:	ldr	r3, [r0]
    9dcc:	movw	r0, #0
    9dd0:	movt	r0, #0
    9dd4:	bl	b0c <hexdump>
    9dd8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    9ddc:	bl	280 <MyGame_Example_Monster_as_root>
    9de0:	str	r0, [fp, #-16]
    9de4:	ldr	r0, [fp, #-12]
    9de8:	bl	0 <flatcc_builder_reset>
    9dec:	ldr	r1, [fp, #-12]
    9df0:	str	r0, [fp, #-112]	; 0xffffff90
    9df4:	mov	r0, r1
    9df8:	bl	598c <MyGame_Example_Monster_start_as_root>
    9dfc:	ldr	r1, [fp, #-16]
    9e00:	str	r0, [fp, #-116]	; 0xffffff8c
    9e04:	mov	r0, r1
    9e08:	bl	3a0c <MyGame_Example_Monster_name>
    9e0c:	str	r0, [fp, #-32]	; 0xffffffe0
    9e10:	ldr	r0, [fp, #-32]	; 0xffffffe0
    9e14:	movw	r1, #0
    9e18:	cmp	r0, r1
    9e1c:	beq	9e24 <test_clone_slice+0x18c>
    9e20:	b	9e44 <test_clone_slice+0x1ac>
    9e24:	movw	r0, #0
    9e28:	movt	r0, #0
    9e2c:	movw	r1, #0
    9e30:	movt	r1, #0
    9e34:	movw	r2, #1604	; 0x644
    9e38:	movw	r3, #0
    9e3c:	movt	r3, #0
    9e40:	bl	0 <__assert_fail>
    9e44:	ldr	r0, [fp, #-16]
    9e48:	bl	47bc <MyGame_Example_Monster_testarrayofbools>
    9e4c:	str	r0, [fp, #-28]	; 0xffffffe4
    9e50:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9e54:	movw	lr, #0
    9e58:	cmp	r0, lr
    9e5c:	beq	9e64 <test_clone_slice+0x1cc>
    9e60:	b	9e84 <test_clone_slice+0x1ec>
    9e64:	movw	r0, #0
    9e68:	movt	r0, #0
    9e6c:	movw	r1, #0
    9e70:	movt	r1, #0
    9e74:	movw	r2, #1606	; 0x646
    9e78:	movw	r3, #0
    9e7c:	movt	r3, #0
    9e80:	bl	0 <__assert_fail>
    9e84:	ldr	r0, [fp, #-16]
    9e88:	bl	4104 <MyGame_Example_Monster_test4>
    9e8c:	str	r0, [fp, #-44]	; 0xffffffd4
    9e90:	ldr	r0, [fp, #-44]	; 0xffffffd4
    9e94:	movw	lr, #0
    9e98:	cmp	r0, lr
    9e9c:	beq	9ea4 <test_clone_slice+0x20c>
    9ea0:	b	9ec4 <test_clone_slice+0x22c>
    9ea4:	movw	r0, #0
    9ea8:	movt	r0, #0
    9eac:	movw	r1, #0
    9eb0:	movt	r1, #0
    9eb4:	movw	r2, #1608	; 0x648
    9eb8:	movw	r3, #0
    9ebc:	movt	r3, #0
    9ec0:	bl	0 <__assert_fail>
    9ec4:	ldr	r0, [fp, #-12]
    9ec8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    9ecc:	bl	a508 <MyGame_Example_Monster_name_clone>
    9ed0:	ldr	r1, [fp, #-12]
    9ed4:	str	r0, [fp, #-120]	; 0xffffff88
    9ed8:	mov	r0, r1
    9edc:	bl	84a8 <MyGame_Example_Monster_testarrayofstring_start>
    9ee0:	ldr	r1, [fp, #-12]
    9ee4:	ldr	lr, [fp, #-32]	; 0xffffffe0
    9ee8:	str	r0, [fp, #-124]	; 0xffffff84
    9eec:	mov	r0, r1
    9ef0:	mov	r1, lr
    9ef4:	bl	a554 <MyGame_Example_Monster_testarrayofstring_push_clone>
    9ef8:	ldr	r1, [fp, #-12]
    9efc:	ldr	lr, [fp, #-32]	; 0xffffffe0
    9f00:	mov	r2, #4
    9f04:	mov	r3, #20
    9f08:	str	r0, [fp, #-128]	; 0xffffff80
    9f0c:	mov	r0, r1
    9f10:	mov	r1, lr
    9f14:	str	r3, [fp, #-132]	; 0xffffff7c
    9f18:	bl	a5a0 <MyGame_Example_Monster_testarrayofstring_push_slice>
    9f1c:	ldr	r1, [fp, #-12]
    9f20:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9f24:	mov	r3, #0
    9f28:	mov	lr, #3
    9f2c:	str	r0, [sp, #136]	; 0x88
    9f30:	mov	r0, r1
    9f34:	mov	r1, r2
    9f38:	mov	r2, r3
    9f3c:	mov	r3, lr
    9f40:	bl	a5a0 <MyGame_Example_Monster_testarrayofstring_push_slice>
    9f44:	ldr	r1, [fp, #-12]
    9f48:	str	r0, [sp, #132]	; 0x84
    9f4c:	mov	r0, r1
    9f50:	bl	84c8 <MyGame_Example_Monster_testarrayofstring_end>
    9f54:	ldr	r1, [fp, #-12]
    9f58:	str	r0, [sp, #128]	; 0x80
    9f5c:	mov	r0, r1
    9f60:	bl	184c <MyGame_Example_Monster_start>
    9f64:	ldr	r1, [fp, #-12]
    9f68:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9f6c:	mov	r3, #2
    9f70:	str	r0, [sp, #124]	; 0x7c
    9f74:	mov	r0, r1
    9f78:	mov	r1, r2
    9f7c:	mov	r2, r3
    9f80:	ldr	lr, [fp, #-132]	; 0xffffff7c
    9f84:	str	r3, [sp, #120]	; 0x78
    9f88:	mov	r3, lr
    9f8c:	bl	a604 <MyGame_Example_Monster_name_slice>
    9f90:	ldr	r1, [fp, #-12]
    9f94:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9f98:	str	r0, [sp, #116]	; 0x74
    9f9c:	mov	r0, r1
    9fa0:	mov	r1, r2
    9fa4:	bl	a668 <MyGame_Example_Monster_testarrayofbools_clone>
    9fa8:	ldr	r1, [fp, #-12]
    9fac:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9fb0:	mov	r3, #1
    9fb4:	str	r0, [sp, #112]	; 0x70
    9fb8:	mov	r0, r1
    9fbc:	mov	r1, r2
    9fc0:	mov	r2, r3
    9fc4:	ldr	r3, [sp, #120]	; 0x78
    9fc8:	bl	a6b4 <MyGame_Example_Monster_test4_slice>
    9fcc:	ldr	r1, [fp, #-12]
    9fd0:	str	r0, [sp, #108]	; 0x6c
    9fd4:	mov	r0, r1
    9fd8:	bl	18bc <MyGame_Example_Monster_end>
    9fdc:	str	r0, [fp, #-36]	; 0xffffffdc
    9fe0:	ldr	r0, [fp, #-12]
    9fe4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    9fe8:	sub	r2, fp, #80	; 0x50
    9fec:	str	r0, [sp, #104]	; 0x68
    9ff0:	mov	r0, r2
    9ff4:	bl	6220 <MyGame_Example_Any_as_Monster>
    9ff8:	ldr	r1, [fp, #-80]	; 0xffffffb0
    9ffc:	ldr	r2, [fp, #-76]	; 0xffffffb4
    a000:	ldr	r0, [sp, #104]	; 0x68
    a004:	bl	615c <MyGame_Example_Monster_test_add>
    a008:	ldr	r1, [fp, #-12]
    a00c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a010:	str	r0, [sp, #100]	; 0x64
    a014:	mov	r0, r1
    a018:	mov	r1, r2
    a01c:	movw	r2, #3
    a020:	mvn	r3, #0
    a024:	bl	a718 <MyGame_Example_Monster_testarrayofbools_slice>
    a028:	ldr	r1, [fp, #-12]
    a02c:	ldr	r2, [fp, #-16]
    a030:	str	r0, [sp, #96]	; 0x60
    a034:	mov	r0, r2
    a038:	str	r1, [sp, #92]	; 0x5c
    a03c:	bl	560 <MyGame_Example_Monster_pos>
    a040:	ldr	r1, [sp, #92]	; 0x5c
    a044:	str	r0, [sp, #88]	; 0x58
    a048:	mov	r0, r1
    a04c:	ldr	r1, [sp, #88]	; 0x58
    a050:	bl	a77c <MyGame_Example_Monster_pos_clone>
    a054:	ldr	r1, [fp, #-12]
    a058:	ldr	r2, [fp, #-44]	; 0xffffffd4
    a05c:	str	r0, [sp, #84]	; 0x54
    a060:	mov	r0, r1
    a064:	mov	r1, r2
    a068:	bl	a7e0 <MyGame_Example_Monster_test4_clone>
    a06c:	ldr	r1, [fp, #-12]
    a070:	str	r0, [sp, #80]	; 0x50
    a074:	mov	r0, r1
    a078:	bl	6538 <MyGame_Example_Monster_end_as_root>
    a07c:	ldr	r1, [fp, #-12]
    a080:	str	r0, [sp, #76]	; 0x4c
    a084:	mov	r0, r1
    a088:	sub	r1, fp, #60	; 0x3c
    a08c:	bl	0 <flatcc_builder_get_direct_buffer>
    a090:	str	r0, [fp, #-56]	; 0xffffffc8
    a094:	ldr	r1, [fp, #-56]	; 0xffffffc8
    a098:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a09c:	movw	r0, #0
    a0a0:	movt	r0, #0
    a0a4:	ldr	r3, [r0]
    a0a8:	movw	r0, #0
    a0ac:	movt	r0, #0
    a0b0:	bl	b0c <hexdump>
    a0b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    a0b8:	bl	280 <MyGame_Example_Monster_as_root>
    a0bc:	str	r0, [fp, #-20]	; 0xffffffec
    a0c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    a0c4:	bl	3a0c <MyGame_Example_Monster_name>
    a0c8:	movw	r1, #0
    a0cc:	movt	r1, #0
    a0d0:	bl	0 <strcmp>
    a0d4:	cmp	r0, #0
    a0d8:	beq	a0f0 <test_clone_slice+0x458>
    a0dc:	movw	r0, #0
    a0e0:	movt	r0, #0
    a0e4:	bl	0 <printf>
    a0e8:	str	r0, [sp, #72]	; 0x48
    a0ec:	b	a498 <test_clone_slice+0x800>
    a0f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    a0f4:	bl	4528 <MyGame_Example_Monster_testarrayofstring>
    a0f8:	str	r0, [fp, #-24]	; 0xffffffe8
    a0fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a100:	movw	r1, #0
    a104:	bl	4674 <flatbuffers_string_vec_at>
    a108:	movw	r1, #0
    a10c:	movt	r1, #0
    a110:	bl	0 <strcmp>
    a114:	cmp	r0, #0
    a118:	beq	a130 <test_clone_slice+0x498>
    a11c:	movw	r0, #0
    a120:	movt	r0, #0
    a124:	bl	0 <printf>
    a128:	str	r0, [sp, #68]	; 0x44
    a12c:	b	a498 <test_clone_slice+0x800>
    a130:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a134:	movw	r1, #1
    a138:	bl	4674 <flatbuffers_string_vec_at>
    a13c:	bl	3b14 <flatbuffers_string_len>
    a140:	cmp	r0, #6
    a144:	beq	a15c <test_clone_slice+0x4c4>
    a148:	movw	r0, #0
    a14c:	movt	r0, #0
    a150:	bl	0 <printf>
    a154:	str	r0, [sp, #64]	; 0x40
    a158:	b	a498 <test_clone_slice+0x800>
    a15c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a160:	movw	r1, #1
    a164:	bl	4674 <flatbuffers_string_vec_at>
    a168:	movw	r1, #0
    a16c:	movt	r1, #0
    a170:	bl	0 <strcmp>
    a174:	cmp	r0, #0
    a178:	beq	a194 <test_clone_slice+0x4fc>
    a17c:	movw	r0, #0
    a180:	movt	r0, #0
    a184:	bl	0 <printf>
    a188:	str	r0, [sp, #60]	; 0x3c
    a18c:	b	a498 <test_clone_slice+0x800>
    a190:	.word	0xc2293333
    a194:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a198:	movw	r1, #2
    a19c:	bl	4674 <flatbuffers_string_vec_at>
    a1a0:	bl	3b14 <flatbuffers_string_len>
    a1a4:	cmp	r0, #3
    a1a8:	beq	a1c0 <test_clone_slice+0x528>
    a1ac:	movw	r0, #0
    a1b0:	movt	r0, #0
    a1b4:	bl	0 <printf>
    a1b8:	str	r0, [sp, #56]	; 0x38
    a1bc:	b	a498 <test_clone_slice+0x800>
    a1c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a1c4:	movw	r1, #2
    a1c8:	bl	4674 <flatbuffers_string_vec_at>
    a1cc:	movw	r1, #0
    a1d0:	movt	r1, #0
    a1d4:	bl	0 <strcmp>
    a1d8:	cmp	r0, #0
    a1dc:	beq	a1f4 <test_clone_slice+0x55c>
    a1e0:	movw	r0, #0
    a1e4:	movt	r0, #0
    a1e8:	bl	0 <printf>
    a1ec:	str	r0, [sp, #52]	; 0x34
    a1f0:	b	a498 <test_clone_slice+0x800>
    a1f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    a1f8:	bl	4a2c <MyGame_Example_Monster_test>
    a1fc:	str	r0, [fp, #-16]
    a200:	ldr	r0, [fp, #-16]
    a204:	movw	lr, #0
    a208:	cmp	r0, lr
    a20c:	beq	a214 <test_clone_slice+0x57c>
    a210:	b	a234 <test_clone_slice+0x59c>
    a214:	movw	r0, #0
    a218:	movt	r0, #0
    a21c:	movw	r1, #0
    a220:	movt	r1, #0
    a224:	movw	r2, #1664	; 0x680
    a228:	movw	r3, #0
    a22c:	movt	r3, #0
    a230:	bl	0 <__assert_fail>
    a234:	ldr	r0, [fp, #-16]
    a238:	bl	3a0c <MyGame_Example_Monster_name>
    a23c:	movw	r1, #0
    a240:	movt	r1, #0
    a244:	bl	0 <strcmp>
    a248:	cmp	r0, #0
    a24c:	beq	a264 <test_clone_slice+0x5cc>
    a250:	movw	r0, #0
    a254:	movt	r0, #0
    a258:	bl	0 <printf>
    a25c:	str	r0, [sp, #48]	; 0x30
    a260:	b	a498 <test_clone_slice+0x800>
    a264:	ldr	r0, [fp, #-16]
    a268:	bl	47bc <MyGame_Example_Monster_testarrayofbools>
    a26c:	str	r0, [fp, #-28]	; 0xffffffe4
    a270:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a274:	bl	48b8 <flatbuffers_bool_vec_len>
    a278:	cmp	r0, #7
    a27c:	beq	a294 <test_clone_slice+0x5fc>
    a280:	movw	r0, #0
    a284:	movt	r0, #0
    a288:	bl	0 <printf>
    a28c:	str	r0, [sp, #44]	; 0x2c
    a290:	b	a498 <test_clone_slice+0x800>
    a294:	sub	r1, fp, #71	; 0x47
    a298:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a29c:	mov	r2, #7
    a2a0:	bl	0 <memcmp>
    a2a4:	cmp	r0, #0
    a2a8:	beq	a2c0 <test_clone_slice+0x628>
    a2ac:	movw	r0, #0
    a2b0:	movt	r0, #0
    a2b4:	bl	0 <printf>
    a2b8:	str	r0, [sp, #40]	; 0x28
    a2bc:	b	a498 <test_clone_slice+0x800>
    a2c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    a2c4:	bl	47bc <MyGame_Example_Monster_testarrayofbools>
    a2c8:	str	r0, [fp, #-28]	; 0xffffffe4
    a2cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a2d0:	bl	48b8 <flatbuffers_bool_vec_len>
    a2d4:	cmp	r0, #4
    a2d8:	beq	a2f0 <test_clone_slice+0x658>
    a2dc:	movw	r0, #0
    a2e0:	movt	r0, #0
    a2e4:	bl	0 <printf>
    a2e8:	str	r0, [sp, #36]	; 0x24
    a2ec:	b	a498 <test_clone_slice+0x800>
    a2f0:	sub	r0, fp, #71	; 0x47
    a2f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a2f8:	add	r0, r0, #3
    a2fc:	ldr	r0, [r0]
    a300:	ldr	r1, [r1]
    a304:	sub	r2, r1, r0
    a308:	cmp	r1, r0
    a30c:	movwne	r2, #1
    a310:	cmp	r2, #0
    a314:	beq	a32c <test_clone_slice+0x694>
    a318:	movw	r0, #0
    a31c:	movt	r0, #0
    a320:	bl	0 <printf>
    a324:	str	r0, [sp, #32]
    a328:	b	a498 <test_clone_slice+0x800>
    a32c:	ldr	r0, [fp, #-20]	; 0xffffffec
    a330:	bl	560 <MyGame_Example_Monster_pos>
    a334:	vldr	s0, [pc, #368]	; a4ac <test_clone_slice+0x814>
    a338:	vldr	s2, [r0]
    a33c:	vcmp.f32	s2, s0
    a340:	vmrs	APSR_nzcv, fpscr
    a344:	beq	a35c <test_clone_slice+0x6c4>
    a348:	movw	r0, #0
    a34c:	movt	r0, #0
    a350:	bl	0 <printf>
    a354:	str	r0, [sp, #28]
    a358:	b	a498 <test_clone_slice+0x800>
    a35c:	ldr	r0, [fp, #-20]	; 0xffffffec
    a360:	bl	4104 <MyGame_Example_Monster_test4>
    a364:	str	r0, [fp, #-44]	; 0xffffffd4
    a368:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a36c:	bl	4200 <MyGame_Example_Test_vec_len>
    a370:	cmp	r0, #2
    a374:	beq	a38c <test_clone_slice+0x6f4>
    a378:	movw	r0, #0
    a37c:	movt	r0, #0
    a380:	bl	0 <printf>
    a384:	str	r0, [sp, #24]
    a388:	b	a498 <test_clone_slice+0x800>
    a38c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a390:	movw	r1, #0
    a394:	bl	4250 <MyGame_Example_Test_vec_at>
    a398:	str	r0, [fp, #-48]	; 0xffffffd0
    a39c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    a3a0:	bl	42b4 <MyGame_Example_Test_a>
    a3a4:	sxth	r0, r0
    a3a8:	cmp	r0, #22
    a3ac:	beq	a3c4 <test_clone_slice+0x72c>
    a3b0:	movw	r0, #0
    a3b4:	movt	r0, #0
    a3b8:	bl	0 <printf>
    a3bc:	str	r0, [sp, #20]
    a3c0:	b	a498 <test_clone_slice+0x800>
    a3c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a3c8:	movw	r1, #0
    a3cc:	bl	4250 <MyGame_Example_Test_vec_at>
    a3d0:	ldrsh	r0, [r0]
    a3d4:	cmp	r0, #22
    a3d8:	beq	a3f0 <test_clone_slice+0x758>
    a3dc:	movw	r0, #0
    a3e0:	movt	r0, #0
    a3e4:	bl	0 <printf>
    a3e8:	str	r0, [sp, #16]
    a3ec:	b	a498 <test_clone_slice+0x800>
    a3f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a3f4:	movw	r1, #1
    a3f8:	bl	4250 <MyGame_Example_Test_vec_at>
    a3fc:	str	r0, [fp, #-48]	; 0xffffffd0
    a400:	ldr	r0, [fp, #-48]	; 0xffffffd0
    a404:	bl	42b4 <MyGame_Example_Test_a>
    a408:	sxth	r0, r0
    a40c:	cmp	r0, #44	; 0x2c
    a410:	beq	a428 <test_clone_slice+0x790>
    a414:	movw	r0, #0
    a418:	movt	r0, #0
    a41c:	bl	0 <printf>
    a420:	str	r0, [sp, #12]
    a424:	b	a498 <test_clone_slice+0x800>
    a428:	ldr	r0, [fp, #-16]
    a42c:	bl	4104 <MyGame_Example_Monster_test4>
    a430:	str	r0, [fp, #-44]	; 0xffffffd4
    a434:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a438:	bl	4200 <MyGame_Example_Test_vec_len>
    a43c:	cmp	r0, #1
    a440:	beq	a458 <test_clone_slice+0x7c0>
    a444:	movw	r0, #0
    a448:	movt	r0, #0
    a44c:	bl	0 <printf>
    a450:	str	r0, [sp, #8]
    a454:	b	a498 <test_clone_slice+0x800>
    a458:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a45c:	movw	r1, #0
    a460:	bl	4250 <MyGame_Example_Test_vec_at>
    a464:	str	r0, [fp, #-48]	; 0xffffffd0
    a468:	ldr	r0, [fp, #-48]	; 0xffffffd0
    a46c:	bl	42b4 <MyGame_Example_Test_a>
    a470:	sxth	r0, r0
    a474:	cmp	r0, #44	; 0x2c
    a478:	beq	a490 <test_clone_slice+0x7f8>
    a47c:	movw	r0, #0
    a480:	movt	r0, #0
    a484:	bl	0 <printf>
    a488:	str	r0, [sp, #4]
    a48c:	b	a498 <test_clone_slice+0x800>
    a490:	movw	r0, #0
    a494:	str	r0, [fp, #-64]	; 0xffffffc0
    a498:	ldr	r0, [fp, #-52]	; 0xffffffcc
    a49c:	bl	0 <flatcc_builder_aligned_free>
    a4a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    a4a4:	sub	sp, fp, #8
    a4a8:	pop	{r4, r5, fp, pc}
    a4ac:	.word	0xc2293333

0000a4b0 <MyGame_Example_Monster_testarrayofbools_create>:
    a4b0:	push	{fp, lr}
    a4b4:	mov	fp, sp
    a4b8:	sub	sp, sp, #24
    a4bc:	str	r0, [fp, #-4]
    a4c0:	str	r1, [fp, #-8]
    a4c4:	str	r2, [sp, #12]
    a4c8:	ldr	r0, [fp, #-4]
    a4cc:	ldr	r1, [fp, #-4]
    a4d0:	ldr	r2, [fp, #-8]
    a4d4:	ldr	r3, [sp, #12]
    a4d8:	str	r0, [sp, #8]
    a4dc:	mov	r0, r1
    a4e0:	mov	r1, r2
    a4e4:	mov	r2, r3
    a4e8:	bl	12dfc <flatbuffers_bool_vec_create>
    a4ec:	ldr	r1, [sp, #8]
    a4f0:	str	r0, [sp, #4]
    a4f4:	mov	r0, r1
    a4f8:	ldr	r1, [sp, #4]
    a4fc:	bl	124bc <MyGame_Example_Monster_testarrayofbools_add>
    a500:	mov	sp, fp
    a504:	pop	{fp, pc}

0000a508 <MyGame_Example_Monster_name_clone>:
    a508:	push	{fp, lr}
    a50c:	mov	fp, sp
    a510:	sub	sp, sp, #16
    a514:	str	r0, [fp, #-4]
    a518:	str	r1, [sp, #8]
    a51c:	ldr	r0, [fp, #-4]
    a520:	ldr	r1, [fp, #-4]
    a524:	ldr	r2, [sp, #8]
    a528:	str	r0, [sp, #4]
    a52c:	mov	r0, r1
    a530:	mov	r1, r2
    a534:	bl	12e44 <flatbuffers_string_clone>
    a538:	ldr	r1, [sp, #4]
    a53c:	str	r0, [sp]
    a540:	mov	r0, r1
    a544:	ldr	r1, [sp]
    a548:	bl	5e08 <MyGame_Example_Monster_name_add>
    a54c:	mov	sp, fp
    a550:	pop	{fp, pc}

0000a554 <MyGame_Example_Monster_testarrayofstring_push_clone>:
    a554:	push	{fp, lr}
    a558:	mov	fp, sp
    a55c:	sub	sp, sp, #16
    a560:	str	r0, [fp, #-4]
    a564:	str	r1, [sp, #8]
    a568:	ldr	r0, [fp, #-4]
    a56c:	ldr	r1, [fp, #-4]
    a570:	ldr	r2, [sp, #8]
    a574:	str	r0, [sp, #4]
    a578:	mov	r0, r1
    a57c:	mov	r1, r2
    a580:	bl	12e44 <flatbuffers_string_clone>
    a584:	ldr	r1, [sp, #4]
    a588:	str	r0, [sp]
    a58c:	mov	r0, r1
    a590:	ldr	r1, [sp]
    a594:	bl	12e94 <flatbuffers_string_vec_push>
    a598:	mov	sp, fp
    a59c:	pop	{fp, pc}

0000a5a0 <MyGame_Example_Monster_testarrayofstring_push_slice>:
    a5a0:	push	{fp, lr}
    a5a4:	mov	fp, sp
    a5a8:	sub	sp, sp, #24
    a5ac:	str	r0, [fp, #-4]
    a5b0:	str	r1, [fp, #-8]
    a5b4:	str	r2, [sp, #12]
    a5b8:	str	r3, [sp, #8]
    a5bc:	ldr	r0, [fp, #-4]
    a5c0:	ldr	r1, [fp, #-4]
    a5c4:	ldr	r2, [fp, #-8]
    a5c8:	ldr	r3, [sp, #12]
    a5cc:	ldr	ip, [sp, #8]
    a5d0:	str	r0, [sp, #4]
    a5d4:	mov	r0, r1
    a5d8:	mov	r1, r2
    a5dc:	mov	r2, r3
    a5e0:	mov	r3, ip
    a5e4:	bl	12ee0 <flatbuffers_string_slice>
    a5e8:	ldr	r1, [sp, #4]
    a5ec:	str	r0, [sp]
    a5f0:	mov	r0, r1
    a5f4:	ldr	r1, [sp]
    a5f8:	bl	12e94 <flatbuffers_string_vec_push>
    a5fc:	mov	sp, fp
    a600:	pop	{fp, pc}

0000a604 <MyGame_Example_Monster_name_slice>:
    a604:	push	{fp, lr}
    a608:	mov	fp, sp
    a60c:	sub	sp, sp, #24
    a610:	str	r0, [fp, #-4]
    a614:	str	r1, [fp, #-8]
    a618:	str	r2, [sp, #12]
    a61c:	str	r3, [sp, #8]
    a620:	ldr	r0, [fp, #-4]
    a624:	ldr	r1, [fp, #-4]
    a628:	ldr	r2, [fp, #-8]
    a62c:	ldr	r3, [sp, #12]
    a630:	ldr	ip, [sp, #8]
    a634:	str	r0, [sp, #4]
    a638:	mov	r0, r1
    a63c:	mov	r1, r2
    a640:	mov	r2, r3
    a644:	mov	r3, ip
    a648:	bl	12ee0 <flatbuffers_string_slice>
    a64c:	ldr	r1, [sp, #4]
    a650:	str	r0, [sp]
    a654:	mov	r0, r1
    a658:	ldr	r1, [sp]
    a65c:	bl	5e08 <MyGame_Example_Monster_name_add>
    a660:	mov	sp, fp
    a664:	pop	{fp, pc}

0000a668 <MyGame_Example_Monster_testarrayofbools_clone>:
    a668:	push	{fp, lr}
    a66c:	mov	fp, sp
    a670:	sub	sp, sp, #16
    a674:	str	r0, [fp, #-4]
    a678:	str	r1, [sp, #8]
    a67c:	ldr	r0, [fp, #-4]
    a680:	ldr	r1, [fp, #-4]
    a684:	ldr	r2, [sp, #8]
    a688:	str	r0, [sp, #4]
    a68c:	mov	r0, r1
    a690:	mov	r1, r2
    a694:	bl	12f68 <flatbuffers_bool_vec_clone>
    a698:	ldr	r1, [sp, #4]
    a69c:	str	r0, [sp]
    a6a0:	mov	r0, r1
    a6a4:	ldr	r1, [sp]
    a6a8:	bl	124bc <MyGame_Example_Monster_testarrayofbools_add>
    a6ac:	mov	sp, fp
    a6b0:	pop	{fp, pc}

0000a6b4 <MyGame_Example_Monster_test4_slice>:
    a6b4:	push	{fp, lr}
    a6b8:	mov	fp, sp
    a6bc:	sub	sp, sp, #24
    a6c0:	str	r0, [fp, #-4]
    a6c4:	str	r1, [fp, #-8]
    a6c8:	str	r2, [sp, #12]
    a6cc:	str	r3, [sp, #8]
    a6d0:	ldr	r0, [fp, #-4]
    a6d4:	ldr	r1, [fp, #-4]
    a6d8:	ldr	r2, [fp, #-8]
    a6dc:	ldr	r3, [sp, #12]
    a6e0:	ldr	ip, [sp, #8]
    a6e4:	str	r0, [sp, #4]
    a6e8:	mov	r0, r1
    a6ec:	mov	r1, r2
    a6f0:	mov	r2, r3
    a6f4:	mov	r3, ip
    a6f8:	bl	12fd0 <MyGame_Example_Test_vec_slice>
    a6fc:	ldr	r1, [sp, #4]
    a700:	str	r0, [sp]
    a704:	mov	r0, r1
    a708:	ldr	r1, [sp]
    a70c:	bl	122dc <MyGame_Example_Monster_test4_add>
    a710:	mov	sp, fp
    a714:	pop	{fp, pc}

0000a718 <MyGame_Example_Monster_testarrayofbools_slice>:
    a718:	push	{fp, lr}
    a71c:	mov	fp, sp
    a720:	sub	sp, sp, #24
    a724:	str	r0, [fp, #-4]
    a728:	str	r1, [fp, #-8]
    a72c:	str	r2, [sp, #12]
    a730:	str	r3, [sp, #8]
    a734:	ldr	r0, [fp, #-4]
    a738:	ldr	r1, [fp, #-4]
    a73c:	ldr	r2, [fp, #-8]
    a740:	ldr	r3, [sp, #12]
    a744:	ldr	ip, [sp, #8]
    a748:	str	r0, [sp, #4]
    a74c:	mov	r0, r1
    a750:	mov	r1, r2
    a754:	mov	r2, r3
    a758:	mov	r3, ip
    a75c:	bl	130bc <flatbuffers_bool_vec_slice>
    a760:	ldr	r1, [sp, #4]
    a764:	str	r0, [sp]
    a768:	mov	r0, r1
    a76c:	ldr	r1, [sp]
    a770:	bl	124bc <MyGame_Example_Monster_testarrayofbools_add>
    a774:	mov	sp, fp
    a778:	pop	{fp, pc}

0000a77c <MyGame_Example_Monster_pos_clone>:
    a77c:	push	{fp, lr}
    a780:	mov	fp, sp
    a784:	sub	sp, sp, #16
    a788:	str	r0, [fp, #-4]
    a78c:	str	r1, [sp, #8]
    a790:	ldr	r0, [fp, #-4]
    a794:	ldr	r1, [sp, #8]
    a798:	movw	r2, #0
    a79c:	str	r1, [sp, #4]
    a7a0:	mov	r1, r2
    a7a4:	ldr	r2, [sp, #4]
    a7a8:	movw	r3, #32
    a7ac:	movw	ip, #16
    a7b0:	uxth	ip, ip
    a7b4:	str	ip, [sp]
    a7b8:	bl	0 <flatcc_builder_table_add_copy>
    a7bc:	movw	r1, #0
    a7c0:	cmp	r1, r0
    a7c4:	movw	r0, #0
    a7c8:	moveq	r0, #1
    a7cc:	tst	r0, #1
    a7d0:	mvn	r0, #0
    a7d4:	moveq	r0, #0
    a7d8:	mov	sp, fp
    a7dc:	pop	{fp, pc}

0000a7e0 <MyGame_Example_Monster_test4_clone>:
    a7e0:	push	{fp, lr}
    a7e4:	mov	fp, sp
    a7e8:	sub	sp, sp, #16
    a7ec:	str	r0, [fp, #-4]
    a7f0:	str	r1, [sp, #8]
    a7f4:	ldr	r0, [fp, #-4]
    a7f8:	ldr	r1, [fp, #-4]
    a7fc:	ldr	r2, [sp, #8]
    a800:	str	r0, [sp, #4]
    a804:	mov	r0, r1
    a808:	mov	r1, r2
    a80c:	bl	13198 <MyGame_Example_Test_vec_clone>
    a810:	ldr	r1, [sp, #4]
    a814:	str	r0, [sp]
    a818:	mov	r0, r1
    a81c:	ldr	r1, [sp]
    a820:	bl	122dc <MyGame_Example_Monster_test4_add>
    a824:	mov	sp, fp
    a828:	pop	{fp, pc}

0000a82c <test_create_add_field>:
    a82c:	push	{fp, lr}
    a830:	mov	fp, sp
    a834:	sub	sp, sp, #72	; 0x48
    a838:	str	r0, [fp, #-4]
    a83c:	mvn	r0, #0
    a840:	str	r0, [fp, #-16]
    a844:	ldr	r0, [fp, #-4]
    a848:	bl	0 <flatcc_builder_reset>
    a84c:	ldr	lr, [fp, #-4]
    a850:	str	r0, [fp, #-28]	; 0xffffffe4
    a854:	mov	r0, lr
    a858:	bl	598c <MyGame_Example_Monster_start_as_root>
    a85c:	ldr	lr, [fp, #-4]
    a860:	str	r0, [fp, #-32]	; 0xffffffe0
    a864:	mov	r0, lr
    a868:	movw	r1, #0
    a86c:	movt	r1, #0
    a870:	bl	1870 <MyGame_Example_Monster_name_create_str>
    a874:	ldr	r1, [fp, #-4]
    a878:	ldr	lr, [fp, #-4]
    a87c:	str	r0, [sp, #36]	; 0x24
    a880:	mov	r0, lr
    a884:	movw	lr, #0
    a888:	movt	lr, #0
    a88c:	str	r1, [sp, #32]
    a890:	mov	r1, lr
    a894:	bl	604c <flatbuffers_string_create_str>
    a898:	mov	r1, sp
    a89c:	mov	lr, #2
    a8a0:	str	lr, [r1]
    a8a4:	mvn	r2, #99	; 0x63
    a8a8:	mvn	r3, #0
    a8ac:	ldr	r1, [sp, #32]
    a8b0:	str	r0, [sp, #28]
    a8b4:	mov	r0, r1
    a8b8:	ldr	r1, [sp, #28]
    a8bc:	bl	a98c <MyGame_Example_Monster_testempty_create>
    a8c0:	ldr	r1, [fp, #-4]
    a8c4:	str	r0, [sp, #24]
    a8c8:	mov	r0, r1
    a8cc:	movw	r1, #0
    a8d0:	bl	aa04 <MyGame_Example_Monster_enemy_add>
    a8d4:	ldr	r1, [fp, #-4]
    a8d8:	str	r0, [sp, #20]
    a8dc:	mov	r0, r1
    a8e0:	bl	6538 <MyGame_Example_Monster_end_as_root>
    a8e4:	ldr	r1, [fp, #-4]
    a8e8:	str	r0, [sp, #16]
    a8ec:	mov	r0, r1
    a8f0:	sub	r1, fp, #12
    a8f4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    a8f8:	str	r0, [fp, #-8]
    a8fc:	ldr	r0, [fp, #-8]
    a900:	bl	280 <MyGame_Example_Monster_as_root>
    a904:	str	r0, [fp, #-20]	; 0xffffffec
    a908:	ldr	r0, [fp, #-20]	; 0xffffffec
    a90c:	bl	aa70 <MyGame_Example_Monster_enemy_is_present>
    a910:	cmp	r0, #0
    a914:	beq	a92c <test_create_add_field+0x100>
    a918:	movw	r0, #0
    a91c:	movt	r0, #0
    a920:	bl	0 <printf>
    a924:	str	r0, [sp, #12]
    a928:	b	a978 <test_create_add_field+0x14c>
    a92c:	ldr	r0, [fp, #-20]	; 0xffffffec
    a930:	bl	4e28 <MyGame_Example_Monster_testempty>
    a934:	str	r0, [fp, #-24]	; 0xffffffe8
    a938:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a93c:	bl	ab30 <MyGame_Example_Stat_val>
    a940:	mvn	lr, #99	; 0x63
    a944:	eor	r0, r0, lr
    a948:	mvn	r1, r1
    a94c:	orr	r0, r0, r1
    a950:	cmp	r0, #0
    a954:	beq	a970 <test_create_add_field+0x144>
    a958:	b	a95c <test_create_add_field+0x130>
    a95c:	movw	r0, #0
    a960:	movt	r0, #0
    a964:	bl	0 <printf>
    a968:	str	r0, [sp, #8]
    a96c:	b	a978 <test_create_add_field+0x14c>
    a970:	movw	r0, #0
    a974:	str	r0, [fp, #-16]
    a978:	ldr	r0, [fp, #-8]
    a97c:	bl	0 <flatcc_builder_aligned_free>
    a980:	ldr	r0, [fp, #-16]
    a984:	mov	sp, fp
    a988:	pop	{fp, pc}

0000a98c <MyGame_Example_Monster_testempty_create>:
    a98c:	push	{r4, sl, fp, lr}
    a990:	add	fp, sp, #8
    a994:	sub	sp, sp, #32
    a998:	ldr	ip, [fp, #8]
    a99c:	str	r0, [fp, #-12]
    a9a0:	str	r1, [fp, #-16]
    a9a4:	str	r3, [sp, #20]
    a9a8:	str	r2, [sp, #16]
    a9ac:	strh	ip, [sp, #14]
    a9b0:	ldr	r0, [fp, #-12]
    a9b4:	mov	r1, r0
    a9b8:	ldr	r2, [fp, #-16]
    a9bc:	ldr	r3, [sp, #16]
    a9c0:	ldr	ip, [sp, #20]
    a9c4:	ldrh	lr, [sp, #14]
    a9c8:	uxth	lr, lr
    a9cc:	mov	r4, sp
    a9d0:	str	lr, [r4]
    a9d4:	str	r1, [sp, #8]
    a9d8:	mov	r1, r2
    a9dc:	mov	r2, r3
    a9e0:	mov	r3, ip
    a9e4:	bl	13210 <MyGame_Example_Stat_create>
    a9e8:	ldr	r1, [sp, #8]
    a9ec:	str	r0, [sp, #4]
    a9f0:	mov	r0, r1
    a9f4:	ldr	r1, [sp, #4]
    a9f8:	bl	125fc <MyGame_Example_Monster_testempty_add>
    a9fc:	sub	sp, fp, #8
    aa00:	pop	{r4, sl, fp, pc}

0000aa04 <MyGame_Example_Monster_enemy_add>:
    aa04:	push	{fp, lr}
    aa08:	mov	fp, sp
    aa0c:	sub	sp, sp, #16
    aa10:	str	r0, [fp, #-4]
    aa14:	str	r1, [sp, #8]
    aa18:	ldr	r0, [sp, #8]
    aa1c:	cmp	r0, #0
    aa20:	beq	aa58 <MyGame_Example_Monster_enemy_add+0x54>
    aa24:	ldr	r0, [fp, #-4]
    aa28:	movw	r1, #12
    aa2c:	bl	0 <flatcc_builder_table_add_offset>
    aa30:	str	r0, [sp, #4]
    aa34:	movw	r1, #0
    aa38:	cmp	r0, r1
    aa3c:	beq	aa58 <MyGame_Example_Monster_enemy_add+0x54>
    aa40:	ldr	r0, [sp, #8]
    aa44:	ldr	r1, [sp, #4]
    aa48:	str	r0, [r1]
    aa4c:	movw	r0, #0
    aa50:	str	r0, [sp]
    aa54:	b	aa64 <MyGame_Example_Monster_enemy_add+0x60>
    aa58:	mvn	r0, #0
    aa5c:	str	r0, [sp]
    aa60:	b	aa64 <MyGame_Example_Monster_enemy_add+0x60>
    aa64:	ldr	r0, [sp]
    aa68:	mov	sp, fp
    aa6c:	pop	{fp, pc}

0000aa70 <MyGame_Example_Monster_enemy_is_present>:
    aa70:	push	{fp, lr}
    aa74:	mov	fp, sp
    aa78:	sub	sp, sp, #16
    aa7c:	str	r0, [fp, #-4]
    aa80:	movw	r0, #0
    aa84:	strh	r0, [fp, #-6]
    aa88:	ldr	r0, [fp, #-4]
    aa8c:	movw	r1, #0
    aa90:	cmp	r0, r1
    aa94:	beq	aaa0 <MyGame_Example_Monster_enemy_is_present+0x30>
    aa98:	b	aa9c <MyGame_Example_Monster_enemy_is_present+0x2c>
    aa9c:	b	aac0 <MyGame_Example_Monster_enemy_is_present+0x50>
    aaa0:	movw	r0, #0
    aaa4:	movt	r0, #0
    aaa8:	movw	r1, #0
    aaac:	movt	r1, #0
    aab0:	movw	r2, #716	; 0x2cc
    aab4:	movw	r3, #0
    aab8:	movt	r3, #0
    aabc:	bl	0 <__assert_fail>
    aac0:	mov	r0, #12
    aac4:	strh	r0, [sp, #8]
    aac8:	ldr	r0, [fp, #-4]
    aacc:	str	r0, [sp]
    aad0:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    aad4:	ldr	lr, [sp]
    aad8:	sub	r0, lr, r0
    aadc:	str	r0, [sp, #4]
    aae0:	ldr	r0, [sp, #4]
    aae4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    aae8:	ldrh	lr, [sp, #8]
    aaec:	add	lr, lr, #3
    aaf0:	lsl	lr, lr, #1
    aaf4:	cmp	r0, lr
    aaf8:	bcc	ab14 <MyGame_Example_Monster_enemy_is_present+0xa4>
    aafc:	ldr	r0, [sp, #4]
    ab00:	ldrh	r1, [sp, #8]
    ab04:	add	r0, r0, r1, lsl #1
    ab08:	add	r0, r0, #4
    ab0c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    ab10:	strh	r0, [fp, #-6]
    ab14:	ldrh	r0, [fp, #-6]
    ab18:	cmp	r0, #0
    ab1c:	movw	r0, #0
    ab20:	movne	r0, #1
    ab24:	and	r0, r0, #1
    ab28:	mov	sp, fp
    ab2c:	pop	{fp, pc}

0000ab30 <MyGame_Example_Stat_val>:
    ab30:	push	{fp, lr}
    ab34:	mov	fp, sp
    ab38:	sub	sp, sp, #32
    ab3c:	str	r0, [fp, #-4]
    ab40:	movw	r0, #0
    ab44:	strh	r0, [fp, #-6]
    ab48:	ldr	r0, [fp, #-4]
    ab4c:	movw	r1, #0
    ab50:	cmp	r0, r1
    ab54:	beq	ab60 <MyGame_Example_Stat_val+0x30>
    ab58:	b	ab5c <MyGame_Example_Stat_val+0x2c>
    ab5c:	b	ab80 <MyGame_Example_Stat_val+0x50>
    ab60:	movw	r0, #0
    ab64:	movt	r0, #0
    ab68:	movw	r1, #0
    ab6c:	movt	r1, #0
    ab70:	movw	r2, #608	; 0x260
    ab74:	movw	r3, #0
    ab78:	movt	r3, #0
    ab7c:	bl	0 <__assert_fail>
    ab80:	mov	r0, #1
    ab84:	strh	r0, [fp, #-8]
    ab88:	ldr	r0, [fp, #-4]
    ab8c:	str	r0, [sp, #16]
    ab90:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    ab94:	ldr	lr, [sp, #16]
    ab98:	sub	r0, lr, r0
    ab9c:	str	r0, [fp, #-12]
    aba0:	ldr	r0, [fp, #-12]
    aba4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    aba8:	ldrh	lr, [fp, #-8]
    abac:	add	lr, lr, #3
    abb0:	lsl	lr, lr, #1
    abb4:	cmp	r0, lr
    abb8:	bcc	abd4 <MyGame_Example_Stat_val+0xa4>
    abbc:	ldr	r0, [fp, #-12]
    abc0:	ldrh	r1, [fp, #-8]
    abc4:	add	r0, r0, r1, lsl #1
    abc8:	add	r0, r0, #4
    abcc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    abd0:	strh	r0, [fp, #-6]
    abd4:	ldrh	r0, [fp, #-6]
    abd8:	cmp	r0, #0
    abdc:	beq	abfc <MyGame_Example_Stat_val+0xcc>
    abe0:	ldr	r0, [fp, #-4]
    abe4:	ldrh	r1, [fp, #-6]
    abe8:	add	r0, r0, r1
    abec:	bl	10900 <flatbuffers_int64_read_from_pe>
    abf0:	str	r0, [sp, #12]
    abf4:	str	r1, [sp, #8]
    abf8:	b	ac10 <MyGame_Example_Stat_val+0xe0>
    abfc:	mov	r0, #0
    ac00:	mov	r1, r0
    ac04:	str	r1, [sp, #12]
    ac08:	str	r0, [sp, #8]
    ac0c:	b	ac10 <MyGame_Example_Stat_val+0xe0>
    ac10:	ldr	r0, [sp, #8]
    ac14:	ldr	r1, [sp, #12]
    ac18:	str	r0, [sp, #4]
    ac1c:	mov	r0, r1
    ac20:	ldr	r1, [sp, #4]
    ac24:	mov	sp, fp
    ac28:	pop	{fp, pc}

0000ac2c <test_union_vector>:
    ac2c:	push	{fp, lr}
    ac30:	mov	fp, sp
    ac34:	sub	sp, sp, #216	; 0xd8
    ac38:	str	r0, [fp, #-8]
    ac3c:	mvn	r0, #0
    ac40:	str	r0, [fp, #-28]	; 0xffffffe4
    ac44:	ldr	r0, [fp, #-8]
    ac48:	bl	0 <flatcc_builder_reset>
    ac4c:	ldr	lr, [fp, #-8]
    ac50:	str	r0, [sp, #96]	; 0x60
    ac54:	mov	r0, lr
    ac58:	bl	598c <MyGame_Example_Monster_start_as_root>
    ac5c:	ldr	lr, [fp, #-8]
    ac60:	movw	r1, #0
    ac64:	movt	r1, #0
    ac68:	str	r0, [sp, #92]	; 0x5c
    ac6c:	mov	r0, lr
    ac70:	bl	1870 <MyGame_Example_Monster_name_create_str>
    ac74:	ldr	r1, [fp, #-8]
    ac78:	mov	lr, sp
    ac7c:	mov	r2, #2
    ac80:	str	r2, [lr]
    ac84:	str	r0, [sp, #88]	; 0x58
    ac88:	mov	r0, r1
    ac8c:	mov	r1, r2
    ac90:	str	r2, [sp, #84]	; 0x54
    ac94:	ldr	r3, [sp, #84]	; 0x54
    ac98:	bl	afcc <MyGame_Example_TestSimpleTableWithEnum_create>
    ac9c:	str	r0, [fp, #-52]	; 0xffffffcc
    aca0:	ldr	r0, [fp, #-8]
    aca4:	bl	b074 <MyGame_Example_Any_vec_start>
    aca8:	ldr	r1, [fp, #-8]
    acac:	ldr	r2, [fp, #-52]	; 0xffffffcc
    acb0:	sub	r3, fp, #92	; 0x5c
    acb4:	str	r0, [sp, #80]	; 0x50
    acb8:	mov	r0, r3
    acbc:	str	r1, [sp, #76]	; 0x4c
    acc0:	mov	r1, r2
    acc4:	bl	b0c4 <MyGame_Example_Any_as_TestSimpleTableWithEnum>
    acc8:	ldr	r1, [fp, #-92]	; 0xffffffa4
    accc:	ldr	r2, [fp, #-88]	; 0xffffffa8
    acd0:	ldr	r0, [sp, #76]	; 0x4c
    acd4:	bl	b094 <MyGame_Example_Any_vec_push>
    acd8:	ldr	r1, [fp, #-8]
    acdc:	sub	r2, fp, #100	; 0x64
    ace0:	str	r0, [sp, #72]	; 0x48
    ace4:	mov	r0, r2
    ace8:	bl	b0e4 <MyGame_Example_Any_vec_end>
    acec:	vldr	d16, [fp, #-100]	; 0xffffff9c
    acf0:	vstr	d16, [fp, #-48]	; 0xffffffd0
    acf4:	ldr	r0, [fp, #-8]
    acf8:	bl	b104 <MyGame_Example_Monster_test_Alt_start>
    acfc:	ldr	r1, [fp, #-8]
    ad00:	ldr	r2, [fp, #-48]	; 0xffffffd0
    ad04:	ldr	r3, [fp, #-44]	; 0xffffffd4
    ad08:	str	r0, [sp, #68]	; 0x44
    ad0c:	mov	r0, r1
    ad10:	mov	r1, r2
    ad14:	mov	r2, r3
    ad18:	bl	b124 <MyGame_Example_Alt_manyany_add>
    ad1c:	ldr	r1, [fp, #-8]
    ad20:	str	r0, [sp, #64]	; 0x40
    ad24:	mov	r0, r1
    ad28:	bl	b1f8 <MyGame_Example_Monster_test_Alt_end>
    ad2c:	ldr	r1, [fp, #-8]
    ad30:	str	r0, [sp, #60]	; 0x3c
    ad34:	mov	r0, r1
    ad38:	bl	6538 <MyGame_Example_Monster_end_as_root>
    ad3c:	ldr	r1, [fp, #-8]
    ad40:	str	r0, [sp, #56]	; 0x38
    ad44:	mov	r0, r1
    ad48:	sub	r1, fp, #16
    ad4c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    ad50:	str	r0, [fp, #-12]
    ad54:	ldr	r0, [fp, #-12]
    ad58:	ldr	r1, [fp, #-16]
    ad5c:	bl	197c <MyGame_Example_Monster_verify_as_root>
    ad60:	str	r0, [fp, #-28]	; 0xffffffe4
    ad64:	cmp	r0, #0
    ad68:	beq	ad9c <test_union_vector+0x170>
    ad6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ad70:	bl	0 <flatcc_verify_error_string>
    ad74:	movw	lr, #0
    ad78:	movt	lr, #0
    ad7c:	str	r0, [sp, #52]	; 0x34
    ad80:	mov	r0, lr
    ad84:	ldr	r1, [sp, #52]	; 0x34
    ad88:	bl	0 <printf>
    ad8c:	mvn	r1, #0
    ad90:	str	r1, [fp, #-4]
    ad94:	str	r0, [sp, #48]	; 0x30
    ad98:	b	afc0 <test_union_vector+0x394>
    ad9c:	ldr	r0, [fp, #-12]
    ada0:	bl	280 <MyGame_Example_Monster_as_root>
    ada4:	str	r0, [fp, #-32]	; 0xffffffe0
    ada8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    adac:	bl	4944 <MyGame_Example_Monster_test_type>
    adb0:	and	r0, r0, #255	; 0xff
    adb4:	cmp	r0, #4
    adb8:	beq	add0 <test_union_vector+0x1a4>
    adbc:	movw	r0, #0
    adc0:	movt	r0, #0
    adc4:	bl	0 <printf>
    adc8:	str	r0, [sp, #44]	; 0x2c
    adcc:	b	afb0 <test_union_vector+0x384>
    add0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    add4:	bl	4a2c <MyGame_Example_Monster_test>
    add8:	str	r0, [fp, #-84]	; 0xffffffac
    addc:	ldr	r0, [fp, #-84]	; 0xffffffac
    ade0:	movw	lr, #0
    ade4:	cmp	r0, lr
    ade8:	beq	adfc <test_union_vector+0x1d0>
    adec:	ldr	r0, [fp, #-84]	; 0xffffffac
    adf0:	bl	b24c <MyGame_Example_Alt_manyany_is_present>
    adf4:	cmp	r0, #0
    adf8:	beq	ae10 <test_union_vector+0x1e4>
    adfc:	movw	r0, #0
    ae00:	movt	r0, #0
    ae04:	bl	0 <printf>
    ae08:	str	r0, [sp, #40]	; 0x28
    ae0c:	b	afb0 <test_union_vector+0x384>
    ae10:	ldr	r0, [fp, #-84]	; 0xffffffac
    ae14:	bl	b30c <MyGame_Example_Alt_manyany_type>
    ae18:	str	r0, [fp, #-64]	; 0xffffffc0
    ae1c:	ldr	r0, [fp, #-84]	; 0xffffffac
    ae20:	bl	b408 <MyGame_Example_Alt_manyany>
    ae24:	str	r0, [fp, #-60]	; 0xffffffc4
    ae28:	ldr	r0, [fp, #-64]	; 0xffffffc0
    ae2c:	bl	b504 <MyGame_Example_Any_vec_len>
    ae30:	str	r0, [fp, #-20]	; 0xffffffec
    ae34:	ldr	r0, [fp, #-20]	; 0xffffffec
    ae38:	cmp	r0, #1
    ae3c:	beq	ae54 <test_union_vector+0x228>
    ae40:	movw	r0, #0
    ae44:	movt	r0, #0
    ae48:	bl	0 <printf>
    ae4c:	str	r0, [sp, #36]	; 0x24
    ae50:	b	afb0 <test_union_vector+0x384>
    ae54:	ldr	r0, [fp, #-64]	; 0xffffffc0
    ae58:	movw	r1, #0
    ae5c:	bl	b524 <flatbuffers_union_type_vec_at>
    ae60:	and	r0, r0, #255	; 0xff
    ae64:	cmp	r0, #2
    ae68:	beq	ae80 <test_union_vector+0x254>
    ae6c:	movw	r0, #0
    ae70:	movt	r0, #0
    ae74:	bl	0 <printf>
    ae78:	str	r0, [sp, #32]
    ae7c:	b	afb0 <test_union_vector+0x384>
    ae80:	ldr	r0, [fp, #-60]	; 0xffffffc4
    ae84:	movw	r1, #0
    ae88:	bl	b590 <flatbuffers_generic_vec_at>
    ae8c:	str	r0, [fp, #-56]	; 0xffffffc8
    ae90:	ldr	r0, [fp, #-56]	; 0xffffffc8
    ae94:	movw	r1, #0
    ae98:	cmp	r0, r1
    ae9c:	bne	aeb4 <test_union_vector+0x288>
    aea0:	movw	r0, #0
    aea4:	movt	r0, #0
    aea8:	bl	0 <printf>
    aeac:	str	r0, [sp, #28]
    aeb0:	b	afb0 <test_union_vector+0x384>
    aeb4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    aeb8:	bl	b614 <MyGame_Example_TestSimpleTableWithEnum_color>
    aebc:	sxtb	r0, r0
    aec0:	str	r0, [fp, #-24]	; 0xffffffe8
    aec4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aec8:	cmp	r0, #2
    aecc:	beq	aee8 <test_union_vector+0x2bc>
    aed0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    aed4:	movw	r0, #0
    aed8:	movt	r0, #0
    aedc:	bl	0 <printf>
    aee0:	str	r0, [sp, #24]
    aee4:	b	afb0 <test_union_vector+0x384>
    aee8:	ldr	r1, [fp, #-84]	; 0xffffffac
    aeec:	add	r0, sp, #108	; 0x6c
    aef0:	bl	b6fc <MyGame_Example_Alt_manyany_union>
    aef4:	vldr	d16, [sp, #108]	; 0x6c
    aef8:	vstr	d16, [fp, #-72]	; 0xffffffb8
    aefc:	ldr	r0, [fp, #-72]	; 0xffffffb8
    af00:	ldr	r1, [fp, #-68]	; 0xffffffbc
    af04:	bl	b78c <MyGame_Example_Any_union_vec_len>
    af08:	cmp	r0, #1
    af0c:	beq	af24 <test_union_vector+0x2f8>
    af10:	movw	r0, #0
    af14:	movt	r0, #0
    af18:	bl	0 <printf>
    af1c:	str	r0, [sp, #20]
    af20:	b	afb0 <test_union_vector+0x384>
    af24:	ldr	r1, [fp, #-72]	; 0xffffffb8
    af28:	ldr	r2, [fp, #-68]	; 0xffffffbc
    af2c:	add	r0, sp, #100	; 0x64
    af30:	mov	r3, #0
    af34:	bl	b7b0 <MyGame_Example_Any_union_vec_at>
    af38:	ldr	r0, [sp, #100]	; 0x64
    af3c:	str	r0, [fp, #-80]	; 0xffffffb0
    af40:	ldr	r0, [sp, #104]	; 0x68
    af44:	str	r0, [fp, #-76]	; 0xffffffb4
    af48:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    af4c:	ldr	r1, [fp, #-64]	; 0xffffffc0
    af50:	str	r0, [sp, #16]
    af54:	mov	r0, r1
    af58:	movw	r1, #0
    af5c:	bl	b524 <flatbuffers_union_type_vec_at>
    af60:	and	r0, r0, #255	; 0xff
    af64:	ldr	r1, [sp, #16]
    af68:	cmp	r1, r0
    af6c:	beq	af84 <test_union_vector+0x358>
    af70:	movw	r0, #0
    af74:	movt	r0, #0
    af78:	bl	0 <printf>
    af7c:	str	r0, [sp, #12]
    af80:	b	afb0 <test_union_vector+0x384>
    af84:	ldr	r0, [fp, #-76]	; 0xffffffb4
    af88:	ldr	r1, [fp, #-56]	; 0xffffffc8
    af8c:	cmp	r0, r1
    af90:	beq	afa8 <test_union_vector+0x37c>
    af94:	movw	r0, #0
    af98:	movt	r0, #0
    af9c:	bl	0 <printf>
    afa0:	str	r0, [sp, #8]
    afa4:	b	afb0 <test_union_vector+0x384>
    afa8:	movw	r0, #0
    afac:	str	r0, [fp, #-28]	; 0xffffffe4
    afb0:	ldr	r0, [fp, #-12]
    afb4:	bl	0 <flatcc_builder_aligned_free>
    afb8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    afbc:	str	r0, [fp, #-4]
    afc0:	ldr	r0, [fp, #-4]
    afc4:	mov	sp, fp
    afc8:	pop	{fp, pc}

0000afcc <MyGame_Example_TestSimpleTableWithEnum_create>:
    afcc:	push	{fp, lr}
    afd0:	mov	fp, sp
    afd4:	sub	sp, sp, #16
    afd8:	ldr	ip, [fp, #8]
    afdc:	str	r0, [sp, #8]
    afe0:	strb	r1, [sp, #7]
    afe4:	strb	r2, [sp, #6]
    afe8:	strb	r3, [sp, #5]
    afec:	strb	ip, [sp, #4]
    aff0:	ldr	r0, [sp, #8]
    aff4:	bl	13434 <MyGame_Example_TestSimpleTableWithEnum_start>
    aff8:	cmp	r0, #0
    affc:	bne	b050 <MyGame_Example_TestSimpleTableWithEnum_create+0x84>
    b000:	ldr	r0, [sp, #8]
    b004:	ldrsb	r1, [sp, #7]
    b008:	bl	13458 <MyGame_Example_TestSimpleTableWithEnum_color_add>
    b00c:	cmp	r0, #0
    b010:	bne	b050 <MyGame_Example_TestSimpleTableWithEnum_create+0x84>
    b014:	ldr	r0, [sp, #8]
    b018:	ldrsb	r1, [sp, #6]
    b01c:	bl	134dc <MyGame_Example_TestSimpleTableWithEnum_color2_add>
    b020:	cmp	r0, #0
    b024:	bne	b050 <MyGame_Example_TestSimpleTableWithEnum_create+0x84>
    b028:	ldr	r0, [sp, #8]
    b02c:	ldrb	r1, [sp, #5]
    b030:	bl	13564 <MyGame_Example_TestSimpleTableWithEnum_uc_add>
    b034:	cmp	r0, #0
    b038:	bne	b050 <MyGame_Example_TestSimpleTableWithEnum_create+0x84>
    b03c:	ldr	r0, [sp, #8]
    b040:	ldrb	r1, [sp, #4]
    b044:	bl	135e8 <MyGame_Example_TestSimpleTableWithEnum_uc2_add>
    b048:	cmp	r0, #0
    b04c:	beq	b05c <MyGame_Example_TestSimpleTableWithEnum_create+0x90>
    b050:	movw	r0, #0
    b054:	str	r0, [fp, #-4]
    b058:	b	b068 <MyGame_Example_TestSimpleTableWithEnum_create+0x9c>
    b05c:	ldr	r0, [sp, #8]
    b060:	bl	1366c <MyGame_Example_TestSimpleTableWithEnum_end>
    b064:	str	r0, [fp, #-4]
    b068:	ldr	r0, [fp, #-4]
    b06c:	mov	sp, fp
    b070:	pop	{fp, pc}

0000b074 <MyGame_Example_Any_vec_start>:
    b074:	push	{fp, lr}
    b078:	mov	fp, sp
    b07c:	sub	sp, sp, #8
    b080:	str	r0, [sp, #4]
    b084:	ldr	r0, [sp, #4]
    b088:	bl	0 <flatcc_builder_start_union_vector>
    b08c:	mov	sp, fp
    b090:	pop	{fp, pc}

0000b094 <MyGame_Example_Any_vec_push>:
    b094:	push	{fp, lr}
    b098:	mov	fp, sp
    b09c:	sub	sp, sp, #16
    b0a0:	str	r1, [sp, #8]
    b0a4:	str	r2, [sp, #12]
    b0a8:	str	r0, [sp, #4]
    b0ac:	ldr	r0, [sp, #4]
    b0b0:	ldr	r1, [sp, #8]
    b0b4:	ldr	r2, [sp, #12]
    b0b8:	bl	0 <flatcc_builder_union_vector_push>
    b0bc:	mov	sp, fp
    b0c0:	pop	{fp, pc}

0000b0c4 <MyGame_Example_Any_as_TestSimpleTableWithEnum>:
    b0c4:	sub	sp, sp, #4
    b0c8:	str	r1, [sp]
    b0cc:	movw	r1, #2
    b0d0:	strb	r1, [r0]
    b0d4:	ldr	r1, [sp]
    b0d8:	str	r1, [r0, #4]
    b0dc:	add	sp, sp, #4
    b0e0:	bx	lr

0000b0e4 <MyGame_Example_Any_vec_end>:
    b0e4:	push	{fp, lr}
    b0e8:	mov	fp, sp
    b0ec:	sub	sp, sp, #8
    b0f0:	str	r1, [sp, #4]
    b0f4:	ldr	r1, [sp, #4]
    b0f8:	bl	0 <flatcc_builder_end_union_vector>
    b0fc:	mov	sp, fp
    b100:	pop	{fp, pc}

0000b104 <MyGame_Example_Monster_test_Alt_start>:
    b104:	push	{fp, lr}
    b108:	mov	fp, sp
    b10c:	sub	sp, sp, #8
    b110:	str	r0, [sp, #4]
    b114:	ldr	r0, [sp, #4]
    b118:	bl	136cc <MyGame_Example_Alt_start>
    b11c:	mov	sp, fp
    b120:	pop	{fp, pc}

0000b124 <MyGame_Example_Alt_manyany_add>:
    b124:	push	{fp, lr}
    b128:	mov	fp, sp
    b12c:	sub	sp, sp, #24
    b130:	str	r1, [sp, #12]
    b134:	str	r2, [sp, #16]
    b138:	str	r0, [sp, #8]
    b13c:	ldr	r0, [sp, #12]
    b140:	cmp	r0, #0
    b144:	beq	b154 <MyGame_Example_Alt_manyany_add+0x30>
    b148:	ldr	r0, [sp, #16]
    b14c:	cmp	r0, #0
    b150:	bne	b17c <MyGame_Example_Alt_manyany_add+0x58>
    b154:	ldr	r0, [sp, #12]
    b158:	ldr	r1, [sp, #16]
    b15c:	cmp	r0, r1
    b160:	movw	r0, #0
    b164:	moveq	r0, #1
    b168:	tst	r0, #1
    b16c:	movw	r0, #0
    b170:	mvneq	r0, #0
    b174:	str	r0, [fp, #-4]
    b178:	b	b1ec <MyGame_Example_Alt_manyany_add+0xc8>
    b17c:	ldr	r0, [sp, #8]
    b180:	movw	r1, #2
    b184:	bl	0 <flatcc_builder_table_add_offset>
    b188:	str	r0, [sp, #4]
    b18c:	movw	r1, #0
    b190:	cmp	r0, r1
    b194:	bne	b1a4 <MyGame_Example_Alt_manyany_add+0x80>
    b198:	mvn	r0, #0
    b19c:	str	r0, [fp, #-4]
    b1a0:	b	b1ec <MyGame_Example_Alt_manyany_add+0xc8>
    b1a4:	ldr	r0, [sp, #12]
    b1a8:	ldr	r1, [sp, #4]
    b1ac:	str	r0, [r1]
    b1b0:	ldr	r0, [sp, #8]
    b1b4:	movw	r1, #3
    b1b8:	bl	0 <flatcc_builder_table_add_offset>
    b1bc:	str	r0, [sp, #4]
    b1c0:	movw	r1, #0
    b1c4:	cmp	r0, r1
    b1c8:	bne	b1d8 <MyGame_Example_Alt_manyany_add+0xb4>
    b1cc:	mvn	r0, #0
    b1d0:	str	r0, [fp, #-4]
    b1d4:	b	b1ec <MyGame_Example_Alt_manyany_add+0xc8>
    b1d8:	ldr	r0, [sp, #16]
    b1dc:	ldr	r1, [sp, #4]
    b1e0:	str	r0, [r1]
    b1e4:	movw	r0, #0
    b1e8:	str	r0, [fp, #-4]
    b1ec:	ldr	r0, [fp, #-4]
    b1f0:	mov	sp, fp
    b1f4:	pop	{fp, pc}

0000b1f8 <MyGame_Example_Monster_test_Alt_end>:
    b1f8:	push	{fp, lr}
    b1fc:	mov	fp, sp
    b200:	sub	sp, sp, #16
    b204:	str	r0, [fp, #-4]
    b208:	ldr	r0, [fp, #-4]
    b20c:	bl	136f0 <MyGame_Example_Alt_end>
    b210:	str	r0, [sp, #8]
    b214:	ldr	r0, [sp, #8]
    b218:	cmp	r0, #0
    b21c:	beq	b234 <MyGame_Example_Monster_test_Alt_end+0x3c>
    b220:	ldr	r0, [fp, #-4]
    b224:	ldr	r1, [sp, #8]
    b228:	bl	13750 <MyGame_Example_Monster_test_Alt_add>
    b22c:	str	r0, [sp, #4]
    b230:	b	b240 <MyGame_Example_Monster_test_Alt_end+0x48>
    b234:	mvn	r0, #0
    b238:	str	r0, [sp, #4]
    b23c:	b	b240 <MyGame_Example_Monster_test_Alt_end+0x48>
    b240:	ldr	r0, [sp, #4]
    b244:	mov	sp, fp
    b248:	pop	{fp, pc}

0000b24c <MyGame_Example_Alt_manyany_is_present>:
    b24c:	push	{fp, lr}
    b250:	mov	fp, sp
    b254:	sub	sp, sp, #16
    b258:	str	r0, [fp, #-4]
    b25c:	movw	r0, #0
    b260:	strh	r0, [fp, #-6]
    b264:	ldr	r0, [fp, #-4]
    b268:	movw	r1, #0
    b26c:	cmp	r0, r1
    b270:	beq	b27c <MyGame_Example_Alt_manyany_is_present+0x30>
    b274:	b	b278 <MyGame_Example_Alt_manyany_is_present+0x2c>
    b278:	b	b29c <MyGame_Example_Alt_manyany_is_present+0x50>
    b27c:	movw	r0, #0
    b280:	movt	r0, #0
    b284:	movw	r1, #0
    b288:	movt	r1, #0
    b28c:	movw	r2, #621	; 0x26d
    b290:	movw	r3, #0
    b294:	movt	r3, #0
    b298:	bl	0 <__assert_fail>
    b29c:	mov	r0, #3
    b2a0:	strh	r0, [sp, #8]
    b2a4:	ldr	r0, [fp, #-4]
    b2a8:	str	r0, [sp]
    b2ac:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    b2b0:	ldr	lr, [sp]
    b2b4:	sub	r0, lr, r0
    b2b8:	str	r0, [sp, #4]
    b2bc:	ldr	r0, [sp, #4]
    b2c0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    b2c4:	ldrh	lr, [sp, #8]
    b2c8:	add	lr, lr, #3
    b2cc:	lsl	lr, lr, #1
    b2d0:	cmp	r0, lr
    b2d4:	bcc	b2f0 <MyGame_Example_Alt_manyany_is_present+0xa4>
    b2d8:	ldr	r0, [sp, #4]
    b2dc:	ldrh	r1, [sp, #8]
    b2e0:	add	r0, r0, r1, lsl #1
    b2e4:	add	r0, r0, #4
    b2e8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    b2ec:	strh	r0, [fp, #-6]
    b2f0:	ldrh	r0, [fp, #-6]
    b2f4:	cmp	r0, #0
    b2f8:	movw	r0, #0
    b2fc:	movne	r0, #1
    b300:	and	r0, r0, #1
    b304:	mov	sp, fp
    b308:	pop	{fp, pc}

0000b30c <MyGame_Example_Alt_manyany_type>:
    b30c:	push	{fp, lr}
    b310:	mov	fp, sp
    b314:	sub	sp, sp, #32
    b318:	str	r0, [fp, #-8]
    b31c:	movw	r0, #0
    b320:	strh	r0, [fp, #-14]
    b324:	ldr	r0, [fp, #-8]
    b328:	movw	r1, #0
    b32c:	cmp	r0, r1
    b330:	beq	b33c <MyGame_Example_Alt_manyany_type+0x30>
    b334:	b	b338 <MyGame_Example_Alt_manyany_type+0x2c>
    b338:	b	b35c <MyGame_Example_Alt_manyany_type+0x50>
    b33c:	movw	r0, #0
    b340:	movt	r0, #0
    b344:	movw	r1, #0
    b348:	movt	r1, #0
    b34c:	movw	r2, #621	; 0x26d
    b350:	movw	r3, #0
    b354:	movt	r3, #0
    b358:	bl	0 <__assert_fail>
    b35c:	mov	r0, #2
    b360:	strh	r0, [sp, #16]
    b364:	ldr	r0, [fp, #-8]
    b368:	str	r0, [sp, #8]
    b36c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    b370:	ldr	lr, [sp, #8]
    b374:	sub	r0, lr, r0
    b378:	str	r0, [sp, #12]
    b37c:	ldr	r0, [sp, #12]
    b380:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    b384:	ldrh	lr, [sp, #16]
    b388:	add	lr, lr, #3
    b38c:	lsl	lr, lr, #1
    b390:	cmp	r0, lr
    b394:	bcc	b3b0 <MyGame_Example_Alt_manyany_type+0xa4>
    b398:	ldr	r0, [sp, #12]
    b39c:	ldrh	r1, [sp, #16]
    b3a0:	add	r0, r0, r1, lsl #1
    b3a4:	add	r0, r0, #4
    b3a8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    b3ac:	strh	r0, [fp, #-14]
    b3b0:	ldrsh	r0, [fp, #-14]
    b3b4:	cmp	r0, #0
    b3b8:	beq	b3f4 <MyGame_Example_Alt_manyany_type+0xe8>
    b3bc:	ldr	r0, [fp, #-8]
    b3c0:	ldrh	r1, [fp, #-14]
    b3c4:	add	r0, r0, r1
    b3c8:	str	r0, [fp, #-12]
    b3cc:	ldr	r0, [fp, #-12]
    b3d0:	add	r0, r0, #4
    b3d4:	ldr	r1, [fp, #-12]
    b3d8:	str	r0, [sp, #4]
    b3dc:	mov	r0, r1
    b3e0:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    b3e4:	ldr	r1, [sp, #4]
    b3e8:	add	r0, r1, r0
    b3ec:	str	r0, [fp, #-4]
    b3f0:	b	b3fc <MyGame_Example_Alt_manyany_type+0xf0>
    b3f4:	movw	r0, #0
    b3f8:	str	r0, [fp, #-4]
    b3fc:	ldr	r0, [fp, #-4]
    b400:	mov	sp, fp
    b404:	pop	{fp, pc}

0000b408 <MyGame_Example_Alt_manyany>:
    b408:	push	{fp, lr}
    b40c:	mov	fp, sp
    b410:	sub	sp, sp, #32
    b414:	str	r0, [fp, #-8]
    b418:	movw	r0, #0
    b41c:	strh	r0, [fp, #-14]
    b420:	ldr	r0, [fp, #-8]
    b424:	movw	r1, #0
    b428:	cmp	r0, r1
    b42c:	beq	b438 <MyGame_Example_Alt_manyany+0x30>
    b430:	b	b434 <MyGame_Example_Alt_manyany+0x2c>
    b434:	b	b458 <MyGame_Example_Alt_manyany+0x50>
    b438:	movw	r0, #0
    b43c:	movt	r0, #0
    b440:	movw	r1, #0
    b444:	movt	r1, #0
    b448:	movw	r2, #621	; 0x26d
    b44c:	movw	r3, #0
    b450:	movt	r3, #0
    b454:	bl	0 <__assert_fail>
    b458:	mov	r0, #3
    b45c:	strh	r0, [sp, #16]
    b460:	ldr	r0, [fp, #-8]
    b464:	str	r0, [sp, #8]
    b468:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    b46c:	ldr	lr, [sp, #8]
    b470:	sub	r0, lr, r0
    b474:	str	r0, [sp, #12]
    b478:	ldr	r0, [sp, #12]
    b47c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    b480:	ldrh	lr, [sp, #16]
    b484:	add	lr, lr, #3
    b488:	lsl	lr, lr, #1
    b48c:	cmp	r0, lr
    b490:	bcc	b4ac <MyGame_Example_Alt_manyany+0xa4>
    b494:	ldr	r0, [sp, #12]
    b498:	ldrh	r1, [sp, #16]
    b49c:	add	r0, r0, r1, lsl #1
    b4a0:	add	r0, r0, #4
    b4a4:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    b4a8:	strh	r0, [fp, #-14]
    b4ac:	ldrsh	r0, [fp, #-14]
    b4b0:	cmp	r0, #0
    b4b4:	beq	b4f0 <MyGame_Example_Alt_manyany+0xe8>
    b4b8:	ldr	r0, [fp, #-8]
    b4bc:	ldrh	r1, [fp, #-14]
    b4c0:	add	r0, r0, r1
    b4c4:	str	r0, [fp, #-12]
    b4c8:	ldr	r0, [fp, #-12]
    b4cc:	add	r0, r0, #4
    b4d0:	ldr	r1, [fp, #-12]
    b4d4:	str	r0, [sp, #4]
    b4d8:	mov	r0, r1
    b4dc:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    b4e0:	ldr	r1, [sp, #4]
    b4e4:	add	r0, r1, r0
    b4e8:	str	r0, [fp, #-4]
    b4ec:	b	b4f8 <MyGame_Example_Alt_manyany+0xf0>
    b4f0:	movw	r0, #0
    b4f4:	str	r0, [fp, #-4]
    b4f8:	ldr	r0, [fp, #-4]
    b4fc:	mov	sp, fp
    b500:	pop	{fp, pc}

0000b504 <MyGame_Example_Any_vec_len>:
    b504:	push	{fp, lr}
    b508:	mov	fp, sp
    b50c:	sub	sp, sp, #8
    b510:	str	r0, [sp, #4]
    b514:	ldr	r0, [sp, #4]
    b518:	bl	120c0 <flatbuffers_vec_len>
    b51c:	mov	sp, fp
    b520:	pop	{fp, pc}

0000b524 <flatbuffers_union_type_vec_at>:
    b524:	push	{fp, lr}
    b528:	mov	fp, sp
    b52c:	sub	sp, sp, #8
    b530:	str	r0, [sp, #4]
    b534:	str	r1, [sp]
    b538:	ldr	r0, [sp, #4]
    b53c:	bl	120c0 <flatbuffers_vec_len>
    b540:	ldr	r1, [sp]
    b544:	cmp	r0, r1
    b548:	bls	b554 <flatbuffers_union_type_vec_at+0x30>
    b54c:	b	b550 <flatbuffers_union_type_vec_at+0x2c>
    b550:	b	b574 <flatbuffers_union_type_vec_at+0x50>
    b554:	movw	r0, #0
    b558:	movt	r0, #0
    b55c:	movw	r1, #0
    b560:	movt	r1, #0
    b564:	movw	r2, #405	; 0x195
    b568:	movw	r3, #0
    b56c:	movt	r3, #0
    b570:	bl	0 <__assert_fail>
    b574:	ldr	r0, [sp, #4]
    b578:	ldr	r1, [sp]
    b57c:	add	r0, r0, r1
    b580:	bl	137b4 <flatbuffers_union_type_read_from_pe>
    b584:	and	r0, r0, #255	; 0xff
    b588:	mov	sp, fp
    b58c:	pop	{fp, pc}

0000b590 <flatbuffers_generic_vec_at>:
    b590:	push	{fp, lr}
    b594:	mov	fp, sp
    b598:	sub	sp, sp, #16
    b59c:	str	r0, [fp, #-4]
    b5a0:	str	r1, [sp, #8]
    b5a4:	ldr	r0, [fp, #-4]
    b5a8:	ldr	r1, [sp, #8]
    b5ac:	add	r0, r0, r1, lsl #2
    b5b0:	str	r0, [sp, #4]
    b5b4:	ldr	r0, [fp, #-4]
    b5b8:	bl	120c0 <flatbuffers_vec_len>
    b5bc:	ldr	r1, [sp, #8]
    b5c0:	cmp	r0, r1
    b5c4:	bls	b5d0 <flatbuffers_generic_vec_at+0x40>
    b5c8:	b	b5cc <flatbuffers_generic_vec_at+0x3c>
    b5cc:	b	b5f0 <flatbuffers_generic_vec_at+0x60>
    b5d0:	movw	r0, #0
    b5d4:	movt	r0, #0
    b5d8:	movw	r1, #0
    b5dc:	movt	r1, #0
    b5e0:	movw	r2, #117	; 0x75
    b5e4:	movw	r3, #0
    b5e8:	movt	r3, #0
    b5ec:	bl	0 <__assert_fail>
    b5f0:	ldr	r0, [sp, #4]
    b5f4:	ldr	r1, [sp, #4]
    b5f8:	str	r0, [sp]
    b5fc:	mov	r0, r1
    b600:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    b604:	ldr	r1, [sp]
    b608:	add	r0, r1, r0
    b60c:	mov	sp, fp
    b610:	pop	{fp, pc}

0000b614 <MyGame_Example_TestSimpleTableWithEnum_color>:
    b614:	push	{fp, lr}
    b618:	mov	fp, sp
    b61c:	sub	sp, sp, #24
    b620:	str	r0, [fp, #-4]
    b624:	movw	r0, #0
    b628:	strh	r0, [fp, #-6]
    b62c:	ldr	r0, [fp, #-4]
    b630:	movw	r1, #0
    b634:	cmp	r0, r1
    b638:	beq	b644 <MyGame_Example_TestSimpleTableWithEnum_color+0x30>
    b63c:	b	b640 <MyGame_Example_TestSimpleTableWithEnum_color+0x2c>
    b640:	b	b664 <MyGame_Example_TestSimpleTableWithEnum_color+0x50>
    b644:	movw	r0, #0
    b648:	movt	r0, #0
    b64c:	movw	r1, #0
    b650:	movt	r1, #0
    b654:	movw	r2, #579	; 0x243
    b658:	movw	r3, #0
    b65c:	movt	r3, #0
    b660:	bl	0 <__assert_fail>
    b664:	mov	r0, #0
    b668:	strh	r0, [fp, #-8]
    b66c:	ldr	r0, [fp, #-4]
    b670:	str	r0, [sp, #8]
    b674:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    b678:	ldr	lr, [sp, #8]
    b67c:	sub	r0, lr, r0
    b680:	str	r0, [sp, #12]
    b684:	ldr	r0, [sp, #12]
    b688:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    b68c:	ldrh	lr, [fp, #-8]
    b690:	add	lr, lr, #3
    b694:	lsl	lr, lr, #1
    b698:	cmp	r0, lr
    b69c:	bcc	b6b8 <MyGame_Example_TestSimpleTableWithEnum_color+0xa4>
    b6a0:	ldr	r0, [sp, #12]
    b6a4:	ldrh	r1, [fp, #-8]
    b6a8:	add	r0, r0, r1, lsl #1
    b6ac:	add	r0, r0, #4
    b6b0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    b6b4:	strh	r0, [fp, #-6]
    b6b8:	ldrh	r0, [fp, #-6]
    b6bc:	cmp	r0, #0
    b6c0:	beq	b6e0 <MyGame_Example_TestSimpleTableWithEnum_color+0xcc>
    b6c4:	ldr	r0, [fp, #-4]
    b6c8:	ldrh	r1, [fp, #-6]
    b6cc:	add	r0, r0, r1
    b6d0:	bl	12084 <MyGame_Example_Color_read_from_pe>
    b6d4:	sxtb	r0, r0
    b6d8:	str	r0, [sp, #4]
    b6dc:	b	b6ec <MyGame_Example_TestSimpleTableWithEnum_color+0xd8>
    b6e0:	movw	r0, #2
    b6e4:	str	r0, [sp, #4]
    b6e8:	b	b6ec <MyGame_Example_TestSimpleTableWithEnum_color+0xd8>
    b6ec:	ldr	r0, [sp, #4]
    b6f0:	sxtb	r0, r0
    b6f4:	mov	sp, fp
    b6f8:	pop	{fp, pc}

0000b6fc <MyGame_Example_Alt_manyany_union>:
    b6fc:	push	{fp, lr}
    b700:	mov	fp, sp
    b704:	sub	sp, sp, #16
    b708:	str	r1, [fp, #-4]
    b70c:	ldr	r1, [fp, #-4]
    b710:	str	r0, [sp, #8]
    b714:	mov	r0, r1
    b718:	bl	b30c <MyGame_Example_Alt_manyany_type>
    b71c:	ldr	r1, [sp, #8]
    b720:	str	r0, [r1]
    b724:	ldr	r0, [fp, #-4]
    b728:	bl	b408 <MyGame_Example_Alt_manyany>
    b72c:	ldr	r1, [sp, #8]
    b730:	str	r0, [r1, #4]
    b734:	ldr	r0, [r1]
    b738:	bl	120c0 <flatbuffers_vec_len>
    b73c:	ldr	r1, [sp, #8]
    b740:	ldr	lr, [r1, #4]
    b744:	str	r0, [sp, #4]
    b748:	mov	r0, lr
    b74c:	bl	120c0 <flatbuffers_vec_len>
    b750:	ldr	r1, [sp, #4]
    b754:	cmp	r1, r0
    b758:	bne	b764 <MyGame_Example_Alt_manyany_union+0x68>
    b75c:	b	b760 <MyGame_Example_Alt_manyany_union+0x64>
    b760:	b	b784 <MyGame_Example_Alt_manyany_union+0x88>
    b764:	movw	r0, #0
    b768:	movt	r0, #0
    b76c:	movw	r1, #0
    b770:	movt	r1, #0
    b774:	movw	r2, #621	; 0x26d
    b778:	movw	r3, #0
    b77c:	movt	r3, #0
    b780:	bl	0 <__assert_fail>
    b784:	mov	sp, fp
    b788:	pop	{fp, pc}

0000b78c <MyGame_Example_Any_union_vec_len>:
    b78c:	push	{fp, lr}
    b790:	mov	fp, sp
    b794:	sub	sp, sp, #8
    b798:	str	r0, [sp]
    b79c:	str	r1, [sp, #4]
    b7a0:	ldr	r0, [sp]
    b7a4:	bl	120c0 <flatbuffers_vec_len>
    b7a8:	mov	sp, fp
    b7ac:	pop	{fp, pc}

0000b7b0 <MyGame_Example_Any_union_vec_at>:
    b7b0:	push	{fp, lr}
    b7b4:	mov	fp, sp
    b7b8:	sub	sp, sp, #24
    b7bc:	str	r1, [fp, #-8]
    b7c0:	str	r2, [fp, #-4]
    b7c4:	str	r3, [sp, #12]
    b7c8:	mov	r1, r0
    b7cc:	str	r0, [sp, #4]
    b7d0:	mov	r0, r1
    b7d4:	movw	r1, #0
    b7d8:	and	r1, r1, #255	; 0xff
    b7dc:	movw	r2, #8
    b7e0:	bl	0 <memset>
    b7e4:	ldr	r0, [fp, #-8]
    b7e8:	bl	120c0 <flatbuffers_vec_len>
    b7ec:	str	r0, [sp, #8]
    b7f0:	ldr	r0, [sp, #8]
    b7f4:	ldr	r1, [sp, #12]
    b7f8:	cmp	r0, r1
    b7fc:	bls	b808 <MyGame_Example_Any_union_vec_at+0x58>
    b800:	b	b804 <MyGame_Example_Any_union_vec_at+0x54>
    b804:	b	b828 <MyGame_Example_Any_union_vec_at+0x78>
    b808:	movw	r0, #0
    b80c:	movt	r0, #0
    b810:	movw	r1, #0
    b814:	movt	r1, #0
    b818:	movw	r2, #520	; 0x208
    b81c:	movw	r3, #0
    b820:	movt	r3, #0
    b824:	bl	0 <__assert_fail>
    b828:	ldr	r0, [fp, #-8]
    b82c:	ldr	r1, [sp, #12]
    b830:	add	r0, r0, r1
    b834:	ldrb	r0, [r0]
    b838:	ldr	r1, [sp, #4]
    b83c:	strb	r0, [r1]
    b840:	ldrb	r0, [r1]
    b844:	cmp	r0, #0
    b848:	bne	b850 <MyGame_Example_Any_union_vec_at+0xa0>
    b84c:	b	b864 <MyGame_Example_Any_union_vec_at+0xb4>
    b850:	ldr	r0, [fp, #-4]
    b854:	ldr	r1, [sp, #12]
    b858:	bl	b590 <flatbuffers_generic_vec_at>
    b85c:	ldr	r1, [sp, #4]
    b860:	str	r0, [r1, #4]
    b864:	mov	sp, fp
    b868:	pop	{fp, pc}

0000b86c <test_mixed_type_union>:
    b86c:	push	{r4, r5, fp, lr}
    b870:	add	fp, sp, #8
    b874:	sub	sp, sp, #448	; 0x1c0
    b878:	str	r0, [fp, #-16]
    b87c:	mvn	r0, #0
    b880:	str	r0, [fp, #-32]	; 0xffffffe0
    b884:	ldr	r0, [fp, #-16]
    b888:	bl	0 <flatcc_builder_reset>
    b88c:	ldr	lr, [fp, #-16]
    b890:	str	r0, [fp, #-216]	; 0xffffff28
    b894:	mov	r0, lr
    b898:	bl	c2bc <Fantasy_Movie_start_as_root>
    b89c:	ldr	lr, [fp, #-16]
    b8a0:	mov	r1, #10
    b8a4:	str	r0, [fp, #-220]	; 0xffffff24
    b8a8:	mov	r0, lr
    b8ac:	bl	c308 <Fantasy_BookReader_create>
    b8b0:	str	r0, [fp, #-52]	; 0xffffffcc
    b8b4:	ldr	r0, [fp, #-16]
    b8b8:	mov	r1, #22
    b8bc:	bl	c370 <Fantasy_Rapunzel_create>
    b8c0:	str	r0, [fp, #-44]	; 0xffffffd4
    b8c4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    b8c8:	sub	r0, fp, #100	; 0x64
    b8cc:	bl	c3d8 <Fantasy_Character_as_Rapunzel>
    b8d0:	vldr	d16, [fp, #-100]	; 0xffffff9c
    b8d4:	vstr	d16, [fp, #-40]	; 0xffffffd8
    b8d8:	ldr	r0, [fp, #-16]
    b8dc:	mov	r1, #19
    b8e0:	bl	c3f8 <Fantasy_Movie_main_character_Rapunzel_create>
    b8e4:	ldr	r1, [fp, #-16]
    b8e8:	ldr	lr, [fp, #-44]	; 0xffffffd4
    b8ec:	str	r0, [fp, #-224]	; 0xffffff20
    b8f0:	mov	r0, r1
    b8f4:	mov	r1, lr
    b8f8:	bl	c470 <Fantasy_Movie_cameo_Rapunzel_add>
    b8fc:	ldr	r1, [fp, #-16]
    b900:	mov	lr, #42	; 0x2a
    b904:	str	r0, [sp, #228]	; 0xe4
    b908:	mov	r0, r1
    b90c:	mov	r1, lr
    b910:	bl	c4b4 <Fantasy_Attacker_create>
    b914:	str	r0, [fp, #-48]	; 0xffffffd0
    b918:	ldr	r0, [fp, #-16]
    b91c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    b920:	bl	c510 <Fantasy_Movie_antagonist_MuLan_add>
    b924:	ldr	r1, [fp, #-16]
    b928:	movw	lr, #0
    b92c:	movt	lr, #0
    b930:	str	r0, [sp, #224]	; 0xe0
    b934:	mov	r0, r1
    b938:	mov	r1, lr
    b93c:	bl	c554 <Fantasy_Movie_side_kick_Other_create_str>
    b940:	ldr	r1, [fp, #-16]
    b944:	str	r0, [sp, #220]	; 0xdc
    b948:	mov	r0, r1
    b94c:	bl	c5a0 <Fantasy_Movie_characters_start>
    b950:	ldr	r1, [fp, #-16]
    b954:	ldr	lr, [fp, #-40]	; 0xffffffd8
    b958:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b95c:	str	r0, [sp, #216]	; 0xd8
    b960:	mov	r0, r1
    b964:	mov	r1, lr
    b968:	bl	c5c0 <Fantasy_Movie_characters_push>
    b96c:	ldr	r1, [fp, #-16]
    b970:	ldr	r2, [fp, #-48]	; 0xffffffd0
    b974:	str	r0, [sp, #212]	; 0xd4
    b978:	mov	r0, r1
    b97c:	mov	r1, r2
    b980:	bl	c5f0 <Fantasy_Movie_characters_MuLan_push>
    b984:	ldr	r1, [fp, #-16]
    b988:	mov	r2, #1
    b98c:	str	r0, [sp, #208]	; 0xd0
    b990:	mov	r0, r1
    b994:	mov	r1, r2
    b998:	bl	c634 <Fantasy_Movie_characters_MuLan_push_create>
    b99c:	ldr	r1, [fp, #-16]
    b9a0:	movw	r2, #0
    b9a4:	movt	r2, #0
    b9a8:	str	r0, [sp, #204]	; 0xcc
    b9ac:	mov	r0, r1
    b9b0:	str	r1, [sp, #200]	; 0xc8
    b9b4:	mov	r1, r2
    b9b8:	bl	604c <flatbuffers_string_create_str>
    b9bc:	sub	r1, fp, #108	; 0x6c
    b9c0:	str	r0, [sp, #196]	; 0xc4
    b9c4:	mov	r0, r1
    b9c8:	ldr	r1, [sp, #196]	; 0xc4
    b9cc:	bl	c6b4 <Fantasy_Character_as_Other>
    b9d0:	ldr	r1, [fp, #-108]	; 0xffffff94
    b9d4:	ldr	r2, [fp, #-104]	; 0xffffff98
    b9d8:	ldr	r0, [sp, #200]	; 0xc8
    b9dc:	bl	c684 <Fantasy_Character_vec_push>
    b9e0:	ldr	r1, [fp, #-16]
    b9e4:	ldr	r2, [fp, #-52]	; 0xffffffcc
    b9e8:	str	r0, [sp, #192]	; 0xc0
    b9ec:	mov	r0, r1
    b9f0:	mov	r1, r2
    b9f4:	bl	c6d4 <Fantasy_Movie_characters_Belle_push>
    b9f8:	ldr	r1, [fp, #-16]
    b9fc:	str	r0, [sp, #188]	; 0xbc
    ba00:	mov	r0, r1
    ba04:	bl	c718 <Fantasy_Movie_characters_Belle_push_start>
    ba08:	str	r0, [fp, #-56]	; 0xffffffc8
    ba0c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    ba10:	movw	r1, #3
    ba14:	str	r1, [r0]
    ba18:	ldr	r0, [fp, #-16]
    ba1c:	bl	c738 <Fantasy_Movie_characters_Belle_push_end>
    ba20:	ldr	r1, [fp, #-16]
    ba24:	ldr	r2, [fp, #-16]
    ba28:	str	r0, [sp, #184]	; 0xb8
    ba2c:	mov	r0, r2
    ba30:	movw	r2, #1
    ba34:	str	r1, [sp, #180]	; 0xb4
    ba38:	mov	r1, r2
    ba3c:	bl	c308 <Fantasy_BookReader_create>
    ba40:	ldr	r1, [sp, #180]	; 0xb4
    ba44:	str	r0, [sp, #176]	; 0xb0
    ba48:	mov	r0, r1
    ba4c:	ldr	r1, [sp, #176]	; 0xb0
    ba50:	bl	c6d4 <Fantasy_Movie_characters_Belle_push>
    ba54:	ldr	r1, [fp, #-16]
    ba58:	str	r0, [sp, #172]	; 0xac
    ba5c:	mov	r0, r1
    ba60:	movw	r1, #2
    ba64:	bl	c780 <Fantasy_Movie_characters_Belle_push_create>
    ba68:	ldr	r1, [fp, #-16]
    ba6c:	ldr	r2, [fp, #-16]
    ba70:	str	r0, [sp, #168]	; 0xa8
    ba74:	mov	r0, r2
    ba78:	movw	r2, #0
    ba7c:	movt	r2, #0
    ba80:	str	r1, [sp, #164]	; 0xa4
    ba84:	mov	r1, r2
    ba88:	bl	604c <flatbuffers_string_create_str>
    ba8c:	ldr	r1, [sp, #164]	; 0xa4
    ba90:	str	r0, [sp, #160]	; 0xa0
    ba94:	mov	r0, r1
    ba98:	ldr	r1, [sp, #160]	; 0xa0
    ba9c:	bl	c7d0 <Fantasy_Movie_characters_Other_push>
    baa0:	ldr	r1, [fp, #-16]
    baa4:	str	r0, [sp, #156]	; 0x9c
    baa8:	mov	r0, r1
    baac:	movw	r1, #0
    bab0:	movt	r1, #0
    bab4:	bl	c814 <Fantasy_Movie_characters_Other_push_create_str>
    bab8:	ldr	r1, [fp, #-16]
    babc:	str	r0, [sp, #152]	; 0x98
    bac0:	mov	r0, r1
    bac4:	bl	c864 <Fantasy_Movie_characters_end>
    bac8:	ldr	r1, [fp, #-16]
    bacc:	str	r0, [sp, #148]	; 0x94
    bad0:	mov	r0, r1
    bad4:	bl	c8a4 <Fantasy_Movie_end_as_root>
    bad8:	ldr	r1, [fp, #-16]
    badc:	str	r0, [sp, #144]	; 0x90
    bae0:	mov	r0, r1
    bae4:	sub	r1, fp, #24
    bae8:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    baec:	str	r0, [fp, #-20]	; 0xffffffec
    baf0:	ldr	r1, [fp, #-20]	; 0xffffffec
    baf4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    baf8:	movw	r0, #0
    bafc:	movt	r0, #0
    bb00:	ldr	r3, [r0]
    bb04:	movw	r0, #0
    bb08:	movt	r0, #0
    bb0c:	bl	b0c <hexdump>
    bb10:	ldr	r0, [fp, #-20]	; 0xffffffec
    bb14:	ldr	r1, [fp, #-24]	; 0xffffffe8
    bb18:	bl	c8e4 <Fantasy_Movie_verify_as_root>
    bb1c:	str	r0, [fp, #-32]	; 0xffffffe0
    bb20:	cmp	r0, #0
    bb24:	beq	bb58 <test_mixed_type_union+0x2ec>
    bb28:	ldr	r0, [fp, #-32]	; 0xffffffe0
    bb2c:	bl	0 <flatcc_verify_error_string>
    bb30:	movw	lr, #0
    bb34:	movt	lr, #0
    bb38:	str	r0, [sp, #140]	; 0x8c
    bb3c:	mov	r0, lr
    bb40:	ldr	r1, [sp, #140]	; 0x8c
    bb44:	bl	0 <printf>
    bb48:	mvn	r1, #0
    bb4c:	str	r1, [fp, #-12]
    bb50:	str	r0, [sp, #136]	; 0x88
    bb54:	b	c2b0 <test_mixed_type_union+0xa44>
    bb58:	mvn	r0, #0
    bb5c:	str	r0, [fp, #-32]	; 0xffffffe0
    bb60:	ldr	r0, [fp, #-20]	; 0xffffffec
    bb64:	bl	c91c <Fantasy_Movie_as_root>
    bb68:	str	r0, [fp, #-60]	; 0xffffffc4
    bb6c:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bb70:	bl	c994 <Fantasy_Movie_main_character_is_present>
    bb74:	cmp	r0, #0
    bb78:	bne	bb90 <test_mixed_type_union+0x324>
    bb7c:	movw	r0, #0
    bb80:	movt	r0, #0
    bb84:	bl	0 <printf>
    bb88:	str	r0, [sp, #132]	; 0x84
    bb8c:	b	c2a0 <test_mixed_type_union+0xa34>
    bb90:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bb94:	bl	ca54 <Fantasy_Movie_characters_is_present>
    bb98:	cmp	r0, #0
    bb9c:	bne	bbb4 <test_mixed_type_union+0x348>
    bba0:	movw	r0, #0
    bba4:	movt	r0, #0
    bba8:	bl	0 <printf>
    bbac:	str	r0, [sp, #128]	; 0x80
    bbb0:	b	c2a0 <test_mixed_type_union+0xa34>
    bbb4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bbb8:	sub	r0, fp, #116	; 0x74
    bbbc:	bl	cb14 <Fantasy_Movie_main_character_union>
    bbc0:	ldr	r0, [fp, #-116]	; 0xffffff8c
    bbc4:	str	r0, [fp, #-80]	; 0xffffffb0
    bbc8:	ldr	r0, [fp, #-112]	; 0xffffff90
    bbcc:	str	r0, [fp, #-76]	; 0xffffffb4
    bbd0:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bbd4:	cmp	r0, #8
    bbd8:	beq	bbf0 <test_mixed_type_union+0x384>
    bbdc:	movw	r0, #0
    bbe0:	movt	r0, #0
    bbe4:	bl	0 <printf>
    bbe8:	str	r0, [sp, #124]	; 0x7c
    bbec:	b	c2a0 <test_mixed_type_union+0xa34>
    bbf0:	ldr	r0, [fp, #-76]	; 0xffffffb4
    bbf4:	str	r0, [fp, #-84]	; 0xffffffac
    bbf8:	ldr	r0, [fp, #-84]	; 0xffffffac
    bbfc:	movw	r1, #0
    bc00:	cmp	r0, r1
    bc04:	bne	bc18 <test_mixed_type_union+0x3ac>
    bc08:	movw	r0, #0
    bc0c:	movt	r0, #0
    bc10:	bl	0 <printf>
    bc14:	str	r0, [sp, #120]	; 0x78
    bc18:	ldr	r0, [fp, #-84]	; 0xffffffac
    bc1c:	bl	cb78 <Fantasy_Rapunzel_hair_length>
    bc20:	uxth	r0, r0
    bc24:	cmp	r0, #19
    bc28:	ble	bc40 <test_mixed_type_union+0x3d4>
    bc2c:	movw	r0, #0
    bc30:	movt	r0, #0
    bc34:	bl	0 <printf>
    bc38:	str	r0, [sp, #116]	; 0x74
    bc3c:	b	c2a0 <test_mixed_type_union+0xa34>
    bc40:	ldr	r0, [fp, #-84]	; 0xffffffac
    bc44:	bl	cb78 <Fantasy_Rapunzel_hair_length>
    bc48:	uxth	r0, r0
    bc4c:	cmp	r0, #19
    bc50:	bge	bc68 <test_mixed_type_union+0x3fc>
    bc54:	movw	r0, #0
    bc58:	movt	r0, #0
    bc5c:	bl	0 <printf>
    bc60:	str	r0, [sp, #112]	; 0x70
    bc64:	b	c2a0 <test_mixed_type_union+0xa34>
    bc68:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bc6c:	bl	cbc8 <Fantasy_Movie_cameo_type>
    bc70:	and	r0, r0, #255	; 0xff
    bc74:	cmp	r0, #8
    bc78:	beq	bc90 <test_mixed_type_union+0x424>
    bc7c:	movw	r0, #0
    bc80:	movt	r0, #0
    bc84:	bl	0 <printf>
    bc88:	str	r0, [sp, #108]	; 0x6c
    bc8c:	b	c2a0 <test_mixed_type_union+0xa34>
    bc90:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bc94:	bl	ccb0 <Fantasy_Movie_cameo>
    bc98:	str	r0, [fp, #-84]	; 0xffffffac
    bc9c:	ldr	r0, [fp, #-84]	; 0xffffffac
    bca0:	movw	lr, #0
    bca4:	cmp	r0, lr
    bca8:	bne	bcc0 <test_mixed_type_union+0x454>
    bcac:	movw	r0, #0
    bcb0:	movt	r0, #0
    bcb4:	bl	0 <printf>
    bcb8:	str	r0, [sp, #104]	; 0x68
    bcbc:	b	c2a0 <test_mixed_type_union+0xa34>
    bcc0:	ldr	r0, [fp, #-84]	; 0xffffffac
    bcc4:	bl	cb78 <Fantasy_Rapunzel_hair_length>
    bcc8:	uxth	r0, r0
    bccc:	cmp	r0, #22
    bcd0:	beq	bce8 <test_mixed_type_union+0x47c>
    bcd4:	movw	r0, #0
    bcd8:	movt	r0, #0
    bcdc:	bl	0 <printf>
    bce0:	str	r0, [sp, #100]	; 0x64
    bce4:	b	c2a0 <test_mixed_type_union+0xa34>
    bce8:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bcec:	bl	cda8 <Fantasy_Movie_antagonist_type>
    bcf0:	and	r0, r0, #255	; 0xff
    bcf4:	cmp	r0, #2
    bcf8:	beq	bd10 <test_mixed_type_union+0x4a4>
    bcfc:	movw	r0, #0
    bd00:	movt	r0, #0
    bd04:	bl	0 <printf>
    bd08:	str	r0, [sp, #96]	; 0x60
    bd0c:	b	c2a0 <test_mixed_type_union+0xa34>
    bd10:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bd14:	bl	ce90 <Fantasy_Movie_antagonist>
    bd18:	str	r0, [fp, #-88]	; 0xffffffa8
    bd1c:	ldr	r0, [fp, #-88]	; 0xffffffa8
    bd20:	movw	lr, #0
    bd24:	cmp	r0, lr
    bd28:	beq	bd3c <test_mixed_type_union+0x4d0>
    bd2c:	ldr	r0, [fp, #-88]	; 0xffffffa8
    bd30:	bl	cf88 <Fantasy_Attacker_sword_attack_damage>
    bd34:	cmp	r0, #42	; 0x2a
    bd38:	beq	bd50 <test_mixed_type_union+0x4e4>
    bd3c:	movw	r0, #0
    bd40:	movt	r0, #0
    bd44:	bl	0 <printf>
    bd48:	str	r0, [sp, #92]	; 0x5c
    bd4c:	b	c2a0 <test_mixed_type_union+0xa34>
    bd50:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bd54:	bl	d068 <Fantasy_Movie_side_kick_type>
    bd58:	and	r0, r0, #255	; 0xff
    bd5c:	cmp	r0, #11
    bd60:	beq	bd78 <test_mixed_type_union+0x50c>
    bd64:	movw	r0, #0
    bd68:	movt	r0, #0
    bd6c:	bl	0 <printf>
    bd70:	str	r0, [sp, #88]	; 0x58
    bd74:	b	c2a0 <test_mixed_type_union+0xa34>
    bd78:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bd7c:	bl	d1a4 <Fantasy_Movie_side_kick>
    bd80:	bl	d150 <flatbuffers_string_cast_from_generic>
    bd84:	str	r0, [fp, #-92]	; 0xffffffa4
    bd88:	ldr	r0, [fp, #-92]	; 0xffffffa4
    bd8c:	movw	lr, #0
    bd90:	cmp	r0, lr
    bd94:	bne	bdac <test_mixed_type_union+0x540>
    bd98:	movw	r0, #0
    bd9c:	movt	r0, #0
    bda0:	bl	0 <printf>
    bda4:	str	r0, [sp, #84]	; 0x54
    bda8:	b	c2a0 <test_mixed_type_union+0xa34>
    bdac:	ldr	r0, [fp, #-92]	; 0xffffffa4
    bdb0:	movw	r1, #0
    bdb4:	movt	r1, #0
    bdb8:	bl	0 <strcmp>
    bdbc:	cmp	r0, #0
    bdc0:	beq	bddc <test_mixed_type_union+0x570>
    bdc4:	ldr	r1, [fp, #-92]	; 0xffffffa4
    bdc8:	movw	r0, #0
    bdcc:	movt	r0, #0
    bdd0:	bl	0 <printf>
    bdd4:	str	r0, [sp, #80]	; 0x50
    bdd8:	b	c2a0 <test_mixed_type_union+0xa34>
    bddc:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bde0:	bl	d29c <Fantasy_Movie_side_kick_as_string>
    bde4:	str	r0, [fp, #-92]	; 0xffffffa4
    bde8:	ldr	r0, [fp, #-92]	; 0xffffffa4
    bdec:	movw	lr, #0
    bdf0:	cmp	r0, lr
    bdf4:	bne	be0c <test_mixed_type_union+0x5a0>
    bdf8:	movw	r0, #0
    bdfc:	movt	r0, #0
    be00:	bl	0 <printf>
    be04:	str	r0, [sp, #76]	; 0x4c
    be08:	b	c2a0 <test_mixed_type_union+0xa34>
    be0c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    be10:	movw	r1, #0
    be14:	movt	r1, #0
    be18:	bl	0 <strcmp>
    be1c:	cmp	r0, #0
    be20:	beq	be3c <test_mixed_type_union+0x5d0>
    be24:	ldr	r1, [fp, #-92]	; 0xffffffa4
    be28:	movw	r0, #0
    be2c:	movt	r0, #0
    be30:	bl	0 <printf>
    be34:	str	r0, [sp, #72]	; 0x48
    be38:	b	c2a0 <test_mixed_type_union+0xa34>
    be3c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    be40:	sub	r0, fp, #124	; 0x7c
    be44:	bl	d2c0 <Fantasy_Movie_side_kick_union>
    be48:	vldr	d16, [fp, #-124]	; 0xffffff84
    be4c:	vstr	d16, [fp, #-80]	; 0xffffffb0
    be50:	ldr	r0, [fp, #-80]	; 0xffffffb0
    be54:	ldr	r1, [fp, #-76]	; 0xffffffb4
    be58:	bl	d324 <flatbuffers_string_cast_from_union>
    be5c:	str	r0, [fp, #-92]	; 0xffffffa4
    be60:	ldr	r0, [fp, #-92]	; 0xffffffa4
    be64:	movw	r1, #0
    be68:	movt	r1, #0
    be6c:	bl	0 <strcmp>
    be70:	cmp	r0, #0
    be74:	beq	be90 <test_mixed_type_union+0x624>
    be78:	ldr	r1, [fp, #-92]	; 0xffffffa4
    be7c:	movw	r0, #0
    be80:	movt	r0, #0
    be84:	bl	0 <printf>
    be88:	str	r0, [sp, #68]	; 0x44
    be8c:	b	c2a0 <test_mixed_type_union+0xa34>
    be90:	ldr	r1, [fp, #-60]	; 0xffffffc4
    be94:	sub	r0, fp, #132	; 0x84
    be98:	bl	d348 <Fantasy_Movie_characters_union>
    be9c:	vldr	d16, [fp, #-132]	; 0xffffff7c
    bea0:	vstr	d16, [fp, #-72]	; 0xffffffb8
    bea4:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bea8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    beac:	sub	r0, fp, #140	; 0x8c
    beb0:	mov	r3, #0
    beb4:	bl	d3d8 <Fantasy_Character_union_vec_at>
    beb8:	ldr	r0, [fp, #-140]	; 0xffffff74
    bebc:	str	r0, [fp, #-80]	; 0xffffffb0
    bec0:	ldr	r0, [fp, #-136]	; 0xffffff78
    bec4:	str	r0, [fp, #-76]	; 0xffffffb4
    bec8:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    becc:	cmp	r0, #8
    bed0:	beq	bee8 <test_mixed_type_union+0x67c>
    bed4:	movw	r0, #0
    bed8:	movt	r0, #0
    bedc:	bl	0 <printf>
    bee0:	str	r0, [sp, #64]	; 0x40
    bee4:	b	c2a0 <test_mixed_type_union+0xa34>
    bee8:	ldr	r1, [fp, #-72]	; 0xffffffb8
    beec:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bef0:	sub	r0, fp, #148	; 0x94
    bef4:	mov	r3, #1
    bef8:	bl	d3d8 <Fantasy_Character_union_vec_at>
    befc:	ldr	r0, [fp, #-148]	; 0xffffff6c
    bf00:	str	r0, [fp, #-80]	; 0xffffffb0
    bf04:	ldr	r0, [fp, #-144]	; 0xffffff70
    bf08:	str	r0, [fp, #-76]	; 0xffffffb4
    bf0c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bf10:	cmp	r0, #2
    bf14:	beq	bf2c <test_mixed_type_union+0x6c0>
    bf18:	movw	r0, #0
    bf1c:	movt	r0, #0
    bf20:	bl	0 <printf>
    bf24:	str	r0, [sp, #60]	; 0x3c
    bf28:	b	c2a0 <test_mixed_type_union+0xa34>
    bf2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    bf30:	str	r0, [fp, #-88]	; 0xffffffa8
    bf34:	ldr	r0, [fp, #-88]	; 0xffffffa8
    bf38:	bl	cf88 <Fantasy_Attacker_sword_attack_damage>
    bf3c:	cmp	r0, #42	; 0x2a
    bf40:	beq	bf58 <test_mixed_type_union+0x6ec>
    bf44:	movw	r0, #0
    bf48:	movt	r0, #0
    bf4c:	bl	0 <printf>
    bf50:	str	r0, [sp, #56]	; 0x38
    bf54:	b	c2a0 <test_mixed_type_union+0xa34>
    bf58:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bf5c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bf60:	sub	r0, fp, #156	; 0x9c
    bf64:	mov	r3, #2
    bf68:	bl	d3d8 <Fantasy_Character_union_vec_at>
    bf6c:	ldr	r0, [fp, #-156]	; 0xffffff64
    bf70:	str	r0, [fp, #-80]	; 0xffffffb0
    bf74:	ldr	r0, [fp, #-152]	; 0xffffff68
    bf78:	str	r0, [fp, #-76]	; 0xffffffb4
    bf7c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bf80:	cmp	r0, #2
    bf84:	beq	bf9c <test_mixed_type_union+0x730>
    bf88:	movw	r0, #0
    bf8c:	movt	r0, #0
    bf90:	bl	0 <printf>
    bf94:	str	r0, [sp, #52]	; 0x34
    bf98:	b	c2a0 <test_mixed_type_union+0xa34>
    bf9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    bfa0:	str	r0, [fp, #-88]	; 0xffffffa8
    bfa4:	ldr	r0, [fp, #-88]	; 0xffffffa8
    bfa8:	bl	cf88 <Fantasy_Attacker_sword_attack_damage>
    bfac:	cmp	r0, #1
    bfb0:	beq	bfc8 <test_mixed_type_union+0x75c>
    bfb4:	movw	r0, #0
    bfb8:	movt	r0, #0
    bfbc:	bl	0 <printf>
    bfc0:	str	r0, [sp, #48]	; 0x30
    bfc4:	b	c2a0 <test_mixed_type_union+0xa34>
    bfc8:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bfcc:	bl	d494 <Fantasy_Movie_characters_type>
    bfd0:	movw	r1, #3
    bfd4:	bl	b524 <flatbuffers_union_type_vec_at>
    bfd8:	and	r0, r0, #255	; 0xff
    bfdc:	cmp	r0, #11
    bfe0:	beq	bff8 <test_mixed_type_union+0x78c>
    bfe4:	movw	r0, #0
    bfe8:	movt	r0, #0
    bfec:	bl	0 <printf>
    bff0:	str	r0, [sp, #44]	; 0x2c
    bff4:	b	c2a0 <test_mixed_type_union+0xa34>
    bff8:	ldr	r0, [fp, #-72]	; 0xffffffb8
    bffc:	ldr	r1, [fp, #-68]	; 0xffffffbc
    c000:	mov	r2, #3
    c004:	bl	d590 <Fantasy_Character_union_vec_at_as_string>
    c008:	str	r0, [fp, #-92]	; 0xffffffa4
    c00c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    c010:	movw	r1, #0
    c014:	cmp	r0, r1
    c018:	beq	c034 <test_mixed_type_union+0x7c8>
    c01c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    c020:	movw	r1, #0
    c024:	movt	r1, #0
    c028:	bl	0 <strcmp>
    c02c:	cmp	r0, #0
    c030:	beq	c048 <test_mixed_type_union+0x7dc>
    c034:	movw	r0, #0
    c038:	movt	r0, #0
    c03c:	bl	0 <printf>
    c040:	str	r0, [sp, #40]	; 0x28
    c044:	b	c2a0 <test_mixed_type_union+0xa34>
    c048:	ldr	r1, [fp, #-72]	; 0xffffffb8
    c04c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    c050:	sub	r0, fp, #164	; 0xa4
    c054:	mov	r3, #3
    c058:	bl	d3d8 <Fantasy_Character_union_vec_at>
    c05c:	ldr	r0, [fp, #-164]	; 0xffffff5c
    c060:	str	r0, [fp, #-80]	; 0xffffffb0
    c064:	ldr	r0, [fp, #-160]	; 0xffffff60
    c068:	str	r0, [fp, #-76]	; 0xffffffb4
    c06c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    c070:	cmp	r0, #11
    c074:	beq	c08c <test_mixed_type_union+0x820>
    c078:	movw	r0, #0
    c07c:	movt	r0, #0
    c080:	bl	0 <printf>
    c084:	str	r0, [sp, #36]	; 0x24
    c088:	b	c2a0 <test_mixed_type_union+0xa34>
    c08c:	ldr	r0, [fp, #-80]	; 0xffffffb0
    c090:	ldr	r1, [fp, #-76]	; 0xffffffb4
    c094:	bl	d324 <flatbuffers_string_cast_from_union>
    c098:	str	r0, [fp, #-92]	; 0xffffffa4
    c09c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    c0a0:	movw	r1, #0
    c0a4:	cmp	r0, r1
    c0a8:	beq	c0c4 <test_mixed_type_union+0x858>
    c0ac:	ldr	r0, [fp, #-92]	; 0xffffffa4
    c0b0:	movw	r1, #0
    c0b4:	movt	r1, #0
    c0b8:	bl	0 <strcmp>
    c0bc:	cmp	r0, #0
    c0c0:	beq	c0d8 <test_mixed_type_union+0x86c>
    c0c4:	movw	r0, #0
    c0c8:	movt	r0, #0
    c0cc:	bl	0 <printf>
    c0d0:	str	r0, [sp, #32]
    c0d4:	b	c2a0 <test_mixed_type_union+0xa34>
    c0d8:	ldr	r1, [fp, #-72]	; 0xffffffb8
    c0dc:	ldr	r2, [fp, #-68]	; 0xffffffbc
    c0e0:	sub	r0, fp, #172	; 0xac
    c0e4:	mov	r3, #4
    c0e8:	bl	d3d8 <Fantasy_Character_union_vec_at>
    c0ec:	ldr	r0, [fp, #-172]	; 0xffffff54
    c0f0:	str	r0, [fp, #-80]	; 0xffffffb0
    c0f4:	ldr	r0, [fp, #-168]	; 0xffffff58
    c0f8:	str	r0, [fp, #-76]	; 0xffffffb4
    c0fc:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    c100:	cmp	r0, #9
    c104:	beq	c11c <test_mixed_type_union+0x8b0>
    c108:	movw	r0, #0
    c10c:	movt	r0, #0
    c110:	bl	0 <printf>
    c114:	str	r0, [sp, #28]
    c118:	b	c2a0 <test_mixed_type_union+0xa34>
    c11c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    c120:	ldr	r2, [fp, #-68]	; 0xffffffbc
    c124:	sub	r0, fp, #180	; 0xb4
    c128:	mov	r3, #5
    c12c:	bl	d3d8 <Fantasy_Character_union_vec_at>
    c130:	ldr	r0, [fp, #-180]	; 0xffffff4c
    c134:	str	r0, [fp, #-80]	; 0xffffffb0
    c138:	ldr	r0, [fp, #-176]	; 0xffffff50
    c13c:	str	r0, [fp, #-76]	; 0xffffffb4
    c140:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    c144:	cmp	r0, #9
    c148:	beq	c160 <test_mixed_type_union+0x8f4>
    c14c:	movw	r0, #0
    c150:	movt	r0, #0
    c154:	bl	0 <printf>
    c158:	str	r0, [sp, #24]
    c15c:	b	c2a0 <test_mixed_type_union+0xa34>
    c160:	ldr	r1, [fp, #-72]	; 0xffffffb8
    c164:	ldr	r2, [fp, #-68]	; 0xffffffbc
    c168:	sub	r0, fp, #188	; 0xbc
    c16c:	mov	r3, #6
    c170:	bl	d3d8 <Fantasy_Character_union_vec_at>
    c174:	ldr	r0, [fp, #-188]	; 0xffffff44
    c178:	str	r0, [fp, #-80]	; 0xffffffb0
    c17c:	ldr	r0, [fp, #-184]	; 0xffffff48
    c180:	str	r0, [fp, #-76]	; 0xffffffb4
    c184:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    c188:	cmp	r0, #9
    c18c:	beq	c1a4 <test_mixed_type_union+0x938>
    c190:	movw	r0, #0
    c194:	movt	r0, #0
    c198:	bl	0 <printf>
    c19c:	str	r0, [sp, #20]
    c1a0:	b	c2a0 <test_mixed_type_union+0xa34>
    c1a4:	ldr	r1, [fp, #-72]	; 0xffffffb8
    c1a8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    c1ac:	sub	r0, fp, #196	; 0xc4
    c1b0:	mov	r3, #7
    c1b4:	bl	d3d8 <Fantasy_Character_union_vec_at>
    c1b8:	ldr	r0, [fp, #-196]	; 0xffffff3c
    c1bc:	str	r0, [fp, #-80]	; 0xffffffb0
    c1c0:	ldr	r0, [fp, #-192]	; 0xffffff40
    c1c4:	str	r0, [fp, #-76]	; 0xffffffb4
    c1c8:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    c1cc:	cmp	r0, #9
    c1d0:	beq	c1e8 <test_mixed_type_union+0x97c>
    c1d4:	movw	r0, #0
    c1d8:	movt	r0, #0
    c1dc:	bl	0 <printf>
    c1e0:	str	r0, [sp, #16]
    c1e4:	b	c2a0 <test_mixed_type_union+0xa34>
    c1e8:	ldr	r1, [fp, #-72]	; 0xffffffb8
    c1ec:	ldr	r2, [fp, #-68]	; 0xffffffbc
    c1f0:	sub	r0, fp, #204	; 0xcc
    c1f4:	mov	r3, #8
    c1f8:	bl	d3d8 <Fantasy_Character_union_vec_at>
    c1fc:	ldr	r0, [fp, #-204]	; 0xffffff34
    c200:	str	r0, [fp, #-80]	; 0xffffffb0
    c204:	ldr	r0, [fp, #-200]	; 0xffffff38
    c208:	str	r0, [fp, #-76]	; 0xffffffb4
    c20c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    c210:	cmp	r0, #11
    c214:	beq	c22c <test_mixed_type_union+0x9c0>
    c218:	movw	r0, #0
    c21c:	movt	r0, #0
    c220:	bl	0 <printf>
    c224:	str	r0, [sp, #12]
    c228:	b	c2a0 <test_mixed_type_union+0xa34>
    c22c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    c230:	ldr	r2, [fp, #-68]	; 0xffffffbc
    c234:	sub	r0, fp, #212	; 0xd4
    c238:	mov	r3, #9
    c23c:	bl	d3d8 <Fantasy_Character_union_vec_at>
    c240:	ldr	r0, [fp, #-212]	; 0xffffff2c
    c244:	str	r0, [fp, #-80]	; 0xffffffb0
    c248:	ldr	r0, [fp, #-208]	; 0xffffff30
    c24c:	str	r0, [fp, #-76]	; 0xffffffb4
    c250:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    c254:	cmp	r0, #11
    c258:	beq	c270 <test_mixed_type_union+0xa04>
    c25c:	movw	r0, #0
    c260:	movt	r0, #0
    c264:	bl	0 <printf>
    c268:	str	r0, [sp, #8]
    c26c:	b	c2a0 <test_mixed_type_union+0xa34>
    c270:	ldr	r0, [fp, #-72]	; 0xffffffb8
    c274:	ldr	r1, [fp, #-68]	; 0xffffffbc
    c278:	bl	d5bc <Fantasy_Character_union_vec_len>
    c27c:	cmp	r0, #10
    c280:	beq	c298 <test_mixed_type_union+0xa2c>
    c284:	movw	r0, #0
    c288:	movt	r0, #0
    c28c:	bl	0 <printf>
    c290:	str	r0, [sp, #4]
    c294:	b	c2a0 <test_mixed_type_union+0xa34>
    c298:	movw	r0, #0
    c29c:	str	r0, [fp, #-32]	; 0xffffffe0
    c2a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    c2a4:	bl	0 <flatcc_builder_aligned_free>
    c2a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    c2ac:	str	r0, [fp, #-12]
    c2b0:	ldr	r0, [fp, #-12]
    c2b4:	sub	sp, fp, #8
    c2b8:	pop	{r4, r5, fp, pc}

0000c2bc <Fantasy_Movie_start_as_root>:
    c2bc:	push	{fp, lr}
    c2c0:	mov	fp, sp
    c2c4:	sub	sp, sp, #8
    c2c8:	str	r0, [sp, #4]
    c2cc:	ldr	r0, [sp, #4]
    c2d0:	movw	r1, #0
    c2d4:	movt	r1, #0
    c2d8:	bl	1818 <flatbuffers_buffer_start>
    c2dc:	cmp	r0, #0
    c2e0:	beq	c2f0 <Fantasy_Movie_start_as_root+0x34>
    c2e4:	mvn	r0, #0
    c2e8:	str	r0, [sp]
    c2ec:	b	c2fc <Fantasy_Movie_start_as_root+0x40>
    c2f0:	ldr	r0, [sp, #4]
    c2f4:	bl	137f0 <Fantasy_Movie_start>
    c2f8:	str	r0, [sp]
    c2fc:	ldr	r0, [sp]
    c300:	mov	sp, fp
    c304:	pop	{fp, pc}

0000c308 <Fantasy_BookReader_create>:
    c308:	push	{fp, lr}
    c30c:	mov	fp, sp
    c310:	sub	sp, sp, #24
    c314:	str	r0, [fp, #-8]
    c318:	str	r1, [sp, #12]
    c31c:	ldr	r0, [fp, #-8]
    c320:	bl	13814 <Fantasy_BookReader_start>
    c324:	str	r0, [sp, #8]
    c328:	ldr	r0, [sp, #8]
    c32c:	movw	r1, #0
    c330:	cmp	r0, r1
    c334:	bne	c344 <Fantasy_BookReader_create+0x3c>
    c338:	movw	r0, #0
    c33c:	str	r0, [fp, #-4]
    c340:	b	c364 <Fantasy_BookReader_create+0x5c>
    c344:	ldr	r0, [sp, #8]
    c348:	ldr	r1, [sp, #12]
    c34c:	bl	13840 <Fantasy_BookReader_assign_to_pe>
    c350:	ldr	r1, [fp, #-8]
    c354:	str	r0, [sp, #4]
    c358:	mov	r0, r1
    c35c:	bl	13874 <Fantasy_BookReader_end_pe>
    c360:	str	r0, [fp, #-4]
    c364:	ldr	r0, [fp, #-4]
    c368:	mov	sp, fp
    c36c:	pop	{fp, pc}

0000c370 <Fantasy_Rapunzel_create>:
    c370:	push	{fp, lr}
    c374:	mov	fp, sp
    c378:	sub	sp, sp, #24
    c37c:	str	r0, [fp, #-8]
    c380:	strh	r1, [fp, #-10]
    c384:	ldr	r0, [fp, #-8]
    c388:	bl	13894 <Fantasy_Rapunzel_start>
    c38c:	str	r0, [sp, #8]
    c390:	ldr	r0, [sp, #8]
    c394:	movw	r1, #0
    c398:	cmp	r0, r1
    c39c:	bne	c3ac <Fantasy_Rapunzel_create+0x3c>
    c3a0:	movw	r0, #0
    c3a4:	str	r0, [fp, #-4]
    c3a8:	b	c3cc <Fantasy_Rapunzel_create+0x5c>
    c3ac:	ldr	r0, [sp, #8]
    c3b0:	ldrh	r1, [fp, #-10]
    c3b4:	bl	138c0 <Fantasy_Rapunzel_assign_to_pe>
    c3b8:	ldr	r1, [fp, #-8]
    c3bc:	str	r0, [sp, #4]
    c3c0:	mov	r0, r1
    c3c4:	bl	138f4 <Fantasy_Rapunzel_end_pe>
    c3c8:	str	r0, [fp, #-4]
    c3cc:	ldr	r0, [fp, #-4]
    c3d0:	mov	sp, fp
    c3d4:	pop	{fp, pc}

0000c3d8 <Fantasy_Character_as_Rapunzel>:
    c3d8:	sub	sp, sp, #4
    c3dc:	str	r1, [sp]
    c3e0:	movw	r1, #8
    c3e4:	strb	r1, [r0]
    c3e8:	ldr	r1, [sp]
    c3ec:	str	r1, [r0, #4]
    c3f0:	add	sp, sp, #4
    c3f4:	bx	lr

0000c3f8 <Fantasy_Movie_main_character_Rapunzel_create>:
    c3f8:	push	{fp, lr}
    c3fc:	mov	fp, sp
    c400:	sub	sp, sp, #32
    c404:	str	r0, [fp, #-4]
    c408:	strh	r1, [fp, #-6]
    c40c:	ldr	r0, [fp, #-4]
    c410:	ldrh	r1, [fp, #-6]
    c414:	bl	c370 <Fantasy_Rapunzel_create>
    c418:	str	r0, [fp, #-12]
    c41c:	ldr	r0, [fp, #-12]
    c420:	cmp	r0, #0
    c424:	beq	c458 <Fantasy_Movie_main_character_Rapunzel_create+0x60>
    c428:	ldr	r0, [fp, #-4]
    c42c:	ldr	r1, [fp, #-12]
    c430:	add	r2, sp, #12
    c434:	str	r0, [sp, #8]
    c438:	mov	r0, r2
    c43c:	bl	c3d8 <Fantasy_Character_as_Rapunzel>
    c440:	ldr	r1, [sp, #12]
    c444:	ldr	r2, [sp, #16]
    c448:	ldr	r0, [sp, #8]
    c44c:	bl	13914 <Fantasy_Movie_main_character_add>
    c450:	str	r0, [sp, #4]
    c454:	b	c464 <Fantasy_Movie_main_character_Rapunzel_create+0x6c>
    c458:	mvn	r0, #0
    c45c:	str	r0, [sp, #4]
    c460:	b	c464 <Fantasy_Movie_main_character_Rapunzel_create+0x6c>
    c464:	ldr	r0, [sp, #4]
    c468:	mov	sp, fp
    c46c:	pop	{fp, pc}

0000c470 <Fantasy_Movie_cameo_Rapunzel_add>:
    c470:	push	{fp, lr}
    c474:	mov	fp, sp
    c478:	sub	sp, sp, #24
    c47c:	str	r0, [fp, #-4]
    c480:	str	r1, [fp, #-8]
    c484:	ldr	r0, [fp, #-4]
    c488:	ldr	r1, [fp, #-8]
    c48c:	add	r2, sp, #8
    c490:	str	r0, [sp, #4]
    c494:	mov	r0, r2
    c498:	bl	c3d8 <Fantasy_Character_as_Rapunzel>
    c49c:	ldr	r1, [sp, #8]
    c4a0:	ldr	r2, [sp, #12]
    c4a4:	ldr	r0, [sp, #4]
    c4a8:	bl	139d8 <Fantasy_Movie_cameo_add>
    c4ac:	mov	sp, fp
    c4b0:	pop	{fp, pc}

0000c4b4 <Fantasy_Attacker_create>:
    c4b4:	push	{fp, lr}
    c4b8:	mov	fp, sp
    c4bc:	sub	sp, sp, #16
    c4c0:	str	r0, [sp, #8]
    c4c4:	str	r1, [sp, #4]
    c4c8:	ldr	r0, [sp, #8]
    c4cc:	bl	13a9c <Fantasy_Attacker_start>
    c4d0:	cmp	r0, #0
    c4d4:	bne	c4ec <Fantasy_Attacker_create+0x38>
    c4d8:	ldr	r0, [sp, #8]
    c4dc:	ldr	r1, [sp, #4]
    c4e0:	bl	13ac0 <Fantasy_Attacker_sword_attack_damage_add>
    c4e4:	cmp	r0, #0
    c4e8:	beq	c4f8 <Fantasy_Attacker_create+0x44>
    c4ec:	movw	r0, #0
    c4f0:	str	r0, [fp, #-4]
    c4f4:	b	c504 <Fantasy_Attacker_create+0x50>
    c4f8:	ldr	r0, [sp, #8]
    c4fc:	bl	13b44 <Fantasy_Attacker_end>
    c500:	str	r0, [fp, #-4]
    c504:	ldr	r0, [fp, #-4]
    c508:	mov	sp, fp
    c50c:	pop	{fp, pc}

0000c510 <Fantasy_Movie_antagonist_MuLan_add>:
    c510:	push	{fp, lr}
    c514:	mov	fp, sp
    c518:	sub	sp, sp, #24
    c51c:	str	r0, [fp, #-4]
    c520:	str	r1, [fp, #-8]
    c524:	ldr	r0, [fp, #-4]
    c528:	ldr	r1, [fp, #-8]
    c52c:	add	r2, sp, #8
    c530:	str	r0, [sp, #4]
    c534:	mov	r0, r2
    c538:	bl	13c68 <Fantasy_Character_as_MuLan>
    c53c:	ldr	r1, [sp, #8]
    c540:	ldr	r2, [sp, #12]
    c544:	ldr	r0, [sp, #4]
    c548:	bl	13ba4 <Fantasy_Movie_antagonist_add>
    c54c:	mov	sp, fp
    c550:	pop	{fp, pc}

0000c554 <Fantasy_Movie_side_kick_Other_create_str>:
    c554:	push	{fp, lr}
    c558:	mov	fp, sp
    c55c:	sub	sp, sp, #16
    c560:	str	r0, [fp, #-4]
    c564:	str	r1, [sp, #8]
    c568:	ldr	r0, [fp, #-4]
    c56c:	ldr	r1, [fp, #-4]
    c570:	ldr	r2, [sp, #8]
    c574:	str	r0, [sp, #4]
    c578:	mov	r0, r1
    c57c:	mov	r1, r2
    c580:	bl	0 <flatcc_builder_create_string_str>
    c584:	ldr	r1, [sp, #4]
    c588:	str	r0, [sp]
    c58c:	mov	r0, r1
    c590:	ldr	r1, [sp]
    c594:	bl	13c88 <Fantasy_Movie_side_kick_Other_add>
    c598:	mov	sp, fp
    c59c:	pop	{fp, pc}

0000c5a0 <Fantasy_Movie_characters_start>:
    c5a0:	push	{fp, lr}
    c5a4:	mov	fp, sp
    c5a8:	sub	sp, sp, #8
    c5ac:	str	r0, [sp, #4]
    c5b0:	ldr	r0, [sp, #4]
    c5b4:	bl	0 <flatcc_builder_start_union_vector>
    c5b8:	mov	sp, fp
    c5bc:	pop	{fp, pc}

0000c5c0 <Fantasy_Movie_characters_push>:
    c5c0:	push	{fp, lr}
    c5c4:	mov	fp, sp
    c5c8:	sub	sp, sp, #16
    c5cc:	str	r1, [sp, #8]
    c5d0:	str	r2, [sp, #12]
    c5d4:	str	r0, [sp, #4]
    c5d8:	ldr	r0, [sp, #4]
    c5dc:	ldr	r1, [sp, #8]
    c5e0:	ldr	r2, [sp, #12]
    c5e4:	bl	0 <flatcc_builder_union_vector_push>
    c5e8:	mov	sp, fp
    c5ec:	pop	{fp, pc}

0000c5f0 <Fantasy_Movie_characters_MuLan_push>:
    c5f0:	push	{fp, lr}
    c5f4:	mov	fp, sp
    c5f8:	sub	sp, sp, #24
    c5fc:	str	r0, [fp, #-4]
    c600:	str	r1, [fp, #-8]
    c604:	ldr	r0, [fp, #-4]
    c608:	ldr	r1, [fp, #-8]
    c60c:	add	r2, sp, #8
    c610:	str	r0, [sp, #4]
    c614:	mov	r0, r2
    c618:	bl	13c68 <Fantasy_Character_as_MuLan>
    c61c:	ldr	r1, [sp, #8]
    c620:	ldr	r2, [sp, #12]
    c624:	ldr	r0, [sp, #4]
    c628:	bl	c684 <Fantasy_Character_vec_push>
    c62c:	mov	sp, fp
    c630:	pop	{fp, pc}

0000c634 <Fantasy_Movie_characters_MuLan_push_create>:
    c634:	push	{fp, lr}
    c638:	mov	fp, sp
    c63c:	sub	sp, sp, #24
    c640:	str	r0, [fp, #-4]
    c644:	str	r1, [fp, #-8]
    c648:	ldr	r0, [fp, #-4]
    c64c:	ldr	r1, [fp, #-8]
    c650:	str	r0, [sp, #4]
    c654:	bl	c4b4 <Fantasy_Attacker_create>
    c658:	add	r1, sp, #8
    c65c:	str	r0, [sp]
    c660:	mov	r0, r1
    c664:	ldr	r1, [sp]
    c668:	bl	13c68 <Fantasy_Character_as_MuLan>
    c66c:	ldr	r1, [sp, #8]
    c670:	ldr	r2, [sp, #12]
    c674:	ldr	r0, [sp, #4]
    c678:	bl	c684 <Fantasy_Character_vec_push>
    c67c:	mov	sp, fp
    c680:	pop	{fp, pc}

0000c684 <Fantasy_Character_vec_push>:
    c684:	push	{fp, lr}
    c688:	mov	fp, sp
    c68c:	sub	sp, sp, #16
    c690:	str	r1, [sp, #8]
    c694:	str	r2, [sp, #12]
    c698:	str	r0, [sp, #4]
    c69c:	ldr	r0, [sp, #4]
    c6a0:	ldr	r1, [sp, #8]
    c6a4:	ldr	r2, [sp, #12]
    c6a8:	bl	0 <flatcc_builder_union_vector_push>
    c6ac:	mov	sp, fp
    c6b0:	pop	{fp, pc}

0000c6b4 <Fantasy_Character_as_Other>:
    c6b4:	sub	sp, sp, #4
    c6b8:	str	r1, [sp]
    c6bc:	movw	r1, #11
    c6c0:	strb	r1, [r0]
    c6c4:	ldr	r1, [sp]
    c6c8:	str	r1, [r0, #4]
    c6cc:	add	sp, sp, #4
    c6d0:	bx	lr

0000c6d4 <Fantasy_Movie_characters_Belle_push>:
    c6d4:	push	{fp, lr}
    c6d8:	mov	fp, sp
    c6dc:	sub	sp, sp, #24
    c6e0:	str	r0, [fp, #-4]
    c6e4:	str	r1, [fp, #-8]
    c6e8:	ldr	r0, [fp, #-4]
    c6ec:	ldr	r1, [fp, #-8]
    c6f0:	add	r2, sp, #8
    c6f4:	str	r0, [sp, #4]
    c6f8:	mov	r0, r2
    c6fc:	bl	13d90 <Fantasy_Character_as_Belle>
    c700:	ldr	r1, [sp, #8]
    c704:	ldr	r2, [sp, #12]
    c708:	ldr	r0, [sp, #4]
    c70c:	bl	c684 <Fantasy_Character_vec_push>
    c710:	mov	sp, fp
    c714:	pop	{fp, pc}

0000c718 <Fantasy_Movie_characters_Belle_push_start>:
    c718:	push	{fp, lr}
    c71c:	mov	fp, sp
    c720:	sub	sp, sp, #8
    c724:	str	r0, [sp, #4]
    c728:	ldr	r0, [sp, #4]
    c72c:	bl	13814 <Fantasy_BookReader_start>
    c730:	mov	sp, fp
    c734:	pop	{fp, pc}

0000c738 <Fantasy_Movie_characters_Belle_push_end>:
    c738:	push	{fp, lr}
    c73c:	mov	fp, sp
    c740:	sub	sp, sp, #24
    c744:	str	r0, [fp, #-4]
    c748:	ldr	r0, [fp, #-4]
    c74c:	str	r0, [sp, #8]
    c750:	bl	13db0 <Fantasy_BookReader_end>
    c754:	add	lr, sp, #12
    c758:	str	r0, [sp, #4]
    c75c:	mov	r0, lr
    c760:	ldr	r1, [sp, #4]
    c764:	bl	13d90 <Fantasy_Character_as_Belle>
    c768:	ldr	r1, [sp, #12]
    c76c:	ldr	r2, [sp, #16]
    c770:	ldr	r0, [sp, #8]
    c774:	bl	c684 <Fantasy_Character_vec_push>
    c778:	mov	sp, fp
    c77c:	pop	{fp, pc}

0000c780 <Fantasy_Movie_characters_Belle_push_create>:
    c780:	push	{fp, lr}
    c784:	mov	fp, sp
    c788:	sub	sp, sp, #24
    c78c:	str	r0, [fp, #-4]
    c790:	str	r1, [fp, #-8]
    c794:	ldr	r0, [fp, #-4]
    c798:	ldr	r1, [fp, #-8]
    c79c:	str	r0, [sp, #4]
    c7a0:	bl	c308 <Fantasy_BookReader_create>
    c7a4:	add	r1, sp, #8
    c7a8:	str	r0, [sp]
    c7ac:	mov	r0, r1
    c7b0:	ldr	r1, [sp]
    c7b4:	bl	13d90 <Fantasy_Character_as_Belle>
    c7b8:	ldr	r1, [sp, #8]
    c7bc:	ldr	r2, [sp, #12]
    c7c0:	ldr	r0, [sp, #4]
    c7c4:	bl	c684 <Fantasy_Character_vec_push>
    c7c8:	mov	sp, fp
    c7cc:	pop	{fp, pc}

0000c7d0 <Fantasy_Movie_characters_Other_push>:
    c7d0:	push	{fp, lr}
    c7d4:	mov	fp, sp
    c7d8:	sub	sp, sp, #24
    c7dc:	str	r0, [fp, #-4]
    c7e0:	str	r1, [fp, #-8]
    c7e4:	ldr	r0, [fp, #-4]
    c7e8:	ldr	r1, [fp, #-8]
    c7ec:	add	r2, sp, #8
    c7f0:	str	r0, [sp, #4]
    c7f4:	mov	r0, r2
    c7f8:	bl	c6b4 <Fantasy_Character_as_Other>
    c7fc:	ldr	r1, [sp, #8]
    c800:	ldr	r2, [sp, #12]
    c804:	ldr	r0, [sp, #4]
    c808:	bl	c684 <Fantasy_Character_vec_push>
    c80c:	mov	sp, fp
    c810:	pop	{fp, pc}

0000c814 <Fantasy_Movie_characters_Other_push_create_str>:
    c814:	push	{fp, lr}
    c818:	mov	fp, sp
    c81c:	sub	sp, sp, #24
    c820:	str	r0, [fp, #-4]
    c824:	str	r1, [fp, #-8]
    c828:	ldr	r0, [fp, #-4]
    c82c:	ldr	r1, [fp, #-8]
    c830:	str	r0, [sp, #4]
    c834:	bl	604c <flatbuffers_string_create_str>
    c838:	add	r1, sp, #8
    c83c:	str	r0, [sp]
    c840:	mov	r0, r1
    c844:	ldr	r1, [sp]
    c848:	bl	c6b4 <Fantasy_Character_as_Other>
    c84c:	ldr	r1, [sp, #8]
    c850:	ldr	r2, [sp, #12]
    c854:	ldr	r0, [sp, #4]
    c858:	bl	c684 <Fantasy_Character_vec_push>
    c85c:	mov	sp, fp
    c860:	pop	{fp, pc}

0000c864 <Fantasy_Movie_characters_end>:
    c864:	push	{fp, lr}
    c868:	mov	fp, sp
    c86c:	sub	sp, sp, #16
    c870:	str	r0, [fp, #-4]
    c874:	ldr	r0, [fp, #-4]
    c878:	add	r1, sp, #4
    c87c:	str	r0, [sp]
    c880:	mov	r0, r1
    c884:	ldr	r1, [sp]
    c888:	bl	0 <flatcc_builder_end_union_vector>
    c88c:	ldr	r1, [sp, #4]
    c890:	ldr	r2, [sp, #8]
    c894:	ldr	r0, [sp]
    c898:	bl	13dd0 <Fantasy_Movie_characters_add>
    c89c:	mov	sp, fp
    c8a0:	pop	{fp, pc}

0000c8a4 <Fantasy_Movie_end_as_root>:
    c8a4:	push	{fp, lr}
    c8a8:	mov	fp, sp
    c8ac:	sub	sp, sp, #16
    c8b0:	str	r0, [fp, #-4]
    c8b4:	ldr	r0, [fp, #-4]
    c8b8:	ldr	r1, [fp, #-4]
    c8bc:	str	r0, [sp, #8]
    c8c0:	mov	r0, r1
    c8c4:	bl	13ea4 <Fantasy_Movie_end>
    c8c8:	ldr	r1, [sp, #8]
    c8cc:	str	r0, [sp, #4]
    c8d0:	mov	r0, r1
    c8d4:	ldr	r1, [sp, #4]
    c8d8:	bl	191c <flatbuffers_buffer_end>
    c8dc:	mov	sp, fp
    c8e0:	pop	{fp, pc}

0000c8e4 <Fantasy_Movie_verify_as_root>:
    c8e4:	push	{fp, lr}
    c8e8:	mov	fp, sp
    c8ec:	sub	sp, sp, #8
    c8f0:	str	r0, [sp, #4]
    c8f4:	str	r1, [sp]
    c8f8:	ldr	r0, [sp, #4]
    c8fc:	ldr	r1, [sp]
    c900:	movw	r2, #0
    c904:	movt	r2, #0
    c908:	movw	r3, #0
    c90c:	movt	r3, #0
    c910:	bl	0 <flatcc_verify_table_as_root>
    c914:	mov	sp, fp
    c918:	pop	{fp, pc}

0000c91c <Fantasy_Movie_as_root>:
    c91c:	push	{fp, lr}
    c920:	mov	fp, sp
    c924:	sub	sp, sp, #16
    c928:	str	r0, [fp, #-4]
    c92c:	movw	r0, #0
    c930:	movt	r0, #0
    c934:	str	r0, [sp, #8]
    c938:	ldr	r0, [fp, #-4]
    c93c:	movw	r1, #0
    c940:	cmp	r0, r1
    c944:	beq	c95c <Fantasy_Movie_as_root+0x40>
    c948:	ldr	r0, [fp, #-4]
    c94c:	ldr	r1, [sp, #8]
    c950:	bl	2674 <flatbuffers_has_identifier>
    c954:	cmp	r0, #0
    c958:	bne	c968 <Fantasy_Movie_as_root+0x4c>
    c95c:	movw	r0, #0
    c960:	str	r0, [sp, #4]
    c964:	b	c988 <Fantasy_Movie_as_root+0x6c>
    c968:	ldr	r0, [fp, #-4]
    c96c:	ldr	r1, [fp, #-4]
    c970:	str	r0, [sp]
    c974:	mov	r0, r1
    c978:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    c97c:	ldr	r1, [sp]
    c980:	add	r0, r1, r0
    c984:	str	r0, [sp, #4]
    c988:	ldr	r0, [sp, #4]
    c98c:	mov	sp, fp
    c990:	pop	{fp, pc}

0000c994 <Fantasy_Movie_main_character_is_present>:
    c994:	push	{fp, lr}
    c998:	mov	fp, sp
    c99c:	sub	sp, sp, #16
    c9a0:	str	r0, [fp, #-4]
    c9a4:	movw	r0, #0
    c9a8:	strh	r0, [fp, #-6]
    c9ac:	ldr	r0, [fp, #-4]
    c9b0:	movw	r1, #0
    c9b4:	cmp	r0, r1
    c9b8:	beq	c9c4 <Fantasy_Movie_main_character_is_present+0x30>
    c9bc:	b	c9c0 <Fantasy_Movie_main_character_is_present+0x2c>
    c9c0:	b	c9e4 <Fantasy_Movie_main_character_is_present+0x50>
    c9c4:	movw	r0, #0
    c9c8:	movt	r0, #0
    c9cc:	movw	r1, #0
    c9d0:	movt	r1, #0
    c9d4:	movw	r2, #819	; 0x333
    c9d8:	movw	r3, #0
    c9dc:	movt	r3, #0
    c9e0:	bl	0 <__assert_fail>
    c9e4:	mov	r0, #1
    c9e8:	strh	r0, [sp, #8]
    c9ec:	ldr	r0, [fp, #-4]
    c9f0:	str	r0, [sp]
    c9f4:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    c9f8:	ldr	lr, [sp]
    c9fc:	sub	r0, lr, r0
    ca00:	str	r0, [sp, #4]
    ca04:	ldr	r0, [sp, #4]
    ca08:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    ca0c:	ldrh	lr, [sp, #8]
    ca10:	add	lr, lr, #3
    ca14:	lsl	lr, lr, #1
    ca18:	cmp	r0, lr
    ca1c:	bcc	ca38 <Fantasy_Movie_main_character_is_present+0xa4>
    ca20:	ldr	r0, [sp, #4]
    ca24:	ldrh	r1, [sp, #8]
    ca28:	add	r0, r0, r1, lsl #1
    ca2c:	add	r0, r0, #4
    ca30:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    ca34:	strh	r0, [fp, #-6]
    ca38:	ldrh	r0, [fp, #-6]
    ca3c:	cmp	r0, #0
    ca40:	movw	r0, #0
    ca44:	movne	r0, #1
    ca48:	and	r0, r0, #1
    ca4c:	mov	sp, fp
    ca50:	pop	{fp, pc}

0000ca54 <Fantasy_Movie_characters_is_present>:
    ca54:	push	{fp, lr}
    ca58:	mov	fp, sp
    ca5c:	sub	sp, sp, #16
    ca60:	str	r0, [fp, #-4]
    ca64:	movw	r0, #0
    ca68:	strh	r0, [fp, #-6]
    ca6c:	ldr	r0, [fp, #-4]
    ca70:	movw	r1, #0
    ca74:	cmp	r0, r1
    ca78:	beq	ca84 <Fantasy_Movie_characters_is_present+0x30>
    ca7c:	b	ca80 <Fantasy_Movie_characters_is_present+0x2c>
    ca80:	b	caa4 <Fantasy_Movie_characters_is_present+0x50>
    ca84:	movw	r0, #0
    ca88:	movt	r0, #0
    ca8c:	movw	r1, #0
    ca90:	movt	r1, #0
    ca94:	movw	r2, #823	; 0x337
    ca98:	movw	r3, #0
    ca9c:	movt	r3, #0
    caa0:	bl	0 <__assert_fail>
    caa4:	mov	r0, #9
    caa8:	strh	r0, [sp, #8]
    caac:	ldr	r0, [fp, #-4]
    cab0:	str	r0, [sp]
    cab4:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    cab8:	ldr	lr, [sp]
    cabc:	sub	r0, lr, r0
    cac0:	str	r0, [sp, #4]
    cac4:	ldr	r0, [sp, #4]
    cac8:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    cacc:	ldrh	lr, [sp, #8]
    cad0:	add	lr, lr, #3
    cad4:	lsl	lr, lr, #1
    cad8:	cmp	r0, lr
    cadc:	bcc	caf8 <Fantasy_Movie_characters_is_present+0xa4>
    cae0:	ldr	r0, [sp, #4]
    cae4:	ldrh	r1, [sp, #8]
    cae8:	add	r0, r0, r1, lsl #1
    caec:	add	r0, r0, #4
    caf0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    caf4:	strh	r0, [fp, #-6]
    caf8:	ldrh	r0, [fp, #-6]
    cafc:	cmp	r0, #0
    cb00:	movw	r0, #0
    cb04:	movne	r0, #1
    cb08:	and	r0, r0, #1
    cb0c:	mov	sp, fp
    cb10:	pop	{fp, pc}

0000cb14 <Fantasy_Movie_main_character_union>:
    cb14:	push	{fp, lr}
    cb18:	mov	fp, sp
    cb1c:	sub	sp, sp, #8
    cb20:	str	r1, [sp, #4]
    cb24:	mov	r1, r0
    cb28:	str	r0, [sp]
    cb2c:	mov	r0, r1
    cb30:	movw	r1, #0
    cb34:	and	r1, r1, #255	; 0xff
    cb38:	movw	r2, #8
    cb3c:	bl	0 <memset>
    cb40:	ldr	r0, [sp, #4]
    cb44:	bl	13f04 <Fantasy_Movie_main_character_type>
    cb48:	ldr	r1, [sp]
    cb4c:	strb	r0, [r1]
    cb50:	ldrb	r0, [r1]
    cb54:	cmp	r0, #0
    cb58:	bne	cb60 <Fantasy_Movie_main_character_union+0x4c>
    cb5c:	b	cb70 <Fantasy_Movie_main_character_union+0x5c>
    cb60:	ldr	r0, [sp, #4]
    cb64:	bl	13fec <Fantasy_Movie_main_character>
    cb68:	ldr	lr, [sp]
    cb6c:	str	r0, [lr, #4]
    cb70:	mov	sp, fp
    cb74:	pop	{fp, pc}

0000cb78 <Fantasy_Rapunzel_hair_length>:
    cb78:	push	{fp, lr}
    cb7c:	mov	fp, sp
    cb80:	sub	sp, sp, #8
    cb84:	str	r0, [sp, #4]
    cb88:	ldr	r0, [sp, #4]
    cb8c:	movw	r1, #0
    cb90:	cmp	r0, r1
    cb94:	beq	cbac <Fantasy_Rapunzel_hair_length+0x34>
    cb98:	ldr	r0, [sp, #4]
    cb9c:	bl	1098c <flatbuffers_uint16_read_from_pe>
    cba0:	uxth	r0, r0
    cba4:	str	r0, [sp]
    cba8:	b	cbb8 <Fantasy_Rapunzel_hair_length+0x40>
    cbac:	movw	r0, #0
    cbb0:	str	r0, [sp]
    cbb4:	b	cbb8 <Fantasy_Rapunzel_hair_length+0x40>
    cbb8:	ldr	r0, [sp]
    cbbc:	uxth	r0, r0
    cbc0:	mov	sp, fp
    cbc4:	pop	{fp, pc}

0000cbc8 <Fantasy_Movie_cameo_type>:
    cbc8:	push	{fp, lr}
    cbcc:	mov	fp, sp
    cbd0:	sub	sp, sp, #24
    cbd4:	str	r0, [fp, #-4]
    cbd8:	movw	r0, #0
    cbdc:	strh	r0, [fp, #-6]
    cbe0:	ldr	r0, [fp, #-4]
    cbe4:	movw	r1, #0
    cbe8:	cmp	r0, r1
    cbec:	beq	cbf8 <Fantasy_Movie_cameo_type+0x30>
    cbf0:	b	cbf4 <Fantasy_Movie_cameo_type+0x2c>
    cbf4:	b	cc18 <Fantasy_Movie_cameo_type+0x50>
    cbf8:	movw	r0, #0
    cbfc:	movt	r0, #0
    cc00:	movw	r1, #0
    cc04:	movt	r1, #0
    cc08:	movw	r2, #822	; 0x336
    cc0c:	movw	r3, #0
    cc10:	movt	r3, #0
    cc14:	bl	0 <__assert_fail>
    cc18:	mov	r0, #6
    cc1c:	strh	r0, [fp, #-8]
    cc20:	ldr	r0, [fp, #-4]
    cc24:	str	r0, [sp, #8]
    cc28:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    cc2c:	ldr	lr, [sp, #8]
    cc30:	sub	r0, lr, r0
    cc34:	str	r0, [sp, #12]
    cc38:	ldr	r0, [sp, #12]
    cc3c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    cc40:	ldrh	lr, [fp, #-8]
    cc44:	add	lr, lr, #3
    cc48:	lsl	lr, lr, #1
    cc4c:	cmp	r0, lr
    cc50:	bcc	cc6c <Fantasy_Movie_cameo_type+0xa4>
    cc54:	ldr	r0, [sp, #12]
    cc58:	ldrh	r1, [fp, #-8]
    cc5c:	add	r0, r0, r1, lsl #1
    cc60:	add	r0, r0, #4
    cc64:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    cc68:	strh	r0, [fp, #-6]
    cc6c:	ldrh	r0, [fp, #-6]
    cc70:	cmp	r0, #0
    cc74:	beq	cc94 <Fantasy_Movie_cameo_type+0xcc>
    cc78:	ldr	r0, [fp, #-4]
    cc7c:	ldrh	r1, [fp, #-6]
    cc80:	add	r0, r0, r1
    cc84:	bl	1214c <__flatbuffers_utype_read_from_pe>
    cc88:	and	r0, r0, #255	; 0xff
    cc8c:	str	r0, [sp, #4]
    cc90:	b	cca0 <Fantasy_Movie_cameo_type+0xd8>
    cc94:	movw	r0, #0
    cc98:	str	r0, [sp, #4]
    cc9c:	b	cca0 <Fantasy_Movie_cameo_type+0xd8>
    cca0:	ldr	r0, [sp, #4]
    cca4:	and	r0, r0, #255	; 0xff
    cca8:	mov	sp, fp
    ccac:	pop	{fp, pc}

0000ccb0 <Fantasy_Movie_cameo>:
    ccb0:	push	{fp, lr}
    ccb4:	mov	fp, sp
    ccb8:	sub	sp, sp, #32
    ccbc:	str	r0, [fp, #-8]
    ccc0:	movw	r0, #0
    ccc4:	strh	r0, [fp, #-14]
    ccc8:	ldr	r0, [fp, #-8]
    cccc:	movw	r1, #0
    ccd0:	cmp	r0, r1
    ccd4:	beq	cce0 <Fantasy_Movie_cameo+0x30>
    ccd8:	b	ccdc <Fantasy_Movie_cameo+0x2c>
    ccdc:	b	cd00 <Fantasy_Movie_cameo+0x50>
    cce0:	movw	r0, #0
    cce4:	movt	r0, #0
    cce8:	movw	r1, #0
    ccec:	movt	r1, #0
    ccf0:	movw	r2, #822	; 0x336
    ccf4:	movw	r3, #0
    ccf8:	movt	r3, #0
    ccfc:	bl	0 <__assert_fail>
    cd00:	mov	r0, #7
    cd04:	strh	r0, [sp, #16]
    cd08:	ldr	r0, [fp, #-8]
    cd0c:	str	r0, [sp, #8]
    cd10:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    cd14:	ldr	lr, [sp, #8]
    cd18:	sub	r0, lr, r0
    cd1c:	str	r0, [sp, #12]
    cd20:	ldr	r0, [sp, #12]
    cd24:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    cd28:	ldrh	lr, [sp, #16]
    cd2c:	add	lr, lr, #3
    cd30:	lsl	lr, lr, #1
    cd34:	cmp	r0, lr
    cd38:	bcc	cd54 <Fantasy_Movie_cameo+0xa4>
    cd3c:	ldr	r0, [sp, #12]
    cd40:	ldrh	r1, [sp, #16]
    cd44:	add	r0, r0, r1, lsl #1
    cd48:	add	r0, r0, #4
    cd4c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    cd50:	strh	r0, [fp, #-14]
    cd54:	ldrsh	r0, [fp, #-14]
    cd58:	cmp	r0, #0
    cd5c:	beq	cd94 <Fantasy_Movie_cameo+0xe4>
    cd60:	ldr	r0, [fp, #-8]
    cd64:	ldrh	r1, [fp, #-14]
    cd68:	add	r0, r0, r1
    cd6c:	str	r0, [fp, #-12]
    cd70:	ldr	r0, [fp, #-12]
    cd74:	ldr	r1, [fp, #-12]
    cd78:	str	r0, [sp, #4]
    cd7c:	mov	r0, r1
    cd80:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    cd84:	ldr	r1, [sp, #4]
    cd88:	add	r0, r1, r0
    cd8c:	str	r0, [fp, #-4]
    cd90:	b	cd9c <Fantasy_Movie_cameo+0xec>
    cd94:	movw	r0, #0
    cd98:	str	r0, [fp, #-4]
    cd9c:	ldr	r0, [fp, #-4]
    cda0:	mov	sp, fp
    cda4:	pop	{fp, pc}

0000cda8 <Fantasy_Movie_antagonist_type>:
    cda8:	push	{fp, lr}
    cdac:	mov	fp, sp
    cdb0:	sub	sp, sp, #24
    cdb4:	str	r0, [fp, #-4]
    cdb8:	movw	r0, #0
    cdbc:	strh	r0, [fp, #-6]
    cdc0:	ldr	r0, [fp, #-4]
    cdc4:	movw	r1, #0
    cdc8:	cmp	r0, r1
    cdcc:	beq	cdd8 <Fantasy_Movie_antagonist_type+0x30>
    cdd0:	b	cdd4 <Fantasy_Movie_antagonist_type+0x2c>
    cdd4:	b	cdf8 <Fantasy_Movie_antagonist_type+0x50>
    cdd8:	movw	r0, #0
    cddc:	movt	r0, #0
    cde0:	movw	r1, #0
    cde4:	movt	r1, #0
    cde8:	movw	r2, #820	; 0x334
    cdec:	movw	r3, #0
    cdf0:	movt	r3, #0
    cdf4:	bl	0 <__assert_fail>
    cdf8:	mov	r0, #2
    cdfc:	strh	r0, [fp, #-8]
    ce00:	ldr	r0, [fp, #-4]
    ce04:	str	r0, [sp, #8]
    ce08:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    ce0c:	ldr	lr, [sp, #8]
    ce10:	sub	r0, lr, r0
    ce14:	str	r0, [sp, #12]
    ce18:	ldr	r0, [sp, #12]
    ce1c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    ce20:	ldrh	lr, [fp, #-8]
    ce24:	add	lr, lr, #3
    ce28:	lsl	lr, lr, #1
    ce2c:	cmp	r0, lr
    ce30:	bcc	ce4c <Fantasy_Movie_antagonist_type+0xa4>
    ce34:	ldr	r0, [sp, #12]
    ce38:	ldrh	r1, [fp, #-8]
    ce3c:	add	r0, r0, r1, lsl #1
    ce40:	add	r0, r0, #4
    ce44:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    ce48:	strh	r0, [fp, #-6]
    ce4c:	ldrh	r0, [fp, #-6]
    ce50:	cmp	r0, #0
    ce54:	beq	ce74 <Fantasy_Movie_antagonist_type+0xcc>
    ce58:	ldr	r0, [fp, #-4]
    ce5c:	ldrh	r1, [fp, #-6]
    ce60:	add	r0, r0, r1
    ce64:	bl	1214c <__flatbuffers_utype_read_from_pe>
    ce68:	and	r0, r0, #255	; 0xff
    ce6c:	str	r0, [sp, #4]
    ce70:	b	ce80 <Fantasy_Movie_antagonist_type+0xd8>
    ce74:	movw	r0, #0
    ce78:	str	r0, [sp, #4]
    ce7c:	b	ce80 <Fantasy_Movie_antagonist_type+0xd8>
    ce80:	ldr	r0, [sp, #4]
    ce84:	and	r0, r0, #255	; 0xff
    ce88:	mov	sp, fp
    ce8c:	pop	{fp, pc}

0000ce90 <Fantasy_Movie_antagonist>:
    ce90:	push	{fp, lr}
    ce94:	mov	fp, sp
    ce98:	sub	sp, sp, #32
    ce9c:	str	r0, [fp, #-8]
    cea0:	movw	r0, #0
    cea4:	strh	r0, [fp, #-14]
    cea8:	ldr	r0, [fp, #-8]
    ceac:	movw	r1, #0
    ceb0:	cmp	r0, r1
    ceb4:	beq	cec0 <Fantasy_Movie_antagonist+0x30>
    ceb8:	b	cebc <Fantasy_Movie_antagonist+0x2c>
    cebc:	b	cee0 <Fantasy_Movie_antagonist+0x50>
    cec0:	movw	r0, #0
    cec4:	movt	r0, #0
    cec8:	movw	r1, #0
    cecc:	movt	r1, #0
    ced0:	movw	r2, #820	; 0x334
    ced4:	movw	r3, #0
    ced8:	movt	r3, #0
    cedc:	bl	0 <__assert_fail>
    cee0:	mov	r0, #3
    cee4:	strh	r0, [sp, #16]
    cee8:	ldr	r0, [fp, #-8]
    ceec:	str	r0, [sp, #8]
    cef0:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    cef4:	ldr	lr, [sp, #8]
    cef8:	sub	r0, lr, r0
    cefc:	str	r0, [sp, #12]
    cf00:	ldr	r0, [sp, #12]
    cf04:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    cf08:	ldrh	lr, [sp, #16]
    cf0c:	add	lr, lr, #3
    cf10:	lsl	lr, lr, #1
    cf14:	cmp	r0, lr
    cf18:	bcc	cf34 <Fantasy_Movie_antagonist+0xa4>
    cf1c:	ldr	r0, [sp, #12]
    cf20:	ldrh	r1, [sp, #16]
    cf24:	add	r0, r0, r1, lsl #1
    cf28:	add	r0, r0, #4
    cf2c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    cf30:	strh	r0, [fp, #-14]
    cf34:	ldrsh	r0, [fp, #-14]
    cf38:	cmp	r0, #0
    cf3c:	beq	cf74 <Fantasy_Movie_antagonist+0xe4>
    cf40:	ldr	r0, [fp, #-8]
    cf44:	ldrh	r1, [fp, #-14]
    cf48:	add	r0, r0, r1
    cf4c:	str	r0, [fp, #-12]
    cf50:	ldr	r0, [fp, #-12]
    cf54:	ldr	r1, [fp, #-12]
    cf58:	str	r0, [sp, #4]
    cf5c:	mov	r0, r1
    cf60:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    cf64:	ldr	r1, [sp, #4]
    cf68:	add	r0, r1, r0
    cf6c:	str	r0, [fp, #-4]
    cf70:	b	cf7c <Fantasy_Movie_antagonist+0xec>
    cf74:	movw	r0, #0
    cf78:	str	r0, [fp, #-4]
    cf7c:	ldr	r0, [fp, #-4]
    cf80:	mov	sp, fp
    cf84:	pop	{fp, pc}

0000cf88 <Fantasy_Attacker_sword_attack_damage>:
    cf88:	push	{fp, lr}
    cf8c:	mov	fp, sp
    cf90:	sub	sp, sp, #24
    cf94:	str	r0, [fp, #-4]
    cf98:	movw	r0, #0
    cf9c:	strh	r0, [fp, #-6]
    cfa0:	ldr	r0, [fp, #-4]
    cfa4:	movw	r1, #0
    cfa8:	cmp	r0, r1
    cfac:	beq	cfb8 <Fantasy_Attacker_sword_attack_damage+0x30>
    cfb0:	b	cfb4 <Fantasy_Attacker_sword_attack_damage+0x2c>
    cfb4:	b	cfd8 <Fantasy_Attacker_sword_attack_damage+0x50>
    cfb8:	movw	r0, #0
    cfbc:	movt	r0, #0
    cfc0:	movw	r1, #0
    cfc4:	movt	r1, #0
    cfc8:	movw	r2, #770	; 0x302
    cfcc:	movw	r3, #0
    cfd0:	movt	r3, #0
    cfd4:	bl	0 <__assert_fail>
    cfd8:	mov	r0, #0
    cfdc:	strh	r0, [fp, #-8]
    cfe0:	ldr	r0, [fp, #-4]
    cfe4:	str	r0, [sp, #8]
    cfe8:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    cfec:	ldr	lr, [sp, #8]
    cff0:	sub	r0, lr, r0
    cff4:	str	r0, [sp, #12]
    cff8:	ldr	r0, [sp, #12]
    cffc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d000:	ldrh	lr, [fp, #-8]
    d004:	add	lr, lr, #3
    d008:	lsl	lr, lr, #1
    d00c:	cmp	r0, lr
    d010:	bcc	d02c <Fantasy_Attacker_sword_attack_damage+0xa4>
    d014:	ldr	r0, [sp, #12]
    d018:	ldrh	r1, [fp, #-8]
    d01c:	add	r0, r0, r1, lsl #1
    d020:	add	r0, r0, #4
    d024:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d028:	strh	r0, [fp, #-6]
    d02c:	ldrh	r0, [fp, #-6]
    d030:	cmp	r0, #0
    d034:	beq	d050 <Fantasy_Attacker_sword_attack_damage+0xc8>
    d038:	ldr	r0, [fp, #-4]
    d03c:	ldrh	r1, [fp, #-6]
    d040:	add	r0, r0, r1
    d044:	bl	108c8 <flatbuffers_int32_read_from_pe>
    d048:	str	r0, [sp, #4]
    d04c:	b	d05c <Fantasy_Attacker_sword_attack_damage+0xd4>
    d050:	movw	r0, #0
    d054:	str	r0, [sp, #4]
    d058:	b	d05c <Fantasy_Attacker_sword_attack_damage+0xd4>
    d05c:	ldr	r0, [sp, #4]
    d060:	mov	sp, fp
    d064:	pop	{fp, pc}

0000d068 <Fantasy_Movie_side_kick_type>:
    d068:	push	{fp, lr}
    d06c:	mov	fp, sp
    d070:	sub	sp, sp, #24
    d074:	str	r0, [fp, #-4]
    d078:	movw	r0, #0
    d07c:	strh	r0, [fp, #-6]
    d080:	ldr	r0, [fp, #-4]
    d084:	movw	r1, #0
    d088:	cmp	r0, r1
    d08c:	beq	d098 <Fantasy_Movie_side_kick_type+0x30>
    d090:	b	d094 <Fantasy_Movie_side_kick_type+0x2c>
    d094:	b	d0b8 <Fantasy_Movie_side_kick_type+0x50>
    d098:	movw	r0, #0
    d09c:	movt	r0, #0
    d0a0:	movw	r1, #0
    d0a4:	movt	r1, #0
    d0a8:	movw	r2, #821	; 0x335
    d0ac:	movw	r3, #0
    d0b0:	movt	r3, #0
    d0b4:	bl	0 <__assert_fail>
    d0b8:	mov	r0, #4
    d0bc:	strh	r0, [fp, #-8]
    d0c0:	ldr	r0, [fp, #-4]
    d0c4:	str	r0, [sp, #8]
    d0c8:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    d0cc:	ldr	lr, [sp, #8]
    d0d0:	sub	r0, lr, r0
    d0d4:	str	r0, [sp, #12]
    d0d8:	ldr	r0, [sp, #12]
    d0dc:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d0e0:	ldrh	lr, [fp, #-8]
    d0e4:	add	lr, lr, #3
    d0e8:	lsl	lr, lr, #1
    d0ec:	cmp	r0, lr
    d0f0:	bcc	d10c <Fantasy_Movie_side_kick_type+0xa4>
    d0f4:	ldr	r0, [sp, #12]
    d0f8:	ldrh	r1, [fp, #-8]
    d0fc:	add	r0, r0, r1, lsl #1
    d100:	add	r0, r0, #4
    d104:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d108:	strh	r0, [fp, #-6]
    d10c:	ldrh	r0, [fp, #-6]
    d110:	cmp	r0, #0
    d114:	beq	d134 <Fantasy_Movie_side_kick_type+0xcc>
    d118:	ldr	r0, [fp, #-4]
    d11c:	ldrh	r1, [fp, #-6]
    d120:	add	r0, r0, r1
    d124:	bl	1214c <__flatbuffers_utype_read_from_pe>
    d128:	and	r0, r0, #255	; 0xff
    d12c:	str	r0, [sp, #4]
    d130:	b	d140 <Fantasy_Movie_side_kick_type+0xd8>
    d134:	movw	r0, #0
    d138:	str	r0, [sp, #4]
    d13c:	b	d140 <Fantasy_Movie_side_kick_type+0xd8>
    d140:	ldr	r0, [sp, #4]
    d144:	and	r0, r0, #255	; 0xff
    d148:	mov	sp, fp
    d14c:	pop	{fp, pc}

0000d150 <flatbuffers_string_cast_from_generic>:
    d150:	push	{fp, lr}
    d154:	mov	fp, sp
    d158:	sub	sp, sp, #16
    d15c:	str	r0, [fp, #-4]
    d160:	ldr	r0, [fp, #-4]
    d164:	movw	r1, #0
    d168:	cmp	r0, r1
    d16c:	beq	d18c <flatbuffers_string_cast_from_generic+0x3c>
    d170:	ldr	r0, [fp, #-4]
    d174:	str	r0, [sp, #8]
    d178:	bl	140e4 <__flatbuffers_uoffset__size>
    d17c:	ldr	lr, [sp, #8]
    d180:	add	r0, lr, r0
    d184:	str	r0, [sp, #4]
    d188:	b	d198 <flatbuffers_string_cast_from_generic+0x48>
    d18c:	movw	r0, #0
    d190:	str	r0, [sp, #4]
    d194:	b	d198 <flatbuffers_string_cast_from_generic+0x48>
    d198:	ldr	r0, [sp, #4]
    d19c:	mov	sp, fp
    d1a0:	pop	{fp, pc}

0000d1a4 <Fantasy_Movie_side_kick>:
    d1a4:	push	{fp, lr}
    d1a8:	mov	fp, sp
    d1ac:	sub	sp, sp, #32
    d1b0:	str	r0, [fp, #-8]
    d1b4:	movw	r0, #0
    d1b8:	strh	r0, [fp, #-14]
    d1bc:	ldr	r0, [fp, #-8]
    d1c0:	movw	r1, #0
    d1c4:	cmp	r0, r1
    d1c8:	beq	d1d4 <Fantasy_Movie_side_kick+0x30>
    d1cc:	b	d1d0 <Fantasy_Movie_side_kick+0x2c>
    d1d0:	b	d1f4 <Fantasy_Movie_side_kick+0x50>
    d1d4:	movw	r0, #0
    d1d8:	movt	r0, #0
    d1dc:	movw	r1, #0
    d1e0:	movt	r1, #0
    d1e4:	movw	r2, #821	; 0x335
    d1e8:	movw	r3, #0
    d1ec:	movt	r3, #0
    d1f0:	bl	0 <__assert_fail>
    d1f4:	mov	r0, #5
    d1f8:	strh	r0, [sp, #16]
    d1fc:	ldr	r0, [fp, #-8]
    d200:	str	r0, [sp, #8]
    d204:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    d208:	ldr	lr, [sp, #8]
    d20c:	sub	r0, lr, r0
    d210:	str	r0, [sp, #12]
    d214:	ldr	r0, [sp, #12]
    d218:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d21c:	ldrh	lr, [sp, #16]
    d220:	add	lr, lr, #3
    d224:	lsl	lr, lr, #1
    d228:	cmp	r0, lr
    d22c:	bcc	d248 <Fantasy_Movie_side_kick+0xa4>
    d230:	ldr	r0, [sp, #12]
    d234:	ldrh	r1, [sp, #16]
    d238:	add	r0, r0, r1, lsl #1
    d23c:	add	r0, r0, #4
    d240:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d244:	strh	r0, [fp, #-14]
    d248:	ldrsh	r0, [fp, #-14]
    d24c:	cmp	r0, #0
    d250:	beq	d288 <Fantasy_Movie_side_kick+0xe4>
    d254:	ldr	r0, [fp, #-8]
    d258:	ldrh	r1, [fp, #-14]
    d25c:	add	r0, r0, r1
    d260:	str	r0, [fp, #-12]
    d264:	ldr	r0, [fp, #-12]
    d268:	ldr	r1, [fp, #-12]
    d26c:	str	r0, [sp, #4]
    d270:	mov	r0, r1
    d274:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    d278:	ldr	r1, [sp, #4]
    d27c:	add	r0, r1, r0
    d280:	str	r0, [fp, #-4]
    d284:	b	d290 <Fantasy_Movie_side_kick+0xec>
    d288:	movw	r0, #0
    d28c:	str	r0, [fp, #-4]
    d290:	ldr	r0, [fp, #-4]
    d294:	mov	sp, fp
    d298:	pop	{fp, pc}

0000d29c <Fantasy_Movie_side_kick_as_string>:
    d29c:	push	{fp, lr}
    d2a0:	mov	fp, sp
    d2a4:	sub	sp, sp, #8
    d2a8:	str	r0, [sp, #4]
    d2ac:	ldr	r0, [sp, #4]
    d2b0:	bl	d1a4 <Fantasy_Movie_side_kick>
    d2b4:	bl	d150 <flatbuffers_string_cast_from_generic>
    d2b8:	mov	sp, fp
    d2bc:	pop	{fp, pc}

0000d2c0 <Fantasy_Movie_side_kick_union>:
    d2c0:	push	{fp, lr}
    d2c4:	mov	fp, sp
    d2c8:	sub	sp, sp, #8
    d2cc:	str	r1, [sp, #4]
    d2d0:	mov	r1, r0
    d2d4:	str	r0, [sp]
    d2d8:	mov	r0, r1
    d2dc:	movw	r1, #0
    d2e0:	and	r1, r1, #255	; 0xff
    d2e4:	movw	r2, #8
    d2e8:	bl	0 <memset>
    d2ec:	ldr	r0, [sp, #4]
    d2f0:	bl	d068 <Fantasy_Movie_side_kick_type>
    d2f4:	ldr	r1, [sp]
    d2f8:	strb	r0, [r1]
    d2fc:	ldrb	r0, [r1]
    d300:	cmp	r0, #0
    d304:	bne	d30c <Fantasy_Movie_side_kick_union+0x4c>
    d308:	b	d31c <Fantasy_Movie_side_kick_union+0x5c>
    d30c:	ldr	r0, [sp, #4]
    d310:	bl	d1a4 <Fantasy_Movie_side_kick>
    d314:	ldr	lr, [sp]
    d318:	str	r0, [lr, #4]
    d31c:	mov	sp, fp
    d320:	pop	{fp, pc}

0000d324 <flatbuffers_string_cast_from_union>:
    d324:	push	{fp, lr}
    d328:	mov	fp, sp
    d32c:	sub	sp, sp, #8
    d330:	str	r0, [sp]
    d334:	str	r1, [sp, #4]
    d338:	ldr	r0, [sp, #4]
    d33c:	bl	d150 <flatbuffers_string_cast_from_generic>
    d340:	mov	sp, fp
    d344:	pop	{fp, pc}

0000d348 <Fantasy_Movie_characters_union>:
    d348:	push	{fp, lr}
    d34c:	mov	fp, sp
    d350:	sub	sp, sp, #16
    d354:	str	r1, [fp, #-4]
    d358:	ldr	r1, [fp, #-4]
    d35c:	str	r0, [sp, #8]
    d360:	mov	r0, r1
    d364:	bl	d494 <Fantasy_Movie_characters_type>
    d368:	ldr	r1, [sp, #8]
    d36c:	str	r0, [r1]
    d370:	ldr	r0, [fp, #-4]
    d374:	bl	140ec <Fantasy_Movie_characters>
    d378:	ldr	r1, [sp, #8]
    d37c:	str	r0, [r1, #4]
    d380:	ldr	r0, [r1]
    d384:	bl	120c0 <flatbuffers_vec_len>
    d388:	ldr	r1, [sp, #8]
    d38c:	ldr	lr, [r1, #4]
    d390:	str	r0, [sp, #4]
    d394:	mov	r0, lr
    d398:	bl	120c0 <flatbuffers_vec_len>
    d39c:	ldr	r1, [sp, #4]
    d3a0:	cmp	r1, r0
    d3a4:	bne	d3b0 <Fantasy_Movie_characters_union+0x68>
    d3a8:	b	d3ac <Fantasy_Movie_characters_union+0x64>
    d3ac:	b	d3d0 <Fantasy_Movie_characters_union+0x88>
    d3b0:	movw	r0, #0
    d3b4:	movt	r0, #0
    d3b8:	movw	r1, #0
    d3bc:	movt	r1, #0
    d3c0:	movw	r2, #823	; 0x337
    d3c4:	movw	r3, #0
    d3c8:	movt	r3, #0
    d3cc:	bl	0 <__assert_fail>
    d3d0:	mov	sp, fp
    d3d4:	pop	{fp, pc}

0000d3d8 <Fantasy_Character_union_vec_at>:
    d3d8:	push	{fp, lr}
    d3dc:	mov	fp, sp
    d3e0:	sub	sp, sp, #24
    d3e4:	str	r1, [fp, #-8]
    d3e8:	str	r2, [fp, #-4]
    d3ec:	str	r3, [sp, #12]
    d3f0:	mov	r1, r0
    d3f4:	str	r0, [sp, #4]
    d3f8:	mov	r0, r1
    d3fc:	movw	r1, #0
    d400:	and	r1, r1, #255	; 0xff
    d404:	movw	r2, #8
    d408:	bl	0 <memset>
    d40c:	ldr	r0, [fp, #-8]
    d410:	bl	120c0 <flatbuffers_vec_len>
    d414:	str	r0, [sp, #8]
    d418:	ldr	r0, [sp, #8]
    d41c:	ldr	r1, [sp, #12]
    d420:	cmp	r0, r1
    d424:	bls	d430 <Fantasy_Character_union_vec_at+0x58>
    d428:	b	d42c <Fantasy_Character_union_vec_at+0x54>
    d42c:	b	d450 <Fantasy_Character_union_vec_at+0x78>
    d430:	movw	r0, #0
    d434:	movt	r0, #0
    d438:	movw	r1, #0
    d43c:	movt	r1, #0
    d440:	movw	r2, #773	; 0x305
    d444:	movw	r3, #0
    d448:	movt	r3, #0
    d44c:	bl	0 <__assert_fail>
    d450:	ldr	r0, [fp, #-8]
    d454:	ldr	r1, [sp, #12]
    d458:	add	r0, r0, r1
    d45c:	ldrb	r0, [r0]
    d460:	ldr	r1, [sp, #4]
    d464:	strb	r0, [r1]
    d468:	ldrb	r0, [r1]
    d46c:	cmp	r0, #0
    d470:	bne	d478 <Fantasy_Character_union_vec_at+0xa0>
    d474:	b	d48c <Fantasy_Character_union_vec_at+0xb4>
    d478:	ldr	r0, [fp, #-4]
    d47c:	ldr	r1, [sp, #12]
    d480:	bl	b590 <flatbuffers_generic_vec_at>
    d484:	ldr	r1, [sp, #4]
    d488:	str	r0, [r1, #4]
    d48c:	mov	sp, fp
    d490:	pop	{fp, pc}

0000d494 <Fantasy_Movie_characters_type>:
    d494:	push	{fp, lr}
    d498:	mov	fp, sp
    d49c:	sub	sp, sp, #32
    d4a0:	str	r0, [fp, #-8]
    d4a4:	movw	r0, #0
    d4a8:	strh	r0, [fp, #-14]
    d4ac:	ldr	r0, [fp, #-8]
    d4b0:	movw	r1, #0
    d4b4:	cmp	r0, r1
    d4b8:	beq	d4c4 <Fantasy_Movie_characters_type+0x30>
    d4bc:	b	d4c0 <Fantasy_Movie_characters_type+0x2c>
    d4c0:	b	d4e4 <Fantasy_Movie_characters_type+0x50>
    d4c4:	movw	r0, #0
    d4c8:	movt	r0, #0
    d4cc:	movw	r1, #0
    d4d0:	movt	r1, #0
    d4d4:	movw	r2, #823	; 0x337
    d4d8:	movw	r3, #0
    d4dc:	movt	r3, #0
    d4e0:	bl	0 <__assert_fail>
    d4e4:	mov	r0, #8
    d4e8:	strh	r0, [sp, #16]
    d4ec:	ldr	r0, [fp, #-8]
    d4f0:	str	r0, [sp, #8]
    d4f4:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    d4f8:	ldr	lr, [sp, #8]
    d4fc:	sub	r0, lr, r0
    d500:	str	r0, [sp, #12]
    d504:	ldr	r0, [sp, #12]
    d508:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d50c:	ldrh	lr, [sp, #16]
    d510:	add	lr, lr, #3
    d514:	lsl	lr, lr, #1
    d518:	cmp	r0, lr
    d51c:	bcc	d538 <Fantasy_Movie_characters_type+0xa4>
    d520:	ldr	r0, [sp, #12]
    d524:	ldrh	r1, [sp, #16]
    d528:	add	r0, r0, r1, lsl #1
    d52c:	add	r0, r0, #4
    d530:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d534:	strh	r0, [fp, #-14]
    d538:	ldrsh	r0, [fp, #-14]
    d53c:	cmp	r0, #0
    d540:	beq	d57c <Fantasy_Movie_characters_type+0xe8>
    d544:	ldr	r0, [fp, #-8]
    d548:	ldrh	r1, [fp, #-14]
    d54c:	add	r0, r0, r1
    d550:	str	r0, [fp, #-12]
    d554:	ldr	r0, [fp, #-12]
    d558:	add	r0, r0, #4
    d55c:	ldr	r1, [fp, #-12]
    d560:	str	r0, [sp, #4]
    d564:	mov	r0, r1
    d568:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    d56c:	ldr	r1, [sp, #4]
    d570:	add	r0, r1, r0
    d574:	str	r0, [fp, #-4]
    d578:	b	d584 <Fantasy_Movie_characters_type+0xf0>
    d57c:	movw	r0, #0
    d580:	str	r0, [fp, #-4]
    d584:	ldr	r0, [fp, #-4]
    d588:	mov	sp, fp
    d58c:	pop	{fp, pc}

0000d590 <Fantasy_Character_union_vec_at_as_string>:
    d590:	push	{fp, lr}
    d594:	mov	fp, sp
    d598:	sub	sp, sp, #16
    d59c:	str	r0, [sp, #8]
    d5a0:	str	r1, [sp, #12]
    d5a4:	str	r2, [sp, #4]
    d5a8:	ldr	r0, [sp, #12]
    d5ac:	ldr	r1, [sp, #4]
    d5b0:	bl	141e8 <flatbuffers_generic_vec_at_as_string>
    d5b4:	mov	sp, fp
    d5b8:	pop	{fp, pc}

0000d5bc <Fantasy_Character_union_vec_len>:
    d5bc:	push	{fp, lr}
    d5c0:	mov	fp, sp
    d5c4:	sub	sp, sp, #8
    d5c8:	str	r0, [sp]
    d5cc:	str	r1, [sp, #4]
    d5d0:	ldr	r0, [sp]
    d5d4:	bl	120c0 <flatbuffers_vec_len>
    d5d8:	mov	sp, fp
    d5dc:	pop	{fp, pc}

0000d5e0 <test_add_set_defaults>:
    d5e0:	push	{fp, lr}
    d5e4:	mov	fp, sp
    d5e8:	sub	sp, sp, #104	; 0x68
    d5ec:	str	r0, [fp, #-8]
    d5f0:	ldr	r0, [fp, #-8]
    d5f4:	bl	0 <flatcc_builder_reset>
    d5f8:	ldr	lr, [fp, #-8]
    d5fc:	str	r0, [fp, #-24]	; 0xffffffe8
    d600:	mov	r0, lr
    d604:	bl	598c <MyGame_Example_Monster_start_as_root>
    d608:	ldr	lr, [fp, #-8]
    d60c:	str	r0, [fp, #-28]	; 0xffffffe4
    d610:	mov	r0, lr
    d614:	movw	r1, #0
    d618:	movt	r1, #0
    d61c:	bl	1870 <MyGame_Example_Monster_name_create_str>
    d620:	ldr	r1, [fp, #-8]
    d624:	str	r0, [fp, #-32]	; 0xffffffe0
    d628:	mov	r0, r1
    d62c:	movw	r1, #100	; 0x64
    d630:	sxth	r1, r1
    d634:	bl	59d8 <MyGame_Example_Monster_hp_add>
    d638:	ldr	r1, [fp, #-8]
    d63c:	str	r0, [fp, #-36]	; 0xffffffdc
    d640:	mov	r0, r1
    d644:	movw	r1, #100	; 0x64
    d648:	sxth	r1, r1
    d64c:	bl	d864 <MyGame_Example_Monster_mana_add>
    d650:	ldr	r1, [fp, #-8]
    d654:	str	r0, [fp, #-40]	; 0xffffffd8
    d658:	mov	r0, r1
    d65c:	movw	r1, #8
    d660:	sxtb	r1, r1
    d664:	bl	5aa4 <MyGame_Example_Monster_color_add>
    d668:	ldr	r1, [fp, #-8]
    d66c:	str	r0, [fp, #-44]	; 0xffffffd4
    d670:	mov	r0, r1
    d674:	bl	6538 <MyGame_Example_Monster_end_as_root>
    d678:	ldr	r1, [fp, #-8]
    d67c:	str	r0, [fp, #-48]	; 0xffffffd0
    d680:	mov	r0, r1
    d684:	sub	r1, fp, #16
    d688:	bl	0 <flatcc_builder_get_direct_buffer>
    d68c:	str	r0, [fp, #-12]
    d690:	ldr	r0, [fp, #-12]
    d694:	bl	280 <MyGame_Example_Monster_as_root>
    d698:	str	r0, [fp, #-20]	; 0xffffffec
    d69c:	ldr	r0, [fp, #-20]	; 0xffffffec
    d6a0:	bl	3e0 <MyGame_Example_Monster_hp_is_present>
    d6a4:	cmp	r0, #0
    d6a8:	beq	d6c8 <test_add_set_defaults+0xe8>
    d6ac:	movw	r0, #0
    d6b0:	movt	r0, #0
    d6b4:	bl	0 <printf>
    d6b8:	mvn	lr, #0
    d6bc:	str	lr, [fp, #-4]
    d6c0:	str	r0, [sp, #52]	; 0x34
    d6c4:	b	d858 <test_add_set_defaults+0x278>
    d6c8:	ldr	r0, [fp, #-20]	; 0xffffffec
    d6cc:	bl	4044 <MyGame_Example_Monster_mana_is_present>
    d6d0:	cmp	r0, #0
    d6d4:	bne	d6f4 <test_add_set_defaults+0x114>
    d6d8:	movw	r0, #0
    d6dc:	movt	r0, #0
    d6e0:	bl	0 <printf>
    d6e4:	mvn	lr, #0
    d6e8:	str	lr, [fp, #-4]
    d6ec:	str	r0, [sp, #48]	; 0x30
    d6f0:	b	d858 <test_add_set_defaults+0x278>
    d6f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    d6f8:	bl	d8e8 <MyGame_Example_Monster_color_is_present>
    d6fc:	cmp	r0, #0
    d700:	beq	d720 <test_add_set_defaults+0x140>
    d704:	movw	r0, #0
    d708:	movt	r0, #0
    d70c:	bl	0 <printf>
    d710:	mvn	lr, #0
    d714:	str	lr, [fp, #-4]
    d718:	str	r0, [sp, #44]	; 0x2c
    d71c:	b	d858 <test_add_set_defaults+0x278>
    d720:	ldr	r0, [fp, #-8]
    d724:	bl	0 <flatcc_builder_reset>
    d728:	ldr	lr, [fp, #-8]
    d72c:	str	r0, [sp, #40]	; 0x28
    d730:	mov	r0, lr
    d734:	bl	598c <MyGame_Example_Monster_start_as_root>
    d738:	ldr	lr, [fp, #-8]
    d73c:	str	r0, [sp, #36]	; 0x24
    d740:	mov	r0, lr
    d744:	movw	r1, #0
    d748:	movt	r1, #0
    d74c:	bl	1870 <MyGame_Example_Monster_name_create_str>
    d750:	ldr	r1, [fp, #-8]
    d754:	str	r0, [sp, #32]
    d758:	mov	r0, r1
    d75c:	movw	r1, #100	; 0x64
    d760:	sxth	r1, r1
    d764:	bl	d9a8 <MyGame_Example_Monster_hp_force_add>
    d768:	ldr	r1, [fp, #-8]
    d76c:	str	r0, [sp, #28]
    d770:	mov	r0, r1
    d774:	movw	r1, #100	; 0x64
    d778:	sxth	r1, r1
    d77c:	bl	da18 <MyGame_Example_Monster_mana_force_add>
    d780:	ldr	r1, [fp, #-8]
    d784:	str	r0, [sp, #24]
    d788:	mov	r0, r1
    d78c:	movw	r1, #8
    d790:	sxtb	r1, r1
    d794:	bl	da84 <MyGame_Example_Monster_color_force_add>
    d798:	ldr	r1, [fp, #-8]
    d79c:	str	r0, [sp, #20]
    d7a0:	mov	r0, r1
    d7a4:	bl	6538 <MyGame_Example_Monster_end_as_root>
    d7a8:	ldr	r1, [fp, #-8]
    d7ac:	str	r0, [sp, #16]
    d7b0:	mov	r0, r1
    d7b4:	sub	r1, fp, #16
    d7b8:	bl	0 <flatcc_builder_get_direct_buffer>
    d7bc:	str	r0, [fp, #-12]
    d7c0:	ldr	r0, [fp, #-12]
    d7c4:	bl	280 <MyGame_Example_Monster_as_root>
    d7c8:	str	r0, [fp, #-20]	; 0xffffffec
    d7cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    d7d0:	bl	3e0 <MyGame_Example_Monster_hp_is_present>
    d7d4:	cmp	r0, #0
    d7d8:	bne	d7f8 <test_add_set_defaults+0x218>
    d7dc:	movw	r0, #0
    d7e0:	movt	r0, #0
    d7e4:	bl	0 <printf>
    d7e8:	mvn	lr, #0
    d7ec:	str	lr, [fp, #-4]
    d7f0:	str	r0, [sp, #12]
    d7f4:	b	d858 <test_add_set_defaults+0x278>
    d7f8:	ldr	r0, [fp, #-20]	; 0xffffffec
    d7fc:	bl	4044 <MyGame_Example_Monster_mana_is_present>
    d800:	cmp	r0, #0
    d804:	bne	d824 <test_add_set_defaults+0x244>
    d808:	movw	r0, #0
    d80c:	movt	r0, #0
    d810:	bl	0 <printf>
    d814:	mvn	lr, #0
    d818:	str	lr, [fp, #-4]
    d81c:	str	r0, [sp, #8]
    d820:	b	d858 <test_add_set_defaults+0x278>
    d824:	ldr	r0, [fp, #-20]	; 0xffffffec
    d828:	bl	d8e8 <MyGame_Example_Monster_color_is_present>
    d82c:	cmp	r0, #0
    d830:	bne	d850 <test_add_set_defaults+0x270>
    d834:	movw	r0, #0
    d838:	movt	r0, #0
    d83c:	bl	0 <printf>
    d840:	mvn	lr, #0
    d844:	str	lr, [fp, #-4]
    d848:	str	r0, [sp, #4]
    d84c:	b	d858 <test_add_set_defaults+0x278>
    d850:	movw	r0, #0
    d854:	str	r0, [fp, #-4]
    d858:	ldr	r0, [fp, #-4]
    d85c:	mov	sp, fp
    d860:	pop	{fp, pc}

0000d864 <MyGame_Example_Monster_mana_add>:
    d864:	push	{fp, lr}
    d868:	mov	fp, sp
    d86c:	sub	sp, sp, #24
    d870:	str	r0, [fp, #-8]
    d874:	strh	r1, [fp, #-10]
    d878:	ldrsh	r0, [fp, #-10]
    d87c:	cmp	r0, #150	; 0x96
    d880:	bne	d890 <MyGame_Example_Monster_mana_add+0x2c>
    d884:	movw	r0, #0
    d888:	str	r0, [fp, #-4]
    d88c:	b	d8dc <MyGame_Example_Monster_mana_add+0x78>
    d890:	ldr	r0, [fp, #-8]
    d894:	movw	r1, #1
    d898:	movw	r2, #2
    d89c:	movw	r3, #2
    d8a0:	uxth	r3, r3
    d8a4:	bl	0 <flatcc_builder_table_add>
    d8a8:	str	r0, [sp, #8]
    d8ac:	movw	r1, #0
    d8b0:	cmp	r0, r1
    d8b4:	bne	d8c4 <MyGame_Example_Monster_mana_add+0x60>
    d8b8:	mvn	r0, #0
    d8bc:	str	r0, [fp, #-4]
    d8c0:	b	d8dc <MyGame_Example_Monster_mana_add+0x78>
    d8c4:	ldr	r0, [sp, #8]
    d8c8:	ldrsh	r1, [fp, #-10]
    d8cc:	bl	104a0 <flatbuffers_int16_assign_to_pe>
    d8d0:	movw	r1, #0
    d8d4:	str	r1, [fp, #-4]
    d8d8:	str	r0, [sp, #4]
    d8dc:	ldr	r0, [fp, #-4]
    d8e0:	mov	sp, fp
    d8e4:	pop	{fp, pc}

0000d8e8 <MyGame_Example_Monster_color_is_present>:
    d8e8:	push	{fp, lr}
    d8ec:	mov	fp, sp
    d8f0:	sub	sp, sp, #16
    d8f4:	str	r0, [fp, #-4]
    d8f8:	movw	r0, #0
    d8fc:	strh	r0, [fp, #-6]
    d900:	ldr	r0, [fp, #-4]
    d904:	movw	r1, #0
    d908:	cmp	r0, r1
    d90c:	beq	d918 <MyGame_Example_Monster_color_is_present+0x30>
    d910:	b	d914 <MyGame_Example_Monster_color_is_present+0x2c>
    d914:	b	d938 <MyGame_Example_Monster_color_is_present+0x50>
    d918:	movw	r0, #0
    d91c:	movt	r0, #0
    d920:	movw	r1, #0
    d924:	movt	r1, #0
    d928:	movw	r2, #705	; 0x2c1
    d92c:	movw	r3, #0
    d930:	movt	r3, #0
    d934:	bl	0 <__assert_fail>
    d938:	mov	r0, #6
    d93c:	strh	r0, [sp, #8]
    d940:	ldr	r0, [fp, #-4]
    d944:	str	r0, [sp]
    d948:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
    d94c:	ldr	lr, [sp]
    d950:	sub	r0, lr, r0
    d954:	str	r0, [sp, #4]
    d958:	ldr	r0, [sp, #4]
    d95c:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d960:	ldrh	lr, [sp, #8]
    d964:	add	lr, lr, #3
    d968:	lsl	lr, lr, #1
    d96c:	cmp	r0, lr
    d970:	bcc	d98c <MyGame_Example_Monster_color_is_present+0xa4>
    d974:	ldr	r0, [sp, #4]
    d978:	ldrh	r1, [sp, #8]
    d97c:	add	r0, r0, r1, lsl #1
    d980:	add	r0, r0, #4
    d984:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
    d988:	strh	r0, [fp, #-6]
    d98c:	ldrh	r0, [fp, #-6]
    d990:	cmp	r0, #0
    d994:	movw	r0, #0
    d998:	movne	r0, #1
    d99c:	and	r0, r0, #1
    d9a0:	mov	sp, fp
    d9a4:	pop	{fp, pc}

0000d9a8 <MyGame_Example_Monster_hp_force_add>:
    d9a8:	push	{fp, lr}
    d9ac:	mov	fp, sp
    d9b0:	sub	sp, sp, #24
    d9b4:	str	r0, [fp, #-8]
    d9b8:	strh	r1, [fp, #-10]
    d9bc:	ldr	r0, [fp, #-8]
    d9c0:	movw	r1, #2
    d9c4:	str	r1, [sp, #4]
    d9c8:	ldr	r2, [sp, #4]
    d9cc:	movw	r3, #2
    d9d0:	uxth	r3, r3
    d9d4:	bl	0 <flatcc_builder_table_add>
    d9d8:	str	r0, [sp, #8]
    d9dc:	movw	r1, #0
    d9e0:	cmp	r0, r1
    d9e4:	bne	d9f4 <MyGame_Example_Monster_hp_force_add+0x4c>
    d9e8:	mvn	r0, #0
    d9ec:	str	r0, [fp, #-4]
    d9f0:	b	da0c <MyGame_Example_Monster_hp_force_add+0x64>
    d9f4:	ldr	r0, [sp, #8]
    d9f8:	ldrsh	r1, [fp, #-10]
    d9fc:	bl	104a0 <flatbuffers_int16_assign_to_pe>
    da00:	movw	r1, #0
    da04:	str	r1, [fp, #-4]
    da08:	str	r0, [sp]
    da0c:	ldr	r0, [fp, #-4]
    da10:	mov	sp, fp
    da14:	pop	{fp, pc}

0000da18 <MyGame_Example_Monster_mana_force_add>:
    da18:	push	{fp, lr}
    da1c:	mov	fp, sp
    da20:	sub	sp, sp, #24
    da24:	str	r0, [fp, #-8]
    da28:	strh	r1, [fp, #-10]
    da2c:	ldr	r0, [fp, #-8]
    da30:	movw	r1, #1
    da34:	movw	r2, #2
    da38:	movw	r3, #2
    da3c:	uxth	r3, r3
    da40:	bl	0 <flatcc_builder_table_add>
    da44:	str	r0, [sp, #8]
    da48:	movw	r1, #0
    da4c:	cmp	r0, r1
    da50:	bne	da60 <MyGame_Example_Monster_mana_force_add+0x48>
    da54:	mvn	r0, #0
    da58:	str	r0, [fp, #-4]
    da5c:	b	da78 <MyGame_Example_Monster_mana_force_add+0x60>
    da60:	ldr	r0, [sp, #8]
    da64:	ldrsh	r1, [fp, #-10]
    da68:	bl	104a0 <flatbuffers_int16_assign_to_pe>
    da6c:	movw	r1, #0
    da70:	str	r1, [fp, #-4]
    da74:	str	r0, [sp, #4]
    da78:	ldr	r0, [fp, #-4]
    da7c:	mov	sp, fp
    da80:	pop	{fp, pc}

0000da84 <MyGame_Example_Monster_color_force_add>:
    da84:	push	{fp, lr}
    da88:	mov	fp, sp
    da8c:	sub	sp, sp, #24
    da90:	str	r0, [fp, #-8]
    da94:	strb	r1, [fp, #-9]
    da98:	ldr	r0, [fp, #-8]
    da9c:	movw	r1, #6
    daa0:	movw	r2, #1
    daa4:	movw	r3, #1
    daa8:	uxth	r3, r3
    daac:	bl	0 <flatcc_builder_table_add>
    dab0:	str	r0, [sp, #8]
    dab4:	movw	r1, #0
    dab8:	cmp	r0, r1
    dabc:	bne	dacc <MyGame_Example_Monster_color_force_add+0x48>
    dac0:	mvn	r0, #0
    dac4:	str	r0, [fp, #-4]
    dac8:	b	dae4 <MyGame_Example_Monster_color_force_add+0x60>
    dacc:	ldr	r0, [sp, #8]
    dad0:	ldrsb	r1, [fp, #-9]
    dad4:	bl	121bc <MyGame_Example_Color_assign_to_pe>
    dad8:	movw	r1, #0
    dadc:	str	r1, [fp, #-4]
    dae0:	str	r0, [sp, #4]
    dae4:	ldr	r0, [fp, #-4]
    dae8:	mov	sp, fp
    daec:	pop	{fp, pc}

0000daf0 <test_nested_buffer>:
    daf0:	push	{fp, lr}
    daf4:	mov	fp, sp
    daf8:	sub	sp, sp, #72	; 0x48
    dafc:	str	r0, [fp, #-8]
    db00:	ldr	r0, [fp, #-8]
    db04:	bl	0 <flatcc_builder_reset>
    db08:	ldr	lr, [fp, #-8]
    db0c:	str	r0, [fp, #-28]	; 0xffffffe4
    db10:	mov	r0, lr
    db14:	bl	598c <MyGame_Example_Monster_start_as_root>
    db18:	ldr	lr, [fp, #-8]
    db1c:	str	r0, [fp, #-32]	; 0xffffffe0
    db20:	mov	r0, lr
    db24:	movw	r1, #0
    db28:	movt	r1, #0
    db2c:	bl	1870 <MyGame_Example_Monster_name_create_str>
    db30:	ldr	r1, [fp, #-8]
    db34:	str	r0, [sp, #36]	; 0x24
    db38:	mov	r0, r1
    db3c:	bl	dccc <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>
    db40:	ldr	r1, [fp, #-8]
    db44:	str	r0, [sp, #32]
    db48:	mov	r0, r1
    db4c:	movw	r1, #0
    db50:	movt	r1, #0
    db54:	bl	1870 <MyGame_Example_Monster_name_create_str>
    db58:	ldr	r1, [fp, #-8]
    db5c:	str	r0, [sp, #28]
    db60:	mov	r0, r1
    db64:	bl	dd18 <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>
    db68:	ldr	r1, [fp, #-8]
    db6c:	str	r0, [sp, #24]
    db70:	mov	r0, r1
    db74:	movw	r1, #10
    db78:	sxth	r1, r1
    db7c:	bl	59d8 <MyGame_Example_Monster_hp_add>
    db80:	ldr	r1, [fp, #-8]
    db84:	str	r0, [sp, #20]
    db88:	mov	r0, r1
    db8c:	bl	6538 <MyGame_Example_Monster_end_as_root>
    db90:	ldr	r1, [fp, #-8]
    db94:	str	r0, [sp, #16]
    db98:	mov	r0, r1
    db9c:	sub	r1, fp, #16
    dba0:	bl	0 <flatcc_builder_get_direct_buffer>
    dba4:	str	r0, [fp, #-12]
    dba8:	ldr	r1, [fp, #-12]
    dbac:	ldr	r2, [fp, #-16]
    dbb0:	movw	r0, #0
    dbb4:	movt	r0, #0
    dbb8:	ldr	r3, [r0]
    dbbc:	movw	r0, #0
    dbc0:	movt	r0, #0
    dbc4:	bl	b0c <hexdump>
    dbc8:	ldr	r0, [fp, #-12]
    dbcc:	bl	280 <MyGame_Example_Monster_as_root>
    dbd0:	str	r0, [fp, #-20]	; 0xffffffec
    dbd4:	ldr	r0, [fp, #-20]	; 0xffffffec
    dbd8:	bl	3a0c <MyGame_Example_Monster_name>
    dbdc:	movw	r1, #0
    dbe0:	movt	r1, #0
    dbe4:	bl	0 <strcmp>
    dbe8:	cmp	r0, #0
    dbec:	beq	dc0c <test_nested_buffer+0x11c>
    dbf0:	movw	r0, #0
    dbf4:	movt	r0, #0
    dbf8:	bl	0 <printf>
    dbfc:	mvn	lr, #0
    dc00:	str	lr, [fp, #-4]
    dc04:	str	r0, [sp, #12]
    dc08:	b	dcc0 <test_nested_buffer+0x1d0>
    dc0c:	ldr	r0, [fp, #-20]	; 0xffffffec
    dc10:	bl	dd74 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
    dc14:	str	r0, [fp, #-24]	; 0xffffffe8
    dc18:	ldr	r0, [fp, #-20]	; 0xffffffec
    dc1c:	bl	2f8 <MyGame_Example_Monster_hp>
    dc20:	sxth	r0, r0
    dc24:	cmp	r0, #10
    dc28:	beq	dc48 <test_nested_buffer+0x158>
    dc2c:	movw	r0, #0
    dc30:	movt	r0, #0
    dc34:	bl	0 <printf>
    dc38:	mvn	lr, #0
    dc3c:	str	lr, [fp, #-4]
    dc40:	str	r0, [sp, #8]
    dc44:	b	dcc0 <test_nested_buffer+0x1d0>
    dc48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    dc4c:	bl	3a0c <MyGame_Example_Monster_name>
    dc50:	movw	lr, #0
    dc54:	cmp	r0, lr
    dc58:	beq	dc60 <test_nested_buffer+0x170>
    dc5c:	b	dc80 <test_nested_buffer+0x190>
    dc60:	movw	r0, #0
    dc64:	movt	r0, #0
    dc68:	movw	r1, #0
    dc6c:	movt	r1, #0
    dc70:	movw	r2, #2188	; 0x88c
    dc74:	movw	r3, #0
    dc78:	movt	r3, #0
    dc7c:	bl	0 <__assert_fail>
    dc80:	ldr	r0, [fp, #-24]	; 0xffffffe8
    dc84:	bl	3a0c <MyGame_Example_Monster_name>
    dc88:	movw	r1, #0
    dc8c:	movt	r1, #0
    dc90:	bl	0 <strcmp>
    dc94:	cmp	r0, #0
    dc98:	beq	dcb8 <test_nested_buffer+0x1c8>
    dc9c:	movw	r0, #0
    dca0:	movt	r0, #0
    dca4:	bl	0 <printf>
    dca8:	mvn	lr, #0
    dcac:	str	lr, [fp, #-4]
    dcb0:	str	r0, [sp, #4]
    dcb4:	b	dcc0 <test_nested_buffer+0x1d0>
    dcb8:	movw	r0, #0
    dcbc:	str	r0, [fp, #-4]
    dcc0:	ldr	r0, [fp, #-4]
    dcc4:	mov	sp, fp
    dcc8:	pop	{fp, pc}

0000dccc <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>:
    dccc:	push	{fp, lr}
    dcd0:	mov	fp, sp
    dcd4:	sub	sp, sp, #8
    dcd8:	str	r0, [sp, #4]
    dcdc:	ldr	r0, [sp, #4]
    dce0:	movw	r1, #0
    dce4:	movt	r1, #0
    dce8:	bl	1818 <flatbuffers_buffer_start>
    dcec:	cmp	r0, #0
    dcf0:	beq	dd00 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x34>
    dcf4:	mvn	r0, #0
    dcf8:	str	r0, [sp]
    dcfc:	b	dd0c <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x40>
    dd00:	ldr	r0, [sp, #4]
    dd04:	bl	184c <MyGame_Example_Monster_start>
    dd08:	str	r0, [sp]
    dd0c:	ldr	r0, [sp]
    dd10:	mov	sp, fp
    dd14:	pop	{fp, pc}

0000dd18 <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>:
    dd18:	push	{fp, lr}
    dd1c:	mov	fp, sp
    dd20:	sub	sp, sp, #24
    dd24:	str	r0, [fp, #-4]
    dd28:	ldr	r0, [fp, #-4]
    dd2c:	ldr	r1, [fp, #-4]
    dd30:	ldr	r2, [fp, #-4]
    dd34:	str	r0, [fp, #-8]
    dd38:	mov	r0, r2
    dd3c:	str	r1, [sp, #12]
    dd40:	bl	18bc <MyGame_Example_Monster_end>
    dd44:	ldr	r1, [sp, #12]
    dd48:	str	r0, [sp, #8]
    dd4c:	mov	r0, r1
    dd50:	ldr	r1, [sp, #8]
    dd54:	bl	191c <flatbuffers_buffer_end>
    dd58:	ldr	r1, [fp, #-8]
    dd5c:	str	r0, [sp, #4]
    dd60:	mov	r0, r1
    dd64:	ldr	r1, [sp, #4]
    dd68:	bl	14270 <MyGame_Example_Monster_testnestedflatbuffer_add>
    dd6c:	mov	sp, fp
    dd70:	pop	{fp, pc}

0000dd74 <MyGame_Example_Monster_testnestedflatbuffer_as_root>:
    dd74:	push	{fp, lr}
    dd78:	mov	fp, sp
    dd7c:	sub	sp, sp, #24
    dd80:	str	r0, [fp, #-4]
    dd84:	movw	r0, #0
    dd88:	movt	r0, #0
    dd8c:	str	r0, [fp, #-8]
    dd90:	ldr	r0, [fp, #-4]
    dd94:	bl	142dc <MyGame_Example_Monster_testnestedflatbuffer>
    dd98:	str	r0, [sp, #12]
    dd9c:	ldr	r0, [sp, #12]
    dda0:	movw	lr, #0
    dda4:	cmp	r0, lr
    dda8:	beq	ddc0 <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x4c>
    ddac:	ldr	r0, [sp, #12]
    ddb0:	ldr	r1, [fp, #-8]
    ddb4:	bl	2674 <flatbuffers_has_identifier>
    ddb8:	cmp	r0, #0
    ddbc:	bne	ddcc <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x58>
    ddc0:	movw	r0, #0
    ddc4:	str	r0, [sp, #8]
    ddc8:	b	ddec <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x78>
    ddcc:	ldr	r0, [sp, #12]
    ddd0:	ldr	r1, [sp, #12]
    ddd4:	str	r0, [sp, #4]
    ddd8:	mov	r0, r1
    dddc:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    dde0:	ldr	r1, [sp, #4]
    dde4:	add	r0, r1, r0
    dde8:	str	r0, [sp, #8]
    ddec:	ldr	r0, [sp, #8]
    ddf0:	mov	sp, fp
    ddf4:	pop	{fp, pc}

0000ddf8 <test_nested_buffer_first>:
    ddf8:	push	{fp, lr}
    ddfc:	mov	fp, sp
    de00:	sub	sp, sp, #72	; 0x48
    de04:	str	r0, [fp, #-8]
    de08:	ldr	r0, [fp, #-8]
    de0c:	bl	0 <flatcc_builder_reset>
    de10:	ldr	lr, [fp, #-8]
    de14:	str	r0, [fp, #-28]	; 0xffffffe4
    de18:	mov	r0, lr
    de1c:	bl	598c <MyGame_Example_Monster_start_as_root>
    de20:	ldr	lr, [fp, #-8]
    de24:	str	r0, [fp, #-32]	; 0xffffffe0
    de28:	mov	r0, lr
    de2c:	bl	dccc <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>
    de30:	ldr	lr, [fp, #-8]
    de34:	str	r0, [sp, #36]	; 0x24
    de38:	mov	r0, lr
    de3c:	movw	r1, #0
    de40:	movt	r1, #0
    de44:	bl	1870 <MyGame_Example_Monster_name_create_str>
    de48:	ldr	r1, [fp, #-8]
    de4c:	str	r0, [sp, #32]
    de50:	mov	r0, r1
    de54:	bl	dd18 <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>
    de58:	ldr	r1, [fp, #-8]
    de5c:	str	r0, [sp, #28]
    de60:	mov	r0, r1
    de64:	movw	r1, #10
    de68:	sxth	r1, r1
    de6c:	bl	59d8 <MyGame_Example_Monster_hp_add>
    de70:	ldr	r1, [fp, #-8]
    de74:	str	r0, [sp, #24]
    de78:	mov	r0, r1
    de7c:	movw	r1, #0
    de80:	movt	r1, #0
    de84:	bl	1870 <MyGame_Example_Monster_name_create_str>
    de88:	ldr	r1, [fp, #-8]
    de8c:	str	r0, [sp, #20]
    de90:	mov	r0, r1
    de94:	bl	6538 <MyGame_Example_Monster_end_as_root>
    de98:	ldr	r1, [fp, #-8]
    de9c:	str	r0, [sp, #16]
    dea0:	mov	r0, r1
    dea4:	sub	r1, fp, #16
    dea8:	bl	0 <flatcc_builder_get_direct_buffer>
    deac:	str	r0, [fp, #-12]
    deb0:	ldr	r1, [fp, #-12]
    deb4:	ldr	r2, [fp, #-16]
    deb8:	movw	r0, #0
    debc:	movt	r0, #0
    dec0:	ldr	r3, [r0]
    dec4:	movw	r0, #0
    dec8:	movt	r0, #0
    decc:	bl	b0c <hexdump>
    ded0:	ldr	r0, [fp, #-12]
    ded4:	bl	280 <MyGame_Example_Monster_as_root>
    ded8:	str	r0, [fp, #-20]	; 0xffffffec
    dedc:	ldr	r0, [fp, #-20]	; 0xffffffec
    dee0:	bl	3a0c <MyGame_Example_Monster_name>
    dee4:	movw	r1, #0
    dee8:	movt	r1, #0
    deec:	bl	0 <strcmp>
    def0:	cmp	r0, #0
    def4:	beq	df14 <test_nested_buffer_first+0x11c>
    def8:	movw	r0, #0
    defc:	movt	r0, #0
    df00:	bl	0 <printf>
    df04:	mvn	lr, #0
    df08:	str	lr, [fp, #-4]
    df0c:	str	r0, [sp, #12]
    df10:	b	dfc8 <test_nested_buffer_first+0x1d0>
    df14:	ldr	r0, [fp, #-20]	; 0xffffffec
    df18:	bl	dd74 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
    df1c:	str	r0, [fp, #-24]	; 0xffffffe8
    df20:	ldr	r0, [fp, #-20]	; 0xffffffec
    df24:	bl	2f8 <MyGame_Example_Monster_hp>
    df28:	sxth	r0, r0
    df2c:	cmp	r0, #10
    df30:	beq	df50 <test_nested_buffer_first+0x158>
    df34:	movw	r0, #0
    df38:	movt	r0, #0
    df3c:	bl	0 <printf>
    df40:	mvn	lr, #0
    df44:	str	lr, [fp, #-4]
    df48:	str	r0, [sp, #8]
    df4c:	b	dfc8 <test_nested_buffer_first+0x1d0>
    df50:	ldr	r0, [fp, #-24]	; 0xffffffe8
    df54:	bl	3a0c <MyGame_Example_Monster_name>
    df58:	movw	lr, #0
    df5c:	cmp	r0, lr
    df60:	beq	df68 <test_nested_buffer_first+0x170>
    df64:	b	df88 <test_nested_buffer_first+0x190>
    df68:	movw	r0, #0
    df6c:	movt	r0, #0
    df70:	movw	r1, #0
    df74:	movt	r1, #0
    df78:	movw	r2, #2241	; 0x8c1
    df7c:	movw	r3, #0
    df80:	movt	r3, #0
    df84:	bl	0 <__assert_fail>
    df88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    df8c:	bl	3a0c <MyGame_Example_Monster_name>
    df90:	movw	r1, #0
    df94:	movt	r1, #0
    df98:	bl	0 <strcmp>
    df9c:	cmp	r0, #0
    dfa0:	beq	dfc0 <test_nested_buffer_first+0x1c8>
    dfa4:	movw	r0, #0
    dfa8:	movt	r0, #0
    dfac:	bl	0 <printf>
    dfb0:	mvn	lr, #0
    dfb4:	str	lr, [fp, #-4]
    dfb8:	str	r0, [sp, #4]
    dfbc:	b	dfc8 <test_nested_buffer_first+0x1d0>
    dfc0:	movw	r0, #0
    dfc4:	str	r0, [fp, #-4]
    dfc8:	ldr	r0, [fp, #-4]
    dfcc:	mov	sp, fp
    dfd0:	pop	{fp, pc}

0000dfd4 <test_nested_buffer_using_nest>:
    dfd4:	push	{r4, r5, fp, lr}
    dfd8:	add	fp, sp, #8
    dfdc:	sub	sp, sp, #1120	; 0x460
    dfe0:	str	r0, [fp, #-16]
    dfe4:	ldr	r0, [fp, #-16]
    dfe8:	bl	0 <flatcc_builder_reset>
    dfec:	ldr	lr, [fp, #-16]
    dff0:	str	r0, [sp, #64]	; 0x40
    dff4:	mov	r0, lr
    dff8:	bl	598c <MyGame_Example_Monster_start_as_root>
    dffc:	ldr	lr, [fp, #-16]
    e000:	str	r0, [sp, #60]	; 0x3c
    e004:	mov	r0, lr
    e008:	movw	r1, #0
    e00c:	movt	r1, #0
    e010:	bl	1870 <MyGame_Example_Monster_name_create_str>
    e014:	ldr	r1, [fp, #-16]
    e018:	str	r0, [sp, #56]	; 0x38
    e01c:	mov	r0, r1
    e020:	movw	r1, #42	; 0x2a
    e024:	sxth	r1, r1
    e028:	bl	d864 <MyGame_Example_Monster_mana_add>
    e02c:	ldr	r1, [fp, #-16]
    e030:	str	r0, [sp, #52]	; 0x34
    e034:	mov	r0, r1
    e038:	bl	6538 <MyGame_Example_Monster_end_as_root>
    e03c:	ldr	r1, [fp, #-16]
    e040:	str	r0, [sp, #48]	; 0x30
    e044:	mov	r0, r1
    e048:	bl	0 <flatcc_builder_get_buffer_size>
    e04c:	add	r1, sp, #84	; 0x54
    e050:	str	r0, [sp, #76]	; 0x4c
    e054:	ldr	r0, [fp, #-16]
    e058:	movw	r2, #1024	; 0x400
    e05c:	bl	0 <flatcc_builder_copy_buffer>
    e060:	movw	r1, #0
    e064:	cmp	r0, r1
    e068:	bne	e088 <test_nested_buffer_using_nest+0xb4>
    e06c:	movw	r0, #0
    e070:	movt	r0, #0
    e074:	bl	0 <printf>
    e078:	mvn	lr, #0
    e07c:	str	lr, [fp, #-12]
    e080:	str	r0, [sp, #44]	; 0x2c
    e084:	b	e260 <test_nested_buffer_using_nest+0x28c>
    e088:	ldr	r0, [fp, #-16]
    e08c:	bl	0 <flatcc_builder_reset>
    e090:	ldr	lr, [fp, #-16]
    e094:	str	r0, [sp, #40]	; 0x28
    e098:	mov	r0, lr
    e09c:	bl	598c <MyGame_Example_Monster_start_as_root>
    e0a0:	add	r1, sp, #84	; 0x54
    e0a4:	ldr	lr, [fp, #-16]
    e0a8:	ldr	r2, [sp, #76]	; 0x4c
    e0ac:	str	r0, [sp, #36]	; 0x24
    e0b0:	mov	r0, lr
    e0b4:	movw	lr, #0
    e0b8:	uxth	r3, lr
    e0bc:	bl	e26c <MyGame_Example_Monster_testnestedflatbuffer_nest>
    e0c0:	ldr	r1, [fp, #-16]
    e0c4:	str	r0, [sp, #32]
    e0c8:	mov	r0, r1
    e0cc:	movw	r1, #10
    e0d0:	sxth	r1, r1
    e0d4:	bl	59d8 <MyGame_Example_Monster_hp_add>
    e0d8:	ldr	r1, [fp, #-16]
    e0dc:	str	r0, [sp, #28]
    e0e0:	mov	r0, r1
    e0e4:	movw	r1, #0
    e0e8:	movt	r1, #0
    e0ec:	bl	1870 <MyGame_Example_Monster_name_create_str>
    e0f0:	ldr	r1, [fp, #-16]
    e0f4:	str	r0, [sp, #24]
    e0f8:	mov	r0, r1
    e0fc:	bl	6538 <MyGame_Example_Monster_end_as_root>
    e100:	ldr	r1, [fp, #-16]
    e104:	str	r0, [sp, #20]
    e108:	mov	r0, r1
    e10c:	add	r1, sp, #80	; 0x50
    e110:	bl	0 <flatcc_builder_get_direct_buffer>
    e114:	str	r0, [fp, #-20]	; 0xffffffec
    e118:	ldr	r1, [fp, #-20]	; 0xffffffec
    e11c:	ldr	r2, [sp, #80]	; 0x50
    e120:	movw	r0, #0
    e124:	movt	r0, #0
    e128:	ldr	r3, [r0]
    e12c:	movw	r0, #0
    e130:	movt	r0, #0
    e134:	bl	b0c <hexdump>
    e138:	ldr	r0, [fp, #-20]	; 0xffffffec
    e13c:	bl	280 <MyGame_Example_Monster_as_root>
    e140:	str	r0, [sp, #72]	; 0x48
    e144:	ldr	r0, [sp, #72]	; 0x48
    e148:	bl	3a0c <MyGame_Example_Monster_name>
    e14c:	movw	r1, #0
    e150:	movt	r1, #0
    e154:	bl	0 <strcmp>
    e158:	cmp	r0, #0
    e15c:	beq	e17c <test_nested_buffer_using_nest+0x1a8>
    e160:	movw	r0, #0
    e164:	movt	r0, #0
    e168:	bl	0 <printf>
    e16c:	mvn	lr, #0
    e170:	str	lr, [fp, #-12]
    e174:	str	r0, [sp, #16]
    e178:	b	e260 <test_nested_buffer_using_nest+0x28c>
    e17c:	ldr	r0, [sp, #72]	; 0x48
    e180:	bl	dd74 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
    e184:	str	r0, [sp, #68]	; 0x44
    e188:	ldr	r0, [sp, #72]	; 0x48
    e18c:	bl	2f8 <MyGame_Example_Monster_hp>
    e190:	sxth	r0, r0
    e194:	cmp	r0, #10
    e198:	beq	e1b8 <test_nested_buffer_using_nest+0x1e4>
    e19c:	movw	r0, #0
    e1a0:	movt	r0, #0
    e1a4:	bl	0 <printf>
    e1a8:	mvn	lr, #0
    e1ac:	str	lr, [fp, #-12]
    e1b0:	str	r0, [sp, #12]
    e1b4:	b	e260 <test_nested_buffer_using_nest+0x28c>
    e1b8:	ldr	r0, [sp, #68]	; 0x44
    e1bc:	bl	3a0c <MyGame_Example_Monster_name>
    e1c0:	movw	lr, #0
    e1c4:	cmp	r0, lr
    e1c8:	beq	e1d0 <test_nested_buffer_using_nest+0x1fc>
    e1cc:	b	e1f0 <test_nested_buffer_using_nest+0x21c>
    e1d0:	movw	r0, #0
    e1d4:	movt	r0, #0
    e1d8:	movw	r1, #0
    e1dc:	movt	r1, #0
    e1e0:	movw	r2, #2298	; 0x8fa
    e1e4:	movw	r3, #0
    e1e8:	movt	r3, #0
    e1ec:	bl	0 <__assert_fail>
    e1f0:	ldr	r0, [sp, #68]	; 0x44
    e1f4:	bl	3a0c <MyGame_Example_Monster_name>
    e1f8:	movw	r1, #0
    e1fc:	movt	r1, #0
    e200:	bl	0 <strcmp>
    e204:	cmp	r0, #0
    e208:	beq	e228 <test_nested_buffer_using_nest+0x254>
    e20c:	movw	r0, #0
    e210:	movt	r0, #0
    e214:	bl	0 <printf>
    e218:	mvn	lr, #0
    e21c:	str	lr, [fp, #-12]
    e220:	str	r0, [sp, #8]
    e224:	b	e260 <test_nested_buffer_using_nest+0x28c>
    e228:	ldr	r0, [sp, #68]	; 0x44
    e22c:	bl	3f5c <MyGame_Example_Monster_mana>
    e230:	sxth	r0, r0
    e234:	cmp	r0, #42	; 0x2a
    e238:	beq	e258 <test_nested_buffer_using_nest+0x284>
    e23c:	movw	r0, #0
    e240:	movt	r0, #0
    e244:	bl	0 <printf>
    e248:	mvn	lr, #0
    e24c:	str	lr, [fp, #-12]
    e250:	str	r0, [sp, #4]
    e254:	b	e260 <test_nested_buffer_using_nest+0x28c>
    e258:	movw	r0, #0
    e25c:	str	r0, [fp, #-12]
    e260:	ldr	r0, [fp, #-12]
    e264:	sub	sp, fp, #8
    e268:	pop	{r4, r5, fp, pc}

0000e26c <MyGame_Example_Monster_testnestedflatbuffer_nest>:
    e26c:	push	{fp, lr}
    e270:	mov	fp, sp
    e274:	sub	sp, sp, #56	; 0x38
    e278:	str	r0, [fp, #-4]
    e27c:	str	r1, [fp, #-8]
    e280:	str	r2, [fp, #-12]
    e284:	strh	r3, [fp, #-14]
    e288:	ldr	r0, [fp, #-4]
    e28c:	ldr	r1, [fp, #-4]
    e290:	ldr	r2, [fp, #-8]
    e294:	ldr	r3, [fp, #-12]
    e298:	ldrh	ip, [fp, #-14]
    e29c:	cmp	ip, #0
    e2a0:	str	r0, [fp, #-20]	; 0xffffffec
    e2a4:	str	r1, [fp, #-24]	; 0xffffffe8
    e2a8:	str	r2, [sp, #28]
    e2ac:	str	r3, [sp, #24]
    e2b0:	beq	e2c0 <MyGame_Example_Monster_testnestedflatbuffer_nest+0x54>
    e2b4:	ldrh	r0, [fp, #-14]
    e2b8:	str	r0, [sp, #20]
    e2bc:	b	e2cc <MyGame_Example_Monster_testnestedflatbuffer_nest+0x60>
    e2c0:	movw	r0, #8
    e2c4:	str	r0, [sp, #20]
    e2c8:	b	e2cc <MyGame_Example_Monster_testnestedflatbuffer_nest+0x60>
    e2cc:	ldr	r0, [sp, #20]
    e2d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    e2d4:	str	r0, [sp, #16]
    e2d8:	mov	r0, r1
    e2dc:	ldr	r1, [sp, #28]
    e2e0:	ldr	r2, [sp, #24]
    e2e4:	movw	r3, #1
    e2e8:	ldr	ip, [sp, #16]
    e2ec:	uxth	lr, ip
    e2f0:	str	lr, [sp]
    e2f4:	mvn	lr, #0
    e2f8:	str	lr, [sp, #4]
    e2fc:	bl	0 <flatcc_builder_create_vector>
    e300:	ldr	r1, [fp, #-20]	; 0xffffffec
    e304:	str	r0, [sp, #12]
    e308:	mov	r0, r1
    e30c:	ldr	r1, [sp, #12]
    e310:	bl	14270 <MyGame_Example_Monster_testnestedflatbuffer_add>
    e314:	mov	sp, fp
    e318:	pop	{fp, pc}

0000e31c <verify_include>:
    e31c:	sub	sp, sp, #4
    e320:	str	r0, [sp]
    e324:	movw	r0, #0
    e328:	add	sp, sp, #4
    e32c:	bx	lr

0000e330 <test_struct_buffer>:
    e330:	push	{fp, lr}
    e334:	mov	fp, sp
    e338:	sub	sp, sp, #160	; 0xa0
    e33c:	str	r0, [fp, #-8]
    e340:	ldr	r0, [fp, #-8]
    e344:	bl	0 <flatcc_builder_reset>
    e348:	vldr	d2, [pc, #672]	; e5f0 <test_struct_buffer+0x2c0>
    e34c:	ldr	lr, [fp, #-8]
    e350:	str	r0, [sp, #36]	; 0x24
    e354:	mov	r0, lr
    e358:	vmov.f32	s0, #112	; 0x3f800000  1.0
    e35c:	vmov.f32	s1, #0	; 0x40000000  2.0
    e360:	vmov.f32	s2, #8	; 0x40400000  3.0
    e364:	movw	lr, #8
    e368:	sxtb	r1, lr
    e36c:	movw	lr, #2730	; 0xaaa
    e370:	sxth	r2, lr
    e374:	movw	lr, #239	; 0xef
    e378:	sxtb	r3, lr
    e37c:	bl	e5f8 <MyGame_Example_Vec3_create_as_root>
    e380:	ldr	r1, [fp, #-8]
    e384:	str	r0, [sp, #32]
    e388:	mov	r0, r1
    e38c:	bl	0 <flatcc_builder_get_buffer_size>
    e390:	str	r0, [sp, #48]	; 0x30
    e394:	ldr	r0, [sp, #48]	; 0x30
    e398:	cmp	r0, #48	; 0x30
    e39c:	bne	e3a4 <test_struct_buffer+0x74>
    e3a0:	b	e3c4 <test_struct_buffer+0x94>
    e3a4:	movw	r0, #0
    e3a8:	movt	r0, #0
    e3ac:	movw	r1, #0
    e3b0:	movt	r1, #0
    e3b4:	movw	r2, #2339	; 0x923
    e3b8:	movw	r3, #0
    e3bc:	movt	r3, #0
    e3c0:	bl	0 <__assert_fail>
    e3c4:	ldr	r1, [sp, #48]	; 0x30
    e3c8:	movw	r0, #0
    e3cc:	movt	r0, #0
    e3d0:	bl	0 <printf>
    e3d4:	ldr	r1, [fp, #-8]
    e3d8:	str	r0, [sp, #28]
    e3dc:	mov	r0, r1
    e3e0:	bl	0 <flatcc_builder_get_emit_context>
    e3e4:	bl	e69c <flatcc_emitter_get_buffer_size>
    e3e8:	ldr	r1, [sp, #48]	; 0x30
    e3ec:	cmp	r0, r1
    e3f0:	bne	e3f8 <test_struct_buffer+0xc8>
    e3f4:	b	e418 <test_struct_buffer+0xe8>
    e3f8:	movw	r0, #0
    e3fc:	movt	r0, #0
    e400:	movw	r1, #0
    e404:	movt	r1, #0
    e408:	movw	r2, #2341	; 0x925
    e40c:	movw	r3, #0
    e410:	movt	r3, #0
    e414:	bl	0 <__assert_fail>
    e418:	add	r1, sp, #52	; 0x34
    e41c:	ldr	r0, [fp, #-8]
    e420:	movw	r2, #100	; 0x64
    e424:	bl	0 <flatcc_builder_copy_buffer>
    e428:	movw	r1, #0
    e42c:	cmp	r0, r1
    e430:	bne	e450 <test_struct_buffer+0x120>
    e434:	movw	r0, #0
    e438:	movt	r0, #0
    e43c:	bl	0 <printf>
    e440:	mvn	lr, #0
    e444:	str	lr, [fp, #-4]
    e448:	str	r0, [sp, #24]
    e44c:	b	e5e4 <test_struct_buffer+0x2b4>
    e450:	add	r1, sp, #52	; 0x34
    e454:	ldr	r2, [sp, #48]	; 0x30
    e458:	movw	r0, #0
    e45c:	movt	r0, #0
    e460:	ldr	r3, [r0]
    e464:	movw	r0, #0
    e468:	movt	r0, #0
    e46c:	bl	b0c <hexdump>
    e470:	add	r0, sp, #52	; 0x34
    e474:	movw	r1, #0
    e478:	movt	r1, #0
    e47c:	bl	2674 <flatbuffers_has_identifier>
    e480:	cmp	r0, #0
    e484:	bne	e4a4 <test_struct_buffer+0x174>
    e488:	movw	r0, #0
    e48c:	movt	r0, #0
    e490:	bl	0 <printf>
    e494:	mvn	lr, #0
    e498:	str	lr, [fp, #-4]
    e49c:	str	r0, [sp, #20]
    e4a0:	b	e5e4 <test_struct_buffer+0x2b4>
    e4a4:	add	r0, sp, #52	; 0x34
    e4a8:	movw	r1, #0
    e4ac:	movt	r1, #0
    e4b0:	bl	2674 <flatbuffers_has_identifier>
    e4b4:	cmp	r0, #0
    e4b8:	beq	e4d8 <test_struct_buffer+0x1a8>
    e4bc:	movw	r0, #0
    e4c0:	movt	r0, #0
    e4c4:	bl	0 <printf>
    e4c8:	mvn	lr, #0
    e4cc:	str	lr, [fp, #-4]
    e4d0:	str	r0, [sp, #16]
    e4d4:	b	e5e4 <test_struct_buffer+0x2b4>
    e4d8:	add	r0, sp, #52	; 0x34
    e4dc:	movw	r1, #0
    e4e0:	movt	r1, #0
    e4e4:	bl	2674 <flatbuffers_has_identifier>
    e4e8:	cmp	r0, #0
    e4ec:	bne	e50c <test_struct_buffer+0x1dc>
    e4f0:	movw	r0, #0
    e4f4:	movt	r0, #0
    e4f8:	bl	0 <printf>
    e4fc:	mvn	lr, #0
    e500:	str	lr, [fp, #-4]
    e504:	str	r0, [sp, #12]
    e508:	b	e5e4 <test_struct_buffer+0x2b4>
    e50c:	add	r0, sp, #52	; 0x34
    e510:	bl	e6b4 <MyGame_Example_Vec3_as_root>
    e514:	str	r0, [sp, #40]	; 0x28
    e518:	ldr	r0, [sp, #40]	; 0x28
    e51c:	str	r0, [sp, #44]	; 0x2c
    e520:	ldr	r0, [sp, #44]	; 0x2c
    e524:	bl	e72c <MyGame_Example_Vec3_from_pe>
    e528:	ldr	lr, [sp, #44]	; 0x2c
    e52c:	vldr	s0, [lr]
    e530:	vmov.f32	s2, #112	; 0x3f800000  1.0
    e534:	vcmp.f32	s0, s2
    e538:	vmrs	APSR_nzcv, fpscr
    e53c:	str	r0, [sp, #8]
    e540:	bne	e5c0 <test_struct_buffer+0x290>
    e544:	ldr	r0, [sp, #44]	; 0x2c
    e548:	vldr	s0, [r0, #4]
    e54c:	vmov.f32	s2, #0	; 0x40000000  2.0
    e550:	vcmp.f32	s0, s2
    e554:	vmrs	APSR_nzcv, fpscr
    e558:	bne	e5c0 <test_struct_buffer+0x290>
    e55c:	ldr	r0, [sp, #44]	; 0x2c
    e560:	vldr	s0, [r0, #8]
    e564:	vmov.f32	s2, #8	; 0x40400000  3.0
    e568:	vcmp.f32	s0, s2
    e56c:	vmrs	APSR_nzcv, fpscr
    e570:	bne	e5c0 <test_struct_buffer+0x290>
    e574:	vldr	d16, [pc, #116]	; e5f0 <test_struct_buffer+0x2c0>
    e578:	ldr	r0, [sp, #44]	; 0x2c
    e57c:	vldr	d17, [r0, #16]
    e580:	vcmp.f64	d17, d16
    e584:	vmrs	APSR_nzcv, fpscr
    e588:	bne	e5c0 <test_struct_buffer+0x290>
    e58c:	ldr	r0, [sp, #44]	; 0x2c
    e590:	ldrsb	r0, [r0, #24]
    e594:	cmp	r0, #8
    e598:	bne	e5c0 <test_struct_buffer+0x290>
    e59c:	ldr	r0, [sp, #44]	; 0x2c
    e5a0:	ldrsh	r0, [r0, #26]
    e5a4:	movw	r1, #2730	; 0xaaa
    e5a8:	cmp	r0, r1
    e5ac:	bne	e5c0 <test_struct_buffer+0x290>
    e5b0:	ldr	r0, [sp, #44]	; 0x2c
    e5b4:	ldrsb	r0, [r0, #28]
    e5b8:	cmn	r0, #17
    e5bc:	beq	e5dc <test_struct_buffer+0x2ac>
    e5c0:	movw	r0, #0
    e5c4:	movt	r0, #0
    e5c8:	bl	0 <printf>
    e5cc:	mvn	lr, #0
    e5d0:	str	lr, [fp, #-4]
    e5d4:	str	r0, [sp, #4]
    e5d8:	b	e5e4 <test_struct_buffer+0x2b4>
    e5dc:	movw	r0, #0
    e5e0:	str	r0, [fp, #-4]
    e5e4:	ldr	r0, [fp, #-4]
    e5e8:	mov	sp, fp
    e5ec:	pop	{fp, pc}
    e5f0:	.word	0xcccccccd
    e5f4:	.word	0x4010cccc

0000e5f8 <MyGame_Example_Vec3_create_as_root>:
    e5f8:	push	{fp, lr}
    e5fc:	mov	fp, sp
    e600:	sub	sp, sp, #48	; 0x30
    e604:	str	r0, [fp, #-4]
    e608:	vstr	s0, [fp, #-8]
    e60c:	vstr	s1, [fp, #-12]
    e610:	vstr	s2, [fp, #-16]
    e614:	vstr	d2, [sp, #24]
    e618:	strb	r1, [sp, #23]
    e61c:	strh	r2, [sp, #20]
    e620:	strb	r3, [sp, #19]
    e624:	ldr	r0, [fp, #-4]
    e628:	ldr	r1, [fp, #-4]
    e62c:	vldr	s0, [fp, #-8]
    e630:	vldr	s1, [fp, #-12]
    e634:	vldr	s2, [fp, #-16]
    e638:	vldr	d2, [sp, #24]
    e63c:	ldrb	r2, [sp, #23]
    e640:	ldrh	r3, [sp, #20]
    e644:	str	r0, [sp, #12]
    e648:	mov	r0, r1
    e64c:	sxtb	r1, r2
    e650:	sxth	r2, r3
    e654:	ldrsb	r3, [sp, #19]
    e658:	bl	143d8 <MyGame_Example_Vec3_create>
    e65c:	ldr	r1, [sp, #12]
    e660:	str	r0, [sp, #8]
    e664:	mov	r0, r1
    e668:	movw	r1, #0
    e66c:	movt	r1, #0
    e670:	movw	r2, #0
    e674:	uxth	r2, r2
    e678:	ldr	r3, [sp, #8]
    e67c:	movw	lr, #16
    e680:	uxth	lr, lr
    e684:	str	lr, [sp]
    e688:	movw	lr, #0
    e68c:	str	lr, [sp, #4]
    e690:	bl	0 <flatcc_builder_create_buffer>
    e694:	mov	sp, fp
    e698:	pop	{fp, pc}

0000e69c <flatcc_emitter_get_buffer_size>:
    e69c:	sub	sp, sp, #4
    e6a0:	str	r0, [sp]
    e6a4:	ldr	r0, [sp]
    e6a8:	ldr	r0, [r0, #24]
    e6ac:	add	sp, sp, #4
    e6b0:	bx	lr

0000e6b4 <MyGame_Example_Vec3_as_root>:
    e6b4:	push	{fp, lr}
    e6b8:	mov	fp, sp
    e6bc:	sub	sp, sp, #16
    e6c0:	str	r0, [fp, #-4]
    e6c4:	movw	r0, #0
    e6c8:	movt	r0, #0
    e6cc:	str	r0, [sp, #8]
    e6d0:	ldr	r0, [fp, #-4]
    e6d4:	movw	r1, #0
    e6d8:	cmp	r0, r1
    e6dc:	beq	e6f4 <MyGame_Example_Vec3_as_root+0x40>
    e6e0:	ldr	r0, [fp, #-4]
    e6e4:	ldr	r1, [sp, #8]
    e6e8:	bl	2674 <flatbuffers_has_identifier>
    e6ec:	cmp	r0, #0
    e6f0:	bne	e700 <MyGame_Example_Vec3_as_root+0x4c>
    e6f4:	movw	r0, #0
    e6f8:	str	r0, [sp, #4]
    e6fc:	b	e720 <MyGame_Example_Vec3_as_root+0x6c>
    e700:	ldr	r0, [fp, #-4]
    e704:	ldr	r1, [fp, #-4]
    e708:	str	r0, [sp]
    e70c:	mov	r0, r1
    e710:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    e714:	ldr	r1, [sp]
    e718:	add	r0, r1, r0
    e71c:	str	r0, [sp, #4]
    e720:	ldr	r0, [sp, #4]
    e724:	mov	sp, fp
    e728:	pop	{fp, pc}

0000e72c <MyGame_Example_Vec3_from_pe>:
    e72c:	sub	sp, sp, #4
    e730:	str	r0, [sp]
    e734:	ldr	r0, [sp]
    e738:	add	sp, sp, #4
    e73c:	bx	lr

0000e740 <test_typed_struct_buffer>:
    e740:	push	{fp, lr}
    e744:	mov	fp, sp
    e748:	sub	sp, sp, #176	; 0xb0
    e74c:	str	r0, [fp, #-8]
    e750:	ldr	r0, [fp, #-8]
    e754:	bl	0 <flatcc_builder_reset>
    e758:	vldr	d2, [pc, #880]	; ead0 <test_typed_struct_buffer+0x390>
    e75c:	ldr	lr, [fp, #-8]
    e760:	str	r0, [sp, #52]	; 0x34
    e764:	mov	r0, lr
    e768:	vmov.f32	s0, #112	; 0x3f800000  1.0
    e76c:	vmov.f32	s1, #0	; 0x40000000  2.0
    e770:	vmov.f32	s2, #8	; 0x40400000  3.0
    e774:	movw	lr, #8
    e778:	sxtb	r1, lr
    e77c:	movw	lr, #2730	; 0xaaa
    e780:	sxth	r2, lr
    e784:	movw	lr, #239	; 0xef
    e788:	sxtb	r3, lr
    e78c:	bl	eadc <MyGame_Example_Vec3_create_as_typed_root>
    e790:	ldr	r1, [fp, #-8]
    e794:	str	r0, [sp, #48]	; 0x30
    e798:	mov	r0, r1
    e79c:	bl	0 <flatcc_builder_get_buffer_size>
    e7a0:	str	r0, [sp, #64]	; 0x40
    e7a4:	ldr	r0, [sp, #64]	; 0x40
    e7a8:	cmp	r0, #48	; 0x30
    e7ac:	bne	e7b4 <test_typed_struct_buffer+0x74>
    e7b0:	b	e7d4 <test_typed_struct_buffer+0x94>
    e7b4:	movw	r0, #0
    e7b8:	movt	r0, #0
    e7bc:	movw	r1, #0
    e7c0:	movt	r1, #0
    e7c4:	movw	r2, #2388	; 0x954
    e7c8:	movw	r3, #0
    e7cc:	movt	r3, #0
    e7d0:	bl	0 <__assert_fail>
    e7d4:	ldr	r1, [sp, #64]	; 0x40
    e7d8:	movw	r0, #0
    e7dc:	movt	r0, #0
    e7e0:	bl	0 <printf>
    e7e4:	ldr	r1, [fp, #-8]
    e7e8:	str	r0, [sp, #44]	; 0x2c
    e7ec:	mov	r0, r1
    e7f0:	bl	0 <flatcc_builder_get_emit_context>
    e7f4:	bl	e69c <flatcc_emitter_get_buffer_size>
    e7f8:	ldr	r1, [sp, #64]	; 0x40
    e7fc:	cmp	r0, r1
    e800:	bne	e808 <test_typed_struct_buffer+0xc8>
    e804:	b	e828 <test_typed_struct_buffer+0xe8>
    e808:	movw	r0, #0
    e80c:	movt	r0, #0
    e810:	movw	r1, #0
    e814:	movt	r1, #0
    e818:	movw	r2, #2390	; 0x956
    e81c:	movw	r3, #0
    e820:	movt	r3, #0
    e824:	bl	0 <__assert_fail>
    e828:	add	r1, sp, #68	; 0x44
    e82c:	ldr	r0, [fp, #-8]
    e830:	movw	r2, #100	; 0x64
    e834:	bl	0 <flatcc_builder_copy_buffer>
    e838:	movw	r1, #0
    e83c:	cmp	r0, r1
    e840:	bne	e860 <test_typed_struct_buffer+0x120>
    e844:	movw	r0, #0
    e848:	movt	r0, #0
    e84c:	bl	0 <printf>
    e850:	mvn	lr, #0
    e854:	str	lr, [fp, #-4]
    e858:	str	r0, [sp, #40]	; 0x28
    e85c:	b	eac0 <test_typed_struct_buffer+0x380>
    e860:	add	r1, sp, #68	; 0x44
    e864:	ldr	r2, [sp, #64]	; 0x40
    e868:	movw	r0, #0
    e86c:	movt	r0, #0
    e870:	ldr	r3, [r0]
    e874:	movw	r0, #0
    e878:	movt	r0, #0
    e87c:	bl	b0c <hexdump>
    e880:	add	r0, sp, #68	; 0x44
    e884:	movw	r1, #0
    e888:	movt	r1, #0
    e88c:	bl	2674 <flatbuffers_has_identifier>
    e890:	cmp	r0, #0
    e894:	bne	e8b4 <test_typed_struct_buffer+0x174>
    e898:	movw	r0, #0
    e89c:	movt	r0, #0
    e8a0:	bl	0 <printf>
    e8a4:	mvn	lr, #0
    e8a8:	str	lr, [fp, #-4]
    e8ac:	str	r0, [sp, #36]	; 0x24
    e8b0:	b	eac0 <test_typed_struct_buffer+0x380>
    e8b4:	add	r0, sp, #68	; 0x44
    e8b8:	movw	r1, #0
    e8bc:	movt	r1, #0
    e8c0:	bl	2674 <flatbuffers_has_identifier>
    e8c4:	cmp	r0, #0
    e8c8:	beq	e8e8 <test_typed_struct_buffer+0x1a8>
    e8cc:	movw	r0, #0
    e8d0:	movt	r0, #0
    e8d4:	bl	0 <printf>
    e8d8:	mvn	lr, #0
    e8dc:	str	lr, [fp, #-4]
    e8e0:	str	r0, [sp, #32]
    e8e4:	b	eac0 <test_typed_struct_buffer+0x380>
    e8e8:	add	r0, sp, #68	; 0x44
    e8ec:	movw	r1, #0
    e8f0:	movt	r1, #0
    e8f4:	bl	2674 <flatbuffers_has_identifier>
    e8f8:	cmp	r0, #0
    e8fc:	bne	e91c <test_typed_struct_buffer+0x1dc>
    e900:	movw	r0, #0
    e904:	movt	r0, #0
    e908:	bl	0 <printf>
    e90c:	mvn	lr, #0
    e910:	str	lr, [fp, #-4]
    e914:	str	r0, [sp, #28]
    e918:	b	eac0 <test_typed_struct_buffer+0x380>
    e91c:	ldr	r1, [pc, #436]	; ead8 <test_typed_struct_buffer+0x398>
    e920:	add	r0, sp, #68	; 0x44
    e924:	bl	eb80 <MyGame_Example_Vec3_as_root_with_type_hash>
    e928:	movw	r1, #0
    e92c:	cmp	r0, r1
    e930:	bne	e950 <test_typed_struct_buffer+0x210>
    e934:	movw	r0, #0
    e938:	movt	r0, #0
    e93c:	bl	0 <printf>
    e940:	mvn	lr, #0
    e944:	str	lr, [fp, #-4]
    e948:	str	r0, [sp, #24]
    e94c:	b	eac0 <test_typed_struct_buffer+0x380>
    e950:	ldr	r2, [pc, #384]	; ead8 <test_typed_struct_buffer+0x398>
    e954:	add	r0, sp, #68	; 0x44
    e958:	ldr	r1, [sp, #64]	; 0x40
    e95c:	bl	ebf0 <MyGame_Example_Vec3_verify_as_root_with_type_hash>
    e960:	movw	r1, #0
    e964:	cmp	r1, r0
    e968:	beq	e988 <test_typed_struct_buffer+0x248>
    e96c:	movw	r0, #0
    e970:	movt	r0, #0
    e974:	bl	0 <printf>
    e978:	mvn	lr, #0
    e97c:	str	lr, [fp, #-4]
    e980:	str	r0, [sp, #20]
    e984:	b	eac0 <test_typed_struct_buffer+0x380>
    e988:	add	r0, sp, #68	; 0x44
    e98c:	bl	ec30 <MyGame_Example_Vec3_as_typed_root>
    e990:	str	r0, [sp, #56]	; 0x38
    e994:	ldr	r0, [sp, #56]	; 0x38
    e998:	movw	lr, #0
    e99c:	cmp	r0, lr
    e9a0:	bne	e9c0 <test_typed_struct_buffer+0x280>
    e9a4:	movw	r0, #0
    e9a8:	movt	r0, #0
    e9ac:	bl	0 <printf>
    e9b0:	mvn	lr, #0
    e9b4:	str	lr, [fp, #-4]
    e9b8:	str	r0, [sp, #16]
    e9bc:	b	eac0 <test_typed_struct_buffer+0x380>
    e9c0:	add	r0, sp, #68	; 0x44
    e9c4:	ldr	r1, [sp, #64]	; 0x40
    e9c8:	bl	eca0 <MyGame_Example_Vec3_verify_as_typed_root>
    e9cc:	movw	r1, #0
    e9d0:	cmp	r1, r0
    e9d4:	beq	e9f4 <test_typed_struct_buffer+0x2b4>
    e9d8:	movw	r0, #0
    e9dc:	movt	r0, #0
    e9e0:	bl	0 <printf>
    e9e4:	mvn	lr, #0
    e9e8:	str	lr, [fp, #-4]
    e9ec:	str	r0, [sp, #12]
    e9f0:	b	eac0 <test_typed_struct_buffer+0x380>
    e9f4:	ldr	r0, [sp, #56]	; 0x38
    e9f8:	str	r0, [sp, #60]	; 0x3c
    e9fc:	ldr	r0, [sp, #60]	; 0x3c
    ea00:	bl	e72c <MyGame_Example_Vec3_from_pe>
    ea04:	ldr	lr, [sp, #60]	; 0x3c
    ea08:	vldr	s0, [lr]
    ea0c:	vmov.f32	s2, #112	; 0x3f800000  1.0
    ea10:	vcmp.f32	s0, s2
    ea14:	vmrs	APSR_nzcv, fpscr
    ea18:	str	r0, [sp, #8]
    ea1c:	bne	ea9c <test_typed_struct_buffer+0x35c>
    ea20:	ldr	r0, [sp, #60]	; 0x3c
    ea24:	vldr	s0, [r0, #4]
    ea28:	vmov.f32	s2, #0	; 0x40000000  2.0
    ea2c:	vcmp.f32	s0, s2
    ea30:	vmrs	APSR_nzcv, fpscr
    ea34:	bne	ea9c <test_typed_struct_buffer+0x35c>
    ea38:	ldr	r0, [sp, #60]	; 0x3c
    ea3c:	vldr	s0, [r0, #8]
    ea40:	vmov.f32	s2, #8	; 0x40400000  3.0
    ea44:	vcmp.f32	s0, s2
    ea48:	vmrs	APSR_nzcv, fpscr
    ea4c:	bne	ea9c <test_typed_struct_buffer+0x35c>
    ea50:	vldr	d16, [pc, #120]	; ead0 <test_typed_struct_buffer+0x390>
    ea54:	ldr	r0, [sp, #60]	; 0x3c
    ea58:	vldr	d17, [r0, #16]
    ea5c:	vcmp.f64	d17, d16
    ea60:	vmrs	APSR_nzcv, fpscr
    ea64:	bne	ea9c <test_typed_struct_buffer+0x35c>
    ea68:	ldr	r0, [sp, #60]	; 0x3c
    ea6c:	ldrsb	r0, [r0, #24]
    ea70:	cmp	r0, #8
    ea74:	bne	ea9c <test_typed_struct_buffer+0x35c>
    ea78:	ldr	r0, [sp, #60]	; 0x3c
    ea7c:	ldrsh	r0, [r0, #26]
    ea80:	movw	r1, #2730	; 0xaaa
    ea84:	cmp	r0, r1
    ea88:	bne	ea9c <test_typed_struct_buffer+0x35c>
    ea8c:	ldr	r0, [sp, #60]	; 0x3c
    ea90:	ldrsb	r0, [r0, #28]
    ea94:	cmn	r0, #17
    ea98:	beq	eab8 <test_typed_struct_buffer+0x378>
    ea9c:	movw	r0, #0
    eaa0:	movt	r0, #0
    eaa4:	bl	0 <printf>
    eaa8:	mvn	lr, #0
    eaac:	str	lr, [fp, #-4]
    eab0:	str	r0, [sp, #4]
    eab4:	b	eac0 <test_typed_struct_buffer+0x380>
    eab8:	movw	r0, #0
    eabc:	str	r0, [fp, #-4]
    eac0:	ldr	r0, [fp, #-4]
    eac4:	mov	sp, fp
    eac8:	pop	{fp, pc}
    eacc:	nop	{0}
    ead0:	.word	0xcccccccd
    ead4:	.word	0x4010cccc
    ead8:	.word	0xa8f53ed2

0000eadc <MyGame_Example_Vec3_create_as_typed_root>:
    eadc:	push	{fp, lr}
    eae0:	mov	fp, sp
    eae4:	sub	sp, sp, #48	; 0x30
    eae8:	str	r0, [fp, #-4]
    eaec:	vstr	s0, [fp, #-8]
    eaf0:	vstr	s1, [fp, #-12]
    eaf4:	vstr	s2, [fp, #-16]
    eaf8:	vstr	d2, [sp, #24]
    eafc:	strb	r1, [sp, #23]
    eb00:	strh	r2, [sp, #20]
    eb04:	strb	r3, [sp, #19]
    eb08:	ldr	r0, [fp, #-4]
    eb0c:	ldr	r1, [fp, #-4]
    eb10:	vldr	s0, [fp, #-8]
    eb14:	vldr	s1, [fp, #-12]
    eb18:	vldr	s2, [fp, #-16]
    eb1c:	vldr	d2, [sp, #24]
    eb20:	ldrb	r2, [sp, #23]
    eb24:	ldrh	r3, [sp, #20]
    eb28:	str	r0, [sp, #12]
    eb2c:	mov	r0, r1
    eb30:	sxtb	r1, r2
    eb34:	sxth	r2, r3
    eb38:	ldrsb	r3, [sp, #19]
    eb3c:	bl	143d8 <MyGame_Example_Vec3_create>
    eb40:	ldr	r1, [sp, #12]
    eb44:	str	r0, [sp, #8]
    eb48:	mov	r0, r1
    eb4c:	movw	r1, #0
    eb50:	movt	r1, #0
    eb54:	movw	r2, #0
    eb58:	uxth	r2, r2
    eb5c:	ldr	r3, [sp, #8]
    eb60:	movw	lr, #16
    eb64:	uxth	lr, lr
    eb68:	str	lr, [sp]
    eb6c:	movw	lr, #0
    eb70:	str	lr, [sp, #4]
    eb74:	bl	0 <flatcc_builder_create_buffer>
    eb78:	mov	sp, fp
    eb7c:	pop	{fp, pc}

0000eb80 <MyGame_Example_Vec3_as_root_with_type_hash>:
    eb80:	push	{fp, lr}
    eb84:	mov	fp, sp
    eb88:	sub	sp, sp, #16
    eb8c:	str	r0, [fp, #-4]
    eb90:	str	r1, [sp, #8]
    eb94:	ldr	r0, [fp, #-4]
    eb98:	movw	r1, #0
    eb9c:	cmp	r0, r1
    eba0:	beq	ebb8 <MyGame_Example_Vec3_as_root_with_type_hash+0x38>
    eba4:	ldr	r0, [fp, #-4]
    eba8:	ldr	r1, [sp, #8]
    ebac:	bl	1db4 <flatbuffers_has_type_hash>
    ebb0:	cmp	r0, #0
    ebb4:	bne	ebc4 <MyGame_Example_Vec3_as_root_with_type_hash+0x44>
    ebb8:	movw	r0, #0
    ebbc:	str	r0, [sp, #4]
    ebc0:	b	ebe4 <MyGame_Example_Vec3_as_root_with_type_hash+0x64>
    ebc4:	ldr	r0, [fp, #-4]
    ebc8:	ldr	r1, [fp, #-4]
    ebcc:	str	r0, [sp]
    ebd0:	mov	r0, r1
    ebd4:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    ebd8:	ldr	r1, [sp]
    ebdc:	add	r0, r1, r0
    ebe0:	str	r0, [sp, #4]
    ebe4:	ldr	r0, [sp, #4]
    ebe8:	mov	sp, fp
    ebec:	pop	{fp, pc}

0000ebf0 <MyGame_Example_Vec3_verify_as_root_with_type_hash>:
    ebf0:	push	{fp, lr}
    ebf4:	mov	fp, sp
    ebf8:	sub	sp, sp, #16
    ebfc:	str	r0, [fp, #-4]
    ec00:	str	r1, [sp, #8]
    ec04:	str	r2, [sp, #4]
    ec08:	ldr	r0, [fp, #-4]
    ec0c:	ldr	r1, [sp, #8]
    ec10:	ldr	r2, [sp, #4]
    ec14:	movw	r3, #32
    ec18:	movw	ip, #16
    ec1c:	uxth	ip, ip
    ec20:	str	ip, [sp]
    ec24:	bl	0 <flatcc_verify_struct_as_typed_root>
    ec28:	mov	sp, fp
    ec2c:	pop	{fp, pc}

0000ec30 <MyGame_Example_Vec3_as_typed_root>:
    ec30:	push	{fp, lr}
    ec34:	mov	fp, sp
    ec38:	sub	sp, sp, #16
    ec3c:	str	r0, [fp, #-4]
    ec40:	ldr	r0, [fp, #-4]
    ec44:	movw	r1, #0
    ec48:	cmp	r0, r1
    ec4c:	beq	ec64 <MyGame_Example_Vec3_as_typed_root+0x34>
    ec50:	ldr	r1, [pc, #68]	; ec9c <MyGame_Example_Vec3_as_typed_root+0x6c>
    ec54:	ldr	r0, [fp, #-4]
    ec58:	bl	1db4 <flatbuffers_has_type_hash>
    ec5c:	cmp	r0, #0
    ec60:	bne	ec70 <MyGame_Example_Vec3_as_typed_root+0x40>
    ec64:	movw	r0, #0
    ec68:	str	r0, [sp, #8]
    ec6c:	b	ec90 <MyGame_Example_Vec3_as_typed_root+0x60>
    ec70:	ldr	r0, [fp, #-4]
    ec74:	ldr	r1, [fp, #-4]
    ec78:	str	r0, [sp, #4]
    ec7c:	mov	r0, r1
    ec80:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    ec84:	ldr	r1, [sp, #4]
    ec88:	add	r0, r1, r0
    ec8c:	str	r0, [sp, #8]
    ec90:	ldr	r0, [sp, #8]
    ec94:	mov	sp, fp
    ec98:	pop	{fp, pc}
    ec9c:	.word	0xa8f53ed2

0000eca0 <MyGame_Example_Vec3_verify_as_typed_root>:
    eca0:	push	{fp, lr}
    eca4:	mov	fp, sp
    eca8:	sub	sp, sp, #16
    ecac:	ldr	r2, [pc, #40]	; ecdc <MyGame_Example_Vec3_verify_as_typed_root+0x3c>
    ecb0:	str	r0, [fp, #-4]
    ecb4:	str	r1, [sp, #8]
    ecb8:	ldr	r0, [fp, #-4]
    ecbc:	ldr	r1, [sp, #8]
    ecc0:	movw	r3, #32
    ecc4:	movw	ip, #16
    ecc8:	uxth	ip, ip
    eccc:	str	ip, [sp]
    ecd0:	bl	0 <flatcc_verify_struct_as_typed_root>
    ecd4:	mov	sp, fp
    ecd8:	pop	{fp, pc}
    ecdc:	.word	0xa8f53ed2

0000ece0 <gen_monster_benchmark>:
    ece0:	push	{fp, lr}
    ece4:	mov	fp, sp
    ece8:	sub	sp, sp, #72	; 0x48
    ecec:	str	r0, [fp, #-4]
    ecf0:	movw	r0, #0
    ecf4:	movt	r0, #0
    ecf8:	ldrb	r1, [r0]
    ecfc:	strb	r1, [fp, #-14]
    ed00:	ldrb	r1, [r0, #1]
    ed04:	strb	r1, [fp, #-13]
    ed08:	ldrb	r1, [r0, #2]
    ed0c:	strb	r1, [fp, #-12]
    ed10:	ldrb	r1, [r0, #3]
    ed14:	strb	r1, [fp, #-11]
    ed18:	ldrb	r1, [r0, #4]
    ed1c:	strb	r1, [fp, #-10]
    ed20:	ldrb	r1, [r0, #5]
    ed24:	strb	r1, [fp, #-9]
    ed28:	ldrb	r1, [r0, #6]
    ed2c:	strb	r1, [fp, #-8]
    ed30:	ldrb	r1, [r0, #7]
    ed34:	strb	r1, [fp, #-7]
    ed38:	ldrb	r1, [r0, #8]
    ed3c:	strb	r1, [fp, #-6]
    ed40:	ldrb	r0, [r0, #9]
    ed44:	strb	r0, [fp, #-5]
    ed48:	ldr	r0, [fp, #-4]
    ed4c:	bl	0 <flatcc_builder_reset>
    ed50:	ldr	r1, [fp, #-4]
    ed54:	str	r0, [fp, #-32]	; 0xffffffe0
    ed58:	mov	r0, r1
    ed5c:	bl	598c <MyGame_Example_Monster_start_as_root>
    ed60:	ldr	r1, [fp, #-4]
    ed64:	str	r0, [sp, #36]	; 0x24
    ed68:	mov	r0, r1
    ed6c:	movw	r1, #80	; 0x50
    ed70:	sxth	r1, r1
    ed74:	bl	59d8 <MyGame_Example_Monster_hp_add>
    ed78:	ldr	r1, [fp, #-4]
    ed7c:	str	r0, [sp, #32]
    ed80:	mov	r0, r1
    ed84:	bl	5a60 <MyGame_Example_Monster_pos_start>
    ed88:	vldr	s0, [pc, #328]	; eed8 <gen_monster_benchmark+0x1f8>
    ed8c:	str	r0, [fp, #-20]	; 0xffffffec
    ed90:	ldr	r0, [fp, #-20]	; 0xffffffec
    ed94:	vmov.f32	s2, #112	; 0x3f800000  1.0
    ed98:	vstr	s2, [r0]
    ed9c:	ldr	r0, [fp, #-20]	; 0xffffffec
    eda0:	vmov.f32	s2, #0	; 0x40000000  2.0
    eda4:	vstr	s2, [r0, #4]
    eda8:	ldr	r0, [fp, #-20]	; 0xffffffec
    edac:	vstr	s0, [r0, #8]
    edb0:	ldr	r0, [fp, #-4]
    edb4:	bl	5a90 <MyGame_Example_Monster_pos_end>
    edb8:	ldr	r1, [fp, #-4]
    edbc:	str	r0, [sp, #28]
    edc0:	mov	r0, r1
    edc4:	movw	r1, #0
    edc8:	movt	r1, #0
    edcc:	bl	1870 <MyGame_Example_Monster_name_create_str>
    edd0:	sub	r1, fp, #14
    edd4:	ldr	lr, [fp, #-4]
    edd8:	str	r0, [sp, #24]
    eddc:	mov	r0, lr
    ede0:	movw	r2, #10
    ede4:	bl	5b28 <MyGame_Example_Monster_inventory_create>
    ede8:	ldr	r1, [fp, #-4]
    edec:	str	r0, [sp, #20]
    edf0:	mov	r0, r1
    edf4:	bl	5b80 <MyGame_Example_Monster_test4_start>
    edf8:	ldr	r1, [fp, #-4]
    edfc:	str	r0, [sp, #16]
    ee00:	mov	r0, r1
    ee04:	movw	r1, #1
    ee08:	bl	5ba0 <MyGame_Example_Monster_test4_extend>
    ee0c:	str	r0, [fp, #-24]	; 0xffffffe8
    ee10:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ee14:	movw	r1, #16
    ee18:	strh	r1, [r0]
    ee1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ee20:	movw	r1, #32
    ee24:	strb	r1, [r0, #2]
    ee28:	ldr	r0, [fp, #-4]
    ee2c:	movw	r1, #2
    ee30:	bl	5ba0 <MyGame_Example_Monster_test4_extend>
    ee34:	str	r0, [fp, #-24]	; 0xffffffe8
    ee38:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ee3c:	movw	r1, #48	; 0x30
    ee40:	strh	r1, [r0]
    ee44:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ee48:	movw	r1, #64	; 0x40
    ee4c:	strb	r1, [r0, #2]
    ee50:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ee54:	movw	r1, #80	; 0x50
    ee58:	strh	r1, [r0, #4]
    ee5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ee60:	movw	r1, #96	; 0x60
    ee64:	strb	r1, [r0, #6]
    ee68:	ldr	r0, [fp, #-4]
    ee6c:	movw	r1, #112	; 0x70
    ee70:	sxth	r1, r1
    ee74:	movw	r2, #128	; 0x80
    ee78:	sxtb	r2, r2
    ee7c:	bl	5bc8 <MyGame_Example_Monster_test4_push_create>
    ee80:	movw	r1, #401	; 0x191
    ee84:	strh	r1, [fp, #-28]	; 0xffffffe4
    ee88:	movw	r1, #145	; 0x91
    ee8c:	strb	r1, [fp, #-26]	; 0xffffffe6
    ee90:	ldr	r1, [fp, #-4]
    ee94:	str	r0, [sp, #12]
    ee98:	mov	r0, r1
    ee9c:	sub	r1, fp, #28
    eea0:	bl	5c30 <MyGame_Example_Monster_test4_push>
    eea4:	ldr	r1, [fp, #-4]
    eea8:	str	r0, [sp, #8]
    eeac:	mov	r0, r1
    eeb0:	bl	5d98 <MyGame_Example_Monster_test4_end>
    eeb4:	ldr	r1, [fp, #-4]
    eeb8:	str	r0, [sp, #4]
    eebc:	mov	r0, r1
    eec0:	bl	6538 <MyGame_Example_Monster_end_as_root>
    eec4:	movw	r1, #0
    eec8:	str	r0, [sp]
    eecc:	mov	r0, r1
    eed0:	mov	sp, fp
    eed4:	pop	{fp, pc}
    eed8:	.word	0xc04ccccd

0000eedc <time_monster>:
    eedc:	push	{fp, lr}
    eee0:	mov	fp, sp
    eee4:	sub	sp, sp, #48	; 0x30
    eee8:	ldr	r1, [pc, #156]	; ef8c <time_monster+0xb0>
    eeec:	str	r0, [fp, #-4]
    eef0:	str	r1, [sp, #20]
    eef4:	movw	r0, #0
    eef8:	movt	r0, #0
    eefc:	bl	0 <printf>
    ef00:	str	r0, [sp, #8]
    ef04:	bl	ef90 <elapsed_realtime>
    ef08:	vstr	d0, [fp, #-16]
    ef0c:	movw	r0, #0
    ef10:	str	r0, [sp, #12]
    ef14:	ldr	r0, [pc, #112]	; ef8c <time_monster+0xb0>
    ef18:	ldr	r1, [sp, #12]
    ef1c:	cmp	r1, r0
    ef20:	bge	ef40 <time_monster+0x64>
    ef24:	ldr	r0, [fp, #-4]
    ef28:	bl	ece0 <gen_monster_benchmark>
    ef2c:	str	r0, [sp, #4]
    ef30:	ldr	r0, [sp, #12]
    ef34:	add	r0, r0, #1
    ef38:	str	r0, [sp, #12]
    ef3c:	b	ef14 <time_monster+0x38>
    ef40:	ldr	r0, [fp, #-4]
    ef44:	bl	0 <flatcc_builder_get_buffer_size>
    ef48:	str	r0, [sp, #16]
    ef4c:	bl	ef90 <elapsed_realtime>
    ef50:	ldr	r2, [pc, #52]	; ef8c <time_monster+0xb0>
    ef54:	vstr	d0, [sp, #24]
    ef58:	vldr	d0, [fp, #-16]
    ef5c:	vldr	d1, [sp, #24]
    ef60:	ldr	r1, [sp, #16]
    ef64:	movw	r0, #0
    ef68:	movt	r0, #0
    ef6c:	movw	r3, #0
    ef70:	movt	r3, #0
    ef74:	bl	f028 <show_benchmark>
    ef78:	movw	r1, #0
    ef7c:	str	r0, [sp]
    ef80:	mov	r0, r1
    ef84:	mov	sp, fp
    ef88:	pop	{fp, pc}
    ef8c:	.word	0x000f4240

0000ef90 <elapsed_realtime>:
    ef90:	push	{fp, lr}
    ef94:	mov	fp, sp
    ef98:	sub	sp, sp, #16
    ef9c:	add	r0, sp, #8
    efa0:	movw	r1, #0
    efa4:	bl	0 <gettimeofday>
    efa8:	movw	r1, #0
    efac:	movt	r1, #0
    efb0:	ldr	r1, [r1]
    efb4:	cmp	r1, #0
    efb8:	str	r0, [sp, #4]
    efbc:	bne	efd8 <elapsed_realtime+0x48>
    efc0:	ldr	r0, [sp, #8]
    efc4:	movw	r1, #0
    efc8:	movt	r1, #0
    efcc:	str	r0, [r1]
    efd0:	ldr	r0, [sp, #12]
    efd4:	str	r0, [r1, #4]
    efd8:	vldr	d16, [pc, #64]	; f020 <elapsed_realtime+0x90>
    efdc:	ldr	r0, [sp, #8]
    efe0:	movw	r1, #0
    efe4:	movt	r1, #0
    efe8:	ldr	r2, [r1]
    efec:	sub	r0, r0, r2
    eff0:	vmov	s0, r0
    eff4:	vcvt.f64.s32	d17, s0
    eff8:	ldr	r0, [sp, #12]
    effc:	ldr	r1, [r1, #4]
    f000:	sub	r0, r0, r1
    f004:	vmov	s0, r0
    f008:	vcvt.f64.s32	d18, s0
    f00c:	vdiv.f64	d16, d18, d16
    f010:	vadd.f64	d0, d17, d16
    f014:	mov	sp, fp
    f018:	pop	{fp, pc}
    f01c:	nop	{0}
    f020:	.word	0x00000000
    f024:	.word	0x412e8480

0000f028 <show_benchmark>:
    f028:	push	{fp, lr}
    f02c:	mov	fp, sp
    f030:	sub	sp, sp, #104	; 0x68
    f034:	str	r0, [fp, #-4]
    f038:	vstr	d0, [fp, #-16]
    f03c:	vstr	d1, [fp, #-24]	; 0xffffffe8
    f040:	str	r1, [fp, #-28]	; 0xffffffe4
    f044:	str	r2, [fp, #-32]	; 0xffffffe0
    f048:	str	r3, [fp, #-36]	; 0xffffffdc
    f04c:	vldr	d0, [fp, #-24]	; 0xffffffe8
    f050:	vldr	d1, [fp, #-16]
    f054:	vsub.f64	d0, d0, d1
    f058:	vstr	d0, [fp, #-48]	; 0xffffffd0
    f05c:	ldr	r1, [fp, #-4]
    f060:	movw	r0, #0
    f064:	movt	r0, #0
    f068:	bl	0 <printf>
    f06c:	vldr	d0, [fp, #-48]	; 0xffffffd0
    f070:	movw	r1, #0
    f074:	movt	r1, #0
    f078:	str	r0, [sp, #44]	; 0x2c
    f07c:	mov	r0, r1
    f080:	vmov	r2, r3, d0
    f084:	bl	0 <printf>
    f088:	ldr	r1, [fp, #-32]	; 0xffffffe0
    f08c:	movw	r2, #0
    f090:	movt	r2, #0
    f094:	str	r0, [sp, #40]	; 0x28
    f098:	mov	r0, r2
    f09c:	bl	0 <printf>
    f0a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    f0a4:	movw	r2, #0
    f0a8:	movt	r2, #0
    f0ac:	str	r0, [sp, #36]	; 0x24
    f0b0:	mov	r0, r2
    f0b4:	bl	0 <printf>
    f0b8:	vldr	d0, [pc, #416]	; f260 <show_benchmark+0x238>
    f0bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    f0c0:	vmov	s4, r1
    f0c4:	vcvt.f64.s32	d1, s4
    f0c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    f0cc:	vmov	s4, r1
    f0d0:	vcvt.f64.u32	d16, s4
    f0d4:	vmul.f64	d16, d1, d16
    f0d8:	vdiv.f64	d16, d16, d0
    f0dc:	vldr	d0, [fp, #-48]	; 0xffffffd0
    f0e0:	vdiv.f64	d16, d16, d0
    f0e4:	movw	r1, #0
    f0e8:	movt	r1, #0
    f0ec:	str	r0, [sp, #32]
    f0f0:	mov	r0, r1
    f0f4:	vmov	r2, r3, d16
    f0f8:	bl	0 <printf>
    f0fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    f100:	vmov	s4, r1
    f104:	vcvt.f64.s32	d16, s4
    f108:	vldr	d0, [fp, #-48]	; 0xffffffd0
    f10c:	vdiv.f64	d16, d16, d0
    f110:	movw	r1, #0
    f114:	movt	r1, #0
    f118:	str	r0, [sp, #28]
    f11c:	mov	r0, r1
    f120:	vmov	r2, r3, d16
    f124:	bl	0 <printf>
    f128:	ldr	r1, [fp, #-36]	; 0xffffffdc
    f12c:	movw	r2, #0
    f130:	cmp	r1, r2
    f134:	str	r0, [sp, #24]
    f138:	beq	f16c <show_benchmark+0x144>
    f13c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f140:	cmp	r0, #1
    f144:	beq	f16c <show_benchmark+0x144>
    f148:	ldr	r1, [fp, #-36]	; 0xffffffdc
    f14c:	vldr	d16, [fp, #-48]	; 0xffffffd0
    f150:	vmov.f64	d17, #112	; 0x3f800000  1.0
    f154:	vdiv.f64	d16, d17, d16
    f158:	movw	r0, #0
    f15c:	movt	r0, #0
    f160:	vmov	r2, r3, d16
    f164:	bl	0 <printf>
    f168:	str	r0, [sp, #20]
    f16c:	vldr	d16, [pc, #244]	; f268 <show_benchmark+0x240>
    f170:	vldr	d17, [pc, #248]	; f270 <show_benchmark+0x248>
    f174:	vldr	d18, [fp, #-48]	; 0xffffffd0
    f178:	vmul.f64	d17, d18, d17
    f17c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f180:	vmov	s0, r0
    f184:	vcvt.f64.s32	d18, s0
    f188:	vdiv.f64	d17, d17, d18
    f18c:	vstr	d17, [sp, #48]	; 0x30
    f190:	vldr	d17, [sp, #48]	; 0x30
    f194:	vcmpe.f64	d17, d16
    f198:	vmrs	APSR_nzcv, fpscr
    f19c:	bpl	f1bc <show_benchmark+0x194>
    f1a0:	vldr	d16, [sp, #48]	; 0x30
    f1a4:	movw	r0, #0
    f1a8:	movt	r0, #0
    f1ac:	vmov	r2, r3, d16
    f1b0:	bl	0 <printf>
    f1b4:	str	r0, [sp, #16]
    f1b8:	b	f254 <show_benchmark+0x22c>
    f1bc:	vldr	d16, [pc, #156]	; f260 <show_benchmark+0x238>
    f1c0:	vldr	d17, [sp, #48]	; 0x30
    f1c4:	vcmpe.f64	d17, d16
    f1c8:	vmrs	APSR_nzcv, fpscr
    f1cc:	bpl	f1f4 <show_benchmark+0x1cc>
    f1d0:	vldr	d16, [pc, #144]	; f268 <show_benchmark+0x240>
    f1d4:	vldr	d17, [sp, #48]	; 0x30
    f1d8:	vdiv.f64	d16, d17, d16
    f1dc:	movw	r0, #0
    f1e0:	movt	r0, #0
    f1e4:	vmov	r2, r3, d16
    f1e8:	bl	0 <printf>
    f1ec:	str	r0, [sp, #12]
    f1f0:	b	f250 <show_benchmark+0x228>
    f1f4:	vldr	d16, [pc, #116]	; f270 <show_benchmark+0x248>
    f1f8:	vldr	d17, [sp, #48]	; 0x30
    f1fc:	vcmpe.f64	d17, d16
    f200:	vmrs	APSR_nzcv, fpscr
    f204:	bpl	f22c <show_benchmark+0x204>
    f208:	vldr	d16, [pc, #80]	; f260 <show_benchmark+0x238>
    f20c:	vldr	d17, [sp, #48]	; 0x30
    f210:	vdiv.f64	d16, d17, d16
    f214:	movw	r0, #0
    f218:	movt	r0, #0
    f21c:	vmov	r2, r3, d16
    f220:	bl	0 <printf>
    f224:	str	r0, [sp, #8]
    f228:	b	f24c <show_benchmark+0x224>
    f22c:	vldr	d16, [pc, #60]	; f270 <show_benchmark+0x248>
    f230:	vldr	d17, [sp, #48]	; 0x30
    f234:	vdiv.f64	d16, d17, d16
    f238:	movw	r0, #0
    f23c:	movt	r0, #0
    f240:	vmov	r2, r3, d16
    f244:	bl	0 <printf>
    f248:	str	r0, [sp, #4]
    f24c:	b	f250 <show_benchmark+0x228>
    f250:	b	f254 <show_benchmark+0x22c>
    f254:	movw	r0, #0
    f258:	mov	sp, fp
    f25c:	pop	{fp, pc}
    f260:	.word	0x00000000
    f264:	.word	0x412e8480
    f268:	.word	0x00000000
    f26c:	.word	0x408f4000
    f270:	.word	0x00000000
    f274:	.word	0x41cdcd65

0000f278 <gen_struct_buffer_benchmark>:
    f278:	push	{fp, lr}
    f27c:	mov	fp, sp
    f280:	sub	sp, sp, #32
    f284:	str	r0, [fp, #-8]
    f288:	ldr	r0, [fp, #-8]
    f28c:	bl	0 <flatcc_builder_reset>
    f290:	vldr	d2, [pc, #320]	; f3d8 <gen_struct_buffer_benchmark+0x160>
    f294:	ldr	lr, [fp, #-8]
    f298:	str	r0, [sp, #8]
    f29c:	mov	r0, lr
    f2a0:	vmov.f32	s0, #112	; 0x3f800000  1.0
    f2a4:	vmov.f32	s1, #0	; 0x40000000  2.0
    f2a8:	vmov.f32	s2, #8	; 0x40400000  3.0
    f2ac:	movw	lr, #8
    f2b0:	sxtb	r1, lr
    f2b4:	movw	lr, #2730	; 0xaaa
    f2b8:	sxth	r2, lr
    f2bc:	movw	lr, #239	; 0xef
    f2c0:	sxtb	r3, lr
    f2c4:	bl	e5f8 <MyGame_Example_Vec3_create_as_root>
    f2c8:	ldr	r1, [fp, #-8]
    f2cc:	str	r0, [sp, #4]
    f2d0:	mov	r0, r1
    f2d4:	movw	r1, #0
    f2d8:	bl	0 <flatcc_builder_get_direct_buffer>
    f2dc:	str	r0, [fp, #-12]
    f2e0:	ldr	r0, [fp, #-12]
    f2e4:	movw	r1, #0
    f2e8:	cmp	r0, r1
    f2ec:	bne	f2fc <gen_struct_buffer_benchmark+0x84>
    f2f0:	mvn	r0, #0
    f2f4:	str	r0, [fp, #-4]
    f2f8:	b	f3c8 <gen_struct_buffer_benchmark+0x150>
    f2fc:	ldr	r0, [fp, #-12]
    f300:	movw	r1, #0
    f304:	bl	f3e0 <MyGame_Example_Vec3_as_root_with_identifier>
    f308:	str	r0, [sp, #12]
    f30c:	ldr	r0, [sp, #12]
    f310:	str	r0, [sp, #16]
    f314:	ldr	r0, [sp, #16]
    f318:	bl	e72c <MyGame_Example_Vec3_from_pe>
    f31c:	ldr	r1, [sp, #16]
    f320:	vldr	s0, [r1]
    f324:	vmov.f32	s2, #112	; 0x3f800000  1.0
    f328:	vcmp.f32	s0, s2
    f32c:	vmrs	APSR_nzcv, fpscr
    f330:	str	r0, [sp]
    f334:	bne	f3b4 <gen_struct_buffer_benchmark+0x13c>
    f338:	ldr	r0, [sp, #16]
    f33c:	vldr	s0, [r0, #4]
    f340:	vmov.f32	s2, #0	; 0x40000000  2.0
    f344:	vcmp.f32	s0, s2
    f348:	vmrs	APSR_nzcv, fpscr
    f34c:	bne	f3b4 <gen_struct_buffer_benchmark+0x13c>
    f350:	ldr	r0, [sp, #16]
    f354:	vldr	s0, [r0, #8]
    f358:	vmov.f32	s2, #8	; 0x40400000  3.0
    f35c:	vcmp.f32	s0, s2
    f360:	vmrs	APSR_nzcv, fpscr
    f364:	bne	f3b4 <gen_struct_buffer_benchmark+0x13c>
    f368:	vldr	d16, [pc, #104]	; f3d8 <gen_struct_buffer_benchmark+0x160>
    f36c:	ldr	r0, [sp, #16]
    f370:	vldr	d17, [r0, #16]
    f374:	vcmp.f64	d17, d16
    f378:	vmrs	APSR_nzcv, fpscr
    f37c:	bne	f3b4 <gen_struct_buffer_benchmark+0x13c>
    f380:	ldr	r0, [sp, #16]
    f384:	ldrsb	r0, [r0, #24]
    f388:	cmp	r0, #8
    f38c:	bne	f3b4 <gen_struct_buffer_benchmark+0x13c>
    f390:	ldr	r0, [sp, #16]
    f394:	ldrsh	r0, [r0, #26]
    f398:	movw	r1, #2730	; 0xaaa
    f39c:	cmp	r0, r1
    f3a0:	bne	f3b4 <gen_struct_buffer_benchmark+0x13c>
    f3a4:	ldr	r0, [sp, #16]
    f3a8:	ldrsb	r0, [r0, #28]
    f3ac:	cmn	r0, #17
    f3b0:	beq	f3c0 <gen_struct_buffer_benchmark+0x148>
    f3b4:	mvn	r0, #0
    f3b8:	str	r0, [fp, #-4]
    f3bc:	b	f3c8 <gen_struct_buffer_benchmark+0x150>
    f3c0:	movw	r0, #0
    f3c4:	str	r0, [fp, #-4]
    f3c8:	ldr	r0, [fp, #-4]
    f3cc:	mov	sp, fp
    f3d0:	pop	{fp, pc}
    f3d4:	nop	{0}
    f3d8:	.word	0xcccccccd
    f3dc:	.word	0x4010cccc

0000f3e0 <MyGame_Example_Vec3_as_root_with_identifier>:
    f3e0:	push	{fp, lr}
    f3e4:	mov	fp, sp
    f3e8:	sub	sp, sp, #16
    f3ec:	str	r0, [fp, #-4]
    f3f0:	str	r1, [sp, #8]
    f3f4:	ldr	r0, [fp, #-4]
    f3f8:	movw	r1, #0
    f3fc:	cmp	r0, r1
    f400:	beq	f418 <MyGame_Example_Vec3_as_root_with_identifier+0x38>
    f404:	ldr	r0, [fp, #-4]
    f408:	ldr	r1, [sp, #8]
    f40c:	bl	2674 <flatbuffers_has_identifier>
    f410:	cmp	r0, #0
    f414:	bne	f424 <MyGame_Example_Vec3_as_root_with_identifier+0x44>
    f418:	movw	r0, #0
    f41c:	str	r0, [sp, #4]
    f420:	b	f444 <MyGame_Example_Vec3_as_root_with_identifier+0x64>
    f424:	ldr	r0, [fp, #-4]
    f428:	ldr	r1, [fp, #-4]
    f42c:	str	r0, [sp]
    f430:	mov	r0, r1
    f434:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
    f438:	ldr	r1, [sp]
    f43c:	add	r0, r1, r0
    f440:	str	r0, [sp, #4]
    f444:	ldr	r0, [sp, #4]
    f448:	mov	sp, fp
    f44c:	pop	{fp, pc}

0000f450 <time_struct_buffer>:
    f450:	push	{fp, lr}
    f454:	mov	fp, sp
    f458:	sub	sp, sp, #56	; 0x38
    f45c:	ldr	r1, [pc, #200]	; f52c <time_struct_buffer+0xdc>
    f460:	str	r0, [fp, #-4]
    f464:	str	r1, [sp, #28]
    f468:	movw	r0, #0
    f46c:	str	r0, [sp, #16]
    f470:	movw	r0, #0
    f474:	movt	r0, #0
    f478:	bl	0 <printf>
    f47c:	str	r0, [sp, #12]
    f480:	bl	ef90 <elapsed_realtime>
    f484:	vstr	d0, [fp, #-16]
    f488:	movw	r0, #0
    f48c:	str	r0, [sp, #20]
    f490:	ldr	r0, [pc, #148]	; f52c <time_struct_buffer+0xdc>
    f494:	ldr	r1, [sp, #20]
    f498:	cmp	r1, r0
    f49c:	bge	f4c4 <time_struct_buffer+0x74>
    f4a0:	ldr	r0, [fp, #-4]
    f4a4:	bl	f278 <gen_struct_buffer_benchmark>
    f4a8:	ldr	lr, [sp, #16]
    f4ac:	orr	r0, lr, r0
    f4b0:	str	r0, [sp, #16]
    f4b4:	ldr	r0, [sp, #20]
    f4b8:	add	r0, r0, #1
    f4bc:	str	r0, [sp, #20]
    f4c0:	b	f490 <time_struct_buffer+0x40>
    f4c4:	bl	ef90 <elapsed_realtime>
    f4c8:	vstr	d0, [fp, #-24]	; 0xffffffe8
    f4cc:	ldr	r0, [fp, #-4]
    f4d0:	bl	0 <flatcc_builder_get_buffer_size>
    f4d4:	str	r0, [sp, #24]
    f4d8:	ldr	r0, [sp, #16]
    f4dc:	cmp	r0, #0
    f4e0:	beq	f4f4 <time_struct_buffer+0xa4>
    f4e4:	movw	r0, #0
    f4e8:	movt	r0, #0
    f4ec:	bl	0 <printf>
    f4f0:	str	r0, [sp, #8]
    f4f4:	ldr	r2, [pc, #48]	; f52c <time_struct_buffer+0xdc>
    f4f8:	vldr	d0, [fp, #-16]
    f4fc:	vldr	d1, [fp, #-24]	; 0xffffffe8
    f500:	ldr	r1, [sp, #24]
    f504:	movw	r0, #0
    f508:	movt	r0, #0
    f50c:	movw	r3, #0
    f510:	movt	r3, #0
    f514:	bl	f028 <show_benchmark>
    f518:	ldr	r1, [sp, #16]
    f51c:	str	r0, [sp, #4]
    f520:	mov	r0, r1
    f524:	mov	sp, fp
    f528:	pop	{fp, pc}
    f52c:	.word	0x000f4240

0000f530 <main>:
    f530:	push	{r4, r5, fp, lr}
    f534:	add	fp, sp, #8
    f538:	sub	sp, sp, #352	; 0x160
    f53c:	movw	r2, #0
    f540:	str	r2, [fp, #-12]
    f544:	str	r0, [fp, #-16]
    f548:	str	r1, [fp, #-20]	; 0xffffffec
    f54c:	add	r0, sp, #108	; 0x6c
    f550:	str	r0, [sp, #104]	; 0x68
    f554:	ldr	r0, [sp, #104]	; 0x68
    f558:	bl	0 <flatcc_builder_init>
    f55c:	movw	r1, #0
    f560:	movt	r1, #0
    f564:	str	r0, [sp, #100]	; 0x64
    f568:	mov	r0, r1
    f56c:	bl	0 <printf>
    f570:	ldr	r1, [sp, #104]	; 0x68
    f574:	str	r0, [sp, #96]	; 0x60
    f578:	mov	r0, r1
    f57c:	bl	2100 <test_table_with_emptystruct>
    f580:	cmp	r0, #0
    f584:	beq	f5a4 <main+0x74>
    f588:	movw	r0, #0
    f58c:	movt	r0, #0
    f590:	bl	0 <printf>
    f594:	mvn	lr, #0
    f598:	str	lr, [fp, #-12]
    f59c:	str	r0, [sp, #92]	; 0x5c
    f5a0:	b	f97c <main+0x44c>
    f5a4:	ldr	r0, [sp, #104]	; 0x68
    f5a8:	bl	638 <test_enums>
    f5ac:	cmp	r0, #0
    f5b0:	beq	f5d0 <main+0xa0>
    f5b4:	movw	r0, #0
    f5b8:	movt	r0, #0
    f5bc:	bl	0 <printf>
    f5c0:	mvn	lr, #0
    f5c4:	str	lr, [fp, #-12]
    f5c8:	str	r0, [sp, #88]	; 0x58
    f5cc:	b	f97c <main+0x44c>
    f5d0:	ldr	r0, [sp, #104]	; 0x68
    f5d4:	bl	16a8 <test_empty_monster>
    f5d8:	cmp	r0, #0
    f5dc:	beq	f5fc <main+0xcc>
    f5e0:	movw	r0, #0
    f5e4:	movt	r0, #0
    f5e8:	bl	0 <printf>
    f5ec:	mvn	lr, #0
    f5f0:	str	lr, [fp, #-12]
    f5f4:	str	r0, [sp, #84]	; 0x54
    f5f8:	b	f97c <main+0x44c>
    f5fc:	ldr	r0, [sp, #104]	; 0x68
    f600:	bl	6578 <test_monster>
    f604:	cmp	r0, #0
    f608:	beq	f628 <main+0xf8>
    f60c:	movw	r0, #0
    f610:	movt	r0, #0
    f614:	bl	0 <printf>
    f618:	mvn	lr, #0
    f61c:	str	lr, [fp, #-12]
    f620:	str	r0, [sp, #80]	; 0x50
    f624:	b	f97c <main+0x44c>
    f628:	ldr	r0, [sp, #104]	; 0x68
    f62c:	bl	663c <test_monster_with_size>
    f630:	cmp	r0, #0
    f634:	beq	f654 <main+0x124>
    f638:	movw	r0, #0
    f63c:	movt	r0, #0
    f640:	bl	0 <printf>
    f644:	mvn	lr, #0
    f648:	str	lr, [fp, #-12]
    f64c:	str	r0, [sp, #76]	; 0x4c
    f650:	b	f97c <main+0x44c>
    f654:	ldr	r0, [sp, #104]	; 0x68
    f658:	bl	67d8 <test_string>
    f65c:	cmp	r0, #0
    f660:	beq	f680 <main+0x150>
    f664:	movw	r0, #0
    f668:	movt	r0, #0
    f66c:	bl	0 <printf>
    f670:	mvn	lr, #0
    f674:	str	lr, [fp, #-12]
    f678:	str	r0, [sp, #72]	; 0x48
    f67c:	b	f97c <main+0x44c>
    f680:	ldr	r0, [sp, #104]	; 0x68
    f684:	bl	e330 <test_struct_buffer>
    f688:	cmp	r0, #0
    f68c:	beq	f6ac <main+0x17c>
    f690:	movw	r0, #0
    f694:	movt	r0, #0
    f698:	bl	0 <printf>
    f69c:	mvn	lr, #0
    f6a0:	str	lr, [fp, #-12]
    f6a4:	str	r0, [sp, #68]	; 0x44
    f6a8:	b	f97c <main+0x44c>
    f6ac:	ldr	r0, [sp, #104]	; 0x68
    f6b0:	bl	19b4 <test_typed_empty_monster>
    f6b4:	cmp	r0, #0
    f6b8:	beq	f6d8 <main+0x1a8>
    f6bc:	movw	r0, #0
    f6c0:	movt	r0, #0
    f6c4:	bl	0 <printf>
    f6c8:	mvn	lr, #0
    f6cc:	str	lr, [fp, #-12]
    f6d0:	str	r0, [sp, #64]	; 0x40
    f6d4:	b	f97c <main+0x44c>
    f6d8:	ldr	r0, [sp, #104]	; 0x68
    f6dc:	bl	2204 <test_typed_table_with_emptystruct>
    f6e0:	cmp	r0, #0
    f6e4:	beq	f704 <main+0x1d4>
    f6e8:	movw	r0, #0
    f6ec:	movt	r0, #0
    f6f0:	bl	0 <printf>
    f6f4:	mvn	lr, #0
    f6f8:	str	lr, [fp, #-12]
    f6fc:	str	r0, [sp, #60]	; 0x3c
    f700:	b	f97c <main+0x44c>
    f704:	ldr	r0, [sp, #104]	; 0x68
    f708:	bl	e740 <test_typed_struct_buffer>
    f70c:	cmp	r0, #0
    f710:	beq	f730 <main+0x200>
    f714:	movw	r0, #0
    f718:	movt	r0, #0
    f71c:	bl	0 <printf>
    f720:	mvn	lr, #0
    f724:	str	lr, [fp, #-12]
    f728:	str	r0, [sp, #56]	; 0x38
    f72c:	b	f97c <main+0x44c>
    f730:	ldr	r0, [sp, #104]	; 0x68
    f734:	bl	9c98 <test_clone_slice>
    f738:	cmp	r0, #0
    f73c:	beq	f75c <main+0x22c>
    f740:	movw	r0, #0
    f744:	movt	r0, #0
    f748:	bl	0 <printf>
    f74c:	mvn	lr, #0
    f750:	str	lr, [fp, #-12]
    f754:	str	r0, [sp, #52]	; 0x34
    f758:	b	f97c <main+0x44c>
    f75c:	ldr	r0, [sp, #104]	; 0x68
    f760:	bl	d5e0 <test_add_set_defaults>
    f764:	cmp	r0, #0
    f768:	beq	f788 <main+0x258>
    f76c:	movw	r0, #0
    f770:	movt	r0, #0
    f774:	bl	0 <printf>
    f778:	mvn	lr, #0
    f77c:	str	lr, [fp, #-12]
    f780:	str	r0, [sp, #48]	; 0x30
    f784:	b	f97c <main+0x44c>
    f788:	ldr	r0, [sp, #104]	; 0x68
    f78c:	bl	a82c <test_create_add_field>
    f790:	cmp	r0, #0
    f794:	beq	f7b4 <main+0x284>
    f798:	movw	r0, #0
    f79c:	movt	r0, #0
    f7a0:	bl	0 <printf>
    f7a4:	mvn	lr, #0
    f7a8:	str	lr, [fp, #-12]
    f7ac:	str	r0, [sp, #44]	; 0x2c
    f7b0:	b	f97c <main+0x44c>
    f7b4:	ldr	r0, [sp, #104]	; 0x68
    f7b8:	bl	ac2c <test_union_vector>
    f7bc:	cmp	r0, #0
    f7c0:	beq	f7e0 <main+0x2b0>
    f7c4:	movw	r0, #0
    f7c8:	movt	r0, #0
    f7cc:	bl	0 <printf>
    f7d0:	mvn	lr, #0
    f7d4:	str	lr, [fp, #-12]
    f7d8:	str	r0, [sp, #40]	; 0x28
    f7dc:	b	f97c <main+0x44c>
    f7e0:	ldr	r0, [sp, #104]	; 0x68
    f7e4:	bl	98a4 <test_basic_sort>
    f7e8:	cmp	r0, #0
    f7ec:	beq	f80c <main+0x2dc>
    f7f0:	movw	r0, #0
    f7f4:	movt	r0, #0
    f7f8:	bl	0 <printf>
    f7fc:	mvn	lr, #0
    f800:	str	lr, [fp, #-12]
    f804:	str	r0, [sp, #36]	; 0x24
    f808:	b	f97c <main+0x44c>
    f80c:	ldr	r0, [sp, #104]	; 0x68
    f810:	bl	6bcc <test_sort_find>
    f814:	cmp	r0, #0
    f818:	beq	f838 <main+0x308>
    f81c:	movw	r0, #0
    f820:	movt	r0, #0
    f824:	bl	0 <printf>
    f828:	mvn	lr, #0
    f82c:	str	lr, [fp, #-12]
    f830:	str	r0, [sp, #32]
    f834:	b	f97c <main+0x44c>
    f838:	ldr	r0, [sp, #104]	; 0x68
    f83c:	bl	7460 <test_scan>
    f840:	cmp	r0, #0
    f844:	beq	f864 <main+0x334>
    f848:	movw	r0, #0
    f84c:	movt	r0, #0
    f850:	bl	0 <printf>
    f854:	mvn	lr, #0
    f858:	str	lr, [fp, #-12]
    f85c:	str	r0, [sp, #28]
    f860:	b	f97c <main+0x44c>
    f864:	ldr	r0, [sp, #104]	; 0x68
    f868:	bl	daf0 <test_nested_buffer>
    f86c:	cmp	r0, #0
    f870:	beq	f890 <main+0x360>
    f874:	movw	r0, #0
    f878:	movt	r0, #0
    f87c:	bl	0 <printf>
    f880:	mvn	lr, #0
    f884:	str	lr, [fp, #-12]
    f888:	str	r0, [sp, #24]
    f88c:	b	f97c <main+0x44c>
    f890:	ldr	r0, [sp, #104]	; 0x68
    f894:	bl	ddf8 <test_nested_buffer_first>
    f898:	cmp	r0, #0
    f89c:	beq	f8bc <main+0x38c>
    f8a0:	movw	r0, #0
    f8a4:	movt	r0, #0
    f8a8:	bl	0 <printf>
    f8ac:	mvn	lr, #0
    f8b0:	str	lr, [fp, #-12]
    f8b4:	str	r0, [sp, #20]
    f8b8:	b	f97c <main+0x44c>
    f8bc:	ldr	r0, [sp, #104]	; 0x68
    f8c0:	bl	dfd4 <test_nested_buffer_using_nest>
    f8c4:	cmp	r0, #0
    f8c8:	beq	f8e8 <main+0x3b8>
    f8cc:	movw	r0, #0
    f8d0:	movt	r0, #0
    f8d4:	bl	0 <printf>
    f8d8:	mvn	lr, #0
    f8dc:	str	lr, [fp, #-12]
    f8e0:	str	r0, [sp, #16]
    f8e4:	b	f97c <main+0x44c>
    f8e8:	ldr	r0, [sp, #104]	; 0x68
    f8ec:	bl	e31c <verify_include>
    f8f0:	cmp	r0, #0
    f8f4:	beq	f914 <main+0x3e4>
    f8f8:	movw	r0, #0
    f8fc:	movt	r0, #0
    f900:	bl	0 <printf>
    f904:	mvn	lr, #0
    f908:	str	lr, [fp, #-12]
    f90c:	str	r0, [sp, #12]
    f910:	b	f97c <main+0x44c>
    f914:	ldr	r0, [sp, #104]	; 0x68
    f918:	bl	650 <test_type_aliases>
    f91c:	cmp	r0, #0
    f920:	beq	f940 <main+0x410>
    f924:	movw	r0, #0
    f928:	movt	r0, #0
    f92c:	bl	0 <printf>
    f930:	mvn	lr, #0
    f934:	str	lr, [fp, #-12]
    f938:	str	r0, [sp, #8]
    f93c:	b	f97c <main+0x44c>
    f940:	ldr	r0, [sp, #104]	; 0x68
    f944:	bl	b86c <test_mixed_type_union>
    f948:	cmp	r0, #0
    f94c:	beq	f96c <main+0x43c>
    f950:	movw	r0, #0
    f954:	movt	r0, #0
    f958:	bl	0 <printf>
    f95c:	mvn	lr, #0
    f960:	str	lr, [fp, #-12]
    f964:	str	r0, [sp, #4]
    f968:	b	f97c <main+0x44c>
    f96c:	ldr	r0, [sp, #104]	; 0x68
    f970:	bl	0 <flatcc_builder_clear>
    f974:	movw	r0, #0
    f978:	str	r0, [fp, #-12]
    f97c:	ldr	r0, [fp, #-12]
    f980:	sub	sp, fp, #8
    f984:	pop	{r4, r5, fp, pc}

0000f988 <__flatbuffers_uoffset_read_from_pe>:
    f988:	push	{fp, lr}
    f98c:	mov	fp, sp
    f990:	sub	sp, sp, #8
    f994:	str	r0, [sp, #4]
    f998:	ldr	r0, [sp, #4]
    f99c:	ldr	r0, [r0]
    f9a0:	bl	f9ac <__flatbuffers_uoffset_cast_from_pe>
    f9a4:	mov	sp, fp
    f9a8:	pop	{fp, pc}

0000f9ac <__flatbuffers_uoffset_cast_from_pe>:
    f9ac:	sub	sp, sp, #4
    f9b0:	str	r0, [sp]
    f9b4:	ldr	r0, [sp]
    f9b8:	add	sp, sp, #4
    f9bc:	bx	lr

0000f9c0 <__flatbuffers_soffset_read_from_pe>:
    f9c0:	push	{fp, lr}
    f9c4:	mov	fp, sp
    f9c8:	sub	sp, sp, #8
    f9cc:	str	r0, [sp, #4]
    f9d0:	ldr	r0, [sp, #4]
    f9d4:	ldr	r0, [r0]
    f9d8:	bl	fa34 <__flatbuffers_soffset_cast_from_pe>
    f9dc:	mov	sp, fp
    f9e0:	pop	{fp, pc}

0000f9e4 <__flatbuffers_voffset_read_from_pe>:
    f9e4:	push	{fp, lr}
    f9e8:	mov	fp, sp
    f9ec:	sub	sp, sp, #8
    f9f0:	str	r0, [sp, #4]
    f9f4:	ldr	r0, [sp, #4]
    f9f8:	ldrh	r0, [r0]
    f9fc:	bl	fa48 <__flatbuffers_voffset_cast_from_pe>
    fa00:	uxth	r0, r0
    fa04:	mov	sp, fp
    fa08:	pop	{fp, pc}

0000fa0c <flatbuffers_int16_read_from_pe>:
    fa0c:	push	{fp, lr}
    fa10:	mov	fp, sp
    fa14:	sub	sp, sp, #8
    fa18:	str	r0, [sp, #4]
    fa1c:	ldr	r0, [sp, #4]
    fa20:	ldrsh	r0, [r0]
    fa24:	bl	fa5c <flatbuffers_int16_cast_from_pe>
    fa28:	sxth	r0, r0
    fa2c:	mov	sp, fp
    fa30:	pop	{fp, pc}

0000fa34 <__flatbuffers_soffset_cast_from_pe>:
    fa34:	sub	sp, sp, #4
    fa38:	str	r0, [sp]
    fa3c:	ldr	r0, [sp]
    fa40:	add	sp, sp, #4
    fa44:	bx	lr

0000fa48 <__flatbuffers_voffset_cast_from_pe>:
    fa48:	sub	sp, sp, #4
    fa4c:	strh	r0, [sp, #2]
    fa50:	ldrh	r0, [sp, #2]
    fa54:	add	sp, sp, #4
    fa58:	bx	lr

0000fa5c <flatbuffers_int16_cast_from_pe>:
    fa5c:	sub	sp, sp, #4
    fa60:	strh	r0, [sp, #2]
    fa64:	ldrsh	r0, [sp, #2]
    fa68:	add	sp, sp, #4
    fa6c:	bx	lr

0000fa70 <MyGame_Example_TypeAliases_create>:
    fa70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa74:	add	fp, sp, #28
    fa78:	sub	sp, sp, #68	; 0x44
    fa7c:	ldr	ip, [fp, #36]	; 0x24
    fa80:	ldr	lr, [fp, #32]
    fa84:	ldr	r4, [fp, #28]
    fa88:	ldr	r5, [fp, #24]
    fa8c:	ldr	r6, [fp, #44]	; 0x2c
    fa90:	ldr	r7, [fp, #40]	; 0x28
    fa94:	ldr	r8, [fp, #16]
    fa98:	ldr	r9, [fp, #12]
    fa9c:	ldr	sl, [fp, #8]
    faa0:	str	r0, [fp, #-36]	; 0xffffffdc
    faa4:	strb	r1, [fp, #-37]	; 0xffffffdb
    faa8:	strb	r2, [fp, #-38]	; 0xffffffda
    faac:	strh	r3, [fp, #-40]	; 0xffffffd8
    fab0:	strh	sl, [fp, #-42]	; 0xffffffd6
    fab4:	str	r4, [sp, #44]	; 0x2c
    fab8:	str	r5, [sp, #40]	; 0x28
    fabc:	str	ip, [sp, #36]	; 0x24
    fac0:	str	lr, [sp, #32]
    fac4:	vstr	s0, [sp, #28]
    fac8:	vstr	d1, [sp, #16]
    facc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fad0:	str	r7, [sp, #12]
    fad4:	str	r8, [sp, #8]
    fad8:	str	r6, [sp, #4]
    fadc:	str	r9, [sp]
    fae0:	bl	fc08 <MyGame_Example_TypeAliases_start>
    fae4:	cmp	r0, #0
    fae8:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    faec:	ldr	r0, [fp, #-36]	; 0xffffffdc
    faf0:	ldr	r2, [sp, #40]	; 0x28
    faf4:	ldr	r3, [sp, #44]	; 0x2c
    faf8:	bl	fc2c <MyGame_Example_TypeAliases_i64_add>
    fafc:	cmp	r0, #0
    fb00:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fb04:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fb08:	ldr	r2, [sp, #32]
    fb0c:	ldr	r3, [sp, #36]	; 0x24
    fb10:	bl	fcc4 <MyGame_Example_TypeAliases_u64_add>
    fb14:	cmp	r0, #0
    fb18:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fb1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fb20:	vldr	d0, [sp, #16]
    fb24:	bl	fd5c <MyGame_Example_TypeAliases_f64_add>
    fb28:	cmp	r0, #0
    fb2c:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fb30:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fb34:	ldr	r1, [fp, #12]
    fb38:	bl	fde4 <MyGame_Example_TypeAliases_i32_add>
    fb3c:	cmp	r0, #0
    fb40:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fb44:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fb48:	ldr	r1, [fp, #16]
    fb4c:	bl	fe6c <MyGame_Example_TypeAliases_u32_add>
    fb50:	cmp	r0, #0
    fb54:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fb58:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fb5c:	vldr	s0, [sp, #28]
    fb60:	bl	fef0 <MyGame_Example_TypeAliases_f32_add>
    fb64:	cmp	r0, #0
    fb68:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fb6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fb70:	ldr	r1, [fp, #40]	; 0x28
    fb74:	bl	ff78 <MyGame_Example_TypeAliases_v8_add>
    fb78:	cmp	r0, #0
    fb7c:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fb80:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fb84:	ldr	r1, [fp, #44]	; 0x2c
    fb88:	bl	ffe4 <MyGame_Example_TypeAliases_vf64_add>
    fb8c:	cmp	r0, #0
    fb90:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fb94:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fb98:	ldrsh	r1, [fp, #-40]	; 0xffffffd8
    fb9c:	bl	10050 <MyGame_Example_TypeAliases_i16_add>
    fba0:	cmp	r0, #0
    fba4:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fba8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fbac:	ldrh	r1, [fp, #-42]	; 0xffffffd6
    fbb0:	bl	100d8 <MyGame_Example_TypeAliases_u16_add>
    fbb4:	cmp	r0, #0
    fbb8:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fbbc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fbc0:	ldrsb	r1, [fp, #-37]	; 0xffffffdb
    fbc4:	bl	1015c <MyGame_Example_TypeAliases_i8_add>
    fbc8:	cmp	r0, #0
    fbcc:	bne	fbe4 <MyGame_Example_TypeAliases_create+0x174>
    fbd0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fbd4:	ldrb	r1, [fp, #-38]	; 0xffffffda
    fbd8:	bl	101e0 <MyGame_Example_TypeAliases_u8_add>
    fbdc:	cmp	r0, #0
    fbe0:	beq	fbf0 <MyGame_Example_TypeAliases_create+0x180>
    fbe4:	movw	r0, #0
    fbe8:	str	r0, [fp, #-32]	; 0xffffffe0
    fbec:	b	fbfc <MyGame_Example_TypeAliases_create+0x18c>
    fbf0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    fbf4:	bl	10268 <MyGame_Example_TypeAliases_end>
    fbf8:	str	r0, [fp, #-32]	; 0xffffffe0
    fbfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    fc00:	sub	sp, fp, #28
    fc04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fc08 <MyGame_Example_TypeAliases_start>:
    fc08:	push	{fp, lr}
    fc0c:	mov	fp, sp
    fc10:	sub	sp, sp, #8
    fc14:	str	r0, [sp, #4]
    fc18:	ldr	r0, [sp, #4]
    fc1c:	movw	r1, #12
    fc20:	bl	0 <flatcc_builder_start_table>
    fc24:	mov	sp, fp
    fc28:	pop	{fp, pc}

0000fc2c <MyGame_Example_TypeAliases_i64_add>:
    fc2c:	push	{fp, lr}
    fc30:	mov	fp, sp
    fc34:	sub	sp, sp, #24
    fc38:	str	r0, [fp, #-8]
    fc3c:	str	r3, [sp, #12]
    fc40:	str	r2, [sp, #8]
    fc44:	ldr	r0, [sp, #8]
    fc48:	ldr	r2, [sp, #12]
    fc4c:	orr	r0, r0, r2
    fc50:	cmp	r0, #0
    fc54:	bne	fc68 <MyGame_Example_TypeAliases_i64_add+0x3c>
    fc58:	b	fc5c <MyGame_Example_TypeAliases_i64_add+0x30>
    fc5c:	movw	r0, #0
    fc60:	str	r0, [fp, #-4]
    fc64:	b	fcb8 <MyGame_Example_TypeAliases_i64_add+0x8c>
    fc68:	ldr	r0, [fp, #-8]
    fc6c:	movw	r1, #6
    fc70:	movw	r2, #8
    fc74:	movw	r3, #8
    fc78:	uxth	r3, r3
    fc7c:	bl	0 <flatcc_builder_table_add>
    fc80:	str	r0, [sp, #4]
    fc84:	movw	r1, #0
    fc88:	cmp	r0, r1
    fc8c:	bne	fc9c <MyGame_Example_TypeAliases_i64_add+0x70>
    fc90:	mvn	r0, #0
    fc94:	str	r0, [fp, #-4]
    fc98:	b	fcb8 <MyGame_Example_TypeAliases_i64_add+0x8c>
    fc9c:	ldr	r0, [sp, #4]
    fca0:	ldr	r2, [sp, #8]
    fca4:	ldr	r3, [sp, #12]
    fca8:	bl	102c8 <flatbuffers_int64_assign_to_pe>
    fcac:	movw	r2, #0
    fcb0:	str	r2, [fp, #-4]
    fcb4:	str	r0, [sp]
    fcb8:	ldr	r0, [fp, #-4]
    fcbc:	mov	sp, fp
    fcc0:	pop	{fp, pc}

0000fcc4 <MyGame_Example_TypeAliases_u64_add>:
    fcc4:	push	{fp, lr}
    fcc8:	mov	fp, sp
    fccc:	sub	sp, sp, #24
    fcd0:	str	r0, [fp, #-8]
    fcd4:	str	r3, [sp, #12]
    fcd8:	str	r2, [sp, #8]
    fcdc:	ldr	r0, [sp, #8]
    fce0:	ldr	r2, [sp, #12]
    fce4:	orr	r0, r0, r2
    fce8:	cmp	r0, #0
    fcec:	bne	fd00 <MyGame_Example_TypeAliases_u64_add+0x3c>
    fcf0:	b	fcf4 <MyGame_Example_TypeAliases_u64_add+0x30>
    fcf4:	movw	r0, #0
    fcf8:	str	r0, [fp, #-4]
    fcfc:	b	fd50 <MyGame_Example_TypeAliases_u64_add+0x8c>
    fd00:	ldr	r0, [fp, #-8]
    fd04:	movw	r1, #7
    fd08:	movw	r2, #8
    fd0c:	movw	r3, #8
    fd10:	uxth	r3, r3
    fd14:	bl	0 <flatcc_builder_table_add>
    fd18:	str	r0, [sp, #4]
    fd1c:	movw	r1, #0
    fd20:	cmp	r0, r1
    fd24:	bne	fd34 <MyGame_Example_TypeAliases_u64_add+0x70>
    fd28:	mvn	r0, #0
    fd2c:	str	r0, [fp, #-4]
    fd30:	b	fd50 <MyGame_Example_TypeAliases_u64_add+0x8c>
    fd34:	ldr	r0, [sp, #4]
    fd38:	ldr	r2, [sp, #8]
    fd3c:	ldr	r3, [sp, #12]
    fd40:	bl	10320 <flatbuffers_uint64_assign_to_pe>
    fd44:	movw	r2, #0
    fd48:	str	r2, [fp, #-4]
    fd4c:	str	r0, [sp]
    fd50:	ldr	r0, [fp, #-4]
    fd54:	mov	sp, fp
    fd58:	pop	{fp, pc}

0000fd5c <MyGame_Example_TypeAliases_f64_add>:
    fd5c:	push	{fp, lr}
    fd60:	mov	fp, sp
    fd64:	sub	sp, sp, #24
    fd68:	str	r0, [fp, #-8]
    fd6c:	vstr	d0, [sp, #8]
    fd70:	vldr	d0, [sp, #8]
    fd74:	vcmp.f64	d0, #0.0
    fd78:	vmrs	APSR_nzcv, fpscr
    fd7c:	bne	fd8c <MyGame_Example_TypeAliases_f64_add+0x30>
    fd80:	movw	r0, #0
    fd84:	str	r0, [fp, #-4]
    fd88:	b	fdd8 <MyGame_Example_TypeAliases_f64_add+0x7c>
    fd8c:	ldr	r0, [fp, #-8]
    fd90:	movw	r1, #9
    fd94:	movw	r2, #8
    fd98:	movw	r3, #8
    fd9c:	uxth	r3, r3
    fda0:	bl	0 <flatcc_builder_table_add>
    fda4:	str	r0, [sp, #4]
    fda8:	movw	r1, #0
    fdac:	cmp	r0, r1
    fdb0:	bne	fdc0 <MyGame_Example_TypeAliases_f64_add+0x64>
    fdb4:	mvn	r0, #0
    fdb8:	str	r0, [fp, #-4]
    fdbc:	b	fdd8 <MyGame_Example_TypeAliases_f64_add+0x7c>
    fdc0:	ldr	r0, [sp, #4]
    fdc4:	vldr	d0, [sp, #8]
    fdc8:	bl	10378 <flatbuffers_double_assign_to_pe>
    fdcc:	movw	lr, #0
    fdd0:	str	lr, [fp, #-4]
    fdd4:	str	r0, [sp]
    fdd8:	ldr	r0, [fp, #-4]
    fddc:	mov	sp, fp
    fde0:	pop	{fp, pc}

0000fde4 <MyGame_Example_TypeAliases_i32_add>:
    fde4:	push	{fp, lr}
    fde8:	mov	fp, sp
    fdec:	sub	sp, sp, #24
    fdf0:	str	r0, [fp, #-8]
    fdf4:	str	r1, [sp, #12]
    fdf8:	ldr	r0, [sp, #12]
    fdfc:	cmp	r0, #0
    fe00:	bne	fe10 <MyGame_Example_TypeAliases_i32_add+0x2c>
    fe04:	movw	r0, #0
    fe08:	str	r0, [fp, #-4]
    fe0c:	b	fe60 <MyGame_Example_TypeAliases_i32_add+0x7c>
    fe10:	ldr	r0, [fp, #-8]
    fe14:	movw	r1, #4
    fe18:	str	r1, [sp, #4]
    fe1c:	ldr	r2, [sp, #4]
    fe20:	movw	r3, #4
    fe24:	uxth	r3, r3
    fe28:	bl	0 <flatcc_builder_table_add>
    fe2c:	str	r0, [sp, #8]
    fe30:	movw	r1, #0
    fe34:	cmp	r0, r1
    fe38:	bne	fe48 <MyGame_Example_TypeAliases_i32_add+0x64>
    fe3c:	mvn	r0, #0
    fe40:	str	r0, [fp, #-4]
    fe44:	b	fe60 <MyGame_Example_TypeAliases_i32_add+0x7c>
    fe48:	ldr	r0, [sp, #8]
    fe4c:	ldr	r1, [sp, #12]
    fe50:	bl	103c4 <flatbuffers_int32_assign_to_pe>
    fe54:	movw	r1, #0
    fe58:	str	r1, [fp, #-4]
    fe5c:	str	r0, [sp]
    fe60:	ldr	r0, [fp, #-4]
    fe64:	mov	sp, fp
    fe68:	pop	{fp, pc}

0000fe6c <MyGame_Example_TypeAliases_u32_add>:
    fe6c:	push	{fp, lr}
    fe70:	mov	fp, sp
    fe74:	sub	sp, sp, #24
    fe78:	str	r0, [fp, #-8]
    fe7c:	str	r1, [sp, #12]
    fe80:	ldr	r0, [sp, #12]
    fe84:	cmp	r0, #0
    fe88:	bne	fe98 <MyGame_Example_TypeAliases_u32_add+0x2c>
    fe8c:	movw	r0, #0
    fe90:	str	r0, [fp, #-4]
    fe94:	b	fee4 <MyGame_Example_TypeAliases_u32_add+0x78>
    fe98:	ldr	r0, [fp, #-8]
    fe9c:	movw	r1, #5
    fea0:	movw	r2, #4
    fea4:	movw	r3, #4
    fea8:	uxth	r3, r3
    feac:	bl	0 <flatcc_builder_table_add>
    feb0:	str	r0, [sp, #8]
    feb4:	movw	r1, #0
    feb8:	cmp	r0, r1
    febc:	bne	fecc <MyGame_Example_TypeAliases_u32_add+0x60>
    fec0:	mvn	r0, #0
    fec4:	str	r0, [fp, #-4]
    fec8:	b	fee4 <MyGame_Example_TypeAliases_u32_add+0x78>
    fecc:	ldr	r0, [sp, #8]
    fed0:	ldr	r1, [sp, #12]
    fed4:	bl	10408 <flatbuffers_uint32_assign_to_pe>
    fed8:	movw	r1, #0
    fedc:	str	r1, [fp, #-4]
    fee0:	str	r0, [sp, #4]
    fee4:	ldr	r0, [fp, #-4]
    fee8:	mov	sp, fp
    feec:	pop	{fp, pc}

0000fef0 <MyGame_Example_TypeAliases_f32_add>:
    fef0:	push	{fp, lr}
    fef4:	mov	fp, sp
    fef8:	sub	sp, sp, #24
    fefc:	str	r0, [fp, #-8]
    ff00:	vstr	s0, [sp, #12]
    ff04:	vldr	s0, [sp, #12]
    ff08:	vcmp.f32	s0, #0.0
    ff0c:	vmrs	APSR_nzcv, fpscr
    ff10:	bne	ff20 <MyGame_Example_TypeAliases_f32_add+0x30>
    ff14:	movw	r0, #0
    ff18:	str	r0, [fp, #-4]
    ff1c:	b	ff6c <MyGame_Example_TypeAliases_f32_add+0x7c>
    ff20:	ldr	r0, [fp, #-8]
    ff24:	movw	r1, #8
    ff28:	movw	r2, #4
    ff2c:	movw	r3, #4
    ff30:	uxth	r3, r3
    ff34:	bl	0 <flatcc_builder_table_add>
    ff38:	str	r0, [sp, #8]
    ff3c:	movw	r1, #0
    ff40:	cmp	r0, r1
    ff44:	bne	ff54 <MyGame_Example_TypeAliases_f32_add+0x64>
    ff48:	mvn	r0, #0
    ff4c:	str	r0, [fp, #-4]
    ff50:	b	ff6c <MyGame_Example_TypeAliases_f32_add+0x7c>
    ff54:	ldr	r0, [sp, #8]
    ff58:	vldr	s0, [sp, #12]
    ff5c:	bl	1044c <flatbuffers_float_assign_to_pe>
    ff60:	movw	lr, #0
    ff64:	str	lr, [fp, #-4]
    ff68:	str	r0, [sp, #4]
    ff6c:	ldr	r0, [fp, #-4]
    ff70:	mov	sp, fp
    ff74:	pop	{fp, pc}

0000ff78 <MyGame_Example_TypeAliases_v8_add>:
    ff78:	push	{fp, lr}
    ff7c:	mov	fp, sp
    ff80:	sub	sp, sp, #16
    ff84:	str	r0, [fp, #-4]
    ff88:	str	r1, [sp, #8]
    ff8c:	ldr	r0, [sp, #8]
    ff90:	cmp	r0, #0
    ff94:	beq	ffcc <MyGame_Example_TypeAliases_v8_add+0x54>
    ff98:	ldr	r0, [fp, #-4]
    ff9c:	movw	r1, #10
    ffa0:	bl	0 <flatcc_builder_table_add_offset>
    ffa4:	str	r0, [sp, #4]
    ffa8:	movw	r1, #0
    ffac:	cmp	r0, r1
    ffb0:	beq	ffcc <MyGame_Example_TypeAliases_v8_add+0x54>
    ffb4:	ldr	r0, [sp, #8]
    ffb8:	ldr	r1, [sp, #4]
    ffbc:	str	r0, [r1]
    ffc0:	movw	r0, #0
    ffc4:	str	r0, [sp]
    ffc8:	b	ffd8 <MyGame_Example_TypeAliases_v8_add+0x60>
    ffcc:	mvn	r0, #0
    ffd0:	str	r0, [sp]
    ffd4:	b	ffd8 <MyGame_Example_TypeAliases_v8_add+0x60>
    ffd8:	ldr	r0, [sp]
    ffdc:	mov	sp, fp
    ffe0:	pop	{fp, pc}

0000ffe4 <MyGame_Example_TypeAliases_vf64_add>:
    ffe4:	push	{fp, lr}
    ffe8:	mov	fp, sp
    ffec:	sub	sp, sp, #16
    fff0:	str	r0, [fp, #-4]
    fff4:	str	r1, [sp, #8]
    fff8:	ldr	r0, [sp, #8]
    fffc:	cmp	r0, #0
   10000:	beq	10038 <MyGame_Example_TypeAliases_vf64_add+0x54>
   10004:	ldr	r0, [fp, #-4]
   10008:	movw	r1, #11
   1000c:	bl	0 <flatcc_builder_table_add_offset>
   10010:	str	r0, [sp, #4]
   10014:	movw	r1, #0
   10018:	cmp	r0, r1
   1001c:	beq	10038 <MyGame_Example_TypeAliases_vf64_add+0x54>
   10020:	ldr	r0, [sp, #8]
   10024:	ldr	r1, [sp, #4]
   10028:	str	r0, [r1]
   1002c:	movw	r0, #0
   10030:	str	r0, [sp]
   10034:	b	10044 <MyGame_Example_TypeAliases_vf64_add+0x60>
   10038:	mvn	r0, #0
   1003c:	str	r0, [sp]
   10040:	b	10044 <MyGame_Example_TypeAliases_vf64_add+0x60>
   10044:	ldr	r0, [sp]
   10048:	mov	sp, fp
   1004c:	pop	{fp, pc}

00010050 <MyGame_Example_TypeAliases_i16_add>:
   10050:	push	{fp, lr}
   10054:	mov	fp, sp
   10058:	sub	sp, sp, #24
   1005c:	str	r0, [fp, #-8]
   10060:	strh	r1, [fp, #-10]
   10064:	ldrsh	r0, [fp, #-10]
   10068:	cmp	r0, #0
   1006c:	bne	1007c <MyGame_Example_TypeAliases_i16_add+0x2c>
   10070:	movw	r0, #0
   10074:	str	r0, [fp, #-4]
   10078:	b	100cc <MyGame_Example_TypeAliases_i16_add+0x7c>
   1007c:	ldr	r0, [fp, #-8]
   10080:	movw	r1, #2
   10084:	str	r1, [sp, #4]
   10088:	ldr	r2, [sp, #4]
   1008c:	movw	r3, #2
   10090:	uxth	r3, r3
   10094:	bl	0 <flatcc_builder_table_add>
   10098:	str	r0, [sp, #8]
   1009c:	movw	r1, #0
   100a0:	cmp	r0, r1
   100a4:	bne	100b4 <MyGame_Example_TypeAliases_i16_add+0x64>
   100a8:	mvn	r0, #0
   100ac:	str	r0, [fp, #-4]
   100b0:	b	100cc <MyGame_Example_TypeAliases_i16_add+0x7c>
   100b4:	ldr	r0, [sp, #8]
   100b8:	ldrsh	r1, [fp, #-10]
   100bc:	bl	104a0 <flatbuffers_int16_assign_to_pe>
   100c0:	movw	r1, #0
   100c4:	str	r1, [fp, #-4]
   100c8:	str	r0, [sp]
   100cc:	ldr	r0, [fp, #-4]
   100d0:	mov	sp, fp
   100d4:	pop	{fp, pc}

000100d8 <MyGame_Example_TypeAliases_u16_add>:
   100d8:	push	{fp, lr}
   100dc:	mov	fp, sp
   100e0:	sub	sp, sp, #24
   100e4:	str	r0, [fp, #-8]
   100e8:	strh	r1, [fp, #-10]
   100ec:	ldrh	r0, [fp, #-10]
   100f0:	cmp	r0, #0
   100f4:	bne	10104 <MyGame_Example_TypeAliases_u16_add+0x2c>
   100f8:	movw	r0, #0
   100fc:	str	r0, [fp, #-4]
   10100:	b	10150 <MyGame_Example_TypeAliases_u16_add+0x78>
   10104:	ldr	r0, [fp, #-8]
   10108:	movw	r1, #3
   1010c:	movw	r2, #2
   10110:	movw	r3, #2
   10114:	uxth	r3, r3
   10118:	bl	0 <flatcc_builder_table_add>
   1011c:	str	r0, [sp, #8]
   10120:	movw	r1, #0
   10124:	cmp	r0, r1
   10128:	bne	10138 <MyGame_Example_TypeAliases_u16_add+0x60>
   1012c:	mvn	r0, #0
   10130:	str	r0, [fp, #-4]
   10134:	b	10150 <MyGame_Example_TypeAliases_u16_add+0x78>
   10138:	ldr	r0, [sp, #8]
   1013c:	ldrh	r1, [fp, #-10]
   10140:	bl	104e4 <flatbuffers_uint16_assign_to_pe>
   10144:	movw	r1, #0
   10148:	str	r1, [fp, #-4]
   1014c:	str	r0, [sp, #4]
   10150:	ldr	r0, [fp, #-4]
   10154:	mov	sp, fp
   10158:	pop	{fp, pc}

0001015c <MyGame_Example_TypeAliases_i8_add>:
   1015c:	push	{fp, lr}
   10160:	mov	fp, sp
   10164:	sub	sp, sp, #24
   10168:	str	r0, [fp, #-8]
   1016c:	strb	r1, [fp, #-9]
   10170:	ldrsb	r0, [fp, #-9]
   10174:	cmp	r0, #0
   10178:	bne	10188 <MyGame_Example_TypeAliases_i8_add+0x2c>
   1017c:	movw	r0, #0
   10180:	str	r0, [fp, #-4]
   10184:	b	101d4 <MyGame_Example_TypeAliases_i8_add+0x78>
   10188:	ldr	r0, [fp, #-8]
   1018c:	movw	r1, #0
   10190:	movw	r2, #1
   10194:	movw	r3, #1
   10198:	uxth	r3, r3
   1019c:	bl	0 <flatcc_builder_table_add>
   101a0:	str	r0, [sp, #8]
   101a4:	movw	r1, #0
   101a8:	cmp	r0, r1
   101ac:	bne	101bc <MyGame_Example_TypeAliases_i8_add+0x60>
   101b0:	mvn	r0, #0
   101b4:	str	r0, [fp, #-4]
   101b8:	b	101d4 <MyGame_Example_TypeAliases_i8_add+0x78>
   101bc:	ldr	r0, [sp, #8]
   101c0:	ldrsb	r1, [fp, #-9]
   101c4:	bl	10528 <flatbuffers_int8_assign_to_pe>
   101c8:	movw	r1, #0
   101cc:	str	r1, [fp, #-4]
   101d0:	str	r0, [sp, #4]
   101d4:	ldr	r0, [fp, #-4]
   101d8:	mov	sp, fp
   101dc:	pop	{fp, pc}

000101e0 <MyGame_Example_TypeAliases_u8_add>:
   101e0:	push	{fp, lr}
   101e4:	mov	fp, sp
   101e8:	sub	sp, sp, #24
   101ec:	str	r0, [fp, #-8]
   101f0:	strb	r1, [fp, #-9]
   101f4:	ldrb	r0, [fp, #-9]
   101f8:	cmp	r0, #0
   101fc:	bne	1020c <MyGame_Example_TypeAliases_u8_add+0x2c>
   10200:	movw	r0, #0
   10204:	str	r0, [fp, #-4]
   10208:	b	1025c <MyGame_Example_TypeAliases_u8_add+0x7c>
   1020c:	ldr	r0, [fp, #-8]
   10210:	movw	r1, #1
   10214:	str	r1, [sp, #4]
   10218:	ldr	r2, [sp, #4]
   1021c:	movw	r3, #1
   10220:	uxth	r3, r3
   10224:	bl	0 <flatcc_builder_table_add>
   10228:	str	r0, [sp, #8]
   1022c:	movw	r1, #0
   10230:	cmp	r0, r1
   10234:	bne	10244 <MyGame_Example_TypeAliases_u8_add+0x64>
   10238:	mvn	r0, #0
   1023c:	str	r0, [fp, #-4]
   10240:	b	1025c <MyGame_Example_TypeAliases_u8_add+0x7c>
   10244:	ldr	r0, [sp, #8]
   10248:	ldrb	r1, [fp, #-9]
   1024c:	bl	1056c <flatbuffers_uint8_assign_to_pe>
   10250:	movw	r1, #0
   10254:	str	r1, [fp, #-4]
   10258:	str	r0, [sp]
   1025c:	ldr	r0, [fp, #-4]
   10260:	mov	sp, fp
   10264:	pop	{fp, pc}

00010268 <MyGame_Example_TypeAliases_end>:
   10268:	push	{fp, lr}
   1026c:	mov	fp, sp
   10270:	sub	sp, sp, #8
   10274:	str	r0, [sp, #4]
   10278:	ldr	r0, [sp, #4]
   1027c:	movw	r1, #0
   10280:	movt	r1, #0
   10284:	movw	r2, #0
   10288:	bl	0 <flatcc_builder_check_required>
   1028c:	cmp	r0, #0
   10290:	beq	10298 <MyGame_Example_TypeAliases_end+0x30>
   10294:	b	102b8 <MyGame_Example_TypeAliases_end+0x50>
   10298:	movw	r0, #0
   1029c:	movt	r0, #0
   102a0:	movw	r1, #0
   102a4:	movt	r1, #0
   102a8:	movw	r2, #237	; 0xed
   102ac:	movw	r3, #0
   102b0:	movt	r3, #0
   102b4:	bl	0 <__assert_fail>
   102b8:	ldr	r0, [sp, #4]
   102bc:	bl	0 <flatcc_builder_end_table>
   102c0:	mov	sp, fp
   102c4:	pop	{fp, pc}

000102c8 <flatbuffers_int64_assign_to_pe>:
   102c8:	push	{fp, lr}
   102cc:	mov	fp, sp
   102d0:	sub	sp, sp, #16
   102d4:	str	r0, [fp, #-4]
   102d8:	str	r3, [sp, #4]
   102dc:	str	r2, [sp]
   102e0:	ldr	r0, [sp]
   102e4:	ldr	r1, [sp, #4]
   102e8:	bl	10304 <flatbuffers_int64_cast_to_pe>
   102ec:	ldr	r2, [fp, #-4]
   102f0:	str	r1, [r2, #4]
   102f4:	str	r0, [r2]
   102f8:	ldr	r0, [fp, #-4]
   102fc:	mov	sp, fp
   10300:	pop	{fp, pc}

00010304 <flatbuffers_int64_cast_to_pe>:
   10304:	sub	sp, sp, #8
   10308:	str	r0, [sp]
   1030c:	str	r1, [sp, #4]
   10310:	ldr	r0, [sp]
   10314:	ldr	r1, [sp, #4]
   10318:	add	sp, sp, #8
   1031c:	bx	lr

00010320 <flatbuffers_uint64_assign_to_pe>:
   10320:	push	{fp, lr}
   10324:	mov	fp, sp
   10328:	sub	sp, sp, #16
   1032c:	str	r0, [fp, #-4]
   10330:	str	r3, [sp, #4]
   10334:	str	r2, [sp]
   10338:	ldr	r0, [sp]
   1033c:	ldr	r1, [sp, #4]
   10340:	bl	1035c <flatbuffers_uint64_cast_to_pe>
   10344:	ldr	r2, [fp, #-4]
   10348:	str	r1, [r2, #4]
   1034c:	str	r0, [r2]
   10350:	ldr	r0, [fp, #-4]
   10354:	mov	sp, fp
   10358:	pop	{fp, pc}

0001035c <flatbuffers_uint64_cast_to_pe>:
   1035c:	sub	sp, sp, #8
   10360:	str	r0, [sp]
   10364:	str	r1, [sp, #4]
   10368:	ldr	r0, [sp]
   1036c:	ldr	r1, [sp, #4]
   10370:	add	sp, sp, #8
   10374:	bx	lr

00010378 <flatbuffers_double_assign_to_pe>:
   10378:	push	{fp, lr}
   1037c:	mov	fp, sp
   10380:	sub	sp, sp, #16
   10384:	str	r0, [fp, #-4]
   10388:	vstr	d0, [sp]
   1038c:	vldr	d0, [sp]
   10390:	bl	103a8 <flatbuffers_double_cast_to_pe>
   10394:	ldr	r0, [fp, #-4]
   10398:	vstr	d0, [r0]
   1039c:	ldr	r0, [fp, #-4]
   103a0:	mov	sp, fp
   103a4:	pop	{fp, pc}

000103a8 <flatbuffers_double_cast_to_pe>:
   103a8:	sub	sp, sp, #16
   103ac:	vstr	d0, [sp, #8]
   103b0:	vldr	d0, [sp, #8]
   103b4:	vstr	d0, [sp]
   103b8:	vldr	d0, [sp]
   103bc:	add	sp, sp, #16
   103c0:	bx	lr

000103c4 <flatbuffers_int32_assign_to_pe>:
   103c4:	push	{fp, lr}
   103c8:	mov	fp, sp
   103cc:	sub	sp, sp, #8
   103d0:	str	r0, [sp, #4]
   103d4:	str	r1, [sp]
   103d8:	ldr	r0, [sp]
   103dc:	bl	103f4 <flatbuffers_int32_cast_to_pe>
   103e0:	ldr	r1, [sp, #4]
   103e4:	str	r0, [r1]
   103e8:	ldr	r0, [sp, #4]
   103ec:	mov	sp, fp
   103f0:	pop	{fp, pc}

000103f4 <flatbuffers_int32_cast_to_pe>:
   103f4:	sub	sp, sp, #4
   103f8:	str	r0, [sp]
   103fc:	ldr	r0, [sp]
   10400:	add	sp, sp, #4
   10404:	bx	lr

00010408 <flatbuffers_uint32_assign_to_pe>:
   10408:	push	{fp, lr}
   1040c:	mov	fp, sp
   10410:	sub	sp, sp, #8
   10414:	str	r0, [sp, #4]
   10418:	str	r1, [sp]
   1041c:	ldr	r0, [sp]
   10420:	bl	10438 <flatbuffers_uint32_cast_to_pe>
   10424:	ldr	r1, [sp, #4]
   10428:	str	r0, [r1]
   1042c:	ldr	r0, [sp, #4]
   10430:	mov	sp, fp
   10434:	pop	{fp, pc}

00010438 <flatbuffers_uint32_cast_to_pe>:
   10438:	sub	sp, sp, #4
   1043c:	str	r0, [sp]
   10440:	ldr	r0, [sp]
   10444:	add	sp, sp, #4
   10448:	bx	lr

0001044c <flatbuffers_float_assign_to_pe>:
   1044c:	push	{fp, lr}
   10450:	mov	fp, sp
   10454:	sub	sp, sp, #8
   10458:	str	r0, [sp, #4]
   1045c:	vstr	s0, [sp]
   10460:	vldr	s0, [sp]
   10464:	bl	1047c <flatbuffers_float_cast_to_pe>
   10468:	ldr	r0, [sp, #4]
   1046c:	vstr	s0, [r0]
   10470:	ldr	r0, [sp, #4]
   10474:	mov	sp, fp
   10478:	pop	{fp, pc}

0001047c <flatbuffers_float_cast_to_pe>:
   1047c:	sub	sp, sp, #8
   10480:	vstr	s0, [sp, #4]
   10484:	vldr	s0, [sp, #4]
   10488:	vstr	s0, [sp]
   1048c:	ldr	r0, [sp]
   10490:	str	r0, [sp]
   10494:	vldr	s0, [sp]
   10498:	add	sp, sp, #8
   1049c:	bx	lr

000104a0 <flatbuffers_int16_assign_to_pe>:
   104a0:	push	{fp, lr}
   104a4:	mov	fp, sp
   104a8:	sub	sp, sp, #8
   104ac:	str	r0, [sp, #4]
   104b0:	strh	r1, [sp, #2]
   104b4:	ldrsh	r0, [sp, #2]
   104b8:	bl	104d0 <flatbuffers_int16_cast_to_pe>
   104bc:	ldr	r1, [sp, #4]
   104c0:	strh	r0, [r1]
   104c4:	ldr	r0, [sp, #4]
   104c8:	mov	sp, fp
   104cc:	pop	{fp, pc}

000104d0 <flatbuffers_int16_cast_to_pe>:
   104d0:	sub	sp, sp, #4
   104d4:	strh	r0, [sp, #2]
   104d8:	ldrsh	r0, [sp, #2]
   104dc:	add	sp, sp, #4
   104e0:	bx	lr

000104e4 <flatbuffers_uint16_assign_to_pe>:
   104e4:	push	{fp, lr}
   104e8:	mov	fp, sp
   104ec:	sub	sp, sp, #8
   104f0:	str	r0, [sp, #4]
   104f4:	strh	r1, [sp, #2]
   104f8:	ldrh	r0, [sp, #2]
   104fc:	bl	10514 <flatbuffers_uint16_cast_to_pe>
   10500:	ldr	r1, [sp, #4]
   10504:	strh	r0, [r1]
   10508:	ldr	r0, [sp, #4]
   1050c:	mov	sp, fp
   10510:	pop	{fp, pc}

00010514 <flatbuffers_uint16_cast_to_pe>:
   10514:	sub	sp, sp, #4
   10518:	strh	r0, [sp, #2]
   1051c:	ldrh	r0, [sp, #2]
   10520:	add	sp, sp, #4
   10524:	bx	lr

00010528 <flatbuffers_int8_assign_to_pe>:
   10528:	push	{fp, lr}
   1052c:	mov	fp, sp
   10530:	sub	sp, sp, #8
   10534:	str	r0, [sp, #4]
   10538:	strb	r1, [sp, #3]
   1053c:	ldrsb	r0, [sp, #3]
   10540:	bl	10558 <flatbuffers_int8_cast_to_pe>
   10544:	ldr	r1, [sp, #4]
   10548:	strb	r0, [r1]
   1054c:	ldr	r0, [sp, #4]
   10550:	mov	sp, fp
   10554:	pop	{fp, pc}

00010558 <flatbuffers_int8_cast_to_pe>:
   10558:	sub	sp, sp, #4
   1055c:	strb	r0, [sp, #3]
   10560:	ldrsb	r0, [sp, #3]
   10564:	add	sp, sp, #4
   10568:	bx	lr

0001056c <flatbuffers_uint8_assign_to_pe>:
   1056c:	push	{fp, lr}
   10570:	mov	fp, sp
   10574:	sub	sp, sp, #8
   10578:	str	r0, [sp, #4]
   1057c:	strb	r1, [sp, #3]
   10580:	ldrb	r0, [sp, #3]
   10584:	bl	1059c <flatbuffers_uint8_cast_to_pe>
   10588:	ldr	r1, [sp, #4]
   1058c:	strb	r0, [r1]
   10590:	ldr	r0, [sp, #4]
   10594:	mov	sp, fp
   10598:	pop	{fp, pc}

0001059c <flatbuffers_uint8_cast_to_pe>:
   1059c:	sub	sp, sp, #4
   105a0:	strb	r0, [sp, #3]
   105a4:	ldrb	r0, [sp, #3]
   105a8:	add	sp, sp, #4
   105ac:	bx	lr

000105b0 <MyGame_Example_TypeAliases_verify_table>:
   105b0:	push	{fp, lr}
   105b4:	mov	fp, sp
   105b8:	sub	sp, sp, #40	; 0x28
   105bc:	str	r0, [fp, #-8]
   105c0:	ldr	r0, [fp, #-8]
   105c4:	movw	r1, #0
   105c8:	uxth	r1, r1
   105cc:	movw	r2, #1
   105d0:	movw	r3, #1
   105d4:	uxth	r3, r3
   105d8:	bl	0 <flatcc_verify_field>
   105dc:	str	r0, [fp, #-12]
   105e0:	cmp	r0, #0
   105e4:	beq	105f4 <MyGame_Example_TypeAliases_verify_table+0x44>
   105e8:	ldr	r0, [fp, #-12]
   105ec:	str	r0, [fp, #-4]
   105f0:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   105f4:	ldr	r0, [fp, #-8]
   105f8:	movw	r1, #1
   105fc:	uxth	r2, r1
   10600:	str	r1, [fp, #-16]
   10604:	mov	r1, r2
   10608:	movw	r2, #1
   1060c:	ldr	r3, [fp, #-16]
   10610:	uxth	r3, r3
   10614:	bl	0 <flatcc_verify_field>
   10618:	str	r0, [fp, #-12]
   1061c:	cmp	r0, #0
   10620:	beq	10630 <MyGame_Example_TypeAliases_verify_table+0x80>
   10624:	ldr	r0, [fp, #-12]
   10628:	str	r0, [fp, #-4]
   1062c:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10630:	ldr	r0, [fp, #-8]
   10634:	movw	r1, #2
   10638:	uxth	r2, r1
   1063c:	str	r1, [sp, #20]
   10640:	mov	r1, r2
   10644:	movw	r2, #2
   10648:	ldr	r3, [sp, #20]
   1064c:	uxth	r3, r3
   10650:	bl	0 <flatcc_verify_field>
   10654:	str	r0, [fp, #-12]
   10658:	cmp	r0, #0
   1065c:	beq	1066c <MyGame_Example_TypeAliases_verify_table+0xbc>
   10660:	ldr	r0, [fp, #-12]
   10664:	str	r0, [fp, #-4]
   10668:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   1066c:	ldr	r0, [fp, #-8]
   10670:	movw	r1, #3
   10674:	uxth	r1, r1
   10678:	movw	r2, #2
   1067c:	movw	r3, #2
   10680:	uxth	r3, r3
   10684:	bl	0 <flatcc_verify_field>
   10688:	str	r0, [fp, #-12]
   1068c:	cmp	r0, #0
   10690:	beq	106a0 <MyGame_Example_TypeAliases_verify_table+0xf0>
   10694:	ldr	r0, [fp, #-12]
   10698:	str	r0, [fp, #-4]
   1069c:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   106a0:	ldr	r0, [fp, #-8]
   106a4:	movw	r1, #4
   106a8:	uxth	r2, r1
   106ac:	str	r1, [sp, #16]
   106b0:	mov	r1, r2
   106b4:	movw	r2, #4
   106b8:	ldr	r3, [sp, #16]
   106bc:	uxth	r3, r3
   106c0:	bl	0 <flatcc_verify_field>
   106c4:	str	r0, [fp, #-12]
   106c8:	cmp	r0, #0
   106cc:	beq	106dc <MyGame_Example_TypeAliases_verify_table+0x12c>
   106d0:	ldr	r0, [fp, #-12]
   106d4:	str	r0, [fp, #-4]
   106d8:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   106dc:	ldr	r0, [fp, #-8]
   106e0:	movw	r1, #5
   106e4:	uxth	r1, r1
   106e8:	movw	r2, #4
   106ec:	movw	r3, #4
   106f0:	uxth	r3, r3
   106f4:	bl	0 <flatcc_verify_field>
   106f8:	str	r0, [fp, #-12]
   106fc:	cmp	r0, #0
   10700:	beq	10710 <MyGame_Example_TypeAliases_verify_table+0x160>
   10704:	ldr	r0, [fp, #-12]
   10708:	str	r0, [fp, #-4]
   1070c:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10710:	ldr	r0, [fp, #-8]
   10714:	movw	r1, #6
   10718:	uxth	r1, r1
   1071c:	movw	r2, #8
   10720:	movw	r3, #8
   10724:	uxth	r3, r3
   10728:	bl	0 <flatcc_verify_field>
   1072c:	str	r0, [fp, #-12]
   10730:	cmp	r0, #0
   10734:	beq	10744 <MyGame_Example_TypeAliases_verify_table+0x194>
   10738:	ldr	r0, [fp, #-12]
   1073c:	str	r0, [fp, #-4]
   10740:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10744:	ldr	r0, [fp, #-8]
   10748:	movw	r1, #7
   1074c:	uxth	r1, r1
   10750:	movw	r2, #8
   10754:	movw	r3, #8
   10758:	uxth	r3, r3
   1075c:	bl	0 <flatcc_verify_field>
   10760:	str	r0, [fp, #-12]
   10764:	cmp	r0, #0
   10768:	beq	10778 <MyGame_Example_TypeAliases_verify_table+0x1c8>
   1076c:	ldr	r0, [fp, #-12]
   10770:	str	r0, [fp, #-4]
   10774:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10778:	ldr	r0, [fp, #-8]
   1077c:	movw	r1, #8
   10780:	uxth	r1, r1
   10784:	movw	r2, #4
   10788:	movw	r3, #4
   1078c:	uxth	r3, r3
   10790:	bl	0 <flatcc_verify_field>
   10794:	str	r0, [fp, #-12]
   10798:	cmp	r0, #0
   1079c:	beq	107ac <MyGame_Example_TypeAliases_verify_table+0x1fc>
   107a0:	ldr	r0, [fp, #-12]
   107a4:	str	r0, [fp, #-4]
   107a8:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   107ac:	ldr	r0, [fp, #-8]
   107b0:	movw	r1, #9
   107b4:	uxth	r1, r1
   107b8:	movw	r2, #8
   107bc:	movw	r3, #8
   107c0:	uxth	r3, r3
   107c4:	bl	0 <flatcc_verify_field>
   107c8:	str	r0, [fp, #-12]
   107cc:	cmp	r0, #0
   107d0:	beq	107e0 <MyGame_Example_TypeAliases_verify_table+0x230>
   107d4:	ldr	r0, [fp, #-12]
   107d8:	str	r0, [fp, #-4]
   107dc:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   107e0:	ldr	r0, [fp, #-8]
   107e4:	movw	r1, #10
   107e8:	uxth	r1, r1
   107ec:	movw	r2, #0
   107f0:	movw	r3, #1
   107f4:	movw	ip, #1
   107f8:	uxth	ip, ip
   107fc:	str	ip, [sp]
   10800:	mvn	ip, #0
   10804:	str	ip, [sp, #4]
   10808:	bl	0 <flatcc_verify_vector_field>
   1080c:	str	r0, [fp, #-12]
   10810:	cmp	r0, #0
   10814:	beq	10824 <MyGame_Example_TypeAliases_verify_table+0x274>
   10818:	ldr	r0, [fp, #-12]
   1081c:	str	r0, [fp, #-4]
   10820:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10824:	ldr	r0, [pc, #92]	; 10888 <MyGame_Example_TypeAliases_verify_table+0x2d8>
   10828:	ldr	r1, [fp, #-8]
   1082c:	str	r0, [sp, #12]
   10830:	mov	r0, r1
   10834:	movw	r1, #11
   10838:	uxth	r1, r1
   1083c:	movw	r2, #0
   10840:	movw	r3, #8
   10844:	movw	ip, #8
   10848:	uxth	ip, ip
   1084c:	str	ip, [sp]
   10850:	ldr	ip, [sp, #12]
   10854:	str	ip, [sp, #4]
   10858:	bl	0 <flatcc_verify_vector_field>
   1085c:	str	r0, [fp, #-12]
   10860:	cmp	r0, #0
   10864:	beq	10874 <MyGame_Example_TypeAliases_verify_table+0x2c4>
   10868:	ldr	r0, [fp, #-12]
   1086c:	str	r0, [fp, #-4]
   10870:	b	1087c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10874:	movw	r0, #0
   10878:	str	r0, [fp, #-4]
   1087c:	ldr	r0, [fp, #-4]
   10880:	mov	sp, fp
   10884:	pop	{fp, pc}
   10888:	.word	0x1fffffff

0001088c <flatbuffers_int8_read_from_pe>:
   1088c:	push	{fp, lr}
   10890:	mov	fp, sp
   10894:	sub	sp, sp, #8
   10898:	str	r0, [sp, #4]
   1089c:	ldr	r0, [sp, #4]
   108a0:	ldrsb	r0, [r0]
   108a4:	bl	108b4 <flatbuffers_int8_cast_from_pe>
   108a8:	sxtb	r0, r0
   108ac:	mov	sp, fp
   108b0:	pop	{fp, pc}

000108b4 <flatbuffers_int8_cast_from_pe>:
   108b4:	sub	sp, sp, #4
   108b8:	strb	r0, [sp, #3]
   108bc:	ldrsb	r0, [sp, #3]
   108c0:	add	sp, sp, #4
   108c4:	bx	lr

000108c8 <flatbuffers_int32_read_from_pe>:
   108c8:	push	{fp, lr}
   108cc:	mov	fp, sp
   108d0:	sub	sp, sp, #8
   108d4:	str	r0, [sp, #4]
   108d8:	ldr	r0, [sp, #4]
   108dc:	ldr	r0, [r0]
   108e0:	bl	108ec <flatbuffers_int32_cast_from_pe>
   108e4:	mov	sp, fp
   108e8:	pop	{fp, pc}

000108ec <flatbuffers_int32_cast_from_pe>:
   108ec:	sub	sp, sp, #4
   108f0:	str	r0, [sp]
   108f4:	ldr	r0, [sp]
   108f8:	add	sp, sp, #4
   108fc:	bx	lr

00010900 <flatbuffers_int64_read_from_pe>:
   10900:	push	{fp, lr}
   10904:	mov	fp, sp
   10908:	sub	sp, sp, #8
   1090c:	str	r0, [sp, #4]
   10910:	ldr	r0, [sp, #4]
   10914:	ldr	r1, [r0]
   10918:	ldr	r0, [r0, #4]
   1091c:	str	r0, [sp]
   10920:	mov	r0, r1
   10924:	ldr	r1, [sp]
   10928:	bl	10934 <flatbuffers_int64_cast_from_pe>
   1092c:	mov	sp, fp
   10930:	pop	{fp, pc}

00010934 <flatbuffers_int64_cast_from_pe>:
   10934:	sub	sp, sp, #8
   10938:	str	r0, [sp]
   1093c:	str	r1, [sp, #4]
   10940:	ldr	r0, [sp]
   10944:	ldr	r1, [sp, #4]
   10948:	add	sp, sp, #8
   1094c:	bx	lr

00010950 <flatbuffers_uint8_read_from_pe>:
   10950:	push	{fp, lr}
   10954:	mov	fp, sp
   10958:	sub	sp, sp, #8
   1095c:	str	r0, [sp, #4]
   10960:	ldr	r0, [sp, #4]
   10964:	ldrb	r0, [r0]
   10968:	bl	10978 <flatbuffers_uint8_cast_from_pe>
   1096c:	and	r0, r0, #255	; 0xff
   10970:	mov	sp, fp
   10974:	pop	{fp, pc}

00010978 <flatbuffers_uint8_cast_from_pe>:
   10978:	sub	sp, sp, #4
   1097c:	strb	r0, [sp, #3]
   10980:	ldrb	r0, [sp, #3]
   10984:	add	sp, sp, #4
   10988:	bx	lr

0001098c <flatbuffers_uint16_read_from_pe>:
   1098c:	push	{fp, lr}
   10990:	mov	fp, sp
   10994:	sub	sp, sp, #8
   10998:	str	r0, [sp, #4]
   1099c:	ldr	r0, [sp, #4]
   109a0:	ldrh	r0, [r0]
   109a4:	bl	109b4 <flatbuffers_uint16_cast_from_pe>
   109a8:	uxth	r0, r0
   109ac:	mov	sp, fp
   109b0:	pop	{fp, pc}

000109b4 <flatbuffers_uint16_cast_from_pe>:
   109b4:	sub	sp, sp, #4
   109b8:	strh	r0, [sp, #2]
   109bc:	ldrh	r0, [sp, #2]
   109c0:	add	sp, sp, #4
   109c4:	bx	lr

000109c8 <flatbuffers_uint32_read_from_pe>:
   109c8:	push	{fp, lr}
   109cc:	mov	fp, sp
   109d0:	sub	sp, sp, #8
   109d4:	str	r0, [sp, #4]
   109d8:	ldr	r0, [sp, #4]
   109dc:	ldr	r0, [r0]
   109e0:	bl	109ec <flatbuffers_uint32_cast_from_pe>
   109e4:	mov	sp, fp
   109e8:	pop	{fp, pc}

000109ec <flatbuffers_uint32_cast_from_pe>:
   109ec:	sub	sp, sp, #4
   109f0:	str	r0, [sp]
   109f4:	ldr	r0, [sp]
   109f8:	add	sp, sp, #4
   109fc:	bx	lr

00010a00 <flatbuffers_uint64_read_from_pe>:
   10a00:	push	{fp, lr}
   10a04:	mov	fp, sp
   10a08:	sub	sp, sp, #8
   10a0c:	str	r0, [sp, #4]
   10a10:	ldr	r0, [sp, #4]
   10a14:	ldr	r1, [r0]
   10a18:	ldr	r0, [r0, #4]
   10a1c:	str	r0, [sp]
   10a20:	mov	r0, r1
   10a24:	ldr	r1, [sp]
   10a28:	bl	10a34 <flatbuffers_uint64_cast_from_pe>
   10a2c:	mov	sp, fp
   10a30:	pop	{fp, pc}

00010a34 <flatbuffers_uint64_cast_from_pe>:
   10a34:	sub	sp, sp, #8
   10a38:	str	r0, [sp]
   10a3c:	str	r1, [sp, #4]
   10a40:	ldr	r0, [sp]
   10a44:	ldr	r1, [sp, #4]
   10a48:	add	sp, sp, #8
   10a4c:	bx	lr

00010a50 <flatbuffers_float_read_from_pe>:
   10a50:	push	{fp, lr}
   10a54:	mov	fp, sp
   10a58:	sub	sp, sp, #8
   10a5c:	str	r0, [sp, #4]
   10a60:	ldr	r0, [sp, #4]
   10a64:	vldr	s0, [r0]
   10a68:	bl	10a74 <flatbuffers_float_cast_from_pe>
   10a6c:	mov	sp, fp
   10a70:	pop	{fp, pc}

00010a74 <flatbuffers_float_cast_from_pe>:
   10a74:	sub	sp, sp, #8
   10a78:	vstr	s0, [sp, #4]
   10a7c:	vldr	s0, [sp, #4]
   10a80:	vstr	s0, [sp]
   10a84:	ldr	r0, [sp]
   10a88:	str	r0, [sp]
   10a8c:	vldr	s0, [sp]
   10a90:	add	sp, sp, #8
   10a94:	bx	lr

00010a98 <flatbuffers_double_read_from_pe>:
   10a98:	push	{fp, lr}
   10a9c:	mov	fp, sp
   10aa0:	sub	sp, sp, #8
   10aa4:	str	r0, [sp, #4]
   10aa8:	ldr	r0, [sp, #4]
   10aac:	vldr	d0, [r0]
   10ab0:	bl	10abc <flatbuffers_double_cast_from_pe>
   10ab4:	mov	sp, fp
   10ab8:	pop	{fp, pc}

00010abc <flatbuffers_double_cast_from_pe>:
   10abc:	sub	sp, sp, #16
   10ac0:	vstr	d0, [sp, #8]
   10ac4:	vldr	d0, [sp, #8]
   10ac8:	vstr	d0, [sp]
   10acc:	vldr	d0, [sp]
   10ad0:	add	sp, sp, #16
   10ad4:	bx	lr

00010ad8 <MyGame_Example_Monster_verify_table>:
   10ad8:	push	{fp, lr}
   10adc:	mov	fp, sp
   10ae0:	sub	sp, sp, #48	; 0x30
   10ae4:	str	r0, [fp, #-8]
   10ae8:	ldr	r0, [fp, #-8]
   10aec:	movw	r1, #0
   10af0:	uxth	r1, r1
   10af4:	movw	r2, #32
   10af8:	movw	r3, #16
   10afc:	uxth	r3, r3
   10b00:	bl	0 <flatcc_verify_field>
   10b04:	str	r0, [fp, #-12]
   10b08:	cmp	r0, #0
   10b0c:	beq	10b1c <MyGame_Example_Monster_verify_table+0x44>
   10b10:	ldr	r0, [fp, #-12]
   10b14:	str	r0, [fp, #-4]
   10b18:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10b1c:	ldr	r0, [fp, #-8]
   10b20:	movw	r1, #2
   10b24:	uxth	r2, r1
   10b28:	str	r1, [fp, #-16]
   10b2c:	mov	r1, r2
   10b30:	movw	r2, #2
   10b34:	ldr	r3, [fp, #-16]
   10b38:	uxth	r3, r3
   10b3c:	bl	0 <flatcc_verify_field>
   10b40:	str	r0, [fp, #-12]
   10b44:	cmp	r0, #0
   10b48:	beq	10b58 <MyGame_Example_Monster_verify_table+0x80>
   10b4c:	ldr	r0, [fp, #-12]
   10b50:	str	r0, [fp, #-4]
   10b54:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10b58:	ldr	r0, [fp, #-8]
   10b5c:	movw	r1, #1
   10b60:	uxth	r1, r1
   10b64:	movw	r2, #2
   10b68:	movw	r3, #2
   10b6c:	uxth	r3, r3
   10b70:	bl	0 <flatcc_verify_field>
   10b74:	str	r0, [fp, #-12]
   10b78:	cmp	r0, #0
   10b7c:	beq	10b8c <MyGame_Example_Monster_verify_table+0xb4>
   10b80:	ldr	r0, [fp, #-12]
   10b84:	str	r0, [fp, #-4]
   10b88:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10b8c:	ldr	r0, [fp, #-8]
   10b90:	movw	r1, #3
   10b94:	uxth	r1, r1
   10b98:	movw	r2, #1
   10b9c:	bl	0 <flatcc_verify_string_field>
   10ba0:	str	r0, [fp, #-12]
   10ba4:	cmp	r0, #0
   10ba8:	beq	10bb8 <MyGame_Example_Monster_verify_table+0xe0>
   10bac:	ldr	r0, [fp, #-12]
   10bb0:	str	r0, [fp, #-4]
   10bb4:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10bb8:	ldr	r0, [fp, #-8]
   10bbc:	movw	r1, #6
   10bc0:	uxth	r1, r1
   10bc4:	movw	r2, #1
   10bc8:	movw	r3, #1
   10bcc:	uxth	r3, r3
   10bd0:	bl	0 <flatcc_verify_field>
   10bd4:	str	r0, [fp, #-12]
   10bd8:	cmp	r0, #0
   10bdc:	beq	10bec <MyGame_Example_Monster_verify_table+0x114>
   10be0:	ldr	r0, [fp, #-12]
   10be4:	str	r0, [fp, #-4]
   10be8:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10bec:	ldr	r0, [fp, #-8]
   10bf0:	movw	r1, #5
   10bf4:	uxth	r1, r1
   10bf8:	movw	r2, #0
   10bfc:	movw	r3, #1
   10c00:	movw	ip, #1
   10c04:	uxth	ip, ip
   10c08:	str	ip, [sp]
   10c0c:	mvn	ip, #0
   10c10:	str	ip, [sp, #4]
   10c14:	bl	0 <flatcc_verify_vector_field>
   10c18:	str	r0, [fp, #-12]
   10c1c:	cmp	r0, #0
   10c20:	beq	10c30 <MyGame_Example_Monster_verify_table+0x158>
   10c24:	ldr	r0, [fp, #-12]
   10c28:	str	r0, [fp, #-4]
   10c2c:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10c30:	ldr	r0, [fp, #-8]
   10c34:	movw	r1, #11
   10c38:	uxth	r1, r1
   10c3c:	movw	r2, #0
   10c40:	movw	r3, #0
   10c44:	movt	r3, #0
   10c48:	bl	0 <flatcc_verify_table_vector_field>
   10c4c:	str	r0, [fp, #-12]
   10c50:	cmp	r0, #0
   10c54:	beq	10c64 <MyGame_Example_Monster_verify_table+0x18c>
   10c58:	ldr	r0, [fp, #-12]
   10c5c:	str	r0, [fp, #-4]
   10c60:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10c64:	ldr	r0, [fp, #-8]
   10c68:	movw	r1, #10
   10c6c:	uxth	r1, r1
   10c70:	movw	r2, #0
   10c74:	bl	0 <flatcc_verify_string_vector_field>
   10c78:	str	r0, [fp, #-12]
   10c7c:	cmp	r0, #0
   10c80:	beq	10c90 <MyGame_Example_Monster_verify_table+0x1b8>
   10c84:	ldr	r0, [fp, #-12]
   10c88:	str	r0, [fp, #-4]
   10c8c:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10c90:	ldr	r0, [fp, #-8]
   10c94:	movw	r1, #28
   10c98:	uxth	r1, r1
   10c9c:	movw	r2, #0
   10ca0:	bl	0 <flatcc_verify_string_vector_field>
   10ca4:	str	r0, [fp, #-12]
   10ca8:	cmp	r0, #0
   10cac:	beq	10cbc <MyGame_Example_Monster_verify_table+0x1e4>
   10cb0:	ldr	r0, [fp, #-12]
   10cb4:	str	r0, [fp, #-4]
   10cb8:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10cbc:	ldr	r0, [fp, #-8]
   10cc0:	movw	r1, #24
   10cc4:	uxth	r1, r1
   10cc8:	movw	r2, #0
   10ccc:	movw	r3, #1
   10cd0:	movw	ip, #1
   10cd4:	uxth	ip, ip
   10cd8:	str	ip, [sp]
   10cdc:	mvn	ip, #0
   10ce0:	str	ip, [sp, #4]
   10ce4:	bl	0 <flatcc_verify_vector_field>
   10ce8:	str	r0, [fp, #-12]
   10cec:	cmp	r0, #0
   10cf0:	beq	10d00 <MyGame_Example_Monster_verify_table+0x228>
   10cf4:	ldr	r0, [fp, #-12]
   10cf8:	str	r0, [fp, #-4]
   10cfc:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10d00:	ldr	r0, [pc, #1440]	; 112a8 <MyGame_Example_Monster_verify_table+0x7d0>
   10d04:	ldr	r1, [fp, #-8]
   10d08:	str	r0, [fp, #-20]	; 0xffffffec
   10d0c:	mov	r0, r1
   10d10:	movw	r1, #29
   10d14:	uxth	r1, r1
   10d18:	movw	r2, #0
   10d1c:	movw	r3, #8
   10d20:	movw	ip, #4
   10d24:	uxth	ip, ip
   10d28:	str	ip, [sp]
   10d2c:	ldr	ip, [fp, #-20]	; 0xffffffec
   10d30:	str	ip, [sp, #4]
   10d34:	bl	0 <flatcc_verify_vector_field>
   10d38:	str	r0, [fp, #-12]
   10d3c:	cmp	r0, #0
   10d40:	beq	10d50 <MyGame_Example_Monster_verify_table+0x278>
   10d44:	ldr	r0, [fp, #-12]
   10d48:	str	r0, [fp, #-4]
   10d4c:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10d50:	ldr	r0, [fp, #-8]
   10d54:	movw	r1, #12
   10d58:	uxth	r1, r1
   10d5c:	movw	r2, #0
   10d60:	movw	r3, #0
   10d64:	movt	r3, #0
   10d68:	bl	0 <flatcc_verify_table_field>
   10d6c:	str	r0, [fp, #-12]
   10d70:	cmp	r0, #0
   10d74:	beq	10d84 <MyGame_Example_Monster_verify_table+0x2ac>
   10d78:	ldr	r0, [fp, #-12]
   10d7c:	str	r0, [fp, #-4]
   10d80:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10d84:	ldr	r0, [fp, #-8]
   10d88:	movw	r1, #8
   10d8c:	uxth	r1, r1
   10d90:	movw	r2, #0
   10d94:	movw	r3, #0
   10d98:	movt	r3, #0
   10d9c:	bl	0 <flatcc_verify_union_field>
   10da0:	str	r0, [fp, #-12]
   10da4:	cmp	r0, #0
   10da8:	beq	10db8 <MyGame_Example_Monster_verify_table+0x2e0>
   10dac:	ldr	r0, [fp, #-12]
   10db0:	str	r0, [fp, #-4]
   10db4:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10db8:	ldr	r0, [pc, #1260]	; 112ac <MyGame_Example_Monster_verify_table+0x7d4>
   10dbc:	ldr	r1, [fp, #-8]
   10dc0:	str	r0, [sp, #24]
   10dc4:	mov	r0, r1
   10dc8:	movw	r1, #9
   10dcc:	uxth	r1, r1
   10dd0:	movw	r2, #0
   10dd4:	movw	r3, #4
   10dd8:	movw	ip, #2
   10ddc:	uxth	ip, ip
   10de0:	str	ip, [sp]
   10de4:	ldr	ip, [sp, #24]
   10de8:	str	ip, [sp, #4]
   10dec:	bl	0 <flatcc_verify_vector_field>
   10df0:	str	r0, [fp, #-12]
   10df4:	cmp	r0, #0
   10df8:	beq	10e08 <MyGame_Example_Monster_verify_table+0x330>
   10dfc:	ldr	r0, [fp, #-12]
   10e00:	str	r0, [fp, #-4]
   10e04:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10e08:	ldr	r0, [pc, #1180]	; 112ac <MyGame_Example_Monster_verify_table+0x7d4>
   10e0c:	ldr	r1, [fp, #-8]
   10e10:	str	r0, [sp, #20]
   10e14:	mov	r0, r1
   10e18:	movw	r1, #31
   10e1c:	uxth	r1, r1
   10e20:	movw	r2, #0
   10e24:	movw	r3, #4
   10e28:	movw	ip, #2
   10e2c:	uxth	ip, ip
   10e30:	str	ip, [sp]
   10e34:	ldr	ip, [sp, #20]
   10e38:	str	ip, [sp, #4]
   10e3c:	bl	0 <flatcc_verify_vector_field>
   10e40:	str	r0, [fp, #-12]
   10e44:	cmp	r0, #0
   10e48:	beq	10e58 <MyGame_Example_Monster_verify_table+0x380>
   10e4c:	ldr	r0, [fp, #-12]
   10e50:	str	r0, [fp, #-4]
   10e54:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10e58:	ldr	r0, [fp, #-8]
   10e5c:	movw	r1, #13
   10e60:	uxth	r1, r1
   10e64:	movw	r2, #0
   10e68:	str	r2, [sp, #16]
   10e6c:	ldr	r3, [sp, #16]
   10e70:	movw	ip, #1
   10e74:	uxth	ip, ip
   10e78:	str	ip, [sp]
   10e7c:	movw	ip, #0
   10e80:	movt	ip, #0
   10e84:	str	ip, [sp, #4]
   10e88:	bl	0 <flatcc_verify_table_as_nested_root>
   10e8c:	str	r0, [fp, #-12]
   10e90:	cmp	r0, #0
   10e94:	beq	10ea4 <MyGame_Example_Monster_verify_table+0x3cc>
   10e98:	ldr	r0, [fp, #-12]
   10e9c:	str	r0, [fp, #-4]
   10ea0:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10ea4:	ldr	r0, [fp, #-8]
   10ea8:	movw	r1, #14
   10eac:	uxth	r1, r1
   10eb0:	movw	r2, #0
   10eb4:	movw	r3, #0
   10eb8:	movt	r3, #0
   10ebc:	bl	0 <flatcc_verify_table_field>
   10ec0:	str	r0, [fp, #-12]
   10ec4:	cmp	r0, #0
   10ec8:	beq	10ed8 <MyGame_Example_Monster_verify_table+0x400>
   10ecc:	ldr	r0, [fp, #-12]
   10ed0:	str	r0, [fp, #-4]
   10ed4:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10ed8:	ldr	r0, [fp, #-8]
   10edc:	movw	r1, #15
   10ee0:	uxth	r1, r1
   10ee4:	movw	r2, #1
   10ee8:	movw	r3, #1
   10eec:	uxth	r3, r3
   10ef0:	bl	0 <flatcc_verify_field>
   10ef4:	str	r0, [fp, #-12]
   10ef8:	cmp	r0, #0
   10efc:	beq	10f0c <MyGame_Example_Monster_verify_table+0x434>
   10f00:	ldr	r0, [fp, #-12]
   10f04:	str	r0, [fp, #-4]
   10f08:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10f0c:	ldr	r0, [fp, #-8]
   10f10:	movw	r1, #16
   10f14:	uxth	r1, r1
   10f18:	movw	r2, #4
   10f1c:	movw	r3, #4
   10f20:	uxth	r3, r3
   10f24:	bl	0 <flatcc_verify_field>
   10f28:	str	r0, [fp, #-12]
   10f2c:	cmp	r0, #0
   10f30:	beq	10f40 <MyGame_Example_Monster_verify_table+0x468>
   10f34:	ldr	r0, [fp, #-12]
   10f38:	str	r0, [fp, #-4]
   10f3c:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10f40:	ldr	r0, [fp, #-8]
   10f44:	movw	r1, #17
   10f48:	uxth	r1, r1
   10f4c:	movw	r2, #4
   10f50:	movw	r3, #4
   10f54:	uxth	r3, r3
   10f58:	bl	0 <flatcc_verify_field>
   10f5c:	str	r0, [fp, #-12]
   10f60:	cmp	r0, #0
   10f64:	beq	10f74 <MyGame_Example_Monster_verify_table+0x49c>
   10f68:	ldr	r0, [fp, #-12]
   10f6c:	str	r0, [fp, #-4]
   10f70:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10f74:	ldr	r0, [fp, #-8]
   10f78:	movw	r1, #18
   10f7c:	uxth	r1, r1
   10f80:	movw	r2, #8
   10f84:	movw	r3, #8
   10f88:	uxth	r3, r3
   10f8c:	bl	0 <flatcc_verify_field>
   10f90:	str	r0, [fp, #-12]
   10f94:	cmp	r0, #0
   10f98:	beq	10fa8 <MyGame_Example_Monster_verify_table+0x4d0>
   10f9c:	ldr	r0, [fp, #-12]
   10fa0:	str	r0, [fp, #-4]
   10fa4:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10fa8:	ldr	r0, [fp, #-8]
   10fac:	movw	r1, #19
   10fb0:	uxth	r1, r1
   10fb4:	movw	r2, #8
   10fb8:	movw	r3, #8
   10fbc:	uxth	r3, r3
   10fc0:	bl	0 <flatcc_verify_field>
   10fc4:	str	r0, [fp, #-12]
   10fc8:	cmp	r0, #0
   10fcc:	beq	10fdc <MyGame_Example_Monster_verify_table+0x504>
   10fd0:	ldr	r0, [fp, #-12]
   10fd4:	str	r0, [fp, #-4]
   10fd8:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   10fdc:	ldr	r0, [fp, #-8]
   10fe0:	movw	r1, #20
   10fe4:	uxth	r1, r1
   10fe8:	movw	r2, #4
   10fec:	movw	r3, #4
   10ff0:	uxth	r3, r3
   10ff4:	bl	0 <flatcc_verify_field>
   10ff8:	str	r0, [fp, #-12]
   10ffc:	cmp	r0, #0
   11000:	beq	11010 <MyGame_Example_Monster_verify_table+0x538>
   11004:	ldr	r0, [fp, #-12]
   11008:	str	r0, [fp, #-4]
   1100c:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   11010:	ldr	r0, [fp, #-8]
   11014:	movw	r1, #21
   11018:	uxth	r1, r1
   1101c:	movw	r2, #4
   11020:	movw	r3, #4
   11024:	uxth	r3, r3
   11028:	bl	0 <flatcc_verify_field>
   1102c:	str	r0, [fp, #-12]
   11030:	cmp	r0, #0
   11034:	beq	11044 <MyGame_Example_Monster_verify_table+0x56c>
   11038:	ldr	r0, [fp, #-12]
   1103c:	str	r0, [fp, #-4]
   11040:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   11044:	ldr	r0, [fp, #-8]
   11048:	movw	r1, #22
   1104c:	uxth	r1, r1
   11050:	movw	r2, #8
   11054:	movw	r3, #8
   11058:	uxth	r3, r3
   1105c:	bl	0 <flatcc_verify_field>
   11060:	str	r0, [fp, #-12]
   11064:	cmp	r0, #0
   11068:	beq	11078 <MyGame_Example_Monster_verify_table+0x5a0>
   1106c:	ldr	r0, [fp, #-12]
   11070:	str	r0, [fp, #-4]
   11074:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   11078:	ldr	r0, [fp, #-8]
   1107c:	movw	r1, #23
   11080:	uxth	r1, r1
   11084:	movw	r2, #8
   11088:	movw	r3, #8
   1108c:	uxth	r3, r3
   11090:	bl	0 <flatcc_verify_field>
   11094:	str	r0, [fp, #-12]
   11098:	cmp	r0, #0
   1109c:	beq	110ac <MyGame_Example_Monster_verify_table+0x5d4>
   110a0:	ldr	r0, [fp, #-12]
   110a4:	str	r0, [fp, #-4]
   110a8:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   110ac:	ldr	r0, [fp, #-8]
   110b0:	movw	r1, #25
   110b4:	uxth	r1, r1
   110b8:	movw	r2, #4
   110bc:	movw	r3, #4
   110c0:	uxth	r3, r3
   110c4:	bl	0 <flatcc_verify_field>
   110c8:	str	r0, [fp, #-12]
   110cc:	cmp	r0, #0
   110d0:	beq	110e0 <MyGame_Example_Monster_verify_table+0x608>
   110d4:	ldr	r0, [fp, #-12]
   110d8:	str	r0, [fp, #-4]
   110dc:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   110e0:	ldr	r0, [fp, #-8]
   110e4:	movw	r1, #26
   110e8:	uxth	r1, r1
   110ec:	movw	r2, #4
   110f0:	movw	r3, #4
   110f4:	uxth	r3, r3
   110f8:	bl	0 <flatcc_verify_field>
   110fc:	str	r0, [fp, #-12]
   11100:	cmp	r0, #0
   11104:	beq	11114 <MyGame_Example_Monster_verify_table+0x63c>
   11108:	ldr	r0, [fp, #-12]
   1110c:	str	r0, [fp, #-4]
   11110:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   11114:	ldr	r0, [fp, #-8]
   11118:	movw	r1, #27
   1111c:	uxth	r1, r1
   11120:	movw	r2, #4
   11124:	movw	r3, #4
   11128:	uxth	r3, r3
   1112c:	bl	0 <flatcc_verify_field>
   11130:	str	r0, [fp, #-12]
   11134:	cmp	r0, #0
   11138:	beq	11148 <MyGame_Example_Monster_verify_table+0x670>
   1113c:	ldr	r0, [fp, #-12]
   11140:	str	r0, [fp, #-4]
   11144:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   11148:	ldr	r0, [fp, #-8]
   1114c:	movw	r1, #30
   11150:	uxth	r1, r1
   11154:	movw	r2, #0
   11158:	movw	r3, #1
   1115c:	movw	ip, #1
   11160:	uxth	ip, ip
   11164:	str	ip, [sp]
   11168:	mvn	ip, #0
   1116c:	str	ip, [sp, #4]
   11170:	bl	0 <flatcc_verify_vector_field>
   11174:	str	r0, [fp, #-12]
   11178:	cmp	r0, #0
   1117c:	beq	1118c <MyGame_Example_Monster_verify_table+0x6b4>
   11180:	ldr	r0, [fp, #-12]
   11184:	str	r0, [fp, #-4]
   11188:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   1118c:	ldr	r0, [pc, #276]	; 112a8 <MyGame_Example_Monster_verify_table+0x7d0>
   11190:	ldr	r1, [fp, #-8]
   11194:	str	r0, [sp, #12]
   11198:	mov	r0, r1
   1119c:	movw	r1, #32
   111a0:	uxth	r1, r1
   111a4:	movw	r2, #0
   111a8:	movw	r3, #8
   111ac:	movw	ip, #8
   111b0:	uxth	ip, ip
   111b4:	str	ip, [sp]
   111b8:	ldr	ip, [sp, #12]
   111bc:	str	ip, [sp, #4]
   111c0:	bl	0 <flatcc_verify_vector_field>
   111c4:	str	r0, [fp, #-12]
   111c8:	cmp	r0, #0
   111cc:	beq	111dc <MyGame_Example_Monster_verify_table+0x704>
   111d0:	ldr	r0, [fp, #-12]
   111d4:	str	r0, [fp, #-4]
   111d8:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   111dc:	ldr	r0, [pc, #196]	; 112a8 <MyGame_Example_Monster_verify_table+0x7d0>
   111e0:	ldr	r1, [fp, #-8]
   111e4:	str	r0, [sp, #8]
   111e8:	mov	r0, r1
   111ec:	movw	r1, #33	; 0x21
   111f0:	uxth	r1, r1
   111f4:	movw	r2, #0
   111f8:	movw	r3, #8
   111fc:	movw	ip, #8
   11200:	uxth	ip, ip
   11204:	str	ip, [sp]
   11208:	ldr	ip, [sp, #8]
   1120c:	str	ip, [sp, #4]
   11210:	bl	0 <flatcc_verify_vector_field>
   11214:	str	r0, [fp, #-12]
   11218:	cmp	r0, #0
   1121c:	beq	1122c <MyGame_Example_Monster_verify_table+0x754>
   11220:	ldr	r0, [fp, #-12]
   11224:	str	r0, [fp, #-4]
   11228:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   1122c:	ldr	r0, [fp, #-8]
   11230:	movw	r1, #34	; 0x22
   11234:	uxth	r1, r1
   11238:	movw	r2, #0
   1123c:	movw	r3, #0
   11240:	movt	r3, #0
   11244:	bl	0 <flatcc_verify_table_field>
   11248:	str	r0, [fp, #-12]
   1124c:	cmp	r0, #0
   11250:	beq	11260 <MyGame_Example_Monster_verify_table+0x788>
   11254:	ldr	r0, [fp, #-12]
   11258:	str	r0, [fp, #-4]
   1125c:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   11260:	ldr	r0, [fp, #-8]
   11264:	movw	r1, #35	; 0x23
   11268:	uxth	r1, r1
   1126c:	movw	r2, #0
   11270:	movw	r3, #0
   11274:	movt	r3, #0
   11278:	bl	0 <flatcc_verify_table_field>
   1127c:	str	r0, [fp, #-12]
   11280:	cmp	r0, #0
   11284:	beq	11294 <MyGame_Example_Monster_verify_table+0x7bc>
   11288:	ldr	r0, [fp, #-12]
   1128c:	str	r0, [fp, #-4]
   11290:	b	1129c <MyGame_Example_Monster_verify_table+0x7c4>
   11294:	movw	r0, #0
   11298:	str	r0, [fp, #-4]
   1129c:	ldr	r0, [fp, #-4]
   112a0:	mov	sp, fp
   112a4:	pop	{fp, pc}
   112a8:	.word	0x1fffffff
   112ac:	.word	0x3fffffff

000112b0 <MyGame_Example_Any_union_verifier>:
   112b0:	push	{fp, lr}
   112b4:	mov	fp, sp
   112b8:	sub	sp, sp, #16
   112bc:	str	r0, [sp, #8]
   112c0:	ldr	r0, [sp, #8]
   112c4:	ldrb	r0, [r0, #12]
   112c8:	sub	r0, r0, #1
   112cc:	cmp	r0, #3
   112d0:	str	r0, [sp, #4]
   112d4:	bhi	11358 <MyGame_Example_Any_union_verifier+0xa8>
   112d8:	add	r0, pc, #8
   112dc:	ldr	r1, [sp, #4]
   112e0:	ldr	r0, [r0, r1, lsl #2]
   112e4:	mov	pc, r0
   112e8:	.word	0x000112f8
   112ec:	.word	0x00011310
   112f0:	.word	0x00011328
   112f4:	.word	0x00011340
   112f8:	ldr	r0, [sp, #8]
   112fc:	movw	r1, #0
   11300:	movt	r1, #0
   11304:	bl	0 <flatcc_verify_union_table>
   11308:	str	r0, [fp, #-4]
   1130c:	b	11360 <MyGame_Example_Any_union_verifier+0xb0>
   11310:	ldr	r0, [sp, #8]
   11314:	movw	r1, #0
   11318:	movt	r1, #0
   1131c:	bl	0 <flatcc_verify_union_table>
   11320:	str	r0, [fp, #-4]
   11324:	b	11360 <MyGame_Example_Any_union_verifier+0xb0>
   11328:	ldr	r0, [sp, #8]
   1132c:	movw	r1, #0
   11330:	movt	r1, #0
   11334:	bl	0 <flatcc_verify_union_table>
   11338:	str	r0, [fp, #-4]
   1133c:	b	11360 <MyGame_Example_Any_union_verifier+0xb0>
   11340:	ldr	r0, [sp, #8]
   11344:	movw	r1, #0
   11348:	movt	r1, #0
   1134c:	bl	0 <flatcc_verify_union_table>
   11350:	str	r0, [fp, #-4]
   11354:	b	11360 <MyGame_Example_Any_union_verifier+0xb0>
   11358:	movw	r0, #0
   1135c:	str	r0, [fp, #-4]
   11360:	ldr	r0, [fp, #-4]
   11364:	mov	sp, fp
   11368:	pop	{fp, pc}

0001136c <MyGame_Example_Stat_verify_table>:
   1136c:	push	{fp, lr}
   11370:	mov	fp, sp
   11374:	sub	sp, sp, #16
   11378:	str	r0, [sp, #8]
   1137c:	ldr	r0, [sp, #8]
   11380:	movw	r1, #0
   11384:	uxth	r1, r1
   11388:	movw	r2, #0
   1138c:	bl	0 <flatcc_verify_string_field>
   11390:	str	r0, [sp, #4]
   11394:	cmp	r0, #0
   11398:	beq	113a8 <MyGame_Example_Stat_verify_table+0x3c>
   1139c:	ldr	r0, [sp, #4]
   113a0:	str	r0, [fp, #-4]
   113a4:	b	11420 <MyGame_Example_Stat_verify_table+0xb4>
   113a8:	ldr	r0, [sp, #8]
   113ac:	movw	r1, #1
   113b0:	uxth	r1, r1
   113b4:	movw	r2, #8
   113b8:	movw	r3, #8
   113bc:	uxth	r3, r3
   113c0:	bl	0 <flatcc_verify_field>
   113c4:	str	r0, [sp, #4]
   113c8:	cmp	r0, #0
   113cc:	beq	113dc <MyGame_Example_Stat_verify_table+0x70>
   113d0:	ldr	r0, [sp, #4]
   113d4:	str	r0, [fp, #-4]
   113d8:	b	11420 <MyGame_Example_Stat_verify_table+0xb4>
   113dc:	ldr	r0, [sp, #8]
   113e0:	movw	r1, #2
   113e4:	uxth	r2, r1
   113e8:	str	r1, [sp]
   113ec:	mov	r1, r2
   113f0:	movw	r2, #2
   113f4:	ldr	r3, [sp]
   113f8:	uxth	r3, r3
   113fc:	bl	0 <flatcc_verify_field>
   11400:	str	r0, [sp, #4]
   11404:	cmp	r0, #0
   11408:	beq	11418 <MyGame_Example_Stat_verify_table+0xac>
   1140c:	ldr	r0, [sp, #4]
   11410:	str	r0, [fp, #-4]
   11414:	b	11420 <MyGame_Example_Stat_verify_table+0xb4>
   11418:	movw	r0, #0
   1141c:	str	r0, [fp, #-4]
   11420:	ldr	r0, [fp, #-4]
   11424:	mov	sp, fp
   11428:	pop	{fp, pc}

0001142c <MyGame_InParentNamespace_verify_table>:
   1142c:	sub	sp, sp, #4
   11430:	str	r0, [sp]
   11434:	movw	r0, #0
   11438:	add	sp, sp, #4
   1143c:	bx	lr

00011440 <MyGame_Example_TestBase64_verify_table>:
   11440:	push	{fp, lr}
   11444:	mov	fp, sp
   11448:	sub	sp, sp, #32
   1144c:	str	r0, [fp, #-8]
   11450:	ldr	r0, [fp, #-8]
   11454:	movw	r1, #0
   11458:	uxth	r1, r1
   1145c:	movw	r2, #0
   11460:	movw	r3, #1
   11464:	movw	ip, #1
   11468:	uxth	ip, ip
   1146c:	str	ip, [sp]
   11470:	mvn	ip, #0
   11474:	str	ip, [sp, #4]
   11478:	bl	0 <flatcc_verify_vector_field>
   1147c:	str	r0, [fp, #-12]
   11480:	cmp	r0, #0
   11484:	beq	11494 <MyGame_Example_TestBase64_verify_table+0x54>
   11488:	ldr	r0, [fp, #-12]
   1148c:	str	r0, [fp, #-4]
   11490:	b	11534 <MyGame_Example_TestBase64_verify_table+0xf4>
   11494:	ldr	r0, [fp, #-8]
   11498:	movw	r1, #1
   1149c:	uxth	r2, r1
   114a0:	str	r1, [sp, #16]
   114a4:	mov	r1, r2
   114a8:	movw	r2, #0
   114ac:	movw	r3, #1
   114b0:	ldr	ip, [sp, #16]
   114b4:	uxth	lr, ip
   114b8:	str	lr, [sp]
   114bc:	mvn	lr, #0
   114c0:	str	lr, [sp, #4]
   114c4:	bl	0 <flatcc_verify_vector_field>
   114c8:	str	r0, [fp, #-12]
   114cc:	cmp	r0, #0
   114d0:	beq	114e0 <MyGame_Example_TestBase64_verify_table+0xa0>
   114d4:	ldr	r0, [fp, #-12]
   114d8:	str	r0, [fp, #-4]
   114dc:	b	11534 <MyGame_Example_TestBase64_verify_table+0xf4>
   114e0:	ldr	r0, [fp, #-8]
   114e4:	movw	r1, #2
   114e8:	uxth	r1, r1
   114ec:	movw	r2, #0
   114f0:	str	r2, [sp, #12]
   114f4:	ldr	r3, [sp, #12]
   114f8:	movw	ip, #1
   114fc:	uxth	ip, ip
   11500:	str	ip, [sp]
   11504:	movw	ip, #0
   11508:	movt	ip, #0
   1150c:	str	ip, [sp, #4]
   11510:	bl	0 <flatcc_verify_table_as_nested_root>
   11514:	str	r0, [fp, #-12]
   11518:	cmp	r0, #0
   1151c:	beq	1152c <MyGame_Example_TestBase64_verify_table+0xec>
   11520:	ldr	r0, [fp, #-12]
   11524:	str	r0, [fp, #-4]
   11528:	b	11534 <MyGame_Example_TestBase64_verify_table+0xf4>
   1152c:	movw	r0, #0
   11530:	str	r0, [fp, #-4]
   11534:	ldr	r0, [fp, #-4]
   11538:	mov	sp, fp
   1153c:	pop	{fp, pc}

00011540 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
   11540:	push	{fp, lr}
   11544:	mov	fp, sp
   11548:	sub	sp, sp, #16
   1154c:	str	r0, [sp, #8]
   11550:	ldr	r0, [sp, #8]
   11554:	movw	r1, #0
   11558:	uxth	r1, r1
   1155c:	movw	r2, #1
   11560:	movw	r3, #1
   11564:	uxth	r3, r3
   11568:	bl	0 <flatcc_verify_field>
   1156c:	str	r0, [sp, #4]
   11570:	cmp	r0, #0
   11574:	beq	11584 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x44>
   11578:	ldr	r0, [sp, #4]
   1157c:	str	r0, [fp, #-4]
   11580:	b	11630 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
   11584:	ldr	r0, [sp, #8]
   11588:	movw	r1, #1
   1158c:	uxth	r2, r1
   11590:	str	r1, [sp]
   11594:	mov	r1, r2
   11598:	movw	r2, #1
   1159c:	ldr	r3, [sp]
   115a0:	uxth	r3, r3
   115a4:	bl	0 <flatcc_verify_field>
   115a8:	str	r0, [sp, #4]
   115ac:	cmp	r0, #0
   115b0:	beq	115c0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x80>
   115b4:	ldr	r0, [sp, #4]
   115b8:	str	r0, [fp, #-4]
   115bc:	b	11630 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
   115c0:	ldr	r0, [sp, #8]
   115c4:	movw	r1, #2
   115c8:	uxth	r1, r1
   115cc:	movw	r2, #1
   115d0:	movw	r3, #1
   115d4:	uxth	r3, r3
   115d8:	bl	0 <flatcc_verify_field>
   115dc:	str	r0, [sp, #4]
   115e0:	cmp	r0, #0
   115e4:	beq	115f4 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xb4>
   115e8:	ldr	r0, [sp, #4]
   115ec:	str	r0, [fp, #-4]
   115f0:	b	11630 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
   115f4:	ldr	r0, [sp, #8]
   115f8:	movw	r1, #3
   115fc:	uxth	r1, r1
   11600:	movw	r2, #1
   11604:	movw	r3, #1
   11608:	uxth	r3, r3
   1160c:	bl	0 <flatcc_verify_field>
   11610:	str	r0, [sp, #4]
   11614:	cmp	r0, #0
   11618:	beq	11628 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xe8>
   1161c:	ldr	r0, [sp, #4]
   11620:	str	r0, [fp, #-4]
   11624:	b	11630 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
   11628:	movw	r0, #0
   1162c:	str	r0, [fp, #-4]
   11630:	ldr	r0, [fp, #-4]
   11634:	mov	sp, fp
   11638:	pop	{fp, pc}

0001163c <MyGame_Example2_Monster_verify_table>:
   1163c:	sub	sp, sp, #4
   11640:	str	r0, [sp]
   11644:	movw	r0, #0
   11648:	add	sp, sp, #4
   1164c:	bx	lr

00011650 <MyGame_Example_Alt_verify_table>:
   11650:	push	{fp, lr}
   11654:	mov	fp, sp
   11658:	sub	sp, sp, #16
   1165c:	str	r0, [sp, #8]
   11660:	ldr	r0, [sp, #8]
   11664:	movw	r1, #0
   11668:	uxth	r1, r1
   1166c:	movw	r2, #0
   11670:	movw	r3, #0
   11674:	movt	r3, #0
   11678:	bl	0 <flatcc_verify_table_field>
   1167c:	str	r0, [sp, #4]
   11680:	cmp	r0, #0
   11684:	beq	11694 <MyGame_Example_Alt_verify_table+0x44>
   11688:	ldr	r0, [sp, #4]
   1168c:	str	r0, [fp, #-4]
   11690:	b	11704 <MyGame_Example_Alt_verify_table+0xb4>
   11694:	ldr	r0, [sp, #8]
   11698:	movw	r1, #1
   1169c:	uxth	r1, r1
   116a0:	movw	r2, #0
   116a4:	movw	r3, #0
   116a8:	movt	r3, #0
   116ac:	bl	0 <flatcc_verify_table_field>
   116b0:	str	r0, [sp, #4]
   116b4:	cmp	r0, #0
   116b8:	beq	116c8 <MyGame_Example_Alt_verify_table+0x78>
   116bc:	ldr	r0, [sp, #4]
   116c0:	str	r0, [fp, #-4]
   116c4:	b	11704 <MyGame_Example_Alt_verify_table+0xb4>
   116c8:	ldr	r0, [sp, #8]
   116cc:	movw	r1, #3
   116d0:	uxth	r1, r1
   116d4:	movw	r2, #0
   116d8:	movw	r3, #0
   116dc:	movt	r3, #0
   116e0:	bl	0 <flatcc_verify_union_vector_field>
   116e4:	str	r0, [sp, #4]
   116e8:	cmp	r0, #0
   116ec:	beq	116fc <MyGame_Example_Alt_verify_table+0xac>
   116f0:	ldr	r0, [sp, #4]
   116f4:	str	r0, [fp, #-4]
   116f8:	b	11704 <MyGame_Example_Alt_verify_table+0xb4>
   116fc:	movw	r0, #0
   11700:	str	r0, [fp, #-4]
   11704:	ldr	r0, [fp, #-4]
   11708:	mov	sp, fp
   1170c:	pop	{fp, pc}

00011710 <MyGame_Example_TestJSONPrefix_verify_table>:
   11710:	push	{fp, lr}
   11714:	mov	fp, sp
   11718:	sub	sp, sp, #16
   1171c:	str	r0, [sp, #8]
   11720:	ldr	r0, [sp, #8]
   11724:	movw	r1, #0
   11728:	uxth	r1, r1
   1172c:	movw	r2, #0
   11730:	movw	r3, #0
   11734:	movt	r3, #0
   11738:	bl	0 <flatcc_verify_table_field>
   1173c:	str	r0, [sp, #4]
   11740:	cmp	r0, #0
   11744:	beq	11754 <MyGame_Example_TestJSONPrefix_verify_table+0x44>
   11748:	ldr	r0, [sp, #4]
   1174c:	str	r0, [fp, #-4]
   11750:	b	117c4 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
   11754:	ldr	r0, [sp, #8]
   11758:	movw	r1, #1
   1175c:	uxth	r1, r1
   11760:	movw	r2, #0
   11764:	movw	r3, #0
   11768:	movt	r3, #0
   1176c:	bl	0 <flatcc_verify_table_field>
   11770:	str	r0, [sp, #4]
   11774:	cmp	r0, #0
   11778:	beq	11788 <MyGame_Example_TestJSONPrefix_verify_table+0x78>
   1177c:	ldr	r0, [sp, #4]
   11780:	str	r0, [fp, #-4]
   11784:	b	117c4 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
   11788:	ldr	r0, [sp, #8]
   1178c:	movw	r1, #2
   11790:	uxth	r1, r1
   11794:	movw	r2, #0
   11798:	movw	r3, #0
   1179c:	movt	r3, #0
   117a0:	bl	0 <flatcc_verify_table_field>
   117a4:	str	r0, [sp, #4]
   117a8:	cmp	r0, #0
   117ac:	beq	117bc <MyGame_Example_TestJSONPrefix_verify_table+0xac>
   117b0:	ldr	r0, [sp, #4]
   117b4:	str	r0, [fp, #-4]
   117b8:	b	117c4 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
   117bc:	movw	r0, #0
   117c0:	str	r0, [fp, #-4]
   117c4:	ldr	r0, [fp, #-4]
   117c8:	mov	sp, fp
   117cc:	pop	{fp, pc}

000117d0 <Fantasy_Movie_verify_table>:
   117d0:	push	{fp, lr}
   117d4:	mov	fp, sp
   117d8:	sub	sp, sp, #16
   117dc:	str	r0, [sp, #8]
   117e0:	ldr	r0, [sp, #8]
   117e4:	movw	r1, #1
   117e8:	uxth	r1, r1
   117ec:	movw	r2, #0
   117f0:	movw	r3, #0
   117f4:	movt	r3, #0
   117f8:	bl	0 <flatcc_verify_union_field>
   117fc:	str	r0, [sp, #4]
   11800:	cmp	r0, #0
   11804:	beq	11814 <Fantasy_Movie_verify_table+0x44>
   11808:	ldr	r0, [sp, #4]
   1180c:	str	r0, [fp, #-4]
   11810:	b	118ec <Fantasy_Movie_verify_table+0x11c>
   11814:	ldr	r0, [sp, #8]
   11818:	movw	r1, #3
   1181c:	uxth	r1, r1
   11820:	movw	r2, #0
   11824:	movw	r3, #0
   11828:	movt	r3, #0
   1182c:	bl	0 <flatcc_verify_union_field>
   11830:	str	r0, [sp, #4]
   11834:	cmp	r0, #0
   11838:	beq	11848 <Fantasy_Movie_verify_table+0x78>
   1183c:	ldr	r0, [sp, #4]
   11840:	str	r0, [fp, #-4]
   11844:	b	118ec <Fantasy_Movie_verify_table+0x11c>
   11848:	ldr	r0, [sp, #8]
   1184c:	movw	r1, #5
   11850:	uxth	r1, r1
   11854:	movw	r2, #0
   11858:	movw	r3, #0
   1185c:	movt	r3, #0
   11860:	bl	0 <flatcc_verify_union_field>
   11864:	str	r0, [sp, #4]
   11868:	cmp	r0, #0
   1186c:	beq	1187c <Fantasy_Movie_verify_table+0xac>
   11870:	ldr	r0, [sp, #4]
   11874:	str	r0, [fp, #-4]
   11878:	b	118ec <Fantasy_Movie_verify_table+0x11c>
   1187c:	ldr	r0, [sp, #8]
   11880:	movw	r1, #7
   11884:	uxth	r1, r1
   11888:	movw	r2, #0
   1188c:	movw	r3, #0
   11890:	movt	r3, #0
   11894:	bl	0 <flatcc_verify_union_field>
   11898:	str	r0, [sp, #4]
   1189c:	cmp	r0, #0
   118a0:	beq	118b0 <Fantasy_Movie_verify_table+0xe0>
   118a4:	ldr	r0, [sp, #4]
   118a8:	str	r0, [fp, #-4]
   118ac:	b	118ec <Fantasy_Movie_verify_table+0x11c>
   118b0:	ldr	r0, [sp, #8]
   118b4:	movw	r1, #9
   118b8:	uxth	r1, r1
   118bc:	movw	r2, #0
   118c0:	movw	r3, #0
   118c4:	movt	r3, #0
   118c8:	bl	0 <flatcc_verify_union_vector_field>
   118cc:	str	r0, [sp, #4]
   118d0:	cmp	r0, #0
   118d4:	beq	118e4 <Fantasy_Movie_verify_table+0x114>
   118d8:	ldr	r0, [sp, #4]
   118dc:	str	r0, [fp, #-4]
   118e0:	b	118ec <Fantasy_Movie_verify_table+0x11c>
   118e4:	movw	r0, #0
   118e8:	str	r0, [fp, #-4]
   118ec:	ldr	r0, [fp, #-4]
   118f0:	mov	sp, fp
   118f4:	pop	{fp, pc}

000118f8 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
   118f8:	push	{fp, lr}
   118fc:	mov	fp, sp
   11900:	sub	sp, sp, #16
   11904:	str	r0, [sp, #8]
   11908:	ldr	r0, [sp, #8]
   1190c:	movw	r1, #0
   11910:	uxth	r1, r1
   11914:	movw	r2, #0
   11918:	bl	0 <flatcc_verify_string_field>
   1191c:	str	r0, [sp, #4]
   11920:	cmp	r0, #0
   11924:	beq	11934 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x3c>
   11928:	ldr	r0, [sp, #4]
   1192c:	str	r0, [fp, #-4]
   11930:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11934:	ldr	r0, [sp, #8]
   11938:	movw	r1, #1
   1193c:	uxth	r1, r1
   11940:	movw	r2, #4
   11944:	movw	r3, #4
   11948:	uxth	r3, r3
   1194c:	bl	0 <flatcc_verify_field>
   11950:	str	r0, [sp, #4]
   11954:	cmp	r0, #0
   11958:	beq	11968 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x70>
   1195c:	ldr	r0, [sp, #4]
   11960:	str	r0, [fp, #-4]
   11964:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11968:	ldr	r0, [sp, #8]
   1196c:	movw	r1, #2
   11970:	uxth	r1, r1
   11974:	movw	r2, #0
   11978:	bl	0 <flatcc_verify_string_field>
   1197c:	str	r0, [sp, #4]
   11980:	cmp	r0, #0
   11984:	beq	11994 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x9c>
   11988:	ldr	r0, [sp, #4]
   1198c:	str	r0, [fp, #-4]
   11990:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11994:	ldr	r0, [sp, #8]
   11998:	movw	r1, #3
   1199c:	uxth	r1, r1
   119a0:	movw	r2, #8
   119a4:	movw	r3, #8
   119a8:	uxth	r3, r3
   119ac:	bl	0 <flatcc_verify_field>
   119b0:	str	r0, [sp, #4]
   119b4:	cmp	r0, #0
   119b8:	beq	119c8 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xd0>
   119bc:	ldr	r0, [sp, #4]
   119c0:	str	r0, [fp, #-4]
   119c4:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   119c8:	ldr	r0, [sp, #8]
   119cc:	movw	r1, #4
   119d0:	uxth	r1, r1
   119d4:	movw	r2, #0
   119d8:	bl	0 <flatcc_verify_string_field>
   119dc:	str	r0, [sp, #4]
   119e0:	cmp	r0, #0
   119e4:	beq	119f4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xfc>
   119e8:	ldr	r0, [sp, #4]
   119ec:	str	r0, [fp, #-4]
   119f0:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   119f4:	ldr	r0, [sp, #8]
   119f8:	movw	r1, #5
   119fc:	uxth	r1, r1
   11a00:	movw	r2, #8
   11a04:	movw	r3, #8
   11a08:	uxth	r3, r3
   11a0c:	bl	0 <flatcc_verify_field>
   11a10:	str	r0, [sp, #4]
   11a14:	cmp	r0, #0
   11a18:	beq	11a28 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x130>
   11a1c:	ldr	r0, [sp, #4]
   11a20:	str	r0, [fp, #-4]
   11a24:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11a28:	ldr	r0, [sp, #8]
   11a2c:	movw	r1, #6
   11a30:	uxth	r1, r1
   11a34:	movw	r2, #4
   11a38:	movw	r3, #4
   11a3c:	uxth	r3, r3
   11a40:	bl	0 <flatcc_verify_field>
   11a44:	str	r0, [sp, #4]
   11a48:	cmp	r0, #0
   11a4c:	beq	11a5c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x164>
   11a50:	ldr	r0, [sp, #4]
   11a54:	str	r0, [fp, #-4]
   11a58:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11a5c:	ldr	r0, [sp, #8]
   11a60:	movw	r1, #7
   11a64:	uxth	r1, r1
   11a68:	movw	r2, #8
   11a6c:	movw	r3, #8
   11a70:	uxth	r3, r3
   11a74:	bl	0 <flatcc_verify_field>
   11a78:	str	r0, [sp, #4]
   11a7c:	cmp	r0, #0
   11a80:	beq	11a90 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
   11a84:	ldr	r0, [sp, #4]
   11a88:	str	r0, [fp, #-4]
   11a8c:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11a90:	ldr	r0, [sp, #8]
   11a94:	movw	r1, #8
   11a98:	uxth	r1, r1
   11a9c:	movw	r2, #4
   11aa0:	movw	r3, #4
   11aa4:	uxth	r3, r3
   11aa8:	bl	0 <flatcc_verify_field>
   11aac:	str	r0, [sp, #4]
   11ab0:	cmp	r0, #0
   11ab4:	beq	11ac4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1cc>
   11ab8:	ldr	r0, [sp, #4]
   11abc:	str	r0, [fp, #-4]
   11ac0:	b	11acc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11ac4:	movw	r0, #0
   11ac8:	str	r0, [fp, #-4]
   11acc:	ldr	r0, [fp, #-4]
   11ad0:	mov	sp, fp
   11ad4:	pop	{fp, pc}

00011ad8 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
   11ad8:	push	{fp, lr}
   11adc:	mov	fp, sp
   11ae0:	sub	sp, sp, #16
   11ae4:	str	r0, [sp, #8]
   11ae8:	ldr	r0, [sp, #8]
   11aec:	movw	r1, #0
   11af0:	uxth	r1, r1
   11af4:	movw	r2, #8
   11af8:	movw	r3, #8
   11afc:	uxth	r3, r3
   11b00:	bl	0 <flatcc_verify_field>
   11b04:	str	r0, [sp, #4]
   11b08:	cmp	r0, #0
   11b0c:	beq	11b1c <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x44>
   11b10:	ldr	r0, [sp, #4]
   11b14:	str	r0, [fp, #-4]
   11b18:	b	11b58 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x80>
   11b1c:	ldr	r0, [sp, #8]
   11b20:	movw	r1, #1
   11b24:	uxth	r1, r1
   11b28:	movw	r2, #4
   11b2c:	movw	r3, #4
   11b30:	uxth	r3, r3
   11b34:	bl	0 <flatcc_verify_field>
   11b38:	str	r0, [sp, #4]
   11b3c:	cmp	r0, #0
   11b40:	beq	11b50 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x78>
   11b44:	ldr	r0, [sp, #4]
   11b48:	str	r0, [fp, #-4]
   11b4c:	b	11b58 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x80>
   11b50:	movw	r0, #0
   11b54:	str	r0, [fp, #-4]
   11b58:	ldr	r0, [fp, #-4]
   11b5c:	mov	sp, fp
   11b60:	pop	{fp, pc}

00011b64 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
   11b64:	push	{fp, lr}
   11b68:	mov	fp, sp
   11b6c:	sub	sp, sp, #16
   11b70:	str	r0, [sp, #8]
   11b74:	ldr	r0, [sp, #8]
   11b78:	movw	r1, #0
   11b7c:	uxth	r1, r1
   11b80:	movw	r2, #8
   11b84:	movw	r3, #8
   11b88:	uxth	r3, r3
   11b8c:	bl	0 <flatcc_verify_field>
   11b90:	str	r0, [sp, #4]
   11b94:	cmp	r0, #0
   11b98:	beq	11ba8 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x44>
   11b9c:	ldr	r0, [sp, #4]
   11ba0:	str	r0, [fp, #-4]
   11ba4:	b	11be4 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x80>
   11ba8:	ldr	r0, [sp, #8]
   11bac:	movw	r1, #1
   11bb0:	uxth	r1, r1
   11bb4:	movw	r2, #4
   11bb8:	movw	r3, #4
   11bbc:	uxth	r3, r3
   11bc0:	bl	0 <flatcc_verify_field>
   11bc4:	str	r0, [sp, #4]
   11bc8:	cmp	r0, #0
   11bcc:	beq	11bdc <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x78>
   11bd0:	ldr	r0, [sp, #4]
   11bd4:	str	r0, [fp, #-4]
   11bd8:	b	11be4 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x80>
   11bdc:	movw	r0, #0
   11be0:	str	r0, [fp, #-4]
   11be4:	ldr	r0, [fp, #-4]
   11be8:	mov	sp, fp
   11bec:	pop	{fp, pc}

00011bf0 <Fantasy_Character_union_verifier>:
   11bf0:	push	{fp, lr}
   11bf4:	mov	fp, sp
   11bf8:	sub	sp, sp, #16
   11bfc:	str	r0, [sp, #8]
   11c00:	ldr	r0, [sp, #8]
   11c04:	ldrb	r0, [r0, #12]
   11c08:	mov	r1, r0
   11c0c:	cmp	r0, #2
   11c10:	str	r1, [sp, #4]
   11c14:	beq	11c6c <Fantasy_Character_union_verifier+0x7c>
   11c18:	b	11c1c <Fantasy_Character_union_verifier+0x2c>
   11c1c:	ldr	r0, [sp, #4]
   11c20:	cmp	r0, #8
   11c24:	beq	11c84 <Fantasy_Character_union_verifier+0x94>
   11c28:	b	11c2c <Fantasy_Character_union_verifier+0x3c>
   11c2c:	ldr	r0, [sp, #4]
   11c30:	cmp	r0, #9
   11c34:	beq	11ca0 <Fantasy_Character_union_verifier+0xb0>
   11c38:	b	11c3c <Fantasy_Character_union_verifier+0x4c>
   11c3c:	ldr	r0, [sp, #4]
   11c40:	cmp	r0, #10
   11c44:	beq	11cbc <Fantasy_Character_union_verifier+0xcc>
   11c48:	b	11c4c <Fantasy_Character_union_verifier+0x5c>
   11c4c:	ldr	r0, [sp, #4]
   11c50:	cmp	r0, #11
   11c54:	beq	11cd8 <Fantasy_Character_union_verifier+0xe8>
   11c58:	b	11c5c <Fantasy_Character_union_verifier+0x6c>
   11c5c:	ldr	r0, [sp, #4]
   11c60:	cmp	r0, #255	; 0xff
   11c64:	beq	11ce8 <Fantasy_Character_union_verifier+0xf8>
   11c68:	b	11cf8 <Fantasy_Character_union_verifier+0x108>
   11c6c:	ldr	r0, [sp, #8]
   11c70:	movw	r1, #0
   11c74:	movt	r1, #0
   11c78:	bl	0 <flatcc_verify_union_table>
   11c7c:	str	r0, [fp, #-4]
   11c80:	b	11d00 <Fantasy_Character_union_verifier+0x110>
   11c84:	ldr	r0, [sp, #8]
   11c88:	movw	r1, #2
   11c8c:	movw	r2, #2
   11c90:	uxth	r2, r2
   11c94:	bl	0 <flatcc_verify_union_struct>
   11c98:	str	r0, [fp, #-4]
   11c9c:	b	11d00 <Fantasy_Character_union_verifier+0x110>
   11ca0:	ldr	r0, [sp, #8]
   11ca4:	movw	r1, #4
   11ca8:	movw	r2, #4
   11cac:	uxth	r2, r2
   11cb0:	bl	0 <flatcc_verify_union_struct>
   11cb4:	str	r0, [fp, #-4]
   11cb8:	b	11d00 <Fantasy_Character_union_verifier+0x110>
   11cbc:	ldr	r0, [sp, #8]
   11cc0:	movw	r1, #4
   11cc4:	movw	r2, #4
   11cc8:	uxth	r2, r2
   11ccc:	bl	0 <flatcc_verify_union_struct>
   11cd0:	str	r0, [fp, #-4]
   11cd4:	b	11d00 <Fantasy_Character_union_verifier+0x110>
   11cd8:	ldr	r0, [sp, #8]
   11cdc:	bl	0 <flatcc_verify_union_string>
   11ce0:	str	r0, [fp, #-4]
   11ce4:	b	11d00 <Fantasy_Character_union_verifier+0x110>
   11ce8:	ldr	r0, [sp, #8]
   11cec:	bl	0 <flatcc_verify_union_string>
   11cf0:	str	r0, [fp, #-4]
   11cf4:	b	11d00 <Fantasy_Character_union_verifier+0x110>
   11cf8:	movw	r0, #0
   11cfc:	str	r0, [fp, #-4]
   11d00:	ldr	r0, [fp, #-4]
   11d04:	mov	sp, fp
   11d08:	pop	{fp, pc}

00011d0c <Fantasy_Attacker_verify_table>:
   11d0c:	push	{fp, lr}
   11d10:	mov	fp, sp
   11d14:	sub	sp, sp, #16
   11d18:	str	r0, [sp, #8]
   11d1c:	ldr	r0, [sp, #8]
   11d20:	movw	r1, #0
   11d24:	uxth	r1, r1
   11d28:	movw	r2, #4
   11d2c:	movw	r3, #4
   11d30:	uxth	r3, r3
   11d34:	bl	0 <flatcc_verify_field>
   11d38:	str	r0, [sp, #4]
   11d3c:	cmp	r0, #0
   11d40:	beq	11d50 <Fantasy_Attacker_verify_table+0x44>
   11d44:	ldr	r0, [sp, #4]
   11d48:	str	r0, [fp, #-4]
   11d4c:	b	11d58 <Fantasy_Attacker_verify_table+0x4c>
   11d50:	movw	r0, #0
   11d54:	str	r0, [fp, #-4]
   11d58:	ldr	r0, [fp, #-4]
   11d5c:	mov	sp, fp
   11d60:	pop	{fp, pc}

00011d64 <__flatbuffers_thash_read_from_pe>:
   11d64:	push	{fp, lr}
   11d68:	mov	fp, sp
   11d6c:	sub	sp, sp, #8
   11d70:	str	r0, [sp, #4]
   11d74:	ldr	r0, [sp, #4]
   11d78:	ldr	r0, [r0]
   11d7c:	bl	11d88 <__flatbuffers_thash_cast_from_pe>
   11d80:	mov	sp, fp
   11d84:	pop	{fp, pc}

00011d88 <__flatbuffers_thash_cast_from_pe>:
   11d88:	sub	sp, sp, #4
   11d8c:	str	r0, [sp]
   11d90:	ldr	r0, [sp]
   11d94:	add	sp, sp, #4
   11d98:	bx	lr

00011d9c <MyGame_Example_emptystruct__size>:
   11d9c:	movw	r0, #0
   11da0:	bx	lr

00011da4 <MyGame_Example_with_emptystruct_create>:
   11da4:	push	{fp, lr}
   11da8:	mov	fp, sp
   11dac:	sub	sp, sp, #16
   11db0:	str	r0, [sp, #8]
   11db4:	str	r1, [sp, #4]
   11db8:	ldr	r0, [sp, #8]
   11dbc:	bl	11e00 <MyGame_Example_with_emptystruct_start>
   11dc0:	cmp	r0, #0
   11dc4:	bne	11ddc <MyGame_Example_with_emptystruct_create+0x38>
   11dc8:	ldr	r0, [sp, #8]
   11dcc:	ldr	r1, [sp, #4]
   11dd0:	bl	11e24 <MyGame_Example_with_emptystruct_empty_add>
   11dd4:	cmp	r0, #0
   11dd8:	beq	11de8 <MyGame_Example_with_emptystruct_create+0x44>
   11ddc:	movw	r0, #0
   11de0:	str	r0, [fp, #-4]
   11de4:	b	11df4 <MyGame_Example_with_emptystruct_create+0x50>
   11de8:	ldr	r0, [sp, #8]
   11dec:	bl	11e84 <MyGame_Example_with_emptystruct_end>
   11df0:	str	r0, [fp, #-4]
   11df4:	ldr	r0, [fp, #-4]
   11df8:	mov	sp, fp
   11dfc:	pop	{fp, pc}

00011e00 <MyGame_Example_with_emptystruct_start>:
   11e00:	push	{fp, lr}
   11e04:	mov	fp, sp
   11e08:	sub	sp, sp, #8
   11e0c:	str	r0, [sp, #4]
   11e10:	ldr	r0, [sp, #4]
   11e14:	movw	r1, #1
   11e18:	bl	0 <flatcc_builder_start_table>
   11e1c:	mov	sp, fp
   11e20:	pop	{fp, pc}

00011e24 <MyGame_Example_with_emptystruct_empty_add>:
   11e24:	push	{fp, lr}
   11e28:	mov	fp, sp
   11e2c:	sub	sp, sp, #24
   11e30:	str	r0, [fp, #-8]
   11e34:	str	r1, [sp, #12]
   11e38:	ldr	r0, [fp, #-8]
   11e3c:	bl	11ee4 <MyGame_Example_with_emptystruct_empty_start>
   11e40:	str	r0, [sp, #8]
   11e44:	ldr	r0, [sp, #8]
   11e48:	movw	r1, #0
   11e4c:	cmp	r0, r1
   11e50:	bne	11e60 <MyGame_Example_with_emptystruct_empty_add+0x3c>
   11e54:	mvn	r0, #0
   11e58:	str	r0, [fp, #-4]
   11e5c:	b	11e78 <MyGame_Example_with_emptystruct_empty_add+0x54>
   11e60:	ldr	r0, [sp, #8]
   11e64:	ldr	r1, [sp, #12]
   11e68:	bl	11f18 <MyGame_Example_emptystruct_copy_to_pe>
   11e6c:	movw	r1, #0
   11e70:	str	r1, [fp, #-4]
   11e74:	str	r0, [sp, #4]
   11e78:	ldr	r0, [fp, #-4]
   11e7c:	mov	sp, fp
   11e80:	pop	{fp, pc}

00011e84 <MyGame_Example_with_emptystruct_end>:
   11e84:	push	{fp, lr}
   11e88:	mov	fp, sp
   11e8c:	sub	sp, sp, #8
   11e90:	str	r0, [sp, #4]
   11e94:	ldr	r0, [sp, #4]
   11e98:	movw	r1, #0
   11e9c:	movt	r1, #0
   11ea0:	movw	r2, #0
   11ea4:	bl	0 <flatcc_builder_check_required>
   11ea8:	cmp	r0, #0
   11eac:	beq	11eb4 <MyGame_Example_with_emptystruct_end+0x30>
   11eb0:	b	11ed4 <MyGame_Example_with_emptystruct_end+0x50>
   11eb4:	movw	r0, #0
   11eb8:	movt	r0, #0
   11ebc:	movw	r1, #0
   11ec0:	movt	r1, #0
   11ec4:	movw	r2, #215	; 0xd7
   11ec8:	movw	r3, #0
   11ecc:	movt	r3, #0
   11ed0:	bl	0 <__assert_fail>
   11ed4:	ldr	r0, [sp, #4]
   11ed8:	bl	0 <flatcc_builder_end_table>
   11edc:	mov	sp, fp
   11ee0:	pop	{fp, pc}

00011ee4 <MyGame_Example_with_emptystruct_empty_start>:
   11ee4:	push	{fp, lr}
   11ee8:	mov	fp, sp
   11eec:	sub	sp, sp, #8
   11ef0:	str	r0, [sp, #4]
   11ef4:	ldr	r0, [sp, #4]
   11ef8:	movw	r1, #0
   11efc:	str	r1, [sp]
   11f00:	ldr	r2, [sp]
   11f04:	movw	r3, #1
   11f08:	uxth	r3, r3
   11f0c:	bl	0 <flatcc_builder_table_add>
   11f10:	mov	sp, fp
   11f14:	pop	{fp, pc}

00011f18 <MyGame_Example_emptystruct_copy_to_pe>:
   11f18:	sub	sp, sp, #8
   11f1c:	str	r0, [sp, #4]
   11f20:	str	r1, [sp]
   11f24:	ldr	r0, [sp, #4]
   11f28:	add	sp, sp, #8
   11f2c:	bx	lr

00011f30 <MyGame_Example_with_emptystruct_verify_table>:
   11f30:	push	{fp, lr}
   11f34:	mov	fp, sp
   11f38:	sub	sp, sp, #16
   11f3c:	str	r0, [sp, #8]
   11f40:	ldr	r0, [sp, #8]
   11f44:	movw	r1, #0
   11f48:	uxth	r1, r1
   11f4c:	movw	r2, #0
   11f50:	movw	r3, #1
   11f54:	uxth	r3, r3
   11f58:	bl	0 <flatcc_verify_field>
   11f5c:	str	r0, [sp, #4]
   11f60:	cmp	r0, #0
   11f64:	beq	11f74 <MyGame_Example_with_emptystruct_verify_table+0x44>
   11f68:	ldr	r0, [sp, #4]
   11f6c:	str	r0, [fp, #-4]
   11f70:	b	11f7c <MyGame_Example_with_emptystruct_verify_table+0x4c>
   11f74:	movw	r0, #0
   11f78:	str	r0, [fp, #-4]
   11f7c:	ldr	r0, [fp, #-4]
   11f80:	mov	sp, fp
   11f84:	pop	{fp, pc}

00011f88 <__flatbuffers_thash_cast_from_le>:
   11f88:	sub	sp, sp, #4
   11f8c:	str	r0, [sp]
   11f90:	ldr	r0, [sp]
   11f94:	add	sp, sp, #4
   11f98:	bx	lr

00011f9c <MyGame_Example_Vec3__size>:
   11f9c:	movw	r0, #32
   11fa0:	bx	lr

00011fa4 <flatbuffers_float_copy_from_pe>:
   11fa4:	push	{fp, lr}
   11fa8:	mov	fp, sp
   11fac:	sub	sp, sp, #8
   11fb0:	str	r0, [sp, #4]
   11fb4:	str	r1, [sp]
   11fb8:	ldr	r0, [sp]
   11fbc:	vldr	s0, [r0]
   11fc0:	bl	10a74 <flatbuffers_float_cast_from_pe>
   11fc4:	ldr	r0, [sp, #4]
   11fc8:	vstr	s0, [r0]
   11fcc:	ldr	r0, [sp, #4]
   11fd0:	mov	sp, fp
   11fd4:	pop	{fp, pc}

00011fd8 <flatbuffers_double_copy_from_pe>:
   11fd8:	push	{fp, lr}
   11fdc:	mov	fp, sp
   11fe0:	sub	sp, sp, #8
   11fe4:	str	r0, [sp, #4]
   11fe8:	str	r1, [sp]
   11fec:	ldr	r0, [sp]
   11ff0:	vldr	d0, [r0]
   11ff4:	bl	10abc <flatbuffers_double_cast_from_pe>
   11ff8:	ldr	r0, [sp, #4]
   11ffc:	vstr	d0, [r0]
   12000:	ldr	r0, [sp, #4]
   12004:	mov	sp, fp
   12008:	pop	{fp, pc}

0001200c <MyGame_Example_Test_copy_from_pe>:
   1200c:	push	{fp, lr}
   12010:	mov	fp, sp
   12014:	sub	sp, sp, #16
   12018:	str	r0, [fp, #-4]
   1201c:	str	r1, [sp, #8]
   12020:	ldr	r0, [fp, #-4]
   12024:	ldr	r1, [sp, #8]
   12028:	bl	12050 <flatbuffers_int16_copy_from_pe>
   1202c:	ldr	r1, [sp, #8]
   12030:	ldrb	r1, [r1, #2]
   12034:	ldr	lr, [fp, #-4]
   12038:	strb	r1, [lr, #2]
   1203c:	ldr	r1, [fp, #-4]
   12040:	str	r0, [sp, #4]
   12044:	mov	r0, r1
   12048:	mov	sp, fp
   1204c:	pop	{fp, pc}

00012050 <flatbuffers_int16_copy_from_pe>:
   12050:	push	{fp, lr}
   12054:	mov	fp, sp
   12058:	sub	sp, sp, #8
   1205c:	str	r0, [sp, #4]
   12060:	str	r1, [sp]
   12064:	ldr	r0, [sp]
   12068:	ldrsh	r0, [r0]
   1206c:	bl	fa5c <flatbuffers_int16_cast_from_pe>
   12070:	ldr	r1, [sp, #4]
   12074:	strh	r0, [r1]
   12078:	ldr	r0, [sp, #4]
   1207c:	mov	sp, fp
   12080:	pop	{fp, pc}

00012084 <MyGame_Example_Color_read_from_pe>:
   12084:	push	{fp, lr}
   12088:	mov	fp, sp
   1208c:	sub	sp, sp, #8
   12090:	str	r0, [sp, #4]
   12094:	ldr	r0, [sp, #4]
   12098:	ldrsb	r0, [r0]
   1209c:	bl	120ac <MyGame_Example_Color_cast_from_pe>
   120a0:	sxtb	r0, r0
   120a4:	mov	sp, fp
   120a8:	pop	{fp, pc}

000120ac <MyGame_Example_Color_cast_from_pe>:
   120ac:	sub	sp, sp, #4
   120b0:	strb	r0, [sp, #3]
   120b4:	ldrsb	r0, [sp, #3]
   120b8:	add	sp, sp, #4
   120bc:	bx	lr

000120c0 <flatbuffers_vec_len>:
   120c0:	push	{fp, lr}
   120c4:	mov	fp, sp
   120c8:	sub	sp, sp, #8
   120cc:	str	r0, [sp, #4]
   120d0:	ldr	r0, [sp, #4]
   120d4:	movw	r1, #0
   120d8:	cmp	r0, r1
   120dc:	beq	120f8 <flatbuffers_vec_len+0x38>
   120e0:	ldr	r0, [sp, #4]
   120e4:	mvn	r1, #3
   120e8:	add	r0, r0, r1
   120ec:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   120f0:	str	r0, [sp]
   120f4:	b	12104 <flatbuffers_vec_len+0x44>
   120f8:	movw	r0, #0
   120fc:	str	r0, [sp]
   12100:	b	12104 <flatbuffers_vec_len+0x44>
   12104:	ldr	r0, [sp]
   12108:	mov	sp, fp
   1210c:	pop	{fp, pc}

00012110 <flatbuffers_bool_read_from_pe>:
   12110:	push	{fp, lr}
   12114:	mov	fp, sp
   12118:	sub	sp, sp, #8
   1211c:	str	r0, [sp, #4]
   12120:	ldr	r0, [sp, #4]
   12124:	ldrb	r0, [r0]
   12128:	bl	12138 <flatbuffers_bool_cast_from_pe>
   1212c:	and	r0, r0, #255	; 0xff
   12130:	mov	sp, fp
   12134:	pop	{fp, pc}

00012138 <flatbuffers_bool_cast_from_pe>:
   12138:	sub	sp, sp, #4
   1213c:	strb	r0, [sp, #3]
   12140:	ldrb	r0, [sp, #3]
   12144:	add	sp, sp, #4
   12148:	bx	lr

0001214c <__flatbuffers_utype_read_from_pe>:
   1214c:	push	{fp, lr}
   12150:	mov	fp, sp
   12154:	sub	sp, sp, #8
   12158:	str	r0, [sp, #4]
   1215c:	ldr	r0, [sp, #4]
   12160:	ldrb	r0, [r0]
   12164:	bl	12174 <__flatbuffers_utype_cast_from_pe>
   12168:	and	r0, r0, #255	; 0xff
   1216c:	mov	sp, fp
   12170:	pop	{fp, pc}

00012174 <__flatbuffers_utype_cast_from_pe>:
   12174:	sub	sp, sp, #4
   12178:	strb	r0, [sp, #3]
   1217c:	ldrb	r0, [sp, #3]
   12180:	add	sp, sp, #4
   12184:	bx	lr

00012188 <flatbuffers_buffer_start_with_size>:
   12188:	push	{fp, lr}
   1218c:	mov	fp, sp
   12190:	sub	sp, sp, #8
   12194:	str	r0, [sp, #4]
   12198:	str	r1, [sp]
   1219c:	ldr	r0, [sp, #4]
   121a0:	ldr	r1, [sp]
   121a4:	movw	r2, #0
   121a8:	uxth	r2, r2
   121ac:	movw	r3, #2
   121b0:	bl	0 <flatcc_builder_start_buffer>
   121b4:	mov	sp, fp
   121b8:	pop	{fp, pc}

000121bc <MyGame_Example_Color_assign_to_pe>:
   121bc:	push	{fp, lr}
   121c0:	mov	fp, sp
   121c4:	sub	sp, sp, #8
   121c8:	str	r0, [sp, #4]
   121cc:	strb	r1, [sp, #3]
   121d0:	ldrsb	r0, [sp, #3]
   121d4:	bl	121ec <MyGame_Example_Color_cast_to_pe>
   121d8:	ldr	r1, [sp, #4]
   121dc:	strb	r0, [r1]
   121e0:	ldr	r0, [sp, #4]
   121e4:	mov	sp, fp
   121e8:	pop	{fp, pc}

000121ec <MyGame_Example_Color_cast_to_pe>:
   121ec:	sub	sp, sp, #4
   121f0:	strb	r0, [sp, #3]
   121f4:	ldrsb	r0, [sp, #3]
   121f8:	add	sp, sp, #4
   121fc:	bx	lr

00012200 <MyGame_Example_Monster_inventory_add>:
   12200:	push	{fp, lr}
   12204:	mov	fp, sp
   12208:	sub	sp, sp, #16
   1220c:	str	r0, [fp, #-4]
   12210:	str	r1, [sp, #8]
   12214:	ldr	r0, [sp, #8]
   12218:	cmp	r0, #0
   1221c:	beq	12254 <MyGame_Example_Monster_inventory_add+0x54>
   12220:	ldr	r0, [fp, #-4]
   12224:	movw	r1, #5
   12228:	bl	0 <flatcc_builder_table_add_offset>
   1222c:	str	r0, [sp, #4]
   12230:	movw	r1, #0
   12234:	cmp	r0, r1
   12238:	beq	12254 <MyGame_Example_Monster_inventory_add+0x54>
   1223c:	ldr	r0, [sp, #8]
   12240:	ldr	r1, [sp, #4]
   12244:	str	r0, [r1]
   12248:	movw	r0, #0
   1224c:	str	r0, [sp]
   12250:	b	12260 <MyGame_Example_Monster_inventory_add+0x60>
   12254:	mvn	r0, #0
   12258:	str	r0, [sp]
   1225c:	b	12260 <MyGame_Example_Monster_inventory_add+0x60>
   12260:	ldr	r0, [sp]
   12264:	mov	sp, fp
   12268:	pop	{fp, pc}

0001226c <MyGame_Example_Test_vec_start>:
   1226c:	push	{fp, lr}
   12270:	mov	fp, sp
   12274:	sub	sp, sp, #8
   12278:	ldr	r3, [pc, #28]	; 1229c <MyGame_Example_Test_vec_start+0x30>
   1227c:	str	r0, [sp, #4]
   12280:	ldr	r0, [sp, #4]
   12284:	movw	r1, #4
   12288:	movw	r2, #2
   1228c:	uxth	r2, r2
   12290:	bl	0 <flatcc_builder_start_vector>
   12294:	mov	sp, fp
   12298:	pop	{fp, pc}
   1229c:	.word	0x3fffffff

000122a0 <MyGame_Example_Test_assign>:
   122a0:	sub	sp, sp, #8
   122a4:	str	r0, [sp, #4]
   122a8:	strh	r1, [sp, #2]
   122ac:	strb	r2, [sp, #1]
   122b0:	ldrh	r0, [sp, #2]
   122b4:	ldr	r1, [sp, #4]
   122b8:	strh	r0, [r1]
   122bc:	ldrb	r0, [sp, #1]
   122c0:	ldr	r1, [sp, #4]
   122c4:	strb	r0, [r1, #2]
   122c8:	ldr	r0, [sp, #4]
   122cc:	add	sp, sp, #8
   122d0:	bx	lr

000122d4 <MyGame_Example_Test__size>:
   122d4:	movw	r0, #4
   122d8:	bx	lr

000122dc <MyGame_Example_Monster_test4_add>:
   122dc:	push	{fp, lr}
   122e0:	mov	fp, sp
   122e4:	sub	sp, sp, #16
   122e8:	str	r0, [fp, #-4]
   122ec:	str	r1, [sp, #8]
   122f0:	ldr	r0, [sp, #8]
   122f4:	cmp	r0, #0
   122f8:	beq	12330 <MyGame_Example_Monster_test4_add+0x54>
   122fc:	ldr	r0, [fp, #-4]
   12300:	movw	r1, #9
   12304:	bl	0 <flatcc_builder_table_add_offset>
   12308:	str	r0, [sp, #4]
   1230c:	movw	r1, #0
   12310:	cmp	r0, r1
   12314:	beq	12330 <MyGame_Example_Monster_test4_add+0x54>
   12318:	ldr	r0, [sp, #8]
   1231c:	ldr	r1, [sp, #4]
   12320:	str	r0, [r1]
   12324:	movw	r0, #0
   12328:	str	r0, [sp]
   1232c:	b	1233c <MyGame_Example_Monster_test4_add+0x60>
   12330:	mvn	r0, #0
   12334:	str	r0, [sp]
   12338:	b	1233c <MyGame_Example_Monster_test4_add+0x60>
   1233c:	ldr	r0, [sp]
   12340:	mov	sp, fp
   12344:	pop	{fp, pc}

00012348 <MyGame_Example_Test_vec_end>:
   12348:	push	{fp, lr}
   1234c:	mov	fp, sp
   12350:	sub	sp, sp, #8
   12354:	str	r0, [sp, #4]
   12358:	ldr	r0, [sp, #4]
   1235c:	bl	0 <flatcc_builder_end_vector>
   12360:	mov	sp, fp
   12364:	pop	{fp, pc}

00012368 <MyGame_Example_Monster_testarrayoftables_push>:
   12368:	push	{fp, lr}
   1236c:	mov	fp, sp
   12370:	sub	sp, sp, #16
   12374:	str	r0, [fp, #-4]
   12378:	str	r1, [sp, #8]
   1237c:	ldr	r0, [sp, #8]
   12380:	cmp	r0, #0
   12384:	beq	1239c <MyGame_Example_Monster_testarrayoftables_push+0x34>
   12388:	ldr	r0, [fp, #-4]
   1238c:	ldr	r1, [sp, #8]
   12390:	bl	0 <flatcc_builder_offset_vector_push>
   12394:	str	r0, [sp, #4]
   12398:	b	123a8 <MyGame_Example_Monster_testarrayoftables_push+0x40>
   1239c:	movw	r0, #0
   123a0:	str	r0, [sp, #4]
   123a4:	b	123a8 <MyGame_Example_Monster_testarrayoftables_push+0x40>
   123a8:	ldr	r0, [sp, #4]
   123ac:	mov	sp, fp
   123b0:	pop	{fp, pc}

000123b4 <MyGame_Example_Monster_testarrayoftables_add>:
   123b4:	push	{fp, lr}
   123b8:	mov	fp, sp
   123bc:	sub	sp, sp, #16
   123c0:	str	r0, [fp, #-4]
   123c4:	str	r1, [sp, #8]
   123c8:	ldr	r0, [sp, #8]
   123cc:	cmp	r0, #0
   123d0:	beq	12408 <MyGame_Example_Monster_testarrayoftables_add+0x54>
   123d4:	ldr	r0, [fp, #-4]
   123d8:	movw	r1, #11
   123dc:	bl	0 <flatcc_builder_table_add_offset>
   123e0:	str	r0, [sp, #4]
   123e4:	movw	r1, #0
   123e8:	cmp	r0, r1
   123ec:	beq	12408 <MyGame_Example_Monster_testarrayoftables_add+0x54>
   123f0:	ldr	r0, [sp, #8]
   123f4:	ldr	r1, [sp, #4]
   123f8:	str	r0, [r1]
   123fc:	movw	r0, #0
   12400:	str	r0, [sp]
   12404:	b	12414 <MyGame_Example_Monster_testarrayoftables_add+0x60>
   12408:	mvn	r0, #0
   1240c:	str	r0, [sp]
   12410:	b	12414 <MyGame_Example_Monster_testarrayoftables_add+0x60>
   12414:	ldr	r0, [sp]
   12418:	mov	sp, fp
   1241c:	pop	{fp, pc}

00012420 <MyGame_Example_Monster_testarrayofstring_add>:
   12420:	push	{fp, lr}
   12424:	mov	fp, sp
   12428:	sub	sp, sp, #16
   1242c:	str	r0, [fp, #-4]
   12430:	str	r1, [sp, #8]
   12434:	ldr	r0, [sp, #8]
   12438:	cmp	r0, #0
   1243c:	beq	12474 <MyGame_Example_Monster_testarrayofstring_add+0x54>
   12440:	ldr	r0, [fp, #-4]
   12444:	movw	r1, #10
   12448:	bl	0 <flatcc_builder_table_add_offset>
   1244c:	str	r0, [sp, #4]
   12450:	movw	r1, #0
   12454:	cmp	r0, r1
   12458:	beq	12474 <MyGame_Example_Monster_testarrayofstring_add+0x54>
   1245c:	ldr	r0, [sp, #8]
   12460:	ldr	r1, [sp, #4]
   12464:	str	r0, [r1]
   12468:	movw	r0, #0
   1246c:	str	r0, [sp]
   12470:	b	12480 <MyGame_Example_Monster_testarrayofstring_add+0x60>
   12474:	mvn	r0, #0
   12478:	str	r0, [sp]
   1247c:	b	12480 <MyGame_Example_Monster_testarrayofstring_add+0x60>
   12480:	ldr	r0, [sp]
   12484:	mov	sp, fp
   12488:	pop	{fp, pc}

0001248c <flatbuffers_bool_vec_start>:
   1248c:	push	{fp, lr}
   12490:	mov	fp, sp
   12494:	sub	sp, sp, #8
   12498:	str	r0, [sp, #4]
   1249c:	ldr	r0, [sp, #4]
   124a0:	movw	r1, #1
   124a4:	movw	r2, #1
   124a8:	uxth	r2, r2
   124ac:	mvn	r3, #0
   124b0:	bl	0 <flatcc_builder_start_vector>
   124b4:	mov	sp, fp
   124b8:	pop	{fp, pc}

000124bc <MyGame_Example_Monster_testarrayofbools_add>:
   124bc:	push	{fp, lr}
   124c0:	mov	fp, sp
   124c4:	sub	sp, sp, #16
   124c8:	str	r0, [fp, #-4]
   124cc:	str	r1, [sp, #8]
   124d0:	ldr	r0, [sp, #8]
   124d4:	cmp	r0, #0
   124d8:	beq	12510 <MyGame_Example_Monster_testarrayofbools_add+0x54>
   124dc:	ldr	r0, [fp, #-4]
   124e0:	movw	r1, #24
   124e4:	bl	0 <flatcc_builder_table_add_offset>
   124e8:	str	r0, [sp, #4]
   124ec:	movw	r1, #0
   124f0:	cmp	r0, r1
   124f4:	beq	12510 <MyGame_Example_Monster_testarrayofbools_add+0x54>
   124f8:	ldr	r0, [sp, #8]
   124fc:	ldr	r1, [sp, #4]
   12500:	str	r0, [r1]
   12504:	movw	r0, #0
   12508:	str	r0, [sp]
   1250c:	b	1251c <MyGame_Example_Monster_testarrayofbools_add+0x60>
   12510:	mvn	r0, #0
   12514:	str	r0, [sp]
   12518:	b	1251c <MyGame_Example_Monster_testarrayofbools_add+0x60>
   1251c:	ldr	r0, [sp]
   12520:	mov	sp, fp
   12524:	pop	{fp, pc}

00012528 <flatbuffers_bool_vec_end>:
   12528:	push	{fp, lr}
   1252c:	mov	fp, sp
   12530:	sub	sp, sp, #8
   12534:	str	r0, [sp, #4]
   12538:	ldr	r0, [sp, #4]
   1253c:	bl	0 <flatcc_builder_end_vector>
   12540:	mov	sp, fp
   12544:	pop	{fp, pc}

00012548 <MyGame_Example_Monster_vec_push>:
   12548:	push	{fp, lr}
   1254c:	mov	fp, sp
   12550:	sub	sp, sp, #16
   12554:	str	r0, [fp, #-4]
   12558:	str	r1, [sp, #8]
   1255c:	ldr	r0, [sp, #8]
   12560:	cmp	r0, #0
   12564:	beq	1257c <MyGame_Example_Monster_vec_push+0x34>
   12568:	ldr	r0, [fp, #-4]
   1256c:	ldr	r1, [sp, #8]
   12570:	bl	0 <flatcc_builder_offset_vector_push>
   12574:	str	r0, [sp, #4]
   12578:	b	12588 <MyGame_Example_Monster_vec_push+0x40>
   1257c:	movw	r0, #0
   12580:	str	r0, [sp, #4]
   12584:	b	12588 <MyGame_Example_Monster_vec_push+0x40>
   12588:	ldr	r0, [sp, #4]
   1258c:	mov	sp, fp
   12590:	pop	{fp, pc}

00012594 <flatbuffers_bool_assign_to_pe>:
   12594:	push	{fp, lr}
   12598:	mov	fp, sp
   1259c:	sub	sp, sp, #8
   125a0:	str	r0, [sp, #4]
   125a4:	strb	r1, [sp, #3]
   125a8:	ldrb	r0, [sp, #3]
   125ac:	bl	125c4 <flatbuffers_bool_cast_to_pe>
   125b0:	ldr	r1, [sp, #4]
   125b4:	strb	r0, [r1]
   125b8:	ldr	r0, [sp, #4]
   125bc:	mov	sp, fp
   125c0:	pop	{fp, pc}

000125c4 <flatbuffers_bool_cast_to_pe>:
   125c4:	sub	sp, sp, #4
   125c8:	strb	r0, [sp, #3]
   125cc:	ldrb	r0, [sp, #3]
   125d0:	add	sp, sp, #4
   125d4:	bx	lr

000125d8 <MyGame_Example_Stat_start>:
   125d8:	push	{fp, lr}
   125dc:	mov	fp, sp
   125e0:	sub	sp, sp, #8
   125e4:	str	r0, [sp, #4]
   125e8:	ldr	r0, [sp, #4]
   125ec:	movw	r1, #3
   125f0:	bl	0 <flatcc_builder_start_table>
   125f4:	mov	sp, fp
   125f8:	pop	{fp, pc}

000125fc <MyGame_Example_Monster_testempty_add>:
   125fc:	push	{fp, lr}
   12600:	mov	fp, sp
   12604:	sub	sp, sp, #16
   12608:	str	r0, [fp, #-4]
   1260c:	str	r1, [sp, #8]
   12610:	ldr	r0, [sp, #8]
   12614:	cmp	r0, #0
   12618:	beq	12650 <MyGame_Example_Monster_testempty_add+0x54>
   1261c:	ldr	r0, [fp, #-4]
   12620:	movw	r1, #14
   12624:	bl	0 <flatcc_builder_table_add_offset>
   12628:	str	r0, [sp, #4]
   1262c:	movw	r1, #0
   12630:	cmp	r0, r1
   12634:	beq	12650 <MyGame_Example_Monster_testempty_add+0x54>
   12638:	ldr	r0, [sp, #8]
   1263c:	ldr	r1, [sp, #4]
   12640:	str	r0, [r1]
   12644:	movw	r0, #0
   12648:	str	r0, [sp]
   1264c:	b	1265c <MyGame_Example_Monster_testempty_add+0x60>
   12650:	mvn	r0, #0
   12654:	str	r0, [sp]
   12658:	b	1265c <MyGame_Example_Monster_testempty_add+0x60>
   1265c:	ldr	r0, [sp]
   12660:	mov	sp, fp
   12664:	pop	{fp, pc}

00012668 <MyGame_Example_Stat_end>:
   12668:	push	{fp, lr}
   1266c:	mov	fp, sp
   12670:	sub	sp, sp, #8
   12674:	str	r0, [sp, #4]
   12678:	ldr	r0, [sp, #4]
   1267c:	movw	r1, #0
   12680:	movt	r1, #0
   12684:	movw	r2, #0
   12688:	bl	0 <flatcc_builder_check_required>
   1268c:	cmp	r0, #0
   12690:	beq	12698 <MyGame_Example_Stat_end+0x30>
   12694:	b	126b8 <MyGame_Example_Stat_end+0x50>
   12698:	movw	r0, #0
   1269c:	movt	r0, #0
   126a0:	movw	r1, #0
   126a4:	movt	r1, #0
   126a8:	movw	r2, #221	; 0xdd
   126ac:	movw	r3, #0
   126b0:	movt	r3, #0
   126b4:	bl	0 <__assert_fail>
   126b8:	ldr	r0, [sp, #4]
   126bc:	bl	0 <flatcc_builder_end_table>
   126c0:	mov	sp, fp
   126c4:	pop	{fp, pc}

000126c8 <__MyGame_Example_Monster_sort_by_name__heap_sort>:
   126c8:	push	{fp, lr}
   126cc:	mov	fp, sp
   126d0:	sub	sp, sp, #32
   126d4:	str	r0, [fp, #-4]
   126d8:	ldr	r0, [fp, #-4]
   126dc:	bl	4454 <MyGame_Example_Monster_vec_len>
   126e0:	str	r0, [sp, #16]
   126e4:	ldr	r0, [sp, #16]
   126e8:	cmp	r0, #0
   126ec:	bne	126f4 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x2c>
   126f0:	b	127d0 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x108>
   126f4:	ldr	r0, [sp, #16]
   126f8:	sub	r0, r0, #1
   126fc:	str	r0, [fp, #-12]
   12700:	ldr	r0, [sp, #16]
   12704:	lsr	r0, r0, #1
   12708:	str	r0, [fp, #-8]
   1270c:	ldr	r0, [fp, #-4]
   12710:	ldr	r1, [fp, #-8]
   12714:	ldr	r2, [fp, #-12]
   12718:	bl	127d8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
   1271c:	ldr	r0, [fp, #-8]
   12720:	mvn	r1, #0
   12724:	add	r1, r0, r1
   12728:	str	r1, [fp, #-8]
   1272c:	cmp	r0, #0
   12730:	bne	1270c <__MyGame_Example_Monster_sort_by_name__heap_sort+0x44>
   12734:	b	12738 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x70>
   12738:	ldr	r0, [fp, #-12]
   1273c:	cmp	r0, #0
   12740:	bls	127d0 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x108>
   12744:	ldr	r0, [fp, #-12]
   12748:	rsb	r0, r0, #0
   1274c:	lsl	r0, r0, #2
   12750:	str	r0, [sp, #4]
   12754:	ldr	r0, [fp, #-4]
   12758:	ldr	r1, [fp, #-12]
   1275c:	add	r0, r0, r1, lsl #2
   12760:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   12764:	ldr	r1, [sp, #4]
   12768:	sub	r0, r0, r1
   1276c:	str	r0, [sp, #12]
   12770:	ldr	r0, [fp, #-4]
   12774:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   12778:	ldr	r1, [sp, #4]
   1277c:	add	r0, r0, r1
   12780:	str	r0, [sp, #8]
   12784:	ldr	r0, [fp, #-4]
   12788:	ldr	r1, [sp, #12]
   1278c:	bl	12994 <__flatbuffers_uoffset_write_to_pe>
   12790:	ldr	r0, [fp, #-4]
   12794:	ldr	r1, [fp, #-12]
   12798:	add	r0, r0, r1, lsl #2
   1279c:	ldr	r1, [sp, #8]
   127a0:	bl	12994 <__flatbuffers_uoffset_write_to_pe>
   127a4:	ldr	r0, [fp, #-4]
   127a8:	ldr	r1, [fp, #-12]
   127ac:	mvn	lr, #0
   127b0:	add	r1, r1, lr
   127b4:	str	r1, [fp, #-12]
   127b8:	movw	lr, #0
   127bc:	str	r1, [sp]
   127c0:	mov	r1, lr
   127c4:	ldr	r2, [sp]
   127c8:	bl	127d8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
   127cc:	b	12738 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x70>
   127d0:	mov	sp, fp
   127d4:	pop	{fp, pc}

000127d8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>:
   127d8:	push	{fp, lr}
   127dc:	mov	fp, sp
   127e0:	sub	sp, sp, #72	; 0x48
   127e4:	str	r0, [fp, #-4]
   127e8:	str	r1, [fp, #-8]
   127ec:	str	r2, [fp, #-12]
   127f0:	ldr	r0, [fp, #-8]
   127f4:	str	r0, [fp, #-20]	; 0xffffffec
   127f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   127fc:	lsl	r0, r0, #1
   12800:	ldr	r1, [fp, #-12]
   12804:	cmp	r0, r1
   12808:	bhi	1298c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1b4>
   1280c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12810:	lsl	r0, r0, #1
   12814:	str	r0, [fp, #-16]
   12818:	ldr	r0, [fp, #-16]
   1281c:	ldr	r1, [fp, #-12]
   12820:	cmp	r0, r1
   12824:	bcs	128a0 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xc8>
   12828:	ldr	r0, [fp, #-4]
   1282c:	ldr	r1, [fp, #-16]
   12830:	bl	44a4 <MyGame_Example_Monster_vec_at>
   12834:	bl	3a0c <MyGame_Example_Monster_name>
   12838:	str	r0, [fp, #-24]	; 0xffffffe8
   1283c:	ldr	r0, [fp, #-4]
   12840:	ldr	r1, [fp, #-16]
   12844:	add	r1, r1, #1
   12848:	bl	44a4 <MyGame_Example_Monster_vec_at>
   1284c:	bl	3a0c <MyGame_Example_Monster_name>
   12850:	str	r0, [fp, #-28]	; 0xffffffe4
   12854:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12858:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1285c:	ldr	lr, [fp, #-28]	; 0xffffffe4
   12860:	str	r0, [sp, #24]
   12864:	mov	r0, lr
   12868:	str	r1, [sp, #20]
   1286c:	bl	3b14 <flatbuffers_string_len>
   12870:	ldr	r1, [sp, #24]
   12874:	str	r0, [sp, #16]
   12878:	mov	r0, r1
   1287c:	ldr	r1, [sp, #20]
   12880:	ldr	r2, [sp, #16]
   12884:	bl	129c0 <__flatbuffers_string_n_cmp>
   12888:	cmp	r0, #0
   1288c:	bge	1289c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xc4>
   12890:	ldr	r0, [fp, #-16]
   12894:	add	r0, r0, #1
   12898:	str	r0, [fp, #-16]
   1289c:	b	128a0 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xc8>
   128a0:	ldr	r0, [fp, #-4]
   128a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   128a8:	bl	44a4 <MyGame_Example_Monster_vec_at>
   128ac:	bl	3a0c <MyGame_Example_Monster_name>
   128b0:	str	r0, [fp, #-32]	; 0xffffffe0
   128b4:	ldr	r0, [fp, #-4]
   128b8:	ldr	r1, [fp, #-16]
   128bc:	bl	44a4 <MyGame_Example_Monster_vec_at>
   128c0:	bl	3a0c <MyGame_Example_Monster_name>
   128c4:	str	r0, [fp, #-24]	; 0xffffffe8
   128c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   128cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   128d0:	ldr	lr, [fp, #-24]	; 0xffffffe8
   128d4:	str	r0, [sp, #12]
   128d8:	mov	r0, lr
   128dc:	str	r1, [sp, #8]
   128e0:	bl	3b14 <flatbuffers_string_len>
   128e4:	ldr	r1, [sp, #12]
   128e8:	str	r0, [sp, #4]
   128ec:	mov	r0, r1
   128f0:	ldr	r1, [sp, #8]
   128f4:	ldr	r2, [sp, #4]
   128f8:	bl	129c0 <__flatbuffers_string_n_cmp>
   128fc:	cmp	r0, #0
   12900:	bge	12984 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1ac>
   12904:	ldr	r0, [fp, #-20]	; 0xffffffec
   12908:	ldr	r1, [fp, #-16]
   1290c:	sub	r0, r0, r1
   12910:	lsl	r0, r0, #2
   12914:	str	r0, [sp, #28]
   12918:	ldr	r0, [fp, #-4]
   1291c:	ldr	r1, [fp, #-16]
   12920:	add	r0, r0, r1, lsl #2
   12924:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   12928:	ldr	r1, [sp, #28]
   1292c:	sub	r0, r0, r1
   12930:	str	r0, [sp, #36]	; 0x24
   12934:	ldr	r0, [fp, #-4]
   12938:	ldr	r1, [fp, #-20]	; 0xffffffec
   1293c:	add	r0, r0, r1, lsl #2
   12940:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   12944:	ldr	r1, [sp, #28]
   12948:	add	r0, r0, r1
   1294c:	str	r0, [sp, #32]
   12950:	ldr	r0, [fp, #-4]
   12954:	ldr	r1, [fp, #-20]	; 0xffffffec
   12958:	add	r0, r0, r1, lsl #2
   1295c:	ldr	r1, [sp, #36]	; 0x24
   12960:	bl	12994 <__flatbuffers_uoffset_write_to_pe>
   12964:	ldr	r0, [fp, #-4]
   12968:	ldr	r1, [fp, #-16]
   1296c:	add	r0, r0, r1, lsl #2
   12970:	ldr	r1, [sp, #32]
   12974:	bl	12994 <__flatbuffers_uoffset_write_to_pe>
   12978:	ldr	r0, [fp, #-16]
   1297c:	str	r0, [fp, #-20]	; 0xffffffec
   12980:	b	12988 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1b0>
   12984:	b	1298c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1b4>
   12988:	b	127f8 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x20>
   1298c:	mov	sp, fp
   12990:	pop	{fp, pc}

00012994 <__flatbuffers_uoffset_write_to_pe>:
   12994:	push	{fp, lr}
   12998:	mov	fp, sp
   1299c:	sub	sp, sp, #8
   129a0:	str	r0, [sp, #4]
   129a4:	str	r1, [sp]
   129a8:	ldr	r0, [sp]
   129ac:	bl	12a9c <__flatbuffers_uoffset_cast_to_pe>
   129b0:	ldr	r1, [sp, #4]
   129b4:	str	r0, [r1]
   129b8:	mov	sp, fp
   129bc:	pop	{fp, pc}

000129c0 <__flatbuffers_string_n_cmp>:
   129c0:	push	{fp, lr}
   129c4:	mov	fp, sp
   129c8:	sub	sp, sp, #48	; 0x30
   129cc:	str	r0, [fp, #-4]
   129d0:	str	r1, [fp, #-8]
   129d4:	str	r2, [fp, #-12]
   129d8:	ldr	r0, [fp, #-4]
   129dc:	bl	3b14 <flatbuffers_string_len>
   129e0:	str	r0, [fp, #-16]
   129e4:	ldr	r0, [fp, #-4]
   129e8:	ldr	r1, [fp, #-8]
   129ec:	ldr	r2, [fp, #-16]
   129f0:	ldr	lr, [fp, #-12]
   129f4:	cmp	r2, lr
   129f8:	str	r0, [sp, #24]
   129fc:	str	r1, [sp, #20]
   12a00:	bcs	12a10 <__flatbuffers_string_n_cmp+0x50>
   12a04:	ldr	r0, [fp, #-16]
   12a08:	str	r0, [sp, #16]
   12a0c:	b	12a18 <__flatbuffers_string_n_cmp+0x58>
   12a10:	ldr	r0, [fp, #-12]
   12a14:	str	r0, [sp, #16]
   12a18:	ldr	r0, [sp, #16]
   12a1c:	ldr	r1, [sp, #24]
   12a20:	str	r0, [sp, #12]
   12a24:	mov	r0, r1
   12a28:	ldr	r1, [sp, #20]
   12a2c:	ldr	r2, [sp, #12]
   12a30:	bl	0 <strncmp>
   12a34:	str	r0, [fp, #-20]	; 0xffffffec
   12a38:	ldr	r0, [fp, #-20]	; 0xffffffec
   12a3c:	cmp	r0, #0
   12a40:	beq	12a50 <__flatbuffers_string_n_cmp+0x90>
   12a44:	ldr	r0, [fp, #-20]	; 0xffffffec
   12a48:	str	r0, [sp, #8]
   12a4c:	b	12a90 <__flatbuffers_string_n_cmp+0xd0>
   12a50:	ldr	r0, [fp, #-16]
   12a54:	ldr	r1, [fp, #-12]
   12a58:	cmp	r0, r1
   12a5c:	bcs	12a6c <__flatbuffers_string_n_cmp+0xac>
   12a60:	mvn	r0, #0
   12a64:	str	r0, [sp, #4]
   12a68:	b	12a88 <__flatbuffers_string_n_cmp+0xc8>
   12a6c:	ldr	r0, [fp, #-16]
   12a70:	ldr	r1, [fp, #-12]
   12a74:	cmp	r0, r1
   12a78:	movw	r0, #0
   12a7c:	movhi	r0, #1
   12a80:	and	r0, r0, #1
   12a84:	str	r0, [sp, #4]
   12a88:	ldr	r0, [sp, #4]
   12a8c:	str	r0, [sp, #8]
   12a90:	ldr	r0, [sp, #8]
   12a94:	mov	sp, fp
   12a98:	pop	{fp, pc}

00012a9c <__flatbuffers_uoffset_cast_to_pe>:
   12a9c:	sub	sp, sp, #4
   12aa0:	str	r0, [sp]
   12aa4:	ldr	r0, [sp]
   12aa8:	add	sp, sp, #4
   12aac:	bx	lr

00012ab0 <__flatbuffers_string_cmp>:
   12ab0:	push	{fp, lr}
   12ab4:	mov	fp, sp
   12ab8:	sub	sp, sp, #16
   12abc:	str	r0, [fp, #-4]
   12ac0:	str	r1, [sp, #8]
   12ac4:	str	r2, [sp, #4]
   12ac8:	ldr	r0, [fp, #-4]
   12acc:	ldr	r1, [sp, #8]
   12ad0:	bl	0 <strcmp>
   12ad4:	mov	sp, fp
   12ad8:	pop	{fp, pc}

00012adc <MyGame_Example_Monster_vec_scan_n_by_name>:
   12adc:	push	{fp, lr}
   12ae0:	mov	fp, sp
   12ae4:	sub	sp, sp, #32
   12ae8:	str	r0, [fp, #-8]
   12aec:	str	r1, [fp, #-12]
   12af0:	str	r2, [sp, #16]
   12af4:	movw	r0, #0
   12af8:	str	r0, [sp, #8]
   12afc:	ldr	r0, [sp, #8]
   12b00:	ldr	r1, [fp, #-8]
   12b04:	str	r0, [sp, #4]
   12b08:	mov	r0, r1
   12b0c:	bl	4454 <MyGame_Example_Monster_vec_len>
   12b10:	ldr	r1, [sp, #4]
   12b14:	cmp	r1, r0
   12b18:	bcs	12b68 <MyGame_Example_Monster_vec_scan_n_by_name+0x8c>
   12b1c:	ldr	r0, [fp, #-8]
   12b20:	ldr	r1, [sp, #8]
   12b24:	bl	44a4 <MyGame_Example_Monster_vec_at>
   12b28:	bl	3a0c <MyGame_Example_Monster_name>
   12b2c:	str	r0, [sp, #12]
   12b30:	ldr	r0, [sp, #12]
   12b34:	ldr	r1, [fp, #-12]
   12b38:	ldr	r2, [sp, #16]
   12b3c:	bl	129c0 <__flatbuffers_string_n_cmp>
   12b40:	cmp	r0, #0
   12b44:	bne	12b54 <MyGame_Example_Monster_vec_scan_n_by_name+0x78>
   12b48:	ldr	r0, [sp, #8]
   12b4c:	str	r0, [fp, #-4]
   12b50:	b	12b78 <MyGame_Example_Monster_vec_scan_n_by_name+0x9c>
   12b54:	b	12b58 <MyGame_Example_Monster_vec_scan_n_by_name+0x7c>
   12b58:	ldr	r0, [sp, #8]
   12b5c:	add	r0, r0, #1
   12b60:	str	r0, [sp, #8]
   12b64:	b	12afc <MyGame_Example_Monster_vec_scan_n_by_name+0x20>
   12b68:	movw	r0, #0
   12b6c:	movt	r0, #0
   12b70:	ldr	r0, [r0]
   12b74:	str	r0, [fp, #-4]
   12b78:	ldr	r0, [fp, #-4]
   12b7c:	mov	sp, fp
   12b80:	pop	{fp, pc}

00012b84 <__flatbuffers_uint8__heap_sort>:
   12b84:	push	{fp, lr}
   12b88:	mov	fp, sp
   12b8c:	sub	sp, sp, #24
   12b90:	str	r0, [fp, #-4]
   12b94:	ldr	r0, [fp, #-4]
   12b98:	bl	3ed0 <flatbuffers_uint8_vec_len>
   12b9c:	str	r0, [sp, #8]
   12ba0:	ldr	r0, [sp, #8]
   12ba4:	cmp	r0, #0
   12ba8:	bne	12bb0 <__flatbuffers_uint8__heap_sort+0x2c>
   12bac:	b	12c64 <__flatbuffers_uint8__heap_sort+0xe0>
   12bb0:	ldr	r0, [sp, #8]
   12bb4:	sub	r0, r0, #1
   12bb8:	str	r0, [sp, #12]
   12bbc:	ldr	r0, [sp, #8]
   12bc0:	lsr	r0, r0, #1
   12bc4:	str	r0, [fp, #-8]
   12bc8:	ldr	r0, [fp, #-4]
   12bcc:	ldr	r1, [fp, #-8]
   12bd0:	ldr	r2, [sp, #12]
   12bd4:	bl	12c6c <__flatbuffers_uint8__heap_sift_down>
   12bd8:	ldr	r0, [fp, #-8]
   12bdc:	mvn	r1, #0
   12be0:	add	r1, r0, r1
   12be4:	str	r1, [fp, #-8]
   12be8:	cmp	r0, #0
   12bec:	bne	12bc8 <__flatbuffers_uint8__heap_sort+0x44>
   12bf0:	b	12bf4 <__flatbuffers_uint8__heap_sort+0x70>
   12bf4:	ldr	r0, [sp, #12]
   12bf8:	cmp	r0, #0
   12bfc:	bls	12c64 <__flatbuffers_uint8__heap_sort+0xe0>
   12c00:	ldr	r0, [fp, #-4]
   12c04:	ldr	r1, [sp, #12]
   12c08:	add	r0, r0, r1
   12c0c:	ldrb	r0, [r0]
   12c10:	strb	r0, [sp, #7]
   12c14:	ldr	r0, [fp, #-4]
   12c18:	ldrb	r0, [r0]
   12c1c:	ldr	r1, [fp, #-4]
   12c20:	ldr	r2, [sp, #12]
   12c24:	add	r1, r1, r2
   12c28:	strb	r0, [r1]
   12c2c:	ldrb	r0, [sp, #7]
   12c30:	ldr	r1, [fp, #-4]
   12c34:	strb	r0, [r1]
   12c38:	ldr	r0, [fp, #-4]
   12c3c:	ldr	r1, [sp, #12]
   12c40:	mvn	r2, #0
   12c44:	add	r1, r1, r2
   12c48:	str	r1, [sp, #12]
   12c4c:	movw	r2, #0
   12c50:	str	r1, [sp]
   12c54:	mov	r1, r2
   12c58:	ldr	r2, [sp]
   12c5c:	bl	12c6c <__flatbuffers_uint8__heap_sift_down>
   12c60:	b	12bf4 <__flatbuffers_uint8__heap_sort+0x70>
   12c64:	mov	sp, fp
   12c68:	pop	{fp, pc}

00012c6c <__flatbuffers_uint8__heap_sift_down>:
   12c6c:	push	{fp, lr}
   12c70:	mov	fp, sp
   12c74:	sub	sp, sp, #32
   12c78:	str	r0, [fp, #-4]
   12c7c:	str	r1, [fp, #-8]
   12c80:	str	r2, [fp, #-12]
   12c84:	ldr	r0, [fp, #-8]
   12c88:	str	r0, [sp, #12]
   12c8c:	ldr	r0, [sp, #12]
   12c90:	lsl	r0, r0, #1
   12c94:	ldr	r1, [fp, #-12]
   12c98:	cmp	r0, r1
   12c9c:	bhi	12df4 <__flatbuffers_uint8__heap_sift_down+0x188>
   12ca0:	ldr	r0, [sp, #12]
   12ca4:	lsl	r0, r0, #1
   12ca8:	str	r0, [sp, #16]
   12cac:	ldr	r0, [sp, #16]
   12cb0:	ldr	r1, [fp, #-12]
   12cb4:	cmp	r0, r1
   12cb8:	bcs	12d34 <__flatbuffers_uint8__heap_sift_down+0xc8>
   12cbc:	ldr	r0, [fp, #-4]
   12cc0:	ldr	r1, [sp, #16]
   12cc4:	bl	3ef0 <flatbuffers_uint8_vec_at>
   12cc8:	strb	r0, [sp, #11]
   12ccc:	ldr	r0, [fp, #-4]
   12cd0:	ldr	r1, [sp, #16]
   12cd4:	add	r1, r1, #1
   12cd8:	bl	3ef0 <flatbuffers_uint8_vec_at>
   12cdc:	strb	r0, [sp, #10]
   12ce0:	ldrb	r0, [sp, #11]
   12ce4:	ldrb	r1, [sp, #10]
   12ce8:	cmp	r0, r1
   12cec:	bge	12cfc <__flatbuffers_uint8__heap_sift_down+0x90>
   12cf0:	mvn	r0, #0
   12cf4:	str	r0, [sp, #4]
   12cf8:	b	12d18 <__flatbuffers_uint8__heap_sift_down+0xac>
   12cfc:	ldrb	r0, [sp, #11]
   12d00:	ldrb	r1, [sp, #10]
   12d04:	cmp	r0, r1
   12d08:	movw	r0, #0
   12d0c:	movgt	r0, #1
   12d10:	and	r0, r0, #1
   12d14:	str	r0, [sp, #4]
   12d18:	ldr	r0, [sp, #4]
   12d1c:	cmp	r0, #0
   12d20:	bge	12d30 <__flatbuffers_uint8__heap_sift_down+0xc4>
   12d24:	ldr	r0, [sp, #16]
   12d28:	add	r0, r0, #1
   12d2c:	str	r0, [sp, #16]
   12d30:	b	12d34 <__flatbuffers_uint8__heap_sift_down+0xc8>
   12d34:	ldr	r0, [fp, #-4]
   12d38:	ldr	r1, [sp, #12]
   12d3c:	bl	3ef0 <flatbuffers_uint8_vec_at>
   12d40:	strb	r0, [sp, #9]
   12d44:	ldr	r0, [fp, #-4]
   12d48:	ldr	r1, [sp, #16]
   12d4c:	bl	3ef0 <flatbuffers_uint8_vec_at>
   12d50:	strb	r0, [sp, #11]
   12d54:	ldrb	r0, [sp, #9]
   12d58:	ldrb	r1, [sp, #11]
   12d5c:	cmp	r0, r1
   12d60:	bge	12d70 <__flatbuffers_uint8__heap_sift_down+0x104>
   12d64:	mvn	r0, #0
   12d68:	str	r0, [sp]
   12d6c:	b	12d8c <__flatbuffers_uint8__heap_sift_down+0x120>
   12d70:	ldrb	r0, [sp, #9]
   12d74:	ldrb	r1, [sp, #11]
   12d78:	cmp	r0, r1
   12d7c:	movw	r0, #0
   12d80:	movgt	r0, #1
   12d84:	and	r0, r0, #1
   12d88:	str	r0, [sp]
   12d8c:	ldr	r0, [sp]
   12d90:	cmp	r0, #0
   12d94:	bge	12dec <__flatbuffers_uint8__heap_sift_down+0x180>
   12d98:	ldr	r0, [fp, #-4]
   12d9c:	ldr	r1, [sp, #16]
   12da0:	add	r0, r0, r1
   12da4:	ldrb	r0, [r0]
   12da8:	strb	r0, [sp, #8]
   12dac:	ldr	r0, [fp, #-4]
   12db0:	ldr	r1, [sp, #12]
   12db4:	add	r0, r0, r1
   12db8:	ldrb	r0, [r0]
   12dbc:	ldr	r1, [fp, #-4]
   12dc0:	ldr	r2, [sp, #16]
   12dc4:	add	r1, r1, r2
   12dc8:	strb	r0, [r1]
   12dcc:	ldrb	r0, [sp, #8]
   12dd0:	ldr	r1, [fp, #-4]
   12dd4:	ldr	r2, [sp, #12]
   12dd8:	add	r1, r1, r2
   12ddc:	strb	r0, [r1]
   12de0:	ldr	r0, [sp, #16]
   12de4:	str	r0, [sp, #12]
   12de8:	b	12df0 <__flatbuffers_uint8__heap_sift_down+0x184>
   12dec:	b	12df4 <__flatbuffers_uint8__heap_sift_down+0x188>
   12df0:	b	12c8c <__flatbuffers_uint8__heap_sift_down+0x20>
   12df4:	mov	sp, fp
   12df8:	pop	{fp, pc}

00012dfc <flatbuffers_bool_vec_create>:
   12dfc:	push	{fp, lr}
   12e00:	mov	fp, sp
   12e04:	sub	sp, sp, #24
   12e08:	str	r0, [fp, #-4]
   12e0c:	str	r1, [fp, #-8]
   12e10:	str	r2, [sp, #12]
   12e14:	ldr	r0, [fp, #-4]
   12e18:	ldr	r1, [fp, #-8]
   12e1c:	ldr	r2, [sp, #12]
   12e20:	movw	r3, #1
   12e24:	movw	ip, #1
   12e28:	uxth	ip, ip
   12e2c:	str	ip, [sp]
   12e30:	mvn	ip, #0
   12e34:	str	ip, [sp, #4]
   12e38:	bl	0 <flatcc_builder_create_vector>
   12e3c:	mov	sp, fp
   12e40:	pop	{fp, pc}

00012e44 <flatbuffers_string_clone>:
   12e44:	push	{fp, lr}
   12e48:	mov	fp, sp
   12e4c:	sub	sp, sp, #24
   12e50:	str	r0, [fp, #-4]
   12e54:	str	r1, [fp, #-8]
   12e58:	ldr	r0, [fp, #-4]
   12e5c:	ldr	r1, [fp, #-8]
   12e60:	ldr	r2, [fp, #-8]
   12e64:	str	r0, [sp, #12]
   12e68:	mov	r0, r2
   12e6c:	str	r1, [sp, #8]
   12e70:	bl	3b14 <flatbuffers_string_len>
   12e74:	ldr	r1, [sp, #12]
   12e78:	str	r0, [sp, #4]
   12e7c:	mov	r0, r1
   12e80:	ldr	r1, [sp, #8]
   12e84:	ldr	r2, [sp, #4]
   12e88:	bl	0 <flatcc_builder_create_string>
   12e8c:	mov	sp, fp
   12e90:	pop	{fp, pc}

00012e94 <flatbuffers_string_vec_push>:
   12e94:	push	{fp, lr}
   12e98:	mov	fp, sp
   12e9c:	sub	sp, sp, #16
   12ea0:	str	r0, [fp, #-4]
   12ea4:	str	r1, [sp, #8]
   12ea8:	ldr	r0, [sp, #8]
   12eac:	cmp	r0, #0
   12eb0:	beq	12ec8 <flatbuffers_string_vec_push+0x34>
   12eb4:	ldr	r0, [fp, #-4]
   12eb8:	ldr	r1, [sp, #8]
   12ebc:	bl	0 <flatcc_builder_offset_vector_push>
   12ec0:	str	r0, [sp, #4]
   12ec4:	b	12ed4 <flatbuffers_string_vec_push+0x40>
   12ec8:	movw	r0, #0
   12ecc:	str	r0, [sp, #4]
   12ed0:	b	12ed4 <flatbuffers_string_vec_push+0x40>
   12ed4:	ldr	r0, [sp, #4]
   12ed8:	mov	sp, fp
   12edc:	pop	{fp, pc}

00012ee0 <flatbuffers_string_slice>:
   12ee0:	push	{fp, lr}
   12ee4:	mov	fp, sp
   12ee8:	sub	sp, sp, #24
   12eec:	str	r0, [fp, #-4]
   12ef0:	str	r1, [fp, #-8]
   12ef4:	str	r2, [sp, #12]
   12ef8:	str	r3, [sp, #8]
   12efc:	ldr	r0, [fp, #-8]
   12f00:	bl	3b14 <flatbuffers_string_len>
   12f04:	str	r0, [sp, #4]
   12f08:	ldr	r0, [sp, #12]
   12f0c:	ldr	r1, [sp, #4]
   12f10:	cmp	r0, r1
   12f14:	bcc	12f20 <flatbuffers_string_slice+0x40>
   12f18:	ldr	r0, [sp, #4]
   12f1c:	str	r0, [sp, #12]
   12f20:	ldr	r0, [sp, #12]
   12f24:	ldr	r1, [sp, #4]
   12f28:	sub	r0, r1, r0
   12f2c:	str	r0, [sp, #4]
   12f30:	ldr	r0, [sp, #8]
   12f34:	ldr	r1, [sp, #4]
   12f38:	cmp	r0, r1
   12f3c:	bls	12f48 <flatbuffers_string_slice+0x68>
   12f40:	ldr	r0, [sp, #4]
   12f44:	str	r0, [sp, #8]
   12f48:	ldr	r0, [fp, #-4]
   12f4c:	ldr	r1, [fp, #-8]
   12f50:	ldr	r2, [sp, #12]
   12f54:	add	r1, r1, r2
   12f58:	ldr	r2, [sp, #8]
   12f5c:	bl	0 <flatcc_builder_create_string>
   12f60:	mov	sp, fp
   12f64:	pop	{fp, pc}

00012f68 <flatbuffers_bool_vec_clone>:
   12f68:	push	{fp, lr}
   12f6c:	mov	fp, sp
   12f70:	sub	sp, sp, #32
   12f74:	str	r0, [fp, #-4]
   12f78:	str	r1, [fp, #-8]
   12f7c:	ldr	r0, [fp, #-4]
   12f80:	ldr	r1, [fp, #-8]
   12f84:	ldr	r2, [fp, #-8]
   12f88:	str	r0, [fp, #-12]
   12f8c:	mov	r0, r2
   12f90:	str	r1, [sp, #16]
   12f94:	bl	48b8 <flatbuffers_bool_vec_len>
   12f98:	ldr	r1, [fp, #-12]
   12f9c:	str	r0, [sp, #12]
   12fa0:	mov	r0, r1
   12fa4:	ldr	r1, [sp, #16]
   12fa8:	ldr	r2, [sp, #12]
   12fac:	movw	r3, #1
   12fb0:	movw	lr, #1
   12fb4:	uxth	lr, lr
   12fb8:	str	lr, [sp]
   12fbc:	mvn	lr, #0
   12fc0:	str	lr, [sp, #4]
   12fc4:	bl	0 <flatcc_builder_create_vector>
   12fc8:	mov	sp, fp
   12fcc:	pop	{fp, pc}

00012fd0 <MyGame_Example_Test_vec_slice>:
   12fd0:	push	{fp, lr}
   12fd4:	mov	fp, sp
   12fd8:	sub	sp, sp, #40	; 0x28
   12fdc:	str	r0, [fp, #-4]
   12fe0:	str	r1, [fp, #-8]
   12fe4:	str	r2, [fp, #-12]
   12fe8:	str	r3, [fp, #-16]
   12fec:	ldr	r0, [fp, #-8]
   12ff0:	bl	4200 <MyGame_Example_Test_vec_len>
   12ff4:	str	r0, [sp, #20]
   12ff8:	ldr	r0, [fp, #-12]
   12ffc:	ldr	r1, [sp, #20]
   13000:	cmp	r0, r1
   13004:	bcc	13010 <MyGame_Example_Test_vec_slice+0x40>
   13008:	ldr	r0, [sp, #20]
   1300c:	str	r0, [fp, #-12]
   13010:	ldr	r0, [fp, #-12]
   13014:	ldr	r1, [sp, #20]
   13018:	sub	r0, r1, r0
   1301c:	str	r0, [sp, #20]
   13020:	ldr	r0, [fp, #-16]
   13024:	ldr	r1, [sp, #20]
   13028:	cmp	r0, r1
   1302c:	bls	13038 <MyGame_Example_Test_vec_slice+0x68>
   13030:	ldr	r0, [sp, #20]
   13034:	str	r0, [fp, #-16]
   13038:	ldr	r0, [fp, #-4]
   1303c:	ldr	r1, [fp, #-8]
   13040:	ldr	r2, [fp, #-12]
   13044:	str	r0, [sp, #16]
   13048:	mov	r0, r1
   1304c:	mov	r1, r2
   13050:	bl	1309c <MyGame_Example_Test__const_ptr_add>
   13054:	ldr	r1, [pc, #60]	; 13098 <MyGame_Example_Test_vec_slice+0xc8>
   13058:	ldr	r2, [fp, #-16]
   1305c:	ldr	lr, [sp, #16]
   13060:	str	r0, [sp, #12]
   13064:	mov	r0, lr
   13068:	ldr	r3, [sp, #12]
   1306c:	str	r1, [sp, #8]
   13070:	mov	r1, r3
   13074:	movw	r3, #4
   13078:	movw	ip, #2
   1307c:	uxth	ip, ip
   13080:	str	ip, [sp]
   13084:	ldr	ip, [sp, #8]
   13088:	str	ip, [sp, #4]
   1308c:	bl	0 <flatcc_builder_create_vector>
   13090:	mov	sp, fp
   13094:	pop	{fp, pc}
   13098:	.word	0x3fffffff

0001309c <MyGame_Example_Test__const_ptr_add>:
   1309c:	sub	sp, sp, #8
   130a0:	str	r0, [sp, #4]
   130a4:	str	r1, [sp]
   130a8:	ldr	r0, [sp, #4]
   130ac:	ldr	r1, [sp]
   130b0:	add	r0, r0, r1, lsl #2
   130b4:	add	sp, sp, #8
   130b8:	bx	lr

000130bc <flatbuffers_bool_vec_slice>:
   130bc:	push	{fp, lr}
   130c0:	mov	fp, sp
   130c4:	sub	sp, sp, #40	; 0x28
   130c8:	str	r0, [fp, #-4]
   130cc:	str	r1, [fp, #-8]
   130d0:	str	r2, [fp, #-12]
   130d4:	str	r3, [fp, #-16]
   130d8:	ldr	r0, [fp, #-8]
   130dc:	bl	48b8 <flatbuffers_bool_vec_len>
   130e0:	str	r0, [sp, #20]
   130e4:	ldr	r0, [fp, #-12]
   130e8:	ldr	r1, [sp, #20]
   130ec:	cmp	r0, r1
   130f0:	bcc	130fc <flatbuffers_bool_vec_slice+0x40>
   130f4:	ldr	r0, [sp, #20]
   130f8:	str	r0, [fp, #-12]
   130fc:	ldr	r0, [fp, #-12]
   13100:	ldr	r1, [sp, #20]
   13104:	sub	r0, r1, r0
   13108:	str	r0, [sp, #20]
   1310c:	ldr	r0, [fp, #-16]
   13110:	ldr	r1, [sp, #20]
   13114:	cmp	r0, r1
   13118:	bls	13124 <flatbuffers_bool_vec_slice+0x68>
   1311c:	ldr	r0, [sp, #20]
   13120:	str	r0, [fp, #-16]
   13124:	ldr	r0, [fp, #-4]
   13128:	ldr	r1, [fp, #-8]
   1312c:	ldr	r2, [fp, #-12]
   13130:	str	r0, [sp, #16]
   13134:	mov	r0, r1
   13138:	mov	r1, r2
   1313c:	bl	13178 <flatbuffers_bool__const_ptr_add>
   13140:	ldr	r2, [fp, #-16]
   13144:	ldr	r1, [sp, #16]
   13148:	str	r0, [sp, #12]
   1314c:	mov	r0, r1
   13150:	ldr	r1, [sp, #12]
   13154:	movw	r3, #1
   13158:	movw	lr, #1
   1315c:	uxth	lr, lr
   13160:	str	lr, [sp]
   13164:	mvn	lr, #0
   13168:	str	lr, [sp, #4]
   1316c:	bl	0 <flatcc_builder_create_vector>
   13170:	mov	sp, fp
   13174:	pop	{fp, pc}

00013178 <flatbuffers_bool__const_ptr_add>:
   13178:	sub	sp, sp, #8
   1317c:	str	r0, [sp, #4]
   13180:	str	r1, [sp]
   13184:	ldr	r0, [sp, #4]
   13188:	ldr	r1, [sp]
   1318c:	add	r0, r0, r1
   13190:	add	sp, sp, #8
   13194:	bx	lr

00013198 <MyGame_Example_Test_vec_clone>:
   13198:	push	{fp, lr}
   1319c:	mov	fp, sp
   131a0:	sub	sp, sp, #32
   131a4:	str	r0, [fp, #-4]
   131a8:	str	r1, [fp, #-8]
   131ac:	ldr	r0, [fp, #-4]
   131b0:	ldr	r1, [fp, #-8]
   131b4:	ldr	r2, [fp, #-8]
   131b8:	str	r0, [fp, #-12]
   131bc:	mov	r0, r2
   131c0:	str	r1, [sp, #16]
   131c4:	bl	4200 <MyGame_Example_Test_vec_len>
   131c8:	ldr	r1, [pc, #60]	; 1320c <MyGame_Example_Test_vec_clone+0x74>
   131cc:	ldr	r2, [fp, #-12]
   131d0:	str	r0, [sp, #12]
   131d4:	mov	r0, r2
   131d8:	ldr	lr, [sp, #16]
   131dc:	str	r1, [sp, #8]
   131e0:	mov	r1, lr
   131e4:	ldr	r2, [sp, #12]
   131e8:	movw	r3, #4
   131ec:	movw	ip, #2
   131f0:	uxth	ip, ip
   131f4:	str	ip, [sp]
   131f8:	ldr	ip, [sp, #8]
   131fc:	str	ip, [sp, #4]
   13200:	bl	0 <flatcc_builder_create_vector>
   13204:	mov	sp, fp
   13208:	pop	{fp, pc}
   1320c:	.word	0x3fffffff

00013210 <MyGame_Example_Stat_create>:
   13210:	push	{fp, lr}
   13214:	mov	fp, sp
   13218:	sub	sp, sp, #32
   1321c:	ldr	ip, [fp, #8]
   13220:	str	r0, [fp, #-8]
   13224:	str	r1, [fp, #-12]
   13228:	str	r3, [sp, #12]
   1322c:	str	r2, [sp, #8]
   13230:	strh	ip, [sp, #6]
   13234:	ldr	r0, [fp, #-8]
   13238:	bl	125d8 <MyGame_Example_Stat_start>
   1323c:	cmp	r0, #0
   13240:	bne	13284 <MyGame_Example_Stat_create+0x74>
   13244:	ldr	r0, [fp, #-8]
   13248:	ldr	r2, [sp, #8]
   1324c:	ldr	r3, [sp, #12]
   13250:	bl	132a8 <MyGame_Example_Stat_val_add>
   13254:	cmp	r0, #0
   13258:	bne	13284 <MyGame_Example_Stat_create+0x74>
   1325c:	ldr	r0, [fp, #-8]
   13260:	ldr	r1, [fp, #-12]
   13264:	bl	13340 <MyGame_Example_Stat_id_add>
   13268:	cmp	r0, #0
   1326c:	bne	13284 <MyGame_Example_Stat_create+0x74>
   13270:	ldr	r0, [fp, #-8]
   13274:	ldrh	r1, [sp, #6]
   13278:	bl	133ac <MyGame_Example_Stat_count_add>
   1327c:	cmp	r0, #0
   13280:	beq	13290 <MyGame_Example_Stat_create+0x80>
   13284:	movw	r0, #0
   13288:	str	r0, [fp, #-4]
   1328c:	b	1329c <MyGame_Example_Stat_create+0x8c>
   13290:	ldr	r0, [fp, #-8]
   13294:	bl	12668 <MyGame_Example_Stat_end>
   13298:	str	r0, [fp, #-4]
   1329c:	ldr	r0, [fp, #-4]
   132a0:	mov	sp, fp
   132a4:	pop	{fp, pc}

000132a8 <MyGame_Example_Stat_val_add>:
   132a8:	push	{fp, lr}
   132ac:	mov	fp, sp
   132b0:	sub	sp, sp, #24
   132b4:	str	r0, [fp, #-8]
   132b8:	str	r3, [sp, #12]
   132bc:	str	r2, [sp, #8]
   132c0:	ldr	r0, [sp, #8]
   132c4:	ldr	r2, [sp, #12]
   132c8:	orr	r0, r0, r2
   132cc:	cmp	r0, #0
   132d0:	bne	132e4 <MyGame_Example_Stat_val_add+0x3c>
   132d4:	b	132d8 <MyGame_Example_Stat_val_add+0x30>
   132d8:	movw	r0, #0
   132dc:	str	r0, [fp, #-4]
   132e0:	b	13334 <MyGame_Example_Stat_val_add+0x8c>
   132e4:	ldr	r0, [fp, #-8]
   132e8:	movw	r1, #1
   132ec:	movw	r2, #8
   132f0:	movw	r3, #8
   132f4:	uxth	r3, r3
   132f8:	bl	0 <flatcc_builder_table_add>
   132fc:	str	r0, [sp, #4]
   13300:	movw	r1, #0
   13304:	cmp	r0, r1
   13308:	bne	13318 <MyGame_Example_Stat_val_add+0x70>
   1330c:	mvn	r0, #0
   13310:	str	r0, [fp, #-4]
   13314:	b	13334 <MyGame_Example_Stat_val_add+0x8c>
   13318:	ldr	r0, [sp, #4]
   1331c:	ldr	r2, [sp, #8]
   13320:	ldr	r3, [sp, #12]
   13324:	bl	102c8 <flatbuffers_int64_assign_to_pe>
   13328:	movw	r2, #0
   1332c:	str	r2, [fp, #-4]
   13330:	str	r0, [sp]
   13334:	ldr	r0, [fp, #-4]
   13338:	mov	sp, fp
   1333c:	pop	{fp, pc}

00013340 <MyGame_Example_Stat_id_add>:
   13340:	push	{fp, lr}
   13344:	mov	fp, sp
   13348:	sub	sp, sp, #16
   1334c:	str	r0, [fp, #-4]
   13350:	str	r1, [sp, #8]
   13354:	ldr	r0, [sp, #8]
   13358:	cmp	r0, #0
   1335c:	beq	13394 <MyGame_Example_Stat_id_add+0x54>
   13360:	ldr	r0, [fp, #-4]
   13364:	movw	r1, #0
   13368:	bl	0 <flatcc_builder_table_add_offset>
   1336c:	str	r0, [sp, #4]
   13370:	movw	r1, #0
   13374:	cmp	r0, r1
   13378:	beq	13394 <MyGame_Example_Stat_id_add+0x54>
   1337c:	ldr	r0, [sp, #8]
   13380:	ldr	r1, [sp, #4]
   13384:	str	r0, [r1]
   13388:	movw	r0, #0
   1338c:	str	r0, [sp]
   13390:	b	133a0 <MyGame_Example_Stat_id_add+0x60>
   13394:	mvn	r0, #0
   13398:	str	r0, [sp]
   1339c:	b	133a0 <MyGame_Example_Stat_id_add+0x60>
   133a0:	ldr	r0, [sp]
   133a4:	mov	sp, fp
   133a8:	pop	{fp, pc}

000133ac <MyGame_Example_Stat_count_add>:
   133ac:	push	{fp, lr}
   133b0:	mov	fp, sp
   133b4:	sub	sp, sp, #24
   133b8:	str	r0, [fp, #-8]
   133bc:	strh	r1, [fp, #-10]
   133c0:	ldrh	r0, [fp, #-10]
   133c4:	cmp	r0, #0
   133c8:	bne	133d8 <MyGame_Example_Stat_count_add+0x2c>
   133cc:	movw	r0, #0
   133d0:	str	r0, [fp, #-4]
   133d4:	b	13428 <MyGame_Example_Stat_count_add+0x7c>
   133d8:	ldr	r0, [fp, #-8]
   133dc:	movw	r1, #2
   133e0:	str	r1, [sp, #4]
   133e4:	ldr	r2, [sp, #4]
   133e8:	movw	r3, #2
   133ec:	uxth	r3, r3
   133f0:	bl	0 <flatcc_builder_table_add>
   133f4:	str	r0, [sp, #8]
   133f8:	movw	r1, #0
   133fc:	cmp	r0, r1
   13400:	bne	13410 <MyGame_Example_Stat_count_add+0x64>
   13404:	mvn	r0, #0
   13408:	str	r0, [fp, #-4]
   1340c:	b	13428 <MyGame_Example_Stat_count_add+0x7c>
   13410:	ldr	r0, [sp, #8]
   13414:	ldrh	r1, [fp, #-10]
   13418:	bl	104e4 <flatbuffers_uint16_assign_to_pe>
   1341c:	movw	r1, #0
   13420:	str	r1, [fp, #-4]
   13424:	str	r0, [sp]
   13428:	ldr	r0, [fp, #-4]
   1342c:	mov	sp, fp
   13430:	pop	{fp, pc}

00013434 <MyGame_Example_TestSimpleTableWithEnum_start>:
   13434:	push	{fp, lr}
   13438:	mov	fp, sp
   1343c:	sub	sp, sp, #8
   13440:	str	r0, [sp, #4]
   13444:	ldr	r0, [sp, #4]
   13448:	movw	r1, #4
   1344c:	bl	0 <flatcc_builder_start_table>
   13450:	mov	sp, fp
   13454:	pop	{fp, pc}

00013458 <MyGame_Example_TestSimpleTableWithEnum_color_add>:
   13458:	push	{fp, lr}
   1345c:	mov	fp, sp
   13460:	sub	sp, sp, #24
   13464:	str	r0, [fp, #-8]
   13468:	strb	r1, [fp, #-9]
   1346c:	ldrsb	r0, [fp, #-9]
   13470:	cmp	r0, #2
   13474:	bne	13484 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x2c>
   13478:	movw	r0, #0
   1347c:	str	r0, [fp, #-4]
   13480:	b	134d0 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x78>
   13484:	ldr	r0, [fp, #-8]
   13488:	movw	r1, #0
   1348c:	movw	r2, #1
   13490:	movw	r3, #1
   13494:	uxth	r3, r3
   13498:	bl	0 <flatcc_builder_table_add>
   1349c:	str	r0, [sp, #8]
   134a0:	movw	r1, #0
   134a4:	cmp	r0, r1
   134a8:	bne	134b8 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x60>
   134ac:	mvn	r0, #0
   134b0:	str	r0, [fp, #-4]
   134b4:	b	134d0 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x78>
   134b8:	ldr	r0, [sp, #8]
   134bc:	ldrsb	r1, [fp, #-9]
   134c0:	bl	121bc <MyGame_Example_Color_assign_to_pe>
   134c4:	movw	r1, #0
   134c8:	str	r1, [fp, #-4]
   134cc:	str	r0, [sp, #4]
   134d0:	ldr	r0, [fp, #-4]
   134d4:	mov	sp, fp
   134d8:	pop	{fp, pc}

000134dc <MyGame_Example_TestSimpleTableWithEnum_color2_add>:
   134dc:	push	{fp, lr}
   134e0:	mov	fp, sp
   134e4:	sub	sp, sp, #24
   134e8:	str	r0, [fp, #-8]
   134ec:	strb	r1, [fp, #-9]
   134f0:	ldrsb	r0, [fp, #-9]
   134f4:	cmp	r0, #2
   134f8:	bne	13508 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x2c>
   134fc:	movw	r0, #0
   13500:	str	r0, [fp, #-4]
   13504:	b	13558 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x7c>
   13508:	ldr	r0, [fp, #-8]
   1350c:	movw	r1, #1
   13510:	str	r1, [sp, #4]
   13514:	ldr	r2, [sp, #4]
   13518:	movw	r3, #1
   1351c:	uxth	r3, r3
   13520:	bl	0 <flatcc_builder_table_add>
   13524:	str	r0, [sp, #8]
   13528:	movw	r1, #0
   1352c:	cmp	r0, r1
   13530:	bne	13540 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x64>
   13534:	mvn	r0, #0
   13538:	str	r0, [fp, #-4]
   1353c:	b	13558 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x7c>
   13540:	ldr	r0, [sp, #8]
   13544:	ldrsb	r1, [fp, #-9]
   13548:	bl	121bc <MyGame_Example_Color_assign_to_pe>
   1354c:	movw	r1, #0
   13550:	str	r1, [fp, #-4]
   13554:	str	r0, [sp]
   13558:	ldr	r0, [fp, #-4]
   1355c:	mov	sp, fp
   13560:	pop	{fp, pc}

00013564 <MyGame_Example_TestSimpleTableWithEnum_uc_add>:
   13564:	push	{fp, lr}
   13568:	mov	fp, sp
   1356c:	sub	sp, sp, #24
   13570:	str	r0, [fp, #-8]
   13574:	strb	r1, [fp, #-9]
   13578:	ldrb	r0, [fp, #-9]
   1357c:	cmp	r0, #2
   13580:	bne	13590 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x2c>
   13584:	movw	r0, #0
   13588:	str	r0, [fp, #-4]
   1358c:	b	135dc <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x78>
   13590:	ldr	r0, [fp, #-8]
   13594:	movw	r1, #2
   13598:	movw	r2, #1
   1359c:	movw	r3, #1
   135a0:	uxth	r3, r3
   135a4:	bl	0 <flatcc_builder_table_add>
   135a8:	str	r0, [sp, #8]
   135ac:	movw	r1, #0
   135b0:	cmp	r0, r1
   135b4:	bne	135c4 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x60>
   135b8:	mvn	r0, #0
   135bc:	str	r0, [fp, #-4]
   135c0:	b	135dc <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x78>
   135c4:	ldr	r0, [sp, #8]
   135c8:	ldrb	r1, [fp, #-9]
   135cc:	bl	1056c <flatbuffers_uint8_assign_to_pe>
   135d0:	movw	r1, #0
   135d4:	str	r1, [fp, #-4]
   135d8:	str	r0, [sp, #4]
   135dc:	ldr	r0, [fp, #-4]
   135e0:	mov	sp, fp
   135e4:	pop	{fp, pc}

000135e8 <MyGame_Example_TestSimpleTableWithEnum_uc2_add>:
   135e8:	push	{fp, lr}
   135ec:	mov	fp, sp
   135f0:	sub	sp, sp, #24
   135f4:	str	r0, [fp, #-8]
   135f8:	strb	r1, [fp, #-9]
   135fc:	ldrb	r0, [fp, #-9]
   13600:	cmp	r0, #2
   13604:	bne	13614 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x2c>
   13608:	movw	r0, #0
   1360c:	str	r0, [fp, #-4]
   13610:	b	13660 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x78>
   13614:	ldr	r0, [fp, #-8]
   13618:	movw	r1, #3
   1361c:	movw	r2, #1
   13620:	movw	r3, #1
   13624:	uxth	r3, r3
   13628:	bl	0 <flatcc_builder_table_add>
   1362c:	str	r0, [sp, #8]
   13630:	movw	r1, #0
   13634:	cmp	r0, r1
   13638:	bne	13648 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x60>
   1363c:	mvn	r0, #0
   13640:	str	r0, [fp, #-4]
   13644:	b	13660 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x78>
   13648:	ldr	r0, [sp, #8]
   1364c:	ldrb	r1, [fp, #-9]
   13650:	bl	1056c <flatbuffers_uint8_assign_to_pe>
   13654:	movw	r1, #0
   13658:	str	r1, [fp, #-4]
   1365c:	str	r0, [sp, #4]
   13660:	ldr	r0, [fp, #-4]
   13664:	mov	sp, fp
   13668:	pop	{fp, pc}

0001366c <MyGame_Example_TestSimpleTableWithEnum_end>:
   1366c:	push	{fp, lr}
   13670:	mov	fp, sp
   13674:	sub	sp, sp, #8
   13678:	str	r0, [sp, #4]
   1367c:	ldr	r0, [sp, #4]
   13680:	movw	r1, #0
   13684:	movt	r1, #0
   13688:	movw	r2, #0
   1368c:	bl	0 <flatcc_builder_check_required>
   13690:	cmp	r0, #0
   13694:	beq	1369c <MyGame_Example_TestSimpleTableWithEnum_end+0x30>
   13698:	b	136bc <MyGame_Example_TestSimpleTableWithEnum_end+0x50>
   1369c:	movw	r0, #0
   136a0:	movt	r0, #0
   136a4:	movw	r1, #0
   136a8:	movt	r1, #0
   136ac:	movw	r2, #217	; 0xd9
   136b0:	movw	r3, #0
   136b4:	movt	r3, #0
   136b8:	bl	0 <__assert_fail>
   136bc:	ldr	r0, [sp, #4]
   136c0:	bl	0 <flatcc_builder_end_table>
   136c4:	mov	sp, fp
   136c8:	pop	{fp, pc}

000136cc <MyGame_Example_Alt_start>:
   136cc:	push	{fp, lr}
   136d0:	mov	fp, sp
   136d4:	sub	sp, sp, #8
   136d8:	str	r0, [sp, #4]
   136dc:	ldr	r0, [sp, #4]
   136e0:	movw	r1, #4
   136e4:	bl	0 <flatcc_builder_start_table>
   136e8:	mov	sp, fp
   136ec:	pop	{fp, pc}

000136f0 <MyGame_Example_Alt_end>:
   136f0:	push	{fp, lr}
   136f4:	mov	fp, sp
   136f8:	sub	sp, sp, #8
   136fc:	str	r0, [sp, #4]
   13700:	ldr	r0, [sp, #4]
   13704:	movw	r1, #0
   13708:	movt	r1, #0
   1370c:	movw	r2, #0
   13710:	bl	0 <flatcc_builder_check_required>
   13714:	cmp	r0, #0
   13718:	beq	13720 <MyGame_Example_Alt_end+0x30>
   1371c:	b	13740 <MyGame_Example_Alt_end+0x50>
   13720:	movw	r0, #0
   13724:	movt	r0, #0
   13728:	movw	r1, #0
   1372c:	movt	r1, #0
   13730:	movw	r2, #223	; 0xdf
   13734:	movw	r3, #0
   13738:	movt	r3, #0
   1373c:	bl	0 <__assert_fail>
   13740:	ldr	r0, [sp, #4]
   13744:	bl	0 <flatcc_builder_end_table>
   13748:	mov	sp, fp
   1374c:	pop	{fp, pc}

00013750 <MyGame_Example_Monster_test_Alt_add>:
   13750:	push	{fp, lr}
   13754:	mov	fp, sp
   13758:	sub	sp, sp, #24
   1375c:	str	r0, [fp, #-4]
   13760:	str	r1, [fp, #-8]
   13764:	ldr	r0, [fp, #-4]
   13768:	ldr	r1, [fp, #-8]
   1376c:	add	r2, sp, #8
   13770:	str	r0, [sp, #4]
   13774:	mov	r0, r2
   13778:	bl	13794 <MyGame_Example_Any_as_Alt>
   1377c:	ldr	r1, [sp, #8]
   13780:	ldr	r2, [sp, #12]
   13784:	ldr	r0, [sp, #4]
   13788:	bl	615c <MyGame_Example_Monster_test_add>
   1378c:	mov	sp, fp
   13790:	pop	{fp, pc}

00013794 <MyGame_Example_Any_as_Alt>:
   13794:	sub	sp, sp, #4
   13798:	str	r1, [sp]
   1379c:	movw	r1, #4
   137a0:	strb	r1, [r0]
   137a4:	ldr	r1, [sp]
   137a8:	str	r1, [r0, #4]
   137ac:	add	sp, sp, #4
   137b0:	bx	lr

000137b4 <flatbuffers_union_type_read_from_pe>:
   137b4:	push	{fp, lr}
   137b8:	mov	fp, sp
   137bc:	sub	sp, sp, #8
   137c0:	str	r0, [sp, #4]
   137c4:	ldr	r0, [sp, #4]
   137c8:	ldrb	r0, [r0]
   137cc:	bl	137dc <flatbuffers_union_type_cast_from_pe>
   137d0:	and	r0, r0, #255	; 0xff
   137d4:	mov	sp, fp
   137d8:	pop	{fp, pc}

000137dc <flatbuffers_union_type_cast_from_pe>:
   137dc:	sub	sp, sp, #4
   137e0:	strb	r0, [sp, #3]
   137e4:	ldrb	r0, [sp, #3]
   137e8:	add	sp, sp, #4
   137ec:	bx	lr

000137f0 <Fantasy_Movie_start>:
   137f0:	push	{fp, lr}
   137f4:	mov	fp, sp
   137f8:	sub	sp, sp, #8
   137fc:	str	r0, [sp, #4]
   13800:	ldr	r0, [sp, #4]
   13804:	movw	r1, #10
   13808:	bl	0 <flatcc_builder_start_table>
   1380c:	mov	sp, fp
   13810:	pop	{fp, pc}

00013814 <Fantasy_BookReader_start>:
   13814:	push	{fp, lr}
   13818:	mov	fp, sp
   1381c:	sub	sp, sp, #8
   13820:	str	r0, [sp, #4]
   13824:	ldr	r0, [sp, #4]
   13828:	movw	r1, #4
   1382c:	movw	r2, #4
   13830:	uxth	r2, r2
   13834:	bl	0 <flatcc_builder_start_struct>
   13838:	mov	sp, fp
   1383c:	pop	{fp, pc}

00013840 <Fantasy_BookReader_assign_to_pe>:
   13840:	push	{fp, lr}
   13844:	mov	fp, sp
   13848:	sub	sp, sp, #16
   1384c:	str	r0, [fp, #-4]
   13850:	str	r1, [sp, #8]
   13854:	ldr	r0, [fp, #-4]
   13858:	ldr	r1, [sp, #8]
   1385c:	bl	103c4 <flatbuffers_int32_assign_to_pe>
   13860:	ldr	r1, [fp, #-4]
   13864:	str	r0, [sp, #4]
   13868:	mov	r0, r1
   1386c:	mov	sp, fp
   13870:	pop	{fp, pc}

00013874 <Fantasy_BookReader_end_pe>:
   13874:	push	{fp, lr}
   13878:	mov	fp, sp
   1387c:	sub	sp, sp, #8
   13880:	str	r0, [sp, #4]
   13884:	ldr	r0, [sp, #4]
   13888:	bl	0 <flatcc_builder_end_struct>
   1388c:	mov	sp, fp
   13890:	pop	{fp, pc}

00013894 <Fantasy_Rapunzel_start>:
   13894:	push	{fp, lr}
   13898:	mov	fp, sp
   1389c:	sub	sp, sp, #8
   138a0:	str	r0, [sp, #4]
   138a4:	ldr	r0, [sp, #4]
   138a8:	movw	r1, #2
   138ac:	movw	r2, #2
   138b0:	uxth	r2, r2
   138b4:	bl	0 <flatcc_builder_start_struct>
   138b8:	mov	sp, fp
   138bc:	pop	{fp, pc}

000138c0 <Fantasy_Rapunzel_assign_to_pe>:
   138c0:	push	{fp, lr}
   138c4:	mov	fp, sp
   138c8:	sub	sp, sp, #16
   138cc:	str	r0, [fp, #-4]
   138d0:	strh	r1, [fp, #-6]
   138d4:	ldr	r0, [fp, #-4]
   138d8:	ldrh	r1, [fp, #-6]
   138dc:	bl	104e4 <flatbuffers_uint16_assign_to_pe>
   138e0:	ldr	r1, [fp, #-4]
   138e4:	str	r0, [sp, #4]
   138e8:	mov	r0, r1
   138ec:	mov	sp, fp
   138f0:	pop	{fp, pc}

000138f4 <Fantasy_Rapunzel_end_pe>:
   138f4:	push	{fp, lr}
   138f8:	mov	fp, sp
   138fc:	sub	sp, sp, #8
   13900:	str	r0, [sp, #4]
   13904:	ldr	r0, [sp, #4]
   13908:	bl	0 <flatcc_builder_end_struct>
   1390c:	mov	sp, fp
   13910:	pop	{fp, pc}

00013914 <Fantasy_Movie_main_character_add>:
   13914:	push	{fp, lr}
   13918:	mov	fp, sp
   1391c:	sub	sp, sp, #24
   13920:	str	r1, [sp, #12]
   13924:	str	r2, [sp, #16]
   13928:	str	r0, [sp, #8]
   1392c:	ldrb	r0, [sp, #12]
   13930:	cmp	r0, #0
   13934:	bne	13944 <Fantasy_Movie_main_character_add+0x30>
   13938:	movw	r0, #0
   1393c:	str	r0, [fp, #-4]
   13940:	b	139cc <Fantasy_Movie_main_character_add+0xb8>
   13944:	ldr	r0, [sp, #16]
   13948:	cmp	r0, #0
   1394c:	bne	1395c <Fantasy_Movie_main_character_add+0x48>
   13950:	mvn	r0, #0
   13954:	str	r0, [fp, #-4]
   13958:	b	139cc <Fantasy_Movie_main_character_add+0xb8>
   1395c:	ldr	r0, [sp, #8]
   13960:	movw	r1, #0
   13964:	movw	r2, #1
   13968:	movw	r3, #1
   1396c:	uxth	r3, r3
   13970:	bl	0 <flatcc_builder_table_add>
   13974:	str	r0, [sp]
   13978:	movw	r1, #0
   1397c:	cmp	r0, r1
   13980:	beq	139a0 <Fantasy_Movie_main_character_add+0x8c>
   13984:	ldr	r0, [sp, #8]
   13988:	movw	r1, #1
   1398c:	bl	0 <flatcc_builder_table_add_offset>
   13990:	str	r0, [sp, #4]
   13994:	movw	r1, #0
   13998:	cmp	r0, r1
   1399c:	bne	139ac <Fantasy_Movie_main_character_add+0x98>
   139a0:	mvn	r0, #0
   139a4:	str	r0, [fp, #-4]
   139a8:	b	139cc <Fantasy_Movie_main_character_add+0xb8>
   139ac:	ldrb	r0, [sp, #12]
   139b0:	ldr	r1, [sp]
   139b4:	strb	r0, [r1]
   139b8:	ldr	r0, [sp, #16]
   139bc:	ldr	r1, [sp, #4]
   139c0:	str	r0, [r1]
   139c4:	movw	r0, #0
   139c8:	str	r0, [fp, #-4]
   139cc:	ldr	r0, [fp, #-4]
   139d0:	mov	sp, fp
   139d4:	pop	{fp, pc}

000139d8 <Fantasy_Movie_cameo_add>:
   139d8:	push	{fp, lr}
   139dc:	mov	fp, sp
   139e0:	sub	sp, sp, #24
   139e4:	str	r1, [sp, #12]
   139e8:	str	r2, [sp, #16]
   139ec:	str	r0, [sp, #8]
   139f0:	ldrb	r0, [sp, #12]
   139f4:	cmp	r0, #0
   139f8:	bne	13a08 <Fantasy_Movie_cameo_add+0x30>
   139fc:	movw	r0, #0
   13a00:	str	r0, [fp, #-4]
   13a04:	b	13a90 <Fantasy_Movie_cameo_add+0xb8>
   13a08:	ldr	r0, [sp, #16]
   13a0c:	cmp	r0, #0
   13a10:	bne	13a20 <Fantasy_Movie_cameo_add+0x48>
   13a14:	mvn	r0, #0
   13a18:	str	r0, [fp, #-4]
   13a1c:	b	13a90 <Fantasy_Movie_cameo_add+0xb8>
   13a20:	ldr	r0, [sp, #8]
   13a24:	movw	r1, #6
   13a28:	movw	r2, #1
   13a2c:	movw	r3, #1
   13a30:	uxth	r3, r3
   13a34:	bl	0 <flatcc_builder_table_add>
   13a38:	str	r0, [sp]
   13a3c:	movw	r1, #0
   13a40:	cmp	r0, r1
   13a44:	beq	13a64 <Fantasy_Movie_cameo_add+0x8c>
   13a48:	ldr	r0, [sp, #8]
   13a4c:	movw	r1, #7
   13a50:	bl	0 <flatcc_builder_table_add_offset>
   13a54:	str	r0, [sp, #4]
   13a58:	movw	r1, #0
   13a5c:	cmp	r0, r1
   13a60:	bne	13a70 <Fantasy_Movie_cameo_add+0x98>
   13a64:	mvn	r0, #0
   13a68:	str	r0, [fp, #-4]
   13a6c:	b	13a90 <Fantasy_Movie_cameo_add+0xb8>
   13a70:	ldrb	r0, [sp, #12]
   13a74:	ldr	r1, [sp]
   13a78:	strb	r0, [r1]
   13a7c:	ldr	r0, [sp, #16]
   13a80:	ldr	r1, [sp, #4]
   13a84:	str	r0, [r1]
   13a88:	movw	r0, #0
   13a8c:	str	r0, [fp, #-4]
   13a90:	ldr	r0, [fp, #-4]
   13a94:	mov	sp, fp
   13a98:	pop	{fp, pc}

00013a9c <Fantasy_Attacker_start>:
   13a9c:	push	{fp, lr}
   13aa0:	mov	fp, sp
   13aa4:	sub	sp, sp, #8
   13aa8:	str	r0, [sp, #4]
   13aac:	ldr	r0, [sp, #4]
   13ab0:	movw	r1, #1
   13ab4:	bl	0 <flatcc_builder_start_table>
   13ab8:	mov	sp, fp
   13abc:	pop	{fp, pc}

00013ac0 <Fantasy_Attacker_sword_attack_damage_add>:
   13ac0:	push	{fp, lr}
   13ac4:	mov	fp, sp
   13ac8:	sub	sp, sp, #24
   13acc:	str	r0, [fp, #-8]
   13ad0:	str	r1, [sp, #12]
   13ad4:	ldr	r0, [sp, #12]
   13ad8:	cmp	r0, #0
   13adc:	bne	13aec <Fantasy_Attacker_sword_attack_damage_add+0x2c>
   13ae0:	movw	r0, #0
   13ae4:	str	r0, [fp, #-4]
   13ae8:	b	13b38 <Fantasy_Attacker_sword_attack_damage_add+0x78>
   13aec:	ldr	r0, [fp, #-8]
   13af0:	movw	r1, #0
   13af4:	movw	r2, #4
   13af8:	movw	r3, #4
   13afc:	uxth	r3, r3
   13b00:	bl	0 <flatcc_builder_table_add>
   13b04:	str	r0, [sp, #8]
   13b08:	movw	r1, #0
   13b0c:	cmp	r0, r1
   13b10:	bne	13b20 <Fantasy_Attacker_sword_attack_damage_add+0x60>
   13b14:	mvn	r0, #0
   13b18:	str	r0, [fp, #-4]
   13b1c:	b	13b38 <Fantasy_Attacker_sword_attack_damage_add+0x78>
   13b20:	ldr	r0, [sp, #8]
   13b24:	ldr	r1, [sp, #12]
   13b28:	bl	103c4 <flatbuffers_int32_assign_to_pe>
   13b2c:	movw	r1, #0
   13b30:	str	r1, [fp, #-4]
   13b34:	str	r0, [sp, #4]
   13b38:	ldr	r0, [fp, #-4]
   13b3c:	mov	sp, fp
   13b40:	pop	{fp, pc}

00013b44 <Fantasy_Attacker_end>:
   13b44:	push	{fp, lr}
   13b48:	mov	fp, sp
   13b4c:	sub	sp, sp, #8
   13b50:	str	r0, [sp, #4]
   13b54:	ldr	r0, [sp, #4]
   13b58:	movw	r1, #0
   13b5c:	movt	r1, #0
   13b60:	movw	r2, #0
   13b64:	bl	0 <flatcc_builder_check_required>
   13b68:	cmp	r0, #0
   13b6c:	beq	13b74 <Fantasy_Attacker_end+0x30>
   13b70:	b	13b94 <Fantasy_Attacker_end+0x50>
   13b74:	movw	r0, #0
   13b78:	movt	r0, #0
   13b7c:	movw	r1, #0
   13b80:	movt	r1, #0
   13b84:	movw	r2, #239	; 0xef
   13b88:	movw	r3, #0
   13b8c:	movt	r3, #0
   13b90:	bl	0 <__assert_fail>
   13b94:	ldr	r0, [sp, #4]
   13b98:	bl	0 <flatcc_builder_end_table>
   13b9c:	mov	sp, fp
   13ba0:	pop	{fp, pc}

00013ba4 <Fantasy_Movie_antagonist_add>:
   13ba4:	push	{fp, lr}
   13ba8:	mov	fp, sp
   13bac:	sub	sp, sp, #24
   13bb0:	str	r1, [sp, #12]
   13bb4:	str	r2, [sp, #16]
   13bb8:	str	r0, [sp, #8]
   13bbc:	ldrb	r0, [sp, #12]
   13bc0:	cmp	r0, #0
   13bc4:	bne	13bd4 <Fantasy_Movie_antagonist_add+0x30>
   13bc8:	movw	r0, #0
   13bcc:	str	r0, [fp, #-4]
   13bd0:	b	13c5c <Fantasy_Movie_antagonist_add+0xb8>
   13bd4:	ldr	r0, [sp, #16]
   13bd8:	cmp	r0, #0
   13bdc:	bne	13bec <Fantasy_Movie_antagonist_add+0x48>
   13be0:	mvn	r0, #0
   13be4:	str	r0, [fp, #-4]
   13be8:	b	13c5c <Fantasy_Movie_antagonist_add+0xb8>
   13bec:	ldr	r0, [sp, #8]
   13bf0:	movw	r1, #2
   13bf4:	movw	r2, #1
   13bf8:	movw	r3, #1
   13bfc:	uxth	r3, r3
   13c00:	bl	0 <flatcc_builder_table_add>
   13c04:	str	r0, [sp]
   13c08:	movw	r1, #0
   13c0c:	cmp	r0, r1
   13c10:	beq	13c30 <Fantasy_Movie_antagonist_add+0x8c>
   13c14:	ldr	r0, [sp, #8]
   13c18:	movw	r1, #3
   13c1c:	bl	0 <flatcc_builder_table_add_offset>
   13c20:	str	r0, [sp, #4]
   13c24:	movw	r1, #0
   13c28:	cmp	r0, r1
   13c2c:	bne	13c3c <Fantasy_Movie_antagonist_add+0x98>
   13c30:	mvn	r0, #0
   13c34:	str	r0, [fp, #-4]
   13c38:	b	13c5c <Fantasy_Movie_antagonist_add+0xb8>
   13c3c:	ldrb	r0, [sp, #12]
   13c40:	ldr	r1, [sp]
   13c44:	strb	r0, [r1]
   13c48:	ldr	r0, [sp, #16]
   13c4c:	ldr	r1, [sp, #4]
   13c50:	str	r0, [r1]
   13c54:	movw	r0, #0
   13c58:	str	r0, [fp, #-4]
   13c5c:	ldr	r0, [fp, #-4]
   13c60:	mov	sp, fp
   13c64:	pop	{fp, pc}

00013c68 <Fantasy_Character_as_MuLan>:
   13c68:	sub	sp, sp, #4
   13c6c:	str	r1, [sp]
   13c70:	movw	r1, #2
   13c74:	strb	r1, [r0]
   13c78:	ldr	r1, [sp]
   13c7c:	str	r1, [r0, #4]
   13c80:	add	sp, sp, #4
   13c84:	bx	lr

00013c88 <Fantasy_Movie_side_kick_Other_add>:
   13c88:	push	{fp, lr}
   13c8c:	mov	fp, sp
   13c90:	sub	sp, sp, #24
   13c94:	str	r0, [fp, #-4]
   13c98:	str	r1, [fp, #-8]
   13c9c:	ldr	r0, [fp, #-4]
   13ca0:	ldr	r1, [fp, #-8]
   13ca4:	add	r2, sp, #8
   13ca8:	str	r0, [sp, #4]
   13cac:	mov	r0, r2
   13cb0:	bl	c6b4 <Fantasy_Character_as_Other>
   13cb4:	ldr	r1, [sp, #8]
   13cb8:	ldr	r2, [sp, #12]
   13cbc:	ldr	r0, [sp, #4]
   13cc0:	bl	13ccc <Fantasy_Movie_side_kick_add>
   13cc4:	mov	sp, fp
   13cc8:	pop	{fp, pc}

00013ccc <Fantasy_Movie_side_kick_add>:
   13ccc:	push	{fp, lr}
   13cd0:	mov	fp, sp
   13cd4:	sub	sp, sp, #24
   13cd8:	str	r1, [sp, #12]
   13cdc:	str	r2, [sp, #16]
   13ce0:	str	r0, [sp, #8]
   13ce4:	ldrb	r0, [sp, #12]
   13ce8:	cmp	r0, #0
   13cec:	bne	13cfc <Fantasy_Movie_side_kick_add+0x30>
   13cf0:	movw	r0, #0
   13cf4:	str	r0, [fp, #-4]
   13cf8:	b	13d84 <Fantasy_Movie_side_kick_add+0xb8>
   13cfc:	ldr	r0, [sp, #16]
   13d00:	cmp	r0, #0
   13d04:	bne	13d14 <Fantasy_Movie_side_kick_add+0x48>
   13d08:	mvn	r0, #0
   13d0c:	str	r0, [fp, #-4]
   13d10:	b	13d84 <Fantasy_Movie_side_kick_add+0xb8>
   13d14:	ldr	r0, [sp, #8]
   13d18:	movw	r1, #4
   13d1c:	movw	r2, #1
   13d20:	movw	r3, #1
   13d24:	uxth	r3, r3
   13d28:	bl	0 <flatcc_builder_table_add>
   13d2c:	str	r0, [sp]
   13d30:	movw	r1, #0
   13d34:	cmp	r0, r1
   13d38:	beq	13d58 <Fantasy_Movie_side_kick_add+0x8c>
   13d3c:	ldr	r0, [sp, #8]
   13d40:	movw	r1, #5
   13d44:	bl	0 <flatcc_builder_table_add_offset>
   13d48:	str	r0, [sp, #4]
   13d4c:	movw	r1, #0
   13d50:	cmp	r0, r1
   13d54:	bne	13d64 <Fantasy_Movie_side_kick_add+0x98>
   13d58:	mvn	r0, #0
   13d5c:	str	r0, [fp, #-4]
   13d60:	b	13d84 <Fantasy_Movie_side_kick_add+0xb8>
   13d64:	ldrb	r0, [sp, #12]
   13d68:	ldr	r1, [sp]
   13d6c:	strb	r0, [r1]
   13d70:	ldr	r0, [sp, #16]
   13d74:	ldr	r1, [sp, #4]
   13d78:	str	r0, [r1]
   13d7c:	movw	r0, #0
   13d80:	str	r0, [fp, #-4]
   13d84:	ldr	r0, [fp, #-4]
   13d88:	mov	sp, fp
   13d8c:	pop	{fp, pc}

00013d90 <Fantasy_Character_as_Belle>:
   13d90:	sub	sp, sp, #4
   13d94:	str	r1, [sp]
   13d98:	movw	r1, #9
   13d9c:	strb	r1, [r0]
   13da0:	ldr	r1, [sp]
   13da4:	str	r1, [r0, #4]
   13da8:	add	sp, sp, #4
   13dac:	bx	lr

00013db0 <Fantasy_BookReader_end>:
   13db0:	push	{fp, lr}
   13db4:	mov	fp, sp
   13db8:	sub	sp, sp, #8
   13dbc:	str	r0, [sp, #4]
   13dc0:	ldr	r0, [sp, #4]
   13dc4:	bl	0 <flatcc_builder_end_struct>
   13dc8:	mov	sp, fp
   13dcc:	pop	{fp, pc}

00013dd0 <Fantasy_Movie_characters_add>:
   13dd0:	push	{fp, lr}
   13dd4:	mov	fp, sp
   13dd8:	sub	sp, sp, #24
   13ddc:	str	r1, [sp, #12]
   13de0:	str	r2, [sp, #16]
   13de4:	str	r0, [sp, #8]
   13de8:	ldr	r0, [sp, #12]
   13dec:	cmp	r0, #0
   13df0:	beq	13e00 <Fantasy_Movie_characters_add+0x30>
   13df4:	ldr	r0, [sp, #16]
   13df8:	cmp	r0, #0
   13dfc:	bne	13e28 <Fantasy_Movie_characters_add+0x58>
   13e00:	ldr	r0, [sp, #12]
   13e04:	ldr	r1, [sp, #16]
   13e08:	cmp	r0, r1
   13e0c:	movw	r0, #0
   13e10:	moveq	r0, #1
   13e14:	tst	r0, #1
   13e18:	movw	r0, #0
   13e1c:	mvneq	r0, #0
   13e20:	str	r0, [fp, #-4]
   13e24:	b	13e98 <Fantasy_Movie_characters_add+0xc8>
   13e28:	ldr	r0, [sp, #8]
   13e2c:	movw	r1, #8
   13e30:	bl	0 <flatcc_builder_table_add_offset>
   13e34:	str	r0, [sp, #4]
   13e38:	movw	r1, #0
   13e3c:	cmp	r0, r1
   13e40:	bne	13e50 <Fantasy_Movie_characters_add+0x80>
   13e44:	mvn	r0, #0
   13e48:	str	r0, [fp, #-4]
   13e4c:	b	13e98 <Fantasy_Movie_characters_add+0xc8>
   13e50:	ldr	r0, [sp, #12]
   13e54:	ldr	r1, [sp, #4]
   13e58:	str	r0, [r1]
   13e5c:	ldr	r0, [sp, #8]
   13e60:	movw	r1, #9
   13e64:	bl	0 <flatcc_builder_table_add_offset>
   13e68:	str	r0, [sp, #4]
   13e6c:	movw	r1, #0
   13e70:	cmp	r0, r1
   13e74:	bne	13e84 <Fantasy_Movie_characters_add+0xb4>
   13e78:	mvn	r0, #0
   13e7c:	str	r0, [fp, #-4]
   13e80:	b	13e98 <Fantasy_Movie_characters_add+0xc8>
   13e84:	ldr	r0, [sp, #16]
   13e88:	ldr	r1, [sp, #4]
   13e8c:	str	r0, [r1]
   13e90:	movw	r0, #0
   13e94:	str	r0, [fp, #-4]
   13e98:	ldr	r0, [fp, #-4]
   13e9c:	mov	sp, fp
   13ea0:	pop	{fp, pc}

00013ea4 <Fantasy_Movie_end>:
   13ea4:	push	{fp, lr}
   13ea8:	mov	fp, sp
   13eac:	sub	sp, sp, #8
   13eb0:	str	r0, [sp, #4]
   13eb4:	ldr	r0, [sp, #4]
   13eb8:	movw	r1, #0
   13ebc:	movt	r1, #0
   13ec0:	movw	r2, #0
   13ec4:	bl	0 <flatcc_builder_check_required>
   13ec8:	cmp	r0, #0
   13ecc:	beq	13ed4 <Fantasy_Movie_end+0x30>
   13ed0:	b	13ef4 <Fantasy_Movie_end+0x50>
   13ed4:	movw	r0, #0
   13ed8:	movt	r0, #0
   13edc:	movw	r1, #0
   13ee0:	movt	r1, #0
   13ee4:	movw	r2, #241	; 0xf1
   13ee8:	movw	r3, #0
   13eec:	movt	r3, #0
   13ef0:	bl	0 <__assert_fail>
   13ef4:	ldr	r0, [sp, #4]
   13ef8:	bl	0 <flatcc_builder_end_table>
   13efc:	mov	sp, fp
   13f00:	pop	{fp, pc}

00013f04 <Fantasy_Movie_main_character_type>:
   13f04:	push	{fp, lr}
   13f08:	mov	fp, sp
   13f0c:	sub	sp, sp, #24
   13f10:	str	r0, [fp, #-4]
   13f14:	movw	r0, #0
   13f18:	strh	r0, [fp, #-6]
   13f1c:	ldr	r0, [fp, #-4]
   13f20:	movw	r1, #0
   13f24:	cmp	r0, r1
   13f28:	beq	13f34 <Fantasy_Movie_main_character_type+0x30>
   13f2c:	b	13f30 <Fantasy_Movie_main_character_type+0x2c>
   13f30:	b	13f54 <Fantasy_Movie_main_character_type+0x50>
   13f34:	movw	r0, #0
   13f38:	movt	r0, #0
   13f3c:	movw	r1, #0
   13f40:	movt	r1, #0
   13f44:	movw	r2, #819	; 0x333
   13f48:	movw	r3, #0
   13f4c:	movt	r3, #0
   13f50:	bl	0 <__assert_fail>
   13f54:	mov	r0, #0
   13f58:	strh	r0, [fp, #-8]
   13f5c:	ldr	r0, [fp, #-4]
   13f60:	str	r0, [sp, #8]
   13f64:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
   13f68:	ldr	lr, [sp, #8]
   13f6c:	sub	r0, lr, r0
   13f70:	str	r0, [sp, #12]
   13f74:	ldr	r0, [sp, #12]
   13f78:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
   13f7c:	ldrh	lr, [fp, #-8]
   13f80:	add	lr, lr, #3
   13f84:	lsl	lr, lr, #1
   13f88:	cmp	r0, lr
   13f8c:	bcc	13fa8 <Fantasy_Movie_main_character_type+0xa4>
   13f90:	ldr	r0, [sp, #12]
   13f94:	ldrh	r1, [fp, #-8]
   13f98:	add	r0, r0, r1, lsl #1
   13f9c:	add	r0, r0, #4
   13fa0:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
   13fa4:	strh	r0, [fp, #-6]
   13fa8:	ldrh	r0, [fp, #-6]
   13fac:	cmp	r0, #0
   13fb0:	beq	13fd0 <Fantasy_Movie_main_character_type+0xcc>
   13fb4:	ldr	r0, [fp, #-4]
   13fb8:	ldrh	r1, [fp, #-6]
   13fbc:	add	r0, r0, r1
   13fc0:	bl	1214c <__flatbuffers_utype_read_from_pe>
   13fc4:	and	r0, r0, #255	; 0xff
   13fc8:	str	r0, [sp, #4]
   13fcc:	b	13fdc <Fantasy_Movie_main_character_type+0xd8>
   13fd0:	movw	r0, #0
   13fd4:	str	r0, [sp, #4]
   13fd8:	b	13fdc <Fantasy_Movie_main_character_type+0xd8>
   13fdc:	ldr	r0, [sp, #4]
   13fe0:	and	r0, r0, #255	; 0xff
   13fe4:	mov	sp, fp
   13fe8:	pop	{fp, pc}

00013fec <Fantasy_Movie_main_character>:
   13fec:	push	{fp, lr}
   13ff0:	mov	fp, sp
   13ff4:	sub	sp, sp, #32
   13ff8:	str	r0, [fp, #-8]
   13ffc:	movw	r0, #0
   14000:	strh	r0, [fp, #-14]
   14004:	ldr	r0, [fp, #-8]
   14008:	movw	r1, #0
   1400c:	cmp	r0, r1
   14010:	beq	1401c <Fantasy_Movie_main_character+0x30>
   14014:	b	14018 <Fantasy_Movie_main_character+0x2c>
   14018:	b	1403c <Fantasy_Movie_main_character+0x50>
   1401c:	movw	r0, #0
   14020:	movt	r0, #0
   14024:	movw	r1, #0
   14028:	movt	r1, #0
   1402c:	movw	r2, #819	; 0x333
   14030:	movw	r3, #0
   14034:	movt	r3, #0
   14038:	bl	0 <__assert_fail>
   1403c:	mov	r0, #1
   14040:	strh	r0, [sp, #16]
   14044:	ldr	r0, [fp, #-8]
   14048:	str	r0, [sp, #8]
   1404c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
   14050:	ldr	lr, [sp, #8]
   14054:	sub	r0, lr, r0
   14058:	str	r0, [sp, #12]
   1405c:	ldr	r0, [sp, #12]
   14060:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
   14064:	ldrh	lr, [sp, #16]
   14068:	add	lr, lr, #3
   1406c:	lsl	lr, lr, #1
   14070:	cmp	r0, lr
   14074:	bcc	14090 <Fantasy_Movie_main_character+0xa4>
   14078:	ldr	r0, [sp, #12]
   1407c:	ldrh	r1, [sp, #16]
   14080:	add	r0, r0, r1, lsl #1
   14084:	add	r0, r0, #4
   14088:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
   1408c:	strh	r0, [fp, #-14]
   14090:	ldrsh	r0, [fp, #-14]
   14094:	cmp	r0, #0
   14098:	beq	140d0 <Fantasy_Movie_main_character+0xe4>
   1409c:	ldr	r0, [fp, #-8]
   140a0:	ldrh	r1, [fp, #-14]
   140a4:	add	r0, r0, r1
   140a8:	str	r0, [fp, #-12]
   140ac:	ldr	r0, [fp, #-12]
   140b0:	ldr	r1, [fp, #-12]
   140b4:	str	r0, [sp, #4]
   140b8:	mov	r0, r1
   140bc:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   140c0:	ldr	r1, [sp, #4]
   140c4:	add	r0, r1, r0
   140c8:	str	r0, [fp, #-4]
   140cc:	b	140d8 <Fantasy_Movie_main_character+0xec>
   140d0:	movw	r0, #0
   140d4:	str	r0, [fp, #-4]
   140d8:	ldr	r0, [fp, #-4]
   140dc:	mov	sp, fp
   140e0:	pop	{fp, pc}

000140e4 <__flatbuffers_uoffset__size>:
   140e4:	movw	r0, #4
   140e8:	bx	lr

000140ec <Fantasy_Movie_characters>:
   140ec:	push	{fp, lr}
   140f0:	mov	fp, sp
   140f4:	sub	sp, sp, #32
   140f8:	str	r0, [fp, #-8]
   140fc:	movw	r0, #0
   14100:	strh	r0, [fp, #-14]
   14104:	ldr	r0, [fp, #-8]
   14108:	movw	r1, #0
   1410c:	cmp	r0, r1
   14110:	beq	1411c <Fantasy_Movie_characters+0x30>
   14114:	b	14118 <Fantasy_Movie_characters+0x2c>
   14118:	b	1413c <Fantasy_Movie_characters+0x50>
   1411c:	movw	r0, #0
   14120:	movt	r0, #0
   14124:	movw	r1, #0
   14128:	movt	r1, #0
   1412c:	movw	r2, #823	; 0x337
   14130:	movw	r3, #0
   14134:	movt	r3, #0
   14138:	bl	0 <__assert_fail>
   1413c:	mov	r0, #9
   14140:	strh	r0, [sp, #16]
   14144:	ldr	r0, [fp, #-8]
   14148:	str	r0, [sp, #8]
   1414c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
   14150:	ldr	lr, [sp, #8]
   14154:	sub	r0, lr, r0
   14158:	str	r0, [sp, #12]
   1415c:	ldr	r0, [sp, #12]
   14160:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
   14164:	ldrh	lr, [sp, #16]
   14168:	add	lr, lr, #3
   1416c:	lsl	lr, lr, #1
   14170:	cmp	r0, lr
   14174:	bcc	14190 <Fantasy_Movie_characters+0xa4>
   14178:	ldr	r0, [sp, #12]
   1417c:	ldrh	r1, [sp, #16]
   14180:	add	r0, r0, r1, lsl #1
   14184:	add	r0, r0, #4
   14188:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
   1418c:	strh	r0, [fp, #-14]
   14190:	ldrsh	r0, [fp, #-14]
   14194:	cmp	r0, #0
   14198:	beq	141d4 <Fantasy_Movie_characters+0xe8>
   1419c:	ldr	r0, [fp, #-8]
   141a0:	ldrh	r1, [fp, #-14]
   141a4:	add	r0, r0, r1
   141a8:	str	r0, [fp, #-12]
   141ac:	ldr	r0, [fp, #-12]
   141b0:	add	r0, r0, #4
   141b4:	ldr	r1, [fp, #-12]
   141b8:	str	r0, [sp, #4]
   141bc:	mov	r0, r1
   141c0:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   141c4:	ldr	r1, [sp, #4]
   141c8:	add	r0, r1, r0
   141cc:	str	r0, [fp, #-4]
   141d0:	b	141dc <Fantasy_Movie_characters+0xf0>
   141d4:	movw	r0, #0
   141d8:	str	r0, [fp, #-4]
   141dc:	ldr	r0, [fp, #-4]
   141e0:	mov	sp, fp
   141e4:	pop	{fp, pc}

000141e8 <flatbuffers_generic_vec_at_as_string>:
   141e8:	push	{fp, lr}
   141ec:	mov	fp, sp
   141f0:	sub	sp, sp, #16
   141f4:	str	r0, [fp, #-4]
   141f8:	str	r1, [sp, #8]
   141fc:	ldr	r0, [fp, #-4]
   14200:	ldr	r1, [sp, #8]
   14204:	add	r0, r0, r1, lsl #2
   14208:	str	r0, [sp, #4]
   1420c:	ldr	r0, [fp, #-4]
   14210:	bl	120c0 <flatbuffers_vec_len>
   14214:	ldr	r1, [sp, #8]
   14218:	cmp	r0, r1
   1421c:	bls	14228 <flatbuffers_generic_vec_at_as_string+0x40>
   14220:	b	14224 <flatbuffers_generic_vec_at_as_string+0x3c>
   14224:	b	14248 <flatbuffers_generic_vec_at_as_string+0x60>
   14228:	movw	r0, #0
   1422c:	movt	r0, #0
   14230:	movw	r1, #0
   14234:	movt	r1, #0
   14238:	movw	r2, #119	; 0x77
   1423c:	movw	r3, #0
   14240:	movt	r3, #0
   14244:	bl	0 <__assert_fail>
   14248:	ldr	r0, [sp, #4]
   1424c:	ldr	r1, [sp, #4]
   14250:	str	r0, [sp]
   14254:	mov	r0, r1
   14258:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   1425c:	ldr	r1, [sp]
   14260:	add	r0, r1, r0
   14264:	add	r0, r0, #4
   14268:	mov	sp, fp
   1426c:	pop	{fp, pc}

00014270 <MyGame_Example_Monster_testnestedflatbuffer_add>:
   14270:	push	{fp, lr}
   14274:	mov	fp, sp
   14278:	sub	sp, sp, #16
   1427c:	str	r0, [fp, #-4]
   14280:	str	r1, [sp, #8]
   14284:	ldr	r0, [sp, #8]
   14288:	cmp	r0, #0
   1428c:	beq	142c4 <MyGame_Example_Monster_testnestedflatbuffer_add+0x54>
   14290:	ldr	r0, [fp, #-4]
   14294:	movw	r1, #13
   14298:	bl	0 <flatcc_builder_table_add_offset>
   1429c:	str	r0, [sp, #4]
   142a0:	movw	r1, #0
   142a4:	cmp	r0, r1
   142a8:	beq	142c4 <MyGame_Example_Monster_testnestedflatbuffer_add+0x54>
   142ac:	ldr	r0, [sp, #8]
   142b0:	ldr	r1, [sp, #4]
   142b4:	str	r0, [r1]
   142b8:	movw	r0, #0
   142bc:	str	r0, [sp]
   142c0:	b	142d0 <MyGame_Example_Monster_testnestedflatbuffer_add+0x60>
   142c4:	mvn	r0, #0
   142c8:	str	r0, [sp]
   142cc:	b	142d0 <MyGame_Example_Monster_testnestedflatbuffer_add+0x60>
   142d0:	ldr	r0, [sp]
   142d4:	mov	sp, fp
   142d8:	pop	{fp, pc}

000142dc <MyGame_Example_Monster_testnestedflatbuffer>:
   142dc:	push	{fp, lr}
   142e0:	mov	fp, sp
   142e4:	sub	sp, sp, #32
   142e8:	str	r0, [fp, #-8]
   142ec:	movw	r0, #0
   142f0:	strh	r0, [fp, #-14]
   142f4:	ldr	r0, [fp, #-8]
   142f8:	movw	r1, #0
   142fc:	cmp	r0, r1
   14300:	beq	1430c <MyGame_Example_Monster_testnestedflatbuffer+0x30>
   14304:	b	14308 <MyGame_Example_Monster_testnestedflatbuffer+0x2c>
   14308:	b	1432c <MyGame_Example_Monster_testnestedflatbuffer+0x50>
   1430c:	movw	r0, #0
   14310:	movt	r0, #0
   14314:	movw	r1, #0
   14318:	movt	r1, #0
   1431c:	movw	r2, #720	; 0x2d0
   14320:	movw	r3, #0
   14324:	movt	r3, #0
   14328:	bl	0 <__assert_fail>
   1432c:	mov	r0, #13
   14330:	strh	r0, [sp, #16]
   14334:	ldr	r0, [fp, #-8]
   14338:	str	r0, [sp, #8]
   1433c:	bl	f9c0 <__flatbuffers_soffset_read_from_pe>
   14340:	ldr	lr, [sp, #8]
   14344:	sub	r0, lr, r0
   14348:	str	r0, [sp, #12]
   1434c:	ldr	r0, [sp, #12]
   14350:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
   14354:	ldrh	lr, [sp, #16]
   14358:	add	lr, lr, #3
   1435c:	lsl	lr, lr, #1
   14360:	cmp	r0, lr
   14364:	bcc	14380 <MyGame_Example_Monster_testnestedflatbuffer+0xa4>
   14368:	ldr	r0, [sp, #12]
   1436c:	ldrh	r1, [sp, #16]
   14370:	add	r0, r0, r1, lsl #1
   14374:	add	r0, r0, #4
   14378:	bl	f9e4 <__flatbuffers_voffset_read_from_pe>
   1437c:	strh	r0, [fp, #-14]
   14380:	ldrsh	r0, [fp, #-14]
   14384:	cmp	r0, #0
   14388:	beq	143c4 <MyGame_Example_Monster_testnestedflatbuffer+0xe8>
   1438c:	ldr	r0, [fp, #-8]
   14390:	ldrh	r1, [fp, #-14]
   14394:	add	r0, r0, r1
   14398:	str	r0, [fp, #-12]
   1439c:	ldr	r0, [fp, #-12]
   143a0:	add	r0, r0, #4
   143a4:	ldr	r1, [fp, #-12]
   143a8:	str	r0, [sp, #4]
   143ac:	mov	r0, r1
   143b0:	bl	f988 <__flatbuffers_uoffset_read_from_pe>
   143b4:	ldr	r1, [sp, #4]
   143b8:	add	r0, r1, r0
   143bc:	str	r0, [fp, #-4]
   143c0:	b	143cc <MyGame_Example_Monster_testnestedflatbuffer+0xf0>
   143c4:	movw	r0, #0
   143c8:	str	r0, [fp, #-4]
   143cc:	ldr	r0, [fp, #-4]
   143d0:	mov	sp, fp
   143d4:	pop	{fp, pc}

000143d8 <MyGame_Example_Vec3_create>:
   143d8:	push	{fp, lr}
   143dc:	mov	fp, sp
   143e0:	sub	sp, sp, #48	; 0x30
   143e4:	str	r0, [fp, #-8]
   143e8:	vstr	s0, [fp, #-12]
   143ec:	vstr	s1, [fp, #-16]
   143f0:	vstr	s2, [fp, #-20]	; 0xffffffec
   143f4:	vstr	d2, [sp, #16]
   143f8:	strb	r1, [sp, #15]
   143fc:	strh	r2, [sp, #12]
   14400:	strb	r3, [sp, #11]
   14404:	ldr	r0, [fp, #-8]
   14408:	bl	14478 <MyGame_Example_Vec3_start>
   1440c:	str	r0, [sp, #4]
   14410:	ldr	r0, [sp, #4]
   14414:	movw	r1, #0
   14418:	cmp	r0, r1
   1441c:	bne	1442c <MyGame_Example_Vec3_create+0x54>
   14420:	movw	r0, #0
   14424:	str	r0, [fp, #-4]
   14428:	b	1446c <MyGame_Example_Vec3_create+0x94>
   1442c:	ldr	r0, [sp, #4]
   14430:	vldr	s0, [fp, #-12]
   14434:	vldr	s1, [fp, #-16]
   14438:	vldr	s2, [fp, #-20]	; 0xffffffec
   1443c:	vldr	d2, [sp, #16]
   14440:	ldrb	r1, [sp, #15]
   14444:	ldrh	r2, [sp, #12]
   14448:	sxtb	r1, r1
   1444c:	sxth	r2, r2
   14450:	ldrsb	r3, [sp, #11]
   14454:	bl	144a4 <MyGame_Example_Vec3_assign_to_pe>
   14458:	ldr	r1, [fp, #-8]
   1445c:	str	r0, [sp]
   14460:	mov	r0, r1
   14464:	bl	14564 <MyGame_Example_Vec3_end_pe>
   14468:	str	r0, [fp, #-4]
   1446c:	ldr	r0, [fp, #-4]
   14470:	mov	sp, fp
   14474:	pop	{fp, pc}

00014478 <MyGame_Example_Vec3_start>:
   14478:	push	{fp, lr}
   1447c:	mov	fp, sp
   14480:	sub	sp, sp, #8
   14484:	str	r0, [sp, #4]
   14488:	ldr	r0, [sp, #4]
   1448c:	movw	r1, #32
   14490:	movw	r2, #16
   14494:	uxth	r2, r2
   14498:	bl	0 <flatcc_builder_start_struct>
   1449c:	mov	sp, fp
   144a0:	pop	{fp, pc}

000144a4 <MyGame_Example_Vec3_assign_to_pe>:
   144a4:	push	{fp, lr}
   144a8:	mov	fp, sp
   144ac:	sub	sp, sp, #56	; 0x38
   144b0:	str	r0, [fp, #-4]
   144b4:	vstr	s0, [fp, #-8]
   144b8:	vstr	s1, [fp, #-12]
   144bc:	vstr	s2, [fp, #-16]
   144c0:	vstr	d2, [fp, #-24]	; 0xffffffe8
   144c4:	strb	r1, [fp, #-25]	; 0xffffffe7
   144c8:	strh	r2, [sp, #28]
   144cc:	strb	r3, [sp, #27]
   144d0:	ldr	r0, [fp, #-4]
   144d4:	vldr	s0, [fp, #-8]
   144d8:	bl	1044c <flatbuffers_float_assign_to_pe>
   144dc:	ldr	r1, [fp, #-4]
   144e0:	add	r1, r1, #4
   144e4:	vldr	s0, [fp, #-12]
   144e8:	str	r0, [sp, #20]
   144ec:	mov	r0, r1
   144f0:	bl	1044c <flatbuffers_float_assign_to_pe>
   144f4:	ldr	r1, [fp, #-4]
   144f8:	add	r1, r1, #8
   144fc:	vldr	s0, [fp, #-16]
   14500:	str	r0, [sp, #16]
   14504:	mov	r0, r1
   14508:	bl	1044c <flatbuffers_float_assign_to_pe>
   1450c:	ldr	r1, [fp, #-4]
   14510:	add	r1, r1, #16
   14514:	vldr	d0, [fp, #-24]	; 0xffffffe8
   14518:	str	r0, [sp, #12]
   1451c:	mov	r0, r1
   14520:	bl	10378 <flatbuffers_double_assign_to_pe>
   14524:	ldrb	r1, [fp, #-25]	; 0xffffffe7
   14528:	ldr	r2, [fp, #-4]
   1452c:	strb	r1, [r2, #24]
   14530:	ldr	r1, [fp, #-4]
   14534:	add	r1, r1, #26
   14538:	ldrh	r2, [sp, #28]
   1453c:	str	r0, [sp, #8]
   14540:	mov	r0, r1
   14544:	sxth	r1, r2
   14548:	ldrsb	r2, [sp, #27]
   1454c:	bl	14584 <MyGame_Example_Test_assign_to_pe>
   14550:	ldr	r1, [fp, #-4]
   14554:	str	r0, [sp, #4]
   14558:	mov	r0, r1
   1455c:	mov	sp, fp
   14560:	pop	{fp, pc}

00014564 <MyGame_Example_Vec3_end_pe>:
   14564:	push	{fp, lr}
   14568:	mov	fp, sp
   1456c:	sub	sp, sp, #8
   14570:	str	r0, [sp, #4]
   14574:	ldr	r0, [sp, #4]
   14578:	bl	0 <flatcc_builder_end_struct>
   1457c:	mov	sp, fp
   14580:	pop	{fp, pc}

00014584 <MyGame_Example_Test_assign_to_pe>:
   14584:	push	{fp, lr}
   14588:	mov	fp, sp
   1458c:	sub	sp, sp, #16
   14590:	str	r0, [fp, #-4]
   14594:	strh	r1, [fp, #-6]
   14598:	strb	r2, [fp, #-7]
   1459c:	ldr	r0, [fp, #-4]
   145a0:	ldrsh	r1, [fp, #-6]
   145a4:	bl	104a0 <flatbuffers_int16_assign_to_pe>
   145a8:	ldrb	r1, [fp, #-7]
   145ac:	ldr	r2, [fp, #-4]
   145b0:	strb	r1, [r2, #2]
   145b4:	ldr	r1, [fp, #-4]
   145b8:	str	r0, [sp, #4]
   145bc:	mov	r0, r1
   145c0:	mov	sp, fp
   145c4:	pop	{fp, pc}
