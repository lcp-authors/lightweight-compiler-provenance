
../compcert-repos/prog2/0.2:     file format elf32-littlearm


Disassembly of section .init:

000105a0 <.init>:
   105a0:	push	{r3, lr}
   105a4:	bl	107a8 <_start@@Base+0x3c>
   105a8:	pop	{r3, pc}

Disassembly of section .plt:

000105ac <printf@plt-0x14>:
   105ac:	push	{lr}		; (str lr, [sp, #-4]!)
   105b0:	ldr	lr, [pc, #4]	; 105bc <printf@plt-0x4>
   105b4:	add	lr, pc, lr
   105b8:	ldr	pc, [lr, #8]!
   105bc:	andeq	r0, r1, r4, asr #20

000105c0 <printf@plt>:
   105c0:	add	ip, pc, #0, 12
   105c4:	add	ip, ip, #16, 20	; 0x10000
   105c8:	ldr	pc, [ip, #2628]!	; 0xa44

000105cc <puts@plt>:
   105cc:	add	ip, pc, #0, 12
   105d0:	add	ip, ip, #16, 20	; 0x10000
   105d4:	ldr	pc, [ip, #2620]!	; 0xa3c

000105d8 <__libc_start_main@plt>:
   105d8:	add	ip, pc, #0, 12
   105dc:	add	ip, ip, #16, 20	; 0x10000
   105e0:	ldr	pc, [ip, #2612]!	; 0xa34

000105e4 <__gmon_start__@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2604]!	; 0xa2c

000105f0 <putchar@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2596]!	; 0xa24

000105fc <__isoc99_scanf@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2588]!	; 0xa1c

00010608 <abort@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2580]!	; 0xa14

Disassembly of section .text:

00010614 <main@@Base>:
   10614:	mov	r3, #0
   10618:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1061c:	movw	r0, #2252	; 0x8cc
   10620:	movt	r0, #1
   10624:	strd	r6, [sp, #8]
   10628:	mov	r4, r3
   1062c:	str	r8, [sp, #16]
   10630:	movw	r7, #2288	; 0x8f0
   10634:	movt	r7, #1
   10638:	str	lr, [sp, #20]
   1063c:	sub	sp, sp, #40	; 0x28
   10640:	movw	r8, #2264	; 0x8d8
   10644:	movt	r8, #1
   10648:	mov	r5, sp
   1064c:	mov	r6, sp
   10650:	str	r3, [sp]
   10654:	str	r3, [sp, #4]
   10658:	str	r3, [sp, #8]
   1065c:	str	r3, [sp, #12]
   10660:	str	r3, [sp, #16]
   10664:	str	r3, [sp, #20]
   10668:	str	r3, [sp, #24]
   1066c:	str	r3, [sp, #28]
   10670:	str	r3, [sp, #32]
   10674:	str	r3, [sp, #36]	; 0x24
   10678:	bl	105cc <puts@plt>
   1067c:	add	r4, r4, #1
   10680:	mov	r0, r8
   10684:	mov	r1, r4
   10688:	bl	105c0 <printf@plt>
   1068c:	mov	r1, r6
   10690:	mov	r0, r7
   10694:	bl	105fc <__isoc99_scanf@plt>
   10698:	cmp	r4, #5
   1069c:	add	r6, r6, #4
   106a0:	bne	1067c <main@@Base+0x68>
   106a4:	movw	r0, #2292	; 0x8f4
   106a8:	movt	r0, #1
   106ac:	movw	r8, #2264	; 0x8d8
   106b0:	movt	r8, #1
   106b4:	movw	r7, #2288	; 0x8f0
   106b8:	movt	r7, #1
   106bc:	add	r6, sp, #20
   106c0:	mov	r4, #0
   106c4:	bl	105cc <puts@plt>
   106c8:	add	r4, r4, #1
   106cc:	mov	r0, r8
   106d0:	mov	r1, r4
   106d4:	bl	105c0 <printf@plt>
   106d8:	mov	r1, r6
   106dc:	mov	r0, r7
   106e0:	bl	105fc <__isoc99_scanf@plt>
   106e4:	cmp	r4, #5
   106e8:	add	r6, r6, #4
   106ec:	bne	106c8 <main@@Base+0xb4>
   106f0:	mov	r0, #10
   106f4:	movw	r8, #2312	; 0x908
   106f8:	movt	r8, #1
   106fc:	add	r7, sp, #20
   10700:	bl	105f0 <putchar@plt>
   10704:	add	r6, sp, #40	; 0x28
   10708:	movw	r0, #2304	; 0x900
   1070c:	movt	r0, #1
   10710:	bl	105c0 <printf@plt>
   10714:	add	r4, sp, #20
   10718:	ldr	r3, [r4], #4
   1071c:	ldr	r1, [r5]
   10720:	cmp	r1, r3
   10724:	beq	10760 <main@@Base+0x14c>
   10728:	cmp	r6, r4
   1072c:	bne	10718 <main@@Base+0x104>
   10730:	add	r5, r5, #4
   10734:	cmp	r5, r7
   10738:	bne	10714 <main@@Base+0x100>
   1073c:	mov	r0, #10
   10740:	bl	105f0 <putchar@plt>
   10744:	mov	r0, #0
   10748:	add	sp, sp, #40	; 0x28
   1074c:	ldrd	r4, [sp]
   10750:	ldrd	r6, [sp, #8]
   10754:	ldr	r8, [sp, #16]
   10758:	add	sp, sp, #20
   1075c:	pop	{pc}		; (ldr pc, [sp], #4)
   10760:	mov	r0, r8
   10764:	bl	105c0 <printf@plt>
   10768:	b	10728 <main@@Base+0x114>

0001076c <_start@@Base>:
   1076c:	mov	fp, #0
   10770:	mov	lr, #0
   10774:	pop	{r1}		; (ldr r1, [sp], #4)
   10778:	mov	r2, sp
   1077c:	push	{r2}		; (str r2, [sp, #-4]!)
   10780:	push	{r0}		; (str r0, [sp, #-4]!)
   10784:	ldr	ip, [pc, #16]	; 1079c <_start@@Base+0x30>
   10788:	push	{ip}		; (str ip, [sp, #-4]!)
   1078c:	ldr	r0, [pc, #12]	; 107a0 <_start@@Base+0x34>
   10790:	ldr	r3, [pc, #12]	; 107a4 <_start@@Base+0x38>
   10794:	bl	105d8 <__libc_start_main@plt>
   10798:	bl	10608 <abort@plt>
   1079c:			; <UNDEFINED> instruction: 0x000108bc
   107a0:	andeq	r0, r1, r4, lsl r6
   107a4:	andeq	r0, r1, ip, asr r8
   107a8:	ldr	r3, [pc, #20]	; 107c4 <_start@@Base+0x58>
   107ac:	ldr	r2, [pc, #20]	; 107c8 <_start@@Base+0x5c>
   107b0:	add	r3, pc, r3
   107b4:	ldr	r2, [r3, r2]
   107b8:	cmp	r2, #0
   107bc:	bxeq	lr
   107c0:	b	105e4 <__gmon_start__@plt>
   107c4:	andeq	r0, r1, r8, asr #16
   107c8:	andeq	r0, r0, r8, lsr #32
   107cc:	ldr	r0, [pc, #24]	; 107ec <_start@@Base+0x80>
   107d0:	ldr	r3, [pc, #24]	; 107f0 <_start@@Base+0x84>
   107d4:	cmp	r3, r0
   107d8:	bxeq	lr
   107dc:	ldr	r3, [pc, #16]	; 107f4 <_start@@Base+0x88>
   107e0:	cmp	r3, #0
   107e4:	bxeq	lr
   107e8:	bx	r3
   107ec:	andeq	r1, r2, r4, lsr r0
   107f0:	andeq	r1, r2, r4, lsr r0
   107f4:	andeq	r0, r0, r0
   107f8:	ldr	r0, [pc, #36]	; 10824 <_start@@Base+0xb8>
   107fc:	ldr	r1, [pc, #36]	; 10828 <_start@@Base+0xbc>
   10800:	sub	r1, r1, r0
   10804:	asr	r1, r1, #2
   10808:	add	r1, r1, r1, lsr #31
   1080c:	asrs	r1, r1, #1
   10810:	bxeq	lr
   10814:	ldr	r3, [pc, #16]	; 1082c <_start@@Base+0xc0>
   10818:	cmp	r3, #0
   1081c:	bxeq	lr
   10820:	bx	r3
   10824:	andeq	r1, r2, r4, lsr r0
   10828:	andeq	r1, r2, r4, lsr r0
   1082c:	andeq	r0, r0, r0
   10830:	push	{r4, lr}
   10834:	ldr	r4, [pc, #24]	; 10854 <_start@@Base+0xe8>
   10838:	ldrb	r3, [r4]
   1083c:	cmp	r3, #0
   10840:	popne	{r4, pc}
   10844:	bl	107cc <_start@@Base+0x60>
   10848:	mov	r3, #1
   1084c:	strb	r3, [r4]
   10850:	pop	{r4, pc}
   10854:	andeq	r1, r2, r4, lsr r0
   10858:	b	107f8 <_start@@Base+0x8c>

0001085c <__libc_csu_init@@Base>:
   1085c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10860:	mov	r7, r0
   10864:	ldr	r6, [pc, #72]	; 108b4 <__libc_csu_init@@Base+0x58>
   10868:	ldr	r5, [pc, #72]	; 108b8 <__libc_csu_init@@Base+0x5c>
   1086c:	add	r6, pc, r6
   10870:	add	r5, pc, r5
   10874:	sub	r6, r6, r5
   10878:	mov	r8, r1
   1087c:	mov	r9, r2
   10880:	bl	105a0 <printf@plt-0x20>
   10884:	asrs	r6, r6, #2
   10888:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1088c:	mov	r4, #0
   10890:	add	r4, r4, #1
   10894:	ldr	r3, [r5], #4
   10898:	mov	r2, r9
   1089c:	mov	r1, r8
   108a0:	mov	r0, r7
   108a4:	blx	r3
   108a8:	cmp	r6, r4
   108ac:	bne	10890 <__libc_csu_init@@Base+0x34>
   108b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108b4:	andeq	r0, r1, r0, lsr #13
   108b8:	muleq	r1, r8, r6

000108bc <__libc_csu_fini@@Base>:
   108bc:	bx	lr

Disassembly of section .fini:

000108c0 <.fini>:
   108c0:	push	{r3, lr}
   108c4:	pop	{r3, pc}
