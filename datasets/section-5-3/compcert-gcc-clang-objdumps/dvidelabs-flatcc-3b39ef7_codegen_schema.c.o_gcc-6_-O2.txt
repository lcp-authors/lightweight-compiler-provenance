
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_schema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <clear_catalog>:
       0:	push	{r4, lr}
       4:	mov	r4, r0
       8:	ldr	r0, [r0, #16]
       c:	cmp	r0, #0
      10:	beq	18 <clear_catalog+0x18>
      14:	bl	0 <free>
      18:	ldr	r0, [r4, #20]
      1c:	cmp	r0, #0
      20:	beq	28 <clear_catalog+0x28>
      24:	bl	0 <free>
      28:	ldr	r0, [r4, #24]
      2c:	cmp	r0, #0
      30:	beq	38 <clear_catalog+0x38>
      34:	bl	0 <free>
      38:	mov	r0, r4
      3c:	mov	r2, #44	; 0x2c
      40:	mov	r1, #0
      44:	pop	{r4, lr}
      48:	b	0 <memset>

0000004c <install_symbols>:
      4c:	add	r3, r1, #4
      50:	mov	r2, r0
      54:	ldr	r1, [pc, #4]	; 60 <install_symbols+0x14>
      58:	mov	r0, r3
      5c:	b	0 <fb_symbol_table_visit>
      60:	.word	0x00000000

00000064 <count_symbols>:
      64:	add	r3, r1, #4
      68:	mov	r2, r0
      6c:	ldr	r1, [pc, #4]	; 78 <count_symbols+0x14>
      70:	mov	r0, r3
      74:	b	0 <fb_symbol_table_visit>
      78:	.word	0x00000000

0000007c <install_symbol>:
      7c:	ldrh	r3, [r1, #8]
      80:	cmp	r3, #4
      84:	bxhi	lr
      88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
      8c:	mov	r6, r0
      90:	ldr	r0, [r0, #40]	; 0x28
      94:	mov	r7, r1
      98:	add	r0, r0, #172	; 0xac
      9c:	ldr	r1, [r1, #16]
      a0:	bl	0 <ptr_set_find_item>
      a4:	cmp	r0, #0
      a8:	beq	17c <install_symbol+0x100>
      ac:	ldr	r3, [r6]
      b0:	ldr	r9, [r6, #36]	; 0x24
      b4:	cmp	r3, #0
      b8:	moveq	r3, r9
      bc:	beq	104 <install_symbol+0x88>
      c0:	ldr	r3, [r7, #12]
      c4:	ldr	r5, [r3]
      c8:	mov	r3, r9
      cc:	cmp	r5, #0
      d0:	beq	104 <install_symbol+0x88>
      d4:	mov	r8, #46	; 0x2e
      d8:	ldr	r2, [r5, #4]
      dc:	mov	r0, r3
      e0:	ldm	r2, {r1, r4}
      e4:	mov	r2, r4
      e8:	bl	0 <memcpy>
      ec:	add	r4, r0, r4
      f0:	add	r3, r4, #1
      f4:	strb	r8, [r4]
      f8:	ldr	r5, [r5]
      fc:	cmp	r5, #0
     100:	bne	d8 <install_symbol+0x5c>
     104:	ldr	r2, [r7, #4]
     108:	mov	r0, r3
     10c:	ldm	r2, {r1, r4}
     110:	mov	r2, r4
     114:	bl	0 <memcpy>
     118:	mov	r2, #0
     11c:	strb	r2, [r0, r4]
     120:	ldrh	r2, [r7, #8]
     124:	add	r3, r0, r4
     128:	add	r3, r3, #1
     12c:	str	r3, [r6, #36]	; 0x24
     130:	cmp	r2, #4
     134:	ldrls	pc, [pc, r2, lsl #2]
     138:	b	178 <install_symbol+0xfc>
     13c:	.word	0x00000164
     140:	.word	0x00000164
     144:	.word	0x00000178
     148:	.word	0x00000150
     14c:	.word	0x00000150
     150:	ldr	r3, [r6, #32]
     154:	add	r2, r3, #8
     158:	stm	r3, {r7, r9}
     15c:	str	r2, [r6, #32]
     160:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     164:	ldr	r3, [r6, #28]
     168:	add	r2, r3, #8
     16c:	stm	r3, {r7, r9}
     170:	str	r2, [r6, #28]
     174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     178:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     17c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00000180 <count_symbol>:
     180:	ldrh	r3, [r1, #8]
     184:	cmp	r3, #4
     188:	bxhi	lr
     18c:	push	{r4, r5, r6, lr}
     190:	mov	r4, r0
     194:	ldr	r0, [r0, #40]	; 0x28
     198:	mov	r5, r1
     19c:	add	r0, r0, #172	; 0xac
     1a0:	ldr	r1, [r1, #16]
     1a4:	bl	0 <ptr_set_find_item>
     1a8:	cmp	r0, #0
     1ac:	beq	250 <count_symbol+0xd0>
     1b0:	ldr	ip, [r4]
     1b4:	cmp	ip, #0
     1b8:	beq	1ec <count_symbol+0x6c>
     1bc:	ldr	r3, [r5, #12]
     1c0:	ldr	r3, [r3]
     1c4:	cmp	r3, #0
     1c8:	beq	254 <count_symbol+0xd4>
     1cc:	mov	ip, #0
     1d0:	ldr	r2, [r3, #4]
     1d4:	ldr	r3, [r3]
     1d8:	ldr	r2, [r2, #4]
     1dc:	cmp	r3, #0
     1e0:	add	r2, r2, #1
     1e4:	add	ip, ip, r2
     1e8:	bne	1d0 <count_symbol+0x50>
     1ec:	ldr	r3, [r5, #4]
     1f0:	ldr	r1, [r4, #12]
     1f4:	ldrh	r2, [r5, #8]
     1f8:	ldr	r3, [r3, #4]
     1fc:	add	r3, r3, r1
     200:	add	r3, r3, #1
     204:	add	ip, r3, ip
     208:	str	ip, [r4, #12]
     20c:	cmp	r2, #4
     210:	ldrls	pc, [pc, r2, lsl #2]
     214:	b	24c <count_symbol+0xcc>
     218:	.word	0x0000023c
     21c:	.word	0x0000023c
     220:	.word	0x0000024c
     224:	.word	0x0000022c
     228:	.word	0x0000022c
     22c:	ldr	r3, [r4, #8]
     230:	add	r3, r3, #1
     234:	str	r3, [r4, #8]
     238:	pop	{r4, r5, r6, pc}
     23c:	ldr	r3, [r4, #4]
     240:	add	r3, r3, #1
     244:	str	r3, [r4, #4]
     248:	pop	{r4, r5, r6, pc}
     24c:	pop	{r4, r5, r6, pc}
     250:	pop	{r4, r5, r6, pc}
     254:	mov	ip, r3
     258:	b	1ec <count_symbol+0x6c>

0000025c <sort_entries>:
     25c:	push	{r4, r5, r6, lr}
     260:	mov	r2, #8
     264:	mov	r4, r1
     268:	ldr	r3, [pc, #40]	; 298 <sort_entries+0x3c>
     26c:	mov	r5, r0
     270:	bl	0 <qsort>
     274:	cmp	r4, #0
     278:	pople	{r4, r5, r6, pc}
     27c:	mov	r3, #0
     280:	ldr	r2, [r5, r3, lsl #3]
     284:	str	r3, [r2, #124]	; 0x7c
     288:	add	r3, r3, #1
     28c:	cmp	r4, r3
     290:	bne	280 <sort_entries+0x24>
     294:	pop	{r4, r5, r6, pc}
     298:	.word	0x00000000

0000029c <compare_entries>:
     29c:	ldr	r1, [r1, #4]
     2a0:	ldr	r0, [r0, #4]
     2a4:	b	0 <strcmp>

000002a8 <export_type.isra.6>:
     2a8:	sub	r2, r2, #2
     2ac:	push	{r4, r5, r6, r7, r8, lr}
     2b0:	mov	r4, r0
     2b4:	cmp	r2, #13
     2b8:	ldrls	pc, [pc, r2, lsl #2]
     2bc:	b	430 <export_type.isra.6+0x188>
     2c0:	.word	0x00000420
     2c4:	.word	0x00000430
     2c8:	.word	0x00000430
     2cc:	.word	0x00000430
     2d0:	.word	0x00000430
     2d4:	.word	0x00000374
     2d8:	.word	0x000003c0
     2dc:	.word	0x000002f8
     2e0:	.word	0x00000430
     2e4:	.word	0x00000430
     2e8:	.word	0x00000430
     2ec:	.word	0x00000430
     2f0:	.word	0x000003d8
     2f4:	.word	0x00000400
     2f8:	mvn	r6, #0
     2fc:	mov	r7, #13
     300:	mov	r5, #14
     304:	mov	r1, #3
     308:	mov	r0, r4
     30c:	bl	0 <flatcc_builder_start_table>
     310:	cmp	r0, #0
     314:	bne	450 <export_type.isra.6+0x1a8>
     318:	cmn	r6, #1
     31c:	beq	340 <export_type.isra.6+0x98>
     320:	mov	r3, #4
     324:	mov	r2, r3
     328:	mov	r1, #2
     32c:	mov	r0, r4
     330:	bl	0 <flatcc_builder_table_add>
     334:	cmp	r0, #0
     338:	strne	r6, [r0]
     33c:	beq	450 <export_type.isra.6+0x1a8>
     340:	cmp	r5, #0
     344:	bne	458 <export_type.isra.6+0x1b0>
     348:	cmp	r7, #0
     34c:	bne	47c <export_type.isra.6+0x1d4>
     350:	mov	r2, #0
     354:	ldr	r1, [pc, #384]	; 4dc <export_type.isra.6+0x234>
     358:	mov	r0, r4
     35c:	bl	0 <flatcc_builder_check_required>
     360:	cmp	r0, #0
     364:	beq	4c8 <export_type.isra.6+0x220>
     368:	mov	r0, r4
     36c:	pop	{r4, r5, r6, r7, r8, lr}
     370:	b	0 <flatcc_builder_end_table>
     374:	mvn	r6, #0
     378:	sub	r1, r1, #1
     37c:	cmp	r1, #10
     380:	movhi	r7, #0
     384:	movhi	r5, #14
     388:	bhi	304 <export_type.isra.6+0x5c>
     38c:	mov	r2, #14
     390:	ldr	r3, [pc, #328]	; 4e0 <export_type.isra.6+0x238>
     394:	cmp	r2, #0
     398:	add	r1, r3, r1
     39c:	ldrsb	r5, [r1, #24]
     3a0:	beq	3b8 <export_type.isra.6+0x110>
     3a4:	cmp	r2, #14
     3a8:	moveq	r7, r5
     3ac:	moveq	r5, r2
     3b0:	beq	304 <export_type.isra.6+0x5c>
     3b4:	mov	r5, r2
     3b8:	mov	r7, #0
     3bc:	b	304 <export_type.isra.6+0x5c>
     3c0:	mvn	r6, #0
     3c4:	sub	r1, r1, #1
     3c8:	cmp	r1, #10
     3cc:	movls	r2, #0
     3d0:	bls	390 <export_type.isra.6+0xe8>
     3d4:	b	434 <export_type.isra.6+0x18c>
     3d8:	ldrh	r3, [r1, #8]
     3dc:	ldr	r6, [r1, #124]	; 0x7c
     3e0:	cmp	r3, #4
     3e4:	ldrls	pc, [pc, r3, lsl #2]
     3e8:	b	440 <export_type.isra.6+0x198>
     3ec:	.word	0x000004ac
     3f0:	.word	0x000004ac
     3f4:	.word	0x00000440
     3f8:	.word	0x000004b4
     3fc:	.word	0x000004a0
     400:	ldrh	r3, [r1, #8]
     404:	ldr	r6, [r1, #124]	; 0x7c
     408:	cmp	r3, #1
     40c:	bls	4bc <export_type.isra.6+0x214>
     410:	cmp	r3, #3
     414:	bne	434 <export_type.isra.6+0x18c>
     418:	ldr	r1, [r1, #40]	; 0x28
     41c:	b	378 <export_type.isra.6+0xd0>
     420:	mvn	r6, #0
     424:	mov	r7, #0
     428:	mov	r5, #13
     42c:	b	304 <export_type.isra.6+0x5c>
     430:	mvn	r6, #0
     434:	mov	r7, #0
     438:	mov	r5, r7
     43c:	b	304 <export_type.isra.6+0x5c>
     440:	mov	r1, #3
     444:	bl	0 <flatcc_builder_start_table>
     448:	cmp	r0, #0
     44c:	beq	350 <export_type.isra.6+0xa8>
     450:	mov	r0, #0
     454:	pop	{r4, r5, r6, r7, r8, pc}
     458:	mov	r3, #1
     45c:	mov	r2, r3
     460:	mov	r1, #0
     464:	mov	r0, r4
     468:	bl	0 <flatcc_builder_table_add>
     46c:	cmp	r0, #0
     470:	strbne	r5, [r0]
     474:	bne	348 <export_type.isra.6+0xa0>
     478:	b	450 <export_type.isra.6+0x1a8>
     47c:	mov	r3, #1
     480:	mov	r2, r3
     484:	mov	r1, r3
     488:	mov	r0, r4
     48c:	bl	0 <flatcc_builder_table_add>
     490:	cmp	r0, #0
     494:	strbne	r7, [r0]
     498:	bne	350 <export_type.isra.6+0xa8>
     49c:	b	450 <export_type.isra.6+0x1a8>
     4a0:	mov	r7, #0
     4a4:	mov	r5, #16
     4a8:	b	304 <export_type.isra.6+0x5c>
     4ac:	mov	r2, #15
     4b0:	b	3b4 <export_type.isra.6+0x10c>
     4b4:	ldr	r1, [r1, #40]	; 0x28
     4b8:	b	3c4 <export_type.isra.6+0x11c>
     4bc:	mov	r7, #15
     4c0:	mov	r5, #14
     4c4:	b	304 <export_type.isra.6+0x5c>
     4c8:	ldr	r3, [pc, #20]	; 4e4 <export_type.isra.6+0x23c>
     4cc:	mov	r2, #23
     4d0:	ldr	r1, [pc, #16]	; 4e8 <export_type.isra.6+0x240>
     4d4:	ldr	r0, [pc, #16]	; 4ec <export_type.isra.6+0x244>
     4d8:	bl	0 <__assert_fail>
     4dc:	.word	0x00000038
     4e0:	.word	0x00000000
     4e4:	.word	0x00000024
     4e8:	.word	0x00000090
     4ec:	.word	0x000000f8

000004f0 <export_schema.isra.8>:
     4f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4f4:	vpush	{d8-d9}
     4f8:	ldr	r7, [r3, #60]	; 0x3c
     4fc:	mov	r4, r1
     500:	mov	r9, r0
     504:	sub	sp, sp, #100	; 0x64
     508:	mov	r1, #0
     50c:	mov	r6, r2
     510:	add	r0, sp, #52	; 0x34
     514:	mov	r2, #44	; 0x2c
     518:	mov	r5, r3
     51c:	str	r3, [sp, #44]	; 0x2c
     520:	bl	0 <memset>
     524:	add	r2, sp, #52	; 0x34
     528:	mov	r0, r7
     52c:	ldr	r1, [pc, #1172]	; 9c8 <export_schema.isra.8+0x4d8>
     530:	str	r4, [sp, #52]	; 0x34
     534:	str	r5, [sp, #92]	; 0x5c
     538:	bl	0 <fb_scope_table_visit>
     53c:	ldr	sl, [sp, #56]	; 0x38
     540:	mov	r1, #8
     544:	mov	r0, sl
     548:	bl	0 <calloc>
     54c:	ldr	fp, [sp, #60]	; 0x3c
     550:	mov	r1, #8
     554:	mov	r4, r0
     558:	mov	r0, fp
     55c:	str	r4, [sp, #68]	; 0x44
     560:	bl	0 <calloc>
     564:	ldr	r8, [sp, #64]	; 0x40
     568:	mov	r5, r0
     56c:	str	r0, [sp, #72]	; 0x48
     570:	mov	r0, r8
     574:	bl	0 <malloc>
     578:	cmp	sl, #0
     57c:	clz	r3, r4
     580:	lsr	r3, r3, #5
     584:	movle	r3, #0
     588:	cmp	r3, #0
     58c:	str	r4, [sp, #80]	; 0x50
     590:	str	r5, [sp, #84]	; 0x54
     594:	str	r0, [sp, #76]	; 0x4c
     598:	str	r0, [sp, #88]	; 0x58
     59c:	bne	1090 <export_schema.isra.8+0xba0>
     5a0:	cmp	fp, #0
     5a4:	clz	r5, r5
     5a8:	lsr	r5, r5, #5
     5ac:	movle	r5, #0
     5b0:	cmp	r5, #0
     5b4:	bne	1090 <export_schema.isra.8+0xba0>
     5b8:	cmp	r8, #0
     5bc:	clz	r4, r0
     5c0:	lsr	r4, r4, #5
     5c4:	moveq	r4, #0
     5c8:	cmp	r4, #0
     5cc:	bne	1090 <export_schema.isra.8+0xba0>
     5d0:	add	r2, sp, #52	; 0x34
     5d4:	mov	r0, r7
     5d8:	ldr	r1, [pc, #1004]	; 9cc <export_schema.isra.8+0x4dc>
     5dc:	bl	0 <fb_scope_table_visit>
     5e0:	ldr	r1, [sp, #56]	; 0x38
     5e4:	ldr	r0, [sp, #68]	; 0x44
     5e8:	bl	25c <sort_entries>
     5ec:	ldr	r0, [sp, #72]	; 0x48
     5f0:	ldr	r1, [sp, #60]	; 0x3c
     5f4:	bl	25c <sort_entries>
     5f8:	ldr	r0, [sp, #56]	; 0x38
     5fc:	cmp	r0, #0
     600:	ble	1088 <export_schema.isra.8+0xb98>
     604:	lsl	r0, r0, #2
     608:	bl	0 <malloc>
     60c:	subs	r3, r0, #0
     610:	str	r3, [sp, #20]
     614:	beq	1090 <export_schema.isra.8+0xba0>
     618:	ldr	r3, [r6]
     61c:	mov	r2, #0
     620:	cmp	r3, #0
     624:	movne	r3, #2
     628:	ldr	r1, [pc, #928]	; 9d0 <export_schema.isra.8+0x4e0>
     62c:	mov	r0, r9
     630:	bl	0 <flatcc_builder_start_buffer>
     634:	cmp	r0, #0
     638:	bne	648 <export_schema.isra.8+0x158>
     63c:	mov	r1, #5
     640:	mov	r0, r9
     644:	bl	0 <flatcc_builder_start_table>
     648:	ldr	r3, [sp, #44]	; 0x2c
     64c:	ldrh	r4, [r3, #16]
     650:	cmp	r4, #2
     654:	beq	10d4 <export_schema.isra.8+0xbe4>
     658:	ldr	r3, [sp, #44]	; 0x2c
     65c:	ldrh	r3, [r3, #32]
     660:	cmp	r3, #2
     664:	beq	10a0 <export_schema.isra.8+0xbb0>
     668:	ldr	r3, [sp, #56]	; 0x38
     66c:	ldr	r2, [sp, #68]	; 0x44
     670:	cmp	r3, #0
     674:	str	r3, [sp, #36]	; 0x24
     678:	str	r2, [sp, #40]	; 0x28
     67c:	ble	c18 <export_schema.isra.8+0x728>
     680:	ldr	r3, [sp, #40]	; 0x28
     684:	vldr	d9, [pc, #820]	; 9c0 <export_schema.isra.8+0x4d0>
     688:	str	r3, [sp, #28]
     68c:	ldr	r3, [sp, #20]
     690:	sub	r3, r3, #4
     694:	str	r3, [sp, #32]
     698:	mov	r3, #0
     69c:	str	r3, [sp, #24]
     6a0:	ldr	r2, [sp, #24]
     6a4:	ldr	r3, [sp, #40]	; 0x28
     6a8:	mov	r1, #5
     6ac:	mov	r0, r9
     6b0:	ldr	r3, [r3, r2, lsl #3]
     6b4:	str	r3, [sp]
     6b8:	bl	0 <flatcc_builder_start_table>
     6bc:	ldr	r3, [sp, #28]
     6c0:	mov	r0, r9
     6c4:	ldr	r1, [r3, #4]
     6c8:	bl	0 <flatcc_builder_create_string_str>
     6cc:	subs	r4, r0, #0
     6d0:	beq	6e8 <export_schema.isra.8+0x1f8>
     6d4:	mov	r1, #0
     6d8:	mov	r0, r9
     6dc:	bl	0 <flatcc_builder_table_add_offset>
     6e0:	cmp	r0, #0
     6e4:	strne	r4, [r0]
     6e8:	mov	r0, r9
     6ec:	bl	0 <flatcc_builder_start_offset_vector>
     6f0:	ldr	r3, [sp]
     6f4:	ldr	r4, [r3, #20]
     6f8:	cmp	r4, #0
     6fc:	movne	sl, #0
     700:	movne	fp, sl
     704:	bne	7f4 <export_schema.isra.8+0x304>
     708:	b	b68 <export_schema.isra.8+0x678>
     70c:	tst	r5, #128	; 0x80
     710:	beq	800 <export_schema.isra.8+0x310>
     714:	mov	r7, #1
     718:	str	r7, [sp, #4]
     71c:	ldrh	r3, [r4, #24]
     720:	ands	r8, r5, #4
     724:	movne	r2, #1
     728:	moveq	r2, #0
     72c:	cmp	r3, #14
     730:	str	r2, [sp, #16]
     734:	beq	a24 <export_schema.isra.8+0x534>
     738:	mov	r1, #9
     73c:	mov	r0, r9
     740:	bl	0 <flatcc_builder_start_table>
     744:	ldr	r3, [r4, #4]
     748:	mov	r0, r9
     74c:	ldm	r3, {r1, r2}
     750:	bl	0 <flatcc_builder_create_string>
     754:	subs	r6, r0, #0
     758:	beq	770 <export_schema.isra.8+0x280>
     75c:	mov	r1, fp
     760:	mov	r0, r9
     764:	bl	0 <flatcc_builder_table_add_offset>
     768:	cmp	r0, #0
     76c:	strne	r6, [r0]
     770:	ldrh	r2, [r4, #24]
     774:	ldr	r1, [r4, #16]
     778:	mov	r0, r9
     77c:	bl	2a8 <export_type.isra.6>
     780:	subs	r6, r0, #0
     784:	bne	9a8 <export_schema.isra.8+0x4b8>
     788:	ldr	r3, [sp]
     78c:	ldrh	r3, [r3, #8]
     790:	cmp	r3, #0
     794:	beq	810 <export_schema.isra.8+0x320>
     798:	cmp	r3, #1
     79c:	bne	7ac <export_schema.isra.8+0x2bc>
     7a0:	ldrh	r5, [r4, #80]	; 0x50
     7a4:	cmp	r5, #0
     7a8:	bne	e10 <export_schema.isra.8+0x920>
     7ac:	cmp	r8, #0
     7b0:	bne	8d4 <export_schema.isra.8+0x3e4>
     7b4:	mov	r2, #2
     7b8:	ldr	r1, [pc, #540]	; 9dc <export_schema.isra.8+0x4ec>
     7bc:	mov	r0, r9
     7c0:	bl	0 <flatcc_builder_check_required>
     7c4:	cmp	r0, #0
     7c8:	beq	1104 <export_schema.isra.8+0xc14>
     7cc:	mov	r0, r9
     7d0:	bl	0 <flatcc_builder_end_table>
     7d4:	subs	r1, r0, #0
     7d8:	beq	7e4 <export_schema.isra.8+0x2f4>
     7dc:	mov	r0, r9
     7e0:	bl	0 <flatcc_builder_offset_vector_push>
     7e4:	ldr	r4, [r4]
     7e8:	orr	sl, r7, sl
     7ec:	cmp	r4, #0
     7f0:	beq	b68 <export_schema.isra.8+0x678>
     7f4:	cmp	sl, #0
     7f8:	ldrh	r5, [r4, #72]	; 0x48
     7fc:	beq	70c <export_schema.isra.8+0x21c>
     800:	mov	r3, #0
     804:	mov	r7, fp
     808:	str	r3, [sp, #4]
     80c:	b	71c <export_schema.isra.8+0x22c>
     810:	ldrh	r3, [r4, #56]	; 0x38
     814:	sub	r3, r3, #3
     818:	cmp	r3, #3
     81c:	ldrls	pc, [pc, r3, lsl #2]
     820:	b	112c <export_schema.isra.8+0xc3c>
     824:	.word	0x000008f8
     828:	.word	0x00000834
     82c:	.word	0x00000834
     830:	.word	0x0000096c
     834:	ldrd	r2, [r4, #48]	; 0x30
     838:	strd	r2, [sp, #8]
     83c:	ldrd	r2, [sp, #8]
     840:	orrs	r3, r2, r3
     844:	bne	984 <export_schema.isra.8+0x494>
     848:	ldrh	r6, [r4, #96]	; 0x60
     84c:	cmp	r6, #0
     850:	moveq	r6, #4
     854:	bne	934 <export_schema.isra.8+0x444>
     858:	mov	r3, #2
     85c:	mov	r2, r3
     860:	mov	r1, #3
     864:	mov	r0, r9
     868:	bl	0 <flatcc_builder_table_add>
     86c:	cmp	r0, #0
     870:	strhne	r6, [r0]
     874:	ldr	r3, [sp, #4]
     878:	cmp	r3, #0
     87c:	beq	8a0 <export_schema.isra.8+0x3b0>
     880:	mov	r3, #1
     884:	mov	r2, r3
     888:	mov	r1, #8
     88c:	mov	r0, r9
     890:	bl	0 <flatcc_builder_table_add>
     894:	cmp	r0, #0
     898:	movne	r3, #1
     89c:	strbne	r3, [r0]
     8a0:	tst	r5, #256	; 0x100
     8a4:	beq	7ac <export_schema.isra.8+0x2bc>
     8a8:	mov	r3, #1
     8ac:	mov	r2, r3
     8b0:	mov	r1, #7
     8b4:	mov	r0, r9
     8b8:	bl	0 <flatcc_builder_table_add>
     8bc:	cmp	r0, #0
     8c0:	beq	7ac <export_schema.isra.8+0x2bc>
     8c4:	mov	r3, #1
     8c8:	cmp	r8, #0
     8cc:	strb	r3, [r0]
     8d0:	beq	7b4 <export_schema.isra.8+0x2c4>
     8d4:	mov	r3, #1
     8d8:	mov	r2, r3
     8dc:	mov	r1, #6
     8e0:	mov	r0, r9
     8e4:	bl	0 <flatcc_builder_table_add>
     8e8:	cmp	r0, #0
     8ec:	ldrbne	r3, [sp, #16]
     8f0:	strbne	r3, [r0]
     8f4:	b	7b4 <export_schema.isra.8+0x2c4>
     8f8:	vldr	d8, [r4, #48]	; 0x30
     8fc:	vcmp.f64	d8, d9
     900:	vmrs	APSR_nzcv, fpscr
     904:	beq	848 <export_schema.isra.8+0x358>
     908:	mov	r3, #8
     90c:	mov	r2, r3
     910:	mov	r1, #5
     914:	mov	r0, r9
     918:	bl	0 <flatcc_builder_table_add>
     91c:	ldrh	r6, [r4, #96]	; 0x60
     920:	cmp	r0, #0
     924:	vstrne	d8, [r0]
     928:	cmp	r6, #0
     92c:	moveq	r6, #4
     930:	beq	858 <export_schema.isra.8+0x368>
     934:	mov	r3, #2
     938:	mov	r2, r3
     93c:	mov	r1, r3
     940:	mov	r0, r9
     944:	bl	0 <flatcc_builder_table_add>
     948:	cmp	r0, #0
     94c:	strhne	r6, [r0]
     950:	ldrh	r6, [r4, #96]	; 0x60
     954:	add	r6, r6, #2
     958:	lsl	r6, r6, #1
     95c:	uxth	r6, r6
     960:	cmp	r6, #0
     964:	beq	874 <export_schema.isra.8+0x384>
     968:	b	858 <export_schema.isra.8+0x368>
     96c:	ldrb	r2, [r4, #48]	; 0x30
     970:	mov	r3, #0
     974:	strd	r2, [sp, #8]
     978:	ldrd	r2, [sp, #8]
     97c:	orrs	r3, r2, r3
     980:	beq	848 <export_schema.isra.8+0x358>
     984:	mov	r3, #8
     988:	mov	r2, r3
     98c:	mov	r1, #4
     990:	mov	r0, r9
     994:	bl	0 <flatcc_builder_table_add>
     998:	cmp	r0, #0
     99c:	ldrdne	r2, [sp, #8]
     9a0:	strdne	r2, [r0]
     9a4:	b	848 <export_schema.isra.8+0x358>
     9a8:	mov	r1, #1
     9ac:	mov	r0, r9
     9b0:	bl	0 <flatcc_builder_table_add_offset>
     9b4:	cmp	r0, #0
     9b8:	strne	r6, [r0]
     9bc:	b	788 <export_schema.isra.8+0x298>
	...
     9d0:	.word	0x00000188
     9d4:	.word	0x00000190
     9d8:	.word	0x00000038
     9dc:	.word	0x0000003c
     9e0:	.word	0x0000005c
     9e4:	.word	0x0000007c
     9e8:	.word	0x00000098
     9ec:	.word	0x000000b4
     9f0:	.word	0x00000044
     9f4:	.word	0x00000198
     9f8:	.word	0x00000080
     9fc:	.word	0x000002bc
     a00:	.word	0x00000024
     a04:	.word	0x000000f8
     a08:	.word	0x000000bc
     a0c:	.word	0x000003e4
     a10:	.word	0x000000a0
     a14:	.word	0x00000354
     a18:	.word	0x00000064
     a1c:	.word	0x00000090
     a20:	.word	0x00000228
     a24:	ldr	r3, [r4, #16]
     a28:	ldrh	r3, [r3, #8]
     a2c:	cmp	r3, #4
     a30:	bne	738 <export_schema.isra.8+0x248>
     a34:	mov	r1, #9
     a38:	mov	r0, r9
     a3c:	bl	0 <flatcc_builder_start_table>
     a40:	mov	r0, r9
     a44:	bl	0 <flatcc_builder_start_string>
     a48:	ldr	r3, [r4, #4]
     a4c:	mov	r0, r9
     a50:	ldm	r3, {r1, r2}
     a54:	bl	0 <flatcc_builder_append_string>
     a58:	mov	r2, #5
     a5c:	ldr	r1, [pc, #-144]	; 9d4 <export_schema.isra.8+0x4e4>
     a60:	mov	r0, r9
     a64:	bl	0 <flatcc_builder_append_string>
     a68:	mov	r0, r9
     a6c:	bl	0 <flatcc_builder_end_string>
     a70:	subs	r6, r0, #0
     a74:	beq	a8c <export_schema.isra.8+0x59c>
     a78:	mov	r1, fp
     a7c:	mov	r0, r9
     a80:	bl	0 <flatcc_builder_table_add_offset>
     a84:	cmp	r0, #0
     a88:	strne	r6, [r0]
     a8c:	mov	r1, #3
     a90:	mov	r0, r9
     a94:	bl	0 <flatcc_builder_start_table>
     a98:	cmp	r0, #0
     a9c:	bne	b00 <export_schema.isra.8+0x610>
     aa0:	mov	r3, #1
     aa4:	mov	r2, r3
     aa8:	mov	r1, fp
     aac:	mov	r0, r9
     ab0:	bl	0 <flatcc_builder_table_add>
     ab4:	cmp	r0, #0
     ab8:	beq	b00 <export_schema.isra.8+0x610>
     abc:	mov	r3, #1
     ac0:	strb	r3, [r0]
     ac4:	mov	r2, fp
     ac8:	ldr	r1, [pc, #-248]	; 9d8 <export_schema.isra.8+0x4e8>
     acc:	mov	r0, r9
     ad0:	bl	0 <flatcc_builder_check_required>
     ad4:	cmp	r0, #0
     ad8:	beq	1134 <export_schema.isra.8+0xc44>
     adc:	mov	r0, r9
     ae0:	bl	0 <flatcc_builder_end_table>
     ae4:	subs	r6, r0, #0
     ae8:	beq	b00 <export_schema.isra.8+0x610>
     aec:	mov	r1, #1
     af0:	mov	r0, r9
     af4:	bl	0 <flatcc_builder_table_add_offset>
     af8:	cmp	r0, #0
     afc:	strne	r6, [r0]
     b00:	ldrh	r6, [r4, #96]	; 0x60
     b04:	add	r3, r6, #1
     b08:	lsl	r3, r3, #1
     b0c:	uxth	r3, r3
     b10:	cmp	r3, #0
     b14:	str	r3, [sp, #8]
     b18:	bne	1040 <export_schema.isra.8+0xb50>
     b1c:	sub	r6, r6, #1
     b20:	uxth	r6, r6
     b24:	cmp	r6, #0
     b28:	bne	ff8 <export_schema.isra.8+0xb08>
     b2c:	cmp	r8, #0
     b30:	bne	101c <export_schema.isra.8+0xb2c>
     b34:	mov	r2, #2
     b38:	ldr	r1, [pc, #-356]	; 9dc <export_schema.isra.8+0x4ec>
     b3c:	mov	r0, r9
     b40:	bl	0 <flatcc_builder_check_required>
     b44:	cmp	r0, #0
     b48:	beq	1104 <export_schema.isra.8+0xc14>
     b4c:	mov	r0, r9
     b50:	bl	0 <flatcc_builder_end_table>
     b54:	subs	r1, r0, #0
     b58:	beq	738 <export_schema.isra.8+0x248>
     b5c:	mov	r0, r9
     b60:	bl	0 <flatcc_builder_offset_vector_push>
     b64:	b	738 <export_schema.isra.8+0x248>
     b68:	mov	r0, r9
     b6c:	bl	0 <flatcc_builder_end_offset_vector>
     b70:	subs	r4, r0, #0
     b74:	beq	b8c <export_schema.isra.8+0x69c>
     b78:	mov	r1, #1
     b7c:	mov	r0, r9
     b80:	bl	0 <flatcc_builder_table_add_offset>
     b84:	cmp	r0, #0
     b88:	strne	r4, [r0]
     b8c:	ldr	r3, [sp]
     b90:	ldrh	r3, [r3, #8]
     b94:	cmp	r3, #1
     b98:	beq	fc4 <export_schema.isra.8+0xad4>
     b9c:	ldr	r3, [sp]
     ba0:	ldrh	r4, [r3, #104]	; 0x68
     ba4:	cmp	r4, #0
     ba8:	beq	bc8 <export_schema.isra.8+0x6d8>
     bac:	mov	r3, #4
     bb0:	mov	r2, r3
     bb4:	mov	r1, #3
     bb8:	mov	r0, r9
     bbc:	bl	0 <flatcc_builder_table_add>
     bc0:	cmp	r0, #0
     bc4:	strne	r4, [r0]
     bc8:	mov	r2, #2
     bcc:	ldr	r1, [pc, #-500]	; 9e0 <export_schema.isra.8+0x4f0>
     bd0:	mov	r0, r9
     bd4:	bl	0 <flatcc_builder_check_required>
     bd8:	cmp	r0, #0
     bdc:	beq	1170 <export_schema.isra.8+0xc80>
     be0:	mov	r0, r9
     be4:	bl	0 <flatcc_builder_end_table>
     be8:	ldr	r3, [sp, #24]
     bec:	ldr	r2, [sp, #36]	; 0x24
     bf0:	add	r3, r3, #1
     bf4:	str	r3, [sp, #24]
     bf8:	cmp	r2, r3
     bfc:	ldr	r3, [sp, #28]
     c00:	add	r3, r3, #8
     c04:	str	r3, [sp, #28]
     c08:	ldr	r3, [sp, #32]
     c0c:	str	r0, [r3, #4]!
     c10:	str	r3, [sp, #32]
     c14:	bne	6a0 <export_schema.isra.8+0x1b0>
     c18:	ldr	r2, [sp, #36]	; 0x24
     c1c:	ldr	r1, [sp, #20]
     c20:	mov	r0, r9
     c24:	bl	0 <flatcc_builder_create_offset_vector>
     c28:	subs	r4, r0, #0
     c2c:	beq	c44 <export_schema.isra.8+0x754>
     c30:	mov	r1, #0
     c34:	mov	r0, r9
     c38:	bl	0 <flatcc_builder_table_add_offset>
     c3c:	cmp	r0, #0
     c40:	strne	r4, [r0]
     c44:	ldr	r3, [sp, #60]	; 0x3c
     c48:	mov	r0, r9
     c4c:	mov	r4, r3
     c50:	str	r3, [sp, #24]
     c54:	ldr	r3, [sp, #72]	; 0x48
     c58:	str	r3, [sp, #8]
     c5c:	bl	0 <flatcc_builder_start_offset_vector>
     c60:	cmp	r4, #0
     c64:	ble	eec <export_schema.isra.8+0x9fc>
     c68:	mov	r3, #0
     c6c:	ldr	sl, [pc, #-656]	; 9e4 <export_schema.isra.8+0x4f4>
     c70:	str	r3, [sp]
     c74:	mov	fp, #3
     c78:	ldr	r3, [sp, #8]
     c7c:	str	r3, [sp, #4]
     c80:	ldr	r2, [sp]
     c84:	ldr	r3, [sp, #8]
     c88:	mov	r1, #4
     c8c:	mov	r0, r9
     c90:	ldr	r3, [r3, r2, lsl #3]
     c94:	str	r3, [sp, #16]
     c98:	ldrh	r8, [r3, #8]
     c9c:	bl	0 <flatcc_builder_start_table>
     ca0:	ldr	r3, [sp, #4]
     ca4:	mov	r0, r9
     ca8:	ldr	r1, [r3, #4]
     cac:	bl	0 <flatcc_builder_create_string_str>
     cb0:	subs	r4, r0, #0
     cb4:	beq	ccc <export_schema.isra.8+0x7dc>
     cb8:	mov	r1, #0
     cbc:	mov	r0, r9
     cc0:	bl	0 <flatcc_builder_table_add_offset>
     cc4:	cmp	r0, #0
     cc8:	strne	r4, [r0]
     ccc:	mov	r0, r9
     cd0:	bl	0 <flatcc_builder_start_offset_vector>
     cd4:	ldr	r3, [sp, #16]
     cd8:	ldr	r4, [r3, #20]
     cdc:	cmp	r4, #0
     ce0:	movne	r5, #1
     ce4:	bne	d28 <export_schema.isra.8+0x838>
     ce8:	b	e30 <export_schema.isra.8+0x940>
     cec:	mov	r2, r5
     cf0:	mov	r1, sl
     cf4:	mov	r0, r9
     cf8:	bl	0 <flatcc_builder_check_required>
     cfc:	cmp	r0, #0
     d00:	beq	1118 <export_schema.isra.8+0xc28>
     d04:	mov	r0, r9
     d08:	bl	0 <flatcc_builder_end_table>
     d0c:	subs	r1, r0, #0
     d10:	beq	d1c <export_schema.isra.8+0x82c>
     d14:	mov	r0, r9
     d18:	bl	0 <flatcc_builder_offset_vector_push>
     d1c:	ldr	r4, [r4]
     d20:	cmp	r4, #0
     d24:	beq	e30 <export_schema.isra.8+0x940>
     d28:	cmp	r8, #4
     d2c:	mov	r1, fp
     d30:	mov	r0, r9
     d34:	beq	d98 <export_schema.isra.8+0x8a8>
     d38:	bl	0 <flatcc_builder_start_table>
     d3c:	ldr	r3, [r4, #4]
     d40:	mov	r0, r9
     d44:	ldm	r3, {r1, r2}
     d48:	bl	0 <flatcc_builder_create_string>
     d4c:	subs	r6, r0, #0
     d50:	beq	d6c <export_schema.isra.8+0x87c>
     d54:	mov	r1, #0
     d58:	mov	r0, r9
     d5c:	bl	0 <flatcc_builder_table_add_offset>
     d60:	cmp	r0, #0
     d64:	beq	d6c <export_schema.isra.8+0x87c>
     d68:	str	r6, [r0]
     d6c:	ldrd	r6, [r4, #48]	; 0x30
     d70:	orrs	r3, r6, r7
     d74:	beq	cec <export_schema.isra.8+0x7fc>
     d78:	mov	r3, #8
     d7c:	mov	r2, r3
     d80:	mov	r1, r5
     d84:	mov	r0, r9
     d88:	bl	0 <flatcc_builder_table_add>
     d8c:	cmp	r0, #0
     d90:	strdne	r6, [r0]
     d94:	b	cec <export_schema.isra.8+0x7fc>
     d98:	bl	0 <flatcc_builder_start_table>
     d9c:	ldr	r3, [r4, #4]
     da0:	mov	r0, r9
     da4:	ldm	r3, {r1, r2}
     da8:	bl	0 <flatcc_builder_create_string>
     dac:	subs	r6, r0, #0
     db0:	beq	dc8 <export_schema.isra.8+0x8d8>
     db4:	mov	r1, #0
     db8:	mov	r0, r9
     dbc:	bl	0 <flatcc_builder_table_add_offset>
     dc0:	cmp	r0, #0
     dc4:	strne	r6, [r0]
     dc8:	ldr	r3, [sp, #20]
     dcc:	cmp	r3, #0
     dd0:	beq	d6c <export_schema.isra.8+0x87c>
     dd4:	ldrh	r3, [r4, #24]
     dd8:	cmp	r3, #14
     ddc:	bne	d6c <export_schema.isra.8+0x87c>
     de0:	ldr	r3, [r4, #16]
     de4:	ldr	r2, [sp, #20]
     de8:	ldr	r3, [r3, #124]	; 0x7c
     dec:	ldr	r6, [r2, r3, lsl #2]
     df0:	cmp	r6, #0
     df4:	beq	d6c <export_schema.isra.8+0x87c>
     df8:	mov	r1, #2
     dfc:	mov	r0, r9
     e00:	bl	0 <flatcc_builder_table_add_offset>
     e04:	cmp	r0, #0
     e08:	bne	d68 <export_schema.isra.8+0x878>
     e0c:	b	d6c <export_schema.isra.8+0x87c>
     e10:	mov	r3, #2
     e14:	mov	r2, r3
     e18:	mov	r1, #3
     e1c:	mov	r0, r9
     e20:	bl	0 <flatcc_builder_table_add>
     e24:	cmp	r0, #0
     e28:	strhne	r5, [r0]
     e2c:	b	7ac <export_schema.isra.8+0x2bc>
     e30:	mov	r0, r9
     e34:	bl	0 <flatcc_builder_end_offset_vector>
     e38:	subs	r4, r0, #0
     e3c:	beq	e54 <export_schema.isra.8+0x964>
     e40:	mov	r1, #1
     e44:	mov	r0, r9
     e48:	bl	0 <flatcc_builder_table_add_offset>
     e4c:	cmp	r0, #0
     e50:	strne	r4, [r0]
     e54:	cmp	r8, #4
     e58:	bne	e7c <export_schema.isra.8+0x98c>
     e5c:	mov	r3, #1
     e60:	mov	r2, r3
     e64:	mov	r1, #2
     e68:	mov	r0, r9
     e6c:	bl	0 <flatcc_builder_table_add>
     e70:	cmp	r0, #0
     e74:	movne	r3, #1
     e78:	strbne	r3, [r0]
     e7c:	ldr	r3, [sp, #16]
     e80:	mov	r0, r9
     e84:	ldrh	r2, [r3, #48]	; 0x30
     e88:	ldr	r1, [r3, #40]	; 0x28
     e8c:	bl	2a8 <export_type.isra.6>
     e90:	subs	r4, r0, #0
     e94:	bne	fac <export_schema.isra.8+0xabc>
     e98:	mov	r2, fp
     e9c:	ldr	r1, [pc, #-1212]	; 9e8 <export_schema.isra.8+0x4f8>
     ea0:	mov	r0, r9
     ea4:	bl	0 <flatcc_builder_check_required>
     ea8:	cmp	r0, #0
     eac:	beq	115c <export_schema.isra.8+0xc6c>
     eb0:	mov	r0, r9
     eb4:	bl	0 <flatcc_builder_end_table>
     eb8:	subs	r1, r0, #0
     ebc:	beq	ec8 <export_schema.isra.8+0x9d8>
     ec0:	mov	r0, r9
     ec4:	bl	0 <flatcc_builder_offset_vector_push>
     ec8:	ldr	r3, [sp]
     ecc:	ldr	r2, [sp, #24]
     ed0:	add	r3, r3, #1
     ed4:	str	r3, [sp]
     ed8:	cmp	r2, r3
     edc:	ldr	r3, [sp, #4]
     ee0:	add	r3, r3, #8
     ee4:	str	r3, [sp, #4]
     ee8:	bne	c80 <export_schema.isra.8+0x790>
     eec:	mov	r0, r9
     ef0:	bl	0 <flatcc_builder_end_offset_vector>
     ef4:	subs	r4, r0, #0
     ef8:	beq	f10 <export_schema.isra.8+0xa20>
     efc:	mov	r1, #1
     f00:	mov	r0, r9
     f04:	bl	0 <flatcc_builder_table_add_offset>
     f08:	cmp	r0, #0
     f0c:	strne	r4, [r0]
     f10:	ldr	r3, [sp, #44]	; 0x2c
     f14:	ldr	r3, [r3, #52]	; 0x34
     f18:	cmp	r3, #0
     f1c:	beq	f54 <export_schema.isra.8+0xa64>
     f20:	ldrh	r2, [r3, #8]
     f24:	cmp	r2, #0
     f28:	bne	f54 <export_schema.isra.8+0xa64>
     f2c:	ldr	r3, [r3, #124]	; 0x7c
     f30:	ldr	r2, [sp, #20]
     f34:	ldr	r4, [r2, r3, lsl #2]
     f38:	cmp	r4, #0
     f3c:	beq	f54 <export_schema.isra.8+0xa64>
     f40:	mov	r1, #4
     f44:	mov	r0, r9
     f48:	bl	0 <flatcc_builder_table_add_offset>
     f4c:	cmp	r0, #0
     f50:	strne	r4, [r0]
     f54:	mov	r2, #2
     f58:	ldr	r1, [pc, #-1396]	; 9ec <export_schema.isra.8+0x4fc>
     f5c:	mov	r0, r9
     f60:	bl	0 <flatcc_builder_check_required>
     f64:	cmp	r0, #0
     f68:	beq	1148 <export_schema.isra.8+0xc58>
     f6c:	mov	r0, r9
     f70:	bl	0 <flatcc_builder_end_table>
     f74:	mov	r1, r0
     f78:	mov	r0, r9
     f7c:	bl	0 <flatcc_builder_end_buffer>
     f80:	add	r0, sp, #52	; 0x34
     f84:	bl	0 <clear_catalog>
     f88:	ldr	r3, [sp, #20]
     f8c:	cmp	r3, #0
     f90:	beq	f9c <export_schema.isra.8+0xaac>
     f94:	mov	r0, r3
     f98:	bl	0 <free>
     f9c:	mov	r0, #0
     fa0:	add	sp, sp, #100	; 0x64
     fa4:	vpop	{d8-d9}
     fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fac:	mov	r1, fp
     fb0:	mov	r0, r9
     fb4:	bl	0 <flatcc_builder_table_add_offset>
     fb8:	cmp	r0, #0
     fbc:	strne	r4, [r0]
     fc0:	b	e98 <export_schema.isra.8+0x9a8>
     fc4:	ldr	r3, [sp]
     fc8:	ldr	r4, [r3, #112]	; 0x70
     fcc:	cmp	r4, #0
     fd0:	bne	1068 <export_schema.isra.8+0xb78>
     fd4:	mov	r3, #1
     fd8:	mov	r2, r3
     fdc:	mov	r1, #2
     fe0:	mov	r0, r9
     fe4:	bl	0 <flatcc_builder_table_add>
     fe8:	cmp	r0, #0
     fec:	movne	r3, #1
     ff0:	strbne	r3, [r0]
     ff4:	b	b9c <export_schema.isra.8+0x6ac>
     ff8:	mov	r3, #2
     ffc:	mov	r2, r3
    1000:	mov	r1, r3
    1004:	mov	r0, r9
    1008:	bl	0 <flatcc_builder_table_add>
    100c:	cmp	r0, #0
    1010:	strhne	r6, [r0]
    1014:	cmp	r8, #0
    1018:	beq	b34 <export_schema.isra.8+0x644>
    101c:	mov	r3, #1
    1020:	mov	r2, r3
    1024:	mov	r1, #6
    1028:	mov	r0, r9
    102c:	bl	0 <flatcc_builder_table_add>
    1030:	cmp	r0, #0
    1034:	ldrbne	r3, [sp, #16]
    1038:	strbne	r3, [r0]
    103c:	b	b34 <export_schema.isra.8+0x644>
    1040:	mov	r3, #2
    1044:	mov	r2, r3
    1048:	mov	r1, #3
    104c:	mov	r0, r9
    1050:	bl	0 <flatcc_builder_table_add>
    1054:	ldrh	r6, [r4, #96]	; 0x60
    1058:	cmp	r0, #0
    105c:	ldrhne	r3, [sp, #8]
    1060:	strhne	r3, [r0]
    1064:	b	b1c <export_schema.isra.8+0x62c>
    1068:	mov	r3, #4
    106c:	mov	r2, r3
    1070:	mov	r1, r3
    1074:	mov	r0, r9
    1078:	bl	0 <flatcc_builder_table_add>
    107c:	cmp	r0, #0
    1080:	strne	r4, [r0]
    1084:	b	fd4 <export_schema.isra.8+0xae4>
    1088:	str	r4, [sp, #20]
    108c:	b	618 <export_schema.isra.8+0x128>
    1090:	add	r0, sp, #52	; 0x34
    1094:	bl	0 <clear_catalog>
    1098:	mvn	r0, #0
    109c:	b	fa0 <export_schema.isra.8+0xab0>
    10a0:	ldr	r3, [sp, #44]	; 0x2c
    10a4:	mov	r0, r9
    10a8:	ldr	r2, [r3, #28]
    10ac:	ldr	r1, [r3, #24]
    10b0:	bl	0 <flatcc_builder_create_string>
    10b4:	subs	r4, r0, #0
    10b8:	beq	668 <export_schema.isra.8+0x178>
    10bc:	mov	r1, #3
    10c0:	mov	r0, r9
    10c4:	bl	0 <flatcc_builder_table_add_offset>
    10c8:	cmp	r0, #0
    10cc:	strne	r4, [r0]
    10d0:	b	668 <export_schema.isra.8+0x178>
    10d4:	ldr	r2, [r3, #12]
    10d8:	ldr	r1, [r3, #8]
    10dc:	mov	r0, r9
    10e0:	bl	0 <flatcc_builder_create_string>
    10e4:	subs	r5, r0, #0
    10e8:	beq	658 <export_schema.isra.8+0x168>
    10ec:	mov	r1, r4
    10f0:	mov	r0, r9
    10f4:	bl	0 <flatcc_builder_table_add_offset>
    10f8:	cmp	r0, #0
    10fc:	strne	r5, [r0]
    1100:	b	658 <export_schema.isra.8+0x168>
    1104:	ldr	r3, [pc, #-1820]	; 9f0 <export_schema.isra.8+0x500>
    1108:	mov	r2, #29
    110c:	ldr	r1, [pc, #-1784]	; a1c <export_schema.isra.8+0x52c>
    1110:	ldr	r0, [pc, #-1828]	; 9f4 <export_schema.isra.8+0x504>
    1114:	bl	0 <__assert_fail>
    1118:	ldr	r3, [pc, #-1832]	; 9f8 <export_schema.isra.8+0x508>
    111c:	mov	r2, #25
    1120:	ldr	r1, [pc, #-1804]	; a1c <export_schema.isra.8+0x52c>
    1124:	ldr	r0, [pc, #-1840]	; 9fc <export_schema.isra.8+0x50c>
    1128:	bl	0 <__assert_fail>
    112c:	vmov.f64	d8, d9
    1130:	b	8fc <export_schema.isra.8+0x40c>
    1134:	ldr	r3, [pc, #-1852]	; a00 <export_schema.isra.8+0x510>
    1138:	mov	r2, #23
    113c:	ldr	r1, [pc, #-1832]	; a1c <export_schema.isra.8+0x52c>
    1140:	ldr	r0, [pc, #-1860]	; a04 <export_schema.isra.8+0x514>
    1144:	bl	0 <__assert_fail>
    1148:	ldr	r3, [pc, #-1864]	; a08 <export_schema.isra.8+0x518>
    114c:	mov	r2, #33	; 0x21
    1150:	ldr	r1, [pc, #-1852]	; a1c <export_schema.isra.8+0x52c>
    1154:	ldr	r0, [pc, #-1872]	; a0c <export_schema.isra.8+0x51c>
    1158:	bl	0 <__assert_fail>
    115c:	ldr	r3, [pc, #-1876]	; a10 <export_schema.isra.8+0x520>
    1160:	mov	r2, #27
    1164:	ldr	r1, [pc, #-1872]	; a1c <export_schema.isra.8+0x52c>
    1168:	ldr	r0, [pc, #-1884]	; a14 <export_schema.isra.8+0x524>
    116c:	bl	0 <__assert_fail>
    1170:	ldr	r3, [pc, #-1888]	; a18 <export_schema.isra.8+0x528>
    1174:	mov	r2, #31
    1178:	ldr	r1, [pc, #-1892]	; a1c <export_schema.isra.8+0x52c>
    117c:	ldr	r0, [pc, #-1892]	; a20 <export_schema.isra.8+0x530>
    1180:	bl	0 <__assert_fail>

00001184 <sort_fields>:
    1184:	cmp	r0, #0
    1188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    118c:	sub	sp, sp, #36	; 0x24
    1190:	beq	11a4 <sort_fields+0x20>
    1194:	ldr	r3, [pc, #1664]	; 181c <sort_fields+0x698>
    1198:	ldr	r2, [r0, #4]
    119c:	cmp	r2, r3
    11a0:	beq	11b8 <sort_fields+0x34>
    11a4:	ldr	r3, [pc, #1652]	; 1820 <sort_fields+0x69c>
    11a8:	mov	r2, #237	; 0xed
    11ac:	ldr	r1, [pc, #1648]	; 1824 <sort_fields+0x6a0>
    11b0:	ldr	r0, [pc, #1648]	; 1828 <sort_fields+0x6a4>
    11b4:	bl	0 <__assert_fail>
    11b8:	ldr	r3, [r0]
    11bc:	adds	r2, r0, r3
    11c0:	beq	11a4 <sort_fields+0x20>
    11c4:	ldr	r3, [r0, r3]
    11c8:	sub	r3, r2, r3
    11cc:	ldrh	r1, [r3]
    11d0:	cmp	r1, #5
    11d4:	bhi	11ec <sort_fields+0x68>
    11d8:	ldr	r3, [pc, #1600]	; 1820 <sort_fields+0x69c>
    11dc:	mov	r2, #237	; 0xed
    11e0:	ldr	r1, [pc, #1596]	; 1824 <sort_fields+0x6a0>
    11e4:	ldr	r0, [pc, #1600]	; 182c <sort_fields+0x6a8>
    11e8:	bl	0 <__assert_fail>
    11ec:	ldrh	r3, [r3, #4]
    11f0:	cmp	r3, #0
    11f4:	beq	11d8 <sort_fields+0x54>
    11f8:	ldr	r1, [r2, r3]
    11fc:	add	r2, r2, r3
    1200:	add	r1, r1, #4
    1204:	adds	r3, r2, r1
    1208:	mov	r0, r3
    120c:	str	r3, [sp, #20]
    1210:	beq	158c <sort_fields+0x408>
    1214:	ldr	r3, [r3, #-4]
    1218:	cmp	r3, #0
    121c:	beq	158c <sort_fields+0x408>
    1220:	ldr	r2, [r2, r1]
    1224:	adds	r1, r0, r2
    1228:	beq	1808 <sort_fields+0x684>
    122c:	ldr	r0, [sp, #20]
    1230:	ldr	r2, [r0, r2]
    1234:	sub	r2, r1, r2
    1238:	ldrh	r0, [r2]
    123c:	cmp	r0, #7
    1240:	bls	1578 <sort_fields+0x3f4>
    1244:	ldrh	r2, [r2, #6]
    1248:	cmp	r2, #0
    124c:	beq	1578 <sort_fields+0x3f4>
    1250:	mov	r0, #0
    1254:	str	r0, [sp, #16]
    1258:	ldr	r0, [sp, #20]
    125c:	add	r0, r0, #4
    1260:	str	r0, [sp, #28]
    1264:	ldr	r0, [r1, r2]
    1268:	add	r6, r1, r2
    126c:	add	r2, r0, #4
    1270:	adds	r6, r6, r2
    1274:	beq	1528 <sort_fields+0x3a4>
    1278:	ldr	r2, [r6, #-4]
    127c:	cmp	r2, #0
    1280:	str	r2, [sp, #24]
    1284:	beq	1528 <sort_fields+0x3a4>
    1288:	lsr	r3, r2, #1
    128c:	str	r3, [sp, #12]
    1290:	sub	r2, r2, #1
    1294:	lsl	r3, r3, #1
    1298:	str	r2, [sp]
    129c:	str	r3, [sp, #8]
    12a0:	b	13a0 <sort_fields+0x21c>
    12a4:	ldr	r8, [r6, #-4]
    12a8:	mov	r5, r9
    12ac:	lsl	fp, r4, #2
    12b0:	cmp	r8, r4
    12b4:	add	r2, r6, fp
    12b8:	bls	17f4 <sort_fields+0x670>
    12bc:	ldr	r7, [r6, r4, lsl #2]
    12c0:	adds	r3, r2, r7
    12c4:	beq	17f0 <sort_fields+0x66c>
    12c8:	ldr	r2, [r2, r7]
    12cc:	sub	r2, r3, r2
    12d0:	ldrh	r1, [r2]
    12d4:	cmp	r1, #5
    12d8:	bls	149c <sort_fields+0x318>
    12dc:	ldrh	r0, [r2, #4]
    12e0:	cmp	r0, #0
    12e4:	beq	149c <sort_fields+0x318>
    12e8:	ldr	r2, [r3, r0]
    12ec:	cmp	r5, r8
    12f0:	add	r2, r2, #4
    12f4:	add	r0, r3, r0
    12f8:	lsl	r3, r5, #2
    12fc:	add	r0, r0, r2
    1300:	add	r2, r6, r3
    1304:	bcs	17f4 <sort_fields+0x670>
    1308:	ldr	r8, [r6, r5, lsl #2]
    130c:	adds	r1, r2, r8
    1310:	beq	17f0 <sort_fields+0x66c>
    1314:	ldr	r2, [r2, r8]
    1318:	sub	r2, r1, r2
    131c:	ldrh	ip, [r2]
    1320:	cmp	ip, #5
    1324:	bls	149c <sort_fields+0x318>
    1328:	ldrh	ip, [r2, #4]
    132c:	cmp	ip, #0
    1330:	beq	149c <sort_fields+0x318>
    1334:	ldr	r2, [r1, ip]
    1338:	add	r1, r1, ip
    133c:	add	r2, r2, #4
    1340:	adds	r1, r1, r2
    1344:	moveq	sl, #0
    1348:	ldrne	sl, [r1, #-4]
    134c:	cmp	r0, #0
    1350:	beq	14f4 <sort_fields+0x370>
    1354:	ldr	r9, [r0, #-4]
    1358:	str	r3, [sp, #4]
    135c:	cmp	sl, r9
    1360:	movcc	r2, sl
    1364:	movcs	r2, r9
    1368:	bl	0 <strncmp>
    136c:	ldr	r3, [sp, #4]
    1370:	cmp	r0, #0
    1374:	bne	14b0 <sort_fields+0x32c>
    1378:	cmp	sl, r9
    137c:	bhi	14b4 <sort_fields+0x330>
    1380:	ldr	r3, [sp, #12]
    1384:	sub	r3, r3, #1
    1388:	str	r3, [sp, #12]
    138c:	cmn	r3, #1
    1390:	ldr	r3, [sp, #8]
    1394:	sub	r3, r3, #2
    1398:	str	r3, [sp, #8]
    139c:	beq	1594 <sort_fields+0x410>
    13a0:	ldr	r3, [sp]
    13a4:	ldr	r2, [sp, #8]
    13a8:	cmp	r3, r2
    13ac:	bcc	1380 <sort_fields+0x1fc>
    13b0:	ldr	r4, [sp, #12]
    13b4:	ldr	r9, [sp, #8]
    13b8:	ldr	r3, [sp]
    13bc:	cmp	r3, r9
    13c0:	bls	12a4 <sort_fields+0x120>
    13c4:	ldr	r8, [r6, #-4]
    13c8:	lsl	r3, r9, #2
    13cc:	cmp	r8, r9
    13d0:	add	r1, r6, r3
    13d4:	bls	17f4 <sort_fields+0x670>
    13d8:	ldr	r0, [r6, r9, lsl #2]
    13dc:	adds	r2, r1, r0
    13e0:	beq	17f0 <sort_fields+0x66c>
    13e4:	ldr	r1, [r1, r0]
    13e8:	sub	r1, r2, r1
    13ec:	ldrh	r0, [r1]
    13f0:	cmp	r0, #5
    13f4:	bls	149c <sort_fields+0x318>
    13f8:	ldrh	r1, [r1, #4]
    13fc:	cmp	r1, #0
    1400:	beq	149c <sort_fields+0x318>
    1404:	ldr	r0, [r2, r1]
    1408:	add	r5, r9, #1
    140c:	add	r2, r2, r1
    1410:	add	r3, r3, #4
    1414:	add	r0, r0, #4
    1418:	cmp	r8, r5
    141c:	add	r0, r2, r0
    1420:	add	r2, r6, r3
    1424:	bls	17f4 <sort_fields+0x670>
    1428:	ldr	r3, [r6, r3]
    142c:	adds	r1, r2, r3
    1430:	beq	17f0 <sort_fields+0x66c>
    1434:	ldr	r3, [r2, r3]
    1438:	sub	r3, r1, r3
    143c:	ldrh	r2, [r3]
    1440:	cmp	r2, #5
    1444:	bls	149c <sort_fields+0x318>
    1448:	ldrh	r2, [r3, #4]
    144c:	cmp	r2, #0
    1450:	beq	149c <sort_fields+0x318>
    1454:	ldr	r3, [r1, r2]
    1458:	add	r1, r1, r2
    145c:	add	r3, r3, #4
    1460:	adds	r1, r1, r3
    1464:	beq	1494 <sort_fields+0x310>
    1468:	cmp	r0, #0
    146c:	ldr	sl, [r1, #-4]
    1470:	beq	14e4 <sort_fields+0x360>
    1474:	ldr	r7, [r0, #-4]
    1478:	cmp	sl, r7
    147c:	movcc	r2, sl
    1480:	movcs	r2, r7
    1484:	bl	0 <strncmp>
    1488:	cmp	r0, #0
    148c:	beq	14e8 <sort_fields+0x364>
    1490:	blt	12ac <sort_fields+0x128>
    1494:	mov	r5, r9
    1498:	b	12ac <sort_fields+0x128>
    149c:	ldr	r3, [pc, #908]	; 1830 <sort_fields+0x6ac>
    14a0:	mov	r2, #195	; 0xc3
    14a4:	ldr	r1, [pc, #888]	; 1824 <sort_fields+0x6a0>
    14a8:	ldr	r0, [pc, #892]	; 182c <sort_fields+0x6a8>
    14ac:	bl	0 <__assert_fail>
    14b0:	bge	1380 <sort_fields+0x1fc>
    14b4:	sub	r4, r4, r5
    14b8:	ldr	r2, [sp]
    14bc:	lsl	r4, r4, #2
    14c0:	lsl	r9, r5, #1
    14c4:	sub	r8, r8, r4
    14c8:	add	r7, r7, r4
    14cc:	cmp	r2, r9
    14d0:	str	r8, [r6, fp]
    14d4:	mov	r4, r5
    14d8:	str	r7, [r6, r3]
    14dc:	bcs	13b8 <sort_fields+0x234>
    14e0:	b	1380 <sort_fields+0x1fc>
    14e4:	mov	r7, #0
    14e8:	cmp	sl, r7
    14ec:	movls	r5, r9
    14f0:	b	12ac <sort_fields+0x128>
    14f4:	mov	r9, #0
    14f8:	b	1378 <sort_fields+0x1f4>
    14fc:	ldr	r3, [sp, #8]
    1500:	cmp	fp, r3
    1504:	bhi	1790 <sort_fields+0x60c>
    1508:	ldr	r3, [sp]
    150c:	cmp	r3, #0
    1510:	ldr	r3, [sp, #4]
    1514:	add	r3, r3, #4
    1518:	str	r3, [sp, #4]
    151c:	bne	15bc <sort_fields+0x438>
    1520:	ldr	r3, [sp, #20]
    1524:	ldr	r3, [r3, #-4]
    1528:	ldr	r2, [sp, #16]
    152c:	add	r2, r2, #1
    1530:	cmp	r2, r3
    1534:	str	r2, [sp, #16]
    1538:	bcs	158c <sort_fields+0x408>
    153c:	ldr	r1, [sp, #28]
    1540:	mov	r2, r1
    1544:	add	r1, r1, #4
    1548:	ldr	r0, [r2]
    154c:	str	r1, [sp, #28]
    1550:	adds	r1, r2, r0
    1554:	beq	1808 <sort_fields+0x684>
    1558:	ldr	r2, [r2, r0]
    155c:	sub	r2, r1, r2
    1560:	ldrh	r0, [r2]
    1564:	cmp	r0, #7
    1568:	bls	1578 <sort_fields+0x3f4>
    156c:	ldrh	r2, [r2, #6]
    1570:	cmp	r2, #0
    1574:	bne	1264 <sort_fields+0xe0>
    1578:	ldr	r3, [pc, #692]	; 1834 <sort_fields+0x6b0>
    157c:	mov	r2, #224	; 0xe0
    1580:	ldr	r1, [pc, #668]	; 1824 <sort_fields+0x6a0>
    1584:	ldr	r0, [pc, #672]	; 182c <sort_fields+0x6a8>
    1588:	bl	0 <__assert_fail>
    158c:	add	sp, sp, #36	; 0x24
    1590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1594:	ldr	r3, [sp]
    1598:	cmp	r3, #0
    159c:	beq	1520 <sort_fields+0x39c>
    15a0:	ldr	r2, [sp, #24]
    15a4:	rsb	r3, r2, r2, lsl #30
    15a8:	add	r2, r6, r2, lsl #2
    15ac:	lsl	r3, r3, #2
    15b0:	add	r3, r3, #4
    15b4:	str	r2, [sp, #12]
    15b8:	str	r3, [sp, #4]
    15bc:	ldr	r1, [sp, #12]
    15c0:	ldr	r0, [sp]
    15c4:	ldr	r3, [r6]
    15c8:	sub	r0, r0, #1
    15cc:	ldr	r2, [r1, #-4]
    15d0:	str	r0, [sp]
    15d4:	ldr	r0, [sp, #4]
    15d8:	mov	r5, #0
    15dc:	sub	r2, r2, r0
    15e0:	str	r2, [r6]
    15e4:	mov	r2, r1
    15e8:	add	r3, r0, r3
    15ec:	str	r3, [r2, #-4]!
    15f0:	mov	fp, r5
    15f4:	str	r2, [sp, #12]
    15f8:	b	17bc <sort_fields+0x638>
    15fc:	lsl	r3, fp, #2
    1600:	cmp	r8, fp
    1604:	add	r0, r6, r3
    1608:	bls	17f4 <sort_fields+0x670>
    160c:	ldr	r1, [r6, fp, lsl #2]
    1610:	adds	r2, r0, r1
    1614:	beq	17f0 <sort_fields+0x66c>
    1618:	ldr	r1, [r0, r1]
    161c:	sub	r1, r2, r1
    1620:	ldrh	r0, [r1]
    1624:	cmp	r0, #5
    1628:	bls	149c <sort_fields+0x318>
    162c:	ldrh	r1, [r1, #4]
    1630:	cmp	r1, #0
    1634:	beq	149c <sort_fields+0x318>
    1638:	ldr	r0, [r2, r1]
    163c:	add	r4, fp, #1
    1640:	add	r2, r2, r1
    1644:	add	r3, r3, #4
    1648:	add	r0, r0, #4
    164c:	cmp	r8, r4
    1650:	add	r0, r2, r0
    1654:	add	r2, r6, r3
    1658:	bls	17f4 <sort_fields+0x670>
    165c:	ldr	r3, [r6, r3]
    1660:	adds	r1, r2, r3
    1664:	beq	17f0 <sort_fields+0x66c>
    1668:	ldr	r3, [r2, r3]
    166c:	sub	r3, r1, r3
    1670:	ldrh	r2, [r3]
    1674:	cmp	r2, #5
    1678:	bls	149c <sort_fields+0x318>
    167c:	ldrh	r2, [r3, #4]
    1680:	cmp	r2, #0
    1684:	beq	149c <sort_fields+0x318>
    1688:	ldr	r3, [r1, r2]
    168c:	add	r1, r1, r2
    1690:	add	r3, r3, #4
    1694:	adds	r1, r1, r3
    1698:	beq	17cc <sort_fields+0x648>
    169c:	cmp	r0, #0
    16a0:	ldr	r7, [r1, #-4]
    16a4:	beq	17d4 <sort_fields+0x650>
    16a8:	ldr	r9, [r0, #-4]
    16ac:	cmp	r7, r9
    16b0:	movcc	r2, r7
    16b4:	movcs	r2, r9
    16b8:	bl	0 <strncmp>
    16bc:	cmp	r0, #0
    16c0:	beq	17d8 <sort_fields+0x654>
    16c4:	bge	17cc <sort_fields+0x648>
    16c8:	cmp	r8, r5
    16cc:	add	r9, r6, r5, lsl #2
    16d0:	bls	17f4 <sort_fields+0x670>
    16d4:	ldr	r7, [r9]
    16d8:	adds	r3, r9, r7
    16dc:	beq	17f0 <sort_fields+0x66c>
    16e0:	ldr	r2, [r9, r7]
    16e4:	sub	r2, r3, r2
    16e8:	ldrh	r1, [r2]
    16ec:	cmp	r1, #5
    16f0:	bls	149c <sort_fields+0x318>
    16f4:	ldrh	r2, [r2, #4]
    16f8:	cmp	r2, #0
    16fc:	beq	149c <sort_fields+0x318>
    1700:	ldr	r0, [r3, r2]
    1704:	lsl	sl, r4, #2
    1708:	add	r3, r3, r2
    170c:	add	r0, r0, #4
    1710:	cmp	r8, r4
    1714:	add	r0, r3, r0
    1718:	add	r3, r6, sl
    171c:	bls	17f4 <sort_fields+0x670>
    1720:	ldr	r8, [r6, r4, lsl #2]
    1724:	adds	r1, r3, r8
    1728:	beq	17f0 <sort_fields+0x66c>
    172c:	ldr	r3, [r3, r8]
    1730:	sub	r3, r1, r3
    1734:	ldrh	r2, [r3]
    1738:	cmp	r2, #5
    173c:	bls	149c <sort_fields+0x318>
    1740:	ldrh	r2, [r3, #4]
    1744:	cmp	r2, #0
    1748:	beq	149c <sort_fields+0x318>
    174c:	ldr	r3, [r1, r2]
    1750:	add	r1, r1, r2
    1754:	add	r3, r3, #4
    1758:	adds	r1, r1, r3
    175c:	beq	1508 <sort_fields+0x384>
    1760:	cmp	r0, #0
    1764:	ldr	fp, [r1, #-4]
    1768:	beq	17e8 <sort_fields+0x664>
    176c:	ldr	r3, [r0, #-4]
    1770:	cmp	fp, r3
    1774:	movcc	r2, fp
    1778:	movcs	r2, r3
    177c:	str	r3, [sp, #8]
    1780:	bl	0 <strncmp>
    1784:	cmp	r0, #0
    1788:	beq	14fc <sort_fields+0x378>
    178c:	bge	1508 <sort_fields+0x384>
    1790:	sub	r5, r5, r4
    1794:	ldr	r3, [sp]
    1798:	lsl	r5, r5, #2
    179c:	lsl	fp, r4, #1
    17a0:	sub	r8, r8, r5
    17a4:	add	r7, r7, r5
    17a8:	cmp	r3, fp
    17ac:	str	r8, [r9]
    17b0:	mov	r5, r4
    17b4:	str	r7, [r6, sl]
    17b8:	bcc	1508 <sort_fields+0x384>
    17bc:	ldr	r3, [sp]
    17c0:	ldr	r8, [r6, #-4]
    17c4:	cmp	r3, fp
    17c8:	bhi	15fc <sort_fields+0x478>
    17cc:	mov	r4, fp
    17d0:	b	16c8 <sort_fields+0x544>
    17d4:	mov	r9, #0
    17d8:	cmp	r7, r9
    17dc:	movhi	fp, r4
    17e0:	mov	r4, fp
    17e4:	b	16c8 <sort_fields+0x544>
    17e8:	mov	r3, #0
    17ec:	b	1500 <sort_fields+0x37c>
    17f0:	bl	0 <clear_catalog>
    17f4:	ldr	r3, [pc, #60]	; 1838 <sort_fields+0x6b4>
    17f8:	mov	r2, #192	; 0xc0
    17fc:	ldr	r1, [pc, #32]	; 1824 <sort_fields+0x6a0>
    1800:	ldr	r0, [pc, #52]	; 183c <sort_fields+0x6b8>
    1804:	bl	0 <__assert_fail>
    1808:	ldr	r3, [pc, #36]	; 1834 <sort_fields+0x6b0>
    180c:	mov	r2, #224	; 0xe0
    1810:	ldr	r1, [pc, #12]	; 1824 <sort_fields+0x6a0>
    1814:	ldr	r0, [pc, #12]	; 1828 <sort_fields+0x6a4>
    1818:	bl	0 <__assert_fail>
    181c:	.word	0x53424642
    1820:	.word	0x000000d4
    1824:	.word	0x00000000
    1828:	.word	0x00000068
    182c:	.word	0x00000478
    1830:	.word	0x00000000
    1834:	.word	0x000000f0
    1838:	.word	0x0000010c
    183c:	.word	0x0000049c

00001840 <__flatcc_fb_codegen_bfbs_to_buffer>:
    1840:	push	{r4, r5, r6, r7, lr}
    1844:	mov	r6, r0
    1848:	sub	sp, sp, #236	; 0xec
    184c:	mov	r7, r1
    1850:	mov	r5, r3
    1854:	mov	r0, sp
    1858:	mov	r4, r2
    185c:	bl	0 <flatcc_builder_init>
    1860:	mov	r3, r7
    1864:	add	r2, r6, #188	; 0xbc
    1868:	ldr	r1, [r6, #184]	; 0xb8
    186c:	mov	r0, sp
    1870:	bl	4f0 <export_schema.isra.8>
    1874:	ldr	r2, [r5]
    1878:	mov	r1, r4
    187c:	mov	r0, sp
    1880:	bl	0 <flatcc_builder_copy_buffer>
    1884:	cmp	r0, #0
    1888:	beq	1894 <__flatcc_fb_codegen_bfbs_to_buffer+0x54>
    188c:	mov	r0, r4
    1890:	bl	1184 <sort_fields>
    1894:	mov	r0, sp
    1898:	bl	0 <flatcc_builder_get_buffer_size>
    189c:	str	r0, [r5]
    18a0:	mov	r0, sp
    18a4:	bl	0 <flatcc_builder_clear>
    18a8:	mov	r0, r4
    18ac:	add	sp, sp, #236	; 0xec
    18b0:	pop	{r4, r5, r6, r7, pc}

000018b4 <__flatcc_fb_codegen_bfbs_alloc_buffer>:
    18b4:	push	{r4, r5, r6, lr}
    18b8:	mov	r4, r0
    18bc:	sub	sp, sp, #232	; 0xe8
    18c0:	mov	r5, r1
    18c4:	mov	r0, sp
    18c8:	mov	r6, r2
    18cc:	bl	0 <flatcc_builder_init>
    18d0:	add	r2, r4, #188	; 0xbc
    18d4:	ldr	r1, [r4, #184]	; 0xb8
    18d8:	mov	r3, r5
    18dc:	mov	r0, sp
    18e0:	bl	4f0 <export_schema.isra.8>
    18e4:	cmp	r0, #0
    18e8:	movne	r4, #0
    18ec:	bne	1908 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x54>
    18f0:	mov	r1, r6
    18f4:	mov	r0, sp
    18f8:	bl	0 <flatcc_builder_finalize_buffer>
    18fc:	subs	r4, r0, #0
    1900:	beq	1908 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x54>
    1904:	bl	1184 <sort_fields>
    1908:	mov	r0, sp
    190c:	bl	0 <flatcc_builder_clear>
    1910:	mov	r0, r4
    1914:	add	sp, sp, #232	; 0xe8
    1918:	pop	{r4, r5, r6, pc}

0000191c <__flatcc_fb_codegen_bfbs_to_file>:
    191c:	push	{r4, r5, r6, r7, r8, r9, lr}
    1920:	mov	r5, r0
    1924:	ldr	r4, [r0, #216]	; 0xd8
    1928:	sub	sp, sp, #20
    192c:	cmp	r4, #0
    1930:	mov	r6, r1
    1934:	ldr	r8, [r0, #108]	; 0x6c
    1938:	ldr	r7, [r1, #160]	; 0xa0
    193c:	beq	1a34 <__flatcc_fb_codegen_bfbs_to_file+0x118>
    1940:	mov	r0, r4
    1944:	bl	0 <strlen>
    1948:	mov	r9, r0
    194c:	mov	r0, r7
    1950:	bl	0 <strlen>
    1954:	cmp	r8, #0
    1958:	beq	19ec <__flatcc_fb_codegen_bfbs_to_file+0xd0>
    195c:	ldr	r3, [pc, #300]	; 1a90 <__flatcc_fb_codegen_bfbs_to_file+0x174>
    1960:	ldr	r4, [r3]
    1964:	cmp	r4, #0
    1968:	beq	1a68 <__flatcc_fb_codegen_bfbs_to_file+0x14c>
    196c:	mov	r1, r6
    1970:	mov	r0, r5
    1974:	add	r2, sp, #12
    1978:	bl	18b4 <__flatcc_fb_codegen_bfbs_alloc_buffer>
    197c:	subs	r6, r0, #0
    1980:	beq	1a40 <__flatcc_fb_codegen_bfbs_to_file+0x124>
    1984:	mov	r3, r4
    1988:	ldr	r2, [sp, #12]
    198c:	mov	r1, #1
    1990:	bl	0 <fwrite>
    1994:	ldr	r3, [sp, #12]
    1998:	cmp	r0, r3
    199c:	moveq	r5, #0
    19a0:	beq	19c0 <__flatcc_fb_codegen_bfbs_to_file+0xa4>
    19a4:	ldr	r3, [pc, #232]	; 1a94 <__flatcc_fb_codegen_bfbs_to_file+0x178>
    19a8:	mov	r2, #38	; 0x26
    19ac:	mov	r1, #1
    19b0:	ldr	r3, [r3]
    19b4:	ldr	r0, [pc, #220]	; 1a98 <__flatcc_fb_codegen_bfbs_to_file+0x17c>
    19b8:	bl	0 <fwrite>
    19bc:	mvn	r5, #0
    19c0:	mov	r0, r6
    19c4:	bl	0 <free>
    19c8:	ldr	r3, [pc, #192]	; 1a90 <__flatcc_fb_codegen_bfbs_to_file+0x174>
    19cc:	ldr	r3, [r3]
    19d0:	cmp	r3, r4
    19d4:	beq	19e0 <__flatcc_fb_codegen_bfbs_to_file+0xc4>
    19d8:	mov	r0, r4
    19dc:	bl	0 <fclose>
    19e0:	mov	r0, r5
    19e4:	add	sp, sp, #20
    19e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
    19ec:	ldr	ip, [pc, #168]	; 1a9c <__flatcc_fb_codegen_bfbs_to_file+0x180>
    19f0:	mov	r8, #1
    19f4:	mov	r3, r0
    19f8:	mov	r2, r7
    19fc:	mov	r1, r9
    1a00:	mov	r0, r4
    1a04:	str	ip, [sp]
    1a08:	str	r8, [sp, #4]
    1a0c:	bl	0 <__flatcc_fb_create_join_path_n>
    1a10:	subs	r7, r0, #0
    1a14:	beq	1a70 <__flatcc_fb_codegen_bfbs_to_file+0x154>
    1a18:	ldr	r1, [pc, #128]	; 1aa0 <__flatcc_fb_codegen_bfbs_to_file+0x184>
    1a1c:	bl	0 <fopen>
    1a20:	subs	r4, r0, #0
    1a24:	beq	1a50 <__flatcc_fb_codegen_bfbs_to_file+0x134>
    1a28:	mov	r0, r7
    1a2c:	bl	0 <free>
    1a30:	b	1964 <__flatcc_fb_codegen_bfbs_to_file+0x48>
    1a34:	mov	r9, r4
    1a38:	ldr	r4, [pc, #100]	; 1aa4 <__flatcc_fb_codegen_bfbs_to_file+0x188>
    1a3c:	b	194c <__flatcc_fb_codegen_bfbs_to_file+0x30>
    1a40:	ldr	r0, [pc, #96]	; 1aa8 <__flatcc_fb_codegen_bfbs_to_file+0x18c>
    1a44:	bl	0 <puts>
    1a48:	mvn	r5, #0
    1a4c:	b	19c8 <__flatcc_fb_codegen_bfbs_to_file+0xac>
    1a50:	ldr	r3, [pc, #60]	; 1a94 <__flatcc_fb_codegen_bfbs_to_file+0x178>
    1a54:	mov	r2, r7
    1a58:	ldr	r1, [pc, #76]	; 1aac <__flatcc_fb_codegen_bfbs_to_file+0x190>
    1a5c:	ldr	r0, [r3]
    1a60:	bl	0 <fprintf>
    1a64:	b	1a28 <__flatcc_fb_codegen_bfbs_to_file+0x10c>
    1a68:	mvn	r5, #0
    1a6c:	b	19e0 <__flatcc_fb_codegen_bfbs_to_file+0xc4>
    1a70:	ldr	r3, [pc, #28]	; 1a94 <__flatcc_fb_codegen_bfbs_to_file+0x178>
    1a74:	mov	r2, #34	; 0x22
    1a78:	mov	r1, r8
    1a7c:	ldr	r3, [r3]
    1a80:	ldr	r0, [pc, #40]	; 1ab0 <__flatcc_fb_codegen_bfbs_to_file+0x194>
    1a84:	bl	0 <fwrite>
    1a88:	mov	r0, r8
    1a8c:	bl	0 <exit>
	...
    1a98:	.word	0x00000560
    1a9c:	.word	0x000004d8
    1aa0:	.word	0x00000504
    1aa4:	.word	0x000004d4
    1aa8:	.word	0x0000053c
    1aac:	.word	0x00000508
    1ab0:	.word	0x000004e0

Disassembly of section .text.unlikely:

00000000 <reflection_Field_name.part.4>:
   0:	push	{r4, lr}
   4:	mov	r2, #195	; 0xc3
   8:	ldr	r3, [pc, #8]	; 18 <reflection_Field_name.part.4+0x18>
   c:	ldr	r1, [pc, #8]	; 1c <reflection_Field_name.part.4+0x1c>
  10:	ldr	r0, [pc, #8]	; 20 <reflection_Field_name.part.4+0x20>
  14:	bl	0 <__assert_fail>
	...
  20:	.word	0x00000068
