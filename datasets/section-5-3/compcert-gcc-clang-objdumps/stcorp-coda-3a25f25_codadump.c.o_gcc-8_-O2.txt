
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_help>:
   0:	movw	r0, #0
   4:	movt	r0, #0
   8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   c:	strd	r6, [sp, #8]
  10:	movw	r7, #0
  14:	movt	r7, #0
  18:	strd	r8, [sp, #16]
  1c:	movw	r9, #0
  20:	movt	r9, #0
  24:	strd	sl, [sp, #24]
  28:	movw	fp, #0
  2c:	movt	fp, #0
  30:	str	lr, [sp, #32]
  34:	sub	sp, sp, #36	; 0x24
  38:	movw	sl, #0
  3c:	movt	sl, #0
  40:	movw	r8, #0
  44:	movt	r8, #0
  48:	movw	r6, #0
  4c:	movt	r6, #0
  50:	movw	r5, #0
  54:	movt	r5, #0
  58:	movw	r4, #0
  5c:	movt	r4, #0
  60:	bl	0 <puts>
  64:	movw	r0, #0
  68:	movt	r0, #0
  6c:	bl	0 <puts>
  70:	movw	r2, #0
  74:	movt	r2, #0
  78:	movw	r0, #0
  7c:	movt	r0, #0
  80:	str	r2, [sp, #4]
  84:	bl	0 <puts>
  88:	ldr	r2, [sp, #4]
  8c:	movw	r3, #0
  90:	movt	r3, #0
  94:	movw	r1, #0
  98:	movt	r1, #0
  9c:	str	r3, [sp, #16]
  a0:	movw	r3, #0
  a4:	movt	r3, #0
  a8:	str	r3, [sp, #4]
  ac:	movw	r3, #0
  b0:	movt	r3, #0
  b4:	mov	r0, r2
  b8:	str	r3, [sp, #12]
  bc:	str	r2, [sp, #28]
  c0:	movw	r2, #0
  c4:	movt	r2, #0
  c8:	str	r1, [sp, #20]
  cc:	str	r2, [sp, #8]
  d0:	bl	0 <puts>
  d4:	movw	r0, #0
  d8:	movt	r0, #0
  dc:	bl	0 <puts>
  e0:	movw	r0, #0
  e4:	movt	r0, #0
  e8:	bl	0 <puts>
  ec:	mov	r0, fp
  f0:	bl	0 <puts>
  f4:	mov	r0, sl
  f8:	bl	0 <puts>
  fc:	ldr	r3, [sp, #16]
 100:	mov	r0, r3
 104:	bl	0 <puts>
 108:	ldr	r1, [sp, #20]
 10c:	mov	r0, r1
 110:	str	r1, [sp, #24]
 114:	bl	0 <puts>
 118:	movw	r0, #0
 11c:	movt	r0, #0
 120:	bl	0 <puts>
 124:	movw	r0, #0
 128:	movt	r0, #0
 12c:	bl	0 <puts>
 130:	movw	r0, #0
 134:	movt	r0, #0
 138:	bl	0 <puts>
 13c:	movw	r0, #0
 140:	movt	r0, #0
 144:	bl	0 <puts>
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	bl	0 <puts>
 154:	movw	r0, #0
 158:	movt	r0, #0
 15c:	bl	0 <puts>
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	bl	0 <puts>
 16c:	movw	r0, #0
 170:	movt	r0, #0
 174:	bl	0 <puts>
 178:	movw	r0, #0
 17c:	movt	r0, #0
 180:	bl	0 <puts>
 184:	mov	r0, r9
 188:	bl	0 <puts>
 18c:	mov	r0, r8
 190:	bl	0 <puts>
 194:	mov	r0, r7
 198:	bl	0 <puts>
 19c:	mov	r0, r6
 1a0:	bl	0 <puts>
 1a4:	mov	r0, #10
 1a8:	bl	0 <putchar>
 1ac:	movw	r0, #0
 1b0:	movt	r0, #0
 1b4:	bl	0 <puts>
 1b8:	movw	r0, #0
 1bc:	movt	r0, #0
 1c0:	bl	0 <puts>
 1c4:	ldr	r2, [sp, #28]
 1c8:	mov	r0, r2
 1cc:	movw	r2, #0
 1d0:	movt	r2, #0
 1d4:	str	r2, [sp, #20]
 1d8:	bl	0 <puts>
 1dc:	mov	r0, fp
 1e0:	bl	0 <puts>
 1e4:	mov	r0, sl
 1e8:	bl	0 <puts>
 1ec:	ldr	r3, [sp, #16]
 1f0:	mov	r0, r3
 1f4:	movw	r3, #0
 1f8:	movt	r3, #0
 1fc:	str	r3, [sp, #16]
 200:	bl	0 <puts>
 204:	ldr	r1, [sp, #24]
 208:	mov	r0, r1
 20c:	bl	0 <puts>
 210:	movw	r0, #0
 214:	movt	r0, #0
 218:	bl	0 <puts>
 21c:	movw	r0, #0
 220:	movt	r0, #0
 224:	bl	0 <puts>
 228:	movw	r0, #0
 22c:	movt	r0, #0
 230:	bl	0 <puts>
 234:	movw	r0, #0
 238:	movt	r0, #0
 23c:	bl	0 <puts>
 240:	mov	r0, r5
 244:	bl	0 <puts>
 248:	mov	r0, r4
 24c:	bl	0 <puts>
 250:	movw	r0, #0
 254:	movt	r0, #0
 258:	bl	0 <puts>
 25c:	movw	r0, #0
 260:	movt	r0, #0
 264:	bl	0 <puts>
 268:	movw	r0, #0
 26c:	movt	r0, #0
 270:	bl	0 <puts>
 274:	movw	r0, #0
 278:	movt	r0, #0
 27c:	bl	0 <puts>
 280:	movw	r0, #0
 284:	movt	r0, #0
 288:	bl	0 <puts>
 28c:	movw	r0, #0
 290:	movt	r0, #0
 294:	bl	0 <puts>
 298:	mov	r0, r9
 29c:	bl	0 <puts>
 2a0:	mov	r0, r8
 2a4:	bl	0 <puts>
 2a8:	mov	r0, r7
 2ac:	bl	0 <puts>
 2b0:	mov	r0, r6
 2b4:	bl	0 <puts>
 2b8:	mov	r0, #10
 2bc:	bl	0 <putchar>
 2c0:	movw	r0, #0
 2c4:	movt	r0, #0
 2c8:	bl	0 <puts>
 2cc:	movw	r0, #0
 2d0:	movt	r0, #0
 2d4:	bl	0 <puts>
 2d8:	movw	r0, #0
 2dc:	movt	r0, #0
 2e0:	bl	0 <puts>
 2e4:	ldr	r0, [sp, #4]
 2e8:	bl	0 <puts>
 2ec:	ldr	r0, [sp, #8]
 2f0:	bl	0 <puts>
 2f4:	movw	r0, #0
 2f8:	movt	r0, #0
 2fc:	bl	0 <puts>
 300:	mov	r0, fp
 304:	bl	0 <puts>
 308:	mov	r0, sl
 30c:	bl	0 <puts>
 310:	mov	r0, r5
 314:	bl	0 <puts>
 318:	mov	r0, r4
 31c:	bl	0 <puts>
 320:	ldr	r0, [sp, #12]
 324:	bl	0 <puts>
 328:	ldr	r2, [sp, #20]
 32c:	mov	r0, r2
 330:	bl	0 <puts>
 334:	ldr	r3, [sp, #16]
 338:	mov	r0, r3
 33c:	bl	0 <puts>
 340:	mov	r0, r9
 344:	bl	0 <puts>
 348:	mov	r0, r8
 34c:	bl	0 <puts>
 350:	mov	r0, r7
 354:	bl	0 <puts>
 358:	mov	r0, r6
 35c:	bl	0 <puts>
 360:	mov	r0, #10
 364:	bl	0 <putchar>
 368:	movw	r0, #0
 36c:	movt	r0, #0
 370:	bl	0 <puts>
 374:	movw	r0, #0
 378:	movt	r0, #0
 37c:	bl	0 <puts>
 380:	movw	r0, #0
 384:	movt	r0, #0
 388:	bl	0 <puts>
 38c:	ldr	r0, [sp, #4]
 390:	bl	0 <puts>
 394:	ldr	r0, [sp, #8]
 398:	bl	0 <puts>
 39c:	movw	r0, #0
 3a0:	movt	r0, #0
 3a4:	bl	0 <puts>
 3a8:	movw	r0, #0
 3ac:	movt	r0, #0
 3b0:	bl	0 <puts>
 3b4:	mov	r0, fp
 3b8:	bl	0 <puts>
 3bc:	mov	r0, sl
 3c0:	bl	0 <puts>
 3c4:	mov	r0, r5
 3c8:	bl	0 <puts>
 3cc:	mov	r0, r4
 3d0:	bl	0 <puts>
 3d4:	ldr	sl, [sp, #12]
 3d8:	mov	r0, sl
 3dc:	bl	0 <puts>
 3e0:	ldr	r2, [sp, #20]
 3e4:	mov	r0, r2
 3e8:	str	r2, [sp, #8]
 3ec:	bl	0 <puts>
 3f0:	ldr	r3, [sp, #16]
 3f4:	mov	r0, r3
 3f8:	str	r3, [sp, #4]
 3fc:	bl	0 <puts>
 400:	mov	r0, r9
 404:	bl	0 <puts>
 408:	mov	r0, r8
 40c:	bl	0 <puts>
 410:	mov	r0, r7
 414:	bl	0 <puts>
 418:	mov	r0, r6
 41c:	bl	0 <puts>
 420:	mov	r0, #10
 424:	bl	0 <putchar>
 428:	movw	r0, #0
 42c:	movt	r0, #0
 430:	bl	0 <puts>
 434:	movw	r0, #0
 438:	movt	r0, #0
 43c:	bl	0 <puts>
 440:	movw	r0, #0
 444:	movt	r0, #0
 448:	bl	0 <puts>
 44c:	movw	r0, #0
 450:	movt	r0, #0
 454:	bl	0 <puts>
 458:	movw	r0, #0
 45c:	movt	r0, #0
 460:	bl	0 <puts>
 464:	movw	r0, #0
 468:	movt	r0, #0
 46c:	bl	0 <puts>
 470:	movw	r0, #0
 474:	movt	r0, #0
 478:	bl	0 <puts>
 47c:	mov	r0, r5
 480:	bl	0 <puts>
 484:	mov	r0, r4
 488:	bl	0 <puts>
 48c:	mov	r0, sl
 490:	bl	0 <puts>
 494:	ldr	r2, [sp, #8]
 498:	mov	r0, r2
 49c:	bl	0 <puts>
 4a0:	ldr	r3, [sp, #4]
 4a4:	mov	r0, r3
 4a8:	bl	0 <puts>
 4ac:	movw	r0, #0
 4b0:	movt	r0, #0
 4b4:	bl	0 <puts>
 4b8:	movw	r0, #0
 4bc:	movt	r0, #0
 4c0:	bl	0 <puts>
 4c4:	movw	r0, #0
 4c8:	movt	r0, #0
 4cc:	bl	0 <puts>
 4d0:	movw	r0, #0
 4d4:	movt	r0, #0
 4d8:	bl	0 <puts>
 4dc:	movw	r0, #0
 4e0:	movt	r0, #0
 4e4:	bl	0 <puts>
 4e8:	movw	r0, #0
 4ec:	movt	r0, #0
 4f0:	bl	0 <puts>
 4f4:	mov	r0, #10
 4f8:	bl	0 <putchar>
 4fc:	movw	r0, #0
 500:	movt	r0, #0
 504:	bl	0 <puts>
 508:	movw	r0, #0
 50c:	movt	r0, #0
 510:	bl	0 <puts>
 514:	mov	r0, #10
 518:	bl	0 <putchar>
 51c:	movw	r0, #0
 520:	movt	r0, #0
 524:	bl	0 <puts>
 528:	movw	r0, #0
 52c:	movt	r0, #0
 530:	bl	0 <puts>
 534:	mov	r0, #10
 538:	bl	0 <putchar>
 53c:	movw	r0, #0
 540:	movt	r0, #0
 544:	bl	0 <puts>
 548:	movw	r0, #0
 54c:	movt	r0, #0
 550:	bl	0 <puts>
 554:	movw	r0, #0
 558:	movt	r0, #0
 55c:	bl	0 <puts>
 560:	movw	r0, #0
 564:	movt	r0, #0
 568:	bl	0 <puts>
 56c:	movw	r0, #0
 570:	movt	r0, #0
 574:	bl	0 <puts>
 578:	movw	r0, #0
 57c:	movt	r0, #0
 580:	bl	0 <puts>
 584:	movw	r0, #0
 588:	movt	r0, #0
 58c:	bl	0 <puts>
 590:	mov	r0, #10
 594:	add	sp, sp, #36	; 0x24
 598:	ldrd	r4, [sp]
 59c:	ldrd	r6, [sp, #8]
 5a0:	ldrd	r8, [sp, #16]
 5a4:	ldrd	sl, [sp, #24]
 5a8:	ldr	lr, [sp, #32]
 5ac:	add	sp, sp, #36	; 0x24
 5b0:	b	0 <putchar>

000005b4 <handle_coda_error>:
 5b4:	str	r4, [sp, #-8]!
 5b8:	movw	r4, #0
 5bc:	movt	r4, #0
 5c0:	ldr	r5, [r4]
 5c4:	str	lr, [sp, #4]
 5c8:	bl	0 <coda_get_errno>
 5cc:	ldr	r0, [r0]
 5d0:	bl	0 <coda_errno_to_string>
 5d4:	mov	r2, r0
 5d8:	movw	r1, #0
 5dc:	movt	r1, #0
 5e0:	mov	r0, r5
 5e4:	bl	0 <fprintf>
 5e8:	ldr	r0, [r4]
 5ec:	bl	0 <fflush>
 5f0:	mov	r0, #1
 5f4:	bl	0 <exit>

Disassembly of section .text.startup:

00000000 <main>:
       0:	cmp	r0, #1
       4:	strd	r4, [sp, #-36]!	; 0xffffffdc
       8:	strd	r6, [sp, #8]
       c:	strd	r8, [sp, #16]
      10:	strd	sl, [sp, #24]
      14:	str	lr, [sp, #32]
      18:	sub	sp, sp, #60	; 0x3c
      1c:	beq	44 <main+0x44>
      20:	mov	r5, r1
      24:	mov	r4, r0
      28:	ldr	r6, [r5, #4]
      2c:	movw	r1, #0
      30:	movt	r1, #0
      34:	mov	r0, r6
      38:	bl	0 <strcmp>
      3c:	cmp	r0, #0
      40:	bne	50 <main+0x50>
      44:	bl	0 <main>
      48:	mov	r0, #0
      4c:	bl	0 <exit>
      50:	movw	r1, #0
      54:	movt	r1, #0
      58:	mov	r0, r6
      5c:	bl	0 <strcmp>
      60:	cmp	r0, #0
      64:	beq	44 <main+0x44>
      68:	movw	r1, #0
      6c:	movt	r1, #0
      70:	mov	r0, r6
      74:	bl	0 <strcmp>
      78:	cmp	r0, #0
      7c:	beq	2bc <main+0x2bc>
      80:	movw	r1, #0
      84:	movt	r1, #0
      88:	mov	r0, r6
      8c:	bl	0 <strcmp>
      90:	cmp	r0, #0
      94:	beq	2bc <main+0x2bc>
      98:	cmp	r4, #2
      9c:	ble	c8 <main+0xc8>
      a0:	mov	r0, r6
      a4:	movw	r1, #0
      a8:	movt	r1, #0
      ac:	bl	0 <strcmp>
      b0:	cmp	r0, #0
      b4:	bne	c8 <main+0xc8>
      b8:	ldr	r0, [r5, #8]
      bc:	mov	r8, #3
      c0:	bl	0 <coda_set_definition_path>
      c4:	b	e8 <main+0xe8>
      c8:	movw	r2, #0
      cc:	movt	r2, #0
      d0:	ldr	r0, [r5]
      d4:	mov	r1, #0
      d8:	bl	0 <coda_set_definition_path_conditional>
      dc:	cmp	r0, #0
      e0:	moveq	r8, #1
      e4:	bne	1320 <main+0x1320>
      e8:	ldr	sl, [r5, r8, lsl #2]
      ec:	movw	r1, #0
      f0:	movt	r1, #0
      f4:	lsl	r6, r8, #2
      f8:	mov	r0, sl
      fc:	bl	0 <strcmp>
     100:	subs	fp, r0, #0
     104:	beq	2ec <main+0x2ec>
     108:	movw	r1, #0
     10c:	movt	r1, #0
     110:	mov	r0, sl
     114:	bl	0 <strcmp>
     118:	subs	fp, r0, #0
     11c:	beq	6f4 <main+0x6f4>
     120:	movw	r1, #0
     124:	movt	r1, #0
     128:	mov	r0, sl
     12c:	bl	0 <strcmp>
     130:	subs	r9, r0, #0
     134:	beq	b08 <main+0xb08>
     138:	movw	r1, #0
     13c:	movt	r1, #0
     140:	mov	r0, sl
     144:	bl	0 <strcmp>
     148:	subs	r7, r0, #0
     14c:	beq	e14 <main+0xe14>
     150:	mov	r0, sl
     154:	movw	r1, #0
     158:	movt	r1, #0
     15c:	bl	0 <strcmp>
     160:	cmp	r0, #0
     164:	str	r0, [sp, #28]
     168:	bne	1254 <main+0x1254>
     16c:	movw	r3, #0
     170:	movt	r3, #0
     174:	str	r0, [sp, #16]
     178:	movw	r9, #0
     17c:	movt	r9, #0
     180:	ldr	r1, [r3]
     184:	mov	r2, #5
     188:	movw	r3, #0
     18c:	movt	r3, #0
     190:	str	r9, [sp, #12]
     194:	movw	ip, #0
     198:	movt	ip, #0
     19c:	movw	lr, #0
     1a0:	movt	lr, #0
     1a4:	str	r2, [r3]
     1a8:	movw	r7, #0
     1ac:	movt	r7, #0
     1b0:	ldr	r3, [sp, #12]
     1b4:	movw	r2, #0
     1b8:	movt	r2, #0
     1bc:	add	r6, r6, #4
     1c0:	str	r1, [ip]
     1c4:	add	r8, r8, #1
     1c8:	add	r5, r5, r6
     1cc:	str	r0, [r7]
     1d0:	movw	fp, #0
     1d4:	movt	fp, #0
     1d8:	stm	sp, {r7, lr}
     1dc:	movw	r9, #0
     1e0:	movt	r9, #0
     1e4:	str	r0, [lr]
     1e8:	sub	r4, r4, r8
     1ec:	mov	r6, r0
     1f0:	str	r0, [r3]
     1f4:	mov	sl, #1
     1f8:	str	r2, [sp, #8]
     1fc:	str	ip, [sp, #20]
     200:	str	r0, [sp, #24]
     204:	b	290 <main+0x290>
     208:	mov	r1, fp
     20c:	mov	r0, r7
     210:	bl	0 <strcmp>
     214:	cmp	r0, #0
     218:	beq	2b4 <main+0x2b4>
     21c:	mov	r0, r7
     220:	ldr	r1, [sp, #8]
     224:	bl	0 <strcmp>
     228:	cmp	r0, #0
     22c:	beq	494 <main+0x494>
     230:	movw	r1, #0
     234:	movt	r1, #0
     238:	mov	r0, r7
     23c:	bl	0 <strcmp>
     240:	cmp	r0, #0
     244:	beq	494 <main+0x494>
     248:	movw	r1, #0
     24c:	movt	r1, #0
     250:	mov	r0, r7
     254:	bl	0 <strcmp>
     258:	cmp	r0, #0
     25c:	bne	5fc <main+0x5fc>
     260:	add	r3, r6, #1
     264:	cmp	r4, r3
     268:	ble	4c4 <main+0x4c4>
     26c:	add	r2, r5, r8
     270:	ldr	r2, [r2, #4]
     274:	ldrb	r1, [r2]
     278:	cmp	r1, #45	; 0x2d
     27c:	beq	4c4 <main+0x4c4>
     280:	mov	r6, r3
     284:	ldr	r3, [sp, #12]
     288:	str	r2, [r3]
     28c:	add	r6, r6, #1
     290:	cmp	r4, r6
     294:	ble	a30 <main+0xa30>
     298:	ldr	r7, [r5, r6, lsl #2]
     29c:	mov	r1, r9
     2a0:	lsl	r8, r6, #2
     2a4:	mov	r0, r7
     2a8:	bl	0 <strcmp>
     2ac:	cmp	r0, #0
     2b0:	bne	208 <main+0x208>
     2b4:	mov	sl, r0
     2b8:	b	28c <main+0x28c>
     2bc:	bl	0 <coda_get_libcoda_version>
     2c0:	mov	r1, r0
     2c4:	movw	r0, #0
     2c8:	movt	r0, #0
     2cc:	bl	0 <printf>
     2d0:	movw	r0, #0
     2d4:	movt	r0, #0
     2d8:	bl	0 <puts>
     2dc:	mov	r0, #10
     2e0:	bl	0 <putchar>
     2e4:	mov	r0, #0
     2e8:	bl	0 <exit>
     2ec:	movw	r1, #0
     2f0:	movt	r1, #0
     2f4:	movw	r2, #0
     2f8:	movt	r2, #0
     2fc:	str	fp, [r1]
     300:	mov	r1, #1
     304:	add	r8, r8, #1
     308:	sub	r4, r4, r8
     30c:	movw	r3, #0
     310:	movt	r3, #0
     314:	movw	r9, #0
     318:	movt	r9, #0
     31c:	movw	r0, #0
     320:	movt	r0, #0
     324:	movw	ip, #0
     328:	movt	ip, #0
     32c:	movw	lr, #0
     330:	movt	lr, #0
     334:	str	r1, [r2]
     338:	movw	r2, #0
     33c:	movt	r2, #0
     340:	add	r6, r6, #4
     344:	str	fp, [r0]
     348:	cmp	r4, #0
     34c:	add	r5, r5, r6
     350:	str	fp, [r3]
     354:	str	fp, [r9]
     358:	str	fp, [ip]
     35c:	str	fp, [lr]
     360:	str	fp, [r2]
     364:	str	r3, [sp, #4]
     368:	str	ip, [sp, #12]
     36c:	str	lr, [sp, #24]
     370:	str	r2, [sp, #28]
     374:	str	r0, [sp, #32]
     378:	str	fp, [r3, #664]	; 0x298
     37c:	ble	1254 <main+0x1254>
     380:	movw	r3, #0
     384:	movt	r3, #0
     388:	movw	r7, #0
     38c:	movt	r7, #0
     390:	movw	sl, #0
     394:	movt	sl, #0
     398:	str	r3, [sp]
     39c:	str	r1, [sp, #8]
     3a0:	str	r1, [sp, #16]
     3a4:	b	464 <main+0x464>
     3a8:	mov	r1, sl
     3ac:	mov	r0, r6
     3b0:	bl	0 <strcmp>
     3b4:	cmp	r0, #0
     3b8:	beq	480 <main+0x480>
     3bc:	mov	r0, r6
     3c0:	ldr	r1, [sp]
     3c4:	bl	0 <strcmp>
     3c8:	cmp	r0, #0
     3cc:	beq	48c <main+0x48c>
     3d0:	movw	r1, #0
     3d4:	movt	r1, #0
     3d8:	mov	r0, r6
     3dc:	bl	0 <strcmp>
     3e0:	cmp	r0, #0
     3e4:	beq	48c <main+0x48c>
     3e8:	movw	r1, #0
     3ec:	movt	r1, #0
     3f0:	mov	r0, r6
     3f4:	bl	0 <strcmp>
     3f8:	cmp	r0, #0
     3fc:	beq	418 <main+0x418>
     400:	movw	r1, #0
     404:	movt	r1, #0
     408:	mov	r0, r6
     40c:	bl	0 <strcmp>
     410:	cmp	r0, #0
     414:	bne	55c <main+0x55c>
     418:	add	r2, fp, #1
     41c:	cmp	r4, r2
     420:	str	r2, [sp, #20]
     424:	ble	55c <main+0x55c>
     428:	add	r8, r5, r8
     42c:	ldr	r0, [r8, #4]
     430:	ldrb	r1, [r0]
     434:	cmp	r1, #45	; 0x2d
     438:	beq	55c <main+0x55c>
     43c:	bl	0 <codadump_filter_create>
     440:	ldr	r3, [sp, #4]
     444:	cmp	r0, #0
     448:	ldr	r2, [sp, #20]
     44c:	str	r0, [r3, #664]	; 0x298
     450:	beq	1304 <main+0x1304>
     454:	mov	fp, r2
     458:	add	fp, fp, #1
     45c:	cmp	r4, fp
     460:	ble	678 <main+0x678>
     464:	ldr	r6, [r5, fp, lsl #2]
     468:	mov	r1, r7
     46c:	lsl	r8, fp, #2
     470:	mov	r0, r6
     474:	bl	0 <strcmp>
     478:	cmp	r0, #0
     47c:	bne	3a8 <main+0x3a8>
     480:	mov	r2, #1
     484:	str	r2, [r9]
     488:	b	458 <main+0x458>
     48c:	str	r0, [sp, #8]
     490:	b	458 <main+0x458>
     494:	add	r3, r6, #1
     498:	cmp	r4, r3
     49c:	ble	5e4 <main+0x5e4>
     4a0:	add	r2, r5, r8
     4a4:	ldr	r1, [r2, #4]
     4a8:	ldrb	r0, [r1]
     4ac:	cmp	r0, #45	; 0x2d
     4b0:	beq	ac4 <main+0xac4>
     4b4:	mov	r6, r3
     4b8:	ldr	r3, [sp]
     4bc:	str	r1, [r3]
     4c0:	b	28c <main+0x28c>
     4c4:	movw	r1, #0
     4c8:	movt	r1, #0
     4cc:	mov	r0, r7
     4d0:	bl	0 <strcmp>
     4d4:	subs	r1, r0, #0
     4d8:	bne	538 <main+0x538>
     4dc:	add	r3, r6, #3
     4e0:	cmp	r4, r3
     4e4:	ble	538 <main+0x538>
     4e8:	add	r8, r5, r8
     4ec:	ldr	ip, [r8, #4]
     4f0:	ldrb	r2, [ip]
     4f4:	cmp	r2, #45	; 0x2d
     4f8:	beq	538 <main+0x538>
     4fc:	ldr	lr, [r8, #8]
     500:	ldrb	r2, [lr]
     504:	cmp	r2, #45	; 0x2d
     508:	beq	538 <main+0x538>
     50c:	ldr	r0, [r8, #12]
     510:	ldrb	r2, [r0]
     514:	cmp	r2, #45	; 0x2d
     518:	beq	538 <main+0x538>
     51c:	mov	r2, #10
     520:	mov	r6, r3
     524:	str	ip, [sp, #16]
     528:	str	lr, [sp, #24]
     52c:	bl	0 <strtol>
     530:	str	r0, [sp, #28]
     534:	b	28c <main+0x28c>
     538:	sub	r3, r4, #1
     53c:	cmp	r6, r3
     540:	bne	1254 <main+0x1254>
     544:	ldrb	r3, [r7]
     548:	cmp	r3, #45	; 0x2d
     54c:	beq	1254 <main+0x1254>
     550:	ldr	r3, [sp, #4]
     554:	str	r7, [r3]
     558:	b	28c <main+0x28c>
     55c:	movw	r1, #0
     560:	movt	r1, #0
     564:	mov	r0, r6
     568:	bl	0 <strcmp>
     56c:	cmp	r0, #0
     570:	beq	668 <main+0x668>
     574:	movw	r1, #0
     578:	movt	r1, #0
     57c:	mov	r0, r6
     580:	bl	0 <strcmp>
     584:	cmp	r0, #0
     588:	beq	668 <main+0x668>
     58c:	movw	r1, #0
     590:	movt	r1, #0
     594:	mov	r0, r6
     598:	bl	0 <strcmp>
     59c:	cmp	r0, #0
     5a0:	beq	e04 <main+0xe04>
     5a4:	movw	r1, #0
     5a8:	movt	r1, #0
     5ac:	mov	r0, r6
     5b0:	bl	0 <strcmp>
     5b4:	cmp	r0, #0
     5b8:	beq	e04 <main+0xe04>
     5bc:	movw	r1, #0
     5c0:	movt	r1, #0
     5c4:	mov	r0, r6
     5c8:	bl	0 <strcmp>
     5cc:	cmp	r0, #0
     5d0:	bne	11bc <main+0x11bc>
     5d4:	ldr	r3, [sp, #28]
     5d8:	mov	r2, #1
     5dc:	str	r2, [r3]
     5e0:	b	458 <main+0x458>
     5e4:	movw	r1, #0
     5e8:	movt	r1, #0
     5ec:	mov	r0, r7
     5f0:	bl	0 <strcmp>
     5f4:	cmp	r0, #0
     5f8:	beq	4c4 <main+0x4c4>
     5fc:	movw	r1, #0
     600:	movt	r1, #0
     604:	mov	r0, r7
     608:	bl	0 <strcmp>
     60c:	cmp	r0, #0
     610:	beq	260 <main+0x260>
     614:	movw	r1, #0
     618:	movt	r1, #0
     61c:	mov	r0, r7
     620:	bl	0 <strcmp>
     624:	subs	r1, r0, #0
     628:	bne	4c4 <main+0x4c4>
     62c:	add	r3, r6, #1
     630:	cmp	r4, r3
     634:	ble	4c4 <main+0x4c4>
     638:	add	r2, r5, r8
     63c:	ldr	r0, [r2, #4]
     640:	ldrb	r2, [r0]
     644:	cmp	r2, #45	; 0x2d
     648:	beq	4c4 <main+0x4c4>
     64c:	mov	r2, #10
     650:	mov	r6, r3
     654:	bl	0 <strtol>
     658:	movw	r3, #0
     65c:	movt	r3, #0
     660:	str	r0, [r3]
     664:	b	28c <main+0x28c>
     668:	ldr	r3, [sp, #12]
     66c:	mov	r2, #1
     670:	str	r2, [r3]
     674:	b	458 <main+0x458>
     678:	ldr	r3, [sp, #4]
     67c:	ldr	r3, [r3]
     680:	cmp	r3, #0
     684:	beq	1254 <main+0x1254>
     688:	ldrb	r3, [r3]
     68c:	cmp	r3, #0
     690:	beq	1254 <main+0x1254>
     694:	bl	0 <coda_init>
     698:	subs	r4, r0, #0
     69c:	bne	1320 <main+0x1320>
     6a0:	ldr	r3, [sp, #16]
     6a4:	eor	r0, r3, #1
     6a8:	bl	0 <coda_set_option_bypass_special_types>
     6ac:	mov	r0, r4
     6b0:	bl	0 <coda_set_option_perform_boundary_checks>
     6b4:	ldr	r0, [sp, #8]
     6b8:	bl	0 <coda_set_option_perform_conversions>
     6bc:	bl	0 <traverse_info_init>
     6c0:	bl	0 <dim_info_init>
     6c4:	bl	0 <traverse_product>
     6c8:	bl	0 <dim_info_done>
     6cc:	bl	0 <traverse_info_done>
     6d0:	bl	0 <coda_done>
     6d4:	mov	r0, #0
     6d8:	add	sp, sp, #60	; 0x3c
     6dc:	ldrd	r4, [sp]
     6e0:	ldrd	r6, [sp, #8]
     6e4:	ldrd	r8, [sp, #16]
     6e8:	ldrd	sl, [sp, #24]
     6ec:	add	sp, sp, #32
     6f0:	pop	{pc}		; (ldr pc, [sp], #4)
     6f4:	movw	r2, #0
     6f8:	movt	r2, #0
     6fc:	ldr	r7, [r2]
     700:	movw	r9, #0
     704:	movt	r9, #0
     708:	mov	r2, #1
     70c:	movw	lr, #0
     710:	movt	lr, #0
     714:	movw	ip, #0
     718:	movt	ip, #0
     71c:	movw	r0, #0
     720:	movt	r0, #0
     724:	movw	r3, #0
     728:	movt	r3, #0
     72c:	movw	r1, #0
     730:	movt	r1, #0
     734:	add	r8, r8, r2
     738:	str	r2, [lr]
     73c:	str	r2, [r0]
     740:	movw	sl, #0
     744:	movt	sl, #0
     748:	str	r7, [r9]
     74c:	movw	lr, #0
     750:	movt	lr, #0
     754:	stm	sp, {r1, r3}
     758:	movw	r1, #0
     75c:	movt	r1, #0
     760:	str	r2, [ip]
     764:	movw	r7, #0
     768:	movt	r7, #0
     76c:	str	r9, [sp, #20]
     770:	mov	r9, r2
     774:	movw	r0, #0
     778:	movt	r0, #0
     77c:	ldr	r2, [sp]
     780:	add	r6, r6, #4
     784:	sub	r4, r4, r8
     788:	add	r6, r5, r6
     78c:	str	fp, [r3]
     790:	str	sl, [sp, #32]
     794:	movw	sl, #0
     798:	movt	sl, #0
     79c:	movw	r8, #0
     7a0:	movt	r8, #0
     7a4:	str	fp, [r7]
     7a8:	str	fp, [lr]
     7ac:	str	fp, [r2]
     7b0:	ldr	r2, [sp, #32]
     7b4:	str	sl, [sp, #16]
     7b8:	movw	sl, #0
     7bc:	movt	sl, #0
     7c0:	str	r0, [sp, #8]
     7c4:	str	sl, [sp, #24]
     7c8:	movw	sl, #0
     7cc:	movt	sl, #0
     7d0:	str	r9, [sp, #28]
     7d4:	str	r1, [r2]
     7d8:	ldr	r2, [sp, #16]
     7dc:	str	r7, [sp, #36]	; 0x24
     7e0:	str	lr, [sp, #40]	; 0x28
     7e4:	str	fp, [r3, #664]	; 0x298
     7e8:	str	fp, [r2]
     7ec:	ldr	r2, [sp, #24]
     7f0:	str	fp, [r2]
     7f4:	b	87c <main+0x87c>
     7f8:	mov	r1, sl
     7fc:	mov	r0, r5
     800:	bl	0 <strcmp>
     804:	cmp	r0, #0
     808:	beq	8a0 <main+0x8a0>
     80c:	mov	r0, r5
     810:	ldr	r1, [sp, #8]
     814:	bl	0 <strcmp>
     818:	cmp	r0, #0
     81c:	beq	838 <main+0x838>
     820:	movw	r1, #0
     824:	movt	r1, #0
     828:	mov	r0, r5
     82c:	bl	0 <strcmp>
     830:	cmp	r0, #0
     834:	bne	8a8 <main+0x8a8>
     838:	add	r2, fp, #1
     83c:	cmp	r4, r2
     840:	str	r2, [sp, #12]
     844:	ble	8a8 <main+0x8a8>
     848:	add	r1, r6, r7
     84c:	ldr	r0, [r1, #4]
     850:	ldrb	r1, [r0]
     854:	cmp	r1, #45	; 0x2d
     858:	beq	8a8 <main+0x8a8>
     85c:	bl	0 <codadump_filter_create>
     860:	ldr	r3, [sp, #4]
     864:	cmp	r0, #0
     868:	ldr	r2, [sp, #12]
     86c:	str	r0, [r3, #664]	; 0x298
     870:	beq	1304 <main+0x1304>
     874:	mov	fp, r2
     878:	add	fp, fp, #1
     87c:	cmp	r4, fp
     880:	ble	988 <main+0x988>
     884:	ldr	r5, [r6, fp, lsl #2]
     888:	mov	r1, r8
     88c:	lsl	r7, fp, #2
     890:	mov	r0, r5
     894:	bl	0 <strcmp>
     898:	cmp	r0, #0
     89c:	bne	7f8 <main+0x7f8>
     8a0:	mov	r9, r0
     8a4:	b	878 <main+0x878>
     8a8:	movw	r1, #0
     8ac:	movt	r1, #0
     8b0:	mov	r0, r5
     8b4:	bl	0 <strcmp>
     8b8:	cmp	r0, #0
     8bc:	beq	968 <main+0x968>
     8c0:	movw	r1, #0
     8c4:	movt	r1, #0
     8c8:	mov	r0, r5
     8cc:	bl	0 <strcmp>
     8d0:	cmp	r0, #0
     8d4:	beq	968 <main+0x968>
     8d8:	movw	r1, #0
     8dc:	movt	r1, #0
     8e0:	mov	r0, r5
     8e4:	bl	0 <strcmp>
     8e8:	cmp	r0, #0
     8ec:	beq	978 <main+0x978>
     8f0:	movw	r1, #0
     8f4:	movt	r1, #0
     8f8:	mov	r0, r5
     8fc:	bl	0 <strcmp>
     900:	cmp	r0, #0
     904:	beq	978 <main+0x978>
     908:	movw	r1, #0
     90c:	movt	r1, #0
     910:	mov	r0, r5
     914:	bl	0 <strcmp>
     918:	cmp	r0, #0
     91c:	beq	938 <main+0x938>
     920:	movw	r1, #0
     924:	movt	r1, #0
     928:	mov	r0, r5
     92c:	bl	0 <strcmp>
     930:	cmp	r0, #0
     934:	bne	110c <main+0x110c>
     938:	add	r2, fp, #1
     93c:	cmp	r4, r2
     940:	ble	110c <main+0x110c>
     944:	add	r1, r6, r7
     948:	ldr	r1, [r1, #4]
     94c:	ldrb	r0, [r1]
     950:	cmp	r0, #45	; 0x2d
     954:	beq	110c <main+0x110c>
     958:	ldr	r3, [sp]
     95c:	mov	fp, r2
     960:	str	r1, [r3]
     964:	b	878 <main+0x878>
     968:	ldr	r3, [sp, #16]
     96c:	mov	r2, #1
     970:	str	r2, [r3]
     974:	b	878 <main+0x878>
     978:	ldr	r3, [sp, #24]
     97c:	mov	r2, #1
     980:	str	r2, [r3]
     984:	b	878 <main+0x878>
     988:	ldr	r3, [sp, #4]
     98c:	ldr	r3, [r3]
     990:	cmp	r3, #0
     994:	beq	1254 <main+0x1254>
     998:	ldrb	r3, [r3]
     99c:	cmp	r3, #0
     9a0:	beq	1254 <main+0x1254>
     9a4:	bl	0 <coda_init>
     9a8:	subs	r4, r0, #0
     9ac:	bne	1320 <main+0x1320>
     9b0:	ldr	r3, [sp, #28]
     9b4:	eor	r0, r3, #1
     9b8:	bl	0 <coda_set_option_bypass_special_types>
     9bc:	mov	r0, r4
     9c0:	bl	0 <coda_set_option_perform_boundary_checks>
     9c4:	mov	r0, r9
     9c8:	bl	0 <coda_set_option_perform_conversions>
     9cc:	bl	0 <traverse_info_init>
     9d0:	bl	0 <dim_info_init>
     9d4:	ldr	r3, [sp]
     9d8:	ldr	r0, [r3]
     9dc:	cmp	r0, #0
     9e0:	beq	a00 <main+0xa00>
     9e4:	movw	r1, #0
     9e8:	movt	r1, #0
     9ec:	bl	0 <fopen>
     9f0:	ldr	r3, [sp, #20]
     9f4:	cmp	r0, #0
     9f8:	str	r0, [r3]
     9fc:	beq	12dc <main+0x12dc>
     a00:	bl	0 <traverse_product>
     a04:	ldr	r3, [sp]
     a08:	ldr	r3, [r3]
     a0c:	cmp	r3, #0
     a10:	beq	a20 <main+0xa20>
     a14:	ldr	r3, [sp, #20]
     a18:	ldr	r0, [r3]
     a1c:	bl	0 <fclose>
     a20:	bl	0 <dim_info_done>
     a24:	bl	0 <traverse_info_done>
     a28:	bl	0 <coda_done>
     a2c:	b	6d4 <main+0x6d4>
     a30:	ldr	r3, [sp, #4]
     a34:	ldr	r3, [r3]
     a38:	cmp	r3, #0
     a3c:	beq	1254 <main+0x1254>
     a40:	ldrb	r3, [r3]
     a44:	cmp	r3, #0
     a48:	beq	1254 <main+0x1254>
     a4c:	bl	0 <coda_init>
     a50:	cmp	r0, #0
     a54:	bne	1320 <main+0x1320>
     a58:	bl	0 <coda_set_option_perform_conversions>
     a5c:	mov	r0, sl
     a60:	bl	0 <coda_set_option_use_fast_size_expressions>
     a64:	ldr	r3, [sp]
     a68:	ldr	r0, [r3]
     a6c:	cmp	r0, #0
     a70:	beq	a90 <main+0xa90>
     a74:	movw	r1, #0
     a78:	movt	r1, #0
     a7c:	bl	0 <fopen>
     a80:	ldr	r3, [sp, #20]
     a84:	cmp	r0, #0
     a88:	str	r0, [r3]
     a8c:	beq	12dc <main+0x12dc>
     a90:	ldr	r0, [sp, #16]
     a94:	ldr	r1, [sp, #24]
     a98:	ldr	r2, [sp, #28]
     a9c:	bl	0 <print_debug_data>
     aa0:	ldr	r3, [sp]
     aa4:	ldr	r3, [r3]
     aa8:	cmp	r3, #0
     aac:	beq	abc <main+0xabc>
     ab0:	ldr	r3, [sp, #20]
     ab4:	ldr	r0, [r3]
     ab8:	bl	0 <fclose>
     abc:	bl	0 <coda_done>
     ac0:	b	6d4 <main+0x6d4>
     ac4:	movw	r1, #0
     ac8:	movt	r1, #0
     acc:	str	r3, [sp, #32]
     ad0:	mov	r0, r7
     ad4:	str	r2, [sp, #36]	; 0x24
     ad8:	bl	0 <strcmp>
     adc:	cmp	r0, #0
     ae0:	beq	4c4 <main+0x4c4>
     ae4:	movw	r1, #0
     ae8:	movt	r1, #0
     aec:	mov	r0, r7
     af0:	bl	0 <strcmp>
     af4:	cmp	r0, #0
     af8:	ldr	r3, [sp, #32]
     afc:	ldr	r2, [sp, #36]	; 0x24
     b00:	beq	270 <main+0x270>
     b04:	b	614 <main+0x614>
     b08:	movw	r3, #0
     b0c:	movt	r3, #0
     b10:	mov	r2, #3
     b14:	ldr	r1, [r3]
     b18:	movw	r3, #0
     b1c:	movt	r3, #0
     b20:	movw	r7, #0
     b24:	movt	r7, #0
     b28:	movw	r0, #0
     b2c:	movt	r0, #0
     b30:	str	r2, [r3]
     b34:	movw	r2, #0
     b38:	movt	r2, #0
     b3c:	movw	ip, #0
     b40:	movt	ip, #0
     b44:	movw	lr, #0
     b48:	movt	lr, #0
     b4c:	str	r7, [sp, #12]
     b50:	add	r8, r8, #1
     b54:	str	r2, [sp, #8]
     b58:	movw	r2, #0
     b5c:	movt	r2, #0
     b60:	ldr	r3, [sp, #12]
     b64:	add	r6, r6, #4
     b68:	movw	sl, #0
     b6c:	movt	sl, #0
     b70:	str	r1, [r0]
     b74:	mov	r1, #1
     b78:	str	r2, [sp, #24]
     b7c:	movw	r2, #0
     b80:	movt	r2, #0
     b84:	movw	r7, #0
     b88:	movt	r7, #0
     b8c:	str	r9, [ip]
     b90:	sub	r4, r4, r8
     b94:	add	r6, r5, r6
     b98:	str	lr, [sp]
     b9c:	str	r2, [sp, #28]
     ba0:	movw	r2, #0
     ba4:	movt	r2, #0
     ba8:	mov	fp, r9
     bac:	str	r9, [lr]
     bb0:	str	r9, [r3]
     bb4:	str	r2, [sp, #36]	; 0x24
     bb8:	movw	r2, #0
     bbc:	movt	r2, #0
     bc0:	str	ip, [sp, #4]
     bc4:	str	r1, [sp, #16]
     bc8:	str	r2, [sp, #44]	; 0x2c
     bcc:	movw	r2, #0
     bd0:	movt	r2, #0
     bd4:	str	r0, [sp, #20]
     bd8:	str	r1, [sp, #32]
     bdc:	str	r2, [sp, #48]	; 0x30
     be0:	movw	r2, #0
     be4:	movt	r2, #0
     be8:	str	r2, [sp, #40]	; 0x28
     bec:	b	cac <main+0xcac>
     bf0:	mov	r1, sl
     bf4:	mov	r0, r5
     bf8:	bl	0 <strcmp>
     bfc:	cmp	r0, #0
     c00:	beq	cd0 <main+0xcd0>
     c04:	mov	r0, r5
     c08:	ldr	r1, [sp, #8]
     c0c:	bl	0 <strcmp>
     c10:	cmp	r0, #0
     c14:	beq	cd8 <main+0xcd8>
     c18:	mov	r0, r5
     c1c:	ldr	r1, [sp, #24]
     c20:	bl	0 <strcmp>
     c24:	cmp	r0, #0
     c28:	beq	cd8 <main+0xcd8>
     c2c:	mov	r0, r5
     c30:	ldr	r1, [sp, #28]
     c34:	bl	0 <strcmp>
     c38:	cmp	r0, #0
     c3c:	beq	ce0 <main+0xce0>
     c40:	mov	r0, r5
     c44:	ldr	r1, [sp, #40]	; 0x28
     c48:	bl	0 <strcmp>
     c4c:	cmp	r0, #0
     c50:	beq	ce0 <main+0xce0>
     c54:	mov	r0, r5
     c58:	ldr	r1, [sp, #44]	; 0x2c
     c5c:	bl	0 <strcmp>
     c60:	cmp	r0, #0
     c64:	beq	c7c <main+0xc7c>
     c68:	mov	r0, r5
     c6c:	ldr	r1, [sp, #48]	; 0x30
     c70:	bl	0 <strcmp>
     c74:	cmp	r0, #0
     c78:	bne	dcc <main+0xdcc>
     c7c:	add	r2, fp, #1
     c80:	cmp	r4, r2
     c84:	ble	dcc <main+0xdcc>
     c88:	add	r8, r6, r8
     c8c:	ldr	r1, [r8, #4]
     c90:	ldrb	r0, [r1]
     c94:	cmp	r0, #45	; 0x2d
     c98:	beq	dcc <main+0xdcc>
     c9c:	ldr	r3, [sp, #12]
     ca0:	mov	fp, r2
     ca4:	str	r1, [r3]
     ca8:	add	fp, fp, #1
     cac:	cmp	r4, fp
     cb0:	ble	d10 <main+0xd10>
     cb4:	ldr	r5, [r6, fp, lsl #2]
     cb8:	mov	r1, r7
     cbc:	lsl	r8, fp, #2
     cc0:	mov	r0, r5
     cc4:	bl	0 <strcmp>
     cc8:	cmp	r0, #0
     ccc:	bne	bf0 <main+0xbf0>
     cd0:	mov	r9, #1
     cd4:	b	ca8 <main+0xca8>
     cd8:	str	r0, [sp, #16]
     cdc:	b	ca8 <main+0xca8>
     ce0:	add	r2, fp, #1
     ce4:	cmp	r4, r2
     ce8:	ble	dcc <main+0xdcc>
     cec:	add	r8, r6, r8
     cf0:	ldr	r1, [r8, #4]
     cf4:	ldrb	r0, [r1]
     cf8:	cmp	r0, #45	; 0x2d
     cfc:	beq	d94 <main+0xd94>
     d00:	ldr	r3, [sp]
     d04:	mov	fp, r2
     d08:	str	r1, [r3]
     d0c:	b	ca8 <main+0xca8>
     d10:	ldr	r3, [sp, #4]
     d14:	ldr	r3, [r3]
     d18:	cmp	r3, #0
     d1c:	beq	1254 <main+0x1254>
     d20:	ldrb	r3, [r3]
     d24:	cmp	r3, #0
     d28:	beq	1254 <main+0x1254>
     d2c:	bl	0 <coda_init>
     d30:	cmp	r0, #0
     d34:	bne	1320 <main+0x1320>
     d38:	ldr	r3, [sp, #32]
     d3c:	eor	r0, r3, #1
     d40:	bl	0 <coda_set_option_bypass_special_types>
     d44:	ldr	r0, [sp, #16]
     d48:	bl	0 <coda_set_option_perform_conversions>
     d4c:	ldr	r3, [sp]
     d50:	ldr	r0, [r3]
     d54:	cmp	r0, #0
     d58:	beq	d78 <main+0xd78>
     d5c:	movw	r1, #0
     d60:	movt	r1, #0
     d64:	bl	0 <fopen>
     d68:	ldr	r3, [sp, #20]
     d6c:	cmp	r0, #0
     d70:	str	r0, [r3]
     d74:	beq	12dc <main+0x12dc>
     d78:	mov	r0, r9
     d7c:	bl	0 <print_json_data>
     d80:	ldr	r3, [sp]
     d84:	ldr	r3, [r3]
     d88:	cmp	r3, #0
     d8c:	bne	ab0 <main+0xab0>
     d90:	b	abc <main+0xabc>
     d94:	mov	r0, r5
     d98:	ldr	r1, [sp, #44]	; 0x2c
     d9c:	str	r2, [sp, #52]	; 0x34
     da0:	bl	0 <strcmp>
     da4:	cmp	r0, #0
     da8:	ldr	r2, [sp, #52]	; 0x34
     dac:	beq	dcc <main+0xdcc>
     db0:	mov	r0, r5
     db4:	ldr	r1, [sp, #48]	; 0x30
     db8:	str	r2, [sp, #52]	; 0x34
     dbc:	bl	0 <strcmp>
     dc0:	cmp	r0, #0
     dc4:	ldr	r2, [sp, #52]	; 0x34
     dc8:	beq	c8c <main+0xc8c>
     dcc:	mov	r0, r5
     dd0:	ldr	r1, [sp, #36]	; 0x24
     dd4:	bl	0 <strcmp>
     dd8:	cmp	r0, #0
     ddc:	beq	119c <main+0x119c>
     de0:	sub	r2, r4, #1
     de4:	cmp	fp, r2
     de8:	bne	1254 <main+0x1254>
     dec:	ldrb	r2, [r5]
     df0:	cmp	r2, #45	; 0x2d
     df4:	beq	1254 <main+0x1254>
     df8:	ldr	r3, [sp, #4]
     dfc:	str	r5, [r3]
     e00:	b	ca8 <main+0xca8>
     e04:	ldr	r3, [sp, #24]
     e08:	mov	r2, #1
     e0c:	str	r2, [r3]
     e10:	b	458 <main+0x458>
     e14:	movw	r3, #0
     e18:	movt	r3, #0
     e1c:	mov	r2, #4
     e20:	ldr	r1, [r3]
     e24:	movw	r3, #0
     e28:	movt	r3, #0
     e2c:	movw	r0, #0
     e30:	movt	r0, #0
     e34:	movw	ip, #0
     e38:	movt	ip, #0
     e3c:	str	r2, [r3]
     e40:	movw	r3, #0
     e44:	movt	r3, #0
     e48:	movw	lr, #0
     e4c:	movt	lr, #0
     e50:	movw	r9, #0
     e54:	movt	r9, #0
     e58:	str	r1, [r0]
     e5c:	mov	r1, #1
     e60:	str	r3, [sp, #8]
     e64:	movw	r3, #0
     e68:	movt	r3, #0
     e6c:	add	r8, r8, #1
     e70:	add	r6, r6, r2
     e74:	str	r7, [r9]
     e78:	sub	r4, r4, r8
     e7c:	movw	sl, #0
     e80:	movt	sl, #0
     e84:	str	r3, [sp, #24]
     e88:	movw	r3, #0
     e8c:	movt	r3, #0
     e90:	movw	r8, #0
     e94:	movt	r8, #0
     e98:	add	r6, r5, r6
     e9c:	str	r7, [ip]
     ea0:	mov	fp, r7
     ea4:	str	lr, [sp]
     ea8:	str	r3, [sp, #28]
     eac:	movw	r3, #0
     eb0:	movt	r3, #0
     eb4:	str	r7, [lr]
     eb8:	str	ip, [sp, #4]
     ebc:	str	r3, [sp, #36]	; 0x24
     ec0:	movw	r3, #0
     ec4:	movt	r3, #0
     ec8:	str	r9, [sp, #12]
     ecc:	str	r1, [sp, #16]
     ed0:	str	r3, [sp, #44]	; 0x2c
     ed4:	movw	r3, #0
     ed8:	movt	r3, #0
     edc:	str	r0, [sp, #20]
     ee0:	str	r1, [sp, #32]
     ee4:	str	r3, [sp, #48]	; 0x30
     ee8:	movw	r3, #0
     eec:	movt	r3, #0
     ef0:	str	r3, [sp, #40]	; 0x28
     ef4:	b	fb4 <main+0xfb4>
     ef8:	mov	r1, sl
     efc:	mov	r0, r5
     f00:	bl	0 <strcmp>
     f04:	cmp	r0, #0
     f08:	beq	fd8 <main+0xfd8>
     f0c:	mov	r0, r5
     f10:	ldr	r1, [sp, #8]
     f14:	bl	0 <strcmp>
     f18:	cmp	r0, #0
     f1c:	beq	fe0 <main+0xfe0>
     f20:	mov	r0, r5
     f24:	ldr	r1, [sp, #24]
     f28:	bl	0 <strcmp>
     f2c:	cmp	r0, #0
     f30:	beq	fe0 <main+0xfe0>
     f34:	mov	r0, r5
     f38:	ldr	r1, [sp, #28]
     f3c:	bl	0 <strcmp>
     f40:	cmp	r0, #0
     f44:	beq	fe8 <main+0xfe8>
     f48:	mov	r0, r5
     f4c:	ldr	r1, [sp, #40]	; 0x28
     f50:	bl	0 <strcmp>
     f54:	cmp	r0, #0
     f58:	beq	fe8 <main+0xfe8>
     f5c:	mov	r0, r5
     f60:	ldr	r1, [sp, #44]	; 0x2c
     f64:	bl	0 <strcmp>
     f68:	cmp	r0, #0
     f6c:	beq	f84 <main+0xf84>
     f70:	mov	r0, r5
     f74:	ldr	r1, [sp, #48]	; 0x30
     f78:	bl	0 <strcmp>
     f7c:	cmp	r0, #0
     f80:	bne	10d4 <main+0x10d4>
     f84:	add	r2, fp, #1
     f88:	cmp	r4, r2
     f8c:	ble	10d4 <main+0x10d4>
     f90:	add	r9, r6, r9
     f94:	ldr	r1, [r9, #4]
     f98:	ldrb	r0, [r1]
     f9c:	cmp	r0, #45	; 0x2d
     fa0:	beq	10d4 <main+0x10d4>
     fa4:	ldr	r3, [sp, #12]
     fa8:	mov	fp, r2
     fac:	str	r1, [r3]
     fb0:	add	fp, fp, #1
     fb4:	cmp	r4, fp
     fb8:	ble	1018 <main+0x1018>
     fbc:	ldr	r5, [r6, fp, lsl #2]
     fc0:	mov	r1, r8
     fc4:	lsl	r9, fp, #2
     fc8:	mov	r0, r5
     fcc:	bl	0 <strcmp>
     fd0:	cmp	r0, #0
     fd4:	bne	ef8 <main+0xef8>
     fd8:	mov	r7, #1
     fdc:	b	fb0 <main+0xfb0>
     fe0:	str	r0, [sp, #16]
     fe4:	b	fb0 <main+0xfb0>
     fe8:	add	r2, fp, #1
     fec:	cmp	r4, r2
     ff0:	ble	10d4 <main+0x10d4>
     ff4:	add	r9, r6, r9
     ff8:	ldr	r1, [r9, #4]
     ffc:	ldrb	r0, [r1]
    1000:	cmp	r0, #45	; 0x2d
    1004:	beq	109c <main+0x109c>
    1008:	ldr	r3, [sp]
    100c:	mov	fp, r2
    1010:	str	r1, [r3]
    1014:	b	fb0 <main+0xfb0>
    1018:	ldr	r3, [sp, #4]
    101c:	ldr	r3, [r3]
    1020:	cmp	r3, #0
    1024:	beq	1254 <main+0x1254>
    1028:	ldrb	r3, [r3]
    102c:	cmp	r3, #0
    1030:	beq	1254 <main+0x1254>
    1034:	bl	0 <coda_init>
    1038:	cmp	r0, #0
    103c:	bne	1320 <main+0x1320>
    1040:	ldr	r3, [sp, #32]
    1044:	eor	r0, r3, #1
    1048:	bl	0 <coda_set_option_bypass_special_types>
    104c:	ldr	r0, [sp, #16]
    1050:	bl	0 <coda_set_option_perform_conversions>
    1054:	ldr	r3, [sp]
    1058:	ldr	r0, [r3]
    105c:	cmp	r0, #0
    1060:	beq	1080 <main+0x1080>
    1064:	movw	r1, #0
    1068:	movt	r1, #0
    106c:	bl	0 <fopen>
    1070:	ldr	r3, [sp, #20]
    1074:	cmp	r0, #0
    1078:	str	r0, [r3]
    107c:	beq	12dc <main+0x12dc>
    1080:	mov	r0, r7
    1084:	bl	0 <print_yaml_data>
    1088:	ldr	r3, [sp]
    108c:	ldr	r3, [r3]
    1090:	cmp	r3, #0
    1094:	bne	ab0 <main+0xab0>
    1098:	b	abc <main+0xabc>
    109c:	mov	r0, r5
    10a0:	ldr	r1, [sp, #44]	; 0x2c
    10a4:	str	r2, [sp, #52]	; 0x34
    10a8:	bl	0 <strcmp>
    10ac:	cmp	r0, #0
    10b0:	ldr	r2, [sp, #52]	; 0x34
    10b4:	beq	10d4 <main+0x10d4>
    10b8:	mov	r0, r5
    10bc:	ldr	r1, [sp, #48]	; 0x30
    10c0:	str	r2, [sp, #52]	; 0x34
    10c4:	bl	0 <strcmp>
    10c8:	cmp	r0, #0
    10cc:	ldr	r2, [sp, #52]	; 0x34
    10d0:	beq	f94 <main+0xf94>
    10d4:	mov	r0, r5
    10d8:	ldr	r1, [sp, #36]	; 0x24
    10dc:	bl	0 <strcmp>
    10e0:	cmp	r0, #0
    10e4:	beq	11b4 <main+0x11b4>
    10e8:	sub	r2, r4, #1
    10ec:	cmp	fp, r2
    10f0:	bne	1254 <main+0x1254>
    10f4:	ldrb	r2, [r5]
    10f8:	cmp	r2, #45	; 0x2d
    10fc:	beq	1254 <main+0x1254>
    1100:	ldr	r3, [sp, #4]
    1104:	str	r5, [r3]
    1108:	b	fb0 <main+0xfb0>
    110c:	movw	r1, #0
    1110:	movt	r1, #0
    1114:	mov	r0, r5
    1118:	bl	0 <strcmp>
    111c:	cmp	r0, #0
    1120:	beq	11a4 <main+0x11a4>
    1124:	movw	r1, #0
    1128:	movt	r1, #0
    112c:	mov	r0, r5
    1130:	bl	0 <strcmp>
    1134:	cmp	r0, #0
    1138:	beq	11a4 <main+0x11a4>
    113c:	movw	r1, #0
    1140:	movt	r1, #0
    1144:	mov	r0, r5
    1148:	bl	0 <strcmp>
    114c:	cmp	r0, #0
    1150:	beq	116c <main+0x116c>
    1154:	movw	r1, #0
    1158:	movt	r1, #0
    115c:	mov	r0, r5
    1160:	bl	0 <strcmp>
    1164:	cmp	r0, #0
    1168:	bne	11e8 <main+0x11e8>
    116c:	add	r1, fp, #1
    1170:	cmp	r4, r1
    1174:	ble	11e8 <main+0x11e8>
    1178:	add	r7, r6, r7
    117c:	ldr	r2, [r7, #4]
    1180:	ldrb	r0, [r2]
    1184:	cmp	r0, #45	; 0x2d
    1188:	beq	11e8 <main+0x11e8>
    118c:	ldr	r3, [sp, #32]
    1190:	mov	fp, r1
    1194:	str	r2, [r3]
    1198:	b	878 <main+0x878>
    119c:	str	r0, [sp, #32]
    11a0:	b	ca8 <main+0xca8>
    11a4:	ldr	r3, [sp, #36]	; 0x24
    11a8:	mov	r2, #1
    11ac:	str	r2, [r3]
    11b0:	b	878 <main+0x878>
    11b4:	str	r0, [sp, #32]
    11b8:	b	fb0 <main+0xfb0>
    11bc:	movw	r1, #0
    11c0:	movt	r1, #0
    11c4:	mov	r0, r6
    11c8:	bl	0 <strcmp>
    11cc:	cmp	r0, #0
    11d0:	bne	1290 <main+0x1290>
    11d4:	ldr	r3, [sp, #32]
    11d8:	mov	r2, #1
    11dc:	str	r2, [r9]
    11e0:	str	r2, [r3]
    11e4:	b	458 <main+0x458>
    11e8:	movw	r1, #0
    11ec:	movt	r1, #0
    11f0:	mov	r0, r5
    11f4:	bl	0 <strcmp>
    11f8:	cmp	r0, #0
    11fc:	beq	1280 <main+0x1280>
    1200:	movw	r1, #0
    1204:	movt	r1, #0
    1208:	mov	r0, r5
    120c:	bl	0 <strcmp>
    1210:	cmp	r0, #0
    1214:	beq	1280 <main+0x1280>
    1218:	movw	r1, #0
    121c:	movt	r1, #0
    1220:	mov	r0, r5
    1224:	bl	0 <strcmp>
    1228:	cmp	r0, #0
    122c:	beq	12d4 <main+0x12d4>
    1230:	sub	r2, r4, #1
    1234:	cmp	fp, r2
    1238:	bne	1254 <main+0x1254>
    123c:	ldrb	r2, [r5]
    1240:	cmp	r2, #45	; 0x2d
    1244:	beq	1254 <main+0x1254>
    1248:	ldr	r3, [sp, #4]
    124c:	str	r5, [r3]
    1250:	b	878 <main+0x878>
    1254:	movw	r3, #0
    1258:	movt	r3, #0
    125c:	ldr	r3, [r3]
    1260:	movw	r0, #0
    1264:	movt	r0, #0
    1268:	mov	r2, #25
    126c:	mov	r1, #1
    1270:	bl	0 <fwrite>
    1274:	bl	0 <main>
    1278:	mov	r0, #1
    127c:	bl	0 <exit>
    1280:	ldr	r3, [sp, #40]	; 0x28
    1284:	mov	r2, #1
    1288:	str	r2, [r3]
    128c:	b	878 <main+0x878>
    1290:	movw	r1, #0
    1294:	movt	r1, #0
    1298:	mov	r0, r6
    129c:	bl	0 <strcmp>
    12a0:	cmp	r0, #0
    12a4:	beq	12cc <main+0x12cc>
    12a8:	sub	r2, r4, #1
    12ac:	cmp	r2, fp
    12b0:	bne	1254 <main+0x1254>
    12b4:	ldrb	r2, [r6]
    12b8:	cmp	r2, #45	; 0x2d
    12bc:	beq	1254 <main+0x1254>
    12c0:	ldr	r3, [sp, #4]
    12c4:	str	r6, [r3]
    12c8:	b	458 <main+0x458>
    12cc:	str	r0, [sp, #16]
    12d0:	b	458 <main+0x458>
    12d4:	str	r0, [sp, #28]
    12d8:	b	878 <main+0x878>
    12dc:	ldr	r2, [sp]
    12e0:	movw	r3, #0
    12e4:	movt	r3, #0
    12e8:	movw	r1, #0
    12ec:	movt	r1, #0
    12f0:	ldr	r0, [r3]
    12f4:	ldr	r2, [r2]
    12f8:	bl	0 <fprintf>
    12fc:	mov	r0, #1
    1300:	bl	0 <exit>
    1304:	movw	r3, #0
    1308:	movt	r3, #0
    130c:	movw	r0, #0
    1310:	movt	r0, #0
    1314:	ldr	r3, [r3]
    1318:	mov	r2, #40	; 0x28
    131c:	b	126c <main+0x126c>
    1320:	movw	r3, #0
    1324:	movt	r3, #0
    1328:	ldr	r4, [r3]
    132c:	bl	0 <coda_get_errno>
    1330:	ldr	r0, [r0]
    1334:	bl	0 <coda_errno_to_string>
    1338:	mov	r2, r0
    133c:	movw	r1, #0
    1340:	movt	r1, #0
    1344:	mov	r0, r4
    1348:	bl	0 <fprintf>
    134c:	mov	r0, #1
    1350:	bl	0 <exit>
