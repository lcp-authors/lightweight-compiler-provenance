
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #640	; 0x280
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	str	r6, [sp, #16]
      1c:	str	r7, [sp, #20]
      20:	str	r8, [sp, #24]
      24:	str	r9, [sp, #28]
      28:	str	sl, [sp, #32]
      2c:	ldr	r6, [ip]
      30:	mov	r5, r3
      34:	mov	r9, r2
      38:	mov	r7, r1
      3c:	mov	r4, r0
      40:	add	r1, sp, #40	; 0x28
      44:	add	r2, sp, #48	; 0x30
      48:	mov	r0, r4
      4c:	bl	0 <coda_cursor_get_array_dim>
      50:	cmp	r0, #0
      54:	beq	60 <read_array+0x60>
      58:	mvn	r0, #0
      5c:	b	28c <read_array+0x28c>
      60:	mov	r2, r4
      64:	add	r3, sp, #120	; 0x78
      68:	mov	lr, #130	; 0x82
      6c:	ldr	ip, [r2], #4
      70:	subs	lr, lr, #1
      74:	str	ip, [r3], #4
      78:	bne	6c <read_array+0x6c>
      7c:	mov	ip, #1
      80:	cmp	r6, #1
      84:	movne	r0, #1
      88:	moveq	r0, #0
      8c:	ldr	r1, [sp, #40]	; 0x28
      90:	cmp	r1, #1
      94:	movle	ip, ip
      98:	movgt	ip, r0
      9c:	cmp	ip, #0
      a0:	bne	1e8 <read_array+0x1e8>
      a4:	mov	r2, #1
      a8:	str	r2, [sp, #80]	; 0x50
      ac:	mov	r4, #0
      b0:	ldr	r1, [sp, #40]	; 0x28
      b4:	cmp	r4, r1
      b8:	bge	e8 <read_array+0xe8>
      bc:	add	r1, sp, #80	; 0x50
      c0:	lsl	r2, r4, #2
      c4:	add	r0, r1, r2
      c8:	add	r2, sp, #80	; 0x50
      cc:	ldr	r2, [r2, r4, lsl #2]
      d0:	add	ip, sp, #48	; 0x30
      d4:	ldr	r1, [ip, r4, lsl #2]
      d8:	mul	r3, r2, r1
      dc:	str	r3, [r0, #4]
      e0:	add	r4, r4, #1
      e4:	b	b0 <read_array+0xb0>
      e8:	add	r2, sp, #80	; 0x50
      ec:	lsl	r3, r1, #2
      f0:	add	ip, r2, r3
      f4:	sub	lr, ip, #4096	; 0x1000
      f8:	ldr	r6, [lr, #4092]	; 0xffc
      fc:	add	r3, sp, #80	; 0x50
     100:	ldr	r8, [r3, r1, lsl #2]
     104:	cmp	r8, #0
     108:	ble	288 <read_array+0x288>
     10c:	mov	r4, #0
     110:	mov	sl, #0
     114:	add	r0, sp, #120	; 0x78
     118:	mov	r1, #0
     11c:	bl	0 <coda_cursor_goto_array_element_by_index>
     120:	cmp	r0, #0
     124:	beq	130 <read_array+0x130>
     128:	mvn	r0, #0
     12c:	b	28c <read_array+0x28c>
     130:	add	r0, sp, #120	; 0x78
     134:	mla	r1, sl, r5, r9
     138:	blx	r7
     13c:	cmp	r0, #0
     140:	beq	14c <read_array+0x14c>
     144:	mvn	r0, #0
     148:	b	28c <read_array+0x28c>
     14c:	add	r4, r4, #1
     150:	cmp	r4, r8
     154:	bge	170 <read_array+0x170>
     158:	add	r0, sp, #120	; 0x78
     15c:	bl	0 <coda_cursor_goto_next_array_element>
     160:	cmp	r0, #0
     164:	beq	170 <read_array+0x170>
     168:	mvn	r0, #0
     16c:	b	28c <read_array+0x28c>
     170:	add	sl, sl, r6
     174:	cmp	sl, r8
     178:	blt	130 <read_array+0x130>
     17c:	cmp	r4, r8
     180:	beq	288 <read_array+0x288>
     184:	add	r3, sp, #80	; 0x50
     188:	ldr	r2, [sp, #40]	; 0x28
     18c:	lsl	ip, r2, #2
     190:	add	r1, r3, ip
     194:	sub	lr, r1, #4096	; 0x1000
     198:	ldr	r3, [lr, #4088]	; 0xff8
     19c:	add	r1, sp, #80	; 0x50
     1a0:	ldr	r1, [r1, r2, lsl #2]
     1a4:	sub	r0, r3, r1
     1a8:	add	sl, sl, r0
     1ac:	sub	ip, r2, #3
     1b0:	cmp	ip, #0
     1b4:	blt	130 <read_array+0x130>
     1b8:	add	r0, sp, #80	; 0x50
     1bc:	lsl	r2, ip, #2
     1c0:	add	r3, r0, r2
     1c4:	ldr	r0, [r3, #8]
     1c8:	cmp	sl, r0
     1cc:	blt	130 <read_array+0x130>
     1d0:	add	r1, sp, #80	; 0x50
     1d4:	ldr	r1, [r1, ip, lsl #2]
     1d8:	sub	r0, r1, r0
     1dc:	add	sl, sl, r0
     1e0:	sub	ip, ip, #1
     1e4:	b	1b0 <read_array+0x1b0>
     1e8:	mov	r6, #1
     1ec:	mov	r0, #0
     1f0:	ldr	r2, [sp, #40]	; 0x28
     1f4:	cmp	r0, r2
     1f8:	bge	210 <read_array+0x210>
     1fc:	add	r3, sp, #48	; 0x30
     200:	ldr	r2, [r3, r0, lsl #2]
     204:	mul	r6, r6, r2
     208:	add	r0, r0, #1
     20c:	b	1f0 <read_array+0x1f0>
     210:	cmp	r6, #0
     214:	ble	288 <read_array+0x288>
     218:	add	r0, sp, #120	; 0x78
     21c:	mov	r1, #0
     220:	bl	0 <coda_cursor_goto_array_element_by_index>
     224:	cmp	r0, #0
     228:	beq	234 <read_array+0x234>
     22c:	mvn	r0, #0
     230:	b	28c <read_array+0x28c>
     234:	mov	r4, #0
     238:	cmp	r4, r6
     23c:	bge	288 <read_array+0x288>
     240:	add	r0, sp, #120	; 0x78
     244:	mla	r1, r4, r5, r9
     248:	blx	r7
     24c:	cmp	r0, #0
     250:	beq	25c <read_array+0x25c>
     254:	mvn	r0, #0
     258:	b	28c <read_array+0x28c>
     25c:	sub	r3, r6, #1
     260:	cmp	r4, r3
     264:	bge	280 <read_array+0x280>
     268:	add	r0, sp, #120	; 0x78
     26c:	bl	0 <coda_cursor_goto_next_array_element>
     270:	cmp	r0, #0
     274:	beq	280 <read_array+0x280>
     278:	mvn	r0, #0
     27c:	b	28c <read_array+0x28c>
     280:	add	r4, r4, #1
     284:	b	238 <read_array+0x238>
     288:	mov	r0, #0
     28c:	ldr	r4, [sp, #8]
     290:	ldr	r5, [sp, #12]
     294:	ldr	r6, [sp, #16]
     298:	ldr	r7, [sp, #20]
     29c:	ldr	r8, [sp, #24]
     2a0:	ldr	r9, [sp, #28]
     2a4:	ldr	sl, [sp, #32]
     2a8:	ldr	lr, [sp, #4]
     2ac:	add	sp, sp, #640	; 0x280
     2b0:	bx	lr

000002b4 <transpose_array>:
     2b4:	mov	ip, sp
     2b8:	sub	sp, sp, #200	; 0xc8
     2bc:	str	ip, [sp, #4]
     2c0:	str	lr, [sp, #8]
     2c4:	str	r4, [sp, #16]
     2c8:	str	r5, [sp, #20]
     2cc:	str	r6, [sp, #24]
     2d0:	str	r7, [sp, #28]
     2d4:	str	r8, [sp, #32]
     2d8:	str	r9, [sp, #36]	; 0x24
     2dc:	mov	r6, r2
     2e0:	mov	r5, r1
     2e4:	mov	r7, #0
     2e8:	add	r1, sp, #40	; 0x28
     2ec:	add	r2, sp, #48	; 0x30
     2f0:	bl	0 <coda_cursor_get_array_dim>
     2f4:	cmp	r0, #0
     2f8:	beq	304 <transpose_array+0x50>
     2fc:	mvn	r0, #0
     300:	b	70c <transpose_array+0x458>
     304:	ldr	r0, [sp, #40]	; 0x28
     308:	cmp	r0, #1
     30c:	bgt	318 <transpose_array+0x64>
     310:	mov	r0, #0
     314:	b	70c <transpose_array+0x458>
     318:	mov	r8, #1
     31c:	mov	ip, #0
     320:	ldr	r2, [sp, #40]	; 0x28
     324:	cmp	ip, r2
     328:	bge	370 <transpose_array+0xbc>
     32c:	add	r0, sp, #48	; 0x30
     330:	ldr	r2, [r0, ip, lsl #2]
     334:	mul	r8, r8, r2
     338:	add	r2, sp, #160	; 0xa0
     33c:	mov	r1, #0
     340:	str	r1, [r2, ip, lsl #2]
     344:	add	r4, sp, #80	; 0x50
     348:	add	r2, sp, #48	; 0x30
     34c:	ldr	r1, [sp, #40]	; 0x28
     350:	sub	r1, r1, ip
     354:	lsl	r3, r1, #2
     358:	add	r1, r2, r3
     35c:	sub	lr, r1, #4096	; 0x1000
     360:	ldr	r0, [lr, #4092]	; 0xffc
     364:	str	r0, [r4, ip, lsl #2]
     368:	add	ip, ip, #1
     36c:	b	320 <transpose_array+0x6c>
     370:	cmp	r8, #1
     374:	bgt	380 <transpose_array+0xcc>
     378:	mov	r0, #0
     37c:	b	70c <transpose_array+0x458>
     380:	add	r1, sp, #120	; 0x78
     384:	mov	r3, #1
     388:	str	r3, [r1, r2, lsl #2]
     38c:	add	r1, sp, #80	; 0x50
     390:	ldr	r2, [sp, #40]	; 0x28
     394:	mov	r3, #1
     398:	str	r3, [r1, r2, lsl #2]
     39c:	ldr	r3, [sp, #40]	; 0x28
     3a0:	cmp	r3, #0
     3a4:	ble	3d8 <transpose_array+0x124>
     3a8:	add	r2, sp, #120	; 0x78
     3ac:	lsl	r1, r3, #2
     3b0:	add	r4, r2, r1
     3b4:	add	ip, sp, #120	; 0x78
     3b8:	ldr	ip, [ip, r3, lsl #2]
     3bc:	add	r1, sp, #80	; 0x50
     3c0:	ldr	r0, [r1, r3, lsl #2]
     3c4:	mul	r2, ip, r0
     3c8:	sub	lr, r4, #4096	; 0x1000
     3cc:	str	r2, [lr, #4092]	; 0xffc
     3d0:	sub	r3, r3, #1
     3d4:	b	3a0 <transpose_array+0xec>
     3d8:	add	ip, sp, #80	; 0x50
     3dc:	ldr	r2, [sp, #40]	; 0x28
     3e0:	mov	r1, #0
     3e4:	str	r1, [ip, r2, lsl #2]
     3e8:	add	r2, sp, #160	; 0xa0
     3ec:	ldr	ip, [sp, #40]	; 0x28
     3f0:	mov	r3, #0
     3f4:	str	r3, [r2, ip, lsl #2]
     3f8:	mul	r0, r8, r6
     3fc:	bl	0 <malloc>
     400:	mov	r4, r0
     404:	cmp	r4, #0
     408:	bne	430 <transpose_array+0x17c>
     40c:	mvn	r0, #0
     410:	ldr	r1, [pc, #796]	; 734 <transpose_array+0x480>
     414:	mul	r2, r8, r6
     418:	ldr	r3, [pc, #792]	; 738 <transpose_array+0x484>
     41c:	mov	r4, #93	; 0x5d
     420:	str	r4, [sp]
     424:	bl	0 <coda_set_error>
     428:	mvn	r0, #0
     42c:	b	70c <transpose_array+0x458>
     430:	cmp	r6, #4
     434:	bcs	580 <transpose_array+0x2cc>
     438:	cmp	r6, #1
     43c:	beq	4e8 <transpose_array+0x234>
     440:	cmp	r6, #2
     444:	bne	638 <transpose_array+0x384>
     448:	mov	r3, #0
     44c:	cmp	r3, r8
     450:	bge	6f0 <transpose_array+0x43c>
     454:	mov	r2, #0
     458:	add	r0, r4, r7, lsl #1
     45c:	add	ip, r5, r3, lsl #1
     460:	ldrh	r1, [ip]
     464:	strh	r1, [r0]
     468:	ldr	r0, [sp, #120]	; 0x78
     46c:	add	r7, r7, r0
     470:	ldr	ip, [sp, #160]	; 0xa0
     474:	add	r1, ip, #1
     478:	str	r1, [sp, #160]	; 0xa0
     47c:	add	r1, sp, #160	; 0xa0
     480:	ldr	r1, [r1, r2, lsl #2]
     484:	add	ip, sp, #80	; 0x50
     488:	ldr	r0, [ip, r2, lsl #2]
     48c:	cmp	r1, r0
     490:	bne	4e0 <transpose_array+0x22c>
     494:	add	ip, sp, #160	; 0xa0
     498:	mov	r0, #0
     49c:	str	r0, [ip, r2, lsl #2]
     4a0:	add	r0, sp, #120	; 0x78
     4a4:	ldr	ip, [r0, r2, lsl #2]
     4a8:	add	r1, sp, #80	; 0x50
     4ac:	ldr	r0, [r1, r2, lsl #2]
     4b0:	mul	ip, ip, r0
     4b4:	sub	r1, r7, ip
     4b8:	add	r2, r2, #1
     4bc:	add	ip, sp, #120	; 0x78
     4c0:	ldr	ip, [ip, r2, lsl #2]
     4c4:	add	r7, r1, ip
     4c8:	add	r1, sp, #160	; 0xa0
     4cc:	add	r0, sp, #160	; 0xa0
     4d0:	ldr	ip, [r0, r2, lsl #2]
     4d4:	add	ip, ip, #1
     4d8:	str	ip, [r1, r2, lsl #2]
     4dc:	b	47c <transpose_array+0x1c8>
     4e0:	add	r3, r3, #1
     4e4:	b	44c <transpose_array+0x198>
     4e8:	mov	r3, #0
     4ec:	cmp	r3, r8
     4f0:	bge	6f0 <transpose_array+0x43c>
     4f4:	mov	r1, #0
     4f8:	ldrb	r0, [r5, r3]
     4fc:	strb	r0, [r4, r7]
     500:	ldr	r0, [sp, #120]	; 0x78
     504:	add	r7, r7, r0
     508:	ldr	r0, [sp, #160]	; 0xa0
     50c:	add	r2, r0, #1
     510:	str	r2, [sp, #160]	; 0xa0
     514:	add	ip, sp, #160	; 0xa0
     518:	ldr	r0, [ip, r1, lsl #2]
     51c:	add	r2, sp, #80	; 0x50
     520:	ldr	ip, [r2, r1, lsl #2]
     524:	cmp	r0, ip
     528:	bne	578 <transpose_array+0x2c4>
     52c:	add	r2, sp, #160	; 0xa0
     530:	mov	ip, #0
     534:	str	ip, [r2, r1, lsl #2]
     538:	add	ip, sp, #120	; 0x78
     53c:	ldr	r0, [ip, r1, lsl #2]
     540:	add	ip, sp, #80	; 0x50
     544:	ldr	r2, [ip, r1, lsl #2]
     548:	mul	ip, r0, r2
     54c:	sub	r0, r7, ip
     550:	add	r1, r1, #1
     554:	add	ip, sp, #120	; 0x78
     558:	ldr	r2, [ip, r1, lsl #2]
     55c:	add	r7, r0, r2
     560:	add	r2, sp, #160	; 0xa0
     564:	add	ip, sp, #160	; 0xa0
     568:	ldr	ip, [ip, r1, lsl #2]
     56c:	add	ip, ip, #1
     570:	str	ip, [r2, r1, lsl #2]
     574:	b	514 <transpose_array+0x260>
     578:	add	r3, r3, #1
     57c:	b	4ec <transpose_array+0x238>
     580:	cmp	r6, #4
     584:	beq	658 <transpose_array+0x3a4>
     588:	cmp	r6, #8
     58c:	bne	638 <transpose_array+0x384>
     590:	mov	r9, #0
     594:	cmp	r9, r8
     598:	bge	6f0 <transpose_array+0x43c>
     59c:	mov	r2, #0
     5a0:	add	r0, r4, r7, lsl #3
     5a4:	add	r1, r5, r9, lsl #3
     5a8:	ldr	r3, [r1]
     5ac:	ldr	ip, [r1, #4]
     5b0:	str	r3, [r0]
     5b4:	str	ip, [r0, #4]
     5b8:	ldr	r1, [sp, #120]	; 0x78
     5bc:	add	r7, r7, r1
     5c0:	ldr	r0, [sp, #160]	; 0xa0
     5c4:	add	ip, r0, #1
     5c8:	str	ip, [sp, #160]	; 0xa0
     5cc:	add	r1, sp, #160	; 0xa0
     5d0:	ldr	ip, [r1, r2, lsl #2]
     5d4:	add	r0, sp, #80	; 0x50
     5d8:	ldr	r3, [r0, r2, lsl #2]
     5dc:	cmp	ip, r3
     5e0:	bne	630 <transpose_array+0x37c>
     5e4:	add	r0, sp, #160	; 0xa0
     5e8:	mov	ip, #0
     5ec:	str	ip, [r0, r2, lsl #2]
     5f0:	add	r3, sp, #120	; 0x78
     5f4:	ldr	r3, [r3, r2, lsl #2]
     5f8:	add	r0, sp, #80	; 0x50
     5fc:	ldr	r1, [r0, r2, lsl #2]
     600:	mul	r0, r3, r1
     604:	sub	r3, r7, r0
     608:	add	r2, r2, #1
     60c:	add	ip, sp, #120	; 0x78
     610:	ldr	ip, [ip, r2, lsl #2]
     614:	add	r7, r3, ip
     618:	add	r1, sp, #160	; 0xa0
     61c:	add	ip, sp, #160	; 0xa0
     620:	ldr	ip, [ip, r2, lsl #2]
     624:	add	ip, ip, #1
     628:	str	ip, [r1, r2, lsl #2]
     62c:	b	5cc <transpose_array+0x318>
     630:	add	r9, r9, #1
     634:	b	594 <transpose_array+0x2e0>
     638:	ldr	r0, [pc, #252]	; 73c <transpose_array+0x488>
     63c:	ldr	r1, [pc, #244]	; 738 <transpose_array+0x484>
     640:	mov	r2, #172	; 0xac
     644:	ldr	r3, [pc, #228]	; 730 <transpose_array+0x47c>
     648:	bl	0 <__assert_fail>
     64c:	mov	r0, #1
     650:	bl	0 <exit>
     654:	b	6f0 <transpose_array+0x43c>
     658:	mov	r1, #0
     65c:	cmp	r1, r8
     660:	bge	6f0 <transpose_array+0x43c>
     664:	mov	r9, #0
     668:	ldr	r2, [r5, r1, lsl #2]
     66c:	str	r2, [r4, r7, lsl #2]
     670:	ldr	r3, [sp, #120]	; 0x78
     674:	add	r7, r7, r3
     678:	ldr	r0, [sp, #160]	; 0xa0
     67c:	add	r2, r0, #1
     680:	str	r2, [sp, #160]	; 0xa0
     684:	add	r2, sp, #160	; 0xa0
     688:	ldr	ip, [r2, r9, lsl #2]
     68c:	add	r0, sp, #80	; 0x50
     690:	ldr	r3, [r0, r9, lsl #2]
     694:	cmp	ip, r3
     698:	bne	6e8 <transpose_array+0x434>
     69c:	add	r3, sp, #160	; 0xa0
     6a0:	mov	r0, #0
     6a4:	str	r0, [r3, r9, lsl #2]
     6a8:	add	ip, sp, #120	; 0x78
     6ac:	ldr	r2, [ip, r9, lsl #2]
     6b0:	add	r3, sp, #80	; 0x50
     6b4:	ldr	ip, [r3, r9, lsl #2]
     6b8:	mul	r0, r2, ip
     6bc:	sub	r3, r7, r0
     6c0:	add	r9, r9, #1
     6c4:	add	r0, sp, #120	; 0x78
     6c8:	ldr	r2, [r0, r9, lsl #2]
     6cc:	add	r7, r3, r2
     6d0:	add	ip, sp, #160	; 0xa0
     6d4:	add	r3, sp, #160	; 0xa0
     6d8:	ldr	r3, [r3, r9, lsl #2]
     6dc:	add	r0, r3, #1
     6e0:	str	r0, [ip, r9, lsl #2]
     6e4:	b	684 <transpose_array+0x3d0>
     6e8:	add	r1, r1, #1
     6ec:	b	65c <transpose_array+0x3a8>
     6f0:	mul	r2, r8, r6
     6f4:	mov	r1, r4
     6f8:	mov	r0, r5
     6fc:	bl	0 <memcpy>
     700:	mov	r0, r4
     704:	bl	0 <free>
     708:	mov	r0, #0
     70c:	ldr	r4, [sp, #16]
     710:	ldr	r5, [sp, #20]
     714:	ldr	r6, [sp, #24]
     718:	ldr	r7, [sp, #28]
     71c:	ldr	r8, [sp, #32]
     720:	ldr	r9, [sp, #36]	; 0x24
     724:	ldr	lr, [sp, #8]
     728:	add	sp, sp, #200	; 0xc8
     72c:	bx	lr
     730:	.word	0x0000058c
     734:	.word	0x000004e3
     738:	.word	0x0000031b
     73c:	.word	0x000004b3

00000740 <get_read_type>:
     740:	mov	ip, sp
     744:	sub	sp, sp, #8
     748:	str	ip, [sp]
     74c:	str	lr, [sp, #4]
     750:	ldr	r2, [r0, #4]
     754:	lsl	r2, r2, #4
     758:	add	r0, r0, r2
     75c:	sub	lr, r0, #4096	; 0x1000
     760:	ldr	r0, [lr, #4088]	; 0xff8
     764:	ldr	ip, [r0]
     768:	cmp	ip, #100	; 0x64
     76c:	blt	774 <get_read_type+0x34>
     770:	ldr	r0, [r0, #4]
     774:	ldr	r2, [r0, #8]
     778:	cmp	r2, #2
     77c:	beq	788 <get_read_type+0x48>
     780:	cmp	r2, #3
     784:	bne	7b0 <get_read_type+0x70>
     788:	ldr	ip, [pc, #56]	; 7c8 <get_read_type+0x88>
     78c:	ldr	r2, [ip]
     790:	cmp	r2, #0
     794:	beq	7b0 <get_read_type+0x70>
     798:	ldr	r2, [r0, #48]	; 0x30
     79c:	cmp	r2, #0
     7a0:	beq	7b0 <get_read_type+0x70>
     7a4:	mov	r3, #9
     7a8:	str	r3, [r1]
     7ac:	b	7b8 <get_read_type+0x78>
     7b0:	ldr	r2, [r0, #12]
     7b4:	str	r2, [r1]
     7b8:	mov	r0, #0
     7bc:	ldr	lr, [sp, #4]
     7c0:	add	sp, sp, #8
     7c4:	bx	lr
     7c8:	.word	0x00000000

000007cc <get_unconverted_read_type>:
     7cc:	mov	ip, sp
     7d0:	sub	sp, sp, #8
     7d4:	str	ip, [sp]
     7d8:	str	lr, [sp, #4]
     7dc:	ldr	r3, [r0, #4]
     7e0:	lsl	r3, r3, #4
     7e4:	add	r3, r0, r3
     7e8:	sub	lr, r3, #4096	; 0x1000
     7ec:	ldr	r0, [lr, #4088]	; 0xff8
     7f0:	ldr	ip, [r0]
     7f4:	cmp	ip, #100	; 0x64
     7f8:	blt	800 <get_unconverted_read_type+0x34>
     7fc:	ldr	r0, [r0, #4]
     800:	ldr	r3, [r0, #12]
     804:	str	r3, [r1]
     808:	ldr	r1, [r0, #8]
     80c:	cmp	r1, #2
     810:	beq	81c <get_unconverted_read_type+0x50>
     814:	cmp	r1, #3
     818:	bne	82c <get_unconverted_read_type+0x60>
     81c:	ldr	r3, [pc, #44]	; 850 <get_unconverted_read_type+0x84>
     820:	ldr	r1, [r3]
     824:	cmp	r1, #0
     828:	bne	838 <get_unconverted_read_type+0x6c>
     82c:	mov	r3, #0
     830:	str	r3, [r2]
     834:	b	840 <get_unconverted_read_type+0x74>
     838:	ldr	r0, [r0, #48]	; 0x30
     83c:	str	r0, [r2]
     840:	mov	r0, #0
     844:	ldr	lr, [sp, #4]
     848:	add	sp, sp, #8
     84c:	bx	lr
     850:	.word	0x00000000

00000854 <get_array_element_read_type>:
     854:	mov	ip, sp
     858:	sub	sp, sp, #8
     85c:	str	ip, [sp]
     860:	str	lr, [sp, #4]
     864:	ldr	r3, [r0, #40]	; 0x28
     868:	ldr	r0, [r3, #8]
     86c:	cmp	r0, #2
     870:	beq	87c <get_array_element_read_type+0x28>
     874:	cmp	r0, #3
     878:	bne	8a4 <get_array_element_read_type+0x50>
     87c:	ldr	r2, [pc, #56]	; 8bc <get_array_element_read_type+0x68>
     880:	ldr	r0, [r2]
     884:	cmp	r0, #0
     888:	beq	8a4 <get_array_element_read_type+0x50>
     88c:	ldr	r2, [r3, #48]	; 0x30
     890:	cmp	r2, #0
     894:	beq	8a4 <get_array_element_read_type+0x50>
     898:	mov	r2, #9
     89c:	str	r2, [r1]
     8a0:	b	8ac <get_array_element_read_type+0x58>
     8a4:	ldr	ip, [r3, #12]
     8a8:	str	ip, [r1]
     8ac:	mov	r0, #0
     8b0:	ldr	lr, [sp, #4]
     8b4:	add	sp, sp, #8
     8b8:	bx	lr
     8bc:	.word	0x00000000

000008c0 <get_array_element_unconverted_read_type>:
     8c0:	mov	ip, sp
     8c4:	sub	sp, sp, #8
     8c8:	str	ip, [sp]
     8cc:	str	lr, [sp, #4]
     8d0:	ldr	ip, [r0, #40]	; 0x28
     8d4:	ldr	r3, [ip, #12]
     8d8:	str	r3, [r1]
     8dc:	ldr	r0, [ip, #8]
     8e0:	cmp	r0, #2
     8e4:	beq	8f0 <get_array_element_unconverted_read_type+0x30>
     8e8:	cmp	r0, #3
     8ec:	bne	900 <get_array_element_unconverted_read_type+0x40>
     8f0:	ldr	r1, [pc, #44]	; 924 <get_array_element_unconverted_read_type+0x64>
     8f4:	ldr	r0, [r1]
     8f8:	cmp	r0, #0
     8fc:	bne	90c <get_array_element_unconverted_read_type+0x4c>
     900:	mov	r3, #0
     904:	str	r3, [r2]
     908:	b	914 <get_array_element_unconverted_read_type+0x54>
     90c:	ldr	r3, [ip, #48]	; 0x30
     910:	str	r3, [r2]
     914:	mov	r0, #0
     918:	ldr	lr, [sp, #4]
     91c:	add	sp, sp, #8
     920:	bx	lr
     924:	.word	0x00000000

00000928 <read_double_pair>:
     928:	mov	ip, sp
     92c:	sub	sp, sp, #536	; 0x218
     930:	str	ip, [sp]
     934:	str	lr, [sp, #4]
     938:	str	r4, [sp, #8]
     93c:	mov	r4, r1
     940:	ldr	r1, [r0, #4]
     944:	lsl	ip, r1, #4
     948:	add	r3, r0, ip
     94c:	sub	lr, r3, #4096	; 0x1000
     950:	ldr	r1, [lr, #4088]	; 0xff8
     954:	ldr	r2, [r1, #8]
     958:	cmp	r2, #6
     95c:	bne	a14 <read_double_pair+0xec>
     960:	ldr	r2, [r1, #40]	; 0x28
     964:	cmp	r2, #3
     968:	bne	a14 <read_double_pair+0xec>
     96c:	mov	r2, r0
     970:	add	r3, sp, #16
     974:	mov	lr, #130	; 0x82
     978:	ldr	ip, [r2], #4
     97c:	subs	lr, lr, #1
     980:	str	ip, [r3], #4
     984:	bne	978 <read_double_pair+0x50>
     988:	add	r0, sp, #16
     98c:	bl	0 <coda_cursor_use_base_type_of_special_type>
     990:	cmp	r0, #0
     994:	beq	9a0 <read_double_pair+0x78>
     998:	mvn	r0, #0
     99c:	b	a24 <read_double_pair+0xfc>
     9a0:	add	r0, sp, #16
     9a4:	mov	r1, #0
     9a8:	bl	0 <coda_cursor_goto_record_field_by_index>
     9ac:	cmp	r0, #0
     9b0:	beq	9bc <read_double_pair+0x94>
     9b4:	mvn	r0, #0
     9b8:	b	a24 <read_double_pair+0xfc>
     9bc:	add	r0, sp, #16
     9c0:	mov	r1, r4
     9c4:	bl	43bc <coda_cursor_read_double>
     9c8:	cmp	r0, #0
     9cc:	beq	9d8 <read_double_pair+0xb0>
     9d0:	mvn	r0, #0
     9d4:	b	a24 <read_double_pair+0xfc>
     9d8:	add	r0, sp, #16
     9dc:	bl	0 <coda_cursor_goto_next_record_field>
     9e0:	cmp	r0, #0
     9e4:	beq	9f0 <read_double_pair+0xc8>
     9e8:	mvn	r0, #0
     9ec:	b	a24 <read_double_pair+0xfc>
     9f0:	add	r0, sp, #16
     9f4:	add	r1, r4, #8
     9f8:	bl	43bc <coda_cursor_read_double>
     9fc:	cmp	r0, #0
     a00:	beq	a0c <read_double_pair+0xe4>
     a04:	mvn	r0, #0
     a08:	b	a24 <read_double_pair+0xfc>
     a0c:	mov	r0, #0
     a10:	b	a24 <read_double_pair+0xfc>
     a14:	mvn	r0, #104	; 0x68
     a18:	ldr	r1, [pc, #20]	; a34 <read_double_pair+0x10c>
     a1c:	bl	0 <coda_set_error>
     a20:	mvn	r0, #0
     a24:	ldr	r4, [sp, #8]
     a28:	ldr	lr, [sp, #4]
     a2c:	add	sp, sp, #536	; 0x218
     a30:	bx	lr
     a34:	.word	0x00000000

00000a38 <read_int8>:
     a38:	mov	ip, sp
     a3c:	sub	sp, sp, #16
     a40:	str	ip, [sp]
     a44:	str	lr, [sp, #4]
     a48:	str	r4, [sp, #8]
     a4c:	ldr	r2, [r0, #4]
     a50:	lsl	r2, r2, #4
     a54:	add	r2, r0, r2
     a58:	sub	lr, r2, #4096	; 0x1000
     a5c:	ldr	r3, [lr, #4088]	; 0xff8
     a60:	ldr	ip, [r3]
     a64:	cmp	ip, #102	; 0x66
     a68:	bcs	ad0 <read_int8+0x98>
     a6c:	cmp	ip, #100	; 0x64
     a70:	bcs	aa4 <read_int8+0x6c>
     a74:	cmp	ip, #0
     a78:	beq	a94 <read_int8+0x5c>
     a7c:	cmp	ip, #1
     a80:	bne	b0c <read_int8+0xd4>
     a84:	ldr	r4, [sp, #8]
     a88:	ldr	lr, [sp, #4]
     a8c:	add	sp, sp, #16
     a90:	b	0 <coda_bin_cursor_read_int8>
     a94:	ldr	r4, [sp, #8]
     a98:	ldr	lr, [sp, #4]
     a9c:	add	sp, sp, #16
     aa0:	b	0 <coda_ascii_cursor_read_int8>
     aa4:	cmp	ip, #100	; 0x64
     aa8:	bne	abc <read_int8+0x84>
     aac:	ldr	r4, [sp, #8]
     ab0:	ldr	lr, [sp, #4]
     ab4:	add	sp, sp, #16
     ab8:	b	0 <coda_mem_cursor_read_int8>
     abc:	mvn	r0, #10
     ac0:	mov	r1, #0
     ac4:	bl	0 <coda_set_error>
     ac8:	mvn	r4, #0
     acc:	b	b28 <read_int8+0xf0>
     ad0:	cmp	ip, #104	; 0x68
     ad4:	bcs	b04 <read_int8+0xcc>
     ad8:	cmp	ip, #102	; 0x66
     adc:	bne	af4 <read_int8+0xbc>
     ae0:	mvn	r0, #12
     ae4:	mov	r1, #0
     ae8:	bl	0 <coda_set_error>
     aec:	mvn	r4, #0
     af0:	b	b28 <read_int8+0xf0>
     af4:	ldr	r4, [sp, #8]
     af8:	ldr	lr, [sp, #4]
     afc:	add	sp, sp, #16
     b00:	b	0 <coda_cdf_cursor_read_int8>
     b04:	cmp	ip, #104	; 0x68
     b08:	beq	b3c <read_int8+0x104>
     b0c:	ldr	r0, [pc, #64]	; b54 <read_int8+0x11c>
     b10:	ldr	r1, [pc, #56]	; b50 <read_int8+0x118>
     b14:	movw	r2, #359	; 0x167
     b18:	ldr	r3, [pc, #44]	; b4c <read_int8+0x114>
     b1c:	bl	0 <__assert_fail>
     b20:	mov	r0, #1
     b24:	bl	0 <exit>
     b28:	mov	r0, r4
     b2c:	ldr	r4, [sp, #8]
     b30:	ldr	lr, [sp, #4]
     b34:	add	sp, sp, #16
     b38:	bx	lr
     b3c:	ldr	r4, [sp, #8]
     b40:	ldr	lr, [sp, #4]
     b44:	add	sp, sp, #16
     b48:	b	0 <coda_netcdf_cursor_read_int8>
     b4c:	.word	0x0000059c
     b50:	.word	0x00000453
     b54:	.word	0x000004b3

00000b58 <read_uint8>:
     b58:	mov	ip, sp
     b5c:	sub	sp, sp, #16
     b60:	str	ip, [sp]
     b64:	str	lr, [sp, #4]
     b68:	str	r4, [sp, #8]
     b6c:	ldr	r2, [r0, #4]
     b70:	lsl	r2, r2, #4
     b74:	add	r3, r0, r2
     b78:	sub	lr, r3, #4096	; 0x1000
     b7c:	ldr	r3, [lr, #4088]	; 0xff8
     b80:	ldr	r2, [r3]
     b84:	cmp	r2, #102	; 0x66
     b88:	bcs	bf0 <read_uint8+0x98>
     b8c:	cmp	r2, #100	; 0x64
     b90:	bcs	bc4 <read_uint8+0x6c>
     b94:	cmp	r2, #0
     b98:	beq	bb4 <read_uint8+0x5c>
     b9c:	cmp	r2, #1
     ba0:	bne	c24 <read_uint8+0xcc>
     ba4:	ldr	r4, [sp, #8]
     ba8:	ldr	lr, [sp, #4]
     bac:	add	sp, sp, #16
     bb0:	b	0 <coda_bin_cursor_read_uint8>
     bb4:	ldr	r4, [sp, #8]
     bb8:	ldr	lr, [sp, #4]
     bbc:	add	sp, sp, #16
     bc0:	b	0 <coda_ascii_cursor_read_uint8>
     bc4:	cmp	r2, #100	; 0x64
     bc8:	bne	bdc <read_uint8+0x84>
     bcc:	ldr	r4, [sp, #8]
     bd0:	ldr	lr, [sp, #4]
     bd4:	add	sp, sp, #16
     bd8:	b	0 <coda_mem_cursor_read_uint8>
     bdc:	mvn	r0, #10
     be0:	mov	r1, #0
     be4:	bl	0 <coda_set_error>
     be8:	mvn	r4, #0
     bec:	b	c40 <read_uint8+0xe8>
     bf0:	cmp	r2, #104	; 0x68
     bf4:	bcs	c24 <read_uint8+0xcc>
     bf8:	cmp	r2, #102	; 0x66
     bfc:	bne	c14 <read_uint8+0xbc>
     c00:	mvn	r0, #12
     c04:	mov	r1, #0
     c08:	bl	0 <coda_set_error>
     c0c:	mvn	r4, #0
     c10:	b	c40 <read_uint8+0xe8>
     c14:	ldr	r4, [sp, #8]
     c18:	ldr	lr, [sp, #4]
     c1c:	add	sp, sp, #16
     c20:	b	0 <coda_cdf_cursor_read_uint8>
     c24:	ldr	r0, [pc, #48]	; c5c <read_uint8+0x104>
     c28:	ldr	r1, [pc, #40]	; c58 <read_uint8+0x100>
     c2c:	movw	r2, #394	; 0x18a
     c30:	ldr	r3, [pc, #28]	; c54 <read_uint8+0xfc>
     c34:	bl	0 <__assert_fail>
     c38:	mov	r0, #1
     c3c:	bl	0 <exit>
     c40:	mov	r0, r4
     c44:	ldr	r4, [sp, #8]
     c48:	ldr	lr, [sp, #4]
     c4c:	add	sp, sp, #16
     c50:	bx	lr
     c54:	.word	0x000005a6
     c58:	.word	0x00000453
     c5c:	.word	0x000004b3

00000c60 <read_int16>:
     c60:	mov	ip, sp
     c64:	sub	sp, sp, #8
     c68:	str	ip, [sp]
     c6c:	str	lr, [sp, #4]
     c70:	ldr	r3, [r0, #4]
     c74:	lsl	r2, r3, #4
     c78:	add	r2, r0, r2
     c7c:	sub	lr, r2, #4096	; 0x1000
     c80:	ldr	r2, [lr, #4088]	; 0xff8
     c84:	ldr	ip, [r2]
     c88:	cmp	ip, #102	; 0x66
     c8c:	bcs	ce8 <read_int16+0x88>
     c90:	cmp	ip, #100	; 0x64
     c94:	bcs	cc0 <read_int16+0x60>
     c98:	cmp	ip, #0
     c9c:	beq	cb4 <read_int16+0x54>
     ca0:	cmp	ip, #1
     ca4:	bne	d44 <read_int16+0xe4>
     ca8:	ldr	lr, [sp, #4]
     cac:	add	sp, sp, #8
     cb0:	b	0 <coda_bin_cursor_read_int16>
     cb4:	ldr	lr, [sp, #4]
     cb8:	add	sp, sp, #8
     cbc:	b	0 <coda_ascii_cursor_read_int16>
     cc0:	cmp	ip, #100	; 0x64
     cc4:	bne	cd4 <read_int16+0x74>
     cc8:	ldr	lr, [sp, #4]
     ccc:	add	sp, sp, #8
     cd0:	b	0 <coda_mem_cursor_read_int16>
     cd4:	mvn	r0, #10
     cd8:	mov	r1, #0
     cdc:	bl	0 <coda_set_error>
     ce0:	mvn	r0, #0
     ce4:	b	d48 <read_int16+0xe8>
     ce8:	cmp	ip, #104	; 0x68
     cec:	bcs	d18 <read_int16+0xb8>
     cf0:	cmp	ip, #102	; 0x66
     cf4:	bne	d0c <read_int16+0xac>
     cf8:	mvn	r0, #12
     cfc:	mov	r1, #0
     d00:	bl	0 <coda_set_error>
     d04:	mvn	r0, #0
     d08:	b	d48 <read_int16+0xe8>
     d0c:	ldr	lr, [sp, #4]
     d10:	add	sp, sp, #8
     d14:	b	0 <coda_cdf_cursor_read_int16>
     d18:	cmp	ip, #104	; 0x68
     d1c:	beq	d54 <read_int16+0xf4>
     d20:	cmp	ip, #105	; 0x69
     d24:	bne	d44 <read_int16+0xe4>
     d28:	ldr	r0, [pc, #52]	; d64 <read_int16+0x104>
     d2c:	ldr	r1, [pc, #44]	; d60 <read_int16+0x100>
     d30:	movw	r2, #427	; 0x1ab
     d34:	ldr	r3, [pc, #44]	; d68 <read_int16+0x108>
     d38:	bl	0 <__assert_fail>
     d3c:	mov	r0, #1
     d40:	bl	0 <exit>
     d44:	mov	r0, #0
     d48:	ldr	lr, [sp, #4]
     d4c:	add	sp, sp, #8
     d50:	bx	lr
     d54:	ldr	lr, [sp, #4]
     d58:	add	sp, sp, #8
     d5c:	b	0 <coda_netcdf_cursor_read_int16>
     d60:	.word	0x00000453
     d64:	.word	0x000004b3
     d68:	.word	0x000005b1

00000d6c <read_uint16>:
     d6c:	mov	ip, sp
     d70:	sub	sp, sp, #16
     d74:	str	ip, [sp]
     d78:	str	lr, [sp, #4]
     d7c:	str	r4, [sp, #8]
     d80:	ldr	r2, [r0, #4]
     d84:	lsl	r2, r2, #4
     d88:	add	r3, r0, r2
     d8c:	sub	lr, r3, #4096	; 0x1000
     d90:	ldr	r3, [lr, #4088]	; 0xff8
     d94:	ldr	r2, [r3]
     d98:	cmp	r2, #102	; 0x66
     d9c:	bcs	e04 <read_uint16+0x98>
     da0:	cmp	r2, #100	; 0x64
     da4:	bcs	dd8 <read_uint16+0x6c>
     da8:	cmp	r2, #0
     dac:	beq	dc8 <read_uint16+0x5c>
     db0:	cmp	r2, #1
     db4:	bne	e38 <read_uint16+0xcc>
     db8:	ldr	r4, [sp, #8]
     dbc:	ldr	lr, [sp, #4]
     dc0:	add	sp, sp, #16
     dc4:	b	0 <coda_bin_cursor_read_uint16>
     dc8:	ldr	r4, [sp, #8]
     dcc:	ldr	lr, [sp, #4]
     dd0:	add	sp, sp, #16
     dd4:	b	0 <coda_ascii_cursor_read_uint16>
     dd8:	cmp	r2, #100	; 0x64
     ddc:	bne	df0 <read_uint16+0x84>
     de0:	ldr	r4, [sp, #8]
     de4:	ldr	lr, [sp, #4]
     de8:	add	sp, sp, #16
     dec:	b	0 <coda_mem_cursor_read_uint16>
     df0:	mvn	r0, #10
     df4:	mov	r1, #0
     df8:	bl	0 <coda_set_error>
     dfc:	mvn	r4, #0
     e00:	b	e54 <read_uint16+0xe8>
     e04:	cmp	r2, #104	; 0x68
     e08:	bcs	e38 <read_uint16+0xcc>
     e0c:	cmp	r2, #102	; 0x66
     e10:	bne	e28 <read_uint16+0xbc>
     e14:	mvn	r0, #12
     e18:	mov	r1, #0
     e1c:	bl	0 <coda_set_error>
     e20:	mvn	r4, #0
     e24:	b	e54 <read_uint16+0xe8>
     e28:	ldr	r4, [sp, #8]
     e2c:	ldr	lr, [sp, #4]
     e30:	add	sp, sp, #16
     e34:	b	0 <coda_cdf_cursor_read_uint16>
     e38:	ldr	r0, [pc, #48]	; e70 <read_uint16+0x104>
     e3c:	ldr	r1, [pc, #40]	; e6c <read_uint16+0x100>
     e40:	movw	r2, #465	; 0x1d1
     e44:	ldr	r3, [pc, #28]	; e68 <read_uint16+0xfc>
     e48:	bl	0 <__assert_fail>
     e4c:	mov	r0, #1
     e50:	bl	0 <exit>
     e54:	mov	r0, r4
     e58:	ldr	r4, [sp, #8]
     e5c:	ldr	lr, [sp, #4]
     e60:	add	sp, sp, #16
     e64:	bx	lr
     e68:	.word	0x000005bc
     e6c:	.word	0x00000453
     e70:	.word	0x000004b3

00000e74 <read_int32>:
     e74:	mov	ip, sp
     e78:	sub	sp, sp, #8
     e7c:	str	ip, [sp]
     e80:	str	lr, [sp, #4]
     e84:	ldr	r3, [r0, #4]
     e88:	lsl	r2, r3, #4
     e8c:	add	r2, r0, r2
     e90:	sub	lr, r2, #4096	; 0x1000
     e94:	ldr	r2, [lr, #4088]	; 0xff8
     e98:	ldr	ip, [r2]
     e9c:	cmp	ip, #102	; 0x66
     ea0:	bcs	efc <read_int32+0x88>
     ea4:	cmp	ip, #100	; 0x64
     ea8:	bcs	ed4 <read_int32+0x60>
     eac:	cmp	ip, #0
     eb0:	beq	ec8 <read_int32+0x54>
     eb4:	cmp	ip, #1
     eb8:	bne	f58 <read_int32+0xe4>
     ebc:	ldr	lr, [sp, #4]
     ec0:	add	sp, sp, #8
     ec4:	b	0 <coda_bin_cursor_read_int32>
     ec8:	ldr	lr, [sp, #4]
     ecc:	add	sp, sp, #8
     ed0:	b	0 <coda_ascii_cursor_read_int32>
     ed4:	cmp	ip, #100	; 0x64
     ed8:	bne	ee8 <read_int32+0x74>
     edc:	ldr	lr, [sp, #4]
     ee0:	add	sp, sp, #8
     ee4:	b	0 <coda_mem_cursor_read_int32>
     ee8:	mvn	r0, #10
     eec:	mov	r1, #0
     ef0:	bl	0 <coda_set_error>
     ef4:	mvn	r0, #0
     ef8:	b	f5c <read_int32+0xe8>
     efc:	cmp	ip, #104	; 0x68
     f00:	bcs	f2c <read_int32+0xb8>
     f04:	cmp	ip, #102	; 0x66
     f08:	bne	f20 <read_int32+0xac>
     f0c:	mvn	r0, #12
     f10:	mov	r1, #0
     f14:	bl	0 <coda_set_error>
     f18:	mvn	r0, #0
     f1c:	b	f5c <read_int32+0xe8>
     f20:	ldr	lr, [sp, #4]
     f24:	add	sp, sp, #8
     f28:	b	0 <coda_cdf_cursor_read_int32>
     f2c:	cmp	ip, #104	; 0x68
     f30:	beq	f68 <read_int32+0xf4>
     f34:	cmp	ip, #105	; 0x69
     f38:	bne	f58 <read_int32+0xe4>
     f3c:	ldr	r0, [pc, #56]	; f7c <read_int32+0x108>
     f40:	ldr	r1, [pc, #48]	; f78 <read_int32+0x104>
     f44:	movw	r2, #499	; 0x1f3
     f48:	ldr	r3, [pc, #36]	; f74 <read_int32+0x100>
     f4c:	bl	0 <__assert_fail>
     f50:	mov	r0, #1
     f54:	bl	0 <exit>
     f58:	mov	r0, #0
     f5c:	ldr	lr, [sp, #4]
     f60:	add	sp, sp, #8
     f64:	bx	lr
     f68:	ldr	lr, [sp, #4]
     f6c:	add	sp, sp, #8
     f70:	b	0 <coda_netcdf_cursor_read_int32>
     f74:	.word	0x000005c8
     f78:	.word	0x00000453
     f7c:	.word	0x000004b3

00000f80 <read_uint32>:
     f80:	mov	ip, sp
     f84:	sub	sp, sp, #16
     f88:	str	ip, [sp]
     f8c:	str	lr, [sp, #4]
     f90:	str	r4, [sp, #8]
     f94:	ldr	r2, [r0, #4]
     f98:	lsl	r2, r2, #4
     f9c:	add	r3, r0, r2
     fa0:	sub	lr, r3, #4096	; 0x1000
     fa4:	ldr	r3, [lr, #4088]	; 0xff8
     fa8:	ldr	r2, [r3]
     fac:	cmp	r2, #102	; 0x66
     fb0:	bcs	1018 <read_uint32+0x98>
     fb4:	cmp	r2, #100	; 0x64
     fb8:	bcs	fec <read_uint32+0x6c>
     fbc:	cmp	r2, #0
     fc0:	beq	fdc <read_uint32+0x5c>
     fc4:	cmp	r2, #1
     fc8:	bne	104c <read_uint32+0xcc>
     fcc:	ldr	r4, [sp, #8]
     fd0:	ldr	lr, [sp, #4]
     fd4:	add	sp, sp, #16
     fd8:	b	0 <coda_bin_cursor_read_uint32>
     fdc:	ldr	r4, [sp, #8]
     fe0:	ldr	lr, [sp, #4]
     fe4:	add	sp, sp, #16
     fe8:	b	0 <coda_ascii_cursor_read_uint32>
     fec:	cmp	r2, #100	; 0x64
     ff0:	bne	1004 <read_uint32+0x84>
     ff4:	ldr	r4, [sp, #8]
     ff8:	ldr	lr, [sp, #4]
     ffc:	add	sp, sp, #16
    1000:	b	0 <coda_mem_cursor_read_uint32>
    1004:	mvn	r0, #10
    1008:	mov	r1, #0
    100c:	bl	0 <coda_set_error>
    1010:	mvn	r4, #0
    1014:	b	1068 <read_uint32+0xe8>
    1018:	cmp	r2, #104	; 0x68
    101c:	bcs	104c <read_uint32+0xcc>
    1020:	cmp	r2, #102	; 0x66
    1024:	bne	103c <read_uint32+0xbc>
    1028:	mvn	r0, #12
    102c:	mov	r1, #0
    1030:	bl	0 <coda_set_error>
    1034:	mvn	r4, #0
    1038:	b	1068 <read_uint32+0xe8>
    103c:	ldr	r4, [sp, #8]
    1040:	ldr	lr, [sp, #4]
    1044:	add	sp, sp, #16
    1048:	b	0 <coda_cdf_cursor_read_uint32>
    104c:	ldr	r0, [pc, #44]	; 1080 <read_uint32+0x100>
    1050:	ldr	r1, [pc, #36]	; 107c <read_uint32+0xfc>
    1054:	movw	r2, #537	; 0x219
    1058:	ldr	r3, [pc, #36]	; 1084 <read_uint32+0x104>
    105c:	bl	0 <__assert_fail>
    1060:	mov	r0, #1
    1064:	bl	0 <exit>
    1068:	mov	r0, r4
    106c:	ldr	r4, [sp, #8]
    1070:	ldr	lr, [sp, #4]
    1074:	add	sp, sp, #16
    1078:	bx	lr
    107c:	.word	0x00000453
    1080:	.word	0x000004b3
    1084:	.word	0x000005d3

00001088 <read_int64>:
    1088:	mov	ip, sp
    108c:	sub	sp, sp, #16
    1090:	str	ip, [sp]
    1094:	str	lr, [sp, #4]
    1098:	str	r4, [sp, #8]
    109c:	ldr	r2, [r0, #4]
    10a0:	lsl	r2, r2, #4
    10a4:	add	r3, r0, r2
    10a8:	sub	lr, r3, #4096	; 0x1000
    10ac:	ldr	r3, [lr, #4088]	; 0xff8
    10b0:	ldr	r2, [r3]
    10b4:	cmp	r2, #102	; 0x66
    10b8:	bcs	1120 <read_int64+0x98>
    10bc:	cmp	r2, #100	; 0x64
    10c0:	bcs	10f4 <read_int64+0x6c>
    10c4:	cmp	r2, #0
    10c8:	beq	10e4 <read_int64+0x5c>
    10cc:	cmp	r2, #1
    10d0:	bne	1154 <read_int64+0xcc>
    10d4:	ldr	r4, [sp, #8]
    10d8:	ldr	lr, [sp, #4]
    10dc:	add	sp, sp, #16
    10e0:	b	0 <coda_bin_cursor_read_int64>
    10e4:	ldr	r4, [sp, #8]
    10e8:	ldr	lr, [sp, #4]
    10ec:	add	sp, sp, #16
    10f0:	b	0 <coda_ascii_cursor_read_int64>
    10f4:	cmp	r2, #100	; 0x64
    10f8:	bne	110c <read_int64+0x84>
    10fc:	ldr	r4, [sp, #8]
    1100:	ldr	lr, [sp, #4]
    1104:	add	sp, sp, #16
    1108:	b	0 <coda_mem_cursor_read_int64>
    110c:	mvn	r0, #10
    1110:	mov	r1, #0
    1114:	bl	0 <coda_set_error>
    1118:	mvn	r4, #0
    111c:	b	1170 <read_int64+0xe8>
    1120:	cmp	r2, #104	; 0x68
    1124:	bcs	1154 <read_int64+0xcc>
    1128:	cmp	r2, #102	; 0x66
    112c:	bne	1144 <read_int64+0xbc>
    1130:	mvn	r0, #12
    1134:	mov	r1, #0
    1138:	bl	0 <coda_set_error>
    113c:	mvn	r4, #0
    1140:	b	1170 <read_int64+0xe8>
    1144:	ldr	r4, [sp, #8]
    1148:	ldr	lr, [sp, #4]
    114c:	add	sp, sp, #16
    1150:	b	0 <coda_cdf_cursor_read_int64>
    1154:	ldr	r0, [pc, #48]	; 118c <read_int64+0x104>
    1158:	ldr	r1, [pc, #36]	; 1184 <read_int64+0xfc>
    115c:	mov	r2, #572	; 0x23c
    1160:	ldr	r3, [pc, #32]	; 1188 <read_int64+0x100>
    1164:	bl	0 <__assert_fail>
    1168:	mov	r0, #1
    116c:	bl	0 <exit>
    1170:	mov	r0, r4
    1174:	ldr	r4, [sp, #8]
    1178:	ldr	lr, [sp, #4]
    117c:	add	sp, sp, #16
    1180:	bx	lr
    1184:	.word	0x00000453
    1188:	.word	0x000005df
    118c:	.word	0x000004b3

00001190 <read_uint64>:
    1190:	mov	ip, sp
    1194:	sub	sp, sp, #16
    1198:	str	ip, [sp]
    119c:	str	lr, [sp, #4]
    11a0:	str	r4, [sp, #8]
    11a4:	ldr	r2, [r0, #4]
    11a8:	lsl	r3, r2, #4
    11ac:	add	r2, r0, r3
    11b0:	sub	lr, r2, #4096	; 0x1000
    11b4:	ldr	r2, [lr, #4088]	; 0xff8
    11b8:	ldr	r2, [r2]
    11bc:	cmp	r2, #102	; 0x66
    11c0:	bcs	1228 <read_uint64+0x98>
    11c4:	cmp	r2, #100	; 0x64
    11c8:	bcs	11fc <read_uint64+0x6c>
    11cc:	cmp	r2, #0
    11d0:	beq	11ec <read_uint64+0x5c>
    11d4:	cmp	r2, #1
    11d8:	bne	124c <read_uint64+0xbc>
    11dc:	ldr	r4, [sp, #8]
    11e0:	ldr	lr, [sp, #4]
    11e4:	add	sp, sp, #16
    11e8:	b	0 <coda_bin_cursor_read_uint64>
    11ec:	ldr	r4, [sp, #8]
    11f0:	ldr	lr, [sp, #4]
    11f4:	add	sp, sp, #16
    11f8:	b	0 <coda_ascii_cursor_read_uint64>
    11fc:	cmp	r2, #100	; 0x64
    1200:	bne	1214 <read_uint64+0x84>
    1204:	ldr	r4, [sp, #8]
    1208:	ldr	lr, [sp, #4]
    120c:	add	sp, sp, #16
    1210:	b	0 <coda_mem_cursor_read_uint64>
    1214:	mvn	r0, #10
    1218:	mov	r1, #0
    121c:	bl	0 <coda_set_error>
    1220:	mvn	r4, #0
    1224:	b	1268 <read_uint64+0xd8>
    1228:	cmp	r2, #104	; 0x68
    122c:	bcs	124c <read_uint64+0xbc>
    1230:	cmp	r2, #102	; 0x66
    1234:	bne	124c <read_uint64+0xbc>
    1238:	mvn	r0, #12
    123c:	mov	r1, #0
    1240:	bl	0 <coda_set_error>
    1244:	mvn	r4, #0
    1248:	b	1268 <read_uint64+0xd8>
    124c:	ldr	r0, [pc, #44]	; 1280 <read_uint64+0xf0>
    1250:	ldr	r1, [pc, #36]	; 127c <read_uint64+0xec>
    1254:	movw	r2, #606	; 0x25e
    1258:	ldr	r3, [pc, #36]	; 1284 <read_uint64+0xf4>
    125c:	bl	0 <__assert_fail>
    1260:	mov	r0, #1
    1264:	bl	0 <exit>
    1268:	mov	r0, r4
    126c:	ldr	r4, [sp, #8]
    1270:	ldr	lr, [sp, #4]
    1274:	add	sp, sp, #16
    1278:	bx	lr
    127c:	.word	0x00000453
    1280:	.word	0x000004b3
    1284:	.word	0x000005ea

00001288 <read_float>:
    1288:	mov	ip, sp
    128c:	sub	sp, sp, #16
    1290:	str	ip, [sp]
    1294:	str	lr, [sp, #4]
    1298:	str	r4, [sp, #8]
    129c:	ldr	r2, [r0, #4]
    12a0:	lsl	r2, r2, #4
    12a4:	add	r2, r0, r2
    12a8:	sub	lr, r2, #4096	; 0x1000
    12ac:	ldr	r2, [lr, #4088]	; 0xff8
    12b0:	ldr	r3, [r2]
    12b4:	cmp	r3, #102	; 0x66
    12b8:	bcs	1320 <read_float+0x98>
    12bc:	cmp	r3, #100	; 0x64
    12c0:	bcs	12f4 <read_float+0x6c>
    12c4:	cmp	r3, #0
    12c8:	beq	12e4 <read_float+0x5c>
    12cc:	cmp	r3, #1
    12d0:	bne	1374 <read_float+0xec>
    12d4:	ldr	r4, [sp, #8]
    12d8:	ldr	lr, [sp, #4]
    12dc:	add	sp, sp, #16
    12e0:	b	0 <coda_bin_cursor_read_float>
    12e4:	ldr	r4, [sp, #8]
    12e8:	ldr	lr, [sp, #4]
    12ec:	add	sp, sp, #16
    12f0:	b	0 <coda_ascii_cursor_read_float>
    12f4:	cmp	r3, #100	; 0x64
    12f8:	bne	130c <read_float+0x84>
    12fc:	ldr	r4, [sp, #8]
    1300:	ldr	lr, [sp, #4]
    1304:	add	sp, sp, #16
    1308:	b	0 <coda_mem_cursor_read_float>
    130c:	mvn	r0, #10
    1310:	mov	r1, #0
    1314:	bl	0 <coda_set_error>
    1318:	mvn	r4, #0
    131c:	b	1390 <read_float+0x108>
    1320:	cmp	r3, #104	; 0x68
    1324:	bcs	1354 <read_float+0xcc>
    1328:	cmp	r3, #102	; 0x66
    132c:	bne	1344 <read_float+0xbc>
    1330:	mvn	r0, #12
    1334:	mov	r1, #0
    1338:	bl	0 <coda_set_error>
    133c:	mvn	r4, #0
    1340:	b	1390 <read_float+0x108>
    1344:	ldr	r4, [sp, #8]
    1348:	ldr	lr, [sp, #4]
    134c:	add	sp, sp, #16
    1350:	b	0 <coda_cdf_cursor_read_float>
    1354:	cmp	r3, #104	; 0x68
    1358:	beq	13a4 <read_float+0x11c>
    135c:	cmp	r3, #105	; 0x69
    1360:	bne	1374 <read_float+0xec>
    1364:	ldr	r4, [sp, #8]
    1368:	ldr	lr, [sp, #4]
    136c:	add	sp, sp, #16
    1370:	b	0 <coda_grib_cursor_read_float>
    1374:	ldr	r0, [pc, #64]	; 13bc <read_float+0x134>
    1378:	ldr	r1, [pc, #52]	; 13b4 <read_float+0x12c>
    137c:	movw	r2, #642	; 0x282
    1380:	ldr	r3, [pc, #48]	; 13b8 <read_float+0x130>
    1384:	bl	0 <__assert_fail>
    1388:	mov	r0, #1
    138c:	bl	0 <exit>
    1390:	mov	r0, r4
    1394:	ldr	r4, [sp, #8]
    1398:	ldr	lr, [sp, #4]
    139c:	add	sp, sp, #16
    13a0:	bx	lr
    13a4:	ldr	r4, [sp, #8]
    13a8:	ldr	lr, [sp, #4]
    13ac:	add	sp, sp, #16
    13b0:	b	0 <coda_netcdf_cursor_read_float>
    13b4:	.word	0x00000453
    13b8:	.word	0x000005f6
    13bc:	.word	0x000004b3

000013c0 <read_double>:
    13c0:	mov	ip, sp
    13c4:	sub	sp, sp, #552	; 0x228
    13c8:	str	ip, [sp]
    13cc:	str	lr, [sp, #4]
    13d0:	str	r4, [sp, #8]
    13d4:	str	r5, [sp, #12]
    13d8:	ldr	r2, [r0, #4]
    13dc:	lsl	ip, r2, #4
    13e0:	add	r2, r0, ip
    13e4:	sub	lr, r2, #4096	; 0x1000
    13e8:	ldr	r2, [lr, #4088]	; 0xff8
    13ec:	ldr	r3, [r2]
    13f0:	cmp	r3, #100	; 0x64
    13f4:	blt	13fc <read_double+0x3c>
    13f8:	ldr	r2, [r2, #4]
    13fc:	ldr	r3, [r2, #8]
    1400:	cmp	r3, #6
    1404:	bne	15b4 <read_double+0x1f4>
    1408:	ldr	r3, [r2, #40]	; 0x28
    140c:	cmp	r3, #2
    1410:	bne	1494 <read_double+0xd4>
    1414:	mov	r5, r1
    1418:	mov	r2, r0
    141c:	add	r3, sp, #16
    1420:	mov	lr, #130	; 0x82
    1424:	ldr	ip, [r2], #4
    1428:	subs	lr, lr, #1
    142c:	str	ip, [r3], #4
    1430:	bne	1424 <read_double+0x64>
    1434:	ldr	r2, [r0, #4]
    1438:	lsl	r3, r2, #4
    143c:	add	r1, r0, r3
    1440:	sub	lr, r1, #4096	; 0x1000
    1444:	ldr	r4, [lr, #4088]	; 0xff8
    1448:	ldr	r2, [r4]
    144c:	cmp	r2, #100	; 0x64
    1450:	blt	1458 <read_double+0x98>
    1454:	ldr	r4, [r4, #4]
    1458:	add	r0, sp, #16
    145c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1460:	cmp	r0, #0
    1464:	beq	1470 <read_double+0xb0>
    1468:	mvn	r0, #0
    146c:	b	1480 <read_double+0xc0>
    1470:	ldr	r0, [r4, #52]	; 0x34
    1474:	add	r1, sp, #16
    1478:	mov	r2, r5
    147c:	bl	0 <coda_expression_eval_float>
    1480:	ldr	r4, [sp, #8]
    1484:	ldr	r5, [sp, #12]
    1488:	ldr	lr, [sp, #4]
    148c:	add	sp, sp, #552	; 0x228
    1490:	bx	lr
    1494:	cmp	r3, #1
    1498:	bne	15b4 <read_double+0x1f4>
    149c:	mov	r4, r1
    14a0:	mov	r2, r0
    14a4:	add	r3, sp, #32
    14a8:	mov	lr, #130	; 0x82
    14ac:	ldr	ip, [r2], #4
    14b0:	subs	lr, lr, #1
    14b4:	str	ip, [r3], #4
    14b8:	bne	14ac <read_double+0xec>
    14bc:	add	r0, sp, #32
    14c0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    14c4:	cmp	r0, #0
    14c8:	beq	14d4 <read_double+0x114>
    14cc:	mvn	r0, #0
    14d0:	b	15a0 <read_double+0x1e0>
    14d4:	add	r0, sp, #32
    14d8:	bl	0 <coda_cursor_goto_first_record_field>
    14dc:	cmp	r0, #0
    14e0:	beq	14ec <read_double+0x12c>
    14e4:	mvn	r0, #0
    14e8:	b	15a0 <read_double+0x1e0>
    14ec:	add	r0, sp, #32
    14f0:	add	r1, sp, #16
    14f4:	bl	391c <coda_cursor_read_int32>
    14f8:	cmp	r0, #0
    14fc:	beq	1508 <read_double+0x148>
    1500:	mvn	r0, #0
    1504:	b	15a0 <read_double+0x1e0>
    1508:	add	r0, sp, #32
    150c:	bl	0 <coda_cursor_goto_next_record_field>
    1510:	cmp	r0, #0
    1514:	beq	1520 <read_double+0x160>
    1518:	mvn	r0, #0
    151c:	b	15a0 <read_double+0x1e0>
    1520:	add	r0, sp, #32
    1524:	add	r1, sp, #24
    1528:	bl	43bc <coda_cursor_read_double>
    152c:	cmp	r0, #0
    1530:	beq	153c <read_double+0x17c>
    1534:	mvn	r0, #0
    1538:	b	15a0 <read_double+0x1e0>
    153c:	vmov.f64	d1, #36	; 0x41200000  10.0
    1540:	ldr	r3, [sp, #16]
    1544:	rsb	r1, r3, #0
    1548:	vmov.f64	d0, #112	; 0x3f800000  1.0
    154c:	cmp	r1, #0
    1550:	bge	1578 <read_double+0x1b8>
    1554:	mov	ip, r1
    1558:	add	r1, ip, #1
    155c:	cmp	ip, #0
    1560:	beq	156c <read_double+0x1ac>
    1564:	vmul.f64	d0, d0, d1
    1568:	b	1554 <read_double+0x194>
    156c:	vmov.f64	d2, #112	; 0x3f800000  1.0
    1570:	vdiv.f64	d0, d2, d0
    1574:	b	1590 <read_double+0x1d0>
    1578:	mov	r2, r1
    157c:	sub	r1, r2, #1
    1580:	cmp	r2, #0
    1584:	beq	1590 <read_double+0x1d0>
    1588:	vmul.f64	d0, d0, d1
    158c:	b	1578 <read_double+0x1b8>
    1590:	vldr	d1, [sp, #24]
    1594:	vmul.f64	d4, d1, d0
    1598:	vstr	d4, [r4]
    159c:	mov	r0, #0
    15a0:	ldr	r4, [sp, #8]
    15a4:	ldr	r5, [sp, #12]
    15a8:	ldr	lr, [sp, #4]
    15ac:	add	sp, sp, #552	; 0x228
    15b0:	bx	lr
    15b4:	ldr	r2, [r0, #4]
    15b8:	lsl	ip, r2, #4
    15bc:	add	ip, r0, ip
    15c0:	sub	lr, ip, #4096	; 0x1000
    15c4:	ldr	r3, [lr, #4088]	; 0xff8
    15c8:	ldr	r3, [r3]
    15cc:	cmp	r3, #102	; 0x66
    15d0:	bcs	1644 <read_double+0x284>
    15d4:	cmp	r3, #100	; 0x64
    15d8:	bcs	1614 <read_double+0x254>
    15dc:	cmp	r3, #0
    15e0:	beq	1600 <read_double+0x240>
    15e4:	cmp	r3, #1
    15e8:	bne	1684 <read_double+0x2c4>
    15ec:	ldr	r4, [sp, #8]
    15f0:	ldr	r5, [sp, #12]
    15f4:	ldr	lr, [sp, #4]
    15f8:	add	sp, sp, #552	; 0x228
    15fc:	b	0 <coda_bin_cursor_read_double>
    1600:	ldr	r4, [sp, #8]
    1604:	ldr	r5, [sp, #12]
    1608:	ldr	lr, [sp, #4]
    160c:	add	sp, sp, #552	; 0x228
    1610:	b	0 <coda_ascii_cursor_read_double>
    1614:	cmp	r3, #100	; 0x64
    1618:	bne	1630 <read_double+0x270>
    161c:	ldr	r4, [sp, #8]
    1620:	ldr	r5, [sp, #12]
    1624:	ldr	lr, [sp, #4]
    1628:	add	sp, sp, #552	; 0x228
    162c:	b	0 <coda_mem_cursor_read_double>
    1630:	mvn	r0, #10
    1634:	mov	r1, #0
    1638:	bl	0 <coda_set_error>
    163c:	mvn	r4, #0
    1640:	b	16a0 <read_double+0x2e0>
    1644:	cmp	r3, #104	; 0x68
    1648:	bcs	167c <read_double+0x2bc>
    164c:	cmp	r3, #102	; 0x66
    1650:	bne	1668 <read_double+0x2a8>
    1654:	mvn	r0, #12
    1658:	mov	r1, #0
    165c:	bl	0 <coda_set_error>
    1660:	mvn	r4, #0
    1664:	b	16a0 <read_double+0x2e0>
    1668:	ldr	r4, [sp, #8]
    166c:	ldr	r5, [sp, #12]
    1670:	ldr	lr, [sp, #4]
    1674:	add	sp, sp, #552	; 0x228
    1678:	b	0 <coda_cdf_cursor_read_double>
    167c:	cmp	r3, #104	; 0x68
    1680:	beq	16b8 <read_double+0x2f8>
    1684:	ldr	r0, [pc, #72]	; 16d4 <read_double+0x314>
    1688:	ldr	r1, [pc, #64]	; 16d0 <read_double+0x310>
    168c:	mov	r2, #692	; 0x2b4
    1690:	ldr	r3, [pc, #52]	; 16cc <read_double+0x30c>
    1694:	bl	0 <__assert_fail>
    1698:	mov	r0, #1
    169c:	bl	0 <exit>
    16a0:	mov	r0, r4
    16a4:	ldr	r4, [sp, #8]
    16a8:	ldr	r5, [sp, #12]
    16ac:	ldr	lr, [sp, #4]
    16b0:	add	sp, sp, #552	; 0x228
    16b4:	bx	lr
    16b8:	ldr	r4, [sp, #8]
    16bc:	ldr	r5, [sp, #12]
    16c0:	ldr	lr, [sp, #4]
    16c4:	add	sp, sp, #552	; 0x228
    16c8:	b	0 <coda_netcdf_cursor_read_double>
    16cc:	.word	0x00000601
    16d0:	.word	0x00000453
    16d4:	.word	0x000004b3

000016d8 <read_int8_array>:
    16d8:	mov	ip, sp
    16dc:	sub	sp, sp, #24
    16e0:	str	ip, [sp]
    16e4:	str	lr, [sp, #4]
    16e8:	str	r4, [sp, #8]
    16ec:	str	r5, [sp, #12]
    16f0:	str	r6, [sp, #16]
    16f4:	mov	r6, r2
    16f8:	mov	r4, r1
    16fc:	mov	r5, r0
    1700:	ldr	r3, [r5, #4]
    1704:	lsl	r2, r3, #4
    1708:	add	r2, r5, r2
    170c:	sub	lr, r2, #4096	; 0x1000
    1710:	ldr	r0, [lr, #4088]	; 0xff8
    1714:	ldr	r1, [r0]
    1718:	cmp	r1, #102	; 0x66
    171c:	bcs	17c0 <read_int8_array+0xe8>
    1720:	cmp	r1, #100	; 0x64
    1724:	bcs	1780 <read_int8_array+0xa8>
    1728:	cmp	r1, #0
    172c:	beq	175c <read_int8_array+0x84>
    1730:	cmp	r1, #1
    1734:	bne	184c <read_int8_array+0x174>
    1738:	mov	r2, r6
    173c:	mov	r1, r4
    1740:	mov	r0, r5
    1744:	ldr	r4, [sp, #8]
    1748:	ldr	r5, [sp, #12]
    174c:	ldr	r6, [sp, #16]
    1750:	ldr	lr, [sp, #4]
    1754:	add	sp, sp, #24
    1758:	b	0 <coda_bin_cursor_read_int8_array>
    175c:	mov	r2, r6
    1760:	mov	r1, r4
    1764:	mov	r0, r5
    1768:	ldr	r4, [sp, #8]
    176c:	ldr	r5, [sp, #12]
    1770:	ldr	r6, [sp, #16]
    1774:	ldr	lr, [sp, #4]
    1778:	add	sp, sp, #24
    177c:	b	0 <coda_ascii_cursor_read_int8_array>
    1780:	cmp	r1, #100	; 0x64
    1784:	bne	17ac <read_int8_array+0xd4>
    1788:	mov	r2, r6
    178c:	mov	r1, r4
    1790:	mov	r0, r5
    1794:	ldr	r4, [sp, #8]
    1798:	ldr	r5, [sp, #12]
    179c:	ldr	r6, [sp, #16]
    17a0:	ldr	lr, [sp, #4]
    17a4:	add	sp, sp, #24
    17a8:	b	0 <coda_mem_cursor_read_int8_array>
    17ac:	mvn	r0, #10
    17b0:	mov	r1, #0
    17b4:	bl	0 <coda_set_error>
    17b8:	mvn	r0, #0
    17bc:	b	187c <read_int8_array+0x1a4>
    17c0:	cmp	r1, #104	; 0x68
    17c4:	bcs	1800 <read_int8_array+0x128>
    17c8:	cmp	r1, #102	; 0x66
    17cc:	bne	17e4 <read_int8_array+0x10c>
    17d0:	mvn	r0, #12
    17d4:	mov	r1, #0
    17d8:	bl	0 <coda_set_error>
    17dc:	mvn	r0, #0
    17e0:	b	187c <read_int8_array+0x1a4>
    17e4:	mov	r1, r4
    17e8:	mov	r0, r5
    17ec:	bl	0 <coda_cdf_cursor_read_int8_array>
    17f0:	cmp	r0, #0
    17f4:	beq	184c <read_int8_array+0x174>
    17f8:	mvn	r0, #0
    17fc:	b	187c <read_int8_array+0x1a4>
    1800:	cmp	r1, #104	; 0x68
    1804:	beq	1830 <read_int8_array+0x158>
    1808:	cmp	r1, #105	; 0x69
    180c:	bne	184c <read_int8_array+0x174>
    1810:	ldr	r0, [pc, #132]	; 189c <read_int8_array+0x1c4>
    1814:	ldr	r1, [pc, #124]	; 1898 <read_int8_array+0x1c0>
    1818:	movw	r2, #807	; 0x327
    181c:	ldr	r3, [pc, #112]	; 1894 <read_int8_array+0x1bc>
    1820:	bl	0 <__assert_fail>
    1824:	mov	r0, #1
    1828:	bl	0 <exit>
    182c:	b	184c <read_int8_array+0x174>
    1830:	mov	r1, r4
    1834:	mov	r0, r5
    1838:	bl	0 <coda_netcdf_cursor_read_int8_array>
    183c:	cmp	r0, #0
    1840:	beq	184c <read_int8_array+0x174>
    1844:	mvn	r0, #0
    1848:	b	187c <read_int8_array+0x1a4>
    184c:	cmp	r6, #0
    1850:	beq	1878 <read_int8_array+0x1a0>
    1854:	mov	r2, #1
    1858:	mov	r1, r4
    185c:	mov	r0, r5
    1860:	ldr	r4, [sp, #8]
    1864:	ldr	r5, [sp, #12]
    1868:	ldr	r6, [sp, #16]
    186c:	ldr	lr, [sp, #4]
    1870:	add	sp, sp, #24
    1874:	b	2b4 <transpose_array>
    1878:	mov	r0, #0
    187c:	ldr	r4, [sp, #8]
    1880:	ldr	r5, [sp, #12]
    1884:	ldr	r6, [sp, #16]
    1888:	ldr	lr, [sp, #4]
    188c:	add	sp, sp, #24
    1890:	bx	lr
    1894:	.word	0x00000623
    1898:	.word	0x00000453
    189c:	.word	0x000004b3

000018a0 <read_uint8_array>:
    18a0:	mov	ip, sp
    18a4:	sub	sp, sp, #24
    18a8:	str	ip, [sp]
    18ac:	str	lr, [sp, #4]
    18b0:	str	r4, [sp, #8]
    18b4:	str	r5, [sp, #12]
    18b8:	str	r6, [sp, #16]
    18bc:	mov	r4, r2
    18c0:	mov	r5, r1
    18c4:	mov	r6, r0
    18c8:	ldr	r2, [r6, #4]
    18cc:	lsl	r1, r2, #4
    18d0:	add	r3, r6, r1
    18d4:	sub	lr, r3, #4096	; 0x1000
    18d8:	ldr	r0, [lr, #4088]	; 0xff8
    18dc:	ldr	r0, [r0]
    18e0:	cmp	r0, #102	; 0x66
    18e4:	bcs	1988 <read_uint8_array+0xe8>
    18e8:	cmp	r0, #100	; 0x64
    18ec:	bcs	1948 <read_uint8_array+0xa8>
    18f0:	cmp	r0, #0
    18f4:	beq	1924 <read_uint8_array+0x84>
    18f8:	cmp	r0, #1
    18fc:	bne	19f4 <read_uint8_array+0x154>
    1900:	mov	r2, r4
    1904:	mov	r1, r5
    1908:	mov	r0, r6
    190c:	ldr	r4, [sp, #8]
    1910:	ldr	r5, [sp, #12]
    1914:	ldr	r6, [sp, #16]
    1918:	ldr	lr, [sp, #4]
    191c:	add	sp, sp, #24
    1920:	b	0 <coda_bin_cursor_read_uint8_array>
    1924:	mov	r2, r4
    1928:	mov	r1, r5
    192c:	mov	r0, r6
    1930:	ldr	r4, [sp, #8]
    1934:	ldr	r5, [sp, #12]
    1938:	ldr	r6, [sp, #16]
    193c:	ldr	lr, [sp, #4]
    1940:	add	sp, sp, #24
    1944:	b	0 <coda_ascii_cursor_read_uint8_array>
    1948:	cmp	r0, #100	; 0x64
    194c:	bne	1974 <read_uint8_array+0xd4>
    1950:	mov	r2, r4
    1954:	mov	r1, r5
    1958:	mov	r0, r6
    195c:	ldr	r4, [sp, #8]
    1960:	ldr	r5, [sp, #12]
    1964:	ldr	r6, [sp, #16]
    1968:	ldr	lr, [sp, #4]
    196c:	add	sp, sp, #24
    1970:	b	0 <coda_mem_cursor_read_uint8_array>
    1974:	mvn	r0, #10
    1978:	mov	r1, #0
    197c:	bl	0 <coda_set_error>
    1980:	mvn	r0, #0
    1984:	b	1a24 <read_uint8_array+0x184>
    1988:	cmp	r0, #104	; 0x68
    198c:	bcs	19c8 <read_uint8_array+0x128>
    1990:	cmp	r0, #102	; 0x66
    1994:	bne	19ac <read_uint8_array+0x10c>
    1998:	mvn	r0, #12
    199c:	mov	r1, #0
    19a0:	bl	0 <coda_set_error>
    19a4:	mvn	r0, #0
    19a8:	b	1a24 <read_uint8_array+0x184>
    19ac:	mov	r1, r5
    19b0:	mov	r0, r6
    19b4:	bl	0 <coda_cdf_cursor_read_uint8_array>
    19b8:	cmp	r0, #0
    19bc:	beq	19f4 <read_uint8_array+0x154>
    19c0:	mvn	r0, #0
    19c4:	b	1a24 <read_uint8_array+0x184>
    19c8:	cmp	r0, #104	; 0x68
    19cc:	beq	19d8 <read_uint8_array+0x138>
    19d0:	cmp	r0, #105	; 0x69
    19d4:	bne	19f4 <read_uint8_array+0x154>
    19d8:	ldr	r0, [pc, #96]	; 1a40 <read_uint8_array+0x1a0>
    19dc:	ldr	r1, [pc, #88]	; 1a3c <read_uint8_array+0x19c>
    19e0:	movw	r2, #859	; 0x35b
    19e4:	ldr	r3, [pc, #88]	; 1a44 <read_uint8_array+0x1a4>
    19e8:	bl	0 <__assert_fail>
    19ec:	mov	r0, #1
    19f0:	bl	0 <exit>
    19f4:	cmp	r4, #0
    19f8:	beq	1a20 <read_uint8_array+0x180>
    19fc:	mov	r2, #1
    1a00:	mov	r1, r5
    1a04:	mov	r0, r6
    1a08:	ldr	r4, [sp, #8]
    1a0c:	ldr	r5, [sp, #12]
    1a10:	ldr	r6, [sp, #16]
    1a14:	ldr	lr, [sp, #4]
    1a18:	add	sp, sp, #24
    1a1c:	b	2b4 <transpose_array>
    1a20:	mov	r0, #0
    1a24:	ldr	r4, [sp, #8]
    1a28:	ldr	r5, [sp, #12]
    1a2c:	ldr	r6, [sp, #16]
    1a30:	ldr	lr, [sp, #4]
    1a34:	add	sp, sp, #24
    1a38:	bx	lr
    1a3c:	.word	0x00000453
    1a40:	.word	0x000004b3
    1a44:	.word	0x00000633

00001a48 <read_int16_array>:
    1a48:	mov	ip, sp
    1a4c:	sub	sp, sp, #24
    1a50:	str	ip, [sp]
    1a54:	str	lr, [sp, #4]
    1a58:	str	r4, [sp, #8]
    1a5c:	str	r5, [sp, #12]
    1a60:	str	r6, [sp, #16]
    1a64:	mov	r6, r2
    1a68:	mov	r4, r1
    1a6c:	mov	r5, r0
    1a70:	ldr	r3, [r5, #4]
    1a74:	lsl	r2, r3, #4
    1a78:	add	r2, r5, r2
    1a7c:	sub	lr, r2, #4096	; 0x1000
    1a80:	ldr	r0, [lr, #4088]	; 0xff8
    1a84:	ldr	r1, [r0]
    1a88:	cmp	r1, #102	; 0x66
    1a8c:	bcs	1b30 <read_int16_array+0xe8>
    1a90:	cmp	r1, #100	; 0x64
    1a94:	bcs	1af0 <read_int16_array+0xa8>
    1a98:	cmp	r1, #0
    1a9c:	beq	1acc <read_int16_array+0x84>
    1aa0:	cmp	r1, #1
    1aa4:	bne	1bbc <read_int16_array+0x174>
    1aa8:	mov	r2, r6
    1aac:	mov	r1, r4
    1ab0:	mov	r0, r5
    1ab4:	ldr	r4, [sp, #8]
    1ab8:	ldr	r5, [sp, #12]
    1abc:	ldr	r6, [sp, #16]
    1ac0:	ldr	lr, [sp, #4]
    1ac4:	add	sp, sp, #24
    1ac8:	b	0 <coda_bin_cursor_read_int16_array>
    1acc:	mov	r2, r6
    1ad0:	mov	r1, r4
    1ad4:	mov	r0, r5
    1ad8:	ldr	r4, [sp, #8]
    1adc:	ldr	r5, [sp, #12]
    1ae0:	ldr	r6, [sp, #16]
    1ae4:	ldr	lr, [sp, #4]
    1ae8:	add	sp, sp, #24
    1aec:	b	0 <coda_ascii_cursor_read_int16_array>
    1af0:	cmp	r1, #100	; 0x64
    1af4:	bne	1b1c <read_int16_array+0xd4>
    1af8:	mov	r2, r6
    1afc:	mov	r1, r4
    1b00:	mov	r0, r5
    1b04:	ldr	r4, [sp, #8]
    1b08:	ldr	r5, [sp, #12]
    1b0c:	ldr	r6, [sp, #16]
    1b10:	ldr	lr, [sp, #4]
    1b14:	add	sp, sp, #24
    1b18:	b	0 <coda_mem_cursor_read_int16_array>
    1b1c:	mvn	r0, #10
    1b20:	mov	r1, #0
    1b24:	bl	0 <coda_set_error>
    1b28:	mvn	r0, #0
    1b2c:	b	1bec <read_int16_array+0x1a4>
    1b30:	cmp	r1, #104	; 0x68
    1b34:	bcs	1b70 <read_int16_array+0x128>
    1b38:	cmp	r1, #102	; 0x66
    1b3c:	bne	1b54 <read_int16_array+0x10c>
    1b40:	mvn	r0, #12
    1b44:	mov	r1, #0
    1b48:	bl	0 <coda_set_error>
    1b4c:	mvn	r0, #0
    1b50:	b	1bec <read_int16_array+0x1a4>
    1b54:	mov	r1, r4
    1b58:	mov	r0, r5
    1b5c:	bl	0 <coda_cdf_cursor_read_int16_array>
    1b60:	cmp	r0, #0
    1b64:	beq	1bbc <read_int16_array+0x174>
    1b68:	mvn	r0, #0
    1b6c:	b	1bec <read_int16_array+0x1a4>
    1b70:	cmp	r1, #104	; 0x68
    1b74:	beq	1ba0 <read_int16_array+0x158>
    1b78:	cmp	r1, #105	; 0x69
    1b7c:	bne	1bbc <read_int16_array+0x174>
    1b80:	ldr	r0, [pc, #132]	; 1c0c <read_int16_array+0x1c4>
    1b84:	ldr	r1, [pc, #124]	; 1c08 <read_int16_array+0x1c0>
    1b88:	mov	r2, #916	; 0x394
    1b8c:	ldr	r3, [pc, #112]	; 1c04 <read_int16_array+0x1bc>
    1b90:	bl	0 <__assert_fail>
    1b94:	mov	r0, #1
    1b98:	bl	0 <exit>
    1b9c:	b	1bbc <read_int16_array+0x174>
    1ba0:	mov	r1, r4
    1ba4:	mov	r0, r5
    1ba8:	bl	0 <coda_netcdf_cursor_read_int16_array>
    1bac:	cmp	r0, #0
    1bb0:	beq	1bbc <read_int16_array+0x174>
    1bb4:	mvn	r0, #0
    1bb8:	b	1bec <read_int16_array+0x1a4>
    1bbc:	cmp	r6, #0
    1bc0:	beq	1be8 <read_int16_array+0x1a0>
    1bc4:	mov	r2, #2
    1bc8:	mov	r1, r4
    1bcc:	mov	r0, r5
    1bd0:	ldr	r4, [sp, #8]
    1bd4:	ldr	r5, [sp, #12]
    1bd8:	ldr	r6, [sp, #16]
    1bdc:	ldr	lr, [sp, #4]
    1be0:	add	sp, sp, #24
    1be4:	b	2b4 <transpose_array>
    1be8:	mov	r0, #0
    1bec:	ldr	r4, [sp, #8]
    1bf0:	ldr	r5, [sp, #12]
    1bf4:	ldr	r6, [sp, #16]
    1bf8:	ldr	lr, [sp, #4]
    1bfc:	add	sp, sp, #24
    1c00:	bx	lr
    1c04:	.word	0x00000644
    1c08:	.word	0x00000453
    1c0c:	.word	0x000004b3

00001c10 <read_uint16_array>:
    1c10:	mov	ip, sp
    1c14:	sub	sp, sp, #24
    1c18:	str	ip, [sp]
    1c1c:	str	lr, [sp, #4]
    1c20:	str	r4, [sp, #8]
    1c24:	str	r5, [sp, #12]
    1c28:	str	r6, [sp, #16]
    1c2c:	mov	r4, r2
    1c30:	mov	r5, r1
    1c34:	mov	r6, r0
    1c38:	ldr	r2, [r6, #4]
    1c3c:	lsl	r1, r2, #4
    1c40:	add	r3, r6, r1
    1c44:	sub	lr, r3, #4096	; 0x1000
    1c48:	ldr	r0, [lr, #4088]	; 0xff8
    1c4c:	ldr	r0, [r0]
    1c50:	cmp	r0, #102	; 0x66
    1c54:	bcs	1cf8 <read_uint16_array+0xe8>
    1c58:	cmp	r0, #100	; 0x64
    1c5c:	bcs	1cb8 <read_uint16_array+0xa8>
    1c60:	cmp	r0, #0
    1c64:	beq	1c94 <read_uint16_array+0x84>
    1c68:	cmp	r0, #1
    1c6c:	bne	1d64 <read_uint16_array+0x154>
    1c70:	mov	r2, r4
    1c74:	mov	r1, r5
    1c78:	mov	r0, r6
    1c7c:	ldr	r4, [sp, #8]
    1c80:	ldr	r5, [sp, #12]
    1c84:	ldr	r6, [sp, #16]
    1c88:	ldr	lr, [sp, #4]
    1c8c:	add	sp, sp, #24
    1c90:	b	0 <coda_bin_cursor_read_uint16_array>
    1c94:	mov	r2, r4
    1c98:	mov	r1, r5
    1c9c:	mov	r0, r6
    1ca0:	ldr	r4, [sp, #8]
    1ca4:	ldr	r5, [sp, #12]
    1ca8:	ldr	r6, [sp, #16]
    1cac:	ldr	lr, [sp, #4]
    1cb0:	add	sp, sp, #24
    1cb4:	b	0 <coda_ascii_cursor_read_uint16_array>
    1cb8:	cmp	r0, #100	; 0x64
    1cbc:	bne	1ce4 <read_uint16_array+0xd4>
    1cc0:	mov	r2, r4
    1cc4:	mov	r1, r5
    1cc8:	mov	r0, r6
    1ccc:	ldr	r4, [sp, #8]
    1cd0:	ldr	r5, [sp, #12]
    1cd4:	ldr	r6, [sp, #16]
    1cd8:	ldr	lr, [sp, #4]
    1cdc:	add	sp, sp, #24
    1ce0:	b	0 <coda_mem_cursor_read_uint16_array>
    1ce4:	mvn	r0, #10
    1ce8:	mov	r1, #0
    1cec:	bl	0 <coda_set_error>
    1cf0:	mvn	r0, #0
    1cf4:	b	1d94 <read_uint16_array+0x184>
    1cf8:	cmp	r0, #104	; 0x68
    1cfc:	bcs	1d38 <read_uint16_array+0x128>
    1d00:	cmp	r0, #102	; 0x66
    1d04:	bne	1d1c <read_uint16_array+0x10c>
    1d08:	mvn	r0, #12
    1d0c:	mov	r1, #0
    1d10:	bl	0 <coda_set_error>
    1d14:	mvn	r0, #0
    1d18:	b	1d94 <read_uint16_array+0x184>
    1d1c:	mov	r1, r5
    1d20:	mov	r0, r6
    1d24:	bl	0 <coda_cdf_cursor_read_uint16_array>
    1d28:	cmp	r0, #0
    1d2c:	beq	1d64 <read_uint16_array+0x154>
    1d30:	mvn	r0, #0
    1d34:	b	1d94 <read_uint16_array+0x184>
    1d38:	cmp	r0, #104	; 0x68
    1d3c:	beq	1d48 <read_uint16_array+0x138>
    1d40:	cmp	r0, #105	; 0x69
    1d44:	bne	1d64 <read_uint16_array+0x154>
    1d48:	ldr	r0, [pc, #100]	; 1db4 <read_uint16_array+0x1a4>
    1d4c:	ldr	r1, [pc, #92]	; 1db0 <read_uint16_array+0x1a0>
    1d50:	mov	r2, #968	; 0x3c8
    1d54:	ldr	r3, [pc, #80]	; 1dac <read_uint16_array+0x19c>
    1d58:	bl	0 <__assert_fail>
    1d5c:	mov	r0, #1
    1d60:	bl	0 <exit>
    1d64:	cmp	r4, #0
    1d68:	beq	1d90 <read_uint16_array+0x180>
    1d6c:	mov	r2, #2
    1d70:	mov	r1, r5
    1d74:	mov	r0, r6
    1d78:	ldr	r4, [sp, #8]
    1d7c:	ldr	r5, [sp, #12]
    1d80:	ldr	r6, [sp, #16]
    1d84:	ldr	lr, [sp, #4]
    1d88:	add	sp, sp, #24
    1d8c:	b	2b4 <transpose_array>
    1d90:	mov	r0, #0
    1d94:	ldr	r4, [sp, #8]
    1d98:	ldr	r5, [sp, #12]
    1d9c:	ldr	r6, [sp, #16]
    1da0:	ldr	lr, [sp, #4]
    1da4:	add	sp, sp, #24
    1da8:	bx	lr
    1dac:	.word	0x00000655
    1db0:	.word	0x00000453
    1db4:	.word	0x000004b3

00001db8 <read_int32_array>:
    1db8:	mov	ip, sp
    1dbc:	sub	sp, sp, #24
    1dc0:	str	ip, [sp]
    1dc4:	str	lr, [sp, #4]
    1dc8:	str	r4, [sp, #8]
    1dcc:	str	r5, [sp, #12]
    1dd0:	str	r6, [sp, #16]
    1dd4:	mov	r6, r2
    1dd8:	mov	r4, r1
    1ddc:	mov	r5, r0
    1de0:	ldr	r3, [r5, #4]
    1de4:	lsl	r2, r3, #4
    1de8:	add	r2, r5, r2
    1dec:	sub	lr, r2, #4096	; 0x1000
    1df0:	ldr	r0, [lr, #4088]	; 0xff8
    1df4:	ldr	r1, [r0]
    1df8:	cmp	r1, #102	; 0x66
    1dfc:	bcs	1ea0 <read_int32_array+0xe8>
    1e00:	cmp	r1, #100	; 0x64
    1e04:	bcs	1e60 <read_int32_array+0xa8>
    1e08:	cmp	r1, #0
    1e0c:	beq	1e3c <read_int32_array+0x84>
    1e10:	cmp	r1, #1
    1e14:	bne	1f2c <read_int32_array+0x174>
    1e18:	mov	r2, r6
    1e1c:	mov	r1, r4
    1e20:	mov	r0, r5
    1e24:	ldr	r4, [sp, #8]
    1e28:	ldr	r5, [sp, #12]
    1e2c:	ldr	r6, [sp, #16]
    1e30:	ldr	lr, [sp, #4]
    1e34:	add	sp, sp, #24
    1e38:	b	0 <coda_bin_cursor_read_int32_array>
    1e3c:	mov	r2, r6
    1e40:	mov	r1, r4
    1e44:	mov	r0, r5
    1e48:	ldr	r4, [sp, #8]
    1e4c:	ldr	r5, [sp, #12]
    1e50:	ldr	r6, [sp, #16]
    1e54:	ldr	lr, [sp, #4]
    1e58:	add	sp, sp, #24
    1e5c:	b	0 <coda_ascii_cursor_read_int32_array>
    1e60:	cmp	r1, #100	; 0x64
    1e64:	bne	1e8c <read_int32_array+0xd4>
    1e68:	mov	r2, r6
    1e6c:	mov	r1, r4
    1e70:	mov	r0, r5
    1e74:	ldr	r4, [sp, #8]
    1e78:	ldr	r5, [sp, #12]
    1e7c:	ldr	r6, [sp, #16]
    1e80:	ldr	lr, [sp, #4]
    1e84:	add	sp, sp, #24
    1e88:	b	0 <coda_mem_cursor_read_int32_array>
    1e8c:	mvn	r0, #10
    1e90:	mov	r1, #0
    1e94:	bl	0 <coda_set_error>
    1e98:	mvn	r0, #0
    1e9c:	b	1f5c <read_int32_array+0x1a4>
    1ea0:	cmp	r1, #104	; 0x68
    1ea4:	bcs	1ee0 <read_int32_array+0x128>
    1ea8:	cmp	r1, #102	; 0x66
    1eac:	bne	1ec4 <read_int32_array+0x10c>
    1eb0:	mvn	r0, #12
    1eb4:	mov	r1, #0
    1eb8:	bl	0 <coda_set_error>
    1ebc:	mvn	r0, #0
    1ec0:	b	1f5c <read_int32_array+0x1a4>
    1ec4:	mov	r1, r4
    1ec8:	mov	r0, r5
    1ecc:	bl	0 <coda_cdf_cursor_read_int32_array>
    1ed0:	cmp	r0, #0
    1ed4:	beq	1f2c <read_int32_array+0x174>
    1ed8:	mvn	r0, #0
    1edc:	b	1f5c <read_int32_array+0x1a4>
    1ee0:	cmp	r1, #104	; 0x68
    1ee4:	beq	1f10 <read_int32_array+0x158>
    1ee8:	cmp	r1, #105	; 0x69
    1eec:	bne	1f2c <read_int32_array+0x174>
    1ef0:	ldr	r0, [pc, #132]	; 1f7c <read_int32_array+0x1c4>
    1ef4:	ldr	r1, [pc, #124]	; 1f78 <read_int32_array+0x1c0>
    1ef8:	movw	r2, #1025	; 0x401
    1efc:	ldr	r3, [pc, #112]	; 1f74 <read_int32_array+0x1bc>
    1f00:	bl	0 <__assert_fail>
    1f04:	mov	r0, #1
    1f08:	bl	0 <exit>
    1f0c:	b	1f2c <read_int32_array+0x174>
    1f10:	mov	r1, r4
    1f14:	mov	r0, r5
    1f18:	bl	0 <coda_netcdf_cursor_read_int32_array>
    1f1c:	cmp	r0, #0
    1f20:	beq	1f2c <read_int32_array+0x174>
    1f24:	mvn	r0, #0
    1f28:	b	1f5c <read_int32_array+0x1a4>
    1f2c:	cmp	r6, #0
    1f30:	beq	1f58 <read_int32_array+0x1a0>
    1f34:	mov	r2, #4
    1f38:	mov	r1, r4
    1f3c:	mov	r0, r5
    1f40:	ldr	r4, [sp, #8]
    1f44:	ldr	r5, [sp, #12]
    1f48:	ldr	r6, [sp, #16]
    1f4c:	ldr	lr, [sp, #4]
    1f50:	add	sp, sp, #24
    1f54:	b	2b4 <transpose_array>
    1f58:	mov	r0, #0
    1f5c:	ldr	r4, [sp, #8]
    1f60:	ldr	r5, [sp, #12]
    1f64:	ldr	r6, [sp, #16]
    1f68:	ldr	lr, [sp, #4]
    1f6c:	add	sp, sp, #24
    1f70:	bx	lr
    1f74:	.word	0x00000667
    1f78:	.word	0x00000453
    1f7c:	.word	0x000004b3

00001f80 <read_uint32_array>:
    1f80:	mov	ip, sp
    1f84:	sub	sp, sp, #24
    1f88:	str	ip, [sp]
    1f8c:	str	lr, [sp, #4]
    1f90:	str	r4, [sp, #8]
    1f94:	str	r5, [sp, #12]
    1f98:	str	r6, [sp, #16]
    1f9c:	mov	r4, r2
    1fa0:	mov	r5, r1
    1fa4:	mov	r6, r0
    1fa8:	ldr	r2, [r6, #4]
    1fac:	lsl	r1, r2, #4
    1fb0:	add	r3, r6, r1
    1fb4:	sub	lr, r3, #4096	; 0x1000
    1fb8:	ldr	r0, [lr, #4088]	; 0xff8
    1fbc:	ldr	r0, [r0]
    1fc0:	cmp	r0, #102	; 0x66
    1fc4:	bcs	2068 <read_uint32_array+0xe8>
    1fc8:	cmp	r0, #100	; 0x64
    1fcc:	bcs	2028 <read_uint32_array+0xa8>
    1fd0:	cmp	r0, #0
    1fd4:	beq	2004 <read_uint32_array+0x84>
    1fd8:	cmp	r0, #1
    1fdc:	bne	20d4 <read_uint32_array+0x154>
    1fe0:	mov	r2, r4
    1fe4:	mov	r1, r5
    1fe8:	mov	r0, r6
    1fec:	ldr	r4, [sp, #8]
    1ff0:	ldr	r5, [sp, #12]
    1ff4:	ldr	r6, [sp, #16]
    1ff8:	ldr	lr, [sp, #4]
    1ffc:	add	sp, sp, #24
    2000:	b	0 <coda_bin_cursor_read_uint32_array>
    2004:	mov	r2, r4
    2008:	mov	r1, r5
    200c:	mov	r0, r6
    2010:	ldr	r4, [sp, #8]
    2014:	ldr	r5, [sp, #12]
    2018:	ldr	r6, [sp, #16]
    201c:	ldr	lr, [sp, #4]
    2020:	add	sp, sp, #24
    2024:	b	0 <coda_ascii_cursor_read_uint32_array>
    2028:	cmp	r0, #100	; 0x64
    202c:	bne	2054 <read_uint32_array+0xd4>
    2030:	mov	r2, r4
    2034:	mov	r1, r5
    2038:	mov	r0, r6
    203c:	ldr	r4, [sp, #8]
    2040:	ldr	r5, [sp, #12]
    2044:	ldr	r6, [sp, #16]
    2048:	ldr	lr, [sp, #4]
    204c:	add	sp, sp, #24
    2050:	b	0 <coda_mem_cursor_read_uint32_array>
    2054:	mvn	r0, #10
    2058:	mov	r1, #0
    205c:	bl	0 <coda_set_error>
    2060:	mvn	r0, #0
    2064:	b	2104 <read_uint32_array+0x184>
    2068:	cmp	r0, #104	; 0x68
    206c:	bcs	20a8 <read_uint32_array+0x128>
    2070:	cmp	r0, #102	; 0x66
    2074:	bne	208c <read_uint32_array+0x10c>
    2078:	mvn	r0, #12
    207c:	mov	r1, #0
    2080:	bl	0 <coda_set_error>
    2084:	mvn	r0, #0
    2088:	b	2104 <read_uint32_array+0x184>
    208c:	mov	r1, r5
    2090:	mov	r0, r6
    2094:	bl	0 <coda_cdf_cursor_read_uint32_array>
    2098:	cmp	r0, #0
    209c:	beq	20d4 <read_uint32_array+0x154>
    20a0:	mvn	r0, #0
    20a4:	b	2104 <read_uint32_array+0x184>
    20a8:	cmp	r0, #104	; 0x68
    20ac:	beq	20b8 <read_uint32_array+0x138>
    20b0:	cmp	r0, #105	; 0x69
    20b4:	bne	20d4 <read_uint32_array+0x154>
    20b8:	ldr	r0, [pc, #96]	; 2120 <read_uint32_array+0x1a0>
    20bc:	ldr	r1, [pc, #88]	; 211c <read_uint32_array+0x19c>
    20c0:	movw	r2, #1077	; 0x435
    20c4:	ldr	r3, [pc, #88]	; 2124 <read_uint32_array+0x1a4>
    20c8:	bl	0 <__assert_fail>
    20cc:	mov	r0, #1
    20d0:	bl	0 <exit>
    20d4:	cmp	r4, #0
    20d8:	beq	2100 <read_uint32_array+0x180>
    20dc:	mov	r2, #4
    20e0:	mov	r1, r5
    20e4:	mov	r0, r6
    20e8:	ldr	r4, [sp, #8]
    20ec:	ldr	r5, [sp, #12]
    20f0:	ldr	r6, [sp, #16]
    20f4:	ldr	lr, [sp, #4]
    20f8:	add	sp, sp, #24
    20fc:	b	2b4 <transpose_array>
    2100:	mov	r0, #0
    2104:	ldr	r4, [sp, #8]
    2108:	ldr	r5, [sp, #12]
    210c:	ldr	r6, [sp, #16]
    2110:	ldr	lr, [sp, #4]
    2114:	add	sp, sp, #24
    2118:	bx	lr
    211c:	.word	0x00000453
    2120:	.word	0x000004b3
    2124:	.word	0x00000678

00002128 <read_int64_array>:
    2128:	mov	ip, sp
    212c:	sub	sp, sp, #24
    2130:	str	ip, [sp]
    2134:	str	lr, [sp, #4]
    2138:	str	r4, [sp, #8]
    213c:	str	r5, [sp, #12]
    2140:	str	r6, [sp, #16]
    2144:	mov	r4, r2
    2148:	mov	r5, r1
    214c:	mov	r6, r0
    2150:	ldr	r2, [r6, #4]
    2154:	lsl	r1, r2, #4
    2158:	add	r3, r6, r1
    215c:	sub	lr, r3, #4096	; 0x1000
    2160:	ldr	r0, [lr, #4088]	; 0xff8
    2164:	ldr	r0, [r0]
    2168:	cmp	r0, #102	; 0x66
    216c:	bcs	2210 <read_int64_array+0xe8>
    2170:	cmp	r0, #100	; 0x64
    2174:	bcs	21d0 <read_int64_array+0xa8>
    2178:	cmp	r0, #0
    217c:	beq	21ac <read_int64_array+0x84>
    2180:	cmp	r0, #1
    2184:	bne	227c <read_int64_array+0x154>
    2188:	mov	r2, r4
    218c:	mov	r1, r5
    2190:	mov	r0, r6
    2194:	ldr	r4, [sp, #8]
    2198:	ldr	r5, [sp, #12]
    219c:	ldr	r6, [sp, #16]
    21a0:	ldr	lr, [sp, #4]
    21a4:	add	sp, sp, #24
    21a8:	b	0 <coda_bin_cursor_read_int64_array>
    21ac:	mov	r2, r4
    21b0:	mov	r1, r5
    21b4:	mov	r0, r6
    21b8:	ldr	r4, [sp, #8]
    21bc:	ldr	r5, [sp, #12]
    21c0:	ldr	r6, [sp, #16]
    21c4:	ldr	lr, [sp, #4]
    21c8:	add	sp, sp, #24
    21cc:	b	0 <coda_ascii_cursor_read_int64_array>
    21d0:	cmp	r0, #100	; 0x64
    21d4:	bne	21fc <read_int64_array+0xd4>
    21d8:	mov	r2, r4
    21dc:	mov	r1, r5
    21e0:	mov	r0, r6
    21e4:	ldr	r4, [sp, #8]
    21e8:	ldr	r5, [sp, #12]
    21ec:	ldr	r6, [sp, #16]
    21f0:	ldr	lr, [sp, #4]
    21f4:	add	sp, sp, #24
    21f8:	b	0 <coda_mem_cursor_read_int64_array>
    21fc:	mvn	r0, #10
    2200:	mov	r1, #0
    2204:	bl	0 <coda_set_error>
    2208:	mvn	r0, #0
    220c:	b	22ac <read_int64_array+0x184>
    2210:	cmp	r0, #104	; 0x68
    2214:	bcs	2250 <read_int64_array+0x128>
    2218:	cmp	r0, #102	; 0x66
    221c:	bne	2234 <read_int64_array+0x10c>
    2220:	mvn	r0, #12
    2224:	mov	r1, #0
    2228:	bl	0 <coda_set_error>
    222c:	mvn	r0, #0
    2230:	b	22ac <read_int64_array+0x184>
    2234:	mov	r1, r5
    2238:	mov	r0, r6
    223c:	bl	0 <coda_cdf_cursor_read_int64_array>
    2240:	cmp	r0, #0
    2244:	beq	227c <read_int64_array+0x154>
    2248:	mvn	r0, #0
    224c:	b	22ac <read_int64_array+0x184>
    2250:	cmp	r0, #104	; 0x68
    2254:	beq	2260 <read_int64_array+0x138>
    2258:	cmp	r0, #105	; 0x69
    225c:	bne	227c <read_int64_array+0x154>
    2260:	ldr	r0, [pc, #100]	; 22cc <read_int64_array+0x1a4>
    2264:	ldr	r1, [pc, #92]	; 22c8 <read_int64_array+0x1a0>
    2268:	movw	r2, #1129	; 0x469
    226c:	ldr	r3, [pc, #80]	; 22c4 <read_int64_array+0x19c>
    2270:	bl	0 <__assert_fail>
    2274:	mov	r0, #1
    2278:	bl	0 <exit>
    227c:	cmp	r4, #0
    2280:	beq	22a8 <read_int64_array+0x180>
    2284:	mov	r2, #8
    2288:	mov	r1, r5
    228c:	mov	r0, r6
    2290:	ldr	r4, [sp, #8]
    2294:	ldr	r5, [sp, #12]
    2298:	ldr	r6, [sp, #16]
    229c:	ldr	lr, [sp, #4]
    22a0:	add	sp, sp, #24
    22a4:	b	2b4 <transpose_array>
    22a8:	mov	r0, #0
    22ac:	ldr	r4, [sp, #8]
    22b0:	ldr	r5, [sp, #12]
    22b4:	ldr	r6, [sp, #16]
    22b8:	ldr	lr, [sp, #4]
    22bc:	add	sp, sp, #24
    22c0:	bx	lr
    22c4:	.word	0x0000068a
    22c8:	.word	0x00000453
    22cc:	.word	0x000004b3

000022d0 <read_uint64_array>:
    22d0:	mov	ip, sp
    22d4:	sub	sp, sp, #24
    22d8:	str	ip, [sp]
    22dc:	str	lr, [sp, #4]
    22e0:	str	r4, [sp, #8]
    22e4:	str	r5, [sp, #12]
    22e8:	str	r6, [sp, #16]
    22ec:	mov	r4, r2
    22f0:	mov	r5, r1
    22f4:	mov	r6, r0
    22f8:	ldr	r0, [r6, #4]
    22fc:	lsl	r3, r0, #4
    2300:	add	r1, r6, r3
    2304:	sub	lr, r1, #4096	; 0x1000
    2308:	ldr	r2, [lr, #4088]	; 0xff8
    230c:	ldr	r2, [r2]
    2310:	cmp	r2, #102	; 0x66
    2314:	bcs	23b8 <read_uint64_array+0xe8>
    2318:	cmp	r2, #100	; 0x64
    231c:	bcs	2378 <read_uint64_array+0xa8>
    2320:	cmp	r2, #0
    2324:	beq	2354 <read_uint64_array+0x84>
    2328:	cmp	r2, #1
    232c:	bne	2408 <read_uint64_array+0x138>
    2330:	mov	r2, r4
    2334:	mov	r1, r5
    2338:	mov	r0, r6
    233c:	ldr	r4, [sp, #8]
    2340:	ldr	r5, [sp, #12]
    2344:	ldr	r6, [sp, #16]
    2348:	ldr	lr, [sp, #4]
    234c:	add	sp, sp, #24
    2350:	b	0 <coda_bin_cursor_read_uint64_array>
    2354:	mov	r2, r4
    2358:	mov	r1, r5
    235c:	mov	r0, r6
    2360:	ldr	r4, [sp, #8]
    2364:	ldr	r5, [sp, #12]
    2368:	ldr	r6, [sp, #16]
    236c:	ldr	lr, [sp, #4]
    2370:	add	sp, sp, #24
    2374:	b	0 <coda_ascii_cursor_read_uint64_array>
    2378:	cmp	r2, #100	; 0x64
    237c:	bne	23a4 <read_uint64_array+0xd4>
    2380:	mov	r2, r4
    2384:	mov	r1, r5
    2388:	mov	r0, r6
    238c:	ldr	r4, [sp, #8]
    2390:	ldr	r5, [sp, #12]
    2394:	ldr	r6, [sp, #16]
    2398:	ldr	lr, [sp, #4]
    239c:	add	sp, sp, #24
    23a0:	b	0 <coda_mem_cursor_read_uint64_array>
    23a4:	mvn	r0, #10
    23a8:	mov	r1, #0
    23ac:	bl	0 <coda_set_error>
    23b0:	mvn	r0, #0
    23b4:	b	2438 <read_uint64_array+0x168>
    23b8:	cmp	r2, #104	; 0x68
    23bc:	bcs	23dc <read_uint64_array+0x10c>
    23c0:	cmp	r2, #102	; 0x66
    23c4:	bne	23ec <read_uint64_array+0x11c>
    23c8:	mvn	r0, #12
    23cc:	mov	r1, #0
    23d0:	bl	0 <coda_set_error>
    23d4:	mvn	r0, #0
    23d8:	b	2438 <read_uint64_array+0x168>
    23dc:	cmp	r2, #104	; 0x68
    23e0:	beq	23ec <read_uint64_array+0x11c>
    23e4:	cmp	r2, #105	; 0x69
    23e8:	bne	2408 <read_uint64_array+0x138>
    23ec:	ldr	r0, [pc, #100]	; 2458 <read_uint64_array+0x188>
    23f0:	ldr	r1, [pc, #92]	; 2454 <read_uint64_array+0x184>
    23f4:	movw	r2, #1176	; 0x498
    23f8:	ldr	r3, [pc, #80]	; 2450 <read_uint64_array+0x180>
    23fc:	bl	0 <__assert_fail>
    2400:	mov	r0, #1
    2404:	bl	0 <exit>
    2408:	cmp	r4, #0
    240c:	beq	2434 <read_uint64_array+0x164>
    2410:	mov	r2, #8
    2414:	mov	r1, r5
    2418:	mov	r0, r6
    241c:	ldr	r4, [sp, #8]
    2420:	ldr	r5, [sp, #12]
    2424:	ldr	r6, [sp, #16]
    2428:	ldr	lr, [sp, #4]
    242c:	add	sp, sp, #24
    2430:	b	2b4 <transpose_array>
    2434:	mov	r0, #0
    2438:	ldr	r4, [sp, #8]
    243c:	ldr	r5, [sp, #12]
    2440:	ldr	r6, [sp, #16]
    2444:	ldr	lr, [sp, #4]
    2448:	add	sp, sp, #24
    244c:	bx	lr
    2450:	.word	0x0000069b
    2454:	.word	0x00000453
    2458:	.word	0x000004b3

0000245c <read_float_array>:
    245c:	mov	ip, sp
    2460:	sub	sp, sp, #24
    2464:	str	ip, [sp]
    2468:	str	lr, [sp, #4]
    246c:	str	r4, [sp, #8]
    2470:	str	r5, [sp, #12]
    2474:	str	r6, [sp, #16]
    2478:	mov	r6, r2
    247c:	mov	r4, r1
    2480:	mov	r5, r0
    2484:	ldr	ip, [r5, #4]
    2488:	lsl	r1, ip, #4
    248c:	add	ip, r5, r1
    2490:	sub	lr, ip, #4096	; 0x1000
    2494:	ldr	r2, [lr, #4088]	; 0xff8
    2498:	ldr	r0, [r2]
    249c:	cmp	r0, #102	; 0x66
    24a0:	bcs	2544 <read_float_array+0xe8>
    24a4:	cmp	r0, #100	; 0x64
    24a8:	bcs	2504 <read_float_array+0xa8>
    24ac:	cmp	r0, #0
    24b0:	beq	24e0 <read_float_array+0x84>
    24b4:	cmp	r0, #1
    24b8:	bne	25cc <read_float_array+0x170>
    24bc:	mov	r2, r6
    24c0:	mov	r1, r4
    24c4:	mov	r0, r5
    24c8:	ldr	r4, [sp, #8]
    24cc:	ldr	r5, [sp, #12]
    24d0:	ldr	r6, [sp, #16]
    24d4:	ldr	lr, [sp, #4]
    24d8:	add	sp, sp, #24
    24dc:	b	0 <coda_bin_cursor_read_float_array>
    24e0:	mov	r2, r6
    24e4:	mov	r1, r4
    24e8:	mov	r0, r5
    24ec:	ldr	r4, [sp, #8]
    24f0:	ldr	r5, [sp, #12]
    24f4:	ldr	r6, [sp, #16]
    24f8:	ldr	lr, [sp, #4]
    24fc:	add	sp, sp, #24
    2500:	b	0 <coda_ascii_cursor_read_float_array>
    2504:	cmp	r0, #100	; 0x64
    2508:	bne	2530 <read_float_array+0xd4>
    250c:	mov	r2, r6
    2510:	mov	r1, r4
    2514:	mov	r0, r5
    2518:	ldr	r4, [sp, #8]
    251c:	ldr	r5, [sp, #12]
    2520:	ldr	r6, [sp, #16]
    2524:	ldr	lr, [sp, #4]
    2528:	add	sp, sp, #24
    252c:	b	0 <coda_mem_cursor_read_float_array>
    2530:	mvn	r0, #10
    2534:	mov	r1, #0
    2538:	bl	0 <coda_set_error>
    253c:	mvn	r0, #0
    2540:	b	25fc <read_float_array+0x1a0>
    2544:	cmp	r0, #104	; 0x68
    2548:	bcs	2584 <read_float_array+0x128>
    254c:	cmp	r0, #102	; 0x66
    2550:	bne	2568 <read_float_array+0x10c>
    2554:	mvn	r0, #12
    2558:	mov	r1, #0
    255c:	bl	0 <coda_set_error>
    2560:	mvn	r0, #0
    2564:	b	25fc <read_float_array+0x1a0>
    2568:	mov	r1, r4
    256c:	mov	r0, r5
    2570:	bl	0 <coda_cdf_cursor_read_float_array>
    2574:	cmp	r0, #0
    2578:	beq	25cc <read_float_array+0x170>
    257c:	mvn	r0, #0
    2580:	b	25fc <read_float_array+0x1a0>
    2584:	cmp	r0, #104	; 0x68
    2588:	beq	25b0 <read_float_array+0x154>
    258c:	cmp	r0, #105	; 0x69
    2590:	bne	25cc <read_float_array+0x170>
    2594:	mov	r1, r4
    2598:	mov	r0, r5
    259c:	bl	0 <coda_grib_cursor_read_float_array>
    25a0:	cmp	r0, #0
    25a4:	beq	25cc <read_float_array+0x170>
    25a8:	mvn	r0, #0
    25ac:	b	25fc <read_float_array+0x1a0>
    25b0:	mov	r1, r4
    25b4:	mov	r0, r5
    25b8:	bl	0 <coda_netcdf_cursor_read_float_array>
    25bc:	cmp	r0, #0
    25c0:	beq	25cc <read_float_array+0x170>
    25c4:	mvn	r0, #0
    25c8:	b	25fc <read_float_array+0x1a0>
    25cc:	cmp	r6, #0
    25d0:	beq	25f8 <read_float_array+0x19c>
    25d4:	mov	r2, #4
    25d8:	mov	r1, r4
    25dc:	mov	r0, r5
    25e0:	ldr	r4, [sp, #8]
    25e4:	ldr	r5, [sp, #12]
    25e8:	ldr	r6, [sp, #16]
    25ec:	ldr	lr, [sp, #4]
    25f0:	add	sp, sp, #24
    25f4:	b	2b4 <transpose_array>
    25f8:	mov	r0, #0
    25fc:	ldr	r4, [sp, #8]
    2600:	ldr	r5, [sp, #12]
    2604:	ldr	r6, [sp, #16]
    2608:	ldr	lr, [sp, #4]
    260c:	add	sp, sp, #24
    2610:	bx	lr

00002614 <read_double_array>:
    2614:	mov	ip, sp
    2618:	sub	sp, sp, #32
    261c:	str	ip, [sp, #4]
    2620:	str	lr, [sp, #8]
    2624:	str	r4, [sp, #16]
    2628:	str	r5, [sp, #20]
    262c:	str	r6, [sp, #24]
    2630:	mov	r6, r2
    2634:	mov	r4, r1
    2638:	mov	r5, r0
    263c:	ldr	r3, [r5, #4]
    2640:	lsl	r2, r3, #4
    2644:	add	r2, r5, r2
    2648:	sub	lr, r2, #4096	; 0x1000
    264c:	ldr	r0, [lr, #4088]	; 0xff8
    2650:	ldr	r1, [r0]
    2654:	cmp	r1, #100	; 0x64
    2658:	blt	2660 <read_double_array+0x4c>
    265c:	ldr	r0, [r0, #4]
    2660:	ldr	r3, [r0, #40]	; 0x28
    2664:	ldr	r0, [r3, #8]
    2668:	cmp	r0, #6
    266c:	bne	268c <read_double_array+0x78>
    2670:	ldr	r1, [pc, #432]	; 2828 <read_double_array+0x214>
    2674:	mov	r3, #8
    2678:	str	r6, [sp]
    267c:	mov	r2, r4
    2680:	mov	r0, r5
    2684:	bl	0 <read_array>
    2688:	b	2808 <read_double_array+0x1f4>
    268c:	ldr	r0, [r5, #4]
    2690:	lsl	ip, r0, #4
    2694:	add	r2, r5, ip
    2698:	sub	lr, r2, #4096	; 0x1000
    269c:	ldr	ip, [lr, #4088]	; 0xff8
    26a0:	ldr	r1, [ip]
    26a4:	cmp	r1, #102	; 0x66
    26a8:	bcs	274c <read_double_array+0x138>
    26ac:	cmp	r1, #100	; 0x64
    26b0:	bcs	270c <read_double_array+0xf8>
    26b4:	cmp	r1, #0
    26b8:	beq	26e8 <read_double_array+0xd4>
    26bc:	cmp	r1, #1
    26c0:	bne	27d8 <read_double_array+0x1c4>
    26c4:	mov	r2, r6
    26c8:	mov	r1, r4
    26cc:	mov	r0, r5
    26d0:	ldr	r4, [sp, #16]
    26d4:	ldr	r5, [sp, #20]
    26d8:	ldr	r6, [sp, #24]
    26dc:	ldr	lr, [sp, #8]
    26e0:	add	sp, sp, #32
    26e4:	b	0 <coda_bin_cursor_read_double_array>
    26e8:	mov	r2, r6
    26ec:	mov	r1, r4
    26f0:	mov	r0, r5
    26f4:	ldr	r4, [sp, #16]
    26f8:	ldr	r5, [sp, #20]
    26fc:	ldr	r6, [sp, #24]
    2700:	ldr	lr, [sp, #8]
    2704:	add	sp, sp, #32
    2708:	b	0 <coda_ascii_cursor_read_double_array>
    270c:	cmp	r1, #100	; 0x64
    2710:	bne	2738 <read_double_array+0x124>
    2714:	mov	r2, r6
    2718:	mov	r1, r4
    271c:	mov	r0, r5
    2720:	ldr	r4, [sp, #16]
    2724:	ldr	r5, [sp, #20]
    2728:	ldr	r6, [sp, #24]
    272c:	ldr	lr, [sp, #8]
    2730:	add	sp, sp, #32
    2734:	b	0 <coda_mem_cursor_read_double_array>
    2738:	mvn	r0, #10
    273c:	mov	r1, #0
    2740:	bl	0 <coda_set_error>
    2744:	mvn	r0, #0
    2748:	b	2808 <read_double_array+0x1f4>
    274c:	cmp	r1, #104	; 0x68
    2750:	bcs	278c <read_double_array+0x178>
    2754:	cmp	r1, #102	; 0x66
    2758:	bne	2770 <read_double_array+0x15c>
    275c:	mvn	r0, #12
    2760:	mov	r1, #0
    2764:	bl	0 <coda_set_error>
    2768:	mvn	r0, #0
    276c:	b	2808 <read_double_array+0x1f4>
    2770:	mov	r1, r4
    2774:	mov	r0, r5
    2778:	bl	0 <coda_cdf_cursor_read_double_array>
    277c:	cmp	r0, #0
    2780:	beq	27d8 <read_double_array+0x1c4>
    2784:	mvn	r0, #0
    2788:	b	2808 <read_double_array+0x1f4>
    278c:	cmp	r1, #104	; 0x68
    2790:	beq	27bc <read_double_array+0x1a8>
    2794:	cmp	r1, #105	; 0x69
    2798:	bne	27d8 <read_double_array+0x1c4>
    279c:	ldr	r0, [pc, #136]	; 282c <read_double_array+0x218>
    27a0:	ldr	r1, [pc, #120]	; 2820 <read_double_array+0x20c>
    27a4:	movw	r2, #1301	; 0x515
    27a8:	ldr	r3, [pc, #116]	; 2824 <read_double_array+0x210>
    27ac:	bl	0 <__assert_fail>
    27b0:	mov	r0, #1
    27b4:	bl	0 <exit>
    27b8:	b	27d8 <read_double_array+0x1c4>
    27bc:	mov	r1, r4
    27c0:	mov	r0, r5
    27c4:	bl	0 <coda_netcdf_cursor_read_double_array>
    27c8:	cmp	r0, #0
    27cc:	beq	27d8 <read_double_array+0x1c4>
    27d0:	mvn	r0, #0
    27d4:	b	2808 <read_double_array+0x1f4>
    27d8:	cmp	r6, #0
    27dc:	beq	2804 <read_double_array+0x1f0>
    27e0:	mov	r2, #8
    27e4:	mov	r1, r4
    27e8:	mov	r0, r5
    27ec:	ldr	r4, [sp, #16]
    27f0:	ldr	r5, [sp, #20]
    27f4:	ldr	r6, [sp, #24]
    27f8:	ldr	lr, [sp, #8]
    27fc:	add	sp, sp, #32
    2800:	b	2b4 <transpose_array>
    2804:	mov	r0, #0
    2808:	ldr	r4, [sp, #16]
    280c:	ldr	r5, [sp, #20]
    2810:	ldr	r6, [sp, #24]
    2814:	ldr	lr, [sp, #8]
    2818:	add	sp, sp, #32
    281c:	bx	lr
    2820:	.word	0x00000453
    2824:	.word	0x000006ad
    2828:	.word	0x00000000
    282c:	.word	0x000004b3

00002830 <read_int8_partial_array>:
    2830:	mov	ip, sp
    2834:	sub	sp, sp, #16
    2838:	str	ip, [sp]
    283c:	str	lr, [sp, #4]
    2840:	str	r4, [sp, #8]
    2844:	ldr	ip, [r0, #4]
    2848:	lsl	ip, ip, #4
    284c:	add	ip, r0, ip
    2850:	sub	lr, ip, #4096	; 0x1000
    2854:	ldr	ip, [lr, #4088]	; 0xff8
    2858:	ldr	ip, [ip]
    285c:	cmp	ip, #102	; 0x66
    2860:	bcs	28c8 <read_int8_partial_array+0x98>
    2864:	cmp	ip, #100	; 0x64
    2868:	bcs	289c <read_int8_partial_array+0x6c>
    286c:	cmp	ip, #0
    2870:	beq	288c <read_int8_partial_array+0x5c>
    2874:	cmp	ip, #1
    2878:	bne	2904 <read_int8_partial_array+0xd4>
    287c:	ldr	r4, [sp, #8]
    2880:	ldr	lr, [sp, #4]
    2884:	add	sp, sp, #16
    2888:	b	0 <coda_bin_cursor_read_int8_partial_array>
    288c:	ldr	r4, [sp, #8]
    2890:	ldr	lr, [sp, #4]
    2894:	add	sp, sp, #16
    2898:	b	0 <coda_ascii_cursor_read_int8_partial_array>
    289c:	cmp	ip, #100	; 0x64
    28a0:	bne	28b4 <read_int8_partial_array+0x84>
    28a4:	ldr	r4, [sp, #8]
    28a8:	ldr	lr, [sp, #4]
    28ac:	add	sp, sp, #16
    28b0:	b	0 <coda_mem_cursor_read_int8_partial_array>
    28b4:	mvn	r0, #10
    28b8:	mov	r1, #0
    28bc:	bl	0 <coda_set_error>
    28c0:	mvn	r4, #0
    28c4:	b	2920 <read_int8_partial_array+0xf0>
    28c8:	cmp	ip, #104	; 0x68
    28cc:	bcs	28fc <read_int8_partial_array+0xcc>
    28d0:	cmp	ip, #102	; 0x66
    28d4:	bne	28ec <read_int8_partial_array+0xbc>
    28d8:	mvn	r0, #12
    28dc:	mov	r1, #0
    28e0:	bl	0 <coda_set_error>
    28e4:	mvn	r4, #0
    28e8:	b	2920 <read_int8_partial_array+0xf0>
    28ec:	ldr	r4, [sp, #8]
    28f0:	ldr	lr, [sp, #4]
    28f4:	add	sp, sp, #16
    28f8:	b	0 <coda_cdf_cursor_read_int8_partial_array>
    28fc:	cmp	ip, #104	; 0x68
    2900:	beq	2934 <read_int8_partial_array+0x104>
    2904:	ldr	r0, [pc, #64]	; 294c <read_int8_partial_array+0x11c>
    2908:	ldr	r1, [pc, #56]	; 2948 <read_int8_partial_array+0x118>
    290c:	mov	r2, #1392	; 0x570
    2910:	ldr	r3, [pc, #44]	; 2944 <read_int8_partial_array+0x114>
    2914:	bl	0 <__assert_fail>
    2918:	mov	r0, #1
    291c:	bl	0 <exit>
    2920:	mov	r0, r4
    2924:	ldr	r4, [sp, #8]
    2928:	ldr	lr, [sp, #4]
    292c:	add	sp, sp, #16
    2930:	bx	lr
    2934:	ldr	r4, [sp, #8]
    2938:	ldr	lr, [sp, #4]
    293c:	add	sp, sp, #16
    2940:	b	0 <coda_netcdf_cursor_read_int8_partial_array>
    2944:	.word	0x000006cf
    2948:	.word	0x00000453
    294c:	.word	0x000004b3

00002950 <read_uint8_partial_array>:
    2950:	mov	ip, sp
    2954:	sub	sp, sp, #16
    2958:	str	ip, [sp]
    295c:	str	lr, [sp, #4]
    2960:	str	r4, [sp, #8]
    2964:	ldr	ip, [r0, #4]
    2968:	lsl	ip, ip, #4
    296c:	add	ip, r0, ip
    2970:	sub	lr, ip, #4096	; 0x1000
    2974:	ldr	ip, [lr, #4088]	; 0xff8
    2978:	ldr	ip, [ip]
    297c:	cmp	ip, #102	; 0x66
    2980:	bcs	29e8 <read_uint8_partial_array+0x98>
    2984:	cmp	ip, #100	; 0x64
    2988:	bcs	29bc <read_uint8_partial_array+0x6c>
    298c:	cmp	ip, #0
    2990:	beq	29ac <read_uint8_partial_array+0x5c>
    2994:	cmp	ip, #1
    2998:	bne	2a1c <read_uint8_partial_array+0xcc>
    299c:	ldr	r4, [sp, #8]
    29a0:	ldr	lr, [sp, #4]
    29a4:	add	sp, sp, #16
    29a8:	b	0 <coda_bin_cursor_read_uint8_partial_array>
    29ac:	ldr	r4, [sp, #8]
    29b0:	ldr	lr, [sp, #4]
    29b4:	add	sp, sp, #16
    29b8:	b	0 <coda_ascii_cursor_read_uint8_partial_array>
    29bc:	cmp	ip, #100	; 0x64
    29c0:	bne	29d4 <read_uint8_partial_array+0x84>
    29c4:	ldr	r4, [sp, #8]
    29c8:	ldr	lr, [sp, #4]
    29cc:	add	sp, sp, #16
    29d0:	b	0 <coda_mem_cursor_read_uint8_partial_array>
    29d4:	mvn	r0, #10
    29d8:	mov	r1, #0
    29dc:	bl	0 <coda_set_error>
    29e0:	mvn	r4, #0
    29e4:	b	2a38 <read_uint8_partial_array+0xe8>
    29e8:	cmp	ip, #104	; 0x68
    29ec:	bcs	2a1c <read_uint8_partial_array+0xcc>
    29f0:	cmp	ip, #102	; 0x66
    29f4:	bne	2a0c <read_uint8_partial_array+0xbc>
    29f8:	mvn	r0, #12
    29fc:	mov	r1, #0
    2a00:	bl	0 <coda_set_error>
    2a04:	mvn	r4, #0
    2a08:	b	2a38 <read_uint8_partial_array+0xe8>
    2a0c:	ldr	r4, [sp, #8]
    2a10:	ldr	lr, [sp, #4]
    2a14:	add	sp, sp, #16
    2a18:	b	0 <coda_cdf_cursor_read_uint8_partial_array>
    2a1c:	ldr	r0, [pc, #48]	; 2a54 <read_uint8_partial_array+0x104>
    2a20:	ldr	r1, [pc, #40]	; 2a50 <read_uint8_partial_array+0x100>
    2a24:	movw	r2, #1427	; 0x593
    2a28:	ldr	r3, [pc, #28]	; 2a4c <read_uint8_partial_array+0xfc>
    2a2c:	bl	0 <__assert_fail>
    2a30:	mov	r0, #1
    2a34:	bl	0 <exit>
    2a38:	mov	r0, r4
    2a3c:	ldr	r4, [sp, #8]
    2a40:	ldr	lr, [sp, #4]
    2a44:	add	sp, sp, #16
    2a48:	bx	lr
    2a4c:	.word	0x000006e7
    2a50:	.word	0x00000453
    2a54:	.word	0x000004b3

00002a58 <read_int16_partial_array>:
    2a58:	mov	ip, sp
    2a5c:	sub	sp, sp, #16
    2a60:	str	ip, [sp]
    2a64:	str	lr, [sp, #4]
    2a68:	str	r4, [sp, #8]
    2a6c:	ldr	ip, [r0, #4]
    2a70:	lsl	ip, ip, #4
    2a74:	add	ip, r0, ip
    2a78:	sub	lr, ip, #4096	; 0x1000
    2a7c:	ldr	ip, [lr, #4088]	; 0xff8
    2a80:	ldr	ip, [ip]
    2a84:	cmp	ip, #102	; 0x66
    2a88:	bcs	2af0 <read_int16_partial_array+0x98>
    2a8c:	cmp	ip, #100	; 0x64
    2a90:	bcs	2ac4 <read_int16_partial_array+0x6c>
    2a94:	cmp	ip, #0
    2a98:	beq	2ab4 <read_int16_partial_array+0x5c>
    2a9c:	cmp	ip, #1
    2aa0:	bne	2b2c <read_int16_partial_array+0xd4>
    2aa4:	ldr	r4, [sp, #8]
    2aa8:	ldr	lr, [sp, #4]
    2aac:	add	sp, sp, #16
    2ab0:	b	0 <coda_bin_cursor_read_int16_partial_array>
    2ab4:	ldr	r4, [sp, #8]
    2ab8:	ldr	lr, [sp, #4]
    2abc:	add	sp, sp, #16
    2ac0:	b	0 <coda_ascii_cursor_read_int16_partial_array>
    2ac4:	cmp	ip, #100	; 0x64
    2ac8:	bne	2adc <read_int16_partial_array+0x84>
    2acc:	ldr	r4, [sp, #8]
    2ad0:	ldr	lr, [sp, #4]
    2ad4:	add	sp, sp, #16
    2ad8:	b	0 <coda_mem_cursor_read_int16_partial_array>
    2adc:	mvn	r0, #10
    2ae0:	mov	r1, #0
    2ae4:	bl	0 <coda_set_error>
    2ae8:	mvn	r4, #0
    2aec:	b	2b48 <read_int16_partial_array+0xf0>
    2af0:	cmp	ip, #104	; 0x68
    2af4:	bcs	2b24 <read_int16_partial_array+0xcc>
    2af8:	cmp	ip, #102	; 0x66
    2afc:	bne	2b14 <read_int16_partial_array+0xbc>
    2b00:	mvn	r0, #12
    2b04:	mov	r1, #0
    2b08:	bl	0 <coda_set_error>
    2b0c:	mvn	r4, #0
    2b10:	b	2b48 <read_int16_partial_array+0xf0>
    2b14:	ldr	r4, [sp, #8]
    2b18:	ldr	lr, [sp, #4]
    2b1c:	add	sp, sp, #16
    2b20:	b	0 <coda_cdf_cursor_read_int16_partial_array>
    2b24:	cmp	ip, #104	; 0x68
    2b28:	beq	2b5c <read_int16_partial_array+0x104>
    2b2c:	ldr	r0, [pc, #64]	; 2b74 <read_int16_partial_array+0x11c>
    2b30:	ldr	r1, [pc, #56]	; 2b70 <read_int16_partial_array+0x118>
    2b34:	movw	r2, #1463	; 0x5b7
    2b38:	ldr	r3, [pc, #44]	; 2b6c <read_int16_partial_array+0x114>
    2b3c:	bl	0 <__assert_fail>
    2b40:	mov	r0, #1
    2b44:	bl	0 <exit>
    2b48:	mov	r0, r4
    2b4c:	ldr	r4, [sp, #8]
    2b50:	ldr	lr, [sp, #4]
    2b54:	add	sp, sp, #16
    2b58:	bx	lr
    2b5c:	ldr	r4, [sp, #8]
    2b60:	ldr	lr, [sp, #4]
    2b64:	add	sp, sp, #16
    2b68:	b	0 <coda_netcdf_cursor_read_int16_partial_array>
    2b6c:	.word	0x00000700
    2b70:	.word	0x00000453
    2b74:	.word	0x000004b3

00002b78 <read_uint16_partial_array>:
    2b78:	mov	ip, sp
    2b7c:	sub	sp, sp, #16
    2b80:	str	ip, [sp]
    2b84:	str	lr, [sp, #4]
    2b88:	str	r4, [sp, #8]
    2b8c:	ldr	ip, [r0, #4]
    2b90:	lsl	ip, ip, #4
    2b94:	add	ip, r0, ip
    2b98:	sub	lr, ip, #4096	; 0x1000
    2b9c:	ldr	ip, [lr, #4088]	; 0xff8
    2ba0:	ldr	ip, [ip]
    2ba4:	cmp	ip, #102	; 0x66
    2ba8:	bcs	2c10 <read_uint16_partial_array+0x98>
    2bac:	cmp	ip, #100	; 0x64
    2bb0:	bcs	2be4 <read_uint16_partial_array+0x6c>
    2bb4:	cmp	ip, #0
    2bb8:	beq	2bd4 <read_uint16_partial_array+0x5c>
    2bbc:	cmp	ip, #1
    2bc0:	bne	2c44 <read_uint16_partial_array+0xcc>
    2bc4:	ldr	r4, [sp, #8]
    2bc8:	ldr	lr, [sp, #4]
    2bcc:	add	sp, sp, #16
    2bd0:	b	0 <coda_bin_cursor_read_uint16_partial_array>
    2bd4:	ldr	r4, [sp, #8]
    2bd8:	ldr	lr, [sp, #4]
    2bdc:	add	sp, sp, #16
    2be0:	b	0 <coda_ascii_cursor_read_uint16_partial_array>
    2be4:	cmp	ip, #100	; 0x64
    2be8:	bne	2bfc <read_uint16_partial_array+0x84>
    2bec:	ldr	r4, [sp, #8]
    2bf0:	ldr	lr, [sp, #4]
    2bf4:	add	sp, sp, #16
    2bf8:	b	0 <coda_mem_cursor_read_uint16_partial_array>
    2bfc:	mvn	r0, #10
    2c00:	mov	r1, #0
    2c04:	bl	0 <coda_set_error>
    2c08:	mvn	r4, #0
    2c0c:	b	2c60 <read_uint16_partial_array+0xe8>
    2c10:	cmp	ip, #104	; 0x68
    2c14:	bcs	2c44 <read_uint16_partial_array+0xcc>
    2c18:	cmp	ip, #102	; 0x66
    2c1c:	bne	2c34 <read_uint16_partial_array+0xbc>
    2c20:	mvn	r0, #12
    2c24:	mov	r1, #0
    2c28:	bl	0 <coda_set_error>
    2c2c:	mvn	r4, #0
    2c30:	b	2c60 <read_uint16_partial_array+0xe8>
    2c34:	ldr	r4, [sp, #8]
    2c38:	ldr	lr, [sp, #4]
    2c3c:	add	sp, sp, #16
    2c40:	b	0 <coda_cdf_cursor_read_uint16_partial_array>
    2c44:	ldr	r0, [pc, #48]	; 2c7c <read_uint16_partial_array+0x104>
    2c48:	ldr	r1, [pc, #36]	; 2c74 <read_uint16_partial_array+0xfc>
    2c4c:	movw	r2, #1498	; 0x5da
    2c50:	ldr	r3, [pc, #32]	; 2c78 <read_uint16_partial_array+0x100>
    2c54:	bl	0 <__assert_fail>
    2c58:	mov	r0, #1
    2c5c:	bl	0 <exit>
    2c60:	mov	r0, r4
    2c64:	ldr	r4, [sp, #8]
    2c68:	ldr	lr, [sp, #4]
    2c6c:	add	sp, sp, #16
    2c70:	bx	lr
    2c74:	.word	0x00000453
    2c78:	.word	0x00000719
    2c7c:	.word	0x000004b3

00002c80 <read_int32_partial_array>:
    2c80:	mov	ip, sp
    2c84:	sub	sp, sp, #16
    2c88:	str	ip, [sp]
    2c8c:	str	lr, [sp, #4]
    2c90:	str	r4, [sp, #8]
    2c94:	ldr	ip, [r0, #4]
    2c98:	lsl	ip, ip, #4
    2c9c:	add	ip, r0, ip
    2ca0:	sub	lr, ip, #4096	; 0x1000
    2ca4:	ldr	ip, [lr, #4088]	; 0xff8
    2ca8:	ldr	ip, [ip]
    2cac:	cmp	ip, #102	; 0x66
    2cb0:	bcs	2d18 <read_int32_partial_array+0x98>
    2cb4:	cmp	ip, #100	; 0x64
    2cb8:	bcs	2cec <read_int32_partial_array+0x6c>
    2cbc:	cmp	ip, #0
    2cc0:	beq	2cdc <read_int32_partial_array+0x5c>
    2cc4:	cmp	ip, #1
    2cc8:	bne	2d54 <read_int32_partial_array+0xd4>
    2ccc:	ldr	r4, [sp, #8]
    2cd0:	ldr	lr, [sp, #4]
    2cd4:	add	sp, sp, #16
    2cd8:	b	0 <coda_bin_cursor_read_int32_partial_array>
    2cdc:	ldr	r4, [sp, #8]
    2ce0:	ldr	lr, [sp, #4]
    2ce4:	add	sp, sp, #16
    2ce8:	b	0 <coda_ascii_cursor_read_int32_partial_array>
    2cec:	cmp	ip, #100	; 0x64
    2cf0:	bne	2d04 <read_int32_partial_array+0x84>
    2cf4:	ldr	r4, [sp, #8]
    2cf8:	ldr	lr, [sp, #4]
    2cfc:	add	sp, sp, #16
    2d00:	b	0 <coda_mem_cursor_read_int32_partial_array>
    2d04:	mvn	r0, #10
    2d08:	mov	r1, #0
    2d0c:	bl	0 <coda_set_error>
    2d10:	mvn	r4, #0
    2d14:	b	2d70 <read_int32_partial_array+0xf0>
    2d18:	cmp	ip, #104	; 0x68
    2d1c:	bcs	2d4c <read_int32_partial_array+0xcc>
    2d20:	cmp	ip, #102	; 0x66
    2d24:	bne	2d3c <read_int32_partial_array+0xbc>
    2d28:	mvn	r0, #12
    2d2c:	mov	r1, #0
    2d30:	bl	0 <coda_set_error>
    2d34:	mvn	r4, #0
    2d38:	b	2d70 <read_int32_partial_array+0xf0>
    2d3c:	ldr	r4, [sp, #8]
    2d40:	ldr	lr, [sp, #4]
    2d44:	add	sp, sp, #16
    2d48:	b	0 <coda_cdf_cursor_read_int32_partial_array>
    2d4c:	cmp	ip, #104	; 0x68
    2d50:	beq	2d84 <read_int32_partial_array+0x104>
    2d54:	ldr	r0, [pc, #64]	; 2d9c <read_int32_partial_array+0x11c>
    2d58:	ldr	r1, [pc, #56]	; 2d98 <read_int32_partial_array+0x118>
    2d5c:	movw	r2, #1534	; 0x5fe
    2d60:	ldr	r3, [pc, #44]	; 2d94 <read_int32_partial_array+0x114>
    2d64:	bl	0 <__assert_fail>
    2d68:	mov	r0, #1
    2d6c:	bl	0 <exit>
    2d70:	mov	r0, r4
    2d74:	ldr	r4, [sp, #8]
    2d78:	ldr	lr, [sp, #4]
    2d7c:	add	sp, sp, #16
    2d80:	bx	lr
    2d84:	ldr	r4, [sp, #8]
    2d88:	ldr	lr, [sp, #4]
    2d8c:	add	sp, sp, #16
    2d90:	b	0 <coda_netcdf_cursor_read_int32_partial_array>
    2d94:	.word	0x00000733
    2d98:	.word	0x00000453
    2d9c:	.word	0x000004b3

00002da0 <read_uint32_partial_array>:
    2da0:	mov	ip, sp
    2da4:	sub	sp, sp, #16
    2da8:	str	ip, [sp]
    2dac:	str	lr, [sp, #4]
    2db0:	str	r4, [sp, #8]
    2db4:	ldr	ip, [r0, #4]
    2db8:	lsl	ip, ip, #4
    2dbc:	add	ip, r0, ip
    2dc0:	sub	lr, ip, #4096	; 0x1000
    2dc4:	ldr	ip, [lr, #4088]	; 0xff8
    2dc8:	ldr	ip, [ip]
    2dcc:	cmp	ip, #102	; 0x66
    2dd0:	bcs	2e38 <read_uint32_partial_array+0x98>
    2dd4:	cmp	ip, #100	; 0x64
    2dd8:	bcs	2e0c <read_uint32_partial_array+0x6c>
    2ddc:	cmp	ip, #0
    2de0:	beq	2dfc <read_uint32_partial_array+0x5c>
    2de4:	cmp	ip, #1
    2de8:	bne	2e6c <read_uint32_partial_array+0xcc>
    2dec:	ldr	r4, [sp, #8]
    2df0:	ldr	lr, [sp, #4]
    2df4:	add	sp, sp, #16
    2df8:	b	0 <coda_bin_cursor_read_uint32_partial_array>
    2dfc:	ldr	r4, [sp, #8]
    2e00:	ldr	lr, [sp, #4]
    2e04:	add	sp, sp, #16
    2e08:	b	0 <coda_ascii_cursor_read_uint32_partial_array>
    2e0c:	cmp	ip, #100	; 0x64
    2e10:	bne	2e24 <read_uint32_partial_array+0x84>
    2e14:	ldr	r4, [sp, #8]
    2e18:	ldr	lr, [sp, #4]
    2e1c:	add	sp, sp, #16
    2e20:	b	0 <coda_mem_cursor_read_uint32_partial_array>
    2e24:	mvn	r0, #10
    2e28:	mov	r1, #0
    2e2c:	bl	0 <coda_set_error>
    2e30:	mvn	r4, #0
    2e34:	b	2e88 <read_uint32_partial_array+0xe8>
    2e38:	cmp	ip, #104	; 0x68
    2e3c:	bcs	2e6c <read_uint32_partial_array+0xcc>
    2e40:	cmp	ip, #102	; 0x66
    2e44:	bne	2e5c <read_uint32_partial_array+0xbc>
    2e48:	mvn	r0, #12
    2e4c:	mov	r1, #0
    2e50:	bl	0 <coda_set_error>
    2e54:	mvn	r4, #0
    2e58:	b	2e88 <read_uint32_partial_array+0xe8>
    2e5c:	ldr	r4, [sp, #8]
    2e60:	ldr	lr, [sp, #4]
    2e64:	add	sp, sp, #16
    2e68:	b	0 <coda_cdf_cursor_read_uint32_partial_array>
    2e6c:	ldr	r0, [pc, #44]	; 2ea0 <read_uint32_partial_array+0x100>
    2e70:	ldr	r1, [pc, #36]	; 2e9c <read_uint32_partial_array+0xfc>
    2e74:	movw	r2, #1569	; 0x621
    2e78:	ldr	r3, [pc, #36]	; 2ea4 <read_uint32_partial_array+0x104>
    2e7c:	bl	0 <__assert_fail>
    2e80:	mov	r0, #1
    2e84:	bl	0 <exit>
    2e88:	mov	r0, r4
    2e8c:	ldr	r4, [sp, #8]
    2e90:	ldr	lr, [sp, #4]
    2e94:	add	sp, sp, #16
    2e98:	bx	lr
    2e9c:	.word	0x00000453
    2ea0:	.word	0x000004b3
    2ea4:	.word	0x0000074c

00002ea8 <read_int64_partial_array>:
    2ea8:	mov	ip, sp
    2eac:	sub	sp, sp, #16
    2eb0:	str	ip, [sp]
    2eb4:	str	lr, [sp, #4]
    2eb8:	str	r4, [sp, #8]
    2ebc:	ldr	ip, [r0, #4]
    2ec0:	lsl	ip, ip, #4
    2ec4:	add	ip, r0, ip
    2ec8:	sub	lr, ip, #4096	; 0x1000
    2ecc:	ldr	ip, [lr, #4088]	; 0xff8
    2ed0:	ldr	ip, [ip]
    2ed4:	cmp	ip, #102	; 0x66
    2ed8:	bcs	2f40 <read_int64_partial_array+0x98>
    2edc:	cmp	ip, #100	; 0x64
    2ee0:	bcs	2f14 <read_int64_partial_array+0x6c>
    2ee4:	cmp	ip, #0
    2ee8:	beq	2f04 <read_int64_partial_array+0x5c>
    2eec:	cmp	ip, #1
    2ef0:	bne	2f74 <read_int64_partial_array+0xcc>
    2ef4:	ldr	r4, [sp, #8]
    2ef8:	ldr	lr, [sp, #4]
    2efc:	add	sp, sp, #16
    2f00:	b	0 <coda_bin_cursor_read_int64_partial_array>
    2f04:	ldr	r4, [sp, #8]
    2f08:	ldr	lr, [sp, #4]
    2f0c:	add	sp, sp, #16
    2f10:	b	0 <coda_ascii_cursor_read_int64_partial_array>
    2f14:	cmp	ip, #100	; 0x64
    2f18:	bne	2f2c <read_int64_partial_array+0x84>
    2f1c:	ldr	r4, [sp, #8]
    2f20:	ldr	lr, [sp, #4]
    2f24:	add	sp, sp, #16
    2f28:	b	0 <coda_mem_cursor_read_int64_partial_array>
    2f2c:	mvn	r0, #10
    2f30:	mov	r1, #0
    2f34:	bl	0 <coda_set_error>
    2f38:	mvn	r4, #0
    2f3c:	b	2f90 <read_int64_partial_array+0xe8>
    2f40:	cmp	ip, #104	; 0x68
    2f44:	bcs	2f74 <read_int64_partial_array+0xcc>
    2f48:	cmp	ip, #102	; 0x66
    2f4c:	bne	2f64 <read_int64_partial_array+0xbc>
    2f50:	mvn	r0, #12
    2f54:	mov	r1, #0
    2f58:	bl	0 <coda_set_error>
    2f5c:	mvn	r4, #0
    2f60:	b	2f90 <read_int64_partial_array+0xe8>
    2f64:	ldr	r4, [sp, #8]
    2f68:	ldr	lr, [sp, #4]
    2f6c:	add	sp, sp, #16
    2f70:	b	0 <coda_cdf_cursor_read_int64_partial_array>
    2f74:	ldr	r0, [pc, #48]	; 2fac <read_int64_partial_array+0x104>
    2f78:	ldr	r1, [pc, #36]	; 2fa4 <read_int64_partial_array+0xfc>
    2f7c:	movw	r2, #1604	; 0x644
    2f80:	ldr	r3, [pc, #32]	; 2fa8 <read_int64_partial_array+0x100>
    2f84:	bl	0 <__assert_fail>
    2f88:	mov	r0, #1
    2f8c:	bl	0 <exit>
    2f90:	mov	r0, r4
    2f94:	ldr	r4, [sp, #8]
    2f98:	ldr	lr, [sp, #4]
    2f9c:	add	sp, sp, #16
    2fa0:	bx	lr
    2fa4:	.word	0x00000453
    2fa8:	.word	0x00000766
    2fac:	.word	0x000004b3

00002fb0 <read_uint64_partial_array>:
    2fb0:	mov	ip, sp
    2fb4:	sub	sp, sp, #16
    2fb8:	str	ip, [sp]
    2fbc:	str	lr, [sp, #4]
    2fc0:	str	r4, [sp, #8]
    2fc4:	ldr	ip, [r0, #4]
    2fc8:	lsl	ip, ip, #4
    2fcc:	add	ip, r0, ip
    2fd0:	sub	lr, ip, #4096	; 0x1000
    2fd4:	ldr	ip, [lr, #4088]	; 0xff8
    2fd8:	ldr	ip, [ip]
    2fdc:	cmp	ip, #102	; 0x66
    2fe0:	bcs	3048 <read_uint64_partial_array+0x98>
    2fe4:	cmp	ip, #100	; 0x64
    2fe8:	bcs	301c <read_uint64_partial_array+0x6c>
    2fec:	cmp	ip, #0
    2ff0:	beq	300c <read_uint64_partial_array+0x5c>
    2ff4:	cmp	ip, #1
    2ff8:	bne	306c <read_uint64_partial_array+0xbc>
    2ffc:	ldr	r4, [sp, #8]
    3000:	ldr	lr, [sp, #4]
    3004:	add	sp, sp, #16
    3008:	b	0 <coda_bin_cursor_read_uint64_partial_array>
    300c:	ldr	r4, [sp, #8]
    3010:	ldr	lr, [sp, #4]
    3014:	add	sp, sp, #16
    3018:	b	0 <coda_ascii_cursor_read_uint64_partial_array>
    301c:	cmp	ip, #100	; 0x64
    3020:	bne	3034 <read_uint64_partial_array+0x84>
    3024:	ldr	r4, [sp, #8]
    3028:	ldr	lr, [sp, #4]
    302c:	add	sp, sp, #16
    3030:	b	0 <coda_mem_cursor_read_uint64_partial_array>
    3034:	mvn	r0, #10
    3038:	mov	r1, #0
    303c:	bl	0 <coda_set_error>
    3040:	mvn	r4, #0
    3044:	b	3088 <read_uint64_partial_array+0xd8>
    3048:	cmp	ip, #104	; 0x68
    304c:	bcs	306c <read_uint64_partial_array+0xbc>
    3050:	cmp	ip, #102	; 0x66
    3054:	bne	306c <read_uint64_partial_array+0xbc>
    3058:	mvn	r0, #12
    305c:	mov	r1, #0
    3060:	bl	0 <coda_set_error>
    3064:	mvn	r4, #0
    3068:	b	3088 <read_uint64_partial_array+0xd8>
    306c:	ldr	r0, [pc, #44]	; 30a0 <read_uint64_partial_array+0xf0>
    3070:	ldr	r1, [pc, #36]	; 309c <read_uint64_partial_array+0xec>
    3074:	movw	r2, #1638	; 0x666
    3078:	ldr	r3, [pc, #36]	; 30a4 <read_uint64_partial_array+0xf4>
    307c:	bl	0 <__assert_fail>
    3080:	mov	r0, #1
    3084:	bl	0 <exit>
    3088:	mov	r0, r4
    308c:	ldr	r4, [sp, #8]
    3090:	ldr	lr, [sp, #4]
    3094:	add	sp, sp, #16
    3098:	bx	lr
    309c:	.word	0x00000453
    30a0:	.word	0x000004b3
    30a4:	.word	0x0000077f

000030a8 <read_float_partial_array>:
    30a8:	mov	ip, sp
    30ac:	sub	sp, sp, #16
    30b0:	str	ip, [sp]
    30b4:	str	lr, [sp, #4]
    30b8:	str	r4, [sp, #8]
    30bc:	ldr	ip, [r0, #4]
    30c0:	lsl	ip, ip, #4
    30c4:	add	ip, r0, ip
    30c8:	sub	lr, ip, #4096	; 0x1000
    30cc:	ldr	ip, [lr, #4088]	; 0xff8
    30d0:	ldr	ip, [ip]
    30d4:	cmp	ip, #102	; 0x66
    30d8:	bcs	3140 <read_float_partial_array+0x98>
    30dc:	cmp	ip, #100	; 0x64
    30e0:	bcs	3114 <read_float_partial_array+0x6c>
    30e4:	cmp	ip, #0
    30e8:	beq	3104 <read_float_partial_array+0x5c>
    30ec:	cmp	ip, #1
    30f0:	bne	3194 <read_float_partial_array+0xec>
    30f4:	ldr	r4, [sp, #8]
    30f8:	ldr	lr, [sp, #4]
    30fc:	add	sp, sp, #16
    3100:	b	0 <coda_bin_cursor_read_float_partial_array>
    3104:	ldr	r4, [sp, #8]
    3108:	ldr	lr, [sp, #4]
    310c:	add	sp, sp, #16
    3110:	b	0 <coda_ascii_cursor_read_float_partial_array>
    3114:	cmp	ip, #100	; 0x64
    3118:	bne	312c <read_float_partial_array+0x84>
    311c:	ldr	r4, [sp, #8]
    3120:	ldr	lr, [sp, #4]
    3124:	add	sp, sp, #16
    3128:	b	0 <coda_mem_cursor_read_float_partial_array>
    312c:	mvn	r0, #10
    3130:	mov	r1, #0
    3134:	bl	0 <coda_set_error>
    3138:	mvn	r4, #0
    313c:	b	31b0 <read_float_partial_array+0x108>
    3140:	cmp	ip, #104	; 0x68
    3144:	bcs	3174 <read_float_partial_array+0xcc>
    3148:	cmp	ip, #102	; 0x66
    314c:	bne	3164 <read_float_partial_array+0xbc>
    3150:	mvn	r0, #12
    3154:	mov	r1, #0
    3158:	bl	0 <coda_set_error>
    315c:	mvn	r4, #0
    3160:	b	31b0 <read_float_partial_array+0x108>
    3164:	ldr	r4, [sp, #8]
    3168:	ldr	lr, [sp, #4]
    316c:	add	sp, sp, #16
    3170:	b	0 <coda_cdf_cursor_read_float_partial_array>
    3174:	cmp	ip, #104	; 0x68
    3178:	beq	31c4 <read_float_partial_array+0x11c>
    317c:	cmp	ip, #105	; 0x69
    3180:	bne	3194 <read_float_partial_array+0xec>
    3184:	ldr	r4, [sp, #8]
    3188:	ldr	lr, [sp, #4]
    318c:	add	sp, sp, #16
    3190:	b	0 <coda_grib_cursor_read_float_partial_array>
    3194:	ldr	r0, [pc, #64]	; 31dc <read_float_partial_array+0x134>
    3198:	ldr	r1, [pc, #56]	; 31d8 <read_float_partial_array+0x130>
    319c:	movw	r2, #1674	; 0x68a
    31a0:	ldr	r3, [pc, #44]	; 31d4 <read_float_partial_array+0x12c>
    31a4:	bl	0 <__assert_fail>
    31a8:	mov	r0, #1
    31ac:	bl	0 <exit>
    31b0:	mov	r0, r4
    31b4:	ldr	r4, [sp, #8]
    31b8:	ldr	lr, [sp, #4]
    31bc:	add	sp, sp, #16
    31c0:	bx	lr
    31c4:	ldr	r4, [sp, #8]
    31c8:	ldr	lr, [sp, #4]
    31cc:	add	sp, sp, #16
    31d0:	b	0 <coda_netcdf_cursor_read_float_partial_array>
    31d4:	.word	0x00000799
    31d8:	.word	0x00000453
    31dc:	.word	0x000004b3

000031e0 <read_double_partial_array>:
    31e0:	mov	ip, sp
    31e4:	sub	sp, sp, #544	; 0x220
    31e8:	str	ip, [sp]
    31ec:	str	lr, [sp, #4]
    31f0:	str	r4, [sp, #8]
    31f4:	str	r5, [sp, #12]
    31f8:	str	r6, [sp, #16]
    31fc:	str	r7, [sp, #20]
    3200:	mov	r5, r3
    3204:	ldr	r3, [r0, #4]
    3208:	lsl	r3, r3, #4
    320c:	add	r3, r0, r3
    3210:	sub	lr, r3, #4096	; 0x1000
    3214:	ldr	r3, [lr, #4088]	; 0xff8
    3218:	ldr	ip, [r3]
    321c:	cmp	ip, #100	; 0x64
    3220:	blt	3228 <read_double_partial_array+0x48>
    3224:	ldr	r3, [r3, #4]
    3228:	ldr	r3, [r3, #40]	; 0x28
    322c:	ldr	r3, [r3, #8]
    3230:	cmp	r3, #6
    3234:	bne	32d8 <read_double_partial_array+0xf8>
    3238:	mov	r6, #8
    323c:	mov	r4, r2
    3240:	mov	r2, r0
    3244:	add	r3, sp, #24
    3248:	mov	lr, #130	; 0x82
    324c:	ldr	ip, [r2], #4
    3250:	subs	lr, lr, #1
    3254:	str	ip, [r3], #4
    3258:	bne	324c <read_double_partial_array+0x6c>
    325c:	cmp	r4, #0
    3260:	ble	32d0 <read_double_partial_array+0xf0>
    3264:	add	r0, sp, #24
    3268:	bl	0 <coda_cursor_goto_array_element_by_index>
    326c:	cmp	r0, #0
    3270:	beq	327c <read_double_partial_array+0x9c>
    3274:	mvn	r4, #0
    3278:	b	33f4 <read_double_partial_array+0x214>
    327c:	mov	r7, #0
    3280:	cmp	r7, r4
    3284:	bge	32d0 <read_double_partial_array+0xf0>
    3288:	add	r0, sp, #24
    328c:	mla	r1, r6, r7, r5
    3290:	bl	13c0 <read_double>
    3294:	cmp	r0, #0
    3298:	beq	32a4 <read_double_partial_array+0xc4>
    329c:	mvn	r4, #0
    32a0:	b	33f4 <read_double_partial_array+0x214>
    32a4:	sub	r2, r4, #1
    32a8:	cmp	r7, r2
    32ac:	bge	32c8 <read_double_partial_array+0xe8>
    32b0:	add	r0, sp, #24
    32b4:	bl	0 <coda_cursor_goto_next_array_element>
    32b8:	cmp	r0, #0
    32bc:	beq	32c8 <read_double_partial_array+0xe8>
    32c0:	mvn	r4, #0
    32c4:	b	33f4 <read_double_partial_array+0x214>
    32c8:	add	r7, r7, #1
    32cc:	b	3280 <read_double_partial_array+0xa0>
    32d0:	mov	r4, #0
    32d4:	b	33f4 <read_double_partial_array+0x214>
    32d8:	ldr	r3, [r0, #4]
    32dc:	lsl	r3, r3, #4
    32e0:	add	r3, r0, r3
    32e4:	sub	lr, r3, #4096	; 0x1000
    32e8:	ldr	r3, [lr, #4088]	; 0xff8
    32ec:	ldr	r3, [r3]
    32f0:	cmp	r3, #102	; 0x66
    32f4:	bcs	338c <read_double_partial_array+0x1ac>
    32f8:	cmp	r3, #100	; 0x64
    32fc:	bcs	3350 <read_double_partial_array+0x170>
    3300:	cmp	r3, #0
    3304:	beq	3330 <read_double_partial_array+0x150>
    3308:	cmp	r3, #1
    330c:	bne	33d8 <read_double_partial_array+0x1f8>
    3310:	mov	r3, r5
    3314:	ldr	r4, [sp, #8]
    3318:	ldr	r5, [sp, #12]
    331c:	ldr	r6, [sp, #16]
    3320:	ldr	r7, [sp, #20]
    3324:	ldr	lr, [sp, #4]
    3328:	add	sp, sp, #544	; 0x220
    332c:	b	0 <coda_bin_cursor_read_double_partial_array>
    3330:	mov	r3, r5
    3334:	ldr	r4, [sp, #8]
    3338:	ldr	r5, [sp, #12]
    333c:	ldr	r6, [sp, #16]
    3340:	ldr	r7, [sp, #20]
    3344:	ldr	lr, [sp, #4]
    3348:	add	sp, sp, #544	; 0x220
    334c:	b	0 <coda_ascii_cursor_read_double_partial_array>
    3350:	cmp	r3, #100	; 0x64
    3354:	bne	3378 <read_double_partial_array+0x198>
    3358:	mov	r3, r5
    335c:	ldr	r4, [sp, #8]
    3360:	ldr	r5, [sp, #12]
    3364:	ldr	r6, [sp, #16]
    3368:	ldr	r7, [sp, #20]
    336c:	ldr	lr, [sp, #4]
    3370:	add	sp, sp, #544	; 0x220
    3374:	b	0 <coda_mem_cursor_read_double_partial_array>
    3378:	mvn	r0, #10
    337c:	mov	r1, #0
    3380:	bl	0 <coda_set_error>
    3384:	mvn	r4, #0
    3388:	b	33f4 <read_double_partial_array+0x214>
    338c:	cmp	r3, #104	; 0x68
    3390:	bcs	33d0 <read_double_partial_array+0x1f0>
    3394:	cmp	r3, #102	; 0x66
    3398:	bne	33b0 <read_double_partial_array+0x1d0>
    339c:	mvn	r0, #12
    33a0:	mov	r1, #0
    33a4:	bl	0 <coda_set_error>
    33a8:	mvn	r4, #0
    33ac:	b	33f4 <read_double_partial_array+0x214>
    33b0:	mov	r3, r5
    33b4:	ldr	r4, [sp, #8]
    33b8:	ldr	r5, [sp, #12]
    33bc:	ldr	r6, [sp, #16]
    33c0:	ldr	r7, [sp, #20]
    33c4:	ldr	lr, [sp, #4]
    33c8:	add	sp, sp, #544	; 0x220
    33cc:	b	0 <coda_cdf_cursor_read_double_partial_array>
    33d0:	cmp	r3, #104	; 0x68
    33d4:	beq	3414 <read_double_partial_array+0x234>
    33d8:	ldr	r0, [pc, #92]	; 343c <read_double_partial_array+0x25c>
    33dc:	ldr	r1, [pc, #80]	; 3434 <read_double_partial_array+0x254>
    33e0:	movw	r2, #1718	; 0x6b6
    33e4:	ldr	r3, [pc, #76]	; 3438 <read_double_partial_array+0x258>
    33e8:	bl	0 <__assert_fail>
    33ec:	mov	r0, #1
    33f0:	bl	0 <exit>
    33f4:	mov	r0, r4
    33f8:	ldr	r4, [sp, #8]
    33fc:	ldr	r5, [sp, #12]
    3400:	ldr	r6, [sp, #16]
    3404:	ldr	r7, [sp, #20]
    3408:	ldr	lr, [sp, #4]
    340c:	add	sp, sp, #544	; 0x220
    3410:	bx	lr
    3414:	mov	r3, r5
    3418:	ldr	r4, [sp, #8]
    341c:	ldr	r5, [sp, #12]
    3420:	ldr	r6, [sp, #16]
    3424:	ldr	r7, [sp, #20]
    3428:	ldr	lr, [sp, #4]
    342c:	add	sp, sp, #544	; 0x220
    3430:	b	0 <coda_netcdf_cursor_read_double_partial_array>
    3434:	.word	0x00000453
    3438:	.word	0x000007b2
    343c:	.word	0x000004b3

00003440 <coda_cursor_read_int8>:
    3440:	mov	ip, sp
    3444:	sub	sp, sp, #24
    3448:	str	ip, [sp]
    344c:	str	lr, [sp, #4]
    3450:	str	r4, [sp, #8]
    3454:	str	r5, [sp, #12]
    3458:	mov	r5, r1
    345c:	mov	r4, r0
    3460:	cmp	r4, #0
    3464:	beq	3518 <coda_cursor_read_int8+0xd8>
    3468:	ldr	r0, [r4, #4]
    346c:	cmp	r0, #0
    3470:	ble	3518 <coda_cursor_read_int8+0xd8>
    3474:	lsl	ip, r0, #4
    3478:	add	r3, r4, ip
    347c:	sub	lr, r3, #4096	; 0x1000
    3480:	ldr	r1, [lr, #4088]	; 0xff8
    3484:	cmp	r1, #0
    3488:	beq	3518 <coda_cursor_read_int8+0xd8>
    348c:	cmp	r5, #0
    3490:	bne	34b0 <coda_cursor_read_int8+0x70>
    3494:	mvn	r0, #99	; 0x63
    3498:	ldr	r1, [pc, #176]	; 3550 <coda_cursor_read_int8+0x110>
    349c:	ldr	r2, [pc, #164]	; 3548 <coda_cursor_read_int8+0x108>
    34a0:	movw	r3, #1778	; 0x6f2
    34a4:	bl	0 <coda_set_error>
    34a8:	mvn	r0, #0
    34ac:	b	3530 <coda_cursor_read_int8+0xf0>
    34b0:	add	r1, sp, #16
    34b4:	mov	r0, r4
    34b8:	bl	740 <get_read_type>
    34bc:	cmp	r0, #0
    34c0:	beq	34cc <coda_cursor_read_int8+0x8c>
    34c4:	mvn	r0, #0
    34c8:	b	3530 <coda_cursor_read_int8+0xf0>
    34cc:	ldr	r0, [sp, #16]
    34d0:	cmp	r0, #0
    34d4:	bne	34fc <coda_cursor_read_int8+0xbc>
    34d8:	mov	r1, r5
    34dc:	mov	r0, r4
    34e0:	bl	a38 <read_int8>
    34e4:	cmp	r0, #0
    34e8:	beq	34f4 <coda_cursor_read_int8+0xb4>
    34ec:	mvn	r0, #0
    34f0:	b	3530 <coda_cursor_read_int8+0xf0>
    34f4:	mov	r0, #0
    34f8:	b	3530 <coda_cursor_read_int8+0xf0>
    34fc:	bl	0 <coda_type_get_native_type_name>
    3500:	mov	r2, r0
    3504:	mvn	r0, #104	; 0x68
    3508:	ldr	r1, [pc, #52]	; 3544 <coda_cursor_read_int8+0x104>
    350c:	bl	0 <coda_set_error>
    3510:	mvn	r0, #0
    3514:	b	3530 <coda_cursor_read_int8+0xf0>
    3518:	mvn	r0, #99	; 0x63
    351c:	ldr	r1, [pc, #40]	; 354c <coda_cursor_read_int8+0x10c>
    3520:	ldr	r2, [pc, #32]	; 3548 <coda_cursor_read_int8+0x108>
    3524:	movw	r3, #1773	; 0x6ed
    3528:	bl	0 <coda_set_error>
    352c:	mvn	r0, #0
    3530:	ldr	r4, [sp, #8]
    3534:	ldr	r5, [sp, #12]
    3538:	ldr	lr, [sp, #4]
    353c:	add	sp, sp, #24
    3540:	bx	lr
    3544:	.word	0x000003cc
    3548:	.word	0x00000453
    354c:	.word	0x0000022b
    3550:	.word	0x0000005b

00003554 <coda_cursor_read_uint8>:
    3554:	mov	ip, sp
    3558:	sub	sp, sp, #24
    355c:	str	ip, [sp]
    3560:	str	lr, [sp, #4]
    3564:	str	r4, [sp, #8]
    3568:	str	r5, [sp, #12]
    356c:	mov	r5, r1
    3570:	mov	r4, r0
    3574:	cmp	r4, #0
    3578:	beq	362c <coda_cursor_read_uint8+0xd8>
    357c:	ldr	r0, [r4, #4]
    3580:	cmp	r0, #0
    3584:	ble	362c <coda_cursor_read_uint8+0xd8>
    3588:	lsl	ip, r0, #4
    358c:	add	r3, r4, ip
    3590:	sub	lr, r3, #4096	; 0x1000
    3594:	ldr	r1, [lr, #4088]	; 0xff8
    3598:	cmp	r1, #0
    359c:	beq	362c <coda_cursor_read_uint8+0xd8>
    35a0:	cmp	r5, #0
    35a4:	bne	35c4 <coda_cursor_read_uint8+0x70>
    35a8:	mvn	r0, #99	; 0x63
    35ac:	ldr	r1, [pc, #176]	; 3664 <coda_cursor_read_uint8+0x110>
    35b0:	ldr	r2, [pc, #164]	; 365c <coda_cursor_read_uint8+0x108>
    35b4:	movw	r3, #1825	; 0x721
    35b8:	bl	0 <coda_set_error>
    35bc:	mvn	r0, #0
    35c0:	b	3644 <coda_cursor_read_uint8+0xf0>
    35c4:	add	r1, sp, #16
    35c8:	mov	r0, r4
    35cc:	bl	740 <get_read_type>
    35d0:	cmp	r0, #0
    35d4:	beq	35e0 <coda_cursor_read_uint8+0x8c>
    35d8:	mvn	r0, #0
    35dc:	b	3644 <coda_cursor_read_uint8+0xf0>
    35e0:	ldr	r0, [sp, #16]
    35e4:	cmp	r0, #1
    35e8:	bne	3610 <coda_cursor_read_uint8+0xbc>
    35ec:	mov	r1, r5
    35f0:	mov	r0, r4
    35f4:	bl	b58 <read_uint8>
    35f8:	cmp	r0, #0
    35fc:	beq	3608 <coda_cursor_read_uint8+0xb4>
    3600:	mvn	r0, #0
    3604:	b	3644 <coda_cursor_read_uint8+0xf0>
    3608:	mov	r0, #0
    360c:	b	3644 <coda_cursor_read_uint8+0xf0>
    3610:	bl	0 <coda_type_get_native_type_name>
    3614:	mov	r2, r0
    3618:	mvn	r0, #104	; 0x68
    361c:	ldr	r1, [pc, #52]	; 3658 <coda_cursor_read_uint8+0x104>
    3620:	bl	0 <coda_set_error>
    3624:	mvn	r0, #0
    3628:	b	3644 <coda_cursor_read_uint8+0xf0>
    362c:	mvn	r0, #99	; 0x63
    3630:	ldr	r1, [pc, #40]	; 3660 <coda_cursor_read_uint8+0x10c>
    3634:	ldr	r2, [pc, #32]	; 365c <coda_cursor_read_uint8+0x108>
    3638:	movw	r3, #1820	; 0x71c
    363c:	bl	0 <coda_set_error>
    3640:	mvn	r0, #0
    3644:	ldr	r4, [sp, #8]
    3648:	ldr	r5, [sp, #12]
    364c:	ldr	lr, [sp, #4]
    3650:	add	sp, sp, #24
    3654:	bx	lr
    3658:	.word	0x00000078
    365c:	.word	0x00000453
    3660:	.word	0x0000022b
    3664:	.word	0x0000005b

00003668 <coda_cursor_read_int16>:
    3668:	mov	ip, sp
    366c:	sub	sp, sp, #24
    3670:	str	ip, [sp]
    3674:	str	lr, [sp, #4]
    3678:	str	r4, [sp, #8]
    367c:	str	r5, [sp, #12]
    3680:	mov	r4, r1
    3684:	mov	r5, r0
    3688:	cmp	r5, #0
    368c:	beq	37a0 <coda_cursor_read_int16+0x138>
    3690:	ldr	r0, [r5, #4]
    3694:	cmp	r0, #0
    3698:	ble	37a0 <coda_cursor_read_int16+0x138>
    369c:	lsl	r2, r0, #4
    36a0:	add	ip, r5, r2
    36a4:	sub	lr, ip, #4096	; 0x1000
    36a8:	ldr	r0, [lr, #4088]	; 0xff8
    36ac:	cmp	r0, #0
    36b0:	beq	37a0 <coda_cursor_read_int16+0x138>
    36b4:	cmp	r4, #0
    36b8:	bne	36d8 <coda_cursor_read_int16+0x70>
    36bc:	mvn	r0, #99	; 0x63
    36c0:	ldr	r1, [pc, #268]	; 37d4 <coda_cursor_read_int16+0x16c>
    36c4:	ldr	r2, [pc, #256]	; 37cc <coda_cursor_read_int16+0x164>
    36c8:	movw	r3, #1874	; 0x752
    36cc:	bl	0 <coda_set_error>
    36d0:	mvn	r0, #0
    36d4:	b	37b8 <coda_cursor_read_int16+0x150>
    36d8:	add	r1, sp, #20
    36dc:	mov	r0, r5
    36e0:	bl	740 <get_read_type>
    36e4:	cmp	r0, #0
    36e8:	beq	36f4 <coda_cursor_read_int16+0x8c>
    36ec:	mvn	r0, #0
    36f0:	b	37b8 <coda_cursor_read_int16+0x150>
    36f4:	ldr	r0, [sp, #20]
    36f8:	cmp	r0, #0
    36fc:	beq	3774 <coda_cursor_read_int16+0x10c>
    3700:	cmp	r0, #1
    3704:	beq	374c <coda_cursor_read_int16+0xe4>
    3708:	cmp	r0, #2
    370c:	bne	372c <coda_cursor_read_int16+0xc4>
    3710:	mov	r1, r4
    3714:	mov	r0, r5
    3718:	bl	c60 <read_int16>
    371c:	cmp	r0, #0
    3720:	beq	3798 <coda_cursor_read_int16+0x130>
    3724:	mvn	r0, #0
    3728:	b	37b8 <coda_cursor_read_int16+0x150>
    372c:	bl	0 <coda_type_get_native_type_name>
    3730:	mvn	r3, #104	; 0x68
    3734:	ldr	r1, [pc, #156]	; 37d8 <coda_cursor_read_int16+0x170>
    3738:	mov	r2, r0
    373c:	mov	r0, r3
    3740:	bl	0 <coda_set_error>
    3744:	mvn	r0, #0
    3748:	b	37b8 <coda_cursor_read_int16+0x150>
    374c:	add	r1, sp, #16
    3750:	mov	r0, r5
    3754:	bl	b58 <read_uint8>
    3758:	cmp	r0, #0
    375c:	beq	3768 <coda_cursor_read_int16+0x100>
    3760:	mvn	r0, #0
    3764:	b	37b8 <coda_cursor_read_int16+0x150>
    3768:	ldrb	r1, [sp, #16]
    376c:	strh	r1, [r4]
    3770:	b	3798 <coda_cursor_read_int16+0x130>
    3774:	add	r1, sp, #17
    3778:	mov	r0, r5
    377c:	bl	a38 <read_int8>
    3780:	cmp	r0, #0
    3784:	beq	3790 <coda_cursor_read_int16+0x128>
    3788:	mvn	r0, #0
    378c:	b	37b8 <coda_cursor_read_int16+0x150>
    3790:	ldrsb	r2, [sp, #17]
    3794:	strh	r2, [r4]
    3798:	mov	r0, #0
    379c:	b	37b8 <coda_cursor_read_int16+0x150>
    37a0:	mvn	r0, #99	; 0x63
    37a4:	ldr	r1, [pc, #36]	; 37d0 <coda_cursor_read_int16+0x168>
    37a8:	ldr	r2, [pc, #28]	; 37cc <coda_cursor_read_int16+0x164>
    37ac:	movw	r3, #1869	; 0x74d
    37b0:	bl	0 <coda_set_error>
    37b4:	mvn	r0, #0
    37b8:	ldr	r4, [sp, #8]
    37bc:	ldr	r5, [sp, #12]
    37c0:	ldr	lr, [sp, #4]
    37c4:	add	sp, sp, #24
    37c8:	bx	lr
    37cc:	.word	0x00000453
    37d0:	.word	0x0000022b
    37d4:	.word	0x0000005b
    37d8:	.word	0x00000133

000037dc <coda_cursor_read_uint16>:
    37dc:	mov	ip, sp
    37e0:	sub	sp, sp, #24
    37e4:	str	ip, [sp]
    37e8:	str	lr, [sp, #4]
    37ec:	str	r4, [sp, #8]
    37f0:	str	r5, [sp, #12]
    37f4:	mov	r5, r1
    37f8:	mov	r4, r0
    37fc:	cmp	r4, #0
    3800:	beq	38e0 <coda_cursor_read_uint16+0x104>
    3804:	ldr	r1, [r4, #4]
    3808:	cmp	r1, #0
    380c:	ble	38e0 <coda_cursor_read_uint16+0x104>
    3810:	lsl	ip, r1, #4
    3814:	add	r2, r4, ip
    3818:	sub	lr, r2, #4096	; 0x1000
    381c:	ldr	r0, [lr, #4088]	; 0xff8
    3820:	cmp	r0, #0
    3824:	beq	38e0 <coda_cursor_read_uint16+0x104>
    3828:	cmp	r5, #0
    382c:	bne	384c <coda_cursor_read_uint16+0x70>
    3830:	mvn	r0, #99	; 0x63
    3834:	ldr	r1, [pc, #220]	; 3918 <coda_cursor_read_uint16+0x13c>
    3838:	ldr	r2, [pc, #208]	; 3910 <coda_cursor_read_uint16+0x134>
    383c:	movw	r3, #1944	; 0x798
    3840:	bl	0 <coda_set_error>
    3844:	mvn	r0, #0
    3848:	b	38f8 <coda_cursor_read_uint16+0x11c>
    384c:	add	r1, sp, #20
    3850:	mov	r0, r4
    3854:	bl	740 <get_read_type>
    3858:	cmp	r0, #0
    385c:	beq	3868 <coda_cursor_read_uint16+0x8c>
    3860:	mvn	r0, #0
    3864:	b	38f8 <coda_cursor_read_uint16+0x11c>
    3868:	ldr	r0, [sp, #20]
    386c:	cmp	r0, #1
    3870:	beq	38b4 <coda_cursor_read_uint16+0xd8>
    3874:	cmp	r0, #3
    3878:	bne	3898 <coda_cursor_read_uint16+0xbc>
    387c:	mov	r1, r5
    3880:	mov	r0, r4
    3884:	bl	d6c <read_uint16>
    3888:	cmp	r0, #0
    388c:	beq	38d8 <coda_cursor_read_uint16+0xfc>
    3890:	mvn	r0, #0
    3894:	b	38f8 <coda_cursor_read_uint16+0x11c>
    3898:	bl	0 <coda_type_get_native_type_name>
    389c:	mov	r2, r0
    38a0:	mvn	r0, #104	; 0x68
    38a4:	ldr	r1, [pc, #96]	; 390c <coda_cursor_read_uint16+0x130>
    38a8:	bl	0 <coda_set_error>
    38ac:	mvn	r0, #0
    38b0:	b	38f8 <coda_cursor_read_uint16+0x11c>
    38b4:	add	r1, sp, #16
    38b8:	mov	r0, r4
    38bc:	bl	b58 <read_uint8>
    38c0:	cmp	r0, #0
    38c4:	beq	38d0 <coda_cursor_read_uint16+0xf4>
    38c8:	mvn	r0, #0
    38cc:	b	38f8 <coda_cursor_read_uint16+0x11c>
    38d0:	ldrb	r0, [sp, #16]
    38d4:	strh	r0, [r5]
    38d8:	mov	r0, #0
    38dc:	b	38f8 <coda_cursor_read_uint16+0x11c>
    38e0:	mvn	r0, #99	; 0x63
    38e4:	ldr	r1, [pc, #40]	; 3914 <coda_cursor_read_uint16+0x138>
    38e8:	ldr	r2, [pc, #32]	; 3910 <coda_cursor_read_uint16+0x134>
    38ec:	movw	r3, #1939	; 0x793
    38f0:	bl	0 <coda_set_error>
    38f4:	mvn	r0, #0
    38f8:	ldr	r4, [sp, #8]
    38fc:	ldr	r5, [sp, #12]
    3900:	ldr	lr, [sp, #4]
    3904:	add	sp, sp, #24
    3908:	bx	lr
    390c:	.word	0x000004b5
    3910:	.word	0x00000453
    3914:	.word	0x0000022b
    3918:	.word	0x0000005b

0000391c <coda_cursor_read_int32>:
    391c:	mov	ip, sp
    3920:	sub	sp, sp, #32
    3924:	str	ip, [sp]
    3928:	str	lr, [sp, #4]
    392c:	str	r4, [sp, #8]
    3930:	str	r5, [sp, #12]
    3934:	mov	r5, r1
    3938:	mov	r4, r0
    393c:	cmp	r4, #0
    3940:	beq	3ab8 <coda_cursor_read_int32+0x19c>
    3944:	ldr	r1, [r4, #4]
    3948:	cmp	r1, #0
    394c:	ble	3ab8 <coda_cursor_read_int32+0x19c>
    3950:	lsl	ip, r1, #4
    3954:	add	r3, r4, ip
    3958:	sub	lr, r3, #4096	; 0x1000
    395c:	ldr	r0, [lr, #4088]	; 0xff8
    3960:	cmp	r0, #0
    3964:	beq	3ab8 <coda_cursor_read_int32+0x19c>
    3968:	cmp	r5, #0
    396c:	bne	398c <coda_cursor_read_int32+0x70>
    3970:	mvn	r0, #99	; 0x63
    3974:	ldr	r1, [pc, #372]	; 3af0 <coda_cursor_read_int32+0x1d4>
    3978:	ldr	r2, [pc, #360]	; 3ae8 <coda_cursor_read_int32+0x1cc>
    397c:	movw	r3, #2006	; 0x7d6
    3980:	bl	0 <coda_set_error>
    3984:	mvn	r0, #0
    3988:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    398c:	add	r1, sp, #24
    3990:	mov	r0, r4
    3994:	bl	740 <get_read_type>
    3998:	cmp	r0, #0
    399c:	beq	39a8 <coda_cursor_read_int32+0x8c>
    39a0:	mvn	r0, #0
    39a4:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    39a8:	ldr	r0, [sp, #24]
    39ac:	cmp	r0, #2
    39b0:	bcs	3a0c <coda_cursor_read_int32+0xf0>
    39b4:	cmp	r0, #0
    39b8:	bne	39e4 <coda_cursor_read_int32+0xc8>
    39bc:	add	r1, sp, #16
    39c0:	mov	r0, r4
    39c4:	bl	a38 <read_int8>
    39c8:	cmp	r0, #0
    39cc:	beq	39d8 <coda_cursor_read_int32+0xbc>
    39d0:	mvn	r0, #0
    39d4:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    39d8:	ldrsb	r0, [sp, #16]
    39dc:	str	r0, [r5]
    39e0:	b	3ab0 <coda_cursor_read_int32+0x194>
    39e4:	add	r1, sp, #17
    39e8:	mov	r0, r4
    39ec:	bl	b58 <read_uint8>
    39f0:	cmp	r0, #0
    39f4:	beq	3a00 <coda_cursor_read_int32+0xe4>
    39f8:	mvn	r0, #0
    39fc:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    3a00:	ldrb	r2, [sp, #17]
    3a04:	str	r2, [r5]
    3a08:	b	3ab0 <coda_cursor_read_int32+0x194>
    3a0c:	cmp	r0, #2
    3a10:	beq	3a8c <coda_cursor_read_int32+0x170>
    3a14:	cmp	r0, #3
    3a18:	beq	3a64 <coda_cursor_read_int32+0x148>
    3a1c:	cmp	r0, #4
    3a20:	bne	3a40 <coda_cursor_read_int32+0x124>
    3a24:	mov	r1, r5
    3a28:	mov	r0, r4
    3a2c:	bl	e74 <read_int32>
    3a30:	cmp	r0, #0
    3a34:	beq	3ab0 <coda_cursor_read_int32+0x194>
    3a38:	mvn	r0, #0
    3a3c:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    3a40:	bl	0 <coda_type_get_native_type_name>
    3a44:	mvn	r2, #104	; 0x68
    3a48:	ldr	r1, [pc, #148]	; 3ae4 <coda_cursor_read_int32+0x1c8>
    3a4c:	mov	r3, r0
    3a50:	mov	r0, r2
    3a54:	mov	r2, r3
    3a58:	bl	0 <coda_set_error>
    3a5c:	mvn	r0, #0
    3a60:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    3a64:	add	r1, sp, #18
    3a68:	mov	r0, r4
    3a6c:	bl	d6c <read_uint16>
    3a70:	cmp	r0, #0
    3a74:	beq	3a80 <coda_cursor_read_int32+0x164>
    3a78:	mvn	r0, #0
    3a7c:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    3a80:	ldrh	r3, [sp, #18]
    3a84:	str	r3, [r5]
    3a88:	b	3ab0 <coda_cursor_read_int32+0x194>
    3a8c:	add	r1, sp, #20
    3a90:	mov	r0, r4
    3a94:	bl	c60 <read_int16>
    3a98:	cmp	r0, #0
    3a9c:	beq	3aa8 <coda_cursor_read_int32+0x18c>
    3aa0:	mvn	r0, #0
    3aa4:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    3aa8:	ldrsh	r3, [sp, #20]
    3aac:	str	r3, [r5]
    3ab0:	mov	r0, #0
    3ab4:	b	3ad0 <coda_cursor_read_int32+0x1b4>
    3ab8:	mvn	r0, #99	; 0x63
    3abc:	ldr	r1, [pc, #40]	; 3aec <coda_cursor_read_int32+0x1d0>
    3ac0:	ldr	r2, [pc, #32]	; 3ae8 <coda_cursor_read_int32+0x1cc>
    3ac4:	movw	r3, #2001	; 0x7d1
    3ac8:	bl	0 <coda_set_error>
    3acc:	mvn	r0, #0
    3ad0:	ldr	r4, [sp, #8]
    3ad4:	ldr	r5, [sp, #12]
    3ad8:	ldr	lr, [sp, #4]
    3adc:	add	sp, sp, #32
    3ae0:	bx	lr
    3ae4:	.word	0x000001d0
    3ae8:	.word	0x00000453
    3aec:	.word	0x0000022b
    3af0:	.word	0x0000005b

00003af4 <coda_cursor_read_uint32>:
    3af4:	mov	ip, sp
    3af8:	sub	sp, sp, #24
    3afc:	str	ip, [sp]
    3b00:	str	lr, [sp, #4]
    3b04:	str	r4, [sp, #8]
    3b08:	str	r5, [sp, #12]
    3b0c:	mov	r5, r1
    3b10:	mov	r4, r0
    3b14:	cmp	r4, #0
    3b18:	beq	3c30 <coda_cursor_read_uint32+0x13c>
    3b1c:	ldr	r1, [r4, #4]
    3b20:	cmp	r1, #0
    3b24:	ble	3c30 <coda_cursor_read_uint32+0x13c>
    3b28:	lsl	r3, r1, #4
    3b2c:	add	r3, r4, r3
    3b30:	sub	lr, r3, #4096	; 0x1000
    3b34:	ldr	r0, [lr, #4088]	; 0xff8
    3b38:	cmp	r0, #0
    3b3c:	beq	3c30 <coda_cursor_read_uint32+0x13c>
    3b40:	cmp	r5, #0
    3b44:	bne	3b64 <coda_cursor_read_uint32+0x70>
    3b48:	mvn	r0, #99	; 0x63
    3b4c:	ldr	r1, [pc, #276]	; 3c68 <coda_cursor_read_uint32+0x174>
    3b50:	ldr	r2, [pc, #260]	; 3c5c <coda_cursor_read_uint32+0x168>
    3b54:	movw	r3, #2099	; 0x833
    3b58:	bl	0 <coda_set_error>
    3b5c:	mvn	r0, #0
    3b60:	b	3c48 <coda_cursor_read_uint32+0x154>
    3b64:	add	r1, sp, #20
    3b68:	mov	r0, r4
    3b6c:	bl	740 <get_read_type>
    3b70:	cmp	r0, #0
    3b74:	beq	3b80 <coda_cursor_read_uint32+0x8c>
    3b78:	mvn	r0, #0
    3b7c:	b	3c48 <coda_cursor_read_uint32+0x154>
    3b80:	ldr	r0, [sp, #20]
    3b84:	cmp	r0, #1
    3b88:	beq	3c04 <coda_cursor_read_uint32+0x110>
    3b8c:	cmp	r0, #3
    3b90:	beq	3bdc <coda_cursor_read_uint32+0xe8>
    3b94:	cmp	r0, #5
    3b98:	bne	3bb8 <coda_cursor_read_uint32+0xc4>
    3b9c:	mov	r1, r5
    3ba0:	mov	r0, r4
    3ba4:	bl	f80 <read_uint32>
    3ba8:	cmp	r0, #0
    3bac:	beq	3c28 <coda_cursor_read_uint32+0x134>
    3bb0:	mvn	r0, #0
    3bb4:	b	3c48 <coda_cursor_read_uint32+0x154>
    3bb8:	bl	0 <coda_type_get_native_type_name>
    3bbc:	mvn	r2, #104	; 0x68
    3bc0:	ldr	r1, [pc, #156]	; 3c64 <coda_cursor_read_uint32+0x170>
    3bc4:	mov	ip, r0
    3bc8:	mov	r0, r2
    3bcc:	mov	r2, ip
    3bd0:	bl	0 <coda_set_error>
    3bd4:	mvn	r0, #0
    3bd8:	b	3c48 <coda_cursor_read_uint32+0x154>
    3bdc:	add	r1, sp, #18
    3be0:	mov	r0, r4
    3be4:	bl	d6c <read_uint16>
    3be8:	cmp	r0, #0
    3bec:	beq	3bf8 <coda_cursor_read_uint32+0x104>
    3bf0:	mvn	r0, #0
    3bf4:	b	3c48 <coda_cursor_read_uint32+0x154>
    3bf8:	ldrh	r1, [sp, #18]
    3bfc:	str	r1, [r5]
    3c00:	b	3c28 <coda_cursor_read_uint32+0x134>
    3c04:	add	r1, sp, #16
    3c08:	mov	r0, r4
    3c0c:	bl	b58 <read_uint8>
    3c10:	cmp	r0, #0
    3c14:	beq	3c20 <coda_cursor_read_uint32+0x12c>
    3c18:	mvn	r0, #0
    3c1c:	b	3c48 <coda_cursor_read_uint32+0x154>
    3c20:	ldrb	r2, [sp, #16]
    3c24:	str	r2, [r5]
    3c28:	mov	r0, #0
    3c2c:	b	3c48 <coda_cursor_read_uint32+0x154>
    3c30:	mvn	r0, #99	; 0x63
    3c34:	ldr	r1, [pc, #36]	; 3c60 <coda_cursor_read_uint32+0x16c>
    3c38:	ldr	r2, [pc, #28]	; 3c5c <coda_cursor_read_uint32+0x168>
    3c3c:	movw	r3, #2094	; 0x82e
    3c40:	bl	0 <coda_set_error>
    3c44:	mvn	r0, #0
    3c48:	ldr	r4, [sp, #8]
    3c4c:	ldr	r5, [sp, #12]
    3c50:	ldr	lr, [sp, #4]
    3c54:	add	sp, sp, #24
    3c58:	bx	lr
    3c5c:	.word	0x00000453
    3c60:	.word	0x0000022b
    3c64:	.word	0x000001fd
    3c68:	.word	0x0000005b

00003c6c <coda_cursor_read_int64>:
    3c6c:	mov	ip, sp
    3c70:	sub	sp, sp, #40	; 0x28
    3c74:	str	ip, [sp]
    3c78:	str	lr, [sp, #4]
    3c7c:	str	r4, [sp, #8]
    3c80:	str	r5, [sp, #12]
    3c84:	mov	r5, r1
    3c88:	mov	r4, r0
    3c8c:	cmp	r4, #0
    3c90:	beq	3e88 <coda_cursor_read_int64+0x21c>
    3c94:	ldr	r0, [r4, #4]
    3c98:	cmp	r0, #0
    3c9c:	ble	3e88 <coda_cursor_read_int64+0x21c>
    3ca0:	lsl	r3, r0, #4
    3ca4:	add	r3, r4, r3
    3ca8:	sub	lr, r3, #4096	; 0x1000
    3cac:	ldr	r3, [lr, #4088]	; 0xff8
    3cb0:	cmp	r3, #0
    3cb4:	beq	3e88 <coda_cursor_read_int64+0x21c>
    3cb8:	cmp	r5, #0
    3cbc:	bne	3cdc <coda_cursor_read_int64+0x70>
    3cc0:	mvn	r0, #99	; 0x63
    3cc4:	ldr	r1, [pc, #500]	; 3ec0 <coda_cursor_read_int64+0x254>
    3cc8:	ldr	r2, [pc, #488]	; 3eb8 <coda_cursor_read_int64+0x24c>
    3ccc:	movw	r3, #2174	; 0x87e
    3cd0:	bl	0 <coda_set_error>
    3cd4:	mvn	r0, #0
    3cd8:	b	3ea0 <coda_cursor_read_int64+0x234>
    3cdc:	add	r1, sp, #32
    3ce0:	mov	r0, r4
    3ce4:	bl	740 <get_read_type>
    3ce8:	cmp	r0, #0
    3cec:	beq	3cf8 <coda_cursor_read_int64+0x8c>
    3cf0:	mvn	r0, #0
    3cf4:	b	3ea0 <coda_cursor_read_int64+0x234>
    3cf8:	ldr	r0, [sp, #32]
    3cfc:	cmp	r0, #7
    3d00:	bcs	3e6c <coda_cursor_read_int64+0x200>
    3d04:	add	pc, pc, r0, lsl #2
    3d08:	nop	{0}
    3d0c:	b	3d28 <coda_cursor_read_int64+0xbc>
    3d10:	b	3d58 <coda_cursor_read_int64+0xec>
    3d14:	b	3d88 <coda_cursor_read_int64+0x11c>
    3d18:	b	3db8 <coda_cursor_read_int64+0x14c>
    3d1c:	b	3de8 <coda_cursor_read_int64+0x17c>
    3d20:	b	3e18 <coda_cursor_read_int64+0x1ac>
    3d24:	b	3e48 <coda_cursor_read_int64+0x1dc>
    3d28:	add	r1, sp, #16
    3d2c:	mov	r0, r4
    3d30:	bl	a38 <read_int8>
    3d34:	cmp	r0, #0
    3d38:	beq	3d44 <coda_cursor_read_int64+0xd8>
    3d3c:	mvn	r0, #0
    3d40:	b	3ea0 <coda_cursor_read_int64+0x234>
    3d44:	ldrsb	r1, [sp, #16]
    3d48:	asr	r2, r1, #31
    3d4c:	str	r1, [r5]
    3d50:	str	r2, [r5, #4]
    3d54:	b	3e64 <coda_cursor_read_int64+0x1f8>
    3d58:	add	r1, sp, #17
    3d5c:	mov	r0, r4
    3d60:	bl	b58 <read_uint8>
    3d64:	cmp	r0, #0
    3d68:	beq	3d74 <coda_cursor_read_int64+0x108>
    3d6c:	mvn	r0, #0
    3d70:	b	3ea0 <coda_cursor_read_int64+0x234>
    3d74:	mov	r1, #0
    3d78:	ldrb	r0, [sp, #17]
    3d7c:	str	r0, [r5]
    3d80:	str	r1, [r5, #4]
    3d84:	b	3e64 <coda_cursor_read_int64+0x1f8>
    3d88:	add	r1, sp, #20
    3d8c:	mov	r0, r4
    3d90:	bl	c60 <read_int16>
    3d94:	cmp	r0, #0
    3d98:	beq	3da4 <coda_cursor_read_int64+0x138>
    3d9c:	mvn	r0, #0
    3da0:	b	3ea0 <coda_cursor_read_int64+0x234>
    3da4:	ldrsh	r2, [sp, #20]
    3da8:	asr	r3, r2, #31
    3dac:	str	r2, [r5]
    3db0:	str	r3, [r5, #4]
    3db4:	b	3e64 <coda_cursor_read_int64+0x1f8>
    3db8:	add	r1, sp, #18
    3dbc:	mov	r0, r4
    3dc0:	bl	d6c <read_uint16>
    3dc4:	cmp	r0, #0
    3dc8:	beq	3dd4 <coda_cursor_read_int64+0x168>
    3dcc:	mvn	r0, #0
    3dd0:	b	3ea0 <coda_cursor_read_int64+0x234>
    3dd4:	mov	r2, #0
    3dd8:	ldrh	r1, [sp, #18]
    3ddc:	str	r1, [r5]
    3de0:	str	r2, [r5, #4]
    3de4:	b	3e64 <coda_cursor_read_int64+0x1f8>
    3de8:	add	r1, sp, #28
    3dec:	mov	r0, r4
    3df0:	bl	e74 <read_int32>
    3df4:	cmp	r0, #0
    3df8:	beq	3e04 <coda_cursor_read_int64+0x198>
    3dfc:	mvn	r0, #0
    3e00:	b	3ea0 <coda_cursor_read_int64+0x234>
    3e04:	ldr	ip, [sp, #28]
    3e08:	asr	r0, ip, #31
    3e0c:	str	ip, [r5]
    3e10:	str	r0, [r5, #4]
    3e14:	b	3e64 <coda_cursor_read_int64+0x1f8>
    3e18:	add	r1, sp, #24
    3e1c:	mov	r0, r4
    3e20:	bl	f80 <read_uint32>
    3e24:	cmp	r0, #0
    3e28:	beq	3e34 <coda_cursor_read_int64+0x1c8>
    3e2c:	mvn	r0, #0
    3e30:	b	3ea0 <coda_cursor_read_int64+0x234>
    3e34:	mov	ip, #0
    3e38:	ldr	r3, [sp, #24]
    3e3c:	str	r3, [r5]
    3e40:	str	ip, [r5, #4]
    3e44:	b	3e64 <coda_cursor_read_int64+0x1f8>
    3e48:	mov	r1, r5
    3e4c:	mov	r0, r4
    3e50:	bl	1088 <read_int64>
    3e54:	cmp	r0, #0
    3e58:	beq	3e64 <coda_cursor_read_int64+0x1f8>
    3e5c:	mvn	r0, #0
    3e60:	b	3ea0 <coda_cursor_read_int64+0x234>
    3e64:	mov	r0, #0
    3e68:	b	3ea0 <coda_cursor_read_int64+0x234>
    3e6c:	bl	0 <coda_type_get_native_type_name>
    3e70:	mov	r2, r0
    3e74:	mvn	r0, #104	; 0x68
    3e78:	ldr	r1, [pc, #52]	; 3eb4 <coda_cursor_read_int64+0x248>
    3e7c:	bl	0 <coda_set_error>
    3e80:	mvn	r0, #0
    3e84:	b	3ea0 <coda_cursor_read_int64+0x234>
    3e88:	mvn	r0, #99	; 0x63
    3e8c:	ldr	r1, [pc, #40]	; 3ebc <coda_cursor_read_int64+0x250>
    3e90:	ldr	r2, [pc, #32]	; 3eb8 <coda_cursor_read_int64+0x24c>
    3e94:	movw	r3, #2169	; 0x879
    3e98:	bl	0 <coda_set_error>
    3e9c:	mvn	r0, #0
    3ea0:	ldr	r4, [sp, #8]
    3ea4:	ldr	r5, [sp, #12]
    3ea8:	ldr	lr, [sp, #4]
    3eac:	add	sp, sp, #40	; 0x28
    3eb0:	bx	lr
    3eb4:	.word	0x00000106
    3eb8:	.word	0x00000453
    3ebc:	.word	0x0000022b
    3ec0:	.word	0x0000005b

00003ec4 <coda_cursor_read_uint64>:
    3ec4:	mov	ip, sp
    3ec8:	sub	sp, sp, #32
    3ecc:	str	ip, [sp]
    3ed0:	str	lr, [sp, #4]
    3ed4:	str	r4, [sp, #8]
    3ed8:	str	r5, [sp, #12]
    3edc:	mov	r5, r1
    3ee0:	mov	r4, r0
    3ee4:	cmp	r4, #0
    3ee8:	beq	4054 <coda_cursor_read_uint64+0x190>
    3eec:	ldr	r3, [r4, #4]
    3ef0:	cmp	r3, #0
    3ef4:	ble	4054 <coda_cursor_read_uint64+0x190>
    3ef8:	lsl	r1, r3, #4
    3efc:	add	r2, r4, r1
    3f00:	sub	lr, r2, #4096	; 0x1000
    3f04:	ldr	r2, [lr, #4088]	; 0xff8
    3f08:	cmp	r2, #0
    3f0c:	beq	4054 <coda_cursor_read_uint64+0x190>
    3f10:	cmp	r5, #0
    3f14:	bne	3f34 <coda_cursor_read_uint64+0x70>
    3f18:	mvn	r0, #99	; 0x63
    3f1c:	ldr	r1, [pc, #360]	; 408c <coda_cursor_read_uint64+0x1c8>
    3f20:	ldr	r2, [pc, #348]	; 4084 <coda_cursor_read_uint64+0x1c0>
    3f24:	movw	r3, #2290	; 0x8f2
    3f28:	bl	0 <coda_set_error>
    3f2c:	mvn	r0, #0
    3f30:	b	406c <coda_cursor_read_uint64+0x1a8>
    3f34:	add	r1, sp, #20
    3f38:	mov	r0, r4
    3f3c:	bl	740 <get_read_type>
    3f40:	cmp	r0, #0
    3f44:	beq	3f50 <coda_cursor_read_uint64+0x8c>
    3f48:	mvn	r0, #0
    3f4c:	b	406c <coda_cursor_read_uint64+0x1a8>
    3f50:	ldr	ip, [sp, #20]
    3f54:	cmp	ip, #5
    3f58:	bcs	3fcc <coda_cursor_read_uint64+0x108>
    3f5c:	cmp	ip, #1
    3f60:	beq	3f9c <coda_cursor_read_uint64+0xd8>
    3f64:	cmp	ip, #3
    3f68:	bne	3ff8 <coda_cursor_read_uint64+0x134>
    3f6c:	add	r1, sp, #18
    3f70:	mov	r0, r4
    3f74:	bl	d6c <read_uint16>
    3f78:	cmp	r0, #0
    3f7c:	beq	3f88 <coda_cursor_read_uint64+0xc4>
    3f80:	mvn	r0, #0
    3f84:	b	406c <coda_cursor_read_uint64+0x1a8>
    3f88:	mov	r0, #0
    3f8c:	ldrh	ip, [sp, #18]
    3f90:	str	ip, [r5]
    3f94:	str	r0, [r5, #4]
    3f98:	b	404c <coda_cursor_read_uint64+0x188>
    3f9c:	add	r1, sp, #16
    3fa0:	mov	r0, r4
    3fa4:	bl	b58 <read_uint8>
    3fa8:	cmp	r0, #0
    3fac:	beq	3fb8 <coda_cursor_read_uint64+0xf4>
    3fb0:	mvn	r0, #0
    3fb4:	b	406c <coda_cursor_read_uint64+0x1a8>
    3fb8:	mov	r2, #0
    3fbc:	ldrb	r1, [sp, #16]
    3fc0:	str	r1, [r5]
    3fc4:	str	r2, [r5, #4]
    3fc8:	b	404c <coda_cursor_read_uint64+0x188>
    3fcc:	cmp	ip, #5
    3fd0:	beq	4020 <coda_cursor_read_uint64+0x15c>
    3fd4:	cmp	ip, #7
    3fd8:	bne	3ff8 <coda_cursor_read_uint64+0x134>
    3fdc:	mov	r1, r5
    3fe0:	mov	r0, r4
    3fe4:	bl	1190 <read_uint64>
    3fe8:	cmp	r0, #0
    3fec:	beq	404c <coda_cursor_read_uint64+0x188>
    3ff0:	mvn	r0, #0
    3ff4:	b	406c <coda_cursor_read_uint64+0x1a8>
    3ff8:	ldr	r0, [sp, #20]
    3ffc:	bl	0 <coda_type_get_native_type_name>
    4000:	mvn	r2, #104	; 0x68
    4004:	ldr	r1, [pc, #116]	; 4080 <coda_cursor_read_uint64+0x1bc>
    4008:	mov	r3, r0
    400c:	mov	r0, r2
    4010:	mov	r2, r3
    4014:	bl	0 <coda_set_error>
    4018:	mvn	r0, #0
    401c:	b	406c <coda_cursor_read_uint64+0x1a8>
    4020:	add	r1, sp, #24
    4024:	mov	r0, r4
    4028:	bl	f80 <read_uint32>
    402c:	cmp	r0, #0
    4030:	beq	403c <coda_cursor_read_uint64+0x178>
    4034:	mvn	r0, #0
    4038:	b	406c <coda_cursor_read_uint64+0x1a8>
    403c:	mov	r2, #0
    4040:	ldr	r1, [sp, #24]
    4044:	str	r1, [r5]
    4048:	str	r2, [r5, #4]
    404c:	mov	r0, #0
    4050:	b	406c <coda_cursor_read_uint64+0x1a8>
    4054:	mvn	r0, #99	; 0x63
    4058:	ldr	r1, [pc, #40]	; 4088 <coda_cursor_read_uint64+0x1c4>
    405c:	ldr	r2, [pc, #32]	; 4084 <coda_cursor_read_uint64+0x1c0>
    4060:	movw	r3, #2285	; 0x8ed
    4064:	bl	0 <coda_set_error>
    4068:	mvn	r0, #0
    406c:	ldr	r4, [sp, #8]
    4070:	ldr	r5, [sp, #12]
    4074:	ldr	lr, [sp, #4]
    4078:	add	sp, sp, #32
    407c:	bx	lr
    4080:	.word	0x000000a5
    4084:	.word	0x00000453
    4088:	.word	0x0000022b
    408c:	.word	0x0000005b

00004090 <coda_cursor_read_float>:
    4090:	mov	ip, sp
    4094:	sub	sp, sp, #72	; 0x48
    4098:	str	ip, [sp]
    409c:	str	lr, [sp, #4]
    40a0:	str	r4, [sp, #8]
    40a4:	str	r5, [sp, #12]
    40a8:	mov	r5, r1
    40ac:	mov	r4, r0
    40b0:	cmp	r4, #0
    40b4:	beq	4380 <coda_cursor_read_float+0x2f0>
    40b8:	ldr	r0, [r4, #4]
    40bc:	cmp	r0, #0
    40c0:	ble	4380 <coda_cursor_read_float+0x2f0>
    40c4:	lsl	ip, r0, #4
    40c8:	add	r0, r4, ip
    40cc:	sub	lr, r0, #4096	; 0x1000
    40d0:	ldr	r3, [lr, #4088]	; 0xff8
    40d4:	cmp	r3, #0
    40d8:	beq	4380 <coda_cursor_read_float+0x2f0>
    40dc:	cmp	r5, #0
    40e0:	bne	4100 <coda_cursor_read_float+0x70>
    40e4:	mvn	r0, #99	; 0x63
    40e8:	ldr	r1, [pc, #712]	; 43b8 <coda_cursor_read_float+0x328>
    40ec:	ldr	r2, [pc, #696]	; 43ac <coda_cursor_read_float+0x31c>
    40f0:	movw	r3, #2380	; 0x94c
    40f4:	bl	0 <coda_set_error>
    40f8:	mvn	r0, #0
    40fc:	b	4398 <coda_cursor_read_float+0x308>
    4100:	add	r1, sp, #28
    4104:	add	r2, sp, #32
    4108:	mov	r0, r4
    410c:	bl	7cc <get_unconverted_read_type>
    4110:	cmp	r0, #0
    4114:	beq	4120 <coda_cursor_read_float+0x90>
    4118:	mvn	r0, #0
    411c:	b	4398 <coda_cursor_read_float+0x308>
    4120:	ldr	r3, [sp, #32]
    4124:	cmp	r3, #0
    4128:	beq	415c <coda_cursor_read_float+0xcc>
    412c:	add	r1, sp, #64	; 0x40
    4130:	mov	r0, r4
    4134:	bl	43bc <coda_cursor_read_double>
    4138:	cmp	r0, #0
    413c:	beq	4148 <coda_cursor_read_float+0xb8>
    4140:	mvn	r0, #0
    4144:	b	4398 <coda_cursor_read_float+0x308>
    4148:	vldr	d7, [sp, #64]	; 0x40
    414c:	vcvt.f32.f64	s14, d7
    4150:	vstr	s14, [r5]
    4154:	mov	r0, #0
    4158:	b	4398 <coda_cursor_read_float+0x308>
    415c:	ldr	r0, [sp, #28]
    4160:	cmp	r0, #10
    4164:	bcs	4364 <coda_cursor_read_float+0x2d4>
    4168:	add	pc, pc, r0, lsl #2
    416c:	nop	{0}
    4170:	b	4198 <coda_cursor_read_float+0x108>
    4174:	b	41c8 <coda_cursor_read_float+0x138>
    4178:	b	41f8 <coda_cursor_read_float+0x168>
    417c:	b	4228 <coda_cursor_read_float+0x198>
    4180:	b	4258 <coda_cursor_read_float+0x1c8>
    4184:	b	4288 <coda_cursor_read_float+0x1f8>
    4188:	b	42b8 <coda_cursor_read_float+0x228>
    418c:	b	42e8 <coda_cursor_read_float+0x258>
    4190:	b	4318 <coda_cursor_read_float+0x288>
    4194:	b	4334 <coda_cursor_read_float+0x2a4>
    4198:	add	r1, sp, #16
    419c:	mov	r0, r4
    41a0:	bl	a38 <read_int8>
    41a4:	cmp	r0, #0
    41a8:	beq	41b4 <coda_cursor_read_float+0x124>
    41ac:	mvn	r0, #0
    41b0:	b	4398 <coda_cursor_read_float+0x308>
    41b4:	ldrsb	r3, [sp, #16]
    41b8:	vmov	s8, r3
    41bc:	vcvt.f32.s32	s8, s8
    41c0:	vstr	s8, [r5]
    41c4:	b	435c <coda_cursor_read_float+0x2cc>
    41c8:	add	r1, sp, #17
    41cc:	mov	r0, r4
    41d0:	bl	b58 <read_uint8>
    41d4:	cmp	r0, #0
    41d8:	beq	41e4 <coda_cursor_read_float+0x154>
    41dc:	mvn	r0, #0
    41e0:	b	4398 <coda_cursor_read_float+0x308>
    41e4:	ldrb	r1, [sp, #17]
    41e8:	vmov	s2, r1
    41ec:	vcvt.f32.u32	s2, s2
    41f0:	vstr	s2, [r5]
    41f4:	b	435c <coda_cursor_read_float+0x2cc>
    41f8:	add	r1, sp, #18
    41fc:	mov	r0, r4
    4200:	bl	c60 <read_int16>
    4204:	cmp	r0, #0
    4208:	beq	4214 <coda_cursor_read_float+0x184>
    420c:	mvn	r0, #0
    4210:	b	4398 <coda_cursor_read_float+0x308>
    4214:	ldrsh	ip, [sp, #18]
    4218:	vmov	s0, ip
    421c:	vcvt.f32.s32	s0, s0
    4220:	vstr	s0, [r5]
    4224:	b	435c <coda_cursor_read_float+0x2cc>
    4228:	add	r1, sp, #20
    422c:	mov	r0, r4
    4230:	bl	d6c <read_uint16>
    4234:	cmp	r0, #0
    4238:	beq	4244 <coda_cursor_read_float+0x1b4>
    423c:	mvn	r0, #0
    4240:	b	4398 <coda_cursor_read_float+0x308>
    4244:	ldrh	r0, [sp, #20]
    4248:	vmov	s4, r0
    424c:	vcvt.f32.u32	s4, s4
    4250:	vstr	s4, [r5]
    4254:	b	435c <coda_cursor_read_float+0x2cc>
    4258:	add	r1, sp, #36	; 0x24
    425c:	mov	r0, r4
    4260:	bl	e74 <read_int32>
    4264:	cmp	r0, #0
    4268:	beq	4274 <coda_cursor_read_float+0x1e4>
    426c:	mvn	r0, #0
    4270:	b	4398 <coda_cursor_read_float+0x308>
    4274:	ldr	r2, [sp, #36]	; 0x24
    4278:	vmov	s4, r2
    427c:	vcvt.f32.s32	s4, s4
    4280:	vstr	s4, [r5]
    4284:	b	435c <coda_cursor_read_float+0x2cc>
    4288:	add	r1, sp, #24
    428c:	mov	r0, r4
    4290:	bl	f80 <read_uint32>
    4294:	cmp	r0, #0
    4298:	beq	42a4 <coda_cursor_read_float+0x214>
    429c:	mvn	r0, #0
    42a0:	b	4398 <coda_cursor_read_float+0x308>
    42a4:	ldr	r2, [sp, #24]
    42a8:	vmov	s12, r2
    42ac:	vcvt.f32.u32	s12, s12
    42b0:	vstr	s12, [r5]
    42b4:	b	435c <coda_cursor_read_float+0x2cc>
    42b8:	add	r1, sp, #40	; 0x28
    42bc:	mov	r0, r4
    42c0:	bl	1088 <read_int64>
    42c4:	cmp	r0, #0
    42c8:	beq	42d4 <coda_cursor_read_float+0x244>
    42cc:	mvn	r0, #0
    42d0:	b	4398 <coda_cursor_read_float+0x308>
    42d4:	ldr	r0, [sp, #40]	; 0x28
    42d8:	ldr	r1, [sp, #44]	; 0x2c
    42dc:	bl	0 <__compcert_i64_stof>
    42e0:	vstr	s0, [r5]
    42e4:	b	435c <coda_cursor_read_float+0x2cc>
    42e8:	add	r1, sp, #48	; 0x30
    42ec:	mov	r0, r4
    42f0:	bl	1190 <read_uint64>
    42f4:	cmp	r0, #0
    42f8:	beq	4304 <coda_cursor_read_float+0x274>
    42fc:	mvn	r0, #0
    4300:	b	4398 <coda_cursor_read_float+0x308>
    4304:	ldr	r0, [sp, #48]	; 0x30
    4308:	ldr	r1, [sp, #52]	; 0x34
    430c:	bl	0 <__compcert_i64_stof>
    4310:	vstr	s0, [r5]
    4314:	b	435c <coda_cursor_read_float+0x2cc>
    4318:	mov	r1, r5
    431c:	mov	r0, r4
    4320:	bl	1288 <read_float>
    4324:	cmp	r0, #0
    4328:	beq	435c <coda_cursor_read_float+0x2cc>
    432c:	mvn	r0, #0
    4330:	b	4398 <coda_cursor_read_float+0x308>
    4334:	add	r1, sp, #56	; 0x38
    4338:	mov	r0, r4
    433c:	bl	13c0 <read_double>
    4340:	cmp	r0, #0
    4344:	beq	4350 <coda_cursor_read_float+0x2c0>
    4348:	mvn	r0, #0
    434c:	b	4398 <coda_cursor_read_float+0x308>
    4350:	vldr	d6, [sp, #56]	; 0x38
    4354:	vcvt.f32.f64	s0, d6
    4358:	vstr	s0, [r5]
    435c:	mov	r0, #0
    4360:	b	4398 <coda_cursor_read_float+0x308>
    4364:	bl	0 <coda_type_get_native_type_name>
    4368:	mov	r2, r0
    436c:	mvn	r0, #104	; 0x68
    4370:	ldr	r1, [pc, #60]	; 43b4 <coda_cursor_read_float+0x324>
    4374:	bl	0 <coda_set_error>
    4378:	mvn	r0, #0
    437c:	b	4398 <coda_cursor_read_float+0x308>
    4380:	mvn	r0, #99	; 0x63
    4384:	ldr	r1, [pc, #36]	; 43b0 <coda_cursor_read_float+0x320>
    4388:	ldr	r2, [pc, #28]	; 43ac <coda_cursor_read_float+0x31c>
    438c:	movw	r3, #2375	; 0x947
    4390:	bl	0 <coda_set_error>
    4394:	mvn	r0, #0
    4398:	ldr	r4, [sp, #8]
    439c:	ldr	r5, [sp, #12]
    43a0:	ldr	lr, [sp, #4]
    43a4:	add	sp, sp, #72	; 0x48
    43a8:	bx	lr
    43ac:	.word	0x00000453
    43b0:	.word	0x0000022b
    43b4:	.word	0x0000026f
    43b8:	.word	0x0000005b

000043bc <coda_cursor_read_double>:
    43bc:	mov	ip, sp
    43c0:	sub	sp, sp, #64	; 0x40
    43c4:	str	ip, [sp]
    43c8:	str	lr, [sp, #4]
    43cc:	str	r4, [sp, #8]
    43d0:	str	r5, [sp, #12]
    43d4:	mov	r4, r1
    43d8:	mov	r5, r0
    43dc:	cmp	r5, #0
    43e0:	beq	46bc <coda_cursor_read_double+0x300>
    43e4:	ldr	r1, [r5, #4]
    43e8:	cmp	r1, #0
    43ec:	ble	46bc <coda_cursor_read_double+0x300>
    43f0:	lsl	r3, r1, #4
    43f4:	add	r2, r5, r3
    43f8:	sub	lr, r2, #4096	; 0x1000
    43fc:	ldr	r1, [lr, #4088]	; 0xff8
    4400:	cmp	r1, #0
    4404:	beq	46bc <coda_cursor_read_double+0x300>
    4408:	cmp	r4, #0
    440c:	bne	442c <coda_cursor_read_double+0x70>
    4410:	mvn	r0, #99	; 0x63
    4414:	ldr	r1, [pc, #728]	; 46f4 <coda_cursor_read_double+0x338>
    4418:	ldr	r2, [pc, #716]	; 46ec <coda_cursor_read_double+0x330>
    441c:	movw	r3, #2548	; 0x9f4
    4420:	bl	0 <coda_set_error>
    4424:	mvn	r0, #0
    4428:	b	46d4 <coda_cursor_read_double+0x318>
    442c:	add	r1, sp, #28
    4430:	add	r2, sp, #32
    4434:	mov	r0, r5
    4438:	bl	7cc <get_unconverted_read_type>
    443c:	cmp	r0, #0
    4440:	beq	444c <coda_cursor_read_double+0x90>
    4444:	mvn	r0, #0
    4448:	b	46d4 <coda_cursor_read_double+0x318>
    444c:	ldr	r0, [sp, #28]
    4450:	cmp	r0, #10
    4454:	bcs	46a0 <coda_cursor_read_double+0x2e4>
    4458:	add	pc, pc, r0, lsl #2
    445c:	nop	{0}
    4460:	b	4488 <coda_cursor_read_double+0xcc>
    4464:	b	44b8 <coda_cursor_read_double+0xfc>
    4468:	b	44e8 <coda_cursor_read_double+0x12c>
    446c:	b	4518 <coda_cursor_read_double+0x15c>
    4470:	b	4548 <coda_cursor_read_double+0x18c>
    4474:	b	4578 <coda_cursor_read_double+0x1bc>
    4478:	b	45a8 <coda_cursor_read_double+0x1ec>
    447c:	b	45d8 <coda_cursor_read_double+0x21c>
    4480:	b	4608 <coda_cursor_read_double+0x24c>
    4484:	b	4634 <coda_cursor_read_double+0x278>
    4488:	add	r1, sp, #16
    448c:	mov	r0, r5
    4490:	bl	a38 <read_int8>
    4494:	cmp	r0, #0
    4498:	beq	44a4 <coda_cursor_read_double+0xe8>
    449c:	mvn	r0, #0
    44a0:	b	46d4 <coda_cursor_read_double+0x318>
    44a4:	ldrsb	r1, [sp, #16]
    44a8:	vmov	s0, r1
    44ac:	vcvt.f64.s32	d0, s0
    44b0:	vstr	d0, [r4]
    44b4:	b	4650 <coda_cursor_read_double+0x294>
    44b8:	add	r1, sp, #17
    44bc:	mov	r0, r5
    44c0:	bl	b58 <read_uint8>
    44c4:	cmp	r0, #0
    44c8:	beq	44d4 <coda_cursor_read_double+0x118>
    44cc:	mvn	r0, #0
    44d0:	b	46d4 <coda_cursor_read_double+0x318>
    44d4:	ldrb	r0, [sp, #17]
    44d8:	vmov	s6, r0
    44dc:	vcvt.f64.u32	d3, s6
    44e0:	vstr	d3, [r4]
    44e4:	b	4650 <coda_cursor_read_double+0x294>
    44e8:	add	r1, sp, #18
    44ec:	mov	r0, r5
    44f0:	bl	c60 <read_int16>
    44f4:	cmp	r0, #0
    44f8:	beq	4504 <coda_cursor_read_double+0x148>
    44fc:	mvn	r0, #0
    4500:	b	46d4 <coda_cursor_read_double+0x318>
    4504:	ldrsh	ip, [sp, #18]
    4508:	vmov	s2, ip
    450c:	vcvt.f64.s32	d1, s2
    4510:	vstr	d1, [r4]
    4514:	b	4650 <coda_cursor_read_double+0x294>
    4518:	add	r1, sp, #20
    451c:	mov	r0, r5
    4520:	bl	d6c <read_uint16>
    4524:	cmp	r0, #0
    4528:	beq	4534 <coda_cursor_read_double+0x178>
    452c:	mvn	r0, #0
    4530:	b	46d4 <coda_cursor_read_double+0x318>
    4534:	ldrh	r3, [sp, #20]
    4538:	vmov	s14, r3
    453c:	vcvt.f64.u32	d7, s14
    4540:	vstr	d7, [r4]
    4544:	b	4650 <coda_cursor_read_double+0x294>
    4548:	add	r1, sp, #36	; 0x24
    454c:	mov	r0, r5
    4550:	bl	e74 <read_int32>
    4554:	cmp	r0, #0
    4558:	beq	4564 <coda_cursor_read_double+0x1a8>
    455c:	mvn	r0, #0
    4560:	b	46d4 <coda_cursor_read_double+0x318>
    4564:	ldr	r0, [sp, #36]	; 0x24
    4568:	vmov	s2, r0
    456c:	vcvt.f64.s32	d1, s2
    4570:	vstr	d1, [r4]
    4574:	b	4650 <coda_cursor_read_double+0x294>
    4578:	add	r1, sp, #40	; 0x28
    457c:	mov	r0, r5
    4580:	bl	f80 <read_uint32>
    4584:	cmp	r0, #0
    4588:	beq	4594 <coda_cursor_read_double+0x1d8>
    458c:	mvn	r0, #0
    4590:	b	46d4 <coda_cursor_read_double+0x318>
    4594:	ldr	r1, [sp, #40]	; 0x28
    4598:	vmov	s4, r1
    459c:	vcvt.f64.u32	d2, s4
    45a0:	vstr	d2, [r4]
    45a4:	b	4650 <coda_cursor_read_double+0x294>
    45a8:	add	r1, sp, #48	; 0x30
    45ac:	mov	r0, r5
    45b0:	bl	1088 <read_int64>
    45b4:	cmp	r0, #0
    45b8:	beq	45c4 <coda_cursor_read_double+0x208>
    45bc:	mvn	r0, #0
    45c0:	b	46d4 <coda_cursor_read_double+0x318>
    45c4:	ldr	r0, [sp, #48]	; 0x30
    45c8:	ldr	r1, [sp, #52]	; 0x34
    45cc:	bl	0 <__compcert_i64_stod>
    45d0:	vstr	d0, [r4]
    45d4:	b	4650 <coda_cursor_read_double+0x294>
    45d8:	add	r1, sp, #56	; 0x38
    45dc:	mov	r0, r5
    45e0:	bl	1190 <read_uint64>
    45e4:	cmp	r0, #0
    45e8:	beq	45f4 <coda_cursor_read_double+0x238>
    45ec:	mvn	r0, #0
    45f0:	b	46d4 <coda_cursor_read_double+0x318>
    45f4:	ldr	r0, [sp, #56]	; 0x38
    45f8:	ldr	r1, [sp, #60]	; 0x3c
    45fc:	bl	0 <__compcert_i64_stod>
    4600:	vstr	d0, [r4]
    4604:	b	4650 <coda_cursor_read_double+0x294>
    4608:	add	r1, sp, #24
    460c:	mov	r0, r5
    4610:	bl	1288 <read_float>
    4614:	cmp	r0, #0
    4618:	beq	4624 <coda_cursor_read_double+0x268>
    461c:	mvn	r0, #0
    4620:	b	46d4 <coda_cursor_read_double+0x318>
    4624:	vldr	s14, [sp, #24]
    4628:	vcvt.f64.f32	d1, s14
    462c:	vstr	d1, [r4]
    4630:	b	4650 <coda_cursor_read_double+0x294>
    4634:	mov	r1, r4
    4638:	mov	r0, r5
    463c:	bl	13c0 <read_double>
    4640:	cmp	r0, #0
    4644:	beq	4650 <coda_cursor_read_double+0x294>
    4648:	mvn	r0, #0
    464c:	b	46d4 <coda_cursor_read_double+0x318>
    4650:	ldr	r0, [sp, #32]
    4654:	cmp	r0, #0
    4658:	beq	4698 <coda_cursor_read_double+0x2dc>
    465c:	vldr	d0, [r4]
    4660:	vldr	d5, [r0, #24]
    4664:	vcmp.f64	d0, d5
    4668:	vmrs	APSR_nzcv, fpscr
    466c:	beq	4690 <coda_cursor_read_double+0x2d4>
    4670:	vldr	d2, [r0]
    4674:	vmul.f64	d4, d0, d2
    4678:	vldr	d2, [r0, #8]
    467c:	vdiv.f64	d1, d4, d2
    4680:	vldr	d6, [r0, #16]
    4684:	vadd.f64	d5, d1, d6
    4688:	vstr	d5, [r4]
    468c:	b	4698 <coda_cursor_read_double+0x2dc>
    4690:	bl	0 <coda_NaN>
    4694:	vstr	d0, [r4]
    4698:	mov	r0, #0
    469c:	b	46d4 <coda_cursor_read_double+0x318>
    46a0:	bl	0 <coda_type_get_native_type_name>
    46a4:	mov	r2, r0
    46a8:	mvn	r0, #104	; 0x68
    46ac:	ldr	r1, [pc, #52]	; 46e8 <coda_cursor_read_double+0x32c>
    46b0:	bl	0 <coda_set_error>
    46b4:	mvn	r0, #0
    46b8:	b	46d4 <coda_cursor_read_double+0x318>
    46bc:	mvn	r0, #99	; 0x63
    46c0:	ldr	r1, [pc, #40]	; 46f0 <coda_cursor_read_double+0x334>
    46c4:	ldr	r2, [pc, #32]	; 46ec <coda_cursor_read_double+0x330>
    46c8:	movw	r3, #2543	; 0x9ef
    46cc:	bl	0 <coda_set_error>
    46d0:	mvn	r0, #0
    46d4:	ldr	r4, [sp, #8]
    46d8:	ldr	r5, [sp, #12]
    46dc:	ldr	lr, [sp, #4]
    46e0:	add	sp, sp, #64	; 0x40
    46e4:	bx	lr
    46e8:	.word	0x000003f8
    46ec:	.word	0x00000453
    46f0:	.word	0x0000022b
    46f4:	.word	0x0000005b

000046f8 <coda_cursor_read_char>:
    46f8:	mov	ip, sp
    46fc:	sub	sp, sp, #32
    4700:	str	ip, [sp]
    4704:	str	lr, [sp, #4]
    4708:	str	r4, [sp, #8]
    470c:	str	r5, [sp, #12]
    4710:	str	r6, [sp, #16]
    4714:	mov	r5, r1
    4718:	mov	r6, r0
    471c:	cmp	r6, #0
    4720:	beq	4884 <coda_cursor_read_char+0x18c>
    4724:	ldr	r0, [r6, #4]
    4728:	cmp	r0, #0
    472c:	ble	4884 <coda_cursor_read_char+0x18c>
    4730:	lsl	r0, r0, #4
    4734:	add	r0, r6, r0
    4738:	sub	lr, r0, #4096	; 0x1000
    473c:	ldr	r2, [lr, #4088]	; 0xff8
    4740:	cmp	r2, #0
    4744:	beq	4884 <coda_cursor_read_char+0x18c>
    4748:	cmp	r5, #0
    474c:	bne	476c <coda_cursor_read_char+0x74>
    4750:	mvn	r0, #99	; 0x63
    4754:	ldr	r1, [pc, #364]	; 48c8 <coda_cursor_read_char+0x1d0>
    4758:	ldr	r2, [pc, #344]	; 48b8 <coda_cursor_read_char+0x1c0>
    475c:	movw	r3, #2703	; 0xa8f
    4760:	bl	0 <coda_set_error>
    4764:	mvn	r0, #0
    4768:	b	489c <coda_cursor_read_char+0x1a4>
    476c:	add	r1, sp, #24
    4770:	mov	r0, r6
    4774:	bl	740 <get_read_type>
    4778:	cmp	r0, #0
    477c:	beq	4788 <coda_cursor_read_char+0x90>
    4780:	mvn	r0, #0
    4784:	b	489c <coda_cursor_read_char+0x1a4>
    4788:	ldr	r0, [sp, #24]
    478c:	cmp	r0, #10
    4790:	bne	4868 <coda_cursor_read_char+0x170>
    4794:	mov	r1, r5
    4798:	mov	r0, r6
    479c:	ldr	r2, [r0, #4]
    47a0:	lsl	r2, r2, #4
    47a4:	add	r2, r0, r2
    47a8:	sub	lr, r2, #4096	; 0x1000
    47ac:	ldr	r3, [lr, #4088]	; 0xff8
    47b0:	ldr	r3, [r3]
    47b4:	cmp	r3, #102	; 0x66
    47b8:	bcs	4808 <coda_cursor_read_char+0x110>
    47bc:	cmp	r3, #100	; 0x64
    47c0:	bcs	47e4 <coda_cursor_read_char+0xec>
    47c4:	cmp	r3, #0
    47c8:	beq	47dc <coda_cursor_read_char+0xe4>
    47cc:	cmp	r3, #1
    47d0:	bne	4828 <coda_cursor_read_char+0x130>
    47d4:	bl	0 <coda_bin_cursor_read_char>
    47d8:	b	4850 <coda_cursor_read_char+0x158>
    47dc:	bl	0 <coda_ascii_cursor_read_char>
    47e0:	b	4850 <coda_cursor_read_char+0x158>
    47e4:	cmp	r3, #100	; 0x64
    47e8:	bne	47f4 <coda_cursor_read_char+0xfc>
    47ec:	bl	0 <coda_mem_cursor_read_char>
    47f0:	b	4850 <coda_cursor_read_char+0x158>
    47f4:	mvn	r0, #10
    47f8:	mov	r1, #0
    47fc:	bl	0 <coda_set_error>
    4800:	mvn	r4, #0
    4804:	b	4844 <coda_cursor_read_char+0x14c>
    4808:	cmp	r3, #104	; 0x68
    480c:	bcs	4820 <coda_cursor_read_char+0x128>
    4810:	cmp	r3, #102	; 0x66
    4814:	beq	4828 <coda_cursor_read_char+0x130>
    4818:	bl	0 <coda_cdf_cursor_read_char>
    481c:	b	4850 <coda_cursor_read_char+0x158>
    4820:	cmp	r3, #104	; 0x68
    4824:	beq	484c <coda_cursor_read_char+0x154>
    4828:	ldr	r0, [pc, #148]	; 48c4 <coda_cursor_read_char+0x1cc>
    482c:	ldr	r1, [pc, #132]	; 48b8 <coda_cursor_read_char+0x1c0>
    4830:	movw	r2, #722	; 0x2d2
    4834:	ldr	r3, [pc, #120]	; 48b4 <coda_cursor_read_char+0x1bc>
    4838:	bl	0 <__assert_fail>
    483c:	mov	r0, #1
    4840:	bl	0 <exit>
    4844:	mov	r0, r4
    4848:	b	4850 <coda_cursor_read_char+0x158>
    484c:	bl	0 <coda_netcdf_cursor_read_char>
    4850:	cmp	r0, #0
    4854:	beq	4860 <coda_cursor_read_char+0x168>
    4858:	mvn	r0, #0
    485c:	b	489c <coda_cursor_read_char+0x1a4>
    4860:	mov	r0, #0
    4864:	b	489c <coda_cursor_read_char+0x1a4>
    4868:	bl	0 <coda_type_get_native_type_name>
    486c:	mov	r2, r0
    4870:	mvn	r0, #104	; 0x68
    4874:	ldr	r1, [pc, #68]	; 48c0 <coda_cursor_read_char+0x1c8>
    4878:	bl	0 <coda_set_error>
    487c:	mvn	r0, #0
    4880:	b	489c <coda_cursor_read_char+0x1a4>
    4884:	mvn	r0, #99	; 0x63
    4888:	ldr	r1, [pc, #44]	; 48bc <coda_cursor_read_char+0x1c4>
    488c:	ldr	r2, [pc, #36]	; 48b8 <coda_cursor_read_char+0x1c0>
    4890:	movw	r3, #2698	; 0xa8a
    4894:	bl	0 <coda_set_error>
    4898:	mvn	r0, #0
    489c:	ldr	r4, [sp, #8]
    48a0:	ldr	r5, [sp, #12]
    48a4:	ldr	r6, [sp, #16]
    48a8:	ldr	lr, [sp, #4]
    48ac:	add	sp, sp, #32
    48b0:	bx	lr
    48b4:	.word	0x0000060d
    48b8:	.word	0x00000453
    48bc:	.word	0x0000022b
    48c0:	.word	0x00000538
    48c4:	.word	0x000004b3
    48c8:	.word	0x0000005b

000048cc <coda_cursor_read_string>:
    48cc:	mov	ip, sp
    48d0:	sub	sp, sp, #40	; 0x28
    48d4:	str	ip, [sp, #4]
    48d8:	str	lr, [sp, #8]
    48dc:	str	r4, [sp, #16]
    48e0:	str	r5, [sp, #20]
    48e4:	str	r6, [sp, #24]
    48e8:	str	r7, [sp, #28]
    48ec:	mov	r4, r2
    48f0:	mov	r6, r1
    48f4:	mov	r7, r0
    48f8:	cmp	r6, #0
    48fc:	bne	491c <coda_cursor_read_string+0x50>
    4900:	mvn	r0, #99	; 0x63
    4904:	ldr	r1, [pc, #396]	; 4a98 <coda_cursor_read_string+0x1cc>
    4908:	ldr	r2, [pc, #384]	; 4a90 <coda_cursor_read_string+0x1c4>
    490c:	movw	r3, #2747	; 0xabb
    4910:	bl	0 <coda_set_error>
    4914:	mvn	r0, #0
    4918:	b	4a68 <coda_cursor_read_string+0x19c>
    491c:	cmp	r4, #0
    4920:	bgt	4948 <coda_cursor_read_string+0x7c>
    4924:	mvn	r0, #99	; 0x63
    4928:	ldr	r1, [pc, #340]	; 4a84 <coda_cursor_read_string+0x1b8>
    492c:	ldr	r3, [pc, #348]	; 4a90 <coda_cursor_read_string+0x1c4>
    4930:	movw	r2, #2753	; 0xac1
    4934:	str	r2, [sp]
    4938:	mov	r2, r4
    493c:	bl	0 <coda_set_error>
    4940:	mvn	r0, #0
    4944:	b	4a68 <coda_cursor_read_string+0x19c>
    4948:	add	r1, sp, #32
    494c:	mov	r0, r7
    4950:	bl	0 <coda_cursor_has_ascii_content>
    4954:	cmp	r0, #0
    4958:	beq	4964 <coda_cursor_read_string+0x98>
    495c:	mvn	r0, #0
    4960:	b	4a68 <coda_cursor_read_string+0x19c>
    4964:	ldr	r3, [sp, #32]
    4968:	cmp	r3, #0
    496c:	bne	4984 <coda_cursor_read_string+0xb8>
    4970:	mvn	r0, #104	; 0x68
    4974:	ldr	r1, [pc, #268]	; 4a88 <coda_cursor_read_string+0x1bc>
    4978:	bl	0 <coda_set_error>
    497c:	mvn	r0, #0
    4980:	b	4a68 <coda_cursor_read_string+0x19c>
    4984:	mov	r2, r4
    4988:	mov	r0, r7
    498c:	ldr	r3, [r0, #4]
    4990:	lsl	r3, r3, #4
    4994:	add	r1, r0, r3
    4998:	sub	lr, r1, #4096	; 0x1000
    499c:	ldr	ip, [lr, #4088]	; 0xff8
    49a0:	ldr	r3, [ip]
    49a4:	cmp	r3, #102	; 0x66
    49a8:	bcs	4a04 <coda_cursor_read_string+0x138>
    49ac:	cmp	r3, #100	; 0x64
    49b0:	bcs	49dc <coda_cursor_read_string+0x110>
    49b4:	cmp	r3, #0
    49b8:	beq	49d0 <coda_cursor_read_string+0x104>
    49bc:	cmp	r3, #1
    49c0:	bne	4a3c <coda_cursor_read_string+0x170>
    49c4:	mov	r1, r6
    49c8:	bl	0 <coda_bin_cursor_read_string>
    49cc:	b	4a68 <coda_cursor_read_string+0x19c>
    49d0:	mov	r1, r6
    49d4:	bl	0 <coda_ascii_cursor_read_string>
    49d8:	b	4a68 <coda_cursor_read_string+0x19c>
    49dc:	cmp	r3, #100	; 0x64
    49e0:	bne	49f0 <coda_cursor_read_string+0x124>
    49e4:	mov	r1, r6
    49e8:	bl	0 <coda_mem_cursor_read_string>
    49ec:	b	4a68 <coda_cursor_read_string+0x19c>
    49f0:	mvn	r0, #10
    49f4:	mov	r1, #0
    49f8:	bl	0 <coda_set_error>
    49fc:	mvn	r5, #0
    4a00:	b	4a58 <coda_cursor_read_string+0x18c>
    4a04:	cmp	r3, #104	; 0x68
    4a08:	bcs	4a34 <coda_cursor_read_string+0x168>
    4a0c:	cmp	r3, #102	; 0x66
    4a10:	bne	4a28 <coda_cursor_read_string+0x15c>
    4a14:	mvn	r0, #12
    4a18:	mov	r1, #0
    4a1c:	bl	0 <coda_set_error>
    4a20:	mvn	r5, #0
    4a24:	b	4a58 <coda_cursor_read_string+0x18c>
    4a28:	mov	r1, r6
    4a2c:	bl	0 <coda_cdf_cursor_read_string>
    4a30:	b	4a68 <coda_cursor_read_string+0x19c>
    4a34:	cmp	r3, #104	; 0x68
    4a38:	beq	4a60 <coda_cursor_read_string+0x194>
    4a3c:	ldr	r0, [pc, #80]	; 4a94 <coda_cursor_read_string+0x1c8>
    4a40:	ldr	r1, [pc, #72]	; 4a90 <coda_cursor_read_string+0x1c4>
    4a44:	movw	r2, #758	; 0x2f6
    4a48:	ldr	r3, [pc, #60]	; 4a8c <coda_cursor_read_string+0x1c0>
    4a4c:	bl	0 <__assert_fail>
    4a50:	mov	r0, #1
    4a54:	bl	0 <exit>
    4a58:	mov	r0, r5
    4a5c:	b	4a68 <coda_cursor_read_string+0x19c>
    4a60:	mov	r1, r6
    4a64:	bl	0 <coda_netcdf_cursor_read_string>
    4a68:	ldr	r4, [sp, #16]
    4a6c:	ldr	r5, [sp, #20]
    4a70:	ldr	r6, [sp, #24]
    4a74:	ldr	r7, [sp, #28]
    4a78:	ldr	lr, [sp, #8]
    4a7c:	add	sp, sp, #40	; 0x28
    4a80:	bx	lr
    4a84:	.word	0x00000564
    4a88:	.word	0x000003ae
    4a8c:	.word	0x00000617
    4a90:	.word	0x00000453
    4a94:	.word	0x000004b3
    4a98:	.word	0x0000005b

00004a9c <coda_cursor_read_bits>:
    4a9c:	mov	ip, sp
    4aa0:	sub	sp, sp, #32
    4aa4:	str	ip, [sp, #8]
    4aa8:	str	lr, [sp, #12]
    4aac:	str	r4, [sp, #16]
    4ab0:	str	r5, [sp, #20]
    4ab4:	str	r6, [sp, #24]
    4ab8:	str	r7, [sp, #28]
    4abc:	ldr	r5, [ip, #4]
    4ac0:	ldr	r4, [ip]
    4ac4:	cmp	r0, #0
    4ac8:	beq	4bc4 <coda_cursor_read_bits+0x128>
    4acc:	ldr	ip, [r0, #4]
    4ad0:	cmp	ip, #0
    4ad4:	ble	4bc4 <coda_cursor_read_bits+0x128>
    4ad8:	lsl	ip, ip, #4
    4adc:	add	ip, r0, ip
    4ae0:	sub	lr, ip, #4096	; 0x1000
    4ae4:	ldr	r7, [lr, #4088]	; 0xff8
    4ae8:	cmp	r7, #0
    4aec:	beq	4bc4 <coda_cursor_read_bits+0x128>
    4af0:	cmp	r1, #0
    4af4:	bne	4b14 <coda_cursor_read_bits+0x78>
    4af8:	mvn	r0, #99	; 0x63
    4afc:	ldr	r1, [pc, #260]	; 4c08 <coda_cursor_read_bits+0x16c>
    4b00:	ldr	r2, [pc, #244]	; 4bfc <coda_cursor_read_bits+0x160>
    4b04:	movw	r3, #2794	; 0xaea
    4b08:	bl	0 <coda_set_error>
    4b0c:	mvn	r0, #0
    4b10:	b	4bdc <coda_cursor_read_bits+0x140>
    4b14:	mov	r6, r5
    4b18:	cmp	r6, #0
    4b1c:	bge	4b3c <coda_cursor_read_bits+0xa0>
    4b20:	mvn	r0, #99	; 0x63
    4b24:	ldr	r1, [pc, #216]	; 4c04 <coda_cursor_read_bits+0x168>
    4b28:	ldr	r2, [pc, #204]	; 4bfc <coda_cursor_read_bits+0x160>
    4b2c:	movw	r3, #2799	; 0xaef
    4b30:	bl	0 <coda_set_error>
    4b34:	mvn	r0, #0
    4b38:	b	4bdc <coda_cursor_read_bits+0x140>
    4b3c:	mov	ip, r4
    4b40:	orr	ip, r6, ip
    4b44:	cmp	ip, #0
    4b48:	bne	4b54 <coda_cursor_read_bits+0xb8>
    4b4c:	mov	r0, #0
    4b50:	b	4bdc <coda_cursor_read_bits+0x140>
    4b54:	ldr	ip, [r7]
    4b58:	cmp	ip, #102	; 0x66
    4b5c:	bcs	4bb0 <coda_cursor_read_bits+0x114>
    4b60:	cmp	ip, #100	; 0x64
    4b64:	bcs	4b98 <coda_cursor_read_bits+0xfc>
    4b68:	cmp	ip, #0
    4b6c:	beq	4b88 <coda_cursor_read_bits+0xec>
    4b70:	cmp	ip, #1
    4b74:	bne	4bb0 <coda_cursor_read_bits+0x114>
    4b78:	str	r5, [sp, #4]
    4b7c:	str	r4, [sp]
    4b80:	bl	0 <coda_bin_cursor_read_bits>
    4b84:	b	4bdc <coda_cursor_read_bits+0x140>
    4b88:	str	r5, [sp, #4]
    4b8c:	str	r4, [sp]
    4b90:	bl	0 <coda_ascii_cursor_read_bits>
    4b94:	b	4bdc <coda_cursor_read_bits+0x140>
    4b98:	cmp	ip, #100	; 0x64
    4b9c:	bne	4bb0 <coda_cursor_read_bits+0x114>
    4ba0:	str	r5, [sp, #4]
    4ba4:	str	r4, [sp]
    4ba8:	bl	0 <coda_mem_cursor_read_bits>
    4bac:	b	4bdc <coda_cursor_read_bits+0x140>
    4bb0:	mvn	r0, #104	; 0x68
    4bb4:	ldr	r1, [pc, #60]	; 4bf8 <coda_cursor_read_bits+0x15c>
    4bb8:	bl	0 <coda_set_error>
    4bbc:	mvn	r0, #0
    4bc0:	b	4bdc <coda_cursor_read_bits+0x140>
    4bc4:	mvn	r0, #99	; 0x63
    4bc8:	ldr	r1, [pc, #48]	; 4c00 <coda_cursor_read_bits+0x164>
    4bcc:	ldr	r2, [pc, #40]	; 4bfc <coda_cursor_read_bits+0x160>
    4bd0:	movw	r3, #2789	; 0xae5
    4bd4:	bl	0 <coda_set_error>
    4bd8:	mvn	r0, #0
    4bdc:	ldr	r4, [sp, #16]
    4be0:	ldr	r5, [sp, #20]
    4be4:	ldr	r6, [sp, #24]
    4be8:	ldr	r7, [sp, #28]
    4bec:	ldr	lr, [sp, #12]
    4bf0:	add	sp, sp, #32
    4bf4:	bx	lr
    4bf8:	.word	0x0000019e
    4bfc:	.word	0x00000453
    4c00:	.word	0x0000022b
    4c04:	.word	0x000002f3
    4c08:	.word	0x0000005b

00004c0c <coda_cursor_read_bytes>:
    4c0c:	mov	ip, sp
    4c10:	sub	sp, sp, #32
    4c14:	str	ip, [sp, #8]
    4c18:	str	lr, [sp, #12]
    4c1c:	str	r4, [sp, #16]
    4c20:	str	r5, [sp, #20]
    4c24:	str	r6, [sp, #24]
    4c28:	str	r7, [sp, #28]
    4c2c:	ldr	r5, [ip, #4]
    4c30:	ldr	r4, [ip]
    4c34:	cmp	r0, #0
    4c38:	beq	4d58 <coda_cursor_read_bytes+0x14c>
    4c3c:	ldr	ip, [r0, #4]
    4c40:	cmp	ip, #0
    4c44:	ble	4d58 <coda_cursor_read_bytes+0x14c>
    4c48:	lsl	ip, ip, #4
    4c4c:	add	ip, r0, ip
    4c50:	sub	lr, ip, #4096	; 0x1000
    4c54:	ldr	r7, [lr, #4088]	; 0xff8
    4c58:	cmp	r7, #0
    4c5c:	beq	4d58 <coda_cursor_read_bytes+0x14c>
    4c60:	cmp	r1, #0
    4c64:	bne	4c84 <coda_cursor_read_bytes+0x78>
    4c68:	mvn	r0, #99	; 0x63
    4c6c:	ldr	r1, [pc, #300]	; 4da0 <coda_cursor_read_bytes+0x194>
    4c70:	ldr	r2, [pc, #280]	; 4d90 <coda_cursor_read_bytes+0x184>
    4c74:	movw	r3, #2850	; 0xb22
    4c78:	bl	0 <coda_set_error>
    4c7c:	mvn	r0, #0
    4c80:	b	4d70 <coda_cursor_read_bytes+0x164>
    4c84:	cmp	r3, #0
    4c88:	bge	4ca8 <coda_cursor_read_bytes+0x9c>
    4c8c:	mvn	r0, #99	; 0x63
    4c90:	ldr	r1, [pc, #256]	; 4d98 <coda_cursor_read_bytes+0x18c>
    4c94:	ldr	r2, [pc, #244]	; 4d90 <coda_cursor_read_bytes+0x184>
    4c98:	movw	r3, #2855	; 0xb27
    4c9c:	bl	0 <coda_set_error>
    4ca0:	mvn	r0, #0
    4ca4:	b	4d70 <coda_cursor_read_bytes+0x164>
    4ca8:	mov	r6, r5
    4cac:	cmp	r6, #0
    4cb0:	bge	4cd0 <coda_cursor_read_bytes+0xc4>
    4cb4:	mvn	r0, #99	; 0x63
    4cb8:	ldr	r1, [pc, #220]	; 4d9c <coda_cursor_read_bytes+0x190>
    4cbc:	ldr	r2, [pc, #204]	; 4d90 <coda_cursor_read_bytes+0x184>
    4cc0:	movw	r3, #2860	; 0xb2c
    4cc4:	bl	0 <coda_set_error>
    4cc8:	mvn	r0, #0
    4ccc:	b	4d70 <coda_cursor_read_bytes+0x164>
    4cd0:	mov	ip, r4
    4cd4:	orr	ip, r6, ip
    4cd8:	cmp	ip, #0
    4cdc:	bne	4ce8 <coda_cursor_read_bytes+0xdc>
    4ce0:	mov	r0, #0
    4ce4:	b	4d70 <coda_cursor_read_bytes+0x164>
    4ce8:	ldr	ip, [r7]
    4cec:	cmp	ip, #102	; 0x66
    4cf0:	bcs	4d44 <coda_cursor_read_bytes+0x138>
    4cf4:	cmp	ip, #100	; 0x64
    4cf8:	bcs	4d2c <coda_cursor_read_bytes+0x120>
    4cfc:	cmp	ip, #0
    4d00:	beq	4d1c <coda_cursor_read_bytes+0x110>
    4d04:	cmp	ip, #1
    4d08:	bne	4d44 <coda_cursor_read_bytes+0x138>
    4d0c:	str	r5, [sp, #4]
    4d10:	str	r4, [sp]
    4d14:	bl	0 <coda_bin_cursor_read_bytes>
    4d18:	b	4d70 <coda_cursor_read_bytes+0x164>
    4d1c:	str	r5, [sp, #4]
    4d20:	str	r4, [sp]
    4d24:	bl	0 <coda_ascii_cursor_read_bytes>
    4d28:	b	4d70 <coda_cursor_read_bytes+0x164>
    4d2c:	cmp	ip, #100	; 0x64
    4d30:	bne	4d44 <coda_cursor_read_bytes+0x138>
    4d34:	str	r5, [sp, #4]
    4d38:	str	r4, [sp]
    4d3c:	bl	0 <coda_mem_cursor_read_bytes>
    4d40:	b	4d70 <coda_cursor_read_bytes+0x164>
    4d44:	mvn	r0, #104	; 0x68
    4d48:	ldr	r1, [pc, #60]	; 4d8c <coda_cursor_read_bytes+0x180>
    4d4c:	bl	0 <coda_set_error>
    4d50:	mvn	r0, #0
    4d54:	b	4d70 <coda_cursor_read_bytes+0x164>
    4d58:	mvn	r0, #99	; 0x63
    4d5c:	ldr	r1, [pc, #48]	; 4d94 <coda_cursor_read_bytes+0x188>
    4d60:	ldr	r2, [pc, #40]	; 4d90 <coda_cursor_read_bytes+0x184>
    4d64:	movw	r3, #2845	; 0xb1d
    4d68:	bl	0 <coda_set_error>
    4d6c:	mvn	r0, #0
    4d70:	ldr	r4, [sp, #16]
    4d74:	ldr	r5, [sp, #20]
    4d78:	ldr	r6, [sp, #24]
    4d7c:	ldr	r7, [sp, #28]
    4d80:	ldr	lr, [sp, #12]
    4d84:	add	sp, sp, #32
    4d88:	bx	lr
    4d8c:	.word	0x000000d3
    4d90:	.word	0x00000453
    4d94:	.word	0x0000022b
    4d98:	.word	0x00000037
    4d9c:	.word	0x0000024b
    4da0:	.word	0x0000005b

00004da4 <coda_cursor_read_int8_array>:
    4da4:	mov	ip, sp
    4da8:	sub	sp, sp, #32
    4dac:	str	ip, [sp]
    4db0:	str	lr, [sp, #4]
    4db4:	str	r4, [sp, #8]
    4db8:	str	r5, [sp, #12]
    4dbc:	str	r6, [sp, #16]
    4dc0:	mov	r4, r2
    4dc4:	mov	r6, r1
    4dc8:	mov	r5, r0
    4dcc:	cmp	r5, #0
    4dd0:	beq	4ec0 <coda_cursor_read_int8_array+0x11c>
    4dd4:	ldr	r1, [r5, #4]
    4dd8:	cmp	r1, #0
    4ddc:	ble	4ec0 <coda_cursor_read_int8_array+0x11c>
    4de0:	lsl	r0, r1, #4
    4de4:	add	r1, r5, r0
    4de8:	sub	lr, r1, #4096	; 0x1000
    4dec:	ldr	r2, [lr, #4088]	; 0xff8
    4df0:	cmp	r2, #0
    4df4:	beq	4ec0 <coda_cursor_read_int8_array+0x11c>
    4df8:	cmp	r6, #0
    4dfc:	bne	4e1c <coda_cursor_read_int8_array+0x78>
    4e00:	mvn	r0, #99	; 0x63
    4e04:	ldr	r1, [pc, #244]	; 4f00 <coda_cursor_read_int8_array+0x15c>
    4e08:	ldr	r2, [pc, #232]	; 4ef8 <coda_cursor_read_int8_array+0x154>
    4e0c:	movw	r3, #2913	; 0xb61
    4e10:	bl	0 <coda_set_error>
    4e14:	mvn	r0, #0
    4e18:	b	4ed8 <coda_cursor_read_int8_array+0x134>
    4e1c:	ldr	r3, [r2]
    4e20:	cmp	r3, #100	; 0x64
    4e24:	blt	4e2c <coda_cursor_read_int8_array+0x88>
    4e28:	ldr	r2, [r2, #4]
    4e2c:	ldr	r0, [r2, #8]
    4e30:	cmp	r0, #1
    4e34:	beq	4e54 <coda_cursor_read_int8_array+0xb0>
    4e38:	bl	0 <coda_type_get_class_name>
    4e3c:	mov	r2, r0
    4e40:	mvn	r0, #104	; 0x68
    4e44:	ldr	r1, [pc, #164]	; 4ef0 <coda_cursor_read_int8_array+0x14c>
    4e48:	bl	0 <coda_set_error>
    4e4c:	mvn	r0, #0
    4e50:	b	4ed8 <coda_cursor_read_int8_array+0x134>
    4e54:	add	r1, sp, #24
    4e58:	mov	r0, r2
    4e5c:	bl	854 <get_array_element_read_type>
    4e60:	cmp	r0, #0
    4e64:	beq	4e70 <coda_cursor_read_int8_array+0xcc>
    4e68:	mvn	r0, #0
    4e6c:	b	4ed8 <coda_cursor_read_int8_array+0x134>
    4e70:	ldr	r0, [sp, #24]
    4e74:	cmp	r0, #0
    4e78:	bne	4ea4 <coda_cursor_read_int8_array+0x100>
    4e7c:	mov	r2, r4
    4e80:	mov	r1, r6
    4e84:	mov	r0, r5
    4e88:	bl	16d8 <read_int8_array>
    4e8c:	cmp	r0, #0
    4e90:	beq	4e9c <coda_cursor_read_int8_array+0xf8>
    4e94:	mvn	r0, #0
    4e98:	b	4ed8 <coda_cursor_read_int8_array+0x134>
    4e9c:	mov	r0, #0
    4ea0:	b	4ed8 <coda_cursor_read_int8_array+0x134>
    4ea4:	bl	0 <coda_type_get_native_type_name>
    4ea8:	mov	r2, r0
    4eac:	mvn	r0, #104	; 0x68
    4eb0:	ldr	r1, [pc, #60]	; 4ef4 <coda_cursor_read_int8_array+0x150>
    4eb4:	bl	0 <coda_set_error>
    4eb8:	mvn	r0, #0
    4ebc:	b	4ed8 <coda_cursor_read_int8_array+0x134>
    4ec0:	mvn	r0, #99	; 0x63
    4ec4:	ldr	r1, [pc, #48]	; 4efc <coda_cursor_read_int8_array+0x158>
    4ec8:	ldr	r2, [pc, #40]	; 4ef8 <coda_cursor_read_int8_array+0x154>
    4ecc:	movw	r3, #2908	; 0xb5c
    4ed0:	bl	0 <coda_set_error>
    4ed4:	mvn	r0, #0
    4ed8:	ldr	r4, [sp, #8]
    4edc:	ldr	r5, [sp, #12]
    4ee0:	ldr	r6, [sp, #16]
    4ee4:	ldr	lr, [sp, #4]
    4ee8:	add	sp, sp, #32
    4eec:	bx	lr
    4ef0:	.word	0x000002bc
    4ef4:	.word	0x000003cc
    4ef8:	.word	0x00000453
    4efc:	.word	0x0000022b
    4f00:	.word	0x0000005b

00004f04 <coda_cursor_read_uint8_array>:
    4f04:	mov	ip, sp
    4f08:	sub	sp, sp, #32
    4f0c:	str	ip, [sp]
    4f10:	str	lr, [sp, #4]
    4f14:	str	r4, [sp, #8]
    4f18:	str	r5, [sp, #12]
    4f1c:	str	r6, [sp, #16]
    4f20:	mov	r4, r2
    4f24:	mov	r6, r1
    4f28:	mov	r5, r0
    4f2c:	cmp	r5, #0
    4f30:	beq	5020 <coda_cursor_read_uint8_array+0x11c>
    4f34:	ldr	r1, [r5, #4]
    4f38:	cmp	r1, #0
    4f3c:	ble	5020 <coda_cursor_read_uint8_array+0x11c>
    4f40:	lsl	r0, r1, #4
    4f44:	add	r1, r5, r0
    4f48:	sub	lr, r1, #4096	; 0x1000
    4f4c:	ldr	r2, [lr, #4088]	; 0xff8
    4f50:	cmp	r2, #0
    4f54:	beq	5020 <coda_cursor_read_uint8_array+0x11c>
    4f58:	cmp	r6, #0
    4f5c:	bne	4f7c <coda_cursor_read_uint8_array+0x78>
    4f60:	mvn	r0, #99	; 0x63
    4f64:	ldr	r1, [pc, #244]	; 5060 <coda_cursor_read_uint8_array+0x15c>
    4f68:	ldr	r2, [pc, #232]	; 5058 <coda_cursor_read_uint8_array+0x154>
    4f6c:	movw	r3, #2972	; 0xb9c
    4f70:	bl	0 <coda_set_error>
    4f74:	mvn	r0, #0
    4f78:	b	5038 <coda_cursor_read_uint8_array+0x134>
    4f7c:	ldr	r3, [r2]
    4f80:	cmp	r3, #100	; 0x64
    4f84:	blt	4f8c <coda_cursor_read_uint8_array+0x88>
    4f88:	ldr	r2, [r2, #4]
    4f8c:	ldr	r0, [r2, #8]
    4f90:	cmp	r0, #1
    4f94:	beq	4fb4 <coda_cursor_read_uint8_array+0xb0>
    4f98:	bl	0 <coda_type_get_class_name>
    4f9c:	mov	r2, r0
    4fa0:	mvn	r0, #104	; 0x68
    4fa4:	ldr	r1, [pc, #168]	; 5054 <coda_cursor_read_uint8_array+0x150>
    4fa8:	bl	0 <coda_set_error>
    4fac:	mvn	r0, #0
    4fb0:	b	5038 <coda_cursor_read_uint8_array+0x134>
    4fb4:	add	r1, sp, #24
    4fb8:	mov	r0, r2
    4fbc:	bl	854 <get_array_element_read_type>
    4fc0:	cmp	r0, #0
    4fc4:	beq	4fd0 <coda_cursor_read_uint8_array+0xcc>
    4fc8:	mvn	r0, #0
    4fcc:	b	5038 <coda_cursor_read_uint8_array+0x134>
    4fd0:	ldr	r0, [sp, #24]
    4fd4:	cmp	r0, #1
    4fd8:	bne	5004 <coda_cursor_read_uint8_array+0x100>
    4fdc:	mov	r2, r4
    4fe0:	mov	r1, r6
    4fe4:	mov	r0, r5
    4fe8:	bl	18a0 <read_uint8_array>
    4fec:	cmp	r0, #0
    4ff0:	beq	4ffc <coda_cursor_read_uint8_array+0xf8>
    4ff4:	mvn	r0, #0
    4ff8:	b	5038 <coda_cursor_read_uint8_array+0x134>
    4ffc:	mov	r0, #0
    5000:	b	5038 <coda_cursor_read_uint8_array+0x134>
    5004:	bl	0 <coda_type_get_native_type_name>
    5008:	mov	r2, r0
    500c:	mvn	r0, #104	; 0x68
    5010:	ldr	r1, [pc, #56]	; 5050 <coda_cursor_read_uint8_array+0x14c>
    5014:	bl	0 <coda_set_error>
    5018:	mvn	r0, #0
    501c:	b	5038 <coda_cursor_read_uint8_array+0x134>
    5020:	mvn	r0, #99	; 0x63
    5024:	ldr	r1, [pc, #48]	; 505c <coda_cursor_read_uint8_array+0x158>
    5028:	ldr	r2, [pc, #40]	; 5058 <coda_cursor_read_uint8_array+0x154>
    502c:	movw	r3, #2967	; 0xb97
    5030:	bl	0 <coda_set_error>
    5034:	mvn	r0, #0
    5038:	ldr	r4, [sp, #8]
    503c:	ldr	r5, [sp, #12]
    5040:	ldr	r6, [sp, #16]
    5044:	ldr	lr, [sp, #4]
    5048:	add	sp, sp, #32
    504c:	bx	lr
    5050:	.word	0x00000078
    5054:	.word	0x000002bc
    5058:	.word	0x00000453
    505c:	.word	0x0000022b
    5060:	.word	0x0000005b

00005064 <coda_cursor_read_int16_array>:
    5064:	mov	ip, sp
    5068:	sub	sp, sp, #32
    506c:	str	ip, [sp]
    5070:	str	lr, [sp, #4]
    5074:	str	r4, [sp, #8]
    5078:	str	r5, [sp, #12]
    507c:	str	r6, [sp, #16]
    5080:	mov	r6, r2
    5084:	mov	r5, r1
    5088:	mov	r4, r0
    508c:	cmp	r4, #0
    5090:	beq	5258 <coda_cursor_read_int16_array+0x1f4>
    5094:	ldr	r1, [r4, #4]
    5098:	cmp	r1, #0
    509c:	ble	5258 <coda_cursor_read_int16_array+0x1f4>
    50a0:	lsl	r0, r1, #4
    50a4:	add	r3, r4, r0
    50a8:	sub	lr, r3, #4096	; 0x1000
    50ac:	ldr	r0, [lr, #4088]	; 0xff8
    50b0:	cmp	r0, #0
    50b4:	beq	5258 <coda_cursor_read_int16_array+0x1f4>
    50b8:	cmp	r5, #0
    50bc:	bne	50dc <coda_cursor_read_int16_array+0x78>
    50c0:	mvn	r0, #99	; 0x63
    50c4:	ldr	r1, [pc, #456]	; 5294 <coda_cursor_read_int16_array+0x230>
    50c8:	ldr	r2, [pc, #444]	; 528c <coda_cursor_read_int16_array+0x228>
    50cc:	movw	r3, #3035	; 0xbdb
    50d0:	bl	0 <coda_set_error>
    50d4:	mvn	r0, #0
    50d8:	b	5270 <coda_cursor_read_int16_array+0x20c>
    50dc:	ldr	r1, [r0]
    50e0:	cmp	r1, #100	; 0x64
    50e4:	blt	50ec <coda_cursor_read_int16_array+0x88>
    50e8:	ldr	r0, [r0, #4]
    50ec:	ldr	r1, [r0, #8]
    50f0:	cmp	r1, #1
    50f4:	beq	5118 <coda_cursor_read_int16_array+0xb4>
    50f8:	mov	r0, r1
    50fc:	bl	0 <coda_type_get_class_name>
    5100:	mov	r2, r0
    5104:	mvn	r0, #104	; 0x68
    5108:	ldr	r1, [pc, #376]	; 5288 <coda_cursor_read_int16_array+0x224>
    510c:	bl	0 <coda_set_error>
    5110:	mvn	r0, #0
    5114:	b	5270 <coda_cursor_read_int16_array+0x20c>
    5118:	add	r1, sp, #24
    511c:	bl	854 <get_array_element_read_type>
    5120:	cmp	r0, #0
    5124:	beq	5130 <coda_cursor_read_int16_array+0xcc>
    5128:	mvn	r0, #0
    512c:	b	5270 <coda_cursor_read_int16_array+0x20c>
    5130:	ldr	r0, [sp, #24]
    5134:	cmp	r0, #0
    5138:	beq	51f0 <coda_cursor_read_int16_array+0x18c>
    513c:	cmp	r0, #1
    5140:	beq	5190 <coda_cursor_read_int16_array+0x12c>
    5144:	cmp	r0, #2
    5148:	bne	516c <coda_cursor_read_int16_array+0x108>
    514c:	mov	r2, r6
    5150:	mov	r1, r5
    5154:	mov	r0, r4
    5158:	bl	1a48 <read_int16_array>
    515c:	cmp	r0, #0
    5160:	beq	5250 <coda_cursor_read_int16_array+0x1ec>
    5164:	mvn	r0, #0
    5168:	b	5270 <coda_cursor_read_int16_array+0x20c>
    516c:	bl	0 <coda_type_get_native_type_name>
    5170:	mvn	r2, #104	; 0x68
    5174:	ldr	r1, [pc, #284]	; 5298 <coda_cursor_read_int16_array+0x234>
    5178:	mov	ip, r0
    517c:	mov	r0, r2
    5180:	mov	r2, ip
    5184:	bl	0 <coda_set_error>
    5188:	mvn	r0, #0
    518c:	b	5270 <coda_cursor_read_int16_array+0x20c>
    5190:	mov	r2, r6
    5194:	mov	r1, r5
    5198:	mov	r0, r4
    519c:	bl	18a0 <read_uint8_array>
    51a0:	cmp	r0, #0
    51a4:	beq	51b0 <coda_cursor_read_int16_array+0x14c>
    51a8:	mvn	r0, #0
    51ac:	b	5270 <coda_cursor_read_int16_array+0x20c>
    51b0:	add	r1, sp, #28
    51b4:	mov	r0, r4
    51b8:	bl	0 <coda_cursor_get_num_elements>
    51bc:	cmp	r0, #0
    51c0:	beq	51cc <coda_cursor_read_int16_array+0x168>
    51c4:	mvn	r0, #0
    51c8:	b	5270 <coda_cursor_read_int16_array+0x20c>
    51cc:	ldr	r3, [sp, #28]
    51d0:	sub	r0, r3, #1
    51d4:	cmp	r0, #0
    51d8:	blt	5250 <coda_cursor_read_int16_array+0x1ec>
    51dc:	add	r3, r5, r0, lsl #1
    51e0:	ldrb	ip, [r5, r0]
    51e4:	strh	ip, [r3]
    51e8:	sub	r0, r0, #1
    51ec:	b	51d4 <coda_cursor_read_int16_array+0x170>
    51f0:	mov	r2, r6
    51f4:	mov	r1, r5
    51f8:	mov	r0, r4
    51fc:	bl	16d8 <read_int8_array>
    5200:	cmp	r0, #0
    5204:	beq	5210 <coda_cursor_read_int16_array+0x1ac>
    5208:	mvn	r0, #0
    520c:	b	5270 <coda_cursor_read_int16_array+0x20c>
    5210:	add	r1, sp, #28
    5214:	mov	r0, r4
    5218:	bl	0 <coda_cursor_get_num_elements>
    521c:	cmp	r0, #0
    5220:	beq	522c <coda_cursor_read_int16_array+0x1c8>
    5224:	mvn	r0, #0
    5228:	b	5270 <coda_cursor_read_int16_array+0x20c>
    522c:	ldr	r0, [sp, #28]
    5230:	sub	ip, r0, #1
    5234:	cmp	ip, #0
    5238:	blt	5250 <coda_cursor_read_int16_array+0x1ec>
    523c:	add	r1, r5, ip, lsl #1
    5240:	ldrsb	r3, [r5, ip]
    5244:	strh	r3, [r1]
    5248:	sub	ip, ip, #1
    524c:	b	5234 <coda_cursor_read_int16_array+0x1d0>
    5250:	mov	r0, #0
    5254:	b	5270 <coda_cursor_read_int16_array+0x20c>
    5258:	mvn	r0, #99	; 0x63
    525c:	ldr	r1, [pc, #44]	; 5290 <coda_cursor_read_int16_array+0x22c>
    5260:	ldr	r2, [pc, #36]	; 528c <coda_cursor_read_int16_array+0x228>
    5264:	movw	r3, #3030	; 0xbd6
    5268:	bl	0 <coda_set_error>
    526c:	mvn	r0, #0
    5270:	ldr	r4, [sp, #8]
    5274:	ldr	r5, [sp, #12]
    5278:	ldr	r6, [sp, #16]
    527c:	ldr	lr, [sp, #4]
    5280:	add	sp, sp, #32
    5284:	bx	lr
    5288:	.word	0x000002bc
    528c:	.word	0x00000453
    5290:	.word	0x0000022b
    5294:	.word	0x0000005b
    5298:	.word	0x00000133

0000529c <coda_cursor_read_uint16_array>:
    529c:	mov	ip, sp
    52a0:	sub	sp, sp, #32
    52a4:	str	ip, [sp]
    52a8:	str	lr, [sp, #4]
    52ac:	str	r4, [sp, #8]
    52b0:	str	r5, [sp, #12]
    52b4:	str	r6, [sp, #16]
    52b8:	mov	r4, r2
    52bc:	mov	r5, r1
    52c0:	mov	r6, r0
    52c4:	cmp	r6, #0
    52c8:	beq	5420 <coda_cursor_read_uint16_array+0x184>
    52cc:	ldr	r1, [r6, #4]
    52d0:	cmp	r1, #0
    52d4:	ble	5420 <coda_cursor_read_uint16_array+0x184>
    52d8:	lsl	r2, r1, #4
    52dc:	add	r3, r6, r2
    52e0:	sub	lr, r3, #4096	; 0x1000
    52e4:	ldr	r2, [lr, #4088]	; 0xff8
    52e8:	cmp	r2, #0
    52ec:	beq	5420 <coda_cursor_read_uint16_array+0x184>
    52f0:	cmp	r5, #0
    52f4:	bne	5314 <coda_cursor_read_uint16_array+0x78>
    52f8:	mvn	r0, #99	; 0x63
    52fc:	ldr	r1, [pc, #348]	; 5460 <coda_cursor_read_uint16_array+0x1c4>
    5300:	ldr	r2, [pc, #336]	; 5458 <coda_cursor_read_uint16_array+0x1bc>
    5304:	movw	r3, #3125	; 0xc35
    5308:	bl	0 <coda_set_error>
    530c:	mvn	r0, #0
    5310:	b	5438 <coda_cursor_read_uint16_array+0x19c>
    5314:	ldr	ip, [r2]
    5318:	cmp	ip, #100	; 0x64
    531c:	blt	5324 <coda_cursor_read_uint16_array+0x88>
    5320:	ldr	r2, [r2, #4]
    5324:	ldr	r0, [r2, #8]
    5328:	cmp	r0, #1
    532c:	beq	534c <coda_cursor_read_uint16_array+0xb0>
    5330:	bl	0 <coda_type_get_class_name>
    5334:	mov	r2, r0
    5338:	mvn	r0, #104	; 0x68
    533c:	ldr	r1, [pc, #268]	; 5450 <coda_cursor_read_uint16_array+0x1b4>
    5340:	bl	0 <coda_set_error>
    5344:	mvn	r0, #0
    5348:	b	5438 <coda_cursor_read_uint16_array+0x19c>
    534c:	add	r1, sp, #24
    5350:	mov	r0, r2
    5354:	bl	854 <get_array_element_read_type>
    5358:	cmp	r0, #0
    535c:	beq	5368 <coda_cursor_read_uint16_array+0xcc>
    5360:	mvn	r0, #0
    5364:	b	5438 <coda_cursor_read_uint16_array+0x19c>
    5368:	ldr	r0, [sp, #24]
    536c:	cmp	r0, #1
    5370:	beq	53b8 <coda_cursor_read_uint16_array+0x11c>
    5374:	cmp	r0, #3
    5378:	bne	539c <coda_cursor_read_uint16_array+0x100>
    537c:	mov	r2, r4
    5380:	mov	r1, r5
    5384:	mov	r0, r6
    5388:	bl	1c10 <read_uint16_array>
    538c:	cmp	r0, #0
    5390:	beq	5418 <coda_cursor_read_uint16_array+0x17c>
    5394:	mvn	r0, #0
    5398:	b	5438 <coda_cursor_read_uint16_array+0x19c>
    539c:	bl	0 <coda_type_get_native_type_name>
    53a0:	mov	r2, r0
    53a4:	mvn	r0, #104	; 0x68
    53a8:	ldr	r1, [pc, #164]	; 5454 <coda_cursor_read_uint16_array+0x1b8>
    53ac:	bl	0 <coda_set_error>
    53b0:	mvn	r0, #0
    53b4:	b	5438 <coda_cursor_read_uint16_array+0x19c>
    53b8:	mov	r2, r4
    53bc:	mov	r1, r5
    53c0:	mov	r0, r6
    53c4:	bl	18a0 <read_uint8_array>
    53c8:	cmp	r0, #0
    53cc:	beq	53d8 <coda_cursor_read_uint16_array+0x13c>
    53d0:	mvn	r0, #0
    53d4:	b	5438 <coda_cursor_read_uint16_array+0x19c>
    53d8:	add	r1, sp, #28
    53dc:	mov	r0, r6
    53e0:	bl	0 <coda_cursor_get_num_elements>
    53e4:	cmp	r0, #0
    53e8:	beq	53f4 <coda_cursor_read_uint16_array+0x158>
    53ec:	mvn	r0, #0
    53f0:	b	5438 <coda_cursor_read_uint16_array+0x19c>
    53f4:	ldr	ip, [sp, #28]
    53f8:	sub	r1, ip, #1
    53fc:	cmp	r1, #0
    5400:	blt	5418 <coda_cursor_read_uint16_array+0x17c>
    5404:	add	r3, r5, r1, lsl #1
    5408:	ldrb	r2, [r5, r1]
    540c:	strh	r2, [r3]
    5410:	sub	r1, r1, #1
    5414:	b	53fc <coda_cursor_read_uint16_array+0x160>
    5418:	mov	r0, #0
    541c:	b	5438 <coda_cursor_read_uint16_array+0x19c>
    5420:	mvn	r0, #99	; 0x63
    5424:	ldr	r1, [pc, #48]	; 545c <coda_cursor_read_uint16_array+0x1c0>
    5428:	ldr	r2, [pc, #40]	; 5458 <coda_cursor_read_uint16_array+0x1bc>
    542c:	mov	r3, #3120	; 0xc30
    5430:	bl	0 <coda_set_error>
    5434:	mvn	r0, #0
    5438:	ldr	r4, [sp, #8]
    543c:	ldr	r5, [sp, #12]
    5440:	ldr	r6, [sp, #16]
    5444:	ldr	lr, [sp, #4]
    5448:	add	sp, sp, #32
    544c:	bx	lr
    5450:	.word	0x000002bc
    5454:	.word	0x000004b5
    5458:	.word	0x00000453
    545c:	.word	0x0000022b
    5460:	.word	0x0000005b

00005464 <coda_cursor_read_int32_array>:
    5464:	mov	ip, sp
    5468:	sub	sp, sp, #32
    546c:	str	ip, [sp]
    5470:	str	lr, [sp, #4]
    5474:	str	r4, [sp, #8]
    5478:	str	r5, [sp, #12]
    547c:	str	r6, [sp, #16]
    5480:	mov	r5, r2
    5484:	mov	r6, r1
    5488:	mov	r4, r0
    548c:	cmp	r4, #0
    5490:	beq	5720 <coda_cursor_read_int32_array+0x2bc>
    5494:	ldr	r2, [r4, #4]
    5498:	cmp	r2, #0
    549c:	ble	5720 <coda_cursor_read_int32_array+0x2bc>
    54a0:	lsl	r3, r2, #4
    54a4:	add	r2, r4, r3
    54a8:	sub	lr, r2, #4096	; 0x1000
    54ac:	ldr	r0, [lr, #4088]	; 0xff8
    54b0:	cmp	r0, #0
    54b4:	beq	5720 <coda_cursor_read_int32_array+0x2bc>
    54b8:	cmp	r6, #0
    54bc:	bne	54dc <coda_cursor_read_int32_array+0x78>
    54c0:	mvn	r0, #99	; 0x63
    54c4:	ldr	r1, [pc, #660]	; 5760 <coda_cursor_read_int32_array+0x2fc>
    54c8:	ldr	r2, [pc, #648]	; 5758 <coda_cursor_read_int32_array+0x2f4>
    54cc:	movw	r3, #3204	; 0xc84
    54d0:	bl	0 <coda_set_error>
    54d4:	mvn	r0, #0
    54d8:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    54dc:	ldr	r1, [r0]
    54e0:	cmp	r1, #100	; 0x64
    54e4:	blt	54ec <coda_cursor_read_int32_array+0x88>
    54e8:	ldr	r0, [r0, #4]
    54ec:	ldr	r1, [r0, #8]
    54f0:	cmp	r1, #1
    54f4:	beq	5518 <coda_cursor_read_int32_array+0xb4>
    54f8:	mov	r0, r1
    54fc:	bl	0 <coda_type_get_class_name>
    5500:	mov	r2, r0
    5504:	mvn	r0, #104	; 0x68
    5508:	ldr	r1, [pc, #580]	; 5754 <coda_cursor_read_int32_array+0x2f0>
    550c:	bl	0 <coda_set_error>
    5510:	mvn	r0, #0
    5514:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5518:	add	r1, sp, #24
    551c:	bl	854 <get_array_element_read_type>
    5520:	cmp	r0, #0
    5524:	beq	5530 <coda_cursor_read_int32_array+0xcc>
    5528:	mvn	r0, #0
    552c:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5530:	ldr	r0, [sp, #24]
    5534:	cmp	r0, #2
    5538:	bcs	55fc <coda_cursor_read_int32_array+0x198>
    553c:	cmp	r0, #0
    5540:	bne	55a0 <coda_cursor_read_int32_array+0x13c>
    5544:	mov	r2, r5
    5548:	mov	r1, r6
    554c:	mov	r0, r4
    5550:	bl	16d8 <read_int8_array>
    5554:	cmp	r0, #0
    5558:	beq	5564 <coda_cursor_read_int32_array+0x100>
    555c:	mvn	r0, #0
    5560:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5564:	add	r1, sp, #28
    5568:	mov	r0, r4
    556c:	bl	0 <coda_cursor_get_num_elements>
    5570:	cmp	r0, #0
    5574:	beq	5580 <coda_cursor_read_int32_array+0x11c>
    5578:	mvn	r0, #0
    557c:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5580:	ldr	r0, [sp, #28]
    5584:	sub	ip, r0, #1
    5588:	cmp	ip, #0
    558c:	blt	5718 <coda_cursor_read_int32_array+0x2b4>
    5590:	ldrsb	r0, [r6, ip]
    5594:	str	r0, [r6, ip, lsl #2]
    5598:	sub	ip, ip, #1
    559c:	b	5588 <coda_cursor_read_int32_array+0x124>
    55a0:	mov	r2, r5
    55a4:	mov	r1, r6
    55a8:	mov	r0, r4
    55ac:	bl	18a0 <read_uint8_array>
    55b0:	cmp	r0, #0
    55b4:	beq	55c0 <coda_cursor_read_int32_array+0x15c>
    55b8:	mvn	r0, #0
    55bc:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    55c0:	add	r1, sp, #28
    55c4:	mov	r0, r4
    55c8:	bl	0 <coda_cursor_get_num_elements>
    55cc:	cmp	r0, #0
    55d0:	beq	55dc <coda_cursor_read_int32_array+0x178>
    55d4:	mvn	r0, #0
    55d8:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    55dc:	ldr	r3, [sp, #28]
    55e0:	sub	r0, r3, #1
    55e4:	cmp	r0, #0
    55e8:	blt	5718 <coda_cursor_read_int32_array+0x2b4>
    55ec:	ldrb	ip, [r6, r0]
    55f0:	str	ip, [r6, r0, lsl #2]
    55f4:	sub	r0, r0, #1
    55f8:	b	55e4 <coda_cursor_read_int32_array+0x180>
    55fc:	cmp	r0, #2
    5600:	beq	56b8 <coda_cursor_read_int32_array+0x254>
    5604:	cmp	r0, #3
    5608:	beq	5658 <coda_cursor_read_int32_array+0x1f4>
    560c:	cmp	r0, #4
    5610:	bne	5634 <coda_cursor_read_int32_array+0x1d0>
    5614:	mov	r2, r5
    5618:	mov	r1, r6
    561c:	mov	r0, r4
    5620:	bl	1db8 <read_int32_array>
    5624:	cmp	r0, #0
    5628:	beq	5718 <coda_cursor_read_int32_array+0x2b4>
    562c:	mvn	r0, #0
    5630:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5634:	bl	0 <coda_type_get_native_type_name>
    5638:	mvn	r2, #104	; 0x68
    563c:	ldr	r1, [pc, #268]	; 5750 <coda_cursor_read_int32_array+0x2ec>
    5640:	mov	r3, r0
    5644:	mov	r0, r2
    5648:	mov	r2, r3
    564c:	bl	0 <coda_set_error>
    5650:	mvn	r0, #0
    5654:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5658:	mov	r2, r5
    565c:	mov	r1, r6
    5660:	mov	r0, r4
    5664:	bl	1c10 <read_uint16_array>
    5668:	cmp	r0, #0
    566c:	beq	5678 <coda_cursor_read_int32_array+0x214>
    5670:	mvn	r0, #0
    5674:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5678:	add	r1, sp, #28
    567c:	mov	r0, r4
    5680:	bl	0 <coda_cursor_get_num_elements>
    5684:	cmp	r0, #0
    5688:	beq	5694 <coda_cursor_read_int32_array+0x230>
    568c:	mvn	r0, #0
    5690:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5694:	ldr	r3, [sp, #28]
    5698:	sub	r1, r3, #1
    569c:	cmp	r1, #0
    56a0:	blt	5718 <coda_cursor_read_int32_array+0x2b4>
    56a4:	add	r3, r6, r1, lsl #1
    56a8:	ldrh	r2, [r3]
    56ac:	str	r2, [r6, r1, lsl #2]
    56b0:	sub	r1, r1, #1
    56b4:	b	569c <coda_cursor_read_int32_array+0x238>
    56b8:	mov	r2, r5
    56bc:	mov	r1, r6
    56c0:	mov	r0, r4
    56c4:	bl	1a48 <read_int16_array>
    56c8:	cmp	r0, #0
    56cc:	beq	56d8 <coda_cursor_read_int32_array+0x274>
    56d0:	mvn	r0, #0
    56d4:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    56d8:	add	r1, sp, #28
    56dc:	mov	r0, r4
    56e0:	bl	0 <coda_cursor_get_num_elements>
    56e4:	cmp	r0, #0
    56e8:	beq	56f4 <coda_cursor_read_int32_array+0x290>
    56ec:	mvn	r0, #0
    56f0:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    56f4:	ldr	r2, [sp, #28]
    56f8:	sub	ip, r2, #1
    56fc:	cmp	ip, #0
    5700:	blt	5718 <coda_cursor_read_int32_array+0x2b4>
    5704:	add	r2, r6, ip, lsl #1
    5708:	ldrsh	r1, [r2]
    570c:	str	r1, [r6, ip, lsl #2]
    5710:	sub	ip, ip, #1
    5714:	b	56fc <coda_cursor_read_int32_array+0x298>
    5718:	mov	r0, #0
    571c:	b	5738 <coda_cursor_read_int32_array+0x2d4>
    5720:	mvn	r0, #99	; 0x63
    5724:	ldr	r1, [pc, #48]	; 575c <coda_cursor_read_int32_array+0x2f8>
    5728:	ldr	r2, [pc, #40]	; 5758 <coda_cursor_read_int32_array+0x2f4>
    572c:	movw	r3, #3199	; 0xc7f
    5730:	bl	0 <coda_set_error>
    5734:	mvn	r0, #0
    5738:	ldr	r4, [sp, #8]
    573c:	ldr	r5, [sp, #12]
    5740:	ldr	r6, [sp, #16]
    5744:	ldr	lr, [sp, #4]
    5748:	add	sp, sp, #32
    574c:	bx	lr
    5750:	.word	0x000001d0
    5754:	.word	0x000002bc
    5758:	.word	0x00000453
    575c:	.word	0x0000022b
    5760:	.word	0x0000005b

00005764 <coda_cursor_read_uint32_array>:
    5764:	mov	ip, sp
    5768:	sub	sp, sp, #32
    576c:	str	ip, [sp]
    5770:	str	lr, [sp, #4]
    5774:	str	r4, [sp, #8]
    5778:	str	r5, [sp, #12]
    577c:	str	r6, [sp, #16]
    5780:	mov	r4, r2
    5784:	mov	r5, r1
    5788:	mov	r6, r0
    578c:	cmp	r6, #0
    5790:	beq	5954 <coda_cursor_read_uint32_array+0x1f0>
    5794:	ldr	r2, [r6, #4]
    5798:	cmp	r2, #0
    579c:	ble	5954 <coda_cursor_read_uint32_array+0x1f0>
    57a0:	lsl	r3, r2, #4
    57a4:	add	ip, r6, r3
    57a8:	sub	lr, ip, #4096	; 0x1000
    57ac:	ldr	r0, [lr, #4088]	; 0xff8
    57b0:	cmp	r0, #0
    57b4:	beq	5954 <coda_cursor_read_uint32_array+0x1f0>
    57b8:	cmp	r5, #0
    57bc:	bne	57dc <coda_cursor_read_uint32_array+0x78>
    57c0:	mvn	r0, #99	; 0x63
    57c4:	ldr	r1, [pc, #456]	; 5994 <coda_cursor_read_uint32_array+0x230>
    57c8:	ldr	r2, [pc, #440]	; 5988 <coda_cursor_read_uint32_array+0x224>
    57cc:	movw	r3, #3323	; 0xcfb
    57d0:	bl	0 <coda_set_error>
    57d4:	mvn	r0, #0
    57d8:	b	596c <coda_cursor_read_uint32_array+0x208>
    57dc:	ldr	ip, [r0]
    57e0:	cmp	ip, #100	; 0x64
    57e4:	blt	57ec <coda_cursor_read_uint32_array+0x88>
    57e8:	ldr	r0, [r0, #4]
    57ec:	ldr	r1, [r0, #8]
    57f0:	cmp	r1, #1
    57f4:	beq	5820 <coda_cursor_read_uint32_array+0xbc>
    57f8:	mov	r0, r1
    57fc:	bl	0 <coda_type_get_class_name>
    5800:	mvn	r2, #104	; 0x68
    5804:	ldr	r1, [pc, #376]	; 5984 <coda_cursor_read_uint32_array+0x220>
    5808:	mov	r3, r0
    580c:	mov	r0, r2
    5810:	mov	r2, r3
    5814:	bl	0 <coda_set_error>
    5818:	mvn	r0, #0
    581c:	b	596c <coda_cursor_read_uint32_array+0x208>
    5820:	add	r1, sp, #24
    5824:	bl	854 <get_array_element_read_type>
    5828:	cmp	r0, #0
    582c:	beq	5838 <coda_cursor_read_uint32_array+0xd4>
    5830:	mvn	r0, #0
    5834:	b	596c <coda_cursor_read_uint32_array+0x208>
    5838:	ldr	r0, [sp, #24]
    583c:	cmp	r0, #1
    5840:	beq	58f0 <coda_cursor_read_uint32_array+0x18c>
    5844:	cmp	r0, #3
    5848:	beq	5890 <coda_cursor_read_uint32_array+0x12c>
    584c:	cmp	r0, #5
    5850:	bne	5874 <coda_cursor_read_uint32_array+0x110>
    5854:	mov	r2, r4
    5858:	mov	r1, r5
    585c:	mov	r0, r6
    5860:	bl	1f80 <read_uint32_array>
    5864:	cmp	r0, #0
    5868:	beq	594c <coda_cursor_read_uint32_array+0x1e8>
    586c:	mvn	r0, #0
    5870:	b	596c <coda_cursor_read_uint32_array+0x208>
    5874:	bl	0 <coda_type_get_native_type_name>
    5878:	mov	r2, r0
    587c:	mvn	r0, #104	; 0x68
    5880:	ldr	r1, [pc, #264]	; 5990 <coda_cursor_read_uint32_array+0x22c>
    5884:	bl	0 <coda_set_error>
    5888:	mvn	r0, #0
    588c:	b	596c <coda_cursor_read_uint32_array+0x208>
    5890:	mov	r2, r4
    5894:	mov	r1, r5
    5898:	mov	r0, r6
    589c:	bl	1c10 <read_uint16_array>
    58a0:	cmp	r0, #0
    58a4:	beq	58b0 <coda_cursor_read_uint32_array+0x14c>
    58a8:	mvn	r0, #0
    58ac:	b	596c <coda_cursor_read_uint32_array+0x208>
    58b0:	add	r1, sp, #28
    58b4:	mov	r0, r6
    58b8:	bl	0 <coda_cursor_get_num_elements>
    58bc:	cmp	r0, #0
    58c0:	beq	58cc <coda_cursor_read_uint32_array+0x168>
    58c4:	mvn	r0, #0
    58c8:	b	596c <coda_cursor_read_uint32_array+0x208>
    58cc:	ldr	r2, [sp, #28]
    58d0:	sub	r0, r2, #1
    58d4:	cmp	r0, #0
    58d8:	blt	594c <coda_cursor_read_uint32_array+0x1e8>
    58dc:	add	r3, r5, r0, lsl #1
    58e0:	ldrh	ip, [r3]
    58e4:	str	ip, [r5, r0, lsl #2]
    58e8:	sub	r0, r0, #1
    58ec:	b	58d4 <coda_cursor_read_uint32_array+0x170>
    58f0:	mov	r2, r4
    58f4:	mov	r1, r5
    58f8:	mov	r0, r6
    58fc:	bl	18a0 <read_uint8_array>
    5900:	cmp	r0, #0
    5904:	beq	5910 <coda_cursor_read_uint32_array+0x1ac>
    5908:	mvn	r0, #0
    590c:	b	596c <coda_cursor_read_uint32_array+0x208>
    5910:	add	r1, sp, #28
    5914:	mov	r0, r6
    5918:	bl	0 <coda_cursor_get_num_elements>
    591c:	cmp	r0, #0
    5920:	beq	592c <coda_cursor_read_uint32_array+0x1c8>
    5924:	mvn	r0, #0
    5928:	b	596c <coda_cursor_read_uint32_array+0x208>
    592c:	ldr	ip, [sp, #28]
    5930:	sub	r1, ip, #1
    5934:	cmp	r1, #0
    5938:	blt	594c <coda_cursor_read_uint32_array+0x1e8>
    593c:	ldrb	r3, [r5, r1]
    5940:	str	r3, [r5, r1, lsl #2]
    5944:	sub	r1, r1, #1
    5948:	b	5934 <coda_cursor_read_uint32_array+0x1d0>
    594c:	mov	r0, #0
    5950:	b	596c <coda_cursor_read_uint32_array+0x208>
    5954:	mvn	r0, #99	; 0x63
    5958:	ldr	r1, [pc, #44]	; 598c <coda_cursor_read_uint32_array+0x228>
    595c:	ldr	r2, [pc, #36]	; 5988 <coda_cursor_read_uint32_array+0x224>
    5960:	movw	r3, #3318	; 0xcf6
    5964:	bl	0 <coda_set_error>
    5968:	mvn	r0, #0
    596c:	ldr	r4, [sp, #8]
    5970:	ldr	r5, [sp, #12]
    5974:	ldr	r6, [sp, #16]
    5978:	ldr	lr, [sp, #4]
    597c:	add	sp, sp, #32
    5980:	bx	lr
    5984:	.word	0x000002bc
    5988:	.word	0x00000453
    598c:	.word	0x0000022b
    5990:	.word	0x000001fd
    5994:	.word	0x0000005b

00005998 <coda_cursor_read_int64_array>:
    5998:	mov	ip, sp
    599c:	sub	sp, sp, #32
    59a0:	str	ip, [sp]
    59a4:	str	lr, [sp, #4]
    59a8:	str	r4, [sp, #8]
    59ac:	str	r5, [sp, #12]
    59b0:	str	r6, [sp, #16]
    59b4:	mov	r6, r2
    59b8:	mov	r5, r1
    59bc:	mov	r4, r0
    59c0:	cmp	r4, #0
    59c4:	beq	5d50 <coda_cursor_read_int64_array+0x3b8>
    59c8:	ldr	r0, [r4, #4]
    59cc:	cmp	r0, #0
    59d0:	ble	5d50 <coda_cursor_read_int64_array+0x3b8>
    59d4:	lsl	r0, r0, #4
    59d8:	add	r2, r4, r0
    59dc:	sub	lr, r2, #4096	; 0x1000
    59e0:	ldr	ip, [lr, #4088]	; 0xff8
    59e4:	cmp	ip, #0
    59e8:	beq	5d50 <coda_cursor_read_int64_array+0x3b8>
    59ec:	cmp	r5, #0
    59f0:	bne	5a10 <coda_cursor_read_int64_array+0x78>
    59f4:	mvn	r0, #99	; 0x63
    59f8:	ldr	r1, [pc, #912]	; 5d90 <coda_cursor_read_int64_array+0x3f8>
    59fc:	ldr	r2, [pc, #900]	; 5d88 <coda_cursor_read_int64_array+0x3f0>
    5a00:	movw	r3, #3418	; 0xd5a
    5a04:	bl	0 <coda_set_error>
    5a08:	mvn	r0, #0
    5a0c:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5a10:	ldr	r3, [ip]
    5a14:	cmp	r3, #100	; 0x64
    5a18:	blt	5a20 <coda_cursor_read_int64_array+0x88>
    5a1c:	ldr	ip, [ip, #4]
    5a20:	ldr	r0, [ip, #8]
    5a24:	cmp	r0, #1
    5a28:	beq	5a48 <coda_cursor_read_int64_array+0xb0>
    5a2c:	bl	0 <coda_type_get_class_name>
    5a30:	mov	r2, r0
    5a34:	mvn	r0, #104	; 0x68
    5a38:	ldr	r1, [pc, #836]	; 5d84 <coda_cursor_read_int64_array+0x3ec>
    5a3c:	bl	0 <coda_set_error>
    5a40:	mvn	r0, #0
    5a44:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5a48:	add	r1, sp, #24
    5a4c:	mov	r0, ip
    5a50:	bl	854 <get_array_element_read_type>
    5a54:	cmp	r0, #0
    5a58:	beq	5a64 <coda_cursor_read_int64_array+0xcc>
    5a5c:	mvn	r0, #0
    5a60:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5a64:	ldr	r0, [sp, #24]
    5a68:	cmp	r0, #7
    5a6c:	bcs	5d34 <coda_cursor_read_int64_array+0x39c>
    5a70:	add	pc, pc, r0, lsl #2
    5a74:	nop	{0}
    5a78:	b	5a94 <coda_cursor_read_int64_array+0xfc>
    5a7c:	b	5afc <coda_cursor_read_int64_array+0x164>
    5a80:	b	5b64 <coda_cursor_read_int64_array+0x1cc>
    5a84:	b	5bd0 <coda_cursor_read_int64_array+0x238>
    5a88:	b	5c3c <coda_cursor_read_int64_array+0x2a4>
    5a8c:	b	5ca4 <coda_cursor_read_int64_array+0x30c>
    5a90:	b	5d0c <coda_cursor_read_int64_array+0x374>
    5a94:	mov	r2, r6
    5a98:	mov	r1, r5
    5a9c:	mov	r0, r4
    5aa0:	bl	16d8 <read_int8_array>
    5aa4:	cmp	r0, #0
    5aa8:	beq	5ab4 <coda_cursor_read_int64_array+0x11c>
    5aac:	mvn	r0, #0
    5ab0:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5ab4:	add	r1, sp, #28
    5ab8:	mov	r0, r4
    5abc:	bl	0 <coda_cursor_get_num_elements>
    5ac0:	cmp	r0, #0
    5ac4:	beq	5ad0 <coda_cursor_read_int64_array+0x138>
    5ac8:	mvn	r0, #0
    5acc:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5ad0:	ldr	r0, [sp, #28]
    5ad4:	sub	r2, r0, #1
    5ad8:	cmp	r2, #0
    5adc:	blt	5d2c <coda_cursor_read_int64_array+0x394>
    5ae0:	add	r3, r5, r2, lsl #3
    5ae4:	ldrsb	r0, [r5, r2]
    5ae8:	asr	r1, r0, #31
    5aec:	str	r0, [r3]
    5af0:	str	r1, [r3, #4]
    5af4:	sub	r2, r2, #1
    5af8:	b	5ad8 <coda_cursor_read_int64_array+0x140>
    5afc:	mov	r2, r6
    5b00:	mov	r1, r5
    5b04:	mov	r0, r4
    5b08:	bl	18a0 <read_uint8_array>
    5b0c:	cmp	r0, #0
    5b10:	beq	5b1c <coda_cursor_read_int64_array+0x184>
    5b14:	mvn	r0, #0
    5b18:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5b1c:	add	r1, sp, #28
    5b20:	mov	r0, r4
    5b24:	bl	0 <coda_cursor_get_num_elements>
    5b28:	cmp	r0, #0
    5b2c:	beq	5b38 <coda_cursor_read_int64_array+0x1a0>
    5b30:	mvn	r0, #0
    5b34:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5b38:	ldr	r2, [sp, #28]
    5b3c:	sub	ip, r2, #1
    5b40:	cmp	ip, #0
    5b44:	blt	5d2c <coda_cursor_read_int64_array+0x394>
    5b48:	add	r1, r5, ip, lsl #3
    5b4c:	mov	r3, #0
    5b50:	ldrb	r2, [r5, ip]
    5b54:	str	r2, [r1]
    5b58:	str	r3, [r1, #4]
    5b5c:	sub	ip, ip, #1
    5b60:	b	5b40 <coda_cursor_read_int64_array+0x1a8>
    5b64:	mov	r2, r6
    5b68:	mov	r1, r5
    5b6c:	mov	r0, r4
    5b70:	bl	1a48 <read_int16_array>
    5b74:	cmp	r0, #0
    5b78:	beq	5b84 <coda_cursor_read_int64_array+0x1ec>
    5b7c:	mvn	r0, #0
    5b80:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5b84:	add	r1, sp, #28
    5b88:	mov	r0, r4
    5b8c:	bl	0 <coda_cursor_get_num_elements>
    5b90:	cmp	r0, #0
    5b94:	beq	5ba0 <coda_cursor_read_int64_array+0x208>
    5b98:	mvn	r0, #0
    5b9c:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5ba0:	ldr	r2, [sp, #28]
    5ba4:	sub	r0, r2, #1
    5ba8:	cmp	r0, #0
    5bac:	blt	5d2c <coda_cursor_read_int64_array+0x394>
    5bb0:	add	ip, r5, r0, lsl #3
    5bb4:	add	r1, r5, r0, lsl #1
    5bb8:	ldrsh	r2, [r1]
    5bbc:	asr	r3, r2, #31
    5bc0:	str	r2, [ip]
    5bc4:	str	r3, [ip, #4]
    5bc8:	sub	r0, r0, #1
    5bcc:	b	5ba8 <coda_cursor_read_int64_array+0x210>
    5bd0:	mov	r2, r6
    5bd4:	mov	r1, r5
    5bd8:	mov	r0, r4
    5bdc:	bl	1c10 <read_uint16_array>
    5be0:	cmp	r0, #0
    5be4:	beq	5bf0 <coda_cursor_read_int64_array+0x258>
    5be8:	mvn	r0, #0
    5bec:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5bf0:	add	r1, sp, #28
    5bf4:	mov	r0, r4
    5bf8:	bl	0 <coda_cursor_get_num_elements>
    5bfc:	cmp	r0, #0
    5c00:	beq	5c0c <coda_cursor_read_int64_array+0x274>
    5c04:	mvn	r0, #0
    5c08:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5c0c:	ldr	r2, [sp, #28]
    5c10:	sub	r2, r2, #1
    5c14:	cmp	r2, #0
    5c18:	blt	5d2c <coda_cursor_read_int64_array+0x394>
    5c1c:	add	r3, r5, r2, lsl #3
    5c20:	mov	r1, #0
    5c24:	add	ip, r5, r2, lsl #1
    5c28:	ldrh	r0, [ip]
    5c2c:	str	r0, [r3]
    5c30:	str	r1, [r3, #4]
    5c34:	sub	r2, r2, #1
    5c38:	b	5c14 <coda_cursor_read_int64_array+0x27c>
    5c3c:	mov	r2, r6
    5c40:	mov	r1, r5
    5c44:	mov	r0, r4
    5c48:	bl	1db8 <read_int32_array>
    5c4c:	cmp	r0, #0
    5c50:	beq	5c5c <coda_cursor_read_int64_array+0x2c4>
    5c54:	mvn	r0, #0
    5c58:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5c5c:	add	r1, sp, #28
    5c60:	mov	r0, r4
    5c64:	bl	0 <coda_cursor_get_num_elements>
    5c68:	cmp	r0, #0
    5c6c:	beq	5c78 <coda_cursor_read_int64_array+0x2e0>
    5c70:	mvn	r0, #0
    5c74:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5c78:	ldr	r1, [sp, #28]
    5c7c:	sub	ip, r1, #1
    5c80:	cmp	ip, #0
    5c84:	blt	5d2c <coda_cursor_read_int64_array+0x394>
    5c88:	add	r3, r5, ip, lsl #3
    5c8c:	ldr	r1, [r5, ip, lsl #2]
    5c90:	asr	r2, r1, #31
    5c94:	str	r1, [r3]
    5c98:	str	r2, [r3, #4]
    5c9c:	sub	ip, ip, #1
    5ca0:	b	5c80 <coda_cursor_read_int64_array+0x2e8>
    5ca4:	mov	r2, r6
    5ca8:	mov	r1, r5
    5cac:	mov	r0, r4
    5cb0:	bl	1f80 <read_uint32_array>
    5cb4:	cmp	r0, #0
    5cb8:	beq	5cc4 <coda_cursor_read_int64_array+0x32c>
    5cbc:	mvn	r0, #0
    5cc0:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5cc4:	add	r1, sp, #28
    5cc8:	mov	r0, r4
    5ccc:	bl	0 <coda_cursor_get_num_elements>
    5cd0:	cmp	r0, #0
    5cd4:	beq	5ce0 <coda_cursor_read_int64_array+0x348>
    5cd8:	mvn	r0, #0
    5cdc:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5ce0:	ldr	ip, [sp, #28]
    5ce4:	sub	r1, ip, #1
    5ce8:	cmp	r1, #0
    5cec:	blt	5d2c <coda_cursor_read_int64_array+0x394>
    5cf0:	add	r0, r5, r1, lsl #3
    5cf4:	mov	ip, #0
    5cf8:	ldr	r3, [r5, r1, lsl #2]
    5cfc:	str	r3, [r0]
    5d00:	str	ip, [r0, #4]
    5d04:	sub	r1, r1, #1
    5d08:	b	5ce8 <coda_cursor_read_int64_array+0x350>
    5d0c:	mov	r2, r6
    5d10:	mov	r1, r5
    5d14:	mov	r0, r4
    5d18:	bl	2128 <read_int64_array>
    5d1c:	cmp	r0, #0
    5d20:	beq	5d2c <coda_cursor_read_int64_array+0x394>
    5d24:	mvn	r0, #0
    5d28:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5d2c:	mov	r0, #0
    5d30:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5d34:	bl	0 <coda_type_get_native_type_name>
    5d38:	mov	r2, r0
    5d3c:	mvn	r0, #104	; 0x68
    5d40:	ldr	r1, [pc, #56]	; 5d80 <coda_cursor_read_int64_array+0x3e8>
    5d44:	bl	0 <coda_set_error>
    5d48:	mvn	r0, #0
    5d4c:	b	5d68 <coda_cursor_read_int64_array+0x3d0>
    5d50:	mvn	r0, #99	; 0x63
    5d54:	ldr	r1, [pc, #48]	; 5d8c <coda_cursor_read_int64_array+0x3f4>
    5d58:	ldr	r2, [pc, #40]	; 5d88 <coda_cursor_read_int64_array+0x3f0>
    5d5c:	movw	r3, #3413	; 0xd55
    5d60:	bl	0 <coda_set_error>
    5d64:	mvn	r0, #0
    5d68:	ldr	r4, [sp, #8]
    5d6c:	ldr	r5, [sp, #12]
    5d70:	ldr	r6, [sp, #16]
    5d74:	ldr	lr, [sp, #4]
    5d78:	add	sp, sp, #32
    5d7c:	bx	lr
    5d80:	.word	0x00000106
    5d84:	.word	0x000002bc
    5d88:	.word	0x00000453
    5d8c:	.word	0x0000022b
    5d90:	.word	0x0000005b

00005d94 <coda_cursor_read_uint64_array>:
    5d94:	mov	ip, sp
    5d98:	sub	sp, sp, #32
    5d9c:	str	ip, [sp]
    5da0:	str	lr, [sp, #4]
    5da4:	str	r4, [sp, #8]
    5da8:	str	r5, [sp, #12]
    5dac:	str	r6, [sp, #16]
    5db0:	mov	r5, r2
    5db4:	mov	r4, r1
    5db8:	mov	r6, r0
    5dbc:	cmp	r6, #0
    5dc0:	beq	6020 <coda_cursor_read_uint64_array+0x28c>
    5dc4:	ldr	ip, [r6, #4]
    5dc8:	cmp	ip, #0
    5dcc:	ble	6020 <coda_cursor_read_uint64_array+0x28c>
    5dd0:	lsl	r2, ip, #4
    5dd4:	add	r0, r6, r2
    5dd8:	sub	lr, r0, #4096	; 0x1000
    5ddc:	ldr	r0, [lr, #4088]	; 0xff8
    5de0:	cmp	r0, #0
    5de4:	beq	6020 <coda_cursor_read_uint64_array+0x28c>
    5de8:	cmp	r4, #0
    5dec:	bne	5e0c <coda_cursor_read_uint64_array+0x78>
    5df0:	mvn	r0, #99	; 0x63
    5df4:	ldr	r1, [pc, #612]	; 6060 <coda_cursor_read_uint64_array+0x2cc>
    5df8:	ldr	r2, [pc, #600]	; 6058 <coda_cursor_read_uint64_array+0x2c4>
    5dfc:	movw	r3, #3566	; 0xdee
    5e00:	bl	0 <coda_set_error>
    5e04:	mvn	r0, #0
    5e08:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5e0c:	ldr	r1, [r0]
    5e10:	cmp	r1, #100	; 0x64
    5e14:	blt	5e1c <coda_cursor_read_uint64_array+0x88>
    5e18:	ldr	r0, [r0, #4]
    5e1c:	ldr	r1, [r0, #8]
    5e20:	cmp	r1, #1
    5e24:	beq	5e50 <coda_cursor_read_uint64_array+0xbc>
    5e28:	mov	r0, r1
    5e2c:	bl	0 <coda_type_get_class_name>
    5e30:	mvn	r2, #104	; 0x68
    5e34:	ldr	r1, [pc, #536]	; 6054 <coda_cursor_read_uint64_array+0x2c0>
    5e38:	mov	r3, r0
    5e3c:	mov	r0, r2
    5e40:	mov	r2, r3
    5e44:	bl	0 <coda_set_error>
    5e48:	mvn	r0, #0
    5e4c:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5e50:	add	r1, sp, #24
    5e54:	bl	854 <get_array_element_read_type>
    5e58:	cmp	r0, #0
    5e5c:	beq	5e68 <coda_cursor_read_uint64_array+0xd4>
    5e60:	mvn	r0, #0
    5e64:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5e68:	ldr	r3, [sp, #24]
    5e6c:	cmp	r3, #5
    5e70:	bcs	5f58 <coda_cursor_read_uint64_array+0x1c4>
    5e74:	cmp	r3, #1
    5e78:	beq	5ef0 <coda_cursor_read_uint64_array+0x15c>
    5e7c:	cmp	r3, #3
    5e80:	bne	5f88 <coda_cursor_read_uint64_array+0x1f4>
    5e84:	mov	r2, r5
    5e88:	mov	r1, r4
    5e8c:	mov	r0, r6
    5e90:	bl	1c10 <read_uint16_array>
    5e94:	cmp	r0, #0
    5e98:	beq	5ea4 <coda_cursor_read_uint64_array+0x110>
    5e9c:	mvn	r0, #0
    5ea0:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5ea4:	add	r1, sp, #28
    5ea8:	mov	r0, r6
    5eac:	bl	0 <coda_cursor_get_num_elements>
    5eb0:	cmp	r0, #0
    5eb4:	beq	5ec0 <coda_cursor_read_uint64_array+0x12c>
    5eb8:	mvn	r0, #0
    5ebc:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5ec0:	ldr	ip, [sp, #28]
    5ec4:	sub	r2, ip, #1
    5ec8:	cmp	r2, #0
    5ecc:	blt	6018 <coda_cursor_read_uint64_array+0x284>
    5ed0:	add	r0, r4, r2, lsl #3
    5ed4:	mov	ip, #0
    5ed8:	add	r1, r4, r2, lsl #1
    5edc:	ldrh	r3, [r1]
    5ee0:	str	r3, [r0]
    5ee4:	str	ip, [r0, #4]
    5ee8:	sub	r2, r2, #1
    5eec:	b	5ec8 <coda_cursor_read_uint64_array+0x134>
    5ef0:	mov	r2, r5
    5ef4:	mov	r1, r4
    5ef8:	mov	r0, r6
    5efc:	bl	18a0 <read_uint8_array>
    5f00:	cmp	r0, #0
    5f04:	beq	5f10 <coda_cursor_read_uint64_array+0x17c>
    5f08:	mvn	r0, #0
    5f0c:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5f10:	add	r1, sp, #28
    5f14:	mov	r0, r6
    5f18:	bl	0 <coda_cursor_get_num_elements>
    5f1c:	cmp	r0, #0
    5f20:	beq	5f2c <coda_cursor_read_uint64_array+0x198>
    5f24:	mvn	r0, #0
    5f28:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5f2c:	ldr	ip, [sp, #28]
    5f30:	sub	r3, ip, #1
    5f34:	cmp	r3, #0
    5f38:	blt	6018 <coda_cursor_read_uint64_array+0x284>
    5f3c:	add	ip, r4, r3, lsl #3
    5f40:	mov	r2, #0
    5f44:	ldrb	r1, [r4, r3]
    5f48:	str	r1, [ip]
    5f4c:	str	r2, [ip, #4]
    5f50:	sub	r3, r3, #1
    5f54:	b	5f34 <coda_cursor_read_uint64_array+0x1a0>
    5f58:	cmp	r3, #5
    5f5c:	beq	5fb0 <coda_cursor_read_uint64_array+0x21c>
    5f60:	cmp	r3, #7
    5f64:	bne	5f88 <coda_cursor_read_uint64_array+0x1f4>
    5f68:	mov	r2, r5
    5f6c:	mov	r1, r4
    5f70:	mov	r0, r6
    5f74:	bl	22d0 <read_uint64_array>
    5f78:	cmp	r0, #0
    5f7c:	beq	6018 <coda_cursor_read_uint64_array+0x284>
    5f80:	mvn	r0, #0
    5f84:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5f88:	ldr	r0, [sp, #24]
    5f8c:	bl	0 <coda_type_get_native_type_name>
    5f90:	mvn	r2, #104	; 0x68
    5f94:	ldr	r1, [pc, #180]	; 6050 <coda_cursor_read_uint64_array+0x2bc>
    5f98:	mov	r3, r0
    5f9c:	mov	r0, r2
    5fa0:	mov	r2, r3
    5fa4:	bl	0 <coda_set_error>
    5fa8:	mvn	r0, #0
    5fac:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5fb0:	mov	r2, r5
    5fb4:	mov	r1, r4
    5fb8:	mov	r0, r6
    5fbc:	bl	1f80 <read_uint32_array>
    5fc0:	cmp	r0, #0
    5fc4:	beq	5fd0 <coda_cursor_read_uint64_array+0x23c>
    5fc8:	mvn	r0, #0
    5fcc:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5fd0:	add	r1, sp, #28
    5fd4:	mov	r0, r6
    5fd8:	bl	0 <coda_cursor_get_num_elements>
    5fdc:	cmp	r0, #0
    5fe0:	beq	5fec <coda_cursor_read_uint64_array+0x258>
    5fe4:	mvn	r0, #0
    5fe8:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    5fec:	ldr	r1, [sp, #28]
    5ff0:	sub	r1, r1, #1
    5ff4:	cmp	r1, #0
    5ff8:	blt	6018 <coda_cursor_read_uint64_array+0x284>
    5ffc:	add	r0, r4, r1, lsl #3
    6000:	mov	r3, #0
    6004:	ldr	r2, [r4, r1, lsl #2]
    6008:	str	r2, [r0]
    600c:	str	r3, [r0, #4]
    6010:	sub	r1, r1, #1
    6014:	b	5ff4 <coda_cursor_read_uint64_array+0x260>
    6018:	mov	r0, #0
    601c:	b	6038 <coda_cursor_read_uint64_array+0x2a4>
    6020:	mvn	r0, #99	; 0x63
    6024:	ldr	r1, [pc, #48]	; 605c <coda_cursor_read_uint64_array+0x2c8>
    6028:	ldr	r2, [pc, #40]	; 6058 <coda_cursor_read_uint64_array+0x2c4>
    602c:	movw	r3, #3561	; 0xde9
    6030:	bl	0 <coda_set_error>
    6034:	mvn	r0, #0
    6038:	ldr	r4, [sp, #8]
    603c:	ldr	r5, [sp, #12]
    6040:	ldr	r6, [sp, #16]
    6044:	ldr	lr, [sp, #4]
    6048:	add	sp, sp, #32
    604c:	bx	lr
    6050:	.word	0x000000a5
    6054:	.word	0x000002bc
    6058:	.word	0x00000453
    605c:	.word	0x0000022b
    6060:	.word	0x0000005b

00006064 <coda_cursor_read_float_array>:
    6064:	mov	ip, sp
    6068:	sub	sp, sp, #48	; 0x30
    606c:	str	ip, [sp, #4]
    6070:	str	lr, [sp, #8]
    6074:	str	r4, [sp, #16]
    6078:	str	r5, [sp, #20]
    607c:	str	r6, [sp, #24]
    6080:	str	r7, [sp, #28]
    6084:	mov	r4, r2
    6088:	mov	r7, r1
    608c:	mov	r6, r0
    6090:	cmp	r6, #0
    6094:	beq	6734 <coda_cursor_read_float_array+0x6d0>
    6098:	ldr	r0, [r6, #4]
    609c:	cmp	r0, #0
    60a0:	ble	6734 <coda_cursor_read_float_array+0x6d0>
    60a4:	lsl	r3, r0, #4
    60a8:	add	r2, r6, r3
    60ac:	sub	lr, r2, #4096	; 0x1000
    60b0:	ldr	r0, [lr, #4088]	; 0xff8
    60b4:	cmp	r0, #0
    60b8:	beq	6734 <coda_cursor_read_float_array+0x6d0>
    60bc:	cmp	r7, #0
    60c0:	bne	60e0 <coda_cursor_read_float_array+0x7c>
    60c4:	mvn	r0, #99	; 0x63
    60c8:	ldr	r1, [pc, #1708]	; 677c <coda_cursor_read_float_array+0x718>
    60cc:	ldr	r2, [pc, #1692]	; 6770 <coda_cursor_read_float_array+0x70c>
    60d0:	movw	r3, #3678	; 0xe5e
    60d4:	bl	0 <coda_set_error>
    60d8:	mvn	r0, #0
    60dc:	b	674c <coda_cursor_read_float_array+0x6e8>
    60e0:	ldr	r1, [r0]
    60e4:	cmp	r1, #100	; 0x64
    60e8:	blt	60f0 <coda_cursor_read_float_array+0x8c>
    60ec:	ldr	r0, [r0, #4]
    60f0:	ldr	r1, [r0, #8]
    60f4:	cmp	r1, #1
    60f8:	beq	611c <coda_cursor_read_float_array+0xb8>
    60fc:	mov	r0, r1
    6100:	bl	0 <coda_type_get_class_name>
    6104:	mov	r2, r0
    6108:	mvn	r0, #104	; 0x68
    610c:	ldr	r1, [pc, #1624]	; 676c <coda_cursor_read_float_array+0x708>
    6110:	bl	0 <coda_set_error>
    6114:	mvn	r0, #0
    6118:	b	674c <coda_cursor_read_float_array+0x6e8>
    611c:	add	r1, sp, #36	; 0x24
    6120:	add	r2, sp, #40	; 0x28
    6124:	bl	8c0 <get_array_element_unconverted_read_type>
    6128:	cmp	r0, #0
    612c:	beq	6138 <coda_cursor_read_float_array+0xd4>
    6130:	mvn	r0, #0
    6134:	b	674c <coda_cursor_read_float_array+0x6e8>
    6138:	ldr	ip, [sp, #40]	; 0x28
    613c:	cmp	ip, #0
    6140:	beq	6204 <coda_cursor_read_float_array+0x1a0>
    6144:	add	r1, sp, #32
    6148:	mov	r0, r6
    614c:	bl	0 <coda_cursor_get_num_elements>
    6150:	cmp	r0, #0
    6154:	beq	6160 <coda_cursor_read_float_array+0xfc>
    6158:	mvn	r0, #0
    615c:	b	674c <coda_cursor_read_float_array+0x6e8>
    6160:	ldr	r3, [sp, #32]
    6164:	lsl	r0, r3, #3
    6168:	bl	0 <malloc>
    616c:	mov	r5, r0
    6170:	cmp	r5, #0
    6174:	bne	61a0 <coda_cursor_read_float_array+0x13c>
    6178:	mvn	r0, #0
    617c:	ldr	r1, [pc, #1508]	; 6768 <coda_cursor_read_float_array+0x704>
    6180:	ldr	ip, [sp, #32]
    6184:	lsl	r2, ip, #3
    6188:	ldr	r3, [pc, #1504]	; 6770 <coda_cursor_read_float_array+0x70c>
    618c:	movw	r4, #3707	; 0xe7b
    6190:	str	r4, [sp]
    6194:	bl	0 <coda_set_error>
    6198:	mvn	r0, #0
    619c:	b	674c <coda_cursor_read_float_array+0x6e8>
    61a0:	mov	r2, r4
    61a4:	mov	r1, r5
    61a8:	mov	r0, r6
    61ac:	bl	6780 <coda_cursor_read_double_array>
    61b0:	cmp	r0, #0
    61b4:	beq	61c8 <coda_cursor_read_float_array+0x164>
    61b8:	mov	r0, r5
    61bc:	bl	0 <free>
    61c0:	mvn	r0, #0
    61c4:	b	674c <coda_cursor_read_float_array+0x6e8>
    61c8:	ldr	r2, [sp, #32]
    61cc:	sub	r3, r2, #1
    61d0:	cmp	r3, #0
    61d4:	blt	61f4 <coda_cursor_read_float_array+0x190>
    61d8:	add	r2, r7, r3, lsl #2
    61dc:	add	r1, r5, r3, lsl #3
    61e0:	vldr	d1, [r1]
    61e4:	vcvt.f32.f64	s14, d1
    61e8:	vstr	s14, [r2]
    61ec:	sub	r3, r3, #1
    61f0:	b	61d0 <coda_cursor_read_float_array+0x16c>
    61f4:	mov	r0, r5
    61f8:	bl	0 <free>
    61fc:	mov	r0, #0
    6200:	b	674c <coda_cursor_read_float_array+0x6e8>
    6204:	ldr	r0, [sp, #36]	; 0x24
    6208:	cmp	r0, #10
    620c:	bcs	6718 <coda_cursor_read_float_array+0x6b4>
    6210:	add	pc, pc, r0, lsl #2
    6214:	nop	{0}
    6218:	b	6240 <coda_cursor_read_float_array+0x1dc>
    621c:	b	62a8 <coda_cursor_read_float_array+0x244>
    6220:	b	6310 <coda_cursor_read_float_array+0x2ac>
    6224:	b	637c <coda_cursor_read_float_array+0x318>
    6228:	b	63e8 <coda_cursor_read_float_array+0x384>
    622c:	b	6450 <coda_cursor_read_float_array+0x3ec>
    6230:	b	64b8 <coda_cursor_read_float_array+0x454>
    6234:	b	6578 <coda_cursor_read_float_array+0x514>
    6238:	b	6638 <coda_cursor_read_float_array+0x5d4>
    623c:	b	6658 <coda_cursor_read_float_array+0x5f4>
    6240:	mov	r2, r4
    6244:	mov	r1, r7
    6248:	mov	r0, r6
    624c:	bl	16d8 <read_int8_array>
    6250:	cmp	r0, #0
    6254:	beq	6260 <coda_cursor_read_float_array+0x1fc>
    6258:	mvn	r0, #0
    625c:	b	674c <coda_cursor_read_float_array+0x6e8>
    6260:	add	r1, sp, #32
    6264:	mov	r0, r6
    6268:	bl	0 <coda_cursor_get_num_elements>
    626c:	cmp	r0, #0
    6270:	beq	627c <coda_cursor_read_float_array+0x218>
    6274:	mvn	r0, #0
    6278:	b	674c <coda_cursor_read_float_array+0x6e8>
    627c:	ldr	r1, [sp, #32]
    6280:	sub	r3, r1, #1
    6284:	cmp	r3, #0
    6288:	blt	6710 <coda_cursor_read_float_array+0x6ac>
    628c:	add	r1, r7, r3, lsl #2
    6290:	ldrsb	r2, [r7, r3]
    6294:	vmov	s2, r2
    6298:	vcvt.f32.s32	s2, s2
    629c:	vstr	s2, [r1]
    62a0:	sub	r3, r3, #1
    62a4:	b	6284 <coda_cursor_read_float_array+0x220>
    62a8:	mov	r2, r4
    62ac:	mov	r1, r7
    62b0:	mov	r0, r6
    62b4:	bl	18a0 <read_uint8_array>
    62b8:	cmp	r0, #0
    62bc:	beq	62c8 <coda_cursor_read_float_array+0x264>
    62c0:	mvn	r0, #0
    62c4:	b	674c <coda_cursor_read_float_array+0x6e8>
    62c8:	add	r1, sp, #32
    62cc:	mov	r0, r6
    62d0:	bl	0 <coda_cursor_get_num_elements>
    62d4:	cmp	r0, #0
    62d8:	beq	62e4 <coda_cursor_read_float_array+0x280>
    62dc:	mvn	r0, #0
    62e0:	b	674c <coda_cursor_read_float_array+0x6e8>
    62e4:	ldr	r3, [sp, #32]
    62e8:	sub	r3, r3, #1
    62ec:	cmp	r3, #0
    62f0:	blt	6710 <coda_cursor_read_float_array+0x6ac>
    62f4:	add	r0, r7, r3, lsl #2
    62f8:	ldrb	r1, [r7, r3]
    62fc:	vmov	s8, r1
    6300:	vcvt.f32.u32	s8, s8
    6304:	vstr	s8, [r0]
    6308:	sub	r3, r3, #1
    630c:	b	62ec <coda_cursor_read_float_array+0x288>
    6310:	mov	r2, r4
    6314:	mov	r1, r7
    6318:	mov	r0, r6
    631c:	bl	1a48 <read_int16_array>
    6320:	cmp	r0, #0
    6324:	beq	6330 <coda_cursor_read_float_array+0x2cc>
    6328:	mvn	r0, #0
    632c:	b	674c <coda_cursor_read_float_array+0x6e8>
    6330:	add	r1, sp, #32
    6334:	mov	r0, r6
    6338:	bl	0 <coda_cursor_get_num_elements>
    633c:	cmp	r0, #0
    6340:	beq	634c <coda_cursor_read_float_array+0x2e8>
    6344:	mvn	r0, #0
    6348:	b	674c <coda_cursor_read_float_array+0x6e8>
    634c:	ldr	r0, [sp, #32]
    6350:	sub	r3, r0, #1
    6354:	cmp	r3, #0
    6358:	blt	6710 <coda_cursor_read_float_array+0x6ac>
    635c:	add	ip, r7, r3, lsl #2
    6360:	add	r0, r7, r3, lsl #1
    6364:	ldrsh	r1, [r0]
    6368:	vmov	s0, r1
    636c:	vcvt.f32.s32	s0, s0
    6370:	vstr	s0, [ip]
    6374:	sub	r3, r3, #1
    6378:	b	6354 <coda_cursor_read_float_array+0x2f0>
    637c:	mov	r2, r4
    6380:	mov	r1, r7
    6384:	mov	r0, r6
    6388:	bl	1c10 <read_uint16_array>
    638c:	cmp	r0, #0
    6390:	beq	639c <coda_cursor_read_float_array+0x338>
    6394:	mvn	r0, #0
    6398:	b	674c <coda_cursor_read_float_array+0x6e8>
    639c:	add	r1, sp, #32
    63a0:	mov	r0, r6
    63a4:	bl	0 <coda_cursor_get_num_elements>
    63a8:	cmp	r0, #0
    63ac:	beq	63b8 <coda_cursor_read_float_array+0x354>
    63b0:	mvn	r0, #0
    63b4:	b	674c <coda_cursor_read_float_array+0x6e8>
    63b8:	ldr	ip, [sp, #32]
    63bc:	sub	r2, ip, #1
    63c0:	cmp	r2, #0
    63c4:	blt	6710 <coda_cursor_read_float_array+0x6ac>
    63c8:	add	ip, r7, r2, lsl #2
    63cc:	add	r0, r7, r2, lsl #1
    63d0:	ldrh	r0, [r0]
    63d4:	vmov	s2, r0
    63d8:	vcvt.f32.u32	s2, s2
    63dc:	vstr	s2, [ip]
    63e0:	sub	r2, r2, #1
    63e4:	b	63c0 <coda_cursor_read_float_array+0x35c>
    63e8:	mov	r2, r4
    63ec:	mov	r1, r7
    63f0:	mov	r0, r6
    63f4:	bl	1db8 <read_int32_array>
    63f8:	cmp	r0, #0
    63fc:	beq	6408 <coda_cursor_read_float_array+0x3a4>
    6400:	mvn	r0, #0
    6404:	b	674c <coda_cursor_read_float_array+0x6e8>
    6408:	add	r1, sp, #32
    640c:	mov	r0, r6
    6410:	bl	0 <coda_cursor_get_num_elements>
    6414:	cmp	r0, #0
    6418:	beq	6424 <coda_cursor_read_float_array+0x3c0>
    641c:	mvn	r0, #0
    6420:	b	674c <coda_cursor_read_float_array+0x6e8>
    6424:	ldr	r0, [sp, #32]
    6428:	sub	r1, r0, #1
    642c:	cmp	r1, #0
    6430:	blt	6710 <coda_cursor_read_float_array+0x6ac>
    6434:	add	r0, r7, r1, lsl #2
    6438:	ldr	r3, [r7, r1, lsl #2]
    643c:	vmov	s4, r3
    6440:	vcvt.f32.s32	s4, s4
    6444:	vstr	s4, [r0]
    6448:	sub	r1, r1, #1
    644c:	b	642c <coda_cursor_read_float_array+0x3c8>
    6450:	mov	r2, r4
    6454:	mov	r1, r7
    6458:	mov	r0, r6
    645c:	bl	1f80 <read_uint32_array>
    6460:	cmp	r0, #0
    6464:	beq	6470 <coda_cursor_read_float_array+0x40c>
    6468:	mvn	r0, #0
    646c:	b	674c <coda_cursor_read_float_array+0x6e8>
    6470:	add	r1, sp, #32
    6474:	mov	r0, r6
    6478:	bl	0 <coda_cursor_get_num_elements>
    647c:	cmp	r0, #0
    6480:	beq	648c <coda_cursor_read_float_array+0x428>
    6484:	mvn	r0, #0
    6488:	b	674c <coda_cursor_read_float_array+0x6e8>
    648c:	ldr	r1, [sp, #32]
    6490:	sub	r0, r1, #1
    6494:	cmp	r0, #0
    6498:	blt	6710 <coda_cursor_read_float_array+0x6ac>
    649c:	add	ip, r7, r0, lsl #2
    64a0:	ldr	r1, [r7, r0, lsl #2]
    64a4:	vmov	s10, r1
    64a8:	vcvt.f32.u32	s10, s10
    64ac:	vstr	s10, [ip]
    64b0:	sub	r0, r0, #1
    64b4:	b	6494 <coda_cursor_read_float_array+0x430>
    64b8:	add	r1, sp, #32
    64bc:	mov	r0, r6
    64c0:	bl	0 <coda_cursor_get_num_elements>
    64c4:	cmp	r0, #0
    64c8:	beq	64d4 <coda_cursor_read_float_array+0x470>
    64cc:	mvn	r0, #0
    64d0:	b	674c <coda_cursor_read_float_array+0x6e8>
    64d4:	ldr	ip, [sp, #32]
    64d8:	lsl	r0, ip, #3
    64dc:	bl	0 <malloc>
    64e0:	mov	r5, r0
    64e4:	cmp	r5, #0
    64e8:	bne	6514 <coda_cursor_read_float_array+0x4b0>
    64ec:	mvn	r0, #0
    64f0:	ldr	r1, [pc, #624]	; 6768 <coda_cursor_read_float_array+0x704>
    64f4:	ldr	r2, [sp, #32]
    64f8:	lsl	r2, r2, #3
    64fc:	ldr	r3, [pc, #620]	; 6770 <coda_cursor_read_float_array+0x70c>
    6500:	movw	ip, #3820	; 0xeec
    6504:	str	ip, [sp]
    6508:	bl	0 <coda_set_error>
    650c:	mvn	r0, #0
    6510:	b	674c <coda_cursor_read_float_array+0x6e8>
    6514:	mov	r2, r4
    6518:	mov	r1, r5
    651c:	mov	r0, r6
    6520:	bl	2128 <read_int64_array>
    6524:	cmp	r0, #0
    6528:	beq	653c <coda_cursor_read_float_array+0x4d8>
    652c:	mov	r0, r5
    6530:	bl	0 <free>
    6534:	mvn	r0, #0
    6538:	b	674c <coda_cursor_read_float_array+0x6e8>
    653c:	ldr	r0, [sp, #32]
    6540:	sub	r4, r0, #1
    6544:	cmp	r4, #0
    6548:	blt	656c <coda_cursor_read_float_array+0x508>
    654c:	add	r6, r7, r4, lsl #2
    6550:	add	r2, r5, r4, lsl #3
    6554:	ldr	r0, [r2]
    6558:	ldr	r1, [r2, #4]
    655c:	bl	0 <__compcert_i64_stof>
    6560:	vstr	s0, [r6]
    6564:	sub	r4, r4, #1
    6568:	b	6544 <coda_cursor_read_float_array+0x4e0>
    656c:	mov	r0, r5
    6570:	bl	0 <free>
    6574:	b	6710 <coda_cursor_read_float_array+0x6ac>
    6578:	add	r1, sp, #32
    657c:	mov	r0, r6
    6580:	bl	0 <coda_cursor_get_num_elements>
    6584:	cmp	r0, #0
    6588:	beq	6594 <coda_cursor_read_float_array+0x530>
    658c:	mvn	r0, #0
    6590:	b	674c <coda_cursor_read_float_array+0x6e8>
    6594:	ldr	r1, [sp, #32]
    6598:	lsl	r0, r1, #3
    659c:	bl	0 <malloc>
    65a0:	mov	r5, r0
    65a4:	cmp	r5, #0
    65a8:	bne	65d4 <coda_cursor_read_float_array+0x570>
    65ac:	mvn	r0, #0
    65b0:	ldr	r1, [pc, #432]	; 6768 <coda_cursor_read_float_array+0x704>
    65b4:	ldr	r2, [sp, #32]
    65b8:	lsl	r2, r2, #3
    65bc:	ldr	r3, [pc, #428]	; 6770 <coda_cursor_read_float_array+0x70c>
    65c0:	movw	ip, #3847	; 0xf07
    65c4:	str	ip, [sp]
    65c8:	bl	0 <coda_set_error>
    65cc:	mvn	r0, #0
    65d0:	b	674c <coda_cursor_read_float_array+0x6e8>
    65d4:	mov	r2, r4
    65d8:	mov	r1, r5
    65dc:	mov	r0, r6
    65e0:	bl	22d0 <read_uint64_array>
    65e4:	cmp	r0, #0
    65e8:	beq	65fc <coda_cursor_read_float_array+0x598>
    65ec:	mov	r0, r5
    65f0:	bl	0 <free>
    65f4:	mvn	r0, #0
    65f8:	b	674c <coda_cursor_read_float_array+0x6e8>
    65fc:	ldr	ip, [sp, #32]
    6600:	sub	r6, ip, #1
    6604:	cmp	r6, #0
    6608:	blt	662c <coda_cursor_read_float_array+0x5c8>
    660c:	add	r4, r7, r6, lsl #2
    6610:	add	ip, r5, r6, lsl #3
    6614:	ldr	r0, [ip]
    6618:	ldr	r1, [ip, #4]
    661c:	bl	0 <__compcert_i64_utof>
    6620:	vstr	s0, [r4]
    6624:	sub	r6, r6, #1
    6628:	b	6604 <coda_cursor_read_float_array+0x5a0>
    662c:	mov	r0, r5
    6630:	bl	0 <free>
    6634:	b	6710 <coda_cursor_read_float_array+0x6ac>
    6638:	mov	r2, r4
    663c:	mov	r1, r7
    6640:	mov	r0, r6
    6644:	bl	245c <read_float_array>
    6648:	cmp	r0, #0
    664c:	beq	6710 <coda_cursor_read_float_array+0x6ac>
    6650:	mvn	r0, #0
    6654:	b	674c <coda_cursor_read_float_array+0x6e8>
    6658:	add	r1, sp, #32
    665c:	mov	r0, r6
    6660:	bl	0 <coda_cursor_get_num_elements>
    6664:	cmp	r0, #0
    6668:	beq	6674 <coda_cursor_read_float_array+0x610>
    666c:	mvn	r0, #0
    6670:	b	674c <coda_cursor_read_float_array+0x6e8>
    6674:	ldr	r3, [sp, #32]
    6678:	lsl	r0, r3, #3
    667c:	bl	0 <malloc>
    6680:	mov	r5, r0
    6684:	cmp	r5, #0
    6688:	bne	66b4 <coda_cursor_read_float_array+0x650>
    668c:	mvn	r0, #0
    6690:	ldr	r1, [pc, #208]	; 6768 <coda_cursor_read_float_array+0x704>
    6694:	ldr	r2, [sp, #32]
    6698:	lsl	r2, r2, #3
    669c:	ldr	r3, [pc, #204]	; 6770 <coda_cursor_read_float_array+0x70c>
    66a0:	movw	r4, #3880	; 0xf28
    66a4:	str	r4, [sp]
    66a8:	bl	0 <coda_set_error>
    66ac:	mvn	r0, #0
    66b0:	b	674c <coda_cursor_read_float_array+0x6e8>
    66b4:	mov	r2, r4
    66b8:	mov	r1, r5
    66bc:	mov	r0, r6
    66c0:	bl	2614 <read_double_array>
    66c4:	cmp	r0, #0
    66c8:	beq	66dc <coda_cursor_read_float_array+0x678>
    66cc:	mov	r0, r5
    66d0:	bl	0 <free>
    66d4:	mvn	r0, #0
    66d8:	b	674c <coda_cursor_read_float_array+0x6e8>
    66dc:	ldr	r2, [sp, #32]
    66e0:	sub	r2, r2, #1
    66e4:	cmp	r2, #0
    66e8:	blt	6708 <coda_cursor_read_float_array+0x6a4>
    66ec:	add	r3, r7, r2, lsl #2
    66f0:	add	ip, r5, r2, lsl #3
    66f4:	vldr	d6, [ip]
    66f8:	vcvt.f32.f64	s14, d6
    66fc:	vstr	s14, [r3]
    6700:	sub	r2, r2, #1
    6704:	b	66e4 <coda_cursor_read_float_array+0x680>
    6708:	mov	r0, r5
    670c:	bl	0 <free>
    6710:	mov	r0, #0
    6714:	b	674c <coda_cursor_read_float_array+0x6e8>
    6718:	bl	0 <coda_type_get_native_type_name>
    671c:	mov	r2, r0
    6720:	mvn	r0, #104	; 0x68
    6724:	ldr	r1, [pc, #76]	; 6778 <coda_cursor_read_float_array+0x714>
    6728:	bl	0 <coda_set_error>
    672c:	mvn	r0, #0
    6730:	b	674c <coda_cursor_read_float_array+0x6e8>
    6734:	mvn	r0, #99	; 0x63
    6738:	ldr	r1, [pc, #52]	; 6774 <coda_cursor_read_float_array+0x710>
    673c:	ldr	r2, [pc, #44]	; 6770 <coda_cursor_read_float_array+0x70c>
    6740:	movw	r3, #3673	; 0xe59
    6744:	bl	0 <coda_set_error>
    6748:	mvn	r0, #0
    674c:	ldr	r4, [sp, #16]
    6750:	ldr	r5, [sp, #20]
    6754:	ldr	r6, [sp, #24]
    6758:	ldr	r7, [sp, #28]
    675c:	ldr	lr, [sp, #8]
    6760:	add	sp, sp, #48	; 0x30
    6764:	bx	lr
    6768:	.word	0x000004e3
    676c:	.word	0x000002bc
    6770:	.word	0x00000453
    6774:	.word	0x0000022b
    6778:	.word	0x0000026f
    677c:	.word	0x0000005b

00006780 <coda_cursor_read_double_array>:
    6780:	mov	ip, sp
    6784:	sub	sp, sp, #40	; 0x28
    6788:	str	ip, [sp]
    678c:	str	lr, [sp, #4]
    6790:	str	r4, [sp, #8]
    6794:	str	r5, [sp, #12]
    6798:	str	r6, [sp, #16]
    679c:	str	r7, [sp, #20]
    67a0:	mov	r4, r2
    67a4:	mov	r5, r1
    67a8:	mov	r6, r0
    67ac:	cmp	r6, #0
    67b0:	beq	6d0c <coda_cursor_read_double_array+0x58c>
    67b4:	ldr	r2, [r6, #4]
    67b8:	cmp	r2, #0
    67bc:	ble	6d0c <coda_cursor_read_double_array+0x58c>
    67c0:	lsl	r3, r2, #4
    67c4:	add	ip, r6, r3
    67c8:	sub	lr, ip, #4096	; 0x1000
    67cc:	ldr	r0, [lr, #4088]	; 0xff8
    67d0:	cmp	r0, #0
    67d4:	beq	6d0c <coda_cursor_read_double_array+0x58c>
    67d8:	cmp	r5, #0
    67dc:	bne	67fc <coda_cursor_read_double_array+0x7c>
    67e0:	mvn	r0, #99	; 0x63
    67e4:	ldr	r1, [pc, #1380]	; 6d50 <coda_cursor_read_double_array+0x5d0>
    67e8:	ldr	r2, [pc, #1368]	; 6d48 <coda_cursor_read_double_array+0x5c8>
    67ec:	movw	r3, #3942	; 0xf66
    67f0:	bl	0 <coda_set_error>
    67f4:	mvn	r0, #0
    67f8:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    67fc:	ldr	r1, [r0]
    6800:	cmp	r1, #100	; 0x64
    6804:	blt	680c <coda_cursor_read_double_array+0x8c>
    6808:	ldr	r0, [r0, #4]
    680c:	ldr	r1, [r0, #8]
    6810:	cmp	r1, #1
    6814:	beq	6838 <coda_cursor_read_double_array+0xb8>
    6818:	mov	r0, r1
    681c:	bl	0 <coda_type_get_class_name>
    6820:	mov	r2, r0
    6824:	mvn	r0, #104	; 0x68
    6828:	ldr	r1, [pc, #1300]	; 6d44 <coda_cursor_read_double_array+0x5c4>
    682c:	bl	0 <coda_set_error>
    6830:	mvn	r0, #0
    6834:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6838:	add	r1, sp, #28
    683c:	add	r2, sp, #32
    6840:	bl	8c0 <get_array_element_unconverted_read_type>
    6844:	cmp	r0, #0
    6848:	beq	6854 <coda_cursor_read_double_array+0xd4>
    684c:	mvn	r0, #0
    6850:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6854:	ldr	r0, [sp, #28]
    6858:	cmp	r0, #10
    685c:	bcs	6cf0 <coda_cursor_read_double_array+0x570>
    6860:	add	pc, pc, r0, lsl #2
    6864:	nop	{0}
    6868:	b	6890 <coda_cursor_read_double_array+0x110>
    686c:	b	68f8 <coda_cursor_read_double_array+0x178>
    6870:	b	6960 <coda_cursor_read_double_array+0x1e0>
    6874:	b	69cc <coda_cursor_read_double_array+0x24c>
    6878:	b	6a38 <coda_cursor_read_double_array+0x2b8>
    687c:	b	6aa0 <coda_cursor_read_double_array+0x320>
    6880:	b	6b08 <coda_cursor_read_double_array+0x388>
    6884:	b	6b70 <coda_cursor_read_double_array+0x3f0>
    6888:	b	6bd8 <coda_cursor_read_double_array+0x458>
    688c:	b	6c40 <coda_cursor_read_double_array+0x4c0>
    6890:	mov	r2, r4
    6894:	mov	r1, r5
    6898:	mov	r0, r6
    689c:	bl	16d8 <read_int8_array>
    68a0:	cmp	r0, #0
    68a4:	beq	68b0 <coda_cursor_read_double_array+0x130>
    68a8:	mvn	r0, #0
    68ac:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    68b0:	add	r1, sp, #24
    68b4:	mov	r0, r6
    68b8:	bl	0 <coda_cursor_get_num_elements>
    68bc:	cmp	r0, #0
    68c0:	beq	68cc <coda_cursor_read_double_array+0x14c>
    68c4:	mvn	r0, #0
    68c8:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    68cc:	ldr	r1, [sp, #24]
    68d0:	sub	ip, r1, #1
    68d4:	cmp	ip, #0
    68d8:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    68dc:	add	r3, r5, ip, lsl #3
    68e0:	ldrsb	r0, [r5, ip]
    68e4:	vmov	s10, r0
    68e8:	vcvt.f64.s32	d5, s10
    68ec:	vstr	d5, [r3]
    68f0:	sub	ip, ip, #1
    68f4:	b	68d4 <coda_cursor_read_double_array+0x154>
    68f8:	mov	r2, r4
    68fc:	mov	r1, r5
    6900:	mov	r0, r6
    6904:	bl	18a0 <read_uint8_array>
    6908:	cmp	r0, #0
    690c:	beq	6918 <coda_cursor_read_double_array+0x198>
    6910:	mvn	r0, #0
    6914:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6918:	add	r1, sp, #24
    691c:	mov	r0, r6
    6920:	bl	0 <coda_cursor_get_num_elements>
    6924:	cmp	r0, #0
    6928:	beq	6934 <coda_cursor_read_double_array+0x1b4>
    692c:	mvn	r0, #0
    6930:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6934:	ldr	r3, [sp, #24]
    6938:	sub	r2, r3, #1
    693c:	cmp	r2, #0
    6940:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    6944:	add	r0, r5, r2, lsl #3
    6948:	ldrb	r3, [r5, r2]
    694c:	vmov	s10, r3
    6950:	vcvt.f64.u32	d5, s10
    6954:	vstr	d5, [r0]
    6958:	sub	r2, r2, #1
    695c:	b	693c <coda_cursor_read_double_array+0x1bc>
    6960:	mov	r2, r4
    6964:	mov	r1, r5
    6968:	mov	r0, r6
    696c:	bl	1a48 <read_int16_array>
    6970:	cmp	r0, #0
    6974:	beq	6980 <coda_cursor_read_double_array+0x200>
    6978:	mvn	r0, #0
    697c:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6980:	add	r1, sp, #24
    6984:	mov	r0, r6
    6988:	bl	0 <coda_cursor_get_num_elements>
    698c:	cmp	r0, #0
    6990:	beq	699c <coda_cursor_read_double_array+0x21c>
    6994:	mvn	r0, #0
    6998:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    699c:	ldr	r1, [sp, #24]
    69a0:	sub	r3, r1, #1
    69a4:	cmp	r3, #0
    69a8:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    69ac:	add	r0, r5, r3, lsl #3
    69b0:	add	ip, r5, r3, lsl #1
    69b4:	ldrsh	r2, [ip]
    69b8:	vmov	s4, r2
    69bc:	vcvt.f64.s32	d2, s4
    69c0:	vstr	d2, [r0]
    69c4:	sub	r3, r3, #1
    69c8:	b	69a4 <coda_cursor_read_double_array+0x224>
    69cc:	mov	r2, r4
    69d0:	mov	r1, r5
    69d4:	mov	r0, r6
    69d8:	bl	1c10 <read_uint16_array>
    69dc:	cmp	r0, #0
    69e0:	beq	69ec <coda_cursor_read_double_array+0x26c>
    69e4:	mvn	r0, #0
    69e8:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    69ec:	add	r1, sp, #24
    69f0:	mov	r0, r6
    69f4:	bl	0 <coda_cursor_get_num_elements>
    69f8:	cmp	r0, #0
    69fc:	beq	6a08 <coda_cursor_read_double_array+0x288>
    6a00:	mvn	r0, #0
    6a04:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6a08:	ldr	ip, [sp, #24]
    6a0c:	sub	r3, ip, #1
    6a10:	cmp	r3, #0
    6a14:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    6a18:	add	r0, r5, r3, lsl #3
    6a1c:	add	r1, r5, r3, lsl #1
    6a20:	ldrh	r2, [r1]
    6a24:	vmov	s14, r2
    6a28:	vcvt.f64.u32	d7, s14
    6a2c:	vstr	d7, [r0]
    6a30:	sub	r3, r3, #1
    6a34:	b	6a10 <coda_cursor_read_double_array+0x290>
    6a38:	mov	r2, r4
    6a3c:	mov	r1, r5
    6a40:	mov	r0, r6
    6a44:	bl	1db8 <read_int32_array>
    6a48:	cmp	r0, #0
    6a4c:	beq	6a58 <coda_cursor_read_double_array+0x2d8>
    6a50:	mvn	r0, #0
    6a54:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6a58:	add	r1, sp, #24
    6a5c:	mov	r0, r6
    6a60:	bl	0 <coda_cursor_get_num_elements>
    6a64:	cmp	r0, #0
    6a68:	beq	6a74 <coda_cursor_read_double_array+0x2f4>
    6a6c:	mvn	r0, #0
    6a70:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6a74:	ldr	ip, [sp, #24]
    6a78:	sub	r0, ip, #1
    6a7c:	cmp	r0, #0
    6a80:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    6a84:	add	ip, r5, r0, lsl #3
    6a88:	ldr	r3, [r5, r0, lsl #2]
    6a8c:	vmov	s4, r3
    6a90:	vcvt.f64.s32	d2, s4
    6a94:	vstr	d2, [ip]
    6a98:	sub	r0, r0, #1
    6a9c:	b	6a7c <coda_cursor_read_double_array+0x2fc>
    6aa0:	mov	r2, r4
    6aa4:	mov	r1, r5
    6aa8:	mov	r0, r6
    6aac:	bl	1f80 <read_uint32_array>
    6ab0:	cmp	r0, #0
    6ab4:	beq	6ac0 <coda_cursor_read_double_array+0x340>
    6ab8:	mvn	r0, #0
    6abc:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6ac0:	add	r1, sp, #24
    6ac4:	mov	r0, r6
    6ac8:	bl	0 <coda_cursor_get_num_elements>
    6acc:	cmp	r0, #0
    6ad0:	beq	6adc <coda_cursor_read_double_array+0x35c>
    6ad4:	mvn	r0, #0
    6ad8:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6adc:	ldr	r2, [sp, #24]
    6ae0:	sub	r3, r2, #1
    6ae4:	cmp	r3, #0
    6ae8:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    6aec:	add	r1, r5, r3, lsl #3
    6af0:	ldr	ip, [r5, r3, lsl #2]
    6af4:	vmov	s8, ip
    6af8:	vcvt.f64.u32	d4, s8
    6afc:	vstr	d4, [r1]
    6b00:	sub	r3, r3, #1
    6b04:	b	6ae4 <coda_cursor_read_double_array+0x364>
    6b08:	mov	r2, r4
    6b0c:	mov	r1, r5
    6b10:	mov	r0, r6
    6b14:	bl	2128 <read_int64_array>
    6b18:	cmp	r0, #0
    6b1c:	beq	6b28 <coda_cursor_read_double_array+0x3a8>
    6b20:	mvn	r0, #0
    6b24:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6b28:	add	r1, sp, #24
    6b2c:	mov	r0, r6
    6b30:	bl	0 <coda_cursor_get_num_elements>
    6b34:	cmp	r0, #0
    6b38:	beq	6b44 <coda_cursor_read_double_array+0x3c4>
    6b3c:	mvn	r0, #0
    6b40:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6b44:	ldr	r1, [sp, #24]
    6b48:	sub	r7, r1, #1
    6b4c:	cmp	r7, #0
    6b50:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    6b54:	add	r4, r5, r7, lsl #3
    6b58:	ldr	r0, [r4]
    6b5c:	ldr	r1, [r4, #4]
    6b60:	bl	0 <__compcert_i64_stod>
    6b64:	vstr	d0, [r4]
    6b68:	sub	r7, r7, #1
    6b6c:	b	6b4c <coda_cursor_read_double_array+0x3cc>
    6b70:	mov	r2, r4
    6b74:	mov	r1, r5
    6b78:	mov	r0, r6
    6b7c:	bl	22d0 <read_uint64_array>
    6b80:	cmp	r0, #0
    6b84:	beq	6b90 <coda_cursor_read_double_array+0x410>
    6b88:	mvn	r0, #0
    6b8c:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6b90:	add	r1, sp, #24
    6b94:	mov	r0, r6
    6b98:	bl	0 <coda_cursor_get_num_elements>
    6b9c:	cmp	r0, #0
    6ba0:	beq	6bac <coda_cursor_read_double_array+0x42c>
    6ba4:	mvn	r0, #0
    6ba8:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6bac:	ldr	r3, [sp, #24]
    6bb0:	sub	r7, r3, #1
    6bb4:	cmp	r7, #0
    6bb8:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    6bbc:	add	r4, r5, r7, lsl #3
    6bc0:	ldr	r0, [r4]
    6bc4:	ldr	r1, [r4, #4]
    6bc8:	bl	0 <__compcert_i64_utod>
    6bcc:	vstr	d0, [r4]
    6bd0:	sub	r7, r7, #1
    6bd4:	b	6bb4 <coda_cursor_read_double_array+0x434>
    6bd8:	mov	r2, r4
    6bdc:	mov	r1, r5
    6be0:	mov	r0, r6
    6be4:	bl	245c <read_float_array>
    6be8:	cmp	r0, #0
    6bec:	beq	6bf8 <coda_cursor_read_double_array+0x478>
    6bf0:	mvn	r0, #0
    6bf4:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6bf8:	add	r1, sp, #24
    6bfc:	mov	r0, r6
    6c00:	bl	0 <coda_cursor_get_num_elements>
    6c04:	cmp	r0, #0
    6c08:	beq	6c14 <coda_cursor_read_double_array+0x494>
    6c0c:	mvn	r0, #0
    6c10:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6c14:	ldr	r3, [sp, #24]
    6c18:	sub	r2, r3, #1
    6c1c:	cmp	r2, #0
    6c20:	blt	6c60 <coda_cursor_read_double_array+0x4e0>
    6c24:	add	ip, r5, r2, lsl #3
    6c28:	add	r1, r5, r2, lsl #2
    6c2c:	vldr	s2, [r1]
    6c30:	vcvt.f64.f32	d0, s2
    6c34:	vstr	d0, [ip]
    6c38:	sub	r2, r2, #1
    6c3c:	b	6c1c <coda_cursor_read_double_array+0x49c>
    6c40:	mov	r2, r4
    6c44:	mov	r1, r5
    6c48:	mov	r0, r6
    6c4c:	bl	2614 <read_double_array>
    6c50:	cmp	r0, #0
    6c54:	beq	6c60 <coda_cursor_read_double_array+0x4e0>
    6c58:	mvn	r0, #0
    6c5c:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6c60:	ldr	r1, [sp, #32]
    6c64:	cmp	r1, #0
    6c68:	beq	6ce8 <coda_cursor_read_double_array+0x568>
    6c6c:	add	r1, sp, #24
    6c70:	mov	r0, r6
    6c74:	bl	0 <coda_cursor_get_num_elements>
    6c78:	cmp	r0, #0
    6c7c:	beq	6c88 <coda_cursor_read_double_array+0x508>
    6c80:	mvn	r0, #0
    6c84:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6c88:	mov	r4, #0
    6c8c:	ldr	ip, [sp, #24]
    6c90:	cmp	r4, ip
    6c94:	bge	6ce8 <coda_cursor_read_double_array+0x568>
    6c98:	add	r3, r5, r4, lsl #3
    6c9c:	vldr	d0, [r3]
    6ca0:	ldr	r0, [sp, #32]
    6ca4:	vldr	d7, [r0, #24]
    6ca8:	vcmp.f64	d0, d7
    6cac:	vmrs	APSR_nzcv, fpscr
    6cb0:	beq	6cd4 <coda_cursor_read_double_array+0x554>
    6cb4:	vldr	d6, [r0]
    6cb8:	vmul.f64	d7, d0, d6
    6cbc:	vldr	d4, [r0, #8]
    6cc0:	vdiv.f64	d2, d7, d4
    6cc4:	vldr	d6, [r0, #16]
    6cc8:	vadd.f64	d3, d2, d6
    6ccc:	vstr	d3, [r3]
    6cd0:	b	6ce0 <coda_cursor_read_double_array+0x560>
    6cd4:	bl	0 <coda_NaN>
    6cd8:	add	r2, r5, r4, lsl #3
    6cdc:	vstr	d0, [r2]
    6ce0:	add	r4, r4, #1
    6ce4:	b	6c8c <coda_cursor_read_double_array+0x50c>
    6ce8:	mov	r0, #0
    6cec:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6cf0:	bl	0 <coda_type_get_native_type_name>
    6cf4:	mov	r2, r0
    6cf8:	mvn	r0, #104	; 0x68
    6cfc:	ldr	r1, [pc, #60]	; 6d40 <coda_cursor_read_double_array+0x5c0>
    6d00:	bl	0 <coda_set_error>
    6d04:	mvn	r0, #0
    6d08:	b	6d24 <coda_cursor_read_double_array+0x5a4>
    6d0c:	mvn	r0, #99	; 0x63
    6d10:	ldr	r1, [pc, #52]	; 6d4c <coda_cursor_read_double_array+0x5cc>
    6d14:	ldr	r2, [pc, #44]	; 6d48 <coda_cursor_read_double_array+0x5c8>
    6d18:	movw	r3, #3937	; 0xf61
    6d1c:	bl	0 <coda_set_error>
    6d20:	mvn	r0, #0
    6d24:	ldr	r4, [sp, #8]
    6d28:	ldr	r5, [sp, #12]
    6d2c:	ldr	r6, [sp, #16]
    6d30:	ldr	r7, [sp, #20]
    6d34:	ldr	lr, [sp, #4]
    6d38:	add	sp, sp, #40	; 0x28
    6d3c:	bx	lr
    6d40:	.word	0x000003f8
    6d44:	.word	0x000002bc
    6d48:	.word	0x00000453
    6d4c:	.word	0x0000022b
    6d50:	.word	0x0000005b

00006d54 <coda_cursor_read_char_array>:
    6d54:	mov	ip, sp
    6d58:	sub	sp, sp, #32
    6d5c:	str	ip, [sp]
    6d60:	str	lr, [sp, #4]
    6d64:	str	r4, [sp, #8]
    6d68:	str	r5, [sp, #12]
    6d6c:	str	r6, [sp, #16]
    6d70:	mov	r4, r2
    6d74:	mov	r5, r1
    6d78:	mov	r6, r0
    6d7c:	cmp	r6, #0
    6d80:	beq	6f88 <coda_cursor_read_char_array+0x234>
    6d84:	ldr	r1, [r6, #4]
    6d88:	cmp	r1, #0
    6d8c:	ble	6f88 <coda_cursor_read_char_array+0x234>
    6d90:	lsl	ip, r1, #4
    6d94:	add	r3, r6, ip
    6d98:	sub	lr, r3, #4096	; 0x1000
    6d9c:	ldr	r0, [lr, #4088]	; 0xff8
    6da0:	cmp	r0, #0
    6da4:	beq	6f88 <coda_cursor_read_char_array+0x234>
    6da8:	cmp	r5, #0
    6dac:	bne	6dcc <coda_cursor_read_char_array+0x78>
    6db0:	mvn	r0, #99	; 0x63
    6db4:	ldr	r1, [pc, #532]	; 6fd0 <coda_cursor_read_char_array+0x27c>
    6db8:	ldr	r2, [pc, #512]	; 6fc0 <coda_cursor_read_char_array+0x26c>
    6dbc:	movw	r3, #4141	; 0x102d
    6dc0:	bl	0 <coda_set_error>
    6dc4:	mvn	r0, #0
    6dc8:	b	6fa0 <coda_cursor_read_char_array+0x24c>
    6dcc:	ldr	r1, [r0]
    6dd0:	cmp	r1, #100	; 0x64
    6dd4:	blt	6ddc <coda_cursor_read_char_array+0x88>
    6dd8:	ldr	r0, [r0, #4]
    6ddc:	ldr	r1, [r0, #8]
    6de0:	cmp	r1, #1
    6de4:	beq	6e08 <coda_cursor_read_char_array+0xb4>
    6de8:	mov	r0, r1
    6dec:	bl	0 <coda_type_get_class_name>
    6df0:	mov	r2, r0
    6df4:	mvn	r0, #104	; 0x68
    6df8:	ldr	r1, [pc, #440]	; 6fb8 <coda_cursor_read_char_array+0x264>
    6dfc:	bl	0 <coda_set_error>
    6e00:	mvn	r0, #0
    6e04:	b	6fa0 <coda_cursor_read_char_array+0x24c>
    6e08:	add	r1, sp, #24
    6e0c:	bl	854 <get_array_element_read_type>
    6e10:	cmp	r0, #0
    6e14:	beq	6e20 <coda_cursor_read_char_array+0xcc>
    6e18:	mvn	r0, #0
    6e1c:	b	6fa0 <coda_cursor_read_char_array+0x24c>
    6e20:	ldr	r0, [sp, #24]
    6e24:	cmp	r0, #10
    6e28:	bne	6f6c <coda_cursor_read_char_array+0x218>
    6e2c:	ldr	r3, [r6, #4]
    6e30:	lsl	r2, r3, #4
    6e34:	add	ip, r6, r2
    6e38:	sub	lr, ip, #4096	; 0x1000
    6e3c:	ldr	r3, [lr, #4088]	; 0xff8
    6e40:	ldr	r1, [r3]
    6e44:	cmp	r1, #102	; 0x66
    6e48:	bcs	6ebc <coda_cursor_read_char_array+0x168>
    6e4c:	cmp	r1, #100	; 0x64
    6e50:	bcs	6e8c <coda_cursor_read_char_array+0x138>
    6e54:	cmp	r1, #0
    6e58:	beq	6e78 <coda_cursor_read_char_array+0x124>
    6e5c:	cmp	r1, #1
    6e60:	bne	6f34 <coda_cursor_read_char_array+0x1e0>
    6e64:	mov	r2, r4
    6e68:	mov	r1, r5
    6e6c:	mov	r0, r6
    6e70:	bl	0 <coda_bin_cursor_read_char_array>
    6e74:	b	6f54 <coda_cursor_read_char_array+0x200>
    6e78:	mov	r2, r4
    6e7c:	mov	r1, r5
    6e80:	mov	r0, r6
    6e84:	bl	0 <coda_ascii_cursor_read_char_array>
    6e88:	b	6f54 <coda_cursor_read_char_array+0x200>
    6e8c:	cmp	r1, #100	; 0x64
    6e90:	bne	6ea8 <coda_cursor_read_char_array+0x154>
    6e94:	mov	r2, r4
    6e98:	mov	r1, r5
    6e9c:	mov	r0, r6
    6ea0:	bl	0 <coda_mem_cursor_read_char_array>
    6ea4:	b	6f54 <coda_cursor_read_char_array+0x200>
    6ea8:	mvn	r0, #10
    6eac:	mov	r1, #0
    6eb0:	bl	0 <coda_set_error>
    6eb4:	mvn	r0, #0
    6eb8:	b	6f54 <coda_cursor_read_char_array+0x200>
    6ebc:	cmp	r1, #104	; 0x68
    6ec0:	bcs	6ee8 <coda_cursor_read_char_array+0x194>
    6ec4:	cmp	r1, #102	; 0x66
    6ec8:	beq	6ef8 <coda_cursor_read_char_array+0x1a4>
    6ecc:	mov	r1, r5
    6ed0:	mov	r0, r6
    6ed4:	bl	0 <coda_cdf_cursor_read_char_array>
    6ed8:	cmp	r0, #0
    6edc:	beq	6f34 <coda_cursor_read_char_array+0x1e0>
    6ee0:	mvn	r0, #0
    6ee4:	b	6f54 <coda_cursor_read_char_array+0x200>
    6ee8:	cmp	r1, #104	; 0x68
    6eec:	beq	6f18 <coda_cursor_read_char_array+0x1c4>
    6ef0:	cmp	r1, #105	; 0x69
    6ef4:	bne	6f34 <coda_cursor_read_char_array+0x1e0>
    6ef8:	ldr	r0, [pc, #204]	; 6fcc <coda_cursor_read_char_array+0x278>
    6efc:	ldr	r1, [pc, #188]	; 6fc0 <coda_cursor_read_char_array+0x26c>
    6f00:	movw	r2, #1348	; 0x544
    6f04:	ldr	r3, [pc, #176]	; 6fbc <coda_cursor_read_char_array+0x268>
    6f08:	bl	0 <__assert_fail>
    6f0c:	mov	r0, #1
    6f10:	bl	0 <exit>
    6f14:	b	6f34 <coda_cursor_read_char_array+0x1e0>
    6f18:	mov	r1, r5
    6f1c:	mov	r0, r6
    6f20:	bl	0 <coda_netcdf_cursor_read_char_array>
    6f24:	cmp	r0, #0
    6f28:	beq	6f34 <coda_cursor_read_char_array+0x1e0>
    6f2c:	mvn	r0, #0
    6f30:	b	6f54 <coda_cursor_read_char_array+0x200>
    6f34:	cmp	r4, #0
    6f38:	beq	6f50 <coda_cursor_read_char_array+0x1fc>
    6f3c:	mov	r2, #1
    6f40:	mov	r1, r5
    6f44:	mov	r0, r6
    6f48:	bl	2b4 <transpose_array>
    6f4c:	b	6f54 <coda_cursor_read_char_array+0x200>
    6f50:	mov	r0, #0
    6f54:	cmp	r0, #0
    6f58:	beq	6f64 <coda_cursor_read_char_array+0x210>
    6f5c:	mvn	r0, #0
    6f60:	b	6fa0 <coda_cursor_read_char_array+0x24c>
    6f64:	mov	r0, #0
    6f68:	b	6fa0 <coda_cursor_read_char_array+0x24c>
    6f6c:	bl	0 <coda_type_get_native_type_name>
    6f70:	mov	r2, r0
    6f74:	mvn	r0, #104	; 0x68
    6f78:	ldr	r1, [pc, #72]	; 6fc8 <coda_cursor_read_char_array+0x274>
    6f7c:	bl	0 <coda_set_error>
    6f80:	mvn	r0, #0
    6f84:	b	6fa0 <coda_cursor_read_char_array+0x24c>
    6f88:	mvn	r0, #99	; 0x63
    6f8c:	ldr	r1, [pc, #48]	; 6fc4 <coda_cursor_read_char_array+0x270>
    6f90:	ldr	r2, [pc, #40]	; 6fc0 <coda_cursor_read_char_array+0x26c>
    6f94:	movw	r3, #4136	; 0x1028
    6f98:	bl	0 <coda_set_error>
    6f9c:	mvn	r0, #0
    6fa0:	ldr	r4, [sp, #8]
    6fa4:	ldr	r5, [sp, #12]
    6fa8:	ldr	r6, [sp, #16]
    6fac:	ldr	lr, [sp, #4]
    6fb0:	add	sp, sp, #32
    6fb4:	bx	lr
    6fb8:	.word	0x000002bc
    6fbc:	.word	0x000006bf
    6fc0:	.word	0x00000453
    6fc4:	.word	0x0000022b
    6fc8:	.word	0x00000538
    6fcc:	.word	0x000004b3
    6fd0:	.word	0x0000005b

00006fd4 <coda_cursor_read_int8_partial_array>:
    6fd4:	mov	ip, sp
    6fd8:	sub	sp, sp, #48	; 0x30
    6fdc:	str	ip, [sp, #4]
    6fe0:	str	lr, [sp, #8]
    6fe4:	str	r4, [sp, #16]
    6fe8:	str	r5, [sp, #20]
    6fec:	str	r6, [sp, #24]
    6ff0:	str	r7, [sp, #28]
    6ff4:	str	r8, [sp, #32]
    6ff8:	mov	r5, r3
    6ffc:	mov	r6, r2
    7000:	mov	r7, r1
    7004:	mov	r8, r0
    7008:	cmp	r8, #0
    700c:	beq	7190 <coda_cursor_read_int8_partial_array+0x1bc>
    7010:	ldr	r2, [r8, #4]
    7014:	cmp	r2, #0
    7018:	ble	7190 <coda_cursor_read_int8_partial_array+0x1bc>
    701c:	lsl	r2, r2, #4
    7020:	add	ip, r8, r2
    7024:	sub	lr, ip, #4096	; 0x1000
    7028:	ldr	r4, [lr, #4088]	; 0xff8
    702c:	cmp	r4, #0
    7030:	beq	7190 <coda_cursor_read_int8_partial_array+0x1bc>
    7034:	cmp	r5, #0
    7038:	bne	7058 <coda_cursor_read_int8_partial_array+0x84>
    703c:	mvn	r0, #99	; 0x63
    7040:	ldr	r1, [pc, #412]	; 71e4 <coda_cursor_read_int8_partial_array+0x210>
    7044:	ldr	r2, [pc, #396]	; 71d8 <coda_cursor_read_int8_partial_array+0x204>
    7048:	movw	r3, #4204	; 0x106c
    704c:	bl	0 <coda_set_error>
    7050:	mvn	r0, #0
    7054:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    7058:	ldr	r3, [r4]
    705c:	cmp	r3, #100	; 0x64
    7060:	blt	7068 <coda_cursor_read_int8_partial_array+0x94>
    7064:	ldr	r4, [r4, #4]
    7068:	ldr	r0, [r4, #8]
    706c:	cmp	r0, #1
    7070:	beq	7098 <coda_cursor_read_int8_partial_array+0xc4>
    7074:	bl	0 <coda_type_get_class_name>
    7078:	mvn	r2, #104	; 0x68
    707c:	ldr	r1, [pc, #328]	; 71cc <coda_cursor_read_int8_partial_array+0x1f8>
    7080:	mov	r3, r0
    7084:	mov	r0, r2
    7088:	mov	r2, r3
    708c:	bl	0 <coda_set_error>
    7090:	mvn	r0, #0
    7094:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    7098:	ldr	r1, [pc, #320]	; 71e0 <coda_cursor_read_int8_partial_array+0x20c>
    709c:	ldr	r2, [r1]
    70a0:	cmp	r2, #0
    70a4:	beq	7120 <coda_cursor_read_int8_partial_array+0x14c>
    70a8:	add	r1, sp, #44	; 0x2c
    70ac:	mov	r0, r8
    70b0:	bl	0 <coda_cursor_get_num_elements>
    70b4:	cmp	r0, #0
    70b8:	beq	70c4 <coda_cursor_read_int8_partial_array+0xf0>
    70bc:	mvn	r0, #0
    70c0:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    70c4:	cmp	r7, #0
    70c8:	blt	7104 <coda_cursor_read_int8_partial_array+0x130>
    70cc:	ldr	r2, [sp, #44]	; 0x2c
    70d0:	cmp	r7, r2
    70d4:	bge	7104 <coda_cursor_read_int8_partial_array+0x130>
    70d8:	add	r3, r7, r6
    70dc:	cmp	r3, r2
    70e0:	ble	7120 <coda_cursor_read_int8_partial_array+0x14c>
    70e4:	mvn	r0, #106	; 0x6a
    70e8:	ldr	r1, [pc, #224]	; 71d0 <coda_cursor_read_int8_partial_array+0x1fc>
    70ec:	str	r2, [sp]
    70f0:	mov	r3, r6
    70f4:	mov	r2, r7
    70f8:	bl	0 <coda_set_error>
    70fc:	mvn	r0, #0
    7100:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    7104:	mvn	r0, #106	; 0x6a
    7108:	ldr	r1, [pc, #184]	; 71c8 <coda_cursor_read_int8_partial_array+0x1f4>
    710c:	ldr	r3, [sp, #44]	; 0x2c
    7110:	mov	r2, r7
    7114:	bl	0 <coda_set_error>
    7118:	mvn	r0, #0
    711c:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    7120:	add	r1, sp, #40	; 0x28
    7124:	mov	r0, r4
    7128:	bl	854 <get_array_element_read_type>
    712c:	cmp	r0, #0
    7130:	beq	713c <coda_cursor_read_int8_partial_array+0x168>
    7134:	mvn	r0, #0
    7138:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    713c:	ldr	r0, [sp, #40]	; 0x28
    7140:	cmp	r0, #0
    7144:	bne	7174 <coda_cursor_read_int8_partial_array+0x1a0>
    7148:	mov	r3, r5
    714c:	mov	r2, r6
    7150:	mov	r1, r7
    7154:	mov	r0, r8
    7158:	bl	2830 <read_int8_partial_array>
    715c:	cmp	r0, #0
    7160:	beq	716c <coda_cursor_read_int8_partial_array+0x198>
    7164:	mvn	r0, #0
    7168:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    716c:	mov	r0, #0
    7170:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    7174:	bl	0 <coda_type_get_native_type_name>
    7178:	mov	r2, r0
    717c:	mvn	r0, #104	; 0x68
    7180:	ldr	r1, [pc, #76]	; 71d4 <coda_cursor_read_int8_partial_array+0x200>
    7184:	bl	0 <coda_set_error>
    7188:	mvn	r0, #0
    718c:	b	71a8 <coda_cursor_read_int8_partial_array+0x1d4>
    7190:	mvn	r0, #99	; 0x63
    7194:	ldr	r1, [pc, #64]	; 71dc <coda_cursor_read_int8_partial_array+0x208>
    7198:	ldr	r2, [pc, #56]	; 71d8 <coda_cursor_read_int8_partial_array+0x204>
    719c:	movw	r3, #4199	; 0x1067
    71a0:	bl	0 <coda_set_error>
    71a4:	mvn	r0, #0
    71a8:	ldr	r4, [sp, #16]
    71ac:	ldr	r5, [sp, #20]
    71b0:	ldr	r6, [sp, #24]
    71b4:	ldr	r7, [sp, #28]
    71b8:	ldr	r8, [sp, #32]
    71bc:	ldr	lr, [sp, #8]
    71c0:	add	sp, sp, #48	; 0x30
    71c4:	bx	lr
    71c8:	.word	0x0000037f
    71cc:	.word	0x000002bc
    71d0:	.word	0x00000160
    71d4:	.word	0x000003cc
    71d8:	.word	0x00000453
    71dc:	.word	0x0000022b
    71e0:	.word	0x00000000
    71e4:	.word	0x0000005b

000071e8 <coda_cursor_read_uint8_partial_array>:
    71e8:	mov	ip, sp
    71ec:	sub	sp, sp, #48	; 0x30
    71f0:	str	ip, [sp, #4]
    71f4:	str	lr, [sp, #8]
    71f8:	str	r4, [sp, #16]
    71fc:	str	r5, [sp, #20]
    7200:	str	r6, [sp, #24]
    7204:	str	r7, [sp, #28]
    7208:	str	r8, [sp, #32]
    720c:	mov	r5, r3
    7210:	mov	r6, r2
    7214:	mov	r7, r1
    7218:	mov	r8, r0
    721c:	cmp	r8, #0
    7220:	beq	73a4 <coda_cursor_read_uint8_partial_array+0x1bc>
    7224:	ldr	r2, [r8, #4]
    7228:	cmp	r2, #0
    722c:	ble	73a4 <coda_cursor_read_uint8_partial_array+0x1bc>
    7230:	lsl	r2, r2, #4
    7234:	add	ip, r8, r2
    7238:	sub	lr, ip, #4096	; 0x1000
    723c:	ldr	r4, [lr, #4088]	; 0xff8
    7240:	cmp	r4, #0
    7244:	beq	73a4 <coda_cursor_read_uint8_partial_array+0x1bc>
    7248:	cmp	r5, #0
    724c:	bne	726c <coda_cursor_read_uint8_partial_array+0x84>
    7250:	mvn	r0, #99	; 0x63
    7254:	ldr	r1, [pc, #412]	; 73f8 <coda_cursor_read_uint8_partial_array+0x210>
    7258:	ldr	r2, [pc, #396]	; 73ec <coda_cursor_read_uint8_partial_array+0x204>
    725c:	movw	r3, #4290	; 0x10c2
    7260:	bl	0 <coda_set_error>
    7264:	mvn	r0, #0
    7268:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    726c:	ldr	r3, [r4]
    7270:	cmp	r3, #100	; 0x64
    7274:	blt	727c <coda_cursor_read_uint8_partial_array+0x94>
    7278:	ldr	r4, [r4, #4]
    727c:	ldr	r0, [r4, #8]
    7280:	cmp	r0, #1
    7284:	beq	72ac <coda_cursor_read_uint8_partial_array+0xc4>
    7288:	bl	0 <coda_type_get_class_name>
    728c:	mvn	r2, #104	; 0x68
    7290:	ldr	r1, [pc, #332]	; 73e4 <coda_cursor_read_uint8_partial_array+0x1fc>
    7294:	mov	r3, r0
    7298:	mov	r0, r2
    729c:	mov	r2, r3
    72a0:	bl	0 <coda_set_error>
    72a4:	mvn	r0, #0
    72a8:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    72ac:	ldr	r1, [pc, #320]	; 73f4 <coda_cursor_read_uint8_partial_array+0x20c>
    72b0:	ldr	r2, [r1]
    72b4:	cmp	r2, #0
    72b8:	beq	7334 <coda_cursor_read_uint8_partial_array+0x14c>
    72bc:	add	r1, sp, #44	; 0x2c
    72c0:	mov	r0, r8
    72c4:	bl	0 <coda_cursor_get_num_elements>
    72c8:	cmp	r0, #0
    72cc:	beq	72d8 <coda_cursor_read_uint8_partial_array+0xf0>
    72d0:	mvn	r0, #0
    72d4:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    72d8:	cmp	r7, #0
    72dc:	blt	7318 <coda_cursor_read_uint8_partial_array+0x130>
    72e0:	ldr	r2, [sp, #44]	; 0x2c
    72e4:	cmp	r7, r2
    72e8:	bge	7318 <coda_cursor_read_uint8_partial_array+0x130>
    72ec:	add	r3, r7, r6
    72f0:	cmp	r3, r2
    72f4:	ble	7334 <coda_cursor_read_uint8_partial_array+0x14c>
    72f8:	mvn	r0, #106	; 0x6a
    72fc:	ldr	r1, [pc, #228]	; 73e8 <coda_cursor_read_uint8_partial_array+0x200>
    7300:	str	r2, [sp]
    7304:	mov	r3, r6
    7308:	mov	r2, r7
    730c:	bl	0 <coda_set_error>
    7310:	mvn	r0, #0
    7314:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    7318:	mvn	r0, #106	; 0x6a
    731c:	ldr	r1, [pc, #184]	; 73dc <coda_cursor_read_uint8_partial_array+0x1f4>
    7320:	ldr	r3, [sp, #44]	; 0x2c
    7324:	mov	r2, r7
    7328:	bl	0 <coda_set_error>
    732c:	mvn	r0, #0
    7330:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    7334:	add	r1, sp, #40	; 0x28
    7338:	mov	r0, r4
    733c:	bl	854 <get_array_element_read_type>
    7340:	cmp	r0, #0
    7344:	beq	7350 <coda_cursor_read_uint8_partial_array+0x168>
    7348:	mvn	r0, #0
    734c:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    7350:	ldr	r0, [sp, #40]	; 0x28
    7354:	cmp	r0, #1
    7358:	bne	7388 <coda_cursor_read_uint8_partial_array+0x1a0>
    735c:	mov	r3, r5
    7360:	mov	r2, r6
    7364:	mov	r1, r7
    7368:	mov	r0, r8
    736c:	bl	2950 <read_uint8_partial_array>
    7370:	cmp	r0, #0
    7374:	beq	7380 <coda_cursor_read_uint8_partial_array+0x198>
    7378:	mvn	r0, #0
    737c:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    7380:	mov	r0, #0
    7384:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    7388:	bl	0 <coda_type_get_native_type_name>
    738c:	mov	r2, r0
    7390:	mvn	r0, #104	; 0x68
    7394:	ldr	r1, [pc, #68]	; 73e0 <coda_cursor_read_uint8_partial_array+0x1f8>
    7398:	bl	0 <coda_set_error>
    739c:	mvn	r0, #0
    73a0:	b	73bc <coda_cursor_read_uint8_partial_array+0x1d4>
    73a4:	mvn	r0, #99	; 0x63
    73a8:	ldr	r1, [pc, #64]	; 73f0 <coda_cursor_read_uint8_partial_array+0x208>
    73ac:	ldr	r2, [pc, #56]	; 73ec <coda_cursor_read_uint8_partial_array+0x204>
    73b0:	movw	r3, #4285	; 0x10bd
    73b4:	bl	0 <coda_set_error>
    73b8:	mvn	r0, #0
    73bc:	ldr	r4, [sp, #16]
    73c0:	ldr	r5, [sp, #20]
    73c4:	ldr	r6, [sp, #24]
    73c8:	ldr	r7, [sp, #28]
    73cc:	ldr	r8, [sp, #32]
    73d0:	ldr	lr, [sp, #8]
    73d4:	add	sp, sp, #48	; 0x30
    73d8:	bx	lr
    73dc:	.word	0x0000037f
    73e0:	.word	0x00000078
    73e4:	.word	0x000002bc
    73e8:	.word	0x00000160
    73ec:	.word	0x00000453
    73f0:	.word	0x0000022b
    73f4:	.word	0x00000000
    73f8:	.word	0x0000005b

000073fc <coda_cursor_read_int16_partial_array>:
    73fc:	mov	ip, sp
    7400:	sub	sp, sp, #48	; 0x30
    7404:	str	ip, [sp, #4]
    7408:	str	lr, [sp, #8]
    740c:	str	r4, [sp, #16]
    7410:	str	r5, [sp, #20]
    7414:	str	r6, [sp, #24]
    7418:	str	r7, [sp, #28]
    741c:	str	r8, [sp, #32]
    7420:	mov	r4, r3
    7424:	mov	r5, r2
    7428:	mov	r6, r1
    742c:	mov	r7, r0
    7430:	cmp	r7, #0
    7434:	beq	7658 <coda_cursor_read_int16_partial_array+0x25c>
    7438:	ldr	r0, [r7, #4]
    743c:	cmp	r0, #0
    7440:	ble	7658 <coda_cursor_read_int16_partial_array+0x25c>
    7444:	lsl	r2, r0, #4
    7448:	add	r1, r7, r2
    744c:	sub	lr, r1, #4096	; 0x1000
    7450:	ldr	r8, [lr, #4088]	; 0xff8
    7454:	cmp	r8, #0
    7458:	beq	7658 <coda_cursor_read_int16_partial_array+0x25c>
    745c:	cmp	r4, #0
    7460:	bne	7480 <coda_cursor_read_int16_partial_array+0x84>
    7464:	mvn	r0, #99	; 0x63
    7468:	ldr	r1, [pc, #568]	; 76a8 <coda_cursor_read_int16_partial_array+0x2ac>
    746c:	ldr	r2, [pc, #552]	; 769c <coda_cursor_read_int16_partial_array+0x2a0>
    7470:	movw	r3, #4379	; 0x111b
    7474:	bl	0 <coda_set_error>
    7478:	mvn	r0, #0
    747c:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    7480:	ldr	r0, [r8]
    7484:	cmp	r0, #100	; 0x64
    7488:	blt	7490 <coda_cursor_read_int16_partial_array+0x94>
    748c:	ldr	r8, [r8, #4]
    7490:	ldr	r0, [r8, #8]
    7494:	cmp	r0, #1
    7498:	beq	74c0 <coda_cursor_read_int16_partial_array+0xc4>
    749c:	bl	0 <coda_type_get_class_name>
    74a0:	mvn	r2, #104	; 0x68
    74a4:	ldr	r1, [pc, #488]	; 7694 <coda_cursor_read_int16_partial_array+0x298>
    74a8:	mov	r3, r0
    74ac:	mov	r0, r2
    74b0:	mov	r2, r3
    74b4:	bl	0 <coda_set_error>
    74b8:	mvn	r0, #0
    74bc:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    74c0:	ldr	r2, [pc, #476]	; 76a4 <coda_cursor_read_int16_partial_array+0x2a8>
    74c4:	ldr	r3, [r2]
    74c8:	cmp	r3, #0
    74cc:	beq	7548 <coda_cursor_read_int16_partial_array+0x14c>
    74d0:	add	r1, sp, #44	; 0x2c
    74d4:	mov	r0, r7
    74d8:	bl	0 <coda_cursor_get_num_elements>
    74dc:	cmp	r0, #0
    74e0:	beq	74ec <coda_cursor_read_int16_partial_array+0xf0>
    74e4:	mvn	r0, #0
    74e8:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    74ec:	cmp	r6, #0
    74f0:	blt	752c <coda_cursor_read_int16_partial_array+0x130>
    74f4:	ldr	r3, [sp, #44]	; 0x2c
    74f8:	cmp	r6, r3
    74fc:	bge	752c <coda_cursor_read_int16_partial_array+0x130>
    7500:	add	r2, r6, r5
    7504:	cmp	r2, r3
    7508:	ble	7548 <coda_cursor_read_int16_partial_array+0x14c>
    750c:	mvn	r0, #106	; 0x6a
    7510:	ldr	r1, [pc, #384]	; 7698 <coda_cursor_read_int16_partial_array+0x29c>
    7514:	str	r3, [sp]
    7518:	mov	r3, r5
    751c:	mov	r2, r6
    7520:	bl	0 <coda_set_error>
    7524:	mvn	r0, #0
    7528:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    752c:	mvn	r0, #106	; 0x6a
    7530:	ldr	r1, [pc, #344]	; 7690 <coda_cursor_read_int16_partial_array+0x294>
    7534:	ldr	r3, [sp, #44]	; 0x2c
    7538:	mov	r2, r6
    753c:	bl	0 <coda_set_error>
    7540:	mvn	r0, #0
    7544:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    7548:	add	r1, sp, #40	; 0x28
    754c:	mov	r0, r8
    7550:	bl	854 <get_array_element_read_type>
    7554:	cmp	r0, #0
    7558:	beq	7564 <coda_cursor_read_int16_partial_array+0x168>
    755c:	mvn	r0, #0
    7560:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    7564:	ldr	r0, [sp, #40]	; 0x28
    7568:	cmp	r0, #0
    756c:	beq	760c <coda_cursor_read_int16_partial_array+0x210>
    7570:	cmp	r0, #1
    7574:	beq	75c8 <coda_cursor_read_int16_partial_array+0x1cc>
    7578:	cmp	r0, #2
    757c:	bne	75a4 <coda_cursor_read_int16_partial_array+0x1a8>
    7580:	mov	r3, r4
    7584:	mov	r2, r5
    7588:	mov	r1, r6
    758c:	mov	r0, r7
    7590:	bl	2a58 <read_int16_partial_array>
    7594:	cmp	r0, #0
    7598:	beq	7650 <coda_cursor_read_int16_partial_array+0x254>
    759c:	mvn	r0, #0
    75a0:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    75a4:	bl	0 <coda_type_get_native_type_name>
    75a8:	mvn	r2, #104	; 0x68
    75ac:	ldr	r1, [pc, #248]	; 76ac <coda_cursor_read_int16_partial_array+0x2b0>
    75b0:	mov	ip, r0
    75b4:	mov	r0, r2
    75b8:	mov	r2, ip
    75bc:	bl	0 <coda_set_error>
    75c0:	mvn	r0, #0
    75c4:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    75c8:	mov	r3, r4
    75cc:	mov	r2, r5
    75d0:	mov	r1, r6
    75d4:	mov	r0, r7
    75d8:	bl	2950 <read_uint8_partial_array>
    75dc:	cmp	r0, #0
    75e0:	beq	75ec <coda_cursor_read_int16_partial_array+0x1f0>
    75e4:	mvn	r0, #0
    75e8:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    75ec:	sub	r3, r5, #1
    75f0:	cmp	r3, #0
    75f4:	blt	7650 <coda_cursor_read_int16_partial_array+0x254>
    75f8:	add	r1, r4, r3, lsl #1
    75fc:	ldrb	r0, [r4, r3]
    7600:	strh	r0, [r1]
    7604:	sub	r3, r3, #1
    7608:	b	75f0 <coda_cursor_read_int16_partial_array+0x1f4>
    760c:	mov	r3, r4
    7610:	mov	r2, r5
    7614:	mov	r1, r6
    7618:	mov	r0, r7
    761c:	bl	2830 <read_int8_partial_array>
    7620:	cmp	r0, #0
    7624:	beq	7630 <coda_cursor_read_int16_partial_array+0x234>
    7628:	mvn	r0, #0
    762c:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    7630:	sub	r3, r5, #1
    7634:	cmp	r3, #0
    7638:	blt	7650 <coda_cursor_read_int16_partial_array+0x254>
    763c:	add	r0, r4, r3, lsl #1
    7640:	ldrsb	ip, [r4, r3]
    7644:	strh	ip, [r0]
    7648:	sub	r3, r3, #1
    764c:	b	7634 <coda_cursor_read_int16_partial_array+0x238>
    7650:	mov	r0, #0
    7654:	b	7670 <coda_cursor_read_int16_partial_array+0x274>
    7658:	mvn	r0, #99	; 0x63
    765c:	ldr	r1, [pc, #60]	; 76a0 <coda_cursor_read_int16_partial_array+0x2a4>
    7660:	ldr	r2, [pc, #52]	; 769c <coda_cursor_read_int16_partial_array+0x2a0>
    7664:	movw	r3, #4374	; 0x1116
    7668:	bl	0 <coda_set_error>
    766c:	mvn	r0, #0
    7670:	ldr	r4, [sp, #16]
    7674:	ldr	r5, [sp, #20]
    7678:	ldr	r6, [sp, #24]
    767c:	ldr	r7, [sp, #28]
    7680:	ldr	r8, [sp, #32]
    7684:	ldr	lr, [sp, #8]
    7688:	add	sp, sp, #48	; 0x30
    768c:	bx	lr
    7690:	.word	0x0000037f
    7694:	.word	0x000002bc
    7698:	.word	0x00000160
    769c:	.word	0x00000453
    76a0:	.word	0x0000022b
    76a4:	.word	0x00000000
    76a8:	.word	0x0000005b
    76ac:	.word	0x00000133

000076b0 <coda_cursor_read_uint16_partial_array>:
    76b0:	mov	ip, sp
    76b4:	sub	sp, sp, #48	; 0x30
    76b8:	str	ip, [sp, #4]
    76bc:	str	lr, [sp, #8]
    76c0:	str	r4, [sp, #16]
    76c4:	str	r5, [sp, #20]
    76c8:	str	r6, [sp, #24]
    76cc:	str	r7, [sp, #28]
    76d0:	str	r8, [sp, #32]
    76d4:	mov	r4, r3
    76d8:	mov	r5, r2
    76dc:	mov	r6, r1
    76e0:	mov	r7, r0
    76e4:	cmp	r7, #0
    76e8:	beq	78b8 <coda_cursor_read_uint16_partial_array+0x208>
    76ec:	ldr	r0, [r7, #4]
    76f0:	cmp	r0, #0
    76f4:	ble	78b8 <coda_cursor_read_uint16_partial_array+0x208>
    76f8:	lsl	r1, r0, #4
    76fc:	add	r3, r7, r1
    7700:	sub	lr, r3, #4096	; 0x1000
    7704:	ldr	r8, [lr, #4088]	; 0xff8
    7708:	cmp	r8, #0
    770c:	beq	78b8 <coda_cursor_read_uint16_partial_array+0x208>
    7710:	cmp	r4, #0
    7714:	bne	7734 <coda_cursor_read_uint16_partial_array+0x84>
    7718:	mvn	r0, #99	; 0x63
    771c:	ldr	r1, [pc, #488]	; 790c <coda_cursor_read_uint16_partial_array+0x25c>
    7720:	ldr	r2, [pc, #472]	; 7900 <coda_cursor_read_uint16_partial_array+0x250>
    7724:	movw	r3, #4488	; 0x1188
    7728:	bl	0 <coda_set_error>
    772c:	mvn	r0, #0
    7730:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    7734:	ldr	r0, [r8]
    7738:	cmp	r0, #100	; 0x64
    773c:	blt	7744 <coda_cursor_read_uint16_partial_array+0x94>
    7740:	ldr	r8, [r8, #4]
    7744:	ldr	r0, [r8, #8]
    7748:	cmp	r0, #1
    774c:	beq	776c <coda_cursor_read_uint16_partial_array+0xbc>
    7750:	bl	0 <coda_type_get_class_name>
    7754:	mov	r2, r0
    7758:	mvn	r0, #104	; 0x68
    775c:	ldr	r1, [pc, #400]	; 78f4 <coda_cursor_read_uint16_partial_array+0x244>
    7760:	bl	0 <coda_set_error>
    7764:	mvn	r0, #0
    7768:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    776c:	ldr	r3, [pc, #404]	; 7908 <coda_cursor_read_uint16_partial_array+0x258>
    7770:	ldr	ip, [r3]
    7774:	cmp	ip, #0
    7778:	beq	77f4 <coda_cursor_read_uint16_partial_array+0x144>
    777c:	add	r1, sp, #44	; 0x2c
    7780:	mov	r0, r7
    7784:	bl	0 <coda_cursor_get_num_elements>
    7788:	cmp	r0, #0
    778c:	beq	7798 <coda_cursor_read_uint16_partial_array+0xe8>
    7790:	mvn	r0, #0
    7794:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    7798:	cmp	r6, #0
    779c:	blt	77d8 <coda_cursor_read_uint16_partial_array+0x128>
    77a0:	ldr	r2, [sp, #44]	; 0x2c
    77a4:	cmp	r6, r2
    77a8:	bge	77d8 <coda_cursor_read_uint16_partial_array+0x128>
    77ac:	add	r0, r6, r5
    77b0:	cmp	r0, r2
    77b4:	ble	77f4 <coda_cursor_read_uint16_partial_array+0x144>
    77b8:	mvn	r0, #106	; 0x6a
    77bc:	ldr	r1, [pc, #308]	; 78f8 <coda_cursor_read_uint16_partial_array+0x248>
    77c0:	str	r2, [sp]
    77c4:	mov	r3, r5
    77c8:	mov	r2, r6
    77cc:	bl	0 <coda_set_error>
    77d0:	mvn	r0, #0
    77d4:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    77d8:	mvn	r0, #106	; 0x6a
    77dc:	ldr	r1, [pc, #268]	; 78f0 <coda_cursor_read_uint16_partial_array+0x240>
    77e0:	ldr	r3, [sp, #44]	; 0x2c
    77e4:	mov	r2, r6
    77e8:	bl	0 <coda_set_error>
    77ec:	mvn	r0, #0
    77f0:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    77f4:	add	r1, sp, #40	; 0x28
    77f8:	mov	r0, r8
    77fc:	bl	854 <get_array_element_read_type>
    7800:	cmp	r0, #0
    7804:	beq	7810 <coda_cursor_read_uint16_partial_array+0x160>
    7808:	mvn	r0, #0
    780c:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    7810:	ldr	r0, [sp, #40]	; 0x28
    7814:	cmp	r0, #1
    7818:	beq	786c <coda_cursor_read_uint16_partial_array+0x1bc>
    781c:	cmp	r0, #3
    7820:	bne	7848 <coda_cursor_read_uint16_partial_array+0x198>
    7824:	mov	r3, r4
    7828:	mov	r2, r5
    782c:	mov	r1, r6
    7830:	mov	r0, r7
    7834:	bl	2b78 <read_uint16_partial_array>
    7838:	cmp	r0, #0
    783c:	beq	78b0 <coda_cursor_read_uint16_partial_array+0x200>
    7840:	mvn	r0, #0
    7844:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    7848:	bl	0 <coda_type_get_native_type_name>
    784c:	mvn	r2, #104	; 0x68
    7850:	ldr	r1, [pc, #164]	; 78fc <coda_cursor_read_uint16_partial_array+0x24c>
    7854:	mov	r3, r0
    7858:	mov	r0, r2
    785c:	mov	r2, r3
    7860:	bl	0 <coda_set_error>
    7864:	mvn	r0, #0
    7868:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    786c:	mov	r3, r4
    7870:	mov	r2, r5
    7874:	mov	r1, r6
    7878:	mov	r0, r7
    787c:	bl	2950 <read_uint8_partial_array>
    7880:	cmp	r0, #0
    7884:	beq	7890 <coda_cursor_read_uint16_partial_array+0x1e0>
    7888:	mvn	r0, #0
    788c:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    7890:	sub	r1, r5, #1
    7894:	cmp	r1, #0
    7898:	blt	78b0 <coda_cursor_read_uint16_partial_array+0x200>
    789c:	add	ip, r4, r1, lsl #1
    78a0:	ldrb	r3, [r4, r1]
    78a4:	strh	r3, [ip]
    78a8:	sub	r1, r1, #1
    78ac:	b	7894 <coda_cursor_read_uint16_partial_array+0x1e4>
    78b0:	mov	r0, #0
    78b4:	b	78d0 <coda_cursor_read_uint16_partial_array+0x220>
    78b8:	mvn	r0, #99	; 0x63
    78bc:	ldr	r1, [pc, #64]	; 7904 <coda_cursor_read_uint16_partial_array+0x254>
    78c0:	ldr	r2, [pc, #56]	; 7900 <coda_cursor_read_uint16_partial_array+0x250>
    78c4:	movw	r3, #4483	; 0x1183
    78c8:	bl	0 <coda_set_error>
    78cc:	mvn	r0, #0
    78d0:	ldr	r4, [sp, #16]
    78d4:	ldr	r5, [sp, #20]
    78d8:	ldr	r6, [sp, #24]
    78dc:	ldr	r7, [sp, #28]
    78e0:	ldr	r8, [sp, #32]
    78e4:	ldr	lr, [sp, #8]
    78e8:	add	sp, sp, #48	; 0x30
    78ec:	bx	lr
    78f0:	.word	0x0000037f
    78f4:	.word	0x000002bc
    78f8:	.word	0x00000160
    78fc:	.word	0x000004b5
    7900:	.word	0x00000453
    7904:	.word	0x0000022b
    7908:	.word	0x00000000
    790c:	.word	0x0000005b

00007910 <coda_cursor_read_int32_partial_array>:
    7910:	mov	ip, sp
    7914:	sub	sp, sp, #48	; 0x30
    7918:	str	ip, [sp, #4]
    791c:	str	lr, [sp, #8]
    7920:	str	r4, [sp, #16]
    7924:	str	r5, [sp, #20]
    7928:	str	r6, [sp, #24]
    792c:	str	r7, [sp, #28]
    7930:	str	r8, [sp, #32]
    7934:	mov	r4, r3
    7938:	mov	r5, r2
    793c:	mov	r6, r1
    7940:	mov	r7, r0
    7944:	cmp	r7, #0
    7948:	beq	7bfc <coda_cursor_read_int32_partial_array+0x2ec>
    794c:	ldr	r3, [r7, #4]
    7950:	cmp	r3, #0
    7954:	ble	7bfc <coda_cursor_read_int32_partial_array+0x2ec>
    7958:	lsl	r2, r3, #4
    795c:	add	ip, r7, r2
    7960:	sub	lr, ip, #4096	; 0x1000
    7964:	ldr	r8, [lr, #4088]	; 0xff8
    7968:	cmp	r8, #0
    796c:	beq	7bfc <coda_cursor_read_int32_partial_array+0x2ec>
    7970:	cmp	r4, #0
    7974:	bne	7994 <coda_cursor_read_int32_partial_array+0x84>
    7978:	mvn	r0, #99	; 0x63
    797c:	ldr	r1, [pc, #716]	; 7c50 <coda_cursor_read_int32_partial_array+0x340>
    7980:	ldr	r2, [pc, #700]	; 7c44 <coda_cursor_read_int32_partial_array+0x334>
    7984:	movw	r3, #4589	; 0x11ed
    7988:	bl	0 <coda_set_error>
    798c:	mvn	r0, #0
    7990:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7994:	ldr	r2, [r8]
    7998:	cmp	r2, #100	; 0x64
    799c:	blt	79a4 <coda_cursor_read_int32_partial_array+0x94>
    79a0:	ldr	r8, [r8, #4]
    79a4:	ldr	r0, [r8, #8]
    79a8:	cmp	r0, #1
    79ac:	beq	79d4 <coda_cursor_read_int32_partial_array+0xc4>
    79b0:	bl	0 <coda_type_get_class_name>
    79b4:	mvn	r2, #104	; 0x68
    79b8:	ldr	r1, [pc, #636]	; 7c3c <coda_cursor_read_int32_partial_array+0x32c>
    79bc:	mov	r3, r0
    79c0:	mov	r0, r2
    79c4:	mov	r2, r3
    79c8:	bl	0 <coda_set_error>
    79cc:	mvn	r0, #0
    79d0:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    79d4:	ldr	r1, [pc, #624]	; 7c4c <coda_cursor_read_int32_partial_array+0x33c>
    79d8:	ldr	r3, [r1]
    79dc:	cmp	r3, #0
    79e0:	beq	7a5c <coda_cursor_read_int32_partial_array+0x14c>
    79e4:	add	r1, sp, #44	; 0x2c
    79e8:	mov	r0, r7
    79ec:	bl	0 <coda_cursor_get_num_elements>
    79f0:	cmp	r0, #0
    79f4:	beq	7a00 <coda_cursor_read_int32_partial_array+0xf0>
    79f8:	mvn	r0, #0
    79fc:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7a00:	cmp	r6, #0
    7a04:	blt	7a40 <coda_cursor_read_int32_partial_array+0x130>
    7a08:	ldr	r2, [sp, #44]	; 0x2c
    7a0c:	cmp	r6, r2
    7a10:	bge	7a40 <coda_cursor_read_int32_partial_array+0x130>
    7a14:	add	r3, r6, r5
    7a18:	cmp	r3, r2
    7a1c:	ble	7a5c <coda_cursor_read_int32_partial_array+0x14c>
    7a20:	mvn	r0, #106	; 0x6a
    7a24:	ldr	r1, [pc, #532]	; 7c40 <coda_cursor_read_int32_partial_array+0x330>
    7a28:	str	r2, [sp]
    7a2c:	mov	r3, r5
    7a30:	mov	r2, r6
    7a34:	bl	0 <coda_set_error>
    7a38:	mvn	r0, #0
    7a3c:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7a40:	mvn	r0, #106	; 0x6a
    7a44:	ldr	r1, [pc, #488]	; 7c34 <coda_cursor_read_int32_partial_array+0x324>
    7a48:	ldr	r3, [sp, #44]	; 0x2c
    7a4c:	mov	r2, r6
    7a50:	bl	0 <coda_set_error>
    7a54:	mvn	r0, #0
    7a58:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7a5c:	add	r1, sp, #40	; 0x28
    7a60:	mov	r0, r8
    7a64:	bl	854 <get_array_element_read_type>
    7a68:	cmp	r0, #0
    7a6c:	beq	7a78 <coda_cursor_read_int32_partial_array+0x168>
    7a70:	mvn	r0, #0
    7a74:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7a78:	ldr	r0, [sp, #40]	; 0x28
    7a7c:	cmp	r0, #2
    7a80:	bcs	7b0c <coda_cursor_read_int32_partial_array+0x1fc>
    7a84:	cmp	r0, #0
    7a88:	bne	7acc <coda_cursor_read_int32_partial_array+0x1bc>
    7a8c:	mov	r3, r4
    7a90:	mov	r2, r5
    7a94:	mov	r1, r6
    7a98:	mov	r0, r7
    7a9c:	bl	2830 <read_int8_partial_array>
    7aa0:	cmp	r0, #0
    7aa4:	beq	7ab0 <coda_cursor_read_int32_partial_array+0x1a0>
    7aa8:	mvn	r0, #0
    7aac:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7ab0:	sub	r2, r5, #1
    7ab4:	cmp	r2, #0
    7ab8:	blt	7bf4 <coda_cursor_read_int32_partial_array+0x2e4>
    7abc:	ldrsb	r1, [r4, r2]
    7ac0:	str	r1, [r4, r2, lsl #2]
    7ac4:	sub	r2, r2, #1
    7ac8:	b	7ab4 <coda_cursor_read_int32_partial_array+0x1a4>
    7acc:	mov	r3, r4
    7ad0:	mov	r2, r5
    7ad4:	mov	r1, r6
    7ad8:	mov	r0, r7
    7adc:	bl	2950 <read_uint8_partial_array>
    7ae0:	cmp	r0, #0
    7ae4:	beq	7af0 <coda_cursor_read_int32_partial_array+0x1e0>
    7ae8:	mvn	r0, #0
    7aec:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7af0:	sub	r2, r5, #1
    7af4:	cmp	r2, #0
    7af8:	blt	7bf4 <coda_cursor_read_int32_partial_array+0x2e4>
    7afc:	ldrb	r1, [r4, r2]
    7b00:	str	r1, [r4, r2, lsl #2]
    7b04:	sub	r2, r2, #1
    7b08:	b	7af4 <coda_cursor_read_int32_partial_array+0x1e4>
    7b0c:	cmp	r0, #2
    7b10:	beq	7bb0 <coda_cursor_read_int32_partial_array+0x2a0>
    7b14:	cmp	r0, #3
    7b18:	beq	7b6c <coda_cursor_read_int32_partial_array+0x25c>
    7b1c:	cmp	r0, #4
    7b20:	bne	7b48 <coda_cursor_read_int32_partial_array+0x238>
    7b24:	mov	r3, r4
    7b28:	mov	r2, r5
    7b2c:	mov	r1, r6
    7b30:	mov	r0, r7
    7b34:	bl	2c80 <read_int32_partial_array>
    7b38:	cmp	r0, #0
    7b3c:	beq	7bf4 <coda_cursor_read_int32_partial_array+0x2e4>
    7b40:	mvn	r0, #0
    7b44:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7b48:	bl	0 <coda_type_get_native_type_name>
    7b4c:	mvn	r2, #104	; 0x68
    7b50:	ldr	r1, [pc, #224]	; 7c38 <coda_cursor_read_int32_partial_array+0x328>
    7b54:	mov	r3, r0
    7b58:	mov	r0, r2
    7b5c:	mov	r2, r3
    7b60:	bl	0 <coda_set_error>
    7b64:	mvn	r0, #0
    7b68:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7b6c:	mov	r3, r4
    7b70:	mov	r2, r5
    7b74:	mov	r1, r6
    7b78:	mov	r0, r7
    7b7c:	bl	2b78 <read_uint16_partial_array>
    7b80:	cmp	r0, #0
    7b84:	beq	7b90 <coda_cursor_read_int32_partial_array+0x280>
    7b88:	mvn	r0, #0
    7b8c:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7b90:	sub	ip, r5, #1
    7b94:	cmp	ip, #0
    7b98:	blt	7bf4 <coda_cursor_read_int32_partial_array+0x2e4>
    7b9c:	add	r3, r4, ip, lsl #1
    7ba0:	ldrh	r0, [r3]
    7ba4:	str	r0, [r4, ip, lsl #2]
    7ba8:	sub	ip, ip, #1
    7bac:	b	7b94 <coda_cursor_read_int32_partial_array+0x284>
    7bb0:	mov	r3, r4
    7bb4:	mov	r2, r5
    7bb8:	mov	r1, r6
    7bbc:	mov	r0, r7
    7bc0:	bl	2a58 <read_int16_partial_array>
    7bc4:	cmp	r0, #0
    7bc8:	beq	7bd4 <coda_cursor_read_int32_partial_array+0x2c4>
    7bcc:	mvn	r0, #0
    7bd0:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7bd4:	sub	r0, r5, #1
    7bd8:	cmp	r0, #0
    7bdc:	blt	7bf4 <coda_cursor_read_int32_partial_array+0x2e4>
    7be0:	add	r1, r4, r0, lsl #1
    7be4:	ldrsh	r1, [r1]
    7be8:	str	r1, [r4, r0, lsl #2]
    7bec:	sub	r0, r0, #1
    7bf0:	b	7bd8 <coda_cursor_read_int32_partial_array+0x2c8>
    7bf4:	mov	r0, #0
    7bf8:	b	7c14 <coda_cursor_read_int32_partial_array+0x304>
    7bfc:	mvn	r0, #99	; 0x63
    7c00:	ldr	r1, [pc, #64]	; 7c48 <coda_cursor_read_int32_partial_array+0x338>
    7c04:	ldr	r2, [pc, #56]	; 7c44 <coda_cursor_read_int32_partial_array+0x334>
    7c08:	movw	r3, #4584	; 0x11e8
    7c0c:	bl	0 <coda_set_error>
    7c10:	mvn	r0, #0
    7c14:	ldr	r4, [sp, #16]
    7c18:	ldr	r5, [sp, #20]
    7c1c:	ldr	r6, [sp, #24]
    7c20:	ldr	r7, [sp, #28]
    7c24:	ldr	r8, [sp, #32]
    7c28:	ldr	lr, [sp, #8]
    7c2c:	add	sp, sp, #48	; 0x30
    7c30:	bx	lr
    7c34:	.word	0x0000037f
    7c38:	.word	0x000001d0
    7c3c:	.word	0x000002bc
    7c40:	.word	0x00000160
    7c44:	.word	0x00000453
    7c48:	.word	0x0000022b
    7c4c:	.word	0x00000000
    7c50:	.word	0x0000005b

00007c54 <coda_cursor_read_uint32_partial_array>:
    7c54:	mov	ip, sp
    7c58:	sub	sp, sp, #48	; 0x30
    7c5c:	str	ip, [sp, #4]
    7c60:	str	lr, [sp, #8]
    7c64:	str	r4, [sp, #16]
    7c68:	str	r5, [sp, #20]
    7c6c:	str	r6, [sp, #24]
    7c70:	str	r7, [sp, #28]
    7c74:	str	r8, [sp, #32]
    7c78:	mov	r4, r3
    7c7c:	mov	r5, r2
    7c80:	mov	r6, r1
    7c84:	mov	r7, r0
    7c88:	cmp	r7, #0
    7c8c:	beq	7e9c <coda_cursor_read_uint32_partial_array+0x248>
    7c90:	ldr	r0, [r7, #4]
    7c94:	cmp	r0, #0
    7c98:	ble	7e9c <coda_cursor_read_uint32_partial_array+0x248>
    7c9c:	lsl	r3, r0, #4
    7ca0:	add	r1, r7, r3
    7ca4:	sub	lr, r1, #4096	; 0x1000
    7ca8:	ldr	r8, [lr, #4088]	; 0xff8
    7cac:	cmp	r8, #0
    7cb0:	beq	7e9c <coda_cursor_read_uint32_partial_array+0x248>
    7cb4:	cmp	r4, #0
    7cb8:	bne	7cd8 <coda_cursor_read_uint32_partial_array+0x84>
    7cbc:	mvn	r0, #99	; 0x63
    7cc0:	ldr	r1, [pc, #552]	; 7ef0 <coda_cursor_read_uint32_partial_array+0x29c>
    7cc4:	ldr	r2, [pc, #532]	; 7ee0 <coda_cursor_read_uint32_partial_array+0x28c>
    7cc8:	movw	r3, #4719	; 0x126f
    7ccc:	bl	0 <coda_set_error>
    7cd0:	mvn	r0, #0
    7cd4:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7cd8:	ldr	r0, [r8]
    7cdc:	cmp	r0, #100	; 0x64
    7ce0:	blt	7ce8 <coda_cursor_read_uint32_partial_array+0x94>
    7ce4:	ldr	r8, [r8, #4]
    7ce8:	ldr	r0, [r8, #8]
    7cec:	cmp	r0, #1
    7cf0:	beq	7d10 <coda_cursor_read_uint32_partial_array+0xbc>
    7cf4:	bl	0 <coda_type_get_class_name>
    7cf8:	mov	r2, r0
    7cfc:	mvn	r0, #104	; 0x68
    7d00:	ldr	r1, [pc, #464]	; 7ed8 <coda_cursor_read_uint32_partial_array+0x284>
    7d04:	bl	0 <coda_set_error>
    7d08:	mvn	r0, #0
    7d0c:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7d10:	ldr	r2, [pc, #468]	; 7eec <coda_cursor_read_uint32_partial_array+0x298>
    7d14:	ldr	ip, [r2]
    7d18:	cmp	ip, #0
    7d1c:	beq	7d98 <coda_cursor_read_uint32_partial_array+0x144>
    7d20:	add	r1, sp, #44	; 0x2c
    7d24:	mov	r0, r7
    7d28:	bl	0 <coda_cursor_get_num_elements>
    7d2c:	cmp	r0, #0
    7d30:	beq	7d3c <coda_cursor_read_uint32_partial_array+0xe8>
    7d34:	mvn	r0, #0
    7d38:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7d3c:	cmp	r6, #0
    7d40:	blt	7d7c <coda_cursor_read_uint32_partial_array+0x128>
    7d44:	ldr	r2, [sp, #44]	; 0x2c
    7d48:	cmp	r6, r2
    7d4c:	bge	7d7c <coda_cursor_read_uint32_partial_array+0x128>
    7d50:	add	r1, r6, r5
    7d54:	cmp	r1, r2
    7d58:	ble	7d98 <coda_cursor_read_uint32_partial_array+0x144>
    7d5c:	mvn	r0, #106	; 0x6a
    7d60:	ldr	r1, [pc, #372]	; 7edc <coda_cursor_read_uint32_partial_array+0x288>
    7d64:	str	r2, [sp]
    7d68:	mov	r3, r5
    7d6c:	mov	r2, r6
    7d70:	bl	0 <coda_set_error>
    7d74:	mvn	r0, #0
    7d78:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7d7c:	mvn	r0, #106	; 0x6a
    7d80:	ldr	r1, [pc, #332]	; 7ed4 <coda_cursor_read_uint32_partial_array+0x280>
    7d84:	ldr	r3, [sp, #44]	; 0x2c
    7d88:	mov	r2, r6
    7d8c:	bl	0 <coda_set_error>
    7d90:	mvn	r0, #0
    7d94:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7d98:	add	r1, sp, #40	; 0x28
    7d9c:	mov	r0, r8
    7da0:	bl	854 <get_array_element_read_type>
    7da4:	cmp	r0, #0
    7da8:	beq	7db4 <coda_cursor_read_uint32_partial_array+0x160>
    7dac:	mvn	r0, #0
    7db0:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7db4:	ldr	r0, [sp, #40]	; 0x28
    7db8:	cmp	r0, #1
    7dbc:	beq	7e54 <coda_cursor_read_uint32_partial_array+0x200>
    7dc0:	cmp	r0, #3
    7dc4:	beq	7e10 <coda_cursor_read_uint32_partial_array+0x1bc>
    7dc8:	cmp	r0, #5
    7dcc:	bne	7df4 <coda_cursor_read_uint32_partial_array+0x1a0>
    7dd0:	mov	r3, r4
    7dd4:	mov	r2, r5
    7dd8:	mov	r1, r6
    7ddc:	mov	r0, r7
    7de0:	bl	2da0 <read_uint32_partial_array>
    7de4:	cmp	r0, #0
    7de8:	beq	7e94 <coda_cursor_read_uint32_partial_array+0x240>
    7dec:	mvn	r0, #0
    7df0:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7df4:	bl	0 <coda_type_get_native_type_name>
    7df8:	mov	r2, r0
    7dfc:	mvn	r0, #104	; 0x68
    7e00:	ldr	r1, [pc, #224]	; 7ee8 <coda_cursor_read_uint32_partial_array+0x294>
    7e04:	bl	0 <coda_set_error>
    7e08:	mvn	r0, #0
    7e0c:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7e10:	mov	r3, r4
    7e14:	mov	r2, r5
    7e18:	mov	r1, r6
    7e1c:	mov	r0, r7
    7e20:	bl	2b78 <read_uint16_partial_array>
    7e24:	cmp	r0, #0
    7e28:	beq	7e34 <coda_cursor_read_uint32_partial_array+0x1e0>
    7e2c:	mvn	r0, #0
    7e30:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7e34:	sub	r2, r5, #1
    7e38:	cmp	r2, #0
    7e3c:	blt	7e94 <coda_cursor_read_uint32_partial_array+0x240>
    7e40:	add	ip, r4, r2, lsl #1
    7e44:	ldrh	r3, [ip]
    7e48:	str	r3, [r4, r2, lsl #2]
    7e4c:	sub	r2, r2, #1
    7e50:	b	7e38 <coda_cursor_read_uint32_partial_array+0x1e4>
    7e54:	mov	r3, r4
    7e58:	mov	r2, r5
    7e5c:	mov	r1, r6
    7e60:	mov	r0, r7
    7e64:	bl	2950 <read_uint8_partial_array>
    7e68:	cmp	r0, #0
    7e6c:	beq	7e78 <coda_cursor_read_uint32_partial_array+0x224>
    7e70:	mvn	r0, #0
    7e74:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7e78:	sub	r1, r5, #1
    7e7c:	cmp	r1, #0
    7e80:	blt	7e94 <coda_cursor_read_uint32_partial_array+0x240>
    7e84:	ldrb	ip, [r4, r1]
    7e88:	str	ip, [r4, r1, lsl #2]
    7e8c:	sub	r1, r1, #1
    7e90:	b	7e7c <coda_cursor_read_uint32_partial_array+0x228>
    7e94:	mov	r0, #0
    7e98:	b	7eb4 <coda_cursor_read_uint32_partial_array+0x260>
    7e9c:	mvn	r0, #99	; 0x63
    7ea0:	ldr	r1, [pc, #60]	; 7ee4 <coda_cursor_read_uint32_partial_array+0x290>
    7ea4:	ldr	r2, [pc, #52]	; 7ee0 <coda_cursor_read_uint32_partial_array+0x28c>
    7ea8:	movw	r3, #4714	; 0x126a
    7eac:	bl	0 <coda_set_error>
    7eb0:	mvn	r0, #0
    7eb4:	ldr	r4, [sp, #16]
    7eb8:	ldr	r5, [sp, #20]
    7ebc:	ldr	r6, [sp, #24]
    7ec0:	ldr	r7, [sp, #28]
    7ec4:	ldr	r8, [sp, #32]
    7ec8:	ldr	lr, [sp, #8]
    7ecc:	add	sp, sp, #48	; 0x30
    7ed0:	bx	lr
    7ed4:	.word	0x0000037f
    7ed8:	.word	0x000002bc
    7edc:	.word	0x00000160
    7ee0:	.word	0x00000453
    7ee4:	.word	0x0000022b
    7ee8:	.word	0x000001fd
    7eec:	.word	0x00000000
    7ef0:	.word	0x0000005b

00007ef4 <coda_cursor_read_int64_partial_array>:
    7ef4:	mov	ip, sp
    7ef8:	sub	sp, sp, #48	; 0x30
    7efc:	str	ip, [sp, #4]
    7f00:	str	lr, [sp, #8]
    7f04:	str	r4, [sp, #16]
    7f08:	str	r5, [sp, #20]
    7f0c:	str	r6, [sp, #24]
    7f10:	str	r7, [sp, #28]
    7f14:	str	r8, [sp, #32]
    7f18:	mov	r4, r3
    7f1c:	mov	r6, r2
    7f20:	mov	r7, r1
    7f24:	mov	r5, r0
    7f28:	cmp	r5, #0
    7f2c:	beq	82a4 <coda_cursor_read_int64_partial_array+0x3b0>
    7f30:	ldr	r2, [r5, #4]
    7f34:	cmp	r2, #0
    7f38:	ble	82a4 <coda_cursor_read_int64_partial_array+0x3b0>
    7f3c:	lsl	ip, r2, #4
    7f40:	add	r0, r5, ip
    7f44:	sub	lr, r0, #4096	; 0x1000
    7f48:	ldr	r8, [lr, #4088]	; 0xff8
    7f4c:	cmp	r8, #0
    7f50:	beq	82a4 <coda_cursor_read_int64_partial_array+0x3b0>
    7f54:	cmp	r4, #0
    7f58:	bne	7f78 <coda_cursor_read_int64_partial_array+0x84>
    7f5c:	mvn	r0, #99	; 0x63
    7f60:	ldr	r1, [pc, #912]	; 82f8 <coda_cursor_read_int64_partial_array+0x404>
    7f64:	ldr	r2, [pc, #896]	; 82ec <coda_cursor_read_int64_partial_array+0x3f8>
    7f68:	movw	r3, #4832	; 0x12e0
    7f6c:	bl	0 <coda_set_error>
    7f70:	mvn	r0, #0
    7f74:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    7f78:	ldr	r2, [r8]
    7f7c:	cmp	r2, #100	; 0x64
    7f80:	blt	7f88 <coda_cursor_read_int64_partial_array+0x94>
    7f84:	ldr	r8, [r8, #4]
    7f88:	ldr	r0, [r8, #8]
    7f8c:	cmp	r0, #1
    7f90:	beq	7fb8 <coda_cursor_read_int64_partial_array+0xc4>
    7f94:	bl	0 <coda_type_get_class_name>
    7f98:	mvn	r2, #104	; 0x68
    7f9c:	ldr	r1, [pc, #832]	; 82e4 <coda_cursor_read_int64_partial_array+0x3f0>
    7fa0:	mov	r3, r0
    7fa4:	mov	r0, r2
    7fa8:	mov	r2, r3
    7fac:	bl	0 <coda_set_error>
    7fb0:	mvn	r0, #0
    7fb4:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    7fb8:	ldr	r3, [pc, #820]	; 82f4 <coda_cursor_read_int64_partial_array+0x400>
    7fbc:	ldr	r1, [r3]
    7fc0:	cmp	r1, #0
    7fc4:	beq	8040 <coda_cursor_read_int64_partial_array+0x14c>
    7fc8:	add	r1, sp, #44	; 0x2c
    7fcc:	mov	r0, r5
    7fd0:	bl	0 <coda_cursor_get_num_elements>
    7fd4:	cmp	r0, #0
    7fd8:	beq	7fe4 <coda_cursor_read_int64_partial_array+0xf0>
    7fdc:	mvn	r0, #0
    7fe0:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    7fe4:	cmp	r7, #0
    7fe8:	blt	8024 <coda_cursor_read_int64_partial_array+0x130>
    7fec:	ldr	r2, [sp, #44]	; 0x2c
    7ff0:	cmp	r7, r2
    7ff4:	bge	8024 <coda_cursor_read_int64_partial_array+0x130>
    7ff8:	add	r3, r7, r6
    7ffc:	cmp	r3, r2
    8000:	ble	8040 <coda_cursor_read_int64_partial_array+0x14c>
    8004:	mvn	r0, #106	; 0x6a
    8008:	ldr	r1, [pc, #728]	; 82e8 <coda_cursor_read_int64_partial_array+0x3f4>
    800c:	str	r2, [sp]
    8010:	mov	r3, r6
    8014:	mov	r2, r7
    8018:	bl	0 <coda_set_error>
    801c:	mvn	r0, #0
    8020:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    8024:	mvn	r0, #106	; 0x6a
    8028:	ldr	r1, [pc, #684]	; 82dc <coda_cursor_read_int64_partial_array+0x3e8>
    802c:	ldr	r3, [sp, #44]	; 0x2c
    8030:	mov	r2, r7
    8034:	bl	0 <coda_set_error>
    8038:	mvn	r0, #0
    803c:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    8040:	add	r1, sp, #40	; 0x28
    8044:	mov	r0, r8
    8048:	bl	854 <get_array_element_read_type>
    804c:	cmp	r0, #0
    8050:	beq	805c <coda_cursor_read_int64_partial_array+0x168>
    8054:	mvn	r0, #0
    8058:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    805c:	ldr	r0, [sp, #40]	; 0x28
    8060:	cmp	r0, #7
    8064:	bcs	8288 <coda_cursor_read_int64_partial_array+0x394>
    8068:	add	pc, pc, r0, lsl #2
    806c:	nop	{0}
    8070:	b	808c <coda_cursor_read_int64_partial_array+0x198>
    8074:	b	80d8 <coda_cursor_read_int64_partial_array+0x1e4>
    8078:	b	8124 <coda_cursor_read_int64_partial_array+0x230>
    807c:	b	8174 <coda_cursor_read_int64_partial_array+0x280>
    8080:	b	81c4 <coda_cursor_read_int64_partial_array+0x2d0>
    8084:	b	8210 <coda_cursor_read_int64_partial_array+0x31c>
    8088:	b	825c <coda_cursor_read_int64_partial_array+0x368>
    808c:	mov	r3, r4
    8090:	mov	r2, r6
    8094:	mov	r1, r7
    8098:	mov	r0, r5
    809c:	bl	2830 <read_int8_partial_array>
    80a0:	cmp	r0, #0
    80a4:	beq	80b0 <coda_cursor_read_int64_partial_array+0x1bc>
    80a8:	mvn	r0, #0
    80ac:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    80b0:	sub	r1, r6, #1
    80b4:	cmp	r1, #0
    80b8:	blt	8280 <coda_cursor_read_int64_partial_array+0x38c>
    80bc:	add	r0, r4, r1, lsl #3
    80c0:	ldrsb	r3, [r4, r1]
    80c4:	asr	ip, r3, #31
    80c8:	str	r3, [r0]
    80cc:	str	ip, [r0, #4]
    80d0:	sub	r1, r1, #1
    80d4:	b	80b4 <coda_cursor_read_int64_partial_array+0x1c0>
    80d8:	mov	r3, r4
    80dc:	mov	r2, r6
    80e0:	mov	r1, r7
    80e4:	mov	r0, r5
    80e8:	bl	2950 <read_uint8_partial_array>
    80ec:	cmp	r0, #0
    80f0:	beq	80fc <coda_cursor_read_int64_partial_array+0x208>
    80f4:	mvn	r0, #0
    80f8:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    80fc:	sub	r2, r6, #1
    8100:	cmp	r2, #0
    8104:	blt	8280 <coda_cursor_read_int64_partial_array+0x38c>
    8108:	add	r0, r4, r2, lsl #3
    810c:	mov	ip, #0
    8110:	ldrb	r3, [r4, r2]
    8114:	str	r3, [r0]
    8118:	str	ip, [r0, #4]
    811c:	sub	r2, r2, #1
    8120:	b	8100 <coda_cursor_read_int64_partial_array+0x20c>
    8124:	mov	r3, r4
    8128:	mov	r2, r6
    812c:	mov	r1, r7
    8130:	mov	r0, r5
    8134:	bl	2a58 <read_int16_partial_array>
    8138:	cmp	r0, #0
    813c:	beq	8148 <coda_cursor_read_int64_partial_array+0x254>
    8140:	mvn	r0, #0
    8144:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    8148:	sub	ip, r6, #1
    814c:	cmp	ip, #0
    8150:	blt	8280 <coda_cursor_read_int64_partial_array+0x38c>
    8154:	add	r3, r4, ip, lsl #3
    8158:	add	r0, r4, ip, lsl #1
    815c:	ldrsh	r1, [r0]
    8160:	asr	r2, r1, #31
    8164:	str	r1, [r3]
    8168:	str	r2, [r3, #4]
    816c:	sub	ip, ip, #1
    8170:	b	814c <coda_cursor_read_int64_partial_array+0x258>
    8174:	mov	r3, r4
    8178:	mov	r2, r6
    817c:	mov	r1, r7
    8180:	mov	r0, r5
    8184:	bl	2b78 <read_uint16_partial_array>
    8188:	cmp	r0, #0
    818c:	beq	8198 <coda_cursor_read_int64_partial_array+0x2a4>
    8190:	mvn	r0, #0
    8194:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    8198:	sub	r2, r6, #1
    819c:	cmp	r2, #0
    81a0:	blt	8280 <coda_cursor_read_int64_partial_array+0x38c>
    81a4:	add	ip, r4, r2, lsl #3
    81a8:	mov	r1, #0
    81ac:	add	r3, r4, r2, lsl #1
    81b0:	ldrh	r0, [r3]
    81b4:	str	r0, [ip]
    81b8:	str	r1, [ip, #4]
    81bc:	sub	r2, r2, #1
    81c0:	b	819c <coda_cursor_read_int64_partial_array+0x2a8>
    81c4:	mov	r3, r4
    81c8:	mov	r2, r6
    81cc:	mov	r1, r7
    81d0:	mov	r0, r5
    81d4:	bl	2c80 <read_int32_partial_array>
    81d8:	cmp	r0, #0
    81dc:	beq	81e8 <coda_cursor_read_int64_partial_array+0x2f4>
    81e0:	mvn	r0, #0
    81e4:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    81e8:	sub	r2, r6, #1
    81ec:	cmp	r2, #0
    81f0:	blt	8280 <coda_cursor_read_int64_partial_array+0x38c>
    81f4:	add	r3, r4, r2, lsl #3
    81f8:	ldr	r0, [r4, r2, lsl #2]
    81fc:	asr	r1, r0, #31
    8200:	str	r0, [r3]
    8204:	str	r1, [r3, #4]
    8208:	sub	r2, r2, #1
    820c:	b	81ec <coda_cursor_read_int64_partial_array+0x2f8>
    8210:	mov	r3, r4
    8214:	mov	r2, r6
    8218:	mov	r1, r7
    821c:	mov	r0, r5
    8220:	bl	2da0 <read_uint32_partial_array>
    8224:	cmp	r0, #0
    8228:	beq	8234 <coda_cursor_read_int64_partial_array+0x340>
    822c:	mvn	r0, #0
    8230:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    8234:	sub	r0, r6, #1
    8238:	cmp	r0, #0
    823c:	blt	8280 <coda_cursor_read_int64_partial_array+0x38c>
    8240:	add	r2, r4, r0, lsl #3
    8244:	mov	ip, #0
    8248:	ldr	r3, [r4, r0, lsl #2]
    824c:	str	r3, [r2]
    8250:	str	ip, [r2, #4]
    8254:	sub	r0, r0, #1
    8258:	b	8238 <coda_cursor_read_int64_partial_array+0x344>
    825c:	mov	r3, r4
    8260:	mov	r2, r6
    8264:	mov	r1, r7
    8268:	mov	r0, r5
    826c:	bl	2ea8 <read_int64_partial_array>
    8270:	cmp	r0, #0
    8274:	beq	8280 <coda_cursor_read_int64_partial_array+0x38c>
    8278:	mvn	r0, #0
    827c:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    8280:	mov	r0, #0
    8284:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    8288:	bl	0 <coda_type_get_native_type_name>
    828c:	mov	r2, r0
    8290:	mvn	r0, #104	; 0x68
    8294:	ldr	r1, [pc, #68]	; 82e0 <coda_cursor_read_int64_partial_array+0x3ec>
    8298:	bl	0 <coda_set_error>
    829c:	mvn	r0, #0
    82a0:	b	82bc <coda_cursor_read_int64_partial_array+0x3c8>
    82a4:	mvn	r0, #99	; 0x63
    82a8:	ldr	r1, [pc, #64]	; 82f0 <coda_cursor_read_int64_partial_array+0x3fc>
    82ac:	ldr	r2, [pc, #56]	; 82ec <coda_cursor_read_int64_partial_array+0x3f8>
    82b0:	movw	r3, #4827	; 0x12db
    82b4:	bl	0 <coda_set_error>
    82b8:	mvn	r0, #0
    82bc:	ldr	r4, [sp, #16]
    82c0:	ldr	r5, [sp, #20]
    82c4:	ldr	r6, [sp, #24]
    82c8:	ldr	r7, [sp, #28]
    82cc:	ldr	r8, [sp, #32]
    82d0:	ldr	lr, [sp, #8]
    82d4:	add	sp, sp, #48	; 0x30
    82d8:	bx	lr
    82dc:	.word	0x0000037f
    82e0:	.word	0x00000106
    82e4:	.word	0x000002bc
    82e8:	.word	0x00000160
    82ec:	.word	0x00000453
    82f0:	.word	0x0000022b
    82f4:	.word	0x00000000
    82f8:	.word	0x0000005b

000082fc <coda_cursor_read_uint64_partial_array>:
    82fc:	mov	ip, sp
    8300:	sub	sp, sp, #48	; 0x30
    8304:	str	ip, [sp, #4]
    8308:	str	lr, [sp, #8]
    830c:	str	r4, [sp, #16]
    8310:	str	r5, [sp, #20]
    8314:	str	r6, [sp, #24]
    8318:	str	r7, [sp, #28]
    831c:	str	r8, [sp, #32]
    8320:	mov	r8, r3
    8324:	mov	r7, r2
    8328:	mov	r6, r1
    832c:	mov	r4, r0
    8330:	cmp	r4, #0
    8334:	beq	85c4 <coda_cursor_read_uint64_partial_array+0x2c8>
    8338:	ldr	r1, [r4, #4]
    833c:	cmp	r1, #0
    8340:	ble	85c4 <coda_cursor_read_uint64_partial_array+0x2c8>
    8344:	lsl	ip, r1, #4
    8348:	add	r1, r4, ip
    834c:	sub	lr, r1, #4096	; 0x1000
    8350:	ldr	r5, [lr, #4088]	; 0xff8
    8354:	cmp	r5, #0
    8358:	beq	85c4 <coda_cursor_read_uint64_partial_array+0x2c8>
    835c:	cmp	r8, #0
    8360:	bne	8380 <coda_cursor_read_uint64_partial_array+0x84>
    8364:	mvn	r0, #99	; 0x63
    8368:	ldr	r1, [pc, #680]	; 8618 <coda_cursor_read_uint64_partial_array+0x31c>
    836c:	ldr	r2, [pc, #664]	; 860c <coda_cursor_read_uint64_partial_array+0x310>
    8370:	movw	r3, #4983	; 0x1377
    8374:	bl	0 <coda_set_error>
    8378:	mvn	r0, #0
    837c:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    8380:	ldr	r0, [r5]
    8384:	cmp	r0, #100	; 0x64
    8388:	blt	8390 <coda_cursor_read_uint64_partial_array+0x94>
    838c:	ldr	r5, [r5, #4]
    8390:	ldr	r0, [r5, #8]
    8394:	cmp	r0, #1
    8398:	beq	83c0 <coda_cursor_read_uint64_partial_array+0xc4>
    839c:	bl	0 <coda_type_get_class_name>
    83a0:	mvn	r2, #104	; 0x68
    83a4:	ldr	r1, [pc, #600]	; 8604 <coda_cursor_read_uint64_partial_array+0x308>
    83a8:	mov	ip, r0
    83ac:	mov	r0, r2
    83b0:	mov	r2, ip
    83b4:	bl	0 <coda_set_error>
    83b8:	mvn	r0, #0
    83bc:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    83c0:	ldr	r0, [pc, #588]	; 8614 <coda_cursor_read_uint64_partial_array+0x318>
    83c4:	ldr	r0, [r0]
    83c8:	cmp	r0, #0
    83cc:	beq	8448 <coda_cursor_read_uint64_partial_array+0x14c>
    83d0:	add	r1, sp, #44	; 0x2c
    83d4:	mov	r0, r4
    83d8:	bl	0 <coda_cursor_get_num_elements>
    83dc:	cmp	r0, #0
    83e0:	beq	83ec <coda_cursor_read_uint64_partial_array+0xf0>
    83e4:	mvn	r0, #0
    83e8:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    83ec:	cmp	r6, #0
    83f0:	blt	842c <coda_cursor_read_uint64_partial_array+0x130>
    83f4:	ldr	r2, [sp, #44]	; 0x2c
    83f8:	cmp	r6, r2
    83fc:	bge	842c <coda_cursor_read_uint64_partial_array+0x130>
    8400:	add	r1, r6, r7
    8404:	cmp	r1, r2
    8408:	ble	8448 <coda_cursor_read_uint64_partial_array+0x14c>
    840c:	mvn	r0, #106	; 0x6a
    8410:	ldr	r1, [pc, #496]	; 8608 <coda_cursor_read_uint64_partial_array+0x30c>
    8414:	str	r2, [sp]
    8418:	mov	r3, r7
    841c:	mov	r2, r6
    8420:	bl	0 <coda_set_error>
    8424:	mvn	r0, #0
    8428:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    842c:	mvn	r0, #106	; 0x6a
    8430:	ldr	r1, [pc, #452]	; 85fc <coda_cursor_read_uint64_partial_array+0x300>
    8434:	ldr	r3, [sp, #44]	; 0x2c
    8438:	mov	r2, r6
    843c:	bl	0 <coda_set_error>
    8440:	mvn	r0, #0
    8444:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    8448:	add	r1, sp, #40	; 0x28
    844c:	mov	r0, r5
    8450:	bl	854 <get_array_element_read_type>
    8454:	cmp	r0, #0
    8458:	beq	8464 <coda_cursor_read_uint64_partial_array+0x168>
    845c:	mvn	r0, #0
    8460:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    8464:	ldr	ip, [sp, #40]	; 0x28
    8468:	cmp	ip, #5
    846c:	bcs	851c <coda_cursor_read_uint64_partial_array+0x220>
    8470:	cmp	ip, #1
    8474:	beq	84d0 <coda_cursor_read_uint64_partial_array+0x1d4>
    8478:	cmp	ip, #3
    847c:	bne	8550 <coda_cursor_read_uint64_partial_array+0x254>
    8480:	mov	r3, r8
    8484:	mov	r2, r7
    8488:	mov	r1, r6
    848c:	mov	r0, r4
    8490:	bl	2b78 <read_uint16_partial_array>
    8494:	cmp	r0, #0
    8498:	beq	84a4 <coda_cursor_read_uint64_partial_array+0x1a8>
    849c:	mvn	r0, #0
    84a0:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    84a4:	sub	ip, r7, #1
    84a8:	cmp	ip, #0
    84ac:	blt	85bc <coda_cursor_read_uint64_partial_array+0x2c0>
    84b0:	add	r1, r8, ip, lsl #3
    84b4:	mov	r3, #0
    84b8:	add	r0, r8, ip, lsl #1
    84bc:	ldrh	r2, [r0]
    84c0:	str	r2, [r1]
    84c4:	str	r3, [r1, #4]
    84c8:	sub	ip, ip, #1
    84cc:	b	84a8 <coda_cursor_read_uint64_partial_array+0x1ac>
    84d0:	mov	r3, r8
    84d4:	mov	r2, r7
    84d8:	mov	r1, r6
    84dc:	mov	r0, r4
    84e0:	bl	2950 <read_uint8_partial_array>
    84e4:	cmp	r0, #0
    84e8:	beq	84f4 <coda_cursor_read_uint64_partial_array+0x1f8>
    84ec:	mvn	r0, #0
    84f0:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    84f4:	sub	r0, r7, #1
    84f8:	cmp	r0, #0
    84fc:	blt	85bc <coda_cursor_read_uint64_partial_array+0x2c0>
    8500:	add	ip, r8, r0, lsl #3
    8504:	mov	r3, #0
    8508:	ldrb	r2, [r8, r0]
    850c:	str	r2, [ip]
    8510:	str	r3, [ip, #4]
    8514:	sub	r0, r0, #1
    8518:	b	84f8 <coda_cursor_read_uint64_partial_array+0x1fc>
    851c:	cmp	ip, #5
    8520:	beq	8570 <coda_cursor_read_uint64_partial_array+0x274>
    8524:	cmp	ip, #7
    8528:	bne	8550 <coda_cursor_read_uint64_partial_array+0x254>
    852c:	mov	r3, r8
    8530:	mov	r2, r7
    8534:	mov	r1, r6
    8538:	mov	r0, r4
    853c:	bl	2fb0 <read_uint64_partial_array>
    8540:	cmp	r0, #0
    8544:	beq	85bc <coda_cursor_read_uint64_partial_array+0x2c0>
    8548:	mvn	r0, #0
    854c:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    8550:	ldr	r0, [sp, #40]	; 0x28
    8554:	bl	0 <coda_type_get_native_type_name>
    8558:	mov	r2, r0
    855c:	mvn	r0, #104	; 0x68
    8560:	ldr	r1, [pc, #152]	; 8600 <coda_cursor_read_uint64_partial_array+0x304>
    8564:	bl	0 <coda_set_error>
    8568:	mvn	r0, #0
    856c:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    8570:	mov	r3, r8
    8574:	mov	r2, r7
    8578:	mov	r1, r6
    857c:	mov	r0, r4
    8580:	bl	2da0 <read_uint32_partial_array>
    8584:	cmp	r0, #0
    8588:	beq	8594 <coda_cursor_read_uint64_partial_array+0x298>
    858c:	mvn	r0, #0
    8590:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    8594:	sub	r1, r7, #1
    8598:	cmp	r1, #0
    859c:	blt	85bc <coda_cursor_read_uint64_partial_array+0x2c0>
    85a0:	add	r2, r8, r1, lsl #3
    85a4:	mov	r0, #0
    85a8:	ldr	ip, [r8, r1, lsl #2]
    85ac:	str	ip, [r2]
    85b0:	str	r0, [r2, #4]
    85b4:	sub	r1, r1, #1
    85b8:	b	8598 <coda_cursor_read_uint64_partial_array+0x29c>
    85bc:	mov	r0, #0
    85c0:	b	85dc <coda_cursor_read_uint64_partial_array+0x2e0>
    85c4:	mvn	r0, #99	; 0x63
    85c8:	ldr	r1, [pc, #64]	; 8610 <coda_cursor_read_uint64_partial_array+0x314>
    85cc:	ldr	r2, [pc, #56]	; 860c <coda_cursor_read_uint64_partial_array+0x310>
    85d0:	movw	r3, #4978	; 0x1372
    85d4:	bl	0 <coda_set_error>
    85d8:	mvn	r0, #0
    85dc:	ldr	r4, [sp, #16]
    85e0:	ldr	r5, [sp, #20]
    85e4:	ldr	r6, [sp, #24]
    85e8:	ldr	r7, [sp, #28]
    85ec:	ldr	r8, [sp, #32]
    85f0:	ldr	lr, [sp, #8]
    85f4:	add	sp, sp, #48	; 0x30
    85f8:	bx	lr
    85fc:	.word	0x0000037f
    8600:	.word	0x000000a5
    8604:	.word	0x000002bc
    8608:	.word	0x00000160
    860c:	.word	0x00000453
    8610:	.word	0x0000022b
    8614:	.word	0x00000000
    8618:	.word	0x0000005b

0000861c <coda_cursor_read_float_partial_array>:
    861c:	mov	ip, sp
    8620:	sub	sp, sp, #56	; 0x38
    8624:	str	ip, [sp, #4]
    8628:	str	lr, [sp, #8]
    862c:	str	r4, [sp, #16]
    8630:	str	r5, [sp, #20]
    8634:	str	r6, [sp, #24]
    8638:	str	r7, [sp, #28]
    863c:	str	r8, [sp, #32]
    8640:	mov	r5, r3
    8644:	mov	r6, r2
    8648:	mov	r7, r1
    864c:	mov	r8, r0
    8650:	cmp	r8, #0
    8654:	beq	8c20 <coda_cursor_read_float_partial_array+0x604>
    8658:	ldr	r2, [r8, #4]
    865c:	cmp	r2, #0
    8660:	ble	8c20 <coda_cursor_read_float_partial_array+0x604>
    8664:	lsl	r1, r2, #4
    8668:	add	ip, r8, r1
    866c:	sub	lr, ip, #4096	; 0x1000
    8670:	ldr	r4, [lr, #4088]	; 0xff8
    8674:	cmp	r4, #0
    8678:	beq	8c20 <coda_cursor_read_float_partial_array+0x604>
    867c:	cmp	r5, #0
    8680:	bne	86a0 <coda_cursor_read_float_partial_array+0x84>
    8684:	mvn	r0, #99	; 0x63
    8688:	ldr	r1, [pc, #1512]	; 8c78 <coda_cursor_read_float_partial_array+0x65c>
    868c:	ldr	r2, [pc, #1492]	; 8c68 <coda_cursor_read_float_partial_array+0x64c>
    8690:	movw	r3, #5110	; 0x13f6
    8694:	bl	0 <coda_set_error>
    8698:	mvn	r0, #0
    869c:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    86a0:	ldr	r0, [r4]
    86a4:	cmp	r0, #100	; 0x64
    86a8:	blt	86b0 <coda_cursor_read_float_partial_array+0x94>
    86ac:	ldr	r4, [r4, #4]
    86b0:	ldr	r0, [r4, #8]
    86b4:	cmp	r0, #1
    86b8:	beq	86e0 <coda_cursor_read_float_partial_array+0xc4>
    86bc:	bl	0 <coda_type_get_class_name>
    86c0:	mvn	r2, #104	; 0x68
    86c4:	ldr	r1, [pc, #1424]	; 8c5c <coda_cursor_read_float_partial_array+0x640>
    86c8:	mov	r3, r0
    86cc:	mov	r0, r2
    86d0:	mov	r2, r3
    86d4:	bl	0 <coda_set_error>
    86d8:	mvn	r0, #0
    86dc:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    86e0:	ldr	r1, [pc, #1416]	; 8c70 <coda_cursor_read_float_partial_array+0x654>
    86e4:	ldr	r0, [r1]
    86e8:	cmp	r0, #0
    86ec:	beq	8768 <coda_cursor_read_float_partial_array+0x14c>
    86f0:	add	r1, sp, #40	; 0x28
    86f4:	mov	r0, r8
    86f8:	bl	0 <coda_cursor_get_num_elements>
    86fc:	cmp	r0, #0
    8700:	beq	870c <coda_cursor_read_float_partial_array+0xf0>
    8704:	mvn	r0, #0
    8708:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    870c:	cmp	r7, #0
    8710:	blt	874c <coda_cursor_read_float_partial_array+0x130>
    8714:	ldr	r2, [sp, #40]	; 0x28
    8718:	cmp	r7, r2
    871c:	bge	874c <coda_cursor_read_float_partial_array+0x130>
    8720:	add	r3, r7, r6
    8724:	cmp	r3, r2
    8728:	ble	8768 <coda_cursor_read_float_partial_array+0x14c>
    872c:	mvn	r0, #106	; 0x6a
    8730:	ldr	r1, [pc, #1320]	; 8c60 <coda_cursor_read_float_partial_array+0x644>
    8734:	str	r2, [sp]
    8738:	mov	r3, r6
    873c:	mov	r2, r7
    8740:	bl	0 <coda_set_error>
    8744:	mvn	r0, #0
    8748:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    874c:	mvn	r0, #106	; 0x6a
    8750:	ldr	r1, [pc, #1280]	; 8c58 <coda_cursor_read_float_partial_array+0x63c>
    8754:	ldr	r3, [sp, #40]	; 0x28
    8758:	mov	r2, r7
    875c:	bl	0 <coda_set_error>
    8760:	mvn	r0, #0
    8764:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8768:	add	r1, sp, #44	; 0x2c
    876c:	add	r2, sp, #48	; 0x30
    8770:	mov	r0, r4
    8774:	bl	8c0 <get_array_element_unconverted_read_type>
    8778:	cmp	r0, #0
    877c:	beq	8788 <coda_cursor_read_float_partial_array+0x16c>
    8780:	mvn	r0, #0
    8784:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8788:	ldr	r3, [sp, #48]	; 0x30
    878c:	cmp	r3, #0
    8790:	beq	8824 <coda_cursor_read_float_partial_array+0x208>
    8794:	lsl	r0, r6, #3
    8798:	bl	0 <malloc>
    879c:	mov	r4, r0
    87a0:	cmp	r4, #0
    87a4:	bne	87c0 <coda_cursor_read_float_partial_array+0x1a4>
    87a8:	mvn	r0, #0
    87ac:	ldr	r1, [pc, #1200]	; 8c64 <coda_cursor_read_float_partial_array+0x648>
    87b0:	lsl	r2, r6, #3
    87b4:	bl	0 <coda_set_error>
    87b8:	mvn	r0, #0
    87bc:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    87c0:	mov	r3, r4
    87c4:	mov	r2, r6
    87c8:	mov	r1, r7
    87cc:	mov	r0, r8
    87d0:	bl	8c7c <coda_cursor_read_double_partial_array>
    87d4:	cmp	r0, #0
    87d8:	beq	87ec <coda_cursor_read_float_partial_array+0x1d0>
    87dc:	mov	r0, r4
    87e0:	bl	0 <free>
    87e4:	mvn	r0, #0
    87e8:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    87ec:	sub	r0, r6, #1
    87f0:	cmp	r0, #0
    87f4:	blt	8814 <coda_cursor_read_float_partial_array+0x1f8>
    87f8:	add	ip, r5, r0, lsl #2
    87fc:	add	r3, r4, r0, lsl #3
    8800:	vldr	d5, [r3]
    8804:	vcvt.f32.f64	s0, d5
    8808:	vstr	s0, [ip]
    880c:	sub	r0, r0, #1
    8810:	b	87f0 <coda_cursor_read_float_partial_array+0x1d4>
    8814:	mov	r0, r4
    8818:	bl	0 <free>
    881c:	mov	r0, #0
    8820:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8824:	ldr	r0, [sp, #44]	; 0x2c
    8828:	cmp	r0, #10
    882c:	bcs	8c04 <coda_cursor_read_float_partial_array+0x5e8>
    8830:	add	pc, pc, r0, lsl #2
    8834:	nop	{0}
    8838:	b	8860 <coda_cursor_read_float_partial_array+0x244>
    883c:	b	88ac <coda_cursor_read_float_partial_array+0x290>
    8840:	b	88f8 <coda_cursor_read_float_partial_array+0x2dc>
    8844:	b	8948 <coda_cursor_read_float_partial_array+0x32c>
    8848:	b	8998 <coda_cursor_read_float_partial_array+0x37c>
    884c:	b	89e4 <coda_cursor_read_float_partial_array+0x3c8>
    8850:	b	8a30 <coda_cursor_read_float_partial_array+0x414>
    8854:	b	8ac0 <coda_cursor_read_float_partial_array+0x4a4>
    8858:	b	8b50 <coda_cursor_read_float_partial_array+0x534>
    885c:	b	8b74 <coda_cursor_read_float_partial_array+0x558>
    8860:	mov	r3, r5
    8864:	mov	r2, r6
    8868:	mov	r1, r7
    886c:	mov	r0, r8
    8870:	bl	2830 <read_int8_partial_array>
    8874:	cmp	r0, #0
    8878:	beq	8884 <coda_cursor_read_float_partial_array+0x268>
    887c:	mvn	r0, #0
    8880:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8884:	sub	r3, r6, #1
    8888:	cmp	r3, #0
    888c:	blt	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    8890:	add	r2, r5, r3, lsl #2
    8894:	ldrsb	r1, [r5, r3]
    8898:	vmov	s14, r1
    889c:	vcvt.f32.s32	s14, s14
    88a0:	vstr	s14, [r2]
    88a4:	sub	r3, r3, #1
    88a8:	b	8888 <coda_cursor_read_float_partial_array+0x26c>
    88ac:	mov	r3, r5
    88b0:	mov	r2, r6
    88b4:	mov	r1, r7
    88b8:	mov	r0, r8
    88bc:	bl	2950 <read_uint8_partial_array>
    88c0:	cmp	r0, #0
    88c4:	beq	88d0 <coda_cursor_read_float_partial_array+0x2b4>
    88c8:	mvn	r0, #0
    88cc:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    88d0:	sub	r0, r6, #1
    88d4:	cmp	r0, #0
    88d8:	blt	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    88dc:	add	r2, r5, r0, lsl #2
    88e0:	ldrb	r1, [r5, r0]
    88e4:	vmov	s14, r1
    88e8:	vcvt.f32.u32	s14, s14
    88ec:	vstr	s14, [r2]
    88f0:	sub	r0, r0, #1
    88f4:	b	88d4 <coda_cursor_read_float_partial_array+0x2b8>
    88f8:	mov	r3, r5
    88fc:	mov	r2, r6
    8900:	mov	r1, r7
    8904:	mov	r0, r8
    8908:	bl	2a58 <read_int16_partial_array>
    890c:	cmp	r0, #0
    8910:	beq	891c <coda_cursor_read_float_partial_array+0x300>
    8914:	mvn	r0, #0
    8918:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    891c:	sub	r3, r6, #1
    8920:	cmp	r3, #0
    8924:	blt	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    8928:	add	ip, r5, r3, lsl #2
    892c:	add	r1, r5, r3, lsl #1
    8930:	ldrsh	r0, [r1]
    8934:	vmov	s8, r0
    8938:	vcvt.f32.s32	s8, s8
    893c:	vstr	s8, [ip]
    8940:	sub	r3, r3, #1
    8944:	b	8920 <coda_cursor_read_float_partial_array+0x304>
    8948:	mov	r3, r5
    894c:	mov	r2, r6
    8950:	mov	r1, r7
    8954:	mov	r0, r8
    8958:	bl	2b78 <read_uint16_partial_array>
    895c:	cmp	r0, #0
    8960:	beq	896c <coda_cursor_read_float_partial_array+0x350>
    8964:	mvn	r0, #0
    8968:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    896c:	sub	r0, r6, #1
    8970:	cmp	r0, #0
    8974:	blt	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    8978:	add	r3, r5, r0, lsl #2
    897c:	add	ip, r5, r0, lsl #1
    8980:	ldrh	r1, [ip]
    8984:	vmov	s0, r1
    8988:	vcvt.f32.u32	s0, s0
    898c:	vstr	s0, [r3]
    8990:	sub	r0, r0, #1
    8994:	b	8970 <coda_cursor_read_float_partial_array+0x354>
    8998:	mov	r3, r5
    899c:	mov	r2, r6
    89a0:	mov	r1, r7
    89a4:	mov	r0, r8
    89a8:	bl	2c80 <read_int32_partial_array>
    89ac:	cmp	r0, #0
    89b0:	beq	89bc <coda_cursor_read_float_partial_array+0x3a0>
    89b4:	mvn	r0, #0
    89b8:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    89bc:	sub	r3, r6, #1
    89c0:	cmp	r3, #0
    89c4:	blt	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    89c8:	add	r1, r5, r3, lsl #2
    89cc:	ldr	ip, [r5, r3, lsl #2]
    89d0:	vmov	s14, ip
    89d4:	vcvt.f32.s32	s14, s14
    89d8:	vstr	s14, [r1]
    89dc:	sub	r3, r3, #1
    89e0:	b	89c0 <coda_cursor_read_float_partial_array+0x3a4>
    89e4:	mov	r3, r5
    89e8:	mov	r2, r6
    89ec:	mov	r1, r7
    89f0:	mov	r0, r8
    89f4:	bl	2da0 <read_uint32_partial_array>
    89f8:	cmp	r0, #0
    89fc:	beq	8a08 <coda_cursor_read_float_partial_array+0x3ec>
    8a00:	mvn	r0, #0
    8a04:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8a08:	sub	ip, r6, #1
    8a0c:	cmp	ip, #0
    8a10:	blt	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    8a14:	add	r3, r5, ip, lsl #2
    8a18:	ldr	r1, [r5, ip, lsl #2]
    8a1c:	vmov	s8, r1
    8a20:	vcvt.f32.u32	s8, s8
    8a24:	vstr	s8, [r3]
    8a28:	sub	ip, ip, #1
    8a2c:	b	8a0c <coda_cursor_read_float_partial_array+0x3f0>
    8a30:	lsl	r0, r6, #3
    8a34:	bl	0 <malloc>
    8a38:	mov	r4, r0
    8a3c:	cmp	r4, #0
    8a40:	bne	8a5c <coda_cursor_read_float_partial_array+0x440>
    8a44:	mvn	r0, #0
    8a48:	ldr	r1, [pc, #532]	; 8c64 <coda_cursor_read_float_partial_array+0x648>
    8a4c:	lsl	r2, r6, #3
    8a50:	bl	0 <coda_set_error>
    8a54:	mvn	r0, #0
    8a58:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8a5c:	mov	r3, r4
    8a60:	mov	r2, r6
    8a64:	mov	r1, r7
    8a68:	mov	r0, r8
    8a6c:	bl	2ea8 <read_int64_partial_array>
    8a70:	cmp	r0, #0
    8a74:	beq	8a88 <coda_cursor_read_float_partial_array+0x46c>
    8a78:	mov	r0, r4
    8a7c:	bl	0 <free>
    8a80:	mvn	r0, #0
    8a84:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8a88:	sub	r7, r6, #1
    8a8c:	cmp	r7, #0
    8a90:	blt	8ab4 <coda_cursor_read_float_partial_array+0x498>
    8a94:	add	r6, r5, r7, lsl #2
    8a98:	add	r1, r4, r7, lsl #3
    8a9c:	ldr	r0, [r1]
    8aa0:	ldr	r1, [r1, #4]
    8aa4:	bl	0 <__compcert_i64_stof>
    8aa8:	vstr	s0, [r6]
    8aac:	sub	r7, r7, #1
    8ab0:	b	8a8c <coda_cursor_read_float_partial_array+0x470>
    8ab4:	mov	r0, r4
    8ab8:	bl	0 <free>
    8abc:	b	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    8ac0:	lsl	r0, r6, #3
    8ac4:	bl	0 <malloc>
    8ac8:	mov	r4, r0
    8acc:	cmp	r4, #0
    8ad0:	bne	8aec <coda_cursor_read_float_partial_array+0x4d0>
    8ad4:	mvn	r0, #0
    8ad8:	ldr	r1, [pc, #388]	; 8c64 <coda_cursor_read_float_partial_array+0x648>
    8adc:	lsl	r2, r6, #3
    8ae0:	bl	0 <coda_set_error>
    8ae4:	mvn	r0, #0
    8ae8:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8aec:	mov	r3, r4
    8af0:	mov	r2, r6
    8af4:	mov	r1, r7
    8af8:	mov	r0, r8
    8afc:	bl	2fb0 <read_uint64_partial_array>
    8b00:	cmp	r0, #0
    8b04:	beq	8b18 <coda_cursor_read_float_partial_array+0x4fc>
    8b08:	mov	r0, r4
    8b0c:	bl	0 <free>
    8b10:	mvn	r0, #0
    8b14:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8b18:	sub	r6, r6, #1
    8b1c:	cmp	r6, #0
    8b20:	blt	8b44 <coda_cursor_read_float_partial_array+0x528>
    8b24:	add	r7, r5, r6, lsl #2
    8b28:	add	r1, r4, r6, lsl #3
    8b2c:	ldr	r0, [r1]
    8b30:	ldr	r1, [r1, #4]
    8b34:	bl	0 <__compcert_i64_utof>
    8b38:	vstr	s0, [r7]
    8b3c:	sub	r6, r6, #1
    8b40:	b	8b1c <coda_cursor_read_float_partial_array+0x500>
    8b44:	mov	r0, r4
    8b48:	bl	0 <free>
    8b4c:	b	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    8b50:	mov	r3, r5
    8b54:	mov	r2, r6
    8b58:	mov	r1, r7
    8b5c:	mov	r0, r8
    8b60:	bl	30a8 <read_float_partial_array>
    8b64:	cmp	r0, #0
    8b68:	beq	8bfc <coda_cursor_read_float_partial_array+0x5e0>
    8b6c:	mvn	r0, #0
    8b70:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8b74:	lsl	r0, r6, #3
    8b78:	bl	0 <malloc>
    8b7c:	mov	r4, r0
    8b80:	cmp	r4, #0
    8b84:	bne	8ba0 <coda_cursor_read_float_partial_array+0x584>
    8b88:	mvn	r0, #0
    8b8c:	ldr	r1, [pc, #208]	; 8c64 <coda_cursor_read_float_partial_array+0x648>
    8b90:	lsl	r2, r6, #3
    8b94:	bl	0 <coda_set_error>
    8b98:	mvn	r0, #0
    8b9c:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8ba0:	mov	r3, r4
    8ba4:	mov	r2, r6
    8ba8:	mov	r1, r7
    8bac:	mov	r0, r8
    8bb0:	bl	31e0 <read_double_partial_array>
    8bb4:	cmp	r0, #0
    8bb8:	beq	8bcc <coda_cursor_read_float_partial_array+0x5b0>
    8bbc:	mov	r0, r4
    8bc0:	bl	0 <free>
    8bc4:	mvn	r0, #0
    8bc8:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8bcc:	sub	ip, r6, #1
    8bd0:	cmp	ip, #0
    8bd4:	blt	8bf4 <coda_cursor_read_float_partial_array+0x5d8>
    8bd8:	add	r3, r5, ip, lsl #2
    8bdc:	add	r1, r4, ip, lsl #3
    8be0:	vldr	d5, [r1]
    8be4:	vcvt.f32.f64	s2, d5
    8be8:	vstr	s2, [r3]
    8bec:	sub	ip, ip, #1
    8bf0:	b	8bd0 <coda_cursor_read_float_partial_array+0x5b4>
    8bf4:	mov	r0, r4
    8bf8:	bl	0 <free>
    8bfc:	mov	r0, #0
    8c00:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8c04:	bl	0 <coda_type_get_native_type_name>
    8c08:	mov	r2, r0
    8c0c:	mvn	r0, #104	; 0x68
    8c10:	ldr	r1, [pc, #92]	; 8c74 <coda_cursor_read_float_partial_array+0x658>
    8c14:	bl	0 <coda_set_error>
    8c18:	mvn	r0, #0
    8c1c:	b	8c38 <coda_cursor_read_float_partial_array+0x61c>
    8c20:	mvn	r0, #99	; 0x63
    8c24:	ldr	r1, [pc, #64]	; 8c6c <coda_cursor_read_float_partial_array+0x650>
    8c28:	ldr	r2, [pc, #56]	; 8c68 <coda_cursor_read_float_partial_array+0x64c>
    8c2c:	movw	r3, #5105	; 0x13f1
    8c30:	bl	0 <coda_set_error>
    8c34:	mvn	r0, #0
    8c38:	ldr	r4, [sp, #16]
    8c3c:	ldr	r5, [sp, #20]
    8c40:	ldr	r6, [sp, #24]
    8c44:	ldr	r7, [sp, #28]
    8c48:	ldr	r8, [sp, #32]
    8c4c:	ldr	lr, [sp, #8]
    8c50:	add	sp, sp, #56	; 0x38
    8c54:	bx	lr
    8c58:	.word	0x0000037f
    8c5c:	.word	0x000002bc
    8c60:	.word	0x00000160
    8c64:	.word	0x00000426
    8c68:	.word	0x00000453
    8c6c:	.word	0x0000022b
    8c70:	.word	0x00000000
    8c74:	.word	0x0000026f
    8c78:	.word	0x0000005b

00008c7c <coda_cursor_read_double_partial_array>:
    8c7c:	mov	ip, sp
    8c80:	sub	sp, sp, #56	; 0x38
    8c84:	str	ip, [sp, #4]
    8c88:	str	lr, [sp, #8]
    8c8c:	str	r4, [sp, #16]
    8c90:	str	r5, [sp, #20]
    8c94:	str	r6, [sp, #24]
    8c98:	str	r7, [sp, #28]
    8c9c:	str	r8, [sp, #32]
    8ca0:	mov	r5, r3
    8ca4:	mov	r6, r2
    8ca8:	mov	r4, r1
    8cac:	mov	r7, r0
    8cb0:	cmp	r7, #0
    8cb4:	beq	9188 <coda_cursor_read_double_partial_array+0x50c>
    8cb8:	ldr	ip, [r7, #4]
    8cbc:	cmp	ip, #0
    8cc0:	ble	9188 <coda_cursor_read_double_partial_array+0x50c>
    8cc4:	lsl	r3, ip, #4
    8cc8:	add	r2, r7, r3
    8ccc:	sub	lr, r2, #4096	; 0x1000
    8cd0:	ldr	r8, [lr, #4088]	; 0xff8
    8cd4:	cmp	r8, #0
    8cd8:	beq	9188 <coda_cursor_read_double_partial_array+0x50c>
    8cdc:	cmp	r5, #0
    8ce0:	bne	8d00 <coda_cursor_read_double_partial_array+0x84>
    8ce4:	mvn	r0, #99	; 0x63
    8ce8:	ldr	r1, [pc, #1260]	; 91dc <coda_cursor_read_double_partial_array+0x560>
    8cec:	ldr	r2, [pc, #1244]	; 91d0 <coda_cursor_read_double_partial_array+0x554>
    8cf0:	movw	r3, #5360	; 0x14f0
    8cf4:	bl	0 <coda_set_error>
    8cf8:	mvn	r0, #0
    8cfc:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8d00:	ldr	r1, [r8]
    8d04:	cmp	r1, #100	; 0x64
    8d08:	blt	8d10 <coda_cursor_read_double_partial_array+0x94>
    8d0c:	ldr	r8, [r8, #4]
    8d10:	ldr	r0, [r8, #8]
    8d14:	cmp	r0, #1
    8d18:	beq	8d40 <coda_cursor_read_double_partial_array+0xc4>
    8d1c:	bl	0 <coda_type_get_class_name>
    8d20:	mvn	r2, #104	; 0x68
    8d24:	ldr	r1, [pc, #1180]	; 91c8 <coda_cursor_read_double_partial_array+0x54c>
    8d28:	mov	r3, r0
    8d2c:	mov	r0, r2
    8d30:	mov	r2, r3
    8d34:	bl	0 <coda_set_error>
    8d38:	mvn	r0, #0
    8d3c:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8d40:	ldr	r0, [pc, #1168]	; 91d8 <coda_cursor_read_double_partial_array+0x55c>
    8d44:	ldr	r3, [r0]
    8d48:	cmp	r3, #0
    8d4c:	beq	8dc8 <coda_cursor_read_double_partial_array+0x14c>
    8d50:	add	r1, sp, #40	; 0x28
    8d54:	mov	r0, r7
    8d58:	bl	0 <coda_cursor_get_num_elements>
    8d5c:	cmp	r0, #0
    8d60:	beq	8d6c <coda_cursor_read_double_partial_array+0xf0>
    8d64:	mvn	r0, #0
    8d68:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8d6c:	cmp	r4, #0
    8d70:	blt	8dac <coda_cursor_read_double_partial_array+0x130>
    8d74:	ldr	r2, [sp, #40]	; 0x28
    8d78:	cmp	r4, r2
    8d7c:	bge	8dac <coda_cursor_read_double_partial_array+0x130>
    8d80:	add	r1, r4, r6
    8d84:	cmp	r1, r2
    8d88:	ble	8dc8 <coda_cursor_read_double_partial_array+0x14c>
    8d8c:	mvn	r0, #106	; 0x6a
    8d90:	ldr	r1, [pc, #1076]	; 91cc <coda_cursor_read_double_partial_array+0x550>
    8d94:	str	r2, [sp]
    8d98:	mov	r3, r6
    8d9c:	mov	r2, r4
    8da0:	bl	0 <coda_set_error>
    8da4:	mvn	r0, #0
    8da8:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8dac:	mvn	r0, #106	; 0x6a
    8db0:	ldr	r1, [pc, #1032]	; 91c0 <coda_cursor_read_double_partial_array+0x544>
    8db4:	ldr	r3, [sp, #40]	; 0x28
    8db8:	mov	r2, r4
    8dbc:	bl	0 <coda_set_error>
    8dc0:	mvn	r0, #0
    8dc4:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8dc8:	add	r1, sp, #44	; 0x2c
    8dcc:	add	r2, sp, #48	; 0x30
    8dd0:	mov	r0, r8
    8dd4:	bl	8c0 <get_array_element_unconverted_read_type>
    8dd8:	cmp	r0, #0
    8ddc:	beq	8de8 <coda_cursor_read_double_partial_array+0x16c>
    8de0:	mvn	r0, #0
    8de4:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8de8:	ldr	r0, [sp, #44]	; 0x2c
    8dec:	cmp	r0, #10
    8df0:	bcs	916c <coda_cursor_read_double_partial_array+0x4f0>
    8df4:	add	pc, pc, r0, lsl #2
    8df8:	nop	{0}
    8dfc:	b	8e24 <coda_cursor_read_double_partial_array+0x1a8>
    8e00:	b	8e70 <coda_cursor_read_double_partial_array+0x1f4>
    8e04:	b	8ebc <coda_cursor_read_double_partial_array+0x240>
    8e08:	b	8f0c <coda_cursor_read_double_partial_array+0x290>
    8e0c:	b	8f5c <coda_cursor_read_double_partial_array+0x2e0>
    8e10:	b	8fa8 <coda_cursor_read_double_partial_array+0x32c>
    8e14:	b	8ff4 <coda_cursor_read_double_partial_array+0x378>
    8e18:	b	9040 <coda_cursor_read_double_partial_array+0x3c4>
    8e1c:	b	908c <coda_cursor_read_double_partial_array+0x410>
    8e20:	b	90d8 <coda_cursor_read_double_partial_array+0x45c>
    8e24:	mov	r3, r5
    8e28:	mov	r2, r6
    8e2c:	mov	r1, r4
    8e30:	mov	r0, r7
    8e34:	bl	2830 <read_int8_partial_array>
    8e38:	cmp	r0, #0
    8e3c:	beq	8e48 <coda_cursor_read_double_partial_array+0x1cc>
    8e40:	mvn	r0, #0
    8e44:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8e48:	sub	r1, r6, #1
    8e4c:	cmp	r1, #0
    8e50:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    8e54:	add	r0, r5, r1, lsl #3
    8e58:	ldrsb	ip, [r5, r1]
    8e5c:	vmov	s6, ip
    8e60:	vcvt.f64.s32	d3, s6
    8e64:	vstr	d3, [r0]
    8e68:	sub	r1, r1, #1
    8e6c:	b	8e4c <coda_cursor_read_double_partial_array+0x1d0>
    8e70:	mov	r3, r5
    8e74:	mov	r2, r6
    8e78:	mov	r1, r4
    8e7c:	mov	r0, r7
    8e80:	bl	2950 <read_uint8_partial_array>
    8e84:	cmp	r0, #0
    8e88:	beq	8e94 <coda_cursor_read_double_partial_array+0x218>
    8e8c:	mvn	r0, #0
    8e90:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8e94:	sub	r0, r6, #1
    8e98:	cmp	r0, #0
    8e9c:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    8ea0:	add	r1, r5, r0, lsl #3
    8ea4:	ldrb	r2, [r5, r0]
    8ea8:	vmov	s8, r2
    8eac:	vcvt.f64.u32	d4, s8
    8eb0:	vstr	d4, [r1]
    8eb4:	sub	r0, r0, #1
    8eb8:	b	8e98 <coda_cursor_read_double_partial_array+0x21c>
    8ebc:	mov	r3, r5
    8ec0:	mov	r2, r6
    8ec4:	mov	r1, r4
    8ec8:	mov	r0, r7
    8ecc:	bl	2a58 <read_int16_partial_array>
    8ed0:	cmp	r0, #0
    8ed4:	beq	8ee0 <coda_cursor_read_double_partial_array+0x264>
    8ed8:	mvn	r0, #0
    8edc:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8ee0:	sub	r2, r6, #1
    8ee4:	cmp	r2, #0
    8ee8:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    8eec:	add	r0, r5, r2, lsl #3
    8ef0:	add	r1, r5, r2, lsl #1
    8ef4:	ldrsh	ip, [r1]
    8ef8:	vmov	s2, ip
    8efc:	vcvt.f64.s32	d1, s2
    8f00:	vstr	d1, [r0]
    8f04:	sub	r2, r2, #1
    8f08:	b	8ee4 <coda_cursor_read_double_partial_array+0x268>
    8f0c:	mov	r3, r5
    8f10:	mov	r2, r6
    8f14:	mov	r1, r4
    8f18:	mov	r0, r7
    8f1c:	bl	2b78 <read_uint16_partial_array>
    8f20:	cmp	r0, #0
    8f24:	beq	8f30 <coda_cursor_read_double_partial_array+0x2b4>
    8f28:	mvn	r0, #0
    8f2c:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8f30:	sub	r2, r6, #1
    8f34:	cmp	r2, #0
    8f38:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    8f3c:	add	r1, r5, r2, lsl #3
    8f40:	add	r3, r5, r2, lsl #1
    8f44:	ldrh	r0, [r3]
    8f48:	vmov	s14, r0
    8f4c:	vcvt.f64.u32	d7, s14
    8f50:	vstr	d7, [r1]
    8f54:	sub	r2, r2, #1
    8f58:	b	8f34 <coda_cursor_read_double_partial_array+0x2b8>
    8f5c:	mov	r3, r5
    8f60:	mov	r2, r6
    8f64:	mov	r1, r4
    8f68:	mov	r0, r7
    8f6c:	bl	2c80 <read_int32_partial_array>
    8f70:	cmp	r0, #0
    8f74:	beq	8f80 <coda_cursor_read_double_partial_array+0x304>
    8f78:	mvn	r0, #0
    8f7c:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8f80:	sub	ip, r6, #1
    8f84:	cmp	ip, #0
    8f88:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    8f8c:	add	r0, r5, ip, lsl #3
    8f90:	ldr	r3, [r5, ip, lsl #2]
    8f94:	vmov	s12, r3
    8f98:	vcvt.f64.s32	d6, s12
    8f9c:	vstr	d6, [r0]
    8fa0:	sub	ip, ip, #1
    8fa4:	b	8f84 <coda_cursor_read_double_partial_array+0x308>
    8fa8:	mov	r3, r5
    8fac:	mov	r2, r6
    8fb0:	mov	r1, r4
    8fb4:	mov	r0, r7
    8fb8:	bl	2da0 <read_uint32_partial_array>
    8fbc:	cmp	r0, #0
    8fc0:	beq	8fcc <coda_cursor_read_double_partial_array+0x350>
    8fc4:	mvn	r0, #0
    8fc8:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    8fcc:	sub	ip, r6, #1
    8fd0:	cmp	ip, #0
    8fd4:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    8fd8:	add	r2, r5, ip, lsl #3
    8fdc:	ldr	r1, [r5, ip, lsl #2]
    8fe0:	vmov	s2, r1
    8fe4:	vcvt.f64.u32	d1, s2
    8fe8:	vstr	d1, [r2]
    8fec:	sub	ip, ip, #1
    8ff0:	b	8fd0 <coda_cursor_read_double_partial_array+0x354>
    8ff4:	mov	r3, r5
    8ff8:	mov	r2, r6
    8ffc:	mov	r1, r4
    9000:	mov	r0, r7
    9004:	bl	2ea8 <read_int64_partial_array>
    9008:	cmp	r0, #0
    900c:	beq	9018 <coda_cursor_read_double_partial_array+0x39c>
    9010:	mvn	r0, #0
    9014:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    9018:	sub	r7, r6, #1
    901c:	cmp	r7, #0
    9020:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    9024:	add	r4, r5, r7, lsl #3
    9028:	ldr	r0, [r4]
    902c:	ldr	r1, [r4, #4]
    9030:	bl	0 <__compcert_i64_stod>
    9034:	vstr	d0, [r4]
    9038:	sub	r7, r7, #1
    903c:	b	901c <coda_cursor_read_double_partial_array+0x3a0>
    9040:	mov	r3, r5
    9044:	mov	r2, r6
    9048:	mov	r1, r4
    904c:	mov	r0, r7
    9050:	bl	2fb0 <read_uint64_partial_array>
    9054:	cmp	r0, #0
    9058:	beq	9064 <coda_cursor_read_double_partial_array+0x3e8>
    905c:	mvn	r0, #0
    9060:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    9064:	sub	r7, r6, #1
    9068:	cmp	r7, #0
    906c:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    9070:	add	r4, r5, r7, lsl #3
    9074:	ldr	r0, [r4]
    9078:	ldr	r1, [r4, #4]
    907c:	bl	0 <__compcert_i64_utod>
    9080:	vstr	d0, [r4]
    9084:	sub	r7, r7, #1
    9088:	b	9068 <coda_cursor_read_double_partial_array+0x3ec>
    908c:	mov	r3, r5
    9090:	mov	r2, r6
    9094:	mov	r1, r4
    9098:	mov	r0, r7
    909c:	bl	30a8 <read_float_partial_array>
    90a0:	cmp	r0, #0
    90a4:	beq	90b0 <coda_cursor_read_double_partial_array+0x434>
    90a8:	mvn	r0, #0
    90ac:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    90b0:	sub	r3, r6, #1
    90b4:	cmp	r3, #0
    90b8:	blt	90fc <coda_cursor_read_double_partial_array+0x480>
    90bc:	add	ip, r5, r3, lsl #3
    90c0:	add	r0, r5, r3, lsl #2
    90c4:	vldr	s14, [r0]
    90c8:	vcvt.f64.f32	d4, s14
    90cc:	vstr	d4, [ip]
    90d0:	sub	r3, r3, #1
    90d4:	b	90b4 <coda_cursor_read_double_partial_array+0x438>
    90d8:	mov	r3, r5
    90dc:	mov	r2, r6
    90e0:	mov	r1, r4
    90e4:	mov	r0, r7
    90e8:	bl	31e0 <read_double_partial_array>
    90ec:	cmp	r0, #0
    90f0:	beq	90fc <coda_cursor_read_double_partial_array+0x480>
    90f4:	mvn	r0, #0
    90f8:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    90fc:	ldr	r3, [sp, #48]	; 0x30
    9100:	cmp	r3, #0
    9104:	beq	9164 <coda_cursor_read_double_partial_array+0x4e8>
    9108:	mov	r4, #0
    910c:	cmp	r4, r6
    9110:	bge	9164 <coda_cursor_read_double_partial_array+0x4e8>
    9114:	add	r3, r5, r4, lsl #3
    9118:	vldr	d0, [r3]
    911c:	ldr	r1, [sp, #48]	; 0x30
    9120:	vldr	d5, [r1, #24]
    9124:	vcmp.f64	d0, d5
    9128:	vmrs	APSR_nzcv, fpscr
    912c:	beq	9150 <coda_cursor_read_double_partial_array+0x4d4>
    9130:	vldr	d2, [r1]
    9134:	vmul.f64	d3, d0, d2
    9138:	vldr	d2, [r1, #8]
    913c:	vdiv.f64	d6, d3, d2
    9140:	vldr	d0, [r1, #16]
    9144:	vadd.f64	d6, d6, d0
    9148:	vstr	d6, [r3]
    914c:	b	915c <coda_cursor_read_double_partial_array+0x4e0>
    9150:	bl	0 <coda_NaN>
    9154:	add	ip, r5, r4, lsl #3
    9158:	vstr	d0, [ip]
    915c:	add	r4, r4, #1
    9160:	b	910c <coda_cursor_read_double_partial_array+0x490>
    9164:	mov	r0, #0
    9168:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    916c:	bl	0 <coda_type_get_native_type_name>
    9170:	mov	r2, r0
    9174:	mvn	r0, #104	; 0x68
    9178:	ldr	r1, [pc, #68]	; 91c4 <coda_cursor_read_double_partial_array+0x548>
    917c:	bl	0 <coda_set_error>
    9180:	mvn	r0, #0
    9184:	b	91a0 <coda_cursor_read_double_partial_array+0x524>
    9188:	mvn	r0, #99	; 0x63
    918c:	ldr	r1, [pc, #64]	; 91d4 <coda_cursor_read_double_partial_array+0x558>
    9190:	ldr	r2, [pc, #56]	; 91d0 <coda_cursor_read_double_partial_array+0x554>
    9194:	movw	r3, #5355	; 0x14eb
    9198:	bl	0 <coda_set_error>
    919c:	mvn	r0, #0
    91a0:	ldr	r4, [sp, #16]
    91a4:	ldr	r5, [sp, #20]
    91a8:	ldr	r6, [sp, #24]
    91ac:	ldr	r7, [sp, #28]
    91b0:	ldr	r8, [sp, #32]
    91b4:	ldr	lr, [sp, #8]
    91b8:	add	sp, sp, #56	; 0x38
    91bc:	bx	lr
    91c0:	.word	0x0000037f
    91c4:	.word	0x000003f8
    91c8:	.word	0x000002bc
    91cc:	.word	0x00000160
    91d0:	.word	0x00000453
    91d4:	.word	0x0000022b
    91d8:	.word	0x00000000
    91dc:	.word	0x0000005b

000091e0 <coda_cursor_read_char_partial_array>:
    91e0:	mov	ip, sp
    91e4:	sub	sp, sp, #48	; 0x30
    91e8:	str	ip, [sp, #4]
    91ec:	str	lr, [sp, #8]
    91f0:	str	r4, [sp, #16]
    91f4:	str	r5, [sp, #20]
    91f8:	str	r6, [sp, #24]
    91fc:	str	r7, [sp, #28]
    9200:	str	r8, [sp, #32]
    9204:	str	r9, [sp, #36]	; 0x24
    9208:	mov	r9, r3
    920c:	mov	r4, r2
    9210:	mov	r5, r1
    9214:	mov	r8, r0
    9218:	cmp	r8, #0
    921c:	beq	9448 <coda_cursor_read_char_partial_array+0x268>
    9220:	ldr	r0, [r8, #4]
    9224:	cmp	r0, #0
    9228:	ble	9448 <coda_cursor_read_char_partial_array+0x268>
    922c:	lsl	ip, r0, #4
    9230:	add	ip, r8, ip
    9234:	sub	lr, ip, #4096	; 0x1000
    9238:	ldr	r6, [lr, #4088]	; 0xff8
    923c:	cmp	r6, #0
    9240:	beq	9448 <coda_cursor_read_char_partial_array+0x268>
    9244:	cmp	r9, #0
    9248:	bne	9268 <coda_cursor_read_char_partial_array+0x88>
    924c:	mvn	r0, #99	; 0x63
    9250:	ldr	r1, [pc, #592]	; 94a8 <coda_cursor_read_char_partial_array+0x2c8>
    9254:	ldr	r2, [pc, #568]	; 9494 <coda_cursor_read_char_partial_array+0x2b4>
    9258:	movw	r3, #5547	; 0x15ab
    925c:	bl	0 <coda_set_error>
    9260:	mvn	r0, #0
    9264:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    9268:	ldr	r3, [r6]
    926c:	cmp	r3, #100	; 0x64
    9270:	blt	9278 <coda_cursor_read_char_partial_array+0x98>
    9274:	ldr	r6, [r6, #4]
    9278:	ldr	r0, [r6, #8]
    927c:	cmp	r0, #1
    9280:	beq	92a0 <coda_cursor_read_char_partial_array+0xc0>
    9284:	bl	0 <coda_type_get_class_name>
    9288:	mov	r2, r0
    928c:	mvn	r0, #104	; 0x68
    9290:	ldr	r1, [pc, #500]	; 948c <coda_cursor_read_char_partial_array+0x2ac>
    9294:	bl	0 <coda_set_error>
    9298:	mvn	r0, #0
    929c:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    92a0:	ldr	r1, [pc, #500]	; 949c <coda_cursor_read_char_partial_array+0x2bc>
    92a4:	ldr	r2, [r1]
    92a8:	cmp	r2, #0
    92ac:	beq	9328 <coda_cursor_read_char_partial_array+0x148>
    92b0:	add	r1, sp, #44	; 0x2c
    92b4:	mov	r0, r8
    92b8:	bl	0 <coda_cursor_get_num_elements>
    92bc:	cmp	r0, #0
    92c0:	beq	92cc <coda_cursor_read_char_partial_array+0xec>
    92c4:	mvn	r0, #0
    92c8:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    92cc:	cmp	r5, #0
    92d0:	blt	930c <coda_cursor_read_char_partial_array+0x12c>
    92d4:	ldr	r2, [sp, #44]	; 0x2c
    92d8:	cmp	r5, r2
    92dc:	bge	930c <coda_cursor_read_char_partial_array+0x12c>
    92e0:	add	r3, r5, r4
    92e4:	cmp	r3, r2
    92e8:	ble	9328 <coda_cursor_read_char_partial_array+0x148>
    92ec:	mvn	r0, #106	; 0x6a
    92f0:	ldr	r1, [pc, #408]	; 9490 <coda_cursor_read_char_partial_array+0x2b0>
    92f4:	str	r2, [sp]
    92f8:	mov	r3, r4
    92fc:	mov	r2, r5
    9300:	bl	0 <coda_set_error>
    9304:	mvn	r0, #0
    9308:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    930c:	mvn	r0, #106	; 0x6a
    9310:	ldr	r1, [pc, #364]	; 9484 <coda_cursor_read_char_partial_array+0x2a4>
    9314:	ldr	r3, [sp, #44]	; 0x2c
    9318:	mov	r2, r5
    931c:	bl	0 <coda_set_error>
    9320:	mvn	r0, #0
    9324:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    9328:	add	r1, sp, #40	; 0x28
    932c:	mov	r0, r6
    9330:	bl	854 <get_array_element_read_type>
    9334:	cmp	r0, #0
    9338:	beq	9344 <coda_cursor_read_char_partial_array+0x164>
    933c:	mvn	r0, #0
    9340:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    9344:	ldr	r0, [sp, #40]	; 0x28
    9348:	cmp	r0, #10
    934c:	bne	942c <coda_cursor_read_char_partial_array+0x24c>
    9350:	mov	r3, r9
    9354:	mov	r2, r4
    9358:	mov	r1, r5
    935c:	mov	r0, r8
    9360:	ldr	ip, [r0, #4]
    9364:	lsl	ip, ip, #4
    9368:	add	ip, r0, ip
    936c:	sub	lr, ip, #4096	; 0x1000
    9370:	ldr	ip, [lr, #4088]	; 0xff8
    9374:	ldr	ip, [ip]
    9378:	cmp	ip, #102	; 0x66
    937c:	bcs	93cc <coda_cursor_read_char_partial_array+0x1ec>
    9380:	cmp	ip, #100	; 0x64
    9384:	bcs	93a8 <coda_cursor_read_char_partial_array+0x1c8>
    9388:	cmp	ip, #0
    938c:	beq	93a0 <coda_cursor_read_char_partial_array+0x1c0>
    9390:	cmp	ip, #1
    9394:	bne	93ec <coda_cursor_read_char_partial_array+0x20c>
    9398:	bl	0 <coda_bin_cursor_read_char_partial_array>
    939c:	b	9414 <coda_cursor_read_char_partial_array+0x234>
    93a0:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    93a4:	b	9414 <coda_cursor_read_char_partial_array+0x234>
    93a8:	cmp	ip, #100	; 0x64
    93ac:	bne	93b8 <coda_cursor_read_char_partial_array+0x1d8>
    93b0:	bl	0 <coda_mem_cursor_read_char_partial_array>
    93b4:	b	9414 <coda_cursor_read_char_partial_array+0x234>
    93b8:	mvn	r0, #10
    93bc:	mov	r1, #0
    93c0:	bl	0 <coda_set_error>
    93c4:	mvn	r7, #0
    93c8:	b	9408 <coda_cursor_read_char_partial_array+0x228>
    93cc:	cmp	ip, #104	; 0x68
    93d0:	bcs	93e4 <coda_cursor_read_char_partial_array+0x204>
    93d4:	cmp	ip, #102	; 0x66
    93d8:	beq	93ec <coda_cursor_read_char_partial_array+0x20c>
    93dc:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    93e0:	b	9414 <coda_cursor_read_char_partial_array+0x234>
    93e4:	cmp	ip, #104	; 0x68
    93e8:	beq	9410 <coda_cursor_read_char_partial_array+0x230>
    93ec:	ldr	r0, [pc, #176]	; 94a4 <coda_cursor_read_char_partial_array+0x2c4>
    93f0:	ldr	r1, [pc, #156]	; 9494 <coda_cursor_read_char_partial_array+0x2b4>
    93f4:	movw	r2, #1748	; 0x6d4
    93f8:	ldr	r3, [pc, #136]	; 9488 <coda_cursor_read_char_partial_array+0x2a8>
    93fc:	bl	0 <__assert_fail>
    9400:	mov	r0, #1
    9404:	bl	0 <exit>
    9408:	mov	r0, r7
    940c:	b	9414 <coda_cursor_read_char_partial_array+0x234>
    9410:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    9414:	cmp	r0, #0
    9418:	beq	9424 <coda_cursor_read_char_partial_array+0x244>
    941c:	mvn	r0, #0
    9420:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    9424:	mov	r0, #0
    9428:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    942c:	bl	0 <coda_type_get_native_type_name>
    9430:	mov	r2, r0
    9434:	mvn	r0, #104	; 0x68
    9438:	ldr	r1, [pc, #96]	; 94a0 <coda_cursor_read_char_partial_array+0x2c0>
    943c:	bl	0 <coda_set_error>
    9440:	mvn	r0, #0
    9444:	b	9460 <coda_cursor_read_char_partial_array+0x280>
    9448:	mvn	r0, #99	; 0x63
    944c:	ldr	r1, [pc, #68]	; 9498 <coda_cursor_read_char_partial_array+0x2b8>
    9450:	ldr	r2, [pc, #60]	; 9494 <coda_cursor_read_char_partial_array+0x2b4>
    9454:	movw	r3, #5542	; 0x15a6
    9458:	bl	0 <coda_set_error>
    945c:	mvn	r0, #0
    9460:	ldr	r4, [sp, #16]
    9464:	ldr	r5, [sp, #20]
    9468:	ldr	r6, [sp, #24]
    946c:	ldr	r7, [sp, #28]
    9470:	ldr	r8, [sp, #32]
    9474:	ldr	r9, [sp, #36]	; 0x24
    9478:	ldr	lr, [sp, #8]
    947c:	add	sp, sp, #48	; 0x30
    9480:	bx	lr
    9484:	.word	0x0000037f
    9488:	.word	0x000007cc
    948c:	.word	0x000002bc
    9490:	.word	0x00000160
    9494:	.word	0x00000453
    9498:	.word	0x0000022b
    949c:	.word	0x00000000
    94a0:	.word	0x00000538
    94a4:	.word	0x000004b3
    94a8:	.word	0x0000005b

000094ac <coda_cursor_read_complex_double_pair>:
    94ac:	mov	ip, sp
    94b0:	sub	sp, sp, #8
    94b4:	str	ip, [sp]
    94b8:	str	lr, [sp, #4]
    94bc:	cmp	r0, #0
    94c0:	beq	9518 <coda_cursor_read_complex_double_pair+0x6c>
    94c4:	ldr	r2, [r0, #4]
    94c8:	cmp	r2, #0
    94cc:	ble	9518 <coda_cursor_read_complex_double_pair+0x6c>
    94d0:	lsl	r2, r2, #4
    94d4:	add	r2, r0, r2
    94d8:	sub	lr, r2, #4096	; 0x1000
    94dc:	ldr	r2, [lr, #4088]	; 0xff8
    94e0:	cmp	r2, #0
    94e4:	beq	9518 <coda_cursor_read_complex_double_pair+0x6c>
    94e8:	cmp	r1, #0
    94ec:	bne	950c <coda_cursor_read_complex_double_pair+0x60>
    94f0:	mvn	r0, #99	; 0x63
    94f4:	ldr	r1, [pc, #72]	; 9544 <coda_cursor_read_complex_double_pair+0x98>
    94f8:	ldr	r2, [pc, #60]	; 953c <coda_cursor_read_complex_double_pair+0x90>
    94fc:	movw	r3, #5622	; 0x15f6
    9500:	bl	0 <coda_set_error>
    9504:	mvn	r0, #0
    9508:	b	9530 <coda_cursor_read_complex_double_pair+0x84>
    950c:	ldr	lr, [sp, #4]
    9510:	add	sp, sp, #8
    9514:	b	928 <read_double_pair>
    9518:	mvn	r0, #99	; 0x63
    951c:	ldr	r1, [pc, #28]	; 9540 <coda_cursor_read_complex_double_pair+0x94>
    9520:	ldr	r2, [pc, #20]	; 953c <coda_cursor_read_complex_double_pair+0x90>
    9524:	movw	r3, #5617	; 0x15f1
    9528:	bl	0 <coda_set_error>
    952c:	mvn	r0, #0
    9530:	ldr	lr, [sp, #4]
    9534:	add	sp, sp, #8
    9538:	bx	lr
    953c:	.word	0x00000453
    9540:	.word	0x0000022b
    9544:	.word	0x0000005b

00009548 <coda_cursor_read_complex_double_pairs_array>:
    9548:	mov	ip, sp
    954c:	sub	sp, sp, #16
    9550:	str	ip, [sp, #4]
    9554:	str	lr, [sp, #8]
    9558:	cmp	r0, #0
    955c:	beq	9600 <coda_cursor_read_complex_double_pairs_array+0xb8>
    9560:	ldr	r3, [r0, #4]
    9564:	cmp	r3, #0
    9568:	ble	9600 <coda_cursor_read_complex_double_pairs_array+0xb8>
    956c:	lsl	ip, r3, #4
    9570:	add	ip, r0, ip
    9574:	sub	lr, ip, #4096	; 0x1000
    9578:	ldr	r3, [lr, #4088]	; 0xff8
    957c:	cmp	r3, #0
    9580:	beq	9600 <coda_cursor_read_complex_double_pairs_array+0xb8>
    9584:	cmp	r1, #0
    9588:	bne	95a8 <coda_cursor_read_complex_double_pairs_array+0x60>
    958c:	mvn	r0, #99	; 0x63
    9590:	ldr	r1, [pc, #156]	; 9634 <coda_cursor_read_complex_double_pairs_array+0xec>
    9594:	ldr	r2, [pc, #144]	; 962c <coda_cursor_read_complex_double_pairs_array+0xe4>
    9598:	movw	r3, #5654	; 0x1616
    959c:	bl	0 <coda_set_error>
    95a0:	mvn	r0, #0
    95a4:	b	9618 <coda_cursor_read_complex_double_pairs_array+0xd0>
    95a8:	ldr	ip, [r3]
    95ac:	cmp	ip, #100	; 0x64
    95b0:	blt	95b8 <coda_cursor_read_complex_double_pairs_array+0x70>
    95b4:	ldr	r3, [r3, #4]
    95b8:	ldr	r3, [r3, #8]
    95bc:	cmp	r3, #1
    95c0:	beq	95e4 <coda_cursor_read_complex_double_pairs_array+0x9c>
    95c4:	mov	r0, r3
    95c8:	bl	0 <coda_type_get_class_name>
    95cc:	mov	r2, r0
    95d0:	mvn	r0, #104	; 0x68
    95d4:	ldr	r1, [pc, #72]	; 9624 <coda_cursor_read_complex_double_pairs_array+0xdc>
    95d8:	bl	0 <coda_set_error>
    95dc:	mvn	r0, #0
    95e0:	b	9618 <coda_cursor_read_complex_double_pairs_array+0xd0>
    95e4:	ldr	ip, [pc, #60]	; 9628 <coda_cursor_read_complex_double_pairs_array+0xe0>
    95e8:	mov	r3, #16
    95ec:	str	r2, [sp]
    95f0:	mov	r2, r1
    95f4:	mov	r1, ip
    95f8:	bl	0 <read_array>
    95fc:	b	9618 <coda_cursor_read_complex_double_pairs_array+0xd0>
    9600:	mvn	r0, #99	; 0x63
    9604:	ldr	r1, [pc, #36]	; 9630 <coda_cursor_read_complex_double_pairs_array+0xe8>
    9608:	ldr	r2, [pc, #28]	; 962c <coda_cursor_read_complex_double_pairs_array+0xe4>
    960c:	movw	r3, #5649	; 0x1611
    9610:	bl	0 <coda_set_error>
    9614:	mvn	r0, #0
    9618:	ldr	lr, [sp, #8]
    961c:	add	sp, sp, #16
    9620:	bx	lr
    9624:	.word	0x000002bc
    9628:	.word	0x00000000
    962c:	.word	0x00000453
    9630:	.word	0x0000022b
    9634:	.word	0x0000005b

00009638 <coda_cursor_read_complex_double_split>:
    9638:	mov	ip, sp
    963c:	sub	sp, sp, #32
    9640:	str	ip, [sp]
    9644:	str	lr, [sp, #4]
    9648:	str	r4, [sp, #8]
    964c:	str	r5, [sp, #12]
    9650:	mov	r4, r2
    9654:	mov	r5, r1
    9658:	add	r1, sp, #16
    965c:	bl	94ac <coda_cursor_read_complex_double_pair>
    9660:	cmp	r0, #0
    9664:	beq	9670 <coda_cursor_read_complex_double_split+0x38>
    9668:	mvn	r0, #0
    966c:	b	9684 <coda_cursor_read_complex_double_split+0x4c>
    9670:	vldr	d3, [sp, #16]
    9674:	vstr	d3, [r5]
    9678:	vldr	d2, [sp, #24]
    967c:	vstr	d2, [r4]
    9680:	mov	r0, #0
    9684:	ldr	r4, [sp, #8]
    9688:	ldr	r5, [sp, #12]
    968c:	ldr	lr, [sp, #4]
    9690:	add	sp, sp, #32
    9694:	bx	lr

00009698 <coda_cursor_read_complex_double_split_array>:
    9698:	mov	ip, sp
    969c:	sub	sp, sp, #656	; 0x290
    96a0:	str	ip, [sp]
    96a4:	str	lr, [sp, #4]
    96a8:	str	r4, [sp, #8]
    96ac:	str	r5, [sp, #12]
    96b0:	str	r6, [sp, #16]
    96b4:	str	r7, [sp, #20]
    96b8:	str	r8, [sp, #24]
    96bc:	str	r9, [sp, #28]
    96c0:	str	sl, [sp, #32]
    96c4:	mov	r7, r3
    96c8:	mov	r5, r2
    96cc:	mov	r4, r1
    96d0:	mov	r8, r0
    96d4:	cmp	r8, #0
    96d8:	beq	99f4 <coda_cursor_read_complex_double_split_array+0x35c>
    96dc:	ldr	ip, [r8, #4]
    96e0:	cmp	ip, #0
    96e4:	ble	99f4 <coda_cursor_read_complex_double_split_array+0x35c>
    96e8:	lsl	r0, ip, #4
    96ec:	add	r3, r8, r0
    96f0:	sub	lr, r3, #4096	; 0x1000
    96f4:	ldr	r1, [lr, #4088]	; 0xff8
    96f8:	cmp	r1, #0
    96fc:	beq	99f4 <coda_cursor_read_complex_double_split_array+0x35c>
    9700:	cmp	r4, #0
    9704:	bne	9724 <coda_cursor_read_complex_double_split_array+0x8c>
    9708:	mvn	r0, #99	; 0x63
    970c:	ldr	r1, [pc, #808]	; 9a3c <coda_cursor_read_complex_double_split_array+0x3a4>
    9710:	ldr	r2, [pc, #808]	; 9a40 <coda_cursor_read_complex_double_split_array+0x3a8>
    9714:	movw	r3, #5718	; 0x1656
    9718:	bl	0 <coda_set_error>
    971c:	mvn	r0, #0
    9720:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    9724:	cmp	r5, #0
    9728:	bne	9748 <coda_cursor_read_complex_double_split_array+0xb0>
    972c:	mvn	r0, #99	; 0x63
    9730:	ldr	r1, [pc, #764]	; 9a34 <coda_cursor_read_complex_double_split_array+0x39c>
    9734:	ldr	r2, [pc, #772]	; 9a40 <coda_cursor_read_complex_double_split_array+0x3a8>
    9738:	movw	r3, #5723	; 0x165b
    973c:	bl	0 <coda_set_error>
    9740:	mvn	r0, #0
    9744:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    9748:	ldr	r2, [r1]
    974c:	cmp	r2, #100	; 0x64
    9750:	blt	9758 <coda_cursor_read_complex_double_split_array+0xc0>
    9754:	ldr	r1, [r1, #4]
    9758:	ldr	r0, [r1, #8]
    975c:	cmp	r0, #1
    9760:	beq	9780 <coda_cursor_read_complex_double_split_array+0xe8>
    9764:	bl	0 <coda_type_get_class_name>
    9768:	mov	r2, r0
    976c:	mvn	r0, #104	; 0x68
    9770:	ldr	r1, [pc, #704]	; 9a38 <coda_cursor_read_complex_double_split_array+0x3a0>
    9774:	bl	0 <coda_set_error>
    9778:	mvn	r0, #0
    977c:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    9780:	mov	r6, #8
    9784:	add	r1, sp, #40	; 0x28
    9788:	add	r2, sp, #64	; 0x40
    978c:	mov	r0, r8
    9790:	bl	0 <coda_cursor_get_array_dim>
    9794:	cmp	r0, #0
    9798:	beq	97a4 <coda_cursor_read_complex_double_split_array+0x10c>
    979c:	mvn	r0, #0
    97a0:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    97a4:	mov	r2, r8
    97a8:	add	r3, sp, #136	; 0x88
    97ac:	mov	lr, #130	; 0x82
    97b0:	ldr	ip, [r2], #4
    97b4:	subs	lr, lr, #1
    97b8:	str	ip, [r3], #4
    97bc:	bne	97b0 <coda_cursor_read_complex_double_split_array+0x118>
    97c0:	mov	r3, #1
    97c4:	cmp	r7, #1
    97c8:	movne	r2, #1
    97cc:	moveq	r2, #0
    97d0:	ldr	r1, [sp, #40]	; 0x28
    97d4:	cmp	r1, #1
    97d8:	movle	r0, r3
    97dc:	movgt	r0, r2
    97e0:	cmp	r0, #0
    97e4:	bne	993c <coda_cursor_read_complex_double_split_array+0x2a4>
    97e8:	mov	r3, #1
    97ec:	str	r3, [sp, #96]	; 0x60
    97f0:	mov	r2, #0
    97f4:	ldr	r0, [sp, #40]	; 0x28
    97f8:	cmp	r2, r0
    97fc:	bge	982c <coda_cursor_read_complex_double_split_array+0x194>
    9800:	add	r1, sp, #96	; 0x60
    9804:	lsl	r3, r2, #2
    9808:	add	r7, r1, r3
    980c:	add	r1, sp, #96	; 0x60
    9810:	ldr	r3, [r1, r2, lsl #2]
    9814:	add	ip, sp, #64	; 0x40
    9818:	ldr	r0, [ip, r2, lsl #2]
    981c:	mul	r3, r3, r0
    9820:	str	r3, [r7, #4]
    9824:	add	r2, r2, #1
    9828:	b	97f4 <coda_cursor_read_complex_double_split_array+0x15c>
    982c:	add	ip, sp, #96	; 0x60
    9830:	lsl	r2, r0, #2
    9834:	add	r1, ip, r2
    9838:	sub	lr, r1, #4096	; 0x1000
    983c:	ldr	r9, [lr, #4092]	; 0xffc
    9840:	add	r1, sp, #96	; 0x60
    9844:	ldr	r7, [r1, r0, lsl #2]
    9848:	cmp	r7, #0
    984c:	ble	99ec <coda_cursor_read_complex_double_split_array+0x354>
    9850:	mov	sl, #0
    9854:	mov	r8, #0
    9858:	add	r0, sp, #136	; 0x88
    985c:	mov	r1, #0
    9860:	bl	0 <coda_cursor_goto_array_element_by_index>
    9864:	cmp	r0, #0
    9868:	beq	9874 <coda_cursor_read_complex_double_split_array+0x1dc>
    986c:	mvn	r0, #0
    9870:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    9874:	add	r0, sp, #136	; 0x88
    9878:	add	r1, sp, #48	; 0x30
    987c:	bl	928 <read_double_pair>
    9880:	mla	r0, r6, r8, r4
    9884:	add	r1, sp, #48	; 0x30
    9888:	mov	r2, r6
    988c:	bl	0 <memcpy>
    9890:	mla	r0, r6, r8, r5
    9894:	add	r1, sp, #56	; 0x38
    9898:	mov	r2, r6
    989c:	bl	0 <memcpy>
    98a0:	add	sl, sl, #1
    98a4:	cmp	sl, r7
    98a8:	bge	98c4 <coda_cursor_read_complex_double_split_array+0x22c>
    98ac:	add	r0, sp, #136	; 0x88
    98b0:	bl	0 <coda_cursor_goto_next_array_element>
    98b4:	cmp	r0, #0
    98b8:	beq	98c4 <coda_cursor_read_complex_double_split_array+0x22c>
    98bc:	mvn	r0, #0
    98c0:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    98c4:	add	r8, r8, r9
    98c8:	cmp	r8, r7
    98cc:	blt	9874 <coda_cursor_read_complex_double_split_array+0x1dc>
    98d0:	cmp	sl, r7
    98d4:	beq	99ec <coda_cursor_read_complex_double_split_array+0x354>
    98d8:	add	r3, sp, #96	; 0x60
    98dc:	ldr	r2, [sp, #40]	; 0x28
    98e0:	lsl	ip, r2, #2
    98e4:	add	r1, r3, ip
    98e8:	sub	lr, r1, #4096	; 0x1000
    98ec:	ldr	r1, [lr, #4088]	; 0xff8
    98f0:	add	r3, sp, #96	; 0x60
    98f4:	ldr	r0, [r3, r2, lsl #2]
    98f8:	sub	r3, r1, r0
    98fc:	add	r8, r8, r3
    9900:	sub	r2, r2, #3
    9904:	cmp	r2, #0
    9908:	blt	9874 <coda_cursor_read_complex_double_split_array+0x1dc>
    990c:	add	ip, sp, #96	; 0x60
    9910:	lsl	r3, r2, #2
    9914:	add	r3, ip, r3
    9918:	ldr	r3, [r3, #8]
    991c:	cmp	r8, r3
    9920:	blt	9874 <coda_cursor_read_complex_double_split_array+0x1dc>
    9924:	add	r1, sp, #96	; 0x60
    9928:	ldr	ip, [r1, r2, lsl #2]
    992c:	sub	r1, ip, r3
    9930:	add	r8, r8, r1
    9934:	sub	r2, r2, #1
    9938:	b	9904 <coda_cursor_read_complex_double_split_array+0x26c>
    993c:	mov	r8, #1
    9940:	mov	r0, #0
    9944:	ldr	ip, [sp, #40]	; 0x28
    9948:	cmp	r0, ip
    994c:	bge	9964 <coda_cursor_read_complex_double_split_array+0x2cc>
    9950:	add	r1, sp, #64	; 0x40
    9954:	ldr	r1, [r1, r0, lsl #2]
    9958:	mul	r8, r8, r1
    995c:	add	r0, r0, #1
    9960:	b	9944 <coda_cursor_read_complex_double_split_array+0x2ac>
    9964:	cmp	r8, #0
    9968:	ble	99ec <coda_cursor_read_complex_double_split_array+0x354>
    996c:	add	r0, sp, #136	; 0x88
    9970:	mov	r1, #0
    9974:	bl	0 <coda_cursor_goto_array_element_by_index>
    9978:	cmp	r0, #0
    997c:	beq	9988 <coda_cursor_read_complex_double_split_array+0x2f0>
    9980:	mvn	r0, #0
    9984:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    9988:	mov	r7, #0
    998c:	cmp	r7, r8
    9990:	bge	99ec <coda_cursor_read_complex_double_split_array+0x354>
    9994:	add	r0, sp, #136	; 0x88
    9998:	add	r1, sp, #48	; 0x30
    999c:	bl	928 <read_double_pair>
    99a0:	mla	r0, r6, r7, r4
    99a4:	add	r1, sp, #48	; 0x30
    99a8:	mov	r2, r6
    99ac:	bl	0 <memcpy>
    99b0:	mla	r0, r6, r7, r5
    99b4:	add	r1, sp, #56	; 0x38
    99b8:	mov	r2, r6
    99bc:	bl	0 <memcpy>
    99c0:	sub	r2, r8, #1
    99c4:	cmp	r7, r2
    99c8:	bge	99e4 <coda_cursor_read_complex_double_split_array+0x34c>
    99cc:	add	r0, sp, #136	; 0x88
    99d0:	bl	0 <coda_cursor_goto_next_array_element>
    99d4:	cmp	r0, #0
    99d8:	beq	99e4 <coda_cursor_read_complex_double_split_array+0x34c>
    99dc:	mvn	r0, #0
    99e0:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    99e4:	add	r7, r7, #1
    99e8:	b	998c <coda_cursor_read_complex_double_split_array+0x2f4>
    99ec:	mov	r0, #0
    99f0:	b	9a0c <coda_cursor_read_complex_double_split_array+0x374>
    99f4:	mvn	r0, #99	; 0x63
    99f8:	ldr	r1, [pc, #68]	; 9a44 <coda_cursor_read_complex_double_split_array+0x3ac>
    99fc:	ldr	r2, [pc, #60]	; 9a40 <coda_cursor_read_complex_double_split_array+0x3a8>
    9a00:	movw	r3, #5713	; 0x1651
    9a04:	bl	0 <coda_set_error>
    9a08:	mvn	r0, #0
    9a0c:	ldr	r4, [sp, #8]
    9a10:	ldr	r5, [sp, #12]
    9a14:	ldr	r6, [sp, #16]
    9a18:	ldr	r7, [sp, #20]
    9a1c:	ldr	r8, [sp, #24]
    9a20:	ldr	r9, [sp, #28]
    9a24:	ldr	sl, [sp, #32]
    9a28:	ldr	lr, [sp, #4]
    9a2c:	add	sp, sp, #656	; 0x290
    9a30:	bx	lr
    9a34:	.word	0x0000029c
    9a38:	.word	0x000002bc
    9a3c:	.word	0x00000518
    9a40:	.word	0x00000453
    9a44:	.word	0x0000022b
