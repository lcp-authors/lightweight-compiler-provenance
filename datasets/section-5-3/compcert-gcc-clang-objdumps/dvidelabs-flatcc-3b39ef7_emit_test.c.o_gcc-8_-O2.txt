
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dbg_emitter>:
   0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   4:	mov	r5, r3
   8:	mov	r4, r1
   c:	strd	r6, [sp, #8]
  10:	mov	r6, r2
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	mov	r2, r5
  20:	ldr	r3, [sp, #32]
  24:	mov	r1, r6
  28:	strd	r8, [sp, #16]
  2c:	str	sl, [sp, #24]
  30:	str	lr, [sp, #28]
  34:	bl	0 <printf>
  38:	cmp	r6, #0
  3c:	ble	c4 <dbg_emitter+0xc4>
  40:	movw	r7, #0
  44:	movt	r7, #0
  48:	add	r6, r4, r6, lsl #3
  4c:	movw	r9, #0
  50:	movt	r9, #0
  54:	movw	r8, #0
  58:	movt	r8, #0
  5c:	b	78 <dbg_emitter+0x78>
  60:	cmp	r3, #0
  64:	beq	a4 <dbg_emitter+0xa4>
  68:	add	r4, r4, #8
  6c:	add	r5, r5, r2
  70:	cmp	r6, r4
  74:	beq	c4 <dbg_emitter+0xc4>
  78:	ldr	r3, [r4]
  7c:	ldr	r2, [r4, #4]
  80:	cmp	r3, r7
  84:	bne	60 <dbg_emitter+0x60>
  88:	mov	r1, r5
  8c:	mov	r0, r9
  90:	bl	0 <printf>
  94:	ldr	r3, [r4]
  98:	ldr	r2, [r4, #4]
  9c:	cmp	r3, #0
  a0:	bne	68 <dbg_emitter+0x68>
  a4:	mov	r1, r5
  a8:	mov	r0, r8
  ac:	bl	0 <printf>
  b0:	ldr	r2, [r4, #4]
  b4:	add	r4, r4, #8
  b8:	cmp	r6, r4
  bc:	add	r5, r5, r2
  c0:	bne	78 <dbg_emitter+0x78>
  c4:	ldrd	r4, [sp]
  c8:	mov	r0, #0
  cc:	ldrd	r6, [sp, #8]
  d0:	ldrd	r8, [sp, #16]
  d4:	ldr	sl, [sp, #24]
  d8:	add	sp, sp, #28
  dc:	pop	{pc}		; (ldr pc, [sp], #4)

000000e0 <debug_test>:
  e0:	mov	r2, #0
  e4:	mov	r3, #0
  e8:	strd	r4, [sp, #-16]!
  ec:	mov	r4, #0
  f0:	str	r6, [sp, #8]
  f4:	movw	r0, #0
  f8:	movt	r0, #0
  fc:	str	lr, [sp, #12]
 100:	sub	sp, sp, #280	; 0x118
 104:	strd	r2, [sp, #8]
 108:	strd	r2, [sp, #16]
 10c:	strd	r2, [sp, #24]
 110:	strd	r2, [sp, #32]
 114:	strd	r2, [sp, #40]	; 0x28
 118:	bl	0 <puts>
 11c:	mov	r3, r4
 120:	mov	r2, r4
 124:	str	r4, [sp]
 128:	add	r0, sp, #48	; 0x30
 12c:	movw	r1, #0
 130:	movt	r1, #0
 134:	bl	0 <flatcc_builder_custom_init>
 138:	mvn	ip, #-1073741824	; 0xc0000000
 13c:	mov	r2, #4
 140:	mov	r3, r2
 144:	add	r1, sp, #8
 148:	add	r0, sp, #48	; 0x30
 14c:	stm	sp, {r2, ip}
 150:	mov	r2, #10
 154:	bl	0 <flatcc_builder_create_vector>
 158:	mov	r5, r0
 15c:	mov	r3, r4
 160:	mov	r2, r4
 164:	mov	r1, r4
 168:	add	r0, sp, #48	; 0x30
 16c:	bl	0 <flatcc_builder_start_buffer>
 170:	subs	r4, r0, #0
 174:	beq	198 <debug_test+0xb8>
 178:	add	r0, sp, #48	; 0x30
 17c:	bl	0 <flatcc_builder_clear>
 180:	mov	r0, #0
 184:	add	sp, sp, #280	; 0x118
 188:	ldrd	r4, [sp]
 18c:	ldr	r6, [sp, #8]
 190:	add	sp, sp, #12
 194:	pop	{pc}		; (ldr pc, [sp], #4)
 198:	mov	r1, #3
 19c:	add	r0, sp, #48	; 0x30
 1a0:	bl	0 <flatcc_builder_start_table>
 1a4:	subs	r6, r0, #0
 1a8:	bne	240 <debug_test+0x160>
 1ac:	mov	r3, #8
 1b0:	mov	r1, r6
 1b4:	mov	r2, r3
 1b8:	add	r0, sp, #48	; 0x30
 1bc:	bl	0 <flatcc_builder_table_add>
 1c0:	cmp	r0, #0
 1c4:	beq	240 <debug_test+0x160>
 1c8:	mov	r2, #42	; 0x2a
 1cc:	mov	r3, #0
 1d0:	cmp	r5, #0
 1d4:	strd	r2, [r0]
 1d8:	beq	240 <debug_test+0x160>
 1dc:	mov	r1, #2
 1e0:	add	r0, sp, #48	; 0x30
 1e4:	bl	0 <flatcc_builder_table_add_offset>
 1e8:	subs	r2, r0, #0
 1ec:	beq	240 <debug_test+0x160>
 1f0:	mov	r3, #1
 1f4:	add	r0, sp, #48	; 0x30
 1f8:	str	r5, [r2]
 1fc:	mov	r1, r3
 200:	mov	r2, r3
 204:	bl	0 <flatcc_builder_table_add>
 208:	cmp	r0, #0
 20c:	beq	240 <debug_test+0x160>
 210:	mov	r3, #1
 214:	mov	r2, r6
 218:	movw	r1, #0
 21c:	movt	r1, #0
 220:	strb	r3, [r0]
 224:	add	r0, sp, #48	; 0x30
 228:	bl	0 <flatcc_builder_check_required>
 22c:	cmp	r0, #0
 230:	beq	250 <debug_test+0x170>
 234:	add	r0, sp, #48	; 0x30
 238:	bl	0 <flatcc_builder_end_table>
 23c:	mov	r4, r0
 240:	mov	r1, r4
 244:	add	r0, sp, #48	; 0x30
 248:	bl	0 <flatcc_builder_end_buffer>
 24c:	b	178 <debug_test+0x98>
 250:	movw	r1, #0
 254:	movt	r1, #0
 258:	ldr	r3, [pc, #12]	; 26c <debug_test+0x18c>
 25c:	movw	r0, #0
 260:	movt	r0, #0
 264:	mov	r2, #21
 268:	bl	0 <__assert_fail>
 26c:	.word	0x00000004

00000270 <emit_test>:
 270:	strd	r4, [sp, #-36]!	; 0xffffffdc
 274:	strd	r6, [sp, #8]
 278:	movw	r6, #0
 27c:	movt	r6, #0
 280:	strd	r8, [sp, #16]
 284:	ldrd	r2, [r6, #24]
 288:	strd	sl, [sp, #24]
 28c:	str	lr, [sp, #32]
 290:	sub	sp, sp, #348	; 0x15c
 294:	ldrd	r4, [r6, #16]
 298:	add	r0, sp, #112	; 0x70
 29c:	ldrd	r8, [r6, #48]	; 0x30
 2a0:	ldrh	lr, [r6, #72]	; 0x48
 2a4:	strd	r2, [sp, #60]	; 0x3c
 2a8:	ldrd	r2, [r6, #32]
 2ac:	strd	r4, [sp, #52]	; 0x34
 2b0:	ldrd	r4, [r6, #40]	; 0x28
 2b4:	ldrb	ip, [r6, #74]	; 0x4a
 2b8:	strd	r2, [sp, #68]	; 0x44
 2bc:	ldrd	r2, [r6, #56]	; 0x38
 2c0:	strd	r4, [sp, #76]	; 0x4c
 2c4:	strd	r8, [sp, #84]	; 0x54
 2c8:	ldrd	r4, [r6, #64]	; 0x40
 2cc:	strd	r2, [sp, #92]	; 0x5c
 2d0:	ldrd	r8, [r6, #76]	; 0x4c
 2d4:	ldrd	r2, [r6, #84]	; 0x54
 2d8:	strd	r8, [sp, #16]
 2dc:	strh	lr, [sp, #108]	; 0x6c
 2e0:	strd	r2, [sp, #24]
 2e4:	strd	r4, [sp, #100]	; 0x64
 2e8:	strb	ip, [sp, #110]	; 0x6e
 2ec:	bl	0 <flatcc_builder_init>
 2f0:	add	r0, sp, #112	; 0x70
 2f4:	bl	0 <flatcc_builder_get_emit_context>
 2f8:	mov	ip, #4
 2fc:	mvn	r2, #-1073741824	; 0xc0000000
 300:	mov	r3, ip
 304:	add	r1, sp, #16
 308:	mov	r4, r0
 30c:	add	r0, sp, #112	; 0x70
 310:	str	ip, [sp]
 314:	str	r2, [sp, #4]
 318:	mov	r2, ip
 31c:	bl	0 <flatcc_builder_create_vector>
 320:	mov	r3, #0
 324:	mov	r7, r0
 328:	mov	r2, r3
 32c:	add	r0, sp, #112	; 0x70
 330:	mov	r1, r3
 334:	bl	0 <flatcc_builder_start_buffer>
 338:	subs	r5, r0, #0
 33c:	beq	374 <emit_test+0x104>
 340:	ldr	r3, [r4]
 344:	ldr	r2, [r4, #4]
 348:	cmp	r2, r3
 34c:	beq	434 <emit_test+0x1c4>
 350:	mvn	r4, #0
 354:	mov	r0, r4
 358:	add	sp, sp, #348	; 0x15c
 35c:	ldrd	r4, [sp]
 360:	ldrd	r6, [sp, #8]
 364:	ldrd	r8, [sp, #16]
 368:	ldrd	sl, [sp, #24]
 36c:	add	sp, sp, #32
 370:	pop	{pc}		; (ldr pc, [sp], #4)
 374:	mov	r1, #3
 378:	add	r0, sp, #112	; 0x70
 37c:	bl	0 <flatcc_builder_start_table>
 380:	subs	r8, r0, #0
 384:	bne	418 <emit_test+0x1a8>
 388:	mov	r3, #8
 38c:	mov	r1, r8
 390:	mov	r2, r3
 394:	add	r0, sp, #112	; 0x70
 398:	bl	0 <flatcc_builder_table_add>
 39c:	cmp	r0, #0
 3a0:	beq	418 <emit_test+0x1a8>
 3a4:	mov	r2, #42	; 0x2a
 3a8:	mov	r3, #0
 3ac:	cmp	r7, #0
 3b0:	strd	r2, [r0]
 3b4:	beq	418 <emit_test+0x1a8>
 3b8:	mov	r1, #2
 3bc:	add	r0, sp, #112	; 0x70
 3c0:	bl	0 <flatcc_builder_table_add_offset>
 3c4:	subs	r2, r0, #0
 3c8:	beq	418 <emit_test+0x1a8>
 3cc:	mov	r3, #1
 3d0:	add	r0, sp, #112	; 0x70
 3d4:	str	r7, [r2]
 3d8:	mov	r1, r3
 3dc:	mov	r2, r3
 3e0:	bl	0 <flatcc_builder_table_add>
 3e4:	cmp	r0, #0
 3e8:	beq	418 <emit_test+0x1a8>
 3ec:	mov	r3, #1
 3f0:	mov	r2, r8
 3f4:	mov	r1, r6
 3f8:	strb	r3, [r0]
 3fc:	add	r0, sp, #112	; 0x70
 400:	bl	0 <flatcc_builder_check_required>
 404:	cmp	r0, #0
 408:	beq	738 <emit_test+0x4c8>
 40c:	add	r0, sp, #112	; 0x70
 410:	bl	0 <flatcc_builder_end_table>
 414:	mov	r5, r0
 418:	mov	r1, r5
 41c:	add	r0, sp, #112	; 0x70
 420:	bl	0 <flatcc_builder_end_buffer>
 424:	ldr	r3, [r4]
 428:	ldr	r2, [r4, #4]
 42c:	cmp	r2, r3
 430:	bne	350 <emit_test+0xe0>
 434:	ldr	r9, [r4, #8]
 438:	ldr	r7, [r4, #24]
 43c:	cmp	r9, #0
 440:	beq	350 <emit_test+0xe0>
 444:	add	r0, sp, #112	; 0x70
 448:	bl	0 <flatcc_builder_get_buffer_size>
 44c:	cmp	r0, r7
 450:	mov	r6, r0
 454:	bne	71c <emit_test+0x4ac>
 458:	movw	r4, #0
 45c:	movt	r4, #0
 460:	mov	r2, r0
 464:	movw	r1, #0
 468:	movt	r1, #0
 46c:	ldr	r0, [r4]
 470:	bl	0 <fprintf>
 474:	ldr	r5, [r4]
 478:	movw	r2, #0
 47c:	movt	r2, #0
 480:	movw	r1, #0
 484:	movt	r1, #0
 488:	mov	r0, r5
 48c:	bl	0 <fprintf>
 490:	cmp	r6, #0
 494:	beq	6ec <emit_test+0x47c>
 498:	movw	r3, #0
 49c:	movt	r3, #0
 4a0:	movw	sl, #0
 4a4:	movt	sl, #0
 4a8:	movw	r8, #0
 4ac:	movt	r8, #0
 4b0:	str	r3, [sp, #12]
 4b4:	sub	r6, r9, #1
 4b8:	mov	fp, #0
 4bc:	b	528 <emit_test+0x2b8>
 4c0:	cmp	fp, #0
 4c4:	beq	4d8 <emit_test+0x268>
 4c8:	add	r2, sp, #32
 4cc:	mov	r0, r5
 4d0:	ldr	r1, [sp, #12]
 4d4:	bl	0 <fprintf>
 4d8:	mov	r2, fp
 4dc:	mov	r1, sl
 4e0:	mov	r0, r5
 4e4:	bl	0 <fprintf>
 4e8:	ldrb	r2, [r6, #1]!
 4ec:	mov	r1, r8
 4f0:	mov	r0, r5
 4f4:	bl	0 <fprintf>
 4f8:	add	r3, sp, #344	; 0x158
 4fc:	mov	r1, #0
 500:	add	r4, r3, r4
 504:	add	fp, fp, #1
 508:	ldrb	r2, [r6]
 50c:	strb	r1, [r4, #-311]	; 0xfffffec9
 510:	sub	r1, r2, #32
 514:	cmp	r1, #94	; 0x5e
 518:	movhi	r2, #46	; 0x2e
 51c:	cmp	r7, fp
 520:	strb	r2, [r4, #-312]	; 0xfffffec8
 524:	beq	548 <emit_test+0x2d8>
 528:	ands	r4, fp, #15
 52c:	beq	4c0 <emit_test+0x250>
 530:	tst	fp, #7
 534:	bne	4e8 <emit_test+0x278>
 538:	mov	r1, r5
 53c:	mov	r0, #32
 540:	bl	0 <fputc>
 544:	b	4e8 <emit_test+0x278>
 548:	tst	r7, #15
 54c:	beq	57c <emit_test+0x30c>
 550:	movw	r6, #0
 554:	movt	r6, #0
 558:	mov	r4, r7
 55c:	add	r4, r4, #1
 560:	mov	r3, r5
 564:	mov	r2, #3
 568:	mov	r1, #1
 56c:	mov	r0, r6
 570:	bl	0 <fwrite>
 574:	tst	r4, #15
 578:	bne	55c <emit_test+0x2ec>
 57c:	add	r2, sp, #32
 580:	mov	r0, r5
 584:	movw	r1, #0
 588:	movt	r1, #0
 58c:	bl	0 <fprintf>
 590:	cmp	r7, #58	; 0x3a
 594:	bne	700 <emit_test+0x490>
 598:	mov	r2, r7
 59c:	add	r1, sp, #52	; 0x34
 5a0:	mov	r0, r9
 5a4:	bl	0 <memcmp>
 5a8:	subs	r4, r0, #0
 5ac:	bne	6d0 <emit_test+0x460>
 5b0:	ldr	r2, [r9]
 5b4:	adds	r3, r9, r2
 5b8:	beq	6b4 <emit_test+0x444>
 5bc:	ldr	r2, [r9, r2]
 5c0:	sub	r2, r3, r2
 5c4:	ldrh	r1, [r2]
 5c8:	cmp	r1, #5
 5cc:	bhi	5ec <emit_test+0x37c>
 5d0:	movw	r1, #0
 5d4:	movt	r1, #0
 5d8:	ldr	r3, [pc, #404]	; 774 <emit_test+0x504>
 5dc:	movw	r0, #0
 5e0:	movt	r0, #0
 5e4:	mov	r2, #112	; 0x70
 5e8:	bl	0 <__assert_fail>
 5ec:	ldrh	r0, [r2, #4]
 5f0:	cmp	r0, #0
 5f4:	beq	5d0 <emit_test+0x360>
 5f8:	ldrd	r6, [r3, r0]
 5fc:	cmp	r7, #0
 600:	cmpeq	r6, #42	; 0x2a
 604:	bne	5d0 <emit_test+0x360>
 608:	cmp	r1, #7
 60c:	bhi	62c <emit_test+0x3bc>
 610:	movw	r1, #0
 614:	movt	r1, #0
 618:	ldr	r3, [pc, #340]	; 774 <emit_test+0x504>
 61c:	movw	r0, #0
 620:	movt	r0, #0
 624:	mov	r2, #113	; 0x71
 628:	bl	0 <__assert_fail>
 62c:	ldrh	r0, [r2, #6]
 630:	cmp	r0, #0
 634:	beq	610 <emit_test+0x3a0>
 638:	ldrb	r0, [r3, r0]
 63c:	cmp	r0, #1
 640:	bne	610 <emit_test+0x3a0>
 644:	cmp	r1, #9
 648:	bls	698 <emit_test+0x428>
 64c:	ldrh	r2, [r2, #8]
 650:	cmp	r2, #0
 654:	beq	698 <emit_test+0x428>
 658:	ldr	r1, [r3, r2]
 65c:	add	r3, r3, r2
 660:	add	r2, r1, #4
 664:	adds	r3, r3, r2
 668:	beq	698 <emit_test+0x428>
 66c:	ldr	r2, [r3, #-4]
 670:	cmp	r2, #4
 674:	bne	698 <emit_test+0x428>
 678:	vldr	s15, [pc, #240]	; 770 <emit_test+0x500>
 67c:	vldr	s14, [r3, #8]
 680:	vcmp.f32	s14, s15
 684:	vmrs	APSR_nzcv, fpscr
 688:	bne	754 <emit_test+0x4e4>
 68c:	add	r0, sp, #112	; 0x70
 690:	bl	0 <flatcc_builder_clear>
 694:	b	354 <emit_test+0xe4>
 698:	movw	r1, #0
 69c:	movt	r1, #0
 6a0:	ldr	r3, [pc, #204]	; 774 <emit_test+0x504>
 6a4:	movw	r0, #0
 6a8:	movt	r0, #0
 6ac:	mov	r2, #114	; 0x72
 6b0:	bl	0 <__assert_fail>
 6b4:	movw	r1, #0
 6b8:	movt	r1, #0
 6bc:	ldr	r3, [pc, #180]	; 778 <emit_test+0x508>
 6c0:	movw	r0, #0
 6c4:	movt	r0, #0
 6c8:	mov	r2, #41	; 0x29
 6cc:	bl	0 <__assert_fail>
 6d0:	movw	r1, #0
 6d4:	movt	r1, #0
 6d8:	ldr	r3, [pc, #148]	; 774 <emit_test+0x504>
 6dc:	movw	r0, #0
 6e0:	movt	r0, #0
 6e4:	mov	r2, #108	; 0x6c
 6e8:	bl	0 <__assert_fail>
 6ec:	movw	r1, #0
 6f0:	movt	r1, #0
 6f4:	mov	r0, r5
 6f8:	add	r2, sp, #32
 6fc:	bl	0 <fprintf>
 700:	movw	r1, #0
 704:	movt	r1, #0
 708:	ldr	r3, [pc, #100]	; 774 <emit_test+0x504>
 70c:	movw	r0, #0
 710:	movt	r0, #0
 714:	mov	r2, #106	; 0x6a
 718:	bl	0 <__assert_fail>
 71c:	movw	r1, #0
 720:	movt	r1, #0
 724:	ldr	r3, [pc, #72]	; 774 <emit_test+0x504>
 728:	movw	r0, #0
 72c:	movt	r0, #0
 730:	mov	r2, #101	; 0x65
 734:	bl	0 <__assert_fail>
 738:	movw	r1, #0
 73c:	movt	r1, #0
 740:	movw	r0, #0
 744:	movt	r0, #0
 748:	add	r3, r6, #4
 74c:	mov	r2, #21
 750:	bl	0 <__assert_fail>
 754:	movw	r1, #0
 758:	movt	r1, #0
 75c:	ldr	r3, [pc, #16]	; 774 <emit_test+0x504>
 760:	movw	r0, #0
 764:	movt	r0, #0
 768:	mov	r2, #115	; 0x73
 76c:	bl	0 <__assert_fail>
 770:	.word	0x3f99999a
 774:	.word	0x0000005c
 778:	.word	0x00000068

Disassembly of section .text.startup:

00000000 <main>:
   0:	str	r4, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	bl	e0 <debug_test>
   c:	mov	r4, r0
  10:	bl	270 <emit_test>
  14:	orr	r0, r4, r0
  18:	ldr	r4, [sp]
  1c:	add	sp, sp, #4
  20:	pop	{pc}		; (ldr pc, [sp], #4)
