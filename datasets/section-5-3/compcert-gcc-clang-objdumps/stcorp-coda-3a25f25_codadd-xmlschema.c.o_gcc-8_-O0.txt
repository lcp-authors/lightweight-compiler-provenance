
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-xmlschema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_attributes>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #40	; 0x28
  10:	str	r0, [fp, #-40]	; 0xffffffd8
  14:	str	r1, [fp, #-44]	; 0xffffffd4
  18:	sub	r3, fp, #12
  1c:	mov	r1, r3
  20:	ldr	r0, [fp, #-44]	; 0xffffffd4
  24:	bl	0 <coda_type_get_attributes>
  28:	ldr	r3, [fp, #-12]
  2c:	sub	r2, fp, #16
  30:	mov	r1, r2
  34:	mov	r0, r3
  38:	bl	0 <coda_type_get_num_record_fields>
  3c:	mov	r3, #0
  40:	str	r3, [fp, #-8]
  44:	b	188 <print_attributes+0x188>
  48:	ldr	r3, [fp, #-12]
  4c:	sub	r2, fp, #28
  50:	ldr	r1, [fp, #-8]
  54:	mov	r0, r3
  58:	bl	0 <coda_type_get_record_field_real_name>
  5c:	ldr	r3, [fp, #-12]
  60:	sub	r2, fp, #32
  64:	ldr	r1, [fp, #-8]
  68:	mov	r0, r3
  6c:	bl	0 <coda_type_get_record_field_available_status>
  70:	ldr	r3, [fp, #-12]
  74:	sub	r2, fp, #24
  78:	ldr	r1, [fp, #-8]
  7c:	mov	r0, r3
  80:	bl	0 <coda_type_get_record_field_type>
  84:	ldr	r3, [fp, #-24]	; 0xffffffe8
  88:	sub	r2, fp, #20
  8c:	mov	r1, r2
  90:	mov	r0, r3
  94:	bl	0 <coda_type_get_class>
  98:	ldr	r3, [fp, #-28]	; 0xffffffe4
  9c:	mov	r2, r3
  a0:	movw	r1, #0
  a4:	movt	r1, #0
  a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
  ac:	bl	0 <fprintf>
  b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
  b4:	cmp	r3, #1
  b8:	bne	d4 <print_attributes+0xd4>
  bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
  c0:	mov	r2, #15
  c4:	mov	r1, #1
  c8:	movw	r0, #0
  cc:	movt	r0, #0
  d0:	bl	0 <fwrite>
  d4:	ldr	r3, [fp, #-20]	; 0xffffffec
  d8:	cmp	r3, #3
  dc:	beq	10c <print_attributes+0x10c>
  e0:	cmp	r3, #4
  e4:	beq	128 <print_attributes+0x128>
  e8:	cmp	r3, #2
  ec:	bne	144 <print_attributes+0x144>
  f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
  f4:	mov	r2, #18
  f8:	mov	r1, #1
  fc:	movw	r0, #0
 100:	movt	r0, #0
 104:	bl	0 <fwrite>
 108:	b	164 <print_attributes+0x164>
 10c:	ldr	r3, [fp, #-40]	; 0xffffffd8
 110:	mov	r2, #16
 114:	mov	r1, #1
 118:	movw	r0, #0
 11c:	movt	r0, #0
 120:	bl	0 <fwrite>
 124:	b	164 <print_attributes+0x164>
 128:	ldr	r3, [fp, #-40]	; 0xffffffd8
 12c:	mov	r2, #17
 130:	mov	r1, #1
 134:	movw	r0, #0
 138:	movt	r0, #0
 13c:	bl	0 <fwrite>
 140:	b	164 <print_attributes+0x164>
 144:	movw	r3, #0
 148:	movt	r3, #0
 14c:	mov	r2, #82	; 0x52
 150:	movw	r1, #0
 154:	movt	r1, #0
 158:	movw	r0, #0
 15c:	movt	r0, #0
 160:	bl	0 <__assert_fail>
 164:	ldr	r3, [fp, #-40]	; 0xffffffd8
 168:	mov	r2, #2
 16c:	mov	r1, #1
 170:	movw	r0, #0
 174:	movt	r0, #0
 178:	bl	0 <fwrite>
 17c:	ldr	r3, [fp, #-8]
 180:	add	r3, r3, #1
 184:	str	r3, [fp, #-8]
 188:	ldr	r3, [fp, #-16]
 18c:	ldr	r2, [fp, #-8]
 190:	cmp	r2, r3
 194:	blt	48 <print_attributes+0x48>
 198:	nop	{0}
 19c:	sub	sp, fp, #4
 1a0:	ldr	fp, [sp]
 1a4:	add	sp, sp, #4
 1a8:	pop	{pc}		; (ldr pc, [sp], #4)

000001ac <print_xml_element>:
 1ac:	str	fp, [sp, #-8]!
 1b0:	str	lr, [sp, #4]
 1b4:	add	fp, sp, #4
 1b8:	sub	sp, sp, #48	; 0x30
 1bc:	str	r0, [fp, #-48]	; 0xffffffd0
 1c0:	str	r1, [fp, #-52]	; 0xffffffcc
 1c4:	sub	r3, fp, #16
 1c8:	mov	r1, r3
 1cc:	ldr	r0, [fp, #-52]	; 0xffffffcc
 1d0:	bl	0 <coda_type_get_class>
 1d4:	ldr	r3, [fp, #-16]
 1d8:	cmp	r3, #0
 1dc:	beq	200 <print_xml_element+0x54>
 1e0:	movw	r3, #0
 1e4:	movt	r3, #0
 1e8:	mov	r2, #96	; 0x60
 1ec:	movw	r1, #0
 1f0:	movt	r1, #0
 1f4:	movw	r0, #0
 1f8:	movt	r0, #0
 1fc:	bl	0 <__assert_fail>
 200:	ldr	r3, [fp, #-48]	; 0xffffffd0
 204:	mov	r2, #29
 208:	mov	r1, #1
 20c:	movw	r0, #0
 210:	movt	r0, #0
 214:	bl	0 <fwrite>
 218:	sub	r3, fp, #20
 21c:	mov	r1, r3
 220:	ldr	r0, [fp, #-52]	; 0xffffffcc
 224:	bl	0 <coda_type_get_num_record_fields>
 228:	mov	r3, #0
 22c:	str	r3, [fp, #-8]
 230:	b	530 <print_xml_element+0x384>
 234:	sub	r3, fp, #32
 238:	mov	r2, r3
 23c:	ldr	r1, [fp, #-8]
 240:	ldr	r0, [fp, #-52]	; 0xffffffcc
 244:	bl	0 <coda_type_get_record_field_real_name>
 248:	sub	r3, fp, #28
 24c:	mov	r2, r3
 250:	ldr	r1, [fp, #-8]
 254:	ldr	r0, [fp, #-52]	; 0xffffffcc
 258:	bl	0 <coda_type_get_record_field_type>
 25c:	ldr	r3, [fp, #-28]	; 0xffffffe4
 260:	sub	r2, fp, #24
 264:	mov	r1, r2
 268:	mov	r0, r3
 26c:	bl	0 <coda_type_get_class>
 270:	ldr	r3, [fp, #-28]	; 0xffffffe4
 274:	sub	r2, fp, #36	; 0x24
 278:	mov	r1, r2
 27c:	mov	r0, r3
 280:	bl	0 <coda_type_get_format>
 284:	ldr	r3, [fp, #-32]	; 0xffffffe0
 288:	mov	r2, r3
 28c:	movw	r1, #0
 290:	movt	r1, #0
 294:	ldr	r0, [fp, #-48]	; 0xffffffd0
 298:	bl	0 <fprintf>
 29c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2a0:	cmp	r3, #1
 2a4:	bne	308 <print_xml_element+0x15c>
 2a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 2ac:	cmp	r3, #2
 2b0:	bne	308 <print_xml_element+0x15c>
 2b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
 2b8:	mov	r2, #36	; 0x24
 2bc:	mov	r1, #1
 2c0:	movw	r0, #0
 2c4:	movt	r0, #0
 2c8:	bl	0 <fwrite>
 2cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
 2d0:	sub	r2, fp, #28
 2d4:	mov	r1, r2
 2d8:	mov	r0, r3
 2dc:	bl	0 <coda_type_get_array_base_type>
 2e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
 2e4:	sub	r2, fp, #24
 2e8:	mov	r1, r2
 2ec:	mov	r0, r3
 2f0:	bl	0 <coda_type_get_class>
 2f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
 2f8:	sub	r2, fp, #36	; 0x24
 2fc:	mov	r1, r2
 300:	mov	r0, r3
 304:	bl	0 <coda_type_get_format>
 308:	ldr	r3, [fp, #-24]	; 0xffffffe8
 30c:	cmp	r3, #6
 310:	bne	350 <print_xml_element+0x1a4>
 314:	ldr	r3, [fp, #-28]	; 0xffffffe4
 318:	sub	r2, fp, #28
 31c:	mov	r1, r2
 320:	mov	r0, r3
 324:	bl	0 <coda_type_get_special_base_type>
 328:	ldr	r3, [fp, #-28]	; 0xffffffe4
 32c:	sub	r2, fp, #24
 330:	mov	r1, r2
 334:	mov	r0, r3
 338:	bl	0 <coda_type_get_class>
 33c:	ldr	r3, [fp, #-28]	; 0xffffffe4
 340:	sub	r2, fp, #36	; 0x24
 344:	mov	r1, r2
 348:	mov	r0, r3
 34c:	bl	0 <coda_type_get_format>
 350:	ldr	r3, [fp, #-24]	; 0xffffffe8
 354:	cmp	r3, #0
 358:	bne	37c <print_xml_element+0x1d0>
 35c:	ldr	r1, [fp, #-48]	; 0xffffffd0
 360:	mov	r0, #62	; 0x3e
 364:	bl	0 <fputc>
 368:	ldr	r3, [fp, #-28]	; 0xffffffe4
 36c:	mov	r1, r3
 370:	ldr	r0, [fp, #-48]	; 0xffffffd0
 374:	bl	1ac <print_xml_element>
 378:	b	50c <print_xml_element+0x360>
 37c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 380:	sub	r3, r3, #1
 384:	cmp	r3, #3
 388:	ldrls	pc, [pc, r3, lsl #2]
 38c:	b	40c <print_xml_element+0x260>
 390:	.word	0x000003a0
 394:	.word	0x000003dc
 398:	.word	0x000003ec
 39c:	.word	0x000003fc
 3a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3a4:	cmp	r3, #2
 3a8:	bne	3cc <print_xml_element+0x220>
 3ac:	movw	r3, #0
 3b0:	movt	r3, #0
 3b4:	mov	r2, #138	; 0x8a
 3b8:	movw	r1, #0
 3bc:	movt	r1, #0
 3c0:	movw	r0, #0
 3c4:	movt	r0, #0
 3c8:	bl	0 <__assert_fail>
 3cc:	movw	r3, #0
 3d0:	movt	r3, #0
 3d4:	str	r3, [fp, #-12]
 3d8:	b	42c <print_xml_element+0x280>
 3dc:	movw	r3, #0
 3e0:	movt	r3, #0
 3e4:	str	r3, [fp, #-12]
 3e8:	b	42c <print_xml_element+0x280>
 3ec:	movw	r3, #0
 3f0:	movt	r3, #0
 3f4:	str	r3, [fp, #-12]
 3f8:	b	42c <print_xml_element+0x280>
 3fc:	movw	r3, #0
 400:	movt	r3, #0
 404:	str	r3, [fp, #-12]
 408:	b	42c <print_xml_element+0x280>
 40c:	movw	r3, #0
 410:	movt	r3, #0
 414:	mov	r2, #151	; 0x97
 418:	movw	r1, #0
 41c:	movt	r1, #0
 420:	movw	r0, #0
 424:	movt	r0, #0
 428:	bl	0 <__assert_fail>
 42c:	ldr	r3, [fp, #-28]	; 0xffffffe4
 430:	sub	r2, fp, #40	; 0x28
 434:	mov	r1, r2
 438:	mov	r0, r3
 43c:	bl	0 <coda_type_has_attributes>
 440:	ldr	r3, [fp, #-40]	; 0xffffffd8
 444:	cmp	r3, #0
 448:	beq	4f8 <print_xml_element+0x34c>
 44c:	ldr	r1, [fp, #-48]	; 0xffffffd0
 450:	mov	r0, #62	; 0x3e
 454:	bl	0 <fputc>
 458:	ldr	r3, [fp, #-48]	; 0xffffffd0
 45c:	mov	r2, #16
 460:	mov	r1, #1
 464:	movw	r0, #0
 468:	movt	r0, #0
 46c:	bl	0 <fwrite>
 470:	ldr	r3, [fp, #-48]	; 0xffffffd0
 474:	mov	r2, #18
 478:	mov	r1, #1
 47c:	movw	r0, #0
 480:	movt	r0, #0
 484:	bl	0 <fwrite>
 488:	ldr	r2, [fp, #-12]
 48c:	movw	r1, #0
 490:	movt	r1, #0
 494:	ldr	r0, [fp, #-48]	; 0xffffffd0
 498:	bl	0 <fprintf>
 49c:	ldr	r3, [fp, #-28]	; 0xffffffe4
 4a0:	mov	r1, r3
 4a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
 4a8:	bl	0 <print_attributes>
 4ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
 4b0:	mov	r2, #15
 4b4:	mov	r1, #1
 4b8:	movw	r0, #0
 4bc:	movt	r0, #0
 4c0:	bl	0 <fwrite>
 4c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
 4c8:	mov	r2, #19
 4cc:	mov	r1, #1
 4d0:	movw	r0, #0
 4d4:	movt	r0, #0
 4d8:	bl	0 <fwrite>
 4dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
 4e0:	mov	r2, #17
 4e4:	mov	r1, #1
 4e8:	movw	r0, #0
 4ec:	movt	r0, #0
 4f0:	bl	0 <fwrite>
 4f4:	b	50c <print_xml_element+0x360>
 4f8:	ldr	r2, [fp, #-12]
 4fc:	movw	r1, #0
 500:	movt	r1, #0
 504:	ldr	r0, [fp, #-48]	; 0xffffffd0
 508:	bl	0 <fprintf>
 50c:	ldr	r3, [fp, #-48]	; 0xffffffd0
 510:	mov	r2, #13
 514:	mov	r1, #1
 518:	movw	r0, #0
 51c:	movt	r0, #0
 520:	bl	0 <fwrite>
 524:	ldr	r3, [fp, #-8]
 528:	add	r3, r3, #1
 52c:	str	r3, [fp, #-8]
 530:	ldr	r3, [fp, #-20]	; 0xffffffec
 534:	ldr	r2, [fp, #-8]
 538:	cmp	r2, r3
 53c:	blt	234 <print_xml_element+0x88>
 540:	ldr	r3, [fp, #-48]	; 0xffffffd0
 544:	mov	r2, #14
 548:	mov	r1, #1
 54c:	movw	r0, #0
 550:	movt	r0, #0
 554:	bl	0 <fwrite>
 558:	ldr	r1, [fp, #-52]	; 0xffffffcc
 55c:	ldr	r0, [fp, #-48]	; 0xffffffd0
 560:	bl	0 <print_attributes>
 564:	ldr	r3, [fp, #-48]	; 0xffffffd0
 568:	mov	r2, #17
 56c:	mov	r1, #1
 570:	movw	r0, #0
 574:	movt	r0, #0
 578:	bl	0 <fwrite>
 57c:	nop	{0}
 580:	sub	sp, fp, #4
 584:	ldr	fp, [sp]
 588:	add	sp, sp, #4
 58c:	pop	{pc}		; (ldr pc, [sp], #4)

00000590 <generate_xmlschema>:
 590:	str	r4, [sp, #-12]!
 594:	str	fp, [sp, #4]
 598:	str	lr, [sp, #8]
 59c:	add	fp, sp, #8
 5a0:	sub	sp, sp, #44	; 0x2c
 5a4:	str	r0, [fp, #-40]	; 0xffffffd8
 5a8:	str	r1, [fp, #-44]	; 0xffffffd4
 5ac:	str	r2, [fp, #-48]	; 0xffffffd0
 5b0:	str	r3, [fp, #-52]	; 0xffffffcc
 5b4:	movw	r3, #0
 5b8:	movt	r3, #0
 5bc:	ldr	r3, [r3]
 5c0:	str	r3, [fp, #-16]
 5c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
 5c8:	bl	0 <coda_data_dictionary_get_product_class>
 5cc:	str	r0, [fp, #-20]	; 0xffffffec
 5d0:	ldr	r3, [fp, #-20]	; 0xffffffec
 5d4:	cmp	r3, #0
 5d8:	bne	620 <generate_xmlschema+0x90>
 5dc:	movw	r3, #0
 5e0:	movt	r3, #0
 5e4:	ldr	r4, [r3]
 5e8:	ldr	r3, [pc, #752]	; 8e0 <generate_xmlschema+0x350>
 5ec:	ldr	r3, [pc, r3]
 5f0:	mrc	15, 0, r2, cr13, cr0, {3}
 5f4:	ldr	r3, [r2, r3]
 5f8:	mov	r0, r3
 5fc:	bl	0 <coda_errno_to_string>
 600:	mov	r3, r0
 604:	mov	r2, r3
 608:	movw	r1, #0
 60c:	movt	r1, #0
 610:	mov	r0, r4
 614:	bl	0 <fprintf>
 618:	mov	r0, #1
 61c:	bl	0 <exit>
 620:	ldr	r1, [fp, #-48]	; 0xffffffd0
 624:	ldr	r0, [fp, #-20]	; 0xffffffec
 628:	bl	0 <coda_product_class_get_product_type>
 62c:	str	r0, [fp, #-24]	; 0xffffffe8
 630:	ldr	r3, [fp, #-24]	; 0xffffffe8
 634:	cmp	r3, #0
 638:	bne	680 <generate_xmlschema+0xf0>
 63c:	movw	r3, #0
 640:	movt	r3, #0
 644:	ldr	r4, [r3]
 648:	ldr	r3, [pc, #660]	; 8e4 <generate_xmlschema+0x354>
 64c:	ldr	r3, [pc, r3]
 650:	mrc	15, 0, r2, cr13, cr0, {3}
 654:	ldr	r3, [r2, r3]
 658:	mov	r0, r3
 65c:	bl	0 <coda_errno_to_string>
 660:	mov	r3, r0
 664:	mov	r2, r3
 668:	movw	r1, #0
 66c:	movt	r1, #0
 670:	mov	r0, r4
 674:	bl	0 <fprintf>
 678:	mov	r0, #1
 67c:	bl	0 <exit>
 680:	ldr	r1, [fp, #-52]	; 0xffffffcc
 684:	ldr	r0, [fp, #-24]	; 0xffffffe8
 688:	bl	0 <coda_product_type_get_product_definition_by_version>
 68c:	str	r0, [fp, #-28]	; 0xffffffe4
 690:	ldr	r3, [fp, #-28]	; 0xffffffe4
 694:	cmp	r3, #0
 698:	bne	6e0 <generate_xmlschema+0x150>
 69c:	movw	r3, #0
 6a0:	movt	r3, #0
 6a4:	ldr	r4, [r3]
 6a8:	ldr	r3, [pc, #568]	; 8e8 <generate_xmlschema+0x358>
 6ac:	ldr	r3, [pc, r3]
 6b0:	mrc	15, 0, r2, cr13, cr0, {3}
 6b4:	ldr	r3, [r2, r3]
 6b8:	mov	r0, r3
 6bc:	bl	0 <coda_errno_to_string>
 6c0:	mov	r3, r0
 6c4:	mov	r2, r3
 6c8:	movw	r1, #0
 6cc:	movt	r1, #0
 6d0:	mov	r0, r4
 6d4:	bl	0 <fprintf>
 6d8:	mov	r0, #1
 6dc:	bl	0 <exit>
 6e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
 6e4:	ldr	r3, [r3]
 6e8:	cmp	r3, #2
 6ec:	beq	718 <generate_xmlschema+0x188>
 6f0:	movw	r3, #0
 6f4:	movt	r3, #0
 6f8:	ldr	r3, [r3]
 6fc:	mov	r2, #36	; 0x24
 700:	mov	r1, #1
 704:	movw	r0, #0
 708:	movt	r0, #0
 70c:	bl	0 <fwrite>
 710:	mov	r0, #1
 714:	bl	0 <exit>
 718:	ldr	r3, [fp, #-28]	; 0xffffffe4
 71c:	ldr	r3, [r3, #28]
 720:	cmp	r3, #0
 724:	bne	750 <generate_xmlschema+0x1c0>
 728:	movw	r3, #0
 72c:	movt	r3, #0
 730:	ldr	r3, [r3]
 734:	mov	r2, #49	; 0x31
 738:	mov	r1, #1
 73c:	movw	r0, #0
 740:	movt	r0, #0
 744:	bl	0 <fwrite>
 748:	mov	r0, #1
 74c:	bl	0 <exit>
 750:	ldr	r3, [fp, #-40]	; 0xffffffd8
 754:	cmp	r3, #0
 758:	beq	7a4 <generate_xmlschema+0x214>
 75c:	movw	r1, #0
 760:	movt	r1, #0
 764:	ldr	r0, [fp, #-40]	; 0xffffffd8
 768:	bl	0 <fopen>
 76c:	str	r0, [fp, #-16]
 770:	ldr	r3, [fp, #-16]
 774:	cmp	r3, #0
 778:	bne	7a4 <generate_xmlschema+0x214>
 77c:	movw	r3, #0
 780:	movt	r3, #0
 784:	ldr	r3, [r3]
 788:	ldr	r2, [fp, #-40]	; 0xffffffd8
 78c:	movw	r1, #0
 790:	movt	r1, #0
 794:	mov	r0, r3
 798:	bl	0 <fprintf>
 79c:	mov	r0, #1
 7a0:	bl	0 <exit>
 7a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
 7a8:	ldr	r3, [r3, #28]
 7ac:	ldr	r3, [r3, #8]
 7b0:	cmp	r3, #0
 7b4:	beq	7d8 <generate_xmlschema+0x248>
 7b8:	movw	r3, #0
 7bc:	movt	r3, #0
 7c0:	mov	r2, #229	; 0xe5
 7c4:	movw	r1, #0
 7c8:	movt	r1, #0
 7cc:	movw	r0, #0
 7d0:	movt	r0, #0
 7d4:	bl	0 <__assert_fail>
 7d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
 7dc:	ldr	r3, [r3, #28]
 7e0:	str	r3, [fp, #-32]	; 0xffffffe0
 7e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
 7e8:	ldr	r3, [r3, #48]	; 0x30
 7ec:	cmp	r3, #1
 7f0:	beq	814 <generate_xmlschema+0x284>
 7f4:	movw	r3, #0
 7f8:	movt	r3, #0
 7fc:	mov	r2, #231	; 0xe7
 800:	movw	r1, #0
 804:	movt	r1, #0
 808:	movw	r0, #0
 80c:	movt	r0, #0
 810:	bl	0 <__assert_fail>
 814:	ldr	r3, [fp, #-16]
 818:	mov	r2, #39	; 0x27
 81c:	mov	r1, #1
 820:	movw	r0, #0
 824:	movt	r0, #0
 828:	bl	0 <fwrite>
 82c:	ldr	r3, [fp, #-16]
 830:	mov	r2, #56	; 0x38
 834:	mov	r1, #1
 838:	movw	r0, #0
 83c:	movt	r0, #0
 840:	bl	0 <fwrite>
 844:	ldr	r3, [fp, #-32]	; 0xffffffe0
 848:	ldr	r3, [r3, #52]	; 0x34
 84c:	ldr	r3, [r3]
 850:	ldr	r3, [r3, #4]
 854:	mov	r2, r3
 858:	movw	r1, #0
 85c:	movt	r1, #0
 860:	ldr	r0, [fp, #-16]
 864:	bl	0 <fprintf>
 868:	ldr	r3, [fp, #-32]	; 0xffffffe0
 86c:	ldr	r3, [r3, #52]	; 0x34
 870:	ldr	r3, [r3]
 874:	ldr	r3, [r3, #8]
 878:	mov	r1, r3
 87c:	ldr	r0, [fp, #-16]
 880:	bl	1ac <print_xml_element>
 884:	ldr	r3, [fp, #-16]
 888:	mov	r2, #14
 88c:	mov	r1, #1
 890:	movw	r0, #0
 894:	movt	r0, #0
 898:	bl	0 <fwrite>
 89c:	ldr	r3, [fp, #-16]
 8a0:	mov	r2, #13
 8a4:	mov	r1, #1
 8a8:	movw	r0, #0
 8ac:	movt	r0, #0
 8b0:	bl	0 <fwrite>
 8b4:	ldr	r3, [fp, #-40]	; 0xffffffd8
 8b8:	cmp	r3, #0
 8bc:	beq	8c8 <generate_xmlschema+0x338>
 8c0:	ldr	r0, [fp, #-16]
 8c4:	bl	0 <fclose>
 8c8:	nop	{0}
 8cc:	sub	sp, fp, #8
 8d0:	ldr	r4, [sp]
 8d4:	ldr	fp, [sp, #4]
 8d8:	add	sp, sp, #8
 8dc:	pop	{pc}		; (ldr pc, [sp], #4)
 8e0:	.word	0x000002ec
 8e4:	.word	0x00000290
 8e8:	.word	0x00000234
