
../repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-debug.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
       0:	mov	ip, sp
       4:	push	{r0, r1, r2, r3}
       8:	sub	sp, sp, #16
       c:	str	ip, [sp]
      10:	str	lr, [sp, #4]
      14:	add	r1, sp, #8
      18:	add	lr, sp, #20
      1c:	str	lr, [r1]
      20:	ldr	r2, [pc, #32]	; 48 <ff_printf+0x48>
      24:	ldr	r1, [r2]
      28:	ldr	r2, [sp, #8]
      2c:	mov	r3, r0
      30:	mov	r0, r1
      34:	mov	r1, r3
      38:	bl	0 <vfprintf>
      3c:	ldr	lr, [sp, #4]
      40:	add	sp, sp, #32
      44:	bx	lr
      48:	.word	0x00000000

0000004c <fi_printf>:
      4c:	mov	ip, sp
      50:	push	{r0, r1, r2, r3}
      54:	sub	sp, sp, #24
      58:	str	ip, [sp]
      5c:	str	lr, [sp, #4]
      60:	str	r4, [sp, #8]
      64:	str	r5, [sp, #12]
      68:	mov	r4, r0
      6c:	ldr	r3, [pc, #140]	; 100 <fi_printf+0xb4>
      70:	ldr	r0, [r3]
      74:	cmp	r0, #0
      78:	bge	90 <fi_printf+0x44>
      7c:	ldr	r0, [pc, #108]	; f0 <fi_printf+0xa4>
      80:	ldr	r1, [pc, #112]	; f8 <fi_printf+0xac>
      84:	mov	r2, #44	; 0x2c
      88:	ldr	r3, [pc, #100]	; f4 <fi_printf+0xa8>
      8c:	bl	0 <__assert_fail>
      90:	ldr	r1, [pc, #104]	; 100 <fi_printf+0xb4>
      94:	ldr	r5, [r1]
      98:	cmp	r5, #0
      9c:	ble	b8 <fi_printf+0x6c>
      a0:	ldr	ip, [pc, #84]	; fc <fi_printf+0xb0>
      a4:	ldr	r0, [ip]
      a8:	ldr	r1, [pc, #60]	; ec <fi_printf+0xa0>
      ac:	bl	0 <fprintf>
      b0:	sub	r5, r5, #1
      b4:	b	98 <fi_printf+0x4c>
      b8:	add	r1, sp, #16
      bc:	add	lr, sp, #28
      c0:	str	lr, [r1]
      c4:	ldr	r2, [pc, #48]	; fc <fi_printf+0xb0>
      c8:	ldr	r0, [r2]
      cc:	ldr	r2, [sp, #16]
      d0:	mov	r1, r4
      d4:	bl	0 <vfprintf>
      d8:	ldr	r4, [sp, #8]
      dc:	ldr	r5, [sp, #12]
      e0:	ldr	lr, [sp, #4]
      e4:	add	sp, sp, #40	; 0x28
      e8:	bx	lr
      ec:	.word	0x00000099
      f0:	.word	0x0000013b
      f4:	.word	0x00000196
      f8:	.word	0x000000d6
	...

00000104 <print_escaped>:
     104:	mov	ip, sp
     108:	sub	sp, sp, #24
     10c:	str	ip, [sp]
     110:	str	lr, [sp, #4]
     114:	str	r4, [sp, #8]
     118:	str	r5, [sp, #12]
     11c:	str	r6, [sp, #16]
     120:	mov	r4, r1
     124:	mov	r5, r0
     128:	mov	r6, #0
     12c:	cmp	r6, r4
     130:	bge	228 <print_escaped+0x124>
     134:	ldrb	r3, [r5, r6]
     138:	and	r1, r3, #255	; 0xff
     13c:	cmp	r1, #11
     140:	bcs	194 <print_escaped+0x90>
     144:	cmp	r1, #9
     148:	bcs	174 <print_escaped+0x70>
     14c:	cmp	r1, #7
     150:	beq	168 <print_escaped+0x64>
     154:	cmp	r1, #8
     158:	bne	1d8 <print_escaped+0xd4>
     15c:	ldr	r0, [pc, #240]	; 254 <print_escaped+0x150>
     160:	bl	0 <ff_printf>
     164:	b	220 <print_escaped+0x11c>
     168:	ldr	r0, [pc, #232]	; 258 <print_escaped+0x154>
     16c:	bl	0 <ff_printf>
     170:	b	220 <print_escaped+0x11c>
     174:	cmp	r1, #9
     178:	bne	188 <print_escaped+0x84>
     17c:	ldr	r0, [pc, #216]	; 25c <print_escaped+0x158>
     180:	bl	0 <ff_printf>
     184:	b	220 <print_escaped+0x11c>
     188:	ldr	r0, [pc, #188]	; 24c <print_escaped+0x148>
     18c:	bl	0 <ff_printf>
     190:	b	220 <print_escaped+0x11c>
     194:	cmp	r1, #13
     198:	bcs	1bc <print_escaped+0xb8>
     19c:	cmp	r1, #11
     1a0:	bne	1b0 <print_escaped+0xac>
     1a4:	ldr	r0, [pc, #156]	; 248 <print_escaped+0x144>
     1a8:	bl	0 <ff_printf>
     1ac:	b	220 <print_escaped+0x11c>
     1b0:	ldr	r0, [pc, #152]	; 250 <print_escaped+0x14c>
     1b4:	bl	0 <ff_printf>
     1b8:	b	220 <print_escaped+0x11c>
     1bc:	cmp	r1, #13
     1c0:	beq	218 <print_escaped+0x114>
     1c4:	cmp	r1, #92	; 0x5c
     1c8:	bne	1d8 <print_escaped+0xd4>
     1cc:	ldr	r0, [pc, #112]	; 244 <print_escaped+0x140>
     1d0:	bl	0 <ff_printf>
     1d4:	b	220 <print_escaped+0x11c>
     1d8:	cmp	r1, #126	; 0x7e
     1dc:	movle	r2, #1
     1e0:	movgt	r2, #0
     1e4:	mov	r0, #0
     1e8:	cmp	r1, #32
     1ec:	movge	r2, r2
     1f0:	movlt	r2, r0
     1f4:	cmp	r2, #0
     1f8:	bne	20c <print_escaped+0x108>
     1fc:	ldr	r0, [pc, #60]	; 240 <print_escaped+0x13c>
     200:	and	r1, r1, #255	; 0xff
     204:	bl	0 <ff_printf>
     208:	b	220 <print_escaped+0x11c>
     20c:	ldr	r0, [pc, #80]	; 264 <print_escaped+0x160>
     210:	bl	0 <ff_printf>
     214:	b	220 <print_escaped+0x11c>
     218:	ldr	r0, [pc, #64]	; 260 <print_escaped+0x15c>
     21c:	bl	0 <ff_printf>
     220:	add	r6, r6, #1
     224:	b	12c <print_escaped+0x28>
     228:	ldr	r4, [sp, #8]
     22c:	ldr	r5, [sp, #12]
     230:	ldr	r6, [sp, #16]
     234:	ldr	lr, [sp, #4]
     238:	add	sp, sp, #24
     23c:	bx	lr
     240:	.word	0x0000003d
     244:	.word	0x0000000d
     248:	.word	0x00000147
     24c:	.word	0x00000183
     250:	.word	0x00000066
     254:	.word	0x0000001a
     258:	.word	0x0000003a
     25c:	.word	0x00000069
     260:	.word	0x00000063
     264:	.word	0x00000043

00000268 <print_data>:
     268:	mov	ip, sp
     26c:	sub	sp, sp, #952	; 0x3b8
     270:	str	ip, [sp, #8]
     274:	str	lr, [sp, #12]
     278:	str	r4, [sp, #16]
     27c:	str	r5, [sp, #20]
     280:	str	r6, [sp, #24]
     284:	str	r7, [sp, #28]
     288:	str	r8, [sp, #32]
     28c:	mov	r5, r1
     290:	mov	r4, r0
     294:	add	r1, sp, #44	; 0x2c
     298:	mov	r0, r4
     29c:	bl	0 <coda_cursor_has_attributes>
     2a0:	cmp	r0, #0
     2a4:	beq	2ac <print_data+0x44>
     2a8:	bl	0 <handle_coda_error>
     2ac:	ldr	r3, [sp, #44]	; 0x2c
     2b0:	cmp	r3, #0
     2b4:	beq	308 <print_data+0xa0>
     2b8:	mov	r0, r4
     2bc:	bl	0 <coda_cursor_goto_attributes>
     2c0:	cmp	r0, #0
     2c4:	beq	2cc <print_data+0x64>
     2c8:	bl	0 <handle_coda_error>
     2cc:	ldr	r0, [pc, #2936]	; e4c <print_data+0xbe4>
     2d0:	bl	4c <fi_printf>
     2d4:	ldr	r2, [pc, #2924]	; e48 <print_data+0xbe0>
     2d8:	ldr	ip, [r2]
     2dc:	add	r3, ip, #1
     2e0:	str	r3, [r2]
     2e4:	mov	r1, r5
     2e8:	mov	r0, r4
     2ec:	bl	268 <print_data>
     2f0:	ldr	r0, [pc, #2896]	; e48 <print_data+0xbe0>
     2f4:	ldr	r2, [r0]
     2f8:	sub	r1, r2, #1
     2fc:	str	r1, [r0]
     300:	mov	r0, r4
     304:	bl	0 <coda_cursor_goto_parent>
     308:	add	r1, sp, #40	; 0x28
     30c:	mov	r0, r4
     310:	bl	0 <coda_cursor_get_type_class>
     314:	cmp	r0, #0
     318:	beq	320 <print_data+0xb8>
     31c:	bl	0 <handle_coda_error>
     320:	ldr	r3, [sp, #40]	; 0x28
     324:	cmp	r3, #7
     328:	bcs	db0 <print_data+0xb48>
     32c:	add	pc, pc, r3, lsl #2
     330:	nop	{0}
     334:	b	350 <print_data+0xe8>
     338:	b	650 <print_data+0x3e8>
     33c:	b	878 <print_data+0x610>
     340:	b	878 <print_data+0x610>
     344:	b	878 <print_data+0x610>
     348:	b	878 <print_data+0x610>
     34c:	b	c2c <print_data+0x9c4>
     350:	add	r1, sp, #48	; 0x30
     354:	mov	r0, r4
     358:	bl	0 <coda_cursor_get_num_elements>
     35c:	cmp	r0, #0
     360:	beq	368 <print_data+0x100>
     364:	bl	0 <handle_coda_error>
     368:	ldr	ip, [sp, #48]	; 0x30
     36c:	cmp	ip, #0
     370:	ble	db0 <print_data+0xb48>
     374:	add	r1, sp, #52	; 0x34
     378:	mov	r0, r4
     37c:	bl	0 <coda_cursor_get_type>
     380:	cmp	r0, #0
     384:	beq	38c <print_data+0x124>
     388:	bl	0 <handle_coda_error>
     38c:	ldr	r0, [sp, #52]	; 0x34
     390:	add	r1, sp, #56	; 0x38
     394:	bl	0 <coda_type_get_record_union_status>
     398:	cmp	r0, #0
     39c:	beq	3a4 <print_data+0x13c>
     3a0:	bl	0 <handle_coda_error>
     3a4:	ldr	r0, [sp, #56]	; 0x38
     3a8:	cmp	r0, #0
     3ac:	bne	518 <print_data+0x2b0>
     3b0:	mov	r0, r4
     3b4:	bl	0 <coda_cursor_goto_first_record_field>
     3b8:	cmp	r0, #0
     3bc:	beq	3c4 <print_data+0x15c>
     3c0:	bl	0 <handle_coda_error>
     3c4:	mov	r3, #0
     3c8:	str	r3, [sp, #60]	; 0x3c
     3cc:	ldr	r1, [sp, #60]	; 0x3c
     3d0:	ldr	r3, [sp, #48]	; 0x30
     3d4:	cmp	r1, r3
     3d8:	bge	50c <print_data+0x2a4>
     3dc:	ldr	r0, [sp, #52]	; 0x34
     3e0:	add	r2, sp, #68	; 0x44
     3e4:	bl	0 <coda_type_get_record_field_name>
     3e8:	cmp	r0, #0
     3ec:	beq	3f4 <print_data+0x18c>
     3f0:	bl	0 <handle_coda_error>
     3f4:	ldr	r0, [pc, #2568]	; e04 <print_data+0xb9c>
     3f8:	ldr	r1, [sp, #68]	; 0x44
     3fc:	bl	4c <fi_printf>
     400:	ldr	r1, [pc, #2520]	; de0 <print_data+0xb78>
     404:	ldr	r1, [r1]
     408:	cmp	r1, #0
     40c:	beq	47c <print_data+0x214>
     410:	add	r1, sp, #136	; 0x88
     414:	mov	r0, r4
     418:	bl	0 <coda_cursor_get_file_bit_offset>
     41c:	cmp	r0, #0
     420:	beq	428 <print_data+0x1c0>
     424:	bl	0 <handle_coda_error>
     428:	ldr	r2, [sp, #136]	; 0x88
     42c:	ldr	ip, [sp, #140]	; 0x8c
     430:	cmp	ip, #0
     434:	blt	47c <print_data+0x214>
     438:	asr	r1, ip, #3
     43c:	lsr	r0, r2, #3
     440:	orr	r0, r0, ip, lsl #29
     444:	add	r2, sp, #216	; 0xd8
     448:	bl	0 <coda_str64>
     44c:	ldr	r0, [pc, #2436]	; dd8 <print_data+0xb70>
     450:	add	r1, sp, #216	; 0xd8
     454:	bl	0 <ff_printf>
     458:	ldr	r3, [sp, #136]	; 0x88
     45c:	mov	r0, #0
     460:	and	r1, r3, #7
     464:	mov	r2, r1
     468:	orr	r0, r0, r2
     46c:	cmp	r0, #0
     470:	beq	47c <print_data+0x214>
     474:	ldr	r0, [pc, #2428]	; df8 <print_data+0xb90>
     478:	bl	0 <ff_printf>
     47c:	ldr	r0, [pc, #2480]	; e34 <print_data+0xbcc>
     480:	bl	0 <ff_printf>
     484:	ldr	ip, [pc, #2492]	; e48 <print_data+0xbe0>
     488:	ldr	r2, [ip]
     48c:	add	r0, r2, #1
     490:	str	r0, [ip]
     494:	ldr	r0, [pc, #2484]	; e50 <print_data+0xbe8>
     498:	ldr	r1, [r0]
     49c:	cmp	r1, #0
     4a0:	blt	4b8 <print_data+0x250>
     4a4:	cmp	r5, r1
     4a8:	blt	4b8 <print_data+0x250>
     4ac:	ldr	r0, [pc, #2332]	; dd0 <print_data+0xb68>
     4b0:	bl	4c <fi_printf>
     4b4:	b	4c4 <print_data+0x25c>
     4b8:	add	r1, r5, #1
     4bc:	mov	r0, r4
     4c0:	bl	268 <print_data>
     4c4:	ldr	r0, [pc, #2428]	; e48 <print_data+0xbe0>
     4c8:	ldr	r1, [r0]
     4cc:	sub	r1, r1, #1
     4d0:	str	r1, [r0]
     4d4:	ldr	r3, [sp, #60]	; 0x3c
     4d8:	ldr	r2, [sp, #48]	; 0x30
     4dc:	sub	ip, r2, #1
     4e0:	cmp	r3, ip
     4e4:	bge	4fc <print_data+0x294>
     4e8:	mov	r0, r4
     4ec:	bl	0 <coda_cursor_goto_next_record_field>
     4f0:	cmp	r0, #0
     4f4:	beq	4fc <print_data+0x294>
     4f8:	bl	0 <handle_coda_error>
     4fc:	ldr	r3, [sp, #60]	; 0x3c
     500:	add	r1, r3, #1
     504:	str	r1, [sp, #60]	; 0x3c
     508:	b	3cc <print_data+0x164>
     50c:	mov	r0, r4
     510:	bl	0 <coda_cursor_goto_parent>
     514:	b	db0 <print_data+0xb48>
     518:	add	r1, sp, #60	; 0x3c
     51c:	mov	r0, r4
     520:	bl	0 <coda_cursor_get_available_union_field_index>
     524:	cmp	r0, #0
     528:	beq	530 <print_data+0x2c8>
     52c:	bl	0 <handle_coda_error>
     530:	ldr	r0, [sp, #52]	; 0x34
     534:	ldr	r1, [sp, #60]	; 0x3c
     538:	add	r2, sp, #64	; 0x40
     53c:	bl	0 <coda_type_get_record_field_name>
     540:	cmp	r0, #0
     544:	beq	54c <print_data+0x2e4>
     548:	bl	0 <handle_coda_error>
     54c:	ldr	r1, [sp, #60]	; 0x3c
     550:	mov	r0, r4
     554:	bl	0 <coda_cursor_goto_record_field_by_index>
     558:	cmp	r0, #0
     55c:	beq	564 <print_data+0x2fc>
     560:	bl	0 <handle_coda_error>
     564:	ldr	r0, [pc, #2200]	; e04 <print_data+0xb9c>
     568:	ldr	r1, [sp, #64]	; 0x40
     56c:	bl	4c <fi_printf>
     570:	ldr	r1, [pc, #2152]	; de0 <print_data+0xb78>
     574:	ldr	r0, [r1]
     578:	cmp	r0, #0
     57c:	beq	5ec <print_data+0x384>
     580:	add	r1, sp, #128	; 0x80
     584:	mov	r0, r4
     588:	bl	0 <coda_cursor_get_file_bit_offset>
     58c:	cmp	r0, #0
     590:	beq	598 <print_data+0x330>
     594:	bl	0 <handle_coda_error>
     598:	ldr	r2, [sp, #128]	; 0x80
     59c:	ldr	r3, [sp, #132]	; 0x84
     5a0:	cmp	r3, #0
     5a4:	blt	5ec <print_data+0x384>
     5a8:	asr	r1, r3, #3
     5ac:	lsr	r2, r2, #3
     5b0:	orr	r0, r2, r3, lsl #29
     5b4:	add	r2, sp, #192	; 0xc0
     5b8:	bl	0 <coda_str64>
     5bc:	ldr	r0, [pc, #2068]	; dd8 <print_data+0xb70>
     5c0:	add	r1, sp, #192	; 0xc0
     5c4:	bl	0 <ff_printf>
     5c8:	ldr	r0, [sp, #128]	; 0x80
     5cc:	mov	r2, #0
     5d0:	and	r1, r0, #7
     5d4:	mov	r3, r1
     5d8:	orr	r2, r2, r3
     5dc:	cmp	r2, #0
     5e0:	beq	5ec <print_data+0x384>
     5e4:	ldr	r0, [pc, #2060]	; df8 <print_data+0xb90>
     5e8:	bl	0 <ff_printf>
     5ec:	ldr	r0, [pc, #2112]	; e34 <print_data+0xbcc>
     5f0:	bl	0 <ff_printf>
     5f4:	ldr	r0, [pc, #2124]	; e48 <print_data+0xbe0>
     5f8:	ldr	r1, [r0]
     5fc:	add	r1, r1, #1
     600:	str	r1, [r0]
     604:	ldr	r2, [pc, #2116]	; e50 <print_data+0xbe8>
     608:	ldr	r0, [r2]
     60c:	cmp	r0, #0
     610:	blt	628 <print_data+0x3c0>
     614:	cmp	r5, r0
     618:	blt	628 <print_data+0x3c0>
     61c:	ldr	r0, [pc, #1964]	; dd0 <print_data+0xb68>
     620:	bl	4c <fi_printf>
     624:	b	634 <print_data+0x3cc>
     628:	add	r1, r5, #1
     62c:	mov	r0, r4
     630:	bl	268 <print_data>
     634:	ldr	r3, [pc, #2060]	; e48 <print_data+0xbe0>
     638:	ldr	ip, [r3]
     63c:	sub	ip, ip, #1
     640:	str	ip, [r3]
     644:	mov	r0, r4
     648:	bl	0 <coda_cursor_goto_parent>
     64c:	b	db0 <print_data+0xb48>
     650:	add	r1, sp, #72	; 0x48
     654:	add	r2, sp, #368	; 0x170
     658:	mov	r0, r4
     65c:	bl	0 <coda_cursor_get_array_dim>
     660:	cmp	r0, #0
     664:	beq	66c <print_data+0x404>
     668:	bl	0 <handle_coda_error>
     66c:	ldr	r3, [sp, #72]	; 0x48
     670:	cmp	r3, #0
     674:	blt	db0 <print_data+0xb48>
     678:	mov	r6, #1
     67c:	mov	ip, #0
     680:	ldr	r3, [sp, #72]	; 0x48
     684:	cmp	ip, r3
     688:	bge	6ac <print_data+0x444>
     68c:	add	r0, sp, #368	; 0x170
     690:	ldr	r2, [r0, ip, lsl #2]
     694:	mul	r6, r6, r2
     698:	add	r0, sp, #400	; 0x190
     69c:	mov	r3, #0
     6a0:	str	r3, [r0, ip, lsl #2]
     6a4:	add	ip, ip, #1
     6a8:	b	680 <print_data+0x418>
     6ac:	cmp	r6, #0
     6b0:	ble	db0 <print_data+0xb48>
     6b4:	mov	r0, r4
     6b8:	bl	0 <coda_cursor_goto_first_array_element>
     6bc:	cmp	r0, #0
     6c0:	beq	6c8 <print_data+0x460>
     6c4:	bl	0 <handle_coda_error>
     6c8:	mov	r7, #0
     6cc:	cmp	r7, r6
     6d0:	bge	86c <print_data+0x604>
     6d4:	ldr	r0, [pc, #1812]	; df0 <print_data+0xb88>
     6d8:	bl	4c <fi_printf>
     6dc:	mov	r8, #0
     6e0:	ldr	r2, [sp, #72]	; 0x48
     6e4:	cmp	r8, r2
     6e8:	bge	71c <print_data+0x4b4>
     6ec:	ldr	r0, [pc, #1800]	; dfc <print_data+0xb94>
     6f0:	add	r3, sp, #400	; 0x190
     6f4:	ldr	r1, [r3, r8, lsl #2]
     6f8:	bl	0 <ff_printf>
     6fc:	ldr	r0, [sp, #72]	; 0x48
     700:	sub	r0, r0, #1
     704:	cmp	r8, r0
     708:	bge	714 <print_data+0x4ac>
     70c:	ldr	r0, [pc, #1836]	; e40 <print_data+0xbd8>
     710:	bl	0 <ff_printf>
     714:	add	r8, r8, #1
     718:	b	6e0 <print_data+0x478>
     71c:	ldr	r0, [pc, #1768]	; e0c <print_data+0xba4>
     720:	bl	0 <ff_printf>
     724:	ldr	r0, [pc, #1716]	; de0 <print_data+0xb78>
     728:	ldr	r2, [r0]
     72c:	cmp	r2, #0
     730:	beq	7a0 <print_data+0x538>
     734:	add	r1, sp, #144	; 0x90
     738:	mov	r0, r4
     73c:	bl	0 <coda_cursor_get_file_bit_offset>
     740:	cmp	r0, #0
     744:	beq	74c <print_data+0x4e4>
     748:	bl	0 <handle_coda_error>
     74c:	ldr	r2, [sp, #144]	; 0x90
     750:	ldr	r0, [sp, #148]	; 0x94
     754:	cmp	r0, #0
     758:	blt	7a0 <print_data+0x538>
     75c:	asr	r1, r0, #3
     760:	lsr	r2, r2, #3
     764:	orr	r0, r2, r0, lsl #29
     768:	add	r2, sp, #240	; 0xf0
     76c:	bl	0 <coda_str64>
     770:	ldr	r0, [pc, #1632]	; dd8 <print_data+0xb70>
     774:	add	r1, sp, #240	; 0xf0
     778:	bl	0 <ff_printf>
     77c:	ldr	ip, [sp, #144]	; 0x90
     780:	mov	r3, #0
     784:	and	r1, ip, #7
     788:	mov	r2, r1
     78c:	orr	r2, r3, r2
     790:	cmp	r2, #0
     794:	beq	7a0 <print_data+0x538>
     798:	ldr	r0, [pc, #1624]	; df8 <print_data+0xb90>
     79c:	bl	0 <ff_printf>
     7a0:	ldr	r0, [pc, #1676]	; e34 <print_data+0xbcc>
     7a4:	bl	0 <ff_printf>
     7a8:	ldr	r1, [pc, #1688]	; e48 <print_data+0xbe0>
     7ac:	ldr	r0, [r1]
     7b0:	add	r2, r0, #1
     7b4:	str	r2, [r1]
     7b8:	ldr	r1, [pc, #1680]	; e50 <print_data+0xbe8>
     7bc:	ldr	r0, [r1]
     7c0:	cmp	r0, #0
     7c4:	blt	7dc <print_data+0x574>
     7c8:	cmp	r5, r0
     7cc:	blt	7dc <print_data+0x574>
     7d0:	ldr	r0, [pc, #1528]	; dd0 <print_data+0xb68>
     7d4:	bl	4c <fi_printf>
     7d8:	b	7e8 <print_data+0x580>
     7dc:	add	r1, r5, #1
     7e0:	mov	r0, r4
     7e4:	bl	268 <print_data>
     7e8:	ldr	r2, [pc, #1624]	; e48 <print_data+0xbe0>
     7ec:	ldr	r1, [r2]
     7f0:	sub	r3, r1, #1
     7f4:	str	r3, [r2]
     7f8:	ldr	r1, [sp, #72]	; 0x48
     7fc:	sub	r3, r1, #1
     800:	cmp	r3, #0
     804:	blt	844 <print_data+0x5dc>
     808:	add	r1, sp, #400	; 0x190
     80c:	add	ip, sp, #400	; 0x190
     810:	ldr	ip, [ip, r3, lsl #2]
     814:	add	ip, ip, #1
     818:	str	ip, [r1, r3, lsl #2]
     81c:	add	r0, sp, #368	; 0x170
     820:	ldr	r2, [r0, r3, lsl #2]
     824:	cmp	ip, r2
     828:	bne	844 <print_data+0x5dc>
     82c:	mov	ip, r3
     830:	sub	r3, ip, #1
     834:	add	r0, sp, #400	; 0x190
     838:	mov	r2, #0
     83c:	str	r2, [r0, ip, lsl #2]
     840:	b	800 <print_data+0x598>
     844:	sub	r3, r6, #1
     848:	cmp	r7, r3
     84c:	bge	864 <print_data+0x5fc>
     850:	mov	r0, r4
     854:	bl	0 <coda_cursor_goto_next_array_element>
     858:	cmp	r0, #0
     85c:	beq	864 <print_data+0x5fc>
     860:	bl	0 <handle_coda_error>
     864:	add	r7, r7, #1
     868:	b	6cc <print_data+0x464>
     86c:	mov	r0, r4
     870:	bl	0 <coda_cursor_goto_parent>
     874:	b	db0 <print_data+0xb48>
     878:	add	r1, sp, #80	; 0x50
     87c:	mov	r0, r4
     880:	bl	0 <coda_cursor_has_ascii_content>
     884:	cmp	r0, #0
     888:	beq	890 <print_data+0x628>
     88c:	bl	0 <handle_coda_error>
     890:	ldr	ip, [sp, #80]	; 0x50
     894:	cmp	ip, #0
     898:	beq	938 <print_data+0x6d0>
     89c:	add	r1, sp, #84	; 0x54
     8a0:	mov	r0, r4
     8a4:	bl	0 <coda_cursor_get_string_length>
     8a8:	cmp	r0, #0
     8ac:	beq	8b4 <print_data+0x64c>
     8b0:	bl	0 <handle_coda_error>
     8b4:	ldr	r1, [sp, #84]	; 0x54
     8b8:	add	r0, r1, #1
     8bc:	bl	0 <malloc>
     8c0:	mov	r5, r0
     8c4:	cmp	r5, #0
     8c8:	bne	8f0 <print_data+0x688>
     8cc:	mvn	r0, #0
     8d0:	ldr	r1, [pc, #1276]	; dd4 <print_data+0xb6c>
     8d4:	ldr	ip, [sp, #84]	; 0x54
     8d8:	add	r2, ip, #1
     8dc:	ldr	r3, [pc, #1344]	; e24 <print_data+0xbbc>
     8e0:	movw	ip, #410	; 0x19a
     8e4:	str	ip, [sp]
     8e8:	bl	0 <coda_set_error>
     8ec:	bl	0 <handle_coda_error>
     8f0:	ldr	r2, [sp, #84]	; 0x54
     8f4:	add	r2, r2, #1
     8f8:	mov	r1, r5
     8fc:	mov	r0, r4
     900:	bl	0 <coda_cursor_read_string>
     904:	cmp	r0, #0
     908:	beq	910 <print_data+0x6a8>
     90c:	bl	0 <handle_coda_error>
     910:	ldr	r0, [pc, #1280]	; e18 <print_data+0xbb0>
     914:	bl	4c <fi_printf>
     918:	ldr	r1, [sp, #84]	; 0x54
     91c:	mov	r0, r5
     920:	bl	104 <print_escaped>
     924:	ldr	r0, [pc, #1200]	; ddc <print_data+0xb74>
     928:	ldr	r1, [sp, #84]	; 0x54
     92c:	bl	0 <ff_printf>
     930:	mov	r0, r5
     934:	bl	0 <free>
     938:	add	r1, sp, #76	; 0x4c
     93c:	mov	r0, r4
     940:	bl	0 <coda_cursor_get_read_type>
     944:	cmp	r0, #0
     948:	beq	950 <print_data+0x6e8>
     94c:	bl	0 <handle_coda_error>
     950:	ldr	r0, [sp, #76]	; 0x4c
     954:	cmp	r0, #7
     958:	bcs	a18 <print_data+0x7b0>
     95c:	cmp	r0, #3
     960:	bcs	978 <print_data+0x710>
     964:	cmp	r0, #0
     968:	beq	988 <print_data+0x720>
     96c:	cmp	r0, #1
     970:	beq	9b8 <print_data+0x750>
     974:	b	988 <print_data+0x720>
     978:	cmp	r0, #5
     97c:	bcs	9b0 <print_data+0x748>
     980:	cmp	r0, #3
     984:	beq	9b8 <print_data+0x750>
     988:	add	r1, sp, #88	; 0x58
     98c:	mov	r0, r4
     990:	bl	0 <coda_cursor_read_int32>
     994:	cmp	r0, #0
     998:	beq	9a0 <print_data+0x738>
     99c:	bl	0 <handle_coda_error>
     9a0:	ldr	r0, [pc, #1128]	; e10 <print_data+0xba8>
     9a4:	ldr	r1, [sp, #88]	; 0x58
     9a8:	bl	4c <fi_printf>
     9ac:	b	db0 <print_data+0xb48>
     9b0:	cmp	r0, #5
     9b4:	bne	9e0 <print_data+0x778>
     9b8:	add	r1, sp, #92	; 0x5c
     9bc:	mov	r0, r4
     9c0:	bl	0 <coda_cursor_read_uint32>
     9c4:	cmp	r0, #0
     9c8:	beq	9d0 <print_data+0x768>
     9cc:	bl	0 <handle_coda_error>
     9d0:	ldr	r0, [pc, #1036]	; de4 <print_data+0xb7c>
     9d4:	ldr	r1, [sp, #92]	; 0x5c
     9d8:	bl	4c <fi_printf>
     9dc:	b	db0 <print_data+0xb48>
     9e0:	add	r1, sp, #160	; 0xa0
     9e4:	mov	r0, r4
     9e8:	bl	0 <coda_cursor_read_int64>
     9ec:	cmp	r0, #0
     9f0:	beq	9f8 <print_data+0x790>
     9f4:	bl	0 <handle_coda_error>
     9f8:	ldr	r0, [sp, #160]	; 0xa0
     9fc:	ldr	r1, [sp, #164]	; 0xa4
     a00:	add	r2, sp, #288	; 0x120
     a04:	bl	0 <coda_str64>
     a08:	ldr	r0, [pc, #1064]	; e38 <print_data+0xbd0>
     a0c:	add	r1, sp, #288	; 0x120
     a10:	bl	4c <fi_printf>
     a14:	b	db0 <print_data+0xb48>
     a18:	cmp	r0, #10
     a1c:	bcs	aac <print_data+0x844>
     a20:	cmp	r0, #7
     a24:	beq	a74 <print_data+0x80c>
     a28:	add	r1, sp, #176	; 0xb0
     a2c:	mov	r0, r4
     a30:	bl	0 <coda_cursor_read_double>
     a34:	cmp	r0, #0
     a38:	beq	a40 <print_data+0x7d8>
     a3c:	bl	0 <handle_coda_error>
     a40:	ldr	r0, [sp, #76]	; 0x4c
     a44:	cmp	r0, #8
     a48:	beq	a60 <print_data+0x7f8>
     a4c:	ldr	r0, [pc, #984]	; e2c <print_data+0xbc4>
     a50:	vldr	d2, [sp, #176]	; 0xb0
     a54:	vmov	r2, r3, d2
     a58:	bl	4c <fi_printf>
     a5c:	b	db0 <print_data+0xb48>
     a60:	ldr	r0, [pc, #908]	; df4 <print_data+0xb8c>
     a64:	vldr	d2, [sp, #176]	; 0xb0
     a68:	vmov	r2, r3, d2
     a6c:	bl	4c <fi_printf>
     a70:	b	db0 <print_data+0xb48>
     a74:	add	r1, sp, #168	; 0xa8
     a78:	mov	r0, r4
     a7c:	bl	0 <coda_cursor_read_uint64>
     a80:	cmp	r0, #0
     a84:	beq	a8c <print_data+0x824>
     a88:	bl	0 <handle_coda_error>
     a8c:	ldr	r0, [sp, #168]	; 0xa8
     a90:	ldr	r1, [sp, #172]	; 0xac
     a94:	add	r2, sp, #312	; 0x138
     a98:	bl	0 <coda_str64u>
     a9c:	ldr	r0, [pc, #916]	; e38 <print_data+0xbd0>
     aa0:	add	r1, sp, #312	; 0x138
     aa4:	bl	4c <fi_printf>
     aa8:	b	db0 <print_data+0xb48>
     aac:	cmp	r0, #12
     ab0:	bcc	ac4 <print_data+0x85c>
     ab4:	cmp	r0, #12
     ab8:	beq	ae8 <print_data+0x880>
     abc:	cmn	r0, #1
     ac0:	bne	db0 <print_data+0xb48>
     ac4:	ldr	r0, [sp, #80]	; 0x50
     ac8:	cmp	r0, #0
     acc:	bne	db0 <print_data+0xb48>
     ad0:	ldr	r0, [pc, #788]	; dec <print_data+0xb84>
     ad4:	ldr	r1, [pc, #840]	; e24 <print_data+0xbbc>
     ad8:	mov	r2, #548	; 0x224
     adc:	ldr	r3, [pc, #772]	; de8 <print_data+0xb80>
     ae0:	bl	0 <__assert_fail>
     ae4:	b	db0 <print_data+0xb48>
     ae8:	add	r1, sp, #152	; 0x98
     aec:	mov	r0, r4
     af0:	bl	0 <coda_cursor_get_bit_size>
     af4:	cmp	r0, #0
     af8:	beq	b00 <print_data+0x898>
     afc:	bl	0 <handle_coda_error>
     b00:	mov	r0, #1
     b04:	mov	r5, #0
     b08:	ldr	r1, [sp, #152]	; 0x98
     b0c:	ldr	ip, [sp, #156]	; 0x9c
     b10:	mov	r3, #0
     b14:	and	r2, r1, #7
     b18:	orr	r2, r3, r2
     b1c:	cmp	r2, #0
     b20:	movne	r2, #1
     b24:	moveq	r2, #0
     b28:	cmp	r2, #0
     b2c:	movne	r0, r0
     b30:	moveq	r0, r5
     b34:	asr	r3, ip, #3
     b38:	lsr	r1, r1, #3
     b3c:	orr	r2, r1, ip, lsl #29
     b40:	asr	r1, r0, #31
     b44:	adds	r5, r2, r0
     b48:	adc	r1, r3, r1
     b4c:	mov	r0, r5
     b50:	bl	0 <malloc>
     b54:	mov	r6, r0
     b58:	cmp	r6, #0
     b5c:	bne	b80 <print_data+0x918>
     b60:	mvn	r0, #0
     b64:	ldr	r1, [pc, #616]	; dd4 <print_data+0xb6c>
     b68:	mov	r2, r5
     b6c:	ldr	r3, [pc, #688]	; e24 <print_data+0xbbc>
     b70:	movw	r7, #447	; 0x1bf
     b74:	str	r7, [sp]
     b78:	bl	0 <coda_set_error>
     b7c:	bl	0 <handle_coda_error>
     b80:	mov	r3, #0
     b84:	mov	r2, #0
     b88:	ldr	r0, [sp, #152]	; 0x98
     b8c:	ldr	r1, [sp, #156]	; 0x9c
     b90:	str	r1, [sp, #4]
     b94:	str	r0, [sp]
     b98:	mov	r1, r6
     b9c:	mov	r0, r4
     ba0:	bl	0 <coda_cursor_read_bits>
     ba4:	cmp	r0, #0
     ba8:	beq	bb0 <print_data+0x948>
     bac:	bl	0 <handle_coda_error>
     bb0:	ldr	r0, [pc, #608]	; e18 <print_data+0xbb0>
     bb4:	bl	4c <fi_printf>
     bb8:	mov	r1, r5
     bbc:	mov	r0, r6
     bc0:	bl	104 <print_escaped>
     bc4:	ldr	r0, [pc, #624]	; e3c <print_data+0xbd4>
     bc8:	bl	0 <ff_printf>
     bcc:	ldr	ip, [sp, #152]	; 0x98
     bd0:	ldr	r2, [sp, #156]	; 0x9c
     bd4:	asr	r1, r2, #3
     bd8:	lsr	r3, ip, #3
     bdc:	orr	r0, r3, r2, lsl #29
     be0:	add	r2, sp, #264	; 0x108
     be4:	bl	0 <coda_str64>
     be8:	ldr	r0, [pc, #528]	; e00 <print_data+0xb98>
     bec:	add	r1, sp, #264	; 0x108
     bf0:	bl	0 <ff_printf>
     bf4:	ldr	r3, [sp, #152]	; 0x98
     bf8:	mov	r0, #0
     bfc:	and	r1, r3, #7
     c00:	mov	ip, r1
     c04:	orr	ip, r0, ip
     c08:	cmp	ip, #0
     c0c:	beq	c18 <print_data+0x9b0>
     c10:	ldr	r0, [pc, #480]	; df8 <print_data+0xb90>
     c14:	bl	0 <ff_printf>
     c18:	ldr	r0, [pc, #528]	; e30 <print_data+0xbc8>
     c1c:	bl	0 <ff_printf>
     c20:	mov	r0, r6
     c24:	bl	0 <free>
     c28:	b	db0 <print_data+0xb48>
     c2c:	add	r1, sp, #96	; 0x60
     c30:	mov	r0, r4
     c34:	bl	0 <coda_cursor_get_special_type>
     c38:	cmp	r0, #0
     c3c:	beq	c44 <print_data+0x9dc>
     c40:	bl	0 <handle_coda_error>
     c44:	ldr	r0, [sp, #96]	; 0x60
     c48:	cmp	r0, #0
     c4c:	beq	c8c <print_data+0xa24>
     c50:	mov	r2, r4
     c54:	add	r3, sp, #432	; 0x1b0
     c58:	mov	lr, #130	; 0x82
     c5c:	ldr	ip, [r2], #4
     c60:	subs	lr, lr, #1
     c64:	str	ip, [r3], #4
     c68:	bne	c5c <print_data+0x9f4>
     c6c:	add	r0, sp, #432	; 0x1b0
     c70:	bl	0 <coda_cursor_use_base_type_of_special_type>
     c74:	cmp	r0, #0
     c78:	beq	c80 <print_data+0xa18>
     c7c:	bl	0 <handle_coda_error>
     c80:	add	r0, sp, #432	; 0x1b0
     c84:	mov	r1, r5
     c88:	bl	268 <print_data>
     c8c:	ldr	r0, [sp, #96]	; 0x60
     c90:	bl	0 <coda_type_get_special_type_name>
     c94:	mov	r1, r0
     c98:	ldr	r0, [pc, #380]	; e1c <print_data+0xbb4>
     c9c:	bl	4c <fi_printf>
     ca0:	ldr	r1, [sp, #96]	; 0x60
     ca4:	cmp	r1, #2
     ca8:	bcs	cec <print_data+0xa84>
     cac:	cmp	r1, #0
     cb0:	bne	cc0 <print_data+0xa58>
     cb4:	ldr	r0, [pc, #376]	; e34 <print_data+0xbcc>
     cb8:	bl	0 <ff_printf>
     cbc:	b	db0 <print_data+0xb48>
     cc0:	add	r1, sp, #184	; 0xb8
     cc4:	mov	r0, r4
     cc8:	bl	0 <coda_cursor_read_double>
     ccc:	cmp	r0, #0
     cd0:	beq	cd8 <print_data+0xa70>
     cd4:	bl	0 <handle_coda_error>
     cd8:	ldr	r0, [pc, #332]	; e2c <print_data+0xbc4>
     cdc:	vldr	d2, [sp, #184]	; 0xb8
     ce0:	vmov	r2, r3, d2
     ce4:	bl	0 <ff_printf>
     ce8:	b	db0 <print_data+0xb48>
     cec:	cmp	r1, #2
     cf0:	beq	d34 <print_data+0xacc>
     cf4:	cmp	r1, #3
     cf8:	bne	db0 <print_data+0xb48>
     cfc:	add	r1, sp, #112	; 0x70
     d00:	add	r2, sp, #120	; 0x78
     d04:	mov	r0, r4
     d08:	bl	0 <coda_cursor_read_complex_double_split>
     d0c:	cmp	r0, #0
     d10:	beq	d18 <print_data+0xab0>
     d14:	bl	0 <handle_coda_error>
     d18:	ldr	r0, [pc, #244]	; e14 <print_data+0xbac>
     d1c:	vldr	d2, [sp, #112]	; 0x70
     d20:	vldr	d1, [sp, #120]	; 0x78
     d24:	vstr	d1, [sp]
     d28:	vmov	r2, r3, d2
     d2c:	bl	0 <ff_printf>
     d30:	b	db0 <print_data+0xb48>
     d34:	add	r1, sp, #104	; 0x68
     d38:	mov	r0, r4
     d3c:	bl	0 <coda_cursor_read_double>
     d40:	cmp	r0, #0
     d44:	beq	d4c <print_data+0xae4>
     d48:	bl	0 <handle_coda_error>
     d4c:	vldr	d0, [sp, #104]	; 0x68
     d50:	bl	0 <coda_isNaN>
     d54:	cmp	r0, #0
     d58:	bne	da0 <print_data+0xb38>
     d5c:	vldr	d0, [sp, #104]	; 0x68
     d60:	bl	0 <coda_isInf>
     d64:	cmp	r0, #0
     d68:	bne	da0 <print_data+0xb38>
     d6c:	vldr	d0, [sp, #104]	; 0x68
     d70:	ldr	r0, [pc, #176]	; e28 <print_data+0xbc0>
     d74:	add	r1, sp, #336	; 0x150
     d78:	bl	0 <coda_time_double_to_string>
     d7c:	cmp	r0, #0
     d80:	bne	d94 <print_data+0xb2c>
     d84:	ldr	r0, [pc, #148]	; e20 <print_data+0xbb8>
     d88:	add	r1, sp, #336	; 0x150
     d8c:	bl	0 <ff_printf>
     d90:	b	db0 <print_data+0xb48>
     d94:	ldr	r0, [pc, #108]	; e08 <print_data+0xba0>
     d98:	bl	0 <ff_printf>
     d9c:	b	db0 <print_data+0xb48>
     da0:	ldr	r0, [pc, #156]	; e44 <print_data+0xbdc>
     da4:	vldr	d2, [sp, #104]	; 0x68
     da8:	vmov	r2, r3, d2
     dac:	bl	0 <ff_printf>
     db0:	ldr	r4, [sp, #16]
     db4:	ldr	r5, [sp, #20]
     db8:	ldr	r6, [sp, #24]
     dbc:	ldr	r7, [sp, #28]
     dc0:	ldr	r8, [sp, #32]
     dc4:	ldr	lr, [sp, #12]
     dc8:	add	sp, sp, #952	; 0x3b8
     dcc:	bx	lr
     dd0:	.word	0x00000071
     dd4:	.word	0x0000014a
     dd8:	.word	0x000000b9
     ddc:	.word	0x000000a9
     de0:	.word	0x00000004
     de4:	.word	0x0000006c
     de8:	.word	0x0000019d
     dec:	.word	0x000000c4
     df0:	.word	0x00000018
     df4:	.word	0x00000003
     df8:	.word	0x00000009
     dfc:	.word	0x00000060
     e00:	.word	0x00000000
     e04:	.word	0x00000056
     e08:	.word	0x0000001f
     e0c:	.word	0x000000bd
     e10:	.word	0x0000005b
     e14:	.word	0x0000009e
     e18:	.word	0x0000001d
     e1c:	.word	0x00000094
     e20:	.word	0x000000bf
     e24:	.word	0x000000d6
     e28:	.word	0x00000076
     e2c:	.word	0x00000046
     e30:	.word	0x00000091
     e34:	.word	0x0000009c
     e38:	.word	0x0000017f
     e3c:	.word	0x0000004d
     e40:	.word	0x00000186
     e44:	.word	0x00000010
     e48:	.word	0x00000000
     e4c:	.word	0x00000188
     e50:	.word	0x00000000

00000e54 <print_debug_data>:
     e54:	mov	ip, sp
     e58:	sub	sp, sp, #560	; 0x230
     e5c:	str	ip, [sp, #4]
     e60:	str	lr, [sp, #8]
     e64:	str	r4, [sp, #16]
     e68:	str	r5, [sp, #20]
     e6c:	str	r6, [sp, #24]
     e70:	str	r7, [sp, #28]
     e74:	mov	r5, r2
     e78:	mov	r6, r1
     e7c:	mov	r7, r0
     e80:	cmp	r7, #0
     e84:	beq	eb0 <print_debug_data+0x5c>
     e88:	ldr	r1, [pc, #364]	; ffc <print_debug_data+0x1a8>
     e8c:	ldr	r0, [r1]
     e90:	add	r1, sp, #36	; 0x24
     e94:	str	r1, [sp]
     e98:	mov	r3, r5
     e9c:	mov	r2, r6
     ea0:	mov	r1, r7
     ea4:	bl	0 <coda_open_as>
     ea8:	mov	r4, r0
     eac:	b	ec4 <print_debug_data+0x70>
     eb0:	ldr	ip, [pc, #324]	; ffc <print_debug_data+0x1a8>
     eb4:	ldr	r0, [ip]
     eb8:	add	r1, sp, #36	; 0x24
     ebc:	bl	0 <coda_open>
     ec0:	mov	r4, r0
     ec4:	cmp	r4, #0
     ec8:	beq	f30 <print_debug_data+0xdc>
     ecc:	bl	0 <coda_get_errno>
     ed0:	ldr	r2, [r0]
     ed4:	cmn	r2, #21
     ed8:	bne	f30 <print_debug_data+0xdc>
     edc:	mov	r0, #0
     ee0:	bl	0 <coda_set_option_use_mmap>
     ee4:	cmp	r7, #0
     ee8:	beq	f14 <print_debug_data+0xc0>
     eec:	ldr	r1, [pc, #264]	; ffc <print_debug_data+0x1a8>
     ef0:	ldr	r0, [r1]
     ef4:	add	r2, sp, #36	; 0x24
     ef8:	str	r2, [sp]
     efc:	mov	r3, r5
     f00:	mov	r2, r6
     f04:	mov	r1, r7
     f08:	bl	0 <coda_open_as>
     f0c:	mov	r4, r0
     f10:	b	f28 <print_debug_data+0xd4>
     f14:	ldr	r0, [pc, #224]	; ffc <print_debug_data+0x1a8>
     f18:	ldr	r0, [r0]
     f1c:	add	r1, sp, #36	; 0x24
     f20:	bl	0 <coda_open>
     f24:	mov	r4, r0
     f28:	mov	r0, #1
     f2c:	bl	0 <coda_set_option_use_mmap>
     f30:	cmp	r4, #0
     f34:	beq	f3c <print_debug_data+0xe8>
     f38:	bl	0 <handle_coda_error>
     f3c:	ldr	r0, [sp, #36]	; 0x24
     f40:	add	r1, sp, #32
     f44:	bl	0 <coda_get_product_format>
     f48:	cmp	r0, #0
     f4c:	beq	f54 <print_debug_data+0x100>
     f50:	bl	0 <handle_coda_error>
     f54:	ldr	r0, [sp, #32]
     f58:	cmp	r0, #0
     f5c:	beq	f78 <print_debug_data+0x124>
     f60:	cmp	r0, #1
     f64:	beq	f78 <print_debug_data+0x124>
     f68:	cmp	r0, #2
     f6c:	moveq	r3, #1
     f70:	movne	r3, #0
     f74:	b	f7c <print_debug_data+0x128>
     f78:	mov	r3, #1
     f7c:	ldr	r0, [pc, #116]	; ff8 <print_debug_data+0x1a4>
     f80:	str	r3, [r0]
     f84:	add	r0, sp, #40	; 0x28
     f88:	ldr	r1, [sp, #36]	; 0x24
     f8c:	bl	0 <coda_cursor_set_product>
     f90:	cmp	r0, #0
     f94:	beq	f9c <print_debug_data+0x148>
     f98:	bl	0 <handle_coda_error>
     f9c:	ldr	r0, [pc, #92]	; 1000 <print_debug_data+0x1ac>
     fa0:	ldr	r1, [r0]
     fa4:	cmp	r1, #0
     fa8:	beq	fc0 <print_debug_data+0x16c>
     fac:	add	r0, sp, #40	; 0x28
     fb0:	bl	0 <coda_cursor_goto>
     fb4:	cmp	r0, #0
     fb8:	beq	fc0 <print_debug_data+0x16c>
     fbc:	bl	0 <handle_coda_error>
     fc0:	mov	r0, #0
     fc4:	bl	0 <coda_set_option_perform_boundary_checks>
     fc8:	add	r0, sp, #40	; 0x28
     fcc:	mov	r1, #0
     fd0:	bl	268 <print_data>
     fd4:	ldr	r0, [sp, #36]	; 0x24
     fd8:	bl	0 <coda_close>
     fdc:	ldr	r4, [sp, #16]
     fe0:	ldr	r5, [sp, #20]
     fe4:	ldr	r6, [sp, #24]
     fe8:	ldr	r7, [sp, #28]
     fec:	ldr	lr, [sp, #8]
     ff0:	add	sp, sp, #560	; 0x230
     ff4:	bx	lr
     ff8:	.word	0x00000004
	...
