
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-dim.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dim_info_init>:
       0:	movw	r0, #0
       4:	mvn	r1, #0
       8:	movt	r0, #0
       c:	str	r1, [r0, #104]	; 0x68
      10:	mov	r1, #0
      14:	str	r1, [r0, #68]	; 0x44
      18:	str	r1, [r0]
      1c:	bx	lr

00000020 <dim_info_done>:
      20:	bx	lr

00000024 <print_all_distinct_dims>:
      24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      28:	add	fp, sp, #28
      2c:	sub	sp, sp, #4
      30:	movw	r9, #0
      34:	mov	sl, r0
      38:	movt	r9, #0
      3c:	ldr	r0, [r9]
      40:	cmp	r0, sl
      44:	ble	1e4 <print_all_distinct_dims+0x1c0>
      48:	add	r8, r9, sl, lsl #2
      4c:	ldr	r0, [r8, #72]	; 0x48
      50:	cmp	r0, #0
      54:	beq	1dc <print_all_distinct_dims+0x1b8>
      58:	mov	r7, r8
      5c:	mov	r5, #4
      60:	ldr	r0, [r7, #4]!
      64:	add	r6, r5, r0, lsl #2
      68:	mov	r0, r6
      6c:	bl	0 <malloc>
      70:	mov	r4, r0
      74:	cmp	r0, #0
      78:	bne	ac <print_all_distinct_dims+0x88>
      7c:	movw	r1, #0
      80:	movw	r3, #0
      84:	mov	r0, #61	; 0x3d
      88:	mov	r2, r6
      8c:	movt	r1, #0
      90:	movt	r3, #0
      94:	str	r0, [sp]
      98:	mvn	r0, #0
      9c:	bl	0 <coda_set_error>
      a0:	bl	0 <handle_coda_error>
      a4:	ldr	r0, [r7]
      a8:	add	r6, r5, r0, lsl #2
      ac:	mov	r0, r4
      b0:	mov	r1, #0
      b4:	mov	r2, r6
      b8:	mov	r5, #0
      bc:	bl	0 <memset>
      c0:	ldr	r0, [r8, #140]	; 0x8c
      c4:	add	r0, r9, r0, lsl #3
      c8:	ldrd	r0, [r0, #232]	; 0xe8
      cc:	subs	r2, r0, #1
      d0:	sbcs	r2, r1, #0
      d4:	blt	100 <print_all_distinct_dims+0xdc>
      d8:	ldr	r2, [r8, #108]	; 0x6c
      dc:	ldr	r3, [r2, r5, lsl #2]
      e0:	add	r5, r5, #1
      e4:	cmp	r3, #0
      e8:	ldrpl	r6, [r4, r3, lsl #2]
      ec:	addpl	r6, r6, #1
      f0:	strpl	r6, [r4, r3, lsl #2]
      f4:	subs	r3, r5, r0
      f8:	rscs	r3, r1, #0
      fc:	blt	dc <print_all_distinct_dims+0xb8>
     100:	movw	r0, #0
     104:	add	r1, sl, #1
     108:	movt	r0, #0
     10c:	bl	0 <printf>
     110:	ldr	r5, [r8, #36]!	; 0x24
     114:	ldr	r1, [r7]
     118:	cmp	r5, r1
     11c:	bge	158 <print_all_distinct_dims+0x134>
     120:	movw	r6, #0
     124:	movt	r6, #0
     128:	b	138 <print_all_distinct_dims+0x114>
     12c:	add	r5, r5, #1
     130:	cmp	r5, r1
     134:	bge	158 <print_all_distinct_dims+0x134>
     138:	ldr	r0, [r4, r5, lsl #2]
     13c:	cmp	r0, #1
     140:	blt	12c <print_all_distinct_dims+0x108>
     144:	mov	r0, r6
     148:	mov	r1, r5
     14c:	bl	0 <printf>
     150:	ldr	r1, [r7]
     154:	b	12c <print_all_distinct_dims+0x108>
     158:	movw	r0, #0
     15c:	movt	r0, #0
     160:	bl	0 <printf>
     164:	movw	r0, #0
     168:	movt	r0, #0
     16c:	bl	0 <printf>
     170:	ldr	r0, [r7]
     174:	ldr	r6, [r8]
     178:	cmp	r6, r0
     17c:	bge	1b4 <print_all_distinct_dims+0x190>
     180:	movw	r5, #0
     184:	movt	r5, #0
     188:	b	198 <print_all_distinct_dims+0x174>
     18c:	add	r6, r6, #1
     190:	cmp	r6, r0
     194:	bge	1b4 <print_all_distinct_dims+0x190>
     198:	ldr	r1, [r4, r6, lsl #2]
     19c:	cmp	r1, #1
     1a0:	blt	18c <print_all_distinct_dims+0x168>
     1a4:	mov	r0, r5
     1a8:	bl	0 <printf>
     1ac:	ldr	r0, [r7]
     1b0:	b	18c <print_all_distinct_dims+0x168>
     1b4:	ldr	r1, [r4, r0, lsl #2]
     1b8:	movw	r0, #0
     1bc:	movt	r0, #0
     1c0:	bl	0 <printf>
     1c4:	mov	r0, #10
     1c8:	bl	0 <putchar>
     1cc:	mov	r0, r4
     1d0:	sub	sp, fp, #28
     1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1d8:	b	0 <free>
     1dc:	sub	sp, fp, #28
     1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1e4:	movw	r0, #0
     1e8:	movw	r1, #0
     1ec:	movw	r3, #0
     1f0:	mov	r2, #50	; 0x32
     1f4:	movt	r0, #0
     1f8:	movt	r1, #0
     1fc:	movt	r3, #0
     200:	bl	0 <__assert_fail>

00000204 <dim_enter_array>:
     204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     208:	add	fp, sp, #28
     20c:	sub	sp, sp, #76	; 0x4c
     210:	movw	r4, #0
     214:	sub	r1, fp, #32
     218:	movt	r4, #0
     21c:	ldr	r0, [r4, #136]	; 0x88
     220:	ldr	r5, [r4, #3360]	; 0xd20
     224:	add	r0, r4, r0, lsl #2
     228:	ldr	r0, [r0, #8]
     22c:	bl	0 <coda_type_get_class>
     230:	cmp	r0, #0
     234:	beq	23c <dim_enter_array+0x38>
     238:	bl	0 <handle_coda_error>
     23c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     240:	sub	r0, r0, #1
     244:	cmp	r0, #5
     248:	bhi	ac0 <dim_enter_array+0x8bc>
     24c:	add	r1, r5, r5, lsl #2
     250:	add	r5, r4, r1, lsl #4
     254:	add	r1, pc, #0
     258:	ldr	pc, [r1, r0, lsl #2]
     25c:	.word	0x00000274
     260:	.word	0x00000ac0
     264:	.word	0x00000ac0
     268:	.word	0x000002f8
     26c:	.word	0x00000328
     270:	.word	0x000002bc
     274:	ldr	r0, [r4, #136]	; 0x88
     278:	add	r1, sp, #36	; 0x24
     27c:	add	r2, sp, #40	; 0x28
     280:	add	r0, r4, r0, lsl #2
     284:	ldr	r0, [r0, #8]
     288:	bl	0 <coda_type_get_array_dim>
     28c:	cmp	r0, #0
     290:	beq	298 <dim_enter_array+0x94>
     294:	bl	0 <handle_coda_error>
     298:	ldr	sl, [sp, #36]	; 0x24
     29c:	cmp	sl, #1
     2a0:	str	sl, [r5, #804]	; 0x324
     2a4:	blt	37c <dim_enter_array+0x178>
     2a8:	add	r0, r5, #808	; 0x328
     2ac:	lsl	r2, sl, #2
     2b0:	add	r1, sp, #40	; 0x28
     2b4:	bl	0 <memcpy>
     2b8:	b	37c <dim_enter_array+0x178>
     2bc:	ldr	r0, [r4, #136]	; 0x88
     2c0:	add	r1, sp, #40	; 0x28
     2c4:	add	r0, r4, r0, lsl #2
     2c8:	ldr	r0, [r0, #8]
     2cc:	bl	0 <coda_type_get_special_type>
     2d0:	cmp	r0, #0
     2d4:	beq	2dc <dim_enter_array+0xd8>
     2d8:	bl	0 <handle_coda_error>
     2dc:	ldr	r0, [sp, #40]	; 0x28
     2e0:	cmp	r0, #3
     2e4:	bne	af8 <dim_enter_array+0x8f4>
     2e8:	mov	sl, #1
     2ec:	mov	r0, #2
     2f0:	str	sl, [r5, #804]	; 0x324
     2f4:	b	378 <dim_enter_array+0x174>
     2f8:	ldr	r0, [r4, #136]	; 0x88
     2fc:	add	r1, sp, #40	; 0x28
     300:	add	r0, r4, r0, lsl #2
     304:	ldr	r0, [r0, #8]
     308:	bl	0 <coda_type_get_string_length>
     30c:	cmp	r0, #0
     310:	beq	318 <dim_enter_array+0x114>
     314:	bl	0 <handle_coda_error>
     318:	ldr	r0, [sp, #40]	; 0x28
     31c:	mov	sl, #1
     320:	str	sl, [r5, #804]	; 0x324
     324:	b	378 <dim_enter_array+0x174>
     328:	ldr	r0, [r4, #136]	; 0x88
     32c:	add	r1, sp, #40	; 0x28
     330:	add	r0, r4, r0, lsl #2
     334:	ldr	r0, [r0, #8]
     338:	bl	0 <coda_type_get_bit_size>
     33c:	cmp	r0, #0
     340:	beq	348 <dim_enter_array+0x144>
     344:	bl	0 <handle_coda_error>
     348:	ldr	r0, [sp, #44]	; 0x2c
     34c:	mov	sl, #1
     350:	str	sl, [r5, #804]	; 0x324
     354:	cmp	r0, #0
     358:	bmi	374 <dim_enter_array+0x170>
     35c:	ldr	r1, [sp, #40]	; 0x28
     360:	lsr	r2, r1, #3
     364:	tst	r1, #7
     368:	orr	r0, r2, r0, lsl #29
     36c:	addne	r0, r0, #1
     370:	b	378 <dim_enter_array+0x174>
     374:	mvn	r0, #0
     378:	str	r0, [r5, #808]	; 0x328
     37c:	movw	r1, #0
     380:	add	r0, r5, #800	; 0x320
     384:	movt	r1, #0
     388:	ldr	r1, [r1]
     38c:	cmp	r1, #0
     390:	beq	40c <dim_enter_array+0x208>
     394:	movw	r8, #0
     398:	str	r5, [sp, #16]
     39c:	movt	r8, #0
     3a0:	ldr	r1, [r8]
     3a4:	add	r3, sl, r1
     3a8:	str	r1, [r0]
     3ac:	cmp	r3, #9
     3b0:	bge	ad8 <dim_enter_array+0x8d4>
     3b4:	mov	r0, r1
     3b8:	cmp	r1, #0
     3bc:	str	r3, [r8]
     3c0:	str	r1, [sp, #20]
     3c4:	ble	428 <dim_enter_array+0x224>
     3c8:	add	r0, r8, r0, lsl #3
     3cc:	ldr	r2, [r0, #236]	; 0xec
     3d0:	ldr	r1, [r0, #232]	; 0xe8
     3d4:	str	r2, [sp, #28]
     3d8:	ldr	r2, [r0, #296]	; 0x128
     3dc:	str	r1, [sp, #32]
     3e0:	ldr	r1, [r0, #300]	; 0x12c
     3e4:	rsbs	r0, r2, #0
     3e8:	mov	r0, r1
     3ec:	str	r2, [sp, #8]
     3f0:	str	r1, [sp, #12]
     3f4:	rscs	r0, r1, #0
     3f8:	bge	5d8 <dim_enter_array+0x3d4>
     3fc:	cmp	sl, #1
     400:	blt	6a4 <dim_enter_array+0x4a0>
     404:	ldr	r0, [sp, #20]
     408:	b	450 <dim_enter_array+0x24c>
     40c:	mvn	r1, #0
     410:	str	r1, [r0]
     414:	mov	r0, #0
     418:	str	r0, [r5, #840]	; 0x348
     41c:	str	r0, [r5, #844]	; 0x34c
     420:	sub	sp, fp, #28
     424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     428:	mov	r1, #0
     42c:	cmp	sl, #0
     430:	str	r1, [sp, #12]
     434:	mov	r1, #1
     438:	str	r1, [sp, #8]
     43c:	mov	r1, #1
     440:	str	r1, [sp, #32]
     444:	mov	r1, #0
     448:	str	r1, [sp, #28]
     44c:	ble	a98 <dim_enter_array+0x894>
     450:	ldr	r1, [sp, #16]
     454:	add	r7, r8, r0, lsl #2
     458:	mov	r0, #0
     45c:	add	r2, r1, #804	; 0x324
     460:	add	r9, r1, #808	; 0x328
     464:	mov	r1, #0
     468:	str	r2, [sp, #24]
     46c:	mov	r2, #0
     470:	ldr	r3, [r9, r2, lsl #2]
     474:	add	r6, r7, r2, lsl #2
     478:	add	r2, r2, #1
     47c:	str	r0, [r6, #72]	; 0x48
     480:	cmn	r3, #1
     484:	str	r3, [r6, #4]
     488:	movweq	r1, #1
     48c:	cmp	sl, r2
     490:	bne	470 <dim_enter_array+0x26c>
     494:	cmp	r1, #0
     498:	beq	6a4 <dim_enter_array+0x4a0>
     49c:	ldr	r0, [sp, #32]
     4a0:	mov	sl, #0
     4a4:	mov	r6, #0
     4a8:	lsl	r4, r0, #2
     4ac:	b	4cc <dim_enter_array+0x2c8>
     4b0:	str	sl, [r5, #140]	; 0x8c
     4b4:	str	sl, [r5, #108]	; 0x6c
     4b8:	ldr	r0, [sp, #24]
     4bc:	add	r6, r6, #1
     4c0:	ldr	r0, [r0]
     4c4:	cmp	r6, r0
     4c8:	bge	548 <dim_enter_array+0x344>
     4cc:	ldr	r0, [r9, r6, lsl #2]
     4d0:	add	r5, r7, r6, lsl #2
     4d4:	cmn	r0, #1
     4d8:	bne	4b0 <dim_enter_array+0x2ac>
     4dc:	ldr	r0, [sp, #20]
     4e0:	str	r0, [r5, #140]	; 0x8c
     4e4:	mov	r0, r4
     4e8:	bl	0 <malloc>
     4ec:	cmp	r0, #0
     4f0:	str	r0, [r5, #108]	; 0x6c
     4f4:	bne	520 <dim_enter_array+0x31c>
     4f8:	movw	r1, #0
     4fc:	movw	r3, #0
     500:	mov	r0, #456	; 0x1c8
     504:	mov	r2, r4
     508:	movt	r1, #0
     50c:	movt	r3, #0
     510:	str	r0, [sp]
     514:	mvn	r0, #0
     518:	bl	0 <coda_set_error>
     51c:	bl	0 <handle_coda_error>
     520:	ldr	r0, [sp, #32]
     524:	subs	r0, r0, #1
     528:	ldr	r0, [sp, #28]
     52c:	sbcs	r0, r0, #0
     530:	blt	4b8 <dim_enter_array+0x2b4>
     534:	ldr	r0, [r5, #108]	; 0x6c
     538:	mov	r1, #255	; 0xff
     53c:	mov	r2, r4
     540:	bl	0 <memset>
     544:	b	4b8 <dim_enter_array+0x2b4>
     548:	ldr	r0, [sp, #16]
     54c:	mov	r1, #0
     550:	mov	r2, #0
     554:	str	r1, [r0, #844]	; 0x34c
     558:	mov	r0, #0
     55c:	mov	r1, #0
     560:	bl	b0c <get_all_dims_for_array>
     564:	ldr	r0, [sp, #24]
     568:	ldr	sl, [r0]
     56c:	cmp	sl, #1
     570:	blt	6a4 <dim_enter_array+0x4a0>
     574:	mov	r6, #0
     578:	mov	r4, #0
     57c:	b	5ac <dim_enter_array+0x3a8>
     580:	mov	sl, #0
     584:	str	sl, [r5, #72]	; 0x48
     588:	ldr	r0, [r5, #108]	; 0x6c
     58c:	bl	0 <free>
     590:	ldr	r0, [sp, #24]
     594:	str	sl, [r5, #140]	; 0x8c
     598:	str	sl, [r5, #108]	; 0x6c
     59c:	ldr	sl, [r0]
     5a0:	add	r6, r6, #1
     5a4:	cmp	r6, sl
     5a8:	bge	6a8 <dim_enter_array+0x4a4>
     5ac:	ldr	r0, [r9, r6, lsl #2]
     5b0:	cmn	r0, #1
     5b4:	bne	5a0 <dim_enter_array+0x39c>
     5b8:	add	r5, r7, r6, lsl #2
     5bc:	ldr	r0, [r5, #4]
     5c0:	ldr	r1, [r5, #36]	; 0x24
     5c4:	cmp	r0, r1
     5c8:	beq	580 <dim_enter_array+0x37c>
     5cc:	mov	r4, #1
     5d0:	str	r4, [r5, #72]	; 0x48
     5d4:	b	5a0 <dim_enter_array+0x39c>
     5d8:	cmp	sl, #1
     5dc:	blt	6a4 <dim_enter_array+0x4a0>
     5e0:	mov	r0, #0
     5e4:	cmp	sl, #3
     5e8:	bls	67c <dim_enter_array+0x478>
     5ec:	bic	r0, sl, #3
     5f0:	mov	r2, #1
     5f4:	subs	r1, r0, #4
     5f8:	add	r2, r2, r1, lsr #2
     5fc:	and	r1, r2, #1
     600:	beq	ab0 <dim_enter_array+0x8ac>
     604:	sub	r3, r2, r1
     608:	ldr	r2, [sp, #20]
     60c:	vmov.i32	q8, #0	; 0x00000000
     610:	mov	r5, #32
     614:	add	r2, r8, r2, lsl #2
     618:	add	r6, r2, #88	; 0x58
     61c:	mov	r2, #0
     620:	sub	r4, r6, #16
     624:	subs	r3, r3, #2
     628:	add	r2, r2, #8
     62c:	vst1.32	{d16-d17}, [r4]
     630:	sub	r4, r6, #84	; 0x54
     634:	vst1.32	{d16-d17}, [r4]
     638:	sub	r4, r6, #68	; 0x44
     63c:	vst1.32	{d16-d17}, [r4]
     640:	vst1.32	{d16-d17}, [r6], r5
     644:	bne	620 <dim_enter_array+0x41c>
     648:	cmp	r1, #0
     64c:	beq	670 <dim_enter_array+0x46c>
     650:	ldr	r1, [sp, #20]
     654:	vmov.i32	q8, #0	; 0x00000000
     658:	add	r1, r2, r1
     65c:	add	r1, r8, r1, lsl #2
     660:	add	r2, r1, #72	; 0x48
     664:	add	r1, r1, #4
     668:	vst1.32	{d16-d17}, [r2]
     66c:	vst1.32	{d16-d17}, [r1]
     670:	mov	r4, #0
     674:	cmp	sl, r0
     678:	beq	6a8 <dim_enter_array+0x4a4>
     67c:	ldr	r1, [sp, #20]
     680:	mov	r4, #0
     684:	add	r1, r8, r1, lsl #2
     688:	add	r2, r1, r0, lsl #2
     68c:	add	r0, r0, #1
     690:	cmp	sl, r0
     694:	str	r4, [r2, #72]	; 0x48
     698:	str	r4, [r2, #4]
     69c:	bne	688 <dim_enter_array+0x484>
     6a0:	b	6a8 <dim_enter_array+0x4a4>
     6a4:	mov	r4, #0
     6a8:	ldr	r3, [r8]
     6ac:	mvn	r0, #0
     6b0:	cmp	r3, #1
     6b4:	str	r0, [r8, #104]	; 0x68
     6b8:	mov	r0, #0
     6bc:	str	r0, [r8, #68]	; 0x44
     6c0:	blt	6e8 <dim_enter_array+0x4e4>
     6c4:	mov	r1, #1
     6c8:	add	r2, r8, r0, lsl #2
     6cc:	ldr	r2, [r2, #72]	; 0x48
     6d0:	cmp	r2, #0
     6d4:	strne	r0, [r8, #104]	; 0x68
     6d8:	add	r0, r0, #1
     6dc:	strne	r1, [r8, #68]	; 0x44
     6e0:	cmp	r0, r3
     6e4:	blt	6c8 <dim_enter_array+0x4c4>
     6e8:	ldr	r1, [sp, #16]
     6ec:	mov	r0, #1
     6f0:	cmp	sl, #1
     6f4:	str	r3, [sp, #24]
     6f8:	str	r0, [r1, #840]!	; 0x348
     6fc:	str	r1, [sp, #16]
     700:	blt	794 <dim_enter_array+0x590>
     704:	ldr	r2, [sp, #20]
     708:	mov	r3, #0
     70c:	str	r4, [sp, #4]
     710:	add	r1, r8, r2, lsl #2
     714:	add	r2, r8, r2, lsl #3
     718:	add	ip, r2, #240	; 0xf0
     71c:	add	lr, r1, #4
     720:	mov	r2, ip
     724:	b	754 <dim_enter_array+0x550>
     728:	ldr	r4, [r2, #-8]
     72c:	ldr	r7, [r2, #-4]
     730:	asr	r9, r5, #31
     734:	umull	r6, r1, r4, r5
     738:	mla	r1, r4, r9, r1
     73c:	mla	r7, r7, r5, r1
     740:	strd	r6, [r2]
     744:	add	r3, r3, #1
     748:	add	r2, r2, #8
     74c:	cmp	r3, sl
     750:	bge	788 <dim_enter_array+0x584>
     754:	ldr	r5, [lr, r3, lsl #2]
     758:	cmp	r3, #0
     75c:	mul	r0, r0, r5
     760:	bne	728 <dim_enter_array+0x524>
     764:	ldr	r5, [lr]
     768:	ldr	r1, [sp, #32]
     76c:	umull	r4, r6, r1, r5
     770:	asr	r7, r5, #31
     774:	mla	r7, r1, r7, r6
     778:	ldr	r1, [sp, #28]
     77c:	mla	r5, r1, r5, r7
     780:	strd	r4, [ip]
     784:	b	744 <dim_enter_array+0x540>
     788:	ldr	r1, [sp, #16]
     78c:	ldr	r4, [sp, #4]
     790:	str	r0, [r1]
     794:	cmp	r4, #0
     798:	beq	878 <dim_enter_array+0x674>
     79c:	cmp	sl, #1
     7a0:	blt	7bc <dim_enter_array+0x5b8>
     7a4:	ldr	r0, [sp, #20]
     7a8:	lsl	r2, sl, #3
     7ac:	mov	r1, #0
     7b0:	add	r0, r8, r0, lsl #3
     7b4:	add	r0, r0, #304	; 0x130
     7b8:	bl	0 <memset>
     7bc:	ldr	r0, [sp, #32]
     7c0:	subs	r0, r0, #1
     7c4:	ldr	r0, [sp, #28]
     7c8:	sbcs	r0, r0, #0
     7cc:	blt	964 <dim_enter_array+0x760>
     7d0:	ldr	r1, [sp, #20]
     7d4:	movw	r0, #65232	; 0xfed0
     7d8:	mov	r2, #0
     7dc:	movt	r0, #65535	; 0xffff
     7e0:	sub	ip, r0, r1, lsl #3
     7e4:	lsl	lr, r1, #2
     7e8:	cmp	sl, #1
     7ec:	bge	810 <dim_enter_array+0x60c>
     7f0:	ldr	r0, [sp, #32]
     7f4:	add	r2, r2, #1
     7f8:	subs	r0, r2, r0
     7fc:	ldr	r0, [sp, #28]
     800:	rscs	r0, r0, #0
     804:	bge	964 <dim_enter_array+0x760>
     808:	cmp	sl, #1
     80c:	blt	7f0 <dim_enter_array+0x5ec>
     810:	mov	r3, #1
     814:	mov	r0, ip
     818:	mov	r1, lr
     81c:	mov	r4, sl
     820:	b	85c <dim_enter_array+0x658>
     824:	add	r6, r6, #4
     828:	ldr	r6, [r6]
     82c:	mov	r7, r8
     830:	add	r1, r1, #4
     834:	ldr	r5, [r7, -r0]!
     838:	sub	r0, r0, #8
     83c:	mul	r3, r6, r3
     840:	adds	r5, r5, r3
     844:	str	r5, [r7]
     848:	ldr	r5, [r7, #4]
     84c:	adc	r5, r5, r3, asr #31
     850:	subs	r4, r4, #1
     854:	str	r5, [r7, #4]
     858:	beq	7f0 <dim_enter_array+0x5ec>
     85c:	add	r6, r8, r1
     860:	ldr	r7, [r6, #72]	; 0x48
     864:	cmp	r7, #0
     868:	beq	824 <dim_enter_array+0x620>
     86c:	ldr	r7, [r6, #108]	; 0x6c
     870:	add	r6, r7, r2, lsl #2
     874:	b	828 <dim_enter_array+0x624>
     878:	ldr	r0, [sp, #20]
     87c:	ldr	r2, [sp, #8]
     880:	cmp	sl, #2
     884:	add	lr, r8, r0, lsl #2
     888:	add	r5, r8, r0, lsl #3
     88c:	ldr	r0, [lr, #4]
     890:	umull	r1, r3, r2, r0
     894:	asr	r7, r0, #31
     898:	mla	r3, r2, r7, r3
     89c:	ldr	r2, [sp, #12]
     8a0:	str	r1, [r5, #304]	; 0x130
     8a4:	mla	r0, r2, r0, r3
     8a8:	str	r0, [r5, #308]	; 0x134
     8ac:	blt	964 <dim_enter_array+0x760>
     8b0:	ldr	r0, [r5, #304]	; 0x130
     8b4:	ldr	r1, [r5, #308]	; 0x134
     8b8:	sub	r4, sl, #1
     8bc:	mov	r6, #1
     8c0:	cmp	sl, #2
     8c4:	and	r2, r4, #1
     8c8:	beq	930 <dim_enter_array+0x72c>
     8cc:	sub	r9, r4, r2
     8d0:	add	r4, r5, #320	; 0x140
     8d4:	mov	r5, #0
     8d8:	str	r2, [sp, #32]
     8dc:	add	r7, lr, r5, lsl #2
     8e0:	add	r5, r5, #2
     8e4:	cmp	r9, r5
     8e8:	ldr	r3, [r7, #8]
     8ec:	umull	r2, r6, r0, r3
     8f0:	asr	ip, r3, #31
     8f4:	mla	r0, r0, ip, r6
     8f8:	mla	r1, r1, r3, r0
     8fc:	str	r2, [r4, #-8]
     900:	str	r1, [r4, #-4]
     904:	ldr	r3, [r7, #12]
     908:	umull	r0, r7, r2, r3
     90c:	asr	r6, r3, #31
     910:	mla	r2, r2, r6, r7
     914:	mla	r1, r1, r3, r2
     918:	str	r0, [r4]
     91c:	str	r1, [r4, #4]
     920:	add	r4, r4, #16
     924:	bne	8dc <dim_enter_array+0x6d8>
     928:	ldr	r2, [sp, #32]
     92c:	add	r6, r5, #1
     930:	cmp	r2, #0
     934:	beq	964 <dim_enter_array+0x760>
     938:	ldr	r2, [sp, #20]
     93c:	add	r2, r6, r2
     940:	add	r3, r8, r2, lsl #3
     944:	add	r2, r8, r2, lsl #2
     948:	ldr	r2, [r2, #4]
     94c:	umull	r7, r6, r0, r2
     950:	asr	r5, r2, #31
     954:	mla	r0, r0, r5, r6
     958:	mla	r0, r1, r2, r0
     95c:	str	r7, [r3, #304]	; 0x130
     960:	str	r0, [r3, #308]	; 0x134
     964:	ldr	r0, [sp, #20]
     968:	add	r0, r0, sl
     96c:	add	r1, r8, r0, lsl #3
     970:	ldr	r0, [r1, #296]	; 0x128
     974:	ldr	r2, [r1, #300]	; 0x12c
     978:	subs	r0, r0, #1
     97c:	sbcs	r0, r2, #0
     980:	blt	a90 <dim_enter_array+0x88c>
     984:	ldr	r0, [sp, #24]
     988:	sub	r0, r0, #1
     98c:	add	r2, r8, r0, lsl #3
     990:	add	r0, r8, r0, lsl #2
     994:	ldr	r0, [r0, #4]
     998:	asr	r3, r0, #31
     99c:	str	r0, [r2, #176]	; 0xb0
     9a0:	subs	r0, sl, #2
     9a4:	str	r3, [r2, #180]	; 0xb4
     9a8:	bmi	9f0 <dim_enter_array+0x7ec>
     9ac:	ldr	r0, [sp, #20]
     9b0:	add	r1, r1, #160	; 0xa0
     9b4:	add	r0, r8, r0, lsl #2
     9b8:	sub	r0, r0, #4
     9bc:	ldr	r2, [r0, sl, lsl #2]
     9c0:	ldrd	r4, [r1, #8]
     9c4:	umull	r6, r3, r4, r2
     9c8:	asr	r7, r2, #31
     9cc:	mla	r3, r4, r7, r3
     9d0:	mla	r7, r5, r2, r3
     9d4:	sub	r3, sl, #2
     9d8:	sub	r2, sl, #1
     9dc:	cmp	r3, #0
     9e0:	mov	sl, r2
     9e4:	strd	r6, [r1]
     9e8:	sub	r1, r1, #8
     9ec:	bgt	9bc <dim_enter_array+0x7b8>
     9f0:	ldr	r2, [sp, #20]
     9f4:	cmp	r2, #1
     9f8:	blt	a90 <dim_enter_array+0x88c>
     9fc:	add	r0, r8, r2, lsl #3
     a00:	tst	r2, #1
     a04:	mov	r1, r2
     a08:	add	ip, r0, #176	; 0xb0
     a0c:	mov	r0, r2
     a10:	beq	a3c <dim_enter_array+0x838>
     a14:	sub	r1, r0, #1
     a18:	ldrd	r6, [ip]
     a1c:	add	r2, r8, r1, lsl #3
     a20:	ldr	r4, [r2, #176]	; 0xb0
     a24:	ldr	r9, [r2, #180]	; 0xb4
     a28:	umull	r3, r5, r4, r6
     a2c:	mla	r7, r4, r7, r5
     a30:	mla	r5, r9, r6, r7
     a34:	str	r3, [r2, #176]	; 0xb0
     a38:	str	r5, [r2, #180]	; 0xb4
     a3c:	cmp	r0, #1
     a40:	beq	a90 <dim_enter_array+0x88c>
     a44:	add	r2, r8, r1, lsl #3
     a48:	add	r2, r2, #160	; 0xa0
     a4c:	ldrd	r4, [ip]
     a50:	ldr	r6, [r2, #8]
     a54:	ldr	r0, [r2, #12]
     a58:	ldm	r2, {r3, lr}
     a5c:	sub	r1, r1, #2
     a60:	cmp	r1, #0
     a64:	umull	r8, r7, r6, r4
     a68:	mla	r5, r6, r5, r7
     a6c:	mla	r9, r0, r4, r5
     a70:	strd	r8, [r2, #8]
     a74:	ldm	ip, {r0, r5}
     a78:	umull	r4, r6, r3, r0
     a7c:	mla	r3, r3, r5, r6
     a80:	mla	r5, lr, r0, r3
     a84:	strd	r4, [r2]
     a88:	sub	r2, r2, #16
     a8c:	bgt	a4c <dim_enter_array+0x848>
     a90:	sub	sp, fp, #28
     a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a98:	mov	r0, #1
     a9c:	mov	r4, #0
     aa0:	str	r0, [sp, #32]
     aa4:	mov	r0, #0
     aa8:	str	r0, [sp, #28]
     aac:	b	6ac <dim_enter_array+0x4a8>
     ab0:	mov	r2, #0
     ab4:	cmp	r1, #0
     ab8:	bne	650 <dim_enter_array+0x44c>
     abc:	b	670 <dim_enter_array+0x46c>
     ac0:	movw	r0, #0
     ac4:	movw	r1, #0
     ac8:	movw	r3, #0
     acc:	movw	r2, #386	; 0x182
     ad0:	movt	r0, #0
     ad4:	b	aec <dim_enter_array+0x8e8>
     ad8:	movw	r0, #0
     adc:	movw	r1, #0
     ae0:	movw	r3, #0
     ae4:	movw	r2, #402	; 0x192
     ae8:	movt	r0, #0
     aec:	movt	r1, #0
     af0:	movt	r3, #0
     af4:	bl	0 <__assert_fail>
     af8:	movw	r0, #0
     afc:	movw	r1, #0
     b00:	movw	r3, #0
     b04:	movw	r2, #349	; 0x15d
     b08:	b	ad0 <dim_enter_array+0x8cc>

00000b0c <get_all_dims_for_array>:
     b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b10:	add	fp, sp, #28
     b14:	sub	sp, sp, #44	; 0x2c
     b18:	movw	r7, #0
     b1c:	mov	r8, r1
     b20:	mov	r9, r0
     b24:	sub	r1, fp, #32
     b28:	str	r2, [sp]
     b2c:	movt	r7, #0
     b30:	add	r5, r7, #144	; 0x90
     b34:	mov	r0, r5
     b38:	bl	0 <coda_cursor_get_type_class>
     b3c:	cmp	r0, #0
     b40:	beq	b48 <get_all_dims_for_array+0x3c>
     b44:	bl	0 <handle_coda_error>
     b48:	ldr	r0, [fp, #-32]	; 0xffffffe0
     b4c:	sub	r1, r0, #4
     b50:	cmp	r1, #2
     b54:	bcc	c34 <get_all_dims_for_array+0x128>
     b58:	cmp	r0, #0
     b5c:	beq	c74 <get_all_dims_for_array+0x168>
     b60:	cmp	r0, #1
     b64:	bne	f04 <get_all_dims_for_array+0x3f8>
     b68:	add	r0, r8, r8, lsl #2
     b6c:	add	r4, r7, r0, lsl #4
     b70:	ldr	r0, [r7, #3360]	; 0xd20
     b74:	ldr	r6, [r4, #800]	; 0x320
     b78:	cmp	r0, r8
     b7c:	bne	d64 <get_all_dims_for_array+0x258>
     b80:	add	r8, sp, #8
     b84:	add	r1, sp, #4
     b88:	mov	r0, r5
     b8c:	mov	r2, r8
     b90:	bl	0 <coda_cursor_get_array_dim>
     b94:	cmp	r0, #0
     b98:	beq	ba0 <get_all_dims_for_array+0x94>
     b9c:	bl	0 <handle_coda_error>
     ba0:	mov	r0, r4
     ba4:	ldr	r1, [sp, #4]
     ba8:	ldr	r2, [r0, #804]!	; 0x324
     bac:	cmp	r1, r2
     bb0:	bne	f34 <get_all_dims_for_array+0x428>
     bb4:	cmp	r1, #1
     bb8:	blt	e70 <get_all_dims_for_array+0x364>
     bbc:	movw	r1, #0
     bc0:	add	r2, r4, #808	; 0x328
     bc4:	add	r3, r4, #844	; 0x34c
     bc8:	mov	r7, #0
     bcc:	movt	r1, #0
     bd0:	add	ip, r1, r6, lsl #2
     bd4:	b	bfc <get_all_dims_for_array+0xf0>
     bd8:	cmp	r5, r6
     bdc:	strlt	r6, [r4, #4]
     be0:	ldr	r1, [r4, #36]	; 0x24
     be4:	cmp	r1, r6
     be8:	strgt	r6, [r4, #36]	; 0x24
     bec:	ldr	r1, [r0]
     bf0:	add	r7, r7, #1
     bf4:	cmp	r7, r1
     bf8:	bge	e70 <get_all_dims_for_array+0x364>
     bfc:	ldr	r6, [r2, r7, lsl #2]
     c00:	cmn	r6, #1
     c04:	bne	bec <get_all_dims_for_array+0xe0>
     c08:	add	r4, ip, r7, lsl #2
     c0c:	ldr	r6, [r8, r7, lsl #2]
     c10:	ldr	r1, [r3]
     c14:	ldr	r5, [r4, #108]	; 0x6c
     c18:	str	r6, [r5, r1, lsl #2]
     c1c:	ldr	r5, [r4, #4]
     c20:	cmn	r5, #1
     c24:	bne	bd8 <get_all_dims_for_array+0xcc>
     c28:	str	r6, [r4, #4]
     c2c:	str	r6, [r4, #36]	; 0x24
     c30:	b	bec <get_all_dims_for_array+0xe0>
     c34:	ldr	r1, [r7, #3360]	; 0xd20
     c38:	cmp	r1, r8
     c3c:	bne	f1c <get_all_dims_for_array+0x410>
     c40:	cmp	r0, #4
     c44:	bne	cd8 <get_all_dims_for_array+0x1cc>
     c48:	add	r1, sp, #4
     c4c:	mov	r0, r5
     c50:	bl	0 <coda_cursor_get_string_length>
     c54:	cmp	r0, #0
     c58:	beq	c60 <get_all_dims_for_array+0x154>
     c5c:	bl	0 <handle_coda_error>
     c60:	ldr	r0, [sp, #4]
     c64:	str	r0, [sp, #8]
     c68:	asr	r0, r0, #31
     c6c:	str	r0, [sp, #12]
     c70:	b	cf0 <get_all_dims_for_array+0x1e4>
     c74:	ldr	r0, [sp]
     c78:	add	r2, sp, #8
     c7c:	add	r4, r7, r0, lsl #2
     c80:	mov	r0, r5
     c84:	ldr	r1, [r4, #3492]!	; 0xda4
     c88:	bl	0 <coda_cursor_get_record_field_available_status>
     c8c:	cmp	r0, #0
     c90:	beq	c98 <get_all_dims_for_array+0x18c>
     c94:	bl	0 <handle_coda_error>
     c98:	ldr	r0, [sp, #8]
     c9c:	cmp	r0, #0
     ca0:	beq	de8 <get_all_dims_for_array+0x2dc>
     ca4:	ldr	r1, [r4]
     ca8:	mov	r0, r5
     cac:	bl	0 <coda_cursor_goto_record_field_by_index>
     cb0:	cmp	r0, #0
     cb4:	beq	cbc <get_all_dims_for_array+0x1b0>
     cb8:	bl	0 <handle_coda_error>
     cbc:	ldr	r1, [sp]
     cc0:	add	r0, r9, #1
     cc4:	add	r2, r1, #1
     cc8:	mov	r1, r8
     ccc:	bl	b0c <get_all_dims_for_array>
     cd0:	mov	r0, r5
     cd4:	b	ef8 <get_all_dims_for_array+0x3ec>
     cd8:	add	r1, sp, #8
     cdc:	mov	r0, r5
     ce0:	bl	0 <coda_cursor_get_byte_size>
     ce4:	cmp	r0, #0
     ce8:	beq	cf0 <get_all_dims_for_array+0x1e4>
     cec:	bl	0 <handle_coda_error>
     cf0:	add	r0, r8, r8, lsl #2
     cf4:	ldr	r2, [sp, #12]
     cf8:	add	r0, r7, r0, lsl #4
     cfc:	ldr	r1, [r0, #800]	; 0x320
     d00:	ldr	r3, [r0, #844]	; 0x34c
     d04:	movw	r0, #0
     d08:	movt	r0, #0
     d0c:	add	r0, r0, r1, lsl #2
     d10:	ldr	r1, [sp, #8]
     d14:	ldr	r7, [r0, #108]	; 0x6c
     d18:	str	r1, [r7, r3, lsl #2]
     d1c:	mov	r3, r0
     d20:	ldr	r7, [r3, #4]!
     d24:	cmn	r7, #1
     d28:	beq	d50 <get_all_dims_for_array+0x244>
     d2c:	subs	r6, r7, r1
     d30:	rscs	r7, r2, r7, asr #31
     d34:	strlt	r1, [r3]
     d38:	ldr	r3, [r0, #36]!	; 0x24
     d3c:	subs	r7, r1, r3
     d40:	sbcs	r2, r2, r3, asr #31
     d44:	strlt	r1, [r0]
     d48:	sub	sp, fp, #28
     d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d50:	add	r0, r0, #36	; 0x24
     d54:	str	r1, [r3]
     d58:	str	r1, [r0]
     d5c:	sub	sp, fp, #28
     d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d64:	cmp	r8, #0
     d68:	moveq	r0, #0
     d6c:	streq	r0, [r7, #844]	; 0x34c
     d70:	ldr	r1, [r4, #840]	; 0x348
     d74:	ldr	r0, [r4, #844]	; 0x34c
     d78:	mul	r1, r1, r0
     d7c:	str	r1, [r4, #924]!	; 0x39c
     d80:	ldr	r1, [r4, #-120]	; 0xffffff88
     d84:	cmp	r1, #1
     d88:	blt	e78 <get_all_dims_for_array+0x36c>
     d8c:	movw	r2, #0
     d90:	add	r1, r1, r6
     d94:	add	r3, r6, #27
     d98:	movt	r2, #0
     d9c:	add	r2, r2, r6, lsl #2
     da0:	mov	r6, #1
     da4:	add	r2, r2, #72	; 0x48
     da8:	b	dd0 <get_all_dims_for_array+0x2c4>
     dac:	sub	r7, r2, #68	; 0x44
     db0:	ldr	r7, [r7]
     db4:	add	r2, r2, #4
     db8:	mul	r6, r7, r6
     dbc:	add	r7, r3, #1
     dc0:	sub	r3, r3, #26
     dc4:	cmp	r3, r1
     dc8:	mov	r3, r7
     dcc:	bge	e68 <get_all_dims_for_array+0x35c>
     dd0:	ldr	r7, [r2]
     dd4:	cmp	r7, #0
     dd8:	beq	dac <get_all_dims_for_array+0x2a0>
     ddc:	ldr	r7, [r2, #36]	; 0x24
     de0:	add	r7, r7, r0, lsl #2
     de4:	b	db0 <get_all_dims_for_array+0x2a4>
     de8:	ldr	r0, [r7, #3360]	; 0xd20
     dec:	add	r0, r0, r0, lsl #2
     df0:	add	r3, r7, r0, lsl #4
     df4:	mov	r0, r3
     df8:	ldr	r5, [r0, #804]!	; 0x324
     dfc:	cmp	r5, #1
     e00:	blt	e70 <get_all_dims_for_array+0x364>
     e04:	ldr	r1, [r0, #-4]
     e08:	movw	r2, #0
     e0c:	mov	r7, #0
     e10:	mov	r6, #0
     e14:	movt	r2, #0
     e18:	add	ip, r2, r1, lsl #2
     e1c:	add	r2, r3, #808	; 0x328
     e20:	add	r3, r3, #844	; 0x34c
     e24:	b	e34 <get_all_dims_for_array+0x328>
     e28:	add	r6, r6, #1
     e2c:	cmp	r6, r5
     e30:	bge	e70 <get_all_dims_for_array+0x364>
     e34:	ldr	r4, [r2, r6, lsl #2]
     e38:	cmn	r4, #1
     e3c:	bne	e28 <get_all_dims_for_array+0x31c>
     e40:	add	r5, ip, r6, lsl #2
     e44:	ldr	r1, [r3]
     e48:	ldr	r4, [r5, #108]	; 0x6c
     e4c:	str	r7, [r4, r1, lsl #2]
     e50:	ldr	r1, [r5, #4]
     e54:	cmn	r1, #1
     e58:	streq	r7, [r5, #4]
     e5c:	str	r7, [r5, #36]	; 0x24
     e60:	ldr	r5, [r0]
     e64:	b	e28 <get_all_dims_for_array+0x31c>
     e68:	cmp	r6, #1
     e6c:	bge	e7c <get_all_dims_for_array+0x370>
     e70:	sub	sp, fp, #28
     e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e78:	mov	r6, #1
     e7c:	mov	r0, r5
     e80:	mov	r7, r9
     e84:	mov	sl, r5
     e88:	bl	0 <coda_cursor_goto_first_array_element>
     e8c:	cmp	r0, #0
     e90:	beq	e98 <get_all_dims_for_array+0x38c>
     e94:	bl	0 <handle_coda_error>
     e98:	add	r5, r8, #1
     e9c:	sub	r9, r6, #1
     ea0:	add	r7, r7, #1
     ea4:	mov	r8, #0
     ea8:	b	ec4 <get_all_dims_for_array+0x3b8>
     eac:	ldr	r0, [r4]
     eb0:	add	r0, r0, #1
     eb4:	str	r0, [r4]
     eb8:	add	r8, r8, #1
     ebc:	cmp	r6, r8
     ec0:	beq	ef4 <get_all_dims_for_array+0x3e8>
     ec4:	ldr	r2, [sp]
     ec8:	mov	r0, r7
     ecc:	mov	r1, r5
     ed0:	bl	b0c <get_all_dims_for_array>
     ed4:	cmp	r8, r9
     ed8:	bge	eb8 <get_all_dims_for_array+0x3ac>
     edc:	mov	r0, sl
     ee0:	bl	0 <coda_cursor_goto_next_array_element>
     ee4:	cmp	r0, #0
     ee8:	beq	eac <get_all_dims_for_array+0x3a0>
     eec:	bl	0 <handle_coda_error>
     ef0:	b	eac <get_all_dims_for_array+0x3a0>
     ef4:	mov	r0, sl
     ef8:	bl	0 <coda_cursor_goto_parent>
     efc:	sub	sp, fp, #28
     f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f04:	movw	r0, #0
     f08:	movw	r1, #0
     f0c:	movw	r3, #0
     f10:	movw	r2, #294	; 0x126
     f14:	movt	r0, #0
     f18:	b	f48 <get_all_dims_for_array+0x43c>
     f1c:	movw	r0, #0
     f20:	movw	r1, #0
     f24:	movw	r3, #0
     f28:	mov	r2, #252	; 0xfc
     f2c:	movt	r0, #0
     f30:	b	f48 <get_all_dims_for_array+0x43c>
     f34:	movw	r0, #0
     f38:	movw	r1, #0
     f3c:	movw	r3, #0
     f40:	mov	r2, #125	; 0x7d
     f44:	movt	r0, #0
     f48:	movt	r1, #0
     f4c:	movt	r3, #0
     f50:	bl	0 <__assert_fail>

00000f54 <dim_leave_array>:
     f54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     f58:	add	fp, sp, #24
     f5c:	movw	r0, #0
     f60:	movt	r0, #0
     f64:	ldr	r1, [r0, #3360]	; 0xd20
     f68:	cmn	r1, #1
     f6c:	ble	1064 <dim_leave_array+0x110>
     f70:	add	r1, r1, r1, lsl #2
     f74:	movw	r8, #0
     f78:	movt	r8, #0
     f7c:	add	r6, r0, r1, lsl #4
     f80:	ldr	r1, [r8]
     f84:	ldr	r0, [r6, #804]!	; 0x324
     f88:	ldr	r4, [r6, #-4]
     f8c:	sub	r1, r1, r0
     f90:	cmp	r0, #1
     f94:	str	r1, [r8]
     f98:	blt	fd8 <dim_leave_array+0x84>
     f9c:	add	r7, r8, r4, lsl #2
     fa0:	mov	r5, #0
     fa4:	b	fb4 <dim_leave_array+0x60>
     fa8:	add	r5, r5, #1
     fac:	cmp	r5, r0
     fb0:	bge	fd4 <dim_leave_array+0x80>
     fb4:	add	r1, r7, r5, lsl #2
     fb8:	ldr	r2, [r1, #72]	; 0x48
     fbc:	cmp	r2, #0
     fc0:	beq	fa8 <dim_leave_array+0x54>
     fc4:	ldr	r0, [r1, #108]	; 0x6c
     fc8:	bl	0 <free>
     fcc:	ldr	r0, [r6]
     fd0:	b	fa8 <dim_leave_array+0x54>
     fd4:	ldr	r1, [r8]
     fd8:	mvn	r2, #0
     fdc:	cmp	r1, #1
     fe0:	str	r2, [r8, #104]	; 0x68
     fe4:	mov	r2, #0
     fe8:	str	r2, [r8, #68]	; 0x44
     fec:	blt	1014 <dim_leave_array+0xc0>
     ff0:	mov	r3, #1
     ff4:	add	r7, r8, r2, lsl #2
     ff8:	ldr	r7, [r7, #72]	; 0x48
     ffc:	cmp	r7, #0
    1000:	strne	r2, [r8, #104]	; 0x68
    1004:	add	r2, r2, #1
    1008:	strne	r3, [r8, #68]	; 0x44
    100c:	cmp	r2, r1
    1010:	blt	ff4 <dim_leave_array+0xa0>
    1014:	add	r0, r4, r0
    1018:	add	r0, r8, r0, lsl #3
    101c:	ldr	r1, [r0, #296]	; 0x128
    1020:	ldr	r0, [r0, #300]	; 0x12c
    1024:	subs	r1, r1, #1
    1028:	sbcs	r0, r0, #0
    102c:	cmpge	r4, #1
    1030:	blt	1060 <dim_leave_array+0x10c>
    1034:	add	r0, r8, r4, lsl #3
    1038:	add	r5, r0, #168	; 0xa8
    103c:	add	r6, r0, #176	; 0xb0
    1040:	ldrd	r0, [r5]
    1044:	ldrd	r2, [r6]
    1048:	bl	0 <__aeabi_ldivmod>
    104c:	sub	r4, r4, #1
    1050:	strd	r0, [r5]
    1054:	sub	r5, r5, #8
    1058:	cmp	r4, #0
    105c:	bgt	1040 <dim_leave_array+0xec>
    1060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1064:	movw	r0, #0
    1068:	movw	r1, #0
    106c:	movw	r3, #0
    1070:	movw	r2, #579	; 0x243
    1074:	movt	r0, #0
    1078:	movt	r1, #0
    107c:	movt	r3, #0
    1080:	bl	0 <__assert_fail>

00001084 <dim_record_field_available>:
    1084:	mov	r0, #0
    1088:	mov	r1, #0
    108c:	mov	r2, #0
    1090:	b	1094 <get_record_field_available_status>

00001094 <get_record_field_available_status>:
    1094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1098:	add	fp, sp, #28
    109c:	sub	sp, sp, #12
    10a0:	movw	r5, #0
    10a4:	mov	r6, r1
    10a8:	mov	r7, r0
    10ac:	add	r1, sp, #8
    10b0:	mov	r9, r2
    10b4:	movt	r5, #0
    10b8:	add	r0, r5, #144	; 0x90
    10bc:	str	r0, [sp]
    10c0:	bl	0 <coda_cursor_get_type_class>
    10c4:	cmp	r0, #0
    10c8:	beq	10d0 <get_record_field_available_status+0x3c>
    10cc:	bl	0 <handle_coda_error>
    10d0:	ldr	r0, [sp, #8]
    10d4:	cmp	r0, #0
    10d8:	beq	1180 <get_record_field_available_status+0xec>
    10dc:	cmp	r0, #1
    10e0:	bne	12b0 <get_record_field_available_status+0x21c>
    10e4:	ldr	r0, [r5, #3360]	; 0xd20
    10e8:	cmp	r0, r6
    10ec:	ble	12c8 <get_record_field_available_status+0x234>
    10f0:	add	r0, r6, r6, lsl #2
    10f4:	cmp	r6, #0
    10f8:	add	sl, r5, r0, lsl #4
    10fc:	moveq	r0, #0
    1100:	ldr	r3, [sl, #800]	; 0x320
    1104:	streq	r0, [r5, #844]	; 0x34c
    1108:	ldr	r1, [sl, #840]	; 0x348
    110c:	ldr	r0, [sl, #844]	; 0x34c
    1110:	mul	r1, r1, r0
    1114:	str	r1, [sl, #924]!	; 0x39c
    1118:	ldr	r1, [sl, #-120]	; 0xffffff88
    111c:	cmp	r1, #1
    1120:	blt	120c <get_record_field_available_status+0x178>
    1124:	movw	r2, #0
    1128:	add	r1, r1, r3
    112c:	mov	r5, #1
    1130:	movt	r2, #0
    1134:	add	r2, r2, r3, lsl #2
    1138:	add	r3, r3, #27
    113c:	add	r2, r2, #72	; 0x48
    1140:	b	1168 <get_record_field_available_status+0xd4>
    1144:	sub	r4, r2, #68	; 0x44
    1148:	ldr	r4, [r4]
    114c:	add	r2, r2, #4
    1150:	mul	r5, r4, r5
    1154:	add	r4, r3, #1
    1158:	sub	r3, r3, #26
    115c:	cmp	r3, r1
    1160:	mov	r3, r4
    1164:	bge	1200 <get_record_field_available_status+0x16c>
    1168:	ldr	r4, [r2]
    116c:	cmp	r4, #0
    1170:	beq	1144 <get_record_field_available_status+0xb0>
    1174:	ldr	r4, [r2, #36]	; 0x24
    1178:	add	r4, r4, r0, lsl #2
    117c:	b	1148 <get_record_field_available_status+0xb4>
    1180:	add	r4, r5, r9, lsl #2
    1184:	ldr	r0, [sp]
    1188:	add	r2, sp, #4
    118c:	ldr	r1, [r4, #3492]!	; 0xda4
    1190:	bl	0 <coda_cursor_get_record_field_available_status>
    1194:	cmp	r0, #0
    1198:	beq	11a0 <get_record_field_available_status+0x10c>
    119c:	bl	0 <handle_coda_error>
    11a0:	ldr	r0, [sp, #4]
    11a4:	cmp	r0, #0
    11a8:	beq	12a4 <get_record_field_available_status+0x210>
    11ac:	ldr	r0, [r5, #3748]	; 0xea4
    11b0:	sub	r0, r0, #1
    11b4:	cmp	r0, r9
    11b8:	beq	1290 <get_record_field_available_status+0x1fc>
    11bc:	ldr	r1, [r4]
    11c0:	ldr	r0, [sp]
    11c4:	bl	0 <coda_cursor_goto_record_field_by_index>
    11c8:	cmp	r0, #0
    11cc:	beq	11d4 <get_record_field_available_status+0x140>
    11d0:	bl	0 <handle_coda_error>
    11d4:	add	r0, r7, #1
    11d8:	add	r2, r9, #1
    11dc:	mov	r1, r6
    11e0:	bl	1094 <get_record_field_available_status>
    11e4:	str	r0, [sp, #4]
    11e8:	ldr	r0, [sp]
    11ec:	bl	0 <coda_cursor_goto_parent>
    11f0:	ldr	r0, [sp, #4]
    11f4:	cmp	r0, #0
    11f8:	bne	1290 <get_record_field_available_status+0x1fc>
    11fc:	b	12a4 <get_record_field_available_status+0x210>
    1200:	cmp	r5, #1
    1204:	bge	1210 <get_record_field_available_status+0x17c>
    1208:	b	12a4 <get_record_field_available_status+0x210>
    120c:	mov	r5, #1
    1210:	ldr	r0, [sp]
    1214:	bl	0 <coda_cursor_goto_first_array_element>
    1218:	cmp	r0, #0
    121c:	beq	1224 <get_record_field_available_status+0x190>
    1220:	bl	0 <handle_coda_error>
    1224:	add	r6, r6, #1
    1228:	sub	r4, r5, #1
    122c:	add	r7, r7, #1
    1230:	mov	r8, #0
    1234:	b	1250 <get_record_field_available_status+0x1bc>
    1238:	ldr	r0, [sl]
    123c:	add	r0, r0, #1
    1240:	str	r0, [sl]
    1244:	add	r8, r8, #1
    1248:	cmp	r5, r8
    124c:	beq	129c <get_record_field_available_status+0x208>
    1250:	mov	r0, r7
    1254:	mov	r1, r6
    1258:	mov	r2, r9
    125c:	bl	1094 <get_record_field_available_status>
    1260:	cmp	r0, #0
    1264:	bne	1288 <get_record_field_available_status+0x1f4>
    1268:	cmp	r8, r4
    126c:	bge	1244 <get_record_field_available_status+0x1b0>
    1270:	ldr	r0, [sp]
    1274:	bl	0 <coda_cursor_goto_next_array_element>
    1278:	cmp	r0, #0
    127c:	beq	1238 <get_record_field_available_status+0x1a4>
    1280:	bl	0 <handle_coda_error>
    1284:	b	1238 <get_record_field_available_status+0x1a4>
    1288:	ldr	r0, [sp]
    128c:	bl	0 <coda_cursor_goto_parent>
    1290:	mov	r0, #1
    1294:	sub	sp, fp, #28
    1298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    129c:	ldr	r0, [sp]
    12a0:	bl	0 <coda_cursor_goto_parent>
    12a4:	mov	r0, #0
    12a8:	sub	sp, fp, #28
    12ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12b0:	movw	r0, #0
    12b4:	movw	r1, #0
    12b8:	movw	r3, #0
    12bc:	movw	r2, #729	; 0x2d9
    12c0:	movt	r0, #0
    12c4:	b	12dc <get_record_field_available_status+0x248>
    12c8:	movw	r0, #0
    12cc:	movw	r1, #0
    12d0:	movw	r3, #0
    12d4:	movw	r2, #638	; 0x27e
    12d8:	movt	r0, #0
    12dc:	movt	r1, #0
    12e0:	movt	r3, #0
    12e4:	bl	0 <__assert_fail>
