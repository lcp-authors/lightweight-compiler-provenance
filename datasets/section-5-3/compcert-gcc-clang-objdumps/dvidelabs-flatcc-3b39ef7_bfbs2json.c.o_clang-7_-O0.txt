
../compcert-repos/dvidelabs-flatcc-3b39ef7/samples/reflection/CMakeFiles/bfbs2json.dir/bfbs2json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_type>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #56	; 0x38
       c:	str	r0, [fp, #-4]
      10:	movw	r0, #1
      14:	str	r0, [fp, #-8]
      18:	movw	r0, #0
      1c:	movt	r0, #0
      20:	bl	0 <printf>
      24:	ldr	lr, [fp, #-4]
      28:	str	r0, [fp, #-12]
      2c:	mov	r0, lr
      30:	bl	15c <reflection_Type_base_type_is_present>
      34:	cmp	r0, #0
      38:	beq	8c <print_type+0x8c>
      3c:	ldr	r0, [fp, #-8]
      40:	cmp	r0, #0
      44:	bne	58 <print_type+0x58>
      48:	movw	r0, #0
      4c:	movt	r0, #0
      50:	bl	0 <printf>
      54:	str	r0, [fp, #-16]
      58:	ldr	r0, [fp, #-4]
      5c:	bl	3b0 <reflection_Type_base_type>
      60:	sxtb	r0, r0
      64:	bl	21c <reflection_BaseType_name>
      68:	movw	lr, #0
      6c:	movt	lr, #0
      70:	str	r0, [fp, #-20]	; 0xffffffec
      74:	mov	r0, lr
      78:	ldr	r1, [fp, #-20]	; 0xffffffec
      7c:	bl	0 <printf>
      80:	movw	r1, #0
      84:	str	r1, [fp, #-8]
      88:	str	r0, [fp, #-24]	; 0xffffffe8
      8c:	ldr	r0, [fp, #-4]
      90:	bl	498 <reflection_Type_element_is_present>
      94:	cmp	r0, #0
      98:	beq	ec <print_type+0xec>
      9c:	ldr	r0, [fp, #-8]
      a0:	cmp	r0, #0
      a4:	bne	b8 <print_type+0xb8>
      a8:	movw	r0, #0
      ac:	movt	r0, #0
      b0:	bl	0 <printf>
      b4:	str	r0, [sp, #28]
      b8:	ldr	r0, [fp, #-4]
      bc:	bl	3b0 <reflection_Type_base_type>
      c0:	sxtb	r0, r0
      c4:	bl	21c <reflection_BaseType_name>
      c8:	movw	lr, #0
      cc:	movt	lr, #0
      d0:	str	r0, [sp, #24]
      d4:	mov	r0, lr
      d8:	ldr	r1, [sp, #24]
      dc:	bl	0 <printf>
      e0:	movw	r1, #0
      e4:	str	r1, [fp, #-8]
      e8:	str	r0, [sp, #20]
      ec:	ldr	r0, [fp, #-4]
      f0:	bl	558 <reflection_Type_index_is_present>
      f4:	cmp	r0, #0
      f8:	beq	144 <print_type+0x144>
      fc:	ldr	r0, [fp, #-8]
     100:	cmp	r0, #0
     104:	bne	118 <print_type+0x118>
     108:	movw	r0, #0
     10c:	movt	r0, #0
     110:	bl	0 <printf>
     114:	str	r0, [sp, #16]
     118:	ldr	r0, [fp, #-4]
     11c:	bl	618 <reflection_Type_index>
     120:	movw	lr, #0
     124:	movt	lr, #0
     128:	str	r0, [sp, #12]
     12c:	mov	r0, lr
     130:	ldr	r1, [sp, #12]
     134:	bl	0 <printf>
     138:	movw	r1, #0
     13c:	str	r1, [fp, #-8]
     140:	str	r0, [sp, #8]
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <printf>
     150:	str	r0, [sp, #4]
     154:	mov	sp, fp
     158:	pop	{fp, pc}

0000015c <reflection_Type_base_type_is_present>:
     15c:	push	{fp, lr}
     160:	mov	fp, sp
     164:	sub	sp, sp, #16
     168:	str	r0, [fp, #-4]
     16c:	movw	r0, #0
     170:	strh	r0, [fp, #-6]
     174:	ldr	r0, [fp, #-4]
     178:	movw	r1, #0
     17c:	cmp	r0, r1
     180:	beq	18c <reflection_Type_base_type_is_present+0x30>
     184:	b	188 <reflection_Type_base_type_is_present+0x2c>
     188:	b	1ac <reflection_Type_base_type_is_present+0x50>
     18c:	movw	r0, #0
     190:	movt	r0, #0
     194:	movw	r1, #0
     198:	movt	r1, #0
     19c:	movw	r2, #147	; 0x93
     1a0:	movw	r3, #0
     1a4:	movt	r3, #0
     1a8:	bl	0 <__assert_fail>
     1ac:	mov	r0, #0
     1b0:	strh	r0, [sp, #8]
     1b4:	ldr	r0, [fp, #-4]
     1b8:	str	r0, [sp]
     1bc:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     1c0:	ldr	lr, [sp]
     1c4:	sub	r0, lr, r0
     1c8:	str	r0, [sp, #4]
     1cc:	ldr	r0, [sp, #4]
     1d0:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     1d4:	ldrh	lr, [sp, #8]
     1d8:	add	lr, lr, #3
     1dc:	lsl	lr, lr, #1
     1e0:	cmp	r0, lr
     1e4:	bcc	200 <reflection_Type_base_type_is_present+0xa4>
     1e8:	ldr	r0, [sp, #4]
     1ec:	ldrh	r1, [sp, #8]
     1f0:	add	r0, r0, r1, lsl #1
     1f4:	add	r0, r0, #4
     1f8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     1fc:	strh	r0, [fp, #-6]
     200:	ldrh	r0, [fp, #-6]
     204:	cmp	r0, #0
     208:	movw	r0, #0
     20c:	movne	r0, #1
     210:	and	r0, r0, #1
     214:	mov	sp, fp
     218:	pop	{fp, pc}

0000021c <reflection_BaseType_name>:
     21c:	sub	sp, sp, #12
     220:	strb	r0, [sp, #7]
     224:	ldrsb	r0, [sp, #7]
     228:	cmp	r0, #16
     22c:	str	r0, [sp]
     230:	bhi	398 <reflection_BaseType_name+0x17c>
     234:	add	r0, pc, #8
     238:	ldr	r1, [sp]
     23c:	ldr	r0, [r0, r1, lsl #2]
     240:	mov	pc, r0
     244:	.word	0x00000288
     248:	.word	0x00000298
     24c:	.word	0x000002a8
     250:	.word	0x000002b8
     254:	.word	0x000002c8
     258:	.word	0x000002d8
     25c:	.word	0x000002e8
     260:	.word	0x000002f8
     264:	.word	0x00000308
     268:	.word	0x00000318
     26c:	.word	0x00000328
     270:	.word	0x00000338
     274:	.word	0x00000348
     278:	.word	0x00000358
     27c:	.word	0x00000368
     280:	.word	0x00000378
     284:	.word	0x00000388
     288:	movw	r0, #0
     28c:	movt	r0, #0
     290:	str	r0, [sp, #8]
     294:	b	3a4 <reflection_BaseType_name+0x188>
     298:	movw	r0, #0
     29c:	movt	r0, #0
     2a0:	str	r0, [sp, #8]
     2a4:	b	3a4 <reflection_BaseType_name+0x188>
     2a8:	movw	r0, #0
     2ac:	movt	r0, #0
     2b0:	str	r0, [sp, #8]
     2b4:	b	3a4 <reflection_BaseType_name+0x188>
     2b8:	movw	r0, #0
     2bc:	movt	r0, #0
     2c0:	str	r0, [sp, #8]
     2c4:	b	3a4 <reflection_BaseType_name+0x188>
     2c8:	movw	r0, #0
     2cc:	movt	r0, #0
     2d0:	str	r0, [sp, #8]
     2d4:	b	3a4 <reflection_BaseType_name+0x188>
     2d8:	movw	r0, #0
     2dc:	movt	r0, #0
     2e0:	str	r0, [sp, #8]
     2e4:	b	3a4 <reflection_BaseType_name+0x188>
     2e8:	movw	r0, #0
     2ec:	movt	r0, #0
     2f0:	str	r0, [sp, #8]
     2f4:	b	3a4 <reflection_BaseType_name+0x188>
     2f8:	movw	r0, #0
     2fc:	movt	r0, #0
     300:	str	r0, [sp, #8]
     304:	b	3a4 <reflection_BaseType_name+0x188>
     308:	movw	r0, #0
     30c:	movt	r0, #0
     310:	str	r0, [sp, #8]
     314:	b	3a4 <reflection_BaseType_name+0x188>
     318:	movw	r0, #0
     31c:	movt	r0, #0
     320:	str	r0, [sp, #8]
     324:	b	3a4 <reflection_BaseType_name+0x188>
     328:	movw	r0, #0
     32c:	movt	r0, #0
     330:	str	r0, [sp, #8]
     334:	b	3a4 <reflection_BaseType_name+0x188>
     338:	movw	r0, #0
     33c:	movt	r0, #0
     340:	str	r0, [sp, #8]
     344:	b	3a4 <reflection_BaseType_name+0x188>
     348:	movw	r0, #0
     34c:	movt	r0, #0
     350:	str	r0, [sp, #8]
     354:	b	3a4 <reflection_BaseType_name+0x188>
     358:	movw	r0, #0
     35c:	movt	r0, #0
     360:	str	r0, [sp, #8]
     364:	b	3a4 <reflection_BaseType_name+0x188>
     368:	movw	r0, #0
     36c:	movt	r0, #0
     370:	str	r0, [sp, #8]
     374:	b	3a4 <reflection_BaseType_name+0x188>
     378:	movw	r0, #0
     37c:	movt	r0, #0
     380:	str	r0, [sp, #8]
     384:	b	3a4 <reflection_BaseType_name+0x188>
     388:	movw	r0, #0
     38c:	movt	r0, #0
     390:	str	r0, [sp, #8]
     394:	b	3a4 <reflection_BaseType_name+0x188>
     398:	movw	r0, #0
     39c:	movt	r0, #0
     3a0:	str	r0, [sp, #8]
     3a4:	ldr	r0, [sp, #8]
     3a8:	add	sp, sp, #12
     3ac:	bx	lr

000003b0 <reflection_Type_base_type>:
     3b0:	push	{fp, lr}
     3b4:	mov	fp, sp
     3b8:	sub	sp, sp, #24
     3bc:	str	r0, [fp, #-4]
     3c0:	movw	r0, #0
     3c4:	strh	r0, [fp, #-6]
     3c8:	ldr	r0, [fp, #-4]
     3cc:	movw	r1, #0
     3d0:	cmp	r0, r1
     3d4:	beq	3e0 <reflection_Type_base_type+0x30>
     3d8:	b	3dc <reflection_Type_base_type+0x2c>
     3dc:	b	400 <reflection_Type_base_type+0x50>
     3e0:	movw	r0, #0
     3e4:	movt	r0, #0
     3e8:	movw	r1, #0
     3ec:	movt	r1, #0
     3f0:	movw	r2, #147	; 0x93
     3f4:	movw	r3, #0
     3f8:	movt	r3, #0
     3fc:	bl	0 <__assert_fail>
     400:	mov	r0, #0
     404:	strh	r0, [fp, #-8]
     408:	ldr	r0, [fp, #-4]
     40c:	str	r0, [sp, #8]
     410:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     414:	ldr	lr, [sp, #8]
     418:	sub	r0, lr, r0
     41c:	str	r0, [sp, #12]
     420:	ldr	r0, [sp, #12]
     424:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     428:	ldrh	lr, [fp, #-8]
     42c:	add	lr, lr, #3
     430:	lsl	lr, lr, #1
     434:	cmp	r0, lr
     438:	bcc	454 <reflection_Type_base_type+0xa4>
     43c:	ldr	r0, [sp, #12]
     440:	ldrh	r1, [fp, #-8]
     444:	add	r0, r0, r1, lsl #1
     448:	add	r0, r0, #4
     44c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     450:	strh	r0, [fp, #-6]
     454:	ldrh	r0, [fp, #-6]
     458:	cmp	r0, #0
     45c:	beq	47c <reflection_Type_base_type+0xcc>
     460:	ldr	r0, [fp, #-4]
     464:	ldrh	r1, [fp, #-6]
     468:	add	r0, r0, r1
     46c:	bl	37d4 <reflection_BaseType_read_from_pe>
     470:	sxtb	r0, r0
     474:	str	r0, [sp, #4]
     478:	b	488 <reflection_Type_base_type+0xd8>
     47c:	movw	r0, #0
     480:	str	r0, [sp, #4]
     484:	b	488 <reflection_Type_base_type+0xd8>
     488:	ldr	r0, [sp, #4]
     48c:	sxtb	r0, r0
     490:	mov	sp, fp
     494:	pop	{fp, pc}

00000498 <reflection_Type_element_is_present>:
     498:	push	{fp, lr}
     49c:	mov	fp, sp
     4a0:	sub	sp, sp, #16
     4a4:	str	r0, [fp, #-4]
     4a8:	movw	r0, #0
     4ac:	strh	r0, [fp, #-6]
     4b0:	ldr	r0, [fp, #-4]
     4b4:	movw	r1, #0
     4b8:	cmp	r0, r1
     4bc:	beq	4c8 <reflection_Type_element_is_present+0x30>
     4c0:	b	4c4 <reflection_Type_element_is_present+0x2c>
     4c4:	b	4e8 <reflection_Type_element_is_present+0x50>
     4c8:	movw	r0, #0
     4cc:	movt	r0, #0
     4d0:	movw	r1, #0
     4d4:	movt	r1, #0
     4d8:	movw	r2, #148	; 0x94
     4dc:	movw	r3, #0
     4e0:	movt	r3, #0
     4e4:	bl	0 <__assert_fail>
     4e8:	mov	r0, #1
     4ec:	strh	r0, [sp, #8]
     4f0:	ldr	r0, [fp, #-4]
     4f4:	str	r0, [sp]
     4f8:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     4fc:	ldr	lr, [sp]
     500:	sub	r0, lr, r0
     504:	str	r0, [sp, #4]
     508:	ldr	r0, [sp, #4]
     50c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     510:	ldrh	lr, [sp, #8]
     514:	add	lr, lr, #3
     518:	lsl	lr, lr, #1
     51c:	cmp	r0, lr
     520:	bcc	53c <reflection_Type_element_is_present+0xa4>
     524:	ldr	r0, [sp, #4]
     528:	ldrh	r1, [sp, #8]
     52c:	add	r0, r0, r1, lsl #1
     530:	add	r0, r0, #4
     534:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     538:	strh	r0, [fp, #-6]
     53c:	ldrh	r0, [fp, #-6]
     540:	cmp	r0, #0
     544:	movw	r0, #0
     548:	movne	r0, #1
     54c:	and	r0, r0, #1
     550:	mov	sp, fp
     554:	pop	{fp, pc}

00000558 <reflection_Type_index_is_present>:
     558:	push	{fp, lr}
     55c:	mov	fp, sp
     560:	sub	sp, sp, #16
     564:	str	r0, [fp, #-4]
     568:	movw	r0, #0
     56c:	strh	r0, [fp, #-6]
     570:	ldr	r0, [fp, #-4]
     574:	movw	r1, #0
     578:	cmp	r0, r1
     57c:	beq	588 <reflection_Type_index_is_present+0x30>
     580:	b	584 <reflection_Type_index_is_present+0x2c>
     584:	b	5a8 <reflection_Type_index_is_present+0x50>
     588:	movw	r0, #0
     58c:	movt	r0, #0
     590:	movw	r1, #0
     594:	movt	r1, #0
     598:	movw	r2, #149	; 0x95
     59c:	movw	r3, #0
     5a0:	movt	r3, #0
     5a4:	bl	0 <__assert_fail>
     5a8:	mov	r0, #2
     5ac:	strh	r0, [sp, #8]
     5b0:	ldr	r0, [fp, #-4]
     5b4:	str	r0, [sp]
     5b8:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     5bc:	ldr	lr, [sp]
     5c0:	sub	r0, lr, r0
     5c4:	str	r0, [sp, #4]
     5c8:	ldr	r0, [sp, #4]
     5cc:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     5d0:	ldrh	lr, [sp, #8]
     5d4:	add	lr, lr, #3
     5d8:	lsl	lr, lr, #1
     5dc:	cmp	r0, lr
     5e0:	bcc	5fc <reflection_Type_index_is_present+0xa4>
     5e4:	ldr	r0, [sp, #4]
     5e8:	ldrh	r1, [sp, #8]
     5ec:	add	r0, r0, r1, lsl #1
     5f0:	add	r0, r0, #4
     5f4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     5f8:	strh	r0, [fp, #-6]
     5fc:	ldrh	r0, [fp, #-6]
     600:	cmp	r0, #0
     604:	movw	r0, #0
     608:	movne	r0, #1
     60c:	and	r0, r0, #1
     610:	mov	sp, fp
     614:	pop	{fp, pc}

00000618 <reflection_Type_index>:
     618:	push	{fp, lr}
     61c:	mov	fp, sp
     620:	sub	sp, sp, #24
     624:	str	r0, [fp, #-4]
     628:	movw	r0, #0
     62c:	strh	r0, [fp, #-6]
     630:	ldr	r0, [fp, #-4]
     634:	movw	r1, #0
     638:	cmp	r0, r1
     63c:	beq	648 <reflection_Type_index+0x30>
     640:	b	644 <reflection_Type_index+0x2c>
     644:	b	668 <reflection_Type_index+0x50>
     648:	movw	r0, #0
     64c:	movt	r0, #0
     650:	movw	r1, #0
     654:	movt	r1, #0
     658:	movw	r2, #149	; 0x95
     65c:	movw	r3, #0
     660:	movt	r3, #0
     664:	bl	0 <__assert_fail>
     668:	mov	r0, #2
     66c:	strh	r0, [fp, #-8]
     670:	ldr	r0, [fp, #-4]
     674:	str	r0, [sp, #8]
     678:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     67c:	ldr	lr, [sp, #8]
     680:	sub	r0, lr, r0
     684:	str	r0, [sp, #12]
     688:	ldr	r0, [sp, #12]
     68c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     690:	ldrh	lr, [fp, #-8]
     694:	add	lr, lr, #3
     698:	lsl	lr, lr, #1
     69c:	cmp	r0, lr
     6a0:	bcc	6bc <reflection_Type_index+0xa4>
     6a4:	ldr	r0, [sp, #12]
     6a8:	ldrh	r1, [fp, #-8]
     6ac:	add	r0, r0, r1, lsl #1
     6b0:	add	r0, r0, #4
     6b4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     6b8:	strh	r0, [fp, #-6]
     6bc:	ldrh	r0, [fp, #-6]
     6c0:	cmp	r0, #0
     6c4:	beq	6e0 <reflection_Type_index+0xc8>
     6c8:	ldr	r0, [fp, #-4]
     6cc:	ldrh	r1, [fp, #-6]
     6d0:	add	r0, r0, r1
     6d4:	bl	3810 <flatbuffers_int32_read_from_pe>
     6d8:	str	r0, [sp, #4]
     6dc:	b	6ec <reflection_Type_index+0xd4>
     6e0:	mvn	r0, #0
     6e4:	str	r0, [sp, #4]
     6e8:	b	6ec <reflection_Type_index+0xd4>
     6ec:	ldr	r0, [sp, #4]
     6f0:	mov	sp, fp
     6f4:	pop	{fp, pc}

000006f8 <print_object>:
     6f8:	push	{fp, lr}
     6fc:	mov	fp, sp
     700:	sub	sp, sp, #112	; 0x70
     704:	str	r0, [fp, #-4]
     708:	ldr	r0, [fp, #-4]
     70c:	bl	a2c <reflection_Object_fields>
     710:	str	r0, [fp, #-8]
     714:	ldr	r0, [fp, #-4]
     718:	bl	b34 <reflection_Object_name>
     71c:	movw	lr, #0
     720:	movt	lr, #0
     724:	str	r0, [fp, #-20]	; 0xffffffec
     728:	mov	r0, lr
     72c:	ldr	r1, [fp, #-20]	; 0xffffffec
     730:	bl	0 <printf>
     734:	movw	r1, #0
     738:	movt	r1, #0
     73c:	str	r0, [fp, #-24]	; 0xffffffe8
     740:	mov	r0, r1
     744:	bl	0 <printf>
     748:	movw	r1, #0
     74c:	str	r1, [fp, #-16]
     750:	str	r0, [fp, #-28]	; 0xffffffe4
     754:	ldr	r0, [fp, #-16]
     758:	ldr	r1, [fp, #-8]
     75c:	str	r0, [fp, #-32]	; 0xffffffe0
     760:	mov	r0, r1
     764:	bl	c3c <reflection_Field_vec_len>
     768:	ldr	r1, [fp, #-32]	; 0xffffffe0
     76c:	cmp	r1, r0
     770:	bcs	93c <print_object+0x244>
     774:	ldr	r0, [fp, #-16]
     778:	cmp	r0, #0
     77c:	bls	790 <print_object+0x98>
     780:	movw	r0, #0
     784:	movt	r0, #0
     788:	bl	0 <printf>
     78c:	str	r0, [fp, #-36]	; 0xffffffdc
     790:	ldr	r0, [fp, #-8]
     794:	ldr	r1, [fp, #-16]
     798:	bl	c8c <reflection_Field_vec_at>
     79c:	str	r0, [fp, #-12]
     7a0:	ldr	r0, [fp, #-12]
     7a4:	bl	d10 <reflection_Field_name>
     7a8:	movw	r1, #0
     7ac:	movt	r1, #0
     7b0:	str	r0, [fp, #-40]	; 0xffffffd8
     7b4:	mov	r0, r1
     7b8:	ldr	r1, [fp, #-40]	; 0xffffffd8
     7bc:	bl	0 <printf>
     7c0:	ldr	r1, [fp, #-12]
     7c4:	str	r0, [fp, #-44]	; 0xffffffd4
     7c8:	mov	r0, r1
     7cc:	bl	e18 <reflection_Field_type>
     7d0:	bl	0 <print_type>
     7d4:	ldr	r0, [fp, #-12]
     7d8:	bl	f1c <reflection_Field_id_is_present>
     7dc:	cmp	r0, #0
     7e0:	beq	800 <print_object+0x108>
     7e4:	ldr	r0, [fp, #-12]
     7e8:	bl	fdc <reflection_Field_id>
     7ec:	uxth	r1, r0
     7f0:	movw	r0, #0
     7f4:	movt	r0, #0
     7f8:	bl	0 <printf>
     7fc:	str	r0, [fp, #-48]	; 0xffffffd0
     800:	ldr	r0, [fp, #-12]
     804:	bl	10c4 <reflection_Field_default_integer_is_present>
     808:	cmp	r0, #0
     80c:	beq	838 <print_object+0x140>
     810:	ldr	r0, [fp, #-12]
     814:	bl	1184 <reflection_Field_default_integer>
     818:	movw	lr, #0
     81c:	movt	lr, #0
     820:	str	r0, [fp, #-52]	; 0xffffffcc
     824:	mov	r0, lr
     828:	ldr	r2, [fp, #-52]	; 0xffffffcc
     82c:	mov	r3, r1
     830:	bl	0 <printf>
     834:	str	r0, [sp, #56]	; 0x38
     838:	ldr	r0, [fp, #-12]
     83c:	bl	1280 <reflection_Field_default_real_is_present>
     840:	cmp	r0, #0
     844:	beq	864 <print_object+0x16c>
     848:	ldr	r0, [fp, #-12]
     84c:	bl	1340 <reflection_Field_default_real>
     850:	movw	r0, #0
     854:	movt	r0, #0
     858:	vmov	r2, r3, d0
     85c:	bl	0 <printf>
     860:	str	r0, [sp, #52]	; 0x34
     864:	ldr	r0, [fp, #-12]
     868:	bl	1430 <reflection_Field_required_is_present>
     86c:	cmp	r0, #0
     870:	beq	8c0 <print_object+0x1c8>
     874:	ldr	r0, [fp, #-12]
     878:	bl	14f0 <reflection_Field_required>
     87c:	and	r0, r0, #255	; 0xff
     880:	cmp	r0, #0
     884:	movw	r0, #0
     888:	movne	r0, #1
     88c:	tst	r0, #1
     890:	movw	r0, #0
     894:	movt	r0, #0
     898:	movw	lr, #0
     89c:	movt	lr, #0
     8a0:	movne	r0, lr
     8a4:	movw	lr, #0
     8a8:	movt	lr, #0
     8ac:	str	r0, [sp, #48]	; 0x30
     8b0:	mov	r0, lr
     8b4:	ldr	r1, [sp, #48]	; 0x30
     8b8:	bl	0 <printf>
     8bc:	str	r0, [sp, #44]	; 0x2c
     8c0:	ldr	r0, [fp, #-12]
     8c4:	bl	15d8 <reflection_Field_key_is_present>
     8c8:	cmp	r0, #0
     8cc:	beq	91c <print_object+0x224>
     8d0:	ldr	r0, [fp, #-12]
     8d4:	bl	1698 <reflection_Field_key>
     8d8:	and	r0, r0, #255	; 0xff
     8dc:	cmp	r0, #0
     8e0:	movw	r0, #0
     8e4:	movne	r0, #1
     8e8:	tst	r0, #1
     8ec:	movw	r0, #0
     8f0:	movt	r0, #0
     8f4:	movw	lr, #0
     8f8:	movt	lr, #0
     8fc:	movne	r0, lr
     900:	movw	lr, #0
     904:	movt	lr, #0
     908:	str	r0, [sp, #40]	; 0x28
     90c:	mov	r0, lr
     910:	ldr	r1, [sp, #40]	; 0x28
     914:	bl	0 <printf>
     918:	str	r0, [sp, #36]	; 0x24
     91c:	movw	r0, #0
     920:	movt	r0, #0
     924:	bl	0 <printf>
     928:	str	r0, [sp, #32]
     92c:	ldr	r0, [fp, #-16]
     930:	add	r0, r0, #1
     934:	str	r0, [fp, #-16]
     938:	b	754 <print_object+0x5c>
     93c:	movw	r0, #0
     940:	movt	r0, #0
     944:	bl	0 <printf>
     948:	ldr	lr, [fp, #-4]
     94c:	str	r0, [sp, #28]
     950:	mov	r0, lr
     954:	bl	1780 <reflection_Object_is_struct_is_present>
     958:	cmp	r0, #0
     95c:	beq	9ac <print_object+0x2b4>
     960:	ldr	r0, [fp, #-4]
     964:	bl	1840 <reflection_Object_is_struct>
     968:	and	r0, r0, #255	; 0xff
     96c:	cmp	r0, #0
     970:	movw	r0, #0
     974:	movne	r0, #1
     978:	tst	r0, #1
     97c:	movw	r0, #0
     980:	movt	r0, #0
     984:	movw	lr, #0
     988:	movt	lr, #0
     98c:	movne	r0, lr
     990:	movw	lr, #0
     994:	movt	lr, #0
     998:	str	r0, [sp, #24]
     99c:	mov	r0, lr
     9a0:	ldr	r1, [sp, #24]
     9a4:	bl	0 <printf>
     9a8:	str	r0, [sp, #20]
     9ac:	ldr	r0, [fp, #-4]
     9b0:	bl	1928 <reflection_Object_minalign_is_present>
     9b4:	cmp	r0, #0
     9b8:	beq	9e0 <print_object+0x2e8>
     9bc:	ldr	r0, [fp, #-4]
     9c0:	bl	19e8 <reflection_Object_minalign>
     9c4:	movw	lr, #0
     9c8:	movt	lr, #0
     9cc:	str	r0, [sp, #16]
     9d0:	mov	r0, lr
     9d4:	ldr	r1, [sp, #16]
     9d8:	bl	0 <printf>
     9dc:	str	r0, [sp, #12]
     9e0:	ldr	r0, [fp, #-4]
     9e4:	bl	1ac8 <reflection_Object_bytesize_is_present>
     9e8:	cmp	r0, #0
     9ec:	beq	a14 <print_object+0x31c>
     9f0:	ldr	r0, [fp, #-4]
     9f4:	bl	1b88 <reflection_Object_bytesize>
     9f8:	movw	lr, #0
     9fc:	movt	lr, #0
     a00:	str	r0, [sp, #8]
     a04:	mov	r0, lr
     a08:	ldr	r1, [sp, #8]
     a0c:	bl	0 <printf>
     a10:	str	r0, [sp, #4]
     a14:	movw	r0, #0
     a18:	movt	r0, #0
     a1c:	bl	0 <printf>
     a20:	str	r0, [sp]
     a24:	mov	sp, fp
     a28:	pop	{fp, pc}

00000a2c <reflection_Object_fields>:
     a2c:	push	{fp, lr}
     a30:	mov	fp, sp
     a34:	sub	sp, sp, #24
     a38:	str	r0, [fp, #-4]
     a3c:	movw	r0, #0
     a40:	strh	r0, [fp, #-10]
     a44:	ldr	r0, [fp, #-4]
     a48:	movw	r1, #0
     a4c:	cmp	r0, r1
     a50:	beq	a5c <reflection_Object_fields+0x30>
     a54:	b	a58 <reflection_Object_fields+0x2c>
     a58:	b	a7c <reflection_Object_fields+0x50>
     a5c:	movw	r0, #0
     a60:	movt	r0, #0
     a64:	movw	r1, #0
     a68:	movt	r1, #0
     a6c:	movw	r2, #224	; 0xe0
     a70:	movw	r3, #0
     a74:	movt	r3, #0
     a78:	bl	0 <__assert_fail>
     a7c:	mov	r0, #1
     a80:	strh	r0, [sp, #12]
     a84:	ldr	r0, [fp, #-4]
     a88:	str	r0, [sp, #4]
     a8c:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     a90:	ldr	lr, [sp, #4]
     a94:	sub	r0, lr, r0
     a98:	str	r0, [sp, #8]
     a9c:	ldr	r0, [sp, #8]
     aa0:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     aa4:	ldrh	lr, [sp, #12]
     aa8:	add	lr, lr, #3
     aac:	lsl	lr, lr, #1
     ab0:	cmp	r0, lr
     ab4:	bcc	ad0 <reflection_Object_fields+0xa4>
     ab8:	ldr	r0, [sp, #8]
     abc:	ldrh	r1, [sp, #12]
     ac0:	add	r0, r0, r1, lsl #1
     ac4:	add	r0, r0, #4
     ac8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     acc:	strh	r0, [fp, #-10]
     ad0:	ldrsh	r0, [fp, #-10]
     ad4:	cmp	r0, #0
     ad8:	beq	b14 <reflection_Object_fields+0xe8>
     adc:	ldr	r0, [fp, #-4]
     ae0:	ldrh	r1, [fp, #-10]
     ae4:	add	r0, r0, r1
     ae8:	str	r0, [fp, #-8]
     aec:	ldr	r0, [fp, #-8]
     af0:	add	r0, r0, #4
     af4:	ldr	r1, [fp, #-8]
     af8:	str	r0, [sp]
     afc:	mov	r0, r1
     b00:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
     b04:	ldr	r1, [sp]
     b08:	add	r0, r1, r0
     b0c:	mov	sp, fp
     b10:	pop	{fp, pc}
     b14:	movw	r0, #0
     b18:	movt	r0, #0
     b1c:	movw	r1, #0
     b20:	movt	r1, #0
     b24:	movw	r2, #224	; 0xe0
     b28:	movw	r3, #0
     b2c:	movt	r3, #0
     b30:	bl	0 <__assert_fail>

00000b34 <reflection_Object_name>:
     b34:	push	{fp, lr}
     b38:	mov	fp, sp
     b3c:	sub	sp, sp, #24
     b40:	str	r0, [fp, #-4]
     b44:	movw	r0, #0
     b48:	strh	r0, [fp, #-10]
     b4c:	ldr	r0, [fp, #-4]
     b50:	movw	r1, #0
     b54:	cmp	r0, r1
     b58:	beq	b64 <reflection_Object_name+0x30>
     b5c:	b	b60 <reflection_Object_name+0x2c>
     b60:	b	b84 <reflection_Object_name+0x50>
     b64:	movw	r0, #0
     b68:	movt	r0, #0
     b6c:	movw	r1, #0
     b70:	movt	r1, #0
     b74:	movw	r2, #218	; 0xda
     b78:	movw	r3, #0
     b7c:	movt	r3, #0
     b80:	bl	0 <__assert_fail>
     b84:	mov	r0, #0
     b88:	strh	r0, [sp, #12]
     b8c:	ldr	r0, [fp, #-4]
     b90:	str	r0, [sp, #4]
     b94:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     b98:	ldr	lr, [sp, #4]
     b9c:	sub	r0, lr, r0
     ba0:	str	r0, [sp, #8]
     ba4:	ldr	r0, [sp, #8]
     ba8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     bac:	ldrh	lr, [sp, #12]
     bb0:	add	lr, lr, #3
     bb4:	lsl	lr, lr, #1
     bb8:	cmp	r0, lr
     bbc:	bcc	bd8 <reflection_Object_name+0xa4>
     bc0:	ldr	r0, [sp, #8]
     bc4:	ldrh	r1, [sp, #12]
     bc8:	add	r0, r0, r1, lsl #1
     bcc:	add	r0, r0, #4
     bd0:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     bd4:	strh	r0, [fp, #-10]
     bd8:	ldrsh	r0, [fp, #-10]
     bdc:	cmp	r0, #0
     be0:	beq	c1c <reflection_Object_name+0xe8>
     be4:	ldr	r0, [fp, #-4]
     be8:	ldrh	r1, [fp, #-10]
     bec:	add	r0, r0, r1
     bf0:	str	r0, [fp, #-8]
     bf4:	ldr	r0, [fp, #-8]
     bf8:	add	r0, r0, #4
     bfc:	ldr	r1, [fp, #-8]
     c00:	str	r0, [sp]
     c04:	mov	r0, r1
     c08:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
     c0c:	ldr	r1, [sp]
     c10:	add	r0, r1, r0
     c14:	mov	sp, fp
     c18:	pop	{fp, pc}
     c1c:	movw	r0, #0
     c20:	movt	r0, #0
     c24:	movw	r1, #0
     c28:	movt	r1, #0
     c2c:	movw	r2, #218	; 0xda
     c30:	movw	r3, #0
     c34:	movt	r3, #0
     c38:	bl	0 <__assert_fail>

00000c3c <reflection_Field_vec_len>:
     c3c:	push	{fp, lr}
     c40:	mov	fp, sp
     c44:	sub	sp, sp, #8
     c48:	str	r0, [sp, #4]
     c4c:	ldr	r0, [sp, #4]
     c50:	movw	r1, #0
     c54:	cmp	r0, r1
     c58:	beq	c74 <reflection_Field_vec_len+0x38>
     c5c:	ldr	r0, [sp, #4]
     c60:	mvn	r1, #3
     c64:	add	r0, r0, r1
     c68:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
     c6c:	str	r0, [sp]
     c70:	b	c80 <reflection_Field_vec_len+0x44>
     c74:	movw	r0, #0
     c78:	str	r0, [sp]
     c7c:	b	c80 <reflection_Field_vec_len+0x44>
     c80:	ldr	r0, [sp]
     c84:	mov	sp, fp
     c88:	pop	{fp, pc}

00000c8c <reflection_Field_vec_at>:
     c8c:	push	{fp, lr}
     c90:	mov	fp, sp
     c94:	sub	sp, sp, #16
     c98:	str	r0, [fp, #-4]
     c9c:	str	r1, [sp, #8]
     ca0:	ldr	r0, [fp, #-4]
     ca4:	ldr	r1, [sp, #8]
     ca8:	add	r0, r0, r1, lsl #2
     cac:	str	r0, [sp, #4]
     cb0:	ldr	r0, [fp, #-4]
     cb4:	bl	3880 <flatbuffers_vec_len>
     cb8:	ldr	r1, [sp, #8]
     cbc:	cmp	r0, r1
     cc0:	bls	ccc <reflection_Field_vec_at+0x40>
     cc4:	b	cc8 <reflection_Field_vec_at+0x3c>
     cc8:	b	cec <reflection_Field_vec_at+0x60>
     ccc:	movw	r0, #0
     cd0:	movt	r0, #0
     cd4:	movw	r1, #0
     cd8:	movt	r1, #0
     cdc:	movw	r2, #192	; 0xc0
     ce0:	movw	r3, #0
     ce4:	movt	r3, #0
     ce8:	bl	0 <__assert_fail>
     cec:	ldr	r0, [sp, #4]
     cf0:	ldr	r1, [sp, #4]
     cf4:	str	r0, [sp]
     cf8:	mov	r0, r1
     cfc:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
     d00:	ldr	r1, [sp]
     d04:	add	r0, r1, r0
     d08:	mov	sp, fp
     d0c:	pop	{fp, pc}

00000d10 <reflection_Field_name>:
     d10:	push	{fp, lr}
     d14:	mov	fp, sp
     d18:	sub	sp, sp, #24
     d1c:	str	r0, [fp, #-4]
     d20:	movw	r0, #0
     d24:	strh	r0, [fp, #-10]
     d28:	ldr	r0, [fp, #-4]
     d2c:	movw	r1, #0
     d30:	cmp	r0, r1
     d34:	beq	d40 <reflection_Field_name+0x30>
     d38:	b	d3c <reflection_Field_name+0x2c>
     d3c:	b	d60 <reflection_Field_name+0x50>
     d40:	movw	r0, #0
     d44:	movt	r0, #0
     d48:	movw	r1, #0
     d4c:	movt	r1, #0
     d50:	movw	r2, #195	; 0xc3
     d54:	movw	r3, #0
     d58:	movt	r3, #0
     d5c:	bl	0 <__assert_fail>
     d60:	mov	r0, #0
     d64:	strh	r0, [sp, #12]
     d68:	ldr	r0, [fp, #-4]
     d6c:	str	r0, [sp, #4]
     d70:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     d74:	ldr	lr, [sp, #4]
     d78:	sub	r0, lr, r0
     d7c:	str	r0, [sp, #8]
     d80:	ldr	r0, [sp, #8]
     d84:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     d88:	ldrh	lr, [sp, #12]
     d8c:	add	lr, lr, #3
     d90:	lsl	lr, lr, #1
     d94:	cmp	r0, lr
     d98:	bcc	db4 <reflection_Field_name+0xa4>
     d9c:	ldr	r0, [sp, #8]
     da0:	ldrh	r1, [sp, #12]
     da4:	add	r0, r0, r1, lsl #1
     da8:	add	r0, r0, #4
     dac:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     db0:	strh	r0, [fp, #-10]
     db4:	ldrsh	r0, [fp, #-10]
     db8:	cmp	r0, #0
     dbc:	beq	df8 <reflection_Field_name+0xe8>
     dc0:	ldr	r0, [fp, #-4]
     dc4:	ldrh	r1, [fp, #-10]
     dc8:	add	r0, r0, r1
     dcc:	str	r0, [fp, #-8]
     dd0:	ldr	r0, [fp, #-8]
     dd4:	add	r0, r0, #4
     dd8:	ldr	r1, [fp, #-8]
     ddc:	str	r0, [sp]
     de0:	mov	r0, r1
     de4:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
     de8:	ldr	r1, [sp]
     dec:	add	r0, r1, r0
     df0:	mov	sp, fp
     df4:	pop	{fp, pc}
     df8:	movw	r0, #0
     dfc:	movt	r0, #0
     e00:	movw	r1, #0
     e04:	movt	r1, #0
     e08:	movw	r2, #195	; 0xc3
     e0c:	movw	r3, #0
     e10:	movt	r3, #0
     e14:	bl	0 <__assert_fail>

00000e18 <reflection_Field_type>:
     e18:	push	{fp, lr}
     e1c:	mov	fp, sp
     e20:	sub	sp, sp, #24
     e24:	str	r0, [fp, #-4]
     e28:	movw	r0, #0
     e2c:	strh	r0, [fp, #-10]
     e30:	ldr	r0, [fp, #-4]
     e34:	movw	r1, #0
     e38:	cmp	r0, r1
     e3c:	beq	e48 <reflection_Field_type+0x30>
     e40:	b	e44 <reflection_Field_type+0x2c>
     e44:	b	e68 <reflection_Field_type+0x50>
     e48:	movw	r0, #0
     e4c:	movt	r0, #0
     e50:	movw	r1, #0
     e54:	movt	r1, #0
     e58:	movw	r2, #201	; 0xc9
     e5c:	movw	r3, #0
     e60:	movt	r3, #0
     e64:	bl	0 <__assert_fail>
     e68:	mov	r0, #1
     e6c:	strh	r0, [sp, #12]
     e70:	ldr	r0, [fp, #-4]
     e74:	str	r0, [sp, #4]
     e78:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     e7c:	ldr	lr, [sp, #4]
     e80:	sub	r0, lr, r0
     e84:	str	r0, [sp, #8]
     e88:	ldr	r0, [sp, #8]
     e8c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     e90:	ldrh	lr, [sp, #12]
     e94:	add	lr, lr, #3
     e98:	lsl	lr, lr, #1
     e9c:	cmp	r0, lr
     ea0:	bcc	ebc <reflection_Field_type+0xa4>
     ea4:	ldr	r0, [sp, #8]
     ea8:	ldrh	r1, [sp, #12]
     eac:	add	r0, r0, r1, lsl #1
     eb0:	add	r0, r0, #4
     eb4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     eb8:	strh	r0, [fp, #-10]
     ebc:	ldrsh	r0, [fp, #-10]
     ec0:	cmp	r0, #0
     ec4:	beq	efc <reflection_Field_type+0xe4>
     ec8:	ldr	r0, [fp, #-4]
     ecc:	ldrh	r1, [fp, #-10]
     ed0:	add	r0, r0, r1
     ed4:	str	r0, [fp, #-8]
     ed8:	ldr	r0, [fp, #-8]
     edc:	ldr	r1, [fp, #-8]
     ee0:	str	r0, [sp]
     ee4:	mov	r0, r1
     ee8:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
     eec:	ldr	r1, [sp]
     ef0:	add	r0, r1, r0
     ef4:	mov	sp, fp
     ef8:	pop	{fp, pc}
     efc:	movw	r0, #0
     f00:	movt	r0, #0
     f04:	movw	r1, #0
     f08:	movt	r1, #0
     f0c:	movw	r2, #201	; 0xc9
     f10:	movw	r3, #0
     f14:	movt	r3, #0
     f18:	bl	0 <__assert_fail>

00000f1c <reflection_Field_id_is_present>:
     f1c:	push	{fp, lr}
     f20:	mov	fp, sp
     f24:	sub	sp, sp, #16
     f28:	str	r0, [fp, #-4]
     f2c:	movw	r0, #0
     f30:	strh	r0, [fp, #-6]
     f34:	ldr	r0, [fp, #-4]
     f38:	movw	r1, #0
     f3c:	cmp	r0, r1
     f40:	beq	f4c <reflection_Field_id_is_present+0x30>
     f44:	b	f48 <reflection_Field_id_is_present+0x2c>
     f48:	b	f6c <reflection_Field_id_is_present+0x50>
     f4c:	movw	r0, #0
     f50:	movt	r0, #0
     f54:	movw	r1, #0
     f58:	movt	r1, #0
     f5c:	movw	r2, #202	; 0xca
     f60:	movw	r3, #0
     f64:	movt	r3, #0
     f68:	bl	0 <__assert_fail>
     f6c:	mov	r0, #2
     f70:	strh	r0, [sp, #8]
     f74:	ldr	r0, [fp, #-4]
     f78:	str	r0, [sp]
     f7c:	bl	3760 <__flatbuffers_soffset_read_from_pe>
     f80:	ldr	lr, [sp]
     f84:	sub	r0, lr, r0
     f88:	str	r0, [sp, #4]
     f8c:	ldr	r0, [sp, #4]
     f90:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     f94:	ldrh	lr, [sp, #8]
     f98:	add	lr, lr, #3
     f9c:	lsl	lr, lr, #1
     fa0:	cmp	r0, lr
     fa4:	bcc	fc0 <reflection_Field_id_is_present+0xa4>
     fa8:	ldr	r0, [sp, #4]
     fac:	ldrh	r1, [sp, #8]
     fb0:	add	r0, r0, r1, lsl #1
     fb4:	add	r0, r0, #4
     fb8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
     fbc:	strh	r0, [fp, #-6]
     fc0:	ldrh	r0, [fp, #-6]
     fc4:	cmp	r0, #0
     fc8:	movw	r0, #0
     fcc:	movne	r0, #1
     fd0:	and	r0, r0, #1
     fd4:	mov	sp, fp
     fd8:	pop	{fp, pc}

00000fdc <reflection_Field_id>:
     fdc:	push	{fp, lr}
     fe0:	mov	fp, sp
     fe4:	sub	sp, sp, #24
     fe8:	str	r0, [fp, #-4]
     fec:	movw	r0, #0
     ff0:	strh	r0, [fp, #-6]
     ff4:	ldr	r0, [fp, #-4]
     ff8:	movw	r1, #0
     ffc:	cmp	r0, r1
    1000:	beq	100c <reflection_Field_id+0x30>
    1004:	b	1008 <reflection_Field_id+0x2c>
    1008:	b	102c <reflection_Field_id+0x50>
    100c:	movw	r0, #0
    1010:	movt	r0, #0
    1014:	movw	r1, #0
    1018:	movt	r1, #0
    101c:	movw	r2, #202	; 0xca
    1020:	movw	r3, #0
    1024:	movt	r3, #0
    1028:	bl	0 <__assert_fail>
    102c:	mov	r0, #2
    1030:	strh	r0, [fp, #-8]
    1034:	ldr	r0, [fp, #-4]
    1038:	str	r0, [sp, #8]
    103c:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1040:	ldr	lr, [sp, #8]
    1044:	sub	r0, lr, r0
    1048:	str	r0, [sp, #12]
    104c:	ldr	r0, [sp, #12]
    1050:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1054:	ldrh	lr, [fp, #-8]
    1058:	add	lr, lr, #3
    105c:	lsl	lr, lr, #1
    1060:	cmp	r0, lr
    1064:	bcc	1080 <reflection_Field_id+0xa4>
    1068:	ldr	r0, [sp, #12]
    106c:	ldrh	r1, [fp, #-8]
    1070:	add	r0, r0, r1, lsl #1
    1074:	add	r0, r0, #4
    1078:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    107c:	strh	r0, [fp, #-6]
    1080:	ldrh	r0, [fp, #-6]
    1084:	cmp	r0, #0
    1088:	beq	10a8 <reflection_Field_id+0xcc>
    108c:	ldr	r0, [fp, #-4]
    1090:	ldrh	r1, [fp, #-6]
    1094:	add	r0, r0, r1
    1098:	bl	38d0 <flatbuffers_uint16_read_from_pe>
    109c:	uxth	r0, r0
    10a0:	str	r0, [sp, #4]
    10a4:	b	10b4 <reflection_Field_id+0xd8>
    10a8:	movw	r0, #0
    10ac:	str	r0, [sp, #4]
    10b0:	b	10b4 <reflection_Field_id+0xd8>
    10b4:	ldr	r0, [sp, #4]
    10b8:	uxth	r0, r0
    10bc:	mov	sp, fp
    10c0:	pop	{fp, pc}

000010c4 <reflection_Field_default_integer_is_present>:
    10c4:	push	{fp, lr}
    10c8:	mov	fp, sp
    10cc:	sub	sp, sp, #16
    10d0:	str	r0, [fp, #-4]
    10d4:	movw	r0, #0
    10d8:	strh	r0, [fp, #-6]
    10dc:	ldr	r0, [fp, #-4]
    10e0:	movw	r1, #0
    10e4:	cmp	r0, r1
    10e8:	beq	10f4 <reflection_Field_default_integer_is_present+0x30>
    10ec:	b	10f0 <reflection_Field_default_integer_is_present+0x2c>
    10f0:	b	1114 <reflection_Field_default_integer_is_present+0x50>
    10f4:	movw	r0, #0
    10f8:	movt	r0, #0
    10fc:	movw	r1, #0
    1100:	movt	r1, #0
    1104:	movw	r2, #204	; 0xcc
    1108:	movw	r3, #0
    110c:	movt	r3, #0
    1110:	bl	0 <__assert_fail>
    1114:	mov	r0, #4
    1118:	strh	r0, [sp, #8]
    111c:	ldr	r0, [fp, #-4]
    1120:	str	r0, [sp]
    1124:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1128:	ldr	lr, [sp]
    112c:	sub	r0, lr, r0
    1130:	str	r0, [sp, #4]
    1134:	ldr	r0, [sp, #4]
    1138:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    113c:	ldrh	lr, [sp, #8]
    1140:	add	lr, lr, #3
    1144:	lsl	lr, lr, #1
    1148:	cmp	r0, lr
    114c:	bcc	1168 <reflection_Field_default_integer_is_present+0xa4>
    1150:	ldr	r0, [sp, #4]
    1154:	ldrh	r1, [sp, #8]
    1158:	add	r0, r0, r1, lsl #1
    115c:	add	r0, r0, #4
    1160:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1164:	strh	r0, [fp, #-6]
    1168:	ldrh	r0, [fp, #-6]
    116c:	cmp	r0, #0
    1170:	movw	r0, #0
    1174:	movne	r0, #1
    1178:	and	r0, r0, #1
    117c:	mov	sp, fp
    1180:	pop	{fp, pc}

00001184 <reflection_Field_default_integer>:
    1184:	push	{fp, lr}
    1188:	mov	fp, sp
    118c:	sub	sp, sp, #32
    1190:	str	r0, [fp, #-4]
    1194:	movw	r0, #0
    1198:	strh	r0, [fp, #-6]
    119c:	ldr	r0, [fp, #-4]
    11a0:	movw	r1, #0
    11a4:	cmp	r0, r1
    11a8:	beq	11b4 <reflection_Field_default_integer+0x30>
    11ac:	b	11b0 <reflection_Field_default_integer+0x2c>
    11b0:	b	11d4 <reflection_Field_default_integer+0x50>
    11b4:	movw	r0, #0
    11b8:	movt	r0, #0
    11bc:	movw	r1, #0
    11c0:	movt	r1, #0
    11c4:	movw	r2, #204	; 0xcc
    11c8:	movw	r3, #0
    11cc:	movt	r3, #0
    11d0:	bl	0 <__assert_fail>
    11d4:	mov	r0, #4
    11d8:	strh	r0, [fp, #-8]
    11dc:	ldr	r0, [fp, #-4]
    11e0:	str	r0, [sp, #16]
    11e4:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    11e8:	ldr	lr, [sp, #16]
    11ec:	sub	r0, lr, r0
    11f0:	str	r0, [fp, #-12]
    11f4:	ldr	r0, [fp, #-12]
    11f8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    11fc:	ldrh	lr, [fp, #-8]
    1200:	add	lr, lr, #3
    1204:	lsl	lr, lr, #1
    1208:	cmp	r0, lr
    120c:	bcc	1228 <reflection_Field_default_integer+0xa4>
    1210:	ldr	r0, [fp, #-12]
    1214:	ldrh	r1, [fp, #-8]
    1218:	add	r0, r0, r1, lsl #1
    121c:	add	r0, r0, #4
    1220:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1224:	strh	r0, [fp, #-6]
    1228:	ldrh	r0, [fp, #-6]
    122c:	cmp	r0, #0
    1230:	beq	1250 <reflection_Field_default_integer+0xcc>
    1234:	ldr	r0, [fp, #-4]
    1238:	ldrh	r1, [fp, #-6]
    123c:	add	r0, r0, r1
    1240:	bl	390c <flatbuffers_int64_read_from_pe>
    1244:	str	r0, [sp, #12]
    1248:	str	r1, [sp, #8]
    124c:	b	1264 <reflection_Field_default_integer+0xe0>
    1250:	mov	r0, #0
    1254:	mov	r1, r0
    1258:	str	r1, [sp, #12]
    125c:	str	r0, [sp, #8]
    1260:	b	1264 <reflection_Field_default_integer+0xe0>
    1264:	ldr	r0, [sp, #8]
    1268:	ldr	r1, [sp, #12]
    126c:	str	r0, [sp, #4]
    1270:	mov	r0, r1
    1274:	ldr	r1, [sp, #4]
    1278:	mov	sp, fp
    127c:	pop	{fp, pc}

00001280 <reflection_Field_default_real_is_present>:
    1280:	push	{fp, lr}
    1284:	mov	fp, sp
    1288:	sub	sp, sp, #16
    128c:	str	r0, [fp, #-4]
    1290:	movw	r0, #0
    1294:	strh	r0, [fp, #-6]
    1298:	ldr	r0, [fp, #-4]
    129c:	movw	r1, #0
    12a0:	cmp	r0, r1
    12a4:	beq	12b0 <reflection_Field_default_real_is_present+0x30>
    12a8:	b	12ac <reflection_Field_default_real_is_present+0x2c>
    12ac:	b	12d0 <reflection_Field_default_real_is_present+0x50>
    12b0:	movw	r0, #0
    12b4:	movt	r0, #0
    12b8:	movw	r1, #0
    12bc:	movt	r1, #0
    12c0:	movw	r2, #205	; 0xcd
    12c4:	movw	r3, #0
    12c8:	movt	r3, #0
    12cc:	bl	0 <__assert_fail>
    12d0:	mov	r0, #5
    12d4:	strh	r0, [sp, #8]
    12d8:	ldr	r0, [fp, #-4]
    12dc:	str	r0, [sp]
    12e0:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    12e4:	ldr	lr, [sp]
    12e8:	sub	r0, lr, r0
    12ec:	str	r0, [sp, #4]
    12f0:	ldr	r0, [sp, #4]
    12f4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    12f8:	ldrh	lr, [sp, #8]
    12fc:	add	lr, lr, #3
    1300:	lsl	lr, lr, #1
    1304:	cmp	r0, lr
    1308:	bcc	1324 <reflection_Field_default_real_is_present+0xa4>
    130c:	ldr	r0, [sp, #4]
    1310:	ldrh	r1, [sp, #8]
    1314:	add	r0, r0, r1, lsl #1
    1318:	add	r0, r0, #4
    131c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1320:	strh	r0, [fp, #-6]
    1324:	ldrh	r0, [fp, #-6]
    1328:	cmp	r0, #0
    132c:	movw	r0, #0
    1330:	movne	r0, #1
    1334:	and	r0, r0, #1
    1338:	mov	sp, fp
    133c:	pop	{fp, pc}

00001340 <reflection_Field_default_real>:
    1340:	push	{fp, lr}
    1344:	mov	fp, sp
    1348:	sub	sp, sp, #24
    134c:	str	r0, [fp, #-4]
    1350:	movw	r0, #0
    1354:	strh	r0, [fp, #-6]
    1358:	ldr	r0, [fp, #-4]
    135c:	movw	r1, #0
    1360:	cmp	r0, r1
    1364:	beq	1370 <reflection_Field_default_real+0x30>
    1368:	b	136c <reflection_Field_default_real+0x2c>
    136c:	b	1390 <reflection_Field_default_real+0x50>
    1370:	movw	r0, #0
    1374:	movt	r0, #0
    1378:	movw	r1, #0
    137c:	movt	r1, #0
    1380:	movw	r2, #205	; 0xcd
    1384:	movw	r3, #0
    1388:	movt	r3, #0
    138c:	bl	0 <__assert_fail>
    1390:	mov	r0, #5
    1394:	strh	r0, [fp, #-8]
    1398:	ldr	r0, [fp, #-4]
    139c:	str	r0, [sp, #8]
    13a0:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    13a4:	ldr	lr, [sp, #8]
    13a8:	sub	r0, lr, r0
    13ac:	str	r0, [sp, #12]
    13b0:	ldr	r0, [sp, #12]
    13b4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    13b8:	ldrh	lr, [fp, #-8]
    13bc:	add	lr, lr, #3
    13c0:	lsl	lr, lr, #1
    13c4:	cmp	r0, lr
    13c8:	bcc	13e4 <reflection_Field_default_real+0xa4>
    13cc:	ldr	r0, [sp, #12]
    13d0:	ldrh	r1, [fp, #-8]
    13d4:	add	r0, r0, r1, lsl #1
    13d8:	add	r0, r0, #4
    13dc:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    13e0:	strh	r0, [fp, #-6]
    13e4:	ldrh	r0, [fp, #-6]
    13e8:	cmp	r0, #0
    13ec:	beq	1408 <reflection_Field_default_real+0xc8>
    13f0:	ldr	r0, [fp, #-4]
    13f4:	ldrh	r1, [fp, #-6]
    13f8:	add	r0, r0, r1
    13fc:	bl	395c <flatbuffers_double_read_from_pe>
    1400:	vstr	d0, [sp]
    1404:	b	1414 <reflection_Field_default_real+0xd4>
    1408:	vldr	d16, [pc, #24]	; 1428 <reflection_Field_default_real+0xe8>
    140c:	vstr	d16, [sp]
    1410:	b	1414 <reflection_Field_default_real+0xd4>
    1414:	vldr	d16, [sp]
    1418:	vmov.f64	d0, d16
    141c:	mov	sp, fp
    1420:	pop	{fp, pc}
    1424:	nop	{0}
	...

00001430 <reflection_Field_required_is_present>:
    1430:	push	{fp, lr}
    1434:	mov	fp, sp
    1438:	sub	sp, sp, #16
    143c:	str	r0, [fp, #-4]
    1440:	movw	r0, #0
    1444:	strh	r0, [fp, #-6]
    1448:	ldr	r0, [fp, #-4]
    144c:	movw	r1, #0
    1450:	cmp	r0, r1
    1454:	beq	1460 <reflection_Field_required_is_present+0x30>
    1458:	b	145c <reflection_Field_required_is_present+0x2c>
    145c:	b	1480 <reflection_Field_required_is_present+0x50>
    1460:	movw	r0, #0
    1464:	movt	r0, #0
    1468:	movw	r1, #0
    146c:	movt	r1, #0
    1470:	movw	r2, #207	; 0xcf
    1474:	movw	r3, #0
    1478:	movt	r3, #0
    147c:	bl	0 <__assert_fail>
    1480:	mov	r0, #7
    1484:	strh	r0, [sp, #8]
    1488:	ldr	r0, [fp, #-4]
    148c:	str	r0, [sp]
    1490:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1494:	ldr	lr, [sp]
    1498:	sub	r0, lr, r0
    149c:	str	r0, [sp, #4]
    14a0:	ldr	r0, [sp, #4]
    14a4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    14a8:	ldrh	lr, [sp, #8]
    14ac:	add	lr, lr, #3
    14b0:	lsl	lr, lr, #1
    14b4:	cmp	r0, lr
    14b8:	bcc	14d4 <reflection_Field_required_is_present+0xa4>
    14bc:	ldr	r0, [sp, #4]
    14c0:	ldrh	r1, [sp, #8]
    14c4:	add	r0, r0, r1, lsl #1
    14c8:	add	r0, r0, #4
    14cc:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    14d0:	strh	r0, [fp, #-6]
    14d4:	ldrh	r0, [fp, #-6]
    14d8:	cmp	r0, #0
    14dc:	movw	r0, #0
    14e0:	movne	r0, #1
    14e4:	and	r0, r0, #1
    14e8:	mov	sp, fp
    14ec:	pop	{fp, pc}

000014f0 <reflection_Field_required>:
    14f0:	push	{fp, lr}
    14f4:	mov	fp, sp
    14f8:	sub	sp, sp, #24
    14fc:	str	r0, [fp, #-4]
    1500:	movw	r0, #0
    1504:	strh	r0, [fp, #-6]
    1508:	ldr	r0, [fp, #-4]
    150c:	movw	r1, #0
    1510:	cmp	r0, r1
    1514:	beq	1520 <reflection_Field_required+0x30>
    1518:	b	151c <reflection_Field_required+0x2c>
    151c:	b	1540 <reflection_Field_required+0x50>
    1520:	movw	r0, #0
    1524:	movt	r0, #0
    1528:	movw	r1, #0
    152c:	movt	r1, #0
    1530:	movw	r2, #207	; 0xcf
    1534:	movw	r3, #0
    1538:	movt	r3, #0
    153c:	bl	0 <__assert_fail>
    1540:	mov	r0, #7
    1544:	strh	r0, [fp, #-8]
    1548:	ldr	r0, [fp, #-4]
    154c:	str	r0, [sp, #8]
    1550:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1554:	ldr	lr, [sp, #8]
    1558:	sub	r0, lr, r0
    155c:	str	r0, [sp, #12]
    1560:	ldr	r0, [sp, #12]
    1564:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1568:	ldrh	lr, [fp, #-8]
    156c:	add	lr, lr, #3
    1570:	lsl	lr, lr, #1
    1574:	cmp	r0, lr
    1578:	bcc	1594 <reflection_Field_required+0xa4>
    157c:	ldr	r0, [sp, #12]
    1580:	ldrh	r1, [fp, #-8]
    1584:	add	r0, r0, r1, lsl #1
    1588:	add	r0, r0, #4
    158c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1590:	strh	r0, [fp, #-6]
    1594:	ldrh	r0, [fp, #-6]
    1598:	cmp	r0, #0
    159c:	beq	15bc <reflection_Field_required+0xcc>
    15a0:	ldr	r0, [fp, #-4]
    15a4:	ldrh	r1, [fp, #-6]
    15a8:	add	r0, r0, r1
    15ac:	bl	399c <flatbuffers_bool_read_from_pe>
    15b0:	and	r0, r0, #255	; 0xff
    15b4:	str	r0, [sp, #4]
    15b8:	b	15c8 <reflection_Field_required+0xd8>
    15bc:	movw	r0, #0
    15c0:	str	r0, [sp, #4]
    15c4:	b	15c8 <reflection_Field_required+0xd8>
    15c8:	ldr	r0, [sp, #4]
    15cc:	and	r0, r0, #255	; 0xff
    15d0:	mov	sp, fp
    15d4:	pop	{fp, pc}

000015d8 <reflection_Field_key_is_present>:
    15d8:	push	{fp, lr}
    15dc:	mov	fp, sp
    15e0:	sub	sp, sp, #16
    15e4:	str	r0, [fp, #-4]
    15e8:	movw	r0, #0
    15ec:	strh	r0, [fp, #-6]
    15f0:	ldr	r0, [fp, #-4]
    15f4:	movw	r1, #0
    15f8:	cmp	r0, r1
    15fc:	beq	1608 <reflection_Field_key_is_present+0x30>
    1600:	b	1604 <reflection_Field_key_is_present+0x2c>
    1604:	b	1628 <reflection_Field_key_is_present+0x50>
    1608:	movw	r0, #0
    160c:	movt	r0, #0
    1610:	movw	r1, #0
    1614:	movt	r1, #0
    1618:	movw	r2, #208	; 0xd0
    161c:	movw	r3, #0
    1620:	movt	r3, #0
    1624:	bl	0 <__assert_fail>
    1628:	mov	r0, #8
    162c:	strh	r0, [sp, #8]
    1630:	ldr	r0, [fp, #-4]
    1634:	str	r0, [sp]
    1638:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    163c:	ldr	lr, [sp]
    1640:	sub	r0, lr, r0
    1644:	str	r0, [sp, #4]
    1648:	ldr	r0, [sp, #4]
    164c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1650:	ldrh	lr, [sp, #8]
    1654:	add	lr, lr, #3
    1658:	lsl	lr, lr, #1
    165c:	cmp	r0, lr
    1660:	bcc	167c <reflection_Field_key_is_present+0xa4>
    1664:	ldr	r0, [sp, #4]
    1668:	ldrh	r1, [sp, #8]
    166c:	add	r0, r0, r1, lsl #1
    1670:	add	r0, r0, #4
    1674:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1678:	strh	r0, [fp, #-6]
    167c:	ldrh	r0, [fp, #-6]
    1680:	cmp	r0, #0
    1684:	movw	r0, #0
    1688:	movne	r0, #1
    168c:	and	r0, r0, #1
    1690:	mov	sp, fp
    1694:	pop	{fp, pc}

00001698 <reflection_Field_key>:
    1698:	push	{fp, lr}
    169c:	mov	fp, sp
    16a0:	sub	sp, sp, #24
    16a4:	str	r0, [fp, #-4]
    16a8:	movw	r0, #0
    16ac:	strh	r0, [fp, #-6]
    16b0:	ldr	r0, [fp, #-4]
    16b4:	movw	r1, #0
    16b8:	cmp	r0, r1
    16bc:	beq	16c8 <reflection_Field_key+0x30>
    16c0:	b	16c4 <reflection_Field_key+0x2c>
    16c4:	b	16e8 <reflection_Field_key+0x50>
    16c8:	movw	r0, #0
    16cc:	movt	r0, #0
    16d0:	movw	r1, #0
    16d4:	movt	r1, #0
    16d8:	movw	r2, #208	; 0xd0
    16dc:	movw	r3, #0
    16e0:	movt	r3, #0
    16e4:	bl	0 <__assert_fail>
    16e8:	mov	r0, #8
    16ec:	strh	r0, [fp, #-8]
    16f0:	ldr	r0, [fp, #-4]
    16f4:	str	r0, [sp, #8]
    16f8:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    16fc:	ldr	lr, [sp, #8]
    1700:	sub	r0, lr, r0
    1704:	str	r0, [sp, #12]
    1708:	ldr	r0, [sp, #12]
    170c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1710:	ldrh	lr, [fp, #-8]
    1714:	add	lr, lr, #3
    1718:	lsl	lr, lr, #1
    171c:	cmp	r0, lr
    1720:	bcc	173c <reflection_Field_key+0xa4>
    1724:	ldr	r0, [sp, #12]
    1728:	ldrh	r1, [fp, #-8]
    172c:	add	r0, r0, r1, lsl #1
    1730:	add	r0, r0, #4
    1734:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1738:	strh	r0, [fp, #-6]
    173c:	ldrh	r0, [fp, #-6]
    1740:	cmp	r0, #0
    1744:	beq	1764 <reflection_Field_key+0xcc>
    1748:	ldr	r0, [fp, #-4]
    174c:	ldrh	r1, [fp, #-6]
    1750:	add	r0, r0, r1
    1754:	bl	399c <flatbuffers_bool_read_from_pe>
    1758:	and	r0, r0, #255	; 0xff
    175c:	str	r0, [sp, #4]
    1760:	b	1770 <reflection_Field_key+0xd8>
    1764:	movw	r0, #0
    1768:	str	r0, [sp, #4]
    176c:	b	1770 <reflection_Field_key+0xd8>
    1770:	ldr	r0, [sp, #4]
    1774:	and	r0, r0, #255	; 0xff
    1778:	mov	sp, fp
    177c:	pop	{fp, pc}

00001780 <reflection_Object_is_struct_is_present>:
    1780:	push	{fp, lr}
    1784:	mov	fp, sp
    1788:	sub	sp, sp, #16
    178c:	str	r0, [fp, #-4]
    1790:	movw	r0, #0
    1794:	strh	r0, [fp, #-6]
    1798:	ldr	r0, [fp, #-4]
    179c:	movw	r1, #0
    17a0:	cmp	r0, r1
    17a4:	beq	17b0 <reflection_Object_is_struct_is_present+0x30>
    17a8:	b	17ac <reflection_Object_is_struct_is_present+0x2c>
    17ac:	b	17d0 <reflection_Object_is_struct_is_present+0x50>
    17b0:	movw	r0, #0
    17b4:	movt	r0, #0
    17b8:	movw	r1, #0
    17bc:	movt	r1, #0
    17c0:	movw	r2, #225	; 0xe1
    17c4:	movw	r3, #0
    17c8:	movt	r3, #0
    17cc:	bl	0 <__assert_fail>
    17d0:	mov	r0, #2
    17d4:	strh	r0, [sp, #8]
    17d8:	ldr	r0, [fp, #-4]
    17dc:	str	r0, [sp]
    17e0:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    17e4:	ldr	lr, [sp]
    17e8:	sub	r0, lr, r0
    17ec:	str	r0, [sp, #4]
    17f0:	ldr	r0, [sp, #4]
    17f4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    17f8:	ldrh	lr, [sp, #8]
    17fc:	add	lr, lr, #3
    1800:	lsl	lr, lr, #1
    1804:	cmp	r0, lr
    1808:	bcc	1824 <reflection_Object_is_struct_is_present+0xa4>
    180c:	ldr	r0, [sp, #4]
    1810:	ldrh	r1, [sp, #8]
    1814:	add	r0, r0, r1, lsl #1
    1818:	add	r0, r0, #4
    181c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1820:	strh	r0, [fp, #-6]
    1824:	ldrh	r0, [fp, #-6]
    1828:	cmp	r0, #0
    182c:	movw	r0, #0
    1830:	movne	r0, #1
    1834:	and	r0, r0, #1
    1838:	mov	sp, fp
    183c:	pop	{fp, pc}

00001840 <reflection_Object_is_struct>:
    1840:	push	{fp, lr}
    1844:	mov	fp, sp
    1848:	sub	sp, sp, #24
    184c:	str	r0, [fp, #-4]
    1850:	movw	r0, #0
    1854:	strh	r0, [fp, #-6]
    1858:	ldr	r0, [fp, #-4]
    185c:	movw	r1, #0
    1860:	cmp	r0, r1
    1864:	beq	1870 <reflection_Object_is_struct+0x30>
    1868:	b	186c <reflection_Object_is_struct+0x2c>
    186c:	b	1890 <reflection_Object_is_struct+0x50>
    1870:	movw	r0, #0
    1874:	movt	r0, #0
    1878:	movw	r1, #0
    187c:	movt	r1, #0
    1880:	movw	r2, #225	; 0xe1
    1884:	movw	r3, #0
    1888:	movt	r3, #0
    188c:	bl	0 <__assert_fail>
    1890:	mov	r0, #2
    1894:	strh	r0, [fp, #-8]
    1898:	ldr	r0, [fp, #-4]
    189c:	str	r0, [sp, #8]
    18a0:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    18a4:	ldr	lr, [sp, #8]
    18a8:	sub	r0, lr, r0
    18ac:	str	r0, [sp, #12]
    18b0:	ldr	r0, [sp, #12]
    18b4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    18b8:	ldrh	lr, [fp, #-8]
    18bc:	add	lr, lr, #3
    18c0:	lsl	lr, lr, #1
    18c4:	cmp	r0, lr
    18c8:	bcc	18e4 <reflection_Object_is_struct+0xa4>
    18cc:	ldr	r0, [sp, #12]
    18d0:	ldrh	r1, [fp, #-8]
    18d4:	add	r0, r0, r1, lsl #1
    18d8:	add	r0, r0, #4
    18dc:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    18e0:	strh	r0, [fp, #-6]
    18e4:	ldrh	r0, [fp, #-6]
    18e8:	cmp	r0, #0
    18ec:	beq	190c <reflection_Object_is_struct+0xcc>
    18f0:	ldr	r0, [fp, #-4]
    18f4:	ldrh	r1, [fp, #-6]
    18f8:	add	r0, r0, r1
    18fc:	bl	399c <flatbuffers_bool_read_from_pe>
    1900:	and	r0, r0, #255	; 0xff
    1904:	str	r0, [sp, #4]
    1908:	b	1918 <reflection_Object_is_struct+0xd8>
    190c:	movw	r0, #0
    1910:	str	r0, [sp, #4]
    1914:	b	1918 <reflection_Object_is_struct+0xd8>
    1918:	ldr	r0, [sp, #4]
    191c:	and	r0, r0, #255	; 0xff
    1920:	mov	sp, fp
    1924:	pop	{fp, pc}

00001928 <reflection_Object_minalign_is_present>:
    1928:	push	{fp, lr}
    192c:	mov	fp, sp
    1930:	sub	sp, sp, #16
    1934:	str	r0, [fp, #-4]
    1938:	movw	r0, #0
    193c:	strh	r0, [fp, #-6]
    1940:	ldr	r0, [fp, #-4]
    1944:	movw	r1, #0
    1948:	cmp	r0, r1
    194c:	beq	1958 <reflection_Object_minalign_is_present+0x30>
    1950:	b	1954 <reflection_Object_minalign_is_present+0x2c>
    1954:	b	1978 <reflection_Object_minalign_is_present+0x50>
    1958:	movw	r0, #0
    195c:	movt	r0, #0
    1960:	movw	r1, #0
    1964:	movt	r1, #0
    1968:	movw	r2, #226	; 0xe2
    196c:	movw	r3, #0
    1970:	movt	r3, #0
    1974:	bl	0 <__assert_fail>
    1978:	mov	r0, #3
    197c:	strh	r0, [sp, #8]
    1980:	ldr	r0, [fp, #-4]
    1984:	str	r0, [sp]
    1988:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    198c:	ldr	lr, [sp]
    1990:	sub	r0, lr, r0
    1994:	str	r0, [sp, #4]
    1998:	ldr	r0, [sp, #4]
    199c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    19a0:	ldrh	lr, [sp, #8]
    19a4:	add	lr, lr, #3
    19a8:	lsl	lr, lr, #1
    19ac:	cmp	r0, lr
    19b0:	bcc	19cc <reflection_Object_minalign_is_present+0xa4>
    19b4:	ldr	r0, [sp, #4]
    19b8:	ldrh	r1, [sp, #8]
    19bc:	add	r0, r0, r1, lsl #1
    19c0:	add	r0, r0, #4
    19c4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    19c8:	strh	r0, [fp, #-6]
    19cc:	ldrh	r0, [fp, #-6]
    19d0:	cmp	r0, #0
    19d4:	movw	r0, #0
    19d8:	movne	r0, #1
    19dc:	and	r0, r0, #1
    19e0:	mov	sp, fp
    19e4:	pop	{fp, pc}

000019e8 <reflection_Object_minalign>:
    19e8:	push	{fp, lr}
    19ec:	mov	fp, sp
    19f0:	sub	sp, sp, #24
    19f4:	str	r0, [fp, #-4]
    19f8:	movw	r0, #0
    19fc:	strh	r0, [fp, #-6]
    1a00:	ldr	r0, [fp, #-4]
    1a04:	movw	r1, #0
    1a08:	cmp	r0, r1
    1a0c:	beq	1a18 <reflection_Object_minalign+0x30>
    1a10:	b	1a14 <reflection_Object_minalign+0x2c>
    1a14:	b	1a38 <reflection_Object_minalign+0x50>
    1a18:	movw	r0, #0
    1a1c:	movt	r0, #0
    1a20:	movw	r1, #0
    1a24:	movt	r1, #0
    1a28:	movw	r2, #226	; 0xe2
    1a2c:	movw	r3, #0
    1a30:	movt	r3, #0
    1a34:	bl	0 <__assert_fail>
    1a38:	mov	r0, #3
    1a3c:	strh	r0, [fp, #-8]
    1a40:	ldr	r0, [fp, #-4]
    1a44:	str	r0, [sp, #8]
    1a48:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1a4c:	ldr	lr, [sp, #8]
    1a50:	sub	r0, lr, r0
    1a54:	str	r0, [sp, #12]
    1a58:	ldr	r0, [sp, #12]
    1a5c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1a60:	ldrh	lr, [fp, #-8]
    1a64:	add	lr, lr, #3
    1a68:	lsl	lr, lr, #1
    1a6c:	cmp	r0, lr
    1a70:	bcc	1a8c <reflection_Object_minalign+0xa4>
    1a74:	ldr	r0, [sp, #12]
    1a78:	ldrh	r1, [fp, #-8]
    1a7c:	add	r0, r0, r1, lsl #1
    1a80:	add	r0, r0, #4
    1a84:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1a88:	strh	r0, [fp, #-6]
    1a8c:	ldrh	r0, [fp, #-6]
    1a90:	cmp	r0, #0
    1a94:	beq	1ab0 <reflection_Object_minalign+0xc8>
    1a98:	ldr	r0, [fp, #-4]
    1a9c:	ldrh	r1, [fp, #-6]
    1aa0:	add	r0, r0, r1
    1aa4:	bl	3810 <flatbuffers_int32_read_from_pe>
    1aa8:	str	r0, [sp, #4]
    1aac:	b	1abc <reflection_Object_minalign+0xd4>
    1ab0:	movw	r0, #0
    1ab4:	str	r0, [sp, #4]
    1ab8:	b	1abc <reflection_Object_minalign+0xd4>
    1abc:	ldr	r0, [sp, #4]
    1ac0:	mov	sp, fp
    1ac4:	pop	{fp, pc}

00001ac8 <reflection_Object_bytesize_is_present>:
    1ac8:	push	{fp, lr}
    1acc:	mov	fp, sp
    1ad0:	sub	sp, sp, #16
    1ad4:	str	r0, [fp, #-4]
    1ad8:	movw	r0, #0
    1adc:	strh	r0, [fp, #-6]
    1ae0:	ldr	r0, [fp, #-4]
    1ae4:	movw	r1, #0
    1ae8:	cmp	r0, r1
    1aec:	beq	1af8 <reflection_Object_bytesize_is_present+0x30>
    1af0:	b	1af4 <reflection_Object_bytesize_is_present+0x2c>
    1af4:	b	1b18 <reflection_Object_bytesize_is_present+0x50>
    1af8:	movw	r0, #0
    1afc:	movt	r0, #0
    1b00:	movw	r1, #0
    1b04:	movt	r1, #0
    1b08:	movw	r2, #227	; 0xe3
    1b0c:	movw	r3, #0
    1b10:	movt	r3, #0
    1b14:	bl	0 <__assert_fail>
    1b18:	mov	r0, #4
    1b1c:	strh	r0, [sp, #8]
    1b20:	ldr	r0, [fp, #-4]
    1b24:	str	r0, [sp]
    1b28:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1b2c:	ldr	lr, [sp]
    1b30:	sub	r0, lr, r0
    1b34:	str	r0, [sp, #4]
    1b38:	ldr	r0, [sp, #4]
    1b3c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1b40:	ldrh	lr, [sp, #8]
    1b44:	add	lr, lr, #3
    1b48:	lsl	lr, lr, #1
    1b4c:	cmp	r0, lr
    1b50:	bcc	1b6c <reflection_Object_bytesize_is_present+0xa4>
    1b54:	ldr	r0, [sp, #4]
    1b58:	ldrh	r1, [sp, #8]
    1b5c:	add	r0, r0, r1, lsl #1
    1b60:	add	r0, r0, #4
    1b64:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1b68:	strh	r0, [fp, #-6]
    1b6c:	ldrh	r0, [fp, #-6]
    1b70:	cmp	r0, #0
    1b74:	movw	r0, #0
    1b78:	movne	r0, #1
    1b7c:	and	r0, r0, #1
    1b80:	mov	sp, fp
    1b84:	pop	{fp, pc}

00001b88 <reflection_Object_bytesize>:
    1b88:	push	{fp, lr}
    1b8c:	mov	fp, sp
    1b90:	sub	sp, sp, #24
    1b94:	str	r0, [fp, #-4]
    1b98:	movw	r0, #0
    1b9c:	strh	r0, [fp, #-6]
    1ba0:	ldr	r0, [fp, #-4]
    1ba4:	movw	r1, #0
    1ba8:	cmp	r0, r1
    1bac:	beq	1bb8 <reflection_Object_bytesize+0x30>
    1bb0:	b	1bb4 <reflection_Object_bytesize+0x2c>
    1bb4:	b	1bd8 <reflection_Object_bytesize+0x50>
    1bb8:	movw	r0, #0
    1bbc:	movt	r0, #0
    1bc0:	movw	r1, #0
    1bc4:	movt	r1, #0
    1bc8:	movw	r2, #227	; 0xe3
    1bcc:	movw	r3, #0
    1bd0:	movt	r3, #0
    1bd4:	bl	0 <__assert_fail>
    1bd8:	mov	r0, #4
    1bdc:	strh	r0, [fp, #-8]
    1be0:	ldr	r0, [fp, #-4]
    1be4:	str	r0, [sp, #8]
    1be8:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1bec:	ldr	lr, [sp, #8]
    1bf0:	sub	r0, lr, r0
    1bf4:	str	r0, [sp, #12]
    1bf8:	ldr	r0, [sp, #12]
    1bfc:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1c00:	ldrh	lr, [fp, #-8]
    1c04:	add	lr, lr, #3
    1c08:	lsl	lr, lr, #1
    1c0c:	cmp	r0, lr
    1c10:	bcc	1c2c <reflection_Object_bytesize+0xa4>
    1c14:	ldr	r0, [sp, #12]
    1c18:	ldrh	r1, [fp, #-8]
    1c1c:	add	r0, r0, r1, lsl #1
    1c20:	add	r0, r0, #4
    1c24:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1c28:	strh	r0, [fp, #-6]
    1c2c:	ldrh	r0, [fp, #-6]
    1c30:	cmp	r0, #0
    1c34:	beq	1c50 <reflection_Object_bytesize+0xc8>
    1c38:	ldr	r0, [fp, #-4]
    1c3c:	ldrh	r1, [fp, #-6]
    1c40:	add	r0, r0, r1
    1c44:	bl	3810 <flatbuffers_int32_read_from_pe>
    1c48:	str	r0, [sp, #4]
    1c4c:	b	1c5c <reflection_Object_bytesize+0xd4>
    1c50:	movw	r0, #0
    1c54:	str	r0, [sp, #4]
    1c58:	b	1c5c <reflection_Object_bytesize+0xd4>
    1c5c:	ldr	r0, [sp, #4]
    1c60:	mov	sp, fp
    1c64:	pop	{fp, pc}

00001c68 <print_enum>:
    1c68:	push	{fp, lr}
    1c6c:	mov	fp, sp
    1c70:	sub	sp, sp, #80	; 0x50
    1c74:	str	r0, [fp, #-4]
    1c78:	ldr	r0, [fp, #-4]
    1c7c:	bl	1e68 <reflection_Enum_name>
    1c80:	movw	lr, #0
    1c84:	movt	lr, #0
    1c88:	str	r0, [fp, #-20]	; 0xffffffec
    1c8c:	mov	r0, lr
    1c90:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c94:	bl	0 <printf>
    1c98:	ldr	r1, [fp, #-4]
    1c9c:	str	r0, [fp, #-24]	; 0xffffffe8
    1ca0:	mov	r0, r1
    1ca4:	bl	1f70 <reflection_Enum_values>
    1ca8:	str	r0, [fp, #-8]
    1cac:	movw	r0, #0
    1cb0:	movt	r0, #0
    1cb4:	bl	0 <printf>
    1cb8:	movw	r1, #0
    1cbc:	str	r1, [fp, #-16]
    1cc0:	str	r0, [fp, #-28]	; 0xffffffe4
    1cc4:	ldr	r0, [fp, #-16]
    1cc8:	ldr	r1, [fp, #-8]
    1ccc:	str	r0, [fp, #-32]	; 0xffffffe0
    1cd0:	mov	r0, r1
    1cd4:	bl	2078 <reflection_Enum_vec_len>
    1cd8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1cdc:	cmp	r1, r0
    1ce0:	bcs	1dc0 <print_enum+0x158>
    1ce4:	ldr	r0, [fp, #-8]
    1ce8:	ldr	r1, [fp, #-16]
    1cec:	bl	20c8 <reflection_EnumVal_vec_at>
    1cf0:	str	r0, [fp, #-12]
    1cf4:	ldr	r0, [fp, #-16]
    1cf8:	cmp	r0, #0
    1cfc:	bls	1d10 <print_enum+0xa8>
    1d00:	movw	r0, #0
    1d04:	movt	r0, #0
    1d08:	bl	0 <printf>
    1d0c:	str	r0, [fp, #-36]	; 0xffffffdc
    1d10:	ldr	r0, [fp, #-12]
    1d14:	bl	214c <reflection_EnumVal_name>
    1d18:	movw	lr, #0
    1d1c:	movt	lr, #0
    1d20:	str	r0, [sp, #40]	; 0x28
    1d24:	mov	r0, lr
    1d28:	ldr	r1, [sp, #40]	; 0x28
    1d2c:	bl	0 <printf>
    1d30:	ldr	r1, [fp, #-12]
    1d34:	str	r0, [sp, #36]	; 0x24
    1d38:	mov	r0, r1
    1d3c:	bl	2254 <reflection_EnumVal_value_is_present>
    1d40:	cmp	r0, #0
    1d44:	beq	1d70 <print_enum+0x108>
    1d48:	ldr	r0, [fp, #-12]
    1d4c:	bl	2314 <reflection_EnumVal_value>
    1d50:	movw	lr, #0
    1d54:	movt	lr, #0
    1d58:	str	r0, [sp, #32]
    1d5c:	mov	r0, lr
    1d60:	ldr	r2, [sp, #32]
    1d64:	mov	r3, r1
    1d68:	bl	0 <printf>
    1d6c:	str	r0, [sp, #28]
    1d70:	ldr	r0, [fp, #-12]
    1d74:	bl	2410 <reflection_EnumVal_object_is_present>
    1d78:	cmp	r0, #0
    1d7c:	beq	1da0 <print_enum+0x138>
    1d80:	movw	r0, #0
    1d84:	movt	r0, #0
    1d88:	bl	0 <printf>
    1d8c:	ldr	lr, [fp, #-12]
    1d90:	str	r0, [sp, #24]
    1d94:	mov	r0, lr
    1d98:	bl	24d0 <reflection_EnumVal_object>
    1d9c:	bl	6f8 <print_object>
    1da0:	movw	r0, #0
    1da4:	movt	r0, #0
    1da8:	bl	0 <printf>
    1dac:	str	r0, [sp, #20]
    1db0:	ldr	r0, [fp, #-16]
    1db4:	add	r0, r0, #1
    1db8:	str	r0, [fp, #-16]
    1dbc:	b	1cc4 <print_enum+0x5c>
    1dc0:	movw	r0, #0
    1dc4:	movt	r0, #0
    1dc8:	bl	0 <printf>
    1dcc:	ldr	lr, [fp, #-4]
    1dd0:	str	r0, [sp, #16]
    1dd4:	mov	r0, lr
    1dd8:	bl	25c8 <reflection_Enum_is_union_is_present>
    1ddc:	cmp	r0, #0
    1de0:	beq	1e30 <print_enum+0x1c8>
    1de4:	ldr	r0, [fp, #-4]
    1de8:	bl	2688 <reflection_Enum_is_union>
    1dec:	and	r0, r0, #255	; 0xff
    1df0:	cmp	r0, #0
    1df4:	movw	r0, #0
    1df8:	movne	r0, #1
    1dfc:	tst	r0, #1
    1e00:	movw	r0, #0
    1e04:	movt	r0, #0
    1e08:	movw	lr, #0
    1e0c:	movt	lr, #0
    1e10:	movne	r0, lr
    1e14:	movw	lr, #0
    1e18:	movt	lr, #0
    1e1c:	str	r0, [sp, #12]
    1e20:	mov	r0, lr
    1e24:	ldr	r1, [sp, #12]
    1e28:	bl	0 <printf>
    1e2c:	str	r0, [sp, #8]
    1e30:	movw	r0, #0
    1e34:	movt	r0, #0
    1e38:	bl	0 <printf>
    1e3c:	ldr	lr, [fp, #-4]
    1e40:	str	r0, [sp, #4]
    1e44:	mov	r0, lr
    1e48:	bl	2770 <reflection_Enum_underlying_type>
    1e4c:	bl	0 <print_type>
    1e50:	movw	r0, #0
    1e54:	movt	r0, #0
    1e58:	bl	0 <printf>
    1e5c:	str	r0, [sp]
    1e60:	mov	sp, fp
    1e64:	pop	{fp, pc}

00001e68 <reflection_Enum_name>:
    1e68:	push	{fp, lr}
    1e6c:	mov	fp, sp
    1e70:	sub	sp, sp, #24
    1e74:	str	r0, [fp, #-4]
    1e78:	movw	r0, #0
    1e7c:	strh	r0, [fp, #-10]
    1e80:	ldr	r0, [fp, #-4]
    1e84:	movw	r1, #0
    1e88:	cmp	r0, r1
    1e8c:	beq	1e98 <reflection_Enum_name+0x30>
    1e90:	b	1e94 <reflection_Enum_name+0x2c>
    1e94:	b	1eb8 <reflection_Enum_name+0x50>
    1e98:	movw	r0, #0
    1e9c:	movt	r0, #0
    1ea0:	movw	r1, #0
    1ea4:	movt	r1, #0
    1ea8:	movw	r2, #177	; 0xb1
    1eac:	movw	r3, #0
    1eb0:	movt	r3, #0
    1eb4:	bl	0 <__assert_fail>
    1eb8:	mov	r0, #0
    1ebc:	strh	r0, [sp, #12]
    1ec0:	ldr	r0, [fp, #-4]
    1ec4:	str	r0, [sp, #4]
    1ec8:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1ecc:	ldr	lr, [sp, #4]
    1ed0:	sub	r0, lr, r0
    1ed4:	str	r0, [sp, #8]
    1ed8:	ldr	r0, [sp, #8]
    1edc:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1ee0:	ldrh	lr, [sp, #12]
    1ee4:	add	lr, lr, #3
    1ee8:	lsl	lr, lr, #1
    1eec:	cmp	r0, lr
    1ef0:	bcc	1f0c <reflection_Enum_name+0xa4>
    1ef4:	ldr	r0, [sp, #8]
    1ef8:	ldrh	r1, [sp, #12]
    1efc:	add	r0, r0, r1, lsl #1
    1f00:	add	r0, r0, #4
    1f04:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1f08:	strh	r0, [fp, #-10]
    1f0c:	ldrsh	r0, [fp, #-10]
    1f10:	cmp	r0, #0
    1f14:	beq	1f50 <reflection_Enum_name+0xe8>
    1f18:	ldr	r0, [fp, #-4]
    1f1c:	ldrh	r1, [fp, #-10]
    1f20:	add	r0, r0, r1
    1f24:	str	r0, [fp, #-8]
    1f28:	ldr	r0, [fp, #-8]
    1f2c:	add	r0, r0, #4
    1f30:	ldr	r1, [fp, #-8]
    1f34:	str	r0, [sp]
    1f38:	mov	r0, r1
    1f3c:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    1f40:	ldr	r1, [sp]
    1f44:	add	r0, r1, r0
    1f48:	mov	sp, fp
    1f4c:	pop	{fp, pc}
    1f50:	movw	r0, #0
    1f54:	movt	r0, #0
    1f58:	movw	r1, #0
    1f5c:	movt	r1, #0
    1f60:	movw	r2, #177	; 0xb1
    1f64:	movw	r3, #0
    1f68:	movt	r3, #0
    1f6c:	bl	0 <__assert_fail>

00001f70 <reflection_Enum_values>:
    1f70:	push	{fp, lr}
    1f74:	mov	fp, sp
    1f78:	sub	sp, sp, #24
    1f7c:	str	r0, [fp, #-4]
    1f80:	movw	r0, #0
    1f84:	strh	r0, [fp, #-10]
    1f88:	ldr	r0, [fp, #-4]
    1f8c:	movw	r1, #0
    1f90:	cmp	r0, r1
    1f94:	beq	1fa0 <reflection_Enum_values+0x30>
    1f98:	b	1f9c <reflection_Enum_values+0x2c>
    1f9c:	b	1fc0 <reflection_Enum_values+0x50>
    1fa0:	movw	r0, #0
    1fa4:	movt	r0, #0
    1fa8:	movw	r1, #0
    1fac:	movt	r1, #0
    1fb0:	movw	r2, #183	; 0xb7
    1fb4:	movw	r3, #0
    1fb8:	movt	r3, #0
    1fbc:	bl	0 <__assert_fail>
    1fc0:	mov	r0, #1
    1fc4:	strh	r0, [sp, #12]
    1fc8:	ldr	r0, [fp, #-4]
    1fcc:	str	r0, [sp, #4]
    1fd0:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    1fd4:	ldr	lr, [sp, #4]
    1fd8:	sub	r0, lr, r0
    1fdc:	str	r0, [sp, #8]
    1fe0:	ldr	r0, [sp, #8]
    1fe4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    1fe8:	ldrh	lr, [sp, #12]
    1fec:	add	lr, lr, #3
    1ff0:	lsl	lr, lr, #1
    1ff4:	cmp	r0, lr
    1ff8:	bcc	2014 <reflection_Enum_values+0xa4>
    1ffc:	ldr	r0, [sp, #8]
    2000:	ldrh	r1, [sp, #12]
    2004:	add	r0, r0, r1, lsl #1
    2008:	add	r0, r0, #4
    200c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2010:	strh	r0, [fp, #-10]
    2014:	ldrsh	r0, [fp, #-10]
    2018:	cmp	r0, #0
    201c:	beq	2058 <reflection_Enum_values+0xe8>
    2020:	ldr	r0, [fp, #-4]
    2024:	ldrh	r1, [fp, #-10]
    2028:	add	r0, r0, r1
    202c:	str	r0, [fp, #-8]
    2030:	ldr	r0, [fp, #-8]
    2034:	add	r0, r0, #4
    2038:	ldr	r1, [fp, #-8]
    203c:	str	r0, [sp]
    2040:	mov	r0, r1
    2044:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2048:	ldr	r1, [sp]
    204c:	add	r0, r1, r0
    2050:	mov	sp, fp
    2054:	pop	{fp, pc}
    2058:	movw	r0, #0
    205c:	movt	r0, #0
    2060:	movw	r1, #0
    2064:	movt	r1, #0
    2068:	movw	r2, #183	; 0xb7
    206c:	movw	r3, #0
    2070:	movt	r3, #0
    2074:	bl	0 <__assert_fail>

00002078 <reflection_Enum_vec_len>:
    2078:	push	{fp, lr}
    207c:	mov	fp, sp
    2080:	sub	sp, sp, #8
    2084:	str	r0, [sp, #4]
    2088:	ldr	r0, [sp, #4]
    208c:	movw	r1, #0
    2090:	cmp	r0, r1
    2094:	beq	20b0 <reflection_Enum_vec_len+0x38>
    2098:	ldr	r0, [sp, #4]
    209c:	mvn	r1, #3
    20a0:	add	r0, r0, r1
    20a4:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    20a8:	str	r0, [sp]
    20ac:	b	20bc <reflection_Enum_vec_len+0x44>
    20b0:	movw	r0, #0
    20b4:	str	r0, [sp]
    20b8:	b	20bc <reflection_Enum_vec_len+0x44>
    20bc:	ldr	r0, [sp]
    20c0:	mov	sp, fp
    20c4:	pop	{fp, pc}

000020c8 <reflection_EnumVal_vec_at>:
    20c8:	push	{fp, lr}
    20cc:	mov	fp, sp
    20d0:	sub	sp, sp, #16
    20d4:	str	r0, [fp, #-4]
    20d8:	str	r1, [sp, #8]
    20dc:	ldr	r0, [fp, #-4]
    20e0:	ldr	r1, [sp, #8]
    20e4:	add	r0, r0, r1, lsl #2
    20e8:	str	r0, [sp, #4]
    20ec:	ldr	r0, [fp, #-4]
    20f0:	bl	3880 <flatbuffers_vec_len>
    20f4:	ldr	r1, [sp, #8]
    20f8:	cmp	r0, r1
    20fc:	bls	2108 <reflection_EnumVal_vec_at+0x40>
    2100:	b	2104 <reflection_EnumVal_vec_at+0x3c>
    2104:	b	2128 <reflection_EnumVal_vec_at+0x60>
    2108:	movw	r0, #0
    210c:	movt	r0, #0
    2110:	movw	r1, #0
    2114:	movt	r1, #0
    2118:	movw	r2, #156	; 0x9c
    211c:	movw	r3, #0
    2120:	movt	r3, #0
    2124:	bl	0 <__assert_fail>
    2128:	ldr	r0, [sp, #4]
    212c:	ldr	r1, [sp, #4]
    2130:	str	r0, [sp]
    2134:	mov	r0, r1
    2138:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    213c:	ldr	r1, [sp]
    2140:	add	r0, r1, r0
    2144:	mov	sp, fp
    2148:	pop	{fp, pc}

0000214c <reflection_EnumVal_name>:
    214c:	push	{fp, lr}
    2150:	mov	fp, sp
    2154:	sub	sp, sp, #24
    2158:	str	r0, [fp, #-4]
    215c:	movw	r0, #0
    2160:	strh	r0, [fp, #-10]
    2164:	ldr	r0, [fp, #-4]
    2168:	movw	r1, #0
    216c:	cmp	r0, r1
    2170:	beq	217c <reflection_EnumVal_name+0x30>
    2174:	b	2178 <reflection_EnumVal_name+0x2c>
    2178:	b	219c <reflection_EnumVal_name+0x50>
    217c:	movw	r0, #0
    2180:	movt	r0, #0
    2184:	movw	r1, #0
    2188:	movt	r1, #0
    218c:	movw	r2, #159	; 0x9f
    2190:	movw	r3, #0
    2194:	movt	r3, #0
    2198:	bl	0 <__assert_fail>
    219c:	mov	r0, #0
    21a0:	strh	r0, [sp, #12]
    21a4:	ldr	r0, [fp, #-4]
    21a8:	str	r0, [sp, #4]
    21ac:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    21b0:	ldr	lr, [sp, #4]
    21b4:	sub	r0, lr, r0
    21b8:	str	r0, [sp, #8]
    21bc:	ldr	r0, [sp, #8]
    21c0:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    21c4:	ldrh	lr, [sp, #12]
    21c8:	add	lr, lr, #3
    21cc:	lsl	lr, lr, #1
    21d0:	cmp	r0, lr
    21d4:	bcc	21f0 <reflection_EnumVal_name+0xa4>
    21d8:	ldr	r0, [sp, #8]
    21dc:	ldrh	r1, [sp, #12]
    21e0:	add	r0, r0, r1, lsl #1
    21e4:	add	r0, r0, #4
    21e8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    21ec:	strh	r0, [fp, #-10]
    21f0:	ldrsh	r0, [fp, #-10]
    21f4:	cmp	r0, #0
    21f8:	beq	2234 <reflection_EnumVal_name+0xe8>
    21fc:	ldr	r0, [fp, #-4]
    2200:	ldrh	r1, [fp, #-10]
    2204:	add	r0, r0, r1
    2208:	str	r0, [fp, #-8]
    220c:	ldr	r0, [fp, #-8]
    2210:	add	r0, r0, #4
    2214:	ldr	r1, [fp, #-8]
    2218:	str	r0, [sp]
    221c:	mov	r0, r1
    2220:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2224:	ldr	r1, [sp]
    2228:	add	r0, r1, r0
    222c:	mov	sp, fp
    2230:	pop	{fp, pc}
    2234:	movw	r0, #0
    2238:	movt	r0, #0
    223c:	movw	r1, #0
    2240:	movt	r1, #0
    2244:	movw	r2, #159	; 0x9f
    2248:	movw	r3, #0
    224c:	movt	r3, #0
    2250:	bl	0 <__assert_fail>

00002254 <reflection_EnumVal_value_is_present>:
    2254:	push	{fp, lr}
    2258:	mov	fp, sp
    225c:	sub	sp, sp, #16
    2260:	str	r0, [fp, #-4]
    2264:	movw	r0, #0
    2268:	strh	r0, [fp, #-6]
    226c:	ldr	r0, [fp, #-4]
    2270:	movw	r1, #0
    2274:	cmp	r0, r1
    2278:	beq	2284 <reflection_EnumVal_value_is_present+0x30>
    227c:	b	2280 <reflection_EnumVal_value_is_present+0x2c>
    2280:	b	22a4 <reflection_EnumVal_value_is_present+0x50>
    2284:	movw	r0, #0
    2288:	movt	r0, #0
    228c:	movw	r1, #0
    2290:	movt	r1, #0
    2294:	movw	r2, #160	; 0xa0
    2298:	movw	r3, #0
    229c:	movt	r3, #0
    22a0:	bl	0 <__assert_fail>
    22a4:	mov	r0, #1
    22a8:	strh	r0, [sp, #8]
    22ac:	ldr	r0, [fp, #-4]
    22b0:	str	r0, [sp]
    22b4:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    22b8:	ldr	lr, [sp]
    22bc:	sub	r0, lr, r0
    22c0:	str	r0, [sp, #4]
    22c4:	ldr	r0, [sp, #4]
    22c8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    22cc:	ldrh	lr, [sp, #8]
    22d0:	add	lr, lr, #3
    22d4:	lsl	lr, lr, #1
    22d8:	cmp	r0, lr
    22dc:	bcc	22f8 <reflection_EnumVal_value_is_present+0xa4>
    22e0:	ldr	r0, [sp, #4]
    22e4:	ldrh	r1, [sp, #8]
    22e8:	add	r0, r0, r1, lsl #1
    22ec:	add	r0, r0, #4
    22f0:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    22f4:	strh	r0, [fp, #-6]
    22f8:	ldrh	r0, [fp, #-6]
    22fc:	cmp	r0, #0
    2300:	movw	r0, #0
    2304:	movne	r0, #1
    2308:	and	r0, r0, #1
    230c:	mov	sp, fp
    2310:	pop	{fp, pc}

00002314 <reflection_EnumVal_value>:
    2314:	push	{fp, lr}
    2318:	mov	fp, sp
    231c:	sub	sp, sp, #32
    2320:	str	r0, [fp, #-4]
    2324:	movw	r0, #0
    2328:	strh	r0, [fp, #-6]
    232c:	ldr	r0, [fp, #-4]
    2330:	movw	r1, #0
    2334:	cmp	r0, r1
    2338:	beq	2344 <reflection_EnumVal_value+0x30>
    233c:	b	2340 <reflection_EnumVal_value+0x2c>
    2340:	b	2364 <reflection_EnumVal_value+0x50>
    2344:	movw	r0, #0
    2348:	movt	r0, #0
    234c:	movw	r1, #0
    2350:	movt	r1, #0
    2354:	movw	r2, #160	; 0xa0
    2358:	movw	r3, #0
    235c:	movt	r3, #0
    2360:	bl	0 <__assert_fail>
    2364:	mov	r0, #1
    2368:	strh	r0, [fp, #-8]
    236c:	ldr	r0, [fp, #-4]
    2370:	str	r0, [sp, #16]
    2374:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    2378:	ldr	lr, [sp, #16]
    237c:	sub	r0, lr, r0
    2380:	str	r0, [fp, #-12]
    2384:	ldr	r0, [fp, #-12]
    2388:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    238c:	ldrh	lr, [fp, #-8]
    2390:	add	lr, lr, #3
    2394:	lsl	lr, lr, #1
    2398:	cmp	r0, lr
    239c:	bcc	23b8 <reflection_EnumVal_value+0xa4>
    23a0:	ldr	r0, [fp, #-12]
    23a4:	ldrh	r1, [fp, #-8]
    23a8:	add	r0, r0, r1, lsl #1
    23ac:	add	r0, r0, #4
    23b0:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    23b4:	strh	r0, [fp, #-6]
    23b8:	ldrh	r0, [fp, #-6]
    23bc:	cmp	r0, #0
    23c0:	beq	23e0 <reflection_EnumVal_value+0xcc>
    23c4:	ldr	r0, [fp, #-4]
    23c8:	ldrh	r1, [fp, #-6]
    23cc:	add	r0, r0, r1
    23d0:	bl	390c <flatbuffers_int64_read_from_pe>
    23d4:	str	r0, [sp, #12]
    23d8:	str	r1, [sp, #8]
    23dc:	b	23f4 <reflection_EnumVal_value+0xe0>
    23e0:	mov	r0, #0
    23e4:	mov	r1, r0
    23e8:	str	r1, [sp, #12]
    23ec:	str	r0, [sp, #8]
    23f0:	b	23f4 <reflection_EnumVal_value+0xe0>
    23f4:	ldr	r0, [sp, #8]
    23f8:	ldr	r1, [sp, #12]
    23fc:	str	r0, [sp, #4]
    2400:	mov	r0, r1
    2404:	ldr	r1, [sp, #4]
    2408:	mov	sp, fp
    240c:	pop	{fp, pc}

00002410 <reflection_EnumVal_object_is_present>:
    2410:	push	{fp, lr}
    2414:	mov	fp, sp
    2418:	sub	sp, sp, #16
    241c:	str	r0, [fp, #-4]
    2420:	movw	r0, #0
    2424:	strh	r0, [fp, #-6]
    2428:	ldr	r0, [fp, #-4]
    242c:	movw	r1, #0
    2430:	cmp	r0, r1
    2434:	beq	2440 <reflection_EnumVal_object_is_present+0x30>
    2438:	b	243c <reflection_EnumVal_object_is_present+0x2c>
    243c:	b	2460 <reflection_EnumVal_object_is_present+0x50>
    2440:	movw	r0, #0
    2444:	movt	r0, #0
    2448:	movw	r1, #0
    244c:	movt	r1, #0
    2450:	movw	r2, #167	; 0xa7
    2454:	movw	r3, #0
    2458:	movt	r3, #0
    245c:	bl	0 <__assert_fail>
    2460:	mov	r0, #2
    2464:	strh	r0, [sp, #8]
    2468:	ldr	r0, [fp, #-4]
    246c:	str	r0, [sp]
    2470:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    2474:	ldr	lr, [sp]
    2478:	sub	r0, lr, r0
    247c:	str	r0, [sp, #4]
    2480:	ldr	r0, [sp, #4]
    2484:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2488:	ldrh	lr, [sp, #8]
    248c:	add	lr, lr, #3
    2490:	lsl	lr, lr, #1
    2494:	cmp	r0, lr
    2498:	bcc	24b4 <reflection_EnumVal_object_is_present+0xa4>
    249c:	ldr	r0, [sp, #4]
    24a0:	ldrh	r1, [sp, #8]
    24a4:	add	r0, r0, r1, lsl #1
    24a8:	add	r0, r0, #4
    24ac:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    24b0:	strh	r0, [fp, #-6]
    24b4:	ldrh	r0, [fp, #-6]
    24b8:	cmp	r0, #0
    24bc:	movw	r0, #0
    24c0:	movne	r0, #1
    24c4:	and	r0, r0, #1
    24c8:	mov	sp, fp
    24cc:	pop	{fp, pc}

000024d0 <reflection_EnumVal_object>:
    24d0:	push	{fp, lr}
    24d4:	mov	fp, sp
    24d8:	sub	sp, sp, #32
    24dc:	str	r0, [fp, #-8]
    24e0:	movw	r0, #0
    24e4:	strh	r0, [fp, #-14]
    24e8:	ldr	r0, [fp, #-8]
    24ec:	movw	r1, #0
    24f0:	cmp	r0, r1
    24f4:	beq	2500 <reflection_EnumVal_object+0x30>
    24f8:	b	24fc <reflection_EnumVal_object+0x2c>
    24fc:	b	2520 <reflection_EnumVal_object+0x50>
    2500:	movw	r0, #0
    2504:	movt	r0, #0
    2508:	movw	r1, #0
    250c:	movt	r1, #0
    2510:	movw	r2, #167	; 0xa7
    2514:	movw	r3, #0
    2518:	movt	r3, #0
    251c:	bl	0 <__assert_fail>
    2520:	mov	r0, #2
    2524:	strh	r0, [sp, #16]
    2528:	ldr	r0, [fp, #-8]
    252c:	str	r0, [sp, #8]
    2530:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    2534:	ldr	lr, [sp, #8]
    2538:	sub	r0, lr, r0
    253c:	str	r0, [sp, #12]
    2540:	ldr	r0, [sp, #12]
    2544:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2548:	ldrh	lr, [sp, #16]
    254c:	add	lr, lr, #3
    2550:	lsl	lr, lr, #1
    2554:	cmp	r0, lr
    2558:	bcc	2574 <reflection_EnumVal_object+0xa4>
    255c:	ldr	r0, [sp, #12]
    2560:	ldrh	r1, [sp, #16]
    2564:	add	r0, r0, r1, lsl #1
    2568:	add	r0, r0, #4
    256c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2570:	strh	r0, [fp, #-14]
    2574:	ldrsh	r0, [fp, #-14]
    2578:	cmp	r0, #0
    257c:	beq	25b4 <reflection_EnumVal_object+0xe4>
    2580:	ldr	r0, [fp, #-8]
    2584:	ldrh	r1, [fp, #-14]
    2588:	add	r0, r0, r1
    258c:	str	r0, [fp, #-12]
    2590:	ldr	r0, [fp, #-12]
    2594:	ldr	r1, [fp, #-12]
    2598:	str	r0, [sp, #4]
    259c:	mov	r0, r1
    25a0:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    25a4:	ldr	r1, [sp, #4]
    25a8:	add	r0, r1, r0
    25ac:	str	r0, [fp, #-4]
    25b0:	b	25bc <reflection_EnumVal_object+0xec>
    25b4:	movw	r0, #0
    25b8:	str	r0, [fp, #-4]
    25bc:	ldr	r0, [fp, #-4]
    25c0:	mov	sp, fp
    25c4:	pop	{fp, pc}

000025c8 <reflection_Enum_is_union_is_present>:
    25c8:	push	{fp, lr}
    25cc:	mov	fp, sp
    25d0:	sub	sp, sp, #16
    25d4:	str	r0, [fp, #-4]
    25d8:	movw	r0, #0
    25dc:	strh	r0, [fp, #-6]
    25e0:	ldr	r0, [fp, #-4]
    25e4:	movw	r1, #0
    25e8:	cmp	r0, r1
    25ec:	beq	25f8 <reflection_Enum_is_union_is_present+0x30>
    25f0:	b	25f4 <reflection_Enum_is_union_is_present+0x2c>
    25f4:	b	2618 <reflection_Enum_is_union_is_present+0x50>
    25f8:	movw	r0, #0
    25fc:	movt	r0, #0
    2600:	movw	r1, #0
    2604:	movt	r1, #0
    2608:	movw	r2, #184	; 0xb8
    260c:	movw	r3, #0
    2610:	movt	r3, #0
    2614:	bl	0 <__assert_fail>
    2618:	mov	r0, #2
    261c:	strh	r0, [sp, #8]
    2620:	ldr	r0, [fp, #-4]
    2624:	str	r0, [sp]
    2628:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    262c:	ldr	lr, [sp]
    2630:	sub	r0, lr, r0
    2634:	str	r0, [sp, #4]
    2638:	ldr	r0, [sp, #4]
    263c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2640:	ldrh	lr, [sp, #8]
    2644:	add	lr, lr, #3
    2648:	lsl	lr, lr, #1
    264c:	cmp	r0, lr
    2650:	bcc	266c <reflection_Enum_is_union_is_present+0xa4>
    2654:	ldr	r0, [sp, #4]
    2658:	ldrh	r1, [sp, #8]
    265c:	add	r0, r0, r1, lsl #1
    2660:	add	r0, r0, #4
    2664:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2668:	strh	r0, [fp, #-6]
    266c:	ldrh	r0, [fp, #-6]
    2670:	cmp	r0, #0
    2674:	movw	r0, #0
    2678:	movne	r0, #1
    267c:	and	r0, r0, #1
    2680:	mov	sp, fp
    2684:	pop	{fp, pc}

00002688 <reflection_Enum_is_union>:
    2688:	push	{fp, lr}
    268c:	mov	fp, sp
    2690:	sub	sp, sp, #24
    2694:	str	r0, [fp, #-4]
    2698:	movw	r0, #0
    269c:	strh	r0, [fp, #-6]
    26a0:	ldr	r0, [fp, #-4]
    26a4:	movw	r1, #0
    26a8:	cmp	r0, r1
    26ac:	beq	26b8 <reflection_Enum_is_union+0x30>
    26b0:	b	26b4 <reflection_Enum_is_union+0x2c>
    26b4:	b	26d8 <reflection_Enum_is_union+0x50>
    26b8:	movw	r0, #0
    26bc:	movt	r0, #0
    26c0:	movw	r1, #0
    26c4:	movt	r1, #0
    26c8:	movw	r2, #184	; 0xb8
    26cc:	movw	r3, #0
    26d0:	movt	r3, #0
    26d4:	bl	0 <__assert_fail>
    26d8:	mov	r0, #2
    26dc:	strh	r0, [fp, #-8]
    26e0:	ldr	r0, [fp, #-4]
    26e4:	str	r0, [sp, #8]
    26e8:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    26ec:	ldr	lr, [sp, #8]
    26f0:	sub	r0, lr, r0
    26f4:	str	r0, [sp, #12]
    26f8:	ldr	r0, [sp, #12]
    26fc:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2700:	ldrh	lr, [fp, #-8]
    2704:	add	lr, lr, #3
    2708:	lsl	lr, lr, #1
    270c:	cmp	r0, lr
    2710:	bcc	272c <reflection_Enum_is_union+0xa4>
    2714:	ldr	r0, [sp, #12]
    2718:	ldrh	r1, [fp, #-8]
    271c:	add	r0, r0, r1, lsl #1
    2720:	add	r0, r0, #4
    2724:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2728:	strh	r0, [fp, #-6]
    272c:	ldrh	r0, [fp, #-6]
    2730:	cmp	r0, #0
    2734:	beq	2754 <reflection_Enum_is_union+0xcc>
    2738:	ldr	r0, [fp, #-4]
    273c:	ldrh	r1, [fp, #-6]
    2740:	add	r0, r0, r1
    2744:	bl	399c <flatbuffers_bool_read_from_pe>
    2748:	and	r0, r0, #255	; 0xff
    274c:	str	r0, [sp, #4]
    2750:	b	2760 <reflection_Enum_is_union+0xd8>
    2754:	movw	r0, #0
    2758:	str	r0, [sp, #4]
    275c:	b	2760 <reflection_Enum_is_union+0xd8>
    2760:	ldr	r0, [sp, #4]
    2764:	and	r0, r0, #255	; 0xff
    2768:	mov	sp, fp
    276c:	pop	{fp, pc}

00002770 <reflection_Enum_underlying_type>:
    2770:	push	{fp, lr}
    2774:	mov	fp, sp
    2778:	sub	sp, sp, #24
    277c:	str	r0, [fp, #-4]
    2780:	movw	r0, #0
    2784:	strh	r0, [fp, #-10]
    2788:	ldr	r0, [fp, #-4]
    278c:	movw	r1, #0
    2790:	cmp	r0, r1
    2794:	beq	27a0 <reflection_Enum_underlying_type+0x30>
    2798:	b	279c <reflection_Enum_underlying_type+0x2c>
    279c:	b	27c0 <reflection_Enum_underlying_type+0x50>
    27a0:	movw	r0, #0
    27a4:	movt	r0, #0
    27a8:	movw	r1, #0
    27ac:	movt	r1, #0
    27b0:	movw	r2, #185	; 0xb9
    27b4:	movw	r3, #0
    27b8:	movt	r3, #0
    27bc:	bl	0 <__assert_fail>
    27c0:	mov	r0, #3
    27c4:	strh	r0, [sp, #12]
    27c8:	ldr	r0, [fp, #-4]
    27cc:	str	r0, [sp, #4]
    27d0:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    27d4:	ldr	lr, [sp, #4]
    27d8:	sub	r0, lr, r0
    27dc:	str	r0, [sp, #8]
    27e0:	ldr	r0, [sp, #8]
    27e4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    27e8:	ldrh	lr, [sp, #12]
    27ec:	add	lr, lr, #3
    27f0:	lsl	lr, lr, #1
    27f4:	cmp	r0, lr
    27f8:	bcc	2814 <reflection_Enum_underlying_type+0xa4>
    27fc:	ldr	r0, [sp, #8]
    2800:	ldrh	r1, [sp, #12]
    2804:	add	r0, r0, r1, lsl #1
    2808:	add	r0, r0, #4
    280c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2810:	strh	r0, [fp, #-10]
    2814:	ldrsh	r0, [fp, #-10]
    2818:	cmp	r0, #0
    281c:	beq	2854 <reflection_Enum_underlying_type+0xe4>
    2820:	ldr	r0, [fp, #-4]
    2824:	ldrh	r1, [fp, #-10]
    2828:	add	r0, r0, r1
    282c:	str	r0, [fp, #-8]
    2830:	ldr	r0, [fp, #-8]
    2834:	ldr	r1, [fp, #-8]
    2838:	str	r0, [sp]
    283c:	mov	r0, r1
    2840:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2844:	ldr	r1, [sp]
    2848:	add	r0, r1, r0
    284c:	mov	sp, fp
    2850:	pop	{fp, pc}
    2854:	movw	r0, #0
    2858:	movt	r0, #0
    285c:	movw	r1, #0
    2860:	movt	r1, #0
    2864:	movw	r2, #185	; 0xb9
    2868:	movw	r3, #0
    286c:	movt	r3, #0
    2870:	bl	0 <__assert_fail>

00002874 <print_schema>:
    2874:	push	{fp, lr}
    2878:	mov	fp, sp
    287c:	sub	sp, sp, #80	; 0x50
    2880:	str	r0, [fp, #-4]
    2884:	ldr	r0, [fp, #-4]
    2888:	bl	2a70 <reflection_Schema_objects>
    288c:	str	r0, [fp, #-8]
    2890:	movw	r0, #0
    2894:	movt	r0, #0
    2898:	bl	0 <printf>
    289c:	movw	lr, #0
    28a0:	movt	lr, #0
    28a4:	str	r0, [fp, #-20]	; 0xffffffec
    28a8:	mov	r0, lr
    28ac:	bl	0 <printf>
    28b0:	movw	lr, #0
    28b4:	str	lr, [fp, #-16]
    28b8:	str	r0, [fp, #-24]	; 0xffffffe8
    28bc:	ldr	r0, [fp, #-16]
    28c0:	ldr	r1, [fp, #-8]
    28c4:	str	r0, [fp, #-28]	; 0xffffffe4
    28c8:	mov	r0, r1
    28cc:	bl	2b78 <reflection_Object_vec_len>
    28d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    28d4:	cmp	r1, r0
    28d8:	bcs	2918 <print_schema+0xa4>
    28dc:	ldr	r0, [fp, #-16]
    28e0:	cmp	r0, #0
    28e4:	bls	28f8 <print_schema+0x84>
    28e8:	movw	r0, #0
    28ec:	movt	r0, #0
    28f0:	bl	0 <printf>
    28f4:	str	r0, [fp, #-32]	; 0xffffffe0
    28f8:	ldr	r0, [fp, #-8]
    28fc:	ldr	r1, [fp, #-16]
    2900:	bl	2bc8 <reflection_Object_vec_at>
    2904:	bl	6f8 <print_object>
    2908:	ldr	r0, [fp, #-16]
    290c:	add	r0, r0, #1
    2910:	str	r0, [fp, #-16]
    2914:	b	28bc <print_schema+0x48>
    2918:	movw	r0, #0
    291c:	movt	r0, #0
    2920:	bl	0 <printf>
    2924:	ldr	lr, [fp, #-4]
    2928:	str	r0, [fp, #-36]	; 0xffffffdc
    292c:	mov	r0, lr
    2930:	bl	2c4c <reflection_Schema_enums>
    2934:	str	r0, [fp, #-12]
    2938:	movw	r0, #0
    293c:	movt	r0, #0
    2940:	bl	0 <printf>
    2944:	movw	lr, #0
    2948:	str	lr, [fp, #-16]
    294c:	str	r0, [sp, #40]	; 0x28
    2950:	ldr	r0, [fp, #-16]
    2954:	ldr	r1, [fp, #-12]
    2958:	str	r0, [sp, #36]	; 0x24
    295c:	mov	r0, r1
    2960:	bl	2078 <reflection_Enum_vec_len>
    2964:	ldr	r1, [sp, #36]	; 0x24
    2968:	cmp	r1, r0
    296c:	bcs	29ac <print_schema+0x138>
    2970:	ldr	r0, [fp, #-16]
    2974:	cmp	r0, #0
    2978:	bls	298c <print_schema+0x118>
    297c:	movw	r0, #0
    2980:	movt	r0, #0
    2984:	bl	0 <printf>
    2988:	str	r0, [sp, #32]
    298c:	ldr	r0, [fp, #-12]
    2990:	ldr	r1, [fp, #-16]
    2994:	bl	2d54 <reflection_Enum_vec_at>
    2998:	bl	1c68 <print_enum>
    299c:	ldr	r0, [fp, #-16]
    29a0:	add	r0, r0, #1
    29a4:	str	r0, [fp, #-16]
    29a8:	b	2950 <print_schema+0xdc>
    29ac:	movw	r0, #0
    29b0:	movt	r0, #0
    29b4:	bl	0 <printf>
    29b8:	ldr	lr, [fp, #-4]
    29bc:	str	r0, [sp, #28]
    29c0:	mov	r0, lr
    29c4:	bl	2dd8 <reflection_Schema_file_ident_is_present>
    29c8:	cmp	r0, #0
    29cc:	beq	29f4 <print_schema+0x180>
    29d0:	ldr	r0, [fp, #-4]
    29d4:	bl	2e98 <reflection_Schema_file_ident>
    29d8:	movw	lr, #0
    29dc:	movt	lr, #0
    29e0:	str	r0, [sp, #24]
    29e4:	mov	r0, lr
    29e8:	ldr	r1, [sp, #24]
    29ec:	bl	0 <printf>
    29f0:	str	r0, [sp, #20]
    29f4:	ldr	r0, [fp, #-4]
    29f8:	bl	2f94 <reflection_Schema_file_ext_is_present>
    29fc:	cmp	r0, #0
    2a00:	beq	2a28 <print_schema+0x1b4>
    2a04:	ldr	r0, [fp, #-4]
    2a08:	bl	3054 <reflection_Schema_file_ext>
    2a0c:	movw	lr, #0
    2a10:	movt	lr, #0
    2a14:	str	r0, [sp, #16]
    2a18:	mov	r0, lr
    2a1c:	ldr	r1, [sp, #16]
    2a20:	bl	0 <printf>
    2a24:	str	r0, [sp, #12]
    2a28:	ldr	r0, [fp, #-4]
    2a2c:	bl	3150 <reflection_Schema_root_table_is_present>
    2a30:	cmp	r0, #0
    2a34:	beq	2a58 <print_schema+0x1e4>
    2a38:	movw	r0, #0
    2a3c:	movt	r0, #0
    2a40:	bl	0 <printf>
    2a44:	ldr	lr, [fp, #-4]
    2a48:	str	r0, [sp, #8]
    2a4c:	mov	r0, lr
    2a50:	bl	3210 <reflection_Schema_root_table>
    2a54:	bl	6f8 <print_object>
    2a58:	movw	r0, #0
    2a5c:	movt	r0, #0
    2a60:	bl	0 <printf>
    2a64:	str	r0, [sp, #4]
    2a68:	mov	sp, fp
    2a6c:	pop	{fp, pc}

00002a70 <reflection_Schema_objects>:
    2a70:	push	{fp, lr}
    2a74:	mov	fp, sp
    2a78:	sub	sp, sp, #24
    2a7c:	str	r0, [fp, #-4]
    2a80:	movw	r0, #0
    2a84:	strh	r0, [fp, #-10]
    2a88:	ldr	r0, [fp, #-4]
    2a8c:	movw	r1, #0
    2a90:	cmp	r0, r1
    2a94:	beq	2aa0 <reflection_Schema_objects+0x30>
    2a98:	b	2a9c <reflection_Schema_objects+0x2c>
    2a9c:	b	2ac0 <reflection_Schema_objects+0x50>
    2aa0:	movw	r0, #0
    2aa4:	movt	r0, #0
    2aa8:	movw	r1, #0
    2aac:	movt	r1, #0
    2ab0:	movw	r2, #237	; 0xed
    2ab4:	movw	r3, #0
    2ab8:	movt	r3, #0
    2abc:	bl	0 <__assert_fail>
    2ac0:	mov	r0, #0
    2ac4:	strh	r0, [sp, #12]
    2ac8:	ldr	r0, [fp, #-4]
    2acc:	str	r0, [sp, #4]
    2ad0:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    2ad4:	ldr	lr, [sp, #4]
    2ad8:	sub	r0, lr, r0
    2adc:	str	r0, [sp, #8]
    2ae0:	ldr	r0, [sp, #8]
    2ae4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2ae8:	ldrh	lr, [sp, #12]
    2aec:	add	lr, lr, #3
    2af0:	lsl	lr, lr, #1
    2af4:	cmp	r0, lr
    2af8:	bcc	2b14 <reflection_Schema_objects+0xa4>
    2afc:	ldr	r0, [sp, #8]
    2b00:	ldrh	r1, [sp, #12]
    2b04:	add	r0, r0, r1, lsl #1
    2b08:	add	r0, r0, #4
    2b0c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2b10:	strh	r0, [fp, #-10]
    2b14:	ldrsh	r0, [fp, #-10]
    2b18:	cmp	r0, #0
    2b1c:	beq	2b58 <reflection_Schema_objects+0xe8>
    2b20:	ldr	r0, [fp, #-4]
    2b24:	ldrh	r1, [fp, #-10]
    2b28:	add	r0, r0, r1
    2b2c:	str	r0, [fp, #-8]
    2b30:	ldr	r0, [fp, #-8]
    2b34:	add	r0, r0, #4
    2b38:	ldr	r1, [fp, #-8]
    2b3c:	str	r0, [sp]
    2b40:	mov	r0, r1
    2b44:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2b48:	ldr	r1, [sp]
    2b4c:	add	r0, r1, r0
    2b50:	mov	sp, fp
    2b54:	pop	{fp, pc}
    2b58:	movw	r0, #0
    2b5c:	movt	r0, #0
    2b60:	movw	r1, #0
    2b64:	movt	r1, #0
    2b68:	movw	r2, #237	; 0xed
    2b6c:	movw	r3, #0
    2b70:	movt	r3, #0
    2b74:	bl	0 <__assert_fail>

00002b78 <reflection_Object_vec_len>:
    2b78:	push	{fp, lr}
    2b7c:	mov	fp, sp
    2b80:	sub	sp, sp, #8
    2b84:	str	r0, [sp, #4]
    2b88:	ldr	r0, [sp, #4]
    2b8c:	movw	r1, #0
    2b90:	cmp	r0, r1
    2b94:	beq	2bb0 <reflection_Object_vec_len+0x38>
    2b98:	ldr	r0, [sp, #4]
    2b9c:	mvn	r1, #3
    2ba0:	add	r0, r0, r1
    2ba4:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2ba8:	str	r0, [sp]
    2bac:	b	2bbc <reflection_Object_vec_len+0x44>
    2bb0:	movw	r0, #0
    2bb4:	str	r0, [sp]
    2bb8:	b	2bbc <reflection_Object_vec_len+0x44>
    2bbc:	ldr	r0, [sp]
    2bc0:	mov	sp, fp
    2bc4:	pop	{fp, pc}

00002bc8 <reflection_Object_vec_at>:
    2bc8:	push	{fp, lr}
    2bcc:	mov	fp, sp
    2bd0:	sub	sp, sp, #16
    2bd4:	str	r0, [fp, #-4]
    2bd8:	str	r1, [sp, #8]
    2bdc:	ldr	r0, [fp, #-4]
    2be0:	ldr	r1, [sp, #8]
    2be4:	add	r0, r0, r1, lsl #2
    2be8:	str	r0, [sp, #4]
    2bec:	ldr	r0, [fp, #-4]
    2bf0:	bl	3880 <flatbuffers_vec_len>
    2bf4:	ldr	r1, [sp, #8]
    2bf8:	cmp	r0, r1
    2bfc:	bls	2c08 <reflection_Object_vec_at+0x40>
    2c00:	b	2c04 <reflection_Object_vec_at+0x3c>
    2c04:	b	2c28 <reflection_Object_vec_at+0x60>
    2c08:	movw	r0, #0
    2c0c:	movt	r0, #0
    2c10:	movw	r1, #0
    2c14:	movt	r1, #0
    2c18:	movw	r2, #215	; 0xd7
    2c1c:	movw	r3, #0
    2c20:	movt	r3, #0
    2c24:	bl	0 <__assert_fail>
    2c28:	ldr	r0, [sp, #4]
    2c2c:	ldr	r1, [sp, #4]
    2c30:	str	r0, [sp]
    2c34:	mov	r0, r1
    2c38:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2c3c:	ldr	r1, [sp]
    2c40:	add	r0, r1, r0
    2c44:	mov	sp, fp
    2c48:	pop	{fp, pc}

00002c4c <reflection_Schema_enums>:
    2c4c:	push	{fp, lr}
    2c50:	mov	fp, sp
    2c54:	sub	sp, sp, #24
    2c58:	str	r0, [fp, #-4]
    2c5c:	movw	r0, #0
    2c60:	strh	r0, [fp, #-10]
    2c64:	ldr	r0, [fp, #-4]
    2c68:	movw	r1, #0
    2c6c:	cmp	r0, r1
    2c70:	beq	2c7c <reflection_Schema_enums+0x30>
    2c74:	b	2c78 <reflection_Schema_enums+0x2c>
    2c78:	b	2c9c <reflection_Schema_enums+0x50>
    2c7c:	movw	r0, #0
    2c80:	movt	r0, #0
    2c84:	movw	r1, #0
    2c88:	movt	r1, #0
    2c8c:	movw	r2, #238	; 0xee
    2c90:	movw	r3, #0
    2c94:	movt	r3, #0
    2c98:	bl	0 <__assert_fail>
    2c9c:	mov	r0, #1
    2ca0:	strh	r0, [sp, #12]
    2ca4:	ldr	r0, [fp, #-4]
    2ca8:	str	r0, [sp, #4]
    2cac:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    2cb0:	ldr	lr, [sp, #4]
    2cb4:	sub	r0, lr, r0
    2cb8:	str	r0, [sp, #8]
    2cbc:	ldr	r0, [sp, #8]
    2cc0:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2cc4:	ldrh	lr, [sp, #12]
    2cc8:	add	lr, lr, #3
    2ccc:	lsl	lr, lr, #1
    2cd0:	cmp	r0, lr
    2cd4:	bcc	2cf0 <reflection_Schema_enums+0xa4>
    2cd8:	ldr	r0, [sp, #8]
    2cdc:	ldrh	r1, [sp, #12]
    2ce0:	add	r0, r0, r1, lsl #1
    2ce4:	add	r0, r0, #4
    2ce8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2cec:	strh	r0, [fp, #-10]
    2cf0:	ldrsh	r0, [fp, #-10]
    2cf4:	cmp	r0, #0
    2cf8:	beq	2d34 <reflection_Schema_enums+0xe8>
    2cfc:	ldr	r0, [fp, #-4]
    2d00:	ldrh	r1, [fp, #-10]
    2d04:	add	r0, r0, r1
    2d08:	str	r0, [fp, #-8]
    2d0c:	ldr	r0, [fp, #-8]
    2d10:	add	r0, r0, #4
    2d14:	ldr	r1, [fp, #-8]
    2d18:	str	r0, [sp]
    2d1c:	mov	r0, r1
    2d20:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2d24:	ldr	r1, [sp]
    2d28:	add	r0, r1, r0
    2d2c:	mov	sp, fp
    2d30:	pop	{fp, pc}
    2d34:	movw	r0, #0
    2d38:	movt	r0, #0
    2d3c:	movw	r1, #0
    2d40:	movt	r1, #0
    2d44:	movw	r2, #238	; 0xee
    2d48:	movw	r3, #0
    2d4c:	movt	r3, #0
    2d50:	bl	0 <__assert_fail>

00002d54 <reflection_Enum_vec_at>:
    2d54:	push	{fp, lr}
    2d58:	mov	fp, sp
    2d5c:	sub	sp, sp, #16
    2d60:	str	r0, [fp, #-4]
    2d64:	str	r1, [sp, #8]
    2d68:	ldr	r0, [fp, #-4]
    2d6c:	ldr	r1, [sp, #8]
    2d70:	add	r0, r0, r1, lsl #2
    2d74:	str	r0, [sp, #4]
    2d78:	ldr	r0, [fp, #-4]
    2d7c:	bl	3880 <flatbuffers_vec_len>
    2d80:	ldr	r1, [sp, #8]
    2d84:	cmp	r0, r1
    2d88:	bls	2d94 <reflection_Enum_vec_at+0x40>
    2d8c:	b	2d90 <reflection_Enum_vec_at+0x3c>
    2d90:	b	2db4 <reflection_Enum_vec_at+0x60>
    2d94:	movw	r0, #0
    2d98:	movt	r0, #0
    2d9c:	movw	r1, #0
    2da0:	movt	r1, #0
    2da4:	movw	r2, #174	; 0xae
    2da8:	movw	r3, #0
    2dac:	movt	r3, #0
    2db0:	bl	0 <__assert_fail>
    2db4:	ldr	r0, [sp, #4]
    2db8:	ldr	r1, [sp, #4]
    2dbc:	str	r0, [sp]
    2dc0:	mov	r0, r1
    2dc4:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2dc8:	ldr	r1, [sp]
    2dcc:	add	r0, r1, r0
    2dd0:	mov	sp, fp
    2dd4:	pop	{fp, pc}

00002dd8 <reflection_Schema_file_ident_is_present>:
    2dd8:	push	{fp, lr}
    2ddc:	mov	fp, sp
    2de0:	sub	sp, sp, #16
    2de4:	str	r0, [fp, #-4]
    2de8:	movw	r0, #0
    2dec:	strh	r0, [fp, #-6]
    2df0:	ldr	r0, [fp, #-4]
    2df4:	movw	r1, #0
    2df8:	cmp	r0, r1
    2dfc:	beq	2e08 <reflection_Schema_file_ident_is_present+0x30>
    2e00:	b	2e04 <reflection_Schema_file_ident_is_present+0x2c>
    2e04:	b	2e28 <reflection_Schema_file_ident_is_present+0x50>
    2e08:	movw	r0, #0
    2e0c:	movt	r0, #0
    2e10:	movw	r1, #0
    2e14:	movt	r1, #0
    2e18:	movw	r2, #239	; 0xef
    2e1c:	movw	r3, #0
    2e20:	movt	r3, #0
    2e24:	bl	0 <__assert_fail>
    2e28:	mov	r0, #2
    2e2c:	strh	r0, [sp, #8]
    2e30:	ldr	r0, [fp, #-4]
    2e34:	str	r0, [sp]
    2e38:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    2e3c:	ldr	lr, [sp]
    2e40:	sub	r0, lr, r0
    2e44:	str	r0, [sp, #4]
    2e48:	ldr	r0, [sp, #4]
    2e4c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2e50:	ldrh	lr, [sp, #8]
    2e54:	add	lr, lr, #3
    2e58:	lsl	lr, lr, #1
    2e5c:	cmp	r0, lr
    2e60:	bcc	2e7c <reflection_Schema_file_ident_is_present+0xa4>
    2e64:	ldr	r0, [sp, #4]
    2e68:	ldrh	r1, [sp, #8]
    2e6c:	add	r0, r0, r1, lsl #1
    2e70:	add	r0, r0, #4
    2e74:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2e78:	strh	r0, [fp, #-6]
    2e7c:	ldrh	r0, [fp, #-6]
    2e80:	cmp	r0, #0
    2e84:	movw	r0, #0
    2e88:	movne	r0, #1
    2e8c:	and	r0, r0, #1
    2e90:	mov	sp, fp
    2e94:	pop	{fp, pc}

00002e98 <reflection_Schema_file_ident>:
    2e98:	push	{fp, lr}
    2e9c:	mov	fp, sp
    2ea0:	sub	sp, sp, #32
    2ea4:	str	r0, [fp, #-8]
    2ea8:	movw	r0, #0
    2eac:	strh	r0, [fp, #-14]
    2eb0:	ldr	r0, [fp, #-8]
    2eb4:	movw	r1, #0
    2eb8:	cmp	r0, r1
    2ebc:	beq	2ec8 <reflection_Schema_file_ident+0x30>
    2ec0:	b	2ec4 <reflection_Schema_file_ident+0x2c>
    2ec4:	b	2ee8 <reflection_Schema_file_ident+0x50>
    2ec8:	movw	r0, #0
    2ecc:	movt	r0, #0
    2ed0:	movw	r1, #0
    2ed4:	movt	r1, #0
    2ed8:	movw	r2, #239	; 0xef
    2edc:	movw	r3, #0
    2ee0:	movt	r3, #0
    2ee4:	bl	0 <__assert_fail>
    2ee8:	mov	r0, #2
    2eec:	strh	r0, [sp, #16]
    2ef0:	ldr	r0, [fp, #-8]
    2ef4:	str	r0, [sp, #8]
    2ef8:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    2efc:	ldr	lr, [sp, #8]
    2f00:	sub	r0, lr, r0
    2f04:	str	r0, [sp, #12]
    2f08:	ldr	r0, [sp, #12]
    2f0c:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2f10:	ldrh	lr, [sp, #16]
    2f14:	add	lr, lr, #3
    2f18:	lsl	lr, lr, #1
    2f1c:	cmp	r0, lr
    2f20:	bcc	2f3c <reflection_Schema_file_ident+0xa4>
    2f24:	ldr	r0, [sp, #12]
    2f28:	ldrh	r1, [sp, #16]
    2f2c:	add	r0, r0, r1, lsl #1
    2f30:	add	r0, r0, #4
    2f34:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    2f38:	strh	r0, [fp, #-14]
    2f3c:	ldrsh	r0, [fp, #-14]
    2f40:	cmp	r0, #0
    2f44:	beq	2f80 <reflection_Schema_file_ident+0xe8>
    2f48:	ldr	r0, [fp, #-8]
    2f4c:	ldrh	r1, [fp, #-14]
    2f50:	add	r0, r0, r1
    2f54:	str	r0, [fp, #-12]
    2f58:	ldr	r0, [fp, #-12]
    2f5c:	add	r0, r0, #4
    2f60:	ldr	r1, [fp, #-12]
    2f64:	str	r0, [sp, #4]
    2f68:	mov	r0, r1
    2f6c:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    2f70:	ldr	r1, [sp, #4]
    2f74:	add	r0, r1, r0
    2f78:	str	r0, [fp, #-4]
    2f7c:	b	2f88 <reflection_Schema_file_ident+0xf0>
    2f80:	movw	r0, #0
    2f84:	str	r0, [fp, #-4]
    2f88:	ldr	r0, [fp, #-4]
    2f8c:	mov	sp, fp
    2f90:	pop	{fp, pc}

00002f94 <reflection_Schema_file_ext_is_present>:
    2f94:	push	{fp, lr}
    2f98:	mov	fp, sp
    2f9c:	sub	sp, sp, #16
    2fa0:	str	r0, [fp, #-4]
    2fa4:	movw	r0, #0
    2fa8:	strh	r0, [fp, #-6]
    2fac:	ldr	r0, [fp, #-4]
    2fb0:	movw	r1, #0
    2fb4:	cmp	r0, r1
    2fb8:	beq	2fc4 <reflection_Schema_file_ext_is_present+0x30>
    2fbc:	b	2fc0 <reflection_Schema_file_ext_is_present+0x2c>
    2fc0:	b	2fe4 <reflection_Schema_file_ext_is_present+0x50>
    2fc4:	movw	r0, #0
    2fc8:	movt	r0, #0
    2fcc:	movw	r1, #0
    2fd0:	movt	r1, #0
    2fd4:	movw	r2, #240	; 0xf0
    2fd8:	movw	r3, #0
    2fdc:	movt	r3, #0
    2fe0:	bl	0 <__assert_fail>
    2fe4:	mov	r0, #3
    2fe8:	strh	r0, [sp, #8]
    2fec:	ldr	r0, [fp, #-4]
    2ff0:	str	r0, [sp]
    2ff4:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    2ff8:	ldr	lr, [sp]
    2ffc:	sub	r0, lr, r0
    3000:	str	r0, [sp, #4]
    3004:	ldr	r0, [sp, #4]
    3008:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    300c:	ldrh	lr, [sp, #8]
    3010:	add	lr, lr, #3
    3014:	lsl	lr, lr, #1
    3018:	cmp	r0, lr
    301c:	bcc	3038 <reflection_Schema_file_ext_is_present+0xa4>
    3020:	ldr	r0, [sp, #4]
    3024:	ldrh	r1, [sp, #8]
    3028:	add	r0, r0, r1, lsl #1
    302c:	add	r0, r0, #4
    3030:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    3034:	strh	r0, [fp, #-6]
    3038:	ldrh	r0, [fp, #-6]
    303c:	cmp	r0, #0
    3040:	movw	r0, #0
    3044:	movne	r0, #1
    3048:	and	r0, r0, #1
    304c:	mov	sp, fp
    3050:	pop	{fp, pc}

00003054 <reflection_Schema_file_ext>:
    3054:	push	{fp, lr}
    3058:	mov	fp, sp
    305c:	sub	sp, sp, #32
    3060:	str	r0, [fp, #-8]
    3064:	movw	r0, #0
    3068:	strh	r0, [fp, #-14]
    306c:	ldr	r0, [fp, #-8]
    3070:	movw	r1, #0
    3074:	cmp	r0, r1
    3078:	beq	3084 <reflection_Schema_file_ext+0x30>
    307c:	b	3080 <reflection_Schema_file_ext+0x2c>
    3080:	b	30a4 <reflection_Schema_file_ext+0x50>
    3084:	movw	r0, #0
    3088:	movt	r0, #0
    308c:	movw	r1, #0
    3090:	movt	r1, #0
    3094:	movw	r2, #240	; 0xf0
    3098:	movw	r3, #0
    309c:	movt	r3, #0
    30a0:	bl	0 <__assert_fail>
    30a4:	mov	r0, #3
    30a8:	strh	r0, [sp, #16]
    30ac:	ldr	r0, [fp, #-8]
    30b0:	str	r0, [sp, #8]
    30b4:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    30b8:	ldr	lr, [sp, #8]
    30bc:	sub	r0, lr, r0
    30c0:	str	r0, [sp, #12]
    30c4:	ldr	r0, [sp, #12]
    30c8:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    30cc:	ldrh	lr, [sp, #16]
    30d0:	add	lr, lr, #3
    30d4:	lsl	lr, lr, #1
    30d8:	cmp	r0, lr
    30dc:	bcc	30f8 <reflection_Schema_file_ext+0xa4>
    30e0:	ldr	r0, [sp, #12]
    30e4:	ldrh	r1, [sp, #16]
    30e8:	add	r0, r0, r1, lsl #1
    30ec:	add	r0, r0, #4
    30f0:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    30f4:	strh	r0, [fp, #-14]
    30f8:	ldrsh	r0, [fp, #-14]
    30fc:	cmp	r0, #0
    3100:	beq	313c <reflection_Schema_file_ext+0xe8>
    3104:	ldr	r0, [fp, #-8]
    3108:	ldrh	r1, [fp, #-14]
    310c:	add	r0, r0, r1
    3110:	str	r0, [fp, #-12]
    3114:	ldr	r0, [fp, #-12]
    3118:	add	r0, r0, #4
    311c:	ldr	r1, [fp, #-12]
    3120:	str	r0, [sp, #4]
    3124:	mov	r0, r1
    3128:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    312c:	ldr	r1, [sp, #4]
    3130:	add	r0, r1, r0
    3134:	str	r0, [fp, #-4]
    3138:	b	3144 <reflection_Schema_file_ext+0xf0>
    313c:	movw	r0, #0
    3140:	str	r0, [fp, #-4]
    3144:	ldr	r0, [fp, #-4]
    3148:	mov	sp, fp
    314c:	pop	{fp, pc}

00003150 <reflection_Schema_root_table_is_present>:
    3150:	push	{fp, lr}
    3154:	mov	fp, sp
    3158:	sub	sp, sp, #16
    315c:	str	r0, [fp, #-4]
    3160:	movw	r0, #0
    3164:	strh	r0, [fp, #-6]
    3168:	ldr	r0, [fp, #-4]
    316c:	movw	r1, #0
    3170:	cmp	r0, r1
    3174:	beq	3180 <reflection_Schema_root_table_is_present+0x30>
    3178:	b	317c <reflection_Schema_root_table_is_present+0x2c>
    317c:	b	31a0 <reflection_Schema_root_table_is_present+0x50>
    3180:	movw	r0, #0
    3184:	movt	r0, #0
    3188:	movw	r1, #0
    318c:	movt	r1, #0
    3190:	movw	r2, #241	; 0xf1
    3194:	movw	r3, #0
    3198:	movt	r3, #0
    319c:	bl	0 <__assert_fail>
    31a0:	mov	r0, #4
    31a4:	strh	r0, [sp, #8]
    31a8:	ldr	r0, [fp, #-4]
    31ac:	str	r0, [sp]
    31b0:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    31b4:	ldr	lr, [sp]
    31b8:	sub	r0, lr, r0
    31bc:	str	r0, [sp, #4]
    31c0:	ldr	r0, [sp, #4]
    31c4:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    31c8:	ldrh	lr, [sp, #8]
    31cc:	add	lr, lr, #3
    31d0:	lsl	lr, lr, #1
    31d4:	cmp	r0, lr
    31d8:	bcc	31f4 <reflection_Schema_root_table_is_present+0xa4>
    31dc:	ldr	r0, [sp, #4]
    31e0:	ldrh	r1, [sp, #8]
    31e4:	add	r0, r0, r1, lsl #1
    31e8:	add	r0, r0, #4
    31ec:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    31f0:	strh	r0, [fp, #-6]
    31f4:	ldrh	r0, [fp, #-6]
    31f8:	cmp	r0, #0
    31fc:	movw	r0, #0
    3200:	movne	r0, #1
    3204:	and	r0, r0, #1
    3208:	mov	sp, fp
    320c:	pop	{fp, pc}

00003210 <reflection_Schema_root_table>:
    3210:	push	{fp, lr}
    3214:	mov	fp, sp
    3218:	sub	sp, sp, #32
    321c:	str	r0, [fp, #-8]
    3220:	movw	r0, #0
    3224:	strh	r0, [fp, #-14]
    3228:	ldr	r0, [fp, #-8]
    322c:	movw	r1, #0
    3230:	cmp	r0, r1
    3234:	beq	3240 <reflection_Schema_root_table+0x30>
    3238:	b	323c <reflection_Schema_root_table+0x2c>
    323c:	b	3260 <reflection_Schema_root_table+0x50>
    3240:	movw	r0, #0
    3244:	movt	r0, #0
    3248:	movw	r1, #0
    324c:	movt	r1, #0
    3250:	movw	r2, #241	; 0xf1
    3254:	movw	r3, #0
    3258:	movt	r3, #0
    325c:	bl	0 <__assert_fail>
    3260:	mov	r0, #4
    3264:	strh	r0, [sp, #16]
    3268:	ldr	r0, [fp, #-8]
    326c:	str	r0, [sp, #8]
    3270:	bl	3760 <__flatbuffers_soffset_read_from_pe>
    3274:	ldr	lr, [sp, #8]
    3278:	sub	r0, lr, r0
    327c:	str	r0, [sp, #12]
    3280:	ldr	r0, [sp, #12]
    3284:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    3288:	ldrh	lr, [sp, #16]
    328c:	add	lr, lr, #3
    3290:	lsl	lr, lr, #1
    3294:	cmp	r0, lr
    3298:	bcc	32b4 <reflection_Schema_root_table+0xa4>
    329c:	ldr	r0, [sp, #12]
    32a0:	ldrh	r1, [sp, #16]
    32a4:	add	r0, r0, r1, lsl #1
    32a8:	add	r0, r0, #4
    32ac:	bl	3784 <__flatbuffers_voffset_read_from_pe>
    32b0:	strh	r0, [fp, #-14]
    32b4:	ldrsh	r0, [fp, #-14]
    32b8:	cmp	r0, #0
    32bc:	beq	32f4 <reflection_Schema_root_table+0xe4>
    32c0:	ldr	r0, [fp, #-8]
    32c4:	ldrh	r1, [fp, #-14]
    32c8:	add	r0, r0, r1
    32cc:	str	r0, [fp, #-12]
    32d0:	ldr	r0, [fp, #-12]
    32d4:	ldr	r1, [fp, #-12]
    32d8:	str	r0, [sp, #4]
    32dc:	mov	r0, r1
    32e0:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    32e4:	ldr	r1, [sp, #4]
    32e8:	add	r0, r1, r0
    32ec:	str	r0, [fp, #-4]
    32f0:	b	32fc <reflection_Schema_root_table+0xec>
    32f4:	movw	r0, #0
    32f8:	str	r0, [fp, #-4]
    32fc:	ldr	r0, [fp, #-4]
    3300:	mov	sp, fp
    3304:	pop	{fp, pc}

00003308 <load_and_dump_schema>:
    3308:	push	{fp, lr}
    330c:	mov	fp, sp
    3310:	sub	sp, sp, #40	; 0x28
    3314:	str	r0, [fp, #-4]
    3318:	mvn	r0, #0
    331c:	str	r0, [fp, #-16]
    3320:	ldr	r0, [fp, #-4]
    3324:	movw	r1, #10000	; 0x2710
    3328:	sub	r2, fp, #12
    332c:	bl	3458 <readfile>
    3330:	str	r0, [fp, #-8]
    3334:	ldr	r0, [fp, #-8]
    3338:	movw	r1, #0
    333c:	cmp	r0, r1
    3340:	bne	3368 <load_and_dump_schema+0x60>
    3344:	movw	r0, #0
    3348:	movt	r0, #0
    334c:	ldr	r0, [r0]
    3350:	ldr	r2, [fp, #-4]
    3354:	movw	r1, #0
    3358:	movt	r1, #0
    335c:	bl	0 <fprintf>
    3360:	str	r0, [sp, #16]
    3364:	b	3434 <load_and_dump_schema+0x12c>
    3368:	ldr	r0, [fp, #-12]
    336c:	cmp	r0, #12
    3370:	bcs	3398 <load_and_dump_schema+0x90>
    3374:	movw	r0, #0
    3378:	movt	r0, #0
    337c:	ldr	r0, [r0]
    3380:	ldr	r2, [fp, #-4]
    3384:	movw	r1, #0
    3388:	movt	r1, #0
    338c:	bl	0 <fprintf>
    3390:	str	r0, [sp, #12]
    3394:	b	3434 <load_and_dump_schema+0x12c>
    3398:	ldr	r0, [fp, #-8]
    339c:	bl	3644 <reflection_Schema_as_root>
    33a0:	str	r0, [sp, #20]
    33a4:	ldr	r0, [sp, #20]
    33a8:	movw	lr, #0
    33ac:	cmp	r0, lr
    33b0:	bne	33f4 <load_and_dump_schema+0xec>
    33b4:	ldr	r0, [fp, #-8]
    33b8:	add	r0, r0, #4
    33bc:	bl	3644 <reflection_Schema_as_root>
    33c0:	str	r0, [sp, #20]
    33c4:	ldr	r0, [sp, #20]
    33c8:	movw	lr, #0
    33cc:	cmp	r0, lr
    33d0:	beq	33f0 <load_and_dump_schema+0xe8>
    33d4:	movw	r0, #0
    33d8:	movt	r0, #0
    33dc:	ldr	r0, [r0]
    33e0:	movw	r1, #0
    33e4:	movt	r1, #0
    33e8:	bl	0 <fprintf>
    33ec:	str	r0, [sp, #8]
    33f0:	b	33f4 <load_and_dump_schema+0xec>
    33f4:	ldr	r0, [sp, #20]
    33f8:	movw	r1, #0
    33fc:	cmp	r0, r1
    3400:	bne	3424 <load_and_dump_schema+0x11c>
    3404:	movw	r0, #0
    3408:	movt	r0, #0
    340c:	ldr	r0, [r0]
    3410:	movw	r1, #0
    3414:	movt	r1, #0
    3418:	bl	0 <fprintf>
    341c:	str	r0, [sp, #4]
    3420:	b	3434 <load_and_dump_schema+0x12c>
    3424:	ldr	r0, [sp, #20]
    3428:	bl	2874 <print_schema>
    342c:	movw	r0, #0
    3430:	str	r0, [fp, #-16]
    3434:	ldr	r0, [fp, #-8]
    3438:	movw	r1, #0
    343c:	cmp	r0, r1
    3440:	beq	344c <load_and_dump_schema+0x144>
    3444:	ldr	r0, [fp, #-8]
    3448:	bl	0 <free>
    344c:	ldr	r0, [fp, #-16]
    3450:	mov	sp, fp
    3454:	pop	{fp, pc}

00003458 <readfile>:
    3458:	push	{fp, lr}
    345c:	mov	fp, sp
    3460:	sub	sp, sp, #64	; 0x40
    3464:	str	r0, [fp, #-8]
    3468:	str	r1, [fp, #-12]
    346c:	str	r2, [fp, #-16]
    3470:	ldr	r0, [fp, #-16]
    3474:	movw	r1, #0
    3478:	cmp	r0, r1
    347c:	beq	348c <readfile+0x34>
    3480:	ldr	r0, [fp, #-16]
    3484:	str	r0, [sp, #20]
    3488:	b	3498 <readfile+0x40>
    348c:	add	r0, sp, #28
    3490:	str	r0, [sp, #20]
    3494:	b	3498 <readfile+0x40>
    3498:	ldr	r0, [sp, #20]
    349c:	str	r0, [fp, #-16]
    34a0:	ldr	r0, [fp, #-8]
    34a4:	movw	r1, #0
    34a8:	movt	r1, #0
    34ac:	bl	0 <fopen>
    34b0:	str	r0, [fp, #-20]	; 0xffffffec
    34b4:	movw	r0, #0
    34b8:	str	r0, [fp, #-24]	; 0xffffffe8
    34bc:	str	r0, [sp, #24]
    34c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    34c4:	cmp	r1, r0
    34c8:	bne	34d0 <readfile+0x78>
    34cc:	b	35f0 <readfile+0x198>
    34d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    34d4:	movw	r1, #0
    34d8:	movw	r2, #2
    34dc:	bl	0 <fseek>
    34e0:	ldr	r1, [fp, #-20]	; 0xffffffec
    34e4:	str	r0, [sp, #16]
    34e8:	mov	r0, r1
    34ec:	bl	0 <ftell>
    34f0:	str	r0, [fp, #-24]	; 0xffffffe8
    34f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    34f8:	ldr	r1, [fp, #-16]
    34fc:	str	r0, [r1]
    3500:	ldr	r0, [fp, #-12]
    3504:	cmp	r0, #0
    3508:	bls	3520 <readfile+0xc8>
    350c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3510:	ldr	r1, [fp, #-12]
    3514:	cmp	r0, r1
    3518:	bls	3520 <readfile+0xc8>
    351c:	b	35f0 <readfile+0x198>
    3520:	ldr	r0, [fp, #-20]	; 0xffffffec
    3524:	bl	0 <rewind>
    3528:	ldr	r0, [fp, #-24]	; 0xffffffe8
    352c:	cmp	r0, #0
    3530:	beq	3540 <readfile+0xe8>
    3534:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3538:	str	r0, [sp, #12]
    353c:	b	354c <readfile+0xf4>
    3540:	movw	r0, #1
    3544:	str	r0, [sp, #12]
    3548:	b	354c <readfile+0xf4>
    354c:	ldr	r0, [sp, #12]
    3550:	bl	0 <malloc>
    3554:	str	r0, [sp, #24]
    3558:	ldr	r0, [sp, #24]
    355c:	movw	lr, #0
    3560:	cmp	r0, lr
    3564:	bne	356c <readfile+0x114>
    3568:	b	35f0 <readfile+0x198>
    356c:	movw	r0, #0
    3570:	str	r0, [fp, #-28]	; 0xffffffe4
    3574:	ldr	r0, [sp, #24]
    3578:	ldr	r1, [fp, #-28]	; 0xffffffe4
    357c:	add	r0, r0, r1
    3580:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3584:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3588:	sub	r2, r1, r2
    358c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3590:	movw	r1, #1
    3594:	bl	0 <fread>
    3598:	str	r0, [sp, #32]
    359c:	cmp	r0, #0
    35a0:	beq	35b8 <readfile+0x160>
    35a4:	ldr	r0, [sp, #32]
    35a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    35ac:	add	r0, r1, r0
    35b0:	str	r0, [fp, #-28]	; 0xffffffe4
    35b4:	b	3574 <readfile+0x11c>
    35b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    35bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    35c0:	cmp	r0, r1
    35c4:	beq	35cc <readfile+0x174>
    35c8:	b	35f0 <readfile+0x198>
    35cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    35d0:	bl	0 <fclose>
    35d4:	ldr	lr, [fp, #-24]	; 0xffffffe8
    35d8:	ldr	r1, [fp, #-16]
    35dc:	str	lr, [r1]
    35e0:	ldr	r1, [sp, #24]
    35e4:	str	r1, [fp, #-4]
    35e8:	str	r0, [sp, #8]
    35ec:	b	3638 <readfile+0x1e0>
    35f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    35f4:	movw	r1, #0
    35f8:	cmp	r0, r1
    35fc:	beq	360c <readfile+0x1b4>
    3600:	ldr	r0, [fp, #-20]	; 0xffffffec
    3604:	bl	0 <fclose>
    3608:	str	r0, [sp, #4]
    360c:	ldr	r0, [sp, #24]
    3610:	movw	r1, #0
    3614:	cmp	r0, r1
    3618:	beq	3624 <readfile+0x1cc>
    361c:	ldr	r0, [sp, #24]
    3620:	bl	0 <free>
    3624:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3628:	ldr	r1, [fp, #-16]
    362c:	str	r0, [r1]
    3630:	movw	r0, #0
    3634:	str	r0, [fp, #-4]
    3638:	ldr	r0, [fp, #-4]
    363c:	mov	sp, fp
    3640:	pop	{fp, pc}

00003644 <reflection_Schema_as_root>:
    3644:	push	{fp, lr}
    3648:	mov	fp, sp
    364c:	sub	sp, sp, #16
    3650:	str	r0, [fp, #-4]
    3654:	movw	r0, #0
    3658:	movt	r0, #0
    365c:	str	r0, [sp, #8]
    3660:	ldr	r0, [fp, #-4]
    3664:	movw	r1, #0
    3668:	cmp	r0, r1
    366c:	beq	3684 <reflection_Schema_as_root+0x40>
    3670:	ldr	r0, [fp, #-4]
    3674:	ldr	r1, [sp, #8]
    3678:	bl	39d8 <flatbuffers_has_identifier>
    367c:	cmp	r0, #0
    3680:	bne	3690 <reflection_Schema_as_root+0x4c>
    3684:	movw	r0, #0
    3688:	str	r0, [sp, #4]
    368c:	b	36b0 <reflection_Schema_as_root+0x6c>
    3690:	ldr	r0, [fp, #-4]
    3694:	ldr	r1, [fp, #-4]
    3698:	str	r0, [sp]
    369c:	mov	r0, r1
    36a0:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    36a4:	ldr	r1, [sp]
    36a8:	add	r0, r1, r0
    36ac:	str	r0, [sp, #4]
    36b0:	ldr	r0, [sp, #4]
    36b4:	mov	sp, fp
    36b8:	pop	{fp, pc}

000036bc <main>:
    36bc:	push	{fp, lr}
    36c0:	mov	fp, sp
    36c4:	sub	sp, sp, #24
    36c8:	movw	r2, #0
    36cc:	str	r2, [fp, #-4]
    36d0:	str	r0, [fp, #-8]
    36d4:	str	r1, [sp, #12]
    36d8:	ldr	r0, [fp, #-8]
    36dc:	cmp	r0, #2
    36e0:	beq	374c <main+0x90>
    36e4:	movw	r0, #0
    36e8:	movt	r0, #0
    36ec:	ldr	r0, [r0]
    36f0:	movw	r1, #0
    36f4:	movt	r1, #0
    36f8:	bl	0 <fprintf>
    36fc:	movw	r1, #0
    3700:	movt	r1, #0
    3704:	ldr	r1, [r1]
    3708:	str	r0, [sp, #8]
    370c:	mov	r0, r1
    3710:	movw	r1, #0
    3714:	movt	r1, #0
    3718:	bl	0 <fprintf>
    371c:	movw	r1, #0
    3720:	movt	r1, #0
    3724:	ldr	r1, [r1]
    3728:	str	r0, [sp, #4]
    372c:	mov	r0, r1
    3730:	movw	r1, #0
    3734:	movt	r1, #0
    3738:	bl	0 <fprintf>
    373c:	mvn	r1, #0
    3740:	str	r0, [sp]
    3744:	mov	r0, r1
    3748:	bl	0 <exit>
    374c:	ldr	r0, [sp, #12]
    3750:	ldr	r0, [r0, #4]
    3754:	bl	3308 <load_and_dump_schema>
    3758:	mov	sp, fp
    375c:	pop	{fp, pc}

00003760 <__flatbuffers_soffset_read_from_pe>:
    3760:	push	{fp, lr}
    3764:	mov	fp, sp
    3768:	sub	sp, sp, #8
    376c:	str	r0, [sp, #4]
    3770:	ldr	r0, [sp, #4]
    3774:	ldr	r0, [r0]
    3778:	bl	37ac <__flatbuffers_soffset_cast_from_pe>
    377c:	mov	sp, fp
    3780:	pop	{fp, pc}

00003784 <__flatbuffers_voffset_read_from_pe>:
    3784:	push	{fp, lr}
    3788:	mov	fp, sp
    378c:	sub	sp, sp, #8
    3790:	str	r0, [sp, #4]
    3794:	ldr	r0, [sp, #4]
    3798:	ldrh	r0, [r0]
    379c:	bl	37c0 <__flatbuffers_voffset_cast_from_pe>
    37a0:	uxth	r0, r0
    37a4:	mov	sp, fp
    37a8:	pop	{fp, pc}

000037ac <__flatbuffers_soffset_cast_from_pe>:
    37ac:	sub	sp, sp, #4
    37b0:	str	r0, [sp]
    37b4:	ldr	r0, [sp]
    37b8:	add	sp, sp, #4
    37bc:	bx	lr

000037c0 <__flatbuffers_voffset_cast_from_pe>:
    37c0:	sub	sp, sp, #4
    37c4:	strh	r0, [sp, #2]
    37c8:	ldrh	r0, [sp, #2]
    37cc:	add	sp, sp, #4
    37d0:	bx	lr

000037d4 <reflection_BaseType_read_from_pe>:
    37d4:	push	{fp, lr}
    37d8:	mov	fp, sp
    37dc:	sub	sp, sp, #8
    37e0:	str	r0, [sp, #4]
    37e4:	ldr	r0, [sp, #4]
    37e8:	ldrsb	r0, [r0]
    37ec:	bl	37fc <reflection_BaseType_cast_from_pe>
    37f0:	sxtb	r0, r0
    37f4:	mov	sp, fp
    37f8:	pop	{fp, pc}

000037fc <reflection_BaseType_cast_from_pe>:
    37fc:	sub	sp, sp, #4
    3800:	strb	r0, [sp, #3]
    3804:	ldrsb	r0, [sp, #3]
    3808:	add	sp, sp, #4
    380c:	bx	lr

00003810 <flatbuffers_int32_read_from_pe>:
    3810:	push	{fp, lr}
    3814:	mov	fp, sp
    3818:	sub	sp, sp, #8
    381c:	str	r0, [sp, #4]
    3820:	ldr	r0, [sp, #4]
    3824:	ldr	r0, [r0]
    3828:	bl	3834 <flatbuffers_int32_cast_from_pe>
    382c:	mov	sp, fp
    3830:	pop	{fp, pc}

00003834 <flatbuffers_int32_cast_from_pe>:
    3834:	sub	sp, sp, #4
    3838:	str	r0, [sp]
    383c:	ldr	r0, [sp]
    3840:	add	sp, sp, #4
    3844:	bx	lr

00003848 <__flatbuffers_uoffset_read_from_pe>:
    3848:	push	{fp, lr}
    384c:	mov	fp, sp
    3850:	sub	sp, sp, #8
    3854:	str	r0, [sp, #4]
    3858:	ldr	r0, [sp, #4]
    385c:	ldr	r0, [r0]
    3860:	bl	386c <__flatbuffers_uoffset_cast_from_pe>
    3864:	mov	sp, fp
    3868:	pop	{fp, pc}

0000386c <__flatbuffers_uoffset_cast_from_pe>:
    386c:	sub	sp, sp, #4
    3870:	str	r0, [sp]
    3874:	ldr	r0, [sp]
    3878:	add	sp, sp, #4
    387c:	bx	lr

00003880 <flatbuffers_vec_len>:
    3880:	push	{fp, lr}
    3884:	mov	fp, sp
    3888:	sub	sp, sp, #8
    388c:	str	r0, [sp, #4]
    3890:	ldr	r0, [sp, #4]
    3894:	movw	r1, #0
    3898:	cmp	r0, r1
    389c:	beq	38b8 <flatbuffers_vec_len+0x38>
    38a0:	ldr	r0, [sp, #4]
    38a4:	mvn	r1, #3
    38a8:	add	r0, r0, r1
    38ac:	bl	3848 <__flatbuffers_uoffset_read_from_pe>
    38b0:	str	r0, [sp]
    38b4:	b	38c4 <flatbuffers_vec_len+0x44>
    38b8:	movw	r0, #0
    38bc:	str	r0, [sp]
    38c0:	b	38c4 <flatbuffers_vec_len+0x44>
    38c4:	ldr	r0, [sp]
    38c8:	mov	sp, fp
    38cc:	pop	{fp, pc}

000038d0 <flatbuffers_uint16_read_from_pe>:
    38d0:	push	{fp, lr}
    38d4:	mov	fp, sp
    38d8:	sub	sp, sp, #8
    38dc:	str	r0, [sp, #4]
    38e0:	ldr	r0, [sp, #4]
    38e4:	ldrh	r0, [r0]
    38e8:	bl	38f8 <flatbuffers_uint16_cast_from_pe>
    38ec:	uxth	r0, r0
    38f0:	mov	sp, fp
    38f4:	pop	{fp, pc}

000038f8 <flatbuffers_uint16_cast_from_pe>:
    38f8:	sub	sp, sp, #4
    38fc:	strh	r0, [sp, #2]
    3900:	ldrh	r0, [sp, #2]
    3904:	add	sp, sp, #4
    3908:	bx	lr

0000390c <flatbuffers_int64_read_from_pe>:
    390c:	push	{fp, lr}
    3910:	mov	fp, sp
    3914:	sub	sp, sp, #8
    3918:	str	r0, [sp, #4]
    391c:	ldr	r0, [sp, #4]
    3920:	ldr	r1, [r0]
    3924:	ldr	r0, [r0, #4]
    3928:	str	r0, [sp]
    392c:	mov	r0, r1
    3930:	ldr	r1, [sp]
    3934:	bl	3940 <flatbuffers_int64_cast_from_pe>
    3938:	mov	sp, fp
    393c:	pop	{fp, pc}

00003940 <flatbuffers_int64_cast_from_pe>:
    3940:	sub	sp, sp, #8
    3944:	str	r0, [sp]
    3948:	str	r1, [sp, #4]
    394c:	ldr	r0, [sp]
    3950:	ldr	r1, [sp, #4]
    3954:	add	sp, sp, #8
    3958:	bx	lr

0000395c <flatbuffers_double_read_from_pe>:
    395c:	push	{fp, lr}
    3960:	mov	fp, sp
    3964:	sub	sp, sp, #8
    3968:	str	r0, [sp, #4]
    396c:	ldr	r0, [sp, #4]
    3970:	vldr	d0, [r0]
    3974:	bl	3980 <flatbuffers_double_cast_from_pe>
    3978:	mov	sp, fp
    397c:	pop	{fp, pc}

00003980 <flatbuffers_double_cast_from_pe>:
    3980:	sub	sp, sp, #16
    3984:	vstr	d0, [sp, #8]
    3988:	vldr	d0, [sp, #8]
    398c:	vstr	d0, [sp]
    3990:	vldr	d0, [sp]
    3994:	add	sp, sp, #16
    3998:	bx	lr

0000399c <flatbuffers_bool_read_from_pe>:
    399c:	push	{fp, lr}
    39a0:	mov	fp, sp
    39a4:	sub	sp, sp, #8
    39a8:	str	r0, [sp, #4]
    39ac:	ldr	r0, [sp, #4]
    39b0:	ldrb	r0, [r0]
    39b4:	bl	39c4 <flatbuffers_bool_cast_from_pe>
    39b8:	and	r0, r0, #255	; 0xff
    39bc:	mov	sp, fp
    39c0:	pop	{fp, pc}

000039c4 <flatbuffers_bool_cast_from_pe>:
    39c4:	sub	sp, sp, #4
    39c8:	strb	r0, [sp, #3]
    39cc:	ldrb	r0, [sp, #3]
    39d0:	add	sp, sp, #4
    39d4:	bx	lr

000039d8 <flatbuffers_has_identifier>:
    39d8:	push	{fp, lr}
    39dc:	mov	fp, sp
    39e0:	sub	sp, sp, #32
    39e4:	str	r0, [fp, #-8]
    39e8:	str	r1, [fp, #-12]
    39ec:	movw	r0, #0
    39f0:	str	r0, [sp, #12]
    39f4:	ldr	r1, [fp, #-12]
    39f8:	cmp	r1, r0
    39fc:	bne	3a0c <flatbuffers_has_identifier+0x34>
    3a00:	movw	r0, #1
    3a04:	str	r0, [fp, #-4]
    3a08:	b	3a78 <flatbuffers_has_identifier+0xa0>
    3a0c:	add	r0, sp, #12
    3a10:	ldr	r1, [fp, #-12]
    3a14:	movw	r2, #4
    3a18:	bl	0 <strncpy>
    3a1c:	ldr	r1, [sp, #12]
    3a20:	str	r0, [sp, #8]
    3a24:	mov	r0, r1
    3a28:	bl	3a84 <__flatbuffers_thash_cast_from_le>
    3a2c:	str	r0, [sp, #12]
    3a30:	ldr	r0, [fp, #-8]
    3a34:	add	r0, r0, #4
    3a38:	bl	3a98 <__flatbuffers_thash_read_from_pe>
    3a3c:	str	r0, [sp, #16]
    3a40:	ldr	r0, [sp, #12]
    3a44:	cmp	r0, #0
    3a48:	movw	r0, #1
    3a4c:	str	r0, [sp, #4]
    3a50:	beq	3a6c <flatbuffers_has_identifier+0x94>
    3a54:	ldr	r0, [sp, #16]
    3a58:	ldr	r1, [sp, #12]
    3a5c:	cmp	r0, r1
    3a60:	movw	r0, #0
    3a64:	moveq	r0, #1
    3a68:	str	r0, [sp, #4]
    3a6c:	ldr	r0, [sp, #4]
    3a70:	and	r0, r0, #1
    3a74:	str	r0, [fp, #-4]
    3a78:	ldr	r0, [fp, #-4]
    3a7c:	mov	sp, fp
    3a80:	pop	{fp, pc}

00003a84 <__flatbuffers_thash_cast_from_le>:
    3a84:	sub	sp, sp, #4
    3a88:	str	r0, [sp]
    3a8c:	ldr	r0, [sp]
    3a90:	add	sp, sp, #4
    3a94:	bx	lr

00003a98 <__flatbuffers_thash_read_from_pe>:
    3a98:	push	{fp, lr}
    3a9c:	mov	fp, sp
    3aa0:	sub	sp, sp, #8
    3aa4:	str	r0, [sp, #4]
    3aa8:	ldr	r0, [sp, #4]
    3aac:	ldr	r0, [r0]
    3ab0:	bl	3abc <__flatbuffers_thash_cast_from_pe>
    3ab4:	mov	sp, fp
    3ab8:	pop	{fp, pc}

00003abc <__flatbuffers_thash_cast_from_pe>:
    3abc:	sub	sp, sp, #4
    3ac0:	str	r0, [sp]
    3ac4:	ldr	r0, [sp]
    3ac8:	add	sp, sp, #4
    3acc:	bx	lr
