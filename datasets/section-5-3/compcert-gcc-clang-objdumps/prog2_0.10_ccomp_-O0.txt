
../repos/prog2/0.10:     file format elf32-littlearm


Disassembly of section .init:

0001030c <.init>:
   1030c:	push	{r3, lr}
   10310:	bl	10398 <abort@plt+0x3c>
   10314:	pop	{r3, pc}

Disassembly of section .plt:

00010318 <printf@plt-0x14>:
   10318:	push	{lr}		; (str lr, [sp, #-4]!)
   1031c:	ldr	lr, [pc, #4]	; 10328 <printf@plt-0x4>
   10320:	add	lr, pc, lr
   10324:	ldr	pc, [lr, #8]!
   10328:	ldrdeq	r0, [r1], -r8

0001032c <printf@plt>:
   1032c:	add	ip, pc, #0, 12
   10330:	add	ip, ip, #16, 20	; 0x10000
   10334:	ldr	pc, [ip, #3288]!	; 0xcd8

00010338 <__libc_start_main@plt>:
   10338:	add	ip, pc, #0, 12
   1033c:	add	ip, ip, #16, 20	; 0x10000
   10340:	ldr	pc, [ip, #3280]!	; 0xcd0

00010344 <scanf@plt>:
   10344:	add	ip, pc, #0, 12
   10348:	add	ip, ip, #16, 20	; 0x10000
   1034c:	ldr	pc, [ip, #3272]!	; 0xcc8

00010350 <__gmon_start__@plt>:
   10350:	add	ip, pc, #0, 12
   10354:	add	ip, ip, #16, 20	; 0x10000
   10358:	ldr	pc, [ip, #3264]!	; 0xcc0

0001035c <abort@plt>:
   1035c:	add	ip, pc, #0, 12
   10360:	add	ip, ip, #16, 20	; 0x10000
   10364:	ldr	pc, [ip, #3256]!	; 0xcb8

Disassembly of section .text:

00010368 <.text>:
   10368:	bleq	4c4ac <abort@plt+0x3c150>
   1036c:	cdpeq	0, 0, cr15, cr0, cr15, {2}
   10370:	strbtmi	fp, [sl], -r2, lsl #24
   10374:	strlt	fp, [r1], #-1028	; 0xfffffbfc
   10378:			; <UNDEFINED> instruction: 0xc010f8df
   1037c:	stcgt	8, cr15, [r4, #-308]	; 0xfffffecc
   10380:	blmi	122394 <abort@plt+0x112038>
   10384:	svc	0x00d8f7ff
   10388:	svc	0x00e8f7ff
   1038c:	andeq	r0, r1, r1, lsr r7
   10390:	andeq	r0, r1, r8, ror #12
   10394:	strdeq	r0, [r1], -r1
   10398:	ldr	r3, [pc, #20]	; 103b4 <abort@plt+0x58>
   1039c:	ldr	r2, [pc, #20]	; 103b8 <abort@plt+0x5c>
   103a0:	add	r3, pc, r3
   103a4:	ldr	r2, [r3, r2]
   103a8:	cmp	r2, #0
   103ac:	bxeq	lr
   103b0:	b	10350 <__gmon_start__@plt>
   103b4:	andeq	r0, r1, r8, asr ip
   103b8:	andeq	r0, r0, r0, lsr #32
   103bc:	eoreq	pc, ip, r1, asr #4
   103c0:	andeq	pc, r2, r0, asr #5
   103c4:	msreq	CPSR_fs, #268435460	; 0x10000004
   103c8:	movweq	pc, #8896	; 0x22c0	; <UNPREDICTABLE>
   103cc:	andle	r4, r5, r3, lsl #5
   103d0:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   103d4:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   103d8:	ldrmi	fp, [r8, -r3, lsl #2]
   103dc:	svclt	0x00004770
   103e0:	eoreq	pc, ip, r1, asr #4
   103e4:	andeq	pc, r2, r0, asr #5
   103e8:	msreq	R12_fiq, r1
   103ec:	smlabteq	r2, r0, r2, pc	; <UNPREDICTABLE>
   103f0:	svceq	0x00d91a0b
   103f4:			; <UNDEFINED> instruction: 0x01a3eb01
   103f8:	andle	r1, r5, r9, asr #32
   103fc:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10400:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   10404:	ldrmi	fp, [r8, -r3, lsl #2]
   10408:	svclt	0x00004770
   1040c:	vqrshl.s8	d27, d0, d1
   10410:	vaddhn.i16	d16, q0, q14
   10414:	stmdavc	r3!, {r1, sl}
   10418:			; <UNDEFINED> instruction: 0xf7ffb91b
   1041c:	movwcs	pc, #8143	; 0x1fcf	; <UNPREDICTABLE>
   10420:	ldclt	0, cr7, [r0, #-140]	; 0xffffff74
   10424:	svclt	0x0000e7dc
   10428:	mov	ip, sp
   1042c:	sub	sp, sp, #24
   10430:	str	ip, [sp, #4]
   10434:	str	lr, [sp, #8]
   10438:	str	r4, [sp, #16]
   1043c:	mov	r1, r0
   10440:	ldr	r0, [pc, #52]	; 1047c <abort@plt+0x120>
   10444:	add	r2, r1, #30
   10448:	add	r3, r1, #60	; 0x3c
   1044c:	add	r4, r1, #64	; 0x40
   10450:	str	r4, [sp]
   10454:	bl	10344 <scanf@plt>
   10458:	cmp	r0, #4
   1045c:	beq	10468 <abort@plt+0x10c>
   10460:	mov	r0, #0
   10464:	b	1046c <abort@plt+0x110>
   10468:	mov	r0, #1
   1046c:	ldr	r4, [sp, #16]
   10470:	ldr	lr, [sp, #8]
   10474:	add	sp, sp, #24
   10478:	bx	lr
   1047c:	strdeq	r0, [r1], -fp
   10480:	mov	ip, sp
   10484:	sub	sp, sp, #16
   10488:	str	ip, [sp]
   1048c:	str	lr, [sp, #4]
   10490:	str	r4, [sp, #8]
   10494:	str	r5, [sp, #12]
   10498:	mov	r4, r0
   1049c:	mov	r5, #0
   104a0:	lsl	r2, r5, #6
   104a4:	add	r1, r2, r5, lsl #2
   104a8:	add	r0, r4, r1
   104ac:	bl	10428 <abort@plt+0xcc>
   104b0:	cmp	r0, #0
   104b4:	bne	104c0 <abort@plt+0x164>
   104b8:	mov	r0, #0
   104bc:	b	104cc <abort@plt+0x170>
   104c0:	cmp	r5, #100	; 0x64
   104c4:	movlt	r0, #1
   104c8:	movge	r0, #0
   104cc:	cmp	r0, #0
   104d0:	beq	104dc <abort@plt+0x180>
   104d4:	add	r5, r5, #1
   104d8:	b	104a0 <abort@plt+0x144>
   104dc:	mov	r0, r5
   104e0:	ldr	r4, [sp, #8]
   104e4:	ldr	r5, [sp, #12]
   104e8:	ldr	lr, [sp, #4]
   104ec:	add	sp, sp, #16
   104f0:	bx	lr
   104f4:	mov	ip, sp
   104f8:	sub	sp, sp, #32
   104fc:	str	ip, [sp, #4]
   10500:	str	lr, [sp, #8]
   10504:	str	r4, [sp, #16]
   10508:	str	r5, [sp, #20]
   1050c:	str	r6, [sp, #24]
   10510:	str	r7, [sp, #28]
   10514:	mov	r4, r1
   10518:	mov	r5, r0
   1051c:	mov	r6, #0
   10520:	cmp	r6, r4
   10524:	bge	10578 <abort@plt+0x21c>
   10528:	ldr	r0, [pc, #100]	; 10594 <abort@plt+0x238>
   1052c:	lsl	r1, r6, #6
   10530:	add	r1, r1, r6, lsl #2
   10534:	add	r1, r5, r1
   10538:	lsl	r2, r6, #6
   1053c:	add	r2, r2, r6, lsl #2
   10540:	add	r2, r5, r2
   10544:	add	r2, r2, #30
   10548:	lsl	ip, r6, #6
   1054c:	add	r3, ip, r6, lsl #2
   10550:	add	r3, r5, r3
   10554:	ldr	r3, [r3, #60]	; 0x3c
   10558:	lsl	ip, r6, #6
   1055c:	add	ip, ip, r6, lsl #2
   10560:	add	ip, r5, ip
   10564:	ldr	r7, [ip, #64]	; 0x40
   10568:	str	r7, [sp]
   1056c:	bl	1032c <printf@plt>
   10570:	add	r6, r6, #1
   10574:	b	10520 <abort@plt+0x1c4>
   10578:	ldr	r4, [sp, #16]
   1057c:	ldr	r5, [sp, #20]
   10580:	ldr	r6, [sp, #24]
   10584:	ldr	r7, [sp, #28]
   10588:	ldr	lr, [sp, #8]
   1058c:	add	sp, sp, #32
   10590:	bx	lr
   10594:	andeq	r0, r1, lr, ror #15
   10598:	mov	ip, sp
   1059c:	sub	sp, sp, #24
   105a0:	str	ip, [sp]
   105a4:	str	lr, [sp, #4]
   105a8:	str	r4, [sp, #8]
   105ac:	str	r5, [sp, #12]
   105b0:	str	r6, [sp, #16]
   105b4:	str	r7, [sp, #20]
   105b8:	mov	r5, r2
   105bc:	mov	r6, #0
   105c0:	mov	r7, #0
   105c4:	mov	r4, #0
   105c8:	cmp	r4, r1
   105cc:	bge	10638 <abort@plt+0x2dc>
   105d0:	lsl	ip, r4, #6
   105d4:	add	r2, ip, r4, lsl #2
   105d8:	add	r2, r0, r2
   105dc:	ldr	r2, [r2, #60]	; 0x3c
   105e0:	add	r6, r6, r2
   105e4:	lsl	r3, r4, #6
   105e8:	add	r3, r3, r4, lsl #2
   105ec:	add	r3, r0, r3
   105f0:	ldr	ip, [r3, #60]	; 0x3c
   105f4:	cmp	ip, r7
   105f8:	ble	10630 <abort@plt+0x2d4>
   105fc:	lsl	r2, r4, #6
   10600:	add	r2, r2, r4, lsl #2
   10604:	add	r2, r0, r2
   10608:	ldr	r7, [r2, #60]	; 0x3c
   1060c:	lsl	ip, r4, #6
   10610:	add	r2, ip, r4, lsl #2
   10614:	add	r2, r0, r2
   10618:	mov	r3, r5
   1061c:	mov	lr, #17
   10620:	ldr	ip, [r2], #4
   10624:	subs	lr, lr, #1
   10628:	str	ip, [r3], #4
   1062c:	bne	10620 <abort@plt+0x2c4>
   10630:	add	r4, r4, #1
   10634:	b	105c8 <abort@plt+0x26c>
   10638:	vmov	s4, r6
   1063c:	vcvt.f32.s32	s4, s4
   10640:	vmov	s2, r4
   10644:	vcvt.f32.s32	s2, s2
   10648:	vdiv.f32	s0, s4, s2
   1064c:	ldr	r4, [sp, #8]
   10650:	ldr	r5, [sp, #12]
   10654:	ldr	r6, [sp, #16]
   10658:	ldr	r7, [sp, #20]
   1065c:	ldr	lr, [sp, #4]
   10660:	add	sp, sp, #24
   10664:	bx	lr
   10668:	mov	ip, sp
   1066c:	sub	sp, sp, #744	; 0x2e8
   10670:	sub	sp, sp, #6144	; 0x1800
   10674:	str	ip, [sp]
   10678:	str	lr, [sp, #4]
   1067c:	str	r4, [sp, #8]
   10680:	add	r0, sp, #88	; 0x58
   10684:	bl	10480 <abort@plt+0x124>
   10688:	mov	r4, r0
   1068c:	add	r0, sp, #88	; 0x58
   10690:	mov	r1, r4
   10694:	bl	104f4 <abort@plt+0x198>
   10698:	ldr	r0, [pc, #72]	; 106e8 <abort@plt+0x38c>
   1069c:	mov	r1, r4
   106a0:	bl	1032c <printf@plt>
   106a4:	add	r0, sp, #88	; 0x58
   106a8:	add	r2, sp, #16
   106ac:	mov	r1, r4
   106b0:	bl	10598 <abort@plt+0x23c>
   106b4:	ldr	r0, [pc, #48]	; 106ec <abort@plt+0x390>
   106b8:	vcvt.f64.f32	d2, s0
   106bc:	vmov	r2, r3, d2
   106c0:	bl	1032c <printf@plt>
   106c4:	ldr	r0, [pc, #24]	; 106e4 <abort@plt+0x388>
   106c8:	add	r1, sp, #16
   106cc:	bl	1032c <printf@plt>
   106d0:	mov	r0, #0
   106d4:	ldr	r4, [sp, #8]
   106d8:	ldr	lr, [sp, #4]
   106dc:	ldr	sp, [sp]
   106e0:	bx	lr
   106e4:	andeq	r0, r1, r7, lsl #16
   106e8:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   106ec:	andeq	r0, r1, lr, lsl r8
   106f0:	mvnsmi	lr, #737280	; 0xb4000
   106f4:	cfmadd32mi	mvax0, mvfx4, mvfx12, mvfx7
   106f8:	strmi	r4, [r8], ip, lsl #26
   106fc:			; <UNDEFINED> instruction: 0x4691447e
   10700:			; <UNDEFINED> instruction: 0xf7ff447d
   10704:	blne	1dcbf1c <abort@plt+0x1dbbbc0>
   10708:	strhle	r1, [sl], -r6
   1070c:	strcs	r3, [r0], #-3332	; 0xfffff2fc
   10710:	svccc	0x0004f855
   10714:	strbmi	r4, [r1], -sl, asr #12
   10718:	strcc	r4, [r1], #-1592	; 0xfffff9c8
   1071c:	adcmi	r4, r6, #152, 14	; 0x2600000
   10720:	pop	{r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
   10724:	svclt	0x000083f8
   10728:	andeq	r0, r1, r4, lsl r8
   1072c:	andeq	r0, r1, ip, lsl #16
   10730:	svclt	0x00004770

Disassembly of section .fini:

00010734 <.fini>:
   10734:	push	{r3, lr}
   10738:	pop	{r3, pc}
