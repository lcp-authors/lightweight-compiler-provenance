
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <yy_fatal_error.isra.0>:
       0:	ldr	r3, [pc, #24]	; 20 <yy_fatal_error.isra.0+0x20>
       4:	mov	r2, r0
       8:	push	{r4, lr}
       c:	ldr	r1, [pc, #16]	; 24 <yy_fatal_error.isra.0+0x24>
      10:	ldr	r0, [r3]
      14:	bl	0 <fprintf>
      18:	mov	r0, #2
      1c:	bl	0 <exit>
	...

00000028 <coda_expression_ensure_buffer_stack>:
      28:	push	{r4, r5, r6, lr}
      2c:	mov	r4, r0
      30:	ldr	r6, [r0, #20]
      34:	cmp	r6, #0
      38:	beq	88 <coda_expression_ensure_buffer_stack+0x60>
      3c:	ldr	r3, [r0, #16]
      40:	ldr	r1, [r0, #12]
      44:	sub	r2, r3, #1
      48:	cmp	r1, r2
      4c:	popcc	{r4, r5, r6, pc}
      50:	add	r5, r3, #8
      54:	mov	r0, r6
      58:	lsl	r1, r5, #2
      5c:	bl	0 <realloc>
      60:	cmp	r0, #0
      64:	str	r0, [r4, #20]
      68:	beq	b0 <coda_expression_ensure_buffer_stack+0x88>
      6c:	ldr	r3, [r4, #16]
      70:	mov	r2, #32
      74:	mov	r1, #0
      78:	add	r0, r0, r3, lsl #2
      7c:	bl	0 <memset>
      80:	str	r5, [r4, #16]
      84:	pop	{r4, r5, r6, pc}
      88:	mov	r1, #1
      8c:	mov	r0, #4
      90:	bl	0 <calloc>
      94:	cmp	r0, #0
      98:	str	r0, [r4, #20]
      9c:	beq	b0 <coda_expression_ensure_buffer_stack+0x88>
      a0:	mov	r3, #1
      a4:	str	r6, [r4, #12]
      a8:	str	r3, [r4, #16]
      ac:	pop	{r4, r5, r6, pc}
      b0:	ldr	r0, [pc]	; b8 <coda_expression_ensure_buffer_stack+0x90>
      b4:	bl	0 <yy_fatal_error.isra.0>
      b8:	.word	0x00000004

000000bc <coda_expression__switch_to_buffer>:
      bc:	push	{r4, r5, r6, lr}
      c0:	mov	r4, r1
      c4:	mov	r5, r0
      c8:	mov	r0, r1
      cc:	bl	28 <coda_expression_ensure_buffer_stack>
      d0:	ldr	r3, [r4, #20]
      d4:	cmp	r3, #0
      d8:	beq	158 <coda_expression__switch_to_buffer+0x9c>
      dc:	ldr	r2, [r4, #12]
      e0:	ldr	r1, [r3, r2, lsl #2]
      e4:	add	r3, r3, r2, lsl #2
      e8:	cmp	r1, r5
      ec:	popeq	{r4, r5, r6, pc}
      f0:	cmp	r1, #0
      f4:	beq	124 <coda_expression__switch_to_buffer+0x68>
      f8:	ldr	r3, [r4, #36]	; 0x24
      fc:	ldrb	r2, [r4, #24]
     100:	strb	r2, [r3]
     104:	ldr	r1, [r4, #12]
     108:	ldr	r2, [r4, #20]
     10c:	ldr	r0, [r4, #36]	; 0x24
     110:	add	r3, r2, r1, lsl #2
     114:	ldr	r2, [r2, r1, lsl #2]
     118:	ldr	r1, [r4, #28]
     11c:	str	r0, [r2, #8]
     120:	str	r1, [r2, #16]
     124:	ldr	r2, [r5, #8]
     128:	ldr	r0, [r5, #16]
     12c:	ldr	r1, [r5]
     130:	str	r5, [r3]
     134:	str	r2, [r4, #36]	; 0x24
     138:	str	r2, [r4, #80]	; 0x50
     13c:	str	r0, [r4, #28]
     140:	str	r1, [r4, #4]
     144:	ldrb	r3, [r2]
     148:	mov	r2, #1
     14c:	str	r2, [r4, #48]	; 0x30
     150:	strb	r3, [r4, #24]
     154:	pop	{r4, r5, r6, pc}
     158:	cmp	r5, #0
     15c:	popeq	{r4, r5, r6, pc}
     160:	ldr	r3, [r4, #12]
     164:	lsl	r3, r3, #2
     168:	b	124 <coda_expression__switch_to_buffer+0x68>

0000016c <coda_expression__delete_buffer>:
     16c:	push	{r4, lr}
     170:	subs	r4, r0, #0
     174:	popeq	{r4, pc}
     178:	ldr	r3, [r1, #20]
     17c:	cmp	r3, #0
     180:	beq	198 <coda_expression__delete_buffer+0x2c>
     184:	ldr	r2, [r1, #12]
     188:	ldr	r1, [r3, r2, lsl #2]
     18c:	cmp	r4, r1
     190:	moveq	r1, #0
     194:	streq	r1, [r3, r2, lsl #2]
     198:	ldr	r3, [r4, #20]
     19c:	cmp	r3, #0
     1a0:	bne	1b0 <coda_expression__delete_buffer+0x44>
     1a4:	mov	r0, r4
     1a8:	pop	{r4, lr}
     1ac:	b	0 <free>
     1b0:	ldr	r0, [r4, #4]
     1b4:	bl	0 <free>
     1b8:	mov	r0, r4
     1bc:	pop	{r4, lr}
     1c0:	b	0 <free>

000001c4 <coda_expression__flush_buffer>:
     1c4:	cmp	r0, #0
     1c8:	bxeq	lr
     1cc:	ldr	r2, [r0, #4]
     1d0:	mov	r3, #0
     1d4:	push	{lr}		; (str lr, [sp, #-4]!)
     1d8:	mov	lr, #1
     1dc:	str	r3, [r0, #16]
     1e0:	strb	r3, [r2]
     1e4:	ldr	r2, [r0, #4]
     1e8:	strb	r3, [r2, #1]
     1ec:	ldr	r2, [r1, #20]
     1f0:	ldr	ip, [r0, #4]
     1f4:	cmp	r2, r3
     1f8:	str	r3, [r0, #44]	; 0x2c
     1fc:	str	ip, [r0, #8]
     200:	str	lr, [r0, #28]
     204:	popeq	{pc}		; (ldreq pc, [sp], #4)
     208:	ldr	r3, [r1, #12]
     20c:	ldr	r3, [r2, r3, lsl #2]
     210:	cmp	r0, r3
     214:	popne	{pc}		; (ldrne pc, [sp], #4)
     218:	ldr	r3, [r0]
     21c:	ldr	r2, [r0, #16]
     220:	str	r3, [r1, #4]
     224:	str	r2, [r1, #28]
     228:	str	ip, [r1, #36]	; 0x24
     22c:	str	ip, [r1, #80]	; 0x50
     230:	ldrb	r3, [ip]
     234:	strb	r3, [r1, #24]
     238:	pop	{pc}		; (ldr pc, [sp], #4)

0000023c <coda_expression__init_buffer>:
     23c:	push	{r4, r5, r6, r7, r8, lr}
     240:	mov	r5, r2
     244:	mov	r4, r0
     248:	mov	r8, r1
     24c:	bl	0 <__errno_location>
     250:	mov	r1, r5
     254:	mov	r6, r0
     258:	mov	r0, r4
     25c:	ldr	r7, [r6]
     260:	bl	1c4 <coda_expression__flush_buffer>
     264:	ldr	r3, [r5, #20]
     268:	mov	r2, #1
     26c:	cmp	r3, #0
     270:	str	r8, [r4]
     274:	str	r2, [r4, #40]	; 0x28
     278:	beq	28c <coda_expression__init_buffer+0x50>
     27c:	ldr	r2, [r5, #12]
     280:	ldr	r3, [r3, r2, lsl #2]
     284:	cmp	r4, r3
     288:	beq	29c <coda_expression__init_buffer+0x60>
     28c:	mov	r2, #1
     290:	mov	r3, #0
     294:	str	r2, [r4, #32]
     298:	str	r3, [r4, #36]	; 0x24
     29c:	mov	r3, #1
     2a0:	str	r3, [r4, #24]
     2a4:	str	r7, [r6]
     2a8:	pop	{r4, r5, r6, r7, r8, pc}

000002ac <coda_expression__create_buffer>:
     2ac:	push	{r4, r5, r6, r7, r8, lr}
     2b0:	mov	r6, r0
     2b4:	mov	r0, #48	; 0x30
     2b8:	mov	r5, r1
     2bc:	mov	r7, r2
     2c0:	bl	0 <malloc>
     2c4:	subs	r4, r0, #0
     2c8:	beq	304 <coda_expression__create_buffer+0x58>
     2cc:	str	r5, [r4, #12]
     2d0:	add	r0, r5, #2
     2d4:	bl	0 <malloc>
     2d8:	cmp	r0, #0
     2dc:	str	r0, [r4, #4]
     2e0:	beq	304 <coda_expression__create_buffer+0x58>
     2e4:	mov	r3, #1
     2e8:	mov	r0, r4
     2ec:	mov	r2, r7
     2f0:	mov	r1, r6
     2f4:	str	r3, [r4, #20]
     2f8:	bl	23c <coda_expression__init_buffer>
     2fc:	mov	r0, r4
     300:	pop	{r4, r5, r6, r7, r8, pc}
     304:	ldr	r0, [pc]	; 30c <coda_expression__create_buffer+0x60>
     308:	bl	0 <yy_fatal_error.isra.0>
     30c:	.word	0x00000038

00000310 <coda_expression_restart>:
     310:	ldr	r3, [r1, #20]
     314:	push	{r4, r5, r6, r7, r8, lr}
     318:	cmp	r3, #0
     31c:	mov	r4, r1
     320:	mov	r5, r0
     324:	beq	378 <coda_expression_restart+0x68>
     328:	ldr	r2, [r1, #12]
     32c:	ldr	r0, [r3, r2, lsl #2]
     330:	cmp	r0, #0
     334:	beq	378 <coda_expression_restart+0x68>
     338:	mov	r1, r5
     33c:	mov	r2, r4
     340:	bl	23c <coda_expression__init_buffer>
     344:	ldr	r3, [r4, #20]
     348:	ldr	r2, [r4, #12]
     34c:	ldr	r2, [r3, r2, lsl #2]
     350:	ldr	r3, [r2, #8]
     354:	ldr	r1, [r2, #16]
     358:	ldr	r2, [r2]
     35c:	str	r3, [r4, #36]	; 0x24
     360:	str	r1, [r4, #28]
     364:	str	r3, [r4, #80]	; 0x50
     368:	str	r2, [r4, #4]
     36c:	ldrb	r3, [r3]
     370:	strb	r3, [r4, #24]
     374:	pop	{r4, r5, r6, r7, r8, pc}
     378:	mov	r0, r4
     37c:	bl	28 <coda_expression_ensure_buffer_stack>
     380:	mov	r2, r4
     384:	mov	r1, #16384	; 0x4000
     388:	ldr	r0, [r4, #4]
     38c:	ldr	r7, [r4, #12]
     390:	ldr	r6, [r4, #20]
     394:	bl	2ac <coda_expression__create_buffer>
     398:	ldr	r3, [r4, #20]
     39c:	cmp	r3, #0
     3a0:	ldrne	r2, [r4, #12]
     3a4:	str	r0, [r6, r7, lsl #2]
     3a8:	moveq	r0, r3
     3ac:	ldrne	r0, [r3, r2, lsl #2]
     3b0:	b	338 <coda_expression_restart+0x28>

000003b4 <coda_expression_lex>:
     3b4:	ldr	r3, [r1, #40]	; 0x28
     3b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3bc:	cmp	r3, #0
     3c0:	sub	sp, sp, #36	; 0x24
     3c4:	mov	sl, r1
     3c8:	str	r0, [r1, #92]	; 0x5c
     3cc:	beq	5f8 <coda_expression_lex+0x244>
     3d0:	ldr	r5, [r1, #36]	; 0x24
     3d4:	ldrb	r1, [r1, #24]
     3d8:	ldr	r3, [pc, #2928]	; f50 <coda_expression_lex+0xb9c>
     3dc:	ldr	fp, [pc, #2928]	; f54 <coda_expression_lex+0xba0>
     3e0:	sub	r7, r3, #1392	; 0x570
     3e4:	add	r2, r7, #2640	; 0xa50
     3e8:	add	r8, r7, #256	; 0x100
     3ec:	add	r9, r7, #1952	; 0x7a0
     3f0:	add	r4, r7, #804	; 0x324
     3f4:	add	r6, r3, #8
     3f8:	add	r3, r2, #12
     3fc:	str	r3, [sp, #4]
     400:	strb	r1, [r5]
     404:	ldr	r0, [sl, #44]	; 0x2c
     408:	str	r5, [sp]
     40c:	lsl	r2, r0, #1
     410:	ldr	ip, [sp, #4]
     414:	ldrsh	r3, [r6, r2]
     418:	ldrsh	lr, [r8, r2]
     41c:	ldrb	r1, [r7, r1]
     420:	cmp	lr, #0
     424:	strne	r0, [sl, #64]	; 0x40
     428:	strne	r5, [sl, #68]	; 0x44
     42c:	b	448 <coda_expression_lex+0x94>
     430:	ldrsh	r0, [r4, r2]
     434:	cmp	r0, fp
     438:	addgt	r1, r7, r1
     43c:	lsl	r2, r0, #1
     440:	ldrbgt	r1, [r1, #1356]	; 0x54c
     444:	ldrsh	r3, [r6, r2]
     448:	add	r3, r3, r1
     44c:	lsl	r3, r3, #1
     450:	ldrsh	lr, [r9, r3]
     454:	cmp	r0, lr
     458:	bne	430 <coda_expression_lex+0x7c>
     45c:	ldrsh	r0, [ip, r3]
     460:	ldr	r1, [pc, #2800]	; f58 <coda_expression_lex+0xba4>
     464:	add	r5, r5, #1
     468:	lsl	r2, r0, #1
     46c:	ldrsh	r3, [r6, r2]
     470:	cmp	r3, r1
     474:	ldrbne	r1, [r5]
     478:	bne	418 <coda_expression_lex+0x64>
     47c:	ldrsh	r3, [r8, r2]
     480:	cmp	r3, #0
     484:	ldr	r1, [sp]
     488:	ldreq	r3, [sl, #64]	; 0x40
     48c:	ldreq	r5, [sl, #68]	; 0x44
     490:	str	r1, [sl, #80]	; 0x50
     494:	lsleq	r3, r3, #1
     498:	sub	r2, r5, r1
     49c:	str	r2, [sl, #32]
     4a0:	ldrsheq	r3, [r8, r3]
     4a4:	ldrb	r2, [r5]
     4a8:	strb	r2, [sl, #24]
     4ac:	mov	r2, #0
     4b0:	strb	r2, [r5]
     4b4:	str	r5, [sl, #36]	; 0x24
     4b8:	cmp	r3, #76	; 0x4c
     4bc:	ldrls	pc, [pc, r3, lsl #2]
     4c0:	b	a78 <coda_expression_lex+0x6c4>
     4c4:	.word	0x000009b0
     4c8:	.word	0x00000a24
     4cc:	.word	0x00000a1c
     4d0:	.word	0x00000a14
     4d4:	.word	0x00000a0c
     4d8:	.word	0x00000a04
     4dc:	.word	0x000009fc
     4e0:	.word	0x000009f4
     4e4:	.word	0x000009ec
     4e8:	.word	0x000009e4
     4ec:	.word	0x000009dc
     4f0:	.word	0x000009d4
     4f4:	.word	0x000009cc
     4f8:	.word	0x000007cc
     4fc:	.word	0x000007c4
     500:	.word	0x000007bc
     504:	.word	0x000007b4
     508:	.word	0x000007ac
     50c:	.word	0x000007a4
     510:	.word	0x0000079c
     514:	.word	0x00000794
     518:	.word	0x0000078c
     51c:	.word	0x00000784
     520:	.word	0x0000077c
     524:	.word	0x00000774
     528:	.word	0x0000076c
     52c:	.word	0x00000764
     530:	.word	0x0000075c
     534:	.word	0x00000754
     538:	.word	0x0000074c
     53c:	.word	0x00000744
     540:	.word	0x0000073c
     544:	.word	0x00000734
     548:	.word	0x0000072c
     54c:	.word	0x00000724
     550:	.word	0x0000071c
     554:	.word	0x00000714
     558:	.word	0x0000070c
     55c:	.word	0x00000704
     560:	.word	0x000006fc
     564:	.word	0x000006f4
     568:	.word	0x000006ec
     56c:	.word	0x000006e4
     570:	.word	0x000006dc
     574:	.word	0x000006cc
     578:	.word	0x0000084c
     57c:	.word	0x00000844
     580:	.word	0x0000083c
     584:	.word	0x00000834
     588:	.word	0x0000082c
     58c:	.word	0x00000824
     590:	.word	0x0000081c
     594:	.word	0x00000814
     598:	.word	0x0000080c
     59c:	.word	0x00000804
     5a0:	.word	0x000007fc
     5a4:	.word	0x000007f4
     5a8:	.word	0x000007ec
     5ac:	.word	0x000007e4
     5b0:	.word	0x000007dc
     5b4:	.word	0x000007d4
     5b8:	.word	0x0000089c
     5bc:	.word	0x00000894
     5c0:	.word	0x0000088c
     5c4:	.word	0x00000884
     5c8:	.word	0x0000087c
     5cc:	.word	0x00000874
     5d0:	.word	0x0000086c
     5d4:	.word	0x00000854
     5d8:	.word	0x000008c8
     5dc:	.word	0x000008b0
     5e0:	.word	0x00000a60
     5e4:	.word	0x000006c0
     5e8:	.word	0x000008a4
     5ec:	.word	0x000006ac
     5f0:	.word	0x000008e8
     5f4:	.word	0x000008e0
     5f8:	ldr	r2, [r1, #44]	; 0x2c
     5fc:	mov	r3, #1
     600:	cmp	r2, #0
     604:	streq	r3, [r1, #44]	; 0x2c
     608:	str	r3, [r1, #40]	; 0x28
     60c:	ldr	r3, [r1, #4]
     610:	cmp	r3, #0
     614:	ldreq	r3, [pc, #2368]	; f5c <coda_expression_lex+0xba8>
     618:	ldreq	r3, [r3]
     61c:	streq	r3, [r1, #4]
     620:	ldr	r3, [r1, #8]
     624:	cmp	r3, #0
     628:	ldreq	r3, [pc, #2352]	; f60 <coda_expression_lex+0xbac>
     62c:	ldreq	r3, [r3]
     630:	streq	r3, [r1, #8]
     634:	ldr	r3, [r1, #20]
     638:	cmp	r3, #0
     63c:	beq	678 <coda_expression_lex+0x2c4>
     640:	ldr	r2, [r1, #12]
     644:	ldr	r3, [r3, r2, lsl #2]
     648:	cmp	r3, #0
     64c:	beq	678 <coda_expression_lex+0x2c4>
     650:	ldr	r5, [r3, #8]
     654:	ldr	r2, [r3, #16]
     658:	ldr	r3, [r3]
     65c:	str	r5, [sl, #36]	; 0x24
     660:	str	r2, [sl, #28]
     664:	str	r5, [sl, #80]	; 0x50
     668:	str	r3, [sl, #4]
     66c:	ldrb	r1, [r5]
     670:	strb	r1, [sl, #24]
     674:	b	3d8 <coda_expression_lex+0x24>
     678:	mov	r0, sl
     67c:	bl	28 <coda_expression_ensure_buffer_stack>
     680:	mov	r2, sl
     684:	mov	r1, #16384	; 0x4000
     688:	ldr	r0, [sl, #4]
     68c:	ldr	r5, [sl, #12]
     690:	ldr	r4, [sl, #20]
     694:	bl	2ac <coda_expression__create_buffer>
     698:	ldr	r2, [sl, #12]
     69c:	ldr	r3, [sl, #20]
     6a0:	str	r0, [r4, r5, lsl #2]
     6a4:	ldr	r3, [r3, r2, lsl #2]
     6a8:	b	650 <coda_expression_lex+0x29c>
     6ac:	ldr	r3, [sl, #8]
     6b0:	mov	r2, #1
     6b4:	ldr	r1, [sl, #32]
     6b8:	ldr	r0, [sl, #80]	; 0x50
     6bc:	bl	0 <fwrite>
     6c0:	ldr	r5, [sl, #36]	; 0x24
     6c4:	ldrb	r1, [sl, #24]
     6c8:	b	400 <coda_expression_lex+0x4c>
     6cc:	ldr	r3, [pc, #2192]	; f64 <coda_expression_lex+0xbb0>
     6d0:	mov	r0, r3
     6d4:	add	sp, sp, #36	; 0x24
     6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6dc:	ldr	r3, [pc, #2180]	; f68 <coda_expression_lex+0xbb4>
     6e0:	b	6d0 <coda_expression_lex+0x31c>
     6e4:	mov	r3, #304	; 0x130
     6e8:	b	6d0 <coda_expression_lex+0x31c>
     6ec:	ldr	r3, [pc, #2168]	; f6c <coda_expression_lex+0xbb8>
     6f0:	b	6d0 <coda_expression_lex+0x31c>
     6f4:	ldr	r3, [pc, #2164]	; f70 <coda_expression_lex+0xbbc>
     6f8:	b	6d0 <coda_expression_lex+0x31c>
     6fc:	ldr	r3, [pc, #2160]	; f74 <coda_expression_lex+0xbc0>
     700:	b	6d0 <coda_expression_lex+0x31c>
     704:	mov	r3, #300	; 0x12c
     708:	b	6d0 <coda_expression_lex+0x31c>
     70c:	ldr	r3, [pc, #2148]	; f78 <coda_expression_lex+0xbc4>
     710:	b	6d0 <coda_expression_lex+0x31c>
     714:	ldr	r3, [pc, #2144]	; f7c <coda_expression_lex+0xbc8>
     718:	b	6d0 <coda_expression_lex+0x31c>
     71c:	ldr	r3, [pc, #2140]	; f80 <coda_expression_lex+0xbcc>
     720:	b	6d0 <coda_expression_lex+0x31c>
     724:	mov	r3, #296	; 0x128
     728:	b	6d0 <coda_expression_lex+0x31c>
     72c:	ldr	r3, [pc, #2128]	; f84 <coda_expression_lex+0xbd0>
     730:	b	6d0 <coda_expression_lex+0x31c>
     734:	ldr	r3, [pc, #2124]	; f88 <coda_expression_lex+0xbd4>
     738:	b	6d0 <coda_expression_lex+0x31c>
     73c:	ldr	r3, [pc, #2120]	; f8c <coda_expression_lex+0xbd8>
     740:	b	6d0 <coda_expression_lex+0x31c>
     744:	mov	r3, #292	; 0x124
     748:	b	6d0 <coda_expression_lex+0x31c>
     74c:	ldr	r3, [pc, #2108]	; f90 <coda_expression_lex+0xbdc>
     750:	b	6d0 <coda_expression_lex+0x31c>
     754:	ldr	r3, [pc, #2104]	; f94 <coda_expression_lex+0xbe0>
     758:	b	6d0 <coda_expression_lex+0x31c>
     75c:	ldr	r3, [pc, #2100]	; f98 <coda_expression_lex+0xbe4>
     760:	b	6d0 <coda_expression_lex+0x31c>
     764:	mov	r3, #288	; 0x120
     768:	b	6d0 <coda_expression_lex+0x31c>
     76c:	ldr	r3, [pc, #2088]	; f9c <coda_expression_lex+0xbe8>
     770:	b	6d0 <coda_expression_lex+0x31c>
     774:	ldr	r3, [pc, #2084]	; fa0 <coda_expression_lex+0xbec>
     778:	b	6d0 <coda_expression_lex+0x31c>
     77c:	ldr	r3, [pc, #2080]	; fa4 <coda_expression_lex+0xbf0>
     780:	b	6d0 <coda_expression_lex+0x31c>
     784:	mov	r3, #284	; 0x11c
     788:	b	6d0 <coda_expression_lex+0x31c>
     78c:	ldr	r3, [pc, #2068]	; fa8 <coda_expression_lex+0xbf4>
     790:	b	6d0 <coda_expression_lex+0x31c>
     794:	ldr	r3, [pc, #2064]	; fac <coda_expression_lex+0xbf8>
     798:	b	6d0 <coda_expression_lex+0x31c>
     79c:	ldr	r3, [pc, #2060]	; fb0 <coda_expression_lex+0xbfc>
     7a0:	b	6d0 <coda_expression_lex+0x31c>
     7a4:	mov	r3, #280	; 0x118
     7a8:	b	6d0 <coda_expression_lex+0x31c>
     7ac:	ldr	r3, [pc, #2048]	; fb4 <coda_expression_lex+0xc00>
     7b0:	b	6d0 <coda_expression_lex+0x31c>
     7b4:	ldr	r3, [pc, #2044]	; fb8 <coda_expression_lex+0xc04>
     7b8:	b	6d0 <coda_expression_lex+0x31c>
     7bc:	ldr	r3, [pc, #2040]	; fbc <coda_expression_lex+0xc08>
     7c0:	b	6d0 <coda_expression_lex+0x31c>
     7c4:	mov	r3, #276	; 0x114
     7c8:	b	6d0 <coda_expression_lex+0x31c>
     7cc:	ldr	r3, [pc, #2028]	; fc0 <coda_expression_lex+0xc0c>
     7d0:	b	6d0 <coda_expression_lex+0x31c>
     7d4:	ldr	r3, [pc, #2024]	; fc4 <coda_expression_lex+0xc10>
     7d8:	b	6d0 <coda_expression_lex+0x31c>
     7dc:	ldr	r3, [pc, #2020]	; fc8 <coda_expression_lex+0xc14>
     7e0:	b	6d0 <coda_expression_lex+0x31c>
     7e4:	mov	r3, #320	; 0x140
     7e8:	b	6d0 <coda_expression_lex+0x31c>
     7ec:	ldr	r3, [pc, #2008]	; fcc <coda_expression_lex+0xc18>
     7f0:	b	6d0 <coda_expression_lex+0x31c>
     7f4:	ldr	r3, [pc, #2004]	; fd0 <coda_expression_lex+0xc1c>
     7f8:	b	6d0 <coda_expression_lex+0x31c>
     7fc:	ldr	r3, [pc, #2000]	; fd4 <coda_expression_lex+0xc20>
     800:	b	6d0 <coda_expression_lex+0x31c>
     804:	mov	r3, #316	; 0x13c
     808:	b	6d0 <coda_expression_lex+0x31c>
     80c:	ldr	r3, [pc, #1988]	; fd8 <coda_expression_lex+0xc24>
     810:	b	6d0 <coda_expression_lex+0x31c>
     814:	ldr	r3, [pc, #1984]	; fdc <coda_expression_lex+0xc28>
     818:	b	6d0 <coda_expression_lex+0x31c>
     81c:	ldr	r3, [pc, #1980]	; fe0 <coda_expression_lex+0xc2c>
     820:	b	6d0 <coda_expression_lex+0x31c>
     824:	mov	r3, #312	; 0x138
     828:	b	6d0 <coda_expression_lex+0x31c>
     82c:	ldr	r3, [pc, #1968]	; fe4 <coda_expression_lex+0xc30>
     830:	b	6d0 <coda_expression_lex+0x31c>
     834:	ldr	r3, [pc, #1964]	; fe8 <coda_expression_lex+0xc34>
     838:	b	6d0 <coda_expression_lex+0x31c>
     83c:	ldr	r3, [pc, #1960]	; fec <coda_expression_lex+0xc38>
     840:	b	6d0 <coda_expression_lex+0x31c>
     844:	mov	r3, #308	; 0x134
     848:	b	6d0 <coda_expression_lex+0x31c>
     84c:	ldr	r3, [pc, #1796]	; f58 <coda_expression_lex+0xba4>
     850:	b	6d0 <coda_expression_lex+0x31c>
     854:	ldr	r0, [sl, #80]	; 0x50
     858:	ldr	r4, [sl, #92]	; 0x5c
     85c:	bl	0 <strdup>
     860:	ldr	r3, [pc, #1928]	; ff0 <coda_expression_lex+0xc3c>
     864:	str	r0, [r4]
     868:	b	6d0 <coda_expression_lex+0x31c>
     86c:	ldr	r3, [pc, #1920]	; ff4 <coda_expression_lex+0xc40>
     870:	b	6d0 <coda_expression_lex+0x31c>
     874:	mov	r3, #328	; 0x148
     878:	b	6d0 <coda_expression_lex+0x31c>
     87c:	ldr	r3, [pc, #1908]	; ff8 <coda_expression_lex+0xc44>
     880:	b	6d0 <coda_expression_lex+0x31c>
     884:	ldr	r3, [pc, #1904]	; ffc <coda_expression_lex+0xc48>
     888:	b	6d0 <coda_expression_lex+0x31c>
     88c:	ldr	r3, [pc, #1900]	; 1000 <coda_expression_lex+0xc4c>
     890:	b	6d0 <coda_expression_lex+0x31c>
     894:	mov	r3, #324	; 0x144
     898:	b	6d0 <coda_expression_lex+0x31c>
     89c:	ldr	r3, [pc, #1888]	; 1004 <coda_expression_lex+0xc50>
     8a0:	b	6d0 <coda_expression_lex+0x31c>
     8a4:	ldr	r3, [sl, #80]	; 0x50
     8a8:	ldrb	r3, [r3]
     8ac:	b	6d0 <coda_expression_lex+0x31c>
     8b0:	ldr	r0, [sl, #80]	; 0x50
     8b4:	ldr	r4, [sl, #92]	; 0x5c
     8b8:	bl	0 <strdup>
     8bc:	ldr	r3, [pc, #1860]	; 1008 <coda_expression_lex+0xc54>
     8c0:	str	r0, [r4]
     8c4:	b	6d0 <coda_expression_lex+0x31c>
     8c8:	ldr	r0, [sl, #80]	; 0x50
     8cc:	ldr	r4, [sl, #92]	; 0x5c
     8d0:	bl	0 <strdup>
     8d4:	ldr	r3, [pc, #1840]	; 100c <coda_expression_lex+0xc58>
     8d8:	str	r0, [r4]
     8dc:	b	6d0 <coda_expression_lex+0x31c>
     8e0:	mov	r3, #0
     8e4:	b	6d0 <coda_expression_lex+0x31c>
     8e8:	ldrb	r2, [sl, #24]
     8ec:	ldr	r3, [sl, #80]	; 0x50
     8f0:	strb	r2, [r5]
     8f4:	ldr	r1, [sl, #20]
     8f8:	ldr	lr, [sl, #12]
     8fc:	sub	r3, r5, r3
     900:	sub	r3, r3, #1
     904:	ldr	r2, [r1, lr, lsl #2]
     908:	str	r3, [sp, #20]
     90c:	str	r1, [sp, #16]
     910:	ldr	r3, [r2, #44]	; 0x2c
     914:	cmp	r3, #0
     918:	ldreq	r0, [sl, #4]
     91c:	ldreq	r3, [r2, #16]
     920:	ldrne	r3, [sl, #28]
     924:	streq	r3, [sl, #28]
     928:	streq	r0, [r2]
     92c:	moveq	r0, #1
     930:	streq	r0, [r2, #44]	; 0x2c
     934:	ldr	r0, [r2, #4]
     938:	mov	ip, r0
     93c:	str	r0, [sp, #12]
     940:	ldr	r0, [sl, #36]	; 0x24
     944:	add	ip, ip, r3
     948:	cmp	r0, ip
     94c:	str	ip, [sp, #8]
     950:	bls	e84 <coda_expression_lex+0xad0>
     954:	ldr	ip, [sp, #12]
     958:	add	r3, r3, #1
     95c:	add	ip, ip, r3
     960:	ldr	r3, [sl, #80]	; 0x50
     964:	cmp	r0, ip
     968:	str	r3, [sp, #24]
     96c:	bhi	e7c <coda_expression_lex+0xac8>
     970:	ldr	ip, [r2, #40]	; 0x28
     974:	cmp	ip, #0
     978:	bne	a80 <coda_expression_lex+0x6cc>
     97c:	sub	r0, r0, r3
     980:	cmp	r0, #1
     984:	beq	f18 <coda_expression_lex+0xb64>
     988:	ldr	r3, [sp, #8]
     98c:	mov	r0, sl
     990:	str	r3, [sl, #36]	; 0x24
     994:	bl	0 <yy_fatal_error.isra.0>
     998:	ldr	r3, [sl, #80]	; 0x50
     99c:	ldr	r5, [sl, #36]	; 0x24
     9a0:	str	r3, [sp]
     9a4:	lsl	r0, r0, #1
     9a8:	ldrsh	r3, [r8, r0]
     9ac:	b	480 <coda_expression_lex+0xcc>
     9b0:	ldrb	r3, [sl, #24]
     9b4:	strb	r3, [r5]
     9b8:	ldr	r3, [sl, #64]	; 0x40
     9bc:	ldr	r5, [sl, #68]	; 0x44
     9c0:	lsl	r3, r3, #1
     9c4:	ldrsh	r3, [r8, r3]
     9c8:	b	480 <coda_expression_lex+0xcc>
     9cc:	ldr	r3, [pc, #1596]	; 1010 <coda_expression_lex+0xc5c>
     9d0:	b	6d0 <coda_expression_lex+0x31c>
     9d4:	ldr	r3, [pc, #1400]	; f54 <coda_expression_lex+0xba0>
     9d8:	b	6d0 <coda_expression_lex+0x31c>
     9dc:	ldr	r3, [pc, #1584]	; 1014 <coda_expression_lex+0xc60>
     9e0:	b	6d0 <coda_expression_lex+0x31c>
     9e4:	mov	r3, #264	; 0x108
     9e8:	b	6d0 <coda_expression_lex+0x31c>
     9ec:	ldr	r3, [pc, #1572]	; 1018 <coda_expression_lex+0xc64>
     9f0:	b	6d0 <coda_expression_lex+0x31c>
     9f4:	ldr	r3, [pc, #1568]	; 101c <coda_expression_lex+0xc68>
     9f8:	b	6d0 <coda_expression_lex+0x31c>
     9fc:	ldr	r3, [pc, #1564]	; 1020 <coda_expression_lex+0xc6c>
     a00:	b	6d0 <coda_expression_lex+0x31c>
     a04:	ldr	r3, [pc, #1560]	; 1024 <coda_expression_lex+0xc70>
     a08:	b	6d0 <coda_expression_lex+0x31c>
     a0c:	mov	r3, #268	; 0x10c
     a10:	b	6d0 <coda_expression_lex+0x31c>
     a14:	ldr	r3, [pc, #1548]	; 1028 <coda_expression_lex+0xc74>
     a18:	b	6d0 <coda_expression_lex+0x31c>
     a1c:	ldr	r3, [pc, #1544]	; 102c <coda_expression_lex+0xc78>
     a20:	b	6d0 <coda_expression_lex+0x31c>
     a24:	ldr	r4, [sl, #32]
     a28:	ldr	r5, [sl, #92]	; 0x5c
     a2c:	sub	r0, r4, #1
     a30:	bl	0 <malloc>
     a34:	sub	r2, r4, #2
     a38:	str	r0, [r5]
     a3c:	ldr	r1, [sl, #80]	; 0x50
     a40:	add	r1, r1, #1
     a44:	bl	0 <memcpy>
     a48:	ldr	r2, [r5]
     a4c:	mov	r1, #0
     a50:	add	r2, r2, r4
     a54:	mov	r3, #260	; 0x104
     a58:	strb	r1, [r2, #-2]
     a5c:	b	6d0 <coda_expression_lex+0x31c>
     a60:	ldr	r0, [sl, #80]	; 0x50
     a64:	ldr	r4, [sl, #92]	; 0x5c
     a68:	bl	0 <strdup>
     a6c:	ldr	r3, [pc, #1468]	; 1030 <coda_expression_lex+0xc7c>
     a70:	str	r0, [r4]
     a74:	b	6d0 <coda_expression_lex+0x31c>
     a78:	ldr	r0, [pc, #1460]	; 1034 <coda_expression_lex+0xc80>
     a7c:	bl	0 <yy_fatal_error.isra.0>
     a80:	ldr	ip, [sp, #24]
     a84:	sub	r3, r0, ip
     a88:	str	r3, [sp, #28]
     a8c:	sub	r3, r3, #1
     a90:	cmp	r3, #0
     a94:	mov	r0, r3
     a98:	str	r3, [sp, #8]
     a9c:	ble	acc <coda_expression_lex+0x718>
     aa0:	ldr	r3, [sp, #12]
     aa4:	add	r2, ip, r0
     aa8:	sub	r3, r3, #1
     aac:	ldrb	r1, [ip], #1
     ab0:	cmp	r2, ip
     ab4:	strb	r1, [r3, #1]!
     ab8:	bne	aac <coda_expression_lex+0x6f8>
     abc:	ldr	r1, [sl, #20]
     ac0:	ldr	lr, [sl, #12]
     ac4:	str	r1, [sp, #16]
     ac8:	ldr	r2, [r1, lr, lsl #2]
     acc:	ldr	r3, [r2, #44]	; 0x2c
     ad0:	cmp	r3, #2
     ad4:	moveq	r3, #0
     ad8:	streq	r3, [sl, #28]
     adc:	streq	r3, [r2, #16]
     ae0:	beq	c70 <coda_expression_lex+0x8bc>
     ae4:	ldr	r3, [r2, #12]
     ae8:	ldr	r1, [sp, #8]
     aec:	sub	r3, r3, r1
     af0:	sub	r3, r3, #1
     af4:	cmp	r3, #0
     af8:	bgt	bac <coda_expression_lex+0x7f8>
     afc:	ldr	r1, [sl, #36]	; 0x24
     b00:	str	r5, [sp, #12]
     b04:	mov	r5, r2
     b08:	mov	r2, r1
     b0c:	b	b6c <coda_expression_lex+0x7b8>
     b10:	ldr	r3, [r5, #12]
     b14:	cmp	r3, #0
     b18:	lsl	r1, r3, #1
     b1c:	strgt	r1, [r5, #12]
     b20:	ble	b8c <coda_expression_lex+0x7d8>
     b24:	add	r1, r1, #2
     b28:	str	r2, [sp, #16]
     b2c:	bl	0 <realloc>
     b30:	ldr	r2, [sp, #16]
     b34:	cmp	r0, #0
     b38:	str	r0, [r5, #4]
     b3c:	beq	b84 <coda_expression_lex+0x7d0>
     b40:	ldr	r3, [sl, #12]
     b44:	ldr	r1, [sl, #20]
     b48:	add	r2, r0, r2
     b4c:	ldr	r0, [sp, #8]
     b50:	ldr	r5, [r1, r3, lsl #2]
     b54:	str	r2, [sl, #36]	; 0x24
     b58:	ldr	r3, [r5, #12]
     b5c:	sub	r3, r3, r0
     b60:	sub	r3, r3, #1
     b64:	cmp	r3, #0
     b68:	bgt	ba0 <coda_expression_lex+0x7ec>
     b6c:	ldr	r3, [r5, #20]
     b70:	ldr	r0, [r5, #4]
     b74:	cmp	r3, #0
     b78:	sub	r2, r2, r0
     b7c:	bne	b10 <coda_expression_lex+0x75c>
     b80:	str	r3, [r5, #4]
     b84:	ldr	r0, [pc, #1196]	; 1038 <coda_expression_lex+0xc84>
     b88:	bl	0 <yy_fatal_error.isra.0>
     b8c:	add	r1, r3, #7
     b90:	movge	r1, r3
     b94:	add	r1, r3, r1, asr #3
     b98:	str	r1, [r5, #12]
     b9c:	b	b24 <coda_expression_lex+0x770>
     ba0:	mov	r2, r5
     ba4:	ldr	r5, [sp, #12]
     ba8:	str	r1, [sp, #16]
     bac:	ldr	r2, [r2, #24]
     bb0:	cmp	r3, #8192	; 0x2000
     bb4:	movge	r3, #8192	; 0x2000
     bb8:	cmp	r2, #0
     bbc:	str	r2, [sp, #12]
     bc0:	str	r3, [sp, #24]
     bc4:	beq	de4 <coda_expression_lex+0xa30>
     bc8:	mov	r3, #0
     bcc:	str	r5, [sp, #12]
     bd0:	mov	r5, r3
     bd4:	b	c10 <coda_expression_lex+0x85c>
     bd8:	cmp	r0, #10
     bdc:	beq	db8 <coda_expression_lex+0xa04>
     be0:	ldr	r1, [sl, #12]
     be4:	ldr	r2, [sl, #20]
     be8:	ldr	r3, [sp, #28]
     bec:	ldr	r2, [r2, r1, lsl #2]
     bf0:	ldr	r2, [r2, #4]
     bf4:	add	r2, r2, r3
     bf8:	ldr	r3, [sp, #24]
     bfc:	add	r2, r2, r5
     c00:	add	r5, r5, #1
     c04:	cmp	r3, r5
     c08:	strb	r0, [r2, #-1]
     c0c:	ble	c44 <coda_expression_lex+0x890>
     c10:	ldr	r0, [sl, #4]
     c14:	bl	0 <getc>
     c18:	cmn	r0, #1
     c1c:	bne	bd8 <coda_expression_lex+0x824>
     c20:	ldr	r0, [sl, #4]
     c24:	str	r5, [sp, #16]
     c28:	ldr	r5, [sp, #12]
     c2c:	bl	0 <ferror>
     c30:	ldr	r3, [sp, #16]
     c34:	cmp	r0, #0
     c38:	beq	c4c <coda_expression_lex+0x898>
     c3c:	ldr	r0, [pc, #1016]	; 103c <coda_expression_lex+0xc88>
     c40:	bl	0 <yy_fatal_error.isra.0>
     c44:	mov	r3, r5
     c48:	ldr	r5, [sp, #12]
     c4c:	str	r3, [sl, #28]
     c50:	ldr	r1, [sl, #20]
     c54:	ldr	lr, [sl, #12]
     c58:	cmp	r3, #0
     c5c:	ldr	r2, [r1, lr, lsl #2]
     c60:	movne	r1, #0
     c64:	strne	r1, [sp, #12]
     c68:	str	r3, [r2, #16]
     c6c:	bne	c90 <coda_expression_lex+0x8dc>
     c70:	ldr	r3, [sp, #8]
     c74:	cmp	r3, #0
     c78:	beq	d88 <coda_expression_lex+0x9d4>
     c7c:	ldr	r2, [r1, lr, lsl #2]
     c80:	mov	r1, #2
     c84:	ldr	r3, [sl, #28]
     c88:	str	r1, [sp, #12]
     c8c:	str	r1, [r2, #44]	; 0x2c
     c90:	ldr	r1, [sp, #8]
     c94:	ldr	r0, [r2, #12]
     c98:	add	r1, r1, r3
     c9c:	cmp	r1, r0
     ca0:	bgt	d34 <coda_expression_lex+0x980>
     ca4:	ldr	r2, [r2, #4]
     ca8:	mov	r3, #0
     cac:	str	r1, [sl, #28]
     cb0:	strb	r3, [r2, r1]
     cb4:	ldr	r1, [sl, #12]
     cb8:	ldr	r3, [sl, #20]
     cbc:	ldr	r2, [sp, #12]
     cc0:	ldr	r3, [r3, r1, lsl #2]
     cc4:	cmp	r2, #1
     cc8:	ldr	r2, [sl, #28]
     ccc:	ldr	r3, [r3, #4]
     cd0:	add	r3, r3, r2
     cd4:	mov	r2, #0
     cd8:	strb	r2, [r3, #1]
     cdc:	ldr	r2, [sl, #12]
     ce0:	ldr	r3, [sl, #20]
     ce4:	ldr	r3, [r3, r2, lsl #2]
     ce8:	ldr	r3, [r3, #4]
     cec:	str	r3, [sl, #80]	; 0x50
     cf0:	beq	f18 <coda_expression_lex+0xb64>
     cf4:	ldr	r2, [sp, #12]
     cf8:	cmp	r2, #2
     cfc:	ldreq	r2, [sl, #28]
     d00:	addeq	r3, r3, r2
     d04:	streq	r3, [sp, #8]
     d08:	beq	988 <coda_expression_lex+0x5d4>
     d0c:	ldr	r2, [sp, #20]
     d10:	mov	r0, sl
     d14:	add	r3, r3, r2
     d18:	str	r3, [sl, #36]	; 0x24
     d1c:	bl	0 <yy_fatal_error.isra.0>
     d20:	ldr	r5, [sl, #36]	; 0x24
     d24:	ldr	r3, [sl, #80]	; 0x50
     d28:	str	r3, [sp]
     d2c:	ldrb	r1, [r5]
     d30:	b	40c <coda_expression_lex+0x58>
     d34:	add	r3, r1, r3, asr #1
     d38:	mov	r1, r3
     d3c:	ldr	r0, [r2, #4]
     d40:	str	r3, [sp, #24]
     d44:	str	r2, [sp, #16]
     d48:	bl	0 <realloc>
     d4c:	ldr	ip, [sl, #12]
     d50:	ldr	r1, [sl, #20]
     d54:	ldr	r2, [sp, #16]
     d58:	ldr	r3, [sp, #24]
     d5c:	ldr	ip, [r1, ip, lsl #2]
     d60:	str	r0, [r2, #4]
     d64:	ldr	r2, [ip, #4]
     d68:	cmp	r2, #0
     d6c:	beq	db0 <coda_expression_lex+0x9fc>
     d70:	ldr	r1, [sl, #28]
     d74:	ldr	r0, [sp, #8]
     d78:	sub	r3, r3, #2
     d7c:	add	r1, r0, r1
     d80:	str	r3, [ip, #12]
     d84:	b	ca8 <coda_expression_lex+0x8f4>
     d88:	mov	r1, sl
     d8c:	ldr	r0, [sl, #4]
     d90:	bl	310 <coda_expression_restart>
     d94:	ldr	r1, [sl, #12]
     d98:	ldr	r2, [sl, #20]
     d9c:	mov	r0, #1
     da0:	ldr	r3, [sl, #28]
     da4:	str	r0, [sp, #12]
     da8:	ldr	r2, [r2, r1, lsl #2]
     dac:	b	c90 <coda_expression_lex+0x8dc>
     db0:	ldr	r0, [pc, #648]	; 1040 <coda_expression_lex+0xc8c>
     db4:	bl	0 <yy_fatal_error.isra.0>
     db8:	ldr	r1, [sl, #12]
     dbc:	ldr	r2, [sl, #20]
     dc0:	mov	r3, r5
     dc4:	ldr	r5, [sp, #12]
     dc8:	ldr	r2, [r2, r1, lsl #2]
     dcc:	ldr	r1, [sp, #8]
     dd0:	ldr	r2, [r2, #4]
     dd4:	add	r2, r2, r1
     dd8:	strb	r0, [r2, r3]
     ddc:	add	r3, r3, #1
     de0:	b	c4c <coda_expression_lex+0x898>
     de4:	bl	0 <__errno_location>
     de8:	ldr	r2, [sp, #12]
     dec:	ldr	r1, [sp, #16]
     df0:	str	r0, [sp, #28]
     df4:	str	r2, [r0]
     df8:	b	e34 <coda_expression_lex+0xa80>
     dfc:	str	r0, [sp, #16]
     e00:	ldr	r0, [sl, #4]
     e04:	bl	0 <ferror>
     e08:	ldr	r3, [sp, #16]
     e0c:	cmp	r0, #0
     e10:	beq	f3c <coda_expression_lex+0xb88>
     e14:	ldr	r1, [sp, #28]
     e18:	ldr	r2, [r1]
     e1c:	cmp	r2, #4
     e20:	bne	c3c <coda_expression_lex+0x888>
     e24:	str	r3, [r1]
     e28:	ldr	r0, [sl, #4]
     e2c:	bl	0 <clearerr>
     e30:	ldr	r1, [sl, #20]
     e34:	ldr	r0, [sl, #12]
     e38:	ldr	ip, [sp, #8]
     e3c:	ldr	r3, [sl, #4]
     e40:	ldr	r0, [r1, r0, lsl #2]
     e44:	ldr	r2, [sp, #24]
     e48:	mov	r1, #1
     e4c:	ldr	r0, [r0, #4]
     e50:	add	r0, r0, ip
     e54:	bl	0 <fread>
     e58:	cmp	r0, #0
     e5c:	mov	r3, r0
     e60:	str	r0, [sl, #28]
     e64:	beq	dfc <coda_expression_lex+0xa48>
     e68:	ldr	r1, [sl, #12]
     e6c:	ldr	r2, [sl, #20]
     e70:	ldr	r2, [r2, r1, lsl #2]
     e74:	str	r0, [r2, #16]
     e78:	b	c90 <coda_expression_lex+0x8dc>
     e7c:	ldr	r0, [pc, #448]	; 1044 <coda_expression_lex+0xc90>
     e80:	bl	0 <yy_fatal_error.isra.0>
     e84:	ldr	r2, [sp, #20]
     e88:	ldr	r3, [sl, #80]	; 0x50
     e8c:	mov	r0, sl
     e90:	add	r3, r3, r2
     e94:	str	r3, [sl, #36]	; 0x24
     e98:	bl	0 <yy_fatal_error.isra.0>
     e9c:	ldr	r5, [sl, #36]	; 0x24
     ea0:	lsl	r1, r0, #1
     ea4:	ldrsh	r2, [r6, r1]
     ea8:	ldrsh	r3, [r8, r1]
     eac:	add	r2, r2, #1
     eb0:	cmp	r3, #0
     eb4:	lsl	r2, r2, #1
     eb8:	strne	r0, [sl, #64]	; 0x40
     ebc:	ldrsh	ip, [r9, r2]
     ec0:	strne	r5, [sl, #68]	; 0x44
     ec4:	cmp	ip, r0
     ec8:	beq	eec <coda_expression_lex+0xb38>
     ecc:	ldrsh	r0, [r4, r1]
     ed0:	lsl	r1, r0, #1
     ed4:	ldrsh	r2, [r6, r1]
     ed8:	add	r2, r2, #1
     edc:	lsl	r2, r2, #1
     ee0:	ldrsh	ip, [r9, r2]
     ee4:	cmp	r0, ip
     ee8:	bne	ecc <coda_expression_lex+0xb18>
     eec:	ldr	r1, [sp, #4]
     ef0:	ldrsh	r0, [r1, r2]
     ef4:	cmp	r0, fp
     ef8:	beq	f44 <coda_expression_lex+0xb90>
     efc:	ldr	r2, [sl, #80]	; 0x50
     f00:	cmp	r0, #0
     f04:	str	r2, [sp]
     f08:	beq	480 <coda_expression_lex+0xcc>
     f0c:	add	r5, r5, #1
     f10:	str	r5, [sl, #36]	; 0x24
     f14:	b	d2c <coda_expression_lex+0x978>
     f18:	ldr	r2, [sl, #44]	; 0x2c
     f1c:	str	r3, [sl, #36]	; 0x24
     f20:	sub	r2, r2, #1
     f24:	mov	r1, #0
     f28:	add	r3, r2, r2, lsr #31
     f2c:	str	r1, [sl, #48]	; 0x30
     f30:	asr	r3, r3, #1
     f34:	add	r3, r3, #76	; 0x4c
     f38:	b	4b8 <coda_expression_lex+0x104>
     f3c:	ldr	r3, [sl, #28]
     f40:	b	c50 <coda_expression_lex+0x89c>
     f44:	ldr	r2, [sl, #80]	; 0x50
     f48:	str	r2, [sp]
     f4c:	b	480 <coda_expression_lex+0xcc>
     f50:	.word	0x00000570
     f54:	.word	0x00000111
     f58:	.word	0x00000133
	...
     f64:	.word	0x00000132
     f68:	.word	0x00000131
     f6c:	.word	0x0000012f
     f70:	.word	0x0000012e
     f74:	.word	0x0000012d
     f78:	.word	0x0000012b
     f7c:	.word	0x0000012a
     f80:	.word	0x00000129
     f84:	.word	0x00000127
     f88:	.word	0x00000126
     f8c:	.word	0x00000125
     f90:	.word	0x00000123
     f94:	.word	0x00000122
     f98:	.word	0x00000121
     f9c:	.word	0x0000011f
     fa0:	.word	0x0000011e
     fa4:	.word	0x0000011d
     fa8:	.word	0x0000011b
     fac:	.word	0x0000011a
     fb0:	.word	0x00000119
     fb4:	.word	0x00000117
     fb8:	.word	0x00000116
     fbc:	.word	0x00000115
     fc0:	.word	0x00000113
     fc4:	.word	0x00000142
     fc8:	.word	0x00000141
     fcc:	.word	0x0000013f
     fd0:	.word	0x0000013e
     fd4:	.word	0x0000013d
     fd8:	.word	0x0000013b
     fdc:	.word	0x0000013a
     fe0:	.word	0x00000139
     fe4:	.word	0x00000137
     fe8:	.word	0x00000136
     fec:	.word	0x00000135
     ff0:	.word	0x00000106
     ff4:	.word	0x00000149
     ff8:	.word	0x00000147
     ffc:	.word	0x00000146
    1000:	.word	0x00000145
    1004:	.word	0x00000143
    1008:	.word	0x00000102
    100c:	.word	0x00000105
    1010:	.word	0x00000112
    1014:	.word	0x00000109
    1018:	.word	0x00000107
    101c:	.word	0x0000010f
    1020:	.word	0x0000010e
    1024:	.word	0x0000010d
    1028:	.word	0x0000010b
    102c:	.word	0x0000010a
    1030:	.word	0x00000103
    1034:	.word	0x00000118
    1038:	.word	0x0000009c
    103c:	.word	0x000000c8
    1040:	.word	0x000000e8
    1044:	.word	0x00000064

00001048 <coda_expression_push_buffer_state>:
    1048:	push	{r4, r5, r6, lr}
    104c:	subs	r5, r0, #0
    1050:	popeq	{r4, r5, r6, pc}
    1054:	mov	r4, r1
    1058:	mov	r0, r1
    105c:	bl	28 <coda_expression_ensure_buffer_stack>
    1060:	ldr	r3, [r4, #20]
    1064:	cmp	r3, #0
    1068:	beq	10f0 <coda_expression_push_buffer_state+0xa8>
    106c:	ldr	r2, [r4, #12]
    1070:	ldr	r1, [r3, r2, lsl #2]
    1074:	add	r3, r3, r2, lsl #2
    1078:	cmp	r1, #0
    107c:	beq	10bc <coda_expression_push_buffer_state+0x74>
    1080:	ldr	r3, [r4, #36]	; 0x24
    1084:	ldrb	r2, [r4, #24]
    1088:	strb	r2, [r3]
    108c:	ldr	r1, [r4, #20]
    1090:	ldr	r2, [r4, #12]
    1094:	cmp	r1, #0
    1098:	ldr	lr, [r4, #36]	; 0x24
    109c:	ldr	r0, [r1, r2, lsl #2]
    10a0:	add	r3, r1, r2, lsl #2
    10a4:	ldr	ip, [r4, #28]
    10a8:	addne	r3, r2, #1
    10ac:	str	lr, [r0, #8]
    10b0:	str	ip, [r0, #16]
    10b4:	strne	r3, [r4, #12]
    10b8:	addne	r3, r1, r3, lsl #2
    10bc:	ldr	r2, [r5, #8]
    10c0:	ldr	r0, [r5, #16]
    10c4:	ldr	r1, [r5]
    10c8:	str	r5, [r3]
    10cc:	str	r2, [r4, #36]	; 0x24
    10d0:	str	r2, [r4, #80]	; 0x50
    10d4:	str	r0, [r4, #28]
    10d8:	str	r1, [r4, #4]
    10dc:	ldrb	r3, [r2]
    10e0:	mov	r2, #1
    10e4:	str	r2, [r4, #48]	; 0x30
    10e8:	strb	r3, [r4, #24]
    10ec:	pop	{r4, r5, r6, pc}
    10f0:	ldr	r3, [r4, #12]
    10f4:	lsl	r3, r3, #2
    10f8:	b	10bc <coda_expression_push_buffer_state+0x74>

000010fc <coda_expression_pop_buffer_state>:
    10fc:	ldr	r3, [r0, #20]
    1100:	cmp	r3, #0
    1104:	bxeq	lr
    1108:	ldr	r2, [r0, #12]
    110c:	ldr	r3, [r3, r2, lsl #2]
    1110:	cmp	r3, #0
    1114:	bxeq	lr
    1118:	push	{r4, lr}
    111c:	mov	r4, r0
    1120:	mov	r1, r4
    1124:	mov	r0, r3
    1128:	bl	16c <coda_expression__delete_buffer>
    112c:	ldr	r3, [r4, #12]
    1130:	ldr	r2, [r4, #20]
    1134:	mov	r1, #0
    1138:	cmp	r3, r1
    113c:	str	r1, [r2, r3, lsl #2]
    1140:	subne	r3, r3, #1
    1144:	strne	r3, [r4, #12]
    1148:	cmp	r2, #0
    114c:	popeq	{r4, pc}
    1150:	ldr	r3, [r4, #12]
    1154:	ldr	r3, [r2, r3, lsl #2]
    1158:	cmp	r3, #0
    115c:	popeq	{r4, pc}
    1160:	ldr	r2, [r3, #8]
    1164:	ldr	r1, [r3, #16]
    1168:	ldr	r3, [r3]
    116c:	str	r2, [r4, #36]	; 0x24
    1170:	str	r2, [r4, #80]	; 0x50
    1174:	str	r1, [r4, #28]
    1178:	str	r3, [r4, #4]
    117c:	ldrb	r3, [r2]
    1180:	mov	r2, #1
    1184:	str	r2, [r4, #48]	; 0x30
    1188:	strb	r3, [r4, #24]
    118c:	pop	{r4, pc}

00001190 <coda_expression__scan_buffer>:
    1190:	cmp	r1, #1
    1194:	bls	1220 <coda_expression__scan_buffer+0x90>
    1198:	push	{r4, r5, r6, r7, r8, lr}
    119c:	sub	r7, r1, #2
    11a0:	ldrb	r4, [r0, r7]
    11a4:	cmp	r4, #0
    11a8:	bne	1218 <coda_expression__scan_buffer+0x88>
    11ac:	add	r3, r0, r1
    11b0:	ldrb	r6, [r3, #-1]
    11b4:	cmp	r6, #0
    11b8:	bne	1210 <coda_expression__scan_buffer+0x80>
    11bc:	mov	r5, r0
    11c0:	mov	r0, #48	; 0x30
    11c4:	mov	r8, r2
    11c8:	bl	0 <malloc>
    11cc:	subs	r4, r0, #0
    11d0:	beq	1228 <coda_expression__scan_buffer+0x98>
    11d4:	mov	r3, #1
    11d8:	str	r7, [r4, #12]
    11dc:	str	r5, [r4, #4]
    11e0:	str	r5, [r4, #8]
    11e4:	str	r6, [r4, #20]
    11e8:	str	r6, [r4]
    11ec:	str	r7, [r4, #16]
    11f0:	str	r6, [r4, #24]
    11f4:	str	r6, [r4, #40]	; 0x28
    11f8:	str	r6, [r4, #44]	; 0x2c
    11fc:	mov	r1, r8
    1200:	str	r3, [r4, #28]
    1204:	bl	bc <coda_expression__switch_to_buffer>
    1208:	mov	r0, r4
    120c:	pop	{r4, r5, r6, r7, r8, pc}
    1210:	mov	r0, r4
    1214:	pop	{r4, r5, r6, r7, r8, pc}
    1218:	mov	r0, #0
    121c:	pop	{r4, r5, r6, r7, r8, pc}
    1220:	mov	r0, #0
    1224:	bx	lr
    1228:	ldr	r0, [pc]	; 1230 <coda_expression__scan_buffer+0xa0>
    122c:	bl	0 <yy_fatal_error.isra.0>
    1230:	.word	0x0000014c

00001234 <coda_expression__scan_bytes>:
    1234:	push	{r4, r5, r6, r7, r8, lr}
    1238:	add	r7, r1, #2
    123c:	mov	r4, r0
    1240:	mov	r0, r7
    1244:	mov	r5, r1
    1248:	mov	r8, r2
    124c:	bl	0 <malloc>
    1250:	subs	r6, r0, #0
    1254:	beq	12b0 <coda_expression__scan_bytes+0x7c>
    1258:	cmp	r5, #0
    125c:	movgt	r0, r4
    1260:	addgt	lr, r0, r5
    1264:	subgt	r3, r6, #1
    1268:	ble	127c <coda_expression__scan_bytes+0x48>
    126c:	ldrb	ip, [r0], #1
    1270:	cmp	r0, lr
    1274:	strb	ip, [r3, #1]!
    1278:	bne	126c <coda_expression__scan_bytes+0x38>
    127c:	add	r0, r6, r5
    1280:	mov	r3, #0
    1284:	strb	r3, [r0, #1]
    1288:	mov	r2, r8
    128c:	strb	r3, [r6, r5]
    1290:	mov	r1, r7
    1294:	mov	r0, r6
    1298:	bl	1190 <coda_expression__scan_buffer>
    129c:	subs	r3, r0, #0
    12a0:	beq	12b8 <coda_expression__scan_bytes+0x84>
    12a4:	mov	r2, #1
    12a8:	str	r2, [r3, #20]
    12ac:	pop	{r4, r5, r6, r7, r8, pc}
    12b0:	ldr	r0, [pc, #8]	; 12c0 <coda_expression__scan_bytes+0x8c>
    12b4:	bl	0 <yy_fatal_error.isra.0>
    12b8:	ldr	r0, [pc, #4]	; 12c4 <coda_expression__scan_bytes+0x90>
    12bc:	bl	0 <yy_fatal_error.isra.0>
    12c0:	.word	0x00000178
    12c4:	.word	0x000001a4

000012c8 <coda_expression__scan_string>:
    12c8:	push	{r4, r5, r6, lr}
    12cc:	mov	r5, r1
    12d0:	mov	r4, r0
    12d4:	bl	0 <strlen>
    12d8:	mov	r2, r5
    12dc:	mov	r1, r0
    12e0:	mov	r0, r4
    12e4:	pop	{r4, r5, r6, lr}
    12e8:	b	1234 <coda_expression__scan_bytes>

000012ec <coda_expression_get_extra>:
    12ec:	ldr	r0, [r0]
    12f0:	bx	lr

000012f4 <coda_expression_get_lineno>:
    12f4:	ldr	r3, [r0, #20]
    12f8:	cmp	r3, #0
    12fc:	beq	1314 <coda_expression_get_lineno+0x20>
    1300:	ldr	r2, [r0, #12]
    1304:	ldr	r0, [r3, r2, lsl #2]
    1308:	cmp	r0, #0
    130c:	ldrne	r0, [r0, #32]
    1310:	bx	lr
    1314:	mov	r0, r3
    1318:	bx	lr

0000131c <coda_expression_get_column>:
    131c:	ldr	r3, [r0, #20]
    1320:	cmp	r3, #0
    1324:	beq	133c <coda_expression_get_column+0x20>
    1328:	ldr	r2, [r0, #12]
    132c:	ldr	r0, [r3, r2, lsl #2]
    1330:	cmp	r0, #0
    1334:	ldrne	r0, [r0, #36]	; 0x24
    1338:	bx	lr
    133c:	mov	r0, r3
    1340:	bx	lr

00001344 <coda_expression_get_in>:
    1344:	ldr	r0, [r0, #4]
    1348:	bx	lr

0000134c <coda_expression_get_out>:
    134c:	ldr	r0, [r0, #8]
    1350:	bx	lr

00001354 <coda_expression_get_leng>:
    1354:	ldr	r0, [r0, #32]
    1358:	bx	lr

0000135c <coda_expression_get_text>:
    135c:	ldr	r0, [r0, #80]	; 0x50
    1360:	bx	lr

00001364 <coda_expression_set_extra>:
    1364:	str	r0, [r1]
    1368:	bx	lr

0000136c <coda_expression_set_lineno>:
    136c:	ldr	r3, [r1, #20]
    1370:	cmp	r3, #0
    1374:	beq	1390 <coda_expression_set_lineno+0x24>
    1378:	ldr	r2, [r1, #12]
    137c:	ldr	r3, [r3, r2, lsl #2]
    1380:	cmp	r3, #0
    1384:	beq	1390 <coda_expression_set_lineno+0x24>
    1388:	str	r0, [r3, #32]
    138c:	bx	lr
    1390:	push	{r4, lr}
    1394:	ldr	r0, [pc]	; 139c <coda_expression_set_lineno+0x30>
    1398:	bl	0 <yy_fatal_error.isra.0>
    139c:	.word	0x000001c4

000013a0 <coda_expression_set_column>:
    13a0:	ldr	r3, [r1, #20]
    13a4:	cmp	r3, #0
    13a8:	beq	13c4 <coda_expression_set_column+0x24>
    13ac:	ldr	r2, [r1, #12]
    13b0:	ldr	r3, [r3, r2, lsl #2]
    13b4:	cmp	r3, #0
    13b8:	beq	13c4 <coda_expression_set_column+0x24>
    13bc:	str	r0, [r3, #36]	; 0x24
    13c0:	bx	lr
    13c4:	push	{r4, lr}
    13c8:	ldr	r0, [pc]	; 13d0 <coda_expression_set_column+0x30>
    13cc:	bl	0 <yy_fatal_error.isra.0>
    13d0:	.word	0x000001e8

000013d4 <coda_expression_set_in>:
    13d4:	str	r0, [r1, #4]
    13d8:	bx	lr

000013dc <coda_expression_set_out>:
    13dc:	str	r0, [r1, #8]
    13e0:	bx	lr

000013e4 <coda_expression_get_debug>:
    13e4:	ldr	r0, [r0, #76]	; 0x4c
    13e8:	bx	lr

000013ec <coda_expression_set_debug>:
    13ec:	str	r0, [r1, #76]	; 0x4c
    13f0:	bx	lr

000013f4 <coda_expression_get_lval>:
    13f4:	ldr	r0, [r0, #92]	; 0x5c
    13f8:	bx	lr

000013fc <coda_expression_set_lval>:
    13fc:	str	r0, [r1, #92]	; 0x5c
    1400:	bx	lr

00001404 <coda_expression_lex_init>:
    1404:	push	{r4, lr}
    1408:	subs	r4, r0, #0
    140c:	beq	1464 <coda_expression_lex_init+0x60>
    1410:	mov	r1, #1
    1414:	mov	r0, #96	; 0x60
    1418:	bl	0 <calloc>
    141c:	cmp	r0, #0
    1420:	str	r0, [r4]
    1424:	beq	147c <coda_expression_lex_init+0x78>
    1428:	mov	r3, #0
    142c:	mov	r2, r3
    1430:	str	r3, [r0, #20]
    1434:	str	r3, [r0, #12]
    1438:	str	r3, [r0, #16]
    143c:	str	r3, [r0, #36]	; 0x24
    1440:	str	r3, [r0, #40]	; 0x28
    1444:	str	r3, [r0, #44]	; 0x2c
    1448:	str	r3, [r0, #52]	; 0x34
    144c:	str	r3, [r0, #56]	; 0x38
    1450:	str	r3, [r0, #60]	; 0x3c
    1454:	str	r3, [r0, #4]
    1458:	str	r3, [r0, #8]
    145c:	mov	r0, r2
    1460:	pop	{r4, pc}
    1464:	bl	0 <__errno_location>
    1468:	mov	r3, #22
    146c:	mov	r2, #1
    1470:	str	r3, [r0]
    1474:	mov	r0, r2
    1478:	pop	{r4, pc}
    147c:	bl	0 <__errno_location>
    1480:	mov	r3, #12
    1484:	mov	r2, #1
    1488:	str	r3, [r0]
    148c:	mov	r0, r2
    1490:	pop	{r4, pc}

00001494 <coda_expression_lex_init_extra>:
    1494:	push	{r4, r5, r6, lr}
    1498:	subs	r4, r1, #0
    149c:	beq	14fc <coda_expression_lex_init_extra+0x68>
    14a0:	mov	r5, r0
    14a4:	mov	r1, #1
    14a8:	mov	r0, #96	; 0x60
    14ac:	bl	0 <calloc>
    14b0:	cmp	r0, #0
    14b4:	str	r0, [r4]
    14b8:	beq	1514 <coda_expression_lex_init_extra+0x80>
    14bc:	mov	r3, #0
    14c0:	mov	r2, r3
    14c4:	str	r5, [r0]
    14c8:	str	r3, [r0, #20]
    14cc:	str	r3, [r0, #12]
    14d0:	str	r3, [r0, #16]
    14d4:	str	r3, [r0, #36]	; 0x24
    14d8:	str	r3, [r0, #40]	; 0x28
    14dc:	str	r3, [r0, #44]	; 0x2c
    14e0:	str	r3, [r0, #52]	; 0x34
    14e4:	str	r3, [r0, #56]	; 0x38
    14e8:	str	r3, [r0, #60]	; 0x3c
    14ec:	str	r3, [r0, #4]
    14f0:	str	r3, [r0, #8]
    14f4:	mov	r0, r2
    14f8:	pop	{r4, r5, r6, pc}
    14fc:	bl	0 <__errno_location>
    1500:	mov	r3, #22
    1504:	mov	r2, #1
    1508:	str	r3, [r0]
    150c:	mov	r0, r2
    1510:	pop	{r4, r5, r6, pc}
    1514:	bl	0 <__errno_location>
    1518:	mov	r3, #12
    151c:	mov	r2, #1
    1520:	str	r3, [r0]
    1524:	mov	r0, r2
    1528:	pop	{r4, r5, r6, pc}

0000152c <coda_expression_lex_destroy>:
    152c:	ldr	r3, [r0, #20]
    1530:	push	{r4, r5, r6, lr}
    1534:	cmp	r3, #0
    1538:	mov	r4, r0
    153c:	beq	1590 <coda_expression_lex_destroy+0x64>
    1540:	ldr	r2, [r0, #12]
    1544:	ldr	r0, [r3, r2, lsl #2]
    1548:	cmp	r0, #0
    154c:	beq	1594 <coda_expression_lex_destroy+0x68>
    1550:	mov	r5, #0
    1554:	b	1568 <coda_expression_lex_destroy+0x3c>
    1558:	ldr	r2, [r4, #12]
    155c:	ldr	r0, [r3, r2, lsl #2]
    1560:	cmp	r0, #0
    1564:	beq	1594 <coda_expression_lex_destroy+0x68>
    1568:	mov	r1, r4
    156c:	bl	16c <coda_expression__delete_buffer>
    1570:	ldr	r3, [r4, #20]
    1574:	ldr	r2, [r4, #12]
    1578:	mov	r0, r4
    157c:	str	r5, [r3, r2, lsl #2]
    1580:	bl	10fc <coda_expression_pop_buffer_state>
    1584:	ldr	r3, [r4, #20]
    1588:	cmp	r3, #0
    158c:	bne	1558 <coda_expression_lex_destroy+0x2c>
    1590:	mov	r3, #0
    1594:	mov	r0, r3
    1598:	bl	0 <free>
    159c:	ldr	r0, [r4, #60]	; 0x3c
    15a0:	bl	0 <free>
    15a4:	mov	r0, r4
    15a8:	bl	0 <free>
    15ac:	mov	r0, #0
    15b0:	pop	{r4, r5, r6, pc}

000015b4 <coda_expression_alloc>:
    15b4:	b	0 <malloc>

000015b8 <coda_expression_realloc>:
    15b8:	b	0 <realloc>

000015bc <coda_expression_free>:
    15bc:	b	0 <free>

Disassembly of section .text.unlikely:

00000000 <yy_get_previous_state>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	ldr	lr, [pc, #144]	; 9c <yy_get_previous_state+0x9c>
   8:	ldr	r3, [r0, #44]	; 0x2c
   c:	add	r7, lr, #804	; 0x324
  10:	ldr	r8, [r0, #36]	; 0x24
  14:	ldr	r1, [r0, #80]	; 0x50
  18:	ldr	r5, [pc, #128]	; a0 <yy_get_previous_state+0xa0>
  1c:	add	r6, r7, #596	; 0x254
  20:	cmp	r1, r8
  24:	mov	r4, r1
  28:	bcs	94 <yy_get_previous_state+0x94>
  2c:	ldrb	r2, [r1], #1
  30:	ldr	r9, [pc, #108]	; a4 <yy_get_previous_state+0xa4>
  34:	cmp	r2, #0
  38:	moveq	ip, #1
  3c:	ldrbne	ip, [lr, r2]
  40:	lsl	r2, r3, #1
  44:	ldrsh	r2, [r9, r2]
  48:	ldr	r9, [pc, #88]	; a8 <yy_get_previous_state+0xa8>
  4c:	cmp	r2, #0
  50:	strne	r3, [r0, #64]	; 0x40
  54:	strne	r4, [r0, #68]	; 0x44
  58:	lsl	r4, r3, #1
  5c:	add	sl, lr, ip
  60:	ldrsh	r2, [r6, r4]
  64:	add	r2, r2, ip
  68:	lsl	r2, r2, #1
  6c:	ldrsh	fp, [r9, r2]
  70:	cmp	r3, fp
  74:	beq	88 <yy_get_previous_state+0x88>
  78:	ldrsh	r3, [r7, r4]
  7c:	cmp	r3, r5
  80:	ldrbgt	ip, [sl, #1356]	; 0x54c
  84:	b	58 <yy_get_previous_state+0x58>
  88:	ldr	r3, [pc, #28]	; ac <yy_get_previous_state+0xac>
  8c:	ldrsh	r3, [r3, r2]
  90:	b	20 <yy_get_previous_state+0x20>
  94:	mov	r0, r3
  98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  9c:	.word	0x00000000
  a0:	.word	0x00000111
  a4:	.word	0x00000100
  a8:	.word	0x000007a0
  ac:	.word	0x00000a5c
