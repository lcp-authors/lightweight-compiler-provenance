
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-traverse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_array_dim>:
   0:	add	r1, r1, r1, lsl #2
   4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8:	lsl	r1, r1, #4
   c:	ldr	r5, [pc, #220]	; f0 <print_array_dim+0xf0>
  10:	add	r8, r5, r1
  14:	ldr	r3, [r8, #804]	; 0x324
  18:	cmp	r3, #0
  1c:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  20:	ldr	r9, [pc, #204]	; f4 <print_array_dim+0xf4>
  24:	add	r1, r1, #808	; 0x328
  28:	mov	r6, r0
  2c:	ldr	r3, [r9]
  30:	add	r5, r5, r1
  34:	cmp	r3, #0
  38:	mov	r4, #0
  3c:	ldr	sl, [pc, #180]	; f8 <print_array_dim+0xf8>
  40:	ldr	r7, [pc, #180]	; fc <print_array_dim+0xfc>
  44:	ldr	fp, [pc, #180]	; 100 <print_array_dim+0x100>
  48:	beq	ac <print_array_dim+0xac>
  4c:	ldr	r3, [r8, #800]	; 0x320
  50:	mov	r1, fp
  54:	add	r3, r4, r3
  58:	add	r2, r3, #18
  5c:	add	ip, r7, r3, lsl #2
  60:	ldr	r0, [r7, r2, lsl #2]
  64:	cmp	r0, #0
  68:	mov	r0, r6
  6c:	beq	cc <print_array_dim+0xcc>
  70:	ldr	r3, [ip, #4]
  74:	ldr	r2, [ip, #36]	; 0x24
  78:	bl	0 <fprintf>
  7c:	ldr	r3, [r8, #804]	; 0x324
  80:	add	r4, r4, #1
  84:	cmp	r4, r3
  88:	mov	r1, r6
  8c:	mov	r0, #44	; 0x2c
  90:	add	r5, r5, #4
  94:	blt	9c <print_array_dim+0x9c>
  98:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  9c:	bl	0 <fputc>
  a0:	ldr	r3, [r9]
  a4:	cmp	r3, #0
  a8:	bne	4c <print_array_dim+0x4c>
  ac:	ldr	r3, [r5]
  b0:	mov	r1, sl
  b4:	cmn	r3, #1
  b8:	mov	r0, r6
  bc:	mov	r2, r3
  c0:	beq	e0 <print_array_dim+0xe0>
  c4:	bl	0 <fprintf>
  c8:	b	7c <print_array_dim+0x7c>
  cc:	ldr	r2, [ip, #4]
  d0:	mov	r1, sl
  d4:	mov	r0, r6
  d8:	bl	0 <fprintf>
  dc:	b	7c <print_array_dim+0x7c>
  e0:	mov	r1, r6
  e4:	mov	r0, #63	; 0x3f
  e8:	bl	0 <fputc>
  ec:	b	7c <print_array_dim+0x7c>
	...
  f8:	.word	0x00000008
	...

00000104 <print_full_field_name>:
 104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 108:	sub	sp, sp, #20
 10c:	cmp	r1, #1
 110:	mov	r4, r0
 114:	str	r2, [sp, #4]
 118:	beq	2a4 <print_full_field_name+0x1a0>
 11c:	ldr	r5, [pc, #736]	; 404 <print_full_field_name+0x300>
 120:	mov	sl, r1
 124:	ldr	r3, [r5, #3748]	; 0xea4
 128:	cmp	r3, #0
 12c:	addgt	r7, r5, #3616	; 0xe20
 130:	movgt	r6, #0
 134:	movgt	r8, #46	; 0x2e
 138:	bgt	144 <print_full_field_name+0x40>
 13c:	b	168 <print_full_field_name+0x64>
 140:	bl	0 <fputc>
 144:	mov	r1, r4
 148:	ldr	r0, [r7, #4]!
 14c:	bl	0 <fputs>
 150:	ldr	r3, [r5, #3748]	; 0xea4
 154:	add	r6, r6, #1
 158:	cmp	r3, r6
 15c:	mov	r1, r4
 160:	mov	r0, r8
 164:	bgt	140 <print_full_field_name+0x3c>
 168:	cmp	sl, #2
 16c:	beq	178 <print_full_field_name+0x74>
 170:	add	sp, sp, #20
 174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 178:	ldr	r3, [r5, #136]	; 0x88
 17c:	cmp	r3, #0
 180:	ble	3e4 <print_full_field_name+0x2e0>
 184:	mov	r9, #0
 188:	ldr	r8, [pc, #632]	; 408 <print_full_field_name+0x304>
 18c:	mov	r6, r9
 190:	add	r7, sp, #12
 194:	mov	fp, #44	; 0x2c
 198:	b	1b8 <print_full_field_name+0xb4>
 19c:	ldr	r3, [sp, #12]
 1a0:	cmp	r3, #1
 1a4:	beq	1dc <print_full_field_name+0xd8>
 1a8:	ldr	r3, [r5, #136]	; 0x88
 1ac:	add	r6, r6, #1
 1b0:	cmp	r3, r6
 1b4:	ble	238 <print_full_field_name+0x134>
 1b8:	mov	r1, r7
 1bc:	ldr	r0, [r8, #4]!
 1c0:	bl	0 <coda_type_get_class>
 1c4:	cmp	r0, #0
 1c8:	beq	19c <print_full_field_name+0x98>
 1cc:	bl	0 <handle_coda_error>
 1d0:	ldr	r3, [sp, #12]
 1d4:	cmp	r3, #1
 1d8:	bne	1a8 <print_full_field_name+0xa4>
 1dc:	add	r3, r9, r9, lsl #2
 1e0:	add	r3, r5, r3, lsl #4
 1e4:	ldr	r2, [r3, #804]	; 0x324
 1e8:	cmp	r2, #0
 1ec:	ble	1a8 <print_full_field_name+0xa4>
 1f0:	ldr	r2, [r3, #800]	; 0x320
 1f4:	mov	r1, r4
 1f8:	cmp	r2, #0
 1fc:	mov	r0, fp
 200:	mov	r3, r4
 204:	mov	r2, sl
 208:	bne	29c <print_full_field_name+0x198>
 20c:	mov	r1, #1
 210:	ldr	r0, [pc, #500]	; 40c <print_full_field_name+0x308>
 214:	bl	0 <fwrite>
 218:	mov	r1, r9
 21c:	mov	r0, r4
 220:	bl	0 <print_array_dim>
 224:	ldr	r3, [r5, #136]	; 0x88
 228:	add	r6, r6, #1
 22c:	cmp	r3, r6
 230:	add	r9, r9, #1
 234:	bgt	1b8 <print_full_field_name+0xb4>
 238:	ldr	r3, [sp, #4]
 23c:	cmp	r3, #0
 240:	beq	280 <print_full_field_name+0x17c>
 244:	ldr	r3, [r5, #3360]	; 0xd20
 248:	cmp	r9, r3
 24c:	bge	280 <print_full_field_name+0x17c>
 250:	add	r3, r9, r9, lsl #2
 254:	add	r5, r5, r3, lsl #4
 258:	ldr	r3, [r5, #800]	; 0x320
 25c:	cmp	r3, #0
 260:	beq	3cc <print_full_field_name+0x2c8>
 264:	mov	r1, r4
 268:	mov	r0, #44	; 0x2c
 26c:	bl	0 <fputc>
 270:	mov	r1, r9
 274:	mov	r0, r4
 278:	bl	0 <print_array_dim>
 27c:	add	r9, r9, #1
 280:	cmp	r9, #0
 284:	ble	170 <print_full_field_name+0x6c>
 288:	mov	r1, r4
 28c:	mov	r0, #93	; 0x5d
 290:	bl	0 <fputc>
 294:	add	sp, sp, #20
 298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 29c:	bl	0 <fputc>
 2a0:	b	218 <print_full_field_name+0x114>
 2a4:	ldr	r5, [pc, #344]	; 404 <print_full_field_name+0x300>
 2a8:	mov	r9, #0
 2ac:	ldr	r3, [r5, #136]	; 0x88
 2b0:	cmp	r3, #0
 2b4:	ble	374 <print_full_field_name+0x270>
 2b8:	ldr	fp, [pc, #336]	; 410 <print_full_field_name+0x30c>
 2bc:	mov	sl, r9
 2c0:	mov	r6, r9
 2c4:	add	r8, r5, #4
 2c8:	add	r7, sp, #12
 2cc:	b	32c <print_full_field_name+0x228>
 2d0:	cmp	r3, #1
 2d4:	bne	31c <print_full_field_name+0x218>
 2d8:	cmp	r6, #0
 2dc:	beq	3bc <print_full_field_name+0x2b8>
 2e0:	add	r3, r9, r9, lsl #2
 2e4:	add	r3, r5, r3, lsl #4
 2e8:	ldr	r3, [r3, #804]	; 0x324
 2ec:	cmp	r3, #0
 2f0:	ble	318 <print_full_field_name+0x214>
 2f4:	mov	r1, r4
 2f8:	mov	r0, #91	; 0x5b
 2fc:	bl	0 <fputc>
 300:	mov	r1, r9
 304:	mov	r0, r4
 308:	bl	0 <print_array_dim>
 30c:	mov	r1, r4
 310:	mov	r0, #93	; 0x5d
 314:	bl	0 <fputc>
 318:	add	r9, r9, #1
 31c:	ldr	r3, [r5, #136]	; 0x88
 320:	add	r6, r6, #1
 324:	cmp	r3, r6
 328:	ble	374 <print_full_field_name+0x270>
 32c:	mov	r1, r7
 330:	ldr	r0, [r8, #4]!
 334:	bl	0 <coda_type_get_class>
 338:	cmp	r0, #0
 33c:	bne	3b4 <print_full_field_name+0x2b0>
 340:	ldr	r3, [sp, #12]
 344:	cmp	r3, #0
 348:	bne	2d0 <print_full_field_name+0x1cc>
 34c:	add	r3, r5, sl, lsl #2
 350:	mov	r1, fp
 354:	ldr	r2, [r3, #3620]	; 0xe24
 358:	mov	r0, r4
 35c:	bl	0 <fprintf>
 360:	ldr	r3, [r5, #136]	; 0x88
 364:	add	r6, r6, #1
 368:	cmp	r3, r6
 36c:	add	sl, sl, #1
 370:	bgt	32c <print_full_field_name+0x228>
 374:	ldr	r3, [sp, #4]
 378:	cmp	r3, #0
 37c:	beq	170 <print_full_field_name+0x6c>
 380:	ldr	r3, [r5, #3360]	; 0xd20
 384:	cmp	r3, r9
 388:	ble	170 <print_full_field_name+0x6c>
 38c:	mov	r1, r4
 390:	mov	r0, #91	; 0x5b
 394:	bl	0 <fputc>
 398:	mov	r1, r9
 39c:	mov	r0, r4
 3a0:	bl	0 <print_array_dim>
 3a4:	mov	r1, r4
 3a8:	mov	r0, #93	; 0x5d
 3ac:	bl	0 <fputc>
 3b0:	b	170 <print_full_field_name+0x6c>
 3b4:	bl	0 <handle_coda_error>
 3b8:	b	340 <print_full_field_name+0x23c>
 3bc:	mov	r1, r4
 3c0:	mov	r0, #47	; 0x2f
 3c4:	bl	0 <fputc>
 3c8:	b	2e0 <print_full_field_name+0x1dc>
 3cc:	mov	r3, r4
 3d0:	mov	r2, #2
 3d4:	mov	r1, #1
 3d8:	ldr	r0, [pc, #44]	; 40c <print_full_field_name+0x308>
 3dc:	bl	0 <fwrite>
 3e0:	b	270 <print_full_field_name+0x16c>
 3e4:	ldr	r3, [sp, #4]
 3e8:	cmp	r3, #0
 3ec:	beq	170 <print_full_field_name+0x6c>
 3f0:	ldr	r3, [r5, #3360]	; 0xd20
 3f4:	cmp	r3, #0
 3f8:	movgt	r9, #0
 3fc:	bgt	250 <print_full_field_name+0x14c>
 400:	b	170 <print_full_field_name+0x6c>
 404:	.word	0x00000000
 408:	.word	0x00000004
 40c:	.word	0x00000010
 410:	.word	0x0000000c

00000414 <handle_data_element>:
 414:	ldr	r3, [pc, #568]	; 654 <handle_data_element+0x240>
 418:	push	{r4, r5, lr}
 41c:	sub	sp, sp, #12
 420:	ldr	r2, [r3]
 424:	cmp	r2, #0
 428:	beq	43c <handle_data_element+0x28>
 42c:	cmp	r2, #1
 430:	beq	4c8 <handle_data_element+0xb4>
 434:	add	sp, sp, #12
 438:	pop	{r4, r5, pc}
 43c:	ldr	r4, [pc, #532]	; 658 <handle_data_element+0x244>
 440:	mov	r1, #1
 444:	ldr	r0, [r4]
 448:	bl	104 <print_full_field_name>
 44c:	ldr	r3, [pc, #520]	; 65c <handle_data_element+0x248>
 450:	ldr	r3, [r3]
 454:	cmp	r3, #0
 458:	bne	4d4 <handle_data_element+0xc0>
 45c:	ldr	r3, [pc, #508]	; 660 <handle_data_element+0x24c>
 460:	ldr	r3, [r3]
 464:	cmp	r3, #0
 468:	bne	5b0 <handle_data_element+0x19c>
 46c:	ldr	r3, [pc, #496]	; 664 <handle_data_element+0x250>
 470:	ldr	r3, [r3]
 474:	cmp	r3, #0
 478:	bne	56c <handle_data_element+0x158>
 47c:	mov	r0, #10
 480:	bl	0 <putchar>
 484:	ldr	r3, [pc, #476]	; 668 <handle_data_element+0x254>
 488:	ldr	r3, [r3]
 48c:	cmp	r3, #0
 490:	beq	434 <handle_data_element+0x20>
 494:	ldr	r5, [pc, #464]	; 66c <handle_data_element+0x258>
 498:	ldr	r3, [r5]
 49c:	cmp	r3, #0
 4a0:	ble	434 <handle_data_element+0x20>
 4a4:	mov	r4, #0
 4a8:	mov	r0, r4
 4ac:	bl	0 <print_all_distinct_dims>
 4b0:	ldr	r3, [r5]
 4b4:	add	r4, r4, #1
 4b8:	cmp	r4, r3
 4bc:	blt	4a8 <handle_data_element+0x94>
 4c0:	add	sp, sp, #12
 4c4:	pop	{r4, r5, pc}
 4c8:	bl	0 <export_data_element_to_ascii>
 4cc:	add	sp, sp, #12
 4d0:	pop	{r4, r5, pc}
 4d4:	ldr	r5, [pc, #404]	; 670 <handle_data_element+0x25c>
 4d8:	mov	r1, sp
 4dc:	ldr	r3, [r5, #136]	; 0x88
 4e0:	add	r3, r3, #2
 4e4:	ldr	r0, [r5, r3, lsl #2]
 4e8:	bl	0 <coda_type_get_class>
 4ec:	cmp	r0, #0
 4f0:	bne	604 <handle_data_element+0x1f0>
 4f4:	ldr	r3, [sp]
 4f8:	add	r1, sp, #4
 4fc:	cmp	r3, #6
 500:	ldr	r3, [r5, #136]	; 0x88
 504:	add	r3, r3, #2
 508:	ldr	r0, [r5, r3, lsl #2]
 50c:	beq	614 <handle_data_element+0x200>
 510:	bl	0 <coda_type_get_read_type>
 514:	cmp	r0, #0
 518:	bne	5f4 <handle_data_element+0x1e0>
 51c:	ldr	r0, [sp, #4]
 520:	bl	0 <coda_type_get_native_type_name>
 524:	mov	r1, r0
 528:	ldr	r0, [pc, #324]	; 674 <handle_data_element+0x260>
 52c:	bl	0 <printf>
 530:	ldr	r3, [sp, #4]
 534:	sub	r3, r3, #11
 538:	cmp	r3, #1
 53c:	bhi	45c <handle_data_element+0x48>
 540:	mov	r0, #40	; 0x28
 544:	bl	0 <putchar>
 548:	ldr	r1, [r5, #3360]	; 0xd20
 54c:	cmp	r1, #0
 550:	ble	640 <handle_data_element+0x22c>
 554:	ldr	r0, [r4]
 558:	sub	r1, r1, #1
 55c:	bl	0 <print_array_dim>
 560:	mov	r0, #41	; 0x29
 564:	bl	0 <putchar>
 568:	b	45c <handle_data_element+0x48>
 56c:	ldr	r2, [pc, #252]	; 670 <handle_data_element+0x25c>
 570:	add	r1, sp, #4
 574:	ldr	r3, [r2, #136]	; 0x88
 578:	add	r3, r3, #2
 57c:	ldr	r0, [r2, r3, lsl #2]
 580:	bl	0 <coda_type_get_description>
 584:	cmp	r0, #0
 588:	bne	60c <handle_data_element+0x1f8>
 58c:	ldr	r1, [sp, #4]
 590:	cmp	r1, #0
 594:	beq	47c <handle_data_element+0x68>
 598:	ldrb	r3, [r1]
 59c:	cmp	r3, #0
 5a0:	beq	47c <handle_data_element+0x68>
 5a4:	ldr	r0, [pc, #204]	; 678 <handle_data_element+0x264>
 5a8:	bl	0 <printf>
 5ac:	b	47c <handle_data_element+0x68>
 5b0:	ldr	r2, [pc, #184]	; 670 <handle_data_element+0x25c>
 5b4:	add	r1, sp, #4
 5b8:	ldr	r3, [r2, #136]	; 0x88
 5bc:	add	r3, r3, #2
 5c0:	ldr	r0, [r2, r3, lsl #2]
 5c4:	bl	0 <coda_type_get_unit>
 5c8:	cmp	r0, #0
 5cc:	bne	5fc <handle_data_element+0x1e8>
 5d0:	ldr	r1, [sp, #4]
 5d4:	cmp	r1, #0
 5d8:	beq	46c <handle_data_element+0x58>
 5dc:	ldrb	r3, [r1]
 5e0:	cmp	r3, #0
 5e4:	beq	46c <handle_data_element+0x58>
 5e8:	ldr	r0, [pc, #140]	; 67c <handle_data_element+0x268>
 5ec:	bl	0 <printf>
 5f0:	b	46c <handle_data_element+0x58>
 5f4:	bl	0 <handle_coda_error>
 5f8:	b	51c <handle_data_element+0x108>
 5fc:	bl	0 <handle_coda_error>
 600:	b	5d0 <handle_data_element+0x1bc>
 604:	bl	0 <handle_coda_error>
 608:	b	4f4 <handle_data_element+0xe0>
 60c:	bl	0 <handle_coda_error>
 610:	b	58c <handle_data_element+0x178>
 614:	bl	0 <coda_type_get_special_type>
 618:	cmp	r0, #0
 61c:	bne	638 <handle_data_element+0x224>
 620:	ldr	r0, [sp, #4]
 624:	bl	0 <coda_type_get_special_type_name>
 628:	mov	r1, r0
 62c:	ldr	r0, [pc, #64]	; 674 <handle_data_element+0x260>
 630:	bl	0 <printf>
 634:	b	45c <handle_data_element+0x48>
 638:	bl	0 <handle_coda_error>
 63c:	b	620 <handle_data_element+0x20c>
 640:	ldr	r3, [pc, #56]	; 680 <handle_data_element+0x26c>
 644:	mov	r2, #238	; 0xee
 648:	ldr	r1, [pc, #52]	; 684 <handle_data_element+0x270>
 64c:	ldr	r0, [pc, #52]	; 688 <handle_data_element+0x274>
 650:	bl	0 <__assert_fail>
	...
 674:	.word	0x00000014
 678:	.word	0x00000098
 67c:	.word	0x00000090
 680:	.word	0x00000000
 684:	.word	0x00000018
 688:	.word	0x00000070

0000068c <traverse_data>:
 68c:	push	{r4, r5, r6, r7, lr}
 690:	sub	sp, sp, #20
 694:	ldr	r4, [pc, #816]	; 9cc <traverse_data+0x340>
 698:	add	r1, sp, #4
 69c:	ldr	r3, [r4, #136]	; 0x88
 6a0:	add	r3, r3, #2
 6a4:	ldr	r0, [r4, r3, lsl #2]
 6a8:	bl	0 <coda_type_get_class>
 6ac:	cmp	r0, #0
 6b0:	bne	8d4 <traverse_data+0x248>
 6b4:	ldr	r3, [sp, #4]
 6b8:	cmp	r3, #6
 6bc:	ldrls	pc, [pc, r3, lsl #2]
 6c0:	b	7f8 <traverse_data+0x16c>
 6c4:	.word	0x000006e0
 6c8:	.word	0x0000086c
 6cc:	.word	0x00000834
 6d0:	.word	0x00000834
 6d4:	.word	0x00000834
 6d8:	.word	0x00000834
 6dc:	.word	0x00000800
 6e0:	ldr	r3, [r4, #136]	; 0x88
 6e4:	cmp	r3, #30
 6e8:	bgt	7f8 <traverse_data+0x16c>
 6ec:	ldr	r2, [r4, #3748]	; 0xea4
 6f0:	add	r3, r3, #2
 6f4:	add	r1, sp, #8
 6f8:	ldr	r0, [r4, r3, lsl #2]
 6fc:	add	r3, r2, #1
 700:	str	r3, [r4, #3748]	; 0xea4
 704:	bl	0 <coda_type_get_num_record_fields>
 708:	cmp	r0, #0
 70c:	beq	714 <traverse_data+0x88>
 710:	bl	0 <handle_coda_error>
 714:	ldr	r2, [r4, #796]	; 0x31c
 718:	ldr	r3, [r4, #136]	; 0x88
 71c:	add	r2, r2, #166	; 0xa6
 720:	add	r3, r3, #1
 724:	ldr	r7, [r4, r2, lsl #2]
 728:	str	r3, [r4, #136]	; 0x88
 72c:	cmp	r7, #0
 730:	beq	950 <traverse_data+0x2c4>
 734:	mov	r0, r7
 738:	mov	r6, #1
 73c:	bl	0 <codadump_filter_get_fieldname>
 740:	subs	r5, r0, #0
 744:	beq	99c <traverse_data+0x310>
 748:	ldr	r3, [r4, #136]	; 0x88
 74c:	add	r2, sp, #12
 750:	add	r3, r3, #1
 754:	mov	r1, r5
 758:	ldr	r0, [r4, r3, lsl #2]
 75c:	bl	0 <coda_type_get_record_field_index_from_name>
 760:	cmp	r0, #0
 764:	beq	77c <traverse_data+0xf0>
 768:	bl	0 <coda_get_errno>
 76c:	ldr	r3, [r0]
 770:	cmn	r3, #102	; 0x66
 774:	beq	9b0 <traverse_data+0x324>
 778:	bl	0 <handle_coda_error>
 77c:	ldr	r5, [r4, #796]	; 0x31c
 780:	add	r3, r5, #166	; 0xa6
 784:	add	r5, r5, #167	; 0xa7
 788:	ldr	r0, [r4, r3, lsl #2]
 78c:	bl	0 <codadump_filter_get_subfilter>
 790:	ldr	r3, [r4, #796]	; 0x31c
 794:	mov	r1, r6
 798:	add	r3, r3, #1
 79c:	str	r3, [r4, #796]	; 0x31c
 7a0:	str	r0, [r4, r5, lsl #2]
 7a4:	ldr	r0, [sp, #12]
 7a8:	bl	9e8 <traverse_record>
 7ac:	ldr	r3, [r4, #796]	; 0x31c
 7b0:	add	r5, r3, #165	; 0xa5
 7b4:	sub	r3, r3, #1
 7b8:	ldr	r0, [r4, r5, lsl #2]
 7bc:	str	r3, [r4, #796]	; 0x31c
 7c0:	bl	0 <codadump_filter_get_next_filter>
 7c4:	ldr	r3, [r4, #796]	; 0x31c
 7c8:	add	r3, r3, #166	; 0xa6
 7cc:	str	r0, [r4, r5, lsl #2]
 7d0:	ldr	r0, [r4, r3, lsl #2]
 7d4:	cmp	r0, #0
 7d8:	bne	73c <traverse_data+0xb0>
 7dc:	str	r7, [r4, r3, lsl #2]
 7e0:	ldr	r2, [r4, #136]	; 0x88
 7e4:	ldr	r3, [r4, #3748]	; 0xea4
 7e8:	sub	r2, r2, #1
 7ec:	sub	r3, r3, #1
 7f0:	str	r2, [r4, #136]	; 0x88
 7f4:	str	r3, [r4, #3748]	; 0xea4
 7f8:	add	sp, sp, #20
 7fc:	pop	{r4, r5, r6, r7, pc}
 800:	bl	0 <coda_get_option_bypass_special_types>
 804:	ldr	r3, [r4, #136]	; 0x88
 808:	cmp	r0, #0
 80c:	beq	908 <traverse_data+0x27c>
 810:	add	r3, r3, #2
 814:	add	r1, r4, r3, lsl #2
 818:	ldr	r0, [r4, r3, lsl #2]
 81c:	bl	0 <coda_type_get_special_base_type>
 820:	cmp	r0, #0
 824:	bne	98c <traverse_data+0x300>
 828:	bl	68c <traverse_data>
 82c:	add	sp, sp, #20
 830:	pop	{r4, r5, r6, r7, pc}
 834:	ldr	r3, [r4, #136]	; 0x88
 838:	add	r1, sp, #12
 83c:	add	r3, r3, #2
 840:	ldr	r0, [r4, r3, lsl #2]
 844:	bl	0 <coda_type_get_read_type>
 848:	cmp	r0, #0
 84c:	bne	940 <traverse_data+0x2b4>
 850:	ldr	r3, [sp, #12]
 854:	sub	r3, r3, #11
 858:	cmp	r3, #1
 85c:	bls	8dc <traverse_data+0x250>
 860:	bl	414 <handle_data_element>
 864:	add	sp, sp, #20
 868:	pop	{r4, r5, r6, r7, pc}
 86c:	ldr	r3, [r4, #136]	; 0x88
 870:	cmp	r3, #30
 874:	bgt	7f8 <traverse_data+0x16c>
 878:	bl	0 <dim_enter_array>
 87c:	ldr	r3, [r4, #136]	; 0x88
 880:	ldr	r2, [r4, #3360]	; 0xd20
 884:	add	r1, r3, #3
 888:	add	r0, r3, #2
 88c:	add	r2, r2, #1
 890:	add	r3, r3, #1
 894:	add	r1, r4, r1, lsl #2
 898:	ldr	r0, [r4, r0, lsl #2]
 89c:	str	r3, [r4, #136]	; 0x88
 8a0:	str	r2, [r4, #3360]	; 0xd20
 8a4:	bl	0 <coda_type_get_array_base_type>
 8a8:	cmp	r0, #0
 8ac:	bne	948 <traverse_data+0x2bc>
 8b0:	bl	68c <traverse_data>
 8b4:	ldr	r2, [r4, #136]	; 0x88
 8b8:	ldr	r3, [r4, #3360]	; 0xd20
 8bc:	sub	r2, r2, #1
 8c0:	sub	r3, r3, #1
 8c4:	str	r2, [r4, #136]	; 0x88
 8c8:	str	r3, [r4, #3360]	; 0xd20
 8cc:	bl	0 <dim_leave_array>
 8d0:	b	7f8 <traverse_data+0x16c>
 8d4:	bl	0 <handle_coda_error>
 8d8:	b	6b4 <traverse_data+0x28>
 8dc:	bl	0 <dim_enter_array>
 8e0:	ldr	r3, [r4, #3360]	; 0xd20
 8e4:	add	r3, r3, #1
 8e8:	str	r3, [r4, #3360]	; 0xd20
 8ec:	bl	414 <handle_data_element>
 8f0:	ldr	r3, [r4, #3360]	; 0xd20
 8f4:	sub	r3, r3, #1
 8f8:	str	r3, [r4, #3360]	; 0xd20
 8fc:	bl	0 <dim_leave_array>
 900:	add	sp, sp, #20
 904:	pop	{r4, r5, r6, r7, pc}
 908:	add	r3, r3, #2
 90c:	add	r1, sp, #12
 910:	ldr	r0, [r4, r3, lsl #2]
 914:	bl	0 <coda_type_get_special_type>
 918:	cmp	r0, #0
 91c:	bne	994 <traverse_data+0x308>
 920:	ldr	r3, [sp, #12]
 924:	cmp	r3, #3
 928:	ldrls	pc, [pc, r3, lsl #2]
 92c:	b	7f8 <traverse_data+0x16c>
 930:	.word	0x000007f8
 934:	.word	0x00000860
 938:	.word	0x00000860
 93c:	.word	0x000008dc
 940:	bl	0 <handle_coda_error>
 944:	b	850 <traverse_data+0x1c4>
 948:	bl	0 <handle_coda_error>
 94c:	b	8b0 <traverse_data+0x224>
 950:	ldr	r3, [sp, #8]
 954:	str	r7, [sp, #12]
 958:	cmp	r3, #0
 95c:	ble	7e0 <traverse_data+0x154>
 960:	mov	r0, r7
 964:	mov	r5, r7
 968:	mov	r1, r5
 96c:	bl	9e8 <traverse_record>
 970:	ldr	r0, [sp, #12]
 974:	ldr	r3, [sp, #8]
 978:	add	r0, r0, #1
 97c:	cmp	r3, r0
 980:	str	r0, [sp, #12]
 984:	bgt	968 <traverse_data+0x2dc>
 988:	b	7e0 <traverse_data+0x154>
 98c:	bl	0 <handle_coda_error>
 990:	b	828 <traverse_data+0x19c>
 994:	bl	0 <handle_coda_error>
 998:	b	920 <traverse_data+0x294>
 99c:	ldr	r3, [pc, #44]	; 9d0 <traverse_data+0x344>
 9a0:	ldr	r2, [pc, #44]	; 9d4 <traverse_data+0x348>
 9a4:	ldr	r1, [pc, #44]	; 9d8 <traverse_data+0x34c>
 9a8:	ldr	r0, [pc, #44]	; 9dc <traverse_data+0x350>
 9ac:	bl	0 <__assert_fail>
 9b0:	ldr	r3, [pc, #40]	; 9e0 <traverse_data+0x354>
 9b4:	mov	r2, r5
 9b8:	ldr	r1, [pc, #36]	; 9e4 <traverse_data+0x358>
 9bc:	ldr	r0, [r3]
 9c0:	bl	0 <fprintf>
 9c4:	mov	r0, #1
 9c8:	bl	0 <exit>
 9cc:	.word	0x00000000
 9d0:	.word	0x00000014
 9d4:	.word	0x00000189
 9d8:	.word	0x00000018
 9dc:	.word	0x000000a0
 9e0:	.word	0x00000000
 9e4:	.word	0x000000b0

000009e8 <traverse_record>:
 9e8:	push	{r4, r5, r6, lr}
 9ec:	sub	sp, sp, #8
 9f0:	ldr	r4, [pc, #292]	; b1c <traverse_record+0x134>
 9f4:	mov	r5, r0
 9f8:	mov	r6, r1
 9fc:	ldr	r3, [r4, #3748]	; 0xea4
 a00:	ldr	r2, [r4, #136]	; 0x88
 a04:	mov	r1, r0
 a08:	add	r2, r2, #1
 a0c:	add	r3, r4, r3, lsl #2
 a10:	ldr	r0, [r4, r2, lsl #2]
 a14:	mov	r2, sp
 a18:	str	r5, [r3, #3488]	; 0xda0
 a1c:	bl	0 <coda_type_get_record_field_hidden_status>
 a20:	cmp	r0, #0
 a24:	bne	af0 <traverse_record+0x108>
 a28:	ldr	r3, [sp]
 a2c:	adds	r3, r3, #0
 a30:	movne	r3, #1
 a34:	cmp	r6, #0
 a38:	movne	r3, #0
 a3c:	cmp	r3, #0
 a40:	bne	aac <traverse_record+0xc4>
 a44:	ldr	r3, [pc, #212]	; b20 <traverse_record+0x138>
 a48:	ldr	r3, [r3]
 a4c:	cmp	r3, #0
 a50:	ldr	r3, [r4, #136]	; 0x88
 a54:	bne	ab4 <traverse_record+0xcc>
 a58:	sub	r3, r3, #1
 a5c:	ldr	r2, [r4, #3748]	; 0xea4
 a60:	add	r3, r3, #2
 a64:	add	r2, r2, #904	; 0x388
 a68:	ldr	r0, [r4, r3, lsl #2]
 a6c:	add	r2, r4, r2, lsl #2
 a70:	mov	r1, r5
 a74:	bl	0 <coda_type_get_record_field_name>
 a78:	cmp	r0, #0
 a7c:	bne	af8 <traverse_record+0x110>
 a80:	ldr	r3, [r4, #136]	; 0x88
 a84:	mov	r1, r5
 a88:	add	r2, r3, #2
 a8c:	add	r3, r3, #1
 a90:	add	r2, r4, r2, lsl #2
 a94:	ldr	r0, [r4, r3, lsl #2]
 a98:	bl	0 <coda_type_get_record_field_type>
 a9c:	cmp	r0, #0
 aa0:	beq	aa8 <traverse_record+0xc0>
 aa4:	bl	0 <handle_coda_error>
 aa8:	bl	68c <traverse_data>
 aac:	add	sp, sp, #8
 ab0:	pop	{r4, r5, r6, pc}
 ab4:	add	r3, r3, #1
 ab8:	add	r2, sp, #4
 abc:	mov	r1, r5
 ac0:	ldr	r0, [r4, r3, lsl #2]
 ac4:	bl	0 <coda_type_get_record_field_available_status>
 ac8:	cmp	r0, #0
 acc:	bne	b00 <traverse_record+0x118>
 ad0:	ldr	r2, [sp, #4]
 ad4:	cmn	r2, #1
 ad8:	beq	b08 <traverse_record+0x120>
 adc:	ldr	r3, [r4, #136]	; 0x88
 ae0:	sub	r3, r3, #1
 ae4:	add	r1, r4, r3, lsl #2
 ae8:	str	r2, [r1, #3364]	; 0xd24
 aec:	b	a5c <traverse_record+0x74>
 af0:	bl	0 <handle_coda_error>
 af4:	b	a28 <traverse_record+0x40>
 af8:	bl	0 <handle_coda_error>
 afc:	b	a80 <traverse_record+0x98>
 b00:	bl	0 <handle_coda_error>
 b04:	b	ad0 <traverse_record+0xe8>
 b08:	bl	0 <dim_record_field_available>
 b0c:	cmp	r0, #0
 b10:	beq	aac <traverse_record+0xc4>
 b14:	ldr	r2, [sp, #4]
 b18:	b	adc <traverse_record+0xf4>
	...

00000b24 <traverse_info_init>:
 b24:	ldr	r3, [pc, #20]	; b40 <traverse_info_init+0x1c>
 b28:	mov	r2, #0
 b2c:	str	r2, [r3, #4]
 b30:	str	r2, [r3, #136]	; 0x88
 b34:	str	r2, [r3, #3360]	; 0xd20
 b38:	str	r2, [r3, #3748]	; 0xea4
 b3c:	bx	lr
 b40:	.word	0x00000000

00000b44 <traverse_info_done>:
 b44:	push	{r4, lr}
 b48:	ldr	r4, [pc, #36]	; b74 <traverse_info_done+0x30>
 b4c:	ldr	r0, [r4, #4]
 b50:	cmp	r0, #0
 b54:	beq	b5c <traverse_info_done+0x18>
 b58:	bl	0 <coda_close>
 b5c:	ldr	r3, [r4, #664]	; 0x298
 b60:	cmp	r3, #0
 b64:	popeq	{r4, pc}
 b68:	ldr	r0, [pc, #8]	; b78 <traverse_info_done+0x34>
 b6c:	pop	{r4, lr}
 b70:	b	0 <codadump_filter_remove>
 b74:	.word	0x00000000
 b78:	.word	0x00000298

00000b7c <traverse_product>:
 b7c:	push	{r4, lr}
 b80:	ldr	r4, [pc, #172]	; c34 <traverse_product+0xb8>
 b84:	mov	r1, r4
 b88:	ldr	r0, [r4, #-4]
 b8c:	bl	0 <coda_open>
 b90:	cmp	r0, #0
 b94:	bne	bf0 <traverse_product+0x74>
 b98:	ldr	r4, [pc, #152]	; c38 <traverse_product+0xbc>
 b9c:	add	r0, r4, #144	; 0x90
 ba0:	ldr	r1, [r4, #4]
 ba4:	bl	0 <coda_cursor_set_product>
 ba8:	cmp	r0, #0
 bac:	bne	be8 <traverse_product+0x6c>
 bb0:	ldr	r1, [r4, #136]	; 0x88
 bb4:	ldr	r0, [pc, #128]	; c3c <traverse_product+0xc0>
 bb8:	add	r1, r1, #2
 bbc:	add	r1, r4, r1, lsl #2
 bc0:	bl	0 <coda_cursor_get_type>
 bc4:	cmp	r0, #0
 bc8:	beq	bd0 <traverse_product+0x54>
 bcc:	bl	0 <handle_coda_error>
 bd0:	bl	68c <traverse_data>
 bd4:	ldr	r0, [r4, #4]
 bd8:	bl	0 <coda_close>
 bdc:	mov	r3, #0
 be0:	str	r3, [r4, #4]
 be4:	pop	{r4, pc}
 be8:	bl	0 <handle_coda_error>
 bec:	b	bb0 <traverse_product+0x34>
 bf0:	bl	0 <coda_get_errno>
 bf4:	ldr	r3, [r0]
 bf8:	cmn	r3, #21
 bfc:	beq	c08 <traverse_product+0x8c>
 c00:	bl	0 <handle_coda_error>
 c04:	b	b98 <traverse_product+0x1c>
 c08:	mov	r0, #0
 c0c:	bl	0 <coda_set_option_use_mmap>
 c10:	mov	r1, r4
 c14:	ldr	r0, [r4, #-4]
 c18:	bl	0 <coda_open>
 c1c:	mov	r4, r0
 c20:	mov	r0, #1
 c24:	bl	0 <coda_set_option_use_mmap>
 c28:	cmp	r4, #0
 c2c:	bne	c00 <traverse_product+0x84>
 c30:	b	b98 <traverse_product+0x1c>
 c34:	.word	0x00000004
 c38:	.word	0x00000000
 c3c:	.word	0x00000090
