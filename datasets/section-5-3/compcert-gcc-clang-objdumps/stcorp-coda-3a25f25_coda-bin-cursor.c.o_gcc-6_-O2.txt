
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	push	{r4, r5, r6, r7, r8, r9, lr}
       4:	sub	sp, sp, #84	; 0x54
       8:	ldr	r5, [r0, #48]	; 0x30
       c:	mov	r6, r2
      10:	cmp	r5, #0
      14:	mov	r7, r3
      18:	mov	r4, r0
      1c:	ldrd	r2, [sp, #112]	; 0x70
      20:	beq	cc <read_bytes+0xcc>
      24:	ldrd	r8, [r0, #40]	; 0x28
      28:	adds	r0, r6, r2
      2c:	adc	r1, r7, r3
      30:	cmp	r1, r9
      34:	cmpeq	r0, r8
      38:	bls	b4 <read_bytes+0xb4>
      3c:	ldr	r1, [r4, #16]
      40:	cmp	r1, #1
      44:	bls	9c <read_bytes+0x9c>
      48:	mov	r1, r3
      4c:	mov	r0, r2
      50:	add	r2, sp, #8
      54:	bl	0 <coda_str64>
      58:	add	r5, sp, #56	; 0x38
      5c:	mov	r0, r6
      60:	mov	r1, r7
      64:	add	r2, sp, #32
      68:	bl	0 <coda_str64>
      6c:	ldrd	r0, [r4, #40]	; 0x28
      70:	mov	r2, r5
      74:	bl	0 <coda_str64>
      78:	mvn	r0, #300	; 0x12c
      7c:	str	r5, [sp]
      80:	add	r3, sp, #32
      84:	add	r2, sp, #8
      88:	ldr	r1, [pc, #180]	; 144 <read_bytes+0x144>
      8c:	bl	0 <coda_set_error>
      90:	mvn	r0, #0
      94:	add	sp, sp, #84	; 0x54
      98:	pop	{r4, r5, r6, r7, r8, r9, pc}
      9c:	ldr	r1, [pc, #164]	; 148 <read_bytes+0x148>
      a0:	mvn	r0, #300	; 0x12c
      a4:	bl	0 <coda_set_error>
      a8:	mvn	r0, #0
      ac:	add	sp, sp, #84	; 0x54
      b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
      b4:	add	r1, r5, r6
      b8:	ldr	r0, [sp, #120]	; 0x78
      bc:	bl	0 <memcpy>
      c0:	mov	r0, #0
      c4:	add	sp, sp, #84	; 0x54
      c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
      cc:	ldr	r1, [r0, #16]
      d0:	cmp	r1, #1
      d4:	bhi	130 <read_bytes+0x130>
      d8:	ldrd	r8, [r0, #8]
      dc:	adds	r0, r6, r2
      e0:	adc	r1, r7, r3
      e4:	cmp	r1, r9
      e8:	cmpeq	r0, r8
      ec:	bhi	9c <read_bytes+0x9c>
      f0:	mov	r3, r6
      f4:	ldr	r0, [r4, #56]	; 0x38
      f8:	ldr	r1, [sp, #120]	; 0x78
      fc:	bl	0 <pread>
     100:	cmp	r0, #0
     104:	movge	r0, r5
     108:	bge	94 <read_bytes+0x94>
     10c:	bl	0 <__errno_location>
     110:	ldr	r0, [r0]
     114:	bl	0 <strerror>
     118:	ldr	r1, [pc, #44]	; 14c <read_bytes+0x14c>
     11c:	mov	r2, r0
     120:	mvn	r0, #21
     124:	bl	0 <coda_set_error>
     128:	mvn	r0, #0
     12c:	b	94 <read_bytes+0x94>
     130:	ldr	r3, [pc, #24]	; 150 <read_bytes+0x150>
     134:	mov	r2, #83	; 0x53
     138:	ldr	r1, [pc, #20]	; 154 <read_bytes+0x154>
     13c:	ldr	r0, [pc, #20]	; 158 <read_bytes+0x158>
     140:	bl	0 <__assert_fail>
     144:	.word	0x0000002c
     148:	.word	0x00000000
     14c:	.word	0x00000108
     150:	.word	0x00000000
     154:	.word	0x00000068
     158:	.word	0x000000b8

0000015c <read_bits>:
     15c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     160:	sub	sp, sp, #44	; 0x2c
     164:	and	r6, r2, #7
     168:	ldrd	r8, [sp, #80]	; 0x50
     16c:	mov	r7, #0
     170:	mov	r5, r3
     174:	adds	r6, r6, r8
     178:	adc	r7, r7, r9
     17c:	cmp	r6, #9
     180:	sbcs	r3, r7, #0
     184:	rsb	r6, r6, #0
     188:	mov	r4, r2
     18c:	and	r6, r6, #7
     190:	blt	2d0 <read_bits+0x174>
     194:	cmp	r6, #0
     198:	mov	sl, r0
     19c:	beq	274 <read_bits+0x118>
     1a0:	mov	r2, #24
     1a4:	mov	r3, #0
     1a8:	mov	r0, r8
     1ac:	mov	r1, r9
     1b0:	bl	0 <__aeabi_ldivmod>
     1b4:	strd	r2, [sp, #16]
     1b8:	orrs	r3, r2, r3
     1bc:	bne	350 <read_bits+0x1f4>
     1c0:	cmp	r8, #1
     1c4:	sbcs	r3, r9, #0
     1c8:	blt	324 <read_bits+0x1c8>
     1cc:	ldr	r3, [sp, #88]	; 0x58
     1d0:	add	r7, sp, #32
     1d4:	add	fp, r3, #3
     1d8:	b	23c <read_bits+0xe0>
     1dc:	ldrb	r1, [sp, #34]	; 0x22
     1e0:	ldrb	r2, [sp, #33]	; 0x21
     1e4:	ldrb	r3, [sp, #32]
     1e8:	ldrb	r0, [sp, #35]	; 0x23
     1ec:	strb	r1, [sp, #37]	; 0x25
     1f0:	strb	r2, [sp, #38]	; 0x26
     1f4:	strb	r0, [sp, #36]	; 0x24
     1f8:	strb	r3, [sp, #39]	; 0x27
     1fc:	ldr	r3, [sp, #36]	; 0x24
     200:	subs	r8, r8, #24
     204:	sbc	r9, r9, #0
     208:	lsr	r3, r3, r6
     20c:	adds	r4, r4, #24
     210:	adc	r5, r5, #0
     214:	cmp	r8, #1
     218:	sbcs	r2, r9, #0
     21c:	lsr	r1, r3, #16
     220:	lsr	r2, r3, #8
     224:	strb	r3, [fp, #-1]
     228:	strb	r1, [fp, #-3]
     22c:	strb	r2, [fp, #-2]
     230:	str	r3, [sp, #36]	; 0x24
     234:	add	fp, fp, #3
     238:	blt	324 <read_bits+0x1c8>
     23c:	mov	r0, #4
     240:	mov	r1, #0
     244:	lsr	r2, r4, #3
     248:	strd	r0, [sp]
     24c:	str	r7, [sp, #8]
     250:	orr	r2, r2, r5, lsl #29
     254:	asr	r3, r5, #3
     258:	mov	r0, sl
     25c:	bl	0 <read_bytes>
     260:	cmp	r0, #0
     264:	beq	1dc <read_bits+0x80>
     268:	mvn	r0, #0
     26c:	add	sp, sp, #44	; 0x2c
     270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     274:	and	r2, r8, #7
     278:	mov	r3, #0
     27c:	orrs	r3, r2, r3
     280:	bne	450 <read_bits+0x2f4>
     284:	cmp	r8, #1
     288:	sbcs	r3, r9, #0
     28c:	blt	324 <read_bits+0x1c8>
     290:	ldr	r0, [sp, #88]	; 0x58
     294:	lsr	r3, r8, #3
     298:	orr	r3, r3, r9, lsl #29
     29c:	asr	r1, r9, #3
     2a0:	lsr	r2, r4, #3
     2a4:	str	r0, [sp, #8]
     2a8:	str	r3, [sp]
     2ac:	mov	r0, sl
     2b0:	str	r1, [sp, #4]
     2b4:	orr	r2, r2, r5, lsl #29
     2b8:	asr	r3, r5, #3
     2bc:	bl	0 <read_bytes>
     2c0:	adds	r0, r0, #0
     2c4:	mvnne	r0, #0
     2c8:	add	sp, sp, #44	; 0x2c
     2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2d0:	ldr	r3, [sp, #88]	; 0x58
     2d4:	mov	sl, #1
     2d8:	mov	fp, #0
     2dc:	lsr	r2, r2, #3
     2e0:	str	r3, [sp, #8]
     2e4:	strd	sl, [sp]
     2e8:	orr	r2, r2, r5, lsl #29
     2ec:	asr	r3, r5, #3
     2f0:	bl	0 <read_bytes>
     2f4:	cmp	r0, #0
     2f8:	bne	268 <read_bits+0x10c>
     2fc:	cmp	r6, #0
     300:	and	r2, r8, #7
     304:	ldrne	r3, [sp, #88]	; 0x58
     308:	ldrbne	r3, [r3]
     30c:	asrne	r6, r3, r6
     310:	ldrne	r3, [sp, #88]	; 0x58
     314:	strbne	r6, [r3]
     318:	mov	r3, #0
     31c:	orrs	r3, r2, r3
     320:	bne	330 <read_bits+0x1d4>
     324:	mov	r0, #0
     328:	add	sp, sp, #44	; 0x2c
     32c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     330:	ldr	r3, [sp, #88]	; 0x58
     334:	mvn	r2, #0
     338:	ldrb	r3, [r3]
     33c:	bic	r3, r3, r2, lsl r8
     340:	ldr	r2, [sp, #88]	; 0x58
     344:	strb	r3, [r2]
     348:	add	sp, sp, #44	; 0x2c
     34c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     350:	ldrd	r0, [sp, #16]
     354:	and	r3, r4, #7
     358:	ldr	ip, [sp, #16]
     35c:	uxtb	fp, r0
     360:	add	r2, fp, r3
     364:	ands	r2, r2, #7
     368:	add	r3, r3, r0
     36c:	movne	r2, #1
     370:	add	r3, r2, r3, lsr #3
     374:	mov	r1, r3
     378:	add	r7, sp, #32
     37c:	mov	r3, #0
     380:	ands	fp, fp, #7
     384:	lsr	r2, r4, #3
     388:	movne	fp, #1
     38c:	stmib	sp, {r3, r7}
     390:	str	r1, [sp]
     394:	orr	r2, r2, r5, lsl #29
     398:	asr	r3, r5, #3
     39c:	mov	r0, sl
     3a0:	str	r1, [sp, #28]
     3a4:	add	fp, fp, ip, lsr #3
     3a8:	bl	0 <read_bytes>
     3ac:	cmp	r0, #0
     3b0:	bne	268 <read_bits+0x10c>
     3b4:	ldr	r1, [sp, #28]
     3b8:	str	r0, [sp, #36]	; 0x24
     3bc:	cmp	r1, #0
     3c0:	beq	4b0 <read_bits+0x354>
     3c4:	add	r1, r7, r1
     3c8:	add	r3, sp, #39	; 0x27
     3cc:	ldrb	r2, [r7], #1
     3d0:	cmp	r1, r7
     3d4:	strb	r2, [r3], #-1
     3d8:	bne	3cc <read_bits+0x270>
     3dc:	ldr	r3, [sp, #28]
     3e0:	add	r2, r6, #32
     3e4:	ldr	r0, [sp, #36]	; 0x24
     3e8:	rsb	r1, r3, r3, lsl #29
     3ec:	mvn	r3, #0
     3f0:	add	r2, r2, r1, lsl #3
     3f4:	ldr	r1, [sp, #16]
     3f8:	mvn	r3, r3, lsl r1
     3fc:	and	r3, r3, r0, lsr r2
     400:	cmp	fp, #0
     404:	str	r3, [sp, #36]	; 0x24
     408:	beq	4b8 <read_bits+0x35c>
     40c:	ldr	r3, [sp, #88]	; 0x58
     410:	add	r2, sp, #40	; 0x28
     414:	add	r2, r2, fp
     418:	add	r0, r3, fp
     41c:	sub	r2, r2, #5
     420:	ldrb	r1, [r2], #-1
     424:	strb	r1, [r3], #1
     428:	cmp	r0, r3
     42c:	bne	420 <read_bits+0x2c4>
     430:	ldrd	r2, [sp, #16]
     434:	mov	r3, #0
     438:	str	r0, [sp, #88]	; 0x58
     43c:	adds	r4, r4, r2
     440:	adc	r5, r5, r3
     444:	subs	r8, r8, r2
     448:	sbc	r9, r9, r3
     44c:	b	1c0 <read_bits+0x64>
     450:	mov	r6, #1
     454:	mov	r7, #0
     458:	add	r3, sp, #36	; 0x24
     45c:	lsr	r2, r4, #3
     460:	str	r3, [sp, #8]
     464:	strd	r6, [sp]
     468:	orr	r2, r2, r5, lsl #29
     46c:	asr	r3, r5, #3
     470:	bl	0 <read_bytes>
     474:	cmp	r0, #0
     478:	bne	268 <read_bits+0x10c>
     47c:	ldrb	r3, [sp, #36]	; 0x24
     480:	and	r2, r8, #7
     484:	mvn	ip, #0
     488:	adds	r4, r4, r2
     48c:	mov	r1, #0
     490:	bic	r3, r3, ip, lsl r2
     494:	adc	r5, r5, r1
     498:	subs	r8, r8, r2
     49c:	ldr	r2, [sp, #88]	; 0x58
     4a0:	sbc	r9, r9, r1
     4a4:	strb	r3, [r2], #1
     4a8:	str	r2, [sp, #88]	; 0x58
     4ac:	b	284 <read_bits+0x128>
     4b0:	ldr	r3, [sp, #28]
     4b4:	b	400 <read_bits+0x2a4>
     4b8:	ldr	r0, [sp, #88]	; 0x58
     4bc:	b	430 <read_bits+0x2d4>

000004c0 <coda_bin_cursor_read_float>:
     4c0:	ldr	r3, [r0, #4]
     4c4:	push	{r4, r5, r6, r7, r8, r9, lr}
     4c8:	sub	r3, r3, #1
     4cc:	mov	r4, r1
     4d0:	add	r2, r0, r3, lsl #4
     4d4:	add	r3, r0, r3, lsl #4
     4d8:	ldr	r2, [r2, #8]
     4dc:	ldrd	r6, [r3, #16]
     4e0:	mov	r3, #0
     4e4:	ldr	r1, [r2]
     4e8:	sub	sp, sp, #20
     4ec:	cmp	r1, #99	; 0x63
     4f0:	ldr	r0, [r0]
     4f4:	ldrhi	r2, [r2, #4]
     4f8:	ldr	r5, [r2, #44]	; 0x2c
     4fc:	and	r2, r6, #7
     500:	orrs	r3, r2, r3
     504:	beq	564 <coda_bin_cursor_read_float+0xa4>
     508:	mov	r8, #32
     50c:	mov	r9, #0
     510:	str	r4, [sp, #8]
     514:	mov	r2, r6
     518:	mov	r3, r7
     51c:	strd	r8, [sp]
     520:	bl	15c <read_bits>
     524:	cmp	r0, #0
     528:	bne	58c <coda_bin_cursor_read_float+0xcc>
     52c:	cmp	r5, #0
     530:	movne	r0, #0
     534:	bne	55c <coda_bin_cursor_read_float+0x9c>
     538:	ldrb	r0, [r4, #2]
     53c:	ldrb	r3, [r4, #3]
     540:	ldrb	r1, [r4, #1]
     544:	ldrb	r2, [r4]
     548:	orr	r3, r3, r0, lsl #8
     54c:	mov	r0, r5
     550:	orr	r3, r3, r1, lsl #16
     554:	orr	r3, r3, r2, lsl #24
     558:	str	r3, [r4]
     55c:	add	sp, sp, #20
     560:	pop	{r4, r5, r6, r7, r8, r9, pc}
     564:	mov	r8, #4
     568:	mov	r9, #0
     56c:	lsr	r2, r6, #3
     570:	str	r4, [sp, #8]
     574:	strd	r8, [sp]
     578:	orr	r2, r2, r7, lsl #29
     57c:	asr	r3, r7, #3
     580:	bl	0 <read_bytes>
     584:	cmp	r0, #0
     588:	beq	52c <coda_bin_cursor_read_float+0x6c>
     58c:	mvn	r0, #0
     590:	b	55c <coda_bin_cursor_read_float+0x9c>

00000594 <coda_bin_cursor_read_double>:
     594:	ldr	r3, [r0, #4]
     598:	push	{r4, r5, r6, r7, r8, r9, lr}
     59c:	sub	r3, r3, #1
     5a0:	mov	r4, r1
     5a4:	add	r2, r0, r3, lsl #4
     5a8:	add	r3, r0, r3, lsl #4
     5ac:	ldr	r2, [r2, #8]
     5b0:	ldrd	r6, [r3, #16]
     5b4:	mov	r3, #0
     5b8:	ldr	r1, [r2]
     5bc:	sub	sp, sp, #20
     5c0:	cmp	r1, #99	; 0x63
     5c4:	ldr	r0, [r0]
     5c8:	ldrhi	r2, [r2, #4]
     5cc:	ldr	r5, [r2, #44]	; 0x2c
     5d0:	and	r2, r6, #7
     5d4:	orrs	r3, r2, r3
     5d8:	beq	678 <coda_bin_cursor_read_double+0xe4>
     5dc:	mov	r8, #64	; 0x40
     5e0:	mov	r9, #0
     5e4:	str	r4, [sp, #8]
     5e8:	mov	r2, r6
     5ec:	mov	r3, r7
     5f0:	strd	r8, [sp]
     5f4:	bl	15c <read_bits>
     5f8:	cmp	r0, #0
     5fc:	bne	6a0 <coda_bin_cursor_read_double+0x10c>
     600:	cmp	r5, #0
     604:	movne	r0, #0
     608:	bne	670 <coda_bin_cursor_read_double+0xdc>
     60c:	ldrb	ip, [r4, #6]
     610:	ldrb	r2, [r4, #7]
     614:	ldrb	lr, [r4, #5]
     618:	mov	r3, #0
     61c:	bic	r1, r2, #65280	; 0xff00
     620:	orr	r2, r1, ip, lsl #8
     624:	ldrb	ip, [r4, #4]
     628:	bic	r1, r2, #16711680	; 0xff0000
     62c:	orr	r2, r1, lr, lsl #16
     630:	bic	r1, r2, #-16777216	; 0xff000000
     634:	ldrb	lr, [r4, #3]
     638:	orr	r2, r1, ip, lsl #24
     63c:	ldrb	ip, [r4, #2]
     640:	bic	r1, r3, #255	; 0xff
     644:	orr	r3, lr, r1
     648:	ldrb	lr, [r4, #1]
     64c:	bic	r1, r3, #65280	; 0xff00
     650:	orr	r3, r1, ip, lsl #8
     654:	ldrb	ip, [r4]
     658:	bic	r1, r3, #16711680	; 0xff0000
     65c:	orr	r3, r1, lr, lsl #16
     660:	bic	r1, r3, #-16777216	; 0xff000000
     664:	orr	r3, r1, ip, lsl #24
     668:	mov	r0, r5
     66c:	strd	r2, [r4]
     670:	add	sp, sp, #20
     674:	pop	{r4, r5, r6, r7, r8, r9, pc}
     678:	mov	r8, #8
     67c:	mov	r9, #0
     680:	lsr	r2, r6, #3
     684:	str	r4, [sp, #8]
     688:	strd	r8, [sp]
     68c:	orr	r2, r2, r7, lsl #29
     690:	asr	r3, r7, #3
     694:	bl	0 <read_bytes>
     698:	cmp	r0, #0
     69c:	beq	600 <coda_bin_cursor_read_double+0x6c>
     6a0:	mvn	r0, #0
     6a4:	b	670 <coda_bin_cursor_read_double+0xdc>

000006a8 <read_array>:
     6a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6ac:	sub	sp, sp, #604	; 0x25c
     6b0:	mov	r6, r1
     6b4:	mov	r5, r2
     6b8:	add	r1, sp, #8
     6bc:	add	r2, sp, #12
     6c0:	mov	r7, r3
     6c4:	mov	r4, r0
     6c8:	bl	0 <coda_cursor_get_array_dim>
     6cc:	subs	sl, r0, #0
     6d0:	bne	794 <read_array+0xec>
     6d4:	mov	r1, r4
     6d8:	mov	r2, #520	; 0x208
     6dc:	add	r0, sp, #80	; 0x50
     6e0:	bl	0 <memcpy>
     6e4:	ldr	r1, [sp, #8]
     6e8:	ldr	r2, [sp, #640]	; 0x280
     6ec:	cmp	r1, #1
     6f0:	movgt	r3, #0
     6f4:	movle	r3, #1
     6f8:	cmp	r2, #1
     6fc:	orrne	r3, r3, #1
     700:	cmp	r3, #0
     704:	beq	7a4 <read_array+0xfc>
     708:	cmp	r1, #0
     70c:	ble	8d8 <read_array+0x230>
     710:	add	r3, sp, #12
     714:	add	r1, r3, r1, lsl #2
     718:	mov	r8, #1
     71c:	ldr	r2, [r3], #4
     720:	cmp	r1, r3
     724:	mul	r8, r2, r8
     728:	bne	71c <read_array+0x74>
     72c:	cmp	r8, #0
     730:	ble	788 <read_array+0xe0>
     734:	mov	r1, #0
     738:	add	r0, sp, #80	; 0x50
     73c:	bl	0 <coda_cursor_goto_array_element_by_index>
     740:	subs	r4, r0, #0
     744:	bne	794 <read_array+0xec>
     748:	sub	r9, r8, #1
     74c:	mov	r1, r5
     750:	add	r0, sp, #80	; 0x50
     754:	blx	r6
     758:	add	r5, r5, r7
     75c:	cmp	r0, #0
     760:	add	r0, sp, #80	; 0x50
     764:	bne	794 <read_array+0xec>
     768:	cmp	r9, r4
     76c:	add	r4, r4, #1
     770:	ble	780 <read_array+0xd8>
     774:	bl	0 <coda_cursor_goto_next_array_element>
     778:	cmp	r0, #0
     77c:	bne	794 <read_array+0xec>
     780:	cmp	r4, r8
     784:	blt	74c <read_array+0xa4>
     788:	mov	r0, sl
     78c:	add	sp, sp, #604	; 0x25c
     790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     794:	mvn	sl, #0
     798:	mov	r0, sl
     79c:	add	sp, sp, #604	; 0x25c
     7a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a4:	mov	ip, #1
     7a8:	add	r9, sp, #600	; 0x258
     7ac:	add	r2, sp, #12
     7b0:	mov	r0, ip
     7b4:	mov	r3, sl
     7b8:	str	ip, [r9, #-556]!	; 0xfffffdd4
     7bc:	ldr	ip, [r2], #4
     7c0:	add	r3, r3, #1
     7c4:	cmp	r1, r3
     7c8:	mul	r0, ip, r0
     7cc:	str	r0, [r9, r3, lsl #2]
     7d0:	bgt	7bc <read_array+0x114>
     7d4:	add	r3, sp, #600	; 0x258
     7d8:	add	r3, r3, r1, lsl #2
     7dc:	ldr	r8, [r3, #-556]	; 0xfffffdd4
     7e0:	cmp	r8, #0
     7e4:	ble	788 <read_array+0xe0>
     7e8:	add	r3, sp, #600	; 0x258
     7ec:	add	r3, r3, r1, lsl #2
     7f0:	add	r0, sp, #80	; 0x50
     7f4:	ldr	r3, [r3, #-560]	; 0xfffffdd0
     7f8:	mov	r1, #0
     7fc:	str	r3, [sp, #4]
     800:	bl	0 <coda_cursor_goto_array_element_by_index>
     804:	subs	r4, r0, #0
     808:	bne	794 <read_array+0xec>
     80c:	mov	fp, r4
     810:	mla	r1, r7, r4, r5
     814:	add	r0, sp, #80	; 0x50
     818:	blx	r6
     81c:	cmp	r0, #0
     820:	bne	794 <read_array+0xec>
     824:	add	fp, fp, #1
     828:	cmp	r8, fp
     82c:	bgt	8b4 <read_array+0x20c>
     830:	ldr	r3, [sp, #4]
     834:	add	r4, r4, r3
     838:	cmp	r8, r4
     83c:	bgt	810 <read_array+0x168>
     840:	cmp	r8, fp
     844:	beq	788 <read_array+0xe0>
     848:	ldr	r1, [sp, #8]
     84c:	add	r3, sp, #600	; 0x258
     850:	subs	r0, r1, #3
     854:	add	r3, r3, r1, lsl #2
     858:	mov	ip, r3
     85c:	ldr	r3, [r3, #-564]	; 0xfffffdcc
     860:	ldr	ip, [ip, #-556]	; 0xfffffdd4
     864:	add	r2, sp, #600	; 0x258
     868:	sub	r3, r3, ip
     86c:	add	r4, r4, r3
     870:	bmi	810 <read_array+0x168>
     874:	add	r3, r2, r1, lsl #2
     878:	ldr	ip, [r3, #-560]	; 0xfffffdd0
     87c:	cmp	ip, r4
     880:	bgt	810 <read_array+0x168>
     884:	add	r1, r9, r1, lsl #2
     888:	sub	r1, r1, #8
     88c:	ldr	r3, [r1, #-4]!
     890:	sub	r0, r0, #1
     894:	sub	r3, r3, ip
     898:	cmn	r0, #1
     89c:	add	r4, r4, r3
     8a0:	beq	810 <read_array+0x168>
     8a4:	ldr	ip, [r1, #4]
     8a8:	cmp	ip, r4
     8ac:	ble	88c <read_array+0x1e4>
     8b0:	b	810 <read_array+0x168>
     8b4:	add	r0, sp, #80	; 0x50
     8b8:	bl	0 <coda_cursor_goto_next_array_element>
     8bc:	cmp	r0, #0
     8c0:	bne	794 <read_array+0xec>
     8c4:	ldr	r3, [sp, #4]
     8c8:	add	r4, r4, r3
     8cc:	cmp	r4, r8
     8d0:	blt	810 <read_array+0x168>
     8d4:	b	848 <read_array+0x1a0>
     8d8:	mov	r8, #1
     8dc:	b	734 <read_array+0x8c>

000008e0 <read_partial_array>:
     8e0:	push	{r4, r5, r6, r7, r8, r9, lr}
     8e4:	sub	sp, sp, #524	; 0x20c
     8e8:	mov	r6, r3
     8ec:	mov	r7, r1
     8f0:	mov	r4, r2
     8f4:	mov	r1, r0
     8f8:	mov	r2, #520	; 0x208
     8fc:	mov	r0, sp
     900:	ldr	r8, [sp, #556]	; 0x22c
     904:	bl	0 <memcpy>
     908:	cmp	r6, #0
     90c:	ble	968 <read_partial_array+0x88>
     910:	mov	r1, r4
     914:	mov	r0, sp
     918:	bl	0 <coda_cursor_goto_array_element_by_index>
     91c:	subs	r4, r0, #0
     920:	subeq	r9, r6, #1
     924:	ldreq	r5, [sp, #552]	; 0x228
     928:	bne	974 <read_partial_array+0x94>
     92c:	mov	r1, r5
     930:	mov	r0, sp
     934:	blx	r7
     938:	add	r5, r5, r8
     93c:	cmp	r0, #0
     940:	mov	r0, sp
     944:	bne	974 <read_partial_array+0x94>
     948:	cmp	r9, r4
     94c:	add	r4, r4, #1
     950:	ble	960 <read_partial_array+0x80>
     954:	bl	0 <coda_cursor_goto_next_array_element>
     958:	cmp	r0, #0
     95c:	bne	974 <read_partial_array+0x94>
     960:	cmp	r6, r4
     964:	bne	92c <read_partial_array+0x4c>
     968:	mov	r0, #0
     96c:	add	sp, sp, #524	; 0x20c
     970:	pop	{r4, r5, r6, r7, r8, r9, pc}
     974:	mvn	r0, #0
     978:	add	sp, sp, #524	; 0x20c
     97c:	pop	{r4, r5, r6, r7, r8, r9, pc}

00000980 <transpose_array>:
     980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     984:	sub	sp, sp, #172	; 0xac
     988:	add	r4, sp, #28
     98c:	str	r1, [sp, #12]
     990:	mov	r7, r2
     994:	add	r1, sp, #24
     998:	mov	r2, r4
     99c:	bl	0 <coda_cursor_get_array_dim>
     9a0:	subs	r3, r0, #0
     9a4:	str	r3, [sp, #16]
     9a8:	bne	a9c <transpose_array+0x11c>
     9ac:	ldr	r8, [sp, #24]
     9b0:	cmp	r8, #1
     9b4:	ble	aa4 <transpose_array+0x124>
     9b8:	lsl	r2, r8, #2
     9bc:	mov	r9, r3
     9c0:	add	ip, sp, #96	; 0x60
     9c4:	add	r3, r4, r2
     9c8:	add	r0, sp, #132	; 0x84
     9cc:	mov	r1, r4
     9d0:	mov	r5, #1
     9d4:	ldr	lr, [r3, #-4]!
     9d8:	ldr	r6, [r1], #4
     9dc:	cmp	r4, r3
     9e0:	str	r9, [ip], #4
     9e4:	mul	r5, r6, r5
     9e8:	str	lr, [r0], #4
     9ec:	bne	9d4 <transpose_array+0x54>
     9f0:	cmp	r5, #1
     9f4:	ble	aa4 <transpose_array+0x124>
     9f8:	add	r3, sp, #168	; 0xa8
     9fc:	lsl	r8, r8, #2
     a00:	add	lr, r3, r8
     a04:	mov	ip, #1
     a08:	add	r0, sp, #60	; 0x3c
     a0c:	add	r6, sp, #132	; 0x84
     a10:	add	r4, r0, r2
     a14:	mov	r1, ip
     a18:	mov	r3, ip
     a1c:	add	r2, r6, r2
     a20:	str	ip, [lr, #-108]	; 0xffffff94
     a24:	str	ip, [lr, #-36]	; 0xffffffdc
     a28:	b	a30 <transpose_array+0xb0>
     a2c:	ldr	r1, [r2, #-4]!
     a30:	mul	r3, r1, r3
     a34:	str	r3, [r4, #-4]!
     a38:	cmp	r4, r0
     a3c:	bne	a2c <transpose_array+0xac>
     a40:	mul	r3, r7, r5
     a44:	mov	r0, r3
     a48:	str	r3, [sp, #8]
     a4c:	add	r3, sp, #168	; 0xa8
     a50:	add	r8, r3, r8
     a54:	mov	r3, #0
     a58:	str	r3, [r8, #-36]	; 0xffffffdc
     a5c:	str	r3, [r8, #-72]	; 0xffffffb8
     a60:	bl	0 <malloc>
     a64:	subs	r6, r0, #0
     a68:	beq	d24 <transpose_array+0x3a4>
     a6c:	sub	r7, r7, #1
     a70:	cmp	r7, #7
     a74:	ldrls	pc, [pc, r7, lsl #2]
     a78:	b	d10 <transpose_array+0x390>
     a7c:	.word	0x00000b60
     a80:	.word	0x00000bf4
     a84:	.word	0x00000d10
     a88:	.word	0x00000c84
     a8c:	.word	0x00000d10
     a90:	.word	0x00000d10
     a94:	.word	0x00000d10
     a98:	.word	0x00000ab0
     a9c:	mvn	r3, #0
     aa0:	str	r3, [sp, #16]
     aa4:	ldr	r0, [sp, #16]
     aa8:	add	sp, sp, #172	; 0xac
     aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ab0:	ldr	r2, [sp, #12]
     ab4:	mov	r3, #0
     ab8:	ldr	r8, [sp, #132]	; 0x84
     abc:	ldr	r7, [sp, #60]	; 0x3c
     ac0:	add	r1, r2, r5, lsl #3
     ac4:	mov	r9, r2
     ac8:	mov	r5, r3
     acc:	str	r1, [sp, #20]
     ad0:	ldr	ip, [sp, #96]	; 0x60
     ad4:	ldrd	r0, [r9], #8
     ad8:	add	ip, ip, #1
     adc:	lsl	r2, r3, #3
     ae0:	cmp	ip, r8
     ae4:	str	ip, [sp, #96]	; 0x60
     ae8:	strd	r0, [r6, r2]
     aec:	add	r3, r3, r7
     af0:	bne	b30 <transpose_array+0x1b0>
     af4:	add	fp, sp, #132	; 0x84
     af8:	mov	sl, r4
     afc:	add	r1, sp, #96	; 0x60
     b00:	mov	lr, r7
     b04:	mul	r0, lr, ip
     b08:	str	r5, [r1]
     b0c:	ldr	r2, [r1, #4]!
     b10:	ldr	ip, [fp, #4]!
     b14:	add	r2, r2, #1
     b18:	ldr	lr, [sl, #4]!
     b1c:	sub	r3, r3, r0
     b20:	cmp	ip, r2
     b24:	add	r3, r3, lr
     b28:	str	r2, [r1]
     b2c:	beq	b04 <transpose_array+0x184>
     b30:	ldr	r2, [sp, #20]
     b34:	cmp	r9, r2
     b38:	bne	ad0 <transpose_array+0x150>
     b3c:	ldr	r2, [sp, #8]
     b40:	mov	r1, r6
     b44:	ldr	r0, [sp, #12]
     b48:	bl	0 <memcpy>
     b4c:	mov	r0, r6
     b50:	bl	0 <free>
     b54:	ldr	r0, [sp, #16]
     b58:	add	sp, sp, #172	; 0xac
     b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b60:	ldr	r3, [sp, #132]	; 0x84
     b64:	ldr	r2, [sp, #12]
     b68:	mov	r9, #0
     b6c:	ldr	fp, [sp, #60]	; 0x3c
     b70:	str	r3, [sp, #20]
     b74:	mov	r8, r9
     b78:	mov	r3, r9
     b7c:	sub	sl, r2, #1
     b80:	ldr	ip, [sp, #96]	; 0x60
     b84:	ldrb	r2, [sl, #1]!
     b88:	ldr	r1, [sp, #20]
     b8c:	add	ip, ip, #1
     b90:	cmp	ip, r1
     b94:	strb	r2, [r6, r3]
     b98:	str	ip, [sp, #96]	; 0x60
     b9c:	add	r3, r3, fp
     ba0:	bne	be0 <transpose_array+0x260>
     ba4:	add	r7, sp, #132	; 0x84
     ba8:	mov	r5, r4
     bac:	add	r0, sp, #96	; 0x60
     bb0:	mov	lr, fp
     bb4:	mul	r1, lr, ip
     bb8:	str	r8, [r0]
     bbc:	ldr	r2, [r0, #4]!
     bc0:	ldr	ip, [r7, #4]!
     bc4:	add	r2, r2, #1
     bc8:	ldr	lr, [r5, #4]!
     bcc:	sub	r3, r3, r1
     bd0:	cmp	ip, r2
     bd4:	add	r3, r3, lr
     bd8:	str	r2, [r0]
     bdc:	beq	bb4 <transpose_array+0x234>
     be0:	ldr	r2, [sp, #8]
     be4:	add	r9, r9, #1
     be8:	cmp	r2, r9
     bec:	bgt	b80 <transpose_array+0x200>
     bf0:	b	b3c <transpose_array+0x1bc>
     bf4:	ldr	r2, [sp, #12]
     bf8:	mov	r3, #0
     bfc:	ldr	fp, [sp, #132]	; 0x84
     c00:	ldr	sl, [sp, #60]	; 0x3c
     c04:	mov	r8, r3
     c08:	mov	r9, r2
     c0c:	add	r1, r2, r5, lsl #1
     c10:	str	r1, [sp, #20]
     c14:	ldr	ip, [sp, #96]	; 0x60
     c18:	ldrh	r1, [r9], #2
     c1c:	add	ip, ip, #1
     c20:	lsl	r2, r3, #1
     c24:	cmp	ip, fp
     c28:	str	ip, [sp, #96]	; 0x60
     c2c:	strh	r1, [r6, r2]
     c30:	add	r3, r3, sl
     c34:	bne	c74 <transpose_array+0x2f4>
     c38:	add	r7, sp, #132	; 0x84
     c3c:	mov	r5, r4
     c40:	add	r0, sp, #96	; 0x60
     c44:	mov	lr, sl
     c48:	mul	r1, lr, ip
     c4c:	str	r8, [r0]
     c50:	ldr	r2, [r0, #4]!
     c54:	ldr	ip, [r7, #4]!
     c58:	add	r2, r2, #1
     c5c:	ldr	lr, [r5, #4]!
     c60:	sub	r3, r3, r1
     c64:	cmp	ip, r2
     c68:	add	r3, r3, lr
     c6c:	str	r2, [r0]
     c70:	beq	c48 <transpose_array+0x2c8>
     c74:	ldr	r2, [sp, #20]
     c78:	cmp	r9, r2
     c7c:	bne	c14 <transpose_array+0x294>
     c80:	b	b3c <transpose_array+0x1bc>
     c84:	ldr	r2, [sp, #12]
     c88:	mov	r3, #0
     c8c:	ldr	fp, [sp, #132]	; 0x84
     c90:	ldr	sl, [sp, #60]	; 0x3c
     c94:	mov	r8, r3
     c98:	mov	r9, r2
     c9c:	add	r1, r2, r5, lsl #2
     ca0:	str	r1, [sp, #20]
     ca4:	ldr	ip, [sp, #96]	; 0x60
     ca8:	ldr	r2, [r9], #4
     cac:	add	ip, ip, #1
     cb0:	cmp	ip, fp
     cb4:	str	r2, [r6, r3, lsl #2]
     cb8:	str	ip, [sp, #96]	; 0x60
     cbc:	add	r3, r3, sl
     cc0:	bne	d00 <transpose_array+0x380>
     cc4:	add	r7, sp, #132	; 0x84
     cc8:	mov	r5, r4
     ccc:	add	r0, sp, #96	; 0x60
     cd0:	mov	lr, sl
     cd4:	mul	r1, lr, ip
     cd8:	str	r8, [r0]
     cdc:	ldr	r2, [r0, #4]!
     ce0:	ldr	ip, [r7, #4]!
     ce4:	add	r2, r2, #1
     ce8:	ldr	lr, [r5, #4]!
     cec:	sub	r3, r3, r1
     cf0:	cmp	ip, r2
     cf4:	add	r3, r3, lr
     cf8:	str	r2, [r0]
     cfc:	beq	cd4 <transpose_array+0x354>
     d00:	ldr	r2, [sp, #20]
     d04:	cmp	r2, r9
     d08:	bne	ca4 <transpose_array+0x324>
     d0c:	b	b3c <transpose_array+0x1bc>
     d10:	ldr	r3, [pc, #52]	; d4c <transpose_array+0x3cc>
     d14:	mov	r2, #172	; 0xac
     d18:	ldr	r1, [pc, #48]	; d50 <transpose_array+0x3d0>
     d1c:	ldr	r0, [pc, #48]	; d54 <transpose_array+0x3d4>
     d20:	bl	0 <__assert_fail>
     d24:	mov	r3, #93	; 0x5d
     d28:	str	r3, [sp]
     d2c:	ldr	r2, [sp, #8]
     d30:	ldr	r3, [pc, #24]	; d50 <transpose_array+0x3d0>
     d34:	ldr	r1, [pc, #28]	; d58 <transpose_array+0x3d8>
     d38:	mvn	r0, #0
     d3c:	bl	0 <coda_set_error>
     d40:	mvn	r3, #0
     d44:	str	r3, [sp, #16]
     d48:	b	aa4 <transpose_array+0x124>
     d4c:	.word	0x0000000c
     d50:	.word	0x00000128
     d54:	.word	0x000001b4
     d58:	.word	0x0000017c

00000d5c <coda_bin_cursor_get_bit_size>:
     d5c:	ldr	r3, [r0, #4]
     d60:	push	{r4, r5, r6, r7, r8, r9, lr}
     d64:	sub	sp, sp, #524	; 0x20c
     d68:	add	r3, r0, r3, lsl #4
     d6c:	ldr	r3, [r3, #-8]
     d70:	ldr	ip, [r3]
     d74:	cmp	ip, #99	; 0x63
     d78:	movls	r5, r3
     d7c:	ldrhi	r5, [r3, #4]
     d80:	ldrd	r6, [r5, #24]
     d84:	cmp	r6, #0
     d88:	sbcs	r3, r7, #0
     d8c:	blt	da0 <coda_bin_cursor_get_bit_size+0x44>
     d90:	mov	r0, #0
     d94:	strd	r6, [r1]
     d98:	add	sp, sp, #524	; 0x20c
     d9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
     da0:	ldr	r3, [r5, #8]
     da4:	mov	r6, r1
     da8:	mov	r4, r0
     dac:	cmp	r3, #6
     db0:	ldrls	pc, [pc, r3, lsl #2]
     db4:	b	ebc <coda_bin_cursor_get_bit_size+0x160>
     db8:	.word	0x00000e74
     dbc:	.word	0x00000e74
     dc0:	.word	0x00000e10
     dc4:	.word	0x00000e10
     dc8:	.word	0x00000e10
     dcc:	.word	0x00000e10
     dd0:	.word	0x00000dd4
     dd4:	mov	r1, r0
     dd8:	mov	r2, #520	; 0x208
     ddc:	mov	r0, sp
     de0:	bl	0 <memcpy>
     de4:	mov	r0, sp
     de8:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
     dec:	cmp	r0, #0
     df0:	bne	e08 <coda_bin_cursor_get_bit_size+0xac>
     df4:	mov	r1, r6
     df8:	mov	r0, sp
     dfc:	bl	0 <coda_cursor_get_bit_size>
     e00:	cmp	r0, #0
     e04:	beq	d98 <coda_bin_cursor_get_bit_size+0x3c>
     e08:	mvn	r0, #0
     e0c:	b	d98 <coda_bin_cursor_get_bit_size+0x3c>
     e10:	ldr	r0, [r5, #32]
     e14:	cmp	r0, #0
     e18:	beq	e94 <coda_bin_cursor_get_bit_size+0x138>
     e1c:	mov	r2, r1
     e20:	mov	r1, r4
     e24:	bl	0 <coda_expression_eval_integer>
     e28:	cmp	r0, #0
     e2c:	bne	ea4 <coda_bin_cursor_get_bit_size+0x148>
     e30:	ldrd	r8, [r5, #24]
     e34:	mvn	r3, #0
     e38:	mvn	r2, #7
     e3c:	cmp	r9, r3
     e40:	cmpeq	r8, r2
     e44:	beq	e7c <coda_bin_cursor_get_bit_size+0x120>
     e48:	ldrd	r2, [r6]
     e4c:	cmp	r2, #0
     e50:	sbcs	r1, r3, #0
     e54:	bge	d98 <coda_bin_cursor_get_bit_size+0x3c>
     e58:	ldr	r1, [pc, #100]	; ec4 <coda_bin_cursor_get_bit_size+0x168>
     e5c:	ldr	r0, [pc, #100]	; ec8 <coda_bin_cursor_get_bit_size+0x16c>
     e60:	bl	0 <coda_set_error>
     e64:	mov	r0, r4
     e68:	bl	0 <coda_cursor_add_to_error_message>
     e6c:	mvn	r0, #0
     e70:	b	d98 <coda_bin_cursor_get_bit_size+0x3c>
     e74:	bl	0 <coda_ascbin_cursor_get_bit_size>
     e78:	b	d98 <coda_bin_cursor_get_bit_size+0x3c>
     e7c:	ldm	r6, {r1, ip}
     e80:	lsl	r3, ip, #3
     e84:	orr	r3, r3, r1, lsr #29
     e88:	lsl	r2, r1, #3
     e8c:	strd	r2, [r6]
     e90:	b	e4c <coda_bin_cursor_get_bit_size+0xf0>
     e94:	mvn	r2, #0
     e98:	mvn	r3, #0
     e9c:	strd	r2, [r1]
     ea0:	b	d98 <coda_bin_cursor_get_bit_size+0x3c>
     ea4:	ldr	r0, [pc, #32]	; ecc <coda_bin_cursor_get_bit_size+0x170>
     ea8:	bl	0 <coda_add_error_message>
     eac:	mov	r0, r4
     eb0:	bl	0 <coda_cursor_add_to_error_message>
     eb4:	mvn	r0, #0
     eb8:	b	d98 <coda_bin_cursor_get_bit_size+0x3c>
     ebc:	mov	r0, #0
     ec0:	b	d98 <coda_bin_cursor_get_bit_size+0x3c>
     ec4:	.word	0x000001d0
     ec8:	.word	0xfffffed4
     ecc:	.word	0x000001b8

00000ed0 <coda_bin_cursor_read_int8>:
     ed0:	push	{r4, r5, r6, r7, r8, r9, lr}
     ed4:	mov	r7, r1
     ed8:	ldr	r1, [r0, #4]
     edc:	sub	sp, sp, #76	; 0x4c
     ee0:	sub	r1, r1, #1
     ee4:	mov	r6, r0
     ee8:	add	r3, r0, r1, lsl #4
     eec:	add	r1, r0, r1, lsl #4
     ef0:	ldr	r3, [r3, #8]
     ef4:	ldrd	r4, [r1, #16]
     ef8:	ldr	r2, [r3]
     efc:	cmp	r2, #99	; 0x63
     f00:	ldrhi	r3, [r3, #4]
     f04:	ldrd	r2, [r3, #24]
     f08:	cmp	r2, #0
     f0c:	sbcs	r0, r3, #0
     f10:	strd	r2, [sp, #16]
     f14:	blt	ff8 <coda_bin_cursor_read_int8+0x128>
     f18:	and	r0, r4, #7
     f1c:	mov	r1, #0
     f20:	orrs	r1, r0, r1
     f24:	beq	fb8 <coda_bin_cursor_read_int8+0xe8>
     f28:	and	ip, r2, #7
     f2c:	adds	ip, ip, #0
     f30:	lsr	r0, r2, #3
     f34:	orr	r0, r0, r3, lsl #29
     f38:	movne	ip, #1
     f3c:	adds	r0, r0, ip
     f40:	asr	r1, r3, #3
     f44:	adc	r1, r1, #0
     f48:	cmp	r0, #2
     f4c:	sbcs	r1, r1, #0
     f50:	bge	1078 <coda_bin_cursor_read_int8+0x1a8>
     f54:	mov	r1, #0
     f58:	strb	r1, [r7]
     f5c:	ldr	r0, [r6]
     f60:	strd	r2, [sp]
     f64:	str	r7, [sp, #8]
     f68:	mov	r2, r4
     f6c:	mov	r3, r5
     f70:	bl	15c <read_bits>
     f74:	cmp	r0, #0
     f78:	bne	ff0 <coda_bin_cursor_read_int8+0x120>
     f7c:	ldrd	r2, [sp, #16]
     f80:	cmp	r2, #8
     f84:	sbcs	r1, r3, #0
     f88:	movge	r0, #0
     f8c:	bge	fb0 <coda_bin_cursor_read_int8+0xe0>
     f90:	ldrb	r1, [r7]
     f94:	sub	r0, r2, #1
     f98:	asr	r0, r1, r0
     f9c:	ands	r0, r0, #1
     fa0:	mvnne	r3, #0
     fa4:	movne	r0, #0
     fa8:	orrne	r2, r1, r3, lsl r2
     fac:	strbne	r2, [r7]
     fb0:	add	sp, sp, #76	; 0x4c
     fb4:	pop	{r4, r5, r6, r7, r8, r9, pc}
     fb8:	cmp	r3, #0
     fbc:	cmpeq	r2, #8
     fc0:	bne	f28 <coda_bin_cursor_read_int8+0x58>
     fc4:	mov	r8, #1
     fc8:	mov	r9, #0
     fcc:	lsr	r2, r4, #3
     fd0:	ldr	r0, [r6]
     fd4:	orr	r2, r2, r5, lsl #29
     fd8:	str	r7, [sp, #8]
     fdc:	strd	r8, [sp]
     fe0:	asr	r3, r5, #3
     fe4:	bl	0 <read_bytes>
     fe8:	cmp	r0, #0
     fec:	beq	f7c <coda_bin_cursor_read_int8+0xac>
     ff0:	mvn	r0, #0
     ff4:	b	fb0 <coda_bin_cursor_read_int8+0xe0>
     ff8:	add	r1, sp, #16
     ffc:	mov	r0, r6
    1000:	bl	d5c <coda_bin_cursor_get_bit_size>
    1004:	cmp	r0, #0
    1008:	bne	ff0 <coda_bin_cursor_read_int8+0x120>
    100c:	ldrd	r2, [sp, #16]
    1010:	cmp	r3, #0
    1014:	cmpeq	r2, #8
    1018:	bls	f18 <coda_bin_cursor_read_int8+0x48>
    101c:	mov	r0, r2
    1020:	mov	r1, r3
    1024:	add	r2, sp, #24
    1028:	bl	0 <coda_str64>
    102c:	ldr	r3, [r6, #4]
    1030:	add	r2, sp, #48	; 0x30
    1034:	add	r1, r6, r3, lsl #4
    1038:	ldr	r0, [r6, r3, lsl #4]
    103c:	ldr	r1, [r1, #4]
    1040:	lsr	r0, r0, #3
    1044:	orr	r0, r0, r1, lsl #29
    1048:	asr	r1, r1, #3
    104c:	bl	0 <coda_str64>
    1050:	ldr	r1, [r6, #4]
    1054:	add	r3, sp, #48	; 0x30
    1058:	add	r2, sp, #24
    105c:	ldr	r0, [r6, r1, lsl #4]
    1060:	ldr	r1, [pc, #36]	; 108c <coda_bin_cursor_read_int8+0x1bc>
    1064:	and	r0, r0, #7
    1068:	str	r0, [sp]
    106c:	ldr	r0, [pc, #28]	; 1090 <coda_bin_cursor_read_int8+0x1c0>
    1070:	bl	0 <coda_set_error>
    1074:	b	ff0 <coda_bin_cursor_read_int8+0x120>
    1078:	ldr	r3, [pc, #20]	; 1094 <coda_bin_cursor_read_int8+0x1c4>
    107c:	mov	r2, #177	; 0xb1
    1080:	ldr	r1, [pc, #16]	; 1098 <coda_bin_cursor_read_int8+0x1c8>
    1084:	ldr	r0, [pc, #16]	; 109c <coda_bin_cursor_read_int8+0x1cc>
    1088:	bl	0 <__assert_fail>
    108c:	.word	0x000001f8
    1090:	.word	0xfffffed4
    1094:	.word	0x0000001c
    1098:	.word	0x00000264
    109c:	.word	0x000002b4

000010a0 <coda_bin_cursor_read_uint8>:
    10a0:	push	{r4, r5, r6, r7, r8, r9, lr}
    10a4:	mov	r7, r1
    10a8:	ldr	r1, [r0, #4]
    10ac:	mvn	r5, #0
    10b0:	sub	r1, r1, #1
    10b4:	mvn	r4, #0
    10b8:	add	r3, r0, r1, lsl #4
    10bc:	sub	sp, sp, #76	; 0x4c
    10c0:	ldr	r3, [r3, #8]
    10c4:	add	r1, r0, r1, lsl #4
    10c8:	mov	r6, r0
    10cc:	ldr	r2, [r3]
    10d0:	cmp	r2, #99	; 0x63
    10d4:	ldrhi	r3, [r3, #4]
    10d8:	ldrd	r2, [r3, #24]
    10dc:	cmp	r3, r5
    10e0:	cmpeq	r2, r4
    10e4:	strd	r2, [sp, #16]
    10e8:	ldrd	r4, [r1, #16]
    10ec:	beq	1198 <coda_bin_cursor_read_uint8+0xf8>
    10f0:	and	r0, r4, #7
    10f4:	mov	r1, #0
    10f8:	orrs	r1, r0, r1
    10fc:	beq	115c <coda_bin_cursor_read_uint8+0xbc>
    1100:	and	ip, r2, #7
    1104:	adds	ip, ip, #0
    1108:	lsr	r0, r2, #3
    110c:	orr	r0, r0, r3, lsl #29
    1110:	movne	ip, #1
    1114:	adds	r0, r0, ip
    1118:	asr	r1, r3, #3
    111c:	adc	r1, r1, #0
    1120:	cmp	r0, #2
    1124:	sbcs	r1, r1, #0
    1128:	bge	1220 <coda_bin_cursor_read_uint8+0x180>
    112c:	mov	r1, #0
    1130:	strb	r1, [r7]
    1134:	ldr	r0, [r6]
    1138:	strd	r2, [sp]
    113c:	str	r7, [sp, #8]
    1140:	mov	r2, r4
    1144:	mov	r3, r5
    1148:	bl	15c <read_bits>
    114c:	adds	r0, r0, #0
    1150:	mvnne	r0, #0
    1154:	add	sp, sp, #76	; 0x4c
    1158:	pop	{r4, r5, r6, r7, r8, r9, pc}
    115c:	cmp	r3, #0
    1160:	cmpeq	r2, #8
    1164:	bne	1100 <coda_bin_cursor_read_uint8+0x60>
    1168:	mov	r8, #1
    116c:	mov	r9, #0
    1170:	lsr	r2, r4, #3
    1174:	ldr	r0, [r6]
    1178:	orr	r2, r2, r5, lsl #29
    117c:	str	r7, [sp, #8]
    1180:	strd	r8, [sp]
    1184:	asr	r3, r5, #3
    1188:	bl	0 <read_bytes>
    118c:	adds	r0, r0, #0
    1190:	mvnne	r0, #0
    1194:	b	1154 <coda_bin_cursor_read_uint8+0xb4>
    1198:	add	r1, sp, #16
    119c:	bl	d5c <coda_bin_cursor_get_bit_size>
    11a0:	cmp	r0, #0
    11a4:	bne	1218 <coda_bin_cursor_read_uint8+0x178>
    11a8:	ldrd	r2, [sp, #16]
    11ac:	cmp	r3, #0
    11b0:	cmpeq	r2, #8
    11b4:	bls	10f0 <coda_bin_cursor_read_uint8+0x50>
    11b8:	mov	r0, r2
    11bc:	mov	r1, r3
    11c0:	add	r2, sp, #24
    11c4:	bl	0 <coda_str64>
    11c8:	ldr	r3, [r6, #4]
    11cc:	add	r2, sp, #48	; 0x30
    11d0:	add	r1, r6, r3, lsl #4
    11d4:	ldr	r0, [r6, r3, lsl #4]
    11d8:	ldr	r1, [r1, #4]
    11dc:	lsr	r0, r0, #3
    11e0:	orr	r0, r0, r1, lsl #29
    11e4:	asr	r1, r1, #3
    11e8:	bl	0 <coda_str64>
    11ec:	ldr	r1, [r6, #4]
    11f0:	add	r3, sp, #48	; 0x30
    11f4:	add	r2, sp, #24
    11f8:	ldr	r0, [r6, r1, lsl #4]
    11fc:	ldr	r1, [pc, #48]	; 1234 <coda_bin_cursor_read_uint8+0x194>
    1200:	and	r0, r0, #7
    1204:	str	r0, [sp]
    1208:	ldr	r0, [pc, #40]	; 1238 <coda_bin_cursor_read_uint8+0x198>
    120c:	bl	0 <coda_set_error>
    1210:	mvn	r0, #0
    1214:	b	1154 <coda_bin_cursor_read_uint8+0xb4>
    1218:	mvn	r0, #0
    121c:	b	1154 <coda_bin_cursor_read_uint8+0xb4>
    1220:	ldr	r3, [pc, #20]	; 123c <coda_bin_cursor_read_uint8+0x19c>
    1224:	mov	r2, #233	; 0xe9
    1228:	ldr	r1, [pc, #16]	; 1240 <coda_bin_cursor_read_uint8+0x1a0>
    122c:	ldr	r0, [pc, #16]	; 1244 <coda_bin_cursor_read_uint8+0x1a4>
    1230:	bl	0 <__assert_fail>
    1234:	.word	0x000002dc
    1238:	.word	0xfffffed4
    123c:	.word	0x00000038
    1240:	.word	0x00000264
    1244:	.word	0x000002b4

00001248 <coda_bin_cursor_read_char>:
    1248:	b	10a0 <coda_bin_cursor_read_uint8>

0000124c <coda_bin_cursor_read_int16>:
    124c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1250:	mov	r4, r1
    1254:	ldr	r1, [r0, #4]
    1258:	mov	r5, r0
    125c:	sub	r1, r1, #1
    1260:	mvn	r7, #0
    1264:	add	r3, r0, r1, lsl #4
    1268:	mvn	r6, #0
    126c:	ldr	r0, [r3, #8]
    1270:	sub	sp, sp, #72	; 0x48
    1274:	add	r1, r5, r1, lsl #4
    1278:	ldr	r3, [r0]
    127c:	cmp	r3, #99	; 0x63
    1280:	ldrhi	r0, [r0, #4]
    1284:	ldrd	r2, [r0, #24]
    1288:	ldr	r8, [r0, #44]	; 0x2c
    128c:	cmp	r3, r7
    1290:	cmpeq	r2, r6
    1294:	strd	r2, [sp, #16]
    1298:	ldrd	r6, [r1, #16]
    129c:	beq	13b4 <coda_bin_cursor_read_int16+0x168>
    12a0:	and	r0, r6, #7
    12a4:	mov	r1, #0
    12a8:	orrs	r1, r0, r1
    12ac:	beq	131c <coda_bin_cursor_read_int16+0xd0>
    12b0:	cmp	r8, #0
    12b4:	beq	1360 <coda_bin_cursor_read_int16+0x114>
    12b8:	mov	r1, #0
    12bc:	ldr	r0, [r5]
    12c0:	strd	r2, [sp]
    12c4:	str	r4, [sp, #8]
    12c8:	mov	r2, r6
    12cc:	mov	r3, r7
    12d0:	strh	r1, [r4]
    12d4:	bl	15c <read_bits>
    12d8:	cmp	r0, #0
    12dc:	bne	1430 <coda_bin_cursor_read_int16+0x1e4>
    12e0:	ldrd	r2, [sp, #16]
    12e4:	cmp	r2, #16
    12e8:	sbcs	r1, r3, #0
    12ec:	movge	r0, #0
    12f0:	bge	1314 <coda_bin_cursor_read_int16+0xc8>
    12f4:	ldrh	r1, [r4]
    12f8:	sub	r0, r2, #1
    12fc:	asr	r0, r1, r0
    1300:	ands	r0, r0, #1
    1304:	mvnne	r3, #0
    1308:	movne	r0, #0
    130c:	orrne	r2, r1, r3, lsl r2
    1310:	strhne	r2, [r4]
    1314:	add	sp, sp, #72	; 0x48
    1318:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    131c:	cmp	r3, #0
    1320:	cmpeq	r2, #16
    1324:	bne	12b0 <coda_bin_cursor_read_int16+0x64>
    1328:	mov	sl, #2
    132c:	mov	fp, #0
    1330:	lsr	r2, r6, #3
    1334:	ldr	r0, [r5]
    1338:	orr	r2, r2, r7, lsl #29
    133c:	str	r4, [sp, #8]
    1340:	strd	sl, [sp]
    1344:	asr	r3, r7, #3
    1348:	bl	0 <read_bytes>
    134c:	cmp	r0, #0
    1350:	bne	1430 <coda_bin_cursor_read_int16+0x1e4>
    1354:	cmp	r8, #0
    1358:	beq	13a0 <coda_bin_cursor_read_int16+0x154>
    135c:	b	12e0 <coda_bin_cursor_read_int16+0x94>
    1360:	lsr	r1, r2, #3
    1364:	orr	r1, r1, r3, lsl #29
    1368:	and	ip, r2, #7
    136c:	rsb	r1, r1, #2
    1370:	cmp	ip, #0
    1374:	subne	r1, r1, #1
    1378:	add	r1, r4, r1
    137c:	ldr	r0, [r5]
    1380:	strh	r8, [r4]
    1384:	strd	r2, [sp]
    1388:	str	r1, [sp, #8]
    138c:	mov	r2, r6
    1390:	mov	r3, r7
    1394:	bl	15c <read_bits>
    1398:	cmp	r0, #0
    139c:	bne	1430 <coda_bin_cursor_read_int16+0x1e4>
    13a0:	ldrb	r2, [r4]
    13a4:	ldrb	r3, [r4, #1]
    13a8:	orr	r3, r3, r2, lsl #8
    13ac:	strh	r3, [r4]
    13b0:	b	12e0 <coda_bin_cursor_read_int16+0x94>
    13b4:	add	r1, sp, #16
    13b8:	mov	r0, r5
    13bc:	bl	d5c <coda_bin_cursor_get_bit_size>
    13c0:	cmp	r0, #0
    13c4:	bne	1430 <coda_bin_cursor_read_int16+0x1e4>
    13c8:	ldrd	r2, [sp, #16]
    13cc:	cmp	r3, #0
    13d0:	cmpeq	r2, #16
    13d4:	bls	12a0 <coda_bin_cursor_read_int16+0x54>
    13d8:	mov	r0, r2
    13dc:	mov	r1, r3
    13e0:	add	r2, sp, #24
    13e4:	bl	0 <coda_str64>
    13e8:	ldr	r3, [r5, #4]
    13ec:	add	r2, sp, #48	; 0x30
    13f0:	add	r1, r5, r3, lsl #4
    13f4:	ldr	r0, [r5, r3, lsl #4]
    13f8:	ldr	r1, [r1, #4]
    13fc:	lsr	r0, r0, #3
    1400:	orr	r0, r0, r1, lsl #29
    1404:	asr	r1, r1, #3
    1408:	bl	0 <coda_str64>
    140c:	ldr	r1, [r5, #4]
    1410:	add	r3, sp, #48	; 0x30
    1414:	add	r2, sp, #24
    1418:	ldr	r0, [r5, r1, lsl #4]
    141c:	ldr	r1, [pc, #20]	; 1438 <coda_bin_cursor_read_int16+0x1ec>
    1420:	and	r0, r0, #7
    1424:	str	r0, [sp]
    1428:	ldr	r0, [pc, #12]	; 143c <coda_bin_cursor_read_int16+0x1f0>
    142c:	bl	0 <coda_set_error>
    1430:	mvn	r0, #0
    1434:	b	1314 <coda_bin_cursor_read_int16+0xc8>
    1438:	.word	0x00000348
    143c:	.word	0xfffffed4

00001440 <coda_bin_cursor_read_uint16>:
    1440:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1444:	mov	r5, r1
    1448:	ldr	r1, [r0, #4]
    144c:	mov	r4, r0
    1450:	sub	r1, r1, #1
    1454:	mvn	r7, #0
    1458:	add	r3, r0, r1, lsl #4
    145c:	mvn	r6, #0
    1460:	ldr	r0, [r3, #8]
    1464:	sub	sp, sp, #72	; 0x48
    1468:	add	r1, r4, r1, lsl #4
    146c:	ldr	r3, [r0]
    1470:	cmp	r3, #99	; 0x63
    1474:	ldrhi	r0, [r0, #4]
    1478:	ldrd	r2, [r0, #24]
    147c:	ldr	r8, [r0, #44]	; 0x2c
    1480:	cmp	r3, r7
    1484:	cmpeq	r2, r6
    1488:	strd	r2, [sp, #16]
    148c:	ldrd	r6, [r1, #16]
    1490:	beq	157c <coda_bin_cursor_read_uint16+0x13c>
    1494:	and	r0, r6, #7
    1498:	mov	r1, #0
    149c:	orrs	r1, r0, r1
    14a0:	beq	1508 <coda_bin_cursor_read_uint16+0xc8>
    14a4:	cmp	r8, #0
    14a8:	bne	154c <coda_bin_cursor_read_uint16+0x10c>
    14ac:	lsr	r1, r2, #3
    14b0:	orr	r1, r1, r3, lsl #29
    14b4:	and	ip, r2, #7
    14b8:	rsb	r1, r1, #2
    14bc:	cmp	ip, #0
    14c0:	subne	r1, r1, #1
    14c4:	add	r1, r5, r1
    14c8:	ldr	r0, [r4]
    14cc:	strh	r8, [r5]
    14d0:	strd	r2, [sp]
    14d4:	str	r1, [sp, #8]
    14d8:	mov	r2, r6
    14dc:	mov	r3, r7
    14e0:	bl	15c <read_bits>
    14e4:	cmp	r0, #0
    14e8:	bne	15f8 <coda_bin_cursor_read_uint16+0x1b8>
    14ec:	ldrb	r2, [r5]
    14f0:	ldrb	r3, [r5, #1]
    14f4:	mov	r0, #0
    14f8:	orr	r3, r3, r2, lsl #8
    14fc:	strh	r3, [r5]
    1500:	add	sp, sp, #72	; 0x48
    1504:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1508:	cmp	r3, #0
    150c:	cmpeq	r2, #16
    1510:	bne	14a4 <coda_bin_cursor_read_uint16+0x64>
    1514:	mov	sl, #2
    1518:	mov	fp, #0
    151c:	lsr	r2, r6, #3
    1520:	ldr	r0, [r4]
    1524:	orr	r2, r2, r7, lsl #29
    1528:	str	r5, [sp, #8]
    152c:	strd	sl, [sp]
    1530:	asr	r3, r7, #3
    1534:	bl	0 <read_bytes>
    1538:	cmp	r0, #0
    153c:	bne	15f8 <coda_bin_cursor_read_uint16+0x1b8>
    1540:	cmp	r8, #0
    1544:	beq	14ec <coda_bin_cursor_read_uint16+0xac>
    1548:	b	1574 <coda_bin_cursor_read_uint16+0x134>
    154c:	mov	r1, #0
    1550:	ldr	r0, [r4]
    1554:	strd	r2, [sp]
    1558:	str	r5, [sp, #8]
    155c:	mov	r2, r6
    1560:	mov	r3, r7
    1564:	strh	r1, [r5]
    1568:	bl	15c <read_bits>
    156c:	cmp	r0, #0
    1570:	bne	15f8 <coda_bin_cursor_read_uint16+0x1b8>
    1574:	add	sp, sp, #72	; 0x48
    1578:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    157c:	add	r1, sp, #16
    1580:	mov	r0, r4
    1584:	bl	d5c <coda_bin_cursor_get_bit_size>
    1588:	cmp	r0, #0
    158c:	bne	15f8 <coda_bin_cursor_read_uint16+0x1b8>
    1590:	ldrd	r2, [sp, #16]
    1594:	cmp	r3, #0
    1598:	cmpeq	r2, #16
    159c:	bls	1494 <coda_bin_cursor_read_uint16+0x54>
    15a0:	mov	r0, r2
    15a4:	mov	r1, r3
    15a8:	add	r2, sp, #24
    15ac:	bl	0 <coda_str64>
    15b0:	ldr	r3, [r4, #4]
    15b4:	add	r2, sp, #48	; 0x30
    15b8:	add	r1, r4, r3, lsl #4
    15bc:	ldr	r0, [r4, r3, lsl #4]
    15c0:	ldr	r1, [r1, #4]
    15c4:	lsr	r0, r0, #3
    15c8:	orr	r0, r0, r1, lsl #29
    15cc:	asr	r1, r1, #3
    15d0:	bl	0 <coda_str64>
    15d4:	ldr	r1, [r4, #4]
    15d8:	add	r3, sp, #48	; 0x30
    15dc:	add	r2, sp, #24
    15e0:	ldr	r0, [r4, r1, lsl #4]
    15e4:	ldr	r1, [pc, #20]	; 1600 <coda_bin_cursor_read_uint16+0x1c0>
    15e8:	and	r0, r0, #7
    15ec:	str	r0, [sp]
    15f0:	ldr	r0, [pc, #12]	; 1604 <coda_bin_cursor_read_uint16+0x1c4>
    15f4:	bl	0 <coda_set_error>
    15f8:	mvn	r0, #0
    15fc:	b	1574 <coda_bin_cursor_read_uint16+0x134>
    1600:	.word	0x000003b4
    1604:	.word	0xfffffed4

00001608 <coda_bin_cursor_read_int32>:
    1608:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    160c:	mov	r4, r1
    1610:	ldr	r1, [r0, #4]
    1614:	mov	r5, r0
    1618:	sub	r1, r1, #1
    161c:	mvn	r7, #0
    1620:	add	r3, r0, r1, lsl #4
    1624:	mvn	r6, #0
    1628:	ldr	r0, [r3, #8]
    162c:	sub	sp, sp, #72	; 0x48
    1630:	add	r1, r5, r1, lsl #4
    1634:	ldr	r3, [r0]
    1638:	cmp	r3, #99	; 0x63
    163c:	ldrhi	r0, [r0, #4]
    1640:	ldrd	r2, [r0, #24]
    1644:	ldr	r8, [r0, #44]	; 0x2c
    1648:	cmp	r3, r7
    164c:	cmpeq	r2, r6
    1650:	strd	r2, [sp, #16]
    1654:	ldrd	r6, [r1, #16]
    1658:	beq	1788 <coda_bin_cursor_read_int32+0x180>
    165c:	and	r0, r6, #7
    1660:	mov	r1, #0
    1664:	orrs	r1, r0, r1
    1668:	beq	16e0 <coda_bin_cursor_read_int32+0xd8>
    166c:	cmp	r8, #0
    1670:	beq	1724 <coda_bin_cursor_read_int32+0x11c>
    1674:	mov	r1, #0
    1678:	ldr	r0, [r5]
    167c:	strd	r2, [sp]
    1680:	str	r4, [sp, #8]
    1684:	mov	r2, r6
    1688:	mov	r3, r7
    168c:	str	r1, [r4]
    1690:	bl	15c <read_bits>
    1694:	cmp	r0, #0
    1698:	bne	1804 <coda_bin_cursor_read_int32+0x1fc>
    169c:	ldrd	r6, [sp, #16]
    16a0:	cmp	r6, #32
    16a4:	sbcs	r3, r7, #0
    16a8:	movge	r0, #0
    16ac:	bge	16d8 <coda_bin_cursor_read_int32+0xd0>
    16b0:	ldr	r2, [r4]
    16b4:	sub	r0, r6, #1
    16b8:	mov	r3, #1
    16bc:	ands	r0, r2, r3, lsl r0
    16c0:	beq	16d8 <coda_bin_cursor_read_int32+0xd0>
    16c4:	lsl	r3, r3, r6
    16c8:	mov	r0, #0
    16cc:	rsb	r3, r3, #0
    16d0:	orr	r3, r3, r2
    16d4:	str	r3, [r4]
    16d8:	add	sp, sp, #72	; 0x48
    16dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    16e0:	cmp	r3, #0
    16e4:	cmpeq	r2, #32
    16e8:	bne	166c <coda_bin_cursor_read_int32+0x64>
    16ec:	mov	sl, #4
    16f0:	mov	fp, #0
    16f4:	lsr	r2, r6, #3
    16f8:	ldr	r0, [r5]
    16fc:	orr	r2, r2, r7, lsl #29
    1700:	str	r4, [sp, #8]
    1704:	strd	sl, [sp]
    1708:	asr	r3, r7, #3
    170c:	bl	0 <read_bytes>
    1710:	cmp	r0, #0
    1714:	bne	1804 <coda_bin_cursor_read_int32+0x1fc>
    1718:	cmp	r8, #0
    171c:	beq	1764 <coda_bin_cursor_read_int32+0x15c>
    1720:	b	169c <coda_bin_cursor_read_int32+0x94>
    1724:	lsr	r1, r2, #3
    1728:	orr	r1, r1, r3, lsl #29
    172c:	and	ip, r2, #7
    1730:	rsb	r1, r1, #4
    1734:	cmp	ip, #0
    1738:	subne	r1, r1, #1
    173c:	add	r1, r4, r1
    1740:	ldr	r0, [r5]
    1744:	str	r8, [r4]
    1748:	strd	r2, [sp]
    174c:	str	r1, [sp, #8]
    1750:	mov	r2, r6
    1754:	mov	r3, r7
    1758:	bl	15c <read_bits>
    175c:	cmp	r0, #0
    1760:	bne	1804 <coda_bin_cursor_read_int32+0x1fc>
    1764:	ldrb	r0, [r4, #2]
    1768:	ldrb	r3, [r4, #3]
    176c:	ldrb	r1, [r4, #1]
    1770:	ldrb	r2, [r4]
    1774:	orr	r3, r3, r0, lsl #8
    1778:	orr	r3, r3, r1, lsl #16
    177c:	orr	r3, r3, r2, lsl #24
    1780:	str	r3, [r4]
    1784:	b	169c <coda_bin_cursor_read_int32+0x94>
    1788:	add	r1, sp, #16
    178c:	mov	r0, r5
    1790:	bl	d5c <coda_bin_cursor_get_bit_size>
    1794:	cmp	r0, #0
    1798:	bne	1804 <coda_bin_cursor_read_int32+0x1fc>
    179c:	ldrd	r2, [sp, #16]
    17a0:	cmp	r3, #0
    17a4:	cmpeq	r2, #32
    17a8:	bls	165c <coda_bin_cursor_read_int32+0x54>
    17ac:	mov	r0, r2
    17b0:	mov	r1, r3
    17b4:	add	r2, sp, #24
    17b8:	bl	0 <coda_str64>
    17bc:	ldr	r3, [r5, #4]
    17c0:	add	r2, sp, #48	; 0x30
    17c4:	add	r1, r5, r3, lsl #4
    17c8:	ldr	r0, [r5, r3, lsl #4]
    17cc:	ldr	r1, [r1, #4]
    17d0:	lsr	r0, r0, #3
    17d4:	orr	r0, r0, r1, lsl #29
    17d8:	asr	r1, r1, #3
    17dc:	bl	0 <coda_str64>
    17e0:	ldr	r1, [r5, #4]
    17e4:	add	r3, sp, #48	; 0x30
    17e8:	add	r2, sp, #24
    17ec:	ldr	r0, [r5, r1, lsl #4]
    17f0:	ldr	r1, [pc, #20]	; 180c <coda_bin_cursor_read_int32+0x204>
    17f4:	and	r0, r0, #7
    17f8:	str	r0, [sp]
    17fc:	ldr	r0, [pc, #12]	; 1810 <coda_bin_cursor_read_int32+0x208>
    1800:	bl	0 <coda_set_error>
    1804:	mvn	r0, #0
    1808:	b	16d8 <coda_bin_cursor_read_int32+0xd0>
    180c:	.word	0x00000420
    1810:	.word	0xfffffed4

00001814 <coda_bin_cursor_read_uint32>:
    1814:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1818:	mov	r4, r1
    181c:	ldr	r1, [r0, #4]
    1820:	mov	r5, r0
    1824:	sub	r1, r1, #1
    1828:	mvn	r7, #0
    182c:	add	r3, r0, r1, lsl #4
    1830:	mvn	r6, #0
    1834:	ldr	r0, [r3, #8]
    1838:	sub	sp, sp, #72	; 0x48
    183c:	add	r1, r5, r1, lsl #4
    1840:	ldr	r3, [r0]
    1844:	cmp	r3, #99	; 0x63
    1848:	ldrhi	r0, [r0, #4]
    184c:	ldrd	r2, [r0, #24]
    1850:	ldr	r8, [r0, #44]	; 0x2c
    1854:	cmp	r3, r7
    1858:	cmpeq	r2, r6
    185c:	strd	r2, [sp, #16]
    1860:	ldrd	r6, [r1, #16]
    1864:	beq	1960 <coda_bin_cursor_read_uint32+0x14c>
    1868:	and	r0, r6, #7
    186c:	mov	r1, #0
    1870:	orrs	r1, r0, r1
    1874:	beq	18ec <coda_bin_cursor_read_uint32+0xd8>
    1878:	cmp	r8, #0
    187c:	bne	1930 <coda_bin_cursor_read_uint32+0x11c>
    1880:	lsr	r1, r2, #3
    1884:	orr	r1, r1, r3, lsl #29
    1888:	and	ip, r2, #7
    188c:	rsb	r1, r1, #4
    1890:	cmp	ip, #0
    1894:	subne	r1, r1, #1
    1898:	add	r1, r4, r1
    189c:	ldr	r0, [r5]
    18a0:	str	r8, [r4]
    18a4:	strd	r2, [sp]
    18a8:	str	r1, [sp, #8]
    18ac:	mov	r2, r6
    18b0:	mov	r3, r7
    18b4:	bl	15c <read_bits>
    18b8:	cmp	r0, #0
    18bc:	bne	19dc <coda_bin_cursor_read_uint32+0x1c8>
    18c0:	ldrb	r0, [r4, #2]
    18c4:	ldrb	r3, [r4, #3]
    18c8:	ldrb	r1, [r4, #1]
    18cc:	ldrb	r2, [r4]
    18d0:	orr	r3, r3, r0, lsl #8
    18d4:	mov	r0, #0
    18d8:	orr	r3, r3, r1, lsl #16
    18dc:	orr	r3, r3, r2, lsl #24
    18e0:	str	r3, [r4]
    18e4:	add	sp, sp, #72	; 0x48
    18e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    18ec:	cmp	r3, #0
    18f0:	cmpeq	r2, #32
    18f4:	bne	1878 <coda_bin_cursor_read_uint32+0x64>
    18f8:	mov	sl, #4
    18fc:	mov	fp, #0
    1900:	lsr	r2, r6, #3
    1904:	ldr	r0, [r5]
    1908:	orr	r2, r2, r7, lsl #29
    190c:	str	r4, [sp, #8]
    1910:	strd	sl, [sp]
    1914:	asr	r3, r7, #3
    1918:	bl	0 <read_bytes>
    191c:	cmp	r0, #0
    1920:	bne	19dc <coda_bin_cursor_read_uint32+0x1c8>
    1924:	cmp	r8, #0
    1928:	beq	18c0 <coda_bin_cursor_read_uint32+0xac>
    192c:	b	1958 <coda_bin_cursor_read_uint32+0x144>
    1930:	mov	r1, #0
    1934:	ldr	r0, [r5]
    1938:	strd	r2, [sp]
    193c:	str	r4, [sp, #8]
    1940:	mov	r2, r6
    1944:	mov	r3, r7
    1948:	str	r1, [r4]
    194c:	bl	15c <read_bits>
    1950:	cmp	r0, #0
    1954:	bne	19dc <coda_bin_cursor_read_uint32+0x1c8>
    1958:	add	sp, sp, #72	; 0x48
    195c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1960:	add	r1, sp, #16
    1964:	mov	r0, r5
    1968:	bl	d5c <coda_bin_cursor_get_bit_size>
    196c:	cmp	r0, #0
    1970:	bne	19dc <coda_bin_cursor_read_uint32+0x1c8>
    1974:	ldrd	r2, [sp, #16]
    1978:	cmp	r3, #0
    197c:	cmpeq	r2, #32
    1980:	bls	1868 <coda_bin_cursor_read_uint32+0x54>
    1984:	mov	r0, r2
    1988:	mov	r1, r3
    198c:	add	r2, sp, #24
    1990:	bl	0 <coda_str64>
    1994:	ldr	r3, [r5, #4]
    1998:	add	r2, sp, #48	; 0x30
    199c:	add	r1, r5, r3, lsl #4
    19a0:	ldr	r0, [r5, r3, lsl #4]
    19a4:	ldr	r1, [r1, #4]
    19a8:	lsr	r0, r0, #3
    19ac:	orr	r0, r0, r1, lsl #29
    19b0:	asr	r1, r1, #3
    19b4:	bl	0 <coda_str64>
    19b8:	ldr	r1, [r5, #4]
    19bc:	add	r3, sp, #48	; 0x30
    19c0:	add	r2, sp, #24
    19c4:	ldr	r0, [r5, r1, lsl #4]
    19c8:	ldr	r1, [pc, #20]	; 19e4 <coda_bin_cursor_read_uint32+0x1d0>
    19cc:	and	r0, r0, #7
    19d0:	str	r0, [sp]
    19d4:	ldr	r0, [pc, #12]	; 19e8 <coda_bin_cursor_read_uint32+0x1d4>
    19d8:	bl	0 <coda_set_error>
    19dc:	mvn	r0, #0
    19e0:	b	1958 <coda_bin_cursor_read_uint32+0x144>
    19e4:	.word	0x0000048c
    19e8:	.word	0xfffffed4

000019ec <coda_bin_cursor_read_int64>:
    19ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19f0:	mov	r4, r1
    19f4:	ldr	r1, [r0, #4]
    19f8:	mov	r5, r0
    19fc:	sub	r1, r1, #1
    1a00:	mvn	r7, #0
    1a04:	add	r3, r0, r1, lsl #4
    1a08:	mvn	r6, #0
    1a0c:	ldr	r0, [r3, #8]
    1a10:	sub	sp, sp, #76	; 0x4c
    1a14:	add	r1, r5, r1, lsl #4
    1a18:	ldr	r3, [r0]
    1a1c:	cmp	r3, #99	; 0x63
    1a20:	ldrhi	r0, [r0, #4]
    1a24:	ldrd	r2, [r0, #24]
    1a28:	ldr	r8, [r0, #44]	; 0x2c
    1a2c:	cmp	r3, r7
    1a30:	cmpeq	r2, r6
    1a34:	strd	r2, [sp, #16]
    1a38:	ldrd	r6, [r1, #16]
    1a3c:	beq	1bb8 <coda_bin_cursor_read_int64+0x1cc>
    1a40:	and	r0, r6, #7
    1a44:	mov	r1, #0
    1a48:	orrs	r1, r0, r1
    1a4c:	beq	1ae0 <coda_bin_cursor_read_int64+0xf4>
    1a50:	cmp	r8, #0
    1a54:	beq	1b24 <coda_bin_cursor_read_int64+0x138>
    1a58:	mov	r8, #0
    1a5c:	mov	r9, #0
    1a60:	ldr	r0, [r5]
    1a64:	strd	r2, [sp]
    1a68:	str	r4, [sp, #8]
    1a6c:	mov	r2, r6
    1a70:	mov	r3, r7
    1a74:	strd	r8, [r4]
    1a78:	bl	15c <read_bits>
    1a7c:	cmp	r0, #0
    1a80:	bne	1c34 <coda_bin_cursor_read_int64+0x248>
    1a84:	ldrd	r8, [sp, #16]
    1a88:	cmp	r8, #64	; 0x40
    1a8c:	sbcs	r3, r9, #0
    1a90:	bge	1bac <coda_bin_cursor_read_int64+0x1c0>
    1a94:	ldrd	r6, [r4]
    1a98:	sub	r1, r8, #1
    1a9c:	rsb	ip, r1, #32
    1aa0:	lsr	r2, r6, r1
    1aa4:	sub	r0, r8, #33	; 0x21
    1aa8:	orr	r2, r2, r7, lsl ip
    1aac:	orr	r2, r2, r7, lsr r0
    1ab0:	mov	r3, #0
    1ab4:	and	r2, r2, #1
    1ab8:	orrs	r3, r2, r3
    1abc:	beq	1bac <coda_bin_cursor_read_int64+0x1c0>
    1ac0:	mvn	r3, #0
    1ac4:	mov	r0, #0
    1ac8:	lsl	r8, r3, r8
    1acc:	orr	r6, r6, r8
    1ad0:	orr	r7, r7, r8, asr #31
    1ad4:	strd	r6, [r4]
    1ad8:	add	sp, sp, #76	; 0x4c
    1adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ae0:	cmp	r3, #0
    1ae4:	cmpeq	r2, #64	; 0x40
    1ae8:	bne	1a50 <coda_bin_cursor_read_int64+0x64>
    1aec:	mov	sl, #8
    1af0:	mov	fp, #0
    1af4:	lsr	r2, r6, #3
    1af8:	ldr	r0, [r5]
    1afc:	orr	r2, r2, r7, lsl #29
    1b00:	str	r4, [sp, #8]
    1b04:	strd	sl, [sp]
    1b08:	asr	r3, r7, #3
    1b0c:	bl	0 <read_bytes>
    1b10:	cmp	r0, #0
    1b14:	bne	1c34 <coda_bin_cursor_read_int64+0x248>
    1b18:	cmp	r8, #0
    1b1c:	beq	1b6c <coda_bin_cursor_read_int64+0x180>
    1b20:	b	1a84 <coda_bin_cursor_read_int64+0x98>
    1b24:	lsr	r1, r2, #3
    1b28:	orr	r1, r1, r3, lsl #29
    1b2c:	and	ip, r2, #7
    1b30:	rsb	r1, r1, #8
    1b34:	cmp	ip, #0
    1b38:	subne	r1, r1, #1
    1b3c:	mov	r8, #0
    1b40:	mov	r9, #0
    1b44:	add	r1, r4, r1
    1b48:	ldr	r0, [r5]
    1b4c:	strd	r2, [sp]
    1b50:	str	r1, [sp, #8]
    1b54:	mov	r2, r6
    1b58:	mov	r3, r7
    1b5c:	strd	r8, [r4]
    1b60:	bl	15c <read_bits>
    1b64:	cmp	r0, #0
    1b68:	bne	1c34 <coda_bin_cursor_read_int64+0x248>
    1b6c:	ldrb	r1, [r4, #6]
    1b70:	ldrb	r2, [r4, #7]
    1b74:	ldrb	r5, [r4, #2]
    1b78:	ldrb	lr, [r4, #5]
    1b7c:	ldrb	r3, [r4, #3]
    1b80:	ldrb	ip, [r4, #1]
    1b84:	ldrb	r0, [r4, #4]
    1b88:	orr	r2, r2, r1, lsl #8
    1b8c:	ldrb	r1, [r4]
    1b90:	orr	r3, r3, r5, lsl #8
    1b94:	orr	r2, r2, lr, lsl #16
    1b98:	orr	r3, r3, ip, lsl #16
    1b9c:	orr	r2, r2, r0, lsl #24
    1ba0:	orr	r3, r3, r1, lsl #24
    1ba4:	stm	r4, {r2, r3}
    1ba8:	b	1a84 <coda_bin_cursor_read_int64+0x98>
    1bac:	mov	r0, #0
    1bb0:	add	sp, sp, #76	; 0x4c
    1bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bb8:	add	r1, sp, #16
    1bbc:	mov	r0, r5
    1bc0:	bl	d5c <coda_bin_cursor_get_bit_size>
    1bc4:	cmp	r0, #0
    1bc8:	bne	1c34 <coda_bin_cursor_read_int64+0x248>
    1bcc:	ldrd	r2, [sp, #16]
    1bd0:	cmp	r3, #0
    1bd4:	cmpeq	r2, #64	; 0x40
    1bd8:	bls	1a40 <coda_bin_cursor_read_int64+0x54>
    1bdc:	mov	r0, r2
    1be0:	mov	r1, r3
    1be4:	add	r2, sp, #24
    1be8:	bl	0 <coda_str64>
    1bec:	ldr	r3, [r5, #4]
    1bf0:	add	r2, sp, #48	; 0x30
    1bf4:	add	r1, r5, r3, lsl #4
    1bf8:	ldr	r0, [r5, r3, lsl #4]
    1bfc:	ldr	r1, [r1, #4]
    1c00:	lsr	r0, r0, #3
    1c04:	orr	r0, r0, r1, lsl #29
    1c08:	asr	r1, r1, #3
    1c0c:	bl	0 <coda_str64>
    1c10:	ldr	r1, [r5, #4]
    1c14:	add	r3, sp, #48	; 0x30
    1c18:	add	r2, sp, #24
    1c1c:	ldr	r0, [r5, r1, lsl #4]
    1c20:	ldr	r1, [pc, #20]	; 1c3c <coda_bin_cursor_read_int64+0x250>
    1c24:	and	r0, r0, #7
    1c28:	str	r0, [sp]
    1c2c:	ldr	r0, [pc, #12]	; 1c40 <coda_bin_cursor_read_int64+0x254>
    1c30:	bl	0 <coda_set_error>
    1c34:	mvn	r0, #0
    1c38:	b	1ad8 <coda_bin_cursor_read_int64+0xec>
    1c3c:	.word	0x000004f8
    1c40:	.word	0xfffffed4

00001c44 <coda_bin_cursor_read_uint64>:
    1c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c48:	mov	r4, r1
    1c4c:	ldr	r1, [r0, #4]
    1c50:	mov	r5, r0
    1c54:	sub	r1, r1, #1
    1c58:	mvn	r7, #0
    1c5c:	add	r3, r0, r1, lsl #4
    1c60:	mvn	r6, #0
    1c64:	ldr	r0, [r3, #8]
    1c68:	sub	sp, sp, #76	; 0x4c
    1c6c:	add	r1, r5, r1, lsl #4
    1c70:	ldr	r3, [r0]
    1c74:	cmp	r3, #99	; 0x63
    1c78:	ldrhi	r0, [r0, #4]
    1c7c:	ldrd	r2, [r0, #24]
    1c80:	ldr	r8, [r0, #44]	; 0x2c
    1c84:	cmp	r3, r7
    1c88:	cmpeq	r2, r6
    1c8c:	strd	r2, [sp, #16]
    1c90:	ldrd	r6, [r1, #16]
    1c94:	beq	1db8 <coda_bin_cursor_read_uint64+0x174>
    1c98:	and	r0, r6, #7
    1c9c:	mov	r1, #0
    1ca0:	orrs	r1, r0, r1
    1ca4:	beq	1d40 <coda_bin_cursor_read_uint64+0xfc>
    1ca8:	cmp	r8, #0
    1cac:	bne	1d84 <coda_bin_cursor_read_uint64+0x140>
    1cb0:	lsr	r1, r2, #3
    1cb4:	orr	r1, r1, r3, lsl #29
    1cb8:	and	ip, r2, #7
    1cbc:	rsb	r1, r1, #8
    1cc0:	cmp	ip, #0
    1cc4:	subne	r1, r1, #1
    1cc8:	mov	r8, #0
    1ccc:	mov	r9, #0
    1cd0:	add	r1, r4, r1
    1cd4:	ldr	r0, [r5]
    1cd8:	strd	r2, [sp]
    1cdc:	str	r1, [sp, #8]
    1ce0:	mov	r2, r6
    1ce4:	mov	r3, r7
    1ce8:	strd	r8, [r4]
    1cec:	bl	15c <read_bits>
    1cf0:	cmp	r0, #0
    1cf4:	bne	1e34 <coda_bin_cursor_read_uint64+0x1f0>
    1cf8:	ldrb	r1, [r4, #6]
    1cfc:	ldrb	r2, [r4, #7]
    1d00:	ldrb	r5, [r4, #2]
    1d04:	ldrb	lr, [r4, #5]
    1d08:	ldrb	r3, [r4, #3]
    1d0c:	ldrb	ip, [r4, #1]
    1d10:	ldrb	r0, [r4, #4]
    1d14:	orr	r2, r2, r1, lsl #8
    1d18:	ldrb	r1, [r4]
    1d1c:	orr	r3, r3, r5, lsl #8
    1d20:	orr	r2, r2, lr, lsl #16
    1d24:	orr	r3, r3, ip, lsl #16
    1d28:	orr	r2, r2, r0, lsl #24
    1d2c:	orr	r3, r3, r1, lsl #24
    1d30:	mov	r0, #0
    1d34:	stm	r4, {r2, r3}
    1d38:	add	sp, sp, #76	; 0x4c
    1d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d40:	cmp	r3, #0
    1d44:	cmpeq	r2, #64	; 0x40
    1d48:	bne	1ca8 <coda_bin_cursor_read_uint64+0x64>
    1d4c:	mov	sl, #8
    1d50:	mov	fp, #0
    1d54:	lsr	r2, r6, #3
    1d58:	ldr	r0, [r5]
    1d5c:	orr	r2, r2, r7, lsl #29
    1d60:	str	r4, [sp, #8]
    1d64:	strd	sl, [sp]
    1d68:	asr	r3, r7, #3
    1d6c:	bl	0 <read_bytes>
    1d70:	cmp	r0, #0
    1d74:	bne	1e34 <coda_bin_cursor_read_uint64+0x1f0>
    1d78:	cmp	r8, #0
    1d7c:	beq	1cf8 <coda_bin_cursor_read_uint64+0xb4>
    1d80:	b	1db0 <coda_bin_cursor_read_uint64+0x16c>
    1d84:	mov	r8, #0
    1d88:	mov	r9, #0
    1d8c:	ldr	r0, [r5]
    1d90:	strd	r2, [sp]
    1d94:	str	r4, [sp, #8]
    1d98:	mov	r2, r6
    1d9c:	mov	r3, r7
    1da0:	strd	r8, [r4]
    1da4:	bl	15c <read_bits>
    1da8:	cmp	r0, #0
    1dac:	bne	1e34 <coda_bin_cursor_read_uint64+0x1f0>
    1db0:	add	sp, sp, #76	; 0x4c
    1db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1db8:	add	r1, sp, #16
    1dbc:	mov	r0, r5
    1dc0:	bl	d5c <coda_bin_cursor_get_bit_size>
    1dc4:	cmp	r0, #0
    1dc8:	bne	1e34 <coda_bin_cursor_read_uint64+0x1f0>
    1dcc:	ldrd	r2, [sp, #16]
    1dd0:	cmp	r3, #0
    1dd4:	cmpeq	r2, #64	; 0x40
    1dd8:	bls	1c98 <coda_bin_cursor_read_uint64+0x54>
    1ddc:	mov	r0, r2
    1de0:	mov	r1, r3
    1de4:	add	r2, sp, #24
    1de8:	bl	0 <coda_str64>
    1dec:	ldr	r3, [r5, #4]
    1df0:	add	r2, sp, #48	; 0x30
    1df4:	add	r1, r5, r3, lsl #4
    1df8:	ldr	r0, [r5, r3, lsl #4]
    1dfc:	ldr	r1, [r1, #4]
    1e00:	lsr	r0, r0, #3
    1e04:	orr	r0, r0, r1, lsl #29
    1e08:	asr	r1, r1, #3
    1e0c:	bl	0 <coda_str64>
    1e10:	ldr	r1, [r5, #4]
    1e14:	add	r3, sp, #48	; 0x30
    1e18:	add	r2, sp, #24
    1e1c:	ldr	r0, [r5, r1, lsl #4]
    1e20:	ldr	r1, [pc, #20]	; 1e3c <coda_bin_cursor_read_uint64+0x1f8>
    1e24:	and	r0, r0, #7
    1e28:	str	r0, [sp]
    1e2c:	ldr	r0, [pc, #12]	; 1e40 <coda_bin_cursor_read_uint64+0x1fc>
    1e30:	bl	0 <coda_set_error>
    1e34:	mvn	r0, #0
    1e38:	b	1db0 <coda_bin_cursor_read_uint64+0x16c>
    1e3c:	.word	0x00000564
    1e40:	.word	0xfffffed4

00001e44 <coda_bin_cursor_get_string_length>:
    1e44:	push	{r4, lr}
    1e48:	sub	sp, sp, #8
    1e4c:	mov	r4, r1
    1e50:	mov	r1, sp
    1e54:	bl	d5c <coda_bin_cursor_get_bit_size>
    1e58:	cmp	r0, #0
    1e5c:	bne	1e88 <coda_bin_cursor_get_string_length+0x44>
    1e60:	ldrd	r2, [sp]
    1e64:	cmp	r2, #0
    1e68:	sbcs	r1, r3, #0
    1e6c:	lsrge	r2, r2, #3
    1e70:	mvnlt	r3, #0
    1e74:	orrge	r2, r2, r3, lsl #29
    1e78:	strlt	r3, [r4]
    1e7c:	strge	r2, [r4]
    1e80:	add	sp, sp, #8
    1e84:	pop	{r4, pc}
    1e88:	mvn	r0, #0
    1e8c:	b	1e80 <coda_bin_cursor_get_string_length+0x3c>

00001e90 <coda_bin_cursor_get_num_elements>:
    1e90:	ldr	r3, [r0, #4]
    1e94:	add	r3, r0, r3, lsl #4
    1e98:	ldr	r3, [r3, #-8]
    1e9c:	ldr	r2, [r3]
    1ea0:	cmp	r2, #99	; 0x63
    1ea4:	ldrhi	r3, [r3, #4]
    1ea8:	ldr	r3, [r3, #8]
    1eac:	cmp	r3, #1
    1eb0:	bls	1ec4 <coda_bin_cursor_get_num_elements+0x34>
    1eb4:	mov	r3, #1
    1eb8:	str	r3, [r1]
    1ebc:	mov	r0, #0
    1ec0:	bx	lr
    1ec4:	b	0 <coda_ascbin_cursor_get_num_elements>

00001ec8 <coda_bin_cursor_read_string>:
    1ec8:	ldr	r3, [r0, #4]
    1ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ed0:	sub	r3, r3, #1
    1ed4:	mov	r7, r1
    1ed8:	add	r1, r0, r3, lsl #4
    1edc:	mov	r6, r0
    1ee0:	ldr	r1, [r1, #8]
    1ee4:	add	r3, r6, r3, lsl #4
    1ee8:	sub	sp, sp, #84	; 0x54
    1eec:	ldr	r0, [r1]
    1ef0:	ldrd	r8, [r3, #16]
    1ef4:	cmp	r0, #99	; 0x63
    1ef8:	ldrhi	r1, [r1, #4]
    1efc:	ldrd	r0, [r1, #24]
    1f00:	cmp	r0, #0
    1f04:	sbcs	ip, r1, #0
    1f08:	lsrge	r4, r0, #3
    1f0c:	orrge	r4, r4, r1, lsl #29
    1f10:	asrge	r5, r1, #3
    1f14:	blt	1f88 <coda_bin_cursor_read_string+0xc0>
    1f18:	cmp	r4, r2
    1f1c:	asr	r1, r2, #31
    1f20:	sbcs	r3, r5, r1
    1f24:	mov	r0, r2
    1f28:	subge	r2, r2, #1
    1f2c:	movge	r4, r2
    1f30:	asrge	r5, r4, #31
    1f34:	cmp	r4, #1
    1f38:	sbcs	r3, r5, #0
    1f3c:	movlt	r0, #0
    1f40:	strblt	r0, [r7]
    1f44:	blt	1f80 <coda_bin_cursor_read_string+0xb8>
    1f48:	lsl	r1, r5, #3
    1f4c:	orr	r1, r1, r4, lsr #29
    1f50:	lsl	ip, r4, #3
    1f54:	ldr	r0, [r6]
    1f58:	mov	r2, r8
    1f5c:	str	r7, [sp, #8]
    1f60:	mov	r3, r9
    1f64:	str	r1, [sp, #4]
    1f68:	str	ip, [sp]
    1f6c:	bl	15c <read_bits>
    1f70:	cmp	r0, #0
    1f74:	bne	1fdc <coda_bin_cursor_read_string+0x114>
    1f78:	add	r4, r7, r4
    1f7c:	strb	r0, [r4]
    1f80:	add	sp, sp, #84	; 0x54
    1f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f88:	add	r1, sp, #24
    1f8c:	mov	r0, r6
    1f90:	str	r2, [sp, #20]
    1f94:	bl	d5c <coda_bin_cursor_get_bit_size>
    1f98:	cmp	r0, #0
    1f9c:	bne	1fdc <coda_bin_cursor_read_string+0x114>
    1fa0:	ldrd	sl, [sp, #24]
    1fa4:	ldr	r2, [sp, #20]
    1fa8:	cmp	sl, #0
    1fac:	sbcs	r3, fp, #0
    1fb0:	blt	1fe4 <coda_bin_cursor_read_string+0x11c>
    1fb4:	and	r0, sl, #7
    1fb8:	mov	r1, #0
    1fbc:	orrs	r3, r0, r1
    1fc0:	lsreq	r4, sl, #3
    1fc4:	orreq	r4, r4, fp, lsl #29
    1fc8:	asreq	r5, fp, #3
    1fcc:	beq	1f18 <coda_bin_cursor_read_string+0x50>
    1fd0:	ldr	r1, [pc, #104]	; 2040 <coda_bin_cursor_read_string+0x178>
    1fd4:	ldr	r0, [pc, #104]	; 2044 <coda_bin_cursor_read_string+0x17c>
    1fd8:	bl	0 <coda_set_error>
    1fdc:	mvn	r0, #0
    1fe0:	b	1f80 <coda_bin_cursor_read_string+0xb8>
    1fe4:	mov	r0, sl
    1fe8:	mov	r1, fp
    1fec:	add	r2, sp, #32
    1ff0:	bl	0 <coda_str64>
    1ff4:	ldr	r3, [r6, #4]
    1ff8:	add	r2, sp, #56	; 0x38
    1ffc:	add	r1, r6, r3, lsl #4
    2000:	ldr	r0, [r6, r3, lsl #4]
    2004:	ldr	r1, [r1, #4]
    2008:	lsr	r0, r0, #3
    200c:	orr	r0, r0, r1, lsl #29
    2010:	asr	r1, r1, #3
    2014:	bl	0 <coda_str64>
    2018:	ldr	r1, [r6, #4]
    201c:	add	r3, sp, #56	; 0x38
    2020:	add	r2, sp, #32
    2024:	ldr	r0, [r6, r1, lsl #4]
    2028:	ldr	r1, [pc, #24]	; 2048 <coda_bin_cursor_read_string+0x180>
    202c:	and	r0, r0, #7
    2030:	str	r0, [sp]
    2034:	ldr	r0, [pc, #8]	; 2044 <coda_bin_cursor_read_string+0x17c>
    2038:	bl	0 <coda_set_error>
    203c:	b	1fdc <coda_bin_cursor_read_string+0x114>
    2040:	.word	0x00000634
    2044:	.word	0xfffffed4
    2048:	.word	0x000005d0

0000204c <coda_bin_cursor_read_bits>:
    204c:	push	{r4, r5, lr}
    2050:	sub	sp, sp, #20
    2054:	ldr	ip, [r0, #4]
    2058:	ldrd	r4, [sp, #32]
    205c:	str	r1, [sp, #8]
    2060:	lsl	ip, ip, #4
    2064:	strd	r4, [sp]
    2068:	ldrd	r4, [r0, ip]
    206c:	ldr	r1, [r0]
    2070:	adds	r2, r2, r4
    2074:	mov	r0, r1
    2078:	adc	r3, r3, r5
    207c:	bl	15c <read_bits>
    2080:	add	sp, sp, #20
    2084:	pop	{r4, r5, pc}

00002088 <coda_bin_cursor_read_bytes>:
    2088:	push	{r4, r5, r6, r7, lr}
    208c:	mov	r7, #0
    2090:	ldr	lr, [r0, #4]
    2094:	sub	sp, sp, #20
    2098:	lsl	lr, lr, #4
    209c:	ldr	ip, [sp, #40]	; 0x28
    20a0:	ldrd	r4, [r0, lr]
    20a4:	ldr	lr, [sp, #44]	; 0x2c
    20a8:	and	r6, r4, #7
    20ac:	orrs	r6, r6, r7
    20b0:	bne	20e0 <coda_bin_cursor_read_bytes+0x58>
    20b4:	lsr	r6, r4, #3
    20b8:	orr	r6, r6, r5, lsl #29
    20bc:	adds	r2, r2, r6
    20c0:	asr	r7, r5, #3
    20c4:	ldr	r0, [r0]
    20c8:	adc	r3, r3, r7
    20cc:	str	r1, [sp, #8]
    20d0:	stm	sp, {ip, lr}
    20d4:	bl	0 <read_bytes>
    20d8:	add	sp, sp, #20
    20dc:	pop	{r4, r5, r6, r7, pc}
    20e0:	lsl	lr, lr, #3
    20e4:	orr	lr, lr, ip, lsr #29
    20e8:	lsl	r7, r3, #3
    20ec:	lsl	ip, ip, #3
    20f0:	lsl	r6, r2, #3
    20f4:	orr	r7, r7, r2, lsr #29
    20f8:	adds	r2, r6, r4
    20fc:	ldr	r0, [r0]
    2100:	adc	r3, r7, r5
    2104:	stm	sp, {ip, lr}
    2108:	str	r1, [sp, #8]
    210c:	bl	15c <read_bits>
    2110:	add	sp, sp, #20
    2114:	pop	{r4, r5, r6, r7, pc}

00002118 <coda_bin_cursor_read_int8_array>:
    2118:	ldr	r3, [r0, #4]
    211c:	push	{r4, r5, r6, lr}
    2120:	mov	r6, r2
    2124:	add	r3, r0, r3, lsl #4
    2128:	sub	sp, sp, #8
    212c:	ldr	r3, [r3, #-8]
    2130:	mov	r4, r0
    2134:	mov	r5, r1
    2138:	ldr	r2, [r3]
    213c:	cmp	r2, #99	; 0x63
    2140:	ldrhi	r3, [r3, #4]
    2144:	ldr	r3, [r3, #40]	; 0x28
    2148:	ldr	r3, [r3]
    214c:	cmp	r3, #1
    2150:	beq	21a0 <coda_bin_cursor_read_int8_array+0x88>
    2154:	cmp	r3, #0
    2158:	bne	21bc <coda_bin_cursor_read_int8_array+0xa4>
    215c:	str	r3, [sp]
    2160:	mov	r2, r1
    2164:	mov	r3, #1
    2168:	ldr	r1, [pc, #96]	; 21d0 <coda_bin_cursor_read_int8_array+0xb8>
    216c:	bl	6a8 <read_array>
    2170:	cmp	r0, #0
    2174:	bne	21b4 <coda_bin_cursor_read_int8_array+0x9c>
    2178:	cmp	r6, #0
    217c:	beq	2198 <coda_bin_cursor_read_int8_array+0x80>
    2180:	mov	r1, r5
    2184:	mov	r0, r4
    2188:	mov	r2, #1
    218c:	bl	980 <transpose_array>
    2190:	adds	r0, r0, #0
    2194:	mvnne	r0, #0
    2198:	add	sp, sp, #8
    219c:	pop	{r4, r5, r6, pc}
    21a0:	mov	r2, r1
    21a4:	str	r6, [sp]
    21a8:	ldr	r1, [pc, #36]	; 21d4 <coda_bin_cursor_read_int8_array+0xbc>
    21ac:	bl	6a8 <read_array>
    21b0:	b	2198 <coda_bin_cursor_read_int8_array+0x80>
    21b4:	mvn	r0, #0
    21b8:	b	2198 <coda_bin_cursor_read_int8_array+0x80>
    21bc:	ldr	r3, [pc, #20]	; 21d8 <coda_bin_cursor_read_int8_array+0xc0>
    21c0:	ldr	r2, [pc, #20]	; 21dc <coda_bin_cursor_read_int8_array+0xc4>
    21c4:	ldr	r1, [pc, #20]	; 21e0 <coda_bin_cursor_read_int8_array+0xc8>
    21c8:	ldr	r0, [pc, #20]	; 21e4 <coda_bin_cursor_read_int8_array+0xcc>
    21cc:	bl	0 <__assert_fail>
	...
    21d8:	.word	0x00000054
    21dc:	.word	0x0000038a
    21e0:	.word	0x00000264
    21e4:	.word	0x00000674

000021e8 <coda_bin_cursor_read_uint8_array>:
    21e8:	ldr	r3, [r0, #4]
    21ec:	push	{r4, r5, r6, lr}
    21f0:	mov	r6, r2
    21f4:	add	r3, r0, r3, lsl #4
    21f8:	sub	sp, sp, #8
    21fc:	ldr	r3, [r3, #-8]
    2200:	mov	r4, r0
    2204:	mov	r5, r1
    2208:	ldr	r2, [r3]
    220c:	cmp	r2, #99	; 0x63
    2210:	ldrhi	r3, [r3, #4]
    2214:	ldr	r3, [r3, #40]	; 0x28
    2218:	ldr	r3, [r3]
    221c:	cmp	r3, #1
    2220:	beq	2270 <coda_bin_cursor_read_uint8_array+0x88>
    2224:	cmp	r3, #0
    2228:	bne	228c <coda_bin_cursor_read_uint8_array+0xa4>
    222c:	str	r3, [sp]
    2230:	mov	r2, r1
    2234:	mov	r3, #1
    2238:	ldr	r1, [pc, #96]	; 22a0 <coda_bin_cursor_read_uint8_array+0xb8>
    223c:	bl	6a8 <read_array>
    2240:	cmp	r0, #0
    2244:	bne	2284 <coda_bin_cursor_read_uint8_array+0x9c>
    2248:	cmp	r6, #0
    224c:	beq	2268 <coda_bin_cursor_read_uint8_array+0x80>
    2250:	mov	r1, r5
    2254:	mov	r0, r4
    2258:	mov	r2, #1
    225c:	bl	980 <transpose_array>
    2260:	adds	r0, r0, #0
    2264:	mvnne	r0, #0
    2268:	add	sp, sp, #8
    226c:	pop	{r4, r5, r6, pc}
    2270:	mov	r2, r1
    2274:	str	r6, [sp]
    2278:	ldr	r1, [pc, #36]	; 22a4 <coda_bin_cursor_read_uint8_array+0xbc>
    227c:	bl	6a8 <read_array>
    2280:	b	2268 <coda_bin_cursor_read_uint8_array+0x80>
    2284:	mvn	r0, #0
    2288:	b	2268 <coda_bin_cursor_read_uint8_array+0x80>
    228c:	ldr	r3, [pc, #20]	; 22a8 <coda_bin_cursor_read_uint8_array+0xc0>
    2290:	mov	r2, #932	; 0x3a4
    2294:	ldr	r1, [pc, #16]	; 22ac <coda_bin_cursor_read_uint8_array+0xc4>
    2298:	ldr	r0, [pc, #16]	; 22b0 <coda_bin_cursor_read_uint8_array+0xc8>
    229c:	bl	0 <__assert_fail>
	...
    22a8:	.word	0x00000074
    22ac:	.word	0x00000264
    22b0:	.word	0x00000674

000022b4 <coda_bin_cursor_read_int16_array>:
    22b4:	ldr	r3, [r0, #4]
    22b8:	push	{r4, r5, r6, lr}
    22bc:	mov	r6, r2
    22c0:	add	r3, r0, r3, lsl #4
    22c4:	sub	sp, sp, #8
    22c8:	ldr	r3, [r3, #-8]
    22cc:	mov	r4, r0
    22d0:	mov	r5, r1
    22d4:	ldr	r2, [r3]
    22d8:	cmp	r2, #99	; 0x63
    22dc:	ldrhi	r3, [r3, #4]
    22e0:	ldr	r3, [r3, #40]	; 0x28
    22e4:	ldr	r3, [r3]
    22e8:	cmp	r3, #1
    22ec:	beq	233c <coda_bin_cursor_read_int16_array+0x88>
    22f0:	cmp	r3, #0
    22f4:	bne	235c <coda_bin_cursor_read_int16_array+0xa8>
    22f8:	str	r3, [sp]
    22fc:	mov	r2, r1
    2300:	mov	r3, #2
    2304:	ldr	r1, [pc, #100]	; 2370 <coda_bin_cursor_read_int16_array+0xbc>
    2308:	bl	6a8 <read_array>
    230c:	cmp	r0, #0
    2310:	bne	2354 <coda_bin_cursor_read_int16_array+0xa0>
    2314:	cmp	r6, #0
    2318:	beq	2334 <coda_bin_cursor_read_int16_array+0x80>
    231c:	mov	r1, r5
    2320:	mov	r0, r4
    2324:	mov	r2, #2
    2328:	bl	980 <transpose_array>
    232c:	adds	r0, r0, #0
    2330:	mvnne	r0, #0
    2334:	add	sp, sp, #8
    2338:	pop	{r4, r5, r6, pc}
    233c:	mov	r2, r1
    2340:	str	r6, [sp]
    2344:	mov	r3, #2
    2348:	ldr	r1, [pc, #36]	; 2374 <coda_bin_cursor_read_int16_array+0xc0>
    234c:	bl	6a8 <read_array>
    2350:	b	2334 <coda_bin_cursor_read_int16_array+0x80>
    2354:	mvn	r0, #0
    2358:	b	2334 <coda_bin_cursor_read_int16_array+0x80>
    235c:	ldr	r3, [pc, #20]	; 2378 <coda_bin_cursor_read_int16_array+0xc4>
    2360:	ldr	r2, [pc, #20]	; 237c <coda_bin_cursor_read_int16_array+0xc8>
    2364:	ldr	r1, [pc, #20]	; 2380 <coda_bin_cursor_read_int16_array+0xcc>
    2368:	ldr	r0, [pc, #20]	; 2384 <coda_bin_cursor_read_int16_array+0xd0>
    236c:	bl	0 <__assert_fail>
	...
    2378:	.word	0x00000098
    237c:	.word	0x000003be
    2380:	.word	0x00000264
    2384:	.word	0x00000674

00002388 <coda_bin_cursor_read_uint16_array>:
    2388:	ldr	r3, [r0, #4]
    238c:	push	{r4, r5, r6, lr}
    2390:	mov	r6, r2
    2394:	add	r3, r0, r3, lsl #4
    2398:	sub	sp, sp, #8
    239c:	ldr	r3, [r3, #-8]
    23a0:	mov	r4, r0
    23a4:	mov	r5, r1
    23a8:	ldr	r2, [r3]
    23ac:	cmp	r2, #99	; 0x63
    23b0:	ldrhi	r3, [r3, #4]
    23b4:	ldr	r3, [r3, #40]	; 0x28
    23b8:	ldr	r3, [r3]
    23bc:	cmp	r3, #1
    23c0:	beq	2410 <coda_bin_cursor_read_uint16_array+0x88>
    23c4:	cmp	r3, #0
    23c8:	bne	2430 <coda_bin_cursor_read_uint16_array+0xa8>
    23cc:	str	r3, [sp]
    23d0:	mov	r2, r1
    23d4:	mov	r3, #2
    23d8:	ldr	r1, [pc, #100]	; 2444 <coda_bin_cursor_read_uint16_array+0xbc>
    23dc:	bl	6a8 <read_array>
    23e0:	cmp	r0, #0
    23e4:	bne	2428 <coda_bin_cursor_read_uint16_array+0xa0>
    23e8:	cmp	r6, #0
    23ec:	beq	2408 <coda_bin_cursor_read_uint16_array+0x80>
    23f0:	mov	r1, r5
    23f4:	mov	r0, r4
    23f8:	mov	r2, #2
    23fc:	bl	980 <transpose_array>
    2400:	adds	r0, r0, #0
    2404:	mvnne	r0, #0
    2408:	add	sp, sp, #8
    240c:	pop	{r4, r5, r6, pc}
    2410:	mov	r2, r1
    2414:	str	r6, [sp]
    2418:	mov	r3, #2
    241c:	ldr	r1, [pc, #36]	; 2448 <coda_bin_cursor_read_uint16_array+0xc0>
    2420:	bl	6a8 <read_array>
    2424:	b	2408 <coda_bin_cursor_read_uint16_array+0x80>
    2428:	mvn	r0, #0
    242c:	b	2408 <coda_bin_cursor_read_uint16_array+0x80>
    2430:	ldr	r3, [pc, #20]	; 244c <coda_bin_cursor_read_uint16_array+0xc4>
    2434:	mov	r2, #984	; 0x3d8
    2438:	ldr	r1, [pc, #16]	; 2450 <coda_bin_cursor_read_uint16_array+0xc8>
    243c:	ldr	r0, [pc, #16]	; 2454 <coda_bin_cursor_read_uint16_array+0xcc>
    2440:	bl	0 <__assert_fail>
	...
    244c:	.word	0x000000bc
    2450:	.word	0x00000264
    2454:	.word	0x00000674

00002458 <coda_bin_cursor_read_int32_array>:
    2458:	ldr	r3, [r0, #4]
    245c:	push	{r4, r5, r6, lr}
    2460:	mov	r6, r2
    2464:	add	r3, r0, r3, lsl #4
    2468:	sub	sp, sp, #8
    246c:	ldr	r3, [r3, #-8]
    2470:	mov	r4, r0
    2474:	mov	r5, r1
    2478:	ldr	r2, [r3]
    247c:	cmp	r2, #99	; 0x63
    2480:	ldrhi	r3, [r3, #4]
    2484:	ldr	r3, [r3, #40]	; 0x28
    2488:	ldr	r3, [r3]
    248c:	cmp	r3, #1
    2490:	beq	24e0 <coda_bin_cursor_read_int32_array+0x88>
    2494:	cmp	r3, #0
    2498:	bne	2500 <coda_bin_cursor_read_int32_array+0xa8>
    249c:	str	r3, [sp]
    24a0:	mov	r2, r1
    24a4:	mov	r3, #4
    24a8:	ldr	r1, [pc, #100]	; 2514 <coda_bin_cursor_read_int32_array+0xbc>
    24ac:	bl	6a8 <read_array>
    24b0:	cmp	r0, #0
    24b4:	bne	24f8 <coda_bin_cursor_read_int32_array+0xa0>
    24b8:	cmp	r6, #0
    24bc:	beq	24d8 <coda_bin_cursor_read_int32_array+0x80>
    24c0:	mov	r1, r5
    24c4:	mov	r0, r4
    24c8:	mov	r2, #4
    24cc:	bl	980 <transpose_array>
    24d0:	adds	r0, r0, #0
    24d4:	mvnne	r0, #0
    24d8:	add	sp, sp, #8
    24dc:	pop	{r4, r5, r6, pc}
    24e0:	mov	r2, r1
    24e4:	str	r6, [sp]
    24e8:	mov	r3, #4
    24ec:	ldr	r1, [pc, #36]	; 2518 <coda_bin_cursor_read_int32_array+0xc0>
    24f0:	bl	6a8 <read_array>
    24f4:	b	24d8 <coda_bin_cursor_read_int32_array+0x80>
    24f8:	mvn	r0, #0
    24fc:	b	24d8 <coda_bin_cursor_read_int32_array+0x80>
    2500:	ldr	r3, [pc, #20]	; 251c <coda_bin_cursor_read_int32_array+0xc4>
    2504:	ldr	r2, [pc, #20]	; 2520 <coda_bin_cursor_read_int32_array+0xc8>
    2508:	ldr	r1, [pc, #20]	; 2524 <coda_bin_cursor_read_int32_array+0xcc>
    250c:	ldr	r0, [pc, #20]	; 2528 <coda_bin_cursor_read_int32_array+0xd0>
    2510:	bl	0 <__assert_fail>
	...
    251c:	.word	0x000000e0
    2520:	.word	0x000003f2
    2524:	.word	0x00000264
    2528:	.word	0x00000674

0000252c <coda_bin_cursor_read_uint32_array>:
    252c:	ldr	r3, [r0, #4]
    2530:	push	{r4, r5, r6, lr}
    2534:	mov	r6, r2
    2538:	add	r3, r0, r3, lsl #4
    253c:	sub	sp, sp, #8
    2540:	ldr	r3, [r3, #-8]
    2544:	mov	r4, r0
    2548:	mov	r5, r1
    254c:	ldr	r2, [r3]
    2550:	cmp	r2, #99	; 0x63
    2554:	ldrhi	r3, [r3, #4]
    2558:	ldr	r3, [r3, #40]	; 0x28
    255c:	ldr	r3, [r3]
    2560:	cmp	r3, #1
    2564:	beq	25b4 <coda_bin_cursor_read_uint32_array+0x88>
    2568:	cmp	r3, #0
    256c:	bne	25d4 <coda_bin_cursor_read_uint32_array+0xa8>
    2570:	str	r3, [sp]
    2574:	mov	r2, r1
    2578:	mov	r3, #4
    257c:	ldr	r1, [pc, #100]	; 25e8 <coda_bin_cursor_read_uint32_array+0xbc>
    2580:	bl	6a8 <read_array>
    2584:	cmp	r0, #0
    2588:	bne	25cc <coda_bin_cursor_read_uint32_array+0xa0>
    258c:	cmp	r6, #0
    2590:	beq	25ac <coda_bin_cursor_read_uint32_array+0x80>
    2594:	mov	r1, r5
    2598:	mov	r0, r4
    259c:	mov	r2, #4
    25a0:	bl	980 <transpose_array>
    25a4:	adds	r0, r0, #0
    25a8:	mvnne	r0, #0
    25ac:	add	sp, sp, #8
    25b0:	pop	{r4, r5, r6, pc}
    25b4:	mov	r2, r1
    25b8:	str	r6, [sp]
    25bc:	mov	r3, #4
    25c0:	ldr	r1, [pc, #36]	; 25ec <coda_bin_cursor_read_uint32_array+0xc0>
    25c4:	bl	6a8 <read_array>
    25c8:	b	25ac <coda_bin_cursor_read_uint32_array+0x80>
    25cc:	mvn	r0, #0
    25d0:	b	25ac <coda_bin_cursor_read_uint32_array+0x80>
    25d4:	ldr	r3, [pc, #20]	; 25f0 <coda_bin_cursor_read_uint32_array+0xc4>
    25d8:	ldr	r2, [pc, #20]	; 25f4 <coda_bin_cursor_read_uint32_array+0xc8>
    25dc:	ldr	r1, [pc, #20]	; 25f8 <coda_bin_cursor_read_uint32_array+0xcc>
    25e0:	ldr	r0, [pc, #20]	; 25fc <coda_bin_cursor_read_uint32_array+0xd0>
    25e4:	bl	0 <__assert_fail>
	...
    25f0:	.word	0x00000104
    25f4:	.word	0x0000040c
    25f8:	.word	0x00000264
    25fc:	.word	0x00000674

00002600 <coda_bin_cursor_read_int64_array>:
    2600:	ldr	r3, [r0, #4]
    2604:	push	{r4, r5, r6, lr}
    2608:	mov	r6, r2
    260c:	add	r3, r0, r3, lsl #4
    2610:	sub	sp, sp, #8
    2614:	ldr	r3, [r3, #-8]
    2618:	mov	r4, r0
    261c:	mov	r5, r1
    2620:	ldr	r2, [r3]
    2624:	cmp	r2, #99	; 0x63
    2628:	ldrhi	r3, [r3, #4]
    262c:	ldr	r3, [r3, #40]	; 0x28
    2630:	ldr	r3, [r3]
    2634:	cmp	r3, #1
    2638:	beq	2688 <coda_bin_cursor_read_int64_array+0x88>
    263c:	cmp	r3, #0
    2640:	bne	26a8 <coda_bin_cursor_read_int64_array+0xa8>
    2644:	str	r3, [sp]
    2648:	mov	r2, r1
    264c:	mov	r3, #8
    2650:	ldr	r1, [pc, #100]	; 26bc <coda_bin_cursor_read_int64_array+0xbc>
    2654:	bl	6a8 <read_array>
    2658:	cmp	r0, #0
    265c:	bne	26a0 <coda_bin_cursor_read_int64_array+0xa0>
    2660:	cmp	r6, #0
    2664:	beq	2680 <coda_bin_cursor_read_int64_array+0x80>
    2668:	mov	r1, r5
    266c:	mov	r0, r4
    2670:	mov	r2, #8
    2674:	bl	980 <transpose_array>
    2678:	adds	r0, r0, #0
    267c:	mvnne	r0, #0
    2680:	add	sp, sp, #8
    2684:	pop	{r4, r5, r6, pc}
    2688:	mov	r2, r1
    268c:	str	r6, [sp]
    2690:	mov	r3, #8
    2694:	ldr	r1, [pc, #36]	; 26c0 <coda_bin_cursor_read_int64_array+0xc0>
    2698:	bl	6a8 <read_array>
    269c:	b	2680 <coda_bin_cursor_read_int64_array+0x80>
    26a0:	mvn	r0, #0
    26a4:	b	2680 <coda_bin_cursor_read_int64_array+0x80>
    26a8:	ldr	r3, [pc, #20]	; 26c4 <coda_bin_cursor_read_int64_array+0xc4>
    26ac:	ldr	r2, [pc, #20]	; 26c8 <coda_bin_cursor_read_int64_array+0xc8>
    26b0:	ldr	r1, [pc, #20]	; 26cc <coda_bin_cursor_read_int64_array+0xcc>
    26b4:	ldr	r0, [pc, #20]	; 26d0 <coda_bin_cursor_read_int64_array+0xd0>
    26b8:	bl	0 <__assert_fail>
	...
    26c4:	.word	0x00000128
    26c8:	.word	0x00000426
    26cc:	.word	0x00000264
    26d0:	.word	0x00000674

000026d4 <coda_bin_cursor_read_uint64_array>:
    26d4:	ldr	r3, [r0, #4]
    26d8:	push	{r4, r5, r6, lr}
    26dc:	mov	r6, r2
    26e0:	add	r3, r0, r3, lsl #4
    26e4:	sub	sp, sp, #8
    26e8:	ldr	r3, [r3, #-8]
    26ec:	mov	r4, r0
    26f0:	mov	r5, r1
    26f4:	ldr	r2, [r3]
    26f8:	cmp	r2, #99	; 0x63
    26fc:	ldrhi	r3, [r3, #4]
    2700:	ldr	r3, [r3, #40]	; 0x28
    2704:	ldr	r3, [r3]
    2708:	cmp	r3, #1
    270c:	beq	275c <coda_bin_cursor_read_uint64_array+0x88>
    2710:	cmp	r3, #0
    2714:	bne	277c <coda_bin_cursor_read_uint64_array+0xa8>
    2718:	str	r3, [sp]
    271c:	mov	r2, r1
    2720:	mov	r3, #8
    2724:	ldr	r1, [pc, #100]	; 2790 <coda_bin_cursor_read_uint64_array+0xbc>
    2728:	bl	6a8 <read_array>
    272c:	cmp	r0, #0
    2730:	bne	2774 <coda_bin_cursor_read_uint64_array+0xa0>
    2734:	cmp	r6, #0
    2738:	beq	2754 <coda_bin_cursor_read_uint64_array+0x80>
    273c:	mov	r1, r5
    2740:	mov	r0, r4
    2744:	mov	r2, #8
    2748:	bl	980 <transpose_array>
    274c:	adds	r0, r0, #0
    2750:	mvnne	r0, #0
    2754:	add	sp, sp, #8
    2758:	pop	{r4, r5, r6, pc}
    275c:	mov	r2, r1
    2760:	str	r6, [sp]
    2764:	mov	r3, #8
    2768:	ldr	r1, [pc, #36]	; 2794 <coda_bin_cursor_read_uint64_array+0xc0>
    276c:	bl	6a8 <read_array>
    2770:	b	2754 <coda_bin_cursor_read_uint64_array+0x80>
    2774:	mvn	r0, #0
    2778:	b	2754 <coda_bin_cursor_read_uint64_array+0x80>
    277c:	ldr	r3, [pc, #20]	; 2798 <coda_bin_cursor_read_uint64_array+0xc4>
    2780:	mov	r2, #1088	; 0x440
    2784:	ldr	r1, [pc, #16]	; 279c <coda_bin_cursor_read_uint64_array+0xc8>
    2788:	ldr	r0, [pc, #16]	; 27a0 <coda_bin_cursor_read_uint64_array+0xcc>
    278c:	bl	0 <__assert_fail>
	...
    2798:	.word	0x0000014c
    279c:	.word	0x00000264
    27a0:	.word	0x00000674

000027a4 <coda_bin_cursor_read_float_array>:
    27a4:	ldr	r3, [r0, #4]
    27a8:	push	{r4, r5, r6, lr}
    27ac:	mov	r6, r2
    27b0:	add	r3, r0, r3, lsl #4
    27b4:	sub	sp, sp, #8
    27b8:	ldr	r3, [r3, #-8]
    27bc:	mov	r4, r0
    27c0:	mov	r5, r1
    27c4:	ldr	r2, [r3]
    27c8:	cmp	r2, #99	; 0x63
    27cc:	ldrhi	r3, [r3, #4]
    27d0:	ldr	r3, [r3, #40]	; 0x28
    27d4:	ldr	r3, [r3]
    27d8:	cmp	r3, #1
    27dc:	beq	282c <coda_bin_cursor_read_float_array+0x88>
    27e0:	cmp	r3, #0
    27e4:	bne	284c <coda_bin_cursor_read_float_array+0xa8>
    27e8:	str	r3, [sp]
    27ec:	mov	r2, r1
    27f0:	mov	r3, #4
    27f4:	ldr	r1, [pc, #100]	; 2860 <coda_bin_cursor_read_float_array+0xbc>
    27f8:	bl	6a8 <read_array>
    27fc:	cmp	r0, #0
    2800:	bne	2844 <coda_bin_cursor_read_float_array+0xa0>
    2804:	cmp	r6, #0
    2808:	beq	2824 <coda_bin_cursor_read_float_array+0x80>
    280c:	mov	r1, r5
    2810:	mov	r0, r4
    2814:	mov	r2, #4
    2818:	bl	980 <transpose_array>
    281c:	adds	r0, r0, #0
    2820:	mvnne	r0, #0
    2824:	add	sp, sp, #8
    2828:	pop	{r4, r5, r6, pc}
    282c:	mov	r2, r1
    2830:	str	r6, [sp]
    2834:	mov	r3, #4
    2838:	ldr	r1, [pc, #36]	; 2864 <coda_bin_cursor_read_float_array+0xc0>
    283c:	bl	6a8 <read_array>
    2840:	b	2824 <coda_bin_cursor_read_float_array+0x80>
    2844:	mvn	r0, #0
    2848:	b	2824 <coda_bin_cursor_read_float_array+0x80>
    284c:	ldr	r3, [pc, #20]	; 2868 <coda_bin_cursor_read_float_array+0xc4>
    2850:	ldr	r2, [pc, #20]	; 286c <coda_bin_cursor_read_float_array+0xc8>
    2854:	ldr	r1, [pc, #20]	; 2870 <coda_bin_cursor_read_float_array+0xcc>
    2858:	ldr	r0, [pc, #20]	; 2874 <coda_bin_cursor_read_float_array+0xd0>
    285c:	bl	0 <__assert_fail>
	...
    2868:	.word	0x00000170
    286c:	.word	0x0000045a
    2870:	.word	0x00000264
    2874:	.word	0x00000674

00002878 <coda_bin_cursor_read_double_array>:
    2878:	ldr	r3, [r0, #4]
    287c:	push	{r4, r5, r6, lr}
    2880:	mov	r6, r2
    2884:	add	r3, r0, r3, lsl #4
    2888:	sub	sp, sp, #8
    288c:	ldr	r3, [r3, #-8]
    2890:	mov	r4, r0
    2894:	mov	r5, r1
    2898:	ldr	r2, [r3]
    289c:	cmp	r2, #99	; 0x63
    28a0:	ldrhi	r3, [r3, #4]
    28a4:	ldr	r3, [r3, #40]	; 0x28
    28a8:	ldr	r3, [r3]
    28ac:	cmp	r3, #1
    28b0:	beq	2900 <coda_bin_cursor_read_double_array+0x88>
    28b4:	cmp	r3, #0
    28b8:	bne	2920 <coda_bin_cursor_read_double_array+0xa8>
    28bc:	str	r3, [sp]
    28c0:	mov	r2, r1
    28c4:	mov	r3, #8
    28c8:	ldr	r1, [pc, #100]	; 2934 <coda_bin_cursor_read_double_array+0xbc>
    28cc:	bl	6a8 <read_array>
    28d0:	cmp	r0, #0
    28d4:	bne	2918 <coda_bin_cursor_read_double_array+0xa0>
    28d8:	cmp	r6, #0
    28dc:	beq	28f8 <coda_bin_cursor_read_double_array+0x80>
    28e0:	mov	r1, r5
    28e4:	mov	r0, r4
    28e8:	mov	r2, #8
    28ec:	bl	980 <transpose_array>
    28f0:	adds	r0, r0, #0
    28f4:	mvnne	r0, #0
    28f8:	add	sp, sp, #8
    28fc:	pop	{r4, r5, r6, pc}
    2900:	mov	r2, r1
    2904:	str	r6, [sp]
    2908:	mov	r3, #8
    290c:	ldr	r1, [pc, #36]	; 2938 <coda_bin_cursor_read_double_array+0xc0>
    2910:	bl	6a8 <read_array>
    2914:	b	28f8 <coda_bin_cursor_read_double_array+0x80>
    2918:	mvn	r0, #0
    291c:	b	28f8 <coda_bin_cursor_read_double_array+0x80>
    2920:	ldr	r3, [pc, #20]	; 293c <coda_bin_cursor_read_double_array+0xc4>
    2924:	ldr	r2, [pc, #20]	; 2940 <coda_bin_cursor_read_double_array+0xc8>
    2928:	ldr	r1, [pc, #20]	; 2944 <coda_bin_cursor_read_double_array+0xcc>
    292c:	ldr	r0, [pc, #20]	; 2948 <coda_bin_cursor_read_double_array+0xd0>
    2930:	bl	0 <__assert_fail>
	...
    293c:	.word	0x00000194
    2940:	.word	0x00000474
    2944:	.word	0x00000264
    2948:	.word	0x00000674

0000294c <coda_bin_cursor_read_char_array>:
    294c:	ldr	r3, [r0, #4]
    2950:	push	{r4, r5, r6, lr}
    2954:	mov	r6, r2
    2958:	add	r3, r0, r3, lsl #4
    295c:	sub	sp, sp, #8
    2960:	ldr	r3, [r3, #-8]
    2964:	mov	r4, r0
    2968:	mov	r5, r1
    296c:	ldr	r2, [r3]
    2970:	cmp	r2, #99	; 0x63
    2974:	ldrhi	r3, [r3, #4]
    2978:	ldr	r3, [r3, #40]	; 0x28
    297c:	ldr	r3, [r3]
    2980:	cmp	r3, #1
    2984:	beq	29d4 <coda_bin_cursor_read_char_array+0x88>
    2988:	cmp	r3, #0
    298c:	bne	29f0 <coda_bin_cursor_read_char_array+0xa4>
    2990:	str	r3, [sp]
    2994:	mov	r2, r1
    2998:	mov	r3, #1
    299c:	ldr	r1, [pc, #96]	; 2a04 <coda_bin_cursor_read_char_array+0xb8>
    29a0:	bl	6a8 <read_array>
    29a4:	cmp	r0, #0
    29a8:	bne	29e8 <coda_bin_cursor_read_char_array+0x9c>
    29ac:	cmp	r6, #0
    29b0:	beq	29cc <coda_bin_cursor_read_char_array+0x80>
    29b4:	mov	r1, r5
    29b8:	mov	r0, r4
    29bc:	mov	r2, #1
    29c0:	bl	980 <transpose_array>
    29c4:	adds	r0, r0, #0
    29c8:	mvnne	r0, #0
    29cc:	add	sp, sp, #8
    29d0:	pop	{r4, r5, r6, pc}
    29d4:	mov	r2, r1
    29d8:	str	r6, [sp]
    29dc:	ldr	r1, [pc, #36]	; 2a08 <coda_bin_cursor_read_char_array+0xbc>
    29e0:	bl	6a8 <read_array>
    29e4:	b	29cc <coda_bin_cursor_read_char_array+0x80>
    29e8:	mvn	r0, #0
    29ec:	b	29cc <coda_bin_cursor_read_char_array+0x80>
    29f0:	ldr	r3, [pc, #20]	; 2a0c <coda_bin_cursor_read_char_array+0xc0>
    29f4:	ldr	r2, [pc, #20]	; 2a10 <coda_bin_cursor_read_char_array+0xc4>
    29f8:	ldr	r1, [pc, #20]	; 2a14 <coda_bin_cursor_read_char_array+0xc8>
    29fc:	ldr	r0, [pc, #20]	; 2a18 <coda_bin_cursor_read_char_array+0xcc>
    2a00:	bl	0 <__assert_fail>
	...
    2a0c:	.word	0x000001b8
    2a10:	.word	0x0000048e
    2a14:	.word	0x00000264
    2a18:	.word	0x00000674

00002a1c <coda_bin_cursor_read_int8_partial_array>:
    2a1c:	ldr	ip, [r0, #4]
    2a20:	push	{lr}		; (str lr, [sp, #-4]!)
    2a24:	sub	sp, sp, #12
    2a28:	add	ip, r0, ip, lsl #4
    2a2c:	ldr	ip, [ip, #-8]
    2a30:	ldr	lr, [ip]
    2a34:	cmp	lr, #99	; 0x63
    2a38:	ldrhi	ip, [ip, #4]
    2a3c:	ldr	ip, [ip, #40]	; 0x28
    2a40:	ldr	ip, [ip]
    2a44:	cmp	ip, #1
    2a48:	beq	2a78 <coda_bin_cursor_read_int8_partial_array+0x5c>
    2a4c:	cmp	ip, #0
    2a50:	bne	2a90 <coda_bin_cursor_read_int8_partial_array+0x74>
    2a54:	mov	ip, #1
    2a58:	str	r3, [sp]
    2a5c:	str	ip, [sp, #4]
    2a60:	mov	r3, r2
    2a64:	mov	r2, r1
    2a68:	ldr	r1, [pc, #52]	; 2aa4 <coda_bin_cursor_read_int8_partial_array+0x88>
    2a6c:	bl	8e0 <read_partial_array>
    2a70:	add	sp, sp, #12
    2a74:	pop	{pc}		; (ldr pc, [sp], #4)
    2a78:	stm	sp, {r3, ip}
    2a7c:	mov	r3, r2
    2a80:	mov	r2, r1
    2a84:	ldr	r1, [pc, #28]	; 2aa8 <coda_bin_cursor_read_int8_partial_array+0x8c>
    2a88:	bl	8e0 <read_partial_array>
    2a8c:	b	2a70 <coda_bin_cursor_read_int8_partial_array+0x54>
    2a90:	ldr	r3, [pc, #20]	; 2aac <coda_bin_cursor_read_int8_partial_array+0x90>
    2a94:	ldr	r2, [pc, #20]	; 2ab0 <coda_bin_cursor_read_int8_partial_array+0x94>
    2a98:	ldr	r1, [pc, #20]	; 2ab4 <coda_bin_cursor_read_int8_partial_array+0x98>
    2a9c:	ldr	r0, [pc, #20]	; 2ab8 <coda_bin_cursor_read_int8_partial_array+0x9c>
    2aa0:	bl	0 <__assert_fail>
	...
    2aac:	.word	0x000001d8
    2ab0:	.word	0x000004a8
    2ab4:	.word	0x00000264
    2ab8:	.word	0x00000674

00002abc <coda_bin_cursor_read_uint8_partial_array>:
    2abc:	ldr	ip, [r0, #4]
    2ac0:	push	{lr}		; (str lr, [sp, #-4]!)
    2ac4:	sub	sp, sp, #12
    2ac8:	add	ip, r0, ip, lsl #4
    2acc:	ldr	ip, [ip, #-8]
    2ad0:	ldr	lr, [ip]
    2ad4:	cmp	lr, #99	; 0x63
    2ad8:	ldrhi	ip, [ip, #4]
    2adc:	ldr	ip, [ip, #40]	; 0x28
    2ae0:	ldr	ip, [ip]
    2ae4:	cmp	ip, #1
    2ae8:	beq	2b18 <coda_bin_cursor_read_uint8_partial_array+0x5c>
    2aec:	cmp	ip, #0
    2af0:	bne	2b30 <coda_bin_cursor_read_uint8_partial_array+0x74>
    2af4:	mov	ip, #1
    2af8:	str	r3, [sp]
    2afc:	str	ip, [sp, #4]
    2b00:	mov	r3, r2
    2b04:	mov	r2, r1
    2b08:	ldr	r1, [pc, #52]	; 2b44 <coda_bin_cursor_read_uint8_partial_array+0x88>
    2b0c:	bl	8e0 <read_partial_array>
    2b10:	add	sp, sp, #12
    2b14:	pop	{pc}		; (ldr pc, [sp], #4)
    2b18:	stm	sp, {r3, ip}
    2b1c:	mov	r3, r2
    2b20:	mov	r2, r1
    2b24:	ldr	r1, [pc, #28]	; 2b48 <coda_bin_cursor_read_uint8_partial_array+0x8c>
    2b28:	bl	8e0 <read_partial_array>
    2b2c:	b	2b10 <coda_bin_cursor_read_uint8_partial_array+0x54>
    2b30:	ldr	r3, [pc, #20]	; 2b4c <coda_bin_cursor_read_uint8_partial_array+0x90>
    2b34:	ldr	r2, [pc, #20]	; 2b50 <coda_bin_cursor_read_uint8_partial_array+0x94>
    2b38:	ldr	r1, [pc, #20]	; 2b54 <coda_bin_cursor_read_uint8_partial_array+0x98>
    2b3c:	ldr	r0, [pc, #20]	; 2b58 <coda_bin_cursor_read_uint8_partial_array+0x9c>
    2b40:	bl	0 <__assert_fail>
	...
    2b4c:	.word	0x00000200
    2b50:	.word	0x000004b6
    2b54:	.word	0x00000264
    2b58:	.word	0x00000674

00002b5c <coda_bin_cursor_read_int16_partial_array>:
    2b5c:	ldr	ip, [r0, #4]
    2b60:	push	{lr}		; (str lr, [sp, #-4]!)
    2b64:	sub	sp, sp, #12
    2b68:	add	ip, r0, ip, lsl #4
    2b6c:	ldr	ip, [ip, #-8]
    2b70:	ldr	lr, [ip]
    2b74:	cmp	lr, #99	; 0x63
    2b78:	ldrhi	ip, [ip, #4]
    2b7c:	ldr	ip, [ip, #40]	; 0x28
    2b80:	ldr	ip, [ip]
    2b84:	cmp	ip, #1
    2b88:	beq	2bb8 <coda_bin_cursor_read_int16_partial_array+0x5c>
    2b8c:	cmp	ip, #0
    2b90:	bne	2bd8 <coda_bin_cursor_read_int16_partial_array+0x7c>
    2b94:	mov	ip, #2
    2b98:	str	r3, [sp]
    2b9c:	str	ip, [sp, #4]
    2ba0:	mov	r3, r2
    2ba4:	mov	r2, r1
    2ba8:	ldr	r1, [pc, #60]	; 2bec <coda_bin_cursor_read_int16_partial_array+0x90>
    2bac:	bl	8e0 <read_partial_array>
    2bb0:	add	sp, sp, #12
    2bb4:	pop	{pc}		; (ldr pc, [sp], #4)
    2bb8:	mov	ip, #2
    2bbc:	str	r3, [sp]
    2bc0:	str	ip, [sp, #4]
    2bc4:	mov	r3, r2
    2bc8:	mov	r2, r1
    2bcc:	ldr	r1, [pc, #28]	; 2bf0 <coda_bin_cursor_read_int16_partial_array+0x94>
    2bd0:	bl	8e0 <read_partial_array>
    2bd4:	b	2bb0 <coda_bin_cursor_read_int16_partial_array+0x54>
    2bd8:	ldr	r3, [pc, #20]	; 2bf4 <coda_bin_cursor_read_int16_partial_array+0x98>
    2bdc:	ldr	r2, [pc, #20]	; 2bf8 <coda_bin_cursor_read_int16_partial_array+0x9c>
    2be0:	ldr	r1, [pc, #20]	; 2bfc <coda_bin_cursor_read_int16_partial_array+0xa0>
    2be4:	ldr	r0, [pc, #20]	; 2c00 <coda_bin_cursor_read_int16_partial_array+0xa4>
    2be8:	bl	0 <__assert_fail>
	...
    2bf4:	.word	0x0000022c
    2bf8:	.word	0x000004c4
    2bfc:	.word	0x00000264
    2c00:	.word	0x00000674

00002c04 <coda_bin_cursor_read_uint16_partial_array>:
    2c04:	ldr	ip, [r0, #4]
    2c08:	push	{lr}		; (str lr, [sp, #-4]!)
    2c0c:	sub	sp, sp, #12
    2c10:	add	ip, r0, ip, lsl #4
    2c14:	ldr	ip, [ip, #-8]
    2c18:	ldr	lr, [ip]
    2c1c:	cmp	lr, #99	; 0x63
    2c20:	ldrhi	ip, [ip, #4]
    2c24:	ldr	ip, [ip, #40]	; 0x28
    2c28:	ldr	ip, [ip]
    2c2c:	cmp	ip, #1
    2c30:	beq	2c60 <coda_bin_cursor_read_uint16_partial_array+0x5c>
    2c34:	cmp	ip, #0
    2c38:	bne	2c80 <coda_bin_cursor_read_uint16_partial_array+0x7c>
    2c3c:	mov	ip, #2
    2c40:	str	r3, [sp]
    2c44:	str	ip, [sp, #4]
    2c48:	mov	r3, r2
    2c4c:	mov	r2, r1
    2c50:	ldr	r1, [pc, #60]	; 2c94 <coda_bin_cursor_read_uint16_partial_array+0x90>
    2c54:	bl	8e0 <read_partial_array>
    2c58:	add	sp, sp, #12
    2c5c:	pop	{pc}		; (ldr pc, [sp], #4)
    2c60:	mov	ip, #2
    2c64:	str	r3, [sp]
    2c68:	str	ip, [sp, #4]
    2c6c:	mov	r3, r2
    2c70:	mov	r2, r1
    2c74:	ldr	r1, [pc, #28]	; 2c98 <coda_bin_cursor_read_uint16_partial_array+0x94>
    2c78:	bl	8e0 <read_partial_array>
    2c7c:	b	2c58 <coda_bin_cursor_read_uint16_partial_array+0x54>
    2c80:	ldr	r3, [pc, #20]	; 2c9c <coda_bin_cursor_read_uint16_partial_array+0x98>
    2c84:	ldr	r2, [pc, #20]	; 2ca0 <coda_bin_cursor_read_uint16_partial_array+0x9c>
    2c88:	ldr	r1, [pc, #20]	; 2ca4 <coda_bin_cursor_read_uint16_partial_array+0xa0>
    2c8c:	ldr	r0, [pc, #20]	; 2ca8 <coda_bin_cursor_read_uint16_partial_array+0xa4>
    2c90:	bl	0 <__assert_fail>
	...
    2c9c:	.word	0x00000258
    2ca0:	.word	0x000004d2
    2ca4:	.word	0x00000264
    2ca8:	.word	0x00000674

00002cac <coda_bin_cursor_read_int32_partial_array>:
    2cac:	ldr	ip, [r0, #4]
    2cb0:	push	{lr}		; (str lr, [sp, #-4]!)
    2cb4:	sub	sp, sp, #12
    2cb8:	add	ip, r0, ip, lsl #4
    2cbc:	ldr	ip, [ip, #-8]
    2cc0:	ldr	lr, [ip]
    2cc4:	cmp	lr, #99	; 0x63
    2cc8:	ldrhi	ip, [ip, #4]
    2ccc:	ldr	ip, [ip, #40]	; 0x28
    2cd0:	ldr	ip, [ip]
    2cd4:	cmp	ip, #1
    2cd8:	beq	2d08 <coda_bin_cursor_read_int32_partial_array+0x5c>
    2cdc:	cmp	ip, #0
    2ce0:	bne	2d28 <coda_bin_cursor_read_int32_partial_array+0x7c>
    2ce4:	mov	ip, #4
    2ce8:	str	r3, [sp]
    2cec:	str	ip, [sp, #4]
    2cf0:	mov	r3, r2
    2cf4:	mov	r2, r1
    2cf8:	ldr	r1, [pc, #60]	; 2d3c <coda_bin_cursor_read_int32_partial_array+0x90>
    2cfc:	bl	8e0 <read_partial_array>
    2d00:	add	sp, sp, #12
    2d04:	pop	{pc}		; (ldr pc, [sp], #4)
    2d08:	mov	ip, #4
    2d0c:	str	r3, [sp]
    2d10:	str	ip, [sp, #4]
    2d14:	mov	r3, r2
    2d18:	mov	r2, r1
    2d1c:	ldr	r1, [pc, #28]	; 2d40 <coda_bin_cursor_read_int32_partial_array+0x94>
    2d20:	bl	8e0 <read_partial_array>
    2d24:	b	2d00 <coda_bin_cursor_read_int32_partial_array+0x54>
    2d28:	ldr	r3, [pc, #20]	; 2d44 <coda_bin_cursor_read_int32_partial_array+0x98>
    2d2c:	mov	r2, #1248	; 0x4e0
    2d30:	ldr	r1, [pc, #16]	; 2d48 <coda_bin_cursor_read_int32_partial_array+0x9c>
    2d34:	ldr	r0, [pc, #16]	; 2d4c <coda_bin_cursor_read_int32_partial_array+0xa0>
    2d38:	bl	0 <__assert_fail>
	...
    2d44:	.word	0x00000284
    2d48:	.word	0x00000264
    2d4c:	.word	0x00000674

00002d50 <coda_bin_cursor_read_uint32_partial_array>:
    2d50:	ldr	ip, [r0, #4]
    2d54:	push	{lr}		; (str lr, [sp, #-4]!)
    2d58:	sub	sp, sp, #12
    2d5c:	add	ip, r0, ip, lsl #4
    2d60:	ldr	ip, [ip, #-8]
    2d64:	ldr	lr, [ip]
    2d68:	cmp	lr, #99	; 0x63
    2d6c:	ldrhi	ip, [ip, #4]
    2d70:	ldr	ip, [ip, #40]	; 0x28
    2d74:	ldr	ip, [ip]
    2d78:	cmp	ip, #1
    2d7c:	beq	2dac <coda_bin_cursor_read_uint32_partial_array+0x5c>
    2d80:	cmp	ip, #0
    2d84:	bne	2dcc <coda_bin_cursor_read_uint32_partial_array+0x7c>
    2d88:	mov	ip, #4
    2d8c:	str	r3, [sp]
    2d90:	str	ip, [sp, #4]
    2d94:	mov	r3, r2
    2d98:	mov	r2, r1
    2d9c:	ldr	r1, [pc, #60]	; 2de0 <coda_bin_cursor_read_uint32_partial_array+0x90>
    2da0:	bl	8e0 <read_partial_array>
    2da4:	add	sp, sp, #12
    2da8:	pop	{pc}		; (ldr pc, [sp], #4)
    2dac:	mov	ip, #4
    2db0:	str	r3, [sp]
    2db4:	str	ip, [sp, #4]
    2db8:	mov	r3, r2
    2dbc:	mov	r2, r1
    2dc0:	ldr	r1, [pc, #28]	; 2de4 <coda_bin_cursor_read_uint32_partial_array+0x94>
    2dc4:	bl	8e0 <read_partial_array>
    2dc8:	b	2da4 <coda_bin_cursor_read_uint32_partial_array+0x54>
    2dcc:	ldr	r3, [pc, #20]	; 2de8 <coda_bin_cursor_read_uint32_partial_array+0x98>
    2dd0:	ldr	r2, [pc, #20]	; 2dec <coda_bin_cursor_read_uint32_partial_array+0x9c>
    2dd4:	ldr	r1, [pc, #20]	; 2df0 <coda_bin_cursor_read_uint32_partial_array+0xa0>
    2dd8:	ldr	r0, [pc, #20]	; 2df4 <coda_bin_cursor_read_uint32_partial_array+0xa4>
    2ddc:	bl	0 <__assert_fail>
	...
    2de8:	.word	0x000002b0
    2dec:	.word	0x000004ee
    2df0:	.word	0x00000264
    2df4:	.word	0x00000674

00002df8 <coda_bin_cursor_read_int64_partial_array>:
    2df8:	ldr	ip, [r0, #4]
    2dfc:	push	{lr}		; (str lr, [sp, #-4]!)
    2e00:	sub	sp, sp, #12
    2e04:	add	ip, r0, ip, lsl #4
    2e08:	ldr	ip, [ip, #-8]
    2e0c:	ldr	lr, [ip]
    2e10:	cmp	lr, #99	; 0x63
    2e14:	ldrhi	ip, [ip, #4]
    2e18:	ldr	ip, [ip, #40]	; 0x28
    2e1c:	ldr	ip, [ip]
    2e20:	cmp	ip, #1
    2e24:	beq	2e54 <coda_bin_cursor_read_int64_partial_array+0x5c>
    2e28:	cmp	ip, #0
    2e2c:	bne	2e74 <coda_bin_cursor_read_int64_partial_array+0x7c>
    2e30:	mov	ip, #8
    2e34:	str	r3, [sp]
    2e38:	str	ip, [sp, #4]
    2e3c:	mov	r3, r2
    2e40:	mov	r2, r1
    2e44:	ldr	r1, [pc, #60]	; 2e88 <coda_bin_cursor_read_int64_partial_array+0x90>
    2e48:	bl	8e0 <read_partial_array>
    2e4c:	add	sp, sp, #12
    2e50:	pop	{pc}		; (ldr pc, [sp], #4)
    2e54:	mov	ip, #8
    2e58:	str	r3, [sp]
    2e5c:	str	ip, [sp, #4]
    2e60:	mov	r3, r2
    2e64:	mov	r2, r1
    2e68:	ldr	r1, [pc, #28]	; 2e8c <coda_bin_cursor_read_int64_partial_array+0x94>
    2e6c:	bl	8e0 <read_partial_array>
    2e70:	b	2e4c <coda_bin_cursor_read_int64_partial_array+0x54>
    2e74:	ldr	r3, [pc, #20]	; 2e90 <coda_bin_cursor_read_int64_partial_array+0x98>
    2e78:	ldr	r2, [pc, #20]	; 2e94 <coda_bin_cursor_read_int64_partial_array+0x9c>
    2e7c:	ldr	r1, [pc, #20]	; 2e98 <coda_bin_cursor_read_int64_partial_array+0xa0>
    2e80:	ldr	r0, [pc, #20]	; 2e9c <coda_bin_cursor_read_int64_partial_array+0xa4>
    2e84:	bl	0 <__assert_fail>
	...
    2e90:	.word	0x000002dc
    2e94:	.word	0x000004fc
    2e98:	.word	0x00000264
    2e9c:	.word	0x00000674

00002ea0 <coda_bin_cursor_read_uint64_partial_array>:
    2ea0:	ldr	ip, [r0, #4]
    2ea4:	push	{lr}		; (str lr, [sp, #-4]!)
    2ea8:	sub	sp, sp, #12
    2eac:	add	ip, r0, ip, lsl #4
    2eb0:	ldr	ip, [ip, #-8]
    2eb4:	ldr	lr, [ip]
    2eb8:	cmp	lr, #99	; 0x63
    2ebc:	ldrhi	ip, [ip, #4]
    2ec0:	ldr	ip, [ip, #40]	; 0x28
    2ec4:	ldr	ip, [ip]
    2ec8:	cmp	ip, #1
    2ecc:	beq	2efc <coda_bin_cursor_read_uint64_partial_array+0x5c>
    2ed0:	cmp	ip, #0
    2ed4:	bne	2f1c <coda_bin_cursor_read_uint64_partial_array+0x7c>
    2ed8:	mov	ip, #8
    2edc:	str	r3, [sp]
    2ee0:	str	ip, [sp, #4]
    2ee4:	mov	r3, r2
    2ee8:	mov	r2, r1
    2eec:	ldr	r1, [pc, #60]	; 2f30 <coda_bin_cursor_read_uint64_partial_array+0x90>
    2ef0:	bl	8e0 <read_partial_array>
    2ef4:	add	sp, sp, #12
    2ef8:	pop	{pc}		; (ldr pc, [sp], #4)
    2efc:	mov	ip, #8
    2f00:	str	r3, [sp]
    2f04:	str	ip, [sp, #4]
    2f08:	mov	r3, r2
    2f0c:	mov	r2, r1
    2f10:	ldr	r1, [pc, #28]	; 2f34 <coda_bin_cursor_read_uint64_partial_array+0x94>
    2f14:	bl	8e0 <read_partial_array>
    2f18:	b	2ef4 <coda_bin_cursor_read_uint64_partial_array+0x54>
    2f1c:	ldr	r3, [pc, #20]	; 2f38 <coda_bin_cursor_read_uint64_partial_array+0x98>
    2f20:	ldr	r2, [pc, #20]	; 2f3c <coda_bin_cursor_read_uint64_partial_array+0x9c>
    2f24:	ldr	r1, [pc, #20]	; 2f40 <coda_bin_cursor_read_uint64_partial_array+0xa0>
    2f28:	ldr	r0, [pc, #20]	; 2f44 <coda_bin_cursor_read_uint64_partial_array+0xa4>
    2f2c:	bl	0 <__assert_fail>
	...
    2f38:	.word	0x00000308
    2f3c:	.word	0x0000050a
    2f40:	.word	0x00000264
    2f44:	.word	0x00000674

00002f48 <coda_bin_cursor_read_float_partial_array>:
    2f48:	ldr	ip, [r0, #4]
    2f4c:	push	{lr}		; (str lr, [sp, #-4]!)
    2f50:	sub	sp, sp, #12
    2f54:	add	ip, r0, ip, lsl #4
    2f58:	ldr	ip, [ip, #-8]
    2f5c:	ldr	lr, [ip]
    2f60:	cmp	lr, #99	; 0x63
    2f64:	ldrhi	ip, [ip, #4]
    2f68:	ldr	ip, [ip, #40]	; 0x28
    2f6c:	ldr	ip, [ip]
    2f70:	cmp	ip, #1
    2f74:	beq	2fa4 <coda_bin_cursor_read_float_partial_array+0x5c>
    2f78:	cmp	ip, #0
    2f7c:	bne	2fc4 <coda_bin_cursor_read_float_partial_array+0x7c>
    2f80:	mov	ip, #4
    2f84:	str	r3, [sp]
    2f88:	str	ip, [sp, #4]
    2f8c:	mov	r3, r2
    2f90:	mov	r2, r1
    2f94:	ldr	r1, [pc, #60]	; 2fd8 <coda_bin_cursor_read_float_partial_array+0x90>
    2f98:	bl	8e0 <read_partial_array>
    2f9c:	add	sp, sp, #12
    2fa0:	pop	{pc}		; (ldr pc, [sp], #4)
    2fa4:	mov	ip, #4
    2fa8:	str	r3, [sp]
    2fac:	str	ip, [sp, #4]
    2fb0:	mov	r3, r2
    2fb4:	mov	r2, r1
    2fb8:	ldr	r1, [pc, #28]	; 2fdc <coda_bin_cursor_read_float_partial_array+0x94>
    2fbc:	bl	8e0 <read_partial_array>
    2fc0:	b	2f9c <coda_bin_cursor_read_float_partial_array+0x54>
    2fc4:	ldr	r3, [pc, #20]	; 2fe0 <coda_bin_cursor_read_float_partial_array+0x98>
    2fc8:	ldr	r2, [pc, #20]	; 2fe4 <coda_bin_cursor_read_float_partial_array+0x9c>
    2fcc:	ldr	r1, [pc, #20]	; 2fe8 <coda_bin_cursor_read_float_partial_array+0xa0>
    2fd0:	ldr	r0, [pc, #20]	; 2fec <coda_bin_cursor_read_float_partial_array+0xa4>
    2fd4:	bl	0 <__assert_fail>
	...
    2fe0:	.word	0x00000334
    2fe4:	.word	0x00000518
    2fe8:	.word	0x00000264
    2fec:	.word	0x00000674

00002ff0 <coda_bin_cursor_read_double_partial_array>:
    2ff0:	ldr	ip, [r0, #4]
    2ff4:	push	{lr}		; (str lr, [sp, #-4]!)
    2ff8:	sub	sp, sp, #12
    2ffc:	add	ip, r0, ip, lsl #4
    3000:	ldr	ip, [ip, #-8]
    3004:	ldr	lr, [ip]
    3008:	cmp	lr, #99	; 0x63
    300c:	ldrhi	ip, [ip, #4]
    3010:	ldr	ip, [ip, #40]	; 0x28
    3014:	ldr	ip, [ip]
    3018:	cmp	ip, #1
    301c:	beq	304c <coda_bin_cursor_read_double_partial_array+0x5c>
    3020:	cmp	ip, #0
    3024:	bne	306c <coda_bin_cursor_read_double_partial_array+0x7c>
    3028:	mov	ip, #8
    302c:	str	r3, [sp]
    3030:	str	ip, [sp, #4]
    3034:	mov	r3, r2
    3038:	mov	r2, r1
    303c:	ldr	r1, [pc, #60]	; 3080 <coda_bin_cursor_read_double_partial_array+0x90>
    3040:	bl	8e0 <read_partial_array>
    3044:	add	sp, sp, #12
    3048:	pop	{pc}		; (ldr pc, [sp], #4)
    304c:	mov	ip, #8
    3050:	str	r3, [sp]
    3054:	str	ip, [sp, #4]
    3058:	mov	r3, r2
    305c:	mov	r2, r1
    3060:	ldr	r1, [pc, #28]	; 3084 <coda_bin_cursor_read_double_partial_array+0x94>
    3064:	bl	8e0 <read_partial_array>
    3068:	b	3044 <coda_bin_cursor_read_double_partial_array+0x54>
    306c:	ldr	r3, [pc, #20]	; 3088 <coda_bin_cursor_read_double_partial_array+0x98>
    3070:	ldr	r2, [pc, #20]	; 308c <coda_bin_cursor_read_double_partial_array+0x9c>
    3074:	ldr	r1, [pc, #20]	; 3090 <coda_bin_cursor_read_double_partial_array+0xa0>
    3078:	ldr	r0, [pc, #20]	; 3094 <coda_bin_cursor_read_double_partial_array+0xa4>
    307c:	bl	0 <__assert_fail>
	...
    3088:	.word	0x00000360
    308c:	.word	0x00000526
    3090:	.word	0x00000264
    3094:	.word	0x00000674

00003098 <coda_bin_cursor_read_char_partial_array>:
    3098:	ldr	ip, [r0, #4]
    309c:	push	{lr}		; (str lr, [sp, #-4]!)
    30a0:	sub	sp, sp, #12
    30a4:	add	ip, r0, ip, lsl #4
    30a8:	ldr	ip, [ip, #-8]
    30ac:	ldr	lr, [ip]
    30b0:	cmp	lr, #99	; 0x63
    30b4:	ldrhi	ip, [ip, #4]
    30b8:	ldr	ip, [ip, #40]	; 0x28
    30bc:	ldr	ip, [ip]
    30c0:	cmp	ip, #1
    30c4:	beq	30f4 <coda_bin_cursor_read_char_partial_array+0x5c>
    30c8:	cmp	ip, #0
    30cc:	bne	310c <coda_bin_cursor_read_char_partial_array+0x74>
    30d0:	mov	ip, #1
    30d4:	str	r3, [sp]
    30d8:	str	ip, [sp, #4]
    30dc:	mov	r3, r2
    30e0:	mov	r2, r1
    30e4:	ldr	r1, [pc, #52]	; 3120 <coda_bin_cursor_read_char_partial_array+0x88>
    30e8:	bl	8e0 <read_partial_array>
    30ec:	add	sp, sp, #12
    30f0:	pop	{pc}		; (ldr pc, [sp], #4)
    30f4:	stm	sp, {r3, ip}
    30f8:	mov	r3, r2
    30fc:	mov	r2, r1
    3100:	ldr	r1, [pc, #28]	; 3124 <coda_bin_cursor_read_char_partial_array+0x8c>
    3104:	bl	8e0 <read_partial_array>
    3108:	b	30ec <coda_bin_cursor_read_char_partial_array+0x54>
    310c:	ldr	r3, [pc, #20]	; 3128 <coda_bin_cursor_read_char_partial_array+0x90>
    3110:	ldr	r2, [pc, #20]	; 312c <coda_bin_cursor_read_char_partial_array+0x94>
    3114:	ldr	r1, [pc, #20]	; 3130 <coda_bin_cursor_read_char_partial_array+0x98>
    3118:	ldr	r0, [pc, #20]	; 3134 <coda_bin_cursor_read_char_partial_array+0x9c>
    311c:	bl	0 <__assert_fail>
	...
    3128:	.word	0x0000038c
    312c:	.word	0x00000534
    3130:	.word	0x00000264
    3134:	.word	0x00000674
