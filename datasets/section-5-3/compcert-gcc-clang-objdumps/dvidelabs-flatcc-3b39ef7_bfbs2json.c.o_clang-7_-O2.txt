
../compcert-repos/dvidelabs-flatcc-3b39ef7/samples/reflection/CMakeFiles/bfbs2json.dir/bfbs2json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_type>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r4, r0
   c:	mov	r0, #123	; 0x7b
  10:	bl	0 <putchar>
  14:	cmp	r4, #0
  18:	beq	178 <print_type+0x178>
  1c:	ldr	r1, [r4]
  20:	mov	r0, r4
  24:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
  28:	cmp	r1, #6
  2c:	bcc	16c <print_type+0x16c>
  30:	ldrh	r1, [r0, #4]
  34:	cmp	r1, #0
  38:	beq	5c <print_type+0x5c>
  3c:	add	r0, r4, r1
  40:	ldrsb	r0, [r0]
  44:	cmp	r0, #16
  48:	bhi	64 <print_type+0x64>
  4c:	movw	r1, #0
  50:	movt	r1, #0
  54:	ldr	r1, [r1, r0, lsl #2]
  58:	b	6c <print_type+0x6c>
  5c:	mov	r1, #1
  60:	b	84 <print_type+0x84>
  64:	movw	r1, #0
  68:	movt	r1, #0
  6c:	movw	r0, #0
  70:	movt	r0, #0
  74:	bl	0 <printf>
  78:	ldr	r0, [r4]
  7c:	mov	r1, #0
  80:	sub	r0, r4, r0
  84:	ldrh	r2, [r0]
  88:	cmp	r2, #8
  8c:	bcc	16c <print_type+0x16c>
  90:	ldrh	r2, [r0, #6]
  94:	cmp	r2, #0
  98:	beq	114 <print_type+0x114>
  9c:	cmp	r1, #0
  a0:	bne	b4 <print_type+0xb4>
  a4:	mov	r0, #44	; 0x2c
  a8:	bl	0 <putchar>
  ac:	ldr	r0, [r4]
  b0:	sub	r0, r4, r0
  b4:	ldrh	r2, [r0]
  b8:	movw	r1, #0
  bc:	movt	r1, #0
  c0:	cmp	r2, #6
  c4:	bcc	fc <print_type+0xfc>
  c8:	ldrh	r0, [r0, #4]
  cc:	cmp	r0, #0
  d0:	beq	fc <print_type+0xfc>
  d4:	add	r0, r4, r0
  d8:	ldrsb	r0, [r0]
  dc:	cmp	r0, #16
  e0:	bhi	f4 <print_type+0xf4>
  e4:	movw	r1, #0
  e8:	movt	r1, #0
  ec:	ldr	r1, [r1, r0, lsl #2]
  f0:	b	fc <print_type+0xfc>
  f4:	movw	r1, #0
  f8:	movt	r1, #0
  fc:	movw	r0, #0
 100:	movt	r0, #0
 104:	bl	0 <printf>
 108:	ldr	r0, [r4]
 10c:	mov	r1, #0
 110:	sub	r0, r4, r0
 114:	ldrh	r2, [r0]
 118:	cmp	r2, #10
 11c:	bcc	16c <print_type+0x16c>
 120:	ldrh	r2, [r0, #8]
 124:	cmp	r2, #0
 128:	beq	16c <print_type+0x16c>
 12c:	cmp	r1, #0
 130:	bne	144 <print_type+0x144>
 134:	mov	r0, #44	; 0x2c
 138:	bl	0 <putchar>
 13c:	ldr	r0, [r4]
 140:	sub	r0, r4, r0
 144:	ldrh	r2, [r0]
 148:	mvn	r1, #0
 14c:	cmp	r2, #10
 150:	bcc	160 <print_type+0x160>
 154:	ldrh	r0, [r0, #8]
 158:	cmp	r0, #0
 15c:	ldrne	r1, [r4, r0]
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	bl	0 <printf>
 16c:	mov	r0, #125	; 0x7d
 170:	pop	{r4, sl, fp, lr}
 174:	b	0 <putchar>
 178:	movw	r0, #0
 17c:	movw	r1, #0
 180:	movw	r3, #0
 184:	mov	r2, #147	; 0x93
 188:	movt	r0, #0
 18c:	movt	r1, #0
 190:	movt	r3, #0
 194:	bl	0 <__assert_fail>

00000198 <print_object>:
 198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 19c:	add	fp, sp, #28
 1a0:	sub	sp, sp, #4
 1a4:	cmp	r0, #0
 1a8:	beq	5c0 <print_object+0x428>
 1ac:	ldr	r1, [r0]
 1b0:	mov	r4, r0
 1b4:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 1b8:	cmp	r1, #8
 1bc:	bcc	5b4 <print_object+0x41c>
 1c0:	ldrh	r5, [r0, #6]
 1c4:	cmp	r5, #0
 1c8:	beq	5b4 <print_object+0x41c>
 1cc:	ldrh	r0, [r0, #4]
 1d0:	cmp	r0, #0
 1d4:	beq	5e0 <print_object+0x448>
 1d8:	mov	r1, r4
 1dc:	ldr	r6, [r1, r5]!
 1e0:	add	r1, r1, r6
 1e4:	add	r8, r1, #4
 1e8:	mov	r1, r4
 1ec:	ldr	r0, [r1, r0]!
 1f0:	add	r0, r1, r0
 1f4:	add	r1, r0, #4
 1f8:	movw	r0, #0
 1fc:	movt	r0, #0
 200:	bl	0 <printf>
 204:	movw	r0, #0
 208:	movt	r0, #0
 20c:	bl	0 <printf>
 210:	ldr	r0, [r8, #-4]
 214:	cmp	r0, #0
 218:	beq	488 <print_object+0x2f0>
 21c:	add	r1, r6, r5
 220:	movw	r5, #0
 224:	mov	sl, #0
 228:	add	r1, r4, r1
 22c:	movt	r5, #0
 230:	add	r9, r1, #8
 234:	cmp	sl, #0
 238:	beq	248 <print_object+0xb0>
 23c:	mov	r0, #44	; 0x2c
 240:	bl	0 <putchar>
 244:	ldr	r0, [r8, #-4]
 248:	cmp	r0, sl
 24c:	bls	574 <print_object+0x3dc>
 250:	ldr	r7, [r9, #-4]
 254:	add	r6, r9, r7
 258:	cmp	r6, #4
 25c:	beq	594 <print_object+0x3fc>
 260:	ldr	r0, [r6, #-4]
 264:	sub	r0, r7, r0
 268:	add	r0, r9, r0
 26c:	ldrh	r1, [r0, #-4]
 270:	cmp	r1, #6
 274:	bcc	548 <print_object+0x3b0>
 278:	ldrh	r0, [r0]
 27c:	cmp	r0, #0
 280:	beq	548 <print_object+0x3b0>
 284:	add	r1, r7, r0
 288:	add	r1, r9, r1
 28c:	ldr	r1, [r1, #-4]
 290:	add	r1, r1, r7
 294:	add	r0, r1, r0
 298:	add	r1, r9, r0
 29c:	mov	r0, r5
 2a0:	bl	0 <printf>
 2a4:	ldr	r0, [r6, #-4]
 2a8:	sub	r0, r7, r0
 2ac:	add	r0, r9, r0
 2b0:	ldrh	r1, [r0, #-4]
 2b4:	cmp	r1, #8
 2b8:	bcc	554 <print_object+0x3bc>
 2bc:	ldrh	r0, [r0, #2]
 2c0:	cmp	r0, #0
 2c4:	beq	554 <print_object+0x3bc>
 2c8:	add	r1, r7, r0
 2cc:	add	r1, r9, r1
 2d0:	ldr	r1, [r1, #-4]
 2d4:	add	r1, r1, r7
 2d8:	add	r0, r1, r0
 2dc:	add	r0, r9, r0
 2e0:	sub	r0, r0, #4
 2e4:	bl	0 <print_type>
 2e8:	ldr	r0, [r6, #-4]
 2ec:	sub	r1, r7, r0
 2f0:	add	r1, r9, r1
 2f4:	ldrh	r2, [r1, #-4]
 2f8:	cmp	r2, #10
 2fc:	bcc	46c <print_object+0x2d4>
 300:	ldrh	r1, [r1, #4]
 304:	cmp	r1, #0
 308:	beq	338 <print_object+0x1a0>
 30c:	add	r0, r7, r1
 310:	add	r0, r9, r0
 314:	ldrh	r1, [r0, #-4]
 318:	movw	r0, #0
 31c:	movt	r0, #0
 320:	bl	0 <printf>
 324:	ldr	r0, [r6, #-4]
 328:	sub	r0, r7, r0
 32c:	add	r0, r9, r0
 330:	sub	r0, r0, #4
 334:	b	344 <print_object+0x1ac>
 338:	add	r1, r8, sl, lsl #2
 33c:	add	r1, r1, r7
 340:	sub	r0, r1, r0
 344:	ldrh	r1, [r0]
 348:	cmp	r1, #14
 34c:	bcc	46c <print_object+0x2d4>
 350:	ldrh	r1, [r0, #12]
 354:	cmp	r1, #0
 358:	beq	388 <print_object+0x1f0>
 35c:	add	r0, r7, r1
 360:	mov	r1, r9
 364:	ldr	r3, [r1, r0]!
 368:	movw	r0, #0
 36c:	movt	r0, #0
 370:	ldr	r2, [r1, #-4]
 374:	bl	0 <printf>
 378:	ldr	r0, [r6, #-4]
 37c:	sub	r0, r7, r0
 380:	add	r0, r9, r0
 384:	sub	r0, r0, #4
 388:	ldrh	r1, [r0]
 38c:	cmp	r1, #16
 390:	bcc	46c <print_object+0x2d4>
 394:	ldrh	r1, [r0, #14]
 398:	cmp	r1, #0
 39c:	beq	3cc <print_object+0x234>
 3a0:	add	r0, r7, r1
 3a4:	add	r0, r9, r0
 3a8:	vldr	d16, [r0, #-4]
 3ac:	movw	r0, #0
 3b0:	movt	r0, #0
 3b4:	vmov	r2, r3, d16
 3b8:	bl	0 <printf>
 3bc:	ldr	r0, [r6, #-4]
 3c0:	sub	r0, r7, r0
 3c4:	add	r0, r9, r0
 3c8:	sub	r0, r0, #4
 3cc:	ldrh	r1, [r0]
 3d0:	cmp	r1, #20
 3d4:	bcc	46c <print_object+0x2d4>
 3d8:	ldrh	r1, [r0, #18]
 3dc:	cmp	r1, #0
 3e0:	beq	424 <print_object+0x28c>
 3e4:	add	r0, r7, r1
 3e8:	movw	r1, #0
 3ec:	add	r0, r9, r0
 3f0:	movt	r1, #0
 3f4:	ldrb	r0, [r0, #-4]
 3f8:	cmp	r0, #0
 3fc:	movw	r0, #0
 400:	movt	r0, #0
 404:	moveq	r1, r0
 408:	movw	r0, #0
 40c:	movt	r0, #0
 410:	bl	0 <printf>
 414:	ldr	r0, [r6, #-4]
 418:	sub	r0, r7, r0
 41c:	add	r0, r9, r0
 420:	sub	r0, r0, #4
 424:	ldrh	r1, [r0]
 428:	cmp	r1, #22
 42c:	bcc	46c <print_object+0x2d4>
 430:	ldrh	r0, [r0, #20]
 434:	cmp	r0, #0
 438:	beq	46c <print_object+0x2d4>
 43c:	add	r0, r7, r0
 440:	movw	r1, #0
 444:	add	r0, r9, r0
 448:	movt	r1, #0
 44c:	ldrb	r0, [r0, #-4]
 450:	cmp	r0, #0
 454:	movw	r0, #0
 458:	movt	r0, #0
 45c:	moveq	r1, r0
 460:	movw	r0, #0
 464:	movt	r0, #0
 468:	bl	0 <printf>
 46c:	mov	r0, #125	; 0x7d
 470:	bl	0 <putchar>
 474:	ldr	r0, [r8, #-4]
 478:	add	sl, sl, #1
 47c:	add	r9, r9, #4
 480:	cmp	sl, r0
 484:	bcc	234 <print_object+0x9c>
 488:	mov	r0, #93	; 0x5d
 48c:	bl	0 <putchar>
 490:	ldr	r1, [r4]
 494:	mov	r0, r4
 498:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 49c:	cmp	r1, #10
 4a0:	bcc	538 <print_object+0x3a0>
 4a4:	ldrh	r1, [r0, #8]
 4a8:	cmp	r1, #0
 4ac:	beq	4e0 <print_object+0x348>
 4b0:	ldrb	r0, [r4, r1]
 4b4:	movw	r2, #0
 4b8:	movw	r1, #0
 4bc:	movt	r2, #0
 4c0:	movt	r1, #0
 4c4:	cmp	r0, #0
 4c8:	movw	r0, #0
 4cc:	moveq	r1, r2
 4d0:	movt	r0, #0
 4d4:	bl	0 <printf>
 4d8:	ldr	r0, [r4]
 4dc:	sub	r0, r4, r0
 4e0:	ldrh	r1, [r0]
 4e4:	cmp	r1, #12
 4e8:	bcc	538 <print_object+0x3a0>
 4ec:	ldrh	r1, [r0, #10]
 4f0:	cmp	r1, #0
 4f4:	beq	510 <print_object+0x378>
 4f8:	ldr	r1, [r4, r1]
 4fc:	movw	r0, #0
 500:	movt	r0, #0
 504:	bl	0 <printf>
 508:	ldr	r0, [r4]
 50c:	sub	r0, r4, r0
 510:	ldrh	r1, [r0]
 514:	cmp	r1, #14
 518:	bcc	538 <print_object+0x3a0>
 51c:	ldrh	r0, [r0, #12]
 520:	cmp	r0, #0
 524:	beq	538 <print_object+0x3a0>
 528:	ldr	r1, [r4, r0]
 52c:	movw	r0, #0
 530:	movt	r0, #0
 534:	bl	0 <printf>
 538:	mov	r0, #125	; 0x7d
 53c:	sub	sp, fp, #28
 540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 544:	b	0 <putchar>
 548:	movw	r0, #0
 54c:	movt	r0, #0
 550:	b	59c <print_object+0x404>
 554:	movw	r0, #0
 558:	movw	r1, #0
 55c:	movw	r3, #0
 560:	mov	r2, #201	; 0xc9
 564:	movt	r0, #0
 568:	movt	r1, #0
 56c:	movt	r3, #0
 570:	bl	0 <__assert_fail>
 574:	movw	r0, #0
 578:	movw	r1, #0
 57c:	movw	r3, #0
 580:	mov	r2, #192	; 0xc0
 584:	movt	r0, #0
 588:	movt	r1, #0
 58c:	movt	r3, #0
 590:	bl	0 <__assert_fail>
 594:	movw	r0, #0
 598:	movt	r0, #0
 59c:	movw	r1, #0
 5a0:	movw	r3, #0
 5a4:	mov	r2, #195	; 0xc3
 5a8:	movt	r1, #0
 5ac:	movt	r3, #0
 5b0:	bl	0 <__assert_fail>
 5b4:	movw	r0, #0
 5b8:	movt	r0, #0
 5bc:	b	5c8 <print_object+0x430>
 5c0:	movw	r0, #0
 5c4:	movt	r0, #0
 5c8:	movw	r1, #0
 5cc:	movw	r3, #0
 5d0:	mov	r2, #224	; 0xe0
 5d4:	movt	r1, #0
 5d8:	movt	r3, #0
 5dc:	bl	0 <__assert_fail>
 5e0:	movw	r0, #0
 5e4:	movw	r1, #0
 5e8:	movw	r3, #0
 5ec:	mov	r2, #218	; 0xda
 5f0:	movt	r0, #0
 5f4:	movt	r1, #0
 5f8:	movt	r3, #0
 5fc:	bl	0 <__assert_fail>

00000600 <print_enum>:
 600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 604:	add	fp, sp, #28
 608:	sub	sp, sp, #4
 60c:	cmp	r0, #0
 610:	beq	914 <print_enum+0x314>
 614:	ldr	r1, [r0]
 618:	mov	sl, r0
 61c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 620:	cmp	r1, #6
 624:	bcc	8c8 <print_enum+0x2c8>
 628:	ldrh	r0, [r0, #4]
 62c:	cmp	r0, #0
 630:	beq	8c8 <print_enum+0x2c8>
 634:	mov	r1, sl
 638:	ldr	r0, [r1, r0]!
 63c:	add	r0, r1, r0
 640:	add	r1, r0, #4
 644:	movw	r0, #0
 648:	movt	r0, #0
 64c:	bl	0 <printf>
 650:	ldr	r1, [sl]
 654:	mov	r0, sl
 658:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 65c:	cmp	r1, #8
 660:	bcc	8d4 <print_enum+0x2d4>
 664:	ldrh	r4, [r0, #6]
 668:	cmp	r4, #0
 66c:	beq	8d4 <print_enum+0x2d4>
 670:	mov	r6, sl
 674:	movw	r0, #0
 678:	ldr	r5, [r6, r4]!
 67c:	movt	r0, #0
 680:	bl	0 <printf>
 684:	ldr	r0, [r6, r5]!
 688:	cmp	r0, #0
 68c:	beq	804 <print_enum+0x204>
 690:	add	r0, r5, r4
 694:	movw	r5, #0
 698:	add	r6, r6, #4
 69c:	mov	r4, #0
 6a0:	add	r0, sl, r0
 6a4:	movt	r5, #0
 6a8:	add	r7, r0, #8
 6ac:	ldr	r8, [r7, #-4]
 6b0:	cmp	r4, #0
 6b4:	add	r9, r7, r8
 6b8:	beq	6c4 <print_enum+0xc4>
 6bc:	mov	r0, #44	; 0x2c
 6c0:	bl	0 <putchar>
 6c4:	cmp	r9, #4
 6c8:	beq	8a8 <print_enum+0x2a8>
 6cc:	ldr	r0, [r9, #-4]
 6d0:	sub	r0, r8, r0
 6d4:	add	r0, r7, r0
 6d8:	ldrh	r1, [r0, #-4]
 6dc:	cmp	r1, #6
 6e0:	bcc	89c <print_enum+0x29c>
 6e4:	ldrh	r0, [r0]
 6e8:	cmp	r0, #0
 6ec:	beq	89c <print_enum+0x29c>
 6f0:	add	r1, r8, r0
 6f4:	add	r1, r7, r1
 6f8:	ldr	r1, [r1, #-4]
 6fc:	add	r1, r1, r8
 700:	add	r0, r1, r0
 704:	add	r1, r7, r0
 708:	mov	r0, r5
 70c:	bl	0 <printf>
 710:	ldr	r0, [r9, #-4]
 714:	sub	r1, r8, r0
 718:	add	r1, r7, r1
 71c:	ldrh	r2, [r1, #-4]
 720:	cmp	r2, #8
 724:	bcc	7e8 <print_enum+0x1e8>
 728:	ldrh	r1, [r1, #2]
 72c:	cmp	r1, #0
 730:	beq	764 <print_enum+0x164>
 734:	add	r0, r8, r1
 738:	mov	r1, r7
 73c:	ldr	r3, [r1, r0]!
 740:	movw	r0, #0
 744:	movt	r0, #0
 748:	ldr	r2, [r1, #-4]
 74c:	bl	0 <printf>
 750:	ldr	r0, [r9, #-4]
 754:	sub	r1, r8, r0
 758:	add	r1, r7, r1
 75c:	sub	r1, r1, #4
 760:	b	770 <print_enum+0x170>
 764:	add	r1, r6, r4, lsl #2
 768:	add	r1, r1, r8
 76c:	sub	r1, r1, r0
 770:	ldrh	r1, [r1]
 774:	rsb	r0, r0, #0
 778:	cmp	r1, #10
 77c:	bcc	7e8 <print_enum+0x1e8>
 780:	add	r0, r0, r8
 784:	add	r0, r7, r0
 788:	ldrh	r0, [r0, #4]
 78c:	cmp	r0, #0
 790:	beq	7e8 <print_enum+0x1e8>
 794:	movw	r0, #0
 798:	movt	r0, #0
 79c:	bl	0 <printf>
 7a0:	ldr	r0, [r9, #-4]
 7a4:	sub	r0, r8, r0
 7a8:	add	r1, r7, r0
 7ac:	mov	r0, #0
 7b0:	ldrh	r2, [r1, #-4]
 7b4:	cmp	r2, #10
 7b8:	bcc	7e4 <print_enum+0x1e4>
 7bc:	ldrh	r1, [r1, #4]
 7c0:	cmp	r1, #0
 7c4:	beq	7e4 <print_enum+0x1e4>
 7c8:	add	r0, r8, r1
 7cc:	add	r0, r7, r0
 7d0:	ldr	r0, [r0, #-4]
 7d4:	add	r0, r0, r8
 7d8:	add	r0, r0, r1
 7dc:	add	r0, r7, r0
 7e0:	sub	r0, r0, #4
 7e4:	bl	198 <print_object>
 7e8:	mov	r0, #125	; 0x7d
 7ec:	bl	0 <putchar>
 7f0:	ldr	r0, [r6, #-4]
 7f4:	add	r4, r4, #1
 7f8:	add	r7, r7, #4
 7fc:	cmp	r4, r0
 800:	bcc	6ac <print_enum+0xac>
 804:	mov	r0, #93	; 0x5d
 808:	bl	0 <putchar>
 80c:	ldr	r1, [sl]
 810:	mov	r0, sl
 814:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 818:	cmp	r1, #10
 81c:	bcc	854 <print_enum+0x254>
 820:	ldrh	r0, [r0, #8]
 824:	cmp	r0, #0
 828:	beq	854 <print_enum+0x254>
 82c:	ldrb	r0, [sl, r0]
 830:	movw	r2, #0
 834:	movw	r1, #0
 838:	movt	r2, #0
 83c:	movt	r1, #0
 840:	cmp	r0, #0
 844:	movw	r0, #0
 848:	moveq	r1, r2
 84c:	movt	r0, #0
 850:	bl	0 <printf>
 854:	movw	r0, #0
 858:	movt	r0, #0
 85c:	bl	0 <printf>
 860:	ldr	r1, [sl]
 864:	mov	r0, sl
 868:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 86c:	cmp	r1, #12
 870:	bcc	8f4 <print_enum+0x2f4>
 874:	ldrh	r0, [r0, #10]
 878:	cmp	r0, #0
 87c:	beq	8f4 <print_enum+0x2f4>
 880:	ldr	r0, [sl, r0]!
 884:	add	r0, sl, r0
 888:	bl	0 <print_type>
 88c:	mov	r0, #125	; 0x7d
 890:	sub	sp, fp, #28
 894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 898:	b	0 <putchar>
 89c:	movw	r0, #0
 8a0:	movt	r0, #0
 8a4:	b	8b0 <print_enum+0x2b0>
 8a8:	movw	r0, #0
 8ac:	movt	r0, #0
 8b0:	movw	r1, #0
 8b4:	movw	r3, #0
 8b8:	mov	r2, #159	; 0x9f
 8bc:	movt	r1, #0
 8c0:	movt	r3, #0
 8c4:	bl	0 <__assert_fail>
 8c8:	movw	r0, #0
 8cc:	movt	r0, #0
 8d0:	b	91c <print_enum+0x31c>
 8d4:	movw	r0, #0
 8d8:	movw	r1, #0
 8dc:	movw	r3, #0
 8e0:	mov	r2, #183	; 0xb7
 8e4:	movt	r0, #0
 8e8:	movt	r1, #0
 8ec:	movt	r3, #0
 8f0:	bl	0 <__assert_fail>
 8f4:	movw	r0, #0
 8f8:	movw	r1, #0
 8fc:	movw	r3, #0
 900:	mov	r2, #185	; 0xb9
 904:	movt	r0, #0
 908:	movt	r1, #0
 90c:	movt	r3, #0
 910:	bl	0 <__assert_fail>
 914:	movw	r0, #0
 918:	movt	r0, #0
 91c:	movw	r1, #0
 920:	movw	r3, #0
 924:	mov	r2, #177	; 0xb1
 928:	movt	r1, #0
 92c:	movt	r3, #0
 930:	bl	0 <__assert_fail>

00000934 <print_schema>:
 934:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 938:	add	fp, sp, #24
 93c:	cmp	r0, #0
 940:	beq	bd0 <print_schema+0x29c>
 944:	ldr	r1, [r0]
 948:	mov	r8, r0
 94c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 950:	cmp	r1, #6
 954:	bcc	ba4 <print_schema+0x270>
 958:	ldrh	r4, [r0, #4]
 95c:	cmp	r4, #0
 960:	beq	ba4 <print_schema+0x270>
 964:	mov	r5, r8
 968:	mov	r0, #123	; 0x7b
 96c:	ldr	r9, [r5, r4]!
 970:	bl	0 <putchar>
 974:	movw	r0, #0
 978:	movt	r0, #0
 97c:	bl	0 <printf>
 980:	ldr	r0, [r5, r9]
 984:	cmp	r0, #0
 988:	beq	9e0 <print_schema+0xac>
 98c:	add	r1, r9, r4
 990:	mov	r4, #0
 994:	mov	r6, #0
 998:	add	r1, r8, r1
 99c:	add	r7, r1, #4
 9a0:	cmp	r6, #0
 9a4:	beq	9b4 <print_schema+0x80>
 9a8:	mov	r0, #44	; 0x2c
 9ac:	bl	0 <putchar>
 9b0:	ldr	r0, [r5, r9]
 9b4:	cmp	r0, r6
 9b8:	bls	b64 <print_schema+0x230>
 9bc:	ldr	r0, [r7, r6, lsl #2]
 9c0:	add	r0, r4, r0
 9c4:	add	r0, r7, r0
 9c8:	bl	198 <print_object>
 9cc:	ldr	r0, [r5, r9]
 9d0:	add	r6, r6, #1
 9d4:	add	r4, r4, #4
 9d8:	cmp	r6, r0
 9dc:	bcc	9a0 <print_schema+0x6c>
 9e0:	mov	r0, #93	; 0x5d
 9e4:	bl	0 <putchar>
 9e8:	ldr	r1, [r8]
 9ec:	mov	r0, r8
 9f0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 9f4:	cmp	r1, #8
 9f8:	bcc	bb0 <print_schema+0x27c>
 9fc:	ldrh	r4, [r0, #6]
 a00:	cmp	r4, #0
 a04:	beq	bb0 <print_schema+0x27c>
 a08:	mov	r5, r8
 a0c:	movw	r0, #0
 a10:	ldr	r9, [r5, r4]!
 a14:	movt	r0, #0
 a18:	bl	0 <printf>
 a1c:	ldr	r0, [r5, r9]
 a20:	cmp	r0, #0
 a24:	beq	a7c <print_schema+0x148>
 a28:	add	r1, r9, r4
 a2c:	mov	r4, #0
 a30:	mov	r6, #0
 a34:	add	r1, r8, r1
 a38:	add	r7, r1, #4
 a3c:	cmp	r6, #0
 a40:	beq	a50 <print_schema+0x11c>
 a44:	mov	r0, #44	; 0x2c
 a48:	bl	0 <putchar>
 a4c:	ldr	r0, [r5, r9]
 a50:	cmp	r0, r6
 a54:	bls	b84 <print_schema+0x250>
 a58:	ldr	r0, [r7, r6, lsl #2]
 a5c:	add	r0, r4, r0
 a60:	add	r0, r7, r0
 a64:	bl	600 <print_enum>
 a68:	ldr	r0, [r5, r9]
 a6c:	add	r6, r6, #1
 a70:	add	r4, r4, #4
 a74:	cmp	r6, r0
 a78:	bcc	a3c <print_schema+0x108>
 a7c:	mov	r0, #93	; 0x5d
 a80:	bl	0 <putchar>
 a84:	ldr	r1, [r8]
 a88:	mov	r0, r8
 a8c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 a90:	cmp	r1, #10
 a94:	bcc	b54 <print_schema+0x220>
 a98:	ldrh	r1, [r0, #8]
 a9c:	cmp	r1, #0
 aa0:	beq	ac8 <print_schema+0x194>
 aa4:	mov	r0, r8
 aa8:	ldr	r1, [r0, r1]!
 aac:	add	r0, r0, r1
 ab0:	add	r1, r0, #4
 ab4:	movw	r0, #0
 ab8:	movt	r0, #0
 abc:	bl	0 <printf>
 ac0:	ldr	r0, [r8]
 ac4:	sub	r0, r8, r0
 ac8:	ldrh	r1, [r0]
 acc:	cmp	r1, #12
 ad0:	bcc	b54 <print_schema+0x220>
 ad4:	ldrh	r1, [r0, #10]
 ad8:	cmp	r1, #0
 adc:	beq	b04 <print_schema+0x1d0>
 ae0:	mov	r0, r8
 ae4:	ldr	r1, [r0, r1]!
 ae8:	add	r0, r0, r1
 aec:	add	r1, r0, #4
 af0:	movw	r0, #0
 af4:	movt	r0, #0
 af8:	bl	0 <printf>
 afc:	ldr	r0, [r8]
 b00:	sub	r0, r8, r0
 b04:	ldrh	r1, [r0]
 b08:	cmp	r1, #14
 b0c:	bcc	b54 <print_schema+0x220>
 b10:	ldrh	r0, [r0, #12]
 b14:	cmp	r0, #0
 b18:	beq	b54 <print_schema+0x220>
 b1c:	movw	r0, #0
 b20:	movt	r0, #0
 b24:	bl	0 <printf>
 b28:	ldr	r0, [r8]
 b2c:	mov	r1, r8
 b30:	ldrh	r2, [r1, -r0]!
 b34:	mov	r0, #0
 b38:	cmp	r2, #14
 b3c:	bcc	b50 <print_schema+0x21c>
 b40:	ldrh	r1, [r1, #12]
 b44:	cmp	r1, #0
 b48:	ldrne	r0, [r8, r1]!
 b4c:	addne	r0, r8, r0
 b50:	bl	198 <print_object>
 b54:	movw	r0, #0
 b58:	movt	r0, #0
 b5c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
 b60:	b	0 <puts>
 b64:	movw	r0, #0
 b68:	movw	r1, #0
 b6c:	movw	r3, #0
 b70:	mov	r2, #215	; 0xd7
 b74:	movt	r0, #0
 b78:	movt	r1, #0
 b7c:	movt	r3, #0
 b80:	bl	0 <__assert_fail>
 b84:	movw	r0, #0
 b88:	movw	r1, #0
 b8c:	movw	r3, #0
 b90:	mov	r2, #174	; 0xae
 b94:	movt	r0, #0
 b98:	movt	r1, #0
 b9c:	movt	r3, #0
 ba0:	bl	0 <__assert_fail>
 ba4:	movw	r0, #0
 ba8:	movt	r0, #0
 bac:	b	bd8 <print_schema+0x2a4>
 bb0:	movw	r0, #0
 bb4:	movw	r1, #0
 bb8:	movw	r3, #0
 bbc:	mov	r2, #238	; 0xee
 bc0:	movt	r0, #0
 bc4:	movt	r1, #0
 bc8:	movt	r3, #0
 bcc:	bl	0 <__assert_fail>
 bd0:	movw	r0, #0
 bd4:	movt	r0, #0
 bd8:	movw	r1, #0
 bdc:	movw	r3, #0
 be0:	mov	r2, #237	; 0xed
 be4:	movt	r1, #0
 be8:	movt	r3, #0
 bec:	bl	0 <__assert_fail>

00000bf0 <load_and_dump_schema>:
 bf0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 bf4:	add	fp, sp, #24
 bf8:	movw	r1, #0
 bfc:	mov	r8, r0
 c00:	movt	r1, #0
 c04:	bl	0 <fopen>
 c08:	cmp	r0, #0
 c0c:	beq	ce8 <load_and_dump_schema+0xf8>
 c10:	mov	r1, #0
 c14:	mov	r2, #2
 c18:	mov	r6, r0
 c1c:	bl	0 <fseek>
 c20:	mov	r0, r6
 c24:	bl	0 <ftell>
 c28:	mov	r7, r0
 c2c:	movw	r0, #10000	; 0x2710
 c30:	cmp	r7, r0
 c34:	bhi	cd4 <load_and_dump_schema+0xe4>
 c38:	mov	r0, r6
 c3c:	bl	0 <rewind>
 c40:	cmp	r7, #0
 c44:	mov	r0, r7
 c48:	movweq	r0, #1
 c4c:	bl	0 <malloc>
 c50:	cmp	r0, #0
 c54:	beq	cd4 <load_and_dump_schema+0xe4>
 c58:	mov	r4, r0
 c5c:	mov	r1, #0
 c60:	mov	r5, r1
 c64:	add	r0, r4, r1
 c68:	sub	r2, r7, r1
 c6c:	mov	r1, #1
 c70:	mov	r3, r6
 c74:	bl	0 <fread_unlocked>
 c78:	add	r1, r0, r5
 c7c:	cmp	r0, #0
 c80:	bne	c60 <load_and_dump_schema+0x70>
 c84:	mov	r0, r6
 c88:	bl	0 <fclose>
 c8c:	cmp	r7, r5
 c90:	bne	ce0 <load_and_dump_schema+0xf0>
 c94:	cmp	r7, #11
 c98:	bls	d10 <load_and_dump_schema+0x120>
 c9c:	mov	r5, r4
 ca0:	movw	r0, #17986	; 0x4642
 ca4:	ldr	r6, [r5, #4]!
 ca8:	movt	r0, #21314	; 0x5342
 cac:	cmp	r6, r0
 cb0:	bne	d30 <load_and_dump_schema+0x140>
 cb4:	ldr	r0, [r4]
 cb8:	add	r0, r4, r0
 cbc:	bl	934 <print_schema>
 cc0:	mov	r5, #0
 cc4:	mov	r0, r4
 cc8:	bl	0 <free>
 ccc:	mov	r0, r5
 cd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 cd4:	mov	r0, r6
 cd8:	bl	0 <fclose>
 cdc:	b	ce8 <load_and_dump_schema+0xf8>
 ce0:	mov	r0, r4
 ce4:	bl	0 <free>
 ce8:	movw	r0, #0
 cec:	movw	r1, #0
 cf0:	mov	r2, r8
 cf4:	movt	r0, #0
 cf8:	movt	r1, #0
 cfc:	ldr	r0, [r0]
 d00:	bl	0 <fprintf>
 d04:	mvn	r5, #0
 d08:	mov	r0, r5
 d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 d10:	movw	r0, #0
 d14:	movw	r1, #0
 d18:	mov	r2, r8
 d1c:	movt	r0, #0
 d20:	movt	r1, #0
 d24:	ldr	r0, [r0]
 d28:	bl	0 <fprintf>
 d2c:	b	d84 <load_and_dump_schema+0x194>
 d30:	ldr	r1, [r4, #8]
 d34:	cmp	r1, r0
 d38:	bne	d64 <load_and_dump_schema+0x174>
 d3c:	movw	r0, #0
 d40:	mov	r1, #40	; 0x28
 d44:	mov	r2, #1
 d48:	movt	r0, #0
 d4c:	ldr	r3, [r0]
 d50:	movw	r0, #0
 d54:	movt	r0, #0
 d58:	bl	0 <fwrite>
 d5c:	add	r0, r5, r6
 d60:	b	cbc <load_and_dump_schema+0xcc>
 d64:	movw	r0, #0
 d68:	mov	r1, #27
 d6c:	mov	r2, #1
 d70:	movt	r0, #0
 d74:	ldr	r3, [r0]
 d78:	movw	r0, #0
 d7c:	movt	r0, #0
 d80:	bl	0 <fwrite>
 d84:	mvn	r5, #0
 d88:	b	cc4 <load_and_dump_schema+0xd4>

00000d8c <main>:
 d8c:	cmp	r0, #2
 d90:	bne	d9c <main+0x10>
 d94:	ldr	r0, [r1, #4]
 d98:	b	bf0 <load_and_dump_schema>
 d9c:	push	{r4, sl, fp, lr}
 da0:	add	fp, sp, #8
 da4:	movw	r4, #0
 da8:	movw	r0, #0
 dac:	mov	r1, #28
 db0:	mov	r2, #1
 db4:	movt	r4, #0
 db8:	movt	r0, #0
 dbc:	ldr	r3, [r4]
 dc0:	bl	0 <fwrite>
 dc4:	ldr	r3, [r4]
 dc8:	movw	r0, #0
 dcc:	mov	r1, #74	; 0x4a
 dd0:	mov	r2, #1
 dd4:	movt	r0, #0
 dd8:	bl	0 <fwrite>
 ddc:	ldr	r3, [r4]
 de0:	movw	r0, #0
 de4:	mov	r1, #180	; 0xb4
 de8:	mov	r2, #1
 dec:	movt	r0, #0
 df0:	bl	0 <fwrite>
 df4:	mvn	r0, #0
 df8:	bl	0 <exit>
