
../compcert-repos/dvidelabs-flatcc-3b39ef7/samples/reflection/CMakeFiles/bfbs2json.dir/bfbs2json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <readfile>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #40	; 0x28
      10:	str	r0, [fp, #-32]	; 0xffffffe0
      14:	str	r1, [fp, #-36]	; 0xffffffdc
      18:	str	r2, [fp, #-40]	; 0xffffffd8
      1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
      20:	cmp	r3, #0
      24:	bne	30 <readfile+0x30>
      28:	sub	r3, fp, #28
      2c:	b	34 <readfile+0x34>
      30:	ldr	r3, [fp, #-40]	; 0xffffffd8
      34:	str	r3, [fp, #-40]	; 0xffffffd8
      38:	movw	r1, #0
      3c:	movt	r1, #0
      40:	ldr	r0, [fp, #-32]	; 0xffffffe0
      44:	bl	0 <fopen>
      48:	str	r0, [fp, #-20]	; 0xffffffec
      4c:	mov	r3, #0
      50:	str	r3, [fp, #-8]
      54:	mov	r3, #0
      58:	str	r3, [fp, #-16]
      5c:	ldr	r3, [fp, #-20]	; 0xffffffec
      60:	cmp	r3, #0
      64:	beq	168 <readfile+0x168>
      68:	mov	r2, #2
      6c:	mov	r1, #0
      70:	ldr	r0, [fp, #-20]	; 0xffffffec
      74:	bl	0 <fseek>
      78:	ldr	r0, [fp, #-20]	; 0xffffffec
      7c:	bl	0 <ftell>
      80:	mov	r3, r0
      84:	str	r3, [fp, #-8]
      88:	ldr	r3, [fp, #-40]	; 0xffffffd8
      8c:	ldr	r2, [fp, #-8]
      90:	str	r2, [r3]
      94:	ldr	r3, [fp, #-36]	; 0xffffffdc
      98:	cmp	r3, #0
      9c:	beq	b0 <readfile+0xb0>
      a0:	ldr	r2, [fp, #-8]
      a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
      a8:	cmp	r2, r3
      ac:	bhi	170 <readfile+0x170>
      b0:	ldr	r0, [fp, #-20]	; 0xffffffec
      b4:	bl	0 <rewind>
      b8:	ldr	r3, [fp, #-8]
      bc:	cmp	r3, #0
      c0:	beq	cc <readfile+0xcc>
      c4:	ldr	r3, [fp, #-8]
      c8:	b	d0 <readfile+0xd0>
      cc:	mov	r3, #1
      d0:	mov	r0, r3
      d4:	bl	0 <malloc>
      d8:	mov	r3, r0
      dc:	str	r3, [fp, #-16]
      e0:	ldr	r3, [fp, #-16]
      e4:	cmp	r3, #0
      e8:	beq	178 <readfile+0x178>
      ec:	mov	r3, #0
      f0:	str	r3, [fp, #-12]
      f4:	b	108 <readfile+0x108>
      f8:	ldr	r2, [fp, #-12]
      fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     100:	add	r3, r2, r3
     104:	str	r3, [fp, #-12]
     108:	ldr	r2, [fp, #-16]
     10c:	ldr	r3, [fp, #-12]
     110:	add	r0, r2, r3
     114:	ldr	r2, [fp, #-8]
     118:	ldr	r3, [fp, #-12]
     11c:	sub	r2, r2, r3
     120:	ldr	r3, [fp, #-20]	; 0xffffffec
     124:	mov	r1, #1
     128:	bl	0 <fread>
     12c:	str	r0, [fp, #-24]	; 0xffffffe8
     130:	ldr	r3, [fp, #-24]	; 0xffffffe8
     134:	cmp	r3, #0
     138:	bne	f8 <readfile+0xf8>
     13c:	ldr	r2, [fp, #-12]
     140:	ldr	r3, [fp, #-8]
     144:	cmp	r2, r3
     148:	bne	180 <readfile+0x180>
     14c:	ldr	r0, [fp, #-20]	; 0xffffffec
     150:	bl	0 <fclose>
     154:	ldr	r3, [fp, #-40]	; 0xffffffd8
     158:	ldr	r2, [fp, #-8]
     15c:	str	r2, [r3]
     160:	ldr	r3, [fp, #-16]
     164:	b	1bc <readfile+0x1bc>
     168:	nop	{0}
     16c:	b	184 <readfile+0x184>
     170:	nop	{0}
     174:	b	184 <readfile+0x184>
     178:	nop	{0}
     17c:	b	184 <readfile+0x184>
     180:	nop	{0}
     184:	ldr	r3, [fp, #-20]	; 0xffffffec
     188:	cmp	r3, #0
     18c:	beq	198 <readfile+0x198>
     190:	ldr	r0, [fp, #-20]	; 0xffffffec
     194:	bl	0 <fclose>
     198:	ldr	r3, [fp, #-16]
     19c:	cmp	r3, #0
     1a0:	beq	1ac <readfile+0x1ac>
     1a4:	ldr	r0, [fp, #-16]
     1a8:	bl	0 <free>
     1ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
     1b0:	ldr	r2, [fp, #-8]
     1b4:	str	r2, [r3]
     1b8:	mov	r3, #0
     1bc:	mov	r0, r3
     1c0:	sub	sp, fp, #4
     1c4:	ldr	fp, [sp]
     1c8:	add	sp, sp, #4
     1cc:	pop	{pc}		; (ldr pc, [sp], #4)

000001d0 <flatbuffers_uint16_cast_from_pe>:
     1d0:	push	{fp}		; (str fp, [sp, #-4]!)
     1d4:	add	fp, sp, #0
     1d8:	sub	sp, sp, #12
     1dc:	mov	r3, r0
     1e0:	strh	r3, [fp, #-6]
     1e4:	ldrh	r3, [fp, #-6]
     1e8:	mov	r0, r3
     1ec:	add	sp, fp, #0
     1f0:	pop	{fp}		; (ldr fp, [sp], #4)
     1f4:	bx	lr

000001f8 <flatbuffers_uint16_read_from_pe>:
     1f8:	str	fp, [sp, #-8]!
     1fc:	str	lr, [sp, #4]
     200:	add	fp, sp, #4
     204:	sub	sp, sp, #8
     208:	str	r0, [fp, #-8]
     20c:	ldr	r3, [fp, #-8]
     210:	ldrh	r3, [r3]
     214:	mov	r0, r3
     218:	bl	1d0 <flatbuffers_uint16_cast_from_pe>
     21c:	mov	r3, r0
     220:	mov	r0, r3
     224:	sub	sp, fp, #4
     228:	ldr	fp, [sp]
     22c:	add	sp, sp, #4
     230:	pop	{pc}		; (ldr pc, [sp], #4)

00000234 <flatbuffers_int32_cast_from_pe>:
     234:	push	{fp}		; (str fp, [sp, #-4]!)
     238:	add	fp, sp, #0
     23c:	sub	sp, sp, #12
     240:	str	r0, [fp, #-8]
     244:	ldr	r3, [fp, #-8]
     248:	mov	r0, r3
     24c:	add	sp, fp, #0
     250:	pop	{fp}		; (ldr fp, [sp], #4)
     254:	bx	lr

00000258 <flatbuffers_int32_read_from_pe>:
     258:	str	fp, [sp, #-8]!
     25c:	str	lr, [sp, #4]
     260:	add	fp, sp, #4
     264:	sub	sp, sp, #8
     268:	str	r0, [fp, #-8]
     26c:	ldr	r3, [fp, #-8]
     270:	ldr	r3, [r3]
     274:	mov	r0, r3
     278:	bl	234 <flatbuffers_int32_cast_from_pe>
     27c:	mov	r3, r0
     280:	mov	r0, r3
     284:	sub	sp, fp, #4
     288:	ldr	fp, [sp]
     28c:	add	sp, sp, #4
     290:	pop	{pc}		; (ldr pc, [sp], #4)

00000294 <flatbuffers_int64_cast_from_pe>:
     294:	push	{fp}		; (str fp, [sp, #-4]!)
     298:	add	fp, sp, #0
     29c:	sub	sp, sp, #12
     2a0:	strd	r0, [fp, #-12]
     2a4:	ldrd	r2, [fp, #-12]
     2a8:	mov	r0, r2
     2ac:	mov	r1, r3
     2b0:	add	sp, fp, #0
     2b4:	pop	{fp}		; (ldr fp, [sp], #4)
     2b8:	bx	lr

000002bc <flatbuffers_int64_read_from_pe>:
     2bc:	str	fp, [sp, #-8]!
     2c0:	str	lr, [sp, #4]
     2c4:	add	fp, sp, #4
     2c8:	sub	sp, sp, #8
     2cc:	str	r0, [fp, #-8]
     2d0:	ldr	r3, [fp, #-8]
     2d4:	ldrd	r2, [r3]
     2d8:	mov	r0, r2
     2dc:	mov	r1, r3
     2e0:	bl	294 <flatbuffers_int64_cast_from_pe>
     2e4:	mov	r2, r0
     2e8:	mov	r3, r1
     2ec:	mov	r0, r2
     2f0:	mov	r1, r3
     2f4:	sub	sp, fp, #4
     2f8:	ldr	fp, [sp]
     2fc:	add	sp, sp, #4
     300:	pop	{pc}		; (ldr pc, [sp], #4)

00000304 <flatbuffers_double_cast_from_pe>:
     304:	push	{fp}		; (str fp, [sp, #-4]!)
     308:	add	fp, sp, #0
     30c:	sub	sp, sp, #20
     310:	vstr	d0, [fp, #-20]	; 0xffffffec
     314:	ldrd	r2, [fp, #-20]	; 0xffffffec
     318:	strd	r2, [fp, #-12]
     31c:	ldrd	r2, [fp, #-12]
     320:	strd	r2, [fp, #-12]
     324:	ldrd	r2, [fp, #-12]
     328:	vmov	d7, r2, r3
     32c:	vmov.f64	d0, d7
     330:	add	sp, fp, #0
     334:	pop	{fp}		; (ldr fp, [sp], #4)
     338:	bx	lr

0000033c <flatbuffers_double_read_from_pe>:
     33c:	str	fp, [sp, #-8]!
     340:	str	lr, [sp, #4]
     344:	add	fp, sp, #4
     348:	sub	sp, sp, #8
     34c:	str	r0, [fp, #-8]
     350:	ldr	r3, [fp, #-8]
     354:	vldr	d7, [r3]
     358:	vmov.f64	d0, d7
     35c:	bl	304 <flatbuffers_double_cast_from_pe>
     360:	vmov.f64	d7, d0
     364:	vmov.f64	d0, d7
     368:	sub	sp, fp, #4
     36c:	ldr	fp, [sp]
     370:	add	sp, sp, #4
     374:	pop	{pc}		; (ldr pc, [sp], #4)

00000378 <flatbuffers_bool_cast_from_pe>:
     378:	push	{fp}		; (str fp, [sp, #-4]!)
     37c:	add	fp, sp, #0
     380:	sub	sp, sp, #12
     384:	mov	r3, r0
     388:	strb	r3, [fp, #-5]
     38c:	ldrb	r3, [fp, #-5]
     390:	mov	r0, r3
     394:	add	sp, fp, #0
     398:	pop	{fp}		; (ldr fp, [sp], #4)
     39c:	bx	lr

000003a0 <flatbuffers_bool_read_from_pe>:
     3a0:	str	fp, [sp, #-8]!
     3a4:	str	lr, [sp, #4]
     3a8:	add	fp, sp, #4
     3ac:	sub	sp, sp, #8
     3b0:	str	r0, [fp, #-8]
     3b4:	ldr	r3, [fp, #-8]
     3b8:	ldrb	r3, [r3]
     3bc:	mov	r0, r3
     3c0:	bl	378 <flatbuffers_bool_cast_from_pe>
     3c4:	mov	r3, r0
     3c8:	mov	r0, r3
     3cc:	sub	sp, fp, #4
     3d0:	ldr	fp, [sp]
     3d4:	add	sp, sp, #4
     3d8:	pop	{pc}		; (ldr pc, [sp], #4)

000003dc <__flatbuffers_uoffset_cast_from_pe>:
     3dc:	push	{fp}		; (str fp, [sp, #-4]!)
     3e0:	add	fp, sp, #0
     3e4:	sub	sp, sp, #12
     3e8:	str	r0, [fp, #-8]
     3ec:	ldr	r3, [fp, #-8]
     3f0:	mov	r0, r3
     3f4:	add	sp, fp, #0
     3f8:	pop	{fp}		; (ldr fp, [sp], #4)
     3fc:	bx	lr

00000400 <__flatbuffers_uoffset_read_from_pe>:
     400:	str	fp, [sp, #-8]!
     404:	str	lr, [sp, #4]
     408:	add	fp, sp, #4
     40c:	sub	sp, sp, #8
     410:	str	r0, [fp, #-8]
     414:	ldr	r3, [fp, #-8]
     418:	ldr	r3, [r3]
     41c:	mov	r0, r3
     420:	bl	3dc <__flatbuffers_uoffset_cast_from_pe>
     424:	mov	r3, r0
     428:	mov	r0, r3
     42c:	sub	sp, fp, #4
     430:	ldr	fp, [sp]
     434:	add	sp, sp, #4
     438:	pop	{pc}		; (ldr pc, [sp], #4)

0000043c <__flatbuffers_soffset_cast_from_pe>:
     43c:	push	{fp}		; (str fp, [sp, #-4]!)
     440:	add	fp, sp, #0
     444:	sub	sp, sp, #12
     448:	str	r0, [fp, #-8]
     44c:	ldr	r3, [fp, #-8]
     450:	mov	r0, r3
     454:	add	sp, fp, #0
     458:	pop	{fp}		; (ldr fp, [sp], #4)
     45c:	bx	lr

00000460 <__flatbuffers_soffset_read_from_pe>:
     460:	str	fp, [sp, #-8]!
     464:	str	lr, [sp, #4]
     468:	add	fp, sp, #4
     46c:	sub	sp, sp, #8
     470:	str	r0, [fp, #-8]
     474:	ldr	r3, [fp, #-8]
     478:	ldr	r3, [r3]
     47c:	mov	r0, r3
     480:	bl	43c <__flatbuffers_soffset_cast_from_pe>
     484:	mov	r3, r0
     488:	mov	r0, r3
     48c:	sub	sp, fp, #4
     490:	ldr	fp, [sp]
     494:	add	sp, sp, #4
     498:	pop	{pc}		; (ldr pc, [sp], #4)

0000049c <__flatbuffers_voffset_cast_from_pe>:
     49c:	push	{fp}		; (str fp, [sp, #-4]!)
     4a0:	add	fp, sp, #0
     4a4:	sub	sp, sp, #12
     4a8:	mov	r3, r0
     4ac:	strh	r3, [fp, #-6]
     4b0:	ldrh	r3, [fp, #-6]
     4b4:	mov	r0, r3
     4b8:	add	sp, fp, #0
     4bc:	pop	{fp}		; (ldr fp, [sp], #4)
     4c0:	bx	lr

000004c4 <__flatbuffers_voffset_read_from_pe>:
     4c4:	str	fp, [sp, #-8]!
     4c8:	str	lr, [sp, #4]
     4cc:	add	fp, sp, #4
     4d0:	sub	sp, sp, #8
     4d4:	str	r0, [fp, #-8]
     4d8:	ldr	r3, [fp, #-8]
     4dc:	ldrh	r3, [r3]
     4e0:	mov	r0, r3
     4e4:	bl	49c <__flatbuffers_voffset_cast_from_pe>
     4e8:	mov	r3, r0
     4ec:	mov	r0, r3
     4f0:	sub	sp, fp, #4
     4f4:	ldr	fp, [sp]
     4f8:	add	sp, sp, #4
     4fc:	pop	{pc}		; (ldr pc, [sp], #4)

00000500 <__flatbuffers_thash_cast_from_pe>:
     500:	push	{fp}		; (str fp, [sp, #-4]!)
     504:	add	fp, sp, #0
     508:	sub	sp, sp, #12
     50c:	str	r0, [fp, #-8]
     510:	ldr	r3, [fp, #-8]
     514:	mov	r0, r3
     518:	add	sp, fp, #0
     51c:	pop	{fp}		; (ldr fp, [sp], #4)
     520:	bx	lr

00000524 <__flatbuffers_thash_cast_from_le>:
     524:	push	{fp}		; (str fp, [sp, #-4]!)
     528:	add	fp, sp, #0
     52c:	sub	sp, sp, #12
     530:	str	r0, [fp, #-8]
     534:	ldr	r3, [fp, #-8]
     538:	mov	r0, r3
     53c:	add	sp, fp, #0
     540:	pop	{fp}		; (ldr fp, [sp], #4)
     544:	bx	lr

00000548 <__flatbuffers_thash_read_from_pe>:
     548:	str	fp, [sp, #-8]!
     54c:	str	lr, [sp, #4]
     550:	add	fp, sp, #4
     554:	sub	sp, sp, #8
     558:	str	r0, [fp, #-8]
     55c:	ldr	r3, [fp, #-8]
     560:	ldr	r3, [r3]
     564:	mov	r0, r3
     568:	bl	500 <__flatbuffers_thash_cast_from_pe>
     56c:	mov	r3, r0
     570:	mov	r0, r3
     574:	sub	sp, fp, #4
     578:	ldr	fp, [sp]
     57c:	add	sp, sp, #4
     580:	pop	{pc}		; (ldr pc, [sp], #4)

00000584 <flatbuffers_vec_len>:
     584:	str	fp, [sp, #-8]!
     588:	str	lr, [sp, #4]
     58c:	add	fp, sp, #4
     590:	sub	sp, sp, #8
     594:	str	r0, [fp, #-8]
     598:	ldr	r3, [fp, #-8]
     59c:	cmp	r3, #0
     5a0:	beq	5bc <flatbuffers_vec_len+0x38>
     5a4:	ldr	r3, [fp, #-8]
     5a8:	sub	r3, r3, #4
     5ac:	mov	r0, r3
     5b0:	bl	400 <__flatbuffers_uoffset_read_from_pe>
     5b4:	mov	r3, r0
     5b8:	b	5c0 <flatbuffers_vec_len+0x3c>
     5bc:	mov	r3, #0
     5c0:	mov	r0, r3
     5c4:	sub	sp, fp, #4
     5c8:	ldr	fp, [sp]
     5cc:	add	sp, sp, #4
     5d0:	pop	{pc}		; (ldr pc, [sp], #4)

000005d4 <flatbuffers_has_identifier>:
     5d4:	str	fp, [sp, #-8]!
     5d8:	str	lr, [sp, #4]
     5dc:	add	fp, sp, #4
     5e0:	sub	sp, sp, #16
     5e4:	str	r0, [fp, #-16]
     5e8:	str	r1, [fp, #-20]	; 0xffffffec
     5ec:	mov	r3, #0
     5f0:	str	r3, [fp, #-12]
     5f4:	ldr	r3, [fp, #-20]	; 0xffffffec
     5f8:	cmp	r3, #0
     5fc:	bne	608 <flatbuffers_has_identifier+0x34>
     600:	mov	r3, #1
     604:	b	66c <flatbuffers_has_identifier+0x98>
     608:	sub	r3, fp, #12
     60c:	mov	r2, #4
     610:	ldr	r1, [fp, #-20]	; 0xffffffec
     614:	mov	r0, r3
     618:	bl	0 <strncpy>
     61c:	ldr	r3, [fp, #-12]
     620:	mov	r0, r3
     624:	bl	524 <__flatbuffers_thash_cast_from_le>
     628:	mov	r3, r0
     62c:	str	r3, [fp, #-12]
     630:	ldr	r3, [fp, #-16]
     634:	add	r3, r3, #4
     638:	mov	r0, r3
     63c:	bl	548 <__flatbuffers_thash_read_from_pe>
     640:	str	r0, [fp, #-8]
     644:	ldr	r3, [fp, #-12]
     648:	cmp	r3, #0
     64c:	beq	660 <flatbuffers_has_identifier+0x8c>
     650:	ldr	r3, [fp, #-12]
     654:	ldr	r2, [fp, #-8]
     658:	cmp	r2, r3
     65c:	bne	668 <flatbuffers_has_identifier+0x94>
     660:	mov	r3, #1
     664:	b	66c <flatbuffers_has_identifier+0x98>
     668:	mov	r3, #0
     66c:	mov	r0, r3
     670:	sub	sp, fp, #4
     674:	ldr	fp, [sp]
     678:	add	sp, sp, #4
     67c:	pop	{pc}		; (ldr pc, [sp], #4)

00000680 <reflection_BaseType_cast_from_pe>:
     680:	push	{fp}		; (str fp, [sp, #-4]!)
     684:	add	fp, sp, #0
     688:	sub	sp, sp, #12
     68c:	mov	r3, r0
     690:	strb	r3, [fp, #-5]
     694:	ldrsb	r3, [fp, #-5]
     698:	mov	r0, r3
     69c:	add	sp, fp, #0
     6a0:	pop	{fp}		; (ldr fp, [sp], #4)
     6a4:	bx	lr

000006a8 <reflection_BaseType_read_from_pe>:
     6a8:	str	fp, [sp, #-8]!
     6ac:	str	lr, [sp, #4]
     6b0:	add	fp, sp, #4
     6b4:	sub	sp, sp, #8
     6b8:	str	r0, [fp, #-8]
     6bc:	ldr	r3, [fp, #-8]
     6c0:	ldrsb	r3, [r3]
     6c4:	mov	r0, r3
     6c8:	bl	680 <reflection_BaseType_cast_from_pe>
     6cc:	mov	r3, r0
     6d0:	mov	r0, r3
     6d4:	sub	sp, fp, #4
     6d8:	ldr	fp, [sp]
     6dc:	add	sp, sp, #4
     6e0:	pop	{pc}		; (ldr pc, [sp], #4)

000006e4 <reflection_BaseType_name>:
     6e4:	push	{fp}		; (str fp, [sp, #-4]!)
     6e8:	add	fp, sp, #0
     6ec:	sub	sp, sp, #12
     6f0:	mov	r3, r0
     6f4:	strb	r3, [fp, #-5]
     6f8:	ldrsb	r3, [fp, #-5]
     6fc:	cmp	r3, #16
     700:	ldrls	pc, [pc, r3, lsl #2]
     704:	b	818 <reflection_BaseType_name+0x134>
     708:	.word	0x0000074c
     70c:	.word	0x00000758
     710:	.word	0x00000764
     714:	.word	0x00000770
     718:	.word	0x0000077c
     71c:	.word	0x00000788
     720:	.word	0x00000794
     724:	.word	0x000007a0
     728:	.word	0x000007ac
     72c:	.word	0x000007b8
     730:	.word	0x000007c4
     734:	.word	0x000007d0
     738:	.word	0x000007dc
     73c:	.word	0x000007e8
     740:	.word	0x000007f4
     744:	.word	0x00000800
     748:	.word	0x0000080c
     74c:	movw	r3, #0
     750:	movt	r3, #0
     754:	b	820 <reflection_BaseType_name+0x13c>
     758:	movw	r3, #0
     75c:	movt	r3, #0
     760:	b	820 <reflection_BaseType_name+0x13c>
     764:	movw	r3, #0
     768:	movt	r3, #0
     76c:	b	820 <reflection_BaseType_name+0x13c>
     770:	movw	r3, #0
     774:	movt	r3, #0
     778:	b	820 <reflection_BaseType_name+0x13c>
     77c:	movw	r3, #0
     780:	movt	r3, #0
     784:	b	820 <reflection_BaseType_name+0x13c>
     788:	movw	r3, #0
     78c:	movt	r3, #0
     790:	b	820 <reflection_BaseType_name+0x13c>
     794:	movw	r3, #0
     798:	movt	r3, #0
     79c:	b	820 <reflection_BaseType_name+0x13c>
     7a0:	movw	r3, #0
     7a4:	movt	r3, #0
     7a8:	b	820 <reflection_BaseType_name+0x13c>
     7ac:	movw	r3, #0
     7b0:	movt	r3, #0
     7b4:	b	820 <reflection_BaseType_name+0x13c>
     7b8:	movw	r3, #0
     7bc:	movt	r3, #0
     7c0:	b	820 <reflection_BaseType_name+0x13c>
     7c4:	movw	r3, #0
     7c8:	movt	r3, #0
     7cc:	b	820 <reflection_BaseType_name+0x13c>
     7d0:	movw	r3, #0
     7d4:	movt	r3, #0
     7d8:	b	820 <reflection_BaseType_name+0x13c>
     7dc:	movw	r3, #0
     7e0:	movt	r3, #0
     7e4:	b	820 <reflection_BaseType_name+0x13c>
     7e8:	movw	r3, #0
     7ec:	movt	r3, #0
     7f0:	b	820 <reflection_BaseType_name+0x13c>
     7f4:	movw	r3, #0
     7f8:	movt	r3, #0
     7fc:	b	820 <reflection_BaseType_name+0x13c>
     800:	movw	r3, #0
     804:	movt	r3, #0
     808:	b	820 <reflection_BaseType_name+0x13c>
     80c:	movw	r3, #0
     810:	movt	r3, #0
     814:	b	820 <reflection_BaseType_name+0x13c>
     818:	movw	r3, #0
     81c:	movt	r3, #0
     820:	mov	r0, r3
     824:	add	sp, fp, #0
     828:	pop	{fp}		; (ldr fp, [sp], #4)
     82c:	bx	lr

00000830 <reflection_Type_base_type>:
     830:	str	fp, [sp, #-8]!
     834:	str	lr, [sp, #4]
     838:	add	fp, sp, #4
     83c:	sub	sp, sp, #16
     840:	str	r0, [fp, #-16]
     844:	mov	r3, #0
     848:	strh	r3, [fp, #-6]
     84c:	ldr	r3, [fp, #-16]
     850:	cmp	r3, #0
     854:	bne	878 <reflection_Type_base_type+0x48>
     858:	movw	r3, #0
     85c:	movt	r3, #0
     860:	mov	r2, #147	; 0x93
     864:	movw	r1, #0
     868:	movt	r1, #0
     86c:	movw	r0, #0
     870:	movt	r0, #0
     874:	bl	0 <__assert_fail>
     878:	mov	r3, #0
     87c:	strh	r3, [fp, #-8]
     880:	ldr	r0, [fp, #-16]
     884:	bl	460 <__flatbuffers_soffset_read_from_pe>
     888:	mov	r3, r0
     88c:	rsb	r3, r3, #0
     890:	ldr	r2, [fp, #-16]
     894:	add	r3, r2, r3
     898:	str	r3, [fp, #-12]
     89c:	ldr	r0, [fp, #-12]
     8a0:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     8a4:	mov	r3, r0
     8a8:	mov	r2, r3
     8ac:	ldrh	r3, [fp, #-8]
     8b0:	add	r3, r3, #3
     8b4:	lsl	r3, r3, #1
     8b8:	cmp	r2, r3
     8bc:	bcc	8e4 <reflection_Type_base_type+0xb4>
     8c0:	ldrh	r3, [fp, #-8]
     8c4:	add	r3, r3, #2
     8c8:	lsl	r3, r3, #1
     8cc:	ldr	r2, [fp, #-12]
     8d0:	add	r3, r2, r3
     8d4:	mov	r0, r3
     8d8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     8dc:	mov	r3, r0
     8e0:	strh	r3, [fp, #-6]
     8e4:	ldrh	r3, [fp, #-6]
     8e8:	cmp	r3, #0
     8ec:	beq	90c <reflection_Type_base_type+0xdc>
     8f0:	ldrh	r3, [fp, #-6]
     8f4:	ldr	r2, [fp, #-16]
     8f8:	add	r3, r2, r3
     8fc:	mov	r0, r3
     900:	bl	6a8 <reflection_BaseType_read_from_pe>
     904:	mov	r3, r0
     908:	b	910 <reflection_Type_base_type+0xe0>
     90c:	mov	r3, #0
     910:	mov	r0, r3
     914:	sub	sp, fp, #4
     918:	ldr	fp, [sp]
     91c:	add	sp, sp, #4
     920:	pop	{pc}		; (ldr pc, [sp], #4)

00000924 <reflection_Type_base_type_is_present>:
     924:	str	fp, [sp, #-8]!
     928:	str	lr, [sp, #4]
     92c:	add	fp, sp, #4
     930:	sub	sp, sp, #16
     934:	str	r0, [fp, #-16]
     938:	mov	r3, #0
     93c:	strh	r3, [fp, #-6]
     940:	ldr	r3, [fp, #-16]
     944:	cmp	r3, #0
     948:	bne	96c <reflection_Type_base_type_is_present+0x48>
     94c:	movw	r3, #0
     950:	movt	r3, #0
     954:	mov	r2, #147	; 0x93
     958:	movw	r1, #0
     95c:	movt	r1, #0
     960:	movw	r0, #0
     964:	movt	r0, #0
     968:	bl	0 <__assert_fail>
     96c:	mov	r3, #0
     970:	strh	r3, [fp, #-8]
     974:	ldr	r0, [fp, #-16]
     978:	bl	460 <__flatbuffers_soffset_read_from_pe>
     97c:	mov	r3, r0
     980:	rsb	r3, r3, #0
     984:	ldr	r2, [fp, #-16]
     988:	add	r3, r2, r3
     98c:	str	r3, [fp, #-12]
     990:	ldr	r0, [fp, #-12]
     994:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     998:	mov	r3, r0
     99c:	mov	r2, r3
     9a0:	ldrh	r3, [fp, #-8]
     9a4:	add	r3, r3, #3
     9a8:	lsl	r3, r3, #1
     9ac:	cmp	r2, r3
     9b0:	bcc	9d8 <reflection_Type_base_type_is_present+0xb4>
     9b4:	ldrh	r3, [fp, #-8]
     9b8:	add	r3, r3, #2
     9bc:	lsl	r3, r3, #1
     9c0:	ldr	r2, [fp, #-12]
     9c4:	add	r3, r2, r3
     9c8:	mov	r0, r3
     9cc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     9d0:	mov	r3, r0
     9d4:	strh	r3, [fp, #-6]
     9d8:	ldrh	r3, [fp, #-6]
     9dc:	cmp	r3, #0
     9e0:	movne	r3, #1
     9e4:	moveq	r3, #0
     9e8:	uxtb	r3, r3
     9ec:	mov	r0, r3
     9f0:	sub	sp, fp, #4
     9f4:	ldr	fp, [sp]
     9f8:	add	sp, sp, #4
     9fc:	pop	{pc}		; (ldr pc, [sp], #4)

00000a00 <reflection_Type_element_is_present>:
     a00:	str	fp, [sp, #-8]!
     a04:	str	lr, [sp, #4]
     a08:	add	fp, sp, #4
     a0c:	sub	sp, sp, #16
     a10:	str	r0, [fp, #-16]
     a14:	mov	r3, #0
     a18:	strh	r3, [fp, #-6]
     a1c:	ldr	r3, [fp, #-16]
     a20:	cmp	r3, #0
     a24:	bne	a48 <reflection_Type_element_is_present+0x48>
     a28:	movw	r3, #0
     a2c:	movt	r3, #0
     a30:	mov	r2, #148	; 0x94
     a34:	movw	r1, #0
     a38:	movt	r1, #0
     a3c:	movw	r0, #0
     a40:	movt	r0, #0
     a44:	bl	0 <__assert_fail>
     a48:	mov	r3, #1
     a4c:	strh	r3, [fp, #-8]
     a50:	ldr	r0, [fp, #-16]
     a54:	bl	460 <__flatbuffers_soffset_read_from_pe>
     a58:	mov	r3, r0
     a5c:	rsb	r3, r3, #0
     a60:	ldr	r2, [fp, #-16]
     a64:	add	r3, r2, r3
     a68:	str	r3, [fp, #-12]
     a6c:	ldr	r0, [fp, #-12]
     a70:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     a74:	mov	r3, r0
     a78:	mov	r2, r3
     a7c:	ldrh	r3, [fp, #-8]
     a80:	add	r3, r3, #3
     a84:	lsl	r3, r3, #1
     a88:	cmp	r2, r3
     a8c:	bcc	ab4 <reflection_Type_element_is_present+0xb4>
     a90:	ldrh	r3, [fp, #-8]
     a94:	add	r3, r3, #2
     a98:	lsl	r3, r3, #1
     a9c:	ldr	r2, [fp, #-12]
     aa0:	add	r3, r2, r3
     aa4:	mov	r0, r3
     aa8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     aac:	mov	r3, r0
     ab0:	strh	r3, [fp, #-6]
     ab4:	ldrh	r3, [fp, #-6]
     ab8:	cmp	r3, #0
     abc:	movne	r3, #1
     ac0:	moveq	r3, #0
     ac4:	uxtb	r3, r3
     ac8:	mov	r0, r3
     acc:	sub	sp, fp, #4
     ad0:	ldr	fp, [sp]
     ad4:	add	sp, sp, #4
     ad8:	pop	{pc}		; (ldr pc, [sp], #4)

00000adc <reflection_Type_index>:
     adc:	str	fp, [sp, #-8]!
     ae0:	str	lr, [sp, #4]
     ae4:	add	fp, sp, #4
     ae8:	sub	sp, sp, #16
     aec:	str	r0, [fp, #-16]
     af0:	mov	r3, #0
     af4:	strh	r3, [fp, #-6]
     af8:	ldr	r3, [fp, #-16]
     afc:	cmp	r3, #0
     b00:	bne	b24 <reflection_Type_index+0x48>
     b04:	movw	r3, #0
     b08:	movt	r3, #0
     b0c:	mov	r2, #149	; 0x95
     b10:	movw	r1, #0
     b14:	movt	r1, #0
     b18:	movw	r0, #0
     b1c:	movt	r0, #0
     b20:	bl	0 <__assert_fail>
     b24:	mov	r3, #2
     b28:	strh	r3, [fp, #-8]
     b2c:	ldr	r0, [fp, #-16]
     b30:	bl	460 <__flatbuffers_soffset_read_from_pe>
     b34:	mov	r3, r0
     b38:	rsb	r3, r3, #0
     b3c:	ldr	r2, [fp, #-16]
     b40:	add	r3, r2, r3
     b44:	str	r3, [fp, #-12]
     b48:	ldr	r0, [fp, #-12]
     b4c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     b50:	mov	r3, r0
     b54:	mov	r2, r3
     b58:	ldrh	r3, [fp, #-8]
     b5c:	add	r3, r3, #3
     b60:	lsl	r3, r3, #1
     b64:	cmp	r2, r3
     b68:	bcc	b90 <reflection_Type_index+0xb4>
     b6c:	ldrh	r3, [fp, #-8]
     b70:	add	r3, r3, #2
     b74:	lsl	r3, r3, #1
     b78:	ldr	r2, [fp, #-12]
     b7c:	add	r3, r2, r3
     b80:	mov	r0, r3
     b84:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     b88:	mov	r3, r0
     b8c:	strh	r3, [fp, #-6]
     b90:	ldrh	r3, [fp, #-6]
     b94:	cmp	r3, #0
     b98:	beq	bb8 <reflection_Type_index+0xdc>
     b9c:	ldrh	r3, [fp, #-6]
     ba0:	ldr	r2, [fp, #-16]
     ba4:	add	r3, r2, r3
     ba8:	mov	r0, r3
     bac:	bl	258 <flatbuffers_int32_read_from_pe>
     bb0:	mov	r3, r0
     bb4:	b	bbc <reflection_Type_index+0xe0>
     bb8:	mvn	r3, #0
     bbc:	mov	r0, r3
     bc0:	sub	sp, fp, #4
     bc4:	ldr	fp, [sp]
     bc8:	add	sp, sp, #4
     bcc:	pop	{pc}		; (ldr pc, [sp], #4)

00000bd0 <reflection_Type_index_is_present>:
     bd0:	str	fp, [sp, #-8]!
     bd4:	str	lr, [sp, #4]
     bd8:	add	fp, sp, #4
     bdc:	sub	sp, sp, #16
     be0:	str	r0, [fp, #-16]
     be4:	mov	r3, #0
     be8:	strh	r3, [fp, #-6]
     bec:	ldr	r3, [fp, #-16]
     bf0:	cmp	r3, #0
     bf4:	bne	c18 <reflection_Type_index_is_present+0x48>
     bf8:	movw	r3, #0
     bfc:	movt	r3, #0
     c00:	mov	r2, #149	; 0x95
     c04:	movw	r1, #0
     c08:	movt	r1, #0
     c0c:	movw	r0, #0
     c10:	movt	r0, #0
     c14:	bl	0 <__assert_fail>
     c18:	mov	r3, #2
     c1c:	strh	r3, [fp, #-8]
     c20:	ldr	r0, [fp, #-16]
     c24:	bl	460 <__flatbuffers_soffset_read_from_pe>
     c28:	mov	r3, r0
     c2c:	rsb	r3, r3, #0
     c30:	ldr	r2, [fp, #-16]
     c34:	add	r3, r2, r3
     c38:	str	r3, [fp, #-12]
     c3c:	ldr	r0, [fp, #-12]
     c40:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     c44:	mov	r3, r0
     c48:	mov	r2, r3
     c4c:	ldrh	r3, [fp, #-8]
     c50:	add	r3, r3, #3
     c54:	lsl	r3, r3, #1
     c58:	cmp	r2, r3
     c5c:	bcc	c84 <reflection_Type_index_is_present+0xb4>
     c60:	ldrh	r3, [fp, #-8]
     c64:	add	r3, r3, #2
     c68:	lsl	r3, r3, #1
     c6c:	ldr	r2, [fp, #-12]
     c70:	add	r3, r2, r3
     c74:	mov	r0, r3
     c78:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     c7c:	mov	r3, r0
     c80:	strh	r3, [fp, #-6]
     c84:	ldrh	r3, [fp, #-6]
     c88:	cmp	r3, #0
     c8c:	movne	r3, #1
     c90:	moveq	r3, #0
     c94:	uxtb	r3, r3
     c98:	mov	r0, r3
     c9c:	sub	sp, fp, #4
     ca0:	ldr	fp, [sp]
     ca4:	add	sp, sp, #4
     ca8:	pop	{pc}		; (ldr pc, [sp], #4)

00000cac <reflection_EnumVal_vec_at>:
     cac:	str	fp, [sp, #-8]!
     cb0:	str	lr, [sp, #4]
     cb4:	add	fp, sp, #4
     cb8:	sub	sp, sp, #16
     cbc:	str	r0, [fp, #-16]
     cc0:	str	r1, [fp, #-20]	; 0xffffffec
     cc4:	ldr	r3, [fp, #-20]	; 0xffffffec
     cc8:	lsl	r3, r3, #2
     ccc:	ldr	r2, [fp, #-16]
     cd0:	add	r3, r2, r3
     cd4:	str	r3, [fp, #-8]
     cd8:	ldr	r0, [fp, #-16]
     cdc:	bl	584 <flatbuffers_vec_len>
     ce0:	mov	r2, r0
     ce4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ce8:	cmp	r3, r2
     cec:	bcc	d10 <reflection_EnumVal_vec_at+0x64>
     cf0:	movw	r3, #0
     cf4:	movt	r3, #0
     cf8:	mov	r2, #156	; 0x9c
     cfc:	movw	r1, #0
     d00:	movt	r1, #0
     d04:	movw	r0, #0
     d08:	movt	r0, #0
     d0c:	bl	0 <__assert_fail>
     d10:	ldr	r0, [fp, #-8]
     d14:	bl	400 <__flatbuffers_uoffset_read_from_pe>
     d18:	mov	r2, r0
     d1c:	ldr	r3, [fp, #-8]
     d20:	add	r3, r3, r2
     d24:	mov	r0, r3
     d28:	sub	sp, fp, #4
     d2c:	ldr	fp, [sp]
     d30:	add	sp, sp, #4
     d34:	pop	{pc}		; (ldr pc, [sp], #4)

00000d38 <reflection_EnumVal_name>:
     d38:	str	fp, [sp, #-8]!
     d3c:	str	lr, [sp, #4]
     d40:	add	fp, sp, #4
     d44:	sub	sp, sp, #24
     d48:	str	r0, [fp, #-24]	; 0xffffffe8
     d4c:	mov	r3, #0
     d50:	strh	r3, [fp, #-6]
     d54:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d58:	cmp	r3, #0
     d5c:	bne	d80 <reflection_EnumVal_name+0x48>
     d60:	movw	r3, #0
     d64:	movt	r3, #0
     d68:	mov	r2, #159	; 0x9f
     d6c:	movw	r1, #0
     d70:	movt	r1, #0
     d74:	movw	r0, #0
     d78:	movt	r0, #0
     d7c:	bl	0 <__assert_fail>
     d80:	mov	r3, #0
     d84:	strh	r3, [fp, #-8]
     d88:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d8c:	bl	460 <__flatbuffers_soffset_read_from_pe>
     d90:	mov	r3, r0
     d94:	rsb	r3, r3, #0
     d98:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d9c:	add	r3, r2, r3
     da0:	str	r3, [fp, #-12]
     da4:	ldr	r0, [fp, #-12]
     da8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     dac:	mov	r3, r0
     db0:	mov	r2, r3
     db4:	ldrh	r3, [fp, #-8]
     db8:	add	r3, r3, #3
     dbc:	lsl	r3, r3, #1
     dc0:	cmp	r2, r3
     dc4:	bcc	dec <reflection_EnumVal_name+0xb4>
     dc8:	ldrh	r3, [fp, #-8]
     dcc:	add	r3, r3, #2
     dd0:	lsl	r3, r3, #1
     dd4:	ldr	r2, [fp, #-12]
     dd8:	add	r3, r2, r3
     ddc:	mov	r0, r3
     de0:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     de4:	mov	r3, r0
     de8:	strh	r3, [fp, #-6]
     dec:	ldrh	r3, [fp, #-6]
     df0:	cmp	r3, #0
     df4:	beq	e24 <reflection_EnumVal_name+0xec>
     df8:	ldrh	r3, [fp, #-6]
     dfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e00:	add	r3, r2, r3
     e04:	str	r3, [fp, #-16]
     e08:	ldr	r0, [fp, #-16]
     e0c:	bl	400 <__flatbuffers_uoffset_read_from_pe>
     e10:	mov	r3, r0
     e14:	add	r3, r3, #4
     e18:	ldr	r2, [fp, #-16]
     e1c:	add	r3, r2, r3
     e20:	b	e44 <reflection_EnumVal_name+0x10c>
     e24:	movw	r3, #0
     e28:	movt	r3, #0
     e2c:	mov	r2, #159	; 0x9f
     e30:	movw	r1, #0
     e34:	movt	r1, #0
     e38:	movw	r0, #0
     e3c:	movt	r0, #0
     e40:	bl	0 <__assert_fail>
     e44:	mov	r0, r3
     e48:	sub	sp, fp, #4
     e4c:	ldr	fp, [sp]
     e50:	add	sp, sp, #4
     e54:	pop	{pc}		; (ldr pc, [sp], #4)

00000e58 <reflection_EnumVal_value>:
     e58:	str	fp, [sp, #-8]!
     e5c:	str	lr, [sp, #4]
     e60:	add	fp, sp, #4
     e64:	sub	sp, sp, #16
     e68:	str	r0, [fp, #-16]
     e6c:	mov	r3, #0
     e70:	strh	r3, [fp, #-6]
     e74:	ldr	r3, [fp, #-16]
     e78:	cmp	r3, #0
     e7c:	bne	ea0 <reflection_EnumVal_value+0x48>
     e80:	movw	r3, #0
     e84:	movt	r3, #0
     e88:	mov	r2, #160	; 0xa0
     e8c:	movw	r1, #0
     e90:	movt	r1, #0
     e94:	movw	r0, #0
     e98:	movt	r0, #0
     e9c:	bl	0 <__assert_fail>
     ea0:	mov	r3, #1
     ea4:	strh	r3, [fp, #-8]
     ea8:	ldr	r0, [fp, #-16]
     eac:	bl	460 <__flatbuffers_soffset_read_from_pe>
     eb0:	mov	r3, r0
     eb4:	rsb	r3, r3, #0
     eb8:	ldr	r2, [fp, #-16]
     ebc:	add	r3, r2, r3
     ec0:	str	r3, [fp, #-12]
     ec4:	ldr	r0, [fp, #-12]
     ec8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     ecc:	mov	r3, r0
     ed0:	mov	r2, r3
     ed4:	ldrh	r3, [fp, #-8]
     ed8:	add	r3, r3, #3
     edc:	lsl	r3, r3, #1
     ee0:	cmp	r2, r3
     ee4:	bcc	f0c <reflection_EnumVal_value+0xb4>
     ee8:	ldrh	r3, [fp, #-8]
     eec:	add	r3, r3, #2
     ef0:	lsl	r3, r3, #1
     ef4:	ldr	r2, [fp, #-12]
     ef8:	add	r3, r2, r3
     efc:	mov	r0, r3
     f00:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     f04:	mov	r3, r0
     f08:	strh	r3, [fp, #-6]
     f0c:	ldrh	r3, [fp, #-6]
     f10:	cmp	r3, #0
     f14:	beq	f38 <reflection_EnumVal_value+0xe0>
     f18:	ldrh	r3, [fp, #-6]
     f1c:	ldr	r2, [fp, #-16]
     f20:	add	r3, r2, r3
     f24:	mov	r0, r3
     f28:	bl	2bc <flatbuffers_int64_read_from_pe>
     f2c:	mov	r2, r0
     f30:	mov	r3, r1
     f34:	b	f40 <reflection_EnumVal_value+0xe8>
     f38:	mov	r2, #0
     f3c:	mov	r3, #0
     f40:	mov	r0, r2
     f44:	mov	r1, r3
     f48:	sub	sp, fp, #4
     f4c:	ldr	fp, [sp]
     f50:	add	sp, sp, #4
     f54:	pop	{pc}		; (ldr pc, [sp], #4)

00000f58 <reflection_EnumVal_value_is_present>:
     f58:	str	fp, [sp, #-8]!
     f5c:	str	lr, [sp, #4]
     f60:	add	fp, sp, #4
     f64:	sub	sp, sp, #16
     f68:	str	r0, [fp, #-16]
     f6c:	mov	r3, #0
     f70:	strh	r3, [fp, #-6]
     f74:	ldr	r3, [fp, #-16]
     f78:	cmp	r3, #0
     f7c:	bne	fa0 <reflection_EnumVal_value_is_present+0x48>
     f80:	movw	r3, #0
     f84:	movt	r3, #0
     f88:	mov	r2, #160	; 0xa0
     f8c:	movw	r1, #0
     f90:	movt	r1, #0
     f94:	movw	r0, #0
     f98:	movt	r0, #0
     f9c:	bl	0 <__assert_fail>
     fa0:	mov	r3, #1
     fa4:	strh	r3, [fp, #-8]
     fa8:	ldr	r0, [fp, #-16]
     fac:	bl	460 <__flatbuffers_soffset_read_from_pe>
     fb0:	mov	r3, r0
     fb4:	rsb	r3, r3, #0
     fb8:	ldr	r2, [fp, #-16]
     fbc:	add	r3, r2, r3
     fc0:	str	r3, [fp, #-12]
     fc4:	ldr	r0, [fp, #-12]
     fc8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
     fcc:	mov	r3, r0
     fd0:	mov	r2, r3
     fd4:	ldrh	r3, [fp, #-8]
     fd8:	add	r3, r3, #3
     fdc:	lsl	r3, r3, #1
     fe0:	cmp	r2, r3
     fe4:	bcc	100c <reflection_EnumVal_value_is_present+0xb4>
     fe8:	ldrh	r3, [fp, #-8]
     fec:	add	r3, r3, #2
     ff0:	lsl	r3, r3, #1
     ff4:	ldr	r2, [fp, #-12]
     ff8:	add	r3, r2, r3
     ffc:	mov	r0, r3
    1000:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1004:	mov	r3, r0
    1008:	strh	r3, [fp, #-6]
    100c:	ldrh	r3, [fp, #-6]
    1010:	cmp	r3, #0
    1014:	movne	r3, #1
    1018:	moveq	r3, #0
    101c:	uxtb	r3, r3
    1020:	mov	r0, r3
    1024:	sub	sp, fp, #4
    1028:	ldr	fp, [sp]
    102c:	add	sp, sp, #4
    1030:	pop	{pc}		; (ldr pc, [sp], #4)

00001034 <reflection_EnumVal_object>:
    1034:	str	fp, [sp, #-8]!
    1038:	str	lr, [sp, #4]
    103c:	add	fp, sp, #4
    1040:	sub	sp, sp, #24
    1044:	str	r0, [fp, #-24]	; 0xffffffe8
    1048:	mov	r3, #0
    104c:	strh	r3, [fp, #-6]
    1050:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1054:	cmp	r3, #0
    1058:	bne	107c <reflection_EnumVal_object+0x48>
    105c:	movw	r3, #0
    1060:	movt	r3, #0
    1064:	mov	r2, #167	; 0xa7
    1068:	movw	r1, #0
    106c:	movt	r1, #0
    1070:	movw	r0, #0
    1074:	movt	r0, #0
    1078:	bl	0 <__assert_fail>
    107c:	mov	r3, #2
    1080:	strh	r3, [fp, #-8]
    1084:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1088:	bl	460 <__flatbuffers_soffset_read_from_pe>
    108c:	mov	r3, r0
    1090:	rsb	r3, r3, #0
    1094:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1098:	add	r3, r2, r3
    109c:	str	r3, [fp, #-12]
    10a0:	ldr	r0, [fp, #-12]
    10a4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    10a8:	mov	r3, r0
    10ac:	mov	r2, r3
    10b0:	ldrh	r3, [fp, #-8]
    10b4:	add	r3, r3, #3
    10b8:	lsl	r3, r3, #1
    10bc:	cmp	r2, r3
    10c0:	bcc	10e8 <reflection_EnumVal_object+0xb4>
    10c4:	ldrh	r3, [fp, #-8]
    10c8:	add	r3, r3, #2
    10cc:	lsl	r3, r3, #1
    10d0:	ldr	r2, [fp, #-12]
    10d4:	add	r3, r2, r3
    10d8:	mov	r0, r3
    10dc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    10e0:	mov	r3, r0
    10e4:	strh	r3, [fp, #-6]
    10e8:	ldrh	r3, [fp, #-6]
    10ec:	cmp	r3, #0
    10f0:	beq	111c <reflection_EnumVal_object+0xe8>
    10f4:	ldrh	r3, [fp, #-6]
    10f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    10fc:	add	r3, r2, r3
    1100:	str	r3, [fp, #-16]
    1104:	ldr	r0, [fp, #-16]
    1108:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    110c:	mov	r2, r0
    1110:	ldr	r3, [fp, #-16]
    1114:	add	r3, r3, r2
    1118:	b	1120 <reflection_EnumVal_object+0xec>
    111c:	mov	r3, #0
    1120:	mov	r0, r3
    1124:	sub	sp, fp, #4
    1128:	ldr	fp, [sp]
    112c:	add	sp, sp, #4
    1130:	pop	{pc}		; (ldr pc, [sp], #4)

00001134 <reflection_EnumVal_object_is_present>:
    1134:	str	fp, [sp, #-8]!
    1138:	str	lr, [sp, #4]
    113c:	add	fp, sp, #4
    1140:	sub	sp, sp, #16
    1144:	str	r0, [fp, #-16]
    1148:	mov	r3, #0
    114c:	strh	r3, [fp, #-6]
    1150:	ldr	r3, [fp, #-16]
    1154:	cmp	r3, #0
    1158:	bne	117c <reflection_EnumVal_object_is_present+0x48>
    115c:	movw	r3, #0
    1160:	movt	r3, #0
    1164:	mov	r2, #167	; 0xa7
    1168:	movw	r1, #0
    116c:	movt	r1, #0
    1170:	movw	r0, #0
    1174:	movt	r0, #0
    1178:	bl	0 <__assert_fail>
    117c:	mov	r3, #2
    1180:	strh	r3, [fp, #-8]
    1184:	ldr	r0, [fp, #-16]
    1188:	bl	460 <__flatbuffers_soffset_read_from_pe>
    118c:	mov	r3, r0
    1190:	rsb	r3, r3, #0
    1194:	ldr	r2, [fp, #-16]
    1198:	add	r3, r2, r3
    119c:	str	r3, [fp, #-12]
    11a0:	ldr	r0, [fp, #-12]
    11a4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    11a8:	mov	r3, r0
    11ac:	mov	r2, r3
    11b0:	ldrh	r3, [fp, #-8]
    11b4:	add	r3, r3, #3
    11b8:	lsl	r3, r3, #1
    11bc:	cmp	r2, r3
    11c0:	bcc	11e8 <reflection_EnumVal_object_is_present+0xb4>
    11c4:	ldrh	r3, [fp, #-8]
    11c8:	add	r3, r3, #2
    11cc:	lsl	r3, r3, #1
    11d0:	ldr	r2, [fp, #-12]
    11d4:	add	r3, r2, r3
    11d8:	mov	r0, r3
    11dc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    11e0:	mov	r3, r0
    11e4:	strh	r3, [fp, #-6]
    11e8:	ldrh	r3, [fp, #-6]
    11ec:	cmp	r3, #0
    11f0:	movne	r3, #1
    11f4:	moveq	r3, #0
    11f8:	uxtb	r3, r3
    11fc:	mov	r0, r3
    1200:	sub	sp, fp, #4
    1204:	ldr	fp, [sp]
    1208:	add	sp, sp, #4
    120c:	pop	{pc}		; (ldr pc, [sp], #4)

00001210 <reflection_Enum_vec_len>:
    1210:	str	fp, [sp, #-8]!
    1214:	str	lr, [sp, #4]
    1218:	add	fp, sp, #4
    121c:	sub	sp, sp, #8
    1220:	str	r0, [fp, #-8]
    1224:	ldr	r3, [fp, #-8]
    1228:	cmp	r3, #0
    122c:	beq	1248 <reflection_Enum_vec_len+0x38>
    1230:	ldr	r3, [fp, #-8]
    1234:	sub	r3, r3, #4
    1238:	mov	r0, r3
    123c:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    1240:	mov	r3, r0
    1244:	b	124c <reflection_Enum_vec_len+0x3c>
    1248:	mov	r3, #0
    124c:	mov	r0, r3
    1250:	sub	sp, fp, #4
    1254:	ldr	fp, [sp]
    1258:	add	sp, sp, #4
    125c:	pop	{pc}		; (ldr pc, [sp], #4)

00001260 <reflection_Enum_vec_at>:
    1260:	str	fp, [sp, #-8]!
    1264:	str	lr, [sp, #4]
    1268:	add	fp, sp, #4
    126c:	sub	sp, sp, #16
    1270:	str	r0, [fp, #-16]
    1274:	str	r1, [fp, #-20]	; 0xffffffec
    1278:	ldr	r3, [fp, #-20]	; 0xffffffec
    127c:	lsl	r3, r3, #2
    1280:	ldr	r2, [fp, #-16]
    1284:	add	r3, r2, r3
    1288:	str	r3, [fp, #-8]
    128c:	ldr	r0, [fp, #-16]
    1290:	bl	584 <flatbuffers_vec_len>
    1294:	mov	r2, r0
    1298:	ldr	r3, [fp, #-20]	; 0xffffffec
    129c:	cmp	r3, r2
    12a0:	bcc	12c4 <reflection_Enum_vec_at+0x64>
    12a4:	movw	r3, #0
    12a8:	movt	r3, #0
    12ac:	mov	r2, #174	; 0xae
    12b0:	movw	r1, #0
    12b4:	movt	r1, #0
    12b8:	movw	r0, #0
    12bc:	movt	r0, #0
    12c0:	bl	0 <__assert_fail>
    12c4:	ldr	r0, [fp, #-8]
    12c8:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    12cc:	mov	r2, r0
    12d0:	ldr	r3, [fp, #-8]
    12d4:	add	r3, r3, r2
    12d8:	mov	r0, r3
    12dc:	sub	sp, fp, #4
    12e0:	ldr	fp, [sp]
    12e4:	add	sp, sp, #4
    12e8:	pop	{pc}		; (ldr pc, [sp], #4)

000012ec <reflection_Enum_name>:
    12ec:	str	fp, [sp, #-8]!
    12f0:	str	lr, [sp, #4]
    12f4:	add	fp, sp, #4
    12f8:	sub	sp, sp, #24
    12fc:	str	r0, [fp, #-24]	; 0xffffffe8
    1300:	mov	r3, #0
    1304:	strh	r3, [fp, #-6]
    1308:	ldr	r3, [fp, #-24]	; 0xffffffe8
    130c:	cmp	r3, #0
    1310:	bne	1334 <reflection_Enum_name+0x48>
    1314:	movw	r3, #0
    1318:	movt	r3, #0
    131c:	mov	r2, #177	; 0xb1
    1320:	movw	r1, #0
    1324:	movt	r1, #0
    1328:	movw	r0, #0
    132c:	movt	r0, #0
    1330:	bl	0 <__assert_fail>
    1334:	mov	r3, #0
    1338:	strh	r3, [fp, #-8]
    133c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1340:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1344:	mov	r3, r0
    1348:	rsb	r3, r3, #0
    134c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1350:	add	r3, r2, r3
    1354:	str	r3, [fp, #-12]
    1358:	ldr	r0, [fp, #-12]
    135c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1360:	mov	r3, r0
    1364:	mov	r2, r3
    1368:	ldrh	r3, [fp, #-8]
    136c:	add	r3, r3, #3
    1370:	lsl	r3, r3, #1
    1374:	cmp	r2, r3
    1378:	bcc	13a0 <reflection_Enum_name+0xb4>
    137c:	ldrh	r3, [fp, #-8]
    1380:	add	r3, r3, #2
    1384:	lsl	r3, r3, #1
    1388:	ldr	r2, [fp, #-12]
    138c:	add	r3, r2, r3
    1390:	mov	r0, r3
    1394:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1398:	mov	r3, r0
    139c:	strh	r3, [fp, #-6]
    13a0:	ldrh	r3, [fp, #-6]
    13a4:	cmp	r3, #0
    13a8:	beq	13d8 <reflection_Enum_name+0xec>
    13ac:	ldrh	r3, [fp, #-6]
    13b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    13b4:	add	r3, r2, r3
    13b8:	str	r3, [fp, #-16]
    13bc:	ldr	r0, [fp, #-16]
    13c0:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    13c4:	mov	r3, r0
    13c8:	add	r3, r3, #4
    13cc:	ldr	r2, [fp, #-16]
    13d0:	add	r3, r2, r3
    13d4:	b	13f8 <reflection_Enum_name+0x10c>
    13d8:	movw	r3, #0
    13dc:	movt	r3, #0
    13e0:	mov	r2, #177	; 0xb1
    13e4:	movw	r1, #0
    13e8:	movt	r1, #0
    13ec:	movw	r0, #0
    13f0:	movt	r0, #0
    13f4:	bl	0 <__assert_fail>
    13f8:	mov	r0, r3
    13fc:	sub	sp, fp, #4
    1400:	ldr	fp, [sp]
    1404:	add	sp, sp, #4
    1408:	pop	{pc}		; (ldr pc, [sp], #4)

0000140c <reflection_Enum_values>:
    140c:	str	fp, [sp, #-8]!
    1410:	str	lr, [sp, #4]
    1414:	add	fp, sp, #4
    1418:	sub	sp, sp, #24
    141c:	str	r0, [fp, #-24]	; 0xffffffe8
    1420:	mov	r3, #0
    1424:	strh	r3, [fp, #-6]
    1428:	ldr	r3, [fp, #-24]	; 0xffffffe8
    142c:	cmp	r3, #0
    1430:	bne	1454 <reflection_Enum_values+0x48>
    1434:	movw	r3, #0
    1438:	movt	r3, #0
    143c:	mov	r2, #183	; 0xb7
    1440:	movw	r1, #0
    1444:	movt	r1, #0
    1448:	movw	r0, #0
    144c:	movt	r0, #0
    1450:	bl	0 <__assert_fail>
    1454:	mov	r3, #1
    1458:	strh	r3, [fp, #-8]
    145c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1460:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1464:	mov	r3, r0
    1468:	rsb	r3, r3, #0
    146c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1470:	add	r3, r2, r3
    1474:	str	r3, [fp, #-12]
    1478:	ldr	r0, [fp, #-12]
    147c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1480:	mov	r3, r0
    1484:	mov	r2, r3
    1488:	ldrh	r3, [fp, #-8]
    148c:	add	r3, r3, #3
    1490:	lsl	r3, r3, #1
    1494:	cmp	r2, r3
    1498:	bcc	14c0 <reflection_Enum_values+0xb4>
    149c:	ldrh	r3, [fp, #-8]
    14a0:	add	r3, r3, #2
    14a4:	lsl	r3, r3, #1
    14a8:	ldr	r2, [fp, #-12]
    14ac:	add	r3, r2, r3
    14b0:	mov	r0, r3
    14b4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    14b8:	mov	r3, r0
    14bc:	strh	r3, [fp, #-6]
    14c0:	ldrh	r3, [fp, #-6]
    14c4:	cmp	r3, #0
    14c8:	beq	14f8 <reflection_Enum_values+0xec>
    14cc:	ldrh	r3, [fp, #-6]
    14d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14d4:	add	r3, r2, r3
    14d8:	str	r3, [fp, #-16]
    14dc:	ldr	r0, [fp, #-16]
    14e0:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    14e4:	mov	r3, r0
    14e8:	add	r3, r3, #4
    14ec:	ldr	r2, [fp, #-16]
    14f0:	add	r3, r2, r3
    14f4:	b	1518 <reflection_Enum_values+0x10c>
    14f8:	movw	r3, #0
    14fc:	movt	r3, #0
    1500:	mov	r2, #183	; 0xb7
    1504:	movw	r1, #0
    1508:	movt	r1, #0
    150c:	movw	r0, #0
    1510:	movt	r0, #0
    1514:	bl	0 <__assert_fail>
    1518:	mov	r0, r3
    151c:	sub	sp, fp, #4
    1520:	ldr	fp, [sp]
    1524:	add	sp, sp, #4
    1528:	pop	{pc}		; (ldr pc, [sp], #4)

0000152c <reflection_Enum_is_union>:
    152c:	str	fp, [sp, #-8]!
    1530:	str	lr, [sp, #4]
    1534:	add	fp, sp, #4
    1538:	sub	sp, sp, #16
    153c:	str	r0, [fp, #-16]
    1540:	mov	r3, #0
    1544:	strh	r3, [fp, #-6]
    1548:	ldr	r3, [fp, #-16]
    154c:	cmp	r3, #0
    1550:	bne	1574 <reflection_Enum_is_union+0x48>
    1554:	movw	r3, #0
    1558:	movt	r3, #0
    155c:	mov	r2, #184	; 0xb8
    1560:	movw	r1, #0
    1564:	movt	r1, #0
    1568:	movw	r0, #0
    156c:	movt	r0, #0
    1570:	bl	0 <__assert_fail>
    1574:	mov	r3, #2
    1578:	strh	r3, [fp, #-8]
    157c:	ldr	r0, [fp, #-16]
    1580:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1584:	mov	r3, r0
    1588:	rsb	r3, r3, #0
    158c:	ldr	r2, [fp, #-16]
    1590:	add	r3, r2, r3
    1594:	str	r3, [fp, #-12]
    1598:	ldr	r0, [fp, #-12]
    159c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    15a0:	mov	r3, r0
    15a4:	mov	r2, r3
    15a8:	ldrh	r3, [fp, #-8]
    15ac:	add	r3, r3, #3
    15b0:	lsl	r3, r3, #1
    15b4:	cmp	r2, r3
    15b8:	bcc	15e0 <reflection_Enum_is_union+0xb4>
    15bc:	ldrh	r3, [fp, #-8]
    15c0:	add	r3, r3, #2
    15c4:	lsl	r3, r3, #1
    15c8:	ldr	r2, [fp, #-12]
    15cc:	add	r3, r2, r3
    15d0:	mov	r0, r3
    15d4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    15d8:	mov	r3, r0
    15dc:	strh	r3, [fp, #-6]
    15e0:	ldrh	r3, [fp, #-6]
    15e4:	cmp	r3, #0
    15e8:	beq	1608 <reflection_Enum_is_union+0xdc>
    15ec:	ldrh	r3, [fp, #-6]
    15f0:	ldr	r2, [fp, #-16]
    15f4:	add	r3, r2, r3
    15f8:	mov	r0, r3
    15fc:	bl	3a0 <flatbuffers_bool_read_from_pe>
    1600:	mov	r3, r0
    1604:	b	160c <reflection_Enum_is_union+0xe0>
    1608:	mov	r3, #0
    160c:	mov	r0, r3
    1610:	sub	sp, fp, #4
    1614:	ldr	fp, [sp]
    1618:	add	sp, sp, #4
    161c:	pop	{pc}		; (ldr pc, [sp], #4)

00001620 <reflection_Enum_is_union_is_present>:
    1620:	str	fp, [sp, #-8]!
    1624:	str	lr, [sp, #4]
    1628:	add	fp, sp, #4
    162c:	sub	sp, sp, #16
    1630:	str	r0, [fp, #-16]
    1634:	mov	r3, #0
    1638:	strh	r3, [fp, #-6]
    163c:	ldr	r3, [fp, #-16]
    1640:	cmp	r3, #0
    1644:	bne	1668 <reflection_Enum_is_union_is_present+0x48>
    1648:	movw	r3, #0
    164c:	movt	r3, #0
    1650:	mov	r2, #184	; 0xb8
    1654:	movw	r1, #0
    1658:	movt	r1, #0
    165c:	movw	r0, #0
    1660:	movt	r0, #0
    1664:	bl	0 <__assert_fail>
    1668:	mov	r3, #2
    166c:	strh	r3, [fp, #-8]
    1670:	ldr	r0, [fp, #-16]
    1674:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1678:	mov	r3, r0
    167c:	rsb	r3, r3, #0
    1680:	ldr	r2, [fp, #-16]
    1684:	add	r3, r2, r3
    1688:	str	r3, [fp, #-12]
    168c:	ldr	r0, [fp, #-12]
    1690:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1694:	mov	r3, r0
    1698:	mov	r2, r3
    169c:	ldrh	r3, [fp, #-8]
    16a0:	add	r3, r3, #3
    16a4:	lsl	r3, r3, #1
    16a8:	cmp	r2, r3
    16ac:	bcc	16d4 <reflection_Enum_is_union_is_present+0xb4>
    16b0:	ldrh	r3, [fp, #-8]
    16b4:	add	r3, r3, #2
    16b8:	lsl	r3, r3, #1
    16bc:	ldr	r2, [fp, #-12]
    16c0:	add	r3, r2, r3
    16c4:	mov	r0, r3
    16c8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    16cc:	mov	r3, r0
    16d0:	strh	r3, [fp, #-6]
    16d4:	ldrh	r3, [fp, #-6]
    16d8:	cmp	r3, #0
    16dc:	movne	r3, #1
    16e0:	moveq	r3, #0
    16e4:	uxtb	r3, r3
    16e8:	mov	r0, r3
    16ec:	sub	sp, fp, #4
    16f0:	ldr	fp, [sp]
    16f4:	add	sp, sp, #4
    16f8:	pop	{pc}		; (ldr pc, [sp], #4)

000016fc <reflection_Enum_underlying_type>:
    16fc:	str	fp, [sp, #-8]!
    1700:	str	lr, [sp, #4]
    1704:	add	fp, sp, #4
    1708:	sub	sp, sp, #24
    170c:	str	r0, [fp, #-24]	; 0xffffffe8
    1710:	mov	r3, #0
    1714:	strh	r3, [fp, #-6]
    1718:	ldr	r3, [fp, #-24]	; 0xffffffe8
    171c:	cmp	r3, #0
    1720:	bne	1744 <reflection_Enum_underlying_type+0x48>
    1724:	movw	r3, #0
    1728:	movt	r3, #0
    172c:	mov	r2, #185	; 0xb9
    1730:	movw	r1, #0
    1734:	movt	r1, #0
    1738:	movw	r0, #0
    173c:	movt	r0, #0
    1740:	bl	0 <__assert_fail>
    1744:	mov	r3, #3
    1748:	strh	r3, [fp, #-8]
    174c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1750:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1754:	mov	r3, r0
    1758:	rsb	r3, r3, #0
    175c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1760:	add	r3, r2, r3
    1764:	str	r3, [fp, #-12]
    1768:	ldr	r0, [fp, #-12]
    176c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1770:	mov	r3, r0
    1774:	mov	r2, r3
    1778:	ldrh	r3, [fp, #-8]
    177c:	add	r3, r3, #3
    1780:	lsl	r3, r3, #1
    1784:	cmp	r2, r3
    1788:	bcc	17b0 <reflection_Enum_underlying_type+0xb4>
    178c:	ldrh	r3, [fp, #-8]
    1790:	add	r3, r3, #2
    1794:	lsl	r3, r3, #1
    1798:	ldr	r2, [fp, #-12]
    179c:	add	r3, r2, r3
    17a0:	mov	r0, r3
    17a4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    17a8:	mov	r3, r0
    17ac:	strh	r3, [fp, #-6]
    17b0:	ldrh	r3, [fp, #-6]
    17b4:	cmp	r3, #0
    17b8:	beq	17e4 <reflection_Enum_underlying_type+0xe8>
    17bc:	ldrh	r3, [fp, #-6]
    17c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    17c4:	add	r3, r2, r3
    17c8:	str	r3, [fp, #-16]
    17cc:	ldr	r0, [fp, #-16]
    17d0:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    17d4:	mov	r2, r0
    17d8:	ldr	r3, [fp, #-16]
    17dc:	add	r3, r3, r2
    17e0:	b	1804 <reflection_Enum_underlying_type+0x108>
    17e4:	movw	r3, #0
    17e8:	movt	r3, #0
    17ec:	mov	r2, #185	; 0xb9
    17f0:	movw	r1, #0
    17f4:	movt	r1, #0
    17f8:	movw	r0, #0
    17fc:	movt	r0, #0
    1800:	bl	0 <__assert_fail>
    1804:	mov	r0, r3
    1808:	sub	sp, fp, #4
    180c:	ldr	fp, [sp]
    1810:	add	sp, sp, #4
    1814:	pop	{pc}		; (ldr pc, [sp], #4)

00001818 <reflection_Field_vec_len>:
    1818:	str	fp, [sp, #-8]!
    181c:	str	lr, [sp, #4]
    1820:	add	fp, sp, #4
    1824:	sub	sp, sp, #8
    1828:	str	r0, [fp, #-8]
    182c:	ldr	r3, [fp, #-8]
    1830:	cmp	r3, #0
    1834:	beq	1850 <reflection_Field_vec_len+0x38>
    1838:	ldr	r3, [fp, #-8]
    183c:	sub	r3, r3, #4
    1840:	mov	r0, r3
    1844:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    1848:	mov	r3, r0
    184c:	b	1854 <reflection_Field_vec_len+0x3c>
    1850:	mov	r3, #0
    1854:	mov	r0, r3
    1858:	sub	sp, fp, #4
    185c:	ldr	fp, [sp]
    1860:	add	sp, sp, #4
    1864:	pop	{pc}		; (ldr pc, [sp], #4)

00001868 <reflection_Field_vec_at>:
    1868:	str	fp, [sp, #-8]!
    186c:	str	lr, [sp, #4]
    1870:	add	fp, sp, #4
    1874:	sub	sp, sp, #16
    1878:	str	r0, [fp, #-16]
    187c:	str	r1, [fp, #-20]	; 0xffffffec
    1880:	ldr	r3, [fp, #-20]	; 0xffffffec
    1884:	lsl	r3, r3, #2
    1888:	ldr	r2, [fp, #-16]
    188c:	add	r3, r2, r3
    1890:	str	r3, [fp, #-8]
    1894:	ldr	r0, [fp, #-16]
    1898:	bl	584 <flatbuffers_vec_len>
    189c:	mov	r2, r0
    18a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    18a4:	cmp	r3, r2
    18a8:	bcc	18cc <reflection_Field_vec_at+0x64>
    18ac:	movw	r3, #0
    18b0:	movt	r3, #0
    18b4:	mov	r2, #192	; 0xc0
    18b8:	movw	r1, #0
    18bc:	movt	r1, #0
    18c0:	movw	r0, #0
    18c4:	movt	r0, #0
    18c8:	bl	0 <__assert_fail>
    18cc:	ldr	r0, [fp, #-8]
    18d0:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    18d4:	mov	r2, r0
    18d8:	ldr	r3, [fp, #-8]
    18dc:	add	r3, r3, r2
    18e0:	mov	r0, r3
    18e4:	sub	sp, fp, #4
    18e8:	ldr	fp, [sp]
    18ec:	add	sp, sp, #4
    18f0:	pop	{pc}		; (ldr pc, [sp], #4)

000018f4 <reflection_Field_name>:
    18f4:	str	fp, [sp, #-8]!
    18f8:	str	lr, [sp, #4]
    18fc:	add	fp, sp, #4
    1900:	sub	sp, sp, #24
    1904:	str	r0, [fp, #-24]	; 0xffffffe8
    1908:	mov	r3, #0
    190c:	strh	r3, [fp, #-6]
    1910:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1914:	cmp	r3, #0
    1918:	bne	193c <reflection_Field_name+0x48>
    191c:	movw	r3, #0
    1920:	movt	r3, #0
    1924:	mov	r2, #195	; 0xc3
    1928:	movw	r1, #0
    192c:	movt	r1, #0
    1930:	movw	r0, #0
    1934:	movt	r0, #0
    1938:	bl	0 <__assert_fail>
    193c:	mov	r3, #0
    1940:	strh	r3, [fp, #-8]
    1944:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1948:	bl	460 <__flatbuffers_soffset_read_from_pe>
    194c:	mov	r3, r0
    1950:	rsb	r3, r3, #0
    1954:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1958:	add	r3, r2, r3
    195c:	str	r3, [fp, #-12]
    1960:	ldr	r0, [fp, #-12]
    1964:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1968:	mov	r3, r0
    196c:	mov	r2, r3
    1970:	ldrh	r3, [fp, #-8]
    1974:	add	r3, r3, #3
    1978:	lsl	r3, r3, #1
    197c:	cmp	r2, r3
    1980:	bcc	19a8 <reflection_Field_name+0xb4>
    1984:	ldrh	r3, [fp, #-8]
    1988:	add	r3, r3, #2
    198c:	lsl	r3, r3, #1
    1990:	ldr	r2, [fp, #-12]
    1994:	add	r3, r2, r3
    1998:	mov	r0, r3
    199c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    19a0:	mov	r3, r0
    19a4:	strh	r3, [fp, #-6]
    19a8:	ldrh	r3, [fp, #-6]
    19ac:	cmp	r3, #0
    19b0:	beq	19e0 <reflection_Field_name+0xec>
    19b4:	ldrh	r3, [fp, #-6]
    19b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    19bc:	add	r3, r2, r3
    19c0:	str	r3, [fp, #-16]
    19c4:	ldr	r0, [fp, #-16]
    19c8:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    19cc:	mov	r3, r0
    19d0:	add	r3, r3, #4
    19d4:	ldr	r2, [fp, #-16]
    19d8:	add	r3, r2, r3
    19dc:	b	1a00 <reflection_Field_name+0x10c>
    19e0:	movw	r3, #0
    19e4:	movt	r3, #0
    19e8:	mov	r2, #195	; 0xc3
    19ec:	movw	r1, #0
    19f0:	movt	r1, #0
    19f4:	movw	r0, #0
    19f8:	movt	r0, #0
    19fc:	bl	0 <__assert_fail>
    1a00:	mov	r0, r3
    1a04:	sub	sp, fp, #4
    1a08:	ldr	fp, [sp]
    1a0c:	add	sp, sp, #4
    1a10:	pop	{pc}		; (ldr pc, [sp], #4)

00001a14 <reflection_Field_type>:
    1a14:	str	fp, [sp, #-8]!
    1a18:	str	lr, [sp, #4]
    1a1c:	add	fp, sp, #4
    1a20:	sub	sp, sp, #24
    1a24:	str	r0, [fp, #-24]	; 0xffffffe8
    1a28:	mov	r3, #0
    1a2c:	strh	r3, [fp, #-6]
    1a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a34:	cmp	r3, #0
    1a38:	bne	1a5c <reflection_Field_type+0x48>
    1a3c:	movw	r3, #0
    1a40:	movt	r3, #0
    1a44:	mov	r2, #201	; 0xc9
    1a48:	movw	r1, #0
    1a4c:	movt	r1, #0
    1a50:	movw	r0, #0
    1a54:	movt	r0, #0
    1a58:	bl	0 <__assert_fail>
    1a5c:	mov	r3, #1
    1a60:	strh	r3, [fp, #-8]
    1a64:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1a68:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1a6c:	mov	r3, r0
    1a70:	rsb	r3, r3, #0
    1a74:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a78:	add	r3, r2, r3
    1a7c:	str	r3, [fp, #-12]
    1a80:	ldr	r0, [fp, #-12]
    1a84:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1a88:	mov	r3, r0
    1a8c:	mov	r2, r3
    1a90:	ldrh	r3, [fp, #-8]
    1a94:	add	r3, r3, #3
    1a98:	lsl	r3, r3, #1
    1a9c:	cmp	r2, r3
    1aa0:	bcc	1ac8 <reflection_Field_type+0xb4>
    1aa4:	ldrh	r3, [fp, #-8]
    1aa8:	add	r3, r3, #2
    1aac:	lsl	r3, r3, #1
    1ab0:	ldr	r2, [fp, #-12]
    1ab4:	add	r3, r2, r3
    1ab8:	mov	r0, r3
    1abc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1ac0:	mov	r3, r0
    1ac4:	strh	r3, [fp, #-6]
    1ac8:	ldrh	r3, [fp, #-6]
    1acc:	cmp	r3, #0
    1ad0:	beq	1afc <reflection_Field_type+0xe8>
    1ad4:	ldrh	r3, [fp, #-6]
    1ad8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1adc:	add	r3, r2, r3
    1ae0:	str	r3, [fp, #-16]
    1ae4:	ldr	r0, [fp, #-16]
    1ae8:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    1aec:	mov	r2, r0
    1af0:	ldr	r3, [fp, #-16]
    1af4:	add	r3, r3, r2
    1af8:	b	1b1c <reflection_Field_type+0x108>
    1afc:	movw	r3, #0
    1b00:	movt	r3, #0
    1b04:	mov	r2, #201	; 0xc9
    1b08:	movw	r1, #0
    1b0c:	movt	r1, #0
    1b10:	movw	r0, #0
    1b14:	movt	r0, #0
    1b18:	bl	0 <__assert_fail>
    1b1c:	mov	r0, r3
    1b20:	sub	sp, fp, #4
    1b24:	ldr	fp, [sp]
    1b28:	add	sp, sp, #4
    1b2c:	pop	{pc}		; (ldr pc, [sp], #4)

00001b30 <reflection_Field_id>:
    1b30:	str	fp, [sp, #-8]!
    1b34:	str	lr, [sp, #4]
    1b38:	add	fp, sp, #4
    1b3c:	sub	sp, sp, #16
    1b40:	str	r0, [fp, #-16]
    1b44:	mov	r3, #0
    1b48:	strh	r3, [fp, #-6]
    1b4c:	ldr	r3, [fp, #-16]
    1b50:	cmp	r3, #0
    1b54:	bne	1b78 <reflection_Field_id+0x48>
    1b58:	movw	r3, #0
    1b5c:	movt	r3, #0
    1b60:	mov	r2, #202	; 0xca
    1b64:	movw	r1, #0
    1b68:	movt	r1, #0
    1b6c:	movw	r0, #0
    1b70:	movt	r0, #0
    1b74:	bl	0 <__assert_fail>
    1b78:	mov	r3, #2
    1b7c:	strh	r3, [fp, #-8]
    1b80:	ldr	r0, [fp, #-16]
    1b84:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1b88:	mov	r3, r0
    1b8c:	rsb	r3, r3, #0
    1b90:	ldr	r2, [fp, #-16]
    1b94:	add	r3, r2, r3
    1b98:	str	r3, [fp, #-12]
    1b9c:	ldr	r0, [fp, #-12]
    1ba0:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1ba4:	mov	r3, r0
    1ba8:	mov	r2, r3
    1bac:	ldrh	r3, [fp, #-8]
    1bb0:	add	r3, r3, #3
    1bb4:	lsl	r3, r3, #1
    1bb8:	cmp	r2, r3
    1bbc:	bcc	1be4 <reflection_Field_id+0xb4>
    1bc0:	ldrh	r3, [fp, #-8]
    1bc4:	add	r3, r3, #2
    1bc8:	lsl	r3, r3, #1
    1bcc:	ldr	r2, [fp, #-12]
    1bd0:	add	r3, r2, r3
    1bd4:	mov	r0, r3
    1bd8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1bdc:	mov	r3, r0
    1be0:	strh	r3, [fp, #-6]
    1be4:	ldrh	r3, [fp, #-6]
    1be8:	cmp	r3, #0
    1bec:	beq	1c0c <reflection_Field_id+0xdc>
    1bf0:	ldrh	r3, [fp, #-6]
    1bf4:	ldr	r2, [fp, #-16]
    1bf8:	add	r3, r2, r3
    1bfc:	mov	r0, r3
    1c00:	bl	1f8 <flatbuffers_uint16_read_from_pe>
    1c04:	mov	r3, r0
    1c08:	b	1c10 <reflection_Field_id+0xe0>
    1c0c:	mov	r3, #0
    1c10:	mov	r0, r3
    1c14:	sub	sp, fp, #4
    1c18:	ldr	fp, [sp]
    1c1c:	add	sp, sp, #4
    1c20:	pop	{pc}		; (ldr pc, [sp], #4)

00001c24 <reflection_Field_id_is_present>:
    1c24:	str	fp, [sp, #-8]!
    1c28:	str	lr, [sp, #4]
    1c2c:	add	fp, sp, #4
    1c30:	sub	sp, sp, #16
    1c34:	str	r0, [fp, #-16]
    1c38:	mov	r3, #0
    1c3c:	strh	r3, [fp, #-6]
    1c40:	ldr	r3, [fp, #-16]
    1c44:	cmp	r3, #0
    1c48:	bne	1c6c <reflection_Field_id_is_present+0x48>
    1c4c:	movw	r3, #0
    1c50:	movt	r3, #0
    1c54:	mov	r2, #202	; 0xca
    1c58:	movw	r1, #0
    1c5c:	movt	r1, #0
    1c60:	movw	r0, #0
    1c64:	movt	r0, #0
    1c68:	bl	0 <__assert_fail>
    1c6c:	mov	r3, #2
    1c70:	strh	r3, [fp, #-8]
    1c74:	ldr	r0, [fp, #-16]
    1c78:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1c7c:	mov	r3, r0
    1c80:	rsb	r3, r3, #0
    1c84:	ldr	r2, [fp, #-16]
    1c88:	add	r3, r2, r3
    1c8c:	str	r3, [fp, #-12]
    1c90:	ldr	r0, [fp, #-12]
    1c94:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1c98:	mov	r3, r0
    1c9c:	mov	r2, r3
    1ca0:	ldrh	r3, [fp, #-8]
    1ca4:	add	r3, r3, #3
    1ca8:	lsl	r3, r3, #1
    1cac:	cmp	r2, r3
    1cb0:	bcc	1cd8 <reflection_Field_id_is_present+0xb4>
    1cb4:	ldrh	r3, [fp, #-8]
    1cb8:	add	r3, r3, #2
    1cbc:	lsl	r3, r3, #1
    1cc0:	ldr	r2, [fp, #-12]
    1cc4:	add	r3, r2, r3
    1cc8:	mov	r0, r3
    1ccc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1cd0:	mov	r3, r0
    1cd4:	strh	r3, [fp, #-6]
    1cd8:	ldrh	r3, [fp, #-6]
    1cdc:	cmp	r3, #0
    1ce0:	movne	r3, #1
    1ce4:	moveq	r3, #0
    1ce8:	uxtb	r3, r3
    1cec:	mov	r0, r3
    1cf0:	sub	sp, fp, #4
    1cf4:	ldr	fp, [sp]
    1cf8:	add	sp, sp, #4
    1cfc:	pop	{pc}		; (ldr pc, [sp], #4)

00001d00 <reflection_Field_default_integer>:
    1d00:	str	fp, [sp, #-8]!
    1d04:	str	lr, [sp, #4]
    1d08:	add	fp, sp, #4
    1d0c:	sub	sp, sp, #16
    1d10:	str	r0, [fp, #-16]
    1d14:	mov	r3, #0
    1d18:	strh	r3, [fp, #-6]
    1d1c:	ldr	r3, [fp, #-16]
    1d20:	cmp	r3, #0
    1d24:	bne	1d48 <reflection_Field_default_integer+0x48>
    1d28:	movw	r3, #0
    1d2c:	movt	r3, #0
    1d30:	mov	r2, #204	; 0xcc
    1d34:	movw	r1, #0
    1d38:	movt	r1, #0
    1d3c:	movw	r0, #0
    1d40:	movt	r0, #0
    1d44:	bl	0 <__assert_fail>
    1d48:	mov	r3, #4
    1d4c:	strh	r3, [fp, #-8]
    1d50:	ldr	r0, [fp, #-16]
    1d54:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1d58:	mov	r3, r0
    1d5c:	rsb	r3, r3, #0
    1d60:	ldr	r2, [fp, #-16]
    1d64:	add	r3, r2, r3
    1d68:	str	r3, [fp, #-12]
    1d6c:	ldr	r0, [fp, #-12]
    1d70:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1d74:	mov	r3, r0
    1d78:	mov	r2, r3
    1d7c:	ldrh	r3, [fp, #-8]
    1d80:	add	r3, r3, #3
    1d84:	lsl	r3, r3, #1
    1d88:	cmp	r2, r3
    1d8c:	bcc	1db4 <reflection_Field_default_integer+0xb4>
    1d90:	ldrh	r3, [fp, #-8]
    1d94:	add	r3, r3, #2
    1d98:	lsl	r3, r3, #1
    1d9c:	ldr	r2, [fp, #-12]
    1da0:	add	r3, r2, r3
    1da4:	mov	r0, r3
    1da8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1dac:	mov	r3, r0
    1db0:	strh	r3, [fp, #-6]
    1db4:	ldrh	r3, [fp, #-6]
    1db8:	cmp	r3, #0
    1dbc:	beq	1de0 <reflection_Field_default_integer+0xe0>
    1dc0:	ldrh	r3, [fp, #-6]
    1dc4:	ldr	r2, [fp, #-16]
    1dc8:	add	r3, r2, r3
    1dcc:	mov	r0, r3
    1dd0:	bl	2bc <flatbuffers_int64_read_from_pe>
    1dd4:	mov	r2, r0
    1dd8:	mov	r3, r1
    1ddc:	b	1de8 <reflection_Field_default_integer+0xe8>
    1de0:	mov	r2, #0
    1de4:	mov	r3, #0
    1de8:	mov	r0, r2
    1dec:	mov	r1, r3
    1df0:	sub	sp, fp, #4
    1df4:	ldr	fp, [sp]
    1df8:	add	sp, sp, #4
    1dfc:	pop	{pc}		; (ldr pc, [sp], #4)

00001e00 <reflection_Field_default_integer_is_present>:
    1e00:	str	fp, [sp, #-8]!
    1e04:	str	lr, [sp, #4]
    1e08:	add	fp, sp, #4
    1e0c:	sub	sp, sp, #16
    1e10:	str	r0, [fp, #-16]
    1e14:	mov	r3, #0
    1e18:	strh	r3, [fp, #-6]
    1e1c:	ldr	r3, [fp, #-16]
    1e20:	cmp	r3, #0
    1e24:	bne	1e48 <reflection_Field_default_integer_is_present+0x48>
    1e28:	movw	r3, #0
    1e2c:	movt	r3, #0
    1e30:	mov	r2, #204	; 0xcc
    1e34:	movw	r1, #0
    1e38:	movt	r1, #0
    1e3c:	movw	r0, #0
    1e40:	movt	r0, #0
    1e44:	bl	0 <__assert_fail>
    1e48:	mov	r3, #4
    1e4c:	strh	r3, [fp, #-8]
    1e50:	ldr	r0, [fp, #-16]
    1e54:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1e58:	mov	r3, r0
    1e5c:	rsb	r3, r3, #0
    1e60:	ldr	r2, [fp, #-16]
    1e64:	add	r3, r2, r3
    1e68:	str	r3, [fp, #-12]
    1e6c:	ldr	r0, [fp, #-12]
    1e70:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1e74:	mov	r3, r0
    1e78:	mov	r2, r3
    1e7c:	ldrh	r3, [fp, #-8]
    1e80:	add	r3, r3, #3
    1e84:	lsl	r3, r3, #1
    1e88:	cmp	r2, r3
    1e8c:	bcc	1eb4 <reflection_Field_default_integer_is_present+0xb4>
    1e90:	ldrh	r3, [fp, #-8]
    1e94:	add	r3, r3, #2
    1e98:	lsl	r3, r3, #1
    1e9c:	ldr	r2, [fp, #-12]
    1ea0:	add	r3, r2, r3
    1ea4:	mov	r0, r3
    1ea8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1eac:	mov	r3, r0
    1eb0:	strh	r3, [fp, #-6]
    1eb4:	ldrh	r3, [fp, #-6]
    1eb8:	cmp	r3, #0
    1ebc:	movne	r3, #1
    1ec0:	moveq	r3, #0
    1ec4:	uxtb	r3, r3
    1ec8:	mov	r0, r3
    1ecc:	sub	sp, fp, #4
    1ed0:	ldr	fp, [sp]
    1ed4:	add	sp, sp, #4
    1ed8:	pop	{pc}		; (ldr pc, [sp], #4)

00001edc <reflection_Field_default_real>:
    1edc:	str	fp, [sp, #-8]!
    1ee0:	str	lr, [sp, #4]
    1ee4:	add	fp, sp, #4
    1ee8:	sub	sp, sp, #16
    1eec:	str	r0, [fp, #-16]
    1ef0:	mov	r3, #0
    1ef4:	strh	r3, [fp, #-6]
    1ef8:	ldr	r3, [fp, #-16]
    1efc:	cmp	r3, #0
    1f00:	bne	1f24 <reflection_Field_default_real+0x48>
    1f04:	movw	r3, #0
    1f08:	movt	r3, #0
    1f0c:	mov	r2, #205	; 0xcd
    1f10:	movw	r1, #0
    1f14:	movt	r1, #0
    1f18:	movw	r0, #0
    1f1c:	movt	r0, #0
    1f20:	bl	0 <__assert_fail>
    1f24:	mov	r3, #5
    1f28:	strh	r3, [fp, #-8]
    1f2c:	ldr	r0, [fp, #-16]
    1f30:	bl	460 <__flatbuffers_soffset_read_from_pe>
    1f34:	mov	r3, r0
    1f38:	rsb	r3, r3, #0
    1f3c:	ldr	r2, [fp, #-16]
    1f40:	add	r3, r2, r3
    1f44:	str	r3, [fp, #-12]
    1f48:	ldr	r0, [fp, #-12]
    1f4c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1f50:	mov	r3, r0
    1f54:	mov	r2, r3
    1f58:	ldrh	r3, [fp, #-8]
    1f5c:	add	r3, r3, #3
    1f60:	lsl	r3, r3, #1
    1f64:	cmp	r2, r3
    1f68:	bcc	1f90 <reflection_Field_default_real+0xb4>
    1f6c:	ldrh	r3, [fp, #-8]
    1f70:	add	r3, r3, #2
    1f74:	lsl	r3, r3, #1
    1f78:	ldr	r2, [fp, #-12]
    1f7c:	add	r3, r2, r3
    1f80:	mov	r0, r3
    1f84:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    1f88:	mov	r3, r0
    1f8c:	strh	r3, [fp, #-6]
    1f90:	ldrh	r3, [fp, #-6]
    1f94:	cmp	r3, #0
    1f98:	beq	1fb8 <reflection_Field_default_real+0xdc>
    1f9c:	ldrh	r3, [fp, #-6]
    1fa0:	ldr	r2, [fp, #-16]
    1fa4:	add	r3, r2, r3
    1fa8:	mov	r0, r3
    1fac:	bl	33c <flatbuffers_double_read_from_pe>
    1fb0:	vmov.f64	d7, d0
    1fb4:	b	1fbc <reflection_Field_default_real+0xe0>
    1fb8:	vldr	d7, [pc, #16]	; 1fd0 <reflection_Field_default_real+0xf4>
    1fbc:	vmov.f64	d0, d7
    1fc0:	sub	sp, fp, #4
    1fc4:	ldr	fp, [sp]
    1fc8:	add	sp, sp, #4
    1fcc:	pop	{pc}		; (ldr pc, [sp], #4)
	...

00001fd8 <reflection_Field_default_real_is_present>:
    1fd8:	str	fp, [sp, #-8]!
    1fdc:	str	lr, [sp, #4]
    1fe0:	add	fp, sp, #4
    1fe4:	sub	sp, sp, #16
    1fe8:	str	r0, [fp, #-16]
    1fec:	mov	r3, #0
    1ff0:	strh	r3, [fp, #-6]
    1ff4:	ldr	r3, [fp, #-16]
    1ff8:	cmp	r3, #0
    1ffc:	bne	2020 <reflection_Field_default_real_is_present+0x48>
    2000:	movw	r3, #0
    2004:	movt	r3, #0
    2008:	mov	r2, #205	; 0xcd
    200c:	movw	r1, #0
    2010:	movt	r1, #0
    2014:	movw	r0, #0
    2018:	movt	r0, #0
    201c:	bl	0 <__assert_fail>
    2020:	mov	r3, #5
    2024:	strh	r3, [fp, #-8]
    2028:	ldr	r0, [fp, #-16]
    202c:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2030:	mov	r3, r0
    2034:	rsb	r3, r3, #0
    2038:	ldr	r2, [fp, #-16]
    203c:	add	r3, r2, r3
    2040:	str	r3, [fp, #-12]
    2044:	ldr	r0, [fp, #-12]
    2048:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    204c:	mov	r3, r0
    2050:	mov	r2, r3
    2054:	ldrh	r3, [fp, #-8]
    2058:	add	r3, r3, #3
    205c:	lsl	r3, r3, #1
    2060:	cmp	r2, r3
    2064:	bcc	208c <reflection_Field_default_real_is_present+0xb4>
    2068:	ldrh	r3, [fp, #-8]
    206c:	add	r3, r3, #2
    2070:	lsl	r3, r3, #1
    2074:	ldr	r2, [fp, #-12]
    2078:	add	r3, r2, r3
    207c:	mov	r0, r3
    2080:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2084:	mov	r3, r0
    2088:	strh	r3, [fp, #-6]
    208c:	ldrh	r3, [fp, #-6]
    2090:	cmp	r3, #0
    2094:	movne	r3, #1
    2098:	moveq	r3, #0
    209c:	uxtb	r3, r3
    20a0:	mov	r0, r3
    20a4:	sub	sp, fp, #4
    20a8:	ldr	fp, [sp]
    20ac:	add	sp, sp, #4
    20b0:	pop	{pc}		; (ldr pc, [sp], #4)

000020b4 <reflection_Field_required>:
    20b4:	str	fp, [sp, #-8]!
    20b8:	str	lr, [sp, #4]
    20bc:	add	fp, sp, #4
    20c0:	sub	sp, sp, #16
    20c4:	str	r0, [fp, #-16]
    20c8:	mov	r3, #0
    20cc:	strh	r3, [fp, #-6]
    20d0:	ldr	r3, [fp, #-16]
    20d4:	cmp	r3, #0
    20d8:	bne	20fc <reflection_Field_required+0x48>
    20dc:	movw	r3, #0
    20e0:	movt	r3, #0
    20e4:	mov	r2, #207	; 0xcf
    20e8:	movw	r1, #0
    20ec:	movt	r1, #0
    20f0:	movw	r0, #0
    20f4:	movt	r0, #0
    20f8:	bl	0 <__assert_fail>
    20fc:	mov	r3, #7
    2100:	strh	r3, [fp, #-8]
    2104:	ldr	r0, [fp, #-16]
    2108:	bl	460 <__flatbuffers_soffset_read_from_pe>
    210c:	mov	r3, r0
    2110:	rsb	r3, r3, #0
    2114:	ldr	r2, [fp, #-16]
    2118:	add	r3, r2, r3
    211c:	str	r3, [fp, #-12]
    2120:	ldr	r0, [fp, #-12]
    2124:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2128:	mov	r3, r0
    212c:	mov	r2, r3
    2130:	ldrh	r3, [fp, #-8]
    2134:	add	r3, r3, #3
    2138:	lsl	r3, r3, #1
    213c:	cmp	r2, r3
    2140:	bcc	2168 <reflection_Field_required+0xb4>
    2144:	ldrh	r3, [fp, #-8]
    2148:	add	r3, r3, #2
    214c:	lsl	r3, r3, #1
    2150:	ldr	r2, [fp, #-12]
    2154:	add	r3, r2, r3
    2158:	mov	r0, r3
    215c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2160:	mov	r3, r0
    2164:	strh	r3, [fp, #-6]
    2168:	ldrh	r3, [fp, #-6]
    216c:	cmp	r3, #0
    2170:	beq	2190 <reflection_Field_required+0xdc>
    2174:	ldrh	r3, [fp, #-6]
    2178:	ldr	r2, [fp, #-16]
    217c:	add	r3, r2, r3
    2180:	mov	r0, r3
    2184:	bl	3a0 <flatbuffers_bool_read_from_pe>
    2188:	mov	r3, r0
    218c:	b	2194 <reflection_Field_required+0xe0>
    2190:	mov	r3, #0
    2194:	mov	r0, r3
    2198:	sub	sp, fp, #4
    219c:	ldr	fp, [sp]
    21a0:	add	sp, sp, #4
    21a4:	pop	{pc}		; (ldr pc, [sp], #4)

000021a8 <reflection_Field_required_is_present>:
    21a8:	str	fp, [sp, #-8]!
    21ac:	str	lr, [sp, #4]
    21b0:	add	fp, sp, #4
    21b4:	sub	sp, sp, #16
    21b8:	str	r0, [fp, #-16]
    21bc:	mov	r3, #0
    21c0:	strh	r3, [fp, #-6]
    21c4:	ldr	r3, [fp, #-16]
    21c8:	cmp	r3, #0
    21cc:	bne	21f0 <reflection_Field_required_is_present+0x48>
    21d0:	movw	r3, #0
    21d4:	movt	r3, #0
    21d8:	mov	r2, #207	; 0xcf
    21dc:	movw	r1, #0
    21e0:	movt	r1, #0
    21e4:	movw	r0, #0
    21e8:	movt	r0, #0
    21ec:	bl	0 <__assert_fail>
    21f0:	mov	r3, #7
    21f4:	strh	r3, [fp, #-8]
    21f8:	ldr	r0, [fp, #-16]
    21fc:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2200:	mov	r3, r0
    2204:	rsb	r3, r3, #0
    2208:	ldr	r2, [fp, #-16]
    220c:	add	r3, r2, r3
    2210:	str	r3, [fp, #-12]
    2214:	ldr	r0, [fp, #-12]
    2218:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    221c:	mov	r3, r0
    2220:	mov	r2, r3
    2224:	ldrh	r3, [fp, #-8]
    2228:	add	r3, r3, #3
    222c:	lsl	r3, r3, #1
    2230:	cmp	r2, r3
    2234:	bcc	225c <reflection_Field_required_is_present+0xb4>
    2238:	ldrh	r3, [fp, #-8]
    223c:	add	r3, r3, #2
    2240:	lsl	r3, r3, #1
    2244:	ldr	r2, [fp, #-12]
    2248:	add	r3, r2, r3
    224c:	mov	r0, r3
    2250:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2254:	mov	r3, r0
    2258:	strh	r3, [fp, #-6]
    225c:	ldrh	r3, [fp, #-6]
    2260:	cmp	r3, #0
    2264:	movne	r3, #1
    2268:	moveq	r3, #0
    226c:	uxtb	r3, r3
    2270:	mov	r0, r3
    2274:	sub	sp, fp, #4
    2278:	ldr	fp, [sp]
    227c:	add	sp, sp, #4
    2280:	pop	{pc}		; (ldr pc, [sp], #4)

00002284 <reflection_Field_key>:
    2284:	str	fp, [sp, #-8]!
    2288:	str	lr, [sp, #4]
    228c:	add	fp, sp, #4
    2290:	sub	sp, sp, #16
    2294:	str	r0, [fp, #-16]
    2298:	mov	r3, #0
    229c:	strh	r3, [fp, #-6]
    22a0:	ldr	r3, [fp, #-16]
    22a4:	cmp	r3, #0
    22a8:	bne	22cc <reflection_Field_key+0x48>
    22ac:	movw	r3, #0
    22b0:	movt	r3, #0
    22b4:	mov	r2, #208	; 0xd0
    22b8:	movw	r1, #0
    22bc:	movt	r1, #0
    22c0:	movw	r0, #0
    22c4:	movt	r0, #0
    22c8:	bl	0 <__assert_fail>
    22cc:	mov	r3, #8
    22d0:	strh	r3, [fp, #-8]
    22d4:	ldr	r0, [fp, #-16]
    22d8:	bl	460 <__flatbuffers_soffset_read_from_pe>
    22dc:	mov	r3, r0
    22e0:	rsb	r3, r3, #0
    22e4:	ldr	r2, [fp, #-16]
    22e8:	add	r3, r2, r3
    22ec:	str	r3, [fp, #-12]
    22f0:	ldr	r0, [fp, #-12]
    22f4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    22f8:	mov	r3, r0
    22fc:	mov	r2, r3
    2300:	ldrh	r3, [fp, #-8]
    2304:	add	r3, r3, #3
    2308:	lsl	r3, r3, #1
    230c:	cmp	r2, r3
    2310:	bcc	2338 <reflection_Field_key+0xb4>
    2314:	ldrh	r3, [fp, #-8]
    2318:	add	r3, r3, #2
    231c:	lsl	r3, r3, #1
    2320:	ldr	r2, [fp, #-12]
    2324:	add	r3, r2, r3
    2328:	mov	r0, r3
    232c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2330:	mov	r3, r0
    2334:	strh	r3, [fp, #-6]
    2338:	ldrh	r3, [fp, #-6]
    233c:	cmp	r3, #0
    2340:	beq	2360 <reflection_Field_key+0xdc>
    2344:	ldrh	r3, [fp, #-6]
    2348:	ldr	r2, [fp, #-16]
    234c:	add	r3, r2, r3
    2350:	mov	r0, r3
    2354:	bl	3a0 <flatbuffers_bool_read_from_pe>
    2358:	mov	r3, r0
    235c:	b	2364 <reflection_Field_key+0xe0>
    2360:	mov	r3, #0
    2364:	mov	r0, r3
    2368:	sub	sp, fp, #4
    236c:	ldr	fp, [sp]
    2370:	add	sp, sp, #4
    2374:	pop	{pc}		; (ldr pc, [sp], #4)

00002378 <reflection_Field_key_is_present>:
    2378:	str	fp, [sp, #-8]!
    237c:	str	lr, [sp, #4]
    2380:	add	fp, sp, #4
    2384:	sub	sp, sp, #16
    2388:	str	r0, [fp, #-16]
    238c:	mov	r3, #0
    2390:	strh	r3, [fp, #-6]
    2394:	ldr	r3, [fp, #-16]
    2398:	cmp	r3, #0
    239c:	bne	23c0 <reflection_Field_key_is_present+0x48>
    23a0:	movw	r3, #0
    23a4:	movt	r3, #0
    23a8:	mov	r2, #208	; 0xd0
    23ac:	movw	r1, #0
    23b0:	movt	r1, #0
    23b4:	movw	r0, #0
    23b8:	movt	r0, #0
    23bc:	bl	0 <__assert_fail>
    23c0:	mov	r3, #8
    23c4:	strh	r3, [fp, #-8]
    23c8:	ldr	r0, [fp, #-16]
    23cc:	bl	460 <__flatbuffers_soffset_read_from_pe>
    23d0:	mov	r3, r0
    23d4:	rsb	r3, r3, #0
    23d8:	ldr	r2, [fp, #-16]
    23dc:	add	r3, r2, r3
    23e0:	str	r3, [fp, #-12]
    23e4:	ldr	r0, [fp, #-12]
    23e8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    23ec:	mov	r3, r0
    23f0:	mov	r2, r3
    23f4:	ldrh	r3, [fp, #-8]
    23f8:	add	r3, r3, #3
    23fc:	lsl	r3, r3, #1
    2400:	cmp	r2, r3
    2404:	bcc	242c <reflection_Field_key_is_present+0xb4>
    2408:	ldrh	r3, [fp, #-8]
    240c:	add	r3, r3, #2
    2410:	lsl	r3, r3, #1
    2414:	ldr	r2, [fp, #-12]
    2418:	add	r3, r2, r3
    241c:	mov	r0, r3
    2420:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2424:	mov	r3, r0
    2428:	strh	r3, [fp, #-6]
    242c:	ldrh	r3, [fp, #-6]
    2430:	cmp	r3, #0
    2434:	movne	r3, #1
    2438:	moveq	r3, #0
    243c:	uxtb	r3, r3
    2440:	mov	r0, r3
    2444:	sub	sp, fp, #4
    2448:	ldr	fp, [sp]
    244c:	add	sp, sp, #4
    2450:	pop	{pc}		; (ldr pc, [sp], #4)

00002454 <reflection_Object_vec_len>:
    2454:	str	fp, [sp, #-8]!
    2458:	str	lr, [sp, #4]
    245c:	add	fp, sp, #4
    2460:	sub	sp, sp, #8
    2464:	str	r0, [fp, #-8]
    2468:	ldr	r3, [fp, #-8]
    246c:	cmp	r3, #0
    2470:	beq	248c <reflection_Object_vec_len+0x38>
    2474:	ldr	r3, [fp, #-8]
    2478:	sub	r3, r3, #4
    247c:	mov	r0, r3
    2480:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    2484:	mov	r3, r0
    2488:	b	2490 <reflection_Object_vec_len+0x3c>
    248c:	mov	r3, #0
    2490:	mov	r0, r3
    2494:	sub	sp, fp, #4
    2498:	ldr	fp, [sp]
    249c:	add	sp, sp, #4
    24a0:	pop	{pc}		; (ldr pc, [sp], #4)

000024a4 <reflection_Object_vec_at>:
    24a4:	str	fp, [sp, #-8]!
    24a8:	str	lr, [sp, #4]
    24ac:	add	fp, sp, #4
    24b0:	sub	sp, sp, #16
    24b4:	str	r0, [fp, #-16]
    24b8:	str	r1, [fp, #-20]	; 0xffffffec
    24bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    24c0:	lsl	r3, r3, #2
    24c4:	ldr	r2, [fp, #-16]
    24c8:	add	r3, r2, r3
    24cc:	str	r3, [fp, #-8]
    24d0:	ldr	r0, [fp, #-16]
    24d4:	bl	584 <flatbuffers_vec_len>
    24d8:	mov	r2, r0
    24dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    24e0:	cmp	r3, r2
    24e4:	bcc	2508 <reflection_Object_vec_at+0x64>
    24e8:	movw	r3, #0
    24ec:	movt	r3, #0
    24f0:	mov	r2, #215	; 0xd7
    24f4:	movw	r1, #0
    24f8:	movt	r1, #0
    24fc:	movw	r0, #0
    2500:	movt	r0, #0
    2504:	bl	0 <__assert_fail>
    2508:	ldr	r0, [fp, #-8]
    250c:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    2510:	mov	r2, r0
    2514:	ldr	r3, [fp, #-8]
    2518:	add	r3, r3, r2
    251c:	mov	r0, r3
    2520:	sub	sp, fp, #4
    2524:	ldr	fp, [sp]
    2528:	add	sp, sp, #4
    252c:	pop	{pc}		; (ldr pc, [sp], #4)

00002530 <reflection_Object_name>:
    2530:	str	fp, [sp, #-8]!
    2534:	str	lr, [sp, #4]
    2538:	add	fp, sp, #4
    253c:	sub	sp, sp, #24
    2540:	str	r0, [fp, #-24]	; 0xffffffe8
    2544:	mov	r3, #0
    2548:	strh	r3, [fp, #-6]
    254c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2550:	cmp	r3, #0
    2554:	bne	2578 <reflection_Object_name+0x48>
    2558:	movw	r3, #0
    255c:	movt	r3, #0
    2560:	mov	r2, #218	; 0xda
    2564:	movw	r1, #0
    2568:	movt	r1, #0
    256c:	movw	r0, #0
    2570:	movt	r0, #0
    2574:	bl	0 <__assert_fail>
    2578:	mov	r3, #0
    257c:	strh	r3, [fp, #-8]
    2580:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2584:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2588:	mov	r3, r0
    258c:	rsb	r3, r3, #0
    2590:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2594:	add	r3, r2, r3
    2598:	str	r3, [fp, #-12]
    259c:	ldr	r0, [fp, #-12]
    25a0:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    25a4:	mov	r3, r0
    25a8:	mov	r2, r3
    25ac:	ldrh	r3, [fp, #-8]
    25b0:	add	r3, r3, #3
    25b4:	lsl	r3, r3, #1
    25b8:	cmp	r2, r3
    25bc:	bcc	25e4 <reflection_Object_name+0xb4>
    25c0:	ldrh	r3, [fp, #-8]
    25c4:	add	r3, r3, #2
    25c8:	lsl	r3, r3, #1
    25cc:	ldr	r2, [fp, #-12]
    25d0:	add	r3, r2, r3
    25d4:	mov	r0, r3
    25d8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    25dc:	mov	r3, r0
    25e0:	strh	r3, [fp, #-6]
    25e4:	ldrh	r3, [fp, #-6]
    25e8:	cmp	r3, #0
    25ec:	beq	261c <reflection_Object_name+0xec>
    25f0:	ldrh	r3, [fp, #-6]
    25f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    25f8:	add	r3, r2, r3
    25fc:	str	r3, [fp, #-16]
    2600:	ldr	r0, [fp, #-16]
    2604:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    2608:	mov	r3, r0
    260c:	add	r3, r3, #4
    2610:	ldr	r2, [fp, #-16]
    2614:	add	r3, r2, r3
    2618:	b	263c <reflection_Object_name+0x10c>
    261c:	movw	r3, #0
    2620:	movt	r3, #0
    2624:	mov	r2, #218	; 0xda
    2628:	movw	r1, #0
    262c:	movt	r1, #0
    2630:	movw	r0, #0
    2634:	movt	r0, #0
    2638:	bl	0 <__assert_fail>
    263c:	mov	r0, r3
    2640:	sub	sp, fp, #4
    2644:	ldr	fp, [sp]
    2648:	add	sp, sp, #4
    264c:	pop	{pc}		; (ldr pc, [sp], #4)

00002650 <reflection_Object_fields>:
    2650:	str	fp, [sp, #-8]!
    2654:	str	lr, [sp, #4]
    2658:	add	fp, sp, #4
    265c:	sub	sp, sp, #24
    2660:	str	r0, [fp, #-24]	; 0xffffffe8
    2664:	mov	r3, #0
    2668:	strh	r3, [fp, #-6]
    266c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2670:	cmp	r3, #0
    2674:	bne	2698 <reflection_Object_fields+0x48>
    2678:	movw	r3, #0
    267c:	movt	r3, #0
    2680:	mov	r2, #224	; 0xe0
    2684:	movw	r1, #0
    2688:	movt	r1, #0
    268c:	movw	r0, #0
    2690:	movt	r0, #0
    2694:	bl	0 <__assert_fail>
    2698:	mov	r3, #1
    269c:	strh	r3, [fp, #-8]
    26a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    26a4:	bl	460 <__flatbuffers_soffset_read_from_pe>
    26a8:	mov	r3, r0
    26ac:	rsb	r3, r3, #0
    26b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    26b4:	add	r3, r2, r3
    26b8:	str	r3, [fp, #-12]
    26bc:	ldr	r0, [fp, #-12]
    26c0:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    26c4:	mov	r3, r0
    26c8:	mov	r2, r3
    26cc:	ldrh	r3, [fp, #-8]
    26d0:	add	r3, r3, #3
    26d4:	lsl	r3, r3, #1
    26d8:	cmp	r2, r3
    26dc:	bcc	2704 <reflection_Object_fields+0xb4>
    26e0:	ldrh	r3, [fp, #-8]
    26e4:	add	r3, r3, #2
    26e8:	lsl	r3, r3, #1
    26ec:	ldr	r2, [fp, #-12]
    26f0:	add	r3, r2, r3
    26f4:	mov	r0, r3
    26f8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    26fc:	mov	r3, r0
    2700:	strh	r3, [fp, #-6]
    2704:	ldrh	r3, [fp, #-6]
    2708:	cmp	r3, #0
    270c:	beq	273c <reflection_Object_fields+0xec>
    2710:	ldrh	r3, [fp, #-6]
    2714:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2718:	add	r3, r2, r3
    271c:	str	r3, [fp, #-16]
    2720:	ldr	r0, [fp, #-16]
    2724:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    2728:	mov	r3, r0
    272c:	add	r3, r3, #4
    2730:	ldr	r2, [fp, #-16]
    2734:	add	r3, r2, r3
    2738:	b	275c <reflection_Object_fields+0x10c>
    273c:	movw	r3, #0
    2740:	movt	r3, #0
    2744:	mov	r2, #224	; 0xe0
    2748:	movw	r1, #0
    274c:	movt	r1, #0
    2750:	movw	r0, #0
    2754:	movt	r0, #0
    2758:	bl	0 <__assert_fail>
    275c:	mov	r0, r3
    2760:	sub	sp, fp, #4
    2764:	ldr	fp, [sp]
    2768:	add	sp, sp, #4
    276c:	pop	{pc}		; (ldr pc, [sp], #4)

00002770 <reflection_Object_is_struct>:
    2770:	str	fp, [sp, #-8]!
    2774:	str	lr, [sp, #4]
    2778:	add	fp, sp, #4
    277c:	sub	sp, sp, #16
    2780:	str	r0, [fp, #-16]
    2784:	mov	r3, #0
    2788:	strh	r3, [fp, #-6]
    278c:	ldr	r3, [fp, #-16]
    2790:	cmp	r3, #0
    2794:	bne	27b8 <reflection_Object_is_struct+0x48>
    2798:	movw	r3, #0
    279c:	movt	r3, #0
    27a0:	mov	r2, #225	; 0xe1
    27a4:	movw	r1, #0
    27a8:	movt	r1, #0
    27ac:	movw	r0, #0
    27b0:	movt	r0, #0
    27b4:	bl	0 <__assert_fail>
    27b8:	mov	r3, #2
    27bc:	strh	r3, [fp, #-8]
    27c0:	ldr	r0, [fp, #-16]
    27c4:	bl	460 <__flatbuffers_soffset_read_from_pe>
    27c8:	mov	r3, r0
    27cc:	rsb	r3, r3, #0
    27d0:	ldr	r2, [fp, #-16]
    27d4:	add	r3, r2, r3
    27d8:	str	r3, [fp, #-12]
    27dc:	ldr	r0, [fp, #-12]
    27e0:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    27e4:	mov	r3, r0
    27e8:	mov	r2, r3
    27ec:	ldrh	r3, [fp, #-8]
    27f0:	add	r3, r3, #3
    27f4:	lsl	r3, r3, #1
    27f8:	cmp	r2, r3
    27fc:	bcc	2824 <reflection_Object_is_struct+0xb4>
    2800:	ldrh	r3, [fp, #-8]
    2804:	add	r3, r3, #2
    2808:	lsl	r3, r3, #1
    280c:	ldr	r2, [fp, #-12]
    2810:	add	r3, r2, r3
    2814:	mov	r0, r3
    2818:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    281c:	mov	r3, r0
    2820:	strh	r3, [fp, #-6]
    2824:	ldrh	r3, [fp, #-6]
    2828:	cmp	r3, #0
    282c:	beq	284c <reflection_Object_is_struct+0xdc>
    2830:	ldrh	r3, [fp, #-6]
    2834:	ldr	r2, [fp, #-16]
    2838:	add	r3, r2, r3
    283c:	mov	r0, r3
    2840:	bl	3a0 <flatbuffers_bool_read_from_pe>
    2844:	mov	r3, r0
    2848:	b	2850 <reflection_Object_is_struct+0xe0>
    284c:	mov	r3, #0
    2850:	mov	r0, r3
    2854:	sub	sp, fp, #4
    2858:	ldr	fp, [sp]
    285c:	add	sp, sp, #4
    2860:	pop	{pc}		; (ldr pc, [sp], #4)

00002864 <reflection_Object_is_struct_is_present>:
    2864:	str	fp, [sp, #-8]!
    2868:	str	lr, [sp, #4]
    286c:	add	fp, sp, #4
    2870:	sub	sp, sp, #16
    2874:	str	r0, [fp, #-16]
    2878:	mov	r3, #0
    287c:	strh	r3, [fp, #-6]
    2880:	ldr	r3, [fp, #-16]
    2884:	cmp	r3, #0
    2888:	bne	28ac <reflection_Object_is_struct_is_present+0x48>
    288c:	movw	r3, #0
    2890:	movt	r3, #0
    2894:	mov	r2, #225	; 0xe1
    2898:	movw	r1, #0
    289c:	movt	r1, #0
    28a0:	movw	r0, #0
    28a4:	movt	r0, #0
    28a8:	bl	0 <__assert_fail>
    28ac:	mov	r3, #2
    28b0:	strh	r3, [fp, #-8]
    28b4:	ldr	r0, [fp, #-16]
    28b8:	bl	460 <__flatbuffers_soffset_read_from_pe>
    28bc:	mov	r3, r0
    28c0:	rsb	r3, r3, #0
    28c4:	ldr	r2, [fp, #-16]
    28c8:	add	r3, r2, r3
    28cc:	str	r3, [fp, #-12]
    28d0:	ldr	r0, [fp, #-12]
    28d4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    28d8:	mov	r3, r0
    28dc:	mov	r2, r3
    28e0:	ldrh	r3, [fp, #-8]
    28e4:	add	r3, r3, #3
    28e8:	lsl	r3, r3, #1
    28ec:	cmp	r2, r3
    28f0:	bcc	2918 <reflection_Object_is_struct_is_present+0xb4>
    28f4:	ldrh	r3, [fp, #-8]
    28f8:	add	r3, r3, #2
    28fc:	lsl	r3, r3, #1
    2900:	ldr	r2, [fp, #-12]
    2904:	add	r3, r2, r3
    2908:	mov	r0, r3
    290c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2910:	mov	r3, r0
    2914:	strh	r3, [fp, #-6]
    2918:	ldrh	r3, [fp, #-6]
    291c:	cmp	r3, #0
    2920:	movne	r3, #1
    2924:	moveq	r3, #0
    2928:	uxtb	r3, r3
    292c:	mov	r0, r3
    2930:	sub	sp, fp, #4
    2934:	ldr	fp, [sp]
    2938:	add	sp, sp, #4
    293c:	pop	{pc}		; (ldr pc, [sp], #4)

00002940 <reflection_Object_minalign>:
    2940:	str	fp, [sp, #-8]!
    2944:	str	lr, [sp, #4]
    2948:	add	fp, sp, #4
    294c:	sub	sp, sp, #16
    2950:	str	r0, [fp, #-16]
    2954:	mov	r3, #0
    2958:	strh	r3, [fp, #-6]
    295c:	ldr	r3, [fp, #-16]
    2960:	cmp	r3, #0
    2964:	bne	2988 <reflection_Object_minalign+0x48>
    2968:	movw	r3, #0
    296c:	movt	r3, #0
    2970:	mov	r2, #226	; 0xe2
    2974:	movw	r1, #0
    2978:	movt	r1, #0
    297c:	movw	r0, #0
    2980:	movt	r0, #0
    2984:	bl	0 <__assert_fail>
    2988:	mov	r3, #3
    298c:	strh	r3, [fp, #-8]
    2990:	ldr	r0, [fp, #-16]
    2994:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2998:	mov	r3, r0
    299c:	rsb	r3, r3, #0
    29a0:	ldr	r2, [fp, #-16]
    29a4:	add	r3, r2, r3
    29a8:	str	r3, [fp, #-12]
    29ac:	ldr	r0, [fp, #-12]
    29b0:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    29b4:	mov	r3, r0
    29b8:	mov	r2, r3
    29bc:	ldrh	r3, [fp, #-8]
    29c0:	add	r3, r3, #3
    29c4:	lsl	r3, r3, #1
    29c8:	cmp	r2, r3
    29cc:	bcc	29f4 <reflection_Object_minalign+0xb4>
    29d0:	ldrh	r3, [fp, #-8]
    29d4:	add	r3, r3, #2
    29d8:	lsl	r3, r3, #1
    29dc:	ldr	r2, [fp, #-12]
    29e0:	add	r3, r2, r3
    29e4:	mov	r0, r3
    29e8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    29ec:	mov	r3, r0
    29f0:	strh	r3, [fp, #-6]
    29f4:	ldrh	r3, [fp, #-6]
    29f8:	cmp	r3, #0
    29fc:	beq	2a1c <reflection_Object_minalign+0xdc>
    2a00:	ldrh	r3, [fp, #-6]
    2a04:	ldr	r2, [fp, #-16]
    2a08:	add	r3, r2, r3
    2a0c:	mov	r0, r3
    2a10:	bl	258 <flatbuffers_int32_read_from_pe>
    2a14:	mov	r3, r0
    2a18:	b	2a20 <reflection_Object_minalign+0xe0>
    2a1c:	mov	r3, #0
    2a20:	mov	r0, r3
    2a24:	sub	sp, fp, #4
    2a28:	ldr	fp, [sp]
    2a2c:	add	sp, sp, #4
    2a30:	pop	{pc}		; (ldr pc, [sp], #4)

00002a34 <reflection_Object_minalign_is_present>:
    2a34:	str	fp, [sp, #-8]!
    2a38:	str	lr, [sp, #4]
    2a3c:	add	fp, sp, #4
    2a40:	sub	sp, sp, #16
    2a44:	str	r0, [fp, #-16]
    2a48:	mov	r3, #0
    2a4c:	strh	r3, [fp, #-6]
    2a50:	ldr	r3, [fp, #-16]
    2a54:	cmp	r3, #0
    2a58:	bne	2a7c <reflection_Object_minalign_is_present+0x48>
    2a5c:	movw	r3, #0
    2a60:	movt	r3, #0
    2a64:	mov	r2, #226	; 0xe2
    2a68:	movw	r1, #0
    2a6c:	movt	r1, #0
    2a70:	movw	r0, #0
    2a74:	movt	r0, #0
    2a78:	bl	0 <__assert_fail>
    2a7c:	mov	r3, #3
    2a80:	strh	r3, [fp, #-8]
    2a84:	ldr	r0, [fp, #-16]
    2a88:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2a8c:	mov	r3, r0
    2a90:	rsb	r3, r3, #0
    2a94:	ldr	r2, [fp, #-16]
    2a98:	add	r3, r2, r3
    2a9c:	str	r3, [fp, #-12]
    2aa0:	ldr	r0, [fp, #-12]
    2aa4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2aa8:	mov	r3, r0
    2aac:	mov	r2, r3
    2ab0:	ldrh	r3, [fp, #-8]
    2ab4:	add	r3, r3, #3
    2ab8:	lsl	r3, r3, #1
    2abc:	cmp	r2, r3
    2ac0:	bcc	2ae8 <reflection_Object_minalign_is_present+0xb4>
    2ac4:	ldrh	r3, [fp, #-8]
    2ac8:	add	r3, r3, #2
    2acc:	lsl	r3, r3, #1
    2ad0:	ldr	r2, [fp, #-12]
    2ad4:	add	r3, r2, r3
    2ad8:	mov	r0, r3
    2adc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2ae0:	mov	r3, r0
    2ae4:	strh	r3, [fp, #-6]
    2ae8:	ldrh	r3, [fp, #-6]
    2aec:	cmp	r3, #0
    2af0:	movne	r3, #1
    2af4:	moveq	r3, #0
    2af8:	uxtb	r3, r3
    2afc:	mov	r0, r3
    2b00:	sub	sp, fp, #4
    2b04:	ldr	fp, [sp]
    2b08:	add	sp, sp, #4
    2b0c:	pop	{pc}		; (ldr pc, [sp], #4)

00002b10 <reflection_Object_bytesize>:
    2b10:	str	fp, [sp, #-8]!
    2b14:	str	lr, [sp, #4]
    2b18:	add	fp, sp, #4
    2b1c:	sub	sp, sp, #16
    2b20:	str	r0, [fp, #-16]
    2b24:	mov	r3, #0
    2b28:	strh	r3, [fp, #-6]
    2b2c:	ldr	r3, [fp, #-16]
    2b30:	cmp	r3, #0
    2b34:	bne	2b58 <reflection_Object_bytesize+0x48>
    2b38:	movw	r3, #0
    2b3c:	movt	r3, #0
    2b40:	mov	r2, #227	; 0xe3
    2b44:	movw	r1, #0
    2b48:	movt	r1, #0
    2b4c:	movw	r0, #0
    2b50:	movt	r0, #0
    2b54:	bl	0 <__assert_fail>
    2b58:	mov	r3, #4
    2b5c:	strh	r3, [fp, #-8]
    2b60:	ldr	r0, [fp, #-16]
    2b64:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2b68:	mov	r3, r0
    2b6c:	rsb	r3, r3, #0
    2b70:	ldr	r2, [fp, #-16]
    2b74:	add	r3, r2, r3
    2b78:	str	r3, [fp, #-12]
    2b7c:	ldr	r0, [fp, #-12]
    2b80:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2b84:	mov	r3, r0
    2b88:	mov	r2, r3
    2b8c:	ldrh	r3, [fp, #-8]
    2b90:	add	r3, r3, #3
    2b94:	lsl	r3, r3, #1
    2b98:	cmp	r2, r3
    2b9c:	bcc	2bc4 <reflection_Object_bytesize+0xb4>
    2ba0:	ldrh	r3, [fp, #-8]
    2ba4:	add	r3, r3, #2
    2ba8:	lsl	r3, r3, #1
    2bac:	ldr	r2, [fp, #-12]
    2bb0:	add	r3, r2, r3
    2bb4:	mov	r0, r3
    2bb8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2bbc:	mov	r3, r0
    2bc0:	strh	r3, [fp, #-6]
    2bc4:	ldrh	r3, [fp, #-6]
    2bc8:	cmp	r3, #0
    2bcc:	beq	2bec <reflection_Object_bytesize+0xdc>
    2bd0:	ldrh	r3, [fp, #-6]
    2bd4:	ldr	r2, [fp, #-16]
    2bd8:	add	r3, r2, r3
    2bdc:	mov	r0, r3
    2be0:	bl	258 <flatbuffers_int32_read_from_pe>
    2be4:	mov	r3, r0
    2be8:	b	2bf0 <reflection_Object_bytesize+0xe0>
    2bec:	mov	r3, #0
    2bf0:	mov	r0, r3
    2bf4:	sub	sp, fp, #4
    2bf8:	ldr	fp, [sp]
    2bfc:	add	sp, sp, #4
    2c00:	pop	{pc}		; (ldr pc, [sp], #4)

00002c04 <reflection_Object_bytesize_is_present>:
    2c04:	str	fp, [sp, #-8]!
    2c08:	str	lr, [sp, #4]
    2c0c:	add	fp, sp, #4
    2c10:	sub	sp, sp, #16
    2c14:	str	r0, [fp, #-16]
    2c18:	mov	r3, #0
    2c1c:	strh	r3, [fp, #-6]
    2c20:	ldr	r3, [fp, #-16]
    2c24:	cmp	r3, #0
    2c28:	bne	2c4c <reflection_Object_bytesize_is_present+0x48>
    2c2c:	movw	r3, #0
    2c30:	movt	r3, #0
    2c34:	mov	r2, #227	; 0xe3
    2c38:	movw	r1, #0
    2c3c:	movt	r1, #0
    2c40:	movw	r0, #0
    2c44:	movt	r0, #0
    2c48:	bl	0 <__assert_fail>
    2c4c:	mov	r3, #4
    2c50:	strh	r3, [fp, #-8]
    2c54:	ldr	r0, [fp, #-16]
    2c58:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2c5c:	mov	r3, r0
    2c60:	rsb	r3, r3, #0
    2c64:	ldr	r2, [fp, #-16]
    2c68:	add	r3, r2, r3
    2c6c:	str	r3, [fp, #-12]
    2c70:	ldr	r0, [fp, #-12]
    2c74:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2c78:	mov	r3, r0
    2c7c:	mov	r2, r3
    2c80:	ldrh	r3, [fp, #-8]
    2c84:	add	r3, r3, #3
    2c88:	lsl	r3, r3, #1
    2c8c:	cmp	r2, r3
    2c90:	bcc	2cb8 <reflection_Object_bytesize_is_present+0xb4>
    2c94:	ldrh	r3, [fp, #-8]
    2c98:	add	r3, r3, #2
    2c9c:	lsl	r3, r3, #1
    2ca0:	ldr	r2, [fp, #-12]
    2ca4:	add	r3, r2, r3
    2ca8:	mov	r0, r3
    2cac:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2cb0:	mov	r3, r0
    2cb4:	strh	r3, [fp, #-6]
    2cb8:	ldrh	r3, [fp, #-6]
    2cbc:	cmp	r3, #0
    2cc0:	movne	r3, #1
    2cc4:	moveq	r3, #0
    2cc8:	uxtb	r3, r3
    2ccc:	mov	r0, r3
    2cd0:	sub	sp, fp, #4
    2cd4:	ldr	fp, [sp]
    2cd8:	add	sp, sp, #4
    2cdc:	pop	{pc}		; (ldr pc, [sp], #4)

00002ce0 <reflection_Schema_as_root>:
    2ce0:	str	fp, [sp, #-8]!
    2ce4:	str	lr, [sp, #4]
    2ce8:	add	fp, sp, #4
    2cec:	sub	sp, sp, #16
    2cf0:	str	r0, [fp, #-16]
    2cf4:	movw	r3, #0
    2cf8:	movt	r3, #0
    2cfc:	str	r3, [fp, #-8]
    2d00:	ldr	r3, [fp, #-16]
    2d04:	cmp	r3, #0
    2d08:	beq	2d3c <reflection_Schema_as_root+0x5c>
    2d0c:	ldr	r1, [fp, #-8]
    2d10:	ldr	r0, [fp, #-16]
    2d14:	bl	5d4 <flatbuffers_has_identifier>
    2d18:	mov	r3, r0
    2d1c:	cmp	r3, #0
    2d20:	beq	2d3c <reflection_Schema_as_root+0x5c>
    2d24:	ldr	r0, [fp, #-16]
    2d28:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    2d2c:	mov	r2, r0
    2d30:	ldr	r3, [fp, #-16]
    2d34:	add	r3, r3, r2
    2d38:	b	2d40 <reflection_Schema_as_root+0x60>
    2d3c:	mov	r3, #0
    2d40:	mov	r0, r3
    2d44:	sub	sp, fp, #4
    2d48:	ldr	fp, [sp]
    2d4c:	add	sp, sp, #4
    2d50:	pop	{pc}		; (ldr pc, [sp], #4)

00002d54 <reflection_Schema_objects>:
    2d54:	str	fp, [sp, #-8]!
    2d58:	str	lr, [sp, #4]
    2d5c:	add	fp, sp, #4
    2d60:	sub	sp, sp, #24
    2d64:	str	r0, [fp, #-24]	; 0xffffffe8
    2d68:	mov	r3, #0
    2d6c:	strh	r3, [fp, #-6]
    2d70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d74:	cmp	r3, #0
    2d78:	bne	2d9c <reflection_Schema_objects+0x48>
    2d7c:	movw	r3, #0
    2d80:	movt	r3, #0
    2d84:	mov	r2, #237	; 0xed
    2d88:	movw	r1, #0
    2d8c:	movt	r1, #0
    2d90:	movw	r0, #0
    2d94:	movt	r0, #0
    2d98:	bl	0 <__assert_fail>
    2d9c:	mov	r3, #0
    2da0:	strh	r3, [fp, #-8]
    2da4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2da8:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2dac:	mov	r3, r0
    2db0:	rsb	r3, r3, #0
    2db4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2db8:	add	r3, r2, r3
    2dbc:	str	r3, [fp, #-12]
    2dc0:	ldr	r0, [fp, #-12]
    2dc4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2dc8:	mov	r3, r0
    2dcc:	mov	r2, r3
    2dd0:	ldrh	r3, [fp, #-8]
    2dd4:	add	r3, r3, #3
    2dd8:	lsl	r3, r3, #1
    2ddc:	cmp	r2, r3
    2de0:	bcc	2e08 <reflection_Schema_objects+0xb4>
    2de4:	ldrh	r3, [fp, #-8]
    2de8:	add	r3, r3, #2
    2dec:	lsl	r3, r3, #1
    2df0:	ldr	r2, [fp, #-12]
    2df4:	add	r3, r2, r3
    2df8:	mov	r0, r3
    2dfc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2e00:	mov	r3, r0
    2e04:	strh	r3, [fp, #-6]
    2e08:	ldrh	r3, [fp, #-6]
    2e0c:	cmp	r3, #0
    2e10:	beq	2e40 <reflection_Schema_objects+0xec>
    2e14:	ldrh	r3, [fp, #-6]
    2e18:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2e1c:	add	r3, r2, r3
    2e20:	str	r3, [fp, #-16]
    2e24:	ldr	r0, [fp, #-16]
    2e28:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    2e2c:	mov	r3, r0
    2e30:	add	r3, r3, #4
    2e34:	ldr	r2, [fp, #-16]
    2e38:	add	r3, r2, r3
    2e3c:	b	2e60 <reflection_Schema_objects+0x10c>
    2e40:	movw	r3, #0
    2e44:	movt	r3, #0
    2e48:	mov	r2, #237	; 0xed
    2e4c:	movw	r1, #0
    2e50:	movt	r1, #0
    2e54:	movw	r0, #0
    2e58:	movt	r0, #0
    2e5c:	bl	0 <__assert_fail>
    2e60:	mov	r0, r3
    2e64:	sub	sp, fp, #4
    2e68:	ldr	fp, [sp]
    2e6c:	add	sp, sp, #4
    2e70:	pop	{pc}		; (ldr pc, [sp], #4)

00002e74 <reflection_Schema_enums>:
    2e74:	str	fp, [sp, #-8]!
    2e78:	str	lr, [sp, #4]
    2e7c:	add	fp, sp, #4
    2e80:	sub	sp, sp, #24
    2e84:	str	r0, [fp, #-24]	; 0xffffffe8
    2e88:	mov	r3, #0
    2e8c:	strh	r3, [fp, #-6]
    2e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e94:	cmp	r3, #0
    2e98:	bne	2ebc <reflection_Schema_enums+0x48>
    2e9c:	movw	r3, #0
    2ea0:	movt	r3, #0
    2ea4:	mov	r2, #238	; 0xee
    2ea8:	movw	r1, #0
    2eac:	movt	r1, #0
    2eb0:	movw	r0, #0
    2eb4:	movt	r0, #0
    2eb8:	bl	0 <__assert_fail>
    2ebc:	mov	r3, #1
    2ec0:	strh	r3, [fp, #-8]
    2ec4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2ec8:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2ecc:	mov	r3, r0
    2ed0:	rsb	r3, r3, #0
    2ed4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2ed8:	add	r3, r2, r3
    2edc:	str	r3, [fp, #-12]
    2ee0:	ldr	r0, [fp, #-12]
    2ee4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2ee8:	mov	r3, r0
    2eec:	mov	r2, r3
    2ef0:	ldrh	r3, [fp, #-8]
    2ef4:	add	r3, r3, #3
    2ef8:	lsl	r3, r3, #1
    2efc:	cmp	r2, r3
    2f00:	bcc	2f28 <reflection_Schema_enums+0xb4>
    2f04:	ldrh	r3, [fp, #-8]
    2f08:	add	r3, r3, #2
    2f0c:	lsl	r3, r3, #1
    2f10:	ldr	r2, [fp, #-12]
    2f14:	add	r3, r2, r3
    2f18:	mov	r0, r3
    2f1c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    2f20:	mov	r3, r0
    2f24:	strh	r3, [fp, #-6]
    2f28:	ldrh	r3, [fp, #-6]
    2f2c:	cmp	r3, #0
    2f30:	beq	2f60 <reflection_Schema_enums+0xec>
    2f34:	ldrh	r3, [fp, #-6]
    2f38:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2f3c:	add	r3, r2, r3
    2f40:	str	r3, [fp, #-16]
    2f44:	ldr	r0, [fp, #-16]
    2f48:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    2f4c:	mov	r3, r0
    2f50:	add	r3, r3, #4
    2f54:	ldr	r2, [fp, #-16]
    2f58:	add	r3, r2, r3
    2f5c:	b	2f80 <reflection_Schema_enums+0x10c>
    2f60:	movw	r3, #0
    2f64:	movt	r3, #0
    2f68:	mov	r2, #238	; 0xee
    2f6c:	movw	r1, #0
    2f70:	movt	r1, #0
    2f74:	movw	r0, #0
    2f78:	movt	r0, #0
    2f7c:	bl	0 <__assert_fail>
    2f80:	mov	r0, r3
    2f84:	sub	sp, fp, #4
    2f88:	ldr	fp, [sp]
    2f8c:	add	sp, sp, #4
    2f90:	pop	{pc}		; (ldr pc, [sp], #4)

00002f94 <reflection_Schema_file_ident>:
    2f94:	str	fp, [sp, #-8]!
    2f98:	str	lr, [sp, #4]
    2f9c:	add	fp, sp, #4
    2fa0:	sub	sp, sp, #24
    2fa4:	str	r0, [fp, #-24]	; 0xffffffe8
    2fa8:	mov	r3, #0
    2fac:	strh	r3, [fp, #-6]
    2fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fb4:	cmp	r3, #0
    2fb8:	bne	2fdc <reflection_Schema_file_ident+0x48>
    2fbc:	movw	r3, #0
    2fc0:	movt	r3, #0
    2fc4:	mov	r2, #239	; 0xef
    2fc8:	movw	r1, #0
    2fcc:	movt	r1, #0
    2fd0:	movw	r0, #0
    2fd4:	movt	r0, #0
    2fd8:	bl	0 <__assert_fail>
    2fdc:	mov	r3, #2
    2fe0:	strh	r3, [fp, #-8]
    2fe4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2fe8:	bl	460 <__flatbuffers_soffset_read_from_pe>
    2fec:	mov	r3, r0
    2ff0:	rsb	r3, r3, #0
    2ff4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2ff8:	add	r3, r2, r3
    2ffc:	str	r3, [fp, #-12]
    3000:	ldr	r0, [fp, #-12]
    3004:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    3008:	mov	r3, r0
    300c:	mov	r2, r3
    3010:	ldrh	r3, [fp, #-8]
    3014:	add	r3, r3, #3
    3018:	lsl	r3, r3, #1
    301c:	cmp	r2, r3
    3020:	bcc	3048 <reflection_Schema_file_ident+0xb4>
    3024:	ldrh	r3, [fp, #-8]
    3028:	add	r3, r3, #2
    302c:	lsl	r3, r3, #1
    3030:	ldr	r2, [fp, #-12]
    3034:	add	r3, r2, r3
    3038:	mov	r0, r3
    303c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    3040:	mov	r3, r0
    3044:	strh	r3, [fp, #-6]
    3048:	ldrh	r3, [fp, #-6]
    304c:	cmp	r3, #0
    3050:	beq	3080 <reflection_Schema_file_ident+0xec>
    3054:	ldrh	r3, [fp, #-6]
    3058:	ldr	r2, [fp, #-24]	; 0xffffffe8
    305c:	add	r3, r2, r3
    3060:	str	r3, [fp, #-16]
    3064:	ldr	r0, [fp, #-16]
    3068:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    306c:	mov	r3, r0
    3070:	add	r3, r3, #4
    3074:	ldr	r2, [fp, #-16]
    3078:	add	r3, r2, r3
    307c:	b	3084 <reflection_Schema_file_ident+0xf0>
    3080:	mov	r3, #0
    3084:	mov	r0, r3
    3088:	sub	sp, fp, #4
    308c:	ldr	fp, [sp]
    3090:	add	sp, sp, #4
    3094:	pop	{pc}		; (ldr pc, [sp], #4)

00003098 <reflection_Schema_file_ident_is_present>:
    3098:	str	fp, [sp, #-8]!
    309c:	str	lr, [sp, #4]
    30a0:	add	fp, sp, #4
    30a4:	sub	sp, sp, #16
    30a8:	str	r0, [fp, #-16]
    30ac:	mov	r3, #0
    30b0:	strh	r3, [fp, #-6]
    30b4:	ldr	r3, [fp, #-16]
    30b8:	cmp	r3, #0
    30bc:	bne	30e0 <reflection_Schema_file_ident_is_present+0x48>
    30c0:	movw	r3, #0
    30c4:	movt	r3, #0
    30c8:	mov	r2, #239	; 0xef
    30cc:	movw	r1, #0
    30d0:	movt	r1, #0
    30d4:	movw	r0, #0
    30d8:	movt	r0, #0
    30dc:	bl	0 <__assert_fail>
    30e0:	mov	r3, #2
    30e4:	strh	r3, [fp, #-8]
    30e8:	ldr	r0, [fp, #-16]
    30ec:	bl	460 <__flatbuffers_soffset_read_from_pe>
    30f0:	mov	r3, r0
    30f4:	rsb	r3, r3, #0
    30f8:	ldr	r2, [fp, #-16]
    30fc:	add	r3, r2, r3
    3100:	str	r3, [fp, #-12]
    3104:	ldr	r0, [fp, #-12]
    3108:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    310c:	mov	r3, r0
    3110:	mov	r2, r3
    3114:	ldrh	r3, [fp, #-8]
    3118:	add	r3, r3, #3
    311c:	lsl	r3, r3, #1
    3120:	cmp	r2, r3
    3124:	bcc	314c <reflection_Schema_file_ident_is_present+0xb4>
    3128:	ldrh	r3, [fp, #-8]
    312c:	add	r3, r3, #2
    3130:	lsl	r3, r3, #1
    3134:	ldr	r2, [fp, #-12]
    3138:	add	r3, r2, r3
    313c:	mov	r0, r3
    3140:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    3144:	mov	r3, r0
    3148:	strh	r3, [fp, #-6]
    314c:	ldrh	r3, [fp, #-6]
    3150:	cmp	r3, #0
    3154:	movne	r3, #1
    3158:	moveq	r3, #0
    315c:	uxtb	r3, r3
    3160:	mov	r0, r3
    3164:	sub	sp, fp, #4
    3168:	ldr	fp, [sp]
    316c:	add	sp, sp, #4
    3170:	pop	{pc}		; (ldr pc, [sp], #4)

00003174 <reflection_Schema_file_ext>:
    3174:	str	fp, [sp, #-8]!
    3178:	str	lr, [sp, #4]
    317c:	add	fp, sp, #4
    3180:	sub	sp, sp, #24
    3184:	str	r0, [fp, #-24]	; 0xffffffe8
    3188:	mov	r3, #0
    318c:	strh	r3, [fp, #-6]
    3190:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3194:	cmp	r3, #0
    3198:	bne	31bc <reflection_Schema_file_ext+0x48>
    319c:	movw	r3, #0
    31a0:	movt	r3, #0
    31a4:	mov	r2, #240	; 0xf0
    31a8:	movw	r1, #0
    31ac:	movt	r1, #0
    31b0:	movw	r0, #0
    31b4:	movt	r0, #0
    31b8:	bl	0 <__assert_fail>
    31bc:	mov	r3, #3
    31c0:	strh	r3, [fp, #-8]
    31c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    31c8:	bl	460 <__flatbuffers_soffset_read_from_pe>
    31cc:	mov	r3, r0
    31d0:	rsb	r3, r3, #0
    31d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    31d8:	add	r3, r2, r3
    31dc:	str	r3, [fp, #-12]
    31e0:	ldr	r0, [fp, #-12]
    31e4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    31e8:	mov	r3, r0
    31ec:	mov	r2, r3
    31f0:	ldrh	r3, [fp, #-8]
    31f4:	add	r3, r3, #3
    31f8:	lsl	r3, r3, #1
    31fc:	cmp	r2, r3
    3200:	bcc	3228 <reflection_Schema_file_ext+0xb4>
    3204:	ldrh	r3, [fp, #-8]
    3208:	add	r3, r3, #2
    320c:	lsl	r3, r3, #1
    3210:	ldr	r2, [fp, #-12]
    3214:	add	r3, r2, r3
    3218:	mov	r0, r3
    321c:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    3220:	mov	r3, r0
    3224:	strh	r3, [fp, #-6]
    3228:	ldrh	r3, [fp, #-6]
    322c:	cmp	r3, #0
    3230:	beq	3260 <reflection_Schema_file_ext+0xec>
    3234:	ldrh	r3, [fp, #-6]
    3238:	ldr	r2, [fp, #-24]	; 0xffffffe8
    323c:	add	r3, r2, r3
    3240:	str	r3, [fp, #-16]
    3244:	ldr	r0, [fp, #-16]
    3248:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    324c:	mov	r3, r0
    3250:	add	r3, r3, #4
    3254:	ldr	r2, [fp, #-16]
    3258:	add	r3, r2, r3
    325c:	b	3264 <reflection_Schema_file_ext+0xf0>
    3260:	mov	r3, #0
    3264:	mov	r0, r3
    3268:	sub	sp, fp, #4
    326c:	ldr	fp, [sp]
    3270:	add	sp, sp, #4
    3274:	pop	{pc}		; (ldr pc, [sp], #4)

00003278 <reflection_Schema_file_ext_is_present>:
    3278:	str	fp, [sp, #-8]!
    327c:	str	lr, [sp, #4]
    3280:	add	fp, sp, #4
    3284:	sub	sp, sp, #16
    3288:	str	r0, [fp, #-16]
    328c:	mov	r3, #0
    3290:	strh	r3, [fp, #-6]
    3294:	ldr	r3, [fp, #-16]
    3298:	cmp	r3, #0
    329c:	bne	32c0 <reflection_Schema_file_ext_is_present+0x48>
    32a0:	movw	r3, #0
    32a4:	movt	r3, #0
    32a8:	mov	r2, #240	; 0xf0
    32ac:	movw	r1, #0
    32b0:	movt	r1, #0
    32b4:	movw	r0, #0
    32b8:	movt	r0, #0
    32bc:	bl	0 <__assert_fail>
    32c0:	mov	r3, #3
    32c4:	strh	r3, [fp, #-8]
    32c8:	ldr	r0, [fp, #-16]
    32cc:	bl	460 <__flatbuffers_soffset_read_from_pe>
    32d0:	mov	r3, r0
    32d4:	rsb	r3, r3, #0
    32d8:	ldr	r2, [fp, #-16]
    32dc:	add	r3, r2, r3
    32e0:	str	r3, [fp, #-12]
    32e4:	ldr	r0, [fp, #-12]
    32e8:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    32ec:	mov	r3, r0
    32f0:	mov	r2, r3
    32f4:	ldrh	r3, [fp, #-8]
    32f8:	add	r3, r3, #3
    32fc:	lsl	r3, r3, #1
    3300:	cmp	r2, r3
    3304:	bcc	332c <reflection_Schema_file_ext_is_present+0xb4>
    3308:	ldrh	r3, [fp, #-8]
    330c:	add	r3, r3, #2
    3310:	lsl	r3, r3, #1
    3314:	ldr	r2, [fp, #-12]
    3318:	add	r3, r2, r3
    331c:	mov	r0, r3
    3320:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    3324:	mov	r3, r0
    3328:	strh	r3, [fp, #-6]
    332c:	ldrh	r3, [fp, #-6]
    3330:	cmp	r3, #0
    3334:	movne	r3, #1
    3338:	moveq	r3, #0
    333c:	uxtb	r3, r3
    3340:	mov	r0, r3
    3344:	sub	sp, fp, #4
    3348:	ldr	fp, [sp]
    334c:	add	sp, sp, #4
    3350:	pop	{pc}		; (ldr pc, [sp], #4)

00003354 <reflection_Schema_root_table>:
    3354:	str	fp, [sp, #-8]!
    3358:	str	lr, [sp, #4]
    335c:	add	fp, sp, #4
    3360:	sub	sp, sp, #24
    3364:	str	r0, [fp, #-24]	; 0xffffffe8
    3368:	mov	r3, #0
    336c:	strh	r3, [fp, #-6]
    3370:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3374:	cmp	r3, #0
    3378:	bne	339c <reflection_Schema_root_table+0x48>
    337c:	movw	r3, #0
    3380:	movt	r3, #0
    3384:	mov	r2, #241	; 0xf1
    3388:	movw	r1, #0
    338c:	movt	r1, #0
    3390:	movw	r0, #0
    3394:	movt	r0, #0
    3398:	bl	0 <__assert_fail>
    339c:	mov	r3, #4
    33a0:	strh	r3, [fp, #-8]
    33a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    33a8:	bl	460 <__flatbuffers_soffset_read_from_pe>
    33ac:	mov	r3, r0
    33b0:	rsb	r3, r3, #0
    33b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    33b8:	add	r3, r2, r3
    33bc:	str	r3, [fp, #-12]
    33c0:	ldr	r0, [fp, #-12]
    33c4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    33c8:	mov	r3, r0
    33cc:	mov	r2, r3
    33d0:	ldrh	r3, [fp, #-8]
    33d4:	add	r3, r3, #3
    33d8:	lsl	r3, r3, #1
    33dc:	cmp	r2, r3
    33e0:	bcc	3408 <reflection_Schema_root_table+0xb4>
    33e4:	ldrh	r3, [fp, #-8]
    33e8:	add	r3, r3, #2
    33ec:	lsl	r3, r3, #1
    33f0:	ldr	r2, [fp, #-12]
    33f4:	add	r3, r2, r3
    33f8:	mov	r0, r3
    33fc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    3400:	mov	r3, r0
    3404:	strh	r3, [fp, #-6]
    3408:	ldrh	r3, [fp, #-6]
    340c:	cmp	r3, #0
    3410:	beq	343c <reflection_Schema_root_table+0xe8>
    3414:	ldrh	r3, [fp, #-6]
    3418:	ldr	r2, [fp, #-24]	; 0xffffffe8
    341c:	add	r3, r2, r3
    3420:	str	r3, [fp, #-16]
    3424:	ldr	r0, [fp, #-16]
    3428:	bl	400 <__flatbuffers_uoffset_read_from_pe>
    342c:	mov	r2, r0
    3430:	ldr	r3, [fp, #-16]
    3434:	add	r3, r3, r2
    3438:	b	3440 <reflection_Schema_root_table+0xec>
    343c:	mov	r3, #0
    3440:	mov	r0, r3
    3444:	sub	sp, fp, #4
    3448:	ldr	fp, [sp]
    344c:	add	sp, sp, #4
    3450:	pop	{pc}		; (ldr pc, [sp], #4)

00003454 <reflection_Schema_root_table_is_present>:
    3454:	str	fp, [sp, #-8]!
    3458:	str	lr, [sp, #4]
    345c:	add	fp, sp, #4
    3460:	sub	sp, sp, #16
    3464:	str	r0, [fp, #-16]
    3468:	mov	r3, #0
    346c:	strh	r3, [fp, #-6]
    3470:	ldr	r3, [fp, #-16]
    3474:	cmp	r3, #0
    3478:	bne	349c <reflection_Schema_root_table_is_present+0x48>
    347c:	movw	r3, #0
    3480:	movt	r3, #0
    3484:	mov	r2, #241	; 0xf1
    3488:	movw	r1, #0
    348c:	movt	r1, #0
    3490:	movw	r0, #0
    3494:	movt	r0, #0
    3498:	bl	0 <__assert_fail>
    349c:	mov	r3, #4
    34a0:	strh	r3, [fp, #-8]
    34a4:	ldr	r0, [fp, #-16]
    34a8:	bl	460 <__flatbuffers_soffset_read_from_pe>
    34ac:	mov	r3, r0
    34b0:	rsb	r3, r3, #0
    34b4:	ldr	r2, [fp, #-16]
    34b8:	add	r3, r2, r3
    34bc:	str	r3, [fp, #-12]
    34c0:	ldr	r0, [fp, #-12]
    34c4:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    34c8:	mov	r3, r0
    34cc:	mov	r2, r3
    34d0:	ldrh	r3, [fp, #-8]
    34d4:	add	r3, r3, #3
    34d8:	lsl	r3, r3, #1
    34dc:	cmp	r2, r3
    34e0:	bcc	3508 <reflection_Schema_root_table_is_present+0xb4>
    34e4:	ldrh	r3, [fp, #-8]
    34e8:	add	r3, r3, #2
    34ec:	lsl	r3, r3, #1
    34f0:	ldr	r2, [fp, #-12]
    34f4:	add	r3, r2, r3
    34f8:	mov	r0, r3
    34fc:	bl	4c4 <__flatbuffers_voffset_read_from_pe>
    3500:	mov	r3, r0
    3504:	strh	r3, [fp, #-6]
    3508:	ldrh	r3, [fp, #-6]
    350c:	cmp	r3, #0
    3510:	movne	r3, #1
    3514:	moveq	r3, #0
    3518:	uxtb	r3, r3
    351c:	mov	r0, r3
    3520:	sub	sp, fp, #4
    3524:	ldr	fp, [sp]
    3528:	add	sp, sp, #4
    352c:	pop	{pc}		; (ldr pc, [sp], #4)

00003530 <print_type>:
    3530:	str	fp, [sp, #-8]!
    3534:	str	lr, [sp, #4]
    3538:	add	fp, sp, #4
    353c:	sub	sp, sp, #16
    3540:	str	r0, [fp, #-16]
    3544:	mov	r3, #1
    3548:	str	r3, [fp, #-8]
    354c:	mov	r0, #123	; 0x7b
    3550:	bl	0 <putchar>
    3554:	ldr	r0, [fp, #-16]
    3558:	bl	924 <reflection_Type_base_type_is_present>
    355c:	mov	r3, r0
    3560:	cmp	r3, #0
    3564:	beq	35ac <print_type+0x7c>
    3568:	ldr	r3, [fp, #-8]
    356c:	cmp	r3, #0
    3570:	bne	357c <print_type+0x4c>
    3574:	mov	r0, #44	; 0x2c
    3578:	bl	0 <putchar>
    357c:	ldr	r0, [fp, #-16]
    3580:	bl	830 <reflection_Type_base_type>
    3584:	mov	r3, r0
    3588:	mov	r0, r3
    358c:	bl	6e4 <reflection_BaseType_name>
    3590:	mov	r3, r0
    3594:	mov	r1, r3
    3598:	movw	r0, #0
    359c:	movt	r0, #0
    35a0:	bl	0 <printf>
    35a4:	mov	r3, #0
    35a8:	str	r3, [fp, #-8]
    35ac:	ldr	r0, [fp, #-16]
    35b0:	bl	a00 <reflection_Type_element_is_present>
    35b4:	mov	r3, r0
    35b8:	cmp	r3, #0
    35bc:	beq	3604 <print_type+0xd4>
    35c0:	ldr	r3, [fp, #-8]
    35c4:	cmp	r3, #0
    35c8:	bne	35d4 <print_type+0xa4>
    35cc:	mov	r0, #44	; 0x2c
    35d0:	bl	0 <putchar>
    35d4:	ldr	r0, [fp, #-16]
    35d8:	bl	830 <reflection_Type_base_type>
    35dc:	mov	r3, r0
    35e0:	mov	r0, r3
    35e4:	bl	6e4 <reflection_BaseType_name>
    35e8:	mov	r3, r0
    35ec:	mov	r1, r3
    35f0:	movw	r0, #0
    35f4:	movt	r0, #0
    35f8:	bl	0 <printf>
    35fc:	mov	r3, #0
    3600:	str	r3, [fp, #-8]
    3604:	ldr	r0, [fp, #-16]
    3608:	bl	bd0 <reflection_Type_index_is_present>
    360c:	mov	r3, r0
    3610:	cmp	r3, #0
    3614:	beq	3650 <print_type+0x120>
    3618:	ldr	r3, [fp, #-8]
    361c:	cmp	r3, #0
    3620:	bne	362c <print_type+0xfc>
    3624:	mov	r0, #44	; 0x2c
    3628:	bl	0 <putchar>
    362c:	ldr	r0, [fp, #-16]
    3630:	bl	adc <reflection_Type_index>
    3634:	mov	r3, r0
    3638:	mov	r1, r3
    363c:	movw	r0, #0
    3640:	movt	r0, #0
    3644:	bl	0 <printf>
    3648:	mov	r3, #0
    364c:	str	r3, [fp, #-8]
    3650:	mov	r0, #125	; 0x7d
    3654:	bl	0 <putchar>
    3658:	nop	{0}
    365c:	sub	sp, fp, #4
    3660:	ldr	fp, [sp]
    3664:	add	sp, sp, #4
    3668:	pop	{pc}		; (ldr pc, [sp], #4)

0000366c <print_object>:
    366c:	str	fp, [sp, #-8]!
    3670:	str	lr, [sp, #4]
    3674:	add	fp, sp, #4
    3678:	sub	sp, sp, #24
    367c:	str	r0, [fp, #-24]	; 0xffffffe8
    3680:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3684:	bl	2650 <reflection_Object_fields>
    3688:	str	r0, [fp, #-12]
    368c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3690:	bl	2530 <reflection_Object_name>
    3694:	mov	r3, r0
    3698:	mov	r1, r3
    369c:	movw	r0, #0
    36a0:	movt	r0, #0
    36a4:	bl	0 <printf>
    36a8:	movw	r0, #0
    36ac:	movt	r0, #0
    36b0:	bl	0 <printf>
    36b4:	mov	r3, #0
    36b8:	str	r3, [fp, #-8]
    36bc:	b	384c <print_object+0x1e0>
    36c0:	ldr	r3, [fp, #-8]
    36c4:	cmp	r3, #0
    36c8:	beq	36d4 <print_object+0x68>
    36cc:	mov	r0, #44	; 0x2c
    36d0:	bl	0 <putchar>
    36d4:	ldr	r1, [fp, #-8]
    36d8:	ldr	r0, [fp, #-12]
    36dc:	bl	1868 <reflection_Field_vec_at>
    36e0:	str	r0, [fp, #-16]
    36e4:	ldr	r0, [fp, #-16]
    36e8:	bl	18f4 <reflection_Field_name>
    36ec:	mov	r3, r0
    36f0:	mov	r1, r3
    36f4:	movw	r0, #0
    36f8:	movt	r0, #0
    36fc:	bl	0 <printf>
    3700:	ldr	r0, [fp, #-16]
    3704:	bl	1a14 <reflection_Field_type>
    3708:	mov	r3, r0
    370c:	mov	r0, r3
    3710:	bl	3530 <print_type>
    3714:	ldr	r0, [fp, #-16]
    3718:	bl	1c24 <reflection_Field_id_is_present>
    371c:	mov	r3, r0
    3720:	cmp	r3, #0
    3724:	beq	3744 <print_object+0xd8>
    3728:	ldr	r0, [fp, #-16]
    372c:	bl	1b30 <reflection_Field_id>
    3730:	mov	r3, r0
    3734:	mov	r1, r3
    3738:	movw	r0, #0
    373c:	movt	r0, #0
    3740:	bl	0 <printf>
    3744:	ldr	r0, [fp, #-16]
    3748:	bl	1e00 <reflection_Field_default_integer_is_present>
    374c:	mov	r3, r0
    3750:	cmp	r3, #0
    3754:	beq	3774 <print_object+0x108>
    3758:	ldr	r0, [fp, #-16]
    375c:	bl	1d00 <reflection_Field_default_integer>
    3760:	mov	r2, r0
    3764:	mov	r3, r1
    3768:	movw	r0, #0
    376c:	movt	r0, #0
    3770:	bl	0 <printf>
    3774:	ldr	r0, [fp, #-16]
    3778:	bl	1fd8 <reflection_Field_default_real_is_present>
    377c:	mov	r3, r0
    3780:	cmp	r3, #0
    3784:	beq	37a0 <print_object+0x134>
    3788:	ldr	r0, [fp, #-16]
    378c:	bl	1edc <reflection_Field_default_real>
    3790:	vmov	r2, r3, d0
    3794:	movw	r0, #0
    3798:	movt	r0, #0
    379c:	bl	0 <printf>
    37a0:	ldr	r0, [fp, #-16]
    37a4:	bl	21a8 <reflection_Field_required_is_present>
    37a8:	mov	r3, r0
    37ac:	cmp	r3, #0
    37b0:	beq	37ec <print_object+0x180>
    37b4:	ldr	r0, [fp, #-16]
    37b8:	bl	20b4 <reflection_Field_required>
    37bc:	mov	r3, r0
    37c0:	cmp	r3, #0
    37c4:	beq	37d4 <print_object+0x168>
    37c8:	movw	r3, #0
    37cc:	movt	r3, #0
    37d0:	b	37dc <print_object+0x170>
    37d4:	movw	r3, #0
    37d8:	movt	r3, #0
    37dc:	mov	r1, r3
    37e0:	movw	r0, #0
    37e4:	movt	r0, #0
    37e8:	bl	0 <printf>
    37ec:	ldr	r0, [fp, #-16]
    37f0:	bl	2378 <reflection_Field_key_is_present>
    37f4:	mov	r3, r0
    37f8:	cmp	r3, #0
    37fc:	beq	3838 <print_object+0x1cc>
    3800:	ldr	r0, [fp, #-16]
    3804:	bl	2284 <reflection_Field_key>
    3808:	mov	r3, r0
    380c:	cmp	r3, #0
    3810:	beq	3820 <print_object+0x1b4>
    3814:	movw	r3, #0
    3818:	movt	r3, #0
    381c:	b	3828 <print_object+0x1bc>
    3820:	movw	r3, #0
    3824:	movt	r3, #0
    3828:	mov	r1, r3
    382c:	movw	r0, #0
    3830:	movt	r0, #0
    3834:	bl	0 <printf>
    3838:	mov	r0, #125	; 0x7d
    383c:	bl	0 <putchar>
    3840:	ldr	r3, [fp, #-8]
    3844:	add	r3, r3, #1
    3848:	str	r3, [fp, #-8]
    384c:	ldr	r0, [fp, #-12]
    3850:	bl	1818 <reflection_Field_vec_len>
    3854:	mov	r2, r0
    3858:	ldr	r3, [fp, #-8]
    385c:	cmp	r3, r2
    3860:	bcc	36c0 <print_object+0x54>
    3864:	mov	r0, #93	; 0x5d
    3868:	bl	0 <putchar>
    386c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3870:	bl	2864 <reflection_Object_is_struct_is_present>
    3874:	mov	r3, r0
    3878:	cmp	r3, #0
    387c:	beq	38b8 <print_object+0x24c>
    3880:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3884:	bl	2770 <reflection_Object_is_struct>
    3888:	mov	r3, r0
    388c:	cmp	r3, #0
    3890:	beq	38a0 <print_object+0x234>
    3894:	movw	r3, #0
    3898:	movt	r3, #0
    389c:	b	38a8 <print_object+0x23c>
    38a0:	movw	r3, #0
    38a4:	movt	r3, #0
    38a8:	mov	r1, r3
    38ac:	movw	r0, #0
    38b0:	movt	r0, #0
    38b4:	bl	0 <printf>
    38b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    38bc:	bl	2a34 <reflection_Object_minalign_is_present>
    38c0:	mov	r3, r0
    38c4:	cmp	r3, #0
    38c8:	beq	38e8 <print_object+0x27c>
    38cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    38d0:	bl	2940 <reflection_Object_minalign>
    38d4:	mov	r3, r0
    38d8:	mov	r1, r3
    38dc:	movw	r0, #0
    38e0:	movt	r0, #0
    38e4:	bl	0 <printf>
    38e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    38ec:	bl	2c04 <reflection_Object_bytesize_is_present>
    38f0:	mov	r3, r0
    38f4:	cmp	r3, #0
    38f8:	beq	3918 <print_object+0x2ac>
    38fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3900:	bl	2b10 <reflection_Object_bytesize>
    3904:	mov	r3, r0
    3908:	mov	r1, r3
    390c:	movw	r0, #0
    3910:	movt	r0, #0
    3914:	bl	0 <printf>
    3918:	mov	r0, #125	; 0x7d
    391c:	bl	0 <putchar>
    3920:	nop	{0}
    3924:	sub	sp, fp, #4
    3928:	ldr	fp, [sp]
    392c:	add	sp, sp, #4
    3930:	pop	{pc}		; (ldr pc, [sp], #4)

00003934 <print_enum>:
    3934:	str	fp, [sp, #-8]!
    3938:	str	lr, [sp, #4]
    393c:	add	fp, sp, #4
    3940:	sub	sp, sp, #24
    3944:	str	r0, [fp, #-24]	; 0xffffffe8
    3948:	ldr	r0, [fp, #-24]	; 0xffffffe8
    394c:	bl	12ec <reflection_Enum_name>
    3950:	mov	r3, r0
    3954:	mov	r1, r3
    3958:	movw	r0, #0
    395c:	movt	r0, #0
    3960:	bl	0 <printf>
    3964:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3968:	bl	140c <reflection_Enum_values>
    396c:	str	r0, [fp, #-12]
    3970:	movw	r0, #0
    3974:	movt	r0, #0
    3978:	bl	0 <printf>
    397c:	mov	r3, #0
    3980:	str	r3, [fp, #-8]
    3984:	b	3a40 <print_enum+0x10c>
    3988:	ldr	r1, [fp, #-8]
    398c:	ldr	r0, [fp, #-12]
    3990:	bl	cac <reflection_EnumVal_vec_at>
    3994:	str	r0, [fp, #-16]
    3998:	ldr	r3, [fp, #-8]
    399c:	cmp	r3, #0
    39a0:	beq	39ac <print_enum+0x78>
    39a4:	mov	r0, #44	; 0x2c
    39a8:	bl	0 <putchar>
    39ac:	ldr	r0, [fp, #-16]
    39b0:	bl	d38 <reflection_EnumVal_name>
    39b4:	mov	r3, r0
    39b8:	mov	r1, r3
    39bc:	movw	r0, #0
    39c0:	movt	r0, #0
    39c4:	bl	0 <printf>
    39c8:	ldr	r0, [fp, #-16]
    39cc:	bl	f58 <reflection_EnumVal_value_is_present>
    39d0:	mov	r3, r0
    39d4:	cmp	r3, #0
    39d8:	beq	39f8 <print_enum+0xc4>
    39dc:	ldr	r0, [fp, #-16]
    39e0:	bl	e58 <reflection_EnumVal_value>
    39e4:	mov	r2, r0
    39e8:	mov	r3, r1
    39ec:	movw	r0, #0
    39f0:	movt	r0, #0
    39f4:	bl	0 <printf>
    39f8:	ldr	r0, [fp, #-16]
    39fc:	bl	1134 <reflection_EnumVal_object_is_present>
    3a00:	mov	r3, r0
    3a04:	cmp	r3, #0
    3a08:	beq	3a2c <print_enum+0xf8>
    3a0c:	movw	r0, #0
    3a10:	movt	r0, #0
    3a14:	bl	0 <printf>
    3a18:	ldr	r0, [fp, #-16]
    3a1c:	bl	1034 <reflection_EnumVal_object>
    3a20:	mov	r3, r0
    3a24:	mov	r0, r3
    3a28:	bl	366c <print_object>
    3a2c:	mov	r0, #125	; 0x7d
    3a30:	bl	0 <putchar>
    3a34:	ldr	r3, [fp, #-8]
    3a38:	add	r3, r3, #1
    3a3c:	str	r3, [fp, #-8]
    3a40:	ldr	r0, [fp, #-12]
    3a44:	bl	1210 <reflection_Enum_vec_len>
    3a48:	mov	r2, r0
    3a4c:	ldr	r3, [fp, #-8]
    3a50:	cmp	r3, r2
    3a54:	bcc	3988 <print_enum+0x54>
    3a58:	mov	r0, #93	; 0x5d
    3a5c:	bl	0 <putchar>
    3a60:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3a64:	bl	1620 <reflection_Enum_is_union_is_present>
    3a68:	mov	r3, r0
    3a6c:	cmp	r3, #0
    3a70:	beq	3aac <print_enum+0x178>
    3a74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3a78:	bl	152c <reflection_Enum_is_union>
    3a7c:	mov	r3, r0
    3a80:	cmp	r3, #0
    3a84:	beq	3a94 <print_enum+0x160>
    3a88:	movw	r3, #0
    3a8c:	movt	r3, #0
    3a90:	b	3a9c <print_enum+0x168>
    3a94:	movw	r3, #0
    3a98:	movt	r3, #0
    3a9c:	mov	r1, r3
    3aa0:	movw	r0, #0
    3aa4:	movt	r0, #0
    3aa8:	bl	0 <printf>
    3aac:	movw	r0, #0
    3ab0:	movt	r0, #0
    3ab4:	bl	0 <printf>
    3ab8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3abc:	bl	16fc <reflection_Enum_underlying_type>
    3ac0:	mov	r3, r0
    3ac4:	mov	r0, r3
    3ac8:	bl	3530 <print_type>
    3acc:	mov	r0, #125	; 0x7d
    3ad0:	bl	0 <putchar>
    3ad4:	nop	{0}
    3ad8:	sub	sp, fp, #4
    3adc:	ldr	fp, [sp]
    3ae0:	add	sp, sp, #4
    3ae4:	pop	{pc}		; (ldr pc, [sp], #4)

00003ae8 <print_schema>:
    3ae8:	str	fp, [sp, #-8]!
    3aec:	str	lr, [sp, #4]
    3af0:	add	fp, sp, #4
    3af4:	sub	sp, sp, #24
    3af8:	str	r0, [fp, #-24]	; 0xffffffe8
    3afc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3b00:	bl	2d54 <reflection_Schema_objects>
    3b04:	str	r0, [fp, #-12]
    3b08:	mov	r0, #123	; 0x7b
    3b0c:	bl	0 <putchar>
    3b10:	movw	r0, #0
    3b14:	movt	r0, #0
    3b18:	bl	0 <printf>
    3b1c:	mov	r3, #0
    3b20:	str	r3, [fp, #-8]
    3b24:	b	3b60 <print_schema+0x78>
    3b28:	ldr	r3, [fp, #-8]
    3b2c:	cmp	r3, #0
    3b30:	beq	3b3c <print_schema+0x54>
    3b34:	mov	r0, #44	; 0x2c
    3b38:	bl	0 <putchar>
    3b3c:	ldr	r1, [fp, #-8]
    3b40:	ldr	r0, [fp, #-12]
    3b44:	bl	24a4 <reflection_Object_vec_at>
    3b48:	mov	r3, r0
    3b4c:	mov	r0, r3
    3b50:	bl	366c <print_object>
    3b54:	ldr	r3, [fp, #-8]
    3b58:	add	r3, r3, #1
    3b5c:	str	r3, [fp, #-8]
    3b60:	ldr	r0, [fp, #-12]
    3b64:	bl	2454 <reflection_Object_vec_len>
    3b68:	mov	r2, r0
    3b6c:	ldr	r3, [fp, #-8]
    3b70:	cmp	r3, r2
    3b74:	bcc	3b28 <print_schema+0x40>
    3b78:	mov	r0, #93	; 0x5d
    3b7c:	bl	0 <putchar>
    3b80:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3b84:	bl	2e74 <reflection_Schema_enums>
    3b88:	str	r0, [fp, #-16]
    3b8c:	movw	r0, #0
    3b90:	movt	r0, #0
    3b94:	bl	0 <printf>
    3b98:	mov	r3, #0
    3b9c:	str	r3, [fp, #-8]
    3ba0:	b	3bdc <print_schema+0xf4>
    3ba4:	ldr	r3, [fp, #-8]
    3ba8:	cmp	r3, #0
    3bac:	beq	3bb8 <print_schema+0xd0>
    3bb0:	mov	r0, #44	; 0x2c
    3bb4:	bl	0 <putchar>
    3bb8:	ldr	r1, [fp, #-8]
    3bbc:	ldr	r0, [fp, #-16]
    3bc0:	bl	1260 <reflection_Enum_vec_at>
    3bc4:	mov	r3, r0
    3bc8:	mov	r0, r3
    3bcc:	bl	3934 <print_enum>
    3bd0:	ldr	r3, [fp, #-8]
    3bd4:	add	r3, r3, #1
    3bd8:	str	r3, [fp, #-8]
    3bdc:	ldr	r0, [fp, #-16]
    3be0:	bl	1210 <reflection_Enum_vec_len>
    3be4:	mov	r2, r0
    3be8:	ldr	r3, [fp, #-8]
    3bec:	cmp	r3, r2
    3bf0:	bcc	3ba4 <print_schema+0xbc>
    3bf4:	mov	r0, #93	; 0x5d
    3bf8:	bl	0 <putchar>
    3bfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c00:	bl	3098 <reflection_Schema_file_ident_is_present>
    3c04:	mov	r3, r0
    3c08:	cmp	r3, #0
    3c0c:	beq	3c2c <print_schema+0x144>
    3c10:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c14:	bl	2f94 <reflection_Schema_file_ident>
    3c18:	mov	r3, r0
    3c1c:	mov	r1, r3
    3c20:	movw	r0, #0
    3c24:	movt	r0, #0
    3c28:	bl	0 <printf>
    3c2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c30:	bl	3278 <reflection_Schema_file_ext_is_present>
    3c34:	mov	r3, r0
    3c38:	cmp	r3, #0
    3c3c:	beq	3c5c <print_schema+0x174>
    3c40:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c44:	bl	3174 <reflection_Schema_file_ext>
    3c48:	mov	r3, r0
    3c4c:	mov	r1, r3
    3c50:	movw	r0, #0
    3c54:	movt	r0, #0
    3c58:	bl	0 <printf>
    3c5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c60:	bl	3454 <reflection_Schema_root_table_is_present>
    3c64:	mov	r3, r0
    3c68:	cmp	r3, #0
    3c6c:	beq	3c90 <print_schema+0x1a8>
    3c70:	movw	r0, #0
    3c74:	movt	r0, #0
    3c78:	bl	0 <printf>
    3c7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c80:	bl	3354 <reflection_Schema_root_table>
    3c84:	mov	r3, r0
    3c88:	mov	r0, r3
    3c8c:	bl	366c <print_object>
    3c90:	movw	r0, #0
    3c94:	movt	r0, #0
    3c98:	bl	0 <puts>
    3c9c:	nop	{0}
    3ca0:	sub	sp, fp, #4
    3ca4:	ldr	fp, [sp]
    3ca8:	add	sp, sp, #4
    3cac:	pop	{pc}		; (ldr pc, [sp], #4)

00003cb0 <load_and_dump_schema>:
    3cb0:	str	fp, [sp, #-8]!
    3cb4:	str	lr, [sp, #4]
    3cb8:	add	fp, sp, #4
    3cbc:	sub	sp, sp, #24
    3cc0:	str	r0, [fp, #-24]	; 0xffffffe8
    3cc4:	mvn	r3, #0
    3cc8:	str	r3, [fp, #-8]
    3ccc:	sub	r3, fp, #20
    3cd0:	mov	r2, r3
    3cd4:	movw	r1, #10000	; 0x2710
    3cd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3cdc:	bl	0 <readfile>
    3ce0:	str	r0, [fp, #-16]
    3ce4:	ldr	r3, [fp, #-16]
    3ce8:	cmp	r3, #0
    3cec:	bne	3d14 <load_and_dump_schema+0x64>
    3cf0:	movw	r3, #0
    3cf4:	movt	r3, #0
    3cf8:	ldr	r3, [r3]
    3cfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3d00:	movw	r1, #0
    3d04:	movt	r1, #0
    3d08:	mov	r0, r3
    3d0c:	bl	0 <fprintf>
    3d10:	b	3ddc <load_and_dump_schema+0x12c>
    3d14:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d18:	cmp	r3, #11
    3d1c:	bhi	3d44 <load_and_dump_schema+0x94>
    3d20:	movw	r3, #0
    3d24:	movt	r3, #0
    3d28:	ldr	r3, [r3]
    3d2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3d30:	movw	r1, #0
    3d34:	movt	r1, #0
    3d38:	mov	r0, r3
    3d3c:	bl	0 <fprintf>
    3d40:	b	3ddc <load_and_dump_schema+0x12c>
    3d44:	ldr	r0, [fp, #-16]
    3d48:	bl	2ce0 <reflection_Schema_as_root>
    3d4c:	str	r0, [fp, #-12]
    3d50:	ldr	r3, [fp, #-12]
    3d54:	cmp	r3, #0
    3d58:	bne	3d9c <load_and_dump_schema+0xec>
    3d5c:	ldr	r3, [fp, #-16]
    3d60:	add	r3, r3, #4
    3d64:	mov	r0, r3
    3d68:	bl	2ce0 <reflection_Schema_as_root>
    3d6c:	str	r0, [fp, #-12]
    3d70:	ldr	r3, [fp, #-12]
    3d74:	cmp	r3, #0
    3d78:	beq	3d9c <load_and_dump_schema+0xec>
    3d7c:	movw	r3, #0
    3d80:	movt	r3, #0
    3d84:	ldr	r3, [r3]
    3d88:	mov	r2, #40	; 0x28
    3d8c:	mov	r1, #1
    3d90:	movw	r0, #0
    3d94:	movt	r0, #0
    3d98:	bl	0 <fwrite>
    3d9c:	ldr	r3, [fp, #-12]
    3da0:	cmp	r3, #0
    3da4:	bne	3dcc <load_and_dump_schema+0x11c>
    3da8:	movw	r3, #0
    3dac:	movt	r3, #0
    3db0:	ldr	r3, [r3]
    3db4:	mov	r2, #27
    3db8:	mov	r1, #1
    3dbc:	movw	r0, #0
    3dc0:	movt	r0, #0
    3dc4:	bl	0 <fwrite>
    3dc8:	b	3ddc <load_and_dump_schema+0x12c>
    3dcc:	ldr	r0, [fp, #-12]
    3dd0:	bl	3ae8 <print_schema>
    3dd4:	mov	r3, #0
    3dd8:	str	r3, [fp, #-8]
    3ddc:	ldr	r3, [fp, #-16]
    3de0:	cmp	r3, #0
    3de4:	beq	3df0 <load_and_dump_schema+0x140>
    3de8:	ldr	r0, [fp, #-16]
    3dec:	bl	0 <free>
    3df0:	ldr	r3, [fp, #-8]
    3df4:	mov	r0, r3
    3df8:	sub	sp, fp, #4
    3dfc:	ldr	fp, [sp]
    3e00:	add	sp, sp, #4
    3e04:	pop	{pc}		; (ldr pc, [sp], #4)

00003e08 <main>:
    3e08:	str	fp, [sp, #-8]!
    3e0c:	str	lr, [sp, #4]
    3e10:	add	fp, sp, #4
    3e14:	sub	sp, sp, #8
    3e18:	str	r0, [fp, #-8]
    3e1c:	str	r1, [fp, #-12]
    3e20:	ldr	r3, [fp, #-8]
    3e24:	cmp	r3, #2
    3e28:	beq	3e94 <main+0x8c>
    3e2c:	movw	r3, #0
    3e30:	movt	r3, #0
    3e34:	ldr	r3, [r3]
    3e38:	mov	r2, #28
    3e3c:	mov	r1, #1
    3e40:	movw	r0, #0
    3e44:	movt	r0, #0
    3e48:	bl	0 <fwrite>
    3e4c:	movw	r3, #0
    3e50:	movt	r3, #0
    3e54:	ldr	r3, [r3]
    3e58:	mov	r2, #74	; 0x4a
    3e5c:	mov	r1, #1
    3e60:	movw	r0, #0
    3e64:	movt	r0, #0
    3e68:	bl	0 <fwrite>
    3e6c:	movw	r3, #0
    3e70:	movt	r3, #0
    3e74:	ldr	r3, [r3]
    3e78:	mov	r2, #180	; 0xb4
    3e7c:	mov	r1, #1
    3e80:	movw	r0, #0
    3e84:	movt	r0, #0
    3e88:	bl	0 <fwrite>
    3e8c:	mvn	r0, #0
    3e90:	bl	0 <exit>
    3e94:	ldr	r3, [fp, #-12]
    3e98:	add	r3, r3, #4
    3e9c:	ldr	r3, [r3]
    3ea0:	mov	r0, r3
    3ea4:	bl	3cb0 <load_and_dump_schema>
    3ea8:	mov	r3, r0
    3eac:	mov	r0, r3
    3eb0:	sub	sp, fp, #4
    3eb4:	ldr	fp, [sp]
    3eb8:	add	sp, sp, #4
    3ebc:	pop	{pc}		; (ldr pc, [sp], #4)
