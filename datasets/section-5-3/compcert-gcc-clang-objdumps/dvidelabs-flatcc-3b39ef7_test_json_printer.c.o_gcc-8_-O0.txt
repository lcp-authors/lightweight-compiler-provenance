
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/test_json_printer.dir/test_json_printer.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_json_printer_get_error>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	str	r0, [fp, #-8]
      10:	ldr	r3, [fp, #-8]
      14:	ldr	r3, [r3, #36]	; 0x24
      18:	mov	r0, r3
      1c:	add	sp, fp, #0
      20:	pop	{fp}		; (ldr fp, [sp], #4)
      24:	bx	lr

00000028 <flatcc_json_printer_set_unquoted>:
      28:	push	{fp}		; (str fp, [sp, #-4]!)
      2c:	add	fp, sp, #0
      30:	sub	sp, sp, #12
      34:	str	r0, [fp, #-8]
      38:	str	r1, [fp, #-12]
      3c:	ldr	r3, [fp, #-12]
      40:	cmp	r3, #0
      44:	movne	r3, #1
      48:	moveq	r3, #0
      4c:	uxtb	r3, r3
      50:	mov	r2, r3
      54:	ldr	r3, [fp, #-8]
      58:	strb	r2, [r3, #26]
      5c:	nop	{0}
      60:	add	sp, fp, #0
      64:	pop	{fp}		; (ldr fp, [sp], #4)
      68:	bx	lr

0000006c <flatcc_json_printer_set_noenum>:
      6c:	push	{fp}		; (str fp, [sp, #-4]!)
      70:	add	fp, sp, #0
      74:	sub	sp, sp, #12
      78:	str	r0, [fp, #-8]
      7c:	str	r1, [fp, #-12]
      80:	ldr	r3, [fp, #-12]
      84:	cmp	r3, #0
      88:	movne	r3, #1
      8c:	moveq	r3, #0
      90:	uxtb	r3, r3
      94:	mov	r2, r3
      98:	ldr	r3, [fp, #-8]
      9c:	strb	r2, [r3, #27]
      a0:	nop	{0}
      a4:	add	sp, fp, #0
      a8:	pop	{fp}		; (ldr fp, [sp], #4)
      ac:	bx	lr

000000b0 <flatcc_json_printer_set_indent>:
      b0:	push	{fp}		; (str fp, [sp, #-4]!)
      b4:	add	fp, sp, #0
      b8:	sub	sp, sp, #12
      bc:	str	r0, [fp, #-8]
      c0:	mov	r3, r1
      c4:	strb	r3, [fp, #-9]
      c8:	ldr	r3, [fp, #-8]
      cc:	ldrb	r2, [fp, #-9]
      d0:	strb	r2, [r3, #25]
      d4:	nop	{0}
      d8:	add	sp, fp, #0
      dc:	pop	{fp}		; (ldr fp, [sp], #4)
      e0:	bx	lr

000000e4 <flatcc_json_printer_set_nonstrict>:
      e4:	str	fp, [sp, #-8]!
      e8:	str	lr, [sp, #4]
      ec:	add	fp, sp, #4
      f0:	sub	sp, sp, #8
      f4:	str	r0, [fp, #-8]
      f8:	mov	r1, #2
      fc:	ldr	r0, [fp, #-8]
     100:	bl	b0 <flatcc_json_printer_set_indent>
     104:	mov	r1, #1
     108:	ldr	r0, [fp, #-8]
     10c:	bl	28 <flatcc_json_printer_set_unquoted>
     110:	mov	r1, #0
     114:	ldr	r0, [fp, #-8]
     118:	bl	6c <flatcc_json_printer_set_noenum>
     11c:	nop	{0}
     120:	sub	sp, fp, #4
     124:	ldr	fp, [sp]
     128:	add	sp, sp, #4
     12c:	pop	{pc}		; (ldr pc, [sp], #4)

00000130 <flatcc_json_printer_total>:
     130:	push	{fp}		; (str fp, [sp, #-4]!)
     134:	add	fp, sp, #0
     138:	sub	sp, sp, #12
     13c:	str	r0, [fp, #-8]
     140:	ldr	r3, [fp, #-8]
     144:	ldr	r3, [r3, #12]
     148:	ldr	r2, [fp, #-8]
     14c:	ldr	r1, [r2, #20]
     150:	ldr	r2, [fp, #-8]
     154:	ldr	r2, [r2]
     158:	sub	r2, r1, r2
     15c:	add	r3, r3, r2
     160:	mov	r0, r3
     164:	add	sp, fp, #0
     168:	pop	{fp}		; (ldr fp, [sp], #4)
     16c:	bx	lr

00000170 <flatcc_json_printer_flush>:
     170:	str	fp, [sp, #-8]!
     174:	str	lr, [sp, #4]
     178:	add	fp, sp, #4
     17c:	sub	sp, sp, #8
     180:	str	r0, [fp, #-8]
     184:	ldr	r3, [fp, #-8]
     188:	ldr	r3, [r3, #44]	; 0x2c
     18c:	mov	r1, #1
     190:	ldr	r0, [fp, #-8]
     194:	blx	r3
     198:	ldr	r0, [fp, #-8]
     19c:	bl	130 <flatcc_json_printer_total>
     1a0:	mov	r3, r0
     1a4:	mov	r0, r3
     1a8:	sub	sp, fp, #4
     1ac:	ldr	fp, [sp]
     1b0:	add	sp, sp, #4
     1b4:	pop	{pc}		; (ldr pc, [sp], #4)

000001b8 <MyGame_OtherNameSpace_FromInclude_print_json_enum>:
     1b8:	str	fp, [sp, #-8]!
     1bc:	str	lr, [sp, #4]
     1c0:	add	fp, sp, #4
     1c4:	sub	sp, sp, #16
     1c8:	str	r0, [fp, #-8]
     1cc:	strd	r2, [fp, #-20]	; 0xffffffec
     1d0:	ldrd	r2, [fp, #-20]	; 0xffffffec
     1d4:	orrs	r3, r2, r3
     1d8:	beq	1f0 <MyGame_OtherNameSpace_FromInclude_print_json_enum+0x38>
     1dc:	ldrd	r2, [fp, #-20]	; 0xffffffec
     1e0:	cmp	r3, #0
     1e4:	cmpeq	r2, #17
     1e8:	beq	208 <MyGame_OtherNameSpace_FromInclude_print_json_enum+0x50>
     1ec:	b	220 <MyGame_OtherNameSpace_FromInclude_print_json_enum+0x68>
     1f0:	mov	r2, #10
     1f4:	movw	r1, #0
     1f8:	movt	r1, #0
     1fc:	ldr	r0, [fp, #-8]
     200:	bl	0 <flatcc_json_printer_enum>
     204:	b	230 <MyGame_OtherNameSpace_FromInclude_print_json_enum+0x78>
     208:	mov	r2, #3
     20c:	movw	r1, #0
     210:	movt	r1, #0
     214:	ldr	r0, [fp, #-8]
     218:	bl	0 <flatcc_json_printer_enum>
     21c:	b	230 <MyGame_OtherNameSpace_FromInclude_print_json_enum+0x78>
     220:	ldrd	r2, [fp, #-20]	; 0xffffffec
     224:	ldr	r0, [fp, #-8]
     228:	bl	0 <flatcc_json_printer_int64>
     22c:	nop	{0}
     230:	nop	{0}
     234:	sub	sp, fp, #4
     238:	ldr	fp, [sp]
     23c:	add	sp, sp, #4
     240:	pop	{pc}		; (ldr pc, [sp], #4)

00000244 <MyGame_OtherNameSpace_Unused_print_json_struct>:
     244:	push	{fp}		; (str fp, [sp, #-4]!)
     248:	add	fp, sp, #0
     24c:	sub	sp, sp, #12
     250:	str	r0, [fp, #-8]
     254:	str	r1, [fp, #-12]
     258:	nop	{0}
     25c:	add	sp, fp, #0
     260:	pop	{fp}		; (ldr fp, [sp], #4)
     264:	bx	lr

00000268 <MyGame_Example_neg_enum_print_json_enum>:
     268:	str	fp, [sp, #-8]!
     26c:	str	lr, [sp, #4]
     270:	add	fp, sp, #4
     274:	sub	sp, sp, #8
     278:	str	r0, [fp, #-8]
     27c:	str	r1, [fp, #-12]
     280:	ldr	r3, [fp, #-12]
     284:	cmn	r3, #11
     288:	beq	2bc <MyGame_Example_neg_enum_print_json_enum+0x54>
     28c:	ldr	r3, [fp, #-12]
     290:	cmn	r3, #10
     294:	beq	2d4 <MyGame_Example_neg_enum_print_json_enum+0x6c>
     298:	ldr	r3, [fp, #-12]
     29c:	cmn	r3, #12
     2a0:	bne	2ec <MyGame_Example_neg_enum_print_json_enum+0x84>
     2a4:	mov	r2, #4
     2a8:	movw	r1, #0
     2ac:	movt	r1, #0
     2b0:	ldr	r0, [fp, #-8]
     2b4:	bl	0 <flatcc_json_printer_enum>
     2b8:	b	2fc <MyGame_Example_neg_enum_print_json_enum+0x94>
     2bc:	mov	r2, #4
     2c0:	movw	r1, #0
     2c4:	movt	r1, #0
     2c8:	ldr	r0, [fp, #-8]
     2cc:	bl	0 <flatcc_json_printer_enum>
     2d0:	b	2fc <MyGame_Example_neg_enum_print_json_enum+0x94>
     2d4:	mov	r2, #4
     2d8:	movw	r1, #0
     2dc:	movt	r1, #0
     2e0:	ldr	r0, [fp, #-8]
     2e4:	bl	0 <flatcc_json_printer_enum>
     2e8:	b	2fc <MyGame_Example_neg_enum_print_json_enum+0x94>
     2ec:	ldr	r1, [fp, #-12]
     2f0:	ldr	r0, [fp, #-8]
     2f4:	bl	0 <flatcc_json_printer_int32>
     2f8:	nop	{0}
     2fc:	nop	{0}
     300:	sub	sp, fp, #4
     304:	ldr	fp, [sp]
     308:	add	sp, sp, #4
     30c:	pop	{pc}		; (ldr pc, [sp], #4)

00000310 <MyGame_Example_int_enum_print_json_enum>:
     310:	str	fp, [sp, #-8]!
     314:	str	lr, [sp, #4]
     318:	add	fp, sp, #4
     31c:	sub	sp, sp, #8
     320:	str	r0, [fp, #-8]
     324:	str	r1, [fp, #-12]
     328:	ldr	r3, [fp, #-12]
     32c:	cmn	r3, #1
     330:	beq	384 <MyGame_Example_int_enum_print_json_enum+0x74>
     334:	ldr	r3, [fp, #-12]
     338:	cmp	r3, #0
     33c:	bge	350 <MyGame_Example_int_enum_print_json_enum+0x40>
     340:	ldr	r3, [fp, #-12]
     344:	cmn	r3, #2
     348:	beq	36c <MyGame_Example_int_enum_print_json_enum+0x5c>
     34c:	b	3cc <MyGame_Example_int_enum_print_json_enum+0xbc>
     350:	ldr	r3, [fp, #-12]
     354:	cmp	r3, #2
     358:	beq	39c <MyGame_Example_int_enum_print_json_enum+0x8c>
     35c:	ldr	r3, [fp, #-12]
     360:	cmp	r3, #42	; 0x2a
     364:	beq	3b4 <MyGame_Example_int_enum_print_json_enum+0xa4>
     368:	b	3cc <MyGame_Example_int_enum_print_json_enum+0xbc>
     36c:	mov	r2, #6
     370:	movw	r1, #0
     374:	movt	r1, #0
     378:	ldr	r0, [fp, #-8]
     37c:	bl	0 <flatcc_json_printer_enum>
     380:	b	3dc <MyGame_Example_int_enum_print_json_enum+0xcc>
     384:	mov	r2, #7
     388:	movw	r1, #0
     38c:	movt	r1, #0
     390:	ldr	r0, [fp, #-8]
     394:	bl	0 <flatcc_json_printer_enum>
     398:	b	3dc <MyGame_Example_int_enum_print_json_enum+0xcc>
     39c:	mov	r2, #4
     3a0:	movw	r1, #0
     3a4:	movt	r1, #0
     3a8:	ldr	r0, [fp, #-8]
     3ac:	bl	0 <flatcc_json_printer_enum>
     3b0:	b	3dc <MyGame_Example_int_enum_print_json_enum+0xcc>
     3b4:	mov	r2, #4
     3b8:	movw	r1, #0
     3bc:	movt	r1, #0
     3c0:	ldr	r0, [fp, #-8]
     3c4:	bl	0 <flatcc_json_printer_enum>
     3c8:	b	3dc <MyGame_Example_int_enum_print_json_enum+0xcc>
     3cc:	ldr	r1, [fp, #-12]
     3d0:	ldr	r0, [fp, #-8]
     3d4:	bl	0 <flatcc_json_printer_int32>
     3d8:	nop	{0}
     3dc:	nop	{0}
     3e0:	sub	sp, fp, #4
     3e4:	ldr	fp, [sp]
     3e8:	add	sp, sp, #4
     3ec:	pop	{pc}		; (ldr pc, [sp], #4)

000003f0 <MyGame_Example_hex_enum_print_json_enum>:
     3f0:	str	fp, [sp, #-8]!
     3f4:	str	lr, [sp, #4]
     3f8:	add	fp, sp, #4
     3fc:	sub	sp, sp, #8
     400:	str	r0, [fp, #-8]
     404:	str	r1, [fp, #-12]
     408:	ldr	r3, [fp, #-12]
     40c:	cmp	r3, #3
     410:	beq	44c <MyGame_Example_hex_enum_print_json_enum+0x5c>
     414:	ldr	r2, [fp, #-12]
     418:	movw	r3, #48815	; 0xbeaf
     41c:	movt	r3, #32431	; 0x7eaf
     420:	cmp	r2, r3
     424:	beq	464 <MyGame_Example_hex_enum_print_json_enum+0x74>
     428:	ldr	r3, [fp, #-12]
     42c:	cmn	r3, #2
     430:	bne	47c <MyGame_Example_hex_enum_print_json_enum+0x8c>
     434:	mov	r2, #6
     438:	movw	r1, #0
     43c:	movt	r1, #0
     440:	ldr	r0, [fp, #-8]
     444:	bl	0 <flatcc_json_printer_enum>
     448:	b	48c <MyGame_Example_hex_enum_print_json_enum+0x9c>
     44c:	mov	r2, #4
     450:	movw	r1, #0
     454:	movt	r1, #0
     458:	ldr	r0, [fp, #-8]
     45c:	bl	0 <flatcc_json_printer_enum>
     460:	b	48c <MyGame_Example_hex_enum_print_json_enum+0x9c>
     464:	mov	r2, #4
     468:	movw	r1, #0
     46c:	movt	r1, #0
     470:	ldr	r0, [fp, #-8]
     474:	bl	0 <flatcc_json_printer_enum>
     478:	b	48c <MyGame_Example_hex_enum_print_json_enum+0x9c>
     47c:	ldr	r1, [fp, #-12]
     480:	ldr	r0, [fp, #-8]
     484:	bl	0 <flatcc_json_printer_int32>
     488:	nop	{0}
     48c:	nop	{0}
     490:	sub	sp, fp, #4
     494:	ldr	fp, [sp]
     498:	add	sp, sp, #4
     49c:	pop	{pc}		; (ldr pc, [sp], #4)

000004a0 <MyGame_Example_Color_print_json_enum>:
     4a0:	str	fp, [sp, #-8]!
     4a4:	str	lr, [sp, #4]
     4a8:	add	fp, sp, #4
     4ac:	sub	sp, sp, #24
     4b0:	str	r0, [fp, #-24]	; 0xffffffe8
     4b4:	mov	r3, r1
     4b8:	strb	r3, [fp, #-25]	; 0xffffffe7
     4bc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
     4c0:	strb	r3, [fp, #-9]
     4c4:	ldrb	r2, [fp, #-9]
     4c8:	ldrb	r3, [fp, #-9]
     4cc:	sub	r3, r3, #1
     4d0:	and	r3, r3, r2
     4d4:	cmp	r3, #0
     4d8:	movne	r3, #1
     4dc:	moveq	r3, #0
     4e0:	uxtb	r3, r3
     4e4:	str	r3, [fp, #-16]
     4e8:	mov	r3, #0
     4ec:	str	r3, [fp, #-8]
     4f0:	ldrb	r3, [fp, #-9]
     4f4:	and	r3, r3, #244	; 0xf4
     4f8:	cmp	r3, #0
     4fc:	bne	50c <MyGame_Example_Color_print_json_enum+0x6c>
     500:	ldrb	r3, [fp, #-9]
     504:	cmp	r3, #0
     508:	bne	520 <MyGame_Example_Color_print_json_enum+0x80>
     50c:	ldrsb	r3, [fp, #-25]	; 0xffffffe7
     510:	mov	r1, r3
     514:	ldr	r0, [fp, #-24]	; 0xffffffe8
     518:	bl	0 <flatcc_json_printer_int8>
     51c:	b	5c8 <MyGame_Example_Color_print_json_enum+0x128>
     520:	ldr	r1, [fp, #-16]
     524:	ldr	r0, [fp, #-24]	; 0xffffffe8
     528:	bl	0 <flatcc_json_printer_delimit_enum_flags>
     52c:	ldrb	r3, [fp, #-9]
     530:	and	r3, r3, #1
     534:	cmp	r3, #0
     538:	beq	55c <MyGame_Example_Color_print_json_enum+0xbc>
     53c:	ldr	r1, [fp, #-8]
     540:	add	r3, r1, #1
     544:	str	r3, [fp, #-8]
     548:	mov	r3, #3
     54c:	movw	r2, #0
     550:	movt	r2, #0
     554:	ldr	r0, [fp, #-24]	; 0xffffffe8
     558:	bl	0 <flatcc_json_printer_enum_flag>
     55c:	ldrb	r3, [fp, #-9]
     560:	and	r3, r3, #2
     564:	cmp	r3, #0
     568:	beq	58c <MyGame_Example_Color_print_json_enum+0xec>
     56c:	ldr	r1, [fp, #-8]
     570:	add	r3, r1, #1
     574:	str	r3, [fp, #-8]
     578:	mov	r3, #5
     57c:	movw	r2, #0
     580:	movt	r2, #0
     584:	ldr	r0, [fp, #-24]	; 0xffffffe8
     588:	bl	0 <flatcc_json_printer_enum_flag>
     58c:	ldrb	r3, [fp, #-9]
     590:	and	r3, r3, #8
     594:	cmp	r3, #0
     598:	beq	5bc <MyGame_Example_Color_print_json_enum+0x11c>
     59c:	ldr	r1, [fp, #-8]
     5a0:	add	r3, r1, #1
     5a4:	str	r3, [fp, #-8]
     5a8:	mov	r3, #4
     5ac:	movw	r2, #0
     5b0:	movt	r2, #0
     5b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5b8:	bl	0 <flatcc_json_printer_enum_flag>
     5bc:	ldr	r1, [fp, #-16]
     5c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5c4:	bl	0 <flatcc_json_printer_delimit_enum_flags>
     5c8:	sub	sp, fp, #4
     5cc:	ldr	fp, [sp]
     5d0:	add	sp, sp, #4
     5d4:	pop	{pc}		; (ldr pc, [sp], #4)

000005d8 <MyGame_Example_notemptyenum_print_json_enum>:
     5d8:	str	fp, [sp, #-8]!
     5dc:	str	lr, [sp, #4]
     5e0:	add	fp, sp, #4
     5e4:	sub	sp, sp, #8
     5e8:	str	r0, [fp, #-8]
     5ec:	str	r1, [fp, #-12]
     5f0:	ldr	r3, [fp, #-12]
     5f4:	cmp	r3, #0
     5f8:	bne	614 <MyGame_Example_notemptyenum_print_json_enum+0x3c>
     5fc:	mov	r2, #1
     600:	movw	r1, #0
     604:	movt	r1, #0
     608:	ldr	r0, [fp, #-8]
     60c:	bl	0 <flatcc_json_printer_enum>
     610:	b	624 <MyGame_Example_notemptyenum_print_json_enum+0x4c>
     614:	ldr	r1, [fp, #-12]
     618:	ldr	r0, [fp, #-8]
     61c:	bl	0 <flatcc_json_printer_int32>
     620:	nop	{0}
     624:	nop	{0}
     628:	sub	sp, fp, #4
     62c:	ldr	fp, [sp]
     630:	add	sp, sp, #4
     634:	pop	{pc}		; (ldr pc, [sp], #4)

00000638 <MyGame_Example_Foo_print_json_union_type>:
     638:	str	fp, [sp, #-8]!
     63c:	str	lr, [sp, #4]
     640:	add	fp, sp, #4
     644:	sub	sp, sp, #8
     648:	str	r0, [fp, #-8]
     64c:	mov	r3, r1
     650:	strb	r3, [fp, #-9]
     654:	ldrb	r3, [fp, #-9]
     658:	cmp	r3, #1
     65c:	bne	678 <MyGame_Example_Foo_print_json_union_type+0x40>
     660:	mov	r2, #17
     664:	movw	r1, #0
     668:	movt	r1, #0
     66c:	ldr	r0, [fp, #-8]
     670:	bl	0 <flatcc_json_printer_enum>
     674:	b	690 <MyGame_Example_Foo_print_json_union_type+0x58>
     678:	mov	r2, #4
     67c:	movw	r1, #0
     680:	movt	r1, #0
     684:	ldr	r0, [fp, #-8]
     688:	bl	0 <flatcc_json_printer_enum>
     68c:	nop	{0}
     690:	nop	{0}
     694:	sub	sp, fp, #4
     698:	ldr	fp, [sp]
     69c:	add	sp, sp, #4
     6a0:	pop	{pc}		; (ldr pc, [sp], #4)

000006a4 <MyGame_Example_Foo_print_json_union>:
     6a4:	str	fp, [sp, #-8]!
     6a8:	str	lr, [sp, #4]
     6ac:	add	fp, sp, #4
     6b0:	sub	sp, sp, #8
     6b4:	str	r0, [fp, #-8]
     6b8:	str	r1, [fp, #-12]
     6bc:	ldr	r3, [fp, #-12]
     6c0:	ldrb	r3, [r3, #8]
     6c4:	cmp	r3, #1
     6c8:	bne	6e4 <MyGame_Example_Foo_print_json_union+0x40>
     6cc:	movw	r2, #0
     6d0:	movt	r2, #0
     6d4:	ldr	r1, [fp, #-12]
     6d8:	ldr	r0, [fp, #-8]
     6dc:	bl	0 <flatcc_json_printer_union_table>
     6e0:	b	6e8 <MyGame_Example_Foo_print_json_union+0x44>
     6e4:	nop	{0}
     6e8:	nop	{0}
     6ec:	sub	sp, fp, #4
     6f0:	ldr	fp, [sp]
     6f4:	add	sp, sp, #4
     6f8:	pop	{pc}		; (ldr pc, [sp], #4)

000006fc <MyGame_Example_Any_print_json_union_type>:
     6fc:	str	fp, [sp, #-8]!
     700:	str	lr, [sp, #4]
     704:	add	fp, sp, #4
     708:	sub	sp, sp, #8
     70c:	str	r0, [fp, #-8]
     710:	mov	r3, r1
     714:	strb	r3, [fp, #-9]
     718:	ldrb	r3, [fp, #-9]
     71c:	sub	r3, r3, #1
     720:	cmp	r3, #3
     724:	ldrls	pc, [pc, r3, lsl #2]
     728:	b	79c <MyGame_Example_Any_print_json_union_type+0xa0>
     72c:	.word	0x0000073c
     730:	.word	0x00000754
     734:	.word	0x0000076c
     738:	.word	0x00000784
     73c:	mov	r2, #7
     740:	movw	r1, #0
     744:	movt	r1, #0
     748:	ldr	r0, [fp, #-8]
     74c:	bl	0 <flatcc_json_printer_enum>
     750:	b	7b4 <MyGame_Example_Any_print_json_union_type+0xb8>
     754:	mov	r2, #23
     758:	movw	r1, #0
     75c:	movt	r1, #0
     760:	ldr	r0, [fp, #-8]
     764:	bl	0 <flatcc_json_printer_enum>
     768:	b	7b4 <MyGame_Example_Any_print_json_union_type+0xb8>
     76c:	mov	r2, #8
     770:	movw	r1, #0
     774:	movt	r1, #0
     778:	ldr	r0, [fp, #-8]
     77c:	bl	0 <flatcc_json_printer_enum>
     780:	b	7b4 <MyGame_Example_Any_print_json_union_type+0xb8>
     784:	mov	r2, #3
     788:	movw	r1, #0
     78c:	movt	r1, #0
     790:	ldr	r0, [fp, #-8]
     794:	bl	0 <flatcc_json_printer_enum>
     798:	b	7b4 <MyGame_Example_Any_print_json_union_type+0xb8>
     79c:	mov	r2, #4
     7a0:	movw	r1, #0
     7a4:	movt	r1, #0
     7a8:	ldr	r0, [fp, #-8]
     7ac:	bl	0 <flatcc_json_printer_enum>
     7b0:	nop	{0}
     7b4:	nop	{0}
     7b8:	sub	sp, fp, #4
     7bc:	ldr	fp, [sp]
     7c0:	add	sp, sp, #4
     7c4:	pop	{pc}		; (ldr pc, [sp], #4)

000007c8 <MyGame_Example_Any_print_json_union>:
     7c8:	str	fp, [sp, #-8]!
     7cc:	str	lr, [sp, #4]
     7d0:	add	fp, sp, #4
     7d4:	sub	sp, sp, #8
     7d8:	str	r0, [fp, #-8]
     7dc:	str	r1, [fp, #-12]
     7e0:	ldr	r3, [fp, #-12]
     7e4:	ldrb	r3, [r3, #8]
     7e8:	sub	r3, r3, #1
     7ec:	cmp	r3, #3
     7f0:	ldrls	pc, [pc, r3, lsl #2]
     7f4:	b	868 <MyGame_Example_Any_print_json_union+0xa0>
     7f8:	.word	0x00000808
     7fc:	.word	0x00000820
     800:	.word	0x00000838
     804:	.word	0x00000850
     808:	movw	r2, #0
     80c:	movt	r2, #0
     810:	ldr	r1, [fp, #-12]
     814:	ldr	r0, [fp, #-8]
     818:	bl	0 <flatcc_json_printer_union_table>
     81c:	b	86c <MyGame_Example_Any_print_json_union+0xa4>
     820:	movw	r2, #0
     824:	movt	r2, #0
     828:	ldr	r1, [fp, #-12]
     82c:	ldr	r0, [fp, #-8]
     830:	bl	0 <flatcc_json_printer_union_table>
     834:	b	86c <MyGame_Example_Any_print_json_union+0xa4>
     838:	movw	r2, #0
     83c:	movt	r2, #0
     840:	ldr	r1, [fp, #-12]
     844:	ldr	r0, [fp, #-8]
     848:	bl	0 <flatcc_json_printer_union_table>
     84c:	b	86c <MyGame_Example_Any_print_json_union+0xa4>
     850:	movw	r2, #0
     854:	movt	r2, #0
     858:	ldr	r1, [fp, #-12]
     85c:	ldr	r0, [fp, #-8]
     860:	bl	0 <flatcc_json_printer_union_table>
     864:	b	86c <MyGame_Example_Any_print_json_union+0xa4>
     868:	nop	{0}
     86c:	nop	{0}
     870:	sub	sp, fp, #4
     874:	ldr	fp, [sp]
     878:	add	sp, sp, #4
     87c:	pop	{pc}		; (ldr pc, [sp], #4)

00000880 <Fantasy_Character_print_json_union_type>:
     880:	str	fp, [sp, #-8]!
     884:	str	lr, [sp, #4]
     888:	add	fp, sp, #4
     88c:	sub	sp, sp, #8
     890:	str	r0, [fp, #-8]
     894:	mov	r3, r1
     898:	strb	r3, [fp, #-9]
     89c:	ldrb	r3, [fp, #-9]
     8a0:	cmp	r3, #9
     8a4:	beq	910 <Fantasy_Character_print_json_union_type+0x90>
     8a8:	cmp	r3, #9
     8ac:	bgt	8c4 <Fantasy_Character_print_json_union_type+0x44>
     8b0:	cmp	r3, #2
     8b4:	beq	8e0 <Fantasy_Character_print_json_union_type+0x60>
     8b8:	cmp	r3, #8
     8bc:	beq	8f8 <Fantasy_Character_print_json_union_type+0x78>
     8c0:	b	970 <Fantasy_Character_print_json_union_type+0xf0>
     8c4:	cmp	r3, #11
     8c8:	beq	940 <Fantasy_Character_print_json_union_type+0xc0>
     8cc:	cmp	r3, #11
     8d0:	blt	928 <Fantasy_Character_print_json_union_type+0xa8>
     8d4:	cmp	r3, #255	; 0xff
     8d8:	beq	958 <Fantasy_Character_print_json_union_type+0xd8>
     8dc:	b	970 <Fantasy_Character_print_json_union_type+0xf0>
     8e0:	mov	r2, #5
     8e4:	movw	r1, #0
     8e8:	movt	r1, #0
     8ec:	ldr	r0, [fp, #-8]
     8f0:	bl	0 <flatcc_json_printer_enum>
     8f4:	b	988 <Fantasy_Character_print_json_union_type+0x108>
     8f8:	mov	r2, #8
     8fc:	movw	r1, #0
     900:	movt	r1, #0
     904:	ldr	r0, [fp, #-8]
     908:	bl	0 <flatcc_json_printer_enum>
     90c:	b	988 <Fantasy_Character_print_json_union_type+0x108>
     910:	mov	r2, #5
     914:	movw	r1, #0
     918:	movt	r1, #0
     91c:	ldr	r0, [fp, #-8]
     920:	bl	0 <flatcc_json_printer_enum>
     924:	b	988 <Fantasy_Character_print_json_union_type+0x108>
     928:	mov	r2, #7
     92c:	movw	r1, #0
     930:	movt	r1, #0
     934:	ldr	r0, [fp, #-8]
     938:	bl	0 <flatcc_json_printer_enum>
     93c:	b	988 <Fantasy_Character_print_json_union_type+0x108>
     940:	mov	r2, #5
     944:	movw	r1, #0
     948:	movt	r1, #0
     94c:	ldr	r0, [fp, #-8]
     950:	bl	0 <flatcc_json_printer_enum>
     954:	b	988 <Fantasy_Character_print_json_union_type+0x108>
     958:	mov	r2, #6
     95c:	movw	r1, #0
     960:	movt	r1, #0
     964:	ldr	r0, [fp, #-8]
     968:	bl	0 <flatcc_json_printer_enum>
     96c:	b	988 <Fantasy_Character_print_json_union_type+0x108>
     970:	mov	r2, #4
     974:	movw	r1, #0
     978:	movt	r1, #0
     97c:	ldr	r0, [fp, #-8]
     980:	bl	0 <flatcc_json_printer_enum>
     984:	nop	{0}
     988:	nop	{0}
     98c:	sub	sp, fp, #4
     990:	ldr	fp, [sp]
     994:	add	sp, sp, #4
     998:	pop	{pc}		; (ldr pc, [sp], #4)

0000099c <Fantasy_Character_print_json_union>:
     99c:	str	fp, [sp, #-8]!
     9a0:	str	lr, [sp, #4]
     9a4:	add	fp, sp, #4
     9a8:	sub	sp, sp, #8
     9ac:	str	r0, [fp, #-8]
     9b0:	str	r1, [fp, #-12]
     9b4:	ldr	r3, [fp, #-12]
     9b8:	ldrb	r3, [r3, #8]
     9bc:	cmp	r3, #9
     9c0:	beq	a2c <Fantasy_Character_print_json_union+0x90>
     9c4:	cmp	r3, #9
     9c8:	bgt	9e0 <Fantasy_Character_print_json_union+0x44>
     9cc:	cmp	r3, #2
     9d0:	beq	9fc <Fantasy_Character_print_json_union+0x60>
     9d4:	cmp	r3, #8
     9d8:	beq	a14 <Fantasy_Character_print_json_union+0x78>
     9dc:	b	a7c <Fantasy_Character_print_json_union+0xe0>
     9e0:	cmp	r3, #11
     9e4:	beq	a5c <Fantasy_Character_print_json_union+0xc0>
     9e8:	cmp	r3, #11
     9ec:	blt	a44 <Fantasy_Character_print_json_union+0xa8>
     9f0:	cmp	r3, #255	; 0xff
     9f4:	beq	a6c <Fantasy_Character_print_json_union+0xd0>
     9f8:	b	a7c <Fantasy_Character_print_json_union+0xe0>
     9fc:	movw	r2, #0
     a00:	movt	r2, #0
     a04:	ldr	r1, [fp, #-12]
     a08:	ldr	r0, [fp, #-8]
     a0c:	bl	0 <flatcc_json_printer_union_table>
     a10:	b	a7c <Fantasy_Character_print_json_union+0xe0>
     a14:	movw	r2, #0
     a18:	movt	r2, #0
     a1c:	ldr	r1, [fp, #-12]
     a20:	ldr	r0, [fp, #-8]
     a24:	bl	0 <flatcc_json_printer_union_struct>
     a28:	b	a7c <Fantasy_Character_print_json_union+0xe0>
     a2c:	movw	r2, #0
     a30:	movt	r2, #0
     a34:	ldr	r1, [fp, #-12]
     a38:	ldr	r0, [fp, #-8]
     a3c:	bl	0 <flatcc_json_printer_union_struct>
     a40:	b	a7c <Fantasy_Character_print_json_union+0xe0>
     a44:	movw	r2, #0
     a48:	movt	r2, #0
     a4c:	ldr	r1, [fp, #-12]
     a50:	ldr	r0, [fp, #-8]
     a54:	bl	0 <flatcc_json_printer_union_struct>
     a58:	b	a7c <Fantasy_Character_print_json_union+0xe0>
     a5c:	ldr	r1, [fp, #-12]
     a60:	ldr	r0, [fp, #-8]
     a64:	bl	0 <flatcc_json_printer_union_string>
     a68:	b	a7c <Fantasy_Character_print_json_union+0xe0>
     a6c:	ldr	r1, [fp, #-12]
     a70:	ldr	r0, [fp, #-8]
     a74:	bl	0 <flatcc_json_printer_union_string>
     a78:	nop	{0}
     a7c:	nop	{0}
     a80:	sub	sp, fp, #4
     a84:	ldr	fp, [sp]
     a88:	add	sp, sp, #4
     a8c:	pop	{pc}		; (ldr pc, [sp], #4)

00000a90 <InGlobalNamespace_print_json_struct>:
     a90:	push	{fp}		; (str fp, [sp, #-4]!)
     a94:	add	fp, sp, #0
     a98:	sub	sp, sp, #12
     a9c:	str	r0, [fp, #-8]
     aa0:	str	r1, [fp, #-12]
     aa4:	nop	{0}
     aa8:	add	sp, fp, #0
     aac:	pop	{fp}		; (ldr fp, [sp], #4)
     ab0:	bx	lr

00000ab4 <MyGame_Example_Test_print_json_struct>:
     ab4:	str	fp, [sp, #-8]!
     ab8:	str	lr, [sp, #4]
     abc:	add	fp, sp, #4
     ac0:	sub	sp, sp, #16
     ac4:	str	r0, [fp, #-8]
     ac8:	str	r1, [fp, #-12]
     acc:	mov	r3, #1
     ad0:	str	r3, [sp, #4]
     ad4:	movw	r3, #0
     ad8:	movt	r3, #0
     adc:	str	r3, [sp]
     ae0:	mov	r3, #0
     ae4:	ldr	r2, [fp, #-12]
     ae8:	mov	r1, #0
     aec:	ldr	r0, [fp, #-8]
     af0:	bl	0 <flatcc_json_printer_int16_struct_field>
     af4:	mov	r3, #1
     af8:	str	r3, [sp, #4]
     afc:	movw	r3, #0
     b00:	movt	r3, #0
     b04:	str	r3, [sp]
     b08:	mov	r3, #2
     b0c:	ldr	r2, [fp, #-12]
     b10:	mov	r1, #1
     b14:	ldr	r0, [fp, #-8]
     b18:	bl	0 <flatcc_json_printer_int8_struct_field>
     b1c:	nop	{0}
     b20:	sub	sp, fp, #4
     b24:	ldr	fp, [sp]
     b28:	add	sp, sp, #4
     b2c:	pop	{pc}		; (ldr pc, [sp], #4)

00000b30 <MyGame_Example_emptystruct_print_json_struct>:
     b30:	push	{fp}		; (str fp, [sp, #-4]!)
     b34:	add	fp, sp, #0
     b38:	sub	sp, sp, #12
     b3c:	str	r0, [fp, #-8]
     b40:	str	r1, [fp, #-12]
     b44:	nop	{0}
     b48:	add	sp, fp, #0
     b4c:	pop	{fp}		; (ldr fp, [sp], #4)
     b50:	bx	lr

00000b54 <MyGame_Example_Vec3_print_json_struct>:
     b54:	str	fp, [sp, #-8]!
     b58:	str	lr, [sp, #4]
     b5c:	add	fp, sp, #4
     b60:	sub	sp, sp, #24
     b64:	str	r0, [fp, #-8]
     b68:	str	r1, [fp, #-12]
     b6c:	mov	r3, #1
     b70:	str	r3, [sp, #4]
     b74:	movw	r3, #0
     b78:	movt	r3, #0
     b7c:	str	r3, [sp]
     b80:	mov	r3, #0
     b84:	ldr	r2, [fp, #-12]
     b88:	mov	r1, #0
     b8c:	ldr	r0, [fp, #-8]
     b90:	bl	0 <flatcc_json_printer_float_struct_field>
     b94:	mov	r3, #1
     b98:	str	r3, [sp, #4]
     b9c:	movw	r3, #0
     ba0:	movt	r3, #0
     ba4:	str	r3, [sp]
     ba8:	mov	r3, #4
     bac:	ldr	r2, [fp, #-12]
     bb0:	mov	r1, #1
     bb4:	ldr	r0, [fp, #-8]
     bb8:	bl	0 <flatcc_json_printer_float_struct_field>
     bbc:	mov	r3, #1
     bc0:	str	r3, [sp, #4]
     bc4:	movw	r3, #0
     bc8:	movt	r3, #0
     bcc:	str	r3, [sp]
     bd0:	mov	r3, #8
     bd4:	ldr	r2, [fp, #-12]
     bd8:	mov	r1, #2
     bdc:	ldr	r0, [fp, #-8]
     be0:	bl	0 <flatcc_json_printer_float_struct_field>
     be4:	mov	r3, #5
     be8:	str	r3, [sp, #4]
     bec:	movw	r3, #0
     bf0:	movt	r3, #0
     bf4:	str	r3, [sp]
     bf8:	mov	r3, #16
     bfc:	ldr	r2, [fp, #-12]
     c00:	mov	r1, #3
     c04:	ldr	r0, [fp, #-8]
     c08:	bl	0 <flatcc_json_printer_double_struct_field>
     c0c:	movw	r3, #0
     c10:	movt	r3, #0
     c14:	str	r3, [sp, #8]
     c18:	mov	r3, #5
     c1c:	str	r3, [sp, #4]
     c20:	movw	r3, #0
     c24:	movt	r3, #0
     c28:	str	r3, [sp]
     c2c:	mov	r3, #24
     c30:	ldr	r2, [fp, #-12]
     c34:	mov	r1, #4
     c38:	ldr	r0, [fp, #-8]
     c3c:	bl	0 <flatcc_json_printer_int8_enum_struct_field>
     c40:	movw	r3, #0
     c44:	movt	r3, #0
     c48:	str	r3, [sp, #8]
     c4c:	mov	r3, #5
     c50:	str	r3, [sp, #4]
     c54:	movw	r3, #0
     c58:	movt	r3, #0
     c5c:	str	r3, [sp]
     c60:	mov	r3, #26
     c64:	ldr	r2, [fp, #-12]
     c68:	mov	r1, #5
     c6c:	ldr	r0, [fp, #-8]
     c70:	bl	0 <flatcc_json_printer_embedded_struct_field>
     c74:	nop	{0}
     c78:	sub	sp, fp, #4
     c7c:	ldr	fp, [sp]
     c80:	add	sp, sp, #4
     c84:	pop	{pc}		; (ldr pc, [sp], #4)

00000c88 <MyGame_Example_Ability_print_json_struct>:
     c88:	str	fp, [sp, #-8]!
     c8c:	str	lr, [sp, #4]
     c90:	add	fp, sp, #4
     c94:	sub	sp, sp, #16
     c98:	str	r0, [fp, #-8]
     c9c:	str	r1, [fp, #-12]
     ca0:	mov	r3, #2
     ca4:	str	r3, [sp, #4]
     ca8:	movw	r3, #0
     cac:	movt	r3, #0
     cb0:	str	r3, [sp]
     cb4:	mov	r3, #0
     cb8:	ldr	r2, [fp, #-12]
     cbc:	mov	r1, #0
     cc0:	ldr	r0, [fp, #-8]
     cc4:	bl	0 <flatcc_json_printer_uint32_struct_field>
     cc8:	mov	r3, #8
     ccc:	str	r3, [sp, #4]
     cd0:	movw	r3, #0
     cd4:	movt	r3, #0
     cd8:	str	r3, [sp]
     cdc:	mov	r3, #4
     ce0:	ldr	r2, [fp, #-12]
     ce4:	mov	r1, #1
     ce8:	ldr	r0, [fp, #-8]
     cec:	bl	0 <flatcc_json_printer_uint32_struct_field>
     cf0:	nop	{0}
     cf4:	sub	sp, fp, #4
     cf8:	ldr	fp, [sp]
     cfc:	add	sp, sp, #4
     d00:	pop	{pc}		; (ldr pc, [sp], #4)

00000d04 <Fantasy_Rapunzel_print_json_struct>:
     d04:	str	fp, [sp, #-8]!
     d08:	str	lr, [sp, #4]
     d0c:	add	fp, sp, #4
     d10:	sub	sp, sp, #16
     d14:	str	r0, [fp, #-8]
     d18:	str	r1, [fp, #-12]
     d1c:	mov	r3, #11
     d20:	str	r3, [sp, #4]
     d24:	movw	r3, #0
     d28:	movt	r3, #0
     d2c:	str	r3, [sp]
     d30:	mov	r3, #0
     d34:	ldr	r2, [fp, #-12]
     d38:	mov	r1, #0
     d3c:	ldr	r0, [fp, #-8]
     d40:	bl	0 <flatcc_json_printer_uint16_struct_field>
     d44:	nop	{0}
     d48:	sub	sp, fp, #4
     d4c:	ldr	fp, [sp]
     d50:	add	sp, sp, #4
     d54:	pop	{pc}		; (ldr pc, [sp], #4)

00000d58 <Fantasy_BookReader_print_json_struct>:
     d58:	str	fp, [sp, #-8]!
     d5c:	str	lr, [sp, #4]
     d60:	add	fp, sp, #4
     d64:	sub	sp, sp, #16
     d68:	str	r0, [fp, #-8]
     d6c:	str	r1, [fp, #-12]
     d70:	mov	r3, #10
     d74:	str	r3, [sp, #4]
     d78:	movw	r3, #0
     d7c:	movt	r3, #0
     d80:	str	r3, [sp]
     d84:	mov	r3, #0
     d88:	ldr	r2, [fp, #-12]
     d8c:	mov	r1, #0
     d90:	ldr	r0, [fp, #-8]
     d94:	bl	0 <flatcc_json_printer_int32_struct_field>
     d98:	nop	{0}
     d9c:	sub	sp, fp, #4
     da0:	ldr	fp, [sp]
     da4:	add	sp, sp, #4
     da8:	pop	{pc}		; (ldr pc, [sp], #4)

00000dac <MyGame_InParentNamespace_print_json_table>:
     dac:	push	{fp}		; (str fp, [sp, #-4]!)
     db0:	add	fp, sp, #0
     db4:	sub	sp, sp, #12
     db8:	str	r0, [fp, #-8]
     dbc:	str	r1, [fp, #-12]
     dc0:	nop	{0}
     dc4:	add	sp, fp, #0
     dc8:	pop	{fp}		; (ldr fp, [sp], #4)
     dcc:	bx	lr

00000dd0 <MyGame_Example2_Monster_print_json_table>:
     dd0:	push	{fp}		; (str fp, [sp, #-4]!)
     dd4:	add	fp, sp, #0
     dd8:	sub	sp, sp, #12
     ddc:	str	r0, [fp, #-8]
     de0:	str	r1, [fp, #-12]
     de4:	nop	{0}
     de8:	add	sp, fp, #0
     dec:	pop	{fp}		; (ldr fp, [sp], #4)
     df0:	bx	lr

00000df4 <MyGame_Example_emptytable_print_json_table>:
     df4:	push	{fp}		; (str fp, [sp, #-4]!)
     df8:	add	fp, sp, #0
     dfc:	sub	sp, sp, #12
     e00:	str	r0, [fp, #-8]
     e04:	str	r1, [fp, #-12]
     e08:	nop	{0}
     e0c:	add	sp, fp, #0
     e10:	pop	{fp}		; (ldr fp, [sp], #4)
     e14:	bx	lr

00000e18 <MyGame_Example_with_emptystruct_print_json_table>:
     e18:	str	fp, [sp, #-8]!
     e1c:	str	lr, [sp, #4]
     e20:	add	fp, sp, #4
     e24:	sub	sp, sp, #16
     e28:	str	r0, [fp, #-8]
     e2c:	str	r1, [fp, #-12]
     e30:	movw	r3, #0
     e34:	movt	r3, #0
     e38:	str	r3, [sp, #4]
     e3c:	mov	r3, #5
     e40:	str	r3, [sp]
     e44:	movw	r3, #0
     e48:	movt	r3, #0
     e4c:	mov	r2, #0
     e50:	ldr	r1, [fp, #-12]
     e54:	ldr	r0, [fp, #-8]
     e58:	bl	0 <flatcc_json_printer_struct_field>
     e5c:	nop	{0}
     e60:	sub	sp, fp, #4
     e64:	ldr	fp, [sp]
     e68:	add	sp, sp, #4
     e6c:	pop	{pc}		; (ldr pc, [sp], #4)

00000e70 <MyGame_Example_TestSimpleTableWithEnum_print_json_table>:
     e70:	str	fp, [sp, #-8]!
     e74:	str	lr, [sp, #4]
     e78:	add	fp, sp, #4
     e7c:	sub	sp, sp, #24
     e80:	str	r0, [fp, #-8]
     e84:	str	r1, [fp, #-12]
     e88:	movw	r3, #0
     e8c:	movt	r3, #0
     e90:	str	r3, [sp, #8]
     e94:	mov	r3, #2
     e98:	str	r3, [sp, #4]
     e9c:	mov	r3, #5
     ea0:	str	r3, [sp]
     ea4:	movw	r3, #0
     ea8:	movt	r3, #0
     eac:	mov	r2, #0
     eb0:	ldr	r1, [fp, #-12]
     eb4:	ldr	r0, [fp, #-8]
     eb8:	bl	0 <flatcc_json_printer_int8_enum_field>
     ebc:	movw	r3, #0
     ec0:	movt	r3, #0
     ec4:	str	r3, [sp, #8]
     ec8:	mov	r3, #2
     ecc:	str	r3, [sp, #4]
     ed0:	mov	r3, #6
     ed4:	str	r3, [sp]
     ed8:	movw	r3, #0
     edc:	movt	r3, #0
     ee0:	mov	r2, #1
     ee4:	ldr	r1, [fp, #-12]
     ee8:	ldr	r0, [fp, #-8]
     eec:	bl	0 <flatcc_json_printer_int8_enum_field>
     ef0:	mov	r3, #2
     ef4:	str	r3, [sp, #4]
     ef8:	mov	r3, #2
     efc:	str	r3, [sp]
     f00:	movw	r3, #0
     f04:	movt	r3, #0
     f08:	mov	r2, #2
     f0c:	ldr	r1, [fp, #-12]
     f10:	ldr	r0, [fp, #-8]
     f14:	bl	0 <flatcc_json_printer_uint8_field>
     f18:	mov	r3, #2
     f1c:	str	r3, [sp, #4]
     f20:	mov	r3, #3
     f24:	str	r3, [sp]
     f28:	movw	r3, #0
     f2c:	movt	r3, #0
     f30:	mov	r2, #3
     f34:	ldr	r1, [fp, #-12]
     f38:	ldr	r0, [fp, #-8]
     f3c:	bl	0 <flatcc_json_printer_uint8_field>
     f40:	nop	{0}
     f44:	sub	sp, fp, #4
     f48:	ldr	fp, [sp]
     f4c:	add	sp, sp, #4
     f50:	pop	{pc}		; (ldr pc, [sp], #4)

00000f54 <MyGame_Example_TestInclude_print_json_table>:
     f54:	str	fp, [sp, #-8]!
     f58:	str	lr, [sp, #4]
     f5c:	add	fp, sp, #4
     f60:	sub	sp, sp, #32
     f64:	str	r0, [fp, #-8]
     f68:	str	r1, [fp, #-12]
     f6c:	movw	r3, #0
     f70:	movt	r3, #0
     f74:	str	r3, [sp, #4]
     f78:	mov	r3, #6
     f7c:	str	r3, [sp]
     f80:	movw	r3, #0
     f84:	movt	r3, #0
     f88:	mov	r2, #0
     f8c:	ldr	r1, [fp, #-12]
     f90:	ldr	r0, [fp, #-8]
     f94:	bl	0 <flatcc_json_printer_struct_field>
     f98:	movw	r3, #0
     f9c:	movt	r3, #0
     fa0:	str	r3, [sp, #16]
     fa4:	mov	r2, #0
     fa8:	mov	r3, #0
     fac:	strd	r2, [sp, #8]
     fb0:	mov	r3, #6
     fb4:	str	r3, [sp]
     fb8:	movw	r3, #0
     fbc:	movt	r3, #0
     fc0:	mov	r2, #1
     fc4:	ldr	r1, [fp, #-12]
     fc8:	ldr	r0, [fp, #-8]
     fcc:	bl	0 <flatcc_json_printer_int64_enum_field>
     fd0:	movw	r3, #0
     fd4:	movt	r3, #0
     fd8:	str	r3, [sp, #16]
     fdc:	mov	r2, #0
     fe0:	mov	r3, #0
     fe4:	strd	r2, [sp, #8]
     fe8:	mov	r3, #7
     fec:	str	r3, [sp]
     ff0:	movw	r3, #0
     ff4:	movt	r3, #0
     ff8:	mov	r2, #2
     ffc:	ldr	r1, [fp, #-12]
    1000:	ldr	r0, [fp, #-8]
    1004:	bl	0 <flatcc_json_printer_int64_enum_field>
    1008:	mov	r3, #0
    100c:	str	r3, [sp, #4]
    1010:	mov	r3, #7
    1014:	str	r3, [sp]
    1018:	movw	r3, #0
    101c:	movt	r3, #0
    1020:	mov	r2, #3
    1024:	ldr	r1, [fp, #-12]
    1028:	ldr	r0, [fp, #-8]
    102c:	bl	0 <flatcc_json_printer_int32_field>
    1030:	movw	r3, #0
    1034:	movt	r3, #0
    1038:	str	r3, [sp, #16]
    103c:	mov	r2, #0
    1040:	mov	r3, #0
    1044:	strd	r2, [sp, #8]
    1048:	mov	r3, #7
    104c:	str	r3, [sp]
    1050:	movw	r3, #0
    1054:	movt	r3, #0
    1058:	mov	r2, #4
    105c:	ldr	r1, [fp, #-12]
    1060:	ldr	r0, [fp, #-8]
    1064:	bl	0 <flatcc_json_printer_int64_enum_field>
    1068:	mov	r2, #0
    106c:	mov	r3, #0
    1070:	strd	r2, [sp, #8]
    1074:	mov	r3, #7
    1078:	str	r3, [sp]
    107c:	movw	r3, #0
    1080:	movt	r3, #0
    1084:	mov	r2, #5
    1088:	ldr	r1, [fp, #-12]
    108c:	ldr	r0, [fp, #-8]
    1090:	bl	0 <flatcc_json_printer_int64_field>
    1094:	nop	{0}
    1098:	sub	sp, fp, #4
    109c:	ldr	fp, [sp]
    10a0:	add	sp, sp, #4
    10a4:	pop	{pc}		; (ldr pc, [sp], #4)

000010a8 <MyGame_Example_Stat_print_json_table>:
    10a8:	str	fp, [sp, #-8]!
    10ac:	str	lr, [sp, #4]
    10b0:	add	fp, sp, #4
    10b4:	sub	sp, sp, #24
    10b8:	str	r0, [fp, #-8]
    10bc:	str	r1, [fp, #-12]
    10c0:	mov	r3, #2
    10c4:	str	r3, [sp]
    10c8:	movw	r3, #0
    10cc:	movt	r3, #0
    10d0:	mov	r2, #0
    10d4:	ldr	r1, [fp, #-12]
    10d8:	ldr	r0, [fp, #-8]
    10dc:	bl	0 <flatcc_json_printer_string_field>
    10e0:	mov	r2, #0
    10e4:	mov	r3, #0
    10e8:	strd	r2, [sp, #8]
    10ec:	mov	r3, #3
    10f0:	str	r3, [sp]
    10f4:	movw	r3, #0
    10f8:	movt	r3, #0
    10fc:	mov	r2, #1
    1100:	ldr	r1, [fp, #-12]
    1104:	ldr	r0, [fp, #-8]
    1108:	bl	0 <flatcc_json_printer_int64_field>
    110c:	mov	r3, #0
    1110:	str	r3, [sp, #4]
    1114:	mov	r3, #5
    1118:	str	r3, [sp]
    111c:	movw	r3, #0
    1120:	movt	r3, #0
    1124:	mov	r2, #2
    1128:	ldr	r1, [fp, #-12]
    112c:	ldr	r0, [fp, #-8]
    1130:	bl	0 <flatcc_json_printer_uint16_field>
    1134:	nop	{0}
    1138:	sub	sp, fp, #4
    113c:	ldr	fp, [sp]
    1140:	add	sp, sp, #4
    1144:	pop	{pc}		; (ldr pc, [sp], #4)

00001148 <MyGame_Example_Alt_print_json_table>:
    1148:	str	fp, [sp, #-8]!
    114c:	str	lr, [sp, #4]
    1150:	add	fp, sp, #4
    1154:	sub	sp, sp, #24
    1158:	str	r0, [fp, #-8]
    115c:	str	r1, [fp, #-12]
    1160:	movw	r3, #0
    1164:	movt	r3, #0
    1168:	str	r3, [sp, #4]
    116c:	mov	r3, #6
    1170:	str	r3, [sp]
    1174:	movw	r3, #0
    1178:	movt	r3, #0
    117c:	mov	r2, #0
    1180:	ldr	r1, [fp, #-12]
    1184:	ldr	r0, [fp, #-8]
    1188:	bl	0 <flatcc_json_printer_table_field>
    118c:	movw	r3, #0
    1190:	movt	r3, #0
    1194:	str	r3, [sp, #4]
    1198:	mov	r3, #5
    119c:	str	r3, [sp]
    11a0:	movw	r3, #0
    11a4:	movt	r3, #0
    11a8:	mov	r2, #1
    11ac:	ldr	r1, [fp, #-12]
    11b0:	ldr	r0, [fp, #-8]
    11b4:	bl	0 <flatcc_json_printer_table_field>
    11b8:	movw	r3, #0
    11bc:	movt	r3, #0
    11c0:	str	r3, [sp, #8]
    11c4:	movw	r3, #0
    11c8:	movt	r3, #0
    11cc:	str	r3, [sp, #4]
    11d0:	mov	r3, #7
    11d4:	str	r3, [sp]
    11d8:	movw	r3, #0
    11dc:	movt	r3, #0
    11e0:	mov	r2, #3
    11e4:	ldr	r1, [fp, #-12]
    11e8:	ldr	r0, [fp, #-8]
    11ec:	bl	0 <flatcc_json_printer_union_vector_field>
    11f0:	nop	{0}
    11f4:	sub	sp, fp, #4
    11f8:	ldr	fp, [sp]
    11fc:	add	sp, sp, #4
    1200:	pop	{pc}		; (ldr pc, [sp], #4)

00001204 <MyGame_Example_TestJSONPrefix_print_json_table>:
    1204:	str	fp, [sp, #-8]!
    1208:	str	lr, [sp, #4]
    120c:	add	fp, sp, #4
    1210:	sub	sp, sp, #16
    1214:	str	r0, [fp, #-8]
    1218:	str	r1, [fp, #-12]
    121c:	movw	r3, #0
    1220:	movt	r3, #0
    1224:	str	r3, [sp, #4]
    1228:	mov	r3, #21
    122c:	str	r3, [sp]
    1230:	movw	r3, #0
    1234:	movt	r3, #0
    1238:	mov	r2, #0
    123c:	ldr	r1, [fp, #-12]
    1240:	ldr	r0, [fp, #-8]
    1244:	bl	0 <flatcc_json_printer_table_field>
    1248:	movw	r3, #0
    124c:	movt	r3, #0
    1250:	str	r3, [sp, #4]
    1254:	mov	r3, #22
    1258:	str	r3, [sp]
    125c:	movw	r3, #0
    1260:	movt	r3, #0
    1264:	mov	r2, #1
    1268:	ldr	r1, [fp, #-12]
    126c:	ldr	r0, [fp, #-8]
    1270:	bl	0 <flatcc_json_printer_table_field>
    1274:	movw	r3, #0
    1278:	movt	r3, #0
    127c:	str	r3, [sp, #4]
    1280:	mov	r3, #22
    1284:	str	r3, [sp]
    1288:	movw	r3, #0
    128c:	movt	r3, #0
    1290:	mov	r2, #2
    1294:	ldr	r1, [fp, #-12]
    1298:	ldr	r0, [fp, #-8]
    129c:	bl	0 <flatcc_json_printer_table_field>
    12a0:	nop	{0}
    12a4:	sub	sp, fp, #4
    12a8:	ldr	fp, [sp]
    12ac:	add	sp, sp, #4
    12b0:	pop	{pc}		; (ldr pc, [sp], #4)

000012b4 <MyGame_Example_TestJSONPrefixParsing_print_json_table>:
    12b4:	str	fp, [sp, #-8]!
    12b8:	str	lr, [sp, #4]
    12bc:	add	fp, sp, #4
    12c0:	sub	sp, sp, #24
    12c4:	str	r0, [fp, #-8]
    12c8:	str	r1, [fp, #-12]
    12cc:	mov	r3, #4
    12d0:	str	r3, [sp]
    12d4:	movw	r3, #0
    12d8:	movt	r3, #0
    12dc:	mov	r2, #0
    12e0:	ldr	r1, [fp, #-12]
    12e4:	ldr	r0, [fp, #-8]
    12e8:	bl	0 <flatcc_json_printer_string_field>
    12ec:	mov	r3, #0
    12f0:	str	r3, [sp, #4]
    12f4:	mov	r3, #9
    12f8:	str	r3, [sp]
    12fc:	movw	r3, #0
    1300:	movt	r3, #0
    1304:	mov	r2, #1
    1308:	ldr	r1, [fp, #-12]
    130c:	ldr	r0, [fp, #-8]
    1310:	bl	0 <flatcc_json_printer_uint32_field>
    1314:	mov	r3, #4
    1318:	str	r3, [sp]
    131c:	movw	r3, #0
    1320:	movt	r3, #0
    1324:	mov	r2, #2
    1328:	ldr	r1, [fp, #-12]
    132c:	ldr	r0, [fp, #-8]
    1330:	bl	0 <flatcc_json_printer_string_field>
    1334:	mov	r2, #0
    1338:	mov	r3, #0
    133c:	strd	r2, [sp, #8]
    1340:	mov	r3, #8
    1344:	str	r3, [sp]
    1348:	movw	r3, #0
    134c:	movt	r3, #0
    1350:	mov	r2, #3
    1354:	ldr	r1, [fp, #-12]
    1358:	ldr	r0, [fp, #-8]
    135c:	bl	0 <flatcc_json_printer_int64_field>
    1360:	mov	r3, #4
    1364:	str	r3, [sp]
    1368:	movw	r3, #0
    136c:	movt	r3, #0
    1370:	mov	r2, #4
    1374:	ldr	r1, [fp, #-12]
    1378:	ldr	r0, [fp, #-8]
    137c:	bl	0 <flatcc_json_printer_string_field>
    1380:	mov	r2, #0
    1384:	mov	r3, #0
    1388:	strd	r2, [sp, #8]
    138c:	mov	r3, #8
    1390:	str	r3, [sp]
    1394:	movw	r3, #0
    1398:	movt	r3, #0
    139c:	mov	r2, #5
    13a0:	ldr	r1, [fp, #-12]
    13a4:	ldr	r0, [fp, #-8]
    13a8:	bl	0 <flatcc_json_printer_int64_field>
    13ac:	mov	r3, #0
    13b0:	str	r3, [sp, #4]
    13b4:	mov	r3, #9
    13b8:	str	r3, [sp]
    13bc:	movw	r3, #0
    13c0:	movt	r3, #0
    13c4:	mov	r2, #6
    13c8:	ldr	r1, [fp, #-12]
    13cc:	ldr	r0, [fp, #-8]
    13d0:	bl	0 <flatcc_json_printer_uint32_field>
    13d4:	mov	r2, #0
    13d8:	mov	r3, #0
    13dc:	strd	r2, [sp, #8]
    13e0:	mov	r3, #8
    13e4:	str	r3, [sp]
    13e8:	movw	r3, #0
    13ec:	movt	r3, #0
    13f0:	mov	r2, #7
    13f4:	ldr	r1, [fp, #-12]
    13f8:	ldr	r0, [fp, #-8]
    13fc:	bl	0 <flatcc_json_printer_int64_field>
    1400:	mov	r3, #0
    1404:	str	r3, [sp, #4]
    1408:	mov	r3, #9
    140c:	str	r3, [sp]
    1410:	movw	r3, #0
    1414:	movt	r3, #0
    1418:	mov	r2, #8
    141c:	ldr	r1, [fp, #-12]
    1420:	ldr	r0, [fp, #-8]
    1424:	bl	0 <flatcc_json_printer_uint32_field>
    1428:	nop	{0}
    142c:	sub	sp, fp, #4
    1430:	ldr	fp, [sp]
    1434:	add	sp, sp, #4
    1438:	pop	{pc}		; (ldr pc, [sp], #4)

0000143c <MyGame_Example_TestJSONPrefixParsing2_print_json_table>:
    143c:	str	fp, [sp, #-8]!
    1440:	str	lr, [sp, #4]
    1444:	add	fp, sp, #4
    1448:	sub	sp, sp, #24
    144c:	str	r0, [fp, #-8]
    1450:	str	r1, [fp, #-12]
    1454:	mov	r2, #0
    1458:	mov	r3, #0
    145c:	strd	r2, [sp, #8]
    1460:	mov	r3, #15
    1464:	str	r3, [sp]
    1468:	movw	r3, #0
    146c:	movt	r3, #0
    1470:	mov	r2, #0
    1474:	ldr	r1, [fp, #-12]
    1478:	ldr	r0, [fp, #-8]
    147c:	bl	0 <flatcc_json_printer_int64_field>
    1480:	mov	r3, #0
    1484:	str	r3, [sp, #4]
    1488:	mov	r3, #16
    148c:	str	r3, [sp]
    1490:	movw	r3, #0
    1494:	movt	r3, #0
    1498:	mov	r2, #1
    149c:	ldr	r1, [fp, #-12]
    14a0:	ldr	r0, [fp, #-8]
    14a4:	bl	0 <flatcc_json_printer_uint32_field>
    14a8:	nop	{0}
    14ac:	sub	sp, fp, #4
    14b0:	ldr	fp, [sp]
    14b4:	add	sp, sp, #4
    14b8:	pop	{pc}		; (ldr pc, [sp], #4)

000014bc <MyGame_Example_TestJSONPrefixParsing3_print_json_table>:
    14bc:	str	fp, [sp, #-8]!
    14c0:	str	lr, [sp, #4]
    14c4:	add	fp, sp, #4
    14c8:	sub	sp, sp, #24
    14cc:	str	r0, [fp, #-8]
    14d0:	str	r1, [fp, #-12]
    14d4:	mov	r2, #0
    14d8:	mov	r3, #0
    14dc:	strd	r2, [sp, #8]
    14e0:	mov	r3, #15
    14e4:	str	r3, [sp]
    14e8:	movw	r3, #0
    14ec:	movt	r3, #0
    14f0:	mov	r2, #0
    14f4:	ldr	r1, [fp, #-12]
    14f8:	ldr	r0, [fp, #-8]
    14fc:	bl	0 <flatcc_json_printer_int64_field>
    1500:	mov	r3, #0
    1504:	str	r3, [sp, #4]
    1508:	mov	r3, #21
    150c:	str	r3, [sp]
    1510:	movw	r3, #0
    1514:	movt	r3, #0
    1518:	mov	r2, #1
    151c:	ldr	r1, [fp, #-12]
    1520:	ldr	r0, [fp, #-8]
    1524:	bl	0 <flatcc_json_printer_uint32_field>
    1528:	nop	{0}
    152c:	sub	sp, fp, #4
    1530:	ldr	fp, [sp]
    1534:	add	sp, sp, #4
    1538:	pop	{pc}		; (ldr pc, [sp], #4)

0000153c <MyGame_Example_TestBase64_print_json_table>:
    153c:	str	fp, [sp, #-8]!
    1540:	str	lr, [sp, #4]
    1544:	add	fp, sp, #4
    1548:	sub	sp, sp, #16
    154c:	str	r0, [fp, #-8]
    1550:	str	r1, [fp, #-12]
    1554:	mov	r3, #0
    1558:	str	r3, [sp, #4]
    155c:	mov	r3, #4
    1560:	str	r3, [sp]
    1564:	movw	r3, #0
    1568:	movt	r3, #0
    156c:	mov	r2, #0
    1570:	ldr	r1, [fp, #-12]
    1574:	ldr	r0, [fp, #-8]
    1578:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
    157c:	mov	r3, #1
    1580:	str	r3, [sp, #4]
    1584:	mov	r3, #7
    1588:	str	r3, [sp]
    158c:	movw	r3, #0
    1590:	movt	r3, #0
    1594:	mov	r2, #1
    1598:	ldr	r1, [fp, #-12]
    159c:	ldr	r0, [fp, #-8]
    15a0:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
    15a4:	mov	r3, #0
    15a8:	str	r3, [sp, #4]
    15ac:	mov	r3, #6
    15b0:	str	r3, [sp]
    15b4:	movw	r3, #0
    15b8:	movt	r3, #0
    15bc:	mov	r2, #2
    15c0:	ldr	r1, [fp, #-12]
    15c4:	ldr	r0, [fp, #-8]
    15c8:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
    15cc:	nop	{0}
    15d0:	sub	sp, fp, #4
    15d4:	ldr	fp, [sp]
    15d8:	add	sp, sp, #4
    15dc:	pop	{pc}		; (ldr pc, [sp], #4)

000015e0 <MyGame_Example_Monster_print_json_table>:
    15e0:	str	fp, [sp, #-8]!
    15e4:	str	lr, [sp, #4]
    15e8:	add	fp, sp, #4
    15ec:	sub	sp, sp, #24
    15f0:	str	r0, [fp, #-8]
    15f4:	str	r1, [fp, #-12]
    15f8:	movw	r3, #0
    15fc:	movt	r3, #0
    1600:	str	r3, [sp, #4]
    1604:	mov	r3, #3
    1608:	str	r3, [sp]
    160c:	movw	r3, #0
    1610:	movt	r3, #0
    1614:	mov	r2, #0
    1618:	ldr	r1, [fp, #-12]
    161c:	ldr	r0, [fp, #-8]
    1620:	bl	0 <flatcc_json_printer_struct_field>
    1624:	mov	r3, #150	; 0x96
    1628:	str	r3, [sp, #4]
    162c:	mov	r3, #4
    1630:	str	r3, [sp]
    1634:	movw	r3, #0
    1638:	movt	r3, #0
    163c:	mov	r2, #1
    1640:	ldr	r1, [fp, #-12]
    1644:	ldr	r0, [fp, #-8]
    1648:	bl	0 <flatcc_json_printer_int16_field>
    164c:	mov	r3, #100	; 0x64
    1650:	str	r3, [sp, #4]
    1654:	mov	r3, #2
    1658:	str	r3, [sp]
    165c:	movw	r3, #0
    1660:	movt	r3, #0
    1664:	mov	r2, #2
    1668:	ldr	r1, [fp, #-12]
    166c:	ldr	r0, [fp, #-8]
    1670:	bl	0 <flatcc_json_printer_int16_field>
    1674:	mov	r3, #4
    1678:	str	r3, [sp]
    167c:	movw	r3, #0
    1680:	movt	r3, #0
    1684:	mov	r2, #3
    1688:	ldr	r1, [fp, #-12]
    168c:	ldr	r0, [fp, #-8]
    1690:	bl	0 <flatcc_json_printer_string_field>
    1694:	mov	r3, #9
    1698:	str	r3, [sp]
    169c:	movw	r3, #0
    16a0:	movt	r3, #0
    16a4:	mov	r2, #5
    16a8:	ldr	r1, [fp, #-12]
    16ac:	ldr	r0, [fp, #-8]
    16b0:	bl	0 <flatcc_json_printer_uint8_vector_field>
    16b4:	movw	r3, #0
    16b8:	movt	r3, #0
    16bc:	str	r3, [sp, #8]
    16c0:	mov	r3, #8
    16c4:	str	r3, [sp, #4]
    16c8:	mov	r3, #5
    16cc:	str	r3, [sp]
    16d0:	movw	r3, #0
    16d4:	movt	r3, #0
    16d8:	mov	r2, #6
    16dc:	ldr	r1, [fp, #-12]
    16e0:	ldr	r0, [fp, #-8]
    16e4:	bl	0 <flatcc_json_printer_int8_enum_field>
    16e8:	movw	r3, #0
    16ec:	movt	r3, #0
    16f0:	str	r3, [sp, #8]
    16f4:	movw	r3, #0
    16f8:	movt	r3, #0
    16fc:	str	r3, [sp, #4]
    1700:	mov	r3, #4
    1704:	str	r3, [sp]
    1708:	movw	r3, #0
    170c:	movt	r3, #0
    1710:	mov	r2, #8
    1714:	ldr	r1, [fp, #-12]
    1718:	ldr	r0, [fp, #-8]
    171c:	bl	0 <flatcc_json_printer_union_field>
    1720:	movw	r3, #0
    1724:	movt	r3, #0
    1728:	str	r3, [sp, #8]
    172c:	mov	r3, #4
    1730:	str	r3, [sp, #4]
    1734:	mov	r3, #5
    1738:	str	r3, [sp]
    173c:	movw	r3, #0
    1740:	movt	r3, #0
    1744:	mov	r2, #9
    1748:	ldr	r1, [fp, #-12]
    174c:	ldr	r0, [fp, #-8]
    1750:	bl	0 <flatcc_json_printer_struct_vector_field>
    1754:	mov	r3, #17
    1758:	str	r3, [sp]
    175c:	movw	r3, #0
    1760:	movt	r3, #0
    1764:	mov	r2, #10
    1768:	ldr	r1, [fp, #-12]
    176c:	ldr	r0, [fp, #-8]
    1770:	bl	0 <flatcc_json_printer_string_vector_field>
    1774:	movw	r3, #0
    1778:	movt	r3, #0
    177c:	str	r3, [sp, #4]
    1780:	mov	r3, #17
    1784:	str	r3, [sp]
    1788:	movw	r3, #0
    178c:	movt	r3, #0
    1790:	mov	r2, #11
    1794:	ldr	r1, [fp, #-12]
    1798:	ldr	r0, [fp, #-8]
    179c:	bl	0 <flatcc_json_printer_table_vector_field>
    17a0:	movw	r3, #0
    17a4:	movt	r3, #0
    17a8:	str	r3, [sp, #4]
    17ac:	mov	r3, #5
    17b0:	str	r3, [sp]
    17b4:	movw	r3, #0
    17b8:	movt	r3, #0
    17bc:	mov	r2, #12
    17c0:	ldr	r1, [fp, #-12]
    17c4:	ldr	r0, [fp, #-8]
    17c8:	bl	0 <flatcc_json_printer_table_field>
    17cc:	movw	r3, #0
    17d0:	movt	r3, #0
    17d4:	str	r3, [sp, #8]
    17d8:	mov	r3, #0
    17dc:	str	r3, [sp, #4]
    17e0:	mov	r3, #20
    17e4:	str	r3, [sp]
    17e8:	movw	r3, #0
    17ec:	movt	r3, #0
    17f0:	mov	r2, #13
    17f4:	ldr	r1, [fp, #-12]
    17f8:	ldr	r0, [fp, #-8]
    17fc:	bl	0 <flatcc_json_printer_table_as_nested_root>
    1800:	movw	r3, #0
    1804:	movt	r3, #0
    1808:	str	r3, [sp, #4]
    180c:	mov	r3, #9
    1810:	str	r3, [sp]
    1814:	movw	r3, #0
    1818:	movt	r3, #0
    181c:	mov	r2, #14
    1820:	ldr	r1, [fp, #-12]
    1824:	ldr	r0, [fp, #-8]
    1828:	bl	0 <flatcc_json_printer_table_field>
    182c:	mov	r3, #1
    1830:	str	r3, [sp, #4]
    1834:	mov	r3, #8
    1838:	str	r3, [sp]
    183c:	movw	r3, #0
    1840:	movt	r3, #0
    1844:	mov	r2, #15
    1848:	ldr	r1, [fp, #-12]
    184c:	ldr	r0, [fp, #-8]
    1850:	bl	0 <flatcc_json_printer_bool_field>
    1854:	mov	r3, #0
    1858:	str	r3, [sp, #4]
    185c:	mov	r3, #16
    1860:	str	r3, [sp]
    1864:	movw	r3, #0
    1868:	movt	r3, #0
    186c:	mov	r2, #16
    1870:	ldr	r1, [fp, #-12]
    1874:	ldr	r0, [fp, #-8]
    1878:	bl	0 <flatcc_json_printer_int32_field>
    187c:	mov	r3, #0
    1880:	str	r3, [sp, #4]
    1884:	mov	r3, #16
    1888:	str	r3, [sp]
    188c:	movw	r3, #0
    1890:	movt	r3, #0
    1894:	mov	r2, #17
    1898:	ldr	r1, [fp, #-12]
    189c:	ldr	r0, [fp, #-8]
    18a0:	bl	0 <flatcc_json_printer_uint32_field>
    18a4:	mov	r2, #0
    18a8:	mov	r3, #0
    18ac:	strd	r2, [sp, #8]
    18b0:	mov	r3, #16
    18b4:	str	r3, [sp]
    18b8:	movw	r3, #0
    18bc:	movt	r3, #0
    18c0:	mov	r2, #18
    18c4:	ldr	r1, [fp, #-12]
    18c8:	ldr	r0, [fp, #-8]
    18cc:	bl	0 <flatcc_json_printer_int64_field>
    18d0:	mov	r2, #0
    18d4:	mov	r3, #0
    18d8:	strd	r2, [sp, #8]
    18dc:	mov	r3, #16
    18e0:	str	r3, [sp]
    18e4:	movw	r3, #0
    18e8:	movt	r3, #0
    18ec:	mov	r2, #19
    18f0:	ldr	r1, [fp, #-12]
    18f4:	ldr	r0, [fp, #-8]
    18f8:	bl	0 <flatcc_json_printer_uint64_field>
    18fc:	mov	r3, #0
    1900:	str	r3, [sp, #4]
    1904:	mov	r3, #17
    1908:	str	r3, [sp]
    190c:	movw	r3, #0
    1910:	movt	r3, #0
    1914:	mov	r2, #20
    1918:	ldr	r1, [fp, #-12]
    191c:	ldr	r0, [fp, #-8]
    1920:	bl	0 <flatcc_json_printer_int32_field>
    1924:	mov	r3, #0
    1928:	str	r3, [sp, #4]
    192c:	mov	r3, #17
    1930:	str	r3, [sp]
    1934:	movw	r3, #0
    1938:	movt	r3, #0
    193c:	mov	r2, #21
    1940:	ldr	r1, [fp, #-12]
    1944:	ldr	r0, [fp, #-8]
    1948:	bl	0 <flatcc_json_printer_uint32_field>
    194c:	mov	r2, #0
    1950:	mov	r3, #0
    1954:	strd	r2, [sp, #8]
    1958:	mov	r3, #17
    195c:	str	r3, [sp]
    1960:	movw	r3, #0
    1964:	movt	r3, #0
    1968:	mov	r2, #22
    196c:	ldr	r1, [fp, #-12]
    1970:	ldr	r0, [fp, #-8]
    1974:	bl	0 <flatcc_json_printer_int64_field>
    1978:	mov	r2, #0
    197c:	mov	r3, #0
    1980:	strd	r2, [sp, #8]
    1984:	mov	r3, #17
    1988:	str	r3, [sp]
    198c:	movw	r3, #0
    1990:	movt	r3, #0
    1994:	mov	r2, #23
    1998:	ldr	r1, [fp, #-12]
    199c:	ldr	r0, [fp, #-8]
    19a0:	bl	0 <flatcc_json_printer_uint64_field>
    19a4:	mov	r3, #16
    19a8:	str	r3, [sp]
    19ac:	movw	r3, #0
    19b0:	movt	r3, #0
    19b4:	mov	r2, #24
    19b8:	ldr	r1, [fp, #-12]
    19bc:	ldr	r0, [fp, #-8]
    19c0:	bl	0 <flatcc_json_printer_bool_vector_field>
    19c4:	mov	r3, #5
    19c8:	str	r3, [sp]
    19cc:	vldr	s0, [pc, #432]	; 1b84 <MyGame_Example_Monster_print_json_table+0x5a4>
    19d0:	movw	r3, #0
    19d4:	movt	r3, #0
    19d8:	mov	r2, #25
    19dc:	ldr	r1, [fp, #-12]
    19e0:	ldr	r0, [fp, #-8]
    19e4:	bl	0 <flatcc_json_printer_float_field>
    19e8:	mov	r3, #6
    19ec:	str	r3, [sp]
    19f0:	vldr	s0, [pc, #400]	; 1b88 <MyGame_Example_Monster_print_json_table+0x5a8>
    19f4:	movw	r3, #0
    19f8:	movt	r3, #0
    19fc:	mov	r2, #26
    1a00:	ldr	r1, [fp, #-12]
    1a04:	ldr	r0, [fp, #-8]
    1a08:	bl	0 <flatcc_json_printer_float_field>
    1a0c:	mov	r3, #6
    1a10:	str	r3, [sp]
    1a14:	vldr	s0, [pc, #368]	; 1b8c <MyGame_Example_Monster_print_json_table+0x5ac>
    1a18:	movw	r3, #0
    1a1c:	movt	r3, #0
    1a20:	mov	r2, #27
    1a24:	ldr	r1, [fp, #-12]
    1a28:	ldr	r0, [fp, #-8]
    1a2c:	bl	0 <flatcc_json_printer_float_field>
    1a30:	mov	r3, #18
    1a34:	str	r3, [sp]
    1a38:	movw	r3, #0
    1a3c:	movt	r3, #0
    1a40:	mov	r2, #28
    1a44:	ldr	r1, [fp, #-12]
    1a48:	ldr	r0, [fp, #-8]
    1a4c:	bl	0 <flatcc_json_printer_string_vector_field>
    1a50:	movw	r3, #0
    1a54:	movt	r3, #0
    1a58:	str	r3, [sp, #8]
    1a5c:	mov	r3, #8
    1a60:	str	r3, [sp, #4]
    1a64:	mov	r3, #23
    1a68:	str	r3, [sp]
    1a6c:	movw	r3, #0
    1a70:	movt	r3, #0
    1a74:	mov	r2, #29
    1a78:	ldr	r1, [fp, #-12]
    1a7c:	ldr	r0, [fp, #-8]
    1a80:	bl	0 <flatcc_json_printer_struct_vector_field>
    1a84:	mov	r3, #4
    1a88:	str	r3, [sp]
    1a8c:	movw	r3, #0
    1a90:	movt	r3, #0
    1a94:	mov	r2, #30
    1a98:	ldr	r1, [fp, #-12]
    1a9c:	ldr	r0, [fp, #-8]
    1aa0:	bl	0 <flatcc_json_printer_uint8_vector_field>
    1aa4:	movw	r3, #0
    1aa8:	movt	r3, #0
    1aac:	str	r3, [sp, #8]
    1ab0:	mov	r3, #4
    1ab4:	str	r3, [sp, #4]
    1ab8:	mov	r3, #5
    1abc:	str	r3, [sp]
    1ac0:	movw	r3, #0
    1ac4:	movt	r3, #0
    1ac8:	mov	r2, #31
    1acc:	ldr	r1, [fp, #-12]
    1ad0:	ldr	r0, [fp, #-8]
    1ad4:	bl	0 <flatcc_json_printer_struct_vector_field>
    1ad8:	mov	r3, #15
    1adc:	str	r3, [sp]
    1ae0:	movw	r3, #0
    1ae4:	movt	r3, #0
    1ae8:	mov	r2, #32
    1aec:	ldr	r1, [fp, #-12]
    1af0:	ldr	r0, [fp, #-8]
    1af4:	bl	0 <flatcc_json_printer_int64_vector_field>
    1af8:	mov	r3, #17
    1afc:	str	r3, [sp]
    1b00:	movw	r3, #0
    1b04:	movt	r3, #0
    1b08:	mov	r2, #33	; 0x21
    1b0c:	ldr	r1, [fp, #-12]
    1b10:	ldr	r0, [fp, #-8]
    1b14:	bl	0 <flatcc_json_printer_double_vector_field>
    1b18:	movw	r3, #0
    1b1c:	movt	r3, #0
    1b20:	str	r3, [sp, #4]
    1b24:	mov	r3, #21
    1b28:	str	r3, [sp]
    1b2c:	movw	r3, #0
    1b30:	movt	r3, #0
    1b34:	mov	r2, #34	; 0x22
    1b38:	ldr	r1, [fp, #-12]
    1b3c:	ldr	r0, [fp, #-8]
    1b40:	bl	0 <flatcc_json_printer_table_field>
    1b44:	movw	r3, #0
    1b48:	movt	r3, #0
    1b4c:	str	r3, [sp, #4]
    1b50:	mov	r3, #10
    1b54:	str	r3, [sp]
    1b58:	movw	r3, #0
    1b5c:	movt	r3, #0
    1b60:	mov	r2, #35	; 0x23
    1b64:	ldr	r1, [fp, #-12]
    1b68:	ldr	r0, [fp, #-8]
    1b6c:	bl	0 <flatcc_json_printer_table_field>
    1b70:	nop	{0}
    1b74:	sub	sp, fp, #4
    1b78:	ldr	fp, [sp]
    1b7c:	add	sp, sp, #4
    1b80:	pop	{pc}		; (ldr pc, [sp], #4)
    1b84:	.word	0x489965e0
    1b88:	.word	0x40400000
    1b8c:	.word	0x00000000

00001b90 <MyGame_Example_Monster_print_json_as_root>:
    1b90:	str	fp, [sp, #-8]!
    1b94:	str	lr, [sp, #4]
    1b98:	add	fp, sp, #4
    1b9c:	sub	sp, sp, #24
    1ba0:	str	r0, [fp, #-8]
    1ba4:	str	r1, [fp, #-12]
    1ba8:	str	r2, [fp, #-16]
    1bac:	str	r3, [fp, #-20]	; 0xffffffec
    1bb0:	movw	r3, #0
    1bb4:	movt	r3, #0
    1bb8:	str	r3, [sp]
    1bbc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1bc0:	ldr	r2, [fp, #-16]
    1bc4:	ldr	r1, [fp, #-12]
    1bc8:	ldr	r0, [fp, #-8]
    1bcc:	bl	0 <flatcc_json_printer_table_as_root>
    1bd0:	mov	r3, r0
    1bd4:	mov	r0, r3
    1bd8:	sub	sp, fp, #4
    1bdc:	ldr	fp, [sp]
    1be0:	add	sp, sp, #4
    1be4:	pop	{pc}		; (ldr pc, [sp], #4)

00001be8 <MyGame_Example_TypeAliases_print_json_table>:
    1be8:	str	fp, [sp, #-8]!
    1bec:	str	lr, [sp, #4]
    1bf0:	add	fp, sp, #4
    1bf4:	sub	sp, sp, #24
    1bf8:	str	r0, [fp, #-8]
    1bfc:	str	r1, [fp, #-12]
    1c00:	mov	r3, #0
    1c04:	str	r3, [sp, #4]
    1c08:	mov	r3, #2
    1c0c:	str	r3, [sp]
    1c10:	movw	r3, #0
    1c14:	movt	r3, #0
    1c18:	mov	r2, #0
    1c1c:	ldr	r1, [fp, #-12]
    1c20:	ldr	r0, [fp, #-8]
    1c24:	bl	0 <flatcc_json_printer_int8_field>
    1c28:	mov	r3, #0
    1c2c:	str	r3, [sp, #4]
    1c30:	mov	r3, #2
    1c34:	str	r3, [sp]
    1c38:	movw	r3, #0
    1c3c:	movt	r3, #0
    1c40:	mov	r2, #1
    1c44:	ldr	r1, [fp, #-12]
    1c48:	ldr	r0, [fp, #-8]
    1c4c:	bl	0 <flatcc_json_printer_uint8_field>
    1c50:	mov	r3, #0
    1c54:	str	r3, [sp, #4]
    1c58:	mov	r3, #3
    1c5c:	str	r3, [sp]
    1c60:	movw	r3, #0
    1c64:	movt	r3, #0
    1c68:	mov	r2, #2
    1c6c:	ldr	r1, [fp, #-12]
    1c70:	ldr	r0, [fp, #-8]
    1c74:	bl	0 <flatcc_json_printer_int16_field>
    1c78:	mov	r3, #0
    1c7c:	str	r3, [sp, #4]
    1c80:	mov	r3, #3
    1c84:	str	r3, [sp]
    1c88:	movw	r3, #0
    1c8c:	movt	r3, #0
    1c90:	mov	r2, #3
    1c94:	ldr	r1, [fp, #-12]
    1c98:	ldr	r0, [fp, #-8]
    1c9c:	bl	0 <flatcc_json_printer_uint16_field>
    1ca0:	mov	r3, #0
    1ca4:	str	r3, [sp, #4]
    1ca8:	mov	r3, #3
    1cac:	str	r3, [sp]
    1cb0:	movw	r3, #0
    1cb4:	movt	r3, #0
    1cb8:	mov	r2, #4
    1cbc:	ldr	r1, [fp, #-12]
    1cc0:	ldr	r0, [fp, #-8]
    1cc4:	bl	0 <flatcc_json_printer_int32_field>
    1cc8:	mov	r3, #0
    1ccc:	str	r3, [sp, #4]
    1cd0:	mov	r3, #3
    1cd4:	str	r3, [sp]
    1cd8:	movw	r3, #0
    1cdc:	movt	r3, #0
    1ce0:	mov	r2, #5
    1ce4:	ldr	r1, [fp, #-12]
    1ce8:	ldr	r0, [fp, #-8]
    1cec:	bl	0 <flatcc_json_printer_uint32_field>
    1cf0:	mov	r2, #0
    1cf4:	mov	r3, #0
    1cf8:	strd	r2, [sp, #8]
    1cfc:	mov	r3, #3
    1d00:	str	r3, [sp]
    1d04:	movw	r3, #0
    1d08:	movt	r3, #0
    1d0c:	mov	r2, #6
    1d10:	ldr	r1, [fp, #-12]
    1d14:	ldr	r0, [fp, #-8]
    1d18:	bl	0 <flatcc_json_printer_int64_field>
    1d1c:	mov	r2, #0
    1d20:	mov	r3, #0
    1d24:	strd	r2, [sp, #8]
    1d28:	mov	r3, #3
    1d2c:	str	r3, [sp]
    1d30:	movw	r3, #0
    1d34:	movt	r3, #0
    1d38:	mov	r2, #7
    1d3c:	ldr	r1, [fp, #-12]
    1d40:	ldr	r0, [fp, #-8]
    1d44:	bl	0 <flatcc_json_printer_uint64_field>
    1d48:	mov	r3, #3
    1d4c:	str	r3, [sp]
    1d50:	vldr	s0, [pc, #152]	; 1df0 <MyGame_Example_TypeAliases_print_json_table+0x208>
    1d54:	movw	r3, #0
    1d58:	movt	r3, #0
    1d5c:	mov	r2, #8
    1d60:	ldr	r1, [fp, #-12]
    1d64:	ldr	r0, [fp, #-8]
    1d68:	bl	0 <flatcc_json_printer_float_field>
    1d6c:	mov	r3, #3
    1d70:	str	r3, [sp]
    1d74:	vldr	d0, [pc, #108]	; 1de8 <MyGame_Example_TypeAliases_print_json_table+0x200>
    1d78:	movw	r3, #0
    1d7c:	movt	r3, #0
    1d80:	mov	r2, #9
    1d84:	ldr	r1, [fp, #-12]
    1d88:	ldr	r0, [fp, #-8]
    1d8c:	bl	0 <flatcc_json_printer_double_field>
    1d90:	mov	r3, #2
    1d94:	str	r3, [sp]
    1d98:	movw	r3, #0
    1d9c:	movt	r3, #0
    1da0:	mov	r2, #10
    1da4:	ldr	r1, [fp, #-12]
    1da8:	ldr	r0, [fp, #-8]
    1dac:	bl	0 <flatcc_json_printer_int8_vector_field>
    1db0:	mov	r3, #4
    1db4:	str	r3, [sp]
    1db8:	movw	r3, #0
    1dbc:	movt	r3, #0
    1dc0:	mov	r2, #11
    1dc4:	ldr	r1, [fp, #-12]
    1dc8:	ldr	r0, [fp, #-8]
    1dcc:	bl	0 <flatcc_json_printer_double_vector_field>
    1dd0:	nop	{0}
    1dd4:	sub	sp, fp, #4
    1dd8:	ldr	fp, [sp]
    1ddc:	add	sp, sp, #4
    1de0:	pop	{pc}		; (ldr pc, [sp], #4)
    1de4:	nop	{0}
	...

00001df4 <Fantasy_Attacker_print_json_table>:
    1df4:	str	fp, [sp, #-8]!
    1df8:	str	lr, [sp, #4]
    1dfc:	add	fp, sp, #4
    1e00:	sub	sp, sp, #16
    1e04:	str	r0, [fp, #-8]
    1e08:	str	r1, [fp, #-12]
    1e0c:	mov	r3, #0
    1e10:	str	r3, [sp, #4]
    1e14:	mov	r3, #19
    1e18:	str	r3, [sp]
    1e1c:	movw	r3, #0
    1e20:	movt	r3, #0
    1e24:	mov	r2, #0
    1e28:	ldr	r1, [fp, #-12]
    1e2c:	ldr	r0, [fp, #-8]
    1e30:	bl	0 <flatcc_json_printer_int32_field>
    1e34:	nop	{0}
    1e38:	sub	sp, fp, #4
    1e3c:	ldr	fp, [sp]
    1e40:	add	sp, sp, #4
    1e44:	pop	{pc}		; (ldr pc, [sp], #4)

00001e48 <Fantasy_Movie_print_json_table>:
    1e48:	str	fp, [sp, #-8]!
    1e4c:	str	lr, [sp, #4]
    1e50:	add	fp, sp, #4
    1e54:	sub	sp, sp, #24
    1e58:	str	r0, [fp, #-8]
    1e5c:	str	r1, [fp, #-12]
    1e60:	movw	r3, #0
    1e64:	movt	r3, #0
    1e68:	str	r3, [sp, #8]
    1e6c:	movw	r3, #0
    1e70:	movt	r3, #0
    1e74:	str	r3, [sp, #4]
    1e78:	mov	r3, #14
    1e7c:	str	r3, [sp]
    1e80:	movw	r3, #0
    1e84:	movt	r3, #0
    1e88:	mov	r2, #1
    1e8c:	ldr	r1, [fp, #-12]
    1e90:	ldr	r0, [fp, #-8]
    1e94:	bl	0 <flatcc_json_printer_union_field>
    1e98:	movw	r3, #0
    1e9c:	movt	r3, #0
    1ea0:	str	r3, [sp, #8]
    1ea4:	movw	r3, #0
    1ea8:	movt	r3, #0
    1eac:	str	r3, [sp, #4]
    1eb0:	mov	r3, #10
    1eb4:	str	r3, [sp]
    1eb8:	movw	r3, #0
    1ebc:	movt	r3, #0
    1ec0:	mov	r2, #3
    1ec4:	ldr	r1, [fp, #-12]
    1ec8:	ldr	r0, [fp, #-8]
    1ecc:	bl	0 <flatcc_json_printer_union_field>
    1ed0:	movw	r3, #0
    1ed4:	movt	r3, #0
    1ed8:	str	r3, [sp, #8]
    1edc:	movw	r3, #0
    1ee0:	movt	r3, #0
    1ee4:	str	r3, [sp, #4]
    1ee8:	mov	r3, #9
    1eec:	str	r3, [sp]
    1ef0:	movw	r3, #0
    1ef4:	movt	r3, #0
    1ef8:	mov	r2, #5
    1efc:	ldr	r1, [fp, #-12]
    1f00:	ldr	r0, [fp, #-8]
    1f04:	bl	0 <flatcc_json_printer_union_field>
    1f08:	movw	r3, #0
    1f0c:	movt	r3, #0
    1f10:	str	r3, [sp, #8]
    1f14:	movw	r3, #0
    1f18:	movt	r3, #0
    1f1c:	str	r3, [sp, #4]
    1f20:	mov	r3, #5
    1f24:	str	r3, [sp]
    1f28:	movw	r3, #0
    1f2c:	movt	r3, #0
    1f30:	mov	r2, #7
    1f34:	ldr	r1, [fp, #-12]
    1f38:	ldr	r0, [fp, #-8]
    1f3c:	bl	0 <flatcc_json_printer_union_field>
    1f40:	movw	r3, #0
    1f44:	movt	r3, #0
    1f48:	str	r3, [sp, #8]
    1f4c:	movw	r3, #0
    1f50:	movt	r3, #0
    1f54:	str	r3, [sp, #4]
    1f58:	mov	r3, #10
    1f5c:	str	r3, [sp]
    1f60:	movw	r3, #0
    1f64:	movt	r3, #0
    1f68:	mov	r2, #9
    1f6c:	ldr	r1, [fp, #-12]
    1f70:	ldr	r0, [fp, #-8]
    1f74:	bl	0 <flatcc_json_printer_union_vector_field>
    1f78:	nop	{0}
    1f7c:	sub	sp, fp, #4
    1f80:	ldr	fp, [sp]
    1f84:	add	sp, sp, #4
    1f88:	pop	{pc}		; (ldr pc, [sp], #4)

00001f8c <monster_test_print_json>:
    1f8c:	str	fp, [sp, #-8]!
    1f90:	str	lr, [sp, #4]
    1f94:	add	fp, sp, #4
    1f98:	sub	sp, sp, #64	; 0x40
    1f9c:	str	r0, [fp, #-56]	; 0xffffffc8
    1fa0:	str	r1, [fp, #-60]	; 0xffffffc4
    1fa4:	str	r2, [fp, #-64]	; 0xffffffc0
    1fa8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1fac:	cmp	r3, #0
    1fb0:	bne	1fc8 <monster_test_print_json+0x3c>
    1fb4:	sub	r3, fp, #52	; 0x34
    1fb8:	str	r3, [fp, #-56]	; 0xffffffc8
    1fbc:	mov	r1, #0
    1fc0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    1fc4:	bl	0 <flatcc_json_printer_init>
    1fc8:	movw	r3, #0
    1fcc:	movt	r3, #0
    1fd0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    1fd4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    1fd8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    1fdc:	bl	1b90 <MyGame_Example_Monster_print_json_as_root>
    1fe0:	mov	r3, r0
    1fe4:	mov	r0, r3
    1fe8:	sub	sp, fp, #4
    1fec:	ldr	fp, [sp]
    1ff0:	add	sp, sp, #4
    1ff4:	pop	{pc}		; (ldr pc, [sp], #4)

00001ff8 <readfile>:
    1ff8:	str	fp, [sp, #-8]!
    1ffc:	str	lr, [sp, #4]
    2000:	add	fp, sp, #4
    2004:	sub	sp, sp, #40	; 0x28
    2008:	str	r0, [fp, #-32]	; 0xffffffe0
    200c:	str	r1, [fp, #-36]	; 0xffffffdc
    2010:	str	r2, [fp, #-40]	; 0xffffffd8
    2014:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2018:	cmp	r3, #0
    201c:	bne	2028 <readfile+0x30>
    2020:	sub	r3, fp, #28
    2024:	b	202c <readfile+0x34>
    2028:	ldr	r3, [fp, #-40]	; 0xffffffd8
    202c:	str	r3, [fp, #-40]	; 0xffffffd8
    2030:	movw	r1, #0
    2034:	movt	r1, #0
    2038:	ldr	r0, [fp, #-32]	; 0xffffffe0
    203c:	bl	0 <fopen>
    2040:	str	r0, [fp, #-20]	; 0xffffffec
    2044:	mov	r3, #0
    2048:	str	r3, [fp, #-8]
    204c:	mov	r3, #0
    2050:	str	r3, [fp, #-16]
    2054:	ldr	r3, [fp, #-20]	; 0xffffffec
    2058:	cmp	r3, #0
    205c:	beq	2160 <readfile+0x168>
    2060:	mov	r2, #2
    2064:	mov	r1, #0
    2068:	ldr	r0, [fp, #-20]	; 0xffffffec
    206c:	bl	0 <fseek>
    2070:	ldr	r0, [fp, #-20]	; 0xffffffec
    2074:	bl	0 <ftell>
    2078:	mov	r3, r0
    207c:	str	r3, [fp, #-8]
    2080:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2084:	ldr	r2, [fp, #-8]
    2088:	str	r2, [r3]
    208c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2090:	cmp	r3, #0
    2094:	beq	20a8 <readfile+0xb0>
    2098:	ldr	r2, [fp, #-8]
    209c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    20a0:	cmp	r2, r3
    20a4:	bhi	2168 <readfile+0x170>
    20a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    20ac:	bl	0 <rewind>
    20b0:	ldr	r3, [fp, #-8]
    20b4:	cmp	r3, #0
    20b8:	beq	20c4 <readfile+0xcc>
    20bc:	ldr	r3, [fp, #-8]
    20c0:	b	20c8 <readfile+0xd0>
    20c4:	mov	r3, #1
    20c8:	mov	r0, r3
    20cc:	bl	0 <malloc>
    20d0:	mov	r3, r0
    20d4:	str	r3, [fp, #-16]
    20d8:	ldr	r3, [fp, #-16]
    20dc:	cmp	r3, #0
    20e0:	beq	2170 <readfile+0x178>
    20e4:	mov	r3, #0
    20e8:	str	r3, [fp, #-12]
    20ec:	b	2100 <readfile+0x108>
    20f0:	ldr	r2, [fp, #-12]
    20f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    20f8:	add	r3, r2, r3
    20fc:	str	r3, [fp, #-12]
    2100:	ldr	r2, [fp, #-16]
    2104:	ldr	r3, [fp, #-12]
    2108:	add	r0, r2, r3
    210c:	ldr	r2, [fp, #-8]
    2110:	ldr	r3, [fp, #-12]
    2114:	sub	r2, r2, r3
    2118:	ldr	r3, [fp, #-20]	; 0xffffffec
    211c:	mov	r1, #1
    2120:	bl	0 <fread>
    2124:	str	r0, [fp, #-24]	; 0xffffffe8
    2128:	ldr	r3, [fp, #-24]	; 0xffffffe8
    212c:	cmp	r3, #0
    2130:	bne	20f0 <readfile+0xf8>
    2134:	ldr	r2, [fp, #-12]
    2138:	ldr	r3, [fp, #-8]
    213c:	cmp	r2, r3
    2140:	bne	2178 <readfile+0x180>
    2144:	ldr	r0, [fp, #-20]	; 0xffffffec
    2148:	bl	0 <fclose>
    214c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2150:	ldr	r2, [fp, #-8]
    2154:	str	r2, [r3]
    2158:	ldr	r3, [fp, #-16]
    215c:	b	21b4 <readfile+0x1bc>
    2160:	nop	{0}
    2164:	b	217c <readfile+0x184>
    2168:	nop	{0}
    216c:	b	217c <readfile+0x184>
    2170:	nop	{0}
    2174:	b	217c <readfile+0x184>
    2178:	nop	{0}
    217c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2180:	cmp	r3, #0
    2184:	beq	2190 <readfile+0x198>
    2188:	ldr	r0, [fp, #-20]	; 0xffffffec
    218c:	bl	0 <fclose>
    2190:	ldr	r3, [fp, #-16]
    2194:	cmp	r3, #0
    2198:	beq	21a4 <readfile+0x1ac>
    219c:	ldr	r0, [fp, #-16]
    21a0:	bl	0 <free>
    21a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    21a8:	ldr	r2, [fp, #-8]
    21ac:	str	r2, [r3]
    21b0:	mov	r3, #0
    21b4:	mov	r0, r3
    21b8:	sub	sp, fp, #4
    21bc:	ldr	fp, [sp]
    21c0:	add	sp, sp, #4
    21c4:	pop	{pc}		; (ldr pc, [sp], #4)

000021c8 <test_print>:
    21c8:	str	fp, [sp, #-8]!
    21cc:	str	lr, [sp, #4]
    21d0:	add	fp, sp, #4
    21d4:	sub	sp, sp, #88	; 0x58
    21d8:	mov	r3, #0
    21dc:	str	r3, [fp, #-8]
    21e0:	mov	r3, #0
    21e4:	str	r3, [fp, #-12]
    21e8:	mov	r3, #0
    21ec:	str	r3, [fp, #-16]
    21f0:	mov	r3, #0
    21f4:	str	r3, [fp, #-20]	; 0xffffffec
    21f8:	mov	r3, #0
    21fc:	str	r3, [fp, #-32]	; 0xffffffe0
    2200:	mov	r3, #0
    2204:	str	r3, [fp, #-36]	; 0xffffffdc
    2208:	mov	r3, #0
    220c:	str	r3, [fp, #-40]	; 0xffffffd8
    2210:	mov	r3, #0
    2214:	str	r3, [fp, #-24]	; 0xffffffe8
    2218:	sub	r3, fp, #88	; 0x58
    221c:	str	r3, [fp, #-28]	; 0xffffffe4
    2220:	movw	r3, #0
    2224:	movt	r3, #0
    2228:	ldr	r3, [r3]
    222c:	movw	r1, #0
    2230:	movt	r1, #0
    2234:	mov	r0, r3
    2238:	bl	0 <fopen>
    223c:	str	r0, [fp, #-24]	; 0xffffffe8
    2240:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2244:	cmp	r3, #0
    2248:	bne	227c <test_print+0xb4>
    224c:	movw	r3, #0
    2250:	movt	r3, #0
    2254:	ldr	r0, [r3]
    2258:	movw	r3, #0
    225c:	movt	r3, #0
    2260:	ldr	r3, [r3]
    2264:	mov	r2, r3
    2268:	movw	r1, #0
    226c:	movt	r1, #0
    2270:	bl	0 <fprintf>
    2274:	mvn	r3, #0
    2278:	b	2538 <test_print+0x370>
    227c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2280:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2284:	bl	0 <flatcc_json_printer_init>
    2288:	ldr	r0, [fp, #-28]	; 0xffffffe4
    228c:	bl	e4 <flatcc_json_printer_set_nonstrict>
    2290:	movw	r3, #0
    2294:	movt	r3, #0
    2298:	ldr	r3, [r3]
    229c:	cmp	r3, #0
    22a0:	beq	22f0 <test_print+0x128>
    22a4:	movw	r3, #0
    22a8:	movt	r3, #0
    22ac:	ldr	r3, [r3]
    22b0:	movw	r1, #0
    22b4:	movt	r1, #0
    22b8:	mov	r0, r3
    22bc:	bl	0 <strcmp>
    22c0:	mov	r3, r0
    22c4:	cmp	r3, #0
    22c8:	beq	22f0 <test_print+0x128>
    22cc:	movw	r3, #0
    22d0:	movt	r3, #0
    22d4:	ldr	r3, [r3]
    22d8:	sub	r2, fp, #32
    22dc:	mov	r1, #10240	; 0x2800
    22e0:	mov	r0, r3
    22e4:	bl	1ff8 <readfile>
    22e8:	str	r0, [fp, #-12]
    22ec:	b	2304 <test_print+0x13c>
    22f0:	movw	r3, #0
    22f4:	movt	r3, #0
    22f8:	str	r3, [fp, #-12]
    22fc:	mov	r3, #288	; 0x120
    2300:	str	r3, [fp, #-32]	; 0xffffffe0
    2304:	ldr	r3, [fp, #-12]
    2308:	cmp	r3, #0
    230c:	bne	233c <test_print+0x174>
    2310:	movw	r3, #0
    2314:	movt	r3, #0
    2318:	ldr	r0, [r3]
    231c:	movw	r3, #0
    2320:	movt	r3, #0
    2324:	ldr	r3, [r3]
    2328:	mov	r2, r3
    232c:	movw	r1, #0
    2330:	movt	r1, #0
    2334:	bl	0 <fprintf>
    2338:	b	252c <test_print+0x364>
    233c:	movw	r3, #0
    2340:	movt	r3, #0
    2344:	ldr	r3, [r3]
    2348:	sub	r2, fp, #36	; 0x24
    234c:	mov	r1, #10240	; 0x2800
    2350:	mov	r0, r3
    2354:	bl	1ff8 <readfile>
    2358:	str	r0, [fp, #-16]
    235c:	ldr	r3, [fp, #-16]
    2360:	cmp	r3, #0
    2364:	bne	2394 <test_print+0x1cc>
    2368:	movw	r3, #0
    236c:	movt	r3, #0
    2370:	ldr	r0, [r3]
    2374:	movw	r3, #0
    2378:	movt	r3, #0
    237c:	ldr	r3, [r3]
    2380:	mov	r2, r3
    2384:	movw	r1, #0
    2388:	movt	r1, #0
    238c:	bl	0 <fprintf>
    2390:	b	252c <test_print+0x364>
    2394:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2398:	movw	r3, #0
    239c:	movt	r3, #0
    23a0:	ldr	r1, [fp, #-12]
    23a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    23a8:	bl	1b90 <MyGame_Example_Monster_print_json_as_root>
    23ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
    23b0:	bl	170 <flatcc_json_printer_flush>
    23b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    23b8:	bl	0 <flatcc_json_printer_get_error>
    23bc:	mov	r3, r0
    23c0:	cmp	r3, #0
    23c4:	beq	23d4 <test_print+0x20c>
    23c8:	movw	r0, #0
    23cc:	movt	r0, #0
    23d0:	bl	0 <puts>
    23d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    23d8:	bl	0 <fclose>
    23dc:	mov	r3, #0
    23e0:	str	r3, [fp, #-24]	; 0xffffffe8
    23e4:	movw	r3, #0
    23e8:	movt	r3, #0
    23ec:	ldr	r3, [r3]
    23f0:	sub	r2, fp, #40	; 0x28
    23f4:	mov	r1, #10240	; 0x2800
    23f8:	mov	r0, r3
    23fc:	bl	1ff8 <readfile>
    2400:	str	r0, [fp, #-20]	; 0xffffffec
    2404:	ldr	r3, [fp, #-20]	; 0xffffffec
    2408:	cmp	r3, #0
    240c:	bne	243c <test_print+0x274>
    2410:	movw	r3, #0
    2414:	movt	r3, #0
    2418:	ldr	r0, [r3]
    241c:	movw	r3, #0
    2420:	movt	r3, #0
    2424:	ldr	r3, [r3]
    2428:	mov	r2, r3
    242c:	movw	r1, #0
    2430:	movt	r1, #0
    2434:	bl	0 <fprintf>
    2438:	b	252c <test_print+0x364>
    243c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2440:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2444:	cmp	r2, r3
    2448:	bne	246c <test_print+0x2a4>
    244c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2450:	mov	r2, r3
    2454:	ldr	r1, [fp, #-16]
    2458:	ldr	r0, [fp, #-20]	; 0xffffffec
    245c:	bl	0 <memcmp>
    2460:	mov	r3, r0
    2464:	cmp	r3, #0
    2468:	beq	2490 <test_print+0x2c8>
    246c:	movw	r3, #0
    2470:	movt	r3, #0
    2474:	ldr	r3, [r3]
    2478:	mov	r2, #54	; 0x36
    247c:	mov	r1, #1
    2480:	movw	r0, #0
    2484:	movt	r0, #0
    2488:	bl	0 <fwrite>
    248c:	b	252c <test_print+0x364>
    2490:	movw	r3, #0
    2494:	movt	r3, #0
    2498:	ldr	r3, [r3]
    249c:	mov	r2, #26
    24a0:	mov	r1, #1
    24a4:	movw	r0, #0
    24a8:	movt	r0, #0
    24ac:	bl	0 <fwrite>
    24b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    24b4:	bl	0 <flatcc_json_printer_clear>
    24b8:	movw	r3, #0
    24bc:	movt	r3, #0
    24c0:	ldr	r3, [r3]
    24c4:	cmp	r3, #0
    24c8:	bne	24d4 <test_print+0x30c>
    24cc:	mov	r3, #0
    24d0:	str	r3, [fp, #-12]
    24d4:	ldr	r3, [fp, #-12]
    24d8:	cmp	r3, #0
    24dc:	beq	24e8 <test_print+0x320>
    24e0:	ldr	r0, [fp, #-12]
    24e4:	bl	0 <free>
    24e8:	ldr	r3, [fp, #-16]
    24ec:	cmp	r3, #0
    24f0:	beq	24fc <test_print+0x334>
    24f4:	ldr	r0, [fp, #-16]
    24f8:	bl	0 <free>
    24fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    2500:	cmp	r3, #0
    2504:	beq	2510 <test_print+0x348>
    2508:	ldr	r0, [fp, #-20]	; 0xffffffec
    250c:	bl	0 <free>
    2510:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2514:	cmp	r3, #0
    2518:	beq	2524 <test_print+0x35c>
    251c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2520:	bl	0 <fclose>
    2524:	ldr	r3, [fp, #-8]
    2528:	b	2538 <test_print+0x370>
    252c:	mvn	r3, #0
    2530:	str	r3, [fp, #-8]
    2534:	b	24b0 <test_print+0x2e8>
    2538:	mov	r0, r3
    253c:	sub	sp, fp, #4
    2540:	ldr	fp, [sp]
    2544:	add	sp, sp, #4
    2548:	pop	{pc}		; (ldr pc, [sp], #4)

0000254c <main>:
    254c:	str	fp, [sp, #-8]!
    2550:	str	lr, [sp, #4]
    2554:	add	fp, sp, #4
    2558:	sub	sp, sp, #8
    255c:	str	r0, [fp, #-8]
    2560:	str	r1, [fp, #-12]
    2564:	movw	r3, #0
    2568:	movt	r3, #0
    256c:	ldr	r3, [r3]
    2570:	mov	r2, #24
    2574:	mov	r1, #1
    2578:	movw	r0, #0
    257c:	movt	r0, #0
    2580:	bl	0 <fwrite>
    2584:	ldr	r3, [fp, #-8]
    2588:	cmp	r3, #1
    258c:	beq	25c4 <main+0x78>
    2590:	ldr	r3, [fp, #-8]
    2594:	cmp	r3, #4
    2598:	beq	25c4 <main+0x78>
    259c:	movw	r3, #0
    25a0:	movt	r3, #0
    25a4:	ldr	r3, [r3]
    25a8:	mov	r2, #191	; 0xbf
    25ac:	mov	r1, #1
    25b0:	movw	r0, #0
    25b4:	movt	r0, #0
    25b8:	bl	0 <fwrite>
    25bc:	mov	r0, #1
    25c0:	bl	0 <exit>
    25c4:	ldr	r3, [fp, #-8]
    25c8:	cmp	r3, #4
    25cc:	bne	260c <main+0xc0>
    25d0:	ldr	r3, [fp, #-12]
    25d4:	ldr	r2, [r3, #4]
    25d8:	movw	r3, #0
    25dc:	movt	r3, #0
    25e0:	str	r2, [r3]
    25e4:	ldr	r3, [fp, #-12]
    25e8:	ldr	r2, [r3, #8]
    25ec:	movw	r3, #0
    25f0:	movt	r3, #0
    25f4:	str	r2, [r3]
    25f8:	ldr	r3, [fp, #-12]
    25fc:	ldr	r2, [r3, #12]
    2600:	movw	r3, #0
    2604:	movt	r3, #0
    2608:	str	r2, [r3]
    260c:	bl	21c8 <test_print>
    2610:	mov	r3, r0
    2614:	mov	r0, r3
    2618:	sub	sp, fp, #4
    261c:	ldr	fp, [sp]
    2620:	add	sp, sp, #4
    2624:	pop	{pc}		; (ldr pc, [sp], #4)
