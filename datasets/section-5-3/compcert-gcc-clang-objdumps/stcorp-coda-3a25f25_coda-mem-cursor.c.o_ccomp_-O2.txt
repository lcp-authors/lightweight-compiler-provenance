
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #640	; 0x280
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	str	r6, [sp, #16]
      1c:	str	r7, [sp, #20]
      20:	str	r8, [sp, #24]
      24:	str	r9, [sp, #28]
      28:	str	sl, [sp, #32]
      2c:	ldr	r6, [ip]
      30:	mov	r5, r3
      34:	mov	r9, r2
      38:	mov	r7, r1
      3c:	mov	r4, r0
      40:	add	r1, sp, #40	; 0x28
      44:	add	r2, sp, #48	; 0x30
      48:	mov	r0, r4
      4c:	bl	0 <coda_cursor_get_array_dim>
      50:	cmp	r0, #0
      54:	beq	60 <read_array+0x60>
      58:	mvn	r0, #0
      5c:	b	28c <read_array+0x28c>
      60:	mov	r2, r4
      64:	add	r3, sp, #120	; 0x78
      68:	mov	lr, #130	; 0x82
      6c:	ldr	ip, [r2], #4
      70:	subs	lr, lr, #1
      74:	str	ip, [r3], #4
      78:	bne	6c <read_array+0x6c>
      7c:	mov	ip, #1
      80:	cmp	r6, #1
      84:	movne	r0, #1
      88:	moveq	r0, #0
      8c:	ldr	r1, [sp, #40]	; 0x28
      90:	cmp	r1, #1
      94:	movle	ip, ip
      98:	movgt	ip, r0
      9c:	cmp	ip, #0
      a0:	bne	1e8 <read_array+0x1e8>
      a4:	mov	r2, #1
      a8:	str	r2, [sp, #80]	; 0x50
      ac:	mov	r4, #0
      b0:	ldr	r1, [sp, #40]	; 0x28
      b4:	cmp	r4, r1
      b8:	bge	e8 <read_array+0xe8>
      bc:	add	r1, sp, #80	; 0x50
      c0:	lsl	r2, r4, #2
      c4:	add	r0, r1, r2
      c8:	add	r2, sp, #80	; 0x50
      cc:	ldr	r2, [r2, r4, lsl #2]
      d0:	add	ip, sp, #48	; 0x30
      d4:	ldr	r1, [ip, r4, lsl #2]
      d8:	mul	r3, r2, r1
      dc:	str	r3, [r0, #4]
      e0:	add	r4, r4, #1
      e4:	b	b0 <read_array+0xb0>
      e8:	add	r2, sp, #80	; 0x50
      ec:	lsl	r3, r1, #2
      f0:	add	ip, r2, r3
      f4:	sub	lr, ip, #4096	; 0x1000
      f8:	ldr	r6, [lr, #4092]	; 0xffc
      fc:	add	r3, sp, #80	; 0x50
     100:	ldr	r8, [r3, r1, lsl #2]
     104:	cmp	r8, #0
     108:	ble	288 <read_array+0x288>
     10c:	mov	r4, #0
     110:	mov	sl, #0
     114:	add	r0, sp, #120	; 0x78
     118:	mov	r1, #0
     11c:	bl	0 <coda_cursor_goto_array_element_by_index>
     120:	cmp	r0, #0
     124:	beq	130 <read_array+0x130>
     128:	mvn	r0, #0
     12c:	b	28c <read_array+0x28c>
     130:	add	r0, sp, #120	; 0x78
     134:	mla	r1, sl, r5, r9
     138:	blx	r7
     13c:	cmp	r0, #0
     140:	beq	14c <read_array+0x14c>
     144:	mvn	r0, #0
     148:	b	28c <read_array+0x28c>
     14c:	add	r4, r4, #1
     150:	cmp	r4, r8
     154:	bge	170 <read_array+0x170>
     158:	add	r0, sp, #120	; 0x78
     15c:	bl	0 <coda_cursor_goto_next_array_element>
     160:	cmp	r0, #0
     164:	beq	170 <read_array+0x170>
     168:	mvn	r0, #0
     16c:	b	28c <read_array+0x28c>
     170:	add	sl, sl, r6
     174:	cmp	sl, r8
     178:	blt	130 <read_array+0x130>
     17c:	cmp	r4, r8
     180:	beq	288 <read_array+0x288>
     184:	add	r3, sp, #80	; 0x50
     188:	ldr	r2, [sp, #40]	; 0x28
     18c:	lsl	ip, r2, #2
     190:	add	r1, r3, ip
     194:	sub	lr, r1, #4096	; 0x1000
     198:	ldr	r3, [lr, #4088]	; 0xff8
     19c:	add	r1, sp, #80	; 0x50
     1a0:	ldr	r1, [r1, r2, lsl #2]
     1a4:	sub	r0, r3, r1
     1a8:	add	sl, sl, r0
     1ac:	sub	ip, r2, #3
     1b0:	cmp	ip, #0
     1b4:	blt	130 <read_array+0x130>
     1b8:	add	r0, sp, #80	; 0x50
     1bc:	lsl	r2, ip, #2
     1c0:	add	r3, r0, r2
     1c4:	ldr	r0, [r3, #8]
     1c8:	cmp	sl, r0
     1cc:	blt	130 <read_array+0x130>
     1d0:	add	r1, sp, #80	; 0x50
     1d4:	ldr	r1, [r1, ip, lsl #2]
     1d8:	sub	r0, r1, r0
     1dc:	add	sl, sl, r0
     1e0:	sub	ip, ip, #1
     1e4:	b	1b0 <read_array+0x1b0>
     1e8:	mov	r6, #1
     1ec:	mov	r0, #0
     1f0:	ldr	r2, [sp, #40]	; 0x28
     1f4:	cmp	r0, r2
     1f8:	bge	210 <read_array+0x210>
     1fc:	add	r3, sp, #48	; 0x30
     200:	ldr	r2, [r3, r0, lsl #2]
     204:	mul	r6, r6, r2
     208:	add	r0, r0, #1
     20c:	b	1f0 <read_array+0x1f0>
     210:	cmp	r6, #0
     214:	ble	288 <read_array+0x288>
     218:	add	r0, sp, #120	; 0x78
     21c:	mov	r1, #0
     220:	bl	0 <coda_cursor_goto_array_element_by_index>
     224:	cmp	r0, #0
     228:	beq	234 <read_array+0x234>
     22c:	mvn	r0, #0
     230:	b	28c <read_array+0x28c>
     234:	mov	r4, #0
     238:	cmp	r4, r6
     23c:	bge	288 <read_array+0x288>
     240:	add	r0, sp, #120	; 0x78
     244:	mla	r1, r4, r5, r9
     248:	blx	r7
     24c:	cmp	r0, #0
     250:	beq	25c <read_array+0x25c>
     254:	mvn	r0, #0
     258:	b	28c <read_array+0x28c>
     25c:	sub	r3, r6, #1
     260:	cmp	r4, r3
     264:	bge	280 <read_array+0x280>
     268:	add	r0, sp, #120	; 0x78
     26c:	bl	0 <coda_cursor_goto_next_array_element>
     270:	cmp	r0, #0
     274:	beq	280 <read_array+0x280>
     278:	mvn	r0, #0
     27c:	b	28c <read_array+0x28c>
     280:	add	r4, r4, #1
     284:	b	238 <read_array+0x238>
     288:	mov	r0, #0
     28c:	ldr	r4, [sp, #8]
     290:	ldr	r5, [sp, #12]
     294:	ldr	r6, [sp, #16]
     298:	ldr	r7, [sp, #20]
     29c:	ldr	r8, [sp, #24]
     2a0:	ldr	r9, [sp, #28]
     2a4:	ldr	sl, [sp, #32]
     2a8:	ldr	lr, [sp, #4]
     2ac:	add	sp, sp, #640	; 0x280
     2b0:	bx	lr

000002b4 <read_partial_array>:
     2b4:	mov	ip, sp
     2b8:	sub	sp, sp, #552	; 0x228
     2bc:	str	ip, [sp]
     2c0:	str	lr, [sp, #4]
     2c4:	str	r4, [sp, #8]
     2c8:	str	r5, [sp, #12]
     2cc:	str	r6, [sp, #16]
     2d0:	str	r7, [sp, #20]
     2d4:	str	r8, [sp, #24]
     2d8:	ldr	r7, [ip, #4]
     2dc:	ldr	r5, [ip]
     2e0:	mov	r6, r3
     2e4:	mov	r4, r1
     2e8:	mov	r1, r2
     2ec:	mov	r2, r0
     2f0:	add	r3, sp, #32
     2f4:	mov	lr, #130	; 0x82
     2f8:	ldr	ip, [r2], #4
     2fc:	subs	lr, lr, #1
     300:	str	ip, [r3], #4
     304:	bne	2f8 <read_partial_array+0x44>
     308:	cmp	r6, #0
     30c:	ble	37c <read_partial_array+0xc8>
     310:	add	r0, sp, #32
     314:	bl	0 <coda_cursor_goto_array_element_by_index>
     318:	cmp	r0, #0
     31c:	beq	328 <read_partial_array+0x74>
     320:	mvn	r0, #0
     324:	b	380 <read_partial_array+0xcc>
     328:	mov	r8, #0
     32c:	cmp	r8, r6
     330:	bge	37c <read_partial_array+0xc8>
     334:	add	r0, sp, #32
     338:	mla	r1, r8, r7, r5
     33c:	blx	r4
     340:	cmp	r0, #0
     344:	beq	350 <read_partial_array+0x9c>
     348:	mvn	r0, #0
     34c:	b	380 <read_partial_array+0xcc>
     350:	sub	r3, r6, #1
     354:	cmp	r8, r3
     358:	bge	374 <read_partial_array+0xc0>
     35c:	add	r0, sp, #32
     360:	bl	0 <coda_cursor_goto_next_array_element>
     364:	cmp	r0, #0
     368:	beq	374 <read_partial_array+0xc0>
     36c:	mvn	r0, #0
     370:	b	380 <read_partial_array+0xcc>
     374:	add	r8, r8, #1
     378:	b	32c <read_partial_array+0x78>
     37c:	mov	r0, #0
     380:	ldr	r4, [sp, #8]
     384:	ldr	r5, [sp, #12]
     388:	ldr	r6, [sp, #16]
     38c:	ldr	r7, [sp, #20]
     390:	ldr	r8, [sp, #24]
     394:	ldr	lr, [sp, #4]
     398:	add	sp, sp, #552	; 0x228
     39c:	bx	lr

000003a0 <transpose_array>:
     3a0:	mov	ip, sp
     3a4:	sub	sp, sp, #200	; 0xc8
     3a8:	str	ip, [sp, #4]
     3ac:	str	lr, [sp, #8]
     3b0:	str	r4, [sp, #16]
     3b4:	str	r5, [sp, #20]
     3b8:	str	r6, [sp, #24]
     3bc:	str	r7, [sp, #28]
     3c0:	str	r8, [sp, #32]
     3c4:	str	r9, [sp, #36]	; 0x24
     3c8:	mov	r6, r2
     3cc:	mov	r5, r1
     3d0:	mov	r7, #0
     3d4:	add	r1, sp, #40	; 0x28
     3d8:	add	r2, sp, #48	; 0x30
     3dc:	bl	0 <coda_cursor_get_array_dim>
     3e0:	cmp	r0, #0
     3e4:	beq	3f0 <transpose_array+0x50>
     3e8:	mvn	r0, #0
     3ec:	b	7f8 <transpose_array+0x458>
     3f0:	ldr	r0, [sp, #40]	; 0x28
     3f4:	cmp	r0, #1
     3f8:	bgt	404 <transpose_array+0x64>
     3fc:	mov	r0, #0
     400:	b	7f8 <transpose_array+0x458>
     404:	mov	r8, #1
     408:	mov	ip, #0
     40c:	ldr	r2, [sp, #40]	; 0x28
     410:	cmp	ip, r2
     414:	bge	45c <transpose_array+0xbc>
     418:	add	r0, sp, #48	; 0x30
     41c:	ldr	r2, [r0, ip, lsl #2]
     420:	mul	r8, r8, r2
     424:	add	r2, sp, #160	; 0xa0
     428:	mov	r1, #0
     42c:	str	r1, [r2, ip, lsl #2]
     430:	add	r4, sp, #80	; 0x50
     434:	add	r2, sp, #48	; 0x30
     438:	ldr	r1, [sp, #40]	; 0x28
     43c:	sub	r1, r1, ip
     440:	lsl	r3, r1, #2
     444:	add	r1, r2, r3
     448:	sub	lr, r1, #4096	; 0x1000
     44c:	ldr	r0, [lr, #4092]	; 0xffc
     450:	str	r0, [r4, ip, lsl #2]
     454:	add	ip, ip, #1
     458:	b	40c <transpose_array+0x6c>
     45c:	cmp	r8, #1
     460:	bgt	46c <transpose_array+0xcc>
     464:	mov	r0, #0
     468:	b	7f8 <transpose_array+0x458>
     46c:	add	r1, sp, #120	; 0x78
     470:	mov	r3, #1
     474:	str	r3, [r1, r2, lsl #2]
     478:	add	r1, sp, #80	; 0x50
     47c:	ldr	r2, [sp, #40]	; 0x28
     480:	mov	r3, #1
     484:	str	r3, [r1, r2, lsl #2]
     488:	ldr	r3, [sp, #40]	; 0x28
     48c:	cmp	r3, #0
     490:	ble	4c4 <transpose_array+0x124>
     494:	add	r2, sp, #120	; 0x78
     498:	lsl	r1, r3, #2
     49c:	add	r4, r2, r1
     4a0:	add	ip, sp, #120	; 0x78
     4a4:	ldr	ip, [ip, r3, lsl #2]
     4a8:	add	r1, sp, #80	; 0x50
     4ac:	ldr	r0, [r1, r3, lsl #2]
     4b0:	mul	r2, ip, r0
     4b4:	sub	lr, r4, #4096	; 0x1000
     4b8:	str	r2, [lr, #4092]	; 0xffc
     4bc:	sub	r3, r3, #1
     4c0:	b	48c <transpose_array+0xec>
     4c4:	add	ip, sp, #80	; 0x50
     4c8:	ldr	r2, [sp, #40]	; 0x28
     4cc:	mov	r1, #0
     4d0:	str	r1, [ip, r2, lsl #2]
     4d4:	add	r2, sp, #160	; 0xa0
     4d8:	ldr	ip, [sp, #40]	; 0x28
     4dc:	mov	r3, #0
     4e0:	str	r3, [r2, ip, lsl #2]
     4e4:	mul	r0, r8, r6
     4e8:	bl	0 <malloc>
     4ec:	mov	r4, r0
     4f0:	cmp	r4, #0
     4f4:	bne	51c <transpose_array+0x17c>
     4f8:	mvn	r0, #0
     4fc:	ldr	r1, [pc, #804]	; 828 <transpose_array+0x488>
     500:	mul	r2, r8, r6
     504:	ldr	r3, [pc, #792]	; 824 <transpose_array+0x484>
     508:	mov	r4, #93	; 0x5d
     50c:	str	r4, [sp]
     510:	bl	0 <coda_set_error>
     514:	mvn	r0, #0
     518:	b	7f8 <transpose_array+0x458>
     51c:	cmp	r6, #4
     520:	bcs	66c <transpose_array+0x2cc>
     524:	cmp	r6, #1
     528:	beq	5d4 <transpose_array+0x234>
     52c:	cmp	r6, #2
     530:	bne	724 <transpose_array+0x384>
     534:	mov	r3, #0
     538:	cmp	r3, r8
     53c:	bge	7dc <transpose_array+0x43c>
     540:	mov	r2, #0
     544:	add	r0, r4, r7, lsl #1
     548:	add	ip, r5, r3, lsl #1
     54c:	ldrh	r1, [ip]
     550:	strh	r1, [r0]
     554:	ldr	r0, [sp, #120]	; 0x78
     558:	add	r7, r7, r0
     55c:	ldr	ip, [sp, #160]	; 0xa0
     560:	add	r1, ip, #1
     564:	str	r1, [sp, #160]	; 0xa0
     568:	add	r1, sp, #160	; 0xa0
     56c:	ldr	r1, [r1, r2, lsl #2]
     570:	add	ip, sp, #80	; 0x50
     574:	ldr	r0, [ip, r2, lsl #2]
     578:	cmp	r1, r0
     57c:	bne	5cc <transpose_array+0x22c>
     580:	add	ip, sp, #160	; 0xa0
     584:	mov	r0, #0
     588:	str	r0, [ip, r2, lsl #2]
     58c:	add	r0, sp, #120	; 0x78
     590:	ldr	ip, [r0, r2, lsl #2]
     594:	add	r1, sp, #80	; 0x50
     598:	ldr	r0, [r1, r2, lsl #2]
     59c:	mul	ip, ip, r0
     5a0:	sub	r1, r7, ip
     5a4:	add	r2, r2, #1
     5a8:	add	ip, sp, #120	; 0x78
     5ac:	ldr	ip, [ip, r2, lsl #2]
     5b0:	add	r7, r1, ip
     5b4:	add	r1, sp, #160	; 0xa0
     5b8:	add	r0, sp, #160	; 0xa0
     5bc:	ldr	ip, [r0, r2, lsl #2]
     5c0:	add	ip, ip, #1
     5c4:	str	ip, [r1, r2, lsl #2]
     5c8:	b	568 <transpose_array+0x1c8>
     5cc:	add	r3, r3, #1
     5d0:	b	538 <transpose_array+0x198>
     5d4:	mov	r3, #0
     5d8:	cmp	r3, r8
     5dc:	bge	7dc <transpose_array+0x43c>
     5e0:	mov	r1, #0
     5e4:	ldrb	r0, [r5, r3]
     5e8:	strb	r0, [r4, r7]
     5ec:	ldr	r0, [sp, #120]	; 0x78
     5f0:	add	r7, r7, r0
     5f4:	ldr	r0, [sp, #160]	; 0xa0
     5f8:	add	r2, r0, #1
     5fc:	str	r2, [sp, #160]	; 0xa0
     600:	add	ip, sp, #160	; 0xa0
     604:	ldr	r0, [ip, r1, lsl #2]
     608:	add	r2, sp, #80	; 0x50
     60c:	ldr	ip, [r2, r1, lsl #2]
     610:	cmp	r0, ip
     614:	bne	664 <transpose_array+0x2c4>
     618:	add	r2, sp, #160	; 0xa0
     61c:	mov	ip, #0
     620:	str	ip, [r2, r1, lsl #2]
     624:	add	ip, sp, #120	; 0x78
     628:	ldr	r0, [ip, r1, lsl #2]
     62c:	add	ip, sp, #80	; 0x50
     630:	ldr	r2, [ip, r1, lsl #2]
     634:	mul	ip, r0, r2
     638:	sub	r0, r7, ip
     63c:	add	r1, r1, #1
     640:	add	ip, sp, #120	; 0x78
     644:	ldr	r2, [ip, r1, lsl #2]
     648:	add	r7, r0, r2
     64c:	add	r2, sp, #160	; 0xa0
     650:	add	ip, sp, #160	; 0xa0
     654:	ldr	ip, [ip, r1, lsl #2]
     658:	add	ip, ip, #1
     65c:	str	ip, [r2, r1, lsl #2]
     660:	b	600 <transpose_array+0x260>
     664:	add	r3, r3, #1
     668:	b	5d8 <transpose_array+0x238>
     66c:	cmp	r6, #4
     670:	beq	744 <transpose_array+0x3a4>
     674:	cmp	r6, #8
     678:	bne	724 <transpose_array+0x384>
     67c:	mov	r9, #0
     680:	cmp	r9, r8
     684:	bge	7dc <transpose_array+0x43c>
     688:	mov	r2, #0
     68c:	add	r0, r4, r7, lsl #3
     690:	add	r1, r5, r9, lsl #3
     694:	ldr	r3, [r1]
     698:	ldr	ip, [r1, #4]
     69c:	str	r3, [r0]
     6a0:	str	ip, [r0, #4]
     6a4:	ldr	r1, [sp, #120]	; 0x78
     6a8:	add	r7, r7, r1
     6ac:	ldr	r0, [sp, #160]	; 0xa0
     6b0:	add	ip, r0, #1
     6b4:	str	ip, [sp, #160]	; 0xa0
     6b8:	add	r1, sp, #160	; 0xa0
     6bc:	ldr	ip, [r1, r2, lsl #2]
     6c0:	add	r0, sp, #80	; 0x50
     6c4:	ldr	r3, [r0, r2, lsl #2]
     6c8:	cmp	ip, r3
     6cc:	bne	71c <transpose_array+0x37c>
     6d0:	add	r0, sp, #160	; 0xa0
     6d4:	mov	ip, #0
     6d8:	str	ip, [r0, r2, lsl #2]
     6dc:	add	r3, sp, #120	; 0x78
     6e0:	ldr	r3, [r3, r2, lsl #2]
     6e4:	add	r0, sp, #80	; 0x50
     6e8:	ldr	r1, [r0, r2, lsl #2]
     6ec:	mul	r0, r3, r1
     6f0:	sub	r3, r7, r0
     6f4:	add	r2, r2, #1
     6f8:	add	ip, sp, #120	; 0x78
     6fc:	ldr	ip, [ip, r2, lsl #2]
     700:	add	r7, r3, ip
     704:	add	r1, sp, #160	; 0xa0
     708:	add	ip, sp, #160	; 0xa0
     70c:	ldr	ip, [ip, r2, lsl #2]
     710:	add	ip, ip, #1
     714:	str	ip, [r1, r2, lsl #2]
     718:	b	6b8 <transpose_array+0x318>
     71c:	add	r9, r9, #1
     720:	b	680 <transpose_array+0x2e0>
     724:	ldr	r0, [pc, #240]	; 81c <transpose_array+0x47c>
     728:	ldr	r1, [pc, #244]	; 824 <transpose_array+0x484>
     72c:	mov	r2, #172	; 0xac
     730:	ldr	r3, [pc, #232]	; 820 <transpose_array+0x480>
     734:	bl	0 <__assert_fail>
     738:	mov	r0, #1
     73c:	bl	0 <exit>
     740:	b	7dc <transpose_array+0x43c>
     744:	mov	r1, #0
     748:	cmp	r1, r8
     74c:	bge	7dc <transpose_array+0x43c>
     750:	mov	r9, #0
     754:	ldr	r2, [r5, r1, lsl #2]
     758:	str	r2, [r4, r7, lsl #2]
     75c:	ldr	r3, [sp, #120]	; 0x78
     760:	add	r7, r7, r3
     764:	ldr	r0, [sp, #160]	; 0xa0
     768:	add	r2, r0, #1
     76c:	str	r2, [sp, #160]	; 0xa0
     770:	add	r2, sp, #160	; 0xa0
     774:	ldr	ip, [r2, r9, lsl #2]
     778:	add	r0, sp, #80	; 0x50
     77c:	ldr	r3, [r0, r9, lsl #2]
     780:	cmp	ip, r3
     784:	bne	7d4 <transpose_array+0x434>
     788:	add	r3, sp, #160	; 0xa0
     78c:	mov	r0, #0
     790:	str	r0, [r3, r9, lsl #2]
     794:	add	ip, sp, #120	; 0x78
     798:	ldr	r2, [ip, r9, lsl #2]
     79c:	add	r3, sp, #80	; 0x50
     7a0:	ldr	ip, [r3, r9, lsl #2]
     7a4:	mul	r0, r2, ip
     7a8:	sub	r3, r7, r0
     7ac:	add	r9, r9, #1
     7b0:	add	r0, sp, #120	; 0x78
     7b4:	ldr	r2, [r0, r9, lsl #2]
     7b8:	add	r7, r3, r2
     7bc:	add	ip, sp, #160	; 0xa0
     7c0:	add	r3, sp, #160	; 0xa0
     7c4:	ldr	r3, [r3, r9, lsl #2]
     7c8:	add	r0, r3, #1
     7cc:	str	r0, [ip, r9, lsl #2]
     7d0:	b	770 <transpose_array+0x3d0>
     7d4:	add	r1, r1, #1
     7d8:	b	748 <transpose_array+0x3a8>
     7dc:	mul	r2, r8, r6
     7e0:	mov	r1, r4
     7e4:	mov	r0, r5
     7e8:	bl	0 <memcpy>
     7ec:	mov	r0, r4
     7f0:	bl	0 <free>
     7f4:	mov	r0, #0
     7f8:	ldr	r4, [sp, #16]
     7fc:	ldr	r5, [sp, #20]
     800:	ldr	r6, [sp, #24]
     804:	ldr	r7, [sp, #28]
     808:	ldr	r8, [sp, #32]
     80c:	ldr	r9, [sp, #36]	; 0x24
     810:	ldr	lr, [sp, #8]
     814:	add	sp, sp, #200	; 0xc8
     818:	bx	lr
     81c:	.word	0x000002cf
     820:	.word	0x00000306
     824:	.word	0x00000221
     828:	.word	0x000002d1

0000082c <coda_mem_cursor_update_offset>:
     82c:	mov	ip, sp
     830:	sub	sp, sp, #16
     834:	str	ip, [sp]
     838:	str	lr, [sp, #4]
     83c:	str	r4, [sp, #8]
     840:	ldr	r2, [r0, #4]
     844:	lsl	r1, r2, #4
     848:	add	r4, r0, r1
     84c:	sub	lr, r4, #4096	; 0x1000
     850:	ldr	ip, [lr, #4088]	; 0xff8
     854:	ldr	r0, [ip, #8]
     858:	cmp	r0, #2
     85c:	bne	87c <coda_mem_cursor_update_offset+0x50>
     860:	ldr	r1, [ip, #24]
     864:	ldr	r0, [ip, #28]
     868:	lsl	r3, r0, #3
     86c:	orr	r3, r3, r1, lsr #29
     870:	lsl	r2, r1, #3
     874:	str	r2, [r4]
     878:	str	r3, [r4, #4]
     87c:	ldr	r4, [sp, #8]
     880:	ldr	lr, [sp, #4]
     884:	add	sp, sp, #16
     888:	bx	lr

0000088c <coda_mem_cursor_goto_record_field_by_index>:
     88c:	mov	ip, sp
     890:	sub	sp, sp, #16
     894:	str	ip, [sp]
     898:	str	lr, [sp, #4]
     89c:	str	r4, [sp, #8]
     8a0:	str	r5, [sp, #12]
     8a4:	mov	r4, r1
     8a8:	mov	r5, r0
     8ac:	ldr	r3, [r5, #4]
     8b0:	lsl	r0, r3, #4
     8b4:	add	ip, r5, r0
     8b8:	sub	lr, ip, #4096	; 0x1000
     8bc:	ldr	r2, [lr, #4088]	; 0xff8
     8c0:	ldr	r0, [r2, #8]
     8c4:	cmp	r0, #0
     8c8:	bne	990 <coda_mem_cursor_goto_record_field_by_index+0x104>
     8cc:	cmp	r4, #0
     8d0:	blt	964 <coda_mem_cursor_goto_record_field_by_index+0xd8>
     8d4:	ldr	ip, [r2, #16]
     8d8:	cmp	r4, ip
     8dc:	bge	964 <coda_mem_cursor_goto_record_field_by_index+0xd8>
     8e0:	add	ip, r3, #1
     8e4:	str	ip, [r5, #4]
     8e8:	ldr	r0, [r2, #20]
     8ec:	ldr	r0, [r0, r4, lsl #2]
     8f0:	cmp	r0, #0
     8f4:	bne	91c <coda_mem_cursor_goto_record_field_by_index+0x90>
     8f8:	ldr	r0, [r2, #4]
     8fc:	ldr	r0, [r0]
     900:	bl	0 <coda_no_data_singleton>
     904:	ldr	r1, [r5, #4]
     908:	lsl	r2, r1, #4
     90c:	add	r1, r5, r2
     910:	sub	lr, r1, #4096	; 0x1000
     914:	str	r0, [lr, #4088]	; 0xff8
     918:	b	92c <coda_mem_cursor_goto_record_field_by_index+0xa0>
     91c:	lsl	r1, ip, #4
     920:	add	ip, r5, r1
     924:	sub	lr, ip, #4096	; 0x1000
     928:	str	r0, [lr, #4088]	; 0xff8
     92c:	ldr	r3, [r5, #4]
     930:	lsl	ip, r3, #4
     934:	add	r2, r5, ip
     938:	sub	lr, r2, #4096	; 0x1000
     93c:	str	r4, [lr, #4092]	; 0xffc
     940:	ldr	r1, [r5, #4]
     944:	lsl	r1, r1, #4
     948:	add	r3, r5, r1
     94c:	mvn	r2, #0
     950:	mvn	r1, #0
     954:	str	r1, [r3]
     958:	str	r2, [r3, #4]
     95c:	mov	r0, #0
     960:	b	97c <coda_mem_cursor_goto_record_field_by_index+0xf0>
     964:	mvn	r0, #100	; 0x64
     968:	ldr	r1, [pc, #88]	; 9c8 <coda_mem_cursor_goto_record_field_by_index+0x13c>
     96c:	ldr	r3, [r2, #16]
     970:	mov	r2, r4
     974:	bl	0 <coda_set_error>
     978:	mvn	r0, #0
     97c:	ldr	r4, [sp, #8]
     980:	ldr	r5, [sp, #12]
     984:	ldr	lr, [sp, #4]
     988:	add	sp, sp, #16
     98c:	bx	lr
     990:	cmp	r0, #2
     994:	beq	9ac <coda_mem_cursor_goto_record_field_by_index+0x120>
     998:	ldr	r0, [pc, #44]	; 9cc <coda_mem_cursor_goto_record_field_by_index+0x140>
     99c:	ldr	r1, [pc, #48]	; 9d4 <coda_mem_cursor_goto_record_field_by_index+0x148>
     9a0:	mov	r2, #79	; 0x4f
     9a4:	ldr	r3, [pc, #36]	; 9d0 <coda_mem_cursor_goto_record_field_by_index+0x144>
     9a8:	bl	0 <__assert_fail>
     9ac:	mov	r1, r4
     9b0:	mov	r0, r5
     9b4:	ldr	r4, [sp, #8]
     9b8:	ldr	r5, [sp, #12]
     9bc:	ldr	lr, [sp, #4]
     9c0:	add	sp, sp, #16
     9c4:	b	0 <coda_ascbin_cursor_goto_record_field_by_index>
     9c8:	.word	0x000001d8
     9cc:	.word	0x000001be
     9d0:	.word	0x00000316
     9d4:	.word	0x00000000

000009d8 <coda_mem_cursor_goto_next_record_field>:
     9d8:	mov	ip, sp
     9dc:	sub	sp, sp, #16
     9e0:	str	ip, [sp]
     9e4:	str	lr, [sp, #4]
     9e8:	str	r4, [sp, #8]
     9ec:	str	r5, [sp, #12]
     9f0:	mov	r4, r0
     9f4:	ldr	r3, [r4, #4]
     9f8:	lsl	r3, r3, #4
     9fc:	add	r3, r4, r3
     a00:	sub	lr, r3, #4096	; 0x1000
     a04:	ldr	r2, [lr, #4072]	; 0xfe8
     a08:	ldr	r0, [r2, #8]
     a0c:	cmp	r0, #0
     a10:	bne	ad4 <coda_mem_cursor_goto_next_record_field+0xfc>
     a14:	sub	lr, r3, #4096	; 0x1000
     a18:	ldr	ip, [lr, #4092]	; 0xffc
     a1c:	add	r5, ip, #1
     a20:	cmp	r5, #0
     a24:	blt	aa8 <coda_mem_cursor_goto_next_record_field+0xd0>
     a28:	ldr	ip, [r2, #16]
     a2c:	cmp	r5, ip
     a30:	bge	aa8 <coda_mem_cursor_goto_next_record_field+0xd0>
     a34:	ldr	ip, [r2, #20]
     a38:	ldr	ip, [ip, r5, lsl #2]
     a3c:	cmp	ip, #0
     a40:	bne	a68 <coda_mem_cursor_goto_next_record_field+0x90>
     a44:	ldr	r1, [r2, #4]
     a48:	ldr	r0, [r1]
     a4c:	bl	0 <coda_no_data_singleton>
     a50:	ldr	r1, [r4, #4]
     a54:	lsl	r1, r1, #4
     a58:	add	ip, r4, r1
     a5c:	sub	lr, ip, #4096	; 0x1000
     a60:	str	r0, [lr, #4088]	; 0xff8
     a64:	b	a70 <coda_mem_cursor_goto_next_record_field+0x98>
     a68:	sub	lr, r3, #4096	; 0x1000
     a6c:	str	ip, [lr, #4088]	; 0xff8
     a70:	ldr	r1, [r4, #4]
     a74:	lsl	r1, r1, #4
     a78:	add	r1, r4, r1
     a7c:	sub	lr, r1, #4096	; 0x1000
     a80:	str	r5, [lr, #4092]	; 0xffc
     a84:	ldr	ip, [r4, #4]
     a88:	lsl	r0, ip, #4
     a8c:	add	r3, r4, r0
     a90:	mvn	r2, #0
     a94:	mvn	r1, #0
     a98:	str	r1, [r3]
     a9c:	str	r2, [r3, #4]
     aa0:	mov	r0, #0
     aa4:	b	ac0 <coda_mem_cursor_goto_next_record_field+0xe8>
     aa8:	mvn	r0, #100	; 0x64
     aac:	ldr	r1, [pc, #84]	; b08 <coda_mem_cursor_goto_next_record_field+0x130>
     ab0:	ldr	r3, [r2, #16]
     ab4:	mov	r2, r5
     ab8:	bl	0 <coda_set_error>
     abc:	mvn	r0, #0
     ac0:	ldr	r4, [sp, #8]
     ac4:	ldr	r5, [sp, #12]
     ac8:	ldr	lr, [sp, #4]
     acc:	add	sp, sp, #16
     ad0:	bx	lr
     ad4:	cmp	r0, #2
     ad8:	beq	af0 <coda_mem_cursor_goto_next_record_field+0x118>
     adc:	ldr	r0, [pc, #44]	; b10 <coda_mem_cursor_goto_next_record_field+0x138>
     ae0:	ldr	r1, [pc, #44]	; b14 <coda_mem_cursor_goto_next_record_field+0x13c>
     ae4:	mov	r2, #111	; 0x6f
     ae8:	ldr	r3, [pc, #28]	; b0c <coda_mem_cursor_goto_next_record_field+0x134>
     aec:	bl	0 <__assert_fail>
     af0:	mov	r0, r4
     af4:	ldr	r4, [sp, #8]
     af8:	ldr	r5, [sp, #12]
     afc:	ldr	lr, [sp, #4]
     b00:	add	sp, sp, #16
     b04:	b	0 <coda_ascbin_cursor_goto_next_record_field>
     b08:	.word	0x000001d8
     b0c:	.word	0x00000341
     b10:	.word	0x000001be
     b14:	.word	0x00000000

00000b18 <coda_mem_cursor_goto_available_union_field>:
     b18:	mov	ip, sp
     b1c:	sub	sp, sp, #24
     b20:	str	ip, [sp]
     b24:	str	lr, [sp, #4]
     b28:	str	r4, [sp, #8]
     b2c:	str	r5, [sp, #12]
     b30:	mov	r4, r0
     b34:	ldr	r2, [r4, #4]
     b38:	lsl	ip, r2, #4
     b3c:	add	r3, r4, ip
     b40:	sub	lr, r3, #4096	; 0x1000
     b44:	ldr	r5, [lr, #4088]	; 0xff8
     b48:	ldr	r0, [r5, #8]
     b4c:	cmp	r0, #0
     b50:	bne	bcc <coda_mem_cursor_goto_available_union_field+0xb4>
     b54:	add	r1, sp, #16
     b58:	mov	r0, r4
     b5c:	bl	1484 <coda_mem_cursor_get_available_union_field_index>
     b60:	cmp	r0, #0
     b64:	beq	b70 <coda_mem_cursor_goto_available_union_field+0x58>
     b68:	mvn	r0, #0
     b6c:	b	bf0 <coda_mem_cursor_goto_available_union_field+0xd8>
     b70:	ldr	r0, [r4, #4]
     b74:	lsl	ip, r0, #4
     b78:	add	ip, r4, ip
     b7c:	ldr	r2, [r5, #20]
     b80:	ldr	r3, [sp, #16]
     b84:	ldr	r1, [r2, r3, lsl #2]
     b88:	sub	lr, ip, #4096	; 0x1000
     b8c:	str	r1, [lr, #4088]	; 0xff8
     b90:	ldr	r3, [r4, #4]
     b94:	lsl	r0, r3, #4
     b98:	add	r1, r4, r0
     b9c:	ldr	r2, [sp, #16]
     ba0:	sub	lr, r1, #4096	; 0x1000
     ba4:	str	r2, [lr, #4092]	; 0xffc
     ba8:	ldr	r3, [r4, #4]
     bac:	lsl	r2, r3, #4
     bb0:	add	ip, r4, r2
     bb4:	mvn	r2, #0
     bb8:	mvn	r1, #0
     bbc:	str	r1, [ip]
     bc0:	str	r2, [ip, #4]
     bc4:	mov	r0, #0
     bc8:	b	bf0 <coda_mem_cursor_goto_available_union_field+0xd8>
     bcc:	cmp	r0, #2
     bd0:	beq	be8 <coda_mem_cursor_goto_available_union_field+0xd0>
     bd4:	ldr	r0, [pc, #40]	; c04 <coda_mem_cursor_goto_available_union_field+0xec>
     bd8:	ldr	r1, [pc, #40]	; c08 <coda_mem_cursor_goto_available_union_field+0xf0>
     bdc:	mov	r2, #134	; 0x86
     be0:	ldr	r3, [pc, #36]	; c0c <coda_mem_cursor_goto_available_union_field+0xf4>
     be4:	bl	0 <__assert_fail>
     be8:	mov	r0, r4
     bec:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
     bf0:	ldr	r4, [sp, #8]
     bf4:	ldr	r5, [sp, #12]
     bf8:	ldr	lr, [sp, #4]
     bfc:	add	sp, sp, #24
     c00:	bx	lr
     c04:	.word	0x000001be
     c08:	.word	0x00000000
     c0c:	.word	0x00000368

00000c10 <coda_mem_cursor_goto_array_element>:
     c10:	mov	ip, sp
     c14:	sub	sp, sp, #24
     c18:	str	ip, [sp]
     c1c:	str	lr, [sp, #4]
     c20:	str	r4, [sp, #8]
     c24:	str	r5, [sp, #12]
     c28:	str	r6, [sp, #16]
     c2c:	str	r7, [sp, #20]
     c30:	mov	r4, r2
     c34:	mov	r5, r1
     c38:	mov	r6, r0
     c3c:	ldr	ip, [r6, #4]
     c40:	lsl	ip, ip, #4
     c44:	add	r3, r6, ip
     c48:	sub	lr, r3, #4096	; 0x1000
     c4c:	ldr	r7, [lr, #4088]	; 0xff8
     c50:	ldr	r0, [r7, #8]
     c54:	cmp	r0, #1
     c58:	bne	d3c <coda_mem_cursor_goto_array_element+0x12c>
     c5c:	cmp	r5, #1
     c60:	beq	c7c <coda_mem_cursor_goto_array_element+0x6c>
     c64:	mvn	r0, #105	; 0x69
     c68:	ldr	r1, [pc, #272]	; d80 <coda_mem_cursor_goto_array_element+0x170>
     c6c:	mov	r2, r5
     c70:	bl	0 <coda_set_error>
     c74:	mvn	r0, #0
     c78:	b	d20 <coda_mem_cursor_goto_array_element+0x110>
     c7c:	ldr	r2, [pc, #268]	; d90 <coda_mem_cursor_goto_array_element+0x180>
     c80:	ldr	r0, [r2]
     c84:	cmp	r0, #0
     c88:	beq	cc0 <coda_mem_cursor_goto_array_element+0xb0>
     c8c:	ldr	ip, [r4]
     c90:	cmp	ip, #0
     c94:	blt	ca4 <coda_mem_cursor_goto_array_element+0x94>
     c98:	ldr	r0, [r7, #16]
     c9c:	cmp	ip, r0
     ca0:	blt	cc0 <coda_mem_cursor_goto_array_element+0xb0>
     ca4:	mvn	r0, #106	; 0x6a
     ca8:	ldr	r1, [pc, #212]	; d84 <coda_mem_cursor_goto_array_element+0x174>
     cac:	ldr	r2, [r4]
     cb0:	ldr	r3, [r7, #16]
     cb4:	bl	0 <coda_set_error>
     cb8:	mvn	r0, #0
     cbc:	b	d20 <coda_mem_cursor_goto_array_element+0x110>
     cc0:	ldr	r3, [r6, #4]
     cc4:	add	r3, r3, #1
     cc8:	str	r3, [r6, #4]
     ccc:	lsl	r1, r3, #4
     cd0:	add	r2, r6, r1
     cd4:	ldr	ip, [r7, #20]
     cd8:	ldr	r1, [r4]
     cdc:	ldr	r3, [ip, r1, lsl #2]
     ce0:	sub	lr, r2, #4096	; 0x1000
     ce4:	str	r3, [lr, #4088]	; 0xff8
     ce8:	ldr	r2, [r6, #4]
     cec:	lsl	r1, r2, #4
     cf0:	add	r3, r6, r1
     cf4:	ldr	r1, [r4]
     cf8:	sub	lr, r3, #4096	; 0x1000
     cfc:	str	r1, [lr, #4092]	; 0xffc
     d00:	ldr	ip, [r6, #4]
     d04:	lsl	r2, ip, #4
     d08:	add	r3, r6, r2
     d0c:	mvn	r2, #0
     d10:	mvn	r1, #0
     d14:	str	r1, [r3]
     d18:	str	r2, [r3, #4]
     d1c:	mov	r0, #0
     d20:	ldr	r4, [sp, #8]
     d24:	ldr	r5, [sp, #12]
     d28:	ldr	r6, [sp, #16]
     d2c:	ldr	r7, [sp, #20]
     d30:	ldr	lr, [sp, #4]
     d34:	add	sp, sp, #24
     d38:	bx	lr
     d3c:	cmp	r0, #2
     d40:	beq	d58 <coda_mem_cursor_goto_array_element+0x148>
     d44:	ldr	r0, [pc, #60]	; d88 <coda_mem_cursor_goto_array_element+0x178>
     d48:	ldr	r1, [pc, #68]	; d94 <coda_mem_cursor_goto_array_element+0x184>
     d4c:	mov	r2, #169	; 0xa9
     d50:	ldr	r3, [pc, #52]	; d8c <coda_mem_cursor_goto_array_element+0x17c>
     d54:	bl	0 <__assert_fail>
     d58:	mov	r2, r4
     d5c:	mov	r1, r5
     d60:	mov	r0, r6
     d64:	ldr	r4, [sp, #8]
     d68:	ldr	r5, [sp, #12]
     d6c:	ldr	r6, [sp, #16]
     d70:	ldr	r7, [sp, #20]
     d74:	ldr	lr, [sp, #4]
     d78:	add	sp, sp, #24
     d7c:	b	0 <coda_ascbin_cursor_goto_array_element>
     d80:	.word	0x000000de
     d84:	.word	0x000000b0
     d88:	.word	0x000001be
     d8c:	.word	0x00000393
	...

00000d98 <coda_mem_cursor_goto_array_element_by_index>:
     d98:	mov	ip, sp
     d9c:	sub	sp, sp, #16
     da0:	str	ip, [sp]
     da4:	str	lr, [sp, #4]
     da8:	str	r4, [sp, #8]
     dac:	str	r5, [sp, #12]
     db0:	mov	r4, r1
     db4:	mov	r5, r0
     db8:	ldr	r1, [r5, #4]
     dbc:	lsl	r3, r1, #4
     dc0:	add	r2, r5, r3
     dc4:	sub	lr, r2, #4096	; 0x1000
     dc8:	ldr	r2, [lr, #4088]	; 0xff8
     dcc:	ldr	r0, [r2, #8]
     dd0:	cmp	r0, #1
     dd4:	bne	e84 <coda_mem_cursor_goto_array_element_by_index+0xec>
     dd8:	ldr	ip, [pc, #232]	; ec8 <coda_mem_cursor_goto_array_element_by_index+0x130>
     ddc:	ldr	r0, [ip]
     de0:	cmp	r0, #0
     de4:	beq	e18 <coda_mem_cursor_goto_array_element_by_index+0x80>
     de8:	cmp	r4, #0
     dec:	blt	dfc <coda_mem_cursor_goto_array_element_by_index+0x64>
     df0:	ldr	ip, [r2, #16]
     df4:	cmp	r4, ip
     df8:	blt	e18 <coda_mem_cursor_goto_array_element_by_index+0x80>
     dfc:	mvn	r0, #106	; 0x6a
     e00:	ldr	r1, [pc, #184]	; ec0 <coda_mem_cursor_goto_array_element_by_index+0x128>
     e04:	ldr	r3, [r2, #16]
     e08:	mov	r2, r4
     e0c:	bl	0 <coda_set_error>
     e10:	mvn	r0, #0
     e14:	b	e70 <coda_mem_cursor_goto_array_element_by_index+0xd8>
     e18:	ldr	r3, [r5, #4]
     e1c:	add	r3, r3, #1
     e20:	str	r3, [r5, #4]
     e24:	lsl	ip, r3, #4
     e28:	add	r1, r5, ip
     e2c:	ldr	ip, [r2, #20]
     e30:	ldr	r0, [ip, r4, lsl #2]
     e34:	sub	lr, r1, #4096	; 0x1000
     e38:	str	r0, [lr, #4088]	; 0xff8
     e3c:	ldr	r3, [r5, #4]
     e40:	lsl	r2, r3, #4
     e44:	add	r0, r5, r2
     e48:	sub	lr, r0, #4096	; 0x1000
     e4c:	str	r4, [lr, #4092]	; 0xffc
     e50:	ldr	r0, [r5, #4]
     e54:	lsl	r1, r0, #4
     e58:	add	r3, r5, r1
     e5c:	mvn	r2, #0
     e60:	mvn	r1, #0
     e64:	str	r1, [r3]
     e68:	str	r2, [r3, #4]
     e6c:	mov	r0, #0
     e70:	ldr	r4, [sp, #8]
     e74:	ldr	r5, [sp, #12]
     e78:	ldr	lr, [sp, #4]
     e7c:	add	sp, sp, #16
     e80:	bx	lr
     e84:	cmp	r0, #2
     e88:	beq	ea0 <coda_mem_cursor_goto_array_element_by_index+0x108>
     e8c:	ldr	r0, [pc, #48]	; ec4 <coda_mem_cursor_goto_array_element_by_index+0x12c>
     e90:	ldr	r1, [pc, #52]	; ecc <coda_mem_cursor_goto_array_element_by_index+0x134>
     e94:	mov	r2, #197	; 0xc5
     e98:	ldr	r3, [pc, #28]	; ebc <coda_mem_cursor_goto_array_element_by_index+0x124>
     e9c:	bl	0 <__assert_fail>
     ea0:	mov	r1, r4
     ea4:	mov	r0, r5
     ea8:	ldr	r4, [sp, #8]
     eac:	ldr	r5, [sp, #12]
     eb0:	ldr	lr, [sp, #4]
     eb4:	add	sp, sp, #16
     eb8:	b	0 <coda_ascbin_cursor_goto_array_element_by_index>
     ebc:	.word	0x000003b6
     ec0:	.word	0x000000b0
     ec4:	.word	0x000001be
	...

00000ed0 <coda_mem_cursor_goto_next_array_element>:
     ed0:	mov	ip, sp
     ed4:	sub	sp, sp, #16
     ed8:	str	ip, [sp]
     edc:	str	lr, [sp, #4]
     ee0:	str	r4, [sp, #8]
     ee4:	str	r5, [sp, #12]
     ee8:	mov	r4, r0
     eec:	ldr	r3, [r4, #4]
     ef0:	lsl	r3, r3, #4
     ef4:	add	r3, r4, r3
     ef8:	sub	lr, r3, #4096	; 0x1000
     efc:	ldr	r2, [lr, #4072]	; 0xfe8
     f00:	ldr	r0, [r2, #8]
     f04:	cmp	r0, #1
     f08:	bne	fcc <coda_mem_cursor_goto_next_array_element+0xfc>
     f0c:	sub	lr, r3, #4096	; 0x1000
     f10:	ldr	ip, [lr, #4092]	; 0xffc
     f14:	add	r5, ip, #1
     f18:	cmp	r5, #0
     f1c:	blt	fa0 <coda_mem_cursor_goto_next_array_element+0xd0>
     f20:	ldr	ip, [r2, #16]
     f24:	cmp	r5, ip
     f28:	bge	fa0 <coda_mem_cursor_goto_next_array_element+0xd0>
     f2c:	ldr	ip, [r2, #20]
     f30:	ldr	ip, [ip, r5, lsl #2]
     f34:	cmp	ip, #0
     f38:	bne	f60 <coda_mem_cursor_goto_next_array_element+0x90>
     f3c:	ldr	r1, [r2, #4]
     f40:	ldr	r0, [r1]
     f44:	bl	0 <coda_no_data_singleton>
     f48:	ldr	r1, [r4, #4]
     f4c:	lsl	r1, r1, #4
     f50:	add	ip, r4, r1
     f54:	sub	lr, ip, #4096	; 0x1000
     f58:	str	r0, [lr, #4088]	; 0xff8
     f5c:	b	f68 <coda_mem_cursor_goto_next_array_element+0x98>
     f60:	sub	lr, r3, #4096	; 0x1000
     f64:	str	ip, [lr, #4088]	; 0xff8
     f68:	ldr	r1, [r4, #4]
     f6c:	lsl	r1, r1, #4
     f70:	add	r1, r4, r1
     f74:	sub	lr, r1, #4096	; 0x1000
     f78:	str	r5, [lr, #4092]	; 0xffc
     f7c:	ldr	ip, [r4, #4]
     f80:	lsl	r0, ip, #4
     f84:	add	r3, r4, r0
     f88:	mvn	r2, #0
     f8c:	mvn	r1, #0
     f90:	str	r1, [r3]
     f94:	str	r2, [r3, #4]
     f98:	mov	r0, #0
     f9c:	b	fb8 <coda_mem_cursor_goto_next_array_element+0xe8>
     fa0:	mvn	r0, #106	; 0x6a
     fa4:	ldr	r1, [pc, #84]	; 1000 <coda_mem_cursor_goto_next_array_element+0x130>
     fa8:	ldr	r3, [r2, #16]
     fac:	mov	r2, r5
     fb0:	bl	0 <coda_set_error>
     fb4:	mvn	r0, #0
     fb8:	ldr	r4, [sp, #8]
     fbc:	ldr	r5, [sp, #12]
     fc0:	ldr	lr, [sp, #4]
     fc4:	add	sp, sp, #16
     fc8:	bx	lr
     fcc:	cmp	r0, #2
     fd0:	beq	fe8 <coda_mem_cursor_goto_next_array_element+0x118>
     fd4:	ldr	r0, [pc, #40]	; 1004 <coda_mem_cursor_goto_next_array_element+0x134>
     fd8:	ldr	r1, [pc, #44]	; 100c <coda_mem_cursor_goto_next_array_element+0x13c>
     fdc:	mov	r2, #229	; 0xe5
     fe0:	ldr	r3, [pc, #32]	; 1008 <coda_mem_cursor_goto_next_array_element+0x138>
     fe4:	bl	0 <__assert_fail>
     fe8:	mov	r0, r4
     fec:	ldr	r4, [sp, #8]
     ff0:	ldr	r5, [sp, #12]
     ff4:	ldr	lr, [sp, #4]
     ff8:	add	sp, sp, #16
     ffc:	b	0 <coda_ascbin_cursor_goto_next_array_element>
    1000:	.word	0x000000b0
    1004:	.word	0x000001be
    1008:	.word	0x000003e2
    100c:	.word	0x00000000

00001010 <coda_mem_cursor_goto_attributes>:
    1010:	mov	ip, sp
    1014:	sub	sp, sp, #16
    1018:	str	ip, [sp]
    101c:	str	lr, [sp, #4]
    1020:	str	r4, [sp, #8]
    1024:	mov	r4, r0
    1028:	ldr	r1, [r4, #4]
    102c:	add	r1, r1, #1
    1030:	str	r1, [r4, #4]
    1034:	lsl	r0, r1, #4
    1038:	add	ip, r4, r0
    103c:	sub	lr, ip, #4096	; 0x1000
    1040:	ldr	r1, [lr, #4072]	; 0xfe8
    1044:	ldr	r0, [r1, #12]
    1048:	cmp	r0, #0
    104c:	bne	1074 <coda_mem_cursor_goto_attributes+0x64>
    1050:	ldr	ip, [r1, #4]
    1054:	ldr	r0, [ip]
    1058:	bl	0 <coda_mem_empty_record>
    105c:	ldr	r1, [r4, #4]
    1060:	lsl	ip, r1, #4
    1064:	add	r3, r4, ip
    1068:	sub	lr, r3, #4096	; 0x1000
    106c:	str	r0, [lr, #4088]	; 0xff8
    1070:	b	107c <coda_mem_cursor_goto_attributes+0x6c>
    1074:	sub	lr, ip, #4096	; 0x1000
    1078:	str	r0, [lr, #4088]	; 0xff8
    107c:	ldr	r0, [r4, #4]
    1080:	lsl	r3, r0, #4
    1084:	add	r3, r4, r3
    1088:	mvn	r2, #0
    108c:	sub	lr, r3, #4096	; 0x1000
    1090:	str	r2, [lr, #4092]	; 0xffc
    1094:	ldr	r2, [r4, #4]
    1098:	lsl	r1, r2, #4
    109c:	add	ip, r4, r1
    10a0:	mvn	r3, #0
    10a4:	mvn	r2, #0
    10a8:	str	r2, [ip]
    10ac:	str	r3, [ip, #4]
    10b0:	mov	r0, #0
    10b4:	ldr	r4, [sp, #8]
    10b8:	ldr	lr, [sp, #4]
    10bc:	add	sp, sp, #16
    10c0:	bx	lr

000010c4 <coda_mem_cursor_use_base_type_of_special_type>:
    10c4:	mov	ip, sp
    10c8:	sub	sp, sp, #16
    10cc:	str	ip, [sp]
    10d0:	str	lr, [sp, #4]
    10d4:	str	r4, [sp, #8]
    10d8:	str	r5, [sp, #12]
    10dc:	mov	r4, r0
    10e0:	ldr	r3, [r4, #4]
    10e4:	lsl	r2, r3, #4
    10e8:	add	r0, r4, r2
    10ec:	sub	lr, r0, #4096	; 0x1000
    10f0:	ldr	r5, [lr, #4088]	; 0xff8
    10f4:	ldr	r1, [r5, #8]
    10f8:	cmp	r1, #3
    10fc:	bne	1114 <coda_mem_cursor_use_base_type_of_special_type+0x50>
    1100:	ldr	r3, [r5, #16]
    1104:	sub	lr, r0, #4096	; 0x1000
    1108:	str	r3, [lr, #4088]	; 0xff8
    110c:	mov	r0, #0
    1110:	b	1150 <coda_mem_cursor_use_base_type_of_special_type+0x8c>
    1114:	cmp	r1, #2
    1118:	beq	1130 <coda_mem_cursor_use_base_type_of_special_type+0x6c>
    111c:	ldr	r0, [pc, #64]	; 1164 <coda_mem_cursor_use_base_type_of_special_type+0xa0>
    1120:	ldr	r1, [pc, #68]	; 116c <coda_mem_cursor_use_base_type_of_special_type+0xa8>
    1124:	movw	r2, #263	; 0x107
    1128:	ldr	r3, [pc, #56]	; 1168 <coda_mem_cursor_use_base_type_of_special_type+0xa4>
    112c:	bl	0 <__assert_fail>
    1130:	ldr	r1, [r4, #4]
    1134:	lsl	ip, r1, #4
    1138:	add	r0, r4, ip
    113c:	ldr	r2, [r5, #4]
    1140:	ldr	ip, [r2, #44]	; 0x2c
    1144:	sub	lr, r0, #4096	; 0x1000
    1148:	str	ip, [lr, #4088]	; 0xff8
    114c:	mov	r0, #0
    1150:	ldr	r4, [sp, #8]
    1154:	ldr	r5, [sp, #12]
    1158:	ldr	lr, [sp, #4]
    115c:	add	sp, sp, #16
    1160:	bx	lr
    1164:	.word	0x000001be
    1168:	.word	0x0000040a
    116c:	.word	0x00000000

00001170 <coda_mem_cursor_get_string_length>:
    1170:	mov	ip, sp
    1174:	sub	sp, sp, #24
    1178:	str	ip, [sp]
    117c:	str	lr, [sp, #4]
    1180:	str	r4, [sp, #8]
    1184:	mov	r4, r1
    1188:	add	r1, sp, #16
    118c:	bl	11dc <coda_mem_cursor_get_bit_size>
    1190:	cmp	r0, #0
    1194:	beq	11a0 <coda_mem_cursor_get_string_length+0x30>
    1198:	mvn	r0, #0
    119c:	b	11cc <coda_mem_cursor_get_string_length+0x5c>
    11a0:	ldr	r2, [sp, #16]
    11a4:	ldr	r0, [sp, #20]
    11a8:	cmp	r0, #0
    11ac:	blt	11c0 <coda_mem_cursor_get_string_length+0x50>
    11b0:	lsr	r1, r2, #3
    11b4:	orr	r1, r1, r0, lsl #29
    11b8:	str	r1, [r4]
    11bc:	b	11c8 <coda_mem_cursor_get_string_length+0x58>
    11c0:	mvn	r3, #0
    11c4:	str	r3, [r4]
    11c8:	mov	r0, #0
    11cc:	ldr	r4, [sp, #8]
    11d0:	ldr	lr, [sp, #4]
    11d4:	add	sp, sp, #24
    11d8:	bx	lr

000011dc <coda_mem_cursor_get_bit_size>:
    11dc:	mov	ip, sp
    11e0:	sub	sp, sp, #536	; 0x218
    11e4:	str	ip, [sp]
    11e8:	str	lr, [sp, #4]
    11ec:	str	r4, [sp, #8]
    11f0:	str	r5, [sp, #12]
    11f4:	mov	r4, r1
    11f8:	ldr	r3, [r0, #4]
    11fc:	lsl	r1, r3, #4
    1200:	add	ip, r0, r1
    1204:	sub	lr, ip, #4096	; 0x1000
    1208:	ldr	r5, [lr, #4088]	; 0xff8
    120c:	ldr	ip, [r5, #8]
    1210:	cmp	ip, #3
    1214:	bne	125c <coda_mem_cursor_get_bit_size+0x80>
    1218:	mov	r2, r0
    121c:	add	r3, sp, #16
    1220:	mov	lr, #130	; 0x82
    1224:	ldr	ip, [r2], #4
    1228:	subs	lr, lr, #1
    122c:	str	ip, [r3], #4
    1230:	bne	1224 <coda_mem_cursor_get_bit_size+0x48>
    1234:	add	r0, sp, #16
    1238:	bl	0 <coda_cursor_use_base_type_of_special_type>
    123c:	cmp	r0, #0
    1240:	beq	124c <coda_mem_cursor_get_bit_size+0x70>
    1244:	mvn	r0, #0
    1248:	b	12dc <coda_mem_cursor_get_bit_size+0x100>
    124c:	add	r0, sp, #16
    1250:	mov	r1, r4
    1254:	bl	0 <coda_cursor_get_bit_size>
    1258:	b	12dc <coda_mem_cursor_get_bit_size+0x100>
    125c:	cmp	ip, #2
    1260:	bne	12c8 <coda_mem_cursor_get_bit_size+0xec>
    1264:	ldr	r1, [r5, #4]
    1268:	ldr	r1, [r1]
    126c:	cmp	r1, #0
    1270:	beq	128c <coda_mem_cursor_get_bit_size+0xb0>
    1274:	mov	r1, r4
    1278:	bl	0 <coda_bin_cursor_get_bit_size>
    127c:	cmp	r0, #0
    1280:	beq	12a4 <coda_mem_cursor_get_bit_size+0xc8>
    1284:	mvn	r0, #0
    1288:	b	12dc <coda_mem_cursor_get_bit_size+0x100>
    128c:	mov	r1, r4
    1290:	bl	0 <coda_ascii_cursor_get_bit_size>
    1294:	cmp	r0, #0
    1298:	beq	12a4 <coda_mem_cursor_get_bit_size+0xc8>
    129c:	mvn	r0, #0
    12a0:	b	12dc <coda_mem_cursor_get_bit_size+0x100>
    12a4:	ldr	r0, [r4, #4]
    12a8:	cmp	r0, #0
    12ac:	bge	12d8 <coda_mem_cursor_get_bit_size+0xfc>
    12b0:	ldr	r2, [r5, #16]
    12b4:	lsl	r0, r2, #3
    12b8:	asr	r1, r0, #31
    12bc:	str	r0, [r4]
    12c0:	str	r1, [r4, #4]
    12c4:	b	12d8 <coda_mem_cursor_get_bit_size+0xfc>
    12c8:	mvn	r3, #0
    12cc:	mvn	r2, #0
    12d0:	str	r2, [r4]
    12d4:	str	r3, [r4, #4]
    12d8:	mov	r0, #0
    12dc:	ldr	r4, [sp, #8]
    12e0:	ldr	r5, [sp, #12]
    12e4:	ldr	lr, [sp, #4]
    12e8:	add	sp, sp, #536	; 0x218
    12ec:	bx	lr

000012f0 <coda_mem_cursor_get_num_elements>:
    12f0:	mov	ip, sp
    12f4:	sub	sp, sp, #8
    12f8:	str	ip, [sp]
    12fc:	str	lr, [sp, #4]
    1300:	ldr	r2, [r0, #4]
    1304:	lsl	r2, r2, #4
    1308:	add	r2, r0, r2
    130c:	sub	lr, r2, #4096	; 0x1000
    1310:	ldr	r2, [lr, #4088]	; 0xff8
    1314:	ldr	ip, [r2, #8]
    1318:	cmp	ip, #2
    131c:	bcs	1340 <coda_mem_cursor_get_num_elements+0x50>
    1320:	cmp	ip, #0
    1324:	bne	1334 <coda_mem_cursor_get_num_elements+0x44>
    1328:	ldr	r2, [r2, #16]
    132c:	str	r2, [r1]
    1330:	b	1358 <coda_mem_cursor_get_num_elements+0x68>
    1334:	ldr	r0, [r2, #16]
    1338:	str	r0, [r1]
    133c:	b	1358 <coda_mem_cursor_get_num_elements+0x68>
    1340:	cmp	ip, #2
    1344:	beq	1368 <coda_mem_cursor_get_num_elements+0x78>
    1348:	cmp	ip, #3
    134c:	bne	1358 <coda_mem_cursor_get_num_elements+0x68>
    1350:	mov	ip, #1
    1354:	str	ip, [r1]
    1358:	mov	r0, #0
    135c:	ldr	lr, [sp, #4]
    1360:	add	sp, sp, #8
    1364:	bx	lr
    1368:	ldr	r2, [r2, #4]
    136c:	ldr	r2, [r2]
    1370:	cmp	r2, #0
    1374:	bne	1384 <coda_mem_cursor_get_num_elements+0x94>
    1378:	ldr	lr, [sp, #4]
    137c:	add	sp, sp, #8
    1380:	b	0 <coda_ascii_cursor_get_num_elements>
    1384:	ldr	lr, [sp, #4]
    1388:	add	sp, sp, #8
    138c:	b	0 <coda_bin_cursor_get_num_elements>

00001390 <coda_mem_cursor_get_record_field_available_status>:
    1390:	mov	ip, sp
    1394:	sub	sp, sp, #24
    1398:	str	ip, [sp]
    139c:	str	lr, [sp, #4]
    13a0:	str	r4, [sp, #8]
    13a4:	str	r5, [sp, #12]
    13a8:	str	r6, [sp, #16]
    13ac:	mov	r4, r2
    13b0:	mov	r5, r1
    13b4:	ldr	r3, [r0, #4]
    13b8:	lsl	r2, r3, #4
    13bc:	add	r1, r0, r2
    13c0:	sub	lr, r1, #4096	; 0x1000
    13c4:	ldr	r6, [lr, #4088]	; 0xff8
    13c8:	ldr	r1, [r6, #8]
    13cc:	cmp	r1, #2
    13d0:	bne	13f4 <coda_mem_cursor_get_record_field_available_status+0x64>
    13d4:	mov	r2, r4
    13d8:	mov	r1, r5
    13dc:	ldr	r4, [sp, #8]
    13e0:	ldr	r5, [sp, #12]
    13e4:	ldr	r6, [sp, #16]
    13e8:	ldr	lr, [sp, #4]
    13ec:	add	sp, sp, #24
    13f0:	b	0 <coda_ascbin_cursor_get_record_field_available_status>
    13f4:	cmp	r1, #0
    13f8:	beq	1410 <coda_mem_cursor_get_record_field_available_status+0x80>
    13fc:	ldr	r0, [pc, #116]	; 1478 <coda_mem_cursor_get_record_field_available_status+0xe8>
    1400:	ldr	r1, [pc, #120]	; 1480 <coda_mem_cursor_get_record_field_available_status+0xf0>
    1404:	mov	r2, #364	; 0x16c
    1408:	ldr	r3, [pc, #108]	; 147c <coda_mem_cursor_get_record_field_available_status+0xec>
    140c:	bl	0 <__assert_fail>
    1410:	cmp	r5, #0
    1414:	blt	1444 <coda_mem_cursor_get_record_field_available_status+0xb4>
    1418:	ldr	r3, [r6, #16]
    141c:	cmp	r5, r3
    1420:	bge	1444 <coda_mem_cursor_get_record_field_available_status+0xb4>
    1424:	ldr	ip, [r6, #20]
    1428:	ldr	r0, [ip, r5, lsl #2]
    142c:	cmp	r0, #0
    1430:	movne	r1, #1
    1434:	moveq	r1, #0
    1438:	str	r1, [r4]
    143c:	mov	r0, #0
    1440:	b	145c <coda_mem_cursor_get_record_field_available_status+0xcc>
    1444:	mvn	r0, #100	; 0x64
    1448:	ldr	r1, [pc, #36]	; 1474 <coda_mem_cursor_get_record_field_available_status+0xe4>
    144c:	ldr	r3, [r6, #16]
    1450:	mov	r2, r5
    1454:	bl	0 <coda_set_error>
    1458:	mvn	r0, #0
    145c:	ldr	r4, [sp, #8]
    1460:	ldr	r5, [sp, #12]
    1464:	ldr	r6, [sp, #16]
    1468:	ldr	lr, [sp, #4]
    146c:	add	sp, sp, #24
    1470:	bx	lr
    1474:	.word	0x000001d8
    1478:	.word	0x00000154
    147c:	.word	0x00000438
    1480:	.word	0x00000000

00001484 <coda_mem_cursor_get_available_union_field_index>:
    1484:	mov	ip, sp
    1488:	sub	sp, sp, #16
    148c:	str	ip, [sp]
    1490:	str	lr, [sp, #4]
    1494:	str	r4, [sp, #8]
    1498:	str	r5, [sp, #12]
    149c:	mov	r4, r1
    14a0:	mov	r5, r0
    14a4:	ldr	r0, [r5, #4]
    14a8:	lsl	r3, r0, #4
    14ac:	add	ip, r5, r3
    14b0:	sub	lr, ip, #4096	; 0x1000
    14b4:	ldr	r3, [lr, #4088]	; 0xff8
    14b8:	ldr	r0, [r3, #8]
    14bc:	cmp	r0, #0
    14c0:	bne	1520 <coda_mem_cursor_get_available_union_field_index+0x9c>
    14c4:	mov	r0, #0
    14c8:	ldr	r2, [r3, #16]
    14cc:	cmp	r0, r2
    14d0:	bge	14f8 <coda_mem_cursor_get_available_union_field_index+0x74>
    14d4:	ldr	r1, [r3, #20]
    14d8:	ldr	ip, [r1, r0, lsl #2]
    14dc:	cmp	ip, #0
    14e0:	beq	14f0 <coda_mem_cursor_get_available_union_field_index+0x6c>
    14e4:	str	r0, [r4]
    14e8:	mov	r0, #0
    14ec:	b	150c <coda_mem_cursor_get_available_union_field_index+0x88>
    14f0:	add	r0, r0, #1
    14f4:	b	14c8 <coda_mem_cursor_get_available_union_field_index+0x44>
    14f8:	movw	r0, #65236	; 0xfed4
    14fc:	movt	r0, #65535	; 0xffff
    1500:	ldr	r1, [pc, #80]	; 1558 <coda_mem_cursor_get_available_union_field_index+0xd4>
    1504:	bl	0 <coda_set_error>
    1508:	mvn	r0, #0
    150c:	ldr	r4, [sp, #8]
    1510:	ldr	r5, [sp, #12]
    1514:	ldr	lr, [sp, #4]
    1518:	add	sp, sp, #16
    151c:	bx	lr
    1520:	cmp	r0, #2
    1524:	beq	153c <coda_mem_cursor_get_available_union_field_index+0xb8>
    1528:	ldr	r0, [pc, #44]	; 155c <coda_mem_cursor_get_available_union_field_index+0xd8>
    152c:	ldr	r1, [pc, #48]	; 1564 <coda_mem_cursor_get_available_union_field_index+0xe0>
    1530:	movw	r2, #399	; 0x18f
    1534:	ldr	r3, [pc, #36]	; 1560 <coda_mem_cursor_get_available_union_field_index+0xdc>
    1538:	bl	0 <__assert_fail>
    153c:	mov	r1, r4
    1540:	mov	r0, r5
    1544:	ldr	r4, [sp, #8]
    1548:	ldr	r5, [sp, #12]
    154c:	ldr	lr, [sp, #4]
    1550:	add	sp, sp, #16
    1554:	b	0 <coda_ascbin_cursor_get_available_union_field_index>
    1558:	.word	0x0000005f
    155c:	.word	0x00000285
    1560:	.word	0x0000046a
    1564:	.word	0x00000000

00001568 <coda_mem_cursor_get_array_dim>:
    1568:	mov	ip, sp
    156c:	sub	sp, sp, #24
    1570:	str	ip, [sp]
    1574:	str	lr, [sp, #4]
    1578:	str	r4, [sp, #8]
    157c:	str	r5, [sp, #12]
    1580:	str	r6, [sp, #16]
    1584:	mov	r4, r2
    1588:	mov	r5, r1
    158c:	mov	r6, r0
    1590:	ldr	ip, [r6, #4]
    1594:	lsl	r0, ip, #4
    1598:	add	r2, r6, r0
    159c:	sub	lr, r2, #4096	; 0x1000
    15a0:	ldr	ip, [lr, #4088]	; 0xff8
    15a4:	ldr	r1, [ip, #8]
    15a8:	cmp	r1, #2
    15ac:	bne	15d4 <coda_mem_cursor_get_array_dim+0x6c>
    15b0:	mov	r2, r4
    15b4:	mov	r1, r5
    15b8:	mov	r0, r6
    15bc:	ldr	r4, [sp, #8]
    15c0:	ldr	r5, [sp, #12]
    15c4:	ldr	r6, [sp, #16]
    15c8:	ldr	lr, [sp, #4]
    15cc:	add	sp, sp, #24
    15d0:	b	0 <coda_ascbin_cursor_get_array_dim>
    15d4:	cmp	r1, #1
    15d8:	beq	15f0 <coda_mem_cursor_get_array_dim+0x88>
    15dc:	ldr	r0, [pc, #148]	; 1678 <coda_mem_cursor_get_array_dim+0x110>
    15e0:	ldr	r1, [pc, #148]	; 167c <coda_mem_cursor_get_array_dim+0x114>
    15e4:	movw	r2, #413	; 0x19d
    15e8:	ldr	r3, [pc, #132]	; 1674 <coda_mem_cursor_get_array_dim+0x10c>
    15ec:	bl	0 <__assert_fail>
    15f0:	ldr	r3, [r6, #4]
    15f4:	lsl	r3, r3, #4
    15f8:	add	r1, r6, r3
    15fc:	sub	lr, r1, #4096	; 0x1000
    1600:	ldr	r6, [lr, #4088]	; 0xff8
    1604:	ldr	r2, [r6, #4]
    1608:	ldr	r0, [r2, #44]	; 0x2c
    160c:	cmp	r0, #0
    1610:	blt	1648 <coda_mem_cursor_get_array_dim+0xe0>
    1614:	ldr	r3, [r2, #48]	; 0x30
    1618:	str	r3, [r5]
    161c:	mov	r1, #0
    1620:	ldr	r0, [r6, #4]
    1624:	ldr	r2, [r0, #48]	; 0x30
    1628:	cmp	r1, r2
    162c:	bge	1658 <coda_mem_cursor_get_array_dim+0xf0>
    1630:	lsl	r2, r1, #2
    1634:	add	r2, r0, r2
    1638:	ldr	ip, [r2, #52]	; 0x34
    163c:	str	ip, [r4, r1, lsl #2]
    1640:	add	r1, r1, #1
    1644:	b	1620 <coda_mem_cursor_get_array_dim+0xb8>
    1648:	mov	r3, #1
    164c:	str	r3, [r5]
    1650:	ldr	ip, [r6, #16]
    1654:	str	ip, [r4]
    1658:	mov	r0, #0
    165c:	ldr	r4, [sp, #8]
    1660:	ldr	r5, [sp, #12]
    1664:	ldr	r6, [sp, #16]
    1668:	ldr	lr, [sp, #4]
    166c:	add	sp, sp, #24
    1670:	bx	lr
    1674:	.word	0x0000049a
    1678:	.word	0x00000206
    167c:	.word	0x00000000

00001680 <coda_mem_cursor_read_int8>:
    1680:	mov	ip, sp
    1684:	sub	sp, sp, #24
    1688:	str	ip, [sp]
    168c:	str	lr, [sp, #4]
    1690:	str	r4, [sp, #8]
    1694:	str	r5, [sp, #12]
    1698:	str	r6, [sp, #16]
    169c:	mov	r4, r1
    16a0:	mov	r5, r0
    16a4:	ldr	r0, [r5, #4]
    16a8:	lsl	ip, r0, #4
    16ac:	add	r1, r5, ip
    16b0:	sub	lr, r1, #4096	; 0x1000
    16b4:	ldr	r6, [lr, #4088]	; 0xff8
    16b8:	ldr	r3, [r6, #8]
    16bc:	cmp	r3, #2
    16c0:	beq	16d8 <coda_mem_cursor_read_int8+0x58>
    16c4:	ldr	r0, [pc, #92]	; 1728 <coda_mem_cursor_read_int8+0xa8>
    16c8:	ldr	r1, [pc, #96]	; 1730 <coda_mem_cursor_read_int8+0xb0>
    16cc:	movw	r2, #439	; 0x1b7
    16d0:	ldr	r3, [pc, #84]	; 172c <coda_mem_cursor_read_int8+0xac>
    16d4:	bl	0 <__assert_fail>
    16d8:	ldr	r2, [r6, #4]
    16dc:	ldr	ip, [r2]
    16e0:	cmp	ip, #0
    16e4:	bne	1708 <coda_mem_cursor_read_int8+0x88>
    16e8:	mov	r1, r4
    16ec:	mov	r0, r5
    16f0:	ldr	r4, [sp, #8]
    16f4:	ldr	r5, [sp, #12]
    16f8:	ldr	r6, [sp, #16]
    16fc:	ldr	lr, [sp, #4]
    1700:	add	sp, sp, #24
    1704:	b	0 <coda_ascii_cursor_read_int8>
    1708:	mov	r1, r4
    170c:	mov	r0, r5
    1710:	ldr	r4, [sp, #8]
    1714:	ldr	r5, [sp, #12]
    1718:	ldr	r6, [sp, #16]
    171c:	ldr	lr, [sp, #4]
    1720:	add	sp, sp, #24
    1724:	b	0 <coda_bin_cursor_read_int8>
    1728:	.word	0x000001be
    172c:	.word	0x000004b8
    1730:	.word	0x00000000

00001734 <coda_mem_cursor_read_uint8>:
    1734:	mov	ip, sp
    1738:	sub	sp, sp, #24
    173c:	str	ip, [sp]
    1740:	str	lr, [sp, #4]
    1744:	str	r4, [sp, #8]
    1748:	str	r5, [sp, #12]
    174c:	str	r6, [sp, #16]
    1750:	mov	r4, r1
    1754:	mov	r5, r0
    1758:	ldr	r0, [r5, #4]
    175c:	lsl	ip, r0, #4
    1760:	add	r1, r5, ip
    1764:	sub	lr, r1, #4096	; 0x1000
    1768:	ldr	r6, [lr, #4088]	; 0xff8
    176c:	ldr	r3, [r6, #8]
    1770:	cmp	r3, #2
    1774:	beq	178c <coda_mem_cursor_read_uint8+0x58>
    1778:	ldr	r0, [pc, #92]	; 17dc <coda_mem_cursor_read_uint8+0xa8>
    177c:	ldr	r1, [pc, #96]	; 17e4 <coda_mem_cursor_read_uint8+0xb0>
    1780:	movw	r2, #451	; 0x1c3
    1784:	ldr	r3, [pc, #84]	; 17e0 <coda_mem_cursor_read_uint8+0xac>
    1788:	bl	0 <__assert_fail>
    178c:	ldr	r2, [r6, #4]
    1790:	ldr	ip, [r2]
    1794:	cmp	ip, #0
    1798:	bne	17bc <coda_mem_cursor_read_uint8+0x88>
    179c:	mov	r1, r4
    17a0:	mov	r0, r5
    17a4:	ldr	r4, [sp, #8]
    17a8:	ldr	r5, [sp, #12]
    17ac:	ldr	r6, [sp, #16]
    17b0:	ldr	lr, [sp, #4]
    17b4:	add	sp, sp, #24
    17b8:	b	0 <coda_ascii_cursor_read_uint8>
    17bc:	mov	r1, r4
    17c0:	mov	r0, r5
    17c4:	ldr	r4, [sp, #8]
    17c8:	ldr	r5, [sp, #12]
    17cc:	ldr	r6, [sp, #16]
    17d0:	ldr	lr, [sp, #4]
    17d4:	add	sp, sp, #24
    17d8:	b	0 <coda_bin_cursor_read_uint8>
    17dc:	.word	0x000001be
    17e0:	.word	0x000004d2
    17e4:	.word	0x00000000

000017e8 <coda_mem_cursor_read_int16>:
    17e8:	mov	ip, sp
    17ec:	sub	sp, sp, #24
    17f0:	str	ip, [sp]
    17f4:	str	lr, [sp, #4]
    17f8:	str	r4, [sp, #8]
    17fc:	str	r5, [sp, #12]
    1800:	str	r6, [sp, #16]
    1804:	mov	r4, r1
    1808:	mov	r5, r0
    180c:	ldr	r0, [r5, #4]
    1810:	lsl	ip, r0, #4
    1814:	add	r1, r5, ip
    1818:	sub	lr, r1, #4096	; 0x1000
    181c:	ldr	r6, [lr, #4088]	; 0xff8
    1820:	ldr	r3, [r6, #8]
    1824:	cmp	r3, #2
    1828:	beq	1840 <coda_mem_cursor_read_int16+0x58>
    182c:	ldr	r0, [pc, #92]	; 1890 <coda_mem_cursor_read_int16+0xa8>
    1830:	ldr	r1, [pc, #96]	; 1898 <coda_mem_cursor_read_int16+0xb0>
    1834:	movw	r2, #463	; 0x1cf
    1838:	ldr	r3, [pc, #84]	; 1894 <coda_mem_cursor_read_int16+0xac>
    183c:	bl	0 <__assert_fail>
    1840:	ldr	r2, [r6, #4]
    1844:	ldr	ip, [r2]
    1848:	cmp	ip, #0
    184c:	bne	1870 <coda_mem_cursor_read_int16+0x88>
    1850:	mov	r1, r4
    1854:	mov	r0, r5
    1858:	ldr	r4, [sp, #8]
    185c:	ldr	r5, [sp, #12]
    1860:	ldr	r6, [sp, #16]
    1864:	ldr	lr, [sp, #4]
    1868:	add	sp, sp, #24
    186c:	b	0 <coda_ascii_cursor_read_int16>
    1870:	mov	r1, r4
    1874:	mov	r0, r5
    1878:	ldr	r4, [sp, #8]
    187c:	ldr	r5, [sp, #12]
    1880:	ldr	r6, [sp, #16]
    1884:	ldr	lr, [sp, #4]
    1888:	add	sp, sp, #24
    188c:	b	0 <coda_bin_cursor_read_int16>
    1890:	.word	0x000001be
    1894:	.word	0x000004ed
    1898:	.word	0x00000000

0000189c <coda_mem_cursor_read_uint16>:
    189c:	mov	ip, sp
    18a0:	sub	sp, sp, #24
    18a4:	str	ip, [sp]
    18a8:	str	lr, [sp, #4]
    18ac:	str	r4, [sp, #8]
    18b0:	str	r5, [sp, #12]
    18b4:	str	r6, [sp, #16]
    18b8:	mov	r4, r1
    18bc:	mov	r5, r0
    18c0:	ldr	r0, [r5, #4]
    18c4:	lsl	ip, r0, #4
    18c8:	add	r1, r5, ip
    18cc:	sub	lr, r1, #4096	; 0x1000
    18d0:	ldr	r6, [lr, #4088]	; 0xff8
    18d4:	ldr	r3, [r6, #8]
    18d8:	cmp	r3, #2
    18dc:	beq	18f4 <coda_mem_cursor_read_uint16+0x58>
    18e0:	ldr	r0, [pc, #92]	; 1944 <coda_mem_cursor_read_uint16+0xa8>
    18e4:	ldr	r1, [pc, #96]	; 194c <coda_mem_cursor_read_uint16+0xb0>
    18e8:	movw	r2, #475	; 0x1db
    18ec:	ldr	r3, [pc, #84]	; 1948 <coda_mem_cursor_read_uint16+0xac>
    18f0:	bl	0 <__assert_fail>
    18f4:	ldr	r2, [r6, #4]
    18f8:	ldr	ip, [r2]
    18fc:	cmp	ip, #0
    1900:	bne	1924 <coda_mem_cursor_read_uint16+0x88>
    1904:	mov	r1, r4
    1908:	mov	r0, r5
    190c:	ldr	r4, [sp, #8]
    1910:	ldr	r5, [sp, #12]
    1914:	ldr	r6, [sp, #16]
    1918:	ldr	lr, [sp, #4]
    191c:	add	sp, sp, #24
    1920:	b	0 <coda_ascii_cursor_read_uint16>
    1924:	mov	r1, r4
    1928:	mov	r0, r5
    192c:	ldr	r4, [sp, #8]
    1930:	ldr	r5, [sp, #12]
    1934:	ldr	r6, [sp, #16]
    1938:	ldr	lr, [sp, #4]
    193c:	add	sp, sp, #24
    1940:	b	0 <coda_bin_cursor_read_uint16>
    1944:	.word	0x000001be
    1948:	.word	0x00000508
    194c:	.word	0x00000000

00001950 <coda_mem_cursor_read_int32>:
    1950:	mov	ip, sp
    1954:	sub	sp, sp, #24
    1958:	str	ip, [sp]
    195c:	str	lr, [sp, #4]
    1960:	str	r4, [sp, #8]
    1964:	str	r5, [sp, #12]
    1968:	str	r6, [sp, #16]
    196c:	mov	r4, r1
    1970:	mov	r5, r0
    1974:	ldr	r0, [r5, #4]
    1978:	lsl	ip, r0, #4
    197c:	add	r1, r5, ip
    1980:	sub	lr, r1, #4096	; 0x1000
    1984:	ldr	r6, [lr, #4088]	; 0xff8
    1988:	ldr	r3, [r6, #8]
    198c:	cmp	r3, #2
    1990:	beq	19a8 <coda_mem_cursor_read_int32+0x58>
    1994:	ldr	r0, [pc, #92]	; 19f8 <coda_mem_cursor_read_int32+0xa8>
    1998:	ldr	r1, [pc, #96]	; 1a00 <coda_mem_cursor_read_int32+0xb0>
    199c:	movw	r2, #487	; 0x1e7
    19a0:	ldr	r3, [pc, #84]	; 19fc <coda_mem_cursor_read_int32+0xac>
    19a4:	bl	0 <__assert_fail>
    19a8:	ldr	r2, [r6, #4]
    19ac:	ldr	ip, [r2]
    19b0:	cmp	ip, #0
    19b4:	bne	19d8 <coda_mem_cursor_read_int32+0x88>
    19b8:	mov	r1, r4
    19bc:	mov	r0, r5
    19c0:	ldr	r4, [sp, #8]
    19c4:	ldr	r5, [sp, #12]
    19c8:	ldr	r6, [sp, #16]
    19cc:	ldr	lr, [sp, #4]
    19d0:	add	sp, sp, #24
    19d4:	b	0 <coda_ascii_cursor_read_int32>
    19d8:	mov	r1, r4
    19dc:	mov	r0, r5
    19e0:	ldr	r4, [sp, #8]
    19e4:	ldr	r5, [sp, #12]
    19e8:	ldr	r6, [sp, #16]
    19ec:	ldr	lr, [sp, #4]
    19f0:	add	sp, sp, #24
    19f4:	b	0 <coda_bin_cursor_read_int32>
    19f8:	.word	0x000001be
    19fc:	.word	0x00000524
    1a00:	.word	0x00000000

00001a04 <coda_mem_cursor_read_uint32>:
    1a04:	mov	ip, sp
    1a08:	sub	sp, sp, #24
    1a0c:	str	ip, [sp]
    1a10:	str	lr, [sp, #4]
    1a14:	str	r4, [sp, #8]
    1a18:	str	r5, [sp, #12]
    1a1c:	str	r6, [sp, #16]
    1a20:	mov	r4, r1
    1a24:	mov	r5, r0
    1a28:	ldr	r0, [r5, #4]
    1a2c:	lsl	ip, r0, #4
    1a30:	add	r1, r5, ip
    1a34:	sub	lr, r1, #4096	; 0x1000
    1a38:	ldr	r6, [lr, #4088]	; 0xff8
    1a3c:	ldr	r3, [r6, #8]
    1a40:	cmp	r3, #2
    1a44:	beq	1a5c <coda_mem_cursor_read_uint32+0x58>
    1a48:	ldr	r0, [pc, #96]	; 1ab0 <coda_mem_cursor_read_uint32+0xac>
    1a4c:	ldr	r1, [pc, #96]	; 1ab4 <coda_mem_cursor_read_uint32+0xb0>
    1a50:	movw	r2, #499	; 0x1f3
    1a54:	ldr	r3, [pc, #80]	; 1aac <coda_mem_cursor_read_uint32+0xa8>
    1a58:	bl	0 <__assert_fail>
    1a5c:	ldr	r2, [r6, #4]
    1a60:	ldr	ip, [r2]
    1a64:	cmp	ip, #0
    1a68:	bne	1a8c <coda_mem_cursor_read_uint32+0x88>
    1a6c:	mov	r1, r4
    1a70:	mov	r0, r5
    1a74:	ldr	r4, [sp, #8]
    1a78:	ldr	r5, [sp, #12]
    1a7c:	ldr	r6, [sp, #16]
    1a80:	ldr	lr, [sp, #4]
    1a84:	add	sp, sp, #24
    1a88:	b	0 <coda_ascii_cursor_read_uint32>
    1a8c:	mov	r1, r4
    1a90:	mov	r0, r5
    1a94:	ldr	r4, [sp, #8]
    1a98:	ldr	r5, [sp, #12]
    1a9c:	ldr	r6, [sp, #16]
    1aa0:	ldr	lr, [sp, #4]
    1aa4:	add	sp, sp, #24
    1aa8:	b	0 <coda_bin_cursor_read_uint32>
    1aac:	.word	0x0000053f
    1ab0:	.word	0x000001be
    1ab4:	.word	0x00000000

00001ab8 <coda_mem_cursor_read_int64>:
    1ab8:	mov	ip, sp
    1abc:	sub	sp, sp, #24
    1ac0:	str	ip, [sp]
    1ac4:	str	lr, [sp, #4]
    1ac8:	str	r4, [sp, #8]
    1acc:	str	r5, [sp, #12]
    1ad0:	str	r6, [sp, #16]
    1ad4:	mov	r4, r1
    1ad8:	mov	r5, r0
    1adc:	ldr	r0, [r5, #4]
    1ae0:	lsl	ip, r0, #4
    1ae4:	add	r1, r5, ip
    1ae8:	sub	lr, r1, #4096	; 0x1000
    1aec:	ldr	r6, [lr, #4088]	; 0xff8
    1af0:	ldr	r3, [r6, #8]
    1af4:	cmp	r3, #2
    1af8:	beq	1b10 <coda_mem_cursor_read_int64+0x58>
    1afc:	ldr	r0, [pc, #92]	; 1b60 <coda_mem_cursor_read_int64+0xa8>
    1b00:	ldr	r1, [pc, #96]	; 1b68 <coda_mem_cursor_read_int64+0xb0>
    1b04:	movw	r2, #511	; 0x1ff
    1b08:	ldr	r3, [pc, #84]	; 1b64 <coda_mem_cursor_read_int64+0xac>
    1b0c:	bl	0 <__assert_fail>
    1b10:	ldr	r2, [r6, #4]
    1b14:	ldr	ip, [r2]
    1b18:	cmp	ip, #0
    1b1c:	bne	1b40 <coda_mem_cursor_read_int64+0x88>
    1b20:	mov	r1, r4
    1b24:	mov	r0, r5
    1b28:	ldr	r4, [sp, #8]
    1b2c:	ldr	r5, [sp, #12]
    1b30:	ldr	r6, [sp, #16]
    1b34:	ldr	lr, [sp, #4]
    1b38:	add	sp, sp, #24
    1b3c:	b	0 <coda_ascii_cursor_read_int64>
    1b40:	mov	r1, r4
    1b44:	mov	r0, r5
    1b48:	ldr	r4, [sp, #8]
    1b4c:	ldr	r5, [sp, #12]
    1b50:	ldr	r6, [sp, #16]
    1b54:	ldr	lr, [sp, #4]
    1b58:	add	sp, sp, #24
    1b5c:	b	0 <coda_bin_cursor_read_int64>
    1b60:	.word	0x000001be
    1b64:	.word	0x0000055b
    1b68:	.word	0x00000000

00001b6c <coda_mem_cursor_read_uint64>:
    1b6c:	mov	ip, sp
    1b70:	sub	sp, sp, #24
    1b74:	str	ip, [sp]
    1b78:	str	lr, [sp, #4]
    1b7c:	str	r4, [sp, #8]
    1b80:	str	r5, [sp, #12]
    1b84:	str	r6, [sp, #16]
    1b88:	mov	r4, r1
    1b8c:	mov	r5, r0
    1b90:	ldr	r0, [r5, #4]
    1b94:	lsl	ip, r0, #4
    1b98:	add	r1, r5, ip
    1b9c:	sub	lr, r1, #4096	; 0x1000
    1ba0:	ldr	r6, [lr, #4088]	; 0xff8
    1ba4:	ldr	r3, [r6, #8]
    1ba8:	cmp	r3, #2
    1bac:	beq	1bc4 <coda_mem_cursor_read_uint64+0x58>
    1bb0:	ldr	r0, [pc, #92]	; 1c14 <coda_mem_cursor_read_uint64+0xa8>
    1bb4:	ldr	r1, [pc, #96]	; 1c1c <coda_mem_cursor_read_uint64+0xb0>
    1bb8:	movw	r2, #523	; 0x20b
    1bbc:	ldr	r3, [pc, #84]	; 1c18 <coda_mem_cursor_read_uint64+0xac>
    1bc0:	bl	0 <__assert_fail>
    1bc4:	ldr	r2, [r6, #4]
    1bc8:	ldr	ip, [r2]
    1bcc:	cmp	ip, #0
    1bd0:	bne	1bf4 <coda_mem_cursor_read_uint64+0x88>
    1bd4:	mov	r1, r4
    1bd8:	mov	r0, r5
    1bdc:	ldr	r4, [sp, #8]
    1be0:	ldr	r5, [sp, #12]
    1be4:	ldr	r6, [sp, #16]
    1be8:	ldr	lr, [sp, #4]
    1bec:	add	sp, sp, #24
    1bf0:	b	0 <coda_ascii_cursor_read_uint64>
    1bf4:	mov	r1, r4
    1bf8:	mov	r0, r5
    1bfc:	ldr	r4, [sp, #8]
    1c00:	ldr	r5, [sp, #12]
    1c04:	ldr	r6, [sp, #16]
    1c08:	ldr	lr, [sp, #4]
    1c0c:	add	sp, sp, #24
    1c10:	b	0 <coda_bin_cursor_read_uint64>
    1c14:	.word	0x000001be
    1c18:	.word	0x00000576
    1c1c:	.word	0x00000000

00001c20 <coda_mem_cursor_read_float>:
    1c20:	mov	ip, sp
    1c24:	sub	sp, sp, #24
    1c28:	str	ip, [sp]
    1c2c:	str	lr, [sp, #4]
    1c30:	str	r4, [sp, #8]
    1c34:	str	r5, [sp, #12]
    1c38:	str	r6, [sp, #16]
    1c3c:	mov	r4, r1
    1c40:	mov	r5, r0
    1c44:	ldr	r0, [r5, #4]
    1c48:	lsl	ip, r0, #4
    1c4c:	add	r1, r5, ip
    1c50:	sub	lr, r1, #4096	; 0x1000
    1c54:	ldr	r6, [lr, #4088]	; 0xff8
    1c58:	ldr	r3, [r6, #8]
    1c5c:	cmp	r3, #2
    1c60:	beq	1c78 <coda_mem_cursor_read_float+0x58>
    1c64:	ldr	r0, [pc, #96]	; 1ccc <coda_mem_cursor_read_float+0xac>
    1c68:	ldr	r1, [pc, #96]	; 1cd0 <coda_mem_cursor_read_float+0xb0>
    1c6c:	movw	r2, #535	; 0x217
    1c70:	ldr	r3, [pc, #80]	; 1cc8 <coda_mem_cursor_read_float+0xa8>
    1c74:	bl	0 <__assert_fail>
    1c78:	ldr	r2, [r6, #4]
    1c7c:	ldr	ip, [r2]
    1c80:	cmp	ip, #0
    1c84:	bne	1ca8 <coda_mem_cursor_read_float+0x88>
    1c88:	mov	r1, r4
    1c8c:	mov	r0, r5
    1c90:	ldr	r4, [sp, #8]
    1c94:	ldr	r5, [sp, #12]
    1c98:	ldr	r6, [sp, #16]
    1c9c:	ldr	lr, [sp, #4]
    1ca0:	add	sp, sp, #24
    1ca4:	b	0 <coda_ascii_cursor_read_float>
    1ca8:	mov	r1, r4
    1cac:	mov	r0, r5
    1cb0:	ldr	r4, [sp, #8]
    1cb4:	ldr	r5, [sp, #12]
    1cb8:	ldr	r6, [sp, #16]
    1cbc:	ldr	lr, [sp, #4]
    1cc0:	add	sp, sp, #24
    1cc4:	b	0 <coda_bin_cursor_read_float>
    1cc8:	.word	0x00000592
    1ccc:	.word	0x000001be
    1cd0:	.word	0x00000000

00001cd4 <coda_mem_cursor_read_double>:
    1cd4:	mov	ip, sp
    1cd8:	sub	sp, sp, #24
    1cdc:	str	ip, [sp]
    1ce0:	str	lr, [sp, #4]
    1ce4:	str	r4, [sp, #8]
    1ce8:	str	r5, [sp, #12]
    1cec:	str	r6, [sp, #16]
    1cf0:	mov	r4, r1
    1cf4:	mov	r5, r0
    1cf8:	ldr	r0, [r5, #4]
    1cfc:	lsl	ip, r0, #4
    1d00:	add	r1, r5, ip
    1d04:	sub	lr, r1, #4096	; 0x1000
    1d08:	ldr	r6, [lr, #4088]	; 0xff8
    1d0c:	ldr	r3, [r6, #8]
    1d10:	cmp	r3, #2
    1d14:	beq	1d2c <coda_mem_cursor_read_double+0x58>
    1d18:	ldr	r0, [pc, #96]	; 1d80 <coda_mem_cursor_read_double+0xac>
    1d1c:	ldr	r1, [pc, #96]	; 1d84 <coda_mem_cursor_read_double+0xb0>
    1d20:	movw	r2, #547	; 0x223
    1d24:	ldr	r3, [pc, #80]	; 1d7c <coda_mem_cursor_read_double+0xa8>
    1d28:	bl	0 <__assert_fail>
    1d2c:	ldr	r2, [r6, #4]
    1d30:	ldr	ip, [r2]
    1d34:	cmp	ip, #0
    1d38:	bne	1d5c <coda_mem_cursor_read_double+0x88>
    1d3c:	mov	r1, r4
    1d40:	mov	r0, r5
    1d44:	ldr	r4, [sp, #8]
    1d48:	ldr	r5, [sp, #12]
    1d4c:	ldr	r6, [sp, #16]
    1d50:	ldr	lr, [sp, #4]
    1d54:	add	sp, sp, #24
    1d58:	b	0 <coda_ascii_cursor_read_double>
    1d5c:	mov	r1, r4
    1d60:	mov	r0, r5
    1d64:	ldr	r4, [sp, #8]
    1d68:	ldr	r5, [sp, #12]
    1d6c:	ldr	r6, [sp, #16]
    1d70:	ldr	lr, [sp, #4]
    1d74:	add	sp, sp, #24
    1d78:	b	0 <coda_bin_cursor_read_double>
    1d7c:	.word	0x000005ad
    1d80:	.word	0x000001be
    1d84:	.word	0x00000000

00001d88 <coda_mem_cursor_read_char>:
    1d88:	mov	ip, sp
    1d8c:	sub	sp, sp, #24
    1d90:	str	ip, [sp]
    1d94:	str	lr, [sp, #4]
    1d98:	str	r4, [sp, #8]
    1d9c:	str	r5, [sp, #12]
    1da0:	str	r6, [sp, #16]
    1da4:	mov	r4, r1
    1da8:	mov	r5, r0
    1dac:	ldr	r0, [r5, #4]
    1db0:	lsl	r3, r0, #4
    1db4:	add	r2, r5, r3
    1db8:	sub	lr, r2, #4096	; 0x1000
    1dbc:	ldr	r6, [lr, #4088]	; 0xff8
    1dc0:	ldr	r1, [r6, #8]
    1dc4:	cmp	r1, #2
    1dc8:	beq	1de0 <coda_mem_cursor_read_char+0x58>
    1dcc:	ldr	r0, [pc, #100]	; 1e38 <coda_mem_cursor_read_char+0xb0>
    1dd0:	ldr	r1, [pc, #104]	; 1e40 <coda_mem_cursor_read_char+0xb8>
    1dd4:	movw	r2, #559	; 0x22f
    1dd8:	ldr	r3, [pc, #92]	; 1e3c <coda_mem_cursor_read_char+0xb4>
    1ddc:	bl	0 <__assert_fail>
    1de0:	ldr	r1, [r6, #4]
    1de4:	ldr	r0, [r1]
    1de8:	cmp	r0, #0
    1dec:	beq	1e18 <coda_mem_cursor_read_char+0x90>
    1df0:	cmp	r0, #2
    1df4:	beq	1e18 <coda_mem_cursor_read_char+0x90>
    1df8:	mov	r1, r4
    1dfc:	mov	r0, r5
    1e00:	ldr	r4, [sp, #8]
    1e04:	ldr	r5, [sp, #12]
    1e08:	ldr	r6, [sp, #16]
    1e0c:	ldr	lr, [sp, #4]
    1e10:	add	sp, sp, #24
    1e14:	b	0 <coda_bin_cursor_read_char>
    1e18:	mov	r1, r4
    1e1c:	mov	r0, r5
    1e20:	ldr	r4, [sp, #8]
    1e24:	ldr	r5, [sp, #12]
    1e28:	ldr	r6, [sp, #16]
    1e2c:	ldr	lr, [sp, #4]
    1e30:	add	sp, sp, #24
    1e34:	b	0 <coda_ascii_cursor_read_char>
    1e38:	.word	0x000001be
    1e3c:	.word	0x000005c9
    1e40:	.word	0x00000000

00001e44 <coda_mem_cursor_read_string>:
    1e44:	mov	ip, sp
    1e48:	sub	sp, sp, #544	; 0x220
    1e4c:	str	ip, [sp]
    1e50:	str	lr, [sp, #4]
    1e54:	str	r4, [sp, #8]
    1e58:	str	r5, [sp, #12]
    1e5c:	str	r6, [sp, #16]
    1e60:	mov	r4, r2
    1e64:	mov	r5, r1
    1e68:	mov	r6, r0
    1e6c:	ldr	r2, [r6, #4]
    1e70:	lsl	r0, r2, #4
    1e74:	add	r1, r6, r0
    1e78:	sub	lr, r1, #4096	; 0x1000
    1e7c:	ldr	r2, [lr, #4088]	; 0xff8
    1e80:	ldr	r0, [r2, #8]
    1e84:	cmp	r0, #3
    1e88:	bne	1ed4 <coda_mem_cursor_read_string+0x90>
    1e8c:	mov	r2, r6
    1e90:	add	r3, sp, #24
    1e94:	mov	lr, #130	; 0x82
    1e98:	ldr	ip, [r2], #4
    1e9c:	subs	lr, lr, #1
    1ea0:	str	ip, [r3], #4
    1ea4:	bne	1e98 <coda_mem_cursor_read_string+0x54>
    1ea8:	add	r0, sp, #24
    1eac:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1eb0:	cmp	r0, #0
    1eb4:	beq	1ec0 <coda_mem_cursor_read_string+0x7c>
    1eb8:	mvn	r0, #0
    1ebc:	b	1f00 <coda_mem_cursor_read_string+0xbc>
    1ec0:	add	r0, sp, #24
    1ec4:	mov	r2, r4
    1ec8:	mov	r1, r5
    1ecc:	bl	0 <coda_cursor_read_string>
    1ed0:	b	1f00 <coda_mem_cursor_read_string+0xbc>
    1ed4:	cmp	r0, #2
    1ed8:	beq	1ef0 <coda_mem_cursor_read_string+0xac>
    1edc:	ldr	r0, [pc, #52]	; 1f18 <coda_mem_cursor_read_string+0xd4>
    1ee0:	ldr	r1, [pc, #56]	; 1f20 <coda_mem_cursor_read_string+0xdc>
    1ee4:	movw	r2, #582	; 0x246
    1ee8:	ldr	r3, [pc, #44]	; 1f1c <coda_mem_cursor_read_string+0xd8>
    1eec:	bl	0 <__assert_fail>
    1ef0:	mov	r2, r4
    1ef4:	mov	r1, r5
    1ef8:	mov	r0, r6
    1efc:	bl	0 <coda_ascii_cursor_read_string>
    1f00:	ldr	r4, [sp, #8]
    1f04:	ldr	r5, [sp, #12]
    1f08:	ldr	r6, [sp, #16]
    1f0c:	ldr	lr, [sp, #4]
    1f10:	add	sp, sp, #544	; 0x220
    1f14:	bx	lr
    1f18:	.word	0x000001be
    1f1c:	.word	0x000005e3
    1f20:	.word	0x00000000

00001f24 <coda_mem_cursor_read_bits>:
    1f24:	mov	ip, sp
    1f28:	sub	sp, sp, #560	; 0x230
    1f2c:	str	ip, [sp, #8]
    1f30:	str	lr, [sp, #12]
    1f34:	str	r4, [sp, #16]
    1f38:	str	r5, [sp, #20]
    1f3c:	str	r6, [sp, #24]
    1f40:	str	r7, [sp, #28]
    1f44:	str	r8, [sp, #32]
    1f48:	ldr	r8, [ip, #4]
    1f4c:	ldr	r7, [ip]
    1f50:	mov	r4, r3
    1f54:	mov	r5, r2
    1f58:	mov	r6, r1
    1f5c:	ldr	r2, [r0, #4]
    1f60:	lsl	r1, r2, #4
    1f64:	add	r2, r0, r1
    1f68:	sub	lr, r2, #4096	; 0x1000
    1f6c:	ldr	r2, [lr, #4088]	; 0xff8
    1f70:	ldr	r1, [r2, #8]
    1f74:	cmp	r1, #3
    1f78:	bne	1fd0 <coda_mem_cursor_read_bits+0xac>
    1f7c:	mov	r2, r0
    1f80:	add	r3, sp, #40	; 0x28
    1f84:	mov	lr, #130	; 0x82
    1f88:	ldr	ip, [r2], #4
    1f8c:	subs	lr, lr, #1
    1f90:	str	ip, [r3], #4
    1f94:	bne	1f88 <coda_mem_cursor_read_bits+0x64>
    1f98:	add	r0, sp, #40	; 0x28
    1f9c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1fa0:	cmp	r0, #0
    1fa4:	beq	1fb0 <coda_mem_cursor_read_bits+0x8c>
    1fa8:	mvn	r0, #0
    1fac:	b	2030 <coda_mem_cursor_read_bits+0x10c>
    1fb0:	add	r0, sp, #40	; 0x28
    1fb4:	str	r8, [sp, #4]
    1fb8:	str	r7, [sp]
    1fbc:	mov	r3, r4
    1fc0:	mov	r2, r5
    1fc4:	mov	r1, r6
    1fc8:	bl	0 <coda_cursor_read_bits>
    1fcc:	b	2030 <coda_mem_cursor_read_bits+0x10c>
    1fd0:	cmp	r1, #2
    1fd4:	bne	2020 <coda_mem_cursor_read_bits+0xfc>
    1fd8:	ldr	r3, [r2, #4]
    1fdc:	ldr	r1, [r3]
    1fe0:	cmp	r1, #0
    1fe4:	bne	2004 <coda_mem_cursor_read_bits+0xe0>
    1fe8:	str	r8, [sp, #4]
    1fec:	str	r7, [sp]
    1ff0:	mov	r3, r4
    1ff4:	mov	r2, r5
    1ff8:	mov	r1, r6
    1ffc:	bl	0 <coda_ascii_cursor_read_bits>
    2000:	b	2030 <coda_mem_cursor_read_bits+0x10c>
    2004:	str	r8, [sp, #4]
    2008:	str	r7, [sp]
    200c:	mov	r3, r4
    2010:	mov	r2, r5
    2014:	mov	r1, r6
    2018:	bl	0 <coda_bin_cursor_read_bits>
    201c:	b	2030 <coda_mem_cursor_read_bits+0x10c>
    2020:	mvn	r0, #104	; 0x68
    2024:	ldr	r1, [pc, #36]	; 2050 <coda_mem_cursor_read_bits+0x12c>
    2028:	bl	0 <coda_set_error>
    202c:	mvn	r0, #0
    2030:	ldr	r4, [sp, #16]
    2034:	ldr	r5, [sp, #20]
    2038:	ldr	r6, [sp, #24]
    203c:	ldr	r7, [sp, #28]
    2040:	ldr	r8, [sp, #32]
    2044:	ldr	lr, [sp, #12]
    2048:	add	sp, sp, #560	; 0x230
    204c:	bx	lr
    2050:	.word	0x00000122

00002054 <coda_mem_cursor_read_bytes>:
    2054:	mov	ip, sp
    2058:	sub	sp, sp, #560	; 0x230
    205c:	str	ip, [sp, #8]
    2060:	str	lr, [sp, #12]
    2064:	str	r4, [sp, #16]
    2068:	str	r5, [sp, #20]
    206c:	str	r6, [sp, #24]
    2070:	str	r7, [sp, #28]
    2074:	str	r8, [sp, #32]
    2078:	ldr	r8, [ip, #4]
    207c:	ldr	r7, [ip]
    2080:	mov	r4, r3
    2084:	mov	r5, r2
    2088:	mov	r6, r1
    208c:	ldr	ip, [r0, #4]
    2090:	lsl	ip, ip, #4
    2094:	add	r2, r0, ip
    2098:	sub	lr, r2, #4096	; 0x1000
    209c:	ldr	r2, [lr, #4088]	; 0xff8
    20a0:	ldr	r1, [r2, #8]
    20a4:	cmp	r1, #3
    20a8:	bne	2100 <coda_mem_cursor_read_bytes+0xac>
    20ac:	mov	r2, r0
    20b0:	add	r3, sp, #40	; 0x28
    20b4:	mov	lr, #130	; 0x82
    20b8:	ldr	ip, [r2], #4
    20bc:	subs	lr, lr, #1
    20c0:	str	ip, [r3], #4
    20c4:	bne	20b8 <coda_mem_cursor_read_bytes+0x64>
    20c8:	add	r0, sp, #40	; 0x28
    20cc:	bl	0 <coda_cursor_use_base_type_of_special_type>
    20d0:	cmp	r0, #0
    20d4:	beq	20e0 <coda_mem_cursor_read_bytes+0x8c>
    20d8:	mvn	r0, #0
    20dc:	b	2168 <coda_mem_cursor_read_bytes+0x114>
    20e0:	add	r0, sp, #40	; 0x28
    20e4:	str	r8, [sp, #4]
    20e8:	str	r7, [sp]
    20ec:	mov	r3, r4
    20f0:	mov	r2, r5
    20f4:	mov	r1, r6
    20f8:	bl	0 <coda_cursor_read_bytes>
    20fc:	b	2168 <coda_mem_cursor_read_bytes+0x114>
    2100:	cmp	r1, #2
    2104:	bne	2158 <coda_mem_cursor_read_bytes+0x104>
    2108:	ldr	r3, [r2, #4]
    210c:	ldr	r1, [r3]
    2110:	cmp	r1, #0
    2114:	beq	213c <coda_mem_cursor_read_bytes+0xe8>
    2118:	cmp	r1, #2
    211c:	beq	213c <coda_mem_cursor_read_bytes+0xe8>
    2120:	str	r8, [sp, #4]
    2124:	str	r7, [sp]
    2128:	mov	r3, r4
    212c:	mov	r2, r5
    2130:	mov	r1, r6
    2134:	bl	0 <coda_bin_cursor_read_bytes>
    2138:	b	2168 <coda_mem_cursor_read_bytes+0x114>
    213c:	str	r8, [sp, #4]
    2140:	str	r7, [sp]
    2144:	mov	r3, r4
    2148:	mov	r2, r5
    214c:	mov	r1, r6
    2150:	bl	0 <coda_ascii_cursor_read_bytes>
    2154:	b	2168 <coda_mem_cursor_read_bytes+0x114>
    2158:	mvn	r0, #104	; 0x68
    215c:	ldr	r1, [pc, #36]	; 2188 <coda_mem_cursor_read_bytes+0x134>
    2160:	bl	0 <coda_set_error>
    2164:	mvn	r0, #0
    2168:	ldr	r4, [sp, #16]
    216c:	ldr	r5, [sp, #20]
    2170:	ldr	r6, [sp, #24]
    2174:	ldr	r7, [sp, #28]
    2178:	ldr	r8, [sp, #32]
    217c:	ldr	lr, [sp, #12]
    2180:	add	sp, sp, #560	; 0x230
    2184:	bx	lr
    2188:	.word	0x0000007d

0000218c <coda_mem_cursor_read_int8_array>:
    218c:	mov	ip, sp
    2190:	sub	sp, sp, #32
    2194:	str	ip, [sp, #4]
    2198:	str	lr, [sp, #8]
    219c:	str	r4, [sp, #16]
    21a0:	str	r5, [sp, #20]
    21a4:	str	r6, [sp, #24]
    21a8:	str	r7, [sp, #28]
    21ac:	mov	r4, r2
    21b0:	mov	r5, r1
    21b4:	mov	r6, r0
    21b8:	ldr	r0, [r6, #4]
    21bc:	lsl	r2, r0, #4
    21c0:	add	r2, r6, r2
    21c4:	sub	lr, r2, #4096	; 0x1000
    21c8:	ldr	r7, [lr, #4088]	; 0xff8
    21cc:	ldr	r1, [r7, #8]
    21d0:	cmp	r1, #1
    21d4:	bne	21f4 <coda_mem_cursor_read_int8_array+0x68>
    21d8:	ldr	r1, [pc, #256]	; 22e0 <coda_mem_cursor_read_int8_array+0x154>
    21dc:	mov	r3, #1
    21e0:	str	r4, [sp]
    21e4:	mov	r2, r5
    21e8:	mov	r0, r6
    21ec:	bl	0 <read_array>
    21f0:	b	22b4 <coda_mem_cursor_read_int8_array+0x128>
    21f4:	cmp	r1, #2
    21f8:	beq	2210 <coda_mem_cursor_read_int8_array+0x84>
    21fc:	ldr	r0, [pc, #212]	; 22d8 <coda_mem_cursor_read_int8_array+0x14c>
    2200:	ldr	r1, [pc, #224]	; 22e8 <coda_mem_cursor_read_int8_array+0x15c>
    2204:	movw	r2, #651	; 0x28b
    2208:	ldr	r3, [pc, #192]	; 22d0 <coda_mem_cursor_read_int8_array+0x144>
    220c:	bl	0 <__assert_fail>
    2210:	ldr	r0, [r7, #4]
    2214:	ldr	ip, [r0, #40]	; 0x28
    2218:	ldr	r0, [ip]
    221c:	cmp	r0, #1
    2220:	bne	2240 <coda_mem_cursor_read_int8_array+0xb4>
    2224:	ldr	r1, [pc, #184]	; 22e4 <coda_mem_cursor_read_int8_array+0x158>
    2228:	mov	r3, #1
    222c:	str	r4, [sp]
    2230:	mov	r2, r5
    2234:	mov	r0, r6
    2238:	bl	0 <read_array>
    223c:	b	22b4 <coda_mem_cursor_read_int8_array+0x128>
    2240:	cmp	r0, #0
    2244:	beq	225c <coda_mem_cursor_read_int8_array+0xd0>
    2248:	ldr	r0, [pc, #140]	; 22dc <coda_mem_cursor_read_int8_array+0x150>
    224c:	ldr	r1, [pc, #148]	; 22e8 <coda_mem_cursor_read_int8_array+0x15c>
    2250:	movw	r2, #657	; 0x291
    2254:	ldr	r3, [pc, #116]	; 22d0 <coda_mem_cursor_read_int8_array+0x144>
    2258:	bl	0 <__assert_fail>
    225c:	ldr	r1, [pc, #112]	; 22d4 <coda_mem_cursor_read_int8_array+0x148>
    2260:	mov	r3, #1
    2264:	mov	r2, #0
    2268:	str	r2, [sp]
    226c:	mov	r2, r5
    2270:	mov	r0, r6
    2274:	bl	0 <read_array>
    2278:	cmp	r0, #0
    227c:	beq	2288 <coda_mem_cursor_read_int8_array+0xfc>
    2280:	mvn	r0, #0
    2284:	b	22b4 <coda_mem_cursor_read_int8_array+0x128>
    2288:	cmp	r4, #0
    228c:	beq	22b0 <coda_mem_cursor_read_int8_array+0x124>
    2290:	mov	r2, #1
    2294:	mov	r1, r5
    2298:	mov	r0, r6
    229c:	bl	3a0 <transpose_array>
    22a0:	cmp	r0, #0
    22a4:	beq	22b0 <coda_mem_cursor_read_int8_array+0x124>
    22a8:	mvn	r0, #0
    22ac:	b	22b4 <coda_mem_cursor_read_int8_array+0x128>
    22b0:	mov	r0, #0
    22b4:	ldr	r4, [sp, #16]
    22b8:	ldr	r5, [sp, #20]
    22bc:	ldr	r6, [sp, #24]
    22c0:	ldr	r7, [sp, #28]
    22c4:	ldr	lr, [sp, #8]
    22c8:	add	sp, sp, #32
    22cc:	bx	lr
    22d0:	.word	0x000005ff
    22d4:	.word	0x00000000
    22d8:	.word	0x000001be
    22dc:	.word	0x00000170
	...

000022ec <coda_mem_cursor_read_uint8_array>:
    22ec:	mov	ip, sp
    22f0:	sub	sp, sp, #32
    22f4:	str	ip, [sp, #4]
    22f8:	str	lr, [sp, #8]
    22fc:	str	r4, [sp, #16]
    2300:	str	r5, [sp, #20]
    2304:	str	r6, [sp, #24]
    2308:	str	r7, [sp, #28]
    230c:	mov	r4, r2
    2310:	mov	r5, r1
    2314:	mov	r6, r0
    2318:	ldr	r0, [r6, #4]
    231c:	lsl	r2, r0, #4
    2320:	add	r2, r6, r2
    2324:	sub	lr, r2, #4096	; 0x1000
    2328:	ldr	r7, [lr, #4088]	; 0xff8
    232c:	ldr	r1, [r7, #8]
    2330:	cmp	r1, #1
    2334:	bne	2354 <coda_mem_cursor_read_uint8_array+0x68>
    2338:	ldr	r1, [pc, #256]	; 2440 <coda_mem_cursor_read_uint8_array+0x154>
    233c:	mov	r3, #1
    2340:	str	r4, [sp]
    2344:	mov	r2, r5
    2348:	mov	r0, r6
    234c:	bl	0 <read_array>
    2350:	b	2414 <coda_mem_cursor_read_uint8_array+0x128>
    2354:	cmp	r1, #2
    2358:	beq	2370 <coda_mem_cursor_read_uint8_array+0x84>
    235c:	ldr	r0, [pc, #208]	; 2434 <coda_mem_cursor_read_uint8_array+0x148>
    2360:	ldr	r1, [pc, #220]	; 2444 <coda_mem_cursor_read_uint8_array+0x158>
    2364:	movw	r2, #682	; 0x2aa
    2368:	ldr	r3, [pc, #192]	; 2430 <coda_mem_cursor_read_uint8_array+0x144>
    236c:	bl	0 <__assert_fail>
    2370:	ldr	r0, [r7, #4]
    2374:	ldr	ip, [r0, #40]	; 0x28
    2378:	ldr	r0, [ip]
    237c:	cmp	r0, #1
    2380:	bne	23a0 <coda_mem_cursor_read_uint8_array+0xb4>
    2384:	ldr	r1, [pc, #188]	; 2448 <coda_mem_cursor_read_uint8_array+0x15c>
    2388:	mov	r3, #1
    238c:	str	r4, [sp]
    2390:	mov	r2, r5
    2394:	mov	r0, r6
    2398:	bl	0 <read_array>
    239c:	b	2414 <coda_mem_cursor_read_uint8_array+0x128>
    23a0:	cmp	r0, #0
    23a4:	beq	23bc <coda_mem_cursor_read_uint8_array+0xd0>
    23a8:	ldr	r0, [pc, #136]	; 2438 <coda_mem_cursor_read_uint8_array+0x14c>
    23ac:	ldr	r1, [pc, #144]	; 2444 <coda_mem_cursor_read_uint8_array+0x158>
    23b0:	mov	r2, #688	; 0x2b0
    23b4:	ldr	r3, [pc, #116]	; 2430 <coda_mem_cursor_read_uint8_array+0x144>
    23b8:	bl	0 <__assert_fail>
    23bc:	ldr	r1, [pc, #120]	; 243c <coda_mem_cursor_read_uint8_array+0x150>
    23c0:	mov	r3, #1
    23c4:	mov	r2, #0
    23c8:	str	r2, [sp]
    23cc:	mov	r2, r5
    23d0:	mov	r0, r6
    23d4:	bl	0 <read_array>
    23d8:	cmp	r0, #0
    23dc:	beq	23e8 <coda_mem_cursor_read_uint8_array+0xfc>
    23e0:	mvn	r0, #0
    23e4:	b	2414 <coda_mem_cursor_read_uint8_array+0x128>
    23e8:	cmp	r4, #0
    23ec:	beq	2410 <coda_mem_cursor_read_uint8_array+0x124>
    23f0:	mov	r2, #1
    23f4:	mov	r1, r5
    23f8:	mov	r0, r6
    23fc:	bl	3a0 <transpose_array>
    2400:	cmp	r0, #0
    2404:	beq	2410 <coda_mem_cursor_read_uint8_array+0x124>
    2408:	mvn	r0, #0
    240c:	b	2414 <coda_mem_cursor_read_uint8_array+0x128>
    2410:	mov	r0, #0
    2414:	ldr	r4, [sp, #16]
    2418:	ldr	r5, [sp, #20]
    241c:	ldr	r6, [sp, #24]
    2420:	ldr	r7, [sp, #28]
    2424:	ldr	lr, [sp, #8]
    2428:	add	sp, sp, #32
    242c:	bx	lr
    2430:	.word	0x0000061f
    2434:	.word	0x000001be
    2438:	.word	0x00000170
	...

0000244c <coda_mem_cursor_read_int16_array>:
    244c:	mov	ip, sp
    2450:	sub	sp, sp, #32
    2454:	str	ip, [sp, #4]
    2458:	str	lr, [sp, #8]
    245c:	str	r4, [sp, #16]
    2460:	str	r5, [sp, #20]
    2464:	str	r6, [sp, #24]
    2468:	str	r7, [sp, #28]
    246c:	mov	r4, r2
    2470:	mov	r5, r1
    2474:	mov	r6, r0
    2478:	ldr	r0, [r6, #4]
    247c:	lsl	r2, r0, #4
    2480:	add	r2, r6, r2
    2484:	sub	lr, r2, #4096	; 0x1000
    2488:	ldr	r7, [lr, #4088]	; 0xff8
    248c:	ldr	r1, [r7, #8]
    2490:	cmp	r1, #1
    2494:	bne	24b4 <coda_mem_cursor_read_int16_array+0x68>
    2498:	ldr	r1, [pc, #256]	; 25a0 <coda_mem_cursor_read_int16_array+0x154>
    249c:	mov	r3, #2
    24a0:	str	r4, [sp]
    24a4:	mov	r2, r5
    24a8:	mov	r0, r6
    24ac:	bl	0 <read_array>
    24b0:	b	2574 <coda_mem_cursor_read_int16_array+0x128>
    24b4:	cmp	r1, #2
    24b8:	beq	24d0 <coda_mem_cursor_read_int16_array+0x84>
    24bc:	ldr	r0, [pc, #204]	; 2590 <coda_mem_cursor_read_int16_array+0x144>
    24c0:	ldr	r1, [pc, #224]	; 25a8 <coda_mem_cursor_read_int16_array+0x15c>
    24c4:	movw	r2, #713	; 0x2c9
    24c8:	ldr	r3, [pc, #200]	; 2598 <coda_mem_cursor_read_int16_array+0x14c>
    24cc:	bl	0 <__assert_fail>
    24d0:	ldr	r0, [r7, #4]
    24d4:	ldr	ip, [r0, #40]	; 0x28
    24d8:	ldr	r0, [ip]
    24dc:	cmp	r0, #1
    24e0:	bne	2500 <coda_mem_cursor_read_int16_array+0xb4>
    24e4:	ldr	r1, [pc, #168]	; 2594 <coda_mem_cursor_read_int16_array+0x148>
    24e8:	mov	r3, #2
    24ec:	str	r4, [sp]
    24f0:	mov	r2, r5
    24f4:	mov	r0, r6
    24f8:	bl	0 <read_array>
    24fc:	b	2574 <coda_mem_cursor_read_int16_array+0x128>
    2500:	cmp	r0, #0
    2504:	beq	251c <coda_mem_cursor_read_int16_array+0xd0>
    2508:	ldr	r0, [pc, #140]	; 259c <coda_mem_cursor_read_int16_array+0x150>
    250c:	ldr	r1, [pc, #148]	; 25a8 <coda_mem_cursor_read_int16_array+0x15c>
    2510:	movw	r2, #719	; 0x2cf
    2514:	ldr	r3, [pc, #124]	; 2598 <coda_mem_cursor_read_int16_array+0x14c>
    2518:	bl	0 <__assert_fail>
    251c:	ldr	r1, [pc, #128]	; 25a4 <coda_mem_cursor_read_int16_array+0x158>
    2520:	mov	r3, #2
    2524:	mov	r2, #0
    2528:	str	r2, [sp]
    252c:	mov	r2, r5
    2530:	mov	r0, r6
    2534:	bl	0 <read_array>
    2538:	cmp	r0, #0
    253c:	beq	2548 <coda_mem_cursor_read_int16_array+0xfc>
    2540:	mvn	r0, #0
    2544:	b	2574 <coda_mem_cursor_read_int16_array+0x128>
    2548:	cmp	r4, #0
    254c:	beq	2570 <coda_mem_cursor_read_int16_array+0x124>
    2550:	mov	r2, #2
    2554:	mov	r1, r5
    2558:	mov	r0, r6
    255c:	bl	3a0 <transpose_array>
    2560:	cmp	r0, #0
    2564:	beq	2570 <coda_mem_cursor_read_int16_array+0x124>
    2568:	mvn	r0, #0
    256c:	b	2574 <coda_mem_cursor_read_int16_array+0x128>
    2570:	mov	r0, #0
    2574:	ldr	r4, [sp, #16]
    2578:	ldr	r5, [sp, #20]
    257c:	ldr	r6, [sp, #24]
    2580:	ldr	r7, [sp, #28]
    2584:	ldr	lr, [sp, #8]
    2588:	add	sp, sp, #32
    258c:	bx	lr
    2590:	.word	0x000001be
    2594:	.word	0x00000000
    2598:	.word	0x00000640
    259c:	.word	0x00000170
	...

000025ac <coda_mem_cursor_read_uint16_array>:
    25ac:	mov	ip, sp
    25b0:	sub	sp, sp, #32
    25b4:	str	ip, [sp, #4]
    25b8:	str	lr, [sp, #8]
    25bc:	str	r4, [sp, #16]
    25c0:	str	r5, [sp, #20]
    25c4:	str	r6, [sp, #24]
    25c8:	str	r7, [sp, #28]
    25cc:	mov	r4, r2
    25d0:	mov	r5, r1
    25d4:	mov	r6, r0
    25d8:	ldr	r0, [r6, #4]
    25dc:	lsl	r2, r0, #4
    25e0:	add	r2, r6, r2
    25e4:	sub	lr, r2, #4096	; 0x1000
    25e8:	ldr	r7, [lr, #4088]	; 0xff8
    25ec:	ldr	r1, [r7, #8]
    25f0:	cmp	r1, #1
    25f4:	bne	2614 <coda_mem_cursor_read_uint16_array+0x68>
    25f8:	ldr	r1, [pc, #240]	; 26f0 <coda_mem_cursor_read_uint16_array+0x144>
    25fc:	mov	r3, #2
    2600:	str	r4, [sp]
    2604:	mov	r2, r5
    2608:	mov	r0, r6
    260c:	bl	0 <read_array>
    2610:	b	26d4 <coda_mem_cursor_read_uint16_array+0x128>
    2614:	cmp	r1, #2
    2618:	beq	2630 <coda_mem_cursor_read_uint16_array+0x84>
    261c:	ldr	r0, [pc, #216]	; 26fc <coda_mem_cursor_read_uint16_array+0x150>
    2620:	ldr	r1, [pc, #224]	; 2708 <coda_mem_cursor_read_uint16_array+0x15c>
    2624:	mov	r2, #744	; 0x2e8
    2628:	ldr	r3, [pc, #196]	; 26f4 <coda_mem_cursor_read_uint16_array+0x148>
    262c:	bl	0 <__assert_fail>
    2630:	ldr	r0, [r7, #4]
    2634:	ldr	ip, [r0, #40]	; 0x28
    2638:	ldr	r0, [ip]
    263c:	cmp	r0, #1
    2640:	bne	2660 <coda_mem_cursor_read_uint16_array+0xb4>
    2644:	ldr	r1, [pc, #172]	; 26f8 <coda_mem_cursor_read_uint16_array+0x14c>
    2648:	mov	r3, #2
    264c:	str	r4, [sp]
    2650:	mov	r2, r5
    2654:	mov	r0, r6
    2658:	bl	0 <read_array>
    265c:	b	26d4 <coda_mem_cursor_read_uint16_array+0x128>
    2660:	cmp	r0, #0
    2664:	beq	267c <coda_mem_cursor_read_uint16_array+0xd0>
    2668:	ldr	r0, [pc, #144]	; 2700 <coda_mem_cursor_read_uint16_array+0x154>
    266c:	ldr	r1, [pc, #148]	; 2708 <coda_mem_cursor_read_uint16_array+0x15c>
    2670:	movw	r2, #750	; 0x2ee
    2674:	ldr	r3, [pc, #120]	; 26f4 <coda_mem_cursor_read_uint16_array+0x148>
    2678:	bl	0 <__assert_fail>
    267c:	ldr	r1, [pc, #128]	; 2704 <coda_mem_cursor_read_uint16_array+0x158>
    2680:	mov	r3, #2
    2684:	mov	r2, #0
    2688:	str	r2, [sp]
    268c:	mov	r2, r5
    2690:	mov	r0, r6
    2694:	bl	0 <read_array>
    2698:	cmp	r0, #0
    269c:	beq	26a8 <coda_mem_cursor_read_uint16_array+0xfc>
    26a0:	mvn	r0, #0
    26a4:	b	26d4 <coda_mem_cursor_read_uint16_array+0x128>
    26a8:	cmp	r4, #0
    26ac:	beq	26d0 <coda_mem_cursor_read_uint16_array+0x124>
    26b0:	mov	r2, #2
    26b4:	mov	r1, r5
    26b8:	mov	r0, r6
    26bc:	bl	3a0 <transpose_array>
    26c0:	cmp	r0, #0
    26c4:	beq	26d0 <coda_mem_cursor_read_uint16_array+0x124>
    26c8:	mvn	r0, #0
    26cc:	b	26d4 <coda_mem_cursor_read_uint16_array+0x128>
    26d0:	mov	r0, #0
    26d4:	ldr	r4, [sp, #16]
    26d8:	ldr	r5, [sp, #20]
    26dc:	ldr	r6, [sp, #24]
    26e0:	ldr	r7, [sp, #28]
    26e4:	ldr	lr, [sp, #8]
    26e8:	add	sp, sp, #32
    26ec:	bx	lr
    26f0:	.word	0x00000000
    26f4:	.word	0x00000661
    26f8:	.word	0x00000000
    26fc:	.word	0x000001be
    2700:	.word	0x00000170
	...

0000270c <coda_mem_cursor_read_int32_array>:
    270c:	mov	ip, sp
    2710:	sub	sp, sp, #32
    2714:	str	ip, [sp, #4]
    2718:	str	lr, [sp, #8]
    271c:	str	r4, [sp, #16]
    2720:	str	r5, [sp, #20]
    2724:	str	r6, [sp, #24]
    2728:	str	r7, [sp, #28]
    272c:	mov	r4, r2
    2730:	mov	r5, r1
    2734:	mov	r6, r0
    2738:	ldr	r0, [r6, #4]
    273c:	lsl	r2, r0, #4
    2740:	add	r2, r6, r2
    2744:	sub	lr, r2, #4096	; 0x1000
    2748:	ldr	r7, [lr, #4088]	; 0xff8
    274c:	ldr	r1, [r7, #8]
    2750:	cmp	r1, #1
    2754:	bne	2774 <coda_mem_cursor_read_int32_array+0x68>
    2758:	ldr	r1, [pc, #256]	; 2860 <coda_mem_cursor_read_int32_array+0x154>
    275c:	mov	r3, #4
    2760:	str	r4, [sp]
    2764:	mov	r2, r5
    2768:	mov	r0, r6
    276c:	bl	0 <read_array>
    2770:	b	2834 <coda_mem_cursor_read_int32_array+0x128>
    2774:	cmp	r1, #2
    2778:	beq	2790 <coda_mem_cursor_read_int32_array+0x84>
    277c:	ldr	r0, [pc, #212]	; 2858 <coda_mem_cursor_read_int32_array+0x14c>
    2780:	ldr	r1, [pc, #224]	; 2868 <coda_mem_cursor_read_int32_array+0x15c>
    2784:	movw	r2, #775	; 0x307
    2788:	ldr	r3, [pc, #192]	; 2850 <coda_mem_cursor_read_int32_array+0x144>
    278c:	bl	0 <__assert_fail>
    2790:	ldr	r0, [r7, #4]
    2794:	ldr	ip, [r0, #40]	; 0x28
    2798:	ldr	r0, [ip]
    279c:	cmp	r0, #1
    27a0:	bne	27c0 <coda_mem_cursor_read_int32_array+0xb4>
    27a4:	ldr	r1, [pc, #184]	; 2864 <coda_mem_cursor_read_int32_array+0x158>
    27a8:	mov	r3, #4
    27ac:	str	r4, [sp]
    27b0:	mov	r2, r5
    27b4:	mov	r0, r6
    27b8:	bl	0 <read_array>
    27bc:	b	2834 <coda_mem_cursor_read_int32_array+0x128>
    27c0:	cmp	r0, #0
    27c4:	beq	27dc <coda_mem_cursor_read_int32_array+0xd0>
    27c8:	ldr	r0, [pc, #140]	; 285c <coda_mem_cursor_read_int32_array+0x150>
    27cc:	ldr	r1, [pc, #148]	; 2868 <coda_mem_cursor_read_int32_array+0x15c>
    27d0:	movw	r2, #781	; 0x30d
    27d4:	ldr	r3, [pc, #116]	; 2850 <coda_mem_cursor_read_int32_array+0x144>
    27d8:	bl	0 <__assert_fail>
    27dc:	ldr	r1, [pc, #112]	; 2854 <coda_mem_cursor_read_int32_array+0x148>
    27e0:	mov	r3, #4
    27e4:	mov	r2, #0
    27e8:	str	r2, [sp]
    27ec:	mov	r2, r5
    27f0:	mov	r0, r6
    27f4:	bl	0 <read_array>
    27f8:	cmp	r0, #0
    27fc:	beq	2808 <coda_mem_cursor_read_int32_array+0xfc>
    2800:	mvn	r0, #0
    2804:	b	2834 <coda_mem_cursor_read_int32_array+0x128>
    2808:	cmp	r4, #0
    280c:	beq	2830 <coda_mem_cursor_read_int32_array+0x124>
    2810:	mov	r2, #4
    2814:	mov	r1, r5
    2818:	mov	r0, r6
    281c:	bl	3a0 <transpose_array>
    2820:	cmp	r0, #0
    2824:	beq	2830 <coda_mem_cursor_read_int32_array+0x124>
    2828:	mvn	r0, #0
    282c:	b	2834 <coda_mem_cursor_read_int32_array+0x128>
    2830:	mov	r0, #0
    2834:	ldr	r4, [sp, #16]
    2838:	ldr	r5, [sp, #20]
    283c:	ldr	r6, [sp, #24]
    2840:	ldr	r7, [sp, #28]
    2844:	ldr	lr, [sp, #8]
    2848:	add	sp, sp, #32
    284c:	bx	lr
    2850:	.word	0x00000683
    2854:	.word	0x00000000
    2858:	.word	0x000001be
    285c:	.word	0x00000170
	...

0000286c <coda_mem_cursor_read_uint32_array>:
    286c:	mov	ip, sp
    2870:	sub	sp, sp, #32
    2874:	str	ip, [sp, #4]
    2878:	str	lr, [sp, #8]
    287c:	str	r4, [sp, #16]
    2880:	str	r5, [sp, #20]
    2884:	str	r6, [sp, #24]
    2888:	str	r7, [sp, #28]
    288c:	mov	r4, r2
    2890:	mov	r5, r1
    2894:	mov	r6, r0
    2898:	ldr	r0, [r6, #4]
    289c:	lsl	r2, r0, #4
    28a0:	add	r2, r6, r2
    28a4:	sub	lr, r2, #4096	; 0x1000
    28a8:	ldr	r7, [lr, #4088]	; 0xff8
    28ac:	ldr	r1, [r7, #8]
    28b0:	cmp	r1, #1
    28b4:	bne	28d4 <coda_mem_cursor_read_uint32_array+0x68>
    28b8:	ldr	r1, [pc, #240]	; 29b0 <coda_mem_cursor_read_uint32_array+0x144>
    28bc:	mov	r3, #4
    28c0:	str	r4, [sp]
    28c4:	mov	r2, r5
    28c8:	mov	r0, r6
    28cc:	bl	0 <read_array>
    28d0:	b	2994 <coda_mem_cursor_read_uint32_array+0x128>
    28d4:	cmp	r1, #2
    28d8:	beq	28f0 <coda_mem_cursor_read_uint32_array+0x84>
    28dc:	ldr	r0, [pc, #212]	; 29b8 <coda_mem_cursor_read_uint32_array+0x14c>
    28e0:	ldr	r1, [pc, #224]	; 29c8 <coda_mem_cursor_read_uint32_array+0x15c>
    28e4:	movw	r2, #806	; 0x326
    28e8:	ldr	r3, [pc, #212]	; 29c4 <coda_mem_cursor_read_uint32_array+0x158>
    28ec:	bl	0 <__assert_fail>
    28f0:	ldr	r0, [r7, #4]
    28f4:	ldr	ip, [r0, #40]	; 0x28
    28f8:	ldr	r0, [ip]
    28fc:	cmp	r0, #1
    2900:	bne	2920 <coda_mem_cursor_read_uint32_array+0xb4>
    2904:	ldr	r1, [pc, #168]	; 29b4 <coda_mem_cursor_read_uint32_array+0x148>
    2908:	mov	r3, #4
    290c:	str	r4, [sp]
    2910:	mov	r2, r5
    2914:	mov	r0, r6
    2918:	bl	0 <read_array>
    291c:	b	2994 <coda_mem_cursor_read_uint32_array+0x128>
    2920:	cmp	r0, #0
    2924:	beq	293c <coda_mem_cursor_read_uint32_array+0xd0>
    2928:	ldr	r0, [pc, #140]	; 29bc <coda_mem_cursor_read_uint32_array+0x150>
    292c:	ldr	r1, [pc, #148]	; 29c8 <coda_mem_cursor_read_uint32_array+0x15c>
    2930:	mov	r2, #812	; 0x32c
    2934:	ldr	r3, [pc, #136]	; 29c4 <coda_mem_cursor_read_uint32_array+0x158>
    2938:	bl	0 <__assert_fail>
    293c:	ldr	r1, [pc, #124]	; 29c0 <coda_mem_cursor_read_uint32_array+0x154>
    2940:	mov	r3, #4
    2944:	mov	r2, #0
    2948:	str	r2, [sp]
    294c:	mov	r2, r5
    2950:	mov	r0, r6
    2954:	bl	0 <read_array>
    2958:	cmp	r0, #0
    295c:	beq	2968 <coda_mem_cursor_read_uint32_array+0xfc>
    2960:	mvn	r0, #0
    2964:	b	2994 <coda_mem_cursor_read_uint32_array+0x128>
    2968:	cmp	r4, #0
    296c:	beq	2990 <coda_mem_cursor_read_uint32_array+0x124>
    2970:	mov	r2, #4
    2974:	mov	r1, r5
    2978:	mov	r0, r6
    297c:	bl	3a0 <transpose_array>
    2980:	cmp	r0, #0
    2984:	beq	2990 <coda_mem_cursor_read_uint32_array+0x124>
    2988:	mvn	r0, #0
    298c:	b	2994 <coda_mem_cursor_read_uint32_array+0x128>
    2990:	mov	r0, #0
    2994:	ldr	r4, [sp, #16]
    2998:	ldr	r5, [sp, #20]
    299c:	ldr	r6, [sp, #24]
    29a0:	ldr	r7, [sp, #28]
    29a4:	ldr	lr, [sp, #8]
    29a8:	add	sp, sp, #32
    29ac:	bx	lr
	...
    29b8:	.word	0x000001be
    29bc:	.word	0x00000170
    29c0:	.word	0x00000000
    29c4:	.word	0x000006a4
    29c8:	.word	0x00000000

000029cc <coda_mem_cursor_read_int64_array>:
    29cc:	mov	ip, sp
    29d0:	sub	sp, sp, #32
    29d4:	str	ip, [sp, #4]
    29d8:	str	lr, [sp, #8]
    29dc:	str	r4, [sp, #16]
    29e0:	str	r5, [sp, #20]
    29e4:	str	r6, [sp, #24]
    29e8:	str	r7, [sp, #28]
    29ec:	mov	r4, r2
    29f0:	mov	r5, r1
    29f4:	mov	r6, r0
    29f8:	ldr	r0, [r6, #4]
    29fc:	lsl	r2, r0, #4
    2a00:	add	r2, r6, r2
    2a04:	sub	lr, r2, #4096	; 0x1000
    2a08:	ldr	r7, [lr, #4088]	; 0xff8
    2a0c:	ldr	r1, [r7, #8]
    2a10:	cmp	r1, #1
    2a14:	bne	2a34 <coda_mem_cursor_read_int64_array+0x68>
    2a18:	ldr	r1, [pc, #244]	; 2b14 <coda_mem_cursor_read_int64_array+0x148>
    2a1c:	mov	r3, #8
    2a20:	str	r4, [sp]
    2a24:	mov	r2, r5
    2a28:	mov	r0, r6
    2a2c:	bl	0 <read_array>
    2a30:	b	2af4 <coda_mem_cursor_read_int64_array+0x128>
    2a34:	cmp	r1, #2
    2a38:	beq	2a50 <coda_mem_cursor_read_int64_array+0x84>
    2a3c:	ldr	r0, [pc, #212]	; 2b18 <coda_mem_cursor_read_int64_array+0x14c>
    2a40:	ldr	r1, [pc, #220]	; 2b24 <coda_mem_cursor_read_int64_array+0x158>
    2a44:	movw	r2, #837	; 0x345
    2a48:	ldr	r3, [pc, #192]	; 2b10 <coda_mem_cursor_read_int64_array+0x144>
    2a4c:	bl	0 <__assert_fail>
    2a50:	ldr	r0, [r7, #4]
    2a54:	ldr	ip, [r0, #40]	; 0x28
    2a58:	ldr	r0, [ip]
    2a5c:	cmp	r0, #1
    2a60:	bne	2a80 <coda_mem_cursor_read_int64_array+0xb4>
    2a64:	ldr	r1, [pc, #180]	; 2b20 <coda_mem_cursor_read_int64_array+0x154>
    2a68:	mov	r3, #8
    2a6c:	str	r4, [sp]
    2a70:	mov	r2, r5
    2a74:	mov	r0, r6
    2a78:	bl	0 <read_array>
    2a7c:	b	2af4 <coda_mem_cursor_read_int64_array+0x128>
    2a80:	cmp	r0, #0
    2a84:	beq	2a9c <coda_mem_cursor_read_int64_array+0xd0>
    2a88:	ldr	r0, [pc, #140]	; 2b1c <coda_mem_cursor_read_int64_array+0x150>
    2a8c:	ldr	r1, [pc, #144]	; 2b24 <coda_mem_cursor_read_int64_array+0x158>
    2a90:	movw	r2, #843	; 0x34b
    2a94:	ldr	r3, [pc, #116]	; 2b10 <coda_mem_cursor_read_int64_array+0x144>
    2a98:	bl	0 <__assert_fail>
    2a9c:	ldr	r1, [pc, #132]	; 2b28 <coda_mem_cursor_read_int64_array+0x15c>
    2aa0:	mov	r3, #8
    2aa4:	mov	r2, #0
    2aa8:	str	r2, [sp]
    2aac:	mov	r2, r5
    2ab0:	mov	r0, r6
    2ab4:	bl	0 <read_array>
    2ab8:	cmp	r0, #0
    2abc:	beq	2ac8 <coda_mem_cursor_read_int64_array+0xfc>
    2ac0:	mvn	r0, #0
    2ac4:	b	2af4 <coda_mem_cursor_read_int64_array+0x128>
    2ac8:	cmp	r4, #0
    2acc:	beq	2af0 <coda_mem_cursor_read_int64_array+0x124>
    2ad0:	mov	r2, #8
    2ad4:	mov	r1, r5
    2ad8:	mov	r0, r6
    2adc:	bl	3a0 <transpose_array>
    2ae0:	cmp	r0, #0
    2ae4:	beq	2af0 <coda_mem_cursor_read_int64_array+0x124>
    2ae8:	mvn	r0, #0
    2aec:	b	2af4 <coda_mem_cursor_read_int64_array+0x128>
    2af0:	mov	r0, #0
    2af4:	ldr	r4, [sp, #16]
    2af8:	ldr	r5, [sp, #20]
    2afc:	ldr	r6, [sp, #24]
    2b00:	ldr	r7, [sp, #28]
    2b04:	ldr	lr, [sp, #8]
    2b08:	add	sp, sp, #32
    2b0c:	bx	lr
    2b10:	.word	0x000006c6
    2b14:	.word	0x00000000
    2b18:	.word	0x000001be
    2b1c:	.word	0x00000170
	...

00002b2c <coda_mem_cursor_read_uint64_array>:
    2b2c:	mov	ip, sp
    2b30:	sub	sp, sp, #32
    2b34:	str	ip, [sp, #4]
    2b38:	str	lr, [sp, #8]
    2b3c:	str	r4, [sp, #16]
    2b40:	str	r5, [sp, #20]
    2b44:	str	r6, [sp, #24]
    2b48:	str	r7, [sp, #28]
    2b4c:	mov	r4, r2
    2b50:	mov	r5, r1
    2b54:	mov	r6, r0
    2b58:	ldr	r0, [r6, #4]
    2b5c:	lsl	r2, r0, #4
    2b60:	add	r2, r6, r2
    2b64:	sub	lr, r2, #4096	; 0x1000
    2b68:	ldr	r7, [lr, #4088]	; 0xff8
    2b6c:	ldr	r1, [r7, #8]
    2b70:	cmp	r1, #1
    2b74:	bne	2b94 <coda_mem_cursor_read_uint64_array+0x68>
    2b78:	ldr	r1, [pc, #252]	; 2c7c <coda_mem_cursor_read_uint64_array+0x150>
    2b7c:	mov	r3, #8
    2b80:	str	r4, [sp]
    2b84:	mov	r2, r5
    2b88:	mov	r0, r6
    2b8c:	bl	0 <read_array>
    2b90:	b	2c54 <coda_mem_cursor_read_uint64_array+0x128>
    2b94:	cmp	r1, #2
    2b98:	beq	2bb0 <coda_mem_cursor_read_uint64_array+0x84>
    2b9c:	ldr	r0, [pc, #208]	; 2c74 <coda_mem_cursor_read_uint64_array+0x148>
    2ba0:	ldr	r1, [pc, #224]	; 2c88 <coda_mem_cursor_read_uint64_array+0x15c>
    2ba4:	mov	r2, #868	; 0x364
    2ba8:	ldr	r3, [pc, #212]	; 2c84 <coda_mem_cursor_read_uint64_array+0x158>
    2bac:	bl	0 <__assert_fail>
    2bb0:	ldr	r0, [r7, #4]
    2bb4:	ldr	ip, [r0, #40]	; 0x28
    2bb8:	ldr	r0, [ip]
    2bbc:	cmp	r0, #1
    2bc0:	bne	2be0 <coda_mem_cursor_read_uint64_array+0xb4>
    2bc4:	ldr	r1, [pc, #180]	; 2c80 <coda_mem_cursor_read_uint64_array+0x154>
    2bc8:	mov	r3, #8
    2bcc:	str	r4, [sp]
    2bd0:	mov	r2, r5
    2bd4:	mov	r0, r6
    2bd8:	bl	0 <read_array>
    2bdc:	b	2c54 <coda_mem_cursor_read_uint64_array+0x128>
    2be0:	cmp	r0, #0
    2be4:	beq	2bfc <coda_mem_cursor_read_uint64_array+0xd0>
    2be8:	ldr	r0, [pc, #136]	; 2c78 <coda_mem_cursor_read_uint64_array+0x14c>
    2bec:	ldr	r1, [pc, #148]	; 2c88 <coda_mem_cursor_read_uint64_array+0x15c>
    2bf0:	movw	r2, #874	; 0x36a
    2bf4:	ldr	r3, [pc, #136]	; 2c84 <coda_mem_cursor_read_uint64_array+0x158>
    2bf8:	bl	0 <__assert_fail>
    2bfc:	ldr	r1, [pc, #108]	; 2c70 <coda_mem_cursor_read_uint64_array+0x144>
    2c00:	mov	r3, #8
    2c04:	mov	r2, #0
    2c08:	str	r2, [sp]
    2c0c:	mov	r2, r5
    2c10:	mov	r0, r6
    2c14:	bl	0 <read_array>
    2c18:	cmp	r0, #0
    2c1c:	beq	2c28 <coda_mem_cursor_read_uint64_array+0xfc>
    2c20:	mvn	r0, #0
    2c24:	b	2c54 <coda_mem_cursor_read_uint64_array+0x128>
    2c28:	cmp	r4, #0
    2c2c:	beq	2c50 <coda_mem_cursor_read_uint64_array+0x124>
    2c30:	mov	r2, #8
    2c34:	mov	r1, r5
    2c38:	mov	r0, r6
    2c3c:	bl	3a0 <transpose_array>
    2c40:	cmp	r0, #0
    2c44:	beq	2c50 <coda_mem_cursor_read_uint64_array+0x124>
    2c48:	mvn	r0, #0
    2c4c:	b	2c54 <coda_mem_cursor_read_uint64_array+0x128>
    2c50:	mov	r0, #0
    2c54:	ldr	r4, [sp, #16]
    2c58:	ldr	r5, [sp, #20]
    2c5c:	ldr	r6, [sp, #24]
    2c60:	ldr	r7, [sp, #28]
    2c64:	ldr	lr, [sp, #8]
    2c68:	add	sp, sp, #32
    2c6c:	bx	lr
    2c70:	.word	0x00000000
    2c74:	.word	0x000001be
    2c78:	.word	0x00000170
	...
    2c84:	.word	0x000006e7
    2c88:	.word	0x00000000

00002c8c <coda_mem_cursor_read_float_array>:
    2c8c:	mov	ip, sp
    2c90:	sub	sp, sp, #32
    2c94:	str	ip, [sp, #4]
    2c98:	str	lr, [sp, #8]
    2c9c:	str	r4, [sp, #16]
    2ca0:	str	r5, [sp, #20]
    2ca4:	str	r6, [sp, #24]
    2ca8:	str	r7, [sp, #28]
    2cac:	mov	r4, r2
    2cb0:	mov	r5, r1
    2cb4:	mov	r6, r0
    2cb8:	ldr	r0, [r6, #4]
    2cbc:	lsl	r2, r0, #4
    2cc0:	add	r2, r6, r2
    2cc4:	sub	lr, r2, #4096	; 0x1000
    2cc8:	ldr	r7, [lr, #4088]	; 0xff8
    2ccc:	ldr	r1, [r7, #8]
    2cd0:	cmp	r1, #1
    2cd4:	bne	2cf4 <coda_mem_cursor_read_float_array+0x68>
    2cd8:	ldr	r1, [pc, #240]	; 2dd0 <coda_mem_cursor_read_float_array+0x144>
    2cdc:	mov	r3, #4
    2ce0:	str	r4, [sp]
    2ce4:	mov	r2, r5
    2ce8:	mov	r0, r6
    2cec:	bl	0 <read_array>
    2cf0:	b	2db4 <coda_mem_cursor_read_float_array+0x128>
    2cf4:	cmp	r1, #2
    2cf8:	beq	2d10 <coda_mem_cursor_read_float_array+0x84>
    2cfc:	ldr	r0, [pc, #212]	; 2dd8 <coda_mem_cursor_read_float_array+0x14c>
    2d00:	ldr	r1, [pc, #224]	; 2de8 <coda_mem_cursor_read_float_array+0x15c>
    2d04:	movw	r2, #899	; 0x383
    2d08:	ldr	r3, [pc, #212]	; 2de4 <coda_mem_cursor_read_float_array+0x158>
    2d0c:	bl	0 <__assert_fail>
    2d10:	ldr	r0, [r7, #4]
    2d14:	ldr	ip, [r0, #40]	; 0x28
    2d18:	ldr	r0, [ip]
    2d1c:	cmp	r0, #1
    2d20:	bne	2d40 <coda_mem_cursor_read_float_array+0xb4>
    2d24:	ldr	r1, [pc, #180]	; 2de0 <coda_mem_cursor_read_float_array+0x154>
    2d28:	mov	r3, #4
    2d2c:	str	r4, [sp]
    2d30:	mov	r2, r5
    2d34:	mov	r0, r6
    2d38:	bl	0 <read_array>
    2d3c:	b	2db4 <coda_mem_cursor_read_float_array+0x128>
    2d40:	cmp	r0, #0
    2d44:	beq	2d5c <coda_mem_cursor_read_float_array+0xd0>
    2d48:	ldr	r0, [pc, #140]	; 2ddc <coda_mem_cursor_read_float_array+0x150>
    2d4c:	ldr	r1, [pc, #148]	; 2de8 <coda_mem_cursor_read_float_array+0x15c>
    2d50:	movw	r2, #905	; 0x389
    2d54:	ldr	r3, [pc, #136]	; 2de4 <coda_mem_cursor_read_float_array+0x158>
    2d58:	bl	0 <__assert_fail>
    2d5c:	ldr	r1, [pc, #112]	; 2dd4 <coda_mem_cursor_read_float_array+0x148>
    2d60:	mov	r3, #4
    2d64:	mov	r2, #0
    2d68:	str	r2, [sp]
    2d6c:	mov	r2, r5
    2d70:	mov	r0, r6
    2d74:	bl	0 <read_array>
    2d78:	cmp	r0, #0
    2d7c:	beq	2d88 <coda_mem_cursor_read_float_array+0xfc>
    2d80:	mvn	r0, #0
    2d84:	b	2db4 <coda_mem_cursor_read_float_array+0x128>
    2d88:	cmp	r4, #0
    2d8c:	beq	2db0 <coda_mem_cursor_read_float_array+0x124>
    2d90:	mov	r2, #4
    2d94:	mov	r1, r5
    2d98:	mov	r0, r6
    2d9c:	bl	3a0 <transpose_array>
    2da0:	cmp	r0, #0
    2da4:	beq	2db0 <coda_mem_cursor_read_float_array+0x124>
    2da8:	mvn	r0, #0
    2dac:	b	2db4 <coda_mem_cursor_read_float_array+0x128>
    2db0:	mov	r0, #0
    2db4:	ldr	r4, [sp, #16]
    2db8:	ldr	r5, [sp, #20]
    2dbc:	ldr	r6, [sp, #24]
    2dc0:	ldr	r7, [sp, #28]
    2dc4:	ldr	lr, [sp, #8]
    2dc8:	add	sp, sp, #32
    2dcc:	bx	lr
	...
    2dd8:	.word	0x000001be
    2ddc:	.word	0x00000170
    2de0:	.word	0x00000000
    2de4:	.word	0x00000709
    2de8:	.word	0x00000000

00002dec <coda_mem_cursor_read_double_array>:
    2dec:	mov	ip, sp
    2df0:	sub	sp, sp, #32
    2df4:	str	ip, [sp, #4]
    2df8:	str	lr, [sp, #8]
    2dfc:	str	r4, [sp, #16]
    2e00:	str	r5, [sp, #20]
    2e04:	str	r6, [sp, #24]
    2e08:	str	r7, [sp, #28]
    2e0c:	mov	r4, r2
    2e10:	mov	r5, r1
    2e14:	mov	r6, r0
    2e18:	ldr	r0, [r6, #4]
    2e1c:	lsl	r2, r0, #4
    2e20:	add	r2, r6, r2
    2e24:	sub	lr, r2, #4096	; 0x1000
    2e28:	ldr	r7, [lr, #4088]	; 0xff8
    2e2c:	ldr	r1, [r7, #8]
    2e30:	cmp	r1, #1
    2e34:	bne	2e54 <coda_mem_cursor_read_double_array+0x68>
    2e38:	ldr	r1, [pc, #240]	; 2f30 <coda_mem_cursor_read_double_array+0x144>
    2e3c:	mov	r3, #8
    2e40:	str	r4, [sp]
    2e44:	mov	r2, r5
    2e48:	mov	r0, r6
    2e4c:	bl	0 <read_array>
    2e50:	b	2f14 <coda_mem_cursor_read_double_array+0x128>
    2e54:	cmp	r1, #2
    2e58:	beq	2e70 <coda_mem_cursor_read_double_array+0x84>
    2e5c:	ldr	r0, [pc, #212]	; 2f38 <coda_mem_cursor_read_double_array+0x14c>
    2e60:	ldr	r1, [pc, #224]	; 2f48 <coda_mem_cursor_read_double_array+0x15c>
    2e64:	movw	r2, #930	; 0x3a2
    2e68:	ldr	r3, [pc, #196]	; 2f34 <coda_mem_cursor_read_double_array+0x148>
    2e6c:	bl	0 <__assert_fail>
    2e70:	ldr	r0, [r7, #4]
    2e74:	ldr	ip, [r0, #40]	; 0x28
    2e78:	ldr	r0, [ip]
    2e7c:	cmp	r0, #1
    2e80:	bne	2ea0 <coda_mem_cursor_read_double_array+0xb4>
    2e84:	ldr	r1, [pc, #180]	; 2f40 <coda_mem_cursor_read_double_array+0x154>
    2e88:	mov	r3, #8
    2e8c:	str	r4, [sp]
    2e90:	mov	r2, r5
    2e94:	mov	r0, r6
    2e98:	bl	0 <read_array>
    2e9c:	b	2f14 <coda_mem_cursor_read_double_array+0x128>
    2ea0:	cmp	r0, #0
    2ea4:	beq	2ebc <coda_mem_cursor_read_double_array+0xd0>
    2ea8:	ldr	r0, [pc, #140]	; 2f3c <coda_mem_cursor_read_double_array+0x150>
    2eac:	ldr	r1, [pc, #148]	; 2f48 <coda_mem_cursor_read_double_array+0x15c>
    2eb0:	mov	r2, #936	; 0x3a8
    2eb4:	ldr	r3, [pc, #120]	; 2f34 <coda_mem_cursor_read_double_array+0x148>
    2eb8:	bl	0 <__assert_fail>
    2ebc:	ldr	r1, [pc, #128]	; 2f44 <coda_mem_cursor_read_double_array+0x158>
    2ec0:	mov	r3, #8
    2ec4:	mov	r2, #0
    2ec8:	str	r2, [sp]
    2ecc:	mov	r2, r5
    2ed0:	mov	r0, r6
    2ed4:	bl	0 <read_array>
    2ed8:	cmp	r0, #0
    2edc:	beq	2ee8 <coda_mem_cursor_read_double_array+0xfc>
    2ee0:	mvn	r0, #0
    2ee4:	b	2f14 <coda_mem_cursor_read_double_array+0x128>
    2ee8:	cmp	r4, #0
    2eec:	beq	2f10 <coda_mem_cursor_read_double_array+0x124>
    2ef0:	mov	r2, #8
    2ef4:	mov	r1, r5
    2ef8:	mov	r0, r6
    2efc:	bl	3a0 <transpose_array>
    2f00:	cmp	r0, #0
    2f04:	beq	2f10 <coda_mem_cursor_read_double_array+0x124>
    2f08:	mvn	r0, #0
    2f0c:	b	2f14 <coda_mem_cursor_read_double_array+0x128>
    2f10:	mov	r0, #0
    2f14:	ldr	r4, [sp, #16]
    2f18:	ldr	r5, [sp, #20]
    2f1c:	ldr	r6, [sp, #24]
    2f20:	ldr	r7, [sp, #28]
    2f24:	ldr	lr, [sp, #8]
    2f28:	add	sp, sp, #32
    2f2c:	bx	lr
    2f30:	.word	0x00000000
    2f34:	.word	0x0000072a
    2f38:	.word	0x000001be
    2f3c:	.word	0x00000170
	...

00002f4c <coda_mem_cursor_read_char_array>:
    2f4c:	mov	ip, sp
    2f50:	sub	sp, sp, #32
    2f54:	str	ip, [sp, #4]
    2f58:	str	lr, [sp, #8]
    2f5c:	str	r4, [sp, #16]
    2f60:	str	r5, [sp, #20]
    2f64:	str	r6, [sp, #24]
    2f68:	str	r7, [sp, #28]
    2f6c:	mov	r4, r2
    2f70:	mov	r5, r1
    2f74:	mov	r6, r0
    2f78:	ldr	r0, [r6, #4]
    2f7c:	lsl	r2, r0, #4
    2f80:	add	r2, r6, r2
    2f84:	sub	lr, r2, #4096	; 0x1000
    2f88:	ldr	r7, [lr, #4088]	; 0xff8
    2f8c:	ldr	r1, [r7, #8]
    2f90:	cmp	r1, #1
    2f94:	bne	2fb4 <coda_mem_cursor_read_char_array+0x68>
    2f98:	ldr	r1, [pc, #256]	; 30a0 <coda_mem_cursor_read_char_array+0x154>
    2f9c:	mov	r3, #1
    2fa0:	str	r4, [sp]
    2fa4:	mov	r2, r5
    2fa8:	mov	r0, r6
    2fac:	bl	0 <read_array>
    2fb0:	b	3074 <coda_mem_cursor_read_char_array+0x128>
    2fb4:	cmp	r1, #2
    2fb8:	beq	2fd0 <coda_mem_cursor_read_char_array+0x84>
    2fbc:	ldr	r0, [pc, #212]	; 3098 <coda_mem_cursor_read_char_array+0x14c>
    2fc0:	ldr	r1, [pc, #224]	; 30a8 <coda_mem_cursor_read_char_array+0x15c>
    2fc4:	mov	r2, #960	; 0x3c0
    2fc8:	ldr	r3, [pc, #192]	; 3090 <coda_mem_cursor_read_char_array+0x144>
    2fcc:	bl	0 <__assert_fail>
    2fd0:	ldr	r0, [r7, #4]
    2fd4:	ldr	ip, [r0, #40]	; 0x28
    2fd8:	ldr	r0, [ip]
    2fdc:	cmp	r0, #1
    2fe0:	bne	3000 <coda_mem_cursor_read_char_array+0xb4>
    2fe4:	ldr	r1, [pc, #168]	; 3094 <coda_mem_cursor_read_char_array+0x148>
    2fe8:	mov	r3, #1
    2fec:	str	r4, [sp]
    2ff0:	mov	r2, r5
    2ff4:	mov	r0, r6
    2ff8:	bl	0 <read_array>
    2ffc:	b	3074 <coda_mem_cursor_read_char_array+0x128>
    3000:	cmp	r0, #0
    3004:	beq	301c <coda_mem_cursor_read_char_array+0xd0>
    3008:	ldr	r0, [pc, #140]	; 309c <coda_mem_cursor_read_char_array+0x150>
    300c:	ldr	r1, [pc, #148]	; 30a8 <coda_mem_cursor_read_char_array+0x15c>
    3010:	movw	r2, #966	; 0x3c6
    3014:	ldr	r3, [pc, #116]	; 3090 <coda_mem_cursor_read_char_array+0x144>
    3018:	bl	0 <__assert_fail>
    301c:	ldr	r1, [pc, #128]	; 30a4 <coda_mem_cursor_read_char_array+0x158>
    3020:	mov	r3, #1
    3024:	mov	r2, #0
    3028:	str	r2, [sp]
    302c:	mov	r2, r5
    3030:	mov	r0, r6
    3034:	bl	0 <read_array>
    3038:	cmp	r0, #0
    303c:	beq	3048 <coda_mem_cursor_read_char_array+0xfc>
    3040:	mvn	r0, #0
    3044:	b	3074 <coda_mem_cursor_read_char_array+0x128>
    3048:	cmp	r4, #0
    304c:	beq	3070 <coda_mem_cursor_read_char_array+0x124>
    3050:	mov	r2, #1
    3054:	mov	r1, r5
    3058:	mov	r0, r6
    305c:	bl	3a0 <transpose_array>
    3060:	cmp	r0, #0
    3064:	beq	3070 <coda_mem_cursor_read_char_array+0x124>
    3068:	mvn	r0, #0
    306c:	b	3074 <coda_mem_cursor_read_char_array+0x128>
    3070:	mov	r0, #0
    3074:	ldr	r4, [sp, #16]
    3078:	ldr	r5, [sp, #20]
    307c:	ldr	r6, [sp, #24]
    3080:	ldr	r7, [sp, #28]
    3084:	ldr	lr, [sp, #8]
    3088:	add	sp, sp, #32
    308c:	bx	lr
    3090:	.word	0x0000074c
    3094:	.word	0x00000000
    3098:	.word	0x000001be
    309c:	.word	0x00000170
	...

000030ac <coda_mem_cursor_read_int8_partial_array>:
    30ac:	mov	ip, sp
    30b0:	sub	sp, sp, #40	; 0x28
    30b4:	str	ip, [sp, #8]
    30b8:	str	lr, [sp, #12]
    30bc:	str	r4, [sp, #16]
    30c0:	str	r5, [sp, #20]
    30c4:	str	r6, [sp, #24]
    30c8:	str	r7, [sp, #28]
    30cc:	str	r8, [sp, #32]
    30d0:	mov	r7, r3
    30d4:	mov	r4, r2
    30d8:	mov	r5, r1
    30dc:	mov	r6, r0
    30e0:	ldr	ip, [r6, #4]
    30e4:	lsl	r1, ip, #4
    30e8:	add	ip, r6, r1
    30ec:	sub	lr, ip, #4096	; 0x1000
    30f0:	ldr	r8, [lr, #4088]	; 0xff8
    30f4:	ldr	r1, [r8, #8]
    30f8:	cmp	r1, #1
    30fc:	bne	3124 <coda_mem_cursor_read_int8_partial_array+0x78>
    3100:	ldr	r1, [pc, #220]	; 31e4 <coda_mem_cursor_read_int8_partial_array+0x138>
    3104:	mov	r2, #1
    3108:	str	r2, [sp, #4]
    310c:	str	r7, [sp]
    3110:	mov	r3, r4
    3114:	mov	r2, r5
    3118:	mov	r0, r6
    311c:	bl	2b4 <read_partial_array>
    3120:	b	31b4 <coda_mem_cursor_read_int8_partial_array+0x108>
    3124:	cmp	r1, #2
    3128:	beq	3140 <coda_mem_cursor_read_int8_partial_array+0x94>
    312c:	ldr	r0, [pc, #168]	; 31dc <coda_mem_cursor_read_int8_partial_array+0x130>
    3130:	ldr	r1, [pc, #180]	; 31ec <coda_mem_cursor_read_int8_partial_array+0x140>
    3134:	movw	r2, #991	; 0x3df
    3138:	ldr	r3, [pc, #148]	; 31d4 <coda_mem_cursor_read_int8_partial_array+0x128>
    313c:	bl	0 <__assert_fail>
    3140:	ldr	ip, [r8, #4]
    3144:	ldr	r3, [ip, #40]	; 0x28
    3148:	ldr	r0, [r3]
    314c:	cmp	r0, #1
    3150:	bne	3178 <coda_mem_cursor_read_int8_partial_array+0xcc>
    3154:	ldr	r1, [pc, #140]	; 31e8 <coda_mem_cursor_read_int8_partial_array+0x13c>
    3158:	mov	r0, #1
    315c:	str	r0, [sp, #4]
    3160:	str	r7, [sp]
    3164:	mov	r3, r4
    3168:	mov	r2, r5
    316c:	mov	r0, r6
    3170:	bl	2b4 <read_partial_array>
    3174:	b	31b4 <coda_mem_cursor_read_int8_partial_array+0x108>
    3178:	cmp	r0, #0
    317c:	beq	3194 <coda_mem_cursor_read_int8_partial_array+0xe8>
    3180:	ldr	r0, [pc, #88]	; 31e0 <coda_mem_cursor_read_int8_partial_array+0x134>
    3184:	ldr	r1, [pc, #96]	; 31ec <coda_mem_cursor_read_int8_partial_array+0x140>
    3188:	movw	r2, #997	; 0x3e5
    318c:	ldr	r3, [pc, #64]	; 31d4 <coda_mem_cursor_read_int8_partial_array+0x128>
    3190:	bl	0 <__assert_fail>
    3194:	ldr	r1, [pc, #60]	; 31d8 <coda_mem_cursor_read_int8_partial_array+0x12c>
    3198:	mov	r2, #1
    319c:	str	r2, [sp, #4]
    31a0:	str	r7, [sp]
    31a4:	mov	r3, r4
    31a8:	mov	r2, r5
    31ac:	mov	r0, r6
    31b0:	bl	2b4 <read_partial_array>
    31b4:	ldr	r4, [sp, #16]
    31b8:	ldr	r5, [sp, #20]
    31bc:	ldr	r6, [sp, #24]
    31c0:	ldr	r7, [sp, #28]
    31c4:	ldr	r8, [sp, #32]
    31c8:	ldr	lr, [sp, #12]
    31cc:	add	sp, sp, #40	; 0x28
    31d0:	bx	lr
    31d4:	.word	0x0000076c
    31d8:	.word	0x00000000
    31dc:	.word	0x000001be
    31e0:	.word	0x00000170
	...

000031f0 <coda_mem_cursor_read_uint8_partial_array>:
    31f0:	mov	ip, sp
    31f4:	sub	sp, sp, #40	; 0x28
    31f8:	str	ip, [sp, #8]
    31fc:	str	lr, [sp, #12]
    3200:	str	r4, [sp, #16]
    3204:	str	r5, [sp, #20]
    3208:	str	r6, [sp, #24]
    320c:	str	r7, [sp, #28]
    3210:	str	r8, [sp, #32]
    3214:	mov	r7, r3
    3218:	mov	r4, r2
    321c:	mov	r5, r1
    3220:	mov	r6, r0
    3224:	ldr	ip, [r6, #4]
    3228:	lsl	r1, ip, #4
    322c:	add	ip, r6, r1
    3230:	sub	lr, ip, #4096	; 0x1000
    3234:	ldr	r8, [lr, #4088]	; 0xff8
    3238:	ldr	r1, [r8, #8]
    323c:	cmp	r1, #1
    3240:	bne	3268 <coda_mem_cursor_read_uint8_partial_array+0x78>
    3244:	ldr	r1, [pc, #220]	; 3328 <coda_mem_cursor_read_uint8_partial_array+0x138>
    3248:	mov	r2, #1
    324c:	str	r2, [sp, #4]
    3250:	str	r7, [sp]
    3254:	mov	r3, r4
    3258:	mov	r2, r5
    325c:	mov	r0, r6
    3260:	bl	2b4 <read_partial_array>
    3264:	b	32f8 <coda_mem_cursor_read_uint8_partial_array+0x108>
    3268:	cmp	r1, #2
    326c:	beq	3284 <coda_mem_cursor_read_uint8_partial_array+0x94>
    3270:	ldr	r0, [pc, #160]	; 3318 <coda_mem_cursor_read_uint8_partial_array+0x128>
    3274:	ldr	r1, [pc, #176]	; 332c <coda_mem_cursor_read_uint8_partial_array+0x13c>
    3278:	movw	r2, #1011	; 0x3f3
    327c:	ldr	r3, [pc, #160]	; 3324 <coda_mem_cursor_read_uint8_partial_array+0x134>
    3280:	bl	0 <__assert_fail>
    3284:	ldr	ip, [r8, #4]
    3288:	ldr	r3, [ip, #40]	; 0x28
    328c:	ldr	r0, [r3]
    3290:	cmp	r0, #1
    3294:	bne	32bc <coda_mem_cursor_read_uint8_partial_array+0xcc>
    3298:	ldr	r1, [pc, #144]	; 3330 <coda_mem_cursor_read_uint8_partial_array+0x140>
    329c:	mov	r0, #1
    32a0:	str	r0, [sp, #4]
    32a4:	str	r7, [sp]
    32a8:	mov	r3, r4
    32ac:	mov	r2, r5
    32b0:	mov	r0, r6
    32b4:	bl	2b4 <read_partial_array>
    32b8:	b	32f8 <coda_mem_cursor_read_uint8_partial_array+0x108>
    32bc:	cmp	r0, #0
    32c0:	beq	32d8 <coda_mem_cursor_read_uint8_partial_array+0xe8>
    32c4:	ldr	r0, [pc, #80]	; 331c <coda_mem_cursor_read_uint8_partial_array+0x12c>
    32c8:	ldr	r1, [pc, #92]	; 332c <coda_mem_cursor_read_uint8_partial_array+0x13c>
    32cc:	movw	r2, #1017	; 0x3f9
    32d0:	ldr	r3, [pc, #76]	; 3324 <coda_mem_cursor_read_uint8_partial_array+0x134>
    32d4:	bl	0 <__assert_fail>
    32d8:	ldr	r1, [pc, #64]	; 3320 <coda_mem_cursor_read_uint8_partial_array+0x130>
    32dc:	mov	r2, #1
    32e0:	str	r2, [sp, #4]
    32e4:	str	r7, [sp]
    32e8:	mov	r3, r4
    32ec:	mov	r2, r5
    32f0:	mov	r0, r6
    32f4:	bl	2b4 <read_partial_array>
    32f8:	ldr	r4, [sp, #16]
    32fc:	ldr	r5, [sp, #20]
    3300:	ldr	r6, [sp, #24]
    3304:	ldr	r7, [sp, #28]
    3308:	ldr	r8, [sp, #32]
    330c:	ldr	lr, [sp, #12]
    3310:	add	sp, sp, #40	; 0x28
    3314:	bx	lr
    3318:	.word	0x000001be
    331c:	.word	0x00000170
    3320:	.word	0x00000000
    3324:	.word	0x00000794
	...

00003334 <coda_mem_cursor_read_int16_partial_array>:
    3334:	mov	ip, sp
    3338:	sub	sp, sp, #40	; 0x28
    333c:	str	ip, [sp, #8]
    3340:	str	lr, [sp, #12]
    3344:	str	r4, [sp, #16]
    3348:	str	r5, [sp, #20]
    334c:	str	r6, [sp, #24]
    3350:	str	r7, [sp, #28]
    3354:	str	r8, [sp, #32]
    3358:	mov	r7, r3
    335c:	mov	r4, r2
    3360:	mov	r5, r1
    3364:	mov	r6, r0
    3368:	ldr	ip, [r6, #4]
    336c:	lsl	r1, ip, #4
    3370:	add	ip, r6, r1
    3374:	sub	lr, ip, #4096	; 0x1000
    3378:	ldr	r8, [lr, #4088]	; 0xff8
    337c:	ldr	r1, [r8, #8]
    3380:	cmp	r1, #1
    3384:	bne	33ac <coda_mem_cursor_read_int16_partial_array+0x78>
    3388:	ldr	r1, [pc, #220]	; 346c <coda_mem_cursor_read_int16_partial_array+0x138>
    338c:	mov	r2, #2
    3390:	str	r2, [sp, #4]
    3394:	str	r7, [sp]
    3398:	mov	r3, r4
    339c:	mov	r2, r5
    33a0:	mov	r0, r6
    33a4:	bl	2b4 <read_partial_array>
    33a8:	b	343c <coda_mem_cursor_read_int16_partial_array+0x108>
    33ac:	cmp	r1, #2
    33b0:	beq	33c8 <coda_mem_cursor_read_int16_partial_array+0x94>
    33b4:	ldr	r0, [pc, #164]	; 3460 <coda_mem_cursor_read_int16_partial_array+0x12c>
    33b8:	ldr	r1, [pc, #180]	; 3474 <coda_mem_cursor_read_int16_partial_array+0x140>
    33bc:	movw	r2, #1031	; 0x407
    33c0:	ldr	r3, [pc, #148]	; 345c <coda_mem_cursor_read_int16_partial_array+0x128>
    33c4:	bl	0 <__assert_fail>
    33c8:	ldr	ip, [r8, #4]
    33cc:	ldr	r3, [ip, #40]	; 0x28
    33d0:	ldr	r0, [r3]
    33d4:	cmp	r0, #1
    33d8:	bne	3400 <coda_mem_cursor_read_int16_partial_array+0xcc>
    33dc:	ldr	r1, [pc, #128]	; 3464 <coda_mem_cursor_read_int16_partial_array+0x130>
    33e0:	mov	r0, #2
    33e4:	str	r0, [sp, #4]
    33e8:	str	r7, [sp]
    33ec:	mov	r3, r4
    33f0:	mov	r2, r5
    33f4:	mov	r0, r6
    33f8:	bl	2b4 <read_partial_array>
    33fc:	b	343c <coda_mem_cursor_read_int16_partial_array+0x108>
    3400:	cmp	r0, #0
    3404:	beq	341c <coda_mem_cursor_read_int16_partial_array+0xe8>
    3408:	ldr	r0, [pc, #88]	; 3468 <coda_mem_cursor_read_int16_partial_array+0x134>
    340c:	ldr	r1, [pc, #96]	; 3474 <coda_mem_cursor_read_int16_partial_array+0x140>
    3410:	movw	r2, #1037	; 0x40d
    3414:	ldr	r3, [pc, #64]	; 345c <coda_mem_cursor_read_int16_partial_array+0x128>
    3418:	bl	0 <__assert_fail>
    341c:	ldr	r1, [pc, #76]	; 3470 <coda_mem_cursor_read_int16_partial_array+0x13c>
    3420:	mov	r2, #2
    3424:	str	r2, [sp, #4]
    3428:	str	r7, [sp]
    342c:	mov	r3, r4
    3430:	mov	r2, r5
    3434:	mov	r0, r6
    3438:	bl	2b4 <read_partial_array>
    343c:	ldr	r4, [sp, #16]
    3440:	ldr	r5, [sp, #20]
    3444:	ldr	r6, [sp, #24]
    3448:	ldr	r7, [sp, #28]
    344c:	ldr	r8, [sp, #32]
    3450:	ldr	lr, [sp, #12]
    3454:	add	sp, sp, #40	; 0x28
    3458:	bx	lr
    345c:	.word	0x000007bd
    3460:	.word	0x000001be
    3464:	.word	0x00000000
    3468:	.word	0x00000170
	...

00003478 <coda_mem_cursor_read_uint16_partial_array>:
    3478:	mov	ip, sp
    347c:	sub	sp, sp, #40	; 0x28
    3480:	str	ip, [sp, #8]
    3484:	str	lr, [sp, #12]
    3488:	str	r4, [sp, #16]
    348c:	str	r5, [sp, #20]
    3490:	str	r6, [sp, #24]
    3494:	str	r7, [sp, #28]
    3498:	str	r8, [sp, #32]
    349c:	mov	r7, r3
    34a0:	mov	r4, r2
    34a4:	mov	r5, r1
    34a8:	mov	r6, r0
    34ac:	ldr	ip, [r6, #4]
    34b0:	lsl	r1, ip, #4
    34b4:	add	ip, r6, r1
    34b8:	sub	lr, ip, #4096	; 0x1000
    34bc:	ldr	r8, [lr, #4088]	; 0xff8
    34c0:	ldr	r1, [r8, #8]
    34c4:	cmp	r1, #1
    34c8:	bne	34f0 <coda_mem_cursor_read_uint16_partial_array+0x78>
    34cc:	ldr	r1, [pc, #204]	; 35a0 <coda_mem_cursor_read_uint16_partial_array+0x128>
    34d0:	mov	r2, #2
    34d4:	str	r2, [sp, #4]
    34d8:	str	r7, [sp]
    34dc:	mov	r3, r4
    34e0:	mov	r2, r5
    34e4:	mov	r0, r6
    34e8:	bl	2b4 <read_partial_array>
    34ec:	b	3580 <coda_mem_cursor_read_uint16_partial_array+0x108>
    34f0:	cmp	r1, #2
    34f4:	beq	350c <coda_mem_cursor_read_uint16_partial_array+0x94>
    34f8:	ldr	r0, [pc, #168]	; 35a8 <coda_mem_cursor_read_uint16_partial_array+0x130>
    34fc:	ldr	r1, [pc, #180]	; 35b8 <coda_mem_cursor_read_uint16_partial_array+0x140>
    3500:	movw	r2, #1051	; 0x41b
    3504:	ldr	r3, [pc, #164]	; 35b0 <coda_mem_cursor_read_uint16_partial_array+0x138>
    3508:	bl	0 <__assert_fail>
    350c:	ldr	ip, [r8, #4]
    3510:	ldr	r3, [ip, #40]	; 0x28
    3514:	ldr	r0, [r3]
    3518:	cmp	r0, #1
    351c:	bne	3544 <coda_mem_cursor_read_uint16_partial_array+0xcc>
    3520:	ldr	r1, [pc, #124]	; 35a4 <coda_mem_cursor_read_uint16_partial_array+0x12c>
    3524:	mov	r0, #2
    3528:	str	r0, [sp, #4]
    352c:	str	r7, [sp]
    3530:	mov	r3, r4
    3534:	mov	r2, r5
    3538:	mov	r0, r6
    353c:	bl	2b4 <read_partial_array>
    3540:	b	3580 <coda_mem_cursor_read_uint16_partial_array+0x108>
    3544:	cmp	r0, #0
    3548:	beq	3560 <coda_mem_cursor_read_uint16_partial_array+0xe8>
    354c:	ldr	r0, [pc, #88]	; 35ac <coda_mem_cursor_read_uint16_partial_array+0x134>
    3550:	ldr	r1, [pc, #96]	; 35b8 <coda_mem_cursor_read_uint16_partial_array+0x140>
    3554:	movw	r2, #1057	; 0x421
    3558:	ldr	r3, [pc, #80]	; 35b0 <coda_mem_cursor_read_uint16_partial_array+0x138>
    355c:	bl	0 <__assert_fail>
    3560:	ldr	r1, [pc, #76]	; 35b4 <coda_mem_cursor_read_uint16_partial_array+0x13c>
    3564:	mov	r2, #2
    3568:	str	r2, [sp, #4]
    356c:	str	r7, [sp]
    3570:	mov	r3, r4
    3574:	mov	r2, r5
    3578:	mov	r0, r6
    357c:	bl	2b4 <read_partial_array>
    3580:	ldr	r4, [sp, #16]
    3584:	ldr	r5, [sp, #20]
    3588:	ldr	r6, [sp, #24]
    358c:	ldr	r7, [sp, #28]
    3590:	ldr	r8, [sp, #32]
    3594:	ldr	lr, [sp, #12]
    3598:	add	sp, sp, #40	; 0x28
    359c:	bx	lr
	...
    35a8:	.word	0x000001be
    35ac:	.word	0x00000170
    35b0:	.word	0x000007e6
	...

000035bc <coda_mem_cursor_read_int32_partial_array>:
    35bc:	mov	ip, sp
    35c0:	sub	sp, sp, #40	; 0x28
    35c4:	str	ip, [sp, #8]
    35c8:	str	lr, [sp, #12]
    35cc:	str	r4, [sp, #16]
    35d0:	str	r5, [sp, #20]
    35d4:	str	r6, [sp, #24]
    35d8:	str	r7, [sp, #28]
    35dc:	str	r8, [sp, #32]
    35e0:	mov	r7, r3
    35e4:	mov	r4, r2
    35e8:	mov	r5, r1
    35ec:	mov	r6, r0
    35f0:	ldr	ip, [r6, #4]
    35f4:	lsl	r1, ip, #4
    35f8:	add	ip, r6, r1
    35fc:	sub	lr, ip, #4096	; 0x1000
    3600:	ldr	r8, [lr, #4088]	; 0xff8
    3604:	ldr	r1, [r8, #8]
    3608:	cmp	r1, #1
    360c:	bne	3634 <coda_mem_cursor_read_int32_partial_array+0x78>
    3610:	ldr	r1, [pc, #220]	; 36f4 <coda_mem_cursor_read_int32_partial_array+0x138>
    3614:	mov	r2, #4
    3618:	str	r2, [sp, #4]
    361c:	str	r7, [sp]
    3620:	mov	r3, r4
    3624:	mov	r2, r5
    3628:	mov	r0, r6
    362c:	bl	2b4 <read_partial_array>
    3630:	b	36c4 <coda_mem_cursor_read_int32_partial_array+0x108>
    3634:	cmp	r1, #2
    3638:	beq	3650 <coda_mem_cursor_read_int32_partial_array+0x94>
    363c:	ldr	r0, [pc, #168]	; 36ec <coda_mem_cursor_read_int32_partial_array+0x130>
    3640:	ldr	r1, [pc, #180]	; 36fc <coda_mem_cursor_read_int32_partial_array+0x140>
    3644:	movw	r2, #1071	; 0x42f
    3648:	ldr	r3, [pc, #148]	; 36e4 <coda_mem_cursor_read_int32_partial_array+0x128>
    364c:	bl	0 <__assert_fail>
    3650:	ldr	ip, [r8, #4]
    3654:	ldr	r3, [ip, #40]	; 0x28
    3658:	ldr	r0, [r3]
    365c:	cmp	r0, #1
    3660:	bne	3688 <coda_mem_cursor_read_int32_partial_array+0xcc>
    3664:	ldr	r1, [pc, #140]	; 36f8 <coda_mem_cursor_read_int32_partial_array+0x13c>
    3668:	mov	r0, #4
    366c:	str	r0, [sp, #4]
    3670:	str	r7, [sp]
    3674:	mov	r3, r4
    3678:	mov	r2, r5
    367c:	mov	r0, r6
    3680:	bl	2b4 <read_partial_array>
    3684:	b	36c4 <coda_mem_cursor_read_int32_partial_array+0x108>
    3688:	cmp	r0, #0
    368c:	beq	36a4 <coda_mem_cursor_read_int32_partial_array+0xe8>
    3690:	ldr	r0, [pc, #88]	; 36f0 <coda_mem_cursor_read_int32_partial_array+0x134>
    3694:	ldr	r1, [pc, #96]	; 36fc <coda_mem_cursor_read_int32_partial_array+0x140>
    3698:	movw	r2, #1077	; 0x435
    369c:	ldr	r3, [pc, #64]	; 36e4 <coda_mem_cursor_read_int32_partial_array+0x128>
    36a0:	bl	0 <__assert_fail>
    36a4:	ldr	r1, [pc, #60]	; 36e8 <coda_mem_cursor_read_int32_partial_array+0x12c>
    36a8:	mov	r2, #4
    36ac:	str	r2, [sp, #4]
    36b0:	str	r7, [sp]
    36b4:	mov	r3, r4
    36b8:	mov	r2, r5
    36bc:	mov	r0, r6
    36c0:	bl	2b4 <read_partial_array>
    36c4:	ldr	r4, [sp, #16]
    36c8:	ldr	r5, [sp, #20]
    36cc:	ldr	r6, [sp, #24]
    36d0:	ldr	r7, [sp, #28]
    36d4:	ldr	r8, [sp, #32]
    36d8:	ldr	lr, [sp, #12]
    36dc:	add	sp, sp, #40	; 0x28
    36e0:	bx	lr
    36e4:	.word	0x00000810
    36e8:	.word	0x00000000
    36ec:	.word	0x000001be
    36f0:	.word	0x00000170
	...

00003700 <coda_mem_cursor_read_uint32_partial_array>:
    3700:	mov	ip, sp
    3704:	sub	sp, sp, #40	; 0x28
    3708:	str	ip, [sp, #8]
    370c:	str	lr, [sp, #12]
    3710:	str	r4, [sp, #16]
    3714:	str	r5, [sp, #20]
    3718:	str	r6, [sp, #24]
    371c:	str	r7, [sp, #28]
    3720:	str	r8, [sp, #32]
    3724:	mov	r7, r3
    3728:	mov	r4, r2
    372c:	mov	r5, r1
    3730:	mov	r6, r0
    3734:	ldr	ip, [r6, #4]
    3738:	lsl	r1, ip, #4
    373c:	add	ip, r6, r1
    3740:	sub	lr, ip, #4096	; 0x1000
    3744:	ldr	r8, [lr, #4088]	; 0xff8
    3748:	ldr	r1, [r8, #8]
    374c:	cmp	r1, #1
    3750:	bne	3778 <coda_mem_cursor_read_uint32_partial_array+0x78>
    3754:	ldr	r1, [pc, #204]	; 3828 <coda_mem_cursor_read_uint32_partial_array+0x128>
    3758:	mov	r2, #4
    375c:	str	r2, [sp, #4]
    3760:	str	r7, [sp]
    3764:	mov	r3, r4
    3768:	mov	r2, r5
    376c:	mov	r0, r6
    3770:	bl	2b4 <read_partial_array>
    3774:	b	3808 <coda_mem_cursor_read_uint32_partial_array+0x108>
    3778:	cmp	r1, #2
    377c:	beq	3794 <coda_mem_cursor_read_uint32_partial_array+0x94>
    3780:	ldr	r0, [pc, #168]	; 3830 <coda_mem_cursor_read_uint32_partial_array+0x130>
    3784:	ldr	r1, [pc, #176]	; 383c <coda_mem_cursor_read_uint32_partial_array+0x13c>
    3788:	movw	r2, #1091	; 0x443
    378c:	ldr	r3, [pc, #172]	; 3840 <coda_mem_cursor_read_uint32_partial_array+0x140>
    3790:	bl	0 <__assert_fail>
    3794:	ldr	ip, [r8, #4]
    3798:	ldr	r3, [ip, #40]	; 0x28
    379c:	ldr	r0, [r3]
    37a0:	cmp	r0, #1
    37a4:	bne	37cc <coda_mem_cursor_read_uint32_partial_array+0xcc>
    37a8:	ldr	r1, [pc, #124]	; 382c <coda_mem_cursor_read_uint32_partial_array+0x12c>
    37ac:	mov	r0, #4
    37b0:	str	r0, [sp, #4]
    37b4:	str	r7, [sp]
    37b8:	mov	r3, r4
    37bc:	mov	r2, r5
    37c0:	mov	r0, r6
    37c4:	bl	2b4 <read_partial_array>
    37c8:	b	3808 <coda_mem_cursor_read_uint32_partial_array+0x108>
    37cc:	cmp	r0, #0
    37d0:	beq	37e8 <coda_mem_cursor_read_uint32_partial_array+0xe8>
    37d4:	ldr	r0, [pc, #88]	; 3834 <coda_mem_cursor_read_uint32_partial_array+0x134>
    37d8:	ldr	r1, [pc, #92]	; 383c <coda_mem_cursor_read_uint32_partial_array+0x13c>
    37dc:	movw	r2, #1097	; 0x449
    37e0:	ldr	r3, [pc, #88]	; 3840 <coda_mem_cursor_read_uint32_partial_array+0x140>
    37e4:	bl	0 <__assert_fail>
    37e8:	ldr	r1, [pc, #72]	; 3838 <coda_mem_cursor_read_uint32_partial_array+0x138>
    37ec:	mov	r2, #4
    37f0:	str	r2, [sp, #4]
    37f4:	str	r7, [sp]
    37f8:	mov	r3, r4
    37fc:	mov	r2, r5
    3800:	mov	r0, r6
    3804:	bl	2b4 <read_partial_array>
    3808:	ldr	r4, [sp, #16]
    380c:	ldr	r5, [sp, #20]
    3810:	ldr	r6, [sp, #24]
    3814:	ldr	r7, [sp, #28]
    3818:	ldr	r8, [sp, #32]
    381c:	ldr	lr, [sp, #12]
    3820:	add	sp, sp, #40	; 0x28
    3824:	bx	lr
	...
    3830:	.word	0x000001be
    3834:	.word	0x00000170
	...
    3840:	.word	0x00000839

00003844 <coda_mem_cursor_read_int64_partial_array>:
    3844:	mov	ip, sp
    3848:	sub	sp, sp, #40	; 0x28
    384c:	str	ip, [sp, #8]
    3850:	str	lr, [sp, #12]
    3854:	str	r4, [sp, #16]
    3858:	str	r5, [sp, #20]
    385c:	str	r6, [sp, #24]
    3860:	str	r7, [sp, #28]
    3864:	str	r8, [sp, #32]
    3868:	mov	r7, r3
    386c:	mov	r4, r2
    3870:	mov	r5, r1
    3874:	mov	r6, r0
    3878:	ldr	ip, [r6, #4]
    387c:	lsl	r1, ip, #4
    3880:	add	ip, r6, r1
    3884:	sub	lr, ip, #4096	; 0x1000
    3888:	ldr	r8, [lr, #4088]	; 0xff8
    388c:	ldr	r1, [r8, #8]
    3890:	cmp	r1, #1
    3894:	bne	38bc <coda_mem_cursor_read_int64_partial_array+0x78>
    3898:	ldr	r1, [pc, #208]	; 3970 <coda_mem_cursor_read_int64_partial_array+0x12c>
    389c:	mov	r2, #8
    38a0:	str	r2, [sp, #4]
    38a4:	str	r7, [sp]
    38a8:	mov	r3, r4
    38ac:	mov	r2, r5
    38b0:	mov	r0, r6
    38b4:	bl	2b4 <read_partial_array>
    38b8:	b	394c <coda_mem_cursor_read_int64_partial_array+0x108>
    38bc:	cmp	r1, #2
    38c0:	beq	38d8 <coda_mem_cursor_read_int64_partial_array+0x94>
    38c4:	ldr	r0, [pc, #168]	; 3974 <coda_mem_cursor_read_int64_partial_array+0x130>
    38c8:	ldr	r1, [pc, #176]	; 3980 <coda_mem_cursor_read_int64_partial_array+0x13c>
    38cc:	movw	r2, #1111	; 0x457
    38d0:	ldr	r3, [pc, #148]	; 396c <coda_mem_cursor_read_int64_partial_array+0x128>
    38d4:	bl	0 <__assert_fail>
    38d8:	ldr	ip, [r8, #4]
    38dc:	ldr	r3, [ip, #40]	; 0x28
    38e0:	ldr	r0, [r3]
    38e4:	cmp	r0, #1
    38e8:	bne	3910 <coda_mem_cursor_read_int64_partial_array+0xcc>
    38ec:	ldr	r1, [pc, #136]	; 397c <coda_mem_cursor_read_int64_partial_array+0x138>
    38f0:	mov	r0, #8
    38f4:	str	r0, [sp, #4]
    38f8:	str	r7, [sp]
    38fc:	mov	r3, r4
    3900:	mov	r2, r5
    3904:	mov	r0, r6
    3908:	bl	2b4 <read_partial_array>
    390c:	b	394c <coda_mem_cursor_read_int64_partial_array+0x108>
    3910:	cmp	r0, #0
    3914:	beq	392c <coda_mem_cursor_read_int64_partial_array+0xe8>
    3918:	ldr	r0, [pc, #88]	; 3978 <coda_mem_cursor_read_int64_partial_array+0x134>
    391c:	ldr	r1, [pc, #92]	; 3980 <coda_mem_cursor_read_int64_partial_array+0x13c>
    3920:	movw	r2, #1117	; 0x45d
    3924:	ldr	r3, [pc, #64]	; 396c <coda_mem_cursor_read_int64_partial_array+0x128>
    3928:	bl	0 <__assert_fail>
    392c:	ldr	r1, [pc, #80]	; 3984 <coda_mem_cursor_read_int64_partial_array+0x140>
    3930:	mov	r2, #8
    3934:	str	r2, [sp, #4]
    3938:	str	r7, [sp]
    393c:	mov	r3, r4
    3940:	mov	r2, r5
    3944:	mov	r0, r6
    3948:	bl	2b4 <read_partial_array>
    394c:	ldr	r4, [sp, #16]
    3950:	ldr	r5, [sp, #20]
    3954:	ldr	r6, [sp, #24]
    3958:	ldr	r7, [sp, #28]
    395c:	ldr	r8, [sp, #32]
    3960:	ldr	lr, [sp, #12]
    3964:	add	sp, sp, #40	; 0x28
    3968:	bx	lr
    396c:	.word	0x00000863
    3970:	.word	0x00000000
    3974:	.word	0x000001be
    3978:	.word	0x00000170
	...

00003988 <coda_mem_cursor_read_uint64_partial_array>:
    3988:	mov	ip, sp
    398c:	sub	sp, sp, #40	; 0x28
    3990:	str	ip, [sp, #8]
    3994:	str	lr, [sp, #12]
    3998:	str	r4, [sp, #16]
    399c:	str	r5, [sp, #20]
    39a0:	str	r6, [sp, #24]
    39a4:	str	r7, [sp, #28]
    39a8:	str	r8, [sp, #32]
    39ac:	mov	r7, r3
    39b0:	mov	r4, r2
    39b4:	mov	r5, r1
    39b8:	mov	r6, r0
    39bc:	ldr	ip, [r6, #4]
    39c0:	lsl	r1, ip, #4
    39c4:	add	ip, r6, r1
    39c8:	sub	lr, ip, #4096	; 0x1000
    39cc:	ldr	r8, [lr, #4088]	; 0xff8
    39d0:	ldr	r1, [r8, #8]
    39d4:	cmp	r1, #1
    39d8:	bne	3a00 <coda_mem_cursor_read_uint64_partial_array+0x78>
    39dc:	ldr	r1, [pc, #220]	; 3ac0 <coda_mem_cursor_read_uint64_partial_array+0x138>
    39e0:	mov	r2, #8
    39e4:	str	r2, [sp, #4]
    39e8:	str	r7, [sp]
    39ec:	mov	r3, r4
    39f0:	mov	r2, r5
    39f4:	mov	r0, r6
    39f8:	bl	2b4 <read_partial_array>
    39fc:	b	3a90 <coda_mem_cursor_read_uint64_partial_array+0x108>
    3a00:	cmp	r1, #2
    3a04:	beq	3a1c <coda_mem_cursor_read_uint64_partial_array+0x94>
    3a08:	ldr	r0, [pc, #164]	; 3ab4 <coda_mem_cursor_read_uint64_partial_array+0x12c>
    3a0c:	ldr	r1, [pc, #180]	; 3ac8 <coda_mem_cursor_read_uint64_partial_array+0x140>
    3a10:	movw	r2, #1131	; 0x46b
    3a14:	ldr	r3, [pc, #160]	; 3abc <coda_mem_cursor_read_uint64_partial_array+0x134>
    3a18:	bl	0 <__assert_fail>
    3a1c:	ldr	ip, [r8, #4]
    3a20:	ldr	r3, [ip, #40]	; 0x28
    3a24:	ldr	r0, [r3]
    3a28:	cmp	r0, #1
    3a2c:	bne	3a54 <coda_mem_cursor_read_uint64_partial_array+0xcc>
    3a30:	ldr	r1, [pc, #140]	; 3ac4 <coda_mem_cursor_read_uint64_partial_array+0x13c>
    3a34:	mov	r0, #8
    3a38:	str	r0, [sp, #4]
    3a3c:	str	r7, [sp]
    3a40:	mov	r3, r4
    3a44:	mov	r2, r5
    3a48:	mov	r0, r6
    3a4c:	bl	2b4 <read_partial_array>
    3a50:	b	3a90 <coda_mem_cursor_read_uint64_partial_array+0x108>
    3a54:	cmp	r0, #0
    3a58:	beq	3a70 <coda_mem_cursor_read_uint64_partial_array+0xe8>
    3a5c:	ldr	r0, [pc, #84]	; 3ab8 <coda_mem_cursor_read_uint64_partial_array+0x130>
    3a60:	ldr	r1, [pc, #96]	; 3ac8 <coda_mem_cursor_read_uint64_partial_array+0x140>
    3a64:	movw	r2, #1137	; 0x471
    3a68:	ldr	r3, [pc, #76]	; 3abc <coda_mem_cursor_read_uint64_partial_array+0x134>
    3a6c:	bl	0 <__assert_fail>
    3a70:	ldr	r1, [pc, #56]	; 3ab0 <coda_mem_cursor_read_uint64_partial_array+0x128>
    3a74:	mov	r2, #8
    3a78:	str	r2, [sp, #4]
    3a7c:	str	r7, [sp]
    3a80:	mov	r3, r4
    3a84:	mov	r2, r5
    3a88:	mov	r0, r6
    3a8c:	bl	2b4 <read_partial_array>
    3a90:	ldr	r4, [sp, #16]
    3a94:	ldr	r5, [sp, #20]
    3a98:	ldr	r6, [sp, #24]
    3a9c:	ldr	r7, [sp, #28]
    3aa0:	ldr	r8, [sp, #32]
    3aa4:	ldr	lr, [sp, #12]
    3aa8:	add	sp, sp, #40	; 0x28
    3aac:	bx	lr
    3ab0:	.word	0x00000000
    3ab4:	.word	0x000001be
    3ab8:	.word	0x00000170
    3abc:	.word	0x0000088c
	...

00003acc <coda_mem_cursor_read_float_partial_array>:
    3acc:	mov	ip, sp
    3ad0:	sub	sp, sp, #40	; 0x28
    3ad4:	str	ip, [sp, #8]
    3ad8:	str	lr, [sp, #12]
    3adc:	str	r4, [sp, #16]
    3ae0:	str	r5, [sp, #20]
    3ae4:	str	r6, [sp, #24]
    3ae8:	str	r7, [sp, #28]
    3aec:	str	r8, [sp, #32]
    3af0:	mov	r7, r3
    3af4:	mov	r4, r2
    3af8:	mov	r5, r1
    3afc:	mov	r6, r0
    3b00:	ldr	ip, [r6, #4]
    3b04:	lsl	r1, ip, #4
    3b08:	add	ip, r6, r1
    3b0c:	sub	lr, ip, #4096	; 0x1000
    3b10:	ldr	r8, [lr, #4088]	; 0xff8
    3b14:	ldr	r1, [r8, #8]
    3b18:	cmp	r1, #1
    3b1c:	bne	3b44 <coda_mem_cursor_read_float_partial_array+0x78>
    3b20:	ldr	r1, [pc, #204]	; 3bf4 <coda_mem_cursor_read_float_partial_array+0x128>
    3b24:	mov	r2, #4
    3b28:	str	r2, [sp, #4]
    3b2c:	str	r7, [sp]
    3b30:	mov	r3, r4
    3b34:	mov	r2, r5
    3b38:	mov	r0, r6
    3b3c:	bl	2b4 <read_partial_array>
    3b40:	b	3bd4 <coda_mem_cursor_read_float_partial_array+0x108>
    3b44:	cmp	r1, #2
    3b48:	beq	3b60 <coda_mem_cursor_read_float_partial_array+0x94>
    3b4c:	ldr	r0, [pc, #168]	; 3bfc <coda_mem_cursor_read_float_partial_array+0x130>
    3b50:	ldr	r1, [pc, #180]	; 3c0c <coda_mem_cursor_read_float_partial_array+0x140>
    3b54:	movw	r2, #1151	; 0x47f
    3b58:	ldr	r3, [pc, #168]	; 3c08 <coda_mem_cursor_read_float_partial_array+0x13c>
    3b5c:	bl	0 <__assert_fail>
    3b60:	ldr	ip, [r8, #4]
    3b64:	ldr	r3, [ip, #40]	; 0x28
    3b68:	ldr	r0, [r3]
    3b6c:	cmp	r0, #1
    3b70:	bne	3b98 <coda_mem_cursor_read_float_partial_array+0xcc>
    3b74:	ldr	r1, [pc, #136]	; 3c04 <coda_mem_cursor_read_float_partial_array+0x138>
    3b78:	mov	r0, #4
    3b7c:	str	r0, [sp, #4]
    3b80:	str	r7, [sp]
    3b84:	mov	r3, r4
    3b88:	mov	r2, r5
    3b8c:	mov	r0, r6
    3b90:	bl	2b4 <read_partial_array>
    3b94:	b	3bd4 <coda_mem_cursor_read_float_partial_array+0x108>
    3b98:	cmp	r0, #0
    3b9c:	beq	3bb4 <coda_mem_cursor_read_float_partial_array+0xe8>
    3ba0:	ldr	r0, [pc, #88]	; 3c00 <coda_mem_cursor_read_float_partial_array+0x134>
    3ba4:	ldr	r1, [pc, #96]	; 3c0c <coda_mem_cursor_read_float_partial_array+0x140>
    3ba8:	movw	r2, #1157	; 0x485
    3bac:	ldr	r3, [pc, #84]	; 3c08 <coda_mem_cursor_read_float_partial_array+0x13c>
    3bb0:	bl	0 <__assert_fail>
    3bb4:	ldr	r1, [pc, #60]	; 3bf8 <coda_mem_cursor_read_float_partial_array+0x12c>
    3bb8:	mov	r2, #4
    3bbc:	str	r2, [sp, #4]
    3bc0:	str	r7, [sp]
    3bc4:	mov	r3, r4
    3bc8:	mov	r2, r5
    3bcc:	mov	r0, r6
    3bd0:	bl	2b4 <read_partial_array>
    3bd4:	ldr	r4, [sp, #16]
    3bd8:	ldr	r5, [sp, #20]
    3bdc:	ldr	r6, [sp, #24]
    3be0:	ldr	r7, [sp, #28]
    3be4:	ldr	r8, [sp, #32]
    3be8:	ldr	lr, [sp, #12]
    3bec:	add	sp, sp, #40	; 0x28
    3bf0:	bx	lr
	...
    3bfc:	.word	0x000001be
    3c00:	.word	0x00000170
    3c04:	.word	0x00000000
    3c08:	.word	0x000008b6
    3c0c:	.word	0x00000000

00003c10 <coda_mem_cursor_read_double_partial_array>:
    3c10:	mov	ip, sp
    3c14:	sub	sp, sp, #40	; 0x28
    3c18:	str	ip, [sp, #8]
    3c1c:	str	lr, [sp, #12]
    3c20:	str	r4, [sp, #16]
    3c24:	str	r5, [sp, #20]
    3c28:	str	r6, [sp, #24]
    3c2c:	str	r7, [sp, #28]
    3c30:	str	r8, [sp, #32]
    3c34:	mov	r7, r3
    3c38:	mov	r4, r2
    3c3c:	mov	r5, r1
    3c40:	mov	r6, r0
    3c44:	ldr	ip, [r6, #4]
    3c48:	lsl	r1, ip, #4
    3c4c:	add	ip, r6, r1
    3c50:	sub	lr, ip, #4096	; 0x1000
    3c54:	ldr	r8, [lr, #4088]	; 0xff8
    3c58:	ldr	r1, [r8, #8]
    3c5c:	cmp	r1, #1
    3c60:	bne	3c88 <coda_mem_cursor_read_double_partial_array+0x78>
    3c64:	ldr	r1, [pc, #204]	; 3d38 <coda_mem_cursor_read_double_partial_array+0x128>
    3c68:	mov	r2, #8
    3c6c:	str	r2, [sp, #4]
    3c70:	str	r7, [sp]
    3c74:	mov	r3, r4
    3c78:	mov	r2, r5
    3c7c:	mov	r0, r6
    3c80:	bl	2b4 <read_partial_array>
    3c84:	b	3d18 <coda_mem_cursor_read_double_partial_array+0x108>
    3c88:	cmp	r1, #2
    3c8c:	beq	3ca4 <coda_mem_cursor_read_double_partial_array+0x94>
    3c90:	ldr	r0, [pc, #164]	; 3d3c <coda_mem_cursor_read_double_partial_array+0x12c>
    3c94:	ldr	r1, [pc, #180]	; 3d50 <coda_mem_cursor_read_double_partial_array+0x140>
    3c98:	movw	r2, #1171	; 0x493
    3c9c:	ldr	r3, [pc, #168]	; 3d4c <coda_mem_cursor_read_double_partial_array+0x13c>
    3ca0:	bl	0 <__assert_fail>
    3ca4:	ldr	ip, [r8, #4]
    3ca8:	ldr	r3, [ip, #40]	; 0x28
    3cac:	ldr	r0, [r3]
    3cb0:	cmp	r0, #1
    3cb4:	bne	3cdc <coda_mem_cursor_read_double_partial_array+0xcc>
    3cb8:	ldr	r1, [pc, #132]	; 3d44 <coda_mem_cursor_read_double_partial_array+0x134>
    3cbc:	mov	r0, #8
    3cc0:	str	r0, [sp, #4]
    3cc4:	str	r7, [sp]
    3cc8:	mov	r3, r4
    3ccc:	mov	r2, r5
    3cd0:	mov	r0, r6
    3cd4:	bl	2b4 <read_partial_array>
    3cd8:	b	3d18 <coda_mem_cursor_read_double_partial_array+0x108>
    3cdc:	cmp	r0, #0
    3ce0:	beq	3cf8 <coda_mem_cursor_read_double_partial_array+0xe8>
    3ce4:	ldr	r0, [pc, #84]	; 3d40 <coda_mem_cursor_read_double_partial_array+0x130>
    3ce8:	ldr	r1, [pc, #96]	; 3d50 <coda_mem_cursor_read_double_partial_array+0x140>
    3cec:	movw	r2, #1177	; 0x499
    3cf0:	ldr	r3, [pc, #84]	; 3d4c <coda_mem_cursor_read_double_partial_array+0x13c>
    3cf4:	bl	0 <__assert_fail>
    3cf8:	ldr	r1, [pc, #72]	; 3d48 <coda_mem_cursor_read_double_partial_array+0x138>
    3cfc:	mov	r2, #8
    3d00:	str	r2, [sp, #4]
    3d04:	str	r7, [sp]
    3d08:	mov	r3, r4
    3d0c:	mov	r2, r5
    3d10:	mov	r0, r6
    3d14:	bl	2b4 <read_partial_array>
    3d18:	ldr	r4, [sp, #16]
    3d1c:	ldr	r5, [sp, #20]
    3d20:	ldr	r6, [sp, #24]
    3d24:	ldr	r7, [sp, #28]
    3d28:	ldr	r8, [sp, #32]
    3d2c:	ldr	lr, [sp, #12]
    3d30:	add	sp, sp, #40	; 0x28
    3d34:	bx	lr
    3d38:	.word	0x00000000
    3d3c:	.word	0x000001be
    3d40:	.word	0x00000170
	...
    3d4c:	.word	0x000008df
    3d50:	.word	0x00000000

00003d54 <coda_mem_cursor_read_char_partial_array>:
    3d54:	mov	ip, sp
    3d58:	sub	sp, sp, #40	; 0x28
    3d5c:	str	ip, [sp, #8]
    3d60:	str	lr, [sp, #12]
    3d64:	str	r4, [sp, #16]
    3d68:	str	r5, [sp, #20]
    3d6c:	str	r6, [sp, #24]
    3d70:	str	r7, [sp, #28]
    3d74:	str	r8, [sp, #32]
    3d78:	mov	r7, r3
    3d7c:	mov	r4, r2
    3d80:	mov	r5, r1
    3d84:	mov	r6, r0
    3d88:	ldr	ip, [r6, #4]
    3d8c:	lsl	r1, ip, #4
    3d90:	add	ip, r6, r1
    3d94:	sub	lr, ip, #4096	; 0x1000
    3d98:	ldr	r8, [lr, #4088]	; 0xff8
    3d9c:	ldr	r1, [r8, #8]
    3da0:	cmp	r1, #1
    3da4:	bne	3dcc <coda_mem_cursor_read_char_partial_array+0x78>
    3da8:	ldr	r1, [pc, #220]	; 3e8c <coda_mem_cursor_read_char_partial_array+0x138>
    3dac:	mov	r2, #1
    3db0:	str	r2, [sp, #4]
    3db4:	str	r7, [sp]
    3db8:	mov	r3, r4
    3dbc:	mov	r2, r5
    3dc0:	mov	r0, r6
    3dc4:	bl	2b4 <read_partial_array>
    3dc8:	b	3e5c <coda_mem_cursor_read_char_partial_array+0x108>
    3dcc:	cmp	r1, #2
    3dd0:	beq	3de8 <coda_mem_cursor_read_char_partial_array+0x94>
    3dd4:	ldr	r0, [pc, #164]	; 3e80 <coda_mem_cursor_read_char_partial_array+0x12c>
    3dd8:	ldr	r1, [pc, #180]	; 3e94 <coda_mem_cursor_read_char_partial_array+0x140>
    3ddc:	movw	r2, #1191	; 0x4a7
    3de0:	ldr	r3, [pc, #156]	; 3e84 <coda_mem_cursor_read_char_partial_array+0x130>
    3de4:	bl	0 <__assert_fail>
    3de8:	ldr	ip, [r8, #4]
    3dec:	ldr	r3, [ip, #40]	; 0x28
    3df0:	ldr	r0, [r3]
    3df4:	cmp	r0, #1
    3df8:	bne	3e20 <coda_mem_cursor_read_char_partial_array+0xcc>
    3dfc:	ldr	r1, [pc, #120]	; 3e7c <coda_mem_cursor_read_char_partial_array+0x128>
    3e00:	mov	r0, #1
    3e04:	str	r0, [sp, #4]
    3e08:	str	r7, [sp]
    3e0c:	mov	r3, r4
    3e10:	mov	r2, r5
    3e14:	mov	r0, r6
    3e18:	bl	2b4 <read_partial_array>
    3e1c:	b	3e5c <coda_mem_cursor_read_char_partial_array+0x108>
    3e20:	cmp	r0, #0
    3e24:	beq	3e3c <coda_mem_cursor_read_char_partial_array+0xe8>
    3e28:	ldr	r0, [pc, #88]	; 3e88 <coda_mem_cursor_read_char_partial_array+0x134>
    3e2c:	ldr	r1, [pc, #96]	; 3e94 <coda_mem_cursor_read_char_partial_array+0x140>
    3e30:	movw	r2, #1197	; 0x4ad
    3e34:	ldr	r3, [pc, #72]	; 3e84 <coda_mem_cursor_read_char_partial_array+0x130>
    3e38:	bl	0 <__assert_fail>
    3e3c:	ldr	r1, [pc, #76]	; 3e90 <coda_mem_cursor_read_char_partial_array+0x13c>
    3e40:	mov	r2, #1
    3e44:	str	r2, [sp, #4]
    3e48:	str	r7, [sp]
    3e4c:	mov	r3, r4
    3e50:	mov	r2, r5
    3e54:	mov	r0, r6
    3e58:	bl	2b4 <read_partial_array>
    3e5c:	ldr	r4, [sp, #16]
    3e60:	ldr	r5, [sp, #20]
    3e64:	ldr	r6, [sp, #24]
    3e68:	ldr	r7, [sp, #28]
    3e6c:	ldr	r8, [sp, #32]
    3e70:	ldr	lr, [sp, #12]
    3e74:	add	sp, sp, #40	; 0x28
    3e78:	bx	lr
    3e7c:	.word	0x00000000
    3e80:	.word	0x000001be
    3e84:	.word	0x00000909
    3e88:	.word	0x00000170
	...
