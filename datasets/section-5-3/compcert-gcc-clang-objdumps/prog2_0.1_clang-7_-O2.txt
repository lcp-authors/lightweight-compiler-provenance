
../compcert-repos/prog2/0.1:     file format elf32-littlearm


Disassembly of section .init:

000105f8 <.init>:
   105f8:	push	{r3, lr}
   105fc:	bl	10690 <_start@@Base+0x3c>
   10600:	pop	{r3, pc}

Disassembly of section .plt:

00010604 <printf@plt-0x14>:
   10604:	push	{lr}		; (str lr, [sp, #-4]!)
   10608:	ldr	lr, [pc, #4]	; 10614 <printf@plt-0x4>
   1060c:	add	lr, pc, lr
   10610:	ldr	pc, [lr, #8]!
   10614:	andeq	r0, r1, ip, ror #19

00010618 <printf@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2540]!	; 0x9ec

00010624 <__libc_start_main@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2532]!	; 0x9e4

00010630 <__gmon_start__@plt>:
   10630:	add	ip, pc, #0, 12
   10634:	add	ip, ip, #16, 20	; 0x10000
   10638:	ldr	pc, [ip, #2524]!	; 0x9dc

0001063c <__isoc99_scanf@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2516]!	; 0x9d4

00010648 <abort@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00010654 <_start@@Base>:
   10654:	mov	fp, #0
   10658:	mov	lr, #0
   1065c:	pop	{r1}		; (ldr r1, [sp], #4)
   10660:	mov	r2, sp
   10664:	push	{r2}		; (str r2, [sp, #-4]!)
   10668:	push	{r0}		; (str r0, [sp, #-4]!)
   1066c:	ldr	ip, [pc, #16]	; 10684 <_start@@Base+0x30>
   10670:	push	{ip}		; (str ip, [sp, #-4]!)
   10674:	ldr	r0, [pc, #12]	; 10688 <_start@@Base+0x34>
   10678:	ldr	r3, [pc, #12]	; 1068c <_start@@Base+0x38>
   1067c:	bl	10624 <__libc_start_main@plt>
   10680:	bl	10648 <abort@plt>
   10684:	andeq	r0, r1, r4, lsl #17
   10688:	andeq	r0, r1, r4, asr #14
   1068c:	andeq	r0, r1, r4, lsr #16
   10690:	ldr	r3, [pc, #20]	; 106ac <_start@@Base+0x58>
   10694:	ldr	r2, [pc, #20]	; 106b0 <_start@@Base+0x5c>
   10698:	add	r3, pc, r3
   1069c:	ldr	r2, [r3, r2]
   106a0:	cmp	r2, #0
   106a4:	bxeq	lr
   106a8:	b	10630 <__gmon_start__@plt>
   106ac:	andeq	r0, r1, r0, ror #18
   106b0:	andeq	r0, r0, r0, lsr #32
   106b4:	ldr	r0, [pc, #24]	; 106d4 <_start@@Base+0x80>
   106b8:	ldr	r3, [pc, #24]	; 106d8 <_start@@Base+0x84>
   106bc:	cmp	r3, r0
   106c0:	bxeq	lr
   106c4:	ldr	r3, [pc, #16]	; 106dc <_start@@Base+0x88>
   106c8:	cmp	r3, #0
   106cc:	bxeq	lr
   106d0:	bx	r3
   106d4:	andeq	r1, r2, ip, lsr #32
   106d8:	andeq	r1, r2, ip, lsr #32
   106dc:	andeq	r0, r0, r0
   106e0:	ldr	r0, [pc, #36]	; 1070c <_start@@Base+0xb8>
   106e4:	ldr	r1, [pc, #36]	; 10710 <_start@@Base+0xbc>
   106e8:	sub	r1, r1, r0
   106ec:	asr	r1, r1, #2
   106f0:	add	r1, r1, r1, lsr #31
   106f4:	asrs	r1, r1, #1
   106f8:	bxeq	lr
   106fc:	ldr	r3, [pc, #16]	; 10714 <_start@@Base+0xc0>
   10700:	cmp	r3, #0
   10704:	bxeq	lr
   10708:	bx	r3
   1070c:	andeq	r1, r2, ip, lsr #32
   10710:	andeq	r1, r2, ip, lsr #32
   10714:	andeq	r0, r0, r0
   10718:	push	{r4, lr}
   1071c:	ldr	r4, [pc, #24]	; 1073c <_start@@Base+0xe8>
   10720:	ldrb	r3, [r4]
   10724:	cmp	r3, #0
   10728:	popne	{r4, pc}
   1072c:	bl	106b4 <_start@@Base+0x60>
   10730:	mov	r3, #1
   10734:	strb	r3, [r4]
   10738:	pop	{r4, pc}
   1073c:	andeq	r1, r2, ip, lsr #32
   10740:	b	106e0 <_start@@Base+0x8c>

00010744 <main@@Base>:
   10744:	push	{r4, sl, fp, lr}
   10748:	add	fp, sp, #8
   1074c:	sub	sp, sp, #24
   10750:	movw	r0, #2196	; 0x894
   10754:	movt	r0, #1
   10758:	bl	10618 <printf@plt>
   1075c:	movw	r4, #2216	; 0x8a8
   10760:	add	r1, sp, #8
   10764:	movt	r4, #1
   10768:	mov	r0, r4
   1076c:	bl	1063c <__isoc99_scanf@plt>
   10770:	movw	r0, #2219	; 0x8ab
   10774:	movt	r0, #1
   10778:	bl	10618 <printf@plt>
   1077c:	sub	r1, fp, #12
   10780:	mov	r0, r4
   10784:	bl	1063c <__isoc99_scanf@plt>
   10788:	add	r1, sp, #16
   1078c:	mov	r0, r4
   10790:	bl	1063c <__isoc99_scanf@plt>
   10794:	movw	r0, #2238	; 0x8be
   10798:	movt	r0, #1
   1079c:	bl	10618 <printf@plt>
   107a0:	add	r1, sp, #12
   107a4:	mov	r0, r4
   107a8:	bl	1063c <__isoc99_scanf@plt>
   107ac:	vldr	s0, [sp, #16]
   107b0:	mov	r0, #0
   107b4:	str	r0, [fp, #-12]
   107b8:	vcmpe.f32	s0, #0.0
   107bc:	vmrs	APSR_nzcv, fpscr
   107c0:	blt	10814 <main@@Base+0xd0>
   107c4:	vldr	s0, [pc, #84]	; 10820 <main@@Base+0xdc>
   107c8:	movw	r4, #2258	; 0x8d2
   107cc:	movt	r4, #1
   107d0:	vldr	s2, [sp, #8]
   107d4:	vcvt.f64.f32	d17, s0
   107d8:	mov	r0, r4
   107dc:	vmov	r2, r3, d17
   107e0:	vmul.f32	s2, s0, s2
   107e4:	vmul.f32	s2, s0, s2
   107e8:	vcvt.f64.f32	d16, s2
   107ec:	vstr	d16, [sp]
   107f0:	bl	10618 <printf@plt>
   107f4:	vldr	s0, [fp, #-12]
   107f8:	vldr	s2, [sp, #12]
   107fc:	vadd.f32	s0, s2, s0
   10800:	vldr	s2, [sp, #16]
   10804:	vstr	s0, [fp, #-12]
   10808:	vcmpe.f32	s0, s2
   1080c:	vmrs	APSR_nzcv, fpscr
   10810:	bls	107d0 <main@@Base+0x8c>
   10814:	mov	r0, #0
   10818:	sub	sp, fp, #8
   1081c:	pop	{r4, sl, fp, pc}
   10820:	andeq	r0, r0, r0

00010824 <__libc_csu_init@@Base>:
   10824:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10828:	mov	r7, r0
   1082c:	ldr	r6, [pc, #72]	; 1087c <__libc_csu_init@@Base+0x58>
   10830:	ldr	r5, [pc, #72]	; 10880 <__libc_csu_init@@Base+0x5c>
   10834:	add	r6, pc, r6
   10838:	add	r5, pc, r5
   1083c:	sub	r6, r6, r5
   10840:	mov	r8, r1
   10844:	mov	r9, r2
   10848:	bl	105f8 <printf@plt-0x20>
   1084c:	asrs	r6, r6, #2
   10850:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10854:	mov	r4, #0
   10858:	add	r4, r4, #1
   1085c:	ldr	r3, [r5], #4
   10860:	mov	r2, r9
   10864:	mov	r1, r8
   10868:	mov	r0, r7
   1086c:	blx	r3
   10870:	cmp	r6, r4
   10874:	bne	10858 <__libc_csu_init@@Base+0x34>
   10878:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1087c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10880:	andeq	r0, r1, r8, asr #13

00010884 <__libc_csu_fini@@Base>:
   10884:	bx	lr

Disassembly of section .fini:

00010888 <.fini>:
   10888:	push	{r3, lr}
   1088c:	pop	{r3, pc}
