
../repos/stcorp-coda-3a25f25/CMakeFiles/codaeval.dir/tools/codaeval/codaeval.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_help>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	ldr	r0, [pc, #348]	; 174 <print_help+0x174>
  14:	bl	0 <printf>
  18:	ldr	r0, [pc, #328]	; 168 <print_help+0x168>
  1c:	bl	0 <printf>
  20:	ldr	r0, [pc, #388]	; 1ac <print_help+0x1ac>
  24:	bl	0 <printf>
  28:	ldr	r0, [pc, #388]	; 1b4 <print_help+0x1b4>
  2c:	bl	0 <printf>
  30:	ldr	r0, [pc, #288]	; 158 <print_help+0x158>
  34:	bl	0 <printf>
  38:	ldr	r0, [pc, #284]	; 15c <print_help+0x15c>
  3c:	bl	0 <printf>
  40:	ldr	r0, [pc, #372]	; 1bc <print_help+0x1bc>
  44:	bl	0 <printf>
  48:	ldr	r0, [pc, #352]	; 1b0 <print_help+0x1b0>
  4c:	bl	0 <printf>
  50:	ldr	r0, [pc, #308]	; 18c <print_help+0x18c>
  54:	bl	0 <printf>
  58:	ldr	r0, [pc, #272]	; 170 <print_help+0x170>
  5c:	bl	0 <printf>
  60:	ldr	r0, [pc, #248]	; 160 <print_help+0x160>
  64:	bl	0 <printf>
  68:	ldr	r0, [pc, #220]	; 14c <print_help+0x14c>
  6c:	bl	0 <printf>
  70:	ldr	r0, [pc, #268]	; 184 <print_help+0x184>
  74:	bl	0 <printf>
  78:	ldr	r0, [pc, #264]	; 188 <print_help+0x188>
  7c:	bl	0 <printf>
  80:	ldr	r0, [pc, #272]	; 198 <print_help+0x198>
  84:	bl	0 <printf>
  88:	ldr	r0, [pc, #304]	; 1c0 <print_help+0x1c0>
  8c:	bl	0 <printf>
  90:	ldr	r0, [pc, #260]	; 19c <print_help+0x19c>
  94:	bl	0 <printf>
  98:	ldr	r0, [pc, #180]	; 154 <print_help+0x154>
  9c:	bl	0 <printf>
  a0:	ldr	r0, [pc, #272]	; 1b8 <print_help+0x1b8>
  a4:	bl	0 <printf>
  a8:	ldr	r0, [pc, #276]	; 1c4 <print_help+0x1c4>
  ac:	bl	0 <printf>
  b0:	ldr	r0, [pc, #248]	; 1b0 <print_help+0x1b0>
  b4:	bl	0 <printf>
  b8:	ldr	r0, [pc, #268]	; 1cc <print_help+0x1cc>
  bc:	bl	0 <printf>
  c0:	ldr	r0, [pc, #184]	; 180 <print_help+0x180>
  c4:	bl	0 <printf>
  c8:	ldr	r0, [pc, #224]	; 1b0 <print_help+0x1b0>
  cc:	bl	0 <printf>
  d0:	ldr	r0, [pc, #160]	; 178 <print_help+0x178>
  d4:	bl	0 <printf>
  d8:	ldr	r0, [pc, #232]	; 1c8 <print_help+0x1c8>
  dc:	bl	0 <printf>
  e0:	ldr	r0, [pc, #200]	; 1b0 <print_help+0x1b0>
  e4:	bl	0 <printf>
  e8:	ldr	r0, [pc, #116]	; 164 <print_help+0x164>
  ec:	bl	0 <printf>
  f0:	ldr	r0, [pc, #168]	; 1a0 <print_help+0x1a0>
  f4:	bl	0 <printf>
  f8:	ldr	r0, [pc, #176]	; 1b0 <print_help+0x1b0>
  fc:	bl	0 <printf>
 100:	ldr	r0, [pc, #156]	; 1a4 <print_help+0x1a4>
 104:	bl	0 <printf>
 108:	ldr	r0, [pc, #152]	; 1a8 <print_help+0x1a8>
 10c:	bl	0 <printf>
 110:	ldr	r0, [pc, #124]	; 194 <print_help+0x194>
 114:	bl	0 <printf>
 118:	ldr	r0, [pc, #76]	; 16c <print_help+0x16c>
 11c:	bl	0 <printf>
 120:	ldr	r0, [pc, #84]	; 17c <print_help+0x17c>
 124:	bl	0 <printf>
 128:	ldr	r0, [pc, #32]	; 150 <print_help+0x150>
 12c:	bl	0 <printf>
 130:	ldr	r0, [pc, #88]	; 190 <print_help+0x190>
 134:	bl	0 <printf>
 138:	ldr	r0, [pc, #112]	; 1b0 <print_help+0x1b0>
 13c:	bl	0 <printf>
 140:	ldr	lr, [sp, #4]
 144:	add	sp, sp, #8
 148:	bx	lr
 14c:	.word	0x00000656
 150:	.word	0x00000937
 154:	.word	0x000008a1
 158:	.word	0x000002b0
 15c:	.word	0x0000060a
 160:	.word	0x000001e8
 164:	.word	0x00000a43
 168:	.word	0x00000497
 16c:	.word	0x000003b0
 170:	.word	0x000000c5
 174:	.word	0x00000137
 178:	.word	0x000000e4
 17c:	.word	0x000009f6
 180:	.word	0x00000511
 184:	.word	0x00000799
 188:	.word	0x00000318
 18c:	.word	0x000002fb
 190:	.word	0x000005c9
 194:	.word	0x0000004c
 198:	.word	0x00000433
 19c:	.word	0x0000081c
 1a0:	.word	0x00000868
 1a4:	.word	0x00000a5f
 1a8:	.word	0x0000044c
 1ac:	.word	0x00000977
 1b0:	.word	0x000005c7
 1b4:	.word	0x00000382
 1b8:	.word	0x000006c7
 1bc:	.word	0x00000094
 1c0:	.word	0x00000144
 1c4:	.word	0x000009c6
 1c8:	.word	0x00000918
 1cc:	.word	0x000008c7

000001d0 <eval_expression>:
 1d0:	mov	ip, sp
 1d4:	sub	sp, sp, #80	; 0x50
 1d8:	str	ip, [sp]
 1dc:	str	lr, [sp, #4]
 1e0:	str	r4, [sp, #8]
 1e4:	str	r5, [sp, #12]
 1e8:	str	r6, [sp, #16]
 1ec:	mov	r1, r0
 1f0:	ldr	r3, [pc, #956]	; 5b4 <eval_expression+0x3e4>
 1f4:	ldr	r0, [r3]
 1f8:	cmp	r0, #3
 1fc:	bcs	32c <eval_expression+0x15c>
 200:	cmp	r0, #0
 204:	beq	2cc <eval_expression+0xfc>
 208:	cmp	r0, #1
 20c:	bne	274 <eval_expression+0xa4>
 210:	ldr	r2, [pc, #824]	; 550 <eval_expression+0x380>
 214:	ldr	r0, [r2]
 218:	add	r2, sp, #40	; 0x28
 21c:	bl	0 <coda_expression_eval_integer>
 220:	cmp	r0, #0
 224:	beq	254 <eval_expression+0x84>
 228:	bl	0 <coda_get_errno>
 22c:	ldr	r0, [r0]
 230:	bl	0 <coda_errno_to_string>
 234:	mvn	r2, #400	; 0x190
 238:	ldr	r1, [pc, #848]	; 590 <eval_expression+0x3c0>
 23c:	mov	ip, r0
 240:	mov	r0, r2
 244:	mov	r2, ip
 248:	bl	0 <coda_set_error>
 24c:	mvn	r0, #0
 250:	b	538 <eval_expression+0x368>
 254:	ldr	r0, [sp, #40]	; 0x28
 258:	ldr	r1, [sp, #44]	; 0x2c
 25c:	add	r2, sp, #56	; 0x38
 260:	bl	0 <coda_str64>
 264:	ldr	r0, [pc, #796]	; 588 <eval_expression+0x3b8>
 268:	add	r1, sp, #56	; 0x38
 26c:	bl	0 <printf>
 270:	b	534 <eval_expression+0x364>
 274:	ldr	r2, [pc, #724]	; 550 <eval_expression+0x380>
 278:	ldr	r0, [r2]
 27c:	add	r2, sp, #48	; 0x30
 280:	bl	0 <coda_expression_eval_float>
 284:	cmp	r0, #0
 288:	beq	2b8 <eval_expression+0xe8>
 28c:	bl	0 <coda_get_errno>
 290:	ldr	r0, [r0]
 294:	bl	0 <coda_errno_to_string>
 298:	mvn	r2, #400	; 0x190
 29c:	ldr	r1, [pc, #724]	; 578 <eval_expression+0x3a8>
 2a0:	mov	r3, r0
 2a4:	mov	r0, r2
 2a8:	mov	r2, r3
 2ac:	bl	0 <coda_set_error>
 2b0:	mvn	r0, #0
 2b4:	b	538 <eval_expression+0x368>
 2b8:	ldr	r0, [pc, #700]	; 57c <eval_expression+0x3ac>
 2bc:	vldr	d2, [sp, #48]	; 0x30
 2c0:	vmov	r2, r3, d2
 2c4:	bl	0 <printf>
 2c8:	b	534 <eval_expression+0x364>
 2cc:	ldr	r0, [pc, #636]	; 550 <eval_expression+0x380>
 2d0:	ldr	r0, [r0]
 2d4:	add	r2, sp, #32
 2d8:	bl	0 <coda_expression_eval_bool>
 2dc:	cmp	r0, #0
 2e0:	beq	308 <eval_expression+0x138>
 2e4:	bl	0 <coda_get_errno>
 2e8:	ldr	r0, [r0]
 2ec:	bl	0 <coda_errno_to_string>
 2f0:	mov	r2, r0
 2f4:	mvn	r0, #400	; 0x190
 2f8:	ldr	r1, [pc, #660]	; 594 <eval_expression+0x3c4>
 2fc:	bl	0 <coda_set_error>
 300:	mvn	r0, #0
 304:	b	538 <eval_expression+0x368>
 308:	ldr	r2, [pc, #596]	; 564 <eval_expression+0x394>
 30c:	ldr	r3, [pc, #604]	; 570 <eval_expression+0x3a0>
 310:	ldr	r1, [sp, #32]
 314:	cmp	r1, #0
 318:	movne	r1, r2
 31c:	moveq	r1, r3
 320:	ldr	r0, [pc, #608]	; 588 <eval_expression+0x3b8>
 324:	bl	0 <printf>
 328:	b	534 <eval_expression+0x364>
 32c:	cmp	r0, #3
 330:	beq	364 <eval_expression+0x194>
 334:	cmp	r0, #4
 338:	beq	344 <eval_expression+0x174>
 33c:	cmp	r0, #5
 340:	bne	534 <eval_expression+0x364>
 344:	ldr	r0, [pc, #588]	; 598 <eval_expression+0x3c8>
 348:	ldr	r1, [pc, #516]	; 554 <eval_expression+0x384>
 34c:	mov	r2, #230	; 0xe6
 350:	ldr	r3, [pc, #588]	; 5a4 <eval_expression+0x3d4>
 354:	bl	0 <__assert_fail>
 358:	mov	r0, #1
 35c:	bl	0 <exit>
 360:	b	534 <eval_expression+0x364>
 364:	mov	ip, #0
 368:	str	ip, [sp, #24]
 36c:	ldr	r0, [pc, #476]	; 550 <eval_expression+0x380>
 370:	ldr	r0, [r0]
 374:	add	r2, sp, #24
 378:	add	r3, sp, #28
 37c:	bl	0 <coda_expression_eval_string>
 380:	cmp	r0, #0
 384:	beq	3b4 <eval_expression+0x1e4>
 388:	bl	0 <coda_get_errno>
 38c:	ldr	r0, [r0]
 390:	bl	0 <coda_errno_to_string>
 394:	mvn	r2, #400	; 0x190
 398:	ldr	r1, [pc, #484]	; 584 <eval_expression+0x3b4>
 39c:	mov	ip, r0
 3a0:	mov	r0, r2
 3a4:	mov	r2, ip
 3a8:	bl	0 <coda_set_error>
 3ac:	mvn	r0, #0
 3b0:	b	538 <eval_expression+0x368>
 3b4:	ldr	r4, [sp, #24]
 3b8:	ldr	r5, [sp, #28]
 3bc:	mov	r6, #0
 3c0:	mov	r3, #1
 3c4:	cmp	r4, #0
 3c8:	moveq	r0, #1
 3cc:	movne	r0, #0
 3d0:	cmp	r5, #0
 3d4:	moveq	r0, r3
 3d8:	movne	r0, r0
 3dc:	cmp	r0, #0
 3e0:	bne	51c <eval_expression+0x34c>
 3e4:	cmp	r5, #0
 3e8:	bge	3f8 <eval_expression+0x228>
 3ec:	mov	r0, r4
 3f0:	bl	0 <strlen>
 3f4:	mov	r5, r0
 3f8:	cmp	r6, r5
 3fc:	bge	51c <eval_expression+0x34c>
 400:	ldrb	r3, [r4, r6]
 404:	cmp	r3, #12
 408:	bcs	470 <eval_expression+0x2a0>
 40c:	cmp	r3, #9
 410:	bcs	43c <eval_expression+0x26c>
 414:	cmp	r3, #7
 418:	beq	430 <eval_expression+0x260>
 41c:	cmp	r3, #8
 420:	bne	4c4 <eval_expression+0x2f4>
 424:	ldr	r0, [pc, #316]	; 568 <eval_expression+0x398>
 428:	bl	0 <printf>
 42c:	b	514 <eval_expression+0x344>
 430:	ldr	r0, [pc, #316]	; 574 <eval_expression+0x3a4>
 434:	bl	0 <printf>
 438:	b	514 <eval_expression+0x344>
 43c:	cmp	r3, #9
 440:	beq	464 <eval_expression+0x294>
 444:	cmp	r3, #10
 448:	bne	458 <eval_expression+0x288>
 44c:	ldr	r0, [pc, #280]	; 56c <eval_expression+0x39c>
 450:	bl	0 <printf>
 454:	b	514 <eval_expression+0x344>
 458:	ldr	r0, [pc, #328]	; 5a8 <eval_expression+0x3d8>
 45c:	bl	0 <printf>
 460:	b	514 <eval_expression+0x344>
 464:	ldr	r0, [pc, #324]	; 5b0 <eval_expression+0x3e0>
 468:	bl	0 <printf>
 46c:	b	514 <eval_expression+0x344>
 470:	cmp	r3, #27
 474:	bcs	4a0 <eval_expression+0x2d0>
 478:	cmp	r3, #12
 47c:	beq	494 <eval_expression+0x2c4>
 480:	cmp	r3, #13
 484:	bne	4c4 <eval_expression+0x2f4>
 488:	ldr	r0, [pc, #272]	; 5a0 <eval_expression+0x3d0>
 48c:	bl	0 <printf>
 490:	b	514 <eval_expression+0x344>
 494:	ldr	r0, [pc, #192]	; 55c <eval_expression+0x38c>
 498:	bl	0 <printf>
 49c:	b	514 <eval_expression+0x344>
 4a0:	cmp	r3, #27
 4a4:	beq	50c <eval_expression+0x33c>
 4a8:	cmp	r3, #34	; 0x22
 4ac:	beq	500 <eval_expression+0x330>
 4b0:	cmp	r3, #92	; 0x5c
 4b4:	bne	4c4 <eval_expression+0x2f4>
 4b8:	ldr	r0, [pc, #160]	; 560 <eval_expression+0x390>
 4bc:	bl	0 <printf>
 4c0:	b	514 <eval_expression+0x344>
 4c4:	bl	0 <__ctype_b_loc>
 4c8:	ldr	ip, [r0]
 4cc:	ldrb	r1, [r4, r6]
 4d0:	add	r2, ip, r1, lsl #1
 4d4:	ldrh	r3, [r2]
 4d8:	and	ip, r3, #16384	; 0x4000
 4dc:	cmp	ip, #0
 4e0:	bne	4f4 <eval_expression+0x324>
 4e4:	ldr	r0, [pc, #176]	; 59c <eval_expression+0x3cc>
 4e8:	and	r1, r1, #255	; 0xff
 4ec:	bl	0 <printf>
 4f0:	b	514 <eval_expression+0x344>
 4f4:	ldr	r0, [pc, #92]	; 558 <eval_expression+0x388>
 4f8:	bl	0 <printf>
 4fc:	b	514 <eval_expression+0x344>
 500:	ldr	r0, [pc, #132]	; 58c <eval_expression+0x3bc>
 504:	bl	0 <printf>
 508:	b	514 <eval_expression+0x344>
 50c:	ldr	r0, [pc, #108]	; 580 <eval_expression+0x3b0>
 510:	bl	0 <printf>
 514:	add	r6, r6, #1
 518:	b	3f8 <eval_expression+0x228>
 51c:	ldr	r0, [pc, #136]	; 5ac <eval_expression+0x3dc>
 520:	bl	0 <printf>
 524:	ldr	r0, [sp, #24]
 528:	cmp	r0, #0
 52c:	beq	534 <eval_expression+0x364>
 530:	bl	0 <free>
 534:	mov	r0, #0
 538:	ldr	r4, [sp, #8]
 53c:	ldr	r5, [sp, #12]
 540:	ldr	r6, [sp, #16]
 544:	ldr	lr, [sp, #4]
 548:	add	sp, sp, #80	; 0x50
 54c:	bx	lr
 550:	.word	0x00000000
 554:	.word	0x00000531
 558:	.word	0x0000019b
 55c:	.word	0x000003ad
 560:	.word	0x00000091
 564:	.word	0x0000013f
 568:	.word	0x000000fc
 56c:	.word	0x000008c4
 570:	.word	0x000007ef
 574:	.word	0x00000192
 578:	.word	0x000003fa
 57c:	.word	0x00000239
 580:	.word	0x00000590
 584:	.word	0x000005a0
 588:	.word	0x000008c0
 58c:	.word	0x0000050e
 590:	.word	0x000004e6
 594:	.word	0x00000353
 598:	.word	0x000007f5
 59c:	.word	0x00000195
 5a0:	.word	0x000003aa
 5a4:	.word	0x00000aaa
 5a8:	.word	0x0000089e
 5ac:	.word	0x000005c7
 5b0:	.word	0x000003a7
 5b4:	.word	0x00000000

000005b8 <callback>:
 5b8:	mov	ip, sp
 5bc:	sub	sp, sp, #544	; 0x220
 5c0:	str	ip, [sp]
 5c4:	str	lr, [sp, #4]
 5c8:	str	r4, [sp, #8]
 5cc:	str	r5, [sp, #12]
 5d0:	mov	r3, r2
 5d4:	mov	r4, r1
 5d8:	mov	r5, r0
 5dc:	cmp	r4, #0
 5e0:	beq	624 <callback+0x6c>
 5e4:	cmp	r4, #2
 5e8:	beq	60c <callback+0x54>
 5ec:	cmp	r4, #1
 5f0:	bne	63c <callback+0x84>
 5f4:	ldr	ip, [pc, #376]	; 774 <callback+0x1bc>
 5f8:	ldr	r0, [ip]
 5fc:	ldr	r1, [pc, #364]	; 770 <callback+0x1b8>
 600:	mov	r2, r5
 604:	bl	0 <fprintf>
 608:	b	63c <callback+0x84>
 60c:	ldr	r1, [pc, #352]	; 774 <callback+0x1bc>
 610:	ldr	r0, [r1]
 614:	ldr	r1, [pc, #336]	; 76c <callback+0x1b4>
 618:	mov	r2, r5
 61c:	bl	0 <fprintf>
 620:	b	63c <callback+0x84>
 624:	ldr	r2, [pc, #328]	; 774 <callback+0x1bc>
 628:	ldr	r0, [r2]
 62c:	ldr	r1, [pc, #300]	; 760 <callback+0x1a8>
 630:	mov	r2, r3
 634:	mov	r3, r5
 638:	bl	0 <fprintf>
 63c:	cmp	r4, #4
 640:	bne	748 <callback+0x190>
 644:	mov	r0, #0
 648:	str	r0, [sp, #16]
 64c:	add	r1, sp, #16
 650:	mov	r0, r5
 654:	bl	0 <coda_open>
 658:	cmp	r0, #0
 65c:	beq	668 <callback+0xb0>
 660:	mov	r0, #1
 664:	b	734 <callback+0x17c>
 668:	add	r0, sp, #24
 66c:	ldr	r1, [sp, #16]
 670:	bl	0 <coda_cursor_set_product>
 674:	cmp	r0, #0
 678:	beq	68c <callback+0xd4>
 67c:	ldr	r0, [sp, #16]
 680:	bl	0 <coda_close>
 684:	mov	r0, #1
 688:	b	734 <callback+0x17c>
 68c:	ldr	r2, [pc, #212]	; 768 <callback+0x1b0>
 690:	ldr	r0, [r2]
 694:	cmp	r0, #0
 698:	beq	6dc <callback+0x124>
 69c:	add	r1, sp, #24
 6a0:	bl	0 <coda_expression_eval_node>
 6a4:	cmp	r0, #0
 6a8:	beq	6dc <callback+0x124>
 6ac:	bl	0 <coda_get_errno>
 6b0:	ldr	r0, [r0]
 6b4:	bl	0 <coda_errno_to_string>
 6b8:	mov	r2, r0
 6bc:	ldr	r1, [pc, #176]	; 774 <callback+0x1bc>
 6c0:	ldr	r0, [r1]
 6c4:	ldr	r1, [pc, #152]	; 764 <callback+0x1ac>
 6c8:	bl	0 <fprintf>
 6cc:	ldr	r0, [sp, #16]
 6d0:	bl	0 <coda_close>
 6d4:	mov	r0, #0
 6d8:	b	734 <callback+0x17c>
 6dc:	add	r0, sp, #24
 6e0:	bl	1d0 <eval_expression>
 6e4:	cmp	r0, #0
 6e8:	beq	718 <callback+0x160>
 6ec:	bl	0 <coda_get_errno>
 6f0:	ldr	r0, [r0]
 6f4:	bl	0 <coda_errno_to_string>
 6f8:	ldr	ip, [pc, #116]	; 774 <callback+0x1bc>
 6fc:	ldr	r2, [ip]
 700:	ldr	r1, [pc, #88]	; 760 <callback+0x1a8>
 704:	mov	r3, r5
 708:	mov	ip, r0
 70c:	mov	r0, r2
 710:	mov	r2, ip
 714:	bl	0 <fprintf>
 718:	ldr	r0, [sp, #16]
 71c:	bl	0 <coda_close>
 720:	cmp	r0, #0
 724:	beq	730 <callback+0x178>
 728:	mov	r0, #1
 72c:	b	734 <callback+0x17c>
 730:	mov	r0, #0
 734:	ldr	r4, [sp, #8]
 738:	ldr	r5, [sp, #12]
 73c:	ldr	lr, [sp, #4]
 740:	add	sp, sp, #544	; 0x220
 744:	bx	lr
 748:	mov	r0, #0
 74c:	ldr	r4, [sp, #8]
 750:	ldr	r5, [sp, #12]
 754:	ldr	lr, [sp, #4]
 758:	add	sp, sp, #544	; 0x220
 75c:	bx	lr
 760:	.word	0x000000ff
 764:	.word	0x00000000
 768:	.word	0x00000004
 76c:	.word	0x00000111
 770:	.word	0x00000714
 774:	.word	0x00000000

00000778 <main>:
 778:	mov	ip, sp
 77c:	sub	sp, sp, #40	; 0x28
 780:	str	ip, [sp, #4]
 784:	str	lr, [sp, #8]
 788:	str	r4, [sp, #16]
 78c:	str	r5, [sp, #20]
 790:	str	r6, [sp, #24]
 794:	str	r7, [sp, #28]
 798:	str	r8, [sp, #32]
 79c:	mov	r7, r1
 7a0:	mov	r4, r0
 7a4:	mov	r6, #1
 7a8:	mov	r5, #0
 7ac:	cmp	r4, #1
 7b0:	beq	7dc <main+0x64>
 7b4:	ldr	r0, [r7, #4]
 7b8:	ldr	r1, [pc, #1216]	; c80 <main+0x508>
 7bc:	bl	0 <strcmp>
 7c0:	cmp	r0, #0
 7c4:	beq	7dc <main+0x64>
 7c8:	ldr	r0, [r7, #4]
 7cc:	ldr	r1, [pc, #1236]	; ca8 <main+0x530>
 7d0:	bl	0 <strcmp>
 7d4:	cmp	r0, #0
 7d8:	bne	7e8 <main+0x70>
 7dc:	bl	0 <print_help>
 7e0:	mov	r0, #0
 7e4:	bl	0 <exit>
 7e8:	ldr	r0, [r7, #4]
 7ec:	ldr	r1, [pc, #1136]	; c64 <main+0x4ec>
 7f0:	bl	0 <strcmp>
 7f4:	cmp	r0, #0
 7f8:	beq	810 <main+0x98>
 7fc:	ldr	r0, [r7, #4]
 800:	ldr	r1, [pc, #1164]	; c94 <main+0x51c>
 804:	bl	0 <strcmp>
 808:	cmp	r0, #0
 80c:	bne	838 <main+0xc0>
 810:	bl	0 <coda_get_libcoda_version>
 814:	mov	r1, r0
 818:	ldr	r0, [pc, #1128]	; c88 <main+0x510>
 81c:	bl	0 <printf>
 820:	ldr	r0, [pc, #1092]	; c6c <main+0x4f4>
 824:	bl	0 <printf>
 828:	ldr	r0, [pc, #1116]	; c8c <main+0x514>
 82c:	bl	0 <printf>
 830:	mov	r0, #0
 834:	bl	0 <exit>
 838:	mov	r8, #1
 83c:	cmp	r4, #2
 840:	ble	868 <main+0xf0>
 844:	ldr	r0, [r7, #4]
 848:	ldr	r1, [pc, #1088]	; c90 <main+0x518>
 84c:	bl	0 <strcmp>
 850:	cmp	r0, #0
 854:	bne	868 <main+0xf0>
 858:	ldr	r0, [r7, #8]
 85c:	bl	0 <coda_set_definition_path>
 860:	mov	r8, #3
 864:	b	8a8 <main+0x130>
 868:	ldr	r2, [pc, #1084]	; cac <main+0x534>
 86c:	ldr	r0, [r7]
 870:	mov	r1, #0
 874:	bl	0 <coda_set_definition_path_conditional>
 878:	cmp	r0, #0
 87c:	beq	8a8 <main+0x130>
 880:	bl	0 <coda_get_errno>
 884:	ldr	r0, [r0]
 888:	bl	0 <coda_errno_to_string>
 88c:	mov	r2, r0
 890:	ldr	r1, [pc, #1048]	; cb0 <main+0x538>
 894:	ldr	r0, [r1]
 898:	ldr	r1, [pc, #988]	; c7c <main+0x504>
 89c:	bl	0 <fprintf>
 8a0:	mov	r0, #1
 8a4:	bl	0 <exit>
 8a8:	cmp	r8, r4
 8ac:	bge	9d0 <main+0x258>
 8b0:	ldr	r0, [r7, r8, lsl #2]
 8b4:	ldr	r1, [pc, #968]	; c84 <main+0x50c>
 8b8:	bl	0 <strcmp>
 8bc:	cmp	r0, #0
 8c0:	beq	9c4 <main+0x24c>
 8c4:	ldr	r0, [r7, r8, lsl #2]
 8c8:	ldr	r1, [pc, #900]	; c54 <main+0x4dc>
 8cc:	bl	0 <strcmp>
 8d0:	cmp	r0, #0
 8d4:	beq	9c4 <main+0x24c>
 8d8:	ldr	r0, [r7, r8, lsl #2]
 8dc:	ldr	r1, [pc, #916]	; c78 <main+0x500>
 8e0:	bl	0 <strcmp>
 8e4:	cmp	r0, #0
 8e8:	beq	9bc <main+0x244>
 8ec:	ldr	r0, [r7, r8, lsl #2]
 8f0:	ldr	r1, [pc, #888]	; c70 <main+0x4f8>
 8f4:	bl	0 <strcmp>
 8f8:	cmp	r0, #0
 8fc:	beq	9bc <main+0x244>
 900:	ldr	r0, [r7, r8, lsl #2]
 904:	ldr	r1, [pc, #832]	; c4c <main+0x4d4>
 908:	bl	0 <strcmp>
 90c:	add	r1, r8, #1
 910:	cmp	r1, r4
 914:	movlt	r1, #1
 918:	movge	r1, #0
 91c:	mov	r2, #0
 920:	cmp	r0, #0
 924:	moveq	r0, r1
 928:	movne	r0, r2
 92c:	cmp	r0, #0
 930:	beq	98c <main+0x214>
 934:	lsl	r0, r8, #2
 938:	add	r1, r7, r0
 93c:	ldr	r0, [r1, #4]
 940:	ldrb	r2, [r0]
 944:	cmp	r2, #45	; 0x2d
 948:	beq	98c <main+0x214>
 94c:	ldr	r1, [pc, #788]	; c68 <main+0x4f0>
 950:	bl	0 <coda_expression_from_string>
 954:	cmp	r0, #0
 958:	beq	984 <main+0x20c>
 95c:	bl	0 <coda_get_errno>
 960:	ldr	r0, [r0]
 964:	bl	0 <coda_errno_to_string>
 968:	mov	r2, r0
 96c:	ldr	r0, [pc, #828]	; cb0 <main+0x538>
 970:	ldr	r0, [r0]
 974:	ldr	r1, [pc, #740]	; c60 <main+0x4e8>
 978:	bl	0 <fprintf>
 97c:	mov	r0, #1
 980:	bl	0 <exit>
 984:	add	r8, r8, #1
 988:	b	9c8 <main+0x250>
 98c:	ldr	r1, [r7, r8, lsl #2]
 990:	ldrb	r2, [r1]
 994:	cmp	r2, #45	; 0x2d
 998:	bne	9d0 <main+0x258>
 99c:	ldr	r3, [pc, #780]	; cb0 <main+0x538>
 9a0:	ldr	r0, [r3]
 9a4:	ldr	r1, [pc, #712]	; c74 <main+0x4fc>
 9a8:	bl	0 <fprintf>
 9ac:	bl	0 <print_help>
 9b0:	mov	r0, #1
 9b4:	bl	0 <exit>
 9b8:	b	9c8 <main+0x250>
 9bc:	mov	r6, #0
 9c0:	b	9c8 <main+0x250>
 9c4:	mov	r5, #1
 9c8:	add	r8, r8, #1
 9cc:	b	8a8 <main+0x130>
 9d0:	cmp	r8, r4
 9d4:	blt	9f4 <main+0x27c>
 9d8:	ldr	r1, [pc, #720]	; cb0 <main+0x538>
 9dc:	ldr	r0, [r1]
 9e0:	ldr	r1, [pc, #652]	; c74 <main+0x4fc>
 9e4:	bl	0 <fprintf>
 9e8:	bl	0 <print_help>
 9ec:	mov	r0, #1
 9f0:	bl	0 <exit>
 9f4:	ldr	r0, [r7, r8, lsl #2]
 9f8:	ldr	r1, [pc, #600]	; c58 <main+0x4e0>
 9fc:	bl	0 <coda_expression_from_string>
 a00:	cmp	r0, #0
 a04:	beq	a30 <main+0x2b8>
 a08:	bl	0 <coda_get_errno>
 a0c:	ldr	r0, [r0]
 a10:	bl	0 <coda_errno_to_string>
 a14:	mov	r2, r0
 a18:	ldr	r0, [pc, #656]	; cb0 <main+0x538>
 a1c:	ldr	r0, [r0]
 a20:	ldr	r1, [pc, #552]	; c50 <main+0x4d8>
 a24:	bl	0 <fprintf>
 a28:	mov	r0, #1
 a2c:	bl	0 <exit>
 a30:	add	r8, r8, #1
 a34:	ldr	r3, [pc, #540]	; c58 <main+0x4e0>
 a38:	ldr	r0, [r3]
 a3c:	ldr	r1, [pc, #604]	; ca0 <main+0x528>
 a40:	bl	0 <coda_expression_get_type>
 a44:	cmp	r0, #0
 a48:	beq	a74 <main+0x2fc>
 a4c:	bl	0 <coda_get_errno>
 a50:	ldr	r0, [r0]
 a54:	bl	0 <coda_errno_to_string>
 a58:	mov	r2, r0
 a5c:	ldr	r3, [pc, #588]	; cb0 <main+0x538>
 a60:	ldr	r0, [r3]
 a64:	ldr	r1, [pc, #528]	; c7c <main+0x504>
 a68:	bl	0 <fprintf>
 a6c:	mov	r0, #1
 a70:	bl	0 <exit>
 a74:	ldr	r0, [pc, #548]	; ca0 <main+0x528>
 a78:	ldr	r0, [r0]
 a7c:	cmp	r0, #4
 a80:	beq	a8c <main+0x314>
 a84:	cmp	r0, #5
 a88:	bne	ab4 <main+0x33c>
 a8c:	ldr	r2, [pc, #524]	; ca0 <main+0x528>
 a90:	ldr	r0, [r2]
 a94:	bl	0 <coda_expression_get_type_name>
 a98:	mov	r2, r0
 a9c:	ldr	r1, [pc, #524]	; cb0 <main+0x538>
 aa0:	ldr	r0, [r1]
 aa4:	ldr	r1, [pc, #504]	; ca4 <main+0x52c>
 aa8:	bl	0 <fprintf>
 aac:	mov	r0, #1
 ab0:	bl	0 <exit>
 ab4:	cmp	r5, #0
 ab8:	beq	ae4 <main+0x36c>
 abc:	ldr	r0, [pc, #404]	; c58 <main+0x4e0>
 ac0:	ldr	r0, [r0]
 ac4:	bl	0 <coda_expression_delete>
 ac8:	ldr	r0, [pc, #408]	; c68 <main+0x4f0>
 acc:	ldr	r0, [r0]
 ad0:	cmp	r0, #0
 ad4:	beq	adc <main+0x364>
 ad8:	bl	0 <coda_expression_delete>
 adc:	mov	r0, #0
 ae0:	b	c2c <main+0x4b4>
 ae4:	cmp	r8, r4
 ae8:	bge	b7c <main+0x404>
 aec:	bl	0 <coda_init>
 af0:	cmp	r0, #0
 af4:	beq	b20 <main+0x3a8>
 af8:	bl	0 <coda_get_errno>
 afc:	ldr	r0, [r0]
 b00:	bl	0 <coda_errno_to_string>
 b04:	mov	r2, r0
 b08:	ldr	r3, [pc, #416]	; cb0 <main+0x538>
 b0c:	ldr	r0, [r3]
 b10:	ldr	r1, [pc, #356]	; c7c <main+0x504>
 b14:	bl	0 <fprintf>
 b18:	mov	r0, #1
 b1c:	bl	0 <exit>
 b20:	mov	r0, r6
 b24:	bl	0 <coda_set_option_perform_conversions>
 b28:	mov	r0, #0
 b2c:	sub	r1, r4, r8
 b30:	add	r2, r7, r8, lsl #2
 b34:	ldr	r3, [pc, #352]	; c9c <main+0x524>
 b38:	mov	r4, #0
 b3c:	str	r4, [sp]
 b40:	bl	0 <coda_match_filefilter>
 b44:	cmp	r0, #0
 b48:	beq	b74 <main+0x3fc>
 b4c:	bl	0 <coda_get_errno>
 b50:	ldr	r0, [r0]
 b54:	bl	0 <coda_errno_to_string>
 b58:	mov	r2, r0
 b5c:	ldr	r3, [pc, #332]	; cb0 <main+0x538>
 b60:	ldr	r0, [r3]
 b64:	ldr	r1, [pc, #272]	; c7c <main+0x504>
 b68:	bl	0 <fprintf>
 b6c:	mov	r0, #1
 b70:	bl	0 <exit>
 b74:	bl	0 <coda_done>
 b78:	b	c08 <main+0x490>
 b7c:	ldr	r0, [pc, #228]	; c68 <main+0x4f0>
 b80:	ldr	r0, [r0]
 b84:	cmp	r0, #0
 b88:	beq	ba4 <main+0x42c>
 b8c:	ldr	r0, [pc, #284]	; cb0 <main+0x538>
 b90:	ldr	r0, [r0]
 b94:	ldr	r1, [pc, #252]	; c98 <main+0x520>
 b98:	bl	0 <fprintf>
 b9c:	mov	r0, #1
 ba0:	bl	0 <exit>
 ba4:	ldr	r0, [pc, #172]	; c58 <main+0x4e0>
 ba8:	ldr	r0, [r0]
 bac:	bl	0 <coda_expression_is_constant>
 bb0:	cmp	r0, #0
 bb4:	bne	bd0 <main+0x458>
 bb8:	ldr	r0, [pc, #240]	; cb0 <main+0x538>
 bbc:	ldr	r0, [r0]
 bc0:	ldr	r1, [pc, #148]	; c5c <main+0x4e4>
 bc4:	bl	0 <fprintf>
 bc8:	mov	r0, #1
 bcc:	bl	0 <exit>
 bd0:	mov	r0, #0
 bd4:	bl	1d0 <eval_expression>
 bd8:	cmp	r0, #0
 bdc:	beq	c08 <main+0x490>
 be0:	bl	0 <coda_get_errno>
 be4:	ldr	r0, [r0]
 be8:	bl	0 <coda_errno_to_string>
 bec:	mov	r2, r0
 bf0:	ldr	r3, [pc, #184]	; cb0 <main+0x538>
 bf4:	ldr	r0, [r3]
 bf8:	ldr	r1, [pc, #124]	; c7c <main+0x504>
 bfc:	bl	0 <fprintf>
 c00:	mov	r0, #1
 c04:	bl	0 <exit>
 c08:	ldr	r0, [pc, #72]	; c58 <main+0x4e0>
 c0c:	ldr	r0, [r0]
 c10:	bl	0 <coda_expression_delete>
 c14:	ldr	r0, [pc, #76]	; c68 <main+0x4f0>
 c18:	ldr	r0, [r0]
 c1c:	cmp	r0, #0
 c20:	beq	c28 <main+0x4b0>
 c24:	bl	0 <coda_expression_delete>
 c28:	mov	r0, #0
 c2c:	ldr	r4, [sp, #16]
 c30:	ldr	r5, [sp, #20]
 c34:	ldr	r6, [sp, #24]
 c38:	ldr	r7, [sp, #28]
 c3c:	ldr	r8, [sp, #32]
 c40:	ldr	lr, [sp, #8]
 c44:	add	sp, sp, #40	; 0x28
 c48:	bx	lr
 c4c:	.word	0x0000089b
 c50:	.word	0x000006a7
 c54:	.word	0x00000529
 c58:	.word	0x00000000
 c5c:	.word	0x00000240
 c60:	.word	0x000007f7
 c64:	.word	0x0000018f
 c68:	.word	0x00000004
 c6c:	.word	0x0000019e
 c70:	.word	0x0000007b
 c74:	.word	0x000001ce
 c78:	.word	0x00000049
 c7c:	.word	0x0000030d
 c80:	.word	0x000000de
 c84:	.word	0x00000a40
 c88:	.word	0x00000593
 c8c:	.word	0x000005c7
 c90:	.word	0x000000e1
 c94:	.word	0x00000429
 c98:	.word	0x00000738
	...
 ca4:	.word	0x000007c0
 ca8:	.word	0x0000037b
 cac:	.word	0x0000002f
 cb0:	.word	0x00000000
