
../repos/prog2/CMakeFiles/1.5.dir/Aula01_Ficheiros_e_Formatos_de_dados/05.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #32
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	str	r5, [sp, #12]
  18:	str	r6, [sp, #16]
  1c:	str	r7, [sp, #20]
  20:	str	r8, [sp, #24]
  24:	str	r9, [sp, #28]
  28:	mov	r8, #0
  2c:	mov	r4, #1
  30:	mov	r6, #0
  34:	mov	r7, #0
  38:	mov	r9, #0
  3c:	ldr	r0, [pc, #432]	; 1f4 <main+0x1f4>
  40:	ldr	r1, [pc, #420]	; 1ec <main+0x1ec>
  44:	bl	0 <fopen>
  48:	mov	r5, r0
  4c:	mov	r0, r5
  50:	bl	0 <fgetc>
  54:	and	r0, r0, #255	; 0xff
  58:	cmn	r0, #1
  5c:	beq	15c <main+0x15c>
  60:	add	r6, r6, #1
  64:	cmp	r0, #10
  68:	beq	154 <main+0x154>
  6c:	cmp	r0, #115	; 0x73
  70:	beq	134 <main+0x134>
  74:	cmp	r0, #112	; 0x70
  78:	beq	114 <main+0x114>
  7c:	cmp	r0, #47	; 0x2f
  80:	beq	d0 <main+0xd0>
  84:	cmp	r0, #42	; 0x2a
  88:	bne	4c <main+0x4c>
  8c:	mov	r0, r5
  90:	bl	0 <fgetc>
  94:	mov	ip, #0
  98:	cmp	r0, #47	; 0x2f
  9c:	moveq	r1, r9
  a0:	movne	r1, ip
  a4:	cmp	r1, #0
  a8:	bne	c0 <main+0xc0>
  ac:	mvn	r1, #0
  b0:	mov	r2, #1
  b4:	mov	r0, r5
  b8:	bl	0 <fseek>
  bc:	b	4c <main+0x4c>
  c0:	add	r6, r6, #1
  c4:	add	r8, r8, #1
  c8:	mov	r9, #0
  cc:	b	4c <main+0x4c>
  d0:	mov	r0, r5
  d4:	bl	0 <fgetc>
  d8:	eor	ip, r9, #1
  dc:	mov	r1, #0
  e0:	cmp	r0, #42	; 0x2a
  e4:	moveq	r1, ip
  e8:	movne	r1, r1
  ec:	cmp	r1, #0
  f0:	bne	108 <main+0x108>
  f4:	mvn	r1, #0
  f8:	mov	r2, #1
  fc:	mov	r0, r5
 100:	bl	0 <fseek>
 104:	b	4c <main+0x4c>
 108:	mov	r9, #1
 10c:	add	r6, r6, #1
 110:	b	4c <main+0x4c>
 114:	ldr	r0, [pc, #196]	; 1e0 <main+0x1e0>
 118:	mov	r1, r5
 11c:	bl	204 <IsIOFunction>
 120:	add	r2, r7, #1
 124:	cmp	r0, #0
 128:	movne	r7, r2
 12c:	moveq	r7, r7
 130:	b	4c <main+0x4c>
 134:	ldr	r0, [pc, #180]	; 1f0 <main+0x1f0>
 138:	mov	r1, r5
 13c:	bl	204 <IsIOFunction>
 140:	add	r2, r7, #1
 144:	cmp	r0, #0
 148:	movne	r7, r2
 14c:	moveq	r7, r7
 150:	b	4c <main+0x4c>
 154:	add	r4, r4, #1
 158:	b	4c <main+0x4c>
 15c:	ldr	r0, [pc, #148]	; 1f8 <main+0x1f8>
 160:	mov	r1, r4
 164:	bl	0 <printf>
 168:	ldr	r0, [pc, #120]	; 1e8 <main+0x1e8>
 16c:	vmov	s4, r6
 170:	vcvt.f32.s32	s4, s4
 174:	vmov	s12, r4
 178:	vcvt.f32.s32	s12, s12
 17c:	vdiv.f32	s8, s4, s12
 180:	vcvt.f64.f32	d2, s8
 184:	vmov	r2, r3, d2
 188:	bl	0 <printf>
 18c:	ldr	r0, [pc, #108]	; 200 <main+0x200>
 190:	mov	r1, r6
 194:	bl	0 <printf>
 198:	ldr	r0, [pc, #92]	; 1fc <main+0x1fc>
 19c:	mov	r1, r7
 1a0:	bl	0 <printf>
 1a4:	ldr	r0, [pc, #56]	; 1e4 <main+0x1e4>
 1a8:	mov	r1, r8
 1ac:	bl	0 <printf>
 1b0:	mov	r0, r5
 1b4:	bl	0 <fclose>
 1b8:	mov	r0, #0
 1bc:	ldr	r4, [sp, #8]
 1c0:	ldr	r5, [sp, #12]
 1c4:	ldr	r6, [sp, #16]
 1c8:	ldr	r7, [sp, #20]
 1cc:	ldr	r8, [sp, #24]
 1d0:	ldr	r9, [sp, #28]
 1d4:	ldr	lr, [sp, #4]
 1d8:	add	sp, sp, #32
 1dc:	bx	lr
 1e0:	.word	0x00000067
 1e4:	.word	0x00000036
 1e8:	.word	0x00000080
 1ec:	.word	0x00000000
 1f0:	.word	0x000000ab
 1f4:	.word	0x0000006e
 1f8:	.word	0x00000051
 1fc:	.word	0x00000002
 200:	.word	0x000000b1

00000204 <IsIOFunction>:
 204:	mov	ip, sp
 208:	sub	sp, sp, #32
 20c:	str	ip, [sp]
 210:	str	lr, [sp, #4]
 214:	str	r4, [sp, #8]
 218:	str	r5, [sp, #12]
 21c:	str	r6, [sp, #16]
 220:	str	r7, [sp, #20]
 224:	mov	r4, r1
 228:	mov	r5, r0
 22c:	mvn	r1, #0
 230:	mov	r2, #1
 234:	mov	r0, r4
 238:	bl	0 <fseek>
 23c:	mov	r0, r5
 240:	bl	0 <strlen>
 244:	mov	r6, r0
 248:	mov	r0, #0
 24c:	strb	r0, [sp, #24]
 250:	mov	r0, #0
 254:	strb	r0, [sp, #25]
 258:	mov	r2, #0
 25c:	strb	r2, [sp, #26]
 260:	mov	ip, #0
 264:	strb	ip, [sp, #27]
 268:	mov	r0, #0
 26c:	strb	r0, [sp, #28]
 270:	mov	r2, #0
 274:	strb	r2, [sp, #29]
 278:	mov	ip, #0
 27c:	strb	ip, [sp, #30]
 280:	mov	r7, #0
 284:	cmp	r7, r6
 288:	bge	2a4 <IsIOFunction+0xa0>
 28c:	mov	r0, r4
 290:	bl	0 <fgetc>
 294:	add	r1, sp, #24
 298:	strb	r0, [r1, r7]
 29c:	add	r7, r7, #1
 2a0:	b	284 <IsIOFunction+0x80>
 2a4:	add	r1, sp, #24
 2a8:	mov	r2, #0
 2ac:	strb	r2, [r1, r7]
 2b0:	rsb	r1, r6, #1
 2b4:	mov	r2, #1
 2b8:	mov	r0, r4
 2bc:	bl	0 <fseek>
 2c0:	add	r1, sp, #24
 2c4:	mov	r0, r5
 2c8:	bl	0 <strcmp>
 2cc:	cmp	r0, #0
 2d0:	bne	2dc <IsIOFunction+0xd8>
 2d4:	mov	r0, #1
 2d8:	b	2e0 <IsIOFunction+0xdc>
 2dc:	mov	r0, #0
 2e0:	ldr	r4, [sp, #8]
 2e4:	ldr	r5, [sp, #12]
 2e8:	ldr	r6, [sp, #16]
 2ec:	ldr	r7, [sp, #20]
 2f0:	ldr	lr, [sp, #4]
 2f4:	add	sp, sp, #32
 2f8:	bx	lr
