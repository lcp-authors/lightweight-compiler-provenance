
../compcert-repos/prog2/0.4:     file format elf32-littlearm


Disassembly of section .init:

000105bc <.init>:
   105bc:	push	{r3, lr}
   105c0:	bl	1066c <_start@@Base+0x3c>
   105c4:	pop	{r3, pc}

Disassembly of section .plt:

000105c8 <printf@plt-0x14>:
   105c8:	push	{lr}		; (str lr, [sp, #-4]!)
   105cc:	ldr	lr, [pc, #4]	; 105d8 <printf@plt-0x4>
   105d0:	add	lr, pc, lr
   105d4:	ldr	pc, [lr, #8]!
   105d8:	andeq	r0, r1, r8, lsr #20

000105dc <printf@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2600]!	; 0xa28

000105e8 <puts@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2592]!	; 0xa20

000105f4 <malloc@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2584]!	; 0xa18

00010600 <__libc_start_main@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2576]!	; 0xa10

0001060c <__gmon_start__@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2568]!	; 0xa08

00010618 <__isoc99_scanf@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2560]!	; 0xa00

00010624 <abort@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2552]!	; 0x9f8

Disassembly of section .text:

00010630 <_start@@Base>:
   10630:	mov	fp, #0
   10634:	mov	lr, #0
   10638:	pop	{r1}		; (ldr r1, [sp], #4)
   1063c:	mov	r2, sp
   10640:	push	{r2}		; (str r2, [sp, #-4]!)
   10644:	push	{r0}		; (str r0, [sp, #-4]!)
   10648:	ldr	ip, [pc, #16]	; 10660 <_start@@Base+0x30>
   1064c:	push	{ip}		; (str ip, [sp, #-4]!)
   10650:	ldr	r0, [pc, #12]	; 10664 <_start@@Base+0x34>
   10654:	ldr	r3, [pc, #12]	; 10668 <_start@@Base+0x38>
   10658:	bl	10600 <__libc_start_main@plt>
   1065c:	bl	10624 <abort@plt>
   10660:	andeq	r0, r1, r4, lsr #19
   10664:			; <UNDEFINED> instruction: 0x000107bc
   10668:	andeq	r0, r1, r4, asr #18
   1066c:	ldr	r3, [pc, #20]	; 10688 <_start@@Base+0x58>
   10670:	ldr	r2, [pc, #20]	; 1068c <_start@@Base+0x5c>
   10674:	add	r3, pc, r3
   10678:	ldr	r2, [r3, r2]
   1067c:	cmp	r2, #0
   10680:	bxeq	lr
   10684:	b	1060c <__gmon_start__@plt>
   10688:	andeq	r0, r1, r4, lsl #19
   1068c:	andeq	r0, r0, r8, lsr #32
   10690:	ldr	r0, [pc, #24]	; 106b0 <_start@@Base+0x80>
   10694:	ldr	r3, [pc, #24]	; 106b4 <_start@@Base+0x84>
   10698:	cmp	r3, r0
   1069c:	bxeq	lr
   106a0:	ldr	r3, [pc, #16]	; 106b8 <_start@@Base+0x88>
   106a4:	cmp	r3, #0
   106a8:	bxeq	lr
   106ac:	bx	r3
   106b0:	andeq	r1, r2, r4, lsr r0
   106b4:	andeq	r1, r2, r4, lsr r0
   106b8:	andeq	r0, r0, r0
   106bc:	ldr	r0, [pc, #36]	; 106e8 <_start@@Base+0xb8>
   106c0:	ldr	r1, [pc, #36]	; 106ec <_start@@Base+0xbc>
   106c4:	sub	r1, r1, r0
   106c8:	asr	r1, r1, #2
   106cc:	add	r1, r1, r1, lsr #31
   106d0:	asrs	r1, r1, #1
   106d4:	bxeq	lr
   106d8:	ldr	r3, [pc, #16]	; 106f0 <_start@@Base+0xc0>
   106dc:	cmp	r3, #0
   106e0:	bxeq	lr
   106e4:	bx	r3
   106e8:	andeq	r1, r2, r4, lsr r0
   106ec:	andeq	r1, r2, r4, lsr r0
   106f0:	andeq	r0, r0, r0
   106f4:	push	{r4, lr}
   106f8:	ldr	r4, [pc, #24]	; 10718 <_start@@Base+0xe8>
   106fc:	ldrb	r3, [r4]
   10700:	cmp	r3, #0
   10704:	popne	{r4, pc}
   10708:	bl	10690 <_start@@Base+0x60>
   1070c:	mov	r3, #1
   10710:	strb	r3, [r4]
   10714:	pop	{r4, pc}
   10718:	andeq	r1, r2, r4, lsr r0
   1071c:	b	106bc <_start@@Base+0x8c>

00010720 <ordenado@@Base>:
   10720:	push	{fp}		; (str fp, [sp, #-4]!)
   10724:	add	fp, sp, #0
   10728:	sub	sp, sp, #20
   1072c:	str	r0, [fp, #-16]
   10730:	str	r1, [fp, #-20]	; 0xffffffec
   10734:	ldr	r3, [fp, #-16]
   10738:	ldr	r3, [r3]
   1073c:	str	r3, [fp, #-12]
   10740:	mov	r3, #1
   10744:	str	r3, [fp, #-8]
   10748:	b	10798 <ordenado@@Base+0x78>
   1074c:	ldr	r3, [fp, #-8]
   10750:	lsl	r3, r3, #2
   10754:	ldr	r2, [fp, #-16]
   10758:	add	r3, r2, r3
   1075c:	ldr	r3, [r3]
   10760:	ldr	r2, [fp, #-12]
   10764:	cmp	r2, r3
   10768:	ble	10774 <ordenado@@Base+0x54>
   1076c:	mov	r3, #0
   10770:	b	107ac <ordenado@@Base+0x8c>
   10774:	ldr	r3, [fp, #-8]
   10778:	lsl	r3, r3, #2
   1077c:	ldr	r2, [fp, #-16]
   10780:	add	r3, r2, r3
   10784:	ldr	r3, [r3]
   10788:	str	r3, [fp, #-12]
   1078c:	ldr	r3, [fp, #-8]
   10790:	add	r3, r3, #1
   10794:	str	r3, [fp, #-8]
   10798:	ldr	r2, [fp, #-8]
   1079c:	ldr	r3, [fp, #-20]	; 0xffffffec
   107a0:	cmp	r2, r3
   107a4:	blt	1074c <ordenado@@Base+0x2c>
   107a8:	mov	r3, #1
   107ac:	mov	r0, r3
   107b0:	add	sp, fp, #0
   107b4:	pop	{fp}		; (ldr fp, [sp], #4)
   107b8:	bx	lr

000107bc <main@@Base>:
   107bc:	str	fp, [sp, #-8]!
   107c0:	str	lr, [sp, #4]
   107c4:	add	fp, sp, #4
   107c8:	sub	sp, sp, #16
   107cc:	movw	r0, #2484	; 0x9b4
   107d0:	movt	r0, #1
   107d4:	bl	105dc <printf@plt>
   107d8:	sub	r3, fp, #16
   107dc:	mov	r1, r3
   107e0:	movw	r0, #2520	; 0x9d8
   107e4:	movt	r0, #1
   107e8:	bl	10618 <__isoc99_scanf@plt>
   107ec:	ldr	r3, [fp, #-16]
   107f0:	cmp	r3, #100	; 0x64
   107f4:	ble	1080c <main@@Base+0x50>
   107f8:	movw	r0, #2524	; 0x9dc
   107fc:	movt	r0, #1
   10800:	bl	105dc <printf@plt>
   10804:	mov	r3, #100	; 0x64
   10808:	str	r3, [fp, #-16]
   1080c:	ldr	r3, [fp, #-16]
   10810:	lsl	r3, r3, #2
   10814:	mov	r0, r3
   10818:	bl	105f4 <malloc@plt>
   1081c:	mov	r3, r0
   10820:	str	r3, [fp, #-12]
   10824:	mov	r3, #0
   10828:	str	r3, [fp, #-8]
   1082c:	b	10874 <main@@Base+0xb8>
   10830:	ldr	r3, [fp, #-8]
   10834:	add	r3, r3, #1
   10838:	mov	r1, r3
   1083c:	movw	r0, #2572	; 0xa0c
   10840:	movt	r0, #1
   10844:	bl	105dc <printf@plt>
   10848:	ldr	r3, [fp, #-8]
   1084c:	lsl	r3, r3, #2
   10850:	ldr	r2, [fp, #-12]
   10854:	add	r3, r2, r3
   10858:	mov	r1, r3
   1085c:	movw	r0, #2520	; 0x9d8
   10860:	movt	r0, #1
   10864:	bl	10618 <__isoc99_scanf@plt>
   10868:	ldr	r3, [fp, #-8]
   1086c:	add	r3, r3, #1
   10870:	str	r3, [fp, #-8]
   10874:	ldr	r3, [fp, #-16]
   10878:	ldr	r2, [fp, #-8]
   1087c:	cmp	r2, r3
   10880:	blt	10830 <main@@Base+0x74>
   10884:	ldr	r3, [fp, #-16]
   10888:	mov	r1, r3
   1088c:	ldr	r0, [fp, #-12]
   10890:	bl	10720 <ordenado@@Base>
   10894:	mov	r3, r0
   10898:	cmp	r3, #0
   1089c:	beq	10920 <main@@Base+0x164>
   108a0:	movw	r0, #2596	; 0xa24
   108a4:	movt	r0, #1
   108a8:	bl	105dc <printf@plt>
   108ac:	ldr	r3, [fp, #-16]
   108b0:	sub	r3, r3, #1
   108b4:	str	r3, [fp, #-8]
   108b8:	b	108ec <main@@Base+0x130>
   108bc:	ldr	r3, [fp, #-8]
   108c0:	lsl	r3, r3, #2
   108c4:	ldr	r2, [fp, #-12]
   108c8:	add	r3, r2, r3
   108cc:	ldr	r3, [r3]
   108d0:	mov	r1, r3
   108d4:	movw	r0, #2664	; 0xa68
   108d8:	movt	r0, #1
   108dc:	bl	105dc <printf@plt>
   108e0:	ldr	r3, [fp, #-8]
   108e4:	sub	r3, r3, #1
   108e8:	str	r3, [fp, #-8]
   108ec:	ldr	r3, [fp, #-8]
   108f0:	cmp	r3, #0
   108f4:	bgt	108bc <main@@Base+0x100>
   108f8:	ldr	r3, [fp, #-8]
   108fc:	lsl	r3, r3, #2
   10900:	ldr	r2, [fp, #-12]
   10904:	add	r3, r2, r3
   10908:	ldr	r3, [r3]
   1090c:	mov	r1, r3
   10910:	movw	r0, #2668	; 0xa6c
   10914:	movt	r0, #1
   10918:	bl	105dc <printf@plt>
   1091c:	b	1092c <main@@Base+0x170>
   10920:	movw	r0, #2676	; 0xa74
   10924:	movt	r0, #1
   10928:	bl	105e8 <puts@plt>
   1092c:	mov	r3, #0
   10930:	mov	r0, r3
   10934:	sub	sp, fp, #4
   10938:	ldr	fp, [sp]
   1093c:	add	sp, sp, #4
   10940:	pop	{pc}		; (ldr pc, [sp], #4)

00010944 <__libc_csu_init@@Base>:
   10944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10948:	mov	r7, r0
   1094c:	ldr	r6, [pc, #72]	; 1099c <__libc_csu_init@@Base+0x58>
   10950:	ldr	r5, [pc, #72]	; 109a0 <__libc_csu_init@@Base+0x5c>
   10954:	add	r6, pc, r6
   10958:	add	r5, pc, r5
   1095c:	sub	r6, r6, r5
   10960:	mov	r8, r1
   10964:	mov	r9, r2
   10968:	bl	105bc <printf@plt-0x20>
   1096c:	asrs	r6, r6, #2
   10970:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10974:	mov	r4, #0
   10978:	add	r4, r4, #1
   1097c:	ldr	r3, [r5], #4
   10980:	mov	r2, r9
   10984:	mov	r1, r8
   10988:	mov	r0, r7
   1098c:	blx	r3
   10990:	cmp	r6, r4
   10994:	bne	10978 <__libc_csu_init@@Base+0x34>
   10998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1099c:			; <UNDEFINED> instruction: 0x000105b8
   109a0:			; <UNDEFINED> instruction: 0x000105b0

000109a4 <__libc_csu_fini@@Base>:
   109a4:	bx	lr

Disassembly of section .fini:

000109a8 <.fini>:
   109a8:	push	{r3, lr}
   109ac:	pop	{r3, pc}
