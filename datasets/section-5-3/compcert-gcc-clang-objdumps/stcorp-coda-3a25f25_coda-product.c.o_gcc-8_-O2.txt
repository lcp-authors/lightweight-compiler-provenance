
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-product.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_format>:
       0:	strd	r4, [sp, #-36]!	; 0xffffffdc
       4:	mov	r3, r0
       8:	mov	r4, r1
       c:	strd	r6, [sp, #8]
      10:	mov	r1, r0
      14:	strd	r8, [sp, #16]
      18:	strd	sl, [sp, #24]
      1c:	str	lr, [sp, #32]
      20:	sub	sp, sp, #628	; 0x274
      24:	add	r0, sp, #104	; 0x68
      28:	ldrd	r6, [r3, #8]
      2c:	bl	0 <coda_cursor_set_product>
      30:	subs	r5, r0, #0
      34:	bne	380 <get_format+0x380>
      38:	mov	r3, #1
      3c:	cmp	r6, #4
      40:	sbcs	r2, r7, #0
      44:	str	r3, [r4]
      48:	bge	6c <get_format+0x6c>
      4c:	mov	r0, r5
      50:	add	sp, sp, #628	; 0x274
      54:	ldrd	r4, [sp]
      58:	ldrd	r6, [sp, #8]
      5c:	ldrd	r8, [sp, #16]
      60:	ldrd	sl, [sp, #24]
      64:	add	sp, sp, #32
      68:	pop	{pc}		; (ldr pc, [sp], #4)
      6c:	mov	r2, #4
      70:	mov	r3, #0
      74:	add	r1, sp, #24
      78:	add	r0, sp, #104	; 0x68
      7c:	strd	r2, [sp]
      80:	mov	r2, #0
      84:	mov	r3, #0
      88:	bl	0 <coda_cursor_read_bytes>
      8c:	cmp	r0, #0
      90:	bne	380 <get_format+0x380>
      94:	ldrh	r2, [sp, #24]
      98:	movw	r3, #17475	; 0x4443
      9c:	cmp	r2, r3
      a0:	beq	308 <get_format+0x308>
      a4:	ldr	r2, [sp, #24]
      a8:	movw	r3, #782	; 0x30e
      ac:	movt	r3, #275	; 0x113
      b0:	cmp	r2, r3
      b4:	moveq	r3, #3
      b8:	moveq	r5, #0
      bc:	streq	r3, [r4]
      c0:	beq	4c <get_format+0x4c>
      c4:	cmp	r6, #8
      c8:	sbcs	r3, r7, #0
      cc:	bge	e0 <get_format+0xe0>
      d0:	mov	r3, #1
      d4:	mov	r5, #0
      d8:	str	r3, [r4]
      dc:	b	4c <get_format+0x4c>
      e0:	mov	r8, #4
      e4:	mov	r9, #0
      e8:	add	r1, sp, #28
      ec:	add	r0, sp, #104	; 0x68
      f0:	mov	r2, r8
      f4:	mov	r3, r9
      f8:	strd	r8, [sp]
      fc:	bl	0 <coda_cursor_read_bytes>
     100:	cmp	r0, #0
     104:	bne	380 <get_format+0x380>
     108:	ldr	r2, [sp, #24]
     10c:	movw	r3, #18569	; 0x4889
     110:	movt	r3, #17988	; 0x4644
     114:	cmp	r2, r3
     118:	beq	354 <get_format+0x354>
     11c:	movw	r3, #0
     120:	movt	r3, #0
     124:	ldr	r1, [r3]
     128:	cmp	r2, r1
     12c:	beq	36c <get_format+0x36c>
     130:	ldr	r1, [r3, #12]
     134:	ldr	r0, [pc, #920]	; 4d4 <get_format+0x4d4>
     138:	cmp	r2, r1
     13c:	beq	334 <get_format+0x334>
     140:	ldr	r1, [r3, #24]
     144:	ldr	r0, [pc, #908]	; 4d8 <get_format+0x4d8>
     148:	cmp	r2, r1
     14c:	beq	388 <get_format+0x388>
     150:	ldr	r1, [r3, #36]	; 0x24
     154:	ldr	r0, [pc, #896]	; 4dc <get_format+0x4dc>
     158:	cmp	r2, r1
     15c:	beq	39c <get_format+0x39c>
     160:	ldr	r3, [r3, #48]	; 0x30
     164:	ldr	r1, [pc, #884]	; 4e0 <get_format+0x4e0>
     168:	cmp	r2, r3
     16c:	beq	3b0 <get_format+0x3b0>
     170:	ldr	r1, [sp, #24]
     174:	movw	r3, #21063	; 0x5247
     178:	movt	r3, #16969	; 0x4249
     17c:	cmp	r1, r3
     180:	bne	1a0 <get_format+0x1a0>
     184:	ldrb	r3, [sp, #31]
     188:	sub	r3, r3, #1
     18c:	cmp	r3, #1
     190:	movls	r3, #7
     194:	movls	r5, #0
     198:	strls	r3, [r4]
     19c:	bls	4c <get_format+0x4c>
     1a0:	ldr	r1, [sp, #24]
     1a4:	movw	r3, #16188	; 0x3f3c
     1a8:	movt	r3, #28024	; 0x6d78
     1ac:	cmp	r1, r3
     1b0:	beq	3c4 <get_format+0x3c4>
     1b4:	movw	r3, #48111	; 0xbbef
     1b8:	movt	r3, #15551	; 0x3cbf
     1bc:	cmp	r2, r3
     1c0:	beq	3e0 <get_format+0x3e0>
     1c4:	cmp	r6, #40	; 0x28
     1c8:	sbcs	r3, r7, #0
     1cc:	blt	4c <get_format+0x4c>
     1d0:	mov	r8, #32
     1d4:	mov	r9, #0
     1d8:	mov	r2, #8
     1dc:	mov	r3, #0
     1e0:	add	r1, sp, #32
     1e4:	add	r0, sp, #104	; 0x68
     1e8:	strd	r8, [sp]
     1ec:	bl	0 <coda_cursor_read_bytes>
     1f0:	cmp	r0, #0
     1f4:	bne	380 <get_format+0x380>
     1f8:	cmp	r6, #60	; 0x3c
     1fc:	sbcs	r3, r7, #0
     200:	blt	210 <get_format+0x210>
     204:	ldrb	r3, [sp, #24]
     208:	cmp	r3, #35	; 0x23
     20c:	beq	3f8 <get_format+0x3f8>
     210:	cmp	r6, #80	; 0x50
     214:	sbcs	r3, r7, #0
     218:	blt	4c <get_format+0x4c>
     21c:	mov	r8, #20
     220:	mov	r9, #0
     224:	mov	r2, #60	; 0x3c
     228:	mov	r3, #0
     22c:	add	r1, sp, #24
     230:	add	r0, sp, #104	; 0x68
     234:	strd	r8, [sp]
     238:	bl	0 <coda_cursor_read_bytes>
     23c:	cmp	r0, #0
     240:	bne	380 <get_format+0x380>
     244:	movw	r1, #0
     248:	movt	r1, #0
     24c:	mov	r2, #20
     250:	add	r0, sp, #24
     254:	bl	0 <memcmp>
     258:	cmp	r0, #0
     25c:	beq	4bc <get_format+0x4bc>
     260:	mov	r2, #520	; 0x208
     264:	mov	r3, #0
     268:	cmp	r2, r6
     26c:	sbcs	r3, r3, r7
     270:	bge	4c <get_format+0x4c>
     274:	movw	sl, #18569	; 0x4889
     278:	movt	sl, #17988	; 0x4644
     27c:	str	r5, [sp, #8]
     280:	movw	fp, #2573	; 0xa0d
     284:	movt	fp, #2586	; 0xa1a
     288:	str	r4, [sp, #12]
     28c:	mov	r8, #512	; 0x200
     290:	mov	r9, #0
     294:	b	2b4 <get_format+0x2b4>
     298:	adds	r8, r8, r8
     29c:	adc	r9, r9, r9
     2a0:	adds	r4, r8, #8
     2a4:	adc	r5, r9, #0
     2a8:	cmp	r4, r6
     2ac:	sbcs	r3, r5, r7
     2b0:	bge	4cc <get_format+0x4cc>
     2b4:	mov	r0, #8
     2b8:	mov	r1, #0
     2bc:	mov	r2, r8
     2c0:	mov	r3, r9
     2c4:	strd	r0, [sp]
     2c8:	add	r1, sp, #24
     2cc:	add	r0, sp, #104	; 0x68
     2d0:	bl	0 <coda_cursor_read_bytes>
     2d4:	cmp	r0, #0
     2d8:	bne	380 <get_format+0x380>
     2dc:	ldr	r3, [sp, #24]
     2e0:	cmp	r3, sl
     2e4:	bne	298 <get_format+0x298>
     2e8:	ldr	r3, [sp, #28]
     2ec:	cmp	r3, fp
     2f0:	bne	298 <get_format+0x298>
     2f4:	ldr	r4, [sp, #12]
     2f8:	mov	r3, #4
     2fc:	mov	r5, #0
     300:	str	r3, [r4]
     304:	b	4c <get_format+0x4c>
     308:	ldrb	r3, [sp, #26]
     30c:	cmp	r3, #70	; 0x46
     310:	bne	a4 <get_format+0xa4>
     314:	ldrb	r3, [sp, #27]
     318:	sub	r2, r3, #1
     31c:	cmp	r3, #5
     320:	cmpne	r2, #1
     324:	movls	r3, #6
     328:	strls	r3, [r4]
     32c:	bhi	a4 <get_format+0xa4>
     330:	b	4c <get_format+0x4c>
     334:	ldr	r1, [r0, #4]
     338:	ldr	r0, [sp, #28]
     33c:	cmp	r0, r1
     340:	bne	140 <get_format+0x140>
     344:	mov	r3, #5
     348:	mov	r5, #0
     34c:	str	r3, [r4]
     350:	b	4c <get_format+0x4c>
     354:	ldr	r1, [sp, #28]
     358:	movw	r3, #2573	; 0xa0d
     35c:	movt	r3, #2586	; 0xa1a
     360:	cmp	r1, r3
     364:	bne	11c <get_format+0x11c>
     368:	b	2f8 <get_format+0x2f8>
     36c:	ldr	r1, [r3, #4]
     370:	ldr	r0, [sp, #28]
     374:	cmp	r0, r1
     378:	bne	130 <get_format+0x130>
     37c:	b	344 <get_format+0x344>
     380:	mvn	r5, #0
     384:	b	4c <get_format+0x4c>
     388:	ldr	r1, [r0, #4]
     38c:	ldr	r0, [sp, #28]
     390:	cmp	r0, r1
     394:	bne	150 <get_format+0x150>
     398:	b	344 <get_format+0x344>
     39c:	ldr	r1, [r0, #4]
     3a0:	ldr	r0, [sp, #28]
     3a4:	cmp	r0, r1
     3a8:	bne	160 <get_format+0x160>
     3ac:	b	344 <get_format+0x344>
     3b0:	ldr	r3, [r1, #4]
     3b4:	ldr	r1, [sp, #28]
     3b8:	cmp	r1, r3
     3bc:	bne	170 <get_format+0x170>
     3c0:	b	344 <get_format+0x344>
     3c4:	ldrb	r3, [sp, #28]
     3c8:	cmp	r3, #108	; 0x6c
     3cc:	bne	1b4 <get_format+0x1b4>
     3d0:	mov	r3, #2
     3d4:	mov	r5, #0
     3d8:	str	r3, [r4]
     3dc:	b	4c <get_format+0x4c>
     3e0:	ldr	r2, [sp, #28]
     3e4:	movw	r3, #30783	; 0x783f
     3e8:	movt	r3, #27757	; 0x6c6d
     3ec:	cmp	r2, r3
     3f0:	bne	1c4 <get_format+0x1c4>
     3f4:	b	3d0 <get_format+0x3d0>
     3f8:	ldrb	r3, [sp, #25]
     3fc:	sub	r3, r3, #97	; 0x61
     400:	cmp	r3, #2
     404:	bhi	210 <get_format+0x210>
     408:	ldrb	r3, [sp, #26]
     40c:	cmp	r3, #86	; 0x56
     410:	cmpne	r3, #80	; 0x50
     414:	bne	210 <get_format+0x210>
     418:	ldrb	r3, [sp, #27]
     41c:	sub	r3, r3, #48	; 0x30
     420:	cmp	r3, #9
     424:	bhi	210 <get_format+0x210>
     428:	ldrb	r3, [sp, #28]
     42c:	sub	r3, r3, #48	; 0x30
     430:	cmp	r3, #9
     434:	bhi	210 <get_format+0x210>
     438:	ldrb	r3, [sp, #29]
     43c:	sub	r3, r3, #48	; 0x30
     440:	cmp	r3, #9
     444:	bhi	210 <get_format+0x210>
     448:	ldrb	r3, [sp, #30]
     44c:	sub	r3, r3, #48	; 0x30
     450:	cmp	r3, #9
     454:	bhi	210 <get_format+0x210>
     458:	ldrb	r3, [sp, #31]
     45c:	cmp	r3, #32
     460:	bne	210 <get_format+0x210>
     464:	ldrb	r3, [sp, #34]	; 0x22
     468:	cmp	r3, #32
     46c:	bne	210 <get_format+0x210>
     470:	ldrb	r3, [sp, #37]	; 0x25
     474:	cmp	r3, #32
     478:	bne	210 <get_format+0x210>
     47c:	ldrb	r3, [sp, #40]	; 0x28
     480:	cmp	r3, #32
     484:	bne	210 <get_format+0x210>
     488:	ldrb	r3, [sp, #43]	; 0x2b
     48c:	cmp	r3, #32
     490:	bne	210 <get_format+0x210>
     494:	ldrb	r3, [sp, #55]	; 0x37
     498:	cmp	r3, #32
     49c:	bne	210 <get_format+0x210>
     4a0:	ldrb	r3, [sp, #63]	; 0x3f
     4a4:	cmp	r3, #32
     4a8:	moveq	r3, #9
     4ac:	moveq	r5, #0
     4b0:	streq	r3, [r4]
     4b4:	bne	210 <get_format+0x210>
     4b8:	b	4c <get_format+0x4c>
     4bc:	mov	r3, #8
     4c0:	mov	r5, r0
     4c4:	str	r3, [r4]
     4c8:	b	4c <get_format+0x4c>
     4cc:	ldr	r5, [sp, #8]
     4d0:	b	4c <get_format+0x4c>
     4d4:	.word	0x0000000c
     4d8:	.word	0x00000018
     4dc:	.word	0x00000024
     4e0:	.word	0x00000030

000004e4 <set_definition>:
     4e4:	ldr	r3, [r0]
     4e8:	strd	r4, [sp, #-12]!
     4ec:	subs	r4, r1, #0
     4f0:	ldr	r3, [r3, #16]
     4f4:	str	lr, [sp, #8]
     4f8:	sub	sp, sp, #12
     4fc:	beq	600 <set_definition+0x11c>
     500:	mov	r5, r0
     504:	ldr	r0, [r4]
     508:	cmp	r0, r3
     50c:	beq	57c <set_definition+0x98>
     510:	cmp	r3, #1
     514:	cmpeq	r0, #0
     518:	bne	64c <set_definition+0x168>
     51c:	ldr	r3, [r4, #24]
     520:	cmp	r3, #0
     524:	bne	618 <set_definition+0x134>
     528:	mov	r0, r4
     52c:	bl	0 <coda_read_product_definition>
     530:	cmp	r0, #0
     534:	ldreq	r0, [r4]
     538:	bne	62c <set_definition+0x148>
     53c:	cmp	r0, #1
     540:	beq	590 <set_definition+0xac>
     544:	cmp	r0, #0
     548:	beq	618 <set_definition+0x134>
     54c:	cmp	r0, #2
     550:	beq	634 <set_definition+0x150>
     554:	ldr	r2, [r4, #32]
     558:	ldr	r5, [r5]
     55c:	cmp	r2, #0
     560:	str	r4, [r5, #24]
     564:	bgt	5b8 <set_definition+0xd4>
     568:	mov	r0, #0
     56c:	add	sp, sp, #12
     570:	ldrd	r4, [sp]
     574:	add	sp, sp, #8
     578:	pop	{pc}		; (ldr pc, [sp], #4)
     57c:	ldr	r3, [r4, #24]
     580:	cmp	r3, #0
     584:	beq	528 <set_definition+0x44>
     588:	cmp	r0, #1
     58c:	bne	544 <set_definition+0x60>
     590:	mov	r1, r4
     594:	mov	r0, r5
     598:	bl	0 <coda_bin_reopen_with_definition>
     59c:	cmp	r0, #0
     5a0:	bne	62c <set_definition+0x148>
     5a4:	ldr	r5, [r5]
     5a8:	ldr	r4, [r5, #24]
     5ac:	ldr	r2, [r4, #32]
     5b0:	cmp	r2, #0
     5b4:	ble	568 <set_definition+0x84>
     5b8:	lsl	r4, r2, #2
     5bc:	mov	r0, r4
     5c0:	bl	0 <malloc>
     5c4:	cmp	r0, #0
     5c8:	str	r0, [r5, #28]
     5cc:	moveq	r0, #500	; 0x1f4
     5d0:	beq	684 <set_definition+0x1a0>
     5d4:	mov	r0, r4
     5d8:	bl	0 <malloc>
     5dc:	cmp	r0, #0
     5e0:	str	r0, [r5, #32]
     5e4:	movne	r3, #0
     5e8:	addne	r2, r0, r4
     5ec:	beq	680 <set_definition+0x19c>
     5f0:	str	r3, [r0], #4
     5f4:	cmp	r2, r0
     5f8:	bne	5f0 <set_definition+0x10c>
     5fc:	b	568 <set_definition+0x84>
     600:	cmp	r3, #1
     604:	bhi	568 <set_definition+0x84>
     608:	mvn	r0, #199	; 0xc7
     60c:	bl	0 <coda_set_error>
     610:	mvn	r0, #0
     614:	b	56c <set_definition+0x88>
     618:	mov	r1, r4
     61c:	mov	r0, r5
     620:	bl	0 <coda_ascii_reopen_with_definition>
     624:	cmp	r0, #0
     628:	beq	5a4 <set_definition+0xc0>
     62c:	mvn	r0, #0
     630:	b	56c <set_definition+0x88>
     634:	mov	r1, r4
     638:	mov	r0, r5
     63c:	bl	0 <coda_xml_reopen_with_definition>
     640:	cmp	r0, #0
     644:	beq	5a4 <set_definition+0xc0>
     648:	b	62c <set_definition+0x148>
     64c:	bl	0 <coda_type_get_format_name>
     650:	ldr	r3, [r5]
     654:	mov	r4, r0
     658:	ldr	r0, [r3, #16]
     65c:	bl	0 <coda_type_get_format_name>
     660:	mov	r3, r0
     664:	mov	r2, r4
     668:	mvn	r0, #199	; 0xc7
     66c:	movw	r1, #0
     670:	movt	r1, #0
     674:	bl	0 <coda_set_error>
     678:	mvn	r0, #0
     67c:	b	56c <set_definition+0x88>
     680:	movw	r0, #507	; 0x1fb
     684:	mov	r2, r4
     688:	movw	r3, #0
     68c:	movt	r3, #0
     690:	movw	r1, #0
     694:	movt	r1, #0
     698:	str	r0, [sp]
     69c:	mvn	r0, #0
     6a0:	bl	0 <coda_set_error>
     6a4:	b	62c <set_definition+0x148>

000006a8 <coda_close>:
     6a8:	strd	r4, [sp, #-16]!
     6ac:	subs	r5, r0, #0
     6b0:	str	r6, [sp, #8]
     6b4:	str	lr, [sp, #12]
     6b8:	beq	854 <coda_close+0x1ac>
     6bc:	ldr	r0, [r5, #28]
     6c0:	cmp	r0, #0
     6c4:	beq	6d4 <coda_close+0x2c>
     6c8:	bl	0 <free>
     6cc:	mov	r3, #0
     6d0:	str	r3, [r5, #28]
     6d4:	ldr	r3, [r5, #32]
     6d8:	cmp	r3, #0
     6dc:	beq	72c <coda_close+0x84>
     6e0:	ldr	r1, [r5, #24]
     6e4:	ldr	r2, [r1, #32]
     6e8:	cmp	r2, #0
     6ec:	ble	71c <coda_close+0x74>
     6f0:	mov	r4, #0
     6f4:	ldr	r0, [r3, r4, lsl #2]
     6f8:	cmp	r0, #0
     6fc:	beq	70c <coda_close+0x64>
     700:	bl	0 <free>
     704:	ldr	r1, [r5, #24]
     708:	ldr	r3, [r5, #32]
     70c:	add	r4, r4, #1
     710:	ldr	r2, [r1, #32]
     714:	cmp	r2, r4
     718:	bgt	6f4 <coda_close+0x4c>
     71c:	mov	r0, r3
     720:	bl	0 <free>
     724:	mov	r3, #0
     728:	str	r3, [r5, #32]
     72c:	ldr	r3, [r5, #16]
     730:	cmp	r3, #9
     734:	ldrls	pc, [pc, r3, lsl #2]
     738:	b	874 <coda_close+0x1cc>
     73c:	.word	0x0000077c
     740:	.word	0x00000794
     744:	.word	0x000007ac
     748:	.word	0x000007c4
     74c:	.word	0x000007e4
     750:	.word	0x000007f4
     754:	.word	0x0000080c
     758:	.word	0x00000824
     75c:	.word	0x0000083c
     760:	.word	0x00000764
     764:	mov	r0, r5
     768:	ldrd	r4, [sp]
     76c:	ldr	r6, [sp, #8]
     770:	ldr	lr, [sp, #12]
     774:	add	sp, sp, #16
     778:	b	0 <coda_sp3_close>
     77c:	mov	r0, r5
     780:	ldrd	r4, [sp]
     784:	ldr	r6, [sp, #8]
     788:	ldr	lr, [sp, #12]
     78c:	add	sp, sp, #16
     790:	b	0 <coda_ascii_close>
     794:	mov	r0, r5
     798:	ldrd	r4, [sp]
     79c:	ldr	r6, [sp, #8]
     7a0:	ldr	lr, [sp, #12]
     7a4:	add	sp, sp, #16
     7a8:	b	0 <coda_bin_close>
     7ac:	mov	r0, r5
     7b0:	ldrd	r4, [sp]
     7b4:	ldr	r6, [sp, #8]
     7b8:	ldr	lr, [sp, #12]
     7bc:	add	sp, sp, #16
     7c0:	b	0 <coda_xml_close>
     7c4:	mov	r1, #0
     7c8:	mvn	r0, #10
     7cc:	bl	0 <coda_set_error>
     7d0:	ldrd	r4, [sp]
     7d4:	mvn	r0, #0
     7d8:	ldr	r6, [sp, #8]
     7dc:	add	sp, sp, #12
     7e0:	pop	{pc}		; (ldr pc, [sp], #4)
     7e4:	mov	r1, #0
     7e8:	mvn	r0, #12
     7ec:	bl	0 <coda_set_error>
     7f0:	b	7d0 <coda_close+0x128>
     7f4:	mov	r0, r5
     7f8:	ldrd	r4, [sp]
     7fc:	ldr	r6, [sp, #8]
     800:	ldr	lr, [sp, #12]
     804:	add	sp, sp, #16
     808:	b	0 <coda_cdf_close>
     80c:	mov	r0, r5
     810:	ldrd	r4, [sp]
     814:	ldr	r6, [sp, #8]
     818:	ldr	lr, [sp, #12]
     81c:	add	sp, sp, #16
     820:	b	0 <coda_netcdf_close>
     824:	mov	r0, r5
     828:	ldrd	r4, [sp]
     82c:	ldr	r6, [sp, #8]
     830:	ldr	lr, [sp, #12]
     834:	add	sp, sp, #16
     838:	b	0 <coda_grib_close>
     83c:	mov	r0, r5
     840:	ldrd	r4, [sp]
     844:	ldr	r6, [sp, #8]
     848:	ldr	lr, [sp, #12]
     84c:	add	sp, sp, #16
     850:	b	0 <coda_rinex_close>
     854:	movw	r2, #0
     858:	movt	r2, #0
     85c:	movw	r1, #0
     860:	movt	r1, #0
     864:	movw	r3, #777	; 0x309
     868:	mvn	r0, #99	; 0x63
     86c:	bl	0 <coda_set_error>
     870:	b	7d0 <coda_close+0x128>
     874:	movw	r1, #0
     878:	movt	r1, #0
     87c:	ldr	r3, [pc, #12]	; 890 <coda_close+0x1e8>
     880:	movw	r0, #0
     884:	movt	r0, #0
     888:	mov	r2, #836	; 0x344
     88c:	bl	0 <__assert_fail>
     890:	.word	0x0000003c

00000894 <open_file>:
     894:	strd	r4, [sp, #-24]!	; 0xffffffe8
     898:	subs	r4, r0, #0
     89c:	strd	r6, [sp, #8]
     8a0:	str	r8, [sp, #16]
     8a4:	str	lr, [sp, #20]
     8a8:	sub	sp, sp, #104	; 0x68
     8ac:	beq	ac0 <open_file+0x22c>
     8b0:	mov	r8, r1
     8b4:	mov	r7, r2
     8b8:	mov	r1, r4
     8bc:	add	r2, sp, #16
     8c0:	mov	r0, #3
     8c4:	bl	0 <__xstat>
     8c8:	cmp	r0, #0
     8cc:	bne	a44 <open_file+0x1b0>
     8d0:	ldr	r3, [sp, #32]
     8d4:	tst	r3, #32768	; 0x8000
     8d8:	beq	a78 <open_file+0x1e4>
     8dc:	ldr	r2, [sp, #60]	; 0x3c
     8e0:	add	r5, sp, #12
     8e4:	mov	r0, r4
     8e8:	str	r5, [sp]
     8ec:	asr	r3, r2, #31
     8f0:	bl	0 <coda_bin_open>
     8f4:	subs	r6, r0, #0
     8f8:	bne	a08 <open_file+0x174>
     8fc:	cmp	r7, #0
     900:	ldr	r0, [sp, #12]
     904:	beq	928 <open_file+0x94>
     908:	str	r0, [r8]
     90c:	mov	r0, r6
     910:	add	sp, sp, #104	; 0x68
     914:	ldrd	r4, [sp]
     918:	ldrd	r6, [sp, #8]
     91c:	ldr	r8, [sp, #16]
     920:	add	sp, sp, #20
     924:	pop	{pc}		; (ldr pc, [sp], #4)
     928:	add	r1, sp, #16
     92c:	bl	0 <get_format>
     930:	cmp	r0, #0
     934:	bne	ab0 <open_file+0x21c>
     938:	ldr	r3, [sp, #16]
     93c:	cmp	r3, #9
     940:	ldrls	pc, [pc, r3, lsl #2]
     944:	b	980 <open_file+0xec>
     948:	.word	0x00000a28
     94c:	.word	0x00000980
     950:	.word	0x00000a10
     954:	.word	0x000009fc
     958:	.word	0x000009e8
     95c:	.word	0x000009d0
     960:	.word	0x000009b8
     964:	.word	0x000009a0
     968:	.word	0x00000988
     96c:	.word	0x00000970
     970:	mov	r0, r5
     974:	bl	0 <coda_sp3_reopen>
     978:	cmp	r0, #0
     97c:	bne	a08 <open_file+0x174>
     980:	ldr	r0, [sp, #12]
     984:	b	908 <open_file+0x74>
     988:	mov	r0, r5
     98c:	bl	0 <coda_rinex_reopen>
     990:	cmp	r0, #0
     994:	bne	a08 <open_file+0x174>
     998:	ldr	r0, [sp, #12]
     99c:	b	908 <open_file+0x74>
     9a0:	mov	r0, r5
     9a4:	bl	0 <coda_grib_reopen>
     9a8:	cmp	r0, #0
     9ac:	bne	a08 <open_file+0x174>
     9b0:	ldr	r0, [sp, #12]
     9b4:	b	908 <open_file+0x74>
     9b8:	mov	r0, r5
     9bc:	bl	0 <coda_netcdf_reopen>
     9c0:	cmp	r0, #0
     9c4:	bne	a08 <open_file+0x174>
     9c8:	ldr	r0, [sp, #12]
     9cc:	b	908 <open_file+0x74>
     9d0:	mov	r0, r5
     9d4:	bl	0 <coda_cdf_reopen>
     9d8:	cmp	r0, #0
     9dc:	bne	a08 <open_file+0x174>
     9e0:	ldr	r0, [sp, #12]
     9e4:	b	908 <open_file+0x74>
     9e8:	mov	r1, #0
     9ec:	mvn	r0, #12
     9f0:	bl	0 <coda_set_error>
     9f4:	mvn	r6, #0
     9f8:	b	90c <open_file+0x78>
     9fc:	mov	r1, #0
     a00:	mvn	r0, #10
     a04:	bl	0 <coda_set_error>
     a08:	mvn	r6, #0
     a0c:	b	90c <open_file+0x78>
     a10:	mov	r0, r5
     a14:	bl	0 <coda_xml_reopen>
     a18:	cmp	r0, #0
     a1c:	bne	a08 <open_file+0x174>
     a20:	ldr	r0, [sp, #12]
     a24:	b	908 <open_file+0x74>
     a28:	movw	r1, #0
     a2c:	movt	r1, #0
     a30:	ldr	r3, [pc, #164]	; adc <open_file+0x248>
     a34:	movw	r0, #0
     a38:	movt	r0, #0
     a3c:	movw	r2, #362	; 0x16a
     a40:	bl	0 <__assert_fail>
     a44:	bl	0 <__errno_location>
     a48:	ldr	r0, [r0]
     a4c:	cmp	r0, #2
     a50:	beq	a94 <open_file+0x200>
     a54:	bl	0 <strerror>
     a58:	mov	r3, r0
     a5c:	mov	r2, r4
     a60:	movw	r1, #0
     a64:	movt	r1, #0
     a68:	mvn	r0, #20
     a6c:	mvn	r6, #0
     a70:	bl	0 <coda_set_error>
     a74:	b	90c <open_file+0x78>
     a78:	mov	r2, r4
     a7c:	movw	r1, #0
     a80:	movt	r1, #0
     a84:	mvn	r0, #20
     a88:	bl	0 <coda_set_error>
     a8c:	mvn	r6, #0
     a90:	b	90c <open_file+0x78>
     a94:	mov	r2, r4
     a98:	movw	r1, #0
     a9c:	movt	r1, #0
     aa0:	mvn	r0, #19
     aa4:	bl	0 <coda_set_error>
     aa8:	mvn	r6, #0
     aac:	b	90c <open_file+0x78>
     ab0:	ldr	r0, [sp, #12]
     ab4:	mvn	r6, #0
     ab8:	bl	6a8 <coda_close>
     abc:	b	90c <open_file+0x78>
     ac0:	movw	r1, #0
     ac4:	movt	r1, #0
     ac8:	ldr	r3, [pc, #16]	; ae0 <open_file+0x24c>
     acc:	movw	r0, #0
     ad0:	movt	r0, #0
     ad4:	mov	r2, #162	; 0xa2
     ad8:	bl	0 <__assert_fail>
     adc:	.word	0x00000058
     ae0:	.word	0x00000048

00000ae4 <coda_recognize_file>:
     ae4:	mov	ip, #0
     ae8:	strd	r4, [sp, #-28]!	; 0xffffffe4
     aec:	mov	r4, r1
     af0:	strd	r6, [sp, #8]
     af4:	mov	r7, r3
     af8:	strd	r8, [sp, #16]
     afc:	mov	r8, r2
     b00:	mov	r2, ip
     b04:	str	lr, [sp, #24]
     b08:	sub	sp, sp, #12
     b0c:	add	r1, sp, #4
     b10:	ldr	r6, [sp, #40]	; 0x28
     b14:	str	ip, [sp]
     b18:	ldr	r5, [sp, #44]	; 0x2c
     b1c:	bl	894 <open_file>
     b20:	cmp	r0, #0
     b24:	bne	bf4 <coda_recognize_file+0x110>
     b28:	mov	r1, sp
     b2c:	ldr	r0, [sp, #4]
     b30:	bl	0 <coda_data_dictionary_find_definition_for_product>
     b34:	subs	r9, r0, #0
     b38:	bne	bfc <coda_recognize_file+0x118>
     b3c:	ldr	r0, [sp, #4]
     b40:	cmp	r4, #0
     b44:	ldrdne	r2, [r0, #8]
     b48:	strdne	r2, [r4]
     b4c:	ldr	r3, [sp]
     b50:	cmp	r3, #0
     b54:	beq	bbc <coda_recognize_file+0xd8>
     b58:	cmp	r8, #0
     b5c:	ldrne	r2, [r3]
     b60:	strne	r2, [r8]
     b64:	cmp	r7, #0
     b68:	beq	b7c <coda_recognize_file+0x98>
     b6c:	ldr	r2, [r3, #44]	; 0x2c
     b70:	ldr	r2, [r2, #20]
     b74:	ldr	r2, [r2]
     b78:	str	r2, [r7]
     b7c:	cmp	r6, #0
     b80:	beq	b90 <coda_recognize_file+0xac>
     b84:	ldr	r2, [r3, #44]	; 0x2c
     b88:	ldr	r2, [r2]
     b8c:	str	r2, [r6]
     b90:	cmp	r5, #0
     b94:	ldrne	r3, [r3, #4]
     b98:	strne	r3, [r5]
     b9c:	bl	6a8 <coda_close>
     ba0:	mov	r0, r9
     ba4:	add	sp, sp, #12
     ba8:	ldrd	r4, [sp]
     bac:	ldrd	r6, [sp, #8]
     bb0:	ldrd	r8, [sp, #16]
     bb4:	add	sp, sp, #24
     bb8:	pop	{pc}		; (ldr pc, [sp], #4)
     bbc:	cmp	r8, #0
     bc0:	ldrne	r3, [r0, #16]
     bc4:	strne	r3, [r8]
     bc8:	cmp	r7, #0
     bcc:	movne	r3, #0
     bd0:	strne	r3, [r7]
     bd4:	cmp	r6, #0
     bd8:	movne	r3, #0
     bdc:	strne	r3, [r6]
     be0:	cmp	r5, #0
     be4:	beq	b9c <coda_recognize_file+0xb8>
     be8:	mvn	r3, #0
     bec:	str	r3, [r5]
     bf0:	b	b9c <coda_recognize_file+0xb8>
     bf4:	mvn	r9, #0
     bf8:	b	ba0 <coda_recognize_file+0xbc>
     bfc:	ldr	r0, [sp, #4]
     c00:	mvn	r9, #0
     c04:	bl	6a8 <coda_close>
     c08:	b	ba0 <coda_recognize_file+0xbc>

00000c0c <coda_open>:
     c0c:	mov	r2, #0
     c10:	str	r4, [sp, #-8]!
     c14:	str	lr, [sp, #4]
     c18:	sub	sp, sp, #8
     c1c:	cmp	r0, r2
     c20:	str	r2, [sp]
     c24:	beq	cc0 <coda_open+0xb4>
     c28:	cmp	r1, #0
     c2c:	mov	r4, r1
     c30:	beq	c9c <coda_open+0x90>
     c34:	add	r1, sp, #4
     c38:	bl	894 <open_file>
     c3c:	cmp	r0, #0
     c40:	bne	c84 <coda_open+0x78>
     c44:	mov	r1, sp
     c48:	ldr	r0, [sp, #4]
     c4c:	bl	0 <coda_data_dictionary_find_definition_for_product>
     c50:	cmp	r0, #0
     c54:	bne	c8c <coda_open+0x80>
     c58:	add	r0, sp, #4
     c5c:	ldr	r1, [sp]
     c60:	bl	4e4 <set_definition>
     c64:	cmp	r0, #0
     c68:	bne	c8c <coda_open+0x80>
     c6c:	ldr	r3, [sp, #4]
     c70:	str	r3, [r4]
     c74:	add	sp, sp, #8
     c78:	ldr	r4, [sp]
     c7c:	add	sp, sp, #4
     c80:	pop	{pc}		; (ldr pc, [sp], #4)
     c84:	mvn	r0, #0
     c88:	b	c74 <coda_open+0x68>
     c8c:	ldr	r0, [sp, #4]
     c90:	bl	6a8 <coda_close>
     c94:	mvn	r0, #0
     c98:	b	c74 <coda_open+0x68>
     c9c:	mvn	r0, #99	; 0x63
     ca0:	movw	r2, #0
     ca4:	movt	r2, #0
     ca8:	movw	r1, #0
     cac:	movt	r1, #0
     cb0:	movw	r3, #673	; 0x2a1
     cb4:	bl	0 <coda_set_error>
     cb8:	mvn	r0, #0
     cbc:	b	c74 <coda_open+0x68>
     cc0:	mvn	r0, #99	; 0x63
     cc4:	movw	r2, #0
     cc8:	movt	r2, #0
     ccc:	movw	r1, #0
     cd0:	movt	r1, #0
     cd4:	mov	r3, #668	; 0x29c
     cd8:	bl	0 <coda_set_error>
     cdc:	mvn	r0, #0
     ce0:	b	c74 <coda_open+0x68>

00000ce4 <coda_open_as>:
     ce4:	mov	ip, #0
     ce8:	strd	r4, [sp, #-12]!
     cec:	subs	r5, r0, #0
     cf0:	str	lr, [sp, #8]
     cf4:	sub	sp, sp, #12
     cf8:	ldr	r4, [sp, #24]
     cfc:	str	ip, [sp]
     d00:	beq	dac <coda_open_as+0xc8>
     d04:	cmp	r1, #0
     d08:	mov	r0, r1
     d0c:	beq	d58 <coda_open_as+0x74>
     d10:	cmp	r2, #0
     d14:	mov	r1, r2
     d18:	beq	df4 <coda_open_as+0x110>
     d1c:	cmp	r4, #0
     d20:	beq	dd0 <coda_open_as+0xec>
     d24:	mov	r2, r3
     d28:	mov	r3, sp
     d2c:	bl	0 <coda_data_dictionary_get_definition>
     d30:	cmp	r0, #0
     d34:	bne	da4 <coda_open_as+0xc0>
     d38:	ldr	r3, [sp]
     d3c:	cmp	r3, #0
     d40:	beq	d58 <coda_open_as+0x74>
     d44:	ldr	r2, [r3]
     d48:	cmp	r2, #1
     d4c:	movhi	r2, #0
     d50:	movls	r2, #1
     d54:	b	d5c <coda_open_as+0x78>
     d58:	mov	r2, #0
     d5c:	mov	r0, r5
     d60:	add	r1, sp, #4
     d64:	bl	894 <open_file>
     d68:	cmp	r0, #0
     d6c:	bne	da4 <coda_open_as+0xc0>
     d70:	add	r0, sp, #4
     d74:	ldr	r1, [sp]
     d78:	bl	4e4 <set_definition>
     d7c:	cmp	r0, #0
     d80:	bne	d9c <coda_open_as+0xb8>
     d84:	ldr	r3, [sp, #4]
     d88:	str	r3, [r4]
     d8c:	add	sp, sp, #12
     d90:	ldrd	r4, [sp]
     d94:	add	sp, sp, #8
     d98:	pop	{pc}		; (ldr pc, [sp], #4)
     d9c:	ldr	r0, [sp, #4]
     da0:	bl	6a8 <coda_close>
     da4:	mvn	r0, #0
     da8:	b	d8c <coda_open_as+0xa8>
     dac:	mvn	r0, #99	; 0x63
     db0:	movw	r2, #0
     db4:	movt	r2, #0
     db8:	movw	r1, #0
     dbc:	movt	r1, #0
     dc0:	movw	r3, #719	; 0x2cf
     dc4:	bl	0 <coda_set_error>
     dc8:	mvn	r0, #0
     dcc:	b	d8c <coda_open_as+0xa8>
     dd0:	mvn	r0, #99	; 0x63
     dd4:	movw	r2, #0
     dd8:	movt	r2, #0
     ddc:	movw	r1, #0
     de0:	movt	r1, #0
     de4:	movw	r3, #731	; 0x2db
     de8:	bl	0 <coda_set_error>
     dec:	mvn	r0, #0
     df0:	b	d8c <coda_open_as+0xa8>
     df4:	mvn	r0, #99	; 0x63
     df8:	movw	r2, #0
     dfc:	movt	r2, #0
     e00:	movw	r1, #0
     e04:	movt	r1, #0
     e08:	movw	r3, #726	; 0x2d6
     e0c:	bl	0 <coda_set_error>
     e10:	mvn	r0, #0
     e14:	b	d8c <coda_open_as+0xa8>

00000e18 <coda_get_product_filename>:
     e18:	cmp	r0, #0
     e1c:	beq	e30 <coda_get_product_filename+0x18>
     e20:	ldr	r3, [r0]
     e24:	mov	r0, #0
     e28:	str	r3, [r1]
     e2c:	bx	lr
     e30:	mvn	r0, #99	; 0x63
     e34:	movw	r2, #0
     e38:	movt	r2, #0
     e3c:	movw	r1, #0
     e40:	movt	r1, #0
     e44:	mov	r3, #856	; 0x358
     e48:	str	r4, [sp, #-8]!
     e4c:	str	lr, [sp, #4]
     e50:	bl	0 <coda_set_error>
     e54:	ldr	r4, [sp]
     e58:	add	sp, sp, #4
     e5c:	mvn	r0, #0
     e60:	pop	{pc}		; (ldr pc, [sp], #4)

00000e64 <coda_get_product_file_size>:
     e64:	cmp	r0, #0
     e68:	str	r4, [sp, #-8]!
     e6c:	str	lr, [sp, #4]
     e70:	beq	e94 <coda_get_product_file_size+0x30>
     e74:	cmp	r1, #0
     e78:	beq	eb8 <coda_get_product_file_size+0x54>
     e7c:	ldrd	r2, [r0, #8]
     e80:	mov	r0, #0
     e84:	strd	r2, [r1]
     e88:	ldr	r4, [sp]
     e8c:	add	sp, sp, #4
     e90:	pop	{pc}		; (ldr pc, [sp], #4)
     e94:	mvn	r0, #99	; 0x63
     e98:	movw	r2, #0
     e9c:	movt	r2, #0
     ea0:	movw	r1, #0
     ea4:	movt	r1, #0
     ea8:	mov	r3, #876	; 0x36c
     eac:	bl	0 <coda_set_error>
     eb0:	mvn	r0, #0
     eb4:	b	e88 <coda_get_product_file_size+0x24>
     eb8:	mvn	r0, #99	; 0x63
     ebc:	movw	r2, #0
     ec0:	movt	r2, #0
     ec4:	movw	r1, #0
     ec8:	movt	r1, #0
     ecc:	movw	r3, #881	; 0x371
     ed0:	bl	0 <coda_set_error>
     ed4:	mvn	r0, #0
     ed8:	b	e88 <coda_get_product_file_size+0x24>

00000edc <coda_get_product_format>:
     edc:	cmp	r0, #0
     ee0:	str	r4, [sp, #-8]!
     ee4:	str	lr, [sp, #4]
     ee8:	beq	f0c <coda_get_product_format+0x30>
     eec:	cmp	r1, #0
     ef0:	beq	f30 <coda_get_product_format+0x54>
     ef4:	ldr	r3, [r0, #16]
     ef8:	mov	r0, #0
     efc:	str	r3, [r1]
     f00:	ldr	r4, [sp]
     f04:	add	sp, sp, #4
     f08:	pop	{pc}		; (ldr pc, [sp], #4)
     f0c:	mvn	r0, #99	; 0x63
     f10:	movw	r2, #0
     f14:	movt	r2, #0
     f18:	movw	r1, #0
     f1c:	movt	r1, #0
     f20:	mov	r3, #904	; 0x388
     f24:	bl	0 <coda_set_error>
     f28:	mvn	r0, #0
     f2c:	b	f00 <coda_get_product_format+0x24>
     f30:	mvn	r0, #99	; 0x63
     f34:	movw	r2, #0
     f38:	movt	r2, #0
     f3c:	movw	r1, #0
     f40:	movt	r1, #0
     f44:	movw	r3, #909	; 0x38d
     f48:	bl	0 <coda_set_error>
     f4c:	mvn	r0, #0
     f50:	b	f00 <coda_get_product_format+0x24>

00000f54 <coda_get_product_class>:
     f54:	cmp	r0, #0
     f58:	str	r4, [sp, #-8]!
     f5c:	str	lr, [sp, #4]
     f60:	beq	fd0 <coda_get_product_class+0x7c>
     f64:	cmp	r1, #0
     f68:	beq	fac <coda_get_product_class+0x58>
     f6c:	ldr	r3, [r0, #24]
     f70:	cmp	r3, #0
     f74:	beq	f98 <coda_get_product_class+0x44>
     f78:	ldr	r3, [r3, #44]	; 0x2c
     f7c:	mov	r0, #0
     f80:	ldr	r3, [r3, #20]
     f84:	ldr	r3, [r3]
     f88:	str	r3, [r1]
     f8c:	ldr	r4, [sp]
     f90:	add	sp, sp, #4
     f94:	pop	{pc}		; (ldr pc, [sp], #4)
     f98:	ldr	r4, [sp]
     f9c:	add	sp, sp, #4
     fa0:	mov	r0, r3
     fa4:	str	r3, [r1]
     fa8:	pop	{pc}		; (ldr pc, [sp], #4)
     fac:	mvn	r0, #99	; 0x63
     fb0:	movw	r2, #0
     fb4:	movt	r2, #0
     fb8:	movw	r1, #0
     fbc:	movt	r1, #0
     fc0:	movw	r3, #938	; 0x3aa
     fc4:	bl	0 <coda_set_error>
     fc8:	mvn	r0, #0
     fcc:	b	f8c <coda_get_product_class+0x38>
     fd0:	mvn	r0, #99	; 0x63
     fd4:	movw	r2, #0
     fd8:	movt	r2, #0
     fdc:	movw	r1, #0
     fe0:	movt	r1, #0
     fe4:	movw	r3, #933	; 0x3a5
     fe8:	bl	0 <coda_set_error>
     fec:	mvn	r0, #0
     ff0:	b	f8c <coda_get_product_class+0x38>

00000ff4 <coda_get_product_type>:
     ff4:	cmp	r0, #0
     ff8:	str	r4, [sp, #-8]!
     ffc:	str	lr, [sp, #4]
    1000:	beq	1034 <coda_get_product_type+0x40>
    1004:	cmp	r1, #0
    1008:	beq	1058 <coda_get_product_type+0x64>
    100c:	ldr	r3, [r0, #24]
    1010:	cmp	r3, #0
    1014:	ldrne	r3, [r3, #44]	; 0x2c
    1018:	movne	r0, #0
    101c:	moveq	r0, r3
    1020:	ldrne	r3, [r3]
    1024:	str	r3, [r1]
    1028:	ldr	r4, [sp]
    102c:	add	sp, sp, #4
    1030:	pop	{pc}		; (ldr pc, [sp], #4)
    1034:	mvn	r0, #99	; 0x63
    1038:	movw	r2, #0
    103c:	movt	r2, #0
    1040:	movw	r1, #0
    1044:	movt	r1, #0
    1048:	movw	r3, #969	; 0x3c9
    104c:	bl	0 <coda_set_error>
    1050:	mvn	r0, #0
    1054:	b	1028 <coda_get_product_type+0x34>
    1058:	mvn	r0, #99	; 0x63
    105c:	movw	r2, #0
    1060:	movt	r2, #0
    1064:	movw	r1, #0
    1068:	movt	r1, #0
    106c:	movw	r3, #974	; 0x3ce
    1070:	bl	0 <coda_set_error>
    1074:	mvn	r0, #0
    1078:	b	1028 <coda_get_product_type+0x34>

0000107c <coda_get_product_version>:
    107c:	cmp	r0, #0
    1080:	str	r4, [sp, #-8]!
    1084:	str	lr, [sp, #4]
    1088:	beq	10b8 <coda_get_product_version+0x3c>
    108c:	cmp	r1, #0
    1090:	beq	10dc <coda_get_product_version+0x60>
    1094:	ldr	r0, [r0, #24]
    1098:	cmp	r0, #0
    109c:	ldrne	r3, [r0, #4]
    10a0:	mvneq	r3, #0
    10a4:	movne	r0, #0
    10a8:	str	r3, [r1]
    10ac:	ldr	r4, [sp]
    10b0:	add	sp, sp, #4
    10b4:	pop	{pc}		; (ldr pc, [sp], #4)
    10b8:	mvn	r0, #99	; 0x63
    10bc:	movw	r2, #0
    10c0:	movt	r2, #0
    10c4:	movw	r1, #0
    10c8:	movt	r1, #0
    10cc:	movw	r3, #1003	; 0x3eb
    10d0:	bl	0 <coda_set_error>
    10d4:	mvn	r0, #0
    10d8:	b	10ac <coda_get_product_version+0x30>
    10dc:	mvn	r0, #99	; 0x63
    10e0:	movw	r2, #0
    10e4:	movt	r2, #0
    10e8:	movw	r1, #0
    10ec:	movt	r1, #0
    10f0:	mov	r3, #1008	; 0x3f0
    10f4:	bl	0 <coda_set_error>
    10f8:	mvn	r0, #0
    10fc:	b	10ac <coda_get_product_version+0x30>

00001100 <coda_get_product_root_type>:
    1100:	cmp	r0, #0
    1104:	str	r4, [sp, #-8]!
    1108:	str	lr, [sp, #4]
    110c:	beq	1158 <coda_get_product_root_type+0x58>
    1110:	cmp	r1, #0
    1114:	beq	117c <coda_get_product_root_type+0x7c>
    1118:	ldr	r3, [r0, #24]
    111c:	cmp	r3, #0
    1120:	beq	1144 <coda_get_product_root_type+0x44>
    1124:	ldr	r3, [r3, #28]
    1128:	cmp	r3, #0
    112c:	beq	1144 <coda_get_product_root_type+0x44>
    1130:	mov	r0, #0
    1134:	str	r3, [r1]
    1138:	ldr	r4, [sp]
    113c:	add	sp, sp, #4
    1140:	pop	{pc}		; (ldr pc, [sp], #4)
    1144:	ldr	r3, [r0, #20]
    1148:	ldr	r2, [r3]
    114c:	cmp	r2, #99	; 0x63
    1150:	ldrhi	r3, [r3, #4]
    1154:	b	1130 <coda_get_product_root_type+0x30>
    1158:	mvn	r0, #99	; 0x63
    115c:	movw	r2, #0
    1160:	movt	r2, #0
    1164:	movw	r1, #0
    1168:	movt	r1, #0
    116c:	movw	r3, #1043	; 0x413
    1170:	bl	0 <coda_set_error>
    1174:	mvn	r0, #0
    1178:	b	1138 <coda_get_product_root_type+0x38>
    117c:	mvn	r0, #99	; 0x63
    1180:	movw	r2, #0
    1184:	movt	r2, #0
    1188:	movw	r1, #0
    118c:	movt	r1, #0
    1190:	movw	r3, #1048	; 0x418
    1194:	bl	0 <coda_set_error>
    1198:	mvn	r0, #0
    119c:	b	1138 <coda_get_product_root_type+0x38>

000011a0 <coda_get_product_definition_file>:
    11a0:	cmp	r0, #0
    11a4:	str	r4, [sp, #-8]!
    11a8:	str	lr, [sp, #4]
    11ac:	beq	121c <coda_get_product_definition_file+0x7c>
    11b0:	cmp	r1, #0
    11b4:	beq	11f8 <coda_get_product_definition_file+0x58>
    11b8:	ldr	r3, [r0, #24]
    11bc:	cmp	r3, #0
    11c0:	beq	11e4 <coda_get_product_definition_file+0x44>
    11c4:	ldr	r3, [r3, #44]	; 0x2c
    11c8:	mov	r0, #0
    11cc:	ldr	r3, [r3, #20]
    11d0:	ldr	r3, [r3, #8]
    11d4:	str	r3, [r1]
    11d8:	ldr	r4, [sp]
    11dc:	add	sp, sp, #4
    11e0:	pop	{pc}		; (ldr pc, [sp], #4)
    11e4:	ldr	r4, [sp]
    11e8:	add	sp, sp, #4
    11ec:	mov	r0, r3
    11f0:	str	r3, [r1]
    11f4:	pop	{pc}		; (ldr pc, [sp], #4)
    11f8:	mvn	r0, #99	; 0x63
    11fc:	movw	r2, #0
    1200:	movt	r2, #0
    1204:	movw	r1, #0
    1208:	movt	r1, #0
    120c:	movw	r3, #1085	; 0x43d
    1210:	bl	0 <coda_set_error>
    1214:	mvn	r0, #0
    1218:	b	11d8 <coda_get_product_definition_file+0x38>
    121c:	mvn	r0, #99	; 0x63
    1220:	movw	r2, #0
    1224:	movt	r2, #0
    1228:	movw	r1, #0
    122c:	movt	r1, #0
    1230:	movw	r3, #1080	; 0x438
    1234:	bl	0 <coda_set_error>
    1238:	mvn	r0, #0
    123c:	b	11d8 <coda_get_product_definition_file+0x38>

00001240 <coda_get_product_variable_value>:
    1240:	strd	r4, [sp, #-20]!	; 0xffffffec
    1244:	strd	r6, [sp, #8]
    1248:	subs	r6, r0, #0
    124c:	str	lr, [sp, #16]
    1250:	sub	sp, sp, #12
    1254:	beq	132c <coda_get_product_variable_value+0xec>
    1258:	cmp	r1, #0
    125c:	mov	r5, r1
    1260:	beq	1308 <coda_get_product_variable_value+0xc8>
    1264:	mov	r4, r2
    1268:	add	r2, sp, #4
    126c:	mov	r7, r3
    1270:	bl	0 <coda_product_variable_get_size>
    1274:	cmp	r0, #0
    1278:	bne	12ec <coda_get_product_variable_value+0xac>
    127c:	cmp	r4, #0
    1280:	blt	12cc <coda_get_product_variable_value+0x8c>
    1284:	ldr	r3, [sp, #4]
    1288:	cmp	r3, r4
    128c:	ble	12cc <coda_get_product_variable_value+0x8c>
    1290:	mov	r3, sp
    1294:	mov	r2, r4
    1298:	mov	r1, r5
    129c:	mov	r0, r6
    12a0:	bl	0 <coda_product_variable_get_pointer>
    12a4:	cmp	r0, #0
    12a8:	ldreq	r3, [sp]
    12ac:	mvnne	r0, #0
    12b0:	ldrdeq	r2, [r3]
    12b4:	strdeq	r2, [r7]
    12b8:	add	sp, sp, #12
    12bc:	ldrd	r4, [sp]
    12c0:	ldrd	r6, [sp, #8]
    12c4:	add	sp, sp, #16
    12c8:	pop	{pc}		; (ldr pc, [sp], #4)
    12cc:	mvn	r0, #100	; 0x64
    12d0:	mov	r3, r5
    12d4:	mov	r2, r4
    12d8:	movw	r1, #0
    12dc:	movt	r1, #0
    12e0:	bl	0 <coda_set_error>
    12e4:	mvn	r0, #0
    12e8:	b	12b8 <coda_get_product_variable_value+0x78>
    12ec:	mvn	r0, #101	; 0x65
    12f0:	mov	r2, r5
    12f4:	movw	r1, #0
    12f8:	movt	r1, #0
    12fc:	bl	0 <coda_set_error>
    1300:	mvn	r0, #0
    1304:	b	12b8 <coda_get_product_variable_value+0x78>
    1308:	mvn	r0, #99	; 0x63
    130c:	movw	r2, #0
    1310:	movt	r2, #0
    1314:	movw	r1, #0
    1318:	movt	r1, #0
    131c:	movw	r3, #1129	; 0x469
    1320:	bl	0 <coda_set_error>
    1324:	mvn	r0, #0
    1328:	b	12b8 <coda_get_product_variable_value+0x78>
    132c:	mvn	r0, #99	; 0x63
    1330:	movw	r2, #0
    1334:	movt	r2, #0
    1338:	movw	r1, #0
    133c:	movt	r1, #0
    1340:	movw	r3, #1124	; 0x464
    1344:	bl	0 <coda_set_error>
    1348:	mvn	r0, #0
    134c:	b	12b8 <coda_get_product_variable_value+0x78>
