
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_concat/CMakeFiles/monster_test_concat.dir/monster_test_concat.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_buffer_start>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	mov	r2, #0
  14:	mov	r3, #0
  18:	bl	0 <flatcc_builder_start_buffer>
  1c:	ldr	lr, [sp, #4]
  20:	add	sp, sp, #8
  24:	bx	lr

00000028 <flatbuffers_buffer_end>:
  28:	mov	ip, sp
  2c:	sub	sp, sp, #8
  30:	str	ip, [sp]
  34:	str	lr, [sp, #4]
  38:	bl	0 <flatcc_builder_end_buffer>
  3c:	ldr	lr, [sp, #4]
  40:	add	sp, sp, #8
  44:	bx	lr

00000048 <MyGame_Example_Monster_start>:
  48:	mov	ip, sp
  4c:	sub	sp, sp, #8
  50:	str	ip, [sp]
  54:	str	lr, [sp, #4]
  58:	mov	r1, #36	; 0x24
  5c:	bl	0 <flatcc_builder_start_table>
  60:	ldr	lr, [sp, #4]
  64:	add	sp, sp, #8
  68:	bx	lr

0000006c <MyGame_Example_Monster_end>:
  6c:	mov	ip, sp
  70:	sub	sp, sp, #16
  74:	str	ip, [sp]
  78:	str	lr, [sp, #4]
  7c:	str	r4, [sp, #8]
  80:	mov	r4, r0
  84:	ldr	r1, [pc, #64]	; cc <MyGame_Example_Monster_end+0x60>
  88:	mov	r2, #1
  8c:	mov	r0, r4
  90:	bl	0 <flatcc_builder_check_required>
  94:	cmp	r0, #0
  98:	bne	b0 <MyGame_Example_Monster_end+0x44>
  9c:	ldr	r0, [pc, #36]	; c8 <MyGame_Example_Monster_end+0x5c>
  a0:	ldr	r1, [pc, #40]	; d0 <MyGame_Example_Monster_end+0x64>
  a4:	movw	r2, #2398	; 0x95e
  a8:	ldr	r3, [pc, #36]	; d4 <MyGame_Example_Monster_end+0x68>
  ac:	bl	0 <__assert_fail>
  b0:	mov	r0, r4
  b4:	bl	0 <flatcc_builder_end_table>
  b8:	ldr	r4, [sp, #8]
  bc:	ldr	lr, [sp, #4]
  c0:	add	sp, sp, #16
  c4:	bx	lr
  c8:	.word	0x00000005
  cc:	.word	0x0000012e
  d0:	.word	0x000000b1
  d4:	.word	0x00000132

000000d8 <MyGame_Example_Monster_name_add>:
  d8:	mov	ip, sp
  dc:	sub	sp, sp, #16
  e0:	str	ip, [sp]
  e4:	str	lr, [sp, #4]
  e8:	str	r4, [sp, #8]
  ec:	mov	r4, r1
  f0:	cmp	r4, #0
  f4:	beq	114 <MyGame_Example_Monster_name_add+0x3c>
  f8:	mov	r1, #3
  fc:	bl	0 <flatcc_builder_table_add_offset>
 100:	mov	r1, r0
 104:	cmp	r1, #0
 108:	movne	r3, #1
 10c:	moveq	r3, #0
 110:	b	118 <MyGame_Example_Monster_name_add+0x40>
 114:	mov	r3, #0
 118:	cmp	r3, #0
 11c:	beq	12c <MyGame_Example_Monster_name_add+0x54>
 120:	str	r4, [r1]
 124:	mov	r0, #0
 128:	b	130 <MyGame_Example_Monster_name_add+0x58>
 12c:	mvn	r0, #0
 130:	ldr	r4, [sp, #8]
 134:	ldr	lr, [sp, #4]
 138:	add	sp, sp, #16
 13c:	bx	lr

00000140 <MyGame_Example_Monster_name_create_str>:
 140:	mov	ip, sp
 144:	sub	sp, sp, #16
 148:	str	ip, [sp]
 14c:	str	lr, [sp, #4]
 150:	str	r4, [sp, #8]
 154:	mov	r4, r0
 158:	mov	r0, r4
 15c:	bl	0 <flatcc_builder_create_string_str>
 160:	mov	r1, r0
 164:	mov	r0, r4
 168:	bl	d8 <MyGame_Example_Monster_name_add>
 16c:	ldr	r4, [sp, #8]
 170:	ldr	lr, [sp, #4]
 174:	add	sp, sp, #16
 178:	bx	lr

0000017c <MyGame_Example_Monster_start_as_root>:
 17c:	mov	ip, sp
 180:	sub	sp, sp, #16
 184:	str	ip, [sp]
 188:	str	lr, [sp, #4]
 18c:	str	r4, [sp, #8]
 190:	mov	r4, r0
 194:	ldr	r1, [pc, #44]	; 1c8 <MyGame_Example_Monster_start_as_root+0x4c>
 198:	mov	r0, r4
 19c:	bl	0 <flatbuffers_buffer_start>
 1a0:	cmp	r0, #0
 1a4:	bne	1b4 <MyGame_Example_Monster_start_as_root+0x38>
 1a8:	mov	r0, r4
 1ac:	bl	48 <MyGame_Example_Monster_start>
 1b0:	b	1b8 <MyGame_Example_Monster_start_as_root+0x3c>
 1b4:	mvn	r0, #0
 1b8:	ldr	r4, [sp, #8]
 1bc:	ldr	lr, [sp, #4]
 1c0:	add	sp, sp, #16
 1c4:	bx	lr
 1c8:	.word	0x00000000

000001cc <MyGame_Example_Monster_end_as_root>:
 1cc:	mov	ip, sp
 1d0:	sub	sp, sp, #16
 1d4:	str	ip, [sp]
 1d8:	str	lr, [sp, #4]
 1dc:	str	r4, [sp, #8]
 1e0:	mov	r4, r0
 1e4:	mov	r0, r4
 1e8:	bl	6c <MyGame_Example_Monster_end>
 1ec:	mov	r1, r0
 1f0:	mov	r0, r4
 1f4:	bl	28 <flatbuffers_buffer_end>
 1f8:	ldr	r4, [sp, #8]
 1fc:	ldr	lr, [sp, #4]
 200:	add	sp, sp, #16
 204:	bx	lr

00000208 <MyGame_Example_Any_union_verifier>:
 208:	mov	ip, sp
 20c:	sub	sp, sp, #8
 210:	str	ip, [sp]
 214:	str	lr, [sp, #4]
 218:	ldrb	r2, [r0, #12]
 21c:	cmp	r2, #3
 220:	bcs	24c <MyGame_Example_Any_union_verifier+0x44>
 224:	cmp	r2, #1
 228:	beq	240 <MyGame_Example_Any_union_verifier+0x38>
 22c:	cmp	r2, #2
 230:	bne	268 <MyGame_Example_Any_union_verifier+0x60>
 234:	ldr	r1, [pc, #80]	; 28c <MyGame_Example_Any_union_verifier+0x84>
 238:	bl	0 <flatcc_verify_union_table>
 23c:	b	278 <MyGame_Example_Any_union_verifier+0x70>
 240:	ldr	r1, [pc, #60]	; 284 <MyGame_Example_Any_union_verifier+0x7c>
 244:	bl	0 <flatcc_verify_union_table>
 248:	b	278 <MyGame_Example_Any_union_verifier+0x70>
 24c:	cmp	r2, #3
 250:	beq	270 <MyGame_Example_Any_union_verifier+0x68>
 254:	cmp	r2, #4
 258:	bne	268 <MyGame_Example_Any_union_verifier+0x60>
 25c:	ldr	r1, [pc, #44]	; 290 <MyGame_Example_Any_union_verifier+0x88>
 260:	bl	0 <flatcc_verify_union_table>
 264:	b	278 <MyGame_Example_Any_union_verifier+0x70>
 268:	mov	r0, #0
 26c:	b	278 <MyGame_Example_Any_union_verifier+0x70>
 270:	ldr	r1, [pc, #16]	; 288 <MyGame_Example_Any_union_verifier+0x80>
 274:	bl	0 <flatcc_verify_union_table>
 278:	ldr	lr, [sp, #4]
 27c:	add	sp, sp, #8
 280:	bx	lr
	...

00000294 <Fantasy_Character_union_verifier>:
 294:	mov	ip, sp
 298:	sub	sp, sp, #8
 29c:	str	ip, [sp]
 2a0:	str	lr, [sp, #4]
 2a4:	ldrb	ip, [r0, #12]
 2a8:	cmp	ip, #10
 2ac:	bcs	2f4 <Fantasy_Character_union_verifier+0x60>
 2b0:	cmp	ip, #2
 2b4:	beq	2e8 <Fantasy_Character_union_verifier+0x54>
 2b8:	cmp	ip, #8
 2bc:	beq	2d8 <Fantasy_Character_union_verifier+0x44>
 2c0:	cmp	ip, #9
 2c4:	bne	314 <Fantasy_Character_union_verifier+0x80>
 2c8:	mov	r1, #4
 2cc:	mov	r2, #4
 2d0:	bl	0 <flatcc_verify_union_struct>
 2d4:	b	330 <Fantasy_Character_union_verifier+0x9c>
 2d8:	mov	r1, #2
 2dc:	mov	r2, #2
 2e0:	bl	0 <flatcc_verify_union_struct>
 2e4:	b	330 <Fantasy_Character_union_verifier+0x9c>
 2e8:	ldr	r1, [pc, #76]	; 33c <Fantasy_Character_union_verifier+0xa8>
 2ec:	bl	0 <flatcc_verify_union_table>
 2f0:	b	330 <Fantasy_Character_union_verifier+0x9c>
 2f4:	cmp	ip, #10
 2f8:	beq	324 <Fantasy_Character_union_verifier+0x90>
 2fc:	cmp	ip, #11
 300:	beq	31c <Fantasy_Character_union_verifier+0x88>
 304:	cmp	ip, #255	; 0xff
 308:	bne	314 <Fantasy_Character_union_verifier+0x80>
 30c:	bl	0 <flatcc_verify_union_string>
 310:	b	330 <Fantasy_Character_union_verifier+0x9c>
 314:	mov	r0, #0
 318:	b	330 <Fantasy_Character_union_verifier+0x9c>
 31c:	bl	0 <flatcc_verify_union_string>
 320:	b	330 <Fantasy_Character_union_verifier+0x9c>
 324:	mov	r1, #4
 328:	mov	r2, #4
 32c:	bl	0 <flatcc_verify_union_struct>
 330:	ldr	lr, [sp, #4]
 334:	add	sp, sp, #8
 338:	bx	lr
 33c:	.word	0x00000000

00000340 <MyGame_InParentNamespace_verify_table>:
 340:	mov	ip, sp
 344:	sub	sp, sp, #8
 348:	str	ip, [sp]
 34c:	str	lr, [sp, #4]
 350:	mov	r0, #0
 354:	ldr	lr, [sp, #4]
 358:	add	sp, sp, #8
 35c:	bx	lr

00000360 <MyGame_Example2_Monster_verify_table>:
 360:	mov	ip, sp
 364:	sub	sp, sp, #8
 368:	str	ip, [sp]
 36c:	str	lr, [sp, #4]
 370:	mov	r0, #0
 374:	ldr	lr, [sp, #4]
 378:	add	sp, sp, #8
 37c:	bx	lr

00000380 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
 380:	mov	ip, sp
 384:	sub	sp, sp, #16
 388:	str	ip, [sp]
 38c:	str	lr, [sp, #4]
 390:	str	r4, [sp, #8]
 394:	mov	r4, r0
 398:	mov	r1, #0
 39c:	mov	r2, #1
 3a0:	mov	r3, #1
 3a4:	mov	r0, r4
 3a8:	bl	0 <flatcc_verify_field>
 3ac:	cmp	r0, #0
 3b0:	bne	40c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x8c>
 3b4:	mov	r1, #1
 3b8:	mov	r2, #1
 3bc:	mov	r3, #1
 3c0:	mov	r0, r4
 3c4:	bl	0 <flatcc_verify_field>
 3c8:	cmp	r0, #0
 3cc:	bne	40c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x8c>
 3d0:	mov	r1, #2
 3d4:	mov	r2, #1
 3d8:	mov	r3, #1
 3dc:	mov	r0, r4
 3e0:	bl	0 <flatcc_verify_field>
 3e4:	cmp	r0, #0
 3e8:	bne	40c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x8c>
 3ec:	mov	r1, #3
 3f0:	mov	r2, #1
 3f4:	mov	r3, #1
 3f8:	mov	r0, r4
 3fc:	bl	0 <flatcc_verify_field>
 400:	cmp	r0, #0
 404:	bne	40c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x8c>
 408:	mov	r0, #0
 40c:	ldr	r4, [sp, #8]
 410:	ldr	lr, [sp, #4]
 414:	add	sp, sp, #16
 418:	bx	lr

0000041c <MyGame_Example_Stat_verify_table>:
 41c:	mov	ip, sp
 420:	sub	sp, sp, #16
 424:	str	ip, [sp]
 428:	str	lr, [sp, #4]
 42c:	str	r4, [sp, #8]
 430:	mov	r4, r0
 434:	mov	r1, #0
 438:	mov	r2, #0
 43c:	mov	r0, r4
 440:	bl	0 <flatcc_verify_string_field>
 444:	cmp	r0, #0
 448:	bne	488 <MyGame_Example_Stat_verify_table+0x6c>
 44c:	mov	r1, #1
 450:	mov	r2, #8
 454:	mov	r3, #8
 458:	mov	r0, r4
 45c:	bl	0 <flatcc_verify_field>
 460:	cmp	r0, #0
 464:	bne	488 <MyGame_Example_Stat_verify_table+0x6c>
 468:	mov	r1, #2
 46c:	mov	r2, #2
 470:	mov	r3, #2
 474:	mov	r0, r4
 478:	bl	0 <flatcc_verify_field>
 47c:	cmp	r0, #0
 480:	bne	488 <MyGame_Example_Stat_verify_table+0x6c>
 484:	mov	r0, #0
 488:	ldr	r4, [sp, #8]
 48c:	ldr	lr, [sp, #4]
 490:	add	sp, sp, #16
 494:	bx	lr

00000498 <MyGame_Example_Alt_verify_table>:
 498:	mov	ip, sp
 49c:	sub	sp, sp, #16
 4a0:	str	ip, [sp]
 4a4:	str	lr, [sp, #4]
 4a8:	str	r4, [sp, #8]
 4ac:	mov	r4, r0
 4b0:	mov	r1, #0
 4b4:	mov	r2, #0
 4b8:	ldr	r3, [pc, #88]	; 518 <MyGame_Example_Alt_verify_table+0x80>
 4bc:	mov	r0, r4
 4c0:	bl	0 <flatcc_verify_table_field>
 4c4:	cmp	r0, #0
 4c8:	bne	508 <MyGame_Example_Alt_verify_table+0x70>
 4cc:	mov	r1, #1
 4d0:	mov	r2, #0
 4d4:	ldr	r3, [pc, #68]	; 520 <MyGame_Example_Alt_verify_table+0x88>
 4d8:	mov	r0, r4
 4dc:	bl	0 <flatcc_verify_table_field>
 4e0:	cmp	r0, #0
 4e4:	bne	508 <MyGame_Example_Alt_verify_table+0x70>
 4e8:	mov	r1, #3
 4ec:	mov	r2, #0
 4f0:	ldr	r3, [pc, #36]	; 51c <MyGame_Example_Alt_verify_table+0x84>
 4f4:	mov	r0, r4
 4f8:	bl	0 <flatcc_verify_union_vector_field>
 4fc:	cmp	r0, #0
 500:	bne	508 <MyGame_Example_Alt_verify_table+0x70>
 504:	mov	r0, #0
 508:	ldr	r4, [sp, #8]
 50c:	ldr	lr, [sp, #4]
 510:	add	sp, sp, #16
 514:	bx	lr
	...

00000524 <MyGame_Example_TestJSONPrefix_verify_table>:
 524:	mov	ip, sp
 528:	sub	sp, sp, #16
 52c:	str	ip, [sp]
 530:	str	lr, [sp, #4]
 534:	str	r4, [sp, #8]
 538:	mov	r4, r0
 53c:	mov	r1, #0
 540:	mov	r2, #0
 544:	ldr	r3, [pc, #88]	; 5a4 <MyGame_Example_TestJSONPrefix_verify_table+0x80>
 548:	mov	r0, r4
 54c:	bl	0 <flatcc_verify_table_field>
 550:	cmp	r0, #0
 554:	bne	594 <MyGame_Example_TestJSONPrefix_verify_table+0x70>
 558:	mov	r1, #1
 55c:	mov	r2, #0
 560:	ldr	r3, [pc, #68]	; 5ac <MyGame_Example_TestJSONPrefix_verify_table+0x88>
 564:	mov	r0, r4
 568:	bl	0 <flatcc_verify_table_field>
 56c:	cmp	r0, #0
 570:	bne	594 <MyGame_Example_TestJSONPrefix_verify_table+0x70>
 574:	mov	r1, #2
 578:	mov	r2, #0
 57c:	ldr	r3, [pc, #36]	; 5a8 <MyGame_Example_TestJSONPrefix_verify_table+0x84>
 580:	mov	r0, r4
 584:	bl	0 <flatcc_verify_table_field>
 588:	cmp	r0, #0
 58c:	bne	594 <MyGame_Example_TestJSONPrefix_verify_table+0x70>
 590:	mov	r0, #0
 594:	ldr	r4, [sp, #8]
 598:	ldr	lr, [sp, #4]
 59c:	add	sp, sp, #16
 5a0:	bx	lr
	...

000005b0 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
 5b0:	mov	ip, sp
 5b4:	sub	sp, sp, #16
 5b8:	str	ip, [sp]
 5bc:	str	lr, [sp, #4]
 5c0:	str	r4, [sp, #8]
 5c4:	mov	r4, r0
 5c8:	mov	r1, #0
 5cc:	mov	r2, #0
 5d0:	mov	r0, r4
 5d4:	bl	0 <flatcc_verify_string_field>
 5d8:	cmp	r0, #0
 5dc:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 5e0:	mov	r1, #1
 5e4:	mov	r2, #4
 5e8:	mov	r3, #4
 5ec:	mov	r0, r4
 5f0:	bl	0 <flatcc_verify_field>
 5f4:	cmp	r0, #0
 5f8:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 5fc:	mov	r1, #2
 600:	mov	r2, #0
 604:	mov	r0, r4
 608:	bl	0 <flatcc_verify_string_field>
 60c:	cmp	r0, #0
 610:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 614:	mov	r1, #3
 618:	mov	r2, #8
 61c:	mov	r3, #8
 620:	mov	r0, r4
 624:	bl	0 <flatcc_verify_field>
 628:	cmp	r0, #0
 62c:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 630:	mov	r1, #4
 634:	mov	r2, #0
 638:	mov	r0, r4
 63c:	bl	0 <flatcc_verify_string_field>
 640:	cmp	r0, #0
 644:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 648:	mov	r1, #5
 64c:	mov	r2, #8
 650:	mov	r3, #8
 654:	mov	r0, r4
 658:	bl	0 <flatcc_verify_field>
 65c:	cmp	r0, #0
 660:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 664:	mov	r1, #6
 668:	mov	r2, #4
 66c:	mov	r3, #4
 670:	mov	r0, r4
 674:	bl	0 <flatcc_verify_field>
 678:	cmp	r0, #0
 67c:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 680:	mov	r1, #7
 684:	mov	r2, #8
 688:	mov	r3, #8
 68c:	mov	r0, r4
 690:	bl	0 <flatcc_verify_field>
 694:	cmp	r0, #0
 698:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 69c:	mov	r1, #8
 6a0:	mov	r2, #4
 6a4:	mov	r3, #4
 6a8:	mov	r0, r4
 6ac:	bl	0 <flatcc_verify_field>
 6b0:	cmp	r0, #0
 6b4:	bne	6bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
 6b8:	mov	r0, #0
 6bc:	ldr	r4, [sp, #8]
 6c0:	ldr	lr, [sp, #4]
 6c4:	add	sp, sp, #16
 6c8:	bx	lr

000006cc <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
 6cc:	mov	ip, sp
 6d0:	sub	sp, sp, #16
 6d4:	str	ip, [sp]
 6d8:	str	lr, [sp, #4]
 6dc:	str	r4, [sp, #8]
 6e0:	mov	r4, r0
 6e4:	mov	r1, #0
 6e8:	mov	r2, #8
 6ec:	mov	r3, #8
 6f0:	mov	r0, r4
 6f4:	bl	0 <flatcc_verify_field>
 6f8:	cmp	r0, #0
 6fc:	bne	720 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x54>
 700:	mov	r1, #1
 704:	mov	r2, #4
 708:	mov	r3, #4
 70c:	mov	r0, r4
 710:	bl	0 <flatcc_verify_field>
 714:	cmp	r0, #0
 718:	bne	720 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x54>
 71c:	mov	r0, #0
 720:	ldr	r4, [sp, #8]
 724:	ldr	lr, [sp, #4]
 728:	add	sp, sp, #16
 72c:	bx	lr

00000730 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
 730:	mov	ip, sp
 734:	sub	sp, sp, #16
 738:	str	ip, [sp]
 73c:	str	lr, [sp, #4]
 740:	str	r4, [sp, #8]
 744:	mov	r4, r0
 748:	mov	r1, #0
 74c:	mov	r2, #8
 750:	mov	r3, #8
 754:	mov	r0, r4
 758:	bl	0 <flatcc_verify_field>
 75c:	cmp	r0, #0
 760:	bne	784 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x54>
 764:	mov	r1, #1
 768:	mov	r2, #4
 76c:	mov	r3, #4
 770:	mov	r0, r4
 774:	bl	0 <flatcc_verify_field>
 778:	cmp	r0, #0
 77c:	bne	784 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x54>
 780:	mov	r0, #0
 784:	ldr	r4, [sp, #8]
 788:	ldr	lr, [sp, #4]
 78c:	add	sp, sp, #16
 790:	bx	lr

00000794 <MyGame_Example_TestBase64_verify_table>:
 794:	mov	ip, sp
 798:	sub	sp, sp, #24
 79c:	str	ip, [sp, #8]
 7a0:	str	lr, [sp, #12]
 7a4:	str	r4, [sp, #16]
 7a8:	str	r5, [sp, #20]
 7ac:	mov	r4, r0
 7b0:	mov	r1, #0
 7b4:	mov	r2, #0
 7b8:	mov	r3, #1
 7bc:	mov	r0, #1
 7c0:	mvn	ip, #0
 7c4:	str	ip, [sp, #4]
 7c8:	str	r0, [sp]
 7cc:	mov	r0, r4
 7d0:	bl	0 <flatcc_verify_vector_field>
 7d4:	cmp	r0, #0
 7d8:	bne	838 <MyGame_Example_TestBase64_verify_table+0xa4>
 7dc:	mov	r1, #1
 7e0:	mov	r2, #0
 7e4:	mov	r3, #1
 7e8:	mov	r5, #1
 7ec:	mvn	r0, #0
 7f0:	str	r0, [sp, #4]
 7f4:	str	r5, [sp]
 7f8:	mov	r0, r4
 7fc:	bl	0 <flatcc_verify_vector_field>
 800:	cmp	r0, #0
 804:	bne	838 <MyGame_Example_TestBase64_verify_table+0xa4>
 808:	mov	r1, #2
 80c:	mov	r2, #0
 810:	mov	r3, #0
 814:	mov	ip, #1
 818:	ldr	r0, [pc, #44]	; 84c <MyGame_Example_TestBase64_verify_table+0xb8>
 81c:	str	r0, [sp, #4]
 820:	str	ip, [sp]
 824:	mov	r0, r4
 828:	bl	0 <flatcc_verify_table_as_nested_root>
 82c:	cmp	r0, #0
 830:	bne	838 <MyGame_Example_TestBase64_verify_table+0xa4>
 834:	mov	r0, #0
 838:	ldr	r4, [sp, #16]
 83c:	ldr	r5, [sp, #20]
 840:	ldr	lr, [sp, #12]
 844:	add	sp, sp, #24
 848:	bx	lr
 84c:	.word	0x00000000

00000850 <MyGame_Example_Monster_verify_table>:
 850:	mov	ip, sp
 854:	sub	sp, sp, #24
 858:	str	ip, [sp, #8]
 85c:	str	lr, [sp, #12]
 860:	str	r4, [sp, #16]
 864:	str	r5, [sp, #20]
 868:	mov	r4, r0
 86c:	mov	r1, #0
 870:	mov	r2, #32
 874:	mov	r3, #16
 878:	mov	r0, r4
 87c:	bl	0 <flatcc_verify_field>
 880:	cmp	r0, #0
 884:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 888:	mov	r1, #2
 88c:	mov	r2, #2
 890:	mov	r3, #2
 894:	mov	r0, r4
 898:	bl	0 <flatcc_verify_field>
 89c:	cmp	r0, #0
 8a0:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 8a4:	mov	r1, #1
 8a8:	mov	r2, #2
 8ac:	mov	r3, #2
 8b0:	mov	r0, r4
 8b4:	bl	0 <flatcc_verify_field>
 8b8:	cmp	r0, #0
 8bc:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 8c0:	mov	r1, #3
 8c4:	mov	r2, #1
 8c8:	mov	r0, r4
 8cc:	bl	0 <flatcc_verify_string_field>
 8d0:	cmp	r0, #0
 8d4:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 8d8:	mov	r1, #6
 8dc:	mov	r2, #1
 8e0:	mov	r3, #1
 8e4:	mov	r0, r4
 8e8:	bl	0 <flatcc_verify_field>
 8ec:	cmp	r0, #0
 8f0:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 8f4:	mov	r1, #5
 8f8:	mov	r2, #0
 8fc:	mov	r3, #1
 900:	mov	r0, #1
 904:	mvn	r5, #0
 908:	str	r5, [sp, #4]
 90c:	str	r0, [sp]
 910:	mov	r0, r4
 914:	bl	0 <flatcc_verify_vector_field>
 918:	cmp	r0, #0
 91c:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 920:	mov	r1, #11
 924:	mov	r2, #0
 928:	ldr	r3, [pc, #912]	; cc0 <MyGame_Example_Monster_verify_table+0x470>
 92c:	mov	r0, r4
 930:	bl	0 <flatcc_verify_table_vector_field>
 934:	cmp	r0, #0
 938:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 93c:	mov	r1, #10
 940:	mov	r2, #0
 944:	mov	r0, r4
 948:	bl	0 <flatcc_verify_string_vector_field>
 94c:	cmp	r0, #0
 950:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 954:	mov	r1, #28
 958:	mov	r2, #0
 95c:	mov	r0, r4
 960:	bl	0 <flatcc_verify_string_vector_field>
 964:	cmp	r0, #0
 968:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 96c:	mov	r1, #24
 970:	mov	r2, #0
 974:	mov	r3, #1
 978:	mov	r5, #1
 97c:	mvn	r0, #0
 980:	str	r0, [sp, #4]
 984:	str	r5, [sp]
 988:	mov	r0, r4
 98c:	bl	0 <flatcc_verify_vector_field>
 990:	cmp	r0, #0
 994:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 998:	mov	r1, #29
 99c:	mov	r2, #0
 9a0:	mov	r3, #8
 9a4:	mov	r0, #4
 9a8:	mvn	ip, #-536870912	; 0xe0000000
 9ac:	str	ip, [sp, #4]
 9b0:	str	r0, [sp]
 9b4:	mov	r0, r4
 9b8:	bl	0 <flatcc_verify_vector_field>
 9bc:	cmp	r0, #0
 9c0:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 9c4:	mov	r1, #12
 9c8:	mov	r2, #0
 9cc:	ldr	r3, [pc, #748]	; cc0 <MyGame_Example_Monster_verify_table+0x470>
 9d0:	mov	r0, r4
 9d4:	bl	0 <flatcc_verify_table_field>
 9d8:	cmp	r0, #0
 9dc:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 9e0:	mov	r1, #8
 9e4:	mov	r2, #0
 9e8:	ldr	r3, [pc, #728]	; cc8 <MyGame_Example_Monster_verify_table+0x478>
 9ec:	mov	r0, r4
 9f0:	bl	0 <flatcc_verify_union_field>
 9f4:	cmp	r0, #0
 9f8:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 9fc:	mov	r1, #9
 a00:	mov	r2, #0
 a04:	mov	r3, #4
 a08:	mov	r0, #2
 a0c:	mvn	ip, #-1073741824	; 0xc0000000
 a10:	str	ip, [sp, #4]
 a14:	str	r0, [sp]
 a18:	mov	r0, r4
 a1c:	bl	0 <flatcc_verify_vector_field>
 a20:	cmp	r0, #0
 a24:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 a28:	mov	r1, #31
 a2c:	mov	r2, #0
 a30:	mov	r3, #4
 a34:	mov	r0, #2
 a38:	mvn	r5, #-1073741824	; 0xc0000000
 a3c:	str	r5, [sp, #4]
 a40:	str	r0, [sp]
 a44:	mov	r0, r4
 a48:	bl	0 <flatcc_verify_vector_field>
 a4c:	cmp	r0, #0
 a50:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 a54:	mov	r1, #13
 a58:	mov	r2, #0
 a5c:	mov	r3, #0
 a60:	mov	ip, #1
 a64:	ldr	r0, [pc, #596]	; cc0 <MyGame_Example_Monster_verify_table+0x470>
 a68:	str	r0, [sp, #4]
 a6c:	str	ip, [sp]
 a70:	mov	r0, r4
 a74:	bl	0 <flatcc_verify_table_as_nested_root>
 a78:	cmp	r0, #0
 a7c:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 a80:	mov	r1, #14
 a84:	mov	r2, #0
 a88:	ldr	r3, [pc, #572]	; ccc <MyGame_Example_Monster_verify_table+0x47c>
 a8c:	mov	r0, r4
 a90:	bl	0 <flatcc_verify_table_field>
 a94:	cmp	r0, #0
 a98:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 a9c:	mov	r1, #15
 aa0:	mov	r2, #1
 aa4:	mov	r3, #1
 aa8:	mov	r0, r4
 aac:	bl	0 <flatcc_verify_field>
 ab0:	cmp	r0, #0
 ab4:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 ab8:	mov	r1, #16
 abc:	mov	r2, #4
 ac0:	mov	r3, #4
 ac4:	mov	r0, r4
 ac8:	bl	0 <flatcc_verify_field>
 acc:	cmp	r0, #0
 ad0:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 ad4:	mov	r1, #17
 ad8:	mov	r2, #4
 adc:	mov	r3, #4
 ae0:	mov	r0, r4
 ae4:	bl	0 <flatcc_verify_field>
 ae8:	cmp	r0, #0
 aec:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 af0:	mov	r1, #18
 af4:	mov	r2, #8
 af8:	mov	r3, #8
 afc:	mov	r0, r4
 b00:	bl	0 <flatcc_verify_field>
 b04:	cmp	r0, #0
 b08:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 b0c:	mov	r1, #19
 b10:	mov	r2, #8
 b14:	mov	r3, #8
 b18:	mov	r0, r4
 b1c:	bl	0 <flatcc_verify_field>
 b20:	cmp	r0, #0
 b24:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 b28:	mov	r1, #20
 b2c:	mov	r2, #4
 b30:	mov	r3, #4
 b34:	mov	r0, r4
 b38:	bl	0 <flatcc_verify_field>
 b3c:	cmp	r0, #0
 b40:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 b44:	mov	r1, #21
 b48:	mov	r2, #4
 b4c:	mov	r3, #4
 b50:	mov	r0, r4
 b54:	bl	0 <flatcc_verify_field>
 b58:	cmp	r0, #0
 b5c:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 b60:	mov	r1, #22
 b64:	mov	r2, #8
 b68:	mov	r3, #8
 b6c:	mov	r0, r4
 b70:	bl	0 <flatcc_verify_field>
 b74:	cmp	r0, #0
 b78:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 b7c:	mov	r1, #23
 b80:	mov	r2, #8
 b84:	mov	r3, #8
 b88:	mov	r0, r4
 b8c:	bl	0 <flatcc_verify_field>
 b90:	cmp	r0, #0
 b94:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 b98:	mov	r1, #25
 b9c:	mov	r2, #4
 ba0:	mov	r3, #4
 ba4:	mov	r0, r4
 ba8:	bl	0 <flatcc_verify_field>
 bac:	cmp	r0, #0
 bb0:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 bb4:	mov	r1, #26
 bb8:	mov	r2, #4
 bbc:	mov	r3, #4
 bc0:	mov	r0, r4
 bc4:	bl	0 <flatcc_verify_field>
 bc8:	cmp	r0, #0
 bcc:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 bd0:	mov	r1, #27
 bd4:	mov	r2, #4
 bd8:	mov	r3, #4
 bdc:	mov	r0, r4
 be0:	bl	0 <flatcc_verify_field>
 be4:	cmp	r0, #0
 be8:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 bec:	mov	r1, #30
 bf0:	mov	r2, #0
 bf4:	mov	r3, #1
 bf8:	mov	r0, #1
 bfc:	mvn	ip, #0
 c00:	str	ip, [sp, #4]
 c04:	str	r0, [sp]
 c08:	mov	r0, r4
 c0c:	bl	0 <flatcc_verify_vector_field>
 c10:	cmp	r0, #0
 c14:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 c18:	mov	r1, #32
 c1c:	mov	r2, #0
 c20:	mov	r3, #8
 c24:	mov	r0, #8
 c28:	mvn	ip, #-536870912	; 0xe0000000
 c2c:	str	ip, [sp, #4]
 c30:	str	r0, [sp]
 c34:	mov	r0, r4
 c38:	bl	0 <flatcc_verify_vector_field>
 c3c:	cmp	r0, #0
 c40:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 c44:	mov	r1, #33	; 0x21
 c48:	mov	r2, #0
 c4c:	mov	r3, #8
 c50:	mov	r5, #8
 c54:	mvn	r0, #-536870912	; 0xe0000000
 c58:	str	r0, [sp, #4]
 c5c:	str	r5, [sp]
 c60:	mov	r0, r4
 c64:	bl	0 <flatcc_verify_vector_field>
 c68:	cmp	r0, #0
 c6c:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 c70:	mov	r1, #34	; 0x22
 c74:	mov	r2, #0
 c78:	ldr	r3, [pc, #80]	; cd0 <MyGame_Example_Monster_verify_table+0x480>
 c7c:	mov	r0, r4
 c80:	bl	0 <flatcc_verify_table_field>
 c84:	cmp	r0, #0
 c88:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 c8c:	mov	r1, #35	; 0x23
 c90:	mov	r2, #0
 c94:	ldr	r3, [pc, #40]	; cc4 <MyGame_Example_Monster_verify_table+0x474>
 c98:	mov	r0, r4
 c9c:	bl	0 <flatcc_verify_table_field>
 ca0:	cmp	r0, #0
 ca4:	bne	cac <MyGame_Example_Monster_verify_table+0x45c>
 ca8:	mov	r0, #0
 cac:	ldr	r4, [sp, #16]
 cb0:	ldr	r5, [sp, #20]
 cb4:	ldr	lr, [sp, #12]
 cb8:	add	sp, sp, #24
 cbc:	bx	lr
	...

00000cd4 <MyGame_Example_Monster_verify_as_root>:
 cd4:	mov	ip, sp
 cd8:	sub	sp, sp, #8
 cdc:	str	ip, [sp]
 ce0:	str	lr, [sp, #4]
 ce4:	ldr	r2, [pc, #20]	; d00 <MyGame_Example_Monster_verify_as_root+0x2c>
 ce8:	ldr	r3, [pc, #12]	; cfc <MyGame_Example_Monster_verify_as_root+0x28>
 cec:	bl	0 <flatcc_verify_table_as_root>
 cf0:	ldr	lr, [sp, #4]
 cf4:	add	sp, sp, #8
 cf8:	bx	lr
	...

00000d04 <Fantasy_Attacker_verify_table>:
 d04:	mov	ip, sp
 d08:	sub	sp, sp, #8
 d0c:	str	ip, [sp]
 d10:	str	lr, [sp, #4]
 d14:	mov	r1, #0
 d18:	mov	r2, #4
 d1c:	mov	r3, #4
 d20:	bl	0 <flatcc_verify_field>
 d24:	cmp	r0, #0
 d28:	bne	d30 <Fantasy_Attacker_verify_table+0x2c>
 d2c:	mov	r0, #0
 d30:	ldr	lr, [sp, #4]
 d34:	add	sp, sp, #8
 d38:	bx	lr

00000d3c <Fantasy_Movie_verify_table>:
 d3c:	mov	ip, sp
 d40:	sub	sp, sp, #16
 d44:	str	ip, [sp]
 d48:	str	lr, [sp, #4]
 d4c:	str	r4, [sp, #8]
 d50:	mov	r4, r0
 d54:	mov	r1, #1
 d58:	mov	r2, #0
 d5c:	ldr	r3, [pc, #144]	; df4 <Fantasy_Movie_verify_table+0xb8>
 d60:	mov	r0, r4
 d64:	bl	0 <flatcc_verify_union_field>
 d68:	cmp	r0, #0
 d6c:	bne	de4 <Fantasy_Movie_verify_table+0xa8>
 d70:	mov	r1, #3
 d74:	mov	r2, #0
 d78:	ldr	r3, [pc, #116]	; df4 <Fantasy_Movie_verify_table+0xb8>
 d7c:	mov	r0, r4
 d80:	bl	0 <flatcc_verify_union_field>
 d84:	cmp	r0, #0
 d88:	bne	de4 <Fantasy_Movie_verify_table+0xa8>
 d8c:	mov	r1, #5
 d90:	mov	r2, #0
 d94:	ldr	r3, [pc, #88]	; df4 <Fantasy_Movie_verify_table+0xb8>
 d98:	mov	r0, r4
 d9c:	bl	0 <flatcc_verify_union_field>
 da0:	cmp	r0, #0
 da4:	bne	de4 <Fantasy_Movie_verify_table+0xa8>
 da8:	mov	r1, #7
 dac:	mov	r2, #0
 db0:	ldr	r3, [pc, #60]	; df4 <Fantasy_Movie_verify_table+0xb8>
 db4:	mov	r0, r4
 db8:	bl	0 <flatcc_verify_union_field>
 dbc:	cmp	r0, #0
 dc0:	bne	de4 <Fantasy_Movie_verify_table+0xa8>
 dc4:	mov	r1, #9
 dc8:	mov	r2, #0
 dcc:	ldr	r3, [pc, #32]	; df4 <Fantasy_Movie_verify_table+0xb8>
 dd0:	mov	r0, r4
 dd4:	bl	0 <flatcc_verify_union_vector_field>
 dd8:	cmp	r0, #0
 ddc:	bne	de4 <Fantasy_Movie_verify_table+0xa8>
 de0:	mov	r0, #0
 de4:	ldr	r4, [sp, #8]
 de8:	ldr	lr, [sp, #4]
 dec:	add	sp, sp, #16
 df0:	bx	lr
 df4:	.word	0x00000000

00000df8 <main>:
 df8:	mov	ip, sp
 dfc:	sub	sp, sp, #256	; 0x100
 e00:	str	ip, [sp]
 e04:	str	lr, [sp, #4]
 e08:	str	r4, [sp, #8]
 e0c:	str	r5, [sp, #12]
 e10:	add	r4, sp, #24
 e14:	mov	r0, r4
 e18:	bl	0 <flatcc_builder_init>
 e1c:	mov	r0, r4
 e20:	bl	17c <MyGame_Example_Monster_start_as_root>
 e24:	ldr	r1, [pc, #68]	; e70 <main+0x78>
 e28:	mov	r0, r4
 e2c:	bl	140 <MyGame_Example_Monster_name_create_str>
 e30:	mov	r0, r4
 e34:	bl	1cc <MyGame_Example_Monster_end_as_root>
 e38:	add	r1, sp, #16
 e3c:	mov	r0, r4
 e40:	bl	0 <flatcc_builder_get_direct_buffer>
 e44:	ldr	r1, [sp, #16]
 e48:	bl	cd4 <MyGame_Example_Monster_verify_as_root>
 e4c:	mov	r5, r0
 e50:	mov	r0, r4
 e54:	bl	0 <flatcc_builder_clear>
 e58:	mov	r0, r5
 e5c:	ldr	r4, [sp, #8]
 e60:	ldr	r5, [sp, #12]
 e64:	ldr	lr, [sp, #4]
 e68:	add	sp, sp, #256	; 0x100
 e6c:	bx	lr
 e70:	.word	0x000000a7
