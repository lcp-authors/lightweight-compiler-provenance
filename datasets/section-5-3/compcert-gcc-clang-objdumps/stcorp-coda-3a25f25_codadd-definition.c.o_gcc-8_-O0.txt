
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-definition.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <indent>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #8
      10:	movw	r3, #0
      14:	movt	r3, #0
      18:	ldr	r3, [r3]
      1c:	cmp	r3, #0
      20:	bge	44 <indent+0x44>
      24:	movw	r3, #0
      28:	movt	r3, #0
      2c:	mov	r2, #68	; 0x44
      30:	movw	r1, #0
      34:	movt	r1, #0
      38:	movw	r0, #0
      3c:	movt	r0, #0
      40:	bl	0 <__assert_fail>
      44:	movw	r3, #0
      48:	movt	r3, #0
      4c:	ldr	r3, [r3]
      50:	str	r3, [fp, #-8]
      54:	b	84 <indent+0x84>
      58:	movw	r3, #0
      5c:	movt	r3, #0
      60:	ldr	r3, [r3]
      64:	mov	r2, #2
      68:	mov	r1, #1
      6c:	movw	r0, #0
      70:	movt	r0, #0
      74:	bl	0 <fwrite>
      78:	ldr	r3, [fp, #-8]
      7c:	sub	r3, r3, #1
      80:	str	r3, [fp, #-8]
      84:	ldr	r3, [fp, #-8]
      88:	cmp	r3, #0
      8c:	bne	58 <indent+0x58>
      90:	nop	{0}
      94:	sub	sp, fp, #4
      98:	ldr	fp, [sp]
      9c:	add	sp, sp, #4
      a0:	pop	{pc}		; (ldr pc, [sp], #4)

000000a4 <ff_printf>:
      a4:	push	{r0, r1, r2, r3}
      a8:	str	fp, [sp, #-8]!
      ac:	str	lr, [sp, #4]
      b0:	add	fp, sp, #4
      b4:	sub	sp, sp, #8
      b8:	add	r3, fp, #8
      bc:	str	r3, [fp, #-12]
      c0:	movw	r3, #0
      c4:	movt	r3, #0
      c8:	ldr	r3, [r3]
      cc:	ldr	r2, [fp, #-12]
      d0:	ldr	r1, [fp, #4]
      d4:	mov	r0, r3
      d8:	bl	0 <vfprintf>
      dc:	str	r0, [fp, #-8]
      e0:	ldr	r3, [fp, #-8]
      e4:	mov	r0, r3
      e8:	sub	sp, fp, #4
      ec:	ldr	fp, [sp]
      f0:	ldr	lr, [sp, #4]
      f4:	add	sp, sp, #8
      f8:	add	sp, sp, #16
      fc:	bx	lr

00000100 <fi_printf>:
     100:	push	{r0, r1, r2, r3}
     104:	str	fp, [sp, #-8]!
     108:	str	lr, [sp, #4]
     10c:	add	fp, sp, #4
     110:	sub	sp, sp, #8
     114:	bl	0 <indent>
     118:	add	r3, fp, #8
     11c:	str	r3, [fp, #-12]
     120:	movw	r3, #0
     124:	movt	r3, #0
     128:	ldr	r3, [r3]
     12c:	ldr	r2, [fp, #-12]
     130:	ldr	r1, [fp, #4]
     134:	mov	r0, r3
     138:	bl	0 <vfprintf>
     13c:	str	r0, [fp, #-8]
     140:	ldr	r3, [fp, #-8]
     144:	mov	r0, r3
     148:	sub	sp, fp, #4
     14c:	ldr	fp, [sp]
     150:	ldr	lr, [sp, #4]
     154:	add	sp, sp, #8
     158:	add	sp, sp, #16
     15c:	bx	lr

00000160 <fic_printf>:
     160:	push	{r1, r2, r3}
     164:	str	fp, [sp, #-8]!
     168:	str	lr, [sp, #4]
     16c:	add	fp, sp, #4
     170:	sub	sp, sp, #20
     174:	str	r0, [fp, #-20]	; 0xffffffec
     178:	ldr	r3, [fp, #-20]	; 0xffffffec
     17c:	ldr	r3, [r3]
     180:	cmp	r3, #0
     184:	bne	1bc <fic_printf+0x5c>
     188:	movw	r0, #0
     18c:	movt	r0, #0
     190:	bl	a4 <ff_printf>
     194:	ldr	r3, [fp, #-20]	; 0xffffffec
     198:	mov	r2, #1
     19c:	str	r2, [r3]
     1a0:	movw	r3, #0
     1a4:	movt	r3, #0
     1a8:	ldr	r3, [r3]
     1ac:	add	r2, r3, #1
     1b0:	movw	r3, #0
     1b4:	movt	r3, #0
     1b8:	str	r2, [r3]
     1bc:	bl	0 <indent>
     1c0:	add	r3, fp, #8
     1c4:	str	r3, [fp, #-16]
     1c8:	movw	r3, #0
     1cc:	movt	r3, #0
     1d0:	ldr	r3, [r3]
     1d4:	ldr	r2, [fp, #-16]
     1d8:	ldr	r1, [fp, #4]
     1dc:	mov	r0, r3
     1e0:	bl	0 <vfprintf>
     1e4:	str	r0, [fp, #-12]
     1e8:	ldr	r3, [fp, #-12]
     1ec:	mov	r0, r3
     1f0:	sub	sp, fp, #4
     1f4:	ldr	fp, [sp]
     1f8:	ldr	lr, [sp, #4]
     1fc:	add	sp, sp, #8
     200:	add	sp, sp, #12
     204:	bx	lr

00000208 <generate_escaped_string>:
     208:	str	fp, [sp, #-8]!
     20c:	str	lr, [sp, #4]
     210:	add	fp, sp, #4
     214:	sub	sp, sp, #8
     218:	str	r0, [fp, #-8]
     21c:	str	r1, [fp, #-12]
     220:	ldr	r3, [fp, #-12]
     224:	cmp	r3, #0
     228:	beq	534 <generate_escaped_string+0x32c>
     22c:	ldr	r3, [fp, #-8]
     230:	cmp	r3, #0
     234:	beq	534 <generate_escaped_string+0x32c>
     238:	ldr	r3, [fp, #-12]
     23c:	cmp	r3, #0
     240:	bge	524 <generate_escaped_string+0x31c>
     244:	ldr	r0, [fp, #-8]
     248:	bl	0 <strlen>
     24c:	mov	r3, r0
     250:	str	r3, [fp, #-12]
     254:	b	524 <generate_escaped_string+0x31c>
     258:	ldr	r3, [fp, #-8]
     25c:	ldrb	r3, [r3]
     260:	sub	r3, r3, #7
     264:	cmp	r3, #85	; 0x55
     268:	ldrls	pc, [pc, r3, lsl #2]
     26c:	b	4a8 <generate_escaped_string+0x2a0>
     270:	.word	0x000003d8
     274:	.word	0x000003e8
     278:	.word	0x00000428
     27c:	.word	0x00000408
     280:	.word	0x00000438
     284:	.word	0x000003f8
     288:	.word	0x00000418
     28c:	.word	0x000004a8
     290:	.word	0x000004a8
     294:	.word	0x000004a8
     298:	.word	0x000004a8
     29c:	.word	0x000004a8
     2a0:	.word	0x000004a8
     2a4:	.word	0x000004a8
     2a8:	.word	0x000004a8
     2ac:	.word	0x000004a8
     2b0:	.word	0x000004a8
     2b4:	.word	0x000004a8
     2b8:	.word	0x000004a8
     2bc:	.word	0x000004a8
     2c0:	.word	0x000003c8
     2c4:	.word	0x000004a8
     2c8:	.word	0x000004a8
     2cc:	.word	0x000004a8
     2d0:	.word	0x000004a8
     2d4:	.word	0x00000498
     2d8:	.word	0x000004a8
     2dc:	.word	0x00000458
     2e0:	.word	0x000004a8
     2e4:	.word	0x000004a8
     2e8:	.word	0x000004a8
     2ec:	.word	0x00000488
     2f0:	.word	0x000004a8
     2f4:	.word	0x000004a8
     2f8:	.word	0x000004a8
     2fc:	.word	0x000004a8
     300:	.word	0x000004a8
     304:	.word	0x000004a8
     308:	.word	0x000004a8
     30c:	.word	0x000004a8
     310:	.word	0x000004a8
     314:	.word	0x000004a8
     318:	.word	0x000004a8
     31c:	.word	0x000004a8
     320:	.word	0x000004a8
     324:	.word	0x000004a8
     328:	.word	0x000004a8
     32c:	.word	0x000004a8
     330:	.word	0x000004a8
     334:	.word	0x000004a8
     338:	.word	0x000004a8
     33c:	.word	0x000004a8
     340:	.word	0x000004a8
     344:	.word	0x00000468
     348:	.word	0x000004a8
     34c:	.word	0x00000478
     350:	.word	0x000004a8
     354:	.word	0x000004a8
     358:	.word	0x000004a8
     35c:	.word	0x000004a8
     360:	.word	0x000004a8
     364:	.word	0x000004a8
     368:	.word	0x000004a8
     36c:	.word	0x000004a8
     370:	.word	0x000004a8
     374:	.word	0x000004a8
     378:	.word	0x000004a8
     37c:	.word	0x000004a8
     380:	.word	0x000004a8
     384:	.word	0x000004a8
     388:	.word	0x000004a8
     38c:	.word	0x000004a8
     390:	.word	0x000004a8
     394:	.word	0x000004a8
     398:	.word	0x000004a8
     39c:	.word	0x000004a8
     3a0:	.word	0x000004a8
     3a4:	.word	0x000004a8
     3a8:	.word	0x000004a8
     3ac:	.word	0x000004a8
     3b0:	.word	0x000004a8
     3b4:	.word	0x000004a8
     3b8:	.word	0x000004a8
     3bc:	.word	0x000004a8
     3c0:	.word	0x000004a8
     3c4:	.word	0x00000448
     3c8:	movw	r0, #0
     3cc:	movt	r0, #0
     3d0:	bl	a4 <ff_printf>
     3d4:	b	50c <generate_escaped_string+0x304>
     3d8:	movw	r0, #0
     3dc:	movt	r0, #0
     3e0:	bl	a4 <ff_printf>
     3e4:	b	50c <generate_escaped_string+0x304>
     3e8:	movw	r0, #0
     3ec:	movt	r0, #0
     3f0:	bl	a4 <ff_printf>
     3f4:	b	50c <generate_escaped_string+0x304>
     3f8:	movw	r0, #0
     3fc:	movt	r0, #0
     400:	bl	a4 <ff_printf>
     404:	b	50c <generate_escaped_string+0x304>
     408:	movw	r0, #0
     40c:	movt	r0, #0
     410:	bl	a4 <ff_printf>
     414:	b	50c <generate_escaped_string+0x304>
     418:	movw	r0, #0
     41c:	movt	r0, #0
     420:	bl	a4 <ff_printf>
     424:	b	50c <generate_escaped_string+0x304>
     428:	movw	r0, #0
     42c:	movt	r0, #0
     430:	bl	a4 <ff_printf>
     434:	b	50c <generate_escaped_string+0x304>
     438:	movw	r0, #0
     43c:	movt	r0, #0
     440:	bl	a4 <ff_printf>
     444:	b	50c <generate_escaped_string+0x304>
     448:	movw	r0, #0
     44c:	movt	r0, #0
     450:	bl	a4 <ff_printf>
     454:	b	50c <generate_escaped_string+0x304>
     458:	movw	r0, #0
     45c:	movt	r0, #0
     460:	bl	a4 <ff_printf>
     464:	b	50c <generate_escaped_string+0x304>
     468:	movw	r0, #0
     46c:	movt	r0, #0
     470:	bl	a4 <ff_printf>
     474:	b	50c <generate_escaped_string+0x304>
     478:	movw	r0, #0
     47c:	movt	r0, #0
     480:	bl	a4 <ff_printf>
     484:	b	50c <generate_escaped_string+0x304>
     488:	movw	r0, #0
     48c:	movt	r0, #0
     490:	bl	a4 <ff_printf>
     494:	b	50c <generate_escaped_string+0x304>
     498:	movw	r0, #0
     49c:	movt	r0, #0
     4a0:	bl	a4 <ff_printf>
     4a4:	b	50c <generate_escaped_string+0x304>
     4a8:	bl	0 <__ctype_b_loc>
     4ac:	mov	r3, r0
     4b0:	ldr	r2, [r3]
     4b4:	ldr	r3, [fp, #-8]
     4b8:	ldrb	r3, [r3]
     4bc:	lsl	r3, r3, #1
     4c0:	add	r3, r2, r3
     4c4:	ldrh	r3, [r3]
     4c8:	and	r3, r3, #16384	; 0x4000
     4cc:	cmp	r3, #0
     4d0:	bne	4f0 <generate_escaped_string+0x2e8>
     4d4:	ldr	r3, [fp, #-8]
     4d8:	ldrb	r3, [r3]
     4dc:	mov	r1, r3
     4e0:	movw	r0, #0
     4e4:	movt	r0, #0
     4e8:	bl	a4 <ff_printf>
     4ec:	b	508 <generate_escaped_string+0x300>
     4f0:	ldr	r3, [fp, #-8]
     4f4:	ldrb	r3, [r3]
     4f8:	mov	r1, r3
     4fc:	movw	r0, #0
     500:	movt	r0, #0
     504:	bl	a4 <ff_printf>
     508:	nop	{0}
     50c:	ldr	r3, [fp, #-8]
     510:	add	r3, r3, #1
     514:	str	r3, [fp, #-8]
     518:	ldr	r3, [fp, #-12]
     51c:	sub	r3, r3, #1
     520:	str	r3, [fp, #-12]
     524:	ldr	r3, [fp, #-12]
     528:	cmp	r3, #0
     52c:	bgt	258 <generate_escaped_string+0x50>
     530:	b	538 <generate_escaped_string+0x330>
     534:	nop	{0}
     538:	sub	sp, fp, #4
     53c:	ldr	fp, [sp]
     540:	add	sp, sp, #4
     544:	pop	{pc}		; (ldr pc, [sp], #4)

00000548 <generate_xml_string>:
     548:	str	fp, [sp, #-8]!
     54c:	str	lr, [sp, #4]
     550:	add	fp, sp, #4
     554:	sub	sp, sp, #8
     558:	str	r0, [fp, #-8]
     55c:	str	r1, [fp, #-12]
     560:	ldr	r3, [fp, #-12]
     564:	cmp	r3, #0
     568:	beq	62c <generate_xml_string+0xe4>
     56c:	ldr	r3, [fp, #-8]
     570:	cmp	r3, #0
     574:	beq	62c <generate_xml_string+0xe4>
     578:	ldr	r3, [fp, #-12]
     57c:	cmp	r3, #0
     580:	bge	61c <generate_xml_string+0xd4>
     584:	ldr	r0, [fp, #-8]
     588:	bl	0 <strlen>
     58c:	mov	r3, r0
     590:	str	r3, [fp, #-12]
     594:	b	61c <generate_xml_string+0xd4>
     598:	ldr	r3, [fp, #-8]
     59c:	ldrb	r3, [r3]
     5a0:	cmp	r3, #60	; 0x3c
     5a4:	beq	5c8 <generate_xml_string+0x80>
     5a8:	cmp	r3, #62	; 0x3e
     5ac:	beq	5d8 <generate_xml_string+0x90>
     5b0:	cmp	r3, #38	; 0x26
     5b4:	bne	5e8 <generate_xml_string+0xa0>
     5b8:	movw	r0, #0
     5bc:	movt	r0, #0
     5c0:	bl	a4 <ff_printf>
     5c4:	b	604 <generate_xml_string+0xbc>
     5c8:	movw	r0, #0
     5cc:	movt	r0, #0
     5d0:	bl	a4 <ff_printf>
     5d4:	b	604 <generate_xml_string+0xbc>
     5d8:	movw	r0, #0
     5dc:	movt	r0, #0
     5e0:	bl	a4 <ff_printf>
     5e4:	b	604 <generate_xml_string+0xbc>
     5e8:	ldr	r3, [fp, #-8]
     5ec:	ldrb	r3, [r3]
     5f0:	mov	r1, r3
     5f4:	movw	r0, #0
     5f8:	movt	r0, #0
     5fc:	bl	a4 <ff_printf>
     600:	nop	{0}
     604:	ldr	r3, [fp, #-8]
     608:	add	r3, r3, #1
     60c:	str	r3, [fp, #-8]
     610:	ldr	r3, [fp, #-12]
     614:	sub	r3, r3, #1
     618:	str	r3, [fp, #-12]
     61c:	ldr	r3, [fp, #-12]
     620:	cmp	r3, #0
     624:	bgt	598 <generate_xml_string+0x50>
     628:	b	630 <generate_xml_string+0xe8>
     62c:	nop	{0}
     630:	sub	sp, fp, #4
     634:	ldr	fp, [sp]
     638:	add	sp, sp, #4
     63c:	pop	{pc}		; (ldr pc, [sp], #4)

00000640 <generate_type>:
     640:	strd	r4, [sp, #-32]!	; 0xffffffe0
     644:	strd	r6, [sp, #8]
     648:	strd	r8, [sp, #16]
     64c:	str	fp, [sp, #24]
     650:	str	lr, [sp, #28]
     654:	add	fp, sp, #28
     658:	sub	sp, sp, #208	; 0xd0
     65c:	str	r0, [fp, #-224]	; 0xffffff20
     660:	str	r1, [fp, #-228]	; 0xffffff1c
     664:	mov	r3, #0
     668:	str	r3, [fp, #-72]	; 0xffffffb8
     66c:	movw	r3, #0
     670:	movt	r3, #0
     674:	str	r3, [fp, #-32]	; 0xffffffe0
     678:	mov	r3, #0
     67c:	str	r3, [fp, #-88]	; 0xffffffa8
     680:	mov	r3, #0
     684:	str	r3, [fp, #-92]	; 0xffffffa4
     688:	sub	r3, fp, #68	; 0x44
     68c:	mov	r1, r3
     690:	ldr	r0, [fp, #-224]	; 0xffffff20
     694:	bl	0 <coda_type_get_class>
     698:	sub	r3, fp, #76	; 0x4c
     69c:	mov	r1, r3
     6a0:	ldr	r0, [fp, #-224]	; 0xffffff20
     6a4:	bl	0 <coda_type_get_format>
     6a8:	sub	r3, fp, #80	; 0x50
     6ac:	mov	r1, r3
     6b0:	ldr	r0, [fp, #-224]	; 0xffffff20
     6b4:	bl	0 <coda_type_get_description>
     6b8:	sub	r3, fp, #84	; 0x54
     6bc:	mov	r1, r3
     6c0:	ldr	r0, [fp, #-224]	; 0xffffff20
     6c4:	bl	0 <coda_type_get_attributes>
     6c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
     6cc:	cmp	r3, #6
     6d0:	ldrls	pc, [pc, r3, lsl #2]
     6d4:	b	888 <generate_type+0x248>
     6d8:	.word	0x000006f4
     6dc:	.word	0x0000072c
     6e0:	.word	0x0000073c
     6e4:	.word	0x0000074c
     6e8:	.word	0x0000075c
     6ec:	.word	0x000007e8
     6f0:	.word	0x000007f8
     6f4:	sub	r3, fp, #92	; 0x5c
     6f8:	mov	r1, r3
     6fc:	ldr	r0, [fp, #-224]	; 0xffffff20
     700:	bl	0 <coda_type_get_record_union_status>
     704:	ldr	r3, [fp, #-92]	; 0xffffffa4
     708:	cmp	r3, #0
     70c:	beq	71c <generate_type+0xdc>
     710:	movw	r3, #0
     714:	movt	r3, #0
     718:	b	724 <generate_type+0xe4>
     71c:	movw	r3, #0
     720:	movt	r3, #0
     724:	str	r3, [fp, #-32]	; 0xffffffe0
     728:	b	888 <generate_type+0x248>
     72c:	movw	r3, #0
     730:	movt	r3, #0
     734:	str	r3, [fp, #-32]	; 0xffffffe0
     738:	b	888 <generate_type+0x248>
     73c:	movw	r3, #0
     740:	movt	r3, #0
     744:	str	r3, [fp, #-32]	; 0xffffffe0
     748:	b	888 <generate_type+0x248>
     74c:	movw	r3, #0
     750:	movt	r3, #0
     754:	str	r3, [fp, #-32]	; 0xffffffe0
     758:	b	888 <generate_type+0x248>
     75c:	ldr	r3, [fp, #-224]	; 0xffffff20
     760:	ldr	r3, [r3, #44]	; 0x2c
     764:	cmp	r3, #4
     768:	ldrls	pc, [pc, r3, lsl #2]
     76c:	b	87c <generate_type+0x23c>
     770:	.word	0x00000784
     774:	.word	0x00000794
     778:	.word	0x000007a4
     77c:	.word	0x000007c4
     780:	.word	0x000007d4
     784:	movw	r3, #0
     788:	movt	r3, #0
     78c:	str	r3, [fp, #-32]	; 0xffffffe0
     790:	b	7e4 <generate_type+0x1a4>
     794:	movw	r3, #0
     798:	movt	r3, #0
     79c:	str	r3, [fp, #-32]	; 0xffffffe0
     7a0:	b	7e4 <generate_type+0x1a4>
     7a4:	movw	r3, #0
     7a8:	movt	r3, #0
     7ac:	movw	r2, #273	; 0x111
     7b0:	movw	r1, #0
     7b4:	movt	r1, #0
     7b8:	movw	r0, #0
     7bc:	movt	r0, #0
     7c0:	bl	0 <__assert_fail>
     7c4:	movw	r3, #0
     7c8:	movt	r3, #0
     7cc:	str	r3, [fp, #-32]	; 0xffffffe0
     7d0:	b	7e4 <generate_type+0x1a4>
     7d4:	movw	r3, #0
     7d8:	movt	r3, #0
     7dc:	str	r3, [fp, #-32]	; 0xffffffe0
     7e0:	nop	{0}
     7e4:	b	87c <generate_type+0x23c>
     7e8:	movw	r3, #0
     7ec:	movt	r3, #0
     7f0:	str	r3, [fp, #-32]	; 0xffffffe0
     7f4:	b	888 <generate_type+0x248>
     7f8:	sub	r3, fp, #72	; 0x48
     7fc:	mov	r1, r3
     800:	ldr	r0, [fp, #-224]	; 0xffffff20
     804:	bl	0 <coda_type_get_special_type>
     808:	ldr	r3, [fp, #-72]	; 0xffffffb8
     80c:	cmp	r3, #3
     810:	ldrls	pc, [pc, r3, lsl #2]
     814:	b	884 <generate_type+0x244>
     818:	.word	0x00000858
     81c:	.word	0x00000828
     820:	.word	0x00000838
     824:	.word	0x00000848
     828:	movw	r3, #0
     82c:	movt	r3, #0
     830:	str	r3, [fp, #-32]	; 0xffffffe0
     834:	b	878 <generate_type+0x238>
     838:	movw	r3, #0
     83c:	movt	r3, #0
     840:	str	r3, [fp, #-32]	; 0xffffffe0
     844:	b	878 <generate_type+0x238>
     848:	movw	r3, #0
     84c:	movt	r3, #0
     850:	str	r3, [fp, #-32]	; 0xffffffe0
     854:	b	878 <generate_type+0x238>
     858:	movw	r3, #0
     85c:	movt	r3, #0
     860:	movw	r2, #301	; 0x12d
     864:	movw	r1, #0
     868:	movt	r1, #0
     86c:	movw	r0, #0
     870:	movt	r0, #0
     874:	bl	0 <__assert_fail>
     878:	b	884 <generate_type+0x244>
     87c:	nop	{0}
     880:	b	888 <generate_type+0x248>
     884:	nop	{0}
     888:	ldr	r1, [fp, #-32]	; 0xffffffe0
     88c:	movw	r0, #0
     890:	movt	r0, #0
     894:	bl	100 <fi_printf>
     898:	ldr	r3, [fp, #-76]	; 0xffffffb4
     89c:	ldr	r2, [fp, #-228]	; 0xffffff1c
     8a0:	cmp	r2, r3
     8a4:	beq	8c8 <generate_type+0x288>
     8a8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     8ac:	mov	r0, r3
     8b0:	bl	0 <coda_type_get_format_name>
     8b4:	mov	r3, r0
     8b8:	mov	r1, r3
     8bc:	movw	r0, #0
     8c0:	movt	r0, #0
     8c4:	bl	a4 <ff_printf>
     8c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
     8cc:	cmp	r3, #6
     8d0:	bne	910 <generate_type+0x2d0>
     8d4:	ldr	r3, [fp, #-72]	; 0xffffffb8
     8d8:	cmp	r3, #2
     8dc:	bne	910 <generate_type+0x2d0>
     8e0:	movw	r0, #0
     8e4:	movt	r0, #0
     8e8:	bl	a4 <ff_printf>
     8ec:	ldr	r3, [fp, #-224]	; 0xffffff20
     8f0:	ldr	r3, [r3, #52]	; 0x34
     8f4:	movw	r1, #0
     8f8:	movt	r1, #0
     8fc:	mov	r0, r3
     900:	bl	0 <coda_expression_print_xml>
     904:	movw	r0, #0
     908:	movt	r0, #0
     90c:	bl	a4 <ff_printf>
     910:	ldr	r3, [fp, #-80]	; 0xffffffb0
     914:	cmp	r3, #0
     918:	beq	94c <generate_type+0x30c>
     91c:	sub	r3, fp, #88	; 0x58
     920:	movw	r1, #0
     924:	movt	r1, #0
     928:	mov	r0, r3
     92c:	bl	160 <fic_printf>
     930:	ldr	r3, [fp, #-80]	; 0xffffffb0
     934:	mvn	r1, #0
     938:	mov	r0, r3
     93c:	bl	548 <generate_xml_string>
     940:	movw	r0, #0
     944:	movt	r0, #0
     948:	bl	a4 <ff_printf>
     94c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     950:	cmp	r3, #0
     954:	beq	964 <generate_type+0x324>
     958:	ldr	r3, [fp, #-76]	; 0xffffffb4
     95c:	cmp	r3, #1
     960:	bne	b1c <generate_type+0x4dc>
     964:	ldr	r3, [fp, #-68]	; 0xffffffbc
     968:	cmp	r3, #2
     96c:	beq	994 <generate_type+0x354>
     970:	ldr	r3, [fp, #-68]	; 0xffffffbc
     974:	cmp	r3, #3
     978:	beq	994 <generate_type+0x354>
     97c:	ldr	r3, [fp, #-68]	; 0xffffffbc
     980:	cmp	r3, #4
     984:	beq	994 <generate_type+0x354>
     988:	ldr	r3, [fp, #-68]	; 0xffffffbc
     98c:	cmp	r3, #5
     990:	bne	b1c <generate_type+0x4dc>
     994:	ldr	r3, [fp, #-224]	; 0xffffff20
     998:	ldrd	r2, [r3, #24]
     99c:	cmp	r2, #0
     9a0:	sbcs	r3, r3, #0
     9a4:	blt	a70 <generate_type+0x430>
     9a8:	ldr	r3, [fp, #-224]	; 0xffffff20
     9ac:	ldrd	r2, [r3, #24]
     9b0:	mov	r0, r2
     9b4:	mov	r1, r3
     9b8:	mov	r2, #7
     9bc:	mov	r3, #0
     9c0:	and	r8, r0, r2
     9c4:	and	r9, r1, r3
     9c8:	orrs	r3, r8, r9
     9cc:	bne	a40 <generate_type+0x400>
     9d0:	ldr	r3, [fp, #-224]	; 0xffffff20
     9d4:	ldrd	r2, [r3, #24]
     9d8:	asr	r1, r3, #31
     9dc:	mov	r0, r1
     9e0:	asr	r1, r0, #31
     9e4:	mov	r8, #7
     9e8:	mov	r9, #0
     9ec:	and	r6, r0, r8
     9f0:	and	r7, r1, r9
     9f4:	adds	r4, r6, r2
     9f8:	adc	r5, r7, r3
     9fc:	mov	r2, #0
     a00:	mov	r3, #0
     a04:	lsr	r2, r4, #3
     a08:	orr	r2, r2, r5, lsl #29
     a0c:	asr	r3, r5, #3
     a10:	mov	r0, r2
     a14:	mov	r1, r3
     a18:	sub	r3, fp, #116	; 0x74
     a1c:	mov	r2, r3
     a20:	bl	0 <coda_str64>
     a24:	sub	r2, fp, #116	; 0x74
     a28:	sub	r3, fp, #88	; 0x58
     a2c:	movw	r1, #0
     a30:	movt	r1, #0
     a34:	mov	r0, r3
     a38:	bl	160 <fic_printf>
     a3c:	b	b1c <generate_type+0x4dc>
     a40:	ldr	r3, [fp, #-224]	; 0xffffff20
     a44:	ldrd	r0, [r3, #24]
     a48:	sub	r3, fp, #116	; 0x74
     a4c:	mov	r2, r3
     a50:	bl	0 <coda_str64>
     a54:	sub	r2, fp, #116	; 0x74
     a58:	sub	r3, fp, #88	; 0x58
     a5c:	movw	r1, #0
     a60:	movt	r1, #0
     a64:	mov	r0, r3
     a68:	bl	160 <fic_printf>
     a6c:	b	b1c <generate_type+0x4dc>
     a70:	ldr	r3, [fp, #-224]	; 0xffffff20
     a74:	ldr	r3, [r3, #32]
     a78:	cmp	r3, #0
     a7c:	beq	b1c <generate_type+0x4dc>
     a80:	ldr	r3, [fp, #-224]	; 0xffffff20
     a84:	ldrd	r2, [r3, #24]
     a88:	mvn	r0, #7
     a8c:	mvn	r1, #0
     a90:	cmp	r3, r1
     a94:	cmpeq	r2, r0
     a98:	bne	aa8 <generate_type+0x468>
     a9c:	movw	r3, #0
     aa0:	movt	r3, #0
     aa4:	b	ab0 <generate_type+0x470>
     aa8:	movw	r3, #0
     aac:	movt	r3, #0
     ab0:	sub	r0, fp, #88	; 0x58
     ab4:	mov	r2, r3
     ab8:	movw	r1, #0
     abc:	movt	r1, #0
     ac0:	bl	160 <fic_printf>
     ac4:	ldr	r3, [fp, #-224]	; 0xffffff20
     ac8:	ldr	r3, [r3, #32]
     acc:	movw	r1, #0
     ad0:	movt	r1, #0
     ad4:	mov	r0, r3
     ad8:	bl	0 <coda_expression_print_xml>
     adc:	ldr	r3, [fp, #-224]	; 0xffffff20
     ae0:	ldrd	r2, [r3, #24]
     ae4:	mvn	r0, #7
     ae8:	mvn	r1, #0
     aec:	cmp	r3, r1
     af0:	cmpeq	r2, r0
     af4:	bne	b04 <generate_type+0x4c4>
     af8:	movw	r3, #0
     afc:	movt	r3, #0
     b00:	b	b0c <generate_type+0x4cc>
     b04:	movw	r3, #0
     b08:	movt	r3, #0
     b0c:	mov	r1, r3
     b10:	movw	r0, #0
     b14:	movt	r0, #0
     b18:	bl	a4 <ff_printf>
     b1c:	ldr	r3, [fp, #-68]	; 0xffffffbc
     b20:	cmp	r3, #0
     b24:	bne	bac <generate_type+0x56c>
     b28:	ldr	r3, [fp, #-224]	; 0xffffff20
     b2c:	ldr	r3, [r3, #32]
     b30:	cmp	r3, #0
     b34:	beq	bac <generate_type+0x56c>
     b38:	ldr	r3, [fp, #-224]	; 0xffffff20
     b3c:	ldrd	r2, [r3, #24]
     b40:	mvn	r0, #7
     b44:	mvn	r1, #0
     b48:	cmp	r3, r1
     b4c:	cmpeq	r2, r0
     b50:	bne	b74 <generate_type+0x534>
     b54:	movw	r3, #0
     b58:	movt	r3, #0
     b5c:	mov	r2, #352	; 0x160
     b60:	movw	r1, #0
     b64:	movt	r1, #0
     b68:	movw	r0, #0
     b6c:	movt	r0, #0
     b70:	bl	0 <__assert_fail>
     b74:	sub	r3, fp, #88	; 0x58
     b78:	movw	r1, #0
     b7c:	movt	r1, #0
     b80:	mov	r0, r3
     b84:	bl	160 <fic_printf>
     b88:	ldr	r3, [fp, #-224]	; 0xffffff20
     b8c:	ldr	r3, [r3, #32]
     b90:	movw	r1, #0
     b94:	movt	r1, #0
     b98:	mov	r0, r3
     b9c:	bl	0 <coda_expression_print_xml>
     ba0:	movw	r0, #0
     ba4:	movt	r0, #0
     ba8:	bl	a4 <ff_printf>
     bac:	ldr	r3, [fp, #-224]	; 0xffffff20
     bb0:	ldr	r3, [r3, #36]	; 0x24
     bb4:	cmp	r3, #0
     bb8:	beq	d70 <generate_type+0x730>
     bbc:	mov	r3, #0
     bc0:	str	r3, [fp, #-36]	; 0xffffffdc
     bc4:	b	d58 <generate_type+0x718>
     bc8:	ldr	r3, [fp, #-224]	; 0xffffff20
     bcc:	ldr	r3, [r3, #36]	; 0x24
     bd0:	ldr	r2, [r3, #52]	; 0x34
     bd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     bd8:	lsl	r3, r3, #2
     bdc:	add	r3, r2, r3
     be0:	ldr	r3, [r3]
     be4:	str	r3, [fp, #-40]	; 0xffffffd8
     be8:	ldr	r3, [fp, #-40]	; 0xffffffd8
     bec:	ldr	r2, [r3]
     bf0:	sub	r3, fp, #88	; 0x58
     bf4:	movw	r1, #0
     bf8:	movt	r1, #0
     bfc:	mov	r0, r3
     c00:	bl	160 <fic_printf>
     c04:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c08:	ldr	r3, [r3, #4]
     c0c:	cmp	r3, #0
     c10:	beq	c68 <generate_type+0x628>
     c14:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c18:	ldr	r2, [r3, #4]
     c1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c20:	ldr	r3, [r3]
     c24:	mov	r1, r3
     c28:	mov	r0, r2
     c2c:	bl	0 <strcmp>
     c30:	mov	r3, r0
     c34:	cmp	r3, #0
     c38:	beq	c68 <generate_type+0x628>
     c3c:	movw	r0, #0
     c40:	movt	r0, #0
     c44:	bl	a4 <ff_printf>
     c48:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c4c:	ldr	r3, [r3, #4]
     c50:	mvn	r1, #0
     c54:	mov	r0, r3
     c58:	bl	548 <generate_xml_string>
     c5c:	movw	r0, #0
     c60:	movt	r0, #0
     c64:	bl	a4 <ff_printf>
     c68:	movw	r0, #0
     c6c:	movt	r0, #0
     c70:	bl	a4 <ff_printf>
     c74:	movw	r3, #0
     c78:	movt	r3, #0
     c7c:	ldr	r3, [r3]
     c80:	add	r2, r3, #1
     c84:	movw	r3, #0
     c88:	movt	r3, #0
     c8c:	str	r2, [r3]
     c90:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c94:	ldr	r3, [r3, #8]
     c98:	ldr	r2, [fp, #-76]	; 0xffffffb4
     c9c:	mov	r1, r2
     ca0:	mov	r0, r3
     ca4:	bl	640 <generate_type>
     ca8:	ldr	r3, [fp, #-40]	; 0xffffffd8
     cac:	ldr	r3, [r3, #12]
     cb0:	cmp	r3, #0
     cb4:	beq	cc4 <generate_type+0x684>
     cb8:	movw	r0, #0
     cbc:	movt	r0, #0
     cc0:	bl	100 <fi_printf>
     cc4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     cc8:	ldrb	r3, [r3, #16]
     ccc:	cmp	r3, #0
     cd0:	beq	d24 <generate_type+0x6e4>
     cd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     cd8:	ldr	r3, [r3, #20]
     cdc:	cmp	r3, #0
     ce0:	beq	d18 <generate_type+0x6d8>
     ce4:	movw	r0, #0
     ce8:	movt	r0, #0
     cec:	bl	100 <fi_printf>
     cf0:	ldr	r3, [fp, #-40]	; 0xffffffd8
     cf4:	ldr	r3, [r3, #20]
     cf8:	movw	r1, #0
     cfc:	movt	r1, #0
     d00:	mov	r0, r3
     d04:	bl	0 <coda_expression_print_xml>
     d08:	movw	r0, #0
     d0c:	movt	r0, #0
     d10:	bl	a4 <ff_printf>
     d14:	b	d24 <generate_type+0x6e4>
     d18:	movw	r0, #0
     d1c:	movt	r0, #0
     d20:	bl	100 <fi_printf>
     d24:	movw	r3, #0
     d28:	movt	r3, #0
     d2c:	ldr	r3, [r3]
     d30:	sub	r2, r3, #1
     d34:	movw	r3, #0
     d38:	movt	r3, #0
     d3c:	str	r2, [r3]
     d40:	movw	r0, #0
     d44:	movt	r0, #0
     d48:	bl	100 <fi_printf>
     d4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     d50:	add	r3, r3, #1
     d54:	str	r3, [fp, #-36]	; 0xffffffdc
     d58:	ldr	r3, [fp, #-224]	; 0xffffff20
     d5c:	ldr	r3, [r3, #36]	; 0x24
     d60:	ldr	r3, [r3, #48]	; 0x30
     d64:	ldr	r2, [fp, #-36]	; 0xffffffdc
     d68:	cmp	r2, r3
     d6c:	blt	bc8 <generate_type+0x588>
     d70:	ldr	r3, [fp, #-68]	; 0xffffffbc
     d74:	cmp	r3, #6
     d78:	ldrls	pc, [pc, r3, lsl #2]
     d7c:	b	1610 <generate_type+0xfd0>
     d80:	.word	0x00000d9c
     d84:	.word	0x0000102c
     d88:	.word	0x000011a0
     d8c:	.word	0x000011a0
     d90:	.word	0x0000147c
     d94:	.word	0x0000150c
     d98:	.word	0x0000156c
     d9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
     da0:	cmp	r3, #0
     da4:	beq	df0 <generate_type+0x7b0>
     da8:	ldr	r3, [fp, #-224]	; 0xffffff20
     dac:	ldr	r3, [r3, #68]	; 0x44
     db0:	cmp	r3, #0
     db4:	beq	df0 <generate_type+0x7b0>
     db8:	sub	r3, fp, #88	; 0x58
     dbc:	movw	r1, #0
     dc0:	movt	r1, #0
     dc4:	mov	r0, r3
     dc8:	bl	160 <fic_printf>
     dcc:	ldr	r3, [fp, #-224]	; 0xffffff20
     dd0:	ldr	r3, [r3, #68]	; 0x44
     dd4:	movw	r1, #0
     dd8:	movt	r1, #0
     ddc:	mov	r0, r3
     de0:	bl	0 <coda_expression_print_xml>
     de4:	movw	r0, #0
     de8:	movt	r0, #0
     dec:	bl	a4 <ff_printf>
     df0:	sub	r3, fp, #120	; 0x78
     df4:	mov	r1, r3
     df8:	ldr	r0, [fp, #-224]	; 0xffffff20
     dfc:	bl	0 <coda_type_get_num_record_fields>
     e00:	mov	r3, #0
     e04:	str	r3, [fp, #-36]	; 0xffffffdc
     e08:	b	1018 <generate_type+0x9d8>
     e0c:	ldr	r3, [fp, #-224]	; 0xffffff20
     e10:	ldr	r2, [r3, #52]	; 0x34
     e14:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e18:	lsl	r3, r3, #2
     e1c:	add	r3, r2, r3
     e20:	ldr	r3, [r3]
     e24:	str	r3, [fp, #-44]	; 0xffffffd4
     e28:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e2c:	ldr	r2, [r3]
     e30:	sub	r3, fp, #88	; 0x58
     e34:	movw	r1, #0
     e38:	movt	r1, #0
     e3c:	mov	r0, r3
     e40:	bl	160 <fic_printf>
     e44:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e48:	ldr	r3, [r3, #4]
     e4c:	cmp	r3, #0
     e50:	beq	ea8 <generate_type+0x868>
     e54:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e58:	ldr	r2, [r3, #4]
     e5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e60:	ldr	r3, [r3]
     e64:	mov	r1, r3
     e68:	mov	r0, r2
     e6c:	bl	0 <strcmp>
     e70:	mov	r3, r0
     e74:	cmp	r3, #0
     e78:	beq	ea8 <generate_type+0x868>
     e7c:	movw	r0, #0
     e80:	movt	r0, #0
     e84:	bl	a4 <ff_printf>
     e88:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e8c:	ldr	r3, [r3, #4]
     e90:	mvn	r1, #0
     e94:	mov	r0, r3
     e98:	bl	548 <generate_xml_string>
     e9c:	movw	r0, #0
     ea0:	movt	r0, #0
     ea4:	bl	a4 <ff_printf>
     ea8:	movw	r0, #0
     eac:	movt	r0, #0
     eb0:	bl	a4 <ff_printf>
     eb4:	movw	r3, #0
     eb8:	movt	r3, #0
     ebc:	ldr	r3, [r3]
     ec0:	add	r2, r3, #1
     ec4:	movw	r3, #0
     ec8:	movt	r3, #0
     ecc:	str	r2, [r3]
     ed0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ed4:	ldr	r3, [r3, #8]
     ed8:	ldr	r2, [fp, #-76]	; 0xffffffb4
     edc:	mov	r1, r2
     ee0:	mov	r0, r3
     ee4:	bl	640 <generate_type>
     ee8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     eec:	ldr	r3, [r3, #12]
     ef0:	cmp	r3, #0
     ef4:	beq	f04 <generate_type+0x8c4>
     ef8:	movw	r0, #0
     efc:	movt	r0, #0
     f00:	bl	100 <fi_printf>
     f04:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f08:	ldrb	r3, [r3, #16]
     f0c:	cmp	r3, #0
     f10:	beq	f64 <generate_type+0x924>
     f14:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f18:	ldr	r3, [r3, #20]
     f1c:	cmp	r3, #0
     f20:	beq	f58 <generate_type+0x918>
     f24:	movw	r0, #0
     f28:	movt	r0, #0
     f2c:	bl	100 <fi_printf>
     f30:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f34:	ldr	r3, [r3, #20]
     f38:	movw	r1, #0
     f3c:	movt	r1, #0
     f40:	mov	r0, r3
     f44:	bl	0 <coda_expression_print_xml>
     f48:	movw	r0, #0
     f4c:	movt	r0, #0
     f50:	bl	a4 <ff_printf>
     f54:	b	f64 <generate_type+0x924>
     f58:	movw	r0, #0
     f5c:	movt	r0, #0
     f60:	bl	100 <fi_printf>
     f64:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f68:	ldrd	r2, [r3, #24]
     f6c:	cmp	r2, #0
     f70:	sbcs	r3, r3, #0
     f74:	blt	fa4 <generate_type+0x964>
     f78:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f7c:	ldrd	r0, [r3, #24]
     f80:	sub	r3, fp, #144	; 0x90
     f84:	mov	r2, r3
     f88:	bl	0 <coda_str64>
     f8c:	sub	r3, fp, #144	; 0x90
     f90:	mov	r1, r3
     f94:	movw	r0, #0
     f98:	movt	r0, #0
     f9c:	bl	100 <fi_printf>
     fa0:	b	fe4 <generate_type+0x9a4>
     fa4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     fa8:	ldr	r3, [r3, #32]
     fac:	cmp	r3, #0
     fb0:	beq	fe4 <generate_type+0x9a4>
     fb4:	movw	r0, #0
     fb8:	movt	r0, #0
     fbc:	bl	100 <fi_printf>
     fc0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     fc4:	ldr	r3, [r3, #32]
     fc8:	movw	r1, #0
     fcc:	movt	r1, #0
     fd0:	mov	r0, r3
     fd4:	bl	0 <coda_expression_print_xml>
     fd8:	movw	r0, #0
     fdc:	movt	r0, #0
     fe0:	bl	a4 <ff_printf>
     fe4:	movw	r3, #0
     fe8:	movt	r3, #0
     fec:	ldr	r3, [r3]
     ff0:	sub	r2, r3, #1
     ff4:	movw	r3, #0
     ff8:	movt	r3, #0
     ffc:	str	r2, [r3]
    1000:	movw	r0, #0
    1004:	movt	r0, #0
    1008:	bl	100 <fi_printf>
    100c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1010:	add	r3, r3, #1
    1014:	str	r3, [fp, #-36]	; 0xffffffdc
    1018:	ldr	r3, [fp, #-120]	; 0xffffff88
    101c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1020:	cmp	r2, r3
    1024:	blt	e0c <generate_type+0x7cc>
    1028:	b	1610 <generate_type+0xfd0>
    102c:	ldr	r3, [fp, #-224]	; 0xffffff20
    1030:	str	r3, [fp, #-48]	; 0xffffffd0
    1034:	mov	r3, #0
    1038:	str	r3, [fp, #-36]	; 0xffffffdc
    103c:	b	1134 <generate_type+0xaf4>
    1040:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1044:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1048:	add	r3, r3, #12
    104c:	lsl	r3, r3, #2
    1050:	add	r3, r2, r3
    1054:	ldr	r3, [r3, #4]
    1058:	cmp	r3, #0
    105c:	blt	10a8 <generate_type+0xa68>
    1060:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1064:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1068:	add	r3, r3, #12
    106c:	lsl	r3, r3, #2
    1070:	add	r3, r2, r3
    1074:	ldr	r3, [r3, #4]
    1078:	mov	r0, r3
    107c:	asr	r1, r0, #31
    1080:	sub	r3, fp, #168	; 0xa8
    1084:	mov	r2, r3
    1088:	bl	0 <coda_str64>
    108c:	sub	r2, fp, #168	; 0xa8
    1090:	sub	r3, fp, #88	; 0x58
    1094:	movw	r1, #0
    1098:	movt	r1, #0
    109c:	mov	r0, r3
    10a0:	bl	160 <fic_printf>
    10a4:	b	1128 <generate_type+0xae8>
    10a8:	ldr	r2, [fp, #-48]	; 0xffffffd0
    10ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
    10b0:	add	r3, r3, #20
    10b4:	lsl	r3, r3, #2
    10b8:	add	r3, r2, r3
    10bc:	ldr	r3, [r3, #4]
    10c0:	cmp	r3, #0
    10c4:	beq	1114 <generate_type+0xad4>
    10c8:	sub	r3, fp, #88	; 0x58
    10cc:	movw	r1, #0
    10d0:	movt	r1, #0
    10d4:	mov	r0, r3
    10d8:	bl	160 <fic_printf>
    10dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    10e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    10e4:	add	r3, r3, #20
    10e8:	lsl	r3, r3, #2
    10ec:	add	r3, r2, r3
    10f0:	ldr	r3, [r3, #4]
    10f4:	movw	r1, #0
    10f8:	movt	r1, #0
    10fc:	mov	r0, r3
    1100:	bl	0 <coda_expression_print_xml>
    1104:	movw	r0, #0
    1108:	movt	r0, #0
    110c:	bl	a4 <ff_printf>
    1110:	b	1128 <generate_type+0xae8>
    1114:	sub	r3, fp, #88	; 0x58
    1118:	movw	r1, #0
    111c:	movt	r1, #0
    1120:	mov	r0, r3
    1124:	bl	160 <fic_printf>
    1128:	ldr	r3, [fp, #-36]	; 0xffffffdc
    112c:	add	r3, r3, #1
    1130:	str	r3, [fp, #-36]	; 0xffffffdc
    1134:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1138:	ldr	r3, [r3, #48]	; 0x30
    113c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1140:	cmp	r2, r3
    1144:	blt	1040 <generate_type+0xa00>
    1148:	ldr	r3, [fp, #-88]	; 0xffffffa8
    114c:	cmp	r3, #0
    1150:	bne	1184 <generate_type+0xb44>
    1154:	movw	r0, #0
    1158:	movt	r0, #0
    115c:	bl	a4 <ff_printf>
    1160:	mov	r3, #1
    1164:	str	r3, [fp, #-88]	; 0xffffffa8
    1168:	movw	r3, #0
    116c:	movt	r3, #0
    1170:	ldr	r3, [r3]
    1174:	add	r2, r3, #1
    1178:	movw	r3, #0
    117c:	movt	r3, #0
    1180:	str	r2, [r3]
    1184:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1188:	ldr	r3, [r3, #40]	; 0x28
    118c:	ldr	r2, [fp, #-76]	; 0xffffffb4
    1190:	mov	r1, r2
    1194:	mov	r0, r3
    1198:	bl	640 <generate_type>
    119c:	b	1610 <generate_type+0xfd0>
    11a0:	ldr	r3, [fp, #-224]	; 0xffffff20
    11a4:	str	r3, [fp, #-52]	; 0xffffffcc
    11a8:	ldr	r3, [fp, #-224]	; 0xffffff20
    11ac:	ldr	r3, [r3, #12]
    11b0:	mov	r0, r3
    11b4:	bl	0 <coda_type_get_native_type_name>
    11b8:	mov	r2, r0
    11bc:	sub	r3, fp, #88	; 0x58
    11c0:	movw	r1, #0
    11c4:	movt	r1, #0
    11c8:	mov	r0, r3
    11cc:	bl	160 <fic_printf>
    11d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    11d4:	ldr	r3, [r3, #40]	; 0x28
    11d8:	cmp	r3, #0
    11dc:	beq	120c <generate_type+0xbcc>
    11e0:	movw	r0, #0
    11e4:	movt	r0, #0
    11e8:	bl	100 <fi_printf>
    11ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
    11f0:	ldr	r3, [r3, #40]	; 0x28
    11f4:	mvn	r1, #0
    11f8:	mov	r0, r3
    11fc:	bl	548 <generate_xml_string>
    1200:	movw	r0, #0
    1204:	movt	r0, #0
    1208:	bl	a4 <ff_printf>
    120c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1210:	ldr	r3, [r3, #44]	; 0x2c
    1214:	cmp	r3, #1
    1218:	bne	1228 <generate_type+0xbe8>
    121c:	movw	r0, #0
    1220:	movt	r0, #0
    1224:	bl	100 <fi_printf>
    1228:	ldr	r3, [fp, #-52]	; 0xffffffcc
    122c:	ldr	r3, [r3, #48]	; 0x30
    1230:	cmp	r3, #0
    1234:	beq	1374 <generate_type+0xd34>
    1238:	ldr	r3, [fp, #-52]	; 0xffffffcc
    123c:	ldr	r3, [r3, #48]	; 0x30
    1240:	ldrd	r0, [r3]
    1244:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1248:	ldr	r3, [r3, #48]	; 0x30
    124c:	ldrd	r2, [r3, #8]
    1250:	strd	r2, [sp]
    1254:	mov	r2, r0
    1258:	mov	r3, r1
    125c:	movw	r0, #0
    1260:	movt	r0, #0
    1264:	bl	100 <fi_printf>
    1268:	ldr	r3, [fp, #-52]	; 0xffffffcc
    126c:	ldr	r3, [r3, #48]	; 0x30
    1270:	vldr	d7, [r3, #16]
    1274:	vcmp.f64	d7, #0.0
    1278:	vmrs	APSR_nzcv, fpscr
    127c:	beq	1298 <generate_type+0xc58>
    1280:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1284:	ldr	r3, [r3, #48]	; 0x30
    1288:	ldrd	r2, [r3, #16]
    128c:	movw	r0, #0
    1290:	movt	r0, #0
    1294:	bl	a4 <ff_printf>
    1298:	ldr	r3, [fp, #-52]	; 0xffffffcc
    129c:	ldr	r3, [r3, #48]	; 0x30
    12a0:	vldr	d7, [r3, #24]
    12a4:	vmov.f64	d0, d7
    12a8:	bl	0 <coda_isNaN>
    12ac:	mov	r3, r0
    12b0:	cmp	r3, #0
    12b4:	bne	12d0 <generate_type+0xc90>
    12b8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    12bc:	ldr	r3, [r3, #48]	; 0x30
    12c0:	ldrd	r2, [r3, #24]
    12c4:	movw	r0, #0
    12c8:	movt	r0, #0
    12cc:	bl	a4 <ff_printf>
    12d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    12d4:	ldr	r3, [r3, #48]	; 0x30
    12d8:	ldr	r3, [r3, #32]
    12dc:	cmp	r3, #0
    12e0:	beq	1368 <generate_type+0xd28>
    12e4:	movw	r0, #0
    12e8:	movt	r0, #0
    12ec:	bl	a4 <ff_printf>
    12f0:	movw	r3, #0
    12f4:	movt	r3, #0
    12f8:	ldr	r3, [r3]
    12fc:	add	r2, r3, #1
    1300:	movw	r3, #0
    1304:	movt	r3, #0
    1308:	str	r2, [r3]
    130c:	movw	r0, #0
    1310:	movt	r0, #0
    1314:	bl	100 <fi_printf>
    1318:	ldr	r3, [fp, #-52]	; 0xffffffcc
    131c:	ldr	r3, [r3, #48]	; 0x30
    1320:	ldr	r3, [r3, #32]
    1324:	mvn	r1, #0
    1328:	mov	r0, r3
    132c:	bl	548 <generate_xml_string>
    1330:	movw	r0, #0
    1334:	movt	r0, #0
    1338:	bl	a4 <ff_printf>
    133c:	movw	r3, #0
    1340:	movt	r3, #0
    1344:	ldr	r3, [r3]
    1348:	sub	r2, r3, #1
    134c:	movw	r3, #0
    1350:	movt	r3, #0
    1354:	str	r2, [r3]
    1358:	movw	r0, #0
    135c:	movt	r0, #0
    1360:	bl	100 <fi_printf>
    1364:	b	1374 <generate_type+0xd34>
    1368:	movw	r0, #0
    136c:	movt	r0, #0
    1370:	bl	a4 <ff_printf>
    1374:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1378:	ldr	r3, [r3, #52]	; 0x34
    137c:	cmp	r3, #0
    1380:	beq	160c <generate_type+0xfcc>
    1384:	mov	r3, #0
    1388:	str	r3, [fp, #-36]	; 0xffffffdc
    138c:	b	1460 <generate_type+0xe20>
    1390:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1394:	ldr	r3, [r3, #52]	; 0x34
    1398:	ldr	r2, [r3, #12]
    139c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    13a0:	lsl	r3, r3, #2
    13a4:	add	r3, r2, r3
    13a8:	ldr	r3, [r3]
    13ac:	str	r3, [fp, #-56]	; 0xffffffc8
    13b0:	movw	r0, #0
    13b4:	movt	r0, #0
    13b8:	bl	100 <fi_printf>
    13bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    13c0:	ldr	r2, [r3, #4]
    13c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    13c8:	ldr	r3, [r3]
    13cc:	mov	r1, r3
    13d0:	mov	r0, r2
    13d4:	bl	208 <generate_escaped_string>
    13d8:	movw	r0, #0
    13dc:	movt	r0, #0
    13e0:	bl	a4 <ff_printf>
    13e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    13e8:	cmp	r3, #2
    13ec:	bne	141c <generate_type+0xddc>
    13f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    13f4:	ldrd	r0, [r3, #8]
    13f8:	sub	r3, fp, #192	; 0xc0
    13fc:	mov	r2, r3
    1400:	bl	0 <coda_str64>
    1404:	sub	r3, fp, #192	; 0xc0
    1408:	mov	r1, r3
    140c:	movw	r0, #0
    1410:	movt	r0, #0
    1414:	bl	a4 <ff_printf>
    1418:	b	1448 <generate_type+0xe08>
    141c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1420:	vldr	d7, [r3, #8]
    1424:	sub	r3, fp, #216	; 0xd8
    1428:	mov	r0, r3
    142c:	vmov.f64	d0, d7
    1430:	bl	0 <coda_strfl>
    1434:	sub	r3, fp, #216	; 0xd8
    1438:	mov	r1, r3
    143c:	movw	r0, #0
    1440:	movt	r0, #0
    1444:	bl	a4 <ff_printf>
    1448:	movw	r0, #0
    144c:	movt	r0, #0
    1450:	bl	a4 <ff_printf>
    1454:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1458:	add	r3, r3, #1
    145c:	str	r3, [fp, #-36]	; 0xffffffdc
    1460:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1464:	ldr	r3, [r3, #52]	; 0x34
    1468:	ldr	r3, [r3, #8]
    146c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1470:	cmp	r2, r3
    1474:	blt	1390 <generate_type+0xd50>
    1478:	b	160c <generate_type+0xfcc>
    147c:	ldr	r3, [fp, #-224]	; 0xffffff20
    1480:	str	r3, [fp, #-60]	; 0xffffffc4
    1484:	ldr	r3, [fp, #-224]	; 0xffffff20
    1488:	ldr	r3, [r3, #12]
    148c:	cmp	r3, #11
    1490:	beq	14bc <generate_type+0xe7c>
    1494:	ldr	r3, [fp, #-224]	; 0xffffff20
    1498:	ldr	r3, [r3, #12]
    149c:	mov	r0, r3
    14a0:	bl	0 <coda_type_get_native_type_name>
    14a4:	mov	r2, r0
    14a8:	sub	r3, fp, #88	; 0x58
    14ac:	movw	r1, #0
    14b0:	movt	r1, #0
    14b4:	mov	r0, r3
    14b8:	bl	160 <fic_printf>
    14bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    14c0:	ldr	r3, [r3, #40]	; 0x28
    14c4:	cmp	r3, #0
    14c8:	beq	1504 <generate_type+0xec4>
    14cc:	sub	r3, fp, #88	; 0x58
    14d0:	movw	r1, #0
    14d4:	movt	r1, #0
    14d8:	mov	r0, r3
    14dc:	bl	160 <fic_printf>
    14e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    14e4:	ldr	r3, [r3, #40]	; 0x28
    14e8:	mvn	r1, #0
    14ec:	mov	r0, r3
    14f0:	bl	208 <generate_escaped_string>
    14f4:	movw	r0, #0
    14f8:	movt	r0, #0
    14fc:	bl	a4 <ff_printf>
    1500:	b	1610 <generate_type+0xfd0>
    1504:	nop	{0}
    1508:	b	1610 <generate_type+0xfd0>
    150c:	ldr	r3, [fp, #-224]	; 0xffffff20
    1510:	str	r3, [fp, #-64]	; 0xffffffc0
    1514:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1518:	ldr	r3, [r3, #44]	; 0x2c
    151c:	cmp	r3, #0
    1520:	beq	1564 <generate_type+0xf24>
    1524:	sub	r3, fp, #88	; 0x58
    1528:	movw	r1, #0
    152c:	movt	r1, #0
    1530:	mov	r0, r3
    1534:	bl	160 <fic_printf>
    1538:	ldr	r3, [fp, #-64]	; 0xffffffc0
    153c:	ldr	r2, [r3, #44]	; 0x2c
    1540:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1544:	ldr	r3, [r3, #40]	; 0x28
    1548:	mov	r1, r3
    154c:	mov	r0, r2
    1550:	bl	208 <generate_escaped_string>
    1554:	movw	r0, #0
    1558:	movt	r0, #0
    155c:	bl	a4 <ff_printf>
    1560:	b	1610 <generate_type+0xfd0>
    1564:	nop	{0}
    1568:	b	1610 <generate_type+0xfd0>
    156c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1570:	cmp	r3, #1
    1574:	bne	15b4 <generate_type+0xf74>
    1578:	ldr	r3, [fp, #-224]	; 0xffffff20
    157c:	ldr	r3, [r3, #48]	; 0x30
    1580:	cmp	r3, #0
    1584:	beq	15b4 <generate_type+0xf74>
    1588:	movw	r0, #0
    158c:	movt	r0, #0
    1590:	bl	100 <fi_printf>
    1594:	ldr	r3, [fp, #-224]	; 0xffffff20
    1598:	ldr	r3, [r3, #48]	; 0x30
    159c:	mvn	r1, #0
    15a0:	mov	r0, r3
    15a4:	bl	548 <generate_xml_string>
    15a8:	movw	r0, #0
    15ac:	movt	r0, #0
    15b0:	bl	a4 <ff_printf>
    15b4:	ldr	r3, [fp, #-88]	; 0xffffffa8
    15b8:	cmp	r3, #0
    15bc:	bne	15f0 <generate_type+0xfb0>
    15c0:	movw	r0, #0
    15c4:	movt	r0, #0
    15c8:	bl	a4 <ff_printf>
    15cc:	mov	r3, #1
    15d0:	str	r3, [fp, #-88]	; 0xffffffa8
    15d4:	movw	r3, #0
    15d8:	movt	r3, #0
    15dc:	ldr	r3, [r3]
    15e0:	add	r2, r3, #1
    15e4:	movw	r3, #0
    15e8:	movt	r3, #0
    15ec:	str	r2, [r3]
    15f0:	ldr	r3, [fp, #-224]	; 0xffffff20
    15f4:	ldr	r3, [r3, #44]	; 0x2c
    15f8:	ldr	r2, [fp, #-76]	; 0xffffffb4
    15fc:	mov	r1, r2
    1600:	mov	r0, r3
    1604:	bl	640 <generate_type>
    1608:	b	1610 <generate_type+0xfd0>
    160c:	nop	{0}
    1610:	ldr	r3, [fp, #-88]	; 0xffffffa8
    1614:	cmp	r3, #0
    1618:	beq	164c <generate_type+0x100c>
    161c:	movw	r3, #0
    1620:	movt	r3, #0
    1624:	ldr	r3, [r3]
    1628:	sub	r2, r3, #1
    162c:	movw	r3, #0
    1630:	movt	r3, #0
    1634:	str	r2, [r3]
    1638:	ldr	r1, [fp, #-32]	; 0xffffffe0
    163c:	movw	r0, #0
    1640:	movt	r0, #0
    1644:	bl	100 <fi_printf>
    1648:	b	1658 <generate_type+0x1018>
    164c:	movw	r0, #0
    1650:	movt	r0, #0
    1654:	bl	a4 <ff_printf>
    1658:	nop	{0}
    165c:	sub	sp, fp, #28
    1660:	ldrd	r4, [sp]
    1664:	ldrd	r6, [sp, #8]
    1668:	ldrd	r8, [sp, #16]
    166c:	ldr	fp, [sp, #24]
    1670:	add	sp, sp, #28
    1674:	pop	{pc}		; (ldr pc, [sp], #4)

00001678 <generate_product_variable>:
    1678:	str	fp, [sp, #-8]!
    167c:	str	lr, [sp, #4]
    1680:	add	fp, sp, #4
    1684:	sub	sp, sp, #8
    1688:	str	r0, [fp, #-8]
    168c:	ldr	r3, [fp, #-8]
    1690:	ldr	r3, [r3]
    1694:	mov	r1, r3
    1698:	movw	r0, #0
    169c:	movt	r0, #0
    16a0:	bl	100 <fi_printf>
    16a4:	movw	r3, #0
    16a8:	movt	r3, #0
    16ac:	ldr	r3, [r3]
    16b0:	add	r2, r3, #1
    16b4:	movw	r3, #0
    16b8:	movt	r3, #0
    16bc:	str	r2, [r3]
    16c0:	ldr	r3, [fp, #-8]
    16c4:	ldr	r3, [r3, #4]
    16c8:	cmp	r3, #0
    16cc:	beq	1700 <generate_product_variable+0x88>
    16d0:	movw	r0, #0
    16d4:	movt	r0, #0
    16d8:	bl	100 <fi_printf>
    16dc:	ldr	r3, [fp, #-8]
    16e0:	ldr	r3, [r3, #4]
    16e4:	movw	r1, #0
    16e8:	movt	r1, #0
    16ec:	mov	r0, r3
    16f0:	bl	0 <coda_expression_print_xml>
    16f4:	movw	r0, #0
    16f8:	movt	r0, #0
    16fc:	bl	a4 <ff_printf>
    1700:	movw	r0, #0
    1704:	movt	r0, #0
    1708:	bl	100 <fi_printf>
    170c:	ldr	r3, [fp, #-8]
    1710:	ldr	r3, [r3, #8]
    1714:	movw	r1, #0
    1718:	movt	r1, #0
    171c:	mov	r0, r3
    1720:	bl	0 <coda_expression_print_xml>
    1724:	movw	r0, #0
    1728:	movt	r0, #0
    172c:	bl	a4 <ff_printf>
    1730:	movw	r3, #0
    1734:	movt	r3, #0
    1738:	ldr	r3, [r3]
    173c:	sub	r2, r3, #1
    1740:	movw	r3, #0
    1744:	movt	r3, #0
    1748:	str	r2, [r3]
    174c:	movw	r0, #0
    1750:	movt	r0, #0
    1754:	bl	100 <fi_printf>
    1758:	nop	{0}
    175c:	sub	sp, fp, #4
    1760:	ldr	fp, [sp]
    1764:	add	sp, sp, #4
    1768:	pop	{pc}		; (ldr pc, [sp], #4)

0000176c <generate_product_definition>:
    176c:	str	fp, [sp, #-8]!
    1770:	str	lr, [sp, #4]
    1774:	add	fp, sp, #4
    1778:	sub	sp, sp, #64	; 0x40
    177c:	str	r0, [fp, #-56]	; 0xffffffc8
    1780:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1784:	ldr	r3, [r3, #24]
    1788:	str	r3, [fp, #-24]	; 0xffffffe8
    178c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1790:	ldr	r3, [r3, #20]
    1794:	ldr	r3, [r3]
    1798:	cmp	r3, #99	; 0x63
    179c:	bhi	17ac <generate_product_definition+0x40>
    17a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    17a4:	ldr	r3, [r3, #20]
    17a8:	b	17b8 <generate_product_definition+0x4c>
    17ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    17b0:	ldr	r3, [r3, #20]
    17b4:	ldr	r3, [r3, #4]
    17b8:	str	r3, [fp, #-8]
    17bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    17c0:	ldr	r3, [r3, #16]
    17c4:	str	r3, [fp, #-12]
    17c8:	movw	r3, #0
    17cc:	movt	r3, #0
    17d0:	str	r3, [fp, #-16]
    17d4:	mov	r3, #0
    17d8:	str	r3, [fp, #-44]	; 0xffffffd4
    17dc:	sub	r1, fp, #40	; 0x28
    17e0:	mov	r2, #0
    17e4:	mov	r3, #0
    17e8:	strd	r2, [r1]
    17ec:	str	r2, [r1, #7]
    17f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17f4:	cmp	r3, #0
    17f8:	beq	1820 <generate_product_definition+0xb4>
    17fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1800:	ldr	r3, [r3, #8]
    1804:	str	r3, [fp, #-16]
    1808:	ldr	r3, [fp, #-24]	; 0xffffffe8
    180c:	ldr	r3, [r3]
    1810:	str	r3, [fp, #-12]
    1814:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1818:	ldr	r3, [r3, #28]
    181c:	str	r3, [fp, #-8]
    1820:	ldr	r3, [fp, #-8]
    1824:	cmp	r3, #0
    1828:	bne	1848 <generate_product_definition+0xdc>
    182c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1830:	ldr	r3, [r3, #16]
    1834:	str	r3, [fp, #-12]
    1838:	ldr	r3, [fp, #-56]	; 0xffffffc8
    183c:	ldr	r3, [r3, #20]
    1840:	ldr	r3, [r3, #4]
    1844:	str	r3, [fp, #-8]
    1848:	mov	r0, #0
    184c:	bl	0 <time>
    1850:	mov	r3, r0
    1854:	str	r3, [fp, #-48]	; 0xffffffd0
    1858:	sub	r3, fp, #48	; 0x30
    185c:	mov	r0, r3
    1860:	bl	0 <localtime>
    1864:	str	r0, [fp, #-28]	; 0xffffffe4
    1868:	ldr	r3, [fp, #-28]	; 0xffffffe4
    186c:	cmp	r3, #0
    1870:	beq	18b0 <generate_product_definition+0x144>
    1874:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1878:	ldr	r3, [r3, #20]
    187c:	add	r2, r3, #1888	; 0x760
    1880:	add	r2, r2, #12
    1884:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1888:	ldr	r3, [r3, #16]
    188c:	add	r1, r3, #1
    1890:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1894:	ldr	r3, [r3, #12]
    1898:	sub	r0, fp, #44	; 0x2c
    189c:	str	r3, [sp]
    18a0:	mov	r3, r1
    18a4:	movw	r1, #0
    18a8:	movt	r1, #0
    18ac:	bl	0 <sprintf>
    18b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    18b4:	ldr	r3, [r3, #16]
    18b8:	mov	r0, r3
    18bc:	bl	0 <coda_type_get_format_name>
    18c0:	mov	r2, r0
    18c4:	sub	r3, fp, #44	; 0x2c
    18c8:	ldr	r1, [fp, #-16]
    18cc:	movw	r0, #0
    18d0:	movt	r0, #0
    18d4:	bl	100 <fi_printf>
    18d8:	movw	r3, #0
    18dc:	movt	r3, #0
    18e0:	ldr	r3, [r3]
    18e4:	add	r2, r3, #1
    18e8:	movw	r3, #0
    18ec:	movt	r3, #0
    18f0:	str	r2, [r3]
    18f4:	ldr	r1, [fp, #-12]
    18f8:	ldr	r0, [fp, #-8]
    18fc:	bl	640 <generate_type>
    1900:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1904:	cmp	r3, #0
    1908:	beq	1958 <generate_product_definition+0x1ec>
    190c:	mov	r3, #0
    1910:	str	r3, [fp, #-20]	; 0xffffffec
    1914:	b	1944 <generate_product_definition+0x1d8>
    1918:	ldr	r3, [fp, #-24]	; 0xffffffe8
    191c:	ldr	r2, [r3, #36]	; 0x24
    1920:	ldr	r3, [fp, #-20]	; 0xffffffec
    1924:	lsl	r3, r3, #2
    1928:	add	r3, r2, r3
    192c:	ldr	r3, [r3]
    1930:	mov	r0, r3
    1934:	bl	1678 <generate_product_variable>
    1938:	ldr	r3, [fp, #-20]	; 0xffffffec
    193c:	add	r3, r3, #1
    1940:	str	r3, [fp, #-20]	; 0xffffffec
    1944:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1948:	ldr	r3, [r3, #32]
    194c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1950:	cmp	r2, r3
    1954:	blt	1918 <generate_product_definition+0x1ac>
    1958:	movw	r3, #0
    195c:	movt	r3, #0
    1960:	ldr	r3, [r3]
    1964:	sub	r2, r3, #1
    1968:	movw	r3, #0
    196c:	movt	r3, #0
    1970:	str	r2, [r3]
    1974:	movw	r0, #0
    1978:	movt	r0, #0
    197c:	bl	100 <fi_printf>
    1980:	nop	{0}
    1984:	sub	sp, fp, #4
    1988:	ldr	fp, [sp]
    198c:	add	sp, sp, #4
    1990:	pop	{pc}		; (ldr pc, [sp], #4)

00001994 <generate_definition>:
    1994:	str	r4, [sp, #-12]!
    1998:	str	fp, [sp, #4]
    199c:	str	lr, [sp, #8]
    19a0:	add	fp, sp, #8
    19a4:	sub	sp, sp, #20
    19a8:	str	r0, [fp, #-24]	; 0xffffffe8
    19ac:	str	r1, [fp, #-28]	; 0xffffffe4
    19b0:	sub	r3, fp, #20
    19b4:	mov	r1, r3
    19b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    19bc:	bl	0 <coda_open>
    19c0:	str	r0, [fp, #-16]
    19c4:	ldr	r3, [fp, #-16]
    19c8:	cmp	r3, #0
    19cc:	beq	1a0c <generate_definition+0x78>
    19d0:	ldr	r3, [pc, #360]	; 1b40 <generate_definition+0x1ac>
    19d4:	ldr	r3, [pc, r3]
    19d8:	mrc	15, 0, r2, cr13, cr0, {3}
    19dc:	ldr	r3, [r2, r3]
    19e0:	cmn	r3, #21
    19e4:	bne	1a0c <generate_definition+0x78>
    19e8:	mov	r0, #0
    19ec:	bl	0 <coda_set_option_use_mmap>
    19f0:	sub	r3, fp, #20
    19f4:	mov	r1, r3
    19f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    19fc:	bl	0 <coda_open>
    1a00:	str	r0, [fp, #-16]
    1a04:	mov	r0, #1
    1a08:	bl	0 <coda_set_option_use_mmap>
    1a0c:	ldr	r3, [fp, #-16]
    1a10:	cmp	r3, #0
    1a14:	beq	1a70 <generate_definition+0xdc>
    1a18:	movw	r3, #0
    1a1c:	movt	r3, #0
    1a20:	ldr	r4, [r3]
    1a24:	ldr	r3, [pc, #280]	; 1b44 <generate_definition+0x1b0>
    1a28:	ldr	r3, [pc, r3]
    1a2c:	mrc	15, 0, r2, cr13, cr0, {3}
    1a30:	ldr	r3, [r2, r3]
    1a34:	mov	r0, r3
    1a38:	bl	0 <coda_errno_to_string>
    1a3c:	mov	r3, r0
    1a40:	mov	r2, r3
    1a44:	movw	r1, #0
    1a48:	movt	r1, #0
    1a4c:	mov	r0, r4
    1a50:	bl	0 <fprintf>
    1a54:	movw	r3, #0
    1a58:	movt	r3, #0
    1a5c:	ldr	r3, [r3]
    1a60:	mov	r0, r3
    1a64:	bl	0 <fflush>
    1a68:	mov	r0, #1
    1a6c:	bl	0 <exit>
    1a70:	movw	r3, #0
    1a74:	movt	r3, #0
    1a78:	ldr	r2, [r3]
    1a7c:	movw	r3, #0
    1a80:	movt	r3, #0
    1a84:	str	r2, [r3]
    1a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a8c:	cmp	r3, #0
    1a90:	beq	1b04 <generate_definition+0x170>
    1a94:	movw	r1, #0
    1a98:	movt	r1, #0
    1a9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1aa0:	bl	0 <fopen>
    1aa4:	mov	r2, r0
    1aa8:	movw	r3, #0
    1aac:	movt	r3, #0
    1ab0:	str	r2, [r3]
    1ab4:	movw	r3, #0
    1ab8:	movt	r3, #0
    1abc:	ldr	r3, [r3]
    1ac0:	cmp	r3, #0
    1ac4:	bne	1b04 <generate_definition+0x170>
    1ac8:	movw	r3, #0
    1acc:	movt	r3, #0
    1ad0:	ldr	r3, [r3]
    1ad4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1ad8:	movw	r1, #0
    1adc:	movt	r1, #0
    1ae0:	mov	r0, r3
    1ae4:	bl	0 <fprintf>
    1ae8:	movw	r3, #0
    1aec:	movt	r3, #0
    1af0:	ldr	r3, [r3]
    1af4:	mov	r0, r3
    1af8:	bl	0 <fflush>
    1afc:	mov	r0, #1
    1b00:	bl	0 <exit>
    1b04:	movw	r0, #0
    1b08:	movt	r0, #0
    1b0c:	bl	a4 <ff_printf>
    1b10:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b14:	mov	r0, r3
    1b18:	bl	176c <generate_product_definition>
    1b1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b20:	mov	r0, r3
    1b24:	bl	0 <coda_close>
    1b28:	nop	{0}
    1b2c:	sub	sp, fp, #8
    1b30:	ldr	r4, [sp]
    1b34:	ldr	fp, [sp, #4]
    1b38:	add	sp, sp, #8
    1b3c:	pop	{pc}		; (ldr pc, [sp], #4)
    1b40:	.word	0x00000164
    1b44:	.word	0x00000114
