
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_lex>:
       0:	str	r4, [sp, #-12]!
       4:	str	fp, [sp, #4]
       8:	str	lr, [sp, #8]
       c:	add	fp, sp, #8
      10:	sub	sp, sp, #44	; 0x2c
      14:	str	r0, [fp, #-48]	; 0xffffffd0
      18:	str	r1, [fp, #-52]	; 0xffffffcc
      1c:	ldr	r3, [fp, #-52]	; 0xffffffcc
      20:	str	r3, [fp, #-36]	; 0xffffffdc
      24:	ldr	r3, [fp, #-36]	; 0xffffffdc
      28:	ldr	r2, [fp, #-48]	; 0xffffffd0
      2c:	str	r2, [r3, #92]	; 0x5c
      30:	ldr	r3, [fp, #-36]	; 0xffffffdc
      34:	ldr	r3, [r3, #40]	; 0x28
      38:	cmp	r3, #0
      3c:	bne	128 <coda_expression_lex+0x128>
      40:	ldr	r3, [fp, #-36]	; 0xffffffdc
      44:	mov	r2, #1
      48:	str	r2, [r3, #40]	; 0x28
      4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
      50:	ldr	r3, [r3, #44]	; 0x2c
      54:	cmp	r3, #0
      58:	bne	68 <coda_expression_lex+0x68>
      5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
      60:	mov	r2, #1
      64:	str	r2, [r3, #44]	; 0x2c
      68:	ldr	r3, [fp, #-36]	; 0xffffffdc
      6c:	ldr	r3, [r3, #4]
      70:	cmp	r3, #0
      74:	bne	8c <coda_expression_lex+0x8c>
      78:	movw	r3, #0
      7c:	movt	r3, #0
      80:	ldr	r2, [r3]
      84:	ldr	r3, [fp, #-36]	; 0xffffffdc
      88:	str	r2, [r3, #4]
      8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
      90:	ldr	r3, [r3, #8]
      94:	cmp	r3, #0
      98:	bne	b0 <coda_expression_lex+0xb0>
      9c:	movw	r3, #0
      a0:	movt	r3, #0
      a4:	ldr	r2, [r3]
      a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
      ac:	str	r2, [r3, #8]
      b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
      b4:	ldr	r3, [r3, #20]
      b8:	cmp	r3, #0
      bc:	beq	e4 <coda_expression_lex+0xe4>
      c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
      c4:	ldr	r2, [r3, #20]
      c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
      cc:	ldr	r3, [r3, #12]
      d0:	lsl	r3, r3, #2
      d4:	add	r3, r2, r3
      d8:	ldr	r3, [r3]
      dc:	cmp	r3, #0
      e0:	bne	120 <coda_expression_lex+0x120>
      e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
      e8:	bl	1ef8 <coda_expression_ensure_buffer_stack>
      ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
      f0:	ldr	r0, [r3, #4]
      f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
      f8:	ldr	r2, [r3, #20]
      fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     100:	ldr	r3, [r3, #12]
     104:	lsl	r3, r3, #2
     108:	add	r4, r2, r3
     10c:	ldr	r2, [fp, #-52]	; 0xffffffcc
     110:	mov	r1, #16384	; 0x4000
     114:	bl	1900 <coda_expression__create_buffer>
     118:	mov	r3, r0
     11c:	str	r3, [r4]
     120:	ldr	r0, [fp, #-52]	; 0xffffffcc
     124:	bl	183c <coda_expression__load_buffer_state>
     128:	ldr	r3, [fp, #-36]	; 0xffffffdc
     12c:	ldr	r3, [r3, #36]	; 0x24
     130:	str	r3, [fp, #-20]	; 0xffffffec
     134:	ldr	r3, [fp, #-36]	; 0xffffffdc
     138:	ldrb	r2, [r3, #24]
     13c:	ldr	r3, [fp, #-20]	; 0xffffffec
     140:	strb	r2, [r3]
     144:	ldr	r3, [fp, #-20]	; 0xffffffec
     148:	str	r3, [fp, #-24]	; 0xffffffe8
     14c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     150:	ldr	r3, [r3, #44]	; 0x2c
     154:	str	r3, [fp, #-16]
     158:	b	160 <coda_expression_lex+0x160>
     15c:	nop	{0}
     160:	ldr	r3, [fp, #-20]	; 0xffffffec
     164:	ldrb	r3, [r3]
     168:	mov	r2, r3
     16c:	movw	r3, #0
     170:	movt	r3, #0
     174:	ldrb	r3, [r3, r2]
     178:	strb	r3, [fp, #-29]	; 0xffffffe3
     17c:	movw	r3, #0
     180:	movt	r3, #0
     184:	ldr	r2, [fp, #-16]
     188:	lsl	r2, r2, #1
     18c:	add	r3, r3, r2
     190:	ldrsh	r3, [r3]
     194:	cmp	r3, #0
     198:	beq	1f8 <coda_expression_lex+0x1f8>
     19c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     1a0:	ldr	r2, [fp, #-16]
     1a4:	str	r2, [r3, #64]	; 0x40
     1a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     1ac:	ldr	r2, [fp, #-20]	; 0xffffffec
     1b0:	str	r2, [r3, #68]	; 0x44
     1b4:	b	1f8 <coda_expression_lex+0x1f8>
     1b8:	movw	r3, #0
     1bc:	movt	r3, #0
     1c0:	ldr	r2, [fp, #-16]
     1c4:	lsl	r2, r2, #1
     1c8:	add	r3, r3, r2
     1cc:	ldrsh	r3, [r3]
     1d0:	str	r3, [fp, #-16]
     1d4:	ldr	r3, [fp, #-16]
     1d8:	movw	r2, #273	; 0x111
     1dc:	cmp	r3, r2
     1e0:	ble	1f8 <coda_expression_lex+0x1f8>
     1e4:	ldrb	r2, [fp, #-29]	; 0xffffffe3
     1e8:	movw	r3, #0
     1ec:	movt	r3, #0
     1f0:	ldrb	r3, [r3, r2]
     1f4:	strb	r3, [fp, #-29]	; 0xffffffe3
     1f8:	movw	r3, #0
     1fc:	movt	r3, #0
     200:	ldr	r2, [fp, #-16]
     204:	lsl	r2, r2, #1
     208:	add	r3, r3, r2
     20c:	ldrsh	r3, [r3]
     210:	mov	r2, r3
     214:	ldrb	r3, [fp, #-29]	; 0xffffffe3
     218:	add	r2, r2, r3
     21c:	movw	r3, #0
     220:	movt	r3, #0
     224:	lsl	r2, r2, #1
     228:	add	r3, r3, r2
     22c:	ldrsh	r3, [r3]
     230:	mov	r2, r3
     234:	ldr	r3, [fp, #-16]
     238:	cmp	r3, r2
     23c:	bne	1b8 <coda_expression_lex+0x1b8>
     240:	movw	r3, #0
     244:	movt	r3, #0
     248:	ldr	r2, [fp, #-16]
     24c:	lsl	r2, r2, #1
     250:	add	r3, r3, r2
     254:	ldrsh	r3, [r3]
     258:	mov	r2, r3
     25c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
     260:	add	r2, r2, r3
     264:	movw	r3, #0
     268:	movt	r3, #0
     26c:	lsl	r2, r2, #1
     270:	add	r3, r3, r2
     274:	ldrsh	r3, [r3]
     278:	str	r3, [fp, #-16]
     27c:	ldr	r3, [fp, #-20]	; 0xffffffec
     280:	add	r3, r3, #1
     284:	str	r3, [fp, #-20]	; 0xffffffec
     288:	movw	r3, #0
     28c:	movt	r3, #0
     290:	ldr	r2, [fp, #-16]
     294:	lsl	r2, r2, #1
     298:	add	r3, r3, r2
     29c:	ldrsh	r3, [r3]
     2a0:	movw	r2, #307	; 0x133
     2a4:	cmp	r3, r2
     2a8:	bne	15c <coda_expression_lex+0x15c>
     2ac:	nop	{0}
     2b0:	movw	r3, #0
     2b4:	movt	r3, #0
     2b8:	ldr	r2, [fp, #-16]
     2bc:	lsl	r2, r2, #1
     2c0:	add	r3, r3, r2
     2c4:	ldrsh	r3, [r3]
     2c8:	str	r3, [fp, #-28]	; 0xffffffe4
     2cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     2d0:	cmp	r3, #0
     2d4:	bne	30c <coda_expression_lex+0x30c>
     2d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     2dc:	ldr	r3, [r3, #68]	; 0x44
     2e0:	str	r3, [fp, #-20]	; 0xffffffec
     2e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     2e8:	ldr	r3, [r3, #64]	; 0x40
     2ec:	str	r3, [fp, #-16]
     2f0:	movw	r3, #0
     2f4:	movt	r3, #0
     2f8:	ldr	r2, [fp, #-16]
     2fc:	lsl	r2, r2, #1
     300:	add	r3, r3, r2
     304:	ldrsh	r3, [r3]
     308:	str	r3, [fp, #-28]	; 0xffffffe4
     30c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     310:	ldr	r2, [fp, #-24]	; 0xffffffe8
     314:	str	r2, [r3, #80]	; 0x50
     318:	ldr	r2, [fp, #-20]	; 0xffffffec
     31c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     320:	sub	r2, r2, r3
     324:	ldr	r3, [fp, #-36]	; 0xffffffdc
     328:	str	r2, [r3, #32]
     32c:	ldr	r3, [fp, #-20]	; 0xffffffec
     330:	ldrb	r2, [r3]
     334:	ldr	r3, [fp, #-36]	; 0xffffffdc
     338:	strb	r2, [r3, #24]
     33c:	ldr	r3, [fp, #-20]	; 0xffffffec
     340:	mov	r2, #0
     344:	strb	r2, [r3]
     348:	ldr	r3, [fp, #-36]	; 0xffffffdc
     34c:	ldr	r2, [fp, #-20]	; 0xffffffec
     350:	str	r2, [r3, #36]	; 0x24
     354:	ldr	r3, [fp, #-28]	; 0xffffffe4
     358:	cmp	r3, #76	; 0x4c
     35c:	ldrls	pc, [pc, r3, lsl #2]
     360:	b	ac0 <coda_expression_lex+0xac0>
     364:	.word	0x00000498
     368:	.word	0x000004c4
     36c:	.word	0x00000544
     370:	.word	0x0000054c
     374:	.word	0x00000554
     378:	.word	0x0000055c
     37c:	.word	0x00000564
     380:	.word	0x0000056c
     384:	.word	0x00000574
     388:	.word	0x0000057c
     38c:	.word	0x00000584
     390:	.word	0x0000058c
     394:	.word	0x00000594
     398:	.word	0x0000059c
     39c:	.word	0x000005a4
     3a0:	.word	0x000005ac
     3a4:	.word	0x000005b4
     3a8:	.word	0x000005bc
     3ac:	.word	0x000005c4
     3b0:	.word	0x000005cc
     3b4:	.word	0x000005d4
     3b8:	.word	0x000005dc
     3bc:	.word	0x000005e4
     3c0:	.word	0x000005ec
     3c4:	.word	0x000005f4
     3c8:	.word	0x000005fc
     3cc:	.word	0x00000604
     3d0:	.word	0x0000060c
     3d4:	.word	0x00000614
     3d8:	.word	0x0000061c
     3dc:	.word	0x00000624
     3e0:	.word	0x0000062c
     3e4:	.word	0x00000634
     3e8:	.word	0x0000063c
     3ec:	.word	0x00000644
     3f0:	.word	0x0000064c
     3f4:	.word	0x00000654
     3f8:	.word	0x0000065c
     3fc:	.word	0x00000664
     400:	.word	0x0000066c
     404:	.word	0x00000674
     408:	.word	0x0000067c
     40c:	.word	0x00000684
     410:	.word	0x0000068c
     414:	.word	0x00000694
     418:	.word	0x0000069c
     41c:	.word	0x000006a4
     420:	.word	0x000006ac
     424:	.word	0x000006b4
     428:	.word	0x000006bc
     42c:	.word	0x000006c4
     430:	.word	0x000006cc
     434:	.word	0x000006d4
     438:	.word	0x000006dc
     43c:	.word	0x000006e4
     440:	.word	0x000006ec
     444:	.word	0x000006f4
     448:	.word	0x000006fc
     44c:	.word	0x00000704
     450:	.word	0x0000070c
     454:	.word	0x00000714
     458:	.word	0x0000071c
     45c:	.word	0x00000724
     460:	.word	0x0000072c
     464:	.word	0x00000734
     468:	.word	0x0000073c
     46c:	.word	0x00000744
     470:	.word	0x0000074c
     474:	.word	0x00000754
     478:	.word	0x0000077c
     47c:	.word	0x000007a4
     480:	.word	0x000007cc
     484:	.word	0x00000ad0
     488:	.word	0x000007f4
     48c:	.word	0x00000804
     490:	.word	0x00000834
     494:	.word	0x0000082c
     498:	ldr	r3, [fp, #-36]	; 0xffffffdc
     49c:	ldrb	r2, [r3, #24]
     4a0:	ldr	r3, [fp, #-20]	; 0xffffffec
     4a4:	strb	r2, [r3]
     4a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4ac:	ldr	r3, [r3, #68]	; 0x44
     4b0:	str	r3, [fp, #-20]	; 0xffffffec
     4b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4b8:	ldr	r3, [r3, #64]	; 0x40
     4bc:	str	r3, [fp, #-16]
     4c0:	b	2b0 <coda_expression_lex+0x2b0>
     4c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4c8:	ldr	r3, [r3, #32]
     4cc:	sub	r3, r3, #1
     4d0:	mov	r2, r3
     4d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4d8:	ldr	r4, [r3, #92]	; 0x5c
     4dc:	mov	r0, r2
     4e0:	bl	0 <malloc>
     4e4:	mov	r3, r0
     4e8:	str	r3, [r4]
     4ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4f0:	ldr	r3, [r3, #92]	; 0x5c
     4f4:	ldr	r0, [r3]
     4f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4fc:	ldr	r3, [r3, #80]	; 0x50
     500:	add	r1, r3, #1
     504:	ldr	r3, [fp, #-36]	; 0xffffffdc
     508:	ldr	r3, [r3, #32]
     50c:	sub	r3, r3, #2
     510:	mov	r2, r3
     514:	bl	0 <memcpy>
     518:	ldr	r3, [fp, #-36]	; 0xffffffdc
     51c:	ldr	r3, [r3, #92]	; 0x5c
     520:	ldr	r2, [r3]
     524:	ldr	r3, [fp, #-36]	; 0xffffffdc
     528:	ldr	r3, [r3, #32]
     52c:	sub	r3, r3, #2
     530:	add	r3, r2, r3
     534:	mov	r2, #0
     538:	strb	r2, [r3]
     53c:	mov	r3, #260	; 0x104
     540:	b	ad8 <coda_expression_lex+0xad8>
     544:	movw	r3, #266	; 0x10a
     548:	b	ad8 <coda_expression_lex+0xad8>
     54c:	movw	r3, #267	; 0x10b
     550:	b	ad8 <coda_expression_lex+0xad8>
     554:	mov	r3, #268	; 0x10c
     558:	b	ad8 <coda_expression_lex+0xad8>
     55c:	movw	r3, #269	; 0x10d
     560:	b	ad8 <coda_expression_lex+0xad8>
     564:	movw	r3, #270	; 0x10e
     568:	b	ad8 <coda_expression_lex+0xad8>
     56c:	movw	r3, #271	; 0x10f
     570:	b	ad8 <coda_expression_lex+0xad8>
     574:	movw	r3, #263	; 0x107
     578:	b	ad8 <coda_expression_lex+0xad8>
     57c:	mov	r3, #264	; 0x108
     580:	b	ad8 <coda_expression_lex+0xad8>
     584:	movw	r3, #265	; 0x109
     588:	b	ad8 <coda_expression_lex+0xad8>
     58c:	movw	r3, #273	; 0x111
     590:	b	ad8 <coda_expression_lex+0xad8>
     594:	movw	r3, #274	; 0x112
     598:	b	ad8 <coda_expression_lex+0xad8>
     59c:	movw	r3, #275	; 0x113
     5a0:	b	ad8 <coda_expression_lex+0xad8>
     5a4:	mov	r3, #276	; 0x114
     5a8:	b	ad8 <coda_expression_lex+0xad8>
     5ac:	movw	r3, #277	; 0x115
     5b0:	b	ad8 <coda_expression_lex+0xad8>
     5b4:	movw	r3, #278	; 0x116
     5b8:	b	ad8 <coda_expression_lex+0xad8>
     5bc:	movw	r3, #279	; 0x117
     5c0:	b	ad8 <coda_expression_lex+0xad8>
     5c4:	mov	r3, #280	; 0x118
     5c8:	b	ad8 <coda_expression_lex+0xad8>
     5cc:	movw	r3, #281	; 0x119
     5d0:	b	ad8 <coda_expression_lex+0xad8>
     5d4:	movw	r3, #282	; 0x11a
     5d8:	b	ad8 <coda_expression_lex+0xad8>
     5dc:	movw	r3, #283	; 0x11b
     5e0:	b	ad8 <coda_expression_lex+0xad8>
     5e4:	mov	r3, #284	; 0x11c
     5e8:	b	ad8 <coda_expression_lex+0xad8>
     5ec:	movw	r3, #285	; 0x11d
     5f0:	b	ad8 <coda_expression_lex+0xad8>
     5f4:	movw	r3, #286	; 0x11e
     5f8:	b	ad8 <coda_expression_lex+0xad8>
     5fc:	movw	r3, #287	; 0x11f
     600:	b	ad8 <coda_expression_lex+0xad8>
     604:	mov	r3, #288	; 0x120
     608:	b	ad8 <coda_expression_lex+0xad8>
     60c:	movw	r3, #289	; 0x121
     610:	b	ad8 <coda_expression_lex+0xad8>
     614:	movw	r3, #290	; 0x122
     618:	b	ad8 <coda_expression_lex+0xad8>
     61c:	movw	r3, #291	; 0x123
     620:	b	ad8 <coda_expression_lex+0xad8>
     624:	mov	r3, #292	; 0x124
     628:	b	ad8 <coda_expression_lex+0xad8>
     62c:	movw	r3, #293	; 0x125
     630:	b	ad8 <coda_expression_lex+0xad8>
     634:	movw	r3, #294	; 0x126
     638:	b	ad8 <coda_expression_lex+0xad8>
     63c:	movw	r3, #295	; 0x127
     640:	b	ad8 <coda_expression_lex+0xad8>
     644:	mov	r3, #296	; 0x128
     648:	b	ad8 <coda_expression_lex+0xad8>
     64c:	movw	r3, #297	; 0x129
     650:	b	ad8 <coda_expression_lex+0xad8>
     654:	movw	r3, #298	; 0x12a
     658:	b	ad8 <coda_expression_lex+0xad8>
     65c:	movw	r3, #299	; 0x12b
     660:	b	ad8 <coda_expression_lex+0xad8>
     664:	mov	r3, #300	; 0x12c
     668:	b	ad8 <coda_expression_lex+0xad8>
     66c:	movw	r3, #301	; 0x12d
     670:	b	ad8 <coda_expression_lex+0xad8>
     674:	movw	r3, #302	; 0x12e
     678:	b	ad8 <coda_expression_lex+0xad8>
     67c:	movw	r3, #303	; 0x12f
     680:	b	ad8 <coda_expression_lex+0xad8>
     684:	mov	r3, #304	; 0x130
     688:	b	ad8 <coda_expression_lex+0xad8>
     68c:	movw	r3, #305	; 0x131
     690:	b	ad8 <coda_expression_lex+0xad8>
     694:	movw	r3, #306	; 0x132
     698:	b	ad8 <coda_expression_lex+0xad8>
     69c:	movw	r3, #307	; 0x133
     6a0:	b	ad8 <coda_expression_lex+0xad8>
     6a4:	mov	r3, #308	; 0x134
     6a8:	b	ad8 <coda_expression_lex+0xad8>
     6ac:	movw	r3, #309	; 0x135
     6b0:	b	ad8 <coda_expression_lex+0xad8>
     6b4:	movw	r3, #310	; 0x136
     6b8:	b	ad8 <coda_expression_lex+0xad8>
     6bc:	movw	r3, #311	; 0x137
     6c0:	b	ad8 <coda_expression_lex+0xad8>
     6c4:	mov	r3, #312	; 0x138
     6c8:	b	ad8 <coda_expression_lex+0xad8>
     6cc:	movw	r3, #313	; 0x139
     6d0:	b	ad8 <coda_expression_lex+0xad8>
     6d4:	movw	r3, #314	; 0x13a
     6d8:	b	ad8 <coda_expression_lex+0xad8>
     6dc:	movw	r3, #315	; 0x13b
     6e0:	b	ad8 <coda_expression_lex+0xad8>
     6e4:	mov	r3, #316	; 0x13c
     6e8:	b	ad8 <coda_expression_lex+0xad8>
     6ec:	movw	r3, #317	; 0x13d
     6f0:	b	ad8 <coda_expression_lex+0xad8>
     6f4:	movw	r3, #318	; 0x13e
     6f8:	b	ad8 <coda_expression_lex+0xad8>
     6fc:	movw	r3, #319	; 0x13f
     700:	b	ad8 <coda_expression_lex+0xad8>
     704:	mov	r3, #320	; 0x140
     708:	b	ad8 <coda_expression_lex+0xad8>
     70c:	movw	r3, #321	; 0x141
     710:	b	ad8 <coda_expression_lex+0xad8>
     714:	movw	r3, #322	; 0x142
     718:	b	ad8 <coda_expression_lex+0xad8>
     71c:	movw	r3, #323	; 0x143
     720:	b	ad8 <coda_expression_lex+0xad8>
     724:	mov	r3, #324	; 0x144
     728:	b	ad8 <coda_expression_lex+0xad8>
     72c:	movw	r3, #325	; 0x145
     730:	b	ad8 <coda_expression_lex+0xad8>
     734:	movw	r3, #326	; 0x146
     738:	b	ad8 <coda_expression_lex+0xad8>
     73c:	movw	r3, #327	; 0x147
     740:	b	ad8 <coda_expression_lex+0xad8>
     744:	mov	r3, #328	; 0x148
     748:	b	ad8 <coda_expression_lex+0xad8>
     74c:	movw	r3, #329	; 0x149
     750:	b	ad8 <coda_expression_lex+0xad8>
     754:	ldr	r3, [fp, #-36]	; 0xffffffdc
     758:	ldr	r2, [r3, #80]	; 0x50
     75c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     760:	ldr	r4, [r3, #92]	; 0x5c
     764:	mov	r0, r2
     768:	bl	0 <strdup>
     76c:	mov	r3, r0
     770:	str	r3, [r4]
     774:	movw	r3, #262	; 0x106
     778:	b	ad8 <coda_expression_lex+0xad8>
     77c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     780:	ldr	r2, [r3, #80]	; 0x50
     784:	ldr	r3, [fp, #-36]	; 0xffffffdc
     788:	ldr	r4, [r3, #92]	; 0x5c
     78c:	mov	r0, r2
     790:	bl	0 <strdup>
     794:	mov	r3, r0
     798:	str	r3, [r4]
     79c:	movw	r3, #261	; 0x105
     7a0:	b	ad8 <coda_expression_lex+0xad8>
     7a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7a8:	ldr	r2, [r3, #80]	; 0x50
     7ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7b0:	ldr	r4, [r3, #92]	; 0x5c
     7b4:	mov	r0, r2
     7b8:	bl	0 <strdup>
     7bc:	mov	r3, r0
     7c0:	str	r3, [r4]
     7c4:	movw	r3, #258	; 0x102
     7c8:	b	ad8 <coda_expression_lex+0xad8>
     7cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7d0:	ldr	r2, [r3, #80]	; 0x50
     7d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7d8:	ldr	r4, [r3, #92]	; 0x5c
     7dc:	mov	r0, r2
     7e0:	bl	0 <strdup>
     7e4:	mov	r3, r0
     7e8:	str	r3, [r4]
     7ec:	movw	r3, #259	; 0x103
     7f0:	b	ad8 <coda_expression_lex+0xad8>
     7f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7f8:	ldr	r3, [r3, #80]	; 0x50
     7fc:	ldrb	r3, [r3]
     800:	b	ad8 <coda_expression_lex+0xad8>
     804:	ldr	r3, [fp, #-36]	; 0xffffffdc
     808:	ldr	r0, [r3, #80]	; 0x50
     80c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     810:	ldr	r3, [r3, #32]
     814:	mov	r1, r3
     818:	ldr	r3, [fp, #-36]	; 0xffffffdc
     81c:	ldr	r3, [r3, #8]
     820:	mov	r2, #1
     824:	bl	0 <fwrite>
     828:	b	ad4 <coda_expression_lex+0xad4>
     82c:	mov	r3, #0
     830:	b	ad8 <coda_expression_lex+0xad8>
     834:	ldr	r3, [fp, #-36]	; 0xffffffdc
     838:	ldr	r3, [r3, #80]	; 0x50
     83c:	ldr	r2, [fp, #-20]	; 0xffffffec
     840:	sub	r3, r2, r3
     844:	sub	r3, r3, #1
     848:	str	r3, [fp, #-40]	; 0xffffffd8
     84c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     850:	ldrb	r2, [r3, #24]
     854:	ldr	r3, [fp, #-20]	; 0xffffffec
     858:	strb	r2, [r3]
     85c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     860:	ldr	r2, [r3, #20]
     864:	ldr	r3, [fp, #-36]	; 0xffffffdc
     868:	ldr	r3, [r3, #12]
     86c:	lsl	r3, r3, #2
     870:	add	r3, r2, r3
     874:	ldr	r3, [r3]
     878:	ldr	r3, [r3, #44]	; 0x2c
     87c:	cmp	r3, #0
     880:	bne	8f8 <coda_expression_lex+0x8f8>
     884:	ldr	r3, [fp, #-36]	; 0xffffffdc
     888:	ldr	r2, [r3, #20]
     88c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     890:	ldr	r3, [r3, #12]
     894:	lsl	r3, r3, #2
     898:	add	r3, r2, r3
     89c:	ldr	r3, [r3]
     8a0:	ldr	r2, [r3, #16]
     8a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8a8:	str	r2, [r3, #28]
     8ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8b0:	ldr	r2, [r3, #20]
     8b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8b8:	ldr	r3, [r3, #12]
     8bc:	lsl	r3, r3, #2
     8c0:	add	r3, r2, r3
     8c4:	ldr	r3, [r3]
     8c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     8cc:	ldr	r2, [r2, #4]
     8d0:	str	r2, [r3]
     8d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8d8:	ldr	r2, [r3, #20]
     8dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8e0:	ldr	r3, [r3, #12]
     8e4:	lsl	r3, r3, #2
     8e8:	add	r3, r2, r3
     8ec:	ldr	r3, [r3]
     8f0:	mov	r2, #1
     8f4:	str	r2, [r3, #44]	; 0x2c
     8f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8fc:	ldr	r2, [r3, #36]	; 0x24
     900:	ldr	r3, [fp, #-36]	; 0xffffffdc
     904:	ldr	r1, [r3, #20]
     908:	ldr	r3, [fp, #-36]	; 0xffffffdc
     90c:	ldr	r3, [r3, #12]
     910:	lsl	r3, r3, #2
     914:	add	r3, r1, r3
     918:	ldr	r3, [r3]
     91c:	ldr	r3, [r3, #4]
     920:	ldr	r1, [fp, #-36]	; 0xffffffdc
     924:	ldr	r1, [r1, #28]
     928:	add	r3, r3, r1
     92c:	cmp	r2, r3
     930:	bhi	9bc <coda_expression_lex+0x9bc>
     934:	ldr	r3, [fp, #-36]	; 0xffffffdc
     938:	ldr	r2, [r3, #80]	; 0x50
     93c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     940:	add	r2, r2, r3
     944:	ldr	r3, [fp, #-36]	; 0xffffffdc
     948:	str	r2, [r3, #36]	; 0x24
     94c:	ldr	r0, [fp, #-52]	; 0xffffffcc
     950:	bl	12e8 <yy_get_previous_state>
     954:	str	r0, [fp, #-16]
     958:	ldr	r1, [fp, #-52]	; 0xffffffcc
     95c:	ldr	r0, [fp, #-16]
     960:	bl	1484 <yy_try_NUL_trans>
     964:	str	r0, [fp, #-44]	; 0xffffffd4
     968:	ldr	r3, [fp, #-36]	; 0xffffffdc
     96c:	ldr	r3, [r3, #80]	; 0x50
     970:	str	r3, [fp, #-24]	; 0xffffffe8
     974:	ldr	r3, [fp, #-44]	; 0xffffffd4
     978:	cmp	r3, #0
     97c:	beq	9ac <coda_expression_lex+0x9ac>
     980:	ldr	r3, [fp, #-36]	; 0xffffffdc
     984:	ldr	r3, [r3, #36]	; 0x24
     988:	add	r2, r3, #1
     98c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     990:	str	r2, [r3, #36]	; 0x24
     994:	ldr	r3, [fp, #-36]	; 0xffffffdc
     998:	ldr	r3, [r3, #36]	; 0x24
     99c:	str	r3, [fp, #-20]	; 0xffffffec
     9a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     9a4:	str	r3, [fp, #-16]
     9a8:	b	160 <coda_expression_lex+0x160>
     9ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9b0:	ldr	r3, [r3, #36]	; 0x24
     9b4:	str	r3, [fp, #-20]	; 0xffffffec
     9b8:	b	2b0 <coda_expression_lex+0x2b0>
     9bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
     9c0:	bl	af0 <yy_get_next_buffer>
     9c4:	mov	r3, r0
     9c8:	cmp	r3, #1
     9cc:	beq	9e4 <coda_expression_lex+0x9e4>
     9d0:	cmp	r3, #2
     9d4:	beq	a64 <coda_expression_lex+0xa64>
     9d8:	cmp	r3, #0
     9dc:	beq	a24 <coda_expression_lex+0xa24>
     9e0:	b	ad4 <coda_expression_lex+0xad4>
     9e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9e8:	mov	r2, #0
     9ec:	str	r2, [r3, #48]	; 0x30
     9f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9f4:	ldr	r2, [r3, #80]	; 0x50
     9f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9fc:	str	r2, [r3, #36]	; 0x24
     a00:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a04:	ldr	r3, [r3, #44]	; 0x2c
     a08:	sub	r3, r3, #1
     a0c:	lsr	r2, r3, #31
     a10:	add	r3, r2, r3
     a14:	asr	r3, r3, #1
     a18:	add	r3, r3, #76	; 0x4c
     a1c:	str	r3, [fp, #-28]	; 0xffffffe4
     a20:	b	354 <coda_expression_lex+0x354>
     a24:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a28:	ldr	r2, [r3, #80]	; 0x50
     a2c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     a30:	add	r2, r2, r3
     a34:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a38:	str	r2, [r3, #36]	; 0x24
     a3c:	ldr	r0, [fp, #-52]	; 0xffffffcc
     a40:	bl	12e8 <yy_get_previous_state>
     a44:	str	r0, [fp, #-16]
     a48:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a4c:	ldr	r3, [r3, #36]	; 0x24
     a50:	str	r3, [fp, #-20]	; 0xffffffec
     a54:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a58:	ldr	r3, [r3, #80]	; 0x50
     a5c:	str	r3, [fp, #-24]	; 0xffffffe8
     a60:	b	160 <coda_expression_lex+0x160>
     a64:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a68:	ldr	r2, [r3, #20]
     a6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a70:	ldr	r3, [r3, #12]
     a74:	lsl	r3, r3, #2
     a78:	add	r3, r2, r3
     a7c:	ldr	r3, [r3]
     a80:	ldr	r3, [r3, #4]
     a84:	ldr	r2, [fp, #-36]	; 0xffffffdc
     a88:	ldr	r2, [r2, #28]
     a8c:	add	r2, r3, r2
     a90:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a94:	str	r2, [r3, #36]	; 0x24
     a98:	ldr	r0, [fp, #-52]	; 0xffffffcc
     a9c:	bl	12e8 <yy_get_previous_state>
     aa0:	str	r0, [fp, #-16]
     aa4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     aa8:	ldr	r3, [r3, #36]	; 0x24
     aac:	str	r3, [fp, #-20]	; 0xffffffec
     ab0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     ab4:	ldr	r3, [r3, #80]	; 0x50
     ab8:	str	r3, [fp, #-24]	; 0xffffffe8
     abc:	b	2b0 <coda_expression_lex+0x2b0>
     ac0:	ldr	r1, [fp, #-52]	; 0xffffffcc
     ac4:	movw	r0, #0
     ac8:	movt	r0, #0
     acc:	bl	2314 <yy_fatal_error>
     ad0:	nop	{0}
     ad4:	b	128 <coda_expression_lex+0x128>
     ad8:	mov	r0, r3
     adc:	sub	sp, fp, #8
     ae0:	ldr	r4, [sp]
     ae4:	ldr	fp, [sp, #4]
     ae8:	add	sp, sp, #8
     aec:	pop	{pc}		; (ldr pc, [sp], #4)

00000af0 <yy_get_next_buffer>:
     af0:	str	r4, [sp, #-12]!
     af4:	str	fp, [sp, #4]
     af8:	str	lr, [sp, #8]
     afc:	add	fp, sp, #8
     b00:	sub	sp, sp, #68	; 0x44
     b04:	str	r0, [fp, #-72]	; 0xffffffb8
     b08:	ldr	r3, [fp, #-72]	; 0xffffffb8
     b0c:	str	r3, [fp, #-44]	; 0xffffffd4
     b10:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b14:	ldr	r2, [r3, #20]
     b18:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b1c:	ldr	r3, [r3, #12]
     b20:	lsl	r3, r3, #2
     b24:	add	r3, r2, r3
     b28:	ldr	r3, [r3]
     b2c:	ldr	r3, [r3, #4]
     b30:	str	r3, [fp, #-16]
     b34:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b38:	ldr	r3, [r3, #80]	; 0x50
     b3c:	str	r3, [fp, #-20]	; 0xffffffec
     b40:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b44:	ldr	r2, [r3, #36]	; 0x24
     b48:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b4c:	ldr	r1, [r3, #20]
     b50:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b54:	ldr	r3, [r3, #12]
     b58:	lsl	r3, r3, #2
     b5c:	add	r3, r1, r3
     b60:	ldr	r3, [r3]
     b64:	ldr	r1, [r3, #4]
     b68:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b6c:	ldr	r3, [r3, #28]
     b70:	add	r3, r3, #1
     b74:	add	r3, r1, r3
     b78:	cmp	r2, r3
     b7c:	bls	b90 <yy_get_next_buffer+0xa0>
     b80:	ldr	r1, [fp, #-72]	; 0xffffffb8
     b84:	movw	r0, #0
     b88:	movt	r0, #0
     b8c:	bl	2314 <yy_fatal_error>
     b90:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b94:	ldr	r2, [r3, #20]
     b98:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b9c:	ldr	r3, [r3, #12]
     ba0:	lsl	r3, r3, #2
     ba4:	add	r3, r2, r3
     ba8:	ldr	r3, [r3]
     bac:	ldr	r3, [r3, #40]	; 0x28
     bb0:	cmp	r3, #0
     bb4:	bne	be4 <yy_get_next_buffer+0xf4>
     bb8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bbc:	ldr	r2, [r3, #36]	; 0x24
     bc0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bc4:	ldr	r3, [r3, #80]	; 0x50
     bc8:	sub	r3, r2, r3
     bcc:	cmp	r3, #1
     bd0:	bne	bdc <yy_get_next_buffer+0xec>
     bd4:	mov	r3, #1
     bd8:	b	12d0 <yy_get_next_buffer+0x7e0>
     bdc:	mov	r3, #2
     be0:	b	12d0 <yy_get_next_buffer+0x7e0>
     be4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     be8:	ldr	r2, [r3, #36]	; 0x24
     bec:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bf0:	ldr	r3, [r3, #80]	; 0x50
     bf4:	sub	r3, r2, r3
     bf8:	sub	r3, r3, #1
     bfc:	str	r3, [fp, #-48]	; 0xffffffd0
     c00:	mov	r3, #0
     c04:	str	r3, [fp, #-24]	; 0xffffffe8
     c08:	b	c38 <yy_get_next_buffer+0x148>
     c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
     c10:	add	r3, r2, #1
     c14:	str	r3, [fp, #-20]	; 0xffffffec
     c18:	ldr	r3, [fp, #-16]
     c1c:	add	r1, r3, #1
     c20:	str	r1, [fp, #-16]
     c24:	ldrb	r2, [r2]
     c28:	strb	r2, [r3]
     c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c30:	add	r3, r3, #1
     c34:	str	r3, [fp, #-24]	; 0xffffffe8
     c38:	ldr	r2, [fp, #-24]	; 0xffffffe8
     c3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     c40:	cmp	r2, r3
     c44:	blt	c0c <yy_get_next_buffer+0x11c>
     c48:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c4c:	ldr	r2, [r3, #20]
     c50:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c54:	ldr	r3, [r3, #12]
     c58:	lsl	r3, r3, #2
     c5c:	add	r3, r2, r3
     c60:	ldr	r3, [r3]
     c64:	ldr	r3, [r3, #44]	; 0x2c
     c68:	cmp	r3, #2
     c6c:	bne	ca8 <yy_get_next_buffer+0x1b8>
     c70:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c74:	mov	r2, #0
     c78:	str	r2, [r3, #28]
     c7c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c80:	ldr	r2, [r3, #20]
     c84:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c88:	ldr	r3, [r3, #12]
     c8c:	lsl	r3, r3, #2
     c90:	add	r3, r2, r3
     c94:	ldr	r3, [r3]
     c98:	ldr	r2, [fp, #-44]	; 0xffffffd4
     c9c:	ldr	r2, [r2, #28]
     ca0:	str	r2, [r3, #16]
     ca4:	b	10a0 <yy_get_next_buffer+0x5b0>
     ca8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     cac:	ldr	r2, [r3, #20]
     cb0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     cb4:	ldr	r3, [r3, #12]
     cb8:	lsl	r3, r3, #2
     cbc:	add	r3, r2, r3
     cc0:	ldr	r3, [r3]
     cc4:	ldr	r2, [r3, #12]
     cc8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ccc:	sub	r3, r2, r3
     cd0:	sub	r3, r3, #1
     cd4:	str	r3, [fp, #-32]	; 0xffffffe0
     cd8:	b	e2c <yy_get_next_buffer+0x33c>
     cdc:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ce0:	ldr	r2, [r3, #20]
     ce4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ce8:	ldr	r3, [r3, #12]
     cec:	lsl	r3, r3, #2
     cf0:	add	r3, r2, r3
     cf4:	ldr	r3, [r3]
     cf8:	str	r3, [fp, #-52]	; 0xffffffcc
     cfc:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d00:	ldr	r2, [r3, #36]	; 0x24
     d04:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d08:	ldr	r3, [r3, #4]
     d0c:	sub	r3, r2, r3
     d10:	str	r3, [fp, #-56]	; 0xffffffc8
     d14:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d18:	ldr	r3, [r3, #20]
     d1c:	cmp	r3, #0
     d20:	beq	db8 <yy_get_next_buffer+0x2c8>
     d24:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d28:	ldr	r3, [r3, #12]
     d2c:	lsl	r3, r3, #1
     d30:	str	r3, [fp, #-60]	; 0xffffffc4
     d34:	ldr	r3, [fp, #-60]	; 0xffffffc4
     d38:	cmp	r3, #0
     d3c:	bgt	d74 <yy_get_next_buffer+0x284>
     d40:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d44:	ldr	r2, [r3, #12]
     d48:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d4c:	ldr	r3, [r3, #12]
     d50:	add	r1, r3, #7
     d54:	cmp	r3, #0
     d58:	movlt	r3, r1
     d5c:	movge	r3, r3
     d60:	asr	r3, r3, #3
     d64:	add	r2, r2, r3
     d68:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d6c:	str	r2, [r3, #12]
     d70:	b	d88 <yy_get_next_buffer+0x298>
     d74:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d78:	ldr	r3, [r3, #12]
     d7c:	lsl	r2, r3, #1
     d80:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d84:	str	r2, [r3, #12]
     d88:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d8c:	ldr	r0, [r3, #4]
     d90:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d94:	ldr	r3, [r3, #12]
     d98:	add	r3, r3, #2
     d9c:	ldr	r2, [fp, #-72]	; 0xffffffb8
     da0:	mov	r1, r3
     da4:	bl	2bc0 <coda_expression_realloc>
     da8:	mov	r2, r0
     dac:	ldr	r3, [fp, #-52]	; 0xffffffcc
     db0:	str	r2, [r3, #4]
     db4:	b	dc4 <yy_get_next_buffer+0x2d4>
     db8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     dbc:	mov	r2, #0
     dc0:	str	r2, [r3, #4]
     dc4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     dc8:	ldr	r3, [r3, #4]
     dcc:	cmp	r3, #0
     dd0:	bne	de4 <yy_get_next_buffer+0x2f4>
     dd4:	ldr	r1, [fp, #-72]	; 0xffffffb8
     dd8:	movw	r0, #0
     ddc:	movt	r0, #0
     de0:	bl	2314 <yy_fatal_error>
     de4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     de8:	ldr	r2, [r3, #4]
     dec:	ldr	r3, [fp, #-56]	; 0xffffffc8
     df0:	add	r2, r2, r3
     df4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     df8:	str	r2, [r3, #36]	; 0x24
     dfc:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e00:	ldr	r2, [r3, #20]
     e04:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e08:	ldr	r3, [r3, #12]
     e0c:	lsl	r3, r3, #2
     e10:	add	r3, r2, r3
     e14:	ldr	r3, [r3]
     e18:	ldr	r2, [r3, #12]
     e1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     e20:	sub	r3, r2, r3
     e24:	sub	r3, r3, #1
     e28:	str	r3, [fp, #-32]	; 0xffffffe0
     e2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e30:	cmp	r3, #0
     e34:	ble	cdc <yy_get_next_buffer+0x1ec>
     e38:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e3c:	cmp	r3, #8192	; 0x2000
     e40:	ble	e4c <yy_get_next_buffer+0x35c>
     e44:	mov	r3, #8192	; 0x2000
     e48:	str	r3, [fp, #-32]	; 0xffffffe0
     e4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e50:	ldr	r2, [r3, #20]
     e54:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e58:	ldr	r3, [r3, #12]
     e5c:	lsl	r3, r3, #2
     e60:	add	r3, r2, r3
     e64:	ldr	r3, [r3]
     e68:	ldr	r3, [r3, #24]
     e6c:	cmp	r3, #0
     e70:	beq	fa8 <yy_get_next_buffer+0x4b8>
     e74:	mov	r3, #42	; 0x2a
     e78:	str	r3, [fp, #-36]	; 0xffffffdc
     e7c:	mov	r3, #0
     e80:	str	r3, [fp, #-40]	; 0xffffffd8
     e84:	b	ed0 <yy_get_next_buffer+0x3e0>
     e88:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e8c:	ldr	r2, [r3, #20]
     e90:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e94:	ldr	r3, [r3, #12]
     e98:	lsl	r3, r3, #2
     e9c:	add	r3, r2, r3
     ea0:	ldr	r3, [r3]
     ea4:	ldr	r2, [r3, #4]
     ea8:	ldr	r1, [fp, #-48]	; 0xffffffd0
     eac:	ldr	r3, [fp, #-40]	; 0xffffffd8
     eb0:	add	r3, r1, r3
     eb4:	add	r3, r2, r3
     eb8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ebc:	uxtb	r2, r2
     ec0:	strb	r2, [r3]
     ec4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     ec8:	add	r3, r3, #1
     ecc:	str	r3, [fp, #-40]	; 0xffffffd8
     ed0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     ed4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ed8:	cmp	r2, r3
     edc:	bge	f0c <yy_get_next_buffer+0x41c>
     ee0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ee4:	ldr	r3, [r3, #4]
     ee8:	mov	r0, r3
     eec:	bl	0 <getc>
     ef0:	str	r0, [fp, #-36]	; 0xffffffdc
     ef4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     ef8:	cmn	r3, #1
     efc:	beq	f0c <yy_get_next_buffer+0x41c>
     f00:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f04:	cmp	r3, #10
     f08:	bne	e88 <yy_get_next_buffer+0x398>
     f0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f10:	cmp	r3, #10
     f14:	bne	f60 <yy_get_next_buffer+0x470>
     f18:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f1c:	ldr	r2, [r3, #20]
     f20:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f24:	ldr	r3, [r3, #12]
     f28:	lsl	r3, r3, #2
     f2c:	add	r3, r2, r3
     f30:	ldr	r3, [r3]
     f34:	ldr	r2, [r3, #4]
     f38:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f3c:	add	r1, r3, #1
     f40:	str	r1, [fp, #-40]	; 0xffffffd8
     f44:	mov	r1, r3
     f48:	ldr	r3, [fp, #-48]	; 0xffffffd0
     f4c:	add	r3, r1, r3
     f50:	add	r3, r2, r3
     f54:	ldr	r2, [fp, #-36]	; 0xffffffdc
     f58:	uxtb	r2, r2
     f5c:	strb	r2, [r3]
     f60:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f64:	cmn	r3, #1
     f68:	bne	f98 <yy_get_next_buffer+0x4a8>
     f6c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f70:	ldr	r3, [r3, #4]
     f74:	mov	r0, r3
     f78:	bl	0 <ferror>
     f7c:	mov	r3, r0
     f80:	cmp	r3, #0
     f84:	beq	f98 <yy_get_next_buffer+0x4a8>
     f88:	ldr	r1, [fp, #-72]	; 0xffffffb8
     f8c:	movw	r0, #0
     f90:	movt	r0, #0
     f94:	bl	2314 <yy_fatal_error>
     f98:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f9c:	ldr	r2, [fp, #-40]	; 0xffffffd8
     fa0:	str	r2, [r3, #28]
     fa4:	b	1078 <yy_get_next_buffer+0x588>
     fa8:	bl	0 <__errno_location>
     fac:	mov	r2, r0
     fb0:	mov	r3, #0
     fb4:	str	r3, [r2]
     fb8:	b	1000 <yy_get_next_buffer+0x510>
     fbc:	bl	0 <__errno_location>
     fc0:	mov	r3, r0
     fc4:	ldr	r3, [r3]
     fc8:	cmp	r3, #4
     fcc:	beq	fe0 <yy_get_next_buffer+0x4f0>
     fd0:	ldr	r1, [fp, #-72]	; 0xffffffb8
     fd4:	movw	r0, #0
     fd8:	movt	r0, #0
     fdc:	bl	2314 <yy_fatal_error>
     fe0:	bl	0 <__errno_location>
     fe4:	mov	r2, r0
     fe8:	mov	r3, #0
     fec:	str	r3, [r2]
     ff0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ff4:	ldr	r3, [r3, #4]
     ff8:	mov	r0, r3
     ffc:	bl	0 <clearerr>
    1000:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1004:	ldr	r2, [r3, #20]
    1008:	ldr	r3, [fp, #-44]	; 0xffffffd4
    100c:	ldr	r3, [r3, #12]
    1010:	lsl	r3, r3, #2
    1014:	add	r3, r2, r3
    1018:	ldr	r3, [r3]
    101c:	ldr	r2, [r3, #4]
    1020:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1024:	add	r0, r2, r3
    1028:	ldr	r2, [fp, #-32]	; 0xffffffe0
    102c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1030:	ldr	r3, [r3, #4]
    1034:	mov	r1, #1
    1038:	bl	0 <fread>
    103c:	mov	r3, r0
    1040:	mov	r2, r3
    1044:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1048:	str	r2, [r3, #28]
    104c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1050:	ldr	r3, [r3, #28]
    1054:	cmp	r3, #0
    1058:	bne	1078 <yy_get_next_buffer+0x588>
    105c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1060:	ldr	r3, [r3, #4]
    1064:	mov	r0, r3
    1068:	bl	0 <ferror>
    106c:	mov	r3, r0
    1070:	cmp	r3, #0
    1074:	bne	fbc <yy_get_next_buffer+0x4cc>
    1078:	ldr	r3, [fp, #-44]	; 0xffffffd4
    107c:	ldr	r2, [r3, #20]
    1080:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1084:	ldr	r3, [r3, #12]
    1088:	lsl	r3, r3, #2
    108c:	add	r3, r2, r3
    1090:	ldr	r3, [r3]
    1094:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1098:	ldr	r2, [r2, #28]
    109c:	str	r2, [r3, #16]
    10a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10a4:	ldr	r3, [r3, #28]
    10a8:	cmp	r3, #0
    10ac:	bne	110c <yy_get_next_buffer+0x61c>
    10b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    10b4:	cmp	r3, #0
    10b8:	bne	10dc <yy_get_next_buffer+0x5ec>
    10bc:	mov	r3, #1
    10c0:	str	r3, [fp, #-28]	; 0xffffffe4
    10c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10c8:	ldr	r3, [r3, #4]
    10cc:	ldr	r1, [fp, #-72]	; 0xffffffb8
    10d0:	mov	r0, r3
    10d4:	bl	15f8 <coda_expression_restart>
    10d8:	b	1114 <yy_get_next_buffer+0x624>
    10dc:	mov	r3, #2
    10e0:	str	r3, [fp, #-28]	; 0xffffffe4
    10e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10e8:	ldr	r2, [r3, #20]
    10ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10f0:	ldr	r3, [r3, #12]
    10f4:	lsl	r3, r3, #2
    10f8:	add	r3, r2, r3
    10fc:	ldr	r3, [r3]
    1100:	mov	r2, #2
    1104:	str	r2, [r3, #44]	; 0x2c
    1108:	b	1114 <yy_get_next_buffer+0x624>
    110c:	mov	r3, #0
    1110:	str	r3, [fp, #-28]	; 0xffffffe4
    1114:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1118:	ldr	r2, [r3, #28]
    111c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1120:	add	r2, r2, r3
    1124:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1128:	ldr	r1, [r3, #20]
    112c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1130:	ldr	r3, [r3, #12]
    1134:	lsl	r3, r3, #2
    1138:	add	r3, r1, r3
    113c:	ldr	r3, [r3]
    1140:	ldr	r3, [r3, #12]
    1144:	cmp	r2, r3
    1148:	ble	1220 <yy_get_next_buffer+0x730>
    114c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1150:	ldr	r2, [r3, #28]
    1154:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1158:	add	r2, r2, r3
    115c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1160:	ldr	r3, [r3, #28]
    1164:	asr	r3, r3, #1
    1168:	add	r3, r2, r3
    116c:	str	r3, [fp, #-64]	; 0xffffffc0
    1170:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1174:	ldr	r2, [r3, #20]
    1178:	ldr	r3, [fp, #-44]	; 0xffffffd4
    117c:	ldr	r3, [r3, #12]
    1180:	lsl	r3, r3, #2
    1184:	add	r3, r2, r3
    1188:	ldr	r3, [r3]
    118c:	ldr	r0, [r3, #4]
    1190:	ldr	r1, [fp, #-64]	; 0xffffffc0
    1194:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1198:	ldr	r2, [r3, #20]
    119c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11a0:	ldr	r3, [r3, #12]
    11a4:	lsl	r3, r3, #2
    11a8:	add	r3, r2, r3
    11ac:	ldr	r4, [r3]
    11b0:	ldr	r2, [fp, #-72]	; 0xffffffb8
    11b4:	bl	2bc0 <coda_expression_realloc>
    11b8:	mov	r3, r0
    11bc:	str	r3, [r4, #4]
    11c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11c4:	ldr	r2, [r3, #20]
    11c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11cc:	ldr	r3, [r3, #12]
    11d0:	lsl	r3, r3, #2
    11d4:	add	r3, r2, r3
    11d8:	ldr	r3, [r3]
    11dc:	ldr	r3, [r3, #4]
    11e0:	cmp	r3, #0
    11e4:	bne	11f8 <yy_get_next_buffer+0x708>
    11e8:	ldr	r1, [fp, #-72]	; 0xffffffb8
    11ec:	movw	r0, #0
    11f0:	movt	r0, #0
    11f4:	bl	2314 <yy_fatal_error>
    11f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11fc:	ldr	r2, [r3, #20]
    1200:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1204:	ldr	r3, [r3, #12]
    1208:	lsl	r3, r3, #2
    120c:	add	r3, r2, r3
    1210:	ldr	r3, [r3]
    1214:	ldr	r2, [fp, #-64]	; 0xffffffc0
    1218:	sub	r2, r2, #2
    121c:	str	r2, [r3, #12]
    1220:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1224:	ldr	r2, [r3, #28]
    1228:	ldr	r3, [fp, #-48]	; 0xffffffd0
    122c:	add	r2, r2, r3
    1230:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1234:	str	r2, [r3, #28]
    1238:	ldr	r3, [fp, #-44]	; 0xffffffd4
    123c:	ldr	r2, [r3, #20]
    1240:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1244:	ldr	r3, [r3, #12]
    1248:	lsl	r3, r3, #2
    124c:	add	r3, r2, r3
    1250:	ldr	r3, [r3]
    1254:	ldr	r3, [r3, #4]
    1258:	ldr	r2, [fp, #-44]	; 0xffffffd4
    125c:	ldr	r2, [r2, #28]
    1260:	add	r3, r3, r2
    1264:	mov	r2, #0
    1268:	strb	r2, [r3]
    126c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1270:	ldr	r2, [r3, #20]
    1274:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1278:	ldr	r3, [r3, #12]
    127c:	lsl	r3, r3, #2
    1280:	add	r3, r2, r3
    1284:	ldr	r3, [r3]
    1288:	ldr	r2, [r3, #4]
    128c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1290:	ldr	r3, [r3, #28]
    1294:	add	r3, r3, #1
    1298:	add	r3, r2, r3
    129c:	mov	r2, #0
    12a0:	strb	r2, [r3]
    12a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12a8:	ldr	r2, [r3, #20]
    12ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12b0:	ldr	r3, [r3, #12]
    12b4:	lsl	r3, r3, #2
    12b8:	add	r3, r2, r3
    12bc:	ldr	r3, [r3]
    12c0:	ldr	r2, [r3, #4]
    12c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12c8:	str	r2, [r3, #80]	; 0x50
    12cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    12d0:	mov	r0, r3
    12d4:	sub	sp, fp, #8
    12d8:	ldr	r4, [sp]
    12dc:	ldr	fp, [sp, #4]
    12e0:	add	sp, sp, #8
    12e4:	pop	{pc}		; (ldr pc, [sp], #4)

000012e8 <yy_get_previous_state>:
    12e8:	push	{fp}		; (str fp, [sp, #-4]!)
    12ec:	add	fp, sp, #0
    12f0:	sub	sp, sp, #28
    12f4:	str	r0, [fp, #-24]	; 0xffffffe8
    12f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12fc:	str	r3, [fp, #-20]	; 0xffffffec
    1300:	ldr	r3, [fp, #-20]	; 0xffffffec
    1304:	ldr	r3, [r3, #44]	; 0x2c
    1308:	str	r3, [fp, #-8]
    130c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1310:	ldr	r3, [r3, #80]	; 0x50
    1314:	str	r3, [fp, #-12]
    1318:	b	145c <yy_get_previous_state+0x174>
    131c:	ldr	r3, [fp, #-12]
    1320:	ldrb	r3, [r3]
    1324:	cmp	r3, #0
    1328:	beq	1348 <yy_get_previous_state+0x60>
    132c:	ldr	r3, [fp, #-12]
    1330:	ldrb	r3, [r3]
    1334:	mov	r2, r3
    1338:	movw	r3, #0
    133c:	movt	r3, #0
    1340:	ldrb	r3, [r3, r2]
    1344:	b	134c <yy_get_previous_state+0x64>
    1348:	mov	r3, #1
    134c:	strb	r3, [fp, #-13]
    1350:	movw	r3, #0
    1354:	movt	r3, #0
    1358:	ldr	r2, [fp, #-8]
    135c:	lsl	r2, r2, #1
    1360:	add	r3, r3, r2
    1364:	ldrsh	r3, [r3]
    1368:	cmp	r3, #0
    136c:	beq	13cc <yy_get_previous_state+0xe4>
    1370:	ldr	r3, [fp, #-20]	; 0xffffffec
    1374:	ldr	r2, [fp, #-8]
    1378:	str	r2, [r3, #64]	; 0x40
    137c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1380:	ldr	r2, [fp, #-12]
    1384:	str	r2, [r3, #68]	; 0x44
    1388:	b	13cc <yy_get_previous_state+0xe4>
    138c:	movw	r3, #0
    1390:	movt	r3, #0
    1394:	ldr	r2, [fp, #-8]
    1398:	lsl	r2, r2, #1
    139c:	add	r3, r3, r2
    13a0:	ldrsh	r3, [r3]
    13a4:	str	r3, [fp, #-8]
    13a8:	ldr	r3, [fp, #-8]
    13ac:	movw	r2, #273	; 0x111
    13b0:	cmp	r3, r2
    13b4:	ble	13cc <yy_get_previous_state+0xe4>
    13b8:	ldrb	r2, [fp, #-13]
    13bc:	movw	r3, #0
    13c0:	movt	r3, #0
    13c4:	ldrb	r3, [r3, r2]
    13c8:	strb	r3, [fp, #-13]
    13cc:	movw	r3, #0
    13d0:	movt	r3, #0
    13d4:	ldr	r2, [fp, #-8]
    13d8:	lsl	r2, r2, #1
    13dc:	add	r3, r3, r2
    13e0:	ldrsh	r3, [r3]
    13e4:	mov	r2, r3
    13e8:	ldrb	r3, [fp, #-13]
    13ec:	add	r2, r2, r3
    13f0:	movw	r3, #0
    13f4:	movt	r3, #0
    13f8:	lsl	r2, r2, #1
    13fc:	add	r3, r3, r2
    1400:	ldrsh	r3, [r3]
    1404:	mov	r2, r3
    1408:	ldr	r3, [fp, #-8]
    140c:	cmp	r3, r2
    1410:	bne	138c <yy_get_previous_state+0xa4>
    1414:	movw	r3, #0
    1418:	movt	r3, #0
    141c:	ldr	r2, [fp, #-8]
    1420:	lsl	r2, r2, #1
    1424:	add	r3, r3, r2
    1428:	ldrsh	r3, [r3]
    142c:	mov	r2, r3
    1430:	ldrb	r3, [fp, #-13]
    1434:	add	r2, r2, r3
    1438:	movw	r3, #0
    143c:	movt	r3, #0
    1440:	lsl	r2, r2, #1
    1444:	add	r3, r3, r2
    1448:	ldrsh	r3, [r3]
    144c:	str	r3, [fp, #-8]
    1450:	ldr	r3, [fp, #-12]
    1454:	add	r3, r3, #1
    1458:	str	r3, [fp, #-12]
    145c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1460:	ldr	r3, [r3, #36]	; 0x24
    1464:	ldr	r2, [fp, #-12]
    1468:	cmp	r2, r3
    146c:	bcc	131c <yy_get_previous_state+0x34>
    1470:	ldr	r3, [fp, #-8]
    1474:	mov	r0, r3
    1478:	add	sp, fp, #0
    147c:	pop	{fp}		; (ldr fp, [sp], #4)
    1480:	bx	lr

00001484 <yy_try_NUL_trans>:
    1484:	push	{fp}		; (str fp, [sp, #-4]!)
    1488:	add	fp, sp, #0
    148c:	sub	sp, sp, #28
    1490:	str	r0, [fp, #-24]	; 0xffffffe8
    1494:	str	r1, [fp, #-28]	; 0xffffffe4
    1498:	ldr	r3, [fp, #-28]	; 0xffffffe4
    149c:	str	r3, [fp, #-12]
    14a0:	ldr	r3, [fp, #-12]
    14a4:	ldr	r3, [r3, #36]	; 0x24
    14a8:	str	r3, [fp, #-16]
    14ac:	mov	r3, #1
    14b0:	strb	r3, [fp, #-5]
    14b4:	movw	r3, #0
    14b8:	movt	r3, #0
    14bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14c0:	lsl	r2, r2, #1
    14c4:	add	r3, r3, r2
    14c8:	ldrsh	r3, [r3]
    14cc:	cmp	r3, #0
    14d0:	beq	1530 <yy_try_NUL_trans+0xac>
    14d4:	ldr	r3, [fp, #-12]
    14d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14dc:	str	r2, [r3, #64]	; 0x40
    14e0:	ldr	r3, [fp, #-12]
    14e4:	ldr	r2, [fp, #-16]
    14e8:	str	r2, [r3, #68]	; 0x44
    14ec:	b	1530 <yy_try_NUL_trans+0xac>
    14f0:	movw	r3, #0
    14f4:	movt	r3, #0
    14f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14fc:	lsl	r2, r2, #1
    1500:	add	r3, r3, r2
    1504:	ldrsh	r3, [r3]
    1508:	str	r3, [fp, #-24]	; 0xffffffe8
    150c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1510:	movw	r2, #273	; 0x111
    1514:	cmp	r3, r2
    1518:	ble	1530 <yy_try_NUL_trans+0xac>
    151c:	ldrb	r2, [fp, #-5]
    1520:	movw	r3, #0
    1524:	movt	r3, #0
    1528:	ldrb	r3, [r3, r2]
    152c:	strb	r3, [fp, #-5]
    1530:	movw	r3, #0
    1534:	movt	r3, #0
    1538:	ldr	r2, [fp, #-24]	; 0xffffffe8
    153c:	lsl	r2, r2, #1
    1540:	add	r3, r3, r2
    1544:	ldrsh	r3, [r3]
    1548:	mov	r2, r3
    154c:	ldrb	r3, [fp, #-5]
    1550:	add	r2, r2, r3
    1554:	movw	r3, #0
    1558:	movt	r3, #0
    155c:	lsl	r2, r2, #1
    1560:	add	r3, r3, r2
    1564:	ldrsh	r3, [r3]
    1568:	mov	r2, r3
    156c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1570:	cmp	r3, r2
    1574:	bne	14f0 <yy_try_NUL_trans+0x6c>
    1578:	movw	r3, #0
    157c:	movt	r3, #0
    1580:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1584:	lsl	r2, r2, #1
    1588:	add	r3, r3, r2
    158c:	ldrsh	r3, [r3]
    1590:	mov	r2, r3
    1594:	ldrb	r3, [fp, #-5]
    1598:	add	r2, r2, r3
    159c:	movw	r3, #0
    15a0:	movt	r3, #0
    15a4:	lsl	r2, r2, #1
    15a8:	add	r3, r3, r2
    15ac:	ldrsh	r3, [r3]
    15b0:	str	r3, [fp, #-24]	; 0xffffffe8
    15b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15b8:	movw	r2, #273	; 0x111
    15bc:	cmp	r3, r2
    15c0:	moveq	r3, #1
    15c4:	movne	r3, #0
    15c8:	uxtb	r3, r3
    15cc:	str	r3, [fp, #-20]	; 0xffffffec
    15d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    15d4:	cmp	r3, #0
    15d8:	bne	15e4 <yy_try_NUL_trans+0x160>
    15dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15e0:	b	15e8 <yy_try_NUL_trans+0x164>
    15e4:	mov	r3, #0
    15e8:	mov	r0, r3
    15ec:	add	sp, fp, #0
    15f0:	pop	{fp}		; (ldr fp, [sp], #4)
    15f4:	bx	lr

000015f8 <coda_expression_restart>:
    15f8:	str	r4, [sp, #-12]!
    15fc:	str	fp, [sp, #4]
    1600:	str	lr, [sp, #8]
    1604:	add	fp, sp, #8
    1608:	sub	sp, sp, #20
    160c:	str	r0, [fp, #-24]	; 0xffffffe8
    1610:	str	r1, [fp, #-28]	; 0xffffffe4
    1614:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1618:	str	r3, [fp, #-16]
    161c:	ldr	r3, [fp, #-16]
    1620:	ldr	r3, [r3, #20]
    1624:	cmp	r3, #0
    1628:	beq	1650 <coda_expression_restart+0x58>
    162c:	ldr	r3, [fp, #-16]
    1630:	ldr	r2, [r3, #20]
    1634:	ldr	r3, [fp, #-16]
    1638:	ldr	r3, [r3, #12]
    163c:	lsl	r3, r3, #2
    1640:	add	r3, r2, r3
    1644:	ldr	r3, [r3]
    1648:	cmp	r3, #0
    164c:	bne	168c <coda_expression_restart+0x94>
    1650:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1654:	bl	1ef8 <coda_expression_ensure_buffer_stack>
    1658:	ldr	r3, [fp, #-16]
    165c:	ldr	r0, [r3, #4]
    1660:	ldr	r3, [fp, #-16]
    1664:	ldr	r2, [r3, #20]
    1668:	ldr	r3, [fp, #-16]
    166c:	ldr	r3, [r3, #12]
    1670:	lsl	r3, r3, #2
    1674:	add	r4, r2, r3
    1678:	ldr	r2, [fp, #-28]	; 0xffffffe4
    167c:	mov	r1, #16384	; 0x4000
    1680:	bl	1900 <coda_expression__create_buffer>
    1684:	mov	r3, r0
    1688:	str	r3, [r4]
    168c:	ldr	r3, [fp, #-16]
    1690:	ldr	r3, [r3, #20]
    1694:	cmp	r3, #0
    1698:	beq	16bc <coda_expression_restart+0xc4>
    169c:	ldr	r3, [fp, #-16]
    16a0:	ldr	r2, [r3, #20]
    16a4:	ldr	r3, [fp, #-16]
    16a8:	ldr	r3, [r3, #12]
    16ac:	lsl	r3, r3, #2
    16b0:	add	r3, r2, r3
    16b4:	ldr	r3, [r3]
    16b8:	b	16c0 <coda_expression_restart+0xc8>
    16bc:	mov	r3, #0
    16c0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    16c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    16c8:	mov	r0, r3
    16cc:	bl	1aa0 <coda_expression__init_buffer>
    16d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    16d4:	bl	183c <coda_expression__load_buffer_state>
    16d8:	nop	{0}
    16dc:	sub	sp, fp, #8
    16e0:	ldr	r4, [sp]
    16e4:	ldr	fp, [sp, #4]
    16e8:	add	sp, sp, #8
    16ec:	pop	{pc}		; (ldr pc, [sp], #4)

000016f0 <coda_expression__switch_to_buffer>:
    16f0:	str	fp, [sp, #-8]!
    16f4:	str	lr, [sp, #4]
    16f8:	add	fp, sp, #4
    16fc:	sub	sp, sp, #16
    1700:	str	r0, [fp, #-16]
    1704:	str	r1, [fp, #-20]	; 0xffffffec
    1708:	ldr	r3, [fp, #-20]	; 0xffffffec
    170c:	str	r3, [fp, #-8]
    1710:	ldr	r0, [fp, #-20]	; 0xffffffec
    1714:	bl	1ef8 <coda_expression_ensure_buffer_stack>
    1718:	ldr	r3, [fp, #-8]
    171c:	ldr	r3, [r3, #20]
    1720:	cmp	r3, #0
    1724:	beq	1748 <coda_expression__switch_to_buffer+0x58>
    1728:	ldr	r3, [fp, #-8]
    172c:	ldr	r2, [r3, #20]
    1730:	ldr	r3, [fp, #-8]
    1734:	ldr	r3, [r3, #12]
    1738:	lsl	r3, r3, #2
    173c:	add	r3, r2, r3
    1740:	ldr	r3, [r3]
    1744:	b	174c <coda_expression__switch_to_buffer+0x5c>
    1748:	mov	r3, #0
    174c:	ldr	r2, [fp, #-16]
    1750:	cmp	r3, r2
    1754:	beq	1828 <coda_expression__switch_to_buffer+0x138>
    1758:	ldr	r3, [fp, #-8]
    175c:	ldr	r3, [r3, #20]
    1760:	cmp	r3, #0
    1764:	beq	17f0 <coda_expression__switch_to_buffer+0x100>
    1768:	ldr	r3, [fp, #-8]
    176c:	ldr	r2, [r3, #20]
    1770:	ldr	r3, [fp, #-8]
    1774:	ldr	r3, [r3, #12]
    1778:	lsl	r3, r3, #2
    177c:	add	r3, r2, r3
    1780:	ldr	r3, [r3]
    1784:	cmp	r3, #0
    1788:	beq	17f0 <coda_expression__switch_to_buffer+0x100>
    178c:	ldr	r3, [fp, #-8]
    1790:	ldr	r3, [r3, #36]	; 0x24
    1794:	ldr	r2, [fp, #-8]
    1798:	ldrb	r2, [r2, #24]
    179c:	strb	r2, [r3]
    17a0:	ldr	r3, [fp, #-8]
    17a4:	ldr	r2, [r3, #20]
    17a8:	ldr	r3, [fp, #-8]
    17ac:	ldr	r3, [r3, #12]
    17b0:	lsl	r3, r3, #2
    17b4:	add	r3, r2, r3
    17b8:	ldr	r3, [r3]
    17bc:	ldr	r2, [fp, #-8]
    17c0:	ldr	r2, [r2, #36]	; 0x24
    17c4:	str	r2, [r3, #8]
    17c8:	ldr	r3, [fp, #-8]
    17cc:	ldr	r2, [r3, #20]
    17d0:	ldr	r3, [fp, #-8]
    17d4:	ldr	r3, [r3, #12]
    17d8:	lsl	r3, r3, #2
    17dc:	add	r3, r2, r3
    17e0:	ldr	r3, [r3]
    17e4:	ldr	r2, [fp, #-8]
    17e8:	ldr	r2, [r2, #28]
    17ec:	str	r2, [r3, #16]
    17f0:	ldr	r3, [fp, #-8]
    17f4:	ldr	r2, [r3, #20]
    17f8:	ldr	r3, [fp, #-8]
    17fc:	ldr	r3, [r3, #12]
    1800:	lsl	r3, r3, #2
    1804:	add	r3, r2, r3
    1808:	ldr	r2, [fp, #-16]
    180c:	str	r2, [r3]
    1810:	ldr	r0, [fp, #-20]	; 0xffffffec
    1814:	bl	183c <coda_expression__load_buffer_state>
    1818:	ldr	r3, [fp, #-8]
    181c:	mov	r2, #1
    1820:	str	r2, [r3, #48]	; 0x30
    1824:	b	182c <coda_expression__switch_to_buffer+0x13c>
    1828:	nop	{0}
    182c:	sub	sp, fp, #4
    1830:	ldr	fp, [sp]
    1834:	add	sp, sp, #4
    1838:	pop	{pc}		; (ldr pc, [sp], #4)

0000183c <coda_expression__load_buffer_state>:
    183c:	push	{fp}		; (str fp, [sp, #-4]!)
    1840:	add	fp, sp, #0
    1844:	sub	sp, sp, #20
    1848:	str	r0, [fp, #-16]
    184c:	ldr	r3, [fp, #-16]
    1850:	str	r3, [fp, #-8]
    1854:	ldr	r3, [fp, #-8]
    1858:	ldr	r2, [r3, #20]
    185c:	ldr	r3, [fp, #-8]
    1860:	ldr	r3, [r3, #12]
    1864:	lsl	r3, r3, #2
    1868:	add	r3, r2, r3
    186c:	ldr	r3, [r3]
    1870:	ldr	r2, [r3, #16]
    1874:	ldr	r3, [fp, #-8]
    1878:	str	r2, [r3, #28]
    187c:	ldr	r3, [fp, #-8]
    1880:	ldr	r2, [r3, #20]
    1884:	ldr	r3, [fp, #-8]
    1888:	ldr	r3, [r3, #12]
    188c:	lsl	r3, r3, #2
    1890:	add	r3, r2, r3
    1894:	ldr	r3, [r3]
    1898:	ldr	r2, [r3, #8]
    189c:	ldr	r3, [fp, #-8]
    18a0:	str	r2, [r3, #36]	; 0x24
    18a4:	ldr	r3, [fp, #-8]
    18a8:	ldr	r2, [r3, #36]	; 0x24
    18ac:	ldr	r3, [fp, #-8]
    18b0:	str	r2, [r3, #80]	; 0x50
    18b4:	ldr	r3, [fp, #-8]
    18b8:	ldr	r2, [r3, #20]
    18bc:	ldr	r3, [fp, #-8]
    18c0:	ldr	r3, [r3, #12]
    18c4:	lsl	r3, r3, #2
    18c8:	add	r3, r2, r3
    18cc:	ldr	r3, [r3]
    18d0:	ldr	r2, [r3]
    18d4:	ldr	r3, [fp, #-8]
    18d8:	str	r2, [r3, #4]
    18dc:	ldr	r3, [fp, #-8]
    18e0:	ldr	r3, [r3, #36]	; 0x24
    18e4:	ldrb	r2, [r3]
    18e8:	ldr	r3, [fp, #-8]
    18ec:	strb	r2, [r3, #24]
    18f0:	nop	{0}
    18f4:	add	sp, fp, #0
    18f8:	pop	{fp}		; (ldr fp, [sp], #4)
    18fc:	bx	lr

00001900 <coda_expression__create_buffer>:
    1900:	str	fp, [sp, #-8]!
    1904:	str	lr, [sp, #4]
    1908:	add	fp, sp, #4
    190c:	sub	sp, sp, #24
    1910:	str	r0, [fp, #-16]
    1914:	str	r1, [fp, #-20]	; 0xffffffec
    1918:	str	r2, [fp, #-24]	; 0xffffffe8
    191c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1920:	mov	r0, #48	; 0x30
    1924:	bl	2b80 <coda_expression_alloc>
    1928:	str	r0, [fp, #-8]
    192c:	ldr	r3, [fp, #-8]
    1930:	cmp	r3, #0
    1934:	bne	1948 <coda_expression__create_buffer+0x48>
    1938:	ldr	r1, [fp, #-24]	; 0xffffffe8
    193c:	movw	r0, #0
    1940:	movt	r0, #0
    1944:	bl	2314 <yy_fatal_error>
    1948:	ldr	r3, [fp, #-8]
    194c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1950:	str	r2, [r3, #12]
    1954:	ldr	r3, [fp, #-8]
    1958:	ldr	r3, [r3, #12]
    195c:	add	r3, r3, #2
    1960:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1964:	mov	r0, r3
    1968:	bl	2b80 <coda_expression_alloc>
    196c:	mov	r2, r0
    1970:	ldr	r3, [fp, #-8]
    1974:	str	r2, [r3, #4]
    1978:	ldr	r3, [fp, #-8]
    197c:	ldr	r3, [r3, #4]
    1980:	cmp	r3, #0
    1984:	bne	1998 <coda_expression__create_buffer+0x98>
    1988:	ldr	r1, [fp, #-24]	; 0xffffffe8
    198c:	movw	r0, #0
    1990:	movt	r0, #0
    1994:	bl	2314 <yy_fatal_error>
    1998:	ldr	r3, [fp, #-8]
    199c:	mov	r2, #1
    19a0:	str	r2, [r3, #20]
    19a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    19a8:	ldr	r1, [fp, #-16]
    19ac:	ldr	r0, [fp, #-8]
    19b0:	bl	1aa0 <coda_expression__init_buffer>
    19b4:	ldr	r3, [fp, #-8]
    19b8:	mov	r0, r3
    19bc:	sub	sp, fp, #4
    19c0:	ldr	fp, [sp]
    19c4:	add	sp, sp, #4
    19c8:	pop	{pc}		; (ldr pc, [sp], #4)

000019cc <coda_expression__delete_buffer>:
    19cc:	str	fp, [sp, #-8]!
    19d0:	str	lr, [sp, #4]
    19d4:	add	fp, sp, #4
    19d8:	sub	sp, sp, #16
    19dc:	str	r0, [fp, #-16]
    19e0:	str	r1, [fp, #-20]	; 0xffffffec
    19e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    19e8:	str	r3, [fp, #-8]
    19ec:	ldr	r3, [fp, #-16]
    19f0:	cmp	r3, #0
    19f4:	beq	1a8c <coda_expression__delete_buffer+0xc0>
    19f8:	ldr	r3, [fp, #-8]
    19fc:	ldr	r3, [r3, #20]
    1a00:	cmp	r3, #0
    1a04:	beq	1a28 <coda_expression__delete_buffer+0x5c>
    1a08:	ldr	r3, [fp, #-8]
    1a0c:	ldr	r2, [r3, #20]
    1a10:	ldr	r3, [fp, #-8]
    1a14:	ldr	r3, [r3, #12]
    1a18:	lsl	r3, r3, #2
    1a1c:	add	r3, r2, r3
    1a20:	ldr	r3, [r3]
    1a24:	b	1a2c <coda_expression__delete_buffer+0x60>
    1a28:	mov	r3, #0
    1a2c:	ldr	r2, [fp, #-16]
    1a30:	cmp	r3, r2
    1a34:	bne	1a58 <coda_expression__delete_buffer+0x8c>
    1a38:	ldr	r3, [fp, #-8]
    1a3c:	ldr	r2, [r3, #20]
    1a40:	ldr	r3, [fp, #-8]
    1a44:	ldr	r3, [r3, #12]
    1a48:	lsl	r3, r3, #2
    1a4c:	add	r3, r2, r3
    1a50:	mov	r2, #0
    1a54:	str	r2, [r3]
    1a58:	ldr	r3, [fp, #-16]
    1a5c:	ldr	r3, [r3, #20]
    1a60:	cmp	r3, #0
    1a64:	beq	1a7c <coda_expression__delete_buffer+0xb0>
    1a68:	ldr	r3, [fp, #-16]
    1a6c:	ldr	r3, [r3, #4]
    1a70:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a74:	mov	r0, r3
    1a78:	bl	2c08 <coda_expression_free>
    1a7c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a80:	ldr	r0, [fp, #-16]
    1a84:	bl	2c08 <coda_expression_free>
    1a88:	b	1a90 <coda_expression__delete_buffer+0xc4>
    1a8c:	nop	{0}
    1a90:	sub	sp, fp, #4
    1a94:	ldr	fp, [sp]
    1a98:	add	sp, sp, #4
    1a9c:	pop	{pc}		; (ldr pc, [sp], #4)

00001aa0 <coda_expression__init_buffer>:
    1aa0:	str	fp, [sp, #-8]!
    1aa4:	str	lr, [sp, #4]
    1aa8:	add	fp, sp, #4
    1aac:	sub	sp, sp, #24
    1ab0:	str	r0, [fp, #-16]
    1ab4:	str	r1, [fp, #-20]	; 0xffffffec
    1ab8:	str	r2, [fp, #-24]	; 0xffffffe8
    1abc:	bl	0 <__errno_location>
    1ac0:	mov	r3, r0
    1ac4:	ldr	r3, [r3]
    1ac8:	str	r3, [fp, #-8]
    1acc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ad0:	str	r3, [fp, #-12]
    1ad4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1ad8:	ldr	r0, [fp, #-16]
    1adc:	bl	1b80 <coda_expression__flush_buffer>
    1ae0:	ldr	r3, [fp, #-16]
    1ae4:	ldr	r2, [fp, #-20]	; 0xffffffec
    1ae8:	str	r2, [r3]
    1aec:	ldr	r3, [fp, #-16]
    1af0:	mov	r2, #1
    1af4:	str	r2, [r3, #40]	; 0x28
    1af8:	ldr	r3, [fp, #-12]
    1afc:	ldr	r3, [r3, #20]
    1b00:	cmp	r3, #0
    1b04:	beq	1b28 <coda_expression__init_buffer+0x88>
    1b08:	ldr	r3, [fp, #-12]
    1b0c:	ldr	r2, [r3, #20]
    1b10:	ldr	r3, [fp, #-12]
    1b14:	ldr	r3, [r3, #12]
    1b18:	lsl	r3, r3, #2
    1b1c:	add	r3, r2, r3
    1b20:	ldr	r3, [r3]
    1b24:	b	1b2c <coda_expression__init_buffer+0x8c>
    1b28:	mov	r3, #0
    1b2c:	ldr	r2, [fp, #-16]
    1b30:	cmp	r3, r2
    1b34:	beq	1b50 <coda_expression__init_buffer+0xb0>
    1b38:	ldr	r3, [fp, #-16]
    1b3c:	mov	r2, #1
    1b40:	str	r2, [r3, #32]
    1b44:	ldr	r3, [fp, #-16]
    1b48:	mov	r2, #0
    1b4c:	str	r2, [r3, #36]	; 0x24
    1b50:	ldr	r3, [fp, #-16]
    1b54:	mov	r2, #1
    1b58:	str	r2, [r3, #24]
    1b5c:	bl	0 <__errno_location>
    1b60:	mov	r2, r0
    1b64:	ldr	r3, [fp, #-8]
    1b68:	str	r3, [r2]
    1b6c:	nop	{0}
    1b70:	sub	sp, fp, #4
    1b74:	ldr	fp, [sp]
    1b78:	add	sp, sp, #4
    1b7c:	pop	{pc}		; (ldr pc, [sp], #4)

00001b80 <coda_expression__flush_buffer>:
    1b80:	str	fp, [sp, #-8]!
    1b84:	str	lr, [sp, #4]
    1b88:	add	fp, sp, #4
    1b8c:	sub	sp, sp, #16
    1b90:	str	r0, [fp, #-16]
    1b94:	str	r1, [fp, #-20]	; 0xffffffec
    1b98:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b9c:	str	r3, [fp, #-8]
    1ba0:	ldr	r3, [fp, #-16]
    1ba4:	cmp	r3, #0
    1ba8:	beq	1c50 <coda_expression__flush_buffer+0xd0>
    1bac:	ldr	r3, [fp, #-16]
    1bb0:	mov	r2, #0
    1bb4:	str	r2, [r3, #16]
    1bb8:	ldr	r3, [fp, #-16]
    1bbc:	ldr	r3, [r3, #4]
    1bc0:	mov	r2, #0
    1bc4:	strb	r2, [r3]
    1bc8:	ldr	r3, [fp, #-16]
    1bcc:	ldr	r3, [r3, #4]
    1bd0:	add	r3, r3, #1
    1bd4:	mov	r2, #0
    1bd8:	strb	r2, [r3]
    1bdc:	ldr	r3, [fp, #-16]
    1be0:	ldr	r2, [r3, #4]
    1be4:	ldr	r3, [fp, #-16]
    1be8:	str	r2, [r3, #8]
    1bec:	ldr	r3, [fp, #-16]
    1bf0:	mov	r2, #1
    1bf4:	str	r2, [r3, #28]
    1bf8:	ldr	r3, [fp, #-16]
    1bfc:	mov	r2, #0
    1c00:	str	r2, [r3, #44]	; 0x2c
    1c04:	ldr	r3, [fp, #-8]
    1c08:	ldr	r3, [r3, #20]
    1c0c:	cmp	r3, #0
    1c10:	beq	1c34 <coda_expression__flush_buffer+0xb4>
    1c14:	ldr	r3, [fp, #-8]
    1c18:	ldr	r2, [r3, #20]
    1c1c:	ldr	r3, [fp, #-8]
    1c20:	ldr	r3, [r3, #12]
    1c24:	lsl	r3, r3, #2
    1c28:	add	r3, r2, r3
    1c2c:	ldr	r3, [r3]
    1c30:	b	1c38 <coda_expression__flush_buffer+0xb8>
    1c34:	mov	r3, #0
    1c38:	ldr	r2, [fp, #-16]
    1c3c:	cmp	r3, r2
    1c40:	bne	1c54 <coda_expression__flush_buffer+0xd4>
    1c44:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c48:	bl	183c <coda_expression__load_buffer_state>
    1c4c:	b	1c54 <coda_expression__flush_buffer+0xd4>
    1c50:	nop	{0}
    1c54:	sub	sp, fp, #4
    1c58:	ldr	fp, [sp]
    1c5c:	add	sp, sp, #4
    1c60:	pop	{pc}		; (ldr pc, [sp], #4)

00001c64 <coda_expression_push_buffer_state>:
    1c64:	str	fp, [sp, #-8]!
    1c68:	str	lr, [sp, #4]
    1c6c:	add	fp, sp, #4
    1c70:	sub	sp, sp, #16
    1c74:	str	r0, [fp, #-16]
    1c78:	str	r1, [fp, #-20]	; 0xffffffec
    1c7c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c80:	str	r3, [fp, #-8]
    1c84:	ldr	r3, [fp, #-16]
    1c88:	cmp	r3, #0
    1c8c:	beq	1db0 <coda_expression_push_buffer_state+0x14c>
    1c90:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c94:	bl	1ef8 <coda_expression_ensure_buffer_stack>
    1c98:	ldr	r3, [fp, #-8]
    1c9c:	ldr	r3, [r3, #20]
    1ca0:	cmp	r3, #0
    1ca4:	beq	1d30 <coda_expression_push_buffer_state+0xcc>
    1ca8:	ldr	r3, [fp, #-8]
    1cac:	ldr	r2, [r3, #20]
    1cb0:	ldr	r3, [fp, #-8]
    1cb4:	ldr	r3, [r3, #12]
    1cb8:	lsl	r3, r3, #2
    1cbc:	add	r3, r2, r3
    1cc0:	ldr	r3, [r3]
    1cc4:	cmp	r3, #0
    1cc8:	beq	1d30 <coda_expression_push_buffer_state+0xcc>
    1ccc:	ldr	r3, [fp, #-8]
    1cd0:	ldr	r3, [r3, #36]	; 0x24
    1cd4:	ldr	r2, [fp, #-8]
    1cd8:	ldrb	r2, [r2, #24]
    1cdc:	strb	r2, [r3]
    1ce0:	ldr	r3, [fp, #-8]
    1ce4:	ldr	r2, [r3, #20]
    1ce8:	ldr	r3, [fp, #-8]
    1cec:	ldr	r3, [r3, #12]
    1cf0:	lsl	r3, r3, #2
    1cf4:	add	r3, r2, r3
    1cf8:	ldr	r3, [r3]
    1cfc:	ldr	r2, [fp, #-8]
    1d00:	ldr	r2, [r2, #36]	; 0x24
    1d04:	str	r2, [r3, #8]
    1d08:	ldr	r3, [fp, #-8]
    1d0c:	ldr	r2, [r3, #20]
    1d10:	ldr	r3, [fp, #-8]
    1d14:	ldr	r3, [r3, #12]
    1d18:	lsl	r3, r3, #2
    1d1c:	add	r3, r2, r3
    1d20:	ldr	r3, [r3]
    1d24:	ldr	r2, [fp, #-8]
    1d28:	ldr	r2, [r2, #28]
    1d2c:	str	r2, [r3, #16]
    1d30:	ldr	r3, [fp, #-8]
    1d34:	ldr	r3, [r3, #20]
    1d38:	cmp	r3, #0
    1d3c:	beq	1d78 <coda_expression_push_buffer_state+0x114>
    1d40:	ldr	r3, [fp, #-8]
    1d44:	ldr	r2, [r3, #20]
    1d48:	ldr	r3, [fp, #-8]
    1d4c:	ldr	r3, [r3, #12]
    1d50:	lsl	r3, r3, #2
    1d54:	add	r3, r2, r3
    1d58:	ldr	r3, [r3]
    1d5c:	cmp	r3, #0
    1d60:	beq	1d78 <coda_expression_push_buffer_state+0x114>
    1d64:	ldr	r3, [fp, #-8]
    1d68:	ldr	r3, [r3, #12]
    1d6c:	add	r2, r3, #1
    1d70:	ldr	r3, [fp, #-8]
    1d74:	str	r2, [r3, #12]
    1d78:	ldr	r3, [fp, #-8]
    1d7c:	ldr	r2, [r3, #20]
    1d80:	ldr	r3, [fp, #-8]
    1d84:	ldr	r3, [r3, #12]
    1d88:	lsl	r3, r3, #2
    1d8c:	add	r3, r2, r3
    1d90:	ldr	r2, [fp, #-16]
    1d94:	str	r2, [r3]
    1d98:	ldr	r0, [fp, #-20]	; 0xffffffec
    1d9c:	bl	183c <coda_expression__load_buffer_state>
    1da0:	ldr	r3, [fp, #-8]
    1da4:	mov	r2, #1
    1da8:	str	r2, [r3, #48]	; 0x30
    1dac:	b	1db4 <coda_expression_push_buffer_state+0x150>
    1db0:	nop	{0}
    1db4:	sub	sp, fp, #4
    1db8:	ldr	fp, [sp]
    1dbc:	add	sp, sp, #4
    1dc0:	pop	{pc}		; (ldr pc, [sp], #4)

00001dc4 <coda_expression_pop_buffer_state>:
    1dc4:	str	fp, [sp, #-8]!
    1dc8:	str	lr, [sp, #4]
    1dcc:	add	fp, sp, #4
    1dd0:	sub	sp, sp, #16
    1dd4:	str	r0, [fp, #-16]
    1dd8:	ldr	r3, [fp, #-16]
    1ddc:	str	r3, [fp, #-8]
    1de0:	ldr	r3, [fp, #-8]
    1de4:	ldr	r3, [r3, #20]
    1de8:	cmp	r3, #0
    1dec:	beq	1ee4 <coda_expression_pop_buffer_state+0x120>
    1df0:	ldr	r3, [fp, #-8]
    1df4:	ldr	r2, [r3, #20]
    1df8:	ldr	r3, [fp, #-8]
    1dfc:	ldr	r3, [r3, #12]
    1e00:	lsl	r3, r3, #2
    1e04:	add	r3, r2, r3
    1e08:	ldr	r3, [r3]
    1e0c:	cmp	r3, #0
    1e10:	beq	1ee4 <coda_expression_pop_buffer_state+0x120>
    1e14:	ldr	r3, [fp, #-8]
    1e18:	ldr	r3, [r3, #20]
    1e1c:	cmp	r3, #0
    1e20:	beq	1e44 <coda_expression_pop_buffer_state+0x80>
    1e24:	ldr	r3, [fp, #-8]
    1e28:	ldr	r2, [r3, #20]
    1e2c:	ldr	r3, [fp, #-8]
    1e30:	ldr	r3, [r3, #12]
    1e34:	lsl	r3, r3, #2
    1e38:	add	r3, r2, r3
    1e3c:	ldr	r3, [r3]
    1e40:	b	1e48 <coda_expression_pop_buffer_state+0x84>
    1e44:	mov	r3, #0
    1e48:	ldr	r1, [fp, #-16]
    1e4c:	mov	r0, r3
    1e50:	bl	19cc <coda_expression__delete_buffer>
    1e54:	ldr	r3, [fp, #-8]
    1e58:	ldr	r2, [r3, #20]
    1e5c:	ldr	r3, [fp, #-8]
    1e60:	ldr	r3, [r3, #12]
    1e64:	lsl	r3, r3, #2
    1e68:	add	r3, r2, r3
    1e6c:	mov	r2, #0
    1e70:	str	r2, [r3]
    1e74:	ldr	r3, [fp, #-8]
    1e78:	ldr	r3, [r3, #12]
    1e7c:	cmp	r3, #0
    1e80:	beq	1e98 <coda_expression_pop_buffer_state+0xd4>
    1e84:	ldr	r3, [fp, #-8]
    1e88:	ldr	r3, [r3, #12]
    1e8c:	sub	r2, r3, #1
    1e90:	ldr	r3, [fp, #-8]
    1e94:	str	r2, [r3, #12]
    1e98:	ldr	r3, [fp, #-8]
    1e9c:	ldr	r3, [r3, #20]
    1ea0:	cmp	r3, #0
    1ea4:	beq	1ee8 <coda_expression_pop_buffer_state+0x124>
    1ea8:	ldr	r3, [fp, #-8]
    1eac:	ldr	r2, [r3, #20]
    1eb0:	ldr	r3, [fp, #-8]
    1eb4:	ldr	r3, [r3, #12]
    1eb8:	lsl	r3, r3, #2
    1ebc:	add	r3, r2, r3
    1ec0:	ldr	r3, [r3]
    1ec4:	cmp	r3, #0
    1ec8:	beq	1ee8 <coda_expression_pop_buffer_state+0x124>
    1ecc:	ldr	r0, [fp, #-16]
    1ed0:	bl	183c <coda_expression__load_buffer_state>
    1ed4:	ldr	r3, [fp, #-8]
    1ed8:	mov	r2, #1
    1edc:	str	r2, [r3, #48]	; 0x30
    1ee0:	b	1ee8 <coda_expression_pop_buffer_state+0x124>
    1ee4:	nop	{0}
    1ee8:	sub	sp, fp, #4
    1eec:	ldr	fp, [sp]
    1ef0:	add	sp, sp, #4
    1ef4:	pop	{pc}		; (ldr pc, [sp], #4)

00001ef8 <coda_expression_ensure_buffer_stack>:
    1ef8:	str	fp, [sp, #-8]!
    1efc:	str	lr, [sp, #4]
    1f00:	add	fp, sp, #4
    1f04:	sub	sp, sp, #24
    1f08:	str	r0, [fp, #-24]	; 0xffffffe8
    1f0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f10:	str	r3, [fp, #-8]
    1f14:	ldr	r3, [fp, #-8]
    1f18:	ldr	r3, [r3, #20]
    1f1c:	cmp	r3, #0
    1f20:	bne	1fa4 <coda_expression_ensure_buffer_stack+0xac>
    1f24:	mov	r3, #1
    1f28:	str	r3, [fp, #-12]
    1f2c:	ldr	r3, [fp, #-12]
    1f30:	lsl	r3, r3, #2
    1f34:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1f38:	mov	r0, r3
    1f3c:	bl	2b80 <coda_expression_alloc>
    1f40:	mov	r2, r0
    1f44:	ldr	r3, [fp, #-8]
    1f48:	str	r2, [r3, #20]
    1f4c:	ldr	r3, [fp, #-8]
    1f50:	ldr	r3, [r3, #20]
    1f54:	cmp	r3, #0
    1f58:	bne	1f6c <coda_expression_ensure_buffer_stack+0x74>
    1f5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1f60:	movw	r0, #0
    1f64:	movt	r0, #0
    1f68:	bl	2314 <yy_fatal_error>
    1f6c:	ldr	r3, [fp, #-8]
    1f70:	ldr	r0, [r3, #20]
    1f74:	ldr	r3, [fp, #-12]
    1f78:	lsl	r3, r3, #2
    1f7c:	mov	r2, r3
    1f80:	mov	r1, #0
    1f84:	bl	0 <memset>
    1f88:	ldr	r3, [fp, #-8]
    1f8c:	ldr	r2, [fp, #-12]
    1f90:	str	r2, [r3, #16]
    1f94:	ldr	r3, [fp, #-8]
    1f98:	mov	r2, #0
    1f9c:	str	r2, [r3, #12]
    1fa0:	b	205c <coda_expression_ensure_buffer_stack+0x164>
    1fa4:	ldr	r3, [fp, #-8]
    1fa8:	ldr	r2, [r3, #12]
    1fac:	ldr	r3, [fp, #-8]
    1fb0:	ldr	r3, [r3, #16]
    1fb4:	sub	r3, r3, #1
    1fb8:	cmp	r2, r3
    1fbc:	bcc	205c <coda_expression_ensure_buffer_stack+0x164>
    1fc0:	mov	r3, #8
    1fc4:	str	r3, [fp, #-16]
    1fc8:	ldr	r3, [fp, #-8]
    1fcc:	ldr	r3, [r3, #16]
    1fd0:	ldr	r2, [fp, #-16]
    1fd4:	add	r3, r2, r3
    1fd8:	str	r3, [fp, #-12]
    1fdc:	ldr	r3, [fp, #-8]
    1fe0:	ldr	r0, [r3, #20]
    1fe4:	ldr	r3, [fp, #-12]
    1fe8:	lsl	r3, r3, #2
    1fec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1ff0:	mov	r1, r3
    1ff4:	bl	2bc0 <coda_expression_realloc>
    1ff8:	mov	r2, r0
    1ffc:	ldr	r3, [fp, #-8]
    2000:	str	r2, [r3, #20]
    2004:	ldr	r3, [fp, #-8]
    2008:	ldr	r3, [r3, #20]
    200c:	cmp	r3, #0
    2010:	bne	2024 <coda_expression_ensure_buffer_stack+0x12c>
    2014:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2018:	movw	r0, #0
    201c:	movt	r0, #0
    2020:	bl	2314 <yy_fatal_error>
    2024:	ldr	r3, [fp, #-8]
    2028:	ldr	r2, [r3, #20]
    202c:	ldr	r3, [fp, #-8]
    2030:	ldr	r3, [r3, #16]
    2034:	lsl	r3, r3, #2
    2038:	add	r0, r2, r3
    203c:	ldr	r3, [fp, #-16]
    2040:	lsl	r3, r3, #2
    2044:	mov	r2, r3
    2048:	mov	r1, #0
    204c:	bl	0 <memset>
    2050:	ldr	r3, [fp, #-8]
    2054:	ldr	r2, [fp, #-12]
    2058:	str	r2, [r3, #16]
    205c:	sub	sp, fp, #4
    2060:	ldr	fp, [sp]
    2064:	add	sp, sp, #4
    2068:	pop	{pc}		; (ldr pc, [sp], #4)

0000206c <coda_expression__scan_buffer>:
    206c:	str	fp, [sp, #-8]!
    2070:	str	lr, [sp, #4]
    2074:	add	fp, sp, #4
    2078:	sub	sp, sp, #24
    207c:	str	r0, [fp, #-16]
    2080:	str	r1, [fp, #-20]	; 0xffffffec
    2084:	str	r2, [fp, #-24]	; 0xffffffe8
    2088:	ldr	r3, [fp, #-20]	; 0xffffffec
    208c:	cmp	r3, #1
    2090:	bls	20cc <coda_expression__scan_buffer+0x60>
    2094:	ldr	r3, [fp, #-20]	; 0xffffffec
    2098:	sub	r3, r3, #2
    209c:	ldr	r2, [fp, #-16]
    20a0:	add	r3, r2, r3
    20a4:	ldrb	r3, [r3]
    20a8:	cmp	r3, #0
    20ac:	bne	20cc <coda_expression__scan_buffer+0x60>
    20b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    20b4:	sub	r3, r3, #1
    20b8:	ldr	r2, [fp, #-16]
    20bc:	add	r3, r2, r3
    20c0:	ldrb	r3, [r3]
    20c4:	cmp	r3, #0
    20c8:	beq	20d4 <coda_expression__scan_buffer+0x68>
    20cc:	mov	r3, #0
    20d0:	b	2198 <coda_expression__scan_buffer+0x12c>
    20d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    20d8:	mov	r0, #48	; 0x30
    20dc:	bl	2b80 <coda_expression_alloc>
    20e0:	str	r0, [fp, #-8]
    20e4:	ldr	r3, [fp, #-8]
    20e8:	cmp	r3, #0
    20ec:	bne	2100 <coda_expression__scan_buffer+0x94>
    20f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    20f4:	movw	r0, #0
    20f8:	movt	r0, #0
    20fc:	bl	2314 <yy_fatal_error>
    2100:	ldr	r3, [fp, #-20]	; 0xffffffec
    2104:	sub	r3, r3, #2
    2108:	mov	r2, r3
    210c:	ldr	r3, [fp, #-8]
    2110:	str	r2, [r3, #12]
    2114:	ldr	r3, [fp, #-8]
    2118:	ldr	r2, [fp, #-16]
    211c:	str	r2, [r3, #4]
    2120:	ldr	r3, [fp, #-8]
    2124:	ldr	r2, [r3, #4]
    2128:	ldr	r3, [fp, #-8]
    212c:	str	r2, [r3, #8]
    2130:	ldr	r3, [fp, #-8]
    2134:	mov	r2, #0
    2138:	str	r2, [r3, #20]
    213c:	ldr	r3, [fp, #-8]
    2140:	mov	r2, #0
    2144:	str	r2, [r3]
    2148:	ldr	r3, [fp, #-8]
    214c:	ldr	r2, [r3, #12]
    2150:	ldr	r3, [fp, #-8]
    2154:	str	r2, [r3, #16]
    2158:	ldr	r3, [fp, #-8]
    215c:	mov	r2, #0
    2160:	str	r2, [r3, #24]
    2164:	ldr	r3, [fp, #-8]
    2168:	mov	r2, #1
    216c:	str	r2, [r3, #28]
    2170:	ldr	r3, [fp, #-8]
    2174:	mov	r2, #0
    2178:	str	r2, [r3, #40]	; 0x28
    217c:	ldr	r3, [fp, #-8]
    2180:	mov	r2, #0
    2184:	str	r2, [r3, #44]	; 0x2c
    2188:	ldr	r1, [fp, #-24]	; 0xffffffe8
    218c:	ldr	r0, [fp, #-8]
    2190:	bl	16f0 <coda_expression__switch_to_buffer>
    2194:	ldr	r3, [fp, #-8]
    2198:	mov	r0, r3
    219c:	sub	sp, fp, #4
    21a0:	ldr	fp, [sp]
    21a4:	add	sp, sp, #4
    21a8:	pop	{pc}		; (ldr pc, [sp], #4)

000021ac <coda_expression__scan_string>:
    21ac:	str	fp, [sp, #-8]!
    21b0:	str	lr, [sp, #4]
    21b4:	add	fp, sp, #4
    21b8:	sub	sp, sp, #8
    21bc:	str	r0, [fp, #-8]
    21c0:	str	r1, [fp, #-12]
    21c4:	ldr	r0, [fp, #-8]
    21c8:	bl	0 <strlen>
    21cc:	mov	r3, r0
    21d0:	ldr	r2, [fp, #-12]
    21d4:	mov	r1, r3
    21d8:	ldr	r0, [fp, #-8]
    21dc:	bl	21f8 <coda_expression__scan_bytes>
    21e0:	mov	r3, r0
    21e4:	mov	r0, r3
    21e8:	sub	sp, fp, #4
    21ec:	ldr	fp, [sp]
    21f0:	add	sp, sp, #4
    21f4:	pop	{pc}		; (ldr pc, [sp], #4)

000021f8 <coda_expression__scan_bytes>:
    21f8:	str	fp, [sp, #-8]!
    21fc:	str	lr, [sp, #4]
    2200:	add	fp, sp, #4
    2204:	sub	sp, sp, #32
    2208:	str	r0, [fp, #-24]	; 0xffffffe8
    220c:	str	r1, [fp, #-28]	; 0xffffffe4
    2210:	str	r2, [fp, #-32]	; 0xffffffe0
    2214:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2218:	add	r3, r3, #2
    221c:	str	r3, [fp, #-12]
    2220:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2224:	ldr	r0, [fp, #-12]
    2228:	bl	2b80 <coda_expression_alloc>
    222c:	str	r0, [fp, #-16]
    2230:	ldr	r3, [fp, #-16]
    2234:	cmp	r3, #0
    2238:	bne	224c <coda_expression__scan_bytes+0x54>
    223c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2240:	movw	r0, #0
    2244:	movt	r0, #0
    2248:	bl	2314 <yy_fatal_error>
    224c:	mov	r3, #0
    2250:	str	r3, [fp, #-8]
    2254:	b	2284 <coda_expression__scan_bytes+0x8c>
    2258:	ldr	r3, [fp, #-8]
    225c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2260:	add	r2, r2, r3
    2264:	ldr	r3, [fp, #-8]
    2268:	ldr	r1, [fp, #-16]
    226c:	add	r3, r1, r3
    2270:	ldrb	r2, [r2]
    2274:	strb	r2, [r3]
    2278:	ldr	r3, [fp, #-8]
    227c:	add	r3, r3, #1
    2280:	str	r3, [fp, #-8]
    2284:	ldr	r2, [fp, #-8]
    2288:	ldr	r3, [fp, #-28]	; 0xffffffe4
    228c:	cmp	r2, r3
    2290:	blt	2258 <coda_expression__scan_bytes+0x60>
    2294:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2298:	add	r3, r3, #1
    229c:	ldr	r2, [fp, #-16]
    22a0:	add	r3, r2, r3
    22a4:	mov	r2, #0
    22a8:	strb	r2, [r3]
    22ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
    22b0:	ldr	r1, [fp, #-16]
    22b4:	add	r2, r1, r2
    22b8:	ldrb	r3, [r3]
    22bc:	strb	r3, [r2]
    22c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    22c4:	ldr	r1, [fp, #-12]
    22c8:	ldr	r0, [fp, #-16]
    22cc:	bl	206c <coda_expression__scan_buffer>
    22d0:	str	r0, [fp, #-20]	; 0xffffffec
    22d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    22d8:	cmp	r3, #0
    22dc:	bne	22f0 <coda_expression__scan_bytes+0xf8>
    22e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    22e4:	movw	r0, #0
    22e8:	movt	r0, #0
    22ec:	bl	2314 <yy_fatal_error>
    22f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    22f4:	mov	r2, #1
    22f8:	str	r2, [r3, #20]
    22fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    2300:	mov	r0, r3
    2304:	sub	sp, fp, #4
    2308:	ldr	fp, [sp]
    230c:	add	sp, sp, #4
    2310:	pop	{pc}		; (ldr pc, [sp], #4)

00002314 <yy_fatal_error>:
    2314:	str	fp, [sp, #-8]!
    2318:	str	lr, [sp, #4]
    231c:	add	fp, sp, #4
    2320:	sub	sp, sp, #16
    2324:	str	r0, [fp, #-16]
    2328:	str	r1, [fp, #-20]	; 0xffffffec
    232c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2330:	str	r3, [fp, #-8]
    2334:	movw	r3, #0
    2338:	movt	r3, #0
    233c:	ldr	r3, [r3]
    2340:	ldr	r2, [fp, #-16]
    2344:	movw	r1, #0
    2348:	movt	r1, #0
    234c:	mov	r0, r3
    2350:	bl	0 <fprintf>
    2354:	mov	r0, #2
    2358:	bl	0 <exit>

0000235c <coda_expression_get_extra>:
    235c:	push	{fp}		; (str fp, [sp, #-4]!)
    2360:	add	fp, sp, #0
    2364:	sub	sp, sp, #20
    2368:	str	r0, [fp, #-16]
    236c:	ldr	r3, [fp, #-16]
    2370:	str	r3, [fp, #-8]
    2374:	ldr	r3, [fp, #-8]
    2378:	ldr	r3, [r3]
    237c:	mov	r0, r3
    2380:	add	sp, fp, #0
    2384:	pop	{fp}		; (ldr fp, [sp], #4)
    2388:	bx	lr

0000238c <coda_expression_get_lineno>:
    238c:	push	{fp}		; (str fp, [sp, #-4]!)
    2390:	add	fp, sp, #0
    2394:	sub	sp, sp, #20
    2398:	str	r0, [fp, #-16]
    239c:	ldr	r3, [fp, #-16]
    23a0:	str	r3, [fp, #-8]
    23a4:	ldr	r3, [fp, #-8]
    23a8:	ldr	r3, [r3, #20]
    23ac:	cmp	r3, #0
    23b0:	beq	23d8 <coda_expression_get_lineno+0x4c>
    23b4:	ldr	r3, [fp, #-8]
    23b8:	ldr	r2, [r3, #20]
    23bc:	ldr	r3, [fp, #-8]
    23c0:	ldr	r3, [r3, #12]
    23c4:	lsl	r3, r3, #2
    23c8:	add	r3, r2, r3
    23cc:	ldr	r3, [r3]
    23d0:	cmp	r3, #0
    23d4:	bne	23e0 <coda_expression_get_lineno+0x54>
    23d8:	mov	r3, #0
    23dc:	b	2400 <coda_expression_get_lineno+0x74>
    23e0:	ldr	r3, [fp, #-8]
    23e4:	ldr	r2, [r3, #20]
    23e8:	ldr	r3, [fp, #-8]
    23ec:	ldr	r3, [r3, #12]
    23f0:	lsl	r3, r3, #2
    23f4:	add	r3, r2, r3
    23f8:	ldr	r3, [r3]
    23fc:	ldr	r3, [r3, #32]
    2400:	mov	r0, r3
    2404:	add	sp, fp, #0
    2408:	pop	{fp}		; (ldr fp, [sp], #4)
    240c:	bx	lr

00002410 <coda_expression_get_column>:
    2410:	push	{fp}		; (str fp, [sp, #-4]!)
    2414:	add	fp, sp, #0
    2418:	sub	sp, sp, #20
    241c:	str	r0, [fp, #-16]
    2420:	ldr	r3, [fp, #-16]
    2424:	str	r3, [fp, #-8]
    2428:	ldr	r3, [fp, #-8]
    242c:	ldr	r3, [r3, #20]
    2430:	cmp	r3, #0
    2434:	beq	245c <coda_expression_get_column+0x4c>
    2438:	ldr	r3, [fp, #-8]
    243c:	ldr	r2, [r3, #20]
    2440:	ldr	r3, [fp, #-8]
    2444:	ldr	r3, [r3, #12]
    2448:	lsl	r3, r3, #2
    244c:	add	r3, r2, r3
    2450:	ldr	r3, [r3]
    2454:	cmp	r3, #0
    2458:	bne	2464 <coda_expression_get_column+0x54>
    245c:	mov	r3, #0
    2460:	b	2484 <coda_expression_get_column+0x74>
    2464:	ldr	r3, [fp, #-8]
    2468:	ldr	r2, [r3, #20]
    246c:	ldr	r3, [fp, #-8]
    2470:	ldr	r3, [r3, #12]
    2474:	lsl	r3, r3, #2
    2478:	add	r3, r2, r3
    247c:	ldr	r3, [r3]
    2480:	ldr	r3, [r3, #36]	; 0x24
    2484:	mov	r0, r3
    2488:	add	sp, fp, #0
    248c:	pop	{fp}		; (ldr fp, [sp], #4)
    2490:	bx	lr

00002494 <coda_expression_get_in>:
    2494:	push	{fp}		; (str fp, [sp, #-4]!)
    2498:	add	fp, sp, #0
    249c:	sub	sp, sp, #20
    24a0:	str	r0, [fp, #-16]
    24a4:	ldr	r3, [fp, #-16]
    24a8:	str	r3, [fp, #-8]
    24ac:	ldr	r3, [fp, #-8]
    24b0:	ldr	r3, [r3, #4]
    24b4:	mov	r0, r3
    24b8:	add	sp, fp, #0
    24bc:	pop	{fp}		; (ldr fp, [sp], #4)
    24c0:	bx	lr

000024c4 <coda_expression_get_out>:
    24c4:	push	{fp}		; (str fp, [sp, #-4]!)
    24c8:	add	fp, sp, #0
    24cc:	sub	sp, sp, #20
    24d0:	str	r0, [fp, #-16]
    24d4:	ldr	r3, [fp, #-16]
    24d8:	str	r3, [fp, #-8]
    24dc:	ldr	r3, [fp, #-8]
    24e0:	ldr	r3, [r3, #8]
    24e4:	mov	r0, r3
    24e8:	add	sp, fp, #0
    24ec:	pop	{fp}		; (ldr fp, [sp], #4)
    24f0:	bx	lr

000024f4 <coda_expression_get_leng>:
    24f4:	push	{fp}		; (str fp, [sp, #-4]!)
    24f8:	add	fp, sp, #0
    24fc:	sub	sp, sp, #20
    2500:	str	r0, [fp, #-16]
    2504:	ldr	r3, [fp, #-16]
    2508:	str	r3, [fp, #-8]
    250c:	ldr	r3, [fp, #-8]
    2510:	ldr	r3, [r3, #32]
    2514:	mov	r0, r3
    2518:	add	sp, fp, #0
    251c:	pop	{fp}		; (ldr fp, [sp], #4)
    2520:	bx	lr

00002524 <coda_expression_get_text>:
    2524:	push	{fp}		; (str fp, [sp, #-4]!)
    2528:	add	fp, sp, #0
    252c:	sub	sp, sp, #20
    2530:	str	r0, [fp, #-16]
    2534:	ldr	r3, [fp, #-16]
    2538:	str	r3, [fp, #-8]
    253c:	ldr	r3, [fp, #-8]
    2540:	ldr	r3, [r3, #80]	; 0x50
    2544:	mov	r0, r3
    2548:	add	sp, fp, #0
    254c:	pop	{fp}		; (ldr fp, [sp], #4)
    2550:	bx	lr

00002554 <coda_expression_set_extra>:
    2554:	push	{fp}		; (str fp, [sp, #-4]!)
    2558:	add	fp, sp, #0
    255c:	sub	sp, sp, #20
    2560:	str	r0, [fp, #-16]
    2564:	str	r1, [fp, #-20]	; 0xffffffec
    2568:	ldr	r3, [fp, #-20]	; 0xffffffec
    256c:	str	r3, [fp, #-8]
    2570:	ldr	r3, [fp, #-8]
    2574:	ldr	r2, [fp, #-16]
    2578:	str	r2, [r3]
    257c:	nop	{0}
    2580:	add	sp, fp, #0
    2584:	pop	{fp}		; (ldr fp, [sp], #4)
    2588:	bx	lr

0000258c <coda_expression_set_lineno>:
    258c:	str	fp, [sp, #-8]!
    2590:	str	lr, [sp, #4]
    2594:	add	fp, sp, #4
    2598:	sub	sp, sp, #16
    259c:	str	r0, [fp, #-16]
    25a0:	str	r1, [fp, #-20]	; 0xffffffec
    25a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    25a8:	str	r3, [fp, #-8]
    25ac:	ldr	r3, [fp, #-8]
    25b0:	ldr	r3, [r3, #20]
    25b4:	cmp	r3, #0
    25b8:	beq	25e0 <coda_expression_set_lineno+0x54>
    25bc:	ldr	r3, [fp, #-8]
    25c0:	ldr	r2, [r3, #20]
    25c4:	ldr	r3, [fp, #-8]
    25c8:	ldr	r3, [r3, #12]
    25cc:	lsl	r3, r3, #2
    25d0:	add	r3, r2, r3
    25d4:	ldr	r3, [r3]
    25d8:	cmp	r3, #0
    25dc:	bne	25f0 <coda_expression_set_lineno+0x64>
    25e0:	ldr	r1, [fp, #-20]	; 0xffffffec
    25e4:	movw	r0, #0
    25e8:	movt	r0, #0
    25ec:	bl	2314 <yy_fatal_error>
    25f0:	ldr	r3, [fp, #-8]
    25f4:	ldr	r2, [r3, #20]
    25f8:	ldr	r3, [fp, #-8]
    25fc:	ldr	r3, [r3, #12]
    2600:	lsl	r3, r3, #2
    2604:	add	r3, r2, r3
    2608:	ldr	r3, [r3]
    260c:	ldr	r2, [fp, #-16]
    2610:	str	r2, [r3, #32]
    2614:	nop	{0}
    2618:	sub	sp, fp, #4
    261c:	ldr	fp, [sp]
    2620:	add	sp, sp, #4
    2624:	pop	{pc}		; (ldr pc, [sp], #4)

00002628 <coda_expression_set_column>:
    2628:	str	fp, [sp, #-8]!
    262c:	str	lr, [sp, #4]
    2630:	add	fp, sp, #4
    2634:	sub	sp, sp, #16
    2638:	str	r0, [fp, #-16]
    263c:	str	r1, [fp, #-20]	; 0xffffffec
    2640:	ldr	r3, [fp, #-20]	; 0xffffffec
    2644:	str	r3, [fp, #-8]
    2648:	ldr	r3, [fp, #-8]
    264c:	ldr	r3, [r3, #20]
    2650:	cmp	r3, #0
    2654:	beq	267c <coda_expression_set_column+0x54>
    2658:	ldr	r3, [fp, #-8]
    265c:	ldr	r2, [r3, #20]
    2660:	ldr	r3, [fp, #-8]
    2664:	ldr	r3, [r3, #12]
    2668:	lsl	r3, r3, #2
    266c:	add	r3, r2, r3
    2670:	ldr	r3, [r3]
    2674:	cmp	r3, #0
    2678:	bne	268c <coda_expression_set_column+0x64>
    267c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2680:	movw	r0, #0
    2684:	movt	r0, #0
    2688:	bl	2314 <yy_fatal_error>
    268c:	ldr	r3, [fp, #-8]
    2690:	ldr	r2, [r3, #20]
    2694:	ldr	r3, [fp, #-8]
    2698:	ldr	r3, [r3, #12]
    269c:	lsl	r3, r3, #2
    26a0:	add	r3, r2, r3
    26a4:	ldr	r3, [r3]
    26a8:	ldr	r2, [fp, #-16]
    26ac:	str	r2, [r3, #36]	; 0x24
    26b0:	nop	{0}
    26b4:	sub	sp, fp, #4
    26b8:	ldr	fp, [sp]
    26bc:	add	sp, sp, #4
    26c0:	pop	{pc}		; (ldr pc, [sp], #4)

000026c4 <coda_expression_set_in>:
    26c4:	push	{fp}		; (str fp, [sp, #-4]!)
    26c8:	add	fp, sp, #0
    26cc:	sub	sp, sp, #20
    26d0:	str	r0, [fp, #-16]
    26d4:	str	r1, [fp, #-20]	; 0xffffffec
    26d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    26dc:	str	r3, [fp, #-8]
    26e0:	ldr	r3, [fp, #-8]
    26e4:	ldr	r2, [fp, #-16]
    26e8:	str	r2, [r3, #4]
    26ec:	nop	{0}
    26f0:	add	sp, fp, #0
    26f4:	pop	{fp}		; (ldr fp, [sp], #4)
    26f8:	bx	lr

000026fc <coda_expression_set_out>:
    26fc:	push	{fp}		; (str fp, [sp, #-4]!)
    2700:	add	fp, sp, #0
    2704:	sub	sp, sp, #20
    2708:	str	r0, [fp, #-16]
    270c:	str	r1, [fp, #-20]	; 0xffffffec
    2710:	ldr	r3, [fp, #-20]	; 0xffffffec
    2714:	str	r3, [fp, #-8]
    2718:	ldr	r3, [fp, #-8]
    271c:	ldr	r2, [fp, #-16]
    2720:	str	r2, [r3, #8]
    2724:	nop	{0}
    2728:	add	sp, fp, #0
    272c:	pop	{fp}		; (ldr fp, [sp], #4)
    2730:	bx	lr

00002734 <coda_expression_get_debug>:
    2734:	push	{fp}		; (str fp, [sp, #-4]!)
    2738:	add	fp, sp, #0
    273c:	sub	sp, sp, #20
    2740:	str	r0, [fp, #-16]
    2744:	ldr	r3, [fp, #-16]
    2748:	str	r3, [fp, #-8]
    274c:	ldr	r3, [fp, #-8]
    2750:	ldr	r3, [r3, #76]	; 0x4c
    2754:	mov	r0, r3
    2758:	add	sp, fp, #0
    275c:	pop	{fp}		; (ldr fp, [sp], #4)
    2760:	bx	lr

00002764 <coda_expression_set_debug>:
    2764:	push	{fp}		; (str fp, [sp, #-4]!)
    2768:	add	fp, sp, #0
    276c:	sub	sp, sp, #20
    2770:	str	r0, [fp, #-16]
    2774:	str	r1, [fp, #-20]	; 0xffffffec
    2778:	ldr	r3, [fp, #-20]	; 0xffffffec
    277c:	str	r3, [fp, #-8]
    2780:	ldr	r3, [fp, #-8]
    2784:	ldr	r2, [fp, #-16]
    2788:	str	r2, [r3, #76]	; 0x4c
    278c:	nop	{0}
    2790:	add	sp, fp, #0
    2794:	pop	{fp}		; (ldr fp, [sp], #4)
    2798:	bx	lr

0000279c <coda_expression_get_lval>:
    279c:	push	{fp}		; (str fp, [sp, #-4]!)
    27a0:	add	fp, sp, #0
    27a4:	sub	sp, sp, #20
    27a8:	str	r0, [fp, #-16]
    27ac:	ldr	r3, [fp, #-16]
    27b0:	str	r3, [fp, #-8]
    27b4:	ldr	r3, [fp, #-8]
    27b8:	ldr	r3, [r3, #92]	; 0x5c
    27bc:	mov	r0, r3
    27c0:	add	sp, fp, #0
    27c4:	pop	{fp}		; (ldr fp, [sp], #4)
    27c8:	bx	lr

000027cc <coda_expression_set_lval>:
    27cc:	push	{fp}		; (str fp, [sp, #-4]!)
    27d0:	add	fp, sp, #0
    27d4:	sub	sp, sp, #20
    27d8:	str	r0, [fp, #-16]
    27dc:	str	r1, [fp, #-20]	; 0xffffffec
    27e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    27e4:	str	r3, [fp, #-8]
    27e8:	ldr	r3, [fp, #-8]
    27ec:	ldr	r2, [fp, #-16]
    27f0:	str	r2, [r3, #92]	; 0x5c
    27f4:	nop	{0}
    27f8:	add	sp, fp, #0
    27fc:	pop	{fp}		; (ldr fp, [sp], #4)
    2800:	bx	lr

00002804 <coda_expression_lex_init>:
    2804:	str	fp, [sp, #-8]!
    2808:	str	lr, [sp, #4]
    280c:	add	fp, sp, #4
    2810:	sub	sp, sp, #8
    2814:	str	r0, [fp, #-8]
    2818:	ldr	r3, [fp, #-8]
    281c:	cmp	r3, #0
    2820:	bne	283c <coda_expression_lex_init+0x38>
    2824:	bl	0 <__errno_location>
    2828:	mov	r2, r0
    282c:	mov	r3, #22
    2830:	str	r3, [r2]
    2834:	mov	r3, #1
    2838:	b	28a8 <coda_expression_lex_init+0xa4>
    283c:	mov	r1, #0
    2840:	mov	r0, #96	; 0x60
    2844:	bl	2b80 <coda_expression_alloc>
    2848:	mov	r2, r0
    284c:	ldr	r3, [fp, #-8]
    2850:	str	r2, [r3]
    2854:	ldr	r3, [fp, #-8]
    2858:	ldr	r3, [r3]
    285c:	cmp	r3, #0
    2860:	bne	287c <coda_expression_lex_init+0x78>
    2864:	bl	0 <__errno_location>
    2868:	mov	r2, r0
    286c:	mov	r3, #12
    2870:	str	r3, [r2]
    2874:	mov	r3, #1
    2878:	b	28a8 <coda_expression_lex_init+0xa4>
    287c:	ldr	r3, [fp, #-8]
    2880:	ldr	r3, [r3]
    2884:	mov	r2, #96	; 0x60
    2888:	mov	r1, #0
    288c:	mov	r0, r3
    2890:	bl	0 <memset>
    2894:	ldr	r3, [fp, #-8]
    2898:	ldr	r3, [r3]
    289c:	mov	r0, r3
    28a0:	bl	29a0 <yy_init_globals>
    28a4:	mov	r3, r0
    28a8:	mov	r0, r3
    28ac:	sub	sp, fp, #4
    28b0:	ldr	fp, [sp]
    28b4:	add	sp, sp, #4
    28b8:	pop	{pc}		; (ldr pc, [sp], #4)

000028bc <coda_expression_lex_init_extra>:
    28bc:	str	fp, [sp, #-8]!
    28c0:	str	lr, [sp, #4]
    28c4:	add	fp, sp, #4
    28c8:	sub	sp, sp, #104	; 0x68
    28cc:	str	r0, [fp, #-104]	; 0xffffff98
    28d0:	str	r1, [fp, #-108]	; 0xffffff94
    28d4:	sub	r3, fp, #100	; 0x64
    28d8:	mov	r1, r3
    28dc:	ldr	r0, [fp, #-104]	; 0xffffff98
    28e0:	bl	2554 <coda_expression_set_extra>
    28e4:	ldr	r3, [fp, #-108]	; 0xffffff94
    28e8:	cmp	r3, #0
    28ec:	bne	2908 <coda_expression_lex_init_extra+0x4c>
    28f0:	bl	0 <__errno_location>
    28f4:	mov	r2, r0
    28f8:	mov	r3, #22
    28fc:	str	r3, [r2]
    2900:	mov	r3, #1
    2904:	b	298c <coda_expression_lex_init_extra+0xd0>
    2908:	sub	r3, fp, #100	; 0x64
    290c:	mov	r1, r3
    2910:	mov	r0, #96	; 0x60
    2914:	bl	2b80 <coda_expression_alloc>
    2918:	mov	r2, r0
    291c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2920:	str	r2, [r3]
    2924:	ldr	r3, [fp, #-108]	; 0xffffff94
    2928:	ldr	r3, [r3]
    292c:	cmp	r3, #0
    2930:	bne	294c <coda_expression_lex_init_extra+0x90>
    2934:	bl	0 <__errno_location>
    2938:	mov	r2, r0
    293c:	mov	r3, #12
    2940:	str	r3, [r2]
    2944:	mov	r3, #1
    2948:	b	298c <coda_expression_lex_init_extra+0xd0>
    294c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2950:	ldr	r3, [r3]
    2954:	mov	r2, #96	; 0x60
    2958:	mov	r1, #0
    295c:	mov	r0, r3
    2960:	bl	0 <memset>
    2964:	ldr	r3, [fp, #-108]	; 0xffffff94
    2968:	ldr	r3, [r3]
    296c:	mov	r1, r3
    2970:	ldr	r0, [fp, #-104]	; 0xffffff98
    2974:	bl	2554 <coda_expression_set_extra>
    2978:	ldr	r3, [fp, #-108]	; 0xffffff94
    297c:	ldr	r3, [r3]
    2980:	mov	r0, r3
    2984:	bl	29a0 <yy_init_globals>
    2988:	mov	r3, r0
    298c:	mov	r0, r3
    2990:	sub	sp, fp, #4
    2994:	ldr	fp, [sp]
    2998:	add	sp, sp, #4
    299c:	pop	{pc}		; (ldr pc, [sp], #4)

000029a0 <yy_init_globals>:
    29a0:	push	{fp}		; (str fp, [sp, #-4]!)
    29a4:	add	fp, sp, #0
    29a8:	sub	sp, sp, #20
    29ac:	str	r0, [fp, #-16]
    29b0:	ldr	r3, [fp, #-16]
    29b4:	str	r3, [fp, #-8]
    29b8:	ldr	r3, [fp, #-8]
    29bc:	mov	r2, #0
    29c0:	str	r2, [r3, #20]
    29c4:	ldr	r3, [fp, #-8]
    29c8:	mov	r2, #0
    29cc:	str	r2, [r3, #12]
    29d0:	ldr	r3, [fp, #-8]
    29d4:	mov	r2, #0
    29d8:	str	r2, [r3, #16]
    29dc:	ldr	r3, [fp, #-8]
    29e0:	mov	r2, #0
    29e4:	str	r2, [r3, #36]	; 0x24
    29e8:	ldr	r3, [fp, #-8]
    29ec:	mov	r2, #0
    29f0:	str	r2, [r3, #40]	; 0x28
    29f4:	ldr	r3, [fp, #-8]
    29f8:	mov	r2, #0
    29fc:	str	r2, [r3, #44]	; 0x2c
    2a00:	ldr	r3, [fp, #-8]
    2a04:	mov	r2, #0
    2a08:	str	r2, [r3, #52]	; 0x34
    2a0c:	ldr	r3, [fp, #-8]
    2a10:	mov	r2, #0
    2a14:	str	r2, [r3, #56]	; 0x38
    2a18:	ldr	r3, [fp, #-8]
    2a1c:	mov	r2, #0
    2a20:	str	r2, [r3, #60]	; 0x3c
    2a24:	ldr	r3, [fp, #-8]
    2a28:	mov	r2, #0
    2a2c:	str	r2, [r3, #4]
    2a30:	ldr	r3, [fp, #-8]
    2a34:	mov	r2, #0
    2a38:	str	r2, [r3, #8]
    2a3c:	mov	r3, #0
    2a40:	mov	r0, r3
    2a44:	add	sp, fp, #0
    2a48:	pop	{fp}		; (ldr fp, [sp], #4)
    2a4c:	bx	lr

00002a50 <coda_expression_lex_destroy>:
    2a50:	str	fp, [sp, #-8]!
    2a54:	str	lr, [sp, #4]
    2a58:	add	fp, sp, #4
    2a5c:	sub	sp, sp, #16
    2a60:	str	r0, [fp, #-16]
    2a64:	ldr	r3, [fp, #-16]
    2a68:	str	r3, [fp, #-8]
    2a6c:	b	2ad8 <coda_expression_lex_destroy+0x88>
    2a70:	ldr	r3, [fp, #-8]
    2a74:	ldr	r3, [r3, #20]
    2a78:	cmp	r3, #0
    2a7c:	beq	2aa0 <coda_expression_lex_destroy+0x50>
    2a80:	ldr	r3, [fp, #-8]
    2a84:	ldr	r2, [r3, #20]
    2a88:	ldr	r3, [fp, #-8]
    2a8c:	ldr	r3, [r3, #12]
    2a90:	lsl	r3, r3, #2
    2a94:	add	r3, r2, r3
    2a98:	ldr	r3, [r3]
    2a9c:	b	2aa4 <coda_expression_lex_destroy+0x54>
    2aa0:	mov	r3, #0
    2aa4:	ldr	r1, [fp, #-16]
    2aa8:	mov	r0, r3
    2aac:	bl	19cc <coda_expression__delete_buffer>
    2ab0:	ldr	r3, [fp, #-8]
    2ab4:	ldr	r2, [r3, #20]
    2ab8:	ldr	r3, [fp, #-8]
    2abc:	ldr	r3, [r3, #12]
    2ac0:	lsl	r3, r3, #2
    2ac4:	add	r3, r2, r3
    2ac8:	mov	r2, #0
    2acc:	str	r2, [r3]
    2ad0:	ldr	r0, [fp, #-16]
    2ad4:	bl	1dc4 <coda_expression_pop_buffer_state>
    2ad8:	ldr	r3, [fp, #-8]
    2adc:	ldr	r3, [r3, #20]
    2ae0:	cmp	r3, #0
    2ae4:	beq	2b0c <coda_expression_lex_destroy+0xbc>
    2ae8:	ldr	r3, [fp, #-8]
    2aec:	ldr	r2, [r3, #20]
    2af0:	ldr	r3, [fp, #-8]
    2af4:	ldr	r3, [r3, #12]
    2af8:	lsl	r3, r3, #2
    2afc:	add	r3, r2, r3
    2b00:	ldr	r3, [r3]
    2b04:	cmp	r3, #0
    2b08:	bne	2a70 <coda_expression_lex_destroy+0x20>
    2b0c:	ldr	r3, [fp, #-8]
    2b10:	ldr	r3, [r3, #20]
    2b14:	ldr	r1, [fp, #-16]
    2b18:	mov	r0, r3
    2b1c:	bl	2c08 <coda_expression_free>
    2b20:	ldr	r3, [fp, #-8]
    2b24:	mov	r2, #0
    2b28:	str	r2, [r3, #20]
    2b2c:	ldr	r3, [fp, #-8]
    2b30:	ldr	r3, [r3, #60]	; 0x3c
    2b34:	ldr	r1, [fp, #-16]
    2b38:	mov	r0, r3
    2b3c:	bl	2c08 <coda_expression_free>
    2b40:	ldr	r3, [fp, #-8]
    2b44:	mov	r2, #0
    2b48:	str	r2, [r3, #60]	; 0x3c
    2b4c:	ldr	r0, [fp, #-16]
    2b50:	bl	29a0 <yy_init_globals>
    2b54:	ldr	r1, [fp, #-16]
    2b58:	ldr	r0, [fp, #-16]
    2b5c:	bl	2c08 <coda_expression_free>
    2b60:	mov	r3, #0
    2b64:	str	r3, [fp, #-16]
    2b68:	mov	r3, #0
    2b6c:	mov	r0, r3
    2b70:	sub	sp, fp, #4
    2b74:	ldr	fp, [sp]
    2b78:	add	sp, sp, #4
    2b7c:	pop	{pc}		; (ldr pc, [sp], #4)

00002b80 <coda_expression_alloc>:
    2b80:	str	fp, [sp, #-8]!
    2b84:	str	lr, [sp, #4]
    2b88:	add	fp, sp, #4
    2b8c:	sub	sp, sp, #16
    2b90:	str	r0, [fp, #-16]
    2b94:	str	r1, [fp, #-20]	; 0xffffffec
    2b98:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b9c:	str	r3, [fp, #-8]
    2ba0:	ldr	r0, [fp, #-16]
    2ba4:	bl	0 <malloc>
    2ba8:	mov	r3, r0
    2bac:	mov	r0, r3
    2bb0:	sub	sp, fp, #4
    2bb4:	ldr	fp, [sp]
    2bb8:	add	sp, sp, #4
    2bbc:	pop	{pc}		; (ldr pc, [sp], #4)

00002bc0 <coda_expression_realloc>:
    2bc0:	str	fp, [sp, #-8]!
    2bc4:	str	lr, [sp, #4]
    2bc8:	add	fp, sp, #4
    2bcc:	sub	sp, sp, #24
    2bd0:	str	r0, [fp, #-16]
    2bd4:	str	r1, [fp, #-20]	; 0xffffffec
    2bd8:	str	r2, [fp, #-24]	; 0xffffffe8
    2bdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2be0:	str	r3, [fp, #-8]
    2be4:	ldr	r1, [fp, #-20]	; 0xffffffec
    2be8:	ldr	r0, [fp, #-16]
    2bec:	bl	0 <realloc>
    2bf0:	mov	r3, r0
    2bf4:	mov	r0, r3
    2bf8:	sub	sp, fp, #4
    2bfc:	ldr	fp, [sp]
    2c00:	add	sp, sp, #4
    2c04:	pop	{pc}		; (ldr pc, [sp], #4)

00002c08 <coda_expression_free>:
    2c08:	str	fp, [sp, #-8]!
    2c0c:	str	lr, [sp, #4]
    2c10:	add	fp, sp, #4
    2c14:	sub	sp, sp, #16
    2c18:	str	r0, [fp, #-16]
    2c1c:	str	r1, [fp, #-20]	; 0xffffffec
    2c20:	ldr	r3, [fp, #-20]	; 0xffffffec
    2c24:	str	r3, [fp, #-8]
    2c28:	ldr	r0, [fp, #-16]
    2c2c:	bl	0 <free>
    2c30:	nop	{0}
    2c34:	sub	sp, fp, #4
    2c38:	ldr	fp, [sp]
    2c3c:	add	sp, sp, #4
    2c40:	pop	{pc}		; (ldr pc, [sp], #4)
