
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_cursor_update_offset>:
       0:	ldr	r1, [r0, #4]
       4:	sub	r1, r1, #1
       8:	add	r0, r0, r1, lsl #4
       c:	ldr	r1, [r0, #8]
      10:	ldr	r2, [r1, #8]
      14:	cmp	r2, #2
      18:	bxne	lr
      1c:	push	{r4, r5, fp, lr}
      20:	add	fp, sp, #8
      24:	ldrd	r2, [r1, #24]
      28:	lsl	r1, r3, #3
      2c:	lsl	r4, r2, #3
      30:	orr	r5, r1, r2, lsr #29
      34:	strd	r4, [r0, #16]
      38:	pop	{r4, r5, fp, lr}
      3c:	bx	lr

00000040 <coda_mem_cursor_goto_record_field_by_index>:
      40:	push	{r4, r5, fp, lr}
      44:	add	fp, sp, #8
      48:	mov	r4, r1
      4c:	ldr	r1, [r0, #4]
      50:	mov	r5, r0
      54:	add	r0, r0, r1, lsl #4
      58:	ldr	r2, [r0, #-8]
      5c:	ldr	r0, [r2, #8]
      60:	cmp	r0, #2
      64:	beq	9c <coda_mem_cursor_goto_record_field_by_index+0x5c>
      68:	cmp	r0, #0
      6c:	bne	f8 <coda_mem_cursor_goto_record_field_by_index+0xb8>
      70:	ldr	r3, [r2, #16]
      74:	cmp	r4, #0
      78:	cmpge	r3, r4
      7c:	bgt	ac <coda_mem_cursor_goto_record_field_by_index+0x6c>
      80:	movw	r1, #0
      84:	mvn	r0, #100	; 0x64
      88:	mov	r2, r4
      8c:	movt	r1, #0
      90:	bl	0 <coda_set_error>
      94:	mvn	r0, #0
      98:	pop	{r4, r5, fp, pc}
      9c:	mov	r0, r5
      a0:	mov	r1, r4
      a4:	pop	{r4, r5, fp, lr}
      a8:	b	0 <coda_ascbin_cursor_goto_record_field_by_index>
      ac:	add	r0, r1, #1
      b0:	str	r0, [r5, #4]
      b4:	ldr	r0, [r2, #20]
      b8:	ldr	r0, [r0, r4, lsl #2]
      bc:	cmp	r0, #0
      c0:	bne	d8 <coda_mem_cursor_goto_record_field_by_index+0x98>
      c4:	ldr	r0, [r2, #4]
      c8:	ldr	r0, [r0]
      cc:	bl	0 <coda_no_data_singleton>
      d0:	ldr	r1, [r5, #4]
      d4:	sub	r1, r1, #1
      d8:	add	r1, r5, r1, lsl #4
      dc:	mvn	r2, #0
      e0:	str	r0, [r1, #8]
      e4:	mov	r0, #0
      e8:	str	r4, [r1, #12]
      ec:	str	r2, [r1, #16]
      f0:	str	r2, [r1, #20]
      f4:	pop	{r4, r5, fp, pc}
      f8:	movw	r0, #0
      fc:	movw	r1, #0
     100:	movw	r3, #0
     104:	mov	r2, #79	; 0x4f
     108:	movt	r0, #0
     10c:	movt	r1, #0
     110:	movt	r3, #0
     114:	bl	0 <__assert_fail>

00000118 <coda_mem_cursor_goto_next_record_field>:
     118:	push	{r4, r5, r6, r7, fp, lr}
     11c:	add	fp, sp, #16
     120:	ldr	r1, [r0, #4]
     124:	mov	r4, r0
     128:	add	r0, r0, r1, lsl #4
     12c:	ldr	r0, [r0, #-24]	; 0xffffffe8
     130:	ldr	r2, [r0, #8]
     134:	cmp	r2, #2
     138:	beq	184 <coda_mem_cursor_goto_next_record_field+0x6c>
     13c:	cmp	r2, #0
     140:	bne	1e8 <coda_mem_cursor_goto_next_record_field+0xd0>
     144:	sub	r1, r1, #1
     148:	ldr	r3, [r0, #16]
     14c:	add	r5, r4, r1, lsl #4
     150:	mov	r2, r5
     154:	ldr	r6, [r2, #12]!
     158:	add	r7, r6, #1
     15c:	cmn	r6, #1
     160:	blt	190 <coda_mem_cursor_goto_next_record_field+0x78>
     164:	cmp	r7, r3
     168:	bge	190 <coda_mem_cursor_goto_next_record_field+0x78>
     16c:	ldr	r3, [r0, #20]
     170:	ldr	r3, [r3, r7, lsl #2]
     174:	cmp	r3, #0
     178:	beq	1ac <coda_mem_cursor_goto_next_record_field+0x94>
     17c:	str	r3, [r5, #8]
     180:	b	1cc <coda_mem_cursor_goto_next_record_field+0xb4>
     184:	mov	r0, r4
     188:	pop	{r4, r5, r6, r7, fp, lr}
     18c:	b	0 <coda_ascbin_cursor_goto_next_record_field>
     190:	movw	r1, #0
     194:	mvn	r0, #100	; 0x64
     198:	mov	r2, r7
     19c:	movt	r1, #0
     1a0:	bl	0 <coda_set_error>
     1a4:	mvn	r0, #0
     1a8:	pop	{r4, r5, r6, r7, fp, pc}
     1ac:	ldr	r0, [r0, #4]
     1b0:	ldr	r0, [r0]
     1b4:	bl	0 <coda_no_data_singleton>
     1b8:	ldr	r1, [r4, #4]
     1bc:	sub	r1, r1, #1
     1c0:	add	r2, r4, r1, lsl #4
     1c4:	str	r0, [r2, #8]
     1c8:	add	r2, r2, #12
     1cc:	add	r0, r4, r1, lsl #4
     1d0:	mvn	r1, #0
     1d4:	str	r7, [r2]
     1d8:	str	r1, [r0, #16]
     1dc:	str	r1, [r0, #20]
     1e0:	mov	r0, #0
     1e4:	pop	{r4, r5, r6, r7, fp, pc}
     1e8:	movw	r0, #0
     1ec:	movw	r1, #0
     1f0:	movw	r3, #0
     1f4:	mov	r2, #111	; 0x6f
     1f8:	movt	r0, #0
     1fc:	movt	r1, #0
     200:	movt	r3, #0
     204:	bl	0 <__assert_fail>

00000208 <coda_mem_cursor_goto_available_union_field>:
     208:	push	{fp, lr}
     20c:	mov	fp, sp
     210:	ldr	r1, [r0, #4]
     214:	sub	r1, r1, #1
     218:	add	ip, r0, r1, lsl #4
     21c:	ldr	r2, [ip, #8]
     220:	ldr	r3, [r2, #8]
     224:	cmp	r3, #2
     228:	beq	27c <coda_mem_cursor_goto_available_union_field+0x74>
     22c:	cmp	r3, #0
     230:	bne	2a4 <coda_mem_cursor_goto_available_union_field+0x9c>
     234:	ldr	r0, [r2, #16]
     238:	cmp	r0, #1
     23c:	blt	260 <coda_mem_cursor_goto_available_union_field+0x58>
     240:	ldr	r3, [r2, #20]
     244:	mov	r2, #0
     248:	ldr	r1, [r3, r2, lsl #2]
     24c:	cmp	r1, #0
     250:	bne	284 <coda_mem_cursor_goto_available_union_field+0x7c>
     254:	add	r2, r2, #1
     258:	cmp	r2, r0
     25c:	blt	248 <coda_mem_cursor_goto_available_union_field+0x40>
     260:	movw	r0, #65236	; 0xfed4
     264:	movw	r1, #0
     268:	movt	r0, #65535	; 0xffff
     26c:	movt	r1, #0
     270:	bl	0 <coda_set_error>
     274:	mvn	r0, #0
     278:	pop	{fp, pc}
     27c:	pop	{fp, lr}
     280:	b	0 <coda_ascbin_cursor_goto_available_union_field>
     284:	ldr	r0, [r3, r2, lsl #2]
     288:	mvn	r1, #0
     28c:	str	r0, [ip, #8]
     290:	mov	r0, #0
     294:	str	r2, [ip, #12]
     298:	str	r1, [ip, #16]
     29c:	str	r1, [ip, #20]
     2a0:	pop	{fp, pc}
     2a4:	movw	r0, #0
     2a8:	movw	r1, #0
     2ac:	movw	r3, #0
     2b0:	mov	r2, #134	; 0x86
     2b4:	movt	r0, #0
     2b8:	movt	r1, #0
     2bc:	movt	r3, #0
     2c0:	bl	0 <__assert_fail>

000002c4 <coda_mem_cursor_get_available_union_field_index>:
     2c4:	push	{fp, lr}
     2c8:	mov	fp, sp
     2cc:	ldr	r2, [r0, #4]
     2d0:	add	r2, r0, r2, lsl #4
     2d4:	ldr	r2, [r2, #-8]
     2d8:	ldr	r3, [r2, #8]
     2dc:	cmp	r3, #2
     2e0:	beq	334 <coda_mem_cursor_get_available_union_field_index+0x70>
     2e4:	cmp	r3, #0
     2e8:	bne	348 <coda_mem_cursor_get_available_union_field_index+0x84>
     2ec:	ldr	ip, [r2, #16]
     2f0:	cmp	ip, #1
     2f4:	blt	318 <coda_mem_cursor_get_available_union_field_index+0x54>
     2f8:	ldr	r3, [r2, #20]
     2fc:	mov	r2, #0
     300:	ldr	r0, [r3, r2, lsl #2]
     304:	cmp	r0, #0
     308:	bne	33c <coda_mem_cursor_get_available_union_field_index+0x78>
     30c:	add	r2, r2, #1
     310:	cmp	r2, ip
     314:	blt	300 <coda_mem_cursor_get_available_union_field_index+0x3c>
     318:	movw	r0, #65236	; 0xfed4
     31c:	movw	r1, #0
     320:	movt	r0, #65535	; 0xffff
     324:	movt	r1, #0
     328:	bl	0 <coda_set_error>
     32c:	mvn	r0, #0
     330:	pop	{fp, pc}
     334:	pop	{fp, lr}
     338:	b	0 <coda_ascbin_cursor_get_available_union_field_index>
     33c:	mov	r0, #0
     340:	str	r2, [r1]
     344:	pop	{fp, pc}
     348:	movw	r0, #0
     34c:	movw	r1, #0
     350:	movw	r3, #0
     354:	movw	r2, #399	; 0x18f
     358:	movt	r0, #0
     35c:	movt	r1, #0
     360:	movt	r3, #0
     364:	bl	0 <__assert_fail>

00000368 <coda_mem_cursor_goto_array_element>:
     368:	push	{r4, r5, r6, sl, fp, lr}
     36c:	add	fp, sp, #16
     370:	ldr	r5, [r0, #4]
     374:	mov	r3, r1
     378:	mov	r1, r0
     37c:	add	r4, r0, r5, lsl #4
     380:	ldr	r6, [r4, #-8]
     384:	ldr	r0, [r6, #8]
     388:	cmp	r0, #2
     38c:	beq	3fc <coda_mem_cursor_goto_array_element+0x94>
     390:	cmp	r0, #1
     394:	bne	440 <coda_mem_cursor_goto_array_element+0xd8>
     398:	cmp	r3, #1
     39c:	bne	40c <coda_mem_cursor_goto_array_element+0xa4>
     3a0:	ldr	r0, [pc, #184]	; 460 <coda_mem_cursor_goto_array_element+0xf8>
     3a4:	ldr	r3, [pc, r0]
     3a8:	bl	0 <__aeabi_read_tp>
     3ac:	ldr	r0, [r0, r3]
     3b0:	ldr	r2, [r2]
     3b4:	cmp	r0, #0
     3b8:	beq	3d0 <coda_mem_cursor_goto_array_element+0x68>
     3bc:	ldr	r3, [r6, #16]
     3c0:	cmp	r2, #0
     3c4:	blt	428 <coda_mem_cursor_goto_array_element+0xc0>
     3c8:	cmp	r2, r3
     3cc:	bge	428 <coda_mem_cursor_goto_array_element+0xc0>
     3d0:	add	r0, r5, #1
     3d4:	str	r0, [r1, #4]
     3d8:	mvn	r1, #0
     3dc:	ldr	r0, [r6, #20]
     3e0:	ldr	r0, [r0, r2, lsl #2]
     3e4:	str	r0, [r4, #8]
     3e8:	mov	r0, #0
     3ec:	str	r2, [r4, #12]
     3f0:	str	r1, [r4, #16]
     3f4:	str	r1, [r4, #20]
     3f8:	pop	{r4, r5, r6, sl, fp, pc}
     3fc:	mov	r0, r1
     400:	mov	r1, r3
     404:	pop	{r4, r5, r6, sl, fp, lr}
     408:	b	0 <coda_ascbin_cursor_goto_array_element>
     40c:	movw	r1, #0
     410:	mvn	r0, #105	; 0x69
     414:	mov	r2, r3
     418:	movt	r1, #0
     41c:	bl	0 <coda_set_error>
     420:	mvn	r0, #0
     424:	pop	{r4, r5, r6, sl, fp, pc}
     428:	movw	r1, #0
     42c:	mvn	r0, #106	; 0x6a
     430:	movt	r1, #0
     434:	bl	0 <coda_set_error>
     438:	mvn	r0, #0
     43c:	pop	{r4, r5, r6, sl, fp, pc}
     440:	movw	r0, #0
     444:	movw	r1, #0
     448:	movw	r3, #0
     44c:	mov	r2, #169	; 0xa9
     450:	movt	r0, #0
     454:	movt	r1, #0
     458:	movt	r3, #0
     45c:	bl	0 <__assert_fail>
     460:	.word	0x000000b4

00000464 <coda_mem_cursor_goto_array_element_by_index>:
     464:	push	{r4, r5, r6, sl, fp, lr}
     468:	add	fp, sp, #16
     46c:	ldr	r5, [r0, #4]
     470:	mov	r2, r1
     474:	mov	r1, r0
     478:	add	r4, r0, r5, lsl #4
     47c:	ldr	r6, [r4, #-8]
     480:	ldr	r0, [r6, #8]
     484:	cmp	r0, #2
     488:	beq	4d4 <coda_mem_cursor_goto_array_element_by_index+0x70>
     48c:	cmp	r0, #1
     490:	bne	510 <coda_mem_cursor_goto_array_element_by_index+0xac>
     494:	ldr	r0, [pc, #148]	; 530 <coda_mem_cursor_goto_array_element_by_index+0xcc>
     498:	ldr	r3, [pc, r0]
     49c:	bl	0 <__aeabi_read_tp>
     4a0:	ldr	r0, [r0, r3]
     4a4:	cmp	r0, #0
     4a8:	beq	4e4 <coda_mem_cursor_goto_array_element_by_index+0x80>
     4ac:	ldr	r3, [r6, #16]
     4b0:	cmp	r2, #0
     4b4:	cmpge	r3, r2
     4b8:	bgt	4e4 <coda_mem_cursor_goto_array_element_by_index+0x80>
     4bc:	movw	r1, #0
     4c0:	mvn	r0, #106	; 0x6a
     4c4:	movt	r1, #0
     4c8:	bl	0 <coda_set_error>
     4cc:	mvn	r0, #0
     4d0:	pop	{r4, r5, r6, sl, fp, pc}
     4d4:	mov	r0, r1
     4d8:	mov	r1, r2
     4dc:	pop	{r4, r5, r6, sl, fp, lr}
     4e0:	b	0 <coda_ascbin_cursor_goto_array_element_by_index>
     4e4:	add	r0, r5, #1
     4e8:	str	r0, [r1, #4]
     4ec:	mvn	r1, #0
     4f0:	ldr	r0, [r6, #20]
     4f4:	ldr	r0, [r0, r2, lsl #2]
     4f8:	str	r0, [r4, #8]
     4fc:	mov	r0, #0
     500:	str	r2, [r4, #12]
     504:	str	r1, [r4, #16]
     508:	str	r1, [r4, #20]
     50c:	pop	{r4, r5, r6, sl, fp, pc}
     510:	movw	r0, #0
     514:	movw	r1, #0
     518:	movw	r3, #0
     51c:	mov	r2, #197	; 0xc5
     520:	movt	r0, #0
     524:	movt	r1, #0
     528:	movt	r3, #0
     52c:	bl	0 <__assert_fail>
     530:	.word	0x00000090

00000534 <coda_mem_cursor_goto_next_array_element>:
     534:	push	{r4, r5, r6, r7, fp, lr}
     538:	add	fp, sp, #16
     53c:	ldr	r1, [r0, #4]
     540:	mov	r4, r0
     544:	add	r0, r0, r1, lsl #4
     548:	ldr	r0, [r0, #-24]	; 0xffffffe8
     54c:	ldr	r2, [r0, #8]
     550:	cmp	r2, #2
     554:	beq	5a0 <coda_mem_cursor_goto_next_array_element+0x6c>
     558:	cmp	r2, #1
     55c:	bne	604 <coda_mem_cursor_goto_next_array_element+0xd0>
     560:	sub	r1, r1, #1
     564:	ldr	r3, [r0, #16]
     568:	add	r5, r4, r1, lsl #4
     56c:	mov	r2, r5
     570:	ldr	r6, [r2, #12]!
     574:	add	r7, r6, #1
     578:	cmn	r6, #1
     57c:	blt	5ac <coda_mem_cursor_goto_next_array_element+0x78>
     580:	cmp	r7, r3
     584:	bge	5ac <coda_mem_cursor_goto_next_array_element+0x78>
     588:	ldr	r3, [r0, #20]
     58c:	ldr	r3, [r3, r7, lsl #2]
     590:	cmp	r3, #0
     594:	beq	5c8 <coda_mem_cursor_goto_next_array_element+0x94>
     598:	str	r3, [r5, #8]
     59c:	b	5e8 <coda_mem_cursor_goto_next_array_element+0xb4>
     5a0:	mov	r0, r4
     5a4:	pop	{r4, r5, r6, r7, fp, lr}
     5a8:	b	0 <coda_ascbin_cursor_goto_next_array_element>
     5ac:	movw	r1, #0
     5b0:	mvn	r0, #106	; 0x6a
     5b4:	mov	r2, r7
     5b8:	movt	r1, #0
     5bc:	bl	0 <coda_set_error>
     5c0:	mvn	r0, #0
     5c4:	pop	{r4, r5, r6, r7, fp, pc}
     5c8:	ldr	r0, [r0, #4]
     5cc:	ldr	r0, [r0]
     5d0:	bl	0 <coda_no_data_singleton>
     5d4:	ldr	r1, [r4, #4]
     5d8:	sub	r1, r1, #1
     5dc:	add	r2, r4, r1, lsl #4
     5e0:	str	r0, [r2, #8]
     5e4:	add	r2, r2, #12
     5e8:	add	r0, r4, r1, lsl #4
     5ec:	mvn	r1, #0
     5f0:	str	r7, [r2]
     5f4:	str	r1, [r0, #16]
     5f8:	str	r1, [r0, #20]
     5fc:	mov	r0, #0
     600:	pop	{r4, r5, r6, r7, fp, pc}
     604:	movw	r0, #0
     608:	movw	r1, #0
     60c:	movw	r3, #0
     610:	mov	r2, #229	; 0xe5
     614:	movt	r0, #0
     618:	movt	r1, #0
     61c:	movt	r3, #0
     620:	bl	0 <__assert_fail>

00000624 <coda_mem_cursor_goto_attributes>:
     624:	push	{r4, sl, fp, lr}
     628:	add	fp, sp, #8
     62c:	ldr	r1, [r0, #4]
     630:	mov	r4, r0
     634:	add	r0, r1, #1
     638:	str	r0, [r4, #4]
     63c:	add	r0, r4, r1, lsl #4
     640:	ldr	r2, [r0, #-8]
     644:	ldr	r0, [r2, #12]
     648:	cmp	r0, #0
     64c:	bne	664 <coda_mem_cursor_goto_attributes+0x40>
     650:	ldr	r0, [r2, #4]
     654:	ldr	r0, [r0]
     658:	bl	0 <coda_mem_empty_record>
     65c:	ldr	r1, [r4, #4]
     660:	sub	r1, r1, #1
     664:	add	r1, r4, r1, lsl #4
     668:	mvn	r2, #0
     66c:	str	r0, [r1, #8]
     670:	mov	r0, #0
     674:	str	r2, [r1, #12]
     678:	str	r2, [r1, #16]
     67c:	str	r2, [r1, #20]
     680:	pop	{r4, sl, fp, pc}

00000684 <coda_mem_cursor_use_base_type_of_special_type>:
     684:	ldr	r1, [r0, #4]
     688:	add	r0, r0, r1, lsl #4
     68c:	ldr	r1, [r0, #-8]!
     690:	ldr	r2, [r1, #8]
     694:	cmp	r2, #2
     698:	beq	6ac <coda_mem_cursor_use_base_type_of_special_type+0x28>
     69c:	cmp	r2, #3
     6a0:	bne	6c4 <coda_mem_cursor_use_base_type_of_special_type+0x40>
     6a4:	add	r1, r1, #16
     6a8:	b	6b4 <coda_mem_cursor_use_base_type_of_special_type+0x30>
     6ac:	ldr	r1, [r1, #4]
     6b0:	add	r1, r1, #44	; 0x2c
     6b4:	ldr	r1, [r1]
     6b8:	str	r1, [r0]
     6bc:	mov	r0, #0
     6c0:	bx	lr
     6c4:	push	{fp, lr}
     6c8:	mov	fp, sp
     6cc:	movw	r0, #0
     6d0:	movw	r1, #0
     6d4:	movw	r3, #0
     6d8:	movw	r2, #263	; 0x107
     6dc:	movt	r0, #0
     6e0:	movt	r1, #0
     6e4:	movt	r3, #0
     6e8:	bl	0 <__assert_fail>

000006ec <coda_mem_cursor_get_string_length>:
     6ec:	push	{r4, sl, fp, lr}
     6f0:	add	fp, sp, #8
     6f4:	sub	sp, sp, #8
     6f8:	mov	r4, r1
     6fc:	mov	r1, sp
     700:	bl	740 <coda_mem_cursor_get_bit_size>
     704:	mov	r1, r0
     708:	mvn	r0, #0
     70c:	cmp	r1, #0
     710:	beq	71c <coda_mem_cursor_get_string_length+0x30>
     714:	sub	sp, fp, #8
     718:	pop	{r4, sl, fp, pc}
     71c:	ldm	sp, {r0, r1}
     720:	lsr	r0, r0, #3
     724:	cmp	r1, #0
     728:	orr	r0, r0, r1, lsl #29
     72c:	mvnlt	r0, #0
     730:	str	r0, [r4]
     734:	mov	r0, #0
     738:	sub	sp, fp, #8
     73c:	pop	{r4, sl, fp, pc}

00000740 <coda_mem_cursor_get_bit_size>:
     740:	push	{r4, r5, r6, r7, fp, lr}
     744:	add	fp, sp, #16
     748:	sub	sp, sp, #520	; 0x208
     74c:	mov	r4, r1
     750:	mov	r1, r0
     754:	ldr	r0, [r0, #4]
     758:	add	r0, r1, r0, lsl #4
     75c:	ldr	r5, [r0, #-8]
     760:	ldr	r0, [r5, #8]
     764:	cmp	r0, #2
     768:	beq	7b0 <coda_mem_cursor_get_bit_size+0x70>
     76c:	cmp	r0, #3
     770:	bne	7d0 <coda_mem_cursor_get_bit_size+0x90>
     774:	mov	r5, sp
     778:	mov	r2, #520	; 0x208
     77c:	mov	r0, r5
     780:	bl	0 <memcpy>
     784:	mov	r0, r5
     788:	bl	0 <coda_cursor_use_base_type_of_special_type>
     78c:	mov	r1, r0
     790:	mvn	r0, #0
     794:	cmp	r1, #0
     798:	bne	814 <coda_mem_cursor_get_bit_size+0xd4>
     79c:	mov	r0, sp
     7a0:	mov	r1, r4
     7a4:	bl	0 <coda_cursor_get_bit_size>
     7a8:	sub	sp, fp, #16
     7ac:	pop	{r4, r5, r6, r7, fp, pc}
     7b0:	ldr	r0, [r5, #4]
     7b4:	ldr	r0, [r0]
     7b8:	cmp	r0, #0
     7bc:	beq	7e8 <coda_mem_cursor_get_bit_size+0xa8>
     7c0:	mov	r0, r1
     7c4:	mov	r1, r4
     7c8:	bl	0 <coda_bin_cursor_get_bit_size>
     7cc:	b	7f4 <coda_mem_cursor_get_bit_size+0xb4>
     7d0:	mvn	r0, #0
     7d4:	str	r0, [r4]
     7d8:	str	r0, [r4, #4]
     7dc:	mov	r0, #0
     7e0:	sub	sp, fp, #16
     7e4:	pop	{r4, r5, r6, r7, fp, pc}
     7e8:	mov	r0, r1
     7ec:	mov	r1, r4
     7f0:	bl	0 <coda_ascii_cursor_get_bit_size>
     7f4:	mov	r1, r0
     7f8:	mvn	r0, #0
     7fc:	cmp	r1, #0
     800:	bne	814 <coda_mem_cursor_get_bit_size+0xd4>
     804:	ldr	r1, [r4, #4]
     808:	mov	r0, #0
     80c:	cmn	r1, #1
     810:	ble	81c <coda_mem_cursor_get_bit_size+0xdc>
     814:	sub	sp, fp, #16
     818:	pop	{r4, r5, r6, r7, fp, pc}
     81c:	ldr	r1, [r5, #16]
     820:	sbfx	r3, r1, #28, #1
     824:	lsl	r2, r1, #3
     828:	strd	r2, [r4]
     82c:	sub	sp, fp, #16
     830:	pop	{r4, r5, r6, r7, fp, pc}

00000834 <coda_mem_cursor_get_num_elements>:
     834:	ldr	r2, [r0, #4]
     838:	add	r2, r0, r2, lsl #4
     83c:	ldr	ip, [r2, #-8]
     840:	ldr	r3, [ip, #8]
     844:	cmp	r3, #3
     848:	bhi	888 <coda_mem_cursor_get_num_elements+0x54>
     84c:	add	r2, pc, #0
     850:	ldr	pc, [r2, r3, lsl #2]
     854:	.word	0x00000864
     858:	.word	0x00000864
     85c:	.word	0x0000086c
     860:	.word	0x00000880
     864:	ldr	r0, [ip, #16]
     868:	b	884 <coda_mem_cursor_get_num_elements+0x50>
     86c:	ldr	r2, [ip, #4]
     870:	ldr	r2, [r2]
     874:	cmp	r2, #0
     878:	beq	890 <coda_mem_cursor_get_num_elements+0x5c>
     87c:	b	0 <coda_bin_cursor_get_num_elements>
     880:	mov	r0, #1
     884:	str	r0, [r1]
     888:	mov	r0, #0
     88c:	bx	lr
     890:	b	0 <coda_ascii_cursor_get_num_elements>

00000894 <coda_mem_cursor_get_record_field_available_status>:
     894:	push	{fp, lr}
     898:	mov	fp, sp
     89c:	mov	ip, r1
     8a0:	ldr	r1, [r0, #4]
     8a4:	add	r1, r0, r1, lsl #4
     8a8:	ldr	r1, [r1, #-8]
     8ac:	ldr	r3, [r1, #8]
     8b0:	cmp	r3, #0
     8b4:	beq	8cc <coda_mem_cursor_get_record_field_available_status+0x38>
     8b8:	cmp	r3, #2
     8bc:	bne	914 <coda_mem_cursor_get_record_field_available_status+0x80>
     8c0:	mov	r1, ip
     8c4:	pop	{fp, lr}
     8c8:	b	0 <coda_ascbin_cursor_get_record_field_available_status>
     8cc:	ldr	r3, [r1, #16]
     8d0:	cmp	ip, #0
     8d4:	cmpge	r3, ip
     8d8:	bgt	8f8 <coda_mem_cursor_get_record_field_available_status+0x64>
     8dc:	movw	r1, #0
     8e0:	mvn	r0, #100	; 0x64
     8e4:	mov	r2, ip
     8e8:	movt	r1, #0
     8ec:	bl	0 <coda_set_error>
     8f0:	mvn	r0, #0
     8f4:	pop	{fp, pc}
     8f8:	ldr	r0, [r1, #20]
     8fc:	ldr	r0, [r0, ip, lsl #2]
     900:	cmp	r0, #0
     904:	movwne	r0, #1
     908:	str	r0, [r2]
     90c:	mov	r0, #0
     910:	pop	{fp, pc}
     914:	movw	r0, #0
     918:	movw	r1, #0
     91c:	movw	r3, #0
     920:	mov	r2, #364	; 0x16c
     924:	movt	r0, #0
     928:	movt	r1, #0
     92c:	movt	r3, #0
     930:	bl	0 <__assert_fail>

00000934 <coda_mem_cursor_get_array_dim>:
     934:	push	{r4, sl, fp, lr}
     938:	add	fp, sp, #8
     93c:	ldr	r3, [r0, #4]
     940:	add	r3, r0, r3, lsl #4
     944:	ldr	r3, [r3, #-8]
     948:	ldr	r4, [r3, #8]
     94c:	cmp	r4, #1
     950:	beq	964 <coda_mem_cursor_get_array_dim+0x30>
     954:	cmp	r4, #2
     958:	bne	a10 <coda_mem_cursor_get_array_dim+0xdc>
     95c:	pop	{r4, sl, fp, lr}
     960:	b	0 <coda_ascbin_cursor_get_array_dim>
     964:	ldr	lr, [r3, #4]
     968:	ldr	r0, [lr, #44]	; 0x2c
     96c:	cmp	r0, #0
     970:	blt	9f8 <coda_mem_cursor_get_array_dim+0xc4>
     974:	ldr	r0, [lr, #48]	; 0x30
     978:	str	r0, [r1]
     97c:	ldr	ip, [lr, #48]	; 0x30
     980:	cmp	ip, #1
     984:	blt	9f0 <coda_mem_cursor_get_array_dim+0xbc>
     988:	mov	r3, #0
     98c:	cmp	ip, #4
     990:	bcc	9d8 <coda_mem_cursor_get_array_dim+0xa4>
     994:	add	r0, lr, ip, lsl #2
     998:	add	r1, lr, #52	; 0x34
     99c:	add	r0, r0, #52	; 0x34
     9a0:	cmp	r0, r2
     9a4:	bls	9b4 <coda_mem_cursor_get_array_dim+0x80>
     9a8:	add	r0, r2, ip, lsl #2
     9ac:	cmp	r1, r0
     9b0:	bcc	9d8 <coda_mem_cursor_get_array_dim+0xa4>
     9b4:	bic	r3, ip, #3
     9b8:	mov	r4, r2
     9bc:	mov	r0, r3
     9c0:	vld1.32	{d16-d17}, [r1]!
     9c4:	subs	r0, r0, #4
     9c8:	vst1.32	{d16-d17}, [r4]!
     9cc:	bne	9c0 <coda_mem_cursor_get_array_dim+0x8c>
     9d0:	cmp	ip, r3
     9d4:	beq	9f0 <coda_mem_cursor_get_array_dim+0xbc>
     9d8:	add	r0, lr, r3, lsl #2
     9dc:	ldr	r0, [r0, #52]	; 0x34
     9e0:	str	r0, [r2, r3, lsl #2]
     9e4:	add	r3, r3, #1
     9e8:	cmp	r3, ip
     9ec:	blt	9d8 <coda_mem_cursor_get_array_dim+0xa4>
     9f0:	mov	r0, #0
     9f4:	pop	{r4, sl, fp, pc}
     9f8:	mov	r0, #1
     9fc:	str	r0, [r1]
     a00:	ldr	r0, [r3, #16]
     a04:	str	r0, [r2]
     a08:	mov	r0, #0
     a0c:	pop	{r4, sl, fp, pc}
     a10:	movw	r0, #0
     a14:	movw	r1, #0
     a18:	movw	r3, #0
     a1c:	movw	r2, #413	; 0x19d
     a20:	movt	r0, #0
     a24:	movt	r1, #0
     a28:	movt	r3, #0
     a2c:	bl	0 <__assert_fail>

00000a30 <coda_mem_cursor_read_int8>:
     a30:	ldr	r2, [r0, #4]
     a34:	add	r2, r0, r2, lsl #4
     a38:	ldr	r2, [r2, #-8]
     a3c:	ldr	r3, [r2, #8]
     a40:	cmp	r3, #2
     a44:	bne	a60 <coda_mem_cursor_read_int8+0x30>
     a48:	ldr	r2, [r2, #4]
     a4c:	ldr	r2, [r2]
     a50:	cmp	r2, #0
     a54:	beq	a5c <coda_mem_cursor_read_int8+0x2c>
     a58:	b	0 <coda_bin_cursor_read_int8>
     a5c:	b	0 <coda_ascii_cursor_read_int8>
     a60:	push	{fp, lr}
     a64:	mov	fp, sp
     a68:	movw	r0, #0
     a6c:	movw	r1, #0
     a70:	movw	r3, #0
     a74:	movw	r2, #439	; 0x1b7
     a78:	movt	r0, #0
     a7c:	movt	r1, #0
     a80:	movt	r3, #0
     a84:	bl	0 <__assert_fail>

00000a88 <coda_mem_cursor_read_uint8>:
     a88:	ldr	r2, [r0, #4]
     a8c:	add	r2, r0, r2, lsl #4
     a90:	ldr	r2, [r2, #-8]
     a94:	ldr	r3, [r2, #8]
     a98:	cmp	r3, #2
     a9c:	bne	ab8 <coda_mem_cursor_read_uint8+0x30>
     aa0:	ldr	r2, [r2, #4]
     aa4:	ldr	r2, [r2]
     aa8:	cmp	r2, #0
     aac:	beq	ab4 <coda_mem_cursor_read_uint8+0x2c>
     ab0:	b	0 <coda_bin_cursor_read_uint8>
     ab4:	b	0 <coda_ascii_cursor_read_uint8>
     ab8:	push	{fp, lr}
     abc:	mov	fp, sp
     ac0:	movw	r0, #0
     ac4:	movw	r1, #0
     ac8:	movw	r3, #0
     acc:	movw	r2, #451	; 0x1c3
     ad0:	movt	r0, #0
     ad4:	movt	r1, #0
     ad8:	movt	r3, #0
     adc:	bl	0 <__assert_fail>

00000ae0 <coda_mem_cursor_read_int16>:
     ae0:	ldr	r2, [r0, #4]
     ae4:	add	r2, r0, r2, lsl #4
     ae8:	ldr	r2, [r2, #-8]
     aec:	ldr	r3, [r2, #8]
     af0:	cmp	r3, #2
     af4:	bne	b10 <coda_mem_cursor_read_int16+0x30>
     af8:	ldr	r2, [r2, #4]
     afc:	ldr	r2, [r2]
     b00:	cmp	r2, #0
     b04:	beq	b0c <coda_mem_cursor_read_int16+0x2c>
     b08:	b	0 <coda_bin_cursor_read_int16>
     b0c:	b	0 <coda_ascii_cursor_read_int16>
     b10:	push	{fp, lr}
     b14:	mov	fp, sp
     b18:	movw	r0, #0
     b1c:	movw	r1, #0
     b20:	movw	r3, #0
     b24:	movw	r2, #463	; 0x1cf
     b28:	movt	r0, #0
     b2c:	movt	r1, #0
     b30:	movt	r3, #0
     b34:	bl	0 <__assert_fail>

00000b38 <coda_mem_cursor_read_uint16>:
     b38:	ldr	r2, [r0, #4]
     b3c:	add	r2, r0, r2, lsl #4
     b40:	ldr	r2, [r2, #-8]
     b44:	ldr	r3, [r2, #8]
     b48:	cmp	r3, #2
     b4c:	bne	b68 <coda_mem_cursor_read_uint16+0x30>
     b50:	ldr	r2, [r2, #4]
     b54:	ldr	r2, [r2]
     b58:	cmp	r2, #0
     b5c:	beq	b64 <coda_mem_cursor_read_uint16+0x2c>
     b60:	b	0 <coda_bin_cursor_read_uint16>
     b64:	b	0 <coda_ascii_cursor_read_uint16>
     b68:	push	{fp, lr}
     b6c:	mov	fp, sp
     b70:	movw	r0, #0
     b74:	movw	r1, #0
     b78:	movw	r3, #0
     b7c:	movw	r2, #475	; 0x1db
     b80:	movt	r0, #0
     b84:	movt	r1, #0
     b88:	movt	r3, #0
     b8c:	bl	0 <__assert_fail>

00000b90 <coda_mem_cursor_read_int32>:
     b90:	ldr	r2, [r0, #4]
     b94:	add	r2, r0, r2, lsl #4
     b98:	ldr	r2, [r2, #-8]
     b9c:	ldr	r3, [r2, #8]
     ba0:	cmp	r3, #2
     ba4:	bne	bc0 <coda_mem_cursor_read_int32+0x30>
     ba8:	ldr	r2, [r2, #4]
     bac:	ldr	r2, [r2]
     bb0:	cmp	r2, #0
     bb4:	beq	bbc <coda_mem_cursor_read_int32+0x2c>
     bb8:	b	0 <coda_bin_cursor_read_int32>
     bbc:	b	0 <coda_ascii_cursor_read_int32>
     bc0:	push	{fp, lr}
     bc4:	mov	fp, sp
     bc8:	movw	r0, #0
     bcc:	movw	r1, #0
     bd0:	movw	r3, #0
     bd4:	movw	r2, #487	; 0x1e7
     bd8:	movt	r0, #0
     bdc:	movt	r1, #0
     be0:	movt	r3, #0
     be4:	bl	0 <__assert_fail>

00000be8 <coda_mem_cursor_read_uint32>:
     be8:	ldr	r2, [r0, #4]
     bec:	add	r2, r0, r2, lsl #4
     bf0:	ldr	r2, [r2, #-8]
     bf4:	ldr	r3, [r2, #8]
     bf8:	cmp	r3, #2
     bfc:	bne	c18 <coda_mem_cursor_read_uint32+0x30>
     c00:	ldr	r2, [r2, #4]
     c04:	ldr	r2, [r2]
     c08:	cmp	r2, #0
     c0c:	beq	c14 <coda_mem_cursor_read_uint32+0x2c>
     c10:	b	0 <coda_bin_cursor_read_uint32>
     c14:	b	0 <coda_ascii_cursor_read_uint32>
     c18:	push	{fp, lr}
     c1c:	mov	fp, sp
     c20:	movw	r0, #0
     c24:	movw	r1, #0
     c28:	movw	r3, #0
     c2c:	movw	r2, #499	; 0x1f3
     c30:	movt	r0, #0
     c34:	movt	r1, #0
     c38:	movt	r3, #0
     c3c:	bl	0 <__assert_fail>

00000c40 <coda_mem_cursor_read_int64>:
     c40:	ldr	r2, [r0, #4]
     c44:	add	r2, r0, r2, lsl #4
     c48:	ldr	r2, [r2, #-8]
     c4c:	ldr	r3, [r2, #8]
     c50:	cmp	r3, #2
     c54:	bne	c70 <coda_mem_cursor_read_int64+0x30>
     c58:	ldr	r2, [r2, #4]
     c5c:	ldr	r2, [r2]
     c60:	cmp	r2, #0
     c64:	beq	c6c <coda_mem_cursor_read_int64+0x2c>
     c68:	b	0 <coda_bin_cursor_read_int64>
     c6c:	b	0 <coda_ascii_cursor_read_int64>
     c70:	push	{fp, lr}
     c74:	mov	fp, sp
     c78:	movw	r0, #0
     c7c:	movw	r1, #0
     c80:	movw	r3, #0
     c84:	movw	r2, #511	; 0x1ff
     c88:	movt	r0, #0
     c8c:	movt	r1, #0
     c90:	movt	r3, #0
     c94:	bl	0 <__assert_fail>

00000c98 <coda_mem_cursor_read_uint64>:
     c98:	ldr	r2, [r0, #4]
     c9c:	add	r2, r0, r2, lsl #4
     ca0:	ldr	r2, [r2, #-8]
     ca4:	ldr	r3, [r2, #8]
     ca8:	cmp	r3, #2
     cac:	bne	cc8 <coda_mem_cursor_read_uint64+0x30>
     cb0:	ldr	r2, [r2, #4]
     cb4:	ldr	r2, [r2]
     cb8:	cmp	r2, #0
     cbc:	beq	cc4 <coda_mem_cursor_read_uint64+0x2c>
     cc0:	b	0 <coda_bin_cursor_read_uint64>
     cc4:	b	0 <coda_ascii_cursor_read_uint64>
     cc8:	push	{fp, lr}
     ccc:	mov	fp, sp
     cd0:	movw	r0, #0
     cd4:	movw	r1, #0
     cd8:	movw	r3, #0
     cdc:	movw	r2, #523	; 0x20b
     ce0:	movt	r0, #0
     ce4:	movt	r1, #0
     ce8:	movt	r3, #0
     cec:	bl	0 <__assert_fail>

00000cf0 <coda_mem_cursor_read_float>:
     cf0:	ldr	r2, [r0, #4]
     cf4:	add	r2, r0, r2, lsl #4
     cf8:	ldr	r2, [r2, #-8]
     cfc:	ldr	r3, [r2, #8]
     d00:	cmp	r3, #2
     d04:	bne	d20 <coda_mem_cursor_read_float+0x30>
     d08:	ldr	r2, [r2, #4]
     d0c:	ldr	r2, [r2]
     d10:	cmp	r2, #0
     d14:	beq	d1c <coda_mem_cursor_read_float+0x2c>
     d18:	b	0 <coda_bin_cursor_read_float>
     d1c:	b	0 <coda_ascii_cursor_read_float>
     d20:	push	{fp, lr}
     d24:	mov	fp, sp
     d28:	movw	r0, #0
     d2c:	movw	r1, #0
     d30:	movw	r3, #0
     d34:	movw	r2, #535	; 0x217
     d38:	movt	r0, #0
     d3c:	movt	r1, #0
     d40:	movt	r3, #0
     d44:	bl	0 <__assert_fail>

00000d48 <coda_mem_cursor_read_double>:
     d48:	ldr	r2, [r0, #4]
     d4c:	add	r2, r0, r2, lsl #4
     d50:	ldr	r2, [r2, #-8]
     d54:	ldr	r3, [r2, #8]
     d58:	cmp	r3, #2
     d5c:	bne	d78 <coda_mem_cursor_read_double+0x30>
     d60:	ldr	r2, [r2, #4]
     d64:	ldr	r2, [r2]
     d68:	cmp	r2, #0
     d6c:	beq	d74 <coda_mem_cursor_read_double+0x2c>
     d70:	b	0 <coda_bin_cursor_read_double>
     d74:	b	0 <coda_ascii_cursor_read_double>
     d78:	push	{fp, lr}
     d7c:	mov	fp, sp
     d80:	movw	r0, #0
     d84:	movw	r1, #0
     d88:	movw	r3, #0
     d8c:	movw	r2, #547	; 0x223
     d90:	movt	r0, #0
     d94:	movt	r1, #0
     d98:	movt	r3, #0
     d9c:	bl	0 <__assert_fail>

00000da0 <coda_mem_cursor_read_char>:
     da0:	ldr	r2, [r0, #4]
     da4:	add	r2, r0, r2, lsl #4
     da8:	ldr	r2, [r2, #-8]
     dac:	ldr	r3, [r2, #8]
     db0:	cmp	r3, #2
     db4:	bne	dd4 <coda_mem_cursor_read_char+0x34>
     db8:	ldr	r2, [r2, #4]
     dbc:	ldr	r2, [r2]
     dc0:	orr	r2, r2, #2
     dc4:	cmp	r2, #2
     dc8:	bne	dd0 <coda_mem_cursor_read_char+0x30>
     dcc:	b	0 <coda_ascii_cursor_read_char>
     dd0:	b	0 <coda_bin_cursor_read_char>
     dd4:	push	{fp, lr}
     dd8:	mov	fp, sp
     ddc:	movw	r0, #0
     de0:	movw	r1, #0
     de4:	movw	r3, #0
     de8:	movw	r2, #559	; 0x22f
     dec:	movt	r0, #0
     df0:	movt	r1, #0
     df4:	movt	r3, #0
     df8:	bl	0 <__assert_fail>

00000dfc <coda_mem_cursor_read_string>:
     dfc:	push	{r4, r5, r6, sl, fp, lr}
     e00:	add	fp, sp, #16
     e04:	sub	sp, sp, #520	; 0x208
     e08:	mov	r5, r1
     e0c:	mov	r1, r0
     e10:	ldr	r0, [r0, #4]
     e14:	mov	r4, r2
     e18:	add	r0, r1, r0, lsl #4
     e1c:	ldr	r0, [r0, #-8]
     e20:	ldr	r0, [r0, #8]
     e24:	cmp	r0, #2
     e28:	beq	e64 <coda_mem_cursor_read_string+0x68>
     e2c:	cmp	r0, #3
     e30:	bne	e94 <coda_mem_cursor_read_string+0x98>
     e34:	mov	r6, sp
     e38:	mov	r2, #520	; 0x208
     e3c:	mov	r0, r6
     e40:	bl	0 <memcpy>
     e44:	mov	r0, r6
     e48:	bl	0 <coda_cursor_use_base_type_of_special_type>
     e4c:	mov	r1, r0
     e50:	mvn	r0, #0
     e54:	cmp	r1, #0
     e58:	beq	e7c <coda_mem_cursor_read_string+0x80>
     e5c:	sub	sp, fp, #16
     e60:	pop	{r4, r5, r6, sl, fp, pc}
     e64:	mov	r0, r1
     e68:	mov	r1, r5
     e6c:	mov	r2, r4
     e70:	sub	sp, fp, #16
     e74:	pop	{r4, r5, r6, sl, fp, lr}
     e78:	b	0 <coda_ascii_cursor_read_string>
     e7c:	mov	r0, sp
     e80:	mov	r1, r5
     e84:	mov	r2, r4
     e88:	bl	0 <coda_cursor_read_string>
     e8c:	sub	sp, fp, #16
     e90:	pop	{r4, r5, r6, sl, fp, pc}
     e94:	movw	r0, #0
     e98:	movw	r1, #0
     e9c:	movw	r3, #0
     ea0:	movw	r2, #582	; 0x246
     ea4:	movt	r0, #0
     ea8:	movt	r1, #0
     eac:	movt	r3, #0
     eb0:	bl	0 <__assert_fail>

00000eb4 <coda_mem_cursor_read_bits>:
     eb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     eb8:	add	fp, sp, #24
     ebc:	sub	sp, sp, #536	; 0x218
     ec0:	mov	r6, r1
     ec4:	mov	r1, r0
     ec8:	ldr	r0, [r0, #4]
     ecc:	mov	r5, r2
     ed0:	mov	r4, r3
     ed4:	add	r0, r1, r0, lsl #4
     ed8:	ldr	r0, [r0, #-8]
     edc:	ldr	r2, [r0, #8]
     ee0:	cmp	r2, #2
     ee4:	beq	f28 <coda_mem_cursor_read_bits+0x74>
     ee8:	cmp	r2, #3
     eec:	bne	f54 <coda_mem_cursor_read_bits+0xa0>
     ef0:	ldr	r8, [fp, #12]
     ef4:	ldr	r9, [fp, #8]
     ef8:	add	r7, sp, #8
     efc:	mov	r2, #520	; 0x208
     f00:	mov	r0, r7
     f04:	bl	0 <memcpy>
     f08:	mov	r0, r7
     f0c:	bl	0 <coda_cursor_use_base_type_of_special_type>
     f10:	mov	r1, r0
     f14:	mvn	r0, #0
     f18:	cmp	r1, #0
     f1c:	beq	f70 <coda_mem_cursor_read_bits+0xbc>
     f20:	sub	sp, fp, #24
     f24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     f28:	ldr	r0, [r0, #4]
     f2c:	ldr	r0, [r0]
     f30:	cmp	r0, #0
     f34:	beq	f94 <coda_mem_cursor_read_bits+0xe0>
     f38:	mov	r0, r1
     f3c:	mov	r1, r6
     f40:	mov	r2, r5
     f44:	mov	r3, r4
     f48:	sub	sp, fp, #24
     f4c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
     f50:	b	0 <coda_bin_cursor_read_bits>
     f54:	movw	r1, #0
     f58:	mvn	r0, #104	; 0x68
     f5c:	movt	r1, #0
     f60:	bl	0 <coda_set_error>
     f64:	mvn	r0, #0
     f68:	sub	sp, fp, #24
     f6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     f70:	add	r0, sp, #8
     f74:	mov	r1, r6
     f78:	mov	r2, r5
     f7c:	mov	r3, r4
     f80:	str	r9, [sp]
     f84:	str	r8, [sp, #4]
     f88:	bl	0 <coda_cursor_read_bits>
     f8c:	sub	sp, fp, #24
     f90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     f94:	mov	r0, r1
     f98:	mov	r1, r6
     f9c:	mov	r2, r5
     fa0:	mov	r3, r4
     fa4:	sub	sp, fp, #24
     fa8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
     fac:	b	0 <coda_ascii_cursor_read_bits>

00000fb0 <coda_mem_cursor_read_bytes>:
     fb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     fb4:	add	fp, sp, #24
     fb8:	sub	sp, sp, #536	; 0x218
     fbc:	mov	r6, r1
     fc0:	mov	r1, r0
     fc4:	ldr	r0, [r0, #4]
     fc8:	mov	r5, r2
     fcc:	mov	r4, r3
     fd0:	add	r0, r1, r0, lsl #4
     fd4:	ldr	r0, [r0, #-8]
     fd8:	ldr	r2, [r0, #8]
     fdc:	cmp	r2, #2
     fe0:	beq	1024 <coda_mem_cursor_read_bytes+0x74>
     fe4:	cmp	r2, #3
     fe8:	bne	1054 <coda_mem_cursor_read_bytes+0xa4>
     fec:	ldr	r8, [fp, #12]
     ff0:	ldr	r9, [fp, #8]
     ff4:	add	r7, sp, #8
     ff8:	mov	r2, #520	; 0x208
     ffc:	mov	r0, r7
    1000:	bl	0 <memcpy>
    1004:	mov	r0, r7
    1008:	bl	0 <coda_cursor_use_base_type_of_special_type>
    100c:	mov	r1, r0
    1010:	mvn	r0, #0
    1014:	cmp	r1, #0
    1018:	beq	1070 <coda_mem_cursor_read_bytes+0xc0>
    101c:	sub	sp, fp, #24
    1020:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1024:	ldr	r0, [r0, #4]
    1028:	ldr	r0, [r0]
    102c:	orr	r0, r0, #2
    1030:	cmp	r0, #2
    1034:	bne	1094 <coda_mem_cursor_read_bytes+0xe4>
    1038:	mov	r0, r1
    103c:	mov	r1, r6
    1040:	mov	r2, r5
    1044:	mov	r3, r4
    1048:	sub	sp, fp, #24
    104c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    1050:	b	0 <coda_ascii_cursor_read_bytes>
    1054:	movw	r1, #0
    1058:	mvn	r0, #104	; 0x68
    105c:	movt	r1, #0
    1060:	bl	0 <coda_set_error>
    1064:	mvn	r0, #0
    1068:	sub	sp, fp, #24
    106c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1070:	add	r0, sp, #8
    1074:	mov	r1, r6
    1078:	mov	r2, r5
    107c:	mov	r3, r4
    1080:	str	r9, [sp]
    1084:	str	r8, [sp, #4]
    1088:	bl	0 <coda_cursor_read_bytes>
    108c:	sub	sp, fp, #24
    1090:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1094:	mov	r0, r1
    1098:	mov	r1, r6
    109c:	mov	r2, r5
    10a0:	mov	r3, r4
    10a4:	sub	sp, fp, #24
    10a8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    10ac:	b	0 <coda_bin_cursor_read_bytes>

000010b0 <coda_mem_cursor_read_int8_array>:
    10b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b4:	add	fp, sp, #28
    10b8:	sub	sp, sp, #604	; 0x25c
    10bc:	mov	r6, r0
    10c0:	ldr	r0, [r0, #4]
    10c4:	mov	sl, r1
    10c8:	mov	r9, r2
    10cc:	add	r0, r6, r0, lsl #4
    10d0:	ldr	r0, [r0, #-8]
    10d4:	ldr	r1, [r0, #8]
    10d8:	cmp	r1, #2
    10dc:	beq	1190 <coda_mem_cursor_read_int8_array+0xe0>
    10e0:	cmp	r1, #1
    10e4:	bne	1694 <coda_mem_cursor_read_int8_array+0x5e4>
    10e8:	add	r7, sp, #44	; 0x2c
    10ec:	add	r1, sp, #76	; 0x4c
    10f0:	mov	r0, r6
    10f4:	mov	r2, r7
    10f8:	bl	0 <coda_cursor_get_array_dim>
    10fc:	cmp	r0, #0
    1100:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1104:	add	r0, sp, #80	; 0x50
    1108:	mov	r1, r6
    110c:	mov	r2, #520	; 0x208
    1110:	bl	0 <memcpy>
    1114:	ldr	r0, [sp, #76]	; 0x4c
    1118:	cmp	r9, #1
    111c:	bne	13d8 <coda_mem_cursor_read_int8_array+0x328>
    1120:	cmp	r0, #1
    1124:	ble	13d8 <coda_mem_cursor_read_int8_array+0x328>
    1128:	add	r8, sp, #8
    112c:	mov	r1, #1
    1130:	mov	r3, r0
    1134:	add	r2, r8, #4
    1138:	str	r1, [sp, #8]
    113c:	ldr	r6, [r7], #4
    1140:	subs	r3, r3, #1
    1144:	mul	r1, r6, r1
    1148:	str	r1, [r2], #4
    114c:	bne	113c <coda_mem_cursor_read_int8_array+0x8c>
    1150:	ldr	r7, [r8, r0, lsl #2]
    1154:	cmp	r7, #1
    1158:	blt	1640 <coda_mem_cursor_read_int8_array+0x590>
    115c:	add	r0, r8, r0, lsl #2
    1160:	mov	r1, #0
    1164:	mov	r5, #0
    1168:	ldr	r6, [r0, #-4]
    116c:	add	r0, sp, #80	; 0x50
    1170:	bl	0 <coda_cursor_goto_array_element_by_index>
    1174:	cmp	r0, #0
    1178:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    117c:	sub	r0, r8, #4
    1180:	add	r9, sp, #80	; 0x50
    1184:	mov	r4, #0
    1188:	str	r0, [sp, #4]
    118c:	b	12d8 <coda_mem_cursor_read_int8_array+0x228>
    1190:	ldr	r0, [r0, #4]
    1194:	ldr	r0, [r0, #40]	; 0x28
    1198:	ldr	r0, [r0]
    119c:	cmp	r0, #0
    11a0:	beq	12f0 <coda_mem_cursor_read_int8_array+0x240>
    11a4:	cmp	r0, #1
    11a8:	bne	16b4 <coda_mem_cursor_read_int8_array+0x604>
    11ac:	add	r7, sp, #44	; 0x2c
    11b0:	add	r1, sp, #76	; 0x4c
    11b4:	mov	r0, r6
    11b8:	mov	r2, r7
    11bc:	bl	0 <coda_cursor_get_array_dim>
    11c0:	cmp	r0, #0
    11c4:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    11c8:	add	r0, sp, #80	; 0x50
    11cc:	mov	r1, r6
    11d0:	mov	r2, #520	; 0x208
    11d4:	bl	0 <memcpy>
    11d8:	ldr	r0, [sp, #76]	; 0x4c
    11dc:	cmp	r9, #1
    11e0:	bne	13f4 <coda_mem_cursor_read_int8_array+0x344>
    11e4:	cmp	r0, #1
    11e8:	ble	13f4 <coda_mem_cursor_read_int8_array+0x344>
    11ec:	add	r8, sp, #8
    11f0:	mov	r1, #1
    11f4:	mov	r3, r0
    11f8:	add	r2, r8, #4
    11fc:	str	r1, [sp, #8]
    1200:	ldr	r6, [r7], #4
    1204:	subs	r3, r3, #1
    1208:	mul	r1, r6, r1
    120c:	str	r1, [r2], #4
    1210:	bne	1200 <coda_mem_cursor_read_int8_array+0x150>
    1214:	ldr	r7, [r8, r0, lsl #2]
    1218:	cmp	r7, #1
    121c:	blt	1640 <coda_mem_cursor_read_int8_array+0x590>
    1220:	add	r0, r8, r0, lsl #2
    1224:	mov	r1, #0
    1228:	mov	r5, #0
    122c:	ldr	r6, [r0, #-4]
    1230:	add	r0, sp, #80	; 0x50
    1234:	bl	0 <coda_cursor_goto_array_element_by_index>
    1238:	cmp	r0, #0
    123c:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1240:	sub	r0, r8, #4
    1244:	add	r9, sp, #80	; 0x50
    1248:	mov	r4, #0
    124c:	str	r0, [sp, #4]
    1250:	b	13c0 <coda_mem_cursor_read_int8_array+0x310>
    1254:	add	r5, r5, #1
    1258:	cmp	r5, r7
    125c:	bge	1270 <coda_mem_cursor_read_int8_array+0x1c0>
    1260:	mov	r0, r9
    1264:	bl	0 <coda_cursor_goto_next_array_element>
    1268:	cmp	r0, #0
    126c:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1270:	add	r4, r4, r6
    1274:	cmp	r4, r7
    1278:	blt	12d8 <coda_mem_cursor_read_int8_array+0x228>
    127c:	cmp	r5, r7
    1280:	beq	1640 <coda_mem_cursor_read_int8_array+0x590>
    1284:	ldr	r1, [sp, #76]	; 0x4c
    1288:	add	r2, r8, r1, lsl #2
    128c:	ldr	r0, [r8, r1, lsl #2]
    1290:	cmp	r1, #3
    1294:	ldr	r2, [r2, #-8]
    1298:	add	r2, r2, r4
    129c:	sub	r4, r2, r0
    12a0:	blt	12d8 <coda_mem_cursor_read_int8_array+0x228>
    12a4:	ldr	r0, [sp, #4]
    12a8:	add	r0, r0, r1, lsl #2
    12ac:	sub	r1, r1, #2
    12b0:	ldr	r2, [r0]
    12b4:	cmp	r4, r2
    12b8:	blt	12d8 <coda_mem_cursor_read_int8_array+0x228>
    12bc:	ldr	r3, [r0, #-8]
    12c0:	sub	r2, r4, r2
    12c4:	sub	r1, r1, #1
    12c8:	sub	r0, r0, #4
    12cc:	cmp	r1, #0
    12d0:	add	r4, r3, r2
    12d4:	bgt	12b0 <coda_mem_cursor_read_int8_array+0x200>
    12d8:	add	r1, sl, r4
    12dc:	mov	r0, r9
    12e0:	bl	0 <coda_cursor_read_int8>
    12e4:	cmp	r0, #0
    12e8:	beq	1254 <coda_mem_cursor_read_int8_array+0x1a4>
    12ec:	b	1634 <coda_mem_cursor_read_int8_array+0x584>
    12f0:	add	r7, sp, #44	; 0x2c
    12f4:	add	r1, sp, #76	; 0x4c
    12f8:	mov	r0, r6
    12fc:	mov	r2, r7
    1300:	bl	0 <coda_cursor_get_array_dim>
    1304:	cmp	r0, #0
    1308:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    130c:	add	r0, sp, #80	; 0x50
    1310:	mov	r1, r6
    1314:	mov	r2, #520	; 0x208
    1318:	bl	0 <memcpy>
    131c:	ldr	r0, [sp, #76]	; 0x4c
    1320:	cmp	r0, #1
    1324:	blt	1418 <coda_mem_cursor_read_int8_array+0x368>
    1328:	cmp	r0, #4
    132c:	bcs	14dc <coda_mem_cursor_read_int8_array+0x42c>
    1330:	mov	r4, #1
    1334:	mov	r1, #0
    1338:	b	1510 <coda_mem_cursor_read_int8_array+0x460>
    133c:	add	r5, r5, #1
    1340:	cmp	r5, r7
    1344:	bge	1358 <coda_mem_cursor_read_int8_array+0x2a8>
    1348:	mov	r0, r9
    134c:	bl	0 <coda_cursor_goto_next_array_element>
    1350:	cmp	r0, #0
    1354:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1358:	add	r4, r4, r6
    135c:	cmp	r4, r7
    1360:	blt	13c0 <coda_mem_cursor_read_int8_array+0x310>
    1364:	cmp	r5, r7
    1368:	beq	1640 <coda_mem_cursor_read_int8_array+0x590>
    136c:	ldr	r1, [sp, #76]	; 0x4c
    1370:	add	r2, r8, r1, lsl #2
    1374:	ldr	r0, [r8, r1, lsl #2]
    1378:	cmp	r1, #3
    137c:	ldr	r2, [r2, #-8]
    1380:	add	r2, r2, r4
    1384:	sub	r4, r2, r0
    1388:	blt	13c0 <coda_mem_cursor_read_int8_array+0x310>
    138c:	ldr	r0, [sp, #4]
    1390:	add	r0, r0, r1, lsl #2
    1394:	sub	r1, r1, #2
    1398:	ldr	r2, [r0]
    139c:	cmp	r4, r2
    13a0:	blt	13c0 <coda_mem_cursor_read_int8_array+0x310>
    13a4:	ldr	r3, [r0, #-8]
    13a8:	sub	r2, r4, r2
    13ac:	sub	r1, r1, #1
    13b0:	sub	r0, r0, #4
    13b4:	cmp	r1, #0
    13b8:	add	r4, r3, r2
    13bc:	bgt	1398 <coda_mem_cursor_read_int8_array+0x2e8>
    13c0:	add	r1, sl, r4
    13c4:	mov	r0, r9
    13c8:	bl	0 <coda_bin_cursor_read_int8>
    13cc:	cmp	r0, #0
    13d0:	beq	133c <coda_mem_cursor_read_int8_array+0x28c>
    13d4:	b	1634 <coda_mem_cursor_read_int8_array+0x584>
    13d8:	cmp	r0, #1
    13dc:	blt	1410 <coda_mem_cursor_read_int8_array+0x360>
    13e0:	cmp	r0, #4
    13e4:	bcs	1420 <coda_mem_cursor_read_int8_array+0x370>
    13e8:	mov	r4, #1
    13ec:	mov	r1, #0
    13f0:	b	1458 <coda_mem_cursor_read_int8_array+0x3a8>
    13f4:	cmp	r0, #1
    13f8:	blt	15b8 <coda_mem_cursor_read_int8_array+0x508>
    13fc:	cmp	r0, #4
    1400:	bcs	15c0 <coda_mem_cursor_read_int8_array+0x510>
    1404:	mov	r4, #1
    1408:	mov	r1, #0
    140c:	b	15f8 <coda_mem_cursor_read_int8_array+0x548>
    1410:	mov	r4, #1
    1414:	b	147c <coda_mem_cursor_read_int8_array+0x3cc>
    1418:	mov	r4, #1
    141c:	b	1534 <coda_mem_cursor_read_int8_array+0x484>
    1420:	bic	r1, r0, #3
    1424:	vmov.i32	q8, #1	; 0x00000001
    1428:	add	r2, sp, #44	; 0x2c
    142c:	mov	r3, r1
    1430:	vld1.32	{d18-d19}, [r2]!
    1434:	subs	r3, r3, #4
    1438:	vmul.i32	q8, q9, q8
    143c:	bne	1430 <coda_mem_cursor_read_int8_array+0x380>
    1440:	vext.8	q9, q8, q8, #8
    1444:	cmp	r0, r1
    1448:	vmul.i32	q0, q8, q9
    144c:	vmul.i32	q8, q0, d0[1]
    1450:	vmov.32	r4, d16[0]
    1454:	beq	1474 <coda_mem_cursor_read_int8_array+0x3c4>
    1458:	add	r2, sp, #44	; 0x2c
    145c:	sub	r0, r0, r1
    1460:	add	r2, r2, r1, lsl #2
    1464:	ldr	r1, [r2], #4
    1468:	subs	r0, r0, #1
    146c:	mul	r4, r1, r4
    1470:	bne	1464 <coda_mem_cursor_read_int8_array+0x3b4>
    1474:	cmp	r4, #1
    1478:	blt	1640 <coda_mem_cursor_read_int8_array+0x590>
    147c:	add	r0, sp, #80	; 0x50
    1480:	mov	r1, #0
    1484:	mov	r6, #0
    1488:	bl	0 <coda_cursor_goto_array_element_by_index>
    148c:	cmp	r0, #0
    1490:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1494:	sub	r7, r4, #1
    1498:	add	r5, sp, #80	; 0x50
    149c:	add	r1, sl, r6
    14a0:	mov	r0, r5
    14a4:	bl	0 <coda_cursor_read_int8>
    14a8:	cmp	r0, #0
    14ac:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    14b0:	cmp	r6, r7
    14b4:	bge	14c8 <coda_mem_cursor_read_int8_array+0x418>
    14b8:	mov	r0, r5
    14bc:	bl	0 <coda_cursor_goto_next_array_element>
    14c0:	cmp	r0, #0
    14c4:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    14c8:	add	r6, r6, #1
    14cc:	mov	r0, #0
    14d0:	cmp	r6, r4
    14d4:	blt	149c <coda_mem_cursor_read_int8_array+0x3ec>
    14d8:	b	1638 <coda_mem_cursor_read_int8_array+0x588>
    14dc:	bic	r1, r0, #3
    14e0:	vmov.i32	q8, #1	; 0x00000001
    14e4:	mov	r2, r1
    14e8:	vld1.32	{d18-d19}, [r7]!
    14ec:	subs	r2, r2, #4
    14f0:	vmul.i32	q8, q9, q8
    14f4:	bne	14e8 <coda_mem_cursor_read_int8_array+0x438>
    14f8:	vext.8	q9, q8, q8, #8
    14fc:	cmp	r0, r1
    1500:	vmul.i32	q0, q8, q9
    1504:	vmul.i32	q8, q0, d0[1]
    1508:	vmov.32	r4, d16[0]
    150c:	beq	152c <coda_mem_cursor_read_int8_array+0x47c>
    1510:	add	r2, sp, #44	; 0x2c
    1514:	sub	r0, r0, r1
    1518:	add	r2, r2, r1, lsl #2
    151c:	ldr	r1, [r2], #4
    1520:	subs	r0, r0, #1
    1524:	mul	r4, r1, r4
    1528:	bne	151c <coda_mem_cursor_read_int8_array+0x46c>
    152c:	cmp	r4, #1
    1530:	blt	158c <coda_mem_cursor_read_int8_array+0x4dc>
    1534:	add	r0, sp, #80	; 0x50
    1538:	mov	r1, #0
    153c:	mov	r7, #0
    1540:	bl	0 <coda_cursor_goto_array_element_by_index>
    1544:	cmp	r0, #0
    1548:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    154c:	sub	r5, r4, #1
    1550:	add	r8, sp, #80	; 0x50
    1554:	add	r1, sl, r7
    1558:	mov	r0, r8
    155c:	bl	0 <coda_ascii_cursor_read_int8>
    1560:	cmp	r0, #0
    1564:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1568:	cmp	r7, r5
    156c:	bge	1580 <coda_mem_cursor_read_int8_array+0x4d0>
    1570:	mov	r0, r8
    1574:	bl	0 <coda_cursor_goto_next_array_element>
    1578:	cmp	r0, #0
    157c:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1580:	add	r7, r7, #1
    1584:	cmp	r7, r4
    1588:	blt	1554 <coda_mem_cursor_read_int8_array+0x4a4>
    158c:	cmp	r9, #0
    1590:	beq	1640 <coda_mem_cursor_read_int8_array+0x590>
    1594:	mov	r0, r6
    1598:	mov	r1, sl
    159c:	mov	r2, #1
    15a0:	bl	193c <transpose_array>
    15a4:	mov	r1, r0
    15a8:	mvn	r0, #0
    15ac:	cmp	r1, #0
    15b0:	bne	1638 <coda_mem_cursor_read_int8_array+0x588>
    15b4:	b	1640 <coda_mem_cursor_read_int8_array+0x590>
    15b8:	mov	r4, #1
    15bc:	b	161c <coda_mem_cursor_read_int8_array+0x56c>
    15c0:	bic	r1, r0, #3
    15c4:	vmov.i32	q8, #1	; 0x00000001
    15c8:	add	r2, sp, #44	; 0x2c
    15cc:	mov	r3, r1
    15d0:	vld1.32	{d18-d19}, [r2]!
    15d4:	subs	r3, r3, #4
    15d8:	vmul.i32	q8, q9, q8
    15dc:	bne	15d0 <coda_mem_cursor_read_int8_array+0x520>
    15e0:	vext.8	q9, q8, q8, #8
    15e4:	cmp	r0, r1
    15e8:	vmul.i32	q0, q8, q9
    15ec:	vmul.i32	q8, q0, d0[1]
    15f0:	vmov.32	r4, d16[0]
    15f4:	beq	1614 <coda_mem_cursor_read_int8_array+0x564>
    15f8:	add	r2, sp, #44	; 0x2c
    15fc:	sub	r0, r0, r1
    1600:	add	r2, r2, r1, lsl #2
    1604:	ldr	r1, [r2], #4
    1608:	subs	r0, r0, #1
    160c:	mul	r4, r1, r4
    1610:	bne	1604 <coda_mem_cursor_read_int8_array+0x554>
    1614:	cmp	r4, #1
    1618:	blt	1640 <coda_mem_cursor_read_int8_array+0x590>
    161c:	add	r0, sp, #80	; 0x50
    1620:	mov	r1, #0
    1624:	mov	r6, #0
    1628:	bl	0 <coda_cursor_goto_array_element_by_index>
    162c:	cmp	r0, #0
    1630:	beq	164c <coda_mem_cursor_read_int8_array+0x59c>
    1634:	mvn	r0, #0
    1638:	sub	sp, fp, #28
    163c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1640:	mov	r0, #0
    1644:	sub	sp, fp, #28
    1648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    164c:	sub	r7, r4, #1
    1650:	add	r5, sp, #80	; 0x50
    1654:	add	r1, sl, r6
    1658:	mov	r0, r5
    165c:	bl	0 <coda_bin_cursor_read_int8>
    1660:	cmp	r0, #0
    1664:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1668:	cmp	r6, r7
    166c:	bge	1680 <coda_mem_cursor_read_int8_array+0x5d0>
    1670:	mov	r0, r5
    1674:	bl	0 <coda_cursor_goto_next_array_element>
    1678:	cmp	r0, #0
    167c:	bne	1634 <coda_mem_cursor_read_int8_array+0x584>
    1680:	add	r6, r6, #1
    1684:	mov	r0, #0
    1688:	cmp	r6, r4
    168c:	blt	1654 <coda_mem_cursor_read_int8_array+0x5a4>
    1690:	b	1638 <coda_mem_cursor_read_int8_array+0x588>
    1694:	movw	r0, #0
    1698:	movw	r1, #0
    169c:	movw	r3, #0
    16a0:	movw	r2, #651	; 0x28b
    16a4:	movt	r0, #0
    16a8:	movt	r1, #0
    16ac:	movt	r3, #0
    16b0:	bl	0 <__assert_fail>
    16b4:	movw	r0, #0
    16b8:	movw	r1, #0
    16bc:	movw	r3, #0
    16c0:	movw	r2, #657	; 0x291
    16c4:	movt	r0, #0
    16c8:	movt	r1, #0
    16cc:	movt	r3, #0
    16d0:	bl	0 <__assert_fail>

000016d4 <read_array>:
    16d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16d8:	add	fp, sp, #28
    16dc:	sub	sp, sp, #604	; 0x25c
    16e0:	add	r7, sp, #48	; 0x30
    16e4:	mov	r5, r2
    16e8:	mov	r8, r1
    16ec:	add	r1, sp, #44	; 0x2c
    16f0:	mov	sl, r3
    16f4:	mov	r4, r0
    16f8:	mov	r2, r7
    16fc:	bl	0 <coda_cursor_get_array_dim>
    1700:	cmp	r0, #0
    1704:	beq	1714 <read_array+0x40>
    1708:	mvn	r0, #0
    170c:	sub	sp, fp, #28
    1710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1714:	ldr	r6, [fp, #8]
    1718:	add	r0, sp, #80	; 0x50
    171c:	mov	r1, r4
    1720:	mov	r2, #520	; 0x208
    1724:	bl	0 <memcpy>
    1728:	ldr	r0, [sp, #44]	; 0x2c
    172c:	cmp	r6, #1
    1730:	bne	184c <read_array+0x178>
    1734:	cmp	r0, #1
    1738:	ble	184c <read_array+0x178>
    173c:	add	r2, sp, #8
    1740:	mov	r1, #1
    1744:	mov	r3, r0
    1748:	str	sl, [sp, #4]
    174c:	mov	r4, r2
    1750:	add	r2, r2, #4
    1754:	str	r1, [sp, #8]
    1758:	ldr	r6, [r7], #4
    175c:	subs	r3, r3, #1
    1760:	mul	r1, r6, r1
    1764:	str	r1, [r2], #4
    1768:	bne	1758 <read_array+0x84>
    176c:	mov	r6, r4
    1770:	ldr	r4, [r4, r0, lsl #2]
    1774:	cmp	r4, #1
    1778:	blt	1930 <read_array+0x25c>
    177c:	add	r0, r6, r0, lsl #2
    1780:	mov	r1, #0
    1784:	mov	r9, #0
    1788:	ldr	r7, [r0, #-4]
    178c:	add	r0, sp, #80	; 0x50
    1790:	bl	0 <coda_cursor_goto_array_element_by_index>
    1794:	cmp	r0, #0
    1798:	bne	1708 <read_array+0x34>
    179c:	sub	r0, r6, #4
    17a0:	mov	sl, #0
    17a4:	str	r0, [sp]
    17a8:	b	1830 <read_array+0x15c>
    17ac:	add	r9, r9, #1
    17b0:	cmp	r9, r4
    17b4:	bge	17c8 <read_array+0xf4>
    17b8:	add	r0, sp, #80	; 0x50
    17bc:	bl	0 <coda_cursor_goto_next_array_element>
    17c0:	cmp	r0, #0
    17c4:	bne	1708 <read_array+0x34>
    17c8:	add	sl, sl, r7
    17cc:	cmp	sl, r4
    17d0:	blt	1830 <read_array+0x15c>
    17d4:	cmp	r9, r4
    17d8:	beq	1930 <read_array+0x25c>
    17dc:	ldr	r1, [sp, #44]	; 0x2c
    17e0:	add	r2, r6, r1, lsl #2
    17e4:	ldr	r0, [r6, r1, lsl #2]
    17e8:	cmp	r1, #3
    17ec:	ldr	r2, [r2, #-8]
    17f0:	add	r2, r2, sl
    17f4:	sub	sl, r2, r0
    17f8:	blt	1830 <read_array+0x15c>
    17fc:	ldr	r0, [sp]
    1800:	add	r0, r0, r1, lsl #2
    1804:	sub	r1, r1, #2
    1808:	ldr	r2, [r0]
    180c:	cmp	sl, r2
    1810:	blt	1830 <read_array+0x15c>
    1814:	ldr	r3, [r0, #-8]
    1818:	sub	r2, sl, r2
    181c:	sub	r1, r1, #1
    1820:	sub	r0, r0, #4
    1824:	cmp	r1, #0
    1828:	add	sl, r2, r3
    182c:	bgt	1808 <read_array+0x134>
    1830:	ldr	r0, [sp, #4]
    1834:	mla	r1, sl, r0, r5
    1838:	add	r0, sp, #80	; 0x50
    183c:	blx	r8
    1840:	cmp	r0, #0
    1844:	beq	17ac <read_array+0xd8>
    1848:	b	1708 <read_array+0x34>
    184c:	cmp	r0, #1
    1850:	blt	1868 <read_array+0x194>
    1854:	cmp	r0, #4
    1858:	bcs	1870 <read_array+0x19c>
    185c:	mov	r4, #1
    1860:	mov	r1, #0
    1864:	b	18a8 <read_array+0x1d4>
    1868:	mov	r4, #1
    186c:	b	18cc <read_array+0x1f8>
    1870:	bic	r1, r0, #3
    1874:	vmov.i32	q8, #1	; 0x00000001
    1878:	add	r2, sp, #48	; 0x30
    187c:	mov	r3, r1
    1880:	vld1.32	{d18-d19}, [r2]!
    1884:	subs	r3, r3, #4
    1888:	vmul.i32	q8, q9, q8
    188c:	bne	1880 <read_array+0x1ac>
    1890:	vext.8	q9, q8, q8, #8
    1894:	cmp	r0, r1
    1898:	vmul.i32	q0, q8, q9
    189c:	vmul.i32	q8, q0, d0[1]
    18a0:	vmov.32	r4, d16[0]
    18a4:	beq	18c4 <read_array+0x1f0>
    18a8:	add	r2, sp, #48	; 0x30
    18ac:	sub	r0, r0, r1
    18b0:	add	r1, r2, r1, lsl #2
    18b4:	ldr	r2, [r1], #4
    18b8:	subs	r0, r0, #1
    18bc:	mul	r4, r2, r4
    18c0:	bne	18b4 <read_array+0x1e0>
    18c4:	cmp	r4, #1
    18c8:	blt	1930 <read_array+0x25c>
    18cc:	add	r0, sp, #80	; 0x50
    18d0:	mov	r1, #0
    18d4:	mov	r6, #0
    18d8:	bl	0 <coda_cursor_goto_array_element_by_index>
    18dc:	cmp	r0, #0
    18e0:	bne	1708 <read_array+0x34>
    18e4:	sub	r7, r4, #1
    18e8:	add	r9, sp, #80	; 0x50
    18ec:	mov	r0, r9
    18f0:	mov	r1, r5
    18f4:	blx	r8
    18f8:	cmp	r0, #0
    18fc:	bne	1708 <read_array+0x34>
    1900:	cmp	r6, r7
    1904:	bge	1918 <read_array+0x244>
    1908:	mov	r0, r9
    190c:	bl	0 <coda_cursor_goto_next_array_element>
    1910:	cmp	r0, #0
    1914:	bne	1708 <read_array+0x34>
    1918:	add	r6, r6, #1
    191c:	add	r5, r5, sl
    1920:	mov	r0, #0
    1924:	cmp	r6, r4
    1928:	blt	18ec <read_array+0x218>
    192c:	b	170c <read_array+0x38>
    1930:	mov	r0, #0
    1934:	sub	sp, fp, #28
    1938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000193c <transpose_array>:
    193c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1940:	add	fp, sp, #28
    1944:	sub	sp, sp, #180	; 0xb4
    1948:	sub	r6, fp, #60	; 0x3c
    194c:	mov	r8, r2
    1950:	str	r1, [sp, #32]
    1954:	sub	r1, fp, #64	; 0x40
    1958:	mov	r2, r6
    195c:	bl	0 <coda_cursor_get_array_dim>
    1960:	mvn	r7, #0
    1964:	cmp	r0, #0
    1968:	bne	1e0c <transpose_array+0x4d0>
    196c:	ldr	r5, [fp, #-64]	; 0xffffffc0
    1970:	mov	r7, #0
    1974:	cmp	r5, #2
    1978:	blt	1e0c <transpose_array+0x4d0>
    197c:	add	r9, sp, #72	; 0x48
    1980:	lsl	r2, r5, #2
    1984:	mov	r1, #0
    1988:	mov	r7, #0
    198c:	mov	r0, r9
    1990:	bl	0 <memset>
    1994:	mov	r4, #1
    1998:	cmp	r5, #4
    199c:	bcc	19f4 <transpose_array+0xb8>
    19a0:	add	r0, r6, r5, lsl #2
    19a4:	bic	r7, r5, #3
    19a8:	vmov.i32	q8, #1	; 0x00000001
    19ac:	add	r1, sp, #36	; 0x24
    19b0:	mvn	r2, #15
    19b4:	sub	r0, r0, #16
    19b8:	mov	r3, r7
    19bc:	vld1.32	{d18-d19}, [r0], r2
    19c0:	vld1.32	{d20-d21}, [r6]!
    19c4:	subs	r3, r3, #4
    19c8:	vrev64.32	q9, q9
    19cc:	vmul.i32	q8, q10, q8
    19d0:	vext.8	q9, q9, q9, #8
    19d4:	vst1.32	{d18-d19}, [r1]!
    19d8:	bne	19bc <transpose_array+0x80>
    19dc:	vext.8	q9, q8, q8, #8
    19e0:	cmp	r5, r7
    19e4:	vmul.i32	q0, q8, q9
    19e8:	vmul.i32	q8, q0, d0[1]
    19ec:	vmov.32	r4, d16[0]
    19f0:	beq	1a28 <transpose_array+0xec>
    19f4:	sub	r0, r5, #1
    19f8:	lsl	r1, r7, #2
    19fc:	sub	r2, fp, #60	; 0x3c
    1a00:	add	r3, sp, #36	; 0x24
    1a04:	sub	r0, r0, r7
    1a08:	ldr	r7, [r2, r0, lsl #2]
    1a0c:	sub	r0, r0, #1
    1a10:	cmn	r0, #1
    1a14:	str	r7, [r3, r1]
    1a18:	ldr	r7, [r2, r1]
    1a1c:	add	r1, r1, #4
    1a20:	mul	r4, r7, r4
    1a24:	bne	1a08 <transpose_array+0xcc>
    1a28:	mov	r7, #0
    1a2c:	cmp	r4, #2
    1a30:	blt	1e0c <transpose_array+0x4d0>
    1a34:	add	r7, sp, #36	; 0x24
    1a38:	mov	r0, #1
    1a3c:	sub	sl, fp, #100	; 0x64
    1a40:	cmp	r5, #1
    1a44:	str	r0, [r7, r5, lsl #2]
    1a48:	str	r0, [sl, r5, lsl #2]
    1a4c:	blt	1a84 <transpose_array+0x148>
    1a50:	add	r1, sl, r5, lsl #2
    1a54:	str	r0, [r1, #-4]
    1a58:	beq	1a84 <transpose_array+0x148>
    1a5c:	sub	r0, r7, #4
    1a60:	sub	r1, sl, #8
    1a64:	mov	r2, #1
    1a68:	mov	r3, r5
    1a6c:	ldr	r6, [r0, r3, lsl #2]
    1a70:	mul	r2, r6, r2
    1a74:	str	r2, [r1, r3, lsl #2]
    1a78:	sub	r3, r3, #1
    1a7c:	cmp	r3, #1
    1a80:	bgt	1a6c <transpose_array+0x130>
    1a84:	mov	r0, #0
    1a88:	str	r0, [r9, r5, lsl #2]
    1a8c:	str	r0, [r7, r5, lsl #2]
    1a90:	mul	r5, r4, r8
    1a94:	mov	r0, r5
    1a98:	bl	0 <malloc>
    1a9c:	cmp	r0, #0
    1aa0:	str	r0, [sp, #28]
    1aa4:	beq	1b98 <transpose_array+0x25c>
    1aa8:	sub	r0, r8, #1
    1aac:	str	r5, [sp, #8]
    1ab0:	cmp	r0, #7
    1ab4:	bhi	1e18 <transpose_array+0x4dc>
    1ab8:	add	r1, pc, #0
    1abc:	ldr	pc, [r1, r0, lsl #2]
    1ac0:	.word	0x00001ae0
    1ac4:	.word	0x00001c80
    1ac8:	.word	0x00001e18
    1acc:	.word	0x00001d3c
    1ad0:	.word	0x00001e18
    1ad4:	.word	0x00001e18
    1ad8:	.word	0x00001e18
    1adc:	.word	0x00001bc4
    1ae0:	cmp	r4, #1
    1ae4:	blt	1dec <transpose_array+0x4b0>
    1ae8:	add	r0, sl, #4
    1aec:	ldr	ip, [sp, #36]	; 0x24
    1af0:	ldr	lr, [fp, #-100]	; 0xffffff9c
    1af4:	mov	r3, #0
    1af8:	mov	r1, #0
    1afc:	str	r0, [sp, #20]
    1b00:	add	r0, r7, #4
    1b04:	str	r0, [sp, #16]
    1b08:	orr	r0, r9, #4
    1b0c:	str	r0, [sp, #12]
    1b10:	mov	r0, #0
    1b14:	str	ip, [sp, #24]
    1b18:	ldr	r2, [sp, #32]
    1b1c:	ldr	r7, [sp, #28]
    1b20:	ldrb	r2, [r2, r0]
    1b24:	strb	r2, [r7, r1]
    1b28:	ldr	r2, [sp, #72]	; 0x48
    1b2c:	add	r1, lr, r1
    1b30:	add	r2, r2, #1
    1b34:	cmp	r2, ip
    1b38:	str	r2, [sp, #72]	; 0x48
    1b3c:	bne	1b84 <transpose_array+0x248>
    1b40:	ldr	r2, [sp, #20]
    1b44:	ldr	r6, [sp, #16]
    1b48:	ldr	r8, [sp, #12]
    1b4c:	mov	r5, lr
    1b50:	ldr	r9, [r2], #4
    1b54:	str	r3, [r8, #-4]
    1b58:	ldr	sl, [r8]
    1b5c:	add	r1, r9, r1
    1b60:	mls	r1, r5, ip, r1
    1b64:	ldr	r5, [r6], #4
    1b68:	add	r7, sl, #1
    1b6c:	str	r7, [r8]
    1b70:	add	r8, r8, #4
    1b74:	mov	ip, r7
    1b78:	cmp	r7, r5
    1b7c:	mov	r5, r9
    1b80:	beq	1b50 <transpose_array+0x214>
    1b84:	ldr	ip, [sp, #24]
    1b88:	add	r0, r0, #1
    1b8c:	cmp	r0, r4
    1b90:	bne	1b18 <transpose_array+0x1dc>
    1b94:	b	1dec <transpose_array+0x4b0>
    1b98:	movw	r1, #0
    1b9c:	movw	r3, #0
    1ba0:	mov	r0, #93	; 0x5d
    1ba4:	mov	r2, r5
    1ba8:	mvn	r7, #0
    1bac:	str	r0, [sp]
    1bb0:	movt	r1, #0
    1bb4:	movt	r3, #0
    1bb8:	mvn	r0, #0
    1bbc:	bl	0 <coda_set_error>
    1bc0:	b	1e0c <transpose_array+0x4d0>
    1bc4:	cmp	r4, #1
    1bc8:	blt	1dec <transpose_array+0x4b0>
    1bcc:	ldr	ip, [sp, #36]	; 0x24
    1bd0:	ldr	lr, [fp, #-100]	; 0xffffff9c
    1bd4:	add	r0, sl, #4
    1bd8:	mov	sl, #0
    1bdc:	mov	r1, #0
    1be0:	str	r0, [sp, #24]
    1be4:	add	r0, r7, #4
    1be8:	str	r0, [sp, #20]
    1bec:	orr	r0, r9, #4
    1bf0:	mov	r9, #0
    1bf4:	str	r0, [sp, #16]
    1bf8:	ldr	r2, [sp, #32]
    1bfc:	ldr	r6, [sp, #28]
    1c00:	ldr	r5, [r2, sl, lsl #3]!
    1c04:	ldr	r2, [r2, #4]
    1c08:	str	r5, [r6, r1, lsl #3]!
    1c0c:	add	r1, lr, r1
    1c10:	str	r2, [r6, #4]
    1c14:	ldr	r2, [sp, #72]	; 0x48
    1c18:	add	r2, r2, #1
    1c1c:	cmp	r2, ip
    1c20:	str	r2, [sp, #72]	; 0x48
    1c24:	bne	1c70 <transpose_array+0x334>
    1c28:	ldr	r2, [sp, #24]
    1c2c:	ldr	r6, [sp, #20]
    1c30:	ldr	r8, [sp, #16]
    1c34:	mov	r5, lr
    1c38:	mov	r7, ip
    1c3c:	ldr	r3, [r2], #4
    1c40:	str	r9, [r8, #-4]
    1c44:	ldr	r0, [r8]
    1c48:	add	r1, r3, r1
    1c4c:	mls	r1, r5, r7, r1
    1c50:	ldr	r5, [r6], #4
    1c54:	add	r0, r0, #1
    1c58:	str	r0, [r8]
    1c5c:	add	r8, r8, #4
    1c60:	mov	r7, r0
    1c64:	cmp	r0, r5
    1c68:	mov	r5, r3
    1c6c:	beq	1c3c <transpose_array+0x300>
    1c70:	add	sl, sl, #1
    1c74:	cmp	sl, r4
    1c78:	bne	1bf8 <transpose_array+0x2bc>
    1c7c:	b	1dec <transpose_array+0x4b0>
    1c80:	cmp	r4, #1
    1c84:	blt	1dec <transpose_array+0x4b0>
    1c88:	ldr	ip, [sp, #36]	; 0x24
    1c8c:	ldr	lr, [fp, #-100]	; 0xffffff9c
    1c90:	add	r0, sl, #4
    1c94:	mov	sl, #0
    1c98:	mov	r1, #0
    1c9c:	str	r0, [sp, #24]
    1ca0:	add	r0, r7, #4
    1ca4:	str	r0, [sp, #20]
    1ca8:	orr	r0, r9, #4
    1cac:	mov	r9, #0
    1cb0:	str	r0, [sp, #16]
    1cb4:	ldr	r0, [sp, #28]
    1cb8:	add	r2, r0, r1, lsl #1
    1cbc:	ldr	r0, [sp, #32]
    1cc0:	add	r1, lr, r1
    1cc4:	add	r5, r0, sl, lsl #1
    1cc8:	ldrh	r5, [r5]
    1ccc:	strh	r5, [r2]
    1cd0:	ldr	r2, [sp, #72]	; 0x48
    1cd4:	add	r2, r2, #1
    1cd8:	cmp	r2, ip
    1cdc:	str	r2, [sp, #72]	; 0x48
    1ce0:	bne	1d2c <transpose_array+0x3f0>
    1ce4:	ldr	r2, [sp, #24]
    1ce8:	ldr	r6, [sp, #20]
    1cec:	ldr	r8, [sp, #16]
    1cf0:	mov	r5, lr
    1cf4:	mov	r7, ip
    1cf8:	ldr	r3, [r2], #4
    1cfc:	str	r9, [r8, #-4]
    1d00:	ldr	r0, [r8]
    1d04:	add	r1, r3, r1
    1d08:	mls	r1, r5, r7, r1
    1d0c:	ldr	r5, [r6], #4
    1d10:	add	r0, r0, #1
    1d14:	str	r0, [r8]
    1d18:	add	r8, r8, #4
    1d1c:	mov	r7, r0
    1d20:	cmp	r0, r5
    1d24:	mov	r5, r3
    1d28:	beq	1cf8 <transpose_array+0x3bc>
    1d2c:	add	sl, sl, #1
    1d30:	cmp	sl, r4
    1d34:	bne	1cb4 <transpose_array+0x378>
    1d38:	b	1dec <transpose_array+0x4b0>
    1d3c:	cmp	r4, #1
    1d40:	blt	1dec <transpose_array+0x4b0>
    1d44:	ldr	ip, [sp, #36]	; 0x24
    1d48:	ldr	lr, [fp, #-100]	; 0xffffff9c
    1d4c:	add	r0, sl, #4
    1d50:	mov	sl, #0
    1d54:	mov	r1, #0
    1d58:	str	r0, [sp, #24]
    1d5c:	add	r0, r7, #4
    1d60:	str	r0, [sp, #20]
    1d64:	orr	r0, r9, #4
    1d68:	mov	r9, #0
    1d6c:	str	r0, [sp, #16]
    1d70:	ldr	r0, [sp, #32]
    1d74:	ldr	r2, [r0, sl, lsl #2]
    1d78:	ldr	r0, [sp, #28]
    1d7c:	str	r2, [r0, r1, lsl #2]
    1d80:	ldr	r2, [sp, #72]	; 0x48
    1d84:	add	r1, lr, r1
    1d88:	add	r2, r2, #1
    1d8c:	cmp	r2, ip
    1d90:	str	r2, [sp, #72]	; 0x48
    1d94:	bne	1de0 <transpose_array+0x4a4>
    1d98:	ldr	r2, [sp, #24]
    1d9c:	ldr	r6, [sp, #20]
    1da0:	ldr	r8, [sp, #16]
    1da4:	mov	r5, lr
    1da8:	mov	r7, ip
    1dac:	ldr	r3, [r2], #4
    1db0:	str	r9, [r8, #-4]
    1db4:	ldr	r0, [r8]
    1db8:	add	r1, r3, r1
    1dbc:	mls	r1, r5, r7, r1
    1dc0:	ldr	r5, [r6], #4
    1dc4:	add	r0, r0, #1
    1dc8:	str	r0, [r8]
    1dcc:	add	r8, r8, #4
    1dd0:	mov	r7, r0
    1dd4:	cmp	r0, r5
    1dd8:	mov	r5, r3
    1ddc:	beq	1dac <transpose_array+0x470>
    1de0:	add	sl, sl, #1
    1de4:	cmp	sl, r4
    1de8:	bne	1d70 <transpose_array+0x434>
    1dec:	ldr	r4, [sp, #28]
    1df0:	ldr	r0, [sp, #32]
    1df4:	ldr	r2, [sp, #8]
    1df8:	mov	r1, r4
    1dfc:	bl	0 <memcpy>
    1e00:	mov	r0, r4
    1e04:	bl	0 <free>
    1e08:	mov	r7, #0
    1e0c:	mov	r0, r7
    1e10:	sub	sp, fp, #28
    1e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e18:	movw	r0, #0
    1e1c:	movw	r1, #0
    1e20:	movw	r3, #0
    1e24:	mov	r2, #172	; 0xac
    1e28:	movt	r0, #0
    1e2c:	movt	r1, #0
    1e30:	movt	r3, #0
    1e34:	bl	0 <__assert_fail>

00001e38 <coda_mem_cursor_read_uint8_array>:
    1e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e3c:	add	fp, sp, #28
    1e40:	sub	sp, sp, #604	; 0x25c
    1e44:	mov	r6, r0
    1e48:	ldr	r0, [r0, #4]
    1e4c:	mov	sl, r1
    1e50:	mov	r9, r2
    1e54:	add	r0, r6, r0, lsl #4
    1e58:	ldr	r0, [r0, #-8]
    1e5c:	ldr	r1, [r0, #8]
    1e60:	cmp	r1, #2
    1e64:	beq	1f18 <coda_mem_cursor_read_uint8_array+0xe0>
    1e68:	cmp	r1, #1
    1e6c:	bne	241c <coda_mem_cursor_read_uint8_array+0x5e4>
    1e70:	add	r7, sp, #44	; 0x2c
    1e74:	add	r1, sp, #76	; 0x4c
    1e78:	mov	r0, r6
    1e7c:	mov	r2, r7
    1e80:	bl	0 <coda_cursor_get_array_dim>
    1e84:	cmp	r0, #0
    1e88:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    1e8c:	add	r0, sp, #80	; 0x50
    1e90:	mov	r1, r6
    1e94:	mov	r2, #520	; 0x208
    1e98:	bl	0 <memcpy>
    1e9c:	ldr	r0, [sp, #76]	; 0x4c
    1ea0:	cmp	r9, #1
    1ea4:	bne	2160 <coda_mem_cursor_read_uint8_array+0x328>
    1ea8:	cmp	r0, #1
    1eac:	ble	2160 <coda_mem_cursor_read_uint8_array+0x328>
    1eb0:	add	r8, sp, #8
    1eb4:	mov	r1, #1
    1eb8:	mov	r3, r0
    1ebc:	add	r2, r8, #4
    1ec0:	str	r1, [sp, #8]
    1ec4:	ldr	r6, [r7], #4
    1ec8:	subs	r3, r3, #1
    1ecc:	mul	r1, r6, r1
    1ed0:	str	r1, [r2], #4
    1ed4:	bne	1ec4 <coda_mem_cursor_read_uint8_array+0x8c>
    1ed8:	ldr	r7, [r8, r0, lsl #2]
    1edc:	cmp	r7, #1
    1ee0:	blt	23c8 <coda_mem_cursor_read_uint8_array+0x590>
    1ee4:	add	r0, r8, r0, lsl #2
    1ee8:	mov	r1, #0
    1eec:	mov	r5, #0
    1ef0:	ldr	r6, [r0, #-4]
    1ef4:	add	r0, sp, #80	; 0x50
    1ef8:	bl	0 <coda_cursor_goto_array_element_by_index>
    1efc:	cmp	r0, #0
    1f00:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    1f04:	sub	r0, r8, #4
    1f08:	add	r9, sp, #80	; 0x50
    1f0c:	mov	r4, #0
    1f10:	str	r0, [sp, #4]
    1f14:	b	2060 <coda_mem_cursor_read_uint8_array+0x228>
    1f18:	ldr	r0, [r0, #4]
    1f1c:	ldr	r0, [r0, #40]	; 0x28
    1f20:	ldr	r0, [r0]
    1f24:	cmp	r0, #0
    1f28:	beq	2078 <coda_mem_cursor_read_uint8_array+0x240>
    1f2c:	cmp	r0, #1
    1f30:	bne	243c <coda_mem_cursor_read_uint8_array+0x604>
    1f34:	add	r7, sp, #44	; 0x2c
    1f38:	add	r1, sp, #76	; 0x4c
    1f3c:	mov	r0, r6
    1f40:	mov	r2, r7
    1f44:	bl	0 <coda_cursor_get_array_dim>
    1f48:	cmp	r0, #0
    1f4c:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    1f50:	add	r0, sp, #80	; 0x50
    1f54:	mov	r1, r6
    1f58:	mov	r2, #520	; 0x208
    1f5c:	bl	0 <memcpy>
    1f60:	ldr	r0, [sp, #76]	; 0x4c
    1f64:	cmp	r9, #1
    1f68:	bne	217c <coda_mem_cursor_read_uint8_array+0x344>
    1f6c:	cmp	r0, #1
    1f70:	ble	217c <coda_mem_cursor_read_uint8_array+0x344>
    1f74:	add	r8, sp, #8
    1f78:	mov	r1, #1
    1f7c:	mov	r3, r0
    1f80:	add	r2, r8, #4
    1f84:	str	r1, [sp, #8]
    1f88:	ldr	r6, [r7], #4
    1f8c:	subs	r3, r3, #1
    1f90:	mul	r1, r6, r1
    1f94:	str	r1, [r2], #4
    1f98:	bne	1f88 <coda_mem_cursor_read_uint8_array+0x150>
    1f9c:	ldr	r7, [r8, r0, lsl #2]
    1fa0:	cmp	r7, #1
    1fa4:	blt	23c8 <coda_mem_cursor_read_uint8_array+0x590>
    1fa8:	add	r0, r8, r0, lsl #2
    1fac:	mov	r1, #0
    1fb0:	mov	r5, #0
    1fb4:	ldr	r6, [r0, #-4]
    1fb8:	add	r0, sp, #80	; 0x50
    1fbc:	bl	0 <coda_cursor_goto_array_element_by_index>
    1fc0:	cmp	r0, #0
    1fc4:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    1fc8:	sub	r0, r8, #4
    1fcc:	add	r9, sp, #80	; 0x50
    1fd0:	mov	r4, #0
    1fd4:	str	r0, [sp, #4]
    1fd8:	b	2148 <coda_mem_cursor_read_uint8_array+0x310>
    1fdc:	add	r5, r5, #1
    1fe0:	cmp	r5, r7
    1fe4:	bge	1ff8 <coda_mem_cursor_read_uint8_array+0x1c0>
    1fe8:	mov	r0, r9
    1fec:	bl	0 <coda_cursor_goto_next_array_element>
    1ff0:	cmp	r0, #0
    1ff4:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    1ff8:	add	r4, r4, r6
    1ffc:	cmp	r4, r7
    2000:	blt	2060 <coda_mem_cursor_read_uint8_array+0x228>
    2004:	cmp	r5, r7
    2008:	beq	23c8 <coda_mem_cursor_read_uint8_array+0x590>
    200c:	ldr	r1, [sp, #76]	; 0x4c
    2010:	add	r2, r8, r1, lsl #2
    2014:	ldr	r0, [r8, r1, lsl #2]
    2018:	cmp	r1, #3
    201c:	ldr	r2, [r2, #-8]
    2020:	add	r2, r2, r4
    2024:	sub	r4, r2, r0
    2028:	blt	2060 <coda_mem_cursor_read_uint8_array+0x228>
    202c:	ldr	r0, [sp, #4]
    2030:	add	r0, r0, r1, lsl #2
    2034:	sub	r1, r1, #2
    2038:	ldr	r2, [r0]
    203c:	cmp	r4, r2
    2040:	blt	2060 <coda_mem_cursor_read_uint8_array+0x228>
    2044:	ldr	r3, [r0, #-8]
    2048:	sub	r2, r4, r2
    204c:	sub	r1, r1, #1
    2050:	sub	r0, r0, #4
    2054:	cmp	r1, #0
    2058:	add	r4, r3, r2
    205c:	bgt	2038 <coda_mem_cursor_read_uint8_array+0x200>
    2060:	add	r1, sl, r4
    2064:	mov	r0, r9
    2068:	bl	0 <coda_cursor_read_uint8>
    206c:	cmp	r0, #0
    2070:	beq	1fdc <coda_mem_cursor_read_uint8_array+0x1a4>
    2074:	b	23bc <coda_mem_cursor_read_uint8_array+0x584>
    2078:	add	r7, sp, #44	; 0x2c
    207c:	add	r1, sp, #76	; 0x4c
    2080:	mov	r0, r6
    2084:	mov	r2, r7
    2088:	bl	0 <coda_cursor_get_array_dim>
    208c:	cmp	r0, #0
    2090:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    2094:	add	r0, sp, #80	; 0x50
    2098:	mov	r1, r6
    209c:	mov	r2, #520	; 0x208
    20a0:	bl	0 <memcpy>
    20a4:	ldr	r0, [sp, #76]	; 0x4c
    20a8:	cmp	r0, #1
    20ac:	blt	21a0 <coda_mem_cursor_read_uint8_array+0x368>
    20b0:	cmp	r0, #4
    20b4:	bcs	2264 <coda_mem_cursor_read_uint8_array+0x42c>
    20b8:	mov	r4, #1
    20bc:	mov	r1, #0
    20c0:	b	2298 <coda_mem_cursor_read_uint8_array+0x460>
    20c4:	add	r5, r5, #1
    20c8:	cmp	r5, r7
    20cc:	bge	20e0 <coda_mem_cursor_read_uint8_array+0x2a8>
    20d0:	mov	r0, r9
    20d4:	bl	0 <coda_cursor_goto_next_array_element>
    20d8:	cmp	r0, #0
    20dc:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    20e0:	add	r4, r4, r6
    20e4:	cmp	r4, r7
    20e8:	blt	2148 <coda_mem_cursor_read_uint8_array+0x310>
    20ec:	cmp	r5, r7
    20f0:	beq	23c8 <coda_mem_cursor_read_uint8_array+0x590>
    20f4:	ldr	r1, [sp, #76]	; 0x4c
    20f8:	add	r2, r8, r1, lsl #2
    20fc:	ldr	r0, [r8, r1, lsl #2]
    2100:	cmp	r1, #3
    2104:	ldr	r2, [r2, #-8]
    2108:	add	r2, r2, r4
    210c:	sub	r4, r2, r0
    2110:	blt	2148 <coda_mem_cursor_read_uint8_array+0x310>
    2114:	ldr	r0, [sp, #4]
    2118:	add	r0, r0, r1, lsl #2
    211c:	sub	r1, r1, #2
    2120:	ldr	r2, [r0]
    2124:	cmp	r4, r2
    2128:	blt	2148 <coda_mem_cursor_read_uint8_array+0x310>
    212c:	ldr	r3, [r0, #-8]
    2130:	sub	r2, r4, r2
    2134:	sub	r1, r1, #1
    2138:	sub	r0, r0, #4
    213c:	cmp	r1, #0
    2140:	add	r4, r3, r2
    2144:	bgt	2120 <coda_mem_cursor_read_uint8_array+0x2e8>
    2148:	add	r1, sl, r4
    214c:	mov	r0, r9
    2150:	bl	0 <coda_bin_cursor_read_uint8>
    2154:	cmp	r0, #0
    2158:	beq	20c4 <coda_mem_cursor_read_uint8_array+0x28c>
    215c:	b	23bc <coda_mem_cursor_read_uint8_array+0x584>
    2160:	cmp	r0, #1
    2164:	blt	2198 <coda_mem_cursor_read_uint8_array+0x360>
    2168:	cmp	r0, #4
    216c:	bcs	21a8 <coda_mem_cursor_read_uint8_array+0x370>
    2170:	mov	r4, #1
    2174:	mov	r1, #0
    2178:	b	21e0 <coda_mem_cursor_read_uint8_array+0x3a8>
    217c:	cmp	r0, #1
    2180:	blt	2340 <coda_mem_cursor_read_uint8_array+0x508>
    2184:	cmp	r0, #4
    2188:	bcs	2348 <coda_mem_cursor_read_uint8_array+0x510>
    218c:	mov	r4, #1
    2190:	mov	r1, #0
    2194:	b	2380 <coda_mem_cursor_read_uint8_array+0x548>
    2198:	mov	r4, #1
    219c:	b	2204 <coda_mem_cursor_read_uint8_array+0x3cc>
    21a0:	mov	r4, #1
    21a4:	b	22bc <coda_mem_cursor_read_uint8_array+0x484>
    21a8:	bic	r1, r0, #3
    21ac:	vmov.i32	q8, #1	; 0x00000001
    21b0:	add	r2, sp, #44	; 0x2c
    21b4:	mov	r3, r1
    21b8:	vld1.32	{d18-d19}, [r2]!
    21bc:	subs	r3, r3, #4
    21c0:	vmul.i32	q8, q9, q8
    21c4:	bne	21b8 <coda_mem_cursor_read_uint8_array+0x380>
    21c8:	vext.8	q9, q8, q8, #8
    21cc:	cmp	r0, r1
    21d0:	vmul.i32	q0, q8, q9
    21d4:	vmul.i32	q8, q0, d0[1]
    21d8:	vmov.32	r4, d16[0]
    21dc:	beq	21fc <coda_mem_cursor_read_uint8_array+0x3c4>
    21e0:	add	r2, sp, #44	; 0x2c
    21e4:	sub	r0, r0, r1
    21e8:	add	r2, r2, r1, lsl #2
    21ec:	ldr	r1, [r2], #4
    21f0:	subs	r0, r0, #1
    21f4:	mul	r4, r1, r4
    21f8:	bne	21ec <coda_mem_cursor_read_uint8_array+0x3b4>
    21fc:	cmp	r4, #1
    2200:	blt	23c8 <coda_mem_cursor_read_uint8_array+0x590>
    2204:	add	r0, sp, #80	; 0x50
    2208:	mov	r1, #0
    220c:	mov	r6, #0
    2210:	bl	0 <coda_cursor_goto_array_element_by_index>
    2214:	cmp	r0, #0
    2218:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    221c:	sub	r7, r4, #1
    2220:	add	r5, sp, #80	; 0x50
    2224:	add	r1, sl, r6
    2228:	mov	r0, r5
    222c:	bl	0 <coda_cursor_read_uint8>
    2230:	cmp	r0, #0
    2234:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    2238:	cmp	r6, r7
    223c:	bge	2250 <coda_mem_cursor_read_uint8_array+0x418>
    2240:	mov	r0, r5
    2244:	bl	0 <coda_cursor_goto_next_array_element>
    2248:	cmp	r0, #0
    224c:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    2250:	add	r6, r6, #1
    2254:	mov	r0, #0
    2258:	cmp	r6, r4
    225c:	blt	2224 <coda_mem_cursor_read_uint8_array+0x3ec>
    2260:	b	23c0 <coda_mem_cursor_read_uint8_array+0x588>
    2264:	bic	r1, r0, #3
    2268:	vmov.i32	q8, #1	; 0x00000001
    226c:	mov	r2, r1
    2270:	vld1.32	{d18-d19}, [r7]!
    2274:	subs	r2, r2, #4
    2278:	vmul.i32	q8, q9, q8
    227c:	bne	2270 <coda_mem_cursor_read_uint8_array+0x438>
    2280:	vext.8	q9, q8, q8, #8
    2284:	cmp	r0, r1
    2288:	vmul.i32	q0, q8, q9
    228c:	vmul.i32	q8, q0, d0[1]
    2290:	vmov.32	r4, d16[0]
    2294:	beq	22b4 <coda_mem_cursor_read_uint8_array+0x47c>
    2298:	add	r2, sp, #44	; 0x2c
    229c:	sub	r0, r0, r1
    22a0:	add	r2, r2, r1, lsl #2
    22a4:	ldr	r1, [r2], #4
    22a8:	subs	r0, r0, #1
    22ac:	mul	r4, r1, r4
    22b0:	bne	22a4 <coda_mem_cursor_read_uint8_array+0x46c>
    22b4:	cmp	r4, #1
    22b8:	blt	2314 <coda_mem_cursor_read_uint8_array+0x4dc>
    22bc:	add	r0, sp, #80	; 0x50
    22c0:	mov	r1, #0
    22c4:	mov	r7, #0
    22c8:	bl	0 <coda_cursor_goto_array_element_by_index>
    22cc:	cmp	r0, #0
    22d0:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    22d4:	sub	r5, r4, #1
    22d8:	add	r8, sp, #80	; 0x50
    22dc:	add	r1, sl, r7
    22e0:	mov	r0, r8
    22e4:	bl	0 <coda_ascii_cursor_read_uint8>
    22e8:	cmp	r0, #0
    22ec:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    22f0:	cmp	r7, r5
    22f4:	bge	2308 <coda_mem_cursor_read_uint8_array+0x4d0>
    22f8:	mov	r0, r8
    22fc:	bl	0 <coda_cursor_goto_next_array_element>
    2300:	cmp	r0, #0
    2304:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    2308:	add	r7, r7, #1
    230c:	cmp	r7, r4
    2310:	blt	22dc <coda_mem_cursor_read_uint8_array+0x4a4>
    2314:	cmp	r9, #0
    2318:	beq	23c8 <coda_mem_cursor_read_uint8_array+0x590>
    231c:	mov	r0, r6
    2320:	mov	r1, sl
    2324:	mov	r2, #1
    2328:	bl	193c <transpose_array>
    232c:	mov	r1, r0
    2330:	mvn	r0, #0
    2334:	cmp	r1, #0
    2338:	bne	23c0 <coda_mem_cursor_read_uint8_array+0x588>
    233c:	b	23c8 <coda_mem_cursor_read_uint8_array+0x590>
    2340:	mov	r4, #1
    2344:	b	23a4 <coda_mem_cursor_read_uint8_array+0x56c>
    2348:	bic	r1, r0, #3
    234c:	vmov.i32	q8, #1	; 0x00000001
    2350:	add	r2, sp, #44	; 0x2c
    2354:	mov	r3, r1
    2358:	vld1.32	{d18-d19}, [r2]!
    235c:	subs	r3, r3, #4
    2360:	vmul.i32	q8, q9, q8
    2364:	bne	2358 <coda_mem_cursor_read_uint8_array+0x520>
    2368:	vext.8	q9, q8, q8, #8
    236c:	cmp	r0, r1
    2370:	vmul.i32	q0, q8, q9
    2374:	vmul.i32	q8, q0, d0[1]
    2378:	vmov.32	r4, d16[0]
    237c:	beq	239c <coda_mem_cursor_read_uint8_array+0x564>
    2380:	add	r2, sp, #44	; 0x2c
    2384:	sub	r0, r0, r1
    2388:	add	r2, r2, r1, lsl #2
    238c:	ldr	r1, [r2], #4
    2390:	subs	r0, r0, #1
    2394:	mul	r4, r1, r4
    2398:	bne	238c <coda_mem_cursor_read_uint8_array+0x554>
    239c:	cmp	r4, #1
    23a0:	blt	23c8 <coda_mem_cursor_read_uint8_array+0x590>
    23a4:	add	r0, sp, #80	; 0x50
    23a8:	mov	r1, #0
    23ac:	mov	r6, #0
    23b0:	bl	0 <coda_cursor_goto_array_element_by_index>
    23b4:	cmp	r0, #0
    23b8:	beq	23d4 <coda_mem_cursor_read_uint8_array+0x59c>
    23bc:	mvn	r0, #0
    23c0:	sub	sp, fp, #28
    23c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23c8:	mov	r0, #0
    23cc:	sub	sp, fp, #28
    23d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23d4:	sub	r7, r4, #1
    23d8:	add	r5, sp, #80	; 0x50
    23dc:	add	r1, sl, r6
    23e0:	mov	r0, r5
    23e4:	bl	0 <coda_bin_cursor_read_uint8>
    23e8:	cmp	r0, #0
    23ec:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    23f0:	cmp	r6, r7
    23f4:	bge	2408 <coda_mem_cursor_read_uint8_array+0x5d0>
    23f8:	mov	r0, r5
    23fc:	bl	0 <coda_cursor_goto_next_array_element>
    2400:	cmp	r0, #0
    2404:	bne	23bc <coda_mem_cursor_read_uint8_array+0x584>
    2408:	add	r6, r6, #1
    240c:	mov	r0, #0
    2410:	cmp	r6, r4
    2414:	blt	23dc <coda_mem_cursor_read_uint8_array+0x5a4>
    2418:	b	23c0 <coda_mem_cursor_read_uint8_array+0x588>
    241c:	movw	r0, #0
    2420:	movw	r1, #0
    2424:	movw	r3, #0
    2428:	movw	r2, #682	; 0x2aa
    242c:	movt	r0, #0
    2430:	movt	r1, #0
    2434:	movt	r3, #0
    2438:	bl	0 <__assert_fail>
    243c:	movw	r0, #0
    2440:	movw	r1, #0
    2444:	movw	r3, #0
    2448:	mov	r2, #688	; 0x2b0
    244c:	movt	r0, #0
    2450:	movt	r1, #0
    2454:	movt	r3, #0
    2458:	bl	0 <__assert_fail>

0000245c <coda_mem_cursor_read_int16_array>:
    245c:	push	{r4, r5, r6, r7, fp, lr}
    2460:	add	fp, sp, #16
    2464:	sub	sp, sp, #8
    2468:	mov	r5, r0
    246c:	ldr	r0, [r0, #4]
    2470:	mov	r4, r1
    2474:	mov	r6, r2
    2478:	add	r0, r5, r0, lsl #4
    247c:	ldr	r0, [r0, #-8]
    2480:	ldr	r1, [r0, #8]
    2484:	cmp	r1, #2
    2488:	beq	24a4 <coda_mem_cursor_read_int16_array+0x48>
    248c:	cmp	r1, #1
    2490:	bne	2544 <coda_mem_cursor_read_int16_array+0xe8>
    2494:	movw	r1, #0
    2498:	str	r6, [sp]
    249c:	movt	r1, #0
    24a0:	b	24cc <coda_mem_cursor_read_int16_array+0x70>
    24a4:	ldr	r0, [r0, #4]
    24a8:	ldr	r0, [r0, #40]	; 0x28
    24ac:	ldr	r0, [r0]
    24b0:	cmp	r0, #0
    24b4:	beq	24e4 <coda_mem_cursor_read_int16_array+0x88>
    24b8:	cmp	r0, #1
    24bc:	bne	2564 <coda_mem_cursor_read_int16_array+0x108>
    24c0:	movw	r1, #0
    24c4:	str	r6, [sp]
    24c8:	movt	r1, #0
    24cc:	mov	r0, r5
    24d0:	mov	r2, r4
    24d4:	mov	r3, #2
    24d8:	bl	16d4 <read_array>
    24dc:	sub	sp, fp, #16
    24e0:	pop	{r4, r5, r6, r7, fp, pc}
    24e4:	movw	r1, #0
    24e8:	mov	r0, #0
    24ec:	mov	r2, r4
    24f0:	mov	r3, #2
    24f4:	str	r0, [sp]
    24f8:	movt	r1, #0
    24fc:	mov	r0, r5
    2500:	bl	16d4 <read_array>
    2504:	mvn	r7, #0
    2508:	cmp	r0, #0
    250c:	bne	2538 <coda_mem_cursor_read_int16_array+0xdc>
    2510:	cmp	r6, #0
    2514:	beq	2534 <coda_mem_cursor_read_int16_array+0xd8>
    2518:	mov	r0, r5
    251c:	mov	r1, r4
    2520:	mov	r2, #2
    2524:	bl	193c <transpose_array>
    2528:	cmp	r0, #0
    252c:	moveq	r7, #0
    2530:	b	2538 <coda_mem_cursor_read_int16_array+0xdc>
    2534:	mov	r7, #0
    2538:	mov	r0, r7
    253c:	sub	sp, fp, #16
    2540:	pop	{r4, r5, r6, r7, fp, pc}
    2544:	movw	r0, #0
    2548:	movw	r1, #0
    254c:	movw	r3, #0
    2550:	movw	r2, #713	; 0x2c9
    2554:	movt	r0, #0
    2558:	movt	r1, #0
    255c:	movt	r3, #0
    2560:	bl	0 <__assert_fail>
    2564:	movw	r0, #0
    2568:	movw	r1, #0
    256c:	movw	r3, #0
    2570:	movw	r2, #719	; 0x2cf
    2574:	movt	r0, #0
    2578:	movt	r1, #0
    257c:	movt	r3, #0
    2580:	bl	0 <__assert_fail>

00002584 <coda_mem_cursor_read_uint16_array>:
    2584:	push	{r4, r5, r6, r7, fp, lr}
    2588:	add	fp, sp, #16
    258c:	sub	sp, sp, #8
    2590:	mov	r5, r0
    2594:	ldr	r0, [r0, #4]
    2598:	mov	r4, r1
    259c:	mov	r6, r2
    25a0:	add	r0, r5, r0, lsl #4
    25a4:	ldr	r0, [r0, #-8]
    25a8:	ldr	r1, [r0, #8]
    25ac:	cmp	r1, #2
    25b0:	beq	25cc <coda_mem_cursor_read_uint16_array+0x48>
    25b4:	cmp	r1, #1
    25b8:	bne	266c <coda_mem_cursor_read_uint16_array+0xe8>
    25bc:	movw	r1, #0
    25c0:	str	r6, [sp]
    25c4:	movt	r1, #0
    25c8:	b	25f4 <coda_mem_cursor_read_uint16_array+0x70>
    25cc:	ldr	r0, [r0, #4]
    25d0:	ldr	r0, [r0, #40]	; 0x28
    25d4:	ldr	r0, [r0]
    25d8:	cmp	r0, #0
    25dc:	beq	260c <coda_mem_cursor_read_uint16_array+0x88>
    25e0:	cmp	r0, #1
    25e4:	bne	268c <coda_mem_cursor_read_uint16_array+0x108>
    25e8:	movw	r1, #0
    25ec:	str	r6, [sp]
    25f0:	movt	r1, #0
    25f4:	mov	r0, r5
    25f8:	mov	r2, r4
    25fc:	mov	r3, #2
    2600:	bl	16d4 <read_array>
    2604:	sub	sp, fp, #16
    2608:	pop	{r4, r5, r6, r7, fp, pc}
    260c:	movw	r1, #0
    2610:	mov	r0, #0
    2614:	mov	r2, r4
    2618:	mov	r3, #2
    261c:	str	r0, [sp]
    2620:	movt	r1, #0
    2624:	mov	r0, r5
    2628:	bl	16d4 <read_array>
    262c:	mvn	r7, #0
    2630:	cmp	r0, #0
    2634:	bne	2660 <coda_mem_cursor_read_uint16_array+0xdc>
    2638:	cmp	r6, #0
    263c:	beq	265c <coda_mem_cursor_read_uint16_array+0xd8>
    2640:	mov	r0, r5
    2644:	mov	r1, r4
    2648:	mov	r2, #2
    264c:	bl	193c <transpose_array>
    2650:	cmp	r0, #0
    2654:	moveq	r7, #0
    2658:	b	2660 <coda_mem_cursor_read_uint16_array+0xdc>
    265c:	mov	r7, #0
    2660:	mov	r0, r7
    2664:	sub	sp, fp, #16
    2668:	pop	{r4, r5, r6, r7, fp, pc}
    266c:	movw	r0, #0
    2670:	movw	r1, #0
    2674:	movw	r3, #0
    2678:	mov	r2, #744	; 0x2e8
    267c:	movt	r0, #0
    2680:	movt	r1, #0
    2684:	movt	r3, #0
    2688:	bl	0 <__assert_fail>
    268c:	movw	r0, #0
    2690:	movw	r1, #0
    2694:	movw	r3, #0
    2698:	movw	r2, #750	; 0x2ee
    269c:	movt	r0, #0
    26a0:	movt	r1, #0
    26a4:	movt	r3, #0
    26a8:	bl	0 <__assert_fail>

000026ac <coda_mem_cursor_read_int32_array>:
    26ac:	push	{r4, r5, r6, r7, fp, lr}
    26b0:	add	fp, sp, #16
    26b4:	sub	sp, sp, #8
    26b8:	mov	r5, r0
    26bc:	ldr	r0, [r0, #4]
    26c0:	mov	r4, r1
    26c4:	mov	r6, r2
    26c8:	add	r0, r5, r0, lsl #4
    26cc:	ldr	r0, [r0, #-8]
    26d0:	ldr	r1, [r0, #8]
    26d4:	cmp	r1, #2
    26d8:	beq	26f4 <coda_mem_cursor_read_int32_array+0x48>
    26dc:	cmp	r1, #1
    26e0:	bne	2794 <coda_mem_cursor_read_int32_array+0xe8>
    26e4:	movw	r1, #0
    26e8:	str	r6, [sp]
    26ec:	movt	r1, #0
    26f0:	b	271c <coda_mem_cursor_read_int32_array+0x70>
    26f4:	ldr	r0, [r0, #4]
    26f8:	ldr	r0, [r0, #40]	; 0x28
    26fc:	ldr	r0, [r0]
    2700:	cmp	r0, #0
    2704:	beq	2734 <coda_mem_cursor_read_int32_array+0x88>
    2708:	cmp	r0, #1
    270c:	bne	27b4 <coda_mem_cursor_read_int32_array+0x108>
    2710:	movw	r1, #0
    2714:	str	r6, [sp]
    2718:	movt	r1, #0
    271c:	mov	r0, r5
    2720:	mov	r2, r4
    2724:	mov	r3, #4
    2728:	bl	16d4 <read_array>
    272c:	sub	sp, fp, #16
    2730:	pop	{r4, r5, r6, r7, fp, pc}
    2734:	movw	r1, #0
    2738:	mov	r0, #0
    273c:	mov	r2, r4
    2740:	mov	r3, #4
    2744:	str	r0, [sp]
    2748:	movt	r1, #0
    274c:	mov	r0, r5
    2750:	bl	16d4 <read_array>
    2754:	mvn	r7, #0
    2758:	cmp	r0, #0
    275c:	bne	2788 <coda_mem_cursor_read_int32_array+0xdc>
    2760:	cmp	r6, #0
    2764:	beq	2784 <coda_mem_cursor_read_int32_array+0xd8>
    2768:	mov	r0, r5
    276c:	mov	r1, r4
    2770:	mov	r2, #4
    2774:	bl	193c <transpose_array>
    2778:	cmp	r0, #0
    277c:	moveq	r7, #0
    2780:	b	2788 <coda_mem_cursor_read_int32_array+0xdc>
    2784:	mov	r7, #0
    2788:	mov	r0, r7
    278c:	sub	sp, fp, #16
    2790:	pop	{r4, r5, r6, r7, fp, pc}
    2794:	movw	r0, #0
    2798:	movw	r1, #0
    279c:	movw	r3, #0
    27a0:	movw	r2, #775	; 0x307
    27a4:	movt	r0, #0
    27a8:	movt	r1, #0
    27ac:	movt	r3, #0
    27b0:	bl	0 <__assert_fail>
    27b4:	movw	r0, #0
    27b8:	movw	r1, #0
    27bc:	movw	r3, #0
    27c0:	movw	r2, #781	; 0x30d
    27c4:	movt	r0, #0
    27c8:	movt	r1, #0
    27cc:	movt	r3, #0
    27d0:	bl	0 <__assert_fail>

000027d4 <coda_mem_cursor_read_uint32_array>:
    27d4:	push	{r4, r5, r6, r7, fp, lr}
    27d8:	add	fp, sp, #16
    27dc:	sub	sp, sp, #8
    27e0:	mov	r5, r0
    27e4:	ldr	r0, [r0, #4]
    27e8:	mov	r4, r1
    27ec:	mov	r6, r2
    27f0:	add	r0, r5, r0, lsl #4
    27f4:	ldr	r0, [r0, #-8]
    27f8:	ldr	r1, [r0, #8]
    27fc:	cmp	r1, #2
    2800:	beq	281c <coda_mem_cursor_read_uint32_array+0x48>
    2804:	cmp	r1, #1
    2808:	bne	28bc <coda_mem_cursor_read_uint32_array+0xe8>
    280c:	movw	r1, #0
    2810:	str	r6, [sp]
    2814:	movt	r1, #0
    2818:	b	2844 <coda_mem_cursor_read_uint32_array+0x70>
    281c:	ldr	r0, [r0, #4]
    2820:	ldr	r0, [r0, #40]	; 0x28
    2824:	ldr	r0, [r0]
    2828:	cmp	r0, #0
    282c:	beq	285c <coda_mem_cursor_read_uint32_array+0x88>
    2830:	cmp	r0, #1
    2834:	bne	28dc <coda_mem_cursor_read_uint32_array+0x108>
    2838:	movw	r1, #0
    283c:	str	r6, [sp]
    2840:	movt	r1, #0
    2844:	mov	r0, r5
    2848:	mov	r2, r4
    284c:	mov	r3, #4
    2850:	bl	16d4 <read_array>
    2854:	sub	sp, fp, #16
    2858:	pop	{r4, r5, r6, r7, fp, pc}
    285c:	movw	r1, #0
    2860:	mov	r0, #0
    2864:	mov	r2, r4
    2868:	mov	r3, #4
    286c:	str	r0, [sp]
    2870:	movt	r1, #0
    2874:	mov	r0, r5
    2878:	bl	16d4 <read_array>
    287c:	mvn	r7, #0
    2880:	cmp	r0, #0
    2884:	bne	28b0 <coda_mem_cursor_read_uint32_array+0xdc>
    2888:	cmp	r6, #0
    288c:	beq	28ac <coda_mem_cursor_read_uint32_array+0xd8>
    2890:	mov	r0, r5
    2894:	mov	r1, r4
    2898:	mov	r2, #4
    289c:	bl	193c <transpose_array>
    28a0:	cmp	r0, #0
    28a4:	moveq	r7, #0
    28a8:	b	28b0 <coda_mem_cursor_read_uint32_array+0xdc>
    28ac:	mov	r7, #0
    28b0:	mov	r0, r7
    28b4:	sub	sp, fp, #16
    28b8:	pop	{r4, r5, r6, r7, fp, pc}
    28bc:	movw	r0, #0
    28c0:	movw	r1, #0
    28c4:	movw	r3, #0
    28c8:	movw	r2, #806	; 0x326
    28cc:	movt	r0, #0
    28d0:	movt	r1, #0
    28d4:	movt	r3, #0
    28d8:	bl	0 <__assert_fail>
    28dc:	movw	r0, #0
    28e0:	movw	r1, #0
    28e4:	movw	r3, #0
    28e8:	mov	r2, #812	; 0x32c
    28ec:	movt	r0, #0
    28f0:	movt	r1, #0
    28f4:	movt	r3, #0
    28f8:	bl	0 <__assert_fail>

000028fc <coda_mem_cursor_read_int64_array>:
    28fc:	push	{r4, r5, r6, r7, fp, lr}
    2900:	add	fp, sp, #16
    2904:	sub	sp, sp, #8
    2908:	mov	r5, r0
    290c:	ldr	r0, [r0, #4]
    2910:	mov	r4, r1
    2914:	mov	r6, r2
    2918:	add	r0, r5, r0, lsl #4
    291c:	ldr	r0, [r0, #-8]
    2920:	ldr	r1, [r0, #8]
    2924:	cmp	r1, #2
    2928:	beq	2944 <coda_mem_cursor_read_int64_array+0x48>
    292c:	cmp	r1, #1
    2930:	bne	29e4 <coda_mem_cursor_read_int64_array+0xe8>
    2934:	movw	r1, #0
    2938:	str	r6, [sp]
    293c:	movt	r1, #0
    2940:	b	296c <coda_mem_cursor_read_int64_array+0x70>
    2944:	ldr	r0, [r0, #4]
    2948:	ldr	r0, [r0, #40]	; 0x28
    294c:	ldr	r0, [r0]
    2950:	cmp	r0, #0
    2954:	beq	2984 <coda_mem_cursor_read_int64_array+0x88>
    2958:	cmp	r0, #1
    295c:	bne	2a04 <coda_mem_cursor_read_int64_array+0x108>
    2960:	movw	r1, #0
    2964:	str	r6, [sp]
    2968:	movt	r1, #0
    296c:	mov	r0, r5
    2970:	mov	r2, r4
    2974:	mov	r3, #8
    2978:	bl	16d4 <read_array>
    297c:	sub	sp, fp, #16
    2980:	pop	{r4, r5, r6, r7, fp, pc}
    2984:	movw	r1, #0
    2988:	mov	r0, #0
    298c:	mov	r2, r4
    2990:	mov	r3, #8
    2994:	str	r0, [sp]
    2998:	movt	r1, #0
    299c:	mov	r0, r5
    29a0:	bl	16d4 <read_array>
    29a4:	mvn	r7, #0
    29a8:	cmp	r0, #0
    29ac:	bne	29d8 <coda_mem_cursor_read_int64_array+0xdc>
    29b0:	cmp	r6, #0
    29b4:	beq	29d4 <coda_mem_cursor_read_int64_array+0xd8>
    29b8:	mov	r0, r5
    29bc:	mov	r1, r4
    29c0:	mov	r2, #8
    29c4:	bl	193c <transpose_array>
    29c8:	cmp	r0, #0
    29cc:	moveq	r7, #0
    29d0:	b	29d8 <coda_mem_cursor_read_int64_array+0xdc>
    29d4:	mov	r7, #0
    29d8:	mov	r0, r7
    29dc:	sub	sp, fp, #16
    29e0:	pop	{r4, r5, r6, r7, fp, pc}
    29e4:	movw	r0, #0
    29e8:	movw	r1, #0
    29ec:	movw	r3, #0
    29f0:	movw	r2, #837	; 0x345
    29f4:	movt	r0, #0
    29f8:	movt	r1, #0
    29fc:	movt	r3, #0
    2a00:	bl	0 <__assert_fail>
    2a04:	movw	r0, #0
    2a08:	movw	r1, #0
    2a0c:	movw	r3, #0
    2a10:	movw	r2, #843	; 0x34b
    2a14:	movt	r0, #0
    2a18:	movt	r1, #0
    2a1c:	movt	r3, #0
    2a20:	bl	0 <__assert_fail>

00002a24 <coda_mem_cursor_read_uint64_array>:
    2a24:	push	{r4, r5, r6, r7, fp, lr}
    2a28:	add	fp, sp, #16
    2a2c:	sub	sp, sp, #8
    2a30:	mov	r5, r0
    2a34:	ldr	r0, [r0, #4]
    2a38:	mov	r4, r1
    2a3c:	mov	r6, r2
    2a40:	add	r0, r5, r0, lsl #4
    2a44:	ldr	r0, [r0, #-8]
    2a48:	ldr	r1, [r0, #8]
    2a4c:	cmp	r1, #2
    2a50:	beq	2a6c <coda_mem_cursor_read_uint64_array+0x48>
    2a54:	cmp	r1, #1
    2a58:	bne	2b0c <coda_mem_cursor_read_uint64_array+0xe8>
    2a5c:	movw	r1, #0
    2a60:	str	r6, [sp]
    2a64:	movt	r1, #0
    2a68:	b	2a94 <coda_mem_cursor_read_uint64_array+0x70>
    2a6c:	ldr	r0, [r0, #4]
    2a70:	ldr	r0, [r0, #40]	; 0x28
    2a74:	ldr	r0, [r0]
    2a78:	cmp	r0, #0
    2a7c:	beq	2aac <coda_mem_cursor_read_uint64_array+0x88>
    2a80:	cmp	r0, #1
    2a84:	bne	2b2c <coda_mem_cursor_read_uint64_array+0x108>
    2a88:	movw	r1, #0
    2a8c:	str	r6, [sp]
    2a90:	movt	r1, #0
    2a94:	mov	r0, r5
    2a98:	mov	r2, r4
    2a9c:	mov	r3, #8
    2aa0:	bl	16d4 <read_array>
    2aa4:	sub	sp, fp, #16
    2aa8:	pop	{r4, r5, r6, r7, fp, pc}
    2aac:	movw	r1, #0
    2ab0:	mov	r0, #0
    2ab4:	mov	r2, r4
    2ab8:	mov	r3, #8
    2abc:	str	r0, [sp]
    2ac0:	movt	r1, #0
    2ac4:	mov	r0, r5
    2ac8:	bl	16d4 <read_array>
    2acc:	mvn	r7, #0
    2ad0:	cmp	r0, #0
    2ad4:	bne	2b00 <coda_mem_cursor_read_uint64_array+0xdc>
    2ad8:	cmp	r6, #0
    2adc:	beq	2afc <coda_mem_cursor_read_uint64_array+0xd8>
    2ae0:	mov	r0, r5
    2ae4:	mov	r1, r4
    2ae8:	mov	r2, #8
    2aec:	bl	193c <transpose_array>
    2af0:	cmp	r0, #0
    2af4:	moveq	r7, #0
    2af8:	b	2b00 <coda_mem_cursor_read_uint64_array+0xdc>
    2afc:	mov	r7, #0
    2b00:	mov	r0, r7
    2b04:	sub	sp, fp, #16
    2b08:	pop	{r4, r5, r6, r7, fp, pc}
    2b0c:	movw	r0, #0
    2b10:	movw	r1, #0
    2b14:	movw	r3, #0
    2b18:	mov	r2, #868	; 0x364
    2b1c:	movt	r0, #0
    2b20:	movt	r1, #0
    2b24:	movt	r3, #0
    2b28:	bl	0 <__assert_fail>
    2b2c:	movw	r0, #0
    2b30:	movw	r1, #0
    2b34:	movw	r3, #0
    2b38:	movw	r2, #874	; 0x36a
    2b3c:	movt	r0, #0
    2b40:	movt	r1, #0
    2b44:	movt	r3, #0
    2b48:	bl	0 <__assert_fail>

00002b4c <coda_mem_cursor_read_float_array>:
    2b4c:	push	{r4, r5, r6, r7, fp, lr}
    2b50:	add	fp, sp, #16
    2b54:	sub	sp, sp, #8
    2b58:	mov	r5, r0
    2b5c:	ldr	r0, [r0, #4]
    2b60:	mov	r4, r1
    2b64:	mov	r6, r2
    2b68:	add	r0, r5, r0, lsl #4
    2b6c:	ldr	r0, [r0, #-8]
    2b70:	ldr	r1, [r0, #8]
    2b74:	cmp	r1, #2
    2b78:	beq	2b94 <coda_mem_cursor_read_float_array+0x48>
    2b7c:	cmp	r1, #1
    2b80:	bne	2c34 <coda_mem_cursor_read_float_array+0xe8>
    2b84:	movw	r1, #0
    2b88:	str	r6, [sp]
    2b8c:	movt	r1, #0
    2b90:	b	2bbc <coda_mem_cursor_read_float_array+0x70>
    2b94:	ldr	r0, [r0, #4]
    2b98:	ldr	r0, [r0, #40]	; 0x28
    2b9c:	ldr	r0, [r0]
    2ba0:	cmp	r0, #0
    2ba4:	beq	2bd4 <coda_mem_cursor_read_float_array+0x88>
    2ba8:	cmp	r0, #1
    2bac:	bne	2c54 <coda_mem_cursor_read_float_array+0x108>
    2bb0:	movw	r1, #0
    2bb4:	str	r6, [sp]
    2bb8:	movt	r1, #0
    2bbc:	mov	r0, r5
    2bc0:	mov	r2, r4
    2bc4:	mov	r3, #4
    2bc8:	bl	16d4 <read_array>
    2bcc:	sub	sp, fp, #16
    2bd0:	pop	{r4, r5, r6, r7, fp, pc}
    2bd4:	movw	r1, #0
    2bd8:	mov	r0, #0
    2bdc:	mov	r2, r4
    2be0:	mov	r3, #4
    2be4:	str	r0, [sp]
    2be8:	movt	r1, #0
    2bec:	mov	r0, r5
    2bf0:	bl	16d4 <read_array>
    2bf4:	mvn	r7, #0
    2bf8:	cmp	r0, #0
    2bfc:	bne	2c28 <coda_mem_cursor_read_float_array+0xdc>
    2c00:	cmp	r6, #0
    2c04:	beq	2c24 <coda_mem_cursor_read_float_array+0xd8>
    2c08:	mov	r0, r5
    2c0c:	mov	r1, r4
    2c10:	mov	r2, #4
    2c14:	bl	193c <transpose_array>
    2c18:	cmp	r0, #0
    2c1c:	moveq	r7, #0
    2c20:	b	2c28 <coda_mem_cursor_read_float_array+0xdc>
    2c24:	mov	r7, #0
    2c28:	mov	r0, r7
    2c2c:	sub	sp, fp, #16
    2c30:	pop	{r4, r5, r6, r7, fp, pc}
    2c34:	movw	r0, #0
    2c38:	movw	r1, #0
    2c3c:	movw	r3, #0
    2c40:	movw	r2, #899	; 0x383
    2c44:	movt	r0, #0
    2c48:	movt	r1, #0
    2c4c:	movt	r3, #0
    2c50:	bl	0 <__assert_fail>
    2c54:	movw	r0, #0
    2c58:	movw	r1, #0
    2c5c:	movw	r3, #0
    2c60:	movw	r2, #905	; 0x389
    2c64:	movt	r0, #0
    2c68:	movt	r1, #0
    2c6c:	movt	r3, #0
    2c70:	bl	0 <__assert_fail>

00002c74 <coda_mem_cursor_read_double_array>:
    2c74:	push	{r4, r5, r6, r7, fp, lr}
    2c78:	add	fp, sp, #16
    2c7c:	sub	sp, sp, #8
    2c80:	mov	r5, r0
    2c84:	ldr	r0, [r0, #4]
    2c88:	mov	r4, r1
    2c8c:	mov	r6, r2
    2c90:	add	r0, r5, r0, lsl #4
    2c94:	ldr	r0, [r0, #-8]
    2c98:	ldr	r1, [r0, #8]
    2c9c:	cmp	r1, #2
    2ca0:	beq	2cbc <coda_mem_cursor_read_double_array+0x48>
    2ca4:	cmp	r1, #1
    2ca8:	bne	2d5c <coda_mem_cursor_read_double_array+0xe8>
    2cac:	movw	r1, #0
    2cb0:	str	r6, [sp]
    2cb4:	movt	r1, #0
    2cb8:	b	2ce4 <coda_mem_cursor_read_double_array+0x70>
    2cbc:	ldr	r0, [r0, #4]
    2cc0:	ldr	r0, [r0, #40]	; 0x28
    2cc4:	ldr	r0, [r0]
    2cc8:	cmp	r0, #0
    2ccc:	beq	2cfc <coda_mem_cursor_read_double_array+0x88>
    2cd0:	cmp	r0, #1
    2cd4:	bne	2d7c <coda_mem_cursor_read_double_array+0x108>
    2cd8:	movw	r1, #0
    2cdc:	str	r6, [sp]
    2ce0:	movt	r1, #0
    2ce4:	mov	r0, r5
    2ce8:	mov	r2, r4
    2cec:	mov	r3, #8
    2cf0:	bl	16d4 <read_array>
    2cf4:	sub	sp, fp, #16
    2cf8:	pop	{r4, r5, r6, r7, fp, pc}
    2cfc:	movw	r1, #0
    2d00:	mov	r0, #0
    2d04:	mov	r2, r4
    2d08:	mov	r3, #8
    2d0c:	str	r0, [sp]
    2d10:	movt	r1, #0
    2d14:	mov	r0, r5
    2d18:	bl	16d4 <read_array>
    2d1c:	mvn	r7, #0
    2d20:	cmp	r0, #0
    2d24:	bne	2d50 <coda_mem_cursor_read_double_array+0xdc>
    2d28:	cmp	r6, #0
    2d2c:	beq	2d4c <coda_mem_cursor_read_double_array+0xd8>
    2d30:	mov	r0, r5
    2d34:	mov	r1, r4
    2d38:	mov	r2, #8
    2d3c:	bl	193c <transpose_array>
    2d40:	cmp	r0, #0
    2d44:	moveq	r7, #0
    2d48:	b	2d50 <coda_mem_cursor_read_double_array+0xdc>
    2d4c:	mov	r7, #0
    2d50:	mov	r0, r7
    2d54:	sub	sp, fp, #16
    2d58:	pop	{r4, r5, r6, r7, fp, pc}
    2d5c:	movw	r0, #0
    2d60:	movw	r1, #0
    2d64:	movw	r3, #0
    2d68:	movw	r2, #930	; 0x3a2
    2d6c:	movt	r0, #0
    2d70:	movt	r1, #0
    2d74:	movt	r3, #0
    2d78:	bl	0 <__assert_fail>
    2d7c:	movw	r0, #0
    2d80:	movw	r1, #0
    2d84:	movw	r3, #0
    2d88:	mov	r2, #936	; 0x3a8
    2d8c:	movt	r0, #0
    2d90:	movt	r1, #0
    2d94:	movt	r3, #0
    2d98:	bl	0 <__assert_fail>

00002d9c <coda_mem_cursor_read_char_array>:
    2d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2da0:	add	fp, sp, #28
    2da4:	sub	sp, sp, #604	; 0x25c
    2da8:	mov	r6, r0
    2dac:	ldr	r0, [r0, #4]
    2db0:	mov	sl, r1
    2db4:	mov	r9, r2
    2db8:	add	r0, r6, r0, lsl #4
    2dbc:	ldr	r0, [r0, #-8]
    2dc0:	ldr	r1, [r0, #8]
    2dc4:	cmp	r1, #2
    2dc8:	beq	2e7c <coda_mem_cursor_read_char_array+0xe0>
    2dcc:	cmp	r1, #1
    2dd0:	bne	3380 <coda_mem_cursor_read_char_array+0x5e4>
    2dd4:	add	r7, sp, #44	; 0x2c
    2dd8:	add	r1, sp, #76	; 0x4c
    2ddc:	mov	r0, r6
    2de0:	mov	r2, r7
    2de4:	bl	0 <coda_cursor_get_array_dim>
    2de8:	cmp	r0, #0
    2dec:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    2df0:	add	r0, sp, #80	; 0x50
    2df4:	mov	r1, r6
    2df8:	mov	r2, #520	; 0x208
    2dfc:	bl	0 <memcpy>
    2e00:	ldr	r0, [sp, #76]	; 0x4c
    2e04:	cmp	r9, #1
    2e08:	bne	30c4 <coda_mem_cursor_read_char_array+0x328>
    2e0c:	cmp	r0, #1
    2e10:	ble	30c4 <coda_mem_cursor_read_char_array+0x328>
    2e14:	add	r8, sp, #8
    2e18:	mov	r1, #1
    2e1c:	mov	r3, r0
    2e20:	add	r2, r8, #4
    2e24:	str	r1, [sp, #8]
    2e28:	ldr	r6, [r7], #4
    2e2c:	subs	r3, r3, #1
    2e30:	mul	r1, r6, r1
    2e34:	str	r1, [r2], #4
    2e38:	bne	2e28 <coda_mem_cursor_read_char_array+0x8c>
    2e3c:	ldr	r7, [r8, r0, lsl #2]
    2e40:	cmp	r7, #1
    2e44:	blt	332c <coda_mem_cursor_read_char_array+0x590>
    2e48:	add	r0, r8, r0, lsl #2
    2e4c:	mov	r1, #0
    2e50:	mov	r5, #0
    2e54:	ldr	r6, [r0, #-4]
    2e58:	add	r0, sp, #80	; 0x50
    2e5c:	bl	0 <coda_cursor_goto_array_element_by_index>
    2e60:	cmp	r0, #0
    2e64:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    2e68:	sub	r0, r8, #4
    2e6c:	add	r9, sp, #80	; 0x50
    2e70:	mov	r4, #0
    2e74:	str	r0, [sp, #4]
    2e78:	b	2fc4 <coda_mem_cursor_read_char_array+0x228>
    2e7c:	ldr	r0, [r0, #4]
    2e80:	ldr	r0, [r0, #40]	; 0x28
    2e84:	ldr	r0, [r0]
    2e88:	cmp	r0, #0
    2e8c:	beq	2fdc <coda_mem_cursor_read_char_array+0x240>
    2e90:	cmp	r0, #1
    2e94:	bne	33a0 <coda_mem_cursor_read_char_array+0x604>
    2e98:	add	r7, sp, #44	; 0x2c
    2e9c:	add	r1, sp, #76	; 0x4c
    2ea0:	mov	r0, r6
    2ea4:	mov	r2, r7
    2ea8:	bl	0 <coda_cursor_get_array_dim>
    2eac:	cmp	r0, #0
    2eb0:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    2eb4:	add	r0, sp, #80	; 0x50
    2eb8:	mov	r1, r6
    2ebc:	mov	r2, #520	; 0x208
    2ec0:	bl	0 <memcpy>
    2ec4:	ldr	r0, [sp, #76]	; 0x4c
    2ec8:	cmp	r9, #1
    2ecc:	bne	30e0 <coda_mem_cursor_read_char_array+0x344>
    2ed0:	cmp	r0, #1
    2ed4:	ble	30e0 <coda_mem_cursor_read_char_array+0x344>
    2ed8:	add	r8, sp, #8
    2edc:	mov	r1, #1
    2ee0:	mov	r3, r0
    2ee4:	add	r2, r8, #4
    2ee8:	str	r1, [sp, #8]
    2eec:	ldr	r6, [r7], #4
    2ef0:	subs	r3, r3, #1
    2ef4:	mul	r1, r6, r1
    2ef8:	str	r1, [r2], #4
    2efc:	bne	2eec <coda_mem_cursor_read_char_array+0x150>
    2f00:	ldr	r7, [r8, r0, lsl #2]
    2f04:	cmp	r7, #1
    2f08:	blt	332c <coda_mem_cursor_read_char_array+0x590>
    2f0c:	add	r0, r8, r0, lsl #2
    2f10:	mov	r1, #0
    2f14:	mov	r5, #0
    2f18:	ldr	r6, [r0, #-4]
    2f1c:	add	r0, sp, #80	; 0x50
    2f20:	bl	0 <coda_cursor_goto_array_element_by_index>
    2f24:	cmp	r0, #0
    2f28:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    2f2c:	sub	r0, r8, #4
    2f30:	add	r9, sp, #80	; 0x50
    2f34:	mov	r4, #0
    2f38:	str	r0, [sp, #4]
    2f3c:	b	30ac <coda_mem_cursor_read_char_array+0x310>
    2f40:	add	r5, r5, #1
    2f44:	cmp	r5, r7
    2f48:	bge	2f5c <coda_mem_cursor_read_char_array+0x1c0>
    2f4c:	mov	r0, r9
    2f50:	bl	0 <coda_cursor_goto_next_array_element>
    2f54:	cmp	r0, #0
    2f58:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    2f5c:	add	r4, r4, r6
    2f60:	cmp	r4, r7
    2f64:	blt	2fc4 <coda_mem_cursor_read_char_array+0x228>
    2f68:	cmp	r5, r7
    2f6c:	beq	332c <coda_mem_cursor_read_char_array+0x590>
    2f70:	ldr	r1, [sp, #76]	; 0x4c
    2f74:	add	r2, r8, r1, lsl #2
    2f78:	ldr	r0, [r8, r1, lsl #2]
    2f7c:	cmp	r1, #3
    2f80:	ldr	r2, [r2, #-8]
    2f84:	add	r2, r2, r4
    2f88:	sub	r4, r2, r0
    2f8c:	blt	2fc4 <coda_mem_cursor_read_char_array+0x228>
    2f90:	ldr	r0, [sp, #4]
    2f94:	add	r0, r0, r1, lsl #2
    2f98:	sub	r1, r1, #2
    2f9c:	ldr	r2, [r0]
    2fa0:	cmp	r4, r2
    2fa4:	blt	2fc4 <coda_mem_cursor_read_char_array+0x228>
    2fa8:	ldr	r3, [r0, #-8]
    2fac:	sub	r2, r4, r2
    2fb0:	sub	r1, r1, #1
    2fb4:	sub	r0, r0, #4
    2fb8:	cmp	r1, #0
    2fbc:	add	r4, r3, r2
    2fc0:	bgt	2f9c <coda_mem_cursor_read_char_array+0x200>
    2fc4:	add	r1, sl, r4
    2fc8:	mov	r0, r9
    2fcc:	bl	0 <coda_cursor_read_char>
    2fd0:	cmp	r0, #0
    2fd4:	beq	2f40 <coda_mem_cursor_read_char_array+0x1a4>
    2fd8:	b	3320 <coda_mem_cursor_read_char_array+0x584>
    2fdc:	add	r7, sp, #44	; 0x2c
    2fe0:	add	r1, sp, #76	; 0x4c
    2fe4:	mov	r0, r6
    2fe8:	mov	r2, r7
    2fec:	bl	0 <coda_cursor_get_array_dim>
    2ff0:	cmp	r0, #0
    2ff4:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    2ff8:	add	r0, sp, #80	; 0x50
    2ffc:	mov	r1, r6
    3000:	mov	r2, #520	; 0x208
    3004:	bl	0 <memcpy>
    3008:	ldr	r0, [sp, #76]	; 0x4c
    300c:	cmp	r0, #1
    3010:	blt	3104 <coda_mem_cursor_read_char_array+0x368>
    3014:	cmp	r0, #4
    3018:	bcs	31c8 <coda_mem_cursor_read_char_array+0x42c>
    301c:	mov	r4, #1
    3020:	mov	r1, #0
    3024:	b	31fc <coda_mem_cursor_read_char_array+0x460>
    3028:	add	r5, r5, #1
    302c:	cmp	r5, r7
    3030:	bge	3044 <coda_mem_cursor_read_char_array+0x2a8>
    3034:	mov	r0, r9
    3038:	bl	0 <coda_cursor_goto_next_array_element>
    303c:	cmp	r0, #0
    3040:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    3044:	add	r4, r4, r6
    3048:	cmp	r4, r7
    304c:	blt	30ac <coda_mem_cursor_read_char_array+0x310>
    3050:	cmp	r5, r7
    3054:	beq	332c <coda_mem_cursor_read_char_array+0x590>
    3058:	ldr	r1, [sp, #76]	; 0x4c
    305c:	add	r2, r8, r1, lsl #2
    3060:	ldr	r0, [r8, r1, lsl #2]
    3064:	cmp	r1, #3
    3068:	ldr	r2, [r2, #-8]
    306c:	add	r2, r2, r4
    3070:	sub	r4, r2, r0
    3074:	blt	30ac <coda_mem_cursor_read_char_array+0x310>
    3078:	ldr	r0, [sp, #4]
    307c:	add	r0, r0, r1, lsl #2
    3080:	sub	r1, r1, #2
    3084:	ldr	r2, [r0]
    3088:	cmp	r4, r2
    308c:	blt	30ac <coda_mem_cursor_read_char_array+0x310>
    3090:	ldr	r3, [r0, #-8]
    3094:	sub	r2, r4, r2
    3098:	sub	r1, r1, #1
    309c:	sub	r0, r0, #4
    30a0:	cmp	r1, #0
    30a4:	add	r4, r3, r2
    30a8:	bgt	3084 <coda_mem_cursor_read_char_array+0x2e8>
    30ac:	add	r1, sl, r4
    30b0:	mov	r0, r9
    30b4:	bl	0 <coda_bin_cursor_read_char>
    30b8:	cmp	r0, #0
    30bc:	beq	3028 <coda_mem_cursor_read_char_array+0x28c>
    30c0:	b	3320 <coda_mem_cursor_read_char_array+0x584>
    30c4:	cmp	r0, #1
    30c8:	blt	30fc <coda_mem_cursor_read_char_array+0x360>
    30cc:	cmp	r0, #4
    30d0:	bcs	310c <coda_mem_cursor_read_char_array+0x370>
    30d4:	mov	r4, #1
    30d8:	mov	r1, #0
    30dc:	b	3144 <coda_mem_cursor_read_char_array+0x3a8>
    30e0:	cmp	r0, #1
    30e4:	blt	32a4 <coda_mem_cursor_read_char_array+0x508>
    30e8:	cmp	r0, #4
    30ec:	bcs	32ac <coda_mem_cursor_read_char_array+0x510>
    30f0:	mov	r4, #1
    30f4:	mov	r1, #0
    30f8:	b	32e4 <coda_mem_cursor_read_char_array+0x548>
    30fc:	mov	r4, #1
    3100:	b	3168 <coda_mem_cursor_read_char_array+0x3cc>
    3104:	mov	r4, #1
    3108:	b	3220 <coda_mem_cursor_read_char_array+0x484>
    310c:	bic	r1, r0, #3
    3110:	vmov.i32	q8, #1	; 0x00000001
    3114:	add	r2, sp, #44	; 0x2c
    3118:	mov	r3, r1
    311c:	vld1.32	{d18-d19}, [r2]!
    3120:	subs	r3, r3, #4
    3124:	vmul.i32	q8, q9, q8
    3128:	bne	311c <coda_mem_cursor_read_char_array+0x380>
    312c:	vext.8	q9, q8, q8, #8
    3130:	cmp	r0, r1
    3134:	vmul.i32	q0, q8, q9
    3138:	vmul.i32	q8, q0, d0[1]
    313c:	vmov.32	r4, d16[0]
    3140:	beq	3160 <coda_mem_cursor_read_char_array+0x3c4>
    3144:	add	r2, sp, #44	; 0x2c
    3148:	sub	r0, r0, r1
    314c:	add	r2, r2, r1, lsl #2
    3150:	ldr	r1, [r2], #4
    3154:	subs	r0, r0, #1
    3158:	mul	r4, r1, r4
    315c:	bne	3150 <coda_mem_cursor_read_char_array+0x3b4>
    3160:	cmp	r4, #1
    3164:	blt	332c <coda_mem_cursor_read_char_array+0x590>
    3168:	add	r0, sp, #80	; 0x50
    316c:	mov	r1, #0
    3170:	mov	r6, #0
    3174:	bl	0 <coda_cursor_goto_array_element_by_index>
    3178:	cmp	r0, #0
    317c:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    3180:	sub	r7, r4, #1
    3184:	add	r5, sp, #80	; 0x50
    3188:	add	r1, sl, r6
    318c:	mov	r0, r5
    3190:	bl	0 <coda_cursor_read_char>
    3194:	cmp	r0, #0
    3198:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    319c:	cmp	r6, r7
    31a0:	bge	31b4 <coda_mem_cursor_read_char_array+0x418>
    31a4:	mov	r0, r5
    31a8:	bl	0 <coda_cursor_goto_next_array_element>
    31ac:	cmp	r0, #0
    31b0:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    31b4:	add	r6, r6, #1
    31b8:	mov	r0, #0
    31bc:	cmp	r6, r4
    31c0:	blt	3188 <coda_mem_cursor_read_char_array+0x3ec>
    31c4:	b	3324 <coda_mem_cursor_read_char_array+0x588>
    31c8:	bic	r1, r0, #3
    31cc:	vmov.i32	q8, #1	; 0x00000001
    31d0:	mov	r2, r1
    31d4:	vld1.32	{d18-d19}, [r7]!
    31d8:	subs	r2, r2, #4
    31dc:	vmul.i32	q8, q9, q8
    31e0:	bne	31d4 <coda_mem_cursor_read_char_array+0x438>
    31e4:	vext.8	q9, q8, q8, #8
    31e8:	cmp	r0, r1
    31ec:	vmul.i32	q0, q8, q9
    31f0:	vmul.i32	q8, q0, d0[1]
    31f4:	vmov.32	r4, d16[0]
    31f8:	beq	3218 <coda_mem_cursor_read_char_array+0x47c>
    31fc:	add	r2, sp, #44	; 0x2c
    3200:	sub	r0, r0, r1
    3204:	add	r2, r2, r1, lsl #2
    3208:	ldr	r1, [r2], #4
    320c:	subs	r0, r0, #1
    3210:	mul	r4, r1, r4
    3214:	bne	3208 <coda_mem_cursor_read_char_array+0x46c>
    3218:	cmp	r4, #1
    321c:	blt	3278 <coda_mem_cursor_read_char_array+0x4dc>
    3220:	add	r0, sp, #80	; 0x50
    3224:	mov	r1, #0
    3228:	mov	r7, #0
    322c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3230:	cmp	r0, #0
    3234:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    3238:	sub	r5, r4, #1
    323c:	add	r8, sp, #80	; 0x50
    3240:	add	r1, sl, r7
    3244:	mov	r0, r8
    3248:	bl	0 <coda_ascii_cursor_read_char>
    324c:	cmp	r0, #0
    3250:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    3254:	cmp	r7, r5
    3258:	bge	326c <coda_mem_cursor_read_char_array+0x4d0>
    325c:	mov	r0, r8
    3260:	bl	0 <coda_cursor_goto_next_array_element>
    3264:	cmp	r0, #0
    3268:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    326c:	add	r7, r7, #1
    3270:	cmp	r7, r4
    3274:	blt	3240 <coda_mem_cursor_read_char_array+0x4a4>
    3278:	cmp	r9, #0
    327c:	beq	332c <coda_mem_cursor_read_char_array+0x590>
    3280:	mov	r0, r6
    3284:	mov	r1, sl
    3288:	mov	r2, #1
    328c:	bl	193c <transpose_array>
    3290:	mov	r1, r0
    3294:	mvn	r0, #0
    3298:	cmp	r1, #0
    329c:	bne	3324 <coda_mem_cursor_read_char_array+0x588>
    32a0:	b	332c <coda_mem_cursor_read_char_array+0x590>
    32a4:	mov	r4, #1
    32a8:	b	3308 <coda_mem_cursor_read_char_array+0x56c>
    32ac:	bic	r1, r0, #3
    32b0:	vmov.i32	q8, #1	; 0x00000001
    32b4:	add	r2, sp, #44	; 0x2c
    32b8:	mov	r3, r1
    32bc:	vld1.32	{d18-d19}, [r2]!
    32c0:	subs	r3, r3, #4
    32c4:	vmul.i32	q8, q9, q8
    32c8:	bne	32bc <coda_mem_cursor_read_char_array+0x520>
    32cc:	vext.8	q9, q8, q8, #8
    32d0:	cmp	r0, r1
    32d4:	vmul.i32	q0, q8, q9
    32d8:	vmul.i32	q8, q0, d0[1]
    32dc:	vmov.32	r4, d16[0]
    32e0:	beq	3300 <coda_mem_cursor_read_char_array+0x564>
    32e4:	add	r2, sp, #44	; 0x2c
    32e8:	sub	r0, r0, r1
    32ec:	add	r2, r2, r1, lsl #2
    32f0:	ldr	r1, [r2], #4
    32f4:	subs	r0, r0, #1
    32f8:	mul	r4, r1, r4
    32fc:	bne	32f0 <coda_mem_cursor_read_char_array+0x554>
    3300:	cmp	r4, #1
    3304:	blt	332c <coda_mem_cursor_read_char_array+0x590>
    3308:	add	r0, sp, #80	; 0x50
    330c:	mov	r1, #0
    3310:	mov	r6, #0
    3314:	bl	0 <coda_cursor_goto_array_element_by_index>
    3318:	cmp	r0, #0
    331c:	beq	3338 <coda_mem_cursor_read_char_array+0x59c>
    3320:	mvn	r0, #0
    3324:	sub	sp, fp, #28
    3328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    332c:	mov	r0, #0
    3330:	sub	sp, fp, #28
    3334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3338:	sub	r7, r4, #1
    333c:	add	r5, sp, #80	; 0x50
    3340:	add	r1, sl, r6
    3344:	mov	r0, r5
    3348:	bl	0 <coda_bin_cursor_read_char>
    334c:	cmp	r0, #0
    3350:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    3354:	cmp	r6, r7
    3358:	bge	336c <coda_mem_cursor_read_char_array+0x5d0>
    335c:	mov	r0, r5
    3360:	bl	0 <coda_cursor_goto_next_array_element>
    3364:	cmp	r0, #0
    3368:	bne	3320 <coda_mem_cursor_read_char_array+0x584>
    336c:	add	r6, r6, #1
    3370:	mov	r0, #0
    3374:	cmp	r6, r4
    3378:	blt	3340 <coda_mem_cursor_read_char_array+0x5a4>
    337c:	b	3324 <coda_mem_cursor_read_char_array+0x588>
    3380:	movw	r0, #0
    3384:	movw	r1, #0
    3388:	movw	r3, #0
    338c:	mov	r2, #960	; 0x3c0
    3390:	movt	r0, #0
    3394:	movt	r1, #0
    3398:	movt	r3, #0
    339c:	bl	0 <__assert_fail>
    33a0:	movw	r0, #0
    33a4:	movw	r1, #0
    33a8:	movw	r3, #0
    33ac:	movw	r2, #966	; 0x3c6
    33b0:	movt	r0, #0
    33b4:	movt	r1, #0
    33b8:	movt	r3, #0
    33bc:	bl	0 <__assert_fail>

000033c0 <coda_mem_cursor_read_int8_partial_array>:
    33c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    33c4:	add	fp, sp, #24
    33c8:	sub	sp, sp, #528	; 0x210
    33cc:	mov	r6, r1
    33d0:	mov	r1, r0
    33d4:	ldr	r0, [r0, #4]
    33d8:	mov	r5, r2
    33dc:	mov	r9, r3
    33e0:	add	r0, r1, r0, lsl #4
    33e4:	ldr	r0, [r0, #-8]
    33e8:	ldr	r2, [r0, #8]
    33ec:	cmp	r2, #2
    33f0:	beq	3470 <coda_mem_cursor_read_int8_partial_array+0xb0>
    33f4:	cmp	r2, #1
    33f8:	bne	3580 <coda_mem_cursor_read_int8_partial_array+0x1c0>
    33fc:	mov	r0, sp
    3400:	mov	r2, #520	; 0x208
    3404:	bl	0 <memcpy>
    3408:	cmp	r5, #1
    340c:	blt	3570 <coda_mem_cursor_read_int8_partial_array+0x1b0>
    3410:	mov	r0, sp
    3414:	mov	r1, r6
    3418:	bl	0 <coda_cursor_goto_array_element_by_index>
    341c:	mvn	r8, #0
    3420:	cmp	r0, #0
    3424:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    3428:	sub	r6, r5, #1
    342c:	mov	r4, #0
    3430:	mov	r7, sp
    3434:	add	r1, r9, r4
    3438:	mov	r0, r7
    343c:	bl	0 <coda_cursor_read_int8>
    3440:	cmp	r0, #0
    3444:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    3448:	cmp	r4, r6
    344c:	bge	3460 <coda_mem_cursor_read_int8_partial_array+0xa0>
    3450:	mov	r0, r7
    3454:	bl	0 <coda_cursor_goto_next_array_element>
    3458:	cmp	r0, #0
    345c:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    3460:	add	r4, r4, #1
    3464:	cmp	r4, r5
    3468:	blt	3434 <coda_mem_cursor_read_int8_partial_array+0x74>
    346c:	b	3570 <coda_mem_cursor_read_int8_partial_array+0x1b0>
    3470:	ldr	r0, [r0, #4]
    3474:	ldr	r0, [r0, #40]	; 0x28
    3478:	ldr	r0, [r0]
    347c:	cmp	r0, #0
    3480:	beq	3500 <coda_mem_cursor_read_int8_partial_array+0x140>
    3484:	cmp	r0, #1
    3488:	bne	35a0 <coda_mem_cursor_read_int8_partial_array+0x1e0>
    348c:	mov	r0, sp
    3490:	mov	r2, #520	; 0x208
    3494:	bl	0 <memcpy>
    3498:	cmp	r5, #1
    349c:	blt	3570 <coda_mem_cursor_read_int8_partial_array+0x1b0>
    34a0:	mov	r0, sp
    34a4:	mov	r1, r6
    34a8:	bl	0 <coda_cursor_goto_array_element_by_index>
    34ac:	mvn	r8, #0
    34b0:	cmp	r0, #0
    34b4:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    34b8:	sub	r6, r5, #1
    34bc:	mov	r4, #0
    34c0:	mov	r7, sp
    34c4:	add	r1, r9, r4
    34c8:	mov	r0, r7
    34cc:	bl	0 <coda_bin_cursor_read_int8>
    34d0:	cmp	r0, #0
    34d4:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    34d8:	cmp	r4, r6
    34dc:	bge	34f0 <coda_mem_cursor_read_int8_partial_array+0x130>
    34e0:	mov	r0, r7
    34e4:	bl	0 <coda_cursor_goto_next_array_element>
    34e8:	cmp	r0, #0
    34ec:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    34f0:	add	r4, r4, #1
    34f4:	cmp	r4, r5
    34f8:	blt	34c4 <coda_mem_cursor_read_int8_partial_array+0x104>
    34fc:	b	3570 <coda_mem_cursor_read_int8_partial_array+0x1b0>
    3500:	mov	r0, sp
    3504:	mov	r2, #520	; 0x208
    3508:	bl	0 <memcpy>
    350c:	cmp	r5, #1
    3510:	blt	3570 <coda_mem_cursor_read_int8_partial_array+0x1b0>
    3514:	mov	r0, sp
    3518:	mov	r1, r6
    351c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3520:	mvn	r8, #0
    3524:	cmp	r0, #0
    3528:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    352c:	sub	r6, r5, #1
    3530:	mov	r4, #0
    3534:	mov	r7, sp
    3538:	add	r1, r9, r4
    353c:	mov	r0, r7
    3540:	bl	0 <coda_ascii_cursor_read_int8>
    3544:	cmp	r0, #0
    3548:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    354c:	cmp	r4, r6
    3550:	bge	3564 <coda_mem_cursor_read_int8_partial_array+0x1a4>
    3554:	mov	r0, r7
    3558:	bl	0 <coda_cursor_goto_next_array_element>
    355c:	cmp	r0, #0
    3560:	bne	3574 <coda_mem_cursor_read_int8_partial_array+0x1b4>
    3564:	add	r4, r4, #1
    3568:	cmp	r4, r5
    356c:	blt	3538 <coda_mem_cursor_read_int8_partial_array+0x178>
    3570:	mov	r8, #0
    3574:	mov	r0, r8
    3578:	sub	sp, fp, #24
    357c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3580:	movw	r0, #0
    3584:	movw	r1, #0
    3588:	movw	r3, #0
    358c:	movw	r2, #991	; 0x3df
    3590:	movt	r0, #0
    3594:	movt	r1, #0
    3598:	movt	r3, #0
    359c:	bl	0 <__assert_fail>
    35a0:	movw	r0, #0
    35a4:	movw	r1, #0
    35a8:	movw	r3, #0
    35ac:	movw	r2, #997	; 0x3e5
    35b0:	movt	r0, #0
    35b4:	movt	r1, #0
    35b8:	movt	r3, #0
    35bc:	bl	0 <__assert_fail>

000035c0 <coda_mem_cursor_read_uint8_partial_array>:
    35c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    35c4:	add	fp, sp, #24
    35c8:	sub	sp, sp, #528	; 0x210
    35cc:	mov	r6, r1
    35d0:	mov	r1, r0
    35d4:	ldr	r0, [r0, #4]
    35d8:	mov	r5, r2
    35dc:	mov	r9, r3
    35e0:	add	r0, r1, r0, lsl #4
    35e4:	ldr	r0, [r0, #-8]
    35e8:	ldr	r2, [r0, #8]
    35ec:	cmp	r2, #2
    35f0:	beq	3670 <coda_mem_cursor_read_uint8_partial_array+0xb0>
    35f4:	cmp	r2, #1
    35f8:	bne	3780 <coda_mem_cursor_read_uint8_partial_array+0x1c0>
    35fc:	mov	r0, sp
    3600:	mov	r2, #520	; 0x208
    3604:	bl	0 <memcpy>
    3608:	cmp	r5, #1
    360c:	blt	3770 <coda_mem_cursor_read_uint8_partial_array+0x1b0>
    3610:	mov	r0, sp
    3614:	mov	r1, r6
    3618:	bl	0 <coda_cursor_goto_array_element_by_index>
    361c:	mvn	r8, #0
    3620:	cmp	r0, #0
    3624:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    3628:	sub	r6, r5, #1
    362c:	mov	r4, #0
    3630:	mov	r7, sp
    3634:	add	r1, r9, r4
    3638:	mov	r0, r7
    363c:	bl	0 <coda_cursor_read_uint8>
    3640:	cmp	r0, #0
    3644:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    3648:	cmp	r4, r6
    364c:	bge	3660 <coda_mem_cursor_read_uint8_partial_array+0xa0>
    3650:	mov	r0, r7
    3654:	bl	0 <coda_cursor_goto_next_array_element>
    3658:	cmp	r0, #0
    365c:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    3660:	add	r4, r4, #1
    3664:	cmp	r4, r5
    3668:	blt	3634 <coda_mem_cursor_read_uint8_partial_array+0x74>
    366c:	b	3770 <coda_mem_cursor_read_uint8_partial_array+0x1b0>
    3670:	ldr	r0, [r0, #4]
    3674:	ldr	r0, [r0, #40]	; 0x28
    3678:	ldr	r0, [r0]
    367c:	cmp	r0, #0
    3680:	beq	3700 <coda_mem_cursor_read_uint8_partial_array+0x140>
    3684:	cmp	r0, #1
    3688:	bne	37a0 <coda_mem_cursor_read_uint8_partial_array+0x1e0>
    368c:	mov	r0, sp
    3690:	mov	r2, #520	; 0x208
    3694:	bl	0 <memcpy>
    3698:	cmp	r5, #1
    369c:	blt	3770 <coda_mem_cursor_read_uint8_partial_array+0x1b0>
    36a0:	mov	r0, sp
    36a4:	mov	r1, r6
    36a8:	bl	0 <coda_cursor_goto_array_element_by_index>
    36ac:	mvn	r8, #0
    36b0:	cmp	r0, #0
    36b4:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    36b8:	sub	r6, r5, #1
    36bc:	mov	r4, #0
    36c0:	mov	r7, sp
    36c4:	add	r1, r9, r4
    36c8:	mov	r0, r7
    36cc:	bl	0 <coda_bin_cursor_read_uint8>
    36d0:	cmp	r0, #0
    36d4:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    36d8:	cmp	r4, r6
    36dc:	bge	36f0 <coda_mem_cursor_read_uint8_partial_array+0x130>
    36e0:	mov	r0, r7
    36e4:	bl	0 <coda_cursor_goto_next_array_element>
    36e8:	cmp	r0, #0
    36ec:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    36f0:	add	r4, r4, #1
    36f4:	cmp	r4, r5
    36f8:	blt	36c4 <coda_mem_cursor_read_uint8_partial_array+0x104>
    36fc:	b	3770 <coda_mem_cursor_read_uint8_partial_array+0x1b0>
    3700:	mov	r0, sp
    3704:	mov	r2, #520	; 0x208
    3708:	bl	0 <memcpy>
    370c:	cmp	r5, #1
    3710:	blt	3770 <coda_mem_cursor_read_uint8_partial_array+0x1b0>
    3714:	mov	r0, sp
    3718:	mov	r1, r6
    371c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3720:	mvn	r8, #0
    3724:	cmp	r0, #0
    3728:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    372c:	sub	r6, r5, #1
    3730:	mov	r4, #0
    3734:	mov	r7, sp
    3738:	add	r1, r9, r4
    373c:	mov	r0, r7
    3740:	bl	0 <coda_ascii_cursor_read_uint8>
    3744:	cmp	r0, #0
    3748:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    374c:	cmp	r4, r6
    3750:	bge	3764 <coda_mem_cursor_read_uint8_partial_array+0x1a4>
    3754:	mov	r0, r7
    3758:	bl	0 <coda_cursor_goto_next_array_element>
    375c:	cmp	r0, #0
    3760:	bne	3774 <coda_mem_cursor_read_uint8_partial_array+0x1b4>
    3764:	add	r4, r4, #1
    3768:	cmp	r4, r5
    376c:	blt	3738 <coda_mem_cursor_read_uint8_partial_array+0x178>
    3770:	mov	r8, #0
    3774:	mov	r0, r8
    3778:	sub	sp, fp, #24
    377c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3780:	movw	r0, #0
    3784:	movw	r1, #0
    3788:	movw	r3, #0
    378c:	movw	r2, #1011	; 0x3f3
    3790:	movt	r0, #0
    3794:	movt	r1, #0
    3798:	movt	r3, #0
    379c:	bl	0 <__assert_fail>
    37a0:	movw	r0, #0
    37a4:	movw	r1, #0
    37a8:	movw	r3, #0
    37ac:	movw	r2, #1017	; 0x3f9
    37b0:	movt	r0, #0
    37b4:	movt	r1, #0
    37b8:	movt	r3, #0
    37bc:	bl	0 <__assert_fail>

000037c0 <coda_mem_cursor_read_int16_partial_array>:
    37c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    37c4:	add	fp, sp, #24
    37c8:	sub	sp, sp, #528	; 0x210
    37cc:	mov	r6, r1
    37d0:	mov	r1, r0
    37d4:	ldr	r0, [r0, #4]
    37d8:	mov	r5, r2
    37dc:	mov	r4, r3
    37e0:	add	r0, r1, r0, lsl #4
    37e4:	ldr	r0, [r0, #-8]
    37e8:	ldr	r2, [r0, #8]
    37ec:	cmp	r2, #2
    37f0:	beq	3874 <coda_mem_cursor_read_int16_partial_array+0xb4>
    37f4:	cmp	r2, #1
    37f8:	bne	398c <coda_mem_cursor_read_int16_partial_array+0x1cc>
    37fc:	mov	r0, sp
    3800:	mov	r2, #520	; 0x208
    3804:	bl	0 <memcpy>
    3808:	cmp	r5, #1
    380c:	blt	397c <coda_mem_cursor_read_int16_partial_array+0x1bc>
    3810:	mov	r0, sp
    3814:	mov	r1, r6
    3818:	bl	0 <coda_cursor_goto_array_element_by_index>
    381c:	mvn	r8, #0
    3820:	cmp	r0, #0
    3824:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    3828:	sub	r6, r5, #1
    382c:	mov	r7, #0
    3830:	mov	r9, sp
    3834:	mov	r0, r9
    3838:	mov	r1, r4
    383c:	bl	0 <coda_cursor_read_int16>
    3840:	cmp	r0, #0
    3844:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    3848:	cmp	r7, r6
    384c:	bge	3860 <coda_mem_cursor_read_int16_partial_array+0xa0>
    3850:	mov	r0, r9
    3854:	bl	0 <coda_cursor_goto_next_array_element>
    3858:	cmp	r0, #0
    385c:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    3860:	add	r7, r7, #1
    3864:	add	r4, r4, #2
    3868:	cmp	r7, r5
    386c:	blt	3834 <coda_mem_cursor_read_int16_partial_array+0x74>
    3870:	b	397c <coda_mem_cursor_read_int16_partial_array+0x1bc>
    3874:	ldr	r0, [r0, #4]
    3878:	ldr	r0, [r0, #40]	; 0x28
    387c:	ldr	r0, [r0]
    3880:	cmp	r0, #0
    3884:	beq	3908 <coda_mem_cursor_read_int16_partial_array+0x148>
    3888:	cmp	r0, #1
    388c:	bne	39ac <coda_mem_cursor_read_int16_partial_array+0x1ec>
    3890:	mov	r0, sp
    3894:	mov	r2, #520	; 0x208
    3898:	bl	0 <memcpy>
    389c:	cmp	r5, #1
    38a0:	blt	397c <coda_mem_cursor_read_int16_partial_array+0x1bc>
    38a4:	mov	r0, sp
    38a8:	mov	r1, r6
    38ac:	bl	0 <coda_cursor_goto_array_element_by_index>
    38b0:	mvn	r8, #0
    38b4:	cmp	r0, #0
    38b8:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    38bc:	sub	r6, r5, #1
    38c0:	mov	r7, #0
    38c4:	mov	r9, sp
    38c8:	mov	r0, r9
    38cc:	mov	r1, r4
    38d0:	bl	0 <coda_bin_cursor_read_int16>
    38d4:	cmp	r0, #0
    38d8:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    38dc:	cmp	r7, r6
    38e0:	bge	38f4 <coda_mem_cursor_read_int16_partial_array+0x134>
    38e4:	mov	r0, r9
    38e8:	bl	0 <coda_cursor_goto_next_array_element>
    38ec:	cmp	r0, #0
    38f0:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    38f4:	add	r7, r7, #1
    38f8:	add	r4, r4, #2
    38fc:	cmp	r7, r5
    3900:	blt	38c8 <coda_mem_cursor_read_int16_partial_array+0x108>
    3904:	b	397c <coda_mem_cursor_read_int16_partial_array+0x1bc>
    3908:	mov	r0, sp
    390c:	mov	r2, #520	; 0x208
    3910:	bl	0 <memcpy>
    3914:	cmp	r5, #1
    3918:	blt	397c <coda_mem_cursor_read_int16_partial_array+0x1bc>
    391c:	mov	r0, sp
    3920:	mov	r1, r6
    3924:	bl	0 <coda_cursor_goto_array_element_by_index>
    3928:	mvn	r8, #0
    392c:	cmp	r0, #0
    3930:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    3934:	sub	r6, r5, #1
    3938:	mov	r7, #0
    393c:	mov	r9, sp
    3940:	mov	r0, r9
    3944:	mov	r1, r4
    3948:	bl	0 <coda_ascii_cursor_read_int16>
    394c:	cmp	r0, #0
    3950:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    3954:	cmp	r7, r6
    3958:	bge	396c <coda_mem_cursor_read_int16_partial_array+0x1ac>
    395c:	mov	r0, r9
    3960:	bl	0 <coda_cursor_goto_next_array_element>
    3964:	cmp	r0, #0
    3968:	bne	3980 <coda_mem_cursor_read_int16_partial_array+0x1c0>
    396c:	add	r7, r7, #1
    3970:	add	r4, r4, #2
    3974:	cmp	r7, r5
    3978:	blt	3940 <coda_mem_cursor_read_int16_partial_array+0x180>
    397c:	mov	r8, #0
    3980:	mov	r0, r8
    3984:	sub	sp, fp, #24
    3988:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    398c:	movw	r0, #0
    3990:	movw	r1, #0
    3994:	movw	r3, #0
    3998:	movw	r2, #1031	; 0x407
    399c:	movt	r0, #0
    39a0:	movt	r1, #0
    39a4:	movt	r3, #0
    39a8:	bl	0 <__assert_fail>
    39ac:	movw	r0, #0
    39b0:	movw	r1, #0
    39b4:	movw	r3, #0
    39b8:	movw	r2, #1037	; 0x40d
    39bc:	movt	r0, #0
    39c0:	movt	r1, #0
    39c4:	movt	r3, #0
    39c8:	bl	0 <__assert_fail>

000039cc <coda_mem_cursor_read_uint16_partial_array>:
    39cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    39d0:	add	fp, sp, #24
    39d4:	sub	sp, sp, #528	; 0x210
    39d8:	mov	r6, r1
    39dc:	mov	r1, r0
    39e0:	ldr	r0, [r0, #4]
    39e4:	mov	r5, r2
    39e8:	mov	r4, r3
    39ec:	add	r0, r1, r0, lsl #4
    39f0:	ldr	r0, [r0, #-8]
    39f4:	ldr	r2, [r0, #8]
    39f8:	cmp	r2, #2
    39fc:	beq	3a80 <coda_mem_cursor_read_uint16_partial_array+0xb4>
    3a00:	cmp	r2, #1
    3a04:	bne	3b98 <coda_mem_cursor_read_uint16_partial_array+0x1cc>
    3a08:	mov	r0, sp
    3a0c:	mov	r2, #520	; 0x208
    3a10:	bl	0 <memcpy>
    3a14:	cmp	r5, #1
    3a18:	blt	3b88 <coda_mem_cursor_read_uint16_partial_array+0x1bc>
    3a1c:	mov	r0, sp
    3a20:	mov	r1, r6
    3a24:	bl	0 <coda_cursor_goto_array_element_by_index>
    3a28:	mvn	r8, #0
    3a2c:	cmp	r0, #0
    3a30:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3a34:	sub	r6, r5, #1
    3a38:	mov	r7, #0
    3a3c:	mov	r9, sp
    3a40:	mov	r0, r9
    3a44:	mov	r1, r4
    3a48:	bl	0 <coda_cursor_read_uint16>
    3a4c:	cmp	r0, #0
    3a50:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3a54:	cmp	r7, r6
    3a58:	bge	3a6c <coda_mem_cursor_read_uint16_partial_array+0xa0>
    3a5c:	mov	r0, r9
    3a60:	bl	0 <coda_cursor_goto_next_array_element>
    3a64:	cmp	r0, #0
    3a68:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3a6c:	add	r7, r7, #1
    3a70:	add	r4, r4, #2
    3a74:	cmp	r7, r5
    3a78:	blt	3a40 <coda_mem_cursor_read_uint16_partial_array+0x74>
    3a7c:	b	3b88 <coda_mem_cursor_read_uint16_partial_array+0x1bc>
    3a80:	ldr	r0, [r0, #4]
    3a84:	ldr	r0, [r0, #40]	; 0x28
    3a88:	ldr	r0, [r0]
    3a8c:	cmp	r0, #0
    3a90:	beq	3b14 <coda_mem_cursor_read_uint16_partial_array+0x148>
    3a94:	cmp	r0, #1
    3a98:	bne	3bb8 <coda_mem_cursor_read_uint16_partial_array+0x1ec>
    3a9c:	mov	r0, sp
    3aa0:	mov	r2, #520	; 0x208
    3aa4:	bl	0 <memcpy>
    3aa8:	cmp	r5, #1
    3aac:	blt	3b88 <coda_mem_cursor_read_uint16_partial_array+0x1bc>
    3ab0:	mov	r0, sp
    3ab4:	mov	r1, r6
    3ab8:	bl	0 <coda_cursor_goto_array_element_by_index>
    3abc:	mvn	r8, #0
    3ac0:	cmp	r0, #0
    3ac4:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3ac8:	sub	r6, r5, #1
    3acc:	mov	r7, #0
    3ad0:	mov	r9, sp
    3ad4:	mov	r0, r9
    3ad8:	mov	r1, r4
    3adc:	bl	0 <coda_bin_cursor_read_uint16>
    3ae0:	cmp	r0, #0
    3ae4:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3ae8:	cmp	r7, r6
    3aec:	bge	3b00 <coda_mem_cursor_read_uint16_partial_array+0x134>
    3af0:	mov	r0, r9
    3af4:	bl	0 <coda_cursor_goto_next_array_element>
    3af8:	cmp	r0, #0
    3afc:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3b00:	add	r7, r7, #1
    3b04:	add	r4, r4, #2
    3b08:	cmp	r7, r5
    3b0c:	blt	3ad4 <coda_mem_cursor_read_uint16_partial_array+0x108>
    3b10:	b	3b88 <coda_mem_cursor_read_uint16_partial_array+0x1bc>
    3b14:	mov	r0, sp
    3b18:	mov	r2, #520	; 0x208
    3b1c:	bl	0 <memcpy>
    3b20:	cmp	r5, #1
    3b24:	blt	3b88 <coda_mem_cursor_read_uint16_partial_array+0x1bc>
    3b28:	mov	r0, sp
    3b2c:	mov	r1, r6
    3b30:	bl	0 <coda_cursor_goto_array_element_by_index>
    3b34:	mvn	r8, #0
    3b38:	cmp	r0, #0
    3b3c:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3b40:	sub	r6, r5, #1
    3b44:	mov	r7, #0
    3b48:	mov	r9, sp
    3b4c:	mov	r0, r9
    3b50:	mov	r1, r4
    3b54:	bl	0 <coda_ascii_cursor_read_uint16>
    3b58:	cmp	r0, #0
    3b5c:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3b60:	cmp	r7, r6
    3b64:	bge	3b78 <coda_mem_cursor_read_uint16_partial_array+0x1ac>
    3b68:	mov	r0, r9
    3b6c:	bl	0 <coda_cursor_goto_next_array_element>
    3b70:	cmp	r0, #0
    3b74:	bne	3b8c <coda_mem_cursor_read_uint16_partial_array+0x1c0>
    3b78:	add	r7, r7, #1
    3b7c:	add	r4, r4, #2
    3b80:	cmp	r7, r5
    3b84:	blt	3b4c <coda_mem_cursor_read_uint16_partial_array+0x180>
    3b88:	mov	r8, #0
    3b8c:	mov	r0, r8
    3b90:	sub	sp, fp, #24
    3b94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3b98:	movw	r0, #0
    3b9c:	movw	r1, #0
    3ba0:	movw	r3, #0
    3ba4:	movw	r2, #1051	; 0x41b
    3ba8:	movt	r0, #0
    3bac:	movt	r1, #0
    3bb0:	movt	r3, #0
    3bb4:	bl	0 <__assert_fail>
    3bb8:	movw	r0, #0
    3bbc:	movw	r1, #0
    3bc0:	movw	r3, #0
    3bc4:	movw	r2, #1057	; 0x421
    3bc8:	movt	r0, #0
    3bcc:	movt	r1, #0
    3bd0:	movt	r3, #0
    3bd4:	bl	0 <__assert_fail>

00003bd8 <coda_mem_cursor_read_int32_partial_array>:
    3bd8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3bdc:	add	fp, sp, #24
    3be0:	sub	sp, sp, #528	; 0x210
    3be4:	mov	r6, r1
    3be8:	mov	r1, r0
    3bec:	ldr	r0, [r0, #4]
    3bf0:	mov	r5, r2
    3bf4:	mov	r4, r3
    3bf8:	add	r0, r1, r0, lsl #4
    3bfc:	ldr	r0, [r0, #-8]
    3c00:	ldr	r2, [r0, #8]
    3c04:	cmp	r2, #2
    3c08:	beq	3c8c <coda_mem_cursor_read_int32_partial_array+0xb4>
    3c0c:	cmp	r2, #1
    3c10:	bne	3da4 <coda_mem_cursor_read_int32_partial_array+0x1cc>
    3c14:	mov	r0, sp
    3c18:	mov	r2, #520	; 0x208
    3c1c:	bl	0 <memcpy>
    3c20:	cmp	r5, #1
    3c24:	blt	3d94 <coda_mem_cursor_read_int32_partial_array+0x1bc>
    3c28:	mov	r0, sp
    3c2c:	mov	r1, r6
    3c30:	bl	0 <coda_cursor_goto_array_element_by_index>
    3c34:	mvn	r8, #0
    3c38:	cmp	r0, #0
    3c3c:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3c40:	sub	r6, r5, #1
    3c44:	mov	r7, #0
    3c48:	mov	r9, sp
    3c4c:	mov	r0, r9
    3c50:	mov	r1, r4
    3c54:	bl	0 <coda_cursor_read_int32>
    3c58:	cmp	r0, #0
    3c5c:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3c60:	cmp	r7, r6
    3c64:	bge	3c78 <coda_mem_cursor_read_int32_partial_array+0xa0>
    3c68:	mov	r0, r9
    3c6c:	bl	0 <coda_cursor_goto_next_array_element>
    3c70:	cmp	r0, #0
    3c74:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3c78:	add	r7, r7, #1
    3c7c:	add	r4, r4, #4
    3c80:	cmp	r7, r5
    3c84:	blt	3c4c <coda_mem_cursor_read_int32_partial_array+0x74>
    3c88:	b	3d94 <coda_mem_cursor_read_int32_partial_array+0x1bc>
    3c8c:	ldr	r0, [r0, #4]
    3c90:	ldr	r0, [r0, #40]	; 0x28
    3c94:	ldr	r0, [r0]
    3c98:	cmp	r0, #0
    3c9c:	beq	3d20 <coda_mem_cursor_read_int32_partial_array+0x148>
    3ca0:	cmp	r0, #1
    3ca4:	bne	3dc4 <coda_mem_cursor_read_int32_partial_array+0x1ec>
    3ca8:	mov	r0, sp
    3cac:	mov	r2, #520	; 0x208
    3cb0:	bl	0 <memcpy>
    3cb4:	cmp	r5, #1
    3cb8:	blt	3d94 <coda_mem_cursor_read_int32_partial_array+0x1bc>
    3cbc:	mov	r0, sp
    3cc0:	mov	r1, r6
    3cc4:	bl	0 <coda_cursor_goto_array_element_by_index>
    3cc8:	mvn	r8, #0
    3ccc:	cmp	r0, #0
    3cd0:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3cd4:	sub	r6, r5, #1
    3cd8:	mov	r7, #0
    3cdc:	mov	r9, sp
    3ce0:	mov	r0, r9
    3ce4:	mov	r1, r4
    3ce8:	bl	0 <coda_bin_cursor_read_int32>
    3cec:	cmp	r0, #0
    3cf0:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3cf4:	cmp	r7, r6
    3cf8:	bge	3d0c <coda_mem_cursor_read_int32_partial_array+0x134>
    3cfc:	mov	r0, r9
    3d00:	bl	0 <coda_cursor_goto_next_array_element>
    3d04:	cmp	r0, #0
    3d08:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3d0c:	add	r7, r7, #1
    3d10:	add	r4, r4, #4
    3d14:	cmp	r7, r5
    3d18:	blt	3ce0 <coda_mem_cursor_read_int32_partial_array+0x108>
    3d1c:	b	3d94 <coda_mem_cursor_read_int32_partial_array+0x1bc>
    3d20:	mov	r0, sp
    3d24:	mov	r2, #520	; 0x208
    3d28:	bl	0 <memcpy>
    3d2c:	cmp	r5, #1
    3d30:	blt	3d94 <coda_mem_cursor_read_int32_partial_array+0x1bc>
    3d34:	mov	r0, sp
    3d38:	mov	r1, r6
    3d3c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3d40:	mvn	r8, #0
    3d44:	cmp	r0, #0
    3d48:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3d4c:	sub	r6, r5, #1
    3d50:	mov	r7, #0
    3d54:	mov	r9, sp
    3d58:	mov	r0, r9
    3d5c:	mov	r1, r4
    3d60:	bl	0 <coda_ascii_cursor_read_int32>
    3d64:	cmp	r0, #0
    3d68:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3d6c:	cmp	r7, r6
    3d70:	bge	3d84 <coda_mem_cursor_read_int32_partial_array+0x1ac>
    3d74:	mov	r0, r9
    3d78:	bl	0 <coda_cursor_goto_next_array_element>
    3d7c:	cmp	r0, #0
    3d80:	bne	3d98 <coda_mem_cursor_read_int32_partial_array+0x1c0>
    3d84:	add	r7, r7, #1
    3d88:	add	r4, r4, #4
    3d8c:	cmp	r7, r5
    3d90:	blt	3d58 <coda_mem_cursor_read_int32_partial_array+0x180>
    3d94:	mov	r8, #0
    3d98:	mov	r0, r8
    3d9c:	sub	sp, fp, #24
    3da0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3da4:	movw	r0, #0
    3da8:	movw	r1, #0
    3dac:	movw	r3, #0
    3db0:	movw	r2, #1071	; 0x42f
    3db4:	movt	r0, #0
    3db8:	movt	r1, #0
    3dbc:	movt	r3, #0
    3dc0:	bl	0 <__assert_fail>
    3dc4:	movw	r0, #0
    3dc8:	movw	r1, #0
    3dcc:	movw	r3, #0
    3dd0:	movw	r2, #1077	; 0x435
    3dd4:	movt	r0, #0
    3dd8:	movt	r1, #0
    3ddc:	movt	r3, #0
    3de0:	bl	0 <__assert_fail>

00003de4 <coda_mem_cursor_read_uint32_partial_array>:
    3de4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3de8:	add	fp, sp, #24
    3dec:	sub	sp, sp, #528	; 0x210
    3df0:	mov	r6, r1
    3df4:	mov	r1, r0
    3df8:	ldr	r0, [r0, #4]
    3dfc:	mov	r5, r2
    3e00:	mov	r4, r3
    3e04:	add	r0, r1, r0, lsl #4
    3e08:	ldr	r0, [r0, #-8]
    3e0c:	ldr	r2, [r0, #8]
    3e10:	cmp	r2, #2
    3e14:	beq	3e98 <coda_mem_cursor_read_uint32_partial_array+0xb4>
    3e18:	cmp	r2, #1
    3e1c:	bne	3fb0 <coda_mem_cursor_read_uint32_partial_array+0x1cc>
    3e20:	mov	r0, sp
    3e24:	mov	r2, #520	; 0x208
    3e28:	bl	0 <memcpy>
    3e2c:	cmp	r5, #1
    3e30:	blt	3fa0 <coda_mem_cursor_read_uint32_partial_array+0x1bc>
    3e34:	mov	r0, sp
    3e38:	mov	r1, r6
    3e3c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3e40:	mvn	r8, #0
    3e44:	cmp	r0, #0
    3e48:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3e4c:	sub	r6, r5, #1
    3e50:	mov	r7, #0
    3e54:	mov	r9, sp
    3e58:	mov	r0, r9
    3e5c:	mov	r1, r4
    3e60:	bl	0 <coda_cursor_read_uint32>
    3e64:	cmp	r0, #0
    3e68:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3e6c:	cmp	r7, r6
    3e70:	bge	3e84 <coda_mem_cursor_read_uint32_partial_array+0xa0>
    3e74:	mov	r0, r9
    3e78:	bl	0 <coda_cursor_goto_next_array_element>
    3e7c:	cmp	r0, #0
    3e80:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3e84:	add	r7, r7, #1
    3e88:	add	r4, r4, #4
    3e8c:	cmp	r7, r5
    3e90:	blt	3e58 <coda_mem_cursor_read_uint32_partial_array+0x74>
    3e94:	b	3fa0 <coda_mem_cursor_read_uint32_partial_array+0x1bc>
    3e98:	ldr	r0, [r0, #4]
    3e9c:	ldr	r0, [r0, #40]	; 0x28
    3ea0:	ldr	r0, [r0]
    3ea4:	cmp	r0, #0
    3ea8:	beq	3f2c <coda_mem_cursor_read_uint32_partial_array+0x148>
    3eac:	cmp	r0, #1
    3eb0:	bne	3fd0 <coda_mem_cursor_read_uint32_partial_array+0x1ec>
    3eb4:	mov	r0, sp
    3eb8:	mov	r2, #520	; 0x208
    3ebc:	bl	0 <memcpy>
    3ec0:	cmp	r5, #1
    3ec4:	blt	3fa0 <coda_mem_cursor_read_uint32_partial_array+0x1bc>
    3ec8:	mov	r0, sp
    3ecc:	mov	r1, r6
    3ed0:	bl	0 <coda_cursor_goto_array_element_by_index>
    3ed4:	mvn	r8, #0
    3ed8:	cmp	r0, #0
    3edc:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3ee0:	sub	r6, r5, #1
    3ee4:	mov	r7, #0
    3ee8:	mov	r9, sp
    3eec:	mov	r0, r9
    3ef0:	mov	r1, r4
    3ef4:	bl	0 <coda_bin_cursor_read_uint32>
    3ef8:	cmp	r0, #0
    3efc:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3f00:	cmp	r7, r6
    3f04:	bge	3f18 <coda_mem_cursor_read_uint32_partial_array+0x134>
    3f08:	mov	r0, r9
    3f0c:	bl	0 <coda_cursor_goto_next_array_element>
    3f10:	cmp	r0, #0
    3f14:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3f18:	add	r7, r7, #1
    3f1c:	add	r4, r4, #4
    3f20:	cmp	r7, r5
    3f24:	blt	3eec <coda_mem_cursor_read_uint32_partial_array+0x108>
    3f28:	b	3fa0 <coda_mem_cursor_read_uint32_partial_array+0x1bc>
    3f2c:	mov	r0, sp
    3f30:	mov	r2, #520	; 0x208
    3f34:	bl	0 <memcpy>
    3f38:	cmp	r5, #1
    3f3c:	blt	3fa0 <coda_mem_cursor_read_uint32_partial_array+0x1bc>
    3f40:	mov	r0, sp
    3f44:	mov	r1, r6
    3f48:	bl	0 <coda_cursor_goto_array_element_by_index>
    3f4c:	mvn	r8, #0
    3f50:	cmp	r0, #0
    3f54:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3f58:	sub	r6, r5, #1
    3f5c:	mov	r7, #0
    3f60:	mov	r9, sp
    3f64:	mov	r0, r9
    3f68:	mov	r1, r4
    3f6c:	bl	0 <coda_ascii_cursor_read_uint32>
    3f70:	cmp	r0, #0
    3f74:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3f78:	cmp	r7, r6
    3f7c:	bge	3f90 <coda_mem_cursor_read_uint32_partial_array+0x1ac>
    3f80:	mov	r0, r9
    3f84:	bl	0 <coda_cursor_goto_next_array_element>
    3f88:	cmp	r0, #0
    3f8c:	bne	3fa4 <coda_mem_cursor_read_uint32_partial_array+0x1c0>
    3f90:	add	r7, r7, #1
    3f94:	add	r4, r4, #4
    3f98:	cmp	r7, r5
    3f9c:	blt	3f64 <coda_mem_cursor_read_uint32_partial_array+0x180>
    3fa0:	mov	r8, #0
    3fa4:	mov	r0, r8
    3fa8:	sub	sp, fp, #24
    3fac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3fb0:	movw	r0, #0
    3fb4:	movw	r1, #0
    3fb8:	movw	r3, #0
    3fbc:	movw	r2, #1091	; 0x443
    3fc0:	movt	r0, #0
    3fc4:	movt	r1, #0
    3fc8:	movt	r3, #0
    3fcc:	bl	0 <__assert_fail>
    3fd0:	movw	r0, #0
    3fd4:	movw	r1, #0
    3fd8:	movw	r3, #0
    3fdc:	movw	r2, #1097	; 0x449
    3fe0:	movt	r0, #0
    3fe4:	movt	r1, #0
    3fe8:	movt	r3, #0
    3fec:	bl	0 <__assert_fail>

00003ff0 <coda_mem_cursor_read_int64_partial_array>:
    3ff0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3ff4:	add	fp, sp, #24
    3ff8:	sub	sp, sp, #528	; 0x210
    3ffc:	mov	r6, r1
    4000:	mov	r1, r0
    4004:	ldr	r0, [r0, #4]
    4008:	mov	r5, r2
    400c:	mov	r4, r3
    4010:	add	r0, r1, r0, lsl #4
    4014:	ldr	r0, [r0, #-8]
    4018:	ldr	r2, [r0, #8]
    401c:	cmp	r2, #2
    4020:	beq	40a4 <coda_mem_cursor_read_int64_partial_array+0xb4>
    4024:	cmp	r2, #1
    4028:	bne	41bc <coda_mem_cursor_read_int64_partial_array+0x1cc>
    402c:	mov	r0, sp
    4030:	mov	r2, #520	; 0x208
    4034:	bl	0 <memcpy>
    4038:	cmp	r5, #1
    403c:	blt	41ac <coda_mem_cursor_read_int64_partial_array+0x1bc>
    4040:	mov	r0, sp
    4044:	mov	r1, r6
    4048:	bl	0 <coda_cursor_goto_array_element_by_index>
    404c:	mvn	r8, #0
    4050:	cmp	r0, #0
    4054:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    4058:	sub	r6, r5, #1
    405c:	mov	r7, #0
    4060:	mov	r9, sp
    4064:	mov	r0, r9
    4068:	mov	r1, r4
    406c:	bl	0 <coda_cursor_read_int64>
    4070:	cmp	r0, #0
    4074:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    4078:	cmp	r7, r6
    407c:	bge	4090 <coda_mem_cursor_read_int64_partial_array+0xa0>
    4080:	mov	r0, r9
    4084:	bl	0 <coda_cursor_goto_next_array_element>
    4088:	cmp	r0, #0
    408c:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    4090:	add	r7, r7, #1
    4094:	add	r4, r4, #8
    4098:	cmp	r7, r5
    409c:	blt	4064 <coda_mem_cursor_read_int64_partial_array+0x74>
    40a0:	b	41ac <coda_mem_cursor_read_int64_partial_array+0x1bc>
    40a4:	ldr	r0, [r0, #4]
    40a8:	ldr	r0, [r0, #40]	; 0x28
    40ac:	ldr	r0, [r0]
    40b0:	cmp	r0, #0
    40b4:	beq	4138 <coda_mem_cursor_read_int64_partial_array+0x148>
    40b8:	cmp	r0, #1
    40bc:	bne	41dc <coda_mem_cursor_read_int64_partial_array+0x1ec>
    40c0:	mov	r0, sp
    40c4:	mov	r2, #520	; 0x208
    40c8:	bl	0 <memcpy>
    40cc:	cmp	r5, #1
    40d0:	blt	41ac <coda_mem_cursor_read_int64_partial_array+0x1bc>
    40d4:	mov	r0, sp
    40d8:	mov	r1, r6
    40dc:	bl	0 <coda_cursor_goto_array_element_by_index>
    40e0:	mvn	r8, #0
    40e4:	cmp	r0, #0
    40e8:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    40ec:	sub	r6, r5, #1
    40f0:	mov	r7, #0
    40f4:	mov	r9, sp
    40f8:	mov	r0, r9
    40fc:	mov	r1, r4
    4100:	bl	0 <coda_bin_cursor_read_int64>
    4104:	cmp	r0, #0
    4108:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    410c:	cmp	r7, r6
    4110:	bge	4124 <coda_mem_cursor_read_int64_partial_array+0x134>
    4114:	mov	r0, r9
    4118:	bl	0 <coda_cursor_goto_next_array_element>
    411c:	cmp	r0, #0
    4120:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    4124:	add	r7, r7, #1
    4128:	add	r4, r4, #8
    412c:	cmp	r7, r5
    4130:	blt	40f8 <coda_mem_cursor_read_int64_partial_array+0x108>
    4134:	b	41ac <coda_mem_cursor_read_int64_partial_array+0x1bc>
    4138:	mov	r0, sp
    413c:	mov	r2, #520	; 0x208
    4140:	bl	0 <memcpy>
    4144:	cmp	r5, #1
    4148:	blt	41ac <coda_mem_cursor_read_int64_partial_array+0x1bc>
    414c:	mov	r0, sp
    4150:	mov	r1, r6
    4154:	bl	0 <coda_cursor_goto_array_element_by_index>
    4158:	mvn	r8, #0
    415c:	cmp	r0, #0
    4160:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    4164:	sub	r6, r5, #1
    4168:	mov	r7, #0
    416c:	mov	r9, sp
    4170:	mov	r0, r9
    4174:	mov	r1, r4
    4178:	bl	0 <coda_ascii_cursor_read_int64>
    417c:	cmp	r0, #0
    4180:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    4184:	cmp	r7, r6
    4188:	bge	419c <coda_mem_cursor_read_int64_partial_array+0x1ac>
    418c:	mov	r0, r9
    4190:	bl	0 <coda_cursor_goto_next_array_element>
    4194:	cmp	r0, #0
    4198:	bne	41b0 <coda_mem_cursor_read_int64_partial_array+0x1c0>
    419c:	add	r7, r7, #1
    41a0:	add	r4, r4, #8
    41a4:	cmp	r7, r5
    41a8:	blt	4170 <coda_mem_cursor_read_int64_partial_array+0x180>
    41ac:	mov	r8, #0
    41b0:	mov	r0, r8
    41b4:	sub	sp, fp, #24
    41b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    41bc:	movw	r0, #0
    41c0:	movw	r1, #0
    41c4:	movw	r3, #0
    41c8:	movw	r2, #1111	; 0x457
    41cc:	movt	r0, #0
    41d0:	movt	r1, #0
    41d4:	movt	r3, #0
    41d8:	bl	0 <__assert_fail>
    41dc:	movw	r0, #0
    41e0:	movw	r1, #0
    41e4:	movw	r3, #0
    41e8:	movw	r2, #1117	; 0x45d
    41ec:	movt	r0, #0
    41f0:	movt	r1, #0
    41f4:	movt	r3, #0
    41f8:	bl	0 <__assert_fail>

000041fc <coda_mem_cursor_read_uint64_partial_array>:
    41fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4200:	add	fp, sp, #24
    4204:	sub	sp, sp, #528	; 0x210
    4208:	mov	r6, r1
    420c:	mov	r1, r0
    4210:	ldr	r0, [r0, #4]
    4214:	mov	r5, r2
    4218:	mov	r4, r3
    421c:	add	r0, r1, r0, lsl #4
    4220:	ldr	r0, [r0, #-8]
    4224:	ldr	r2, [r0, #8]
    4228:	cmp	r2, #2
    422c:	beq	42b0 <coda_mem_cursor_read_uint64_partial_array+0xb4>
    4230:	cmp	r2, #1
    4234:	bne	43c8 <coda_mem_cursor_read_uint64_partial_array+0x1cc>
    4238:	mov	r0, sp
    423c:	mov	r2, #520	; 0x208
    4240:	bl	0 <memcpy>
    4244:	cmp	r5, #1
    4248:	blt	43b8 <coda_mem_cursor_read_uint64_partial_array+0x1bc>
    424c:	mov	r0, sp
    4250:	mov	r1, r6
    4254:	bl	0 <coda_cursor_goto_array_element_by_index>
    4258:	mvn	r8, #0
    425c:	cmp	r0, #0
    4260:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    4264:	sub	r6, r5, #1
    4268:	mov	r7, #0
    426c:	mov	r9, sp
    4270:	mov	r0, r9
    4274:	mov	r1, r4
    4278:	bl	0 <coda_cursor_read_uint64>
    427c:	cmp	r0, #0
    4280:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    4284:	cmp	r7, r6
    4288:	bge	429c <coda_mem_cursor_read_uint64_partial_array+0xa0>
    428c:	mov	r0, r9
    4290:	bl	0 <coda_cursor_goto_next_array_element>
    4294:	cmp	r0, #0
    4298:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    429c:	add	r7, r7, #1
    42a0:	add	r4, r4, #8
    42a4:	cmp	r7, r5
    42a8:	blt	4270 <coda_mem_cursor_read_uint64_partial_array+0x74>
    42ac:	b	43b8 <coda_mem_cursor_read_uint64_partial_array+0x1bc>
    42b0:	ldr	r0, [r0, #4]
    42b4:	ldr	r0, [r0, #40]	; 0x28
    42b8:	ldr	r0, [r0]
    42bc:	cmp	r0, #0
    42c0:	beq	4344 <coda_mem_cursor_read_uint64_partial_array+0x148>
    42c4:	cmp	r0, #1
    42c8:	bne	43e8 <coda_mem_cursor_read_uint64_partial_array+0x1ec>
    42cc:	mov	r0, sp
    42d0:	mov	r2, #520	; 0x208
    42d4:	bl	0 <memcpy>
    42d8:	cmp	r5, #1
    42dc:	blt	43b8 <coda_mem_cursor_read_uint64_partial_array+0x1bc>
    42e0:	mov	r0, sp
    42e4:	mov	r1, r6
    42e8:	bl	0 <coda_cursor_goto_array_element_by_index>
    42ec:	mvn	r8, #0
    42f0:	cmp	r0, #0
    42f4:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    42f8:	sub	r6, r5, #1
    42fc:	mov	r7, #0
    4300:	mov	r9, sp
    4304:	mov	r0, r9
    4308:	mov	r1, r4
    430c:	bl	0 <coda_bin_cursor_read_uint64>
    4310:	cmp	r0, #0
    4314:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    4318:	cmp	r7, r6
    431c:	bge	4330 <coda_mem_cursor_read_uint64_partial_array+0x134>
    4320:	mov	r0, r9
    4324:	bl	0 <coda_cursor_goto_next_array_element>
    4328:	cmp	r0, #0
    432c:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    4330:	add	r7, r7, #1
    4334:	add	r4, r4, #8
    4338:	cmp	r7, r5
    433c:	blt	4304 <coda_mem_cursor_read_uint64_partial_array+0x108>
    4340:	b	43b8 <coda_mem_cursor_read_uint64_partial_array+0x1bc>
    4344:	mov	r0, sp
    4348:	mov	r2, #520	; 0x208
    434c:	bl	0 <memcpy>
    4350:	cmp	r5, #1
    4354:	blt	43b8 <coda_mem_cursor_read_uint64_partial_array+0x1bc>
    4358:	mov	r0, sp
    435c:	mov	r1, r6
    4360:	bl	0 <coda_cursor_goto_array_element_by_index>
    4364:	mvn	r8, #0
    4368:	cmp	r0, #0
    436c:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    4370:	sub	r6, r5, #1
    4374:	mov	r7, #0
    4378:	mov	r9, sp
    437c:	mov	r0, r9
    4380:	mov	r1, r4
    4384:	bl	0 <coda_ascii_cursor_read_uint64>
    4388:	cmp	r0, #0
    438c:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    4390:	cmp	r7, r6
    4394:	bge	43a8 <coda_mem_cursor_read_uint64_partial_array+0x1ac>
    4398:	mov	r0, r9
    439c:	bl	0 <coda_cursor_goto_next_array_element>
    43a0:	cmp	r0, #0
    43a4:	bne	43bc <coda_mem_cursor_read_uint64_partial_array+0x1c0>
    43a8:	add	r7, r7, #1
    43ac:	add	r4, r4, #8
    43b0:	cmp	r7, r5
    43b4:	blt	437c <coda_mem_cursor_read_uint64_partial_array+0x180>
    43b8:	mov	r8, #0
    43bc:	mov	r0, r8
    43c0:	sub	sp, fp, #24
    43c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    43c8:	movw	r0, #0
    43cc:	movw	r1, #0
    43d0:	movw	r3, #0
    43d4:	movw	r2, #1131	; 0x46b
    43d8:	movt	r0, #0
    43dc:	movt	r1, #0
    43e0:	movt	r3, #0
    43e4:	bl	0 <__assert_fail>
    43e8:	movw	r0, #0
    43ec:	movw	r1, #0
    43f0:	movw	r3, #0
    43f4:	movw	r2, #1137	; 0x471
    43f8:	movt	r0, #0
    43fc:	movt	r1, #0
    4400:	movt	r3, #0
    4404:	bl	0 <__assert_fail>

00004408 <coda_mem_cursor_read_float_partial_array>:
    4408:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    440c:	add	fp, sp, #24
    4410:	sub	sp, sp, #528	; 0x210
    4414:	mov	r6, r1
    4418:	mov	r1, r0
    441c:	ldr	r0, [r0, #4]
    4420:	mov	r5, r2
    4424:	mov	r4, r3
    4428:	add	r0, r1, r0, lsl #4
    442c:	ldr	r0, [r0, #-8]
    4430:	ldr	r2, [r0, #8]
    4434:	cmp	r2, #2
    4438:	beq	44bc <coda_mem_cursor_read_float_partial_array+0xb4>
    443c:	cmp	r2, #1
    4440:	bne	45d4 <coda_mem_cursor_read_float_partial_array+0x1cc>
    4444:	mov	r0, sp
    4448:	mov	r2, #520	; 0x208
    444c:	bl	0 <memcpy>
    4450:	cmp	r5, #1
    4454:	blt	45c4 <coda_mem_cursor_read_float_partial_array+0x1bc>
    4458:	mov	r0, sp
    445c:	mov	r1, r6
    4460:	bl	0 <coda_cursor_goto_array_element_by_index>
    4464:	mvn	r8, #0
    4468:	cmp	r0, #0
    446c:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    4470:	sub	r6, r5, #1
    4474:	mov	r7, #0
    4478:	mov	r9, sp
    447c:	mov	r0, r9
    4480:	mov	r1, r4
    4484:	bl	0 <coda_cursor_read_float>
    4488:	cmp	r0, #0
    448c:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    4490:	cmp	r7, r6
    4494:	bge	44a8 <coda_mem_cursor_read_float_partial_array+0xa0>
    4498:	mov	r0, r9
    449c:	bl	0 <coda_cursor_goto_next_array_element>
    44a0:	cmp	r0, #0
    44a4:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    44a8:	add	r7, r7, #1
    44ac:	add	r4, r4, #4
    44b0:	cmp	r7, r5
    44b4:	blt	447c <coda_mem_cursor_read_float_partial_array+0x74>
    44b8:	b	45c4 <coda_mem_cursor_read_float_partial_array+0x1bc>
    44bc:	ldr	r0, [r0, #4]
    44c0:	ldr	r0, [r0, #40]	; 0x28
    44c4:	ldr	r0, [r0]
    44c8:	cmp	r0, #0
    44cc:	beq	4550 <coda_mem_cursor_read_float_partial_array+0x148>
    44d0:	cmp	r0, #1
    44d4:	bne	45f4 <coda_mem_cursor_read_float_partial_array+0x1ec>
    44d8:	mov	r0, sp
    44dc:	mov	r2, #520	; 0x208
    44e0:	bl	0 <memcpy>
    44e4:	cmp	r5, #1
    44e8:	blt	45c4 <coda_mem_cursor_read_float_partial_array+0x1bc>
    44ec:	mov	r0, sp
    44f0:	mov	r1, r6
    44f4:	bl	0 <coda_cursor_goto_array_element_by_index>
    44f8:	mvn	r8, #0
    44fc:	cmp	r0, #0
    4500:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    4504:	sub	r6, r5, #1
    4508:	mov	r7, #0
    450c:	mov	r9, sp
    4510:	mov	r0, r9
    4514:	mov	r1, r4
    4518:	bl	0 <coda_bin_cursor_read_float>
    451c:	cmp	r0, #0
    4520:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    4524:	cmp	r7, r6
    4528:	bge	453c <coda_mem_cursor_read_float_partial_array+0x134>
    452c:	mov	r0, r9
    4530:	bl	0 <coda_cursor_goto_next_array_element>
    4534:	cmp	r0, #0
    4538:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    453c:	add	r7, r7, #1
    4540:	add	r4, r4, #4
    4544:	cmp	r7, r5
    4548:	blt	4510 <coda_mem_cursor_read_float_partial_array+0x108>
    454c:	b	45c4 <coda_mem_cursor_read_float_partial_array+0x1bc>
    4550:	mov	r0, sp
    4554:	mov	r2, #520	; 0x208
    4558:	bl	0 <memcpy>
    455c:	cmp	r5, #1
    4560:	blt	45c4 <coda_mem_cursor_read_float_partial_array+0x1bc>
    4564:	mov	r0, sp
    4568:	mov	r1, r6
    456c:	bl	0 <coda_cursor_goto_array_element_by_index>
    4570:	mvn	r8, #0
    4574:	cmp	r0, #0
    4578:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    457c:	sub	r6, r5, #1
    4580:	mov	r7, #0
    4584:	mov	r9, sp
    4588:	mov	r0, r9
    458c:	mov	r1, r4
    4590:	bl	0 <coda_ascii_cursor_read_float>
    4594:	cmp	r0, #0
    4598:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    459c:	cmp	r7, r6
    45a0:	bge	45b4 <coda_mem_cursor_read_float_partial_array+0x1ac>
    45a4:	mov	r0, r9
    45a8:	bl	0 <coda_cursor_goto_next_array_element>
    45ac:	cmp	r0, #0
    45b0:	bne	45c8 <coda_mem_cursor_read_float_partial_array+0x1c0>
    45b4:	add	r7, r7, #1
    45b8:	add	r4, r4, #4
    45bc:	cmp	r7, r5
    45c0:	blt	4588 <coda_mem_cursor_read_float_partial_array+0x180>
    45c4:	mov	r8, #0
    45c8:	mov	r0, r8
    45cc:	sub	sp, fp, #24
    45d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    45d4:	movw	r0, #0
    45d8:	movw	r1, #0
    45dc:	movw	r3, #0
    45e0:	movw	r2, #1151	; 0x47f
    45e4:	movt	r0, #0
    45e8:	movt	r1, #0
    45ec:	movt	r3, #0
    45f0:	bl	0 <__assert_fail>
    45f4:	movw	r0, #0
    45f8:	movw	r1, #0
    45fc:	movw	r3, #0
    4600:	movw	r2, #1157	; 0x485
    4604:	movt	r0, #0
    4608:	movt	r1, #0
    460c:	movt	r3, #0
    4610:	bl	0 <__assert_fail>

00004614 <coda_mem_cursor_read_double_partial_array>:
    4614:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4618:	add	fp, sp, #24
    461c:	sub	sp, sp, #528	; 0x210
    4620:	mov	r6, r1
    4624:	mov	r1, r0
    4628:	ldr	r0, [r0, #4]
    462c:	mov	r5, r2
    4630:	mov	r4, r3
    4634:	add	r0, r1, r0, lsl #4
    4638:	ldr	r0, [r0, #-8]
    463c:	ldr	r2, [r0, #8]
    4640:	cmp	r2, #2
    4644:	beq	46c8 <coda_mem_cursor_read_double_partial_array+0xb4>
    4648:	cmp	r2, #1
    464c:	bne	47e0 <coda_mem_cursor_read_double_partial_array+0x1cc>
    4650:	mov	r0, sp
    4654:	mov	r2, #520	; 0x208
    4658:	bl	0 <memcpy>
    465c:	cmp	r5, #1
    4660:	blt	47d0 <coda_mem_cursor_read_double_partial_array+0x1bc>
    4664:	mov	r0, sp
    4668:	mov	r1, r6
    466c:	bl	0 <coda_cursor_goto_array_element_by_index>
    4670:	mvn	r8, #0
    4674:	cmp	r0, #0
    4678:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    467c:	sub	r6, r5, #1
    4680:	mov	r7, #0
    4684:	mov	r9, sp
    4688:	mov	r0, r9
    468c:	mov	r1, r4
    4690:	bl	0 <coda_cursor_read_double>
    4694:	cmp	r0, #0
    4698:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    469c:	cmp	r7, r6
    46a0:	bge	46b4 <coda_mem_cursor_read_double_partial_array+0xa0>
    46a4:	mov	r0, r9
    46a8:	bl	0 <coda_cursor_goto_next_array_element>
    46ac:	cmp	r0, #0
    46b0:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    46b4:	add	r7, r7, #1
    46b8:	add	r4, r4, #8
    46bc:	cmp	r7, r5
    46c0:	blt	4688 <coda_mem_cursor_read_double_partial_array+0x74>
    46c4:	b	47d0 <coda_mem_cursor_read_double_partial_array+0x1bc>
    46c8:	ldr	r0, [r0, #4]
    46cc:	ldr	r0, [r0, #40]	; 0x28
    46d0:	ldr	r0, [r0]
    46d4:	cmp	r0, #0
    46d8:	beq	475c <coda_mem_cursor_read_double_partial_array+0x148>
    46dc:	cmp	r0, #1
    46e0:	bne	4800 <coda_mem_cursor_read_double_partial_array+0x1ec>
    46e4:	mov	r0, sp
    46e8:	mov	r2, #520	; 0x208
    46ec:	bl	0 <memcpy>
    46f0:	cmp	r5, #1
    46f4:	blt	47d0 <coda_mem_cursor_read_double_partial_array+0x1bc>
    46f8:	mov	r0, sp
    46fc:	mov	r1, r6
    4700:	bl	0 <coda_cursor_goto_array_element_by_index>
    4704:	mvn	r8, #0
    4708:	cmp	r0, #0
    470c:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    4710:	sub	r6, r5, #1
    4714:	mov	r7, #0
    4718:	mov	r9, sp
    471c:	mov	r0, r9
    4720:	mov	r1, r4
    4724:	bl	0 <coda_bin_cursor_read_double>
    4728:	cmp	r0, #0
    472c:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    4730:	cmp	r7, r6
    4734:	bge	4748 <coda_mem_cursor_read_double_partial_array+0x134>
    4738:	mov	r0, r9
    473c:	bl	0 <coda_cursor_goto_next_array_element>
    4740:	cmp	r0, #0
    4744:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    4748:	add	r7, r7, #1
    474c:	add	r4, r4, #8
    4750:	cmp	r7, r5
    4754:	blt	471c <coda_mem_cursor_read_double_partial_array+0x108>
    4758:	b	47d0 <coda_mem_cursor_read_double_partial_array+0x1bc>
    475c:	mov	r0, sp
    4760:	mov	r2, #520	; 0x208
    4764:	bl	0 <memcpy>
    4768:	cmp	r5, #1
    476c:	blt	47d0 <coda_mem_cursor_read_double_partial_array+0x1bc>
    4770:	mov	r0, sp
    4774:	mov	r1, r6
    4778:	bl	0 <coda_cursor_goto_array_element_by_index>
    477c:	mvn	r8, #0
    4780:	cmp	r0, #0
    4784:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    4788:	sub	r6, r5, #1
    478c:	mov	r7, #0
    4790:	mov	r9, sp
    4794:	mov	r0, r9
    4798:	mov	r1, r4
    479c:	bl	0 <coda_ascii_cursor_read_double>
    47a0:	cmp	r0, #0
    47a4:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    47a8:	cmp	r7, r6
    47ac:	bge	47c0 <coda_mem_cursor_read_double_partial_array+0x1ac>
    47b0:	mov	r0, r9
    47b4:	bl	0 <coda_cursor_goto_next_array_element>
    47b8:	cmp	r0, #0
    47bc:	bne	47d4 <coda_mem_cursor_read_double_partial_array+0x1c0>
    47c0:	add	r7, r7, #1
    47c4:	add	r4, r4, #8
    47c8:	cmp	r7, r5
    47cc:	blt	4794 <coda_mem_cursor_read_double_partial_array+0x180>
    47d0:	mov	r8, #0
    47d4:	mov	r0, r8
    47d8:	sub	sp, fp, #24
    47dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    47e0:	movw	r0, #0
    47e4:	movw	r1, #0
    47e8:	movw	r3, #0
    47ec:	movw	r2, #1171	; 0x493
    47f0:	movt	r0, #0
    47f4:	movt	r1, #0
    47f8:	movt	r3, #0
    47fc:	bl	0 <__assert_fail>
    4800:	movw	r0, #0
    4804:	movw	r1, #0
    4808:	movw	r3, #0
    480c:	movw	r2, #1177	; 0x499
    4810:	movt	r0, #0
    4814:	movt	r1, #0
    4818:	movt	r3, #0
    481c:	bl	0 <__assert_fail>

00004820 <coda_mem_cursor_read_char_partial_array>:
    4820:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4824:	add	fp, sp, #24
    4828:	sub	sp, sp, #528	; 0x210
    482c:	mov	r6, r1
    4830:	mov	r1, r0
    4834:	ldr	r0, [r0, #4]
    4838:	mov	r5, r2
    483c:	mov	r9, r3
    4840:	add	r0, r1, r0, lsl #4
    4844:	ldr	r0, [r0, #-8]
    4848:	ldr	r2, [r0, #8]
    484c:	cmp	r2, #2
    4850:	beq	48d0 <coda_mem_cursor_read_char_partial_array+0xb0>
    4854:	cmp	r2, #1
    4858:	bne	49e0 <coda_mem_cursor_read_char_partial_array+0x1c0>
    485c:	mov	r0, sp
    4860:	mov	r2, #520	; 0x208
    4864:	bl	0 <memcpy>
    4868:	cmp	r5, #1
    486c:	blt	49d0 <coda_mem_cursor_read_char_partial_array+0x1b0>
    4870:	mov	r0, sp
    4874:	mov	r1, r6
    4878:	bl	0 <coda_cursor_goto_array_element_by_index>
    487c:	mvn	r8, #0
    4880:	cmp	r0, #0
    4884:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    4888:	sub	r6, r5, #1
    488c:	mov	r4, #0
    4890:	mov	r7, sp
    4894:	add	r1, r9, r4
    4898:	mov	r0, r7
    489c:	bl	0 <coda_cursor_read_char>
    48a0:	cmp	r0, #0
    48a4:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    48a8:	cmp	r4, r6
    48ac:	bge	48c0 <coda_mem_cursor_read_char_partial_array+0xa0>
    48b0:	mov	r0, r7
    48b4:	bl	0 <coda_cursor_goto_next_array_element>
    48b8:	cmp	r0, #0
    48bc:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    48c0:	add	r4, r4, #1
    48c4:	cmp	r4, r5
    48c8:	blt	4894 <coda_mem_cursor_read_char_partial_array+0x74>
    48cc:	b	49d0 <coda_mem_cursor_read_char_partial_array+0x1b0>
    48d0:	ldr	r0, [r0, #4]
    48d4:	ldr	r0, [r0, #40]	; 0x28
    48d8:	ldr	r0, [r0]
    48dc:	cmp	r0, #0
    48e0:	beq	4960 <coda_mem_cursor_read_char_partial_array+0x140>
    48e4:	cmp	r0, #1
    48e8:	bne	4a00 <coda_mem_cursor_read_char_partial_array+0x1e0>
    48ec:	mov	r0, sp
    48f0:	mov	r2, #520	; 0x208
    48f4:	bl	0 <memcpy>
    48f8:	cmp	r5, #1
    48fc:	blt	49d0 <coda_mem_cursor_read_char_partial_array+0x1b0>
    4900:	mov	r0, sp
    4904:	mov	r1, r6
    4908:	bl	0 <coda_cursor_goto_array_element_by_index>
    490c:	mvn	r8, #0
    4910:	cmp	r0, #0
    4914:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    4918:	sub	r6, r5, #1
    491c:	mov	r4, #0
    4920:	mov	r7, sp
    4924:	add	r1, r9, r4
    4928:	mov	r0, r7
    492c:	bl	0 <coda_bin_cursor_read_char>
    4930:	cmp	r0, #0
    4934:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    4938:	cmp	r4, r6
    493c:	bge	4950 <coda_mem_cursor_read_char_partial_array+0x130>
    4940:	mov	r0, r7
    4944:	bl	0 <coda_cursor_goto_next_array_element>
    4948:	cmp	r0, #0
    494c:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    4950:	add	r4, r4, #1
    4954:	cmp	r4, r5
    4958:	blt	4924 <coda_mem_cursor_read_char_partial_array+0x104>
    495c:	b	49d0 <coda_mem_cursor_read_char_partial_array+0x1b0>
    4960:	mov	r0, sp
    4964:	mov	r2, #520	; 0x208
    4968:	bl	0 <memcpy>
    496c:	cmp	r5, #1
    4970:	blt	49d0 <coda_mem_cursor_read_char_partial_array+0x1b0>
    4974:	mov	r0, sp
    4978:	mov	r1, r6
    497c:	bl	0 <coda_cursor_goto_array_element_by_index>
    4980:	mvn	r8, #0
    4984:	cmp	r0, #0
    4988:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    498c:	sub	r6, r5, #1
    4990:	mov	r4, #0
    4994:	mov	r7, sp
    4998:	add	r1, r9, r4
    499c:	mov	r0, r7
    49a0:	bl	0 <coda_ascii_cursor_read_char>
    49a4:	cmp	r0, #0
    49a8:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    49ac:	cmp	r4, r6
    49b0:	bge	49c4 <coda_mem_cursor_read_char_partial_array+0x1a4>
    49b4:	mov	r0, r7
    49b8:	bl	0 <coda_cursor_goto_next_array_element>
    49bc:	cmp	r0, #0
    49c0:	bne	49d4 <coda_mem_cursor_read_char_partial_array+0x1b4>
    49c4:	add	r4, r4, #1
    49c8:	cmp	r4, r5
    49cc:	blt	4998 <coda_mem_cursor_read_char_partial_array+0x178>
    49d0:	mov	r8, #0
    49d4:	mov	r0, r8
    49d8:	sub	sp, fp, #24
    49dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    49e0:	movw	r0, #0
    49e4:	movw	r1, #0
    49e8:	movw	r3, #0
    49ec:	movw	r2, #1191	; 0x4a7
    49f0:	movt	r0, #0
    49f4:	movt	r1, #0
    49f8:	movt	r3, #0
    49fc:	bl	0 <__assert_fail>
    4a00:	movw	r0, #0
    4a04:	movw	r1, #0
    4a08:	movw	r3, #0
    4a0c:	movw	r2, #1197	; 0x4ad
    4a10:	movt	r0, #0
    4a14:	movt	r1, #0
    4a18:	movt	r3, #0
    4a1c:	bl	0 <__assert_fail>
