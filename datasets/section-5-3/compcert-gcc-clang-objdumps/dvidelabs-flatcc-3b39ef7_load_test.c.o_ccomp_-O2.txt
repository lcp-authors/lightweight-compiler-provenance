
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <elapsed_realtime>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #16
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	add	r0, sp, #8
  14:	mov	r1, #0
  18:	bl	0 <gettimeofday>
  1c:	ldr	r0, [pc, #92]	; 80 <elapsed_realtime+0x80>
  20:	ldr	r2, [r0]
  24:	cmp	r2, #0
  28:	bne	34 <elapsed_realtime+0x34>
  2c:	vldr	d7, [sp, #8]
  30:	vstr	d7, [r0]
  34:	ldr	r0, [sp, #8]
  38:	ldr	r2, [pc, #64]	; 80 <elapsed_realtime+0x80>
  3c:	ldr	ip, [r2]
  40:	sub	r0, r0, ip
  44:	vmov	s2, r0
  48:	vcvt.f64.s32	d1, s2
  4c:	ldr	r1, [sp, #12]
  50:	ldr	r3, [pc, #36]	; 7c <elapsed_realtime+0x7c>
  54:	ldr	r2, [r3]
  58:	sub	r3, r1, r2
  5c:	vmov	s8, r3
  60:	vcvt.f64.s32	d4, s8
  64:	vldr	d0, [pc, #24]	; 84 <elapsed_realtime+0x84>
  68:	vdiv.f64	d2, d4, d0
  6c:	vadd.f64	d0, d1, d2
  70:	ldr	lr, [sp, #4]
  74:	add	sp, sp, #16
  78:	bx	lr
  7c:	.word	0x00000004
	...
  88:	.word	0x412e8480

0000008c <create_root_monster>:
  8c:	mov	ip, sp
  90:	sub	sp, sp, #32
  94:	str	ip, [sp]
  98:	str	lr, [sp, #4]
  9c:	str	r4, [sp, #8]
  a0:	str	r5, [sp, #12]
  a4:	str	r6, [sp, #16]
  a8:	str	r7, [sp, #20]
  ac:	str	r8, [sp, #24]
  b0:	str	r9, [sp, #28]
  b4:	mov	r5, r0
  b8:	mov	r0, r5
  bc:	bl	0 <flatcc_builder_reset>
  c0:	mov	r4, r5
  c4:	ldr	r1, [pc, #620]	; 338 <create_root_monster+0x2ac>
  c8:	mov	r2, #0
  cc:	mov	r3, #0
  d0:	mov	r0, r4
  d4:	bl	0 <flatcc_builder_start_buffer>
  d8:	cmp	r0, #0
  dc:	bne	ec <create_root_monster+0x60>
  e0:	mov	r1, #36	; 0x24
  e4:	mov	r0, r4
  e8:	bl	0 <flatcc_builder_start_table>
  ec:	ldr	r1, [pc, #612]	; 358 <create_root_monster+0x2cc>
  f0:	mov	r6, r5
  f4:	mov	r0, r6
  f8:	bl	0 <flatcc_builder_create_string_str>
  fc:	mov	r4, r0
 100:	cmp	r4, #0
 104:	beq	120 <create_root_monster+0x94>
 108:	mov	r1, #3
 10c:	mov	r0, r6
 110:	bl	0 <flatcc_builder_table_add_offset>
 114:	cmp	r0, #0
 118:	beq	120 <create_root_monster+0x94>
 11c:	str	r4, [r0]
 120:	mov	r6, r5
 124:	mov	r0, r6
 128:	bl	0 <flatcc_builder_start_offset_vector>
 12c:	mov	r7, #0
 130:	mov	r0, r6
 134:	mov	r1, #36	; 0x24
 138:	bl	0 <flatcc_builder_start_table>
 13c:	mov	r0, r6
 140:	bl	0 <flatcc_builder_start_string>
 144:	mov	r4, #0
 148:	ldr	r1, [pc, #532]	; 364 <create_root_monster+0x2d8>
 14c:	mov	r2, #7
 150:	mov	r0, r6
 154:	bl	0 <flatcc_builder_append_string>
 158:	add	r4, r4, #1
 15c:	cmp	r4, #100	; 0x64
 160:	bcc	148 <create_root_monster+0xbc>
 164:	mov	r4, r6
 168:	mov	r0, r4
 16c:	bl	0 <flatcc_builder_end_string>
 170:	mov	r8, r0
 174:	mov	r0, r4
 178:	cmp	r8, #0
 17c:	beq	194 <create_root_monster+0x108>
 180:	mov	r1, #3
 184:	bl	0 <flatcc_builder_table_add_offset>
 188:	cmp	r0, #0
 18c:	beq	194 <create_root_monster+0x108>
 190:	str	r8, [r0]
 194:	mov	r9, r6
 198:	mov	r1, #1
 19c:	mov	r8, #1
 1a0:	mov	r4, #1
 1a4:	mvn	r0, #0
 1a8:	bl	0 <__aeabi_uidiv>
 1ac:	mov	r3, r0
 1b0:	mov	r2, r4
 1b4:	mov	r1, r8
 1b8:	mov	r0, r9
 1bc:	bl	0 <flatcc_builder_start_vector>
 1c0:	mov	r4, #0
 1c4:	ldr	r1, [pc, #368]	; 33c <create_root_monster+0x2b0>
 1c8:	mov	r2, #1000	; 0x3e8
 1cc:	mov	r0, r6
 1d0:	bl	0 <flatcc_builder_append_vector>
 1d4:	add	r4, r4, #1
 1d8:	cmp	r4, #100	; 0x64
 1dc:	bcc	1c4 <create_root_monster+0x138>
 1e0:	mov	r8, r6
 1e4:	mov	r0, r8
 1e8:	bl	0 <flatcc_builder_end_vector>
 1ec:	mov	r4, r0
 1f0:	cmp	r4, #0
 1f4:	beq	210 <create_root_monster+0x184>
 1f8:	mov	r1, #5
 1fc:	mov	r0, r8
 200:	bl	0 <flatcc_builder_table_add_offset>
 204:	cmp	r0, #0
 208:	beq	210 <create_root_monster+0x184>
 20c:	str	r4, [r0]
 210:	mov	r4, r6
 214:	ldr	r1, [pc, #292]	; 340 <create_root_monster+0x2b4>
 218:	mov	r2, #1
 21c:	mov	r0, r4
 220:	bl	0 <flatcc_builder_check_required>
 224:	cmp	r0, #0
 228:	bne	240 <create_root_monster+0x1b4>
 22c:	ldr	r0, [pc, #276]	; 348 <create_root_monster+0x2bc>
 230:	ldr	r1, [pc, #280]	; 350 <create_root_monster+0x2c4>
 234:	mov	r2, #235	; 0xeb
 238:	ldr	r3, [pc, #284]	; 35c <create_root_monster+0x2d0>
 23c:	bl	0 <__assert_fail>
 240:	mov	r0, r4
 244:	bl	0 <flatcc_builder_end_table>
 248:	mov	r4, r0
 24c:	cmp	r4, #0
 250:	bne	268 <create_root_monster+0x1dc>
 254:	ldr	r0, [pc, #240]	; 34c <create_root_monster+0x2c0>
 258:	ldr	r1, [pc, #228]	; 344 <create_root_monster+0x2b8>
 25c:	mov	r2, #42	; 0x2a
 260:	ldr	r3, [pc, #256]	; 368 <create_root_monster+0x2dc>
 264:	bl	0 <__assert_fail>
 268:	mov	r1, r4
 26c:	mov	r0, r6
 270:	cmp	r1, #0
 274:	beq	27c <create_root_monster+0x1f0>
 278:	bl	0 <flatcc_builder_offset_vector_push>
 27c:	add	r7, r7, #1
 280:	cmp	r7, #1000	; 0x3e8
 284:	bcc	130 <create_root_monster+0xa4>
 288:	mov	r0, r6
 28c:	bl	0 <flatcc_builder_end_offset_vector>
 290:	mov	r4, r0
 294:	cmp	r4, #0
 298:	bne	2b0 <create_root_monster+0x224>
 29c:	ldr	r0, [pc, #188]	; 360 <create_root_monster+0x2d4>
 2a0:	ldr	r1, [pc, #156]	; 344 <create_root_monster+0x2b8>
 2a4:	mov	r2, #56	; 0x38
 2a8:	ldr	r3, [pc, #164]	; 354 <create_root_monster+0x2c8>
 2ac:	bl	0 <__assert_fail>
 2b0:	mov	r0, r5
 2b4:	cmp	r4, #0
 2b8:	beq	2d0 <create_root_monster+0x244>
 2bc:	mov	r1, #11
 2c0:	bl	0 <flatcc_builder_table_add_offset>
 2c4:	cmp	r0, #0
 2c8:	beq	2d0 <create_root_monster+0x244>
 2cc:	str	r4, [r0]
 2d0:	ldr	r1, [pc, #104]	; 340 <create_root_monster+0x2b4>
 2d4:	mov	r2, #1
 2d8:	mov	r0, r5
 2dc:	bl	0 <flatcc_builder_check_required>
 2e0:	cmp	r0, #0
 2e4:	bne	2fc <create_root_monster+0x270>
 2e8:	ldr	r0, [pc, #88]	; 348 <create_root_monster+0x2bc>
 2ec:	ldr	r1, [pc, #92]	; 350 <create_root_monster+0x2c4>
 2f0:	mov	r2, #235	; 0xeb
 2f4:	ldr	r3, [pc, #96]	; 35c <create_root_monster+0x2d0>
 2f8:	bl	0 <__assert_fail>
 2fc:	mov	r0, r5
 300:	bl	0 <flatcc_builder_end_table>
 304:	mov	r1, r0
 308:	mov	r0, r5
 30c:	bl	0 <flatcc_builder_end_buffer>
 310:	mov	r0, #0
 314:	ldr	r4, [sp, #8]
 318:	ldr	r5, [sp, #12]
 31c:	ldr	r6, [sp, #16]
 320:	ldr	r7, [sp, #20]
 324:	ldr	r8, [sp, #24]
 328:	ldr	r9, [sp, #28]
 32c:	ldr	lr, [sp, #4]
 330:	add	sp, sp, #32
 334:	bx	lr
 338:	.word	0x0000008c
 33c:	.word	0x00000008
 340:	.word	0x0000053c
 344:	.word	0x000003ef
 348:	.word	0x0000012f
 34c:	.word	0x000000a0
 350:	.word	0x00000012
 354:	.word	0x0000056b
 358:	.word	0x00000108
 35c:	.word	0x00000540
 360:	.word	0x000000ed
 364:	.word	0x000003e7
 368:	.word	0x0000055b

0000036c <main>:
 36c:	mov	ip, sp
 370:	sub	sp, sp, #304	; 0x130
 374:	str	ip, [sp]
 378:	str	lr, [sp, #4]
 37c:	str	r4, [sp, #12]
 380:	str	r5, [sp, #16]
 384:	str	r6, [sp, #20]
 388:	str	r7, [sp, #24]
 38c:	str	r8, [sp, #28]
 390:	str	r9, [sp, #32]
 394:	str	sl, [sp, #36]	; 0x24
 398:	str	fp, [sp, #40]	; 0x28
 39c:	vstr	d8, [sp, #48]	; 0x30
 3a0:	add	r2, sp, #64	; 0x40
 3a4:	str	r2, [sp, #8]
 3a8:	ldr	r0, [sp, #8]
 3ac:	bl	0 <flatcc_builder_init>
 3b0:	ldr	r0, [sp, #8]
 3b4:	bl	8c <create_root_monster>
 3b8:	add	r1, sp, #56	; 0x38
 3bc:	ldr	r0, [sp, #8]
 3c0:	bl	0 <flatcc_builder_finalize_buffer>
 3c4:	mov	r8, r0
 3c8:	ldr	r0, [pc, #1956]	; b74 <main+0x808>
 3cc:	ldr	r1, [pc, #1956]	; b78 <main+0x80c>
 3d0:	bl	0 <fopen>
 3d4:	mov	r4, r0
 3d8:	cmp	r4, #0
 3dc:	bne	3e8 <main+0x7c>
 3e0:	mvn	r7, #0
 3e4:	b	adc <main+0x770>
 3e8:	mov	r1, #1
 3ec:	ldr	r2, [sp, #56]	; 0x38
 3f0:	mov	r3, r4
 3f4:	mov	r0, r8
 3f8:	bl	0 <fwrite>
 3fc:	ldr	r1, [sp, #56]	; 0x38
 400:	cmp	r1, r0
 404:	movne	r7, #1
 408:	moveq	r7, #0
 40c:	mov	r0, r4
 410:	bl	0 <fclose>
 414:	cmp	r7, #0
 418:	bne	adc <main+0x770>
 41c:	ldr	r0, [pc, #1880]	; b7c <main+0x810>
 420:	ldr	r1, [sp, #56]	; 0x38
 424:	bl	0 <printf>
 428:	ldr	r0, [pc, #1924]	; bb4 <main+0x848>
 42c:	bl	0 <printf>
 430:	bl	0 <elapsed_realtime>
 434:	vmov.f64	d8, d0
 438:	mov	sl, #0
 43c:	ldr	r0, [sp, #8]
 440:	bl	8c <create_root_monster>
 444:	ldr	r2, [sp, #56]	; 0x38
 448:	mov	r1, r8
 44c:	ldr	r0, [sp, #8]
 450:	bl	0 <flatcc_builder_copy_buffer>
 454:	mov	r4, r8
 458:	ldr	r1, [pc, #1744]	; b30 <main+0x7c4>
 45c:	cmp	r4, #0
 460:	beq	4b8 <main+0x14c>
 464:	mov	r2, #0
 468:	str	r2, [sp, #296]	; 0x128
 46c:	add	r0, sp, #296	; 0x128
 470:	mov	r2, #4
 474:	bl	0 <strncpy>
 478:	ldr	ip, [sp, #296]	; 0x128
 47c:	str	ip, [sp, #296]	; 0x128
 480:	ldr	r2, [r4, #4]
 484:	cmp	ip, #0
 488:	beq	49c <main+0x130>
 48c:	cmp	r2, ip
 490:	moveq	r3, #1
 494:	movne	r3, #0
 498:	b	4a0 <main+0x134>
 49c:	mov	r3, #1
 4a0:	eor	r0, r3, #1
 4a4:	cmp	r0, #0
 4a8:	bne	4b8 <main+0x14c>
 4ac:	ldr	r0, [r4]
 4b0:	add	r5, r4, r0
 4b4:	b	4bc <main+0x150>
 4b8:	mov	r5, #0
 4bc:	mov	r6, r5
 4c0:	mov	r4, #0
 4c4:	ldr	r1, [pc, #1652]	; b40 <main+0x7d4>
 4c8:	cmp	r1, #0
 4cc:	movne	r3, #1
 4d0:	moveq	r3, #0
 4d4:	mov	r0, #0
 4d8:	cmp	r6, #0
 4dc:	movne	r2, r3
 4e0:	moveq	r2, r0
 4e4:	cmp	r2, #0
 4e8:	bne	500 <main+0x194>
 4ec:	ldr	r0, [pc, #1600]	; b34 <main+0x7c8>
 4f0:	ldr	r1, [pc, #1696]	; b98 <main+0x82c>
 4f4:	movw	r2, #699	; 0x2bb
 4f8:	ldr	r3, [pc, #1612]	; b4c <main+0x7e0>
 4fc:	bl	0 <__assert_fail>
 500:	ldr	r1, [r6]
 504:	sub	r2, r6, r1
 508:	ldrh	ip, [r2]
 50c:	bic	r0, ip, #16711680	; 0xff0000
 510:	bic	r0, r0, #-16777216	; 0xff000000
 514:	cmp	r0, #12
 518:	bcc	528 <main+0x1bc>
 51c:	ldrh	r0, [r2, #10]
 520:	bic	r4, r0, #16711680	; 0xff0000
 524:	bic	r4, r4, #-16777216	; 0xff000000
 528:	cmp	r4, #0
 52c:	beq	544 <main+0x1d8>
 530:	add	r2, r6, r4
 534:	ldr	ip, [r2]
 538:	add	r1, r2, ip
 53c:	add	r0, r1, #4
 540:	b	568 <main+0x1fc>
 544:	mov	ip, #0
 548:	cmp	ip, #0
 54c:	bne	564 <main+0x1f8>
 550:	ldr	r0, [pc, #1612]	; ba4 <main+0x838>
 554:	ldr	r1, [pc, #1596]	; b98 <main+0x82c>
 558:	movw	r2, #699	; 0x2bb
 55c:	ldr	r3, [pc, #1512]	; b4c <main+0x7e0>
 560:	bl	0 <__assert_fail>
 564:	mov	r0, #0
 568:	ldr	r1, [pc, #1608]	; bb8 <main+0x84c>
 56c:	bl	0 <strcmp>
 570:	orr	r7, r7, r0
 574:	cmp	r7, #0
 578:	beq	590 <main+0x224>
 57c:	ldr	r0, [pc, #1548]	; b90 <main+0x824>
 580:	ldr	r1, [pc, #1504]	; b68 <main+0x7fc>
 584:	mov	r2, #139	; 0x8b
 588:	ldr	r3, [pc, #1472]	; b50 <main+0x7e4>
 58c:	bl	0 <__assert_fail>
 590:	mov	r4, #0
 594:	ldr	r3, [pc, #1444]	; b40 <main+0x7d4>
 598:	cmp	r3, #0
 59c:	movne	ip, #1
 5a0:	moveq	ip, #0
 5a4:	mov	r0, #0
 5a8:	cmp	r5, #0
 5ac:	movne	r1, ip
 5b0:	moveq	r1, r0
 5b4:	cmp	r1, #0
 5b8:	bne	5d0 <main+0x264>
 5bc:	ldr	r0, [pc, #1392]	; b34 <main+0x7c8>
 5c0:	ldr	r1, [pc, #1488]	; b98 <main+0x82c>
 5c4:	movw	r2, #711	; 0x2c7
 5c8:	ldr	r3, [pc, #1524]	; bc4 <main+0x858>
 5cc:	bl	0 <__assert_fail>
 5d0:	ldr	r3, [r5]
 5d4:	sub	r1, r5, r3
 5d8:	ldrh	r3, [r1]
 5dc:	bic	r2, r3, #16711680	; 0xff0000
 5e0:	bic	r2, r2, #-16777216	; 0xff000000
 5e4:	cmp	r2, #28
 5e8:	bcc	5f8 <main+0x28c>
 5ec:	ldrh	r1, [r1, #26]
 5f0:	bic	r4, r1, #16711680	; 0xff0000
 5f4:	bic	r4, r4, #-16777216	; 0xff000000
 5f8:	cmp	r4, #0
 5fc:	beq	614 <main+0x2a8>
 600:	add	r3, r5, r4
 604:	ldr	r2, [r3]
 608:	add	r2, r3, r2
 60c:	add	r6, r2, #4
 610:	b	638 <main+0x2cc>
 614:	ldr	ip, [pc, #1384]	; b84 <main+0x818>
 618:	cmp	ip, #0
 61c:	bne	634 <main+0x2c8>
 620:	ldr	r0, [pc, #1324]	; b54 <main+0x7e8>
 624:	ldr	r1, [pc, #1388]	; b98 <main+0x82c>
 628:	movw	r2, #711	; 0x2c7
 62c:	ldr	r3, [pc, #1424]	; bc4 <main+0x858>
 630:	bl	0 <__assert_fail>
 634:	mov	r6, #0
 638:	cmp	r6, #0
 63c:	beq	64c <main+0x2e0>
 640:	sub	lr, r6, #4096	; 0x1000
 644:	ldr	r1, [lr, #4092]	; 0xffc
 648:	b	650 <main+0x2e4>
 64c:	mov	r1, #0
 650:	cmp	r1, #1000	; 0x3e8
 654:	movne	r3, #1
 658:	moveq	r3, #0
 65c:	orr	r7, r7, r3
 660:	cmp	r7, #0
 664:	beq	67c <main+0x310>
 668:	ldr	r0, [pc, #1312]	; b90 <main+0x824>
 66c:	ldr	r1, [pc, #1268]	; b68 <main+0x7fc>
 670:	mov	r2, #143	; 0x8f
 674:	ldr	r3, [pc, #1236]	; b50 <main+0x7e4>
 678:	bl	0 <__assert_fail>
 67c:	mov	r9, #0
 680:	add	r4, r6, r9, lsl #2
 684:	mov	ip, r6
 688:	cmp	ip, #0
 68c:	beq	69c <main+0x330>
 690:	sub	lr, ip, #4096	; 0x1000
 694:	ldr	r1, [lr, #4092]	; 0xffc
 698:	b	6a0 <main+0x334>
 69c:	mov	r1, #0
 6a0:	ldr	r2, [pc, #1220]	; b6c <main+0x800>
 6a4:	cmp	r2, #0
 6a8:	movne	ip, #1
 6ac:	moveq	ip, #0
 6b0:	mov	r2, #0
 6b4:	cmp	r1, r9
 6b8:	movhi	r0, ip
 6bc:	movls	r0, r2
 6c0:	cmp	r0, #0
 6c4:	bne	6dc <main+0x370>
 6c8:	ldr	r0, [pc, #1244]	; bac <main+0x840>
 6cc:	ldr	r1, [pc, #1220]	; b98 <main+0x82c>
 6d0:	movw	r2, #693	; 0x2b5
 6d4:	ldr	r3, [pc, #1196]	; b88 <main+0x81c>
 6d8:	bl	0 <__assert_fail>
 6dc:	ldr	r1, [r4]
 6e0:	add	r4, r4, r1
 6e4:	mov	r5, #0
 6e8:	ldr	r0, [pc, #1104]	; b40 <main+0x7d4>
 6ec:	cmp	r0, #0
 6f0:	movne	r3, #1
 6f4:	moveq	r3, #0
 6f8:	mov	r0, #0
 6fc:	cmp	r4, #0
 700:	movne	r1, r3
 704:	moveq	r1, r0
 708:	cmp	r1, #0
 70c:	bne	724 <main+0x3b8>
 710:	ldr	r0, [pc, #1052]	; b34 <main+0x7c8>
 714:	ldr	r1, [pc, #1148]	; b98 <main+0x82c>
 718:	movw	r2, #699	; 0x2bb
 71c:	ldr	r3, [pc, #1064]	; b4c <main+0x7e0>
 720:	bl	0 <__assert_fail>
 724:	mov	r3, r4
 728:	ldr	ip, [r3]
 72c:	sub	r2, r4, ip
 730:	ldrh	r1, [r2]
 734:	bic	r3, r1, #16711680	; 0xff0000
 738:	bic	r3, r3, #-16777216	; 0xff000000
 73c:	cmp	r3, #12
 740:	bcc	750 <main+0x3e4>
 744:	ldrh	ip, [r2, #10]
 748:	bic	r5, ip, #16711680	; 0xff0000
 74c:	bic	r5, r5, #-16777216	; 0xff000000
 750:	cmp	r5, #0
 754:	beq	76c <main+0x400>
 758:	add	ip, r4, r5
 75c:	ldr	r2, [ip]
 760:	add	r0, ip, r2
 764:	add	fp, r0, #4
 768:	b	790 <main+0x424>
 76c:	mov	r1, #0
 770:	cmp	r1, #0
 774:	bne	78c <main+0x420>
 778:	ldr	r0, [pc, #1060]	; ba4 <main+0x838>
 77c:	ldr	r1, [pc, #1044]	; b98 <main+0x82c>
 780:	movw	r2, #699	; 0x2bb
 784:	ldr	r3, [pc, #960]	; b4c <main+0x7e0>
 788:	bl	0 <__assert_fail>
 78c:	mov	fp, #0
 790:	mov	r5, #0
 794:	ldr	r1, [pc, #932]	; b40 <main+0x7d4>
 798:	cmp	r1, #0
 79c:	movne	r3, #1
 7a0:	moveq	r3, #0
 7a4:	mov	ip, #0
 7a8:	cmp	r4, #0
 7ac:	movne	ip, r3
 7b0:	moveq	ip, ip
 7b4:	cmp	ip, #0
 7b8:	bne	7d0 <main+0x464>
 7bc:	ldr	r0, [pc, #880]	; b34 <main+0x7c8>
 7c0:	ldr	r1, [pc, #976]	; b98 <main+0x82c>
 7c4:	movw	r2, #706	; 0x2c2
 7c8:	ldr	r3, [pc, #1004]	; bbc <main+0x850>
 7cc:	bl	0 <__assert_fail>
 7d0:	ldr	ip, [r4]
 7d4:	sub	ip, r4, ip
 7d8:	ldrh	r1, [ip]
 7dc:	bic	r3, r1, #16711680	; 0xff0000
 7e0:	bic	r3, r3, #-16777216	; 0xff000000
 7e4:	cmp	r3, #16
 7e8:	bcc	7f8 <main+0x48c>
 7ec:	ldrh	r1, [ip, #14]
 7f0:	bic	r5, r1, #16711680	; 0xff0000
 7f4:	bic	r5, r5, #-16777216	; 0xff000000
 7f8:	cmp	r5, #0
 7fc:	beq	814 <main+0x4a8>
 800:	add	ip, r4, r5
 804:	ldr	r3, [ip]
 808:	add	r3, ip, r3
 80c:	add	r4, r3, #4
 810:	b	838 <main+0x4cc>
 814:	ldr	ip, [pc, #872]	; b84 <main+0x818>
 818:	cmp	ip, #0
 81c:	bne	834 <main+0x4c8>
 820:	ldr	r0, [pc, #812]	; b54 <main+0x7e8>
 824:	ldr	r1, [pc, #876]	; b98 <main+0x82c>
 828:	movw	r2, #706	; 0x2c2
 82c:	ldr	r3, [pc, #904]	; bbc <main+0x850>
 830:	bl	0 <__assert_fail>
 834:	mov	r4, #0
 838:	cmp	fp, #0
 83c:	beq	958 <main+0x5ec>
 840:	sub	lr, fp, #4096	; 0x1000
 844:	ldr	r0, [lr, #4092]	; 0xffc
 848:	cmp	r0, #700	; 0x2bc
 84c:	bne	958 <main+0x5ec>
 850:	mov	r0, r4
 854:	cmp	r0, #0
 858:	beq	93c <main+0x5d0>
 85c:	sub	lr, r0, #4096	; 0x1000
 860:	ldr	ip, [lr, #4092]	; 0xffc
 864:	movw	lr, #34464	; 0x86a0
 868:	movt	lr, #1
 86c:	cmp	ip, lr
 870:	bne	93c <main+0x5d0>
 874:	mov	r5, #0
 878:	mov	r0, #7
 87c:	mla	r0, r0, r5, fp
 880:	ldr	r1, [pc, #832]	; bc8 <main+0x85c>
 884:	mov	r2, #7
 888:	bl	0 <memcmp>
 88c:	cmp	r0, #0
 890:	beq	8e0 <main+0x574>
 894:	ldr	r1, [pc, #724]	; b70 <main+0x804>
 898:	cmp	fp, #0
 89c:	movne	r2, fp
 8a0:	moveq	r2, r1
 8a4:	ldr	r0, [pc, #804]	; bd0 <main+0x864>
 8a8:	mov	r1, r5
 8ac:	bl	0 <printf>
 8b0:	ldr	r0, [pc, #760]	; bb0 <main+0x844>
 8b4:	mov	r2, #7
 8b8:	mla	r1, r2, r5, fp
 8bc:	sub	r1, r1, r8
 8c0:	bl	0 <printf>
 8c4:	ldr	r0, [pc, #632]	; b44 <main+0x7d8>
 8c8:	ldr	r1, [pc, #664]	; b68 <main+0x7fc>
 8cc:	mov	r2, #85	; 0x55
 8d0:	ldr	r3, [pc, #648]	; b60 <main+0x7f4>
 8d4:	bl	0 <__assert_fail>
 8d8:	mvn	r3, #0
 8dc:	b	970 <main+0x604>
 8e0:	add	r5, r5, #1
 8e4:	cmp	r5, #100	; 0x64
 8e8:	bcc	878 <main+0x50c>
 8ec:	mov	r5, #0
 8f0:	mov	r2, #1000	; 0x3e8
 8f4:	mla	r0, r2, r5, r4
 8f8:	ldr	r1, [pc, #572]	; b3c <main+0x7d0>
 8fc:	mov	r2, #1000	; 0x3e8
 900:	bl	0 <memcmp>
 904:	cmp	r0, #0
 908:	beq	928 <main+0x5bc>
 90c:	ldr	r0, [pc, #560]	; b44 <main+0x7d8>
 910:	ldr	r1, [pc, #592]	; b68 <main+0x7fc>
 914:	mov	r2, #91	; 0x5b
 918:	ldr	r3, [pc, #576]	; b60 <main+0x7f4>
 91c:	bl	0 <__assert_fail>
 920:	mvn	r3, #0
 924:	b	970 <main+0x604>
 928:	add	r5, r5, #1
 92c:	cmp	r5, #100	; 0x64
 930:	bcc	8f0 <main+0x584>
 934:	mov	r3, #0
 938:	b	970 <main+0x604>
 93c:	ldr	r0, [pc, #512]	; b44 <main+0x7d8>
 940:	ldr	r1, [pc, #544]	; b68 <main+0x7fc>
 944:	mov	r2, #78	; 0x4e
 948:	ldr	r3, [pc, #528]	; b60 <main+0x7f4>
 94c:	bl	0 <__assert_fail>
 950:	mvn	r3, #0
 954:	b	970 <main+0x604>
 958:	ldr	r0, [pc, #484]	; b44 <main+0x7d8>
 95c:	ldr	r1, [pc, #516]	; b68 <main+0x7fc>
 960:	mov	r2, #74	; 0x4a
 964:	ldr	r3, [pc, #500]	; b60 <main+0x7f4>
 968:	bl	0 <__assert_fail>
 96c:	mvn	r3, #0
 970:	orr	r7, r7, r3
 974:	cmp	r7, #0
 978:	beq	990 <main+0x624>
 97c:	ldr	r0, [pc, #524]	; b90 <main+0x824>
 980:	ldr	r1, [pc, #480]	; b68 <main+0x7fc>
 984:	mov	r2, #147	; 0x93
 988:	ldr	r3, [pc, #448]	; b50 <main+0x7e4>
 98c:	bl	0 <__assert_fail>
 990:	add	r9, r9, #1
 994:	cmp	r9, #1000	; 0x3e8
 998:	blt	680 <main+0x314>
 99c:	cmp	r7, #0
 9a0:	bne	adc <main+0x770>
 9a4:	add	sl, sl, #1
 9a8:	cmp	sl, #10
 9ac:	blt	43c <main+0xd0>
 9b0:	bl	0 <elapsed_realtime>
 9b4:	ldr	r1, [pc, #480]	; b9c <main+0x830>
 9b8:	ldr	r6, [sp, #56]	; 0x38
 9bc:	mov	r5, #0
 9c0:	mov	r4, #10
 9c4:	vsub.f64	d8, d0, d8
 9c8:	ldr	r0, [pc, #444]	; b8c <main+0x820>
 9cc:	bl	0 <printf>
 9d0:	ldr	r0, [pc, #368]	; b48 <main+0x7dc>
 9d4:	vmov.f64	d2, d8
 9d8:	vmov	r2, r3, d2
 9dc:	bl	0 <printf>
 9e0:	ldr	r0, [pc, #440]	; ba0 <main+0x834>
 9e4:	mov	r1, r4
 9e8:	bl	0 <printf>
 9ec:	ldr	r0, [pc, #396]	; b80 <main+0x814>
 9f0:	mov	r1, r6
 9f4:	bl	0 <printf>
 9f8:	ldr	r0, [pc, #312]	; b38 <main+0x7cc>
 9fc:	vmov.f64	d2, #36	; 0x41200000  10.0
 a00:	vmov	s2, r6
 a04:	vcvt.f64.u32	d1, s2
 a08:	vmul.f64	d0, d2, d1
 a0c:	vldr	d4, [pc, #456]	; bdc <main+0x870>
 a10:	vdiv.f64	d3, d0, d4
 a14:	vdiv.f64	d2, d3, d8
 a18:	vmov	r2, r3, d2
 a1c:	bl	0 <printf>
 a20:	ldr	r0, [pc, #316]	; b64 <main+0x7f8>
 a24:	vmov.f64	d1, #36	; 0x41200000  10.0
 a28:	vdiv.f64	d2, d1, d8
 a2c:	vmov	r2, r3, d2
 a30:	bl	0 <printf>
 a34:	mov	r1, #0
 a38:	cmp	r1, #0
 a3c:	beq	a58 <main+0x6ec>
 a40:	ldr	r0, [pc, #276]	; b5c <main+0x7f0>
 a44:	vmov.f64	d7, #112	; 0x3f800000  1.0
 a48:	vdiv.f64	d2, d7, d8
 a4c:	mov	r1, r5
 a50:	vmov	r2, r3, d2
 a54:	bl	0 <printf>
 a58:	vldr	d0, [pc, #372]	; bd4 <main+0x868>
 a5c:	vmul.f64	d6, d8, d0
 a60:	vmov.f64	d2, #36	; 0x41200000  10.0
 a64:	vdiv.f64	d2, d6, d2
 a68:	vldr	d3, [pc, #372]	; be4 <main+0x878>
 a6c:	vcmp.f64	d2, d3
 a70:	vmrs	APSR_nzcv, fpscr
 a74:	bmi	ad0 <main+0x764>
 a78:	vldr	d1, [pc, #348]	; bdc <main+0x870>
 a7c:	vcmp.f64	d2, d1
 a80:	vmrs	APSR_nzcv, fpscr
 a84:	bmi	abc <main+0x750>
 a88:	vcmp.f64	d2, d0
 a8c:	vmrs	APSR_nzcv, fpscr
 a90:	bmi	aa8 <main+0x73c>
 a94:	ldr	r0, [pc, #188]	; b58 <main+0x7ec>
 a98:	vdiv.f64	d2, d2, d0
 a9c:	vmov	r2, r3, d2
 aa0:	bl	0 <printf>
 aa4:	b	adc <main+0x770>
 aa8:	ldr	r0, [pc, #228]	; b94 <main+0x828>
 aac:	vdiv.f64	d2, d2, d1
 ab0:	vmov	r2, r3, d2
 ab4:	bl	0 <printf>
 ab8:	b	adc <main+0x770>
 abc:	ldr	r0, [pc, #264]	; bcc <main+0x860>
 ac0:	vdiv.f64	d2, d2, d3
 ac4:	vmov	r2, r3, d2
 ac8:	bl	0 <printf>
 acc:	b	adc <main+0x770>
 ad0:	ldr	r0, [pc, #232]	; bc0 <main+0x854>
 ad4:	vmov	r2, r3, d2
 ad8:	bl	0 <printf>
 adc:	ldr	r0, [sp, #8]
 ae0:	bl	0 <flatcc_builder_clear>
 ae4:	mov	r0, r8
 ae8:	bl	0 <free>
 aec:	cmp	r7, #0
 af0:	beq	afc <main+0x790>
 af4:	ldr	r0, [pc, #172]	; ba8 <main+0x83c>
 af8:	bl	0 <printf>
 afc:	mov	r0, r7
 b00:	ldr	r4, [sp, #12]
 b04:	ldr	r5, [sp, #16]
 b08:	ldr	r6, [sp, #20]
 b0c:	ldr	r7, [sp, #24]
 b10:	ldr	r8, [sp, #28]
 b14:	ldr	r9, [sp, #32]
 b18:	ldr	sl, [sp, #36]	; 0x24
 b1c:	ldr	fp, [sp, #40]	; 0x28
 b20:	vldr	d8, [sp, #48]	; 0x30
 b24:	ldr	lr, [sp, #4]
 b28:	add	sp, sp, #304	; 0x130
 b2c:	bx	lr
 b30:	.word	0x0000008c
 b34:	.word	0x000000b4
 b38:	.word	0x0000035b
 b3c:	.word	0x00000008
 b40:	.word	0x00000115
 b44:	.word	0x00000454
 b48:	.word	0x0000049f
 b4c:	.word	0x000004d5
 b50:	.word	0x0000058e
 b54:	.word	0x00000209
 b58:	.word	0x00000397
 b5c:	.word	0x00000337
 b60:	.word	0x0000057f
 b64:	.word	0x0000030d
 b68:	.word	0x000003ef
 b6c:	.word	0x000000da
 b70:	.word	0x000001d1
 b74:	.word	0x0000022d
 b78:	.word	0x0000022a
 b7c:	.word	0x00000000
 b80:	.word	0x000001d6
 b84:	.word	0x00000380
 b88:	.word	0x000004b7
 b8c:	.word	0x00000091
 b90:	.word	0x0000032e
 b94:	.word	0x000002dd
 b98:	.word	0x00000264
 b9c:	.word	0x000003ae
 ba0:	.word	0x000003d7
 ba4:	.word	0x00000243
 ba8:	.word	0x00000456
 bac:	.word	0x00000468
 bb0:	.word	0x00000373
 bb4:	.word	0x000000a2
 bb8:	.word	0x00000108
 bbc:	.word	0x000004f1
 bc0:	.word	0x000002f5
 bc4:	.word	0x00000512
 bc8:	.word	0x000003e7
 bcc:	.word	0x000000f0
 bd0:	.word	0x000001e9
 bd4:	.word	0x00000000
 bd8:	.word	0x41cdcd65
 bdc:	.word	0x00000000
 be0:	.word	0x412e8480
 be4:	.word	0x00000000
 be8:	.word	0x408f4000
