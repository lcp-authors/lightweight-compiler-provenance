
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/zlib/crc32.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_crc_table>:
   0:	movw	r0, #0
   4:	movt	r0, #0
   8:	bx	lr

0000000c <coda_crc32>:
   c:	cmp	r1, #0
  10:	moveq	r0, #0
  14:	bxeq	lr
  18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1c:	add	fp, sp, #28
  20:	sub	sp, sp, #8
  24:	mvn	r3, r0
  28:	cmp	r2, #0
  2c:	beq	a0 <coda_crc32+0x94>
  30:	movw	lr, #0
  34:	sub	r2, r2, #32
  38:	movt	lr, #0
  3c:	tst	r1, #3
  40:	beq	68 <coda_crc32+0x5c>
  44:	ldrb	r0, [r1], #1
  48:	uxtb	r6, r3
  4c:	sub	r2, r2, #1
  50:	cmn	r2, #32
  54:	eor	r0, r6, r0
  58:	ldr	r0, [lr, r0, lsl #2]
  5c:	eor	r3, r0, r3, lsr #8
  60:	bne	3c <coda_crc32+0x30>
  64:	b	a0 <coda_crc32+0x94>
  68:	add	r0, r2, #32
  6c:	cmp	r0, #32
  70:	bcs	ac <coda_crc32+0xa0>
  74:	cmp	r0, #4
  78:	bcs	294 <coda_crc32+0x288>
  7c:	cmp	r0, #0
  80:	beq	a0 <coda_crc32+0x94>
  84:	ldrb	r2, [r1], #1
  88:	uxtb	r7, r3
  8c:	subs	r0, r0, #1
  90:	eor	r2, r7, r2
  94:	ldr	r2, [lr, r2, lsl #2]
  98:	eor	r3, r2, r3, lsr #8
  9c:	bne	84 <coda_crc32+0x78>
  a0:	mvn	r0, r3
  a4:	sub	sp, fp, #28
  a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ac:	mov	sl, #0
  b0:	add	r8, lr, #3072	; 0xc00
  b4:	add	r4, lr, #2048	; 0x800
  b8:	add	r5, lr, #1024	; 0x400
  bc:	mov	r6, r1
  c0:	ldr	r7, [r6, -sl]!
  c4:	eor	r3, r7, r3
  c8:	uxtb	r7, r3
  cc:	ubfx	r0, r3, #8, #8
  d0:	ldr	r7, [r8, r7, lsl #2]
  d4:	ldr	r0, [r4, r0, lsl #2]
  d8:	eor	r0, r0, r7
  dc:	ubfx	r7, r3, #16, #8
  e0:	lsr	r3, r3, #24
  e4:	ldr	r7, [r5, r7, lsl #2]
  e8:	ldr	r3, [lr, r3, lsl #2]
  ec:	eor	r0, r0, r7
  f0:	ldmib	r6, {r7, r9}
  f4:	eor	r0, r0, r3
  f8:	ldr	r3, [r6, #12]
  fc:	eor	r0, r0, r7
 100:	str	r3, [sp]
 104:	ldr	r3, [r6, #16]
 108:	uxtb	r7, r0
 10c:	ldr	r7, [r8, r7, lsl #2]
 110:	str	r3, [sp, #4]
 114:	ubfx	ip, r0, #8, #8
 118:	ldr	r3, [r4, ip, lsl #2]
 11c:	eor	r3, r3, r7
 120:	ubfx	r7, r0, #16, #8
 124:	lsr	r0, r0, #24
 128:	ldr	r7, [r5, r7, lsl #2]
 12c:	ldr	r0, [lr, r0, lsl #2]
 130:	eor	r3, r3, r7
 134:	eor	r0, r3, r0
 138:	eor	r0, r0, r9
 13c:	uxtb	r3, r0
 140:	ubfx	r7, r0, #8, #8
 144:	ldr	r3, [r8, r3, lsl #2]
 148:	ldr	r7, [r4, r7, lsl #2]
 14c:	eor	r3, r7, r3
 150:	ubfx	r7, r0, #16, #8
 154:	lsr	r0, r0, #24
 158:	ldr	r7, [r5, r7, lsl #2]
 15c:	ldr	r0, [lr, r0, lsl #2]
 160:	eor	r3, r3, r7
 164:	eor	r0, r3, r0
 168:	ldr	r3, [sp]
 16c:	eor	r0, r0, r3
 170:	uxtb	r3, r0
 174:	ubfx	r7, r0, #8, #8
 178:	ldr	r3, [r8, r3, lsl #2]
 17c:	ldr	r7, [r4, r7, lsl #2]
 180:	eor	r3, r7, r3
 184:	ubfx	r7, r0, #16, #8
 188:	lsr	r0, r0, #24
 18c:	ldr	r7, [r5, r7, lsl #2]
 190:	ldr	r0, [lr, r0, lsl #2]
 194:	eor	r3, r3, r7
 198:	eor	r0, r3, r0
 19c:	ldr	r3, [sp, #4]
 1a0:	eor	r0, r0, r3
 1a4:	uxtb	r3, r0
 1a8:	ubfx	r7, r0, #8, #8
 1ac:	ldr	r3, [r8, r3, lsl #2]
 1b0:	ldr	r7, [r4, r7, lsl #2]
 1b4:	eor	r3, r7, r3
 1b8:	ubfx	r7, r0, #16, #8
 1bc:	lsr	r0, r0, #24
 1c0:	ldr	r7, [r5, r7, lsl #2]
 1c4:	ldr	r0, [lr, r0, lsl #2]
 1c8:	eor	r3, r3, r7
 1cc:	eor	r0, r3, r0
 1d0:	ldr	r3, [r6, #20]
 1d4:	eor	r0, r0, r3
 1d8:	uxtb	r3, r0
 1dc:	ubfx	r7, r0, #8, #8
 1e0:	ldr	r3, [r8, r3, lsl #2]
 1e4:	ldr	r7, [r4, r7, lsl #2]
 1e8:	eor	r3, r7, r3
 1ec:	ubfx	r7, r0, #16, #8
 1f0:	lsr	r0, r0, #24
 1f4:	ldr	r7, [r5, r7, lsl #2]
 1f8:	ldr	r0, [lr, r0, lsl #2]
 1fc:	eor	r3, r3, r7
 200:	eor	r0, r3, r0
 204:	ldr	r3, [r6, #24]
 208:	eor	r0, r0, r3
 20c:	uxtb	r3, r0
 210:	ubfx	r7, r0, #8, #8
 214:	ldr	r3, [r8, r3, lsl #2]
 218:	ldr	r7, [r4, r7, lsl #2]
 21c:	eor	r3, r7, r3
 220:	ubfx	r7, r0, #16, #8
 224:	lsr	r0, r0, #24
 228:	ldr	r7, [r5, r7, lsl #2]
 22c:	ldr	r0, [lr, r0, lsl #2]
 230:	eor	r3, r3, r7
 234:	eor	r0, r3, r0
 238:	ldr	r3, [r6, #28]
 23c:	eor	r0, r0, r3
 240:	uxtb	r3, r0
 244:	ubfx	r7, r0, #8, #8
 248:	ldr	r3, [r8, r3, lsl #2]
 24c:	ldr	r7, [r4, r7, lsl #2]
 250:	eor	r3, r7, r3
 254:	ubfx	r7, r0, #16, #8
 258:	lsr	r0, r0, #24
 25c:	ldr	r7, [r5, r7, lsl #2]
 260:	ldr	r0, [lr, r0, lsl #2]
 264:	eor	r3, r3, r7
 268:	eor	r3, r3, r0
 26c:	add	r0, r2, sl
 270:	sub	sl, sl, #32
 274:	cmp	r0, #31
 278:	bhi	bc <coda_crc32+0xb0>
 27c:	bic	r6, r2, #31
 280:	add	r1, r1, r6
 284:	sub	r0, r2, r6
 288:	add	r1, r1, #32
 28c:	cmp	r0, #4
 290:	bcc	7c <coda_crc32+0x70>
 294:	sub	r2, r0, #4
 298:	mov	r5, r1
 29c:	lsr	r6, r2, #2
 2a0:	ldr	r7, [r5], #4
 2a4:	sub	r0, r0, #4
 2a8:	cmp	r0, #3
 2ac:	eor	r3, r7, r3
 2b0:	uxtb	r7, r3
 2b4:	ubfx	r4, r3, #8, #8
 2b8:	add	r7, lr, r7, lsl #2
 2bc:	add	r4, lr, r4, lsl #2
 2c0:	ldr	r7, [r7, #3072]	; 0xc00
 2c4:	ldr	r4, [r4, #2048]	; 0x800
 2c8:	eor	r7, r4, r7
 2cc:	ubfx	r4, r3, #16, #8
 2d0:	lsr	r3, r3, #24
 2d4:	add	r4, lr, r4, lsl #2
 2d8:	ldr	r3, [lr, r3, lsl #2]
 2dc:	ldr	r4, [r4, #1024]	; 0x400
 2e0:	eor	r7, r7, r4
 2e4:	eor	r3, r7, r3
 2e8:	bhi	2a0 <coda_crc32+0x294>
 2ec:	add	r0, r1, r6, lsl #2
 2f0:	add	r1, r0, #4
 2f4:	and	r0, r2, #3
 2f8:	cmp	r0, #0
 2fc:	bne	84 <coda_crc32+0x78>
 300:	b	a0 <coda_crc32+0x94>

00000304 <coda_crc32_combine>:
 304:	b	310 <crc32_combine_>
 308:	nop	{0}
 30c:	nop	{0}

00000310 <crc32_combine_>:
 310:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 314:	add	fp, sp, #24
 318:	sub	sp, sp, #256	; 0x100
 31c:	cmp	r2, #1
 320:	blt	5ac <crc32_combine_+0x29c>
 324:	add	lr, pc, #660	; 0x294
 328:	add	r8, pc, #672	; 0x2a0
 32c:	add	r6, pc, #684	; 0x2ac
 330:	add	r5, pc, #696	; 0x2b8
 334:	add	r4, pc, #708	; 0x2c4
 338:	add	r3, pc, #720	; 0x2d0
 33c:	add	r7, pc, #732	; 0x2dc
 340:	mov	ip, sp
 344:	vld1.64	{d16-d17}, [r7 :128]
 348:	vld1.64	{d18-d19}, [r3 :128]
 34c:	add	r7, pc, #732	; 0x2dc
 350:	add	r3, ip, #16
 354:	vld1.64	{d22-d23}, [r4 :128]
 358:	vld1.64	{d24-d25}, [r5 :128]
 35c:	vld1.64	{d26-d27}, [r6 :128]
 360:	vld1.64	{d28-d29}, [r8 :128]
 364:	vld1.64	{d30-d31}, [lr :128]
 368:	movw	r5, #33568	; 0x8320
 36c:	mov	r4, #0
 370:	add	lr, sp, #128	; 0x80
 374:	mov	r8, #0
 378:	vld1.64	{d20-d21}, [r7 :128]
 37c:	mov	r7, ip
 380:	movt	r5, #60856	; 0xedb8
 384:	vst1.32	{d16-d17}, [r3]
 388:	add	r3, ip, #32
 38c:	vst1.32	{d18-d19}, [r3]
 390:	add	r3, ip, #48	; 0x30
 394:	vst1.32	{d20-d21}, [r3]
 398:	add	r3, ip, #64	; 0x40
 39c:	vst1.32	{d22-d23}, [r3]
 3a0:	add	r3, ip, #80	; 0x50
 3a4:	vst1.32	{d24-d25}, [r3]
 3a8:	add	r3, ip, #96	; 0x60
 3ac:	vst1.32	{d26-d27}, [r3]
 3b0:	mov	r3, #112	; 0x70
 3b4:	vst1.32	{d28-d29}, [r7], r3
 3b8:	vst1.32	{d30-d31}, [r7]
 3bc:	b	3c4 <crc32_combine_+0xb4>
 3c0:	ldr	r5, [ip, r8, lsl #2]
 3c4:	cmp	r5, #0
 3c8:	mov	r6, #0
 3cc:	beq	3f8 <crc32_combine_+0xe8>
 3d0:	mov	r6, #0
 3d4:	mov	r7, ip
 3d8:	tst	r5, #1
 3dc:	ldrne	r3, [r7]
 3e0:	add	r7, r7, #4
 3e4:	eorne	r6, r3, r6
 3e8:	lsr	r3, r5, #1
 3ec:	cmp	r4, r5, lsr #1
 3f0:	mov	r5, r3
 3f4:	bne	3d8 <crc32_combine_+0xc8>
 3f8:	str	r6, [lr, r8, lsl #2]
 3fc:	add	r8, r8, #1
 400:	cmp	r8, #32
 404:	bne	3c0 <crc32_combine_+0xb0>
 408:	mov	r3, #0
 40c:	mov	ip, sp
 410:	mov	r8, #0
 414:	ldr	r6, [lr, r8, lsl #2]
 418:	mov	r5, #0
 41c:	cmp	r6, #0
 420:	beq	44c <crc32_combine_+0x13c>
 424:	mov	r5, #0
 428:	mov	r7, lr
 42c:	tst	r6, #1
 430:	ldrne	r4, [r7]
 434:	add	r7, r7, #4
 438:	eorne	r5, r4, r5
 43c:	lsr	r4, r6, #1
 440:	cmp	r3, r6, lsr #1
 444:	mov	r6, r4
 448:	bne	42c <crc32_combine_+0x11c>
 44c:	str	r5, [ip, r8, lsl #2]
 450:	add	r8, r8, #1
 454:	cmp	r8, #32
 458:	bne	414 <crc32_combine_+0x104>
 45c:	add	lr, sp, #128	; 0x80
 460:	mov	r3, #0
 464:	mov	r8, r2
 468:	mov	r2, #0
 46c:	ldr	r6, [ip, r2, lsl #2]
 470:	mov	r5, #0
 474:	cmp	r6, #0
 478:	beq	4a0 <crc32_combine_+0x190>
 47c:	mov	r7, ip
 480:	tst	r6, #1
 484:	ldrne	r4, [r7]
 488:	add	r7, r7, #4
 48c:	eorne	r5, r4, r5
 490:	lsr	r4, r6, #1
 494:	cmp	r3, r6, lsr #1
 498:	mov	r6, r4
 49c:	bne	480 <crc32_combine_+0x170>
 4a0:	str	r5, [lr, r2, lsl #2]
 4a4:	add	r2, r2, #1
 4a8:	cmp	r2, #32
 4ac:	bne	46c <crc32_combine_+0x15c>
 4b0:	tst	r8, #1
 4b4:	bne	4c8 <crc32_combine_+0x1b8>
 4b8:	mov	r2, r0
 4bc:	cmp	r8, #2
 4c0:	bcs	504 <crc32_combine_+0x1f4>
 4c4:	b	5a4 <crc32_combine_+0x294>
 4c8:	mov	r2, #0
 4cc:	cmp	r0, #0
 4d0:	beq	4fc <crc32_combine_+0x1ec>
 4d4:	mov	r2, #0
 4d8:	mov	r5, lr
 4dc:	tst	r0, #1
 4e0:	ldrne	r4, [r5]
 4e4:	add	r5, r5, #4
 4e8:	eorne	r2, r4, r2
 4ec:	lsr	r4, r0, #1
 4f0:	cmp	r3, r0, lsr #1
 4f4:	mov	r0, r4
 4f8:	bne	4dc <crc32_combine_+0x1cc>
 4fc:	cmp	r8, #2
 500:	bcc	5a4 <crc32_combine_+0x294>
 504:	mov	r0, #0
 508:	ldr	r6, [lr, r0, lsl #2]
 50c:	mov	r5, #0
 510:	cmp	r6, #0
 514:	beq	540 <crc32_combine_+0x230>
 518:	mov	r5, #0
 51c:	mov	r7, lr
 520:	tst	r6, #1
 524:	ldrne	r4, [r7]
 528:	add	r7, r7, #4
 52c:	eorne	r5, r4, r5
 530:	lsr	r4, r6, #1
 534:	cmp	r3, r6, lsr #1
 538:	mov	r6, r4
 53c:	bne	520 <crc32_combine_+0x210>
 540:	str	r5, [ip, r0, lsl #2]
 544:	add	r0, r0, #1
 548:	cmp	r0, #32
 54c:	bne	508 <crc32_combine_+0x1f8>
 550:	tst	r8, #2
 554:	bne	560 <crc32_combine_+0x250>
 558:	mov	r0, r2
 55c:	b	594 <crc32_combine_+0x284>
 560:	mov	r0, #0
 564:	cmp	r2, #0
 568:	beq	594 <crc32_combine_+0x284>
 56c:	mov	r0, #0
 570:	mov	r5, ip
 574:	tst	r2, #1
 578:	ldrne	r4, [r5]
 57c:	add	r5, r5, #4
 580:	eorne	r0, r4, r0
 584:	lsr	r4, r2, #1
 588:	cmp	r3, r2, lsr #1
 58c:	mov	r2, r4
 590:	bne	574 <crc32_combine_+0x264>
 594:	asr	r2, r8, #2
 598:	cmp	r3, r8, asr #2
 59c:	bne	464 <crc32_combine_+0x154>
 5a0:	b	5a8 <crc32_combine_+0x298>
 5a4:	mov	r0, r2
 5a8:	eor	r0, r0, r1
 5ac:	sub	sp, fp, #24
 5b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 5b4:	nop	{0}
 5b8:	nop	{0}
 5bc:	nop	{0}
 5c0:	.word	0x08000000
 5c4:	.word	0x10000000
 5c8:	.word	0x20000000
 5cc:	.word	0x40000000
 5d0:	.word	0xedb88320
 5d4:	.word	0x00000001
 5d8:	.word	0x00000002
 5dc:	.word	0x00000004
 5e0:	.word	0x00800000
 5e4:	.word	0x01000000
 5e8:	.word	0x02000000
 5ec:	.word	0x04000000
 5f0:	.word	0x00080000
 5f4:	.word	0x00100000
 5f8:	.word	0x00200000
 5fc:	.word	0x00400000
 600:	.word	0x00008000
 604:	.word	0x00010000
 608:	.word	0x00020000
 60c:	.word	0x00040000
 610:	.word	0x00000080
 614:	.word	0x00000100
 618:	.word	0x00000200
 61c:	.word	0x00000400
 620:	.word	0x00000008
 624:	.word	0x00000010
 628:	.word	0x00000020
 62c:	.word	0x00000040
 630:	.word	0x00000800
 634:	.word	0x00001000
 638:	.word	0x00002000
 63c:	.word	0x00004000

00000640 <coda_crc32_combine64>:
 640:	b	310 <crc32_combine_>
