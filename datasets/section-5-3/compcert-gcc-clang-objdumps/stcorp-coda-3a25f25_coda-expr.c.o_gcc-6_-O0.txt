
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ipow>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #28
       c:	vstr	d0, [fp, #-20]	; 0xffffffec
      10:	str	r0, [fp, #-24]	; 0xffffffe8
      14:	mov	r2, #0
      18:	ldr	r3, [pc, #144]	; b0 <ipow+0xb0>
      1c:	strd	r2, [fp, #-12]
      20:	ldr	r3, [fp, #-24]	; 0xffffffe8
      24:	cmp	r3, #0
      28:	bge	78 <ipow+0x78>
      2c:	b	40 <ipow+0x40>
      30:	vldr	d6, [fp, #-12]
      34:	vldr	d7, [fp, #-20]	; 0xffffffec
      38:	vmul.f64	d7, d6, d7
      3c:	vstr	d7, [fp, #-12]
      40:	ldr	r3, [fp, #-24]	; 0xffffffe8
      44:	add	r2, r3, #1
      48:	str	r2, [fp, #-24]	; 0xffffffe8
      4c:	cmp	r3, #0
      50:	bne	30 <ipow+0x30>
      54:	vldr	d5, [pc, #76]	; a8 <ipow+0xa8>
      58:	vldr	d6, [fp, #-12]
      5c:	vdiv.f64	d7, d5, d6
      60:	vstr	d7, [fp, #-12]
      64:	b	8c <ipow+0x8c>
      68:	vldr	d6, [fp, #-12]
      6c:	vldr	d7, [fp, #-20]	; 0xffffffec
      70:	vmul.f64	d7, d6, d7
      74:	vstr	d7, [fp, #-12]
      78:	ldr	r3, [fp, #-24]	; 0xffffffe8
      7c:	sub	r2, r3, #1
      80:	str	r2, [fp, #-24]	; 0xffffffe8
      84:	cmp	r3, #0
      88:	bne	68 <ipow+0x68>
      8c:	ldrd	r2, [fp, #-12]
      90:	vmov	d7, r2, r3
      94:	vmov.f64	d0, d7
      98:	add	sp, fp, #0
      9c:	pop	{fp}		; (ldr fp, [sp], #4)
      a0:	bx	lr
      a4:	nop			; (mov r0, r0)
      a8:	.word	0x00000000
      ac:	.word	0x3ff00000
      b0:	.word	0x3ff00000

000000b4 <iswhitespace>:
      b4:	push	{fp}		; (str fp, [sp, #-4]!)
      b8:	add	fp, sp, #0
      bc:	sub	sp, sp, #12
      c0:	mov	r3, r0
      c4:	strb	r3, [fp, #-5]
      c8:	ldrb	r3, [fp, #-5]
      cc:	cmp	r3, #32
      d0:	beq	f8 <iswhitespace+0x44>
      d4:	ldrb	r3, [fp, #-5]
      d8:	cmp	r3, #9
      dc:	beq	f8 <iswhitespace+0x44>
      e0:	ldrb	r3, [fp, #-5]
      e4:	cmp	r3, #10
      e8:	beq	f8 <iswhitespace+0x44>
      ec:	ldrb	r3, [fp, #-5]
      f0:	cmp	r3, #13
      f4:	bne	100 <iswhitespace+0x4c>
      f8:	mov	r3, #1
      fc:	b	104 <iswhitespace+0x50>
     100:	mov	r3, #0
     104:	mov	r0, r3
     108:	add	sp, fp, #0
     10c:	pop	{fp}		; (ldr fp, [sp], #4)
     110:	bx	lr

00000114 <compare_strings>:
     114:	push	{fp}		; (str fp, [sp, #-4]!)
     118:	add	fp, sp, #0
     11c:	sub	sp, sp, #28
     120:	str	r0, [fp, #-16]
     124:	str	r1, [fp, #-20]	; 0xffffffec
     128:	str	r2, [fp, #-24]	; 0xffffffe8
     12c:	str	r3, [fp, #-28]	; 0xffffffe4
     130:	mov	r3, #0
     134:	str	r3, [fp, #-8]
     138:	b	148 <compare_strings+0x34>
     13c:	ldr	r3, [fp, #-8]
     140:	add	r3, r3, #1
     144:	str	r3, [fp, #-8]
     148:	ldr	r2, [fp, #-8]
     14c:	ldr	r3, [fp, #-20]	; 0xffffffec
     150:	cmp	r2, r3
     154:	bge	1a8 <compare_strings+0x94>
     158:	ldr	r2, [fp, #-8]
     15c:	ldr	r3, [fp, #4]
     160:	cmp	r2, r3
     164:	bge	1a8 <compare_strings+0x94>
     168:	ldr	r2, [fp, #-16]
     16c:	ldr	r3, [fp, #-8]
     170:	add	r3, r2, r3
     174:	mov	r2, r3
     178:	ldr	r3, [fp, #-24]	; 0xffffffe8
     17c:	add	r3, r3, r2
     180:	ldrb	r2, [r3]
     184:	ldr	r1, [fp, #-28]	; 0xffffffe4
     188:	ldr	r3, [fp, #-8]
     18c:	add	r3, r1, r3
     190:	mov	r1, r3
     194:	ldr	r3, [fp, #8]
     198:	add	r3, r3, r1
     19c:	ldrb	r3, [r3]
     1a0:	cmp	r2, r3
     1a4:	beq	13c <compare_strings+0x28>
     1a8:	ldr	r2, [fp, #-8]
     1ac:	ldr	r3, [fp, #-20]	; 0xffffffec
     1b0:	cmp	r2, r3
     1b4:	bne	1d8 <compare_strings+0xc4>
     1b8:	ldr	r2, [fp, #-8]
     1bc:	ldr	r3, [fp, #4]
     1c0:	cmp	r2, r3
     1c4:	bne	1d0 <compare_strings+0xbc>
     1c8:	mov	r3, #0
     1cc:	b	234 <compare_strings+0x120>
     1d0:	mvn	r3, #0
     1d4:	b	234 <compare_strings+0x120>
     1d8:	ldr	r2, [fp, #-8]
     1dc:	ldr	r3, [fp, #4]
     1e0:	cmp	r2, r3
     1e4:	beq	228 <compare_strings+0x114>
     1e8:	ldr	r2, [fp, #-16]
     1ec:	ldr	r3, [fp, #-8]
     1f0:	add	r3, r2, r3
     1f4:	mov	r2, r3
     1f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     1fc:	add	r3, r3, r2
     200:	ldrb	r2, [r3]
     204:	ldr	r1, [fp, #-28]	; 0xffffffe4
     208:	ldr	r3, [fp, #-8]
     20c:	add	r3, r1, r3
     210:	mov	r1, r3
     214:	ldr	r3, [fp, #8]
     218:	add	r3, r3, r1
     21c:	ldrb	r3, [r3]
     220:	cmp	r2, r3
     224:	bls	230 <compare_strings+0x11c>
     228:	mov	r3, #1
     22c:	b	234 <compare_strings+0x120>
     230:	mvn	r3, #0
     234:	mov	r0, r3
     238:	add	sp, fp, #0
     23c:	pop	{fp}		; (ldr fp, [sp], #4)
     240:	bx	lr

00000244 <decode_escaped_string>:
     244:	push	{fp, lr}
     248:	add	fp, sp, #4
     24c:	sub	sp, sp, #16
     250:	str	r0, [fp, #-16]
     254:	ldr	r3, [fp, #-16]
     258:	cmp	r3, #0
     25c:	bne	268 <decode_escaped_string+0x24>
     260:	mov	r3, #0
     264:	b	7b4 <decode_escaped_string+0x570>
     268:	mov	r3, #0
     26c:	str	r3, [fp, #-8]
     270:	mov	r3, #0
     274:	str	r3, [fp, #-12]
     278:	b	784 <decode_escaped_string+0x540>
     27c:	ldr	r3, [fp, #-8]
     280:	ldr	r2, [fp, #-16]
     284:	add	r3, r2, r3
     288:	ldrb	r3, [r3]
     28c:	cmp	r3, #92	; 0x5c
     290:	bne	74c <decode_escaped_string+0x508>
     294:	ldr	r3, [fp, #-8]
     298:	add	r3, r3, #1
     29c:	str	r3, [fp, #-8]
     2a0:	ldr	r3, [fp, #-8]
     2a4:	ldr	r2, [fp, #-16]
     2a8:	add	r3, r2, r3
     2ac:	ldrb	r3, [r3]
     2b0:	sub	r3, r3, #34	; 0x22
     2b4:	cmp	r3, #84	; 0x54
     2b8:	ldrls	pc, [pc, r3, lsl #2]
     2bc:	b	5a0 <decode_escaped_string+0x35c>
     2c0:	.word	0x00000558
     2c4:	.word	0x000005a0
     2c8:	.word	0x000005a0
     2cc:	.word	0x000005a0
     2d0:	.word	0x000005a0
     2d4:	.word	0x0000057c
     2d8:	.word	0x000005a0
     2dc:	.word	0x000005a0
     2e0:	.word	0x000005a0
     2e4:	.word	0x000005a0
     2e8:	.word	0x000005a0
     2ec:	.word	0x000005a0
     2f0:	.word	0x000005a0
     2f4:	.word	0x000005a0
     2f8:	.word	0x000005a0
     2fc:	.word	0x000005a0
     300:	.word	0x000005a0
     304:	.word	0x000005a0
     308:	.word	0x000005a0
     30c:	.word	0x000005a0
     310:	.word	0x000005a0
     314:	.word	0x000005a0
     318:	.word	0x000005a0
     31c:	.word	0x000005a0
     320:	.word	0x000005a0
     324:	.word	0x000005a0
     328:	.word	0x000005a0
     32c:	.word	0x000005a0
     330:	.word	0x000005a0
     334:	.word	0x000005a0
     338:	.word	0x000005a0
     33c:	.word	0x000005a0
     340:	.word	0x000005a0
     344:	.word	0x000005a0
     348:	.word	0x000005a0
     34c:	.word	0x000005a0
     350:	.word	0x000005a0
     354:	.word	0x000005a0
     358:	.word	0x000005a0
     35c:	.word	0x000005a0
     360:	.word	0x000005a0
     364:	.word	0x000005a0
     368:	.word	0x000005a0
     36c:	.word	0x000005a0
     370:	.word	0x000005a0
     374:	.word	0x000005a0
     378:	.word	0x000005a0
     37c:	.word	0x000005a0
     380:	.word	0x000005a0
     384:	.word	0x000005a0
     388:	.word	0x000005a0
     38c:	.word	0x000005a0
     390:	.word	0x000005a0
     394:	.word	0x000005a0
     398:	.word	0x000005a0
     39c:	.word	0x000005a0
     3a0:	.word	0x000005a0
     3a4:	.word	0x000005a0
     3a8:	.word	0x00000534
     3ac:	.word	0x000005a0
     3b0:	.word	0x000005a0
     3b4:	.word	0x000005a0
     3b8:	.word	0x000005a0
     3bc:	.word	0x00000438
     3c0:	.word	0x0000045c
     3c4:	.word	0x000005a0
     3c8:	.word	0x000005a0
     3cc:	.word	0x00000414
     3d0:	.word	0x00000480
     3d4:	.word	0x000005a0
     3d8:	.word	0x000005a0
     3dc:	.word	0x000005a0
     3e0:	.word	0x000005a0
     3e4:	.word	0x000005a0
     3e8:	.word	0x000005a0
     3ec:	.word	0x000005a0
     3f0:	.word	0x000004a4
     3f4:	.word	0x000005a0
     3f8:	.word	0x000005a0
     3fc:	.word	0x000005a0
     400:	.word	0x000004c8
     404:	.word	0x000005a0
     408:	.word	0x000004ec
     40c:	.word	0x000005a0
     410:	.word	0x00000510
     414:	ldr	r3, [fp, #-12]
     418:	add	r2, r3, #1
     41c:	str	r2, [fp, #-12]
     420:	mov	r2, r3
     424:	ldr	r3, [fp, #-16]
     428:	add	r3, r3, r2
     42c:	mov	r2, #27
     430:	strb	r2, [r3]
     434:	b	778 <decode_escaped_string+0x534>
     438:	ldr	r3, [fp, #-12]
     43c:	add	r2, r3, #1
     440:	str	r2, [fp, #-12]
     444:	mov	r2, r3
     448:	ldr	r3, [fp, #-16]
     44c:	add	r3, r3, r2
     450:	mov	r2, #7
     454:	strb	r2, [r3]
     458:	b	778 <decode_escaped_string+0x534>
     45c:	ldr	r3, [fp, #-12]
     460:	add	r2, r3, #1
     464:	str	r2, [fp, #-12]
     468:	mov	r2, r3
     46c:	ldr	r3, [fp, #-16]
     470:	add	r3, r3, r2
     474:	mov	r2, #8
     478:	strb	r2, [r3]
     47c:	b	778 <decode_escaped_string+0x534>
     480:	ldr	r3, [fp, #-12]
     484:	add	r2, r3, #1
     488:	str	r2, [fp, #-12]
     48c:	mov	r2, r3
     490:	ldr	r3, [fp, #-16]
     494:	add	r3, r3, r2
     498:	mov	r2, #12
     49c:	strb	r2, [r3]
     4a0:	b	778 <decode_escaped_string+0x534>
     4a4:	ldr	r3, [fp, #-12]
     4a8:	add	r2, r3, #1
     4ac:	str	r2, [fp, #-12]
     4b0:	mov	r2, r3
     4b4:	ldr	r3, [fp, #-16]
     4b8:	add	r3, r3, r2
     4bc:	mov	r2, #10
     4c0:	strb	r2, [r3]
     4c4:	b	778 <decode_escaped_string+0x534>
     4c8:	ldr	r3, [fp, #-12]
     4cc:	add	r2, r3, #1
     4d0:	str	r2, [fp, #-12]
     4d4:	mov	r2, r3
     4d8:	ldr	r3, [fp, #-16]
     4dc:	add	r3, r3, r2
     4e0:	mov	r2, #13
     4e4:	strb	r2, [r3]
     4e8:	b	778 <decode_escaped_string+0x534>
     4ec:	ldr	r3, [fp, #-12]
     4f0:	add	r2, r3, #1
     4f4:	str	r2, [fp, #-12]
     4f8:	mov	r2, r3
     4fc:	ldr	r3, [fp, #-16]
     500:	add	r3, r3, r2
     504:	mov	r2, #9
     508:	strb	r2, [r3]
     50c:	b	778 <decode_escaped_string+0x534>
     510:	ldr	r3, [fp, #-12]
     514:	add	r2, r3, #1
     518:	str	r2, [fp, #-12]
     51c:	mov	r2, r3
     520:	ldr	r3, [fp, #-16]
     524:	add	r3, r3, r2
     528:	mov	r2, #11
     52c:	strb	r2, [r3]
     530:	b	778 <decode_escaped_string+0x534>
     534:	ldr	r3, [fp, #-12]
     538:	add	r2, r3, #1
     53c:	str	r2, [fp, #-12]
     540:	mov	r2, r3
     544:	ldr	r3, [fp, #-16]
     548:	add	r3, r3, r2
     54c:	mov	r2, #92	; 0x5c
     550:	strb	r2, [r3]
     554:	b	778 <decode_escaped_string+0x534>
     558:	ldr	r3, [fp, #-12]
     55c:	add	r2, r3, #1
     560:	str	r2, [fp, #-12]
     564:	mov	r2, r3
     568:	ldr	r3, [fp, #-16]
     56c:	add	r3, r3, r2
     570:	mov	r2, #34	; 0x22
     574:	strb	r2, [r3]
     578:	b	778 <decode_escaped_string+0x534>
     57c:	ldr	r3, [fp, #-12]
     580:	add	r2, r3, #1
     584:	str	r2, [fp, #-12]
     588:	mov	r2, r3
     58c:	ldr	r3, [fp, #-16]
     590:	add	r3, r3, r2
     594:	mov	r2, #39	; 0x27
     598:	strb	r2, [r3]
     59c:	b	778 <decode_escaped_string+0x534>
     5a0:	ldr	r3, [fp, #-8]
     5a4:	ldr	r2, [fp, #-16]
     5a8:	add	r3, r2, r3
     5ac:	ldrb	r3, [r3]
     5b0:	cmp	r3, #47	; 0x2f
     5b4:	bls	5d0 <decode_escaped_string+0x38c>
     5b8:	ldr	r3, [fp, #-8]
     5bc:	ldr	r2, [fp, #-16]
     5c0:	add	r3, r2, r3
     5c4:	ldrb	r3, [r3]
     5c8:	cmp	r3, #57	; 0x39
     5cc:	bls	5e4 <decode_escaped_string+0x3a0>
     5d0:	ldr	r1, [pc, #488]	; 7c0 <decode_escaped_string+0x57c>
     5d4:	mvn	r0, #102	; 0x66
     5d8:	bl	0 <coda_set_error>
     5dc:	mvn	r3, #0
     5e0:	b	7b4 <decode_escaped_string+0x570>
     5e4:	ldr	r3, [fp, #-12]
     5e8:	ldr	r2, [fp, #-16]
     5ec:	add	r3, r2, r3
     5f0:	ldr	r2, [fp, #-8]
     5f4:	ldr	r1, [fp, #-16]
     5f8:	add	r2, r1, r2
     5fc:	ldrb	r2, [r2]
     600:	sub	r2, r2, #48	; 0x30
     604:	uxtb	r2, r2
     608:	lsl	r2, r2, #6
     60c:	uxtb	r2, r2
     610:	strb	r2, [r3]
     614:	ldr	r3, [fp, #-8]
     618:	add	r3, r3, #1
     61c:	str	r3, [fp, #-8]
     620:	ldr	r3, [fp, #-8]
     624:	ldr	r2, [fp, #-16]
     628:	add	r3, r2, r3
     62c:	ldrb	r3, [r3]
     630:	cmp	r3, #47	; 0x2f
     634:	bls	650 <decode_escaped_string+0x40c>
     638:	ldr	r3, [fp, #-8]
     63c:	ldr	r2, [fp, #-16]
     640:	add	r3, r2, r3
     644:	ldrb	r3, [r3]
     648:	cmp	r3, #57	; 0x39
     64c:	bls	664 <decode_escaped_string+0x420>
     650:	ldr	r1, [pc, #360]	; 7c0 <decode_escaped_string+0x57c>
     654:	mvn	r0, #102	; 0x66
     658:	bl	0 <coda_set_error>
     65c:	mvn	r3, #0
     660:	b	7b4 <decode_escaped_string+0x570>
     664:	ldr	r3, [fp, #-12]
     668:	ldr	r2, [fp, #-16]
     66c:	add	r3, r2, r3
     670:	ldr	r2, [fp, #-12]
     674:	ldr	r1, [fp, #-16]
     678:	add	r2, r1, r2
     67c:	ldrb	r1, [r2]
     680:	ldr	r2, [fp, #-8]
     684:	ldr	r0, [fp, #-16]
     688:	add	r2, r0, r2
     68c:	ldrb	r2, [r2]
     690:	sub	r2, r2, #48	; 0x30
     694:	uxtb	r2, r2
     698:	lsl	r2, r2, #3
     69c:	uxtb	r2, r2
     6a0:	add	r2, r1, r2
     6a4:	uxtb	r2, r2
     6a8:	strb	r2, [r3]
     6ac:	ldr	r3, [fp, #-8]
     6b0:	add	r3, r3, #1
     6b4:	str	r3, [fp, #-8]
     6b8:	ldr	r3, [fp, #-8]
     6bc:	ldr	r2, [fp, #-16]
     6c0:	add	r3, r2, r3
     6c4:	ldrb	r3, [r3]
     6c8:	cmp	r3, #47	; 0x2f
     6cc:	bls	6e8 <decode_escaped_string+0x4a4>
     6d0:	ldr	r3, [fp, #-8]
     6d4:	ldr	r2, [fp, #-16]
     6d8:	add	r3, r2, r3
     6dc:	ldrb	r3, [r3]
     6e0:	cmp	r3, #57	; 0x39
     6e4:	bls	6fc <decode_escaped_string+0x4b8>
     6e8:	ldr	r1, [pc, #208]	; 7c0 <decode_escaped_string+0x57c>
     6ec:	mvn	r0, #102	; 0x66
     6f0:	bl	0 <coda_set_error>
     6f4:	mvn	r3, #0
     6f8:	b	7b4 <decode_escaped_string+0x570>
     6fc:	ldr	r3, [fp, #-12]
     700:	ldr	r2, [fp, #-16]
     704:	add	r3, r2, r3
     708:	ldr	r2, [fp, #-12]
     70c:	ldr	r1, [fp, #-16]
     710:	add	r2, r1, r2
     714:	ldrb	r1, [r2]
     718:	ldr	r2, [fp, #-8]
     71c:	ldr	r0, [fp, #-16]
     720:	add	r2, r0, r2
     724:	ldrb	r2, [r2]
     728:	add	r2, r1, r2
     72c:	uxtb	r2, r2
     730:	sub	r2, r2, #48	; 0x30
     734:	uxtb	r2, r2
     738:	strb	r2, [r3]
     73c:	ldr	r3, [fp, #-12]
     740:	add	r3, r3, #1
     744:	str	r3, [fp, #-12]
     748:	b	778 <decode_escaped_string+0x534>
     74c:	ldr	r3, [fp, #-12]
     750:	add	r2, r3, #1
     754:	str	r2, [fp, #-12]
     758:	mov	r2, r3
     75c:	ldr	r3, [fp, #-16]
     760:	add	r3, r3, r2
     764:	ldr	r2, [fp, #-8]
     768:	ldr	r1, [fp, #-16]
     76c:	add	r2, r1, r2
     770:	ldrb	r2, [r2]
     774:	strb	r2, [r3]
     778:	ldr	r3, [fp, #-8]
     77c:	add	r3, r3, #1
     780:	str	r3, [fp, #-8]
     784:	ldr	r3, [fp, #-8]
     788:	ldr	r2, [fp, #-16]
     78c:	add	r3, r2, r3
     790:	ldrb	r3, [r3]
     794:	cmp	r3, #0
     798:	bne	27c <decode_escaped_string+0x38>
     79c:	ldr	r3, [fp, #-12]
     7a0:	ldr	r2, [fp, #-16]
     7a4:	add	r3, r2, r3
     7a8:	mov	r2, #0
     7ac:	strb	r2, [r3]
     7b0:	ldr	r3, [fp, #-12]
     7b4:	mov	r0, r3
     7b8:	sub	sp, fp, #4
     7bc:	pop	{fp, pc}
     7c0:	.word	0x00000000

000007c4 <boolean_constant_new>:
     7c4:	push	{fp, lr}
     7c8:	add	fp, sp, #4
     7cc:	sub	sp, sp, #24
     7d0:	str	r0, [fp, #-16]
     7d4:	mov	r0, #16
     7d8:	bl	0 <malloc>
     7dc:	mov	r3, r0
     7e0:	str	r3, [fp, #-8]
     7e4:	ldr	r3, [fp, #-8]
     7e8:	cmp	r3, #0
     7ec:	bne	81c <boolean_constant_new+0x58>
     7f0:	mov	r3, #232	; 0xe8
     7f4:	str	r3, [sp]
     7f8:	ldr	r3, [pc, #140]	; 88c <boolean_constant_new+0xc8>
     7fc:	mov	r2, #16
     800:	ldr	r1, [pc, #136]	; 890 <boolean_constant_new+0xcc>
     804:	mvn	r0, #0
     808:	bl	0 <coda_set_error>
     80c:	ldr	r0, [fp, #-16]
     810:	bl	0 <free>
     814:	mov	r3, #0
     818:	b	880 <boolean_constant_new+0xbc>
     81c:	ldr	r3, [fp, #-8]
     820:	mov	r2, #18
     824:	str	r2, [r3]
     828:	ldr	r3, [fp, #-8]
     82c:	mov	r2, #0
     830:	str	r2, [r3, #4]
     834:	ldr	r3, [fp, #-8]
     838:	mov	r2, #1
     83c:	str	r2, [r3, #8]
     840:	ldr	r3, [fp, #-16]
     844:	ldrb	r3, [r3]
     848:	cmp	r3, #116	; 0x74
     84c:	beq	860 <boolean_constant_new+0x9c>
     850:	ldr	r3, [fp, #-16]
     854:	ldrb	r3, [r3]
     858:	cmp	r3, #84	; 0x54
     85c:	bne	868 <boolean_constant_new+0xa4>
     860:	mov	r2, #1
     864:	b	86c <boolean_constant_new+0xa8>
     868:	mov	r2, #0
     86c:	ldr	r3, [fp, #-8]
     870:	str	r2, [r3, #12]
     874:	ldr	r0, [fp, #-16]
     878:	bl	0 <free>
     87c:	ldr	r3, [fp, #-8]
     880:	mov	r0, r3
     884:	sub	sp, fp, #4
     888:	pop	{fp, pc}
     88c:	.word	0x00000024
     890:	.word	0x0000006c

00000894 <float_constant_new>:
     894:	push	{fp, lr}
     898:	add	fp, sp, #4
     89c:	sub	sp, sp, #32
     8a0:	str	r0, [fp, #-24]	; 0xffffffe8
     8a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8a8:	bl	0 <strlen>
     8ac:	mov	r3, r0
     8b0:	mov	r1, r3
     8b4:	sub	r2, fp, #20
     8b8:	mov	r3, #0
     8bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8c0:	bl	0 <coda_ascii_parse_double>
     8c4:	mov	r3, r0
     8c8:	cmp	r3, #0
     8cc:	bge	8e0 <float_constant_new+0x4c>
     8d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8d4:	bl	0 <free>
     8d8:	mov	r3, #0
     8dc:	b	95c <float_constant_new+0xc8>
     8e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8e4:	bl	0 <free>
     8e8:	mov	r0, #24
     8ec:	bl	0 <malloc>
     8f0:	mov	r3, r0
     8f4:	str	r3, [fp, #-8]
     8f8:	ldr	r3, [fp, #-8]
     8fc:	cmp	r3, #0
     900:	bne	928 <float_constant_new+0x94>
     904:	ldr	r3, [pc, #92]	; 968 <float_constant_new+0xd4>
     908:	str	r3, [sp]
     90c:	ldr	r3, [pc, #88]	; 96c <float_constant_new+0xd8>
     910:	mov	r2, #24
     914:	ldr	r1, [pc, #84]	; 970 <float_constant_new+0xdc>
     918:	mvn	r0, #0
     91c:	bl	0 <coda_set_error>
     920:	mov	r3, #0
     924:	b	95c <float_constant_new+0xc8>
     928:	ldr	r3, [fp, #-8]
     92c:	mov	r2, #19
     930:	str	r2, [r3]
     934:	ldr	r3, [fp, #-8]
     938:	mov	r2, #2
     93c:	str	r2, [r3, #4]
     940:	ldr	r3, [fp, #-8]
     944:	mov	r2, #1
     948:	str	r2, [r3, #8]
     94c:	ldrd	r2, [fp, #-20]	; 0xffffffec
     950:	ldr	r1, [fp, #-8]
     954:	strd	r2, [r1, #16]
     958:	ldr	r3, [fp, #-8]
     95c:	mov	r0, r3
     960:	sub	sp, fp, #4
     964:	pop	{fp, pc}
     968:	.word	0x00000105
     96c:	.word	0x00000024
     970:	.word	0x0000006c

00000974 <integer_constant_new>:
     974:	push	{fp, lr}
     978:	add	fp, sp, #4
     97c:	sub	sp, sp, #32
     980:	str	r0, [fp, #-24]	; 0xffffffe8
     984:	ldr	r0, [fp, #-24]	; 0xffffffe8
     988:	bl	0 <strlen>
     98c:	mov	r3, r0
     990:	mov	r1, r3
     994:	sub	r2, fp, #20
     998:	mov	r3, #0
     99c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9a0:	bl	0 <coda_ascii_parse_int64>
     9a4:	mov	r3, r0
     9a8:	cmp	r3, #0
     9ac:	bge	9c0 <integer_constant_new+0x4c>
     9b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9b4:	bl	0 <free>
     9b8:	mov	r3, #0
     9bc:	b	a3c <integer_constant_new+0xc8>
     9c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9c4:	bl	0 <free>
     9c8:	mov	r0, #24
     9cc:	bl	0 <malloc>
     9d0:	mov	r3, r0
     9d4:	str	r3, [fp, #-8]
     9d8:	ldr	r3, [fp, #-8]
     9dc:	cmp	r3, #0
     9e0:	bne	a08 <integer_constant_new+0x94>
     9e4:	mov	r3, #288	; 0x120
     9e8:	str	r3, [sp]
     9ec:	ldr	r3, [pc, #84]	; a48 <integer_constant_new+0xd4>
     9f0:	mov	r2, #24
     9f4:	ldr	r1, [pc, #80]	; a4c <integer_constant_new+0xd8>
     9f8:	mvn	r0, #0
     9fc:	bl	0 <coda_set_error>
     a00:	mov	r3, #0
     a04:	b	a3c <integer_constant_new+0xc8>
     a08:	ldr	r3, [fp, #-8]
     a0c:	mov	r2, #20
     a10:	str	r2, [r3]
     a14:	ldr	r3, [fp, #-8]
     a18:	mov	r2, #1
     a1c:	str	r2, [r3, #4]
     a20:	ldr	r3, [fp, #-8]
     a24:	mov	r2, #1
     a28:	str	r2, [r3, #8]
     a2c:	ldrd	r2, [fp, #-20]	; 0xffffffec
     a30:	ldr	r1, [fp, #-8]
     a34:	strd	r2, [r1, #16]
     a38:	ldr	r3, [fp, #-8]
     a3c:	mov	r0, r3
     a40:	sub	sp, fp, #4
     a44:	pop	{fp, pc}
     a48:	.word	0x00000024
     a4c:	.word	0x0000006c

00000a50 <rawstring_constant_new>:
     a50:	push	{fp, lr}
     a54:	add	fp, sp, #4
     a58:	sub	sp, sp, #24
     a5c:	str	r0, [fp, #-16]
     a60:	mov	r0, #20
     a64:	bl	0 <malloc>
     a68:	mov	r3, r0
     a6c:	str	r3, [fp, #-8]
     a70:	ldr	r3, [fp, #-8]
     a74:	cmp	r3, #0
     a78:	bne	aa0 <rawstring_constant_new+0x50>
     a7c:	ldr	r3, [pc, #116]	; af8 <rawstring_constant_new+0xa8>
     a80:	str	r3, [sp]
     a84:	ldr	r3, [pc, #112]	; afc <rawstring_constant_new+0xac>
     a88:	mov	r2, #20
     a8c:	ldr	r1, [pc, #108]	; b00 <rawstring_constant_new+0xb0>
     a90:	mvn	r0, #0
     a94:	bl	0 <coda_set_error>
     a98:	mov	r3, #0
     a9c:	b	aec <rawstring_constant_new+0x9c>
     aa0:	ldr	r3, [fp, #-8]
     aa4:	mov	r2, #21
     aa8:	str	r2, [r3]
     aac:	ldr	r3, [fp, #-8]
     ab0:	mov	r2, #3
     ab4:	str	r2, [r3, #4]
     ab8:	ldr	r3, [fp, #-8]
     abc:	mov	r2, #1
     ac0:	str	r2, [r3, #8]
     ac4:	ldr	r0, [fp, #-16]
     ac8:	bl	0 <strlen>
     acc:	mov	r3, r0
     ad0:	mov	r2, r3
     ad4:	ldr	r3, [fp, #-8]
     ad8:	str	r2, [r3, #12]
     adc:	ldr	r3, [fp, #-8]
     ae0:	ldr	r2, [fp, #-16]
     ae4:	str	r2, [r3, #16]
     ae8:	ldr	r3, [fp, #-8]
     aec:	mov	r0, r3
     af0:	sub	sp, fp, #4
     af4:	pop	{fp, pc}
     af8:	.word	0x00000133
     afc:	.word	0x00000024
     b00:	.word	0x0000006c

00000b04 <string_constant_new>:
     b04:	push	{fp, lr}
     b08:	add	fp, sp, #4
     b0c:	sub	sp, sp, #24
     b10:	str	r0, [fp, #-16]
     b14:	ldr	r0, [fp, #-16]
     b18:	bl	244 <decode_escaped_string>
     b1c:	str	r0, [fp, #-8]
     b20:	ldr	r3, [fp, #-8]
     b24:	cmp	r3, #0
     b28:	bge	b3c <string_constant_new+0x38>
     b2c:	ldr	r0, [fp, #-16]
     b30:	bl	0 <free>
     b34:	mov	r3, #0
     b38:	b	bbc <string_constant_new+0xb8>
     b3c:	mov	r0, #20
     b40:	bl	0 <malloc>
     b44:	mov	r3, r0
     b48:	str	r3, [fp, #-12]
     b4c:	ldr	r3, [fp, #-12]
     b50:	cmp	r3, #0
     b54:	bne	b7c <string_constant_new+0x78>
     b58:	ldr	r3, [pc, #104]	; bc8 <string_constant_new+0xc4>
     b5c:	str	r3, [sp]
     b60:	ldr	r3, [pc, #100]	; bcc <string_constant_new+0xc8>
     b64:	mov	r2, #20
     b68:	ldr	r1, [pc, #96]	; bd0 <string_constant_new+0xcc>
     b6c:	mvn	r0, #0
     b70:	bl	0 <coda_set_error>
     b74:	mov	r3, #0
     b78:	b	bbc <string_constant_new+0xb8>
     b7c:	ldr	r3, [fp, #-12]
     b80:	mov	r2, #22
     b84:	str	r2, [r3]
     b88:	ldr	r3, [fp, #-12]
     b8c:	mov	r2, #3
     b90:	str	r2, [r3, #4]
     b94:	ldr	r3, [fp, #-12]
     b98:	mov	r2, #1
     b9c:	str	r2, [r3, #8]
     ba0:	ldr	r3, [fp, #-12]
     ba4:	ldr	r2, [fp, #-8]
     ba8:	str	r2, [r3, #12]
     bac:	ldr	r3, [fp, #-12]
     bb0:	ldr	r2, [fp, #-16]
     bb4:	str	r2, [r3, #16]
     bb8:	ldr	r3, [fp, #-12]
     bbc:	mov	r0, r3
     bc0:	sub	sp, fp, #4
     bc4:	pop	{fp, pc}
     bc8:	.word	0x0000014f
     bcc:	.word	0x00000024
     bd0:	.word	0x0000006c

00000bd4 <coda_expression_new>:
     bd4:	push	{fp, lr}
     bd8:	add	fp, sp, #4
     bdc:	sub	sp, sp, #32
     be0:	str	r0, [fp, #-16]
     be4:	str	r1, [fp, #-20]	; 0xffffffec
     be8:	str	r2, [fp, #-24]	; 0xffffffe8
     bec:	str	r3, [fp, #-28]	; 0xffffffe4
     bf0:	ldr	r3, [fp, #-16]
     bf4:	sub	r3, r3, #18
     bf8:	cmp	r3, #4
     bfc:	ldrls	pc, [pc, r3, lsl #2]
     c00:	b	c68 <coda_expression_new+0x94>
     c04:	.word	0x00000c18
     c08:	.word	0x00000c28
     c0c:	.word	0x00000c38
     c10:	.word	0x00000c48
     c14:	.word	0x00000c58
     c18:	ldr	r0, [fp, #-20]	; 0xffffffec
     c1c:	bl	7c4 <boolean_constant_new>
     c20:	mov	r3, r0
     c24:	b	11e4 <coda_expression_new+0x610>
     c28:	ldr	r0, [fp, #-20]	; 0xffffffec
     c2c:	bl	894 <float_constant_new>
     c30:	mov	r3, r0
     c34:	b	11e4 <coda_expression_new+0x610>
     c38:	ldr	r0, [fp, #-20]	; 0xffffffec
     c3c:	bl	974 <integer_constant_new>
     c40:	mov	r3, r0
     c44:	b	11e4 <coda_expression_new+0x610>
     c48:	ldr	r0, [fp, #-20]	; 0xffffffec
     c4c:	bl	a50 <rawstring_constant_new>
     c50:	mov	r3, r0
     c54:	b	11e4 <coda_expression_new+0x610>
     c58:	ldr	r0, [fp, #-20]	; 0xffffffec
     c5c:	bl	b04 <string_constant_new>
     c60:	mov	r3, r0
     c64:	b	11e4 <coda_expression_new+0x610>
     c68:	nop			; (mov r0, r0)
     c6c:	ldr	r3, [fp, #-16]
     c70:	cmp	r3, #60	; 0x3c
     c74:	bne	cd4 <coda_expression_new+0x100>
     c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c7c:	ldr	r3, [r3]
     c80:	cmp	r3, #19
     c84:	bne	ca4 <coda_expression_new+0xd0>
     c88:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c8c:	vldr	d7, [r3, #16]
     c90:	vneg.f64	d7, d7
     c94:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c98:	vstr	d7, [r3, #16]
     c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ca0:	b	11e4 <coda_expression_new+0x610>
     ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ca8:	ldr	r3, [r3]
     cac:	cmp	r3, #20
     cb0:	bne	cd4 <coda_expression_new+0x100>
     cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cb8:	ldrd	r2, [r3, #16]
     cbc:	rsbs	r2, r2, #0
     cc0:	rsc	r3, r3, #0
     cc4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     cc8:	strd	r2, [r1, #16]
     ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cd0:	b	11e4 <coda_expression_new+0x610>
     cd4:	mov	r0, #32
     cd8:	bl	0 <malloc>
     cdc:	mov	r3, r0
     ce0:	str	r3, [fp, #-8]
     ce4:	ldr	r3, [fp, #-8]
     ce8:	cmp	r3, #0
     cec:	bne	d78 <coda_expression_new+0x1a4>
     cf0:	ldr	r3, [pc, #1272]	; 11f0 <coda_expression_new+0x61c>
     cf4:	str	r3, [sp]
     cf8:	ldr	r3, [pc, #1268]	; 11f4 <coda_expression_new+0x620>
     cfc:	mov	r2, #32
     d00:	ldr	r1, [pc, #1264]	; 11f8 <coda_expression_new+0x624>
     d04:	mvn	r0, #0
     d08:	bl	0 <coda_set_error>
     d0c:	ldr	r3, [fp, #-20]	; 0xffffffec
     d10:	cmp	r3, #0
     d14:	beq	d20 <coda_expression_new+0x14c>
     d18:	ldr	r0, [fp, #-20]	; 0xffffffec
     d1c:	bl	0 <free>
     d20:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d24:	cmp	r3, #0
     d28:	beq	d34 <coda_expression_new+0x160>
     d2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d30:	bl	c4bc <coda_expression_delete>
     d34:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d38:	cmp	r3, #0
     d3c:	beq	d48 <coda_expression_new+0x174>
     d40:	ldr	r0, [fp, #-28]	; 0xffffffe4
     d44:	bl	c4bc <coda_expression_delete>
     d48:	ldr	r3, [fp, #4]
     d4c:	cmp	r3, #0
     d50:	beq	d5c <coda_expression_new+0x188>
     d54:	ldr	r0, [fp, #4]
     d58:	bl	c4bc <coda_expression_delete>
     d5c:	ldr	r3, [fp, #8]
     d60:	cmp	r3, #0
     d64:	beq	d70 <coda_expression_new+0x19c>
     d68:	ldr	r0, [fp, #8]
     d6c:	bl	c4bc <coda_expression_delete>
     d70:	mov	r3, #0
     d74:	b	11e4 <coda_expression_new+0x610>
     d78:	ldr	r3, [fp, #-8]
     d7c:	ldr	r2, [fp, #-16]
     d80:	str	r2, [r3]
     d84:	ldr	r3, [fp, #-8]
     d88:	ldr	r2, [fp, #-20]	; 0xffffffec
     d8c:	str	r2, [r3, #12]
     d90:	ldr	r3, [fp, #-8]
     d94:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d98:	str	r2, [r3, #16]
     d9c:	ldr	r3, [fp, #-8]
     da0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     da4:	str	r2, [r3, #20]
     da8:	ldr	r3, [fp, #-8]
     dac:	ldr	r2, [fp, #4]
     db0:	str	r2, [r3, #24]
     db4:	ldr	r3, [fp, #-8]
     db8:	ldr	r2, [fp, #8]
     dbc:	str	r2, [r3, #28]
     dc0:	ldr	r3, [fp, #-16]
     dc4:	cmp	r3, #86	; 0x56
     dc8:	ldrls	pc, [pc, r3, lsl #2]
     dcc:	b	1038 <coda_expression_new+0x464>
     dd0:	.word	0x00000f8c
     dd4:	.word	0x00000fa0
     dd8:	.word	0x00000f4c
     ddc:	.word	0x00000fe4
     de0:	.word	0x00000f2c
     de4:	.word	0x00000f4c
     de8:	.word	0x00000f2c
     dec:	.word	0x00000f4c
     df0:	.word	0x00000fe4
     df4:	.word	0x00000fe4
     df8:	.word	0x00000f7c
     dfc:	.word	0x00000fe4
     e00:	.word	0x00000f4c
     e04:	.word	0x00000f4c
     e08:	.word	0x00000f4c
     e0c:	.word	0x00000f4c
     e10:	.word	0x00000f5c
     e14:	.word	0x00000f3c
     e18:	.word	0x00001024
     e1c:	.word	0x00001024
     e20:	.word	0x00001024
     e24:	.word	0x00001024
     e28:	.word	0x00001024
     e2c:	.word	0x00000f4c
     e30:	.word	0x00000fa0
     e34:	.word	0x00000f2c
     e38:	.word	0x00000f2c
     e3c:	.word	0x00000f4c
     e40:	.word	0x00000f5c
     e44:	.word	0x00000f3c
     e48:	.word	0x00000f3c
     e4c:	.word	0x00000f6c
     e50:	.word	0x00000f7c
     e54:	.word	0x00000f7c
     e58:	.word	0x00000f7c
     e5c:	.word	0x00000f7c
     e60:	.word	0x00000f7c
     e64:	.word	0x00000f7c
     e68:	.word	0x00000f7c
     e6c:	.word	0x00000f6c
     e70:	.word	0x00000f2c
     e74:	.word	0x00000f2c
     e78:	.word	0x00000fe4
     e7c:	.word	0x00000f4c
     e80:	.word	0x00000f4c
     e84:	.word	0x00000f4c
     e88:	.word	0x00000f2c
     e8c:	.word	0x00000f2c
     e90:	.word	0x00000f2c
     e94:	.word	0x00000f2c
     e98:	.word	0x00000f4c
     e9c:	.word	0x00000f2c
     ea0:	.word	0x00000f2c
     ea4:	.word	0x00000f2c
     ea8:	.word	0x00000f2c
     eac:	.word	0x00000f5c
     eb0:	.word	0x00000fa0
     eb4:	.word	0x00000fa0
     eb8:	.word	0x00000fa0
     ebc:	.word	0x00000fa0
     ec0:	.word	0x00000f8c
     ec4:	.word	0x00000f2c
     ec8:	.word	0x00000f2c
     ecc:	.word	0x00000f4c
     ed0:	.word	0x00000f4c
     ed4:	.word	0x00000f4c
     ed8:	.word	0x00000f3c
     edc:	.word	0x00000f5c
     ee0:	.word	0x00000f5c
     ee4:	.word	0x00000f5c
     ee8:	.word	0x00000f4c
     eec:	.word	0x00000ff8
     ef0:	.word	0x00000f3c
     ef4:	.word	0x00000f5c
     ef8:	.word	0x00000f6c
     efc:	.word	0x00000f5c
     f00:	.word	0x00000f5c
     f04:	.word	0x00000f5c
     f08:	.word	0x00000fa0
     f0c:	.word	0x00000f3c
     f10:	.word	0x00000f5c
     f14:	.word	0x00000f4c
     f18:	.word	0x00000f2c
     f1c:	.word	0x00000f4c
     f20:	.word	0x00000f6c
     f24:	.word	0x00000f4c
     f28:	.word	0x00000fe4
     f2c:	ldr	r3, [fp, #-8]
     f30:	mov	r2, #0
     f34:	str	r2, [r3, #4]
     f38:	b	1038 <coda_expression_new+0x464>
     f3c:	ldr	r3, [fp, #-8]
     f40:	mov	r2, #2
     f44:	str	r2, [r3, #4]
     f48:	b	1038 <coda_expression_new+0x464>
     f4c:	ldr	r3, [fp, #-8]
     f50:	mov	r2, #1
     f54:	str	r2, [r3, #4]
     f58:	b	1038 <coda_expression_new+0x464>
     f5c:	ldr	r3, [fp, #-8]
     f60:	mov	r2, #3
     f64:	str	r2, [r3, #4]
     f68:	b	1038 <coda_expression_new+0x464>
     f6c:	ldr	r3, [fp, #-8]
     f70:	mov	r2, #5
     f74:	str	r2, [r3, #4]
     f78:	b	1038 <coda_expression_new+0x464>
     f7c:	ldr	r3, [fp, #-8]
     f80:	mov	r2, #4
     f84:	str	r2, [r3, #4]
     f88:	b	1038 <coda_expression_new+0x464>
     f8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f90:	ldr	r2, [r3, #4]
     f94:	ldr	r3, [fp, #-8]
     f98:	str	r2, [r3, #4]
     f9c:	b	1038 <coda_expression_new+0x464>
     fa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fa4:	ldr	r3, [r3, #4]
     fa8:	cmp	r3, #2
     fac:	beq	fc0 <coda_expression_new+0x3ec>
     fb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     fb4:	ldr	r3, [r3, #4]
     fb8:	cmp	r3, #2
     fbc:	bne	fd0 <coda_expression_new+0x3fc>
     fc0:	ldr	r3, [fp, #-8]
     fc4:	mov	r2, #2
     fc8:	str	r2, [r3, #4]
     fcc:	b	1038 <coda_expression_new+0x464>
     fd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fd4:	ldr	r2, [r3, #4]
     fd8:	ldr	r3, [fp, #-8]
     fdc:	str	r2, [r3, #4]
     fe0:	b	1038 <coda_expression_new+0x464>
     fe4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     fe8:	ldr	r2, [r3, #4]
     fec:	ldr	r3, [fp, #-8]
     ff0:	str	r2, [r3, #4]
     ff4:	b	1038 <coda_expression_new+0x464>
     ff8:	ldr	r3, [fp, #4]
     ffc:	cmp	r3, #0
    1000:	bne	1014 <coda_expression_new+0x440>
    1004:	ldr	r3, [fp, #-8]
    1008:	mov	r2, #0
    100c:	str	r2, [r3, #4]
    1010:	b	1038 <coda_expression_new+0x464>
    1014:	ldr	r3, [fp, #-8]
    1018:	mov	r2, #3
    101c:	str	r2, [r3, #4]
    1020:	b	1038 <coda_expression_new+0x464>
    1024:	ldr	r3, [pc, #464]	; 11fc <coda_expression_new+0x628>
    1028:	ldr	r2, [pc, #464]	; 1200 <coda_expression_new+0x62c>
    102c:	ldr	r1, [pc, #448]	; 11f4 <coda_expression_new+0x620>
    1030:	ldr	r0, [pc, #460]	; 1204 <coda_expression_new+0x630>
    1034:	bl	0 <__assert_fail>
    1038:	ldr	r3, [fp, #-8]
    103c:	ldr	r3, [r3]
    1040:	sub	r3, r3, #27
    1044:	cmp	r3, #58	; 0x3a
    1048:	ldrls	pc, [pc, r3, lsl #2]
    104c:	b	114c <coda_expression_new+0x578>
    1050:	.word	0x0000113c
    1054:	.word	0x0000113c
    1058:	.word	0x0000114c
    105c:	.word	0x0000114c
    1060:	.word	0x0000114c
    1064:	.word	0x0000114c
    1068:	.word	0x0000114c
    106c:	.word	0x0000114c
    1070:	.word	0x0000114c
    1074:	.word	0x0000114c
    1078:	.word	0x0000114c
    107c:	.word	0x0000114c
    1080:	.word	0x0000114c
    1084:	.word	0x0000114c
    1088:	.word	0x0000114c
    108c:	.word	0x0000114c
    1090:	.word	0x0000114c
    1094:	.word	0x0000114c
    1098:	.word	0x0000114c
    109c:	.word	0x0000114c
    10a0:	.word	0x0000114c
    10a4:	.word	0x0000114c
    10a8:	.word	0x0000114c
    10ac:	.word	0x0000114c
    10b0:	.word	0x0000114c
    10b4:	.word	0x0000114c
    10b8:	.word	0x0000114c
    10bc:	.word	0x0000114c
    10c0:	.word	0x0000114c
    10c4:	.word	0x0000114c
    10c8:	.word	0x0000114c
    10cc:	.word	0x0000114c
    10d0:	.word	0x0000114c
    10d4:	.word	0x0000114c
    10d8:	.word	0x0000114c
    10dc:	.word	0x0000114c
    10e0:	.word	0x0000114c
    10e4:	.word	0x0000114c
    10e8:	.word	0x0000114c
    10ec:	.word	0x0000114c
    10f0:	.word	0x0000113c
    10f4:	.word	0x0000113c
    10f8:	.word	0x0000113c
    10fc:	.word	0x0000113c
    1100:	.word	0x0000114c
    1104:	.word	0x0000114c
    1108:	.word	0x0000114c
    110c:	.word	0x0000114c
    1110:	.word	0x0000114c
    1114:	.word	0x0000114c
    1118:	.word	0x0000114c
    111c:	.word	0x0000114c
    1120:	.word	0x0000114c
    1124:	.word	0x0000114c
    1128:	.word	0x0000114c
    112c:	.word	0x0000114c
    1130:	.word	0x0000113c
    1134:	.word	0x0000113c
    1138:	.word	0x0000113c
    113c:	ldr	r3, [fp, #-8]
    1140:	mov	r2, #0
    1144:	str	r2, [r3, #8]
    1148:	b	11e0 <coda_expression_new+0x60c>
    114c:	ldr	r3, [fp, #-8]
    1150:	ldr	r3, [r3, #4]
    1154:	cmp	r3, #4
    1158:	beq	11d4 <coda_expression_new+0x600>
    115c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1160:	cmp	r3, #0
    1164:	beq	1178 <coda_expression_new+0x5a4>
    1168:	ldr	r3, [fp, #-24]	; 0xffffffe8
    116c:	ldr	r3, [r3, #8]
    1170:	cmp	r3, #0
    1174:	beq	11d4 <coda_expression_new+0x600>
    1178:	ldr	r3, [fp, #-28]	; 0xffffffe4
    117c:	cmp	r3, #0
    1180:	beq	1194 <coda_expression_new+0x5c0>
    1184:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1188:	ldr	r3, [r3, #8]
    118c:	cmp	r3, #0
    1190:	beq	11d4 <coda_expression_new+0x600>
    1194:	ldr	r3, [fp, #4]
    1198:	cmp	r3, #0
    119c:	beq	11b0 <coda_expression_new+0x5dc>
    11a0:	ldr	r3, [fp, #4]
    11a4:	ldr	r3, [r3, #8]
    11a8:	cmp	r3, #0
    11ac:	beq	11d4 <coda_expression_new+0x600>
    11b0:	ldr	r3, [fp, #8]
    11b4:	cmp	r3, #0
    11b8:	beq	11cc <coda_expression_new+0x5f8>
    11bc:	ldr	r3, [fp, #8]
    11c0:	ldr	r3, [r3, #8]
    11c4:	cmp	r3, #0
    11c8:	beq	11d4 <coda_expression_new+0x600>
    11cc:	mov	r2, #1
    11d0:	b	11d8 <coda_expression_new+0x604>
    11d4:	mov	r2, #0
    11d8:	ldr	r3, [fp, #-8]
    11dc:	str	r2, [r3, #8]
    11e0:	ldr	r3, [fp, #-8]
    11e4:	mov	r0, r3
    11e8:	sub	sp, fp, #4
    11ec:	pop	{fp, pc}
    11f0:	.word	0x00000183
    11f4:	.word	0x00000024
    11f8:	.word	0x0000006c
    11fc:	.word	0x00000e98
    1200:	.word	0x0000021d
    1204:	.word	0x000000a4

00001208 <init_eval_info>:
    1208:	push	{fp, lr}
    120c:	add	fp, sp, #4
    1210:	sub	sp, sp, #8
    1214:	str	r0, [fp, #-8]
    1218:	str	r1, [fp, #-12]
    121c:	ldr	r3, [fp, #-8]
    1220:	ldr	r2, [fp, #-12]
    1224:	str	r2, [r3]
    1228:	ldr	r3, [fp, #-12]
    122c:	cmp	r3, #0
    1230:	beq	1250 <init_eval_info+0x48>
    1234:	ldr	r3, [fp, #-8]
    1238:	ldr	r2, [fp, #-12]
    123c:	add	r3, r3, #8
    1240:	mov	r1, r2
    1244:	mov	r2, #520	; 0x208
    1248:	mov	r0, r3
    124c:	bl	0 <memcpy>
    1250:	ldr	r3, [fp, #-8]
    1254:	add	r3, r3, #528	; 0x210
    1258:	mov	r1, r3
    125c:	mov	r2, #0
    1260:	mov	r3, #0
    1264:	strd	r2, [r1]
    1268:	ldr	r3, [fp, #-8]
    126c:	add	r3, r3, #544	; 0x220
    1270:	mov	r1, r3
    1274:	mov	r2, #0
    1278:	mov	r3, #0
    127c:	strd	r2, [r1, #-8]
    1280:	ldr	r3, [fp, #-8]
    1284:	add	r3, r3, #544	; 0x220
    1288:	mov	r1, r3
    128c:	mov	r2, #0
    1290:	mov	r3, #0
    1294:	strd	r2, [r1]
    1298:	ldr	r3, [fp, #-8]
    129c:	add	r3, r3, #560	; 0x230
    12a0:	mov	r1, r3
    12a4:	mov	r2, #0
    12a8:	mov	r3, #0
    12ac:	strd	r2, [r1, #-8]
    12b0:	ldr	r3, [fp, #-8]
    12b4:	mov	r2, #0
    12b8:	str	r2, [r3, #560]	; 0x230
    12bc:	nop			; (mov r0, r0)
    12c0:	sub	sp, fp, #4
    12c4:	pop	{fp, pc}

000012c8 <eval_boolean>:
    12c8:	push	{fp, lr}
    12cc:	add	fp, sp, #4
    12d0:	sub	sp, sp, #1024	; 0x400
    12d4:	sub	sp, sp, #8
    12d8:	str	r0, [fp, #-1008]	; 0xfffffc10
    12dc:	str	r1, [fp, #-1012]	; 0xfffffc0c
    12e0:	str	r2, [fp, #-1016]	; 0xfffffc08
    12e4:	ldr	r3, [fp, #-1012]	; 0xfffffc0c
    12e8:	ldr	r3, [r3]
    12ec:	cmp	r3, #18
    12f0:	bne	130c <eval_boolean+0x44>
    12f4:	ldr	r3, [fp, #-1012]	; 0xfffffc0c
    12f8:	ldr	r2, [r3, #12]
    12fc:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1300:	str	r2, [r3]
    1304:	mov	r3, #0
    1308:	b	3088 <eval_boolean+0x1dc0>
    130c:	ldr	r3, [fp, #-1012]	; 0xfffffc0c
    1310:	str	r3, [fp, #-24]	; 0xffffffe8
    1314:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1318:	ldr	r3, [r3]
    131c:	sub	r3, r3, #4
    1320:	cmp	r3, #82	; 0x52
    1324:	ldrls	pc, [pc, r3, lsl #2]
    1328:	b	302c <eval_boolean+0x1d64>
    132c:	.word	0x000029c0
    1330:	.word	0x0000302c
    1334:	.word	0x00002b5c
    1338:	.word	0x0000302c
    133c:	.word	0x0000302c
    1340:	.word	0x0000302c
    1344:	.word	0x0000302c
    1348:	.word	0x00002ec8
    134c:	.word	0x0000302c
    1350:	.word	0x0000302c
    1354:	.word	0x0000302c
    1358:	.word	0x0000302c
    135c:	.word	0x0000302c
    1360:	.word	0x0000302c
    1364:	.word	0x0000302c
    1368:	.word	0x0000302c
    136c:	.word	0x0000302c
    1370:	.word	0x0000302c
    1374:	.word	0x0000302c
    1378:	.word	0x0000302c
    137c:	.word	0x0000302c
    1380:	.word	0x00001478
    1384:	.word	0x00002834
    1388:	.word	0x0000302c
    138c:	.word	0x0000302c
    1390:	.word	0x0000302c
    1394:	.word	0x0000302c
    1398:	.word	0x0000302c
    139c:	.word	0x0000302c
    13a0:	.word	0x0000302c
    13a4:	.word	0x0000302c
    13a8:	.word	0x0000302c
    13ac:	.word	0x0000302c
    13b0:	.word	0x0000302c
    13b4:	.word	0x0000302c
    13b8:	.word	0x0000302c
    13bc:	.word	0x00001bbc
    13c0:	.word	0x00001950
    13c4:	.word	0x00002e38
    13c8:	.word	0x0000302c
    13cc:	.word	0x0000302c
    13d0:	.word	0x0000302c
    13d4:	.word	0x00002480
    13d8:	.word	0x00002510
    13dc:	.word	0x00002438
    13e0:	.word	0x000024c8
    13e4:	.word	0x0000302c
    13e8:	.word	0x00002090
    13ec:	.word	0x00001e24
    13f0:	.word	0x00002358
    13f4:	.word	0x000023c8
    13f8:	.word	0x0000302c
    13fc:	.word	0x0000302c
    1400:	.word	0x0000302c
    1404:	.word	0x0000302c
    1408:	.word	0x0000302c
    140c:	.word	0x0000302c
    1410:	.word	0x000016e4
    1414:	.word	0x00002304
    1418:	.word	0x0000302c
    141c:	.word	0x0000302c
    1420:	.word	0x0000302c
    1424:	.word	0x0000302c
    1428:	.word	0x0000302c
    142c:	.word	0x0000302c
    1430:	.word	0x0000302c
    1434:	.word	0x0000302c
    1438:	.word	0x00002558
    143c:	.word	0x0000302c
    1440:	.word	0x0000302c
    1444:	.word	0x0000302c
    1448:	.word	0x0000302c
    144c:	.word	0x0000302c
    1450:	.word	0x0000302c
    1454:	.word	0x0000302c
    1458:	.word	0x0000302c
    145c:	.word	0x0000302c
    1460:	.word	0x0000302c
    1464:	.word	0x00002cf8
    1468:	.word	0x0000302c
    146c:	.word	0x0000302c
    1470:	.word	0x0000302c
    1474:	.word	0x00002f74
    1478:	ldr	r3, [fp, #-24]	; 0xffffffe8
    147c:	ldr	r3, [r3, #16]
    1480:	ldr	r3, [r3, #4]
    1484:	cmp	r3, #2
    1488:	beq	14a0 <eval_boolean+0x1d8>
    148c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1490:	ldr	r3, [r3, #20]
    1494:	ldr	r3, [r3, #4]
    1498:	cmp	r3, #2
    149c:	bne	1528 <eval_boolean+0x260>
    14a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14a4:	ldr	r3, [r3, #16]
    14a8:	sub	r2, fp, #52	; 0x34
    14ac:	mov	r1, r3
    14b0:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    14b4:	bl	3094 <eval_float>
    14b8:	mov	r3, r0
    14bc:	cmp	r3, #0
    14c0:	beq	14cc <eval_boolean+0x204>
    14c4:	mvn	r3, #0
    14c8:	b	3088 <eval_boolean+0x1dc0>
    14cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14d0:	ldr	r3, [r3, #20]
    14d4:	sub	r2, fp, #60	; 0x3c
    14d8:	mov	r1, r3
    14dc:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    14e0:	bl	3094 <eval_float>
    14e4:	mov	r3, r0
    14e8:	cmp	r3, #0
    14ec:	beq	14f8 <eval_boolean+0x230>
    14f0:	mvn	r3, #0
    14f4:	b	3088 <eval_boolean+0x1dc0>
    14f8:	vldr	d6, [fp, #-52]	; 0xffffffcc
    14fc:	vldr	d7, [fp, #-60]	; 0xffffffc4
    1500:	vcmp.f64	d6, d7
    1504:	vmrs	APSR_nzcv, fpscr
    1508:	moveq	r3, #1
    150c:	movne	r3, #0
    1510:	uxtb	r3, r3
    1514:	mov	r2, r3
    1518:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    151c:	str	r2, [r3]
    1520:	nop			; (mov r0, r0)
    1524:	b	3040 <eval_boolean+0x1d78>
    1528:	ldr	r3, [fp, #-24]	; 0xffffffe8
    152c:	ldr	r3, [r3, #16]
    1530:	ldr	r3, [r3, #4]
    1534:	cmp	r3, #1
    1538:	bne	15c0 <eval_boolean+0x2f8>
    153c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1540:	ldr	r3, [r3, #16]
    1544:	sub	r2, fp, #68	; 0x44
    1548:	mov	r1, r3
    154c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1550:	bl	442c <eval_integer>
    1554:	mov	r3, r0
    1558:	cmp	r3, #0
    155c:	beq	1568 <eval_boolean+0x2a0>
    1560:	mvn	r3, #0
    1564:	b	3088 <eval_boolean+0x1dc0>
    1568:	ldr	r3, [fp, #-24]	; 0xffffffe8
    156c:	ldr	r3, [r3, #20]
    1570:	sub	r2, fp, #76	; 0x4c
    1574:	mov	r1, r3
    1578:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    157c:	bl	442c <eval_integer>
    1580:	mov	r3, r0
    1584:	cmp	r3, #0
    1588:	beq	1594 <eval_boolean+0x2cc>
    158c:	mvn	r3, #0
    1590:	b	3088 <eval_boolean+0x1dc0>
    1594:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    1598:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    159c:	cmp	r1, r3
    15a0:	cmpeq	r0, r2
    15a4:	moveq	r3, #1
    15a8:	movne	r3, #0
    15ac:	uxtb	r3, r3
    15b0:	mov	r2, r3
    15b4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    15b8:	str	r2, [r3]
    15bc:	b	3040 <eval_boolean+0x1d78>
    15c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15c4:	ldr	r3, [r3, #16]
    15c8:	ldr	r3, [r3, #4]
    15cc:	cmp	r3, #3
    15d0:	bne	16d0 <eval_boolean+0x408>
    15d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15d8:	ldr	r1, [r3, #16]
    15dc:	sub	r0, fp, #88	; 0x58
    15e0:	sub	r2, fp, #80	; 0x50
    15e4:	sub	r3, fp, #96	; 0x60
    15e8:	str	r3, [sp]
    15ec:	mov	r3, r0
    15f0:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    15f4:	bl	6670 <eval_string>
    15f8:	mov	r3, r0
    15fc:	cmp	r3, #0
    1600:	beq	160c <eval_boolean+0x344>
    1604:	mvn	r3, #0
    1608:	b	3088 <eval_boolean+0x1dc0>
    160c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1610:	ldr	r1, [r3, #20]
    1614:	sub	r0, fp, #92	; 0x5c
    1618:	sub	r2, fp, #84	; 0x54
    161c:	sub	r3, fp, #100	; 0x64
    1620:	str	r3, [sp]
    1624:	mov	r3, r0
    1628:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    162c:	bl	6670 <eval_string>
    1630:	mov	r3, r0
    1634:	cmp	r3, #0
    1638:	beq	1650 <eval_boolean+0x388>
    163c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1640:	mov	r0, r3
    1644:	bl	0 <free>
    1648:	mvn	r3, #0
    164c:	b	3088 <eval_boolean+0x1dc0>
    1650:	ldr	r0, [fp, #-80]	; 0xffffffb0
    1654:	ldr	r1, [fp, #-88]	; 0xffffffa8
    1658:	ldr	ip, [fp, #-96]	; 0xffffffa0
    165c:	ldr	lr, [fp, #-84]	; 0xffffffac
    1660:	ldr	r3, [fp, #-92]	; 0xffffffa4
    1664:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1668:	str	r2, [sp, #4]
    166c:	str	r3, [sp]
    1670:	mov	r3, lr
    1674:	mov	r2, ip
    1678:	bl	114 <compare_strings>
    167c:	mov	r3, r0
    1680:	cmp	r3, #0
    1684:	moveq	r3, #1
    1688:	movne	r3, #0
    168c:	uxtb	r3, r3
    1690:	mov	r2, r3
    1694:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1698:	str	r2, [r3]
    169c:	ldr	r3, [fp, #-88]	; 0xffffffa8
    16a0:	cmp	r3, #0
    16a4:	ble	16b4 <eval_boolean+0x3ec>
    16a8:	ldr	r3, [fp, #-96]	; 0xffffffa0
    16ac:	mov	r0, r3
    16b0:	bl	0 <free>
    16b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
    16b8:	cmp	r3, #0
    16bc:	ble	3040 <eval_boolean+0x1d78>
    16c0:	ldr	r3, [fp, #-100]	; 0xffffff9c
    16c4:	mov	r0, r3
    16c8:	bl	0 <free>
    16cc:	b	3040 <eval_boolean+0x1d78>
    16d0:	ldr	r3, [pc, #4008]	; 2680 <eval_boolean+0x13b8>
    16d4:	mov	r2, #668	; 0x29c
    16d8:	ldr	r1, [pc, #4012]	; 268c <eval_boolean+0x13c4>
    16dc:	ldr	r0, [pc, #4004]	; 2688 <eval_boolean+0x13c0>
    16e0:	bl	0 <__assert_fail>
    16e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16e8:	ldr	r3, [r3, #16]
    16ec:	ldr	r3, [r3, #4]
    16f0:	cmp	r3, #2
    16f4:	beq	170c <eval_boolean+0x444>
    16f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16fc:	ldr	r3, [r3, #20]
    1700:	ldr	r3, [r3, #4]
    1704:	cmp	r3, #2
    1708:	bne	1794 <eval_boolean+0x4cc>
    170c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1710:	ldr	r3, [r3, #16]
    1714:	sub	r2, fp, #108	; 0x6c
    1718:	mov	r1, r3
    171c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1720:	bl	3094 <eval_float>
    1724:	mov	r3, r0
    1728:	cmp	r3, #0
    172c:	beq	1738 <eval_boolean+0x470>
    1730:	mvn	r3, #0
    1734:	b	3088 <eval_boolean+0x1dc0>
    1738:	ldr	r3, [fp, #-24]	; 0xffffffe8
    173c:	ldr	r3, [r3, #20]
    1740:	sub	r2, fp, #116	; 0x74
    1744:	mov	r1, r3
    1748:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    174c:	bl	3094 <eval_float>
    1750:	mov	r3, r0
    1754:	cmp	r3, #0
    1758:	beq	1764 <eval_boolean+0x49c>
    175c:	mvn	r3, #0
    1760:	b	3088 <eval_boolean+0x1dc0>
    1764:	vldr	d6, [fp, #-108]	; 0xffffff94
    1768:	vldr	d7, [fp, #-116]	; 0xffffff8c
    176c:	vcmp.f64	d6, d7
    1770:	vmrs	APSR_nzcv, fpscr
    1774:	movne	r3, #1
    1778:	moveq	r3, #0
    177c:	uxtb	r3, r3
    1780:	mov	r2, r3
    1784:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1788:	str	r2, [r3]
    178c:	nop			; (mov r0, r0)
    1790:	b	3048 <eval_boolean+0x1d80>
    1794:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1798:	ldr	r3, [r3, #16]
    179c:	ldr	r3, [r3, #4]
    17a0:	cmp	r3, #1
    17a4:	bne	182c <eval_boolean+0x564>
    17a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17ac:	ldr	r3, [r3, #16]
    17b0:	sub	r2, fp, #124	; 0x7c
    17b4:	mov	r1, r3
    17b8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    17bc:	bl	442c <eval_integer>
    17c0:	mov	r3, r0
    17c4:	cmp	r3, #0
    17c8:	beq	17d4 <eval_boolean+0x50c>
    17cc:	mvn	r3, #0
    17d0:	b	3088 <eval_boolean+0x1dc0>
    17d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17d8:	ldr	r3, [r3, #20]
    17dc:	sub	r2, fp, #132	; 0x84
    17e0:	mov	r1, r3
    17e4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    17e8:	bl	442c <eval_integer>
    17ec:	mov	r3, r0
    17f0:	cmp	r3, #0
    17f4:	beq	1800 <eval_boolean+0x538>
    17f8:	mvn	r3, #0
    17fc:	b	3088 <eval_boolean+0x1dc0>
    1800:	ldrd	r0, [fp, #-124]	; 0xffffff84
    1804:	ldrd	r2, [fp, #-132]	; 0xffffff7c
    1808:	cmp	r1, r3
    180c:	cmpeq	r0, r2
    1810:	movne	r3, #1
    1814:	moveq	r3, #0
    1818:	uxtb	r3, r3
    181c:	mov	r2, r3
    1820:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1824:	str	r2, [r3]
    1828:	b	3048 <eval_boolean+0x1d80>
    182c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1830:	ldr	r3, [r3, #16]
    1834:	ldr	r3, [r3, #4]
    1838:	cmp	r3, #3
    183c:	bne	193c <eval_boolean+0x674>
    1840:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1844:	ldr	r1, [r3, #16]
    1848:	sub	r0, fp, #144	; 0x90
    184c:	sub	r2, fp, #136	; 0x88
    1850:	sub	r3, fp, #152	; 0x98
    1854:	str	r3, [sp]
    1858:	mov	r3, r0
    185c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1860:	bl	6670 <eval_string>
    1864:	mov	r3, r0
    1868:	cmp	r3, #0
    186c:	beq	1878 <eval_boolean+0x5b0>
    1870:	mvn	r3, #0
    1874:	b	3088 <eval_boolean+0x1dc0>
    1878:	ldr	r3, [fp, #-24]	; 0xffffffe8
    187c:	ldr	r1, [r3, #20]
    1880:	sub	r0, fp, #148	; 0x94
    1884:	sub	r2, fp, #140	; 0x8c
    1888:	sub	r3, fp, #156	; 0x9c
    188c:	str	r3, [sp]
    1890:	mov	r3, r0
    1894:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1898:	bl	6670 <eval_string>
    189c:	mov	r3, r0
    18a0:	cmp	r3, #0
    18a4:	beq	18bc <eval_boolean+0x5f4>
    18a8:	ldr	r3, [fp, #-152]	; 0xffffff68
    18ac:	mov	r0, r3
    18b0:	bl	0 <free>
    18b4:	mvn	r3, #0
    18b8:	b	3088 <eval_boolean+0x1dc0>
    18bc:	ldr	r0, [fp, #-136]	; 0xffffff78
    18c0:	ldr	r1, [fp, #-144]	; 0xffffff70
    18c4:	ldr	ip, [fp, #-152]	; 0xffffff68
    18c8:	ldr	lr, [fp, #-140]	; 0xffffff74
    18cc:	ldr	r3, [fp, #-148]	; 0xffffff6c
    18d0:	ldr	r2, [fp, #-156]	; 0xffffff64
    18d4:	str	r2, [sp, #4]
    18d8:	str	r3, [sp]
    18dc:	mov	r3, lr
    18e0:	mov	r2, ip
    18e4:	bl	114 <compare_strings>
    18e8:	mov	r3, r0
    18ec:	cmp	r3, #0
    18f0:	movne	r3, #1
    18f4:	moveq	r3, #0
    18f8:	uxtb	r3, r3
    18fc:	mov	r2, r3
    1900:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1904:	str	r2, [r3]
    1908:	ldr	r3, [fp, #-144]	; 0xffffff70
    190c:	cmp	r3, #0
    1910:	ble	1920 <eval_boolean+0x658>
    1914:	ldr	r3, [fp, #-152]	; 0xffffff68
    1918:	mov	r0, r3
    191c:	bl	0 <free>
    1920:	ldr	r3, [fp, #-148]	; 0xffffff6c
    1924:	cmp	r3, #0
    1928:	ble	3048 <eval_boolean+0x1d80>
    192c:	ldr	r3, [fp, #-156]	; 0xffffff64
    1930:	mov	r0, r3
    1934:	bl	0 <free>
    1938:	b	3048 <eval_boolean+0x1d80>
    193c:	ldr	r3, [pc, #3388]	; 2680 <eval_boolean+0x13b8>
    1940:	ldr	r2, [pc, #3312]	; 2638 <eval_boolean+0x1370>
    1944:	ldr	r1, [pc, #3392]	; 268c <eval_boolean+0x13c4>
    1948:	ldr	r0, [pc, #3384]	; 2688 <eval_boolean+0x13c0>
    194c:	bl	0 <__assert_fail>
    1950:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1954:	ldr	r3, [r3, #16]
    1958:	ldr	r3, [r3, #4]
    195c:	cmp	r3, #2
    1960:	beq	1978 <eval_boolean+0x6b0>
    1964:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1968:	ldr	r3, [r3, #20]
    196c:	ldr	r3, [r3, #4]
    1970:	cmp	r3, #2
    1974:	bne	1a00 <eval_boolean+0x738>
    1978:	ldr	r3, [fp, #-24]	; 0xffffffe8
    197c:	ldr	r3, [r3, #16]
    1980:	sub	r2, fp, #164	; 0xa4
    1984:	mov	r1, r3
    1988:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    198c:	bl	3094 <eval_float>
    1990:	mov	r3, r0
    1994:	cmp	r3, #0
    1998:	beq	19a4 <eval_boolean+0x6dc>
    199c:	mvn	r3, #0
    19a0:	b	3088 <eval_boolean+0x1dc0>
    19a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19a8:	ldr	r3, [r3, #20]
    19ac:	sub	r2, fp, #172	; 0xac
    19b0:	mov	r1, r3
    19b4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    19b8:	bl	3094 <eval_float>
    19bc:	mov	r3, r0
    19c0:	cmp	r3, #0
    19c4:	beq	19d0 <eval_boolean+0x708>
    19c8:	mvn	r3, #0
    19cc:	b	3088 <eval_boolean+0x1dc0>
    19d0:	vldr	d6, [fp, #-164]	; 0xffffff5c
    19d4:	vldr	d7, [fp, #-172]	; 0xffffff54
    19d8:	vcmpe.f64	d6, d7
    19dc:	vmrs	APSR_nzcv, fpscr
    19e0:	movgt	r3, #1
    19e4:	movle	r3, #0
    19e8:	uxtb	r3, r3
    19ec:	mov	r2, r3
    19f0:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    19f4:	str	r2, [r3]
    19f8:	nop			; (mov r0, r0)
    19fc:	b	3050 <eval_boolean+0x1d88>
    1a00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a04:	ldr	r3, [r3, #16]
    1a08:	ldr	r3, [r3, #4]
    1a0c:	cmp	r3, #1
    1a10:	bne	1a98 <eval_boolean+0x7d0>
    1a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a18:	ldr	r3, [r3, #16]
    1a1c:	sub	r2, fp, #180	; 0xb4
    1a20:	mov	r1, r3
    1a24:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1a28:	bl	442c <eval_integer>
    1a2c:	mov	r3, r0
    1a30:	cmp	r3, #0
    1a34:	beq	1a40 <eval_boolean+0x778>
    1a38:	mvn	r3, #0
    1a3c:	b	3088 <eval_boolean+0x1dc0>
    1a40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a44:	ldr	r3, [r3, #20]
    1a48:	sub	r2, fp, #188	; 0xbc
    1a4c:	mov	r1, r3
    1a50:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1a54:	bl	442c <eval_integer>
    1a58:	mov	r3, r0
    1a5c:	cmp	r3, #0
    1a60:	beq	1a6c <eval_boolean+0x7a4>
    1a64:	mvn	r3, #0
    1a68:	b	3088 <eval_boolean+0x1dc0>
    1a6c:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    1a70:	ldrd	r0, [fp, #-188]	; 0xffffff44
    1a74:	cmp	r0, r2
    1a78:	sbcs	r3, r1, r3
    1a7c:	movlt	r3, #1
    1a80:	movge	r3, #0
    1a84:	uxtb	r3, r3
    1a88:	mov	r2, r3
    1a8c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1a90:	str	r2, [r3]
    1a94:	b	3050 <eval_boolean+0x1d88>
    1a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a9c:	ldr	r3, [r3, #16]
    1aa0:	ldr	r3, [r3, #4]
    1aa4:	cmp	r3, #3
    1aa8:	bne	1ba8 <eval_boolean+0x8e0>
    1aac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ab0:	ldr	r1, [r3, #16]
    1ab4:	sub	r0, fp, #200	; 0xc8
    1ab8:	sub	r2, fp, #192	; 0xc0
    1abc:	sub	r3, fp, #208	; 0xd0
    1ac0:	str	r3, [sp]
    1ac4:	mov	r3, r0
    1ac8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1acc:	bl	6670 <eval_string>
    1ad0:	mov	r3, r0
    1ad4:	cmp	r3, #0
    1ad8:	beq	1ae4 <eval_boolean+0x81c>
    1adc:	mvn	r3, #0
    1ae0:	b	3088 <eval_boolean+0x1dc0>
    1ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ae8:	ldr	r1, [r3, #20]
    1aec:	sub	r0, fp, #204	; 0xcc
    1af0:	sub	r2, fp, #196	; 0xc4
    1af4:	sub	r3, fp, #212	; 0xd4
    1af8:	str	r3, [sp]
    1afc:	mov	r3, r0
    1b00:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1b04:	bl	6670 <eval_string>
    1b08:	mov	r3, r0
    1b0c:	cmp	r3, #0
    1b10:	beq	1b28 <eval_boolean+0x860>
    1b14:	ldr	r3, [fp, #-208]	; 0xffffff30
    1b18:	mov	r0, r3
    1b1c:	bl	0 <free>
    1b20:	mvn	r3, #0
    1b24:	b	3088 <eval_boolean+0x1dc0>
    1b28:	ldr	r0, [fp, #-192]	; 0xffffff40
    1b2c:	ldr	r1, [fp, #-200]	; 0xffffff38
    1b30:	ldr	ip, [fp, #-208]	; 0xffffff30
    1b34:	ldr	lr, [fp, #-196]	; 0xffffff3c
    1b38:	ldr	r3, [fp, #-204]	; 0xffffff34
    1b3c:	ldr	r2, [fp, #-212]	; 0xffffff2c
    1b40:	str	r2, [sp, #4]
    1b44:	str	r3, [sp]
    1b48:	mov	r3, lr
    1b4c:	mov	r2, ip
    1b50:	bl	114 <compare_strings>
    1b54:	mov	r3, r0
    1b58:	cmp	r3, #0
    1b5c:	movgt	r3, #1
    1b60:	movle	r3, #0
    1b64:	uxtb	r3, r3
    1b68:	mov	r2, r3
    1b6c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1b70:	str	r2, [r3]
    1b74:	ldr	r3, [fp, #-200]	; 0xffffff38
    1b78:	cmp	r3, #0
    1b7c:	ble	1b8c <eval_boolean+0x8c4>
    1b80:	ldr	r3, [fp, #-208]	; 0xffffff30
    1b84:	mov	r0, r3
    1b88:	bl	0 <free>
    1b8c:	ldr	r3, [fp, #-204]	; 0xffffff34
    1b90:	cmp	r3, #0
    1b94:	ble	3050 <eval_boolean+0x1d88>
    1b98:	ldr	r3, [fp, #-212]	; 0xffffff2c
    1b9c:	mov	r0, r3
    1ba0:	bl	0 <free>
    1ba4:	b	3050 <eval_boolean+0x1d88>
    1ba8:	ldr	r3, [pc, #2768]	; 2680 <eval_boolean+0x13b8>
    1bac:	mov	r2, #792	; 0x318
    1bb0:	ldr	r1, [pc, #2772]	; 268c <eval_boolean+0x13c4>
    1bb4:	ldr	r0, [pc, #2764]	; 2688 <eval_boolean+0x13c0>
    1bb8:	bl	0 <__assert_fail>
    1bbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1bc0:	ldr	r3, [r3, #16]
    1bc4:	ldr	r3, [r3, #4]
    1bc8:	cmp	r3, #2
    1bcc:	beq	1be4 <eval_boolean+0x91c>
    1bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1bd4:	ldr	r3, [r3, #20]
    1bd8:	ldr	r3, [r3, #4]
    1bdc:	cmp	r3, #2
    1be0:	bne	1c6c <eval_boolean+0x9a4>
    1be4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1be8:	ldr	r3, [r3, #16]
    1bec:	sub	r2, fp, #220	; 0xdc
    1bf0:	mov	r1, r3
    1bf4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1bf8:	bl	3094 <eval_float>
    1bfc:	mov	r3, r0
    1c00:	cmp	r3, #0
    1c04:	beq	1c10 <eval_boolean+0x948>
    1c08:	mvn	r3, #0
    1c0c:	b	3088 <eval_boolean+0x1dc0>
    1c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c14:	ldr	r3, [r3, #20]
    1c18:	sub	r2, fp, #228	; 0xe4
    1c1c:	mov	r1, r3
    1c20:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1c24:	bl	3094 <eval_float>
    1c28:	mov	r3, r0
    1c2c:	cmp	r3, #0
    1c30:	beq	1c3c <eval_boolean+0x974>
    1c34:	mvn	r3, #0
    1c38:	b	3088 <eval_boolean+0x1dc0>
    1c3c:	vldr	d6, [fp, #-220]	; 0xffffff24
    1c40:	vldr	d7, [fp, #-228]	; 0xffffff1c
    1c44:	vcmpe.f64	d6, d7
    1c48:	vmrs	APSR_nzcv, fpscr
    1c4c:	movge	r3, #1
    1c50:	movlt	r3, #0
    1c54:	uxtb	r3, r3
    1c58:	mov	r2, r3
    1c5c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1c60:	str	r2, [r3]
    1c64:	nop			; (mov r0, r0)
    1c68:	b	3058 <eval_boolean+0x1d90>
    1c6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c70:	ldr	r3, [r3, #16]
    1c74:	ldr	r3, [r3, #4]
    1c78:	cmp	r3, #1
    1c7c:	bne	1d04 <eval_boolean+0xa3c>
    1c80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c84:	ldr	r3, [r3, #16]
    1c88:	sub	r2, fp, #236	; 0xec
    1c8c:	mov	r1, r3
    1c90:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1c94:	bl	442c <eval_integer>
    1c98:	mov	r3, r0
    1c9c:	cmp	r3, #0
    1ca0:	beq	1cac <eval_boolean+0x9e4>
    1ca4:	mvn	r3, #0
    1ca8:	b	3088 <eval_boolean+0x1dc0>
    1cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1cb0:	ldr	r3, [r3, #20]
    1cb4:	sub	r2, fp, #244	; 0xf4
    1cb8:	mov	r1, r3
    1cbc:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1cc0:	bl	442c <eval_integer>
    1cc4:	mov	r3, r0
    1cc8:	cmp	r3, #0
    1ccc:	beq	1cd8 <eval_boolean+0xa10>
    1cd0:	mvn	r3, #0
    1cd4:	b	3088 <eval_boolean+0x1dc0>
    1cd8:	ldrd	r0, [fp, #-236]	; 0xffffff14
    1cdc:	ldrd	r2, [fp, #-244]	; 0xffffff0c
    1ce0:	cmp	r0, r2
    1ce4:	sbcs	r3, r1, r3
    1ce8:	movge	r3, #1
    1cec:	movlt	r3, #0
    1cf0:	uxtb	r3, r3
    1cf4:	mov	r2, r3
    1cf8:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1cfc:	str	r2, [r3]
    1d00:	b	3058 <eval_boolean+0x1d90>
    1d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d08:	ldr	r3, [r3, #16]
    1d0c:	ldr	r3, [r3, #4]
    1d10:	cmp	r3, #3
    1d14:	bne	1e10 <eval_boolean+0xb48>
    1d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d1c:	ldr	r1, [r3, #16]
    1d20:	sub	r0, fp, #256	; 0x100
    1d24:	sub	r2, fp, #248	; 0xf8
    1d28:	sub	r3, fp, #264	; 0x108
    1d2c:	str	r3, [sp]
    1d30:	mov	r3, r0
    1d34:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1d38:	bl	6670 <eval_string>
    1d3c:	mov	r3, r0
    1d40:	cmp	r3, #0
    1d44:	beq	1d50 <eval_boolean+0xa88>
    1d48:	mvn	r3, #0
    1d4c:	b	3088 <eval_boolean+0x1dc0>
    1d50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d54:	ldr	r1, [r3, #20]
    1d58:	sub	r0, fp, #260	; 0x104
    1d5c:	sub	r2, fp, #252	; 0xfc
    1d60:	sub	r3, fp, #268	; 0x10c
    1d64:	str	r3, [sp]
    1d68:	mov	r3, r0
    1d6c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1d70:	bl	6670 <eval_string>
    1d74:	mov	r3, r0
    1d78:	cmp	r3, #0
    1d7c:	beq	1d94 <eval_boolean+0xacc>
    1d80:	ldr	r3, [fp, #-264]	; 0xfffffef8
    1d84:	mov	r0, r3
    1d88:	bl	0 <free>
    1d8c:	mvn	r3, #0
    1d90:	b	3088 <eval_boolean+0x1dc0>
    1d94:	ldr	r0, [fp, #-248]	; 0xffffff08
    1d98:	ldr	r1, [fp, #-256]	; 0xffffff00
    1d9c:	ldr	ip, [fp, #-264]	; 0xfffffef8
    1da0:	ldr	lr, [fp, #-252]	; 0xffffff04
    1da4:	ldr	r3, [fp, #-260]	; 0xfffffefc
    1da8:	ldr	r2, [fp, #-268]	; 0xfffffef4
    1dac:	str	r2, [sp, #4]
    1db0:	str	r3, [sp]
    1db4:	mov	r3, lr
    1db8:	mov	r2, ip
    1dbc:	bl	114 <compare_strings>
    1dc0:	mov	r3, r0
    1dc4:	mvn	r3, r3
    1dc8:	lsr	r3, r3, #31
    1dcc:	uxtb	r3, r3
    1dd0:	mov	r2, r3
    1dd4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1dd8:	str	r2, [r3]
    1ddc:	ldr	r3, [fp, #-256]	; 0xffffff00
    1de0:	cmp	r3, #0
    1de4:	ble	1df4 <eval_boolean+0xb2c>
    1de8:	ldr	r3, [fp, #-264]	; 0xfffffef8
    1dec:	mov	r0, r3
    1df0:	bl	0 <free>
    1df4:	ldr	r3, [fp, #-260]	; 0xfffffefc
    1df8:	cmp	r3, #0
    1dfc:	ble	3058 <eval_boolean+0x1d90>
    1e00:	ldr	r3, [fp, #-268]	; 0xfffffef4
    1e04:	mov	r0, r3
    1e08:	bl	0 <free>
    1e0c:	b	3058 <eval_boolean+0x1d90>
    1e10:	ldr	r3, [pc, #2152]	; 2680 <eval_boolean+0x13b8>
    1e14:	ldr	r2, [pc, #2080]	; 263c <eval_boolean+0x1374>
    1e18:	ldr	r1, [pc, #2156]	; 268c <eval_boolean+0x13c4>
    1e1c:	ldr	r0, [pc, #2148]	; 2688 <eval_boolean+0x13c0>
    1e20:	bl	0 <__assert_fail>
    1e24:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e28:	ldr	r3, [r3, #16]
    1e2c:	ldr	r3, [r3, #4]
    1e30:	cmp	r3, #2
    1e34:	beq	1e4c <eval_boolean+0xb84>
    1e38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e3c:	ldr	r3, [r3, #20]
    1e40:	ldr	r3, [r3, #4]
    1e44:	cmp	r3, #2
    1e48:	bne	1ed4 <eval_boolean+0xc0c>
    1e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e50:	ldr	r3, [r3, #16]
    1e54:	sub	r2, fp, #276	; 0x114
    1e58:	mov	r1, r3
    1e5c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1e60:	bl	3094 <eval_float>
    1e64:	mov	r3, r0
    1e68:	cmp	r3, #0
    1e6c:	beq	1e78 <eval_boolean+0xbb0>
    1e70:	mvn	r3, #0
    1e74:	b	3088 <eval_boolean+0x1dc0>
    1e78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e7c:	ldr	r3, [r3, #20]
    1e80:	sub	r2, fp, #284	; 0x11c
    1e84:	mov	r1, r3
    1e88:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1e8c:	bl	3094 <eval_float>
    1e90:	mov	r3, r0
    1e94:	cmp	r3, #0
    1e98:	beq	1ea4 <eval_boolean+0xbdc>
    1e9c:	mvn	r3, #0
    1ea0:	b	3088 <eval_boolean+0x1dc0>
    1ea4:	vldr	d6, [fp, #-276]	; 0xfffffeec
    1ea8:	vldr	d7, [fp, #-284]	; 0xfffffee4
    1eac:	vcmpe.f64	d6, d7
    1eb0:	vmrs	APSR_nzcv, fpscr
    1eb4:	movmi	r3, #1
    1eb8:	movpl	r3, #0
    1ebc:	uxtb	r3, r3
    1ec0:	mov	r2, r3
    1ec4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1ec8:	str	r2, [r3]
    1ecc:	nop			; (mov r0, r0)
    1ed0:	b	3060 <eval_boolean+0x1d98>
    1ed4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ed8:	ldr	r3, [r3, #16]
    1edc:	ldr	r3, [r3, #4]
    1ee0:	cmp	r3, #1
    1ee4:	bne	1f74 <eval_boolean+0xcac>
    1ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1eec:	ldr	r3, [r3, #16]
    1ef0:	sub	r2, fp, #292	; 0x124
    1ef4:	mov	r1, r3
    1ef8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1efc:	bl	442c <eval_integer>
    1f00:	mov	r3, r0
    1f04:	cmp	r3, #0
    1f08:	beq	1f14 <eval_boolean+0xc4c>
    1f0c:	mvn	r3, #0
    1f10:	b	3088 <eval_boolean+0x1dc0>
    1f14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f18:	ldr	r3, [r3, #20]
    1f1c:	sub	r2, fp, #300	; 0x12c
    1f20:	mov	r1, r3
    1f24:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1f28:	bl	442c <eval_integer>
    1f2c:	mov	r3, r0
    1f30:	cmp	r3, #0
    1f34:	beq	1f40 <eval_boolean+0xc78>
    1f38:	mvn	r3, #0
    1f3c:	b	3088 <eval_boolean+0x1dc0>
    1f40:	sub	r3, fp, #292	; 0x124
    1f44:	ldrd	r0, [r3]
    1f48:	sub	r3, fp, #292	; 0x124
    1f4c:	ldrd	r2, [r3, #-8]
    1f50:	cmp	r0, r2
    1f54:	sbcs	r3, r1, r3
    1f58:	movlt	r3, #1
    1f5c:	movge	r3, #0
    1f60:	uxtb	r3, r3
    1f64:	mov	r2, r3
    1f68:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1f6c:	str	r2, [r3]
    1f70:	b	3060 <eval_boolean+0x1d98>
    1f74:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f78:	ldr	r3, [r3, #16]
    1f7c:	ldr	r3, [r3, #4]
    1f80:	cmp	r3, #3
    1f84:	bne	207c <eval_boolean+0xdb4>
    1f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f8c:	ldr	r1, [r3, #16]
    1f90:	sub	r0, fp, #312	; 0x138
    1f94:	sub	r2, fp, #304	; 0x130
    1f98:	sub	r3, fp, #320	; 0x140
    1f9c:	str	r3, [sp]
    1fa0:	mov	r3, r0
    1fa4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1fa8:	bl	6670 <eval_string>
    1fac:	mov	r3, r0
    1fb0:	cmp	r3, #0
    1fb4:	beq	1fc0 <eval_boolean+0xcf8>
    1fb8:	mvn	r3, #0
    1fbc:	b	3088 <eval_boolean+0x1dc0>
    1fc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1fc4:	ldr	r1, [r3, #20]
    1fc8:	sub	r0, fp, #316	; 0x13c
    1fcc:	sub	r2, fp, #308	; 0x134
    1fd0:	sub	r3, fp, #324	; 0x144
    1fd4:	str	r3, [sp]
    1fd8:	mov	r3, r0
    1fdc:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1fe0:	bl	6670 <eval_string>
    1fe4:	mov	r3, r0
    1fe8:	cmp	r3, #0
    1fec:	beq	2004 <eval_boolean+0xd3c>
    1ff0:	ldr	r3, [fp, #-320]	; 0xfffffec0
    1ff4:	mov	r0, r3
    1ff8:	bl	0 <free>
    1ffc:	mvn	r3, #0
    2000:	b	3088 <eval_boolean+0x1dc0>
    2004:	ldr	r0, [fp, #-304]	; 0xfffffed0
    2008:	ldr	r1, [fp, #-312]	; 0xfffffec8
    200c:	ldr	ip, [fp, #-320]	; 0xfffffec0
    2010:	ldr	lr, [fp, #-308]	; 0xfffffecc
    2014:	ldr	r3, [fp, #-316]	; 0xfffffec4
    2018:	ldr	r2, [fp, #-324]	; 0xfffffebc
    201c:	str	r2, [sp, #4]
    2020:	str	r3, [sp]
    2024:	mov	r3, lr
    2028:	mov	r2, ip
    202c:	bl	114 <compare_strings>
    2030:	mov	r3, r0
    2034:	lsr	r3, r3, #31
    2038:	uxtb	r3, r3
    203c:	mov	r2, r3
    2040:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2044:	str	r2, [r3]
    2048:	ldr	r3, [fp, #-312]	; 0xfffffec8
    204c:	cmp	r3, #0
    2050:	ble	2060 <eval_boolean+0xd98>
    2054:	ldr	r3, [fp, #-320]	; 0xfffffec0
    2058:	mov	r0, r3
    205c:	bl	0 <free>
    2060:	ldr	r3, [fp, #-316]	; 0xfffffec4
    2064:	cmp	r3, #0
    2068:	ble	3060 <eval_boolean+0x1d98>
    206c:	ldr	r3, [fp, #-324]	; 0xfffffebc
    2070:	mov	r0, r3
    2074:	bl	0 <free>
    2078:	b	3060 <eval_boolean+0x1d98>
    207c:	ldr	r3, [pc, #1532]	; 2680 <eval_boolean+0x13b8>
    2080:	mov	r2, #916	; 0x394
    2084:	ldr	r1, [pc, #1536]	; 268c <eval_boolean+0x13c4>
    2088:	ldr	r0, [pc, #1528]	; 2688 <eval_boolean+0x13c0>
    208c:	bl	0 <__assert_fail>
    2090:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2094:	ldr	r3, [r3, #16]
    2098:	ldr	r3, [r3, #4]
    209c:	cmp	r3, #2
    20a0:	beq	20b8 <eval_boolean+0xdf0>
    20a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    20a8:	ldr	r3, [r3, #20]
    20ac:	ldr	r3, [r3, #4]
    20b0:	cmp	r3, #2
    20b4:	bne	2140 <eval_boolean+0xe78>
    20b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    20bc:	ldr	r3, [r3, #16]
    20c0:	sub	r2, fp, #332	; 0x14c
    20c4:	mov	r1, r3
    20c8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    20cc:	bl	3094 <eval_float>
    20d0:	mov	r3, r0
    20d4:	cmp	r3, #0
    20d8:	beq	20e4 <eval_boolean+0xe1c>
    20dc:	mvn	r3, #0
    20e0:	b	3088 <eval_boolean+0x1dc0>
    20e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    20e8:	ldr	r3, [r3, #20]
    20ec:	sub	r2, fp, #340	; 0x154
    20f0:	mov	r1, r3
    20f4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    20f8:	bl	3094 <eval_float>
    20fc:	mov	r3, r0
    2100:	cmp	r3, #0
    2104:	beq	2110 <eval_boolean+0xe48>
    2108:	mvn	r3, #0
    210c:	b	3088 <eval_boolean+0x1dc0>
    2110:	vldr	d6, [fp, #-332]	; 0xfffffeb4
    2114:	vldr	d7, [fp, #-340]	; 0xfffffeac
    2118:	vcmpe.f64	d6, d7
    211c:	vmrs	APSR_nzcv, fpscr
    2120:	movls	r3, #1
    2124:	movhi	r3, #0
    2128:	uxtb	r3, r3
    212c:	mov	r2, r3
    2130:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2134:	str	r2, [r3]
    2138:	nop			; (mov r0, r0)
    213c:	b	3068 <eval_boolean+0x1da0>
    2140:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2144:	ldr	r3, [r3, #16]
    2148:	ldr	r3, [r3, #4]
    214c:	cmp	r3, #1
    2150:	bne	21e0 <eval_boolean+0xf18>
    2154:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2158:	ldr	r3, [r3, #16]
    215c:	sub	r2, fp, #348	; 0x15c
    2160:	mov	r1, r3
    2164:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2168:	bl	442c <eval_integer>
    216c:	mov	r3, r0
    2170:	cmp	r3, #0
    2174:	beq	2180 <eval_boolean+0xeb8>
    2178:	mvn	r3, #0
    217c:	b	3088 <eval_boolean+0x1dc0>
    2180:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2184:	ldr	r3, [r3, #20]
    2188:	sub	r2, fp, #356	; 0x164
    218c:	mov	r1, r3
    2190:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2194:	bl	442c <eval_integer>
    2198:	mov	r3, r0
    219c:	cmp	r3, #0
    21a0:	beq	21ac <eval_boolean+0xee4>
    21a4:	mvn	r3, #0
    21a8:	b	3088 <eval_boolean+0x1dc0>
    21ac:	sub	r3, fp, #340	; 0x154
    21b0:	ldrd	r2, [r3, #-8]
    21b4:	sub	r1, fp, #356	; 0x164
    21b8:	ldrd	r0, [r1]
    21bc:	cmp	r0, r2
    21c0:	sbcs	r3, r1, r3
    21c4:	movge	r3, #1
    21c8:	movlt	r3, #0
    21cc:	uxtb	r3, r3
    21d0:	mov	r2, r3
    21d4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    21d8:	str	r2, [r3]
    21dc:	b	3068 <eval_boolean+0x1da0>
    21e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    21e4:	ldr	r3, [r3, #16]
    21e8:	ldr	r3, [r3, #4]
    21ec:	cmp	r3, #3
    21f0:	bne	22f0 <eval_boolean+0x1028>
    21f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    21f8:	ldr	r1, [r3, #16]
    21fc:	sub	r0, fp, #368	; 0x170
    2200:	sub	r2, fp, #360	; 0x168
    2204:	sub	r3, fp, #376	; 0x178
    2208:	str	r3, [sp]
    220c:	mov	r3, r0
    2210:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2214:	bl	6670 <eval_string>
    2218:	mov	r3, r0
    221c:	cmp	r3, #0
    2220:	beq	222c <eval_boolean+0xf64>
    2224:	mvn	r3, #0
    2228:	b	3088 <eval_boolean+0x1dc0>
    222c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2230:	ldr	r1, [r3, #20]
    2234:	sub	r0, fp, #372	; 0x174
    2238:	sub	r2, fp, #364	; 0x16c
    223c:	sub	r3, fp, #380	; 0x17c
    2240:	str	r3, [sp]
    2244:	mov	r3, r0
    2248:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    224c:	bl	6670 <eval_string>
    2250:	mov	r3, r0
    2254:	cmp	r3, #0
    2258:	beq	2270 <eval_boolean+0xfa8>
    225c:	ldr	r3, [fp, #-376]	; 0xfffffe88
    2260:	mov	r0, r3
    2264:	bl	0 <free>
    2268:	mvn	r3, #0
    226c:	b	3088 <eval_boolean+0x1dc0>
    2270:	ldr	r0, [fp, #-360]	; 0xfffffe98
    2274:	ldr	r1, [fp, #-368]	; 0xfffffe90
    2278:	ldr	ip, [fp, #-376]	; 0xfffffe88
    227c:	ldr	lr, [fp, #-364]	; 0xfffffe94
    2280:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    2284:	ldr	r2, [fp, #-380]	; 0xfffffe84
    2288:	str	r2, [sp, #4]
    228c:	str	r3, [sp]
    2290:	mov	r3, lr
    2294:	mov	r2, ip
    2298:	bl	114 <compare_strings>
    229c:	mov	r3, r0
    22a0:	cmp	r3, #0
    22a4:	movle	r3, #1
    22a8:	movgt	r3, #0
    22ac:	uxtb	r3, r3
    22b0:	mov	r2, r3
    22b4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    22b8:	str	r2, [r3]
    22bc:	ldr	r3, [fp, #-368]	; 0xfffffe90
    22c0:	cmp	r3, #0
    22c4:	ble	22d4 <eval_boolean+0x100c>
    22c8:	ldr	r3, [fp, #-376]	; 0xfffffe88
    22cc:	mov	r0, r3
    22d0:	bl	0 <free>
    22d4:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    22d8:	cmp	r3, #0
    22dc:	ble	3068 <eval_boolean+0x1da0>
    22e0:	ldr	r3, [fp, #-380]	; 0xfffffe84
    22e4:	mov	r0, r3
    22e8:	bl	0 <free>
    22ec:	b	3068 <eval_boolean+0x1da0>
    22f0:	ldr	r3, [pc, #904]	; 2680 <eval_boolean+0x13b8>
    22f4:	ldr	r2, [pc, #836]	; 2640 <eval_boolean+0x1378>
    22f8:	ldr	r1, [pc, #908]	; 268c <eval_boolean+0x13c4>
    22fc:	ldr	r0, [pc, #900]	; 2688 <eval_boolean+0x13c0>
    2300:	bl	0 <__assert_fail>
    2304:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2308:	ldr	r3, [r3, #16]
    230c:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2310:	mov	r1, r3
    2314:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2318:	bl	12c8 <eval_boolean>
    231c:	mov	r3, r0
    2320:	cmp	r3, #0
    2324:	beq	2330 <eval_boolean+0x1068>
    2328:	mvn	r3, #0
    232c:	b	3088 <eval_boolean+0x1dc0>
    2330:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2334:	ldr	r3, [r3]
    2338:	cmp	r3, #0
    233c:	moveq	r3, #1
    2340:	movne	r3, #0
    2344:	uxtb	r3, r3
    2348:	mov	r2, r3
    234c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2350:	str	r2, [r3]
    2354:	b	3084 <eval_boolean+0x1dbc>
    2358:	ldr	r3, [fp, #-24]	; 0xffffffe8
    235c:	ldr	r3, [r3, #16]
    2360:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2364:	mov	r1, r3
    2368:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    236c:	bl	12c8 <eval_boolean>
    2370:	mov	r3, r0
    2374:	cmp	r3, #0
    2378:	beq	2384 <eval_boolean+0x10bc>
    237c:	mvn	r3, #0
    2380:	b	3088 <eval_boolean+0x1dc0>
    2384:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2388:	ldr	r3, [r3]
    238c:	cmp	r3, #0
    2390:	bne	239c <eval_boolean+0x10d4>
    2394:	mov	r3, #0
    2398:	b	3088 <eval_boolean+0x1dc0>
    239c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    23a0:	ldr	r3, [r3, #20]
    23a4:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    23a8:	mov	r1, r3
    23ac:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    23b0:	bl	12c8 <eval_boolean>
    23b4:	mov	r3, r0
    23b8:	cmp	r3, #0
    23bc:	beq	3070 <eval_boolean+0x1da8>
    23c0:	mvn	r3, #0
    23c4:	b	3088 <eval_boolean+0x1dc0>
    23c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    23cc:	ldr	r3, [r3, #16]
    23d0:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    23d4:	mov	r1, r3
    23d8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    23dc:	bl	12c8 <eval_boolean>
    23e0:	mov	r3, r0
    23e4:	cmp	r3, #0
    23e8:	beq	23f4 <eval_boolean+0x112c>
    23ec:	mvn	r3, #0
    23f0:	b	3088 <eval_boolean+0x1dc0>
    23f4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    23f8:	ldr	r3, [r3]
    23fc:	cmp	r3, #0
    2400:	beq	240c <eval_boolean+0x1144>
    2404:	mov	r3, #0
    2408:	b	3088 <eval_boolean+0x1dc0>
    240c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2410:	ldr	r3, [r3, #20]
    2414:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2418:	mov	r1, r3
    241c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2420:	bl	12c8 <eval_boolean>
    2424:	mov	r3, r0
    2428:	cmp	r3, #0
    242c:	beq	3078 <eval_boolean+0x1db0>
    2430:	mvn	r3, #0
    2434:	b	3088 <eval_boolean+0x1dc0>
    2438:	ldr	r3, [fp, #-24]	; 0xffffffe8
    243c:	ldr	r3, [r3, #16]
    2440:	sub	r2, fp, #388	; 0x184
    2444:	mov	r1, r3
    2448:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    244c:	bl	3094 <eval_float>
    2450:	mov	r3, r0
    2454:	cmp	r3, #0
    2458:	beq	2464 <eval_boolean+0x119c>
    245c:	mvn	r3, #0
    2460:	b	3088 <eval_boolean+0x1dc0>
    2464:	vldr	d7, [fp, #-388]	; 0xfffffe7c
    2468:	vmov.f64	d0, d7
    246c:	bl	0 <coda_isNaN>
    2470:	mov	r2, r0
    2474:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2478:	str	r2, [r3]
    247c:	b	3084 <eval_boolean+0x1dbc>
    2480:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2484:	ldr	r3, [r3, #16]
    2488:	sub	r2, fp, #396	; 0x18c
    248c:	mov	r1, r3
    2490:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2494:	bl	3094 <eval_float>
    2498:	mov	r3, r0
    249c:	cmp	r3, #0
    24a0:	beq	24ac <eval_boolean+0x11e4>
    24a4:	mvn	r3, #0
    24a8:	b	3088 <eval_boolean+0x1dc0>
    24ac:	vldr	d7, [fp, #-396]	; 0xfffffe74
    24b0:	vmov.f64	d0, d7
    24b4:	bl	0 <coda_isInf>
    24b8:	mov	r2, r0
    24bc:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    24c0:	str	r2, [r3]
    24c4:	b	3084 <eval_boolean+0x1dbc>
    24c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    24cc:	ldr	r3, [r3, #16]
    24d0:	sub	r2, fp, #404	; 0x194
    24d4:	mov	r1, r3
    24d8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    24dc:	bl	3094 <eval_float>
    24e0:	mov	r3, r0
    24e4:	cmp	r3, #0
    24e8:	beq	24f4 <eval_boolean+0x122c>
    24ec:	mvn	r3, #0
    24f0:	b	3088 <eval_boolean+0x1dc0>
    24f4:	vldr	d7, [fp, #-404]	; 0xfffffe6c
    24f8:	vmov.f64	d0, d7
    24fc:	bl	0 <coda_isPlusInf>
    2500:	mov	r2, r0
    2504:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2508:	str	r2, [r3]
    250c:	b	3084 <eval_boolean+0x1dbc>
    2510:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2514:	ldr	r3, [r3, #16]
    2518:	sub	r2, fp, #412	; 0x19c
    251c:	mov	r1, r3
    2520:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2524:	bl	3094 <eval_float>
    2528:	mov	r3, r0
    252c:	cmp	r3, #0
    2530:	beq	253c <eval_boolean+0x1274>
    2534:	mvn	r3, #0
    2538:	b	3088 <eval_boolean+0x1dc0>
    253c:	vldr	d7, [fp, #-412]	; 0xfffffe64
    2540:	vmov.f64	d0, d7
    2544:	bl	0 <coda_isMinInf>
    2548:	mov	r2, r0
    254c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2550:	str	r2, [r3]
    2554:	b	3084 <eval_boolean+0x1dbc>
    2558:	ldr	r3, [fp, #-24]	; 0xffffffe8
    255c:	ldr	r1, [r3, #16]
    2560:	sub	r0, fp, #440	; 0x1b8
    2564:	sub	r2, fp, #436	; 0x1b4
    2568:	sub	r3, fp, #444	; 0x1bc
    256c:	str	r3, [sp]
    2570:	mov	r3, r0
    2574:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2578:	bl	6670 <eval_string>
    257c:	mov	r3, r0
    2580:	cmp	r3, #0
    2584:	beq	2590 <eval_boolean+0x12c8>
    2588:	mvn	r3, #0
    258c:	b	3088 <eval_boolean+0x1dc0>
    2590:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2594:	ldr	r1, [r3, #20]
    2598:	sub	r0, fp, #428	; 0x1ac
    259c:	sub	r2, fp, #424	; 0x1a8
    25a0:	sub	r3, fp, #432	; 0x1b0
    25a4:	str	r3, [sp]
    25a8:	mov	r3, r0
    25ac:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    25b0:	bl	6670 <eval_string>
    25b4:	mov	r3, r0
    25b8:	cmp	r3, #0
    25bc:	beq	25e0 <eval_boolean+0x1318>
    25c0:	ldr	r3, [fp, #-444]	; 0xfffffe44
    25c4:	cmp	r3, #0
    25c8:	beq	25d8 <eval_boolean+0x1310>
    25cc:	ldr	r3, [fp, #-444]	; 0xfffffe44
    25d0:	mov	r0, r3
    25d4:	bl	0 <free>
    25d8:	mvn	r3, #0
    25dc:	b	3088 <eval_boolean+0x1dc0>
    25e0:	ldr	r3, [fp, #-440]	; 0xfffffe48
    25e4:	cmp	r3, #0
    25e8:	ble	2690 <eval_boolean+0x13c8>
    25ec:	ldr	r3, [fp, #-444]	; 0xfffffe44
    25f0:	ldr	r1, [fp, #-436]	; 0xfffffe4c
    25f4:	ldr	r2, [fp, #-440]	; 0xfffffe48
    25f8:	add	r2, r1, r2
    25fc:	add	r3, r3, r2
    2600:	mov	r2, #0
    2604:	strb	r2, [r3]
    2608:	ldr	r3, [fp, #-444]	; 0xfffffe44
    260c:	ldr	r2, [fp, #-436]	; 0xfffffe4c
    2610:	add	r0, r3, r2
    2614:	sub	r1, fp, #420	; 0x1a4
    2618:	sub	r2, fp, #416	; 0x1a0
    261c:	mov	r3, #0
    2620:	str	r3, [sp]
    2624:	mov	r3, r1
    2628:	mov	r1, #36	; 0x24
    262c:	bl	0 <coda_pcre_compile>
    2630:	str	r0, [fp, #-8]
    2634:	b	26b4 <eval_boolean+0x13ec>
    2638:	.word	0x000002da
    263c:	.word	0x00000356
    2640:	.word	0x000003d2
    2644:	.word	0x000000ac
    2648:	.word	0x000000a8
    264c:	.word	0x000000e4
    2650:	.word	0x00000000
    2654:	.word	0x00000118
    2658:	.word	0x0000014c
    265c:	.word	0x0000047c
    2660:	.word	0xfffffdc4
    2664:	.word	0xfffffda8
    2668:	.word	0x000004a6
    266c:	.word	0x000004d7
    2670:	.word	0x00000508
    2674:	.word	0x00000198
    2678:	.word	0x00000544
    267c:	.word	0x0000017c
    2680:	.word	0x00000eac
    2684:	.word	0x00000563
    2688:	.word	0x000000a4
    268c:	.word	0x00000024
    2690:	sub	r1, fp, #420	; 0x1a4
    2694:	sub	r2, fp, #416	; 0x1a0
    2698:	mov	r3, #0
    269c:	str	r3, [sp]
    26a0:	mov	r3, r1
    26a4:	mov	r1, #36	; 0x24
    26a8:	ldr	r0, [pc, #-104]	; 2648 <eval_boolean+0x1380>
    26ac:	bl	0 <coda_pcre_compile>
    26b0:	str	r0, [fp, #-8]
    26b4:	ldr	r3, [fp, #-444]	; 0xfffffe44
    26b8:	cmp	r3, #0
    26bc:	beq	26cc <eval_boolean+0x1404>
    26c0:	ldr	r3, [fp, #-444]	; 0xfffffe44
    26c4:	mov	r0, r3
    26c8:	bl	0 <free>
    26cc:	ldr	r3, [fp, #-8]
    26d0:	cmp	r3, #0
    26d4:	bne	270c <eval_boolean+0x1444>
    26d8:	ldr	r2, [fp, #-416]	; 0xfffffe60
    26dc:	ldr	r3, [fp, #-420]	; 0xfffffe5c
    26e0:	ldr	r1, [pc, #-164]	; 2644 <eval_boolean+0x137c>
    26e4:	mvn	r0, #400	; 0x190
    26e8:	bl	0 <coda_set_error>
    26ec:	ldr	r3, [fp, #-432]	; 0xfffffe50
    26f0:	cmp	r3, #0
    26f4:	beq	2704 <eval_boolean+0x143c>
    26f8:	ldr	r3, [fp, #-432]	; 0xfffffe50
    26fc:	mov	r0, r3
    2700:	bl	0 <free>
    2704:	mvn	r3, #0
    2708:	b	3088 <eval_boolean+0x1dc0>
    270c:	ldr	r3, [fp, #-432]	; 0xfffffe50
    2710:	cmp	r3, #0
    2714:	bne	2760 <eval_boolean+0x1498>
    2718:	ldr	r0, [pc, #-216]	; 2648 <eval_boolean+0x1380>
    271c:	bl	0 <strdup>
    2720:	mov	r3, r0
    2724:	str	r3, [fp, #-432]	; 0xfffffe50
    2728:	ldr	r3, [fp, #-432]	; 0xfffffe50
    272c:	cmp	r3, #0
    2730:	bne	2760 <eval_boolean+0x1498>
    2734:	mov	r3, #1120	; 0x460
    2738:	ldr	r2, [pc, #-180]	; 268c <eval_boolean+0x13c4>
    273c:	ldr	r1, [pc, #-248]	; 264c <eval_boolean+0x1384>
    2740:	mvn	r0, #0
    2744:	bl	0 <coda_set_error>
    2748:	ldr	r3, [pc, #-256]	; 2650 <eval_boolean+0x1388>
    274c:	ldr	r3, [r3]
    2750:	ldr	r0, [fp, #-8]
    2754:	blx	r3
    2758:	mvn	r3, #0
    275c:	b	3088 <eval_boolean+0x1dc0>
    2760:	ldr	r3, [fp, #-432]	; 0xfffffe50
    2764:	ldr	r2, [fp, #-424]	; 0xfffffe58
    2768:	add	r2, r3, r2
    276c:	ldr	r1, [fp, #-428]	; 0xfffffe54
    2770:	mov	r3, #48	; 0x30
    2774:	str	r3, [sp, #12]
    2778:	sub	r3, fp, #1004	; 0x3ec
    277c:	str	r3, [sp, #8]
    2780:	mov	r3, #0
    2784:	str	r3, [sp, #4]
    2788:	mov	r3, #0
    278c:	str	r3, [sp]
    2790:	mov	r3, r1
    2794:	mov	r1, #0
    2798:	ldr	r0, [fp, #-8]
    279c:	bl	0 <coda_pcre_exec>
    27a0:	str	r0, [fp, #-28]	; 0xffffffe4
    27a4:	ldr	r3, [fp, #-432]	; 0xfffffe50
    27a8:	mov	r0, r3
    27ac:	bl	0 <free>
    27b0:	ldr	r3, [pc, #-360]	; 2650 <eval_boolean+0x1388>
    27b4:	ldr	r3, [r3]
    27b8:	ldr	r0, [fp, #-8]
    27bc:	blx	r3
    27c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    27c4:	cmp	r3, #0
    27c8:	bge	27f0 <eval_boolean+0x1528>
    27cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    27d0:	cmn	r3, #1
    27d4:	beq	27f0 <eval_boolean+0x1528>
    27d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    27dc:	ldr	r1, [pc, #-400]	; 2654 <eval_boolean+0x138c>
    27e0:	mvn	r0, #400	; 0x190
    27e4:	bl	0 <coda_set_error>
    27e8:	mvn	r3, #0
    27ec:	b	3088 <eval_boolean+0x1dc0>
    27f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    27f4:	cmp	r3, #0
    27f8:	bne	2810 <eval_boolean+0x1548>
    27fc:	ldr	r1, [pc, #-428]	; 2658 <eval_boolean+0x1390>
    2800:	mvn	r0, #400	; 0x190
    2804:	bl	0 <coda_set_error>
    2808:	mvn	r3, #0
    280c:	b	3088 <eval_boolean+0x1dc0>
    2810:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2814:	cmp	r3, #0
    2818:	movgt	r3, #1
    281c:	movle	r3, #0
    2820:	uxtb	r3, r3
    2824:	mov	r2, r3
    2828:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    282c:	str	r2, [r3]
    2830:	b	3084 <eval_boolean+0x1dbc>
    2834:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2838:	ldr	r3, [r3]
    283c:	cmp	r3, #0
    2840:	bne	2858 <eval_boolean+0x1590>
    2844:	ldr	r3, [pc, #-460]	; 2680 <eval_boolean+0x13b8>
    2848:	ldr	r2, [pc, #-500]	; 265c <eval_boolean+0x1394>
    284c:	ldr	r1, [pc, #-456]	; 268c <eval_boolean+0x13c4>
    2850:	ldr	r0, [pc, #-476]	; 267c <eval_boolean+0x13b4>
    2854:	bl	0 <__assert_fail>
    2858:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    285c:	sub	r0, fp, #1004	; 0x3ec
    2860:	add	r3, r3, #8
    2864:	mov	r2, #520	; 0x208
    2868:	mov	r1, r3
    286c:	bl	0 <memcpy>
    2870:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2874:	ldr	r3, [r3, #16]
    2878:	mov	r1, r3
    287c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2880:	bl	9098 <eval_cursor>
    2884:	mov	r3, r0
    2888:	cmp	r3, #0
    288c:	beq	28fc <eval_boolean+0x1634>
    2890:	ldr	r3, [pc, #-568]	; 2660 <eval_boolean+0x1398>
    2894:	ldr	r3, [pc, r3]
    2898:	bl	0 <__aeabi_read_tp>
    289c:	mov	r2, r0
    28a0:	ldr	r3, [r2, r3]
    28a4:	mvn	r2, #400	; 0x190
    28a8:	cmp	r3, r2
    28ac:	beq	28f4 <eval_boolean+0x162c>
    28b0:	ldr	r3, [pc, #-596]	; 2664 <eval_boolean+0x139c>
    28b4:	ldr	r3, [pc, r3]
    28b8:	bl	0 <__aeabi_read_tp>
    28bc:	mov	r1, r0
    28c0:	mov	r2, #0
    28c4:	str	r2, [r1, r3]
    28c8:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    28cc:	mov	r2, #0
    28d0:	str	r2, [r3]
    28d4:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    28d8:	add	r3, r3, #8
    28dc:	sub	r1, fp, #1004	; 0x3ec
    28e0:	mov	r2, #520	; 0x208
    28e4:	mov	r0, r3
    28e8:	bl	0 <memcpy>
    28ec:	mov	r3, #0
    28f0:	b	3088 <eval_boolean+0x1dc0>
    28f4:	mvn	r3, #0
    28f8:	b	3088 <eval_boolean+0x1dc0>
    28fc:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2900:	add	r3, r3, #8
    2904:	sub	r2, fp, #448	; 0x1c0
    2908:	mov	r1, r2
    290c:	mov	r0, r3
    2910:	bl	0 <coda_cursor_get_type_class>
    2914:	mov	r3, r0
    2918:	cmp	r3, #0
    291c:	beq	2928 <eval_boolean+0x1660>
    2920:	mvn	r3, #0
    2924:	b	3088 <eval_boolean+0x1dc0>
    2928:	ldr	r3, [fp, #-448]	; 0xfffffe40
    292c:	cmp	r3, #6
    2930:	bne	2998 <eval_boolean+0x16d0>
    2934:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2938:	add	r3, r3, #8
    293c:	sub	r2, fp, #452	; 0x1c4
    2940:	mov	r1, r2
    2944:	mov	r0, r3
    2948:	bl	0 <coda_cursor_get_special_type>
    294c:	mov	r3, r0
    2950:	cmp	r3, #0
    2954:	beq	2960 <eval_boolean+0x1698>
    2958:	mvn	r3, #0
    295c:	b	3088 <eval_boolean+0x1dc0>
    2960:	ldr	r3, [fp, #-452]	; 0xfffffe3c
    2964:	cmp	r3, #0
    2968:	bne	2998 <eval_boolean+0x16d0>
    296c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2970:	mov	r2, #0
    2974:	str	r2, [r3]
    2978:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    297c:	add	r3, r3, #8
    2980:	sub	r1, fp, #1004	; 0x3ec
    2984:	mov	r2, #520	; 0x208
    2988:	mov	r0, r3
    298c:	bl	0 <memcpy>
    2990:	mov	r3, #0
    2994:	b	3088 <eval_boolean+0x1dc0>
    2998:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    299c:	mov	r2, #1
    29a0:	str	r2, [r3]
    29a4:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    29a8:	add	r3, r3, #8
    29ac:	sub	r1, fp, #1004	; 0x3ec
    29b0:	mov	r2, #520	; 0x208
    29b4:	mov	r0, r3
    29b8:	bl	0 <memcpy>
    29bc:	b	3084 <eval_boolean+0x1dbc>
    29c0:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    29c4:	ldr	r3, [r3]
    29c8:	cmp	r3, #0
    29cc:	bne	29e4 <eval_boolean+0x171c>
    29d0:	ldr	r3, [pc, #-856]	; 2680 <eval_boolean+0x13b8>
    29d4:	ldr	r2, [pc, #-884]	; 2668 <eval_boolean+0x13a0>
    29d8:	ldr	r1, [pc, #-852]	; 268c <eval_boolean+0x13c4>
    29dc:	ldr	r0, [pc, #-872]	; 267c <eval_boolean+0x13b4>
    29e0:	bl	0 <__assert_fail>
    29e4:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    29e8:	sub	r0, fp, #1004	; 0x3ec
    29ec:	add	r3, r3, #8
    29f0:	mov	r2, #520	; 0x208
    29f4:	mov	r1, r3
    29f8:	bl	0 <memcpy>
    29fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2a00:	ldr	r3, [r3, #16]
    2a04:	mov	r1, r3
    2a08:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2a0c:	bl	9098 <eval_cursor>
    2a10:	mov	r3, r0
    2a14:	cmp	r3, #0
    2a18:	beq	2a24 <eval_boolean+0x175c>
    2a1c:	mvn	r3, #0
    2a20:	b	3088 <eval_boolean+0x1dc0>
    2a24:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2a28:	add	r3, r3, #8
    2a2c:	sub	r2, fp, #456	; 0x1c8
    2a30:	mov	r1, r2
    2a34:	mov	r0, r3
    2a38:	bl	0 <coda_cursor_get_num_elements>
    2a3c:	mov	r3, r0
    2a40:	cmp	r3, #0
    2a44:	beq	2a50 <eval_boolean+0x1788>
    2a48:	mvn	r3, #0
    2a4c:	b	3088 <eval_boolean+0x1dc0>
    2a50:	ldr	r3, [fp, #-456]	; 0xfffffe38
    2a54:	cmp	r3, #0
    2a58:	ble	2b34 <eval_boolean+0x186c>
    2a5c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2a60:	add	r3, r3, #8
    2a64:	mov	r0, r3
    2a68:	bl	0 <coda_cursor_goto_first_array_element>
    2a6c:	mov	r3, r0
    2a70:	cmp	r3, #0
    2a74:	beq	2a80 <eval_boolean+0x17b8>
    2a78:	mvn	r3, #0
    2a7c:	b	3088 <eval_boolean+0x1dc0>
    2a80:	mov	r3, #0
    2a84:	str	r3, [fp, #-12]
    2a88:	b	2b24 <eval_boolean+0x185c>
    2a8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2a90:	ldr	r3, [r3, #20]
    2a94:	sub	r2, fp, #460	; 0x1cc
    2a98:	mov	r1, r3
    2a9c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2aa0:	bl	12c8 <eval_boolean>
    2aa4:	mov	r3, r0
    2aa8:	cmp	r3, #0
    2aac:	beq	2ab8 <eval_boolean+0x17f0>
    2ab0:	mvn	r3, #0
    2ab4:	b	3088 <eval_boolean+0x1dc0>
    2ab8:	ldr	r3, [fp, #-460]	; 0xfffffe34
    2abc:	cmp	r3, #0
    2ac0:	bne	2ad8 <eval_boolean+0x1810>
    2ac4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2ac8:	mov	r2, #0
    2acc:	str	r2, [r3]
    2ad0:	mov	r3, #0
    2ad4:	b	2b20 <eval_boolean+0x1858>
    2ad8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    2adc:	sub	r2, r3, #1
    2ae0:	ldr	r3, [fp, #-12]
    2ae4:	cmp	r2, r3
    2ae8:	ble	2b10 <eval_boolean+0x1848>
    2aec:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2af0:	add	r3, r3, #8
    2af4:	mov	r0, r3
    2af8:	bl	0 <coda_cursor_goto_next_array_element>
    2afc:	mov	r3, r0
    2b00:	cmp	r3, #0
    2b04:	beq	2b10 <eval_boolean+0x1848>
    2b08:	mvn	r3, #0
    2b0c:	b	2b20 <eval_boolean+0x1858>
    2b10:	ldr	r3, [fp, #-12]
    2b14:	add	r3, r3, #1
    2b18:	str	r3, [fp, #-12]
    2b1c:	b	2b24 <eval_boolean+0x185c>
    2b20:	b	3088 <eval_boolean+0x1dc0>
    2b24:	ldr	r3, [fp, #-456]	; 0xfffffe38
    2b28:	ldr	r2, [fp, #-12]
    2b2c:	cmp	r2, r3
    2b30:	blt	2a8c <eval_boolean+0x17c4>
    2b34:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2b38:	mov	r2, #1
    2b3c:	str	r2, [r3]
    2b40:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2b44:	add	r3, r3, #8
    2b48:	sub	r1, fp, #1004	; 0x3ec
    2b4c:	mov	r2, #520	; 0x208
    2b50:	mov	r0, r3
    2b54:	bl	0 <memcpy>
    2b58:	b	3084 <eval_boolean+0x1dbc>
    2b5c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2b60:	ldr	r3, [r3]
    2b64:	cmp	r3, #0
    2b68:	bne	2b80 <eval_boolean+0x18b8>
    2b6c:	ldr	r3, [pc, #-1268]	; 2680 <eval_boolean+0x13b8>
    2b70:	ldr	r2, [pc, #-1292]	; 266c <eval_boolean+0x13a4>
    2b74:	ldr	r1, [pc, #-1264]	; 268c <eval_boolean+0x13c4>
    2b78:	ldr	r0, [pc, #-1284]	; 267c <eval_boolean+0x13b4>
    2b7c:	bl	0 <__assert_fail>
    2b80:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2b84:	sub	r0, fp, #1004	; 0x3ec
    2b88:	add	r3, r3, #8
    2b8c:	mov	r2, #520	; 0x208
    2b90:	mov	r1, r3
    2b94:	bl	0 <memcpy>
    2b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2b9c:	ldr	r3, [r3, #16]
    2ba0:	mov	r1, r3
    2ba4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2ba8:	bl	9098 <eval_cursor>
    2bac:	mov	r3, r0
    2bb0:	cmp	r3, #0
    2bb4:	beq	2bc0 <eval_boolean+0x18f8>
    2bb8:	mvn	r3, #0
    2bbc:	b	3088 <eval_boolean+0x1dc0>
    2bc0:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2bc4:	add	r3, r3, #8
    2bc8:	sub	r2, fp, #464	; 0x1d0
    2bcc:	mov	r1, r2
    2bd0:	mov	r0, r3
    2bd4:	bl	0 <coda_cursor_get_num_elements>
    2bd8:	mov	r3, r0
    2bdc:	cmp	r3, #0
    2be0:	beq	2bec <eval_boolean+0x1924>
    2be4:	mvn	r3, #0
    2be8:	b	3088 <eval_boolean+0x1dc0>
    2bec:	ldr	r3, [fp, #-464]	; 0xfffffe30
    2bf0:	cmp	r3, #0
    2bf4:	ble	2cd0 <eval_boolean+0x1a08>
    2bf8:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2bfc:	add	r3, r3, #8
    2c00:	mov	r0, r3
    2c04:	bl	0 <coda_cursor_goto_first_array_element>
    2c08:	mov	r3, r0
    2c0c:	cmp	r3, #0
    2c10:	beq	2c1c <eval_boolean+0x1954>
    2c14:	mvn	r3, #0
    2c18:	b	3088 <eval_boolean+0x1dc0>
    2c1c:	mov	r3, #0
    2c20:	str	r3, [fp, #-16]
    2c24:	b	2cc0 <eval_boolean+0x19f8>
    2c28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c2c:	ldr	r3, [r3, #20]
    2c30:	sub	r2, fp, #468	; 0x1d4
    2c34:	mov	r1, r3
    2c38:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2c3c:	bl	12c8 <eval_boolean>
    2c40:	mov	r3, r0
    2c44:	cmp	r3, #0
    2c48:	beq	2c54 <eval_boolean+0x198c>
    2c4c:	mvn	r3, #0
    2c50:	b	3088 <eval_boolean+0x1dc0>
    2c54:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    2c58:	cmp	r3, #0
    2c5c:	beq	2c74 <eval_boolean+0x19ac>
    2c60:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2c64:	mov	r2, #1
    2c68:	str	r2, [r3]
    2c6c:	mov	r3, #0
    2c70:	b	2cbc <eval_boolean+0x19f4>
    2c74:	ldr	r3, [fp, #-464]	; 0xfffffe30
    2c78:	sub	r2, r3, #1
    2c7c:	ldr	r3, [fp, #-16]
    2c80:	cmp	r2, r3
    2c84:	ble	2cac <eval_boolean+0x19e4>
    2c88:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2c8c:	add	r3, r3, #8
    2c90:	mov	r0, r3
    2c94:	bl	0 <coda_cursor_goto_next_array_element>
    2c98:	mov	r3, r0
    2c9c:	cmp	r3, #0
    2ca0:	beq	2cac <eval_boolean+0x19e4>
    2ca4:	mvn	r3, #0
    2ca8:	b	2cbc <eval_boolean+0x19f4>
    2cac:	ldr	r3, [fp, #-16]
    2cb0:	add	r3, r3, #1
    2cb4:	str	r3, [fp, #-16]
    2cb8:	b	2cc0 <eval_boolean+0x19f8>
    2cbc:	b	3088 <eval_boolean+0x1dc0>
    2cc0:	ldr	r3, [fp, #-464]	; 0xfffffe30
    2cc4:	ldr	r2, [fp, #-16]
    2cc8:	cmp	r2, r3
    2ccc:	blt	2c28 <eval_boolean+0x1960>
    2cd0:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2cd4:	mov	r2, #0
    2cd8:	str	r2, [r3]
    2cdc:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2ce0:	add	r3, r3, #8
    2ce4:	sub	r1, fp, #1004	; 0x3ec
    2ce8:	mov	r2, #520	; 0x208
    2cec:	mov	r0, r3
    2cf0:	bl	0 <memcpy>
    2cf4:	b	3084 <eval_boolean+0x1dbc>
    2cf8:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2cfc:	ldr	r3, [r3]
    2d00:	cmp	r3, #0
    2d04:	bne	2d1c <eval_boolean+0x1a54>
    2d08:	ldr	r3, [pc, #-1680]	; 2680 <eval_boolean+0x13b8>
    2d0c:	ldr	r2, [pc, #-1700]	; 2670 <eval_boolean+0x13a8>
    2d10:	ldr	r1, [pc, #-1676]	; 268c <eval_boolean+0x13c4>
    2d14:	ldr	r0, [pc, #-1696]	; 267c <eval_boolean+0x13b4>
    2d18:	bl	0 <__assert_fail>
    2d1c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2d20:	ldr	r3, [r3, #560]	; 0x230
    2d24:	cmp	r3, #0
    2d28:	beq	2d40 <eval_boolean+0x1a78>
    2d2c:	ldr	r1, [pc, #-1728]	; 2674 <eval_boolean+0x13ac>
    2d30:	mvn	r0, #400	; 0x190
    2d34:	bl	0 <coda_set_error>
    2d38:	mvn	r3, #0
    2d3c:	b	3088 <eval_boolean+0x1dc0>
    2d40:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2d44:	ldr	r3, [r3]
    2d48:	ldr	r0, [r3]
    2d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d50:	ldr	r3, [r3, #12]
    2d54:	sub	r2, fp, #472	; 0x1d8
    2d58:	mov	r1, r3
    2d5c:	bl	0 <coda_product_variable_get_size>
    2d60:	mov	r3, r0
    2d64:	cmp	r3, #0
    2d68:	beq	2d74 <eval_boolean+0x1aac>
    2d6c:	mvn	r3, #0
    2d70:	b	3088 <eval_boolean+0x1dc0>
    2d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d78:	ldr	r2, [r3, #12]
    2d7c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2d80:	str	r2, [r3, #560]	; 0x230
    2d84:	mov	r3, #0
    2d88:	str	r3, [fp, #-20]	; 0xffffffec
    2d8c:	b	2e0c <eval_boolean+0x1b44>
    2d90:	ldr	r3, [fp, #-20]	; 0xffffffec
    2d94:	mov	r2, r3
    2d98:	asr	r3, r2, #31
    2d9c:	ldr	r1, [fp, #-1008]	; 0xfffffc10
    2da0:	add	r1, r1, #560	; 0x230
    2da4:	strd	r2, [r1, #-8]
    2da8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2dac:	ldr	r3, [r3, #16]
    2db0:	sub	r2, fp, #476	; 0x1dc
    2db4:	mov	r1, r3
    2db8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2dbc:	bl	12c8 <eval_boolean>
    2dc0:	mov	r3, r0
    2dc4:	cmp	r3, #0
    2dc8:	beq	2dd4 <eval_boolean+0x1b0c>
    2dcc:	mvn	r3, #0
    2dd0:	b	3088 <eval_boolean+0x1dc0>
    2dd4:	ldr	r3, [fp, #-476]	; 0xfffffe24
    2dd8:	cmp	r3, #0
    2ddc:	beq	2e00 <eval_boolean+0x1b38>
    2de0:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2de4:	mov	r2, #1
    2de8:	str	r2, [r3]
    2dec:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2df0:	mov	r2, #0
    2df4:	str	r2, [r3, #560]	; 0x230
    2df8:	mov	r3, #0
    2dfc:	b	3088 <eval_boolean+0x1dc0>
    2e00:	ldr	r3, [fp, #-20]	; 0xffffffec
    2e04:	add	r3, r3, #1
    2e08:	str	r3, [fp, #-20]	; 0xffffffec
    2e0c:	ldr	r3, [fp, #-472]	; 0xfffffe28
    2e10:	ldr	r2, [fp, #-20]	; 0xffffffec
    2e14:	cmp	r2, r3
    2e18:	blt	2d90 <eval_boolean+0x1ac8>
    2e1c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2e20:	mov	r2, #0
    2e24:	str	r2, [r3]
    2e28:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2e2c:	mov	r2, #0
    2e30:	str	r2, [r3, #560]	; 0x230
    2e34:	b	3084 <eval_boolean+0x1dbc>
    2e38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e3c:	ldr	r3, [r3, #16]
    2e40:	sub	r2, fp, #480	; 0x1e0
    2e44:	mov	r1, r3
    2e48:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2e4c:	bl	12c8 <eval_boolean>
    2e50:	mov	r3, r0
    2e54:	cmp	r3, #0
    2e58:	beq	2e64 <eval_boolean+0x1b9c>
    2e5c:	mvn	r3, #0
    2e60:	b	3088 <eval_boolean+0x1dc0>
    2e64:	ldr	r3, [fp, #-480]	; 0xfffffe20
    2e68:	cmp	r3, #0
    2e6c:	beq	2e9c <eval_boolean+0x1bd4>
    2e70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e74:	ldr	r3, [r3, #20]
    2e78:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2e7c:	mov	r1, r3
    2e80:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2e84:	bl	12c8 <eval_boolean>
    2e88:	mov	r3, r0
    2e8c:	cmp	r3, #0
    2e90:	beq	3080 <eval_boolean+0x1db8>
    2e94:	mvn	r3, #0
    2e98:	b	3088 <eval_boolean+0x1dc0>
    2e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2ea0:	ldr	r3, [r3, #24]
    2ea4:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2ea8:	mov	r1, r3
    2eac:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2eb0:	bl	12c8 <eval_boolean>
    2eb4:	mov	r3, r0
    2eb8:	cmp	r3, #0
    2ebc:	beq	3080 <eval_boolean+0x1db8>
    2ec0:	mvn	r3, #0
    2ec4:	b	3088 <eval_boolean+0x1dc0>
    2ec8:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2ecc:	ldr	r3, [r3]
    2ed0:	cmp	r3, #0
    2ed4:	bne	2eec <eval_boolean+0x1c24>
    2ed8:	ldr	r3, [pc, #-2144]	; 2680 <eval_boolean+0x13b8>
    2edc:	ldr	r2, [pc, #-2156]	; 2678 <eval_boolean+0x13b0>
    2ee0:	ldr	r1, [pc, #-2140]	; 268c <eval_boolean+0x13c4>
    2ee4:	ldr	r0, [pc, #-2160]	; 267c <eval_boolean+0x13b4>
    2ee8:	bl	0 <__assert_fail>
    2eec:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2ef0:	sub	r0, fp, #1004	; 0x3ec
    2ef4:	add	r3, r3, #8
    2ef8:	mov	r2, #520	; 0x208
    2efc:	mov	r1, r3
    2f00:	bl	0 <memcpy>
    2f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f08:	ldr	r3, [r3, #16]
    2f0c:	mov	r1, r3
    2f10:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2f14:	bl	9098 <eval_cursor>
    2f18:	mov	r3, r0
    2f1c:	cmp	r3, #0
    2f20:	beq	2f2c <eval_boolean+0x1c64>
    2f24:	mvn	r3, #0
    2f28:	b	3088 <eval_boolean+0x1dc0>
    2f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f30:	ldr	r3, [r3, #20]
    2f34:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2f38:	mov	r1, r3
    2f3c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2f40:	bl	12c8 <eval_boolean>
    2f44:	mov	r3, r0
    2f48:	cmp	r3, #0
    2f4c:	beq	2f58 <eval_boolean+0x1c90>
    2f50:	mvn	r3, #0
    2f54:	b	3088 <eval_boolean+0x1dc0>
    2f58:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2f5c:	add	r3, r3, #8
    2f60:	sub	r1, fp, #1004	; 0x3ec
    2f64:	mov	r2, #520	; 0x208
    2f68:	mov	r0, r3
    2f6c:	bl	0 <memcpy>
    2f70:	b	3084 <eval_boolean+0x1dbc>
    2f74:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f78:	ldr	r3, [r3, #12]
    2f7c:	ldrb	r3, [r3]
    2f80:	sub	r3, r3, #105	; 0x69
    2f84:	str	r3, [fp, #-32]	; 0xffffffe0
    2f88:	ldr	r2, [fp, #-1008]	; 0xfffffc10
    2f8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2f90:	add	r3, r3, #66	; 0x42
    2f94:	lsl	r3, r3, #3
    2f98:	add	r3, r2, r3
    2f9c:	ldrd	r2, [r3]
    2fa0:	strd	r2, [fp, #-44]	; 0xffffffd4
    2fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fa8:	ldr	r1, [r3, #16]
    2fac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2fb0:	add	r3, r3, #66	; 0x42
    2fb4:	lsl	r3, r3, #3
    2fb8:	ldr	r2, [fp, #-1008]	; 0xfffffc10
    2fbc:	add	r3, r2, r3
    2fc0:	mov	r2, r3
    2fc4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2fc8:	bl	442c <eval_integer>
    2fcc:	mov	r3, r0
    2fd0:	cmp	r3, #0
    2fd4:	beq	2fe0 <eval_boolean+0x1d18>
    2fd8:	mvn	r3, #0
    2fdc:	b	3088 <eval_boolean+0x1dc0>
    2fe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fe4:	ldr	r3, [r3, #20]
    2fe8:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2fec:	mov	r1, r3
    2ff0:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2ff4:	bl	12c8 <eval_boolean>
    2ff8:	mov	r3, r0
    2ffc:	cmp	r3, #0
    3000:	beq	300c <eval_boolean+0x1d44>
    3004:	mvn	r3, #0
    3008:	b	3088 <eval_boolean+0x1dc0>
    300c:	ldr	r2, [fp, #-1008]	; 0xfffffc10
    3010:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3014:	add	r3, r3, #66	; 0x42
    3018:	lsl	r3, r3, #3
    301c:	add	r1, r2, r3
    3020:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    3024:	strd	r2, [r1]
    3028:	b	3084 <eval_boolean+0x1dbc>
    302c:	ldr	r3, [pc, #-2484]	; 2680 <eval_boolean+0x13b8>
    3030:	ldr	r2, [pc, #-2484]	; 2684 <eval_boolean+0x13bc>
    3034:	ldr	r1, [pc, #-2480]	; 268c <eval_boolean+0x13c4>
    3038:	ldr	r0, [pc, #-2488]	; 2688 <eval_boolean+0x13c0>
    303c:	bl	0 <__assert_fail>
    3040:	nop			; (mov r0, r0)
    3044:	b	3084 <eval_boolean+0x1dbc>
    3048:	nop			; (mov r0, r0)
    304c:	b	3084 <eval_boolean+0x1dbc>
    3050:	nop			; (mov r0, r0)
    3054:	b	3084 <eval_boolean+0x1dbc>
    3058:	nop			; (mov r0, r0)
    305c:	b	3084 <eval_boolean+0x1dbc>
    3060:	nop			; (mov r0, r0)
    3064:	b	3084 <eval_boolean+0x1dbc>
    3068:	nop			; (mov r0, r0)
    306c:	b	3084 <eval_boolean+0x1dbc>
    3070:	nop			; (mov r0, r0)
    3074:	b	3084 <eval_boolean+0x1dbc>
    3078:	nop			; (mov r0, r0)
    307c:	b	3084 <eval_boolean+0x1dbc>
    3080:	nop			; (mov r0, r0)
    3084:	mov	r3, #0
    3088:	mov	r0, r3
    308c:	sub	sp, fp, #4
    3090:	pop	{fp, pc}

00003094 <eval_float>:
    3094:	push	{fp, lr}
    3098:	vpush	{d8}
    309c:	add	fp, sp, #12
    30a0:	sub	sp, sp, #816	; 0x330
    30a4:	str	r0, [fp, #-808]	; 0xfffffcd8
    30a8:	str	r1, [fp, #-812]	; 0xfffffcd4
    30ac:	str	r2, [fp, #-816]	; 0xfffffcd0
    30b0:	ldr	r3, [fp, #-812]	; 0xfffffcd4
    30b4:	ldr	r3, [r3, #4]
    30b8:	cmp	r3, #1
    30bc:	bne	3110 <eval_float+0x7c>
    30c0:	sub	r3, fp, #52	; 0x34
    30c4:	mov	r2, r3
    30c8:	ldr	r1, [fp, #-812]	; 0xfffffcd4
    30cc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    30d0:	bl	442c <eval_integer>
    30d4:	mov	r3, r0
    30d8:	cmp	r3, #0
    30dc:	beq	30e8 <eval_float+0x54>
    30e0:	mvn	r3, #0
    30e4:	b	441c <eval_float+0x1388>
    30e8:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    30ec:	mov	r0, r2
    30f0:	mov	r1, r3
    30f4:	bl	0 <__aeabi_l2d>
    30f8:	mov	r2, r0
    30fc:	mov	r3, r1
    3100:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3104:	strd	r2, [r1]
    3108:	mov	r3, #0
    310c:	b	441c <eval_float+0x1388>
    3110:	ldr	r3, [fp, #-812]	; 0xfffffcd4
    3114:	ldr	r3, [r3]
    3118:	cmp	r3, #19
    311c:	bne	3138 <eval_float+0xa4>
    3120:	ldr	r3, [fp, #-812]	; 0xfffffcd4
    3124:	ldrd	r2, [r3, #16]
    3128:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    312c:	strd	r2, [r1]
    3130:	mov	r3, #0
    3134:	b	441c <eval_float+0x1388>
    3138:	ldr	r3, [fp, #-812]	; 0xfffffcd4
    313c:	str	r3, [fp, #-28]	; 0xffffffe4
    3140:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3144:	ldr	r3, [r3]
    3148:	cmp	r3, #86	; 0x56
    314c:	ldrls	pc, [pc, r3, lsl #2]
    3150:	b	4400 <eval_float+0x136c>
    3154:	.word	0x000034d8
    3158:	.word	0x00003664
    315c:	.word	0x00004400
    3160:	.word	0x00003db4
    3164:	.word	0x00004400
    3168:	.word	0x00004400
    316c:	.word	0x00004400
    3170:	.word	0x00004400
    3174:	.word	0x00003f44
    3178:	.word	0x000040f0
    317c:	.word	0x00004400
    3180:	.word	0x0000429c
    3184:	.word	0x00004400
    3188:	.word	0x00004400
    318c:	.word	0x00004400
    3190:	.word	0x00004400
    3194:	.word	0x00004400
    3198:	.word	0x0000353c
    319c:	.word	0x00004400
    31a0:	.word	0x00004400
    31a4:	.word	0x00004400
    31a8:	.word	0x00004400
    31ac:	.word	0x00004400
    31b0:	.word	0x00004400
    31b4:	.word	0x000037b4
    31b8:	.word	0x00004400
    31bc:	.word	0x00004400
    31c0:	.word	0x00004400
    31c4:	.word	0x00004400
    31c8:	.word	0x000032b0
    31cc:	.word	0x00003588
    31d0:	.word	0x00004400
    31d4:	.word	0x00004400
    31d8:	.word	0x00004400
    31dc:	.word	0x00004400
    31e0:	.word	0x00004400
    31e4:	.word	0x00004400
    31e8:	.word	0x00004400
    31ec:	.word	0x00004400
    31f0:	.word	0x00004400
    31f4:	.word	0x00004400
    31f8:	.word	0x00004400
    31fc:	.word	0x00003d24
    3200:	.word	0x00004400
    3204:	.word	0x00004400
    3208:	.word	0x00004400
    320c:	.word	0x00004400
    3210:	.word	0x00004400
    3214:	.word	0x00004400
    3218:	.word	0x00004400
    321c:	.word	0x00004400
    3220:	.word	0x00004400
    3224:	.word	0x00004400
    3228:	.word	0x00004400
    322c:	.word	0x00004400
    3230:	.word	0x00004400
    3234:	.word	0x00003a7c
    3238:	.word	0x00003b00
    323c:	.word	0x00003848
    3240:	.word	0x00003744
    3244:	.word	0x00003494
    3248:	.word	0x00004400
    324c:	.word	0x00004400
    3250:	.word	0x00004400
    3254:	.word	0x00004400
    3258:	.word	0x00004400
    325c:	.word	0x000038e8
    3260:	.word	0x00004400
    3264:	.word	0x00004400
    3268:	.word	0x00004400
    326c:	.word	0x00004400
    3270:	.word	0x00004400
    3274:	.word	0x000035d4
    3278:	.word	0x00004400
    327c:	.word	0x00004400
    3280:	.word	0x00004400
    3284:	.word	0x00004400
    3288:	.word	0x00004400
    328c:	.word	0x000036d4
    3290:	.word	0x00003b84
    3294:	.word	0x00004400
    3298:	.word	0x00004400
    329c:	.word	0x00004400
    32a0:	.word	0x00004400
    32a4:	.word	0x00004400
    32a8:	.word	0x00004400
    32ac:	.word	0x00004348
    32b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    32b4:	ldr	r3, [r3, #16]
    32b8:	ldr	r3, [r3, #4]
    32bc:	cmp	r3, #4
    32c0:	bne	338c <eval_float+0x2f8>
    32c4:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    32c8:	ldr	r3, [r3]
    32cc:	cmp	r3, #0
    32d0:	bne	32e8 <eval_float+0x254>
    32d4:	ldr	r3, [pc, #1856]	; 3a1c <eval_float+0x988>
    32d8:	ldr	r2, [pc, #1800]	; 39e8 <eval_float+0x954>
    32dc:	ldr	r1, [pc, #1860]	; 3a28 <eval_float+0x994>
    32e0:	ldr	r0, [pc, #1840]	; 3a18 <eval_float+0x984>
    32e4:	bl	0 <__assert_fail>
    32e8:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    32ec:	sub	r0, fp, #804	; 0x324
    32f0:	add	r3, r3, #8
    32f4:	mov	r2, #520	; 0x208
    32f8:	mov	r1, r3
    32fc:	bl	0 <memcpy>
    3300:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3304:	ldr	r3, [r3, #16]
    3308:	mov	r1, r3
    330c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3310:	bl	9098 <eval_cursor>
    3314:	mov	r3, r0
    3318:	cmp	r3, #0
    331c:	beq	3328 <eval_float+0x294>
    3320:	mvn	r3, #0
    3324:	b	441c <eval_float+0x1388>
    3328:	bl	0 <coda_get_option_perform_conversions>
    332c:	str	r0, [fp, #-32]	; 0xffffffe0
    3330:	mov	r0, #0
    3334:	bl	0 <coda_set_option_perform_conversions>
    3338:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    333c:	add	r3, r3, #8
    3340:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3344:	mov	r0, r3
    3348:	bl	0 <coda_cursor_read_double>
    334c:	mov	r3, r0
    3350:	cmp	r3, #0
    3354:	beq	3368 <eval_float+0x2d4>
    3358:	ldr	r0, [fp, #-32]	; 0xffffffe0
    335c:	bl	0 <coda_set_option_perform_conversions>
    3360:	mvn	r3, #0
    3364:	b	441c <eval_float+0x1388>
    3368:	ldr	r0, [fp, #-32]	; 0xffffffe0
    336c:	bl	0 <coda_set_option_perform_conversions>
    3370:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3374:	add	r3, r3, #8
    3378:	sub	r1, fp, #804	; 0x324
    337c:	mov	r2, #520	; 0x208
    3380:	mov	r0, r3
    3384:	bl	0 <memcpy>
    3388:	b	4418 <eval_float+0x1384>
    338c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3390:	ldr	r3, [r3, #16]
    3394:	ldr	r3, [r3, #4]
    3398:	cmp	r3, #3
    339c:	bne	3444 <eval_float+0x3b0>
    33a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    33a4:	ldr	r1, [r3, #16]
    33a8:	sub	r0, fp, #60	; 0x3c
    33ac:	sub	r2, fp, #56	; 0x38
    33b0:	sub	r3, fp, #64	; 0x40
    33b4:	str	r3, [sp]
    33b8:	mov	r3, r0
    33bc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    33c0:	bl	6670 <eval_string>
    33c4:	mov	r3, r0
    33c8:	cmp	r3, #0
    33cc:	beq	33d8 <eval_float+0x344>
    33d0:	mvn	r3, #0
    33d4:	b	441c <eval_float+0x1388>
    33d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    33dc:	cmp	r3, #0
    33e0:	bne	33f8 <eval_float+0x364>
    33e4:	ldr	r1, [pc, #1536]	; 39ec <eval_float+0x958>
    33e8:	mvn	r0, #102	; 0x66
    33ec:	bl	0 <coda_set_error>
    33f0:	mvn	r3, #0
    33f4:	b	441c <eval_float+0x1388>
    33f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    33fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
    3400:	add	r0, r3, r2
    3404:	ldr	r1, [fp, #-60]	; 0xffffffc4
    3408:	mov	r3, #0
    340c:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3410:	bl	0 <coda_ascii_parse_double>
    3414:	mov	r3, r0
    3418:	cmp	r3, #0
    341c:	bge	3434 <eval_float+0x3a0>
    3420:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3424:	mov	r0, r3
    3428:	bl	0 <free>
    342c:	mvn	r3, #0
    3430:	b	441c <eval_float+0x1388>
    3434:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3438:	mov	r0, r3
    343c:	bl	0 <free>
    3440:	b	4418 <eval_float+0x1384>
    3444:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3448:	ldr	r3, [r3, #16]
    344c:	sub	r2, fp, #76	; 0x4c
    3450:	mov	r1, r3
    3454:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3458:	bl	442c <eval_integer>
    345c:	mov	r3, r0
    3460:	cmp	r3, #0
    3464:	beq	3470 <eval_float+0x3dc>
    3468:	mvn	r3, #0
    346c:	b	441c <eval_float+0x1388>
    3470:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    3474:	mov	r0, r2
    3478:	mov	r1, r3
    347c:	bl	0 <__aeabi_l2d>
    3480:	mov	r2, r0
    3484:	mov	r3, r1
    3488:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    348c:	strd	r2, [r1]
    3490:	b	4418 <eval_float+0x1384>
    3494:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3498:	ldr	r3, [r3, #16]
    349c:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    34a0:	mov	r1, r3
    34a4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    34a8:	bl	3094 <eval_float>
    34ac:	mov	r3, r0
    34b0:	cmp	r3, #0
    34b4:	beq	34c0 <eval_float+0x42c>
    34b8:	mvn	r3, #0
    34bc:	b	441c <eval_float+0x1388>
    34c0:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    34c4:	vldr	d7, [r3]
    34c8:	vneg.f64	d7, d7
    34cc:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    34d0:	vstr	d7, [r3]
    34d4:	b	4418 <eval_float+0x1384>
    34d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    34dc:	ldr	r3, [r3, #16]
    34e0:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    34e4:	mov	r1, r3
    34e8:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    34ec:	bl	3094 <eval_float>
    34f0:	mov	r3, r0
    34f4:	cmp	r3, #0
    34f8:	beq	3504 <eval_float+0x470>
    34fc:	mvn	r3, #0
    3500:	b	441c <eval_float+0x1388>
    3504:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3508:	vldr	d7, [r3]
    350c:	vcmpe.f64	d7, #0.0
    3510:	vmrs	APSR_nzcv, fpscr
    3514:	blt	3524 <eval_float+0x490>
    3518:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    351c:	vldr	d7, [r3]
    3520:	b	3530 <eval_float+0x49c>
    3524:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3528:	vldr	d7, [r3]
    352c:	vneg.f64	d7, d7
    3530:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3534:	vstr	d7, [r3]
    3538:	b	4418 <eval_float+0x1384>
    353c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3540:	ldr	r3, [r3, #16]
    3544:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3548:	mov	r1, r3
    354c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3550:	bl	3094 <eval_float>
    3554:	mov	r3, r0
    3558:	cmp	r3, #0
    355c:	beq	3568 <eval_float+0x4d4>
    3560:	mvn	r3, #0
    3564:	b	441c <eval_float+0x1388>
    3568:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    356c:	vldr	d7, [r3]
    3570:	vmov.f64	d0, d7
    3574:	bl	0 <ceil>
    3578:	vmov.f64	d7, d0
    357c:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3580:	vstr	d7, [r3]
    3584:	b	4418 <eval_float+0x1384>
    3588:	ldr	r3, [fp, #-28]	; 0xffffffe4
    358c:	ldr	r3, [r3, #16]
    3590:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3594:	mov	r1, r3
    3598:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    359c:	bl	3094 <eval_float>
    35a0:	mov	r3, r0
    35a4:	cmp	r3, #0
    35a8:	beq	35b4 <eval_float+0x520>
    35ac:	mvn	r3, #0
    35b0:	b	441c <eval_float+0x1388>
    35b4:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    35b8:	vldr	d7, [r3]
    35bc:	vmov.f64	d0, d7
    35c0:	bl	0 <floor>
    35c4:	vmov.f64	d7, d0
    35c8:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    35cc:	vstr	d7, [r3]
    35d0:	b	4418 <eval_float+0x1384>
    35d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    35d8:	ldr	r3, [r3, #16]
    35dc:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    35e0:	mov	r1, r3
    35e4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    35e8:	bl	3094 <eval_float>
    35ec:	mov	r3, r0
    35f0:	cmp	r3, #0
    35f4:	beq	3600 <eval_float+0x56c>
    35f8:	mvn	r3, #0
    35fc:	b	441c <eval_float+0x1388>
    3600:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3604:	vldr	d7, [r3]
    3608:	vcmpe.f64	d7, #0.0
    360c:	vmrs	APSR_nzcv, fpscr
    3610:	bpl	363c <eval_float+0x5a8>
    3614:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3618:	vldr	d7, [r3]
    361c:	vldr	d6, [pc, #956]	; 39e0 <eval_float+0x94c>
    3620:	vsub.f64	d7, d7, d6
    3624:	vmov.f64	d0, d7
    3628:	bl	0 <ceil>
    362c:	vmov.f64	d7, d0
    3630:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3634:	vstr	d7, [r3]
    3638:	b	4418 <eval_float+0x1384>
    363c:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3640:	vldr	d7, [r3]
    3644:	vldr	d6, [pc, #916]	; 39e0 <eval_float+0x94c>
    3648:	vadd.f64	d7, d7, d6
    364c:	vmov.f64	d0, d7
    3650:	bl	0 <floor>
    3654:	vmov.f64	d7, d0
    3658:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    365c:	vstr	d7, [r3]
    3660:	b	4418 <eval_float+0x1384>
    3664:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3668:	ldr	r3, [r3, #16]
    366c:	sub	r2, fp, #84	; 0x54
    3670:	mov	r1, r3
    3674:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3678:	bl	3094 <eval_float>
    367c:	mov	r3, r0
    3680:	cmp	r3, #0
    3684:	beq	3690 <eval_float+0x5fc>
    3688:	mvn	r3, #0
    368c:	b	441c <eval_float+0x1388>
    3690:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3694:	ldr	r3, [r3, #20]
    3698:	sub	r2, fp, #92	; 0x5c
    369c:	mov	r1, r3
    36a0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    36a4:	bl	3094 <eval_float>
    36a8:	mov	r3, r0
    36ac:	cmp	r3, #0
    36b0:	beq	36bc <eval_float+0x628>
    36b4:	mvn	r3, #0
    36b8:	b	441c <eval_float+0x1388>
    36bc:	vldr	d6, [fp, #-84]	; 0xffffffac
    36c0:	vldr	d7, [fp, #-92]	; 0xffffffa4
    36c4:	vadd.f64	d7, d6, d7
    36c8:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    36cc:	vstr	d7, [r3]
    36d0:	b	4418 <eval_float+0x1384>
    36d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    36d8:	ldr	r3, [r3, #16]
    36dc:	sub	r2, fp, #100	; 0x64
    36e0:	mov	r1, r3
    36e4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    36e8:	bl	3094 <eval_float>
    36ec:	mov	r3, r0
    36f0:	cmp	r3, #0
    36f4:	beq	3700 <eval_float+0x66c>
    36f8:	mvn	r3, #0
    36fc:	b	441c <eval_float+0x1388>
    3700:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3704:	ldr	r3, [r3, #20]
    3708:	sub	r2, fp, #108	; 0x6c
    370c:	mov	r1, r3
    3710:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3714:	bl	3094 <eval_float>
    3718:	mov	r3, r0
    371c:	cmp	r3, #0
    3720:	beq	372c <eval_float+0x698>
    3724:	mvn	r3, #0
    3728:	b	441c <eval_float+0x1388>
    372c:	vldr	d6, [fp, #-100]	; 0xffffff9c
    3730:	vldr	d7, [fp, #-108]	; 0xffffff94
    3734:	vsub.f64	d7, d6, d7
    3738:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    373c:	vstr	d7, [r3]
    3740:	b	4418 <eval_float+0x1384>
    3744:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3748:	ldr	r3, [r3, #16]
    374c:	sub	r2, fp, #116	; 0x74
    3750:	mov	r1, r3
    3754:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3758:	bl	3094 <eval_float>
    375c:	mov	r3, r0
    3760:	cmp	r3, #0
    3764:	beq	3770 <eval_float+0x6dc>
    3768:	mvn	r3, #0
    376c:	b	441c <eval_float+0x1388>
    3770:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3774:	ldr	r3, [r3, #20]
    3778:	sub	r2, fp, #124	; 0x7c
    377c:	mov	r1, r3
    3780:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3784:	bl	3094 <eval_float>
    3788:	mov	r3, r0
    378c:	cmp	r3, #0
    3790:	beq	379c <eval_float+0x708>
    3794:	mvn	r3, #0
    3798:	b	441c <eval_float+0x1388>
    379c:	vldr	d6, [fp, #-116]	; 0xffffff8c
    37a0:	vldr	d7, [fp, #-124]	; 0xffffff84
    37a4:	vmul.f64	d7, d6, d7
    37a8:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    37ac:	vstr	d7, [r3]
    37b0:	b	4418 <eval_float+0x1384>
    37b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    37b8:	ldr	r3, [r3, #16]
    37bc:	sub	r2, fp, #132	; 0x84
    37c0:	mov	r1, r3
    37c4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    37c8:	bl	3094 <eval_float>
    37cc:	mov	r3, r0
    37d0:	cmp	r3, #0
    37d4:	beq	37e0 <eval_float+0x74c>
    37d8:	mvn	r3, #0
    37dc:	b	441c <eval_float+0x1388>
    37e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    37e4:	ldr	r3, [r3, #20]
    37e8:	sub	r2, fp, #140	; 0x8c
    37ec:	mov	r1, r3
    37f0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    37f4:	bl	3094 <eval_float>
    37f8:	mov	r3, r0
    37fc:	cmp	r3, #0
    3800:	beq	380c <eval_float+0x778>
    3804:	mvn	r3, #0
    3808:	b	441c <eval_float+0x1388>
    380c:	vldr	d7, [fp, #-140]	; 0xffffff74
    3810:	vcmp.f64	d7, #0.0
    3814:	vmrs	APSR_nzcv, fpscr
    3818:	bne	3830 <eval_float+0x79c>
    381c:	ldr	r1, [pc, #460]	; 39f0 <eval_float+0x95c>
    3820:	mvn	r0, #400	; 0x190
    3824:	bl	0 <coda_set_error>
    3828:	mvn	r3, #0
    382c:	b	441c <eval_float+0x1388>
    3830:	vldr	d5, [fp, #-132]	; 0xffffff7c
    3834:	vldr	d6, [fp, #-140]	; 0xffffff74
    3838:	vdiv.f64	d7, d5, d6
    383c:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3840:	vstr	d7, [r3]
    3844:	b	4418 <eval_float+0x1384>
    3848:	ldr	r3, [fp, #-28]	; 0xffffffe4
    384c:	ldr	r3, [r3, #16]
    3850:	sub	r2, fp, #148	; 0x94
    3854:	mov	r1, r3
    3858:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    385c:	bl	3094 <eval_float>
    3860:	mov	r3, r0
    3864:	cmp	r3, #0
    3868:	beq	3874 <eval_float+0x7e0>
    386c:	mvn	r3, #0
    3870:	b	441c <eval_float+0x1388>
    3874:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3878:	ldr	r3, [r3, #20]
    387c:	sub	r2, fp, #156	; 0x9c
    3880:	mov	r1, r3
    3884:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3888:	bl	3094 <eval_float>
    388c:	mov	r3, r0
    3890:	cmp	r3, #0
    3894:	beq	38a0 <eval_float+0x80c>
    3898:	mvn	r3, #0
    389c:	b	441c <eval_float+0x1388>
    38a0:	vldr	d7, [fp, #-156]	; 0xffffff64
    38a4:	vcmp.f64	d7, #0.0
    38a8:	vmrs	APSR_nzcv, fpscr
    38ac:	bne	38c4 <eval_float+0x830>
    38b0:	ldr	r1, [pc, #316]	; 39f4 <eval_float+0x960>
    38b4:	mvn	r0, #400	; 0x190
    38b8:	bl	0 <coda_set_error>
    38bc:	mvn	r3, #0
    38c0:	b	441c <eval_float+0x1388>
    38c4:	vldr	d7, [fp, #-148]	; 0xffffff6c
    38c8:	vldr	d6, [fp, #-156]	; 0xffffff64
    38cc:	vmov.f64	d1, d6
    38d0:	vmov.f64	d0, d7
    38d4:	bl	0 <fmod>
    38d8:	vmov.f64	d7, d0
    38dc:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    38e0:	vstr	d7, [r3]
    38e4:	b	4418 <eval_float+0x1384>
    38e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    38ec:	ldr	r3, [r3, #16]
    38f0:	sub	r2, fp, #164	; 0xa4
    38f4:	mov	r1, r3
    38f8:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    38fc:	bl	3094 <eval_float>
    3900:	mov	r3, r0
    3904:	cmp	r3, #0
    3908:	beq	3914 <eval_float+0x880>
    390c:	mvn	r3, #0
    3910:	b	441c <eval_float+0x1388>
    3914:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3918:	ldr	r3, [r3, #20]
    391c:	ldr	r3, [r3, #4]
    3920:	cmp	r3, #1
    3924:	bne	3a2c <eval_float+0x998>
    3928:	ldr	r3, [fp, #-28]	; 0xffffffe4
    392c:	ldr	r3, [r3, #20]
    3930:	sub	r2, fp, #180	; 0xb4
    3934:	mov	r1, r3
    3938:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    393c:	bl	442c <eval_integer>
    3940:	mov	r3, r0
    3944:	cmp	r3, #0
    3948:	beq	3954 <eval_float+0x8c0>
    394c:	mvn	r3, #0
    3950:	b	441c <eval_float+0x1388>
    3954:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    3958:	mvn	r0, #63	; 0x3f
    395c:	mvn	r1, #0
    3960:	cmp	r2, r0
    3964:	sbcs	r3, r3, r1
    3968:	blt	39a4 <eval_float+0x910>
    396c:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    3970:	cmp	r2, #65	; 0x41
    3974:	sbcs	r3, r3, #0
    3978:	bge	39a4 <eval_float+0x910>
    397c:	vldr	d7, [fp, #-164]	; 0xffffff5c
    3980:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    3984:	mov	r3, r2
    3988:	mov	r0, r3
    398c:	vmov.f64	d0, d7
    3990:	bl	0 <ipow>
    3994:	vmov.f64	d7, d0
    3998:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    399c:	vstr	d7, [r3]
    39a0:	b	4418 <eval_float+0x1384>
    39a4:	vldr	d8, [fp, #-164]	; 0xffffff5c
    39a8:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    39ac:	mov	r0, r2
    39b0:	mov	r1, r3
    39b4:	bl	0 <__aeabi_l2d>
    39b8:	mov	r2, r0
    39bc:	mov	r3, r1
    39c0:	vmov	d1, r2, r3
    39c4:	vmov.f64	d0, d8
    39c8:	bl	0 <pow>
    39cc:	vmov.f64	d7, d0
    39d0:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    39d4:	vstr	d7, [r3]
    39d8:	b	4418 <eval_float+0x1384>
    39dc:	nop			; (mov r0, r0)
    39e0:	.word	0x00000000
    39e4:	.word	0x3fe00000
    39e8:	.word	0x0000058a
    39ec:	.word	0x000001d4
    39f0:	.word	0x00000210
    39f4:	.word	0x0000022c
    39f8:	.word	0x00000248
    39fc:	.word	0x00000268
    3a00:	.word	0x00000280
    3a04:	.word	0x000002a0
    3a08:	.word	0x000006ca
    3a0c:	.word	0x000006f7
    3a10:	.word	0x00000727
    3a14:	.word	0x00000756
    3a18:	.word	0x0000017c
    3a1c:	.word	0x00000ebc
    3a20:	.word	0x00000775
    3a24:	.word	0x000000a4
    3a28:	.word	0x00000024
    3a2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3a30:	ldr	r3, [r3, #20]
    3a34:	sub	r2, fp, #172	; 0xac
    3a38:	mov	r1, r3
    3a3c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3a40:	bl	3094 <eval_float>
    3a44:	mov	r3, r0
    3a48:	cmp	r3, #0
    3a4c:	beq	3a58 <eval_float+0x9c4>
    3a50:	mvn	r3, #0
    3a54:	b	441c <eval_float+0x1388>
    3a58:	vldr	d7, [fp, #-164]	; 0xffffff5c
    3a5c:	vldr	d6, [fp, #-172]	; 0xffffff54
    3a60:	vmov.f64	d1, d6
    3a64:	vmov.f64	d0, d7
    3a68:	bl	0 <pow>
    3a6c:	vmov.f64	d7, d0
    3a70:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3a74:	vstr	d7, [r3]
    3a78:	b	4418 <eval_float+0x1384>
    3a7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3a80:	ldr	r3, [r3, #16]
    3a84:	sub	r2, fp, #188	; 0xbc
    3a88:	mov	r1, r3
    3a8c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3a90:	bl	3094 <eval_float>
    3a94:	mov	r3, r0
    3a98:	cmp	r3, #0
    3a9c:	beq	3aa8 <eval_float+0xa14>
    3aa0:	mvn	r3, #0
    3aa4:	b	441c <eval_float+0x1388>
    3aa8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3aac:	ldr	r3, [r3, #20]
    3ab0:	sub	r2, fp, #196	; 0xc4
    3ab4:	mov	r1, r3
    3ab8:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3abc:	bl	3094 <eval_float>
    3ac0:	mov	r3, r0
    3ac4:	cmp	r3, #0
    3ac8:	beq	3ad4 <eval_float+0xa40>
    3acc:	mvn	r3, #0
    3ad0:	b	441c <eval_float+0x1388>
    3ad4:	vldr	d6, [fp, #-188]	; 0xffffff44
    3ad8:	vldr	d7, [fp, #-196]	; 0xffffff3c
    3adc:	vcmpe.f64	d6, d7
    3ae0:	vmrs	APSR_nzcv, fpscr
    3ae4:	ble	3af0 <eval_float+0xa5c>
    3ae8:	ldrd	r2, [fp, #-188]	; 0xffffff44
    3aec:	b	3af4 <eval_float+0xa60>
    3af0:	ldrd	r2, [fp, #-196]	; 0xffffff3c
    3af4:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3af8:	strd	r2, [r1]
    3afc:	b	4418 <eval_float+0x1384>
    3b00:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3b04:	ldr	r3, [r3, #16]
    3b08:	sub	r2, fp, #204	; 0xcc
    3b0c:	mov	r1, r3
    3b10:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3b14:	bl	3094 <eval_float>
    3b18:	mov	r3, r0
    3b1c:	cmp	r3, #0
    3b20:	beq	3b2c <eval_float+0xa98>
    3b24:	mvn	r3, #0
    3b28:	b	441c <eval_float+0x1388>
    3b2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3b30:	ldr	r3, [r3, #20]
    3b34:	sub	r2, fp, #212	; 0xd4
    3b38:	mov	r1, r3
    3b3c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3b40:	bl	3094 <eval_float>
    3b44:	mov	r3, r0
    3b48:	cmp	r3, #0
    3b4c:	beq	3b58 <eval_float+0xac4>
    3b50:	mvn	r3, #0
    3b54:	b	441c <eval_float+0x1388>
    3b58:	vldr	d6, [fp, #-204]	; 0xffffff34
    3b5c:	vldr	d7, [fp, #-212]	; 0xffffff2c
    3b60:	vcmpe.f64	d6, d7
    3b64:	vmrs	APSR_nzcv, fpscr
    3b68:	bpl	3b74 <eval_float+0xae0>
    3b6c:	ldrd	r2, [fp, #-204]	; 0xffffff34
    3b70:	b	3b78 <eval_float+0xae4>
    3b74:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    3b78:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3b7c:	strd	r2, [r1]
    3b80:	b	4418 <eval_float+0x1384>
    3b84:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3b88:	ldr	r1, [r3, #16]
    3b8c:	sub	r0, fp, #224	; 0xe0
    3b90:	sub	r2, fp, #216	; 0xd8
    3b94:	sub	r3, fp, #232	; 0xe8
    3b98:	str	r3, [sp]
    3b9c:	mov	r3, r0
    3ba0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3ba4:	bl	6670 <eval_string>
    3ba8:	mov	r3, r0
    3bac:	cmp	r3, #0
    3bb0:	beq	3bbc <eval_float+0xb28>
    3bb4:	mvn	r3, #0
    3bb8:	b	441c <eval_float+0x1388>
    3bbc:	ldr	r3, [fp, #-224]	; 0xffffff20
    3bc0:	cmp	r3, #0
    3bc4:	bge	3bdc <eval_float+0xb48>
    3bc8:	ldr	r1, [pc, #-472]	; 39f8 <eval_float+0x964>
    3bcc:	mvn	r0, #400	; 0x190
    3bd0:	bl	0 <coda_set_error>
    3bd4:	mvn	r3, #0
    3bd8:	b	441c <eval_float+0x1388>
    3bdc:	ldr	r3, [fp, #-224]	; 0xffffff20
    3be0:	cmp	r3, #0
    3be4:	bne	3bfc <eval_float+0xb68>
    3be8:	ldr	r1, [pc, #-500]	; 39fc <eval_float+0x968>
    3bec:	mvn	r0, #400	; 0x190
    3bf0:	bl	0 <coda_set_error>
    3bf4:	mvn	r3, #0
    3bf8:	b	441c <eval_float+0x1388>
    3bfc:	ldr	r3, [fp, #-232]	; 0xffffff18
    3c00:	ldr	r1, [fp, #-216]	; 0xffffff28
    3c04:	ldr	r2, [fp, #-224]	; 0xffffff20
    3c08:	add	r2, r1, r2
    3c0c:	add	r3, r3, r2
    3c10:	mov	r2, #0
    3c14:	strb	r2, [r3]
    3c18:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3c1c:	ldr	r1, [r3, #20]
    3c20:	sub	r0, fp, #228	; 0xe4
    3c24:	sub	r2, fp, #220	; 0xdc
    3c28:	sub	r3, fp, #236	; 0xec
    3c2c:	str	r3, [sp]
    3c30:	mov	r3, r0
    3c34:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3c38:	bl	6670 <eval_string>
    3c3c:	mov	r3, r0
    3c40:	cmp	r3, #0
    3c44:	beq	3c5c <eval_float+0xbc8>
    3c48:	ldr	r3, [fp, #-232]	; 0xffffff18
    3c4c:	mov	r0, r3
    3c50:	bl	0 <free>
    3c54:	mvn	r3, #0
    3c58:	b	441c <eval_float+0x1388>
    3c5c:	ldr	r3, [fp, #-228]	; 0xffffff1c
    3c60:	cmp	r3, #0
    3c64:	bge	3c7c <eval_float+0xbe8>
    3c68:	ldr	r1, [pc, #-624]	; 3a00 <eval_float+0x96c>
    3c6c:	mvn	r0, #400	; 0x190
    3c70:	bl	0 <coda_set_error>
    3c74:	mvn	r3, #0
    3c78:	b	441c <eval_float+0x1388>
    3c7c:	ldr	r3, [fp, #-228]	; 0xffffff1c
    3c80:	cmp	r3, #0
    3c84:	bne	3c9c <eval_float+0xc08>
    3c88:	ldr	r1, [pc, #-652]	; 3a04 <eval_float+0x970>
    3c8c:	mvn	r0, #400	; 0x190
    3c90:	bl	0 <coda_set_error>
    3c94:	mvn	r3, #0
    3c98:	b	441c <eval_float+0x1388>
    3c9c:	ldr	r3, [fp, #-236]	; 0xffffff14
    3ca0:	ldr	r1, [fp, #-220]	; 0xffffff24
    3ca4:	ldr	r2, [fp, #-228]	; 0xffffff1c
    3ca8:	add	r2, r1, r2
    3cac:	add	r3, r3, r2
    3cb0:	mov	r2, #0
    3cb4:	strb	r2, [r3]
    3cb8:	ldr	r3, [fp, #-236]	; 0xffffff14
    3cbc:	ldr	r2, [fp, #-220]	; 0xffffff24
    3cc0:	add	r0, r3, r2
    3cc4:	ldr	r3, [fp, #-232]	; 0xffffff18
    3cc8:	ldr	r2, [fp, #-216]	; 0xffffff28
    3ccc:	add	r3, r3, r2
    3cd0:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3cd4:	mov	r1, r3
    3cd8:	bl	0 <coda_time_string_to_double>
    3cdc:	mov	r3, r0
    3ce0:	cmp	r3, #0
    3ce4:	beq	3d08 <eval_float+0xc74>
    3ce8:	ldr	r3, [fp, #-236]	; 0xffffff14
    3cec:	mov	r0, r3
    3cf0:	bl	0 <free>
    3cf4:	ldr	r3, [fp, #-232]	; 0xffffff18
    3cf8:	mov	r0, r3
    3cfc:	bl	0 <free>
    3d00:	mvn	r3, #0
    3d04:	b	441c <eval_float+0x1388>
    3d08:	ldr	r3, [fp, #-236]	; 0xffffff14
    3d0c:	mov	r0, r3
    3d10:	bl	0 <free>
    3d14:	ldr	r3, [fp, #-232]	; 0xffffff18
    3d18:	mov	r0, r3
    3d1c:	bl	0 <free>
    3d20:	b	4418 <eval_float+0x1384>
    3d24:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3d28:	ldr	r3, [r3, #16]
    3d2c:	sub	r2, fp, #240	; 0xf0
    3d30:	mov	r1, r3
    3d34:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3d38:	bl	12c8 <eval_boolean>
    3d3c:	mov	r3, r0
    3d40:	cmp	r3, #0
    3d44:	beq	3d50 <eval_float+0xcbc>
    3d48:	mvn	r3, #0
    3d4c:	b	441c <eval_float+0x1388>
    3d50:	ldr	r3, [fp, #-240]	; 0xffffff10
    3d54:	cmp	r3, #0
    3d58:	beq	3d88 <eval_float+0xcf4>
    3d5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3d60:	ldr	r3, [r3, #20]
    3d64:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3d68:	mov	r1, r3
    3d6c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3d70:	bl	3094 <eval_float>
    3d74:	mov	r3, r0
    3d78:	cmp	r3, #0
    3d7c:	beq	4414 <eval_float+0x1380>
    3d80:	mvn	r3, #0
    3d84:	b	441c <eval_float+0x1388>
    3d88:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3d8c:	ldr	r3, [r3, #24]
    3d90:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3d94:	mov	r1, r3
    3d98:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3d9c:	bl	3094 <eval_float>
    3da0:	mov	r3, r0
    3da4:	cmp	r3, #0
    3da8:	beq	4414 <eval_float+0x1380>
    3dac:	mvn	r3, #0
    3db0:	b	441c <eval_float+0x1388>
    3db4:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3db8:	ldr	r3, [r3]
    3dbc:	cmp	r3, #0
    3dc0:	bne	3dd8 <eval_float+0xd44>
    3dc4:	ldr	r3, [pc, #-944]	; 3a1c <eval_float+0x988>
    3dc8:	ldr	r2, [pc, #-968]	; 3a08 <eval_float+0x974>
    3dcc:	ldr	r1, [pc, #-940]	; 3a28 <eval_float+0x994>
    3dd0:	ldr	r0, [pc, #-960]	; 3a18 <eval_float+0x984>
    3dd4:	bl	0 <__assert_fail>
    3dd8:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3ddc:	sub	r0, fp, #804	; 0x324
    3de0:	add	r3, r3, #8
    3de4:	mov	r2, #520	; 0x208
    3de8:	mov	r1, r3
    3dec:	bl	0 <memcpy>
    3df0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3df4:	ldr	r3, [r3, #16]
    3df8:	mov	r1, r3
    3dfc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3e00:	bl	9098 <eval_cursor>
    3e04:	mov	r3, r0
    3e08:	cmp	r3, #0
    3e0c:	beq	3e18 <eval_float+0xd84>
    3e10:	mvn	r3, #0
    3e14:	b	441c <eval_float+0x1388>
    3e18:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3e1c:	add	r3, r3, #8
    3e20:	sub	r2, fp, #244	; 0xf4
    3e24:	mov	r1, r2
    3e28:	mov	r0, r3
    3e2c:	bl	0 <coda_cursor_get_num_elements>
    3e30:	mov	r3, r0
    3e34:	cmp	r3, #0
    3e38:	beq	3e44 <eval_float+0xdb0>
    3e3c:	mvn	r3, #0
    3e40:	b	441c <eval_float+0x1388>
    3e44:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3e48:	mov	r2, #0
    3e4c:	mov	r3, #0
    3e50:	strd	r2, [r1]
    3e54:	ldr	r3, [fp, #-244]	; 0xffffff0c
    3e58:	cmp	r3, #0
    3e5c:	ble	3f28 <eval_float+0xe94>
    3e60:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3e64:	add	r3, r3, #8
    3e68:	mov	r0, r3
    3e6c:	bl	0 <coda_cursor_goto_first_array_element>
    3e70:	mov	r3, r0
    3e74:	cmp	r3, #0
    3e78:	beq	3e84 <eval_float+0xdf0>
    3e7c:	mvn	r3, #0
    3e80:	b	441c <eval_float+0x1388>
    3e84:	mov	r3, #0
    3e88:	str	r3, [fp, #-16]
    3e8c:	b	3f18 <eval_float+0xe84>
    3e90:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3e94:	ldr	r3, [r3, #20]
    3e98:	sub	r2, fp, #252	; 0xfc
    3e9c:	mov	r1, r3
    3ea0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3ea4:	bl	3094 <eval_float>
    3ea8:	mov	r3, r0
    3eac:	cmp	r3, #0
    3eb0:	beq	3ebc <eval_float+0xe28>
    3eb4:	mvn	r3, #0
    3eb8:	b	441c <eval_float+0x1388>
    3ebc:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3ec0:	vldr	d6, [r3]
    3ec4:	vldr	d7, [fp, #-252]	; 0xffffff04
    3ec8:	vadd.f64	d7, d6, d7
    3ecc:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3ed0:	vstr	d7, [r3]
    3ed4:	ldr	r3, [fp, #-244]	; 0xffffff0c
    3ed8:	sub	r2, r3, #1
    3edc:	ldr	r3, [fp, #-16]
    3ee0:	cmp	r2, r3
    3ee4:	ble	3f0c <eval_float+0xe78>
    3ee8:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3eec:	add	r3, r3, #8
    3ef0:	mov	r0, r3
    3ef4:	bl	0 <coda_cursor_goto_next_array_element>
    3ef8:	mov	r3, r0
    3efc:	cmp	r3, #0
    3f00:	beq	3f0c <eval_float+0xe78>
    3f04:	mvn	r3, #0
    3f08:	b	441c <eval_float+0x1388>
    3f0c:	ldr	r3, [fp, #-16]
    3f10:	add	r3, r3, #1
    3f14:	str	r3, [fp, #-16]
    3f18:	ldr	r3, [fp, #-244]	; 0xffffff0c
    3f1c:	ldr	r2, [fp, #-16]
    3f20:	cmp	r2, r3
    3f24:	blt	3e90 <eval_float+0xdfc>
    3f28:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3f2c:	add	r3, r3, #8
    3f30:	sub	r1, fp, #804	; 0x324
    3f34:	mov	r2, #520	; 0x208
    3f38:	mov	r0, r3
    3f3c:	bl	0 <memcpy>
    3f40:	b	4418 <eval_float+0x1384>
    3f44:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3f48:	ldr	r3, [r3]
    3f4c:	cmp	r3, #0
    3f50:	bne	3f68 <eval_float+0xed4>
    3f54:	ldr	r3, [pc, #-1344]	; 3a1c <eval_float+0x988>
    3f58:	ldr	r2, [pc, #-1364]	; 3a0c <eval_float+0x978>
    3f5c:	ldr	r1, [pc, #-1340]	; 3a28 <eval_float+0x994>
    3f60:	ldr	r0, [pc, #-1360]	; 3a18 <eval_float+0x984>
    3f64:	bl	0 <__assert_fail>
    3f68:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3f6c:	sub	r0, fp, #804	; 0x324
    3f70:	add	r3, r3, #8
    3f74:	mov	r2, #520	; 0x208
    3f78:	mov	r1, r3
    3f7c:	bl	0 <memcpy>
    3f80:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3f84:	ldr	r3, [r3, #16]
    3f88:	mov	r1, r3
    3f8c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3f90:	bl	9098 <eval_cursor>
    3f94:	mov	r3, r0
    3f98:	cmp	r3, #0
    3f9c:	beq	3fa8 <eval_float+0xf14>
    3fa0:	mvn	r3, #0
    3fa4:	b	441c <eval_float+0x1388>
    3fa8:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3fac:	add	r3, r3, #8
    3fb0:	sub	r2, fp, #256	; 0x100
    3fb4:	mov	r1, r2
    3fb8:	mov	r0, r3
    3fbc:	bl	0 <coda_cursor_get_num_elements>
    3fc0:	mov	r3, r0
    3fc4:	cmp	r3, #0
    3fc8:	beq	3fd4 <eval_float+0xf40>
    3fcc:	mvn	r3, #0
    3fd0:	b	441c <eval_float+0x1388>
    3fd4:	bl	0 <coda_NaN>
    3fd8:	vmov.f64	d7, d0
    3fdc:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3fe0:	vstr	d7, [r3]
    3fe4:	ldr	r3, [fp, #-256]	; 0xffffff00
    3fe8:	cmp	r3, #0
    3fec:	ble	40d4 <eval_float+0x1040>
    3ff0:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3ff4:	add	r3, r3, #8
    3ff8:	mov	r0, r3
    3ffc:	bl	0 <coda_cursor_goto_first_array_element>
    4000:	mov	r3, r0
    4004:	cmp	r3, #0
    4008:	beq	4014 <eval_float+0xf80>
    400c:	mvn	r3, #0
    4010:	b	441c <eval_float+0x1388>
    4014:	mov	r3, #0
    4018:	str	r3, [fp, #-20]	; 0xffffffec
    401c:	b	40c4 <eval_float+0x1030>
    4020:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4024:	ldr	r3, [r3, #20]
    4028:	sub	r2, fp, #268	; 0x10c
    402c:	mov	r1, r3
    4030:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    4034:	bl	3094 <eval_float>
    4038:	mov	r3, r0
    403c:	cmp	r3, #0
    4040:	beq	404c <eval_float+0xfb8>
    4044:	mvn	r3, #0
    4048:	b	441c <eval_float+0x1388>
    404c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4050:	cmp	r3, #0
    4054:	beq	4070 <eval_float+0xfdc>
    4058:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    405c:	vldr	d6, [r3]
    4060:	vldr	d7, [fp, #-268]	; 0xfffffef4
    4064:	vcmpe.f64	d6, d7
    4068:	vmrs	APSR_nzcv, fpscr
    406c:	bpl	4080 <eval_float+0xfec>
    4070:	sub	r3, fp, #268	; 0x10c
    4074:	ldrd	r2, [r3]
    4078:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    407c:	strd	r2, [r1]
    4080:	ldr	r3, [fp, #-256]	; 0xffffff00
    4084:	sub	r2, r3, #1
    4088:	ldr	r3, [fp, #-20]	; 0xffffffec
    408c:	cmp	r2, r3
    4090:	ble	40b8 <eval_float+0x1024>
    4094:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4098:	add	r3, r3, #8
    409c:	mov	r0, r3
    40a0:	bl	0 <coda_cursor_goto_next_array_element>
    40a4:	mov	r3, r0
    40a8:	cmp	r3, #0
    40ac:	beq	40b8 <eval_float+0x1024>
    40b0:	mvn	r3, #0
    40b4:	b	441c <eval_float+0x1388>
    40b8:	ldr	r3, [fp, #-20]	; 0xffffffec
    40bc:	add	r3, r3, #1
    40c0:	str	r3, [fp, #-20]	; 0xffffffec
    40c4:	ldr	r3, [fp, #-256]	; 0xffffff00
    40c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    40cc:	cmp	r2, r3
    40d0:	blt	4020 <eval_float+0xf8c>
    40d4:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    40d8:	add	r3, r3, #8
    40dc:	sub	r1, fp, #804	; 0x324
    40e0:	mov	r2, #520	; 0x208
    40e4:	mov	r0, r3
    40e8:	bl	0 <memcpy>
    40ec:	b	4418 <eval_float+0x1384>
    40f0:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    40f4:	ldr	r3, [r3]
    40f8:	cmp	r3, #0
    40fc:	bne	4114 <eval_float+0x1080>
    4100:	ldr	r3, [pc, #-1772]	; 3a1c <eval_float+0x988>
    4104:	ldr	r2, [pc, #-1788]	; 3a10 <eval_float+0x97c>
    4108:	ldr	r1, [pc, #-1768]	; 3a28 <eval_float+0x994>
    410c:	ldr	r0, [pc, #-1788]	; 3a18 <eval_float+0x984>
    4110:	bl	0 <__assert_fail>
    4114:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4118:	sub	r0, fp, #804	; 0x324
    411c:	add	r3, r3, #8
    4120:	mov	r2, #520	; 0x208
    4124:	mov	r1, r3
    4128:	bl	0 <memcpy>
    412c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4130:	ldr	r3, [r3, #16]
    4134:	mov	r1, r3
    4138:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    413c:	bl	9098 <eval_cursor>
    4140:	mov	r3, r0
    4144:	cmp	r3, #0
    4148:	beq	4154 <eval_float+0x10c0>
    414c:	mvn	r3, #0
    4150:	b	441c <eval_float+0x1388>
    4154:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4158:	add	r3, r3, #8
    415c:	sub	r2, fp, #272	; 0x110
    4160:	mov	r1, r2
    4164:	mov	r0, r3
    4168:	bl	0 <coda_cursor_get_num_elements>
    416c:	mov	r3, r0
    4170:	cmp	r3, #0
    4174:	beq	4180 <eval_float+0x10ec>
    4178:	mvn	r3, #0
    417c:	b	441c <eval_float+0x1388>
    4180:	bl	0 <coda_NaN>
    4184:	vmov.f64	d7, d0
    4188:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    418c:	vstr	d7, [r3]
    4190:	ldr	r3, [fp, #-272]	; 0xfffffef0
    4194:	cmp	r3, #0
    4198:	ble	4280 <eval_float+0x11ec>
    419c:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    41a0:	add	r3, r3, #8
    41a4:	mov	r0, r3
    41a8:	bl	0 <coda_cursor_goto_first_array_element>
    41ac:	mov	r3, r0
    41b0:	cmp	r3, #0
    41b4:	beq	41c0 <eval_float+0x112c>
    41b8:	mvn	r3, #0
    41bc:	b	441c <eval_float+0x1388>
    41c0:	mov	r3, #0
    41c4:	str	r3, [fp, #-24]	; 0xffffffe8
    41c8:	b	4270 <eval_float+0x11dc>
    41cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    41d0:	ldr	r3, [r3, #20]
    41d4:	sub	r2, fp, #284	; 0x11c
    41d8:	mov	r1, r3
    41dc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    41e0:	bl	3094 <eval_float>
    41e4:	mov	r3, r0
    41e8:	cmp	r3, #0
    41ec:	beq	41f8 <eval_float+0x1164>
    41f0:	mvn	r3, #0
    41f4:	b	441c <eval_float+0x1388>
    41f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    41fc:	cmp	r3, #0
    4200:	beq	421c <eval_float+0x1188>
    4204:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    4208:	vldr	d6, [r3]
    420c:	vldr	d7, [fp, #-284]	; 0xfffffee4
    4210:	vcmpe.f64	d6, d7
    4214:	vmrs	APSR_nzcv, fpscr
    4218:	ble	422c <eval_float+0x1198>
    421c:	sub	r3, fp, #284	; 0x11c
    4220:	ldrd	r2, [r3]
    4224:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    4228:	strd	r2, [r1]
    422c:	ldr	r3, [fp, #-272]	; 0xfffffef0
    4230:	sub	r2, r3, #1
    4234:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4238:	cmp	r2, r3
    423c:	ble	4264 <eval_float+0x11d0>
    4240:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4244:	add	r3, r3, #8
    4248:	mov	r0, r3
    424c:	bl	0 <coda_cursor_goto_next_array_element>
    4250:	mov	r3, r0
    4254:	cmp	r3, #0
    4258:	beq	4264 <eval_float+0x11d0>
    425c:	mvn	r3, #0
    4260:	b	441c <eval_float+0x1388>
    4264:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4268:	add	r3, r3, #1
    426c:	str	r3, [fp, #-24]	; 0xffffffe8
    4270:	ldr	r3, [fp, #-272]	; 0xfffffef0
    4274:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4278:	cmp	r2, r3
    427c:	blt	41cc <eval_float+0x1138>
    4280:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4284:	add	r3, r3, #8
    4288:	sub	r1, fp, #804	; 0x324
    428c:	mov	r2, #520	; 0x208
    4290:	mov	r0, r3
    4294:	bl	0 <memcpy>
    4298:	b	4418 <eval_float+0x1384>
    429c:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    42a0:	ldr	r3, [r3]
    42a4:	cmp	r3, #0
    42a8:	bne	42c0 <eval_float+0x122c>
    42ac:	ldr	r3, [pc, #-2200]	; 3a1c <eval_float+0x988>
    42b0:	ldr	r2, [pc, #-2212]	; 3a14 <eval_float+0x980>
    42b4:	ldr	r1, [pc, #-2196]	; 3a28 <eval_float+0x994>
    42b8:	ldr	r0, [pc, #-2216]	; 3a18 <eval_float+0x984>
    42bc:	bl	0 <__assert_fail>
    42c0:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    42c4:	sub	r0, fp, #804	; 0x324
    42c8:	add	r3, r3, #8
    42cc:	mov	r2, #520	; 0x208
    42d0:	mov	r1, r3
    42d4:	bl	0 <memcpy>
    42d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    42dc:	ldr	r3, [r3, #16]
    42e0:	mov	r1, r3
    42e4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    42e8:	bl	9098 <eval_cursor>
    42ec:	mov	r3, r0
    42f0:	cmp	r3, #0
    42f4:	beq	4300 <eval_float+0x126c>
    42f8:	mvn	r3, #0
    42fc:	b	441c <eval_float+0x1388>
    4300:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4304:	ldr	r3, [r3, #20]
    4308:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    430c:	mov	r1, r3
    4310:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    4314:	bl	3094 <eval_float>
    4318:	mov	r3, r0
    431c:	cmp	r3, #0
    4320:	beq	432c <eval_float+0x1298>
    4324:	mvn	r3, #0
    4328:	b	441c <eval_float+0x1388>
    432c:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4330:	add	r3, r3, #8
    4334:	sub	r1, fp, #804	; 0x324
    4338:	mov	r2, #520	; 0x208
    433c:	mov	r0, r3
    4340:	bl	0 <memcpy>
    4344:	b	4418 <eval_float+0x1384>
    4348:	ldr	r3, [fp, #-28]	; 0xffffffe4
    434c:	ldr	r3, [r3, #12]
    4350:	ldrb	r3, [r3]
    4354:	sub	r3, r3, #105	; 0x69
    4358:	str	r3, [fp, #-36]	; 0xffffffdc
    435c:	ldr	r2, [fp, #-808]	; 0xfffffcd8
    4360:	ldr	r3, [fp, #-36]	; 0xffffffdc
    4364:	add	r3, r3, #66	; 0x42
    4368:	lsl	r3, r3, #3
    436c:	add	r3, r2, r3
    4370:	ldrd	r2, [r3]
    4374:	strd	r2, [fp, #-44]	; 0xffffffd4
    4378:	ldr	r3, [fp, #-28]	; 0xffffffe4
    437c:	ldr	r1, [r3, #16]
    4380:	ldr	r3, [fp, #-36]	; 0xffffffdc
    4384:	add	r3, r3, #66	; 0x42
    4388:	lsl	r3, r3, #3
    438c:	ldr	r2, [fp, #-808]	; 0xfffffcd8
    4390:	add	r3, r2, r3
    4394:	mov	r2, r3
    4398:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    439c:	bl	442c <eval_integer>
    43a0:	mov	r3, r0
    43a4:	cmp	r3, #0
    43a8:	beq	43b4 <eval_float+0x1320>
    43ac:	mvn	r3, #0
    43b0:	b	441c <eval_float+0x1388>
    43b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    43b8:	ldr	r3, [r3, #20]
    43bc:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    43c0:	mov	r1, r3
    43c4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    43c8:	bl	3094 <eval_float>
    43cc:	mov	r3, r0
    43d0:	cmp	r3, #0
    43d4:	beq	43e0 <eval_float+0x134c>
    43d8:	mvn	r3, #0
    43dc:	b	441c <eval_float+0x1388>
    43e0:	ldr	r2, [fp, #-808]	; 0xfffffcd8
    43e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    43e8:	add	r3, r3, #66	; 0x42
    43ec:	lsl	r3, r3, #3
    43f0:	add	r1, r2, r3
    43f4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    43f8:	strd	r2, [r1]
    43fc:	b	4418 <eval_float+0x1384>
    4400:	ldr	r3, [pc, #-2540]	; 3a1c <eval_float+0x988>
    4404:	ldr	r2, [pc, #-2540]	; 3a20 <eval_float+0x98c>
    4408:	ldr	r1, [pc, #-2536]	; 3a28 <eval_float+0x994>
    440c:	ldr	r0, [pc, #-2544]	; 3a24 <eval_float+0x990>
    4410:	bl	0 <__assert_fail>
    4414:	nop			; (mov r0, r0)
    4418:	mov	r3, #0
    441c:	mov	r0, r3
    4420:	sub	sp, fp, #12
    4424:	vpop	{d8}
    4428:	pop	{fp, pc}

0000442c <eval_integer>:
    442c:	push	{r4, r5, fp, lr}
    4430:	add	fp, sp, #12
    4434:	sub	sp, sp, #944	; 0x3b0
    4438:	str	r0, [fp, #-936]	; 0xfffffc58
    443c:	str	r1, [fp, #-940]	; 0xfffffc54
    4440:	str	r2, [fp, #-944]	; 0xfffffc50
    4444:	ldr	r3, [fp, #-940]	; 0xfffffc54
    4448:	ldr	r3, [r3]
    444c:	cmp	r3, #20
    4450:	bne	446c <eval_integer+0x40>
    4454:	ldr	r3, [fp, #-940]	; 0xfffffc54
    4458:	ldrd	r2, [r3, #16]
    445c:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4460:	strd	r2, [r1]
    4464:	mov	r3, #0
    4468:	b	6654 <eval_integer+0x2228>
    446c:	ldr	r3, [fp, #-940]	; 0xfffffc54
    4470:	str	r3, [fp, #-40]	; 0xffffffd8
    4474:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4478:	ldr	r3, [r3]
    447c:	cmp	r3, #86	; 0x56
    4480:	ldrls	pc, [pc, r3, lsl #2]
    4484:	b	6630 <eval_integer+0x2204>
    4488:	.word	0x00004888
    448c:	.word	0x000048e0
    4490:	.word	0x00004b74
    4494:	.word	0x00004f88
    4498:	.word	0x00006630
    449c:	.word	0x00004dec
    44a0:	.word	0x00006630
    44a4:	.word	0x00005480
    44a8:	.word	0x00005120
    44ac:	.word	0x000052d0
    44b0:	.word	0x00006630
    44b4:	.word	0x000064cc
    44b8:	.word	0x00005f20
    44bc:	.word	0x00005d90
    44c0:	.word	0x00005fc8
    44c4:	.word	0x00005e58
    44c8:	.word	0x00006630
    44cc:	.word	0x00006630
    44d0:	.word	0x00006630
    44d4:	.word	0x00006630
    44d8:	.word	0x00006630
    44dc:	.word	0x00006630
    44e0:	.word	0x00006630
    44e4:	.word	0x00005a6c
    44e8:	.word	0x00004a4c
    44ec:	.word	0x00006630
    44f0:	.word	0x00006630
    44f4:	.word	0x00006070
    44f8:	.word	0x00006630
    44fc:	.word	0x00006630
    4500:	.word	0x00006630
    4504:	.word	0x00006630
    4508:	.word	0x00006630
    450c:	.word	0x00006630
    4510:	.word	0x00006630
    4514:	.word	0x00006630
    4518:	.word	0x00006630
    451c:	.word	0x00006630
    4520:	.word	0x00006630
    4524:	.word	0x00006630
    4528:	.word	0x00006630
    452c:	.word	0x00006630
    4530:	.word	0x00004d5c
    4534:	.word	0x0000612c
    4538:	.word	0x000061ec
    453c:	.word	0x000045e4
    4540:	.word	0x00006630
    4544:	.word	0x00006630
    4548:	.word	0x00006630
    454c:	.word	0x00006630
    4550:	.word	0x00005930
    4554:	.word	0x00006630
    4558:	.word	0x00006630
    455c:	.word	0x00006630
    4560:	.word	0x00006630
    4564:	.word	0x00006630
    4568:	.word	0x00004c5c
    456c:	.word	0x00004cdc
    4570:	.word	0x00004ae4
    4574:	.word	0x000049c8
    4578:	.word	0x00004840
    457c:	.word	0x00006630
    4580:	.word	0x00006630
    4584:	.word	0x00005be8
    4588:	.word	0x00005cd0
    458c:	.word	0x00004be8
    4590:	.word	0x00006630
    4594:	.word	0x00006630
    4598:	.word	0x00006630
    459c:	.word	0x00006630
    45a0:	.word	0x000060c0
    45a4:	.word	0x00006630
    45a8:	.word	0x00006630
    45ac:	.word	0x00006630
    45b0:	.word	0x00006630
    45b4:	.word	0x00006630
    45b8:	.word	0x00006630
    45bc:	.word	0x00006630
    45c0:	.word	0x00004954
    45c4:	.word	0x00006630
    45c8:	.word	0x00006630
    45cc:	.word	0x000056ec
    45d0:	.word	0x00006630
    45d4:	.word	0x0000621c
    45d8:	.word	0x00006630
    45dc:	.word	0x00006368
    45e0:	.word	0x00006578
    45e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    45e8:	ldr	r3, [r3, #16]
    45ec:	ldr	r3, [r3, #4]
    45f0:	cmp	r3, #4
    45f4:	bne	4744 <eval_integer+0x318>
    45f8:	ldr	r3, [fp, #-936]	; 0xfffffc58
    45fc:	ldr	r3, [r3]
    4600:	cmp	r3, #0
    4604:	bne	461c <eval_integer+0x1f0>
    4608:	ldr	r3, [pc, #3840]	; 5510 <eval_integer+0x10e4>
    460c:	mov	r2, #1936	; 0x790
    4610:	ldr	r1, [pc, #3836]	; 5514 <eval_integer+0x10e8>
    4614:	ldr	r0, [pc, #3836]	; 5518 <eval_integer+0x10ec>
    4618:	bl	0 <__assert_fail>
    461c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4620:	sub	r0, fp, #900	; 0x384
    4624:	add	r3, r3, #8
    4628:	mov	r2, #520	; 0x208
    462c:	mov	r1, r3
    4630:	bl	0 <memcpy>
    4634:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4638:	ldr	r3, [r3, #16]
    463c:	mov	r1, r3
    4640:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4644:	bl	9098 <eval_cursor>
    4648:	mov	r3, r0
    464c:	cmp	r3, #0
    4650:	beq	465c <eval_integer+0x230>
    4654:	mvn	r3, #0
    4658:	b	6654 <eval_integer+0x2228>
    465c:	bl	0 <coda_get_option_perform_conversions>
    4660:	str	r0, [fp, #-44]	; 0xffffffd4
    4664:	mov	r0, #0
    4668:	bl	0 <coda_set_option_perform_conversions>
    466c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4670:	add	r3, r3, #8
    4674:	sub	r2, fp, #72	; 0x48
    4678:	mov	r1, r2
    467c:	mov	r0, r3
    4680:	bl	0 <coda_cursor_get_read_type>
    4684:	mov	r3, r0
    4688:	cmp	r3, #0
    468c:	beq	46a0 <eval_integer+0x274>
    4690:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4694:	bl	0 <coda_set_option_perform_conversions>
    4698:	mvn	r3, #0
    469c:	b	6654 <eval_integer+0x2228>
    46a0:	ldr	r3, [fp, #-72]	; 0xffffffb8
    46a4:	cmp	r3, #7
    46a8:	bne	46f0 <eval_integer+0x2c4>
    46ac:	ldr	r3, [fp, #-936]	; 0xfffffc58
    46b0:	add	r3, r3, #8
    46b4:	sub	r2, fp, #84	; 0x54
    46b8:	mov	r1, r2
    46bc:	mov	r0, r3
    46c0:	bl	0 <coda_cursor_read_uint64>
    46c4:	mov	r3, r0
    46c8:	cmp	r3, #0
    46cc:	beq	46e0 <eval_integer+0x2b4>
    46d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    46d4:	bl	0 <coda_set_option_perform_conversions>
    46d8:	mvn	r3, #0
    46dc:	b	6654 <eval_integer+0x2228>
    46e0:	ldrd	r2, [fp, #-84]	; 0xffffffac
    46e4:	ldr	r1, [fp, #-944]	; 0xfffffc50
    46e8:	strd	r2, [r1]
    46ec:	b	4720 <eval_integer+0x2f4>
    46f0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    46f4:	add	r3, r3, #8
    46f8:	ldr	r1, [fp, #-944]	; 0xfffffc50
    46fc:	mov	r0, r3
    4700:	bl	0 <coda_cursor_read_int64>
    4704:	mov	r3, r0
    4708:	cmp	r3, #0
    470c:	beq	4720 <eval_integer+0x2f4>
    4710:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4714:	bl	0 <coda_set_option_perform_conversions>
    4718:	mvn	r3, #0
    471c:	b	6654 <eval_integer+0x2228>
    4720:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4724:	bl	0 <coda_set_option_perform_conversions>
    4728:	ldr	r3, [fp, #-936]	; 0xfffffc58
    472c:	add	r3, r3, #8
    4730:	sub	r1, fp, #900	; 0x384
    4734:	mov	r2, #520	; 0x208
    4738:	mov	r0, r3
    473c:	bl	0 <memcpy>
    4740:	b	6650 <eval_integer+0x2224>
    4744:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4748:	ldr	r3, [r3, #16]
    474c:	ldr	r3, [r3, #4]
    4750:	cmp	r3, #0
    4754:	bne	479c <eval_integer+0x370>
    4758:	ldr	r3, [fp, #-40]	; 0xffffffd8
    475c:	ldr	r3, [r3, #16]
    4760:	sub	r2, fp, #88	; 0x58
    4764:	mov	r1, r3
    4768:	ldr	r0, [fp, #-936]	; 0xfffffc58
    476c:	bl	12c8 <eval_boolean>
    4770:	mov	r3, r0
    4774:	cmp	r3, #0
    4778:	beq	4784 <eval_integer+0x358>
    477c:	mvn	r3, #0
    4780:	b	6654 <eval_integer+0x2228>
    4784:	ldr	r3, [fp, #-88]	; 0xffffffa8
    4788:	mov	r2, r3
    478c:	asr	r3, r2, #31
    4790:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4794:	strd	r2, [r1]
    4798:	b	6650 <eval_integer+0x2224>
    479c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    47a0:	ldr	r1, [r3, #16]
    47a4:	sub	r0, fp, #96	; 0x60
    47a8:	sub	r2, fp, #92	; 0x5c
    47ac:	sub	r3, fp, #100	; 0x64
    47b0:	str	r3, [sp]
    47b4:	mov	r3, r0
    47b8:	ldr	r0, [fp, #-936]	; 0xfffffc58
    47bc:	bl	6670 <eval_string>
    47c0:	mov	r3, r0
    47c4:	cmp	r3, #0
    47c8:	beq	47d4 <eval_integer+0x3a8>
    47cc:	mvn	r3, #0
    47d0:	b	6654 <eval_integer+0x2228>
    47d4:	ldr	r3, [fp, #-96]	; 0xffffffa0
    47d8:	cmp	r3, #0
    47dc:	bne	47f4 <eval_integer+0x3c8>
    47e0:	ldr	r1, [pc, #3380]	; 551c <eval_integer+0x10f0>
    47e4:	mvn	r0, #102	; 0x66
    47e8:	bl	0 <coda_set_error>
    47ec:	mvn	r3, #0
    47f0:	b	6654 <eval_integer+0x2228>
    47f4:	ldr	r3, [fp, #-100]	; 0xffffff9c
    47f8:	ldr	r2, [fp, #-92]	; 0xffffffa4
    47fc:	add	r0, r3, r2
    4800:	ldr	r1, [fp, #-96]	; 0xffffffa0
    4804:	mov	r3, #0
    4808:	ldr	r2, [fp, #-944]	; 0xfffffc50
    480c:	bl	0 <coda_ascii_parse_int64>
    4810:	mov	r3, r0
    4814:	cmp	r3, #0
    4818:	bge	4830 <eval_integer+0x404>
    481c:	ldr	r3, [fp, #-100]	; 0xffffff9c
    4820:	mov	r0, r3
    4824:	bl	0 <free>
    4828:	mvn	r3, #0
    482c:	b	6654 <eval_integer+0x2228>
    4830:	ldr	r3, [fp, #-100]	; 0xffffff9c
    4834:	mov	r0, r3
    4838:	bl	0 <free>
    483c:	b	6650 <eval_integer+0x2224>
    4840:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4844:	ldr	r3, [r3, #16]
    4848:	ldr	r2, [fp, #-944]	; 0xfffffc50
    484c:	mov	r1, r3
    4850:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4854:	bl	442c <eval_integer>
    4858:	mov	r3, r0
    485c:	cmp	r3, #0
    4860:	beq	486c <eval_integer+0x440>
    4864:	mvn	r3, #0
    4868:	b	6654 <eval_integer+0x2228>
    486c:	ldr	r3, [fp, #-944]	; 0xfffffc50
    4870:	ldrd	r2, [r3]
    4874:	rsbs	r2, r2, #0
    4878:	rsc	r3, r3, #0
    487c:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4880:	strd	r2, [r1]
    4884:	b	6650 <eval_integer+0x2224>
    4888:	ldr	r3, [fp, #-40]	; 0xffffffd8
    488c:	ldr	r3, [r3, #16]
    4890:	ldr	r2, [fp, #-944]	; 0xfffffc50
    4894:	mov	r1, r3
    4898:	ldr	r0, [fp, #-936]	; 0xfffffc58
    489c:	bl	442c <eval_integer>
    48a0:	mov	r3, r0
    48a4:	cmp	r3, #0
    48a8:	beq	48b4 <eval_integer+0x488>
    48ac:	mvn	r3, #0
    48b0:	b	6654 <eval_integer+0x2228>
    48b4:	ldr	r3, [fp, #-944]	; 0xfffffc50
    48b8:	ldrd	r2, [r3]
    48bc:	asr	r4, r3, #31
    48c0:	asr	r5, r3, #31
    48c4:	eor	r2, r2, r4
    48c8:	eor	r3, r3, r5
    48cc:	subs	r2, r2, r4
    48d0:	sbc	r3, r3, r5
    48d4:	ldr	r1, [fp, #-944]	; 0xfffffc50
    48d8:	strd	r2, [r1]
    48dc:	b	6650 <eval_integer+0x2224>
    48e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    48e4:	ldr	r3, [r3, #16]
    48e8:	sub	r2, fp, #108	; 0x6c
    48ec:	mov	r1, r3
    48f0:	ldr	r0, [fp, #-936]	; 0xfffffc58
    48f4:	bl	442c <eval_integer>
    48f8:	mov	r3, r0
    48fc:	cmp	r3, #0
    4900:	beq	490c <eval_integer+0x4e0>
    4904:	mvn	r3, #0
    4908:	b	6654 <eval_integer+0x2228>
    490c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4910:	ldr	r3, [r3, #20]
    4914:	sub	r2, fp, #116	; 0x74
    4918:	mov	r1, r3
    491c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4920:	bl	442c <eval_integer>
    4924:	mov	r3, r0
    4928:	cmp	r3, #0
    492c:	beq	4938 <eval_integer+0x50c>
    4930:	mvn	r3, #0
    4934:	b	6654 <eval_integer+0x2228>
    4938:	ldrd	r0, [fp, #-108]	; 0xffffff94
    493c:	ldrd	r2, [fp, #-116]	; 0xffffff8c
    4940:	adds	r2, r2, r0
    4944:	adc	r3, r3, r1
    4948:	ldr	r1, [fp, #-944]	; 0xfffffc50
    494c:	strd	r2, [r1]
    4950:	b	6650 <eval_integer+0x2224>
    4954:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4958:	ldr	r3, [r3, #16]
    495c:	sub	r2, fp, #124	; 0x7c
    4960:	mov	r1, r3
    4964:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4968:	bl	442c <eval_integer>
    496c:	mov	r3, r0
    4970:	cmp	r3, #0
    4974:	beq	4980 <eval_integer+0x554>
    4978:	mvn	r3, #0
    497c:	b	6654 <eval_integer+0x2228>
    4980:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4984:	ldr	r3, [r3, #20]
    4988:	sub	r2, fp, #132	; 0x84
    498c:	mov	r1, r3
    4990:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4994:	bl	442c <eval_integer>
    4998:	mov	r3, r0
    499c:	cmp	r3, #0
    49a0:	beq	49ac <eval_integer+0x580>
    49a4:	mvn	r3, #0
    49a8:	b	6654 <eval_integer+0x2228>
    49ac:	ldrd	r0, [fp, #-124]	; 0xffffff84
    49b0:	ldrd	r2, [fp, #-132]	; 0xffffff7c
    49b4:	subs	r2, r0, r2
    49b8:	sbc	r3, r1, r3
    49bc:	ldr	r1, [fp, #-944]	; 0xfffffc50
    49c0:	strd	r2, [r1]
    49c4:	b	6650 <eval_integer+0x2224>
    49c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    49cc:	ldr	r3, [r3, #16]
    49d0:	sub	r2, fp, #140	; 0x8c
    49d4:	mov	r1, r3
    49d8:	ldr	r0, [fp, #-936]	; 0xfffffc58
    49dc:	bl	442c <eval_integer>
    49e0:	mov	r3, r0
    49e4:	cmp	r3, #0
    49e8:	beq	49f4 <eval_integer+0x5c8>
    49ec:	mvn	r3, #0
    49f0:	b	6654 <eval_integer+0x2228>
    49f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    49f8:	ldr	r3, [r3, #20]
    49fc:	sub	r2, fp, #148	; 0x94
    4a00:	mov	r1, r3
    4a04:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4a08:	bl	442c <eval_integer>
    4a0c:	mov	r3, r0
    4a10:	cmp	r3, #0
    4a14:	beq	4a20 <eval_integer+0x5f4>
    4a18:	mvn	r3, #0
    4a1c:	b	6654 <eval_integer+0x2228>
    4a20:	ldrd	r0, [fp, #-140]	; 0xffffff74
    4a24:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    4a28:	mul	lr, r2, r1
    4a2c:	mul	ip, r0, r3
    4a30:	add	ip, lr, ip
    4a34:	umull	r2, r3, r0, r2
    4a38:	add	r1, ip, r3
    4a3c:	mov	r3, r1
    4a40:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4a44:	strd	r2, [r1]
    4a48:	b	6650 <eval_integer+0x2224>
    4a4c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4a50:	ldr	r3, [r3, #16]
    4a54:	sub	r2, fp, #156	; 0x9c
    4a58:	mov	r1, r3
    4a5c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4a60:	bl	442c <eval_integer>
    4a64:	mov	r3, r0
    4a68:	cmp	r3, #0
    4a6c:	beq	4a78 <eval_integer+0x64c>
    4a70:	mvn	r3, #0
    4a74:	b	6654 <eval_integer+0x2228>
    4a78:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4a7c:	ldr	r3, [r3, #20]
    4a80:	sub	r2, fp, #164	; 0xa4
    4a84:	mov	r1, r3
    4a88:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4a8c:	bl	442c <eval_integer>
    4a90:	mov	r3, r0
    4a94:	cmp	r3, #0
    4a98:	beq	4aa4 <eval_integer+0x678>
    4a9c:	mvn	r3, #0
    4aa0:	b	6654 <eval_integer+0x2228>
    4aa4:	ldrd	r2, [fp, #-164]	; 0xffffff5c
    4aa8:	orrs	r3, r2, r3
    4aac:	bne	4ac4 <eval_integer+0x698>
    4ab0:	ldr	r1, [pc, #2664]	; 5520 <eval_integer+0x10f4>
    4ab4:	mvn	r0, #400	; 0x190
    4ab8:	bl	0 <coda_set_error>
    4abc:	mvn	r3, #0
    4ac0:	b	6654 <eval_integer+0x2228>
    4ac4:	ldrd	r0, [fp, #-156]	; 0xffffff64
    4ac8:	ldrd	r2, [fp, #-164]	; 0xffffff5c
    4acc:	bl	0 <__aeabi_ldivmod>
    4ad0:	mov	r2, r0
    4ad4:	mov	r3, r1
    4ad8:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4adc:	strd	r2, [r1]
    4ae0:	b	6650 <eval_integer+0x2224>
    4ae4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ae8:	ldr	r3, [r3, #16]
    4aec:	sub	r2, fp, #172	; 0xac
    4af0:	mov	r1, r3
    4af4:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4af8:	bl	442c <eval_integer>
    4afc:	mov	r3, r0
    4b00:	cmp	r3, #0
    4b04:	beq	4b10 <eval_integer+0x6e4>
    4b08:	mvn	r3, #0
    4b0c:	b	6654 <eval_integer+0x2228>
    4b10:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4b14:	ldr	r3, [r3, #20]
    4b18:	sub	r2, fp, #180	; 0xb4
    4b1c:	mov	r1, r3
    4b20:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4b24:	bl	442c <eval_integer>
    4b28:	mov	r3, r0
    4b2c:	cmp	r3, #0
    4b30:	beq	4b3c <eval_integer+0x710>
    4b34:	mvn	r3, #0
    4b38:	b	6654 <eval_integer+0x2228>
    4b3c:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    4b40:	orrs	r3, r2, r3
    4b44:	bne	4b5c <eval_integer+0x730>
    4b48:	ldr	r1, [pc, #2516]	; 5524 <eval_integer+0x10f8>
    4b4c:	mvn	r0, #400	; 0x190
    4b50:	bl	0 <coda_set_error>
    4b54:	mvn	r3, #0
    4b58:	b	6654 <eval_integer+0x2228>
    4b5c:	ldrd	r0, [fp, #-172]	; 0xffffff54
    4b60:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    4b64:	bl	0 <__aeabi_ldivmod>
    4b68:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4b6c:	strd	r2, [r1]
    4b70:	b	6650 <eval_integer+0x2224>
    4b74:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4b78:	ldr	r3, [r3, #16]
    4b7c:	sub	r2, fp, #188	; 0xbc
    4b80:	mov	r1, r3
    4b84:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4b88:	bl	442c <eval_integer>
    4b8c:	mov	r3, r0
    4b90:	cmp	r3, #0
    4b94:	beq	4ba0 <eval_integer+0x774>
    4b98:	mvn	r3, #0
    4b9c:	b	6654 <eval_integer+0x2228>
    4ba0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ba4:	ldr	r3, [r3, #20]
    4ba8:	sub	r2, fp, #196	; 0xc4
    4bac:	mov	r1, r3
    4bb0:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4bb4:	bl	442c <eval_integer>
    4bb8:	mov	r3, r0
    4bbc:	cmp	r3, #0
    4bc0:	beq	4bcc <eval_integer+0x7a0>
    4bc4:	mvn	r3, #0
    4bc8:	b	6654 <eval_integer+0x2228>
    4bcc:	ldrd	r0, [fp, #-188]	; 0xffffff44
    4bd0:	ldrd	r2, [fp, #-196]	; 0xffffff3c
    4bd4:	and	r2, r2, r0
    4bd8:	and	r3, r3, r1
    4bdc:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4be0:	strd	r2, [r1]
    4be4:	b	6650 <eval_integer+0x2224>
    4be8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4bec:	ldr	r3, [r3, #16]
    4bf0:	sub	r2, fp, #204	; 0xcc
    4bf4:	mov	r1, r3
    4bf8:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4bfc:	bl	442c <eval_integer>
    4c00:	mov	r3, r0
    4c04:	cmp	r3, #0
    4c08:	beq	4c14 <eval_integer+0x7e8>
    4c0c:	mvn	r3, #0
    4c10:	b	6654 <eval_integer+0x2228>
    4c14:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4c18:	ldr	r3, [r3, #20]
    4c1c:	sub	r2, fp, #212	; 0xd4
    4c20:	mov	r1, r3
    4c24:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4c28:	bl	442c <eval_integer>
    4c2c:	mov	r3, r0
    4c30:	cmp	r3, #0
    4c34:	beq	4c40 <eval_integer+0x814>
    4c38:	mvn	r3, #0
    4c3c:	b	6654 <eval_integer+0x2228>
    4c40:	ldrd	r0, [fp, #-204]	; 0xffffff34
    4c44:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    4c48:	orr	r2, r2, r0
    4c4c:	orr	r3, r3, r1
    4c50:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4c54:	strd	r2, [r1]
    4c58:	b	6650 <eval_integer+0x2224>
    4c5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4c60:	ldr	r3, [r3, #16]
    4c64:	sub	r2, fp, #220	; 0xdc
    4c68:	mov	r1, r3
    4c6c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4c70:	bl	442c <eval_integer>
    4c74:	mov	r3, r0
    4c78:	cmp	r3, #0
    4c7c:	beq	4c88 <eval_integer+0x85c>
    4c80:	mvn	r3, #0
    4c84:	b	6654 <eval_integer+0x2228>
    4c88:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4c8c:	ldr	r3, [r3, #20]
    4c90:	sub	r2, fp, #228	; 0xe4
    4c94:	mov	r1, r3
    4c98:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4c9c:	bl	442c <eval_integer>
    4ca0:	mov	r3, r0
    4ca4:	cmp	r3, #0
    4ca8:	beq	4cb4 <eval_integer+0x888>
    4cac:	mvn	r3, #0
    4cb0:	b	6654 <eval_integer+0x2228>
    4cb4:	ldrd	r2, [fp, #-228]	; 0xffffff1c
    4cb8:	ldrd	r0, [fp, #-220]	; 0xffffff24
    4cbc:	cmp	r2, r0
    4cc0:	sbcs	ip, r3, r1
    4cc4:	bge	4cd0 <eval_integer+0x8a4>
    4cc8:	mov	r2, r0
    4ccc:	mov	r3, r1
    4cd0:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4cd4:	strd	r2, [r1]
    4cd8:	b	6650 <eval_integer+0x2224>
    4cdc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ce0:	ldr	r3, [r3, #16]
    4ce4:	sub	r2, fp, #236	; 0xec
    4ce8:	mov	r1, r3
    4cec:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4cf0:	bl	442c <eval_integer>
    4cf4:	mov	r3, r0
    4cf8:	cmp	r3, #0
    4cfc:	beq	4d08 <eval_integer+0x8dc>
    4d00:	mvn	r3, #0
    4d04:	b	6654 <eval_integer+0x2228>
    4d08:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4d0c:	ldr	r3, [r3, #20]
    4d10:	sub	r2, fp, #244	; 0xf4
    4d14:	mov	r1, r3
    4d18:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4d1c:	bl	442c <eval_integer>
    4d20:	mov	r3, r0
    4d24:	cmp	r3, #0
    4d28:	beq	4d34 <eval_integer+0x908>
    4d2c:	mvn	r3, #0
    4d30:	b	6654 <eval_integer+0x2228>
    4d34:	ldrd	r2, [fp, #-244]	; 0xffffff0c
    4d38:	ldrd	r0, [fp, #-236]	; 0xffffff14
    4d3c:	cmp	r0, r2
    4d40:	sbcs	ip, r1, r3
    4d44:	bge	4d50 <eval_integer+0x924>
    4d48:	mov	r2, r0
    4d4c:	mov	r3, r1
    4d50:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4d54:	strd	r2, [r1]
    4d58:	b	6650 <eval_integer+0x2224>
    4d5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4d60:	ldr	r3, [r3, #16]
    4d64:	sub	r2, fp, #248	; 0xf8
    4d68:	mov	r1, r3
    4d6c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4d70:	bl	12c8 <eval_boolean>
    4d74:	mov	r3, r0
    4d78:	cmp	r3, #0
    4d7c:	beq	4d88 <eval_integer+0x95c>
    4d80:	mvn	r3, #0
    4d84:	b	6654 <eval_integer+0x2228>
    4d88:	ldr	r3, [fp, #-248]	; 0xffffff08
    4d8c:	cmp	r3, #0
    4d90:	beq	4dc0 <eval_integer+0x994>
    4d94:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4d98:	ldr	r3, [r3, #20]
    4d9c:	ldr	r2, [fp, #-944]	; 0xfffffc50
    4da0:	mov	r1, r3
    4da4:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4da8:	bl	442c <eval_integer>
    4dac:	mov	r3, r0
    4db0:	cmp	r3, #0
    4db4:	beq	6644 <eval_integer+0x2218>
    4db8:	mvn	r3, #0
    4dbc:	b	6654 <eval_integer+0x2228>
    4dc0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4dc4:	ldr	r3, [r3, #24]
    4dc8:	ldr	r2, [fp, #-944]	; 0xfffffc50
    4dcc:	mov	r1, r3
    4dd0:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4dd4:	bl	442c <eval_integer>
    4dd8:	mov	r3, r0
    4ddc:	cmp	r3, #0
    4de0:	beq	6644 <eval_integer+0x2218>
    4de4:	mvn	r3, #0
    4de8:	b	6654 <eval_integer+0x2228>
    4dec:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4df0:	ldr	r3, [r3]
    4df4:	cmp	r3, #0
    4df8:	bne	4e10 <eval_integer+0x9e4>
    4dfc:	ldr	r3, [pc, #1804]	; 5510 <eval_integer+0x10e4>
    4e00:	ldr	r2, [pc, #1824]	; 5528 <eval_integer+0x10fc>
    4e04:	ldr	r1, [pc, #1800]	; 5514 <eval_integer+0x10e8>
    4e08:	ldr	r0, [pc, #1800]	; 5518 <eval_integer+0x10ec>
    4e0c:	bl	0 <__assert_fail>
    4e10:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4e14:	sub	r0, fp, #900	; 0x384
    4e18:	add	r3, r3, #8
    4e1c:	mov	r2, #520	; 0x208
    4e20:	mov	r1, r3
    4e24:	bl	0 <memcpy>
    4e28:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4e2c:	ldr	r3, [r3, #16]
    4e30:	mov	r1, r3
    4e34:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4e38:	bl	9098 <eval_cursor>
    4e3c:	mov	r3, r0
    4e40:	cmp	r3, #0
    4e44:	beq	4e50 <eval_integer+0xa24>
    4e48:	mvn	r3, #0
    4e4c:	b	6654 <eval_integer+0x2228>
    4e50:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4e54:	add	r3, r3, #8
    4e58:	sub	r2, fp, #252	; 0xfc
    4e5c:	mov	r1, r2
    4e60:	mov	r0, r3
    4e64:	bl	0 <coda_cursor_get_num_elements>
    4e68:	mov	r3, r0
    4e6c:	cmp	r3, #0
    4e70:	beq	4e7c <eval_integer+0xa50>
    4e74:	mvn	r3, #0
    4e78:	b	6654 <eval_integer+0x2228>
    4e7c:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4e80:	mov	r2, #0
    4e84:	mov	r3, #0
    4e88:	strd	r2, [r1]
    4e8c:	ldr	r3, [fp, #-252]	; 0xffffff04
    4e90:	cmp	r3, #0
    4e94:	ble	4f6c <eval_integer+0xb40>
    4e98:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4e9c:	add	r3, r3, #8
    4ea0:	mov	r0, r3
    4ea4:	bl	0 <coda_cursor_goto_first_array_element>
    4ea8:	mov	r3, r0
    4eac:	cmp	r3, #0
    4eb0:	beq	4ebc <eval_integer+0xa90>
    4eb4:	mvn	r3, #0
    4eb8:	b	6654 <eval_integer+0x2228>
    4ebc:	mov	r3, #0
    4ec0:	str	r3, [fp, #-16]
    4ec4:	b	4f5c <eval_integer+0xb30>
    4ec8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ecc:	ldr	r3, [r3, #20]
    4ed0:	sub	r2, fp, #256	; 0x100
    4ed4:	mov	r1, r3
    4ed8:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4edc:	bl	12c8 <eval_boolean>
    4ee0:	mov	r3, r0
    4ee4:	cmp	r3, #0
    4ee8:	beq	4ef4 <eval_integer+0xac8>
    4eec:	mvn	r3, #0
    4ef0:	b	6654 <eval_integer+0x2228>
    4ef4:	ldr	r3, [fp, #-256]	; 0xffffff00
    4ef8:	cmp	r3, #0
    4efc:	beq	4f18 <eval_integer+0xaec>
    4f00:	ldr	r3, [fp, #-944]	; 0xfffffc50
    4f04:	ldrd	r2, [r3]
    4f08:	adds	r2, r2, #1
    4f0c:	adc	r3, r3, #0
    4f10:	ldr	r1, [fp, #-944]	; 0xfffffc50
    4f14:	strd	r2, [r1]
    4f18:	ldr	r3, [fp, #-252]	; 0xffffff04
    4f1c:	sub	r2, r3, #1
    4f20:	ldr	r3, [fp, #-16]
    4f24:	cmp	r2, r3
    4f28:	ble	4f50 <eval_integer+0xb24>
    4f2c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4f30:	add	r3, r3, #8
    4f34:	mov	r0, r3
    4f38:	bl	0 <coda_cursor_goto_next_array_element>
    4f3c:	mov	r3, r0
    4f40:	cmp	r3, #0
    4f44:	beq	4f50 <eval_integer+0xb24>
    4f48:	mvn	r3, #0
    4f4c:	b	6654 <eval_integer+0x2228>
    4f50:	ldr	r3, [fp, #-16]
    4f54:	add	r3, r3, #1
    4f58:	str	r3, [fp, #-16]
    4f5c:	ldr	r3, [fp, #-252]	; 0xffffff04
    4f60:	ldr	r2, [fp, #-16]
    4f64:	cmp	r2, r3
    4f68:	blt	4ec8 <eval_integer+0xa9c>
    4f6c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4f70:	add	r3, r3, #8
    4f74:	sub	r1, fp, #900	; 0x384
    4f78:	mov	r2, #520	; 0x208
    4f7c:	mov	r0, r3
    4f80:	bl	0 <memcpy>
    4f84:	b	6650 <eval_integer+0x2224>
    4f88:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4f8c:	ldr	r3, [r3]
    4f90:	cmp	r3, #0
    4f94:	bne	4fac <eval_integer+0xb80>
    4f98:	ldr	r3, [pc, #1392]	; 5510 <eval_integer+0x10e4>
    4f9c:	ldr	r2, [pc, #1416]	; 552c <eval_integer+0x1100>
    4fa0:	ldr	r1, [pc, #1388]	; 5514 <eval_integer+0x10e8>
    4fa4:	ldr	r0, [pc, #1388]	; 5518 <eval_integer+0x10ec>
    4fa8:	bl	0 <__assert_fail>
    4fac:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4fb0:	sub	r0, fp, #900	; 0x384
    4fb4:	add	r3, r3, #8
    4fb8:	mov	r2, #520	; 0x208
    4fbc:	mov	r1, r3
    4fc0:	bl	0 <memcpy>
    4fc4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4fc8:	ldr	r3, [r3, #16]
    4fcc:	mov	r1, r3
    4fd0:	ldr	r0, [fp, #-936]	; 0xfffffc58
    4fd4:	bl	9098 <eval_cursor>
    4fd8:	mov	r3, r0
    4fdc:	cmp	r3, #0
    4fe0:	beq	4fec <eval_integer+0xbc0>
    4fe4:	mvn	r3, #0
    4fe8:	b	6654 <eval_integer+0x2228>
    4fec:	ldr	r3, [fp, #-936]	; 0xfffffc58
    4ff0:	add	r3, r3, #8
    4ff4:	sub	r2, fp, #260	; 0x104
    4ff8:	mov	r1, r2
    4ffc:	mov	r0, r3
    5000:	bl	0 <coda_cursor_get_num_elements>
    5004:	mov	r3, r0
    5008:	cmp	r3, #0
    500c:	beq	5018 <eval_integer+0xbec>
    5010:	mvn	r3, #0
    5014:	b	6654 <eval_integer+0x2228>
    5018:	ldr	r1, [fp, #-944]	; 0xfffffc50
    501c:	mov	r2, #0
    5020:	mov	r3, #0
    5024:	strd	r2, [r1]
    5028:	ldr	r3, [fp, #-260]	; 0xfffffefc
    502c:	cmp	r3, #0
    5030:	ble	5104 <eval_integer+0xcd8>
    5034:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5038:	add	r3, r3, #8
    503c:	mov	r0, r3
    5040:	bl	0 <coda_cursor_goto_first_array_element>
    5044:	mov	r3, r0
    5048:	cmp	r3, #0
    504c:	beq	5058 <eval_integer+0xc2c>
    5050:	mvn	r3, #0
    5054:	b	6654 <eval_integer+0x2228>
    5058:	mov	r3, #0
    505c:	str	r3, [fp, #-20]	; 0xffffffec
    5060:	b	50f4 <eval_integer+0xcc8>
    5064:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5068:	ldr	r3, [r3, #20]
    506c:	sub	r2, fp, #268	; 0x10c
    5070:	mov	r1, r3
    5074:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5078:	bl	442c <eval_integer>
    507c:	mov	r3, r0
    5080:	cmp	r3, #0
    5084:	beq	5090 <eval_integer+0xc64>
    5088:	mvn	r3, #0
    508c:	b	6654 <eval_integer+0x2228>
    5090:	ldr	r3, [fp, #-944]	; 0xfffffc50
    5094:	ldrd	r0, [r3]
    5098:	sub	r3, fp, #268	; 0x10c
    509c:	ldrd	r2, [r3]
    50a0:	adds	r2, r2, r0
    50a4:	adc	r3, r3, r1
    50a8:	ldr	r1, [fp, #-944]	; 0xfffffc50
    50ac:	strd	r2, [r1]
    50b0:	ldr	r3, [fp, #-260]	; 0xfffffefc
    50b4:	sub	r2, r3, #1
    50b8:	ldr	r3, [fp, #-20]	; 0xffffffec
    50bc:	cmp	r2, r3
    50c0:	ble	50e8 <eval_integer+0xcbc>
    50c4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    50c8:	add	r3, r3, #8
    50cc:	mov	r0, r3
    50d0:	bl	0 <coda_cursor_goto_next_array_element>
    50d4:	mov	r3, r0
    50d8:	cmp	r3, #0
    50dc:	beq	50e8 <eval_integer+0xcbc>
    50e0:	mvn	r3, #0
    50e4:	b	6654 <eval_integer+0x2228>
    50e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    50ec:	add	r3, r3, #1
    50f0:	str	r3, [fp, #-20]	; 0xffffffec
    50f4:	ldr	r3, [fp, #-260]	; 0xfffffefc
    50f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    50fc:	cmp	r2, r3
    5100:	blt	5064 <eval_integer+0xc38>
    5104:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5108:	add	r3, r3, #8
    510c:	sub	r1, fp, #900	; 0x384
    5110:	mov	r2, #520	; 0x208
    5114:	mov	r0, r3
    5118:	bl	0 <memcpy>
    511c:	b	6650 <eval_integer+0x2224>
    5120:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5124:	ldr	r3, [r3]
    5128:	cmp	r3, #0
    512c:	bne	5144 <eval_integer+0xd18>
    5130:	ldr	r3, [pc, #984]	; 5510 <eval_integer+0x10e4>
    5134:	ldr	r2, [pc, #1012]	; 5530 <eval_integer+0x1104>
    5138:	ldr	r1, [pc, #980]	; 5514 <eval_integer+0x10e8>
    513c:	ldr	r0, [pc, #980]	; 5518 <eval_integer+0x10ec>
    5140:	bl	0 <__assert_fail>
    5144:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5148:	sub	r0, fp, #900	; 0x384
    514c:	add	r3, r3, #8
    5150:	mov	r2, #520	; 0x208
    5154:	mov	r1, r3
    5158:	bl	0 <memcpy>
    515c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5160:	ldr	r3, [r3, #16]
    5164:	mov	r1, r3
    5168:	ldr	r0, [fp, #-936]	; 0xfffffc58
    516c:	bl	9098 <eval_cursor>
    5170:	mov	r3, r0
    5174:	cmp	r3, #0
    5178:	beq	5184 <eval_integer+0xd58>
    517c:	mvn	r3, #0
    5180:	b	6654 <eval_integer+0x2228>
    5184:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5188:	add	r3, r3, #8
    518c:	sub	r2, fp, #272	; 0x110
    5190:	mov	r1, r2
    5194:	mov	r0, r3
    5198:	bl	0 <coda_cursor_get_num_elements>
    519c:	mov	r3, r0
    51a0:	cmp	r3, #0
    51a4:	beq	51b0 <eval_integer+0xd84>
    51a8:	mvn	r3, #0
    51ac:	b	6654 <eval_integer+0x2228>
    51b0:	ldr	r1, [fp, #-944]	; 0xfffffc50
    51b4:	mov	r2, #0
    51b8:	mov	r3, #0
    51bc:	strd	r2, [r1]
    51c0:	ldr	r3, [fp, #-272]	; 0xfffffef0
    51c4:	cmp	r3, #0
    51c8:	ble	52b4 <eval_integer+0xe88>
    51cc:	ldr	r3, [fp, #-936]	; 0xfffffc58
    51d0:	add	r3, r3, #8
    51d4:	mov	r0, r3
    51d8:	bl	0 <coda_cursor_goto_first_array_element>
    51dc:	mov	r3, r0
    51e0:	cmp	r3, #0
    51e4:	beq	51f0 <eval_integer+0xdc4>
    51e8:	mvn	r3, #0
    51ec:	b	6654 <eval_integer+0x2228>
    51f0:	mov	r3, #0
    51f4:	str	r3, [fp, #-24]	; 0xffffffe8
    51f8:	b	52a4 <eval_integer+0xe78>
    51fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5200:	ldr	r3, [r3, #20]
    5204:	sub	r2, fp, #284	; 0x11c
    5208:	mov	r1, r3
    520c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5210:	bl	442c <eval_integer>
    5214:	mov	r3, r0
    5218:	cmp	r3, #0
    521c:	beq	5228 <eval_integer+0xdfc>
    5220:	mvn	r3, #0
    5224:	b	6654 <eval_integer+0x2228>
    5228:	ldr	r3, [fp, #-24]	; 0xffffffe8
    522c:	cmp	r3, #0
    5230:	beq	5250 <eval_integer+0xe24>
    5234:	ldr	r3, [fp, #-944]	; 0xfffffc50
    5238:	ldrd	r0, [r3]
    523c:	sub	r3, fp, #284	; 0x11c
    5240:	ldrd	r2, [r3]
    5244:	cmp	r0, r2
    5248:	sbcs	r3, r1, r3
    524c:	bge	5260 <eval_integer+0xe34>
    5250:	sub	r3, fp, #284	; 0x11c
    5254:	ldrd	r2, [r3]
    5258:	ldr	r1, [fp, #-944]	; 0xfffffc50
    525c:	strd	r2, [r1]
    5260:	ldr	r3, [fp, #-272]	; 0xfffffef0
    5264:	sub	r2, r3, #1
    5268:	ldr	r3, [fp, #-24]	; 0xffffffe8
    526c:	cmp	r2, r3
    5270:	ble	5298 <eval_integer+0xe6c>
    5274:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5278:	add	r3, r3, #8
    527c:	mov	r0, r3
    5280:	bl	0 <coda_cursor_goto_next_array_element>
    5284:	mov	r3, r0
    5288:	cmp	r3, #0
    528c:	beq	5298 <eval_integer+0xe6c>
    5290:	mvn	r3, #0
    5294:	b	6654 <eval_integer+0x2228>
    5298:	ldr	r3, [fp, #-24]	; 0xffffffe8
    529c:	add	r3, r3, #1
    52a0:	str	r3, [fp, #-24]	; 0xffffffe8
    52a4:	ldr	r3, [fp, #-272]	; 0xfffffef0
    52a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    52ac:	cmp	r2, r3
    52b0:	blt	51fc <eval_integer+0xdd0>
    52b4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    52b8:	add	r3, r3, #8
    52bc:	sub	r1, fp, #900	; 0x384
    52c0:	mov	r2, #520	; 0x208
    52c4:	mov	r0, r3
    52c8:	bl	0 <memcpy>
    52cc:	b	6650 <eval_integer+0x2224>
    52d0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    52d4:	ldr	r3, [r3]
    52d8:	cmp	r3, #0
    52dc:	bne	52f4 <eval_integer+0xec8>
    52e0:	ldr	r3, [pc, #552]	; 5510 <eval_integer+0x10e4>
    52e4:	ldr	r2, [pc, #584]	; 5534 <eval_integer+0x1108>
    52e8:	ldr	r1, [pc, #548]	; 5514 <eval_integer+0x10e8>
    52ec:	ldr	r0, [pc, #548]	; 5518 <eval_integer+0x10ec>
    52f0:	bl	0 <__assert_fail>
    52f4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    52f8:	sub	r0, fp, #900	; 0x384
    52fc:	add	r3, r3, #8
    5300:	mov	r2, #520	; 0x208
    5304:	mov	r1, r3
    5308:	bl	0 <memcpy>
    530c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5310:	ldr	r3, [r3, #16]
    5314:	mov	r1, r3
    5318:	ldr	r0, [fp, #-936]	; 0xfffffc58
    531c:	bl	9098 <eval_cursor>
    5320:	mov	r3, r0
    5324:	cmp	r3, #0
    5328:	beq	5334 <eval_integer+0xf08>
    532c:	mvn	r3, #0
    5330:	b	6654 <eval_integer+0x2228>
    5334:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5338:	add	r3, r3, #8
    533c:	sub	r2, fp, #288	; 0x120
    5340:	mov	r1, r2
    5344:	mov	r0, r3
    5348:	bl	0 <coda_cursor_get_num_elements>
    534c:	mov	r3, r0
    5350:	cmp	r3, #0
    5354:	beq	5360 <eval_integer+0xf34>
    5358:	mvn	r3, #0
    535c:	b	6654 <eval_integer+0x2228>
    5360:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5364:	mov	r2, #0
    5368:	mov	r3, #0
    536c:	strd	r2, [r1]
    5370:	ldr	r3, [fp, #-288]	; 0xfffffee0
    5374:	cmp	r3, #0
    5378:	ble	5464 <eval_integer+0x1038>
    537c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5380:	add	r3, r3, #8
    5384:	mov	r0, r3
    5388:	bl	0 <coda_cursor_goto_first_array_element>
    538c:	mov	r3, r0
    5390:	cmp	r3, #0
    5394:	beq	53a0 <eval_integer+0xf74>
    5398:	mvn	r3, #0
    539c:	b	6654 <eval_integer+0x2228>
    53a0:	mov	r3, #0
    53a4:	str	r3, [fp, #-28]	; 0xffffffe4
    53a8:	b	5454 <eval_integer+0x1028>
    53ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
    53b0:	ldr	r3, [r3, #20]
    53b4:	sub	r2, fp, #300	; 0x12c
    53b8:	mov	r1, r3
    53bc:	ldr	r0, [fp, #-936]	; 0xfffffc58
    53c0:	bl	442c <eval_integer>
    53c4:	mov	r3, r0
    53c8:	cmp	r3, #0
    53cc:	beq	53d8 <eval_integer+0xfac>
    53d0:	mvn	r3, #0
    53d4:	b	6654 <eval_integer+0x2228>
    53d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    53dc:	cmp	r3, #0
    53e0:	beq	5400 <eval_integer+0xfd4>
    53e4:	ldr	r3, [fp, #-944]	; 0xfffffc50
    53e8:	ldrd	r2, [r3]
    53ec:	sub	r1, fp, #300	; 0x12c
    53f0:	ldrd	r0, [r1]
    53f4:	cmp	r0, r2
    53f8:	sbcs	r3, r1, r3
    53fc:	bge	5410 <eval_integer+0xfe4>
    5400:	sub	r3, fp, #300	; 0x12c
    5404:	ldrd	r2, [r3]
    5408:	ldr	r1, [fp, #-944]	; 0xfffffc50
    540c:	strd	r2, [r1]
    5410:	ldr	r3, [fp, #-288]	; 0xfffffee0
    5414:	sub	r2, r3, #1
    5418:	ldr	r3, [fp, #-28]	; 0xffffffe4
    541c:	cmp	r2, r3
    5420:	ble	5448 <eval_integer+0x101c>
    5424:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5428:	add	r3, r3, #8
    542c:	mov	r0, r3
    5430:	bl	0 <coda_cursor_goto_next_array_element>
    5434:	mov	r3, r0
    5438:	cmp	r3, #0
    543c:	beq	5448 <eval_integer+0x101c>
    5440:	mvn	r3, #0
    5444:	b	6654 <eval_integer+0x2228>
    5448:	ldr	r3, [fp, #-28]	; 0xffffffe4
    544c:	add	r3, r3, #1
    5450:	str	r3, [fp, #-28]	; 0xffffffe4
    5454:	ldr	r3, [fp, #-288]	; 0xfffffee0
    5458:	ldr	r2, [fp, #-28]	; 0xffffffe4
    545c:	cmp	r2, r3
    5460:	blt	53ac <eval_integer+0xf80>
    5464:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5468:	add	r3, r3, #8
    546c:	sub	r1, fp, #900	; 0x384
    5470:	mov	r2, #520	; 0x208
    5474:	mov	r0, r3
    5478:	bl	0 <memcpy>
    547c:	b	6650 <eval_integer+0x2224>
    5480:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5484:	ldr	r3, [r3]
    5488:	cmp	r3, #0
    548c:	bne	54a4 <eval_integer+0x1078>
    5490:	ldr	r3, [pc, #120]	; 5510 <eval_integer+0x10e4>
    5494:	ldr	r2, [pc, #156]	; 5538 <eval_integer+0x110c>
    5498:	ldr	r1, [pc, #116]	; 5514 <eval_integer+0x10e8>
    549c:	ldr	r0, [pc, #116]	; 5518 <eval_integer+0x10ec>
    54a0:	bl	0 <__assert_fail>
    54a4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    54a8:	sub	r0, fp, #900	; 0x384
    54ac:	add	r3, r3, #8
    54b0:	mov	r2, #520	; 0x208
    54b4:	mov	r1, r3
    54b8:	bl	0 <memcpy>
    54bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    54c0:	ldr	r3, [r3, #16]
    54c4:	mov	r1, r3
    54c8:	ldr	r0, [fp, #-936]	; 0xfffffc58
    54cc:	bl	9098 <eval_cursor>
    54d0:	mov	r3, r0
    54d4:	cmp	r3, #0
    54d8:	beq	54e4 <eval_integer+0x10b8>
    54dc:	mvn	r3, #0
    54e0:	b	6654 <eval_integer+0x2228>
    54e4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    54e8:	add	r3, r3, #8
    54ec:	sub	r2, fp, #304	; 0x130
    54f0:	mov	r1, r2
    54f4:	mov	r0, r3
    54f8:	bl	0 <coda_cursor_get_num_elements>
    54fc:	mov	r3, r0
    5500:	cmp	r3, #0
    5504:	beq	55ac <eval_integer+0x1180>
    5508:	mvn	r3, #0
    550c:	b	6654 <eval_integer+0x2228>
    5510:	.word	0x00000ec8
    5514:	.word	0x00000024
    5518:	.word	0x0000017c
    551c:	.word	0x000001d4
    5520:	.word	0x00000210
    5524:	.word	0x0000022c
    5528:	.word	0x00000892
    552c:	.word	0x000008c2
    5530:	.word	0x000008ef
    5534:	.word	0x0000091f
    5538:	.word	0x0000094f
    553c:	.word	0x00000983
    5540:	.word	0xfffffddc
    5544:	.word	0xfffffdc8
    5548:	.word	0xfffffd98
    554c:	.word	0xfffffd34
    5550:	.word	0xfffffcd4
    5554:	.word	0xfffffc78
    5558:	.word	0xfffffc50
    555c:	.word	0x000009bb
    5560:	.word	0x000002b8
    5564:	.word	0x000002dc
    5568:	.word	0x00000a03
    556c:	.word	0x00000a1a
    5570:	.word	0x00000a2d
    5574:	.word	0x00000a43
    5578:	.word	0x00000a58
    557c:	.word	0x00000a69
    5580:	.word	0x00000a77
    5584:	.word	0x00000a81
    5588:	.word	0x00000a8e
    558c:	.word	0x00000aa4
    5590:	.word	0x00000198
    5594:	.word	0x00000ac9
    5598:	.word	0x00000314
    559c:	.word	0x00000ec8
    55a0:	.word	0x00000ae8
    55a4:	.word	0x0000017c
    55a8:	.word	0x00000024
    55ac:	ldr	r1, [fp, #-944]	; 0xfffffc50
    55b0:	mov	r2, #0
    55b4:	mov	r3, #0
    55b8:	strd	r2, [r1]
    55bc:	ldr	r3, [fp, #-304]	; 0xfffffed0
    55c0:	cmp	r3, #0
    55c4:	ble	56c0 <eval_integer+0x1294>
    55c8:	ldr	r3, [fp, #-936]	; 0xfffffc58
    55cc:	add	r3, r3, #8
    55d0:	mov	r0, r3
    55d4:	bl	0 <coda_cursor_goto_first_array_element>
    55d8:	mov	r3, r0
    55dc:	cmp	r3, #0
    55e0:	beq	55ec <eval_integer+0x11c0>
    55e4:	mvn	r3, #0
    55e8:	b	6654 <eval_integer+0x2228>
    55ec:	mov	r3, #0
    55f0:	str	r3, [fp, #-32]	; 0xffffffe0
    55f4:	b	56b0 <eval_integer+0x1284>
    55f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    55fc:	ldr	r3, [r3, #20]
    5600:	sub	r2, fp, #308	; 0x134
    5604:	mov	r1, r3
    5608:	ldr	r0, [fp, #-936]	; 0xfffffc58
    560c:	bl	12c8 <eval_boolean>
    5610:	mov	r3, r0
    5614:	cmp	r3, #0
    5618:	beq	5624 <eval_integer+0x11f8>
    561c:	mvn	r3, #0
    5620:	b	6654 <eval_integer+0x2228>
    5624:	ldr	r3, [fp, #-308]	; 0xfffffecc
    5628:	cmp	r3, #0
    562c:	beq	5664 <eval_integer+0x1238>
    5630:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5634:	mov	r2, r3
    5638:	asr	r3, r2, #31
    563c:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5640:	strd	r2, [r1]
    5644:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5648:	add	r3, r3, #8
    564c:	sub	r1, fp, #900	; 0x384
    5650:	mov	r2, #520	; 0x208
    5654:	mov	r0, r3
    5658:	bl	0 <memcpy>
    565c:	mov	r3, #0
    5660:	b	56ac <eval_integer+0x1280>
    5664:	ldr	r3, [fp, #-304]	; 0xfffffed0
    5668:	sub	r2, r3, #1
    566c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5670:	cmp	r2, r3
    5674:	ble	569c <eval_integer+0x1270>
    5678:	ldr	r3, [fp, #-936]	; 0xfffffc58
    567c:	add	r3, r3, #8
    5680:	mov	r0, r3
    5684:	bl	0 <coda_cursor_goto_next_array_element>
    5688:	mov	r3, r0
    568c:	cmp	r3, #0
    5690:	beq	569c <eval_integer+0x1270>
    5694:	mvn	r3, #0
    5698:	b	56ac <eval_integer+0x1280>
    569c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    56a0:	add	r3, r3, #1
    56a4:	str	r3, [fp, #-32]	; 0xffffffe0
    56a8:	b	56b0 <eval_integer+0x1284>
    56ac:	b	6654 <eval_integer+0x2228>
    56b0:	ldr	r3, [fp, #-304]	; 0xfffffed0
    56b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    56b8:	cmp	r2, r3
    56bc:	blt	55f8 <eval_integer+0x11cc>
    56c0:	ldr	r1, [fp, #-944]	; 0xfffffc50
    56c4:	mvn	r2, #0
    56c8:	mvn	r3, #0
    56cc:	strd	r2, [r1]
    56d0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    56d4:	add	r3, r3, #8
    56d8:	sub	r1, fp, #900	; 0x384
    56dc:	mov	r2, #520	; 0x208
    56e0:	mov	r0, r3
    56e4:	bl	0 <memcpy>
    56e8:	b	6650 <eval_integer+0x2224>
    56ec:	mov	r3, #0
    56f0:	str	r3, [fp, #-312]	; 0xfffffec8
    56f4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    56f8:	ldr	r3, [r3]
    56fc:	cmp	r3, #0
    5700:	bne	5718 <eval_integer+0x12ec>
    5704:	ldr	r3, [pc, #-368]	; 559c <eval_integer+0x1170>
    5708:	ldr	r2, [pc, #-468]	; 553c <eval_integer+0x1110>
    570c:	ldr	r1, [pc, #-364]	; 55a8 <eval_integer+0x117c>
    5710:	ldr	r0, [pc, #-372]	; 55a4 <eval_integer+0x1178>
    5714:	bl	0 <__assert_fail>
    5718:	ldr	r3, [fp, #-936]	; 0xfffffc58
    571c:	sub	r0, fp, #900	; 0x384
    5720:	add	r3, r3, #8
    5724:	mov	r2, #520	; 0x208
    5728:	mov	r1, r3
    572c:	bl	0 <memcpy>
    5730:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5734:	ldr	r3, [r3, #16]
    5738:	mov	r1, r3
    573c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5740:	bl	9098 <eval_cursor>
    5744:	mov	r3, r0
    5748:	cmp	r3, #0
    574c:	beq	5758 <eval_integer+0x132c>
    5750:	mvn	r3, #0
    5754:	b	6654 <eval_integer+0x2228>
    5758:	ldr	r3, [pc, #-544]	; 5540 <eval_integer+0x1114>
    575c:	ldr	r3, [pc, r3]
    5760:	bl	0 <__aeabi_read_tp>
    5764:	mov	r2, r0
    5768:	ldr	r3, [r2, r3]
    576c:	str	r3, [fp, #-48]	; 0xffffffd0
    5770:	ldr	r3, [pc, #-564]	; 5544 <eval_integer+0x1118>
    5774:	ldr	r3, [pc, r3]
    5778:	bl	0 <__aeabi_read_tp>
    577c:	mov	r1, r0
    5780:	mov	r2, #0
    5784:	str	r2, [r1, r3]
    5788:	ldr	r3, [fp, #-936]	; 0xfffffc58
    578c:	add	r3, r3, #8
    5790:	mov	r0, r3
    5794:	bl	0 <coda_cursor_goto_first_array_element>
    5798:	mov	r3, r0
    579c:	cmp	r3, #0
    57a0:	beq	57c4 <eval_integer+0x1398>
    57a4:	ldr	r3, [pc, #-612]	; 5548 <eval_integer+0x111c>
    57a8:	ldr	r3, [pc, r3]
    57ac:	bl	0 <__aeabi_read_tp>
    57b0:	mov	r1, r0
    57b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    57b8:	str	r2, [r1, r3]
    57bc:	mvn	r3, #0
    57c0:	b	6654 <eval_integer+0x2228>
    57c4:	ldr	r1, [fp, #-944]	; 0xfffffc50
    57c8:	mov	r2, #0
    57cc:	mov	r3, #0
    57d0:	strd	r2, [r1]
    57d4:	b	58f0 <eval_integer+0x14c4>
    57d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    57dc:	ldr	r3, [r3, #24]
    57e0:	cmp	r3, #0
    57e4:	beq	582c <eval_integer+0x1400>
    57e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    57ec:	ldr	r3, [r3, #20]
    57f0:	sub	r2, fp, #312	; 0x138
    57f4:	mov	r1, r3
    57f8:	ldr	r0, [fp, #-936]	; 0xfffffc58
    57fc:	bl	12c8 <eval_boolean>
    5800:	mov	r3, r0
    5804:	cmp	r3, #0
    5808:	beq	582c <eval_integer+0x1400>
    580c:	ldr	r3, [pc, #-712]	; 554c <eval_integer+0x1120>
    5810:	ldr	r3, [pc, r3]
    5814:	bl	0 <__aeabi_read_tp>
    5818:	mov	r1, r0
    581c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    5820:	str	r2, [r1, r3]
    5824:	mvn	r3, #0
    5828:	b	6654 <eval_integer+0x2228>
    582c:	ldr	r3, [fp, #-312]	; 0xfffffec8
    5830:	cmp	r3, #0
    5834:	beq	584c <eval_integer+0x1420>
    5838:	ldr	r1, [fp, #-944]	; 0xfffffc50
    583c:	mvn	r2, #0
    5840:	mvn	r3, #0
    5844:	strd	r2, [r1]
    5848:	b	58f0 <eval_integer+0x14c4>
    584c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5850:	ldr	r3, [r3, #20]
    5854:	sub	r2, fp, #312	; 0x138
    5858:	mov	r1, r3
    585c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5860:	bl	12c8 <eval_boolean>
    5864:	mov	r3, r0
    5868:	cmp	r3, #0
    586c:	beq	5890 <eval_integer+0x1464>
    5870:	ldr	r3, [pc, #-808]	; 5550 <eval_integer+0x1124>
    5874:	ldr	r3, [pc, r3]
    5878:	bl	0 <__aeabi_read_tp>
    587c:	mov	r1, r0
    5880:	ldr	r2, [fp, #-48]	; 0xffffffd0
    5884:	str	r2, [r1, r3]
    5888:	mvn	r3, #0
    588c:	b	6654 <eval_integer+0x2228>
    5890:	ldr	r3, [fp, #-312]	; 0xfffffec8
    5894:	cmp	r3, #0
    5898:	bne	58f0 <eval_integer+0x14c4>
    589c:	ldr	r3, [fp, #-944]	; 0xfffffc50
    58a0:	ldrd	r2, [r3]
    58a4:	adds	r2, r2, #1
    58a8:	adc	r3, r3, #0
    58ac:	ldr	r1, [fp, #-944]	; 0xfffffc50
    58b0:	strd	r2, [r1]
    58b4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    58b8:	add	r3, r3, #8
    58bc:	mov	r0, r3
    58c0:	bl	0 <coda_cursor_goto_next_array_element>
    58c4:	mov	r3, r0
    58c8:	cmp	r3, #0
    58cc:	beq	58f0 <eval_integer+0x14c4>
    58d0:	ldr	r3, [pc, #-900]	; 5554 <eval_integer+0x1128>
    58d4:	ldr	r3, [pc, r3]
    58d8:	bl	0 <__aeabi_read_tp>
    58dc:	mov	r1, r0
    58e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    58e4:	str	r2, [r1, r3]
    58e8:	mvn	r3, #0
    58ec:	b	6654 <eval_integer+0x2228>
    58f0:	ldr	r3, [fp, #-312]	; 0xfffffec8
    58f4:	cmp	r3, #0
    58f8:	beq	57d8 <eval_integer+0x13ac>
    58fc:	ldr	r3, [pc, #-940]	; 5558 <eval_integer+0x112c>
    5900:	ldr	r3, [pc, r3]
    5904:	bl	0 <__aeabi_read_tp>
    5908:	mov	r1, r0
    590c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    5910:	str	r2, [r1, r3]
    5914:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5918:	add	r3, r3, #8
    591c:	sub	r1, fp, #900	; 0x384
    5920:	mov	r2, #520	; 0x208
    5924:	mov	r0, r3
    5928:	bl	0 <memcpy>
    592c:	b	6650 <eval_integer+0x2224>
    5930:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5934:	ldr	r3, [r3, #16]
    5938:	ldr	r3, [r3, #4]
    593c:	cmp	r3, #4
    5940:	bne	5a04 <eval_integer+0x15d8>
    5944:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5948:	ldr	r3, [r3]
    594c:	cmp	r3, #0
    5950:	bne	5968 <eval_integer+0x153c>
    5954:	ldr	r3, [pc, #-960]	; 559c <eval_integer+0x1170>
    5958:	ldr	r2, [pc, #-1028]	; 555c <eval_integer+0x1130>
    595c:	ldr	r1, [pc, #-956]	; 55a8 <eval_integer+0x117c>
    5960:	ldr	r0, [pc, #-964]	; 55a4 <eval_integer+0x1178>
    5964:	bl	0 <__assert_fail>
    5968:	ldr	r3, [fp, #-936]	; 0xfffffc58
    596c:	sub	r0, fp, #900	; 0x384
    5970:	add	r3, r3, #8
    5974:	mov	r2, #520	; 0x208
    5978:	mov	r1, r3
    597c:	bl	0 <memcpy>
    5980:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5984:	ldr	r3, [r3, #16]
    5988:	mov	r1, r3
    598c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5990:	bl	9098 <eval_cursor>
    5994:	mov	r3, r0
    5998:	cmp	r3, #0
    599c:	beq	59a8 <eval_integer+0x157c>
    59a0:	mvn	r3, #0
    59a4:	b	6654 <eval_integer+0x2228>
    59a8:	ldr	r3, [fp, #-936]	; 0xfffffc58
    59ac:	add	r3, r3, #8
    59b0:	sub	r2, fp, #316	; 0x13c
    59b4:	mov	r1, r2
    59b8:	mov	r0, r3
    59bc:	bl	0 <coda_cursor_get_string_length>
    59c0:	mov	r3, r0
    59c4:	cmp	r3, #0
    59c8:	beq	59d4 <eval_integer+0x15a8>
    59cc:	mvn	r3, #0
    59d0:	b	6654 <eval_integer+0x2228>
    59d4:	ldr	r3, [fp, #-316]	; 0xfffffec4
    59d8:	mov	r2, r3
    59dc:	asr	r3, r2, #31
    59e0:	ldr	r1, [fp, #-944]	; 0xfffffc50
    59e4:	strd	r2, [r1]
    59e8:	ldr	r3, [fp, #-936]	; 0xfffffc58
    59ec:	add	r3, r3, #8
    59f0:	sub	r1, fp, #900	; 0x384
    59f4:	mov	r2, #520	; 0x208
    59f8:	mov	r0, r3
    59fc:	bl	0 <memcpy>
    5a00:	b	6650 <eval_integer+0x2224>
    5a04:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5a08:	ldr	r1, [r3, #16]
    5a0c:	sub	r0, fp, #324	; 0x144
    5a10:	sub	r2, fp, #320	; 0x140
    5a14:	sub	r3, fp, #328	; 0x148
    5a18:	str	r3, [sp]
    5a1c:	mov	r3, r0
    5a20:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5a24:	bl	6670 <eval_string>
    5a28:	mov	r3, r0
    5a2c:	cmp	r3, #0
    5a30:	beq	5a3c <eval_integer+0x1610>
    5a34:	mvn	r3, #0
    5a38:	b	6654 <eval_integer+0x2228>
    5a3c:	ldr	r3, [fp, #-324]	; 0xfffffebc
    5a40:	cmp	r3, #0
    5a44:	ble	5a54 <eval_integer+0x1628>
    5a48:	ldr	r3, [fp, #-328]	; 0xfffffeb8
    5a4c:	mov	r0, r3
    5a50:	bl	0 <free>
    5a54:	ldr	r3, [fp, #-324]	; 0xfffffebc
    5a58:	mov	r2, r3
    5a5c:	asr	r3, r2, #31
    5a60:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5a64:	strd	r2, [r1]
    5a68:	b	6650 <eval_integer+0x2224>
    5a6c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5a70:	ldr	r3, [r3]
    5a74:	cmp	r3, #0
    5a78:	bne	5a90 <eval_integer+0x1664>
    5a7c:	ldr	r3, [pc, #-1256]	; 559c <eval_integer+0x1170>
    5a80:	mov	r2, #2528	; 0x9e0
    5a84:	ldr	r1, [pc, #-1252]	; 55a8 <eval_integer+0x117c>
    5a88:	ldr	r0, [pc, #-1260]	; 55a4 <eval_integer+0x1178>
    5a8c:	bl	0 <__assert_fail>
    5a90:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5a94:	sub	r0, fp, #900	; 0x384
    5a98:	add	r3, r3, #8
    5a9c:	mov	r2, #520	; 0x208
    5aa0:	mov	r1, r3
    5aa4:	bl	0 <memcpy>
    5aa8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5aac:	ldr	r3, [r3, #16]
    5ab0:	mov	r1, r3
    5ab4:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5ab8:	bl	9098 <eval_cursor>
    5abc:	mov	r3, r0
    5ac0:	cmp	r3, #0
    5ac4:	beq	5ad0 <eval_integer+0x16a4>
    5ac8:	mvn	r3, #0
    5acc:	b	6654 <eval_integer+0x2228>
    5ad0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5ad4:	ldr	r3, [r3, #20]
    5ad8:	sub	r2, fp, #340	; 0x154
    5adc:	mov	r1, r3
    5ae0:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5ae4:	bl	442c <eval_integer>
    5ae8:	mov	r3, r0
    5aec:	cmp	r3, #0
    5af0:	beq	5afc <eval_integer+0x16d0>
    5af4:	mvn	r3, #0
    5af8:	b	6654 <eval_integer+0x2228>
    5afc:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5b00:	add	r3, r3, #8
    5b04:	sub	r2, fp, #932	; 0x3a4
    5b08:	sub	r1, fp, #332	; 0x14c
    5b0c:	mov	r0, r3
    5b10:	bl	0 <coda_cursor_get_array_dim>
    5b14:	mov	r3, r0
    5b18:	cmp	r3, #0
    5b1c:	beq	5b28 <eval_integer+0x16fc>
    5b20:	mvn	r3, #0
    5b24:	b	6654 <eval_integer+0x2228>
    5b28:	sub	r3, fp, #332	; 0x14c
    5b2c:	ldrd	r2, [r3, #-8]
    5b30:	cmp	r2, #0
    5b34:	sbcs	r3, r3, #0
    5b38:	bge	5b60 <eval_integer+0x1734>
    5b3c:	sub	r3, fp, #332	; 0x14c
    5b40:	ldrd	r2, [r3, #-8]
    5b44:	mov	r3, r2
    5b48:	mov	r2, r3
    5b4c:	ldr	r1, [pc, #-1524]	; 5560 <eval_integer+0x1134>
    5b50:	mvn	r0, #400	; 0x190
    5b54:	bl	0 <coda_set_error>
    5b58:	mvn	r3, #0
    5b5c:	b	6654 <eval_integer+0x2228>
    5b60:	ldr	r3, [fp, #-332]	; 0xfffffeb4
    5b64:	mov	r2, r3
    5b68:	asr	r3, r2, #31
    5b6c:	sub	r1, fp, #332	; 0x14c
    5b70:	ldrd	r0, [r1, #-8]
    5b74:	cmp	r0, r2
    5b78:	sbcs	r3, r1, r3
    5b7c:	blt	5ba0 <eval_integer+0x1774>
    5b80:	sub	r3, fp, #332	; 0x14c
    5b84:	ldrd	r2, [r3, #-8]
    5b88:	ldr	r3, [fp, #-332]	; 0xfffffeb4
    5b8c:	ldr	r1, [pc, #-1584]	; 5564 <eval_integer+0x1138>
    5b90:	mvn	r0, #400	; 0x190
    5b94:	bl	0 <coda_set_error>
    5b98:	mvn	r3, #0
    5b9c:	b	6654 <eval_integer+0x2228>
    5ba0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5ba4:	add	r3, r3, #8
    5ba8:	sub	r1, fp, #900	; 0x384
    5bac:	mov	r2, #520	; 0x208
    5bb0:	mov	r0, r3
    5bb4:	bl	0 <memcpy>
    5bb8:	sub	r3, fp, #332	; 0x14c
    5bbc:	ldrd	r2, [r3, #-8]
    5bc0:	mov	r3, r2
    5bc4:	lsl	r3, r3, #2
    5bc8:	sub	r2, fp, #12
    5bcc:	add	r3, r2, r3
    5bd0:	ldr	r3, [r3, #-920]	; 0xfffffc68
    5bd4:	mov	r2, r3
    5bd8:	asr	r3, r2, #31
    5bdc:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5be0:	strd	r2, [r1]
    5be4:	b	6650 <eval_integer+0x2224>
    5be8:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5bec:	ldr	r3, [r3]
    5bf0:	cmp	r3, #0
    5bf4:	bne	5c0c <eval_integer+0x17e0>
    5bf8:	ldr	r3, [pc, #-1636]	; 559c <eval_integer+0x1170>
    5bfc:	ldr	r2, [pc, #-1692]	; 5568 <eval_integer+0x113c>
    5c00:	ldr	r1, [pc, #-1632]	; 55a8 <eval_integer+0x117c>
    5c04:	ldr	r0, [pc, #-1640]	; 55a4 <eval_integer+0x1178>
    5c08:	bl	0 <__assert_fail>
    5c0c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5c10:	sub	r0, fp, #900	; 0x384
    5c14:	add	r3, r3, #8
    5c18:	mov	r2, #520	; 0x208
    5c1c:	mov	r1, r3
    5c20:	bl	0 <memcpy>
    5c24:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5c28:	ldr	r3, [r3, #16]
    5c2c:	mov	r1, r3
    5c30:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5c34:	bl	9098 <eval_cursor>
    5c38:	mov	r3, r0
    5c3c:	cmp	r3, #0
    5c40:	beq	5c4c <eval_integer+0x1820>
    5c44:	mvn	r3, #0
    5c48:	b	6654 <eval_integer+0x2228>
    5c4c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5c50:	add	r3, r3, #8
    5c54:	sub	r2, fp, #344	; 0x158
    5c58:	mov	r1, r2
    5c5c:	mov	r0, r3
    5c60:	bl	0 <coda_cursor_get_type>
    5c64:	mov	r3, r0
    5c68:	cmp	r3, #0
    5c6c:	beq	5c78 <eval_integer+0x184c>
    5c70:	mvn	r3, #0
    5c74:	b	6654 <eval_integer+0x2228>
    5c78:	ldr	r3, [fp, #-344]	; 0xfffffea8
    5c7c:	sub	r2, fp, #348	; 0x15c
    5c80:	mov	r1, r2
    5c84:	mov	r0, r3
    5c88:	bl	0 <coda_type_get_array_num_dims>
    5c8c:	mov	r3, r0
    5c90:	cmp	r3, #0
    5c94:	beq	5ca0 <eval_integer+0x1874>
    5c98:	mvn	r3, #0
    5c9c:	b	6654 <eval_integer+0x2228>
    5ca0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5ca4:	add	r3, r3, #8
    5ca8:	sub	r1, fp, #900	; 0x384
    5cac:	mov	r2, #520	; 0x208
    5cb0:	mov	r0, r3
    5cb4:	bl	0 <memcpy>
    5cb8:	ldr	r3, [fp, #-348]	; 0xfffffea4
    5cbc:	mov	r2, r3
    5cc0:	asr	r3, r2, #31
    5cc4:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5cc8:	strd	r2, [r1]
    5ccc:	b	6650 <eval_integer+0x2224>
    5cd0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5cd4:	ldr	r3, [r3]
    5cd8:	cmp	r3, #0
    5cdc:	bne	5cf4 <eval_integer+0x18c8>
    5ce0:	ldr	r3, [pc, #-1868]	; 559c <eval_integer+0x1170>
    5ce4:	ldr	r2, [pc, #-1920]	; 556c <eval_integer+0x1140>
    5ce8:	ldr	r1, [pc, #-1864]	; 55a8 <eval_integer+0x117c>
    5cec:	ldr	r0, [pc, #-1872]	; 55a4 <eval_integer+0x1178>
    5cf0:	bl	0 <__assert_fail>
    5cf4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5cf8:	sub	r0, fp, #900	; 0x384
    5cfc:	add	r3, r3, #8
    5d00:	mov	r2, #520	; 0x208
    5d04:	mov	r1, r3
    5d08:	bl	0 <memcpy>
    5d0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5d10:	ldr	r3, [r3, #16]
    5d14:	mov	r1, r3
    5d18:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5d1c:	bl	9098 <eval_cursor>
    5d20:	mov	r3, r0
    5d24:	cmp	r3, #0
    5d28:	beq	5d34 <eval_integer+0x1908>
    5d2c:	mvn	r3, #0
    5d30:	b	6654 <eval_integer+0x2228>
    5d34:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5d38:	add	r3, r3, #8
    5d3c:	sub	r2, fp, #352	; 0x160
    5d40:	mov	r1, r2
    5d44:	mov	r0, r3
    5d48:	bl	0 <coda_cursor_get_num_elements>
    5d4c:	mov	r3, r0
    5d50:	cmp	r3, #0
    5d54:	beq	5d60 <eval_integer+0x1934>
    5d58:	mvn	r3, #0
    5d5c:	b	6654 <eval_integer+0x2228>
    5d60:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5d64:	add	r3, r3, #8
    5d68:	sub	r1, fp, #900	; 0x384
    5d6c:	mov	r2, #520	; 0x208
    5d70:	mov	r0, r3
    5d74:	bl	0 <memcpy>
    5d78:	ldr	r3, [fp, #-352]	; 0xfffffea0
    5d7c:	mov	r2, r3
    5d80:	asr	r3, r2, #31
    5d84:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5d88:	strd	r2, [r1]
    5d8c:	b	6650 <eval_integer+0x2224>
    5d90:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5d94:	ldr	r3, [r3]
    5d98:	cmp	r3, #0
    5d9c:	bne	5db4 <eval_integer+0x1988>
    5da0:	ldr	r3, [pc, #-2060]	; 559c <eval_integer+0x1170>
    5da4:	ldr	r2, [pc, #-2108]	; 5570 <eval_integer+0x1144>
    5da8:	ldr	r1, [pc, #-2056]	; 55a8 <eval_integer+0x117c>
    5dac:	ldr	r0, [pc, #-2064]	; 55a4 <eval_integer+0x1178>
    5db0:	bl	0 <__assert_fail>
    5db4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5db8:	sub	r0, fp, #900	; 0x384
    5dbc:	add	r3, r3, #8
    5dc0:	mov	r2, #520	; 0x208
    5dc4:	mov	r1, r3
    5dc8:	bl	0 <memcpy>
    5dcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5dd0:	ldr	r3, [r3, #16]
    5dd4:	mov	r1, r3
    5dd8:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5ddc:	bl	9098 <eval_cursor>
    5de0:	mov	r3, r0
    5de4:	cmp	r3, #0
    5de8:	beq	5df4 <eval_integer+0x19c8>
    5dec:	mvn	r3, #0
    5df0:	b	6654 <eval_integer+0x2228>
    5df4:	bl	0 <coda_get_option_use_fast_size_expressions>
    5df8:	str	r0, [fp, #-52]	; 0xffffffcc
    5dfc:	mov	r0, #0
    5e00:	bl	0 <coda_set_option_use_fast_size_expressions>
    5e04:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5e08:	add	r3, r3, #8
    5e0c:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5e10:	mov	r0, r3
    5e14:	bl	0 <coda_cursor_get_bit_size>
    5e18:	mov	r3, r0
    5e1c:	cmp	r3, #0
    5e20:	beq	5e34 <eval_integer+0x1a08>
    5e24:	ldr	r0, [fp, #-52]	; 0xffffffcc
    5e28:	bl	0 <coda_set_option_use_fast_size_expressions>
    5e2c:	mvn	r3, #0
    5e30:	b	6654 <eval_integer+0x2228>
    5e34:	ldr	r0, [fp, #-52]	; 0xffffffcc
    5e38:	bl	0 <coda_set_option_use_fast_size_expressions>
    5e3c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5e40:	add	r3, r3, #8
    5e44:	sub	r1, fp, #900	; 0x384
    5e48:	mov	r2, #520	; 0x208
    5e4c:	mov	r0, r3
    5e50:	bl	0 <memcpy>
    5e54:	b	6650 <eval_integer+0x2224>
    5e58:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5e5c:	ldr	r3, [r3]
    5e60:	cmp	r3, #0
    5e64:	bne	5e7c <eval_integer+0x1a50>
    5e68:	ldr	r3, [pc, #-2260]	; 559c <eval_integer+0x1170>
    5e6c:	ldr	r2, [pc, #-2304]	; 5574 <eval_integer+0x1148>
    5e70:	ldr	r1, [pc, #-2256]	; 55a8 <eval_integer+0x117c>
    5e74:	ldr	r0, [pc, #-2264]	; 55a4 <eval_integer+0x1178>
    5e78:	bl	0 <__assert_fail>
    5e7c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5e80:	sub	r0, fp, #900	; 0x384
    5e84:	add	r3, r3, #8
    5e88:	mov	r2, #520	; 0x208
    5e8c:	mov	r1, r3
    5e90:	bl	0 <memcpy>
    5e94:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5e98:	ldr	r3, [r3, #16]
    5e9c:	mov	r1, r3
    5ea0:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5ea4:	bl	9098 <eval_cursor>
    5ea8:	mov	r3, r0
    5eac:	cmp	r3, #0
    5eb0:	beq	5ebc <eval_integer+0x1a90>
    5eb4:	mvn	r3, #0
    5eb8:	b	6654 <eval_integer+0x2228>
    5ebc:	bl	0 <coda_get_option_use_fast_size_expressions>
    5ec0:	str	r0, [fp, #-56]	; 0xffffffc8
    5ec4:	mov	r0, #0
    5ec8:	bl	0 <coda_set_option_use_fast_size_expressions>
    5ecc:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5ed0:	add	r3, r3, #8
    5ed4:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5ed8:	mov	r0, r3
    5edc:	bl	0 <coda_cursor_get_byte_size>
    5ee0:	mov	r3, r0
    5ee4:	cmp	r3, #0
    5ee8:	beq	5efc <eval_integer+0x1ad0>
    5eec:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5ef0:	bl	0 <coda_set_option_use_fast_size_expressions>
    5ef4:	mvn	r3, #0
    5ef8:	b	6654 <eval_integer+0x2228>
    5efc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5f00:	bl	0 <coda_set_option_use_fast_size_expressions>
    5f04:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5f08:	add	r3, r3, #8
    5f0c:	sub	r1, fp, #900	; 0x384
    5f10:	mov	r2, #520	; 0x208
    5f14:	mov	r0, r3
    5f18:	bl	0 <memcpy>
    5f1c:	b	6650 <eval_integer+0x2224>
    5f20:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5f24:	ldr	r3, [r3]
    5f28:	cmp	r3, #0
    5f2c:	bne	5f44 <eval_integer+0x1b18>
    5f30:	ldr	r3, [pc, #-2460]	; 559c <eval_integer+0x1170>
    5f34:	ldr	r2, [pc, #-2500]	; 5578 <eval_integer+0x114c>
    5f38:	ldr	r1, [pc, #-2456]	; 55a8 <eval_integer+0x117c>
    5f3c:	ldr	r0, [pc, #-2464]	; 55a4 <eval_integer+0x1178>
    5f40:	bl	0 <__assert_fail>
    5f44:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5f48:	sub	r0, fp, #900	; 0x384
    5f4c:	add	r3, r3, #8
    5f50:	mov	r2, #520	; 0x208
    5f54:	mov	r1, r3
    5f58:	bl	0 <memcpy>
    5f5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5f60:	ldr	r3, [r3, #16]
    5f64:	mov	r1, r3
    5f68:	ldr	r0, [fp, #-936]	; 0xfffffc58
    5f6c:	bl	9098 <eval_cursor>
    5f70:	mov	r3, r0
    5f74:	cmp	r3, #0
    5f78:	beq	5f84 <eval_integer+0x1b58>
    5f7c:	mvn	r3, #0
    5f80:	b	6654 <eval_integer+0x2228>
    5f84:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5f88:	add	r3, r3, #8
    5f8c:	ldr	r1, [fp, #-944]	; 0xfffffc50
    5f90:	mov	r0, r3
    5f94:	bl	0 <coda_cursor_get_file_bit_offset>
    5f98:	mov	r3, r0
    5f9c:	cmp	r3, #0
    5fa0:	beq	5fac <eval_integer+0x1b80>
    5fa4:	mvn	r3, #0
    5fa8:	b	6654 <eval_integer+0x2228>
    5fac:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5fb0:	add	r3, r3, #8
    5fb4:	sub	r1, fp, #900	; 0x384
    5fb8:	mov	r2, #520	; 0x208
    5fbc:	mov	r0, r3
    5fc0:	bl	0 <memcpy>
    5fc4:	b	6650 <eval_integer+0x2224>
    5fc8:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5fcc:	ldr	r3, [r3]
    5fd0:	cmp	r3, #0
    5fd4:	bne	5fec <eval_integer+0x1bc0>
    5fd8:	ldr	r3, [pc, #-2628]	; 559c <eval_integer+0x1170>
    5fdc:	ldr	r2, [pc, #-2664]	; 557c <eval_integer+0x1150>
    5fe0:	ldr	r1, [pc, #-2624]	; 55a8 <eval_integer+0x117c>
    5fe4:	ldr	r0, [pc, #-2632]	; 55a4 <eval_integer+0x1178>
    5fe8:	bl	0 <__assert_fail>
    5fec:	ldr	r3, [fp, #-936]	; 0xfffffc58
    5ff0:	sub	r0, fp, #900	; 0x384
    5ff4:	add	r3, r3, #8
    5ff8:	mov	r2, #520	; 0x208
    5ffc:	mov	r1, r3
    6000:	bl	0 <memcpy>
    6004:	ldr	r3, [fp, #-40]	; 0xffffffd8
    6008:	ldr	r3, [r3, #16]
    600c:	mov	r1, r3
    6010:	ldr	r0, [fp, #-936]	; 0xfffffc58
    6014:	bl	9098 <eval_cursor>
    6018:	mov	r3, r0
    601c:	cmp	r3, #0
    6020:	beq	602c <eval_integer+0x1c00>
    6024:	mvn	r3, #0
    6028:	b	6654 <eval_integer+0x2228>
    602c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6030:	add	r3, r3, #8
    6034:	ldr	r1, [fp, #-944]	; 0xfffffc50
    6038:	mov	r0, r3
    603c:	bl	0 <coda_cursor_get_file_byte_offset>
    6040:	mov	r3, r0
    6044:	cmp	r3, #0
    6048:	beq	6054 <eval_integer+0x1c28>
    604c:	mvn	r3, #0
    6050:	b	6654 <eval_integer+0x2228>
    6054:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6058:	add	r3, r3, #8
    605c:	sub	r1, fp, #900	; 0x384
    6060:	mov	r2, #520	; 0x208
    6064:	mov	r0, r3
    6068:	bl	0 <memcpy>
    606c:	b	6650 <eval_integer+0x2224>
    6070:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6074:	ldr	r3, [r3]
    6078:	cmp	r3, #0
    607c:	bne	6094 <eval_integer+0x1c68>
    6080:	ldr	r3, [pc, #-2796]	; 559c <eval_integer+0x1170>
    6084:	ldr	r2, [pc, #-2828]	; 5580 <eval_integer+0x1154>
    6088:	ldr	r1, [pc, #-2792]	; 55a8 <eval_integer+0x117c>
    608c:	ldr	r0, [pc, #-2800]	; 55a4 <eval_integer+0x1178>
    6090:	bl	0 <__assert_fail>
    6094:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6098:	ldr	r3, [r3]
    609c:	ldr	r3, [r3]
    60a0:	ldr	r1, [fp, #-944]	; 0xfffffc50
    60a4:	mov	r0, r3
    60a8:	bl	0 <coda_get_product_file_size>
    60ac:	mov	r3, r0
    60b0:	cmp	r3, #0
    60b4:	beq	664c <eval_integer+0x2220>
    60b8:	mvn	r3, #0
    60bc:	b	6654 <eval_integer+0x2228>
    60c0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    60c4:	ldr	r3, [r3]
    60c8:	cmp	r3, #0
    60cc:	bne	60e4 <eval_integer+0x1cb8>
    60d0:	ldr	r3, [pc, #-2876]	; 559c <eval_integer+0x1170>
    60d4:	ldr	r2, [pc, #-2904]	; 5584 <eval_integer+0x1158>
    60d8:	ldr	r1, [pc, #-2872]	; 55a8 <eval_integer+0x117c>
    60dc:	ldr	r0, [pc, #-2880]	; 55a4 <eval_integer+0x1178>
    60e0:	bl	0 <__assert_fail>
    60e4:	ldr	r3, [fp, #-936]	; 0xfffffc58
    60e8:	ldr	r3, [r3]
    60ec:	ldr	r3, [r3]
    60f0:	sub	r2, fp, #356	; 0x164
    60f4:	mov	r1, r2
    60f8:	mov	r0, r3
    60fc:	bl	0 <coda_get_product_version>
    6100:	mov	r3, r0
    6104:	cmp	r3, #0
    6108:	beq	6114 <eval_integer+0x1ce8>
    610c:	mvn	r3, #0
    6110:	b	6654 <eval_integer+0x2228>
    6114:	ldr	r3, [fp, #-356]	; 0xfffffe9c
    6118:	mov	r2, r3
    611c:	asr	r3, r2, #31
    6120:	ldr	r1, [fp, #-944]	; 0xfffffc50
    6124:	strd	r2, [r1]
    6128:	b	6650 <eval_integer+0x2224>
    612c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6130:	ldr	r3, [r3]
    6134:	cmp	r3, #0
    6138:	bne	6150 <eval_integer+0x1d24>
    613c:	ldr	r3, [pc, #-2984]	; 559c <eval_integer+0x1170>
    6140:	ldr	r2, [pc, #-3008]	; 5588 <eval_integer+0x115c>
    6144:	ldr	r1, [pc, #-2980]	; 55a8 <eval_integer+0x117c>
    6148:	ldr	r0, [pc, #-2988]	; 55a4 <eval_integer+0x1178>
    614c:	bl	0 <__assert_fail>
    6150:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6154:	sub	r0, fp, #900	; 0x384
    6158:	add	r3, r3, #8
    615c:	mov	r2, #520	; 0x208
    6160:	mov	r1, r3
    6164:	bl	0 <memcpy>
    6168:	ldr	r3, [fp, #-40]	; 0xffffffd8
    616c:	ldr	r3, [r3, #16]
    6170:	mov	r1, r3
    6174:	ldr	r0, [fp, #-936]	; 0xfffffc58
    6178:	bl	9098 <eval_cursor>
    617c:	mov	r3, r0
    6180:	cmp	r3, #0
    6184:	beq	6190 <eval_integer+0x1d64>
    6188:	mvn	r3, #0
    618c:	b	6654 <eval_integer+0x2228>
    6190:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6194:	add	r3, r3, #8
    6198:	sub	r2, fp, #360	; 0x168
    619c:	mov	r1, r2
    61a0:	mov	r0, r3
    61a4:	bl	0 <coda_cursor_get_index>
    61a8:	mov	r3, r0
    61ac:	cmp	r3, #0
    61b0:	beq	61bc <eval_integer+0x1d90>
    61b4:	mvn	r3, #0
    61b8:	b	6654 <eval_integer+0x2228>
    61bc:	ldr	r3, [fp, #-936]	; 0xfffffc58
    61c0:	add	r3, r3, #8
    61c4:	sub	r1, fp, #900	; 0x384
    61c8:	mov	r2, #520	; 0x208
    61cc:	mov	r0, r3
    61d0:	bl	0 <memcpy>
    61d4:	ldr	r3, [fp, #-360]	; 0xfffffe98
    61d8:	mov	r2, r3
    61dc:	asr	r3, r2, #31
    61e0:	ldr	r1, [fp, #-944]	; 0xfffffc50
    61e4:	strd	r2, [r1]
    61e8:	b	6650 <eval_integer+0x2224>
    61ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
    61f0:	ldr	r3, [r3, #12]
    61f4:	ldrb	r3, [r3]
    61f8:	sub	r3, r3, #105	; 0x69
    61fc:	ldr	r2, [fp, #-936]	; 0xfffffc58
    6200:	add	r3, r3, #66	; 0x42
    6204:	lsl	r3, r3, #3
    6208:	add	r3, r2, r3
    620c:	ldrd	r2, [r3]
    6210:	ldr	r1, [fp, #-944]	; 0xfffffc50
    6214:	strd	r2, [r1]
    6218:	b	6650 <eval_integer+0x2224>
    621c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6220:	ldr	r3, [r3]
    6224:	cmp	r3, #0
    6228:	bne	6240 <eval_integer+0x1e14>
    622c:	ldr	r3, [pc, #-3224]	; 559c <eval_integer+0x1170>
    6230:	ldr	r2, [pc, #-3244]	; 558c <eval_integer+0x1160>
    6234:	ldr	r1, [pc, #-3220]	; 55a8 <eval_integer+0x117c>
    6238:	ldr	r0, [pc, #-3228]	; 55a4 <eval_integer+0x1178>
    623c:	bl	0 <__assert_fail>
    6240:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6244:	ldr	r3, [r3, #560]	; 0x230
    6248:	cmp	r3, #0
    624c:	beq	6264 <eval_integer+0x1e38>
    6250:	ldr	r1, [pc, #-3272]	; 5590 <eval_integer+0x1164>
    6254:	mvn	r0, #400	; 0x190
    6258:	bl	0 <coda_set_error>
    625c:	mvn	r3, #0
    6260:	b	6654 <eval_integer+0x2228>
    6264:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6268:	ldr	r3, [r3]
    626c:	ldr	r0, [r3]
    6270:	ldr	r3, [fp, #-40]	; 0xffffffd8
    6274:	ldr	r3, [r3, #12]
    6278:	sub	r2, fp, #364	; 0x16c
    627c:	mov	r1, r3
    6280:	bl	0 <coda_product_variable_get_size>
    6284:	mov	r3, r0
    6288:	cmp	r3, #0
    628c:	beq	6298 <eval_integer+0x1e6c>
    6290:	mvn	r3, #0
    6294:	b	6654 <eval_integer+0x2228>
    6298:	ldr	r3, [fp, #-40]	; 0xffffffd8
    629c:	ldr	r2, [r3, #12]
    62a0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    62a4:	str	r2, [r3, #560]	; 0x230
    62a8:	mov	r3, #0
    62ac:	str	r3, [fp, #-36]	; 0xffffffdc
    62b0:	b	6338 <eval_integer+0x1f0c>
    62b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    62b8:	mov	r2, r3
    62bc:	asr	r3, r2, #31
    62c0:	ldr	r1, [fp, #-936]	; 0xfffffc58
    62c4:	add	r1, r1, #560	; 0x230
    62c8:	strd	r2, [r1, #-8]
    62cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    62d0:	ldr	r3, [r3, #16]
    62d4:	sub	r2, fp, #368	; 0x170
    62d8:	mov	r1, r3
    62dc:	ldr	r0, [fp, #-936]	; 0xfffffc58
    62e0:	bl	12c8 <eval_boolean>
    62e4:	mov	r3, r0
    62e8:	cmp	r3, #0
    62ec:	beq	62f8 <eval_integer+0x1ecc>
    62f0:	mvn	r3, #0
    62f4:	b	6654 <eval_integer+0x2228>
    62f8:	ldr	r3, [fp, #-368]	; 0xfffffe90
    62fc:	cmp	r3, #0
    6300:	beq	632c <eval_integer+0x1f00>
    6304:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6308:	mov	r2, r3
    630c:	asr	r3, r2, #31
    6310:	ldr	r1, [fp, #-944]	; 0xfffffc50
    6314:	strd	r2, [r1]
    6318:	ldr	r3, [fp, #-936]	; 0xfffffc58
    631c:	mov	r2, #0
    6320:	str	r2, [r3, #560]	; 0x230
    6324:	mov	r3, #0
    6328:	b	6654 <eval_integer+0x2228>
    632c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6330:	add	r3, r3, #1
    6334:	str	r3, [fp, #-36]	; 0xffffffdc
    6338:	ldr	r3, [fp, #-364]	; 0xfffffe94
    633c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    6340:	cmp	r2, r3
    6344:	blt	62b4 <eval_integer+0x1e88>
    6348:	ldr	r1, [fp, #-944]	; 0xfffffc50
    634c:	mvn	r2, #0
    6350:	mvn	r3, #0
    6354:	strd	r2, [r1]
    6358:	ldr	r3, [fp, #-936]	; 0xfffffc58
    635c:	mov	r2, #0
    6360:	str	r2, [r3, #560]	; 0x230
    6364:	b	6650 <eval_integer+0x2224>
    6368:	sub	r3, fp, #380	; 0x17c
    636c:	mov	r1, r3
    6370:	mov	r2, #0
    6374:	mov	r3, #0
    6378:	strd	r2, [r1]
    637c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6380:	ldr	r3, [r3]
    6384:	cmp	r3, #0
    6388:	bne	63a0 <eval_integer+0x1f74>
    638c:	ldr	r3, [pc, #-3576]	; 559c <eval_integer+0x1170>
    6390:	ldr	r2, [pc, #-3588]	; 5594 <eval_integer+0x1168>
    6394:	ldr	r1, [pc, #-3572]	; 55a8 <eval_integer+0x117c>
    6398:	ldr	r0, [pc, #-3580]	; 55a4 <eval_integer+0x1178>
    639c:	bl	0 <__assert_fail>
    63a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    63a4:	ldr	r3, [r3, #16]
    63a8:	cmp	r3, #0
    63ac:	beq	6434 <eval_integer+0x2008>
    63b0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    63b4:	ldr	r3, [r3, #560]	; 0x230
    63b8:	cmp	r3, #0
    63bc:	beq	6408 <eval_integer+0x1fdc>
    63c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    63c4:	ldr	r2, [r3, #12]
    63c8:	ldr	r3, [fp, #-936]	; 0xfffffc58
    63cc:	ldr	r3, [r3, #560]	; 0x230
    63d0:	mov	r1, r3
    63d4:	mov	r0, r2
    63d8:	bl	0 <strcmp>
    63dc:	mov	r3, r0
    63e0:	cmp	r3, #0
    63e4:	bne	6408 <eval_integer+0x1fdc>
    63e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    63ec:	ldr	r3, [r3, #12]
    63f0:	mov	r2, r3
    63f4:	ldr	r1, [pc, #-3684]	; 5598 <eval_integer+0x116c>
    63f8:	mvn	r0, #400	; 0x190
    63fc:	bl	0 <coda_set_error>
    6400:	mvn	r3, #0
    6404:	b	6654 <eval_integer+0x2228>
    6408:	ldr	r3, [fp, #-40]	; 0xffffffd8
    640c:	ldr	r3, [r3, #16]
    6410:	sub	r2, fp, #380	; 0x17c
    6414:	mov	r1, r3
    6418:	ldr	r0, [fp, #-936]	; 0xfffffc58
    641c:	bl	442c <eval_integer>
    6420:	mov	r3, r0
    6424:	cmp	r3, #0
    6428:	beq	6480 <eval_integer+0x2054>
    642c:	mvn	r3, #0
    6430:	b	6654 <eval_integer+0x2228>
    6434:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6438:	ldr	r3, [r3, #560]	; 0x230
    643c:	cmp	r3, #0
    6440:	beq	6480 <eval_integer+0x2054>
    6444:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6448:	ldr	r2, [r3, #560]	; 0x230
    644c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    6450:	ldr	r3, [r3, #12]
    6454:	mov	r1, r3
    6458:	mov	r0, r2
    645c:	bl	0 <strcmp>
    6460:	mov	r3, r0
    6464:	cmp	r3, #0
    6468:	bne	6480 <eval_integer+0x2054>
    646c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6470:	add	r3, r3, #560	; 0x230
    6474:	ldrd	r2, [r3, #-8]
    6478:	sub	r1, fp, #380	; 0x17c
    647c:	strd	r2, [r1]
    6480:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6484:	ldr	r3, [r3]
    6488:	ldr	r0, [r3]
    648c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    6490:	ldr	r1, [r3, #12]
    6494:	sub	r3, fp, #380	; 0x17c
    6498:	ldrd	r2, [r3]
    649c:	sub	r3, fp, #372	; 0x174
    64a0:	bl	0 <coda_product_variable_get_pointer>
    64a4:	mov	r3, r0
    64a8:	cmp	r3, #0
    64ac:	beq	64b8 <eval_integer+0x208c>
    64b0:	mvn	r3, #0
    64b4:	b	6654 <eval_integer+0x2228>
    64b8:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    64bc:	ldrd	r2, [r3]
    64c0:	ldr	r1, [fp, #-944]	; 0xfffffc50
    64c4:	strd	r2, [r1]
    64c8:	b	6650 <eval_integer+0x2224>
    64cc:	ldr	r3, [fp, #-936]	; 0xfffffc58
    64d0:	ldr	r3, [r3]
    64d4:	cmp	r3, #0
    64d8:	bne	64f0 <eval_integer+0x20c4>
    64dc:	ldr	r3, [pc, #-3912]	; 559c <eval_integer+0x1170>
    64e0:	ldr	r2, [pc, #-3912]	; 55a0 <eval_integer+0x1174>
    64e4:	ldr	r1, [pc, #-3908]	; 55a8 <eval_integer+0x117c>
    64e8:	ldr	r0, [pc, #-3916]	; 55a4 <eval_integer+0x1178>
    64ec:	bl	0 <__assert_fail>
    64f0:	ldr	r3, [fp, #-936]	; 0xfffffc58
    64f4:	sub	r0, fp, #900	; 0x384
    64f8:	add	r3, r3, #8
    64fc:	mov	r2, #520	; 0x208
    6500:	mov	r1, r3
    6504:	bl	0 <memcpy>
    6508:	ldr	r3, [fp, #-40]	; 0xffffffd8
    650c:	ldr	r3, [r3, #16]
    6510:	mov	r1, r3
    6514:	ldr	r0, [fp, #-936]	; 0xfffffc58
    6518:	bl	9098 <eval_cursor>
    651c:	mov	r3, r0
    6520:	cmp	r3, #0
    6524:	beq	6530 <eval_integer+0x2104>
    6528:	mvn	r3, #0
    652c:	b	6654 <eval_integer+0x2228>
    6530:	ldr	r3, [fp, #-40]	; 0xffffffd8
    6534:	ldr	r3, [r3, #20]
    6538:	ldr	r2, [fp, #-944]	; 0xfffffc50
    653c:	mov	r1, r3
    6540:	ldr	r0, [fp, #-936]	; 0xfffffc58
    6544:	bl	442c <eval_integer>
    6548:	mov	r3, r0
    654c:	cmp	r3, #0
    6550:	beq	655c <eval_integer+0x2130>
    6554:	mvn	r3, #0
    6558:	b	6654 <eval_integer+0x2228>
    655c:	ldr	r3, [fp, #-936]	; 0xfffffc58
    6560:	add	r3, r3, #8
    6564:	sub	r1, fp, #900	; 0x384
    6568:	mov	r2, #520	; 0x208
    656c:	mov	r0, r3
    6570:	bl	0 <memcpy>
    6574:	b	6650 <eval_integer+0x2224>
    6578:	ldr	r3, [fp, #-40]	; 0xffffffd8
    657c:	ldr	r3, [r3, #12]
    6580:	ldrb	r3, [r3]
    6584:	sub	r3, r3, #105	; 0x69
    6588:	str	r3, [fp, #-60]	; 0xffffffc4
    658c:	ldr	r2, [fp, #-936]	; 0xfffffc58
    6590:	ldr	r3, [fp, #-60]	; 0xffffffc4
    6594:	add	r3, r3, #66	; 0x42
    6598:	lsl	r3, r3, #3
    659c:	add	r3, r2, r3
    65a0:	ldrd	r2, [r3]
    65a4:	strd	r2, [fp, #-68]	; 0xffffffbc
    65a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    65ac:	ldr	r1, [r3, #16]
    65b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    65b4:	add	r3, r3, #66	; 0x42
    65b8:	lsl	r3, r3, #3
    65bc:	ldr	r2, [fp, #-936]	; 0xfffffc58
    65c0:	add	r3, r2, r3
    65c4:	mov	r2, r3
    65c8:	ldr	r0, [fp, #-936]	; 0xfffffc58
    65cc:	bl	442c <eval_integer>
    65d0:	mov	r3, r0
    65d4:	cmp	r3, #0
    65d8:	beq	65e4 <eval_integer+0x21b8>
    65dc:	mvn	r3, #0
    65e0:	b	6654 <eval_integer+0x2228>
    65e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    65e8:	ldr	r3, [r3, #20]
    65ec:	ldr	r2, [fp, #-944]	; 0xfffffc50
    65f0:	mov	r1, r3
    65f4:	ldr	r0, [fp, #-936]	; 0xfffffc58
    65f8:	bl	442c <eval_integer>
    65fc:	mov	r3, r0
    6600:	cmp	r3, #0
    6604:	beq	6610 <eval_integer+0x21e4>
    6608:	mvn	r3, #0
    660c:	b	6654 <eval_integer+0x2228>
    6610:	ldr	r2, [fp, #-936]	; 0xfffffc58
    6614:	ldr	r3, [fp, #-60]	; 0xffffffc4
    6618:	add	r3, r3, #66	; 0x42
    661c:	lsl	r3, r3, #3
    6620:	add	r1, r2, r3
    6624:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    6628:	strd	r2, [r1]
    662c:	b	6650 <eval_integer+0x2224>
    6630:	ldr	r3, [pc, #40]	; 6660 <eval_integer+0x2234>
    6634:	ldr	r2, [pc, #40]	; 6664 <eval_integer+0x2238>
    6638:	ldr	r1, [pc, #40]	; 6668 <eval_integer+0x223c>
    663c:	ldr	r0, [pc, #40]	; 666c <eval_integer+0x2240>
    6640:	bl	0 <__assert_fail>
    6644:	nop			; (mov r0, r0)
    6648:	b	6650 <eval_integer+0x2224>
    664c:	nop			; (mov r0, r0)
    6650:	mov	r3, #0
    6654:	mov	r0, r3
    6658:	sub	sp, fp, #12
    665c:	pop	{r4, r5, fp, pc}
    6660:	.word	0x00000ec8
    6664:	.word	0x00000b07
    6668:	.word	0x00000024
    666c:	.word	0x000000a4

00006670 <eval_string>:
    6670:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    6674:	add	fp, sp, #28
    6678:	sub	sp, sp, #912	; 0x390
    667c:	str	r0, [fp, #-904]	; 0xfffffc78
    6680:	str	r1, [fp, #-908]	; 0xfffffc74
    6684:	str	r2, [fp, #-912]	; 0xfffffc70
    6688:	str	r3, [fp, #-916]	; 0xfffffc6c
    668c:	ldr	r3, [fp, #-908]	; 0xfffffc74
    6690:	ldr	r3, [r3]
    6694:	cmp	r3, #22
    6698:	beq	66ac <eval_string+0x3c>
    669c:	ldr	r3, [fp, #-908]	; 0xfffffc74
    66a0:	ldr	r3, [r3]
    66a4:	cmp	r3, #21
    66a8:	bne	6760 <eval_string+0xf0>
    66ac:	ldr	r3, [fp, #-912]	; 0xfffffc70
    66b0:	mov	r2, #0
    66b4:	str	r2, [r3]
    66b8:	ldr	r3, [fp, #-908]	; 0xfffffc74
    66bc:	ldr	r2, [r3, #12]
    66c0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    66c4:	str	r2, [r3]
    66c8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    66cc:	ldr	r3, [r3]
    66d0:	cmp	r3, #0
    66d4:	ble	674c <eval_string+0xdc>
    66d8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    66dc:	ldr	r3, [r3]
    66e0:	add	r3, r3, #1
    66e4:	mov	r0, r3
    66e8:	bl	0 <malloc>
    66ec:	mov	r3, r0
    66f0:	mov	r2, r3
    66f4:	ldr	r3, [fp, #4]
    66f8:	str	r2, [r3]
    66fc:	ldr	r3, [fp, #4]
    6700:	ldr	r3, [r3]
    6704:	cmp	r3, #0
    6708:	bne	6728 <eval_string+0xb8>
    670c:	ldr	r3, [pc, #3920]	; 7664 <eval_string+0xff4>
    6710:	ldr	r2, [pc, #3920]	; 7668 <eval_string+0xff8>
    6714:	ldr	r1, [pc, #3920]	; 766c <eval_string+0xffc>
    6718:	mvn	r0, #0
    671c:	bl	0 <coda_set_error>
    6720:	mvn	r3, #0
    6724:	b	8be8 <eval_string+0x2578>
    6728:	ldr	r3, [fp, #4]
    672c:	ldr	r0, [r3]
    6730:	ldr	r3, [fp, #-908]	; 0xfffffc74
    6734:	ldr	r1, [r3, #16]
    6738:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    673c:	ldr	r3, [r3]
    6740:	mov	r2, r3
    6744:	bl	0 <memcpy>
    6748:	b	6758 <eval_string+0xe8>
    674c:	ldr	r3, [fp, #4]
    6750:	mov	r2, #0
    6754:	str	r2, [r3]
    6758:	mov	r3, #0
    675c:	b	8be8 <eval_string+0x2578>
    6760:	ldr	r3, [fp, #-908]	; 0xfffffc74
    6764:	str	r3, [fp, #-56]	; 0xffffffc8
    6768:	ldr	r3, [fp, #-56]	; 0xffffffc8
    676c:	ldr	r3, [r3]
    6770:	sub	r3, r3, #1
    6774:	cmp	r3, #85	; 0x55
    6778:	ldrls	pc, [pc, r3, lsl #2]
    677c:	b	8b74 <eval_string+0x2504>
    6780:	.word	0x00006e94
    6784:	.word	0x00008b74
    6788:	.word	0x00007754
    678c:	.word	0x00008b74
    6790:	.word	0x00008b74
    6794:	.word	0x00008b74
    6798:	.word	0x00008b74
    679c:	.word	0x00007c00
    67a0:	.word	0x000079cc
    67a4:	.word	0x00008b74
    67a8:	.word	0x00008a00
    67ac:	.word	0x00008b74
    67b0:	.word	0x00008b74
    67b4:	.word	0x00008b74
    67b8:	.word	0x00008b74
    67bc:	.word	0x00006b78
    67c0:	.word	0x00008b74
    67c4:	.word	0x00008b74
    67c8:	.word	0x00008b74
    67cc:	.word	0x00008b74
    67d0:	.word	0x00008b74
    67d4:	.word	0x00008b74
    67d8:	.word	0x00008b74
    67dc:	.word	0x00008b74
    67e0:	.word	0x00008b74
    67e4:	.word	0x00008b74
    67e8:	.word	0x00008b74
    67ec:	.word	0x00007edc
    67f0:	.word	0x00008b74
    67f4:	.word	0x00008b74
    67f8:	.word	0x00008b74
    67fc:	.word	0x00008b74
    6800:	.word	0x00008b74
    6804:	.word	0x00008b74
    6808:	.word	0x00008b74
    680c:	.word	0x00008b74
    6810:	.word	0x00008b74
    6814:	.word	0x00008b74
    6818:	.word	0x00008b74
    681c:	.word	0x00008b74
    6820:	.word	0x00008b74
    6824:	.word	0x00007e3c
    6828:	.word	0x00008b74
    682c:	.word	0x00008b74
    6830:	.word	0x00008b74
    6834:	.word	0x00008b74
    6838:	.word	0x00008b74
    683c:	.word	0x00008b74
    6840:	.word	0x00008b74
    6844:	.word	0x00008b74
    6848:	.word	0x00008b74
    684c:	.word	0x00008b74
    6850:	.word	0x00008b74
    6854:	.word	0x00008b74
    6858:	.word	0x00007494
    685c:	.word	0x00007178
    6860:	.word	0x00007044
    6864:	.word	0x00008b74
    6868:	.word	0x00008b74
    686c:	.word	0x00008b74
    6870:	.word	0x00008b74
    6874:	.word	0x00008b74
    6878:	.word	0x00008b74
    687c:	.word	0x00008b74
    6880:	.word	0x00008b74
    6884:	.word	0x00008b74
    6888:	.word	0x000084ac
    688c:	.word	0x000085bc
    6890:	.word	0x000086d8
    6894:	.word	0x00008b74
    6898:	.word	0x00008024
    689c:	.word	0x00008b74
    68a0:	.word	0x00007530
    68a4:	.word	0x00008b74
    68a8:	.word	0x000068d8
    68ac:	.word	0x000087ec
    68b0:	.word	0x000072ac
    68b4:	.word	0x00008b74
    68b8:	.word	0x00008b74
    68bc:	.word	0x000075c8
    68c0:	.word	0x00008b74
    68c4:	.word	0x00008b74
    68c8:	.word	0x00008b74
    68cc:	.word	0x00008b74
    68d0:	.word	0x00008b74
    68d4:	.word	0x00008ab4
    68d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    68dc:	ldr	r3, [r3, #16]
    68e0:	ldr	r3, [r3, #4]
    68e4:	cmp	r3, #4
    68e8:	bne	6ac8 <eval_string+0x458>
    68ec:	ldr	r3, [fp, #-904]	; 0xfffffc78
    68f0:	ldr	r3, [r3]
    68f4:	cmp	r3, #0
    68f8:	bne	6910 <eval_string+0x2a0>
    68fc:	ldr	r3, [pc, #3540]	; 76d8 <eval_string+0x1068>
    6900:	ldr	r2, [pc, #3432]	; 7670 <eval_string+0x1000>
    6904:	ldr	r1, [pc, #3420]	; 7668 <eval_string+0xff8>
    6908:	ldr	r0, [pc, #3536]	; 76e0 <eval_string+0x1070>
    690c:	bl	0 <__assert_fail>
    6910:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6914:	sub	r0, fp, #900	; 0x384
    6918:	add	r3, r3, #8
    691c:	mov	r2, #520	; 0x208
    6920:	mov	r1, r3
    6924:	bl	0 <memcpy>
    6928:	ldr	r3, [fp, #-56]	; 0xffffffc8
    692c:	ldr	r3, [r3, #16]
    6930:	mov	r1, r3
    6934:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6938:	bl	9098 <eval_cursor>
    693c:	mov	r3, r0
    6940:	cmp	r3, #0
    6944:	beq	6950 <eval_string+0x2e0>
    6948:	mvn	r3, #0
    694c:	b	8be8 <eval_string+0x2578>
    6950:	ldr	r3, [fp, #-912]	; 0xfffffc70
    6954:	mov	r2, #0
    6958:	str	r2, [r3]
    695c:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6960:	add	r3, r3, #8
    6964:	ldr	r1, [fp, #-916]	; 0xfffffc6c
    6968:	mov	r0, r3
    696c:	bl	0 <coda_cursor_get_string_length>
    6970:	mov	r3, r0
    6974:	cmp	r3, #0
    6978:	beq	6984 <eval_string+0x314>
    697c:	mvn	r3, #0
    6980:	b	8be8 <eval_string+0x2578>
    6984:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6988:	ldr	r3, [r3, #20]
    698c:	cmp	r3, #0
    6990:	beq	69ec <eval_string+0x37c>
    6994:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6998:	ldr	r3, [r3, #20]
    699c:	sub	r2, fp, #92	; 0x5c
    69a0:	mov	r1, r3
    69a4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    69a8:	bl	442c <eval_integer>
    69ac:	mov	r3, r0
    69b0:	cmp	r3, #0
    69b4:	beq	69c0 <eval_string+0x350>
    69b8:	mvn	r3, #0
    69bc:	b	8be8 <eval_string+0x2578>
    69c0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    69c4:	ldr	r3, [r3]
    69c8:	mov	r2, r3
    69cc:	asr	r3, r2, #31
    69d0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
    69d4:	cmp	r0, r2
    69d8:	sbcs	r3, r1, r3
    69dc:	bge	69ec <eval_string+0x37c>
    69e0:	ldrd	r2, [fp, #-92]	; 0xffffffa4
    69e4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    69e8:	str	r2, [r3]
    69ec:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    69f0:	ldr	r3, [r3]
    69f4:	cmp	r3, #0
    69f8:	ble	6aa0 <eval_string+0x430>
    69fc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6a00:	ldr	r3, [r3]
    6a04:	add	r3, r3, #1
    6a08:	mov	r0, r3
    6a0c:	bl	0 <malloc>
    6a10:	mov	r3, r0
    6a14:	mov	r2, r3
    6a18:	ldr	r3, [fp, #4]
    6a1c:	str	r2, [r3]
    6a20:	ldr	r3, [fp, #4]
    6a24:	ldr	r3, [r3]
    6a28:	cmp	r3, #0
    6a2c:	bne	6a58 <eval_string+0x3e8>
    6a30:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6a34:	ldr	r2, [r3]
    6a38:	ldr	r3, [pc, #3124]	; 7674 <eval_string+0x1004>
    6a3c:	str	r3, [sp]
    6a40:	ldr	r3, [pc, #3104]	; 7668 <eval_string+0xff8>
    6a44:	ldr	r1, [pc, #3232]	; 76ec <eval_string+0x107c>
    6a48:	mvn	r0, #0
    6a4c:	bl	0 <coda_set_error>
    6a50:	mvn	r3, #0
    6a54:	b	8be8 <eval_string+0x2578>
    6a58:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6a5c:	add	r0, r3, #8
    6a60:	ldr	r3, [fp, #4]
    6a64:	ldr	r1, [r3]
    6a68:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6a6c:	ldr	r3, [r3]
    6a70:	add	r3, r3, #1
    6a74:	mov	r2, r3
    6a78:	bl	0 <coda_cursor_read_string>
    6a7c:	mov	r3, r0
    6a80:	cmp	r3, #0
    6a84:	beq	6aac <eval_string+0x43c>
    6a88:	ldr	r3, [fp, #4]
    6a8c:	ldr	r3, [r3]
    6a90:	mov	r0, r3
    6a94:	bl	0 <free>
    6a98:	mvn	r3, #0
    6a9c:	b	8be8 <eval_string+0x2578>
    6aa0:	ldr	r3, [fp, #4]
    6aa4:	mov	r2, #0
    6aa8:	str	r2, [r3]
    6aac:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6ab0:	add	r3, r3, #8
    6ab4:	sub	r1, fp, #900	; 0x384
    6ab8:	mov	r2, #520	; 0x208
    6abc:	mov	r0, r3
    6ac0:	bl	0 <memcpy>
    6ac4:	b	8be4 <eval_string+0x2574>
    6ac8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6acc:	ldr	r3, [r3, #16]
    6ad0:	sub	r2, fp, #100	; 0x64
    6ad4:	mov	r1, r3
    6ad8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6adc:	bl	442c <eval_integer>
    6ae0:	mov	r3, r0
    6ae4:	cmp	r3, #0
    6ae8:	beq	6af4 <eval_string+0x484>
    6aec:	mvn	r3, #0
    6af0:	b	8be8 <eval_string+0x2578>
    6af4:	ldrd	r0, [fp, #-100]	; 0xffffff9c
    6af8:	sub	r3, fp, #124	; 0x7c
    6afc:	mov	r2, r3
    6b00:	bl	0 <coda_str64>
    6b04:	sub	r3, fp, #124	; 0x7c
    6b08:	mov	r0, r3
    6b0c:	bl	0 <strdup>
    6b10:	mov	r3, r0
    6b14:	mov	r2, r3
    6b18:	ldr	r3, [fp, #4]
    6b1c:	str	r2, [r3]
    6b20:	ldr	r3, [fp, #4]
    6b24:	ldr	r3, [r3]
    6b28:	cmp	r3, #0
    6b2c:	bne	6b4c <eval_string+0x4dc>
    6b30:	ldr	r3, [pc, #2880]	; 7678 <eval_string+0x1008>
    6b34:	ldr	r2, [pc, #2860]	; 7668 <eval_string+0xff8>
    6b38:	ldr	r1, [pc, #2860]	; 766c <eval_string+0xffc>
    6b3c:	mvn	r0, #0
    6b40:	bl	0 <coda_set_error>
    6b44:	mvn	r3, #0
    6b48:	b	8be8 <eval_string+0x2578>
    6b4c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    6b50:	mov	r2, #0
    6b54:	str	r2, [r3]
    6b58:	sub	r3, fp, #124	; 0x7c
    6b5c:	mov	r0, r3
    6b60:	bl	0 <strlen>
    6b64:	mov	r3, r0
    6b68:	mov	r2, r3
    6b6c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6b70:	str	r2, [r3]
    6b74:	b	8be4 <eval_string+0x2574>
    6b78:	mov	r2, #0
    6b7c:	mov	r3, #0
    6b80:	strd	r2, [fp, #-132]	; 0xffffff7c
    6b84:	mvn	r2, #0
    6b88:	mvn	r3, #0
    6b8c:	strd	r2, [fp, #-148]	; 0xffffff6c
    6b90:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6b94:	ldr	r3, [r3]
    6b98:	cmp	r3, #0
    6b9c:	bne	6bb4 <eval_string+0x544>
    6ba0:	ldr	r3, [pc, #2864]	; 76d8 <eval_string+0x1068>
    6ba4:	ldr	r2, [pc, #2768]	; 767c <eval_string+0x100c>
    6ba8:	ldr	r1, [pc, #2744]	; 7668 <eval_string+0xff8>
    6bac:	ldr	r0, [pc, #2860]	; 76e0 <eval_string+0x1070>
    6bb0:	bl	0 <__assert_fail>
    6bb4:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6bb8:	sub	r0, fp, #900	; 0x384
    6bbc:	add	r3, r3, #8
    6bc0:	mov	r2, #520	; 0x208
    6bc4:	mov	r1, r3
    6bc8:	bl	0 <memcpy>
    6bcc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6bd0:	ldr	r3, [r3, #16]
    6bd4:	mov	r1, r3
    6bd8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6bdc:	bl	9098 <eval_cursor>
    6be0:	mov	r3, r0
    6be4:	cmp	r3, #0
    6be8:	beq	6bf4 <eval_string+0x584>
    6bec:	mvn	r3, #0
    6bf0:	b	8be8 <eval_string+0x2578>
    6bf4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6bf8:	ldr	r3, [r3, #24]
    6bfc:	cmp	r3, #0
    6c00:	beq	6c84 <eval_string+0x614>
    6c04:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6c08:	ldr	r3, [r3, #20]
    6c0c:	sub	r2, fp, #132	; 0x84
    6c10:	mov	r1, r3
    6c14:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6c18:	bl	442c <eval_integer>
    6c1c:	mov	r3, r0
    6c20:	cmp	r3, #0
    6c24:	beq	6c30 <eval_string+0x5c0>
    6c28:	mvn	r3, #0
    6c2c:	b	8be8 <eval_string+0x2578>
    6c30:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6c34:	ldr	r3, [r3, #24]
    6c38:	sub	r2, fp, #140	; 0x8c
    6c3c:	mov	r1, r3
    6c40:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6c44:	bl	442c <eval_integer>
    6c48:	mov	r3, r0
    6c4c:	cmp	r3, #0
    6c50:	beq	6c5c <eval_string+0x5ec>
    6c54:	mvn	r3, #0
    6c58:	b	8be8 <eval_string+0x2578>
    6c5c:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6c60:	cmp	r2, #1
    6c64:	sbcs	r3, r3, #0
    6c68:	blt	6d14 <eval_string+0x6a4>
    6c6c:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6c70:	lsl	r9, r3, #3
    6c74:	orr	r9, r9, r2, lsr #29
    6c78:	lsl	r8, r2, #3
    6c7c:	strd	r8, [fp, #-148]	; 0xffffff6c
    6c80:	b	6d14 <eval_string+0x6a4>
    6c84:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6c88:	ldr	r3, [r3, #20]
    6c8c:	cmp	r3, #0
    6c90:	beq	6ce8 <eval_string+0x678>
    6c94:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6c98:	ldr	r3, [r3, #20]
    6c9c:	sub	r2, fp, #140	; 0x8c
    6ca0:	mov	r1, r3
    6ca4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6ca8:	bl	442c <eval_integer>
    6cac:	mov	r3, r0
    6cb0:	cmp	r3, #0
    6cb4:	beq	6cc0 <eval_string+0x650>
    6cb8:	mvn	r3, #0
    6cbc:	b	8be8 <eval_string+0x2578>
    6cc0:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6cc4:	cmp	r2, #1
    6cc8:	sbcs	r3, r3, #0
    6ccc:	blt	6d14 <eval_string+0x6a4>
    6cd0:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6cd4:	lsl	r7, r3, #3
    6cd8:	orr	r7, r7, r2, lsr #29
    6cdc:	lsl	r6, r2, #3
    6ce0:	strd	r6, [fp, #-148]	; 0xffffff6c
    6ce4:	b	6d14 <eval_string+0x6a4>
    6ce8:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6cec:	add	r3, r3, #8
    6cf0:	sub	r2, fp, #148	; 0x94
    6cf4:	mov	r1, r2
    6cf8:	mov	r0, r3
    6cfc:	bl	0 <coda_cursor_get_bit_size>
    6d00:	mov	r3, r0
    6d04:	cmp	r3, #0
    6d08:	beq	6d14 <eval_string+0x6a4>
    6d0c:	mvn	r3, #0
    6d10:	b	8be8 <eval_string+0x2578>
    6d14:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    6d18:	cmp	r2, #0
    6d1c:	sbcs	r3, r3, #0
    6d20:	bge	6d38 <eval_string+0x6c8>
    6d24:	ldr	r1, [pc, #2388]	; 7680 <eval_string+0x1010>
    6d28:	mvn	r0, #400	; 0x190
    6d2c:	bl	0 <coda_set_error>
    6d30:	mvn	r3, #0
    6d34:	b	8be8 <eval_string+0x2578>
    6d38:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    6d3c:	lsr	r4, r2, #3
    6d40:	orr	r4, r4, r3, lsl #29
    6d44:	asr	r5, r3, #3
    6d48:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    6d4c:	mov	r0, #7
    6d50:	mov	r1, #0
    6d54:	and	r2, r2, r0
    6d58:	and	r3, r3, r1
    6d5c:	orrs	r3, r2, r3
    6d60:	beq	6d70 <eval_string+0x700>
    6d64:	mov	r2, #1
    6d68:	mov	r3, #0
    6d6c:	b	6d78 <eval_string+0x708>
    6d70:	mov	r2, #0
    6d74:	mov	r3, #0
    6d78:	adds	r2, r2, r4
    6d7c:	adc	r3, r3, r5
    6d80:	strd	r2, [fp, #-140]	; 0xffffff74
    6d84:	ldr	r3, [fp, #-912]	; 0xfffffc70
    6d88:	mov	r2, #0
    6d8c:	str	r2, [r3]
    6d90:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6d94:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6d98:	str	r2, [r3]
    6d9c:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6da0:	cmp	r2, #1
    6da4:	sbcs	r3, r3, #0
    6da8:	blt	6e6c <eval_string+0x7fc>
    6dac:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6db0:	mov	r3, r2
    6db4:	add	r3, r3, #1
    6db8:	mov	r0, r3
    6dbc:	bl	0 <malloc>
    6dc0:	mov	r3, r0
    6dc4:	mov	r2, r3
    6dc8:	ldr	r3, [fp, #4]
    6dcc:	str	r2, [r3]
    6dd0:	ldr	r3, [fp, #4]
    6dd4:	ldr	r3, [r3]
    6dd8:	cmp	r3, #0
    6ddc:	bne	6e04 <eval_string+0x794>
    6de0:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6de4:	ldr	r3, [pc, #2200]	; 7684 <eval_string+0x1014>
    6de8:	str	r3, [sp]
    6dec:	ldr	r3, [pc, #2164]	; 7668 <eval_string+0xff8>
    6df0:	ldr	r1, [pc, #2292]	; 76ec <eval_string+0x107c>
    6df4:	mvn	r0, #0
    6df8:	bl	0 <coda_set_error>
    6dfc:	mvn	r3, #0
    6e00:	b	8be8 <eval_string+0x2578>
    6e04:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6e08:	add	r0, r3, #8
    6e0c:	ldr	r3, [fp, #4]
    6e10:	ldr	r1, [r3]
    6e14:	ldrd	r2, [fp, #-132]	; 0xffffff7c
    6e18:	lsl	ip, r3, #3
    6e1c:	str	ip, [fp, #-920]	; 0xfffffc68
    6e20:	ldr	ip, [fp, #-920]	; 0xfffffc68
    6e24:	orr	ip, ip, r2, lsr #29
    6e28:	str	ip, [fp, #-920]	; 0xfffffc68
    6e2c:	lsl	r3, r2, #3
    6e30:	str	r3, [fp, #-924]	; 0xfffffc64
    6e34:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    6e38:	strd	r2, [sp]
    6e3c:	sub	r3, fp, #924	; 0x39c
    6e40:	ldrd	r2, [r3]
    6e44:	bl	0 <coda_cursor_read_bits>
    6e48:	mov	r3, r0
    6e4c:	cmp	r3, #0
    6e50:	beq	6e78 <eval_string+0x808>
    6e54:	ldr	r3, [fp, #4]
    6e58:	ldr	r3, [r3]
    6e5c:	mov	r0, r3
    6e60:	bl	0 <free>
    6e64:	mvn	r3, #0
    6e68:	b	8be8 <eval_string+0x2578>
    6e6c:	ldr	r3, [fp, #4]
    6e70:	mov	r2, #0
    6e74:	str	r2, [r3]
    6e78:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6e7c:	add	r3, r3, #8
    6e80:	sub	r1, fp, #900	; 0x384
    6e84:	mov	r2, #520	; 0x208
    6e88:	mov	r0, r3
    6e8c:	bl	0 <memcpy>
    6e90:	b	8be4 <eval_string+0x2574>
    6e94:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6e98:	ldr	r1, [r3, #16]
    6e9c:	sub	r0, fp, #160	; 0xa0
    6ea0:	sub	r2, fp, #152	; 0x98
    6ea4:	sub	r3, fp, #168	; 0xa8
    6ea8:	str	r3, [sp]
    6eac:	mov	r3, r0
    6eb0:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6eb4:	bl	6670 <eval_string>
    6eb8:	mov	r3, r0
    6ebc:	cmp	r3, #0
    6ec0:	beq	6ecc <eval_string+0x85c>
    6ec4:	mvn	r3, #0
    6ec8:	b	8be8 <eval_string+0x2578>
    6ecc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6ed0:	ldr	r1, [r3, #20]
    6ed4:	sub	r0, fp, #164	; 0xa4
    6ed8:	sub	r2, fp, #156	; 0x9c
    6edc:	sub	r3, fp, #172	; 0xac
    6ee0:	str	r3, [sp]
    6ee4:	mov	r3, r0
    6ee8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6eec:	bl	6670 <eval_string>
    6ef0:	mov	r3, r0
    6ef4:	cmp	r3, #0
    6ef8:	beq	6f10 <eval_string+0x8a0>
    6efc:	ldr	r3, [fp, #-168]	; 0xffffff58
    6f00:	mov	r0, r3
    6f04:	bl	0 <free>
    6f08:	mvn	r3, #0
    6f0c:	b	8be8 <eval_string+0x2578>
    6f10:	ldr	r3, [fp, #-912]	; 0xfffffc70
    6f14:	mov	r2, #0
    6f18:	str	r2, [r3]
    6f1c:	ldr	r2, [fp, #-160]	; 0xffffff60
    6f20:	ldr	r3, [fp, #-164]	; 0xffffff5c
    6f24:	add	r2, r2, r3
    6f28:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6f2c:	str	r2, [r3]
    6f30:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6f34:	ldr	r3, [r3]
    6f38:	cmp	r3, #0
    6f3c:	ble	7004 <eval_string+0x994>
    6f40:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6f44:	ldr	r3, [r3]
    6f48:	add	r3, r3, #1
    6f4c:	mov	r0, r3
    6f50:	bl	0 <malloc>
    6f54:	mov	r3, r0
    6f58:	mov	r2, r3
    6f5c:	ldr	r3, [fp, #4]
    6f60:	str	r2, [r3]
    6f64:	ldr	r3, [fp, #4]
    6f68:	ldr	r3, [r3]
    6f6c:	cmp	r3, #0
    6f70:	bne	6fa0 <eval_string+0x930>
    6f74:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6f78:	ldr	r3, [r3]
    6f7c:	add	r2, r3, #1
    6f80:	ldr	r3, [pc, #1792]	; 7688 <eval_string+0x1018>
    6f84:	str	r3, [sp]
    6f88:	ldr	r3, [pc, #1752]	; 7668 <eval_string+0xff8>
    6f8c:	ldr	r1, [pc, #1880]	; 76ec <eval_string+0x107c>
    6f90:	mvn	r0, #0
    6f94:	bl	0 <coda_set_error>
    6f98:	mvn	r3, #0
    6f9c:	b	8be8 <eval_string+0x2578>
    6fa0:	ldr	r3, [fp, #-160]	; 0xffffff60
    6fa4:	cmp	r3, #0
    6fa8:	ble	6fcc <eval_string+0x95c>
    6fac:	ldr	r3, [fp, #4]
    6fb0:	ldr	r0, [r3]
    6fb4:	ldr	r3, [fp, #-168]	; 0xffffff58
    6fb8:	ldr	r2, [fp, #-152]	; 0xffffff68
    6fbc:	add	r3, r3, r2
    6fc0:	ldr	r2, [fp, #-160]	; 0xffffff60
    6fc4:	mov	r1, r3
    6fc8:	bl	0 <memcpy>
    6fcc:	ldr	r3, [fp, #-164]	; 0xffffff5c
    6fd0:	cmp	r3, #0
    6fd4:	ble	7010 <eval_string+0x9a0>
    6fd8:	ldr	r3, [fp, #4]
    6fdc:	ldr	r3, [r3]
    6fe0:	ldr	r2, [fp, #-160]	; 0xffffff60
    6fe4:	add	r0, r3, r2
    6fe8:	ldr	r3, [fp, #-172]	; 0xffffff54
    6fec:	ldr	r2, [fp, #-156]	; 0xffffff64
    6ff0:	add	r3, r3, r2
    6ff4:	ldr	r2, [fp, #-164]	; 0xffffff5c
    6ff8:	mov	r1, r3
    6ffc:	bl	0 <memcpy>
    7000:	b	7010 <eval_string+0x9a0>
    7004:	ldr	r3, [fp, #4]
    7008:	mov	r2, #0
    700c:	str	r2, [r3]
    7010:	ldr	r3, [fp, #-160]	; 0xffffff60
    7014:	cmp	r3, #0
    7018:	ble	7028 <eval_string+0x9b8>
    701c:	ldr	r3, [fp, #-168]	; 0xffffff58
    7020:	mov	r0, r3
    7024:	bl	0 <free>
    7028:	ldr	r3, [fp, #-164]	; 0xffffff5c
    702c:	cmp	r3, #0
    7030:	ble	8b88 <eval_string+0x2518>
    7034:	ldr	r3, [fp, #-172]	; 0xffffff54
    7038:	mov	r0, r3
    703c:	bl	0 <free>
    7040:	b	8b88 <eval_string+0x2518>
    7044:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7048:	ldr	r1, [r3, #16]
    704c:	sub	r0, fp, #184	; 0xb8
    7050:	sub	r2, fp, #176	; 0xb0
    7054:	sub	r3, fp, #192	; 0xc0
    7058:	str	r3, [sp]
    705c:	mov	r3, r0
    7060:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7064:	bl	6670 <eval_string>
    7068:	mov	r3, r0
    706c:	cmp	r3, #0
    7070:	beq	707c <eval_string+0xa0c>
    7074:	mvn	r3, #0
    7078:	b	8be8 <eval_string+0x2578>
    707c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7080:	ldr	r1, [r3, #20]
    7084:	sub	r0, fp, #188	; 0xbc
    7088:	sub	r2, fp, #180	; 0xb4
    708c:	sub	r3, fp, #196	; 0xc4
    7090:	str	r3, [sp]
    7094:	mov	r3, r0
    7098:	ldr	r0, [fp, #-904]	; 0xfffffc78
    709c:	bl	6670 <eval_string>
    70a0:	mov	r3, r0
    70a4:	cmp	r3, #0
    70a8:	beq	70c0 <eval_string+0xa50>
    70ac:	ldr	r3, [fp, #-192]	; 0xffffff40
    70b0:	mov	r0, r3
    70b4:	bl	0 <free>
    70b8:	mvn	r3, #0
    70bc:	b	8be8 <eval_string+0x2578>
    70c0:	ldr	r0, [fp, #-176]	; 0xffffff50
    70c4:	ldr	r1, [fp, #-184]	; 0xffffff48
    70c8:	ldr	ip, [fp, #-192]	; 0xffffff40
    70cc:	ldr	lr, [fp, #-180]	; 0xffffff4c
    70d0:	ldr	r3, [fp, #-188]	; 0xffffff44
    70d4:	ldr	r2, [fp, #-196]	; 0xffffff3c
    70d8:	str	r2, [sp, #4]
    70dc:	str	r3, [sp]
    70e0:	mov	r3, lr
    70e4:	mov	r2, ip
    70e8:	bl	114 <compare_strings>
    70ec:	mov	r3, r0
    70f0:	cmp	r3, #0
    70f4:	bgt	7138 <eval_string+0xac8>
    70f8:	ldr	r2, [fp, #-176]	; 0xffffff50
    70fc:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7100:	str	r2, [r3]
    7104:	ldr	r2, [fp, #-184]	; 0xffffff48
    7108:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    710c:	str	r2, [r3]
    7110:	ldr	r2, [fp, #-192]	; 0xffffff40
    7114:	ldr	r3, [fp, #4]
    7118:	str	r2, [r3]
    711c:	ldr	r3, [fp, #-188]	; 0xffffff44
    7120:	cmp	r3, #0
    7124:	ble	8b90 <eval_string+0x2520>
    7128:	ldr	r3, [fp, #-196]	; 0xffffff3c
    712c:	mov	r0, r3
    7130:	bl	0 <free>
    7134:	b	8b90 <eval_string+0x2520>
    7138:	ldr	r2, [fp, #-180]	; 0xffffff4c
    713c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7140:	str	r2, [r3]
    7144:	ldr	r2, [fp, #-188]	; 0xffffff44
    7148:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    714c:	str	r2, [r3]
    7150:	ldr	r2, [fp, #-196]	; 0xffffff3c
    7154:	ldr	r3, [fp, #4]
    7158:	str	r2, [r3]
    715c:	ldr	r3, [fp, #-184]	; 0xffffff48
    7160:	cmp	r3, #0
    7164:	ble	8b90 <eval_string+0x2520>
    7168:	ldr	r3, [fp, #-192]	; 0xffffff40
    716c:	mov	r0, r3
    7170:	bl	0 <free>
    7174:	b	8b90 <eval_string+0x2520>
    7178:	ldr	r3, [fp, #-56]	; 0xffffffc8
    717c:	ldr	r1, [r3, #16]
    7180:	sub	r0, fp, #208	; 0xd0
    7184:	sub	r2, fp, #200	; 0xc8
    7188:	sub	r3, fp, #216	; 0xd8
    718c:	str	r3, [sp]
    7190:	mov	r3, r0
    7194:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7198:	bl	6670 <eval_string>
    719c:	mov	r3, r0
    71a0:	cmp	r3, #0
    71a4:	beq	71b0 <eval_string+0xb40>
    71a8:	mvn	r3, #0
    71ac:	b	8be8 <eval_string+0x2578>
    71b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    71b4:	ldr	r1, [r3, #20]
    71b8:	sub	r0, fp, #212	; 0xd4
    71bc:	sub	r2, fp, #204	; 0xcc
    71c0:	sub	r3, fp, #220	; 0xdc
    71c4:	str	r3, [sp]
    71c8:	mov	r3, r0
    71cc:	ldr	r0, [fp, #-904]	; 0xfffffc78
    71d0:	bl	6670 <eval_string>
    71d4:	mov	r3, r0
    71d8:	cmp	r3, #0
    71dc:	beq	71f4 <eval_string+0xb84>
    71e0:	ldr	r3, [fp, #-216]	; 0xffffff28
    71e4:	mov	r0, r3
    71e8:	bl	0 <free>
    71ec:	mvn	r3, #0
    71f0:	b	8be8 <eval_string+0x2578>
    71f4:	ldr	r0, [fp, #-200]	; 0xffffff38
    71f8:	ldr	r1, [fp, #-208]	; 0xffffff30
    71fc:	ldr	ip, [fp, #-216]	; 0xffffff28
    7200:	ldr	lr, [fp, #-204]	; 0xffffff34
    7204:	ldr	r3, [fp, #-212]	; 0xffffff2c
    7208:	ldr	r2, [fp, #-220]	; 0xffffff24
    720c:	str	r2, [sp, #4]
    7210:	str	r3, [sp]
    7214:	mov	r3, lr
    7218:	mov	r2, ip
    721c:	bl	114 <compare_strings>
    7220:	mov	r3, r0
    7224:	cmp	r3, #0
    7228:	blt	726c <eval_string+0xbfc>
    722c:	ldr	r2, [fp, #-200]	; 0xffffff38
    7230:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7234:	str	r2, [r3]
    7238:	ldr	r2, [fp, #-208]	; 0xffffff30
    723c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7240:	str	r2, [r3]
    7244:	ldr	r2, [fp, #-216]	; 0xffffff28
    7248:	ldr	r3, [fp, #4]
    724c:	str	r2, [r3]
    7250:	ldr	r3, [fp, #-212]	; 0xffffff2c
    7254:	cmp	r3, #0
    7258:	ble	8b98 <eval_string+0x2528>
    725c:	ldr	r3, [fp, #-220]	; 0xffffff24
    7260:	mov	r0, r3
    7264:	bl	0 <free>
    7268:	b	8b98 <eval_string+0x2528>
    726c:	ldr	r2, [fp, #-204]	; 0xffffff34
    7270:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7274:	str	r2, [r3]
    7278:	ldr	r2, [fp, #-212]	; 0xffffff2c
    727c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7280:	str	r2, [r3]
    7284:	ldr	r2, [fp, #-220]	; 0xffffff24
    7288:	ldr	r3, [fp, #4]
    728c:	str	r2, [r3]
    7290:	ldr	r3, [fp, #-208]	; 0xffffff30
    7294:	cmp	r3, #0
    7298:	ble	8b98 <eval_string+0x2528>
    729c:	ldr	r3, [fp, #-216]	; 0xffffff28
    72a0:	mov	r0, r3
    72a4:	bl	0 <free>
    72a8:	b	8b98 <eval_string+0x2528>
    72ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    72b0:	ldr	r3, [r3, #16]
    72b4:	sub	r2, fp, #228	; 0xe4
    72b8:	mov	r1, r3
    72bc:	ldr	r0, [fp, #-904]	; 0xfffffc78
    72c0:	bl	442c <eval_integer>
    72c4:	mov	r3, r0
    72c8:	cmp	r3, #0
    72cc:	beq	72d8 <eval_string+0xc68>
    72d0:	mvn	r3, #0
    72d4:	b	8be8 <eval_string+0x2578>
    72d8:	ldrd	r2, [fp, #-228]	; 0xffffff1c
    72dc:	cmp	r2, #0
    72e0:	sbcs	r3, r3, #0
    72e4:	bge	72fc <eval_string+0xc8c>
    72e8:	ldr	r1, [pc, #924]	; 768c <eval_string+0x101c>
    72ec:	mvn	r0, #400	; 0x190
    72f0:	bl	0 <coda_set_error>
    72f4:	mvn	r3, #0
    72f8:	b	8be8 <eval_string+0x2578>
    72fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7300:	ldr	r3, [r3, #20]
    7304:	sub	r2, fp, #236	; 0xec
    7308:	mov	r1, r3
    730c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7310:	bl	442c <eval_integer>
    7314:	mov	r3, r0
    7318:	cmp	r3, #0
    731c:	beq	7328 <eval_string+0xcb8>
    7320:	mvn	r3, #0
    7324:	b	8be8 <eval_string+0x2578>
    7328:	ldrd	r2, [fp, #-236]	; 0xffffff14
    732c:	orrs	r3, r2, r3
    7330:	bne	7360 <eval_string+0xcf0>
    7334:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7338:	mov	r2, #0
    733c:	str	r2, [r3]
    7340:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7344:	mov	r2, #0
    7348:	str	r2, [r3]
    734c:	ldr	r3, [fp, #4]
    7350:	mov	r2, #0
    7354:	str	r2, [r3]
    7358:	mov	r3, #0
    735c:	b	8be8 <eval_string+0x2578>
    7360:	ldrd	r2, [fp, #-236]	; 0xffffff14
    7364:	cmp	r2, #0
    7368:	sbcs	r3, r3, #0
    736c:	bge	7384 <eval_string+0xd14>
    7370:	ldr	r1, [pc, #792]	; 7690 <eval_string+0x1020>
    7374:	mvn	r0, #400	; 0x190
    7378:	bl	0 <coda_set_error>
    737c:	mvn	r3, #0
    7380:	b	8be8 <eval_string+0x2578>
    7384:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7388:	ldr	r1, [r3, #24]
    738c:	ldr	r3, [fp, #4]
    7390:	str	r3, [sp]
    7394:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7398:	ldr	r2, [fp, #-912]	; 0xfffffc70
    739c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    73a0:	bl	6670 <eval_string>
    73a4:	mov	r3, r0
    73a8:	cmp	r3, #0
    73ac:	beq	73b8 <eval_string+0xd48>
    73b0:	mvn	r3, #0
    73b4:	b	8be8 <eval_string+0x2578>
    73b8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    73bc:	ldr	r3, [r3]
    73c0:	cmp	r3, #0
    73c4:	bne	73d0 <eval_string+0xd60>
    73c8:	mov	r3, #0
    73cc:	b	8be8 <eval_string+0x2578>
    73d0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    73d4:	ldr	r3, [r3]
    73d8:	mov	r2, r3
    73dc:	asr	r3, r2, #31
    73e0:	ldrd	r0, [fp, #-228]	; 0xffffff1c
    73e4:	cmp	r0, r2
    73e8:	sbcs	r3, r1, r3
    73ec:	blt	742c <eval_string+0xdbc>
    73f0:	ldr	r3, [fp, #-912]	; 0xfffffc70
    73f4:	mov	r2, #0
    73f8:	str	r2, [r3]
    73fc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7400:	mov	r2, #0
    7404:	str	r2, [r3]
    7408:	ldr	r3, [fp, #4]
    740c:	ldr	r3, [r3]
    7410:	mov	r0, r3
    7414:	bl	0 <free>
    7418:	ldr	r3, [fp, #4]
    741c:	mov	r2, #0
    7420:	str	r2, [r3]
    7424:	mov	r3, #0
    7428:	b	8be8 <eval_string+0x2578>
    742c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7430:	ldr	r1, [r3]
    7434:	ldrd	r2, [fp, #-228]	; 0xffffff1c
    7438:	mov	r3, r2
    743c:	add	r2, r1, r3
    7440:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7444:	str	r2, [r3]
    7448:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    744c:	ldr	r1, [r3]
    7450:	ldrd	r2, [fp, #-228]	; 0xffffff1c
    7454:	mov	r3, r2
    7458:	sub	r2, r1, r3
    745c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7460:	str	r2, [r3]
    7464:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7468:	ldr	r3, [r3]
    746c:	mov	r2, r3
    7470:	asr	r3, r2, #31
    7474:	ldrd	r0, [fp, #-236]	; 0xffffff14
    7478:	cmp	r0, r2
    747c:	sbcs	r3, r1, r3
    7480:	bge	8ba0 <eval_string+0x2530>
    7484:	ldrd	r2, [fp, #-236]	; 0xffffff14
    7488:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    748c:	str	r2, [r3]
    7490:	b	8ba0 <eval_string+0x2530>
    7494:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7498:	ldr	r1, [r3, #16]
    749c:	ldr	r3, [fp, #4]
    74a0:	str	r3, [sp]
    74a4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    74a8:	ldr	r2, [fp, #-912]	; 0xfffffc70
    74ac:	ldr	r0, [fp, #-904]	; 0xfffffc78
    74b0:	bl	6670 <eval_string>
    74b4:	mov	r3, r0
    74b8:	cmp	r3, #0
    74bc:	beq	74f0 <eval_string+0xe80>
    74c0:	mvn	r3, #0
    74c4:	b	8be8 <eval_string+0x2578>
    74c8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    74cc:	ldr	r3, [r3]
    74d0:	sub	r2, r3, #1
    74d4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    74d8:	str	r2, [r3]
    74dc:	ldr	r3, [fp, #-912]	; 0xfffffc70
    74e0:	ldr	r3, [r3]
    74e4:	add	r2, r3, #1
    74e8:	ldr	r3, [fp, #-912]	; 0xfffffc70
    74ec:	str	r2, [r3]
    74f0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    74f4:	ldr	r3, [r3]
    74f8:	cmp	r3, #0
    74fc:	ble	8ba8 <eval_string+0x2538>
    7500:	ldr	r3, [fp, #4]
    7504:	ldr	r3, [r3]
    7508:	ldr	r2, [fp, #-912]	; 0xfffffc70
    750c:	ldr	r2, [r2]
    7510:	add	r3, r3, r2
    7514:	ldrb	r3, [r3]
    7518:	mov	r0, r3
    751c:	bl	b4 <iswhitespace>
    7520:	mov	r3, r0
    7524:	cmp	r3, #0
    7528:	bne	74c8 <eval_string+0xe58>
    752c:	b	8ba8 <eval_string+0x2538>
    7530:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7534:	ldr	r1, [r3, #16]
    7538:	ldr	r3, [fp, #4]
    753c:	str	r3, [sp]
    7540:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7544:	ldr	r2, [fp, #-912]	; 0xfffffc70
    7548:	ldr	r0, [fp, #-904]	; 0xfffffc78
    754c:	bl	6670 <eval_string>
    7550:	mov	r3, r0
    7554:	cmp	r3, #0
    7558:	beq	7578 <eval_string+0xf08>
    755c:	mvn	r3, #0
    7560:	b	8be8 <eval_string+0x2578>
    7564:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7568:	ldr	r3, [r3]
    756c:	sub	r2, r3, #1
    7570:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7574:	str	r2, [r3]
    7578:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    757c:	ldr	r3, [r3]
    7580:	cmp	r3, #0
    7584:	ble	8bb0 <eval_string+0x2540>
    7588:	ldr	r3, [fp, #4]
    758c:	ldr	r2, [r3]
    7590:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7594:	ldr	r1, [r3]
    7598:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    759c:	ldr	r3, [r3]
    75a0:	add	r3, r1, r3
    75a4:	sub	r3, r3, #1
    75a8:	add	r3, r2, r3
    75ac:	ldrb	r3, [r3]
    75b0:	mov	r0, r3
    75b4:	bl	b4 <iswhitespace>
    75b8:	mov	r3, r0
    75bc:	cmp	r3, #0
    75c0:	bne	7564 <eval_string+0xef4>
    75c4:	b	8bb0 <eval_string+0x2540>
    75c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    75cc:	ldr	r1, [r3, #16]
    75d0:	ldr	r3, [fp, #4]
    75d4:	str	r3, [sp]
    75d8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    75dc:	ldr	r2, [fp, #-912]	; 0xfffffc70
    75e0:	ldr	r0, [fp, #-904]	; 0xfffffc78
    75e4:	bl	6670 <eval_string>
    75e8:	mov	r3, r0
    75ec:	cmp	r3, #0
    75f0:	beq	7624 <eval_string+0xfb4>
    75f4:	mvn	r3, #0
    75f8:	b	8be8 <eval_string+0x2578>
    75fc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7600:	ldr	r3, [r3]
    7604:	sub	r2, r3, #1
    7608:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    760c:	str	r2, [r3]
    7610:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7614:	ldr	r3, [r3]
    7618:	add	r2, r3, #1
    761c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7620:	str	r2, [r3]
    7624:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7628:	ldr	r3, [r3]
    762c:	cmp	r3, #0
    7630:	ble	7704 <eval_string+0x1094>
    7634:	ldr	r3, [fp, #4]
    7638:	ldr	r3, [r3]
    763c:	ldr	r2, [fp, #-912]	; 0xfffffc70
    7640:	ldr	r2, [r2]
    7644:	add	r3, r3, r2
    7648:	ldrb	r3, [r3]
    764c:	mov	r0, r3
    7650:	bl	b4 <iswhitespace>
    7654:	mov	r3, r0
    7658:	cmp	r3, #0
    765c:	bne	75fc <eval_string+0xf8c>
    7660:	b	7704 <eval_string+0x1094>
    7664:	.word	0x00000b1d
    7668:	.word	0x00000024
    766c:	.word	0x000000e4
    7670:	.word	0x00000b31
    7674:	.word	0x00000b4f
    7678:	.word	0x00000b6c
    767c:	.word	0x00000b7a
    7680:	.word	0x00000390
    7684:	.word	0x00000baf
    7688:	.word	0x00000bd7
    768c:	.word	0x000003b8
    7690:	.word	0x000003e0
    7694:	.word	0x00000ca2
    7698:	.word	0x00000ccb
    769c:	.word	0x00000ce5
    76a0:	.word	0x00000d23
    76a4:	.word	0x00000d79
    76a8:	.word	0x00000d8d
    76ac:	.word	0x000000ac
    76b0:	.word	0x00000408
    76b4:	.word	0x00000444
    76b8:	.word	0x000000a8
    76bc:	.word	0x00000dff
    76c0:	.word	0x000000e4
    76c4:	.word	0x00000000
    76c8:	.word	0x00000118
    76cc:	.word	0x0000014c
    76d0:	.word	0x00000e28
    76d4:	.word	0x00000e36
    76d8:	.word	0x00000ed8
    76dc:	.word	0x00000e42
    76e0:	.word	0x0000017c
    76e4:	.word	0x00000e51
    76e8:	.word	0x00000024
    76ec:	.word	0x00000358
    76f0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    76f4:	ldr	r3, [r3]
    76f8:	sub	r2, r3, #1
    76fc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7700:	str	r2, [r3]
    7704:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7708:	ldr	r3, [r3]
    770c:	cmp	r3, #0
    7710:	ble	8bb8 <eval_string+0x2548>
    7714:	ldr	r3, [fp, #4]
    7718:	ldr	r2, [r3]
    771c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7720:	ldr	r1, [r3]
    7724:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7728:	ldr	r3, [r3]
    772c:	add	r3, r1, r3
    7730:	sub	r3, r3, #1
    7734:	add	r3, r2, r3
    7738:	ldrb	r3, [r3]
    773c:	mov	r0, r3
    7740:	bl	b4 <iswhitespace>
    7744:	mov	r3, r0
    7748:	cmp	r3, #0
    774c:	bne	76f0 <eval_string+0x1080>
    7750:	b	8bb8 <eval_string+0x2548>
    7754:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7758:	ldr	r3, [r3]
    775c:	cmp	r3, #0
    7760:	bne	7778 <eval_string+0x1108>
    7764:	ldr	r3, [pc, #-148]	; 76d8 <eval_string+0x1068>
    7768:	ldr	r2, [pc, #-220]	; 7694 <eval_string+0x1024>
    776c:	ldr	r1, [pc, #-140]	; 76e8 <eval_string+0x1078>
    7770:	ldr	r0, [pc, #-152]	; 76e0 <eval_string+0x1070>
    7774:	bl	0 <__assert_fail>
    7778:	ldr	r3, [fp, #-904]	; 0xfffffc78
    777c:	sub	r0, fp, #900	; 0x384
    7780:	add	r3, r3, #8
    7784:	mov	r2, #520	; 0x208
    7788:	mov	r1, r3
    778c:	bl	0 <memcpy>
    7790:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7794:	ldr	r3, [r3, #16]
    7798:	mov	r1, r3
    779c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    77a0:	bl	9098 <eval_cursor>
    77a4:	mov	r3, r0
    77a8:	cmp	r3, #0
    77ac:	beq	77b8 <eval_string+0x1148>
    77b0:	mvn	r3, #0
    77b4:	b	8be8 <eval_string+0x2578>
    77b8:	ldr	r3, [fp, #-904]	; 0xfffffc78
    77bc:	add	r3, r3, #8
    77c0:	sub	r2, fp, #240	; 0xf0
    77c4:	mov	r1, r2
    77c8:	mov	r0, r3
    77cc:	bl	0 <coda_cursor_get_num_elements>
    77d0:	mov	r3, r0
    77d4:	cmp	r3, #0
    77d8:	beq	77e4 <eval_string+0x1174>
    77dc:	mvn	r3, #0
    77e0:	b	8be8 <eval_string+0x2578>
    77e4:	ldr	r3, [fp, #-912]	; 0xfffffc70
    77e8:	mov	r2, #0
    77ec:	str	r2, [r3]
    77f0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    77f4:	mov	r2, #0
    77f8:	str	r2, [r3]
    77fc:	ldr	r3, [fp, #4]
    7800:	mov	r2, #0
    7804:	str	r2, [r3]
    7808:	ldr	r3, [fp, #-240]	; 0xffffff10
    780c:	cmp	r3, #0
    7810:	ble	79b0 <eval_string+0x1340>
    7814:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7818:	add	r3, r3, #8
    781c:	mov	r0, r3
    7820:	bl	0 <coda_cursor_goto_first_array_element>
    7824:	mov	r3, r0
    7828:	cmp	r3, #0
    782c:	beq	7838 <eval_string+0x11c8>
    7830:	mvn	r3, #0
    7834:	b	8be8 <eval_string+0x2578>
    7838:	mov	r3, #0
    783c:	str	r3, [fp, #-32]	; 0xffffffe0
    7840:	b	79a0 <eval_string+0x1330>
    7844:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7848:	ldr	r1, [r3, #20]
    784c:	sub	r0, fp, #248	; 0xf8
    7850:	sub	r2, fp, #244	; 0xf4
    7854:	sub	r3, fp, #252	; 0xfc
    7858:	str	r3, [sp]
    785c:	mov	r3, r0
    7860:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7864:	bl	6670 <eval_string>
    7868:	mov	r3, r0
    786c:	cmp	r3, #0
    7870:	beq	787c <eval_string+0x120c>
    7874:	mvn	r3, #0
    7878:	b	8be8 <eval_string+0x2578>
    787c:	ldr	r3, [fp, #-248]	; 0xffffff08
    7880:	cmp	r3, #0
    7884:	ble	7954 <eval_string+0x12e4>
    7888:	ldr	r3, [fp, #4]
    788c:	ldr	r0, [r3]
    7890:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7894:	ldr	r2, [r3]
    7898:	ldr	r3, [fp, #-248]	; 0xffffff08
    789c:	add	r3, r2, r3
    78a0:	add	r3, r3, #1
    78a4:	mov	r1, r3
    78a8:	bl	0 <realloc>
    78ac:	str	r0, [fp, #-60]	; 0xffffffc4
    78b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    78b4:	cmp	r3, #0
    78b8:	bne	78f8 <eval_string+0x1288>
    78bc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    78c0:	ldr	r2, [r3]
    78c4:	ldr	r3, [fp, #-248]	; 0xffffff08
    78c8:	add	r2, r2, r3
    78cc:	ldr	r3, [pc, #-572]	; 7698 <eval_string+0x1028>
    78d0:	str	r3, [sp]
    78d4:	ldr	r3, [pc, #-500]	; 76e8 <eval_string+0x1078>
    78d8:	ldr	r1, [pc, #-500]	; 76ec <eval_string+0x107c>
    78dc:	mvn	r0, #0
    78e0:	bl	0 <coda_set_error>
    78e4:	ldr	r3, [fp, #-252]	; 0xffffff04
    78e8:	mov	r0, r3
    78ec:	bl	0 <free>
    78f0:	mvn	r3, #0
    78f4:	b	799c <eval_string+0x132c>
    78f8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    78fc:	ldr	r3, [r3]
    7900:	mov	r2, r3
    7904:	ldr	r3, [fp, #-60]	; 0xffffffc4
    7908:	add	r0, r3, r2
    790c:	ldr	r3, [fp, #-252]	; 0xffffff04
    7910:	ldr	r2, [fp, #-244]	; 0xffffff0c
    7914:	add	r3, r3, r2
    7918:	ldr	r2, [fp, #-248]	; 0xffffff08
    791c:	mov	r1, r3
    7920:	bl	0 <memcpy>
    7924:	ldr	r3, [fp, #-252]	; 0xffffff04
    7928:	mov	r0, r3
    792c:	bl	0 <free>
    7930:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7934:	ldr	r2, [r3]
    7938:	ldr	r3, [fp, #-248]	; 0xffffff08
    793c:	add	r2, r2, r3
    7940:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7944:	str	r2, [r3]
    7948:	ldr	r3, [fp, #4]
    794c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    7950:	str	r2, [r3]
    7954:	ldr	r3, [fp, #-240]	; 0xffffff10
    7958:	sub	r2, r3, #1
    795c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    7960:	cmp	r2, r3
    7964:	ble	798c <eval_string+0x131c>
    7968:	ldr	r3, [fp, #-904]	; 0xfffffc78
    796c:	add	r3, r3, #8
    7970:	mov	r0, r3
    7974:	bl	0 <coda_cursor_goto_next_array_element>
    7978:	mov	r3, r0
    797c:	cmp	r3, #0
    7980:	beq	798c <eval_string+0x131c>
    7984:	mvn	r3, #0
    7988:	b	799c <eval_string+0x132c>
    798c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    7990:	add	r3, r3, #1
    7994:	str	r3, [fp, #-32]	; 0xffffffe0
    7998:	b	79a0 <eval_string+0x1330>
    799c:	b	8be8 <eval_string+0x2578>
    79a0:	ldr	r3, [fp, #-240]	; 0xffffff10
    79a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    79a8:	cmp	r2, r3
    79ac:	blt	7844 <eval_string+0x11d4>
    79b0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    79b4:	add	r3, r3, #8
    79b8:	sub	r1, fp, #900	; 0x384
    79bc:	mov	r2, #520	; 0x208
    79c0:	mov	r0, r3
    79c4:	bl	0 <memcpy>
    79c8:	b	8be4 <eval_string+0x2574>
    79cc:	ldr	r3, [fp, #-904]	; 0xfffffc78
    79d0:	ldr	r3, [r3]
    79d4:	cmp	r3, #0
    79d8:	bne	79f0 <eval_string+0x1380>
    79dc:	ldr	r3, [pc, #-780]	; 76d8 <eval_string+0x1068>
    79e0:	ldr	r2, [pc, #-844]	; 769c <eval_string+0x102c>
    79e4:	ldr	r1, [pc, #-772]	; 76e8 <eval_string+0x1078>
    79e8:	ldr	r0, [pc, #-784]	; 76e0 <eval_string+0x1070>
    79ec:	bl	0 <__assert_fail>
    79f0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    79f4:	sub	r0, fp, #900	; 0x384
    79f8:	add	r3, r3, #8
    79fc:	mov	r2, #520	; 0x208
    7a00:	mov	r1, r3
    7a04:	bl	0 <memcpy>
    7a08:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7a0c:	ldr	r3, [r3, #16]
    7a10:	mov	r1, r3
    7a14:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7a18:	bl	9098 <eval_cursor>
    7a1c:	mov	r3, r0
    7a20:	cmp	r3, #0
    7a24:	beq	7a30 <eval_string+0x13c0>
    7a28:	mvn	r3, #0
    7a2c:	b	8be8 <eval_string+0x2578>
    7a30:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7a34:	add	r3, r3, #8
    7a38:	sub	r2, fp, #256	; 0x100
    7a3c:	mov	r1, r2
    7a40:	mov	r0, r3
    7a44:	bl	0 <coda_cursor_get_num_elements>
    7a48:	mov	r3, r0
    7a4c:	cmp	r3, #0
    7a50:	beq	7a5c <eval_string+0x13ec>
    7a54:	mvn	r3, #0
    7a58:	b	8be8 <eval_string+0x2578>
    7a5c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7a60:	mov	r2, #0
    7a64:	str	r2, [r3]
    7a68:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7a6c:	mov	r2, #0
    7a70:	str	r2, [r3]
    7a74:	ldr	r3, [fp, #4]
    7a78:	mov	r2, #0
    7a7c:	str	r2, [r3]
    7a80:	ldr	r3, [fp, #-256]	; 0xffffff00
    7a84:	cmp	r3, #0
    7a88:	ble	7be4 <eval_string+0x1574>
    7a8c:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7a90:	add	r3, r3, #8
    7a94:	mov	r0, r3
    7a98:	bl	0 <coda_cursor_goto_first_array_element>
    7a9c:	mov	r3, r0
    7aa0:	cmp	r3, #0
    7aa4:	beq	7ab0 <eval_string+0x1440>
    7aa8:	mvn	r3, #0
    7aac:	b	8be8 <eval_string+0x2578>
    7ab0:	mov	r3, #0
    7ab4:	str	r3, [fp, #-36]	; 0xffffffdc
    7ab8:	b	7bd4 <eval_string+0x1564>
    7abc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7ac0:	ldr	r1, [r3, #20]
    7ac4:	sub	r0, fp, #264	; 0x108
    7ac8:	sub	r2, fp, #260	; 0x104
    7acc:	sub	r3, fp, #268	; 0x10c
    7ad0:	str	r3, [sp]
    7ad4:	mov	r3, r0
    7ad8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7adc:	bl	6670 <eval_string>
    7ae0:	mov	r3, r0
    7ae4:	cmp	r3, #0
    7ae8:	beq	7af4 <eval_string+0x1484>
    7aec:	mvn	r3, #0
    7af0:	b	8be8 <eval_string+0x2578>
    7af4:	ldr	r0, [fp, #-260]	; 0xfffffefc
    7af8:	ldr	r1, [fp, #-264]	; 0xfffffef8
    7afc:	ldr	ip, [fp, #-268]	; 0xfffffef4
    7b00:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7b04:	ldr	lr, [r3]
    7b08:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7b0c:	ldr	r3, [r3]
    7b10:	ldr	r2, [fp, #4]
    7b14:	ldr	r2, [r2]
    7b18:	str	r2, [sp, #4]
    7b1c:	str	r3, [sp]
    7b20:	mov	r3, lr
    7b24:	mov	r2, ip
    7b28:	bl	114 <compare_strings>
    7b2c:	mov	r3, r0
    7b30:	cmp	r3, #0
    7b34:	bge	7b78 <eval_string+0x1508>
    7b38:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7b3c:	ldr	r3, [r3]
    7b40:	cmp	r3, #0
    7b44:	ble	7b50 <eval_string+0x14e0>
    7b48:	ldr	r0, [fp, #4]
    7b4c:	bl	0 <free>
    7b50:	ldr	r2, [fp, #-260]	; 0xfffffefc
    7b54:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7b58:	str	r2, [r3]
    7b5c:	ldr	r2, [fp, #-264]	; 0xfffffef8
    7b60:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7b64:	str	r2, [r3]
    7b68:	ldr	r2, [fp, #-268]	; 0xfffffef4
    7b6c:	ldr	r3, [fp, #4]
    7b70:	str	r2, [r3]
    7b74:	b	7b90 <eval_string+0x1520>
    7b78:	ldr	r3, [fp, #-264]	; 0xfffffef8
    7b7c:	cmp	r3, #0
    7b80:	ble	7b90 <eval_string+0x1520>
    7b84:	ldr	r3, [fp, #-268]	; 0xfffffef4
    7b88:	mov	r0, r3
    7b8c:	bl	0 <free>
    7b90:	ldr	r3, [fp, #-256]	; 0xffffff00
    7b94:	sub	r2, r3, #1
    7b98:	ldr	r3, [fp, #-36]	; 0xffffffdc
    7b9c:	cmp	r2, r3
    7ba0:	ble	7bc8 <eval_string+0x1558>
    7ba4:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7ba8:	add	r3, r3, #8
    7bac:	mov	r0, r3
    7bb0:	bl	0 <coda_cursor_goto_next_array_element>
    7bb4:	mov	r3, r0
    7bb8:	cmp	r3, #0
    7bbc:	beq	7bc8 <eval_string+0x1558>
    7bc0:	mvn	r3, #0
    7bc4:	b	8be8 <eval_string+0x2578>
    7bc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    7bcc:	add	r3, r3, #1
    7bd0:	str	r3, [fp, #-36]	; 0xffffffdc
    7bd4:	ldr	r3, [fp, #-256]	; 0xffffff00
    7bd8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7bdc:	cmp	r2, r3
    7be0:	blt	7abc <eval_string+0x144c>
    7be4:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7be8:	add	r3, r3, #8
    7bec:	sub	r1, fp, #900	; 0x384
    7bf0:	mov	r2, #520	; 0x208
    7bf4:	mov	r0, r3
    7bf8:	bl	0 <memcpy>
    7bfc:	b	8be4 <eval_string+0x2574>
    7c00:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7c04:	ldr	r3, [r3]
    7c08:	cmp	r3, #0
    7c0c:	bne	7c24 <eval_string+0x15b4>
    7c10:	ldr	r3, [pc, #-1344]	; 76d8 <eval_string+0x1068>
    7c14:	ldr	r2, [pc, #-1404]	; 76a0 <eval_string+0x1030>
    7c18:	ldr	r1, [pc, #-1336]	; 76e8 <eval_string+0x1078>
    7c1c:	ldr	r0, [pc, #-1348]	; 76e0 <eval_string+0x1070>
    7c20:	bl	0 <__assert_fail>
    7c24:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7c28:	sub	r0, fp, #900	; 0x384
    7c2c:	add	r3, r3, #8
    7c30:	mov	r2, #520	; 0x208
    7c34:	mov	r1, r3
    7c38:	bl	0 <memcpy>
    7c3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7c40:	ldr	r3, [r3, #16]
    7c44:	mov	r1, r3
    7c48:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7c4c:	bl	9098 <eval_cursor>
    7c50:	mov	r3, r0
    7c54:	cmp	r3, #0
    7c58:	beq	7c64 <eval_string+0x15f4>
    7c5c:	mvn	r3, #0
    7c60:	b	8be8 <eval_string+0x2578>
    7c64:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7c68:	add	r3, r3, #8
    7c6c:	sub	r2, fp, #272	; 0x110
    7c70:	mov	r1, r2
    7c74:	mov	r0, r3
    7c78:	bl	0 <coda_cursor_get_num_elements>
    7c7c:	mov	r3, r0
    7c80:	cmp	r3, #0
    7c84:	beq	7c90 <eval_string+0x1620>
    7c88:	mvn	r3, #0
    7c8c:	b	8be8 <eval_string+0x2578>
    7c90:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7c94:	mov	r2, #0
    7c98:	str	r2, [r3]
    7c9c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7ca0:	mov	r2, #0
    7ca4:	str	r2, [r3]
    7ca8:	ldr	r3, [fp, #4]
    7cac:	mov	r2, #0
    7cb0:	str	r2, [r3]
    7cb4:	ldr	r3, [fp, #-272]	; 0xfffffef0
    7cb8:	cmp	r3, #0
    7cbc:	ble	7e20 <eval_string+0x17b0>
    7cc0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7cc4:	add	r3, r3, #8
    7cc8:	mov	r0, r3
    7ccc:	bl	0 <coda_cursor_goto_first_array_element>
    7cd0:	mov	r3, r0
    7cd4:	cmp	r3, #0
    7cd8:	beq	7ce4 <eval_string+0x1674>
    7cdc:	mvn	r3, #0
    7ce0:	b	8be8 <eval_string+0x2578>
    7ce4:	mov	r3, #0
    7ce8:	str	r3, [fp, #-40]	; 0xffffffd8
    7cec:	b	7e10 <eval_string+0x17a0>
    7cf0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7cf4:	ldr	r1, [r3, #20]
    7cf8:	sub	r0, fp, #280	; 0x118
    7cfc:	sub	r2, fp, #276	; 0x114
    7d00:	sub	r3, fp, #284	; 0x11c
    7d04:	str	r3, [sp]
    7d08:	mov	r3, r0
    7d0c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7d10:	bl	6670 <eval_string>
    7d14:	mov	r3, r0
    7d18:	cmp	r3, #0
    7d1c:	beq	7d28 <eval_string+0x16b8>
    7d20:	mvn	r3, #0
    7d24:	b	8be8 <eval_string+0x2578>
    7d28:	ldr	r0, [fp, #-276]	; 0xfffffeec
    7d2c:	ldr	r1, [fp, #-280]	; 0xfffffee8
    7d30:	ldr	ip, [fp, #-284]	; 0xfffffee4
    7d34:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7d38:	ldr	lr, [r3]
    7d3c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7d40:	ldr	r3, [r3]
    7d44:	ldr	r2, [fp, #4]
    7d48:	ldr	r2, [r2]
    7d4c:	str	r2, [sp, #4]
    7d50:	str	r3, [sp]
    7d54:	mov	r3, lr
    7d58:	mov	r2, ip
    7d5c:	bl	114 <compare_strings>
    7d60:	mov	r3, r0
    7d64:	cmp	r3, #0
    7d68:	ble	7db4 <eval_string+0x1744>
    7d6c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7d70:	ldr	r3, [r3]
    7d74:	cmp	r3, #0
    7d78:	ble	7d8c <eval_string+0x171c>
    7d7c:	ldr	r3, [fp, #4]
    7d80:	ldr	r3, [r3]
    7d84:	mov	r0, r3
    7d88:	bl	0 <free>
    7d8c:	ldr	r2, [fp, #-276]	; 0xfffffeec
    7d90:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7d94:	str	r2, [r3]
    7d98:	ldr	r2, [fp, #-280]	; 0xfffffee8
    7d9c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7da0:	str	r2, [r3]
    7da4:	ldr	r2, [fp, #-284]	; 0xfffffee4
    7da8:	ldr	r3, [fp, #4]
    7dac:	str	r2, [r3]
    7db0:	b	7dcc <eval_string+0x175c>
    7db4:	ldr	r3, [fp, #-280]	; 0xfffffee8
    7db8:	cmp	r3, #0
    7dbc:	ble	7dcc <eval_string+0x175c>
    7dc0:	ldr	r3, [fp, #-284]	; 0xfffffee4
    7dc4:	mov	r0, r3
    7dc8:	bl	0 <free>
    7dcc:	ldr	r3, [fp, #-272]	; 0xfffffef0
    7dd0:	sub	r2, r3, #1
    7dd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    7dd8:	cmp	r2, r3
    7ddc:	ble	7e04 <eval_string+0x1794>
    7de0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7de4:	add	r3, r3, #8
    7de8:	mov	r0, r3
    7dec:	bl	0 <coda_cursor_goto_next_array_element>
    7df0:	mov	r3, r0
    7df4:	cmp	r3, #0
    7df8:	beq	7e04 <eval_string+0x1794>
    7dfc:	mvn	r3, #0
    7e00:	b	8be8 <eval_string+0x2578>
    7e04:	ldr	r3, [fp, #-40]	; 0xffffffd8
    7e08:	add	r3, r3, #1
    7e0c:	str	r3, [fp, #-40]	; 0xffffffd8
    7e10:	ldr	r3, [fp, #-272]	; 0xfffffef0
    7e14:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7e18:	cmp	r2, r3
    7e1c:	blt	7cf0 <eval_string+0x1680>
    7e20:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7e24:	add	r3, r3, #8
    7e28:	sub	r1, fp, #900	; 0x384
    7e2c:	mov	r2, #520	; 0x208
    7e30:	mov	r0, r3
    7e34:	bl	0 <memcpy>
    7e38:	b	8be4 <eval_string+0x2574>
    7e3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7e40:	ldr	r3, [r3, #16]
    7e44:	sub	r2, fp, #288	; 0x120
    7e48:	mov	r1, r3
    7e4c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7e50:	bl	12c8 <eval_boolean>
    7e54:	mov	r3, r0
    7e58:	cmp	r3, #0
    7e5c:	beq	7e68 <eval_string+0x17f8>
    7e60:	mvn	r3, #0
    7e64:	b	8be8 <eval_string+0x2578>
    7e68:	ldr	r3, [fp, #-288]	; 0xfffffee0
    7e6c:	cmp	r3, #0
    7e70:	beq	7ea8 <eval_string+0x1838>
    7e74:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7e78:	ldr	r1, [r3, #20]
    7e7c:	ldr	r3, [fp, #4]
    7e80:	str	r3, [sp]
    7e84:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7e88:	ldr	r2, [fp, #-912]	; 0xfffffc70
    7e8c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7e90:	bl	6670 <eval_string>
    7e94:	mov	r3, r0
    7e98:	cmp	r3, #0
    7e9c:	beq	8bc0 <eval_string+0x2550>
    7ea0:	mvn	r3, #0
    7ea4:	b	8be8 <eval_string+0x2578>
    7ea8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7eac:	ldr	r1, [r3, #24]
    7eb0:	ldr	r3, [fp, #4]
    7eb4:	str	r3, [sp]
    7eb8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7ebc:	ldr	r2, [fp, #-912]	; 0xfffffc70
    7ec0:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7ec4:	bl	6670 <eval_string>
    7ec8:	mov	r3, r0
    7ecc:	cmp	r3, #0
    7ed0:	beq	8bc0 <eval_string+0x2550>
    7ed4:	mvn	r3, #0
    7ed8:	b	8be8 <eval_string+0x2578>
    7edc:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7ee0:	ldr	r3, [r3]
    7ee4:	cmp	r3, #0
    7ee8:	bne	7f00 <eval_string+0x1890>
    7eec:	ldr	r3, [pc, #-2076]	; 76d8 <eval_string+0x1068>
    7ef0:	ldr	r2, [pc, #-2132]	; 76a4 <eval_string+0x1034>
    7ef4:	ldr	r1, [pc, #-2068]	; 76e8 <eval_string+0x1078>
    7ef8:	ldr	r0, [pc, #-2080]	; 76e0 <eval_string+0x1070>
    7efc:	bl	0 <__assert_fail>
    7f00:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7f04:	ldr	r3, [r3]
    7f08:	ldr	r3, [r3]
    7f0c:	sub	r2, fp, #292	; 0x124
    7f10:	mov	r1, r2
    7f14:	mov	r0, r3
    7f18:	bl	0 <coda_get_product_filename>
    7f1c:	mov	r3, r0
    7f20:	cmp	r3, #0
    7f24:	beq	7f30 <eval_string+0x18c0>
    7f28:	mvn	r3, #0
    7f2c:	b	8be8 <eval_string+0x2578>
    7f30:	ldr	r3, [fp, #-292]	; 0xfffffedc
    7f34:	str	r3, [fp, #-44]	; 0xffffffd4
    7f38:	b	7f74 <eval_string+0x1904>
    7f3c:	ldr	r3, [fp, #-292]	; 0xfffffedc
    7f40:	ldrb	r3, [r3]
    7f44:	cmp	r3, #47	; 0x2f
    7f48:	beq	7f5c <eval_string+0x18ec>
    7f4c:	ldr	r3, [fp, #-292]	; 0xfffffedc
    7f50:	ldrb	r3, [r3]
    7f54:	cmp	r3, #92	; 0x5c
    7f58:	bne	7f68 <eval_string+0x18f8>
    7f5c:	ldr	r3, [fp, #-292]	; 0xfffffedc
    7f60:	add	r3, r3, #1
    7f64:	str	r3, [fp, #-44]	; 0xffffffd4
    7f68:	ldr	r3, [fp, #-292]	; 0xfffffedc
    7f6c:	add	r3, r3, #1
    7f70:	str	r3, [fp, #-292]	; 0xfffffedc
    7f74:	ldr	r3, [fp, #-292]	; 0xfffffedc
    7f78:	ldrb	r3, [r3]
    7f7c:	cmp	r3, #0
    7f80:	bne	7f3c <eval_string+0x18cc>
    7f84:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7f88:	mov	r2, #0
    7f8c:	str	r2, [r3]
    7f90:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7f94:	bl	0 <strlen>
    7f98:	mov	r3, r0
    7f9c:	mov	r2, r3
    7fa0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7fa4:	str	r2, [r3]
    7fa8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7fac:	ldr	r3, [r3]
    7fb0:	add	r3, r3, #1
    7fb4:	mov	r0, r3
    7fb8:	bl	0 <malloc>
    7fbc:	mov	r3, r0
    7fc0:	mov	r2, r3
    7fc4:	ldr	r3, [fp, #4]
    7fc8:	str	r2, [r3]
    7fcc:	ldr	r3, [fp, #4]
    7fd0:	ldr	r3, [r3]
    7fd4:	cmp	r3, #0
    7fd8:	bne	8004 <eval_string+0x1994>
    7fdc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7fe0:	ldr	r2, [r3]
    7fe4:	ldr	r3, [pc, #-2372]	; 76a8 <eval_string+0x1038>
    7fe8:	str	r3, [sp]
    7fec:	ldr	r3, [pc, #-2316]	; 76e8 <eval_string+0x1078>
    7ff0:	ldr	r1, [pc, #-2316]	; 76ec <eval_string+0x107c>
    7ff4:	mvn	r0, #0
    7ff8:	bl	0 <coda_set_error>
    7ffc:	mvn	r3, #0
    8000:	b	8be8 <eval_string+0x2578>
    8004:	ldr	r3, [fp, #4]
    8008:	ldr	r0, [r3]
    800c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8010:	ldr	r3, [r3]
    8014:	mov	r2, r3
    8018:	ldr	r1, [fp, #-44]	; 0xffffffd4
    801c:	bl	0 <memcpy>
    8020:	b	8be4 <eval_string+0x2574>
    8024:	mov	r3, #0
    8028:	str	r3, [fp, #-324]	; 0xfffffebc
    802c:	mov	r3, #0
    8030:	str	r3, [fp, #-52]	; 0xffffffcc
    8034:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8038:	ldr	r1, [r3, #16]
    803c:	sub	r0, fp, #320	; 0x140
    8040:	sub	r2, fp, #316	; 0x13c
    8044:	sub	r3, fp, #324	; 0x144
    8048:	str	r3, [sp]
    804c:	mov	r3, r0
    8050:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8054:	bl	6670 <eval_string>
    8058:	mov	r3, r0
    805c:	cmp	r3, #0
    8060:	beq	806c <eval_string+0x19fc>
    8064:	mvn	r3, #0
    8068:	b	8be8 <eval_string+0x2578>
    806c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8070:	ldr	r1, [r3, #20]
    8074:	sub	r0, fp, #308	; 0x134
    8078:	sub	r2, fp, #304	; 0x130
    807c:	sub	r3, fp, #312	; 0x138
    8080:	str	r3, [sp]
    8084:	mov	r3, r0
    8088:	ldr	r0, [fp, #-904]	; 0xfffffc78
    808c:	bl	6670 <eval_string>
    8090:	mov	r3, r0
    8094:	cmp	r3, #0
    8098:	beq	80bc <eval_string+0x1a4c>
    809c:	ldr	r3, [fp, #-324]	; 0xfffffebc
    80a0:	cmp	r3, #0
    80a4:	beq	80b4 <eval_string+0x1a44>
    80a8:	ldr	r3, [fp, #-324]	; 0xfffffebc
    80ac:	mov	r0, r3
    80b0:	bl	0 <free>
    80b4:	mvn	r3, #0
    80b8:	b	8be8 <eval_string+0x2578>
    80bc:	ldr	r3, [fp, #-320]	; 0xfffffec0
    80c0:	cmp	r3, #0
    80c4:	ble	8114 <eval_string+0x1aa4>
    80c8:	ldr	r3, [fp, #-324]	; 0xfffffebc
    80cc:	ldr	r1, [fp, #-316]	; 0xfffffec4
    80d0:	ldr	r2, [fp, #-320]	; 0xfffffec0
    80d4:	add	r2, r1, r2
    80d8:	add	r3, r3, r2
    80dc:	mov	r2, #0
    80e0:	strb	r2, [r3]
    80e4:	ldr	r3, [fp, #-324]	; 0xfffffebc
    80e8:	ldr	r2, [fp, #-316]	; 0xfffffec4
    80ec:	add	r0, r3, r2
    80f0:	sub	r1, fp, #300	; 0x12c
    80f4:	sub	r2, fp, #296	; 0x128
    80f8:	mov	r3, #0
    80fc:	str	r3, [sp]
    8100:	mov	r3, r1
    8104:	mov	r1, #36	; 0x24
    8108:	bl	0 <coda_pcre_compile>
    810c:	str	r0, [fp, #-48]	; 0xffffffd0
    8110:	b	8138 <eval_string+0x1ac8>
    8114:	sub	r1, fp, #300	; 0x12c
    8118:	sub	r2, fp, #296	; 0x128
    811c:	mov	r3, #0
    8120:	str	r3, [sp]
    8124:	mov	r3, r1
    8128:	mov	r1, #36	; 0x24
    812c:	ldr	r0, [pc, #-2684]	; 76b8 <eval_string+0x1048>
    8130:	bl	0 <coda_pcre_compile>
    8134:	str	r0, [fp, #-48]	; 0xffffffd0
    8138:	ldr	r3, [fp, #-324]	; 0xfffffebc
    813c:	cmp	r3, #0
    8140:	beq	8150 <eval_string+0x1ae0>
    8144:	ldr	r3, [fp, #-324]	; 0xfffffebc
    8148:	mov	r0, r3
    814c:	bl	0 <free>
    8150:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8154:	cmp	r3, #0
    8158:	bne	8190 <eval_string+0x1b20>
    815c:	ldr	r2, [fp, #-296]	; 0xfffffed8
    8160:	ldr	r3, [fp, #-300]	; 0xfffffed4
    8164:	ldr	r1, [pc, #-2752]	; 76ac <eval_string+0x103c>
    8168:	mvn	r0, #400	; 0x190
    816c:	bl	0 <coda_set_error>
    8170:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8174:	cmp	r3, #0
    8178:	beq	8188 <eval_string+0x1b18>
    817c:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8180:	mov	r0, r3
    8184:	bl	0 <free>
    8188:	mvn	r3, #0
    818c:	b	8be8 <eval_string+0x2578>
    8190:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8194:	ldr	r3, [r3, #24]
    8198:	ldr	r3, [r3, #4]
    819c:	cmp	r3, #1
    81a0:	bne	81f4 <eval_string+0x1b84>
    81a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    81a8:	ldr	r3, [r3, #24]
    81ac:	sub	r2, fp, #332	; 0x14c
    81b0:	mov	r1, r3
    81b4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    81b8:	bl	442c <eval_integer>
    81bc:	mov	r3, r0
    81c0:	cmp	r3, #0
    81c4:	beq	81e0 <eval_string+0x1b70>
    81c8:	ldr	r3, [pc, #-2828]	; 76c4 <eval_string+0x1054>
    81cc:	ldr	r3, [r3]
    81d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    81d4:	blx	r3
    81d8:	mvn	r3, #0
    81dc:	b	8be8 <eval_string+0x2578>
    81e0:	sub	r3, fp, #332	; 0x14c
    81e4:	ldrd	r2, [r3]
    81e8:	mov	r3, r2
    81ec:	str	r3, [fp, #-52]	; 0xffffffcc
    81f0:	b	82e8 <eval_string+0x1c78>
    81f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    81f8:	ldr	r1, [r3, #24]
    81fc:	sub	r0, fp, #340	; 0x154
    8200:	sub	r2, fp, #336	; 0x150
    8204:	sub	r3, fp, #344	; 0x158
    8208:	str	r3, [sp]
    820c:	mov	r3, r0
    8210:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8214:	bl	6670 <eval_string>
    8218:	mov	r3, r0
    821c:	cmp	r3, #0
    8220:	beq	823c <eval_string+0x1bcc>
    8224:	ldr	r3, [pc, #-2920]	; 76c4 <eval_string+0x1054>
    8228:	ldr	r3, [r3]
    822c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8230:	blx	r3
    8234:	mvn	r3, #0
    8238:	b	8be8 <eval_string+0x2578>
    823c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8240:	cmp	r3, #0
    8244:	bne	8284 <eval_string+0x1c14>
    8248:	ldr	r1, [pc, #-2976]	; 76b0 <eval_string+0x1040>
    824c:	mvn	r0, #400	; 0x190
    8250:	bl	0 <coda_set_error>
    8254:	ldr	r3, [fp, #-344]	; 0xfffffea8
    8258:	cmp	r3, #0
    825c:	beq	826c <eval_string+0x1bfc>
    8260:	ldr	r3, [fp, #-344]	; 0xfffffea8
    8264:	mov	r0, r3
    8268:	bl	0 <free>
    826c:	ldr	r3, [pc, #-2992]	; 76c4 <eval_string+0x1054>
    8270:	ldr	r3, [r3]
    8274:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8278:	blx	r3
    827c:	mvn	r3, #0
    8280:	b	82e4 <eval_string+0x1c74>
    8284:	ldr	r3, [fp, #-344]	; 0xfffffea8
    8288:	mov	r1, r3
    828c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8290:	bl	0 <coda_pcre_get_stringnumber>
    8294:	str	r0, [fp, #-52]	; 0xffffffcc
    8298:	ldr	r3, [fp, #-52]	; 0xffffffcc
    829c:	cmp	r3, #0
    82a0:	bge	82d4 <eval_string+0x1c64>
    82a4:	ldr	r1, [pc, #-3064]	; 76b4 <eval_string+0x1044>
    82a8:	mvn	r0, #400	; 0x190
    82ac:	bl	0 <coda_set_error>
    82b0:	ldr	r3, [fp, #-344]	; 0xfffffea8
    82b4:	mov	r0, r3
    82b8:	bl	0 <free>
    82bc:	ldr	r3, [pc, #-3072]	; 76c4 <eval_string+0x1054>
    82c0:	ldr	r3, [r3]
    82c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    82c8:	blx	r3
    82cc:	mvn	r3, #0
    82d0:	b	82e4 <eval_string+0x1c74>
    82d4:	ldr	r3, [fp, #-344]	; 0xfffffea8
    82d8:	mov	r0, r3
    82dc:	bl	0 <free>
    82e0:	b	82e8 <eval_string+0x1c78>
    82e4:	b	8be8 <eval_string+0x2578>
    82e8:	ldr	r3, [fp, #-312]	; 0xfffffec8
    82ec:	cmp	r3, #0
    82f0:	bne	833c <eval_string+0x1ccc>
    82f4:	ldr	r0, [pc, #-3140]	; 76b8 <eval_string+0x1048>
    82f8:	bl	0 <strdup>
    82fc:	mov	r3, r0
    8300:	str	r3, [fp, #-312]	; 0xfffffec8
    8304:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8308:	cmp	r3, #0
    830c:	bne	833c <eval_string+0x1ccc>
    8310:	ldr	r3, [pc, #-3164]	; 76bc <eval_string+0x104c>
    8314:	ldr	r2, [pc, #-3124]	; 76e8 <eval_string+0x1078>
    8318:	ldr	r1, [pc, #-3168]	; 76c0 <eval_string+0x1050>
    831c:	mvn	r0, #0
    8320:	bl	0 <coda_set_error>
    8324:	ldr	r3, [pc, #-3176]	; 76c4 <eval_string+0x1054>
    8328:	ldr	r3, [r3]
    832c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8330:	blx	r3
    8334:	mvn	r3, #0
    8338:	b	8be8 <eval_string+0x2578>
    833c:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8340:	ldr	r2, [fp, #-304]	; 0xfffffed0
    8344:	add	r2, r3, r2
    8348:	ldr	r1, [fp, #-308]	; 0xfffffecc
    834c:	mov	r3, #48	; 0x30
    8350:	str	r3, [sp, #12]
    8354:	sub	r3, fp, #900	; 0x384
    8358:	str	r3, [sp, #8]
    835c:	mov	r3, #0
    8360:	str	r3, [sp, #4]
    8364:	mov	r3, #0
    8368:	str	r3, [sp]
    836c:	mov	r3, r1
    8370:	mov	r1, #0
    8374:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8378:	bl	0 <coda_pcre_exec>
    837c:	str	r0, [fp, #-64]	; 0xffffffc0
    8380:	ldr	r3, [pc, #-3268]	; 76c4 <eval_string+0x1054>
    8384:	ldr	r3, [r3]
    8388:	ldr	r0, [fp, #-48]	; 0xffffffd0
    838c:	blx	r3
    8390:	ldr	r3, [fp, #-64]	; 0xffffffc0
    8394:	cmp	r3, #0
    8398:	bge	83cc <eval_string+0x1d5c>
    839c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    83a0:	cmn	r3, #1
    83a4:	beq	83cc <eval_string+0x1d5c>
    83a8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    83ac:	ldr	r1, [pc, #-3308]	; 76c8 <eval_string+0x1058>
    83b0:	mvn	r0, #400	; 0x190
    83b4:	bl	0 <coda_set_error>
    83b8:	ldr	r3, [fp, #-312]	; 0xfffffec8
    83bc:	mov	r0, r3
    83c0:	bl	0 <free>
    83c4:	mvn	r3, #0
    83c8:	b	8be8 <eval_string+0x2578>
    83cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    83d0:	cmp	r3, #0
    83d4:	bne	83f8 <eval_string+0x1d88>
    83d8:	ldr	r1, [pc, #-3348]	; 76cc <eval_string+0x105c>
    83dc:	mvn	r0, #400	; 0x190
    83e0:	bl	0 <coda_set_error>
    83e4:	ldr	r3, [fp, #-312]	; 0xfffffec8
    83e8:	mov	r0, r3
    83ec:	bl	0 <free>
    83f0:	mvn	r3, #0
    83f4:	b	8be8 <eval_string+0x2578>
    83f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
    83fc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    8400:	cmp	r2, r3
    8404:	blt	843c <eval_string+0x1dcc>
    8408:	ldr	r3, [fp, #-912]	; 0xfffffc70
    840c:	mov	r2, #0
    8410:	str	r2, [r3]
    8414:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8418:	mov	r2, #0
    841c:	str	r2, [r3]
    8420:	ldr	r3, [fp, #4]
    8424:	mov	r2, #0
    8428:	str	r2, [r3]
    842c:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8430:	mov	r0, r3
    8434:	bl	0 <free>
    8438:	b	8be4 <eval_string+0x2574>
    843c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    8440:	lsl	r3, r3, #1
    8444:	lsl	r3, r3, #2
    8448:	sub	r2, fp, #28
    844c:	add	r3, r2, r3
    8450:	ldr	r2, [r3, #-872]	; 0xfffffc98
    8454:	ldr	r3, [fp, #-912]	; 0xfffffc70
    8458:	str	r2, [r3]
    845c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    8460:	lsl	r3, r3, #1
    8464:	add	r3, r3, #1
    8468:	lsl	r3, r3, #2
    846c:	sub	r2, fp, #28
    8470:	add	r3, r2, r3
    8474:	ldr	r2, [r3, #-872]	; 0xfffffc98
    8478:	ldr	r3, [fp, #-52]	; 0xffffffcc
    847c:	lsl	r3, r3, #1
    8480:	lsl	r3, r3, #2
    8484:	sub	r1, fp, #28
    8488:	add	r3, r1, r3
    848c:	ldr	r3, [r3, #-872]	; 0xfffffc98
    8490:	sub	r2, r2, r3
    8494:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8498:	str	r2, [r3]
    849c:	ldr	r2, [fp, #-312]	; 0xfffffec8
    84a0:	ldr	r3, [fp, #4]
    84a4:	str	r2, [r3]
    84a8:	b	8be4 <eval_string+0x2574>
    84ac:	ldr	r3, [fp, #-904]	; 0xfffffc78
    84b0:	ldr	r3, [r3]
    84b4:	cmp	r3, #0
    84b8:	bne	84d0 <eval_string+0x1e60>
    84bc:	ldr	r3, [pc, #-3564]	; 76d8 <eval_string+0x1068>
    84c0:	ldr	r2, [pc, #-3576]	; 76d0 <eval_string+0x1060>
    84c4:	ldr	r1, [pc, #-3556]	; 76e8 <eval_string+0x1078>
    84c8:	ldr	r0, [pc, #-3568]	; 76e0 <eval_string+0x1070>
    84cc:	bl	0 <__assert_fail>
    84d0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    84d4:	ldr	r3, [r3]
    84d8:	ldr	r3, [r3]
    84dc:	sub	r2, fp, #348	; 0x15c
    84e0:	mov	r1, r2
    84e4:	mov	r0, r3
    84e8:	bl	0 <coda_get_product_class>
    84ec:	mov	r3, r0
    84f0:	cmp	r3, #0
    84f4:	beq	8500 <eval_string+0x1e90>
    84f8:	mvn	r3, #0
    84fc:	b	8be8 <eval_string+0x2578>
    8500:	ldr	r3, [fp, #-912]	; 0xfffffc70
    8504:	mov	r2, #0
    8508:	str	r2, [r3]
    850c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8510:	mov	r2, #0
    8514:	str	r2, [r3]
    8518:	ldr	r3, [fp, #-348]	; 0xfffffea4
    851c:	cmp	r3, #0
    8520:	beq	8bc8 <eval_string+0x2558>
    8524:	ldr	r3, [fp, #-348]	; 0xfffffea4
    8528:	mov	r0, r3
    852c:	bl	0 <strlen>
    8530:	mov	r3, r0
    8534:	mov	r2, r3
    8538:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    853c:	str	r2, [r3]
    8540:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8544:	ldr	r3, [r3]
    8548:	add	r3, r3, #1
    854c:	mov	r0, r3
    8550:	bl	0 <malloc>
    8554:	mov	r3, r0
    8558:	mov	r2, r3
    855c:	ldr	r3, [fp, #4]
    8560:	str	r2, [r3]
    8564:	ldr	r3, [fp, #4]
    8568:	ldr	r3, [r3]
    856c:	cmp	r3, #0
    8570:	bne	859c <eval_string+0x1f2c>
    8574:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8578:	ldr	r2, [r3]
    857c:	ldr	r3, [pc, #-3760]	; 76d4 <eval_string+0x1064>
    8580:	str	r3, [sp]
    8584:	ldr	r3, [pc, #-3748]	; 76e8 <eval_string+0x1078>
    8588:	ldr	r1, [pc, #-3748]	; 76ec <eval_string+0x107c>
    858c:	mvn	r0, #0
    8590:	bl	0 <coda_set_error>
    8594:	mvn	r3, #0
    8598:	b	8be8 <eval_string+0x2578>
    859c:	ldr	r3, [fp, #4]
    85a0:	ldr	r0, [r3]
    85a4:	ldr	r1, [fp, #-348]	; 0xfffffea4
    85a8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    85ac:	ldr	r3, [r3]
    85b0:	mov	r2, r3
    85b4:	bl	0 <memcpy>
    85b8:	b	8bc8 <eval_string+0x2558>
    85bc:	ldr	r3, [fp, #-904]	; 0xfffffc78
    85c0:	ldr	r3, [r3]
    85c4:	cmp	r3, #0
    85c8:	bne	85e0 <eval_string+0x1f70>
    85cc:	ldr	r3, [pc, #-3836]	; 76d8 <eval_string+0x1068>
    85d0:	ldr	r2, [pc, #-3836]	; 76dc <eval_string+0x106c>
    85d4:	ldr	r1, [pc, #-3828]	; 76e8 <eval_string+0x1078>
    85d8:	ldr	r0, [pc, #-3840]	; 76e0 <eval_string+0x1070>
    85dc:	bl	0 <__assert_fail>
    85e0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    85e4:	ldr	r3, [r3]
    85e8:	ldr	r3, [r3]
    85ec:	sub	r2, fp, #352	; 0x160
    85f0:	mov	r1, r2
    85f4:	mov	r0, r3
    85f8:	bl	0 <coda_get_product_format>
    85fc:	mov	r3, r0
    8600:	cmp	r3, #0
    8604:	beq	8610 <eval_string+0x1fa0>
    8608:	mvn	r3, #0
    860c:	b	8be8 <eval_string+0x2578>
    8610:	ldr	r3, [fp, #-352]	; 0xfffffea0
    8614:	mov	r0, r3
    8618:	bl	0 <coda_type_get_format_name>
    861c:	str	r0, [fp, #-68]	; 0xffffffbc
    8620:	ldr	r3, [fp, #-912]	; 0xfffffc70
    8624:	mov	r2, #0
    8628:	str	r2, [r3]
    862c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8630:	mov	r2, #0
    8634:	str	r2, [r3]
    8638:	ldr	r3, [fp, #-68]	; 0xffffffbc
    863c:	cmp	r3, #0
    8640:	beq	8bd0 <eval_string+0x2560>
    8644:	ldr	r0, [fp, #-68]	; 0xffffffbc
    8648:	bl	0 <strlen>
    864c:	mov	r3, r0
    8650:	mov	r2, r3
    8654:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8658:	str	r2, [r3]
    865c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8660:	ldr	r3, [r3]
    8664:	add	r3, r3, #1
    8668:	mov	r0, r3
    866c:	bl	0 <malloc>
    8670:	mov	r3, r0
    8674:	mov	r2, r3
    8678:	ldr	r3, [fp, #4]
    867c:	str	r2, [r3]
    8680:	ldr	r3, [fp, #4]
    8684:	ldr	r3, [r3]
    8688:	cmp	r3, #0
    868c:	bne	86b8 <eval_string+0x2048>
    8690:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8694:	ldr	r2, [r3]
    8698:	ldr	r3, [pc, #-4028]	; 76e4 <eval_string+0x1074>
    869c:	str	r3, [sp]
    86a0:	ldr	r3, [pc, #-4032]	; 76e8 <eval_string+0x1078>
    86a4:	ldr	r1, [pc, #-4032]	; 76ec <eval_string+0x107c>
    86a8:	mvn	r0, #0
    86ac:	bl	0 <coda_set_error>
    86b0:	mvn	r3, #0
    86b4:	b	8be8 <eval_string+0x2578>
    86b8:	ldr	r3, [fp, #4]
    86bc:	ldr	r0, [r3]
    86c0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    86c4:	ldr	r3, [r3]
    86c8:	mov	r2, r3
    86cc:	ldr	r1, [fp, #-68]	; 0xffffffbc
    86d0:	bl	0 <memcpy>
    86d4:	b	8bd0 <eval_string+0x2560>
    86d8:	ldr	r3, [fp, #-904]	; 0xfffffc78
    86dc:	ldr	r3, [r3]
    86e0:	cmp	r3, #0
    86e4:	bne	86fc <eval_string+0x208c>
    86e8:	ldr	r3, [pc, #1284]	; 8bf4 <eval_string+0x2584>
    86ec:	ldr	r2, [pc, #1284]	; 8bf8 <eval_string+0x2588>
    86f0:	ldr	r1, [pc, #1284]	; 8bfc <eval_string+0x258c>
    86f4:	ldr	r0, [pc, #1284]	; 8c00 <eval_string+0x2590>
    86f8:	bl	0 <__assert_fail>
    86fc:	ldr	r3, [fp, #-904]	; 0xfffffc78
    8700:	ldr	r3, [r3]
    8704:	ldr	r3, [r3]
    8708:	sub	r2, fp, #356	; 0x164
    870c:	mov	r1, r2
    8710:	mov	r0, r3
    8714:	bl	0 <coda_get_product_type>
    8718:	mov	r3, r0
    871c:	cmp	r3, #0
    8720:	beq	872c <eval_string+0x20bc>
    8724:	mvn	r3, #0
    8728:	b	8be8 <eval_string+0x2578>
    872c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    8730:	mov	r2, #0
    8734:	str	r2, [r3]
    8738:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    873c:	mov	r2, #0
    8740:	str	r2, [r3]
    8744:	ldr	r3, [fp, #-356]	; 0xfffffe9c
    8748:	cmp	r3, #0
    874c:	beq	8bd8 <eval_string+0x2568>
    8750:	ldr	r3, [fp, #-356]	; 0xfffffe9c
    8754:	mov	r0, r3
    8758:	bl	0 <strlen>
    875c:	mov	r3, r0
    8760:	mov	r2, r3
    8764:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8768:	str	r2, [r3]
    876c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8770:	ldr	r3, [r3]
    8774:	add	r3, r3, #1
    8778:	mov	r0, r3
    877c:	bl	0 <malloc>
    8780:	mov	r3, r0
    8784:	mov	r2, r3
    8788:	ldr	r3, [fp, #4]
    878c:	str	r2, [r3]
    8790:	ldr	r3, [fp, #4]
    8794:	ldr	r3, [r3]
    8798:	cmp	r3, #0
    879c:	bne	87cc <eval_string+0x215c>
    87a0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    87a4:	ldr	r3, [r3]
    87a8:	add	r2, r3, #1
    87ac:	ldr	r3, [pc, #1104]	; 8c04 <eval_string+0x2594>
    87b0:	str	r3, [sp]
    87b4:	ldr	r3, [pc, #1088]	; 8bfc <eval_string+0x258c>
    87b8:	ldr	r1, [pc, #1096]	; 8c08 <eval_string+0x2598>
    87bc:	mvn	r0, #0
    87c0:	bl	0 <coda_set_error>
    87c4:	mvn	r3, #0
    87c8:	b	8be8 <eval_string+0x2578>
    87cc:	ldr	r3, [fp, #4]
    87d0:	ldr	r0, [r3]
    87d4:	ldr	r1, [fp, #-356]	; 0xfffffe9c
    87d8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    87dc:	ldr	r3, [r3]
    87e0:	mov	r2, r3
    87e4:	bl	0 <memcpy>
    87e8:	b	8bd8 <eval_string+0x2568>
    87ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    87f0:	ldr	r3, [r3, #16]
    87f4:	sub	r2, fp, #364	; 0x16c
    87f8:	mov	r1, r3
    87fc:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8800:	bl	3094 <eval_float>
    8804:	mov	r3, r0
    8808:	cmp	r3, #0
    880c:	beq	8818 <eval_string+0x21a8>
    8810:	mvn	r3, #0
    8814:	b	8be8 <eval_string+0x2578>
    8818:	ldr	r3, [fp, #-56]	; 0xffffffc8
    881c:	ldr	r3, [r3, #20]
    8820:	cmp	r3, #0
    8824:	beq	88c0 <eval_string+0x2250>
    8828:	ldr	r3, [fp, #-56]	; 0xffffffc8
    882c:	ldr	r1, [r3, #20]
    8830:	sub	r0, fp, #372	; 0x174
    8834:	sub	r2, fp, #368	; 0x170
    8838:	sub	r3, fp, #376	; 0x178
    883c:	str	r3, [sp]
    8840:	mov	r3, r0
    8844:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8848:	bl	6670 <eval_string>
    884c:	mov	r3, r0
    8850:	cmp	r3, #0
    8854:	beq	8860 <eval_string+0x21f0>
    8858:	mvn	r3, #0
    885c:	b	8be8 <eval_string+0x2578>
    8860:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    8864:	cmp	r3, #0
    8868:	bge	8880 <eval_string+0x2210>
    886c:	ldr	r1, [pc, #920]	; 8c0c <eval_string+0x259c>
    8870:	mvn	r0, #400	; 0x190
    8874:	bl	0 <coda_set_error>
    8878:	mvn	r3, #0
    887c:	b	8be8 <eval_string+0x2578>
    8880:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    8884:	cmp	r3, #0
    8888:	bne	88a0 <eval_string+0x2230>
    888c:	ldr	r1, [pc, #892]	; 8c10 <eval_string+0x25a0>
    8890:	mvn	r0, #400	; 0x190
    8894:	bl	0 <coda_set_error>
    8898:	mvn	r3, #0
    889c:	b	8be8 <eval_string+0x2578>
    88a0:	ldr	r3, [fp, #-376]	; 0xfffffe88
    88a4:	ldr	r1, [fp, #-368]	; 0xfffffe90
    88a8:	ldr	r2, [fp, #-372]	; 0xfffffe8c
    88ac:	add	r2, r1, r2
    88b0:	add	r3, r3, r2
    88b4:	mov	r2, #0
    88b8:	strb	r2, [r3]
    88bc:	b	88e4 <eval_string+0x2274>
    88c0:	ldr	r3, [pc, #844]	; 8c14 <eval_string+0x25a4>
    88c4:	str	r3, [fp, #-376]	; 0xfffffe88
    88c8:	ldr	r3, [fp, #-376]	; 0xfffffe88
    88cc:	mov	r0, r3
    88d0:	bl	0 <strlen>
    88d4:	mov	r3, r0
    88d8:	str	r3, [fp, #-372]	; 0xfffffe8c
    88dc:	mov	r3, #0
    88e0:	str	r3, [fp, #-368]	; 0xfffffe90
    88e4:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    88e8:	add	r3, r3, #1
    88ec:	mov	r0, r3
    88f0:	bl	0 <malloc>
    88f4:	mov	r3, r0
    88f8:	mov	r2, r3
    88fc:	ldr	r3, [fp, #4]
    8900:	str	r2, [r3]
    8904:	ldr	r3, [fp, #4]
    8908:	ldr	r3, [r3]
    890c:	cmp	r3, #0
    8910:	bne	895c <eval_string+0x22ec>
    8914:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8918:	ldr	r3, [r3, #20]
    891c:	cmp	r3, #0
    8920:	beq	8930 <eval_string+0x22c0>
    8924:	ldr	r3, [fp, #-376]	; 0xfffffe88
    8928:	mov	r0, r3
    892c:	bl	0 <free>
    8930:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8934:	ldr	r3, [r3]
    8938:	add	r2, r3, #1
    893c:	ldr	r3, [pc, #724]	; 8c18 <eval_string+0x25a8>
    8940:	str	r3, [sp]
    8944:	ldr	r3, [pc, #688]	; 8bfc <eval_string+0x258c>
    8948:	ldr	r1, [pc, #696]	; 8c08 <eval_string+0x2598>
    894c:	mvn	r0, #0
    8950:	bl	0 <coda_set_error>
    8954:	mvn	r3, #0
    8958:	b	8be8 <eval_string+0x2578>
    895c:	vldr	d7, [fp, #-364]	; 0xfffffe94
    8960:	ldr	r3, [fp, #-376]	; 0xfffffe88
    8964:	ldr	r2, [fp, #-368]	; 0xfffffe90
    8968:	add	r2, r3, r2
    896c:	ldr	r3, [fp, #4]
    8970:	ldr	r3, [r3]
    8974:	mov	r1, r3
    8978:	mov	r0, r2
    897c:	vmov.f64	d0, d7
    8980:	bl	0 <coda_time_double_to_string>
    8984:	mov	r3, r0
    8988:	cmp	r3, #0
    898c:	beq	89b4 <eval_string+0x2344>
    8990:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8994:	ldr	r3, [r3, #20]
    8998:	cmp	r3, #0
    899c:	beq	89ac <eval_string+0x233c>
    89a0:	ldr	r3, [fp, #-376]	; 0xfffffe88
    89a4:	mov	r0, r3
    89a8:	bl	0 <free>
    89ac:	mvn	r3, #0
    89b0:	b	8be8 <eval_string+0x2578>
    89b4:	ldr	r3, [fp, #-912]	; 0xfffffc70
    89b8:	mov	r2, #0
    89bc:	str	r2, [r3]
    89c0:	ldr	r3, [fp, #4]
    89c4:	ldr	r3, [r3]
    89c8:	mov	r0, r3
    89cc:	bl	0 <strlen>
    89d0:	mov	r3, r0
    89d4:	mov	r2, r3
    89d8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    89dc:	str	r2, [r3]
    89e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    89e4:	ldr	r3, [r3, #20]
    89e8:	cmp	r3, #0
    89ec:	beq	8be0 <eval_string+0x2570>
    89f0:	ldr	r3, [fp, #-376]	; 0xfffffe88
    89f4:	mov	r0, r3
    89f8:	bl	0 <free>
    89fc:	b	8be0 <eval_string+0x2570>
    8a00:	ldr	r3, [fp, #-904]	; 0xfffffc78
    8a04:	ldr	r3, [r3]
    8a08:	cmp	r3, #0
    8a0c:	bne	8a24 <eval_string+0x23b4>
    8a10:	ldr	r3, [pc, #476]	; 8bf4 <eval_string+0x2584>
    8a14:	ldr	r2, [pc, #512]	; 8c1c <eval_string+0x25ac>
    8a18:	ldr	r1, [pc, #476]	; 8bfc <eval_string+0x258c>
    8a1c:	ldr	r0, [pc, #476]	; 8c00 <eval_string+0x2590>
    8a20:	bl	0 <__assert_fail>
    8a24:	ldr	r3, [fp, #-904]	; 0xfffffc78
    8a28:	sub	r0, fp, #900	; 0x384
    8a2c:	add	r3, r3, #8
    8a30:	mov	r2, #520	; 0x208
    8a34:	mov	r1, r3
    8a38:	bl	0 <memcpy>
    8a3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8a40:	ldr	r3, [r3, #16]
    8a44:	mov	r1, r3
    8a48:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8a4c:	bl	9098 <eval_cursor>
    8a50:	mov	r3, r0
    8a54:	cmp	r3, #0
    8a58:	beq	8a64 <eval_string+0x23f4>
    8a5c:	mvn	r3, #0
    8a60:	b	8be8 <eval_string+0x2578>
    8a64:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8a68:	ldr	r1, [r3, #20]
    8a6c:	ldr	r3, [fp, #4]
    8a70:	str	r3, [sp]
    8a74:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8a78:	ldr	r2, [fp, #-912]	; 0xfffffc70
    8a7c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8a80:	bl	6670 <eval_string>
    8a84:	mov	r3, r0
    8a88:	cmp	r3, #0
    8a8c:	beq	8a98 <eval_string+0x2428>
    8a90:	mvn	r3, #0
    8a94:	b	8be8 <eval_string+0x2578>
    8a98:	ldr	r3, [fp, #-904]	; 0xfffffc78
    8a9c:	add	r3, r3, #8
    8aa0:	sub	r1, fp, #900	; 0x384
    8aa4:	mov	r2, #520	; 0x208
    8aa8:	mov	r0, r3
    8aac:	bl	0 <memcpy>
    8ab0:	b	8be4 <eval_string+0x2574>
    8ab4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8ab8:	ldr	r3, [r3, #12]
    8abc:	ldrb	r3, [r3]
    8ac0:	sub	r3, r3, #105	; 0x69
    8ac4:	str	r3, [fp, #-72]	; 0xffffffb8
    8ac8:	ldr	r2, [fp, #-904]	; 0xfffffc78
    8acc:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8ad0:	add	r3, r3, #66	; 0x42
    8ad4:	lsl	r3, r3, #3
    8ad8:	add	r3, r2, r3
    8adc:	ldrd	r2, [r3]
    8ae0:	strd	r2, [fp, #-84]	; 0xffffffac
    8ae4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8ae8:	ldr	r1, [r3, #16]
    8aec:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8af0:	add	r3, r3, #66	; 0x42
    8af4:	lsl	r3, r3, #3
    8af8:	ldr	r2, [fp, #-904]	; 0xfffffc78
    8afc:	add	r3, r2, r3
    8b00:	mov	r2, r3
    8b04:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8b08:	bl	442c <eval_integer>
    8b0c:	mov	r3, r0
    8b10:	cmp	r3, #0
    8b14:	beq	8b20 <eval_string+0x24b0>
    8b18:	mvn	r3, #0
    8b1c:	b	8be8 <eval_string+0x2578>
    8b20:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8b24:	ldr	r1, [r3, #20]
    8b28:	ldr	r3, [fp, #4]
    8b2c:	str	r3, [sp]
    8b30:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8b34:	ldr	r2, [fp, #-912]	; 0xfffffc70
    8b38:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8b3c:	bl	6670 <eval_string>
    8b40:	mov	r3, r0
    8b44:	cmp	r3, #0
    8b48:	beq	8b54 <eval_string+0x24e4>
    8b4c:	mvn	r3, #0
    8b50:	b	8be8 <eval_string+0x2578>
    8b54:	ldr	r2, [fp, #-904]	; 0xfffffc78
    8b58:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8b5c:	add	r3, r3, #66	; 0x42
    8b60:	lsl	r3, r3, #3
    8b64:	add	r1, r2, r3
    8b68:	ldrd	r2, [fp, #-84]	; 0xffffffac
    8b6c:	strd	r2, [r1]
    8b70:	b	8be4 <eval_string+0x2574>
    8b74:	ldr	r3, [pc, #120]	; 8bf4 <eval_string+0x2584>
    8b78:	ldr	r2, [pc, #160]	; 8c20 <eval_string+0x25b0>
    8b7c:	ldr	r1, [pc, #120]	; 8bfc <eval_string+0x258c>
    8b80:	ldr	r0, [pc, #156]	; 8c24 <eval_string+0x25b4>
    8b84:	bl	0 <__assert_fail>
    8b88:	nop			; (mov r0, r0)
    8b8c:	b	8be4 <eval_string+0x2574>
    8b90:	nop			; (mov r0, r0)
    8b94:	b	8be4 <eval_string+0x2574>
    8b98:	nop			; (mov r0, r0)
    8b9c:	b	8be4 <eval_string+0x2574>
    8ba0:	nop			; (mov r0, r0)
    8ba4:	b	8be4 <eval_string+0x2574>
    8ba8:	nop			; (mov r0, r0)
    8bac:	b	8be4 <eval_string+0x2574>
    8bb0:	nop			; (mov r0, r0)
    8bb4:	b	8be4 <eval_string+0x2574>
    8bb8:	nop			; (mov r0, r0)
    8bbc:	b	8be4 <eval_string+0x2574>
    8bc0:	nop			; (mov r0, r0)
    8bc4:	b	8be4 <eval_string+0x2574>
    8bc8:	nop			; (mov r0, r0)
    8bcc:	b	8be4 <eval_string+0x2574>
    8bd0:	nop			; (mov r0, r0)
    8bd4:	b	8be4 <eval_string+0x2574>
    8bd8:	nop			; (mov r0, r0)
    8bdc:	b	8be4 <eval_string+0x2574>
    8be0:	nop			; (mov r0, r0)
    8be4:	mov	r3, #0
    8be8:	mov	r0, r3
    8bec:	sub	sp, fp, #28
    8bf0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    8bf4:	.word	0x00000ed8
    8bf8:	.word	0x00000e5c
    8bfc:	.word	0x00000024
    8c00:	.word	0x0000017c
    8c04:	.word	0x00000e6a
    8c08:	.word	0x00000358
    8c0c:	.word	0x00000280
    8c10:	.word	0x00000490
    8c14:	.word	0x000004a4
    8c18:	.word	0x00000e9c
    8c1c:	.word	0x00000eb3
    8c20:	.word	0x00000ed2
    8c24:	.word	0x000000a4

00008c28 <eval_void>:
    8c28:	push	{fp, lr}
    8c2c:	add	fp, sp, #4
    8c30:	sub	sp, sp, #72	; 0x48
    8c34:	str	r0, [fp, #-72]	; 0xffffffb8
    8c38:	str	r1, [fp, #-76]	; 0xffffffb4
    8c3c:	ldr	r3, [fp, #-76]	; 0xffffffb4
    8c40:	str	r3, [fp, #-8]
    8c44:	ldr	r3, [fp, #-8]
    8c48:	ldr	r3, [r3]
    8c4c:	cmp	r3, #39	; 0x27
    8c50:	beq	8ef8 <eval_void+0x2d0>
    8c54:	cmp	r3, #39	; 0x27
    8c58:	bhi	8c68 <eval_void+0x40>
    8c5c:	cmp	r3, #31
    8c60:	beq	8c7c <eval_void+0x54>
    8c64:	b	904c <eval_void+0x424>
    8c68:	cmp	r3, #74	; 0x4a
    8c6c:	beq	8f20 <eval_void+0x2f8>
    8c70:	cmp	r3, #84	; 0x54
    8c74:	beq	8f70 <eval_void+0x348>
    8c78:	b	904c <eval_void+0x424>
    8c7c:	mov	r2, #1
    8c80:	mov	r3, #0
    8c84:	strd	r2, [fp, #-44]	; 0xffffffd4
    8c88:	ldr	r3, [fp, #-8]
    8c8c:	ldr	r3, [r3, #12]
    8c90:	ldrb	r3, [r3]
    8c94:	sub	r3, r3, #105	; 0x69
    8c98:	str	r3, [fp, #-12]
    8c9c:	ldr	r2, [fp, #-72]	; 0xffffffb8
    8ca0:	ldr	r3, [fp, #-12]
    8ca4:	add	r3, r3, #66	; 0x42
    8ca8:	lsl	r3, r3, #3
    8cac:	add	r3, r2, r3
    8cb0:	ldrd	r2, [r3]
    8cb4:	strd	r2, [fp, #-20]	; 0xffffffec
    8cb8:	ldr	r3, [fp, #-8]
    8cbc:	ldr	r3, [r3, #16]
    8cc0:	sub	r2, fp, #28
    8cc4:	mov	r1, r3
    8cc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8ccc:	bl	442c <eval_integer>
    8cd0:	mov	r3, r0
    8cd4:	cmp	r3, #0
    8cd8:	beq	8ce4 <eval_void+0xbc>
    8cdc:	mvn	r3, #0
    8ce0:	b	9070 <eval_void+0x448>
    8ce4:	ldr	r3, [fp, #-8]
    8ce8:	ldr	r3, [r3, #20]
    8cec:	sub	r2, fp, #36	; 0x24
    8cf0:	mov	r1, r3
    8cf4:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8cf8:	bl	442c <eval_integer>
    8cfc:	mov	r3, r0
    8d00:	cmp	r3, #0
    8d04:	beq	8d10 <eval_void+0xe8>
    8d08:	mvn	r3, #0
    8d0c:	b	9070 <eval_void+0x448>
    8d10:	ldr	r3, [fp, #-8]
    8d14:	ldr	r3, [r3, #24]
    8d18:	cmp	r3, #0
    8d1c:	beq	8d6c <eval_void+0x144>
    8d20:	ldr	r3, [fp, #-8]
    8d24:	ldr	r3, [r3, #24]
    8d28:	sub	r2, fp, #44	; 0x2c
    8d2c:	mov	r1, r3
    8d30:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8d34:	bl	442c <eval_integer>
    8d38:	mov	r3, r0
    8d3c:	cmp	r3, #0
    8d40:	beq	8d4c <eval_void+0x124>
    8d44:	mvn	r3, #0
    8d48:	b	9070 <eval_void+0x448>
    8d4c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    8d50:	orrs	r3, r2, r3
    8d54:	bne	8d6c <eval_void+0x144>
    8d58:	ldr	r1, [pc, #796]	; 907c <eval_void+0x454>
    8d5c:	mvn	r0, #400	; 0x190
    8d60:	bl	0 <coda_set_error>
    8d64:	mvn	r3, #0
    8d68:	b	9070 <eval_void+0x448>
    8d6c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    8d70:	cmp	r2, #1
    8d74:	sbcs	r3, r3, #0
    8d78:	blt	8e2c <eval_void+0x204>
    8d7c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    8d80:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8d84:	ldr	r1, [fp, #-12]
    8d88:	add	r1, r1, #66	; 0x42
    8d8c:	lsl	r1, r1, #3
    8d90:	add	r1, r0, r1
    8d94:	strd	r2, [r1]
    8d98:	b	8e00 <eval_void+0x1d8>
    8d9c:	ldr	r3, [fp, #-8]
    8da0:	ldr	r3, [r3, #28]
    8da4:	mov	r1, r3
    8da8:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8dac:	bl	8c28 <eval_void>
    8db0:	mov	r3, r0
    8db4:	cmp	r3, #0
    8db8:	beq	8dc4 <eval_void+0x19c>
    8dbc:	mvn	r3, #0
    8dc0:	b	9070 <eval_void+0x448>
    8dc4:	ldr	r2, [fp, #-72]	; 0xffffffb8
    8dc8:	ldr	r3, [fp, #-12]
    8dcc:	add	r3, r3, #66	; 0x42
    8dd0:	lsl	r3, r3, #3
    8dd4:	add	r3, r2, r3
    8dd8:	ldrd	r0, [r3]
    8ddc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    8de0:	adds	r2, r2, r0
    8de4:	adc	r3, r3, r1
    8de8:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8dec:	ldr	r1, [fp, #-12]
    8df0:	add	r1, r1, #66	; 0x42
    8df4:	lsl	r1, r1, #3
    8df8:	add	r1, r0, r1
    8dfc:	strd	r2, [r1]
    8e00:	ldr	r2, [fp, #-72]	; 0xffffffb8
    8e04:	ldr	r3, [fp, #-12]
    8e08:	add	r3, r3, #66	; 0x42
    8e0c:	lsl	r3, r3, #3
    8e10:	add	r3, r2, r3
    8e14:	ldrd	r2, [r3]
    8e18:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    8e1c:	cmp	r0, r2
    8e20:	sbcs	r3, r1, r3
    8e24:	bge	8d9c <eval_void+0x174>
    8e28:	b	8ed8 <eval_void+0x2b0>
    8e2c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    8e30:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8e34:	ldr	r1, [fp, #-12]
    8e38:	add	r1, r1, #66	; 0x42
    8e3c:	lsl	r1, r1, #3
    8e40:	add	r1, r0, r1
    8e44:	strd	r2, [r1]
    8e48:	b	8eb0 <eval_void+0x288>
    8e4c:	ldr	r3, [fp, #-8]
    8e50:	ldr	r3, [r3, #28]
    8e54:	mov	r1, r3
    8e58:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8e5c:	bl	8c28 <eval_void>
    8e60:	mov	r3, r0
    8e64:	cmp	r3, #0
    8e68:	beq	8e74 <eval_void+0x24c>
    8e6c:	mvn	r3, #0
    8e70:	b	9070 <eval_void+0x448>
    8e74:	ldr	r2, [fp, #-72]	; 0xffffffb8
    8e78:	ldr	r3, [fp, #-12]
    8e7c:	add	r3, r3, #66	; 0x42
    8e80:	lsl	r3, r3, #3
    8e84:	add	r3, r2, r3
    8e88:	ldrd	r0, [r3]
    8e8c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    8e90:	adds	r2, r2, r0
    8e94:	adc	r3, r3, r1
    8e98:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8e9c:	ldr	r1, [fp, #-12]
    8ea0:	add	r1, r1, #66	; 0x42
    8ea4:	lsl	r1, r1, #3
    8ea8:	add	r1, r0, r1
    8eac:	strd	r2, [r1]
    8eb0:	ldr	r2, [fp, #-72]	; 0xffffffb8
    8eb4:	ldr	r3, [fp, #-12]
    8eb8:	add	r3, r3, #66	; 0x42
    8ebc:	lsl	r3, r3, #3
    8ec0:	add	r3, r2, r3
    8ec4:	ldrd	r0, [r3]
    8ec8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    8ecc:	cmp	r0, r2
    8ed0:	sbcs	r3, r1, r3
    8ed4:	bge	8e4c <eval_void+0x224>
    8ed8:	ldr	r2, [fp, #-72]	; 0xffffffb8
    8edc:	ldr	r3, [fp, #-12]
    8ee0:	add	r3, r3, #66	; 0x42
    8ee4:	lsl	r3, r3, #3
    8ee8:	add	r1, r2, r3
    8eec:	ldrd	r2, [fp, #-20]	; 0xffffffec
    8ef0:	strd	r2, [r1]
    8ef4:	b	906c <eval_void+0x444>
    8ef8:	ldr	r3, [fp, #-8]
    8efc:	ldr	r3, [r3, #16]
    8f00:	mov	r1, r3
    8f04:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8f08:	bl	9098 <eval_cursor>
    8f0c:	mov	r3, r0
    8f10:	cmp	r3, #0
    8f14:	beq	9060 <eval_void+0x438>
    8f18:	mvn	r3, #0
    8f1c:	b	9070 <eval_void+0x448>
    8f20:	ldr	r3, [fp, #-8]
    8f24:	ldr	r3, [r3, #16]
    8f28:	mov	r1, r3
    8f2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8f30:	bl	8c28 <eval_void>
    8f34:	mov	r3, r0
    8f38:	cmp	r3, #0
    8f3c:	beq	8f48 <eval_void+0x320>
    8f40:	mvn	r3, #0
    8f44:	b	9070 <eval_void+0x448>
    8f48:	ldr	r3, [fp, #-8]
    8f4c:	ldr	r3, [r3, #20]
    8f50:	mov	r1, r3
    8f54:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8f58:	bl	8c28 <eval_void>
    8f5c:	mov	r3, r0
    8f60:	cmp	r3, #0
    8f64:	beq	9068 <eval_void+0x440>
    8f68:	mvn	r3, #0
    8f6c:	b	9070 <eval_void+0x448>
    8f70:	mov	r2, #0
    8f74:	mov	r3, #0
    8f78:	strd	r2, [fp, #-60]	; 0xffffffc4
    8f7c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8f80:	ldr	r3, [r3]
    8f84:	cmp	r3, #0
    8f88:	bne	8fa0 <eval_void+0x378>
    8f8c:	ldr	r3, [pc, #236]	; 9080 <eval_void+0x458>
    8f90:	ldr	r2, [pc, #236]	; 9084 <eval_void+0x45c>
    8f94:	ldr	r1, [pc, #236]	; 9088 <eval_void+0x460>
    8f98:	ldr	r0, [pc, #236]	; 908c <eval_void+0x464>
    8f9c:	bl	0 <__assert_fail>
    8fa0:	ldr	r3, [fp, #-8]
    8fa4:	ldr	r3, [r3, #16]
    8fa8:	cmp	r3, #0
    8fac:	beq	8fdc <eval_void+0x3b4>
    8fb0:	ldr	r3, [fp, #-8]
    8fb4:	ldr	r3, [r3, #16]
    8fb8:	sub	r2, fp, #60	; 0x3c
    8fbc:	mov	r1, r3
    8fc0:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8fc4:	bl	442c <eval_integer>
    8fc8:	mov	r3, r0
    8fcc:	cmp	r3, #0
    8fd0:	beq	8fdc <eval_void+0x3b4>
    8fd4:	mvn	r3, #0
    8fd8:	b	9070 <eval_void+0x448>
    8fdc:	ldr	r3, [fp, #-8]
    8fe0:	ldr	r3, [r3, #20]
    8fe4:	sub	r2, fp, #68	; 0x44
    8fe8:	mov	r1, r3
    8fec:	ldr	r0, [fp, #-72]	; 0xffffffb8
    8ff0:	bl	442c <eval_integer>
    8ff4:	mov	r3, r0
    8ff8:	cmp	r3, #0
    8ffc:	beq	9008 <eval_void+0x3e0>
    9000:	mvn	r3, #0
    9004:	b	9070 <eval_void+0x448>
    9008:	ldr	r3, [fp, #-72]	; 0xffffffb8
    900c:	ldr	r3, [r3]
    9010:	ldr	r0, [r3]
    9014:	ldr	r3, [fp, #-8]
    9018:	ldr	r1, [r3, #12]
    901c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    9020:	sub	r3, fp, #48	; 0x30
    9024:	bl	0 <coda_product_variable_get_pointer>
    9028:	mov	r3, r0
    902c:	cmp	r3, #0
    9030:	beq	903c <eval_void+0x414>
    9034:	mvn	r3, #0
    9038:	b	9070 <eval_void+0x448>
    903c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    9040:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    9044:	strd	r2, [r1]
    9048:	b	906c <eval_void+0x444>
    904c:	ldr	r3, [pc, #44]	; 9080 <eval_void+0x458>
    9050:	ldr	r2, [pc, #56]	; 9090 <eval_void+0x468>
    9054:	ldr	r1, [pc, #44]	; 9088 <eval_void+0x460>
    9058:	ldr	r0, [pc, #52]	; 9094 <eval_void+0x46c>
    905c:	bl	0 <__assert_fail>
    9060:	nop			; (mov r0, r0)
    9064:	b	906c <eval_void+0x444>
    9068:	nop			; (mov r0, r0)
    906c:	mov	r3, #0
    9070:	mov	r0, r3
    9074:	sub	sp, fp, #4
    9078:	pop	{fp, pc}
    907c:	.word	0x000004c4
    9080:	.word	0x00000ee4
    9084:	.word	0x00000f29
    9088:	.word	0x00000024
    908c:	.word	0x0000017c
    9090:	.word	0x00000f3e
    9094:	.word	0x000000a4

00009098 <eval_cursor>:
    9098:	push	{fp, lr}
    909c:	add	fp, sp, #4
    90a0:	sub	sp, sp, #40	; 0x28
    90a4:	str	r0, [fp, #-40]	; 0xffffffd8
    90a8:	str	r1, [fp, #-44]	; 0xffffffd4
    90ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
    90b0:	ldr	r3, [r3]
    90b4:	cmp	r3, #0
    90b8:	bne	90d0 <eval_cursor+0x38>
    90bc:	ldr	r3, [pc, #1432]	; 965c <eval_cursor+0x5c4>
    90c0:	ldr	r2, [pc, #1432]	; 9660 <eval_cursor+0x5c8>
    90c4:	ldr	r1, [pc, #1432]	; 9664 <eval_cursor+0x5cc>
    90c8:	ldr	r0, [pc, #1432]	; 9668 <eval_cursor+0x5d0>
    90cc:	bl	0 <__assert_fail>
    90d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    90d4:	str	r3, [fp, #-8]
    90d8:	ldr	r3, [fp, #-8]
    90dc:	ldr	r3, [r3]
    90e0:	sub	r3, r3, #10
    90e4:	cmp	r3, #28
    90e8:	ldrls	pc, [pc, r3, lsl #2]
    90ec:	b	9604 <eval_cursor+0x56c>
    90f0:	.word	0x00009584
    90f4:	.word	0x00009604
    90f8:	.word	0x00009604
    90fc:	.word	0x00009604
    9100:	.word	0x00009604
    9104:	.word	0x00009604
    9108:	.word	0x00009604
    910c:	.word	0x00009604
    9110:	.word	0x00009604
    9114:	.word	0x00009604
    9118:	.word	0x00009604
    911c:	.word	0x00009604
    9120:	.word	0x00009604
    9124:	.word	0x00009604
    9128:	.word	0x00009604
    912c:	.word	0x00009604
    9130:	.word	0x00009604
    9134:	.word	0x00009604
    9138:	.word	0x00009604
    913c:	.word	0x00009604
    9140:	.word	0x00009604
    9144:	.word	0x00009604
    9148:	.word	0x000092e8
    914c:	.word	0x000094f8
    9150:	.word	0x00009164
    9154:	.word	0x000091bc
    9158:	.word	0x00009618
    915c:	.word	0x0000949c
    9160:	.word	0x00009188
    9164:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9168:	ldr	r2, [r3]
    916c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9170:	add	r3, r3, #8
    9174:	mov	r1, r2
    9178:	mov	r2, #520	; 0x208
    917c:	mov	r0, r3
    9180:	bl	0 <memcpy>
    9184:	b	964c <eval_cursor+0x5b4>
    9188:	ldr	r3, [fp, #-40]	; 0xffffffd8
    918c:	add	r2, r3, #8
    9190:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9194:	ldr	r3, [r3]
    9198:	ldr	r3, [r3]
    919c:	mov	r1, r3
    91a0:	mov	r0, r2
    91a4:	bl	0 <coda_cursor_set_product>
    91a8:	mov	r3, r0
    91ac:	cmp	r3, #0
    91b0:	beq	9620 <eval_cursor+0x588>
    91b4:	mvn	r3, #0
    91b8:	b	9650 <eval_cursor+0x5b8>
    91bc:	ldr	r3, [fp, #-8]
    91c0:	ldr	r3, [r3, #16]
    91c4:	cmp	r3, #0
    91c8:	beq	91f4 <eval_cursor+0x15c>
    91cc:	ldr	r3, [fp, #-8]
    91d0:	ldr	r3, [r3, #16]
    91d4:	mov	r1, r3
    91d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    91dc:	bl	9098 <eval_cursor>
    91e0:	mov	r3, r0
    91e4:	cmp	r3, #0
    91e8:	beq	91f4 <eval_cursor+0x15c>
    91ec:	mvn	r3, #0
    91f0:	b	9650 <eval_cursor+0x5b8>
    91f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    91f8:	add	r3, r3, #8
    91fc:	sub	r2, fp, #12
    9200:	mov	r1, r2
    9204:	mov	r0, r3
    9208:	bl	0 <coda_cursor_get_type_class>
    920c:	mov	r3, r0
    9210:	cmp	r3, #0
    9214:	beq	9220 <eval_cursor+0x188>
    9218:	mvn	r3, #0
    921c:	b	9650 <eval_cursor+0x5b8>
    9220:	ldr	r3, [fp, #-12]
    9224:	cmp	r3, #6
    9228:	bne	9250 <eval_cursor+0x1b8>
    922c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9230:	add	r3, r3, #8
    9234:	mov	r0, r3
    9238:	bl	0 <coda_cursor_use_base_type_of_special_type>
    923c:	mov	r3, r0
    9240:	cmp	r3, #0
    9244:	beq	9250 <eval_cursor+0x1b8>
    9248:	mvn	r3, #0
    924c:	b	9650 <eval_cursor+0x5b8>
    9250:	ldr	r3, [fp, #-8]
    9254:	ldr	r3, [r3, #12]
    9258:	cmp	r3, #0
    925c:	beq	9290 <eval_cursor+0x1f8>
    9260:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9264:	add	r2, r3, #8
    9268:	ldr	r3, [fp, #-8]
    926c:	ldr	r3, [r3, #12]
    9270:	mov	r1, r3
    9274:	mov	r0, r2
    9278:	bl	0 <coda_cursor_goto_record_field_by_name>
    927c:	mov	r3, r0
    9280:	cmp	r3, #0
    9284:	beq	9628 <eval_cursor+0x590>
    9288:	mvn	r3, #0
    928c:	b	9650 <eval_cursor+0x5b8>
    9290:	ldr	r3, [fp, #-8]
    9294:	ldr	r3, [r3, #20]
    9298:	sub	r2, fp, #20
    929c:	mov	r1, r3
    92a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    92a4:	bl	442c <eval_integer>
    92a8:	mov	r3, r0
    92ac:	cmp	r3, #0
    92b0:	beq	92bc <eval_cursor+0x224>
    92b4:	mvn	r3, #0
    92b8:	b	9650 <eval_cursor+0x5b8>
    92bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    92c0:	add	r0, r3, #8
    92c4:	ldrd	r2, [fp, #-20]	; 0xffffffec
    92c8:	mov	r3, r2
    92cc:	mov	r1, r3
    92d0:	bl	0 <coda_cursor_goto_record_field_by_index>
    92d4:	mov	r3, r0
    92d8:	cmp	r3, #0
    92dc:	beq	9628 <eval_cursor+0x590>
    92e0:	mvn	r3, #0
    92e4:	b	9650 <eval_cursor+0x5b8>
    92e8:	ldr	r3, [fp, #-8]
    92ec:	ldr	r3, [r3, #16]
    92f0:	cmp	r3, #0
    92f4:	beq	9320 <eval_cursor+0x288>
    92f8:	ldr	r3, [fp, #-8]
    92fc:	ldr	r3, [r3, #16]
    9300:	mov	r1, r3
    9304:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9308:	bl	9098 <eval_cursor>
    930c:	mov	r3, r0
    9310:	cmp	r3, #0
    9314:	beq	9354 <eval_cursor+0x2bc>
    9318:	mvn	r3, #0
    931c:	b	9650 <eval_cursor+0x5b8>
    9320:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9324:	add	r2, r3, #8
    9328:	ldr	r3, [fp, #-40]	; 0xffffffd8
    932c:	ldr	r3, [r3]
    9330:	ldr	r3, [r3]
    9334:	mov	r1, r3
    9338:	mov	r0, r2
    933c:	bl	0 <coda_cursor_set_product>
    9340:	mov	r3, r0
    9344:	cmp	r3, #0
    9348:	beq	9354 <eval_cursor+0x2bc>
    934c:	mvn	r3, #0
    9350:	b	9650 <eval_cursor+0x5b8>
    9354:	ldr	r3, [fp, #-8]
    9358:	ldr	r3, [r3, #20]
    935c:	sub	r2, fp, #28
    9360:	mov	r1, r3
    9364:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9368:	bl	442c <eval_integer>
    936c:	mov	r3, r0
    9370:	cmp	r3, #0
    9374:	beq	9380 <eval_cursor+0x2e8>
    9378:	mvn	r3, #0
    937c:	b	9650 <eval_cursor+0x5b8>
    9380:	ldr	r3, [pc, #740]	; 966c <eval_cursor+0x5d4>
    9384:	ldr	r3, [pc, r3]
    9388:	bl	0 <__aeabi_read_tp>
    938c:	mov	r2, r0
    9390:	ldr	r3, [r2, r3]
    9394:	cmp	r3, #0
    9398:	bne	9470 <eval_cursor+0x3d8>
    939c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    93a0:	add	r3, r3, #8
    93a4:	sub	r2, fp, #36	; 0x24
    93a8:	mov	r1, r2
    93ac:	mov	r0, r3
    93b0:	bl	0 <coda_cursor_get_type_class>
    93b4:	mov	r3, r0
    93b8:	cmp	r3, #0
    93bc:	beq	93c8 <eval_cursor+0x330>
    93c0:	mvn	r3, #0
    93c4:	b	9650 <eval_cursor+0x5b8>
    93c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    93cc:	cmp	r3, #1
    93d0:	beq	93fc <eval_cursor+0x364>
    93d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    93d8:	mov	r0, r3
    93dc:	bl	0 <coda_type_get_class_name>
    93e0:	mov	r3, r0
    93e4:	mov	r2, r3
    93e8:	ldr	r1, [pc, #640]	; 9670 <eval_cursor+0x5d8>
    93ec:	mvn	r0, #104	; 0x68
    93f0:	bl	0 <coda_set_error>
    93f4:	mvn	r3, #0
    93f8:	b	946c <eval_cursor+0x3d4>
    93fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9400:	add	r3, r3, #8
    9404:	sub	r2, fp, #32
    9408:	mov	r1, r2
    940c:	mov	r0, r3
    9410:	bl	0 <coda_cursor_get_num_elements>
    9414:	mov	r3, r0
    9418:	cmp	r3, #0
    941c:	beq	9428 <eval_cursor+0x390>
    9420:	mvn	r3, #0
    9424:	b	946c <eval_cursor+0x3d4>
    9428:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    942c:	cmp	r2, #0
    9430:	sbcs	r3, r3, #0
    9434:	blt	9454 <eval_cursor+0x3bc>
    9438:	ldr	r3, [fp, #-32]	; 0xffffffe0
    943c:	mov	r2, r3
    9440:	asr	r3, r2, #31
    9444:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    9448:	cmp	r0, r2
    944c:	sbcs	r3, r1, r3
    9450:	blt	9470 <eval_cursor+0x3d8>
    9454:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    9458:	ldr	r3, [fp, #-32]	; 0xffffffe0
    945c:	ldr	r1, [pc, #528]	; 9674 <eval_cursor+0x5dc>
    9460:	mvn	r0, #106	; 0x6a
    9464:	bl	0 <coda_set_error>
    9468:	mvn	r3, #0
    946c:	b	9650 <eval_cursor+0x5b8>
    9470:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9474:	add	r0, r3, #8
    9478:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    947c:	mov	r3, r2
    9480:	mov	r1, r3
    9484:	bl	0 <coda_cursor_goto_array_element_by_index>
    9488:	mov	r3, r0
    948c:	cmp	r3, #0
    9490:	beq	9630 <eval_cursor+0x598>
    9494:	mvn	r3, #0
    9498:	b	9650 <eval_cursor+0x5b8>
    949c:	ldr	r3, [fp, #-8]
    94a0:	ldr	r3, [r3, #16]
    94a4:	cmp	r3, #0
    94a8:	beq	94d4 <eval_cursor+0x43c>
    94ac:	ldr	r3, [fp, #-8]
    94b0:	ldr	r3, [r3, #16]
    94b4:	mov	r1, r3
    94b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    94bc:	bl	9098 <eval_cursor>
    94c0:	mov	r3, r0
    94c4:	cmp	r3, #0
    94c8:	beq	94d4 <eval_cursor+0x43c>
    94cc:	mvn	r3, #0
    94d0:	b	9650 <eval_cursor+0x5b8>
    94d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    94d8:	add	r3, r3, #8
    94dc:	mov	r0, r3
    94e0:	bl	0 <coda_cursor_goto_parent>
    94e4:	mov	r3, r0
    94e8:	cmp	r3, #0
    94ec:	beq	9638 <eval_cursor+0x5a0>
    94f0:	mvn	r3, #0
    94f4:	b	9650 <eval_cursor+0x5b8>
    94f8:	ldr	r3, [fp, #-8]
    94fc:	ldr	r3, [r3, #16]
    9500:	cmp	r3, #0
    9504:	beq	9530 <eval_cursor+0x498>
    9508:	ldr	r3, [fp, #-8]
    950c:	ldr	r3, [r3, #16]
    9510:	mov	r1, r3
    9514:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9518:	bl	9098 <eval_cursor>
    951c:	mov	r3, r0
    9520:	cmp	r3, #0
    9524:	beq	9530 <eval_cursor+0x498>
    9528:	mvn	r3, #0
    952c:	b	9650 <eval_cursor+0x5b8>
    9530:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9534:	add	r3, r3, #8
    9538:	mov	r0, r3
    953c:	bl	0 <coda_cursor_goto_attributes>
    9540:	mov	r3, r0
    9544:	cmp	r3, #0
    9548:	beq	9554 <eval_cursor+0x4bc>
    954c:	mvn	r3, #0
    9550:	b	9650 <eval_cursor+0x5b8>
    9554:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9558:	add	r2, r3, #8
    955c:	ldr	r3, [fp, #-8]
    9560:	ldr	r3, [r3, #12]
    9564:	mov	r1, r3
    9568:	mov	r0, r2
    956c:	bl	0 <coda_cursor_goto_record_field_by_name>
    9570:	mov	r3, r0
    9574:	cmp	r3, #0
    9578:	beq	9640 <eval_cursor+0x5a8>
    957c:	mvn	r3, #0
    9580:	b	9650 <eval_cursor+0x5b8>
    9584:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9588:	ldr	r3, [r3]
    958c:	ldr	r3, [r3]
    9590:	ldr	r3, [r3, #16]
    9594:	cmp	r3, #0
    9598:	beq	95d0 <eval_cursor+0x538>
    959c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    95a0:	ldr	r3, [r3]
    95a4:	ldr	r3, [r3]
    95a8:	ldr	r3, [r3, #16]
    95ac:	mov	r0, r3
    95b0:	bl	0 <coda_type_get_format_name>
    95b4:	mov	r3, r0
    95b8:	mov	r2, r3
    95bc:	ldr	r1, [pc, #180]	; 9678 <eval_cursor+0x5e0>
    95c0:	mvn	r0, #400	; 0x190
    95c4:	bl	0 <coda_set_error>
    95c8:	mvn	r3, #0
    95cc:	b	9650 <eval_cursor+0x5b8>
    95d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    95d4:	add	r2, r3, #8
    95d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    95dc:	ldr	r3, [r3]
    95e0:	ldr	r3, [r3]
    95e4:	mov	r1, r3
    95e8:	mov	r0, r2
    95ec:	bl	0 <coda_ascii_cursor_set_asciilines>
    95f0:	mov	r3, r0
    95f4:	cmp	r3, #0
    95f8:	beq	9648 <eval_cursor+0x5b0>
    95fc:	mvn	r3, #0
    9600:	b	9650 <eval_cursor+0x5b8>
    9604:	ldr	r3, [pc, #80]	; 965c <eval_cursor+0x5c4>
    9608:	ldr	r2, [pc, #108]	; 967c <eval_cursor+0x5e4>
    960c:	ldr	r1, [pc, #80]	; 9664 <eval_cursor+0x5cc>
    9610:	ldr	r0, [pc, #104]	; 9680 <eval_cursor+0x5e8>
    9614:	bl	0 <__assert_fail>
    9618:	nop			; (mov r0, r0)
    961c:	b	964c <eval_cursor+0x5b4>
    9620:	nop			; (mov r0, r0)
    9624:	b	964c <eval_cursor+0x5b4>
    9628:	nop			; (mov r0, r0)
    962c:	b	964c <eval_cursor+0x5b4>
    9630:	nop			; (mov r0, r0)
    9634:	b	964c <eval_cursor+0x5b4>
    9638:	nop			; (mov r0, r0)
    963c:	b	964c <eval_cursor+0x5b4>
    9640:	nop			; (mov r0, r0)
    9644:	b	964c <eval_cursor+0x5b4>
    9648:	nop			; (mov r0, r0)
    964c:	mov	r3, #0
    9650:	mov	r0, r3
    9654:	sub	sp, fp, #4
    9658:	pop	{fp, pc}
    965c:	.word	0x00000ef0
    9660:	.word	0x00000f49
    9664:	.word	0x00000024
    9668:	.word	0x0000017c
    966c:	.word	0x000002e0
    9670:	.word	0x000004e8
    9674:	.word	0x00000520
    9678:	.word	0x00000550
    967c:	.word	0x00000fef
    9680:	.word	0x000000a4

00009684 <coda_expression_eval_void>:
    9684:	push	{fp, lr}
    9688:	add	fp, sp, #4
    968c:	sub	sp, sp, #576	; 0x240
    9690:	str	r0, [fp, #-576]	; 0xfffffdc0
    9694:	str	r1, [fp, #-580]	; 0xfffffdbc
    9698:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    969c:	ldr	r3, [r3, #4]
    96a0:	cmp	r3, #5
    96a4:	beq	96bc <coda_expression_eval_void+0x38>
    96a8:	ldr	r1, [pc, #108]	; 971c <coda_expression_eval_void+0x98>
    96ac:	mvn	r0, #99	; 0x63
    96b0:	bl	0 <coda_set_error>
    96b4:	mvn	r3, #0
    96b8:	b	9710 <coda_expression_eval_void+0x8c>
    96bc:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    96c0:	cmp	r3, #0
    96c4:	bne	96ec <coda_expression_eval_void+0x68>
    96c8:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    96cc:	ldr	r3, [r3, #8]
    96d0:	cmp	r3, #0
    96d4:	bne	96ec <coda_expression_eval_void+0x68>
    96d8:	ldr	r1, [pc, #64]	; 9720 <coda_expression_eval_void+0x9c>
    96dc:	mvn	r0, #99	; 0x63
    96e0:	bl	0 <coda_set_error>
    96e4:	mvn	r3, #0
    96e8:	b	9710 <coda_expression_eval_void+0x8c>
    96ec:	sub	r3, fp, #572	; 0x23c
    96f0:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    96f4:	mov	r0, r3
    96f8:	bl	1208 <init_eval_info>
    96fc:	sub	r3, fp, #572	; 0x23c
    9700:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    9704:	mov	r0, r3
    9708:	bl	8c28 <eval_void>
    970c:	mov	r3, r0
    9710:	mov	r0, r3
    9714:	sub	sp, fp, #4
    9718:	pop	{fp, pc}
    971c:	.word	0x00000578
    9720:	.word	0x000005a0

00009724 <print_escaped_string>:
    9724:	push	{fp, lr}
    9728:	add	fp, sp, #4
    972c:	sub	sp, sp, #24
    9730:	str	r0, [fp, #-16]
    9734:	str	r1, [fp, #-20]	; 0xffffffec
    9738:	str	r2, [fp, #-24]	; 0xffffffe8
    973c:	str	r3, [fp, #-28]	; 0xffffffe4
    9740:	mov	r3, #0
    9744:	str	r3, [fp, #-8]
    9748:	ldr	r3, [fp, #-20]	; 0xffffffec
    974c:	cmp	r3, #0
    9750:	beq	9b24 <print_escaped_string+0x400>
    9754:	ldr	r3, [fp, #-16]
    9758:	cmp	r3, #0
    975c:	beq	9b24 <print_escaped_string+0x400>
    9760:	ldr	r3, [fp, #-20]	; 0xffffffec
    9764:	cmp	r3, #0
    9768:	bge	9b10 <print_escaped_string+0x3ec>
    976c:	ldr	r0, [fp, #-16]
    9770:	bl	0 <strlen>
    9774:	mov	r3, r0
    9778:	str	r3, [fp, #-20]	; 0xffffffec
    977c:	b	9b10 <print_escaped_string+0x3ec>
    9780:	ldr	r3, [fp, #-8]
    9784:	ldr	r2, [fp, #-16]
    9788:	add	r3, r2, r3
    978c:	ldrb	r3, [r3]
    9790:	sub	r3, r3, #7
    9794:	cmp	r3, #85	; 0x55
    9798:	ldrls	pc, [pc, r3, lsl #2]
    979c:	b	9a80 <print_escaped_string+0x35c>
    97a0:	.word	0x00009908
    97a4:	.word	0x00009918
    97a8:	.word	0x00009958
    97ac:	.word	0x00009938
    97b0:	.word	0x00009968
    97b4:	.word	0x00009928
    97b8:	.word	0x00009948
    97bc:	.word	0x00009a80
    97c0:	.word	0x00009a80
    97c4:	.word	0x00009a80
    97c8:	.word	0x00009a80
    97cc:	.word	0x00009a80
    97d0:	.word	0x00009a80
    97d4:	.word	0x00009a80
    97d8:	.word	0x00009a80
    97dc:	.word	0x00009a80
    97e0:	.word	0x00009a80
    97e4:	.word	0x00009a80
    97e8:	.word	0x00009a80
    97ec:	.word	0x00009a80
    97f0:	.word	0x000098f8
    97f4:	.word	0x00009a80
    97f8:	.word	0x00009a80
    97fc:	.word	0x00009a80
    9800:	.word	0x00009a80
    9804:	.word	0x00009a4c
    9808:	.word	0x00009a80
    980c:	.word	0x00009988
    9810:	.word	0x00009a80
    9814:	.word	0x00009a80
    9818:	.word	0x00009a80
    981c:	.word	0x00009a18
    9820:	.word	0x00009a80
    9824:	.word	0x00009a80
    9828:	.word	0x00009a80
    982c:	.word	0x00009a80
    9830:	.word	0x00009a80
    9834:	.word	0x00009a80
    9838:	.word	0x00009a80
    983c:	.word	0x00009a80
    9840:	.word	0x00009a80
    9844:	.word	0x00009a80
    9848:	.word	0x00009a80
    984c:	.word	0x00009a80
    9850:	.word	0x00009a80
    9854:	.word	0x00009a80
    9858:	.word	0x00009a80
    985c:	.word	0x00009a80
    9860:	.word	0x00009a80
    9864:	.word	0x00009a80
    9868:	.word	0x00009a80
    986c:	.word	0x00009a80
    9870:	.word	0x00009a80
    9874:	.word	0x000099b0
    9878:	.word	0x00009a80
    987c:	.word	0x000099e4
    9880:	.word	0x00009a80
    9884:	.word	0x00009a80
    9888:	.word	0x00009a80
    988c:	.word	0x00009a80
    9890:	.word	0x00009a80
    9894:	.word	0x00009a80
    9898:	.word	0x00009a80
    989c:	.word	0x00009a80
    98a0:	.word	0x00009a80
    98a4:	.word	0x00009a80
    98a8:	.word	0x00009a80
    98ac:	.word	0x00009a80
    98b0:	.word	0x00009a80
    98b4:	.word	0x00009a80
    98b8:	.word	0x00009a80
    98bc:	.word	0x00009a80
    98c0:	.word	0x00009a80
    98c4:	.word	0x00009a80
    98c8:	.word	0x00009a80
    98cc:	.word	0x00009a80
    98d0:	.word	0x00009a80
    98d4:	.word	0x00009a80
    98d8:	.word	0x00009a80
    98dc:	.word	0x00009a80
    98e0:	.word	0x00009a80
    98e4:	.word	0x00009a80
    98e8:	.word	0x00009a80
    98ec:	.word	0x00009a80
    98f0:	.word	0x00009a80
    98f4:	.word	0x00009978
    98f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    98fc:	ldr	r0, [pc, #556]	; 9b30 <print_escaped_string+0x40c>
    9900:	blx	r3
    9904:	b	9b04 <print_escaped_string+0x3e0>
    9908:	ldr	r3, [fp, #-24]	; 0xffffffe8
    990c:	ldr	r0, [pc, #544]	; 9b34 <print_escaped_string+0x410>
    9910:	blx	r3
    9914:	b	9b04 <print_escaped_string+0x3e0>
    9918:	ldr	r3, [fp, #-24]	; 0xffffffe8
    991c:	ldr	r0, [pc, #532]	; 9b38 <print_escaped_string+0x414>
    9920:	blx	r3
    9924:	b	9b04 <print_escaped_string+0x3e0>
    9928:	ldr	r3, [fp, #-24]	; 0xffffffe8
    992c:	ldr	r0, [pc, #520]	; 9b3c <print_escaped_string+0x418>
    9930:	blx	r3
    9934:	b	9b04 <print_escaped_string+0x3e0>
    9938:	ldr	r3, [fp, #-24]	; 0xffffffe8
    993c:	ldr	r0, [pc, #508]	; 9b40 <print_escaped_string+0x41c>
    9940:	blx	r3
    9944:	b	9b04 <print_escaped_string+0x3e0>
    9948:	ldr	r3, [fp, #-24]	; 0xffffffe8
    994c:	ldr	r0, [pc, #496]	; 9b44 <print_escaped_string+0x420>
    9950:	blx	r3
    9954:	b	9b04 <print_escaped_string+0x3e0>
    9958:	ldr	r3, [fp, #-24]	; 0xffffffe8
    995c:	ldr	r0, [pc, #484]	; 9b48 <print_escaped_string+0x424>
    9960:	blx	r3
    9964:	b	9b04 <print_escaped_string+0x3e0>
    9968:	ldr	r3, [fp, #-24]	; 0xffffffe8
    996c:	ldr	r0, [pc, #472]	; 9b4c <print_escaped_string+0x428>
    9970:	blx	r3
    9974:	b	9b04 <print_escaped_string+0x3e0>
    9978:	ldr	r3, [fp, #-24]	; 0xffffffe8
    997c:	ldr	r0, [pc, #460]	; 9b50 <print_escaped_string+0x42c>
    9980:	blx	r3
    9984:	b	9b04 <print_escaped_string+0x3e0>
    9988:	ldr	r3, [fp, #-28]	; 0xffffffe4
    998c:	cmp	r3, #0
    9990:	beq	999c <print_escaped_string+0x278>
    9994:	ldr	r2, [pc, #440]	; 9b54 <print_escaped_string+0x430>
    9998:	b	99a0 <print_escaped_string+0x27c>
    999c:	ldr	r2, [pc, #436]	; 9b58 <print_escaped_string+0x434>
    99a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    99a4:	mov	r0, r2
    99a8:	blx	r3
    99ac:	b	9b04 <print_escaped_string+0x3e0>
    99b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    99b4:	cmp	r3, #0
    99b8:	bne	99c8 <print_escaped_string+0x2a4>
    99bc:	ldr	r3, [fp, #4]
    99c0:	cmp	r3, #0
    99c4:	beq	99d0 <print_escaped_string+0x2ac>
    99c8:	ldr	r2, [pc, #396]	; 9b5c <print_escaped_string+0x438>
    99cc:	b	99d4 <print_escaped_string+0x2b0>
    99d0:	ldr	r2, [pc, #392]	; 9b60 <print_escaped_string+0x43c>
    99d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    99d8:	mov	r0, r2
    99dc:	blx	r3
    99e0:	b	9b04 <print_escaped_string+0x3e0>
    99e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    99e8:	cmp	r3, #0
    99ec:	bne	99fc <print_escaped_string+0x2d8>
    99f0:	ldr	r3, [fp, #4]
    99f4:	cmp	r3, #0
    99f8:	beq	9a04 <print_escaped_string+0x2e0>
    99fc:	ldr	r2, [pc, #352]	; 9b64 <print_escaped_string+0x440>
    9a00:	b	9a08 <print_escaped_string+0x2e4>
    9a04:	ldr	r2, [pc, #348]	; 9b68 <print_escaped_string+0x444>
    9a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9a0c:	mov	r0, r2
    9a10:	blx	r3
    9a14:	b	9b04 <print_escaped_string+0x3e0>
    9a18:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9a1c:	cmp	r3, #0
    9a20:	bne	9a30 <print_escaped_string+0x30c>
    9a24:	ldr	r3, [fp, #4]
    9a28:	cmp	r3, #0
    9a2c:	beq	9a38 <print_escaped_string+0x314>
    9a30:	ldr	r2, [pc, #308]	; 9b6c <print_escaped_string+0x448>
    9a34:	b	9a3c <print_escaped_string+0x318>
    9a38:	ldr	r2, [pc, #304]	; 9b70 <print_escaped_string+0x44c>
    9a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9a40:	mov	r0, r2
    9a44:	blx	r3
    9a48:	b	9b04 <print_escaped_string+0x3e0>
    9a4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9a50:	cmp	r3, #0
    9a54:	bne	9a64 <print_escaped_string+0x340>
    9a58:	ldr	r3, [fp, #4]
    9a5c:	cmp	r3, #0
    9a60:	beq	9a6c <print_escaped_string+0x348>
    9a64:	ldr	r2, [pc, #264]	; 9b74 <print_escaped_string+0x450>
    9a68:	b	9a70 <print_escaped_string+0x34c>
    9a6c:	ldr	r2, [pc, #260]	; 9b78 <print_escaped_string+0x454>
    9a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9a74:	mov	r0, r2
    9a78:	blx	r3
    9a7c:	b	9b04 <print_escaped_string+0x3e0>
    9a80:	bl	0 <__ctype_b_loc>
    9a84:	mov	r3, r0
    9a88:	ldr	r2, [r3]
    9a8c:	ldr	r3, [fp, #-8]
    9a90:	ldr	r1, [fp, #-16]
    9a94:	add	r3, r1, r3
    9a98:	ldrb	r3, [r3]
    9a9c:	lsl	r3, r3, #1
    9aa0:	add	r3, r2, r3
    9aa4:	ldrh	r3, [r3]
    9aa8:	and	r3, r3, #16384	; 0x4000
    9aac:	cmp	r3, #0
    9ab0:	bne	9adc <print_escaped_string+0x3b8>
    9ab4:	ldr	r3, [fp, #-8]
    9ab8:	ldr	r2, [fp, #-16]
    9abc:	add	r3, r2, r3
    9ac0:	ldrb	r3, [r3]
    9ac4:	mov	r2, r3
    9ac8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9acc:	mov	r1, r2
    9ad0:	ldr	r0, [pc, #164]	; 9b7c <print_escaped_string+0x458>
    9ad4:	blx	r3
    9ad8:	b	9b00 <print_escaped_string+0x3dc>
    9adc:	ldr	r3, [fp, #-8]
    9ae0:	ldr	r2, [fp, #-16]
    9ae4:	add	r3, r2, r3
    9ae8:	ldrb	r3, [r3]
    9aec:	mov	r2, r3
    9af0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9af4:	mov	r1, r2
    9af8:	ldr	r0, [pc, #128]	; 9b80 <print_escaped_string+0x45c>
    9afc:	blx	r3
    9b00:	nop			; (mov r0, r0)
    9b04:	ldr	r3, [fp, #-8]
    9b08:	add	r3, r3, #1
    9b0c:	str	r3, [fp, #-8]
    9b10:	ldr	r2, [fp, #-8]
    9b14:	ldr	r3, [fp, #-20]	; 0xffffffec
    9b18:	cmp	r2, r3
    9b1c:	blt	9780 <print_escaped_string+0x5c>
    9b20:	b	9b28 <print_escaped_string+0x404>
    9b24:	nop			; (mov r0, r0)
    9b28:	sub	sp, fp, #4
    9b2c:	pop	{fp, pc}
    9b30:	.word	0x000005e0
    9b34:	.word	0x000005e4
    9b38:	.word	0x000005e8
    9b3c:	.word	0x000005ec
    9b40:	.word	0x000005f0
    9b44:	.word	0x000005f4
    9b48:	.word	0x000005f8
    9b4c:	.word	0x000005fc
    9b50:	.word	0x00000600
    9b54:	.word	0x00000604
    9b58:	.word	0x0000060c
    9b5c:	.word	0x00000610
    9b60:	.word	0x00000618
    9b64:	.word	0x0000061c
    9b68:	.word	0x00000624
    9b6c:	.word	0x00000628
    9b70:	.word	0x00000630
    9b74:	.word	0x00000634
    9b78:	.word	0x0000063c
    9b7c:	.word	0x00000640
    9b80:	.word	0x00000648

00009b84 <print_expression>:
    9b84:	push	{fp, lr}
    9b88:	add	fp, sp, #4
    9b8c:	sub	sp, sp, #72	; 0x48
    9b90:	str	r0, [fp, #-56]	; 0xffffffc8
    9b94:	str	r1, [fp, #-60]	; 0xffffffc4
    9b98:	str	r2, [fp, #-64]	; 0xffffffc0
    9b9c:	str	r3, [fp, #-68]	; 0xffffffbc
    9ba0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9ba4:	cmp	r3, #0
    9ba8:	bne	9bc0 <print_expression+0x3c>
    9bac:	ldr	r3, [pc, #4052]	; ab88 <print_expression+0x1004>
    9bb0:	ldr	r2, [pc, #4052]	; ab8c <print_expression+0x1008>
    9bb4:	ldr	r1, [pc, #4052]	; ab90 <print_expression+0x100c>
    9bb8:	ldr	r0, [pc, #4052]	; ab94 <print_expression+0x1010>
    9bbc:	bl	0 <__assert_fail>
    9bc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9bc4:	ldr	r3, [r3]
    9bc8:	cmp	r3, #86	; 0x56
    9bcc:	ldrls	pc, [pc, r3, lsl #2]
    9bd0:	b	c2f8 <print_expression+0x2774>
    9bd4:	.word	0x00009d30
    9bd8:	.word	0x00009d84
    9bdc:	.word	0x0000a004
    9be0:	.word	0x00009e04
    9be4:	.word	0x00009f84
    9be8:	.word	0x0000a0fc
    9bec:	.word	0x0000a17c
    9bf0:	.word	0x0000a1fc
    9bf4:	.word	0x00009e84
    9bf8:	.word	0x00009f04
    9bfc:	.word	0x0000a27c
    9c00:	.word	0x0000c16c
    9c04:	.word	0x0000a2a4
    9c08:	.word	0x0000a2f8
    9c0c:	.word	0x0000a34c
    9c10:	.word	0x0000a3a0
    9c14:	.word	0x0000a3f4
    9c18:	.word	0x0000a0a8
    9c1c:	.word	0x0000a4c0
    9c20:	.word	0x0000a520
    9c24:	.word	0x0000a550
    9c28:	.word	0x0000a57c
    9c2c:	.word	0x0000a57c
    9c30:	.word	0x0000a5ec
    9c34:	.word	0x0000a66c
    9c38:	.word	0x0000a6ec
    9c3c:	.word	0x0000a76c
    9c40:	.word	0x0000a7c0
    9c44:	.word	0x0000a7e8
    9c48:	.word	0x0000a810
    9c4c:	.word	0x0000a864
    9c50:	.word	0x0000a8b8
    9c54:	.word	0x0000a9e4
    9c58:	.word	0x0000aa50
    9c5c:	.word	0x0000aa9c
    9c60:	.word	0x0000aaac
    9c64:	.word	0x0000ab08
    9c68:	.word	0x0000ab18
    9c6c:	.word	0x0000ab64
    9c70:	.word	0x0000ab74
    9c74:	.word	0x0000adf4
    9c78:	.word	0x0000ae98
    9c7c:	.word	0x0000af3c
    9c80:	.word	0x0000afd0
    9c84:	.word	0x0000b024
    9c88:	.word	0x0000b054
    9c8c:	.word	0x0000b0a8
    9c90:	.word	0x0000b0fc
    9c94:	.word	0x0000b150
    9c98:	.word	0x0000b1a4
    9c9c:	.word	0x0000b1f8
    9ca0:	.word	0x0000b24c
    9ca4:	.word	0x0000b2f0
    9ca8:	.word	0x0000b394
    9cac:	.word	0x0000b42c
    9cb0:	.word	0x0000b4c4
    9cb4:	.word	0x0000b518
    9cb8:	.word	0x0000b598
    9cbc:	.word	0x0000b618
    9cc0:	.word	0x0000b698
    9cc4:	.word	0x0000b718
    9cc8:	.word	0x0000b748
    9ccc:	.word	0x0000b7c8
    9cd0:	.word	0x0000b7f8
    9cd4:	.word	0x0000b84c
    9cd8:	.word	0x0000b8a0
    9cdc:	.word	0x0000b920
    9ce0:	.word	0x0000b9a0
    9ce4:	.word	0x0000b9c8
    9ce8:	.word	0x0000b9f0
    9cec:	.word	0x0000ba18
    9cf0:	.word	0x0000ba40
    9cf4:	.word	0x0000bafc
    9cf8:	.word	0x0000bb50
    9cfc:	.word	0x0000bba4
    9d00:	.word	0x0000bc0c
    9d04:	.word	0x0000bc9c
    9d08:	.word	0x0000bd2c
    9d0c:	.word	0x0000bdd8
    9d10:	.word	0x0000be58
    9d14:	.word	0x0000bed8
    9d18:	.word	0x0000bf2c
    9d1c:	.word	0x0000bfac
    9d20:	.word	0x0000c008
    9d24:	.word	0x0000c064
    9d28:	.word	0x0000c108
    9d2c:	.word	0x0000c1ec
    9d30:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9d34:	cmp	r3, #0
    9d38:	beq	9d44 <print_expression+0x1c0>
    9d3c:	ldr	r2, [pc, #3668]	; ab98 <print_expression+0x1014>
    9d40:	b	9d48 <print_expression+0x1c4>
    9d44:	ldr	r2, [pc, #3664]	; ab9c <print_expression+0x1018>
    9d48:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9d4c:	mov	r0, r2
    9d50:	blx	r3
    9d54:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9d58:	ldr	r0, [r3, #16]
    9d5c:	mov	r3, #15
    9d60:	str	r3, [sp]
    9d64:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9d68:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9d6c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9d70:	bl	9b84 <print_expression>
    9d74:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9d78:	ldr	r0, [pc, #4048]	; ad50 <print_expression+0x11cc>
    9d7c:	blx	r3
    9d80:	b	c2f8 <print_expression+0x2774>
    9d84:	ldr	r3, [fp, #4]
    9d88:	cmp	r3, #3
    9d8c:	bgt	9d9c <print_expression+0x218>
    9d90:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9d94:	ldr	r0, [pc, #4012]	; ad48 <print_expression+0x11c4>
    9d98:	blx	r3
    9d9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9da0:	ldr	r0, [r3, #16]
    9da4:	mov	r3, #4
    9da8:	str	r3, [sp]
    9dac:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9db0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9db4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9db8:	bl	9b84 <print_expression>
    9dbc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9dc0:	ldr	r0, [pc, #3544]	; aba0 <print_expression+0x101c>
    9dc4:	blx	r3
    9dc8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9dcc:	ldr	r0, [r3, #20]
    9dd0:	mov	r3, #4
    9dd4:	str	r3, [sp]
    9dd8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9ddc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9de0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9de4:	bl	9b84 <print_expression>
    9de8:	ldr	r3, [fp, #4]
    9dec:	cmp	r3, #3
    9df0:	bgt	c274 <print_expression+0x26f0>
    9df4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9df8:	ldr	r0, [pc, #3920]	; ad50 <print_expression+0x11cc>
    9dfc:	blx	r3
    9e00:	b	c274 <print_expression+0x26f0>
    9e04:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9e08:	cmp	r3, #0
    9e0c:	beq	9e18 <print_expression+0x294>
    9e10:	ldr	r2, [pc, #3468]	; aba4 <print_expression+0x1020>
    9e14:	b	9e1c <print_expression+0x298>
    9e18:	ldr	r2, [pc, #3464]	; aba8 <print_expression+0x1024>
    9e1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9e20:	mov	r0, r2
    9e24:	blx	r3
    9e28:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9e2c:	ldr	r0, [r3, #16]
    9e30:	mov	r3, #15
    9e34:	str	r3, [sp]
    9e38:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9e3c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9e40:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9e44:	bl	9b84 <print_expression>
    9e48:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9e4c:	ldr	r0, [pc, #3932]	; adb0 <print_expression+0x122c>
    9e50:	blx	r3
    9e54:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9e58:	ldr	r0, [r3, #20]
    9e5c:	mov	r3, #15
    9e60:	str	r3, [sp]
    9e64:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9e68:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9e6c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9e70:	bl	9b84 <print_expression>
    9e74:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9e78:	ldr	r0, [pc, #3792]	; ad50 <print_expression+0x11cc>
    9e7c:	blx	r3
    9e80:	b	c2f8 <print_expression+0x2774>
    9e84:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9e88:	cmp	r3, #0
    9e8c:	beq	9e98 <print_expression+0x314>
    9e90:	ldr	r2, [pc, #3704]	; ad10 <print_expression+0x118c>
    9e94:	b	9e9c <print_expression+0x318>
    9e98:	ldr	r2, [pc, #3700]	; ad14 <print_expression+0x1190>
    9e9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9ea0:	mov	r0, r2
    9ea4:	blx	r3
    9ea8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9eac:	ldr	r0, [r3, #16]
    9eb0:	mov	r3, #15
    9eb4:	str	r3, [sp]
    9eb8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9ebc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9ec0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9ec4:	bl	9b84 <print_expression>
    9ec8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9ecc:	ldr	r0, [pc, #3804]	; adb0 <print_expression+0x122c>
    9ed0:	blx	r3
    9ed4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9ed8:	ldr	r0, [r3, #20]
    9edc:	mov	r3, #15
    9ee0:	str	r3, [sp]
    9ee4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9ee8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9eec:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9ef0:	bl	9b84 <print_expression>
    9ef4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9ef8:	ldr	r0, [pc, #3664]	; ad50 <print_expression+0x11cc>
    9efc:	blx	r3
    9f00:	b	c2f8 <print_expression+0x2774>
    9f04:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9f08:	cmp	r3, #0
    9f0c:	beq	9f18 <print_expression+0x394>
    9f10:	ldr	r2, [pc, #3584]	; ad18 <print_expression+0x1194>
    9f14:	b	9f1c <print_expression+0x398>
    9f18:	ldr	r2, [pc, #3580]	; ad1c <print_expression+0x1198>
    9f1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9f20:	mov	r0, r2
    9f24:	blx	r3
    9f28:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9f2c:	ldr	r0, [r3, #16]
    9f30:	mov	r3, #15
    9f34:	str	r3, [sp]
    9f38:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9f3c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9f40:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9f44:	bl	9b84 <print_expression>
    9f48:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9f4c:	ldr	r0, [pc, #3676]	; adb0 <print_expression+0x122c>
    9f50:	blx	r3
    9f54:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9f58:	ldr	r0, [r3, #20]
    9f5c:	mov	r3, #15
    9f60:	str	r3, [sp]
    9f64:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9f68:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9f6c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9f70:	bl	9b84 <print_expression>
    9f74:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9f78:	ldr	r0, [pc, #3536]	; ad50 <print_expression+0x11cc>
    9f7c:	blx	r3
    9f80:	b	c2f8 <print_expression+0x2774>
    9f84:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9f88:	cmp	r3, #0
    9f8c:	beq	9f98 <print_expression+0x414>
    9f90:	ldr	r2, [pc, #3092]	; abac <print_expression+0x1028>
    9f94:	b	9f9c <print_expression+0x418>
    9f98:	ldr	r2, [pc, #3088]	; abb0 <print_expression+0x102c>
    9f9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9fa0:	mov	r0, r2
    9fa4:	blx	r3
    9fa8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9fac:	ldr	r0, [r3, #16]
    9fb0:	mov	r3, #15
    9fb4:	str	r3, [sp]
    9fb8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9fbc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9fc0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9fc4:	bl	9b84 <print_expression>
    9fc8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9fcc:	ldr	r0, [pc, #3548]	; adb0 <print_expression+0x122c>
    9fd0:	blx	r3
    9fd4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9fd8:	ldr	r0, [r3, #20]
    9fdc:	mov	r3, #15
    9fe0:	str	r3, [sp]
    9fe4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    9fe8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    9fec:	ldr	r1, [fp, #-60]	; 0xffffffc4
    9ff0:	bl	9b84 <print_expression>
    9ff4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    9ff8:	ldr	r0, [pc, #3408]	; ad50 <print_expression+0x11cc>
    9ffc:	blx	r3
    a000:	b	c2f8 <print_expression+0x2774>
    a004:	ldr	r3, [fp, #4]
    a008:	cmp	r3, #6
    a00c:	bgt	a01c <print_expression+0x498>
    a010:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a014:	ldr	r0, [pc, #3372]	; ad48 <print_expression+0x11c4>
    a018:	blx	r3
    a01c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a020:	ldr	r0, [r3, #16]
    a024:	mov	r3, #7
    a028:	str	r3, [sp]
    a02c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a030:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a034:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a038:	bl	9b84 <print_expression>
    a03c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a040:	cmp	r3, #0
    a044:	bne	a054 <print_expression+0x4d0>
    a048:	ldr	r3, [fp, #-64]	; 0xffffffc0
    a04c:	cmp	r3, #0
    a050:	beq	a05c <print_expression+0x4d8>
    a054:	ldr	r2, [pc, #2904]	; abb4 <print_expression+0x1030>
    a058:	b	a060 <print_expression+0x4dc>
    a05c:	ldr	r2, [pc, #2900]	; abb8 <print_expression+0x1034>
    a060:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a064:	mov	r0, r2
    a068:	blx	r3
    a06c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a070:	ldr	r0, [r3, #20]
    a074:	mov	r3, #7
    a078:	str	r3, [sp]
    a07c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a080:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a084:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a088:	bl	9b84 <print_expression>
    a08c:	ldr	r3, [fp, #4]
    a090:	cmp	r3, #6
    a094:	bgt	c27c <print_expression+0x26f8>
    a098:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a09c:	ldr	r0, [pc, #3244]	; ad50 <print_expression+0x11cc>
    a0a0:	blx	r3
    a0a4:	b	c27c <print_expression+0x26f8>
    a0a8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a0ac:	cmp	r3, #0
    a0b0:	beq	a0bc <print_expression+0x538>
    a0b4:	ldr	r2, [pc, #2816]	; abbc <print_expression+0x1038>
    a0b8:	b	a0c0 <print_expression+0x53c>
    a0bc:	ldr	r2, [pc, #2812]	; abc0 <print_expression+0x103c>
    a0c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a0c4:	mov	r0, r2
    a0c8:	blx	r3
    a0cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a0d0:	ldr	r0, [r3, #16]
    a0d4:	mov	r3, #15
    a0d8:	str	r3, [sp]
    a0dc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a0e0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a0e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a0e8:	bl	9b84 <print_expression>
    a0ec:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a0f0:	ldr	r0, [pc, #3160]	; ad50 <print_expression+0x11cc>
    a0f4:	blx	r3
    a0f8:	b	c2f8 <print_expression+0x2774>
    a0fc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a100:	cmp	r3, #0
    a104:	beq	a110 <print_expression+0x58c>
    a108:	ldr	r2, [pc, #2740]	; abc4 <print_expression+0x1040>
    a10c:	b	a114 <print_expression+0x590>
    a110:	ldr	r2, [pc, #2736]	; abc8 <print_expression+0x1044>
    a114:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a118:	mov	r0, r2
    a11c:	blx	r3
    a120:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a124:	ldr	r0, [r3, #16]
    a128:	mov	r3, #15
    a12c:	str	r3, [sp]
    a130:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a134:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a138:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a13c:	bl	9b84 <print_expression>
    a140:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a144:	ldr	r0, [pc, #3172]	; adb0 <print_expression+0x122c>
    a148:	blx	r3
    a14c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a150:	ldr	r0, [r3, #20]
    a154:	mov	r3, #15
    a158:	str	r3, [sp]
    a15c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a160:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a164:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a168:	bl	9b84 <print_expression>
    a16c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a170:	ldr	r0, [pc, #3032]	; ad50 <print_expression+0x11cc>
    a174:	blx	r3
    a178:	b	c2f8 <print_expression+0x2774>
    a17c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a180:	cmp	r3, #0
    a184:	beq	a190 <print_expression+0x60c>
    a188:	ldr	r2, [pc, #2620]	; abcc <print_expression+0x1048>
    a18c:	b	a194 <print_expression+0x610>
    a190:	ldr	r2, [pc, #2616]	; abd0 <print_expression+0x104c>
    a194:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a198:	mov	r0, r2
    a19c:	blx	r3
    a1a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a1a4:	ldr	r0, [r3, #16]
    a1a8:	mov	r3, #15
    a1ac:	str	r3, [sp]
    a1b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a1b4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a1b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a1bc:	bl	9b84 <print_expression>
    a1c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a1c4:	ldr	r0, [pc, #3044]	; adb0 <print_expression+0x122c>
    a1c8:	blx	r3
    a1cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a1d0:	ldr	r0, [r3, #20]
    a1d4:	mov	r3, #15
    a1d8:	str	r3, [sp]
    a1dc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a1e0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a1e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a1e8:	bl	9b84 <print_expression>
    a1ec:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a1f0:	ldr	r0, [pc, #2904]	; ad50 <print_expression+0x11cc>
    a1f4:	blx	r3
    a1f8:	b	c2f8 <print_expression+0x2774>
    a1fc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a200:	cmp	r3, #0
    a204:	beq	a210 <print_expression+0x68c>
    a208:	ldr	r2, [pc, #2712]	; aca8 <print_expression+0x1124>
    a20c:	b	a214 <print_expression+0x690>
    a210:	ldr	r2, [pc, #2708]	; acac <print_expression+0x1128>
    a214:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a218:	mov	r0, r2
    a21c:	blx	r3
    a220:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a224:	ldr	r0, [r3, #16]
    a228:	mov	r3, #15
    a22c:	str	r3, [sp]
    a230:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a234:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a238:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a23c:	bl	9b84 <print_expression>
    a240:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a244:	ldr	r0, [pc, #2916]	; adb0 <print_expression+0x122c>
    a248:	blx	r3
    a24c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a250:	ldr	r0, [r3, #20]
    a254:	mov	r3, #15
    a258:	str	r3, [sp]
    a25c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a260:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a264:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a268:	bl	9b84 <print_expression>
    a26c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a270:	ldr	r0, [pc, #2776]	; ad50 <print_expression+0x11cc>
    a274:	blx	r3
    a278:	b	c2f8 <print_expression+0x2774>
    a27c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a280:	cmp	r3, #0
    a284:	beq	a290 <print_expression+0x70c>
    a288:	ldr	r2, [pc, #2372]	; abd4 <print_expression+0x1050>
    a28c:	b	a294 <print_expression+0x710>
    a290:	ldr	r2, [pc, #2368]	; abd8 <print_expression+0x1054>
    a294:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a298:	mov	r0, r2
    a29c:	blx	r3
    a2a0:	b	c2f8 <print_expression+0x2774>
    a2a4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a2a8:	cmp	r3, #0
    a2ac:	beq	a2b8 <print_expression+0x734>
    a2b0:	ldr	r2, [pc, #2340]	; abdc <print_expression+0x1058>
    a2b4:	b	a2bc <print_expression+0x738>
    a2b8:	ldr	r2, [pc, #2336]	; abe0 <print_expression+0x105c>
    a2bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a2c0:	mov	r0, r2
    a2c4:	blx	r3
    a2c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a2cc:	ldr	r0, [r3, #16]
    a2d0:	mov	r3, #15
    a2d4:	str	r3, [sp]
    a2d8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a2dc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a2e0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a2e4:	bl	9b84 <print_expression>
    a2e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a2ec:	ldr	r0, [pc, #2652]	; ad50 <print_expression+0x11cc>
    a2f0:	blx	r3
    a2f4:	b	c2f8 <print_expression+0x2774>
    a2f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a2fc:	cmp	r3, #0
    a300:	beq	a30c <print_expression+0x788>
    a304:	ldr	r2, [pc, #2264]	; abe4 <print_expression+0x1060>
    a308:	b	a310 <print_expression+0x78c>
    a30c:	ldr	r2, [pc, #2260]	; abe8 <print_expression+0x1064>
    a310:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a314:	mov	r0, r2
    a318:	blx	r3
    a31c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a320:	ldr	r0, [r3, #16]
    a324:	mov	r3, #15
    a328:	str	r3, [sp]
    a32c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a330:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a334:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a338:	bl	9b84 <print_expression>
    a33c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a340:	ldr	r0, [pc, #2568]	; ad50 <print_expression+0x11cc>
    a344:	blx	r3
    a348:	b	c2f8 <print_expression+0x2774>
    a34c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a350:	cmp	r3, #0
    a354:	beq	a360 <print_expression+0x7dc>
    a358:	ldr	r2, [pc, #2188]	; abec <print_expression+0x1068>
    a35c:	b	a364 <print_expression+0x7e0>
    a360:	ldr	r2, [pc, #2184]	; abf0 <print_expression+0x106c>
    a364:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a368:	mov	r0, r2
    a36c:	blx	r3
    a370:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a374:	ldr	r0, [r3, #16]
    a378:	mov	r3, #15
    a37c:	str	r3, [sp]
    a380:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a384:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a388:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a38c:	bl	9b84 <print_expression>
    a390:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a394:	ldr	r0, [pc, #2484]	; ad50 <print_expression+0x11cc>
    a398:	blx	r3
    a39c:	b	c2f8 <print_expression+0x2774>
    a3a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a3a4:	cmp	r3, #0
    a3a8:	beq	a3b4 <print_expression+0x830>
    a3ac:	ldr	r2, [pc, #2112]	; abf4 <print_expression+0x1070>
    a3b0:	b	a3b8 <print_expression+0x834>
    a3b4:	ldr	r2, [pc, #2108]	; abf8 <print_expression+0x1074>
    a3b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a3bc:	mov	r0, r2
    a3c0:	blx	r3
    a3c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a3c8:	ldr	r0, [r3, #16]
    a3cc:	mov	r3, #15
    a3d0:	str	r3, [sp]
    a3d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a3d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a3dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a3e0:	bl	9b84 <print_expression>
    a3e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a3e8:	ldr	r0, [pc, #2400]	; ad50 <print_expression+0x11cc>
    a3ec:	blx	r3
    a3f0:	b	c2f8 <print_expression+0x2774>
    a3f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a3f8:	cmp	r3, #0
    a3fc:	beq	a408 <print_expression+0x884>
    a400:	ldr	r2, [pc, #2036]	; abfc <print_expression+0x1078>
    a404:	b	a40c <print_expression+0x888>
    a408:	ldr	r2, [pc, #2032]	; ac00 <print_expression+0x107c>
    a40c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a410:	mov	r0, r2
    a414:	blx	r3
    a418:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a41c:	ldr	r0, [r3, #16]
    a420:	mov	r3, #15
    a424:	str	r3, [sp]
    a428:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a42c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a430:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a434:	bl	9b84 <print_expression>
    a438:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a43c:	ldr	r3, [r3, #20]
    a440:	cmp	r3, #0
    a444:	beq	a474 <print_expression+0x8f0>
    a448:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a44c:	ldr	r0, [pc, #1968]	; ac04 <print_expression+0x1080>
    a450:	blx	r3
    a454:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a458:	ldr	r0, [r3, #20]
    a45c:	mov	r3, #15
    a460:	str	r3, [sp]
    a464:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a468:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a46c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a470:	bl	9b84 <print_expression>
    a474:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a478:	ldr	r3, [r3, #24]
    a47c:	cmp	r3, #0
    a480:	beq	a4b0 <print_expression+0x92c>
    a484:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a488:	ldr	r0, [pc, #1908]	; ac04 <print_expression+0x1080>
    a48c:	blx	r3
    a490:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a494:	ldr	r0, [r3, #24]
    a498:	mov	r3, #15
    a49c:	str	r3, [sp]
    a4a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a4a4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a4a8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a4ac:	bl	9b84 <print_expression>
    a4b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a4b4:	ldr	r0, [pc, #2196]	; ad50 <print_expression+0x11cc>
    a4b8:	blx	r3
    a4bc:	b	c2f8 <print_expression+0x2774>
    a4c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a4c4:	ldr	r3, [r3, #12]
    a4c8:	cmp	r3, #0
    a4cc:	beq	a4f8 <print_expression+0x974>
    a4d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a4d4:	cmp	r3, #0
    a4d8:	beq	a4e4 <print_expression+0x960>
    a4dc:	ldr	r2, [pc, #1828]	; ac08 <print_expression+0x1084>
    a4e0:	b	a4e8 <print_expression+0x964>
    a4e4:	ldr	r2, [pc, #1824]	; ac0c <print_expression+0x1088>
    a4e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a4ec:	mov	r0, r2
    a4f0:	blx	r3
    a4f4:	b	c2f8 <print_expression+0x2774>
    a4f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a4fc:	cmp	r3, #0
    a500:	beq	a50c <print_expression+0x988>
    a504:	ldr	r2, [pc, #1796]	; ac10 <print_expression+0x108c>
    a508:	b	a510 <print_expression+0x98c>
    a50c:	ldr	r2, [pc, #1792]	; ac14 <print_expression+0x1090>
    a510:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a514:	mov	r0, r2
    a518:	blx	r3
    a51c:	b	c2f8 <print_expression+0x2774>
    a520:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a524:	vldr	d7, [r3, #16]
    a528:	sub	r3, fp, #28
    a52c:	mov	r0, r3
    a530:	vmov.f64	d0, d7
    a534:	bl	0 <coda_strfl>
    a538:	sub	r2, fp, #28
    a53c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a540:	mov	r1, r2
    a544:	ldr	r0, [pc, #1896]	; acb4 <print_expression+0x1130>
    a548:	blx	r3
    a54c:	b	c2f8 <print_expression+0x2774>
    a550:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a554:	ldrd	r0, [r3, #16]
    a558:	sub	r3, fp, #52	; 0x34
    a55c:	mov	r2, r3
    a560:	bl	0 <coda_str64>
    a564:	sub	r2, fp, #52	; 0x34
    a568:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a56c:	mov	r1, r2
    a570:	ldr	r0, [pc, #1852]	; acb4 <print_expression+0x1130>
    a574:	blx	r3
    a578:	b	c2f8 <print_expression+0x2774>
    a57c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    a580:	cmp	r3, #0
    a584:	beq	a590 <print_expression+0xa0c>
    a588:	ldr	r2, [pc, #1672]	; ac18 <print_expression+0x1094>
    a58c:	b	a594 <print_expression+0xa10>
    a590:	ldr	r2, [pc, #1668]	; ac1c <print_expression+0x1098>
    a594:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a598:	mov	r0, r2
    a59c:	blx	r3
    a5a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a5a4:	ldr	r0, [r3, #16]
    a5a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a5ac:	ldr	r1, [r3, #12]
    a5b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a5b4:	str	r3, [sp]
    a5b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    a5bc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a5c0:	bl	9724 <print_escaped_string>
    a5c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    a5c8:	cmp	r3, #0
    a5cc:	beq	a5d8 <print_expression+0xa54>
    a5d0:	ldr	r2, [pc, #1600]	; ac18 <print_expression+0x1094>
    a5d4:	b	a5dc <print_expression+0xa58>
    a5d8:	ldr	r2, [pc, #1596]	; ac1c <print_expression+0x1098>
    a5dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a5e0:	mov	r0, r2
    a5e4:	blx	r3
    a5e8:	b	c2f8 <print_expression+0x2774>
    a5ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a5f0:	cmp	r3, #0
    a5f4:	beq	a600 <print_expression+0xa7c>
    a5f8:	ldr	r2, [pc, #1568]	; ac20 <print_expression+0x109c>
    a5fc:	b	a604 <print_expression+0xa80>
    a600:	ldr	r2, [pc, #1564]	; ac24 <print_expression+0x10a0>
    a604:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a608:	mov	r0, r2
    a60c:	blx	r3
    a610:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a614:	ldr	r0, [r3, #16]
    a618:	mov	r3, #15
    a61c:	str	r3, [sp]
    a620:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a624:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a628:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a62c:	bl	9b84 <print_expression>
    a630:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a634:	ldr	r0, [pc, #1480]	; ac04 <print_expression+0x1080>
    a638:	blx	r3
    a63c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a640:	ldr	r0, [r3, #20]
    a644:	mov	r3, #15
    a648:	str	r3, [sp]
    a64c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a650:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a654:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a658:	bl	9b84 <print_expression>
    a65c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a660:	ldr	r0, [pc, #1768]	; ad50 <print_expression+0x11cc>
    a664:	blx	r3
    a668:	b	c2f8 <print_expression+0x2774>
    a66c:	ldr	r3, [fp, #4]
    a670:	cmp	r3, #2
    a674:	bgt	a684 <print_expression+0xb00>
    a678:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a67c:	ldr	r0, [pc, #1732]	; ad48 <print_expression+0x11c4>
    a680:	blx	r3
    a684:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a688:	ldr	r0, [r3, #16]
    a68c:	mov	r3, #3
    a690:	str	r3, [sp]
    a694:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a698:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a69c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a6a0:	bl	9b84 <print_expression>
    a6a4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a6a8:	ldr	r0, [pc, #1400]	; ac28 <print_expression+0x10a4>
    a6ac:	blx	r3
    a6b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a6b4:	ldr	r0, [r3, #20]
    a6b8:	mov	r3, #3
    a6bc:	str	r3, [sp]
    a6c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a6c4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a6c8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a6cc:	bl	9b84 <print_expression>
    a6d0:	ldr	r3, [fp, #4]
    a6d4:	cmp	r3, #2
    a6d8:	bgt	c284 <print_expression+0x2700>
    a6dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a6e0:	ldr	r0, [pc, #1640]	; ad50 <print_expression+0x11cc>
    a6e4:	blx	r3
    a6e8:	b	c284 <print_expression+0x2700>
    a6ec:	ldr	r3, [fp, #4]
    a6f0:	cmp	r3, #5
    a6f4:	bgt	a704 <print_expression+0xb80>
    a6f8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a6fc:	ldr	r0, [pc, #1604]	; ad48 <print_expression+0x11c4>
    a700:	blx	r3
    a704:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a708:	ldr	r0, [r3, #16]
    a70c:	mov	r3, #6
    a710:	str	r3, [sp]
    a714:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a718:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a71c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a720:	bl	9b84 <print_expression>
    a724:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a728:	ldr	r0, [pc, #1276]	; ac2c <print_expression+0x10a8>
    a72c:	blx	r3
    a730:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a734:	ldr	r0, [r3, #20]
    a738:	mov	r3, #6
    a73c:	str	r3, [sp]
    a740:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a744:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a748:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a74c:	bl	9b84 <print_expression>
    a750:	ldr	r3, [fp, #4]
    a754:	cmp	r3, #5
    a758:	bgt	c28c <print_expression+0x2708>
    a75c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a760:	ldr	r0, [pc, #1512]	; ad50 <print_expression+0x11cc>
    a764:	blx	r3
    a768:	b	c28c <print_expression+0x2708>
    a76c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a770:	cmp	r3, #0
    a774:	beq	a780 <print_expression+0xbfc>
    a778:	ldr	r2, [pc, #1100]	; abcc <print_expression+0x1048>
    a77c:	b	a784 <print_expression+0xc00>
    a780:	ldr	r2, [pc, #1096]	; abd0 <print_expression+0x104c>
    a784:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a788:	mov	r0, r2
    a78c:	blx	r3
    a790:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a794:	ldr	r0, [r3, #16]
    a798:	mov	r3, #15
    a79c:	str	r3, [sp]
    a7a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a7a4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a7a8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a7ac:	bl	9b84 <print_expression>
    a7b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a7b4:	ldr	r0, [pc, #1428]	; ad50 <print_expression+0x11cc>
    a7b8:	blx	r3
    a7bc:	b	c2f8 <print_expression+0x2774>
    a7c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a7c4:	cmp	r3, #0
    a7c8:	beq	a7d4 <print_expression+0xc50>
    a7cc:	ldr	r2, [pc, #1116]	; ac30 <print_expression+0x10ac>
    a7d0:	b	a7d8 <print_expression+0xc54>
    a7d4:	ldr	r2, [pc, #1112]	; ac34 <print_expression+0x10b0>
    a7d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a7dc:	mov	r0, r2
    a7e0:	blx	r3
    a7e4:	b	c2f8 <print_expression+0x2774>
    a7e8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a7ec:	cmp	r3, #0
    a7f0:	beq	a7fc <print_expression+0xc78>
    a7f4:	ldr	r2, [pc, #1084]	; ac38 <print_expression+0x10b4>
    a7f8:	b	a800 <print_expression+0xc7c>
    a7fc:	ldr	r2, [pc, #1080]	; ac3c <print_expression+0x10b8>
    a800:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a804:	mov	r0, r2
    a808:	blx	r3
    a80c:	b	c2f8 <print_expression+0x2774>
    a810:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a814:	cmp	r3, #0
    a818:	beq	a824 <print_expression+0xca0>
    a81c:	ldr	r2, [pc, #1052]	; ac40 <print_expression+0x10bc>
    a820:	b	a828 <print_expression+0xca4>
    a824:	ldr	r2, [pc, #1048]	; ac44 <print_expression+0x10c0>
    a828:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a82c:	mov	r0, r2
    a830:	blx	r3
    a834:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a838:	ldr	r0, [r3, #16]
    a83c:	mov	r3, #15
    a840:	str	r3, [sp]
    a844:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a848:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a84c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a850:	bl	9b84 <print_expression>
    a854:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a858:	ldr	r0, [pc, #1264]	; ad50 <print_expression+0x11cc>
    a85c:	blx	r3
    a860:	b	c2f8 <print_expression+0x2774>
    a864:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a868:	cmp	r3, #0
    a86c:	beq	a878 <print_expression+0xcf4>
    a870:	ldr	r2, [pc, #976]	; ac48 <print_expression+0x10c4>
    a874:	b	a87c <print_expression+0xcf8>
    a878:	ldr	r2, [pc, #972]	; ac4c <print_expression+0x10c8>
    a87c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a880:	mov	r0, r2
    a884:	blx	r3
    a888:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a88c:	ldr	r0, [r3, #16]
    a890:	mov	r3, #15
    a894:	str	r3, [sp]
    a898:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a89c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a8a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a8a4:	bl	9b84 <print_expression>
    a8a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a8ac:	ldr	r0, [pc, #1180]	; ad50 <print_expression+0x11cc>
    a8b0:	blx	r3
    a8b4:	b	c2f8 <print_expression+0x2774>
    a8b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a8bc:	cmp	r3, #0
    a8c0:	beq	a8cc <print_expression+0xd48>
    a8c4:	ldr	r2, [pc, #900]	; ac50 <print_expression+0x10cc>
    a8c8:	b	a8d0 <print_expression+0xd4c>
    a8cc:	ldr	r2, [pc, #896]	; ac54 <print_expression+0x10d0>
    a8d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a8d4:	ldr	r1, [r3, #12]
    a8d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a8dc:	mov	r0, r2
    a8e0:	blx	r3
    a8e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a8e8:	ldr	r0, [r3, #16]
    a8ec:	mov	r3, #15
    a8f0:	str	r3, [sp]
    a8f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a8f8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a8fc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a900:	bl	9b84 <print_expression>
    a904:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a908:	cmp	r3, #0
    a90c:	beq	a918 <print_expression+0xd94>
    a910:	ldr	r2, [pc, #832]	; ac58 <print_expression+0x10d4>
    a914:	b	a91c <print_expression+0xd98>
    a918:	ldr	r2, [pc, #828]	; ac5c <print_expression+0x10d8>
    a91c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a920:	mov	r0, r2
    a924:	blx	r3
    a928:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a92c:	ldr	r0, [r3, #20]
    a930:	mov	r3, #15
    a934:	str	r3, [sp]
    a938:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a93c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a940:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a944:	bl	9b84 <print_expression>
    a948:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a94c:	ldr	r3, [r3, #24]
    a950:	cmp	r3, #0
    a954:	beq	a99c <print_expression+0xe18>
    a958:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a95c:	cmp	r3, #0
    a960:	beq	a96c <print_expression+0xde8>
    a964:	ldr	r2, [pc, #756]	; ac60 <print_expression+0x10dc>
    a968:	b	a970 <print_expression+0xdec>
    a96c:	ldr	r2, [pc, #752]	; ac64 <print_expression+0x10e0>
    a970:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a974:	mov	r0, r2
    a978:	blx	r3
    a97c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a980:	ldr	r0, [r3, #24]
    a984:	mov	r3, #15
    a988:	str	r3, [sp]
    a98c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a990:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a994:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a998:	bl	9b84 <print_expression>
    a99c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a9a0:	cmp	r3, #0
    a9a4:	beq	a9b0 <print_expression+0xe2c>
    a9a8:	ldr	r2, [pc, #696]	; ac68 <print_expression+0x10e4>
    a9ac:	b	a9b4 <print_expression+0xe30>
    a9b0:	ldr	r2, [pc, #692]	; ac6c <print_expression+0x10e8>
    a9b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a9b8:	mov	r0, r2
    a9bc:	blx	r3
    a9c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a9c4:	ldr	r0, [r3, #28]
    a9c8:	mov	r3, #15
    a9cc:	str	r3, [sp]
    a9d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a9d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a9d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a9dc:	bl	9b84 <print_expression>
    a9e0:	b	c2f8 <print_expression+0x2774>
    a9e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a9e8:	ldr	r3, [r3, #16]
    a9ec:	cmp	r3, #0
    a9f0:	beq	aa14 <print_expression+0xe90>
    a9f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a9f8:	ldr	r0, [r3, #16]
    a9fc:	mov	r3, #15
    aa00:	str	r3, [sp]
    aa04:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aa08:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aa0c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aa10:	bl	9b84 <print_expression>
    aa14:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aa18:	ldr	r0, [pc, #592]	; ac70 <print_expression+0x10ec>
    aa1c:	blx	r3
    aa20:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aa24:	ldr	r0, [r3, #20]
    aa28:	mov	r3, #15
    aa2c:	str	r3, [sp]
    aa30:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aa34:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aa38:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aa3c:	bl	9b84 <print_expression>
    aa40:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aa44:	ldr	r0, [pc, #552]	; ac74 <print_expression+0x10f0>
    aa48:	blx	r3
    aa4c:	b	c2f8 <print_expression+0x2774>
    aa50:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aa54:	ldr	r3, [r3, #16]
    aa58:	cmp	r3, #0
    aa5c:	beq	aa80 <print_expression+0xefc>
    aa60:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aa64:	ldr	r0, [r3, #16]
    aa68:	mov	r3, #15
    aa6c:	str	r3, [sp]
    aa70:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aa74:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aa78:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aa7c:	bl	9b84 <print_expression>
    aa80:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aa84:	ldr	r2, [r3, #12]
    aa88:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aa8c:	mov	r1, r2
    aa90:	ldr	r0, [pc, #480]	; ac78 <print_expression+0x10f4>
    aa94:	blx	r3
    aa98:	b	c2f8 <print_expression+0x2774>
    aa9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aaa0:	ldr	r0, [pc, #468]	; ac7c <print_expression+0x10f8>
    aaa4:	blx	r3
    aaa8:	b	c2f8 <print_expression+0x2774>
    aaac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aab0:	ldr	r0, [r3, #16]
    aab4:	mov	r3, #15
    aab8:	str	r3, [sp]
    aabc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aac0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aac4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aac8:	bl	9b84 <print_expression>
    aacc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aad0:	ldr	r3, [r3, #16]
    aad4:	ldr	r3, [r3]
    aad8:	cmp	r3, #38	; 0x26
    aadc:	beq	aaec <print_expression+0xf68>
    aae0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aae4:	ldr	r0, [pc, #404]	; ac80 <print_expression+0x10fc>
    aae8:	blx	r3
    aaec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aaf0:	ldr	r2, [r3, #12]
    aaf4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aaf8:	mov	r1, r2
    aafc:	ldr	r0, [pc, #432]	; acb4 <print_expression+0x1130>
    ab00:	blx	r3
    ab04:	b	c2f8 <print_expression+0x2774>
    ab08:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ab0c:	ldr	r0, [pc, #368]	; ac84 <print_expression+0x1100>
    ab10:	blx	r3
    ab14:	b	c2f8 <print_expression+0x2774>
    ab18:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ab1c:	ldr	r3, [r3, #16]
    ab20:	cmp	r3, #0
    ab24:	beq	ab54 <print_expression+0xfd0>
    ab28:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ab2c:	ldr	r0, [r3, #16]
    ab30:	mov	r3, #15
    ab34:	str	r3, [sp]
    ab38:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ab3c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ab40:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ab44:	bl	9b84 <print_expression>
    ab48:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ab4c:	ldr	r0, [pc, #300]	; ac80 <print_expression+0x10fc>
    ab50:	blx	r3
    ab54:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ab58:	ldr	r0, [pc, #296]	; ac88 <print_expression+0x1104>
    ab5c:	blx	r3
    ab60:	b	c2f8 <print_expression+0x2774>
    ab64:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ab68:	ldr	r0, [pc, #272]	; ac80 <print_expression+0x10fc>
    ab6c:	blx	r3
    ab70:	b	c2f8 <print_expression+0x2774>
    ab74:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ab78:	cmp	r3, #0
    ab7c:	beq	adb4 <print_expression+0x1230>
    ab80:	ldr	r2, [pc, #260]	; ac8c <print_expression+0x1108>
    ab84:	b	adb8 <print_expression+0x1234>
    ab88:	.word	0x00000efc
    ab8c:	.word	0x00001064
    ab90:	.word	0x00000024
    ab94:	.word	0x0000064c
    ab98:	.word	0x0000065c
    ab9c:	.word	0x00000668
    aba0:	.word	0x00000678
    aba4:	.word	0x0000067c
    aba8:	.word	0x00000688
    abac:	.word	0x000006bc
    abb0:	.word	0x000006c8
    abb4:	.word	0x000006d0
    abb8:	.word	0x000006d8
    abbc:	.word	0x000006dc
    abc0:	.word	0x000006ec
    abc4:	.word	0x000006f4
    abc8:	.word	0x00000704
    abcc:	.word	0x0000070c
    abd0:	.word	0x0000071c
    abd4:	.word	0x0000073c
    abd8:	.word	0x00000750
    abdc:	.word	0x0000075c
    abe0:	.word	0x00000770
    abe4:	.word	0x0000077c
    abe8:	.word	0x0000078c
    abec:	.word	0x00000798
    abf0:	.word	0x000007ac
    abf4:	.word	0x000007b8
    abf8:	.word	0x000007cc
    abfc:	.word	0x000007d8
    ac00:	.word	0x000007e8
    ac04:	.word	0x000007f0
    ac08:	.word	0x000007f4
    ac0c:	.word	0x00000800
    ac10:	.word	0x00000808
    ac14:	.word	0x00000818
    ac18:	.word	0x00000824
    ac1c:	.word	0x0000082c
    ac20:	.word	0x00000830
    ac24:	.word	0x0000083c
    ac28:	.word	0x00000844
    ac2c:	.word	0x00000848
    ac30:	.word	0x00000850
    ac34:	.word	0x00000864
    ac38:	.word	0x00000870
    ac3c:	.word	0x00000884
    ac40:	.word	0x00000890
    ac44:	.word	0x000008a0
    ac48:	.word	0x000008a8
    ac4c:	.word	0x000008b8
    ac50:	.word	0x000008c0
    ac54:	.word	0x000008d8
    ac58:	.word	0x000008e4
    ac5c:	.word	0x000008f0
    ac60:	.word	0x000008f8
    ac64:	.word	0x00000908
    ac68:	.word	0x00000910
    ac6c:	.word	0x00000924
    ac70:	.word	0x0000092c
    ac74:	.word	0x00000930
    ac78:	.word	0x00000934
    ac7c:	.word	0x00000938
    ac80:	.word	0x0000093c
    ac84:	.word	0x00000940
    ac88:	.word	0x00000944
    ac8c:	.word	0x00000948
    ac90:	.word	0x00000958
    ac94:	.word	0x00000960
    ac98:	.word	0x00000968
    ac9c:	.word	0x00000970
    aca0:	.word	0x00000978
    aca4:	.word	0x0000097c
    aca8:	.word	0x00000724
    acac:	.word	0x00000734
    acb0:	.word	0x00000980
    acb4:	.word	0x00000820
    acb8:	.word	0x0000098c
    acbc:	.word	0x00000998
    acc0:	.word	0x000009a0
    acc4:	.word	0x000009b0
    acc8:	.word	0x000009b8
    accc:	.word	0x000009cc
    acd0:	.word	0x000009d8
    acd4:	.word	0x000009e8
    acd8:	.word	0x000009f0
    acdc:	.word	0x00000a04
    ace0:	.word	0x00000a10
    ace4:	.word	0x00000a20
    ace8:	.word	0x00000a28
    acec:	.word	0x00000a30
    acf0:	.word	0x00000a38
    acf4:	.word	0x00000a40
    acf8:	.word	0x00000a44
    acfc:	.word	0x00000a54
    ad00:	.word	0x00000a5c
    ad04:	.word	0x00000a68
    ad08:	.word	0x00000a70
    ad0c:	.word	0x00000a80
    ad10:	.word	0x00000694
    ad14:	.word	0x000006a0
    ad18:	.word	0x000006a8
    ad1c:	.word	0x000006b4
    ad20:	.word	0x00000a88
    ad24:	.word	0x00000a90
    ad28:	.word	0x00000a94
    ad2c:	.word	0x00000a98
    ad30:	.word	0x00000aa0
    ad34:	.word	0x00000aa4
    ad38:	.word	0x00000ab4
    ad3c:	.word	0x00000ac0
    ad40:	.word	0x00000ad4
    ad44:	.word	0x00000ae4
    ad48:	.word	0x00000674
    ad4c:	.word	0x00000ae8
    ad50:	.word	0x00000670
    ad54:	.word	0x00000aec
    ad58:	.word	0x00000b04
    ad5c:	.word	0x00000b14
    ad60:	.word	0x00000b2c
    ad64:	.word	0x00000b3c
    ad68:	.word	0x00000b54
    ad6c:	.word	0x00000b64
    ad70:	.word	0x00000b7c
    ad74:	.word	0x00000b90
    ad78:	.word	0x00000ba0
    ad7c:	.word	0x00000ba8
    ad80:	.word	0x00000bb8
    ad84:	.word	0x00000bc0
    ad88:	.word	0x00000bd0
    ad8c:	.word	0x00000bd8
    ad90:	.word	0x00000be0
    ad94:	.word	0x00000be4
    ad98:	.word	0x00000bf0
    ad9c:	.word	0x00000bf8
    ada0:	.word	0x00000c08
    ada4:	.word	0x00000670
    ada8:	.word	0x00000c14
    adac:	.word	0x00000c24
    adb0:	.word	0x00000690
    adb4:	ldr	r2, [pc, #-300]	; ac90 <print_expression+0x110c>
    adb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    adbc:	mov	r0, r2
    adc0:	blx	r3
    adc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    adc8:	ldr	r0, [r3, #16]
    adcc:	mov	r3, #15
    add0:	str	r3, [sp]
    add4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    add8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    addc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ade0:	bl	9b84 <print_expression>
    ade4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ade8:	ldr	r0, [pc, #-160]	; ad50 <print_expression+0x11cc>
    adec:	blx	r3
    adf0:	b	c2f8 <print_expression+0x2774>
    adf4:	ldr	r3, [fp, #4]
    adf8:	cmp	r3, #4
    adfc:	bgt	ae0c <print_expression+0x1288>
    ae00:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ae04:	ldr	r0, [pc, #-196]	; ad48 <print_expression+0x11c4>
    ae08:	blx	r3
    ae0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ae10:	ldr	r0, [r3, #16]
    ae14:	mov	r3, #5
    ae18:	str	r3, [sp]
    ae1c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ae20:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ae24:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ae28:	bl	9b84 <print_expression>
    ae2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ae30:	cmp	r3, #0
    ae34:	bne	ae44 <print_expression+0x12c0>
    ae38:	ldr	r3, [fp, #-64]	; 0xffffffc0
    ae3c:	cmp	r3, #0
    ae40:	beq	ae4c <print_expression+0x12c8>
    ae44:	ldr	r2, [pc, #-440]	; ac94 <print_expression+0x1110>
    ae48:	b	ae50 <print_expression+0x12cc>
    ae4c:	ldr	r2, [pc, #-444]	; ac98 <print_expression+0x1114>
    ae50:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ae54:	mov	r0, r2
    ae58:	blx	r3
    ae5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ae60:	ldr	r0, [r3, #20]
    ae64:	mov	r3, #5
    ae68:	str	r3, [sp]
    ae6c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ae70:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ae74:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ae78:	bl	9b84 <print_expression>
    ae7c:	ldr	r3, [fp, #4]
    ae80:	cmp	r3, #4
    ae84:	bgt	c294 <print_expression+0x2710>
    ae88:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ae8c:	ldr	r0, [pc, #-324]	; ad50 <print_expression+0x11cc>
    ae90:	blx	r3
    ae94:	b	c294 <print_expression+0x2710>
    ae98:	ldr	r3, [fp, #4]
    ae9c:	cmp	r3, #4
    aea0:	bgt	aeb0 <print_expression+0x132c>
    aea4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aea8:	ldr	r0, [pc, #-360]	; ad48 <print_expression+0x11c4>
    aeac:	blx	r3
    aeb0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aeb4:	ldr	r0, [r3, #16]
    aeb8:	mov	r3, #5
    aebc:	str	r3, [sp]
    aec0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aec4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aec8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aecc:	bl	9b84 <print_expression>
    aed0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aed4:	cmp	r3, #0
    aed8:	bne	aee8 <print_expression+0x1364>
    aedc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    aee0:	cmp	r3, #0
    aee4:	beq	aef0 <print_expression+0x136c>
    aee8:	ldr	r2, [pc, #-596]	; ac9c <print_expression+0x1118>
    aeec:	b	aef4 <print_expression+0x1370>
    aef0:	ldr	r2, [pc, #-600]	; aca0 <print_expression+0x111c>
    aef4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aef8:	mov	r0, r2
    aefc:	blx	r3
    af00:	ldr	r3, [fp, #-56]	; 0xffffffc8
    af04:	ldr	r0, [r3, #20]
    af08:	mov	r3, #5
    af0c:	str	r3, [sp]
    af10:	ldr	r3, [fp, #-68]	; 0xffffffbc
    af14:	ldr	r2, [fp, #-64]	; 0xffffffc0
    af18:	ldr	r1, [fp, #-60]	; 0xffffffc4
    af1c:	bl	9b84 <print_expression>
    af20:	ldr	r3, [fp, #4]
    af24:	cmp	r3, #4
    af28:	bgt	c29c <print_expression+0x2718>
    af2c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    af30:	ldr	r0, [pc, #-488]	; ad50 <print_expression+0x11cc>
    af34:	blx	r3
    af38:	b	c29c <print_expression+0x2718>
    af3c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    af40:	ldr	r0, [pc, #-676]	; aca4 <print_expression+0x1120>
    af44:	blx	r3
    af48:	ldr	r3, [fp, #-56]	; 0xffffffc8
    af4c:	ldr	r0, [r3, #16]
    af50:	mov	r3, #15
    af54:	str	r3, [sp]
    af58:	ldr	r3, [fp, #-68]	; 0xffffffbc
    af5c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    af60:	ldr	r1, [fp, #-60]	; 0xffffffc4
    af64:	bl	9b84 <print_expression>
    af68:	ldr	r3, [fp, #-60]	; 0xffffffc4
    af6c:	ldr	r0, [pc, #-452]	; adb0 <print_expression+0x122c>
    af70:	blx	r3
    af74:	ldr	r3, [fp, #-56]	; 0xffffffc8
    af78:	ldr	r0, [r3, #20]
    af7c:	mov	r3, #15
    af80:	str	r3, [sp]
    af84:	ldr	r3, [fp, #-68]	; 0xffffffbc
    af88:	ldr	r2, [fp, #-64]	; 0xffffffc0
    af8c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    af90:	bl	9b84 <print_expression>
    af94:	ldr	r3, [fp, #-60]	; 0xffffffc4
    af98:	ldr	r0, [pc, #-496]	; adb0 <print_expression+0x122c>
    af9c:	blx	r3
    afa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    afa4:	ldr	r0, [r3, #24]
    afa8:	mov	r3, #15
    afac:	str	r3, [sp]
    afb0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    afb4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    afb8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    afbc:	bl	9b84 <print_expression>
    afc0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    afc4:	ldr	r0, [pc, #-636]	; ad50 <print_expression+0x11cc>
    afc8:	blx	r3
    afcc:	b	c2f8 <print_expression+0x2774>
    afd0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    afd4:	cmp	r3, #0
    afd8:	beq	afe4 <print_expression+0x1460>
    afdc:	ldr	r2, [pc, #-828]	; aca8 <print_expression+0x1124>
    afe0:	b	afe8 <print_expression+0x1464>
    afe4:	ldr	r2, [pc, #-832]	; acac <print_expression+0x1128>
    afe8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    afec:	mov	r0, r2
    aff0:	blx	r3
    aff4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aff8:	ldr	r0, [r3, #16]
    affc:	mov	r3, #15
    b000:	str	r3, [sp]
    b004:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b008:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b00c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b010:	bl	9b84 <print_expression>
    b014:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b018:	ldr	r0, [pc, #-720]	; ad50 <print_expression+0x11cc>
    b01c:	blx	r3
    b020:	b	c2f8 <print_expression+0x2774>
    b024:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b028:	cmp	r3, #0
    b02c:	beq	b038 <print_expression+0x14b4>
    b030:	ldr	r2, [pc, #-904]	; acb0 <print_expression+0x112c>
    b034:	b	b03c <print_expression+0x14b8>
    b038:	ldr	r2, [pc, #-908]	; acb4 <print_expression+0x1130>
    b03c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b040:	ldr	r1, [r3, #12]
    b044:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b048:	mov	r0, r2
    b04c:	blx	r3
    b050:	b	c2f8 <print_expression+0x2774>
    b054:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b058:	cmp	r3, #0
    b05c:	beq	b068 <print_expression+0x14e4>
    b060:	ldr	r2, [pc, #-944]	; acb8 <print_expression+0x1134>
    b064:	b	b06c <print_expression+0x14e8>
    b068:	ldr	r2, [pc, #-948]	; acbc <print_expression+0x1138>
    b06c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b070:	mov	r0, r2
    b074:	blx	r3
    b078:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b07c:	ldr	r0, [r3, #16]
    b080:	mov	r3, #15
    b084:	str	r3, [sp]
    b088:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b08c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b090:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b094:	bl	9b84 <print_expression>
    b098:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b09c:	ldr	r0, [pc, #-852]	; ad50 <print_expression+0x11cc>
    b0a0:	blx	r3
    b0a4:	b	c2f8 <print_expression+0x2774>
    b0a8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b0ac:	cmp	r3, #0
    b0b0:	beq	b0bc <print_expression+0x1538>
    b0b4:	ldr	r2, [pc, #-1020]	; acc0 <print_expression+0x113c>
    b0b8:	b	b0c0 <print_expression+0x153c>
    b0bc:	ldr	r2, [pc, #-1024]	; acc4 <print_expression+0x1140>
    b0c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b0c4:	mov	r0, r2
    b0c8:	blx	r3
    b0cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b0d0:	ldr	r0, [r3, #16]
    b0d4:	mov	r3, #15
    b0d8:	str	r3, [sp]
    b0dc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b0e0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b0e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b0e8:	bl	9b84 <print_expression>
    b0ec:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b0f0:	ldr	r0, [pc, #-936]	; ad50 <print_expression+0x11cc>
    b0f4:	blx	r3
    b0f8:	b	c2f8 <print_expression+0x2774>
    b0fc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b100:	cmp	r3, #0
    b104:	beq	b110 <print_expression+0x158c>
    b108:	ldr	r2, [pc, #-1096]	; acc8 <print_expression+0x1144>
    b10c:	b	b114 <print_expression+0x1590>
    b110:	ldr	r2, [pc, #-1100]	; accc <print_expression+0x1148>
    b114:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b118:	mov	r0, r2
    b11c:	blx	r3
    b120:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b124:	ldr	r0, [r3, #16]
    b128:	mov	r3, #15
    b12c:	str	r3, [sp]
    b130:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b134:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b138:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b13c:	bl	9b84 <print_expression>
    b140:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b144:	ldr	r0, [pc, #-1020]	; ad50 <print_expression+0x11cc>
    b148:	blx	r3
    b14c:	b	c2f8 <print_expression+0x2774>
    b150:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b154:	cmp	r3, #0
    b158:	beq	b164 <print_expression+0x15e0>
    b15c:	ldr	r2, [pc, #-1172]	; acd0 <print_expression+0x114c>
    b160:	b	b168 <print_expression+0x15e4>
    b164:	ldr	r2, [pc, #-1176]	; acd4 <print_expression+0x1150>
    b168:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b16c:	mov	r0, r2
    b170:	blx	r3
    b174:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b178:	ldr	r0, [r3, #16]
    b17c:	mov	r3, #15
    b180:	str	r3, [sp]
    b184:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b188:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b18c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b190:	bl	9b84 <print_expression>
    b194:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b198:	ldr	r0, [pc, #-1104]	; ad50 <print_expression+0x11cc>
    b19c:	blx	r3
    b1a0:	b	c2f8 <print_expression+0x2774>
    b1a4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b1a8:	cmp	r3, #0
    b1ac:	beq	b1b8 <print_expression+0x1634>
    b1b0:	ldr	r2, [pc, #-1248]	; acd8 <print_expression+0x1154>
    b1b4:	b	b1bc <print_expression+0x1638>
    b1b8:	ldr	r2, [pc, #-1252]	; acdc <print_expression+0x1158>
    b1bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b1c0:	mov	r0, r2
    b1c4:	blx	r3
    b1c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b1cc:	ldr	r0, [r3, #16]
    b1d0:	mov	r3, #15
    b1d4:	str	r3, [sp]
    b1d8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b1dc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b1e0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b1e4:	bl	9b84 <print_expression>
    b1e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b1ec:	ldr	r0, [pc, #-1188]	; ad50 <print_expression+0x11cc>
    b1f0:	blx	r3
    b1f4:	b	c2f8 <print_expression+0x2774>
    b1f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b1fc:	cmp	r3, #0
    b200:	beq	b20c <print_expression+0x1688>
    b204:	ldr	r2, [pc, #-1324]	; ace0 <print_expression+0x115c>
    b208:	b	b210 <print_expression+0x168c>
    b20c:	ldr	r2, [pc, #-1328]	; ace4 <print_expression+0x1160>
    b210:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b214:	mov	r0, r2
    b218:	blx	r3
    b21c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b220:	ldr	r0, [r3, #16]
    b224:	mov	r3, #15
    b228:	str	r3, [sp]
    b22c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b230:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b234:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b238:	bl	9b84 <print_expression>
    b23c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b240:	ldr	r0, [pc, #-1272]	; ad50 <print_expression+0x11cc>
    b244:	blx	r3
    b248:	b	c2f8 <print_expression+0x2774>
    b24c:	ldr	r3, [fp, #4]
    b250:	cmp	r3, #4
    b254:	bgt	b264 <print_expression+0x16e0>
    b258:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b25c:	ldr	r0, [pc, #-1308]	; ad48 <print_expression+0x11c4>
    b260:	blx	r3
    b264:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b268:	ldr	r0, [r3, #16]
    b26c:	mov	r3, #5
    b270:	str	r3, [sp]
    b274:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b278:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b27c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b280:	bl	9b84 <print_expression>
    b284:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b288:	cmp	r3, #0
    b28c:	bne	b29c <print_expression+0x1718>
    b290:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b294:	cmp	r3, #0
    b298:	beq	b2a4 <print_expression+0x1720>
    b29c:	ldr	r2, [pc, #-1468]	; ace8 <print_expression+0x1164>
    b2a0:	b	b2a8 <print_expression+0x1724>
    b2a4:	ldr	r2, [pc, #-1472]	; acec <print_expression+0x1168>
    b2a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b2ac:	mov	r0, r2
    b2b0:	blx	r3
    b2b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b2b8:	ldr	r0, [r3, #20]
    b2bc:	mov	r3, #5
    b2c0:	str	r3, [sp]
    b2c4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b2c8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b2cc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b2d0:	bl	9b84 <print_expression>
    b2d4:	ldr	r3, [fp, #4]
    b2d8:	cmp	r3, #4
    b2dc:	bgt	c2a4 <print_expression+0x2720>
    b2e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b2e4:	ldr	r0, [pc, #-1436]	; ad50 <print_expression+0x11cc>
    b2e8:	blx	r3
    b2ec:	b	c2a4 <print_expression+0x2720>
    b2f0:	ldr	r3, [fp, #4]
    b2f4:	cmp	r3, #4
    b2f8:	bgt	b308 <print_expression+0x1784>
    b2fc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b300:	ldr	r0, [pc, #-1472]	; ad48 <print_expression+0x11c4>
    b304:	blx	r3
    b308:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b30c:	ldr	r0, [r3, #16]
    b310:	mov	r3, #5
    b314:	str	r3, [sp]
    b318:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b31c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b320:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b324:	bl	9b84 <print_expression>
    b328:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b32c:	cmp	r3, #0
    b330:	bne	b340 <print_expression+0x17bc>
    b334:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b338:	cmp	r3, #0
    b33c:	beq	b348 <print_expression+0x17c4>
    b340:	ldr	r2, [pc, #-1624]	; acf0 <print_expression+0x116c>
    b344:	b	b34c <print_expression+0x17c8>
    b348:	ldr	r2, [pc, #-1628]	; acf4 <print_expression+0x1170>
    b34c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b350:	mov	r0, r2
    b354:	blx	r3
    b358:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b35c:	ldr	r0, [r3, #20]
    b360:	mov	r3, #5
    b364:	str	r3, [sp]
    b368:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b36c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b370:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b374:	bl	9b84 <print_expression>
    b378:	ldr	r3, [fp, #4]
    b37c:	cmp	r3, #4
    b380:	bgt	c2ac <print_expression+0x2728>
    b384:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b388:	ldr	r0, [pc, #-1600]	; ad50 <print_expression+0x11cc>
    b38c:	blx	r3
    b390:	b	c2ac <print_expression+0x2728>
    b394:	ldr	r3, [fp, #4]
    b398:	cmp	r3, #8
    b39c:	bgt	b3ac <print_expression+0x1828>
    b3a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b3a4:	ldr	r0, [pc, #-1636]	; ad48 <print_expression+0x11c4>
    b3a8:	blx	r3
    b3ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b3b0:	ldr	r0, [r3, #16]
    b3b4:	mov	r3, #9
    b3b8:	str	r3, [sp]
    b3bc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b3c0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b3c4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b3c8:	bl	9b84 <print_expression>
    b3cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b3d0:	cmp	r3, #0
    b3d4:	beq	b3e0 <print_expression+0x185c>
    b3d8:	ldr	r2, [pc, #-1768]	; acf8 <print_expression+0x1174>
    b3dc:	b	b3e4 <print_expression+0x1860>
    b3e0:	ldr	r2, [pc, #-1772]	; acfc <print_expression+0x1178>
    b3e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b3e8:	mov	r0, r2
    b3ec:	blx	r3
    b3f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b3f4:	ldr	r0, [r3, #20]
    b3f8:	mov	r3, #9
    b3fc:	str	r3, [sp]
    b400:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b404:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b408:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b40c:	bl	9b84 <print_expression>
    b410:	ldr	r3, [fp, #4]
    b414:	cmp	r3, #8
    b418:	bgt	c2b4 <print_expression+0x2730>
    b41c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b420:	ldr	r0, [pc, #-1752]	; ad50 <print_expression+0x11cc>
    b424:	blx	r3
    b428:	b	c2b4 <print_expression+0x2730>
    b42c:	ldr	r3, [fp, #4]
    b430:	cmp	r3, #9
    b434:	bgt	b444 <print_expression+0x18c0>
    b438:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b43c:	ldr	r0, [pc, #-1788]	; ad48 <print_expression+0x11c4>
    b440:	blx	r3
    b444:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b448:	ldr	r0, [r3, #16]
    b44c:	mov	r3, #10
    b450:	str	r3, [sp]
    b454:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b458:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b45c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b460:	bl	9b84 <print_expression>
    b464:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b468:	cmp	r3, #0
    b46c:	beq	b478 <print_expression+0x18f4>
    b470:	ldr	r2, [pc, #-1912]	; ad00 <print_expression+0x117c>
    b474:	b	b47c <print_expression+0x18f8>
    b478:	ldr	r2, [pc, #-1916]	; ad04 <print_expression+0x1180>
    b47c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b480:	mov	r0, r2
    b484:	blx	r3
    b488:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b48c:	ldr	r0, [r3, #20]
    b490:	mov	r3, #10
    b494:	str	r3, [sp]
    b498:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b49c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b4a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b4a4:	bl	9b84 <print_expression>
    b4a8:	ldr	r3, [fp, #4]
    b4ac:	cmp	r3, #9
    b4b0:	bgt	c2bc <print_expression+0x2738>
    b4b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b4b8:	ldr	r0, [pc, #-1904]	; ad50 <print_expression+0x11cc>
    b4bc:	blx	r3
    b4c0:	b	c2bc <print_expression+0x2738>
    b4c4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b4c8:	cmp	r3, #0
    b4cc:	beq	b4d8 <print_expression+0x1954>
    b4d0:	ldr	r2, [pc, #-2000]	; ad08 <print_expression+0x1184>
    b4d4:	b	b4dc <print_expression+0x1958>
    b4d8:	ldr	r2, [pc, #-2004]	; ad0c <print_expression+0x1188>
    b4dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b4e0:	mov	r0, r2
    b4e4:	blx	r3
    b4e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b4ec:	ldr	r0, [r3, #16]
    b4f0:	mov	r3, #15
    b4f4:	str	r3, [sp]
    b4f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b4fc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b500:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b504:	bl	9b84 <print_expression>
    b508:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b50c:	ldr	r0, [pc, #-1988]	; ad50 <print_expression+0x11cc>
    b510:	blx	r3
    b514:	b	c2f8 <print_expression+0x2774>
    b518:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b51c:	cmp	r3, #0
    b520:	beq	b52c <print_expression+0x19a8>
    b524:	ldr	r2, [pc, #-2076]	; ad10 <print_expression+0x118c>
    b528:	b	b530 <print_expression+0x19ac>
    b52c:	ldr	r2, [pc, #-2080]	; ad14 <print_expression+0x1190>
    b530:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b534:	mov	r0, r2
    b538:	blx	r3
    b53c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b540:	ldr	r0, [r3, #16]
    b544:	mov	r3, #15
    b548:	str	r3, [sp]
    b54c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b550:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b554:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b558:	bl	9b84 <print_expression>
    b55c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b560:	ldr	r0, [pc, #-1976]	; adb0 <print_expression+0x122c>
    b564:	blx	r3
    b568:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b56c:	ldr	r0, [r3, #20]
    b570:	mov	r3, #15
    b574:	str	r3, [sp]
    b578:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b57c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b580:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b584:	bl	9b84 <print_expression>
    b588:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b58c:	ldr	r0, [pc, #-2116]	; ad50 <print_expression+0x11cc>
    b590:	blx	r3
    b594:	b	c2f8 <print_expression+0x2774>
    b598:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b59c:	cmp	r3, #0
    b5a0:	beq	b5ac <print_expression+0x1a28>
    b5a4:	ldr	r2, [pc, #-2196]	; ad18 <print_expression+0x1194>
    b5a8:	b	b5b0 <print_expression+0x1a2c>
    b5ac:	ldr	r2, [pc, #-2200]	; ad1c <print_expression+0x1198>
    b5b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b5b4:	mov	r0, r2
    b5b8:	blx	r3
    b5bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b5c0:	ldr	r0, [r3, #16]
    b5c4:	mov	r3, #15
    b5c8:	str	r3, [sp]
    b5cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b5d0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b5d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b5d8:	bl	9b84 <print_expression>
    b5dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b5e0:	ldr	r0, [pc, #-2104]	; adb0 <print_expression+0x122c>
    b5e4:	blx	r3
    b5e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b5ec:	ldr	r0, [r3, #20]
    b5f0:	mov	r3, #15
    b5f4:	str	r3, [sp]
    b5f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b5fc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b600:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b604:	bl	9b84 <print_expression>
    b608:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b60c:	ldr	r0, [pc, #-2244]	; ad50 <print_expression+0x11cc>
    b610:	blx	r3
    b614:	b	c2f8 <print_expression+0x2774>
    b618:	ldr	r3, [fp, #4]
    b61c:	cmp	r3, #2
    b620:	bgt	b630 <print_expression+0x1aac>
    b624:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b628:	ldr	r0, [pc, #-2280]	; ad48 <print_expression+0x11c4>
    b62c:	blx	r3
    b630:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b634:	ldr	r0, [r3, #16]
    b638:	mov	r3, #3
    b63c:	str	r3, [sp]
    b640:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b644:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b648:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b64c:	bl	9b84 <print_expression>
    b650:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b654:	ldr	r0, [pc, #-2364]	; ad20 <print_expression+0x119c>
    b658:	blx	r3
    b65c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b660:	ldr	r0, [r3, #20]
    b664:	mov	r3, #3
    b668:	str	r3, [sp]
    b66c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b670:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b674:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b678:	bl	9b84 <print_expression>
    b67c:	ldr	r3, [fp, #4]
    b680:	cmp	r3, #2
    b684:	bgt	c2c4 <print_expression+0x2740>
    b688:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b68c:	ldr	r0, [pc, #-2372]	; ad50 <print_expression+0x11cc>
    b690:	blx	r3
    b694:	b	c2c4 <print_expression+0x2740>
    b698:	ldr	r3, [fp, #4]
    b69c:	cmp	r3, #2
    b6a0:	bgt	b6b0 <print_expression+0x1b2c>
    b6a4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b6a8:	ldr	r0, [pc, #-2408]	; ad48 <print_expression+0x11c4>
    b6ac:	blx	r3
    b6b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b6b4:	ldr	r0, [r3, #16]
    b6b8:	mov	r3, #3
    b6bc:	str	r3, [sp]
    b6c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b6c4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b6c8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b6cc:	bl	9b84 <print_expression>
    b6d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b6d4:	ldr	r0, [pc, #-2488]	; ad24 <print_expression+0x11a0>
    b6d8:	blx	r3
    b6dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b6e0:	ldr	r0, [r3, #20]
    b6e4:	mov	r3, #3
    b6e8:	str	r3, [sp]
    b6ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b6f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b6f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b6f8:	bl	9b84 <print_expression>
    b6fc:	ldr	r3, [fp, #4]
    b700:	cmp	r3, #2
    b704:	bgt	c2cc <print_expression+0x2748>
    b708:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b70c:	ldr	r0, [pc, #-2500]	; ad50 <print_expression+0x11cc>
    b710:	blx	r3
    b714:	b	c2cc <print_expression+0x2748>
    b718:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b71c:	ldr	r0, [pc, #-2556]	; ad28 <print_expression+0x11a4>
    b720:	blx	r3
    b724:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b728:	ldr	r0, [r3, #16]
    b72c:	mov	r3, #1
    b730:	str	r3, [sp]
    b734:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b738:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b73c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b740:	bl	9b84 <print_expression>
    b744:	b	c2f8 <print_expression+0x2774>
    b748:	ldr	r3, [fp, #4]
    b74c:	cmp	r3, #5
    b750:	bgt	b760 <print_expression+0x1bdc>
    b754:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b758:	ldr	r0, [pc, #-2584]	; ad48 <print_expression+0x11c4>
    b75c:	blx	r3
    b760:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b764:	ldr	r0, [r3, #16]
    b768:	mov	r3, #6
    b76c:	str	r3, [sp]
    b770:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b774:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b778:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b77c:	bl	9b84 <print_expression>
    b780:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b784:	ldr	r0, [pc, #-2656]	; ad2c <print_expression+0x11a8>
    b788:	blx	r3
    b78c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b790:	ldr	r0, [r3, #20]
    b794:	mov	r3, #6
    b798:	str	r3, [sp]
    b79c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b7a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b7a4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b7a8:	bl	9b84 <print_expression>
    b7ac:	ldr	r3, [fp, #4]
    b7b0:	cmp	r3, #5
    b7b4:	bgt	c2d4 <print_expression+0x2750>
    b7b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b7bc:	ldr	r0, [pc, #-2676]	; ad50 <print_expression+0x11cc>
    b7c0:	blx	r3
    b7c4:	b	c2d4 <print_expression+0x2750>
    b7c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b7cc:	ldr	r0, [pc, #-2724]	; ad30 <print_expression+0x11ac>
    b7d0:	blx	r3
    b7d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b7d8:	ldr	r0, [r3, #16]
    b7dc:	mov	r3, #1
    b7e0:	str	r3, [sp]
    b7e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b7e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b7ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b7f0:	bl	9b84 <print_expression>
    b7f4:	b	c2f8 <print_expression+0x2774>
    b7f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b7fc:	cmp	r3, #0
    b800:	beq	b80c <print_expression+0x1c88>
    b804:	ldr	r2, [pc, #-2776]	; ad34 <print_expression+0x11b0>
    b808:	b	b810 <print_expression+0x1c8c>
    b80c:	ldr	r2, [pc, #-2780]	; ad38 <print_expression+0x11b4>
    b810:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b814:	mov	r0, r2
    b818:	blx	r3
    b81c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b820:	ldr	r0, [r3, #16]
    b824:	mov	r3, #15
    b828:	str	r3, [sp]
    b82c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b830:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b834:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b838:	bl	9b84 <print_expression>
    b83c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b840:	ldr	r0, [pc, #-2808]	; ad50 <print_expression+0x11cc>
    b844:	blx	r3
    b848:	b	c2f8 <print_expression+0x2774>
    b84c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b850:	cmp	r3, #0
    b854:	beq	b860 <print_expression+0x1cdc>
    b858:	ldr	r2, [pc, #-2852]	; ad3c <print_expression+0x11b8>
    b85c:	b	b864 <print_expression+0x1ce0>
    b860:	ldr	r2, [pc, #-2856]	; ad40 <print_expression+0x11bc>
    b864:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b868:	mov	r0, r2
    b86c:	blx	r3
    b870:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b874:	ldr	r0, [r3, #16]
    b878:	mov	r3, #15
    b87c:	str	r3, [sp]
    b880:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b884:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b888:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b88c:	bl	9b84 <print_expression>
    b890:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b894:	ldr	r0, [pc, #-2892]	; ad50 <print_expression+0x11cc>
    b898:	blx	r3
    b89c:	b	c2f8 <print_expression+0x2774>
    b8a0:	ldr	r3, [fp, #4]
    b8a4:	cmp	r3, #6
    b8a8:	bgt	b8b8 <print_expression+0x1d34>
    b8ac:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b8b0:	ldr	r0, [pc, #-2928]	; ad48 <print_expression+0x11c4>
    b8b4:	blx	r3
    b8b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b8bc:	ldr	r0, [r3, #16]
    b8c0:	mov	r3, #7
    b8c4:	str	r3, [sp]
    b8c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b8cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b8d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b8d4:	bl	9b84 <print_expression>
    b8d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b8dc:	ldr	r0, [pc, #-2976]	; ad44 <print_expression+0x11c0>
    b8e0:	blx	r3
    b8e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b8e8:	ldr	r0, [r3, #20]
    b8ec:	mov	r3, #7
    b8f0:	str	r3, [sp]
    b8f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b8f8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b8fc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b900:	bl	9b84 <print_expression>
    b904:	ldr	r3, [fp, #4]
    b908:	cmp	r3, #6
    b90c:	bgt	c2dc <print_expression+0x2758>
    b910:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b914:	ldr	r0, [pc, #-3020]	; ad50 <print_expression+0x11cc>
    b918:	blx	r3
    b91c:	b	c2dc <print_expression+0x2758>
    b920:	ldr	r3, [fp, #4]
    b924:	cmp	r3, #1
    b928:	bgt	b938 <print_expression+0x1db4>
    b92c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b930:	ldr	r0, [pc, #-3056]	; ad48 <print_expression+0x11c4>
    b934:	blx	r3
    b938:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b93c:	ldr	r0, [r3, #16]
    b940:	mov	r3, #2
    b944:	str	r3, [sp]
    b948:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b94c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b950:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b954:	bl	9b84 <print_expression>
    b958:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b95c:	ldr	r0, [pc, #-3096]	; ad4c <print_expression+0x11c8>
    b960:	blx	r3
    b964:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b968:	ldr	r0, [r3, #20]
    b96c:	mov	r3, #2
    b970:	str	r3, [sp]
    b974:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b978:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b97c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b980:	bl	9b84 <print_expression>
    b984:	ldr	r3, [fp, #4]
    b988:	cmp	r3, #1
    b98c:	bgt	c2e4 <print_expression+0x2760>
    b990:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b994:	ldr	r0, [pc, #-3148]	; ad50 <print_expression+0x11cc>
    b998:	blx	r3
    b99c:	b	c2e4 <print_expression+0x2760>
    b9a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b9a4:	cmp	r3, #0
    b9a8:	beq	b9b4 <print_expression+0x1e30>
    b9ac:	ldr	r2, [pc, #-3168]	; ad54 <print_expression+0x11d0>
    b9b0:	b	b9b8 <print_expression+0x1e34>
    b9b4:	ldr	r2, [pc, #-3172]	; ad58 <print_expression+0x11d4>
    b9b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b9bc:	mov	r0, r2
    b9c0:	blx	r3
    b9c4:	b	c2f8 <print_expression+0x2774>
    b9c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b9cc:	cmp	r3, #0
    b9d0:	beq	b9dc <print_expression+0x1e58>
    b9d4:	ldr	r2, [pc, #-3200]	; ad5c <print_expression+0x11d8>
    b9d8:	b	b9e0 <print_expression+0x1e5c>
    b9dc:	ldr	r2, [pc, #-3204]	; ad60 <print_expression+0x11dc>
    b9e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b9e4:	mov	r0, r2
    b9e8:	blx	r3
    b9ec:	b	c2f8 <print_expression+0x2774>
    b9f0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b9f4:	cmp	r3, #0
    b9f8:	beq	ba04 <print_expression+0x1e80>
    b9fc:	ldr	r2, [pc, #-3232]	; ad64 <print_expression+0x11e0>
    ba00:	b	ba08 <print_expression+0x1e84>
    ba04:	ldr	r2, [pc, #-3236]	; ad68 <print_expression+0x11e4>
    ba08:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ba0c:	mov	r0, r2
    ba10:	blx	r3
    ba14:	b	c2f8 <print_expression+0x2774>
    ba18:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ba1c:	cmp	r3, #0
    ba20:	beq	ba2c <print_expression+0x1ea8>
    ba24:	ldr	r2, [pc, #-3264]	; ad6c <print_expression+0x11e8>
    ba28:	b	ba30 <print_expression+0x1eac>
    ba2c:	ldr	r2, [pc, #-3268]	; ad70 <print_expression+0x11ec>
    ba30:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ba34:	mov	r0, r2
    ba38:	blx	r3
    ba3c:	b	c2f8 <print_expression+0x2774>
    ba40:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ba44:	cmp	r3, #0
    ba48:	beq	ba54 <print_expression+0x1ed0>
    ba4c:	ldr	r2, [pc, #-3296]	; ad74 <print_expression+0x11f0>
    ba50:	b	ba58 <print_expression+0x1ed4>
    ba54:	ldr	r2, [pc, #-3300]	; ad78 <print_expression+0x11f4>
    ba58:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ba5c:	mov	r0, r2
    ba60:	blx	r3
    ba64:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ba68:	ldr	r0, [r3, #16]
    ba6c:	mov	r3, #15
    ba70:	str	r3, [sp]
    ba74:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ba78:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ba7c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ba80:	bl	9b84 <print_expression>
    ba84:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ba88:	ldr	r0, [pc, #-3296]	; adb0 <print_expression+0x122c>
    ba8c:	blx	r3
    ba90:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ba94:	ldr	r0, [r3, #20]
    ba98:	mov	r3, #15
    ba9c:	str	r3, [sp]
    baa0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    baa4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    baa8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    baac:	bl	9b84 <print_expression>
    bab0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bab4:	ldr	r3, [r3, #24]
    bab8:	cmp	r3, #0
    babc:	beq	baec <print_expression+0x1f68>
    bac0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bac4:	ldr	r0, [pc, #-3356]	; adb0 <print_expression+0x122c>
    bac8:	blx	r3
    bacc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bad0:	ldr	r0, [r3, #24]
    bad4:	mov	r3, #15
    bad8:	str	r3, [sp]
    badc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bae0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bae4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bae8:	bl	9b84 <print_expression>
    baec:	ldr	r3, [fp, #-60]	; 0xffffffc4
    baf0:	ldr	r0, [pc, #-3412]	; ada4 <print_expression+0x1220>
    baf4:	blx	r3
    baf8:	b	c2f8 <print_expression+0x2774>
    bafc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bb00:	cmp	r3, #0
    bb04:	beq	bb10 <print_expression+0x1f8c>
    bb08:	ldr	r2, [pc, #-3476]	; ad7c <print_expression+0x11f8>
    bb0c:	b	bb14 <print_expression+0x1f90>
    bb10:	ldr	r2, [pc, #-3480]	; ad80 <print_expression+0x11fc>
    bb14:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bb18:	mov	r0, r2
    bb1c:	blx	r3
    bb20:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bb24:	ldr	r0, [r3, #16]
    bb28:	mov	r3, #15
    bb2c:	str	r3, [sp]
    bb30:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bb34:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bb38:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bb3c:	bl	9b84 <print_expression>
    bb40:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bb44:	ldr	r0, [pc, #-3496]	; ada4 <print_expression+0x1220>
    bb48:	blx	r3
    bb4c:	b	c2f8 <print_expression+0x2774>
    bb50:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bb54:	cmp	r3, #0
    bb58:	beq	bb64 <print_expression+0x1fe0>
    bb5c:	ldr	r2, [pc, #-3552]	; ad84 <print_expression+0x1200>
    bb60:	b	bb68 <print_expression+0x1fe4>
    bb64:	ldr	r2, [pc, #-3556]	; ad88 <print_expression+0x1204>
    bb68:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bb6c:	mov	r0, r2
    bb70:	blx	r3
    bb74:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bb78:	ldr	r0, [r3, #16]
    bb7c:	mov	r3, #15
    bb80:	str	r3, [sp]
    bb84:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bb88:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bb8c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bb90:	bl	9b84 <print_expression>
    bb94:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bb98:	ldr	r0, [pc, #-3580]	; ada4 <print_expression+0x1220>
    bb9c:	blx	r3
    bba0:	b	c2f8 <print_expression+0x2774>
    bba4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bba8:	ldr	r0, [r3, #16]
    bbac:	mov	r3, #15
    bbb0:	str	r3, [sp]
    bbb4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bbb8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bbbc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bbc0:	bl	9b84 <print_expression>
    bbc4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bbc8:	cmp	r3, #0
    bbcc:	beq	bbd8 <print_expression+0x2054>
    bbd0:	ldr	r2, [pc, #-3660]	; ad8c <print_expression+0x1208>
    bbd4:	b	bbdc <print_expression+0x2058>
    bbd8:	ldr	r2, [pc, #-3664]	; ad90 <print_expression+0x120c>
    bbdc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bbe0:	mov	r0, r2
    bbe4:	blx	r3
    bbe8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bbec:	ldr	r0, [r3, #20]
    bbf0:	mov	r3, #15
    bbf4:	str	r3, [sp]
    bbf8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bbfc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bc00:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bc04:	bl	9b84 <print_expression>
    bc08:	b	c2f8 <print_expression+0x2774>
    bc0c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bc10:	cmp	r3, #0
    bc14:	beq	bc20 <print_expression+0x209c>
    bc18:	ldr	r2, [pc, #-3724]	; ad94 <print_expression+0x1210>
    bc1c:	b	bc24 <print_expression+0x20a0>
    bc20:	ldr	r2, [pc, #-3728]	; ad98 <print_expression+0x1214>
    bc24:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bc28:	mov	r0, r2
    bc2c:	blx	r3
    bc30:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bc34:	ldr	r0, [r3, #16]
    bc38:	mov	r3, #15
    bc3c:	str	r3, [sp]
    bc40:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bc44:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bc48:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bc4c:	bl	9b84 <print_expression>
    bc50:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bc54:	ldr	r3, [r3, #20]
    bc58:	cmp	r3, #0
    bc5c:	beq	bc8c <print_expression+0x2108>
    bc60:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bc64:	ldr	r0, [pc, #-3772]	; adb0 <print_expression+0x122c>
    bc68:	blx	r3
    bc6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bc70:	ldr	r0, [r3, #20]
    bc74:	mov	r3, #15
    bc78:	str	r3, [sp]
    bc7c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bc80:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bc84:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bc88:	bl	9b84 <print_expression>
    bc8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bc90:	ldr	r0, [pc, #-3828]	; ada4 <print_expression+0x1220>
    bc94:	blx	r3
    bc98:	b	c2f8 <print_expression+0x2774>
    bc9c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bca0:	cmp	r3, #0
    bca4:	beq	bcb0 <print_expression+0x212c>
    bca8:	ldr	r2, [pc, #-3860]	; ad9c <print_expression+0x1218>
    bcac:	b	bcb4 <print_expression+0x2130>
    bcb0:	ldr	r2, [pc, #-3864]	; ada0 <print_expression+0x121c>
    bcb4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bcb8:	mov	r0, r2
    bcbc:	blx	r3
    bcc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bcc4:	ldr	r0, [r3, #16]
    bcc8:	mov	r3, #15
    bccc:	str	r3, [sp]
    bcd0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bcd4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bcd8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bcdc:	bl	9b84 <print_expression>
    bce0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bce4:	ldr	r3, [r3, #20]
    bce8:	cmp	r3, #0
    bcec:	beq	bd1c <print_expression+0x2198>
    bcf0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bcf4:	ldr	r0, [pc, #-3916]	; adb0 <print_expression+0x122c>
    bcf8:	blx	r3
    bcfc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bd00:	ldr	r0, [r3, #20]
    bd04:	mov	r3, #15
    bd08:	str	r3, [sp]
    bd0c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd10:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bd14:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bd18:	bl	9b84 <print_expression>
    bd1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bd20:	ldr	r0, [pc, #-3972]	; ada4 <print_expression+0x1220>
    bd24:	blx	r3
    bd28:	b	c2f8 <print_expression+0x2774>
    bd2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd30:	cmp	r3, #0
    bd34:	beq	bd40 <print_expression+0x21bc>
    bd38:	ldr	r2, [pc, #-3992]	; ada8 <print_expression+0x1224>
    bd3c:	b	bd44 <print_expression+0x21c0>
    bd40:	ldr	r2, [pc, #-3996]	; adac <print_expression+0x1228>
    bd44:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bd48:	mov	r0, r2
    bd4c:	blx	r3
    bd50:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bd54:	ldr	r0, [r3, #16]
    bd58:	mov	r3, #15
    bd5c:	str	r3, [sp]
    bd60:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd64:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bd68:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bd6c:	bl	9b84 <print_expression>
    bd70:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bd74:	ldr	r0, [pc, #-4044]	; adb0 <print_expression+0x122c>
    bd78:	blx	r3
    bd7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bd80:	ldr	r0, [r3, #20]
    bd84:	mov	r3, #15
    bd88:	str	r3, [sp]
    bd8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd90:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bd94:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bd98:	bl	9b84 <print_expression>
    bd9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bda0:	ldr	r0, [pc, #-4088]	; adb0 <print_expression+0x122c>
    bda4:	blx	r3
    bda8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bdac:	ldr	r0, [r3, #24]
    bdb0:	mov	r3, #15
    bdb4:	str	r3, [sp]
    bdb8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bdbc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bdc0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bdc4:	bl	9b84 <print_expression>
    bdc8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bdcc:	ldr	r0, [pc, #1332]	; c308 <print_expression+0x2784>
    bdd0:	blx	r3
    bdd4:	b	c2f8 <print_expression+0x2774>
    bdd8:	ldr	r3, [fp, #4]
    bddc:	cmp	r3, #3
    bde0:	bgt	bdf0 <print_expression+0x226c>
    bde4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bde8:	ldr	r0, [pc, #1308]	; c30c <print_expression+0x2788>
    bdec:	blx	r3
    bdf0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bdf4:	ldr	r0, [r3, #16]
    bdf8:	mov	r3, #4
    bdfc:	str	r3, [sp]
    be00:	ldr	r3, [fp, #-68]	; 0xffffffbc
    be04:	ldr	r2, [fp, #-64]	; 0xffffffc0
    be08:	ldr	r1, [fp, #-60]	; 0xffffffc4
    be0c:	bl	9b84 <print_expression>
    be10:	ldr	r3, [fp, #-60]	; 0xffffffc4
    be14:	ldr	r0, [pc, #1268]	; c310 <print_expression+0x278c>
    be18:	blx	r3
    be1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    be20:	ldr	r0, [r3, #20]
    be24:	mov	r3, #4
    be28:	str	r3, [sp]
    be2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    be30:	ldr	r2, [fp, #-64]	; 0xffffffc0
    be34:	ldr	r1, [fp, #-60]	; 0xffffffc4
    be38:	bl	9b84 <print_expression>
    be3c:	ldr	r3, [fp, #4]
    be40:	cmp	r3, #3
    be44:	bgt	c2ec <print_expression+0x2768>
    be48:	ldr	r3, [fp, #-60]	; 0xffffffc4
    be4c:	ldr	r0, [pc, #1204]	; c308 <print_expression+0x2784>
    be50:	blx	r3
    be54:	b	c2ec <print_expression+0x2768>
    be58:	ldr	r3, [fp, #-68]	; 0xffffffbc
    be5c:	cmp	r3, #0
    be60:	beq	be6c <print_expression+0x22e8>
    be64:	ldr	r2, [pc, #1192]	; c314 <print_expression+0x2790>
    be68:	b	be70 <print_expression+0x22ec>
    be6c:	ldr	r2, [pc, #1188]	; c318 <print_expression+0x2794>
    be70:	ldr	r3, [fp, #-60]	; 0xffffffc4
    be74:	mov	r0, r2
    be78:	blx	r3
    be7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    be80:	ldr	r0, [r3, #16]
    be84:	mov	r3, #15
    be88:	str	r3, [sp]
    be8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    be90:	ldr	r2, [fp, #-64]	; 0xffffffc0
    be94:	ldr	r1, [fp, #-60]	; 0xffffffc4
    be98:	bl	9b84 <print_expression>
    be9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bea0:	ldr	r0, [pc, #1140]	; c31c <print_expression+0x2798>
    bea4:	blx	r3
    bea8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    beac:	ldr	r0, [r3, #20]
    beb0:	mov	r3, #15
    beb4:	str	r3, [sp]
    beb8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bebc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bec0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bec4:	bl	9b84 <print_expression>
    bec8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    becc:	ldr	r0, [pc, #1076]	; c308 <print_expression+0x2784>
    bed0:	blx	r3
    bed4:	b	c2f8 <print_expression+0x2774>
    bed8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bedc:	cmp	r3, #0
    bee0:	beq	beec <print_expression+0x2368>
    bee4:	ldr	r2, [pc, #1076]	; c320 <print_expression+0x279c>
    bee8:	b	bef0 <print_expression+0x236c>
    beec:	ldr	r2, [pc, #1072]	; c324 <print_expression+0x27a0>
    bef0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bef4:	mov	r0, r2
    bef8:	blx	r3
    befc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bf00:	ldr	r0, [r3, #16]
    bf04:	mov	r3, #15
    bf08:	str	r3, [sp]
    bf0c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bf10:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bf14:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bf18:	bl	9b84 <print_expression>
    bf1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bf20:	ldr	r0, [pc, #992]	; c308 <print_expression+0x2784>
    bf24:	blx	r3
    bf28:	b	c2f8 <print_expression+0x2774>
    bf2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bf30:	cmp	r3, #0
    bf34:	beq	bf40 <print_expression+0x23bc>
    bf38:	ldr	r2, [pc, #1000]	; c328 <print_expression+0x27a4>
    bf3c:	b	bf44 <print_expression+0x23c0>
    bf40:	ldr	r2, [pc, #996]	; c32c <print_expression+0x27a8>
    bf44:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bf48:	mov	r0, r2
    bf4c:	blx	r3
    bf50:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bf54:	ldr	r0, [r3, #16]
    bf58:	mov	r3, #15
    bf5c:	str	r3, [sp]
    bf60:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bf64:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bf68:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bf6c:	bl	9b84 <print_expression>
    bf70:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bf74:	ldr	r0, [pc, #928]	; c31c <print_expression+0x2798>
    bf78:	blx	r3
    bf7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bf80:	ldr	r0, [r3, #20]
    bf84:	mov	r3, #15
    bf88:	str	r3, [sp]
    bf8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bf90:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bf94:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bf98:	bl	9b84 <print_expression>
    bf9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bfa0:	ldr	r0, [pc, #864]	; c308 <print_expression+0x2784>
    bfa4:	blx	r3
    bfa8:	b	c2f8 <print_expression+0x2774>
    bfac:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bfb0:	cmp	r3, #0
    bfb4:	beq	bfc0 <print_expression+0x243c>
    bfb8:	ldr	r2, [pc, #880]	; c330 <print_expression+0x27ac>
    bfbc:	b	bfc4 <print_expression+0x2440>
    bfc0:	ldr	r2, [pc, #876]	; c334 <print_expression+0x27b0>
    bfc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bfc8:	ldr	r1, [r3, #12]
    bfcc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bfd0:	mov	r0, r2
    bfd4:	blx	r3
    bfd8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bfdc:	ldr	r0, [r3, #16]
    bfe0:	mov	r3, #15
    bfe4:	str	r3, [sp]
    bfe8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bfec:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bff0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bff4:	bl	9b84 <print_expression>
    bff8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bffc:	ldr	r0, [pc, #772]	; c308 <print_expression+0x2784>
    c000:	blx	r3
    c004:	b	c2f8 <print_expression+0x2774>
    c008:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c00c:	cmp	r3, #0
    c010:	beq	c01c <print_expression+0x2498>
    c014:	ldr	r2, [pc, #796]	; c338 <print_expression+0x27b4>
    c018:	b	c020 <print_expression+0x249c>
    c01c:	ldr	r2, [pc, #792]	; c33c <print_expression+0x27b8>
    c020:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c024:	ldr	r1, [r3, #12]
    c028:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c02c:	mov	r0, r2
    c030:	blx	r3
    c034:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c038:	ldr	r0, [r3, #16]
    c03c:	mov	r3, #15
    c040:	str	r3, [sp]
    c044:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c048:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c04c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c050:	bl	9b84 <print_expression>
    c054:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c058:	ldr	r0, [pc, #680]	; c308 <print_expression+0x2784>
    c05c:	blx	r3
    c060:	b	c2f8 <print_expression+0x2774>
    c064:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c068:	cmp	r3, #0
    c06c:	beq	c078 <print_expression+0x24f4>
    c070:	ldr	r2, [pc, #712]	; c340 <print_expression+0x27bc>
    c074:	b	c07c <print_expression+0x24f8>
    c078:	ldr	r2, [pc, #708]	; c344 <print_expression+0x27c0>
    c07c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c080:	ldr	r1, [r3, #12]
    c084:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c088:	mov	r0, r2
    c08c:	blx	r3
    c090:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c094:	ldr	r3, [r3, #16]
    c098:	cmp	r3, #0
    c09c:	beq	c0d8 <print_expression+0x2554>
    c0a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c0a4:	ldr	r0, [pc, #668]	; c348 <print_expression+0x27c4>
    c0a8:	blx	r3
    c0ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c0b0:	ldr	r0, [r3, #16]
    c0b4:	mov	r3, #15
    c0b8:	str	r3, [sp]
    c0bc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c0c0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c0c4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c0c8:	bl	9b84 <print_expression>
    c0cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c0d0:	ldr	r0, [pc, #628]	; c34c <print_expression+0x27c8>
    c0d4:	blx	r3
    c0d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c0dc:	ldr	r0, [pc, #620]	; c350 <print_expression+0x27cc>
    c0e0:	blx	r3
    c0e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c0e8:	ldr	r0, [r3, #20]
    c0ec:	mov	r3, #15
    c0f0:	str	r3, [sp]
    c0f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c0f8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c0fc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c100:	bl	9b84 <print_expression>
    c104:	b	c2f8 <print_expression+0x2774>
    c108:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c10c:	ldr	r2, [r3, #12]
    c110:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c114:	mov	r1, r2
    c118:	ldr	r0, [pc, #548]	; c344 <print_expression+0x27c0>
    c11c:	blx	r3
    c120:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c124:	ldr	r3, [r3, #16]
    c128:	cmp	r3, #0
    c12c:	beq	c2f4 <print_expression+0x2770>
    c130:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c134:	ldr	r0, [pc, #524]	; c348 <print_expression+0x27c4>
    c138:	blx	r3
    c13c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c140:	ldr	r0, [r3, #16]
    c144:	mov	r3, #15
    c148:	str	r3, [sp]
    c14c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c150:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c154:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c158:	bl	9b84 <print_expression>
    c15c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c160:	ldr	r0, [pc, #484]	; c34c <print_expression+0x27c8>
    c164:	blx	r3
    c168:	b	c2f4 <print_expression+0x2770>
    c16c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c170:	cmp	r3, #0
    c174:	beq	c180 <print_expression+0x25fc>
    c178:	ldr	r2, [pc, #468]	; c354 <print_expression+0x27d0>
    c17c:	b	c184 <print_expression+0x2600>
    c180:	ldr	r2, [pc, #464]	; c358 <print_expression+0x27d4>
    c184:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c188:	mov	r0, r2
    c18c:	blx	r3
    c190:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c194:	ldr	r0, [r3, #16]
    c198:	mov	r3, #15
    c19c:	str	r3, [sp]
    c1a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c1a4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c1a8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c1ac:	bl	9b84 <print_expression>
    c1b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c1b4:	ldr	r0, [pc, #352]	; c31c <print_expression+0x2798>
    c1b8:	blx	r3
    c1bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c1c0:	ldr	r0, [r3, #20]
    c1c4:	mov	r3, #15
    c1c8:	str	r3, [sp]
    c1cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c1d0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c1d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c1d8:	bl	9b84 <print_expression>
    c1dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c1e0:	ldr	r0, [pc, #288]	; c308 <print_expression+0x2784>
    c1e4:	blx	r3
    c1e8:	b	c2f8 <print_expression+0x2774>
    c1ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c1f0:	cmp	r3, #0
    c1f4:	beq	c200 <print_expression+0x267c>
    c1f8:	ldr	r2, [pc, #348]	; c35c <print_expression+0x27d8>
    c1fc:	b	c204 <print_expression+0x2680>
    c200:	ldr	r2, [pc, #344]	; c360 <print_expression+0x27dc>
    c204:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c208:	ldr	r1, [r3, #12]
    c20c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c210:	mov	r0, r2
    c214:	blx	r3
    c218:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c21c:	ldr	r0, [r3, #16]
    c220:	mov	r3, #15
    c224:	str	r3, [sp]
    c228:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c22c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c230:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c234:	bl	9b84 <print_expression>
    c238:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c23c:	ldr	r0, [pc, #216]	; c31c <print_expression+0x2798>
    c240:	blx	r3
    c244:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c248:	ldr	r0, [r3, #20]
    c24c:	mov	r3, #15
    c250:	str	r3, [sp]
    c254:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c258:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c25c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c260:	bl	9b84 <print_expression>
    c264:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c268:	ldr	r0, [pc, #152]	; c308 <print_expression+0x2784>
    c26c:	blx	r3
    c270:	b	c2f8 <print_expression+0x2774>
    c274:	nop			; (mov r0, r0)
    c278:	b	c2f8 <print_expression+0x2774>
    c27c:	nop			; (mov r0, r0)
    c280:	b	c2f8 <print_expression+0x2774>
    c284:	nop			; (mov r0, r0)
    c288:	b	c2f8 <print_expression+0x2774>
    c28c:	nop			; (mov r0, r0)
    c290:	b	c2f8 <print_expression+0x2774>
    c294:	nop			; (mov r0, r0)
    c298:	b	c2f8 <print_expression+0x2774>
    c29c:	nop			; (mov r0, r0)
    c2a0:	b	c2f8 <print_expression+0x2774>
    c2a4:	nop			; (mov r0, r0)
    c2a8:	b	c2f8 <print_expression+0x2774>
    c2ac:	nop			; (mov r0, r0)
    c2b0:	b	c2f8 <print_expression+0x2774>
    c2b4:	nop			; (mov r0, r0)
    c2b8:	b	c2f8 <print_expression+0x2774>
    c2bc:	nop			; (mov r0, r0)
    c2c0:	b	c2f8 <print_expression+0x2774>
    c2c4:	nop			; (mov r0, r0)
    c2c8:	b	c2f8 <print_expression+0x2774>
    c2cc:	nop			; (mov r0, r0)
    c2d0:	b	c2f8 <print_expression+0x2774>
    c2d4:	nop			; (mov r0, r0)
    c2d8:	b	c2f8 <print_expression+0x2774>
    c2dc:	nop			; (mov r0, r0)
    c2e0:	b	c2f8 <print_expression+0x2774>
    c2e4:	nop			; (mov r0, r0)
    c2e8:	b	c2f8 <print_expression+0x2774>
    c2ec:	nop			; (mov r0, r0)
    c2f0:	b	c2f8 <print_expression+0x2774>
    c2f4:	nop			; (mov r0, r0)
    c2f8:	mov	r3, #0
    c2fc:	mov	r0, r3
    c300:	sub	sp, fp, #4
    c304:	pop	{fp, pc}
    c308:	.word	0x00000670
    c30c:	.word	0x00000674
    c310:	.word	0x00000c2c
    c314:	.word	0x00000c30
    c318:	.word	0x00000c40
    c31c:	.word	0x00000690
    c320:	.word	0x00000c48
    c324:	.word	0x00000c58
    c328:	.word	0x00000c60
    c32c:	.word	0x00000c78
    c330:	.word	0x00000c88
    c334:	.word	0x00000ca4
    c338:	.word	0x00000cb4
    c33c:	.word	0x00000cd0
    c340:	.word	0x00000cdc
    c344:	.word	0x00000ce8
    c348:	.word	0x0000092c
    c34c:	.word	0x00000930
    c350:	.word	0x00000cec
    c354:	.word	0x00000cf0
    c358:	.word	0x00000cfc
    c35c:	.word	0x00000d00
    c360:	.word	0x00000d1c

0000c364 <coda_expression_print_html>:
    c364:	push	{fp, lr}
    c368:	add	fp, sp, #4
    c36c:	sub	sp, sp, #16
    c370:	str	r0, [fp, #-8]
    c374:	str	r1, [fp, #-12]
    c378:	mov	r3, #15
    c37c:	str	r3, [sp]
    c380:	mov	r3, #1
    c384:	mov	r2, #1
    c388:	ldr	r1, [fp, #-12]
    c38c:	ldr	r0, [fp, #-8]
    c390:	bl	9b84 <print_expression>
    c394:	mov	r3, r0
    c398:	mov	r0, r3
    c39c:	sub	sp, fp, #4
    c3a0:	pop	{fp, pc}

0000c3a4 <coda_expression_print_xml>:
    c3a4:	push	{fp, lr}
    c3a8:	add	fp, sp, #4
    c3ac:	sub	sp, sp, #16
    c3b0:	str	r0, [fp, #-8]
    c3b4:	str	r1, [fp, #-12]
    c3b8:	mov	r3, #15
    c3bc:	str	r3, [sp]
    c3c0:	mov	r3, #0
    c3c4:	mov	r2, #1
    c3c8:	ldr	r1, [fp, #-12]
    c3cc:	ldr	r0, [fp, #-8]
    c3d0:	bl	9b84 <print_expression>
    c3d4:	mov	r3, r0
    c3d8:	mov	r0, r3
    c3dc:	sub	sp, fp, #4
    c3e0:	pop	{fp, pc}

0000c3e4 <coda_expression_print>:
    c3e4:	push	{fp, lr}
    c3e8:	add	fp, sp, #4
    c3ec:	sub	sp, sp, #16
    c3f0:	str	r0, [fp, #-8]
    c3f4:	str	r1, [fp, #-12]
    c3f8:	mov	r3, #15
    c3fc:	str	r3, [sp]
    c400:	mov	r3, #0
    c404:	mov	r2, #0
    c408:	ldr	r1, [fp, #-12]
    c40c:	ldr	r0, [fp, #-8]
    c410:	bl	9b84 <print_expression>
    c414:	mov	r3, r0
    c418:	mov	r0, r3
    c41c:	sub	sp, fp, #4
    c420:	pop	{fp, pc}

0000c424 <coda_expression_get_type_name>:
    c424:	push	{fp}		; (str fp, [sp, #-4]!)
    c428:	add	fp, sp, #0
    c42c:	sub	sp, sp, #12
    c430:	str	r0, [fp, #-8]
    c434:	ldr	r3, [fp, #-8]
    c438:	cmp	r3, #5
    c43c:	ldrls	pc, [pc, r3, lsl #2]
    c440:	b	c48c <coda_expression_get_type_name+0x68>
    c444:	.word	0x0000c45c
    c448:	.word	0x0000c464
    c44c:	.word	0x0000c46c
    c450:	.word	0x0000c474
    c454:	.word	0x0000c47c
    c458:	.word	0x0000c484
    c45c:	ldr	r3, [pc, #60]	; c4a0 <coda_expression_get_type_name+0x7c>
    c460:	b	c490 <coda_expression_get_type_name+0x6c>
    c464:	ldr	r3, [pc, #56]	; c4a4 <coda_expression_get_type_name+0x80>
    c468:	b	c490 <coda_expression_get_type_name+0x6c>
    c46c:	ldr	r3, [pc, #52]	; c4a8 <coda_expression_get_type_name+0x84>
    c470:	b	c490 <coda_expression_get_type_name+0x6c>
    c474:	ldr	r3, [pc, #48]	; c4ac <coda_expression_get_type_name+0x88>
    c478:	b	c490 <coda_expression_get_type_name+0x6c>
    c47c:	ldr	r3, [pc, #44]	; c4b0 <coda_expression_get_type_name+0x8c>
    c480:	b	c490 <coda_expression_get_type_name+0x6c>
    c484:	ldr	r3, [pc, #40]	; c4b4 <coda_expression_get_type_name+0x90>
    c488:	b	c490 <coda_expression_get_type_name+0x6c>
    c48c:	ldr	r3, [pc, #36]	; c4b8 <coda_expression_get_type_name+0x94>
    c490:	mov	r0, r3
    c494:	add	sp, fp, #0
    c498:	pop	{fp}		; (ldr fp, [sp], #4)
    c49c:	bx	lr
    c4a0:	.word	0x00000d28
    c4a4:	.word	0x00000d30
    c4a8:	.word	0x00000d38
    c4ac:	.word	0x00000d40
    c4b0:	.word	0x00000d48
    c4b4:	.word	0x00000d50
    c4b8:	.word	0x00000d58

0000c4bc <coda_expression_delete>:
    c4bc:	push	{fp, lr}
    c4c0:	add	fp, sp, #4
    c4c4:	sub	sp, sp, #16
    c4c8:	str	r0, [fp, #-16]
    c4cc:	ldr	r3, [fp, #-16]
    c4d0:	ldr	r3, [r3]
    c4d4:	sub	r3, r3, #18
    c4d8:	cmp	r3, #4
    c4dc:	ldrls	pc, [pc, r3, lsl #2]
    c4e0:	b	c51c <coda_expression_delete+0x60>
    c4e4:	.word	0x0000c59c
    c4e8:	.word	0x0000c59c
    c4ec:	.word	0x0000c59c
    c4f0:	.word	0x0000c4f8
    c4f4:	.word	0x0000c4f8
    c4f8:	ldr	r3, [fp, #-16]
    c4fc:	ldr	r3, [r3, #16]
    c500:	cmp	r3, #0
    c504:	beq	c5a4 <coda_expression_delete+0xe8>
    c508:	ldr	r3, [fp, #-16]
    c50c:	ldr	r3, [r3, #16]
    c510:	mov	r0, r3
    c514:	bl	0 <free>
    c518:	b	c5a4 <coda_expression_delete+0xe8>
    c51c:	ldr	r3, [fp, #-16]
    c520:	str	r3, [fp, #-12]
    c524:	ldr	r3, [fp, #-12]
    c528:	ldr	r3, [r3, #12]
    c52c:	cmp	r3, #0
    c530:	beq	c544 <coda_expression_delete+0x88>
    c534:	ldr	r3, [fp, #-12]
    c538:	ldr	r3, [r3, #12]
    c53c:	mov	r0, r3
    c540:	bl	0 <free>
    c544:	mov	r3, #0
    c548:	str	r3, [fp, #-8]
    c54c:	b	c58c <coda_expression_delete+0xd0>
    c550:	ldr	r3, [fp, #-12]
    c554:	ldr	r2, [fp, #-8]
    c558:	add	r2, r2, #4
    c55c:	ldr	r3, [r3, r2, lsl #2]
    c560:	cmp	r3, #0
    c564:	beq	c580 <coda_expression_delete+0xc4>
    c568:	ldr	r3, [fp, #-12]
    c56c:	ldr	r2, [fp, #-8]
    c570:	add	r2, r2, #4
    c574:	ldr	r3, [r3, r2, lsl #2]
    c578:	mov	r0, r3
    c57c:	bl	c4bc <coda_expression_delete>
    c580:	ldr	r3, [fp, #-8]
    c584:	add	r3, r3, #1
    c588:	str	r3, [fp, #-8]
    c58c:	ldr	r3, [fp, #-8]
    c590:	cmp	r3, #3
    c594:	ble	c550 <coda_expression_delete+0x94>
    c598:	b	c5a8 <coda_expression_delete+0xec>
    c59c:	nop			; (mov r0, r0)
    c5a0:	b	c5a8 <coda_expression_delete+0xec>
    c5a4:	nop			; (mov r0, r0)
    c5a8:	ldr	r0, [fp, #-16]
    c5ac:	bl	0 <free>
    c5b0:	nop			; (mov r0, r0)
    c5b4:	sub	sp, fp, #4
    c5b8:	pop	{fp, pc}

0000c5bc <coda_expression_is_constant>:
    c5bc:	push	{fp, lr}
    c5c0:	add	fp, sp, #4
    c5c4:	sub	sp, sp, #8
    c5c8:	str	r0, [fp, #-8]
    c5cc:	ldr	r3, [fp, #-8]
    c5d0:	cmp	r3, #0
    c5d4:	bne	c5f4 <coda_expression_is_constant+0x38>
    c5d8:	ldr	r3, [pc, #40]	; c608 <coda_expression_is_constant+0x4c>
    c5dc:	ldr	r2, [pc, #40]	; c60c <coda_expression_is_constant+0x50>
    c5e0:	ldr	r1, [pc, #40]	; c610 <coda_expression_is_constant+0x54>
    c5e4:	mvn	r0, #99	; 0x63
    c5e8:	bl	0 <coda_set_error>
    c5ec:	mvn	r3, #0
    c5f0:	b	c5fc <coda_expression_is_constant+0x40>
    c5f4:	ldr	r3, [fp, #-8]
    c5f8:	ldr	r3, [r3, #8]
    c5fc:	mov	r0, r3
    c600:	sub	sp, fp, #4
    c604:	pop	{fp, pc}
    c608:	.word	0x00001369
    c60c:	.word	0x00000024
    c610:	.word	0x00000d60

0000c614 <coda_expression_is_equal>:
    c614:	push	{fp, lr}
    c618:	add	fp, sp, #4
    c61c:	sub	sp, sp, #24
    c620:	str	r0, [fp, #-24]	; 0xffffffe8
    c624:	str	r1, [fp, #-28]	; 0xffffffe4
    c628:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c62c:	cmp	r3, #0
    c630:	bne	c64c <coda_expression_is_equal+0x38>
    c634:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c638:	cmp	r3, #0
    c63c:	moveq	r3, #1
    c640:	movne	r3, #0
    c644:	uxtb	r3, r3
    c648:	b	c85c <coda_expression_is_equal+0x248>
    c64c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c650:	cmp	r3, #0
    c654:	bne	c660 <coda_expression_is_equal+0x4c>
    c658:	mov	r3, #0
    c65c:	b	c85c <coda_expression_is_equal+0x248>
    c660:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c664:	ldr	r2, [r3]
    c668:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c66c:	ldr	r3, [r3]
    c670:	cmp	r2, r3
    c674:	beq	c680 <coda_expression_is_equal+0x6c>
    c678:	mov	r3, #0
    c67c:	b	c85c <coda_expression_is_equal+0x248>
    c680:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c684:	ldr	r3, [r3]
    c688:	sub	r3, r3, #18
    c68c:	cmp	r3, #4
    c690:	ldrls	pc, [pc, r3, lsl #2]
    c694:	b	c778 <coda_expression_is_equal+0x164>
    c698:	.word	0x0000c6ac
    c69c:	.word	0x0000c6d0
    c6a0:	.word	0x0000c6f8
    c6a4:	.word	0x0000c720
    c6a8:	.word	0x0000c720
    c6ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c6b0:	ldr	r2, [r3, #12]
    c6b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c6b8:	ldr	r3, [r3, #12]
    c6bc:	cmp	r2, r3
    c6c0:	moveq	r3, #1
    c6c4:	movne	r3, #0
    c6c8:	uxtb	r3, r3
    c6cc:	b	c85c <coda_expression_is_equal+0x248>
    c6d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c6d4:	vldr	d6, [r3, #16]
    c6d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c6dc:	vldr	d7, [r3, #16]
    c6e0:	vcmp.f64	d6, d7
    c6e4:	vmrs	APSR_nzcv, fpscr
    c6e8:	moveq	r3, #1
    c6ec:	movne	r3, #0
    c6f0:	uxtb	r3, r3
    c6f4:	b	c85c <coda_expression_is_equal+0x248>
    c6f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c6fc:	ldrd	r0, [r3, #16]
    c700:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c704:	ldrd	r2, [r3, #16]
    c708:	cmp	r1, r3
    c70c:	cmpeq	r0, r2
    c710:	moveq	r3, #1
    c714:	movne	r3, #0
    c718:	uxtb	r3, r3
    c71c:	b	c85c <coda_expression_is_equal+0x248>
    c720:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c724:	ldr	r2, [r3, #12]
    c728:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c72c:	ldr	r3, [r3, #12]
    c730:	cmp	r2, r3
    c734:	beq	c740 <coda_expression_is_equal+0x12c>
    c738:	mov	r3, #0
    c73c:	b	c85c <coda_expression_is_equal+0x248>
    c740:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c744:	ldr	r0, [r3, #16]
    c748:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c74c:	ldr	r1, [r3, #16]
    c750:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c754:	ldr	r3, [r3, #12]
    c758:	mov	r2, r3
    c75c:	bl	0 <memcmp>
    c760:	mov	r3, r0
    c764:	cmp	r3, #0
    c768:	moveq	r3, #1
    c76c:	movne	r3, #0
    c770:	uxtb	r3, r3
    c774:	b	c85c <coda_expression_is_equal+0x248>
    c778:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c77c:	str	r3, [fp, #-12]
    c780:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c784:	str	r3, [fp, #-16]
    c788:	ldr	r3, [fp, #-12]
    c78c:	ldr	r3, [r3, #12]
    c790:	cmp	r3, #0
    c794:	beq	c7e0 <coda_expression_is_equal+0x1cc>
    c798:	ldr	r3, [fp, #-16]
    c79c:	ldr	r3, [r3, #12]
    c7a0:	cmp	r3, #0
    c7a4:	bne	c7b0 <coda_expression_is_equal+0x19c>
    c7a8:	mov	r3, #0
    c7ac:	b	c85c <coda_expression_is_equal+0x248>
    c7b0:	ldr	r3, [fp, #-12]
    c7b4:	ldr	r2, [r3, #12]
    c7b8:	ldr	r3, [fp, #-16]
    c7bc:	ldr	r3, [r3, #12]
    c7c0:	mov	r1, r3
    c7c4:	mov	r0, r2
    c7c8:	bl	0 <strcmp>
    c7cc:	mov	r3, r0
    c7d0:	cmp	r3, #0
    c7d4:	beq	c7f8 <coda_expression_is_equal+0x1e4>
    c7d8:	mov	r3, #0
    c7dc:	b	c85c <coda_expression_is_equal+0x248>
    c7e0:	ldr	r3, [fp, #-16]
    c7e4:	ldr	r3, [r3, #12]
    c7e8:	cmp	r3, #0
    c7ec:	beq	c7f8 <coda_expression_is_equal+0x1e4>
    c7f0:	mov	r3, #0
    c7f4:	b	c85c <coda_expression_is_equal+0x248>
    c7f8:	mov	r3, #0
    c7fc:	str	r3, [fp, #-8]
    c800:	b	c84c <coda_expression_is_equal+0x238>
    c804:	ldr	r3, [fp, #-12]
    c808:	ldr	r2, [fp, #-8]
    c80c:	add	r2, r2, #4
    c810:	ldr	r0, [r3, r2, lsl #2]
    c814:	ldr	r3, [fp, #-16]
    c818:	ldr	r2, [fp, #-8]
    c81c:	add	r2, r2, #4
    c820:	ldr	r3, [r3, r2, lsl #2]
    c824:	mov	r1, r3
    c828:	bl	c614 <coda_expression_is_equal>
    c82c:	mov	r3, r0
    c830:	cmp	r3, #0
    c834:	bne	c840 <coda_expression_is_equal+0x22c>
    c838:	mov	r3, #0
    c83c:	b	c85c <coda_expression_is_equal+0x248>
    c840:	ldr	r3, [fp, #-8]
    c844:	add	r3, r3, #1
    c848:	str	r3, [fp, #-8]
    c84c:	ldr	r3, [fp, #-8]
    c850:	cmp	r3, #3
    c854:	ble	c804 <coda_expression_is_equal+0x1f0>
    c858:	mov	r3, #1
    c85c:	mov	r0, r3
    c860:	sub	sp, fp, #4
    c864:	pop	{fp, pc}

0000c868 <coda_expression_get_type>:
    c868:	push	{fp, lr}
    c86c:	add	fp, sp, #4
    c870:	sub	sp, sp, #8
    c874:	str	r0, [fp, #-8]
    c878:	str	r1, [fp, #-12]
    c87c:	ldr	r3, [fp, #-8]
    c880:	cmp	r3, #0
    c884:	bne	c8a4 <coda_expression_get_type+0x3c>
    c888:	ldr	r3, [pc, #52]	; c8c4 <coda_expression_get_type+0x5c>
    c88c:	ldr	r2, [pc, #52]	; c8c8 <coda_expression_get_type+0x60>
    c890:	ldr	r1, [pc, #52]	; c8cc <coda_expression_get_type+0x64>
    c894:	mvn	r0, #99	; 0x63
    c898:	bl	0 <coda_set_error>
    c89c:	mvn	r3, #0
    c8a0:	b	c8b8 <coda_expression_get_type+0x50>
    c8a4:	ldr	r3, [fp, #-8]
    c8a8:	ldr	r2, [r3, #4]
    c8ac:	ldr	r3, [fp, #-12]
    c8b0:	str	r2, [r3]
    c8b4:	mov	r3, #0
    c8b8:	mov	r0, r3
    c8bc:	sub	sp, fp, #4
    c8c0:	pop	{fp, pc}
    c8c4:	.word	0x000013cf
    c8c8:	.word	0x00000024
    c8cc:	.word	0x00000d60

0000c8d0 <coda_expression_eval_bool>:
    c8d0:	push	{fp, lr}
    c8d4:	add	fp, sp, #4
    c8d8:	sub	sp, sp, #584	; 0x248
    c8dc:	str	r0, [fp, #-576]	; 0xfffffdc0
    c8e0:	str	r1, [fp, #-580]	; 0xfffffdbc
    c8e4:	str	r2, [fp, #-584]	; 0xfffffdb8
    c8e8:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    c8ec:	ldr	r3, [r3, #4]
    c8f0:	cmp	r3, #0
    c8f4:	beq	c90c <coda_expression_eval_bool+0x3c>
    c8f8:	ldr	r1, [pc, #192]	; c9c0 <coda_expression_eval_bool+0xf0>
    c8fc:	mvn	r0, #99	; 0x63
    c900:	bl	0 <coda_set_error>
    c904:	mvn	r3, #0
    c908:	b	c9b4 <coda_expression_eval_bool+0xe4>
    c90c:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    c910:	cmp	r3, #0
    c914:	bne	c93c <coda_expression_eval_bool+0x6c>
    c918:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    c91c:	ldr	r3, [r3, #8]
    c920:	cmp	r3, #0
    c924:	bne	c93c <coda_expression_eval_bool+0x6c>
    c928:	ldr	r1, [pc, #148]	; c9c4 <coda_expression_eval_bool+0xf4>
    c92c:	mvn	r0, #99	; 0x63
    c930:	bl	0 <coda_set_error>
    c934:	mvn	r3, #0
    c938:	b	c9b4 <coda_expression_eval_bool+0xe4>
    c93c:	sub	r3, fp, #572	; 0x23c
    c940:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    c944:	mov	r0, r3
    c948:	bl	1208 <init_eval_info>
    c94c:	sub	r3, fp, #572	; 0x23c
    c950:	ldr	r2, [fp, #-584]	; 0xfffffdb8
    c954:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    c958:	mov	r0, r3
    c95c:	bl	12c8 <eval_boolean>
    c960:	mov	r3, r0
    c964:	cmp	r3, #0
    c968:	beq	c9b0 <coda_expression_eval_bool+0xe0>
    c96c:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    c970:	cmp	r3, #0
    c974:	beq	c9a8 <coda_expression_eval_bool+0xd8>
    c978:	sub	r3, fp, #572	; 0x23c
    c97c:	add	r3, r3, #8
    c980:	mov	r1, r3
    c984:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    c988:	bl	0 <coda_cursor_compare>
    c98c:	mov	r3, r0
    c990:	cmp	r3, #0
    c994:	beq	c9a8 <coda_expression_eval_bool+0xd8>
    c998:	sub	r3, fp, #572	; 0x23c
    c99c:	add	r3, r3, #8
    c9a0:	mov	r0, r3
    c9a4:	bl	0 <coda_cursor_add_to_error_message>
    c9a8:	mvn	r3, #0
    c9ac:	b	c9b4 <coda_expression_eval_bool+0xe4>
    c9b0:	mov	r3, #0
    c9b4:	mov	r0, r3
    c9b8:	sub	sp, fp, #4
    c9bc:	pop	{fp, pc}
    c9c0:	.word	0x00000d84
    c9c4:	.word	0x000005a0

0000c9c8 <coda_expression_eval_integer>:
    c9c8:	push	{fp, lr}
    c9cc:	add	fp, sp, #4
    c9d0:	sub	sp, sp, #584	; 0x248
    c9d4:	str	r0, [fp, #-576]	; 0xfffffdc0
    c9d8:	str	r1, [fp, #-580]	; 0xfffffdbc
    c9dc:	str	r2, [fp, #-584]	; 0xfffffdb8
    c9e0:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    c9e4:	ldr	r3, [r3, #4]
    c9e8:	cmp	r3, #1
    c9ec:	beq	ca04 <coda_expression_eval_integer+0x3c>
    c9f0:	ldr	r1, [pc, #192]	; cab8 <coda_expression_eval_integer+0xf0>
    c9f4:	mvn	r0, #99	; 0x63
    c9f8:	bl	0 <coda_set_error>
    c9fc:	mvn	r3, #0
    ca00:	b	caac <coda_expression_eval_integer+0xe4>
    ca04:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    ca08:	cmp	r3, #0
    ca0c:	bne	ca34 <coda_expression_eval_integer+0x6c>
    ca10:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    ca14:	ldr	r3, [r3, #8]
    ca18:	cmp	r3, #0
    ca1c:	bne	ca34 <coda_expression_eval_integer+0x6c>
    ca20:	ldr	r1, [pc, #148]	; cabc <coda_expression_eval_integer+0xf4>
    ca24:	mvn	r0, #99	; 0x63
    ca28:	bl	0 <coda_set_error>
    ca2c:	mvn	r3, #0
    ca30:	b	caac <coda_expression_eval_integer+0xe4>
    ca34:	sub	r3, fp, #572	; 0x23c
    ca38:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    ca3c:	mov	r0, r3
    ca40:	bl	1208 <init_eval_info>
    ca44:	sub	r3, fp, #572	; 0x23c
    ca48:	ldr	r2, [fp, #-584]	; 0xfffffdb8
    ca4c:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    ca50:	mov	r0, r3
    ca54:	bl	442c <eval_integer>
    ca58:	mov	r3, r0
    ca5c:	cmp	r3, #0
    ca60:	beq	caa8 <coda_expression_eval_integer+0xe0>
    ca64:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    ca68:	cmp	r3, #0
    ca6c:	beq	caa0 <coda_expression_eval_integer+0xd8>
    ca70:	sub	r3, fp, #572	; 0x23c
    ca74:	add	r3, r3, #8
    ca78:	mov	r1, r3
    ca7c:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    ca80:	bl	0 <coda_cursor_compare>
    ca84:	mov	r3, r0
    ca88:	cmp	r3, #0
    ca8c:	beq	caa0 <coda_expression_eval_integer+0xd8>
    ca90:	sub	r3, fp, #572	; 0x23c
    ca94:	add	r3, r3, #8
    ca98:	mov	r0, r3
    ca9c:	bl	0 <coda_cursor_add_to_error_message>
    caa0:	mvn	r3, #0
    caa4:	b	caac <coda_expression_eval_integer+0xe4>
    caa8:	mov	r3, #0
    caac:	mov	r0, r3
    cab0:	sub	sp, fp, #4
    cab4:	pop	{fp, pc}
    cab8:	.word	0x00000db0
    cabc:	.word	0x000005a0

0000cac0 <coda_expression_eval_float>:
    cac0:	push	{fp, lr}
    cac4:	add	fp, sp, #4
    cac8:	sub	sp, sp, #584	; 0x248
    cacc:	str	r0, [fp, #-576]	; 0xfffffdc0
    cad0:	str	r1, [fp, #-580]	; 0xfffffdbc
    cad4:	str	r2, [fp, #-584]	; 0xfffffdb8
    cad8:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    cadc:	ldr	r3, [r3, #4]
    cae0:	cmp	r3, #2
    cae4:	beq	cafc <coda_expression_eval_float+0x3c>
    cae8:	ldr	r1, [pc, #192]	; cbb0 <coda_expression_eval_float+0xf0>
    caec:	mvn	r0, #99	; 0x63
    caf0:	bl	0 <coda_set_error>
    caf4:	mvn	r3, #0
    caf8:	b	cba4 <coda_expression_eval_float+0xe4>
    cafc:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    cb00:	cmp	r3, #0
    cb04:	bne	cb2c <coda_expression_eval_float+0x6c>
    cb08:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    cb0c:	ldr	r3, [r3, #8]
    cb10:	cmp	r3, #0
    cb14:	bne	cb2c <coda_expression_eval_float+0x6c>
    cb18:	ldr	r1, [pc, #148]	; cbb4 <coda_expression_eval_float+0xf4>
    cb1c:	mvn	r0, #99	; 0x63
    cb20:	bl	0 <coda_set_error>
    cb24:	mvn	r3, #0
    cb28:	b	cba4 <coda_expression_eval_float+0xe4>
    cb2c:	sub	r3, fp, #572	; 0x23c
    cb30:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    cb34:	mov	r0, r3
    cb38:	bl	1208 <init_eval_info>
    cb3c:	sub	r3, fp, #572	; 0x23c
    cb40:	ldr	r2, [fp, #-584]	; 0xfffffdb8
    cb44:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    cb48:	mov	r0, r3
    cb4c:	bl	3094 <eval_float>
    cb50:	mov	r3, r0
    cb54:	cmp	r3, #0
    cb58:	beq	cba0 <coda_expression_eval_float+0xe0>
    cb5c:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    cb60:	cmp	r3, #0
    cb64:	beq	cb98 <coda_expression_eval_float+0xd8>
    cb68:	sub	r3, fp, #572	; 0x23c
    cb6c:	add	r3, r3, #8
    cb70:	mov	r1, r3
    cb74:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    cb78:	bl	0 <coda_cursor_compare>
    cb7c:	mov	r3, r0
    cb80:	cmp	r3, #0
    cb84:	beq	cb98 <coda_expression_eval_float+0xd8>
    cb88:	sub	r3, fp, #572	; 0x23c
    cb8c:	add	r3, r3, #8
    cb90:	mov	r0, r3
    cb94:	bl	0 <coda_cursor_add_to_error_message>
    cb98:	mvn	r3, #0
    cb9c:	b	cba4 <coda_expression_eval_float+0xe4>
    cba0:	mov	r3, #0
    cba4:	mov	r0, r3
    cba8:	sub	sp, fp, #4
    cbac:	pop	{fp, pc}
    cbb0:	.word	0x00000ddc
    cbb4:	.word	0x000005a0

0000cbb8 <coda_expression_eval_string>:
    cbb8:	push	{fp, lr}
    cbbc:	add	fp, sp, #4
    cbc0:	sub	sp, sp, #608	; 0x260
    cbc4:	str	r0, [fp, #-592]	; 0xfffffdb0
    cbc8:	str	r1, [fp, #-596]	; 0xfffffdac
    cbcc:	str	r2, [fp, #-600]	; 0xfffffda8
    cbd0:	str	r3, [fp, #-604]	; 0xfffffda4
    cbd4:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    cbd8:	ldr	r3, [r3, #4]
    cbdc:	cmp	r3, #3
    cbe0:	beq	cbf8 <coda_expression_eval_string+0x40>
    cbe4:	ldr	r1, [pc, #448]	; cdac <coda_expression_eval_string+0x1f4>
    cbe8:	mvn	r0, #99	; 0x63
    cbec:	bl	0 <coda_set_error>
    cbf0:	mvn	r3, #0
    cbf4:	b	cda0 <coda_expression_eval_string+0x1e8>
    cbf8:	ldr	r3, [fp, #-596]	; 0xfffffdac
    cbfc:	cmp	r3, #0
    cc00:	bne	cc28 <coda_expression_eval_string+0x70>
    cc04:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    cc08:	ldr	r3, [r3, #8]
    cc0c:	cmp	r3, #0
    cc10:	bne	cc28 <coda_expression_eval_string+0x70>
    cc14:	ldr	r1, [pc, #404]	; cdb0 <coda_expression_eval_string+0x1f8>
    cc18:	mvn	r0, #99	; 0x63
    cc1c:	bl	0 <coda_set_error>
    cc20:	mvn	r3, #0
    cc24:	b	cda0 <coda_expression_eval_string+0x1e8>
    cc28:	sub	r3, fp, #580	; 0x244
    cc2c:	ldr	r1, [fp, #-596]	; 0xfffffdac
    cc30:	mov	r0, r3
    cc34:	bl	1208 <init_eval_info>
    cc38:	sub	r2, fp, #584	; 0x248
    cc3c:	sub	r0, fp, #580	; 0x244
    cc40:	ldr	r3, [fp, #-600]	; 0xfffffda8
    cc44:	str	r3, [sp]
    cc48:	ldr	r3, [fp, #-604]	; 0xfffffda4
    cc4c:	ldr	r1, [fp, #-592]	; 0xfffffdb0
    cc50:	bl	6670 <eval_string>
    cc54:	mov	r3, r0
    cc58:	cmp	r3, #0
    cc5c:	beq	cca4 <coda_expression_eval_string+0xec>
    cc60:	ldr	r3, [fp, #-596]	; 0xfffffdac
    cc64:	cmp	r3, #0
    cc68:	beq	cc9c <coda_expression_eval_string+0xe4>
    cc6c:	sub	r3, fp, #580	; 0x244
    cc70:	add	r3, r3, #8
    cc74:	mov	r1, r3
    cc78:	ldr	r0, [fp, #-596]	; 0xfffffdac
    cc7c:	bl	0 <coda_cursor_compare>
    cc80:	mov	r3, r0
    cc84:	cmp	r3, #0
    cc88:	beq	cc9c <coda_expression_eval_string+0xe4>
    cc8c:	sub	r3, fp, #580	; 0x244
    cc90:	add	r3, r3, #8
    cc94:	mov	r0, r3
    cc98:	bl	0 <coda_cursor_add_to_error_message>
    cc9c:	mvn	r3, #0
    cca0:	b	cda0 <coda_expression_eval_string+0x1e8>
    cca4:	ldr	r3, [fp, #-604]	; 0xfffffda4
    cca8:	ldr	r3, [r3]
    ccac:	cmp	r3, #0
    ccb0:	ble	cd70 <coda_expression_eval_string+0x1b8>
    ccb4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
    ccb8:	cmp	r3, #0
    ccbc:	beq	cd50 <coda_expression_eval_string+0x198>
    ccc0:	ldr	r3, [fp, #-604]	; 0xfffffda4
    ccc4:	ldr	r3, [r3]
    ccc8:	add	r3, r3, #1
    cccc:	mov	r0, r3
    ccd0:	bl	0 <malloc>
    ccd4:	mov	r3, r0
    ccd8:	str	r3, [fp, #-8]
    ccdc:	ldr	r3, [fp, #-8]
    cce0:	cmp	r3, #0
    cce4:	bne	cd10 <coda_expression_eval_string+0x158>
    cce8:	ldr	r3, [fp, #-604]	; 0xfffffda4
    ccec:	ldr	r2, [r3]
    ccf0:	ldr	r3, [pc, #188]	; cdb4 <coda_expression_eval_string+0x1fc>
    ccf4:	str	r3, [sp]
    ccf8:	ldr	r3, [pc, #184]	; cdb8 <coda_expression_eval_string+0x200>
    ccfc:	ldr	r1, [pc, #184]	; cdbc <coda_expression_eval_string+0x204>
    cd00:	mvn	r0, #0
    cd04:	bl	0 <coda_set_error>
    cd08:	mvn	r3, #0
    cd0c:	b	cda0 <coda_expression_eval_string+0x1e8>
    cd10:	ldr	r3, [fp, #-600]	; 0xfffffda8
    cd14:	ldr	r3, [r3]
    cd18:	ldr	r2, [fp, #-584]	; 0xfffffdb8
    cd1c:	add	r1, r3, r2
    cd20:	ldr	r3, [fp, #-604]	; 0xfffffda4
    cd24:	ldr	r3, [r3]
    cd28:	mov	r2, r3
    cd2c:	ldr	r0, [fp, #-8]
    cd30:	bl	0 <memcpy>
    cd34:	ldr	r3, [fp, #-600]	; 0xfffffda8
    cd38:	ldr	r3, [r3]
    cd3c:	mov	r0, r3
    cd40:	bl	0 <free>
    cd44:	ldr	r3, [fp, #-600]	; 0xfffffda8
    cd48:	ldr	r2, [fp, #-8]
    cd4c:	str	r2, [r3]
    cd50:	ldr	r3, [fp, #-600]	; 0xfffffda8
    cd54:	ldr	r3, [r3]
    cd58:	ldr	r2, [fp, #-604]	; 0xfffffda4
    cd5c:	ldr	r2, [r2]
    cd60:	add	r3, r3, r2
    cd64:	mov	r2, #0
    cd68:	strb	r2, [r3]
    cd6c:	b	cd9c <coda_expression_eval_string+0x1e4>
    cd70:	ldr	r3, [fp, #-600]	; 0xfffffda8
    cd74:	ldr	r3, [r3]
    cd78:	cmp	r3, #0
    cd7c:	beq	cd90 <coda_expression_eval_string+0x1d8>
    cd80:	ldr	r3, [fp, #-600]	; 0xfffffda8
    cd84:	ldr	r3, [r3]
    cd88:	mov	r0, r3
    cd8c:	bl	0 <free>
    cd90:	ldr	r3, [fp, #-600]	; 0xfffffda8
    cd94:	mov	r2, #0
    cd98:	str	r2, [r3]
    cd9c:	mov	r3, #0
    cda0:	mov	r0, r3
    cda4:	sub	sp, fp, #4
    cda8:	pop	{fp, pc}
    cdac:	.word	0x00000e04
    cdb0:	.word	0x000005a0
    cdb4:	.word	0x00001483
    cdb8:	.word	0x00000024
    cdbc:	.word	0x00000358

0000cdc0 <coda_expression_eval_node>:
    cdc0:	push	{fp, lr}
    cdc4:	add	fp, sp, #4
    cdc8:	sub	sp, sp, #576	; 0x240
    cdcc:	str	r0, [fp, #-576]	; 0xfffffdc0
    cdd0:	str	r1, [fp, #-580]	; 0xfffffdbc
    cdd4:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    cdd8:	ldr	r3, [r3, #4]
    cddc:	cmp	r3, #4
    cde0:	beq	cdf8 <coda_expression_eval_node+0x38>
    cde4:	ldr	r1, [pc, #196]	; ceb0 <coda_expression_eval_node+0xf0>
    cde8:	mvn	r0, #99	; 0x63
    cdec:	bl	0 <coda_set_error>
    cdf0:	mvn	r3, #0
    cdf4:	b	cea4 <coda_expression_eval_node+0xe4>
    cdf8:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    cdfc:	cmp	r3, #0
    ce00:	bne	ce18 <coda_expression_eval_node+0x58>
    ce04:	ldr	r1, [pc, #168]	; ceb4 <coda_expression_eval_node+0xf4>
    ce08:	mvn	r0, #99	; 0x63
    ce0c:	bl	0 <coda_set_error>
    ce10:	mvn	r3, #0
    ce14:	b	cea4 <coda_expression_eval_node+0xe4>
    ce18:	sub	r3, fp, #572	; 0x23c
    ce1c:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    ce20:	mov	r0, r3
    ce24:	bl	1208 <init_eval_info>
    ce28:	sub	r3, fp, #572	; 0x23c
    ce2c:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    ce30:	mov	r0, r3
    ce34:	bl	9098 <eval_cursor>
    ce38:	mov	r3, r0
    ce3c:	cmp	r3, #0
    ce40:	beq	ce88 <coda_expression_eval_node+0xc8>
    ce44:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    ce48:	cmp	r3, #0
    ce4c:	beq	ce80 <coda_expression_eval_node+0xc0>
    ce50:	sub	r3, fp, #572	; 0x23c
    ce54:	add	r3, r3, #8
    ce58:	mov	r1, r3
    ce5c:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    ce60:	bl	0 <coda_cursor_compare>
    ce64:	mov	r3, r0
    ce68:	cmp	r3, #0
    ce6c:	beq	ce80 <coda_expression_eval_node+0xc0>
    ce70:	sub	r3, fp, #572	; 0x23c
    ce74:	add	r3, r3, #8
    ce78:	mov	r0, r3
    ce7c:	bl	0 <coda_cursor_add_to_error_message>
    ce80:	mvn	r3, #0
    ce84:	b	cea4 <coda_expression_eval_node+0xe4>
    ce88:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    ce8c:	mov	r0, r3
    ce90:	sub	r3, fp, #564	; 0x234
    ce94:	mov	r2, #520	; 0x208
    ce98:	mov	r1, r3
    ce9c:	bl	0 <memcpy>
    cea0:	mov	r3, #0
    cea4:	mov	r0, r3
    cea8:	sub	sp, fp, #4
    ceac:	pop	{fp, pc}
    ceb0:	.word	0x00000e2c
    ceb4:	.word	0x00000e54
