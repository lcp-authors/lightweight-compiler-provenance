
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r4, [ip]
      34:	mov	r8, r3
      38:	mov	r6, r2
      3c:	mov	r5, r0
      40:	ldr	ip, [r5, #48]	; 0x30
      44:	cmp	ip, #0
      48:	bne	f8 <read_bytes+0xf8>
      4c:	ldr	r0, [r5, #16]
      50:	cmp	r0, #0
      54:	beq	74 <read_bytes+0x74>
      58:	cmp	r0, #1
      5c:	beq	74 <read_bytes+0x74>
      60:	ldr	r0, [pc, #380]	; 1e4 <read_bytes+0x1e4>
      64:	ldr	r1, [pc, #380]	; 1e8 <read_bytes+0x1e8>
      68:	mov	r2, #83	; 0x53
      6c:	ldr	r3, [pc, #380]	; 1f0 <read_bytes+0x1f0>
      70:	bl	0 <__assert_fail>
      74:	adds	r0, r6, r4
      78:	adc	r1, r8, r9
      7c:	ldr	r2, [r5, #8]
      80:	ldr	ip, [r5, #12]
      84:	cmp	r1, ip
      88:	bne	98 <read_bytes+0x98>
      8c:	cmp	r0, r2
      90:	bhi	a0 <read_bytes+0xa0>
      94:	b	b4 <read_bytes+0xb4>
      98:	cmp	r1, ip
      9c:	bls	b4 <read_bytes+0xb4>
      a0:	mvn	r0, #300	; 0x12c
      a4:	ldr	r1, [pc, #304]	; 1dc <read_bytes+0x1dc>
      a8:	bl	0 <coda_set_error>
      ac:	mvn	r0, #0
      b0:	b	1b8 <read_bytes+0x1b8>
      b4:	ldr	r0, [r5, #56]	; 0x38
      b8:	mov	r2, r4
      bc:	mov	r3, r6
      c0:	mov	r1, r7
      c4:	bl	0 <pread>
      c8:	cmp	r0, #0
      cc:	bge	1b4 <read_bytes+0x1b4>
      d0:	bl	0 <__errno_location>
      d4:	ldr	r0, [r0]
      d8:	bl	0 <strerror>
      dc:	mvn	r3, #21
      e0:	ldr	r1, [pc, #260]	; 1ec <read_bytes+0x1ec>
      e4:	mov	r2, r0
      e8:	mov	r0, r3
      ec:	bl	0 <coda_set_error>
      f0:	mvn	r0, #0
      f4:	b	1b8 <read_bytes+0x1b8>
      f8:	adds	ip, r6, r4
      fc:	adc	r1, r8, r9
     100:	ldr	r2, [r5, #40]	; 0x28
     104:	ldr	r3, [r5, #44]	; 0x2c
     108:	cmp	r1, r3
     10c:	bne	11c <read_bytes+0x11c>
     110:	cmp	ip, r2
     114:	bhi	124 <read_bytes+0x124>
     118:	b	1a0 <read_bytes+0x1a0>
     11c:	cmp	r1, r3
     120:	bls	1a0 <read_bytes+0x1a0>
     124:	ldr	r3, [r5, #16]
     128:	cmp	r3, #0
     12c:	beq	18c <read_bytes+0x18c>
     130:	cmp	r3, #1
     134:	beq	18c <read_bytes+0x18c>
     138:	add	r2, sp, #64	; 0x40
     13c:	mov	r1, r9
     140:	mov	r0, r4
     144:	bl	0 <coda_str64>
     148:	add	r2, sp, #88	; 0x58
     14c:	mov	r1, r8
     150:	mov	r0, r6
     154:	bl	0 <coda_str64>
     158:	ldr	r0, [r5, #40]	; 0x28
     15c:	ldr	r1, [r5, #44]	; 0x2c
     160:	add	r2, sp, #40	; 0x28
     164:	bl	0 <coda_str64>
     168:	mvn	r0, #300	; 0x12c
     16c:	ldr	r1, [pc, #108]	; 1e0 <read_bytes+0x1e0>
     170:	add	r2, sp, #64	; 0x40
     174:	add	r3, sp, #88	; 0x58
     178:	add	ip, sp, #40	; 0x28
     17c:	str	ip, [sp]
     180:	bl	0 <coda_set_error>
     184:	mvn	r0, #0
     188:	b	1b8 <read_bytes+0x1b8>
     18c:	mvn	r0, #300	; 0x12c
     190:	ldr	r1, [pc, #68]	; 1dc <read_bytes+0x1dc>
     194:	bl	0 <coda_set_error>
     198:	mvn	r0, #0
     19c:	b	1b8 <read_bytes+0x1b8>
     1a0:	ldr	r0, [r5, #48]	; 0x30
     1a4:	add	r1, r0, r6
     1a8:	mov	r2, r4
     1ac:	mov	r0, r7
     1b0:	bl	0 <memcpy>
     1b4:	mov	r0, #0
     1b8:	ldr	r4, [sp, #16]
     1bc:	ldr	r5, [sp, #20]
     1c0:	ldr	r6, [sp, #24]
     1c4:	ldr	r7, [sp, #28]
     1c8:	ldr	r8, [sp, #32]
     1cc:	ldr	r9, [sp, #36]	; 0x24
     1d0:	ldr	lr, [sp, #8]
     1d4:	add	sp, sp, #112	; 0x70
     1d8:	bx	lr
     1dc:	.word	0x00000619
     1e0:	.word	0x00000381
     1e4:	.word	0x00000643
     1e8:	.word	0x000002e2
     1ec:	.word	0x00000297
     1f0:	.word	0x000006b6

000001f4 <read_bits>:
     1f4:	mov	ip, sp
     1f8:	sub	sp, sp, #80	; 0x50
     1fc:	str	ip, [sp, #12]
     200:	str	lr, [sp, #16]
     204:	str	r4, [sp, #32]
     208:	str	r5, [sp, #36]	; 0x24
     20c:	str	r6, [sp, #40]	; 0x28
     210:	str	r7, [sp, #44]	; 0x2c
     214:	str	r8, [sp, #48]	; 0x30
     218:	str	r9, [sp, #52]	; 0x34
     21c:	str	sl, [sp, #56]	; 0x38
     220:	str	fp, [sp, #60]	; 0x3c
     224:	ldr	fp, [ip, #8]
     228:	ldr	r9, [ip, #4]
     22c:	ldr	r8, [ip]
     230:	mov	r7, r3
     234:	mov	r6, r2
     238:	str	r0, [sp, #24]
     23c:	mov	r2, #0
     240:	mov	r0, r6
     244:	and	r1, r0, #7
     248:	adds	r1, r1, r8
     24c:	adc	r2, r2, r9
     250:	rsbs	r3, r1, #0
     254:	rsc	ip, r2, #0
     258:	and	r5, r3, #7
     25c:	cmp	r2, #0
     260:	bne	270 <read_bits+0x7c>
     264:	cmp	r1, #8
     268:	bls	618 <read_bits+0x424>
     26c:	b	278 <read_bits+0x84>
     270:	cmp	r2, #0
     274:	blt	618 <read_bits+0x424>
     278:	cmp	r5, #0
     27c:	beq	524 <read_bits+0x330>
     280:	mov	r4, r9
     284:	movw	r3, #43690	; 0xaaaa
     288:	movt	r3, #10922	; 0x2aaa
     28c:	movw	r2, #43691	; 0xaaab
     290:	movt	r2, #43690	; 0xaaaa
     294:	mov	r1, r4
     298:	mov	r0, r8
     29c:	bl	0 <__compcert_i64_smulh>
     2a0:	asr	r2, r1, #2
     2a4:	lsr	r3, r0, #2
     2a8:	orr	ip, r3, r1, lsl #30
     2ac:	mov	r3, #0
     2b0:	lsr	r0, r4, #31
     2b4:	adds	ip, ip, r0
     2b8:	adc	r3, r2, r3
     2bc:	mov	r1, #24
     2c0:	umull	ip, r0, ip, r1
     2c4:	lsl	r1, r3, #4
     2c8:	add	r1, r1, r3, lsl #3
     2cc:	add	r0, r0, r1
     2d0:	subs	ip, r8, ip
     2d4:	sbc	r3, r4, r0
     2d8:	orr	r3, r3, ip
     2dc:	cmp	r3, #0
     2e0:	beq	458 <read_bits+0x264>
     2e4:	mov	r4, r9
     2e8:	movw	r3, #43690	; 0xaaaa
     2ec:	movt	r3, #10922	; 0x2aaa
     2f0:	movw	r2, #43691	; 0xaaab
     2f4:	movt	r2, #43690	; 0xaaaa
     2f8:	mov	r1, r4
     2fc:	mov	r0, r8
     300:	bl	0 <__compcert_i64_smulh>
     304:	asr	r2, r1, #2
     308:	lsr	r3, r0, #2
     30c:	orr	r3, r3, r1, lsl #30
     310:	mov	ip, #0
     314:	lsr	r0, r4, #31
     318:	adds	lr, r3, r0
     31c:	adc	r1, r2, ip
     320:	mov	r2, lr
     324:	mov	ip, #24
     328:	umull	ip, r0, r2, ip
     32c:	lsl	r2, r1, #4
     330:	add	r2, r2, r1, lsl #3
     334:	add	r0, r0, r2
     338:	subs	lr, r8, ip
     33c:	sbc	r3, r4, r0
     340:	mov	r4, lr
     344:	mov	r1, r6
     348:	and	r0, r1, #7
     34c:	add	r2, r0, r4
     350:	and	ip, r2, #7
     354:	cmp	ip, #0
     358:	movne	r0, #1
     35c:	moveq	r0, #0
     360:	add	ip, r0, r2, lsr #3
     364:	str	ip, [sp, #28]
     368:	and	ip, r4, #7
     36c:	cmp	ip, #0
     370:	movne	ip, #1
     374:	moveq	ip, #0
     378:	add	sl, ip, r4, lsr #3
     37c:	mov	r2, r7
     380:	asr	r3, r2, #3
     384:	lsr	r0, r1, #3
     388:	orr	r2, r0, r2, lsl #29
     38c:	mov	ip, #0
     390:	add	r0, sp, #72	; 0x48
     394:	str	r0, [sp, #8]
     398:	str	ip, [sp, #4]
     39c:	ldr	r1, [sp, #28]
     3a0:	str	r1, [sp]
     3a4:	ldr	r0, [sp, #24]
     3a8:	bl	0 <read_bytes>
     3ac:	cmp	r0, #0
     3b0:	beq	3bc <read_bits+0x1c8>
     3b4:	mvn	r0, #0
     3b8:	b	694 <read_bits+0x4a0>
     3bc:	mov	r1, #0
     3c0:	str	r1, [sp, #68]	; 0x44
     3c4:	mov	ip, #0
     3c8:	ldr	r3, [sp, #28]
     3cc:	cmp	ip, r3
     3d0:	bcs	3f0 <read_bits+0x1fc>
     3d4:	add	r1, sp, #68	; 0x44
     3d8:	rsb	r0, ip, #3
     3dc:	add	r3, sp, #72	; 0x48
     3e0:	ldrb	r2, [r3, ip]
     3e4:	strb	r2, [r1, r0]
     3e8:	add	ip, ip, #1
     3ec:	b	3c8 <read_bits+0x1d4>
     3f0:	ldr	r1, [sp, #68]	; 0x44
     3f4:	rsb	r3, r3, #4
     3f8:	add	ip, r5, r3, lsl #3
     3fc:	lsr	r1, r1, ip
     400:	mov	r0, #1
     404:	lsl	r2, r0, r4
     408:	sub	r0, r2, #1
     40c:	and	r0, r1, r0
     410:	str	r0, [sp, #68]	; 0x44
     414:	mov	r3, #0
     418:	cmp	r3, sl
     41c:	bcs	440 <read_bits+0x24c>
     420:	add	r2, sp, #68	; 0x44
     424:	sub	ip, sl, r3
     428:	add	r1, r2, ip
     42c:	sub	lr, r1, #4096	; 0x1000
     430:	ldrb	r1, [lr, #4095]	; 0xfff
     434:	strb	r1, [fp, r3]
     438:	add	r3, r3, #1
     43c:	b	418 <read_bits+0x224>
     440:	add	fp, fp, sl
     444:	mov	r3, #0
     448:	adds	r6, r6, r4
     44c:	adc	r7, r7, r3
     450:	subs	r8, r8, r4
     454:	sbc	r9, r9, r3
     458:	mov	r2, r9
     45c:	mov	r1, r8
     460:	cmp	r2, #0
     464:	bne	474 <read_bits+0x280>
     468:	cmp	r1, #0
     46c:	bhi	47c <read_bits+0x288>
     470:	b	690 <read_bits+0x49c>
     474:	cmp	r2, #0
     478:	ble	690 <read_bits+0x49c>
     47c:	mov	r0, r7
     480:	mov	ip, r6
     484:	asr	r3, r0, #3
     488:	lsr	ip, ip, #3
     48c:	orr	r2, ip, r0, lsl #29
     490:	mov	r0, #0
     494:	mov	ip, #4
     498:	add	r4, sp, #72	; 0x48
     49c:	str	r4, [sp, #8]
     4a0:	str	r0, [sp, #4]
     4a4:	str	ip, [sp]
     4a8:	ldr	r0, [sp, #24]
     4ac:	bl	0 <read_bytes>
     4b0:	cmp	r0, #0
     4b4:	beq	4c0 <read_bits+0x2cc>
     4b8:	mvn	r0, #0
     4bc:	b	694 <read_bits+0x4a0>
     4c0:	ldrb	r2, [sp, #75]	; 0x4b
     4c4:	strb	r2, [sp, #68]	; 0x44
     4c8:	ldrb	ip, [sp, #74]	; 0x4a
     4cc:	strb	ip, [sp, #69]	; 0x45
     4d0:	ldrb	r0, [sp, #73]	; 0x49
     4d4:	strb	r0, [sp, #70]	; 0x46
     4d8:	ldrb	r2, [sp, #72]	; 0x48
     4dc:	strb	r2, [sp, #71]	; 0x47
     4e0:	ldr	r3, [sp, #68]	; 0x44
     4e4:	lsr	ip, r3, r5
     4e8:	str	ip, [sp, #68]	; 0x44
     4ec:	ldrb	r2, [sp, #70]	; 0x46
     4f0:	strb	r2, [fp]
     4f4:	ldrb	r3, [sp, #69]	; 0x45
     4f8:	strb	r3, [fp, #1]
     4fc:	ldrb	r1, [sp, #68]	; 0x44
     500:	strb	r1, [fp, #2]
     504:	add	fp, fp, #3
     508:	mov	r1, #0
     50c:	mov	r0, #24
     510:	adds	r6, r6, r0
     514:	adc	r7, r7, r1
     518:	subs	r8, r8, r0
     51c:	sbc	r9, r9, r1
     520:	b	458 <read_bits+0x264>
     524:	mov	r1, r8
     528:	mov	r3, #0
     52c:	and	r1, r1, #7
     530:	orr	r3, r3, r1
     534:	cmp	r3, #0
     538:	beq	5b8 <read_bits+0x3c4>
     53c:	mov	r0, r7
     540:	asr	r3, r0, #3
     544:	mov	r1, r6
     548:	lsr	ip, r1, #3
     54c:	orr	r2, ip, r0, lsl #29
     550:	mov	r0, #0
     554:	mov	ip, #1
     558:	add	r4, sp, #64	; 0x40
     55c:	str	r4, [sp, #8]
     560:	str	r0, [sp, #4]
     564:	str	ip, [sp]
     568:	ldr	r0, [sp, #24]
     56c:	bl	0 <read_bytes>
     570:	cmp	r0, #0
     574:	beq	580 <read_bits+0x38c>
     578:	mvn	r0, #0
     57c:	b	694 <read_bits+0x4a0>
     580:	mov	ip, r8
     584:	and	ip, ip, #7
     588:	ldrb	r2, [sp, #64]	; 0x40
     58c:	mov	r0, #1
     590:	lsl	r0, r0, ip
     594:	sub	r1, r0, #1
     598:	and	r0, r2, r1
     59c:	strb	r0, [fp]
     5a0:	add	fp, fp, #1
     5a4:	mov	r0, #0
     5a8:	adds	r6, r6, ip
     5ac:	adc	r7, r7, r0
     5b0:	subs	r8, r8, ip
     5b4:	sbc	r9, r9, r0
     5b8:	mov	r1, r9
     5bc:	cmp	r1, #0
     5c0:	bne	5d4 <read_bits+0x3e0>
     5c4:	mov	r0, r8
     5c8:	cmp	r0, #0
     5cc:	bhi	5dc <read_bits+0x3e8>
     5d0:	b	690 <read_bits+0x49c>
     5d4:	cmp	r1, #0
     5d8:	ble	690 <read_bits+0x49c>
     5dc:	asr	r3, r7, #3
     5e0:	lsr	r0, r6, #3
     5e4:	orr	r2, r0, r7, lsl #29
     5e8:	asr	r0, r9, #3
     5ec:	lsr	ip, r8, #3
     5f0:	orr	ip, ip, r9, lsl #29
     5f4:	str	fp, [sp, #8]
     5f8:	str	r0, [sp, #4]
     5fc:	str	ip, [sp]
     600:	ldr	r0, [sp, #24]
     604:	bl	0 <read_bytes>
     608:	cmp	r0, #0
     60c:	beq	690 <read_bits+0x49c>
     610:	mvn	r0, #0
     614:	b	694 <read_bits+0x4a0>
     618:	asr	r3, r7, #3
     61c:	lsr	r0, r6, #3
     620:	orr	r2, r0, r7, lsl #29
     624:	mov	r1, #0
     628:	mov	r0, #1
     62c:	str	fp, [sp, #8]
     630:	str	r1, [sp, #4]
     634:	str	r0, [sp]
     638:	ldr	r0, [sp, #24]
     63c:	bl	0 <read_bytes>
     640:	cmp	r0, #0
     644:	beq	650 <read_bits+0x45c>
     648:	mvn	r0, #0
     64c:	b	694 <read_bits+0x4a0>
     650:	cmp	r5, #0
     654:	beq	664 <read_bits+0x470>
     658:	ldrb	ip, [fp]
     65c:	asr	r2, ip, r5
     660:	strb	r2, [fp]
     664:	mov	ip, #0
     668:	and	r3, r8, #7
     66c:	orr	r2, ip, r3
     670:	cmp	r2, #0
     674:	beq	690 <read_bits+0x49c>
     678:	ldrb	r2, [fp]
     67c:	mov	r1, #1
     680:	lsl	r0, r1, r8
     684:	sub	r1, r0, #1
     688:	and	r2, r2, r1
     68c:	strb	r2, [fp]
     690:	mov	r0, #0
     694:	ldr	r4, [sp, #32]
     698:	ldr	r5, [sp, #36]	; 0x24
     69c:	ldr	r6, [sp, #40]	; 0x28
     6a0:	ldr	r7, [sp, #44]	; 0x2c
     6a4:	ldr	r8, [sp, #48]	; 0x30
     6a8:	ldr	r9, [sp, #52]	; 0x34
     6ac:	ldr	sl, [sp, #56]	; 0x38
     6b0:	ldr	fp, [sp, #60]	; 0x3c
     6b4:	ldr	lr, [sp, #16]
     6b8:	add	sp, sp, #80	; 0x50
     6bc:	bx	lr

000006c0 <read_array>:
     6c0:	mov	ip, sp
     6c4:	sub	sp, sp, #640	; 0x280
     6c8:	str	ip, [sp]
     6cc:	str	lr, [sp, #4]
     6d0:	str	r4, [sp, #8]
     6d4:	str	r5, [sp, #12]
     6d8:	str	r6, [sp, #16]
     6dc:	str	r7, [sp, #20]
     6e0:	str	r8, [sp, #24]
     6e4:	str	r9, [sp, #28]
     6e8:	str	sl, [sp, #32]
     6ec:	ldr	r6, [ip]
     6f0:	mov	r5, r3
     6f4:	mov	r9, r2
     6f8:	mov	r7, r1
     6fc:	mov	r4, r0
     700:	add	r1, sp, #40	; 0x28
     704:	add	r2, sp, #48	; 0x30
     708:	mov	r0, r4
     70c:	bl	0 <coda_cursor_get_array_dim>
     710:	cmp	r0, #0
     714:	beq	720 <read_array+0x60>
     718:	mvn	r0, #0
     71c:	b	94c <read_array+0x28c>
     720:	mov	r2, r4
     724:	add	r3, sp, #120	; 0x78
     728:	mov	lr, #130	; 0x82
     72c:	ldr	ip, [r2], #4
     730:	subs	lr, lr, #1
     734:	str	ip, [r3], #4
     738:	bne	72c <read_array+0x6c>
     73c:	mov	ip, #1
     740:	cmp	r6, #1
     744:	movne	r0, #1
     748:	moveq	r0, #0
     74c:	ldr	r1, [sp, #40]	; 0x28
     750:	cmp	r1, #1
     754:	movle	ip, ip
     758:	movgt	ip, r0
     75c:	cmp	ip, #0
     760:	bne	8a8 <read_array+0x1e8>
     764:	mov	r2, #1
     768:	str	r2, [sp, #80]	; 0x50
     76c:	mov	r4, #0
     770:	ldr	r1, [sp, #40]	; 0x28
     774:	cmp	r4, r1
     778:	bge	7a8 <read_array+0xe8>
     77c:	add	r1, sp, #80	; 0x50
     780:	lsl	r2, r4, #2
     784:	add	r0, r1, r2
     788:	add	r2, sp, #80	; 0x50
     78c:	ldr	r2, [r2, r4, lsl #2]
     790:	add	ip, sp, #48	; 0x30
     794:	ldr	r1, [ip, r4, lsl #2]
     798:	mul	r3, r2, r1
     79c:	str	r3, [r0, #4]
     7a0:	add	r4, r4, #1
     7a4:	b	770 <read_array+0xb0>
     7a8:	add	r2, sp, #80	; 0x50
     7ac:	lsl	r3, r1, #2
     7b0:	add	ip, r2, r3
     7b4:	sub	lr, ip, #4096	; 0x1000
     7b8:	ldr	r6, [lr, #4092]	; 0xffc
     7bc:	add	r3, sp, #80	; 0x50
     7c0:	ldr	r8, [r3, r1, lsl #2]
     7c4:	cmp	r8, #0
     7c8:	ble	948 <read_array+0x288>
     7cc:	mov	r4, #0
     7d0:	mov	sl, #0
     7d4:	add	r0, sp, #120	; 0x78
     7d8:	mov	r1, #0
     7dc:	bl	0 <coda_cursor_goto_array_element_by_index>
     7e0:	cmp	r0, #0
     7e4:	beq	7f0 <read_array+0x130>
     7e8:	mvn	r0, #0
     7ec:	b	94c <read_array+0x28c>
     7f0:	add	r0, sp, #120	; 0x78
     7f4:	mla	r1, sl, r5, r9
     7f8:	blx	r7
     7fc:	cmp	r0, #0
     800:	beq	80c <read_array+0x14c>
     804:	mvn	r0, #0
     808:	b	94c <read_array+0x28c>
     80c:	add	r4, r4, #1
     810:	cmp	r4, r8
     814:	bge	830 <read_array+0x170>
     818:	add	r0, sp, #120	; 0x78
     81c:	bl	0 <coda_cursor_goto_next_array_element>
     820:	cmp	r0, #0
     824:	beq	830 <read_array+0x170>
     828:	mvn	r0, #0
     82c:	b	94c <read_array+0x28c>
     830:	add	sl, sl, r6
     834:	cmp	sl, r8
     838:	blt	7f0 <read_array+0x130>
     83c:	cmp	r4, r8
     840:	beq	948 <read_array+0x288>
     844:	add	r3, sp, #80	; 0x50
     848:	ldr	r2, [sp, #40]	; 0x28
     84c:	lsl	ip, r2, #2
     850:	add	r1, r3, ip
     854:	sub	lr, r1, #4096	; 0x1000
     858:	ldr	r3, [lr, #4088]	; 0xff8
     85c:	add	r1, sp, #80	; 0x50
     860:	ldr	r1, [r1, r2, lsl #2]
     864:	sub	r0, r3, r1
     868:	add	sl, sl, r0
     86c:	sub	ip, r2, #3
     870:	cmp	ip, #0
     874:	blt	7f0 <read_array+0x130>
     878:	add	r0, sp, #80	; 0x50
     87c:	lsl	r2, ip, #2
     880:	add	r3, r0, r2
     884:	ldr	r0, [r3, #8]
     888:	cmp	sl, r0
     88c:	blt	7f0 <read_array+0x130>
     890:	add	r1, sp, #80	; 0x50
     894:	ldr	r1, [r1, ip, lsl #2]
     898:	sub	r0, r1, r0
     89c:	add	sl, sl, r0
     8a0:	sub	ip, ip, #1
     8a4:	b	870 <read_array+0x1b0>
     8a8:	mov	r6, #1
     8ac:	mov	r0, #0
     8b0:	ldr	r2, [sp, #40]	; 0x28
     8b4:	cmp	r0, r2
     8b8:	bge	8d0 <read_array+0x210>
     8bc:	add	r3, sp, #48	; 0x30
     8c0:	ldr	r2, [r3, r0, lsl #2]
     8c4:	mul	r6, r6, r2
     8c8:	add	r0, r0, #1
     8cc:	b	8b0 <read_array+0x1f0>
     8d0:	cmp	r6, #0
     8d4:	ble	948 <read_array+0x288>
     8d8:	add	r0, sp, #120	; 0x78
     8dc:	mov	r1, #0
     8e0:	bl	0 <coda_cursor_goto_array_element_by_index>
     8e4:	cmp	r0, #0
     8e8:	beq	8f4 <read_array+0x234>
     8ec:	mvn	r0, #0
     8f0:	b	94c <read_array+0x28c>
     8f4:	mov	r4, #0
     8f8:	cmp	r4, r6
     8fc:	bge	948 <read_array+0x288>
     900:	add	r0, sp, #120	; 0x78
     904:	mla	r1, r4, r5, r9
     908:	blx	r7
     90c:	cmp	r0, #0
     910:	beq	91c <read_array+0x25c>
     914:	mvn	r0, #0
     918:	b	94c <read_array+0x28c>
     91c:	sub	r3, r6, #1
     920:	cmp	r4, r3
     924:	bge	940 <read_array+0x280>
     928:	add	r0, sp, #120	; 0x78
     92c:	bl	0 <coda_cursor_goto_next_array_element>
     930:	cmp	r0, #0
     934:	beq	940 <read_array+0x280>
     938:	mvn	r0, #0
     93c:	b	94c <read_array+0x28c>
     940:	add	r4, r4, #1
     944:	b	8f8 <read_array+0x238>
     948:	mov	r0, #0
     94c:	ldr	r4, [sp, #8]
     950:	ldr	r5, [sp, #12]
     954:	ldr	r6, [sp, #16]
     958:	ldr	r7, [sp, #20]
     95c:	ldr	r8, [sp, #24]
     960:	ldr	r9, [sp, #28]
     964:	ldr	sl, [sp, #32]
     968:	ldr	lr, [sp, #4]
     96c:	add	sp, sp, #640	; 0x280
     970:	bx	lr

00000974 <read_partial_array>:
     974:	mov	ip, sp
     978:	sub	sp, sp, #552	; 0x228
     97c:	str	ip, [sp]
     980:	str	lr, [sp, #4]
     984:	str	r4, [sp, #8]
     988:	str	r5, [sp, #12]
     98c:	str	r6, [sp, #16]
     990:	str	r7, [sp, #20]
     994:	str	r8, [sp, #24]
     998:	ldr	r7, [ip, #4]
     99c:	ldr	r5, [ip]
     9a0:	mov	r6, r3
     9a4:	mov	r4, r1
     9a8:	mov	r1, r2
     9ac:	mov	r2, r0
     9b0:	add	r3, sp, #32
     9b4:	mov	lr, #130	; 0x82
     9b8:	ldr	ip, [r2], #4
     9bc:	subs	lr, lr, #1
     9c0:	str	ip, [r3], #4
     9c4:	bne	9b8 <read_partial_array+0x44>
     9c8:	cmp	r6, #0
     9cc:	ble	a3c <read_partial_array+0xc8>
     9d0:	add	r0, sp, #32
     9d4:	bl	0 <coda_cursor_goto_array_element_by_index>
     9d8:	cmp	r0, #0
     9dc:	beq	9e8 <read_partial_array+0x74>
     9e0:	mvn	r0, #0
     9e4:	b	a40 <read_partial_array+0xcc>
     9e8:	mov	r8, #0
     9ec:	cmp	r8, r6
     9f0:	bge	a3c <read_partial_array+0xc8>
     9f4:	add	r0, sp, #32
     9f8:	mla	r1, r8, r7, r5
     9fc:	blx	r4
     a00:	cmp	r0, #0
     a04:	beq	a10 <read_partial_array+0x9c>
     a08:	mvn	r0, #0
     a0c:	b	a40 <read_partial_array+0xcc>
     a10:	sub	r3, r6, #1
     a14:	cmp	r8, r3
     a18:	bge	a34 <read_partial_array+0xc0>
     a1c:	add	r0, sp, #32
     a20:	bl	0 <coda_cursor_goto_next_array_element>
     a24:	cmp	r0, #0
     a28:	beq	a34 <read_partial_array+0xc0>
     a2c:	mvn	r0, #0
     a30:	b	a40 <read_partial_array+0xcc>
     a34:	add	r8, r8, #1
     a38:	b	9ec <read_partial_array+0x78>
     a3c:	mov	r0, #0
     a40:	ldr	r4, [sp, #8]
     a44:	ldr	r5, [sp, #12]
     a48:	ldr	r6, [sp, #16]
     a4c:	ldr	r7, [sp, #20]
     a50:	ldr	r8, [sp, #24]
     a54:	ldr	lr, [sp, #4]
     a58:	add	sp, sp, #552	; 0x228
     a5c:	bx	lr

00000a60 <transpose_array>:
     a60:	mov	ip, sp
     a64:	sub	sp, sp, #200	; 0xc8
     a68:	str	ip, [sp, #4]
     a6c:	str	lr, [sp, #8]
     a70:	str	r4, [sp, #16]
     a74:	str	r5, [sp, #20]
     a78:	str	r6, [sp, #24]
     a7c:	str	r7, [sp, #28]
     a80:	str	r8, [sp, #32]
     a84:	str	r9, [sp, #36]	; 0x24
     a88:	mov	r6, r2
     a8c:	mov	r5, r1
     a90:	mov	r7, #0
     a94:	add	r1, sp, #40	; 0x28
     a98:	add	r2, sp, #48	; 0x30
     a9c:	bl	0 <coda_cursor_get_array_dim>
     aa0:	cmp	r0, #0
     aa4:	beq	ab0 <transpose_array+0x50>
     aa8:	mvn	r0, #0
     aac:	b	eb8 <transpose_array+0x458>
     ab0:	ldr	r0, [sp, #40]	; 0x28
     ab4:	cmp	r0, #1
     ab8:	bgt	ac4 <transpose_array+0x64>
     abc:	mov	r0, #0
     ac0:	b	eb8 <transpose_array+0x458>
     ac4:	mov	r8, #1
     ac8:	mov	ip, #0
     acc:	ldr	r2, [sp, #40]	; 0x28
     ad0:	cmp	ip, r2
     ad4:	bge	b1c <transpose_array+0xbc>
     ad8:	add	r0, sp, #48	; 0x30
     adc:	ldr	r2, [r0, ip, lsl #2]
     ae0:	mul	r8, r8, r2
     ae4:	add	r2, sp, #160	; 0xa0
     ae8:	mov	r1, #0
     aec:	str	r1, [r2, ip, lsl #2]
     af0:	add	r4, sp, #80	; 0x50
     af4:	add	r2, sp, #48	; 0x30
     af8:	ldr	r1, [sp, #40]	; 0x28
     afc:	sub	r1, r1, ip
     b00:	lsl	r3, r1, #2
     b04:	add	r1, r2, r3
     b08:	sub	lr, r1, #4096	; 0x1000
     b0c:	ldr	r0, [lr, #4092]	; 0xffc
     b10:	str	r0, [r4, ip, lsl #2]
     b14:	add	ip, ip, #1
     b18:	b	acc <transpose_array+0x6c>
     b1c:	cmp	r8, #1
     b20:	bgt	b2c <transpose_array+0xcc>
     b24:	mov	r0, #0
     b28:	b	eb8 <transpose_array+0x458>
     b2c:	add	r1, sp, #120	; 0x78
     b30:	mov	r3, #1
     b34:	str	r3, [r1, r2, lsl #2]
     b38:	add	r1, sp, #80	; 0x50
     b3c:	ldr	r2, [sp, #40]	; 0x28
     b40:	mov	r3, #1
     b44:	str	r3, [r1, r2, lsl #2]
     b48:	ldr	r3, [sp, #40]	; 0x28
     b4c:	cmp	r3, #0
     b50:	ble	b84 <transpose_array+0x124>
     b54:	add	r2, sp, #120	; 0x78
     b58:	lsl	r1, r3, #2
     b5c:	add	r4, r2, r1
     b60:	add	ip, sp, #120	; 0x78
     b64:	ldr	ip, [ip, r3, lsl #2]
     b68:	add	r1, sp, #80	; 0x50
     b6c:	ldr	r0, [r1, r3, lsl #2]
     b70:	mul	r2, ip, r0
     b74:	sub	lr, r4, #4096	; 0x1000
     b78:	str	r2, [lr, #4092]	; 0xffc
     b7c:	sub	r3, r3, #1
     b80:	b	b4c <transpose_array+0xec>
     b84:	add	ip, sp, #80	; 0x50
     b88:	ldr	r2, [sp, #40]	; 0x28
     b8c:	mov	r1, #0
     b90:	str	r1, [ip, r2, lsl #2]
     b94:	add	r2, sp, #160	; 0xa0
     b98:	ldr	ip, [sp, #40]	; 0x28
     b9c:	mov	r3, #0
     ba0:	str	r3, [r2, ip, lsl #2]
     ba4:	mul	r0, r8, r6
     ba8:	bl	0 <malloc>
     bac:	mov	r4, r0
     bb0:	cmp	r4, #0
     bb4:	bne	bdc <transpose_array+0x17c>
     bb8:	mvn	r0, #0
     bbc:	ldr	r1, [pc, #796]	; ee0 <transpose_array+0x480>
     bc0:	mul	r2, r8, r6
     bc4:	ldr	r3, [pc, #796]	; ee8 <transpose_array+0x488>
     bc8:	mov	r4, #93	; 0x5d
     bcc:	str	r4, [sp]
     bd0:	bl	0 <coda_set_error>
     bd4:	mvn	r0, #0
     bd8:	b	eb8 <transpose_array+0x458>
     bdc:	cmp	r6, #4
     be0:	bcs	d2c <transpose_array+0x2cc>
     be4:	cmp	r6, #1
     be8:	beq	c94 <transpose_array+0x234>
     bec:	cmp	r6, #2
     bf0:	bne	de4 <transpose_array+0x384>
     bf4:	mov	r3, #0
     bf8:	cmp	r3, r8
     bfc:	bge	e9c <transpose_array+0x43c>
     c00:	mov	r2, #0
     c04:	add	r0, r4, r7, lsl #1
     c08:	add	ip, r5, r3, lsl #1
     c0c:	ldrh	r1, [ip]
     c10:	strh	r1, [r0]
     c14:	ldr	r0, [sp, #120]	; 0x78
     c18:	add	r7, r7, r0
     c1c:	ldr	ip, [sp, #160]	; 0xa0
     c20:	add	r1, ip, #1
     c24:	str	r1, [sp, #160]	; 0xa0
     c28:	add	r1, sp, #160	; 0xa0
     c2c:	ldr	r1, [r1, r2, lsl #2]
     c30:	add	ip, sp, #80	; 0x50
     c34:	ldr	r0, [ip, r2, lsl #2]
     c38:	cmp	r1, r0
     c3c:	bne	c8c <transpose_array+0x22c>
     c40:	add	ip, sp, #160	; 0xa0
     c44:	mov	r0, #0
     c48:	str	r0, [ip, r2, lsl #2]
     c4c:	add	r0, sp, #120	; 0x78
     c50:	ldr	ip, [r0, r2, lsl #2]
     c54:	add	r1, sp, #80	; 0x50
     c58:	ldr	r0, [r1, r2, lsl #2]
     c5c:	mul	ip, ip, r0
     c60:	sub	r1, r7, ip
     c64:	add	r2, r2, #1
     c68:	add	ip, sp, #120	; 0x78
     c6c:	ldr	ip, [ip, r2, lsl #2]
     c70:	add	r7, r1, ip
     c74:	add	r1, sp, #160	; 0xa0
     c78:	add	r0, sp, #160	; 0xa0
     c7c:	ldr	ip, [r0, r2, lsl #2]
     c80:	add	ip, ip, #1
     c84:	str	ip, [r1, r2, lsl #2]
     c88:	b	c28 <transpose_array+0x1c8>
     c8c:	add	r3, r3, #1
     c90:	b	bf8 <transpose_array+0x198>
     c94:	mov	r3, #0
     c98:	cmp	r3, r8
     c9c:	bge	e9c <transpose_array+0x43c>
     ca0:	mov	r1, #0
     ca4:	ldrb	r0, [r5, r3]
     ca8:	strb	r0, [r4, r7]
     cac:	ldr	r0, [sp, #120]	; 0x78
     cb0:	add	r7, r7, r0
     cb4:	ldr	r0, [sp, #160]	; 0xa0
     cb8:	add	r2, r0, #1
     cbc:	str	r2, [sp, #160]	; 0xa0
     cc0:	add	ip, sp, #160	; 0xa0
     cc4:	ldr	r0, [ip, r1, lsl #2]
     cc8:	add	r2, sp, #80	; 0x50
     ccc:	ldr	ip, [r2, r1, lsl #2]
     cd0:	cmp	r0, ip
     cd4:	bne	d24 <transpose_array+0x2c4>
     cd8:	add	r2, sp, #160	; 0xa0
     cdc:	mov	ip, #0
     ce0:	str	ip, [r2, r1, lsl #2]
     ce4:	add	ip, sp, #120	; 0x78
     ce8:	ldr	r0, [ip, r1, lsl #2]
     cec:	add	ip, sp, #80	; 0x50
     cf0:	ldr	r2, [ip, r1, lsl #2]
     cf4:	mul	ip, r0, r2
     cf8:	sub	r0, r7, ip
     cfc:	add	r1, r1, #1
     d00:	add	ip, sp, #120	; 0x78
     d04:	ldr	r2, [ip, r1, lsl #2]
     d08:	add	r7, r0, r2
     d0c:	add	r2, sp, #160	; 0xa0
     d10:	add	ip, sp, #160	; 0xa0
     d14:	ldr	ip, [ip, r1, lsl #2]
     d18:	add	ip, ip, #1
     d1c:	str	ip, [r2, r1, lsl #2]
     d20:	b	cc0 <transpose_array+0x260>
     d24:	add	r3, r3, #1
     d28:	b	c98 <transpose_array+0x238>
     d2c:	cmp	r6, #4
     d30:	beq	e04 <transpose_array+0x3a4>
     d34:	cmp	r6, #8
     d38:	bne	de4 <transpose_array+0x384>
     d3c:	mov	r9, #0
     d40:	cmp	r9, r8
     d44:	bge	e9c <transpose_array+0x43c>
     d48:	mov	r2, #0
     d4c:	add	r0, r4, r7, lsl #3
     d50:	add	r1, r5, r9, lsl #3
     d54:	ldr	r3, [r1]
     d58:	ldr	ip, [r1, #4]
     d5c:	str	r3, [r0]
     d60:	str	ip, [r0, #4]
     d64:	ldr	r1, [sp, #120]	; 0x78
     d68:	add	r7, r7, r1
     d6c:	ldr	r0, [sp, #160]	; 0xa0
     d70:	add	ip, r0, #1
     d74:	str	ip, [sp, #160]	; 0xa0
     d78:	add	r1, sp, #160	; 0xa0
     d7c:	ldr	ip, [r1, r2, lsl #2]
     d80:	add	r0, sp, #80	; 0x50
     d84:	ldr	r3, [r0, r2, lsl #2]
     d88:	cmp	ip, r3
     d8c:	bne	ddc <transpose_array+0x37c>
     d90:	add	r0, sp, #160	; 0xa0
     d94:	mov	ip, #0
     d98:	str	ip, [r0, r2, lsl #2]
     d9c:	add	r3, sp, #120	; 0x78
     da0:	ldr	r3, [r3, r2, lsl #2]
     da4:	add	r0, sp, #80	; 0x50
     da8:	ldr	r1, [r0, r2, lsl #2]
     dac:	mul	r0, r3, r1
     db0:	sub	r3, r7, r0
     db4:	add	r2, r2, #1
     db8:	add	ip, sp, #120	; 0x78
     dbc:	ldr	ip, [ip, r2, lsl #2]
     dc0:	add	r7, r3, ip
     dc4:	add	r1, sp, #160	; 0xa0
     dc8:	add	ip, sp, #160	; 0xa0
     dcc:	ldr	ip, [ip, r2, lsl #2]
     dd0:	add	ip, ip, #1
     dd4:	str	ip, [r1, r2, lsl #2]
     dd8:	b	d78 <transpose_array+0x318>
     ddc:	add	r9, r9, #1
     de0:	b	d40 <transpose_array+0x2e0>
     de4:	ldr	r0, [pc, #248]	; ee4 <transpose_array+0x484>
     de8:	ldr	r1, [pc, #248]	; ee8 <transpose_array+0x488>
     dec:	mov	r2, #172	; 0xac
     df0:	ldr	r3, [pc, #228]	; edc <transpose_array+0x47c>
     df4:	bl	0 <__assert_fail>
     df8:	mov	r0, #1
     dfc:	bl	0 <exit>
     e00:	b	e9c <transpose_array+0x43c>
     e04:	mov	r1, #0
     e08:	cmp	r1, r8
     e0c:	bge	e9c <transpose_array+0x43c>
     e10:	mov	r9, #0
     e14:	ldr	r2, [r5, r1, lsl #2]
     e18:	str	r2, [r4, r7, lsl #2]
     e1c:	ldr	r3, [sp, #120]	; 0x78
     e20:	add	r7, r7, r3
     e24:	ldr	r0, [sp, #160]	; 0xa0
     e28:	add	r2, r0, #1
     e2c:	str	r2, [sp, #160]	; 0xa0
     e30:	add	r2, sp, #160	; 0xa0
     e34:	ldr	ip, [r2, r9, lsl #2]
     e38:	add	r0, sp, #80	; 0x50
     e3c:	ldr	r3, [r0, r9, lsl #2]
     e40:	cmp	ip, r3
     e44:	bne	e94 <transpose_array+0x434>
     e48:	add	r3, sp, #160	; 0xa0
     e4c:	mov	r0, #0
     e50:	str	r0, [r3, r9, lsl #2]
     e54:	add	ip, sp, #120	; 0x78
     e58:	ldr	r2, [ip, r9, lsl #2]
     e5c:	add	r3, sp, #80	; 0x50
     e60:	ldr	ip, [r3, r9, lsl #2]
     e64:	mul	r0, r2, ip
     e68:	sub	r3, r7, r0
     e6c:	add	r9, r9, #1
     e70:	add	r0, sp, #120	; 0x78
     e74:	ldr	r2, [r0, r9, lsl #2]
     e78:	add	r7, r3, r2
     e7c:	add	ip, sp, #160	; 0xa0
     e80:	add	r3, sp, #160	; 0xa0
     e84:	ldr	r3, [r3, r9, lsl #2]
     e88:	add	r0, r3, #1
     e8c:	str	r0, [ip, r9, lsl #2]
     e90:	b	e30 <transpose_array+0x3d0>
     e94:	add	r1, r1, #1
     e98:	b	e08 <transpose_array+0x3a8>
     e9c:	mul	r2, r8, r6
     ea0:	mov	r1, r4
     ea4:	mov	r0, r5
     ea8:	bl	0 <memcpy>
     eac:	mov	r0, r4
     eb0:	bl	0 <free>
     eb4:	mov	r0, #0
     eb8:	ldr	r4, [sp, #16]
     ebc:	ldr	r5, [sp, #20]
     ec0:	ldr	r6, [sp, #24]
     ec4:	ldr	r7, [sp, #28]
     ec8:	ldr	r8, [sp, #32]
     ecc:	ldr	r9, [sp, #36]	; 0x24
     ed0:	ldr	lr, [sp, #8]
     ed4:	add	sp, sp, #200	; 0xc8
     ed8:	bx	lr
     edc:	.word	0x000006c1
     ee0:	.word	0x000005e4
     ee4:	.word	0x000005e2
     ee8:	.word	0x000004a7

00000eec <coda_bin_cursor_get_bit_size>:
     eec:	mov	ip, sp
     ef0:	sub	sp, sp, #544	; 0x220
     ef4:	str	ip, [sp]
     ef8:	str	lr, [sp, #4]
     efc:	str	r4, [sp, #8]
     f00:	str	r5, [sp, #12]
     f04:	str	r6, [sp, #16]
     f08:	mov	r6, r1
     f0c:	mov	r5, r0
     f10:	ldr	ip, [r5, #4]
     f14:	lsl	r1, ip, #4
     f18:	add	r3, r5, r1
     f1c:	sub	lr, r3, #4096	; 0x1000
     f20:	ldr	r4, [lr, #4088]	; 0xff8
     f24:	ldr	r2, [r4]
     f28:	cmp	r2, #100	; 0x64
     f2c:	blt	f34 <coda_bin_cursor_get_bit_size+0x48>
     f30:	ldr	r4, [r4, #4]
     f34:	ldr	ip, [r4, #24]
     f38:	ldr	r0, [r4, #28]
     f3c:	cmp	r0, #0
     f40:	blt	f54 <coda_bin_cursor_get_bit_size+0x68>
     f44:	str	ip, [r6]
     f48:	str	r0, [r6, #4]
     f4c:	mov	r0, #0
     f50:	b	10a8 <coda_bin_cursor_get_bit_size+0x1bc>
     f54:	ldr	r2, [r4, #8]
     f58:	cmp	r2, #7
     f5c:	bcs	10a4 <coda_bin_cursor_get_bit_size+0x1b8>
     f60:	add	pc, pc, r2, lsl #2
     f64:	nop	{0}
     f68:	b	f84 <coda_bin_cursor_get_bit_size+0x98>
     f6c:	b	f84 <coda_bin_cursor_get_bit_size+0x98>
     f70:	b	f94 <coda_bin_cursor_get_bit_size+0xa8>
     f74:	b	f94 <coda_bin_cursor_get_bit_size+0xa8>
     f78:	b	f94 <coda_bin_cursor_get_bit_size+0xa8>
     f7c:	b	f94 <coda_bin_cursor_get_bit_size+0xa8>
     f80:	b	1054 <coda_bin_cursor_get_bit_size+0x168>
     f84:	mov	r1, r6
     f88:	mov	r0, r5
     f8c:	bl	0 <coda_ascbin_cursor_get_bit_size>
     f90:	b	10a8 <coda_bin_cursor_get_bit_size+0x1bc>
     f94:	ldr	r0, [r4, #32]
     f98:	cmp	r0, #0
     f9c:	beq	1040 <coda_bin_cursor_get_bit_size+0x154>
     fa0:	mov	r2, r6
     fa4:	mov	r1, r5
     fa8:	bl	0 <coda_expression_eval_integer>
     fac:	cmp	r0, #0
     fb0:	beq	fcc <coda_bin_cursor_get_bit_size+0xe0>
     fb4:	ldr	r0, [pc, #264]	; 10c4 <coda_bin_cursor_get_bit_size+0x1d8>
     fb8:	bl	0 <coda_add_error_message>
     fbc:	mov	r0, r5
     fc0:	bl	0 <coda_cursor_add_to_error_message>
     fc4:	mvn	r0, #0
     fc8:	b	10a8 <coda_bin_cursor_get_bit_size+0x1bc>
     fcc:	ldr	r1, [r4, #24]
     fd0:	ldr	r2, [r4, #28]
     fd4:	mvn	r3, r2
     fd8:	eor	r2, r1, #1016	; 0x3f8
     fdc:	eor	r2, r2, #261120	; 0x3fc00
     fe0:	eor	r2, r2, #66846720	; 0x3fc0000
     fe4:	eor	r2, r2, #-67108864	; 0xfc000000
     fe8:	orr	ip, r3, r2
     fec:	cmp	ip, #0
     ff0:	bne	1010 <coda_bin_cursor_get_bit_size+0x124>
     ff4:	ldr	r1, [r6]
     ff8:	ldr	r0, [r6, #4]
     ffc:	lsl	r2, r0, #3
    1000:	orr	r3, r2, r1, lsr #29
    1004:	lsl	r2, r1, #3
    1008:	str	r2, [r6]
    100c:	str	r3, [r6, #4]
    1010:	ldr	r2, [r6]
    1014:	ldr	r1, [r6, #4]
    1018:	cmp	r1, #0
    101c:	bge	10a4 <coda_bin_cursor_get_bit_size+0x1b8>
    1020:	movw	r0, #65236	; 0xfed4
    1024:	movt	r0, #65535	; 0xffff
    1028:	ldr	r1, [pc, #144]	; 10c0 <coda_bin_cursor_get_bit_size+0x1d4>
    102c:	bl	0 <coda_set_error>
    1030:	mov	r0, r5
    1034:	bl	0 <coda_cursor_add_to_error_message>
    1038:	mvn	r0, #0
    103c:	b	10a8 <coda_bin_cursor_get_bit_size+0x1bc>
    1040:	mvn	ip, #0
    1044:	mvn	r3, #0
    1048:	str	r3, [r6]
    104c:	str	ip, [r6, #4]
    1050:	b	10a4 <coda_bin_cursor_get_bit_size+0x1b8>
    1054:	mov	r2, r5
    1058:	add	r3, sp, #24
    105c:	mov	lr, #130	; 0x82
    1060:	ldr	ip, [r2], #4
    1064:	subs	lr, lr, #1
    1068:	str	ip, [r3], #4
    106c:	bne	1060 <coda_bin_cursor_get_bit_size+0x174>
    1070:	add	r0, sp, #24
    1074:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
    1078:	cmp	r0, #0
    107c:	beq	1088 <coda_bin_cursor_get_bit_size+0x19c>
    1080:	mvn	r0, #0
    1084:	b	10a8 <coda_bin_cursor_get_bit_size+0x1bc>
    1088:	add	r0, sp, #24
    108c:	mov	r1, r6
    1090:	bl	0 <coda_cursor_get_bit_size>
    1094:	cmp	r0, #0
    1098:	beq	10a4 <coda_bin_cursor_get_bit_size+0x1b8>
    109c:	mvn	r0, #0
    10a0:	b	10a8 <coda_bin_cursor_get_bit_size+0x1bc>
    10a4:	mov	r0, #0
    10a8:	ldr	r4, [sp, #8]
    10ac:	ldr	r5, [sp, #12]
    10b0:	ldr	r6, [sp, #16]
    10b4:	ldr	lr, [sp, #4]
    10b8:	add	sp, sp, #544	; 0x220
    10bc:	bx	lr
    10c0:	.word	0x00000000
    10c4:	.word	0x00000492

000010c8 <coda_bin_cursor_get_string_length>:
    10c8:	mov	ip, sp
    10cc:	sub	sp, sp, #24
    10d0:	str	ip, [sp]
    10d4:	str	lr, [sp, #4]
    10d8:	str	r4, [sp, #8]
    10dc:	mov	r4, r1
    10e0:	add	r1, sp, #16
    10e4:	bl	eec <coda_bin_cursor_get_bit_size>
    10e8:	cmp	r0, #0
    10ec:	beq	10f8 <coda_bin_cursor_get_string_length+0x30>
    10f0:	mvn	r0, #0
    10f4:	b	1124 <coda_bin_cursor_get_string_length+0x5c>
    10f8:	ldr	r2, [sp, #16]
    10fc:	ldr	r0, [sp, #20]
    1100:	cmp	r0, #0
    1104:	blt	1118 <coda_bin_cursor_get_string_length+0x50>
    1108:	lsr	r1, r2, #3
    110c:	orr	r1, r1, r0, lsl #29
    1110:	str	r1, [r4]
    1114:	b	1120 <coda_bin_cursor_get_string_length+0x58>
    1118:	mvn	r3, #0
    111c:	str	r3, [r4]
    1120:	mov	r0, #0
    1124:	ldr	r4, [sp, #8]
    1128:	ldr	lr, [sp, #4]
    112c:	add	sp, sp, #24
    1130:	bx	lr

00001134 <coda_bin_cursor_get_num_elements>:
    1134:	mov	ip, sp
    1138:	sub	sp, sp, #8
    113c:	str	ip, [sp]
    1140:	str	lr, [sp, #4]
    1144:	ldr	r2, [r0, #4]
    1148:	lsl	r3, r2, #4
    114c:	add	r2, r0, r3
    1150:	sub	lr, r2, #4096	; 0x1000
    1154:	ldr	r2, [lr, #4088]	; 0xff8
    1158:	ldr	r3, [r2]
    115c:	cmp	r3, #100	; 0x64
    1160:	blt	1168 <coda_bin_cursor_get_num_elements+0x34>
    1164:	ldr	r2, [r2, #4]
    1168:	ldr	ip, [r2, #8]
    116c:	cmp	ip, #0
    1170:	beq	1194 <coda_bin_cursor_get_num_elements+0x60>
    1174:	cmp	ip, #1
    1178:	beq	1194 <coda_bin_cursor_get_num_elements+0x60>
    117c:	mov	r3, #1
    1180:	str	r3, [r1]
    1184:	mov	r0, #0
    1188:	ldr	lr, [sp, #4]
    118c:	add	sp, sp, #8
    1190:	bx	lr
    1194:	ldr	lr, [sp, #4]
    1198:	add	sp, sp, #8
    119c:	b	0 <coda_ascbin_cursor_get_num_elements>

000011a0 <coda_bin_cursor_read_int8>:
    11a0:	mov	ip, sp
    11a4:	sub	sp, sp, #96	; 0x60
    11a8:	str	ip, [sp, #12]
    11ac:	str	lr, [sp, #16]
    11b0:	str	r4, [sp, #24]
    11b4:	str	r5, [sp, #28]
    11b8:	str	r6, [sp, #32]
    11bc:	str	r7, [sp, #36]	; 0x24
    11c0:	mov	r4, r1
    11c4:	mov	r5, r0
    11c8:	ldr	r1, [r5, #4]
    11cc:	lsl	r2, r1, #4
    11d0:	add	r3, r5, r2
    11d4:	sub	lr, r3, #4096	; 0x1000
    11d8:	ldr	r0, [lr, #4088]	; 0xff8
    11dc:	ldr	r1, [r0]
    11e0:	cmp	r1, #100	; 0x64
    11e4:	blt	11ec <coda_bin_cursor_read_int8+0x4c>
    11e8:	ldr	r0, [r0, #4]
    11ec:	ldr	r2, [r0, #24]
    11f0:	ldr	r1, [r0, #28]
    11f4:	str	r2, [sp, #40]	; 0x28
    11f8:	str	r1, [sp, #44]	; 0x2c
    11fc:	ldr	r2, [r5, #4]
    1200:	lsl	r2, r2, #4
    1204:	add	ip, r5, r2
    1208:	ldr	r7, [ip]
    120c:	ldr	r6, [ip, #4]
    1210:	cmp	r1, #0
    1214:	bge	12e0 <coda_bin_cursor_read_int8+0x140>
    1218:	add	r1, sp, #40	; 0x28
    121c:	mov	r0, r5
    1220:	bl	eec <coda_bin_cursor_get_bit_size>
    1224:	cmp	r0, #0
    1228:	beq	1234 <coda_bin_cursor_read_int8+0x94>
    122c:	mvn	r0, #0
    1230:	b	1460 <coda_bin_cursor_read_int8+0x2c0>
    1234:	ldr	r2, [sp, #40]	; 0x28
    1238:	ldr	r3, [sp, #44]	; 0x2c
    123c:	cmp	r3, #0
    1240:	blt	1270 <coda_bin_cursor_read_int8+0xd0>
    1244:	cmp	r3, #0
    1248:	bne	125c <coda_bin_cursor_read_int8+0xbc>
    124c:	cmp	r2, #8
    1250:	movhi	r3, #1
    1254:	movls	r3, #0
    1258:	b	1268 <coda_bin_cursor_read_int8+0xc8>
    125c:	cmp	r3, #0
    1260:	movgt	r3, #1
    1264:	movle	r3, #0
    1268:	cmp	r3, #0
    126c:	beq	12e0 <coda_bin_cursor_read_int8+0x140>
    1270:	ldr	r0, [sp, #40]	; 0x28
    1274:	ldr	r1, [sp, #44]	; 0x2c
    1278:	add	r2, sp, #72	; 0x48
    127c:	bl	0 <coda_str64>
    1280:	ldr	r0, [r5, #4]
    1284:	lsl	ip, r0, #4
    1288:	add	ip, r5, ip
    128c:	ldr	r3, [ip]
    1290:	ldr	r0, [ip, #4]
    1294:	asr	r1, r0, #3
    1298:	lsr	r2, r3, #3
    129c:	orr	r0, r2, r0, lsl #29
    12a0:	add	r2, sp, #48	; 0x30
    12a4:	bl	0 <coda_str64>
    12a8:	movw	r0, #65236	; 0xfed4
    12ac:	movt	r0, #65535	; 0xffff
    12b0:	ldr	r1, [pc, #464]	; 1488 <coda_bin_cursor_read_int8+0x2e8>
    12b4:	add	r2, sp, #72	; 0x48
    12b8:	add	r3, sp, #48	; 0x30
    12bc:	ldr	ip, [r5, #4]
    12c0:	lsl	ip, ip, #4
    12c4:	add	ip, r5, ip
    12c8:	ldr	ip, [ip]
    12cc:	and	ip, ip, #7
    12d0:	str	ip, [sp]
    12d4:	bl	0 <coda_set_error>
    12d8:	mvn	r0, #0
    12dc:	b	1460 <coda_bin_cursor_read_int8+0x2c0>
    12e0:	mov	ip, r7
    12e4:	mov	r2, #0
    12e8:	and	r1, ip, #7
    12ec:	orr	r1, r2, r1
    12f0:	cmp	r1, #0
    12f4:	bne	1348 <coda_bin_cursor_read_int8+0x1a8>
    12f8:	ldr	r0, [sp, #40]	; 0x28
    12fc:	ldr	r2, [sp, #44]	; 0x2c
    1300:	eor	r1, r0, #8
    1304:	orr	r1, r2, r1
    1308:	cmp	r1, #0
    130c:	bne	1348 <coda_bin_cursor_read_int8+0x1a8>
    1310:	ldr	r0, [r5]
    1314:	asr	r3, r6, #3
    1318:	lsr	r2, ip, #3
    131c:	orr	r2, r2, r6, lsl #29
    1320:	mov	r1, #0
    1324:	mov	ip, #1
    1328:	str	r4, [sp, #8]
    132c:	str	r1, [sp, #4]
    1330:	str	ip, [sp]
    1334:	bl	0 <read_bytes>
    1338:	cmp	r0, #0
    133c:	beq	13e8 <coda_bin_cursor_read_int8+0x248>
    1340:	mvn	r0, #0
    1344:	b	1460 <coda_bin_cursor_read_int8+0x2c0>
    1348:	ldr	r1, [sp, #40]	; 0x28
    134c:	ldr	r0, [sp, #44]	; 0x2c
    1350:	asr	r2, r0, #3
    1354:	lsr	r3, r1, #3
    1358:	orr	r0, r3, r0, lsl #29
    135c:	and	r1, r1, #7
    1360:	cmp	r1, #0
    1364:	movne	r3, #1
    1368:	moveq	r3, #0
    136c:	asr	ip, r3, #31
    1370:	adds	lr, r0, r3
    1374:	adc	r2, r2, ip
    1378:	mov	ip, lr
    137c:	cmp	r2, #0
    1380:	bne	1390 <coda_bin_cursor_read_int8+0x1f0>
    1384:	cmp	ip, #1
    1388:	bls	13ac <coda_bin_cursor_read_int8+0x20c>
    138c:	b	1398 <coda_bin_cursor_read_int8+0x1f8>
    1390:	cmp	r2, #0
    1394:	blt	13ac <coda_bin_cursor_read_int8+0x20c>
    1398:	ldr	r0, [pc, #220]	; 147c <coda_bin_cursor_read_int8+0x2dc>
    139c:	ldr	r1, [pc, #224]	; 1484 <coda_bin_cursor_read_int8+0x2e4>
    13a0:	mov	r2, #177	; 0xb1
    13a4:	ldr	r3, [pc, #212]	; 1480 <coda_bin_cursor_read_int8+0x2e0>
    13a8:	bl	0 <__assert_fail>
    13ac:	mov	r2, #0
    13b0:	strb	r2, [r4]
    13b4:	ldr	r0, [r5]
    13b8:	ldr	ip, [sp, #40]	; 0x28
    13bc:	ldr	r1, [sp, #44]	; 0x2c
    13c0:	str	r4, [sp, #8]
    13c4:	str	r1, [sp, #4]
    13c8:	str	ip, [sp]
    13cc:	mov	r3, r6
    13d0:	mov	r2, r7
    13d4:	bl	1f4 <read_bits>
    13d8:	cmp	r0, #0
    13dc:	beq	13e8 <coda_bin_cursor_read_int8+0x248>
    13e0:	mvn	r0, #0
    13e4:	b	1460 <coda_bin_cursor_read_int8+0x2c0>
    13e8:	ldr	r3, [sp, #40]	; 0x28
    13ec:	ldr	r1, [sp, #44]	; 0x2c
    13f0:	cmp	r1, #0
    13f4:	bne	1404 <coda_bin_cursor_read_int8+0x264>
    13f8:	cmp	r3, #8
    13fc:	bcc	140c <coda_bin_cursor_read_int8+0x26c>
    1400:	b	145c <coda_bin_cursor_read_int8+0x2bc>
    1404:	cmp	r1, #0
    1408:	bge	145c <coda_bin_cursor_read_int8+0x2bc>
    140c:	ldrb	ip, [r4]
    1410:	and	r1, ip, #255	; 0xff
    1414:	mov	r5, #1
    1418:	ldr	r3, [sp, #40]	; 0x28
    141c:	ldr	r2, [sp, #44]	; 0x2c
    1420:	mov	r0, #0
    1424:	mov	ip, #1
    1428:	subs	lr, r3, ip
    142c:	sbc	ip, r2, r0
    1430:	mov	r2, lr
    1434:	lsl	r0, r5, r2
    1438:	and	r2, r1, r0
    143c:	cmp	r2, #0
    1440:	beq	145c <coda_bin_cursor_read_int8+0x2bc>
    1444:	mov	r0, #1
    1448:	lsl	r0, r0, r3
    144c:	sub	r2, r0, #1
    1450:	mvn	ip, r2
    1454:	orr	r3, r1, ip
    1458:	strb	r3, [r4]
    145c:	mov	r0, #0
    1460:	ldr	r4, [sp, #24]
    1464:	ldr	r5, [sp, #28]
    1468:	ldr	r6, [sp, #32]
    146c:	ldr	r7, [sp, #36]	; 0x24
    1470:	ldr	lr, [sp, #16]
    1474:	add	sp, sp, #96	; 0x60
    1478:	bx	lr
    147c:	.word	0x00000691
    1480:	.word	0x000006d1
    1484:	.word	0x000001cc
    1488:	.word	0x00000092

0000148c <coda_bin_cursor_read_uint8>:
    148c:	mov	ip, sp
    1490:	sub	sp, sp, #96	; 0x60
    1494:	str	ip, [sp, #12]
    1498:	str	lr, [sp, #16]
    149c:	str	r4, [sp, #24]
    14a0:	str	r5, [sp, #28]
    14a4:	str	r6, [sp, #32]
    14a8:	str	r7, [sp, #36]	; 0x24
    14ac:	mov	r6, r1
    14b0:	mov	r5, r0
    14b4:	ldr	r1, [r5, #4]
    14b8:	lsl	r0, r1, #4
    14bc:	add	r0, r5, r0
    14c0:	sub	lr, r0, #4096	; 0x1000
    14c4:	ldr	r1, [lr, #4088]	; 0xff8
    14c8:	ldr	r2, [r1]
    14cc:	cmp	r2, #100	; 0x64
    14d0:	blt	14d8 <coda_bin_cursor_read_uint8+0x4c>
    14d4:	ldr	r1, [r1, #4]
    14d8:	ldr	ip, [r1, #24]
    14dc:	ldr	r0, [r1, #28]
    14e0:	str	ip, [sp, #40]	; 0x28
    14e4:	str	r0, [sp, #44]	; 0x2c
    14e8:	ldr	r1, [r5, #4]
    14ec:	lsl	r2, r1, #4
    14f0:	add	r3, r5, r2
    14f4:	ldr	r7, [r3]
    14f8:	ldr	r4, [r3, #4]
    14fc:	mvn	r2, r0
    1500:	mvn	r1, ip
    1504:	orr	r0, r2, r1
    1508:	cmp	r0, #0
    150c:	bne	15d8 <coda_bin_cursor_read_uint8+0x14c>
    1510:	add	r1, sp, #40	; 0x28
    1514:	mov	r0, r5
    1518:	bl	eec <coda_bin_cursor_get_bit_size>
    151c:	cmp	r0, #0
    1520:	beq	152c <coda_bin_cursor_read_uint8+0xa0>
    1524:	mvn	r0, #0
    1528:	b	16e4 <coda_bin_cursor_read_uint8+0x258>
    152c:	ldr	ip, [sp, #40]	; 0x28
    1530:	ldr	r3, [sp, #44]	; 0x2c
    1534:	cmp	r3, #0
    1538:	blt	1568 <coda_bin_cursor_read_uint8+0xdc>
    153c:	cmp	r3, #0
    1540:	bne	1554 <coda_bin_cursor_read_uint8+0xc8>
    1544:	cmp	ip, #8
    1548:	movhi	r2, #1
    154c:	movls	r2, #0
    1550:	b	1560 <coda_bin_cursor_read_uint8+0xd4>
    1554:	cmp	r3, #0
    1558:	movgt	r2, #1
    155c:	movle	r2, #0
    1560:	cmp	r2, #0
    1564:	beq	15d8 <coda_bin_cursor_read_uint8+0x14c>
    1568:	ldr	r0, [sp, #40]	; 0x28
    156c:	ldr	r1, [sp, #44]	; 0x2c
    1570:	add	r2, sp, #72	; 0x48
    1574:	bl	0 <coda_str64>
    1578:	ldr	r3, [r5, #4]
    157c:	lsl	r3, r3, #4
    1580:	add	ip, r5, r3
    1584:	ldr	r3, [ip]
    1588:	ldr	r0, [ip, #4]
    158c:	asr	r1, r0, #3
    1590:	lsr	ip, r3, #3
    1594:	orr	r0, ip, r0, lsl #29
    1598:	add	r2, sp, #48	; 0x30
    159c:	bl	0 <coda_str64>
    15a0:	movw	r0, #65236	; 0xfed4
    15a4:	movt	r0, #65535	; 0xffff
    15a8:	ldr	r1, [pc, #348]	; 170c <coda_bin_cursor_read_uint8+0x280>
    15ac:	add	r2, sp, #72	; 0x48
    15b0:	add	r3, sp, #48	; 0x30
    15b4:	ldr	ip, [r5, #4]
    15b8:	lsl	ip, ip, #4
    15bc:	add	ip, r5, ip
    15c0:	ldr	ip, [ip]
    15c4:	and	ip, ip, #7
    15c8:	str	ip, [sp]
    15cc:	bl	0 <coda_set_error>
    15d0:	mvn	r0, #0
    15d4:	b	16e4 <coda_bin_cursor_read_uint8+0x258>
    15d8:	mov	ip, r7
    15dc:	mov	r2, #0
    15e0:	and	r1, ip, #7
    15e4:	orr	r3, r2, r1
    15e8:	cmp	r3, #0
    15ec:	bne	1640 <coda_bin_cursor_read_uint8+0x1b4>
    15f0:	ldr	r0, [sp, #40]	; 0x28
    15f4:	ldr	r1, [sp, #44]	; 0x2c
    15f8:	eor	r0, r0, #8
    15fc:	orr	r1, r1, r0
    1600:	cmp	r1, #0
    1604:	bne	1640 <coda_bin_cursor_read_uint8+0x1b4>
    1608:	ldr	r0, [r5]
    160c:	asr	r3, r4, #3
    1610:	lsr	ip, ip, #3
    1614:	orr	r2, ip, r4, lsl #29
    1618:	mov	r1, #0
    161c:	mov	ip, #1
    1620:	str	r6, [sp, #8]
    1624:	str	r1, [sp, #4]
    1628:	str	ip, [sp]
    162c:	bl	0 <read_bytes>
    1630:	cmp	r0, #0
    1634:	beq	16e0 <coda_bin_cursor_read_uint8+0x254>
    1638:	mvn	r0, #0
    163c:	b	16e4 <coda_bin_cursor_read_uint8+0x258>
    1640:	ldr	r1, [sp, #40]	; 0x28
    1644:	ldr	r2, [sp, #44]	; 0x2c
    1648:	asr	r3, r2, #3
    164c:	lsr	r0, r1, #3
    1650:	orr	r2, r0, r2, lsl #29
    1654:	and	r1, r1, #7
    1658:	cmp	r1, #0
    165c:	movne	ip, #1
    1660:	moveq	ip, #0
    1664:	asr	r0, ip, #31
    1668:	adds	lr, r2, ip
    166c:	adc	ip, r3, r0
    1670:	mov	r3, lr
    1674:	cmp	ip, #0
    1678:	bne	1688 <coda_bin_cursor_read_uint8+0x1fc>
    167c:	cmp	r3, #1
    1680:	bls	16a4 <coda_bin_cursor_read_uint8+0x218>
    1684:	b	1690 <coda_bin_cursor_read_uint8+0x204>
    1688:	cmp	ip, #0
    168c:	blt	16a4 <coda_bin_cursor_read_uint8+0x218>
    1690:	ldr	r0, [pc, #104]	; 1700 <coda_bin_cursor_read_uint8+0x274>
    1694:	ldr	r1, [pc, #108]	; 1708 <coda_bin_cursor_read_uint8+0x27c>
    1698:	mov	r2, #233	; 0xe9
    169c:	ldr	r3, [pc, #96]	; 1704 <coda_bin_cursor_read_uint8+0x278>
    16a0:	bl	0 <__assert_fail>
    16a4:	mov	r0, #0
    16a8:	strb	r0, [r6]
    16ac:	ldr	r0, [r5]
    16b0:	ldr	r2, [sp, #40]	; 0x28
    16b4:	ldr	ip, [sp, #44]	; 0x2c
    16b8:	str	r6, [sp, #8]
    16bc:	str	ip, [sp, #4]
    16c0:	str	r2, [sp]
    16c4:	mov	r3, r4
    16c8:	mov	r2, r7
    16cc:	bl	1f4 <read_bits>
    16d0:	cmp	r0, #0
    16d4:	beq	16e0 <coda_bin_cursor_read_uint8+0x254>
    16d8:	mvn	r0, #0
    16dc:	b	16e4 <coda_bin_cursor_read_uint8+0x258>
    16e0:	mov	r0, #0
    16e4:	ldr	r4, [sp, #24]
    16e8:	ldr	r5, [sp, #28]
    16ec:	ldr	r6, [sp, #32]
    16f0:	ldr	r7, [sp, #36]	; 0x24
    16f4:	ldr	lr, [sp, #16]
    16f8:	add	sp, sp, #96	; 0x60
    16fc:	bx	lr
    1700:	.word	0x00000691
    1704:	.word	0x000006eb
    1708:	.word	0x000001cc
    170c:	.word	0x0000050b

00001710 <coda_bin_cursor_read_int16>:
    1710:	mov	ip, sp
    1714:	sub	sp, sp, #112	; 0x70
    1718:	str	ip, [sp, #12]
    171c:	str	lr, [sp, #16]
    1720:	str	r4, [sp, #24]
    1724:	str	r5, [sp, #28]
    1728:	str	r6, [sp, #32]
    172c:	str	r7, [sp, #36]	; 0x24
    1730:	str	r8, [sp, #40]	; 0x28
    1734:	str	r9, [sp, #44]	; 0x2c
    1738:	mov	r5, r1
    173c:	mov	r6, r0
    1740:	ldr	r2, [r6, #4]
    1744:	lsl	r0, r2, #4
    1748:	add	ip, r6, r0
    174c:	sub	lr, ip, #4096	; 0x1000
    1750:	ldr	r0, [lr, #4088]	; 0xff8
    1754:	ldr	ip, [r0]
    1758:	cmp	ip, #100	; 0x64
    175c:	blt	1764 <coda_bin_cursor_read_int16+0x54>
    1760:	ldr	r0, [r0, #4]
    1764:	ldr	r2, [r0, #24]
    1768:	ldr	r3, [r0, #28]
    176c:	str	r2, [sp, #56]	; 0x38
    1770:	str	r3, [sp, #60]	; 0x3c
    1774:	ldr	ip, [r6, #4]
    1778:	lsl	ip, ip, #4
    177c:	add	r1, r6, ip
    1780:	ldr	r4, [r1]
    1784:	ldr	r8, [r1, #4]
    1788:	ldr	r7, [r0, #44]	; 0x2c
    178c:	mvn	r3, r3
    1790:	mvn	r2, r2
    1794:	orr	r0, r3, r2
    1798:	cmp	r0, #0
    179c:	bne	1868 <coda_bin_cursor_read_int16+0x158>
    17a0:	add	r1, sp, #56	; 0x38
    17a4:	mov	r0, r6
    17a8:	bl	eec <coda_bin_cursor_get_bit_size>
    17ac:	cmp	r0, #0
    17b0:	beq	17bc <coda_bin_cursor_read_int16+0xac>
    17b4:	mvn	r0, #0
    17b8:	b	19f8 <coda_bin_cursor_read_int16+0x2e8>
    17bc:	ldr	r0, [sp, #56]	; 0x38
    17c0:	ldr	ip, [sp, #60]	; 0x3c
    17c4:	cmp	ip, #0
    17c8:	blt	17f8 <coda_bin_cursor_read_int16+0xe8>
    17cc:	cmp	ip, #0
    17d0:	bne	17e4 <coda_bin_cursor_read_int16+0xd4>
    17d4:	cmp	r0, #16
    17d8:	movhi	r2, #1
    17dc:	movls	r2, #0
    17e0:	b	17f0 <coda_bin_cursor_read_int16+0xe0>
    17e4:	cmp	ip, #0
    17e8:	movgt	r2, #1
    17ec:	movle	r2, #0
    17f0:	cmp	r2, #0
    17f4:	beq	1868 <coda_bin_cursor_read_int16+0x158>
    17f8:	ldr	r0, [sp, #56]	; 0x38
    17fc:	ldr	r1, [sp, #60]	; 0x3c
    1800:	add	r2, sp, #64	; 0x40
    1804:	bl	0 <coda_str64>
    1808:	ldr	r3, [r6, #4]
    180c:	lsl	r0, r3, #4
    1810:	add	r1, r6, r0
    1814:	ldr	r2, [r1]
    1818:	ldr	r0, [r1, #4]
    181c:	asr	r1, r0, #3
    1820:	lsr	r2, r2, #3
    1824:	orr	r0, r2, r0, lsl #29
    1828:	add	r2, sp, #88	; 0x58
    182c:	bl	0 <coda_str64>
    1830:	movw	r0, #65236	; 0xfed4
    1834:	movt	r0, #65535	; 0xffff
    1838:	ldr	r1, [pc, #476]	; 1a1c <coda_bin_cursor_read_int16+0x30c>
    183c:	add	r2, sp, #64	; 0x40
    1840:	add	r3, sp, #88	; 0x58
    1844:	ldr	ip, [r6, #4]
    1848:	lsl	ip, ip, #4
    184c:	add	ip, r6, ip
    1850:	ldr	ip, [ip]
    1854:	and	ip, ip, #7
    1858:	str	ip, [sp]
    185c:	bl	0 <coda_set_error>
    1860:	mvn	r0, #0
    1864:	b	19f8 <coda_bin_cursor_read_int16+0x2e8>
    1868:	mov	ip, r4
    186c:	mov	r1, #0
    1870:	and	r0, ip, #7
    1874:	orr	r3, r1, r0
    1878:	cmp	r3, #0
    187c:	bne	18d0 <coda_bin_cursor_read_int16+0x1c0>
    1880:	ldr	r1, [sp, #56]	; 0x38
    1884:	ldr	r2, [sp, #60]	; 0x3c
    1888:	eor	r1, r1, #16
    188c:	orr	r1, r2, r1
    1890:	cmp	r1, #0
    1894:	bne	18d0 <coda_bin_cursor_read_int16+0x1c0>
    1898:	ldr	r0, [r6]
    189c:	asr	r3, r8, #3
    18a0:	lsr	r2, ip, #3
    18a4:	orr	r2, r2, r8, lsl #29
    18a8:	mov	ip, #0
    18ac:	mov	r1, #2
    18b0:	str	r5, [sp, #8]
    18b4:	str	ip, [sp, #4]
    18b8:	str	r1, [sp]
    18bc:	bl	0 <read_bytes>
    18c0:	cmp	r0, #0
    18c4:	beq	195c <coda_bin_cursor_read_int16+0x24c>
    18c8:	mvn	r0, #0
    18cc:	b	19f8 <coda_bin_cursor_read_int16+0x2e8>
    18d0:	mov	r1, r5
    18d4:	cmp	r7, #0
    18d8:	bne	1920 <coda_bin_cursor_read_int16+0x210>
    18dc:	mov	ip, #0
    18e0:	mov	r3, #2
    18e4:	ldr	r2, [sp, #56]	; 0x38
    18e8:	ldr	r0, [sp, #60]	; 0x3c
    18ec:	asr	r1, r0, #3
    18f0:	lsr	r9, r2, #3
    18f4:	orr	r9, r9, r0, lsl #29
    18f8:	and	r2, r2, #7
    18fc:	cmp	r2, #0
    1900:	movne	r2, #1
    1904:	moveq	r2, #0
    1908:	asr	r0, r2, #31
    190c:	adds	r2, r9, r2
    1910:	adc	r0, r1, r0
    1914:	subs	r3, r3, r2
    1918:	sbc	r2, ip, r0
    191c:	add	r1, r5, r3
    1920:	mov	r3, #0
    1924:	strh	r3, [r5]
    1928:	ldr	r0, [r6]
    192c:	ldr	r3, [sp, #56]	; 0x38
    1930:	ldr	r2, [sp, #60]	; 0x3c
    1934:	str	r1, [sp, #8]
    1938:	str	r2, [sp, #4]
    193c:	str	r3, [sp]
    1940:	mov	r3, r8
    1944:	mov	r2, r4
    1948:	bl	1f4 <read_bits>
    194c:	cmp	r0, #0
    1950:	beq	195c <coda_bin_cursor_read_int16+0x24c>
    1954:	mvn	r0, #0
    1958:	b	19f8 <coda_bin_cursor_read_int16+0x2e8>
    195c:	cmp	r7, #0
    1960:	bne	197c <coda_bin_cursor_read_int16+0x26c>
    1964:	ldrb	r1, [r5, #1]
    1968:	strb	r1, [sp, #48]	; 0x30
    196c:	ldrb	r0, [r5]
    1970:	strb	r0, [sp, #49]	; 0x31
    1974:	ldrsh	r3, [sp, #48]	; 0x30
    1978:	strh	r3, [r5]
    197c:	ldr	r0, [sp, #56]	; 0x38
    1980:	ldr	r1, [sp, #60]	; 0x3c
    1984:	cmp	r1, #0
    1988:	bne	1998 <coda_bin_cursor_read_int16+0x288>
    198c:	cmp	r0, #16
    1990:	bcc	19a0 <coda_bin_cursor_read_int16+0x290>
    1994:	b	19f4 <coda_bin_cursor_read_int16+0x2e4>
    1998:	cmp	r1, #0
    199c:	bge	19f4 <coda_bin_cursor_read_int16+0x2e4>
    19a0:	ldrh	r1, [r5]
    19a4:	bic	r4, r1, #16711680	; 0xff0000
    19a8:	bic	r4, r4, #-16777216	; 0xff000000
    19ac:	mov	r0, #1
    19b0:	ldr	ip, [sp, #56]	; 0x38
    19b4:	ldr	r1, [sp, #60]	; 0x3c
    19b8:	mov	r3, #0
    19bc:	mov	r2, #1
    19c0:	subs	lr, ip, r2
    19c4:	sbc	r1, r1, r3
    19c8:	mov	r3, lr
    19cc:	lsl	r0, r0, r3
    19d0:	and	r2, r4, r0
    19d4:	cmp	r2, #0
    19d8:	beq	19f4 <coda_bin_cursor_read_int16+0x2e4>
    19dc:	mov	r1, #1
    19e0:	lsl	r0, r1, ip
    19e4:	sub	r1, r0, #1
    19e8:	mvn	ip, r1
    19ec:	orr	r2, r4, ip
    19f0:	strh	r2, [r5]
    19f4:	mov	r0, #0
    19f8:	ldr	r4, [sp, #24]
    19fc:	ldr	r5, [sp, #28]
    1a00:	ldr	r6, [sp, #32]
    1a04:	ldr	r7, [sp, #36]	; 0x24
    1a08:	ldr	r8, [sp, #40]	; 0x28
    1a0c:	ldr	r9, [sp, #44]	; 0x2c
    1a10:	ldr	lr, [sp, #16]
    1a14:	add	sp, sp, #112	; 0x70
    1a18:	bx	lr
    1a1c:	.word	0x00000027

00001a20 <coda_bin_cursor_read_uint16>:
    1a20:	mov	ip, sp
    1a24:	sub	sp, sp, #112	; 0x70
    1a28:	str	ip, [sp, #12]
    1a2c:	str	lr, [sp, #16]
    1a30:	str	r4, [sp, #24]
    1a34:	str	r5, [sp, #28]
    1a38:	str	r6, [sp, #32]
    1a3c:	str	r7, [sp, #36]	; 0x24
    1a40:	str	r8, [sp, #40]	; 0x28
    1a44:	str	r9, [sp, #44]	; 0x2c
    1a48:	mov	r8, r1
    1a4c:	mov	r5, r0
    1a50:	ldr	r2, [r5, #4]
    1a54:	lsl	r1, r2, #4
    1a58:	add	r1, r5, r1
    1a5c:	sub	lr, r1, #4096	; 0x1000
    1a60:	ldr	r2, [lr, #4088]	; 0xff8
    1a64:	ldr	r1, [r2]
    1a68:	cmp	r1, #100	; 0x64
    1a6c:	blt	1a74 <coda_bin_cursor_read_uint16+0x54>
    1a70:	ldr	r2, [r2, #4]
    1a74:	ldr	r0, [r2, #24]
    1a78:	ldr	r1, [r2, #28]
    1a7c:	str	r0, [sp, #56]	; 0x38
    1a80:	str	r1, [sp, #60]	; 0x3c
    1a84:	ldr	r3, [r5, #4]
    1a88:	lsl	r3, r3, #4
    1a8c:	add	r3, r5, r3
    1a90:	ldr	r7, [r3]
    1a94:	ldr	r6, [r3, #4]
    1a98:	ldr	r4, [r2, #44]	; 0x2c
    1a9c:	mvn	r2, r1
    1aa0:	mvn	r0, r0
    1aa4:	orr	r0, r2, r0
    1aa8:	cmp	r0, #0
    1aac:	bne	1b78 <coda_bin_cursor_read_uint16+0x158>
    1ab0:	add	r1, sp, #56	; 0x38
    1ab4:	mov	r0, r5
    1ab8:	bl	eec <coda_bin_cursor_get_bit_size>
    1abc:	cmp	r0, #0
    1ac0:	beq	1acc <coda_bin_cursor_read_uint16+0xac>
    1ac4:	mvn	r0, #0
    1ac8:	b	1c90 <coda_bin_cursor_read_uint16+0x270>
    1acc:	ldr	r2, [sp, #56]	; 0x38
    1ad0:	ldr	ip, [sp, #60]	; 0x3c
    1ad4:	cmp	ip, #0
    1ad8:	blt	1b08 <coda_bin_cursor_read_uint16+0xe8>
    1adc:	cmp	ip, #0
    1ae0:	bne	1af4 <coda_bin_cursor_read_uint16+0xd4>
    1ae4:	cmp	r2, #16
    1ae8:	movhi	r3, #1
    1aec:	movls	r3, #0
    1af0:	b	1b00 <coda_bin_cursor_read_uint16+0xe0>
    1af4:	cmp	ip, #0
    1af8:	movgt	r3, #1
    1afc:	movle	r3, #0
    1b00:	cmp	r3, #0
    1b04:	beq	1b78 <coda_bin_cursor_read_uint16+0x158>
    1b08:	ldr	r0, [sp, #56]	; 0x38
    1b0c:	ldr	r1, [sp, #60]	; 0x3c
    1b10:	add	r2, sp, #64	; 0x40
    1b14:	bl	0 <coda_str64>
    1b18:	ldr	r2, [r5, #4]
    1b1c:	lsl	r0, r2, #4
    1b20:	add	r2, r5, r0
    1b24:	ldr	r3, [r2]
    1b28:	ldr	r0, [r2, #4]
    1b2c:	asr	r1, r0, #3
    1b30:	lsr	ip, r3, #3
    1b34:	orr	r0, ip, r0, lsl #29
    1b38:	add	r2, sp, #88	; 0x58
    1b3c:	bl	0 <coda_str64>
    1b40:	movw	r0, #65236	; 0xfed4
    1b44:	movt	r0, #65535	; 0xffff
    1b48:	ldr	r1, [pc, #356]	; 1cb4 <coda_bin_cursor_read_uint16+0x294>
    1b4c:	add	r2, sp, #64	; 0x40
    1b50:	add	r3, sp, #88	; 0x58
    1b54:	ldr	ip, [r5, #4]
    1b58:	lsl	ip, ip, #4
    1b5c:	add	ip, r5, ip
    1b60:	ldr	ip, [ip]
    1b64:	and	ip, ip, #7
    1b68:	str	ip, [sp]
    1b6c:	bl	0 <coda_set_error>
    1b70:	mvn	r0, #0
    1b74:	b	1c90 <coda_bin_cursor_read_uint16+0x270>
    1b78:	mov	ip, r7
    1b7c:	mov	r0, #0
    1b80:	and	r2, ip, #7
    1b84:	orr	r3, r0, r2
    1b88:	cmp	r3, #0
    1b8c:	bne	1be0 <coda_bin_cursor_read_uint16+0x1c0>
    1b90:	ldr	r0, [sp, #56]	; 0x38
    1b94:	ldr	r1, [sp, #60]	; 0x3c
    1b98:	eor	r0, r0, #16
    1b9c:	orr	r1, r1, r0
    1ba0:	cmp	r1, #0
    1ba4:	bne	1be0 <coda_bin_cursor_read_uint16+0x1c0>
    1ba8:	ldr	r0, [r5]
    1bac:	asr	r3, r6, #3
    1bb0:	lsr	r2, ip, #3
    1bb4:	orr	r2, r2, r6, lsl #29
    1bb8:	mov	r1, #0
    1bbc:	mov	ip, #2
    1bc0:	str	r8, [sp, #8]
    1bc4:	str	r1, [sp, #4]
    1bc8:	str	ip, [sp]
    1bcc:	bl	0 <read_bytes>
    1bd0:	cmp	r0, #0
    1bd4:	beq	1c6c <coda_bin_cursor_read_uint16+0x24c>
    1bd8:	mvn	r0, #0
    1bdc:	b	1c90 <coda_bin_cursor_read_uint16+0x270>
    1be0:	mov	r1, r8
    1be4:	cmp	r4, #0
    1be8:	bne	1c30 <coda_bin_cursor_read_uint16+0x210>
    1bec:	mov	ip, #0
    1bf0:	mov	r3, #2
    1bf4:	ldr	r1, [sp, #56]	; 0x38
    1bf8:	ldr	r2, [sp, #60]	; 0x3c
    1bfc:	asr	r0, r2, #3
    1c00:	lsr	r9, r1, #3
    1c04:	orr	r9, r9, r2, lsl #29
    1c08:	and	r2, r1, #7
    1c0c:	cmp	r2, #0
    1c10:	movne	r1, #1
    1c14:	moveq	r1, #0
    1c18:	asr	r2, r1, #31
    1c1c:	adds	r1, r9, r1
    1c20:	adc	r0, r0, r2
    1c24:	subs	r1, r3, r1
    1c28:	sbc	ip, ip, r0
    1c2c:	add	r1, r8, r1
    1c30:	mov	ip, #0
    1c34:	strh	ip, [r8]
    1c38:	ldr	r0, [r5]
    1c3c:	ldr	r2, [sp, #56]	; 0x38
    1c40:	ldr	r3, [sp, #60]	; 0x3c
    1c44:	str	r1, [sp, #8]
    1c48:	str	r3, [sp, #4]
    1c4c:	str	r2, [sp]
    1c50:	mov	r3, r6
    1c54:	mov	r2, r7
    1c58:	bl	1f4 <read_bits>
    1c5c:	cmp	r0, #0
    1c60:	beq	1c6c <coda_bin_cursor_read_uint16+0x24c>
    1c64:	mvn	r0, #0
    1c68:	b	1c90 <coda_bin_cursor_read_uint16+0x270>
    1c6c:	cmp	r4, #0
    1c70:	bne	1c8c <coda_bin_cursor_read_uint16+0x26c>
    1c74:	ldrb	r0, [r8, #1]
    1c78:	strb	r0, [sp, #48]	; 0x30
    1c7c:	ldrb	r3, [r8]
    1c80:	strb	r3, [sp, #49]	; 0x31
    1c84:	ldrh	r1, [sp, #48]	; 0x30
    1c88:	strh	r1, [r8]
    1c8c:	mov	r0, #0
    1c90:	ldr	r4, [sp, #24]
    1c94:	ldr	r5, [sp, #28]
    1c98:	ldr	r6, [sp, #32]
    1c9c:	ldr	r7, [sp, #36]	; 0x24
    1ca0:	ldr	r8, [sp, #40]	; 0x28
    1ca4:	ldr	r9, [sp, #44]	; 0x2c
    1ca8:	ldr	lr, [sp, #16]
    1cac:	add	sp, sp, #112	; 0x70
    1cb0:	bx	lr
    1cb4:	.word	0x00000576

00001cb8 <coda_bin_cursor_read_int32>:
    1cb8:	mov	ip, sp
    1cbc:	sub	sp, sp, #112	; 0x70
    1cc0:	str	ip, [sp, #12]
    1cc4:	str	lr, [sp, #16]
    1cc8:	str	r4, [sp, #24]
    1ccc:	str	r5, [sp, #28]
    1cd0:	str	r6, [sp, #32]
    1cd4:	str	r7, [sp, #36]	; 0x24
    1cd8:	str	r8, [sp, #40]	; 0x28
    1cdc:	str	r9, [sp, #44]	; 0x2c
    1ce0:	mov	r5, r1
    1ce4:	mov	r6, r0
    1ce8:	ldr	r1, [r6, #4]
    1cec:	lsl	ip, r1, #4
    1cf0:	add	r2, r6, ip
    1cf4:	sub	lr, r2, #4096	; 0x1000
    1cf8:	ldr	ip, [lr, #4088]	; 0xff8
    1cfc:	ldr	r2, [ip]
    1d00:	cmp	r2, #100	; 0x64
    1d04:	blt	1d0c <coda_bin_cursor_read_int32+0x54>
    1d08:	ldr	ip, [ip, #4]
    1d0c:	ldr	r3, [ip, #24]
    1d10:	ldr	r0, [ip, #28]
    1d14:	str	r3, [sp, #56]	; 0x38
    1d18:	str	r0, [sp, #60]	; 0x3c
    1d1c:	ldr	r1, [r6, #4]
    1d20:	lsl	r1, r1, #4
    1d24:	add	r1, r6, r1
    1d28:	ldr	r8, [r1]
    1d2c:	ldr	r4, [r1, #4]
    1d30:	ldr	r7, [ip, #44]	; 0x2c
    1d34:	mvn	r0, r0
    1d38:	mvn	r3, r3
    1d3c:	orr	r3, r0, r3
    1d40:	cmp	r3, #0
    1d44:	bne	1e10 <coda_bin_cursor_read_int32+0x158>
    1d48:	add	r1, sp, #56	; 0x38
    1d4c:	mov	r0, r6
    1d50:	bl	eec <coda_bin_cursor_get_bit_size>
    1d54:	cmp	r0, #0
    1d58:	beq	1d64 <coda_bin_cursor_read_int32+0xac>
    1d5c:	mvn	r0, #0
    1d60:	b	1fac <coda_bin_cursor_read_int32+0x2f4>
    1d64:	ldr	ip, [sp, #56]	; 0x38
    1d68:	ldr	r3, [sp, #60]	; 0x3c
    1d6c:	cmp	r3, #0
    1d70:	blt	1da0 <coda_bin_cursor_read_int32+0xe8>
    1d74:	cmp	r3, #0
    1d78:	bne	1d8c <coda_bin_cursor_read_int32+0xd4>
    1d7c:	cmp	ip, #32
    1d80:	movhi	r2, #1
    1d84:	movls	r2, #0
    1d88:	b	1d98 <coda_bin_cursor_read_int32+0xe0>
    1d8c:	cmp	r3, #0
    1d90:	movgt	r2, #1
    1d94:	movle	r2, #0
    1d98:	cmp	r2, #0
    1d9c:	beq	1e10 <coda_bin_cursor_read_int32+0x158>
    1da0:	ldr	r0, [sp, #56]	; 0x38
    1da4:	ldr	r1, [sp, #60]	; 0x3c
    1da8:	add	r2, sp, #64	; 0x40
    1dac:	bl	0 <coda_str64>
    1db0:	ldr	r2, [r6, #4]
    1db4:	lsl	r1, r2, #4
    1db8:	add	r3, r6, r1
    1dbc:	ldr	r2, [r3]
    1dc0:	ldr	r3, [r3, #4]
    1dc4:	asr	r1, r3, #3
    1dc8:	lsr	ip, r2, #3
    1dcc:	orr	r0, ip, r3, lsl #29
    1dd0:	add	r2, sp, #88	; 0x58
    1dd4:	bl	0 <coda_str64>
    1dd8:	movw	r0, #65236	; 0xfed4
    1ddc:	movt	r0, #65535	; 0xffff
    1de0:	ldr	r1, [pc, #488]	; 1fd0 <coda_bin_cursor_read_int32+0x318>
    1de4:	add	r2, sp, #64	; 0x40
    1de8:	add	r3, sp, #88	; 0x58
    1dec:	ldr	ip, [r6, #4]
    1df0:	lsl	ip, ip, #4
    1df4:	add	ip, r6, ip
    1df8:	ldr	ip, [ip]
    1dfc:	and	ip, ip, #7
    1e00:	str	ip, [sp]
    1e04:	bl	0 <coda_set_error>
    1e08:	mvn	r0, #0
    1e0c:	b	1fac <coda_bin_cursor_read_int32+0x2f4>
    1e10:	mov	r3, #0
    1e14:	mov	r1, r8
    1e18:	and	r2, r1, #7
    1e1c:	orr	ip, r3, r2
    1e20:	cmp	ip, #0
    1e24:	bne	1e78 <coda_bin_cursor_read_int32+0x1c0>
    1e28:	ldr	ip, [sp, #56]	; 0x38
    1e2c:	ldr	r3, [sp, #60]	; 0x3c
    1e30:	eor	r2, ip, #32
    1e34:	orr	r0, r3, r2
    1e38:	cmp	r0, #0
    1e3c:	bne	1e78 <coda_bin_cursor_read_int32+0x1c0>
    1e40:	ldr	r0, [r6]
    1e44:	asr	r3, r4, #3
    1e48:	lsr	ip, r1, #3
    1e4c:	orr	r2, ip, r4, lsl #29
    1e50:	mov	ip, #0
    1e54:	mov	r1, #4
    1e58:	str	r5, [sp, #8]
    1e5c:	str	ip, [sp, #4]
    1e60:	str	r1, [sp]
    1e64:	bl	0 <read_bytes>
    1e68:	cmp	r0, #0
    1e6c:	beq	1f08 <coda_bin_cursor_read_int32+0x250>
    1e70:	mvn	r0, #0
    1e74:	b	1fac <coda_bin_cursor_read_int32+0x2f4>
    1e78:	mov	r1, r5
    1e7c:	cmp	r7, #0
    1e80:	bne	1ecc <coda_bin_cursor_read_int32+0x214>
    1e84:	mov	ip, #0
    1e88:	mov	r3, #4
    1e8c:	ldr	r2, [sp, #56]	; 0x38
    1e90:	ldr	r0, [sp, #60]	; 0x3c
    1e94:	asr	r1, r0, #3
    1e98:	lsr	r9, r2, #3
    1e9c:	orr	r0, r9, r0, lsl #29
    1ea0:	and	r2, r2, #7
    1ea4:	cmp	r2, #0
    1ea8:	movne	r2, #1
    1eac:	moveq	r2, #0
    1eb0:	asr	r9, r2, #31
    1eb4:	adds	lr, r0, r2
    1eb8:	adc	r0, r1, r9
    1ebc:	mov	r1, lr
    1ec0:	subs	r2, r3, r1
    1ec4:	sbc	ip, ip, r0
    1ec8:	add	r1, r5, r2
    1ecc:	mov	r3, #0
    1ed0:	str	r3, [r5]
    1ed4:	ldr	r0, [r6]
    1ed8:	ldr	r2, [sp, #56]	; 0x38
    1edc:	ldr	r3, [sp, #60]	; 0x3c
    1ee0:	str	r1, [sp, #8]
    1ee4:	str	r3, [sp, #4]
    1ee8:	str	r2, [sp]
    1eec:	mov	r3, r4
    1ef0:	mov	r2, r8
    1ef4:	bl	1f4 <read_bits>
    1ef8:	cmp	r0, #0
    1efc:	beq	1f08 <coda_bin_cursor_read_int32+0x250>
    1f00:	mvn	r0, #0
    1f04:	b	1fac <coda_bin_cursor_read_int32+0x2f4>
    1f08:	cmp	r7, #0
    1f0c:	bne	1f38 <coda_bin_cursor_read_int32+0x280>
    1f10:	ldrb	r1, [r5, #3]
    1f14:	strb	r1, [sp, #48]	; 0x30
    1f18:	ldrb	r2, [r5, #2]
    1f1c:	strb	r2, [sp, #49]	; 0x31
    1f20:	ldrb	r0, [r5, #1]
    1f24:	strb	r0, [sp, #50]	; 0x32
    1f28:	ldrb	r0, [r5]
    1f2c:	strb	r0, [sp, #51]	; 0x33
    1f30:	ldr	r3, [sp, #48]	; 0x30
    1f34:	str	r3, [r5]
    1f38:	ldr	r2, [sp, #56]	; 0x38
    1f3c:	ldr	r1, [sp, #60]	; 0x3c
    1f40:	cmp	r1, #0
    1f44:	bne	1f54 <coda_bin_cursor_read_int32+0x29c>
    1f48:	cmp	r2, #32
    1f4c:	bcc	1f5c <coda_bin_cursor_read_int32+0x2a4>
    1f50:	b	1fa8 <coda_bin_cursor_read_int32+0x2f0>
    1f54:	cmp	r1, #0
    1f58:	bge	1fa8 <coda_bin_cursor_read_int32+0x2f0>
    1f5c:	ldr	r4, [r5]
    1f60:	mov	r0, #1
    1f64:	ldr	r1, [sp, #56]	; 0x38
    1f68:	ldr	r2, [sp, #60]	; 0x3c
    1f6c:	mov	ip, #0
    1f70:	mov	r3, #1
    1f74:	subs	lr, r1, r3
    1f78:	sbc	r3, r2, ip
    1f7c:	mov	r2, lr
    1f80:	lsl	r0, r0, r2
    1f84:	and	r0, r4, r0
    1f88:	cmp	r0, #0
    1f8c:	beq	1fa8 <coda_bin_cursor_read_int32+0x2f0>
    1f90:	mov	ip, #1
    1f94:	lsl	r1, ip, r1
    1f98:	sub	r2, r1, #1
    1f9c:	mvn	r3, r2
    1fa0:	orr	r0, r4, r3
    1fa4:	str	r0, [r5]
    1fa8:	mov	r0, #0
    1fac:	ldr	r4, [sp, #24]
    1fb0:	ldr	r5, [sp, #28]
    1fb4:	ldr	r6, [sp, #32]
    1fb8:	ldr	r7, [sp, #36]	; 0x24
    1fbc:	ldr	r8, [sp, #40]	; 0x28
    1fc0:	ldr	r9, [sp, #44]	; 0x2c
    1fc4:	ldr	lr, [sp, #16]
    1fc8:	add	sp, sp, #112	; 0x70
    1fcc:	bx	lr
    1fd0:	.word	0x00000427

00001fd4 <coda_bin_cursor_read_uint32>:
    1fd4:	mov	ip, sp
    1fd8:	sub	sp, sp, #112	; 0x70
    1fdc:	str	ip, [sp, #12]
    1fe0:	str	lr, [sp, #16]
    1fe4:	str	r4, [sp, #24]
    1fe8:	str	r5, [sp, #28]
    1fec:	str	r6, [sp, #32]
    1ff0:	str	r7, [sp, #36]	; 0x24
    1ff4:	str	r8, [sp, #40]	; 0x28
    1ff8:	str	r9, [sp, #44]	; 0x2c
    1ffc:	mov	r7, r1
    2000:	mov	r5, r0
    2004:	ldr	r3, [r5, #4]
    2008:	lsl	r2, r3, #4
    200c:	add	r0, r5, r2
    2010:	sub	lr, r0, #4096	; 0x1000
    2014:	ldr	ip, [lr, #4088]	; 0xff8
    2018:	ldr	r0, [ip]
    201c:	cmp	r0, #100	; 0x64
    2020:	blt	2028 <coda_bin_cursor_read_uint32+0x54>
    2024:	ldr	ip, [ip, #4]
    2028:	ldr	r2, [ip, #24]
    202c:	ldr	r1, [ip, #28]
    2030:	str	r2, [sp, #56]	; 0x38
    2034:	str	r1, [sp, #60]	; 0x3c
    2038:	ldr	r0, [r5, #4]
    203c:	lsl	r3, r0, #4
    2040:	add	r0, r5, r3
    2044:	ldr	r4, [r0]
    2048:	ldr	r6, [r0, #4]
    204c:	ldr	r8, [ip, #44]	; 0x2c
    2050:	mvn	ip, r1
    2054:	mvn	r3, r2
    2058:	orr	r2, ip, r3
    205c:	cmp	r2, #0
    2060:	bne	212c <coda_bin_cursor_read_uint32+0x158>
    2064:	add	r1, sp, #56	; 0x38
    2068:	mov	r0, r5
    206c:	bl	eec <coda_bin_cursor_get_bit_size>
    2070:	cmp	r0, #0
    2074:	beq	2080 <coda_bin_cursor_read_uint32+0xac>
    2078:	mvn	r0, #0
    207c:	b	2254 <coda_bin_cursor_read_uint32+0x280>
    2080:	ldr	r0, [sp, #56]	; 0x38
    2084:	ldr	r2, [sp, #60]	; 0x3c
    2088:	cmp	r2, #0
    208c:	blt	20bc <coda_bin_cursor_read_uint32+0xe8>
    2090:	cmp	r2, #0
    2094:	bne	20a8 <coda_bin_cursor_read_uint32+0xd4>
    2098:	cmp	r0, #32
    209c:	movhi	r2, #1
    20a0:	movls	r2, #0
    20a4:	b	20b4 <coda_bin_cursor_read_uint32+0xe0>
    20a8:	cmp	r2, #0
    20ac:	movgt	r2, #1
    20b0:	movle	r2, #0
    20b4:	cmp	r2, #0
    20b8:	beq	212c <coda_bin_cursor_read_uint32+0x158>
    20bc:	ldr	r0, [sp, #56]	; 0x38
    20c0:	ldr	r1, [sp, #60]	; 0x3c
    20c4:	add	r2, sp, #64	; 0x40
    20c8:	bl	0 <coda_str64>
    20cc:	ldr	r0, [r5, #4]
    20d0:	lsl	r3, r0, #4
    20d4:	add	ip, r5, r3
    20d8:	ldr	r2, [ip]
    20dc:	ldr	r0, [ip, #4]
    20e0:	asr	r1, r0, #3
    20e4:	lsr	ip, r2, #3
    20e8:	orr	r0, ip, r0, lsl #29
    20ec:	add	r2, sp, #88	; 0x58
    20f0:	bl	0 <coda_str64>
    20f4:	movw	r0, #65236	; 0xfed4
    20f8:	movt	r0, #65535	; 0xffff
    20fc:	ldr	r1, [pc, #372]	; 2278 <coda_bin_cursor_read_uint32+0x2a4>
    2100:	add	r2, sp, #64	; 0x40
    2104:	add	r3, sp, #88	; 0x58
    2108:	ldr	ip, [r5, #4]
    210c:	lsl	ip, ip, #4
    2110:	add	ip, r5, ip
    2114:	ldr	ip, [ip]
    2118:	and	ip, ip, #7
    211c:	str	ip, [sp]
    2120:	bl	0 <coda_set_error>
    2124:	mvn	r0, #0
    2128:	b	2254 <coda_bin_cursor_read_uint32+0x280>
    212c:	mov	r1, r4
    2130:	mov	r2, #0
    2134:	and	r3, r1, #7
    2138:	orr	r2, r2, r3
    213c:	cmp	r2, #0
    2140:	bne	2194 <coda_bin_cursor_read_uint32+0x1c0>
    2144:	ldr	ip, [sp, #56]	; 0x38
    2148:	ldr	r3, [sp, #60]	; 0x3c
    214c:	eor	r2, ip, #32
    2150:	orr	r2, r3, r2
    2154:	cmp	r2, #0
    2158:	bne	2194 <coda_bin_cursor_read_uint32+0x1c0>
    215c:	ldr	r0, [r5]
    2160:	asr	r3, r6, #3
    2164:	lsr	ip, r1, #3
    2168:	orr	r2, ip, r6, lsl #29
    216c:	mov	ip, #0
    2170:	mov	r1, #4
    2174:	str	r7, [sp, #8]
    2178:	str	ip, [sp, #4]
    217c:	str	r1, [sp]
    2180:	bl	0 <read_bytes>
    2184:	cmp	r0, #0
    2188:	beq	2220 <coda_bin_cursor_read_uint32+0x24c>
    218c:	mvn	r0, #0
    2190:	b	2254 <coda_bin_cursor_read_uint32+0x280>
    2194:	mov	r1, r7
    2198:	cmp	r8, #0
    219c:	bne	21e4 <coda_bin_cursor_read_uint32+0x210>
    21a0:	mov	r1, #0
    21a4:	mov	r0, #4
    21a8:	ldr	r2, [sp, #56]	; 0x38
    21ac:	ldr	ip, [sp, #60]	; 0x3c
    21b0:	asr	r3, ip, #3
    21b4:	lsr	r9, r2, #3
    21b8:	orr	ip, r9, ip, lsl #29
    21bc:	and	r2, r2, #7
    21c0:	cmp	r2, #0
    21c4:	movne	r2, #1
    21c8:	moveq	r2, #0
    21cc:	asr	r9, r2, #31
    21d0:	adds	ip, ip, r2
    21d4:	adc	r2, r3, r9
    21d8:	subs	r3, r0, ip
    21dc:	sbc	r1, r1, r2
    21e0:	add	r1, r7, r3
    21e4:	mov	r2, #0
    21e8:	str	r2, [r7]
    21ec:	ldr	r0, [r5]
    21f0:	ldr	r3, [sp, #56]	; 0x38
    21f4:	ldr	r2, [sp, #60]	; 0x3c
    21f8:	str	r1, [sp, #8]
    21fc:	str	r2, [sp, #4]
    2200:	str	r3, [sp]
    2204:	mov	r3, r6
    2208:	mov	r2, r4
    220c:	bl	1f4 <read_bits>
    2210:	cmp	r0, #0
    2214:	beq	2220 <coda_bin_cursor_read_uint32+0x24c>
    2218:	mvn	r0, #0
    221c:	b	2254 <coda_bin_cursor_read_uint32+0x280>
    2220:	cmp	r8, #0
    2224:	bne	2250 <coda_bin_cursor_read_uint32+0x27c>
    2228:	ldrb	r0, [r7, #3]
    222c:	strb	r0, [sp, #48]	; 0x30
    2230:	ldrb	r2, [r7, #2]
    2234:	strb	r2, [sp, #49]	; 0x31
    2238:	ldrb	r3, [r7, #1]
    223c:	strb	r3, [sp, #50]	; 0x32
    2240:	ldrb	r0, [r7]
    2244:	strb	r0, [sp, #51]	; 0x33
    2248:	ldr	r3, [sp, #48]	; 0x30
    224c:	str	r3, [r7]
    2250:	mov	r0, #0
    2254:	ldr	r4, [sp, #24]
    2258:	ldr	r5, [sp, #28]
    225c:	ldr	r6, [sp, #32]
    2260:	ldr	r7, [sp, #36]	; 0x24
    2264:	ldr	r8, [sp, #40]	; 0x28
    2268:	ldr	r9, [sp, #44]	; 0x2c
    226c:	ldr	lr, [sp, #16]
    2270:	add	sp, sp, #112	; 0x70
    2274:	bx	lr
    2278:	.word	0x000000fc

0000227c <coda_bin_cursor_read_int64>:
    227c:	mov	ip, sp
    2280:	sub	sp, sp, #112	; 0x70
    2284:	str	ip, [sp, #12]
    2288:	str	lr, [sp, #16]
    228c:	str	r4, [sp, #24]
    2290:	str	r5, [sp, #28]
    2294:	str	r6, [sp, #32]
    2298:	str	r7, [sp, #36]	; 0x24
    229c:	str	r8, [sp, #40]	; 0x28
    22a0:	str	r9, [sp, #44]	; 0x2c
    22a4:	mov	r7, r1
    22a8:	mov	r5, r0
    22ac:	ldr	r1, [r5, #4]
    22b0:	lsl	r3, r1, #4
    22b4:	add	ip, r5, r3
    22b8:	sub	lr, ip, #4096	; 0x1000
    22bc:	ldr	ip, [lr, #4088]	; 0xff8
    22c0:	ldr	r2, [ip]
    22c4:	cmp	r2, #100	; 0x64
    22c8:	blt	22d0 <coda_bin_cursor_read_int64+0x54>
    22cc:	ldr	ip, [ip, #4]
    22d0:	ldr	r1, [ip, #24]
    22d4:	ldr	r2, [ip, #28]
    22d8:	str	r1, [sp, #48]	; 0x30
    22dc:	str	r2, [sp, #52]	; 0x34
    22e0:	ldr	r3, [r5, #4]
    22e4:	lsl	r0, r3, #4
    22e8:	add	r3, r5, r0
    22ec:	ldr	r6, [r3]
    22f0:	ldr	r4, [r3, #4]
    22f4:	ldr	r8, [ip, #44]	; 0x2c
    22f8:	mvn	r0, r2
    22fc:	mvn	ip, r1
    2300:	orr	r3, r0, ip
    2304:	cmp	r3, #0
    2308:	bne	23d4 <coda_bin_cursor_read_int64+0x158>
    230c:	add	r1, sp, #48	; 0x30
    2310:	mov	r0, r5
    2314:	bl	eec <coda_bin_cursor_get_bit_size>
    2318:	cmp	r0, #0
    231c:	beq	2328 <coda_bin_cursor_read_int64+0xac>
    2320:	mvn	r0, #0
    2324:	b	25c4 <coda_bin_cursor_read_int64+0x348>
    2328:	ldr	r1, [sp, #48]	; 0x30
    232c:	ldr	r0, [sp, #52]	; 0x34
    2330:	cmp	r0, #0
    2334:	blt	2364 <coda_bin_cursor_read_int64+0xe8>
    2338:	cmp	r0, #0
    233c:	bne	2350 <coda_bin_cursor_read_int64+0xd4>
    2340:	cmp	r1, #64	; 0x40
    2344:	movhi	r2, #1
    2348:	movls	r2, #0
    234c:	b	235c <coda_bin_cursor_read_int64+0xe0>
    2350:	cmp	r0, #0
    2354:	movgt	r2, #1
    2358:	movle	r2, #0
    235c:	cmp	r2, #0
    2360:	beq	23d4 <coda_bin_cursor_read_int64+0x158>
    2364:	ldr	r0, [sp, #48]	; 0x30
    2368:	ldr	r1, [sp, #52]	; 0x34
    236c:	add	r2, sp, #64	; 0x40
    2370:	bl	0 <coda_str64>
    2374:	ldr	r0, [r5, #4]
    2378:	lsl	ip, r0, #4
    237c:	add	r1, r5, ip
    2380:	ldr	r3, [r1]
    2384:	ldr	r2, [r1, #4]
    2388:	asr	r1, r2, #3
    238c:	lsr	r0, r3, #3
    2390:	orr	r0, r0, r2, lsl #29
    2394:	add	r2, sp, #88	; 0x58
    2398:	bl	0 <coda_str64>
    239c:	movw	r0, #65236	; 0xfed4
    23a0:	movt	r0, #65535	; 0xffff
    23a4:	ldr	r1, [pc, #572]	; 25e8 <coda_bin_cursor_read_int64+0x36c>
    23a8:	add	r2, sp, #64	; 0x40
    23ac:	add	r3, sp, #88	; 0x58
    23b0:	ldr	ip, [r5, #4]
    23b4:	lsl	ip, ip, #4
    23b8:	add	ip, r5, ip
    23bc:	ldr	ip, [ip]
    23c0:	and	ip, ip, #7
    23c4:	str	ip, [sp]
    23c8:	bl	0 <coda_set_error>
    23cc:	mvn	r0, #0
    23d0:	b	25c4 <coda_bin_cursor_read_int64+0x348>
    23d4:	mov	ip, r6
    23d8:	mov	r3, #0
    23dc:	and	r0, ip, #7
    23e0:	orr	r3, r3, r0
    23e4:	cmp	r3, #0
    23e8:	bne	243c <coda_bin_cursor_read_int64+0x1c0>
    23ec:	ldr	r2, [sp, #48]	; 0x30
    23f0:	ldr	r0, [sp, #52]	; 0x34
    23f4:	eor	r2, r2, #64	; 0x40
    23f8:	orr	r3, r0, r2
    23fc:	cmp	r3, #0
    2400:	bne	243c <coda_bin_cursor_read_int64+0x1c0>
    2404:	ldr	r0, [r5]
    2408:	asr	r3, r4, #3
    240c:	lsr	r1, ip, #3
    2410:	orr	r2, r1, r4, lsl #29
    2414:	mov	ip, #0
    2418:	mov	r1, #8
    241c:	str	r7, [sp, #8]
    2420:	str	ip, [sp, #4]
    2424:	str	r1, [sp]
    2428:	bl	0 <read_bytes>
    242c:	cmp	r0, #0
    2430:	beq	24d8 <coda_bin_cursor_read_int64+0x25c>
    2434:	mvn	r0, #0
    2438:	b	25c4 <coda_bin_cursor_read_int64+0x348>
    243c:	mov	r1, r7
    2440:	cmp	r8, #0
    2444:	bne	2494 <coda_bin_cursor_read_int64+0x218>
    2448:	mov	r3, #0
    244c:	mov	r2, #8
    2450:	ldr	r1, [sp, #48]	; 0x30
    2454:	ldr	r0, [sp, #52]	; 0x34
    2458:	asr	ip, r0, #3
    245c:	lsr	r9, r1, #3
    2460:	orr	r9, r9, r0, lsl #29
    2464:	and	r0, r1, #7
    2468:	cmp	r0, #0
    246c:	movne	r0, #1
    2470:	moveq	r0, #0
    2474:	asr	r1, r0, #31
    2478:	adds	lr, r9, r0
    247c:	adc	r0, ip, r1
    2480:	mov	ip, lr
    2484:	subs	lr, r2, ip
    2488:	sbc	r1, r3, r0
    248c:	mov	r0, lr
    2490:	add	r1, r7, r0
    2494:	mov	r3, #0
    2498:	mov	r2, #0
    249c:	str	r2, [r7]
    24a0:	str	r3, [r7, #4]
    24a4:	ldr	r0, [r5]
    24a8:	ldr	r3, [sp, #48]	; 0x30
    24ac:	ldr	r2, [sp, #52]	; 0x34
    24b0:	str	r1, [sp, #8]
    24b4:	str	r2, [sp, #4]
    24b8:	str	r3, [sp]
    24bc:	mov	r3, r4
    24c0:	mov	r2, r6
    24c4:	bl	1f4 <read_bits>
    24c8:	cmp	r0, #0
    24cc:	beq	24d8 <coda_bin_cursor_read_int64+0x25c>
    24d0:	mvn	r0, #0
    24d4:	b	25c4 <coda_bin_cursor_read_int64+0x348>
    24d8:	cmp	r8, #0
    24dc:	bne	2530 <coda_bin_cursor_read_int64+0x2b4>
    24e0:	ldrb	ip, [r7, #7]
    24e4:	strb	ip, [sp, #56]	; 0x38
    24e8:	ldrb	r3, [r7, #6]
    24ec:	strb	r3, [sp, #57]	; 0x39
    24f0:	ldrb	r3, [r7, #5]
    24f4:	strb	r3, [sp, #58]	; 0x3a
    24f8:	ldrb	ip, [r7, #4]
    24fc:	strb	ip, [sp, #59]	; 0x3b
    2500:	ldrb	r3, [r7, #3]
    2504:	strb	r3, [sp, #60]	; 0x3c
    2508:	ldrb	ip, [r7, #2]
    250c:	strb	ip, [sp, #61]	; 0x3d
    2510:	ldrb	r3, [r7, #1]
    2514:	strb	r3, [sp, #62]	; 0x3e
    2518:	ldrb	r3, [r7]
    251c:	strb	r3, [sp, #63]	; 0x3f
    2520:	ldr	r1, [sp, #56]	; 0x38
    2524:	ldr	r2, [sp, #60]	; 0x3c
    2528:	str	r1, [r7]
    252c:	str	r2, [r7, #4]
    2530:	ldr	r2, [sp, #48]	; 0x30
    2534:	ldr	r0, [sp, #52]	; 0x34
    2538:	cmp	r0, #0
    253c:	bne	254c <coda_bin_cursor_read_int64+0x2d0>
    2540:	cmp	r2, #64	; 0x40
    2544:	bcc	2554 <coda_bin_cursor_read_int64+0x2d8>
    2548:	b	25c0 <coda_bin_cursor_read_int64+0x344>
    254c:	cmp	r0, #0
    2550:	bge	25c0 <coda_bin_cursor_read_int64+0x344>
    2554:	ldr	r5, [r7]
    2558:	ldr	r4, [r7, #4]
    255c:	mov	r8, r4
    2560:	mov	r6, r5
    2564:	mov	r1, #0
    2568:	mov	r0, #1
    256c:	ldr	ip, [sp, #48]	; 0x30
    2570:	ldr	r2, [sp, #52]	; 0x34
    2574:	subs	lr, ip, r0
    2578:	sbc	r3, r2, r1
    257c:	mov	r2, lr
    2580:	bl	0 <__compcert_i64_shl>
    2584:	and	r1, r8, r1
    2588:	and	ip, r6, r0
    258c:	orr	ip, r1, ip
    2590:	cmp	ip, #0
    2594:	beq	25c0 <coda_bin_cursor_read_int64+0x344>
    2598:	mov	r3, #1
    259c:	ldr	r2, [sp, #48]	; 0x30
    25a0:	lsl	r3, r3, r2
    25a4:	sub	r0, r3, #1
    25a8:	mvn	ip, r0
    25ac:	asr	r0, ip, #31
    25b0:	orr	r2, r4, r0
    25b4:	orr	r1, r5, ip
    25b8:	str	r1, [r7]
    25bc:	str	r2, [r7, #4]
    25c0:	mov	r0, #0
    25c4:	ldr	r4, [sp, #24]
    25c8:	ldr	r5, [sp, #28]
    25cc:	ldr	r6, [sp, #32]
    25d0:	ldr	r7, [sp, #36]	; 0x24
    25d4:	ldr	r8, [sp, #40]	; 0x28
    25d8:	ldr	r9, [sp, #44]	; 0x2c
    25dc:	ldr	lr, [sp, #16]
    25e0:	add	sp, sp, #112	; 0x70
    25e4:	bx	lr
    25e8:	.word	0x000003bc

000025ec <coda_bin_cursor_read_uint64>:
    25ec:	mov	ip, sp
    25f0:	sub	sp, sp, #112	; 0x70
    25f4:	str	ip, [sp, #12]
    25f8:	str	lr, [sp, #16]
    25fc:	str	r4, [sp, #24]
    2600:	str	r5, [sp, #28]
    2604:	str	r6, [sp, #32]
    2608:	str	r7, [sp, #36]	; 0x24
    260c:	str	r8, [sp, #40]	; 0x28
    2610:	str	r9, [sp, #44]	; 0x2c
    2614:	mov	r7, r1
    2618:	mov	r8, r0
    261c:	ldr	r3, [r8, #4]
    2620:	lsl	r2, r3, #4
    2624:	add	r3, r8, r2
    2628:	sub	lr, r3, #4096	; 0x1000
    262c:	ldr	r2, [lr, #4088]	; 0xff8
    2630:	ldr	r1, [r2]
    2634:	cmp	r1, #100	; 0x64
    2638:	blt	2640 <coda_bin_cursor_read_uint64+0x54>
    263c:	ldr	r2, [r2, #4]
    2640:	ldr	r3, [r2, #24]
    2644:	ldr	r0, [r2, #28]
    2648:	str	r3, [sp, #48]	; 0x30
    264c:	str	r0, [sp, #52]	; 0x34
    2650:	ldr	r1, [r8, #4]
    2654:	lsl	ip, r1, #4
    2658:	add	r1, r8, ip
    265c:	ldr	r5, [r1]
    2660:	ldr	r4, [r1, #4]
    2664:	ldr	r6, [r2, #44]	; 0x2c
    2668:	mvn	r2, r0
    266c:	mvn	ip, r3
    2670:	orr	r1, r2, ip
    2674:	cmp	r1, #0
    2678:	bne	2744 <coda_bin_cursor_read_uint64+0x158>
    267c:	add	r1, sp, #48	; 0x30
    2680:	mov	r0, r8
    2684:	bl	eec <coda_bin_cursor_get_bit_size>
    2688:	cmp	r0, #0
    268c:	beq	2698 <coda_bin_cursor_read_uint64+0xac>
    2690:	mvn	r0, #0
    2694:	b	28a0 <coda_bin_cursor_read_uint64+0x2b4>
    2698:	ldr	r1, [sp, #48]	; 0x30
    269c:	ldr	r0, [sp, #52]	; 0x34
    26a0:	cmp	r0, #0
    26a4:	blt	26d4 <coda_bin_cursor_read_uint64+0xe8>
    26a8:	cmp	r0, #0
    26ac:	bne	26c0 <coda_bin_cursor_read_uint64+0xd4>
    26b0:	cmp	r1, #64	; 0x40
    26b4:	movhi	ip, #1
    26b8:	movls	ip, #0
    26bc:	b	26cc <coda_bin_cursor_read_uint64+0xe0>
    26c0:	cmp	r0, #0
    26c4:	movgt	ip, #1
    26c8:	movle	ip, #0
    26cc:	cmp	ip, #0
    26d0:	beq	2744 <coda_bin_cursor_read_uint64+0x158>
    26d4:	ldr	r0, [sp, #48]	; 0x30
    26d8:	ldr	r1, [sp, #52]	; 0x34
    26dc:	add	r2, sp, #64	; 0x40
    26e0:	bl	0 <coda_str64>
    26e4:	ldr	r0, [r8, #4]
    26e8:	lsl	ip, r0, #4
    26ec:	add	r0, r8, ip
    26f0:	ldr	r3, [r0]
    26f4:	ldr	r2, [r0, #4]
    26f8:	asr	r1, r2, #3
    26fc:	lsr	r3, r3, #3
    2700:	orr	r0, r3, r2, lsl #29
    2704:	add	r2, sp, #88	; 0x58
    2708:	bl	0 <coda_str64>
    270c:	movw	r0, #65236	; 0xfed4
    2710:	movt	r0, #65535	; 0xffff
    2714:	ldr	r1, [pc, #424]	; 28c4 <coda_bin_cursor_read_uint64+0x2d8>
    2718:	add	r2, sp, #64	; 0x40
    271c:	add	r3, sp, #88	; 0x58
    2720:	ldr	ip, [r8, #4]
    2724:	lsl	ip, ip, #4
    2728:	add	ip, r8, ip
    272c:	ldr	ip, [ip]
    2730:	and	ip, ip, #7
    2734:	str	ip, [sp]
    2738:	bl	0 <coda_set_error>
    273c:	mvn	r0, #0
    2740:	b	28a0 <coda_bin_cursor_read_uint64+0x2b4>
    2744:	mov	r0, #0
    2748:	mov	r1, r5
    274c:	and	ip, r1, #7
    2750:	orr	r2, r0, ip
    2754:	cmp	r2, #0
    2758:	bne	27ac <coda_bin_cursor_read_uint64+0x1c0>
    275c:	ldr	r2, [sp, #48]	; 0x30
    2760:	ldr	r0, [sp, #52]	; 0x34
    2764:	eor	r2, r2, #64	; 0x40
    2768:	orr	r2, r0, r2
    276c:	cmp	r2, #0
    2770:	bne	27ac <coda_bin_cursor_read_uint64+0x1c0>
    2774:	ldr	r0, [r8]
    2778:	asr	r3, r4, #3
    277c:	lsr	r2, r1, #3
    2780:	orr	r2, r2, r4, lsl #29
    2784:	mov	ip, #0
    2788:	mov	r1, #8
    278c:	str	r7, [sp, #8]
    2790:	str	ip, [sp, #4]
    2794:	str	r1, [sp]
    2798:	bl	0 <read_bytes>
    279c:	cmp	r0, #0
    27a0:	beq	2844 <coda_bin_cursor_read_uint64+0x258>
    27a4:	mvn	r0, #0
    27a8:	b	28a0 <coda_bin_cursor_read_uint64+0x2b4>
    27ac:	mov	r2, r7
    27b0:	cmp	r6, #0
    27b4:	bne	2800 <coda_bin_cursor_read_uint64+0x214>
    27b8:	mov	ip, #0
    27bc:	mov	r1, #8
    27c0:	ldr	r0, [sp, #48]	; 0x30
    27c4:	ldr	r2, [sp, #52]	; 0x34
    27c8:	asr	r3, r2, #3
    27cc:	lsr	r9, r0, #3
    27d0:	orr	r2, r9, r2, lsl #29
    27d4:	and	r0, r0, #7
    27d8:	cmp	r0, #0
    27dc:	movne	r0, #1
    27e0:	moveq	r0, #0
    27e4:	asr	r9, r0, #31
    27e8:	adds	lr, r2, r0
    27ec:	adc	r0, r3, r9
    27f0:	mov	r3, lr
    27f4:	subs	r1, r1, r3
    27f8:	sbc	ip, ip, r0
    27fc:	add	r2, r7, r1
    2800:	mov	r1, #0
    2804:	mov	r0, #0
    2808:	str	r0, [r7]
    280c:	str	r1, [r7, #4]
    2810:	ldr	r0, [r8]
    2814:	ldr	r3, [sp, #48]	; 0x30
    2818:	ldr	r1, [sp, #52]	; 0x34
    281c:	str	r2, [sp, #8]
    2820:	str	r1, [sp, #4]
    2824:	str	r3, [sp]
    2828:	mov	r3, r4
    282c:	mov	r2, r5
    2830:	bl	1f4 <read_bits>
    2834:	cmp	r0, #0
    2838:	beq	2844 <coda_bin_cursor_read_uint64+0x258>
    283c:	mvn	r0, #0
    2840:	b	28a0 <coda_bin_cursor_read_uint64+0x2b4>
    2844:	cmp	r6, #0
    2848:	bne	289c <coda_bin_cursor_read_uint64+0x2b0>
    284c:	ldrb	r0, [r7, #7]
    2850:	strb	r0, [sp, #56]	; 0x38
    2854:	ldrb	r3, [r7, #6]
    2858:	strb	r3, [sp, #57]	; 0x39
    285c:	ldrb	ip, [r7, #5]
    2860:	strb	ip, [sp, #58]	; 0x3a
    2864:	ldrb	r3, [r7, #4]
    2868:	strb	r3, [sp, #59]	; 0x3b
    286c:	ldrb	r2, [r7, #3]
    2870:	strb	r2, [sp, #60]	; 0x3c
    2874:	ldrb	r2, [r7, #2]
    2878:	strb	r2, [sp, #61]	; 0x3d
    287c:	ldrb	ip, [r7, #1]
    2880:	strb	ip, [sp, #62]	; 0x3e
    2884:	ldrb	r3, [r7]
    2888:	strb	r3, [sp, #63]	; 0x3f
    288c:	ldr	r3, [sp, #56]	; 0x38
    2890:	ldr	ip, [sp, #60]	; 0x3c
    2894:	str	r3, [r7]
    2898:	str	ip, [r7, #4]
    289c:	mov	r0, #0
    28a0:	ldr	r4, [sp, #24]
    28a4:	ldr	r5, [sp, #28]
    28a8:	ldr	r6, [sp, #32]
    28ac:	ldr	r7, [sp, #36]	; 0x24
    28b0:	ldr	r8, [sp, #40]	; 0x28
    28b4:	ldr	r9, [sp, #44]	; 0x2c
    28b8:	ldr	lr, [sp, #16]
    28bc:	add	sp, sp, #112	; 0x70
    28c0:	bx	lr
    28c4:	.word	0x0000022b

000028c8 <coda_bin_cursor_read_float>:
    28c8:	mov	ip, sp
    28cc:	sub	sp, sp, #48	; 0x30
    28d0:	str	ip, [sp, #12]
    28d4:	str	lr, [sp, #16]
    28d8:	str	r4, [sp, #24]
    28dc:	str	r5, [sp, #28]
    28e0:	str	r6, [sp, #32]
    28e4:	mov	r4, r1
    28e8:	ldr	r1, [r0, #4]
    28ec:	lsl	r2, r1, #4
    28f0:	add	ip, r0, r2
    28f4:	sub	lr, ip, #4096	; 0x1000
    28f8:	ldr	r3, [lr, #4088]	; 0xff8
    28fc:	ldr	r1, [r3]
    2900:	cmp	r1, #100	; 0x64
    2904:	blt	290c <coda_bin_cursor_read_float+0x44>
    2908:	ldr	r3, [r3, #4]
    290c:	ldr	ip, [r0, #4]
    2910:	lsl	ip, ip, #4
    2914:	add	r1, r0, ip
    2918:	ldr	r2, [r1]
    291c:	ldr	r1, [r1, #4]
    2920:	ldr	r5, [r3, #44]	; 0x2c
    2924:	mov	ip, #0
    2928:	mov	r6, r2
    292c:	and	r3, r6, #7
    2930:	orr	r3, ip, r3
    2934:	cmp	r3, #0
    2938:	bne	2974 <coda_bin_cursor_read_float+0xac>
    293c:	ldr	r0, [r0]
    2940:	asr	r3, r1, #3
    2944:	lsr	r2, r6, #3
    2948:	orr	r2, r2, r1, lsl #29
    294c:	mov	r1, #0
    2950:	mov	ip, #4
    2954:	str	r4, [sp, #8]
    2958:	str	r1, [sp, #4]
    295c:	str	ip, [sp]
    2960:	bl	0 <read_bytes>
    2964:	cmp	r0, #0
    2968:	beq	29a4 <coda_bin_cursor_read_float+0xdc>
    296c:	mvn	r0, #0
    2970:	b	29d8 <coda_bin_cursor_read_float+0x110>
    2974:	ldr	r0, [r0]
    2978:	mov	r3, #0
    297c:	mov	ip, #32
    2980:	str	r4, [sp, #8]
    2984:	str	r3, [sp, #4]
    2988:	str	ip, [sp]
    298c:	mov	r3, r1
    2990:	bl	1f4 <read_bits>
    2994:	cmp	r0, #0
    2998:	beq	29a4 <coda_bin_cursor_read_float+0xdc>
    299c:	mvn	r0, #0
    29a0:	b	29d8 <coda_bin_cursor_read_float+0x110>
    29a4:	cmp	r5, #0
    29a8:	bne	29d4 <coda_bin_cursor_read_float+0x10c>
    29ac:	ldrb	r1, [r4, #3]
    29b0:	strb	r1, [sp, #40]	; 0x28
    29b4:	ldrb	r1, [r4, #2]
    29b8:	strb	r1, [sp, #41]	; 0x29
    29bc:	ldrb	r3, [r4, #1]
    29c0:	strb	r3, [sp, #42]	; 0x2a
    29c4:	ldrb	r2, [r4]
    29c8:	strb	r2, [sp, #43]	; 0x2b
    29cc:	vldr	s6, [sp, #40]	; 0x28
    29d0:	vstr	s6, [r4]
    29d4:	mov	r0, #0
    29d8:	ldr	r4, [sp, #24]
    29dc:	ldr	r5, [sp, #28]
    29e0:	ldr	r6, [sp, #32]
    29e4:	ldr	lr, [sp, #16]
    29e8:	add	sp, sp, #48	; 0x30
    29ec:	bx	lr

000029f0 <coda_bin_cursor_read_double>:
    29f0:	mov	ip, sp
    29f4:	sub	sp, sp, #48	; 0x30
    29f8:	str	ip, [sp, #12]
    29fc:	str	lr, [sp, #16]
    2a00:	str	r4, [sp, #24]
    2a04:	str	r5, [sp, #28]
    2a08:	str	r6, [sp, #32]
    2a0c:	mov	r4, r1
    2a10:	ldr	r1, [r0, #4]
    2a14:	lsl	r2, r1, #4
    2a18:	add	r1, r0, r2
    2a1c:	sub	lr, r1, #4096	; 0x1000
    2a20:	ldr	ip, [lr, #4088]	; 0xff8
    2a24:	ldr	r3, [ip]
    2a28:	cmp	r3, #100	; 0x64
    2a2c:	blt	2a34 <coda_bin_cursor_read_double+0x44>
    2a30:	ldr	ip, [ip, #4]
    2a34:	ldr	r1, [r0, #4]
    2a38:	lsl	r1, r1, #4
    2a3c:	add	r3, r0, r1
    2a40:	ldr	r2, [r3]
    2a44:	ldr	r1, [r3, #4]
    2a48:	ldr	r5, [ip, #44]	; 0x2c
    2a4c:	mov	r3, #0
    2a50:	mov	r6, r2
    2a54:	and	ip, r6, #7
    2a58:	orr	ip, r3, ip
    2a5c:	cmp	ip, #0
    2a60:	bne	2a9c <coda_bin_cursor_read_double+0xac>
    2a64:	ldr	r0, [r0]
    2a68:	asr	r3, r1, #3
    2a6c:	lsr	r2, r6, #3
    2a70:	orr	r2, r2, r1, lsl #29
    2a74:	mov	ip, #0
    2a78:	mov	r1, #8
    2a7c:	str	r4, [sp, #8]
    2a80:	str	ip, [sp, #4]
    2a84:	str	r1, [sp]
    2a88:	bl	0 <read_bytes>
    2a8c:	cmp	r0, #0
    2a90:	beq	2acc <coda_bin_cursor_read_double+0xdc>
    2a94:	mvn	r0, #0
    2a98:	b	2b20 <coda_bin_cursor_read_double+0x130>
    2a9c:	ldr	r0, [r0]
    2aa0:	mov	ip, #0
    2aa4:	mov	r3, #64	; 0x40
    2aa8:	str	r4, [sp, #8]
    2aac:	str	ip, [sp, #4]
    2ab0:	str	r3, [sp]
    2ab4:	mov	r3, r1
    2ab8:	bl	1f4 <read_bits>
    2abc:	cmp	r0, #0
    2ac0:	beq	2acc <coda_bin_cursor_read_double+0xdc>
    2ac4:	mvn	r0, #0
    2ac8:	b	2b20 <coda_bin_cursor_read_double+0x130>
    2acc:	cmp	r5, #0
    2ad0:	bne	2b1c <coda_bin_cursor_read_double+0x12c>
    2ad4:	ldrb	ip, [r4, #7]
    2ad8:	strb	ip, [sp, #40]	; 0x28
    2adc:	ldrb	r3, [r4, #6]
    2ae0:	strb	r3, [sp, #41]	; 0x29
    2ae4:	ldrb	r3, [r4, #5]
    2ae8:	strb	r3, [sp, #42]	; 0x2a
    2aec:	ldrb	r2, [r4, #4]
    2af0:	strb	r2, [sp, #43]	; 0x2b
    2af4:	ldrb	r0, [r4, #3]
    2af8:	strb	r0, [sp, #44]	; 0x2c
    2afc:	ldrb	r1, [r4, #2]
    2b00:	strb	r1, [sp, #45]	; 0x2d
    2b04:	ldrb	r2, [r4, #1]
    2b08:	strb	r2, [sp, #46]	; 0x2e
    2b0c:	ldrb	r3, [r4]
    2b10:	strb	r3, [sp, #47]	; 0x2f
    2b14:	vldr	d3, [sp, #40]	; 0x28
    2b18:	vstr	d3, [r4]
    2b1c:	mov	r0, #0
    2b20:	ldr	r4, [sp, #24]
    2b24:	ldr	r5, [sp, #28]
    2b28:	ldr	r6, [sp, #32]
    2b2c:	ldr	lr, [sp, #16]
    2b30:	add	sp, sp, #48	; 0x30
    2b34:	bx	lr

00002b38 <coda_bin_cursor_read_char>:
    2b38:	mov	ip, sp
    2b3c:	sub	sp, sp, #8
    2b40:	str	ip, [sp]
    2b44:	str	lr, [sp, #4]
    2b48:	ldr	lr, [sp, #4]
    2b4c:	add	sp, sp, #8
    2b50:	b	148c <coda_bin_cursor_read_uint8>

00002b54 <coda_bin_cursor_read_string>:
    2b54:	mov	ip, sp
    2b58:	sub	sp, sp, #104	; 0x68
    2b5c:	str	ip, [sp, #12]
    2b60:	str	lr, [sp, #16]
    2b64:	str	r4, [sp, #24]
    2b68:	str	r5, [sp, #28]
    2b6c:	str	r6, [sp, #32]
    2b70:	str	r7, [sp, #36]	; 0x24
    2b74:	str	r8, [sp, #40]	; 0x28
    2b78:	str	r9, [sp, #44]	; 0x2c
    2b7c:	mov	r8, r2
    2b80:	mov	r6, r1
    2b84:	mov	r5, r0
    2b88:	ldr	r2, [r5, #4]
    2b8c:	lsl	r3, r2, #4
    2b90:	add	r0, r5, r3
    2b94:	sub	lr, r0, #4096	; 0x1000
    2b98:	ldr	r0, [lr, #4088]	; 0xff8
    2b9c:	ldr	r1, [r0]
    2ba0:	cmp	r1, #100	; 0x64
    2ba4:	blt	2bac <coda_bin_cursor_read_string+0x58>
    2ba8:	ldr	r0, [r0, #4]
    2bac:	ldr	r3, [r5, #4]
    2bb0:	lsl	r1, r3, #4
    2bb4:	add	r3, r5, r1
    2bb8:	ldr	r4, [r3]
    2bbc:	ldr	r7, [r3, #4]
    2bc0:	ldr	r3, [r0, #24]
    2bc4:	ldr	r0, [r0, #28]
    2bc8:	cmp	r0, #0
    2bcc:	bge	2ca0 <coda_bin_cursor_read_string+0x14c>
    2bd0:	add	r1, sp, #48	; 0x30
    2bd4:	mov	r0, r5
    2bd8:	bl	eec <coda_bin_cursor_get_bit_size>
    2bdc:	cmp	r0, #0
    2be0:	beq	2bec <coda_bin_cursor_read_string+0x98>
    2be4:	mvn	r0, #0
    2be8:	b	2d60 <coda_bin_cursor_read_string+0x20c>
    2bec:	ldr	r0, [sp, #48]	; 0x30
    2bf0:	ldr	r1, [sp, #52]	; 0x34
    2bf4:	cmp	r1, #0
    2bf8:	bge	2c64 <coda_bin_cursor_read_string+0x110>
    2bfc:	add	r2, sp, #80	; 0x50
    2c00:	bl	0 <coda_str64>
    2c04:	ldr	ip, [r5, #4]
    2c08:	lsl	r0, ip, #4
    2c0c:	add	r2, r5, r0
    2c10:	ldr	ip, [r2]
    2c14:	ldr	r2, [r2, #4]
    2c18:	asr	r1, r2, #3
    2c1c:	lsr	ip, ip, #3
    2c20:	orr	r0, ip, r2, lsl #29
    2c24:	add	r2, sp, #56	; 0x38
    2c28:	bl	0 <coda_str64>
    2c2c:	movw	r0, #65236	; 0xfed4
    2c30:	movt	r0, #65535	; 0xffff
    2c34:	ldr	r1, [pc, #332]	; 2d88 <coda_bin_cursor_read_string+0x234>
    2c38:	add	r2, sp, #80	; 0x50
    2c3c:	add	r3, sp, #56	; 0x38
    2c40:	ldr	ip, [r5, #4]
    2c44:	lsl	ip, ip, #4
    2c48:	add	ip, r5, ip
    2c4c:	ldr	ip, [ip]
    2c50:	and	ip, ip, #7
    2c54:	str	ip, [sp]
    2c58:	bl	0 <coda_set_error>
    2c5c:	mvn	r0, #0
    2c60:	b	2d60 <coda_bin_cursor_read_string+0x20c>
    2c64:	mov	r2, #0
    2c68:	and	r3, r0, #7
    2c6c:	orr	ip, r2, r3
    2c70:	cmp	ip, #0
    2c74:	beq	2c90 <coda_bin_cursor_read_string+0x13c>
    2c78:	movw	r0, #65236	; 0xfed4
    2c7c:	movt	r0, #65535	; 0xffff
    2c80:	ldr	r1, [pc, #252]	; 2d84 <coda_bin_cursor_read_string+0x230>
    2c84:	bl	0 <coda_set_error>
    2c88:	mvn	r0, #0
    2c8c:	b	2d60 <coda_bin_cursor_read_string+0x20c>
    2c90:	asr	ip, r1, #3
    2c94:	lsr	r0, r0, #3
    2c98:	orr	r9, r0, r1, lsl #29
    2c9c:	b	2cac <coda_bin_cursor_read_string+0x158>
    2ca0:	asr	ip, r0, #3
    2ca4:	lsr	r1, r3, #3
    2ca8:	orr	r9, r1, r0, lsl #29
    2cac:	mov	r2, #0
    2cb0:	mov	r1, #1
    2cb4:	adds	r0, r9, r1
    2cb8:	adc	r2, ip, r2
    2cbc:	mov	r3, r8
    2cc0:	asr	r1, r3, #31
    2cc4:	cmp	r2, r1
    2cc8:	bne	2cd8 <coda_bin_cursor_read_string+0x184>
    2ccc:	cmp	r0, r3
    2cd0:	bhi	2ce0 <coda_bin_cursor_read_string+0x18c>
    2cd4:	b	2ce8 <coda_bin_cursor_read_string+0x194>
    2cd8:	cmp	r2, r1
    2cdc:	ble	2ce8 <coda_bin_cursor_read_string+0x194>
    2ce0:	sub	r9, r8, #1
    2ce4:	asr	ip, r9, #31
    2ce8:	mov	r0, ip
    2cec:	cmp	r0, #0
    2cf0:	bne	2d04 <coda_bin_cursor_read_string+0x1b0>
    2cf4:	mov	r3, r9
    2cf8:	cmp	r3, #0
    2cfc:	bhi	2d0c <coda_bin_cursor_read_string+0x1b8>
    2d00:	b	2d54 <coda_bin_cursor_read_string+0x200>
    2d04:	cmp	r0, #0
    2d08:	ble	2d54 <coda_bin_cursor_read_string+0x200>
    2d0c:	ldr	r0, [r5]
    2d10:	mov	r1, r9
    2d14:	lsl	r2, ip, #3
    2d18:	orr	r2, r2, r1, lsr #29
    2d1c:	lsl	ip, r1, #3
    2d20:	str	r6, [sp, #8]
    2d24:	str	r2, [sp, #4]
    2d28:	str	ip, [sp]
    2d2c:	mov	r3, r7
    2d30:	mov	r2, r4
    2d34:	bl	1f4 <read_bits>
    2d38:	cmp	r0, #0
    2d3c:	beq	2d48 <coda_bin_cursor_read_string+0x1f4>
    2d40:	mvn	r0, #0
    2d44:	b	2d60 <coda_bin_cursor_read_string+0x20c>
    2d48:	mov	r1, #0
    2d4c:	strb	r1, [r6, r9]
    2d50:	b	2d5c <coda_bin_cursor_read_string+0x208>
    2d54:	mov	r1, #0
    2d58:	strb	r1, [r6]
    2d5c:	mov	r0, #0
    2d60:	ldr	r4, [sp, #24]
    2d64:	ldr	r5, [sp, #28]
    2d68:	ldr	r6, [sp, #32]
    2d6c:	ldr	r7, [sp, #36]	; 0x24
    2d70:	ldr	r8, [sp, #40]	; 0x28
    2d74:	ldr	r9, [sp, #44]	; 0x2c
    2d78:	ldr	lr, [sp, #16]
    2d7c:	add	sp, sp, #104	; 0x68
    2d80:	bx	lr
    2d84:	.word	0x00000341
    2d88:	.word	0x00000168

00002d8c <coda_bin_cursor_read_bits>:
    2d8c:	mov	ip, sp
    2d90:	sub	sp, sp, #40	; 0x28
    2d94:	str	ip, [sp, #12]
    2d98:	str	lr, [sp, #16]
    2d9c:	str	r4, [sp, #24]
    2da0:	str	r5, [sp, #28]
    2da4:	str	r6, [sp, #32]
    2da8:	ldr	r6, [ip, #4]
    2dac:	ldr	r5, [ip]
    2db0:	mov	r4, r0
    2db4:	ldr	r0, [r4]
    2db8:	ldr	ip, [r4, #4]
    2dbc:	lsl	ip, ip, #4
    2dc0:	add	ip, r4, ip
    2dc4:	ldr	r4, [ip]
    2dc8:	ldr	ip, [ip, #4]
    2dcc:	adds	r2, r4, r2
    2dd0:	adc	r3, ip, r3
    2dd4:	str	r1, [sp, #8]
    2dd8:	str	r6, [sp, #4]
    2ddc:	str	r5, [sp]
    2de0:	bl	1f4 <read_bits>
    2de4:	ldr	r4, [sp, #24]
    2de8:	ldr	r5, [sp, #28]
    2dec:	ldr	r6, [sp, #32]
    2df0:	ldr	lr, [sp, #16]
    2df4:	add	sp, sp, #40	; 0x28
    2df8:	bx	lr

00002dfc <coda_bin_cursor_read_bytes>:
    2dfc:	mov	ip, sp
    2e00:	sub	sp, sp, #48	; 0x30
    2e04:	str	ip, [sp, #12]
    2e08:	str	lr, [sp, #16]
    2e0c:	str	r4, [sp, #24]
    2e10:	str	r5, [sp, #28]
    2e14:	str	r6, [sp, #32]
    2e18:	str	r7, [sp, #36]	; 0x24
    2e1c:	str	r8, [sp, #40]	; 0x28
    2e20:	ldr	r4, [ip, #4]
    2e24:	ldr	r5, [ip]
    2e28:	ldr	ip, [r0, #4]
    2e2c:	lsl	ip, ip, #4
    2e30:	add	ip, r0, ip
    2e34:	ldr	r7, [ip]
    2e38:	ldr	r6, [ip, #4]
    2e3c:	mov	r8, #0
    2e40:	and	ip, r7, #7
    2e44:	orr	ip, r8, ip
    2e48:	cmp	ip, #0
    2e4c:	beq	2e78 <coda_bin_cursor_read_bytes+0x7c>
    2e50:	lsl	ip, r3, #3
    2e54:	orr	r3, ip, r2, lsr #29
    2e58:	lsl	r2, r2, #3
    2e5c:	lsl	ip, r4, #3
    2e60:	orr	r4, ip, r5, lsr #29
    2e64:	lsl	ip, r5, #3
    2e68:	str	r4, [sp, #4]
    2e6c:	str	ip, [sp]
    2e70:	bl	2d8c <coda_bin_cursor_read_bits>
    2e74:	b	2ea0 <coda_bin_cursor_read_bytes+0xa4>
    2e78:	ldr	r0, [r0]
    2e7c:	asr	r8, r6, #3
    2e80:	lsr	ip, r7, #3
    2e84:	orr	ip, ip, r6, lsl #29
    2e88:	adds	r2, ip, r2
    2e8c:	adc	r3, r8, r3
    2e90:	str	r1, [sp, #8]
    2e94:	str	r4, [sp, #4]
    2e98:	str	r5, [sp]
    2e9c:	bl	0 <read_bytes>
    2ea0:	ldr	r4, [sp, #24]
    2ea4:	ldr	r5, [sp, #28]
    2ea8:	ldr	r6, [sp, #32]
    2eac:	ldr	r7, [sp, #36]	; 0x24
    2eb0:	ldr	r8, [sp, #40]	; 0x28
    2eb4:	ldr	lr, [sp, #16]
    2eb8:	add	sp, sp, #48	; 0x30
    2ebc:	bx	lr

00002ec0 <coda_bin_cursor_read_int8_array>:
    2ec0:	mov	ip, sp
    2ec4:	sub	sp, sp, #32
    2ec8:	str	ip, [sp, #4]
    2ecc:	str	lr, [sp, #8]
    2ed0:	str	r4, [sp, #16]
    2ed4:	str	r5, [sp, #20]
    2ed8:	str	r6, [sp, #24]
    2edc:	mov	r6, r2
    2ee0:	mov	r4, r1
    2ee4:	mov	r5, r0
    2ee8:	ldr	ip, [r5, #4]
    2eec:	lsl	r1, ip, #4
    2ef0:	add	r0, r5, r1
    2ef4:	sub	lr, r0, #4096	; 0x1000
    2ef8:	ldr	r1, [lr, #4088]	; 0xff8
    2efc:	ldr	ip, [r1]
    2f00:	cmp	ip, #100	; 0x64
    2f04:	blt	2f0c <coda_bin_cursor_read_int8_array+0x4c>
    2f08:	ldr	r1, [r1, #4]
    2f0c:	ldr	r2, [r1, #40]	; 0x28
    2f10:	ldr	r0, [r2]
    2f14:	cmp	r0, #1
    2f18:	bne	2f38 <coda_bin_cursor_read_int8_array+0x78>
    2f1c:	ldr	r1, [pc, #160]	; 2fc4 <coda_bin_cursor_read_int8_array+0x104>
    2f20:	mov	r3, #1
    2f24:	str	r6, [sp]
    2f28:	mov	r2, r4
    2f2c:	mov	r0, r5
    2f30:	bl	6c0 <read_array>
    2f34:	b	2fac <coda_bin_cursor_read_int8_array+0xec>
    2f38:	cmp	r0, #0
    2f3c:	beq	2f54 <coda_bin_cursor_read_int8_array+0x94>
    2f40:	ldr	r0, [pc, #128]	; 2fc8 <coda_bin_cursor_read_int8_array+0x108>
    2f44:	ldr	r1, [pc, #132]	; 2fd0 <coda_bin_cursor_read_int8_array+0x110>
    2f48:	movw	r2, #906	; 0x38a
    2f4c:	ldr	r3, [pc, #120]	; 2fcc <coda_bin_cursor_read_int8_array+0x10c>
    2f50:	bl	0 <__assert_fail>
    2f54:	ldr	r1, [pc, #120]	; 2fd4 <coda_bin_cursor_read_int8_array+0x114>
    2f58:	mov	r3, #1
    2f5c:	mov	ip, #0
    2f60:	str	ip, [sp]
    2f64:	mov	r2, r4
    2f68:	mov	r0, r5
    2f6c:	bl	6c0 <read_array>
    2f70:	cmp	r0, #0
    2f74:	beq	2f80 <coda_bin_cursor_read_int8_array+0xc0>
    2f78:	mvn	r0, #0
    2f7c:	b	2fac <coda_bin_cursor_read_int8_array+0xec>
    2f80:	cmp	r6, #0
    2f84:	beq	2fa8 <coda_bin_cursor_read_int8_array+0xe8>
    2f88:	mov	r2, #1
    2f8c:	mov	r1, r4
    2f90:	mov	r0, r5
    2f94:	bl	a60 <transpose_array>
    2f98:	cmp	r0, #0
    2f9c:	beq	2fa8 <coda_bin_cursor_read_int8_array+0xe8>
    2fa0:	mvn	r0, #0
    2fa4:	b	2fac <coda_bin_cursor_read_int8_array+0xec>
    2fa8:	mov	r0, #0
    2fac:	ldr	r4, [sp, #16]
    2fb0:	ldr	r5, [sp, #20]
    2fb4:	ldr	r6, [sp, #24]
    2fb8:	ldr	lr, [sp, #8]
    2fbc:	add	sp, sp, #32
    2fc0:	bx	lr
    2fc4:	.word	0x00000000
    2fc8:	.word	0x000002b5
    2fcc:	.word	0x00000706
    2fd0:	.word	0x000001cc
    2fd4:	.word	0x00000000

00002fd8 <coda_bin_cursor_read_uint8_array>:
    2fd8:	mov	ip, sp
    2fdc:	sub	sp, sp, #32
    2fe0:	str	ip, [sp, #4]
    2fe4:	str	lr, [sp, #8]
    2fe8:	str	r4, [sp, #16]
    2fec:	str	r5, [sp, #20]
    2ff0:	str	r6, [sp, #24]
    2ff4:	mov	r6, r2
    2ff8:	mov	r4, r1
    2ffc:	mov	r5, r0
    3000:	ldr	ip, [r5, #4]
    3004:	lsl	r1, ip, #4
    3008:	add	r0, r5, r1
    300c:	sub	lr, r0, #4096	; 0x1000
    3010:	ldr	r1, [lr, #4088]	; 0xff8
    3014:	ldr	ip, [r1]
    3018:	cmp	ip, #100	; 0x64
    301c:	blt	3024 <coda_bin_cursor_read_uint8_array+0x4c>
    3020:	ldr	r1, [r1, #4]
    3024:	ldr	r2, [r1, #40]	; 0x28
    3028:	ldr	r0, [r2]
    302c:	cmp	r0, #1
    3030:	bne	3050 <coda_bin_cursor_read_uint8_array+0x78>
    3034:	ldr	r1, [pc, #164]	; 30e0 <coda_bin_cursor_read_uint8_array+0x108>
    3038:	mov	r3, #1
    303c:	str	r6, [sp]
    3040:	mov	r2, r4
    3044:	mov	r0, r5
    3048:	bl	6c0 <read_array>
    304c:	b	30c4 <coda_bin_cursor_read_uint8_array+0xec>
    3050:	cmp	r0, #0
    3054:	beq	306c <coda_bin_cursor_read_uint8_array+0x94>
    3058:	ldr	r0, [pc, #124]	; 30dc <coda_bin_cursor_read_uint8_array+0x104>
    305c:	ldr	r1, [pc, #128]	; 30e4 <coda_bin_cursor_read_uint8_array+0x10c>
    3060:	mov	r2, #932	; 0x3a4
    3064:	ldr	r3, [pc, #128]	; 30ec <coda_bin_cursor_read_uint8_array+0x114>
    3068:	bl	0 <__assert_fail>
    306c:	ldr	r1, [pc, #116]	; 30e8 <coda_bin_cursor_read_uint8_array+0x110>
    3070:	mov	r3, #1
    3074:	mov	ip, #0
    3078:	str	ip, [sp]
    307c:	mov	r2, r4
    3080:	mov	r0, r5
    3084:	bl	6c0 <read_array>
    3088:	cmp	r0, #0
    308c:	beq	3098 <coda_bin_cursor_read_uint8_array+0xc0>
    3090:	mvn	r0, #0
    3094:	b	30c4 <coda_bin_cursor_read_uint8_array+0xec>
    3098:	cmp	r6, #0
    309c:	beq	30c0 <coda_bin_cursor_read_uint8_array+0xe8>
    30a0:	mov	r2, #1
    30a4:	mov	r1, r4
    30a8:	mov	r0, r5
    30ac:	bl	a60 <transpose_array>
    30b0:	cmp	r0, #0
    30b4:	beq	30c0 <coda_bin_cursor_read_uint8_array+0xe8>
    30b8:	mvn	r0, #0
    30bc:	b	30c4 <coda_bin_cursor_read_uint8_array+0xec>
    30c0:	mov	r0, #0
    30c4:	ldr	r4, [sp, #16]
    30c8:	ldr	r5, [sp, #20]
    30cc:	ldr	r6, [sp, #24]
    30d0:	ldr	lr, [sp, #8]
    30d4:	add	sp, sp, #32
    30d8:	bx	lr
    30dc:	.word	0x000002b5
    30e0:	.word	0x00000000
    30e4:	.word	0x000001cc
    30e8:	.word	0x00000000
    30ec:	.word	0x00000726

000030f0 <coda_bin_cursor_read_int16_array>:
    30f0:	mov	ip, sp
    30f4:	sub	sp, sp, #32
    30f8:	str	ip, [sp, #4]
    30fc:	str	lr, [sp, #8]
    3100:	str	r4, [sp, #16]
    3104:	str	r5, [sp, #20]
    3108:	str	r6, [sp, #24]
    310c:	mov	r6, r2
    3110:	mov	r4, r1
    3114:	mov	r5, r0
    3118:	ldr	ip, [r5, #4]
    311c:	lsl	r1, ip, #4
    3120:	add	r0, r5, r1
    3124:	sub	lr, r0, #4096	; 0x1000
    3128:	ldr	r1, [lr, #4088]	; 0xff8
    312c:	ldr	ip, [r1]
    3130:	cmp	ip, #100	; 0x64
    3134:	blt	313c <coda_bin_cursor_read_int16_array+0x4c>
    3138:	ldr	r1, [r1, #4]
    313c:	ldr	r2, [r1, #40]	; 0x28
    3140:	ldr	r0, [r2]
    3144:	cmp	r0, #1
    3148:	bne	3168 <coda_bin_cursor_read_int16_array+0x78>
    314c:	ldr	r1, [pc, #176]	; 3204 <coda_bin_cursor_read_int16_array+0x114>
    3150:	mov	r3, #2
    3154:	str	r6, [sp]
    3158:	mov	r2, r4
    315c:	mov	r0, r5
    3160:	bl	6c0 <read_array>
    3164:	b	31dc <coda_bin_cursor_read_int16_array+0xec>
    3168:	cmp	r0, #0
    316c:	beq	3184 <coda_bin_cursor_read_int16_array+0x94>
    3170:	ldr	r0, [pc, #124]	; 31f4 <coda_bin_cursor_read_int16_array+0x104>
    3174:	ldr	r1, [pc, #128]	; 31fc <coda_bin_cursor_read_int16_array+0x10c>
    3178:	movw	r2, #958	; 0x3be
    317c:	ldr	r3, [pc, #124]	; 3200 <coda_bin_cursor_read_int16_array+0x110>
    3180:	bl	0 <__assert_fail>
    3184:	ldr	r1, [pc, #108]	; 31f8 <coda_bin_cursor_read_int16_array+0x108>
    3188:	mov	r3, #2
    318c:	mov	ip, #0
    3190:	str	ip, [sp]
    3194:	mov	r2, r4
    3198:	mov	r0, r5
    319c:	bl	6c0 <read_array>
    31a0:	cmp	r0, #0
    31a4:	beq	31b0 <coda_bin_cursor_read_int16_array+0xc0>
    31a8:	mvn	r0, #0
    31ac:	b	31dc <coda_bin_cursor_read_int16_array+0xec>
    31b0:	cmp	r6, #0
    31b4:	beq	31d8 <coda_bin_cursor_read_int16_array+0xe8>
    31b8:	mov	r2, #2
    31bc:	mov	r1, r4
    31c0:	mov	r0, r5
    31c4:	bl	a60 <transpose_array>
    31c8:	cmp	r0, #0
    31cc:	beq	31d8 <coda_bin_cursor_read_int16_array+0xe8>
    31d0:	mvn	r0, #0
    31d4:	b	31dc <coda_bin_cursor_read_int16_array+0xec>
    31d8:	mov	r0, #0
    31dc:	ldr	r4, [sp, #16]
    31e0:	ldr	r5, [sp, #20]
    31e4:	ldr	r6, [sp, #24]
    31e8:	ldr	lr, [sp, #8]
    31ec:	add	sp, sp, #32
    31f0:	bx	lr
    31f4:	.word	0x000002b5
    31f8:	.word	0x00000000
    31fc:	.word	0x000001cc
    3200:	.word	0x00000747
    3204:	.word	0x00000000

00003208 <coda_bin_cursor_read_uint16_array>:
    3208:	mov	ip, sp
    320c:	sub	sp, sp, #32
    3210:	str	ip, [sp, #4]
    3214:	str	lr, [sp, #8]
    3218:	str	r4, [sp, #16]
    321c:	str	r5, [sp, #20]
    3220:	str	r6, [sp, #24]
    3224:	mov	r6, r2
    3228:	mov	r4, r1
    322c:	mov	r5, r0
    3230:	ldr	ip, [r5, #4]
    3234:	lsl	r1, ip, #4
    3238:	add	r0, r5, r1
    323c:	sub	lr, r0, #4096	; 0x1000
    3240:	ldr	r1, [lr, #4088]	; 0xff8
    3244:	ldr	ip, [r1]
    3248:	cmp	ip, #100	; 0x64
    324c:	blt	3254 <coda_bin_cursor_read_uint16_array+0x4c>
    3250:	ldr	r1, [r1, #4]
    3254:	ldr	r2, [r1, #40]	; 0x28
    3258:	ldr	r0, [r2]
    325c:	cmp	r0, #1
    3260:	bne	3280 <coda_bin_cursor_read_uint16_array+0x78>
    3264:	ldr	r1, [pc, #176]	; 331c <coda_bin_cursor_read_uint16_array+0x114>
    3268:	mov	r3, #2
    326c:	str	r6, [sp]
    3270:	mov	r2, r4
    3274:	mov	r0, r5
    3278:	bl	6c0 <read_array>
    327c:	b	32f4 <coda_bin_cursor_read_uint16_array+0xec>
    3280:	cmp	r0, #0
    3284:	beq	329c <coda_bin_cursor_read_uint16_array+0x94>
    3288:	ldr	r0, [pc, #128]	; 3310 <coda_bin_cursor_read_uint16_array+0x108>
    328c:	ldr	r1, [pc, #132]	; 3318 <coda_bin_cursor_read_uint16_array+0x110>
    3290:	mov	r2, #984	; 0x3d8
    3294:	ldr	r3, [pc, #112]	; 330c <coda_bin_cursor_read_uint16_array+0x104>
    3298:	bl	0 <__assert_fail>
    329c:	ldr	r1, [pc, #112]	; 3314 <coda_bin_cursor_read_uint16_array+0x10c>
    32a0:	mov	r3, #2
    32a4:	mov	ip, #0
    32a8:	str	ip, [sp]
    32ac:	mov	r2, r4
    32b0:	mov	r0, r5
    32b4:	bl	6c0 <read_array>
    32b8:	cmp	r0, #0
    32bc:	beq	32c8 <coda_bin_cursor_read_uint16_array+0xc0>
    32c0:	mvn	r0, #0
    32c4:	b	32f4 <coda_bin_cursor_read_uint16_array+0xec>
    32c8:	cmp	r6, #0
    32cc:	beq	32f0 <coda_bin_cursor_read_uint16_array+0xe8>
    32d0:	mov	r2, #2
    32d4:	mov	r1, r4
    32d8:	mov	r0, r5
    32dc:	bl	a60 <transpose_array>
    32e0:	cmp	r0, #0
    32e4:	beq	32f0 <coda_bin_cursor_read_uint16_array+0xe8>
    32e8:	mvn	r0, #0
    32ec:	b	32f4 <coda_bin_cursor_read_uint16_array+0xec>
    32f0:	mov	r0, #0
    32f4:	ldr	r4, [sp, #16]
    32f8:	ldr	r5, [sp, #20]
    32fc:	ldr	r6, [sp, #24]
    3300:	ldr	lr, [sp, #8]
    3304:	add	sp, sp, #32
    3308:	bx	lr
    330c:	.word	0x00000768
    3310:	.word	0x000002b5
    3314:	.word	0x00000000
    3318:	.word	0x000001cc
    331c:	.word	0x00000000

00003320 <coda_bin_cursor_read_int32_array>:
    3320:	mov	ip, sp
    3324:	sub	sp, sp, #32
    3328:	str	ip, [sp, #4]
    332c:	str	lr, [sp, #8]
    3330:	str	r4, [sp, #16]
    3334:	str	r5, [sp, #20]
    3338:	str	r6, [sp, #24]
    333c:	mov	r6, r2
    3340:	mov	r4, r1
    3344:	mov	r5, r0
    3348:	ldr	ip, [r5, #4]
    334c:	lsl	r1, ip, #4
    3350:	add	r0, r5, r1
    3354:	sub	lr, r0, #4096	; 0x1000
    3358:	ldr	r1, [lr, #4088]	; 0xff8
    335c:	ldr	ip, [r1]
    3360:	cmp	ip, #100	; 0x64
    3364:	blt	336c <coda_bin_cursor_read_int32_array+0x4c>
    3368:	ldr	r1, [r1, #4]
    336c:	ldr	r2, [r1, #40]	; 0x28
    3370:	ldr	r0, [r2]
    3374:	cmp	r0, #1
    3378:	bne	3398 <coda_bin_cursor_read_int32_array+0x78>
    337c:	ldr	r1, [pc, #164]	; 3428 <coda_bin_cursor_read_int32_array+0x108>
    3380:	mov	r3, #4
    3384:	str	r6, [sp]
    3388:	mov	r2, r4
    338c:	mov	r0, r5
    3390:	bl	6c0 <read_array>
    3394:	b	340c <coda_bin_cursor_read_int32_array+0xec>
    3398:	cmp	r0, #0
    339c:	beq	33b4 <coda_bin_cursor_read_int32_array+0x94>
    33a0:	ldr	r0, [pc, #132]	; 342c <coda_bin_cursor_read_int32_array+0x10c>
    33a4:	ldr	r1, [pc, #132]	; 3430 <coda_bin_cursor_read_int32_array+0x110>
    33a8:	movw	r2, #1010	; 0x3f2
    33ac:	ldr	r3, [pc, #128]	; 3434 <coda_bin_cursor_read_int32_array+0x114>
    33b0:	bl	0 <__assert_fail>
    33b4:	ldr	r1, [pc, #104]	; 3424 <coda_bin_cursor_read_int32_array+0x104>
    33b8:	mov	r3, #4
    33bc:	mov	ip, #0
    33c0:	str	ip, [sp]
    33c4:	mov	r2, r4
    33c8:	mov	r0, r5
    33cc:	bl	6c0 <read_array>
    33d0:	cmp	r0, #0
    33d4:	beq	33e0 <coda_bin_cursor_read_int32_array+0xc0>
    33d8:	mvn	r0, #0
    33dc:	b	340c <coda_bin_cursor_read_int32_array+0xec>
    33e0:	cmp	r6, #0
    33e4:	beq	3408 <coda_bin_cursor_read_int32_array+0xe8>
    33e8:	mov	r2, #4
    33ec:	mov	r1, r4
    33f0:	mov	r0, r5
    33f4:	bl	a60 <transpose_array>
    33f8:	cmp	r0, #0
    33fc:	beq	3408 <coda_bin_cursor_read_int32_array+0xe8>
    3400:	mvn	r0, #0
    3404:	b	340c <coda_bin_cursor_read_int32_array+0xec>
    3408:	mov	r0, #0
    340c:	ldr	r4, [sp, #16]
    3410:	ldr	r5, [sp, #20]
    3414:	ldr	r6, [sp, #24]
    3418:	ldr	lr, [sp, #8]
    341c:	add	sp, sp, #32
    3420:	bx	lr
	...
    342c:	.word	0x000002b5
    3430:	.word	0x000001cc
    3434:	.word	0x0000078a

00003438 <coda_bin_cursor_read_uint32_array>:
    3438:	mov	ip, sp
    343c:	sub	sp, sp, #32
    3440:	str	ip, [sp, #4]
    3444:	str	lr, [sp, #8]
    3448:	str	r4, [sp, #16]
    344c:	str	r5, [sp, #20]
    3450:	str	r6, [sp, #24]
    3454:	mov	r6, r2
    3458:	mov	r4, r1
    345c:	mov	r5, r0
    3460:	ldr	ip, [r5, #4]
    3464:	lsl	r1, ip, #4
    3468:	add	r0, r5, r1
    346c:	sub	lr, r0, #4096	; 0x1000
    3470:	ldr	r1, [lr, #4088]	; 0xff8
    3474:	ldr	ip, [r1]
    3478:	cmp	ip, #100	; 0x64
    347c:	blt	3484 <coda_bin_cursor_read_uint32_array+0x4c>
    3480:	ldr	r1, [r1, #4]
    3484:	ldr	r2, [r1, #40]	; 0x28
    3488:	ldr	r0, [r2]
    348c:	cmp	r0, #1
    3490:	bne	34b0 <coda_bin_cursor_read_uint32_array+0x78>
    3494:	ldr	r1, [pc, #176]	; 354c <coda_bin_cursor_read_uint32_array+0x114>
    3498:	mov	r3, #4
    349c:	str	r6, [sp]
    34a0:	mov	r2, r4
    34a4:	mov	r0, r5
    34a8:	bl	6c0 <read_array>
    34ac:	b	3524 <coda_bin_cursor_read_uint32_array+0xec>
    34b0:	cmp	r0, #0
    34b4:	beq	34cc <coda_bin_cursor_read_uint32_array+0x94>
    34b8:	ldr	r0, [pc, #128]	; 3540 <coda_bin_cursor_read_uint32_array+0x108>
    34bc:	ldr	r1, [pc, #132]	; 3548 <coda_bin_cursor_read_uint32_array+0x110>
    34c0:	movw	r2, #1036	; 0x40c
    34c4:	ldr	r3, [pc, #112]	; 353c <coda_bin_cursor_read_uint32_array+0x104>
    34c8:	bl	0 <__assert_fail>
    34cc:	ldr	r1, [pc, #112]	; 3544 <coda_bin_cursor_read_uint32_array+0x10c>
    34d0:	mov	r3, #4
    34d4:	mov	ip, #0
    34d8:	str	ip, [sp]
    34dc:	mov	r2, r4
    34e0:	mov	r0, r5
    34e4:	bl	6c0 <read_array>
    34e8:	cmp	r0, #0
    34ec:	beq	34f8 <coda_bin_cursor_read_uint32_array+0xc0>
    34f0:	mvn	r0, #0
    34f4:	b	3524 <coda_bin_cursor_read_uint32_array+0xec>
    34f8:	cmp	r6, #0
    34fc:	beq	3520 <coda_bin_cursor_read_uint32_array+0xe8>
    3500:	mov	r2, #4
    3504:	mov	r1, r4
    3508:	mov	r0, r5
    350c:	bl	a60 <transpose_array>
    3510:	cmp	r0, #0
    3514:	beq	3520 <coda_bin_cursor_read_uint32_array+0xe8>
    3518:	mvn	r0, #0
    351c:	b	3524 <coda_bin_cursor_read_uint32_array+0xec>
    3520:	mov	r0, #0
    3524:	ldr	r4, [sp, #16]
    3528:	ldr	r5, [sp, #20]
    352c:	ldr	r6, [sp, #24]
    3530:	ldr	lr, [sp, #8]
    3534:	add	sp, sp, #32
    3538:	bx	lr
    353c:	.word	0x000007ab
    3540:	.word	0x000002b5
    3544:	.word	0x00000000
    3548:	.word	0x000001cc
    354c:	.word	0x00000000

00003550 <coda_bin_cursor_read_int64_array>:
    3550:	mov	ip, sp
    3554:	sub	sp, sp, #32
    3558:	str	ip, [sp, #4]
    355c:	str	lr, [sp, #8]
    3560:	str	r4, [sp, #16]
    3564:	str	r5, [sp, #20]
    3568:	str	r6, [sp, #24]
    356c:	mov	r6, r2
    3570:	mov	r4, r1
    3574:	mov	r5, r0
    3578:	ldr	ip, [r5, #4]
    357c:	lsl	r1, ip, #4
    3580:	add	r0, r5, r1
    3584:	sub	lr, r0, #4096	; 0x1000
    3588:	ldr	r1, [lr, #4088]	; 0xff8
    358c:	ldr	ip, [r1]
    3590:	cmp	ip, #100	; 0x64
    3594:	blt	359c <coda_bin_cursor_read_int64_array+0x4c>
    3598:	ldr	r1, [r1, #4]
    359c:	ldr	r2, [r1, #40]	; 0x28
    35a0:	ldr	r0, [r2]
    35a4:	cmp	r0, #1
    35a8:	bne	35c8 <coda_bin_cursor_read_int64_array+0x78>
    35ac:	ldr	r1, [pc, #176]	; 3664 <coda_bin_cursor_read_int64_array+0x114>
    35b0:	mov	r3, #8
    35b4:	str	r6, [sp]
    35b8:	mov	r2, r4
    35bc:	mov	r0, r5
    35c0:	bl	6c0 <read_array>
    35c4:	b	363c <coda_bin_cursor_read_int64_array+0xec>
    35c8:	cmp	r0, #0
    35cc:	beq	35e4 <coda_bin_cursor_read_int64_array+0x94>
    35d0:	ldr	r0, [pc, #124]	; 3654 <coda_bin_cursor_read_int64_array+0x104>
    35d4:	ldr	r1, [pc, #132]	; 3660 <coda_bin_cursor_read_int64_array+0x110>
    35d8:	movw	r2, #1062	; 0x426
    35dc:	ldr	r3, [pc, #116]	; 3658 <coda_bin_cursor_read_int64_array+0x108>
    35e0:	bl	0 <__assert_fail>
    35e4:	ldr	r1, [pc, #112]	; 365c <coda_bin_cursor_read_int64_array+0x10c>
    35e8:	mov	r3, #8
    35ec:	mov	ip, #0
    35f0:	str	ip, [sp]
    35f4:	mov	r2, r4
    35f8:	mov	r0, r5
    35fc:	bl	6c0 <read_array>
    3600:	cmp	r0, #0
    3604:	beq	3610 <coda_bin_cursor_read_int64_array+0xc0>
    3608:	mvn	r0, #0
    360c:	b	363c <coda_bin_cursor_read_int64_array+0xec>
    3610:	cmp	r6, #0
    3614:	beq	3638 <coda_bin_cursor_read_int64_array+0xe8>
    3618:	mov	r2, #8
    361c:	mov	r1, r4
    3620:	mov	r0, r5
    3624:	bl	a60 <transpose_array>
    3628:	cmp	r0, #0
    362c:	beq	3638 <coda_bin_cursor_read_int64_array+0xe8>
    3630:	mvn	r0, #0
    3634:	b	363c <coda_bin_cursor_read_int64_array+0xec>
    3638:	mov	r0, #0
    363c:	ldr	r4, [sp, #16]
    3640:	ldr	r5, [sp, #20]
    3644:	ldr	r6, [sp, #24]
    3648:	ldr	lr, [sp, #8]
    364c:	add	sp, sp, #32
    3650:	bx	lr
    3654:	.word	0x000002b5
    3658:	.word	0x000007cd
    365c:	.word	0x00000000
    3660:	.word	0x000001cc
    3664:	.word	0x00000000

00003668 <coda_bin_cursor_read_uint64_array>:
    3668:	mov	ip, sp
    366c:	sub	sp, sp, #32
    3670:	str	ip, [sp, #4]
    3674:	str	lr, [sp, #8]
    3678:	str	r4, [sp, #16]
    367c:	str	r5, [sp, #20]
    3680:	str	r6, [sp, #24]
    3684:	mov	r6, r2
    3688:	mov	r4, r1
    368c:	mov	r5, r0
    3690:	ldr	ip, [r5, #4]
    3694:	lsl	r1, ip, #4
    3698:	add	r0, r5, r1
    369c:	sub	lr, r0, #4096	; 0x1000
    36a0:	ldr	r1, [lr, #4088]	; 0xff8
    36a4:	ldr	ip, [r1]
    36a8:	cmp	ip, #100	; 0x64
    36ac:	blt	36b4 <coda_bin_cursor_read_uint64_array+0x4c>
    36b0:	ldr	r1, [r1, #4]
    36b4:	ldr	r2, [r1, #40]	; 0x28
    36b8:	ldr	r0, [r2]
    36bc:	cmp	r0, #1
    36c0:	bne	36e0 <coda_bin_cursor_read_uint64_array+0x78>
    36c4:	ldr	r1, [pc, #164]	; 3770 <coda_bin_cursor_read_uint64_array+0x108>
    36c8:	mov	r3, #8
    36cc:	str	r6, [sp]
    36d0:	mov	r2, r4
    36d4:	mov	r0, r5
    36d8:	bl	6c0 <read_array>
    36dc:	b	3754 <coda_bin_cursor_read_uint64_array+0xec>
    36e0:	cmp	r0, #0
    36e4:	beq	36fc <coda_bin_cursor_read_uint64_array+0x94>
    36e8:	ldr	r0, [pc, #124]	; 376c <coda_bin_cursor_read_uint64_array+0x104>
    36ec:	ldr	r1, [pc, #128]	; 3774 <coda_bin_cursor_read_uint64_array+0x10c>
    36f0:	mov	r2, #1088	; 0x440
    36f4:	ldr	r3, [pc, #124]	; 3778 <coda_bin_cursor_read_uint64_array+0x110>
    36f8:	bl	0 <__assert_fail>
    36fc:	ldr	r1, [pc, #120]	; 377c <coda_bin_cursor_read_uint64_array+0x114>
    3700:	mov	r3, #8
    3704:	mov	ip, #0
    3708:	str	ip, [sp]
    370c:	mov	r2, r4
    3710:	mov	r0, r5
    3714:	bl	6c0 <read_array>
    3718:	cmp	r0, #0
    371c:	beq	3728 <coda_bin_cursor_read_uint64_array+0xc0>
    3720:	mvn	r0, #0
    3724:	b	3754 <coda_bin_cursor_read_uint64_array+0xec>
    3728:	cmp	r6, #0
    372c:	beq	3750 <coda_bin_cursor_read_uint64_array+0xe8>
    3730:	mov	r2, #8
    3734:	mov	r1, r4
    3738:	mov	r0, r5
    373c:	bl	a60 <transpose_array>
    3740:	cmp	r0, #0
    3744:	beq	3750 <coda_bin_cursor_read_uint64_array+0xe8>
    3748:	mvn	r0, #0
    374c:	b	3754 <coda_bin_cursor_read_uint64_array+0xec>
    3750:	mov	r0, #0
    3754:	ldr	r4, [sp, #16]
    3758:	ldr	r5, [sp, #20]
    375c:	ldr	r6, [sp, #24]
    3760:	ldr	lr, [sp, #8]
    3764:	add	sp, sp, #32
    3768:	bx	lr
    376c:	.word	0x000002b5
    3770:	.word	0x00000000
    3774:	.word	0x000001cc
    3778:	.word	0x000007ee
    377c:	.word	0x00000000

00003780 <coda_bin_cursor_read_float_array>:
    3780:	mov	ip, sp
    3784:	sub	sp, sp, #32
    3788:	str	ip, [sp, #4]
    378c:	str	lr, [sp, #8]
    3790:	str	r4, [sp, #16]
    3794:	str	r5, [sp, #20]
    3798:	str	r6, [sp, #24]
    379c:	mov	r6, r2
    37a0:	mov	r4, r1
    37a4:	mov	r5, r0
    37a8:	ldr	ip, [r5, #4]
    37ac:	lsl	r1, ip, #4
    37b0:	add	r0, r5, r1
    37b4:	sub	lr, r0, #4096	; 0x1000
    37b8:	ldr	r1, [lr, #4088]	; 0xff8
    37bc:	ldr	ip, [r1]
    37c0:	cmp	ip, #100	; 0x64
    37c4:	blt	37cc <coda_bin_cursor_read_float_array+0x4c>
    37c8:	ldr	r1, [r1, #4]
    37cc:	ldr	r2, [r1, #40]	; 0x28
    37d0:	ldr	r0, [r2]
    37d4:	cmp	r0, #1
    37d8:	bne	37f8 <coda_bin_cursor_read_float_array+0x78>
    37dc:	ldr	r1, [pc, #168]	; 388c <coda_bin_cursor_read_float_array+0x10c>
    37e0:	mov	r3, #4
    37e4:	str	r6, [sp]
    37e8:	mov	r2, r4
    37ec:	mov	r0, r5
    37f0:	bl	6c0 <read_array>
    37f4:	b	386c <coda_bin_cursor_read_float_array+0xec>
    37f8:	cmp	r0, #0
    37fc:	beq	3814 <coda_bin_cursor_read_float_array+0x94>
    3800:	ldr	r0, [pc, #128]	; 3888 <coda_bin_cursor_read_float_array+0x108>
    3804:	ldr	r1, [pc, #132]	; 3890 <coda_bin_cursor_read_float_array+0x110>
    3808:	movw	r2, #1114	; 0x45a
    380c:	ldr	r3, [pc, #128]	; 3894 <coda_bin_cursor_read_float_array+0x114>
    3810:	bl	0 <__assert_fail>
    3814:	ldr	r1, [pc, #104]	; 3884 <coda_bin_cursor_read_float_array+0x104>
    3818:	mov	r3, #4
    381c:	mov	ip, #0
    3820:	str	ip, [sp]
    3824:	mov	r2, r4
    3828:	mov	r0, r5
    382c:	bl	6c0 <read_array>
    3830:	cmp	r0, #0
    3834:	beq	3840 <coda_bin_cursor_read_float_array+0xc0>
    3838:	mvn	r0, #0
    383c:	b	386c <coda_bin_cursor_read_float_array+0xec>
    3840:	cmp	r6, #0
    3844:	beq	3868 <coda_bin_cursor_read_float_array+0xe8>
    3848:	mov	r2, #4
    384c:	mov	r1, r4
    3850:	mov	r0, r5
    3854:	bl	a60 <transpose_array>
    3858:	cmp	r0, #0
    385c:	beq	3868 <coda_bin_cursor_read_float_array+0xe8>
    3860:	mvn	r0, #0
    3864:	b	386c <coda_bin_cursor_read_float_array+0xec>
    3868:	mov	r0, #0
    386c:	ldr	r4, [sp, #16]
    3870:	ldr	r5, [sp, #20]
    3874:	ldr	r6, [sp, #24]
    3878:	ldr	lr, [sp, #8]
    387c:	add	sp, sp, #32
    3880:	bx	lr
    3884:	.word	0x00000000
    3888:	.word	0x000002b5
    388c:	.word	0x00000000
    3890:	.word	0x000001cc
    3894:	.word	0x00000810

00003898 <coda_bin_cursor_read_double_array>:
    3898:	mov	ip, sp
    389c:	sub	sp, sp, #32
    38a0:	str	ip, [sp, #4]
    38a4:	str	lr, [sp, #8]
    38a8:	str	r4, [sp, #16]
    38ac:	str	r5, [sp, #20]
    38b0:	str	r6, [sp, #24]
    38b4:	mov	r6, r2
    38b8:	mov	r4, r1
    38bc:	mov	r5, r0
    38c0:	ldr	ip, [r5, #4]
    38c4:	lsl	r1, ip, #4
    38c8:	add	r0, r5, r1
    38cc:	sub	lr, r0, #4096	; 0x1000
    38d0:	ldr	r1, [lr, #4088]	; 0xff8
    38d4:	ldr	ip, [r1]
    38d8:	cmp	ip, #100	; 0x64
    38dc:	blt	38e4 <coda_bin_cursor_read_double_array+0x4c>
    38e0:	ldr	r1, [r1, #4]
    38e4:	ldr	r2, [r1, #40]	; 0x28
    38e8:	ldr	r0, [r2]
    38ec:	cmp	r0, #1
    38f0:	bne	3910 <coda_bin_cursor_read_double_array+0x78>
    38f4:	ldr	r1, [pc, #176]	; 39ac <coda_bin_cursor_read_double_array+0x114>
    38f8:	mov	r3, #8
    38fc:	str	r6, [sp]
    3900:	mov	r2, r4
    3904:	mov	r0, r5
    3908:	bl	6c0 <read_array>
    390c:	b	3984 <coda_bin_cursor_read_double_array+0xec>
    3910:	cmp	r0, #0
    3914:	beq	392c <coda_bin_cursor_read_double_array+0x94>
    3918:	ldr	r0, [pc, #124]	; 399c <coda_bin_cursor_read_double_array+0x104>
    391c:	ldr	r1, [pc, #128]	; 39a4 <coda_bin_cursor_read_double_array+0x10c>
    3920:	movw	r2, #1140	; 0x474
    3924:	ldr	r3, [pc, #116]	; 39a0 <coda_bin_cursor_read_double_array+0x108>
    3928:	bl	0 <__assert_fail>
    392c:	ldr	r1, [pc, #116]	; 39a8 <coda_bin_cursor_read_double_array+0x110>
    3930:	mov	r3, #8
    3934:	mov	ip, #0
    3938:	str	ip, [sp]
    393c:	mov	r2, r4
    3940:	mov	r0, r5
    3944:	bl	6c0 <read_array>
    3948:	cmp	r0, #0
    394c:	beq	3958 <coda_bin_cursor_read_double_array+0xc0>
    3950:	mvn	r0, #0
    3954:	b	3984 <coda_bin_cursor_read_double_array+0xec>
    3958:	cmp	r6, #0
    395c:	beq	3980 <coda_bin_cursor_read_double_array+0xe8>
    3960:	mov	r2, #8
    3964:	mov	r1, r4
    3968:	mov	r0, r5
    396c:	bl	a60 <transpose_array>
    3970:	cmp	r0, #0
    3974:	beq	3980 <coda_bin_cursor_read_double_array+0xe8>
    3978:	mvn	r0, #0
    397c:	b	3984 <coda_bin_cursor_read_double_array+0xec>
    3980:	mov	r0, #0
    3984:	ldr	r4, [sp, #16]
    3988:	ldr	r5, [sp, #20]
    398c:	ldr	r6, [sp, #24]
    3990:	ldr	lr, [sp, #8]
    3994:	add	sp, sp, #32
    3998:	bx	lr
    399c:	.word	0x000002b5
    39a0:	.word	0x00000831
    39a4:	.word	0x000001cc
	...

000039b0 <coda_bin_cursor_read_char_array>:
    39b0:	mov	ip, sp
    39b4:	sub	sp, sp, #32
    39b8:	str	ip, [sp, #4]
    39bc:	str	lr, [sp, #8]
    39c0:	str	r4, [sp, #16]
    39c4:	str	r5, [sp, #20]
    39c8:	str	r6, [sp, #24]
    39cc:	mov	r6, r2
    39d0:	mov	r4, r1
    39d4:	mov	r5, r0
    39d8:	ldr	ip, [r5, #4]
    39dc:	lsl	r1, ip, #4
    39e0:	add	r0, r5, r1
    39e4:	sub	lr, r0, #4096	; 0x1000
    39e8:	ldr	r1, [lr, #4088]	; 0xff8
    39ec:	ldr	ip, [r1]
    39f0:	cmp	ip, #100	; 0x64
    39f4:	blt	39fc <coda_bin_cursor_read_char_array+0x4c>
    39f8:	ldr	r1, [r1, #4]
    39fc:	ldr	r2, [r1, #40]	; 0x28
    3a00:	ldr	r0, [r2]
    3a04:	cmp	r0, #1
    3a08:	bne	3a28 <coda_bin_cursor_read_char_array+0x78>
    3a0c:	ldr	r1, [pc, #176]	; 3ac4 <coda_bin_cursor_read_char_array+0x114>
    3a10:	mov	r3, #1
    3a14:	str	r6, [sp]
    3a18:	mov	r2, r4
    3a1c:	mov	r0, r5
    3a20:	bl	6c0 <read_array>
    3a24:	b	3a9c <coda_bin_cursor_read_char_array+0xec>
    3a28:	cmp	r0, #0
    3a2c:	beq	3a44 <coda_bin_cursor_read_char_array+0x94>
    3a30:	ldr	r0, [pc, #128]	; 3ab8 <coda_bin_cursor_read_char_array+0x108>
    3a34:	ldr	r1, [pc, #132]	; 3ac0 <coda_bin_cursor_read_char_array+0x110>
    3a38:	movw	r2, #1166	; 0x48e
    3a3c:	ldr	r3, [pc, #120]	; 3abc <coda_bin_cursor_read_char_array+0x10c>
    3a40:	bl	0 <__assert_fail>
    3a44:	ldr	r1, [pc, #104]	; 3ab4 <coda_bin_cursor_read_char_array+0x104>
    3a48:	mov	r3, #1
    3a4c:	mov	ip, #0
    3a50:	str	ip, [sp]
    3a54:	mov	r2, r4
    3a58:	mov	r0, r5
    3a5c:	bl	6c0 <read_array>
    3a60:	cmp	r0, #0
    3a64:	beq	3a70 <coda_bin_cursor_read_char_array+0xc0>
    3a68:	mvn	r0, #0
    3a6c:	b	3a9c <coda_bin_cursor_read_char_array+0xec>
    3a70:	cmp	r6, #0
    3a74:	beq	3a98 <coda_bin_cursor_read_char_array+0xe8>
    3a78:	mov	r2, #1
    3a7c:	mov	r1, r4
    3a80:	mov	r0, r5
    3a84:	bl	a60 <transpose_array>
    3a88:	cmp	r0, #0
    3a8c:	beq	3a98 <coda_bin_cursor_read_char_array+0xe8>
    3a90:	mvn	r0, #0
    3a94:	b	3a9c <coda_bin_cursor_read_char_array+0xec>
    3a98:	mov	r0, #0
    3a9c:	ldr	r4, [sp, #16]
    3aa0:	ldr	r5, [sp, #20]
    3aa4:	ldr	r6, [sp, #24]
    3aa8:	ldr	lr, [sp, #8]
    3aac:	add	sp, sp, #32
    3ab0:	bx	lr
    3ab4:	.word	0x00000000
    3ab8:	.word	0x000002b5
    3abc:	.word	0x00000853
    3ac0:	.word	0x000001cc
    3ac4:	.word	0x00000000

00003ac8 <coda_bin_cursor_read_int8_partial_array>:
    3ac8:	mov	ip, sp
    3acc:	sub	sp, sp, #32
    3ad0:	str	ip, [sp, #8]
    3ad4:	str	lr, [sp, #12]
    3ad8:	str	r4, [sp, #16]
    3adc:	str	r5, [sp, #20]
    3ae0:	str	r6, [sp, #24]
    3ae4:	str	r7, [sp, #28]
    3ae8:	mov	r6, r3
    3aec:	mov	r4, r2
    3af0:	mov	r5, r1
    3af4:	mov	r7, r0
    3af8:	ldr	r1, [r7, #4]
    3afc:	lsl	r3, r1, #4
    3b00:	add	r1, r7, r3
    3b04:	sub	lr, r1, #4096	; 0x1000
    3b08:	ldr	r1, [lr, #4088]	; 0xff8
    3b0c:	ldr	r3, [r1]
    3b10:	cmp	r3, #100	; 0x64
    3b14:	blt	3b1c <coda_bin_cursor_read_int8_partial_array+0x54>
    3b18:	ldr	r1, [r1, #4]
    3b1c:	ldr	r2, [r1, #40]	; 0x28
    3b20:	ldr	r0, [r2]
    3b24:	cmp	r0, #1
    3b28:	bne	3b50 <coda_bin_cursor_read_int8_partial_array+0x88>
    3b2c:	ldr	r1, [pc, #116]	; 3ba8 <coda_bin_cursor_read_int8_partial_array+0xe0>
    3b30:	mov	r0, #1
    3b34:	str	r0, [sp, #4]
    3b38:	str	r6, [sp]
    3b3c:	mov	r3, r4
    3b40:	mov	r2, r5
    3b44:	mov	r0, r7
    3b48:	bl	974 <read_partial_array>
    3b4c:	b	3b8c <coda_bin_cursor_read_int8_partial_array+0xc4>
    3b50:	cmp	r0, #0
    3b54:	beq	3b6c <coda_bin_cursor_read_int8_partial_array+0xa4>
    3b58:	ldr	r0, [pc, #76]	; 3bac <coda_bin_cursor_read_int8_partial_array+0xe4>
    3b5c:	ldr	r1, [pc, #80]	; 3bb4 <coda_bin_cursor_read_int8_partial_array+0xec>
    3b60:	movw	r2, #1192	; 0x4a8
    3b64:	ldr	r3, [pc, #68]	; 3bb0 <coda_bin_cursor_read_int8_partial_array+0xe8>
    3b68:	bl	0 <__assert_fail>
    3b6c:	ldr	r1, [pc, #68]	; 3bb8 <coda_bin_cursor_read_int8_partial_array+0xf0>
    3b70:	mov	r0, #1
    3b74:	str	r0, [sp, #4]
    3b78:	str	r6, [sp]
    3b7c:	mov	r3, r4
    3b80:	mov	r2, r5
    3b84:	mov	r0, r7
    3b88:	bl	974 <read_partial_array>
    3b8c:	ldr	r4, [sp, #16]
    3b90:	ldr	r5, [sp, #20]
    3b94:	ldr	r6, [sp, #24]
    3b98:	ldr	r7, [sp, #28]
    3b9c:	ldr	lr, [sp, #12]
    3ba0:	add	sp, sp, #32
    3ba4:	bx	lr
    3ba8:	.word	0x00000000
    3bac:	.word	0x000002b5
    3bb0:	.word	0x00000873
    3bb4:	.word	0x000001cc
    3bb8:	.word	0x00000000

00003bbc <coda_bin_cursor_read_uint8_partial_array>:
    3bbc:	mov	ip, sp
    3bc0:	sub	sp, sp, #32
    3bc4:	str	ip, [sp, #8]
    3bc8:	str	lr, [sp, #12]
    3bcc:	str	r4, [sp, #16]
    3bd0:	str	r5, [sp, #20]
    3bd4:	str	r6, [sp, #24]
    3bd8:	str	r7, [sp, #28]
    3bdc:	mov	r6, r3
    3be0:	mov	r4, r2
    3be4:	mov	r5, r1
    3be8:	mov	r7, r0
    3bec:	ldr	r1, [r7, #4]
    3bf0:	lsl	r3, r1, #4
    3bf4:	add	r1, r7, r3
    3bf8:	sub	lr, r1, #4096	; 0x1000
    3bfc:	ldr	r1, [lr, #4088]	; 0xff8
    3c00:	ldr	r3, [r1]
    3c04:	cmp	r3, #100	; 0x64
    3c08:	blt	3c10 <coda_bin_cursor_read_uint8_partial_array+0x54>
    3c0c:	ldr	r1, [r1, #4]
    3c10:	ldr	r2, [r1, #40]	; 0x28
    3c14:	ldr	r0, [r2]
    3c18:	cmp	r0, #1
    3c1c:	bne	3c44 <coda_bin_cursor_read_uint8_partial_array+0x88>
    3c20:	ldr	r1, [pc, #124]	; 3ca4 <coda_bin_cursor_read_uint8_partial_array+0xe8>
    3c24:	mov	r0, #1
    3c28:	str	r0, [sp, #4]
    3c2c:	str	r6, [sp]
    3c30:	mov	r3, r4
    3c34:	mov	r2, r5
    3c38:	mov	r0, r7
    3c3c:	bl	974 <read_partial_array>
    3c40:	b	3c80 <coda_bin_cursor_read_uint8_partial_array+0xc4>
    3c44:	cmp	r0, #0
    3c48:	beq	3c60 <coda_bin_cursor_read_uint8_partial_array+0xa4>
    3c4c:	ldr	r0, [pc, #72]	; 3c9c <coda_bin_cursor_read_uint8_partial_array+0xe0>
    3c50:	ldr	r1, [pc, #80]	; 3ca8 <coda_bin_cursor_read_uint8_partial_array+0xec>
    3c54:	movw	r2, #1206	; 0x4b6
    3c58:	ldr	r3, [pc, #64]	; 3ca0 <coda_bin_cursor_read_uint8_partial_array+0xe4>
    3c5c:	bl	0 <__assert_fail>
    3c60:	ldr	r1, [pc, #68]	; 3cac <coda_bin_cursor_read_uint8_partial_array+0xf0>
    3c64:	mov	r0, #1
    3c68:	str	r0, [sp, #4]
    3c6c:	str	r6, [sp]
    3c70:	mov	r3, r4
    3c74:	mov	r2, r5
    3c78:	mov	r0, r7
    3c7c:	bl	974 <read_partial_array>
    3c80:	ldr	r4, [sp, #16]
    3c84:	ldr	r5, [sp, #20]
    3c88:	ldr	r6, [sp, #24]
    3c8c:	ldr	r7, [sp, #28]
    3c90:	ldr	lr, [sp, #12]
    3c94:	add	sp, sp, #32
    3c98:	bx	lr
    3c9c:	.word	0x000002b5
    3ca0:	.word	0x0000089b
    3ca4:	.word	0x00000000
    3ca8:	.word	0x000001cc
    3cac:	.word	0x00000000

00003cb0 <coda_bin_cursor_read_int16_partial_array>:
    3cb0:	mov	ip, sp
    3cb4:	sub	sp, sp, #32
    3cb8:	str	ip, [sp, #8]
    3cbc:	str	lr, [sp, #12]
    3cc0:	str	r4, [sp, #16]
    3cc4:	str	r5, [sp, #20]
    3cc8:	str	r6, [sp, #24]
    3ccc:	str	r7, [sp, #28]
    3cd0:	mov	r6, r3
    3cd4:	mov	r4, r2
    3cd8:	mov	r5, r1
    3cdc:	mov	r7, r0
    3ce0:	ldr	r1, [r7, #4]
    3ce4:	lsl	r3, r1, #4
    3ce8:	add	r1, r7, r3
    3cec:	sub	lr, r1, #4096	; 0x1000
    3cf0:	ldr	r1, [lr, #4088]	; 0xff8
    3cf4:	ldr	r3, [r1]
    3cf8:	cmp	r3, #100	; 0x64
    3cfc:	blt	3d04 <coda_bin_cursor_read_int16_partial_array+0x54>
    3d00:	ldr	r1, [r1, #4]
    3d04:	ldr	r2, [r1, #40]	; 0x28
    3d08:	ldr	r0, [r2]
    3d0c:	cmp	r0, #1
    3d10:	bne	3d38 <coda_bin_cursor_read_int16_partial_array+0x88>
    3d14:	ldr	r1, [pc, #132]	; 3da0 <coda_bin_cursor_read_int16_partial_array+0xf0>
    3d18:	mov	r0, #2
    3d1c:	str	r0, [sp, #4]
    3d20:	str	r6, [sp]
    3d24:	mov	r3, r4
    3d28:	mov	r2, r5
    3d2c:	mov	r0, r7
    3d30:	bl	974 <read_partial_array>
    3d34:	b	3d74 <coda_bin_cursor_read_int16_partial_array+0xc4>
    3d38:	cmp	r0, #0
    3d3c:	beq	3d54 <coda_bin_cursor_read_int16_partial_array+0xa4>
    3d40:	ldr	r0, [pc, #72]	; 3d90 <coda_bin_cursor_read_int16_partial_array+0xe0>
    3d44:	ldr	r1, [pc, #76]	; 3d98 <coda_bin_cursor_read_int16_partial_array+0xe8>
    3d48:	movw	r2, #1220	; 0x4c4
    3d4c:	ldr	r3, [pc, #72]	; 3d9c <coda_bin_cursor_read_int16_partial_array+0xec>
    3d50:	bl	0 <__assert_fail>
    3d54:	ldr	r1, [pc, #56]	; 3d94 <coda_bin_cursor_read_int16_partial_array+0xe4>
    3d58:	mov	r0, #2
    3d5c:	str	r0, [sp, #4]
    3d60:	str	r6, [sp]
    3d64:	mov	r3, r4
    3d68:	mov	r2, r5
    3d6c:	mov	r0, r7
    3d70:	bl	974 <read_partial_array>
    3d74:	ldr	r4, [sp, #16]
    3d78:	ldr	r5, [sp, #20]
    3d7c:	ldr	r6, [sp, #24]
    3d80:	ldr	r7, [sp, #28]
    3d84:	ldr	lr, [sp, #12]
    3d88:	add	sp, sp, #32
    3d8c:	bx	lr
    3d90:	.word	0x000002b5
    3d94:	.word	0x00000000
    3d98:	.word	0x000001cc
    3d9c:	.word	0x000008c4
    3da0:	.word	0x00000000

00003da4 <coda_bin_cursor_read_uint16_partial_array>:
    3da4:	mov	ip, sp
    3da8:	sub	sp, sp, #32
    3dac:	str	ip, [sp, #8]
    3db0:	str	lr, [sp, #12]
    3db4:	str	r4, [sp, #16]
    3db8:	str	r5, [sp, #20]
    3dbc:	str	r6, [sp, #24]
    3dc0:	str	r7, [sp, #28]
    3dc4:	mov	r6, r3
    3dc8:	mov	r4, r2
    3dcc:	mov	r5, r1
    3dd0:	mov	r7, r0
    3dd4:	ldr	r1, [r7, #4]
    3dd8:	lsl	r3, r1, #4
    3ddc:	add	r1, r7, r3
    3de0:	sub	lr, r1, #4096	; 0x1000
    3de4:	ldr	r1, [lr, #4088]	; 0xff8
    3de8:	ldr	r3, [r1]
    3dec:	cmp	r3, #100	; 0x64
    3df0:	blt	3df8 <coda_bin_cursor_read_uint16_partial_array+0x54>
    3df4:	ldr	r1, [r1, #4]
    3df8:	ldr	r2, [r1, #40]	; 0x28
    3dfc:	ldr	r0, [r2]
    3e00:	cmp	r0, #1
    3e04:	bne	3e2c <coda_bin_cursor_read_uint16_partial_array+0x88>
    3e08:	ldr	r1, [pc, #132]	; 3e94 <coda_bin_cursor_read_uint16_partial_array+0xf0>
    3e0c:	mov	r0, #2
    3e10:	str	r0, [sp, #4]
    3e14:	str	r6, [sp]
    3e18:	mov	r3, r4
    3e1c:	mov	r2, r5
    3e20:	mov	r0, r7
    3e24:	bl	974 <read_partial_array>
    3e28:	b	3e68 <coda_bin_cursor_read_uint16_partial_array+0xc4>
    3e2c:	cmp	r0, #0
    3e30:	beq	3e48 <coda_bin_cursor_read_uint16_partial_array+0xa4>
    3e34:	ldr	r0, [pc, #76]	; 3e88 <coda_bin_cursor_read_uint16_partial_array+0xe4>
    3e38:	ldr	r1, [pc, #80]	; 3e90 <coda_bin_cursor_read_uint16_partial_array+0xec>
    3e3c:	movw	r2, #1234	; 0x4d2
    3e40:	ldr	r3, [pc, #60]	; 3e84 <coda_bin_cursor_read_uint16_partial_array+0xe0>
    3e44:	bl	0 <__assert_fail>
    3e48:	ldr	r1, [pc, #60]	; 3e8c <coda_bin_cursor_read_uint16_partial_array+0xe8>
    3e4c:	mov	r0, #2
    3e50:	str	r0, [sp, #4]
    3e54:	str	r6, [sp]
    3e58:	mov	r3, r4
    3e5c:	mov	r2, r5
    3e60:	mov	r0, r7
    3e64:	bl	974 <read_partial_array>
    3e68:	ldr	r4, [sp, #16]
    3e6c:	ldr	r5, [sp, #20]
    3e70:	ldr	r6, [sp, #24]
    3e74:	ldr	r7, [sp, #28]
    3e78:	ldr	lr, [sp, #12]
    3e7c:	add	sp, sp, #32
    3e80:	bx	lr
    3e84:	.word	0x000008ed
    3e88:	.word	0x000002b5
    3e8c:	.word	0x00000000
    3e90:	.word	0x000001cc
    3e94:	.word	0x00000000

00003e98 <coda_bin_cursor_read_int32_partial_array>:
    3e98:	mov	ip, sp
    3e9c:	sub	sp, sp, #32
    3ea0:	str	ip, [sp, #8]
    3ea4:	str	lr, [sp, #12]
    3ea8:	str	r4, [sp, #16]
    3eac:	str	r5, [sp, #20]
    3eb0:	str	r6, [sp, #24]
    3eb4:	str	r7, [sp, #28]
    3eb8:	mov	r6, r3
    3ebc:	mov	r4, r2
    3ec0:	mov	r5, r1
    3ec4:	mov	r7, r0
    3ec8:	ldr	r1, [r7, #4]
    3ecc:	lsl	r3, r1, #4
    3ed0:	add	r1, r7, r3
    3ed4:	sub	lr, r1, #4096	; 0x1000
    3ed8:	ldr	r1, [lr, #4088]	; 0xff8
    3edc:	ldr	r3, [r1]
    3ee0:	cmp	r3, #100	; 0x64
    3ee4:	blt	3eec <coda_bin_cursor_read_int32_partial_array+0x54>
    3ee8:	ldr	r1, [r1, #4]
    3eec:	ldr	r2, [r1, #40]	; 0x28
    3ef0:	ldr	r0, [r2]
    3ef4:	cmp	r0, #1
    3ef8:	bne	3f20 <coda_bin_cursor_read_int32_partial_array+0x88>
    3efc:	ldr	r1, [pc, #120]	; 3f7c <coda_bin_cursor_read_int32_partial_array+0xe4>
    3f00:	mov	r0, #4
    3f04:	str	r0, [sp, #4]
    3f08:	str	r6, [sp]
    3f0c:	mov	r3, r4
    3f10:	mov	r2, r5
    3f14:	mov	r0, r7
    3f18:	bl	974 <read_partial_array>
    3f1c:	b	3f5c <coda_bin_cursor_read_int32_partial_array+0xc4>
    3f20:	cmp	r0, #0
    3f24:	beq	3f3c <coda_bin_cursor_read_int32_partial_array+0xa4>
    3f28:	ldr	r0, [pc, #84]	; 3f84 <coda_bin_cursor_read_int32_partial_array+0xec>
    3f2c:	ldr	r1, [pc, #84]	; 3f88 <coda_bin_cursor_read_int32_partial_array+0xf0>
    3f30:	mov	r2, #1248	; 0x4e0
    3f34:	ldr	r3, [pc, #68]	; 3f80 <coda_bin_cursor_read_int32_partial_array+0xe8>
    3f38:	bl	0 <__assert_fail>
    3f3c:	ldr	r1, [pc, #52]	; 3f78 <coda_bin_cursor_read_int32_partial_array+0xe0>
    3f40:	mov	r0, #4
    3f44:	str	r0, [sp, #4]
    3f48:	str	r6, [sp]
    3f4c:	mov	r3, r4
    3f50:	mov	r2, r5
    3f54:	mov	r0, r7
    3f58:	bl	974 <read_partial_array>
    3f5c:	ldr	r4, [sp, #16]
    3f60:	ldr	r5, [sp, #20]
    3f64:	ldr	r6, [sp, #24]
    3f68:	ldr	r7, [sp, #28]
    3f6c:	ldr	lr, [sp, #12]
    3f70:	add	sp, sp, #32
    3f74:	bx	lr
	...
    3f80:	.word	0x00000917
    3f84:	.word	0x000002b5
    3f88:	.word	0x000001cc

00003f8c <coda_bin_cursor_read_uint32_partial_array>:
    3f8c:	mov	ip, sp
    3f90:	sub	sp, sp, #32
    3f94:	str	ip, [sp, #8]
    3f98:	str	lr, [sp, #12]
    3f9c:	str	r4, [sp, #16]
    3fa0:	str	r5, [sp, #20]
    3fa4:	str	r6, [sp, #24]
    3fa8:	str	r7, [sp, #28]
    3fac:	mov	r6, r3
    3fb0:	mov	r4, r2
    3fb4:	mov	r5, r1
    3fb8:	mov	r7, r0
    3fbc:	ldr	r1, [r7, #4]
    3fc0:	lsl	r3, r1, #4
    3fc4:	add	r1, r7, r3
    3fc8:	sub	lr, r1, #4096	; 0x1000
    3fcc:	ldr	r1, [lr, #4088]	; 0xff8
    3fd0:	ldr	r3, [r1]
    3fd4:	cmp	r3, #100	; 0x64
    3fd8:	blt	3fe0 <coda_bin_cursor_read_uint32_partial_array+0x54>
    3fdc:	ldr	r1, [r1, #4]
    3fe0:	ldr	r2, [r1, #40]	; 0x28
    3fe4:	ldr	r0, [r2]
    3fe8:	cmp	r0, #1
    3fec:	bne	4014 <coda_bin_cursor_read_uint32_partial_array+0x88>
    3ff0:	ldr	r1, [pc, #132]	; 407c <coda_bin_cursor_read_uint32_partial_array+0xf0>
    3ff4:	mov	r0, #4
    3ff8:	str	r0, [sp, #4]
    3ffc:	str	r6, [sp]
    4000:	mov	r3, r4
    4004:	mov	r2, r5
    4008:	mov	r0, r7
    400c:	bl	974 <read_partial_array>
    4010:	b	4050 <coda_bin_cursor_read_uint32_partial_array+0xc4>
    4014:	cmp	r0, #0
    4018:	beq	4030 <coda_bin_cursor_read_uint32_partial_array+0xa4>
    401c:	ldr	r0, [pc, #76]	; 4070 <coda_bin_cursor_read_uint32_partial_array+0xe4>
    4020:	ldr	r1, [pc, #80]	; 4078 <coda_bin_cursor_read_uint32_partial_array+0xec>
    4024:	movw	r2, #1262	; 0x4ee
    4028:	ldr	r3, [pc, #60]	; 406c <coda_bin_cursor_read_uint32_partial_array+0xe0>
    402c:	bl	0 <__assert_fail>
    4030:	ldr	r1, [pc, #60]	; 4074 <coda_bin_cursor_read_uint32_partial_array+0xe8>
    4034:	mov	r0, #4
    4038:	str	r0, [sp, #4]
    403c:	str	r6, [sp]
    4040:	mov	r3, r4
    4044:	mov	r2, r5
    4048:	mov	r0, r7
    404c:	bl	974 <read_partial_array>
    4050:	ldr	r4, [sp, #16]
    4054:	ldr	r5, [sp, #20]
    4058:	ldr	r6, [sp, #24]
    405c:	ldr	r7, [sp, #28]
    4060:	ldr	lr, [sp, #12]
    4064:	add	sp, sp, #32
    4068:	bx	lr
    406c:	.word	0x00000940
    4070:	.word	0x000002b5
    4074:	.word	0x00000000
    4078:	.word	0x000001cc
    407c:	.word	0x00000000

00004080 <coda_bin_cursor_read_int64_partial_array>:
    4080:	mov	ip, sp
    4084:	sub	sp, sp, #32
    4088:	str	ip, [sp, #8]
    408c:	str	lr, [sp, #12]
    4090:	str	r4, [sp, #16]
    4094:	str	r5, [sp, #20]
    4098:	str	r6, [sp, #24]
    409c:	str	r7, [sp, #28]
    40a0:	mov	r6, r3
    40a4:	mov	r4, r2
    40a8:	mov	r5, r1
    40ac:	mov	r7, r0
    40b0:	ldr	r1, [r7, #4]
    40b4:	lsl	r3, r1, #4
    40b8:	add	r1, r7, r3
    40bc:	sub	lr, r1, #4096	; 0x1000
    40c0:	ldr	r1, [lr, #4088]	; 0xff8
    40c4:	ldr	r3, [r1]
    40c8:	cmp	r3, #100	; 0x64
    40cc:	blt	40d4 <coda_bin_cursor_read_int64_partial_array+0x54>
    40d0:	ldr	r1, [r1, #4]
    40d4:	ldr	r2, [r1, #40]	; 0x28
    40d8:	ldr	r0, [r2]
    40dc:	cmp	r0, #1
    40e0:	bne	4108 <coda_bin_cursor_read_int64_partial_array+0x88>
    40e4:	ldr	r1, [pc, #128]	; 416c <coda_bin_cursor_read_int64_partial_array+0xec>
    40e8:	mov	r0, #8
    40ec:	str	r0, [sp, #4]
    40f0:	str	r6, [sp]
    40f4:	mov	r3, r4
    40f8:	mov	r2, r5
    40fc:	mov	r0, r7
    4100:	bl	974 <read_partial_array>
    4104:	b	4144 <coda_bin_cursor_read_int64_partial_array+0xc4>
    4108:	cmp	r0, #0
    410c:	beq	4124 <coda_bin_cursor_read_int64_partial_array+0xa4>
    4110:	ldr	r0, [pc, #72]	; 4160 <coda_bin_cursor_read_int64_partial_array+0xe0>
    4114:	ldr	r1, [pc, #76]	; 4168 <coda_bin_cursor_read_int64_partial_array+0xe8>
    4118:	movw	r2, #1276	; 0x4fc
    411c:	ldr	r3, [pc, #76]	; 4170 <coda_bin_cursor_read_int64_partial_array+0xf0>
    4120:	bl	0 <__assert_fail>
    4124:	ldr	r1, [pc, #56]	; 4164 <coda_bin_cursor_read_int64_partial_array+0xe4>
    4128:	mov	r0, #8
    412c:	str	r0, [sp, #4]
    4130:	str	r6, [sp]
    4134:	mov	r3, r4
    4138:	mov	r2, r5
    413c:	mov	r0, r7
    4140:	bl	974 <read_partial_array>
    4144:	ldr	r4, [sp, #16]
    4148:	ldr	r5, [sp, #20]
    414c:	ldr	r6, [sp, #24]
    4150:	ldr	r7, [sp, #28]
    4154:	ldr	lr, [sp, #12]
    4158:	add	sp, sp, #32
    415c:	bx	lr
    4160:	.word	0x000002b5
    4164:	.word	0x00000000
    4168:	.word	0x000001cc
    416c:	.word	0x00000000
    4170:	.word	0x0000096a

00004174 <coda_bin_cursor_read_uint64_partial_array>:
    4174:	mov	ip, sp
    4178:	sub	sp, sp, #32
    417c:	str	ip, [sp, #8]
    4180:	str	lr, [sp, #12]
    4184:	str	r4, [sp, #16]
    4188:	str	r5, [sp, #20]
    418c:	str	r6, [sp, #24]
    4190:	str	r7, [sp, #28]
    4194:	mov	r6, r3
    4198:	mov	r4, r2
    419c:	mov	r5, r1
    41a0:	mov	r7, r0
    41a4:	ldr	r1, [r7, #4]
    41a8:	lsl	r3, r1, #4
    41ac:	add	r1, r7, r3
    41b0:	sub	lr, r1, #4096	; 0x1000
    41b4:	ldr	r1, [lr, #4088]	; 0xff8
    41b8:	ldr	r3, [r1]
    41bc:	cmp	r3, #100	; 0x64
    41c0:	blt	41c8 <coda_bin_cursor_read_uint64_partial_array+0x54>
    41c4:	ldr	r1, [r1, #4]
    41c8:	ldr	r2, [r1, #40]	; 0x28
    41cc:	ldr	r0, [r2]
    41d0:	cmp	r0, #1
    41d4:	bne	41fc <coda_bin_cursor_read_uint64_partial_array+0x88>
    41d8:	ldr	r1, [pc, #124]	; 425c <coda_bin_cursor_read_uint64_partial_array+0xe8>
    41dc:	mov	r0, #8
    41e0:	str	r0, [sp, #4]
    41e4:	str	r6, [sp]
    41e8:	mov	r3, r4
    41ec:	mov	r2, r5
    41f0:	mov	r0, r7
    41f4:	bl	974 <read_partial_array>
    41f8:	b	4238 <coda_bin_cursor_read_uint64_partial_array+0xc4>
    41fc:	cmp	r0, #0
    4200:	beq	4218 <coda_bin_cursor_read_uint64_partial_array+0xa4>
    4204:	ldr	r0, [pc, #72]	; 4254 <coda_bin_cursor_read_uint64_partial_array+0xe0>
    4208:	ldr	r1, [pc, #80]	; 4260 <coda_bin_cursor_read_uint64_partial_array+0xec>
    420c:	movw	r2, #1290	; 0x50a
    4210:	ldr	r3, [pc, #64]	; 4258 <coda_bin_cursor_read_uint64_partial_array+0xe4>
    4214:	bl	0 <__assert_fail>
    4218:	ldr	r1, [pc, #68]	; 4264 <coda_bin_cursor_read_uint64_partial_array+0xf0>
    421c:	mov	r0, #8
    4220:	str	r0, [sp, #4]
    4224:	str	r6, [sp]
    4228:	mov	r3, r4
    422c:	mov	r2, r5
    4230:	mov	r0, r7
    4234:	bl	974 <read_partial_array>
    4238:	ldr	r4, [sp, #16]
    423c:	ldr	r5, [sp, #20]
    4240:	ldr	r6, [sp, #24]
    4244:	ldr	r7, [sp, #28]
    4248:	ldr	lr, [sp, #12]
    424c:	add	sp, sp, #32
    4250:	bx	lr
    4254:	.word	0x000002b5
    4258:	.word	0x00000993
    425c:	.word	0x00000000
    4260:	.word	0x000001cc
    4264:	.word	0x00000000

00004268 <coda_bin_cursor_read_float_partial_array>:
    4268:	mov	ip, sp
    426c:	sub	sp, sp, #32
    4270:	str	ip, [sp, #8]
    4274:	str	lr, [sp, #12]
    4278:	str	r4, [sp, #16]
    427c:	str	r5, [sp, #20]
    4280:	str	r6, [sp, #24]
    4284:	str	r7, [sp, #28]
    4288:	mov	r6, r3
    428c:	mov	r4, r2
    4290:	mov	r5, r1
    4294:	mov	r7, r0
    4298:	ldr	r1, [r7, #4]
    429c:	lsl	r3, r1, #4
    42a0:	add	r1, r7, r3
    42a4:	sub	lr, r1, #4096	; 0x1000
    42a8:	ldr	r1, [lr, #4088]	; 0xff8
    42ac:	ldr	r3, [r1]
    42b0:	cmp	r3, #100	; 0x64
    42b4:	blt	42bc <coda_bin_cursor_read_float_partial_array+0x54>
    42b8:	ldr	r1, [r1, #4]
    42bc:	ldr	r2, [r1, #40]	; 0x28
    42c0:	ldr	r0, [r2]
    42c4:	cmp	r0, #1
    42c8:	bne	42f0 <coda_bin_cursor_read_float_partial_array+0x88>
    42cc:	ldr	r1, [pc, #128]	; 4354 <coda_bin_cursor_read_float_partial_array+0xec>
    42d0:	mov	r0, #4
    42d4:	str	r0, [sp, #4]
    42d8:	str	r6, [sp]
    42dc:	mov	r3, r4
    42e0:	mov	r2, r5
    42e4:	mov	r0, r7
    42e8:	bl	974 <read_partial_array>
    42ec:	b	432c <coda_bin_cursor_read_float_partial_array+0xc4>
    42f0:	cmp	r0, #0
    42f4:	beq	430c <coda_bin_cursor_read_float_partial_array+0xa4>
    42f8:	ldr	r0, [pc, #76]	; 434c <coda_bin_cursor_read_float_partial_array+0xe4>
    42fc:	ldr	r1, [pc, #84]	; 4358 <coda_bin_cursor_read_float_partial_array+0xf0>
    4300:	movw	r2, #1304	; 0x518
    4304:	ldr	r3, [pc, #68]	; 4350 <coda_bin_cursor_read_float_partial_array+0xe8>
    4308:	bl	0 <__assert_fail>
    430c:	ldr	r1, [pc, #52]	; 4348 <coda_bin_cursor_read_float_partial_array+0xe0>
    4310:	mov	r0, #4
    4314:	str	r0, [sp, #4]
    4318:	str	r6, [sp]
    431c:	mov	r3, r4
    4320:	mov	r2, r5
    4324:	mov	r0, r7
    4328:	bl	974 <read_partial_array>
    432c:	ldr	r4, [sp, #16]
    4330:	ldr	r5, [sp, #20]
    4334:	ldr	r6, [sp, #24]
    4338:	ldr	r7, [sp, #28]
    433c:	ldr	lr, [sp, #12]
    4340:	add	sp, sp, #32
    4344:	bx	lr
    4348:	.word	0x00000000
    434c:	.word	0x000002b5
    4350:	.word	0x000009bd
    4354:	.word	0x00000000
    4358:	.word	0x000001cc

0000435c <coda_bin_cursor_read_double_partial_array>:
    435c:	mov	ip, sp
    4360:	sub	sp, sp, #32
    4364:	str	ip, [sp, #8]
    4368:	str	lr, [sp, #12]
    436c:	str	r4, [sp, #16]
    4370:	str	r5, [sp, #20]
    4374:	str	r6, [sp, #24]
    4378:	str	r7, [sp, #28]
    437c:	mov	r6, r3
    4380:	mov	r4, r2
    4384:	mov	r5, r1
    4388:	mov	r7, r0
    438c:	ldr	r1, [r7, #4]
    4390:	lsl	r3, r1, #4
    4394:	add	r1, r7, r3
    4398:	sub	lr, r1, #4096	; 0x1000
    439c:	ldr	r1, [lr, #4088]	; 0xff8
    43a0:	ldr	r3, [r1]
    43a4:	cmp	r3, #100	; 0x64
    43a8:	blt	43b0 <coda_bin_cursor_read_double_partial_array+0x54>
    43ac:	ldr	r1, [r1, #4]
    43b0:	ldr	r2, [r1, #40]	; 0x28
    43b4:	ldr	r0, [r2]
    43b8:	cmp	r0, #1
    43bc:	bne	43e4 <coda_bin_cursor_read_double_partial_array+0x88>
    43c0:	ldr	r1, [pc, #132]	; 444c <coda_bin_cursor_read_double_partial_array+0xf0>
    43c4:	mov	r0, #8
    43c8:	str	r0, [sp, #4]
    43cc:	str	r6, [sp]
    43d0:	mov	r3, r4
    43d4:	mov	r2, r5
    43d8:	mov	r0, r7
    43dc:	bl	974 <read_partial_array>
    43e0:	b	4420 <coda_bin_cursor_read_double_partial_array+0xc4>
    43e4:	cmp	r0, #0
    43e8:	beq	4400 <coda_bin_cursor_read_double_partial_array+0xa4>
    43ec:	ldr	r0, [pc, #72]	; 443c <coda_bin_cursor_read_double_partial_array+0xe0>
    43f0:	ldr	r1, [pc, #72]	; 4440 <coda_bin_cursor_read_double_partial_array+0xe4>
    43f4:	movw	r2, #1318	; 0x526
    43f8:	ldr	r3, [pc, #68]	; 4444 <coda_bin_cursor_read_double_partial_array+0xe8>
    43fc:	bl	0 <__assert_fail>
    4400:	ldr	r1, [pc, #64]	; 4448 <coda_bin_cursor_read_double_partial_array+0xec>
    4404:	mov	r0, #8
    4408:	str	r0, [sp, #4]
    440c:	str	r6, [sp]
    4410:	mov	r3, r4
    4414:	mov	r2, r5
    4418:	mov	r0, r7
    441c:	bl	974 <read_partial_array>
    4420:	ldr	r4, [sp, #16]
    4424:	ldr	r5, [sp, #20]
    4428:	ldr	r6, [sp, #24]
    442c:	ldr	r7, [sp, #28]
    4430:	ldr	lr, [sp, #12]
    4434:	add	sp, sp, #32
    4438:	bx	lr
    443c:	.word	0x000002b5
    4440:	.word	0x000001cc
    4444:	.word	0x000009e6
	...

00004450 <coda_bin_cursor_read_char_partial_array>:
    4450:	mov	ip, sp
    4454:	sub	sp, sp, #32
    4458:	str	ip, [sp, #8]
    445c:	str	lr, [sp, #12]
    4460:	str	r4, [sp, #16]
    4464:	str	r5, [sp, #20]
    4468:	str	r6, [sp, #24]
    446c:	str	r7, [sp, #28]
    4470:	mov	r6, r3
    4474:	mov	r4, r2
    4478:	mov	r5, r1
    447c:	mov	r7, r0
    4480:	ldr	r1, [r7, #4]
    4484:	lsl	r3, r1, #4
    4488:	add	r1, r7, r3
    448c:	sub	lr, r1, #4096	; 0x1000
    4490:	ldr	r1, [lr, #4088]	; 0xff8
    4494:	ldr	r3, [r1]
    4498:	cmp	r3, #100	; 0x64
    449c:	blt	44a4 <coda_bin_cursor_read_char_partial_array+0x54>
    44a0:	ldr	r1, [r1, #4]
    44a4:	ldr	r2, [r1, #40]	; 0x28
    44a8:	ldr	r0, [r2]
    44ac:	cmp	r0, #1
    44b0:	bne	44d8 <coda_bin_cursor_read_char_partial_array+0x88>
    44b4:	ldr	r1, [pc, #132]	; 4540 <coda_bin_cursor_read_char_partial_array+0xf0>
    44b8:	mov	r0, #1
    44bc:	str	r0, [sp, #4]
    44c0:	str	r6, [sp]
    44c4:	mov	r3, r4
    44c8:	mov	r2, r5
    44cc:	mov	r0, r7
    44d0:	bl	974 <read_partial_array>
    44d4:	b	4514 <coda_bin_cursor_read_char_partial_array+0xc4>
    44d8:	cmp	r0, #0
    44dc:	beq	44f4 <coda_bin_cursor_read_char_partial_array+0xa4>
    44e0:	ldr	r0, [pc, #76]	; 4534 <coda_bin_cursor_read_char_partial_array+0xe4>
    44e4:	ldr	r1, [pc, #76]	; 4538 <coda_bin_cursor_read_char_partial_array+0xe8>
    44e8:	movw	r2, #1332	; 0x534
    44ec:	ldr	r3, [pc, #72]	; 453c <coda_bin_cursor_read_char_partial_array+0xec>
    44f0:	bl	0 <__assert_fail>
    44f4:	ldr	r1, [pc, #52]	; 4530 <coda_bin_cursor_read_char_partial_array+0xe0>
    44f8:	mov	r0, #1
    44fc:	str	r0, [sp, #4]
    4500:	str	r6, [sp]
    4504:	mov	r3, r4
    4508:	mov	r2, r5
    450c:	mov	r0, r7
    4510:	bl	974 <read_partial_array>
    4514:	ldr	r4, [sp, #16]
    4518:	ldr	r5, [sp, #20]
    451c:	ldr	r6, [sp, #24]
    4520:	ldr	r7, [sp, #28]
    4524:	ldr	lr, [sp, #12]
    4528:	add	sp, sp, #32
    452c:	bx	lr
    4530:	.word	0x00000000
    4534:	.word	0x000002b5
    4538:	.word	0x000001cc
    453c:	.word	0x00000a10
    4540:	.word	0x00000000
