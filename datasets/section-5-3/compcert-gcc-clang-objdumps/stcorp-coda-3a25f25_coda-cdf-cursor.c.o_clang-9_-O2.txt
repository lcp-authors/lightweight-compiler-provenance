
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_cdf_cursor_set_product>:
   0:	mov	r2, #1
   4:	stm	r0, {r1, r2}
   8:	mvn	r2, #0
   c:	ldr	r1, [r1, #20]
  10:	str	r2, [r0, #20]
  14:	str	r2, [r0, #16]
  18:	str	r2, [r0, #12]
  1c:	str	r1, [r0, #8]
  20:	mov	r0, #0
  24:	bx	lr

00000028 <coda_cdf_cursor_goto_array_element>:
  28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  2c:	add	fp, sp, #24
  30:	sub	sp, sp, #40	; 0x28
  34:	mov	r5, r0
  38:	ldr	r0, [r0, #4]
  3c:	add	r4, sp, #4
  40:	mov	r7, r2
  44:	mov	r6, r1
  48:	sub	r1, fp, #28
  4c:	mov	r2, r4
  50:	add	r0, r5, r0, lsl #4
  54:	ldr	r0, [r0, #-8]
  58:	ldr	r0, [r0, #4]
  5c:	bl	0 <coda_type_get_array_dim>
  60:	mvn	r8, #0
  64:	cmp	r0, #0
  68:	bne	114 <coda_cdf_cursor_goto_array_element+0xec>
  6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
  70:	cmp	r3, r6
  74:	bne	f0 <coda_cdf_cursor_goto_array_element+0xc8>
  78:	cmp	r6, #1
  7c:	mov	r0, #0
  80:	blt	bc <coda_cdf_cursor_goto_array_element+0x94>
  84:	mov	r1, #0
  88:	mov	r0, #0
  8c:	ldr	r2, [r7, r1, lsl #2]
  90:	ldr	r3, [r4, r1, lsl #2]
  94:	cmp	r2, #0
  98:	bmi	104 <coda_cdf_cursor_goto_array_element+0xdc>
  9c:	cmp	r2, r3
  a0:	bge	104 <coda_cdf_cursor_goto_array_element+0xdc>
  a4:	cmp	r1, #0
  a8:	add	r1, r1, #1
  ac:	movweq	r3, #1
  b0:	cmp	r6, r1
  b4:	mla	r0, r3, r0, r2
  b8:	bne	8c <coda_cdf_cursor_goto_array_element+0x64>
  bc:	ldr	r1, [r5, #4]
  c0:	mov	r8, #0
  c4:	add	r2, r5, r1, lsl #4
  c8:	add	r1, r1, #1
  cc:	ldr	r3, [r2, #-8]
  d0:	ldr	r3, [r3, #16]
  d4:	str	r1, [r5, #4]
  d8:	mvn	r1, #0
  dc:	str	r3, [r2, #8]
  e0:	str	r0, [r2, #12]
  e4:	str	r1, [r2, #16]
  e8:	str	r1, [r2, #20]
  ec:	b	114 <coda_cdf_cursor_goto_array_element+0xec>
  f0:	movw	r1, #0
  f4:	mvn	r0, #105	; 0x69
  f8:	mov	r2, r6
  fc:	movt	r1, #0
 100:	b	110 <coda_cdf_cursor_goto_array_element+0xe8>
 104:	movw	r1, #0
 108:	mvn	r0, #106	; 0x6a
 10c:	movt	r1, #0
 110:	bl	0 <coda_set_error>
 114:	mov	r0, r8
 118:	sub	sp, fp, #24
 11c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000120 <coda_cdf_cursor_goto_array_element_by_index>:
 120:	push	{r4, sl, fp, lr}
 124:	add	fp, sp, #8
 128:	mov	r4, r1
 12c:	mov	r1, r0
 130:	ldr	r0, [pc, #132]	; 1bc <coda_cdf_cursor_goto_array_element_by_index+0x9c>
 134:	ldr	r2, [pc, r0]
 138:	bl	0 <__aeabi_read_tp>
 13c:	ldr	r3, [r0, r2]
 140:	ldr	r0, [r1, #4]
 144:	sub	r2, r0, #1
 148:	cmp	r3, #0
 14c:	beq	170 <coda_cdf_cursor_goto_array_element_by_index+0x50>
 150:	add	r3, r1, r2, lsl #4
 154:	cmp	r4, #0
 158:	ldr	r3, [r3, #8]
 15c:	ldr	r3, [r3, #4]
 160:	ldr	r3, [r3, #44]	; 0x2c
 164:	bmi	1a0 <coda_cdf_cursor_goto_array_element_by_index+0x80>
 168:	cmp	r3, r4
 16c:	ble	1a0 <coda_cdf_cursor_goto_array_element_by_index+0x80>
 170:	add	r3, r1, #8
 174:	ldr	r2, [r3, r2, lsl #4]
 178:	ldr	ip, [r2, #16]
 17c:	add	r2, r0, #1
 180:	str	r2, [r1, #4]
 184:	str	ip, [r3, r0, lsl #4]!
 188:	mvn	r0, #0
 18c:	str	r4, [r3, #4]
 190:	str	r0, [r3, #8]
 194:	str	r0, [r3, #12]
 198:	mov	r0, #0
 19c:	pop	{r4, sl, fp, pc}
 1a0:	movw	r1, #0
 1a4:	mvn	r0, #106	; 0x6a
 1a8:	mov	r2, r4
 1ac:	movt	r1, #0
 1b0:	bl	0 <coda_set_error>
 1b4:	mvn	r0, #0
 1b8:	pop	{r4, sl, fp, pc}
 1bc:	.word	0x00000080

000001c0 <coda_cdf_cursor_goto_next_array_element>:
 1c0:	push	{fp, lr}
 1c4:	mov	fp, sp
 1c8:	mov	r1, r0
 1cc:	ldr	r0, [pc, #104]	; 23c <coda_cdf_cursor_goto_next_array_element+0x7c>
 1d0:	ldr	r2, [pc, r0]
 1d4:	bl	0 <__aeabi_read_tp>
 1d8:	ldr	r3, [r1, #4]
 1dc:	ldr	lr, [r0, r2]
 1e0:	sub	r0, r3, #1
 1e4:	cmp	lr, #0
 1e8:	add	ip, r1, r0, lsl #4
 1ec:	ldr	r0, [ip, #12]
 1f0:	add	r2, r0, #1
 1f4:	beq	218 <coda_cdf_cursor_goto_next_array_element+0x58>
 1f8:	add	r1, r1, r3, lsl #4
 1fc:	cmn	r0, #1
 200:	ldr	r1, [r1, #-24]	; 0xffffffe8
 204:	ldr	r1, [r1, #4]
 208:	ldr	r3, [r1, #44]	; 0x2c
 20c:	blt	224 <coda_cdf_cursor_goto_next_array_element+0x64>
 210:	cmp	r2, r3
 214:	bge	224 <coda_cdf_cursor_goto_next_array_element+0x64>
 218:	mov	r0, #0
 21c:	str	r2, [ip, #12]
 220:	pop	{fp, pc}
 224:	movw	r1, #0
 228:	mvn	r0, #106	; 0x6a
 22c:	movt	r1, #0
 230:	bl	0 <coda_set_error>
 234:	mvn	r0, #0
 238:	pop	{fp, pc}
 23c:	.word	0x00000064

00000240 <coda_cdf_cursor_goto_attributes>:
 240:	push	{r4, sl, fp, lr}
 244:	add	fp, sp, #8
 248:	ldr	r1, [r0, #4]
 24c:	mov	r4, r0
 250:	add	r0, r0, r1, lsl #4
 254:	add	r3, r1, #1
 258:	ldr	r2, [r0, #-8]
 25c:	str	r3, [r4, #4]
 260:	ldr	r3, [r2, #8]
 264:	cmp	r3, #2
 268:	bne	280 <coda_cdf_cursor_goto_attributes+0x40>
 26c:	ldr	r2, [r2, #12]
 270:	cmp	r2, #0
 274:	beq	280 <coda_cdf_cursor_goto_attributes+0x40>
 278:	str	r2, [r0, #8]
 27c:	b	298 <coda_cdf_cursor_goto_attributes+0x58>
 280:	mov	r0, #5
 284:	bl	0 <coda_mem_empty_record>
 288:	ldr	r1, [r4, #4]
 28c:	sub	r1, r1, #1
 290:	add	r2, r4, r1, lsl #4
 294:	str	r0, [r2, #8]
 298:	add	r0, r4, r1, lsl #4
 29c:	mvn	r1, #0
 2a0:	str	r1, [r0, #12]
 2a4:	str	r1, [r0, #16]
 2a8:	str	r1, [r0, #20]
 2ac:	mov	r0, #0
 2b0:	pop	{r4, sl, fp, pc}

000002b4 <coda_cdf_cursor_use_base_type_of_special_type>:
 2b4:	ldr	r1, [r0, #4]
 2b8:	add	r0, r0, r1, lsl #4
 2bc:	ldr	r1, [r0, #-8]
 2c0:	ldr	r1, [r1, #12]
 2c4:	str	r1, [r0, #-8]
 2c8:	mov	r0, #0
 2cc:	bx	lr

000002d0 <coda_cdf_cursor_get_num_elements>:
 2d0:	ldr	r2, [r0, #4]
 2d4:	add	r0, r0, r2, lsl #4
 2d8:	ldr	r0, [r0, #-8]
 2dc:	ldr	r2, [r0, #4]
 2e0:	mov	r0, #1
 2e4:	ldr	r3, [r2, #8]
 2e8:	cmp	r3, #1
 2ec:	ldreq	r0, [r2, #44]	; 0x2c
 2f0:	str	r0, [r1]
 2f4:	mov	r0, #0
 2f8:	bx	lr

000002fc <coda_cdf_cursor_get_string_length>:
 2fc:	ldr	r2, [r0, #4]
 300:	add	r0, r0, r2, lsl #4
 304:	ldr	r0, [r0, #-8]
 308:	ldr	r0, [r0, #4]
 30c:	b	0 <coda_type_get_string_length>

00000310 <coda_cdf_cursor_get_array_dim>:
 310:	ldr	r3, [r0, #4]
 314:	add	r0, r0, r3, lsl #4
 318:	ldr	r0, [r0, #-8]
 31c:	ldr	r0, [r0, #4]
 320:	b	0 <coda_type_get_array_dim>

00000324 <coda_cdf_cursor_read_int8>:
 324:	mvn	r2, #0
 328:	b	32c <read_basic_type>

0000032c <read_basic_type>:
 32c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 330:	add	fp, sp, #28
 334:	sub	sp, sp, #12
 338:	mov	r8, r1
 33c:	ldr	r1, [r0, #4]
 340:	mov	sl, r0
 344:	sub	r6, r1, #1
 348:	add	r0, r0, r6, lsl #4
 34c:	ldr	r7, [r0, #8]
 350:	mov	r0, #0
 354:	ldr	r3, [r7, #8]
 358:	cmp	r3, #0
 35c:	bne	378 <read_basic_type+0x4c>
 360:	add	r3, sl, #8
 364:	add	r1, r3, r1, lsl #4
 368:	add	r0, r3, r6, lsl #4
 36c:	ldr	r7, [r1, #-32]	; 0xffffffe0
 370:	ldr	r0, [r0, #4]
 374:	ldr	r3, [r7, #8]
 378:	cmp	r3, #2
 37c:	bne	52c <read_basic_type+0x200>
 380:	ldr	r1, [r7, #16]
 384:	cmp	r1, #0
 388:	beq	394 <read_basic_type+0x68>
 38c:	ldr	r1, [r1, #4]
 390:	b	398 <read_basic_type+0x6c>
 394:	ldr	r1, [r7, #4]
 398:	ldr	r3, [r7, #24]
 39c:	ldr	r5, [r7, #36]	; 0x24
 3a0:	add	ip, r1, #8
 3a4:	sdiv	r4, r0, r3
 3a8:	ldr	r6, [r5, r4, lsl #3]!
 3ac:	ldr	r5, [r5, #4]
 3b0:	cmn	r5, #1
 3b4:	ble	46c <read_basic_type+0x140>
 3b8:	ldr	r1, [r7, #28]
 3bc:	mls	r0, r4, r3, r0
 3c0:	ldr	r9, [ip]
 3c4:	mul	r0, r0, r1
 3c8:	mov	r4, r1
 3cc:	adds	r6, r6, r0
 3d0:	adc	r3, r5, r0, asr #31
 3d4:	ldr	r0, [r7, #40]	; 0x28
 3d8:	cmp	r1, r2
 3dc:	movgt	r4, r2
 3e0:	cmn	r2, #1
 3e4:	movle	r4, r1
 3e8:	cmp	r0, #0
 3ec:	beq	488 <read_basic_type+0x15c>
 3f0:	add	r1, r0, r6
 3f4:	mov	r0, r8
 3f8:	mov	r2, r4
 3fc:	bl	0 <memcpy>
 400:	mov	r0, #0
 404:	cmp	r9, #4
 408:	beq	4b4 <read_basic_type+0x188>
 40c:	ldr	r1, [sl]
 410:	ldr	r1, [r1, #68]	; 0x44
 414:	cmp	r1, #0
 418:	bne	4b4 <read_basic_type+0x188>
 41c:	ldr	r1, [r7, #28]
 420:	sub	r1, r1, #1
 424:	cmp	r1, #7
 428:	bhi	54c <read_basic_type+0x220>
 42c:	add	r2, pc, #0
 430:	ldr	pc, [r2, r1, lsl #2]
 434:	.word	0x000004b4
 438:	.word	0x00000454
 43c:	.word	0x0000054c
 440:	.word	0x00000504
 444:	.word	0x0000054c
 448:	.word	0x0000054c
 44c:	.word	0x0000054c
 450:	.word	0x000004bc
 454:	ldrb	r1, [r8]
 458:	ldrb	r2, [r8, #1]
 45c:	strb	r1, [r8, #1]
 460:	strb	r2, [r8]
 464:	sub	sp, fp, #28
 468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 46c:	movw	r1, #0
 470:	mvn	r0, #199	; 0xc7
 474:	movt	r1, #0
 478:	bl	0 <coda_set_error>
 47c:	mvn	r0, #0
 480:	sub	sp, fp, #28
 484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 488:	ldr	r0, [sl]
 48c:	asr	r1, r4, #31
 490:	mov	r2, r6
 494:	ldr	r0, [r0, #52]	; 0x34
 498:	str	r4, [sp]
 49c:	stmib	sp, {r1, r8}
 4a0:	bl	d08 <read_bytes>
 4a4:	mov	r1, r0
 4a8:	mvn	r0, #0
 4ac:	cmp	r1, #0
 4b0:	beq	400 <read_basic_type+0xd4>
 4b4:	sub	sp, fp, #28
 4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4bc:	ldrb	r1, [r8, #7]
 4c0:	ldrb	r2, [r8]
 4c4:	ldrb	r3, [r8, #1]
 4c8:	ldrb	r7, [r8, #2]
 4cc:	ldrb	r6, [r8, #3]
 4d0:	strb	r2, [r8, #7]
 4d4:	strb	r1, [r8]
 4d8:	ldrb	r1, [r8, #6]
 4dc:	strb	r1, [r8, #1]
 4e0:	strb	r3, [r8, #6]
 4e4:	ldrb	r1, [r8, #5]
 4e8:	strb	r1, [r8, #2]
 4ec:	strb	r7, [r8, #5]
 4f0:	ldrb	r1, [r8, #4]
 4f4:	strb	r1, [r8, #3]
 4f8:	strb	r6, [r8, #4]
 4fc:	sub	sp, fp, #28
 500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 504:	ldrb	r1, [r8]
 508:	ldrb	r2, [r8, #1]
 50c:	ldrb	r3, [r8, #2]
 510:	ldrb	r7, [r8, #3]
 514:	strb	r1, [r8, #3]
 518:	strb	r7, [r8]
 51c:	strb	r3, [r8, #1]
 520:	strb	r2, [r8, #2]
 524:	sub	sp, fp, #28
 528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 52c:	movw	r0, #0
 530:	movw	r1, #0
 534:	movw	r3, #0
 538:	movw	r2, #403	; 0x193
 53c:	movt	r0, #0
 540:	movt	r1, #0
 544:	movt	r3, #0
 548:	bl	0 <__assert_fail>
 54c:	movw	r0, #0
 550:	movw	r1, #0
 554:	movw	r3, #0
 558:	movw	r2, #462	; 0x1ce
 55c:	movt	r0, #0
 560:	b	540 <read_basic_type+0x214>

00000564 <coda_cdf_cursor_read_uint8>:
 564:	mvn	r2, #0
 568:	b	32c <read_basic_type>

0000056c <coda_cdf_cursor_read_int16>:
 56c:	mvn	r2, #0
 570:	b	32c <read_basic_type>

00000574 <coda_cdf_cursor_read_uint16>:
 574:	mvn	r2, #0
 578:	b	32c <read_basic_type>

0000057c <coda_cdf_cursor_read_int32>:
 57c:	mvn	r2, #0
 580:	b	32c <read_basic_type>

00000584 <coda_cdf_cursor_read_uint32>:
 584:	mvn	r2, #0
 588:	b	32c <read_basic_type>

0000058c <coda_cdf_cursor_read_int64>:
 58c:	mvn	r2, #0
 590:	b	32c <read_basic_type>

00000594 <coda_cdf_cursor_read_float>:
 594:	mvn	r2, #0
 598:	b	32c <read_basic_type>

0000059c <coda_cdf_cursor_read_double>:
 59c:	mvn	r2, #0
 5a0:	b	32c <read_basic_type>

000005a4 <coda_cdf_cursor_read_char>:
 5a4:	mvn	r2, #0
 5a8:	b	32c <read_basic_type>

000005ac <coda_cdf_cursor_read_string>:
 5ac:	push	{r4, r5, fp, lr}
 5b0:	add	fp, sp, #8
 5b4:	mov	r4, r2
 5b8:	mov	r5, r1
 5bc:	bl	32c <read_basic_type>
 5c0:	mov	r1, r0
 5c4:	mvn	r0, #0
 5c8:	cmp	r1, #0
 5cc:	moveq	r0, #0
 5d0:	addeq	r1, r4, r5
 5d4:	strbeq	r0, [r1, #-1]
 5d8:	pop	{r4, r5, fp, pc}

000005dc <coda_cdf_cursor_read_int8_array>:
 5dc:	b	5e0 <read_array>

000005e0 <read_array>:
 5e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 5e4:	add	fp, sp, #28
 5e8:	sub	sp, sp, #20
 5ec:	mov	sl, r0
 5f0:	ldr	r0, [r0, #4]
 5f4:	add	r0, sl, r0, lsl #4
 5f8:	ldr	r4, [r0, #-8]
 5fc:	ldr	r0, [r4, #8]
 600:	cmp	r0, #2
 604:	bne	870 <read_array+0x290>
 608:	ldr	r3, [r4, #16]
 60c:	ldr	r0, [r4, #24]
 610:	ldr	r2, [r4, #28]
 614:	str	r1, [sp, #16]
 618:	cmp	r3, #0
 61c:	beq	628 <read_array+0x48>
 620:	ldr	r1, [r3, #4]
 624:	b	62c <read_array+0x4c>
 628:	ldr	r1, [r4, #4]
 62c:	add	r3, r1, #8
 630:	ldr	r1, [r4, #20]
 634:	ldr	r3, [r3]
 638:	cmp	r1, #1
 63c:	str	r3, [sp, #12]
 640:	blt	6c4 <read_array+0xe4>
 644:	mul	r6, r2, r0
 648:	ldr	r7, [sp, #16]
 64c:	mov	r5, #0
 650:	mov	r8, #0
 654:	asr	r9, r6, #31
 658:	b	684 <read_array+0xa4>
 65c:	add	r1, r0, r2
 660:	mov	r0, r7
 664:	mov	r2, r6
 668:	bl	0 <memcpy>
 66c:	ldr	r1, [r4, #20]
 670:	add	r8, r8, #1
 674:	add	r7, r7, r6
 678:	add	r5, r5, #8
 67c:	cmp	r8, r1
 680:	bge	6c4 <read_array+0xe4>
 684:	ldr	r0, [r4, #36]	; 0x24
 688:	ldr	r2, [r0, r5]!
 68c:	ldr	r3, [r0, #4]
 690:	cmn	r3, #1
 694:	ble	6ec <read_array+0x10c>
 698:	ldr	r0, [r4, #40]	; 0x28
 69c:	cmp	r0, #0
 6a0:	bne	65c <read_array+0x7c>
 6a4:	ldr	r0, [sl]
 6a8:	ldr	r0, [r0, #52]	; 0x34
 6ac:	stm	sp, {r6, r9}
 6b0:	str	r7, [sp, #8]
 6b4:	bl	d08 <read_bytes>
 6b8:	cmp	r0, #0
 6bc:	beq	66c <read_array+0x8c>
 6c0:	b	6fc <read_array+0x11c>
 6c4:	ldr	r2, [sp, #12]
 6c8:	mov	r0, #0
 6cc:	cmp	r2, #4
 6d0:	beq	6e4 <read_array+0x104>
 6d4:	ldr	r2, [sl]
 6d8:	ldr	r2, [r2, #68]	; 0x44
 6dc:	cmp	r2, #1
 6e0:	bne	708 <read_array+0x128>
 6e4:	sub	sp, fp, #28
 6e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 6ec:	movw	r1, #0
 6f0:	mvn	r0, #199	; 0xc7
 6f4:	movt	r1, #0
 6f8:	bl	0 <coda_set_error>
 6fc:	mvn	r0, #0
 700:	sub	sp, fp, #28
 704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 708:	ldr	r2, [r4, #28]
 70c:	sub	r2, r2, #1
 710:	cmp	r2, #7
 714:	bhi	888 <read_array+0x2a8>
 718:	add	r3, pc, #0
 71c:	ldr	pc, [r3, r2, lsl #2]
 720:	.word	0x000006e4
 724:	.word	0x00000740
 728:	.word	0x00000888
 72c:	.word	0x00000814
 730:	.word	0x00000888
 734:	.word	0x00000888
 738:	.word	0x00000888
 73c:	.word	0x0000078c
 740:	ldr	r2, [r4, #24]
 744:	mul	r1, r2, r1
 748:	cmp	r1, #1
 74c:	blt	6e4 <read_array+0x104>
 750:	ldr	r6, [sp, #16]
 754:	mov	r0, #0
 758:	mov	r1, #0
 75c:	mov	r2, r6
 760:	ldrb	r3, [r2, r1, lsl #1]!
 764:	add	r1, r1, #1
 768:	ldrb	r7, [r2, #1]
 76c:	strb	r7, [r2]
 770:	strb	r3, [r2, #1]
 774:	ldr	r2, [r4, #20]
 778:	ldr	r3, [r4, #24]
 77c:	mul	r2, r3, r2
 780:	cmp	r1, r2
 784:	blt	75c <read_array+0x17c>
 788:	b	6e4 <read_array+0x104>
 78c:	ldr	r2, [r4, #24]
 790:	mul	r1, r2, r1
 794:	cmp	r1, #1
 798:	blt	6e4 <read_array+0x104>
 79c:	ldr	r8, [sp, #16]
 7a0:	mov	r0, #0
 7a4:	mov	r1, #7
 7a8:	mov	r2, #0
 7ac:	mov	r3, r8
 7b0:	ldrb	r7, [r3, r1]!
 7b4:	add	r1, r1, #8
 7b8:	ldrb	r6, [r3, #-7]
 7bc:	strb	r6, [r3]
 7c0:	strb	r7, [r3, #-7]
 7c4:	add	r3, r8, r2, lsl #3
 7c8:	add	r2, r2, #1
 7cc:	ldrb	r7, [r3, #6]
 7d0:	ldrb	r6, [r3, #1]
 7d4:	ldrb	lr, [r3, #2]
 7d8:	ldrb	ip, [r3, #3]
 7dc:	ldrb	r5, [r3, #4]
 7e0:	strb	r6, [r3, #6]
 7e4:	strb	r7, [r3, #1]
 7e8:	ldrb	r6, [r3, #5]
 7ec:	strb	r6, [r3, #2]
 7f0:	strb	lr, [r3, #5]
 7f4:	strb	r5, [r3, #3]
 7f8:	strb	ip, [r3, #4]
 7fc:	ldr	r3, [r4, #20]
 800:	ldr	r7, [r4, #24]
 804:	mul	r3, r7, r3
 808:	cmp	r2, r3
 80c:	blt	7ac <read_array+0x1cc>
 810:	b	6e4 <read_array+0x104>
 814:	ldr	r2, [r4, #24]
 818:	mul	r1, r2, r1
 81c:	cmp	r1, #1
 820:	blt	6e4 <read_array+0x104>
 824:	ldr	ip, [sp, #16]
 828:	mov	r0, #0
 82c:	mov	r1, #0
 830:	mov	r2, ip
 834:	ldrb	r3, [r2, r1, lsl #2]!
 838:	add	r1, r1, #1
 83c:	ldrb	r7, [r2, #1]
 840:	ldrb	r6, [r2, #2]
 844:	ldrb	r5, [r2, #3]
 848:	strb	r5, [r2]
 84c:	strb	r6, [r2, #1]
 850:	strb	r7, [r2, #2]
 854:	strb	r3, [r2, #3]
 858:	ldr	r2, [r4, #20]
 85c:	ldr	r3, [r4, #24]
 860:	mul	r2, r3, r2
 864:	cmp	r1, r2
 868:	blt	830 <read_array+0x250>
 86c:	b	6e4 <read_array+0x104>
 870:	movw	r0, #0
 874:	movw	r1, #0
 878:	movw	r3, #0
 87c:	mov	r2, #215	; 0xd7
 880:	movt	r0, #0
 884:	b	89c <read_array+0x2bc>
 888:	movw	r0, #0
 88c:	movw	r1, #0
 890:	movw	r3, #0
 894:	movw	r2, #278	; 0x116
 898:	movt	r0, #0
 89c:	movt	r1, #0
 8a0:	movt	r3, #0
 8a4:	bl	0 <__assert_fail>

000008a8 <coda_cdf_cursor_read_uint8_array>:
 8a8:	b	5e0 <read_array>

000008ac <coda_cdf_cursor_read_int16_array>:
 8ac:	b	5e0 <read_array>

000008b0 <coda_cdf_cursor_read_uint16_array>:
 8b0:	b	5e0 <read_array>

000008b4 <coda_cdf_cursor_read_int32_array>:
 8b4:	b	5e0 <read_array>

000008b8 <coda_cdf_cursor_read_uint32_array>:
 8b8:	b	5e0 <read_array>

000008bc <coda_cdf_cursor_read_int64_array>:
 8bc:	b	5e0 <read_array>

000008c0 <coda_cdf_cursor_read_float_array>:
 8c0:	b	5e0 <read_array>

000008c4 <coda_cdf_cursor_read_double_array>:
 8c4:	b	5e0 <read_array>

000008c8 <coda_cdf_cursor_read_char_array>:
 8c8:	b	5e0 <read_array>

000008cc <coda_cdf_cursor_read_int8_partial_array>:
 8cc:	b	8d0 <read_partial_array>

000008d0 <read_partial_array>:
 8d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8d4:	add	fp, sp, #28
 8d8:	sub	sp, sp, #52	; 0x34
 8dc:	str	r3, [fp, #-36]	; 0xffffffdc
 8e0:	ldr	r3, [r0, #4]
 8e4:	str	r0, [sp, #24]
 8e8:	add	r0, r0, r3, lsl #4
 8ec:	ldr	r6, [r0, #-8]
 8f0:	ldr	r0, [r6, #8]
 8f4:	cmp	r0, #2
 8f8:	bne	cac <read_partial_array+0x3dc>
 8fc:	ldr	r3, [r6, #16]
 900:	ldr	r0, [r6, #24]
 904:	ldr	r7, [r6, #28]
 908:	cmp	r3, #0
 90c:	beq	918 <read_partial_array+0x48>
 910:	ldr	r3, [r3, #4]
 914:	b	91c <read_partial_array+0x4c>
 918:	ldr	r3, [r6, #4]
 91c:	str	r2, [sp, #16]
 920:	add	r2, r2, r1
 924:	sdiv	r8, r1, r0
 928:	add	r3, r3, #8
 92c:	sdiv	r5, r2, r0
 930:	str	r2, [fp, #-32]	; 0xffffffe0
 934:	ldr	r2, [r3]
 938:	str	r2, [sp, #20]
 93c:	cmp	r8, r5
 940:	str	r5, [sp, #40]	; 0x28
 944:	bgt	a64 <read_partial_array+0x194>
 948:	mul	r0, r7, r0
 94c:	lsl	sl, r8, #3
 950:	mov	r9, #0
 954:	mov	r7, #0
 958:	str	r1, [sp, #28]
 95c:	str	r6, [sp, #32]
 960:	str	r0, [sp, #36]	; 0x24
 964:	b	9a8 <read_partial_array+0xd8>
 968:	ldr	r0, [fp, #-36]	; 0xffffffdc
 96c:	mov	r6, r1
 970:	add	r1, r2, lr
 974:	mov	r2, r4
 978:	add	r1, r5, r1
 97c:	add	r0, r0, r9
 980:	bl	0 <memcpy>
 984:	ldr	r1, [sp, #40]	; 0x28
 988:	adds	r9, r4, r9
 98c:	sub	r0, r8, #1
 990:	add	sl, sl, #8
 994:	adc	r7, r6, r7
 998:	ldr	r6, [sp, #32]
 99c:	cmp	r0, r1
 9a0:	ldr	r1, [sp, #28]
 9a4:	bge	a64 <read_partial_array+0x194>
 9a8:	ldr	r0, [r6, #36]	; 0x24
 9ac:	ldr	lr, [r0, sl]!
 9b0:	ldr	r3, [r0, #4]
 9b4:	cmn	r3, #1
 9b8:	ble	a90 <read_partial_array+0x1c0>
 9bc:	ldr	r2, [r6, #24]
 9c0:	ldr	r5, [fp, #-32]	; 0xffffffe0
 9c4:	ldr	r4, [sp, #36]	; 0x24
 9c8:	mul	r0, r2, r8
 9cc:	add	r8, r8, #1
 9d0:	mul	r2, r2, r8
 9d4:	cmp	r5, r2
 9d8:	bge	9ec <read_partial_array+0x11c>
 9dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
 9e0:	ldr	r5, [r6, #28]
 9e4:	sub	r2, r2, r0
 9e8:	mul	r4, r5, r2
 9ec:	cmp	r0, r1
 9f0:	bge	a14 <read_partial_array+0x144>
 9f4:	ldr	r2, [r6, #28]
 9f8:	sub	r0, r1, r0
 9fc:	mul	r2, r2, r0
 a00:	asr	r0, r4, #31
 a04:	subs	r4, r4, r2
 a08:	asr	ip, r2, #31
 a0c:	sbc	r1, r0, r2, asr #31
 a10:	b	a20 <read_partial_array+0x150>
 a14:	asr	r1, r4, #31
 a18:	mov	r2, #0
 a1c:	mov	ip, #0
 a20:	ldr	r5, [r6, #40]	; 0x28
 a24:	cmp	r5, #0
 a28:	bne	968 <read_partial_array+0x98>
 a2c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 a30:	adds	r2, r2, lr
 a34:	mov	r6, r1
 a38:	adc	r3, ip, r3
 a3c:	add	r5, r0, r9
 a40:	ldr	r0, [sp, #24]
 a44:	ldr	r0, [r0]
 a48:	ldr	r0, [r0, #52]	; 0x34
 a4c:	str	r4, [sp]
 a50:	stmib	sp, {r1, r5}
 a54:	bl	d08 <read_bytes>
 a58:	cmp	r0, #0
 a5c:	beq	984 <read_partial_array+0xb4>
 a60:	b	aa0 <read_partial_array+0x1d0>
 a64:	ldr	r1, [sp, #20]
 a68:	mov	r0, #0
 a6c:	cmp	r1, #4
 a70:	beq	a88 <read_partial_array+0x1b8>
 a74:	ldr	r1, [sp, #24]
 a78:	ldr	r1, [r1]
 a7c:	ldr	r1, [r1, #68]	; 0x44
 a80:	cmp	r1, #1
 a84:	bne	aac <read_partial_array+0x1dc>
 a88:	sub	sp, fp, #28
 a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a90:	movw	r1, #0
 a94:	mvn	r0, #199	; 0xc7
 a98:	movt	r1, #0
 a9c:	bl	0 <coda_set_error>
 aa0:	mvn	r0, #0
 aa4:	sub	sp, fp, #28
 aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 aac:	ldr	r1, [r6, #28]
 ab0:	ldr	r4, [sp, #16]
 ab4:	sub	r1, r1, #1
 ab8:	cmp	r1, #7
 abc:	bhi	cc4 <read_partial_array+0x3f4>
 ac0:	add	r2, pc, #0
 ac4:	ldr	pc, [r2, r1, lsl #2]
 ac8:	.word	0x00000a88
 acc:	.word	0x00000ae8
 ad0:	.word	0x00000cc4
 ad4:	.word	0x00000bb0
 ad8:	.word	0x00000cc4
 adc:	.word	0x00000cc4
 ae0:	.word	0x00000cc4
 ae4:	.word	0x00000b50
 ae8:	cmp	r4, #1
 aec:	blt	a88 <read_partial_array+0x1b8>
 af0:	mov	r1, #0
 af4:	cmp	r4, #16
 af8:	bcc	c78 <read_partial_array+0x3a8>
 afc:	bic	r1, r4, #15
 b00:	mov	r2, #1
 b04:	subs	r0, r1, #16
 b08:	add	r2, r2, r0, lsr #4
 b0c:	and	r0, r2, #1
 b10:	beq	c4c <read_partial_array+0x37c>
 b14:	ldr	r5, [fp, #-36]	; 0xffffffdc
 b18:	sub	r3, r2, r0
 b1c:	mov	r2, #0
 b20:	mov	r7, #64	; 0x40
 b24:	mov	r6, r5
 b28:	subs	r3, r3, #2
 b2c:	add	r2, r2, #32
 b30:	vld2.8	{d16-d19}, [r6]!
 b34:	vorr	q10, q8, q8
 b38:	vst2.8	{d18-d21}, [r5], r7
 b3c:	vld2.8	{d16-d19}, [r6]
 b40:	vorr	q10, q8, q8
 b44:	vst2.8	{d18-d21}, [r6]
 b48:	bne	b24 <read_partial_array+0x254>
 b4c:	b	c50 <read_partial_array+0x380>
 b50:	cmp	r4, #1
 b54:	blt	a88 <read_partial_array+0x1b8>
 b58:	ldr	r1, [fp, #-36]	; 0xffffffdc
 b5c:	add	r1, r1, #3
 b60:	ldrb	r2, [r1, #4]
 b64:	ldrb	r3, [r1, #-3]
 b68:	ldrb	r7, [r1, #-2]
 b6c:	ldrb	r6, [r1, #-1]
 b70:	ldrb	r5, [r1]
 b74:	subs	r4, r4, #1
 b78:	strb	r3, [r1, #4]
 b7c:	strb	r2, [r1, #-3]
 b80:	ldrb	r2, [r1, #3]
 b84:	strb	r2, [r1, #-2]
 b88:	strb	r7, [r1, #3]
 b8c:	ldrb	r2, [r1, #2]
 b90:	strb	r2, [r1, #-1]
 b94:	strb	r6, [r1, #2]
 b98:	ldrb	r2, [r1, #1]
 b9c:	strb	r2, [r1]
 ba0:	strb	r5, [r1, #1]
 ba4:	add	r1, r1, #8
 ba8:	bne	b60 <read_partial_array+0x290>
 bac:	b	a88 <read_partial_array+0x1b8>
 bb0:	cmp	r4, #1
 bb4:	blt	a88 <read_partial_array+0x1b8>
 bb8:	mov	r1, #0
 bbc:	cmp	r4, #15
 bc0:	bls	c08 <read_partial_array+0x338>
 bc4:	ldr	r2, [fp, #-36]	; 0xffffffdc
 bc8:	bic	r1, r4, #15
 bcc:	mov	r0, r1
 bd0:	mov	r3, r2
 bd4:	subs	r0, r0, #16
 bd8:	vld4.8	{d16,d18,d20,d22}, [r3]!
 bdc:	vld4.8	{d17,d19,d21,d23}, [r3]
 be0:	vorr	q12, q11, q11
 be4:	vorr	q13, q10, q10
 be8:	vorr	q14, q9, q9
 bec:	vorr	q15, q8, q8
 bf0:	vst4.8	{d24,d26,d28,d30}, [r2]!
 bf4:	vst4.8	{d25,d27,d29,d31}, [r2]!
 bf8:	bne	bd0 <read_partial_array+0x300>
 bfc:	mov	r0, #0
 c00:	cmp	r1, r4
 c04:	beq	a88 <read_partial_array+0x1b8>
 c08:	ldr	r0, [fp, #-36]	; 0xffffffdc
 c0c:	sub	r2, r4, r1
 c10:	add	r0, r0, r1, lsl #2
 c14:	add	r1, r0, #1
 c18:	ldrb	r0, [r1, #-1]
 c1c:	ldrb	r3, [r1]
 c20:	ldrb	r7, [r1, #1]
 c24:	ldrb	r6, [r1, #2]
 c28:	subs	r2, r2, #1
 c2c:	strb	r0, [r1, #2]
 c30:	strb	r6, [r1, #-1]
 c34:	strb	r7, [r1]
 c38:	strb	r3, [r1, #1]
 c3c:	add	r1, r1, #4
 c40:	mov	r0, #0
 c44:	bne	c18 <read_partial_array+0x348>
 c48:	b	a88 <read_partial_array+0x1b8>
 c4c:	mov	r2, #0
 c50:	cmp	r0, #0
 c54:	beq	c6c <read_partial_array+0x39c>
 c58:	ldr	r0, [fp, #-36]	; 0xffffffdc
 c5c:	add	r0, r0, r2, lsl #1
 c60:	vld2.8	{d16-d19}, [r0]
 c64:	vorr	q10, q8, q8
 c68:	vst2.8	{d18-d21}, [r0]
 c6c:	mov	r0, #0
 c70:	cmp	r1, r4
 c74:	beq	a88 <read_partial_array+0x1b8>
 c78:	ldr	r0, [fp, #-36]	; 0xffffffdc
 c7c:	sub	r2, r4, r1
 c80:	add	r0, r0, r1, lsl #1
 c84:	add	r1, r0, #1
 c88:	ldrb	r0, [r1, #-1]
 c8c:	ldrb	r3, [r1]
 c90:	subs	r2, r2, #1
 c94:	strb	r0, [r1]
 c98:	strb	r3, [r1, #-1]
 c9c:	add	r1, r1, #2
 ca0:	mov	r0, #0
 ca4:	bne	c88 <read_partial_array+0x3b8>
 ca8:	b	a88 <read_partial_array+0x1b8>
 cac:	movw	r0, #0
 cb0:	movw	r1, #0
 cb4:	movw	r3, #0
 cb8:	mov	r2, #296	; 0x128
 cbc:	movt	r0, #0
 cc0:	b	cd8 <read_partial_array+0x408>
 cc4:	movw	r0, #0
 cc8:	movw	r1, #0
 ccc:	movw	r3, #0
 cd0:	movw	r2, #379	; 0x17b
 cd4:	movt	r0, #0
 cd8:	movt	r1, #0
 cdc:	movt	r3, #0
 ce0:	bl	0 <__assert_fail>

00000ce4 <coda_cdf_cursor_read_uint8_partial_array>:
 ce4:	b	8d0 <read_partial_array>

00000ce8 <coda_cdf_cursor_read_int16_partial_array>:
 ce8:	b	8d0 <read_partial_array>

00000cec <coda_cdf_cursor_read_uint16_partial_array>:
 cec:	b	8d0 <read_partial_array>

00000cf0 <coda_cdf_cursor_read_int32_partial_array>:
 cf0:	b	8d0 <read_partial_array>

00000cf4 <coda_cdf_cursor_read_uint32_partial_array>:
 cf4:	b	8d0 <read_partial_array>

00000cf8 <coda_cdf_cursor_read_int64_partial_array>:
 cf8:	b	8d0 <read_partial_array>

00000cfc <coda_cdf_cursor_read_float_partial_array>:
 cfc:	b	8d0 <read_partial_array>

00000d00 <coda_cdf_cursor_read_double_partial_array>:
 d00:	b	8d0 <read_partial_array>

00000d04 <coda_cdf_cursor_read_char_partial_array>:
 d04:	b	8d0 <read_partial_array>

00000d08 <read_bytes>:
 d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 d0c:	add	fp, sp, #28
 d10:	sub	sp, sp, #68	; 0x44
 d14:	ldr	r7, [r0, #48]	; 0x30
 d18:	mov	r4, r2
 d1c:	ldr	r1, [fp, #12]
 d20:	ldr	r2, [fp, #8]
 d24:	ldr	ip, [fp, #16]
 d28:	mov	sl, r3
 d2c:	cmp	r7, #0
 d30:	beq	db4 <read_bytes+0xac>
 d34:	add	r9, r0, #40	; 0x28
 d38:	adds	r5, r2, r4
 d3c:	ldr	r8, [r9]
 d40:	ldr	r3, [r9, #4]
 d44:	adc	r6, r1, sl
 d48:	subs	r5, r8, r5
 d4c:	sbcs	r3, r3, r6
 d50:	bcs	dfc <read_bytes+0xf4>
 d54:	ldr	r0, [r0, #16]
 d58:	cmp	r0, #1
 d5c:	bls	de0 <read_bytes+0xd8>
 d60:	add	r8, sp, #47	; 0x2f
 d64:	mov	r0, r2
 d68:	mov	r2, r8
 d6c:	bl	0 <coda_str64>
 d70:	add	r7, sp, #26
 d74:	mov	r0, r4
 d78:	mov	r1, sl
 d7c:	mov	r2, r7
 d80:	bl	0 <coda_str64>
 d84:	ldrd	r0, [r9]
 d88:	add	r4, sp, #5
 d8c:	mov	r2, r4
 d90:	bl	0 <coda_str64>
 d94:	movw	r1, #0
 d98:	mvn	r0, #300	; 0x12c
 d9c:	mov	r2, r8
 da0:	mov	r3, r7
 da4:	str	r4, [sp]
 da8:	movt	r1, #0
 dac:	bl	0 <coda_set_error>
 db0:	b	df0 <read_bytes+0xe8>
 db4:	ldr	r3, [r0, #16]
 db8:	cmp	r3, #2
 dbc:	bcs	e58 <read_bytes+0x150>
 dc0:	add	r3, r0, #8
 dc4:	adds	r7, r2, r4
 dc8:	ldr	r6, [r3]
 dcc:	ldr	r3, [r3, #4]
 dd0:	adc	r1, r1, sl
 dd4:	subs	r7, r6, r7
 dd8:	sbcs	r1, r3, r1
 ddc:	bcs	e14 <read_bytes+0x10c>
 de0:	movw	r1, #0
 de4:	mvn	r0, #300	; 0x12c
 de8:	movt	r1, #0
 dec:	bl	0 <coda_set_error>
 df0:	mvn	r0, #0
 df4:	sub	sp, fp, #28
 df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 dfc:	add	r1, r7, r4
 e00:	mov	r0, ip
 e04:	bl	0 <memcpy>
 e08:	mov	r0, #0
 e0c:	sub	sp, fp, #28
 e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 e14:	ldr	r0, [r0, #56]	; 0x38
 e18:	mov	r1, ip
 e1c:	mov	r3, r4
 e20:	bl	0 <pread>
 e24:	mov	r1, r0
 e28:	mov	r0, #0
 e2c:	cmn	r1, #1
 e30:	bgt	df4 <read_bytes+0xec>
 e34:	bl	0 <__errno_location>
 e38:	ldr	r0, [r0]
 e3c:	bl	0 <strerror>
 e40:	movw	r1, #0
 e44:	mov	r2, r0
 e48:	mvn	r0, #21
 e4c:	movt	r1, #0
 e50:	bl	0 <coda_set_error>
 e54:	b	df0 <read_bytes+0xe8>
 e58:	movw	r0, #0
 e5c:	movw	r1, #0
 e60:	movw	r3, #0
 e64:	mov	r2, #83	; 0x53
 e68:	movt	r0, #0
 e6c:	movt	r1, #0
 e70:	movt	r3, #0
 e74:	bl	0 <__assert_fail>
