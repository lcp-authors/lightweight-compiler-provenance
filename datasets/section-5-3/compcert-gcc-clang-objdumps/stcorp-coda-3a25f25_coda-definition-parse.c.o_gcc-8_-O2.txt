
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dummy_free_handler>:
       0:	bx	lr

00000004 <dummy_init>:
       4:	mov	r0, #0
       8:	bx	lr

0000000c <bool_expression_init>:
       c:	ldr	r3, [r0]
      10:	mov	ip, #1
      14:	movw	r2, #0
      18:	movt	r2, #0
      1c:	movw	r1, #0
      20:	movt	r1, #0
      24:	mov	r0, #0
      28:	str	ip, [r3, #32]
      2c:	str	r1, [r3, #36]	; 0x24
      30:	str	r2, [r3, #40]	; 0x28
      34:	bx	lr

00000038 <integer_expression_init>:
      38:	ldr	r3, [r0]
      3c:	mov	ip, #1
      40:	movw	r2, #0
      44:	movt	r2, #0
      48:	movw	r1, #0
      4c:	movt	r1, #0
      50:	mov	r0, #0
      54:	str	ip, [r3, #32]
      58:	str	r1, [r3, #36]	; 0x24
      5c:	str	r2, [r3, #40]	; 0x28
      60:	bx	lr

00000064 <integer_constant_or_expression_init>:
      64:	ldr	r3, [r0]
      68:	mov	ip, #1
      6c:	movw	r2, #0
      70:	movt	r2, #0
      74:	movw	r1, #0
      78:	movt	r1, #0
      7c:	mov	r0, #0
      80:	str	ip, [r3, #32]
      84:	str	r1, [r3, #36]	; 0x24
      88:	str	r2, [r3, #40]	; 0x28
      8c:	bx	lr

00000090 <optional_integer_constant_or_expression_init>:
      90:	ldr	r3, [r0]
      94:	mov	ip, #1
      98:	movw	r2, #0
      9c:	movt	r2, #0
      a0:	movw	r1, #0
      a4:	movt	r1, #0
      a8:	mov	r0, #0
      ac:	str	ip, [r3, #32]
      b0:	str	r1, [r3, #36]	; 0x24
      b4:	str	r2, [r3, #40]	; 0x28
      b8:	bx	lr

000000bc <string_data_init>:
      bc:	ldr	r2, [r0]
      c0:	mov	r1, #1
      c4:	movw	r3, #0
      c8:	movt	r3, #0
      cc:	mov	r0, #0
      d0:	str	r1, [r2, #32]
      d4:	str	r3, [r2, #36]	; 0x24
      d8:	bx	lr

000000dc <void_expression_init>:
      dc:	ldr	r3, [r0]
      e0:	mov	ip, #1
      e4:	movw	r2, #0
      e8:	movt	r2, #0
      ec:	movw	r1, #0
      f0:	movt	r1, #0
      f4:	mov	r0, #0
      f8:	str	ip, [r3, #32]
      fc:	str	r1, [r3, #36]	; 0x24
     100:	str	r2, [r3, #40]	; 0x28
     104:	bx	lr

00000108 <cd_native_type_init>:
     108:	ldr	r2, [r0]
     10c:	mov	r1, #1
     110:	movw	r3, #0
     114:	movt	r3, #0
     118:	mov	r0, #0
     11c:	str	r1, [r2, #32]
     120:	str	r3, [r2, #36]	; 0x24
     124:	bx	lr

00000128 <cd_product_class_finalise>:
     128:	mov	r2, r0
     12c:	mov	r3, #0
     130:	mov	r0, r3
     134:	str	r3, [r2, #24]
     138:	bx	lr

0000013c <cd_scale_factor_set_type>:
     13c:	ldr	r3, [r0]
     140:	mov	r2, #0
     144:	mov	r0, r2
     148:	ldr	ip, [r3, #8]
     14c:	ldr	r1, [r3, #396]	; 0x18c
     150:	str	ip, [r1, #8]
     154:	str	r2, [r3, #8]
     158:	bx	lr

0000015c <handle_ziparchive_error>:
     15c:	push	{r0, r1, r2, r3}
     160:	movw	r1, #0
     164:	movt	r1, #0
     168:	movw	r0, #65136	; 0xfe70
     16c:	movt	r0, #65535	; 0xffff
     170:	push	{lr}		; (str lr, [sp, #-4]!)
     174:	sub	sp, sp, #12
     178:	bl	0 <coda_set_error>
     17c:	ldr	r0, [sp, #16]
     180:	add	r3, sp, #20
     184:	mov	r1, r3
     188:	str	r3, [sp, #4]
     18c:	bl	0 <coda_add_error_message_vargs>
     190:	add	sp, sp, #12
     194:	pop	{lr}		; (ldr lr, [sp], #4)
     198:	add	sp, sp, #16
     19c:	bx	lr

000001a0 <cd_scale_factor_init>:
     1a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
     1a4:	ldr	r5, [r1]
     1a8:	strd	r6, [sp, #8]
     1ac:	strd	r8, [sp, #16]
     1b0:	mov	r9, r0
     1b4:	str	sl, [sp, #24]
     1b8:	str	lr, [sp, #28]
     1bc:	cmp	r5, #0
     1c0:	beq	3e0 <cd_scale_factor_init+0x240>
     1c4:	movw	r8, #0
     1c8:	movt	r8, #0
     1cc:	mov	r6, r1
     1d0:	mov	r7, r1
     1d4:	mov	r4, r1
     1d8:	mov	r0, r5
     1dc:	b	1ec <cd_scale_factor_init+0x4c>
     1e0:	ldr	r0, [r4, #8]!
     1e4:	cmp	r0, #0
     1e8:	beq	208 <cd_scale_factor_init+0x68>
     1ec:	mov	r1, r8
     1f0:	bl	0 <strcmp>
     1f4:	cmp	r0, #0
     1f8:	bne	1e0 <cd_scale_factor_init+0x40>
     1fc:	ldr	r3, [r4, #4]
     200:	cmp	r3, #0
     204:	bne	424 <cd_scale_factor_init+0x284>
     208:	ldr	r4, [r9]
     20c:	ldr	r3, [r4, #396]	; 0x18c
     210:	ldr	r2, [r3, #48]	; 0x30
     214:	cmp	r2, #0
     218:	beq	45c <cd_scale_factor_init+0x2bc>
     21c:	ldr	r3, [r3, #44]	; 0x2c
     220:	mov	r2, #1
     224:	movw	r8, #0
     228:	movt	r8, #0
     22c:	mov	r0, r5
     230:	str	r3, [r4, #44]	; 0x2c
     234:	str	r2, [r4, #48]	; 0x30
     238:	b	248 <cd_scale_factor_init+0xa8>
     23c:	ldr	r0, [r6, #8]!
     240:	cmp	r0, #0
     244:	beq	264 <cd_scale_factor_init+0xc4>
     248:	mov	r1, r8
     24c:	bl	0 <strcmp>
     250:	cmp	r0, #0
     254:	bne	23c <cd_scale_factor_init+0x9c>
     258:	ldr	r3, [r6, #4]
     25c:	cmp	r3, #0
     260:	bne	408 <cd_scale_factor_init+0x268>
     264:	movw	r6, #0
     268:	movt	r6, #0
     26c:	b	27c <cd_scale_factor_init+0xdc>
     270:	ldr	r5, [r7, #8]!
     274:	cmp	r5, #0
     278:	beq	29c <cd_scale_factor_init+0xfc>
     27c:	mov	r0, r5
     280:	mov	r1, r6
     284:	bl	0 <strcmp>
     288:	cmp	r0, #0
     28c:	bne	270 <cd_scale_factor_init+0xd0>
     290:	ldr	r3, [r7, #4]
     294:	cmp	r3, #0
     298:	bne	440 <cd_scale_factor_init+0x2a0>
     29c:	movw	r1, #0
     2a0:	movt	r1, #0
     2a4:	movw	r2, #0
     2a8:	movt	r2, #0
     2ac:	movw	r0, #0
     2b0:	movt	r0, #0
     2b4:	str	r1, [r4, #40]	; 0x28
     2b8:	movw	r1, #0
     2bc:	movt	r1, #0
     2c0:	str	r0, [r4, #52]	; 0x34
     2c4:	movw	r0, #0
     2c8:	movt	r0, #0
     2cc:	str	r2, [r4, #56]	; 0x38
     2d0:	movw	r2, #0
     2d4:	movt	r2, #0
     2d8:	str	r1, [r4, #60]	; 0x3c
     2dc:	movw	r1, #0
     2e0:	movt	r1, #0
     2e4:	str	r2, [r4, #64]	; 0x40
     2e8:	movw	r2, #0
     2ec:	movt	r2, #0
     2f0:	str	r1, [r4, #88]	; 0x58
     2f4:	movw	r1, #0
     2f8:	movt	r1, #0
     2fc:	str	r2, [r4, #120]	; 0x78
     300:	movw	r2, #0
     304:	movt	r2, #0
     308:	str	r0, [r4, #132]	; 0x84
     30c:	movw	r0, #0
     310:	movt	r0, #0
     314:	str	r1, [r4, #160]	; 0xa0
     318:	movw	r1, #0
     31c:	movt	r1, #0
     320:	str	r2, [r4, #188]	; 0xbc
     324:	movw	r2, #0
     328:	movt	r2, #0
     32c:	str	r0, [r4, #192]	; 0xc0
     330:	movw	r0, #0
     334:	movt	r0, #0
     338:	str	r1, [r4, #200]	; 0xc8
     33c:	movw	r1, #0
     340:	movt	r1, #0
     344:	str	r2, [r4, #204]	; 0xcc
     348:	movw	r2, #0
     34c:	movt	r2, #0
     350:	str	r0, [r4, #208]	; 0xd0
     354:	movw	r0, #0
     358:	movt	r0, #0
     35c:	movw	r3, #0
     360:	movt	r3, #0
     364:	str	r0, [r4, #36]	; 0x24
     368:	mov	r0, #0
     36c:	str	r1, [r4, #212]	; 0xd4
     370:	movw	r1, #0
     374:	movt	r1, #0
     378:	str	r2, [r4, #220]	; 0xdc
     37c:	movw	r2, #0
     380:	movt	r2, #0
     384:	str	r3, [r4, #224]	; 0xe0
     388:	str	r3, [r4, #228]	; 0xe4
     38c:	str	r3, [r4, #232]	; 0xe8
     390:	str	r3, [r4, #236]	; 0xec
     394:	str	r3, [r4, #260]	; 0x104
     398:	str	r3, [r4, #292]	; 0x124
     39c:	str	r3, [r4, #304]	; 0x130
     3a0:	str	r3, [r4, #332]	; 0x14c
     3a4:	str	r3, [r4, #360]	; 0x168
     3a8:	str	r3, [r4, #364]	; 0x16c
     3ac:	str	r3, [r4, #372]	; 0x174
     3b0:	str	r3, [r4, #376]	; 0x178
     3b4:	str	r3, [r4, #380]	; 0x17c
     3b8:	str	r3, [r4, #384]	; 0x180
     3bc:	str	r3, [r4, #392]	; 0x188
     3c0:	str	r1, [r4, #96]	; 0x60
     3c4:	str	r2, [r4, #268]	; 0x10c
     3c8:	ldrd	r4, [sp]
     3cc:	ldrd	r6, [sp, #8]
     3d0:	ldrd	r8, [sp, #16]
     3d4:	ldr	sl, [sp, #24]
     3d8:	add	sp, sp, #28
     3dc:	pop	{pc}		; (ldr pc, [sp], #4)
     3e0:	ldr	r4, [r0]
     3e4:	ldr	r3, [r4, #396]	; 0x18c
     3e8:	ldr	r2, [r3, #48]	; 0x30
     3ec:	cmp	r2, #0
     3f0:	beq	45c <cd_scale_factor_init+0x2bc>
     3f4:	ldr	r3, [r3, #44]	; 0x2c
     3f8:	mov	r2, #1
     3fc:	str	r3, [r4, #44]	; 0x2c
     400:	str	r2, [r4, #48]	; 0x30
     404:	b	29c <cd_scale_factor_init+0xfc>
     408:	movw	r1, #0
     40c:	movt	r1, #0
     410:	movw	r0, #65136	; 0xfe70
     414:	movt	r0, #65535	; 0xffff
     418:	bl	0 <coda_set_error>
     41c:	mvn	r0, #0
     420:	b	3c8 <cd_scale_factor_init+0x228>
     424:	movw	r1, #0
     428:	movt	r1, #0
     42c:	movw	r0, #65136	; 0xfe70
     430:	movt	r0, #65535	; 0xffff
     434:	bl	0 <coda_set_error>
     438:	mvn	r0, #0
     43c:	b	3c8 <cd_scale_factor_init+0x228>
     440:	movw	r1, #0
     444:	movt	r1, #0
     448:	movw	r0, #65136	; 0xfe70
     44c:	movt	r0, #65535	; 0xffff
     450:	bl	0 <coda_set_error>
     454:	mvn	r0, #0
     458:	b	3c8 <cd_scale_factor_init+0x228>
     45c:	movw	r3, #0
     460:	movt	r3, #0
     464:	movw	r1, #0
     468:	movt	r1, #0
     46c:	movw	r0, #0
     470:	movt	r0, #0
     474:	movw	r2, #3242	; 0xcaa
     478:	bl	0 <__assert_fail>

0000047c <cd_native_type_finalise>:
     47c:	strd	r4, [sp, #-16]!
     480:	ldr	r5, [r0]
     484:	ldr	r4, [r5, #12]
     488:	str	r6, [sp, #8]
     48c:	str	lr, [sp, #12]
     490:	cmp	r4, #0
     494:	beq	624 <cd_native_type_finalise+0x1a8>
     498:	movw	r1, #0
     49c:	movt	r1, #0
     4a0:	mov	r0, r4
     4a4:	bl	0 <strcmp>
     4a8:	cmp	r0, #0
     4ac:	beq	4e4 <cd_native_type_finalise+0x68>
     4b0:	movw	r1, #0
     4b4:	movt	r1, #0
     4b8:	mov	r0, r4
     4bc:	bl	0 <strcmp>
     4c0:	cmp	r0, #0
     4c4:	bne	500 <cd_native_type_finalise+0x84>
     4c8:	mov	r2, #2
     4cc:	mov	r3, #0
     4d0:	strd	r2, [r5, #16]
     4d4:	ldrd	r4, [sp]
     4d8:	ldr	r6, [sp, #8]
     4dc:	add	sp, sp, #12
     4e0:	pop	{pc}		; (ldr pc, [sp], #4)
     4e4:	mov	r2, #0
     4e8:	mov	r3, #0
     4ec:	ldr	r6, [sp, #8]
     4f0:	strd	r2, [r5, #16]
     4f4:	ldrd	r4, [sp]
     4f8:	add	sp, sp, #12
     4fc:	pop	{pc}		; (ldr pc, [sp], #4)
     500:	movw	r1, #0
     504:	movt	r1, #0
     508:	mov	r0, r4
     50c:	bl	0 <strcmp>
     510:	cmp	r0, #0
     514:	beq	540 <cd_native_type_finalise+0xc4>
     518:	movw	r1, #0
     51c:	movt	r1, #0
     520:	mov	r0, r4
     524:	bl	0 <strcmp>
     528:	cmp	r0, #0
     52c:	bne	55c <cd_native_type_finalise+0xe0>
     530:	mov	r2, #6
     534:	mov	r3, #0
     538:	strd	r2, [r5, #16]
     53c:	b	4d4 <cd_native_type_finalise+0x58>
     540:	mov	r2, #4
     544:	mov	r3, #0
     548:	ldr	r6, [sp, #8]
     54c:	strd	r2, [r5, #16]
     550:	ldrd	r4, [sp]
     554:	add	sp, sp, #12
     558:	pop	{pc}		; (ldr pc, [sp], #4)
     55c:	movw	r1, #0
     560:	movt	r1, #0
     564:	mov	r0, r4
     568:	bl	0 <strcmp>
     56c:	cmp	r0, #0
     570:	beq	59c <cd_native_type_finalise+0x120>
     574:	movw	r1, #0
     578:	movt	r1, #0
     57c:	mov	r0, r4
     580:	bl	0 <strcmp>
     584:	cmp	r0, #0
     588:	bne	5ac <cd_native_type_finalise+0x130>
     58c:	mov	r2, #3
     590:	mov	r3, #0
     594:	strd	r2, [r5, #16]
     598:	b	4d4 <cd_native_type_finalise+0x58>
     59c:	mov	r2, #1
     5a0:	mov	r3, #0
     5a4:	strd	r2, [r5, #16]
     5a8:	b	4d4 <cd_native_type_finalise+0x58>
     5ac:	movw	r1, #0
     5b0:	movt	r1, #0
     5b4:	mov	r0, r4
     5b8:	bl	0 <strcmp>
     5bc:	cmp	r0, #0
     5c0:	bne	5d4 <cd_native_type_finalise+0x158>
     5c4:	mov	r2, #5
     5c8:	mov	r3, #0
     5cc:	strd	r2, [r5, #16]
     5d0:	b	4d4 <cd_native_type_finalise+0x58>
     5d4:	movw	r1, #0
     5d8:	movt	r1, #0
     5dc:	mov	r0, r4
     5e0:	bl	0 <strcmp>
     5e4:	cmp	r0, #0
     5e8:	bne	5fc <cd_native_type_finalise+0x180>
     5ec:	mov	r2, #7
     5f0:	mov	r3, #0
     5f4:	strd	r2, [r5, #16]
     5f8:	b	4d4 <cd_native_type_finalise+0x58>
     5fc:	movw	r1, #0
     600:	movt	r1, #0
     604:	mov	r0, r4
     608:	bl	0 <strcmp>
     60c:	cmp	r0, #0
     610:	bne	640 <cd_native_type_finalise+0x1c4>
     614:	mov	r2, #8
     618:	mov	r3, #0
     61c:	strd	r2, [r5, #16]
     620:	b	4d4 <cd_native_type_finalise+0x58>
     624:	movw	r1, #0
     628:	movt	r1, #0
     62c:	movw	r0, #65136	; 0xfe70
     630:	movt	r0, #65535	; 0xffff
     634:	bl	0 <coda_set_error>
     638:	mvn	r0, #0
     63c:	b	4d4 <cd_native_type_finalise+0x58>
     640:	movw	r1, #0
     644:	movt	r1, #0
     648:	mov	r0, r4
     64c:	bl	0 <strcmp>
     650:	cmp	r0, #0
     654:	bne	668 <cd_native_type_finalise+0x1ec>
     658:	mov	r2, #9
     65c:	mov	r3, #0
     660:	strd	r2, [r5, #16]
     664:	b	4d4 <cd_native_type_finalise+0x58>
     668:	movw	r1, #0
     66c:	movt	r1, #0
     670:	mov	r0, r4
     674:	bl	0 <strcmp>
     678:	cmp	r0, #0
     67c:	bne	690 <cd_native_type_finalise+0x214>
     680:	mov	r2, #10
     684:	mov	r3, #0
     688:	strd	r2, [r5, #16]
     68c:	b	4d4 <cd_native_type_finalise+0x58>
     690:	movw	r1, #0
     694:	movt	r1, #0
     698:	mov	r0, r4
     69c:	bl	0 <strcmp>
     6a0:	cmp	r0, #0
     6a4:	bne	6b8 <cd_native_type_finalise+0x23c>
     6a8:	mov	r2, #11
     6ac:	mov	r3, #0
     6b0:	strd	r2, [r5, #16]
     6b4:	b	4d4 <cd_native_type_finalise+0x58>
     6b8:	mov	r0, r4
     6bc:	movw	r1, #0
     6c0:	movt	r1, #0
     6c4:	bl	0 <strcmp>
     6c8:	cmp	r0, #0
     6cc:	bne	624 <cd_native_type_finalise+0x1a8>
     6d0:	mov	r2, #12
     6d4:	mov	r3, #0
     6d8:	strd	r2, [r5, #16]
     6dc:	b	4d4 <cd_native_type_finalise+0x58>

000006e0 <cd_product_definition_finalise>:
     6e0:	ldr	r3, [r0]
     6e4:	ldr	r0, [r3, #8]
     6e8:	b	0 <coda_product_definition_validate>

000006ec <cd_product_definition_add_product_variable>:
     6ec:	ldr	r3, [r0]
     6f0:	str	r4, [sp, #-8]!
     6f4:	mov	r4, r0
     6f8:	ldr	r1, [r3, #8]
     6fc:	ldr	r2, [r3, #396]	; 0x18c
     700:	ldr	r0, [r2, #8]
     704:	str	lr, [sp, #4]
     708:	bl	0 <coda_product_definition_add_product_variable>
     70c:	cmp	r0, #0
     710:	ldreq	r3, [r4]
     714:	mvnne	r0, #0
     718:	ldr	r4, [sp]
     71c:	add	sp, sp, #4
     720:	streq	r0, [r3, #8]
     724:	pop	{pc}		; (ldr pc, [sp], #4)

00000728 <cd_product_variable_finalise>:
     728:	ldr	r3, [r0]
     72c:	ldr	r0, [r3, #8]
     730:	b	0 <coda_product_variable_validate>

00000734 <cd_product_variable_set_init_expression>:
     734:	ldr	r3, [r0]
     738:	str	r4, [sp, #-8]!
     73c:	mov	r4, r0
     740:	ldr	r1, [r3, #8]
     744:	ldr	r2, [r3, #396]	; 0x18c
     748:	ldr	r0, [r2, #8]
     74c:	str	lr, [sp, #4]
     750:	bl	0 <coda_product_variable_set_init_expression>
     754:	cmp	r0, #0
     758:	ldreq	r3, [r4]
     75c:	mvnne	r0, #0
     760:	ldr	r4, [sp]
     764:	add	sp, sp, #4
     768:	streq	r0, [r3, #8]
     76c:	pop	{pc}		; (ldr pc, [sp], #4)

00000770 <cd_product_variable_set_size_expression>:
     770:	ldr	r3, [r0]
     774:	str	r4, [sp, #-8]!
     778:	mov	r4, r0
     77c:	ldr	r1, [r3, #8]
     780:	ldr	r2, [r3, #396]	; 0x18c
     784:	ldr	r0, [r2, #8]
     788:	str	lr, [sp, #4]
     78c:	bl	0 <coda_product_variable_set_size_expression>
     790:	cmp	r0, #0
     794:	ldreq	r3, [r4]
     798:	mvnne	r0, #0
     79c:	ldr	r4, [sp]
     7a0:	add	sp, sp, #4
     7a4:	streq	r0, [r3, #8]
     7a8:	pop	{pc}		; (ldr pc, [sp], #4)

000007ac <cd_product_definition_set_root_type>:
     7ac:	ldr	r3, [r0]
     7b0:	str	r4, [sp, #-8]!
     7b4:	ldr	r1, [r3, #8]
     7b8:	ldr	r2, [r3, #396]	; 0x18c
     7bc:	ldr	r0, [r2, #8]
     7c0:	str	lr, [sp, #4]
     7c4:	bl	0 <coda_product_definition_set_root_type>
     7c8:	adds	r0, r0, #0
     7cc:	ldr	r4, [sp]
     7d0:	add	sp, sp, #4
     7d4:	movne	r0, #1
     7d8:	rsb	r0, r0, #0
     7dc:	pop	{pc}		; (ldr pc, [sp], #4)

000007e0 <xml_root_set_field>:
     7e0:	ldr	r3, [r0]
     7e4:	str	r4, [sp, #-8]!
     7e8:	mov	r4, r0
     7ec:	ldr	r1, [r3, #8]
     7f0:	ldr	r2, [r3, #396]	; 0x18c
     7f4:	ldr	r0, [r2, #8]
     7f8:	str	lr, [sp, #4]
     7fc:	bl	0 <coda_type_record_add_field>
     800:	cmp	r0, #0
     804:	ldreq	r3, [r4]
     808:	mvnne	r0, #0
     80c:	ldr	r4, [sp]
     810:	add	sp, sp, #4
     814:	streq	r0, [r3, #8]
     818:	pop	{pc}		; (ldr pc, [sp], #4)

0000081c <cd_record_add_field>:
     81c:	b	7e0 <xml_root_set_field>

00000820 <cd_field_finalise>:
     820:	ldr	r3, [r0]
     824:	ldr	r0, [r3, #8]
     828:	b	0 <coda_type_record_field_validate>

0000082c <cd_field_set_bit_offset>:
     82c:	ldr	r3, [r0]
     830:	str	r4, [sp, #-8]!
     834:	mov	r4, r0
     838:	ldr	r1, [r3, #8]
     83c:	ldr	r2, [r3, #396]	; 0x18c
     840:	ldr	r0, [r2, #8]
     844:	str	lr, [sp, #4]
     848:	bl	0 <coda_type_record_field_set_bit_offset_expression>
     84c:	cmp	r0, #0
     850:	ldreq	r3, [r4]
     854:	mvnne	r0, #0
     858:	ldr	r4, [sp]
     85c:	add	sp, sp, #4
     860:	streq	r0, [r3, #8]
     864:	pop	{pc}		; (ldr pc, [sp], #4)

00000868 <cd_field_set_available>:
     868:	ldr	r3, [r0]
     86c:	str	r4, [sp, #-8]!
     870:	mov	r4, r0
     874:	ldr	r1, [r3, #8]
     878:	ldr	r2, [r3, #396]	; 0x18c
     87c:	ldr	r0, [r2, #8]
     880:	str	lr, [sp, #4]
     884:	bl	0 <coda_type_record_field_set_available_expression>
     888:	cmp	r0, #0
     88c:	ldreq	r3, [r4]
     890:	mvnne	r0, #0
     894:	ldr	r4, [sp]
     898:	add	sp, sp, #4
     89c:	streq	r0, [r3, #8]
     8a0:	pop	{pc}		; (ldr pc, [sp], #4)

000008a4 <cd_field_set_optional>:
     8a4:	ldr	r3, [r0]
     8a8:	ldr	r3, [r3, #396]	; 0x18c
     8ac:	ldr	r0, [r3, #8]
     8b0:	b	0 <coda_type_record_field_set_optional>

000008b4 <cd_union_add_field>:
     8b4:	ldr	r3, [r0]
     8b8:	str	r4, [sp, #-8]!
     8bc:	mov	r4, r0
     8c0:	ldr	r0, [r3, #8]
     8c4:	str	lr, [sp, #4]
     8c8:	bl	0 <coda_type_record_field_set_optional>
     8cc:	ldr	r3, [r4]
     8d0:	ldr	r1, [r3, #8]
     8d4:	ldr	r2, [r3, #396]	; 0x18c
     8d8:	ldr	r0, [r2, #8]
     8dc:	bl	0 <coda_type_record_add_field>
     8e0:	cmp	r0, #0
     8e4:	ldreq	r3, [r4]
     8e8:	mvnne	r0, #0
     8ec:	ldr	r4, [sp]
     8f0:	add	sp, sp, #4
     8f4:	streq	r0, [r3, #8]
     8f8:	pop	{pc}		; (ldr pc, [sp], #4)

000008fc <cd_field_set_hidden>:
     8fc:	ldr	r3, [r0]
     900:	ldr	r3, [r3, #396]	; 0x18c
     904:	ldr	r0, [r3, #8]
     908:	b	0 <coda_type_record_field_set_hidden>

0000090c <cd_field_set_type>:
     90c:	ldr	r3, [r0]
     910:	ldr	r1, [r3, #8]
     914:	ldr	r2, [r3, #396]	; 0x18c
     918:	ldr	r0, [r2, #8]
     91c:	b	0 <coda_type_record_field_set_type>

00000920 <type_set_description>:
     920:	ldr	r3, [r0]
     924:	ldr	r1, [r3, #12]
     928:	ldr	r3, [r3, #396]	; 0x18c
     92c:	cmp	r1, #0
     930:	ldr	r0, [r3, #8]
     934:	beq	93c <type_set_description+0x1c>
     938:	b	0 <coda_type_set_description>
     93c:	movw	r1, #0
     940:	movt	r1, #0
     944:	b	0 <coda_type_set_description>

00000948 <string_data_finalise>:
     948:	ldr	r3, [r0]
     94c:	strd	r4, [sp, #-36]!	; 0xffffffdc
     950:	strd	r6, [sp, #8]
     954:	strd	r8, [sp, #16]
     958:	strd	sl, [sp, #24]
     95c:	ldr	r6, [r3, #12]
     960:	str	lr, [sp, #32]
     964:	sub	sp, sp, #20
     968:	cmp	r6, #0
     96c:	beq	a2c <string_data_finalise+0xe4>
     970:	movw	r3, #0
     974:	movt	r3, #0
     978:	movw	sl, #0
     97c:	movt	sl, #0
     980:	movw	r8, #0
     984:	movt	r8, #0
     988:	str	r3, [sp, #8]
     98c:	movw	r3, #0
     990:	movt	r3, #0
     994:	movw	r9, #0
     998:	movt	r9, #0
     99c:	str	sl, [sp, #4]
     9a0:	mov	fp, r6
     9a4:	mov	sl, r8
     9a8:	str	r3, [sp, #12]
     9ac:	mov	r4, #0
     9b0:	mov	r8, r6
     9b4:	b	9bc <string_data_finalise+0x74>
     9b8:	add	fp, fp, #1
     9bc:	ldrb	r5, [r8, r4]
     9c0:	cmp	r5, #0
     9c4:	beq	a28 <string_data_finalise+0xe0>
     9c8:	cmp	r5, #38	; 0x26
     9cc:	addne	r4, r4, #1
     9d0:	strbne	r5, [fp]
     9d4:	bne	9b8 <string_data_finalise+0x70>
     9d8:	add	r6, r4, #1
     9dc:	mov	r2, #4
     9e0:	add	r7, r8, r6
     9e4:	mov	r1, r9
     9e8:	mov	r0, r7
     9ec:	bl	0 <strncmp>
     9f0:	cmp	r0, #0
     9f4:	addeq	r4, r4, #5
     9f8:	strbeq	r5, [fp]
     9fc:	beq	9b8 <string_data_finalise+0x70>
     a00:	mov	r2, #5
     a04:	mov	r1, sl
     a08:	mov	r0, r7
     a0c:	bl	0 <strncmp>
     a10:	cmp	r0, #0
     a14:	bne	a4c <string_data_finalise+0x104>
     a18:	mov	r2, #39	; 0x27
     a1c:	add	r4, r4, #6
     a20:	strb	r2, [fp]
     a24:	b	9b8 <string_data_finalise+0x70>
     a28:	strb	r5, [fp]
     a2c:	mov	r0, #0
     a30:	add	sp, sp, #20
     a34:	ldrd	r4, [sp]
     a38:	ldrd	r6, [sp, #8]
     a3c:	ldrd	r8, [sp, #16]
     a40:	ldrd	sl, [sp, #24]
     a44:	add	sp, sp, #32
     a48:	pop	{pc}		; (ldr pc, [sp], #4)
     a4c:	mov	r2, #3
     a50:	mov	r0, r7
     a54:	ldr	r1, [sp, #4]
     a58:	bl	0 <strncmp>
     a5c:	cmp	r0, #0
     a60:	bne	a74 <string_data_finalise+0x12c>
     a64:	mov	r2, #60	; 0x3c
     a68:	add	r4, r4, #4
     a6c:	strb	r2, [fp]
     a70:	b	9b8 <string_data_finalise+0x70>
     a74:	mov	r2, #3
     a78:	mov	r0, r7
     a7c:	ldr	r1, [sp, #8]
     a80:	bl	0 <strncmp>
     a84:	cmp	r0, #0
     a88:	beq	a64 <string_data_finalise+0x11c>
     a8c:	mov	r0, r7
     a90:	mov	r2, #5
     a94:	ldr	r1, [sp, #12]
     a98:	bl	0 <strncmp>
     a9c:	cmp	r0, #0
     aa0:	movne	r4, r6
     aa4:	strbne	r5, [fp]
     aa8:	bne	9b8 <string_data_finalise+0x70>
     aac:	mov	r3, #34	; 0x22
     ab0:	add	r4, r4, #6
     ab4:	strb	r3, [fp]
     ab8:	b	9b8 <string_data_finalise+0x70>

00000abc <data_dictionary_add_product_class>:
     abc:	ldr	r3, [r0]
     ac0:	str	r4, [sp, #-8]!
     ac4:	mov	r4, r0
     ac8:	ldr	r0, [r3, #8]
     acc:	str	lr, [sp, #4]
     ad0:	bl	0 <coda_data_dictionary_add_product_class>
     ad4:	cmp	r0, #0
     ad8:	ldreq	r3, [r4]
     adc:	mvnne	r0, #0
     ae0:	ldr	r4, [sp]
     ae4:	add	sp, sp, #4
     ae8:	streq	r0, [r3, #8]
     aec:	pop	{pc}		; (ldr pc, [sp], #4)

00000af0 <cd_product_class_add_product_type>:
     af0:	ldr	r3, [r0]
     af4:	str	r4, [sp, #-8]!
     af8:	mov	r4, r0
     afc:	ldr	r1, [r3, #8]
     b00:	ldr	r2, [r3, #396]	; 0x18c
     b04:	ldr	r0, [r2, #8]
     b08:	str	lr, [sp, #4]
     b0c:	bl	0 <coda_product_class_add_product_type>
     b10:	cmp	r0, #0
     b14:	ldreq	r3, [r4]
     b18:	mvnne	r0, #0
     b1c:	ldr	r4, [sp]
     b20:	add	sp, sp, #4
     b24:	streq	r0, [r3, #8]
     b28:	pop	{pc}		; (ldr pc, [sp], #4)

00000b2c <cd_product_type_add_product_definition>:
     b2c:	ldr	r3, [r0]
     b30:	str	r4, [sp, #-8]!
     b34:	mov	r4, r0
     b38:	ldr	r1, [r3, #8]
     b3c:	ldr	r2, [r3, #396]	; 0x18c
     b40:	ldr	r0, [r2, #8]
     b44:	str	lr, [sp, #4]
     b48:	bl	0 <coda_product_type_add_product_definition>
     b4c:	cmp	r0, #0
     b50:	ldreq	r3, [r4]
     b54:	mvnne	r0, #0
     b58:	ldr	r4, [sp]
     b5c:	add	sp, sp, #4
     b60:	streq	r0, [r3, #8]
     b64:	pop	{pc}		; (ldr pc, [sp], #4)

00000b68 <cd_product_definition_add_detection_rule>:
     b68:	ldr	r3, [r0]
     b6c:	str	r4, [sp, #-8]!
     b70:	mov	r4, r0
     b74:	ldr	r1, [r3, #8]
     b78:	ldr	r2, [r3, #396]	; 0x18c
     b7c:	ldr	r0, [r2, #8]
     b80:	str	lr, [sp, #4]
     b84:	bl	0 <coda_product_definition_add_detection_rule>
     b88:	cmp	r0, #0
     b8c:	ldreq	r3, [r4]
     b90:	mvnne	r0, #0
     b94:	ldr	r4, [sp]
     b98:	add	sp, sp, #4
     b9c:	streq	r0, [r3, #8]
     ba0:	pop	{pc}		; (ldr pc, [sp], #4)

00000ba4 <cd_detection_rule_init>:
     ba4:	strd	r4, [sp, #-16]!
     ba8:	movw	r3, #0
     bac:	movt	r3, #0
     bb0:	ldr	r4, [r0]
     bb4:	mov	r5, r0
     bb8:	str	r6, [sp, #8]
     bbc:	str	lr, [sp, #12]
     bc0:	str	r3, [r4, #40]	; 0x28
     bc4:	bl	0 <coda_detection_rule_new>
     bc8:	ldr	r3, [r5]
     bcc:	str	r0, [r4, #8]
     bd0:	ldr	r2, [r3, #8]
     bd4:	cmp	r2, #0
     bd8:	beq	c38 <cd_detection_rule_init+0x94>
     bdc:	movw	r1, #0
     be0:	movt	r1, #0
     be4:	movw	r0, #0
     be8:	movt	r0, #0
     bec:	movw	r2, #0
     bf0:	movt	r2, #0
     bf4:	str	r1, [r3, #144]	; 0x90
     bf8:	movw	ip, #0
     bfc:	movt	ip, #0
     c00:	str	r0, [r3, #148]	; 0x94
     c04:	movw	r1, #0
     c08:	movt	r1, #0
     c0c:	mov	r0, #0
     c10:	str	ip, [r3, #152]	; 0x98
     c14:	str	r1, [r3, #156]	; 0x9c
     c18:	str	r2, [r3, #316]	; 0x13c
     c1c:	str	r2, [r3, #320]	; 0x140
     c20:	str	r2, [r3, #324]	; 0x144
     c24:	str	r2, [r3, #328]	; 0x148
     c28:	ldrd	r4, [sp]
     c2c:	ldr	r6, [sp, #8]
     c30:	add	sp, sp, #12
     c34:	pop	{pc}		; (ldr pc, [sp], #4)
     c38:	mvn	r0, #0
     c3c:	b	c28 <cd_detection_rule_init+0x84>

00000c40 <cd_match_expression_init>:
     c40:	strd	r4, [sp, #-16]!
     c44:	str	r6, [sp, #8]
     c48:	mov	r6, r0
     c4c:	ldr	r0, [r1]
     c50:	str	lr, [sp, #12]
     c54:	cmp	r0, #0
     c58:	beq	c8c <cd_match_expression_init+0x4c>
     c5c:	movw	r5, #0
     c60:	movt	r5, #0
     c64:	mov	r4, r1
     c68:	b	c78 <cd_match_expression_init+0x38>
     c6c:	ldr	r0, [r4, #8]!
     c70:	cmp	r0, #0
     c74:	beq	c8c <cd_match_expression_init+0x4c>
     c78:	mov	r1, r5
     c7c:	bl	0 <strcmp>
     c80:	cmp	r0, #0
     c84:	bne	c6c <cd_match_expression_init+0x2c>
     c88:	ldr	r0, [r4, #4]
     c8c:	movw	r3, #0
     c90:	movt	r3, #0
     c94:	ldr	r4, [r6]
     c98:	str	r3, [r4, #40]	; 0x28
     c9c:	bl	0 <coda_detection_rule_entry_new>
     ca0:	ldr	r3, [r6]
     ca4:	str	r0, [r4, #8]
     ca8:	ldr	r2, [r3, #8]
     cac:	cmp	r2, #0
     cb0:	beq	cdc <cd_match_expression_init+0x9c>
     cb4:	movw	r2, #0
     cb8:	movt	r2, #0
     cbc:	mov	r1, #1
     cc0:	mov	r0, #0
     cc4:	str	r1, [r3, #32]
     cc8:	str	r2, [r3, #36]	; 0x24
     ccc:	ldrd	r4, [sp]
     cd0:	ldr	r6, [sp, #8]
     cd4:	add	sp, sp, #12
     cd8:	pop	{pc}		; (ldr pc, [sp], #4)
     cdc:	mvn	r0, #0
     ce0:	b	ccc <cd_match_expression_init+0x8c>

00000ce4 <cd_detection_rule_add_entry>:
     ce4:	ldr	r3, [r0]
     ce8:	ldr	r1, [r3, #8]
     cec:	cmp	r1, #0
     cf0:	beq	d28 <cd_detection_rule_add_entry+0x44>
     cf4:	ldr	r3, [r3, #396]	; 0x18c
     cf8:	str	r4, [sp, #-8]!
     cfc:	mov	r4, r0
     d00:	ldr	r0, [r3, #8]
     d04:	str	lr, [sp, #4]
     d08:	bl	0 <coda_detection_rule_add_entry>
     d0c:	cmp	r0, #0
     d10:	bne	d30 <cd_detection_rule_add_entry+0x4c>
     d14:	ldr	r3, [r4]
     d18:	str	r0, [r3, #8]
     d1c:	ldr	r4, [sp]
     d20:	add	sp, sp, #4
     d24:	pop	{pc}		; (ldr pc, [sp], #4)
     d28:	mov	r0, r1
     d2c:	bx	lr
     d30:	mvn	r0, #0
     d34:	b	d1c <cd_detection_rule_add_entry+0x38>

00000d38 <cd_match_data_init>:
     d38:	strd	r4, [sp, #-36]!	; 0xffffffdc
     d3c:	movw	r3, #0
     d40:	movt	r3, #0
     d44:	ldr	r4, [r1]
     d48:	strd	r6, [sp, #8]
     d4c:	strd	r8, [sp, #16]
     d50:	mov	r8, r0
     d54:	ldr	r9, [r0]
     d58:	strd	sl, [sp, #24]
     d5c:	cmp	r4, #0
     d60:	str	lr, [sp, #32]
     d64:	sub	sp, sp, #36	; 0x24
     d68:	str	r3, [r9, #40]	; 0x28
     d6c:	beq	1188 <cd_match_data_init+0x450>
     d70:	movw	sl, #0
     d74:	movt	sl, #0
     d78:	mov	r6, r1
     d7c:	mov	r7, r1
     d80:	mov	r0, r4
     d84:	b	d94 <cd_match_data_init+0x5c>
     d88:	ldr	r0, [r7, #8]!
     d8c:	cmp	r0, #0
     d90:	beq	1058 <cd_match_data_init+0x320>
     d94:	mov	r1, sl
     d98:	bl	0 <strcmp>
     d9c:	cmp	r0, #0
     da0:	bne	d88 <cd_match_data_init+0x50>
     da4:	ldr	r5, [r7, #4]
     da8:	movw	r7, #0
     dac:	movt	r7, #0
     db0:	mov	r0, r4
     db4:	b	dc4 <cd_match_data_init+0x8c>
     db8:	ldr	r0, [r6, #8]!
     dbc:	cmp	r0, #0
     dc0:	beq	1110 <cd_match_data_init+0x3d8>
     dc4:	mov	r1, r7
     dc8:	bl	0 <strcmp>
     dcc:	cmp	r0, #0
     dd0:	bne	db8 <cd_match_data_init+0x80>
     dd4:	ldr	r4, [r6, #4]
     dd8:	cmp	r4, #0
     ddc:	beq	1110 <cd_match_data_init+0x3d8>
     de0:	cmp	r5, #0
     de4:	bne	1204 <cd_match_data_init+0x4cc>
     de8:	ldr	r3, [r9, #396]	; 0x18c
     dec:	mov	r0, r4
     df0:	ldr	r3, [r3, #8]
     df4:	str	r3, [sp, #24]
     df8:	bl	0 <strdup>
     dfc:	subs	r3, r0, #0
     e00:	str	r3, [sp, #20]
     e04:	beq	11c0 <cd_match_data_init+0x488>
     e08:	mov	r0, r4
     e0c:	bl	0 <strlen>
     e10:	add	r0, r0, #6
     e14:	bl	0 <malloc>
     e18:	subs	r3, r0, #0
     e1c:	str	r3, [sp, #12]
     e20:	beq	12f0 <cd_match_data_init+0x5b8>
     e24:	ldr	r3, [sp, #20]
     e28:	ldrb	r4, [r3]
     e2c:	ldr	r3, [sp, #12]
     e30:	cmp	r4, #47	; 0x2f
     e34:	strb	r5, [r3]
     e38:	beq	11a8 <cd_match_data_init+0x470>
     e3c:	ldr	r6, [sp, #12]
     e40:	ldr	r0, [sp, #20]
     e44:	cmp	r4, #64	; 0x40
     e48:	movne	r3, #0
     e4c:	strne	r3, [sp, #16]
     e50:	bne	e68 <cd_match_data_init+0x130>
     e54:	mov	r3, #1
     e58:	strb	r4, [r6], #1
     e5c:	ldrb	r4, [r0, #1]
     e60:	add	r0, r0, r3
     e64:	str	r3, [sp, #16]
     e68:	cmp	r4, #123	; 0x7b
     e6c:	movw	sl, #0
     e70:	movt	sl, #0
     e74:	mov	r7, #0
     e78:	str	r8, [sp, #28]
     e7c:	movne	r8, #0
     e80:	beq	1090 <cd_match_data_init+0x358>
     e84:	cmp	r4, #64	; 0x40
     e88:	cmpne	r4, #47	; 0x2f
     e8c:	beq	11e4 <cd_match_data_init+0x4ac>
     e90:	cmp	r4, #0
     e94:	beq	11f8 <cd_match_data_init+0x4c0>
     e98:	mov	r5, r0
     e9c:	b	ea8 <cd_match_data_init+0x170>
     ea0:	cmp	r4, #0
     ea4:	beq	10d4 <cd_match_data_init+0x39c>
     ea8:	ldrb	r4, [r5, #1]!
     eac:	cmp	r4, #47	; 0x2f
     eb0:	cmpne	r4, #64	; 0x40
     eb4:	bne	ea0 <cd_match_data_init+0x168>
     eb8:	sub	r9, r4, #64	; 0x40
     ebc:	clz	r9, r9
     ec0:	lsr	r9, r9, #5
     ec4:	mov	r1, #0
     ec8:	strb	r7, [r5]
     ecc:	bl	0 <coda_identifier_from_name>
     ed0:	subs	fp, r0, #0
     ed4:	beq	10f8 <cd_match_data_init+0x3c0>
     ed8:	mov	r1, fp
     edc:	mov	r0, r6
     ee0:	bl	0 <strcpy>
     ee4:	mov	r0, fp
     ee8:	bl	0 <strlen>
     eec:	add	r6, r6, r0
     ef0:	mov	r0, fp
     ef4:	bl	0 <free>
     ef8:	cmp	r8, #0
     efc:	beq	fe4 <cd_match_data_init+0x2ac>
     f00:	mov	r3, #0
     f04:	mov	r0, #36	; 0x24
     f08:	str	r7, [sp]
     f0c:	mov	r2, r3
     f10:	mov	r1, r3
     f14:	str	r7, [sp, #4]
     f18:	bl	0 <coda_expression_new>
     f1c:	subs	r2, r0, #0
     f20:	beq	10f8 <cd_match_data_init+0x3c0>
     f24:	mov	r3, #0
     f28:	mov	r0, #75	; 0x4b
     f2c:	str	r7, [sp]
     f30:	mov	r1, r3
     f34:	str	r7, [sp, #4]
     f38:	bl	0 <coda_expression_new>
     f3c:	subs	fp, r0, #0
     f40:	beq	10f8 <cd_match_data_init+0x3c0>
     f44:	mov	r0, r8
     f48:	bl	0 <strdup>
     f4c:	subs	r1, r0, #0
     f50:	beq	1220 <cd_match_data_init+0x4e8>
     f54:	mov	r3, #0
     f58:	mov	r0, #22
     f5c:	str	r7, [sp]
     f60:	mov	r2, r3
     f64:	str	r7, [sp, #4]
     f68:	bl	0 <coda_expression_new>
     f6c:	subs	r3, r0, #0
     f70:	beq	1254 <cd_match_data_init+0x51c>
     f74:	mov	r2, fp
     f78:	mov	r1, #0
     f7c:	str	r7, [sp]
     f80:	mov	r0, #25
     f84:	str	r7, [sp, #4]
     f88:	bl	0 <coda_expression_new>
     f8c:	subs	r8, r0, #0
     f90:	beq	10f8 <cd_match_data_init+0x3c0>
     f94:	ldrh	r2, [sl, #4]
     f98:	ldrb	r3, [sl, #6]
     f9c:	ldr	r1, [sl]
     fa0:	ldr	r0, [sp, #12]
     fa4:	str	r1, [r6]
     fa8:	strh	r2, [r6, #4]
     fac:	strb	r3, [r6, #6]
     fb0:	bl	0 <coda_detection_rule_entry_new>
     fb4:	subs	fp, r0, #0
     fb8:	strb	r7, [r6]
     fbc:	beq	1248 <cd_match_data_init+0x510>
     fc0:	mov	r1, r8
     fc4:	bl	0 <coda_detection_rule_entry_set_expression>
     fc8:	cmp	r0, #0
     fcc:	bne	1288 <cd_match_data_init+0x550>
     fd0:	mov	r1, fp
     fd4:	ldr	r0, [sp, #24]
     fd8:	bl	0 <coda_detection_rule_add_entry>
     fdc:	cmp	r0, #0
     fe0:	bne	127c <cd_match_data_init+0x544>
     fe4:	cmp	r4, #0
     fe8:	bne	1060 <cd_match_data_init+0x328>
     fec:	ldr	r0, [sp, #20]
     ff0:	ldr	r8, [sp, #28]
     ff4:	bl	0 <free>
     ff8:	ldr	r5, [sp, #12]
     ffc:	ldr	r4, [r8]
    1000:	mov	r0, r5
    1004:	bl	0 <coda_detection_rule_entry_new>
    1008:	str	r0, [r4, #8]
    100c:	mov	r0, r5
    1010:	bl	0 <free>
    1014:	ldr	r2, [r8]
    1018:	ldr	r3, [r2, #8]
    101c:	cmp	r3, #0
    1020:	beq	1108 <cd_match_data_init+0x3d0>
    1024:	movw	r3, #0
    1028:	movt	r3, #0
    102c:	mov	r1, #1
    1030:	mov	r0, #0
    1034:	str	r1, [r2, #32]
    1038:	str	r3, [r2, #36]	; 0x24
    103c:	add	sp, sp, #36	; 0x24
    1040:	ldrd	r4, [sp]
    1044:	ldrd	r6, [sp, #8]
    1048:	ldrd	r8, [sp, #16]
    104c:	ldrd	sl, [sp, #24]
    1050:	add	sp, sp, #32
    1054:	pop	{pc}		; (ldr pc, [sp], #4)
    1058:	mov	r5, r0
    105c:	b	da8 <cd_match_data_init+0x70>
    1060:	ldr	r3, [sp, #16]
    1064:	cmp	r3, #0
    1068:	bne	1268 <cd_match_data_init+0x530>
    106c:	cmp	r4, #64	; 0x40
    1070:	add	r0, r5, #1
    1074:	str	r9, [sp, #16]
    1078:	movne	r4, #47	; 0x2f
    107c:	strb	r4, [r6], #1
    1080:	ldrb	r4, [r5, #1]
    1084:	cmp	r4, #123	; 0x7b
    1088:	movne	r8, #0
    108c:	bne	e84 <cd_match_data_init+0x14c>
    1090:	ldrb	r3, [r0, #1]
    1094:	add	r8, r0, #1
    1098:	cmp	r3, #125	; 0x7d
    109c:	beq	1260 <cd_match_data_init+0x528>
    10a0:	cmp	r3, #0
    10a4:	beq	10dc <cd_match_data_init+0x3a4>
    10a8:	mov	r2, r8
    10ac:	b	10b8 <cd_match_data_init+0x380>
    10b0:	cmp	r3, #0
    10b4:	beq	10dc <cd_match_data_init+0x3a4>
    10b8:	ldrb	r3, [r2, #1]!
    10bc:	cmp	r3, #125	; 0x7d
    10c0:	bne	10b0 <cd_match_data_init+0x378>
    10c4:	mov	r0, r2
    10c8:	strb	r7, [r0], #1
    10cc:	ldrb	r4, [r2, #1]
    10d0:	b	e84 <cd_match_data_init+0x14c>
    10d4:	mov	r9, r4
    10d8:	b	ec4 <cd_match_data_init+0x18c>
    10dc:	ldr	r3, [sp, #24]
    10e0:	movw	r1, #0
    10e4:	movt	r1, #0
    10e8:	ldr	r3, [r3, #8]
    10ec:	mvn	r0, #99	; 0x63
    10f0:	ldr	r2, [r3, #8]
    10f4:	bl	0 <coda_set_error>
    10f8:	ldr	r0, [sp, #12]
    10fc:	bl	0 <free>
    1100:	ldr	r0, [sp, #20]
    1104:	bl	0 <free>
    1108:	mvn	r0, #0
    110c:	b	103c <cd_match_data_init+0x304>
    1110:	mov	r0, #0
    1114:	bl	0 <coda_detection_rule_entry_new>
    1118:	ldr	r2, [r8]
    111c:	str	r0, [r9, #8]
    1120:	ldr	r3, [r2, #8]
    1124:	cmp	r3, #0
    1128:	beq	1108 <cd_match_data_init+0x3d0>
    112c:	cmp	r5, #0
    1130:	beq	1024 <cd_match_data_init+0x2ec>
    1134:	mov	r0, r5
    1138:	bl	0 <strdup>
    113c:	subs	r1, r0, #0
    1140:	beq	12cc <cd_match_data_init+0x594>
    1144:	mov	ip, #0
    1148:	mov	r0, #20
    114c:	mov	r3, ip
    1150:	mov	r2, ip
    1154:	str	ip, [sp]
    1158:	str	ip, [sp, #4]
    115c:	bl	0 <coda_expression_new>
    1160:	subs	r4, r0, #0
    1164:	beq	12ac <cd_match_data_init+0x574>
    1168:	ldr	r3, [r8]
    116c:	mov	r1, r4
    1170:	ldr	r0, [r3, #8]
    1174:	bl	0 <coda_detection_rule_entry_set_expression>
    1178:	cmp	r0, #0
    117c:	bne	129c <cd_match_data_init+0x564>
    1180:	ldr	r2, [r8]
    1184:	b	1024 <cd_match_data_init+0x2ec>
    1188:	mov	r0, r4
    118c:	bl	0 <coda_detection_rule_entry_new>
    1190:	ldr	r2, [r8]
    1194:	str	r0, [r9, #8]
    1198:	ldr	r3, [r2, #8]
    119c:	cmp	r3, #0
    11a0:	beq	1108 <cd_match_data_init+0x3d0>
    11a4:	b	1024 <cd_match_data_init+0x2ec>
    11a8:	mov	r6, r3
    11ac:	ldr	r3, [sp, #20]
    11b0:	strb	r4, [r6], #1
    11b4:	add	r0, r3, #1
    11b8:	ldrb	r4, [r3, #1]
    11bc:	b	e44 <cd_match_data_init+0x10c>
    11c0:	mvn	r0, #0
    11c4:	movw	r2, #0
    11c8:	movt	r2, #0
    11cc:	movw	r1, #0
    11d0:	movt	r1, #0
    11d4:	movw	r3, #2245	; 0x8c5
    11d8:	bl	0 <coda_set_error>
    11dc:	mvn	r0, #0
    11e0:	b	103c <cd_match_data_init+0x304>
    11e4:	sub	r9, r4, #64	; 0x40
    11e8:	mov	r5, r0
    11ec:	clz	r9, r9
    11f0:	lsr	r9, r9, #5
    11f4:	b	ec4 <cd_match_data_init+0x18c>
    11f8:	mov	r9, r4
    11fc:	mov	r5, r0
    1200:	b	ec4 <cd_match_data_init+0x18c>
    1204:	movw	r1, #0
    1208:	movt	r1, #0
    120c:	movw	r0, #65136	; 0xfe70
    1210:	movt	r0, #65535	; 0xffff
    1214:	bl	0 <coda_set_error>
    1218:	mvn	r0, #0
    121c:	b	103c <cd_match_data_init+0x304>
    1220:	movw	r3, #2359	; 0x937
    1224:	mvn	r0, #0
    1228:	movw	r2, #0
    122c:	movt	r2, #0
    1230:	movw	r1, #0
    1234:	movt	r1, #0
    1238:	bl	0 <coda_set_error>
    123c:	mov	r0, fp
    1240:	bl	0 <coda_expression_delete>
    1244:	b	10f8 <cd_match_data_init+0x3c0>
    1248:	mov	r0, r8
    124c:	bl	0 <coda_expression_delete>
    1250:	b	10f8 <cd_match_data_init+0x3c0>
    1254:	mov	r0, fp
    1258:	bl	0 <coda_expression_delete>
    125c:	b	10f8 <cd_match_data_init+0x3c0>
    1260:	mov	r2, r8
    1264:	b	10c4 <cd_match_data_init+0x38c>
    1268:	ldr	r3, [sp, #24]
    126c:	movw	r1, #0
    1270:	movt	r1, #0
    1274:	ldr	r3, [r3, #8]
    1278:	b	10ec <cd_match_data_init+0x3b4>
    127c:	mov	r0, fp
    1280:	bl	0 <coda_detection_rule_entry_delete>
    1284:	b	10f8 <cd_match_data_init+0x3c0>
    1288:	mov	r0, fp
    128c:	bl	0 <coda_detection_rule_entry_delete>
    1290:	mov	r0, r8
    1294:	bl	0 <coda_expression_delete>
    1298:	b	10f8 <cd_match_data_init+0x3c0>
    129c:	mov	r0, r4
    12a0:	bl	0 <coda_expression_delete>
    12a4:	mvn	r0, #0
    12a8:	b	103c <cd_match_data_init+0x304>
    12ac:	mov	r2, r5
    12b0:	movw	r1, #0
    12b4:	movt	r1, #0
    12b8:	movw	r0, #65136	; 0xfe70
    12bc:	movt	r0, #65535	; 0xffff
    12c0:	bl	0 <coda_set_error>
    12c4:	mvn	r0, #0
    12c8:	b	103c <cd_match_data_init+0x304>
    12cc:	mvn	r0, #0
    12d0:	movw	r2, #0
    12d4:	movt	r2, #0
    12d8:	movw	r1, #0
    12dc:	movt	r1, #0
    12e0:	movw	r3, #2459	; 0x99b
    12e4:	bl	0 <coda_set_error>
    12e8:	mvn	r0, #0
    12ec:	b	103c <cd_match_data_init+0x304>
    12f0:	mvn	r0, #0
    12f4:	movw	r2, #0
    12f8:	movt	r2, #0
    12fc:	movw	r1, #0
    1300:	movt	r1, #0
    1304:	movw	r3, #2257	; 0x8d1
    1308:	bl	0 <coda_set_error>
    130c:	mvn	r0, #0
    1310:	b	103c <cd_match_data_init+0x304>

00001314 <cd_product_definition_set_description>:
    1314:	ldr	r3, [r0]
    1318:	ldr	r1, [r3, #12]
    131c:	ldr	r3, [r3, #396]	; 0x18c
    1320:	cmp	r1, #0
    1324:	ldr	r0, [r3, #8]
    1328:	beq	1330 <cd_product_definition_set_description+0x1c>
    132c:	b	0 <coda_product_definition_set_description>
    1330:	movw	r1, #0
    1334:	movt	r1, #0
    1338:	b	0 <coda_product_definition_set_description>

0000133c <cd_product_type_set_description>:
    133c:	ldr	r3, [r0]
    1340:	ldr	r1, [r3, #12]
    1344:	ldr	r3, [r3, #396]	; 0x18c
    1348:	cmp	r1, #0
    134c:	ldr	r0, [r3, #8]
    1350:	beq	1358 <cd_product_type_set_description+0x1c>
    1354:	b	0 <coda_product_type_set_description>
    1358:	movw	r1, #0
    135c:	movt	r1, #0
    1360:	b	0 <coda_product_type_set_description>

00001364 <cd_product_class_set_description>:
    1364:	ldr	r3, [r0]
    1368:	ldr	r1, [r3, #12]
    136c:	ldr	r3, [r3, #396]	; 0x18c
    1370:	cmp	r1, #0
    1374:	ldr	r0, [r3, #8]
    1378:	beq	1380 <cd_product_class_set_description+0x1c>
    137c:	b	0 <coda_product_class_set_description>
    1380:	movw	r1, #0
    1384:	movt	r1, #0
    1388:	b	0 <coda_product_class_set_description>

0000138c <push_node>:
    138c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1390:	strd	r6, [sp, #8]
    1394:	mov	r6, r0
    1398:	mov	r0, #400	; 0x190
    139c:	mov	r7, r1
    13a0:	str	r8, [sp, #16]
    13a4:	mov	r8, r2
    13a8:	str	lr, [sp, #20]
    13ac:	bl	0 <malloc>
    13b0:	subs	r4, r0, #0
    13b4:	beq	149c <push_node+0x110>
    13b8:	mov	r5, #0
    13bc:	mvn	r3, #0
    13c0:	str	r7, [r4]
    13c4:	mvn	r2, #0
    13c8:	str	r5, [r4, #4]
    13cc:	str	r5, [r4, #8]
    13d0:	str	r5, [r4, #12]
    13d4:	strd	r2, [r4, #16]
    13d8:	bl	0 <coda_NaN>
    13dc:	mov	r1, r5
    13e0:	mov	r2, #172	; 0xac
    13e4:	vstr	d0, [r4, #24]
    13e8:	add	r0, r4, #52	; 0x34
    13ec:	str	r5, [r4, #32]
    13f0:	str	r5, [r4, #36]	; 0x24
    13f4:	str	r5, [r4, #40]	; 0x28
    13f8:	str	r5, [r4, #48]	; 0x30
    13fc:	bl	0 <memset>
    1400:	mov	r1, r5
    1404:	mov	r2, #172	; 0xac
    1408:	add	r0, r4, #224	; 0xe0
    140c:	bl	0 <memset>
    1410:	ldr	r1, [r6]
    1414:	str	r4, [r6]
    1418:	cmp	r1, r5
    141c:	str	r1, [r4, #396]	; 0x18c
    1420:	beq	1468 <push_node+0xdc>
    1424:	add	r1, r1, r7, lsl #2
    1428:	ldr	r3, [r1, #52]	; 0x34
    142c:	cmp	r3, #0
    1430:	beq	1468 <push_node+0xdc>
    1434:	mov	r1, r8
    1438:	mov	r0, r6
    143c:	blx	r3
    1440:	subs	r5, r0, #0
    1444:	bne	1494 <push_node+0x108>
    1448:	ldr	r3, [r4, #32]
    144c:	ldr	r0, [r6, #4]
    1450:	cmp	r3, #0
    1454:	beq	146c <push_node+0xe0>
    1458:	movw	r1, #0
    145c:	movt	r1, #0
    1460:	bl	0 <coda_XML_SetCharacterDataHandler>
    1464:	b	147c <push_node+0xf0>
    1468:	ldr	r0, [r6, #4]
    146c:	movw	r1, #0
    1470:	movt	r1, #0
    1474:	mov	r5, #0
    1478:	bl	0 <coda_XML_SetCharacterDataHandler>
    147c:	mov	r0, r5
    1480:	ldrd	r4, [sp]
    1484:	ldrd	r6, [sp, #8]
    1488:	ldr	r8, [sp, #16]
    148c:	add	sp, sp, #20
    1490:	pop	{pc}		; (ldr pc, [sp], #4)
    1494:	mvn	r5, #0
    1498:	b	147c <push_node+0xf0>
    149c:	movw	r1, #0
    14a0:	movt	r1, #0
    14a4:	ldr	r3, [pc, #12]	; 14b8 <push_node+0x12c>
    14a8:	movw	r0, #0
    14ac:	movt	r0, #0
    14b0:	movw	r2, #3877	; 0xf25
    14b4:	bl	0 <__assert_fail>
    14b8:	.word	0x00000018

000014bc <cd_vsf_integer_finalise>:
    14bc:	ldr	r3, [r0]
    14c0:	ldr	r0, [r3, #8]
    14c4:	b	0 <coda_type_vsf_integer_validate>

000014c8 <cd_vsf_integer_set_unit>:
    14c8:	ldr	r3, [r0]
    14cc:	ldr	r1, [r3, #12]
    14d0:	ldr	r3, [r3, #396]	; 0x18c
    14d4:	cmp	r1, #0
    14d8:	ldr	r0, [r3, #8]
    14dc:	beq	14e4 <cd_vsf_integer_set_unit+0x1c>
    14e0:	b	0 <coda_type_vsf_integer_set_unit>
    14e4:	movw	r1, #0
    14e8:	movt	r1, #0
    14ec:	b	0 <coda_type_vsf_integer_set_unit>

000014f0 <cd_vsf_integer_set_scale_factor>:
    14f0:	ldr	r3, [r0]
    14f4:	ldr	r1, [r3, #8]
    14f8:	ldr	r2, [r3, #396]	; 0x18c
    14fc:	ldr	r0, [r2, #8]
    1500:	b	0 <coda_type_vsf_integer_set_scale_factor>

00001504 <cd_vsf_integer_set_type>:
    1504:	ldr	r3, [r0]
    1508:	ldr	r1, [r3, #8]
    150c:	ldr	r2, [r3, #396]	; 0x18c
    1510:	ldr	r0, [r2, #8]
    1514:	b	0 <coda_type_vsf_integer_set_type>

00001518 <cd_record_finalise>:
    1518:	ldr	r3, [r0]
    151c:	ldr	r0, [r3, #8]
    1520:	b	0 <coda_type_record_validate>

00001524 <cd_union_finalise>:
    1524:	b	1518 <cd_record_finalise>

00001528 <type_add_attribute>:
    1528:	ldr	r3, [r0]
    152c:	str	r4, [sp, #-8]!
    1530:	mov	r4, r0
    1534:	ldr	r1, [r3, #8]
    1538:	ldr	r2, [r3, #396]	; 0x18c
    153c:	ldr	r0, [r2, #8]
    1540:	str	lr, [sp, #4]
    1544:	bl	0 <coda_type_add_attribute>
    1548:	cmp	r0, #0
    154c:	ldreq	r3, [r4]
    1550:	mvnne	r0, #0
    1554:	ldr	r4, [sp]
    1558:	add	sp, sp, #4
    155c:	streq	r0, [r3, #8]
    1560:	pop	{pc}		; (ldr pc, [sp], #4)

00001564 <cd_attribute_finalise>:
    1564:	ldr	r3, [r0]
    1568:	mov	r2, #0
    156c:	str	r4, [sp, #-8]!
    1570:	mov	r4, r0
    1574:	ldr	r0, [r3, #8]
    1578:	str	lr, [sp, #4]
    157c:	sub	sp, sp, #8
    1580:	add	r1, sp, #4
    1584:	str	r2, [sp, #4]
    1588:	bl	0 <coda_type_record_field_get_type>
    158c:	cmp	r0, #0
    1590:	bne	15fc <cd_attribute_finalise+0x98>
    1594:	ldr	r2, [sp, #4]
    1598:	ldr	r3, [r4]
    159c:	cmp	r2, #0
    15a0:	beq	15bc <cd_attribute_finalise+0x58>
    15a4:	ldr	r0, [r3, #8]
    15a8:	bl	0 <coda_type_record_field_validate>
    15ac:	add	sp, sp, #8
    15b0:	ldr	r4, [sp]
    15b4:	add	sp, sp, #4
    15b8:	pop	{pc}		; (ldr pc, [sp], #4)
    15bc:	ldr	r0, [r3, #44]	; 0x2c
    15c0:	bl	0 <coda_type_text_new>
    15c4:	cmp	r0, #0
    15c8:	str	r0, [sp, #4]
    15cc:	beq	15fc <cd_attribute_finalise+0x98>
    15d0:	ldr	r3, [r4]
    15d4:	mov	r1, r0
    15d8:	ldr	r0, [r3, #8]
    15dc:	bl	0 <coda_type_record_field_set_type>
    15e0:	cmp	r0, #0
    15e4:	ldr	r0, [sp, #4]
    15e8:	bne	15f8 <cd_attribute_finalise+0x94>
    15ec:	bl	0 <coda_type_release>
    15f0:	ldr	r3, [r4]
    15f4:	b	15a4 <cd_attribute_finalise+0x40>
    15f8:	bl	0 <coda_type_release>
    15fc:	mvn	r0, #0
    1600:	b	15ac <cd_attribute_finalise+0x48>

00001604 <cd_union_set_field_expression>:
    1604:	ldr	r3, [r0]
    1608:	str	r4, [sp, #-8]!
    160c:	mov	r4, r0
    1610:	ldr	r1, [r3, #8]
    1614:	ldr	r2, [r3, #396]	; 0x18c
    1618:	ldr	r0, [r2, #8]
    161c:	str	lr, [sp, #4]
    1620:	bl	0 <coda_type_union_set_field_expression>
    1624:	cmp	r0, #0
    1628:	ldreq	r3, [r4]
    162c:	mvnne	r0, #0
    1630:	ldr	r4, [sp]
    1634:	add	sp, sp, #4
    1638:	streq	r0, [r3, #8]
    163c:	pop	{pc}		; (ldr pc, [sp], #4)

00001640 <type_set_bit_size>:
    1640:	ldr	r3, [r0]
    1644:	str	r4, [sp, #-8]!
    1648:	mov	r4, r0
    164c:	ldr	r1, [r3, #8]
    1650:	ldr	r2, [r3, #396]	; 0x18c
    1654:	cmp	r1, #0
    1658:	ldr	r0, [r2, #8]
    165c:	str	lr, [sp, #4]
    1660:	beq	1684 <type_set_bit_size+0x44>
    1664:	bl	0 <coda_type_set_bit_size_expression>
    1668:	cmp	r0, #0
    166c:	bne	16a8 <type_set_bit_size+0x68>
    1670:	ldr	r3, [r4]
    1674:	str	r0, [r3, #8]
    1678:	ldr	r4, [sp]
    167c:	add	sp, sp, #4
    1680:	pop	{pc}		; (ldr pc, [sp], #4)
    1684:	ldr	r2, [r3, #16]
    1688:	asr	r3, r2, #31
    168c:	bl	0 <coda_type_set_bit_size>
    1690:	adds	r0, r0, #0
    1694:	ldr	r4, [sp]
    1698:	add	sp, sp, #4
    169c:	movne	r0, #1
    16a0:	rsb	r0, r0, #0
    16a4:	pop	{pc}		; (ldr pc, [sp], #4)
    16a8:	mvn	r0, #0
    16ac:	b	1678 <type_set_bit_size+0x38>

000016b0 <type_set_format>:
    16b0:	strd	r4, [sp, #-16]!
    16b4:	mov	r5, r0
    16b8:	ldr	r4, [r0, #8]
    16bc:	str	r6, [sp, #8]
    16c0:	mov	r6, r1
    16c4:	str	lr, [sp, #12]
    16c8:	sub	sp, sp, #8
    16cc:	str	r1, [r0]
    16d0:	cmp	r4, #1
    16d4:	beq	175c <type_set_format+0xac>
    16d8:	cmp	r4, #0
    16dc:	beq	1720 <type_set_format+0x70>
    16e0:	cmp	r4, #6
    16e4:	beq	1714 <type_set_format+0x64>
    16e8:	ldr	r0, [r5, #36]	; 0x24
    16ec:	cmp	r0, #0
    16f0:	beq	16fc <type_set_format+0x4c>
    16f4:	mov	r1, r6
    16f8:	bl	16b0 <type_set_format>
    16fc:	mov	r0, #0
    1700:	add	sp, sp, #8
    1704:	ldrd	r4, [sp]
    1708:	ldr	r6, [sp, #8]
    170c:	add	sp, sp, #12
    1710:	pop	{pc}		; (ldr pc, [sp], #4)
    1714:	ldr	r0, [r0, #44]	; 0x2c
    1718:	bl	16b0 <type_set_format>
    171c:	b	16e8 <type_set_format+0x38>
    1720:	add	r1, sp, #4
    1724:	bl	0 <coda_type_get_num_record_fields>
    1728:	ldr	r3, [sp, #4]
    172c:	cmp	r3, #0
    1730:	ble	16e8 <type_set_format+0x38>
    1734:	ldr	r3, [r5, #52]	; 0x34
    1738:	mov	r1, r6
    173c:	ldr	r3, [r3, r4, lsl #2]
    1740:	add	r4, r4, #1
    1744:	ldr	r0, [r3, #8]
    1748:	bl	16b0 <type_set_format>
    174c:	ldr	r3, [sp, #4]
    1750:	cmp	r3, r4
    1754:	bgt	1734 <type_set_format+0x84>
    1758:	b	16e8 <type_set_format+0x38>
    175c:	ldr	r0, [r0, #40]	; 0x28
    1760:	bl	16b0 <type_set_format>
    1764:	b	16e8 <type_set_format+0x38>

00001768 <cd_float_set_read_type>:
    1768:	ldr	r3, [r0]
    176c:	ldr	r1, [r3, #16]
    1770:	ldr	r2, [r3, #396]	; 0x18c
    1774:	ldr	r0, [r2, #8]
    1778:	b	0 <coda_type_set_read_type>

0000177c <cd_integer_set_read_type>:
    177c:	b	1768 <cd_float_set_read_type>

00001780 <cd_text_set_read_type>:
    1780:	b	1768 <cd_float_set_read_type>

00001784 <cd_float_set_unit>:
    1784:	ldr	r3, [r0]
    1788:	ldr	r1, [r3, #12]
    178c:	ldr	r3, [r3, #396]	; 0x18c
    1790:	cmp	r1, #0
    1794:	ldr	r0, [r3, #8]
    1798:	beq	17a0 <cd_float_set_unit+0x1c>
    179c:	b	0 <coda_type_number_set_unit>
    17a0:	movw	r1, #0
    17a4:	movt	r1, #0
    17a8:	b	0 <coda_type_number_set_unit>

000017ac <cd_integer_set_unit>:
    17ac:	b	1784 <cd_float_set_unit>

000017b0 <cd_time_set_type>:
    17b0:	ldr	r3, [r0]
    17b4:	ldr	r1, [r3, #8]
    17b8:	ldr	r2, [r3, #396]	; 0x18c
    17bc:	ldr	r0, [r2, #8]
    17c0:	b	0 <coda_type_time_set_base_type>

000017c4 <cd_time_finalise>:
    17c4:	ldr	r3, [r0]
    17c8:	ldr	r0, [r3, #8]
    17cc:	b	0 <coda_type_time_validate>

000017d0 <cd_time_add_mapping>:
    17d0:	ldr	r3, [r0]
    17d4:	str	r4, [sp, #-8]!
    17d8:	mov	r4, r0
    17dc:	ldr	r1, [r3, #8]
    17e0:	ldr	r2, [r3, #396]	; 0x18c
    17e4:	ldr	r0, [r2, #8]
    17e8:	str	lr, [sp, #4]
    17ec:	bl	0 <coda_type_time_add_ascii_float_mapping>
    17f0:	cmp	r0, #0
    17f4:	ldreq	r3, [r4]
    17f8:	mvnne	r0, #0
    17fc:	ldr	r4, [sp]
    1800:	add	sp, sp, #4
    1804:	streq	r0, [r3, #8]
    1808:	pop	{pc}		; (ldr pc, [sp], #4)

0000180c <cd_text_finalise>:
    180c:	ldr	r3, [r0]
    1810:	ldr	r0, [r3, #8]
    1814:	b	0 <coda_type_text_validate>

00001818 <type_set_byte_size>:
    1818:	ldr	r3, [r0]
    181c:	str	r4, [sp, #-8]!
    1820:	mov	r4, r0
    1824:	ldr	r1, [r3, #8]
    1828:	ldr	r2, [r3, #396]	; 0x18c
    182c:	cmp	r1, #0
    1830:	ldr	r0, [r2, #8]
    1834:	str	lr, [sp, #4]
    1838:	beq	185c <type_set_byte_size+0x44>
    183c:	bl	0 <coda_type_set_byte_size_expression>
    1840:	cmp	r0, #0
    1844:	bne	1880 <type_set_byte_size+0x68>
    1848:	ldr	r3, [r4]
    184c:	str	r0, [r3, #8]
    1850:	ldr	r4, [sp]
    1854:	add	sp, sp, #4
    1858:	pop	{pc}		; (ldr pc, [sp], #4)
    185c:	ldr	r2, [r3, #16]
    1860:	asr	r3, r2, #31
    1864:	bl	0 <coda_type_set_byte_size>
    1868:	adds	r0, r0, #0
    186c:	ldr	r4, [sp]
    1870:	add	sp, sp, #4
    1874:	movne	r0, #1
    1878:	rsb	r0, r0, #0
    187c:	pop	{pc}		; (ldr pc, [sp], #4)
    1880:	mvn	r0, #0
    1884:	b	1850 <type_set_byte_size+0x38>

00001888 <cd_raw_finalise>:
    1888:	ldr	r3, [r0]
    188c:	ldr	r0, [r3, #8]
    1890:	b	0 <coda_type_raw_validate>

00001894 <cd_float_finalise>:
    1894:	ldr	r3, [r0]
    1898:	ldr	r0, [r3, #8]
    189c:	b	0 <coda_type_number_validate>

000018a0 <cd_integer_finalise>:
    18a0:	b	1894 <cd_float_finalise>

000018a4 <cd_integer_add_mapping>:
    18a4:	ldr	r3, [r0]
    18a8:	str	r4, [sp, #-8]!
    18ac:	mov	r4, r0
    18b0:	ldr	r1, [r3, #8]
    18b4:	ldr	r2, [r3, #396]	; 0x18c
    18b8:	ldr	r0, [r2, #8]
    18bc:	str	lr, [sp, #4]
    18c0:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    18c4:	cmp	r0, #0
    18c8:	ldreq	r3, [r4]
    18cc:	mvnne	r0, #0
    18d0:	ldr	r4, [sp]
    18d4:	add	sp, sp, #4
    18d8:	streq	r0, [r3, #8]
    18dc:	pop	{pc}		; (ldr pc, [sp], #4)

000018e0 <cd_float_set_conversion>:
    18e0:	ldr	r3, [r0]
    18e4:	str	r4, [sp, #-8]!
    18e8:	mov	r4, r0
    18ec:	ldr	r1, [r3, #8]
    18f0:	ldr	r2, [r3, #396]	; 0x18c
    18f4:	ldr	r0, [r2, #8]
    18f8:	str	lr, [sp, #4]
    18fc:	bl	0 <coda_type_number_set_conversion>
    1900:	cmp	r0, #0
    1904:	ldreq	r3, [r4]
    1908:	mvnne	r0, #0
    190c:	ldr	r4, [sp]
    1910:	add	sp, sp, #4
    1914:	streq	r0, [r3, #8]
    1918:	pop	{pc}		; (ldr pc, [sp], #4)

0000191c <cd_integer_set_conversion>:
    191c:	b	18e0 <cd_float_set_conversion>

00001920 <cd_conversion_set_unit>:
    1920:	ldr	r3, [r0]
    1924:	ldr	r1, [r3, #12]
    1928:	ldr	r3, [r3, #396]	; 0x18c
    192c:	cmp	r1, #0
    1930:	ldr	r0, [r3, #8]
    1934:	beq	193c <cd_conversion_set_unit+0x1c>
    1938:	b	0 <coda_conversion_set_unit>
    193c:	movw	r1, #0
    1940:	movt	r1, #0
    1944:	b	0 <coda_conversion_set_unit>

00001948 <cd_float_set_little_endian>:
    1948:	ldr	r3, [r0]
    194c:	mov	r1, #1
    1950:	ldr	r3, [r3, #396]	; 0x18c
    1954:	ldr	r0, [r3, #8]
    1958:	b	0 <coda_type_number_set_endianness>

0000195c <cd_integer_set_little_endian>:
    195c:	b	1948 <cd_float_set_little_endian>

00001960 <cd_float_add_mapping>:
    1960:	ldr	r3, [r0]
    1964:	str	r4, [sp, #-8]!
    1968:	mov	r4, r0
    196c:	ldr	r1, [r3, #8]
    1970:	ldr	r2, [r3, #396]	; 0x18c
    1974:	ldr	r0, [r2, #8]
    1978:	str	lr, [sp, #4]
    197c:	bl	0 <coda_type_number_add_ascii_float_mapping>
    1980:	cmp	r0, #0
    1984:	ldreq	r3, [r4]
    1988:	mvnne	r0, #0
    198c:	ldr	r4, [sp]
    1990:	add	sp, sp, #4
    1994:	streq	r0, [r3, #8]
    1998:	pop	{pc}		; (ldr pc, [sp], #4)

0000199c <cd_complex_finalise>:
    199c:	ldr	r3, [r0]
    19a0:	ldr	r0, [r3, #8]
    19a4:	b	0 <coda_type_complex_validate>

000019a8 <cd_complex_set_type>:
    19a8:	ldr	r3, [r0]
    19ac:	ldr	r1, [r3, #8]
    19b0:	ldr	r2, [r3, #396]	; 0x18c
    19b4:	ldr	r0, [r2, #8]
    19b8:	b	0 <coda_type_complex_set_type>

000019bc <cd_array_finalise>:
    19bc:	ldr	r3, [r0]
    19c0:	ldr	r0, [r3, #8]
    19c4:	b	0 <coda_type_array_validate>

000019c8 <cd_array_add_dimension>:
    19c8:	ldr	r3, [r0]
    19cc:	str	r4, [sp, #-8]!
    19d0:	mov	r4, r0
    19d4:	ldr	r1, [r3, #8]
    19d8:	ldr	r2, [r3, #396]	; 0x18c
    19dc:	cmp	r1, #0
    19e0:	ldr	r0, [r2, #8]
    19e4:	str	lr, [sp, #4]
    19e8:	beq	1a0c <cd_array_add_dimension+0x44>
    19ec:	bl	0 <coda_type_array_add_variable_dimension>
    19f0:	cmp	r0, #0
    19f4:	bne	1a38 <cd_array_add_dimension+0x70>
    19f8:	ldr	r3, [r4]
    19fc:	str	r0, [r3, #8]
    1a00:	ldr	r4, [sp]
    1a04:	add	sp, sp, #4
    1a08:	pop	{pc}		; (ldr pc, [sp], #4)
    1a0c:	ldr	r2, [r3, #4]
    1a10:	cmp	r2, #0
    1a14:	bne	19ec <cd_array_add_dimension+0x24>
    1a18:	ldr	r1, [r3, #16]
    1a1c:	bl	0 <coda_type_array_add_fixed_dimension>
    1a20:	adds	r0, r0, #0
    1a24:	ldr	r4, [sp]
    1a28:	add	sp, sp, #4
    1a2c:	movne	r0, #1
    1a30:	rsb	r0, r0, #0
    1a34:	pop	{pc}		; (ldr pc, [sp], #4)
    1a38:	mvn	r0, #0
    1a3c:	b	1a00 <cd_array_add_dimension+0x38>

00001a40 <cd_array_set_type>:
    1a40:	ldr	r3, [r0]
    1a44:	ldr	r1, [r3, #8]
    1a48:	ldr	r2, [r3, #396]	; 0x18c
    1a4c:	ldr	r0, [r2, #8]
    1a50:	b	0 <coda_type_array_set_base_type>

00001a54 <parser_info_delete>:
    1a54:	strd	r4, [sp, #-16]!
    1a58:	mov	r5, r0
    1a5c:	ldr	r4, [r0]
    1a60:	str	r6, [sp, #8]
    1a64:	str	lr, [sp, #12]
    1a68:	cmp	r4, #0
    1a6c:	beq	1ab8 <parser_info_delete+0x64>
    1a70:	ldr	r0, [r4, #8]
    1a74:	cmp	r0, #0
    1a78:	beq	1a8c <parser_info_delete+0x38>
    1a7c:	ldr	r3, [r4, #40]	; 0x28
    1a80:	cmp	r3, #0
    1a84:	beq	1b00 <parser_info_delete+0xac>
    1a88:	blx	r3
    1a8c:	ldr	r0, [r4, #12]
    1a90:	cmp	r0, #0
    1a94:	beq	1a9c <parser_info_delete+0x48>
    1a98:	bl	0 <free>
    1a9c:	ldr	r3, [r4, #396]	; 0x18c
    1aa0:	mov	r0, r4
    1aa4:	str	r3, [r5]
    1aa8:	bl	0 <free>
    1aac:	ldr	r4, [r5]
    1ab0:	cmp	r4, #0
    1ab4:	bne	1a70 <parser_info_delete+0x1c>
    1ab8:	ldr	r0, [r5, #4]
    1abc:	cmp	r0, #0
    1ac0:	beq	1ac8 <parser_info_delete+0x74>
    1ac4:	bl	0 <coda_XML_ParserFree>
    1ac8:	ldr	r0, [r5, #8]
    1acc:	cmp	r0, #0
    1ad0:	beq	1ad8 <parser_info_delete+0x84>
    1ad4:	bl	0 <coda_hashtable_delete>
    1ad8:	ldr	r0, [r5, #12]
    1adc:	cmp	r0, #0
    1ae0:	beq	1ae8 <parser_info_delete+0x94>
    1ae4:	bl	0 <free>
    1ae8:	mov	r3, #0
    1aec:	ldr	r6, [sp, #8]
    1af0:	str	r3, [r5, #16]
    1af4:	ldrd	r4, [sp]
    1af8:	add	sp, sp, #12
    1afc:	pop	{pc}		; (ldr pc, [sp], #4)
    1b00:	movw	r1, #0
    1b04:	movt	r1, #0
    1b08:	ldr	r3, [pc, #12]	; 1b1c <parser_info_delete+0xc8>
    1b0c:	movw	r0, #0
    1b10:	movt	r0, #0
    1b14:	movw	r2, #4055	; 0xfd7
    1b18:	bl	0 <__assert_fail>
    1b1c:	.word	0x00000024

00001b20 <parse_entry>:
    1b20:	cmp	r1, #1
    1b24:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1b28:	strd	r6, [sp, #8]
    1b2c:	mov	r6, r1
    1b30:	mov	r7, r2
    1b34:	strd	r8, [sp, #16]
    1b38:	mov	r8, r0
    1b3c:	str	sl, [sp, #24]
    1b40:	mov	sl, r3
    1b44:	str	lr, [sp, #28]
    1b48:	sub	sp, sp, #64	; 0x40
    1b4c:	ldr	r9, [sp, #96]	; 0x60
    1b50:	beq	1db0 <parse_entry+0x290>
    1b54:	cmp	r1, #2
    1b58:	beq	1e24 <parse_entry+0x304>
    1b5c:	movw	r0, #0
    1b60:	movt	r0, #0
    1b64:	bl	0 <strdup>
    1b68:	subs	r4, r0, #0
    1b6c:	beq	1f94 <parse_entry+0x474>
    1b70:	mov	r1, r4
    1b74:	mov	r0, r8
    1b78:	bl	0 <coda_za_get_entry_by_name>
    1b7c:	subs	r5, r0, #0
    1b80:	beq	1fb4 <parse_entry+0x494>
    1b84:	mov	r0, r4
    1b88:	mov	r4, #1
    1b8c:	bl	0 <free>
    1b90:	mov	r3, #0
    1b94:	mov	r0, r5
    1b98:	str	r3, [sp, #12]
    1b9c:	str	r3, [sp, #16]
    1ba0:	str	r3, [sp, #20]
    1ba4:	str	r3, [sp, #24]
    1ba8:	str	r8, [sp, #28]
    1bac:	str	r7, [sp, #32]
    1bb0:	str	sl, [sp, #36]	; 0x24
    1bb4:	str	r9, [sp, #40]	; 0x28
    1bb8:	str	r3, [sp, #44]	; 0x2c
    1bbc:	str	r3, [sp, #48]	; 0x30
    1bc0:	str	r3, [sp, #52]	; 0x34
    1bc4:	str	r4, [sp, #56]	; 0x38
    1bc8:	str	r3, [sp, #60]	; 0x3c
    1bcc:	bl	0 <coda_za_get_entry_size>
    1bd0:	mov	r9, r0
    1bd4:	bl	0 <malloc>
    1bd8:	cmp	r0, #0
    1bdc:	mov	r1, r0
    1be0:	str	r0, [sp, #24]
    1be4:	beq	2058 <parse_entry+0x538>
    1be8:	mov	r0, r5
    1bec:	bl	0 <coda_za_read_entry>
    1bf0:	cmp	r0, #0
    1bf4:	bne	2050 <parse_entry+0x530>
    1bf8:	mov	r0, r4
    1bfc:	bl	0 <coda_hashtable_new>
    1c00:	cmp	r0, #0
    1c04:	str	r0, [sp, #20]
    1c08:	beq	20ac <parse_entry+0x58c>
    1c0c:	ldr	r4, [pc, #1428]	; 21a8 <parse_entry+0x688>
    1c10:	movw	r1, #0
    1c14:	movt	r1, #0
    1c18:	add	r5, r4, #168	; 0xa8
    1c1c:	b	1c28 <parse_entry+0x108>
    1c20:	ldr	r1, [r4, #4]!
    1c24:	ldr	r0, [sp, #20]
    1c28:	bl	0 <coda_hashtable_add_name>
    1c2c:	subs	sl, r0, #0
    1c30:	bne	2034 <parse_entry+0x514>
    1c34:	cmp	r4, r5
    1c38:	bne	1c20 <parse_entry+0x100>
    1c3c:	mov	r1, #32
    1c40:	bl	0 <coda_XML_ParserCreateNS>
    1c44:	cmp	r0, #0
    1c48:	str	r0, [sp, #16]
    1c4c:	beq	208c <parse_entry+0x56c>
    1c50:	add	r4, sp, #12
    1c54:	mov	r1, r4
    1c58:	bl	0 <coda_XML_SetUserData>
    1c5c:	movw	r2, #0
    1c60:	movt	r2, #0
    1c64:	ldr	r0, [sp, #16]
    1c68:	movw	r1, #0
    1c6c:	movt	r1, #0
    1c70:	bl	0 <coda_XML_SetElementHandler>
    1c74:	mov	r2, sl
    1c78:	mov	r0, r4
    1c7c:	mvn	r1, #0
    1c80:	bl	138c <push_node>
    1c84:	ldr	r3, [sp, #12]
    1c88:	cmp	r6, #1
    1c8c:	str	sl, [r3, #48]	; 0x30
    1c90:	beq	1e98 <parse_entry+0x378>
    1c94:	cmp	r6, #2
    1c98:	bne	1d24 <parse_entry+0x204>
    1c9c:	movw	r2, #0
    1ca0:	movt	r2, #0
    1ca4:	str	r2, [r3, #176]	; 0xb0
    1ca8:	str	sl, [r3, #348]	; 0x15c
    1cac:	ldr	ip, [pc, #1272]	; 21ac <parse_entry+0x68c>
    1cb0:	mov	lr, #0
    1cb4:	mrc	15, 0, r5, cr13, cr0, {3}
    1cb8:	mov	r2, r9
    1cbc:	mov	r3, #1
    1cc0:	ldr	r0, [sp, #16]
    1cc4:	ldr	r1, [sp, #24]
    1cc8:	ldr	ip, [pc, ip]
    1ccc:	str	lr, [r5, ip]
    1cd0:	bl	0 <coda_XML_Parse>
    1cd4:	cmp	r0, #0
    1cd8:	beq	1d40 <parse_entry+0x220>
    1cdc:	ldr	r3, [pc, #1228]	; 21b0 <parse_entry+0x690>
    1ce0:	ldr	r3, [pc, r3]
    1ce4:	ldr	r3, [r5, r3]
    1ce8:	cmp	r3, #0
    1cec:	beq	1cfc <parse_entry+0x1dc>
    1cf0:	ldr	r2, [sp, #52]	; 0x34
    1cf4:	cmp	r2, #0
    1cf8:	beq	1d90 <parse_entry+0x270>
    1cfc:	mov	r0, r4
    1d00:	bl	1a54 <parser_info_delete>
    1d04:	mov	r0, sl
    1d08:	add	sp, sp, #64	; 0x40
    1d0c:	ldrd	r4, [sp]
    1d10:	ldrd	r6, [sp, #8]
    1d14:	ldrd	r8, [sp, #16]
    1d18:	ldr	sl, [sp, #24]
    1d1c:	add	sp, sp, #28
    1d20:	pop	{pc}		; (ldr pc, [sp], #4)
    1d24:	movw	r1, #0
    1d28:	movt	r1, #0
    1d2c:	movw	r2, #0
    1d30:	movt	r2, #0
    1d34:	str	r1, [r3, #172]	; 0xac
    1d38:	str	r2, [r3, #344]	; 0x158
    1d3c:	b	1cac <parse_entry+0x18c>
    1d40:	ldr	r3, [sp, #52]	; 0x34
    1d44:	cmp	r3, #0
    1d48:	bne	1cfc <parse_entry+0x1dc>
    1d4c:	ldr	r3, [pc, #1120]	; 21b4 <parse_entry+0x694>
    1d50:	ldr	r3, [pc, r3]
    1d54:	ldr	r3, [r5, r3]
    1d58:	cmp	r3, #0
    1d5c:	bne	1d90 <parse_entry+0x270>
    1d60:	ldr	r0, [sp, #16]
    1d64:	bl	0 <coda_XML_GetErrorCode>
    1d68:	bl	0 <coda_XML_ErrorString>
    1d6c:	mov	r2, r0
    1d70:	movw	r1, #0
    1d74:	movt	r1, #0
    1d78:	movw	r0, #65136	; 0xfe70
    1d7c:	movt	r0, #65535	; 0xffff
    1d80:	bl	0 <coda_set_error>
    1d84:	ldr	r3, [pc, #1068]	; 21b8 <parse_entry+0x698>
    1d88:	ldr	r3, [pc, r3]
    1d8c:	ldr	r3, [r5, r3]
    1d90:	add	r3, r3, #400	; 0x190
    1d94:	add	r3, r3, #1
    1d98:	cmp	r3, #1
    1d9c:	bls	20d8 <parse_entry+0x5b8>
    1da0:	mov	r0, r4
    1da4:	mvn	sl, #0
    1da8:	bl	1a54 <parser_info_delete>
    1dac:	b	1d04 <parse_entry+0x1e4>
    1db0:	cmp	r2, #0
    1db4:	beq	2164 <parse_entry+0x644>
    1db8:	mov	r0, r2
    1dbc:	bl	0 <strlen>
    1dc0:	add	r5, r0, #11
    1dc4:	mov	r0, r5
    1dc8:	bl	0 <malloc>
    1dcc:	subs	r4, r0, #0
    1dd0:	beq	200c <parse_entry+0x4ec>
    1dd4:	mov	r2, r7
    1dd8:	movw	r1, #0
    1ddc:	movt	r1, #0
    1de0:	mov	r0, r4
    1de4:	bl	0 <sprintf>
    1de8:	mov	r1, r4
    1dec:	mov	r0, r8
    1df0:	bl	0 <coda_za_get_entry_by_name>
    1df4:	subs	r5, r0, #0
    1df8:	bne	1b84 <parse_entry+0x64>
    1dfc:	mov	r0, r8
    1e00:	bl	0 <coda_za_get_filename>
    1e04:	mov	r2, r0
    1e08:	mov	r3, r7
    1e0c:	movw	r1, #0
    1e10:	movt	r1, #0
    1e14:	movw	r0, #65136	; 0xfe70
    1e18:	movt	r0, #65535	; 0xffff
    1e1c:	bl	0 <coda_set_error>
    1e20:	b	1fd4 <parse_entry+0x4b4>
    1e24:	cmp	r2, #0
    1e28:	beq	2148 <parse_entry+0x628>
    1e2c:	mov	r0, r2
    1e30:	bl	0 <strlen>
    1e34:	add	r5, r0, #14
    1e38:	mov	r0, r5
    1e3c:	bl	0 <malloc>
    1e40:	subs	r4, r0, #0
    1e44:	beq	1fe4 <parse_entry+0x4c4>
    1e48:	mov	r2, r7
    1e4c:	movw	r1, #0
    1e50:	movt	r1, #0
    1e54:	mov	r0, r4
    1e58:	bl	0 <sprintf>
    1e5c:	mov	r1, r4
    1e60:	mov	r0, r8
    1e64:	bl	0 <coda_za_get_entry_by_name>
    1e68:	subs	r5, r0, #0
    1e6c:	bne	1b84 <parse_entry+0x64>
    1e70:	mov	r0, r8
    1e74:	bl	0 <coda_za_get_filename>
    1e78:	mov	r2, r0
    1e7c:	mov	r3, r7
    1e80:	movw	r1, #0
    1e84:	movt	r1, #0
    1e88:	movw	r0, #65136	; 0xfe70
    1e8c:	movt	r0, #65535	; 0xffff
    1e90:	bl	0 <coda_set_error>
    1e94:	b	1fd4 <parse_entry+0x4b4>
    1e98:	movw	r1, #0
    1e9c:	movt	r1, #0
    1ea0:	movw	r0, #0
    1ea4:	movt	r0, #0
    1ea8:	str	r1, [r3, #56]	; 0x38
    1eac:	movw	r1, #0
    1eb0:	movt	r1, #0
    1eb4:	str	r0, [r3, #60]	; 0x3c
    1eb8:	movw	r0, #0
    1ebc:	movt	r0, #0
    1ec0:	movw	r2, #0
    1ec4:	movt	r2, #0
    1ec8:	str	r1, [r3, #64]	; 0x40
    1ecc:	movw	r1, #0
    1ed0:	movt	r1, #0
    1ed4:	str	r0, [r3, #52]	; 0x34
    1ed8:	movw	r0, #0
    1edc:	movt	r0, #0
    1ee0:	str	r1, [r3, #88]	; 0x58
    1ee4:	movw	r1, #0
    1ee8:	movt	r1, #0
    1eec:	str	r0, [r3, #120]	; 0x78
    1ef0:	movw	r0, #0
    1ef4:	movt	r0, #0
    1ef8:	str	r1, [r3, #132]	; 0x84
    1efc:	movw	r1, #0
    1f00:	movt	r1, #0
    1f04:	str	r0, [r3, #160]	; 0xa0
    1f08:	movw	r0, #0
    1f0c:	movt	r0, #0
    1f10:	str	r1, [r3, #188]	; 0xbc
    1f14:	movw	r1, #0
    1f18:	movt	r1, #0
    1f1c:	str	r0, [r3, #192]	; 0xc0
    1f20:	movw	r0, #0
    1f24:	movt	r0, #0
    1f28:	str	r1, [r3, #200]	; 0xc8
    1f2c:	movw	r1, #0
    1f30:	movt	r1, #0
    1f34:	str	r0, [r3, #204]	; 0xcc
    1f38:	movw	r0, #0
    1f3c:	movt	r0, #0
    1f40:	str	r1, [r3, #208]	; 0xd0
    1f44:	movw	r1, #0
    1f48:	movt	r1, #0
    1f4c:	str	r0, [r3, #212]	; 0xd4
    1f50:	str	r1, [r3, #220]	; 0xdc
    1f54:	str	r2, [r3, #224]	; 0xe0
    1f58:	str	r2, [r3, #228]	; 0xe4
    1f5c:	str	r2, [r3, #232]	; 0xe8
    1f60:	str	r2, [r3, #236]	; 0xec
    1f64:	str	r2, [r3, #260]	; 0x104
    1f68:	str	r2, [r3, #292]	; 0x124
    1f6c:	str	r2, [r3, #304]	; 0x130
    1f70:	str	r2, [r3, #332]	; 0x14c
    1f74:	str	r2, [r3, #360]	; 0x168
    1f78:	str	r2, [r3, #364]	; 0x16c
    1f7c:	str	r2, [r3, #372]	; 0x174
    1f80:	str	r2, [r3, #376]	; 0x178
    1f84:	str	r2, [r3, #380]	; 0x17c
    1f88:	str	r2, [r3, #384]	; 0x180
    1f8c:	str	r2, [r3, #392]	; 0x188
    1f90:	b	1cac <parse_entry+0x18c>
    1f94:	movw	r2, #0
    1f98:	movt	r2, #0
    1f9c:	movw	r1, #0
    1fa0:	movt	r1, #0
    1fa4:	movw	r3, #4097	; 0x1001
    1fa8:	mvn	r0, #0
    1fac:	bl	0 <coda_set_error>
    1fb0:	b	1b70 <parse_entry+0x50>
    1fb4:	mov	r0, r8
    1fb8:	bl	0 <coda_za_get_filename>
    1fbc:	mov	r2, r0
    1fc0:	movw	r1, #0
    1fc4:	movt	r1, #0
    1fc8:	movw	r0, #65136	; 0xfe70
    1fcc:	movt	r0, #65535	; 0xffff
    1fd0:	bl	0 <coda_set_error>
    1fd4:	mov	r0, r4
    1fd8:	mvn	sl, #0
    1fdc:	bl	0 <free>
    1fe0:	b	1d04 <parse_entry+0x1e4>
    1fe4:	movw	r0, #4116	; 0x1014
    1fe8:	mov	r2, r5
    1fec:	movw	r3, #0
    1ff0:	movt	r3, #0
    1ff4:	movw	r1, #0
    1ff8:	movt	r1, #0
    1ffc:	str	r0, [sp]
    2000:	mvn	r0, #0
    2004:	bl	0 <coda_set_error>
    2008:	b	1e48 <parse_entry+0x328>
    200c:	movw	r0, #4106	; 0x100a
    2010:	mov	r2, r5
    2014:	movw	r3, #0
    2018:	movt	r3, #0
    201c:	movw	r1, #0
    2020:	movt	r1, #0
    2024:	str	r0, [sp]
    2028:	mvn	r0, #0
    202c:	bl	0 <coda_set_error>
    2030:	b	1dd4 <parse_entry+0x2b4>
    2034:	movw	r1, #0
    2038:	movt	r1, #0
    203c:	ldr	r3, [pc, #376]	; 21bc <parse_entry+0x69c>
    2040:	movw	r0, #0
    2044:	movt	r0, #0
    2048:	movw	r2, #4178	; 0x1052
    204c:	bl	0 <__assert_fail>
    2050:	add	r4, sp, #12
    2054:	b	1da0 <parse_entry+0x280>
    2058:	movw	r0, #4156	; 0x103c
    205c:	mov	r2, r9
    2060:	movw	r3, #0
    2064:	movt	r3, #0
    2068:	movw	r1, #0
    206c:	movt	r1, #0
    2070:	str	r0, [sp]
    2074:	mvn	r0, #0
    2078:	mov	sl, r0
    207c:	bl	0 <coda_set_error>
    2080:	add	r0, sp, #12
    2084:	bl	1a54 <parser_info_delete>
    2088:	b	1d04 <parse_entry+0x1e4>
    208c:	mvn	r0, #13
    2090:	movw	r1, #0
    2094:	movt	r1, #0
    2098:	mvn	sl, #0
    209c:	bl	0 <coda_set_error>
    20a0:	add	r0, sp, #12
    20a4:	bl	1a54 <parser_info_delete>
    20a8:	b	1d04 <parse_entry+0x1e4>
    20ac:	movw	r3, #4170	; 0x104a
    20b0:	mvn	r0, #0
    20b4:	movw	r2, #0
    20b8:	movt	r2, #0
    20bc:	movw	r1, #0
    20c0:	movt	r1, #0
    20c4:	bl	0 <coda_set_error>
    20c8:	add	r0, sp, #12
    20cc:	mvn	sl, #0
    20d0:	bl	1a54 <parser_info_delete>
    20d4:	b	1d04 <parse_entry+0x1e4>
    20d8:	ldr	r3, [sp, #56]	; 0x38
    20dc:	cmp	r3, #0
    20e0:	beq	1da0 <parse_entry+0x280>
    20e4:	mov	r0, r8
    20e8:	bl	0 <coda_za_get_filename>
    20ec:	mov	r1, r0
    20f0:	movw	r0, #0
    20f4:	movt	r0, #0
    20f8:	bl	0 <coda_add_error_message>
    20fc:	cmp	r6, #1
    2100:	beq	2194 <parse_entry+0x674>
    2104:	cmp	r6, #2
    2108:	beq	2180 <parse_entry+0x660>
    210c:	movw	r0, #0
    2110:	movt	r0, #0
    2114:	mov	r1, #0
    2118:	bl	0 <coda_add_error_message>
    211c:	ldr	r0, [sp, #16]
    2120:	bl	0 <coda_XML_GetCurrentLineNumber>
    2124:	mov	r5, r0
    2128:	ldr	r0, [sp, #16]
    212c:	bl	0 <coda_XML_GetCurrentByteIndex>
    2130:	mov	r2, r0
    2134:	mov	r1, r5
    2138:	movw	r0, #0
    213c:	movt	r0, #0
    2140:	bl	0 <coda_add_error_message>
    2144:	b	1da0 <parse_entry+0x280>
    2148:	movw	r1, #0
    214c:	movt	r1, #0
    2150:	ldr	r3, [pc, #100]	; 21bc <parse_entry+0x69c>
    2154:	movw	r0, #0
    2158:	movt	r0, #0
    215c:	movw	r2, #4111	; 0x100f
    2160:	bl	0 <__assert_fail>
    2164:	movw	r1, #0
    2168:	movt	r1, #0
    216c:	ldr	r3, [pc, #72]	; 21bc <parse_entry+0x69c>
    2170:	movw	r0, #0
    2174:	movt	r0, #0
    2178:	movw	r2, #4101	; 0x1005
    217c:	bl	0 <__assert_fail>
    2180:	mov	r1, r7
    2184:	movw	r0, #0
    2188:	movt	r0, #0
    218c:	bl	0 <coda_add_error_message>
    2190:	b	211c <parse_entry+0x5fc>
    2194:	mov	r1, r7
    2198:	movw	r0, #0
    219c:	movt	r0, #0
    21a0:	bl	0 <coda_add_error_message>
    21a4:	b	211c <parse_entry+0x5fc>
    21a8:	.word	0x00000044
    21ac:	.word	0x000004dc
    21b0:	.word	0x000004c8
    21b4:	.word	0x0000045c
    21b8:	.word	0x00000428
    21bc:	.word	0x00000038

000021c0 <read_definition_file>:
    21c0:	movw	r1, #0
    21c4:	movt	r1, #0
    21c8:	strd	r4, [sp, #-12]!
    21cc:	str	lr, [sp, #8]
    21d0:	sub	sp, sp, #12
    21d4:	bl	0 <coda_za_open>
    21d8:	subs	r5, r0, #0
    21dc:	beq	2218 <read_definition_file+0x58>
    21e0:	mov	r3, #0
    21e4:	mov	r2, r3
    21e8:	mov	r1, r3
    21ec:	str	r3, [sp]
    21f0:	bl	1b20 <parse_entry>
    21f4:	subs	r4, r0, #0
    21f8:	mov	r0, r5
    21fc:	mvnne	r4, #0
    2200:	bl	0 <coda_za_close>
    2204:	mov	r0, r4
    2208:	add	sp, sp, #12
    220c:	ldrd	r4, [sp]
    2210:	add	sp, sp, #8
    2214:	pop	{pc}		; (ldr pc, [sp], #4)
    2218:	mvn	r4, #0
    221c:	b	2204 <read_definition_file+0x44>

00002220 <escaped_string_length.part.0>:
    2220:	ldrb	r3, [r0]
    2224:	cmp	r3, #0
    2228:	beq	2370 <escaped_string_length.part.0+0x150>
    222c:	str	r4, [sp, #-8]!
    2230:	mov	r1, #1
    2234:	str	lr, [sp, #4]
    2238:	mov	lr, #0
    223c:	mov	r2, lr
    2240:	b	2250 <escaped_string_length.part.0+0x30>
    2244:	cmp	r3, #0
    2248:	add	r1, r1, #1
    224c:	beq	2304 <escaped_string_length.part.0+0xe4>
    2250:	cmp	r3, #92	; 0x5c
    2254:	add	ip, r2, #1
    2258:	movne	r2, ip
    225c:	ldrb	r3, [r0, ip]
    2260:	movne	ip, r1
    2264:	movne	lr, r2
    2268:	bne	2244 <escaped_string_length.part.0+0x24>
    226c:	sub	r4, r3, #92	; 0x5c
    2270:	cmp	r4, #26
    2274:	ldrls	pc, [pc, r4, lsl #2]
    2278:	b	2314 <escaped_string_length.part.0+0xf4>
    227c:	.word	0x000022e8
    2280:	.word	0x00002314
    2284:	.word	0x00002314
    2288:	.word	0x00002314
    228c:	.word	0x00002314
    2290:	.word	0x000022e8
    2294:	.word	0x000022e8
    2298:	.word	0x00002314
    229c:	.word	0x00002314
    22a0:	.word	0x000022e8
    22a4:	.word	0x000022e8
    22a8:	.word	0x00002314
    22ac:	.word	0x00002314
    22b0:	.word	0x00002314
    22b4:	.word	0x00002314
    22b8:	.word	0x00002314
    22bc:	.word	0x00002314
    22c0:	.word	0x00002314
    22c4:	.word	0x000022e8
    22c8:	.word	0x00002314
    22cc:	.word	0x00002314
    22d0:	.word	0x00002314
    22d4:	.word	0x000022e8
    22d8:	.word	0x00002314
    22dc:	.word	0x000022e8
    22e0:	.word	0x00002314
    22e4:	.word	0x000022e8
    22e8:	add	r2, r2, #2
    22ec:	mov	ip, r1
    22f0:	ldrb	r3, [r0, r2]
    22f4:	mov	lr, r2
    22f8:	add	r1, r1, #1
    22fc:	cmp	r3, #0
    2300:	bne	2250 <escaped_string_length.part.0+0x30>
    2304:	ldr	r4, [sp]
    2308:	add	sp, sp, #4
    230c:	mov	r0, ip
    2310:	pop	{pc}		; (ldr pc, [sp], #4)
    2314:	sub	r3, r3, #48	; 0x30
    2318:	cmp	r3, #9
    231c:	bhi	235c <escaped_string_length.part.0+0x13c>
    2320:	add	lr, r0, lr
    2324:	ldrb	r3, [lr, #2]
    2328:	sub	r3, r3, #48	; 0x30
    232c:	cmp	r3, #9
    2330:	bhi	2348 <escaped_string_length.part.0+0x128>
    2334:	ldrb	r3, [lr, #3]
    2338:	sub	r3, r3, #48	; 0x30
    233c:	cmp	r3, #9
    2340:	addhi	ip, r2, #2
    2344:	addls	ip, r2, #3
    2348:	add	r2, ip, #1
    234c:	mov	ip, r1
    2350:	mov	lr, r2
    2354:	ldrb	r3, [r0, r2]
    2358:	b	2244 <escaped_string_length.part.0+0x24>
    235c:	mvn	ip, #0
    2360:	ldr	r4, [sp]
    2364:	add	sp, sp, #4
    2368:	mov	r0, ip
    236c:	pop	{pc}		; (ldr pc, [sp], #4)
    2370:	mov	r0, r3
    2374:	bx	lr

00002378 <cd_match_filename_finalise>:
    2378:	ldr	r3, [r0]
    237c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    2380:	ldr	r5, [r3, #8]
    2384:	strd	r6, [sp, #8]
    2388:	mov	r6, r0
    238c:	ldr	r0, [r3, #12]
    2390:	str	r8, [sp, #16]
    2394:	str	lr, [sp, #20]
    2398:	sub	sp, sp, #40	; 0x28
    239c:	cmp	r0, #0
    23a0:	beq	24e0 <cd_match_filename_finalise+0x168>
    23a4:	bl	2220 <escaped_string_length.part.0>
    23a8:	subs	r8, r0, #0
    23ac:	blt	2520 <cd_match_filename_finalise+0x1a8>
    23b0:	beq	24e0 <cd_match_filename_finalise+0x168>
    23b4:	mov	r4, #0
    23b8:	mov	r0, #28
    23bc:	mov	r3, r4
    23c0:	mov	r2, r4
    23c4:	mov	r1, r4
    23c8:	str	r4, [sp]
    23cc:	str	r4, [sp, #4]
    23d0:	bl	0 <coda_expression_new>
    23d4:	subs	r7, r0, #0
    23d8:	beq	24d8 <cd_match_filename_finalise+0x160>
    23dc:	asr	r1, r8, #31
    23e0:	mov	r0, r8
    23e4:	add	r2, sp, #12
    23e8:	bl	0 <coda_str64>
    23ec:	add	r0, sp, #12
    23f0:	bl	0 <strdup>
    23f4:	subs	r1, r0, #0
    23f8:	beq	24fc <cd_match_filename_finalise+0x184>
    23fc:	mov	r3, r4
    2400:	mov	r2, r4
    2404:	str	r4, [sp]
    2408:	mov	r0, #20
    240c:	str	r4, [sp, #4]
    2410:	bl	0 <coda_expression_new>
    2414:	subs	r3, r0, #0
    2418:	beq	24d0 <cd_match_filename_finalise+0x158>
    241c:	mov	r1, r4
    2420:	mov	r0, #77	; 0x4d
    2424:	ldr	r2, [r5, #4]
    2428:	str	r7, [sp]
    242c:	str	r4, [sp, #4]
    2430:	bl	0 <coda_expression_new>
    2434:	subs	r7, r0, #0
    2438:	str	r4, [r5, #4]
    243c:	beq	24d8 <cd_match_filename_finalise+0x160>
    2440:	ldr	r3, [r6]
    2444:	ldr	r0, [r3, #12]
    2448:	bl	0 <strdup>
    244c:	subs	r1, r0, #0
    2450:	beq	24b4 <cd_match_filename_finalise+0x13c>
    2454:	mov	r3, r4
    2458:	mov	r2, r4
    245c:	str	r4, [sp]
    2460:	mov	r0, #22
    2464:	str	r4, [sp, #4]
    2468:	bl	0 <coda_expression_new>
    246c:	subs	r3, r0, #0
    2470:	beq	24d0 <cd_match_filename_finalise+0x158>
    2474:	mov	r2, r7
    2478:	mov	r1, r4
    247c:	str	r4, [sp]
    2480:	mov	r0, #25
    2484:	str	r4, [sp, #4]
    2488:	bl	0 <coda_expression_new>
    248c:	clz	r3, r0
    2490:	str	r0, [r5, #4]
    2494:	lsr	r3, r3, #5
    2498:	rsb	r0, r3, #0
    249c:	add	sp, sp, #40	; 0x28
    24a0:	ldrd	r4, [sp]
    24a4:	ldrd	r6, [sp, #8]
    24a8:	ldr	r8, [sp, #16]
    24ac:	add	sp, sp, #20
    24b0:	pop	{pc}		; (ldr pc, [sp], #4)
    24b4:	movw	r2, #0
    24b8:	movt	r2, #0
    24bc:	movw	r1, #0
    24c0:	movt	r1, #0
    24c4:	movw	r3, #2607	; 0xa2f
    24c8:	mvn	r0, #0
    24cc:	bl	0 <coda_set_error>
    24d0:	mov	r0, r7
    24d4:	bl	0 <coda_expression_delete>
    24d8:	mvn	r0, #0
    24dc:	b	249c <cd_match_filename_finalise+0x124>
    24e0:	movw	r1, #0
    24e4:	movt	r1, #0
    24e8:	movw	r0, #65136	; 0xfe70
    24ec:	movt	r0, #65535	; 0xffff
    24f0:	bl	0 <coda_set_error>
    24f4:	mvn	r0, #0
    24f8:	b	249c <cd_match_filename_finalise+0x124>
    24fc:	mvn	r0, #0
    2500:	movw	r2, #0
    2504:	movt	r2, #0
    2508:	movw	r1, #0
    250c:	movt	r1, #0
    2510:	movw	r3, #2588	; 0xa1c
    2514:	bl	0 <coda_set_error>
    2518:	mvn	r0, #0
    251c:	b	249c <cd_match_filename_finalise+0x124>
    2520:	movw	r1, #0
    2524:	movt	r1, #0
    2528:	movw	r0, #65136	; 0xfe70
    252c:	movt	r0, #65535	; 0xffff
    2530:	bl	0 <coda_set_error>
    2534:	mvn	r0, #0
    2538:	b	249c <cd_match_filename_finalise+0x124>

0000253c <cd_match_data_finalise>:
    253c:	ldr	r3, [r0]
    2540:	strd	r4, [sp, #-28]!	; 0xffffffe4
    2544:	strd	r6, [sp, #8]
    2548:	strd	r8, [sp, #16]
    254c:	mov	r8, r0
    2550:	str	lr, [sp, #24]
    2554:	sub	sp, sp, #44	; 0x2c
    2558:	ldr	r6, [r3, #8]
    255c:	ldr	r0, [r3, #12]
    2560:	cmp	r0, #0
    2564:	beq	2bb8 <cd_match_data_finalise+0x67c>
    2568:	bl	2220 <escaped_string_length.part.0>
    256c:	subs	r7, r0, #0
    2570:	blt	2c64 <cd_match_data_finalise+0x728>
    2574:	ldr	r4, [r6, #4]
    2578:	cmp	r4, #0
    257c:	beq	269c <cd_match_data_finalise+0x160>
    2580:	ldr	r5, [r4]
    2584:	cmp	r5, #20
    2588:	beq	25a8 <cd_match_data_finalise+0x6c>
    258c:	mov	r0, #0
    2590:	add	sp, sp, #44	; 0x2c
    2594:	ldrd	r4, [sp]
    2598:	ldrd	r6, [sp, #8]
    259c:	ldrd	r8, [sp, #16]
    25a0:	add	sp, sp, #24
    25a4:	pop	{pc}		; (ldr pc, [sp], #4)
    25a8:	cmp	r7, #0
    25ac:	beq	2bd0 <cd_match_data_finalise+0x694>
    25b0:	mov	r4, #0
    25b4:	mov	r0, #38	; 0x26
    25b8:	mov	r3, r4
    25bc:	mov	r2, r4
    25c0:	mov	r1, r4
    25c4:	str	r4, [sp]
    25c8:	str	r4, [sp, #4]
    25cc:	bl	0 <coda_expression_new>
    25d0:	subs	r9, r0, #0
    25d4:	beq	2be4 <cd_match_data_finalise+0x6a8>
    25d8:	asr	r1, r7, #31
    25dc:	mov	r0, r7
    25e0:	add	r2, sp, #12
    25e4:	bl	0 <coda_str64>
    25e8:	add	r0, sp, #12
    25ec:	bl	0 <strdup>
    25f0:	subs	r1, r0, #0
    25f4:	beq	2cc0 <cd_match_data_finalise+0x784>
    25f8:	mov	r0, r5
    25fc:	mov	r3, r4
    2600:	str	r4, [sp]
    2604:	mov	r2, r4
    2608:	str	r4, [sp, #4]
    260c:	bl	0 <coda_expression_new>
    2610:	cmp	r0, #0
    2614:	beq	2c80 <cd_match_data_finalise+0x744>
    2618:	mov	r2, r9
    261c:	mov	r1, r4
    2620:	ldr	r3, [r6, #4]
    2624:	stm	sp, {r0, r4}
    2628:	mov	r0, #16
    262c:	bl	0 <coda_expression_new>
    2630:	subs	r5, r0, #0
    2634:	str	r4, [r6, #4]
    2638:	beq	2be4 <cd_match_data_finalise+0x6a8>
    263c:	ldr	r3, [r8]
    2640:	ldr	r0, [r3, #12]
    2644:	bl	0 <strdup>
    2648:	subs	r1, r0, #0
    264c:	beq	2c8c <cd_match_data_finalise+0x750>
    2650:	mov	r4, #0
    2654:	mov	r0, #22
    2658:	mov	r3, r4
    265c:	mov	r2, r4
    2660:	str	r4, [sp]
    2664:	str	r4, [sp, #4]
    2668:	bl	0 <coda_expression_new>
    266c:	subs	r3, r0, #0
    2670:	beq	2cb4 <cd_match_data_finalise+0x778>
    2674:	mov	r2, r5
    2678:	mov	r1, r4
    267c:	str	r4, [sp]
    2680:	mov	r0, #25
    2684:	str	r4, [sp, #4]
    2688:	bl	0 <coda_expression_new>
    268c:	cmp	r0, #0
    2690:	str	r0, [r6, #4]
    2694:	bne	258c <cd_match_data_finalise+0x50>
    2698:	b	2be4 <cd_match_data_finalise+0x6a8>
    269c:	ldr	r5, [r6]
    26a0:	cmp	r5, #0
    26a4:	beq	276c <cd_match_data_finalise+0x230>
    26a8:	cmp	r7, #0
    26ac:	beq	258c <cd_match_data_finalise+0x50>
    26b0:	mov	r2, r4
    26b4:	mov	r3, r4
    26b8:	str	r4, [sp]
    26bc:	mov	r1, r4
    26c0:	mov	r0, #36	; 0x24
    26c4:	str	r4, [sp, #4]
    26c8:	bl	0 <coda_expression_new>
    26cc:	subs	r2, r0, #0
    26d0:	beq	2be4 <cd_match_data_finalise+0x6a8>
    26d4:	mov	r3, r4
    26d8:	mov	r1, r4
    26dc:	str	r4, [sp]
    26e0:	mov	r0, #75	; 0x4b
    26e4:	str	r4, [sp, #4]
    26e8:	bl	0 <coda_expression_new>
    26ec:	subs	r5, r0, #0
    26f0:	beq	2be4 <cd_match_data_finalise+0x6a8>
    26f4:	ldr	r3, [r8]
    26f8:	ldr	r0, [r3, #12]
    26fc:	bl	0 <strdup>
    2700:	subs	r1, r0, #0
    2704:	beq	2cf8 <cd_match_data_finalise+0x7bc>
    2708:	mov	r3, r4
    270c:	mov	r2, r4
    2710:	str	r4, [sp]
    2714:	mov	r0, #22
    2718:	str	r4, [sp, #4]
    271c:	bl	0 <coda_expression_new>
    2720:	subs	r3, r0, #0
    2724:	beq	2ce8 <cd_match_data_finalise+0x7ac>
    2728:	mov	r1, r4
    272c:	mov	r2, r5
    2730:	str	r4, [sp]
    2734:	mov	r0, #25
    2738:	str	r4, [sp, #4]
    273c:	bl	0 <coda_expression_new>
    2740:	subs	r4, r0, #0
    2744:	beq	2be4 <cd_match_data_finalise+0x6a8>
    2748:	mov	r0, r6
    274c:	mov	r1, r4
    2750:	bl	0 <coda_detection_rule_entry_set_expression>
    2754:	cmp	r0, #0
    2758:	beq	258c <cd_match_data_finalise+0x50>
    275c:	mov	r0, r4
    2760:	bl	0 <coda_expression_delete>
    2764:	mvn	r0, #0
    2768:	b	2590 <cd_match_data_finalise+0x54>
    276c:	cmp	r7, #0
    2770:	beq	2bf8 <cd_match_data_finalise+0x6bc>
    2774:	mov	r3, r5
    2778:	mov	r2, r5
    277c:	str	r5, [sp]
    2780:	mov	r1, r5
    2784:	mov	r0, #38	; 0x26
    2788:	str	r5, [sp, #4]
    278c:	bl	0 <coda_expression_new>
    2790:	subs	r4, r0, #0
    2794:	beq	2be4 <cd_match_data_finalise+0x6a8>
    2798:	movw	r0, #0
    279c:	movt	r0, #0
    27a0:	bl	0 <strdup>
    27a4:	mov	r1, r0
    27a8:	mov	r3, r5
    27ac:	str	r5, [sp]
    27b0:	mov	r2, r5
    27b4:	mov	r0, #20
    27b8:	str	r5, [sp, #4]
    27bc:	bl	0 <coda_expression_new>
    27c0:	subs	r3, r0, #0
    27c4:	beq	275c <cd_match_data_finalise+0x220>
    27c8:	mov	r2, r4
    27cc:	mov	r1, r5
    27d0:	str	r5, [sp]
    27d4:	mov	r0, #16
    27d8:	str	r5, [sp, #4]
    27dc:	bl	0 <coda_expression_new>
    27e0:	subs	r7, r0, #0
    27e4:	beq	2be4 <cd_match_data_finalise+0x6a8>
    27e8:	ldr	r3, [r8]
    27ec:	ldr	r4, [r3, #12]
    27f0:	mov	r0, r4
    27f4:	bl	0 <strlen>
    27f8:	cmp	r0, #0
    27fc:	beq	2c14 <cd_match_data_finalise+0x6d8>
    2800:	sub	r4, r4, #1
    2804:	mov	r3, r5
    2808:	mov	ip, r4
    280c:	add	r5, r4, r0
    2810:	ldrb	r1, [ip, #1]!
    2814:	add	r2, r3, #1
    2818:	sub	r1, r1, #36	; 0x24
    281c:	cmp	r1, #88	; 0x58
    2820:	ldrls	pc, [pc, r1, lsl #2]
    2824:	b	2ba0 <cd_match_data_finalise+0x664>
    2828:	.word	0x0000298c
    282c:	.word	0x00002ba0
    2830:	.word	0x00002ba0
    2834:	.word	0x00002ba0
    2838:	.word	0x0000298c
    283c:	.word	0x0000298c
    2840:	.word	0x0000298c
    2844:	.word	0x0000298c
    2848:	.word	0x00002ba0
    284c:	.word	0x00002ba0
    2850:	.word	0x0000298c
    2854:	.word	0x00002ba0
    2858:	.word	0x00002ba0
    285c:	.word	0x00002ba0
    2860:	.word	0x00002ba0
    2864:	.word	0x00002ba0
    2868:	.word	0x00002ba0
    286c:	.word	0x00002ba0
    2870:	.word	0x00002ba0
    2874:	.word	0x00002ba0
    2878:	.word	0x00002ba0
    287c:	.word	0x00002ba0
    2880:	.word	0x00002ba0
    2884:	.word	0x00002ba0
    2888:	.word	0x00002ba0
    288c:	.word	0x00002ba0
    2890:	.word	0x00002ba0
    2894:	.word	0x0000298c
    2898:	.word	0x00002ba0
    289c:	.word	0x00002ba0
    28a0:	.word	0x00002ba0
    28a4:	.word	0x00002ba0
    28a8:	.word	0x00002ba0
    28ac:	.word	0x00002ba0
    28b0:	.word	0x00002ba0
    28b4:	.word	0x00002ba0
    28b8:	.word	0x00002ba0
    28bc:	.word	0x00002ba0
    28c0:	.word	0x00002ba0
    28c4:	.word	0x00002ba0
    28c8:	.word	0x00002ba0
    28cc:	.word	0x00002ba0
    28d0:	.word	0x00002ba0
    28d4:	.word	0x00002ba0
    28d8:	.word	0x00002ba0
    28dc:	.word	0x00002ba0
    28e0:	.word	0x00002ba0
    28e4:	.word	0x00002ba0
    28e8:	.word	0x00002ba0
    28ec:	.word	0x00002ba0
    28f0:	.word	0x00002ba0
    28f4:	.word	0x00002ba0
    28f8:	.word	0x00002ba0
    28fc:	.word	0x00002ba0
    2900:	.word	0x00002ba0
    2904:	.word	0x0000298c
    2908:	.word	0x0000298c
    290c:	.word	0x00002ba0
    2910:	.word	0x0000298c
    2914:	.word	0x00002ba0
    2918:	.word	0x00002ba0
    291c:	.word	0x00002ba0
    2920:	.word	0x00002ba0
    2924:	.word	0x00002ba0
    2928:	.word	0x00002ba0
    292c:	.word	0x00002ba0
    2930:	.word	0x00002ba0
    2934:	.word	0x00002ba0
    2938:	.word	0x00002ba0
    293c:	.word	0x00002ba0
    2940:	.word	0x00002ba0
    2944:	.word	0x00002ba0
    2948:	.word	0x00002ba0
    294c:	.word	0x00002ba0
    2950:	.word	0x00002ba0
    2954:	.word	0x00002ba0
    2958:	.word	0x00002ba0
    295c:	.word	0x00002ba0
    2960:	.word	0x00002ba0
    2964:	.word	0x00002ba0
    2968:	.word	0x00002ba0
    296c:	.word	0x00002ba0
    2970:	.word	0x00002ba0
    2974:	.word	0x00002ba0
    2978:	.word	0x00002ba0
    297c:	.word	0x00002ba0
    2980:	.word	0x00002ba0
    2984:	.word	0x0000298c
    2988:	.word	0x0000298c
    298c:	add	r3, r3, #2
    2990:	cmp	ip, r5
    2994:	bne	2810 <cd_match_data_finalise+0x2d4>
    2998:	add	r8, r2, #2
    299c:	mov	r0, r8
    29a0:	bl	0 <malloc>
    29a4:	subs	r1, r0, #0
    29a8:	beq	2c30 <cd_match_data_finalise+0x6f4>
    29ac:	mov	r3, #0
    29b0:	mov	r9, #92	; 0x5c
    29b4:	ldrb	r2, [r4, #1]!
    29b8:	add	lr, r3, #1
    29bc:	add	ip, r1, r3
    29c0:	add	r8, r1, lr
    29c4:	sub	r0, r2, #36	; 0x24
    29c8:	cmp	r0, #88	; 0x58
    29cc:	ldrls	pc, [pc, r0, lsl #2]
    29d0:	b	2bb0 <cd_match_data_finalise+0x674>
    29d4:	.word	0x00002b38
    29d8:	.word	0x00002bb0
    29dc:	.word	0x00002bb0
    29e0:	.word	0x00002bb0
    29e4:	.word	0x00002b38
    29e8:	.word	0x00002b38
    29ec:	.word	0x00002b38
    29f0:	.word	0x00002b38
    29f4:	.word	0x00002bb0
    29f8:	.word	0x00002bb0
    29fc:	.word	0x00002b38
    2a00:	.word	0x00002bb0
    2a04:	.word	0x00002bb0
    2a08:	.word	0x00002bb0
    2a0c:	.word	0x00002bb0
    2a10:	.word	0x00002bb0
    2a14:	.word	0x00002bb0
    2a18:	.word	0x00002bb0
    2a1c:	.word	0x00002bb0
    2a20:	.word	0x00002bb0
    2a24:	.word	0x00002bb0
    2a28:	.word	0x00002bb0
    2a2c:	.word	0x00002bb0
    2a30:	.word	0x00002bb0
    2a34:	.word	0x00002bb0
    2a38:	.word	0x00002bb0
    2a3c:	.word	0x00002bb0
    2a40:	.word	0x00002b38
    2a44:	.word	0x00002bb0
    2a48:	.word	0x00002bb0
    2a4c:	.word	0x00002bb0
    2a50:	.word	0x00002bb0
    2a54:	.word	0x00002bb0
    2a58:	.word	0x00002bb0
    2a5c:	.word	0x00002bb0
    2a60:	.word	0x00002bb0
    2a64:	.word	0x00002bb0
    2a68:	.word	0x00002bb0
    2a6c:	.word	0x00002bb0
    2a70:	.word	0x00002bb0
    2a74:	.word	0x00002bb0
    2a78:	.word	0x00002bb0
    2a7c:	.word	0x00002bb0
    2a80:	.word	0x00002bb0
    2a84:	.word	0x00002bb0
    2a88:	.word	0x00002bb0
    2a8c:	.word	0x00002bb0
    2a90:	.word	0x00002bb0
    2a94:	.word	0x00002bb0
    2a98:	.word	0x00002bb0
    2a9c:	.word	0x00002bb0
    2aa0:	.word	0x00002bb0
    2aa4:	.word	0x00002bb0
    2aa8:	.word	0x00002bb0
    2aac:	.word	0x00002bb0
    2ab0:	.word	0x00002b38
    2ab4:	.word	0x00002b38
    2ab8:	.word	0x00002bb0
    2abc:	.word	0x00002b38
    2ac0:	.word	0x00002bb0
    2ac4:	.word	0x00002bb0
    2ac8:	.word	0x00002bb0
    2acc:	.word	0x00002bb0
    2ad0:	.word	0x00002bb0
    2ad4:	.word	0x00002bb0
    2ad8:	.word	0x00002bb0
    2adc:	.word	0x00002bb0
    2ae0:	.word	0x00002bb0
    2ae4:	.word	0x00002bb0
    2ae8:	.word	0x00002bb0
    2aec:	.word	0x00002bb0
    2af0:	.word	0x00002bb0
    2af4:	.word	0x00002bb0
    2af8:	.word	0x00002bb0
    2afc:	.word	0x00002bb0
    2b00:	.word	0x00002bb0
    2b04:	.word	0x00002bb0
    2b08:	.word	0x00002bb0
    2b0c:	.word	0x00002bb0
    2b10:	.word	0x00002bb0
    2b14:	.word	0x00002bb0
    2b18:	.word	0x00002bb0
    2b1c:	.word	0x00002bb0
    2b20:	.word	0x00002bb0
    2b24:	.word	0x00002bb0
    2b28:	.word	0x00002bb0
    2b2c:	.word	0x00002bb0
    2b30:	.word	0x00002b38
    2b34:	.word	0x00002b38
    2b38:	strb	r9, [r1, r3]
    2b3c:	add	r3, r3, #2
    2b40:	mov	ip, r8
    2b44:	add	r8, r1, r3
    2b48:	cmp	r4, r5
    2b4c:	strb	r2, [ip]
    2b50:	bne	29b4 <cd_match_data_finalise+0x478>
    2b54:	mov	r4, #0
    2b58:	mov	r0, #21
    2b5c:	mov	r2, r4
    2b60:	mov	r3, r4
    2b64:	strb	r4, [r8]
    2b68:	str	r4, [sp]
    2b6c:	str	r4, [sp, #4]
    2b70:	bl	0 <coda_expression_new>
    2b74:	subs	r2, r0, #0
    2b78:	beq	2d24 <cd_match_data_finalise+0x7e8>
    2b7c:	mov	r1, r4
    2b80:	mov	r3, r7
    2b84:	str	r4, [sp]
    2b88:	mov	r0, #71	; 0x47
    2b8c:	str	r4, [sp, #4]
    2b90:	bl	0 <coda_expression_new>
    2b94:	subs	r4, r0, #0
    2b98:	bne	2748 <cd_match_data_finalise+0x20c>
    2b9c:	b	2be4 <cd_match_data_finalise+0x6a8>
    2ba0:	mov	r1, r2
    2ba4:	mov	r2, r3
    2ba8:	mov	r3, r1
    2bac:	b	2990 <cd_match_data_finalise+0x454>
    2bb0:	mov	r3, lr
    2bb4:	b	2b48 <cd_match_data_finalise+0x60c>
    2bb8:	ldr	r3, [r6, #4]
    2bbc:	cmp	r3, #0
    2bc0:	beq	2bec <cd_match_data_finalise+0x6b0>
    2bc4:	ldr	r3, [r3]
    2bc8:	cmp	r3, #20
    2bcc:	bne	258c <cd_match_data_finalise+0x50>
    2bd0:	movw	r1, #0
    2bd4:	movt	r1, #0
    2bd8:	movw	r0, #65136	; 0xfe70
    2bdc:	movt	r0, #65535	; 0xffff
    2be0:	bl	0 <coda_set_error>
    2be4:	mvn	r0, #0
    2be8:	b	2590 <cd_match_data_finalise+0x54>
    2bec:	ldr	r3, [r6]
    2bf0:	cmp	r3, #0
    2bf4:	bne	258c <cd_match_data_finalise+0x50>
    2bf8:	movw	r1, #0
    2bfc:	movt	r1, #0
    2c00:	movw	r0, #65136	; 0xfe70
    2c04:	movt	r0, #65535	; 0xffff
    2c08:	bl	0 <coda_set_error>
    2c0c:	mvn	r0, #0
    2c10:	b	2590 <cd_match_data_finalise+0x54>
    2c14:	mov	r0, #1
    2c18:	bl	0 <malloc>
    2c1c:	subs	r1, r0, #0
    2c20:	beq	2c2c <cd_match_data_finalise+0x6f0>
    2c24:	mov	r8, r1
    2c28:	b	2b54 <cd_match_data_finalise+0x618>
    2c2c:	mov	r8, #1
    2c30:	movw	r0, #339	; 0x153
    2c34:	mov	r2, r8
    2c38:	movw	r3, #0
    2c3c:	movt	r3, #0
    2c40:	movw	r1, #0
    2c44:	movt	r1, #0
    2c48:	str	r0, [sp]
    2c4c:	mvn	r0, #0
    2c50:	bl	0 <coda_set_error>
    2c54:	mov	r0, r7
    2c58:	bl	0 <coda_expression_delete>
    2c5c:	mvn	r0, #0
    2c60:	b	2590 <cd_match_data_finalise+0x54>
    2c64:	movw	r1, #0
    2c68:	movt	r1, #0
    2c6c:	movw	r0, #65136	; 0xfe70
    2c70:	movt	r0, #65535	; 0xffff
    2c74:	bl	0 <coda_set_error>
    2c78:	mvn	r0, #0
    2c7c:	b	2590 <cd_match_data_finalise+0x54>
    2c80:	mov	r0, r9
    2c84:	bl	0 <coda_expression_delete>
    2c88:	b	2be4 <cd_match_data_finalise+0x6a8>
    2c8c:	movw	r3, #2204	; 0x89c
    2c90:	mvn	r0, #0
    2c94:	movw	r2, #0
    2c98:	movt	r2, #0
    2c9c:	movw	r1, #0
    2ca0:	movt	r1, #0
    2ca4:	bl	0 <coda_set_error>
    2ca8:	mov	r0, r5
    2cac:	bl	0 <coda_expression_delete>
    2cb0:	b	2be4 <cd_match_data_finalise+0x6a8>
    2cb4:	mov	r0, r5
    2cb8:	bl	0 <coda_expression_delete>
    2cbc:	b	2be4 <cd_match_data_finalise+0x6a8>
    2cc0:	movw	r3, #2184	; 0x888
    2cc4:	mvn	r0, #0
    2cc8:	movw	r2, #0
    2ccc:	movt	r2, #0
    2cd0:	movw	r1, #0
    2cd4:	movt	r1, #0
    2cd8:	bl	0 <coda_set_error>
    2cdc:	mov	r0, r9
    2ce0:	bl	0 <coda_expression_delete>
    2ce4:	b	2be4 <cd_match_data_finalise+0x6a8>
    2ce8:	mov	r0, r5
    2cec:	bl	0 <coda_expression_delete>
    2cf0:	mvn	r0, #0
    2cf4:	b	2590 <cd_match_data_finalise+0x54>
    2cf8:	movw	r3, #2090	; 0x82a
    2cfc:	mvn	r0, #0
    2d00:	movw	r2, #0
    2d04:	movt	r2, #0
    2d08:	movw	r1, #0
    2d0c:	movt	r1, #0
    2d10:	bl	0 <coda_set_error>
    2d14:	mov	r0, r5
    2d18:	bl	0 <coda_expression_delete>
    2d1c:	mvn	r0, #0
    2d20:	b	2590 <cd_match_data_finalise+0x54>
    2d24:	mov	r0, r7
    2d28:	bl	0 <coda_expression_delete>
    2d2c:	mvn	r0, #0
    2d30:	b	2590 <cd_match_data_finalise+0x54>

00002d34 <decode_escaped_string.part.1>:
    2d34:	ldrb	r2, [r0]
    2d38:	cmp	r2, #0
    2d3c:	beq	2fc0 <decode_escaped_string.part.1+0x28c>
    2d40:	strd	r4, [sp, #-36]!	; 0xffffffdc
    2d44:	mov	r4, #0
    2d48:	mov	r3, r0
    2d4c:	mov	r1, r4
    2d50:	rsb	r5, r0, #1
    2d54:	strd	r6, [sp, #8]
    2d58:	mov	r7, #10
    2d5c:	mov	r6, #12
    2d60:	strd	r8, [sp, #16]
    2d64:	mov	r9, #9
    2d68:	mov	r8, #13
    2d6c:	strd	sl, [sp, #24]
    2d70:	mov	fp, #92	; 0x5c
    2d74:	mov	sl, #11
    2d78:	str	lr, [sp, #32]
    2d7c:	b	2da0 <decode_escaped_string.part.1+0x6c>
    2d80:	mov	r1, ip
    2d84:	add	ip, r5, r3
    2d88:	strb	r2, [r3]
    2d8c:	mov	r4, r1
    2d90:	ldrb	r2, [lr]
    2d94:	add	r3, r3, #1
    2d98:	cmp	r2, #0
    2d9c:	beq	2e54 <decode_escaped_string.part.1+0x120>
    2da0:	add	ip, r1, #1
    2da4:	cmp	r2, #92	; 0x5c
    2da8:	add	lr, r0, ip
    2dac:	bne	2d80 <decode_escaped_string.part.1+0x4c>
    2db0:	ldrb	lr, [r0, ip]
    2db4:	sub	r2, lr, #92	; 0x5c
    2db8:	cmp	r2, #26
    2dbc:	ldrls	pc, [pc, r2, lsl #2]
    2dc0:	b	2f48 <decode_escaped_string.part.1+0x214>
    2dc4:	.word	0x00002f30
    2dc8:	.word	0x00002f48
    2dcc:	.word	0x00002f48
    2dd0:	.word	0x00002f48
    2dd4:	.word	0x00002f48
    2dd8:	.word	0x00002f14
    2ddc:	.word	0x00002ef8
    2de0:	.word	0x00002f48
    2de4:	.word	0x00002f48
    2de8:	.word	0x00002edc
    2dec:	.word	0x00002ec4
    2df0:	.word	0x00002f48
    2df4:	.word	0x00002f48
    2df8:	.word	0x00002f48
    2dfc:	.word	0x00002f48
    2e00:	.word	0x00002f48
    2e04:	.word	0x00002f48
    2e08:	.word	0x00002f48
    2e0c:	.word	0x00002eac
    2e10:	.word	0x00002f48
    2e14:	.word	0x00002f48
    2e18:	.word	0x00002f48
    2e1c:	.word	0x00002e94
    2e20:	.word	0x00002f48
    2e24:	.word	0x00002e7c
    2e28:	.word	0x00002f48
    2e2c:	.word	0x00002e30
    2e30:	add	r1, r1, #2
    2e34:	strb	sl, [r3]
    2e38:	add	ip, r5, r3
    2e3c:	add	lr, r0, r1
    2e40:	mov	r4, r1
    2e44:	ldrb	r2, [lr]
    2e48:	add	r3, r3, #1
    2e4c:	cmp	r2, #0
    2e50:	bne	2da0 <decode_escaped_string.part.1+0x6c>
    2e54:	add	r0, r0, ip
    2e58:	mov	r3, #0
    2e5c:	strb	r3, [r0]
    2e60:	ldrd	r4, [sp]
    2e64:	mov	r0, ip
    2e68:	ldrd	r6, [sp, #8]
    2e6c:	ldrd	r8, [sp, #16]
    2e70:	ldrd	sl, [sp, #24]
    2e74:	add	sp, sp, #32
    2e78:	pop	{pc}		; (ldr pc, [sp], #4)
    2e7c:	add	r1, r1, #2
    2e80:	add	ip, r5, r3
    2e84:	strb	r9, [r3]
    2e88:	mov	r4, r1
    2e8c:	add	lr, r0, r1
    2e90:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2e94:	add	r1, r1, #2
    2e98:	add	ip, r5, r3
    2e9c:	strb	r8, [r3]
    2ea0:	mov	r4, r1
    2ea4:	add	lr, r0, r1
    2ea8:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2eac:	add	r1, r1, #2
    2eb0:	add	ip, r5, r3
    2eb4:	strb	r7, [r3]
    2eb8:	mov	r4, r1
    2ebc:	add	lr, r0, r1
    2ec0:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2ec4:	add	r1, r1, #2
    2ec8:	add	ip, r5, r3
    2ecc:	strb	r6, [r3]
    2ed0:	mov	r4, r1
    2ed4:	add	lr, r0, r1
    2ed8:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2edc:	mov	r2, #27
    2ee0:	add	r1, r1, #2
    2ee4:	mov	r4, r1
    2ee8:	add	lr, r0, r1
    2eec:	add	ip, r5, r3
    2ef0:	strb	r2, [r3]
    2ef4:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2ef8:	mov	r2, #8
    2efc:	add	r1, r1, #2
    2f00:	add	ip, r5, r3
    2f04:	mov	r4, r1
    2f08:	add	lr, r0, r1
    2f0c:	strb	r2, [r3]
    2f10:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2f14:	mov	r2, #7
    2f18:	add	r1, r1, #2
    2f1c:	add	ip, r5, r3
    2f20:	mov	r4, r1
    2f24:	add	lr, r0, r1
    2f28:	strb	r2, [r3]
    2f2c:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2f30:	add	r1, r1, #2
    2f34:	add	ip, r5, r3
    2f38:	strb	fp, [r3]
    2f3c:	mov	r4, r1
    2f40:	add	lr, r0, r1
    2f44:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2f48:	sub	lr, lr, #48	; 0x30
    2f4c:	uxtb	lr, lr
    2f50:	cmp	lr, #9
    2f54:	bhi	2fd0 <decode_escaped_string.part.1+0x29c>
    2f58:	add	r4, r0, r4
    2f5c:	strb	lr, [r3]
    2f60:	ldrb	r2, [r4, #2]
    2f64:	sub	r2, r2, #48	; 0x30
    2f68:	cmp	r2, #9
    2f6c:	bhi	2fac <decode_escaped_string.part.1+0x278>
    2f70:	add	ip, r1, #2
    2f74:	ldrb	r2, [r0, ip]
    2f78:	sub	r2, r2, #48	; 0x30
    2f7c:	add	r2, r2, lr, lsl #3
    2f80:	uxtb	r2, r2
    2f84:	strb	r2, [r3]
    2f88:	ldrb	lr, [r4, #3]
    2f8c:	sub	lr, lr, #48	; 0x30
    2f90:	cmp	lr, #9
    2f94:	bhi	2fac <decode_escaped_string.part.1+0x278>
    2f98:	add	ip, r1, #3
    2f9c:	ldrb	r1, [r0, ip]
    2fa0:	sub	r1, r1, #48	; 0x30
    2fa4:	add	r2, r1, r2, lsl #3
    2fa8:	strb	r2, [r3]
    2fac:	add	r1, ip, #1
    2fb0:	add	ip, r5, r3
    2fb4:	mov	r4, r1
    2fb8:	add	lr, r0, r1
    2fbc:	b	2d90 <decode_escaped_string.part.1+0x5c>
    2fc0:	mov	r3, #0
    2fc4:	strb	r3, [r0]
    2fc8:	mov	r0, r2
    2fcc:	bx	lr
    2fd0:	mvn	ip, #0
    2fd4:	b	2e60 <decode_escaped_string.part.1+0x12c>

00002fd8 <cd_attribute_set_fixed_value>:
    2fd8:	ldr	r3, [r0]
    2fdc:	mov	r2, #0
    2fe0:	strd	r4, [sp, #-12]!
    2fe4:	mov	r4, r0
    2fe8:	ldr	r0, [r3, #12]
    2fec:	str	lr, [sp, #8]
    2ff0:	sub	sp, sp, #12
    2ff4:	str	r2, [sp, #4]
    2ff8:	cmp	r0, r2
    2ffc:	beq	3010 <cd_attribute_set_fixed_value+0x38>
    3000:	bl	2d34 <decode_escaped_string.part.1>
    3004:	cmp	r0, #0
    3008:	blt	30ec <cd_attribute_set_fixed_value+0x114>
    300c:	ldr	r3, [r4]
    3010:	add	r1, sp, #4
    3014:	ldr	r3, [r3, #396]	; 0x18c
    3018:	ldr	r0, [r3, #8]
    301c:	bl	0 <coda_type_record_field_get_type>
    3020:	cmp	r0, #0
    3024:	bne	30d8 <cd_attribute_set_fixed_value+0x100>
    3028:	ldr	r3, [sp, #4]
    302c:	cmp	r3, #0
    3030:	bne	30c4 <cd_attribute_set_fixed_value+0xec>
    3034:	ldr	r3, [r4]
    3038:	ldr	r3, [r3, #396]	; 0x18c
    303c:	ldr	r0, [r3, #44]	; 0x2c
    3040:	bl	0 <coda_type_text_new>
    3044:	cmp	r0, #0
    3048:	str	r0, [sp, #4]
    304c:	beq	30d8 <cd_attribute_set_fixed_value+0x100>
    3050:	ldr	r3, [r4]
    3054:	mov	r1, r0
    3058:	ldr	r3, [r3, #396]	; 0x18c
    305c:	ldr	r0, [r3, #8]
    3060:	bl	0 <coda_type_record_field_set_type>
    3064:	cmp	r0, #0
    3068:	ldr	r0, [sp, #4]
    306c:	bne	30e0 <cd_attribute_set_fixed_value+0x108>
    3070:	bl	0 <coda_type_release>
    3074:	ldr	r3, [r4]
    3078:	ldr	r0, [sp, #4]
    307c:	ldr	r1, [r3, #12]
    3080:	bl	0 <coda_type_text_set_fixed_value>
    3084:	subs	r5, r0, #0
    3088:	bne	30d8 <cd_attribute_set_fixed_value+0x100>
    308c:	ldr	r3, [r4]
    3090:	ldr	r0, [r3, #12]
    3094:	bl	0 <strlen>
    3098:	mov	r2, r0
    309c:	mov	r3, r5
    30a0:	ldr	r0, [sp, #4]
    30a4:	bl	0 <coda_type_set_byte_size>
    30a8:	adds	r0, r0, #0
    30ac:	movne	r0, #1
    30b0:	rsb	r0, r0, #0
    30b4:	add	sp, sp, #12
    30b8:	ldrd	r4, [sp]
    30bc:	add	sp, sp, #8
    30c0:	pop	{pc}		; (ldr pc, [sp], #4)
    30c4:	movw	r1, #0
    30c8:	movt	r1, #0
    30cc:	movw	r0, #65136	; 0xfe70
    30d0:	movt	r0, #65535	; 0xffff
    30d4:	bl	0 <coda_set_error>
    30d8:	mvn	r0, #0
    30dc:	b	30b4 <cd_attribute_set_fixed_value+0xdc>
    30e0:	bl	0 <coda_type_release>
    30e4:	mvn	r0, #0
    30e8:	b	30b4 <cd_attribute_set_fixed_value+0xdc>
    30ec:	movw	r1, #0
    30f0:	movt	r1, #0
    30f4:	movw	r0, #65136	; 0xfe70
    30f8:	movt	r0, #65535	; 0xffff
    30fc:	bl	0 <coda_set_error>
    3100:	mvn	r0, #0
    3104:	b	30b4 <cd_attribute_set_fixed_value+0xdc>

00003108 <is_whitespace>:
    3108:	cmp	r0, #0
    310c:	beq	3194 <is_whitespace+0x8c>
    3110:	cmp	r1, #0
    3114:	ble	3184 <is_whitespace+0x7c>
    3118:	ldrb	r3, [r0]
    311c:	cmp	r3, #32
    3120:	cmpne	r3, #13
    3124:	sub	r3, r3, #9
    3128:	movne	r2, #1
    312c:	moveq	r2, #0
    3130:	cmp	r3, #1
    3134:	movls	r3, #0
    3138:	andhi	r3, r2, #1
    313c:	cmp	r3, #0
    3140:	bne	318c <is_whitespace+0x84>
    3144:	sub	r1, r1, #1
    3148:	add	r1, r0, r1
    314c:	b	317c <is_whitespace+0x74>
    3150:	ldrb	r3, [r0, #1]!
    3154:	cmp	r3, #32
    3158:	cmpne	r3, #13
    315c:	sub	r3, r3, #9
    3160:	movne	r2, #1
    3164:	moveq	r2, #0
    3168:	cmp	r3, #1
    316c:	movls	r3, #0
    3170:	andhi	r3, r2, #1
    3174:	cmp	r3, #0
    3178:	bne	318c <is_whitespace+0x84>
    317c:	cmp	r0, r1
    3180:	bne	3150 <is_whitespace+0x48>
    3184:	mov	r0, #1
    3188:	bx	lr
    318c:	mov	r0, #0
    3190:	bx	lr
    3194:	movw	r1, #0
    3198:	movt	r1, #0
    319c:	ldr	r3, [pc, #20]	; 31b8 <is_whitespace+0xb0>
    31a0:	movw	r0, #0
    31a4:	movt	r0, #0
    31a8:	str	r4, [sp, #-8]!
    31ac:	movw	r2, #290	; 0x122
    31b0:	str	lr, [sp, #4]
    31b4:	bl	0 <__assert_fail>
    31b8:	.word	0x000000f0

000031bc <void_expression_finalise>:
    31bc:	ldr	r3, [r0]
    31c0:	strd	r4, [sp, #-12]!
    31c4:	ldr	r4, [r3, #12]
    31c8:	str	lr, [sp, #8]
    31cc:	sub	sp, sp, #12
    31d0:	cmp	r4, #0
    31d4:	beq	3268 <void_expression_finalise+0xac>
    31d8:	mov	r5, r0
    31dc:	mov	r0, r4
    31e0:	bl	0 <strlen>
    31e4:	mov	r1, r0
    31e8:	mov	r0, r4
    31ec:	bl	3108 <is_whitespace>
    31f0:	cmp	r0, #0
    31f4:	mov	r0, r4
    31f8:	bne	3258 <void_expression_finalise+0x9c>
    31fc:	add	r1, sp, #4
    3200:	bl	0 <coda_expression_from_string>
    3204:	subs	r4, r0, #0
    3208:	bne	327c <void_expression_finalise+0xc0>
    320c:	ldr	r3, [r5]
    3210:	ldr	r0, [r3, #12]
    3214:	bl	0 <free>
    3218:	ldr	r3, [r5]
    321c:	mov	r1, sp
    3220:	ldr	r2, [sp, #4]
    3224:	mov	r0, r2
    3228:	str	r2, [r3, #8]
    322c:	str	r4, [r3, #12]
    3230:	bl	0 <coda_expression_get_type>
    3234:	cmp	r0, #0
    3238:	bne	327c <void_expression_finalise+0xc0>
    323c:	ldr	r3, [sp]
    3240:	cmp	r3, #5
    3244:	bne	3284 <void_expression_finalise+0xc8>
    3248:	add	sp, sp, #12
    324c:	ldrd	r4, [sp]
    3250:	add	sp, sp, #8
    3254:	pop	{pc}		; (ldr pc, [sp], #4)
    3258:	bl	0 <free>
    325c:	ldr	r3, [r5]
    3260:	mov	r2, #0
    3264:	str	r2, [r3, #12]
    3268:	movw	r1, #0
    326c:	movt	r1, #0
    3270:	movw	r0, #65136	; 0xfe70
    3274:	movt	r0, #65535	; 0xffff
    3278:	bl	0 <coda_set_error>
    327c:	mvn	r0, #0
    3280:	b	3248 <void_expression_finalise+0x8c>
    3284:	movw	r1, #0
    3288:	movt	r1, #0
    328c:	movw	r0, #65136	; 0xfe70
    3290:	movt	r0, #65535	; 0xffff
    3294:	bl	0 <coda_set_error>
    3298:	mvn	r0, #0
    329c:	b	3248 <void_expression_finalise+0x8c>

000032a0 <integer_expression_finalise>:
    32a0:	ldr	r3, [r0]
    32a4:	strd	r4, [sp, #-12]!
    32a8:	ldr	r4, [r3, #12]
    32ac:	str	lr, [sp, #8]
    32b0:	sub	sp, sp, #12
    32b4:	cmp	r4, #0
    32b8:	beq	334c <integer_expression_finalise+0xac>
    32bc:	mov	r5, r0
    32c0:	mov	r0, r4
    32c4:	bl	0 <strlen>
    32c8:	mov	r1, r0
    32cc:	mov	r0, r4
    32d0:	bl	3108 <is_whitespace>
    32d4:	cmp	r0, #0
    32d8:	mov	r0, r4
    32dc:	bne	333c <integer_expression_finalise+0x9c>
    32e0:	add	r1, sp, #4
    32e4:	bl	0 <coda_expression_from_string>
    32e8:	subs	r4, r0, #0
    32ec:	bne	3360 <integer_expression_finalise+0xc0>
    32f0:	ldr	r3, [r5]
    32f4:	ldr	r0, [r3, #12]
    32f8:	bl	0 <free>
    32fc:	ldr	r3, [r5]
    3300:	mov	r1, sp
    3304:	ldr	r2, [sp, #4]
    3308:	mov	r0, r2
    330c:	str	r2, [r3, #8]
    3310:	str	r4, [r3, #12]
    3314:	bl	0 <coda_expression_get_type>
    3318:	cmp	r0, #0
    331c:	bne	3360 <integer_expression_finalise+0xc0>
    3320:	ldr	r3, [sp]
    3324:	cmp	r3, #1
    3328:	bne	3368 <integer_expression_finalise+0xc8>
    332c:	add	sp, sp, #12
    3330:	ldrd	r4, [sp]
    3334:	add	sp, sp, #8
    3338:	pop	{pc}		; (ldr pc, [sp], #4)
    333c:	bl	0 <free>
    3340:	ldr	r3, [r5]
    3344:	mov	r2, #0
    3348:	str	r2, [r3, #12]
    334c:	movw	r1, #0
    3350:	movt	r1, #0
    3354:	movw	r0, #65136	; 0xfe70
    3358:	movt	r0, #65535	; 0xffff
    335c:	bl	0 <coda_set_error>
    3360:	mvn	r0, #0
    3364:	b	332c <integer_expression_finalise+0x8c>
    3368:	movw	r1, #0
    336c:	movt	r1, #0
    3370:	movw	r0, #65136	; 0xfe70
    3374:	movt	r0, #65535	; 0xffff
    3378:	bl	0 <coda_set_error>
    337c:	mvn	r0, #0
    3380:	b	332c <integer_expression_finalise+0x8c>

00003384 <bool_expression_finalise>:
    3384:	ldr	r3, [r0]
    3388:	strd	r4, [sp, #-12]!
    338c:	ldr	r4, [r3, #12]
    3390:	str	lr, [sp, #8]
    3394:	sub	sp, sp, #12
    3398:	cmp	r4, #0
    339c:	beq	3430 <bool_expression_finalise+0xac>
    33a0:	mov	r5, r0
    33a4:	mov	r0, r4
    33a8:	bl	0 <strlen>
    33ac:	mov	r1, r0
    33b0:	mov	r0, r4
    33b4:	bl	3108 <is_whitespace>
    33b8:	cmp	r0, #0
    33bc:	mov	r0, r4
    33c0:	bne	3420 <bool_expression_finalise+0x9c>
    33c4:	add	r1, sp, #4
    33c8:	bl	0 <coda_expression_from_string>
    33cc:	subs	r4, r0, #0
    33d0:	bne	3444 <bool_expression_finalise+0xc0>
    33d4:	ldr	r3, [r5]
    33d8:	ldr	r0, [r3, #12]
    33dc:	bl	0 <free>
    33e0:	ldr	r3, [r5]
    33e4:	mov	r1, sp
    33e8:	ldr	r2, [sp, #4]
    33ec:	mov	r0, r2
    33f0:	str	r2, [r3, #8]
    33f4:	str	r4, [r3, #12]
    33f8:	bl	0 <coda_expression_get_type>
    33fc:	cmp	r0, #0
    3400:	bne	3444 <bool_expression_finalise+0xc0>
    3404:	ldr	r3, [sp]
    3408:	cmp	r3, #0
    340c:	bne	344c <bool_expression_finalise+0xc8>
    3410:	add	sp, sp, #12
    3414:	ldrd	r4, [sp]
    3418:	add	sp, sp, #8
    341c:	pop	{pc}		; (ldr pc, [sp], #4)
    3420:	bl	0 <free>
    3424:	ldr	r3, [r5]
    3428:	mov	r2, #0
    342c:	str	r2, [r3, #12]
    3430:	movw	r1, #0
    3434:	movt	r1, #0
    3438:	movw	r0, #65136	; 0xfe70
    343c:	movt	r0, #65535	; 0xffff
    3440:	bl	0 <coda_set_error>
    3444:	mvn	r0, #0
    3448:	b	3410 <bool_expression_finalise+0x8c>
    344c:	movw	r1, #0
    3450:	movt	r1, #0
    3454:	movw	r0, #65136	; 0xfe70
    3458:	movt	r0, #65535	; 0xffff
    345c:	bl	0 <coda_set_error>
    3460:	mvn	r0, #0
    3464:	b	3410 <bool_expression_finalise+0x8c>

00003468 <cd_match_expression_finalise>:
    3468:	ldr	r3, [r0]
    346c:	strd	r4, [sp, #-12]!
    3470:	ldr	r4, [r3, #12]
    3474:	str	lr, [sp, #8]
    3478:	sub	sp, sp, #12
    347c:	cmp	r4, #0
    3480:	beq	3518 <cd_match_expression_finalise+0xb0>
    3484:	mov	r5, r0
    3488:	mov	r0, r4
    348c:	bl	0 <strlen>
    3490:	mov	r1, r0
    3494:	mov	r0, r4
    3498:	bl	3108 <is_whitespace>
    349c:	cmp	r0, #0
    34a0:	mov	r0, r4
    34a4:	bne	3508 <cd_match_expression_finalise+0xa0>
    34a8:	add	r1, sp, #4
    34ac:	bl	0 <coda_expression_from_string>
    34b0:	subs	r4, r0, #0
    34b4:	bne	352c <cd_match_expression_finalise+0xc4>
    34b8:	ldr	r3, [r5]
    34bc:	ldr	r0, [r3, #12]
    34c0:	bl	0 <free>
    34c4:	ldr	r2, [r5]
    34c8:	mov	r1, sp
    34cc:	ldr	r3, [sp, #4]
    34d0:	ldr	ip, [r2, #8]
    34d4:	str	r4, [r2, #12]
    34d8:	mov	r0, r3
    34dc:	str	r3, [ip, #4]
    34e0:	bl	0 <coda_expression_get_type>
    34e4:	cmp	r0, #0
    34e8:	bne	352c <cd_match_expression_finalise+0xc4>
    34ec:	ldr	r3, [sp]
    34f0:	cmp	r3, #0
    34f4:	bne	3534 <cd_match_expression_finalise+0xcc>
    34f8:	add	sp, sp, #12
    34fc:	ldrd	r4, [sp]
    3500:	add	sp, sp, #8
    3504:	pop	{pc}		; (ldr pc, [sp], #4)
    3508:	bl	0 <free>
    350c:	ldr	r3, [r5]
    3510:	mov	r2, #0
    3514:	str	r2, [r3, #12]
    3518:	movw	r1, #0
    351c:	movt	r1, #0
    3520:	movw	r0, #65136	; 0xfe70
    3524:	movt	r0, #65535	; 0xffff
    3528:	bl	0 <coda_set_error>
    352c:	mvn	r0, #0
    3530:	b	34f8 <cd_match_expression_finalise+0x90>
    3534:	movw	r1, #0
    3538:	movt	r1, #0
    353c:	movw	r0, #65136	; 0xfe70
    3540:	movt	r0, #65535	; 0xffff
    3544:	bl	0 <coda_set_error>
    3548:	mvn	r0, #0
    354c:	b	34f8 <cd_match_expression_finalise+0x90>

00003550 <integer_constant_or_expression_finalise>:
    3550:	ldr	r3, [r0]
    3554:	strd	r4, [sp, #-16]!
    3558:	ldr	r5, [r3, #12]
    355c:	str	r6, [sp, #8]
    3560:	str	lr, [sp, #12]
    3564:	sub	sp, sp, #8
    3568:	cmp	r5, #0
    356c:	beq	3648 <integer_constant_or_expression_finalise+0xf8>
    3570:	mov	r4, r0
    3574:	mov	r0, r5
    3578:	bl	0 <strlen>
    357c:	mov	r1, r0
    3580:	mov	r0, r5
    3584:	bl	3108 <is_whitespace>
    3588:	cmp	r0, #0
    358c:	mov	r0, r5
    3590:	bne	3638 <integer_constant_or_expression_finalise+0xe8>
    3594:	add	r1, sp, #4
    3598:	bl	0 <coda_expression_from_string>
    359c:	subs	r5, r0, #0
    35a0:	bne	3664 <integer_constant_or_expression_finalise+0x114>
    35a4:	ldr	r3, [r4]
    35a8:	ldr	r0, [r3, #12]
    35ac:	bl	0 <free>
    35b0:	ldr	r3, [r4]
    35b4:	mov	r1, sp
    35b8:	ldr	r2, [sp, #4]
    35bc:	mov	r0, r2
    35c0:	str	r2, [r3, #8]
    35c4:	str	r5, [r3, #12]
    35c8:	bl	0 <coda_expression_get_type>
    35cc:	subs	r6, r0, #0
    35d0:	bne	3688 <integer_constant_or_expression_finalise+0x138>
    35d4:	ldr	r3, [sp]
    35d8:	cmp	r3, #1
    35dc:	bne	366c <integer_constant_or_expression_finalise+0x11c>
    35e0:	ldr	r0, [sp, #4]
    35e4:	bl	0 <coda_expression_is_constant>
    35e8:	subs	r5, r0, #0
    35ec:	bne	3608 <integer_constant_or_expression_finalise+0xb8>
    35f0:	mov	r0, r5
    35f4:	add	sp, sp, #8
    35f8:	ldrd	r4, [sp]
    35fc:	ldr	r6, [sp, #8]
    3600:	add	sp, sp, #12
    3604:	pop	{pc}		; (ldr pc, [sp], #4)
    3608:	ldr	r2, [r4]
    360c:	mov	r1, r6
    3610:	ldr	r0, [sp, #4]
    3614:	add	r2, r2, #16
    3618:	bl	0 <coda_expression_eval_integer>
    361c:	subs	r5, r0, #0
    3620:	bne	3664 <integer_constant_or_expression_finalise+0x114>
    3624:	ldr	r3, [r4]
    3628:	ldr	r0, [sp, #4]
    362c:	str	r5, [r3, #8]
    3630:	bl	0 <coda_expression_delete>
    3634:	b	35f0 <integer_constant_or_expression_finalise+0xa0>
    3638:	bl	0 <free>
    363c:	ldr	r3, [r4]
    3640:	mov	r2, #0
    3644:	str	r2, [r3, #12]
    3648:	movw	r1, #0
    364c:	movt	r1, #0
    3650:	movw	r0, #65136	; 0xfe70
    3654:	movt	r0, #65535	; 0xffff
    3658:	mvn	r5, #0
    365c:	bl	0 <coda_set_error>
    3660:	b	35f0 <integer_constant_or_expression_finalise+0xa0>
    3664:	mvn	r5, #0
    3668:	b	35f0 <integer_constant_or_expression_finalise+0xa0>
    366c:	movw	r1, #0
    3670:	movt	r1, #0
    3674:	movw	r0, #65136	; 0xfe70
    3678:	movt	r0, #65535	; 0xffff
    367c:	bl	0 <coda_set_error>
    3680:	mvn	r5, #0
    3684:	b	35f0 <integer_constant_or_expression_finalise+0xa0>
    3688:	ldr	r0, [sp, #4]
    368c:	mvn	r5, #0
    3690:	bl	0 <coda_expression_delete>
    3694:	b	35f0 <integer_constant_or_expression_finalise+0xa0>

00003698 <optional_integer_constant_or_expression_finalise>:
    3698:	ldr	r3, [r0]
    369c:	strd	r4, [sp, #-16]!
    36a0:	ldr	r4, [r3, #12]
    36a4:	str	r6, [sp, #8]
    36a8:	str	lr, [sp, #12]
    36ac:	sub	sp, sp, #8
    36b0:	cmp	r4, #0
    36b4:	beq	3790 <optional_integer_constant_or_expression_finalise+0xf8>
    36b8:	mov	r5, r0
    36bc:	mov	r0, r4
    36c0:	bl	0 <strlen>
    36c4:	mov	r1, r0
    36c8:	mov	r0, r4
    36cc:	bl	3108 <is_whitespace>
    36d0:	cmp	r0, #0
    36d4:	mov	r0, r4
    36d8:	bne	3780 <optional_integer_constant_or_expression_finalise+0xe8>
    36dc:	add	r1, sp, #4
    36e0:	bl	0 <coda_expression_from_string>
    36e4:	subs	r4, r0, #0
    36e8:	bne	37a0 <optional_integer_constant_or_expression_finalise+0x108>
    36ec:	ldr	r3, [r5]
    36f0:	ldr	r0, [r3, #12]
    36f4:	bl	0 <free>
    36f8:	ldr	r3, [r5]
    36fc:	mov	r1, sp
    3700:	ldr	r2, [sp, #4]
    3704:	mov	r0, r2
    3708:	str	r2, [r3, #8]
    370c:	str	r4, [r3, #12]
    3710:	bl	0 <coda_expression_get_type>
    3714:	subs	r6, r0, #0
    3718:	bne	37c4 <optional_integer_constant_or_expression_finalise+0x12c>
    371c:	ldr	r3, [sp]
    3720:	cmp	r3, #1
    3724:	bne	37a8 <optional_integer_constant_or_expression_finalise+0x110>
    3728:	ldr	r0, [sp, #4]
    372c:	bl	0 <coda_expression_is_constant>
    3730:	subs	r4, r0, #0
    3734:	bne	3750 <optional_integer_constant_or_expression_finalise+0xb8>
    3738:	mov	r0, r4
    373c:	add	sp, sp, #8
    3740:	ldrd	r4, [sp]
    3744:	ldr	r6, [sp, #8]
    3748:	add	sp, sp, #12
    374c:	pop	{pc}		; (ldr pc, [sp], #4)
    3750:	ldr	r2, [r5]
    3754:	mov	r1, r6
    3758:	ldr	r0, [sp, #4]
    375c:	add	r2, r2, #16
    3760:	bl	0 <coda_expression_eval_integer>
    3764:	subs	r4, r0, #0
    3768:	bne	37a0 <optional_integer_constant_or_expression_finalise+0x108>
    376c:	ldr	r3, [r5]
    3770:	ldr	r0, [sp, #4]
    3774:	str	r4, [r3, #8]
    3778:	bl	0 <coda_expression_delete>
    377c:	b	3738 <optional_integer_constant_or_expression_finalise+0xa0>
    3780:	bl	0 <free>
    3784:	ldr	r3, [r5]
    3788:	mov	r2, #0
    378c:	str	r2, [r3, #12]
    3790:	mov	r2, #1
    3794:	mov	r4, #0
    3798:	str	r2, [r3, #4]
    379c:	b	3738 <optional_integer_constant_or_expression_finalise+0xa0>
    37a0:	mvn	r4, #0
    37a4:	b	3738 <optional_integer_constant_or_expression_finalise+0xa0>
    37a8:	movw	r1, #0
    37ac:	movt	r1, #0
    37b0:	movw	r0, #65136	; 0xfe70
    37b4:	movt	r0, #65535	; 0xffff
    37b8:	bl	0 <coda_set_error>
    37bc:	mvn	r4, #0
    37c0:	b	3738 <optional_integer_constant_or_expression_finalise+0xa0>
    37c4:	ldr	r0, [sp, #4]
    37c8:	mvn	r4, #0
    37cc:	bl	0 <coda_expression_delete>
    37d0:	b	3738 <optional_integer_constant_or_expression_finalise+0xa0>

000037d4 <cd_scale_factor_finalise>:
    37d4:	ldr	r3, [r0]
    37d8:	ldr	r3, [r3, #8]
    37dc:	cmp	r3, #0
    37e0:	beq	37ec <cd_scale_factor_finalise+0x18>
    37e4:	mov	r0, #0
    37e8:	bx	lr
    37ec:	movw	r1, #0
    37f0:	movt	r1, #0
    37f4:	str	r4, [sp, #-8]!
    37f8:	movw	r0, #65136	; 0xfe70
    37fc:	movt	r0, #65535	; 0xffff
    3800:	str	lr, [sp, #4]
    3804:	bl	0 <coda_set_error>
    3808:	ldr	r4, [sp]
    380c:	add	sp, sp, #4
    3810:	mvn	r0, #0
    3814:	pop	{pc}		; (ldr pc, [sp], #4)

00003818 <get_mandatory_attribute_value>:
    3818:	strd	r4, [sp, #-16]!
    381c:	mov	r4, r0
    3820:	mov	r5, r1
    3824:	ldr	r0, [r0]
    3828:	str	r6, [sp, #8]
    382c:	mov	r6, r2
    3830:	str	lr, [sp, #12]
    3834:	cmp	r0, #0
    3838:	bne	384c <get_mandatory_attribute_value+0x34>
    383c:	b	3878 <get_mandatory_attribute_value+0x60>
    3840:	ldr	r0, [r4, #8]!
    3844:	cmp	r0, #0
    3848:	beq	3878 <get_mandatory_attribute_value+0x60>
    384c:	mov	r1, r5
    3850:	bl	0 <strcmp>
    3854:	cmp	r0, #0
    3858:	bne	3840 <get_mandatory_attribute_value+0x28>
    385c:	ldr	r0, [r4, #4]
    3860:	cmp	r0, #0
    3864:	beq	3878 <get_mandatory_attribute_value+0x60>
    3868:	ldrd	r4, [sp]
    386c:	ldr	r6, [sp, #8]
    3870:	add	sp, sp, #12
    3874:	pop	{pc}		; (ldr pc, [sp], #4)
    3878:	cmn	r6, #1
    387c:	beq	38d8 <get_mandatory_attribute_value+0xc0>
    3880:	movw	r3, #0
    3884:	movt	r3, #0
    3888:	add	r6, r3, r6, lsl #2
    388c:	ldr	r3, [r6, #68]	; 0x44
    3890:	ldrb	r2, [r3]
    3894:	cmp	r2, #32
    3898:	beq	38a8 <get_mandatory_attribute_value+0x90>
    389c:	ldrb	r2, [r3, #1]!
    38a0:	cmp	r2, #32
    38a4:	bne	389c <get_mandatory_attribute_value+0x84>
    38a8:	add	r3, r3, #1
    38ac:	mov	r2, r5
    38b0:	movw	r1, #0
    38b4:	movt	r1, #0
    38b8:	movw	r0, #65136	; 0xfe70
    38bc:	movt	r0, #65535	; 0xffff
    38c0:	bl	0 <coda_set_error>
    38c4:	ldrd	r4, [sp]
    38c8:	mov	r0, #0
    38cc:	ldr	r6, [sp, #8]
    38d0:	add	sp, sp, #12
    38d4:	pop	{pc}		; (ldr pc, [sp], #4)
    38d8:	movw	r3, #0
    38dc:	movt	r3, #0
    38e0:	b	38ac <get_mandatory_attribute_value+0x94>

000038e4 <cd_product_definition_sub_init>:
    38e4:	ldr	ip, [r0, #28]
    38e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    38ec:	strd	r6, [sp, #8]
    38f0:	str	r8, [sp, #16]
    38f4:	str	lr, [sp, #20]
    38f8:	cmp	ip, #0
    38fc:	beq	3b40 <cd_product_definition_sub_init+0x25c>
    3900:	mov	r4, r0
    3904:	movw	r2, #0
    3908:	movt	r2, #0
    390c:	ldr	r3, [r4]
    3910:	mov	r5, r1
    3914:	mov	r0, r5
    3918:	movw	r1, #0
    391c:	movt	r1, #0
    3920:	str	ip, [r3, #8]
    3924:	str	r2, [r3, #40]	; 0x28
    3928:	ldr	r2, [r3]
    392c:	bl	3818 <get_mandatory_attribute_value>
    3930:	subs	r6, r0, #0
    3934:	beq	3b18 <cd_product_definition_sub_init+0x234>
    3938:	ldr	r3, [r4, #28]
    393c:	mov	r1, r6
    3940:	ldr	r7, [r3, #8]
    3944:	mov	r0, r7
    3948:	bl	0 <strcmp>
    394c:	cmp	r0, #0
    3950:	bne	3afc <cd_product_definition_sub_init+0x218>
    3954:	ldr	r3, [r4]
    3958:	mov	r0, r5
    395c:	movw	r1, #0
    3960:	movt	r1, #0
    3964:	ldr	r2, [r3]
    3968:	bl	3818 <get_mandatory_attribute_value>
    396c:	cmp	r0, #0
    3970:	beq	3b18 <cd_product_definition_sub_init+0x234>
    3974:	ldr	r1, [r4]
    3978:	add	r1, r1, #44	; 0x2c
    397c:	bl	0 <coda_format_from_string>
    3980:	cmp	r0, #0
    3984:	bne	3b18 <cd_product_definition_sub_init+0x234>
    3988:	ldr	r3, [r4]
    398c:	mov	r2, #1
    3990:	ldr	ip, [r4, #28]
    3994:	str	r2, [r3, #48]	; 0x30
    3998:	ldr	r1, [r3, #44]	; 0x2c
    399c:	ldr	r2, [ip]
    39a0:	cmp	r2, r1
    39a4:	bne	3b20 <cd_product_definition_sub_init+0x23c>
    39a8:	cmp	r2, #2
    39ac:	beq	3ae0 <cd_product_definition_sub_init+0x1fc>
    39b0:	movw	r1, #0
    39b4:	movt	r1, #0
    39b8:	movw	ip, #0
    39bc:	movt	ip, #0
    39c0:	str	r1, [r3, #56]	; 0x38
    39c4:	movw	r1, #0
    39c8:	movt	r1, #0
    39cc:	movw	lr, #0
    39d0:	movt	lr, #0
    39d4:	movw	r2, #0
    39d8:	movt	r2, #0
    39dc:	str	ip, [r3, #60]	; 0x3c
    39e0:	movw	ip, #0
    39e4:	movt	ip, #0
    39e8:	str	r1, [r3, #64]	; 0x40
    39ec:	movw	r1, #0
    39f0:	movt	r1, #0
    39f4:	str	lr, [r3, #52]	; 0x34
    39f8:	movw	lr, #0
    39fc:	movt	lr, #0
    3a00:	str	ip, [r3, #88]	; 0x58
    3a04:	movw	ip, #0
    3a08:	movt	ip, #0
    3a0c:	str	r1, [r3, #120]	; 0x78
    3a10:	movw	r1, #0
    3a14:	movt	r1, #0
    3a18:	str	lr, [r3, #132]	; 0x84
    3a1c:	movw	lr, #0
    3a20:	movt	lr, #0
    3a24:	str	ip, [r3, #160]	; 0xa0
    3a28:	movw	ip, #0
    3a2c:	movt	ip, #0
    3a30:	str	r1, [r3, #188]	; 0xbc
    3a34:	movw	r1, #0
    3a38:	movt	r1, #0
    3a3c:	str	lr, [r3, #192]	; 0xc0
    3a40:	movw	lr, #0
    3a44:	movt	lr, #0
    3a48:	str	ip, [r3, #200]	; 0xc8
    3a4c:	movw	ip, #0
    3a50:	movt	ip, #0
    3a54:	str	r1, [r3, #204]	; 0xcc
    3a58:	movw	r1, #0
    3a5c:	movt	r1, #0
    3a60:	str	lr, [r3, #208]	; 0xd0
    3a64:	str	ip, [r3, #212]	; 0xd4
    3a68:	str	r1, [r3, #220]	; 0xdc
    3a6c:	str	r2, [r3, #224]	; 0xe0
    3a70:	str	r2, [r3, #228]	; 0xe4
    3a74:	str	r2, [r3, #232]	; 0xe8
    3a78:	str	r2, [r3, #236]	; 0xec
    3a7c:	str	r2, [r3, #260]	; 0x104
    3a80:	str	r2, [r3, #292]	; 0x124
    3a84:	str	r2, [r3, #304]	; 0x130
    3a88:	str	r2, [r3, #332]	; 0x14c
    3a8c:	str	r2, [r3, #360]	; 0x168
    3a90:	str	r2, [r3, #364]	; 0x16c
    3a94:	str	r2, [r3, #372]	; 0x174
    3a98:	str	r2, [r3, #376]	; 0x178
    3a9c:	str	r2, [r3, #380]	; 0x17c
    3aa0:	str	r2, [r3, #384]	; 0x180
    3aa4:	str	r2, [r3, #392]	; 0x188
    3aa8:	movw	ip, #0
    3aac:	movt	ip, #0
    3ab0:	movw	r1, #0
    3ab4:	movt	r1, #0
    3ab8:	movw	r2, #0
    3abc:	movt	r2, #0
    3ac0:	str	r2, [r3, #36]	; 0x24
    3ac4:	str	ip, [r3, #184]	; 0xb8
    3ac8:	str	r1, [r3, #356]	; 0x164
    3acc:	ldrd	r4, [sp]
    3ad0:	ldrd	r6, [sp, #8]
    3ad4:	ldr	r8, [sp, #16]
    3ad8:	add	sp, sp, #20
    3adc:	pop	{pc}		; (ldr pc, [sp], #4)
    3ae0:	movw	r1, #0
    3ae4:	movt	r1, #0
    3ae8:	movw	r2, #0
    3aec:	movt	r2, #0
    3af0:	str	r1, [r3, #192]	; 0xc0
    3af4:	str	r2, [r3, #364]	; 0x16c
    3af8:	b	3aa8 <cd_product_definition_sub_init+0x1c4>
    3afc:	movw	r1, #0
    3b00:	movt	r1, #0
    3b04:	movw	r0, #65136	; 0xfe70
    3b08:	movt	r0, #65535	; 0xffff
    3b0c:	mov	r3, r7
    3b10:	mov	r2, r6
    3b14:	bl	0 <coda_set_error>
    3b18:	mvn	r0, #0
    3b1c:	b	3acc <cd_product_definition_sub_init+0x1e8>
    3b20:	movw	r1, #0
    3b24:	movt	r1, #0
    3b28:	ldr	r2, [ip, #8]
    3b2c:	movw	r0, #65136	; 0xfe70
    3b30:	movt	r0, #65535	; 0xffff
    3b34:	bl	0 <coda_set_error>
    3b38:	mvn	r0, #0
    3b3c:	b	3acc <cd_product_definition_sub_init+0x1e8>
    3b40:	movw	r1, #0
    3b44:	movt	r1, #0
    3b48:	ldr	r3, [pc, #12]	; 3b5c <cd_product_definition_sub_init+0x278>
    3b4c:	movw	r0, #0
    3b50:	movt	r0, #0
    3b54:	movw	r2, #2974	; 0xb9e
    3b58:	bl	0 <__assert_fail>
    3b5c:	.word	0x00000100

00003b60 <cd_product_variable_init>:
    3b60:	ldr	r3, [r0]
    3b64:	strd	r4, [sp, #-16]!
    3b68:	mov	r4, r0
    3b6c:	mov	r0, r1
    3b70:	movw	r1, #0
    3b74:	movt	r1, #0
    3b78:	ldr	r2, [r3]
    3b7c:	str	r6, [sp, #8]
    3b80:	str	lr, [sp, #12]
    3b84:	bl	3818 <get_mandatory_attribute_value>
    3b88:	cmp	r0, #0
    3b8c:	beq	3c08 <cd_product_variable_init+0xa8>
    3b90:	ldr	r5, [r4]
    3b94:	movw	r3, #0
    3b98:	movt	r3, #0
    3b9c:	str	r3, [r5, #40]	; 0x28
    3ba0:	bl	0 <coda_product_variable_new>
    3ba4:	ldr	r3, [r4]
    3ba8:	str	r0, [r5, #8]
    3bac:	ldr	r2, [r3, #8]
    3bb0:	cmp	r2, #0
    3bb4:	beq	3c08 <cd_product_variable_init+0xa8>
    3bb8:	movw	r1, #0
    3bbc:	movt	r1, #0
    3bc0:	movw	r2, #0
    3bc4:	movt	r2, #0
    3bc8:	movw	r0, #0
    3bcc:	movt	r0, #0
    3bd0:	str	r1, [r3, #104]	; 0x68
    3bd4:	movw	r1, #0
    3bd8:	movt	r1, #0
    3bdc:	str	r0, [r3, #128]	; 0x80
    3be0:	mov	r0, #0
    3be4:	str	r2, [r3, #276]	; 0x114
    3be8:	movw	r2, #0
    3bec:	movt	r2, #0
    3bf0:	str	r2, [r3, #36]	; 0x24
    3bf4:	str	r1, [r3, #300]	; 0x12c
    3bf8:	ldrd	r4, [sp]
    3bfc:	ldr	r6, [sp, #8]
    3c00:	add	sp, sp, #12
    3c04:	pop	{pc}		; (ldr pc, [sp], #4)
    3c08:	mvn	r0, #0
    3c0c:	b	3bf8 <cd_product_variable_init+0x98>

00003c10 <cd_field_init>:
    3c10:	strd	r4, [sp, #-32]!	; 0xffffffe0
    3c14:	ldr	r4, [r1]
    3c18:	strd	r6, [sp, #8]
    3c1c:	mov	r7, r0
    3c20:	strd	r8, [sp, #16]
    3c24:	mov	r8, r1
    3c28:	str	sl, [sp, #24]
    3c2c:	str	lr, [sp, #28]
    3c30:	cmp	r4, #0
    3c34:	beq	3edc <cd_field_init+0x2cc>
    3c38:	movw	r9, #0
    3c3c:	movt	r9, #0
    3c40:	mov	r6, r1
    3c44:	mov	r5, r1
    3c48:	mov	r0, r4
    3c4c:	b	3c5c <cd_field_init+0x4c>
    3c50:	ldr	r0, [r5, #8]!
    3c54:	cmp	r0, #0
    3c58:	beq	3c78 <cd_field_init+0x68>
    3c5c:	mov	r1, r9
    3c60:	bl	0 <strcmp>
    3c64:	cmp	r0, #0
    3c68:	bne	3c50 <cd_field_init+0x40>
    3c6c:	ldr	r3, [r5, #4]
    3c70:	cmp	r3, #0
    3c74:	bne	3f20 <cd_field_init+0x310>
    3c78:	ldr	r9, [r7]
    3c7c:	ldr	r3, [r9, #396]	; 0x18c
    3c80:	ldr	r2, [r3, #48]	; 0x30
    3c84:	cmp	r2, #0
    3c88:	beq	3f44 <cd_field_init+0x334>
    3c8c:	ldr	r3, [r3, #44]	; 0x2c
    3c90:	mov	r2, #1
    3c94:	movw	r5, #0
    3c98:	movt	r5, #0
    3c9c:	str	r3, [r9, #44]	; 0x2c
    3ca0:	str	r2, [r9, #48]	; 0x30
    3ca4:	b	3cb4 <cd_field_init+0xa4>
    3ca8:	ldr	r4, [r6, #8]!
    3cac:	cmp	r4, #0
    3cb0:	beq	3cd4 <cd_field_init+0xc4>
    3cb4:	mov	r0, r4
    3cb8:	mov	r1, r5
    3cbc:	bl	0 <strcmp>
    3cc0:	cmp	r0, #0
    3cc4:	bne	3ca8 <cd_field_init+0x98>
    3cc8:	ldr	r3, [r6, #4]
    3ccc:	cmp	r3, #0
    3cd0:	bne	3f04 <cd_field_init+0x2f4>
    3cd4:	movw	r1, #0
    3cd8:	movt	r1, #0
    3cdc:	ldr	r2, [r9]
    3ce0:	mov	r0, r8
    3ce4:	bl	3818 <get_mandatory_attribute_value>
    3ce8:	cmp	r0, #0
    3cec:	beq	3f3c <cd_field_init+0x32c>
    3cf0:	ldr	r5, [r7]
    3cf4:	movw	r3, #0
    3cf8:	movt	r3, #0
    3cfc:	str	r3, [r5, #40]	; 0x28
    3d00:	bl	0 <coda_type_record_field_new>
    3d04:	ldr	r4, [r7]
    3d08:	str	r0, [r5, #8]
    3d0c:	ldr	r9, [r4, #8]
    3d10:	cmp	r9, #0
    3d14:	beq	3f3c <cd_field_init+0x32c>
    3d18:	ldr	r0, [r8]
    3d1c:	cmp	r0, #0
    3d20:	beq	3d6c <cd_field_init+0x15c>
    3d24:	movw	r6, #0
    3d28:	movt	r6, #0
    3d2c:	b	3d3c <cd_field_init+0x12c>
    3d30:	ldr	r0, [r8, #8]!
    3d34:	cmp	r0, #0
    3d38:	beq	3d6c <cd_field_init+0x15c>
    3d3c:	mov	r1, r6
    3d40:	bl	0 <strcmp>
    3d44:	cmp	r0, #0
    3d48:	bne	3d30 <cd_field_init+0x120>
    3d4c:	ldr	r1, [r8, #4]
    3d50:	cmp	r1, #0
    3d54:	beq	3d6c <cd_field_init+0x15c>
    3d58:	mov	r0, r9
    3d5c:	bl	0 <coda_type_record_field_set_real_name>
    3d60:	cmp	r0, #0
    3d64:	bne	3f3c <cd_field_init+0x32c>
    3d68:	ldr	r4, [r7]
    3d6c:	movw	r2, #0
    3d70:	movt	r2, #0
    3d74:	movw	r0, #0
    3d78:	movt	r0, #0
    3d7c:	movw	r1, #0
    3d80:	movt	r1, #0
    3d84:	str	r2, [r4, #56]	; 0x38
    3d88:	movw	r2, #0
    3d8c:	movt	r2, #0
    3d90:	movw	ip, #0
    3d94:	movt	ip, #0
    3d98:	strd	r0, [r4, #60]	; 0x3c
    3d9c:	movw	r0, #0
    3da0:	movt	r0, #0
    3da4:	movw	r1, #0
    3da8:	movt	r1, #0
    3dac:	str	r2, [r4, #52]	; 0x34
    3db0:	movw	r2, #0
    3db4:	movt	r2, #0
    3db8:	str	r0, [r4, #88]	; 0x58
    3dbc:	movw	r0, #0
    3dc0:	movt	r0, #0
    3dc4:	str	r1, [r4, #120]	; 0x78
    3dc8:	movw	r1, #0
    3dcc:	movt	r1, #0
    3dd0:	str	r2, [r4, #132]	; 0x84
    3dd4:	movw	r2, #0
    3dd8:	movt	r2, #0
    3ddc:	str	r0, [r4, #160]	; 0xa0
    3de0:	movw	r0, #0
    3de4:	movt	r0, #0
    3de8:	str	r1, [r4, #188]	; 0xbc
    3dec:	movw	r1, #0
    3df0:	movt	r1, #0
    3df4:	str	r2, [r4, #192]	; 0xc0
    3df8:	movw	r2, #0
    3dfc:	movt	r2, #0
    3e00:	strd	r0, [r4, #200]	; 0xc8
    3e04:	movw	r0, #0
    3e08:	movt	r0, #0
    3e0c:	movw	r3, #0
    3e10:	movt	r3, #0
    3e14:	str	r2, [r4, #208]	; 0xd0
    3e18:	movw	lr, #0
    3e1c:	movt	lr, #0
    3e20:	str	r0, [r4, #212]	; 0xd4
    3e24:	movw	r1, #0
    3e28:	movt	r1, #0
    3e2c:	movw	r2, #0
    3e30:	movt	r2, #0
    3e34:	movw	r0, #0
    3e38:	movt	r0, #0
    3e3c:	str	ip, [r4, #296]	; 0x128
    3e40:	movw	ip, #0
    3e44:	movt	ip, #0
    3e48:	movw	r5, #0
    3e4c:	movt	r5, #0
    3e50:	str	r2, [r4, #124]	; 0x7c
    3e54:	str	r2, [r4, #168]	; 0xa8
    3e58:	str	r1, [r4, #220]	; 0xdc
    3e5c:	movw	r1, #0
    3e60:	movt	r1, #0
    3e64:	str	r3, [r4, #224]	; 0xe0
    3e68:	str	r3, [r4, #228]	; 0xe4
    3e6c:	str	r3, [r4, #232]	; 0xe8
    3e70:	str	r3, [r4, #236]	; 0xec
    3e74:	str	lr, [r4, #244]	; 0xf4
    3e78:	str	r3, [r4, #260]	; 0x104
    3e7c:	str	r3, [r4, #292]	; 0x124
    3e80:	str	r3, [r4, #304]	; 0x130
    3e84:	str	r3, [r4, #332]	; 0x14c
    3e88:	str	r3, [r4, #360]	; 0x168
    3e8c:	str	r3, [r4, #364]	; 0x16c
    3e90:	str	r3, [r4, #372]	; 0x174
    3e94:	str	r3, [r4, #376]	; 0x178
    3e98:	str	r3, [r4, #380]	; 0x17c
    3e9c:	str	r3, [r4, #384]	; 0x180
    3ea0:	str	r3, [r4, #392]	; 0x188
    3ea4:	movw	r3, #0
    3ea8:	movt	r3, #0
    3eac:	str	ip, [r4, #248]	; 0xf8
    3eb0:	str	r3, [r4, #36]	; 0x24
    3eb4:	str	r0, [r4, #72]	; 0x48
    3eb8:	mov	r0, #0
    3ebc:	str	r5, [r4, #76]	; 0x4c
    3ec0:	str	r1, [r4, #340]	; 0x154
    3ec4:	ldrd	r4, [sp]
    3ec8:	ldrd	r6, [sp, #8]
    3ecc:	ldrd	r8, [sp, #16]
    3ed0:	ldr	sl, [sp, #24]
    3ed4:	add	sp, sp, #28
    3ed8:	pop	{pc}		; (ldr pc, [sp], #4)
    3edc:	ldr	r9, [r0]
    3ee0:	ldr	r3, [r9, #396]	; 0x18c
    3ee4:	ldr	r2, [r3, #48]	; 0x30
    3ee8:	cmp	r2, #0
    3eec:	beq	3f44 <cd_field_init+0x334>
    3ef0:	ldr	r3, [r3, #44]	; 0x2c
    3ef4:	mov	r2, #1
    3ef8:	str	r3, [r9, #44]	; 0x2c
    3efc:	str	r2, [r9, #48]	; 0x30
    3f00:	b	3cd4 <cd_field_init+0xc4>
    3f04:	movw	r1, #0
    3f08:	movt	r1, #0
    3f0c:	movw	r0, #65136	; 0xfe70
    3f10:	movt	r0, #65535	; 0xffff
    3f14:	bl	0 <coda_set_error>
    3f18:	mvn	r0, #0
    3f1c:	b	3ec4 <cd_field_init+0x2b4>
    3f20:	movw	r1, #0
    3f24:	movt	r1, #0
    3f28:	movw	r0, #65136	; 0xfe70
    3f2c:	movt	r0, #65535	; 0xffff
    3f30:	bl	0 <coda_set_error>
    3f34:	mvn	r0, #0
    3f38:	b	3ec4 <cd_field_init+0x2b4>
    3f3c:	mvn	r0, #0
    3f40:	b	3ec4 <cd_field_init+0x2b4>
    3f44:	movw	r1, #0
    3f48:	movt	r1, #0
    3f4c:	ldr	r3, [pc, #12]	; 3f60 <cd_field_init+0x350>
    3f50:	movw	r0, #0
    3f54:	movt	r0, #0
    3f58:	movw	r2, #1685	; 0x695
    3f5c:	bl	0 <__assert_fail>
    3f60:	.word	0x00000120

00003f64 <cd_product_type_init>:
    3f64:	ldr	r3, [r0]
    3f68:	strd	r4, [sp, #-16]!
    3f6c:	mov	r4, r0
    3f70:	mov	r0, r1
    3f74:	movw	r1, #0
    3f78:	movt	r1, #0
    3f7c:	ldr	r2, [r3]
    3f80:	str	r6, [sp, #8]
    3f84:	str	lr, [sp, #12]
    3f88:	bl	3818 <get_mandatory_attribute_value>
    3f8c:	cmp	r0, #0
    3f90:	beq	4000 <cd_product_type_init+0x9c>
    3f94:	ldr	r5, [r4]
    3f98:	movw	r3, #0
    3f9c:	movt	r3, #0
    3fa0:	str	r3, [r5, #40]	; 0x28
    3fa4:	bl	0 <coda_product_type_new>
    3fa8:	ldr	r3, [r4]
    3fac:	str	r0, [r5, #8]
    3fb0:	ldr	r2, [r3, #8]
    3fb4:	cmp	r2, #0
    3fb8:	beq	4000 <cd_product_type_init+0x9c>
    3fbc:	movw	r2, #0
    3fc0:	movt	r2, #0
    3fc4:	movw	r0, #0
    3fc8:	movt	r0, #0
    3fcc:	movw	r1, #0
    3fd0:	movt	r1, #0
    3fd4:	str	r2, [r3, #96]	; 0x60
    3fd8:	movw	r2, #0
    3fdc:	movt	r2, #0
    3fe0:	str	r1, [r3, #176]	; 0xb0
    3fe4:	str	r0, [r3, #268]	; 0x10c
    3fe8:	mov	r0, #0
    3fec:	str	r2, [r3, #348]	; 0x15c
    3ff0:	ldrd	r4, [sp]
    3ff4:	ldr	r6, [sp, #8]
    3ff8:	add	sp, sp, #12
    3ffc:	pop	{pc}		; (ldr pc, [sp], #4)
    4000:	mvn	r0, #0
    4004:	b	3ff0 <cd_product_type_init+0x8c>

00004008 <cd_match_size_init>:
    4008:	strd	r4, [sp, #-20]!	; 0xffffffec
    400c:	movw	r3, #0
    4010:	movt	r3, #0
    4014:	ldr	r4, [r0]
    4018:	mov	r5, r0
    401c:	mov	r0, #0
    4020:	strd	r6, [sp, #8]
    4024:	mov	r6, r1
    4028:	str	lr, [sp, #16]
    402c:	sub	sp, sp, #12
    4030:	str	r3, [r4, #40]	; 0x28
    4034:	bl	0 <coda_detection_rule_entry_new>
    4038:	ldr	r3, [r5]
    403c:	str	r0, [r4, #8]
    4040:	ldr	r2, [r3, #8]
    4044:	cmp	r2, #0
    4048:	beq	4110 <cd_match_size_init+0x108>
    404c:	mov	r0, r6
    4050:	movw	r1, #0
    4054:	movt	r1, #0
    4058:	ldr	r2, [r3]
    405c:	bl	3818 <get_mandatory_attribute_value>
    4060:	subs	r7, r0, #0
    4064:	beq	4110 <cd_match_size_init+0x108>
    4068:	bl	0 <strdup>
    406c:	subs	r1, r0, #0
    4070:	beq	4148 <cd_match_size_init+0x140>
    4074:	mov	r4, #0
    4078:	mov	r0, #20
    407c:	mov	r3, r4
    4080:	mov	r2, r4
    4084:	str	r4, [sp]
    4088:	str	r4, [sp, #4]
    408c:	bl	0 <coda_expression_new>
    4090:	subs	r6, r0, #0
    4094:	beq	4128 <cd_match_size_init+0x120>
    4098:	mov	r2, r4
    409c:	mov	r3, r4
    40a0:	str	r4, [sp]
    40a4:	mov	r1, r4
    40a8:	mov	r0, #27
    40ac:	str	r4, [sp, #4]
    40b0:	bl	0 <coda_expression_new>
    40b4:	subs	r2, r0, #0
    40b8:	beq	4118 <cd_match_size_init+0x110>
    40bc:	mov	r1, r4
    40c0:	mov	r3, r6
    40c4:	str	r4, [sp]
    40c8:	mov	r0, #25
    40cc:	str	r4, [sp, #4]
    40d0:	bl	0 <coda_expression_new>
    40d4:	subs	r4, r0, #0
    40d8:	beq	4110 <cd_match_size_init+0x108>
    40dc:	ldr	r3, [r5]
    40e0:	mov	r1, r4
    40e4:	ldr	r0, [r3, #8]
    40e8:	bl	0 <coda_detection_rule_entry_set_expression>
    40ec:	cmp	r0, #0
    40f0:	bne	4108 <cd_match_size_init+0x100>
    40f4:	add	sp, sp, #12
    40f8:	ldrd	r4, [sp]
    40fc:	ldrd	r6, [sp, #8]
    4100:	add	sp, sp, #16
    4104:	pop	{pc}		; (ldr pc, [sp], #4)
    4108:	mov	r0, r4
    410c:	bl	0 <coda_expression_delete>
    4110:	mvn	r0, #0
    4114:	b	40f4 <cd_match_size_init+0xec>
    4118:	mov	r0, r6
    411c:	bl	0 <coda_expression_delete>
    4120:	mvn	r0, #0
    4124:	b	40f4 <cd_match_size_init+0xec>
    4128:	mov	r2, r7
    412c:	movw	r1, #0
    4130:	movt	r1, #0
    4134:	movw	r0, #65136	; 0xfe70
    4138:	movt	r0, #65535	; 0xffff
    413c:	bl	0 <coda_set_error>
    4140:	mvn	r0, #0
    4144:	b	40f4 <cd_match_size_init+0xec>
    4148:	mvn	r0, #0
    414c:	movw	r2, #0
    4150:	movt	r2, #0
    4154:	movw	r1, #0
    4158:	movt	r1, #0
    415c:	movw	r3, #2694	; 0xa86
    4160:	bl	0 <coda_set_error>
    4164:	mvn	r0, #0
    4168:	b	40f4 <cd_match_size_init+0xec>

0000416c <cd_match_filename_init>:
    416c:	ldr	r3, [r0]
    4170:	strd	r4, [sp, #-16]!
    4174:	mov	r4, r0
    4178:	mov	r0, r1
    417c:	movw	r1, #0
    4180:	movt	r1, #0
    4184:	ldr	r2, [r3]
    4188:	str	r6, [sp, #8]
    418c:	str	lr, [sp, #12]
    4190:	sub	sp, sp, #8
    4194:	bl	3818 <get_mandatory_attribute_value>
    4198:	subs	r6, r0, #0
    419c:	beq	425c <cd_match_filename_init+0xf0>
    41a0:	ldr	r5, [r4]
    41a4:	movw	r3, #0
    41a8:	movt	r3, #0
    41ac:	mov	r0, #0
    41b0:	str	r3, [r5, #40]	; 0x28
    41b4:	bl	0 <coda_detection_rule_entry_new>
    41b8:	ldr	r3, [r4]
    41bc:	str	r0, [r5, #8]
    41c0:	ldr	r3, [r3, #8]
    41c4:	cmp	r3, #0
    41c8:	beq	425c <cd_match_filename_init+0xf0>
    41cc:	mov	r0, r6
    41d0:	bl	0 <strdup>
    41d4:	subs	r1, r0, #0
    41d8:	beq	4274 <cd_match_filename_init+0x108>
    41dc:	mov	ip, #0
    41e0:	mov	r0, #20
    41e4:	mov	r3, ip
    41e8:	mov	r2, ip
    41ec:	str	ip, [sp]
    41f0:	str	ip, [sp, #4]
    41f4:	bl	0 <coda_expression_new>
    41f8:	subs	r5, r0, #0
    41fc:	beq	4244 <cd_match_filename_init+0xd8>
    4200:	ldr	r3, [r4]
    4204:	mov	r1, r5
    4208:	ldr	r0, [r3, #8]
    420c:	bl	0 <coda_detection_rule_entry_set_expression>
    4210:	cmp	r0, #0
    4214:	bne	4264 <cd_match_filename_init+0xf8>
    4218:	ldr	r2, [r4]
    421c:	mov	r1, #1
    4220:	movw	r3, #0
    4224:	movt	r3, #0
    4228:	str	r1, [r2, #32]
    422c:	str	r3, [r2, #36]	; 0x24
    4230:	add	sp, sp, #8
    4234:	ldrd	r4, [sp]
    4238:	ldr	r6, [sp, #8]
    423c:	add	sp, sp, #12
    4240:	pop	{pc}		; (ldr pc, [sp], #4)
    4244:	movw	r1, #0
    4248:	movt	r1, #0
    424c:	movw	r0, #65136	; 0xfe70
    4250:	movt	r0, #65535	; 0xffff
    4254:	mov	r2, r6
    4258:	bl	0 <coda_set_error>
    425c:	mvn	r0, #0
    4260:	b	4230 <cd_match_filename_init+0xc4>
    4264:	mov	r0, r5
    4268:	bl	0 <coda_expression_delete>
    426c:	mvn	r0, #0
    4270:	b	4230 <cd_match_filename_init+0xc4>
    4274:	mvn	r0, #0
    4278:	movw	r2, #0
    427c:	movt	r2, #0
    4280:	movw	r1, #0
    4284:	movt	r1, #0
    4288:	movw	r3, #2649	; 0xa59
    428c:	bl	0 <coda_set_error>
    4290:	mvn	r0, #0
    4294:	b	4230 <cd_match_filename_init+0xc4>

00004298 <cd_attribute_init>:
    4298:	strd	r4, [sp, #-32]!	; 0xffffffe0
    429c:	ldr	r4, [r1]
    42a0:	strd	r6, [sp, #8]
    42a4:	mov	r7, r0
    42a8:	strd	r8, [sp, #16]
    42ac:	mov	r8, r1
    42b0:	str	sl, [sp, #24]
    42b4:	str	lr, [sp, #28]
    42b8:	cmp	r4, #0
    42bc:	beq	4604 <cd_attribute_init+0x36c>
    42c0:	movw	r9, #0
    42c4:	movt	r9, #0
    42c8:	mov	r6, r1
    42cc:	mov	r5, r1
    42d0:	mov	r0, r4
    42d4:	b	42e4 <cd_attribute_init+0x4c>
    42d8:	ldr	r0, [r5, #8]!
    42dc:	cmp	r0, #0
    42e0:	beq	4300 <cd_attribute_init+0x68>
    42e4:	mov	r1, r9
    42e8:	bl	0 <strcmp>
    42ec:	cmp	r0, #0
    42f0:	bne	42d8 <cd_attribute_init+0x40>
    42f4:	ldr	r3, [r5, #4]
    42f8:	cmp	r3, #0
    42fc:	bne	4648 <cd_attribute_init+0x3b0>
    4300:	ldr	r9, [r7]
    4304:	ldr	r3, [r9, #396]	; 0x18c
    4308:	ldr	r2, [r3, #48]	; 0x30
    430c:	cmp	r2, #0
    4310:	beq	4664 <cd_attribute_init+0x3cc>
    4314:	ldr	r3, [r3, #44]	; 0x2c
    4318:	mov	r2, #1
    431c:	movw	r5, #0
    4320:	movt	r5, #0
    4324:	str	r3, [r9, #44]	; 0x2c
    4328:	str	r2, [r9, #48]	; 0x30
    432c:	b	433c <cd_attribute_init+0xa4>
    4330:	ldr	r4, [r6, #8]!
    4334:	cmp	r4, #0
    4338:	beq	435c <cd_attribute_init+0xc4>
    433c:	mov	r0, r4
    4340:	mov	r1, r5
    4344:	bl	0 <strcmp>
    4348:	cmp	r0, #0
    434c:	bne	4330 <cd_attribute_init+0x98>
    4350:	ldr	r3, [r6, #4]
    4354:	cmp	r3, #0
    4358:	bne	462c <cd_attribute_init+0x394>
    435c:	movw	r1, #0
    4360:	movt	r1, #0
    4364:	ldr	r2, [r9]
    4368:	mov	r0, r8
    436c:	bl	3818 <get_mandatory_attribute_value>
    4370:	subs	r6, r0, #0
    4374:	beq	45b8 <cd_attribute_init+0x320>
    4378:	ldr	r0, [r8]
    437c:	cmp	r0, #0
    4380:	beq	4580 <cd_attribute_init+0x2e8>
    4384:	movw	r5, #0
    4388:	movt	r5, #0
    438c:	b	439c <cd_attribute_init+0x104>
    4390:	ldr	r0, [r8, #8]!
    4394:	cmp	r0, #0
    4398:	beq	4580 <cd_attribute_init+0x2e8>
    439c:	mov	r1, r5
    43a0:	bl	0 <strcmp>
    43a4:	cmp	r0, #0
    43a8:	bne	4390 <cd_attribute_init+0xf8>
    43ac:	ldr	r5, [r7]
    43b0:	movw	r3, #0
    43b4:	movt	r3, #0
    43b8:	ldr	r4, [r8, #4]
    43bc:	ldr	r2, [r5, #44]	; 0x2c
    43c0:	str	r3, [r5, #40]	; 0x28
    43c4:	cmp	r2, #2
    43c8:	cmpeq	r4, #0
    43cc:	beq	45c0 <cd_attribute_init+0x328>
    43d0:	mov	r0, r6
    43d4:	bl	0 <coda_type_record_field_new>
    43d8:	ldr	r3, [r7]
    43dc:	str	r0, [r5, #8]
    43e0:	ldr	r0, [r3, #8]
    43e4:	cmp	r0, #0
    43e8:	beq	45b8 <cd_attribute_init+0x320>
    43ec:	cmp	r4, #0
    43f0:	beq	4408 <cd_attribute_init+0x170>
    43f4:	mov	r1, r4
    43f8:	bl	0 <coda_type_record_field_set_real_name>
    43fc:	cmp	r0, #0
    4400:	bne	45b8 <cd_attribute_init+0x320>
    4404:	ldr	r3, [r7]
    4408:	movw	r1, #0
    440c:	movt	r1, #0
    4410:	movw	r0, #0
    4414:	movt	r0, #0
    4418:	movw	ip, #0
    441c:	movt	ip, #0
    4420:	str	r1, [r3, #56]	; 0x38
    4424:	movw	r1, #0
    4428:	movt	r1, #0
    442c:	movw	r2, #0
    4430:	movt	r2, #0
    4434:	str	r0, [r3, #64]	; 0x40
    4438:	movw	r0, #0
    443c:	movt	r0, #0
    4440:	str	r1, [r3, #52]	; 0x34
    4444:	movw	r1, #0
    4448:	movt	r1, #0
    444c:	str	ip, [r3, #60]	; 0x3c
    4450:	movw	ip, #0
    4454:	movt	ip, #0
    4458:	movw	lr, #0
    445c:	movt	lr, #0
    4460:	str	r0, [r3, #120]	; 0x78
    4464:	movw	r0, #0
    4468:	movt	r0, #0
    446c:	str	ip, [r3, #88]	; 0x58
    4470:	movw	ip, #0
    4474:	movt	ip, #0
    4478:	str	r1, [r3, #132]	; 0x84
    447c:	movw	r1, #0
    4480:	movt	r1, #0
    4484:	str	ip, [r3, #160]	; 0xa0
    4488:	movw	ip, #0
    448c:	movt	ip, #0
    4490:	str	r0, [r3, #188]	; 0xbc
    4494:	movw	r0, #0
    4498:	movt	r0, #0
    449c:	str	r1, [r3, #192]	; 0xc0
    44a0:	movw	r1, #0
    44a4:	movt	r1, #0
    44a8:	str	ip, [r3, #200]	; 0xc8
    44ac:	movw	ip, #0
    44b0:	movt	ip, #0
    44b4:	str	r0, [r3, #204]	; 0xcc
    44b8:	movw	r0, #0
    44bc:	movt	r0, #0
    44c0:	str	r1, [r3, #208]	; 0xd0
    44c4:	movw	r1, #0
    44c8:	movt	r1, #0
    44cc:	movw	r4, #0
    44d0:	movt	r4, #0
    44d4:	str	r0, [r3, #220]	; 0xdc
    44d8:	movw	r0, #0
    44dc:	movt	r0, #0
    44e0:	movw	r5, #0
    44e4:	movt	r5, #0
    44e8:	str	r1, [r3, #124]	; 0x7c
    44ec:	str	ip, [r3, #212]	; 0xd4
    44f0:	movw	ip, #0
    44f4:	movt	ip, #0
    44f8:	str	r2, [r3, #224]	; 0xe0
    44fc:	str	r2, [r3, #228]	; 0xe4
    4500:	str	r2, [r3, #232]	; 0xe8
    4504:	str	r2, [r3, #236]	; 0xec
    4508:	str	r2, [r3, #260]	; 0x104
    450c:	str	r2, [r3, #292]	; 0x124
    4510:	str	lr, [r3, #296]	; 0x128
    4514:	movw	lr, #0
    4518:	movt	lr, #0
    451c:	str	r2, [r3, #304]	; 0x130
    4520:	str	r2, [r3, #332]	; 0x14c
    4524:	str	r2, [r3, #360]	; 0x168
    4528:	str	r2, [r3, #364]	; 0x16c
    452c:	str	r2, [r3, #372]	; 0x174
    4530:	str	r2, [r3, #376]	; 0x178
    4534:	str	r2, [r3, #380]	; 0x17c
    4538:	str	r2, [r3, #384]	; 0x180
    453c:	str	r2, [r3, #392]	; 0x188
    4540:	movw	r2, #0
    4544:	movt	r2, #0
    4548:	str	r1, [r3, #168]	; 0xa8
    454c:	str	r2, [r3, #36]	; 0x24
    4550:	str	r0, [r3, #72]	; 0x48
    4554:	mov	r0, #0
    4558:	str	r5, [r3, #116]	; 0x74
    455c:	str	r4, [r3, #244]	; 0xf4
    4560:	str	lr, [r3, #288]	; 0x120
    4564:	str	ip, [r3, #340]	; 0x154
    4568:	ldrd	r4, [sp]
    456c:	ldrd	r6, [sp, #8]
    4570:	ldrd	r8, [sp, #16]
    4574:	ldr	sl, [sp, #24]
    4578:	add	sp, sp, #28
    457c:	pop	{pc}		; (ldr pc, [sp], #4)
    4580:	ldr	r4, [r7]
    4584:	movw	r3, #0
    4588:	movt	r3, #0
    458c:	ldr	r2, [r4, #44]	; 0x2c
    4590:	str	r3, [r4, #40]	; 0x28
    4594:	cmp	r2, #2
    4598:	beq	45c0 <cd_attribute_init+0x328>
    459c:	mov	r0, r6
    45a0:	bl	0 <coda_type_record_field_new>
    45a4:	ldr	r3, [r7]
    45a8:	str	r0, [r4, #8]
    45ac:	ldr	r2, [r3, #8]
    45b0:	cmp	r2, #0
    45b4:	bne	4408 <cd_attribute_init+0x170>
    45b8:	mvn	r0, #0
    45bc:	b	4568 <cd_attribute_init+0x2d0>
    45c0:	mov	r0, r6
    45c4:	bl	0 <coda_element_name_from_xml_name>
    45c8:	mov	r1, #0
    45cc:	bl	0 <coda_identifier_from_name>
    45d0:	subs	r4, r0, #0
    45d4:	beq	45b8 <cd_attribute_init+0x320>
    45d8:	ldr	r5, [r7]
    45dc:	bl	0 <coda_type_record_field_new>
    45e0:	str	r0, [r5, #8]
    45e4:	mov	r0, r4
    45e8:	bl	0 <free>
    45ec:	ldr	r3, [r7]
    45f0:	ldr	r0, [r3, #8]
    45f4:	cmp	r0, #0
    45f8:	beq	45b8 <cd_attribute_init+0x320>
    45fc:	mov	r4, r6
    4600:	b	43f4 <cd_attribute_init+0x15c>
    4604:	ldr	r9, [r0]
    4608:	ldr	r3, [r9, #396]	; 0x18c
    460c:	ldr	r2, [r3, #48]	; 0x30
    4610:	cmp	r2, #0
    4614:	beq	4664 <cd_attribute_init+0x3cc>
    4618:	ldr	r3, [r3, #44]	; 0x2c
    461c:	mov	r2, #1
    4620:	str	r3, [r9, #44]	; 0x2c
    4624:	str	r2, [r9, #48]	; 0x30
    4628:	b	435c <cd_attribute_init+0xc4>
    462c:	movw	r1, #0
    4630:	movt	r1, #0
    4634:	movw	r0, #65136	; 0xfe70
    4638:	movt	r0, #65535	; 0xffff
    463c:	bl	0 <coda_set_error>
    4640:	mvn	r0, #0
    4644:	b	4568 <cd_attribute_init+0x2d0>
    4648:	movw	r1, #0
    464c:	movt	r1, #0
    4650:	movw	r0, #65136	; 0xfe70
    4654:	movt	r0, #65535	; 0xffff
    4658:	bl	0 <coda_set_error>
    465c:	mvn	r0, #0
    4660:	b	4568 <cd_attribute_init+0x2d0>
    4664:	movw	r1, #0
    4668:	movt	r1, #0
    466c:	ldr	r3, [pc, #12]	; 4680 <cd_attribute_init+0x3e8>
    4670:	movw	r0, #0
    4674:	movt	r0, #0
    4678:	movw	r2, #1439	; 0x59f
    467c:	bl	0 <__assert_fail>
    4680:	.word	0x00000130

00004684 <cd_mapping_init>:
    4684:	ldr	r3, [r0]
    4688:	strd	r4, [sp, #-16]!
    468c:	mov	r4, r0
    4690:	mov	r5, r1
    4694:	mov	r0, r1
    4698:	movw	r1, #0
    469c:	movt	r1, #0
    46a0:	ldr	r2, [r3]
    46a4:	str	r6, [sp, #8]
    46a8:	str	lr, [sp, #12]
    46ac:	sub	sp, sp, #8
    46b0:	bl	3818 <get_mandatory_attribute_value>
    46b4:	subs	r6, r0, #0
    46b8:	beq	4838 <cd_mapping_init+0x1b4>
    46bc:	ldr	r3, [r4]
    46c0:	mov	r0, r5
    46c4:	movw	r1, #0
    46c8:	movt	r1, #0
    46cc:	ldr	r2, [r3]
    46d0:	bl	3818 <get_mandatory_attribute_value>
    46d4:	subs	r5, r0, #0
    46d8:	beq	4838 <cd_mapping_init+0x1b4>
    46dc:	ldr	r3, [r4]
    46e0:	ldr	r3, [r3, #396]	; 0x18c
    46e4:	ldr	r3, [r3]
    46e8:	cmp	r3, #20
    46ec:	beq	47bc <cd_mapping_init+0x138>
    46f0:	cmp	r3, #38	; 0x26
    46f4:	cmpne	r3, #17
    46f8:	bne	485c <cd_mapping_init+0x1d8>
    46fc:	movw	r1, #0
    4700:	movt	r1, #0
    4704:	bl	0 <strcasecmp>
    4708:	cmp	r0, #0
    470c:	beq	478c <cd_mapping_init+0x108>
    4710:	movw	r1, #0
    4714:	movt	r1, #0
    4718:	mov	r0, r5
    471c:	bl	0 <strcasecmp>
    4720:	cmp	r0, #0
    4724:	beq	4740 <cd_mapping_init+0xbc>
    4728:	movw	r1, #0
    472c:	movt	r1, #0
    4730:	mov	r0, r5
    4734:	bl	0 <strcasecmp>
    4738:	cmp	r0, #0
    473c:	bne	4798 <cd_mapping_init+0x114>
    4740:	bl	0 <coda_PlusInf>
    4744:	vstr	d0, [sp]
    4748:	ldr	r5, [r4]
    474c:	movw	r3, #0
    4750:	movt	r3, #0
    4754:	mov	r0, r6
    4758:	str	r3, [r5, #40]	; 0x28
    475c:	bl	0 <coda_ascii_float_mapping_new>
    4760:	ldr	r3, [r4]
    4764:	str	r0, [r5, #8]
    4768:	ldr	r3, [r3, #8]
    476c:	cmp	r3, #0
    4770:	beq	4838 <cd_mapping_init+0x1b4>
    4774:	mov	r0, #0
    4778:	add	sp, sp, #8
    477c:	ldrd	r4, [sp]
    4780:	ldr	r6, [sp, #8]
    4784:	add	sp, sp, #12
    4788:	pop	{pc}		; (ldr pc, [sp], #4)
    478c:	bl	0 <coda_NaN>
    4790:	vstr	d0, [sp]
    4794:	b	4748 <cd_mapping_init+0xc4>
    4798:	movw	r1, #0
    479c:	movt	r1, #0
    47a0:	mov	r0, r5
    47a4:	bl	0 <strcasecmp>
    47a8:	cmp	r0, #0
    47ac:	bne	47fc <cd_mapping_init+0x178>
    47b0:	bl	0 <coda_MinInf>
    47b4:	vstr	d0, [sp]
    47b8:	b	4748 <cd_mapping_init+0xc4>
    47bc:	bl	0 <strlen>
    47c0:	mov	r1, r0
    47c4:	mov	r3, #0
    47c8:	mov	r2, sp
    47cc:	mov	r0, r5
    47d0:	bl	0 <coda_ascii_parse_int64>
    47d4:	cmp	r0, #0
    47d8:	blt	4840 <cd_mapping_init+0x1bc>
    47dc:	ldr	r5, [r4]
    47e0:	movw	r1, #0
    47e4:	movt	r1, #0
    47e8:	mov	r0, r6
    47ec:	ldrd	r2, [sp]
    47f0:	str	r1, [r5, #40]	; 0x28
    47f4:	bl	0 <coda_ascii_integer_mapping_new>
    47f8:	b	4760 <cd_mapping_init+0xdc>
    47fc:	movw	r1, #0
    4800:	movt	r1, #0
    4804:	mov	r2, sp
    4808:	mov	r0, r5
    480c:	bl	0 <__isoc99_sscanf>
    4810:	cmp	r0, #1
    4814:	bne	4820 <cd_mapping_init+0x19c>
    4818:	vldr	d0, [sp]
    481c:	b	4748 <cd_mapping_init+0xc4>
    4820:	movw	r1, #0
    4824:	movt	r1, #0
    4828:	movw	r0, #65136	; 0xfe70
    482c:	movt	r0, #65535	; 0xffff
    4830:	mov	r2, r5
    4834:	bl	0 <coda_set_error>
    4838:	mvn	r0, #0
    483c:	b	4778 <cd_mapping_init+0xf4>
    4840:	mov	r2, r5
    4844:	movw	r1, #0
    4848:	movt	r1, #0
    484c:	movw	r0, #65136	; 0xfe70
    4850:	movt	r0, #65535	; 0xffff
    4854:	bl	0 <coda_set_error>
    4858:	b	4838 <cd_mapping_init+0x1b4>
    485c:	movw	r1, #0
    4860:	movt	r1, #0
    4864:	ldr	r3, [pc, #12]	; 4878 <cd_mapping_init+0x1f4>
    4868:	movw	r0, #0
    486c:	movt	r0, #0
    4870:	movw	r2, #2040	; 0x7f8
    4874:	bl	0 <__assert_fail>
    4878:	.word	0x00000144

0000487c <cd_conversion_init>:
    487c:	mov	r2, #0
    4880:	mov	r3, #0
    4884:	strd	r4, [sp, #-28]!	; 0xffffffe4
    4888:	strd	r6, [sp, #8]
    488c:	strd	r8, [sp, #16]
    4890:	mov	r9, r0
    4894:	mov	r8, r1
    4898:	str	lr, [sp, #24]
    489c:	sub	sp, sp, #36	; 0x24
    48a0:	strd	r2, [sp, #16]
    48a4:	bl	0 <coda_NaN>
    48a8:	ldr	r3, [r9]
    48ac:	mov	r0, r8
    48b0:	movw	r1, #0
    48b4:	movt	r1, #0
    48b8:	ldr	r2, [r3]
    48bc:	vstr	d0, [sp, #24]
    48c0:	bl	3818 <get_mandatory_attribute_value>
    48c4:	subs	r4, r0, #0
    48c8:	beq	4a84 <cd_conversion_init+0x208>
    48cc:	ldr	r3, [r9]
    48d0:	movw	r1, #0
    48d4:	movt	r1, #0
    48d8:	mov	r0, r8
    48dc:	ldr	r2, [r3]
    48e0:	bl	3818 <get_mandatory_attribute_value>
    48e4:	subs	r5, r0, #0
    48e8:	beq	4a84 <cd_conversion_init+0x208>
    48ec:	mov	r0, r4
    48f0:	bl	0 <strlen>
    48f4:	mov	r1, r0
    48f8:	mov	r3, #1
    48fc:	mov	r2, sp
    4900:	mov	r0, r4
    4904:	bl	0 <coda_ascii_parse_double>
    4908:	cmp	r0, #0
    490c:	blt	4a8c <cd_conversion_init+0x210>
    4910:	mov	r0, r5
    4914:	bl	0 <strlen>
    4918:	mov	r1, r0
    491c:	mov	r3, #1
    4920:	add	r2, sp, #8
    4924:	mov	r0, r5
    4928:	bl	0 <coda_ascii_parse_double>
    492c:	cmp	r0, #0
    4930:	blt	4aac <cd_conversion_init+0x230>
    4934:	ldr	r4, [r8]
    4938:	cmp	r4, #0
    493c:	beq	4a0c <cd_conversion_init+0x190>
    4940:	movw	r7, #0
    4944:	movt	r7, #0
    4948:	mov	r5, r8
    494c:	mov	r6, r8
    4950:	mov	r0, r4
    4954:	b	4964 <cd_conversion_init+0xe8>
    4958:	ldr	r0, [r6, #8]!
    495c:	cmp	r0, #0
    4960:	beq	49b0 <cd_conversion_init+0x134>
    4964:	mov	r1, r7
    4968:	bl	0 <strcmp>
    496c:	cmp	r0, #0
    4970:	bne	4958 <cd_conversion_init+0xdc>
    4974:	ldr	r6, [r6, #4]
    4978:	cmp	r6, #0
    497c:	beq	49b0 <cd_conversion_init+0x134>
    4980:	mov	r0, r6
    4984:	bl	0 <strlen>
    4988:	mov	r1, r0
    498c:	mov	r3, #1
    4990:	add	r2, sp, #16
    4994:	mov	r0, r6
    4998:	bl	0 <coda_ascii_parse_double>
    499c:	cmp	r0, #0
    49a0:	blt	4a6c <cd_conversion_init+0x1f0>
    49a4:	ldr	r4, [r8]
    49a8:	cmp	r4, #0
    49ac:	beq	4a0c <cd_conversion_init+0x190>
    49b0:	movw	r6, #0
    49b4:	movt	r6, #0
    49b8:	b	49c8 <cd_conversion_init+0x14c>
    49bc:	ldr	r4, [r5, #8]!
    49c0:	cmp	r4, #0
    49c4:	beq	4a0c <cd_conversion_init+0x190>
    49c8:	mov	r0, r4
    49cc:	mov	r1, r6
    49d0:	bl	0 <strcmp>
    49d4:	cmp	r0, #0
    49d8:	bne	49bc <cd_conversion_init+0x140>
    49dc:	ldr	r4, [r5, #4]
    49e0:	cmp	r4, #0
    49e4:	beq	4a0c <cd_conversion_init+0x190>
    49e8:	mov	r0, r4
    49ec:	bl	0 <strlen>
    49f0:	mov	r1, r0
    49f4:	mov	r3, #1
    49f8:	add	r2, sp, #24
    49fc:	mov	r0, r4
    4a00:	bl	0 <coda_ascii_parse_double>
    4a04:	cmp	r0, #0
    4a08:	blt	4acc <cd_conversion_init+0x250>
    4a0c:	ldr	r4, [r9]
    4a10:	movw	r3, #0
    4a14:	movt	r3, #0
    4a18:	vldr	d0, [sp]
    4a1c:	vldr	d1, [sp, #8]
    4a20:	str	r3, [r4, #40]	; 0x28
    4a24:	vldr	d2, [sp, #16]
    4a28:	vldr	d3, [sp, #24]
    4a2c:	bl	0 <coda_conversion_new>
    4a30:	ldr	r1, [r9]
    4a34:	movw	r2, #0
    4a38:	movt	r2, #0
    4a3c:	movw	r3, #0
    4a40:	movt	r3, #0
    4a44:	str	r0, [r4, #8]
    4a48:	mov	r0, #0
    4a4c:	str	r2, [r1, #216]	; 0xd8
    4a50:	str	r3, [r1, #388]	; 0x184
    4a54:	add	sp, sp, #36	; 0x24
    4a58:	ldrd	r4, [sp]
    4a5c:	ldrd	r6, [sp, #8]
    4a60:	ldrd	r8, [sp, #16]
    4a64:	add	sp, sp, #24
    4a68:	pop	{pc}		; (ldr pc, [sp], #4)
    4a6c:	movw	r1, #0
    4a70:	movt	r1, #0
    4a74:	movw	r0, #65136	; 0xfe70
    4a78:	movt	r0, #65535	; 0xffff
    4a7c:	mov	r2, r6
    4a80:	bl	0 <coda_set_error>
    4a84:	mvn	r0, #0
    4a88:	b	4a54 <cd_conversion_init+0x1d8>
    4a8c:	mov	r2, r4
    4a90:	movw	r1, #0
    4a94:	movt	r1, #0
    4a98:	movw	r0, #65136	; 0xfe70
    4a9c:	movt	r0, #65535	; 0xffff
    4aa0:	bl	0 <coda_set_error>
    4aa4:	mvn	r0, #0
    4aa8:	b	4a54 <cd_conversion_init+0x1d8>
    4aac:	mov	r2, r5
    4ab0:	movw	r1, #0
    4ab4:	movt	r1, #0
    4ab8:	movw	r0, #65136	; 0xfe70
    4abc:	movt	r0, #65535	; 0xffff
    4ac0:	bl	0 <coda_set_error>
    4ac4:	mvn	r0, #0
    4ac8:	b	4a54 <cd_conversion_init+0x1d8>
    4acc:	mov	r2, r4
    4ad0:	movw	r1, #0
    4ad4:	movt	r1, #0
    4ad8:	movw	r0, #65136	; 0xfe70
    4adc:	movt	r0, #65535	; 0xffff
    4ae0:	bl	0 <coda_set_error>
    4ae4:	mvn	r0, #0
    4ae8:	b	4a54 <cd_conversion_init+0x1d8>

00004aec <cd_product_definition_init>:
    4aec:	ldr	r3, [r0]
    4af0:	strd	r4, [sp, #-20]!	; 0xffffffec
    4af4:	mov	r4, r0
    4af8:	mov	r5, r1
    4afc:	mov	r0, r1
    4b00:	movw	r1, #0
    4b04:	movt	r1, #0
    4b08:	ldr	r2, [r3]
    4b0c:	strd	r6, [sp, #8]
    4b10:	str	lr, [sp, #16]
    4b14:	sub	sp, sp, #20
    4b18:	bl	3818 <get_mandatory_attribute_value>
    4b1c:	subs	r7, r0, #0
    4b20:	beq	4c5c <cd_product_definition_init+0x170>
    4b24:	ldr	r3, [r4]
    4b28:	movw	r1, #0
    4b2c:	movt	r1, #0
    4b30:	mov	r0, r5
    4b34:	ldr	r2, [r3]
    4b38:	bl	3818 <get_mandatory_attribute_value>
    4b3c:	cmp	r0, #0
    4b40:	beq	4c5c <cd_product_definition_init+0x170>
    4b44:	ldr	r1, [r4]
    4b48:	add	r1, r1, #44	; 0x2c
    4b4c:	bl	0 <coda_format_from_string>
    4b50:	subs	r6, r0, #0
    4b54:	bne	4c5c <cd_product_definition_init+0x170>
    4b58:	ldr	r3, [r4]
    4b5c:	mov	r2, #1
    4b60:	mov	r0, r5
    4b64:	movw	r1, #0
    4b68:	movt	r1, #0
    4b6c:	str	r2, [r3, #48]	; 0x30
    4b70:	ldr	r2, [r3]
    4b74:	bl	3818 <get_mandatory_attribute_value>
    4b78:	subs	r5, r0, #0
    4b7c:	beq	4c5c <cd_product_definition_init+0x170>
    4b80:	movw	r1, #0
    4b84:	movt	r1, #0
    4b88:	add	r2, sp, #12
    4b8c:	bl	0 <__isoc99_sscanf>
    4b90:	cmp	r0, #1
    4b94:	bne	4c64 <cd_product_definition_init+0x178>
    4b98:	ldr	r1, [r4]
    4b9c:	movw	r3, #0
    4ba0:	movt	r3, #0
    4ba4:	mov	r0, r7
    4ba8:	ldr	r2, [sp, #12]
    4bac:	str	r3, [r1, #40]	; 0x28
    4bb0:	ldr	r1, [r1, #44]	; 0x2c
    4bb4:	bl	0 <coda_product_definition_new>
    4bb8:	cmp	r0, #0
    4bbc:	str	r0, [r4, #28]
    4bc0:	beq	4c5c <cd_product_definition_init+0x170>
    4bc4:	ldr	r3, [pc, #184]	; 4c84 <cd_product_definition_init+0x198>
    4bc8:	mrc	15, 0, r2, cr13, cr0, {3}
    4bcc:	ldr	r3, [pc, r3]
    4bd0:	ldr	r3, [r2, r3]
    4bd4:	cmp	r3, #0
    4bd8:	bne	4c2c <cd_product_definition_init+0x140>
    4bdc:	ldr	r3, [r4]
    4be0:	movw	lr, #0
    4be4:	movt	lr, #0
    4be8:	movw	r1, #0
    4bec:	movt	r1, #0
    4bf0:	movw	ip, #0
    4bf4:	movt	ip, #0
    4bf8:	movw	r2, #0
    4bfc:	movt	r2, #0
    4c00:	str	r0, [r3, #8]
    4c04:	str	lr, [r3, #96]	; 0x60
    4c08:	str	ip, [r3, #100]	; 0x64
    4c0c:	str	r1, [r3, #268]	; 0x10c
    4c10:	str	r2, [r3, #272]	; 0x110
    4c14:	mov	r0, r6
    4c18:	add	sp, sp, #20
    4c1c:	ldrd	r4, [sp]
    4c20:	ldrd	r6, [sp, #8]
    4c24:	add	sp, sp, #16
    4c28:	pop	{pc}		; (ldr pc, [sp], #4)
    4c2c:	mov	r2, r7
    4c30:	mov	r1, #2
    4c34:	str	r0, [sp]
    4c38:	ldr	r0, [r4, #16]
    4c3c:	ldr	r3, [r4, #24]
    4c40:	bl	1b20 <parse_entry>
    4c44:	cmp	r0, #0
    4c48:	ldr	r0, [r4, #28]
    4c4c:	beq	4bdc <cd_product_definition_init+0xf0>
    4c50:	bl	0 <coda_product_definition_delete>
    4c54:	str	r6, [r4, #28]
    4c58:	str	r6, [r4, #44]	; 0x2c
    4c5c:	mvn	r6, #0
    4c60:	b	4c14 <cd_product_definition_init+0x128>
    4c64:	mov	r2, r5
    4c68:	movw	r1, #0
    4c6c:	movt	r1, #0
    4c70:	movw	r0, #65136	; 0xfe70
    4c74:	movt	r0, #65535	; 0xffff
    4c78:	mvn	r6, #0
    4c7c:	bl	0 <coda_set_error>
    4c80:	b	4c14 <cd_product_definition_init+0x128>
    4c84:	.word	0x000000b0

00004c88 <handle_format_attribute_for_type.isra.6>:
    4c88:	strd	r4, [sp, #-24]!	; 0xffffffe8
    4c8c:	strd	r6, [sp, #8]
    4c90:	mov	r7, r0
    4c94:	ldr	r6, [r0]
    4c98:	str	r8, [sp, #16]
    4c9c:	str	lr, [sp, #20]
    4ca0:	ldr	r8, [r6, #396]	; 0x18c
    4ca4:	ldr	r3, [r8, #48]	; 0x30
    4ca8:	cmp	r3, #0
    4cac:	beq	4d28 <handle_format_attribute_for_type.isra.6+0xa0>
    4cb0:	ldr	r0, [r1]
    4cb4:	cmp	r0, #0
    4cb8:	movwne	r5, #0
    4cbc:	movne	r4, r1
    4cc0:	movtne	r5, #0
    4cc4:	bne	4cd8 <handle_format_attribute_for_type.isra.6+0x50>
    4cc8:	b	4d60 <handle_format_attribute_for_type.isra.6+0xd8>
    4ccc:	ldr	r0, [r4, #8]!
    4cd0:	cmp	r0, #0
    4cd4:	beq	4d60 <handle_format_attribute_for_type.isra.6+0xd8>
    4cd8:	mov	r1, r5
    4cdc:	bl	0 <strcmp>
    4ce0:	cmp	r0, #0
    4ce4:	bne	4ccc <handle_format_attribute_for_type.isra.6+0x44>
    4ce8:	ldr	r0, [r4, #4]
    4cec:	cmp	r0, #0
    4cf0:	beq	4d60 <handle_format_attribute_for_type.isra.6+0xd8>
    4cf4:	add	r1, r6, #44	; 0x2c
    4cf8:	bl	0 <coda_format_from_string>
    4cfc:	cmp	r0, #0
    4d00:	bne	4d58 <handle_format_attribute_for_type.isra.6+0xd0>
    4d04:	ldr	r6, [r7]
    4d08:	mov	r3, #1
    4d0c:	mov	r0, #0
    4d10:	str	r3, [r6, #48]	; 0x30
    4d14:	ldrd	r4, [sp]
    4d18:	ldrd	r6, [sp, #8]
    4d1c:	ldr	r8, [sp, #16]
    4d20:	add	sp, sp, #20
    4d24:	pop	{pc}		; (ldr pc, [sp], #4)
    4d28:	mov	r0, r1
    4d2c:	movw	r1, #0
    4d30:	movt	r1, #0
    4d34:	ldr	r2, [r6]
    4d38:	bl	3818 <get_mandatory_attribute_value>
    4d3c:	cmp	r0, #0
    4d40:	beq	4d58 <handle_format_attribute_for_type.isra.6+0xd0>
    4d44:	ldr	r1, [r7]
    4d48:	add	r1, r1, #44	; 0x2c
    4d4c:	bl	0 <coda_format_from_string>
    4d50:	cmp	r0, #0
    4d54:	beq	4d04 <handle_format_attribute_for_type.isra.6+0x7c>
    4d58:	mvn	r0, #0
    4d5c:	b	4d14 <handle_format_attribute_for_type.isra.6+0x8c>
    4d60:	ldr	r3, [r8, #44]	; 0x2c
    4d64:	str	r3, [r6, #44]	; 0x2c
    4d68:	b	4d08 <handle_format_attribute_for_type.isra.6+0x80>

00004d6c <handle_xml_name.isra.7>:
    4d6c:	ldr	r3, [r0, #48]	; 0x30
    4d70:	strd	r4, [sp, #-16]!
    4d74:	str	r6, [sp, #8]
    4d78:	str	lr, [sp, #12]
    4d7c:	cmp	r3, #0
    4d80:	beq	4e60 <handle_xml_name.isra.7+0xf4>
    4d84:	ldr	r3, [r0, #44]	; 0x2c
    4d88:	cmp	r3, #2
    4d8c:	bne	4dbc <handle_xml_name.isra.7+0x50>
    4d90:	ldr	r4, [r0, #396]	; 0x18c
    4d94:	ldr	r3, [r4]
    4d98:	cmp	r3, #14
    4d9c:	bne	4db4 <handle_xml_name.isra.7+0x48>
    4da0:	b	4dd0 <handle_xml_name.isra.7+0x64>
    4da4:	ldr	r4, [r4, #396]	; 0x18c
    4da8:	ldr	r3, [r4]
    4dac:	cmp	r3, #14
    4db0:	beq	4dd0 <handle_xml_name.isra.7+0x64>
    4db4:	cmn	r3, #1
    4db8:	bne	4da4 <handle_xml_name.isra.7+0x38>
    4dbc:	mov	r0, #0
    4dc0:	ldrd	r4, [sp]
    4dc4:	ldr	r6, [sp, #8]
    4dc8:	add	sp, sp, #12
    4dcc:	pop	{pc}		; (ldr pc, [sp], #4)
    4dd0:	ldr	r0, [r1]
    4dd4:	cmp	r0, #0
    4dd8:	beq	4dc0 <handle_xml_name.isra.7+0x54>
    4ddc:	movw	r6, #0
    4de0:	movt	r6, #0
    4de4:	mov	r5, r1
    4de8:	b	4df8 <handle_xml_name.isra.7+0x8c>
    4dec:	ldr	r0, [r5, #8]!
    4df0:	cmp	r0, #0
    4df4:	beq	4dc0 <handle_xml_name.isra.7+0x54>
    4df8:	mov	r1, r6
    4dfc:	bl	0 <strcmp>
    4e00:	cmp	r0, #0
    4e04:	bne	4dec <handle_xml_name.isra.7+0x80>
    4e08:	ldr	r1, [r5, #4]
    4e0c:	cmp	r1, #0
    4e10:	beq	4dc0 <handle_xml_name.isra.7+0x54>
    4e14:	ldr	r0, [r4, #8]
    4e18:	ldr	r3, [r0, #4]
    4e1c:	cmp	r3, #0
    4e20:	bne	4e44 <handle_xml_name.isra.7+0xd8>
    4e24:	bl	0 <coda_type_record_field_set_real_name>
    4e28:	adds	r0, r0, #0
    4e2c:	ldrd	r4, [sp]
    4e30:	movne	r0, #1
    4e34:	ldr	r6, [sp, #8]
    4e38:	add	sp, sp, #12
    4e3c:	rsb	r0, r0, #0
    4e40:	pop	{pc}		; (ldr pc, [sp], #4)
    4e44:	movw	r1, #0
    4e48:	movt	r1, #0
    4e4c:	movw	r0, #65136	; 0xfe70
    4e50:	movt	r0, #65535	; 0xffff
    4e54:	bl	0 <coda_set_error>
    4e58:	mvn	r0, #0
    4e5c:	b	4dc0 <handle_xml_name.isra.7+0x54>
    4e60:	movw	r1, #0
    4e64:	movt	r1, #0
    4e68:	ldr	r3, [pc, #12]	; 4e7c <handle_xml_name.isra.7+0x110>
    4e6c:	movw	r0, #0
    4e70:	movt	r0, #0
    4e74:	mov	r2, #676	; 0x2a4
    4e78:	bl	0 <__assert_fail>
    4e7c:	.word	0x00000154

00004e80 <cd_type_init>:
    4e80:	strd	r4, [sp, #-24]!	; 0xffffffe8
    4e84:	strd	r6, [sp, #8]
    4e88:	mov	r7, r0
    4e8c:	mov	r6, r1
    4e90:	ldr	r0, [r1]
    4e94:	str	r8, [sp, #16]
    4e98:	str	lr, [sp, #20]
    4e9c:	cmp	r0, #0
    4ea0:	beq	4edc <cd_type_init+0x5c>
    4ea4:	movw	r5, #0
    4ea8:	movt	r5, #0
    4eac:	mov	r4, r1
    4eb0:	b	4ec0 <cd_type_init+0x40>
    4eb4:	ldr	r0, [r4, #8]!
    4eb8:	cmp	r0, #0
    4ebc:	beq	4edc <cd_type_init+0x5c>
    4ec0:	mov	r1, r5
    4ec4:	bl	0 <strcmp>
    4ec8:	cmp	r0, #0
    4ecc:	bne	4eb4 <cd_type_init+0x34>
    4ed0:	ldr	r3, [r4, #4]
    4ed4:	cmp	r3, #0
    4ed8:	bne	5070 <cd_type_init+0x1f0>
    4edc:	mov	r1, r6
    4ee0:	mov	r0, r7
    4ee4:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    4ee8:	cmp	r0, #0
    4eec:	bne	508c <cd_type_init+0x20c>
    4ef0:	ldr	r4, [r7]
    4ef4:	movw	r3, #0
    4ef8:	movt	r3, #0
    4efc:	str	r3, [r4, #40]	; 0x28
    4f00:	ldr	r0, [r4, #44]	; 0x2c
    4f04:	bl	0 <coda_type_text_new>
    4f08:	ldr	r3, [r7]
    4f0c:	str	r0, [r4, #8]
    4f10:	ldr	r2, [r3, #8]
    4f14:	cmp	r2, #0
    4f18:	beq	508c <cd_type_init+0x20c>
    4f1c:	movw	r0, #0
    4f20:	movt	r0, #0
    4f24:	movw	ip, #0
    4f28:	movt	ip, #0
    4f2c:	str	r0, [r3, #60]	; 0x3c
    4f30:	movw	r0, #0
    4f34:	movt	r0, #0
    4f38:	movw	lr, #0
    4f3c:	movt	lr, #0
    4f40:	str	r0, [r3, #52]	; 0x34
    4f44:	movw	r0, #0
    4f48:	movt	r0, #0
    4f4c:	str	ip, [r3, #64]	; 0x40
    4f50:	movw	ip, #0
    4f54:	movt	ip, #0
    4f58:	str	lr, [r3, #88]	; 0x58
    4f5c:	movw	lr, #0
    4f60:	movt	lr, #0
    4f64:	str	ip, [r3, #120]	; 0x78
    4f68:	movw	ip, #0
    4f6c:	movt	ip, #0
    4f70:	str	r0, [r3, #132]	; 0x84
    4f74:	movw	r0, #0
    4f78:	movt	r0, #0
    4f7c:	str	lr, [r3, #160]	; 0xa0
    4f80:	movw	lr, #0
    4f84:	movt	lr, #0
    4f88:	str	ip, [r3, #188]	; 0xbc
    4f8c:	movw	ip, #0
    4f90:	movt	ip, #0
    4f94:	str	r0, [r3, #192]	; 0xc0
    4f98:	movw	r0, #0
    4f9c:	movt	r0, #0
    4fa0:	str	lr, [r3, #200]	; 0xc8
    4fa4:	movw	lr, #0
    4fa8:	movt	lr, #0
    4fac:	str	ip, [r3, #204]	; 0xcc
    4fb0:	movw	ip, #0
    4fb4:	movt	ip, #0
    4fb8:	str	r0, [r3, #208]	; 0xd0
    4fbc:	movw	r0, #0
    4fc0:	movt	r0, #0
    4fc4:	movw	r1, #0
    4fc8:	movt	r1, #0
    4fcc:	movw	r2, #0
    4fd0:	movt	r2, #0
    4fd4:	str	r1, [r3, #56]	; 0x38
    4fd8:	mov	r1, r6
    4fdc:	str	r0, [r3, #96]	; 0x60
    4fe0:	movw	r0, #0
    4fe4:	movt	r0, #0
    4fe8:	str	lr, [r3, #212]	; 0xd4
    4fec:	movw	lr, #0
    4ff0:	movt	lr, #0
    4ff4:	str	ip, [r3, #220]	; 0xdc
    4ff8:	movw	ip, #0
    4ffc:	movt	ip, #0
    5000:	str	r2, [r3, #224]	; 0xe0
    5004:	str	r2, [r3, #228]	; 0xe4
    5008:	str	r2, [r3, #232]	; 0xe8
    500c:	str	r2, [r3, #236]	; 0xec
    5010:	str	r2, [r3, #260]	; 0x104
    5014:	str	lr, [r3, #268]	; 0x10c
    5018:	str	r2, [r3, #292]	; 0x124
    501c:	str	r2, [r3, #304]	; 0x130
    5020:	str	r2, [r3, #332]	; 0x14c
    5024:	str	r2, [r3, #360]	; 0x168
    5028:	str	r2, [r3, #364]	; 0x16c
    502c:	str	r2, [r3, #372]	; 0x174
    5030:	str	r2, [r3, #376]	; 0x178
    5034:	str	r2, [r3, #380]	; 0x17c
    5038:	str	r2, [r3, #384]	; 0x180
    503c:	str	r2, [r3, #392]	; 0x188
    5040:	str	ip, [r3, #68]	; 0x44
    5044:	str	r0, [r3, #240]	; 0xf0
    5048:	ldr	r0, [r7]
    504c:	bl	4d6c <handle_xml_name.isra.7>
    5050:	adds	r0, r0, #0
    5054:	movne	r0, #1
    5058:	rsb	r0, r0, #0
    505c:	ldrd	r4, [sp]
    5060:	ldrd	r6, [sp, #8]
    5064:	ldr	r8, [sp, #16]
    5068:	add	sp, sp, #20
    506c:	pop	{pc}		; (ldr pc, [sp], #4)
    5070:	movw	r1, #0
    5074:	movt	r1, #0
    5078:	movw	r0, #65136	; 0xfe70
    507c:	movt	r0, #65535	; 0xffff
    5080:	bl	0 <coda_set_error>
    5084:	mvn	r0, #0
    5088:	b	505c <cd_type_init+0x1dc>
    508c:	mvn	r0, #0
    5090:	b	505c <cd_type_init+0x1dc>

00005094 <handle_name_attribute_for_type.isra.8>:
    5094:	ldr	r3, [r0]
    5098:	strd	r4, [sp, #-16]!
    509c:	mov	r5, r1
    50a0:	ldr	r1, [r3, #396]	; 0x18c
    50a4:	ldr	r1, [r1, #396]	; 0x18c
    50a8:	str	r6, [sp, #8]
    50ac:	str	lr, [sp, #12]
    50b0:	cmp	r1, #0
    50b4:	beq	510c <handle_name_attribute_for_type.isra.8+0x78>
    50b8:	ldr	r0, [r2]
    50bc:	cmp	r0, #0
    50c0:	movwne	r5, #0
    50c4:	movne	r4, r2
    50c8:	movtne	r5, #0
    50cc:	bne	50e0 <handle_name_attribute_for_type.isra.8+0x4c>
    50d0:	b	50fc <handle_name_attribute_for_type.isra.8+0x68>
    50d4:	ldr	r0, [r4, #8]!
    50d8:	cmp	r0, #0
    50dc:	beq	50fc <handle_name_attribute_for_type.isra.8+0x68>
    50e0:	mov	r1, r5
    50e4:	bl	0 <strcmp>
    50e8:	cmp	r0, #0
    50ec:	bne	50d4 <handle_name_attribute_for_type.isra.8+0x40>
    50f0:	ldr	r3, [r4, #4]
    50f4:	cmp	r3, #0
    50f8:	bne	516c <handle_name_attribute_for_type.isra.8+0xd8>
    50fc:	ldrd	r4, [sp]
    5100:	ldr	r6, [sp, #8]
    5104:	add	sp, sp, #12
    5108:	pop	{pc}		; (ldr pc, [sp], #4)
    510c:	mov	r4, r0
    5110:	movw	r1, #0
    5114:	movt	r1, #0
    5118:	mov	r0, r2
    511c:	ldr	r2, [r3]
    5120:	bl	3818 <get_mandatory_attribute_value>
    5124:	subs	r6, r0, #0
    5128:	beq	51a8 <handle_name_attribute_for_type.isra.8+0x114>
    512c:	ldr	r5, [r5]
    5130:	mov	r1, r5
    5134:	bl	0 <strcmp>
    5138:	cmp	r0, #0
    513c:	bne	5188 <handle_name_attribute_for_type.isra.8+0xf4>
    5140:	ldr	r3, [r4]
    5144:	mov	r1, r6
    5148:	ldr	r0, [r3, #8]
    514c:	bl	0 <coda_type_set_name>
    5150:	adds	r0, r0, #0
    5154:	ldrd	r4, [sp]
    5158:	movne	r0, #1
    515c:	ldr	r6, [sp, #8]
    5160:	add	sp, sp, #12
    5164:	rsb	r0, r0, #0
    5168:	pop	{pc}		; (ldr pc, [sp], #4)
    516c:	movw	r1, #0
    5170:	movt	r1, #0
    5174:	movw	r0, #65136	; 0xfe70
    5178:	movt	r0, #65535	; 0xffff
    517c:	bl	0 <coda_set_error>
    5180:	mvn	r0, #0
    5184:	b	50fc <handle_name_attribute_for_type.isra.8+0x68>
    5188:	mov	r2, r5
    518c:	movw	r1, #0
    5190:	movt	r1, #0
    5194:	movw	r0, #65136	; 0xfe70
    5198:	movt	r0, #65535	; 0xffff
    519c:	bl	0 <coda_set_error>
    51a0:	mvn	r0, #0
    51a4:	b	50fc <handle_name_attribute_for_type.isra.8+0x68>
    51a8:	mvn	r0, #0
    51ac:	b	50fc <handle_name_attribute_for_type.isra.8+0x68>

000051b0 <xml_root_init>:
    51b0:	ldr	r3, [r0, #28]
    51b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    51b8:	strd	r6, [sp, #8]
    51bc:	strd	r8, [sp, #16]
    51c0:	str	sl, [sp, #24]
    51c4:	cmp	r3, #0
    51c8:	str	lr, [sp, #28]
    51cc:	beq	5358 <xml_root_init+0x1a8>
    51d0:	mov	r8, r0
    51d4:	mov	r9, r1
    51d8:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    51dc:	cmp	r0, #0
    51e0:	bne	5324 <xml_root_init+0x174>
    51e4:	ldr	sl, [r8]
    51e8:	ldr	r0, [sl, #44]	; 0x2c
    51ec:	cmp	r0, #2
    51f0:	bne	532c <xml_root_init+0x17c>
    51f4:	ldr	r4, [r9]
    51f8:	cmp	r4, #0
    51fc:	beq	5278 <xml_root_init+0xc8>
    5200:	movw	r7, #0
    5204:	movt	r7, #0
    5208:	mov	r6, r9
    520c:	mov	r5, r9
    5210:	mov	r0, r4
    5214:	b	5224 <xml_root_init+0x74>
    5218:	ldr	r0, [r5, #8]!
    521c:	cmp	r0, #0
    5220:	beq	5240 <xml_root_init+0x90>
    5224:	mov	r1, r7
    5228:	bl	0 <strcmp>
    522c:	cmp	r0, #0
    5230:	bne	5218 <xml_root_init+0x68>
    5234:	ldr	r3, [r5, #4]
    5238:	cmp	r3, #0
    523c:	bne	5310 <xml_root_init+0x160>
    5240:	movw	r5, #0
    5244:	movt	r5, #0
    5248:	b	5258 <xml_root_init+0xa8>
    524c:	ldr	r4, [r6, #8]!
    5250:	cmp	r4, #0
    5254:	beq	5278 <xml_root_init+0xc8>
    5258:	mov	r0, r4
    525c:	mov	r1, r5
    5260:	bl	0 <strcmp>
    5264:	cmp	r0, #0
    5268:	bne	524c <xml_root_init+0x9c>
    526c:	ldr	r3, [r6, #4]
    5270:	cmp	r3, #0
    5274:	bne	52f4 <xml_root_init+0x144>
    5278:	movw	r3, #0
    527c:	movt	r3, #0
    5280:	mov	r0, #2
    5284:	str	r3, [sl, #40]	; 0x28
    5288:	bl	0 <coda_type_record_new>
    528c:	mov	r2, r9
    5290:	add	r1, r8, #20
    5294:	str	r0, [sl, #8]
    5298:	mov	r0, r8
    529c:	bl	5094 <handle_name_attribute_for_type.isra.8>
    52a0:	cmp	r0, #0
    52a4:	bne	5324 <xml_root_init+0x174>
    52a8:	ldr	r3, [r8]
    52ac:	movw	lr, #0
    52b0:	movt	lr, #0
    52b4:	movw	r1, #0
    52b8:	movt	r1, #0
    52bc:	movw	ip, #0
    52c0:	movt	ip, #0
    52c4:	movw	r2, #0
    52c8:	movt	r2, #0
    52cc:	str	lr, [r3, #96]	; 0x60
    52d0:	str	ip, [r3, #108]	; 0x6c
    52d4:	str	r1, [r3, #268]	; 0x10c
    52d8:	str	r2, [r3, #280]	; 0x118
    52dc:	ldrd	r4, [sp]
    52e0:	ldrd	r6, [sp, #8]
    52e4:	ldrd	r8, [sp, #16]
    52e8:	ldr	sl, [sp, #24]
    52ec:	add	sp, sp, #28
    52f0:	pop	{pc}		; (ldr pc, [sp], #4)
    52f4:	movw	r1, #0
    52f8:	movt	r1, #0
    52fc:	movw	r0, #65136	; 0xfe70
    5300:	movt	r0, #65535	; 0xffff
    5304:	bl	0 <coda_set_error>
    5308:	mvn	r0, #0
    530c:	b	52dc <xml_root_init+0x12c>
    5310:	movw	r1, #0
    5314:	movt	r1, #0
    5318:	movw	r0, #65136	; 0xfe70
    531c:	movt	r0, #65535	; 0xffff
    5320:	bl	0 <coda_set_error>
    5324:	mvn	r0, #0
    5328:	b	52dc <xml_root_init+0x12c>
    532c:	bl	0 <coda_type_get_format_name>
    5330:	ldr	r3, [r8, #28]
    5334:	mov	r2, r0
    5338:	movw	r1, #0
    533c:	movt	r1, #0
    5340:	movw	r0, #65136	; 0xfe70
    5344:	movt	r0, #65535	; 0xffff
    5348:	ldr	r3, [r3, #8]
    534c:	bl	0 <coda_set_error>
    5350:	mvn	r0, #0
    5354:	b	52dc <xml_root_init+0x12c>
    5358:	movw	r1, #0
    535c:	movt	r1, #0
    5360:	ldr	r3, [pc, #12]	; 5374 <xml_root_init+0x1c4>
    5364:	movw	r0, #0
    5368:	movt	r0, #0
    536c:	mov	r2, #1184	; 0x4a0
    5370:	bl	0 <__assert_fail>
    5374:	.word	0x00000164

00005378 <cd_record_init>:
    5378:	strd	r4, [sp, #-16]!
    537c:	mov	r4, r0
    5380:	str	r6, [sp, #8]
    5384:	mov	r6, r1
    5388:	str	lr, [sp, #12]
    538c:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    5390:	cmp	r0, #0
    5394:	bne	5474 <cd_record_init+0xfc>
    5398:	ldr	r5, [r4]
    539c:	movw	r3, #0
    53a0:	movt	r3, #0
    53a4:	str	r3, [r5, #40]	; 0x28
    53a8:	ldr	r0, [r5, #44]	; 0x2c
    53ac:	bl	0 <coda_type_record_new>
    53b0:	ldr	r3, [r4]
    53b4:	str	r0, [r5, #8]
    53b8:	ldr	r3, [r3, #8]
    53bc:	cmp	r3, #0
    53c0:	beq	5474 <cd_record_init+0xfc>
    53c4:	mov	r2, r6
    53c8:	add	r1, r4, #20
    53cc:	mov	r0, r4
    53d0:	bl	5094 <handle_name_attribute_for_type.isra.8>
    53d4:	cmp	r0, #0
    53d8:	bne	5474 <cd_record_init+0xfc>
    53dc:	ldr	r3, [r4]
    53e0:	movw	r2, #0
    53e4:	movt	r2, #0
    53e8:	movw	lr, #0
    53ec:	movt	lr, #0
    53f0:	movw	r0, #0
    53f4:	movt	r0, #0
    53f8:	movw	r4, #0
    53fc:	movt	r4, #0
    5400:	movw	ip, #0
    5404:	movt	ip, #0
    5408:	str	r2, [r3, #80]	; 0x50
    540c:	movw	r2, #0
    5410:	movt	r2, #0
    5414:	str	r4, [r3, #96]	; 0x60
    5418:	movw	r4, #0
    541c:	movt	r4, #0
    5420:	mov	r1, r6
    5424:	str	r0, [r3, #108]	; 0x6c
    5428:	movw	r0, #0
    542c:	movt	r0, #0
    5430:	str	lr, [r3, #252]	; 0xfc
    5434:	movw	lr, #0
    5438:	movt	lr, #0
    543c:	str	lr, [r3, #36]	; 0x24
    5440:	str	r4, [r3, #68]	; 0x44
    5444:	str	r0, [r3, #240]	; 0xf0
    5448:	mov	r0, r3
    544c:	str	ip, [r3, #268]	; 0x10c
    5450:	str	r2, [r3, #280]	; 0x118
    5454:	bl	4d6c <handle_xml_name.isra.7>
    5458:	adds	r0, r0, #0
    545c:	movne	r0, #1
    5460:	rsb	r0, r0, #0
    5464:	ldrd	r4, [sp]
    5468:	ldr	r6, [sp, #8]
    546c:	add	sp, sp, #12
    5470:	pop	{pc}		; (ldr pc, [sp], #4)
    5474:	mvn	r0, #0
    5478:	b	5464 <cd_record_init+0xec>

0000547c <cd_vsf_integer_init>:
    547c:	strd	r4, [sp, #-16]!
    5480:	mov	r4, r0
    5484:	str	r6, [sp, #8]
    5488:	mov	r6, r1
    548c:	str	lr, [sp, #12]
    5490:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    5494:	cmp	r0, #0
    5498:	bne	5638 <cd_vsf_integer_init+0x1bc>
    549c:	ldr	r5, [r4]
    54a0:	movw	r3, #0
    54a4:	movt	r3, #0
    54a8:	str	r3, [r5, #40]	; 0x28
    54ac:	ldr	r0, [r5, #44]	; 0x2c
    54b0:	bl	0 <coda_type_vsf_integer_new>
    54b4:	ldr	r3, [r4]
    54b8:	str	r0, [r5, #8]
    54bc:	ldr	r3, [r3, #8]
    54c0:	cmp	r3, #0
    54c4:	beq	5638 <cd_vsf_integer_init+0x1bc>
    54c8:	mov	r2, r6
    54cc:	add	r1, r4, #20
    54d0:	mov	r0, r4
    54d4:	bl	5094 <handle_name_attribute_for_type.isra.8>
    54d8:	cmp	r0, #0
    54dc:	bne	5638 <cd_vsf_integer_init+0x1bc>
    54e0:	ldr	r3, [r4]
    54e4:	movw	r1, #0
    54e8:	movt	r1, #0
    54ec:	movw	ip, #0
    54f0:	movt	ip, #0
    54f4:	movw	lr, #0
    54f8:	movt	lr, #0
    54fc:	movw	r2, #0
    5500:	movt	r2, #0
    5504:	movw	r5, #0
    5508:	movt	r5, #0
    550c:	str	lr, [r3, #52]	; 0x34
    5510:	movw	lr, #0
    5514:	movt	lr, #0
    5518:	str	r1, [r3, #56]	; 0x38
    551c:	movw	r1, #0
    5520:	movt	r1, #0
    5524:	str	ip, [r3, #60]	; 0x3c
    5528:	movw	ip, #0
    552c:	movt	ip, #0
    5530:	str	r2, [r3, #64]	; 0x40
    5534:	movw	r2, #0
    5538:	movt	r2, #0
    553c:	str	r1, [r3, #88]	; 0x58
    5540:	movw	r1, #0
    5544:	movt	r1, #0
    5548:	str	lr, [r3, #120]	; 0x78
    554c:	movw	lr, #0
    5550:	movt	lr, #0
    5554:	str	ip, [r3, #132]	; 0x84
    5558:	movw	ip, #0
    555c:	movt	ip, #0
    5560:	str	r2, [r3, #160]	; 0xa0
    5564:	movw	r2, #0
    5568:	movt	r2, #0
    556c:	str	r1, [r3, #188]	; 0xbc
    5570:	movw	r1, #0
    5574:	movt	r1, #0
    5578:	str	lr, [r3, #192]	; 0xc0
    557c:	movw	lr, #0
    5580:	movt	lr, #0
    5584:	str	ip, [r3, #200]	; 0xc8
    5588:	movw	ip, #0
    558c:	movt	ip, #0
    5590:	movw	r4, #0
    5594:	movt	r4, #0
    5598:	str	r2, [r3, #204]	; 0xcc
    559c:	movw	r2, #0
    55a0:	movt	r2, #0
    55a4:	str	r1, [r3, #208]	; 0xd0
    55a8:	movw	r1, #0
    55ac:	movt	r1, #0
    55b0:	str	r5, [r3, #268]	; 0x10c
    55b4:	movw	r5, #0
    55b8:	movt	r5, #0
    55bc:	str	lr, [r3, #212]	; 0xd4
    55c0:	movw	lr, #0
    55c4:	movt	lr, #0
    55c8:	str	ip, [r3, #220]	; 0xdc
    55cc:	movw	ip, #0
    55d0:	movt	ip, #0
    55d4:	str	r1, [r3, #96]	; 0x60
    55d8:	str	r2, [r3, #224]	; 0xe0
    55dc:	str	r2, [r3, #228]	; 0xe4
    55e0:	str	r2, [r3, #232]	; 0xe8
    55e4:	str	r2, [r3, #236]	; 0xec
    55e8:	str	r2, [r3, #260]	; 0x104
    55ec:	str	r2, [r3, #292]	; 0x124
    55f0:	str	r2, [r3, #304]	; 0x130
    55f4:	str	r2, [r3, #332]	; 0x14c
    55f8:	str	r2, [r3, #360]	; 0x168
    55fc:	str	r2, [r3, #364]	; 0x16c
    5600:	str	r2, [r3, #372]	; 0x174
    5604:	str	r2, [r3, #376]	; 0x178
    5608:	str	r2, [r3, #380]	; 0x17c
    560c:	str	r2, [r3, #384]	; 0x180
    5610:	str	r2, [r3, #392]	; 0x188
    5614:	str	r5, [r3, #36]	; 0x24
    5618:	str	r4, [r3, #196]	; 0xc4
    561c:	str	r1, [r3, #216]	; 0xd8
    5620:	str	lr, [r3, #368]	; 0x170
    5624:	str	ip, [r3, #388]	; 0x184
    5628:	ldrd	r4, [sp]
    562c:	ldr	r6, [sp, #8]
    5630:	add	sp, sp, #12
    5634:	pop	{pc}		; (ldr pc, [sp], #4)
    5638:	mvn	r0, #0
    563c:	b	5628 <cd_vsf_integer_init+0x1ac>

00005640 <cd_union_init>:
    5640:	strd	r4, [sp, #-16]!
    5644:	mov	r4, r0
    5648:	str	r6, [sp, #8]
    564c:	mov	r6, r1
    5650:	str	lr, [sp, #12]
    5654:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    5658:	cmp	r0, #0
    565c:	bne	574c <cd_union_init+0x10c>
    5660:	ldr	r5, [r4]
    5664:	movw	r3, #0
    5668:	movt	r3, #0
    566c:	str	r3, [r5, #40]	; 0x28
    5670:	ldr	r0, [r5, #44]	; 0x2c
    5674:	bl	0 <coda_type_union_new>
    5678:	ldr	r3, [r4]
    567c:	str	r0, [r5, #8]
    5680:	ldr	r3, [r3, #8]
    5684:	cmp	r3, #0
    5688:	beq	574c <cd_union_init+0x10c>
    568c:	mov	r2, r6
    5690:	add	r1, r4, #20
    5694:	mov	r0, r4
    5698:	bl	5094 <handle_name_attribute_for_type.isra.8>
    569c:	cmp	r0, #0
    56a0:	bne	574c <cd_union_init+0x10c>
    56a4:	ldr	r3, [r4]
    56a8:	movw	r2, #0
    56ac:	movt	r2, #0
    56b0:	movw	lr, #0
    56b4:	movt	lr, #0
    56b8:	movw	r0, #0
    56bc:	movt	r0, #0
    56c0:	movw	r4, #0
    56c4:	movt	r4, #0
    56c8:	movw	ip, #0
    56cc:	movt	ip, #0
    56d0:	str	lr, [r3, #96]	; 0x60
    56d4:	movw	lr, #0
    56d8:	movt	lr, #0
    56dc:	str	r2, [r3, #108]	; 0x6c
    56e0:	movw	r2, #0
    56e4:	movt	r2, #0
    56e8:	mov	r1, r6
    56ec:	str	r2, [r3, #68]	; 0x44
    56f0:	movw	r2, #0
    56f4:	movt	r2, #0
    56f8:	str	r4, [r3, #252]	; 0xfc
    56fc:	movw	r4, #0
    5700:	movt	r4, #0
    5704:	str	r0, [r3, #268]	; 0x10c
    5708:	movw	r0, #0
    570c:	movt	r0, #0
    5710:	str	r0, [r3, #36]	; 0x24
    5714:	mov	r0, r3
    5718:	str	r2, [r3, #80]	; 0x50
    571c:	str	r2, [r3, #112]	; 0x70
    5720:	str	r4, [r3, #240]	; 0xf0
    5724:	str	lr, [r3, #280]	; 0x118
    5728:	str	ip, [r3, #284]	; 0x11c
    572c:	bl	4d6c <handle_xml_name.isra.7>
    5730:	adds	r0, r0, #0
    5734:	movne	r0, #1
    5738:	rsb	r0, r0, #0
    573c:	ldrd	r4, [sp]
    5740:	ldr	r6, [sp, #8]
    5744:	add	sp, sp, #12
    5748:	pop	{pc}		; (ldr pc, [sp], #4)
    574c:	mvn	r0, #0
    5750:	b	573c <cd_union_init+0xfc>

00005754 <cd_text_init>:
    5754:	strd	r4, [sp, #-16]!
    5758:	mov	r4, r0
    575c:	str	r6, [sp, #8]
    5760:	mov	r6, r1
    5764:	str	lr, [sp, #12]
    5768:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    576c:	cmp	r0, #0
    5770:	bne	5860 <cd_text_init+0x10c>
    5774:	ldr	r5, [r4]
    5778:	movw	r3, #0
    577c:	movt	r3, #0
    5780:	str	r3, [r5, #40]	; 0x28
    5784:	ldr	r0, [r5, #44]	; 0x2c
    5788:	bl	0 <coda_type_text_new>
    578c:	ldr	r3, [r4]
    5790:	str	r0, [r5, #8]
    5794:	ldr	r3, [r3, #8]
    5798:	cmp	r3, #0
    579c:	beq	5860 <cd_text_init+0x10c>
    57a0:	mov	r2, r6
    57a4:	add	r1, r4, #20
    57a8:	mov	r0, r4
    57ac:	bl	5094 <handle_name_attribute_for_type.isra.8>
    57b0:	cmp	r0, #0
    57b4:	bne	5860 <cd_text_init+0x10c>
    57b8:	ldr	r3, [r4]
    57bc:	movw	r2, #0
    57c0:	movt	r2, #0
    57c4:	movw	r0, #0
    57c8:	movt	r0, #0
    57cc:	movw	ip, #0
    57d0:	movt	ip, #0
    57d4:	movw	r4, #0
    57d8:	movt	r4, #0
    57dc:	movw	lr, #0
    57e0:	movt	lr, #0
    57e4:	str	ip, [r3, #84]	; 0x54
    57e8:	movw	ip, #0
    57ec:	movt	ip, #0
    57f0:	str	r2, [r3, #164]	; 0xa4
    57f4:	movw	r2, #0
    57f8:	movt	r2, #0
    57fc:	mov	r1, r6
    5800:	str	r2, [r3, #68]	; 0x44
    5804:	movw	r2, #0
    5808:	movt	r2, #0
    580c:	str	r4, [r3, #256]	; 0x100
    5810:	movw	r4, #0
    5814:	movt	r4, #0
    5818:	str	r0, [r3, #268]	; 0x10c
    581c:	movw	r0, #0
    5820:	movt	r0, #0
    5824:	str	r0, [r3, #36]	; 0x24
    5828:	mov	r0, r3
    582c:	str	r2, [r3, #96]	; 0x60
    5830:	str	r2, [r3, #116]	; 0x74
    5834:	str	r4, [r3, #240]	; 0xf0
    5838:	str	lr, [r3, #288]	; 0x120
    583c:	str	ip, [r3, #336]	; 0x150
    5840:	bl	4d6c <handle_xml_name.isra.7>
    5844:	adds	r0, r0, #0
    5848:	movne	r0, #1
    584c:	rsb	r0, r0, #0
    5850:	ldrd	r4, [sp]
    5854:	ldr	r6, [sp, #8]
    5858:	add	sp, sp, #12
    585c:	pop	{pc}		; (ldr pc, [sp], #4)
    5860:	mvn	r0, #0
    5864:	b	5850 <cd_text_init+0xfc>

00005868 <cd_integer_init>:
    5868:	strd	r4, [sp, #-16]!
    586c:	mov	r4, r0
    5870:	str	r6, [sp, #8]
    5874:	mov	r6, r1
    5878:	str	lr, [sp, #12]
    587c:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    5880:	cmp	r0, #0
    5884:	bne	59b8 <cd_integer_init+0x150>
    5888:	ldr	r5, [r4]
    588c:	movw	r3, #0
    5890:	movt	r3, #0
    5894:	mov	r1, #2
    5898:	str	r3, [r5, #40]	; 0x28
    589c:	ldr	r0, [r5, #44]	; 0x2c
    58a0:	bl	0 <coda_type_number_new>
    58a4:	ldr	r3, [r4]
    58a8:	str	r0, [r5, #8]
    58ac:	ldr	r3, [r3, #8]
    58b0:	cmp	r3, #0
    58b4:	beq	59b8 <cd_integer_init+0x150>
    58b8:	mov	r2, r6
    58bc:	add	r1, r4, #20
    58c0:	mov	r0, r4
    58c4:	bl	5094 <handle_name_attribute_for_type.isra.8>
    58c8:	cmp	r0, #0
    58cc:	bne	59b8 <cd_integer_init+0x150>
    58d0:	ldr	r3, [r4]
    58d4:	movw	r1, #0
    58d8:	movt	r1, #0
    58dc:	movw	r2, #0
    58e0:	movt	r2, #0
    58e4:	movw	r4, #0
    58e8:	movt	r4, #0
    58ec:	movw	lr, #0
    58f0:	movt	lr, #0
    58f4:	movw	ip, #0
    58f8:	movt	ip, #0
    58fc:	str	r1, [r3, #136]	; 0x88
    5900:	movw	r1, #0
    5904:	movt	r1, #0
    5908:	str	r1, [r3, #164]	; 0xa4
    590c:	movw	r1, #0
    5910:	movt	r1, #0
    5914:	str	r2, [r3, #252]	; 0xfc
    5918:	movw	r2, #0
    591c:	movt	r2, #0
    5920:	str	r1, [r3, #92]	; 0x5c
    5924:	movw	r1, #0
    5928:	movt	r1, #0
    592c:	str	r4, [r3, #268]	; 0x10c
    5930:	movw	r4, #0
    5934:	movt	r4, #0
    5938:	str	r1, [r3, #140]	; 0x8c
    593c:	movw	r1, #0
    5940:	movt	r1, #0
    5944:	str	lr, [r3, #256]	; 0x100
    5948:	movw	lr, #0
    594c:	movt	lr, #0
    5950:	str	r1, [r3, #68]	; 0x44
    5954:	movw	r1, #0
    5958:	movt	r1, #0
    595c:	str	r2, [r3, #308]	; 0x134
    5960:	movw	r2, #0
    5964:	movt	r2, #0
    5968:	str	r1, [r3, #36]	; 0x24
    596c:	movw	r1, #0
    5970:	movt	r1, #0
    5974:	str	ip, [r3, #388]	; 0x184
    5978:	str	r2, [r3, #240]	; 0xf0
    597c:	movw	r2, #0
    5980:	movt	r2, #0
    5984:	str	r4, [r3, #264]	; 0x108
    5988:	movw	r4, #0
    598c:	movt	r4, #0
    5990:	str	r1, [r3, #80]	; 0x50
    5994:	str	r1, [r3, #84]	; 0x54
    5998:	str	r2, [r3, #96]	; 0x60
    599c:	str	r2, [r3, #216]	; 0xd8
    59a0:	str	r4, [r3, #312]	; 0x138
    59a4:	str	lr, [r3, #336]	; 0x150
    59a8:	ldrd	r4, [sp]
    59ac:	ldr	r6, [sp, #8]
    59b0:	add	sp, sp, #12
    59b4:	pop	{pc}		; (ldr pc, [sp], #4)
    59b8:	mvn	r0, #0
    59bc:	b	59a8 <cd_integer_init+0x140>

000059c0 <cd_float_init>:
    59c0:	strd	r4, [sp, #-16]!
    59c4:	mov	r4, r0
    59c8:	str	r6, [sp, #8]
    59cc:	mov	r6, r1
    59d0:	str	lr, [sp, #12]
    59d4:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    59d8:	cmp	r0, #0
    59dc:	bne	5b10 <cd_float_init+0x150>
    59e0:	ldr	r5, [r4]
    59e4:	movw	r3, #0
    59e8:	movt	r3, #0
    59ec:	mov	r1, #3
    59f0:	str	r3, [r5, #40]	; 0x28
    59f4:	ldr	r0, [r5, #44]	; 0x2c
    59f8:	bl	0 <coda_type_number_new>
    59fc:	ldr	r3, [r4]
    5a00:	str	r0, [r5, #8]
    5a04:	ldr	r3, [r3, #8]
    5a08:	cmp	r3, #0
    5a0c:	beq	5b10 <cd_float_init+0x150>
    5a10:	mov	r2, r6
    5a14:	add	r1, r4, #20
    5a18:	mov	r0, r4
    5a1c:	bl	5094 <handle_name_attribute_for_type.isra.8>
    5a20:	cmp	r0, #0
    5a24:	bne	5b10 <cd_float_init+0x150>
    5a28:	ldr	r3, [r4]
    5a2c:	movw	r2, #0
    5a30:	movt	r2, #0
    5a34:	movw	r1, #0
    5a38:	movt	r1, #0
    5a3c:	movw	r4, #0
    5a40:	movt	r4, #0
    5a44:	movw	ip, #0
    5a48:	movt	ip, #0
    5a4c:	movw	lr, #0
    5a50:	movt	lr, #0
    5a54:	str	r2, [r3, #92]	; 0x5c
    5a58:	movw	r2, #0
    5a5c:	movt	r2, #0
    5a60:	str	r1, [r3, #164]	; 0xa4
    5a64:	movw	r1, #0
    5a68:	movt	r1, #0
    5a6c:	str	r2, [r3, #252]	; 0xfc
    5a70:	movw	r2, #0
    5a74:	movt	r2, #0
    5a78:	str	r2, [r3, #136]	; 0x88
    5a7c:	movw	r2, #0
    5a80:	movt	r2, #0
    5a84:	str	r1, [r3, #256]	; 0x100
    5a88:	movw	r1, #0
    5a8c:	movt	r1, #0
    5a90:	str	r2, [r3, #140]	; 0x8c
    5a94:	movw	r2, #0
    5a98:	movt	r2, #0
    5a9c:	str	r4, [r3, #264]	; 0x108
    5aa0:	movw	r4, #0
    5aa4:	movt	r4, #0
    5aa8:	str	r1, [r3, #308]	; 0x134
    5aac:	movw	r1, #0
    5ab0:	movt	r1, #0
    5ab4:	str	lr, [r3, #336]	; 0x150
    5ab8:	str	r1, [r3, #68]	; 0x44
    5abc:	movw	r1, #0
    5ac0:	movt	r1, #0
    5ac4:	str	r2, [r3, #268]	; 0x10c
    5ac8:	movw	r2, #0
    5acc:	movt	r2, #0
    5ad0:	str	r1, [r3, #36]	; 0x24
    5ad4:	movw	r1, #0
    5ad8:	movt	r1, #0
    5adc:	str	r4, [r3, #312]	; 0x138
    5ae0:	str	r2, [r3, #240]	; 0xf0
    5ae4:	movw	r2, #0
    5ae8:	movt	r2, #0
    5aec:	str	r1, [r3, #80]	; 0x50
    5af0:	str	r1, [r3, #84]	; 0x54
    5af4:	str	r2, [r3, #96]	; 0x60
    5af8:	str	r2, [r3, #216]	; 0xd8
    5afc:	str	ip, [r3, #388]	; 0x184
    5b00:	ldrd	r4, [sp]
    5b04:	ldr	r6, [sp, #8]
    5b08:	add	sp, sp, #12
    5b0c:	pop	{pc}		; (ldr pc, [sp], #4)
    5b10:	mvn	r0, #0
    5b14:	b	5b00 <cd_float_init+0x140>

00005b18 <cd_time_init>:
    5b18:	strd	r4, [sp, #-28]!	; 0xffffffe4
    5b1c:	mov	r4, r0
    5b20:	strd	r6, [sp, #8]
    5b24:	mov	r7, r1
    5b28:	strd	r8, [sp, #16]
    5b2c:	str	lr, [sp, #24]
    5b30:	sub	sp, sp, #12
    5b34:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    5b38:	subs	r5, r0, #0
    5b3c:	bne	63fc <cd_time_init+0x8e4>
    5b40:	ldr	r3, [r4]
    5b44:	movw	r1, #0
    5b48:	movt	r1, #0
    5b4c:	mov	r0, r7
    5b50:	ldr	r2, [r3]
    5b54:	bl	3818 <get_mandatory_attribute_value>
    5b58:	subs	r6, r0, #0
    5b5c:	beq	63fc <cd_time_init+0x8e4>
    5b60:	ldr	r3, [r4]
    5b64:	ldr	r8, [r3, #44]	; 0x2c
    5b68:	cmp	r8, #0
    5b6c:	beq	5d88 <cd_time_init+0x270>
    5b70:	cmp	r8, #1
    5b74:	beq	5edc <cd_time_init+0x3c4>
    5b78:	mov	r0, r6
    5b7c:	add	r1, sp, #4
    5b80:	bl	0 <coda_expression_from_string>
    5b84:	cmp	r0, #0
    5b88:	bne	6514 <cd_time_init+0x9fc>
    5b8c:	mov	r1, sp
    5b90:	ldr	r0, [sp, #4]
    5b94:	bl	0 <coda_expression_get_type>
    5b98:	cmp	r0, #0
    5b9c:	bne	63ec <cd_time_init+0x8d4>
    5ba0:	ldr	r3, [sp]
    5ba4:	cmp	r3, #2
    5ba8:	bne	64ac <cd_time_init+0x994>
    5bac:	ldr	r6, [r4]
    5bb0:	movw	r3, #0
    5bb4:	movt	r3, #0
    5bb8:	ldr	r1, [sp, #4]
    5bbc:	str	r3, [r6, #40]	; 0x28
    5bc0:	ldr	r0, [r6, #44]	; 0x2c
    5bc4:	bl	0 <coda_type_time_new>
    5bc8:	ldr	r3, [r4]
    5bcc:	str	r0, [r6, #8]
    5bd0:	ldr	r0, [r3, #8]
    5bd4:	cmp	r0, #0
    5bd8:	beq	63ec <cd_time_init+0x8d4>
    5bdc:	cmp	r5, #0
    5be0:	beq	5bfc <cd_time_init+0xe4>
    5be4:	mov	r1, r5
    5be8:	bl	0 <coda_type_time_set_base_type>
    5bec:	cmp	r0, #0
    5bf0:	mov	r0, r5
    5bf4:	bne	6560 <cd_time_init+0xa48>
    5bf8:	bl	0 <coda_type_release>
    5bfc:	mov	r2, r7
    5c00:	add	r1, r4, #20
    5c04:	mov	r0, r4
    5c08:	bl	5094 <handle_name_attribute_for_type.isra.8>
    5c0c:	cmp	r0, #0
    5c10:	bne	63fc <cd_time_init+0x8e4>
    5c14:	ldr	r3, [r4]
    5c18:	movw	lr, #0
    5c1c:	movt	lr, #0
    5c20:	movw	r2, #0
    5c24:	movt	r2, #0
    5c28:	movw	ip, #0
    5c2c:	movt	ip, #0
    5c30:	movw	r1, #0
    5c34:	movt	r1, #0
    5c38:	movw	r4, #0
    5c3c:	movt	r4, #0
    5c40:	str	lr, [r3, #52]	; 0x34
    5c44:	movw	lr, #0
    5c48:	movt	lr, #0
    5c4c:	str	r2, [r3, #56]	; 0x38
    5c50:	movw	r2, #0
    5c54:	movt	r2, #0
    5c58:	str	r4, [r3, #60]	; 0x3c
    5c5c:	movw	r4, #0
    5c60:	movt	r4, #0
    5c64:	str	lr, [r3, #120]	; 0x78
    5c68:	movw	lr, #0
    5c6c:	movt	lr, #0
    5c70:	str	ip, [r3, #64]	; 0x40
    5c74:	movw	ip, #0
    5c78:	movt	ip, #0
    5c7c:	str	r1, [r3, #88]	; 0x58
    5c80:	movw	r1, #0
    5c84:	movt	r1, #0
    5c88:	str	r2, [r3, #132]	; 0x84
    5c8c:	movw	r2, #0
    5c90:	movt	r2, #0
    5c94:	str	r4, [r3, #160]	; 0xa0
    5c98:	movw	r4, #0
    5c9c:	movt	r4, #0
    5ca0:	str	lr, [r3, #200]	; 0xc8
    5ca4:	movw	lr, #0
    5ca8:	movt	lr, #0
    5cac:	str	lr, [r3, #96]	; 0x60
    5cb0:	movw	lr, #0
    5cb4:	movt	lr, #0
    5cb8:	str	ip, [r3, #188]	; 0xbc
    5cbc:	movw	ip, #0
    5cc0:	movt	ip, #0
    5cc4:	str	r1, [r3, #192]	; 0xc0
    5cc8:	movw	r1, #0
    5ccc:	movt	r1, #0
    5cd0:	str	r2, [r3, #204]	; 0xcc
    5cd4:	movw	r2, #0
    5cd8:	movt	r2, #0
    5cdc:	str	r4, [r3, #208]	; 0xd0
    5ce0:	str	ip, [r3, #212]	; 0xd4
    5ce4:	movw	ip, #0
    5ce8:	movt	ip, #0
    5cec:	str	r1, [r3, #220]	; 0xdc
    5cf0:	movw	r1, #0
    5cf4:	movt	r1, #0
    5cf8:	str	r2, [r3, #224]	; 0xe0
    5cfc:	str	r2, [r3, #228]	; 0xe4
    5d00:	str	r2, [r3, #232]	; 0xe8
    5d04:	str	r2, [r3, #236]	; 0xec
    5d08:	str	r2, [r3, #260]	; 0x104
    5d0c:	str	r2, [r3, #292]	; 0x124
    5d10:	str	r2, [r3, #304]	; 0x130
    5d14:	str	r2, [r3, #332]	; 0x14c
    5d18:	str	r2, [r3, #360]	; 0x168
    5d1c:	str	r2, [r3, #364]	; 0x16c
    5d20:	str	r2, [r3, #372]	; 0x174
    5d24:	str	r2, [r3, #376]	; 0x178
    5d28:	str	r2, [r3, #380]	; 0x17c
    5d2c:	str	r2, [r3, #384]	; 0x180
    5d30:	str	r2, [r3, #392]	; 0x188
    5d34:	str	lr, [r3, #268]	; 0x10c
    5d38:	ldr	r2, [r3, #44]	; 0x2c
    5d3c:	str	ip, [r3, #140]	; 0x8c
    5d40:	str	r1, [r3, #312]	; 0x138
    5d44:	cmp	r2, #1
    5d48:	bls	5d64 <cd_time_init+0x24c>
    5d4c:	movw	r1, #0
    5d50:	movt	r1, #0
    5d54:	movw	r2, #0
    5d58:	movt	r2, #0
    5d5c:	str	r1, [r3, #68]	; 0x44
    5d60:	str	r2, [r3, #240]	; 0xf0
    5d64:	movw	r2, #0
    5d68:	movt	r2, #0
    5d6c:	str	r2, [r3, #36]	; 0x24
    5d70:	add	sp, sp, #12
    5d74:	ldrd	r4, [sp]
    5d78:	ldrd	r6, [sp, #8]
    5d7c:	ldrd	r8, [sp, #16]
    5d80:	add	sp, sp, #24
    5d84:	pop	{pc}		; (ldr pc, [sp], #4)
    5d88:	movw	r1, #0
    5d8c:	movt	r1, #0
    5d90:	bl	0 <strcmp>
    5d94:	cmp	r0, #0
    5d98:	beq	6080 <cd_time_init+0x568>
    5d9c:	movw	r1, #0
    5da0:	movt	r1, #0
    5da4:	mov	r0, r6
    5da8:	bl	0 <strcmp>
    5dac:	cmp	r0, #0
    5db0:	beq	60bc <cd_time_init+0x5a4>
    5db4:	movw	r1, #0
    5db8:	movt	r1, #0
    5dbc:	mov	r0, r6
    5dc0:	bl	0 <strcmp>
    5dc4:	cmp	r0, #0
    5dc8:	beq	5ea0 <cd_time_init+0x388>
    5dcc:	movw	r1, #0
    5dd0:	movt	r1, #0
    5dd4:	mov	r0, r6
    5dd8:	bl	0 <strcmp>
    5ddc:	cmp	r0, #0
    5de0:	beq	63b0 <cd_time_init+0x898>
    5de4:	movw	r1, #0
    5de8:	movt	r1, #0
    5dec:	mov	r0, r6
    5df0:	bl	0 <strcmp>
    5df4:	cmp	r0, #0
    5df8:	beq	6470 <cd_time_init+0x958>
    5dfc:	movw	r1, #0
    5e00:	movt	r1, #0
    5e04:	mov	r0, r6
    5e08:	bl	0 <strcmp>
    5e0c:	cmp	r0, #0
    5e10:	beq	6374 <cd_time_init+0x85c>
    5e14:	movw	r1, #0
    5e18:	movt	r1, #0
    5e1c:	mov	r0, r6
    5e20:	bl	0 <strcmp>
    5e24:	cmp	r0, #0
    5e28:	beq	64d8 <cd_time_init+0x9c0>
    5e2c:	movw	r1, #0
    5e30:	movt	r1, #0
    5e34:	mov	r0, r6
    5e38:	bl	0 <strcmp>
    5e3c:	cmp	r0, #0
    5e40:	beq	6524 <cd_time_init+0xa0c>
    5e44:	movw	r1, #0
    5e48:	movt	r1, #0
    5e4c:	mov	r0, r6
    5e50:	bl	0 <strcmp>
    5e54:	cmp	r0, #0
    5e58:	beq	656c <cd_time_init+0xa54>
    5e5c:	movw	r1, #0
    5e60:	movt	r1, #0
    5e64:	mov	r0, r6
    5e68:	bl	0 <strcmp>
    5e6c:	cmp	r0, #0
    5e70:	movne	r5, #0
    5e74:	bne	5b78 <cd_time_init+0x60>
    5e78:	bl	0 <coda_type_text_new>
    5e7c:	mov	r5, r0
    5e80:	mov	r1, #11
    5e84:	bl	0 <coda_type_set_read_type>
    5e88:	movw	r6, #0
    5e8c:	movt	r6, #0
    5e90:	movw	r1, #0
    5e94:	movt	r1, #0
    5e98:	mov	r0, r5
    5e9c:	b	60e0 <cd_time_init+0x5c8>
    5ea0:	bl	0 <coda_type_text_new>
    5ea4:	mov	r5, r0
    5ea8:	mov	r1, #11
    5eac:	bl	0 <coda_type_set_read_type>
    5eb0:	mov	r0, r5
    5eb4:	movw	r1, #0
    5eb8:	movt	r1, #0
    5ebc:	movw	r6, #0
    5ec0:	movt	r6, #0
    5ec4:	bl	0 <coda_type_set_description>
    5ec8:	mov	r0, r5
    5ecc:	mov	r2, #15
    5ed0:	mov	r3, #0
    5ed4:	bl	0 <coda_type_set_byte_size>
    5ed8:	b	5b78 <cd_time_init+0x60>
    5edc:	movw	r1, #0
    5ee0:	movt	r1, #0
    5ee4:	bl	0 <strcmp>
    5ee8:	cmp	r0, #0
    5eec:	beq	60f8 <cd_time_init+0x5e0>
    5ef0:	movw	r1, #0
    5ef4:	movt	r1, #0
    5ef8:	mov	r0, r6
    5efc:	bl	0 <strcmp>
    5f00:	cmp	r0, #0
    5f04:	beq	6404 <cd_time_init+0x8ec>
    5f08:	movw	r1, #0
    5f0c:	movt	r1, #0
    5f10:	mov	r0, r6
    5f14:	bl	0 <strcmp>
    5f18:	cmp	r0, #0
    5f1c:	beq	6284 <cd_time_init+0x76c>
    5f20:	movw	r1, #0
    5f24:	movt	r1, #0
    5f28:	mov	r0, r6
    5f2c:	bl	0 <strcmp>
    5f30:	cmp	r0, #0
    5f34:	bne	5b78 <cd_time_init+0x60>
    5f38:	mov	r0, r8
    5f3c:	movw	r6, #0
    5f40:	movt	r6, #0
    5f44:	bl	0 <coda_type_record_new>
    5f48:	movw	r1, #0
    5f4c:	movt	r1, #0
    5f50:	mov	r5, r0
    5f54:	bl	0 <coda_type_set_description>
    5f58:	ldr	r3, [r4]
    5f5c:	mov	r1, #2
    5f60:	ldr	r0, [r3, #44]	; 0x2c
    5f64:	bl	0 <coda_type_number_new>
    5f68:	mov	r8, r0
    5f6c:	movw	r1, #0
    5f70:	movt	r1, #0
    5f74:	bl	0 <coda_type_set_description>
    5f78:	mov	r1, #3
    5f7c:	mov	r0, r8
    5f80:	bl	0 <coda_type_set_read_type>
    5f84:	mov	r2, #16
    5f88:	mov	r3, #0
    5f8c:	mov	r0, r8
    5f90:	bl	0 <coda_type_set_bit_size>
    5f94:	mov	r0, r8
    5f98:	movw	r1, #0
    5f9c:	movt	r1, #0
    5fa0:	bl	0 <coda_type_number_set_unit>
    5fa4:	movw	r0, #0
    5fa8:	movt	r0, #0
    5fac:	bl	0 <coda_type_record_field_new>
    5fb0:	mov	r1, r8
    5fb4:	mov	r9, r0
    5fb8:	bl	0 <coda_type_record_field_set_type>
    5fbc:	mov	r0, r8
    5fc0:	bl	0 <coda_type_release>
    5fc4:	mov	r1, r9
    5fc8:	mov	r0, r5
    5fcc:	bl	0 <coda_type_record_add_field>
    5fd0:	ldr	r3, [r4]
    5fd4:	mov	r1, #2
    5fd8:	ldr	r0, [r3, #44]	; 0x2c
    5fdc:	bl	0 <coda_type_number_new>
    5fe0:	mov	r8, r0
    5fe4:	movw	r1, #0
    5fe8:	movt	r1, #0
    5fec:	bl	0 <coda_type_set_description>
    5ff0:	mov	r1, #5
    5ff4:	mov	r0, r8
    5ff8:	bl	0 <coda_type_set_read_type>
    5ffc:	mov	r2, #32
    6000:	mov	r3, #0
    6004:	mov	r0, r8
    6008:	bl	0 <coda_type_set_bit_size>
    600c:	mov	r0, r8
    6010:	movw	r1, #0
    6014:	movt	r1, #0
    6018:	bl	0 <coda_type_number_set_unit>
    601c:	movw	r0, #0
    6020:	movt	r0, #0
    6024:	bl	0 <coda_type_record_field_new>
    6028:	mov	r1, r8
    602c:	mov	r9, r0
    6030:	bl	0 <coda_type_record_field_set_type>
    6034:	mov	r0, r8
    6038:	bl	0 <coda_type_release>
    603c:	mov	r1, r9
    6040:	mov	r0, r5
    6044:	bl	0 <coda_type_record_add_field>
    6048:	ldr	r3, [r4]
    604c:	mov	r1, #2
    6050:	ldr	r0, [r3, #44]	; 0x2c
    6054:	bl	0 <coda_type_number_new>
    6058:	mov	r8, r0
    605c:	movw	r1, #0
    6060:	movt	r1, #0
    6064:	bl	0 <coda_type_set_description>
    6068:	mov	r0, r8
    606c:	mov	r1, #3
    6070:	bl	0 <coda_type_set_read_type>
    6074:	mov	r0, r8
    6078:	mov	r2, #16
    607c:	b	623c <cd_time_init+0x724>
    6080:	bl	0 <coda_type_text_new>
    6084:	mov	r5, r0
    6088:	mov	r1, #11
    608c:	bl	0 <coda_type_set_read_type>
    6090:	mov	r0, r5
    6094:	movw	r1, #0
    6098:	movt	r1, #0
    609c:	movw	r6, #0
    60a0:	movt	r6, #0
    60a4:	bl	0 <coda_type_set_description>
    60a8:	mov	r0, r5
    60ac:	mov	r2, #27
    60b0:	mov	r3, #0
    60b4:	bl	0 <coda_type_set_byte_size>
    60b8:	b	5b78 <cd_time_init+0x60>
    60bc:	bl	0 <coda_type_text_new>
    60c0:	mov	r5, r0
    60c4:	mov	r1, #11
    60c8:	bl	0 <coda_type_set_read_type>
    60cc:	movw	r6, #0
    60d0:	movt	r6, #0
    60d4:	movw	r1, #0
    60d8:	movt	r1, #0
    60dc:	mov	r0, r5
    60e0:	bl	0 <coda_type_set_description>
    60e4:	mov	r0, r5
    60e8:	mov	r2, #24
    60ec:	mov	r3, #0
    60f0:	bl	0 <coda_type_set_byte_size>
    60f4:	b	5b78 <cd_time_init+0x60>
    60f8:	mov	r0, r8
    60fc:	movw	r6, #0
    6100:	movt	r6, #0
    6104:	bl	0 <coda_type_record_new>
    6108:	movw	r1, #0
    610c:	movt	r1, #0
    6110:	mov	r5, r0
    6114:	bl	0 <coda_type_set_description>
    6118:	ldr	r3, [r4]
    611c:	mov	r1, #2
    6120:	ldr	r0, [r3, #44]	; 0x2c
    6124:	bl	0 <coda_type_number_new>
    6128:	mov	r8, r0
    612c:	movw	r1, #0
    6130:	movt	r1, #0
    6134:	bl	0 <coda_type_set_description>
    6138:	mov	r1, #4
    613c:	mov	r0, r8
    6140:	bl	0 <coda_type_set_read_type>
    6144:	mov	r2, #32
    6148:	mov	r3, #0
    614c:	mov	r0, r8
    6150:	bl	0 <coda_type_set_bit_size>
    6154:	mov	r0, r8
    6158:	movw	r1, #0
    615c:	movt	r1, #0
    6160:	bl	0 <coda_type_number_set_unit>
    6164:	movw	r0, #0
    6168:	movt	r0, #0
    616c:	bl	0 <coda_type_record_field_new>
    6170:	mov	r1, r8
    6174:	mov	r9, r0
    6178:	bl	0 <coda_type_record_field_set_type>
    617c:	mov	r0, r8
    6180:	bl	0 <coda_type_release>
    6184:	mov	r1, r9
    6188:	mov	r0, r5
    618c:	bl	0 <coda_type_record_add_field>
    6190:	ldr	r3, [r4]
    6194:	mov	r1, #2
    6198:	ldr	r0, [r3, #44]	; 0x2c
    619c:	bl	0 <coda_type_number_new>
    61a0:	mov	r8, r0
    61a4:	movw	r1, #0
    61a8:	movt	r1, #0
    61ac:	bl	0 <coda_type_set_description>
    61b0:	mov	r1, #5
    61b4:	mov	r0, r8
    61b8:	bl	0 <coda_type_set_read_type>
    61bc:	mov	r2, #32
    61c0:	mov	r3, #0
    61c4:	mov	r0, r8
    61c8:	bl	0 <coda_type_set_bit_size>
    61cc:	mov	r0, r8
    61d0:	movw	r1, #0
    61d4:	movt	r1, #0
    61d8:	bl	0 <coda_type_number_set_unit>
    61dc:	movw	r0, #0
    61e0:	movt	r0, #0
    61e4:	bl	0 <coda_type_record_field_new>
    61e8:	mov	r1, r8
    61ec:	mov	r9, r0
    61f0:	bl	0 <coda_type_record_field_set_type>
    61f4:	mov	r0, r8
    61f8:	bl	0 <coda_type_release>
    61fc:	mov	r1, r9
    6200:	mov	r0, r5
    6204:	bl	0 <coda_type_record_add_field>
    6208:	ldr	r3, [r4]
    620c:	mov	r1, #2
    6210:	ldr	r0, [r3, #44]	; 0x2c
    6214:	bl	0 <coda_type_number_new>
    6218:	mov	r8, r0
    621c:	movw	r1, #0
    6220:	movt	r1, #0
    6224:	bl	0 <coda_type_set_description>
    6228:	mov	r0, r8
    622c:	mov	r1, #5
    6230:	bl	0 <coda_type_set_read_type>
    6234:	mov	r0, r8
    6238:	mov	r2, #32
    623c:	mov	r3, #0
    6240:	bl	0 <coda_type_set_bit_size>
    6244:	mov	r0, r8
    6248:	movw	r1, #0
    624c:	movt	r1, #0
    6250:	bl	0 <coda_type_number_set_unit>
    6254:	movw	r0, #0
    6258:	movt	r0, #0
    625c:	bl	0 <coda_type_record_field_new>
    6260:	mov	r1, r8
    6264:	mov	r9, r0
    6268:	bl	0 <coda_type_record_field_set_type>
    626c:	mov	r0, r8
    6270:	bl	0 <coda_type_release>
    6274:	mov	r1, r9
    6278:	mov	r0, r5
    627c:	bl	0 <coda_type_record_add_field>
    6280:	b	5b78 <cd_time_init+0x60>
    6284:	mov	r0, r8
    6288:	movw	r6, #0
    628c:	movt	r6, #0
    6290:	bl	0 <coda_type_record_new>
    6294:	movw	r1, #0
    6298:	movt	r1, #0
    629c:	mov	r5, r0
    62a0:	bl	0 <coda_type_set_description>
    62a4:	ldr	r3, [r4]
    62a8:	mov	r1, #2
    62ac:	ldr	r0, [r3, #44]	; 0x2c
    62b0:	bl	0 <coda_type_number_new>
    62b4:	mov	r8, r0
    62b8:	movw	r1, #0
    62bc:	movt	r1, #0
    62c0:	bl	0 <coda_type_set_description>
    62c4:	mov	r1, #3
    62c8:	mov	r0, r8
    62cc:	bl	0 <coda_type_set_read_type>
    62d0:	mov	r0, r8
    62d4:	mov	r2, #16
    62d8:	mov	r3, #0
    62dc:	bl	0 <coda_type_set_bit_size>
    62e0:	movw	r1, #0
    62e4:	movt	r1, #0
    62e8:	mov	r0, r8
    62ec:	bl	0 <coda_type_number_set_unit>
    62f0:	movw	r0, #0
    62f4:	movt	r0, #0
    62f8:	bl	0 <coda_type_record_field_new>
    62fc:	mov	r1, r8
    6300:	mov	r9, r0
    6304:	bl	0 <coda_type_record_field_set_type>
    6308:	mov	r0, r8
    630c:	bl	0 <coda_type_release>
    6310:	mov	r1, r9
    6314:	mov	r0, r5
    6318:	bl	0 <coda_type_record_add_field>
    631c:	ldr	r3, [r4]
    6320:	mov	r1, #2
    6324:	ldr	r0, [r3, #44]	; 0x2c
    6328:	bl	0 <coda_type_number_new>
    632c:	mov	r8, r0
    6330:	movw	r1, #0
    6334:	movt	r1, #0
    6338:	bl	0 <coda_type_set_description>
    633c:	mov	r1, #5
    6340:	mov	r0, r8
    6344:	bl	0 <coda_type_set_read_type>
    6348:	mov	r2, #32
    634c:	mov	r3, #0
    6350:	mov	r0, r8
    6354:	bl	0 <coda_type_set_bit_size>
    6358:	mov	r0, r8
    635c:	movw	r1, #0
    6360:	movt	r1, #0
    6364:	bl	0 <coda_type_number_set_unit>
    6368:	movw	r0, #0
    636c:	movt	r0, #0
    6370:	b	625c <cd_time_init+0x744>
    6374:	bl	0 <coda_type_text_new>
    6378:	mov	r5, r0
    637c:	mov	r1, #11
    6380:	bl	0 <coda_type_set_read_type>
    6384:	mov	r0, r5
    6388:	movw	r1, #0
    638c:	movt	r1, #0
    6390:	movw	r6, #0
    6394:	movt	r6, #0
    6398:	bl	0 <coda_type_set_description>
    639c:	mov	r0, r5
    63a0:	mov	r2, #23
    63a4:	mov	r3, #0
    63a8:	bl	0 <coda_type_set_byte_size>
    63ac:	b	5b78 <cd_time_init+0x60>
    63b0:	bl	0 <coda_type_text_new>
    63b4:	mov	r5, r0
    63b8:	mov	r1, #11
    63bc:	bl	0 <coda_type_set_read_type>
    63c0:	mov	r0, r5
    63c4:	movw	r1, #0
    63c8:	movt	r1, #0
    63cc:	movw	r6, #0
    63d0:	movt	r6, #0
    63d4:	bl	0 <coda_type_set_description>
    63d8:	mov	r0, r5
    63dc:	mov	r2, #18
    63e0:	mov	r3, #0
    63e4:	bl	0 <coda_type_set_byte_size>
    63e8:	b	5b78 <cd_time_init+0x60>
    63ec:	mov	r0, r5
    63f0:	bl	0 <coda_type_release>
    63f4:	ldr	r0, [sp, #4]
    63f8:	bl	0 <coda_expression_delete>
    63fc:	mvn	r0, #0
    6400:	b	5d70 <cd_time_init+0x258>
    6404:	mov	r0, r8
    6408:	movw	r6, #0
    640c:	movt	r6, #0
    6410:	bl	0 <coda_type_record_new>
    6414:	movw	r1, #0
    6418:	movt	r1, #0
    641c:	mov	r5, r0
    6420:	bl	0 <coda_type_set_description>
    6424:	ldr	r3, [r4]
    6428:	mov	r1, #2
    642c:	ldr	r0, [r3, #44]	; 0x2c
    6430:	bl	0 <coda_type_number_new>
    6434:	mov	r8, r0
    6438:	movw	r1, #0
    643c:	movt	r1, #0
    6440:	bl	0 <coda_type_set_description>
    6444:	mov	r1, #4
    6448:	mov	r0, r8
    644c:	bl	0 <coda_type_set_read_type>
    6450:	mov	r0, r8
    6454:	mov	r2, #32
    6458:	mov	r3, #0
    645c:	bl	0 <coda_type_set_bit_size>
    6460:	movw	r1, #0
    6464:	movt	r1, #0
    6468:	mov	r0, r8
    646c:	b	62ec <cd_time_init+0x7d4>
    6470:	bl	0 <coda_type_text_new>
    6474:	mov	r5, r0
    6478:	mov	r1, #11
    647c:	bl	0 <coda_type_set_read_type>
    6480:	mov	r0, r5
    6484:	movw	r1, #0
    6488:	movt	r1, #0
    648c:	movw	r6, #0
    6490:	movt	r6, #0
    6494:	bl	0 <coda_type_set_description>
    6498:	mov	r0, r5
    649c:	mov	r2, #19
    64a0:	mov	r3, #0
    64a4:	bl	0 <coda_type_set_byte_size>
    64a8:	b	5b78 <cd_time_init+0x60>
    64ac:	mov	r0, r5
    64b0:	bl	0 <coda_type_release>
    64b4:	ldr	r0, [sp, #4]
    64b8:	bl	0 <coda_expression_delete>
    64bc:	movw	r1, #0
    64c0:	movt	r1, #0
    64c4:	movw	r0, #65136	; 0xfe70
    64c8:	movt	r0, #65535	; 0xffff
    64cc:	bl	0 <coda_set_error>
    64d0:	mvn	r0, #0
    64d4:	b	5d70 <cd_time_init+0x258>
    64d8:	bl	0 <coda_type_text_new>
    64dc:	mov	r5, r0
    64e0:	mov	r1, #11
    64e4:	bl	0 <coda_type_set_read_type>
    64e8:	mov	r0, r5
    64ec:	movw	r1, #0
    64f0:	movt	r1, #0
    64f4:	movw	r6, #0
    64f8:	movt	r6, #0
    64fc:	bl	0 <coda_type_set_description>
    6500:	mov	r0, r5
    6504:	mov	r2, #26
    6508:	mov	r3, #0
    650c:	bl	0 <coda_type_set_byte_size>
    6510:	b	5b78 <cd_time_init+0x60>
    6514:	mov	r0, r5
    6518:	bl	0 <coda_type_release>
    651c:	mvn	r0, #0
    6520:	b	5d70 <cd_time_init+0x258>
    6524:	bl	0 <coda_type_text_new>
    6528:	mov	r5, r0
    652c:	mov	r1, #11
    6530:	bl	0 <coda_type_set_read_type>
    6534:	mov	r0, r5
    6538:	movw	r1, #0
    653c:	movt	r1, #0
    6540:	movw	r6, #0
    6544:	movt	r6, #0
    6548:	bl	0 <coda_type_set_description>
    654c:	mov	r0, r5
    6550:	mov	r2, #30
    6554:	mov	r3, #0
    6558:	bl	0 <coda_type_set_byte_size>
    655c:	b	5b78 <cd_time_init+0x60>
    6560:	bl	0 <coda_type_release>
    6564:	mvn	r0, #0
    6568:	b	5d70 <cd_time_init+0x258>
    656c:	bl	0 <coda_type_text_new>
    6570:	mov	r5, r0
    6574:	mov	r1, #11
    6578:	bl	0 <coda_type_set_read_type>
    657c:	mov	r0, r5
    6580:	movw	r1, #0
    6584:	movt	r1, #0
    6588:	movw	r6, #0
    658c:	movt	r6, #0
    6590:	bl	0 <coda_type_set_description>
    6594:	mov	r0, r5
    6598:	mov	r2, #17
    659c:	mov	r3, #0
    65a0:	bl	0 <coda_type_set_byte_size>
    65a4:	b	5b78 <cd_time_init+0x60>

000065a8 <cd_raw_init>:
    65a8:	strd	r4, [sp, #-16]!
    65ac:	mov	r4, r0
    65b0:	str	r6, [sp, #8]
    65b4:	mov	r6, r1
    65b8:	str	lr, [sp, #12]
    65bc:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    65c0:	cmp	r0, #0
    65c4:	bne	666c <cd_raw_init+0xc4>
    65c8:	ldr	r5, [r4]
    65cc:	movw	r3, #0
    65d0:	movt	r3, #0
    65d4:	str	r3, [r5, #40]	; 0x28
    65d8:	ldr	r0, [r5, #44]	; 0x2c
    65dc:	bl	0 <coda_type_raw_new>
    65e0:	ldr	r3, [r4]
    65e4:	str	r0, [r5, #8]
    65e8:	ldr	r3, [r3, #8]
    65ec:	cmp	r3, #0
    65f0:	beq	666c <cd_raw_init+0xc4>
    65f4:	mov	r2, r6
    65f8:	add	r1, r4, #20
    65fc:	mov	r0, r4
    6600:	bl	5094 <handle_name_attribute_for_type.isra.8>
    6604:	cmp	r0, #0
    6608:	bne	666c <cd_raw_init+0xc4>
    660c:	ldr	r3, [r4]
    6610:	movw	r2, #0
    6614:	movt	r2, #0
    6618:	movw	ip, #0
    661c:	movt	ip, #0
    6620:	movw	lr, #0
    6624:	movt	lr, #0
    6628:	movw	r1, #0
    662c:	movt	r1, #0
    6630:	movw	r4, #0
    6634:	movt	r4, #0
    6638:	str	r2, [r3, #80]	; 0x50
    663c:	movw	r2, #0
    6640:	movt	r2, #0
    6644:	str	r4, [r3, #36]	; 0x24
    6648:	str	r2, [r3, #96]	; 0x60
    664c:	str	r2, [r3, #116]	; 0x74
    6650:	str	lr, [r3, #252]	; 0xfc
    6654:	str	ip, [r3, #268]	; 0x10c
    6658:	str	r1, [r3, #288]	; 0x120
    665c:	ldrd	r4, [sp]
    6660:	ldr	r6, [sp, #8]
    6664:	add	sp, sp, #12
    6668:	pop	{pc}		; (ldr pc, [sp], #4)
    666c:	mvn	r0, #0
    6670:	b	665c <cd_raw_init+0xb4>

00006674 <cd_complex_init>:
    6674:	strd	r4, [sp, #-16]!
    6678:	mov	r4, r0
    667c:	str	r6, [sp, #8]
    6680:	mov	r6, r1
    6684:	str	lr, [sp, #12]
    6688:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    668c:	cmp	r0, #0
    6690:	bne	6738 <cd_complex_init+0xc4>
    6694:	ldr	r5, [r4]
    6698:	movw	r3, #0
    669c:	movt	r3, #0
    66a0:	str	r3, [r5, #40]	; 0x28
    66a4:	ldr	r0, [r5, #44]	; 0x2c
    66a8:	bl	0 <coda_type_complex_new>
    66ac:	ldr	r3, [r4]
    66b0:	str	r0, [r5, #8]
    66b4:	ldr	r3, [r3, #8]
    66b8:	cmp	r3, #0
    66bc:	beq	6738 <cd_complex_init+0xc4>
    66c0:	mov	r2, r6
    66c4:	add	r1, r4, #20
    66c8:	mov	r0, r4
    66cc:	bl	5094 <handle_name_attribute_for_type.isra.8>
    66d0:	cmp	r0, #0
    66d4:	bne	6738 <cd_complex_init+0xc4>
    66d8:	ldr	r3, [r4]
    66dc:	movw	r2, #0
    66e0:	movt	r2, #0
    66e4:	movw	r1, #0
    66e8:	movt	r1, #0
    66ec:	movw	lr, #0
    66f0:	movt	lr, #0
    66f4:	movw	ip, #0
    66f8:	movt	ip, #0
    66fc:	movw	r4, #0
    6700:	movt	r4, #0
    6704:	str	r2, [r3, #96]	; 0x60
    6708:	movw	r2, #0
    670c:	movt	r2, #0
    6710:	str	r4, [r3, #36]	; 0x24
    6714:	str	lr, [r3, #120]	; 0x78
    6718:	str	ip, [r3, #132]	; 0x84
    671c:	str	r1, [r3, #268]	; 0x10c
    6720:	str	r2, [r3, #292]	; 0x124
    6724:	str	r2, [r3, #304]	; 0x130
    6728:	ldrd	r4, [sp]
    672c:	ldr	r6, [sp, #8]
    6730:	add	sp, sp, #12
    6734:	pop	{pc}		; (ldr pc, [sp], #4)
    6738:	mvn	r0, #0
    673c:	b	6728 <cd_complex_init+0xb4>

00006740 <cd_array_init>:
    6740:	strd	r4, [sp, #-16]!
    6744:	mov	r4, r0
    6748:	str	r6, [sp, #8]
    674c:	mov	r6, r1
    6750:	str	lr, [sp, #12]
    6754:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    6758:	cmp	r0, #0
    675c:	bne	6904 <cd_array_init+0x1c4>
    6760:	ldr	r5, [r4]
    6764:	movw	r3, #0
    6768:	movt	r3, #0
    676c:	str	r3, [r5, #40]	; 0x28
    6770:	ldr	r0, [r5, #44]	; 0x2c
    6774:	bl	0 <coda_type_array_new>
    6778:	ldr	r3, [r4]
    677c:	str	r0, [r5, #8]
    6780:	ldr	r3, [r3, #8]
    6784:	cmp	r3, #0
    6788:	beq	6904 <cd_array_init+0x1c4>
    678c:	mov	r2, r6
    6790:	add	r1, r4, #20
    6794:	mov	r0, r4
    6798:	bl	5094 <handle_name_attribute_for_type.isra.8>
    679c:	cmp	r0, #0
    67a0:	bne	6904 <cd_array_init+0x1c4>
    67a4:	ldr	r3, [r4]
    67a8:	movw	r2, #0
    67ac:	movt	r2, #0
    67b0:	movw	r4, #0
    67b4:	movt	r4, #0
    67b8:	movw	lr, #0
    67bc:	movt	lr, #0
    67c0:	movw	r1, #0
    67c4:	movt	r1, #0
    67c8:	movw	ip, #0
    67cc:	movt	ip, #0
    67d0:	str	r4, [r3, #52]	; 0x34
    67d4:	movw	r4, #0
    67d8:	movt	r4, #0
    67dc:	str	r2, [r3, #56]	; 0x38
    67e0:	movw	r2, #0
    67e4:	movt	r2, #0
    67e8:	str	lr, [r3, #60]	; 0x3c
    67ec:	movw	lr, #0
    67f0:	movt	lr, #0
    67f4:	str	r1, [r3, #64]	; 0x40
    67f8:	movw	r1, #0
    67fc:	movt	r1, #0
    6800:	str	ip, [r3, #88]	; 0x58
    6804:	movw	ip, #0
    6808:	movt	ip, #0
    680c:	str	r4, [r3, #120]	; 0x78
    6810:	movw	r4, #0
    6814:	movt	r4, #0
    6818:	str	r2, [r3, #132]	; 0x84
    681c:	movw	r2, #0
    6820:	movt	r2, #0
    6824:	str	lr, [r3, #160]	; 0xa0
    6828:	movw	lr, #0
    682c:	movt	lr, #0
    6830:	str	r1, [r3, #188]	; 0xbc
    6834:	movw	r1, #0
    6838:	movt	r1, #0
    683c:	str	ip, [r3, #192]	; 0xc0
    6840:	movw	ip, #0
    6844:	movt	ip, #0
    6848:	str	r4, [r3, #200]	; 0xc8
    684c:	movw	r4, #0
    6850:	movt	r4, #0
    6854:	movw	r5, #0
    6858:	movt	r5, #0
    685c:	str	r2, [r3, #204]	; 0xcc
    6860:	movw	r2, #0
    6864:	movt	r2, #0
    6868:	str	r4, [r3, #104]	; 0x68
    686c:	movw	r4, #0
    6870:	movt	r4, #0
    6874:	str	lr, [r3, #208]	; 0xd0
    6878:	movw	lr, #0
    687c:	movt	lr, #0
    6880:	str	r1, [r3, #212]	; 0xd4
    6884:	movw	r1, #0
    6888:	movt	r1, #0
    688c:	str	ip, [r3, #220]	; 0xdc
    6890:	movw	ip, #0
    6894:	movt	ip, #0
    6898:	str	r2, [r3, #224]	; 0xe0
    689c:	str	r2, [r3, #228]	; 0xe4
    68a0:	str	r2, [r3, #232]	; 0xe8
    68a4:	str	r2, [r3, #236]	; 0xec
    68a8:	str	r2, [r3, #260]	; 0x104
    68ac:	str	r2, [r3, #292]	; 0x124
    68b0:	str	r2, [r3, #304]	; 0x130
    68b4:	str	r2, [r3, #332]	; 0x14c
    68b8:	str	r2, [r3, #360]	; 0x168
    68bc:	str	r2, [r3, #364]	; 0x16c
    68c0:	str	r2, [r3, #372]	; 0x174
    68c4:	str	r2, [r3, #376]	; 0x178
    68c8:	str	r2, [r3, #380]	; 0x17c
    68cc:	str	r2, [r3, #384]	; 0x180
    68d0:	str	r2, [r3, #392]	; 0x188
    68d4:	movw	r2, #0
    68d8:	movt	r2, #0
    68dc:	str	r5, [r3, #276]	; 0x114
    68e0:	str	r2, [r3, #36]	; 0x24
    68e4:	str	r4, [r3, #68]	; 0x44
    68e8:	str	lr, [r3, #96]	; 0x60
    68ec:	str	ip, [r3, #240]	; 0xf0
    68f0:	str	r1, [r3, #268]	; 0x10c
    68f4:	ldrd	r4, [sp]
    68f8:	ldr	r6, [sp, #8]
    68fc:	add	sp, sp, #12
    6900:	pop	{pc}		; (ldr pc, [sp], #4)
    6904:	mvn	r0, #0
    6908:	b	68f4 <cd_array_init+0x1b4>

0000690c <cd_ascii_white_space_init>:
    690c:	strd	r4, [sp, #-16]!
    6910:	mov	r4, r0
    6914:	str	r6, [sp, #8]
    6918:	mov	r6, r1
    691c:	str	lr, [sp, #12]
    6920:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    6924:	cmp	r0, #0
    6928:	bne	69ac <cd_ascii_white_space_init+0xa0>
    692c:	ldr	r5, [r4]
    6930:	movw	r3, #0
    6934:	movt	r3, #0
    6938:	str	r3, [r5, #40]	; 0x28
    693c:	ldr	r0, [r5, #44]	; 0x2c
    6940:	bl	0 <coda_type_text_new>
    6944:	ldr	r3, [r4]
    6948:	str	r0, [r5, #8]
    694c:	ldr	r0, [r3, #8]
    6950:	cmp	r0, #0
    6954:	beq	69ac <cd_ascii_white_space_init+0xa0>
    6958:	mov	r1, #4
    695c:	bl	0 <coda_type_text_set_special_text_type>
    6960:	cmp	r0, #0
    6964:	bne	69ac <cd_ascii_white_space_init+0xa0>
    6968:	mov	r2, r6
    696c:	add	r1, r4, #20
    6970:	mov	r0, r4
    6974:	bl	5094 <handle_name_attribute_for_type.isra.8>
    6978:	cmp	r0, #0
    697c:	bne	69ac <cd_ascii_white_space_init+0xa0>
    6980:	ldr	r1, [r4]
    6984:	movw	r2, #0
    6988:	movt	r2, #0
    698c:	movw	r3, #0
    6990:	movt	r3, #0
    6994:	str	r2, [r1, #96]	; 0x60
    6998:	str	r3, [r1, #268]	; 0x10c
    699c:	ldrd	r4, [sp]
    69a0:	ldr	r6, [sp, #8]
    69a4:	add	sp, sp, #12
    69a8:	pop	{pc}		; (ldr pc, [sp], #4)
    69ac:	mvn	r0, #0
    69b0:	b	699c <cd_ascii_white_space_init+0x90>

000069b4 <cd_ascii_line_separator_init>:
    69b4:	strd	r4, [sp, #-16]!
    69b8:	mov	r4, r0
    69bc:	str	r6, [sp, #8]
    69c0:	mov	r6, r1
    69c4:	str	lr, [sp, #12]
    69c8:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    69cc:	cmp	r0, #0
    69d0:	bne	6a54 <cd_ascii_line_separator_init+0xa0>
    69d4:	ldr	r5, [r4]
    69d8:	movw	r3, #0
    69dc:	movt	r3, #0
    69e0:	str	r3, [r5, #40]	; 0x28
    69e4:	ldr	r0, [r5, #44]	; 0x2c
    69e8:	bl	0 <coda_type_text_new>
    69ec:	ldr	r3, [r4]
    69f0:	str	r0, [r5, #8]
    69f4:	ldr	r0, [r3, #8]
    69f8:	cmp	r0, #0
    69fc:	beq	6a54 <cd_ascii_line_separator_init+0xa0>
    6a00:	mov	r1, #1
    6a04:	bl	0 <coda_type_text_set_special_text_type>
    6a08:	cmp	r0, #0
    6a0c:	bne	6a54 <cd_ascii_line_separator_init+0xa0>
    6a10:	mov	r2, r6
    6a14:	add	r1, r4, #20
    6a18:	mov	r0, r4
    6a1c:	bl	5094 <handle_name_attribute_for_type.isra.8>
    6a20:	cmp	r0, #0
    6a24:	bne	6a54 <cd_ascii_line_separator_init+0xa0>
    6a28:	ldr	r1, [r4]
    6a2c:	movw	r2, #0
    6a30:	movt	r2, #0
    6a34:	movw	r3, #0
    6a38:	movt	r3, #0
    6a3c:	str	r2, [r1, #96]	; 0x60
    6a40:	str	r3, [r1, #268]	; 0x10c
    6a44:	ldrd	r4, [sp]
    6a48:	ldr	r6, [sp, #8]
    6a4c:	add	sp, sp, #12
    6a50:	pop	{pc}		; (ldr pc, [sp], #4)
    6a54:	mvn	r0, #0
    6a58:	b	6a44 <cd_ascii_line_separator_init+0x90>

00006a5c <cd_ascii_line_init>:
    6a5c:	strd	r4, [sp, #-16]!
    6a60:	mov	r4, r0
    6a64:	str	r6, [sp, #8]
    6a68:	mov	r6, r1
    6a6c:	str	lr, [sp, #12]
    6a70:	bl	4c88 <handle_format_attribute_for_type.isra.6>
    6a74:	cmp	r0, #0
    6a78:	bne	6afc <cd_ascii_line_init+0xa0>
    6a7c:	ldr	r5, [r4]
    6a80:	movw	r3, #0
    6a84:	movt	r3, #0
    6a88:	str	r3, [r5, #40]	; 0x28
    6a8c:	ldr	r0, [r5, #44]	; 0x2c
    6a90:	bl	0 <coda_type_text_new>
    6a94:	ldr	r3, [r4]
    6a98:	str	r0, [r5, #8]
    6a9c:	ldr	r0, [r3, #8]
    6aa0:	cmp	r0, #0
    6aa4:	beq	6afc <cd_ascii_line_init+0xa0>
    6aa8:	mov	r1, #3
    6aac:	bl	0 <coda_type_text_set_special_text_type>
    6ab0:	cmp	r0, #0
    6ab4:	bne	6afc <cd_ascii_line_init+0xa0>
    6ab8:	mov	r2, r6
    6abc:	add	r1, r4, #20
    6ac0:	mov	r0, r4
    6ac4:	bl	5094 <handle_name_attribute_for_type.isra.8>
    6ac8:	cmp	r0, #0
    6acc:	bne	6afc <cd_ascii_line_init+0xa0>
    6ad0:	ldr	r1, [r4]
    6ad4:	movw	r2, #0
    6ad8:	movt	r2, #0
    6adc:	movw	r3, #0
    6ae0:	movt	r3, #0
    6ae4:	str	r2, [r1, #96]	; 0x60
    6ae8:	str	r3, [r1, #268]	; 0x10c
    6aec:	ldrd	r4, [sp]
    6af0:	ldr	r6, [sp, #8]
    6af4:	add	sp, sp, #12
    6af8:	pop	{pc}		; (ldr pc, [sp], #4)
    6afc:	mvn	r0, #0
    6b00:	b	6aec <cd_ascii_line_init+0x90>

00006b04 <product_class_add_named_type>:
    6b04:	ldr	r3, [r0, #24]
    6b08:	str	r4, [sp, #-8]!
    6b0c:	str	lr, [sp, #4]
    6b10:	cmp	r3, #0
    6b14:	beq	6b40 <product_class_add_named_type+0x3c>
    6b18:	ldr	r2, [r0]
    6b1c:	mov	r0, r3
    6b20:	ldr	r1, [r2, #8]
    6b24:	bl	0 <coda_product_class_add_named_type>
    6b28:	adds	r0, r0, #0
    6b2c:	ldr	r4, [sp]
    6b30:	add	sp, sp, #4
    6b34:	movne	r0, #1
    6b38:	rsb	r0, r0, #0
    6b3c:	pop	{pc}		; (ldr pc, [sp], #4)
    6b40:	movw	r1, #0
    6b44:	movt	r1, #0
    6b48:	ldr	r3, [pc, #12]	; 6b5c <product_class_add_named_type+0x58>
    6b4c:	movw	r0, #0
    6b50:	movt	r0, #0
    6b54:	movw	r2, #1002	; 0x3ea
    6b58:	bl	0 <__assert_fail>
    6b5c:	.word	0x00000174

00006b60 <cd_product_class_init>:
    6b60:	ldr	r3, [r0]
    6b64:	strd	r4, [sp, #-28]!	; 0xffffffe4
    6b68:	mov	r4, r0
    6b6c:	mov	r0, r1
    6b70:	movw	r1, #0
    6b74:	movt	r1, #0
    6b78:	ldr	r2, [r3]
    6b7c:	strd	r6, [sp, #8]
    6b80:	strd	r8, [sp, #16]
    6b84:	str	lr, [sp, #24]
    6b88:	sub	sp, sp, #20
    6b8c:	bl	3818 <get_mandatory_attribute_value>
    6b90:	subs	r5, r0, #0
    6b94:	beq	6cb4 <cd_product_class_init+0x154>
    6b98:	movw	r1, #0
    6b9c:	movt	r1, #0
    6ba0:	ldr	r0, [r4, #16]
    6ba4:	bl	0 <coda_za_get_entry_by_name>
    6ba8:	subs	r6, r0, #0
    6bac:	beq	6bbc <cd_product_class_init+0x5c>
    6bb0:	bl	0 <coda_za_get_entry_size>
    6bb4:	subs	r7, r0, #0
    6bb8:	bne	6cbc <cd_product_class_init+0x15c>
    6bbc:	mov	r6, #0
    6bc0:	mov	r0, r5
    6bc4:	bl	0 <coda_data_dictionary_has_product_class>
    6bc8:	cmp	r0, #0
    6bcc:	bne	6c88 <cd_product_class_init+0x128>
    6bd0:	ldr	r2, [r4]
    6bd4:	movw	r3, #0
    6bd8:	movt	r3, #0
    6bdc:	mov	r0, r5
    6be0:	str	r3, [r2, #40]	; 0x28
    6be4:	bl	0 <coda_product_class_new>
    6be8:	cmp	r0, #0
    6bec:	mov	r5, r0
    6bf0:	str	r0, [r4, #24]
    6bf4:	beq	6cb4 <cd_product_class_init+0x154>
    6bf8:	ldr	r0, [r4, #16]
    6bfc:	bl	0 <coda_za_get_filename>
    6c00:	mov	r1, r0
    6c04:	mov	r0, r5
    6c08:	bl	0 <coda_product_class_set_definition_file>
    6c0c:	subs	r5, r0, #0
    6c10:	bne	6d3c <cd_product_class_init+0x1dc>
    6c14:	mov	r1, r6
    6c18:	ldr	r0, [r4, #24]
    6c1c:	bl	0 <coda_product_class_set_revision>
    6c20:	cmp	r0, #0
    6c24:	bne	6d54 <cd_product_class_init+0x1f4>
    6c28:	ldr	r3, [r4]
    6c2c:	movw	r5, #0
    6c30:	movt	r5, #0
    6c34:	movw	r1, #0
    6c38:	movt	r1, #0
    6c3c:	ldr	r4, [r4, #24]
    6c40:	movw	ip, #0
    6c44:	movt	ip, #0
    6c48:	movw	r2, #0
    6c4c:	movt	r2, #0
    6c50:	movw	lr, #0
    6c54:	movt	lr, #0
    6c58:	str	r5, [r3, #96]	; 0x60
    6c5c:	str	r4, [r3, #8]
    6c60:	str	lr, [r3, #36]	; 0x24
    6c64:	str	ip, [r3, #180]	; 0xb4
    6c68:	str	r1, [r3, #268]	; 0x10c
    6c6c:	str	r2, [r3, #352]	; 0x160
    6c70:	add	sp, sp, #20
    6c74:	ldrd	r4, [sp]
    6c78:	ldrd	r6, [sp, #8]
    6c7c:	ldrd	r8, [sp, #16]
    6c80:	add	sp, sp, #24
    6c84:	pop	{pc}		; (ldr pc, [sp], #4)
    6c88:	mov	r0, r5
    6c8c:	bl	0 <coda_data_dictionary_get_product_class>
    6c90:	subs	r7, r0, #0
    6c94:	beq	6cb4 <cd_product_class_init+0x154>
    6c98:	bl	0 <coda_product_class_get_revision>
    6c9c:	cmp	r0, r6
    6ca0:	bge	6d14 <cd_product_class_init+0x1b4>
    6ca4:	mov	r0, r7
    6ca8:	bl	0 <coda_data_dictionary_remove_product_class>
    6cac:	cmp	r0, #0
    6cb0:	beq	6bd0 <cd_product_class_init+0x70>
    6cb4:	mvn	r0, #0
    6cb8:	b	6c70 <cd_product_class_init+0x110>
    6cbc:	add	r9, r7, #1
    6cc0:	mov	r0, r9
    6cc4:	bl	0 <malloc>
    6cc8:	subs	r8, r0, #0
    6ccc:	beq	6d78 <cd_product_class_init+0x218>
    6cd0:	mov	r0, r6
    6cd4:	mov	r1, r8
    6cd8:	bl	0 <coda_za_read_entry>
    6cdc:	subs	r6, r0, #0
    6ce0:	bne	6d68 <cd_product_class_init+0x208>
    6ce4:	mov	r1, r7
    6ce8:	mov	r3, #1
    6cec:	strb	r6, [r8, r7]
    6cf0:	add	r2, sp, #8
    6cf4:	mov	r0, r8
    6cf8:	bl	0 <coda_ascii_parse_int64>
    6cfc:	cmp	r0, #0
    6d00:	mov	r0, r8
    6d04:	blt	6d34 <cd_product_class_init+0x1d4>
    6d08:	bl	0 <free>
    6d0c:	ldr	r6, [sp, #8]
    6d10:	b	6bc0 <cd_product_class_init+0x60>
    6d14:	mov	r5, #1
    6d18:	mov	r1, #0
    6d1c:	ldr	r0, [r4, #4]
    6d20:	str	r5, [r4, #40]	; 0x28
    6d24:	bl	0 <coda_XML_StopParser>
    6d28:	mov	r0, #0
    6d2c:	str	r5, [r4, #36]	; 0x24
    6d30:	b	6c70 <cd_product_class_init+0x110>
    6d34:	bl	0 <free>
    6d38:	b	6bc0 <cd_product_class_init+0x60>
    6d3c:	ldr	r0, [r4, #24]
    6d40:	bl	0 <coda_product_class_delete>
    6d44:	mov	r3, #0
    6d48:	mvn	r0, #0
    6d4c:	str	r3, [r4, #24]
    6d50:	b	6c70 <cd_product_class_init+0x110>
    6d54:	ldr	r0, [r4, #24]
    6d58:	bl	0 <coda_product_class_delete>
    6d5c:	mvn	r0, #0
    6d60:	str	r5, [r4, #24]
    6d64:	b	6c70 <cd_product_class_init+0x110>
    6d68:	mov	r0, r8
    6d6c:	bl	0 <free>
    6d70:	mvn	r0, #0
    6d74:	b	6c70 <cd_product_class_init+0x110>
    6d78:	movw	r0, #2774	; 0xad6
    6d7c:	mov	r2, r9
    6d80:	movw	r3, #0
    6d84:	movt	r3, #0
    6d88:	movw	r1, #0
    6d8c:	movt	r1, #0
    6d90:	str	r0, [sp]
    6d94:	mvn	r0, #0
    6d98:	bl	0 <coda_set_error>
    6d9c:	b	6cb4 <cd_product_class_init+0x154>

00006da0 <whitespace_handler>:
    6da0:	ldr	r3, [r0, #48]	; 0x30
    6da4:	cmp	r3, #0
    6da8:	bxgt	lr
    6dac:	mov	r3, r1
    6db0:	mov	r1, r2
    6db4:	strd	r4, [sp, #-16]!
    6db8:	mov	r4, r0
    6dbc:	mov	r0, r3
    6dc0:	str	r6, [sp, #8]
    6dc4:	str	lr, [sp, #12]
    6dc8:	bl	3108 <is_whitespace>
    6dcc:	subs	r5, r0, #0
    6dd0:	beq	6de4 <whitespace_handler+0x44>
    6dd4:	ldrd	r4, [sp]
    6dd8:	ldr	r6, [sp, #8]
    6ddc:	add	sp, sp, #12
    6de0:	pop	{pc}		; (ldr pc, [sp], #4)
    6de4:	movw	r1, #0
    6de8:	movt	r1, #0
    6dec:	movw	r0, #65136	; 0xfe70
    6df0:	movt	r0, #65535	; 0xffff
    6df4:	bl	0 <coda_set_error>
    6df8:	mov	r1, r5
    6dfc:	ldr	r0, [r4, #4]
    6e00:	bl	0 <coda_XML_StopParser>
    6e04:	mov	r3, #1
    6e08:	ldr	r6, [sp, #8]
    6e0c:	str	r3, [r4, #36]	; 0x24
    6e10:	ldrd	r4, [sp]
    6e14:	add	sp, sp, #12
    6e18:	pop	{pc}		; (ldr pc, [sp], #4)

00006e1c <end_element_handler>:
    6e1c:	ldr	r2, [r0, #36]	; 0x24
    6e20:	cmp	r2, #0
    6e24:	bxne	lr
    6e28:	strd	r4, [sp, #-16]!
    6e2c:	mov	r4, r0
    6e30:	ldr	r2, [r0, #48]	; 0x30
    6e34:	str	r6, [sp, #8]
    6e38:	str	lr, [sp, #12]
    6e3c:	cmp	r2, #0
    6e40:	subgt	r2, r2, #1
    6e44:	strgt	r2, [r0, #48]	; 0x30
    6e48:	ble	6e5c <end_element_handler+0x40>
    6e4c:	ldrd	r4, [sp]
    6e50:	ldr	r6, [sp, #8]
    6e54:	add	sp, sp, #12
    6e58:	pop	{pc}		; (ldr pc, [sp], #4)
    6e5c:	ldr	r5, [r0]
    6e60:	cmp	r5, #0
    6e64:	beq	6f68 <end_element_handler+0x14c>
    6e68:	ldr	r3, [r5, #36]	; 0x24
    6e6c:	cmp	r3, #0
    6e70:	beq	6e80 <end_element_handler+0x64>
    6e74:	blx	r3
    6e78:	cmp	r0, #0
    6e7c:	bne	6f2c <end_element_handler+0x110>
    6e80:	ldr	r2, [r5, #396]	; 0x18c
    6e84:	cmp	r2, #0
    6e88:	beq	6eb0 <end_element_handler+0x94>
    6e8c:	ldr	r3, [r5]
    6e90:	add	r3, r3, #56	; 0x38
    6e94:	ldr	r3, [r2, r3, lsl #2]
    6e98:	cmp	r3, #0
    6e9c:	beq	6eb0 <end_element_handler+0x94>
    6ea0:	mov	r0, r4
    6ea4:	blx	r3
    6ea8:	cmp	r0, #0
    6eac:	bne	6f2c <end_element_handler+0x110>
    6eb0:	ldr	r0, [r5, #8]
    6eb4:	cmp	r0, #0
    6eb8:	beq	6ecc <end_element_handler+0xb0>
    6ebc:	ldr	r3, [r5, #40]	; 0x28
    6ec0:	cmp	r3, #0
    6ec4:	beq	6f4c <end_element_handler+0x130>
    6ec8:	blx	r3
    6ecc:	ldr	r0, [r5, #12]
    6ed0:	cmp	r0, #0
    6ed4:	beq	6edc <end_element_handler+0xc0>
    6ed8:	bl	0 <free>
    6edc:	ldr	r3, [r5, #396]	; 0x18c
    6ee0:	mov	r0, r5
    6ee4:	str	r3, [r4]
    6ee8:	bl	0 <free>
    6eec:	ldr	r3, [r4]
    6ef0:	cmp	r3, #0
    6ef4:	beq	6f44 <end_element_handler+0x128>
    6ef8:	ldr	r3, [r3, #32]
    6efc:	ldr	r0, [r4, #4]
    6f00:	cmp	r3, #0
    6f04:	movwne	r1, #0
    6f08:	movtne	r1, #0
    6f0c:	bne	6f18 <end_element_handler+0xfc>
    6f10:	movw	r1, #0
    6f14:	movt	r1, #0
    6f18:	ldrd	r4, [sp]
    6f1c:	ldr	r6, [sp, #8]
    6f20:	ldr	lr, [sp, #12]
    6f24:	add	sp, sp, #16
    6f28:	b	0 <coda_XML_SetCharacterDataHandler>
    6f2c:	mov	r1, #0
    6f30:	ldr	r0, [r4, #4]
    6f34:	bl	0 <coda_XML_StopParser>
    6f38:	mov	r3, #1
    6f3c:	str	r3, [r4, #36]	; 0x24
    6f40:	b	6e4c <end_element_handler+0x30>
    6f44:	ldr	r0, [r4, #4]
    6f48:	b	6f10 <end_element_handler+0xf4>
    6f4c:	movw	r1, #0
    6f50:	movt	r1, #0
    6f54:	ldr	r3, [pc, #40]	; 6f84 <end_element_handler+0x168>
    6f58:	movw	r0, #0
    6f5c:	movt	r0, #0
    6f60:	movw	r2, #3937	; 0xf61
    6f64:	bl	0 <__assert_fail>
    6f68:	movw	r1, #0
    6f6c:	movt	r1, #0
    6f70:	ldr	r3, [pc, #12]	; 6f84 <end_element_handler+0x168>
    6f74:	movw	r0, #0
    6f78:	movt	r0, #0
    6f7c:	movw	r2, #3917	; 0xf4d
    6f80:	bl	0 <__assert_fail>
    6f84:	.word	0x00000194

00006f88 <string_handler>:
    6f88:	ldr	r3, [r0, #48]	; 0x30
    6f8c:	cmp	r3, #0
    6f90:	bxgt	lr
    6f94:	strd	r4, [sp, #-36]!	; 0xffffffdc
    6f98:	mov	r5, r2
    6f9c:	mov	r4, r0
    6fa0:	strd	r6, [sp, #8]
    6fa4:	ldr	r7, [r0]
    6fa8:	strd	r8, [sp, #16]
    6fac:	mov	r8, r1
    6fb0:	strd	sl, [sp, #24]
    6fb4:	str	lr, [sp, #32]
    6fb8:	sub	sp, sp, #20
    6fbc:	ldr	r6, [r7, #12]
    6fc0:	cmp	r6, #0
    6fc4:	beq	7044 <string_handler+0xbc>
    6fc8:	mov	r0, r6
    6fcc:	bl	0 <strlen>
    6fd0:	add	fp, r0, r5
    6fd4:	mov	r9, r0
    6fd8:	add	r2, fp, #1
    6fdc:	mov	r0, r2
    6fe0:	str	r2, [sp, #12]
    6fe4:	bl	0 <malloc>
    6fe8:	subs	sl, r0, #0
    6fec:	ldr	r2, [sp, #12]
    6ff0:	beq	7078 <string_handler+0xf0>
    6ff4:	mov	r1, r6
    6ff8:	mov	r2, r9
    6ffc:	bl	0 <memcpy>
    7000:	mov	r2, r5
    7004:	mov	r1, r8
    7008:	add	r0, sl, r9
    700c:	bl	0 <memcpy>
    7010:	mov	r3, #0
    7014:	strb	r3, [sl, fp]
    7018:	ldr	r0, [r7, #12]
    701c:	bl	0 <free>
    7020:	ldr	r3, [r4]
    7024:	str	sl, [r3, #12]
    7028:	add	sp, sp, #20
    702c:	ldrd	r4, [sp]
    7030:	ldrd	r6, [sp, #8]
    7034:	ldrd	r8, [sp, #16]
    7038:	ldrd	sl, [sp, #24]
    703c:	add	sp, sp, #32
    7040:	pop	{pc}		; (ldr pc, [sp], #4)
    7044:	add	sl, r2, #1
    7048:	mov	r0, sl
    704c:	bl	0 <malloc>
    7050:	cmp	r0, #0
    7054:	mov	r9, r0
    7058:	str	r0, [r7, #12]
    705c:	beq	70b0 <string_handler+0x128>
    7060:	mov	r1, r8
    7064:	mov	r2, r5
    7068:	bl	0 <memcpy>
    706c:	ldr	r3, [r7, #12]
    7070:	strb	r6, [r3, r5]
    7074:	b	7028 <string_handler+0xa0>
    7078:	movw	r0, #3857	; 0xf11
    707c:	movw	r3, #0
    7080:	movt	r3, #0
    7084:	movw	r1, #0
    7088:	movt	r1, #0
    708c:	str	r0, [sp]
    7090:	mvn	r0, #0
    7094:	bl	0 <coda_set_error>
    7098:	mov	r1, sl
    709c:	ldr	r0, [r4, #4]
    70a0:	bl	0 <coda_XML_StopParser>
    70a4:	mov	r3, #1
    70a8:	str	r3, [r4, #36]	; 0x24
    70ac:	b	7028 <string_handler+0xa0>
    70b0:	movw	r0, #3841	; 0xf01
    70b4:	mov	r2, sl
    70b8:	movw	r3, #0
    70bc:	movt	r3, #0
    70c0:	movw	r1, #0
    70c4:	movt	r1, #0
    70c8:	str	r0, [sp]
    70cc:	mvn	r0, #0
    70d0:	bl	0 <coda_set_error>
    70d4:	mov	r1, r9
    70d8:	ldr	r0, [r4, #4]
    70dc:	bl	0 <coda_XML_StopParser>
    70e0:	mov	r3, #1
    70e4:	str	r3, [r4, #36]	; 0x24
    70e8:	b	7028 <string_handler+0xa0>

000070ec <start_element_handler>:
    70ec:	ldr	r3, [r0, #48]	; 0x30
    70f0:	cmp	r3, #0
    70f4:	ble	7104 <start_element_handler+0x18>
    70f8:	add	r3, r3, #1
    70fc:	str	r3, [r0, #48]	; 0x30
    7100:	bx	lr
    7104:	strd	r4, [sp, #-16]!
    7108:	mov	r4, r0
    710c:	mov	r5, r2
    7110:	ldr	r0, [r0, #8]
    7114:	str	r6, [sp, #8]
    7118:	mov	r6, r1
    711c:	str	lr, [sp, #12]
    7120:	sub	sp, sp, #8
    7124:	bl	0 <coda_hashtable_get_index_from_name>
    7128:	subs	r1, r0, #0
    712c:	blt	716c <start_element_handler+0x80>
    7130:	ldr	r3, [r4]
    7134:	add	r2, r3, r1, lsl #2
    7138:	ldr	r2, [r2, #52]	; 0x34
    713c:	cmp	r2, #0
    7140:	beq	718c <start_element_handler+0xa0>
    7144:	mov	r2, r5
    7148:	mov	r0, r4
    714c:	bl	138c <push_node>
    7150:	cmp	r0, #0
    7154:	bne	7214 <start_element_handler+0x128>
    7158:	add	sp, sp, #8
    715c:	ldrd	r4, [sp]
    7160:	ldr	r6, [sp, #8]
    7164:	add	sp, sp, #12
    7168:	pop	{pc}		; (ldr pc, [sp], #4)
    716c:	movw	r1, #0
    7170:	movt	r1, #0
    7174:	mov	r2, #44	; 0x2c
    7178:	mov	r0, r6
    717c:	bl	0 <strncmp>
    7180:	cmp	r0, #0
    7184:	bne	7288 <start_element_handler+0x19c>
    7188:	ldr	r3, [r4]
    718c:	ldr	r2, [r3]
    7190:	cmn	r2, #1
    7194:	beq	7294 <start_element_handler+0x1a8>
    7198:	ldr	r3, [r3, #48]	; 0x30
    719c:	mov	r0, r6
    71a0:	cmp	r3, #0
    71a4:	beq	722c <start_element_handler+0x140>
    71a8:	bl	0 <coda_element_name_from_xml_name>
    71ac:	mov	r6, r0
    71b0:	ldr	r0, [r4]
    71b4:	ldr	r1, [r0]
    71b8:	cmn	r1, #1
    71bc:	beq	72c4 <start_element_handler+0x1d8>
    71c0:	movw	r3, #0
    71c4:	movt	r3, #0
    71c8:	add	r3, r3, r1, lsl #2
    71cc:	ldr	r3, [r3, #68]	; 0x44
    71d0:	ldrb	r2, [r3]
    71d4:	cmp	r2, #32
    71d8:	beq	71e8 <start_element_handler+0xfc>
    71dc:	ldrb	r1, [r3, #1]!
    71e0:	cmp	r1, #32
    71e4:	bne	71dc <start_element_handler+0xf0>
    71e8:	add	r5, r3, #1
    71ec:	ldr	r0, [r0, #44]	; 0x2c
    71f0:	bl	0 <coda_type_get_format_name>
    71f4:	movw	r1, #0
    71f8:	movt	r1, #0
    71fc:	str	r0, [sp]
    7200:	mov	r3, r5
    7204:	movw	r0, #65136	; 0xfe70
    7208:	movt	r0, #65535	; 0xffff
    720c:	mov	r2, r6
    7210:	bl	0 <coda_set_error>
    7214:	mov	r1, #0
    7218:	ldr	r0, [r4, #4]
    721c:	bl	0 <coda_XML_StopParser>
    7220:	mov	r3, #1
    7224:	str	r3, [r4, #36]	; 0x24
    7228:	b	7158 <start_element_handler+0x6c>
    722c:	bl	0 <coda_element_name_from_xml_name>
    7230:	ldr	r3, [r4]
    7234:	mov	r2, r0
    7238:	ldr	r1, [r3]
    723c:	cmn	r1, #1
    7240:	beq	72b8 <start_element_handler+0x1cc>
    7244:	movw	r3, #0
    7248:	movt	r3, #0
    724c:	add	r3, r3, r1, lsl #2
    7250:	ldr	r3, [r3, #68]	; 0x44
    7254:	ldrb	r1, [r3]
    7258:	cmp	r1, #32
    725c:	beq	726c <start_element_handler+0x180>
    7260:	ldrb	r1, [r3, #1]!
    7264:	cmp	r1, #32
    7268:	bne	7260 <start_element_handler+0x174>
    726c:	add	r3, r3, #1
    7270:	movw	r1, #0
    7274:	movt	r1, #0
    7278:	movw	r0, #65136	; 0xfe70
    727c:	movt	r0, #65535	; 0xffff
    7280:	bl	0 <coda_set_error>
    7284:	b	7214 <start_element_handler+0x128>
    7288:	mov	r3, #1
    728c:	str	r3, [r4, #48]	; 0x30
    7290:	b	7158 <start_element_handler+0x6c>
    7294:	mov	r0, r6
    7298:	bl	0 <coda_element_name_from_xml_name>
    729c:	mov	r2, r0
    72a0:	movw	r1, #0
    72a4:	movt	r1, #0
    72a8:	movw	r0, #65136	; 0xfe70
    72ac:	movt	r0, #65535	; 0xffff
    72b0:	bl	0 <coda_set_error>
    72b4:	b	7214 <start_element_handler+0x128>
    72b8:	movw	r3, #0
    72bc:	movt	r3, #0
    72c0:	b	7270 <start_element_handler+0x184>
    72c4:	movw	r5, #0
    72c8:	movt	r5, #0
    72cc:	b	71ec <start_element_handler+0x100>

000072d0 <cd_raw_set_fixed_value>:
    72d0:	ldr	r3, [r0]
    72d4:	ldr	r3, [r3, #12]
    72d8:	cmp	r3, #0
    72dc:	beq	7330 <cd_raw_set_fixed_value+0x60>
    72e0:	str	r4, [sp, #-8]!
    72e4:	mov	r4, r0
    72e8:	mov	r0, r3
    72ec:	str	lr, [sp, #4]
    72f0:	bl	2d34 <decode_escaped_string.part.1>
    72f4:	subs	r1, r0, #0
    72f8:	blt	7338 <cd_raw_set_fixed_value+0x68>
    72fc:	moveq	r0, #0
    7300:	beq	7324 <cd_raw_set_fixed_value+0x54>
    7304:	ldr	r3, [r4]
    7308:	ldr	r2, [r3, #12]
    730c:	ldr	r0, [r3, #396]	; 0x18c
    7310:	ldr	r0, [r0, #8]
    7314:	bl	0 <coda_type_raw_set_fixed_value>
    7318:	adds	r0, r0, #0
    731c:	movne	r0, #1
    7320:	rsb	r0, r0, #0
    7324:	ldr	r4, [sp]
    7328:	add	sp, sp, #4
    732c:	pop	{pc}		; (ldr pc, [sp], #4)
    7330:	mov	r0, #0
    7334:	bx	lr
    7338:	movw	r1, #0
    733c:	movt	r1, #0
    7340:	movw	r0, #65136	; 0xfe70
    7344:	movt	r0, #65535	; 0xffff
    7348:	bl	0 <coda_set_error>
    734c:	mvn	r0, #0
    7350:	b	7324 <cd_raw_set_fixed_value+0x54>

00007354 <cd_type_set_type>:
    7354:	ldr	r3, [r0]
    7358:	strd	r4, [sp, #-16]!
    735c:	mov	r5, r0
    7360:	ldr	r2, [r3, #396]	; 0x18c
    7364:	ldr	r4, [r2, #8]
    7368:	ldr	r1, [r4, #20]
    736c:	str	r6, [sp, #8]
    7370:	str	lr, [sp, #12]
    7374:	cmp	r1, #0
    7378:	beq	7384 <cd_type_set_type+0x30>
    737c:	ldr	r0, [r3, #8]
    7380:	bl	0 <coda_type_set_description>
    7384:	ldr	r0, [r4, #36]	; 0x24
    7388:	cmp	r0, #0
    738c:	beq	73b4 <cd_type_set_type+0x60>
    7390:	ldr	r3, [r5]
    7394:	ldr	r3, [r3, #8]
    7398:	ldr	r6, [r3, #36]	; 0x24
    739c:	cmp	r6, #0
    73a0:	bne	73e8 <cd_type_set_type+0x94>
    73a4:	str	r0, [r3, #36]	; 0x24
    73a8:	ldr	r1, [r3]
    73ac:	bl	16b0 <type_set_format>
    73b0:	str	r6, [r4, #36]	; 0x24
    73b4:	mov	r0, r4
    73b8:	bl	0 <coda_type_release>
    73bc:	ldr	r3, [r5]
    73c0:	mov	r2, #0
    73c4:	mov	r0, r2
    73c8:	ldrd	r4, [sp]
    73cc:	ldr	r6, [sp, #8]
    73d0:	add	sp, sp, #12
    73d4:	ldr	ip, [r3, #8]
    73d8:	ldr	r1, [r3, #396]	; 0x18c
    73dc:	str	ip, [r1, #8]
    73e0:	str	r2, [r3, #8]
    73e4:	pop	{pc}		; (ldr pc, [sp], #4)
    73e8:	movw	r1, #0
    73ec:	movt	r1, #0
    73f0:	ldr	r3, [pc, #12]	; 7404 <cd_type_set_type+0xb0>
    73f4:	movw	r0, #0
    73f8:	movt	r0, #0
    73fc:	movw	r2, #3653	; 0xe45
    7400:	bl	0 <__assert_fail>
    7404:	.word	0x000001a0

00007408 <cd_named_type_init>:
    7408:	ldr	r3, [r0]
    740c:	strd	r4, [sp, #-16]!
    7410:	mov	r4, r0
    7414:	mov	r0, r1
    7418:	movw	r1, #0
    741c:	movt	r1, #0
    7420:	ldr	r2, [r3]
    7424:	str	r6, [sp, #8]
    7428:	str	lr, [sp, #12]
    742c:	sub	sp, sp, #8
    7430:	bl	3818 <get_mandatory_attribute_value>
    7434:	subs	r5, r0, #0
    7438:	beq	74e4 <cd_named_type_init+0xdc>
    743c:	ldr	r2, [r4]
    7440:	movw	r3, #0
    7444:	movt	r3, #0
    7448:	ldr	r0, [r4, #24]
    744c:	str	r3, [r2, #40]	; 0x28
    7450:	cmp	r0, #0
    7454:	beq	74ec <cd_named_type_init+0xe4>
    7458:	mov	r1, r5
    745c:	bl	0 <coda_product_class_has_named_type>
    7460:	subs	r6, r0, #0
    7464:	beq	74b4 <cd_named_type_init+0xac>
    7468:	mov	r1, r5
    746c:	ldr	r0, [r4, #24]
    7470:	bl	0 <coda_product_class_get_named_type>
    7474:	mov	r3, r0
    7478:	ldr	r2, [r4]
    747c:	mov	ip, #1
    7480:	mov	r0, #0
    7484:	ldr	lr, [r3]
    7488:	ldr	r1, [r3, #4]
    748c:	add	r1, r1, ip
    7490:	str	r1, [r3, #4]
    7494:	str	r3, [r2, #8]
    7498:	str	lr, [r2, #44]	; 0x2c
    749c:	str	ip, [r2, #48]	; 0x30
    74a0:	add	sp, sp, #8
    74a4:	ldrd	r4, [sp]
    74a8:	ldr	r6, [sp, #8]
    74ac:	add	sp, sp, #12
    74b0:	pop	{pc}		; (ldr pc, [sp], #4)
    74b4:	mov	r2, r5
    74b8:	mov	r1, #1
    74bc:	ldr	r0, [r4, #16]
    74c0:	ldr	ip, [r4, #28]
    74c4:	ldr	r3, [r4, #24]
    74c8:	str	ip, [sp]
    74cc:	bl	1b20 <parse_entry>
    74d0:	cmp	r0, #0
    74d4:	mvnne	r0, #0
    74d8:	strne	r6, [r4, #44]	; 0x2c
    74dc:	beq	7468 <cd_named_type_init+0x60>
    74e0:	b	74a0 <cd_named_type_init+0x98>
    74e4:	mvn	r0, #0
    74e8:	b	74a0 <cd_named_type_init+0x98>
    74ec:	movw	r1, #0
    74f0:	movt	r1, #0
    74f4:	ldr	r3, [pc, #12]	; 7508 <cd_named_type_init+0x100>
    74f8:	movw	r0, #0
    74fc:	movt	r0, #0
    7500:	movw	r2, #1889	; 0x761
    7504:	bl	0 <__assert_fail>
    7508:	.word	0x000001b4

0000750c <cd_text_set_fixed_value>:
    750c:	ldr	r3, [r0]
    7510:	ldr	r1, [r3, #12]
    7514:	cmp	r1, #0
    7518:	beq	7558 <cd_text_set_fixed_value+0x4c>
    751c:	str	r4, [sp, #-8]!
    7520:	mov	r4, r0
    7524:	mov	r0, r1
    7528:	str	lr, [sp, #4]
    752c:	bl	2d34 <decode_escaped_string.part.1>
    7530:	cmp	r0, #0
    7534:	blt	7564 <cd_text_set_fixed_value+0x58>
    7538:	ldr	r3, [r4]
    753c:	ldr	r4, [sp]
    7540:	ldr	lr, [sp, #4]
    7544:	add	sp, sp, #8
    7548:	ldr	r1, [r3, #12]
    754c:	ldr	r3, [r3, #396]	; 0x18c
    7550:	ldr	r0, [r3, #8]
    7554:	b	0 <coda_type_text_set_fixed_value>
    7558:	ldr	r3, [r3, #396]	; 0x18c
    755c:	ldr	r0, [r3, #8]
    7560:	b	0 <coda_type_text_set_fixed_value>
    7564:	movw	r1, #0
    7568:	movt	r1, #0
    756c:	movw	r0, #65136	; 0xfe70
    7570:	movt	r0, #65535	; 0xffff
    7574:	bl	0 <coda_set_error>
    7578:	ldr	r4, [sp]
    757c:	add	sp, sp, #4
    7580:	mvn	r0, #0
    7584:	pop	{pc}		; (ldr pc, [sp], #4)

00007588 <coda_read_product_definition>:
    7588:	ldr	r3, [r0, #24]
    758c:	strd	r4, [sp, #-16]!
    7590:	str	r6, [sp, #8]
    7594:	str	lr, [sp, #12]
    7598:	sub	sp, sp, #8
    759c:	cmp	r3, #0
    75a0:	bne	760c <coda_read_product_definition+0x84>
    75a4:	ldr	r3, [r0, #44]	; 0x2c
    75a8:	mov	r4, r0
    75ac:	movw	r1, #0
    75b0:	movt	r1, #0
    75b4:	ldr	r5, [r3, #20]
    75b8:	ldr	r0, [r5, #8]
    75bc:	bl	0 <coda_za_open>
    75c0:	subs	r6, r0, #0
    75c4:	beq	7604 <coda_read_product_definition+0x7c>
    75c8:	mov	r3, r5
    75cc:	mov	r1, #2
    75d0:	str	r4, [sp]
    75d4:	ldr	r2, [r4, #8]
    75d8:	bl	1b20 <parse_entry>
    75dc:	subs	r4, r0, #0
    75e0:	mov	r0, r6
    75e4:	mvnne	r4, #0
    75e8:	bl	0 <coda_za_close>
    75ec:	mov	r0, r4
    75f0:	add	sp, sp, #8
    75f4:	ldrd	r4, [sp]
    75f8:	ldr	r6, [sp, #8]
    75fc:	add	sp, sp, #12
    7600:	pop	{pc}		; (ldr pc, [sp], #4)
    7604:	mvn	r4, #0
    7608:	b	75ec <coda_read_product_definition+0x64>
    760c:	movw	r1, #0
    7610:	movt	r1, #0
    7614:	ldr	r3, [pc, #12]	; 7628 <coda_read_product_definition+0xa0>
    7618:	movw	r0, #0
    761c:	movt	r0, #0
    7620:	movw	r2, #4269	; 0x10ad
    7624:	bl	0 <__assert_fail>
    7628:	.word	0x000001c8

0000762c <coda_read_definitions>:
    762c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    7630:	strd	r6, [sp, #8]
    7634:	strd	r8, [sp, #16]
    7638:	strd	sl, [sp, #24]
    763c:	str	lr, [sp, #32]
    7640:	sub	sp, sp, #108	; 0x6c
    7644:	bl	0 <strdup>
    7648:	subs	r3, r0, #0
    764c:	str	r3, [sp, #12]
    7650:	beq	78ac <coda_read_definitions+0x280>
    7654:	ldr	r7, [sp, #12]
    7658:	ldrb	r3, [r7]
    765c:	cmp	r3, #0
    7660:	beq	76dc <coda_read_definitions+0xb0>
    7664:	movw	r9, #0
    7668:	movt	r9, #0
    766c:	movw	r2, #0
    7670:	movt	r2, #0
    7674:	mov	fp, #0
    7678:	str	r2, [sp, #8]
    767c:	cmp	r3, #58	; 0x3a
    7680:	mov	r4, r7
    7684:	beq	7704 <coda_read_definitions+0xd8>
    7688:	ldrb	r3, [r4, #1]!
    768c:	cmp	r3, #0
    7690:	cmpne	r3, #58	; 0x3a
    7694:	bne	7688 <coda_read_definitions+0x5c>
    7698:	cmp	r3, #0
    769c:	bne	7704 <coda_read_definitions+0xd8>
    76a0:	add	r2, sp, #16
    76a4:	mov	r1, r7
    76a8:	mov	r0, #3
    76ac:	bl	0 <__xstat>
    76b0:	cmp	r0, #0
    76b4:	bne	76cc <coda_read_definitions+0xa0>
    76b8:	ldr	r3, [sp, #32]
    76bc:	tst	r3, #16384	; 0x4000
    76c0:	bne	7728 <coda_read_definitions+0xfc>
    76c4:	tst	r3, #32768	; 0x8000
    76c8:	bne	770c <coda_read_definitions+0xe0>
    76cc:	ldrb	r3, [r4]
    76d0:	mov	r7, r4
    76d4:	cmp	r3, #0
    76d8:	bne	767c <coda_read_definitions+0x50>
    76dc:	ldr	r0, [sp, #12]
    76e0:	bl	0 <free>
    76e4:	mov	r0, #0
    76e8:	add	sp, sp, #108	; 0x6c
    76ec:	ldrd	r4, [sp]
    76f0:	ldrd	r6, [sp, #8]
    76f4:	ldrd	r8, [sp, #16]
    76f8:	ldrd	sl, [sp, #24]
    76fc:	add	sp, sp, #32
    7700:	pop	{pc}		; (ldr pc, [sp], #4)
    7704:	strb	fp, [r4], #1
    7708:	b	76a0 <coda_read_definitions+0x74>
    770c:	mov	r0, r7
    7710:	bl	21c0 <read_definition_file>
    7714:	cmp	r0, #0
    7718:	beq	76cc <coda_read_definitions+0xa0>
    771c:	ldr	r0, [sp, #12]
    7720:	bl	0 <free>
    7724:	b	7834 <coda_read_definitions+0x208>
    7728:	mov	r0, r7
    772c:	bl	0 <opendir>
    7730:	subs	r8, r0, #0
    7734:	beq	7878 <coda_read_definitions+0x24c>
    7738:	mov	r0, r8
    773c:	bl	0 <readdir>
    7740:	subs	sl, r0, #0
    7744:	add	r6, sl, #11
    7748:	beq	77e8 <coda_read_definitions+0x1bc>
    774c:	mov	r0, r6
    7750:	bl	0 <strlen>
    7754:	mov	r5, r0
    7758:	add	r0, r0, #3
    775c:	cmp	r5, #8
    7760:	mov	r1, r9
    7764:	add	r0, sl, r0
    7768:	bls	7738 <coda_read_definitions+0x10c>
    776c:	bl	0 <strcmp>
    7770:	cmp	r0, #0
    7774:	bne	7738 <coda_read_definitions+0x10c>
    7778:	mov	r0, r7
    777c:	bl	0 <strlen>
    7780:	mov	sl, r0
    7784:	add	r0, r5, #2
    7788:	add	r0, r0, sl
    778c:	bl	0 <malloc>
    7790:	mov	r3, r6
    7794:	subs	r6, r0, #0
    7798:	ldr	r1, [sp, #8]
    779c:	mov	r2, r7
    77a0:	beq	783c <coda_read_definitions+0x210>
    77a4:	bl	0 <sprintf>
    77a8:	add	r2, sp, #16
    77ac:	mov	r1, r6
    77b0:	mov	r0, #3
    77b4:	bl	0 <__xstat>
    77b8:	cmp	r0, #0
    77bc:	mov	r0, r6
    77c0:	bne	77f4 <coda_read_definitions+0x1c8>
    77c4:	ldr	r3, [sp, #32]
    77c8:	tst	r3, #32768	; 0x8000
    77cc:	beq	77dc <coda_read_definitions+0x1b0>
    77d0:	bl	21c0 <read_definition_file>
    77d4:	cmp	r0, #0
    77d8:	bne	781c <coda_read_definitions+0x1f0>
    77dc:	mov	r0, r6
    77e0:	bl	0 <free>
    77e4:	b	7738 <coda_read_definitions+0x10c>
    77e8:	mov	r0, r8
    77ec:	bl	0 <closedir>
    77f0:	b	76cc <coda_read_definitions+0xa0>
    77f4:	bl	0 <__errno_location>
    77f8:	ldr	r0, [r0]
    77fc:	bl	0 <strerror>
    7800:	mov	r3, r0
    7804:	movw	r1, #0
    7808:	movt	r1, #0
    780c:	movw	r0, #65136	; 0xfe70
    7810:	movt	r0, #65535	; 0xffff
    7814:	mov	r2, r6
    7818:	bl	0 <coda_set_error>
    781c:	mov	r0, r6
    7820:	bl	0 <free>
    7824:	mov	r0, r8
    7828:	bl	0 <closedir>
    782c:	ldr	r0, [sp, #12]
    7830:	bl	0 <free>
    7834:	mvn	r0, #0
    7838:	b	76e8 <coda_read_definitions+0xbc>
    783c:	movw	r0, #4427	; 0x114b
    7840:	add	r2, r5, sl
    7844:	add	r2, r2, #2
    7848:	movw	r3, #0
    784c:	movt	r3, #0
    7850:	movw	r1, #0
    7854:	movt	r1, #0
    7858:	str	r0, [sp]
    785c:	mvn	r0, #0
    7860:	bl	0 <coda_set_error>
    7864:	mov	r0, r8
    7868:	bl	0 <closedir>
    786c:	ldr	r0, [sp, #12]
    7870:	bl	0 <free>
    7874:	b	7834 <coda_read_definitions+0x208>
    7878:	bl	0 <__errno_location>
    787c:	ldr	r0, [r0]
    7880:	bl	0 <strerror>
    7884:	mov	r3, r0
    7888:	mov	r2, r7
    788c:	movw	r1, #0
    7890:	movt	r1, #0
    7894:	movw	r0, #65136	; 0xfe70
    7898:	movt	r0, #65535	; 0xffff
    789c:	bl	0 <coda_set_error>
    78a0:	ldr	r0, [sp, #12]
    78a4:	bl	0 <free>
    78a8:	b	7834 <coda_read_definitions+0x208>
    78ac:	mvn	r0, #0
    78b0:	movw	r2, #0
    78b4:	movt	r2, #0
    78b8:	movw	r1, #0
    78bc:	movt	r1, #0
    78c0:	movw	r3, #4302	; 0x10ce
    78c4:	bl	0 <coda_set_error>
    78c8:	mvn	r0, #0
    78cc:	b	76e8 <coda_read_definitions+0xbc>
