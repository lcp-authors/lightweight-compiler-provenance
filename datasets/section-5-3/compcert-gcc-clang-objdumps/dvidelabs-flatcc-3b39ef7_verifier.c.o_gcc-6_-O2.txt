
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uq.dir/__/__/src/runtime/verifier.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_offset_field>:
       0:	add	r1, r1, #2
       4:	ldrh	ip, [r0, #22]
       8:	lsl	r1, r1, #1
       c:	uxth	r1, r1
      10:	cmp	ip, r1
      14:	bls	40 <get_offset_field+0x40>
      18:	ldr	ip, [r0, #12]
      1c:	ldrh	r1, [ip, r1]
      20:	cmp	r1, #0
      24:	beq	40 <get_offset_field+0x40>
      28:	ldrh	r2, [r0, #20]
      2c:	add	ip, r1, #4
      30:	cmp	ip, r2
      34:	bls	58 <get_offset_field+0x58>
      38:	mov	r0, #13
      3c:	bx	lr
      40:	mov	r1, #0
      44:	cmp	r2, r1
      48:	movne	r0, #4
      4c:	moveq	r0, r1
      50:	str	r1, [r3]
      54:	bx	lr
      58:	ldr	r2, [r0, #16]
      5c:	add	r1, r1, r2
      60:	ands	r0, r1, #3
      64:	beq	70 <get_offset_field+0x70>
      68:	mov	r0, #12
      6c:	bx	lr
      70:	str	r1, [r3]
      74:	bx	lr

00000078 <flatcc_verify_typed_buffer_header.part.3>:
      78:	cmp	r1, #0
      7c:	beq	94 <flatcc_verify_typed_buffer_header.part.3+0x1c>
      80:	ldr	r0, [r0, #4]
      84:	cmp	r1, r0
      88:	movne	r0, #2
      8c:	moveq	r0, #0
      90:	bx	lr
      94:	mov	r0, r1
      98:	bx	lr

0000009c <flatcc_verify_error_string>:
      9c:	cmp	r0, #36	; 0x24
      a0:	ldrls	r3, [pc, #8]	; b0 <flatcc_verify_error_string+0x14>
      a4:	ldrls	r0, [r3, r0, lsl #2]
      a8:	ldrhi	r0, [pc, #4]	; b4 <flatcc_verify_error_string+0x18>
      ac:	bx	lr
	...

000000b8 <flatcc_verify_field>:
      b8:	add	r1, r1, #2
      bc:	ldrh	ip, [r0, #22]
      c0:	lsl	r1, r1, #1
      c4:	uxth	r1, r1
      c8:	cmp	ip, r1
      cc:	bls	100 <flatcc_verify_field+0x48>
      d0:	ldr	ip, [r0, #12]
      d4:	ldrh	r1, [ip, r1]
      d8:	cmp	r1, #0
      dc:	beq	100 <flatcc_verify_field+0x48>
      e0:	push	{lr}		; (str lr, [sp, #-4]!)
      e4:	add	r2, r2, r1
      e8:	ldrh	lr, [r0, #20]
      ec:	ldr	ip, [r0]
      f0:	cmp	r2, lr
      f4:	bls	108 <flatcc_verify_field+0x50>
      f8:	mov	r0, #13
      fc:	pop	{pc}		; (ldr pc, [sp], #4)
     100:	mov	r0, #0
     104:	bx	lr
     108:	ldr	r0, [r0, #16]
     10c:	sub	r3, r3, #1
     110:	add	r0, ip, r0
     114:	add	r0, r0, r1
     118:	tst	r0, r3
     11c:	moveq	r0, #0
     120:	movne	r0, #12
     124:	pop	{pc}		; (ldr pc, [sp], #4)

00000128 <flatcc_verify_string_field>:
     128:	push	{r4, lr}
     12c:	sub	sp, sp, #8
     130:	add	r3, sp, #4
     134:	mov	r4, r0
     138:	bl	0 <get_offset_field>
     13c:	cmp	r0, #0
     140:	bne	194 <flatcc_verify_string_field+0x6c>
     144:	ldr	r3, [sp, #4]
     148:	cmp	r3, #0
     14c:	beq	194 <flatcc_verify_string_field+0x6c>
     150:	ldr	r1, [r4]
     154:	ldr	r2, [r1, r3]
     158:	add	r2, r3, r2
     15c:	cmp	r3, r2
     160:	bcs	19c <flatcc_verify_string_field+0x74>
     164:	ldr	r3, [r4, #4]
     168:	add	ip, r2, #4
     16c:	cmp	r3, ip
     170:	bcc	19c <flatcc_verify_string_field+0x74>
     174:	tst	r2, #3
     178:	bne	19c <flatcc_verify_string_field+0x74>
     17c:	ldr	r2, [r1, r2]
     180:	sub	r3, r3, ip
     184:	add	lr, r2, #1
     188:	cmp	r3, lr
     18c:	movcc	r0, #8
     190:	bcs	1a8 <flatcc_verify_string_field+0x80>
     194:	add	sp, sp, #8
     198:	pop	{r4, pc}
     19c:	mov	r0, #17
     1a0:	add	sp, sp, #8
     1a4:	pop	{r4, pc}
     1a8:	add	r1, r1, ip
     1ac:	ldrb	r3, [r1, r2]
     1b0:	cmp	r3, #0
     1b4:	movne	r0, #7
     1b8:	b	194 <flatcc_verify_string_field+0x6c>

000001bc <flatcc_verify_vector_field>:
     1bc:	push	{r4, r5, r6, lr}
     1c0:	sub	sp, sp, #8
     1c4:	mov	r5, r3
     1c8:	add	r3, sp, #4
     1cc:	mov	r6, r0
     1d0:	ldrh	r4, [sp, #24]
     1d4:	bl	0 <get_offset_field>
     1d8:	cmp	r0, #0
     1dc:	bne	23c <flatcc_verify_vector_field+0x80>
     1e0:	ldr	r3, [sp, #4]
     1e4:	cmp	r3, #0
     1e8:	beq	23c <flatcc_verify_vector_field+0x80>
     1ec:	ldr	r1, [r6]
     1f0:	ldr	r2, [r1, r3]
     1f4:	add	r2, r3, r2
     1f8:	cmp	r3, r2
     1fc:	bcs	244 <flatcc_verify_vector_field+0x88>
     200:	ldr	ip, [r6, #4]
     204:	add	r3, r2, #4
     208:	cmp	ip, r3
     20c:	bcc	244 <flatcc_verify_vector_field+0x88>
     210:	cmp	r4, #4
     214:	movcc	r4, #4
     218:	sub	r4, r4, #1
     21c:	orr	r4, r4, #3
     220:	tst	r4, r3
     224:	bne	244 <flatcc_verify_vector_field+0x88>
     228:	ldr	r2, [r1, r2]
     22c:	ldr	r1, [sp, #28]
     230:	cmp	r1, r2
     234:	movcc	r0, #25
     238:	bcs	250 <flatcc_verify_vector_field+0x94>
     23c:	add	sp, sp, #8
     240:	pop	{r4, r5, r6, pc}
     244:	mov	r0, #16
     248:	add	sp, sp, #8
     24c:	pop	{r4, r5, r6, pc}
     250:	mul	r5, r2, r5
     254:	sub	r3, ip, r3
     258:	cmp	r3, r5
     25c:	movcc	r0, #26
     260:	b	23c <flatcc_verify_vector_field+0x80>

00000264 <flatcc_verify_string_vector_field>:
     264:	push	{r4, r5, r6, r7, lr}
     268:	sub	sp, sp, #12
     26c:	add	r3, sp, #4
     270:	mov	r4, r0
     274:	bl	0 <get_offset_field>
     278:	cmp	r0, #0
     27c:	bne	2d4 <flatcc_verify_string_vector_field+0x70>
     280:	ldr	r3, [sp, #4]
     284:	cmp	r3, #0
     288:	beq	2d4 <flatcc_verify_string_vector_field+0x70>
     28c:	ldr	lr, [r4]
     290:	ldr	r2, [lr, r3]
     294:	add	r2, r3, r2
     298:	cmp	r3, r2
     29c:	bcs	2dc <flatcc_verify_string_vector_field+0x78>
     2a0:	ldr	r5, [r4, #4]
     2a4:	add	r3, r2, #4
     2a8:	cmp	r5, r3
     2ac:	bcc	2dc <flatcc_verify_string_vector_field+0x78>
     2b0:	tst	r3, #3
     2b4:	bne	2dc <flatcc_verify_string_vector_field+0x78>
     2b8:	ldr	r1, [lr, r2]
     2bc:	cmn	r1, #-1073741823	; 0xc0000001
     2c0:	bls	2e8 <flatcc_verify_string_vector_field+0x84>
     2c4:	ldr	r2, [lr, r2]
     2c8:	cmn	r2, #-1073741823	; 0xc0000001
     2cc:	movhi	r0, #25
     2d0:	bls	354 <flatcc_verify_string_vector_field+0xf0>
     2d4:	add	sp, sp, #12
     2d8:	pop	{r4, r5, r6, r7, pc}
     2dc:	mov	r0, #16
     2e0:	add	sp, sp, #12
     2e4:	pop	{r4, r5, r6, r7, pc}
     2e8:	lsl	r4, r1, #2
     2ec:	sub	ip, r5, r3
     2f0:	cmp	ip, r4
     2f4:	bcc	2c4 <flatcc_verify_string_vector_field+0x60>
     2f8:	cmp	r1, #0
     2fc:	beq	2d4 <flatcc_verify_string_vector_field+0x70>
     300:	ldr	r2, [lr, r3]
     304:	add	r1, lr, r3
     308:	add	r2, r3, r2
     30c:	cmp	r3, r2
     310:	bcs	348 <flatcc_verify_string_vector_field+0xe4>
     314:	add	ip, r2, #4
     318:	cmp	r5, ip
     31c:	bcc	348 <flatcc_verify_string_vector_field+0xe4>
     320:	tst	r2, #3
     324:	bne	348 <flatcc_verify_string_vector_field+0xe4>
     328:	ldr	r2, [lr, r2]
     32c:	sub	r6, r5, ip
     330:	add	r7, r2, #1
     334:	cmp	r7, r6
     338:	bls	364 <flatcc_verify_string_vector_field+0x100>
     33c:	mov	r0, #8
     340:	add	sp, sp, #12
     344:	pop	{r4, r5, r6, r7, pc}
     348:	mov	r0, #17
     34c:	add	sp, sp, #12
     350:	pop	{r4, r5, r6, r7, pc}
     354:	sub	r3, r5, r3
     358:	cmp	r3, r2, lsl #2
     35c:	movcc	r0, #26
     360:	b	2d4 <flatcc_verify_string_vector_field+0x70>
     364:	add	r4, r3, r4
     368:	add	r2, lr, r2
     36c:	ldrb	r2, [r2, ip]
     370:	cmp	r2, #0
     374:	movne	r0, #7
     378:	bne	2d4 <flatcc_verify_string_vector_field+0x70>
     37c:	add	r3, r3, #4
     380:	cmp	r3, r4
     384:	beq	2d4 <flatcc_verify_string_vector_field+0x70>
     388:	ldr	r2, [r1, #4]!
     38c:	add	r2, r3, r2
     390:	cmp	r3, r2
     394:	add	ip, r2, #4
     398:	bcs	348 <flatcc_verify_string_vector_field+0xe4>
     39c:	cmp	r5, ip
     3a0:	bcc	348 <flatcc_verify_string_vector_field+0xe4>
     3a4:	tst	r2, #3
     3a8:	sub	r7, r5, ip
     3ac:	bne	348 <flatcc_verify_string_vector_field+0xe4>
     3b0:	ldr	r2, [lr, r2]
     3b4:	add	r6, r2, #1
     3b8:	cmp	r7, r6
     3bc:	bcc	33c <flatcc_verify_string_vector_field+0xd8>
     3c0:	b	368 <flatcc_verify_string_vector_field+0x104>

000003c4 <flatcc_verify_table_field>:
     3c4:	push	{r4, r5, lr}
     3c8:	sub	sp, sp, #36	; 0x24
     3cc:	mov	r5, r3
     3d0:	add	r3, sp, #4
     3d4:	mov	r4, r0
     3d8:	bl	0 <get_offset_field>
     3dc:	cmp	r0, #0
     3e0:	bne	3f0 <flatcc_verify_table_field+0x2c>
     3e4:	ldr	r3, [sp, #4]
     3e8:	cmp	r3, #0
     3ec:	bne	3f8 <flatcc_verify_table_field+0x34>
     3f0:	add	sp, sp, #36	; 0x24
     3f4:	pop	{r4, r5, pc}
     3f8:	ldr	r2, [r4, #8]
     3fc:	ldr	ip, [r4]
     400:	sub	r2, r2, #1
     404:	cmp	r2, #0
     408:	ldr	r1, [ip, r3]
     40c:	ldr	lr, [r4, #4]
     410:	str	r2, [sp, #16]
     414:	moveq	r0, #3
     418:	beq	3f0 <flatcc_verify_table_field+0x2c>
     41c:	add	r2, r3, r1
     420:	cmp	r3, r2
     424:	bcs	4c0 <flatcc_verify_table_field+0xfc>
     428:	add	r3, r2, #4
     42c:	cmp	lr, r3
     430:	bcc	4c0 <flatcc_verify_table_field+0xfc>
     434:	tst	r2, #3
     438:	bne	4c0 <flatcc_verify_table_field+0xfc>
     43c:	str	r2, [sp, #24]
     440:	ldr	r3, [ip, r2]
     444:	subs	r3, r2, r3
     448:	bmi	4c8 <flatcc_verify_table_field+0x104>
     44c:	tst	r3, #1
     450:	bne	4c8 <flatcc_verify_table_field+0x104>
     454:	add	r1, r3, #2
     458:	cmp	lr, r1
     45c:	movcc	r0, #27
     460:	bcc	3f0 <flatcc_verify_table_field+0x2c>
     464:	ldrh	r0, [ip, r3]
     468:	add	r4, ip, r3
     46c:	add	r3, r0, r3
     470:	cmp	lr, r3
     474:	strh	r0, [sp, #30]
     478:	bcc	4d0 <flatcc_verify_table_field+0x10c>
     47c:	tst	r0, #1
     480:	bne	4d0 <flatcc_verify_table_field+0x10c>
     484:	cmp	r0, #3
     488:	movls	r0, #28
     48c:	bls	3f0 <flatcc_verify_table_field+0x2c>
     490:	ldrh	r3, [ip, r1]
     494:	sub	r2, lr, r2
     498:	cmp	r2, r3
     49c:	strh	r3, [sp, #28]
     4a0:	movcc	r0, #20
     4a4:	bcc	3f0 <flatcc_verify_table_field+0x2c>
     4a8:	add	r0, sp, #8
     4ac:	str	r4, [sp, #20]
     4b0:	str	ip, [sp, #8]
     4b4:	str	lr, [sp, #12]
     4b8:	blx	r5
     4bc:	b	3f0 <flatcc_verify_table_field+0x2c>
     4c0:	mov	r0, #15
     4c4:	b	3f0 <flatcc_verify_table_field+0x2c>
     4c8:	mov	r0, #29
     4cc:	b	3f0 <flatcc_verify_table_field+0x2c>
     4d0:	mov	r0, #30
     4d4:	b	3f0 <flatcc_verify_table_field+0x2c>

000004d8 <flatcc_verify_table_vector_field>:
     4d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4dc:	sub	sp, sp, #44	; 0x2c
     4e0:	mov	r7, r3
     4e4:	add	r3, sp, #12
     4e8:	mov	r4, r0
     4ec:	bl	0 <get_offset_field>
     4f0:	subs	r5, r0, #0
     4f4:	bne	504 <flatcc_verify_table_vector_field+0x2c>
     4f8:	ldr	r3, [sp, #12]
     4fc:	cmp	r3, #0
     500:	bne	510 <flatcc_verify_table_vector_field+0x38>
     504:	mov	r0, r5
     508:	add	sp, sp, #44	; 0x2c
     50c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     510:	ldr	r8, [r4, #8]
     514:	cmp	r8, #0
     518:	ble	574 <flatcc_verify_table_vector_field+0x9c>
     51c:	ldr	sl, [r4]
     520:	ldr	r2, [sl, r3]
     524:	add	r2, r3, r2
     528:	cmp	r3, r2
     52c:	bcs	584 <flatcc_verify_table_vector_field+0xac>
     530:	ldr	fp, [r4, #4]
     534:	add	r4, r2, #4
     538:	cmp	fp, r4
     53c:	bcc	584 <flatcc_verify_table_vector_field+0xac>
     540:	tst	r4, #3
     544:	bne	584 <flatcc_verify_table_vector_field+0xac>
     548:	ldr	r3, [sl, r2]
     54c:	cmn	r3, #-1073741823	; 0xc0000001
     550:	bls	594 <flatcc_verify_table_vector_field+0xbc>
     554:	ldr	r3, [sl, r2]
     558:	cmn	r3, #-1073741823	; 0xc0000001
     55c:	movhi	r5, #25
     560:	bhi	504 <flatcc_verify_table_vector_field+0x2c>
     564:	sub	r4, fp, r4
     568:	cmp	r4, r3, lsl #2
     56c:	movcc	r5, #26
     570:	b	504 <flatcc_verify_table_vector_field+0x2c>
     574:	mov	r5, #3
     578:	mov	r0, r5
     57c:	add	sp, sp, #44	; 0x2c
     580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     584:	mov	r5, #16
     588:	mov	r0, r5
     58c:	add	sp, sp, #44	; 0x2c
     590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     594:	lsl	r9, r3, #2
     598:	sub	r1, fp, r4
     59c:	cmp	r1, r9
     5a0:	bcc	554 <flatcc_verify_table_vector_field+0x7c>
     5a4:	cmp	r3, #0
     5a8:	beq	504 <flatcc_verify_table_vector_field+0x2c>
     5ac:	sub	r8, r8, #2
     5b0:	cmp	r8, #0
     5b4:	ldr	r3, [sl, r4]
     5b8:	add	r1, sl, r4
     5bc:	str	r8, [sp, #24]
     5c0:	beq	574 <flatcc_verify_table_vector_field+0x9c>
     5c4:	add	r3, r4, r3
     5c8:	cmp	r4, r3
     5cc:	bcs	764 <flatcc_verify_table_vector_field+0x28c>
     5d0:	add	r0, r3, #4
     5d4:	cmp	fp, r0
     5d8:	bcc	764 <flatcc_verify_table_vector_field+0x28c>
     5dc:	tst	r3, #3
     5e0:	bne	764 <flatcc_verify_table_vector_field+0x28c>
     5e4:	add	r2, r2, #8
     5e8:	add	r6, sl, r2
     5ec:	add	r9, r4, r9
     5f0:	mov	r2, r1
     5f4:	str	r3, [sp, #32]
     5f8:	ldr	r1, [sl, r3]
     5fc:	subs	r1, r3, r1
     600:	bmi	60c <flatcc_verify_table_vector_field+0x134>
     604:	tst	r1, #1
     608:	beq	6bc <flatcc_verify_table_vector_field+0x1e4>
     60c:	ldr	r3, [r2]
     610:	str	r8, [sp, #24]
     614:	add	r3, r4, r3
     618:	cmp	r3, r4
     61c:	bls	770 <flatcc_verify_table_vector_field+0x298>
     620:	add	r2, r3, #4
     624:	cmp	fp, r2
     628:	bcc	770 <flatcc_verify_table_vector_field+0x298>
     62c:	tst	r3, #3
     630:	bne	770 <flatcc_verify_table_vector_field+0x298>
     634:	str	r3, [sp, #32]
     638:	ldr	r2, [sl, r3]
     63c:	subs	r2, r3, r2
     640:	bmi	778 <flatcc_verify_table_vector_field+0x2a0>
     644:	tst	r2, #1
     648:	bne	778 <flatcc_verify_table_vector_field+0x2a0>
     64c:	add	r0, r2, #2
     650:	cmp	fp, r0
     654:	movcc	r5, #27
     658:	bcc	504 <flatcc_verify_table_vector_field+0x2c>
     65c:	ldrh	r1, [sl, r2]
     660:	add	ip, sl, r2
     664:	add	r2, r1, r2
     668:	cmp	fp, r2
     66c:	strh	r1, [sp, #38]	; 0x26
     670:	bcc	780 <flatcc_verify_table_vector_field+0x2a8>
     674:	tst	r1, #1
     678:	bne	780 <flatcc_verify_table_vector_field+0x2a8>
     67c:	cmp	r1, #3
     680:	movls	r5, #28
     684:	bls	504 <flatcc_verify_table_vector_field+0x2c>
     688:	ldrh	r2, [sl, r0]
     68c:	sub	r3, fp, r3
     690:	cmp	r3, r2
     694:	strh	r2, [sp, #36]	; 0x24
     698:	movcc	r5, #20
     69c:	bcc	504 <flatcc_verify_table_vector_field+0x2c>
     6a0:	add	r0, sp, #16
     6a4:	str	ip, [sp, #28]
     6a8:	str	sl, [sp, #16]
     6ac:	str	fp, [sp, #20]
     6b0:	blx	r7
     6b4:	mov	r5, r0
     6b8:	b	504 <flatcc_verify_table_vector_field+0x2c>
     6bc:	add	r0, r1, #2
     6c0:	cmp	fp, r0
     6c4:	bcc	60c <flatcc_verify_table_vector_field+0x134>
     6c8:	ldrh	lr, [sl, r1]
     6cc:	add	ip, sl, r1
     6d0:	add	r1, lr, r1
     6d4:	cmp	fp, r1
     6d8:	strh	lr, [sp, #38]	; 0x26
     6dc:	bcc	60c <flatcc_verify_table_vector_field+0x134>
     6e0:	tst	lr, #1
     6e4:	bne	60c <flatcc_verify_table_vector_field+0x134>
     6e8:	cmp	lr, #3
     6ec:	bls	60c <flatcc_verify_table_vector_field+0x134>
     6f0:	ldrh	r1, [sl, r0]
     6f4:	sub	r3, fp, r3
     6f8:	cmp	r3, r1
     6fc:	strh	r1, [sp, #36]	; 0x24
     700:	bcc	60c <flatcc_verify_table_vector_field+0x134>
     704:	add	r0, sp, #16
     708:	str	r2, [sp, #4]
     70c:	str	ip, [sp, #28]
     710:	str	sl, [sp, #16]
     714:	str	fp, [sp, #20]
     718:	blx	r7
     71c:	ldr	r2, [sp, #4]
     720:	cmp	r0, #0
     724:	bne	60c <flatcc_verify_table_vector_field+0x134>
     728:	add	r4, r4, #4
     72c:	cmp	r4, r9
     730:	beq	504 <flatcc_verify_table_vector_field+0x2c>
     734:	mov	r1, r6
     738:	ldr	r3, [r6], #4
     73c:	str	r8, [sp, #24]
     740:	add	r3, r3, r4
     744:	cmp	r4, r3
     748:	bcs	764 <flatcc_verify_table_vector_field+0x28c>
     74c:	add	r0, r3, #4
     750:	cmp	fp, r0
     754:	bcc	764 <flatcc_verify_table_vector_field+0x28c>
     758:	tst	r3, #3
     75c:	add	r2, r2, #4
     760:	beq	5f4 <flatcc_verify_table_vector_field+0x11c>
     764:	ldr	r3, [r1]
     768:	str	r8, [sp, #24]
     76c:	b	614 <flatcc_verify_table_vector_field+0x13c>
     770:	mov	r5, #15
     774:	b	504 <flatcc_verify_table_vector_field+0x2c>
     778:	mov	r5, #29
     77c:	b	504 <flatcc_verify_table_vector_field+0x2c>
     780:	mov	r5, #30
     784:	b	504 <flatcc_verify_table_vector_field+0x2c>

00000788 <flatcc_verify_union_table>:
     788:	ldr	r3, [r0, #8]
     78c:	push	{r4, r5, lr}
     790:	sub	r3, r3, #1
     794:	sub	sp, sp, #28
     798:	cmp	r3, #0
     79c:	ldr	lr, [r0]
     7a0:	str	r3, [sp, #8]
     7a4:	ldr	ip, [r0, #4]
     7a8:	ldr	r2, [r0, #16]
     7ac:	ldr	r3, [r0, #20]
     7b0:	moveq	r0, #3
     7b4:	bne	7c0 <flatcc_verify_union_table+0x38>
     7b8:	add	sp, sp, #28
     7bc:	pop	{r4, r5, pc}
     7c0:	add	r3, r2, r3
     7c4:	cmp	r2, r3
     7c8:	bcs	864 <flatcc_verify_union_table+0xdc>
     7cc:	add	r2, r3, #4
     7d0:	cmp	ip, r2
     7d4:	bcc	864 <flatcc_verify_union_table+0xdc>
     7d8:	tst	r3, #3
     7dc:	bne	864 <flatcc_verify_union_table+0xdc>
     7e0:	str	r3, [sp, #16]
     7e4:	ldr	r2, [lr, r3]
     7e8:	subs	r2, r3, r2
     7ec:	bmi	870 <flatcc_verify_union_table+0xe8>
     7f0:	tst	r2, #1
     7f4:	bne	870 <flatcc_verify_union_table+0xe8>
     7f8:	add	r0, r2, #2
     7fc:	cmp	ip, r0
     800:	movcc	r0, #27
     804:	bcc	7b8 <flatcc_verify_union_table+0x30>
     808:	ldrh	r4, [lr, r2]
     80c:	add	r5, lr, r2
     810:	add	r2, r4, r2
     814:	cmp	ip, r2
     818:	strh	r4, [sp, #22]
     81c:	bcc	878 <flatcc_verify_union_table+0xf0>
     820:	tst	r4, #1
     824:	bne	878 <flatcc_verify_union_table+0xf0>
     828:	cmp	r4, #3
     82c:	movls	r0, #28
     830:	bls	7b8 <flatcc_verify_union_table+0x30>
     834:	ldrh	r2, [lr, r0]
     838:	sub	r3, ip, r3
     83c:	cmp	r3, r2
     840:	strh	r2, [sp, #20]
     844:	movcc	r0, #20
     848:	bcc	7b8 <flatcc_verify_union_table+0x30>
     84c:	mov	r0, sp
     850:	str	r5, [sp, #12]
     854:	str	lr, [sp]
     858:	str	ip, [sp, #4]
     85c:	blx	r1
     860:	b	7b8 <flatcc_verify_union_table+0x30>
     864:	mov	r0, #15
     868:	add	sp, sp, #28
     86c:	pop	{r4, r5, pc}
     870:	mov	r0, #29
     874:	b	7b8 <flatcc_verify_union_table+0x30>
     878:	mov	r0, #30
     87c:	b	7b8 <flatcc_verify_union_table+0x30>

00000880 <flatcc_verify_union_struct>:
     880:	ldr	r3, [r0, #20]
     884:	ldr	ip, [r0, #4]
     888:	cmp	r3, #0
     88c:	ldr	r0, [r0, #16]
     890:	bne	89c <flatcc_verify_union_struct+0x1c>
     894:	mov	r0, #18
     898:	bx	lr
     89c:	add	r3, r0, r3
     8a0:	cmp	ip, r3
     8a4:	bcc	894 <flatcc_verify_union_struct+0x14>
     8a8:	adds	r1, r1, r3
     8ac:	bcc	8b8 <flatcc_verify_union_struct+0x38>
     8b0:	mov	r0, #10
     8b4:	bx	lr
     8b8:	cmp	ip, r1
     8bc:	bcs	8c8 <flatcc_verify_union_struct+0x48>
     8c0:	mov	r0, #9
     8c4:	bx	lr
     8c8:	sub	r2, r2, #1
     8cc:	tst	r2, r3
     8d0:	movne	r0, #11
     8d4:	moveq	r0, #0
     8d8:	bx	lr

000008dc <flatcc_verify_union_string>:
     8dc:	ldr	r2, [r0, #16]
     8e0:	ldr	r3, [r0, #20]
     8e4:	add	r3, r2, r3
     8e8:	cmp	r2, r3
     8ec:	bcs	928 <flatcc_verify_union_string+0x4c>
     8f0:	ldr	r2, [r0, #4]
     8f4:	add	r1, r3, #4
     8f8:	cmp	r2, r1
     8fc:	bcc	928 <flatcc_verify_union_string+0x4c>
     900:	tst	r3, #3
     904:	bne	928 <flatcc_verify_union_string+0x4c>
     908:	ldr	r0, [r0]
     90c:	sub	r2, r2, r1
     910:	ldr	r3, [r0, r3]
     914:	add	ip, r3, #1
     918:	cmp	r2, ip
     91c:	bcs	930 <flatcc_verify_union_string+0x54>
     920:	mov	r0, #8
     924:	bx	lr
     928:	mov	r0, #17
     92c:	bx	lr
     930:	add	r1, r0, r1
     934:	ldrb	r0, [r1, r3]
     938:	cmp	r0, #0
     93c:	movne	r0, #7
     940:	moveq	r0, #0
     944:	bx	lr

00000948 <flatcc_verify_buffer_header>:
     948:	ands	r3, r0, #3
     94c:	beq	958 <flatcc_verify_buffer_header+0x10>
     950:	mov	r0, #5
     954:	bx	lr
     958:	cmn	r1, #9
     95c:	bls	968 <flatcc_verify_buffer_header+0x20>
     960:	mov	r0, #6
     964:	bx	lr
     968:	cmp	r1, #7
     96c:	bls	9b8 <flatcc_verify_buffer_header+0x70>
     970:	cmp	r2, #0
     974:	beq	9c0 <flatcc_verify_buffer_header+0x78>
     978:	push	{r4, lr}
     97c:	sub	sp, sp, #8
     980:	mov	r4, r0
     984:	add	r0, sp, #8
     988:	mov	r1, r2
     98c:	str	r3, [r0, #-4]!
     990:	mov	r2, #4
     994:	bl	0 <strncpy>
     998:	ldr	r2, [r4, #4]
     99c:	ldr	r3, [sp, #4]
     9a0:	cmp	r3, #0
     9a4:	cmpne	r2, r3
     9a8:	moveq	r0, #0
     9ac:	movne	r0, #2
     9b0:	add	sp, sp, #8
     9b4:	pop	{r4, pc}
     9b8:	mov	r0, #1
     9bc:	bx	lr
     9c0:	mov	r0, #0
     9c4:	bx	lr

000009c8 <flatcc_verify_typed_buffer_header>:
     9c8:	tst	r0, #3
     9cc:	beq	9d8 <flatcc_verify_typed_buffer_header+0x10>
     9d0:	mov	r0, #5
     9d4:	bx	lr
     9d8:	cmn	r1, #9
     9dc:	bls	9e8 <flatcc_verify_typed_buffer_header+0x20>
     9e0:	mov	r0, #6
     9e4:	bx	lr
     9e8:	cmp	r1, #7
     9ec:	bls	9f8 <flatcc_verify_typed_buffer_header+0x30>
     9f0:	mov	r1, r2
     9f4:	b	78 <flatcc_verify_typed_buffer_header.part.3>
     9f8:	mov	r0, #1
     9fc:	bx	lr

00000a00 <flatcc_verify_struct_as_root>:
     a00:	push	{r4, r5, r6, r7, r8, lr}
     a04:	mov	r6, r3
     a08:	mov	r5, r0
     a0c:	mov	r4, r1
     a10:	mov	r8, r2
     a14:	ldrh	r7, [sp, #24]
     a18:	bl	948 <flatcc_verify_buffer_header>
     a1c:	cmp	r0, #0
     a20:	bne	a4c <flatcc_verify_struct_as_root+0x4c>
     a24:	ldr	r2, [r5]
     a28:	cmp	r4, r2
     a2c:	movcs	r3, #0
     a30:	movcc	r3, #1
     a34:	cmp	r2, #0
     a38:	orreq	r3, r3, #1
     a3c:	cmp	r3, #0
     a40:	beq	a60 <flatcc_verify_struct_as_root+0x60>
     a44:	mov	r0, #18
     a48:	pop	{r4, r5, r6, r7, r8, pc}
     a4c:	mov	r2, r8
     a50:	mov	r1, r4
     a54:	mov	r0, r5
     a58:	pop	{r4, r5, r6, r7, r8, lr}
     a5c:	b	948 <flatcc_verify_buffer_header>
     a60:	adds	r6, r6, r2
     a64:	bcc	a70 <flatcc_verify_struct_as_root+0x70>
     a68:	mov	r0, #10
     a6c:	pop	{r4, r5, r6, r7, r8, pc}
     a70:	cmp	r4, r6
     a74:	bcs	a80 <flatcc_verify_struct_as_root+0x80>
     a78:	mov	r0, #9
     a7c:	pop	{r4, r5, r6, r7, r8, pc}
     a80:	sub	r7, r7, #1
     a84:	tst	r7, r2
     a88:	movne	r0, #11
     a8c:	pop	{r4, r5, r6, r7, r8, pc}

00000a90 <flatcc_verify_struct_as_typed_root>:
     a90:	cmn	r1, #9
     a94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
     a98:	mov	r7, r1
     a9c:	movls	r5, #0
     aa0:	movhi	r5, #1
     aa4:	ands	r1, r0, #3
     aa8:	movne	r1, #1
     aac:	orr	r5, r5, r1
     ab0:	cmp	r7, #7
     ab4:	movhi	r6, r5
     ab8:	orrls	r6, r5, #1
     abc:	cmp	r6, #0
     ac0:	mov	r4, r0
     ac4:	and	r9, r0, #3
     ac8:	ldrh	r8, [sp, #32]
     acc:	bne	b04 <flatcc_verify_struct_as_typed_root+0x74>
     ad0:	mov	r1, r2
     ad4:	bl	78 <flatcc_verify_typed_buffer_header.part.3>
     ad8:	cmp	r0, #0
     adc:	bne	b04 <flatcc_verify_struct_as_typed_root+0x74>
     ae0:	ldr	r1, [r4]
     ae4:	clz	r2, r1
     ae8:	lsr	r2, r2, #5
     aec:	cmp	r7, r1
     af0:	orrcc	r2, r2, #1
     af4:	cmp	r2, #0
     af8:	beq	b24 <flatcc_verify_struct_as_typed_root+0x94>
     afc:	mov	r0, #18
     b00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     b04:	cmp	r9, #0
     b08:	beq	b14 <flatcc_verify_struct_as_typed_root+0x84>
     b0c:	mov	r0, #5
     b10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     b14:	cmp	r5, #0
     b18:	beq	b34 <flatcc_verify_struct_as_typed_root+0xa4>
     b1c:	mov	r0, #6
     b20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     b24:	adds	r3, r3, r1
     b28:	bcc	b54 <flatcc_verify_struct_as_typed_root+0xc4>
     b2c:	mov	r0, #10
     b30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     b34:	cmp	r6, #0
     b38:	beq	b44 <flatcc_verify_struct_as_typed_root+0xb4>
     b3c:	mov	r0, #1
     b40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     b44:	mov	r0, r4
     b48:	mov	r1, r2
     b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
     b50:	b	78 <flatcc_verify_typed_buffer_header.part.3>
     b54:	cmp	r7, r3
     b58:	bcs	b64 <flatcc_verify_struct_as_typed_root+0xd4>
     b5c:	mov	r0, #9
     b60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     b64:	sub	r8, r8, #1
     b68:	tst	r8, r1
     b6c:	movne	r0, #11
     b70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00000b74 <flatcc_verify_table_as_root>:
     b74:	push	{r4, r5, r6, r7, lr}
     b78:	sub	sp, sp, #28
     b7c:	mov	r7, r3
     b80:	mov	r4, r0
     b84:	mov	r5, r1
     b88:	mov	r6, r2
     b8c:	bl	948 <flatcc_verify_buffer_header>
     b90:	cmp	r0, #0
     b94:	bne	bcc <flatcc_verify_table_as_root+0x58>
     b98:	ldr	r3, [r4]
     b9c:	mov	r2, #99	; 0x63
     ba0:	cmp	r3, #0
     ba4:	str	r2, [sp, #8]
     ba8:	beq	bc0 <flatcc_verify_table_as_root+0x4c>
     bac:	add	r2, r3, #4
     bb0:	cmp	r5, r2
     bb4:	bcc	bc0 <flatcc_verify_table_as_root+0x4c>
     bb8:	tst	r3, #3
     bbc:	beq	be4 <flatcc_verify_table_as_root+0x70>
     bc0:	mov	r0, #15
     bc4:	add	sp, sp, #28
     bc8:	pop	{r4, r5, r6, r7, pc}
     bcc:	mov	r2, r6
     bd0:	mov	r1, r5
     bd4:	mov	r0, r4
     bd8:	bl	948 <flatcc_verify_buffer_header>
     bdc:	add	sp, sp, #28
     be0:	pop	{r4, r5, r6, r7, pc}
     be4:	ldr	r2, [r4, r3]
     be8:	str	r3, [sp, #16]
     bec:	subs	r2, r3, r2
     bf0:	bmi	c64 <flatcc_verify_table_as_root+0xf0>
     bf4:	tst	r2, #1
     bf8:	bne	c64 <flatcc_verify_table_as_root+0xf0>
     bfc:	add	r1, r2, #2
     c00:	cmp	r5, r1
     c04:	movcc	r0, #27
     c08:	bcc	bc4 <flatcc_verify_table_as_root+0x50>
     c0c:	ldrh	r0, [r4, r2]
     c10:	add	ip, r4, r2
     c14:	add	r2, r0, r2
     c18:	cmp	r5, r2
     c1c:	strh	r0, [sp, #22]
     c20:	bcc	c6c <flatcc_verify_table_as_root+0xf8>
     c24:	tst	r0, #1
     c28:	bne	c6c <flatcc_verify_table_as_root+0xf8>
     c2c:	cmp	r0, #3
     c30:	movls	r0, #28
     c34:	bls	bc4 <flatcc_verify_table_as_root+0x50>
     c38:	ldrh	r2, [r4, r1]
     c3c:	sub	r3, r5, r3
     c40:	cmp	r3, r2
     c44:	strh	r2, [sp, #20]
     c48:	movcc	r0, #20
     c4c:	bcc	bc4 <flatcc_verify_table_as_root+0x50>
     c50:	mov	r0, sp
     c54:	str	ip, [sp, #12]
     c58:	stm	sp, {r4, r5}
     c5c:	blx	r7
     c60:	b	bc4 <flatcc_verify_table_as_root+0x50>
     c64:	mov	r0, #29
     c68:	b	bc4 <flatcc_verify_table_as_root+0x50>
     c6c:	mov	r0, #30
     c70:	b	bc4 <flatcc_verify_table_as_root+0x50>

00000c74 <flatcc_verify_table_as_typed_root>:
     c74:	cmn	r1, #9
     c78:	push	{r4, r5, r6, r7, lr}
     c7c:	mov	r6, r1
     c80:	movls	r5, #0
     c84:	movhi	r5, #1
     c88:	ands	r1, r0, #3
     c8c:	movne	r1, #1
     c90:	orr	r5, r5, r1
     c94:	cmp	r6, #7
     c98:	movhi	r1, r5
     c9c:	orrls	r1, r5, #1
     ca0:	cmp	r1, #0
     ca4:	sub	sp, sp, #28
     ca8:	mov	r4, r0
     cac:	and	r7, r0, #3
     cb0:	bne	d70 <flatcc_verify_table_as_typed_root+0xfc>
     cb4:	mov	r1, r2
     cb8:	bl	78 <flatcc_verify_typed_buffer_header.part.3>
     cbc:	cmp	r0, #0
     cc0:	bne	d70 <flatcc_verify_table_as_typed_root+0xfc>
     cc4:	ldr	r2, [r4]
     cc8:	mov	r1, #99	; 0x63
     ccc:	cmp	r2, #0
     cd0:	str	r1, [sp, #8]
     cd4:	beq	da4 <flatcc_verify_table_as_typed_root+0x130>
     cd8:	add	r1, r2, #4
     cdc:	cmp	r6, r1
     ce0:	bcc	da4 <flatcc_verify_table_as_typed_root+0x130>
     ce4:	tst	r2, #3
     ce8:	bne	da4 <flatcc_verify_table_as_typed_root+0x130>
     cec:	ldr	r1, [r4, r2]
     cf0:	str	r2, [sp, #16]
     cf4:	subs	r1, r2, r1
     cf8:	bmi	db0 <flatcc_verify_table_as_typed_root+0x13c>
     cfc:	tst	r1, #1
     d00:	bne	db0 <flatcc_verify_table_as_typed_root+0x13c>
     d04:	add	r0, r1, #2
     d08:	cmp	r6, r0
     d0c:	movcc	r0, #27
     d10:	bcc	d68 <flatcc_verify_table_as_typed_root+0xf4>
     d14:	ldrh	ip, [r4, r1]
     d18:	add	lr, r4, r1
     d1c:	add	r1, ip, r1
     d20:	cmp	r6, r1
     d24:	strh	ip, [sp, #22]
     d28:	bcc	db8 <flatcc_verify_table_as_typed_root+0x144>
     d2c:	tst	ip, #1
     d30:	bne	db8 <flatcc_verify_table_as_typed_root+0x144>
     d34:	cmp	ip, #3
     d38:	movls	r0, #28
     d3c:	bls	d68 <flatcc_verify_table_as_typed_root+0xf4>
     d40:	ldrh	r1, [r4, r0]
     d44:	sub	r2, r6, r2
     d48:	cmp	r2, r1
     d4c:	strh	r1, [sp, #20]
     d50:	movcc	r0, #20
     d54:	bcc	d68 <flatcc_verify_table_as_typed_root+0xf4>
     d58:	mov	r0, sp
     d5c:	str	lr, [sp, #12]
     d60:	stm	sp, {r4, r6}
     d64:	blx	r3
     d68:	add	sp, sp, #28
     d6c:	pop	{r4, r5, r6, r7, pc}
     d70:	cmp	r7, #0
     d74:	movne	r0, #5
     d78:	bne	d68 <flatcc_verify_table_as_typed_root+0xf4>
     d7c:	cmp	r5, #0
     d80:	movne	r0, #6
     d84:	bne	d68 <flatcc_verify_table_as_typed_root+0xf4>
     d88:	cmp	r6, #7
     d8c:	movls	r0, #1
     d90:	bls	d68 <flatcc_verify_table_as_typed_root+0xf4>
     d94:	mov	r1, r2
     d98:	mov	r0, r4
     d9c:	bl	78 <flatcc_verify_typed_buffer_header.part.3>
     da0:	b	d68 <flatcc_verify_table_as_typed_root+0xf4>
     da4:	mov	r0, #15
     da8:	add	sp, sp, #28
     dac:	pop	{r4, r5, r6, r7, pc}
     db0:	mov	r0, #29
     db4:	b	d68 <flatcc_verify_table_as_typed_root+0xf4>
     db8:	mov	r0, #30
     dbc:	b	d68 <flatcc_verify_table_as_typed_root+0xf4>

00000dc0 <flatcc_verify_struct_as_nested_root>:
     dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dc4:	sub	sp, sp, #12
     dc8:	mvn	sl, #0
     dcc:	ldrh	r6, [sp, #52]	; 0x34
     dd0:	mov	r9, #1
     dd4:	mov	r7, r3
     dd8:	str	sl, [sp, #4]
     ddc:	mov	r3, r6
     de0:	str	r9, [sp]
     de4:	mov	r5, r0
     de8:	mov	r4, r1
     dec:	mov	fp, r2
     df0:	ldr	r8, [sp, #48]	; 0x30
     df4:	bl	1bc <flatcc_verify_vector_field>
     df8:	cmp	r0, #0
     dfc:	bne	e64 <flatcc_verify_struct_as_nested_root+0xa4>
     e00:	add	r4, r4, #2
     e04:	ldrh	r3, [r5, #22]
     e08:	lsl	r4, r4, #1
     e0c:	uxth	r4, r4
     e10:	cmp	r3, r4
     e14:	bls	e88 <flatcc_verify_struct_as_nested_root+0xc8>
     e18:	ldr	r3, [r5, #12]
     e1c:	ldrh	r3, [r3, r4]
     e20:	cmp	r3, #0
     e24:	beq	e88 <flatcc_verify_struct_as_nested_root+0xc8>
     e28:	ldr	r1, [r5, #16]
     e2c:	ldr	r2, [r5]
     e30:	add	r3, r3, r1
     e34:	adds	r1, r2, r3
     e38:	beq	e88 <flatcc_verify_struct_as_nested_root+0xc8>
     e3c:	ldr	r2, [r2, r3]
     e40:	mov	r3, r8
     e44:	add	r0, r1, r2
     e48:	add	r0, r0, #4
     e4c:	ldr	r1, [r1, r2]
     e50:	mov	r2, r7
     e54:	str	r6, [sp, #48]	; 0x30
     e58:	add	sp, sp, #12
     e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e60:	b	a00 <flatcc_verify_struct_as_root>
     e64:	str	sl, [sp, #52]	; 0x34
     e68:	str	r9, [sp, #48]	; 0x30
     e6c:	mov	r3, r6
     e70:	mov	r2, fp
     e74:	mov	r1, r4
     e78:	mov	r0, r5
     e7c:	add	sp, sp, #12
     e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e84:	b	1bc <flatcc_verify_vector_field>
     e88:	add	sp, sp, #12
     e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000e90 <flatcc_verify_table_as_nested_root>:
     e90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
     e94:	sub	sp, sp, #32
     e98:	mvn	r9, #0
     e9c:	ldrh	r7, [sp, #64]	; 0x40
     ea0:	mov	r8, #1
     ea4:	mov	r6, r3
     ea8:	str	r9, [sp, #4]
     eac:	mov	r3, r7
     eb0:	str	r8, [sp]
     eb4:	mov	r5, r0
     eb8:	mov	r4, r1
     ebc:	mov	sl, r2
     ec0:	bl	1bc <flatcc_verify_vector_field>
     ec4:	cmp	r0, #0
     ec8:	bne	f6c <flatcc_verify_table_as_nested_root+0xdc>
     ecc:	add	r4, r4, #2
     ed0:	ldrh	r3, [r5, #22]
     ed4:	lsl	r4, r4, #1
     ed8:	uxth	r4, r4
     edc:	cmp	r3, r4
     ee0:	bls	f4c <flatcc_verify_table_as_nested_root+0xbc>
     ee4:	ldr	r3, [r5, #12]
     ee8:	ldrh	r3, [r3, r4]
     eec:	cmp	r3, #0
     ef0:	beq	f4c <flatcc_verify_table_as_nested_root+0xbc>
     ef4:	ldr	r1, [r5, #16]
     ef8:	ldr	r2, [r5]
     efc:	add	r3, r3, r1
     f00:	adds	r1, r2, r3
     f04:	beq	f4c <flatcc_verify_table_as_nested_root+0xbc>
     f08:	ldr	r3, [r2, r3]
     f0c:	mov	r2, r6
     f10:	add	r4, r1, r3
     f14:	ldr	r7, [r1, r3]
     f18:	add	r8, r4, #4
     f1c:	mov	r0, r8
     f20:	mov	r1, r7
     f24:	bl	948 <flatcc_verify_buffer_header>
     f28:	cmp	r0, #0
     f2c:	bne	f54 <flatcc_verify_table_as_nested_root+0xc4>
     f30:	ldr	r3, [r5, #8]
     f34:	ldr	r2, [r4, #4]
     f38:	sub	r3, r3, #1
     f3c:	cmp	r3, #0
     f40:	str	r3, [sp, #16]
     f44:	moveq	r0, #3
     f48:	bne	f8c <flatcc_verify_table_as_nested_root+0xfc>
     f4c:	add	sp, sp, #32
     f50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f54:	mov	r2, r6
     f58:	mov	r1, r7
     f5c:	mov	r0, r8
     f60:	bl	948 <flatcc_verify_buffer_header>
     f64:	add	sp, sp, #32
     f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f6c:	stm	sp, {r8, r9}
     f70:	mov	r3, r7
     f74:	mov	r2, sl
     f78:	mov	r1, r4
     f7c:	mov	r0, r5
     f80:	bl	1bc <flatcc_verify_vector_field>
     f84:	add	sp, sp, #32
     f88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f8c:	cmp	r2, #0
     f90:	beq	1030 <flatcc_verify_table_as_nested_root+0x1a0>
     f94:	add	r3, r2, #4
     f98:	cmp	r7, r3
     f9c:	bcc	1030 <flatcc_verify_table_as_nested_root+0x1a0>
     fa0:	tst	r2, #3
     fa4:	bne	1030 <flatcc_verify_table_as_nested_root+0x1a0>
     fa8:	str	r2, [sp, #24]
     fac:	ldr	r3, [r8, r2]
     fb0:	subs	r3, r2, r3
     fb4:	bmi	103c <flatcc_verify_table_as_nested_root+0x1ac>
     fb8:	tst	r3, #1
     fbc:	bne	103c <flatcc_verify_table_as_nested_root+0x1ac>
     fc0:	add	r1, r3, #2
     fc4:	cmp	r7, r1
     fc8:	movcc	r0, #27
     fcc:	bcc	f4c <flatcc_verify_table_as_nested_root+0xbc>
     fd0:	ldrh	r0, [r8, r3]
     fd4:	add	ip, r8, r3
     fd8:	add	r3, r0, r3
     fdc:	cmp	r7, r3
     fe0:	strh	r0, [sp, #30]
     fe4:	bcc	1044 <flatcc_verify_table_as_nested_root+0x1b4>
     fe8:	tst	r0, #1
     fec:	bne	1044 <flatcc_verify_table_as_nested_root+0x1b4>
     ff0:	cmp	r0, #3
     ff4:	movls	r0, #28
     ff8:	bls	f4c <flatcc_verify_table_as_nested_root+0xbc>
     ffc:	ldrh	r3, [r8, r1]
    1000:	sub	r2, r7, r2
    1004:	cmp	r2, r3
    1008:	strh	r3, [sp, #28]
    100c:	movcc	r0, #20
    1010:	bcc	f4c <flatcc_verify_table_as_nested_root+0xbc>
    1014:	add	r0, sp, #8
    1018:	ldr	r3, [sp, #68]	; 0x44
    101c:	str	ip, [sp, #20]
    1020:	str	r8, [sp, #8]
    1024:	str	r7, [sp, #12]
    1028:	blx	r3
    102c:	b	f4c <flatcc_verify_table_as_nested_root+0xbc>
    1030:	mov	r0, #15
    1034:	add	sp, sp, #32
    1038:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    103c:	mov	r0, #29
    1040:	b	f4c <flatcc_verify_table_as_nested_root+0xbc>
    1044:	mov	r0, #30
    1048:	b	f4c <flatcc_verify_table_as_nested_root+0xbc>

0000104c <flatcc_verify_union_field>:
    104c:	sub	ip, r1, #1
    1050:	push	{r4, r5, r6, lr}
    1054:	uxth	ip, ip
    1058:	add	ip, ip, #2
    105c:	ldrh	lr, [r0, #22]
    1060:	lsl	ip, ip, #1
    1064:	sub	sp, sp, #32
    1068:	uxth	ip, ip
    106c:	cmp	ip, lr
    1070:	ldr	r5, [r0, #12]
    1074:	bcs	10a0 <flatcc_verify_union_field+0x54>
    1078:	ldrh	ip, [r5, ip]
    107c:	cmp	ip, #0
    1080:	beq	10a0 <flatcc_verify_union_field+0x54>
    1084:	ldrh	r4, [r0, #20]
    1088:	add	r6, ip, #1
    108c:	cmp	r6, r4
    1090:	movhi	r0, #13
    1094:	bls	10e4 <flatcc_verify_union_field+0x98>
    1098:	add	sp, sp, #32
    109c:	pop	{r4, r5, r6, pc}
    10a0:	add	r1, r1, #2
    10a4:	lsl	r1, r1, #1
    10a8:	uxth	r1, r1
    10ac:	cmp	lr, r1
    10b0:	bhi	10cc <flatcc_verify_union_field+0x80>
    10b4:	cmp	r2, #0
    10b8:	movne	r0, #21
    10bc:	bne	1098 <flatcc_verify_union_field+0x4c>
    10c0:	mov	r0, #0
    10c4:	add	sp, sp, #32
    10c8:	pop	{r4, r5, r6, pc}
    10cc:	ldrh	r3, [r5, r1]
    10d0:	cmp	r3, #0
    10d4:	movne	r0, #23
    10d8:	beq	10b4 <flatcc_verify_union_field+0x68>
    10dc:	add	sp, sp, #32
    10e0:	pop	{r4, r5, r6, pc}
    10e4:	add	r4, r1, #2
    10e8:	ldr	r6, [r0]
    10ec:	lsl	r4, r4, #1
    10f0:	uxth	r4, r4
    10f4:	cmp	lr, r4
    10f8:	bhi	116c <flatcc_verify_union_field+0x120>
    10fc:	ldr	lr, [r0, #16]
    1100:	add	ip, ip, lr
    1104:	add	r4, r6, ip
    1108:	ldrb	ip, [r6, ip]
    110c:	cmp	ip, #0
    1110:	beq	10c0 <flatcc_verify_union_field+0x74>
    1114:	mov	r6, r3
    1118:	add	r3, sp, #4
    111c:	mov	r5, r0
    1120:	bl	0 <get_offset_field>
    1124:	cmp	r0, #0
    1128:	bne	1098 <flatcc_verify_union_field+0x4c>
    112c:	ldr	r3, [sp, #4]
    1130:	cmp	r3, #0
    1134:	beq	10c0 <flatcc_verify_union_field+0x74>
    1138:	ldmib	r5, {r0, r1}
    113c:	ldr	r2, [r5]
    1140:	str	r3, [sp, #24]
    1144:	str	r0, [sp, #12]
    1148:	str	r1, [sp, #16]
    114c:	ldr	r3, [r2, r3]
    1150:	str	r2, [sp, #8]
    1154:	str	r3, [sp, #28]
    1158:	ldrb	r3, [r4]
    115c:	add	r0, sp, #8
    1160:	strb	r3, [sp, #20]
    1164:	blx	r6
    1168:	b	1098 <flatcc_verify_union_field+0x4c>
    116c:	ldr	lr, [r0, #16]
    1170:	ldrh	r5, [r5, r4]
    1174:	add	ip, ip, lr
    1178:	add	r4, r6, ip
    117c:	ldrb	ip, [r6, ip]
    1180:	adds	lr, ip, #0
    1184:	movne	lr, #1
    1188:	cmp	r5, #0
    118c:	orreq	lr, lr, #1
    1190:	cmp	lr, #0
    1194:	bne	110c <flatcc_verify_union_field+0xc0>
    1198:	mov	r0, #24
    119c:	add	sp, sp, #32
    11a0:	pop	{r4, r5, r6, pc}

000011a4 <flatcc_verify_union_vector_field>:
    11a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11a8:	sub	r6, r1, #1
    11ac:	ldrh	lr, [r0, #22]
    11b0:	uxth	r6, r6
    11b4:	add	r5, r6, #2
    11b8:	sub	sp, sp, #52	; 0x34
    11bc:	lsl	r5, r5, #1
    11c0:	ldr	r4, [r0, #12]
    11c4:	uxth	r5, r5
    11c8:	cmp	r5, lr
    11cc:	bcs	127c <flatcc_verify_union_vector_field+0xd8>
    11d0:	ldrh	ip, [r4, r5]
    11d4:	cmp	ip, #0
    11d8:	beq	127c <flatcc_verify_union_vector_field+0xd8>
    11dc:	mov	r9, #1
    11e0:	mvn	fp, #0
    11e4:	str	r3, [sp, #12]
    11e8:	mov	r7, r1
    11ec:	stm	sp, {r9, fp}
    11f0:	mov	r3, r9
    11f4:	mov	r1, r6
    11f8:	mov	r8, r2
    11fc:	mov	r4, r0
    1200:	bl	1bc <flatcc_verify_vector_field>
    1204:	subs	sl, r0, #0
    1208:	bne	1334 <flatcc_verify_union_vector_field+0x190>
    120c:	ldrh	r3, [r4, #22]
    1210:	cmp	r3, r5
    1214:	bls	1270 <flatcc_verify_union_vector_field+0xcc>
    1218:	ldr	r3, [r4, #12]
    121c:	ldrh	r3, [r3, r5]
    1220:	cmp	r3, #0
    1224:	beq	1270 <flatcc_verify_union_vector_field+0xcc>
    1228:	ldr	r1, [r4, #16]
    122c:	ldr	r2, [r4]
    1230:	add	r3, r3, r1
    1234:	adds	lr, r2, r3
    1238:	beq	1270 <flatcc_verify_union_vector_field+0xcc>
    123c:	ldr	ip, [r2, r3]
    1240:	mov	r1, r7
    1244:	mov	r2, r8
    1248:	add	r3, sp, #20
    124c:	mov	r0, r4
    1250:	add	r5, lr, ip
    1254:	ldr	r7, [lr, ip]
    1258:	bl	0 <get_offset_field>
    125c:	subs	r6, r0, #0
    1260:	bne	131c <flatcc_verify_union_vector_field+0x178>
    1264:	ldr	r3, [sp, #20]
    1268:	cmp	r3, #0
    126c:	bne	12b8 <flatcc_verify_union_vector_field+0x114>
    1270:	mov	r0, sl
    1274:	add	sp, sp, #52	; 0x34
    1278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    127c:	add	ip, r1, #2
    1280:	lsl	ip, ip, #1
    1284:	uxth	ip, ip
    1288:	cmp	lr, ip
    128c:	bhi	12a8 <flatcc_verify_union_vector_field+0x104>
    1290:	cmp	r2, #0
    1294:	movne	sl, #22
    1298:	beq	11dc <flatcc_verify_union_vector_field+0x38>
    129c:	mov	r0, sl
    12a0:	add	sp, sp, #52	; 0x34
    12a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12a8:	ldrh	ip, [r4, ip]
    12ac:	cmp	ip, #0
    12b0:	bne	11dc <flatcc_verify_union_vector_field+0x38>
    12b4:	b	1290 <flatcc_verify_union_vector_field+0xec>
    12b8:	ldr	r0, [r4, #8]
    12bc:	cmp	r0, #0
    12c0:	movle	sl, #3
    12c4:	ble	1270 <flatcc_verify_union_vector_field+0xcc>
    12c8:	ldr	r8, [r4]
    12cc:	ldr	r2, [r8, r3]
    12d0:	add	r2, r3, r2
    12d4:	cmp	r3, r2
    12d8:	bcs	132c <flatcc_verify_union_vector_field+0x188>
    12dc:	ldr	lr, [r4, #4]
    12e0:	add	r4, r2, #4
    12e4:	cmp	lr, r4
    12e8:	bcc	132c <flatcc_verify_union_vector_field+0x188>
    12ec:	ands	r3, r4, #3
    12f0:	beq	135c <flatcc_verify_union_vector_field+0x1b8>
    12f4:	cmp	r3, #0
    12f8:	bne	132c <flatcc_verify_union_vector_field+0x188>
    12fc:	ldr	r3, [r8, r2]
    1300:	cmn	r3, #-1073741823	; 0xc0000001
    1304:	movhi	sl, #25
    1308:	bhi	1270 <flatcc_verify_union_vector_field+0xcc>
    130c:	sub	lr, lr, r4
    1310:	cmp	lr, r3, lsl #2
    1314:	movcc	sl, #26
    1318:	bcc	1270 <flatcc_verify_union_vector_field+0xcc>
    131c:	mov	sl, r6
    1320:	mov	r0, sl
    1324:	add	sp, sp, #52	; 0x34
    1328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    132c:	mov	sl, #16
    1330:	b	1270 <flatcc_verify_union_vector_field+0xcc>
    1334:	stm	sp, {r9, fp}
    1338:	mov	r3, r9
    133c:	mov	r2, r8
    1340:	mov	r1, r6
    1344:	mov	r0, r4
    1348:	bl	1bc <flatcc_verify_vector_field>
    134c:	mov	sl, r0
    1350:	mov	r0, sl
    1354:	add	sp, sp, #52	; 0x34
    1358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    135c:	ldr	ip, [r8, r2]
    1360:	add	r3, r8, r2
    1364:	cmn	ip, #-1073741823	; 0xc0000001
    1368:	bhi	12fc <flatcc_verify_union_vector_field+0x158>
    136c:	lsl	r1, ip, #2
    1370:	sub	r9, lr, r4
    1374:	cmp	r9, r1
    1378:	bcc	12fc <flatcc_verify_union_vector_field+0x158>
    137c:	cmp	r7, ip
    1380:	movne	sl, #34	; 0x22
    1384:	bne	1270 <flatcc_verify_union_vector_field+0xcc>
    1388:	sub	r0, r0, #1
    138c:	cmp	r7, #0
    1390:	str	r0, [sp, #32]
    1394:	str	r8, [sp, #24]
    1398:	str	lr, [sp, #28]
    139c:	beq	131c <flatcc_verify_union_vector_field+0x178>
    13a0:	add	r2, r2, r1
    13a4:	add	r8, r8, r2
    13a8:	mov	r7, r3
    13ac:	add	r5, r5, #4
    13b0:	b	13d0 <flatcc_verify_union_vector_field+0x22c>
    13b4:	ldrb	r3, [r5]
    13b8:	cmp	r3, #0
    13bc:	bne	141c <flatcc_verify_union_vector_field+0x278>
    13c0:	cmp	r7, r8
    13c4:	add	r4, r4, #4
    13c8:	add	r5, r5, #1
    13cc:	beq	131c <flatcc_verify_union_vector_field+0x178>
    13d0:	ldr	r3, [r7, #4]!
    13d4:	add	r0, sp, #24
    13d8:	cmp	r3, #0
    13dc:	beq	13b4 <flatcc_verify_union_vector_field+0x210>
    13e0:	ldrb	r2, [r5]
    13e4:	cmp	r2, #0
    13e8:	beq	1424 <flatcc_verify_union_vector_field+0x280>
    13ec:	str	r3, [sp, #44]	; 0x2c
    13f0:	ldr	r3, [sp, #12]
    13f4:	strb	r2, [sp, #36]	; 0x24
    13f8:	str	r4, [sp, #40]	; 0x28
    13fc:	blx	r3
    1400:	cmp	r0, #0
    1404:	beq	13c0 <flatcc_verify_union_vector_field+0x21c>
    1408:	add	r0, sp, #24
    140c:	ldr	r3, [sp, #12]
    1410:	blx	r3
    1414:	mov	sl, r0
    1418:	b	1270 <flatcc_verify_union_vector_field+0xcc>
    141c:	mov	sl, #32
    1420:	b	1270 <flatcc_verify_union_vector_field+0xcc>
    1424:	mov	sl, #33	; 0x21
    1428:	b	1270 <flatcc_verify_union_vector_field+0xcc>
