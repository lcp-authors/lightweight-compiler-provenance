
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_c.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_open_output_file>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #48	; 0x30
   c:	str	r0, [fp, #-8]
  10:	str	r1, [fp, #-12]
  14:	str	r2, [fp, #-16]
  18:	str	r3, [fp, #-20]	; 0xffffffec
  1c:	ldr	r0, [fp, #-8]
  20:	ldr	r0, [r0, #212]	; 0xd4
  24:	ldr	r0, [r0, #216]	; 0xd8
  28:	movw	r1, #0
  2c:	cmp	r0, r1
  30:	beq	48 <__flatcc_fb_open_output_file+0x48>
  34:	ldr	r0, [fp, #-8]
  38:	ldr	r0, [r0, #212]	; 0xd4
  3c:	ldr	r0, [r0, #216]	; 0xd8
  40:	str	r0, [sp, #8]
  44:	b	58 <__flatcc_fb_open_output_file+0x58>
  48:	movw	r0, #0
  4c:	movt	r0, #0
  50:	str	r0, [sp, #8]
  54:	b	58 <__flatcc_fb_open_output_file+0x58>
  58:	ldr	r0, [sp, #8]
  5c:	str	r0, [sp, #16]
  60:	ldr	r0, [sp, #16]
  64:	bl	0 <strlen>
  68:	str	r0, [sp, #12]
  6c:	ldr	r0, [fp, #-8]
  70:	ldr	r0, [r0, #204]	; 0xcc
  74:	movw	r1, #0
  78:	cmp	r0, r1
  7c:	beq	8c <__flatcc_fb_open_output_file+0x8c>
  80:	movw	r0, #0
  84:	str	r0, [fp, #-4]
  88:	b	11c <__flatcc_fb_open_output_file+0x11c>
  8c:	ldr	r0, [sp, #16]
  90:	ldr	r1, [sp, #12]
  94:	ldr	r2, [fp, #-12]
  98:	ldr	r3, [fp, #-16]
  9c:	ldr	ip, [fp, #-20]	; 0xffffffec
  a0:	str	ip, [sp]
  a4:	movw	ip, #1
  a8:	str	ip, [sp, #4]
  ac:	bl	0 <__flatcc_fb_create_join_path_n>
  b0:	str	r0, [sp, #24]
  b4:	bl	128 <checkmem>
  b8:	ldr	r0, [sp, #24]
  bc:	movw	r1, #0
  c0:	movt	r1, #0
  c4:	bl	0 <fopen>
  c8:	ldr	r1, [fp, #-8]
  cc:	str	r0, [r1, #204]	; 0xcc
  d0:	movw	r0, #0
  d4:	str	r0, [sp, #20]
  d8:	ldr	r1, [fp, #-8]
  dc:	ldr	r1, [r1, #204]	; 0xcc
  e0:	cmp	r1, r0
  e4:	bne	10c <__flatcc_fb_open_output_file+0x10c>
  e8:	movw	r0, #0
  ec:	movt	r0, #0
  f0:	ldr	r0, [r0]
  f4:	ldr	r2, [sp, #24]
  f8:	movw	r1, #0
  fc:	movt	r1, #0
 100:	bl	0 <fprintf>
 104:	mvn	r1, #0
 108:	str	r1, [sp, #20]
 10c:	ldr	r0, [sp, #24]
 110:	bl	0 <free>
 114:	ldr	r0, [sp, #20]
 118:	str	r0, [fp, #-4]
 11c:	ldr	r0, [fp, #-4]
 120:	mov	sp, fp
 124:	pop	{fp, pc}

00000128 <checkmem>:
 128:	push	{fp, lr}
 12c:	mov	fp, sp
 130:	sub	sp, sp, #8
 134:	str	r0, [sp, #4]
 138:	ldr	r0, [sp, #4]
 13c:	movw	r1, #0
 140:	cmp	r0, r1
 144:	bne	170 <checkmem+0x48>
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	ldr	r0, [r0]
 154:	movw	r1, #0
 158:	movt	r1, #0
 15c:	bl	0 <fprintf>
 160:	movw	r1, #1
 164:	str	r0, [sp]
 168:	mov	r0, r1
 16c:	bl	0 <exit>
 170:	mov	sp, fp
 174:	pop	{fp, pc}

00000178 <__flatcc_fb_close_output_file>:
 178:	push	{fp, lr}
 17c:	mov	fp, sp
 180:	sub	sp, sp, #8
 184:	str	r0, [sp, #4]
 188:	ldr	r0, [sp, #4]
 18c:	ldr	r0, [r0, #212]	; 0xd4
 190:	ldr	r0, [r0, #124]	; 0x7c
 194:	movw	r1, #0
 198:	cmp	r0, r1
 19c:	bne	1e0 <__flatcc_fb_close_output_file+0x68>
 1a0:	ldr	r0, [sp, #4]
 1a4:	ldr	r0, [r0, #212]	; 0xd4
 1a8:	ldr	r0, [r0, #108]	; 0x6c
 1ac:	cmp	r0, #0
 1b0:	bne	1e0 <__flatcc_fb_close_output_file+0x68>
 1b4:	ldr	r0, [sp, #4]
 1b8:	ldr	r0, [r0, #204]	; 0xcc
 1bc:	movw	r1, #0
 1c0:	cmp	r0, r1
 1c4:	beq	1e0 <__flatcc_fb_close_output_file+0x68>
 1c8:	ldr	r0, [sp, #4]
 1cc:	ldr	r0, [r0, #204]	; 0xcc
 1d0:	bl	0 <fclose>
 1d4:	ldr	r1, [sp, #4]
 1d8:	movw	r2, #0
 1dc:	str	r2, [r1, #204]	; 0xcc
 1e0:	mov	sp, fp
 1e4:	pop	{fp, pc}

000001e8 <__flatcc_fb_end_output_c>:
 1e8:	push	{fp, lr}
 1ec:	mov	fp, sp
 1f0:	sub	sp, sp, #8
 1f4:	str	r0, [sp, #4]
 1f8:	ldr	r0, [sp, #4]
 1fc:	ldr	r0, [r0, #204]	; 0xcc
 200:	movw	r1, #0
 204:	movt	r1, #0
 208:	ldr	r1, [r1]
 20c:	cmp	r0, r1
 210:	beq	234 <__flatcc_fb_end_output_c+0x4c>
 214:	ldr	r0, [sp, #4]
 218:	ldr	r0, [r0, #204]	; 0xcc
 21c:	movw	r1, #0
 220:	cmp	r0, r1
 224:	beq	234 <__flatcc_fb_end_output_c+0x4c>
 228:	ldr	r0, [sp, #4]
 22c:	ldr	r0, [r0, #204]	; 0xcc
 230:	bl	0 <fclose>
 234:	ldr	r0, [sp, #4]
 238:	movw	r1, #0
 23c:	str	r1, [r0, #204]	; 0xcc
 240:	mov	sp, fp
 244:	pop	{fp, pc}

00000248 <__flatcc_fb_init_output_c>:
 248:	push	{fp, lr}
 24c:	mov	fp, sp
 250:	sub	sp, sp, #40	; 0x28
 254:	str	r0, [fp, #-8]
 258:	str	r1, [fp, #-12]
 25c:	movw	r0, #0
 260:	str	r0, [sp, #20]
 264:	ldr	r1, [fp, #-12]
 268:	ldr	r1, [r1, #128]	; 0x80
 26c:	cmp	r1, #0
 270:	movw	r1, #0
 274:	movne	r1, #1
 278:	tst	r1, #1
 27c:	movw	r1, #0
 280:	movt	r1, #0
 284:	movw	r2, #0
 288:	movt	r2, #0
 28c:	movne	r1, r2
 290:	str	r1, [sp, #12]
 294:	ldr	r1, [fp, #-12]
 298:	ldr	r1, [r1, #216]	; 0xd8
 29c:	cmp	r1, r0
 2a0:	beq	2b4 <__flatcc_fb_init_output_c+0x6c>
 2a4:	ldr	r0, [fp, #-12]
 2a8:	ldr	r0, [r0, #216]	; 0xd8
 2ac:	str	r0, [sp]
 2b0:	b	2c4 <__flatcc_fb_init_output_c+0x7c>
 2b4:	movw	r0, #0
 2b8:	movt	r0, #0
 2bc:	str	r0, [sp]
 2c0:	b	2c4 <__flatcc_fb_init_output_c+0x7c>
 2c4:	ldr	r0, [sp]
 2c8:	str	r0, [sp, #8]
 2cc:	mvn	r0, #0
 2d0:	str	r0, [sp, #4]
 2d4:	ldr	r0, [fp, #-8]
 2d8:	movw	r1, #0
 2dc:	and	r1, r1, #255	; 0xff
 2e0:	movw	r2, #232	; 0xe8
 2e4:	bl	0 <memset>
 2e8:	ldr	r0, [fp, #-12]
 2ec:	ldr	r1, [fp, #-8]
 2f0:	str	r0, [r1, #212]	; 0xd4
 2f4:	ldr	r0, [fp, #-12]
 2f8:	ldr	r0, [r0, #196]	; 0xc4
 2fc:	str	r0, [fp, #-16]
 300:	ldr	r0, [fp, #-16]
 304:	movw	r1, #0
 308:	cmp	r0, r1
 30c:	beq	358 <__flatcc_fb_init_output_c+0x110>
 310:	ldr	r0, [fp, #-12]
 314:	ldr	r0, [r0, #196]	; 0xc4
 318:	bl	0 <strlen>
 31c:	str	r0, [sp, #16]
 320:	ldr	r0, [sp, #16]
 324:	cmp	r0, #100	; 0x64
 328:	bls	354 <__flatcc_fb_init_output_c+0x10c>
 32c:	movw	r0, #0
 330:	movt	r0, #0
 334:	ldr	r0, [r0]
 338:	movw	r1, #0
 33c:	movt	r1, #0
 340:	movw	r2, #100	; 0x64
 344:	bl	0 <fprintf>
 348:	mvn	r1, #0
 34c:	str	r1, [fp, #-4]
 350:	b	4f0 <__flatcc_fb_init_output_c+0x2a8>
 354:	b	370 <__flatcc_fb_init_output_c+0x128>
 358:	movw	r0, #0
 35c:	movt	r0, #0
 360:	str	r0, [fp, #-16]
 364:	ldr	r0, [fp, #-16]
 368:	bl	0 <strlen>
 36c:	str	r0, [sp, #16]
 370:	ldr	r0, [fp, #-8]
 374:	ldr	r1, [fp, #-16]
 378:	movw	r2, #100	; 0x64
 37c:	bl	0 <strncpy>
 380:	ldr	r1, [fp, #-8]
 384:	movw	r2, #0
 388:	strb	r2, [r1, #100]	; 0x64
 38c:	ldr	r1, [sp, #16]
 390:	cmp	r1, #0
 394:	beq	3c4 <__flatcc_fb_init_output_c+0x17c>
 398:	ldr	r0, [fp, #-8]
 39c:	ldr	r1, [sp, #16]
 3a0:	add	r0, r0, r1
 3a4:	movw	r1, #95	; 0x5f
 3a8:	strb	r1, [r0]
 3ac:	ldr	r0, [fp, #-8]
 3b0:	ldr	r1, [sp, #16]
 3b4:	add	r1, r1, #1
 3b8:	add	r0, r0, r1
 3bc:	movw	r1, #0
 3c0:	strb	r1, [r0]
 3c4:	ldr	r0, [fp, #-8]
 3c8:	add	r0, r0, #102	; 0x66
 3cc:	ldr	r1, [fp, #-8]
 3d0:	bl	4fc <pstrcpyupper>
 3d4:	ldr	r1, [fp, #-8]
 3d8:	add	r1, r1, #102	; 0x66
 3dc:	ldr	r2, [sp, #16]
 3e0:	add	r1, r1, r2
 3e4:	movw	r2, #0
 3e8:	strb	r2, [r1]
 3ec:	ldr	r1, [fp, #-12]
 3f0:	ldr	r1, [r1, #176]	; 0xb0
 3f4:	ldr	r2, [fp, #-8]
 3f8:	str	r1, [r2, #224]	; 0xe0
 3fc:	ldr	r1, [fp, #-12]
 400:	ldr	r1, [r1, #108]	; 0x6c
 404:	cmp	r1, #0
 408:	beq	42c <__flatcc_fb_init_output_c+0x1e4>
 40c:	movw	r0, #0
 410:	movt	r0, #0
 414:	ldr	r0, [r0]
 418:	ldr	r1, [fp, #-8]
 41c:	str	r0, [r1, #204]	; 0xcc
 420:	movw	r0, #0
 424:	str	r0, [fp, #-4]
 428:	b	4f0 <__flatcc_fb_init_output_c+0x2a8>
 42c:	ldr	r0, [fp, #-8]
 430:	ldr	r0, [r0, #212]	; 0xd4
 434:	ldr	r0, [r0, #124]	; 0x7c
 438:	movw	r1, #0
 43c:	cmp	r0, r1
 440:	bne	450 <__flatcc_fb_init_output_c+0x208>
 444:	movw	r0, #0
 448:	str	r0, [fp, #-4]
 44c:	b	4f0 <__flatcc_fb_init_output_c+0x2a8>
 450:	ldr	r0, [sp, #8]
 454:	ldr	r1, [fp, #-8]
 458:	ldr	r1, [r1, #212]	; 0xd4
 45c:	ldr	r1, [r1, #124]	; 0x7c
 460:	movw	r2, #0
 464:	movt	r2, #0
 468:	movw	r3, #1
 46c:	bl	0 <__flatcc_fb_create_join_path>
 470:	str	r0, [sp, #20]
 474:	bl	128 <checkmem>
 478:	ldr	r0, [sp, #20]
 47c:	ldr	r1, [sp, #12]
 480:	bl	0 <fopen>
 484:	ldr	r1, [fp, #-8]
 488:	str	r0, [r1, #204]	; 0xcc
 48c:	ldr	r0, [fp, #-8]
 490:	ldr	r0, [r0, #204]	; 0xcc
 494:	movw	r1, #0
 498:	cmp	r0, r1
 49c:	bne	4c8 <__flatcc_fb_init_output_c+0x280>
 4a0:	movw	r0, #0
 4a4:	movt	r0, #0
 4a8:	ldr	r0, [r0]
 4ac:	ldr	r2, [sp, #20]
 4b0:	movw	r1, #0
 4b4:	movt	r1, #0
 4b8:	bl	0 <fprintf>
 4bc:	mvn	r1, #0
 4c0:	str	r1, [sp, #4]
 4c4:	b	4d0 <__flatcc_fb_init_output_c+0x288>
 4c8:	movw	r0, #0
 4cc:	str	r0, [sp, #4]
 4d0:	ldr	r0, [sp, #20]
 4d4:	movw	r1, #0
 4d8:	cmp	r0, r1
 4dc:	beq	4e8 <__flatcc_fb_init_output_c+0x2a0>
 4e0:	ldr	r0, [sp, #20]
 4e4:	bl	0 <free>
 4e8:	ldr	r0, [sp, #4]
 4ec:	str	r0, [fp, #-4]
 4f0:	ldr	r0, [fp, #-4]
 4f4:	mov	sp, fp
 4f8:	pop	{fp, pc}

000004fc <pstrcpyupper>:
 4fc:	push	{fp, lr}
 500:	mov	fp, sp
 504:	sub	sp, sp, #16
 508:	str	r0, [fp, #-4]
 50c:	str	r1, [sp, #8]
 510:	ldr	r0, [fp, #-4]
 514:	str	r0, [sp, #4]
 518:	ldr	r0, [sp, #8]
 51c:	ldrsb	r0, [r0]
 520:	cmp	r0, #0
 524:	beq	550 <pstrcpyupper+0x54>
 528:	ldr	r0, [sp, #8]
 52c:	add	r1, r0, #1
 530:	str	r1, [sp, #8]
 534:	ldrb	r0, [r0]
 538:	bl	0 <toupper>
 53c:	ldr	r1, [sp, #4]
 540:	add	r2, r1, #1
 544:	str	r2, [sp, #4]
 548:	strb	r0, [r1]
 54c:	b	518 <pstrcpyupper+0x1c>
 550:	ldr	r0, [sp, #4]
 554:	movw	r1, #0
 558:	strb	r1, [r0]
 55c:	ldr	r0, [fp, #-4]
 560:	mov	sp, fp
 564:	pop	{fp, pc}

00000568 <__flatcc_fb_gen_c_includes>:
 568:	push	{fp, lr}
 56c:	mov	fp, sp
 570:	sub	sp, sp, #64	; 0x40
 574:	str	r0, [fp, #-4]
 578:	str	r1, [fp, #-8]
 57c:	str	r2, [fp, #-12]
 580:	ldr	r0, [fp, #-4]
 584:	ldr	r0, [r0, #208]	; 0xd0
 588:	ldr	r0, [r0]
 58c:	str	r0, [fp, #-16]
 590:	add	r0, sp, #20
 594:	movw	r1, #0
 598:	and	r1, r1, #255	; 0xff
 59c:	movw	r2, #16
 5a0:	bl	0 <memset>
 5a4:	ldr	r0, [fp, #-4]
 5a8:	ldr	r0, [r0, #208]	; 0xd0
 5ac:	ldr	r0, [r0, #164]	; 0xa4
 5b0:	bl	0 <__flatcc_fb_copy_path>
 5b4:	add	r1, sp, #20
 5b8:	str	r0, [sp, #16]
 5bc:	mov	r0, r1
 5c0:	ldr	r1, [sp, #16]
 5c4:	movw	r2, #1
 5c8:	bl	0 <str_set_insert_item>
 5cc:	ldr	r0, [fp, #-16]
 5d0:	movw	r1, #0
 5d4:	cmp	r0, r1
 5d8:	beq	6d8 <__flatcc_fb_gen_c_includes+0x170>
 5dc:	ldr	r0, [fp, #-16]
 5e0:	ldr	r0, [r0, #8]
 5e4:	ldr	r1, [fp, #-16]
 5e8:	ldr	r1, [r1, #12]
 5ec:	ldr	r2, [fp, #-4]
 5f0:	ldr	r2, [r2, #212]	; 0xd4
 5f4:	ldr	r2, [r2, #96]	; 0x60
 5f8:	bl	0 <__flatcc_fb_create_basename>
 5fc:	str	r0, [fp, #-20]	; 0xffffffec
 600:	bl	128 <checkmem>
 604:	ldr	r0, [fp, #-16]
 608:	ldr	r0, [r0]
 60c:	str	r0, [fp, #-16]
 610:	ldr	r0, [fp, #-20]	; 0xffffffec
 614:	bl	0 <__flatcc_fb_copy_path>
 618:	str	r0, [fp, #-24]	; 0xffffffe8
 61c:	bl	128 <checkmem>
 620:	ldr	r0, [fp, #-24]	; 0xffffffe8
 624:	str	r0, [fp, #-28]	; 0xffffffe4
 628:	ldr	r0, [fp, #-28]	; 0xffffffe4
 62c:	ldrsb	r0, [r0]
 630:	cmp	r0, #0
 634:	beq	65c <__flatcc_fb_gen_c_includes+0xf4>
 638:	ldr	r0, [fp, #-28]	; 0xffffffe4
 63c:	ldrb	r0, [r0]
 640:	bl	0 <toupper>
 644:	ldr	r1, [fp, #-28]	; 0xffffffe4
 648:	strb	r0, [r1]
 64c:	ldr	r0, [fp, #-28]	; 0xffffffe4
 650:	add	r0, r0, #1
 654:	str	r0, [fp, #-28]	; 0xffffffe4
 658:	b	628 <__flatcc_fb_gen_c_includes+0xc0>
 65c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 660:	add	r0, sp, #20
 664:	movw	r2, #1
 668:	bl	0 <str_set_insert_item>
 66c:	movw	r1, #0
 670:	cmp	r0, r1
 674:	beq	68c <__flatcc_fb_gen_c_includes+0x124>
 678:	ldr	r0, [fp, #-24]	; 0xffffffe8
 67c:	bl	0 <free>
 680:	ldr	r0, [fp, #-20]	; 0xffffffec
 684:	bl	0 <free>
 688:	b	5cc <__flatcc_fb_gen_c_includes+0x64>
 68c:	ldr	r0, [fp, #-4]
 690:	ldr	r0, [r0, #204]	; 0xcc
 694:	ldr	r2, [fp, #-24]	; 0xffffffe8
 698:	ldr	r3, [fp, #-12]
 69c:	ldr	r1, [fp, #-20]	; 0xffffffec
 6a0:	ldr	ip, [fp, #-8]
 6a4:	movw	lr, #0
 6a8:	movt	lr, #0
 6ac:	str	r1, [sp, #12]
 6b0:	mov	r1, lr
 6b4:	ldr	lr, [sp, #12]
 6b8:	str	lr, [sp]
 6bc:	str	ip, [sp, #4]
 6c0:	bl	0 <fprintf>
 6c4:	ldr	r1, [fp, #-20]	; 0xffffffec
 6c8:	str	r0, [sp, #8]
 6cc:	mov	r0, r1
 6d0:	bl	0 <free>
 6d4:	b	5cc <__flatcc_fb_gen_c_includes+0x64>
 6d8:	add	r0, sp, #20
 6dc:	movw	r1, #0
 6e0:	movt	r1, #0
 6e4:	movw	r2, #0
 6e8:	bl	0 <str_set_destroy>
 6ec:	mov	sp, fp
 6f0:	pop	{fp, pc}

000006f4 <_str_set_destructor>:
 6f4:	push	{fp, lr}
 6f8:	mov	fp, sp
 6fc:	sub	sp, sp, #8
 700:	str	r0, [sp, #4]
 704:	str	r1, [sp]
 708:	ldr	r0, [sp]
 70c:	bl	0 <free>
 710:	mov	sp, fp
 714:	pop	{fp, pc}

00000718 <__flatcc_fb_copy_scope>:
 718:	push	{fp, lr}
 71c:	mov	fp, sp
 720:	sub	sp, sp, #24
 724:	str	r0, [fp, #-8]
 728:	str	r1, [sp, #12]
 72c:	ldr	r0, [fp, #-8]
 730:	ldr	r0, [r0, #24]
 734:	str	r0, [sp, #4]
 738:	ldr	r0, [fp, #-8]
 73c:	ldr	r0, [r0]
 740:	str	r0, [sp]
 744:	ldr	r0, [sp]
 748:	movw	r1, #0
 74c:	cmp	r0, r1
 750:	beq	788 <__flatcc_fb_copy_scope+0x70>
 754:	ldr	r0, [sp]
 758:	ldr	r0, [r0, #4]
 75c:	ldr	r0, [r0, #4]
 760:	str	r0, [sp, #8]
 764:	ldr	r0, [sp, #8]
 768:	add	r0, r0, #1
 76c:	ldr	r1, [sp, #4]
 770:	add	r0, r1, r0
 774:	str	r0, [sp, #4]
 778:	ldr	r0, [sp]
 77c:	ldr	r0, [r0]
 780:	str	r0, [sp]
 784:	b	744 <__flatcc_fb_copy_scope+0x2c>
 788:	ldr	r0, [sp, #4]
 78c:	cmp	r0, #101	; 0x65
 790:	bls	7ac <__flatcc_fb_copy_scope+0x94>
 794:	ldr	r0, [sp, #12]
 798:	movw	r1, #0
 79c:	strb	r1, [r0]
 7a0:	mvn	r0, #0
 7a4:	str	r0, [fp, #-4]
 7a8:	b	870 <__flatcc_fb_copy_scope+0x158>
 7ac:	ldr	r0, [fp, #-8]
 7b0:	ldr	r0, [r0, #24]
 7b4:	str	r0, [sp, #4]
 7b8:	ldr	r0, [sp, #12]
 7bc:	ldr	r1, [fp, #-8]
 7c0:	ldr	r1, [r1, #20]
 7c4:	ldr	r2, [sp, #4]
 7c8:	bl	0 <memcpy>
 7cc:	ldr	r0, [fp, #-8]
 7d0:	ldr	r0, [r0]
 7d4:	str	r0, [sp]
 7d8:	ldr	r0, [sp]
 7dc:	movw	r1, #0
 7e0:	cmp	r0, r1
 7e4:	beq	854 <__flatcc_fb_copy_scope+0x13c>
 7e8:	ldr	r0, [sp]
 7ec:	ldr	r0, [r0, #4]
 7f0:	ldr	r0, [r0, #4]
 7f4:	str	r0, [sp, #8]
 7f8:	ldr	r0, [sp, #12]
 7fc:	ldr	r1, [sp, #4]
 800:	add	r0, r0, r1
 804:	ldr	r1, [sp]
 808:	ldr	r1, [r1, #4]
 80c:	ldr	r1, [r1]
 810:	ldr	r2, [sp, #8]
 814:	bl	0 <memcpy>
 818:	ldr	r0, [sp, #8]
 81c:	add	r0, r0, #1
 820:	ldr	r1, [sp, #4]
 824:	add	r0, r1, r0
 828:	str	r0, [sp, #4]
 82c:	ldr	r0, [sp, #12]
 830:	ldr	r1, [sp, #4]
 834:	sub	r1, r1, #1
 838:	add	r0, r0, r1
 83c:	movw	r1, #95	; 0x5f
 840:	strb	r1, [r0]
 844:	ldr	r0, [sp]
 848:	ldr	r0, [r0]
 84c:	str	r0, [sp]
 850:	b	7d8 <__flatcc_fb_copy_scope+0xc0>
 854:	ldr	r0, [sp, #12]
 858:	ldr	r1, [sp, #4]
 85c:	add	r0, r0, r1
 860:	movw	r1, #0
 864:	strb	r1, [r0]
 868:	ldr	r0, [sp, #4]
 86c:	str	r0, [fp, #-4]
 870:	ldr	r0, [fp, #-4]
 874:	mov	sp, fp
 878:	pop	{fp, pc}

0000087c <__flatcc_fb_scoped_symbol_name>:
 87c:	push	{fp, lr}
 880:	mov	fp, sp
 884:	sub	sp, sp, #16
 888:	str	r0, [fp, #-4]
 88c:	str	r1, [sp, #8]
 890:	str	r2, [sp, #4]
 894:	ldr	r0, [sp, #8]
 898:	ldr	r0, [r0, #4]
 89c:	str	r0, [sp]
 8a0:	ldr	r0, [sp, #4]
 8a4:	ldr	r0, [r0, #204]	; 0xcc
 8a8:	ldr	r1, [fp, #-4]
 8ac:	cmp	r0, r1
 8b0:	beq	8fc <__flatcc_fb_scoped_symbol_name+0x80>
 8b4:	ldr	r0, [fp, #-4]
 8b8:	ldr	r1, [sp, #4]
 8bc:	bl	718 <__flatcc_fb_copy_scope>
 8c0:	ldr	r1, [sp, #4]
 8c4:	str	r0, [r1, #208]	; 0xd0
 8c8:	movw	r1, #0
 8cc:	cmp	r1, r0
 8d0:	ble	8f8 <__flatcc_fb_scoped_symbol_name+0x7c>
 8d4:	ldr	r0, [sp, #4]
 8d8:	movw	r1, #0
 8dc:	str	r1, [r0, #208]	; 0xd0
 8e0:	movw	r0, #0
 8e4:	movt	r0, #0
 8e8:	ldr	r0, [r0]
 8ec:	movw	r1, #0
 8f0:	movt	r1, #0
 8f4:	bl	0 <fprintf>
 8f8:	b	8fc <__flatcc_fb_scoped_symbol_name+0x80>
 8fc:	ldr	r0, [sp]
 900:	ldr	r0, [r0, #4]
 904:	ldr	r1, [sp, #4]
 908:	str	r0, [r1, #212]	; 0xd4
 90c:	ldr	r0, [sp, #4]
 910:	ldr	r0, [r0, #208]	; 0xd0
 914:	ldr	r1, [sp, #4]
 918:	ldr	r1, [r1, #212]	; 0xd4
 91c:	add	r0, r0, r1
 920:	ldr	r1, [sp, #4]
 924:	str	r0, [r1, #216]	; 0xd8
 928:	ldr	r0, [sp, #4]
 92c:	ldr	r0, [r0, #216]	; 0xd8
 930:	cmp	r0, #203	; 0xcb
 934:	ble	998 <__flatcc_fb_scoped_symbol_name+0x11c>
 938:	movw	r0, #0
 93c:	movt	r0, #0
 940:	ldr	r0, [r0]
 944:	ldr	r1, [sp, #4]
 948:	ldr	r2, [r1, #212]	; 0xd4
 94c:	ldr	r1, [sp]
 950:	ldr	r3, [r1]
 954:	movw	r1, #0
 958:	movt	r1, #0
 95c:	bl	0 <fprintf>
 960:	ldr	r1, [sp, #4]
 964:	ldr	r1, [r1, #208]	; 0xd0
 968:	movw	r2, #204	; 0xcc
 96c:	sub	r1, r2, r1
 970:	sub	r1, r1, #1
 974:	ldr	r2, [sp, #4]
 978:	str	r1, [r2, #212]	; 0xd4
 97c:	ldr	r1, [sp, #4]
 980:	ldr	r1, [r1, #208]	; 0xd0
 984:	ldr	r2, [sp, #4]
 988:	ldr	r2, [r2, #212]	; 0xd4
 98c:	add	r1, r1, r2
 990:	ldr	r2, [sp, #4]
 994:	str	r1, [r2, #216]	; 0xd8
 998:	ldr	r0, [sp, #4]
 99c:	ldr	r1, [sp, #4]
 9a0:	ldr	r1, [r1, #208]	; 0xd0
 9a4:	add	r0, r0, r1
 9a8:	ldr	r1, [sp]
 9ac:	ldr	r1, [r1]
 9b0:	ldr	r2, [sp, #4]
 9b4:	ldr	r2, [r2, #212]	; 0xd4
 9b8:	bl	0 <memcpy>
 9bc:	ldr	r0, [sp, #4]
 9c0:	ldr	r1, [sp, #4]
 9c4:	ldr	r1, [r1, #216]	; 0xd8
 9c8:	add	r0, r0, r1
 9cc:	movw	r1, #0
 9d0:	strb	r1, [r0]
 9d4:	mov	sp, fp
 9d8:	pop	{fp, pc}

000009dc <__flatcc_fb_codegen_common_c>:
 9dc:	push	{fp, lr}
 9e0:	mov	fp, sp
 9e4:	sub	sp, sp, #24
 9e8:	str	r0, [fp, #-8]
 9ec:	ldr	r0, [fp, #-8]
 9f0:	bl	0 <strlen>
 9f4:	sub	r0, r0, #1
 9f8:	str	r0, [sp, #12]
 9fc:	movw	r0, #0
 a00:	str	r0, [sp, #8]
 a04:	ldr	r0, [fp, #-8]
 a08:	ldr	r0, [r0, #212]	; 0xd4
 a0c:	ldr	r0, [r0, #144]	; 0x90
 a10:	cmp	r0, #0
 a14:	beq	a58 <__flatcc_fb_codegen_common_c+0x7c>
 a18:	ldr	r0, [fp, #-8]
 a1c:	ldr	r1, [fp, #-8]
 a20:	ldr	r2, [sp, #12]
 a24:	movw	r3, #0
 a28:	movt	r3, #0
 a2c:	bl	0 <__flatcc_fb_open_output_file>
 a30:	cmp	r0, #0
 a34:	beq	a44 <__flatcc_fb_codegen_common_c+0x68>
 a38:	mvn	r0, #0
 a3c:	str	r0, [fp, #-4]
 a40:	b	ac4 <__flatcc_fb_codegen_common_c+0xe8>
 a44:	ldr	r0, [fp, #-8]
 a48:	bl	0 <__flatcc_fb_gen_common_c_header>
 a4c:	str	r0, [sp, #8]
 a50:	ldr	r0, [fp, #-8]
 a54:	bl	178 <__flatcc_fb_close_output_file>
 a58:	ldr	r0, [sp, #8]
 a5c:	cmp	r0, #0
 a60:	bne	abc <__flatcc_fb_codegen_common_c+0xe0>
 a64:	ldr	r0, [fp, #-8]
 a68:	ldr	r0, [r0, #212]	; 0xd4
 a6c:	ldr	r0, [r0, #148]	; 0x94
 a70:	cmp	r0, #0
 a74:	beq	abc <__flatcc_fb_codegen_common_c+0xe0>
 a78:	ldr	r0, [fp, #-8]
 a7c:	ldr	r1, [fp, #-8]
 a80:	ldr	r2, [sp, #12]
 a84:	movw	r3, #0
 a88:	movt	r3, #0
 a8c:	bl	0 <__flatcc_fb_open_output_file>
 a90:	cmp	r0, #0
 a94:	beq	aa4 <__flatcc_fb_codegen_common_c+0xc8>
 a98:	mvn	r0, #0
 a9c:	str	r0, [fp, #-4]
 aa0:	b	ac4 <__flatcc_fb_codegen_common_c+0xe8>
 aa4:	ldr	r0, [fp, #-8]
 aa8:	bl	0 <__flatcc_fb_gen_common_c_builder_header>
 aac:	ldr	r1, [fp, #-8]
 ab0:	str	r0, [sp, #4]
 ab4:	mov	r0, r1
 ab8:	bl	178 <__flatcc_fb_close_output_file>
 abc:	ldr	r0, [sp, #8]
 ac0:	str	r0, [fp, #-4]
 ac4:	ldr	r0, [fp, #-4]
 ac8:	mov	sp, fp
 acc:	pop	{fp, pc}

00000ad0 <__flatcc_fb_codegen_c>:
 ad0:	push	{fp, lr}
 ad4:	mov	fp, sp
 ad8:	sub	sp, sp, #24
 adc:	str	r0, [fp, #-4]
 ae0:	str	r1, [fp, #-8]
 ae4:	movw	r0, #0
 ae8:	str	r0, [sp, #8]
 aec:	ldr	r1, [fp, #-8]
 af0:	ldr	r2, [fp, #-4]
 af4:	str	r1, [r2, #208]	; 0xd0
 af8:	ldr	r1, [fp, #-8]
 afc:	ldr	r1, [r1, #60]	; 0x3c
 b00:	str	r0, [sp, #4]
 b04:	mov	r0, r1
 b08:	ldr	r1, [sp, #4]
 b0c:	ldr	r2, [sp, #4]
 b10:	bl	0 <fb_scope_table_find>
 b14:	ldr	r1, [fp, #-4]
 b18:	str	r0, [r1, #216]	; 0xd8
 b1c:	ldr	r0, [fp, #-4]
 b20:	ldr	r0, [r0, #208]	; 0xd0
 b24:	ldr	r0, [r0, #160]	; 0xa0
 b28:	bl	0 <strlen>
 b2c:	str	r0, [sp, #12]
 b30:	ldr	r0, [fp, #-4]
 b34:	ldr	r0, [r0, #212]	; 0xd4
 b38:	ldr	r0, [r0, #152]	; 0x98
 b3c:	cmp	r0, #0
 b40:	beq	b98 <__flatcc_fb_codegen_c+0xc8>
 b44:	ldr	r0, [fp, #-4]
 b48:	ldr	r1, [fp, #-4]
 b4c:	ldr	r1, [r1, #208]	; 0xd0
 b50:	ldr	r1, [r1, #160]	; 0xa0
 b54:	ldr	r2, [sp, #12]
 b58:	movw	r3, #0
 b5c:	movt	r3, #0
 b60:	bl	0 <__flatcc_fb_open_output_file>
 b64:	cmp	r0, #0
 b68:	beq	b78 <__flatcc_fb_codegen_c+0xa8>
 b6c:	mvn	r0, #0
 b70:	str	r0, [sp, #8]
 b74:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 b78:	ldr	r0, [fp, #-4]
 b7c:	bl	0 <__flatcc_fb_gen_c_reader>
 b80:	str	r0, [sp, #8]
 b84:	cmp	r0, #0
 b88:	beq	b90 <__flatcc_fb_codegen_c+0xc0>
 b8c:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 b90:	ldr	r0, [fp, #-4]
 b94:	bl	178 <__flatcc_fb_close_output_file>
 b98:	ldr	r0, [fp, #-4]
 b9c:	ldr	r0, [r0, #212]	; 0xd4
 ba0:	ldr	r0, [r0, #156]	; 0x9c
 ba4:	cmp	r0, #0
 ba8:	beq	c00 <__flatcc_fb_codegen_c+0x130>
 bac:	ldr	r0, [fp, #-4]
 bb0:	ldr	r1, [fp, #-4]
 bb4:	ldr	r1, [r1, #208]	; 0xd0
 bb8:	ldr	r1, [r1, #160]	; 0xa0
 bbc:	ldr	r2, [sp, #12]
 bc0:	movw	r3, #0
 bc4:	movt	r3, #0
 bc8:	bl	0 <__flatcc_fb_open_output_file>
 bcc:	cmp	r0, #0
 bd0:	beq	be0 <__flatcc_fb_codegen_c+0x110>
 bd4:	mvn	r0, #0
 bd8:	str	r0, [sp, #8]
 bdc:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 be0:	ldr	r0, [fp, #-4]
 be4:	bl	0 <__flatcc_fb_gen_c_builder>
 be8:	str	r0, [sp, #8]
 bec:	cmp	r0, #0
 bf0:	beq	bf8 <__flatcc_fb_codegen_c+0x128>
 bf4:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 bf8:	ldr	r0, [fp, #-4]
 bfc:	bl	178 <__flatcc_fb_close_output_file>
 c00:	ldr	r0, [fp, #-4]
 c04:	ldr	r0, [r0, #212]	; 0xd4
 c08:	ldr	r0, [r0, #160]	; 0xa0
 c0c:	cmp	r0, #0
 c10:	beq	c68 <__flatcc_fb_codegen_c+0x198>
 c14:	ldr	r0, [fp, #-4]
 c18:	ldr	r1, [fp, #-4]
 c1c:	ldr	r1, [r1, #208]	; 0xd0
 c20:	ldr	r1, [r1, #160]	; 0xa0
 c24:	ldr	r2, [sp, #12]
 c28:	movw	r3, #0
 c2c:	movt	r3, #0
 c30:	bl	0 <__flatcc_fb_open_output_file>
 c34:	cmp	r0, #0
 c38:	beq	c48 <__flatcc_fb_codegen_c+0x178>
 c3c:	mvn	r0, #0
 c40:	str	r0, [sp, #8]
 c44:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 c48:	ldr	r0, [fp, #-4]
 c4c:	bl	0 <__flatcc_fb_gen_c_verifier>
 c50:	str	r0, [sp, #8]
 c54:	cmp	r0, #0
 c58:	beq	c60 <__flatcc_fb_codegen_c+0x190>
 c5c:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 c60:	ldr	r0, [fp, #-4]
 c64:	bl	178 <__flatcc_fb_close_output_file>
 c68:	ldr	r0, [fp, #-4]
 c6c:	ldr	r0, [r0, #212]	; 0xd4
 c70:	ldr	r0, [r0, #164]	; 0xa4
 c74:	cmp	r0, #0
 c78:	beq	cd0 <__flatcc_fb_codegen_c+0x200>
 c7c:	ldr	r0, [fp, #-4]
 c80:	ldr	r1, [fp, #-4]
 c84:	ldr	r1, [r1, #208]	; 0xd0
 c88:	ldr	r1, [r1, #160]	; 0xa0
 c8c:	ldr	r2, [sp, #12]
 c90:	movw	r3, #0
 c94:	movt	r3, #0
 c98:	bl	0 <__flatcc_fb_open_output_file>
 c9c:	cmp	r0, #0
 ca0:	beq	cb0 <__flatcc_fb_codegen_c+0x1e0>
 ca4:	mvn	r0, #0
 ca8:	str	r0, [sp, #8]
 cac:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 cb0:	ldr	r0, [fp, #-4]
 cb4:	bl	0 <__flatcc_fb_gen_c_json_parser>
 cb8:	str	r0, [sp, #8]
 cbc:	cmp	r0, #0
 cc0:	beq	cc8 <__flatcc_fb_codegen_c+0x1f8>
 cc4:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 cc8:	ldr	r0, [fp, #-4]
 ccc:	bl	178 <__flatcc_fb_close_output_file>
 cd0:	ldr	r0, [fp, #-4]
 cd4:	ldr	r0, [r0, #212]	; 0xd4
 cd8:	ldr	r0, [r0, #168]	; 0xa8
 cdc:	cmp	r0, #0
 ce0:	beq	d38 <__flatcc_fb_codegen_c+0x268>
 ce4:	ldr	r0, [fp, #-4]
 ce8:	ldr	r1, [fp, #-4]
 cec:	ldr	r1, [r1, #208]	; 0xd0
 cf0:	ldr	r1, [r1, #160]	; 0xa0
 cf4:	ldr	r2, [sp, #12]
 cf8:	movw	r3, #0
 cfc:	movt	r3, #0
 d00:	bl	0 <__flatcc_fb_open_output_file>
 d04:	cmp	r0, #0
 d08:	beq	d18 <__flatcc_fb_codegen_c+0x248>
 d0c:	mvn	r0, #0
 d10:	str	r0, [sp, #8]
 d14:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 d18:	ldr	r0, [fp, #-4]
 d1c:	bl	0 <__flatcc_fb_gen_c_json_printer>
 d20:	str	r0, [sp, #8]
 d24:	cmp	r0, #0
 d28:	beq	d30 <__flatcc_fb_codegen_c+0x260>
 d2c:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 d30:	ldr	r0, [fp, #-4]
 d34:	bl	178 <__flatcc_fb_close_output_file>
 d38:	b	d3c <__flatcc_fb_codegen_c+0x26c>
 d3c:	ldr	r0, [sp, #8]
 d40:	mov	sp, fp
 d44:	pop	{fp, pc}
