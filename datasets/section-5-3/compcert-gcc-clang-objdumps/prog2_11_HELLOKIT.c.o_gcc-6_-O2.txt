
../compcert-repos/prog2/CMakeFiles/0.11.2.dir/Aula00_Conceitos_base/11_HELLOKIT.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <R_ShiftString>:
   0:	push	{r4, r5, r6, r7, r8, lr}
   4:	mov	r8, r1
   8:	mov	r7, r0
   c:	bl	0 <strlen>
  10:	sub	r6, r7, #1
  14:	mov	r5, r8
  18:	mov	r4, #1
  1c:	add	r0, r7, r0
  20:	ldrb	r3, [r0, #-1]
  24:	strb	r3, [r8]
  28:	b	38 <R_ShiftString+0x38>
  2c:	ldrb	r3, [r6, #1]!
  30:	add	r4, r4, #1
  34:	strb	r3, [r5, #1]!
  38:	mov	r0, r7
  3c:	bl	0 <strlen>
  40:	cmp	r0, r4
  44:	bhi	2c <R_ShiftString+0x2c>
  48:	mov	r3, #0
  4c:	strb	r3, [r8, r4]
  50:	pop	{r4, r5, r6, r7, r8, pc}

00000054 <L_ShiftString>:
  54:	push	{r4, r5, r6, r7, r8, lr}
  58:	mov	r8, r1
  5c:	mov	r7, r0
  60:	bl	0 <strlen>
  64:	ldrb	r3, [r7]
  68:	mov	r6, r7
  6c:	sub	r5, r8, #1
  70:	mov	r4, #1
  74:	add	r0, r8, r0
  78:	strb	r3, [r0, #-1]
  7c:	b	8c <L_ShiftString+0x38>
  80:	ldrb	r3, [r6, #1]!
  84:	add	r4, r4, #1
  88:	strb	r3, [r5, #1]!
  8c:	mov	r0, r7
  90:	bl	0 <strlen>
  94:	cmp	r0, r4
  98:	bhi	80 <L_ShiftString+0x2c>
  9c:	mov	r3, #0
  a0:	strb	r3, [r8, r4]
  a4:	pop	{r4, r5, r6, r7, r8, pc}

000000a8 <StringSet>:
  a8:	push	{r4, r5, r6, r7, r8, lr}
  ac:	subs	r6, r2, #0
  b0:	mov	r4, #0
  b4:	strb	r4, [r1]
  b8:	pople	{r4, r5, r6, r7, r8, pc}
  bc:	mov	r7, r0
  c0:	mov	r5, r1
  c4:	add	r4, r4, #1
  c8:	mov	r1, r7
  cc:	mov	r0, r5
  d0:	bl	0 <strcat>
  d4:	cmp	r6, r4
  d8:	bne	c4 <StringSet+0x1c>
  dc:	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text.startup:

00000000 <main>:
   0:	push	{r4, r5, lr}
   4:	sub	sp, sp, #108	; 0x6c
   8:	ldr	r4, [pc, #200]	; d8 <main+0xd8>
   c:	ldr	r5, [pc, #200]	; dc <main+0xdc>
  10:	mov	r3, #0
  14:	str	r3, [sp, #28]
  18:	str	r3, [sp, #20]
  1c:	str	r3, [sp, #24]
  20:	str	r3, [sp, #32]
  24:	str	r3, [sp, #36]	; 0x24
  28:	str	r3, [sp, #40]	; 0x28
  2c:	strh	r3, [sp, #44]	; 0x2c
  30:	add	r1, sp, #8
  34:	mov	r0, r4
  38:	bl	0 <__isoc99_scanf>
  3c:	ldrb	r3, [sp, #8]
  40:	cmp	r3, #46	; 0x2e
  44:	beq	cc <main+0xcc>
  48:	add	r1, sp, #4
  4c:	mov	r0, r5
  50:	bl	0 <__isoc99_scanf>
  54:	add	r1, sp, #20
  58:	add	r0, sp, #8
  5c:	ldr	r2, [sp, #4]
  60:	bl	a8 <main+0xa8>
  64:	add	r1, sp, #48	; 0x30
  68:	add	r0, sp, #20
  6c:	bl	0 <main>
  70:	add	r1, sp, #48	; 0x30
  74:	add	r0, sp, #20
  78:	bl	0 <strcmp>
  7c:	cmp	r0, #0
  80:	add	r0, sp, #20
  84:	beq	a8 <main+0xa8>
  88:	bl	0 <puts>
  8c:	add	r1, sp, #20
  90:	add	r0, sp, #76	; 0x4c
  94:	bl	0 <strcpy>
  98:	add	r1, sp, #20
  9c:	add	r0, sp, #76	; 0x4c
  a0:	bl	54 <main+0x54>
  a4:	b	70 <main+0x70>
  a8:	add	r0, sp, #20
  ac:	bl	0 <puts>
  b0:	add	r1, sp, #20
  b4:	add	r0, sp, #76	; 0x4c
  b8:	bl	0 <strcpy>
  bc:	add	r1, sp, #20
  c0:	add	r0, sp, #76	; 0x4c
  c4:	bl	54 <main+0x54>
  c8:	b	30 <main+0x30>
  cc:	mov	r0, #0
  d0:	add	sp, sp, #108	; 0x6c
  d4:	pop	{r4, r5, pc}
  d8:	.word	0x00000000
  dc:	.word	0x00000004
