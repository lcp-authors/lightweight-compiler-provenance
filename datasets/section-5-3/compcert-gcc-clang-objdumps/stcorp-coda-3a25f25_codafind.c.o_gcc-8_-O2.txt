
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codafind.dir/tools/codafind/codafind.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_help>:
   0:	movw	r0, #0
   4:	movt	r0, #0
   8:	str	r4, [sp, #-8]!
   c:	str	lr, [sp, #4]
  10:	bl	0 <puts>
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	bl	0 <puts>
  20:	movw	r0, #0
  24:	movt	r0, #0
  28:	bl	0 <puts>
  2c:	movw	r0, #0
  30:	movt	r0, #0
  34:	bl	0 <puts>
  38:	mov	r0, #10
  3c:	bl	0 <putchar>
  40:	movw	r0, #0
  44:	movt	r0, #0
  48:	bl	0 <puts>
  4c:	movw	r0, #0
  50:	movt	r0, #0
  54:	bl	0 <puts>
  58:	movw	r0, #0
  5c:	movt	r0, #0
  60:	bl	0 <puts>
  64:	movw	r0, #0
  68:	movt	r0, #0
  6c:	bl	0 <puts>
  70:	movw	r0, #0
  74:	movt	r0, #0
  78:	bl	0 <puts>
  7c:	movw	r0, #0
  80:	movt	r0, #0
  84:	bl	0 <puts>
  88:	movw	r0, #0
  8c:	movt	r0, #0
  90:	bl	0 <puts>
  94:	movw	r0, #0
  98:	movt	r0, #0
  9c:	bl	0 <puts>
  a0:	movw	r0, #0
  a4:	movt	r0, #0
  a8:	bl	0 <puts>
  ac:	mov	r0, #10
  b0:	bl	0 <putchar>
  b4:	movw	r0, #0
  b8:	movt	r0, #0
  bc:	bl	0 <puts>
  c0:	movw	r0, #0
  c4:	movt	r0, #0
  c8:	bl	0 <puts>
  cc:	mov	r0, #10
  d0:	bl	0 <putchar>
  d4:	movw	r0, #0
  d8:	movt	r0, #0
  dc:	bl	0 <puts>
  e0:	movw	r0, #0
  e4:	movt	r0, #0
  e8:	bl	0 <puts>
  ec:	mov	r0, #10
  f0:	bl	0 <putchar>
  f4:	movw	r0, #0
  f8:	movt	r0, #0
  fc:	bl	0 <puts>
 100:	movw	r0, #0
 104:	movt	r0, #0
 108:	bl	0 <puts>
 10c:	movw	r0, #0
 110:	movt	r0, #0
 114:	bl	0 <puts>
 118:	movw	r0, #0
 11c:	movt	r0, #0
 120:	bl	0 <puts>
 124:	movw	r0, #0
 128:	movt	r0, #0
 12c:	bl	0 <puts>
 130:	movw	r0, #0
 134:	movt	r0, #0
 138:	bl	0 <puts>
 13c:	movw	r0, #0
 140:	movt	r0, #0
 144:	bl	0 <puts>
 148:	mov	r0, #10
 14c:	ldr	r4, [sp]
 150:	ldr	lr, [sp, #4]
 154:	add	sp, sp, #8
 158:	b	0 <putchar>

0000015c <callback>:
 15c:	str	r4, [sp, #-8]!
 160:	subs	r4, r1, #0
 164:	mov	r1, r0
 168:	str	lr, [sp, #4]
 16c:	beq	1ac <callback+0x50>
 170:	cmp	r4, #2
 174:	beq	23c <callback+0xe0>
 178:	cmp	r4, #1
 17c:	beq	1dc <callback+0x80>
 180:	movw	r3, #0
 184:	movt	r3, #0
 188:	ldr	r3, [r3]
 18c:	cmp	r3, #0
 190:	bne	20c <callback+0xb0>
 194:	cmp	r4, #4
 198:	beq	268 <callback+0x10c>
 19c:	ldr	r4, [sp]
 1a0:	add	sp, sp, #4
 1a4:	mov	r0, #0
 1a8:	pop	{pc}		; (ldr pc, [sp], #4)
 1ac:	movw	r0, #0
 1b0:	movt	r0, #0
 1b4:	mov	r3, r2
 1b8:	mov	r2, r1
 1bc:	ldr	r0, [r0]
 1c0:	movw	r1, #0
 1c4:	movt	r1, #0
 1c8:	bl	0 <fprintf>
 1cc:	ldr	r4, [sp]
 1d0:	add	sp, sp, #4
 1d4:	mov	r0, #0
 1d8:	pop	{pc}		; (ldr pc, [sp], #4)
 1dc:	movw	r0, #0
 1e0:	movt	r0, #0
 1e4:	mov	r3, r2
 1e8:	mov	r2, r1
 1ec:	ldr	r0, [r0]
 1f0:	movw	r1, #0
 1f4:	movt	r1, #0
 1f8:	bl	0 <fprintf>
 1fc:	ldr	r4, [sp]
 200:	add	sp, sp, #4
 204:	mov	r0, #0
 208:	pop	{pc}		; (ldr pc, [sp], #4)
 20c:	movw	r0, #0
 210:	movt	r0, #0
 214:	bl	0 <printf>
 218:	cmp	r4, #5
 21c:	ldrls	pc, [pc, r4, lsl #2]
 220:	b	19c <callback+0x40>
 224:	.word	0x000002a0
 228:	.word	0x0000019c
 22c:	.word	0x0000019c
 230:	.word	0x00000290
 234:	.word	0x00000280
 238:	.word	0x00000270
 23c:	movw	r3, #0
 240:	movt	r3, #0
 244:	mov	r2, r0
 248:	movw	r1, #0
 24c:	movt	r1, #0
 250:	ldr	r0, [r3]
 254:	bl	0 <fprintf>
 258:	ldr	r4, [sp]
 25c:	add	sp, sp, #4
 260:	mov	r0, #0
 264:	pop	{pc}		; (ldr pc, [sp], #4)
 268:	bl	0 <puts>
 26c:	b	19c <callback+0x40>
 270:	movw	r0, #0
 274:	movt	r0, #0
 278:	bl	0 <puts>
 27c:	b	19c <callback+0x40>
 280:	movw	r0, #0
 284:	movt	r0, #0
 288:	bl	0 <puts>
 28c:	b	19c <callback+0x40>
 290:	movw	r0, #0
 294:	movt	r0, #0
 298:	bl	0 <puts>
 29c:	b	19c <callback+0x40>
 2a0:	movw	r3, #0
 2a4:	movt	r3, #0
 2a8:	movw	r1, #0
 2ac:	movt	r1, #0
 2b0:	movw	r0, #0
 2b4:	movt	r0, #0
 2b8:	mov	r2, #110	; 0x6e
 2bc:	bl	0 <__assert_fail>

Disassembly of section .text.startup:

00000000 <main>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	movw	r4, #0
   8:	movt	r4, #0
   c:	cmp	r0, #1
  10:	strd	r6, [sp, #8]
  14:	strd	r8, [sp, #16]
  18:	mov	r8, #0
  1c:	strd	sl, [sp, #24]
  20:	str	lr, [sp, #32]
  24:	sub	sp, sp, #36	; 0x24
  28:	str	r8, [r4]
  2c:	beq	54 <main+0x54>
  30:	mov	r7, r1
  34:	mov	r5, r0
  38:	ldr	r6, [r7, #4]
  3c:	movw	r1, #0
  40:	movt	r1, #0
  44:	mov	r0, r6
  48:	bl	0 <strcmp>
  4c:	cmp	r0, r8
  50:	bne	60 <main+0x60>
  54:	bl	0 <main>
  58:	mov	r0, #0
  5c:	bl	0 <exit>
  60:	movw	r1, #0
  64:	movt	r1, #0
  68:	mov	r0, r6
  6c:	bl	0 <strcmp>
  70:	cmp	r0, r8
  74:	beq	54 <main+0x54>
  78:	movw	r1, #0
  7c:	movt	r1, #0
  80:	mov	r0, r6
  84:	bl	0 <strcmp>
  88:	cmp	r0, #0
  8c:	beq	1d4 <main+0x1d4>
  90:	movw	r1, #0
  94:	movt	r1, #0
  98:	mov	r0, r6
  9c:	bl	0 <strcmp>
  a0:	cmp	r0, #0
  a4:	beq	1d4 <main+0x1d4>
  a8:	cmp	r5, #2
  ac:	ble	204 <main+0x204>
  b0:	mov	r0, r6
  b4:	movw	r1, #0
  b8:	movt	r1, #0
  bc:	bl	0 <strcmp>
  c0:	subs	r6, r0, #0
  c4:	beq	2fc <main+0x2fc>
  c8:	mov	r1, r8
  cc:	movw	r2, #0
  d0:	movt	r2, #0
  d4:	ldr	r0, [r7]
  d8:	bl	0 <coda_set_definition_path_conditional>
  dc:	cmp	r0, #0
  e0:	bne	330 <main+0x330>
  e4:	mov	fp, #1
  e8:	movw	r2, #0
  ec:	movt	r2, #0
  f0:	movw	r3, #0
  f4:	movt	r3, #0
  f8:	str	r2, [sp, #8]
  fc:	movw	r2, #0
 100:	movt	r2, #0
 104:	movw	r9, #0
 108:	movt	r9, #0
 10c:	str	r2, [sp, #12]
 110:	movw	r2, #0
 114:	movt	r2, #0
 118:	mov	sl, #1
 11c:	str	r4, [sp, #16]
 120:	mov	r4, r3
 124:	str	r2, [sp, #28]
 128:	movw	r2, #0
 12c:	movt	r2, #0
 130:	str	r2, [sp, #24]
 134:	mov	r2, #0
 138:	str	r2, [sp, #20]
 13c:	b	1b0 <main+0x1b0>
 140:	mov	r1, r4
 144:	mov	r0, r6
 148:	bl	0 <strcmp>
 14c:	cmp	r0, #0
 150:	beq	1cc <main+0x1cc>
 154:	mov	r0, r6
 158:	ldr	r1, [sp, #8]
 15c:	bl	0 <strcmp>
 160:	cmp	r0, #0
 164:	beq	17c <main+0x17c>
 168:	mov	r0, r6
 16c:	ldr	r1, [sp, #24]
 170:	bl	0 <strcmp>
 174:	cmp	r0, #0
 178:	bne	290 <main+0x290>
 17c:	add	r2, fp, #1
 180:	cmp	r2, r5
 184:	bge	290 <main+0x290>
 188:	add	r8, r7, r8
 18c:	ldr	r1, [r8, #4]
 190:	ldrb	r0, [r1]
 194:	cmp	r0, #45	; 0x2d
 198:	movne	fp, r2
 19c:	strne	r1, [sp, #20]
 1a0:	beq	290 <main+0x290>
 1a4:	add	fp, fp, #1
 1a8:	cmp	r5, fp
 1ac:	ble	2c8 <main+0x2c8>
 1b0:	ldr	r6, [r7, fp, lsl #2]
 1b4:	mov	r1, r9
 1b8:	lsl	r8, fp, #2
 1bc:	mov	r0, r6
 1c0:	bl	0 <strcmp>
 1c4:	cmp	r0, #0
 1c8:	bne	140 <main+0x140>
 1cc:	mov	sl, r0
 1d0:	b	1a4 <main+0x1a4>
 1d4:	bl	0 <coda_get_libcoda_version>
 1d8:	mov	r1, r0
 1dc:	movw	r0, #0
 1e0:	movt	r0, #0
 1e4:	bl	0 <printf>
 1e8:	movw	r0, #0
 1ec:	movt	r0, #0
 1f0:	bl	0 <puts>
 1f4:	mov	r0, #10
 1f8:	bl	0 <putchar>
 1fc:	mov	r0, #0
 200:	bl	0 <exit>
 204:	mov	r1, r8
 208:	movw	r2, #0
 20c:	movt	r2, #0
 210:	ldr	r0, [r7]
 214:	bl	0 <coda_set_definition_path_conditional>
 218:	cmp	r0, #0
 21c:	bne	330 <main+0x330>
 220:	cmp	r5, #2
 224:	movne	fp, #1
 228:	movne	sl, fp
 22c:	strne	r0, [sp, #20]
 230:	beq	e4 <main+0xe4>
 234:	bl	0 <coda_init>
 238:	subs	r4, r0, #0
 23c:	bne	330 <main+0x330>
 240:	mov	r0, sl
 244:	bl	0 <coda_set_option_perform_conversions>
 248:	add	r2, r7, fp, lsl #2
 24c:	sub	r1, r5, fp
 250:	movw	r3, #0
 254:	movt	r3, #0
 258:	str	r4, [sp]
 25c:	ldr	r0, [sp, #20]
 260:	bl	0 <coda_match_filefilter>
 264:	subs	r4, r0, #0
 268:	bne	330 <main+0x330>
 26c:	bl	0 <coda_done>
 270:	mov	r0, r4
 274:	add	sp, sp, #36	; 0x24
 278:	ldrd	r4, [sp]
 27c:	ldrd	r6, [sp, #8]
 280:	ldrd	r8, [sp, #16]
 284:	ldrd	sl, [sp, #24]
 288:	add	sp, sp, #32
 28c:	pop	{pc}		; (ldr pc, [sp], #4)
 290:	mov	r0, r6
 294:	ldr	r1, [sp, #12]
 298:	bl	0 <strcmp>
 29c:	cmp	r0, #0
 2a0:	beq	2b8 <main+0x2b8>
 2a4:	mov	r0, r6
 2a8:	ldr	r1, [sp, #28]
 2ac:	bl	0 <strcmp>
 2b0:	cmp	r0, #0
 2b4:	bne	320 <main+0x320>
 2b8:	ldr	r3, [sp, #16]
 2bc:	mov	r2, #1
 2c0:	str	r2, [r3]
 2c4:	b	1a4 <main+0x1a4>
 2c8:	cmp	r5, fp
 2cc:	bne	234 <main+0x234>
 2d0:	movw	r3, #0
 2d4:	movt	r3, #0
 2d8:	mov	r2, #25
 2dc:	mov	r1, #1
 2e0:	ldr	r3, [r3]
 2e4:	movw	r0, #0
 2e8:	movt	r0, #0
 2ec:	bl	0 <fwrite>
 2f0:	bl	0 <main>
 2f4:	mov	r0, #1
 2f8:	bl	0 <exit>
 2fc:	ldr	r0, [r7, #8]
 300:	bl	0 <coda_set_definition_path>
 304:	cmp	r5, #3
 308:	moveq	fp, r5
 30c:	moveq	sl, #1
 310:	streq	r6, [sp, #20]
 314:	beq	2c8 <main+0x2c8>
 318:	mov	fp, #3
 31c:	b	e8 <main+0xe8>
 320:	ldrb	r2, [r6]
 324:	cmp	r2, #45	; 0x2d
 328:	bne	234 <main+0x234>
 32c:	b	2d0 <main+0x2d0>
 330:	movw	r3, #0
 334:	movt	r3, #0
 338:	ldr	r4, [r3]
 33c:	bl	0 <coda_get_errno>
 340:	ldr	r0, [r0]
 344:	bl	0 <coda_errno_to_string>
 348:	mov	r2, r0
 34c:	movw	r1, #0
 350:	movt	r1, #0
 354:	mov	r0, r4
 358:	bl	0 <fprintf>
 35c:	mov	r0, #1
 360:	bl	0 <exit>
