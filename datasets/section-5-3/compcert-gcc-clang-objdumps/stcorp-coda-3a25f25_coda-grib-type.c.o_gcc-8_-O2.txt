
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_type_delete>:
   0:	str	r4, [sp, #-8]!
   4:	subs	r4, r0, #0
   8:	str	lr, [sp, #4]
   c:	beq	84 <coda_grib_type_delete+0x84>
  10:	ldr	r3, [r4]
  14:	cmp	r3, #105	; 0x69
  18:	bne	a4 <coda_grib_type_delete+0xa4>
  1c:	ldr	r0, [r4, #4]
  20:	ldr	r3, [r0, #8]
  24:	cmp	r3, #1
  28:	beq	44 <coda_grib_type_delete+0x44>
  2c:	bl	0 <coda_type_release>
  30:	mov	r0, r4
  34:	ldr	r4, [sp]
  38:	ldr	lr, [sp, #4]
  3c:	add	sp, sp, #8
  40:	b	0 <free>
  44:	ldr	r0, [r4, #12]
  48:	cmp	r0, #0
  4c:	beq	54 <coda_grib_type_delete+0x54>
  50:	bl	0 <coda_dynamic_type_delete>
  54:	ldr	r0, [r4, #56]	; 0x38
  58:	cmp	r0, #0
  5c:	beq	64 <coda_grib_type_delete+0x64>
  60:	bl	0 <free>
  64:	ldr	r0, [r4, #60]	; 0x3c
  68:	cmp	r0, #0
  6c:	beq	74 <coda_grib_type_delete+0x74>
  70:	bl	0 <free>
  74:	ldr	r0, [r4, #4]
  78:	cmp	r0, #0
  7c:	beq	30 <coda_grib_type_delete+0x30>
  80:	b	2c <coda_grib_type_delete+0x2c>
  84:	movw	r3, #0
  88:	movt	r3, #0
  8c:	movw	r1, #0
  90:	movt	r1, #0
  94:	movw	r0, #0
  98:	movt	r0, #0
  9c:	mov	r2, #61	; 0x3d
  a0:	bl	0 <__assert_fail>
  a4:	movw	r3, #0
  a8:	movt	r3, #0
  ac:	movw	r1, #0
  b0:	movt	r1, #0
  b4:	movw	r0, #0
  b8:	movt	r0, #0
  bc:	mov	r2, #62	; 0x3e
  c0:	bl	0 <__assert_fail>

000000c4 <coda_grib_value_array_new>:
  c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
  c8:	subs	r5, r0, #0
  cc:	strd	r6, [sp, #8]
  d0:	strd	r8, [sp, #16]
  d4:	strd	sl, [sp, #24]
  d8:	str	lr, [sp, #32]
  dc:	sub	sp, sp, #12
  e0:	beq	204 <coda_grib_value_array_new+0x140>
  e4:	ldr	r6, [r5, #40]	; 0x28
  e8:	ldr	r0, [r6, #8]
  ec:	cmp	r0, #3
  f0:	bne	1b8 <coda_grib_value_array_new+0xf4>
  f4:	mov	r0, #64	; 0x40
  f8:	mov	r8, r1
  fc:	mov	r9, r2
 100:	mov	r7, r3
 104:	bl	0 <malloc>
 108:	subs	r4, r0, #0
 10c:	beq	1dc <coda_grib_value_array_new+0x118>
 110:	ldr	r0, [r5, #4]
 114:	lsl	r3, r7, #3
 118:	mov	r1, #0
 11c:	lsl	r2, r9, #3
 120:	mov	sl, #0
 124:	mov	fp, #0
 128:	orr	r3, r3, r9, lsr #29
 12c:	mov	r7, #105	; 0x69
 130:	str	r7, [r4]
 134:	add	r0, r0, #1
 138:	stmib	r4, {r5, r8}
 13c:	strd	r2, [r4, #16]
 140:	mov	r2, #0
 144:	str	r0, [r5, #4]
 148:	mov	r0, #32
 14c:	str	r2, [r4, #24]
 150:	str	r0, [r4, #28]
 154:	mov	r0, #8
 158:	str	r2, [r4, #32]
 15c:	str	r1, [r4, #36]	; 0x24
 160:	strd	sl, [r4, #40]	; 0x28
 164:	strd	sl, [r4, #48]	; 0x30
 168:	str	r2, [r4, #56]	; 0x38
 16c:	str	r2, [r4, #60]	; 0x3c
 170:	bl	0 <malloc>
 174:	cmp	r0, #0
 178:	mov	r3, r0
 17c:	str	r0, [r4, #12]
 180:	beq	228 <coda_grib_value_array_new+0x164>
 184:	ldr	r2, [r6, #4]
 188:	str	r7, [r0]
 18c:	str	r6, [r0, #4]
 190:	add	r3, r2, #1
 194:	str	r3, [r6, #4]
 198:	mov	r0, r4
 19c:	add	sp, sp, #12
 1a0:	ldrd	r4, [sp]
 1a4:	ldrd	r6, [sp, #8]
 1a8:	ldrd	r8, [sp, #16]
 1ac:	ldrd	sl, [sp, #24]
 1b0:	add	sp, sp, #32
 1b4:	pop	{pc}		; (ldr pc, [sp], #4)
 1b8:	bl	0 <coda_type_get_class_name>
 1bc:	mov	r2, r0
 1c0:	movw	r1, #0
 1c4:	movt	r1, #0
 1c8:	movw	r0, #65136	; 0xfe70
 1cc:	movt	r0, #65535	; 0xffff
 1d0:	mov	r4, #0
 1d4:	bl	0 <coda_set_error>
 1d8:	b	198 <coda_grib_value_array_new+0xd4>
 1dc:	mov	r0, #106	; 0x6a
 1e0:	movw	r3, #0
 1e4:	movt	r3, #0
 1e8:	movw	r1, #0
 1ec:	movt	r1, #0
 1f0:	mov	r2, #64	; 0x40
 1f4:	str	r0, [sp]
 1f8:	mvn	r0, #0
 1fc:	bl	0 <coda_set_error>
 200:	b	198 <coda_grib_value_array_new+0xd4>
 204:	movw	r2, #0
 208:	movt	r2, #0
 20c:	movw	r1, #0
 210:	movt	r1, #0
 214:	mov	r3, #92	; 0x5c
 218:	mvn	r0, #99	; 0x63
 21c:	mov	r4, r5
 220:	bl	0 <coda_set_error>
 224:	b	198 <coda_grib_value_array_new+0xd4>
 228:	mov	r0, r4
 22c:	mov	r4, r3
 230:	bl	0 <coda_grib_type_delete>
 234:	mov	r0, #130	; 0x82
 238:	movw	r3, #0
 23c:	movt	r3, #0
 240:	movw	r1, #0
 244:	movt	r1, #0
 248:	mov	r2, #8
 24c:	str	r0, [sp]
 250:	mvn	r0, #0
 254:	bl	0 <coda_set_error>
 258:	b	198 <coda_grib_value_array_new+0xd4>

0000025c <coda_grib_value_array_simple_packing_new>:
 25c:	strd	r4, [sp, #-20]!	; 0xffffffec
 260:	mov	r5, r1
 264:	strd	r6, [sp, #8]
 268:	str	lr, [sp, #16]
 26c:	vpush	{d8}
 270:	sub	sp, sp, #12
 274:	vmov.f32	s16, s0
 278:	ldrsh	r6, [sp, #44]	; 0x2c
 27c:	ldrsh	r7, [sp, #48]	; 0x30
 280:	bl	c4 <coda_grib_value_array_new>
 284:	subs	r4, r0, #0
 288:	beq	408 <coda_grib_value_array_simple_packing_new+0x1ac>
 28c:	ldr	r2, [sp, #40]	; 0x28
 290:	mov	r3, #1
 294:	cmp	r7, #0
 298:	str	r3, [r4, #24]
 29c:	strh	r6, [r4, #32]
 2a0:	strh	r7, [r4, #34]	; 0x22
 2a4:	str	r2, [r4, #28]
 2a8:	vstr	s16, [r4, #36]	; 0x24
 2ac:	blt	478 <coda_grib_value_array_simple_packing_new+0x21c>
 2b0:	sub	r3, r7, #1
 2b4:	vldr	d7, [pc, #564]	; 4f0 <coda_grib_value_array_simple_packing_new+0x294>
 2b8:	beq	2cc <coda_grib_value_array_simple_packing_new+0x70>
 2bc:	sub	r3, r3, #1
 2c0:	vadd.f64	d7, d7, d7
 2c4:	cmn	r3, #1
 2c8:	bne	2bc <coda_grib_value_array_simple_packing_new+0x60>
 2cc:	cmp	r6, #0
 2d0:	vcvt.f64.f32	d8, s16
 2d4:	bgt	424 <coda_grib_value_array_simple_packing_new+0x1c8>
 2d8:	mvn	r3, r6
 2dc:	beq	49c <coda_grib_value_array_simple_packing_new+0x240>
 2e0:	vldr	d6, [pc, #520]	; 4f0 <coda_grib_value_array_simple_packing_new+0x294>
 2e4:	mov	r2, r3
 2e8:	vldr	d5, [pc, #520]	; 4f8 <coda_grib_value_array_simple_packing_new+0x29c>
 2ec:	sub	r2, r2, #1
 2f0:	vmul.f64	d6, d6, d5
 2f4:	cmn	r2, #1
 2f8:	bne	2ec <coda_grib_value_array_simple_packing_new+0x90>
 2fc:	vmul.f64	d7, d6, d7
 300:	vldr	d5, [pc, #496]	; 4f8 <coda_grib_value_array_simple_packing_new+0x29c>
 304:	vldr	d6, [pc, #484]	; 4f0 <coda_grib_value_array_simple_packing_new+0x294>
 308:	vstr	d7, [r4, #40]	; 0x28
 30c:	sub	r3, r3, #1
 310:	vmul.f64	d6, d6, d5
 314:	cmn	r3, #1
 318:	bne	30c <coda_grib_value_array_simple_packing_new+0xb0>
 31c:	vmul.f64	d8, d8, d6
 320:	ldr	r3, [sp, #52]	; 0x34
 324:	mov	r6, #0
 328:	vstr	d8, [r4, #48]	; 0x30
 32c:	str	r6, [r4, #56]	; 0x38
 330:	str	r6, [r4, #60]	; 0x3c
 334:	cmp	r3, r6
 338:	beq	408 <coda_grib_value_array_simple_packing_new+0x1ac>
 33c:	ands	r3, r5, #7
 340:	movne	r3, #1
 344:	add	r5, r3, r5, asr #3
 348:	mov	r0, r5
 34c:	bl	0 <malloc>
 350:	cmp	r0, r6
 354:	mov	r3, r0
 358:	str	r0, [r4, #56]	; 0x38
 35c:	beq	4a4 <coda_grib_value_array_simple_packing_new+0x248>
 360:	mov	r2, r5
 364:	ldr	r1, [sp, #52]	; 0x34
 368:	bl	0 <memcpy>
 36c:	mov	r0, r5
 370:	bl	0 <malloc>
 374:	cmp	r0, #0
 378:	mov	r1, r0
 37c:	str	r0, [r4, #60]	; 0x3c
 380:	beq	4d8 <coda_grib_value_array_simple_packing_new+0x27c>
 384:	cmp	r5, #0
 388:	movgt	r0, r6
 38c:	bgt	398 <coda_grib_value_array_simple_packing_new+0x13c>
 390:	b	408 <coda_grib_value_array_simple_packing_new+0x1ac>
 394:	ldr	r1, [r4, #60]	; 0x3c
 398:	tst	r0, #15
 39c:	ldr	r3, [r4, #56]	; 0x38
 3a0:	ldrb	r2, [r3, r0]
 3a4:	and	r3, r2, #1
 3a8:	ubfx	ip, r2, #6, #1
 3ac:	add	r3, r3, r2, lsr #7
 3b0:	ubfx	lr, r2, #5, #1
 3b4:	add	r3, r3, ip
 3b8:	ubfx	ip, r2, #4, #1
 3bc:	add	r3, r3, lr
 3c0:	ubfx	lr, r2, #3, #1
 3c4:	add	r3, r3, ip
 3c8:	ubfx	ip, r2, #2, #1
 3cc:	add	r3, r3, lr
 3d0:	ubfx	r2, r2, #1, #1
 3d4:	add	r3, r3, ip
 3d8:	add	r3, r3, r2
 3dc:	strb	r3, [r1, r0]
 3e0:	beq	3fc <coda_grib_value_array_simple_packing_new+0x1a0>
 3e4:	ldr	r3, [r4, #60]	; 0x3c
 3e8:	add	r2, r3, r0
 3ec:	ldrb	r1, [r3, r0]
 3f0:	ldrb	r2, [r2, #-1]
 3f4:	add	r2, r2, r1
 3f8:	strb	r2, [r3, r0]
 3fc:	add	r0, r0, #1
 400:	cmp	r5, r0
 404:	bne	394 <coda_grib_value_array_simple_packing_new+0x138>
 408:	mov	r0, r4
 40c:	add	sp, sp, #12
 410:	vpop	{d8}
 414:	ldrd	r4, [sp]
 418:	ldrd	r6, [sp, #8]
 41c:	add	sp, sp, #16
 420:	pop	{pc}		; (ldr pc, [sp], #4)
 424:	vldr	d5, [pc, #196]	; 4f0 <coda_grib_value_array_simple_packing_new+0x294>
 428:	sub	r3, r6, #1
 42c:	mov	r2, r3
 430:	vldr	d6, [pc, #192]	; 4f8 <coda_grib_value_array_simple_packing_new+0x29c>
 434:	sub	r2, r2, #1
 438:	vmul.f64	d5, d5, d6
 43c:	cmn	r2, #1
 440:	bne	434 <coda_grib_value_array_simple_packing_new+0x1d8>
 444:	vldr	d6, [pc, #164]	; 4f0 <coda_grib_value_array_simple_packing_new+0x294>
 448:	vldr	d4, [pc, #168]	; 4f8 <coda_grib_value_array_simple_packing_new+0x29c>
 44c:	vdiv.f64	d3, d6, d5
 450:	vmul.f64	d7, d3, d7
 454:	vstr	d7, [r4, #40]	; 0x28
 458:	sub	r3, r3, #1
 45c:	vmul.f64	d6, d6, d4
 460:	cmn	r3, #1
 464:	bne	458 <coda_grib_value_array_simple_packing_new+0x1fc>
 468:	vldr	d5, [pc, #128]	; 4f0 <coda_grib_value_array_simple_packing_new+0x294>
 46c:	vdiv.f64	d7, d5, d6
 470:	vmul.f64	d8, d8, d7
 474:	b	320 <coda_grib_value_array_simple_packing_new+0xc4>
 478:	vldr	d6, [pc, #112]	; 4f0 <coda_grib_value_array_simple_packing_new+0x294>
 47c:	mvn	r3, r7
 480:	sub	r3, r3, #1
 484:	vadd.f64	d6, d6, d6
 488:	cmn	r3, #1
 48c:	bne	480 <coda_grib_value_array_simple_packing_new+0x224>
 490:	vldr	d5, [pc, #88]	; 4f0 <coda_grib_value_array_simple_packing_new+0x294>
 494:	vdiv.f64	d7, d5, d6
 498:	b	2cc <coda_grib_value_array_simple_packing_new+0x70>
 49c:	vstr	d7, [r4, #40]	; 0x28
 4a0:	b	320 <coda_grib_value_array_simple_packing_new+0xc4>
 4a4:	mov	r0, r4
 4a8:	mov	r4, r3
 4ac:	bl	0 <coda_grib_type_delete>
 4b0:	mov	r0, #173	; 0xad
 4b4:	mov	r2, r5
 4b8:	movw	r3, #0
 4bc:	movt	r3, #0
 4c0:	movw	r1, #0
 4c4:	movt	r1, #0
 4c8:	str	r0, [sp]
 4cc:	mvn	r0, #0
 4d0:	bl	0 <coda_set_error>
 4d4:	b	408 <coda_grib_value_array_simple_packing_new+0x1ac>
 4d8:	mov	r0, r4
 4dc:	mov	r4, r1
 4e0:	bl	0 <coda_grib_type_delete>
 4e4:	mov	r0, #183	; 0xb7
 4e8:	b	4b4 <coda_grib_value_array_simple_packing_new+0x258>
 4ec:	nop	{0}
 4f0:	.word	0x00000000
 4f4:	.word	0x3ff00000
 4f8:	.word	0x00000000
 4fc:	.word	0x40240000
