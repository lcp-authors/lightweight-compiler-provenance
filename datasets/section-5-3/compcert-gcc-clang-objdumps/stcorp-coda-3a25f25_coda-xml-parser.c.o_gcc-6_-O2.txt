
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml-parser.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <not_standalone_handler>:
       0:	mov	r0, #0
       4:	bx	lr

00000008 <attribute_record_new>:
       8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       c:	sub	sp, sp, #28
      10:	subs	r6, r0, #0
      14:	ldr	r9, [sp, #64]	; 0x40
      18:	beq	34c <attribute_record_new+0x344>
      1c:	mov	fp, r1
      20:	mov	r1, #0
      24:	mov	r4, r2
      28:	mov	r5, r3
      2c:	bl	0 <coda_mem_record_new>
      30:	mov	r8, r0
      34:	mov	r0, r4
      38:	bl	0 <coda_element_name_from_xml_name>
      3c:	cmp	r4, r0
      40:	beq	cc <attribute_record_new+0xc4>
      44:	ldr	r1, [pc, #828]	; 388 <attribute_record_new+0x380>
      48:	ldr	r0, [r6, #44]	; 0x2c
      4c:	bl	0 <coda_hashtable_get_index_from_name>
      50:	cmp	r9, #0
      54:	mov	r2, r0
      58:	beq	1f4 <attribute_record_new+0x1ec>
      5c:	cmp	r0, #0
      60:	blt	2d0 <attribute_record_new+0x2c8>
      64:	ldr	r3, [r8, #20]
      68:	ldr	r7, [r3, r0, lsl #2]
      6c:	cmp	r7, #0
      70:	bne	374 <attribute_record_new+0x36c>
      74:	ldr	r3, [r6, #52]	; 0x34
      78:	mov	r0, r4
      7c:	ldr	r3, [r3, r2, lsl #2]
      80:	ldr	sl, [r3, #8]
      84:	bl	0 <coda_element_name_from_xml_name>
      88:	str	r4, [sp]
      8c:	mov	r2, fp
      90:	mov	r1, r7
      94:	sub	r3, r0, r4
      98:	sub	r3, r3, #1
      9c:	mov	r0, sl
      a0:	bl	0 <coda_mem_data_new>
      a4:	mov	r3, r7
      a8:	mov	r4, r0
      ac:	cmp	r4, #0
      b0:	beq	164 <attribute_record_new+0x15c>
      b4:	mov	r2, r4
      b8:	ldr	r1, [pc, #712]	; 388 <attribute_record_new+0x380>
      bc:	mov	r0, r8
      c0:	bl	0 <coda_mem_record_add_field>
      c4:	cmp	r0, #0
      c8:	bne	2c4 <attribute_record_new+0x2bc>
      cc:	ldr	r4, [r5]
      d0:	cmp	r4, #0
      d4:	movne	sl, #0
      d8:	bne	fc <attribute_record_new+0xf4>
      dc:	b	268 <attribute_record_new+0x260>
      e0:	ldr	r3, [r8, #20]
      e4:	ldr	r3, [r3, r7, lsl #2]
      e8:	cmp	r3, #0
      ec:	beq	118 <attribute_record_new+0x110>
      f0:	ldr	r4, [r5, #8]!
      f4:	cmp	r4, #0
      f8:	beq	268 <attribute_record_new+0x260>
      fc:	mov	r1, r4
     100:	ldr	r0, [r6, #44]	; 0x2c
     104:	bl	0 <coda_hashtable_get_index_from_name>
     108:	subs	r7, r0, #0
     10c:	blt	17c <attribute_record_new+0x174>
     110:	cmp	r9, #0
     114:	bne	e0 <attribute_record_new+0xd8>
     118:	ldr	r1, [r6, #52]	; 0x34
     11c:	ldr	r3, [r5, #4]
     120:	mov	r2, fp
     124:	ldr	r0, [r1, r7, lsl #2]
     128:	mov	r1, sl
     12c:	ldr	r0, [r0, #8]
     130:	bl	0 <coda_mem_string_new>
     134:	mov	r3, sl
     138:	mov	r7, r0
     13c:	cmp	r7, #0
     140:	beq	164 <attribute_record_new+0x15c>
     144:	mov	r1, r4
     148:	mov	r2, r7
     14c:	mov	r0, r8
     150:	bl	0 <coda_mem_record_add_field>
     154:	cmp	r0, #0
     158:	beq	f0 <attribute_record_new+0xe8>
     15c:	mov	r0, r7
     160:	bl	0 <coda_dynamic_type_delete>
     164:	mov	r0, r8
     168:	bl	0 <coda_dynamic_type_delete>
     16c:	mov	r8, #0
     170:	mov	r0, r8
     174:	add	sp, sp, #28
     178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     17c:	mov	r0, r4
     180:	ldr	r7, [r6, #44]	; 0x2c
     184:	bl	0 <coda_element_name_from_xml_name>
     188:	mov	r1, r0
     18c:	mov	r0, r7
     190:	bl	0 <coda_hashtable_get_index_from_name>
     194:	subs	r7, r0, #0
     198:	blt	1b4 <attribute_record_new+0x1ac>
     19c:	mov	r0, r4
     1a0:	bl	0 <coda_element_name_from_xml_name>
     1a4:	cmp	r9, #0
     1a8:	mov	r4, r0
     1ac:	beq	118 <attribute_record_new+0x110>
     1b0:	b	e0 <attribute_record_new+0xd8>
     1b4:	cmp	r9, #0
     1b8:	beq	360 <attribute_record_new+0x358>
     1bc:	mov	r0, #2
     1c0:	bl	0 <coda_type_text_new>
     1c4:	subs	r3, r0, #0
     1c8:	str	r3, [sp, #12]
     1cc:	beq	164 <attribute_record_new+0x15c>
     1d0:	ldr	r3, [r5, #4]
     1d4:	mov	r2, fp
     1d8:	mov	r1, sl
     1dc:	bl	0 <coda_mem_string_new>
     1e0:	mov	r7, r0
     1e4:	ldr	r0, [sp, #12]
     1e8:	bl	0 <coda_type_release>
     1ec:	mov	r3, r9
     1f0:	b	13c <attribute_record_new+0x134>
     1f4:	cmp	r0, #0
     1f8:	blt	cc <attribute_record_new+0xc4>
     1fc:	ldr	r3, [r6, #52]	; 0x34
     200:	mov	r0, r4
     204:	ldr	r3, [r3, r2, lsl #2]
     208:	ldr	r7, [r3, #8]
     20c:	bl	0 <coda_element_name_from_xml_name>
     210:	str	r4, [sp]
     214:	mov	r2, fp
     218:	mov	r1, r9
     21c:	sub	r3, r0, r4
     220:	sub	r3, r3, #1
     224:	mov	r0, r7
     228:	bl	0 <coda_mem_data_new>
     22c:	subs	r4, r0, #0
     230:	beq	164 <attribute_record_new+0x15c>
     234:	mov	r3, r9
     238:	mov	r2, r4
     23c:	ldr	r1, [pc, #324]	; 388 <attribute_record_new+0x380>
     240:	mov	r0, r8
     244:	bl	0 <coda_mem_record_add_field>
     248:	cmp	r0, #0
     24c:	beq	cc <attribute_record_new+0xc4>
     250:	mov	r0, r4
     254:	bl	0 <coda_dynamic_type_delete>
     258:	mov	r0, r8
     25c:	bl	0 <coda_dynamic_type_delete>
     260:	mov	r8, r9
     264:	b	170 <attribute_record_new+0x168>
     268:	ldr	ip, [r6, #48]	; 0x30
     26c:	cmp	ip, #0
     270:	ble	170 <attribute_record_new+0x168>
     274:	ldr	r3, [r6, #52]	; 0x34
     278:	mov	r1, #0
     27c:	sub	r3, r3, #4
     280:	mov	lr, #1
     284:	b	294 <attribute_record_new+0x28c>
     288:	add	r1, r1, #1
     28c:	cmp	r1, ip
     290:	beq	170 <attribute_record_new+0x168>
     294:	ldr	r2, [r3, #4]!
     298:	ldrb	r0, [r2, #16]
     29c:	cmp	r0, #0
     2a0:	bne	288 <attribute_record_new+0x280>
     2a4:	ldr	r0, [r8, #20]
     2a8:	ldr	r0, [r0, r1, lsl #2]
     2ac:	cmp	r0, #0
     2b0:	bne	288 <attribute_record_new+0x280>
     2b4:	cmp	r9, #0
     2b8:	beq	318 <attribute_record_new+0x310>
     2bc:	strb	lr, [r2, #16]
     2c0:	b	288 <attribute_record_new+0x280>
     2c4:	mov	r0, r4
     2c8:	bl	0 <coda_dynamic_type_delete>
     2cc:	b	164 <attribute_record_new+0x15c>
     2d0:	mov	r0, #2
     2d4:	bl	0 <coda_type_text_new>
     2d8:	subs	r7, r0, #0
     2dc:	beq	164 <attribute_record_new+0x15c>
     2e0:	mov	r0, r4
     2e4:	bl	0 <coda_element_name_from_xml_name>
     2e8:	str	r4, [sp]
     2ec:	mov	r2, fp
     2f0:	mov	r1, #0
     2f4:	sub	r3, r0, r4
     2f8:	sub	r3, r3, #1
     2fc:	mov	r0, r7
     300:	bl	0 <coda_mem_data_new>
     304:	mov	r4, r0
     308:	mov	r0, r7
     30c:	bl	0 <coda_type_release>
     310:	mov	r3, r9
     314:	b	ac <attribute_record_new+0xa4>
     318:	add	r2, sp, #20
     31c:	mov	r0, r6
     320:	bl	0 <coda_type_get_record_field_real_name>
     324:	ldr	r2, [sp, #20]
     328:	ldr	r1, [pc, #92]	; 38c <attribute_record_new+0x384>
     32c:	ldr	r0, [pc, #92]	; 390 <attribute_record_new+0x388>
     330:	bl	0 <coda_set_error>
     334:	mov	r0, r8
     338:	bl	0 <coda_dynamic_type_delete>
     33c:	mov	r8, r9
     340:	mov	r0, r8
     344:	add	sp, sp, #28
     348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     34c:	ldr	r3, [pc, #64]	; 394 <attribute_record_new+0x38c>
     350:	mov	r2, #97	; 0x61
     354:	ldr	r1, [pc, #60]	; 398 <attribute_record_new+0x390>
     358:	ldr	r0, [pc, #60]	; 39c <attribute_record_new+0x394>
     35c:	bl	0 <__assert_fail>
     360:	cmn	r7, #1
     364:	bne	118 <attribute_record_new+0x110>
     368:	ldr	r2, [r5]
     36c:	ldr	r1, [pc, #44]	; 3a0 <attribute_record_new+0x398>
     370:	b	32c <attribute_record_new+0x324>
     374:	ldr	r3, [pc, #24]	; 394 <attribute_record_new+0x38c>
     378:	mov	r2, #123	; 0x7b
     37c:	ldr	r1, [pc, #20]	; 398 <attribute_record_new+0x390>
     380:	ldr	r0, [pc, #28]	; 3a4 <attribute_record_new+0x39c>
     384:	bl	0 <__assert_fail>
     388:	.word	0x00000064
     38c:	.word	0x000000c0
     390:	.word	0xfffffed4
	...
     39c:	.word	0x00000050
     3a0:	.word	0x0000009c
     3a4:	.word	0x0000006c

000003a8 <start_element_handler>:
     3a8:	ldr	r3, [r0, #12]
     3ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3b0:	mov	r7, r2
     3b4:	add	r2, r0, r3, lsl #2
     3b8:	sub	sp, sp, #20
     3bc:	ldr	r5, [r2, #144]	; 0x90
     3c0:	mov	r4, r0
     3c4:	cmp	r5, #0
     3c8:	beq	510 <start_element_handler+0x168>
     3cc:	ldr	r0, [r5, #4]
     3d0:	ldr	r5, [r0]
     3d4:	cmp	r5, #2
     3d8:	beq	418 <start_element_handler+0x70>
     3dc:	mov	r0, r5
     3e0:	ldr	r6, [r2, #400]	; 0x190
     3e4:	bl	0 <coda_type_get_format_name>
     3e8:	ldr	r1, [pc, #1204]	; 8a4 <start_element_handler+0x4fc>
     3ec:	mov	r2, r6
     3f0:	mov	r3, r0
     3f4:	ldr	r0, [pc, #1196]	; 8a8 <start_element_handler+0x500>
     3f8:	bl	0 <coda_set_error>
     3fc:	mov	r1, #0
     400:	ldr	r0, [r4]
     404:	bl	0 <coda_XML_StopParser>
     408:	mov	r3, #1
     40c:	str	r3, [r4, #4]
     410:	add	sp, sp, #20
     414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     418:	add	r3, r3, #1
     41c:	mov	r8, #0
     420:	cmp	r3, #31
     424:	str	r3, [r4, #12]
     428:	str	r8, [r4, #536]	; 0x218
     42c:	ble	444 <start_element_handler+0x9c>
     430:	mov	r2, #32
     434:	ldr	r1, [pc, #1136]	; 8ac <start_element_handler+0x504>
     438:	ldr	r0, [pc, #1128]	; 8a8 <start_element_handler+0x500>
     43c:	bl	0 <coda_set_error>
     440:	b	3fc <start_element_handler+0x54>
     444:	ldr	r3, [r2, #144]	; 0x90
     448:	str	r8, [r2, #148]	; 0x94
     44c:	str	r3, [sp, #12]
     450:	ldr	r3, [r3, #4]
     454:	mov	r6, r1
     458:	ldr	r0, [r3, #44]	; 0x2c
     45c:	bl	0 <coda_hashtable_get_index_from_name>
     460:	subs	r9, r0, #0
     464:	blt	524 <start_element_handler+0x17c>
     468:	ldr	r0, [sp, #12]
     46c:	ldr	r2, [r4, #12]
     470:	mov	r1, r9
     474:	ldr	r0, [r0, #4]
     478:	add	lr, r4, r2, lsl #2
     47c:	add	r2, r2, #100	; 0x64
     480:	ldr	ip, [r0, #52]	; 0x34
     484:	add	r2, r4, r2, lsl #2
     488:	str	r9, [lr, #272]	; 0x110
     48c:	ldr	ip, [ip, r9, lsl #2]
     490:	lsl	r9, r9, #2
     494:	add	ip, ip, #8
     498:	str	ip, [lr, #16]
     49c:	bl	0 <coda_type_get_record_field_real_name>
     4a0:	subs	r5, r0, #0
     4a4:	bne	3fc <start_element_handler+0x54>
     4a8:	ldr	r2, [r4, #12]
     4ac:	add	r3, r4, r2, lsl #2
     4b0:	ldr	r1, [r3, #16]
     4b4:	ldr	r8, [r1]
     4b8:	ldr	sl, [r8, #8]
     4bc:	cmp	sl, #1
     4c0:	beq	798 <start_element_handler+0x3f0>
     4c4:	ldr	r2, [sp, #12]
     4c8:	ldr	r2, [r2, #20]
     4cc:	ldr	r2, [r2, r9]
     4d0:	cmp	r2, #0
     4d4:	beq	608 <start_element_handler+0x260>
     4d8:	ldr	sl, [r4, #532]	; 0x214
     4dc:	cmp	sl, #0
     4e0:	beq	580 <start_element_handler+0x1d8>
     4e4:	mov	r0, #2
     4e8:	bl	0 <coda_type_array_new>
     4ec:	subs	sl, r0, #0
     4f0:	beq	3fc <start_element_handler+0x54>
     4f4:	mov	r1, r8
     4f8:	bl	0 <coda_type_array_set_base_type>
     4fc:	subs	fp, r0, #0
     500:	beq	590 <start_element_handler+0x1e8>
     504:	mov	r0, sl
     508:	bl	0 <coda_type_release>
     50c:	b	3fc <start_element_handler+0x54>
     510:	ldr	r2, [r2, #400]	; 0x190
     514:	ldr	r1, [pc, #916]	; 8b0 <start_element_handler+0x508>
     518:	ldr	r0, [pc, #904]	; 8a8 <start_element_handler+0x500>
     51c:	bl	0 <coda_set_error>
     520:	b	3fc <start_element_handler+0x54>
     524:	ldr	r3, [sp, #12]
     528:	mov	r0, r6
     52c:	ldr	r3, [r3, #4]
     530:	ldr	r9, [r3, #44]	; 0x2c
     534:	bl	0 <coda_element_name_from_xml_name>
     538:	mov	r1, r0
     53c:	mov	r0, r9
     540:	bl	0 <coda_hashtable_get_index_from_name>
     544:	subs	r9, r0, #0
     548:	bge	468 <start_element_handler+0xc0>
     54c:	ldr	r3, [r4, #532]	; 0x214
     550:	cmp	r3, #0
     554:	bne	708 <start_element_handler+0x360>
     558:	ldr	r3, [r4, #12]
     55c:	cmp	r3, #1
     560:	beq	7cc <start_element_handler+0x424>
     564:	add	r3, r3, #99	; 0x63
     568:	mov	r2, r6
     56c:	ldr	r3, [r4, r3, lsl #2]
     570:	ldr	r1, [pc, #828]	; 8b4 <start_element_handler+0x50c>
     574:	ldr	r0, [pc, #812]	; 8a8 <start_element_handler+0x500>
     578:	bl	0 <coda_set_error>
     57c:	b	3fc <start_element_handler+0x54>
     580:	ldr	r3, [r3, #396]	; 0x18c
     584:	mov	r2, r6
     588:	ldr	r1, [pc, #808]	; 8b8 <start_element_handler+0x510>
     58c:	b	3f4 <start_element_handler+0x4c>
     590:	ldr	r3, [r4, #12]
     594:	mov	r0, r8
     598:	add	r3, r3, #4
     59c:	ldr	r3, [r4, r3, lsl #2]
     5a0:	str	sl, [r3]
     5a4:	bl	0 <coda_type_release>
     5a8:	mov	r1, fp
     5ac:	mov	r0, sl
     5b0:	bl	0 <coda_type_array_add_variable_dimension>
     5b4:	subs	r8, r0, #0
     5b8:	bne	3fc <start_element_handler+0x54>
     5bc:	mov	r1, r8
     5c0:	mov	r0, sl
     5c4:	bl	0 <coda_mem_array_new>
     5c8:	subs	fp, r0, #0
     5cc:	beq	3fc <start_element_handler+0x54>
     5d0:	ldr	r3, [sp, #12]
     5d4:	ldr	r3, [r3, #20]
     5d8:	ldr	r1, [r3, r9]
     5dc:	bl	0 <coda_mem_array_add_element>
     5e0:	cmp	r0, #0
     5e4:	bne	3fc <start_element_handler+0x54>
     5e8:	ldr	r2, [sp, #12]
     5ec:	ldr	r3, [r4, #12]
     5f0:	ldr	r8, [sl, #40]	; 0x28
     5f4:	ldr	r1, [r2, #20]
     5f8:	add	r3, r3, #4
     5fc:	add	r2, sl, #40	; 0x28
     600:	str	fp, [r1, r9]
     604:	str	r2, [r4, r3, lsl #2]
     608:	ldr	r0, [r8, #36]	; 0x24
     60c:	cmp	r0, #0
     610:	beq	7e0 <start_element_handler+0x438>
     614:	ldr	ip, [r4, #532]	; 0x214
     618:	ldr	r1, [r4, #8]
     61c:	mov	r3, r7
     620:	mov	r2, r6
     624:	str	ip, [sp]
     628:	bl	8 <attribute_record_new>
     62c:	cmp	r0, #0
     630:	str	r0, [r4, #528]	; 0x210
     634:	beq	3fc <start_element_handler+0x54>
     638:	ldr	r3, [r8]
     63c:	cmp	r3, #2
     640:	bne	410 <start_element_handler+0x68>
     644:	ldr	r7, [r8, #8]
     648:	cmp	r7, #0
     64c:	bne	410 <start_element_handler+0x68>
     650:	ldr	r1, [r4, #528]	; 0x210
     654:	mov	r0, r8
     658:	ldr	r6, [r4, #12]
     65c:	bl	0 <coda_mem_record_new>
     660:	ldr	ip, [r4, #12]
     664:	add	r6, r6, #36	; 0x24
     668:	add	r3, ip, #36	; 0x24
     66c:	str	r0, [r4, r6, lsl #2]
     670:	ldr	r3, [r4, r3, lsl #2]
     674:	cmp	r3, #0
     678:	beq	3fc <start_element_handler+0x54>
     67c:	ldr	r2, [r3, #16]
     680:	cmp	r2, #0
     684:	bgt	6a4 <start_element_handler+0x2fc>
     688:	b	834 <start_element_handler+0x48c>
     68c:	add	r3, ip, #36	; 0x24
     690:	ldr	r3, [r4, r3, lsl #2]
     694:	ldr	r2, [r3, #16]
     698:	add	r5, r5, #1
     69c:	cmp	r2, r5
     6a0:	ble	834 <start_element_handler+0x48c>
     6a4:	ldr	r2, [r8, #52]	; 0x34
     6a8:	lsl	r9, r5, #2
     6ac:	ldr	r2, [r2, r5, lsl #2]
     6b0:	ldr	r0, [r2, #8]
     6b4:	ldr	r6, [r0, #8]
     6b8:	cmp	r6, #1
     6bc:	bne	68c <start_element_handler+0x2e4>
     6c0:	ldr	r2, [r0]
     6c4:	cmp	r2, #2
     6c8:	bne	68c <start_element_handler+0x2e4>
     6cc:	mov	r1, r7
     6d0:	ldr	sl, [r3, #20]
     6d4:	bl	0 <coda_mem_array_new>
     6d8:	ldr	ip, [r4, #12]
     6dc:	add	r3, ip, #36	; 0x24
     6e0:	ldr	r3, [r4, r3, lsl #2]
     6e4:	ldr	r2, [r3, #20]
     6e8:	str	r0, [sl, r9]
     6ec:	ldr	r1, [r2, r9]
     6f0:	cmp	r1, #0
     6f4:	bne	694 <start_element_handler+0x2ec>
     6f8:	ldr	r0, [r4]
     6fc:	bl	0 <coda_XML_StopParser>
     700:	str	r6, [r4, #4]
     704:	b	410 <start_element_handler+0x68>
     708:	mov	r0, r5
     70c:	bl	0 <coda_type_record_new>
     710:	subs	r5, r0, #0
     714:	beq	3fc <start_element_handler+0x54>
     718:	ldr	r3, [sp, #12]
     71c:	mov	r2, r5
     720:	mov	r1, r6
     724:	ldr	r0, [r3, #4]
     728:	bl	0 <coda_type_record_create_field>
     72c:	subs	r9, r0, #0
     730:	mov	r0, r5
     734:	bne	508 <start_element_handler+0x160>
     738:	bl	0 <coda_type_release>
     73c:	add	r0, sp, #16
     740:	ldr	r3, [r0, #-4]!
     744:	ldr	r1, [r3, #4]
     748:	bl	0 <coda_mem_type_update>
     74c:	cmp	r0, #0
     750:	bne	3fc <start_element_handler+0x54>
     754:	ldr	r3, [r4, #12]
     758:	ldr	r2, [sp, #12]
     75c:	add	r3, r3, #35	; 0x23
     760:	ldr	r3, [r4, r3, lsl #2]
     764:	cmp	r3, r2
     768:	bne	880 <start_element_handler+0x4d8>
     76c:	ldr	r3, [r3, #4]
     770:	mov	r1, r6
     774:	ldr	r0, [r3, #44]	; 0x2c
     778:	bl	0 <coda_hashtable_get_index_from_name>
     77c:	subs	r9, r0, #0
     780:	bge	468 <start_element_handler+0xc0>
     784:	ldr	r3, [pc, #304]	; 8bc <start_element_handler+0x514>
     788:	mov	r2, #396	; 0x18c
     78c:	ldr	r1, [pc, #300]	; 8c0 <start_element_handler+0x518>
     790:	ldr	r0, [pc, #300]	; 8c4 <start_element_handler+0x51c>
     794:	bl	0 <__assert_fail>
     798:	ldr	r3, [r8]
     79c:	cmp	r3, #2
     7a0:	bne	608 <start_element_handler+0x260>
     7a4:	ldr	r3, [sp, #12]
     7a8:	ldr	fp, [r3, #20]
     7ac:	ldr	r3, [fp, r9]
     7b0:	cmp	r3, #0
     7b4:	beq	854 <start_element_handler+0x4ac>
     7b8:	add	r2, r2, #4
     7bc:	add	r3, r8, #40	; 0x28
     7c0:	str	r3, [r4, r2, lsl #2]
     7c4:	ldr	r8, [r8, #40]	; 0x28
     7c8:	b	608 <start_element_handler+0x260>
     7cc:	mov	r2, r6
     7d0:	ldr	r1, [pc, #240]	; 8c8 <start_element_handler+0x520>
     7d4:	ldr	r0, [pc, #204]	; 8a8 <start_element_handler+0x500>
     7d8:	bl	0 <coda_set_error>
     7dc:	b	3fc <start_element_handler+0x54>
     7e0:	ldr	r9, [r4, #532]	; 0x214
     7e4:	str	r0, [r4, #528]	; 0x210
     7e8:	cmp	r9, #0
     7ec:	beq	818 <start_element_handler+0x470>
     7f0:	ldr	r3, [r7]
     7f4:	cmp	r3, #0
     7f8:	beq	840 <start_element_handler+0x498>
     7fc:	mov	r0, #2
     800:	bl	0 <coda_type_record_new>
     804:	cmp	r0, #0
     808:	mov	r1, r0
     80c:	str	r0, [r8, #36]	; 0x24
     810:	bne	614 <start_element_handler+0x26c>
     814:	b	400 <start_element_handler+0x58>
     818:	ldr	r2, [r7]
     81c:	cmp	r2, #0
     820:	beq	638 <start_element_handler+0x290>
     824:	ldr	r1, [pc, #160]	; 8cc <start_element_handler+0x524>
     828:	ldr	r0, [pc, #120]	; 8a8 <start_element_handler+0x500>
     82c:	bl	0 <coda_set_error>
     830:	b	3fc <start_element_handler+0x54>
     834:	mov	r3, #0
     838:	str	r3, [r4, #528]	; 0x210
     83c:	b	410 <start_element_handler+0x68>
     840:	mov	r0, r6
     844:	bl	0 <coda_element_name_from_xml_name>
     848:	cmp	r6, r0
     84c:	bne	7fc <start_element_handler+0x454>
     850:	b	638 <start_element_handler+0x290>
     854:	mov	r1, r5
     858:	mov	r0, r8
     85c:	bl	0 <coda_mem_array_new>
     860:	ldr	r3, [sp, #12]
     864:	ldr	r3, [r3, #20]
     868:	str	r0, [fp, r9]
     86c:	ldr	r1, [r3, r9]
     870:	cmp	r1, #0
     874:	beq	894 <start_element_handler+0x4ec>
     878:	ldr	r2, [r4, #12]
     87c:	b	7b8 <start_element_handler+0x410>
     880:	ldr	r3, [pc, #52]	; 8bc <start_element_handler+0x514>
     884:	ldr	r2, [pc, #68]	; 8d0 <start_element_handler+0x528>
     888:	ldr	r1, [pc, #48]	; 8c0 <start_element_handler+0x518>
     88c:	ldr	r0, [pc, #64]	; 8d4 <start_element_handler+0x52c>
     890:	bl	0 <__assert_fail>
     894:	ldr	r0, [r4]
     898:	bl	0 <coda_XML_StopParser>
     89c:	str	sl, [r4, #4]
     8a0:	b	410 <start_element_handler+0x68>
     8a4:	.word	0x000000e8
     8a8:	.word	0xfffffed4
     8ac:	.word	0x00000144
     8b0:	.word	0x00000114
     8b4:	.word	0x000001e4
     8b8:	.word	0x00000218
     8bc:	.word	0x00000018
     8c0:	.word	0x00000000
     8c4:	.word	0x000001a8
     8c8:	.word	0x000001b4
     8cc:	.word	0x0000009c
     8d0:	.word	0x0000018a
     8d4:	.word	0x00000180

000008d8 <parser_info_cleanup>:
     8d8:	push	{r4, r5, r6, lr}
     8dc:	mov	r6, r0
     8e0:	ldr	r0, [r0]
     8e4:	cmp	r0, #0
     8e8:	beq	8f0 <parser_info_cleanup+0x18>
     8ec:	bl	0 <coda_XML_ParserFree>
     8f0:	ldr	r2, [r6, #12]
     8f4:	cmp	r2, #0
     8f8:	addge	r5, r6, #140	; 0x8c
     8fc:	movge	r4, #0
     900:	blt	924 <parser_info_cleanup+0x4c>
     904:	ldr	r3, [r5, #4]!
     908:	add	r4, r4, #1
     90c:	subs	r0, r3, #0
     910:	beq	91c <parser_info_cleanup+0x44>
     914:	bl	0 <coda_dynamic_type_delete>
     918:	ldr	r2, [r6, #12]
     91c:	cmp	r2, r4
     920:	bge	904 <parser_info_cleanup+0x2c>
     924:	ldr	r0, [r6, #528]	; 0x210
     928:	cmp	r0, #0
     92c:	beq	934 <parser_info_cleanup+0x5c>
     930:	bl	0 <coda_dynamic_type_delete>
     934:	ldr	r0, [r6, #544]	; 0x220
     938:	cmp	r0, #0
     93c:	popeq	{r4, r5, r6, pc}
     940:	pop	{r4, r5, r6, lr}
     944:	b	0 <free>

00000948 <is_whitespace>:
     948:	cmp	r0, #0
     94c:	beq	9c0 <is_whitespace+0x78>
     950:	cmp	r1, #0
     954:	ble	9b8 <is_whitespace+0x70>
     958:	ldrb	r3, [r0]
     95c:	sub	r3, r3, #9
     960:	uxtb	r3, r3
     964:	cmp	r3, #23
     968:	bhi	9b0 <is_whitespace+0x68>
     96c:	ldr	r2, [pc, #100]	; 9d8 <is_whitespace+0x90>
     970:	mvn	r3, r2, lsr r3
     974:	tst	r3, #1
     978:	addeq	r1, r0, r1
     97c:	addeq	r0, r0, #1
     980:	beq	994 <is_whitespace+0x4c>
     984:	b	9b0 <is_whitespace+0x68>
     988:	mvn	r3, r2, lsr r3
     98c:	tst	r3, #1
     990:	bne	9b0 <is_whitespace+0x68>
     994:	cmp	r1, r0
     998:	beq	9b8 <is_whitespace+0x70>
     99c:	ldrb	r3, [r0], #1
     9a0:	sub	r3, r3, #9
     9a4:	uxtb	r3, r3
     9a8:	cmp	r3, #23
     9ac:	bls	988 <is_whitespace+0x40>
     9b0:	mov	r0, #0
     9b4:	bx	lr
     9b8:	mov	r0, #1
     9bc:	bx	lr
     9c0:	push	{r4, lr}
     9c4:	mov	r2, #53	; 0x35
     9c8:	ldr	r3, [pc, #12]	; 9dc <is_whitespace+0x94>
     9cc:	ldr	r1, [pc, #12]	; 9e0 <is_whitespace+0x98>
     9d0:	ldr	r0, [pc, #12]	; 9e4 <is_whitespace+0x9c>
     9d4:	bl	0 <__assert_fail>
     9d8:	.word	0x00800013
     9dc:	.word	0x00000030
     9e0:	.word	0x00000000
     9e4:	.word	0x0000025c

000009e8 <character_data_handler>:
     9e8:	ldr	r3, [r0, #532]	; 0x214
     9ec:	push	{r4, r5, r6, r7, r8, lr}
     9f0:	cmp	r3, #0
     9f4:	sub	sp, sp, #8
     9f8:	mov	r4, r0
     9fc:	mov	r7, r1
     a00:	mov	r5, r2
     a04:	bne	a30 <character_data_handler+0x48>
     a08:	ldr	r6, [r0, #12]
     a0c:	add	r6, r0, r6, lsl #2
     a10:	ldr	r3, [r6, #144]	; 0x90
     a14:	cmp	r3, #0
     a18:	beq	a30 <character_data_handler+0x48>
     a1c:	mov	r1, r2
     a20:	mov	r0, r7
     a24:	bl	948 <is_whitespace>
     a28:	subs	r8, r0, #0
     a2c:	beq	a90 <character_data_handler+0xa8>
     a30:	ldr	r0, [r4, #536]	; 0x218
     a34:	ldr	r3, [r4, #540]	; 0x21c
     a38:	add	r1, r5, r0
     a3c:	cmp	r1, r3
     a40:	bgt	a6c <character_data_handler+0x84>
     a44:	ldr	r6, [r4, #544]	; 0x220
     a48:	mov	r2, r5
     a4c:	mov	r1, r7
     a50:	add	r0, r6, r0
     a54:	bl	0 <memcpy>
     a58:	ldr	r3, [r4, #536]	; 0x218
     a5c:	add	r5, r3, r5
     a60:	str	r5, [r4, #536]	; 0x218
     a64:	add	sp, sp, #8
     a68:	pop	{r4, r5, r6, r7, r8, pc}
     a6c:	ldr	r0, [r4, #544]	; 0x220
     a70:	bl	0 <realloc>
     a74:	subs	r6, r0, #0
     a78:	beq	ab8 <character_data_handler+0xd0>
     a7c:	ldr	r0, [r4, #536]	; 0x218
     a80:	str	r6, [r4, #544]	; 0x220
     a84:	add	r3, r5, r0
     a88:	str	r3, [r4, #540]	; 0x21c
     a8c:	b	a48 <character_data_handler+0x60>
     a90:	ldr	r2, [r6, #400]	; 0x190
     a94:	ldr	r1, [pc, #84]	; af0 <character_data_handler+0x108>
     a98:	sub	r0, r0, #300	; 0x12c
     a9c:	bl	0 <coda_set_error>
     aa0:	mov	r1, r8
     aa4:	ldr	r0, [r4]
     aa8:	bl	0 <coda_XML_StopParser>
     aac:	mov	r3, #1
     ab0:	str	r3, [r4, #4]
     ab4:	b	a64 <character_data_handler+0x7c>
     ab8:	ldr	r2, [r4, #536]	; 0x218
     abc:	ldr	r3, [pc, #48]	; af4 <character_data_handler+0x10c>
     ac0:	add	r2, r5, r2
     ac4:	str	r3, [sp]
     ac8:	ldr	r1, [pc, #40]	; af8 <character_data_handler+0x110>
     acc:	ldr	r3, [pc, #40]	; afc <character_data_handler+0x114>
     ad0:	mvn	r0, #0
     ad4:	bl	0 <coda_set_error>
     ad8:	mov	r1, r6
     adc:	ldr	r0, [r4]
     ae0:	bl	0 <coda_XML_StopParser>
     ae4:	mov	r3, #1
     ae8:	str	r3, [r4, #4]
     aec:	b	a64 <character_data_handler+0x7c>
     af0:	.word	0x00000268
     af4:	.word	0x000002db
     af8:	.word	0x000002a4
     afc:	.word	0x00000000

00000b00 <end_element_handler>:
     b00:	ldr	r3, [r0, #4]
     b04:	cmp	r3, #0
     b08:	bxne	lr
     b0c:	push	{r4, r5, r6, r7, r8, lr}
     b10:	mov	r4, r0
     b14:	ldr	r7, [r0, #12]
     b18:	sub	sp, sp, #8
     b1c:	add	r6, r0, r7, lsl #2
     b20:	ldr	r5, [r6, #144]	; 0x90
     b24:	cmp	r5, #0
     b28:	beq	c98 <end_element_handler+0x198>
     b2c:	ldr	r1, [r0, #536]	; 0x218
     b30:	cmp	r1, #0
     b34:	ble	b48 <end_element_handler+0x48>
     b38:	ldr	r0, [r0, #544]	; 0x220
     b3c:	bl	948 <is_whitespace>
     b40:	subs	r8, r0, #0
     b44:	beq	bd4 <end_element_handler+0xd4>
     b48:	ldr	r8, [r4, #532]	; 0x214
     b4c:	cmp	r8, #0
     b50:	addne	r3, r7, #36	; 0x24
     b54:	beq	d04 <end_element_handler+0x204>
     b58:	ldr	r1, [r4, #528]	; 0x210
     b5c:	mov	r2, #0
     b60:	cmp	r1, r2
     b64:	str	r2, [r4, r3, lsl #2]
     b68:	bne	e28 <end_element_handler+0x328>
     b6c:	add	r3, r4, r7, lsl #2
     b70:	sub	r7, r7, #1
     b74:	ldr	r1, [r3, #140]	; 0x8c
     b78:	ldr	r2, [r3, #272]	; 0x110
     b7c:	ldr	r3, [r1, #20]
     b80:	ldr	r0, [r3, r2, lsl #2]
     b84:	cmp	r0, #0
     b88:	beq	dac <end_element_handler+0x2ac>
     b8c:	ldr	r3, [r0, #4]
     b90:	ldr	r6, [r3, #8]
     b94:	cmp	r6, #1
     b98:	bne	e3c <end_element_handler+0x33c>
     b9c:	ldr	r3, [r3]
     ba0:	cmp	r3, #2
     ba4:	bne	e3c <end_element_handler+0x33c>
     ba8:	mov	r1, r5
     bac:	bl	0 <coda_mem_array_add_element>
     bb0:	cmp	r0, #0
     bb4:	bne	d90 <end_element_handler+0x290>
     bb8:	ldr	r7, [r4, #12]
     bbc:	sub	r7, r7, #1
     bc0:	mov	r3, #0
     bc4:	str	r7, [r4, #12]
     bc8:	str	r3, [r4, #536]	; 0x218
     bcc:	add	sp, sp, #8
     bd0:	pop	{r4, r5, r6, r7, r8, pc}
     bd4:	ldr	r3, [r4, #532]	; 0x214
     bd8:	cmp	r3, #0
     bdc:	beq	e78 <end_element_handler+0x378>
     be0:	ldr	r3, [r5, #4]
     be4:	ldr	r3, [r3, #48]	; 0x30
     be8:	cmp	r3, #0
     bec:	ble	c1c <end_element_handler+0x11c>
     bf0:	ldr	r2, [r6, #400]	; 0x190
     bf4:	ldr	r1, [pc, #656]	; e8c <end_element_handler+0x38c>
     bf8:	ldr	r0, [pc, #656]	; e90 <end_element_handler+0x390>
     bfc:	bl	0 <coda_set_error>
     c00:	mov	r1, r8
     c04:	ldr	r0, [r4]
     c08:	bl	0 <coda_XML_StopParser>
     c0c:	mov	r3, #1
     c10:	str	r3, [r4, #4]
     c14:	add	sp, sp, #8
     c18:	pop	{r4, r5, r6, r7, r8, pc}
     c1c:	ldr	r3, [r5, #12]
     c20:	str	r3, [r4, #528]	; 0x210
     c24:	ldr	r6, [r6, #16]
     c28:	str	r8, [r5, #12]
     c2c:	ldr	r3, [r6]
     c30:	ldr	r2, [r3, #8]
     c34:	cmp	r2, #0
     c38:	bne	e64 <end_element_handler+0x364>
     c3c:	ldr	r0, [r3]
     c40:	cmp	r0, #2
     c44:	bne	e64 <end_element_handler+0x364>
     c48:	bl	0 <coda_type_text_new>
     c4c:	subs	r5, r0, #0
     c50:	beq	dd8 <end_element_handler+0x2d8>
     c54:	ldr	r0, [r6]
     c58:	ldr	r3, [r0, #36]	; 0x24
     c5c:	cmp	r3, #0
     c60:	ldrne	r2, [r3, #4]
     c64:	strne	r3, [r5, #36]	; 0x24
     c68:	addne	r2, r2, #1
     c6c:	strne	r2, [r3, #4]
     c70:	bl	0 <coda_type_release>
     c74:	ldr	r3, [r4, #12]
     c78:	str	r5, [r6]
     c7c:	add	r3, r3, #36	; 0x24
     c80:	ldr	r0, [r4, r3, lsl #2]
     c84:	bl	0 <coda_dynamic_type_delete>
     c88:	ldr	r7, [r4, #12]
     c8c:	mov	r2, #0
     c90:	add	r3, r7, #36	; 0x24
     c94:	str	r2, [r4, r3, lsl #2]
     c98:	add	r7, r7, #4
     c9c:	ldr	r3, [r4, r7, lsl #2]
     ca0:	ldr	r5, [r3]
     ca4:	ldr	r3, [r5, #8]
     ca8:	cmp	r3, #6
     cac:	bne	db4 <end_element_handler+0x2b4>
     cb0:	ldr	r1, [r4, #532]	; 0x214
     cb4:	cmp	r1, #0
     cb8:	bne	e50 <end_element_handler+0x350>
     cbc:	ldr	ip, [r4, #544]	; 0x220
     cc0:	ldr	r3, [r4, #536]	; 0x218
     cc4:	ldr	r2, [r4, #8]
     cc8:	ldr	r0, [r5, #44]	; 0x2c
     ccc:	str	ip, [sp]
     cd0:	bl	0 <coda_mem_data_new>
     cd4:	subs	r6, r0, #0
     cd8:	beq	df0 <end_element_handler+0x2f0>
     cdc:	mov	r0, r5
     ce0:	mov	r2, r6
     ce4:	ldr	r1, [r4, #528]	; 0x210
     ce8:	bl	0 <coda_mem_time_new>
     cec:	subs	r5, r0, #0
     cf0:	beq	e1c <end_element_handler+0x31c>
     cf4:	mov	r3, #0
     cf8:	str	r3, [r4, #528]	; 0x210
     cfc:	ldr	r7, [r4, #12]
     d00:	b	b6c <end_element_handler+0x6c>
     d04:	mov	r0, r5
     d08:	bl	0 <coda_mem_record_validate>
     d0c:	subs	r6, r0, #0
     d10:	bne	c00 <end_element_handler+0x100>
     d14:	ldr	r7, [r4, #12]
     d18:	add	r3, r7, #36	; 0x24
     d1c:	mov	r2, r7
     d20:	ldr	r5, [r4, r3, lsl #2]
     d24:	ldr	r1, [r5, #16]
     d28:	cmp	r1, #0
     d2c:	bgt	d50 <end_element_handler+0x250>
     d30:	b	b58 <end_element_handler+0x58>
     d34:	add	r3, r2, #36	; 0x24
     d38:	add	r6, r6, #1
     d3c:	ldr	r5, [r4, r3, lsl #2]
     d40:	mov	r7, r2
     d44:	ldr	r1, [r5, #16]
     d48:	cmp	r6, r1
     d4c:	bge	b58 <end_element_handler+0x58>
     d50:	ldr	r3, [r5, #20]
     d54:	ldr	r0, [r3, r6, lsl #2]
     d58:	cmp	r0, #0
     d5c:	beq	d34 <end_element_handler+0x234>
     d60:	ldr	r3, [r0, #4]
     d64:	ldr	r5, [r3, #8]
     d68:	cmp	r5, #1
     d6c:	bne	d34 <end_element_handler+0x234>
     d70:	ldr	r3, [r3]
     d74:	cmp	r3, #2
     d78:	bne	d34 <end_element_handler+0x234>
     d7c:	bl	0 <coda_mem_array_validate>
     d80:	cmp	r0, #0
     d84:	bne	e08 <end_element_handler+0x308>
     d88:	ldr	r2, [r4, #12]
     d8c:	b	d34 <end_element_handler+0x234>
     d90:	mov	r0, r5
     d94:	bl	0 <coda_dynamic_type_delete>
     d98:	mov	r1, #0
     d9c:	ldr	r0, [r4]
     da0:	bl	0 <coda_XML_StopParser>
     da4:	str	r6, [r4, #4]
     da8:	b	bcc <end_element_handler+0xcc>
     dac:	str	r5, [r3, r2, lsl #2]
     db0:	b	bc0 <end_element_handler+0xc0>
     db4:	ldr	ip, [r4, #544]	; 0x220
     db8:	ldr	r3, [r4, #536]	; 0x218
     dbc:	ldr	r2, [r4, #8]
     dc0:	ldr	r1, [r4, #528]	; 0x210
     dc4:	mov	r0, r5
     dc8:	str	ip, [sp]
     dcc:	bl	0 <coda_mem_data_new>
     dd0:	subs	r5, r0, #0
     dd4:	bne	cf4 <end_element_handler+0x1f4>
     dd8:	mov	r1, r5
     ddc:	ldr	r0, [r4]
     de0:	bl	0 <coda_XML_StopParser>
     de4:	mov	r3, #1
     de8:	str	r3, [r4, #4]
     dec:	b	bcc <end_element_handler+0xcc>
     df0:	mov	r1, r6
     df4:	ldr	r0, [r4]
     df8:	bl	0 <coda_XML_StopParser>
     dfc:	mov	r3, #1
     e00:	str	r3, [r4, #4]
     e04:	b	bcc <end_element_handler+0xcc>
     e08:	mov	r1, #0
     e0c:	ldr	r0, [r4]
     e10:	bl	0 <coda_XML_StopParser>
     e14:	str	r5, [r4, #4]
     e18:	b	bcc <end_element_handler+0xcc>
     e1c:	mov	r0, r6
     e20:	bl	0 <coda_dynamic_type_delete>
     e24:	b	dd8 <end_element_handler+0x2d8>
     e28:	ldr	r3, [pc, #100]	; e94 <end_element_handler+0x394>
     e2c:	ldr	r2, [pc, #100]	; e98 <end_element_handler+0x398>
     e30:	ldr	r1, [pc, #100]	; e9c <end_element_handler+0x39c>
     e34:	ldr	r0, [pc, #100]	; ea0 <end_element_handler+0x3a0>
     e38:	bl	0 <__assert_fail>
     e3c:	ldr	r3, [pc, #80]	; e94 <end_element_handler+0x394>
     e40:	ldr	r2, [pc, #92]	; ea4 <end_element_handler+0x3a4>
     e44:	ldr	r1, [pc, #80]	; e9c <end_element_handler+0x39c>
     e48:	ldr	r0, [pc, #88]	; ea8 <end_element_handler+0x3a8>
     e4c:	bl	0 <__assert_fail>
     e50:	ldr	r3, [pc, #60]	; e94 <end_element_handler+0x394>
     e54:	ldr	r2, [pc, #80]	; eac <end_element_handler+0x3ac>
     e58:	ldr	r1, [pc, #60]	; e9c <end_element_handler+0x39c>
     e5c:	ldr	r0, [pc, #76]	; eb0 <end_element_handler+0x3b0>
     e60:	bl	0 <__assert_fail>
     e64:	ldr	r3, [pc, #72]	; eb4 <end_element_handler+0x3b4>
     e68:	mov	r2, #70	; 0x46
     e6c:	ldr	r1, [pc, #40]	; e9c <end_element_handler+0x39c>
     e70:	ldr	r0, [pc, #64]	; eb8 <end_element_handler+0x3b8>
     e74:	bl	0 <__assert_fail>
     e78:	ldr	r3, [pc, #20]	; e94 <end_element_handler+0x394>
     e7c:	ldr	r2, [pc, #56]	; ebc <end_element_handler+0x3bc>
     e80:	ldr	r1, [pc, #20]	; e9c <end_element_handler+0x39c>
     e84:	ldr	r0, [pc, #52]	; ec0 <end_element_handler+0x3c0>
     e88:	bl	0 <__assert_fail>
     e8c:	.word	0x00000114
     e90:	.word	0xfffffed4
     e94:	.word	0x00000040
     e98:	.word	0x000002ad
     e9c:	.word	0x00000000
     ea0:	.word	0x0000036c
     ea4:	.word	0x000002b5
     ea8:	.word	0x00000388
     eac:	.word	0x0000026b
     eb0:	.word	0x00000350
     eb4:	.word	0x00000054
     eb8:	.word	0x000002f4
     ebc:	.word	0x0000024e
     ec0:	.word	0x000002dc

00000ec4 <coda_xml_parse>:
     ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ec8:	sub	sp, sp, #8768	; 0x2240
     ecc:	sub	sp, sp, #12
     ed0:	mov	r4, #0
     ed4:	mov	r9, r0
     ed8:	mvn	r5, #0
     edc:	mov	r0, r4
     ee0:	mov	r1, #32
     ee4:	str	r4, [sp, #36]	; 0x24
     ee8:	str	r4, [sp, #40]	; 0x28
     eec:	str	r4, [sp, #44]	; 0x2c
     ef0:	str	r4, [sp, #564]	; 0x234
     ef4:	str	r4, [sp, #568]	; 0x238
     ef8:	str	r4, [sp, #572]	; 0x23c
     efc:	str	r4, [sp, #576]	; 0x240
     f00:	str	r4, [sp, #580]	; 0x244
     f04:	str	r5, [sp, #48]	; 0x30
     f08:	bl	0 <coda_XML_ParserCreateNS>
     f0c:	cmp	r0, r4
     f10:	str	r0, [sp, #36]	; 0x24
     f14:	beq	1260 <coda_xml_parse+0x39c>
     f18:	ldr	r3, [r9, #24]
     f1c:	str	r9, [sp, #44]	; 0x2c
     f20:	cmp	r3, #0
     f24:	beq	115c <coda_xml_parse+0x298>
     f28:	ldr	r0, [r3, #28]
     f2c:	cmp	r0, #0
     f30:	beq	115c <coda_xml_parse+0x298>
     f34:	ldr	r1, [r0, #8]
     f38:	str	r4, [sp, #568]	; 0x238
     f3c:	cmp	r1, #0
     f40:	bne	1284 <coda_xml_parse+0x3c0>
     f44:	bl	0 <coda_mem_record_new>
     f48:	str	r0, [sp, #180]	; 0xb4
     f4c:	cmp	r0, #0
     f50:	addeq	r3, sp, #36	; 0x24
     f54:	streq	r3, [sp, #4]
     f58:	beq	1144 <coda_xml_parse+0x280>
     f5c:	add	r3, sp, #36	; 0x24
     f60:	mvn	ip, #0
     f64:	mov	r2, #0
     f68:	mov	r1, r3
     f6c:	str	r3, [sp, #4]
     f70:	add	r3, r0, #4
     f74:	ldr	r0, [sp, #36]	; 0x24
     f78:	str	r3, [sp, #52]	; 0x34
     f7c:	str	ip, [sp, #308]	; 0x134
     f80:	str	r2, [sp, #436]	; 0x1b4
     f84:	str	r2, [sp, #48]	; 0x30
     f88:	bl	0 <coda_XML_SetUserData>
     f8c:	mov	r1, #2
     f90:	ldr	r0, [sp, #36]	; 0x24
     f94:	bl	0 <coda_XML_SetParamEntityParsing>
     f98:	ldr	r2, [pc, #760]	; 1298 <coda_xml_parse+0x3d4>
     f9c:	ldr	r1, [pc, #760]	; 129c <coda_xml_parse+0x3d8>
     fa0:	ldr	r0, [sp, #36]	; 0x24
     fa4:	bl	0 <coda_XML_SetElementHandler>
     fa8:	ldr	r1, [pc, #752]	; 12a0 <coda_xml_parse+0x3dc>
     fac:	ldr	r0, [sp, #36]	; 0x24
     fb0:	bl	0 <coda_XML_SetCharacterDataHandler>
     fb4:	ldr	r1, [pc, #744]	; 12a4 <coda_xml_parse+0x3e0>
     fb8:	ldr	r0, [sp, #36]	; 0x24
     fbc:	bl	0 <coda_XML_SetNotStandaloneHandler>
     fc0:	ldr	ip, [r9, #52]	; 0x34
     fc4:	ldr	r4, [pc, #732]	; 12a8 <coda_xml_parse+0x3e4>
     fc8:	mov	r5, #0
     fcc:	ldrd	r0, [ip, #8]
     fd0:	asr	r2, r1, #31
     fd4:	asr	r3, r2, #31
     fd8:	and	r2, r2, r4
     fdc:	adds	r2, r2, r0
     fe0:	and	r3, r3, r5
     fe4:	adc	r3, r3, r1
     fe8:	lsr	sl, r2, #13
     fec:	orr	sl, sl, r3, lsl #19
     ff0:	lsl	r2, sl, #13
     ff4:	cmp	r2, r0
     ff8:	asr	r3, r2, #31
     ffc:	sbcs	r3, r3, r1
    1000:	addlt	sl, sl, #1
    1004:	cmp	sl, #0
    1008:	ble	1190 <coda_xml_parse+0x2cc>
    100c:	sub	r8, sl, #1
    1010:	mov	r6, #0
    1014:	lsl	r3, r8, #13
    1018:	str	r3, [sp]
    101c:	mov	r4, r6
    1020:	mov	fp, r6
    1024:	b	109c <coda_xml_parse+0x1d8>
    1028:	cmp	r8, r4
    102c:	ldr	r1, [ip, #48]	; 0x30
    1030:	ldrle	r2, [ip, #8]
    1034:	ldrle	r3, [sp]
    1038:	movgt	r2, #8192	; 0x2000
    103c:	suble	r2, r2, r3
    1040:	add	r1, r1, r6
    1044:	ldr	r5, [pc, #608]	; 12ac <coda_xml_parse+0x3e8>
    1048:	bl	0 <__aeabi_read_tp>
    104c:	mov	r7, r0
    1050:	ldr	r5, [pc, r5]
    1054:	sub	r3, r4, r8
    1058:	ldr	r0, [sp, #36]	; 0x24
    105c:	clz	r3, r3
    1060:	lsr	r3, r3, #5
    1064:	str	fp, [r7, r5]
    1068:	bl	0 <coda_XML_Parse>
    106c:	cmp	r0, #0
    1070:	beq	10e4 <coda_xml_parse+0x220>
    1074:	ldr	r3, [pc, #564]	; 12b0 <coda_xml_parse+0x3ec>
    1078:	ldr	r3, [pc, r3]
    107c:	ldr	r3, [r7, r3]
    1080:	cmp	r3, #0
    1084:	bne	1114 <coda_xml_parse+0x250>
    1088:	add	r4, r4, #1
    108c:	cmp	sl, r4
    1090:	add	r6, r6, #8192	; 0x2000
    1094:	beq	1190 <coda_xml_parse+0x2cc>
    1098:	ldr	ip, [r9, #52]	; 0x34
    109c:	ldr	r3, [ip, #52]	; 0x34
    10a0:	cmp	r3, #0
    10a4:	bne	1028 <coda_xml_parse+0x164>
    10a8:	ldr	r0, [ip, #56]	; 0x38
    10ac:	mov	r2, fp
    10b0:	mov	r1, r6
    10b4:	bl	0 <lseek>
    10b8:	cmp	r0, #0
    10bc:	blt	11ec <coda_xml_parse+0x328>
    10c0:	ldr	r3, [r9, #52]	; 0x34
    10c4:	mov	r2, #8192	; 0x2000
    10c8:	add	r1, sp, #584	; 0x248
    10cc:	ldr	r0, [r3, #56]	; 0x38
    10d0:	bl	0 <read>
    10d4:	subs	r2, r0, #0
    10d8:	blt	1234 <coda_xml_parse+0x370>
    10dc:	add	r1, sp, #584	; 0x248
    10e0:	b	1044 <coda_xml_parse+0x180>
    10e4:	ldr	r3, [pc, #456]	; 12b4 <coda_xml_parse+0x3f0>
    10e8:	ldr	r3, [pc, r3]
    10ec:	ldr	r3, [r7, r3]
    10f0:	cmp	r3, #0
    10f4:	bne	1114 <coda_xml_parse+0x250>
    10f8:	ldr	r0, [sp, #36]	; 0x24
    10fc:	bl	0 <coda_XML_GetErrorCode>
    1100:	bl	0 <coda_XML_ErrorString>
    1104:	ldr	r1, [pc, #428]	; 12b8 <coda_xml_parse+0x3f4>
    1108:	mov	r2, r0
    110c:	mvn	r0, #13
    1110:	bl	0 <coda_set_error>
    1114:	add	r3, sp, #12
    1118:	ldr	r0, [sp, #36]	; 0x24
    111c:	str	r3, [sp]
    1120:	bl	0 <coda_XML_GetCurrentByteIndex>
    1124:	ldr	r2, [sp]
    1128:	bl	0 <coda_str64>
    112c:	ldr	r0, [sp, #36]	; 0x24
    1130:	bl	0 <coda_XML_GetCurrentLineNumber>
    1134:	ldr	r2, [sp]
    1138:	mov	r1, r0
    113c:	ldr	r0, [pc, #376]	; 12bc <coda_xml_parse+0x3f8>
    1140:	bl	0 <coda_add_error_message>
    1144:	ldr	r0, [sp, #4]
    1148:	bl	8d8 <parser_info_cleanup>
    114c:	mvn	r0, #0
    1150:	add	sp, sp, #8768	; 0x2240
    1154:	add	sp, sp, #12
    1158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    115c:	mov	r3, #1
    1160:	mov	r0, #2
    1164:	str	r3, [sp, #568]	; 0x238
    1168:	bl	0 <coda_type_record_new>
    116c:	subs	r4, r0, #0
    1170:	beq	1274 <coda_xml_parse+0x3b0>
    1174:	mov	r1, #0
    1178:	bl	0 <coda_mem_record_new>
    117c:	str	r0, [sp, #180]	; 0xb4
    1180:	mov	r0, r4
    1184:	bl	0 <coda_type_release>
    1188:	ldr	r0, [sp, #180]	; 0xb4
    118c:	b	f4c <coda_xml_parse+0x88>
    1190:	ldr	r0, [sp, #36]	; 0x24
    1194:	bl	0 <coda_XML_ParserFree>
    1198:	ldr	r2, [sp, #568]	; 0x238
    119c:	mov	r3, #0
    11a0:	cmp	r2, r3
    11a4:	str	r3, [sp, #36]	; 0x24
    11a8:	beq	11c4 <coda_xml_parse+0x300>
    11ac:	ldr	r3, [sp, #180]	; 0xb4
    11b0:	add	r0, sp, #180	; 0xb4
    11b4:	ldr	r1, [r3, #4]
    11b8:	bl	0 <coda_mem_type_update>
    11bc:	cmp	r0, #0
    11c0:	bne	1144 <coda_xml_parse+0x280>
    11c4:	ldr	r3, [sp, #180]	; 0xb4
    11c8:	ldr	r0, [sp, #4]
    11cc:	str	r3, [r9, #20]
    11d0:	mvn	r3, #0
    11d4:	str	r3, [sp, #48]	; 0x30
    11d8:	bl	8d8 <parser_info_cleanup>
    11dc:	mov	r0, #0
    11e0:	add	sp, sp, #8768	; 0x2240
    11e4:	add	sp, sp, #12
    11e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ec:	add	r3, sp, #12
    11f0:	mov	r2, r3
    11f4:	asr	r1, r6, #31
    11f8:	mov	r0, r6
    11fc:	str	r3, [sp]
    1200:	bl	0 <coda_str64>
    1204:	bl	0 <__errno_location>
    1208:	ldr	r0, [r0]
    120c:	bl	0 <strerror>
    1210:	ldr	r2, [sp]
    1214:	ldr	r1, [pc, #164]	; 12c0 <coda_xml_parse+0x3fc>
    1218:	mov	r3, r0
    121c:	mvn	r0, #21
    1220:	bl	0 <coda_set_error>
    1224:	ldr	r0, [sp, #4]
    1228:	bl	8d8 <parser_info_cleanup>
    122c:	mvn	r0, #0
    1230:	b	1150 <coda_xml_parse+0x28c>
    1234:	bl	0 <__errno_location>
    1238:	ldr	r0, [r0]
    123c:	bl	0 <strerror>
    1240:	ldr	r1, [pc, #124]	; 12c4 <coda_xml_parse+0x400>
    1244:	mov	r2, r0
    1248:	mvn	r0, #21
    124c:	bl	0 <coda_set_error>
    1250:	ldr	r0, [sp, #4]
    1254:	bl	8d8 <parser_info_cleanup>
    1258:	mvn	r0, #0
    125c:	b	1150 <coda_xml_parse+0x28c>
    1260:	mvn	r0, #13
    1264:	ldr	r1, [pc, #92]	; 12c8 <coda_xml_parse+0x404>
    1268:	bl	0 <coda_set_error>
    126c:	mov	r0, r5
    1270:	b	1150 <coda_xml_parse+0x28c>
    1274:	ldr	r0, [sp, #36]	; 0x24
    1278:	bl	0 <coda_XML_ParserFree>
    127c:	mvn	r0, #0
    1280:	b	1150 <coda_xml_parse+0x28c>
    1284:	ldr	r3, [pc, #64]	; 12cc <coda_xml_parse+0x408>
    1288:	ldr	r2, [pc, #64]	; 12d0 <coda_xml_parse+0x40c>
    128c:	ldr	r1, [pc, #64]	; 12d4 <coda_xml_parse+0x410>
    1290:	ldr	r0, [pc, #64]	; 12d8 <coda_xml_parse+0x414>
    1294:	bl	0 <__assert_fail>
	...
    12a8:	.word	0x00001fff
    12ac:	.word	0x00000254
    12b0:	.word	0x00000230
    12b4:	.word	0x000001c4
    12b8:	.word	0x000004c0
    12bc:	.word	0x000004d4
    12c0:	.word	0x00000478
    12c4:	.word	0x000004a0
    12c8:	.word	0x00000414
    12cc:	.word	0x00000064
    12d0:	.word	0x00000306
    12d4:	.word	0x00000000
    12d8:	.word	0x00000430
