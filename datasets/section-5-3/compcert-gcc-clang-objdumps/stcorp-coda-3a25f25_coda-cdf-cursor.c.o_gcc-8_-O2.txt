
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	mov	r4, r2
   8:	ldr	r5, [r0, #48]	; 0x30
   c:	strd	r6, [sp, #8]
  10:	mov	r6, r0
  14:	mov	r7, r3
  18:	strd	r8, [sp, #16]
  1c:	strd	sl, [sp, #24]
  20:	str	lr, [sp, #32]
  24:	sub	sp, sp, #84	; 0x54
  28:	cmp	r5, #0
  2c:	ldr	r2, [sp, #120]	; 0x78
  30:	ldr	r1, [sp, #124]	; 0x7c
  34:	beq	d8 <read_bytes+0xd8>
  38:	adds	r8, r4, r2
  3c:	ldrd	sl, [r0, #40]	; 0x28
  40:	adc	r9, r3, r1
  44:	cmp	r9, fp
  48:	cmpeq	r8, sl
  4c:	bls	c4 <read_bytes+0xc4>
  50:	ldr	r3, [r0, #16]
  54:	cmp	r3, #1
  58:	bls	140 <read_bytes+0x140>
  5c:	mov	r0, r2
  60:	add	r2, sp, #8
  64:	bl	0 <coda_str64>
  68:	add	r5, sp, #56	; 0x38
  6c:	mov	r0, r4
  70:	mov	r1, r7
  74:	add	r2, sp, #32
  78:	bl	0 <coda_str64>
  7c:	mov	r2, r5
  80:	ldrd	r0, [r6, #40]	; 0x28
  84:	bl	0 <coda_str64>
  88:	mvn	r0, #300	; 0x12c
  8c:	add	r3, sp, #32
  90:	str	r5, [sp]
  94:	add	r2, sp, #8
  98:	movw	r1, #0
  9c:	movt	r1, #0
  a0:	bl	0 <coda_set_error>
  a4:	mvn	r0, #0
  a8:	add	sp, sp, #84	; 0x54
  ac:	ldrd	r4, [sp]
  b0:	ldrd	r6, [sp, #8]
  b4:	ldrd	r8, [sp, #16]
  b8:	ldrd	sl, [sp, #24]
  bc:	add	sp, sp, #32
  c0:	pop	{pc}		; (ldr pc, [sp], #4)
  c4:	add	r1, r5, r4
  c8:	ldr	r0, [sp, #128]	; 0x80
  cc:	bl	0 <memcpy>
  d0:	mov	r0, #0
  d4:	b	a8 <read_bytes+0xa8>
  d8:	ldr	r3, [r0, #16]
  dc:	cmp	r3, #1
  e0:	bhi	158 <read_bytes+0x158>
  e4:	ldrd	r8, [r0, #8]
  e8:	adds	sl, r4, r2
  ec:	adc	fp, r7, r1
  f0:	cmp	fp, r9
  f4:	cmpeq	sl, r8
  f8:	bhi	140 <read_bytes+0x140>
  fc:	mov	r3, r4
 100:	ldr	r0, [r0, #56]	; 0x38
 104:	ldr	r1, [sp, #128]	; 0x80
 108:	bl	0 <pread>
 10c:	cmp	r0, #0
 110:	movge	r0, r5
 114:	bge	a8 <read_bytes+0xa8>
 118:	bl	0 <__errno_location>
 11c:	ldr	r0, [r0]
 120:	bl	0 <strerror>
 124:	mov	r2, r0
 128:	movw	r1, #0
 12c:	movt	r1, #0
 130:	mvn	r0, #21
 134:	bl	0 <coda_set_error>
 138:	mvn	r0, #0
 13c:	b	a8 <read_bytes+0xa8>
 140:	mvn	r0, #300	; 0x12c
 144:	movw	r1, #0
 148:	movt	r1, #0
 14c:	bl	0 <coda_set_error>
 150:	mvn	r0, #0
 154:	b	a8 <read_bytes+0xa8>
 158:	movw	r3, #0
 15c:	movt	r3, #0
 160:	movw	r1, #0
 164:	movt	r1, #0
 168:	movw	r0, #0
 16c:	movt	r0, #0
 170:	mov	r2, #83	; 0x53
 174:	bl	0 <__assert_fail>

00000178 <read_basic_type>:
 178:	strd	r4, [sp, #-28]!	; 0xffffffe4
 17c:	mov	r5, r0
 180:	ldr	r0, [r0, #4]
 184:	sub	r3, r0, #1
 188:	add	r3, r5, r3, lsl #4
 18c:	ldr	r4, [r3, #8]
 190:	strd	r6, [sp, #8]
 194:	strd	r8, [sp, #16]
 198:	mov	r8, r1
 19c:	str	lr, [sp, #24]
 1a0:	sub	sp, sp, #20
 1a4:	ldr	r1, [r4, #8]
 1a8:	cmp	r1, #0
 1ac:	movne	lr, #0
 1b0:	bne	1c4 <read_basic_type+0x4c>
 1b4:	add	r0, r5, r0, lsl #4
 1b8:	ldr	lr, [r3, #12]
 1bc:	ldr	r4, [r0, #-24]	; 0xffffffe8
 1c0:	ldr	r1, [r4, #8]
 1c4:	cmp	r1, #2
 1c8:	bne	390 <read_basic_type+0x218>
 1cc:	ldr	r3, [r4, #16]
 1d0:	ldr	r1, [r4, #24]
 1d4:	ldr	ip, [r4, #28]
 1d8:	cmp	r3, #0
 1dc:	ldreq	r3, [r4, #4]
 1e0:	ldrne	r3, [r3, #4]
 1e4:	ldr	r6, [r4, #36]	; 0x24
 1e8:	ldr	r9, [r3, #8]
 1ec:	sdiv	r3, lr, r1
 1f0:	lsl	r0, r3, #3
 1f4:	mls	r3, r1, r3, lr
 1f8:	ldrd	r6, [r6, r0]
 1fc:	cmp	r6, #0
 200:	sbcs	r1, r7, #0
 204:	blt	378 <read_basic_type+0x200>
 208:	mul	r3, r3, ip
 20c:	ldr	lr, [r4, #40]	; 0x28
 210:	adds	r0, r6, r3
 214:	adc	r1, r7, r3, asr #31
 218:	cmp	r2, #0
 21c:	cmpge	ip, r2
 220:	movle	r2, ip
 224:	cmp	lr, #0
 228:	beq	2a0 <read_basic_type+0x128>
 22c:	add	r1, lr, r0
 230:	mov	r0, r8
 234:	bl	0 <memcpy>
 238:	cmp	r9, #4
 23c:	beq	250 <read_basic_type+0xd8>
 240:	ldr	r3, [r5]
 244:	ldr	r3, [r3, #68]	; 0x44
 248:	cmp	r3, #0
 24c:	beq	26c <read_basic_type+0xf4>
 250:	mov	r0, #0
 254:	add	sp, sp, #20
 258:	ldrd	r4, [sp]
 25c:	ldrd	r6, [sp, #8]
 260:	ldrd	r8, [sp, #16]
 264:	add	sp, sp, #24
 268:	pop	{pc}		; (ldr pc, [sp], #4)
 26c:	ldr	r3, [r4, #28]
 270:	sub	r3, r3, #1
 274:	cmp	r3, #7
 278:	ldrls	pc, [pc, r3, lsl #2]
 27c:	b	35c <read_basic_type+0x1e4>
 280:	.word	0x00000250
 284:	.word	0x00000344
 288:	.word	0x0000035c
 28c:	.word	0x0000031c
 290:	.word	0x0000035c
 294:	.word	0x0000035c
 298:	.word	0x0000035c
 29c:	.word	0x000002d4
 2a0:	ldr	ip, [r5]
 2a4:	asr	r7, r2, #31
 2a8:	mov	r6, r2
 2ac:	mov	r3, r1
 2b0:	mov	r2, r0
 2b4:	ldr	r0, [ip, #52]	; 0x34
 2b8:	strd	r6, [sp]
 2bc:	str	r8, [sp, #8]
 2c0:	bl	0 <read_bytes>
 2c4:	cmp	r0, #0
 2c8:	beq	238 <read_basic_type+0xc0>
 2cc:	mvn	r0, #0
 2d0:	b	254 <read_basic_type+0xdc>
 2d4:	ldrb	r2, [r8, #7]
 2d8:	mov	r0, #0
 2dc:	ldrb	r3, [r8]
 2e0:	ldrb	r1, [r8, #6]
 2e4:	strb	r2, [r8]
 2e8:	ldrb	r2, [r8, #1]
 2ec:	strb	r3, [r8, #7]
 2f0:	ldrb	r3, [r8, #5]
 2f4:	strb	r1, [r8, #1]
 2f8:	ldrb	r1, [r8, #2]
 2fc:	strb	r3, [r8, #2]
 300:	ldrb	r3, [r8, #3]
 304:	strb	r2, [r8, #6]
 308:	ldrb	r2, [r8, #4]
 30c:	strb	r1, [r8, #5]
 310:	strb	r2, [r8, #3]
 314:	strb	r3, [r8, #4]
 318:	b	254 <read_basic_type+0xdc>
 31c:	ldrb	r3, [r8, #3]
 320:	mov	r0, #0
 324:	ldrb	r1, [r8]
 328:	ldrb	r2, [r8, #2]
 32c:	strb	r3, [r8]
 330:	ldrb	r3, [r8, #1]
 334:	strb	r2, [r8, #1]
 338:	strb	r1, [r8, #3]
 33c:	strb	r3, [r8, #2]
 340:	b	254 <read_basic_type+0xdc>
 344:	ldrb	r2, [r8, #1]
 348:	mov	r0, #0
 34c:	ldrb	r3, [r8]
 350:	strb	r2, [r8]
 354:	strb	r3, [r8, #1]
 358:	b	254 <read_basic_type+0xdc>
 35c:	movw	r1, #0
 360:	movt	r1, #0
 364:	ldr	r3, [pc, #64]	; 3ac <read_basic_type+0x234>
 368:	movw	r0, #0
 36c:	movt	r0, #0
 370:	movw	r2, #462	; 0x1ce
 374:	bl	0 <__assert_fail>
 378:	mvn	r0, #199	; 0xc7
 37c:	movw	r1, #0
 380:	movt	r1, #0
 384:	bl	0 <coda_set_error>
 388:	mvn	r0, #0
 38c:	b	254 <read_basic_type+0xdc>
 390:	movw	r1, #0
 394:	movt	r1, #0
 398:	ldr	r3, [pc, #12]	; 3ac <read_basic_type+0x234>
 39c:	movw	r0, #0
 3a0:	movt	r0, #0
 3a4:	movw	r2, #403	; 0x193
 3a8:	bl	0 <__assert_fail>
 3ac:	.word	0x0000000c

000003b0 <read_array>:
 3b0:	ldr	r3, [r0, #4]
 3b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
 3b8:	add	r3, r0, r3, lsl #4
 3bc:	ldr	r5, [r3, #-8]
 3c0:	ldr	r2, [r5, #8]
 3c4:	ldr	r3, [r5, #24]
 3c8:	strd	r6, [sp, #8]
 3cc:	ldr	r7, [r5, #28]
 3d0:	cmp	r2, #2
 3d4:	strd	r8, [sp, #16]
 3d8:	strd	sl, [sp, #24]
 3dc:	str	lr, [sp, #32]
 3e0:	sub	sp, sp, #28
 3e4:	mul	r7, r7, r3
 3e8:	bne	65c <read_array+0x2ac>
 3ec:	ldr	r3, [r5, #16]
 3f0:	mov	fp, r0
 3f4:	mov	sl, r1
 3f8:	cmp	r3, #0
 3fc:	ldreq	r3, [r5, #4]
 400:	ldrne	r3, [r3, #4]
 404:	ldr	r3, [r3, #8]
 408:	str	r3, [sp, #20]
 40c:	ldr	r3, [r5, #20]
 410:	cmp	r3, #0
 414:	ble	4b0 <read_array+0x100>
 418:	ldr	r3, [r5, #36]	; 0x24
 41c:	ldrd	r2, [r3]
 420:	cmp	r2, #0
 424:	sbcs	r1, r3, #0
 428:	blt	560 <read_array+0x1b0>
 42c:	mov	r6, sl
 430:	mov	r4, #0
 434:	asr	r9, r7, #31
 438:	mov	r8, r7
 43c:	b	480 <read_array+0xd0>
 440:	add	r1, r1, r2
 444:	mov	r0, r6
 448:	mov	r2, r7
 44c:	bl	0 <memcpy>
 450:	ldr	r3, [r5, #20]
 454:	add	r4, r4, #1
 458:	cmp	r3, r4
 45c:	ble	4b0 <read_array+0x100>
 460:	ldr	r2, [r5, #36]	; 0x24
 464:	lsl	r3, r4, #3
 468:	add	r6, r6, r7
 46c:	add	r2, r2, r3
 470:	ldrd	r2, [r2]
 474:	cmp	r2, #0
 478:	sbcs	r1, r3, #0
 47c:	blt	560 <read_array+0x1b0>
 480:	ldr	r1, [r5, #40]	; 0x28
 484:	cmp	r1, #0
 488:	bne	440 <read_array+0x90>
 48c:	ldr	r1, [fp]
 490:	ldr	r0, [r1, #52]	; 0x34
 494:	strd	r8, [sp]
 498:	str	r6, [sp, #8]
 49c:	bl	0 <read_bytes>
 4a0:	cmp	r0, #0
 4a4:	beq	450 <read_array+0xa0>
 4a8:	mvn	r0, #0
 4ac:	b	544 <read_array+0x194>
 4b0:	ldr	r2, [sp, #20]
 4b4:	cmp	r2, #4
 4b8:	beq	540 <read_array+0x190>
 4bc:	ldr	r2, [fp]
 4c0:	ldr	r2, [r2, #68]	; 0x44
 4c4:	cmp	r2, #1
 4c8:	beq	540 <read_array+0x190>
 4cc:	ldr	r2, [r5, #28]
 4d0:	sub	r2, r2, #1
 4d4:	cmp	r2, #7
 4d8:	ldrls	pc, [pc, r2, lsl #2]
 4dc:	b	640 <read_array+0x290>
 4e0:	.word	0x00000540
 4e4:	.word	0x00000500
 4e8:	.word	0x00000640
 4ec:	.word	0x000005ec
 4f0:	.word	0x00000640
 4f4:	.word	0x00000640
 4f8:	.word	0x00000640
 4fc:	.word	0x00000578
 500:	ldr	r2, [r5, #24]
 504:	mul	r3, r2, r3
 508:	cmp	r3, #0
 50c:	ble	540 <read_array+0x190>
 510:	mov	r3, #0
 514:	add	r1, sl, #1
 518:	ldrb	r0, [sl, r3, lsl #1]
 51c:	ldrb	r2, [r1, r3, lsl #1]
 520:	strb	r0, [r1, r3, lsl #1]
 524:	strb	r2, [sl, r3, lsl #1]
 528:	add	r3, r3, #1
 52c:	ldr	r0, [r5, #20]
 530:	ldr	r2, [r5, #24]
 534:	mul	r2, r2, r0
 538:	cmp	r2, r3
 53c:	bgt	518 <read_array+0x168>
 540:	mov	r0, #0
 544:	add	sp, sp, #28
 548:	ldrd	r4, [sp]
 54c:	ldrd	r6, [sp, #8]
 550:	ldrd	r8, [sp, #16]
 554:	ldrd	sl, [sp, #24]
 558:	add	sp, sp, #32
 55c:	pop	{pc}		; (ldr pc, [sp], #4)
 560:	mvn	r0, #199	; 0xc7
 564:	movw	r1, #0
 568:	movt	r1, #0
 56c:	bl	0 <coda_set_error>
 570:	mvn	r0, #0
 574:	b	544 <read_array+0x194>
 578:	ldr	r2, [r5, #24]
 57c:	mul	r3, r2, r3
 580:	cmp	r3, #0
 584:	movgt	r2, #0
 588:	ble	540 <read_array+0x190>
 58c:	ldrb	r1, [sl, #7]
 590:	add	r2, r2, #1
 594:	add	sl, sl, #8
 598:	ldrb	r3, [sl, #-8]
 59c:	ldrb	r0, [sl, #-2]
 5a0:	strb	r1, [sl, #-8]
 5a4:	ldrb	r1, [sl, #-7]
 5a8:	strb	r3, [sl, #-1]
 5ac:	ldrb	r3, [sl, #-3]
 5b0:	strb	r0, [sl, #-7]
 5b4:	ldrb	r0, [sl, #-6]
 5b8:	strb	r3, [sl, #-6]
 5bc:	ldrb	r3, [sl, #-5]
 5c0:	strb	r1, [sl, #-2]
 5c4:	ldrb	r1, [sl, #-4]
 5c8:	strb	r0, [sl, #-3]
 5cc:	strb	r1, [sl, #-5]
 5d0:	strb	r3, [sl, #-4]
 5d4:	ldr	r1, [r5, #20]
 5d8:	ldr	r3, [r5, #24]
 5dc:	mul	r3, r3, r1
 5e0:	cmp	r3, r2
 5e4:	bgt	58c <read_array+0x1dc>
 5e8:	b	540 <read_array+0x190>
 5ec:	ldr	r2, [r5, #24]
 5f0:	mul	r3, r2, r3
 5f4:	cmp	r3, #0
 5f8:	movgt	r2, #0
 5fc:	ble	540 <read_array+0x190>
 600:	ldrb	r3, [sl, #3]
 604:	add	r2, r2, #1
 608:	add	sl, sl, #4
 60c:	ldrb	r1, [sl, #-2]
 610:	ldrb	r0, [sl, #-4]
 614:	strb	r3, [sl, #-4]
 618:	ldrb	r3, [sl, #-3]
 61c:	strb	r1, [sl, #-3]
 620:	strb	r3, [sl, #-2]
 624:	strb	r0, [sl, #-1]
 628:	ldr	r1, [r5, #20]
 62c:	ldr	r3, [r5, #24]
 630:	mul	r3, r3, r1
 634:	cmp	r3, r2
 638:	bgt	600 <read_array+0x250>
 63c:	b	540 <read_array+0x190>
 640:	movw	r1, #0
 644:	movt	r1, #0
 648:	ldr	r3, [pc, #40]	; 678 <read_array+0x2c8>
 64c:	movw	r0, #0
 650:	movt	r0, #0
 654:	movw	r2, #278	; 0x116
 658:	bl	0 <__assert_fail>
 65c:	movw	r1, #0
 660:	movt	r1, #0
 664:	ldr	r3, [pc, #12]	; 678 <read_array+0x2c8>
 668:	movw	r0, #0
 66c:	movt	r0, #0
 670:	mov	r2, #215	; 0xd7
 674:	bl	0 <__assert_fail>
 678:	.word	0x0000001c

0000067c <read_partial_array>:
 67c:	strd	r4, [sp, #-36]!	; 0xffffffdc
 680:	strd	r6, [sp, #8]
 684:	strd	r8, [sp, #16]
 688:	mov	r9, r1
 68c:	ldr	r1, [r0, #4]
 690:	strd	sl, [sp, #24]
 694:	str	lr, [sp, #32]
 698:	sub	sp, sp, #52	; 0x34
 69c:	str	r3, [sp, #20]
 6a0:	add	r1, r0, r1, lsl #4
 6a4:	str	r0, [sp, #36]	; 0x24
 6a8:	str	r2, [sp, #40]	; 0x28
 6ac:	ldr	r8, [r1, #-8]
 6b0:	ldr	r1, [r8, #8]
 6b4:	ldr	r3, [r8, #24]
 6b8:	ldr	r2, [r8, #28]
 6bc:	cmp	r1, #2
 6c0:	mul	r2, r2, r3
 6c4:	str	r2, [sp, #32]
 6c8:	bne	990 <read_partial_array+0x314>
 6cc:	ldr	r2, [r8, #16]
 6d0:	sdiv	r6, r9, r3
 6d4:	cmp	r2, #0
 6d8:	ldreq	r2, [r8, #4]
 6dc:	ldrne	r2, [r2, #4]
 6e0:	ldr	r2, [r2, #8]
 6e4:	str	r2, [sp, #44]	; 0x2c
 6e8:	ldr	r2, [sp, #40]	; 0x28
 6ec:	add	r2, r9, r2
 6f0:	str	r2, [sp, #24]
 6f4:	sdiv	r2, r2, r3
 6f8:	cmp	r6, r2
 6fc:	str	r2, [sp, #28]
 700:	bgt	800 <read_partial_array+0x184>
 704:	ldr	r1, [r8, #36]	; 0x24
 708:	lsl	r2, r6, #3
 70c:	ldrd	sl, [r1, r2]
 710:	cmp	sl, #0
 714:	sbcs	r2, fp, #0
 718:	blt	8d8 <read_partial_array+0x25c>
 71c:	mov	r7, #0
 720:	mov	r0, r3
 724:	b	768 <read_partial_array+0xec>
 728:	add	r1, sl, r0
 72c:	mov	r2, r4
 730:	mov	r0, ip
 734:	add	r1, r3, r1
 738:	bl	0 <memcpy>
 73c:	ldr	r3, [sp, #28]
 740:	adds	r7, r7, r4
 744:	cmp	r6, r3
 748:	bgt	800 <read_partial_array+0x184>
 74c:	ldr	r2, [r8, #36]	; 0x24
 750:	lsl	r3, r6, #3
 754:	ldrd	sl, [r2, r3]
 758:	cmp	sl, #0
 75c:	sbcs	r3, fp, #0
 760:	blt	8d8 <read_partial_array+0x25c>
 764:	ldr	r0, [r8, #24]
 768:	add	r6, r6, #1
 76c:	ldr	r2, [sp, #24]
 770:	mul	r3, r0, r6
 774:	cmp	r2, r3
 778:	sub	r3, r3, r0
 77c:	ldrlt	r4, [r8, #28]
 780:	sublt	r2, r2, r3
 784:	ldrge	r4, [sp, #32]
 788:	mullt	r4, r4, r2
 78c:	cmp	r9, r3
 790:	movle	r0, #0
 794:	movle	r1, #0
 798:	asr	r5, r4, #31
 79c:	ble	7bc <read_partial_array+0x140>
 7a0:	ldr	r0, [r8, #28]
 7a4:	sub	r3, r9, r3
 7a8:	mul	r3, r0, r3
 7ac:	asr	r1, r3, #31
 7b0:	subs	r4, r4, r3
 7b4:	mov	r0, r3
 7b8:	sbc	r5, r5, r1
 7bc:	ldr	r3, [r8, #40]	; 0x28
 7c0:	ldr	r2, [sp, #20]
 7c4:	cmp	r3, #0
 7c8:	add	ip, r2, r7
 7cc:	bne	728 <read_partial_array+0xac>
 7d0:	ldr	r3, [sp, #36]	; 0x24
 7d4:	adds	r2, r0, sl
 7d8:	ldr	lr, [r3]
 7dc:	adc	r3, r1, fp
 7e0:	ldr	r0, [lr, #52]	; 0x34
 7e4:	strd	r4, [sp]
 7e8:	str	ip, [sp, #8]
 7ec:	bl	0 <read_bytes>
 7f0:	cmp	r0, #0
 7f4:	beq	73c <read_partial_array+0xc0>
 7f8:	mvn	r0, #0
 7fc:	b	8bc <read_partial_array+0x240>
 800:	ldr	r3, [sp, #44]	; 0x2c
 804:	cmp	r3, #4
 808:	beq	8b8 <read_partial_array+0x23c>
 80c:	ldr	r3, [sp, #36]	; 0x24
 810:	ldr	r3, [r3]
 814:	ldr	r3, [r3, #68]	; 0x44
 818:	cmp	r3, #1
 81c:	beq	8b8 <read_partial_array+0x23c>
 820:	ldr	r3, [r8, #28]
 824:	sub	r3, r3, #1
 828:	cmp	r3, #7
 82c:	ldrls	pc, [pc, r3, lsl #2]
 830:	b	974 <read_partial_array+0x2f8>
 834:	.word	0x000008b8
 838:	.word	0x00000938
 83c:	.word	0x00000974
 840:	.word	0x000008f0
 844:	.word	0x00000974
 848:	.word	0x00000974
 84c:	.word	0x00000974
 850:	.word	0x00000854
 854:	ldr	r3, [sp, #40]	; 0x28
 858:	cmp	r3, #0
 85c:	ble	8b8 <read_partial_array+0x23c>
 860:	ldr	r3, [sp, #20]
 864:	ldr	r2, [sp, #40]	; 0x28
 868:	add	r2, r3, r2, lsl #3
 86c:	ldrb	r0, [r3, #7]
 870:	add	r3, r3, #8
 874:	ldrb	r1, [r3, #-8]
 878:	ldrb	ip, [r3, #-2]
 87c:	strb	r0, [r3, #-8]
 880:	ldrb	r0, [r3, #-7]
 884:	strb	r1, [r3, #-1]
 888:	ldrb	r1, [r3, #-3]
 88c:	strb	ip, [r3, #-7]
 890:	ldrb	ip, [r3, #-6]
 894:	strb	r1, [r3, #-6]
 898:	ldrb	r1, [r3, #-5]
 89c:	strb	r0, [r3, #-2]
 8a0:	ldrb	r0, [r3, #-4]
 8a4:	strb	ip, [r3, #-3]
 8a8:	strb	r0, [r3, #-5]
 8ac:	strb	r1, [r3, #-4]
 8b0:	cmp	r3, r2
 8b4:	bne	86c <read_partial_array+0x1f0>
 8b8:	mov	r0, #0
 8bc:	add	sp, sp, #52	; 0x34
 8c0:	ldrd	r4, [sp]
 8c4:	ldrd	r6, [sp, #8]
 8c8:	ldrd	r8, [sp, #16]
 8cc:	ldrd	sl, [sp, #24]
 8d0:	add	sp, sp, #32
 8d4:	pop	{pc}		; (ldr pc, [sp], #4)
 8d8:	mvn	r0, #199	; 0xc7
 8dc:	movw	r1, #0
 8e0:	movt	r1, #0
 8e4:	bl	0 <coda_set_error>
 8e8:	mvn	r0, #0
 8ec:	b	8bc <read_partial_array+0x240>
 8f0:	ldr	r3, [sp, #40]	; 0x28
 8f4:	cmp	r3, #0
 8f8:	ble	8b8 <read_partial_array+0x23c>
 8fc:	ldr	r3, [sp, #20]
 900:	ldr	r2, [sp, #40]	; 0x28
 904:	add	ip, r3, r2, lsl #2
 908:	ldrb	r2, [r3, #3]
 90c:	add	r3, r3, #4
 910:	ldrb	r0, [r3, #-4]
 914:	ldrb	r1, [r3, #-2]
 918:	strb	r2, [r3, #-4]
 91c:	ldrb	r2, [r3, #-3]
 920:	strb	r1, [r3, #-3]
 924:	strb	r0, [r3, #-1]
 928:	strb	r2, [r3, #-2]
 92c:	cmp	ip, r3
 930:	bne	908 <read_partial_array+0x28c>
 934:	b	8b8 <read_partial_array+0x23c>
 938:	ldr	r2, [sp, #40]	; 0x28
 93c:	cmp	r2, #0
 940:	ble	8b8 <read_partial_array+0x23c>
 944:	ldr	r3, [sp, #20]
 948:	add	ip, r3, r2, lsl #1
 94c:	add	r2, r3, #1
 950:	ldrb	r0, [r2, #-1]
 954:	add	r3, r3, #2
 958:	add	r2, r2, #2
 95c:	ldrb	r1, [r3, #-1]
 960:	strb	r0, [r3, #-1]
 964:	cmp	ip, r3
 968:	strb	r1, [r2, #-3]
 96c:	bne	950 <read_partial_array+0x2d4>
 970:	b	8b8 <read_partial_array+0x23c>
 974:	movw	r1, #0
 978:	movt	r1, #0
 97c:	ldr	r3, [pc, #40]	; 9ac <read_partial_array+0x330>
 980:	movw	r0, #0
 984:	movt	r0, #0
 988:	movw	r2, #379	; 0x17b
 98c:	bl	0 <__assert_fail>
 990:	movw	r1, #0
 994:	movt	r1, #0
 998:	ldr	r3, [pc, #12]	; 9ac <read_partial_array+0x330>
 99c:	movw	r0, #0
 9a0:	movt	r0, #0
 9a4:	mov	r2, #296	; 0x128
 9a8:	bl	0 <__assert_fail>
 9ac:	.word	0x00000028

000009b0 <coda_cdf_cursor_set_product>:
 9b0:	ldr	r2, [r1, #20]
 9b4:	mov	r3, r0
 9b8:	mvn	ip, #0
 9bc:	mov	r0, #1
 9c0:	strd	r4, [sp, #-8]!
 9c4:	mvn	r4, #0
 9c8:	mvn	r5, #0
 9cc:	str	r1, [r3]
 9d0:	stmib	r3, {r0, r2, ip}
 9d4:	mov	r0, #0
 9d8:	strd	r4, [r3, #16]
 9dc:	ldrd	r4, [sp]
 9e0:	add	sp, sp, #8
 9e4:	bx	lr

000009e8 <coda_cdf_cursor_goto_array_element>:
 9e8:	ldr	r3, [r0, #4]
 9ec:	strd	r4, [sp, #-16]!
 9f0:	mov	r5, r1
 9f4:	mov	r4, r2
 9f8:	add	r3, r0, r3, lsl #4
 9fc:	ldr	r3, [r3, #-8]
 a00:	str	r6, [sp, #8]
 a04:	mov	r6, r0
 a08:	str	lr, [sp, #12]
 a0c:	sub	sp, sp, #40	; 0x28
 a10:	add	r1, sp, #4
 a14:	add	r2, sp, #8
 a18:	ldr	r0, [r3, #4]
 a1c:	bl	0 <coda_type_get_array_dim>
 a20:	cmp	r0, #0
 a24:	bne	b18 <coda_cdf_cursor_goto_array_element+0x130>
 a28:	ldr	r3, [sp, #4]
 a2c:	cmp	r3, r5
 a30:	bne	afc <coda_cdf_cursor_goto_array_element+0x114>
 a34:	cmp	r5, #0
 a38:	ble	af4 <coda_cdf_cursor_goto_array_element+0x10c>
 a3c:	ldr	r2, [r4]
 a40:	ldr	r3, [sp, #8]
 a44:	cmp	r2, #0
 a48:	blt	acc <coda_cdf_cursor_goto_array_element+0xe4>
 a4c:	cmp	r3, r2
 a50:	ble	acc <coda_cdf_cursor_goto_array_element+0xe4>
 a54:	mov	ip, r4
 a58:	mov	r1, r0
 a5c:	add	r4, sp, #12
 a60:	mov	lr, r0
 a64:	b	a84 <coda_cdf_cursor_goto_array_element+0x9c>
 a68:	ldr	r2, [ip, #4]!
 a6c:	ldr	r3, [r4], #4
 a70:	cmp	r2, #0
 a74:	blt	acc <coda_cdf_cursor_goto_array_element+0xe4>
 a78:	cmp	r2, r3
 a7c:	mul	lr, r3, lr
 a80:	bge	acc <coda_cdf_cursor_goto_array_element+0xe4>
 a84:	add	r1, r1, #1
 a88:	add	lr, lr, r2
 a8c:	cmp	r5, r1
 a90:	bne	a68 <coda_cdf_cursor_goto_array_element+0x80>
 a94:	ldr	r3, [r6, #4]
 a98:	mvn	r4, #0
 a9c:	mvn	r5, #0
 aa0:	add	r1, r6, r3, lsl #4
 aa4:	add	r2, r3, #1
 aa8:	ldr	ip, [r1, #-8]
 aac:	mov	r3, r1
 ab0:	lsl	r1, r2, #4
 ab4:	ldr	ip, [ip, #16]
 ab8:	str	r2, [r6, #4]
 abc:	str	ip, [r3, #8]
 ac0:	str	lr, [r3, #12]
 ac4:	strd	r4, [r6, r1]
 ac8:	b	ae0 <coda_cdf_cursor_goto_array_element+0xf8>
 acc:	mvn	r0, #106	; 0x6a
 ad0:	movw	r1, #0
 ad4:	movt	r1, #0
 ad8:	bl	0 <coda_set_error>
 adc:	mvn	r0, #0
 ae0:	add	sp, sp, #40	; 0x28
 ae4:	ldrd	r4, [sp]
 ae8:	ldr	r6, [sp, #8]
 aec:	add	sp, sp, #12
 af0:	pop	{pc}		; (ldr pc, [sp], #4)
 af4:	mov	lr, r0
 af8:	b	a94 <coda_cdf_cursor_goto_array_element+0xac>
 afc:	mvn	r0, #105	; 0x69
 b00:	mov	r2, r5
 b04:	movw	r1, #0
 b08:	movt	r1, #0
 b0c:	bl	0 <coda_set_error>
 b10:	mvn	r0, #0
 b14:	b	ae0 <coda_cdf_cursor_goto_array_element+0xf8>
 b18:	mvn	r0, #0
 b1c:	b	ae0 <coda_cdf_cursor_goto_array_element+0xf8>

00000b20 <coda_cdf_cursor_goto_array_element_by_index>:
 b20:	ldr	ip, [r0, #4]
 b24:	strd	r4, [sp, #-16]!
 b28:	ldr	r3, [pc, #152]	; bc8 <coda_cdf_cursor_goto_array_element_by_index+0xa8>
 b2c:	add	r2, r0, ip, lsl #4
 b30:	ldr	r2, [r2, #-8]
 b34:	str	r6, [sp, #8]
 b38:	str	lr, [sp, #12]
 b3c:	mrc	15, 0, lr, cr13, cr0, {3}
 b40:	ldr	r3, [pc, r3]
 b44:	ldr	r3, [lr, r3]
 b48:	cmp	r3, #0
 b4c:	beq	b6c <coda_cdf_cursor_goto_array_element_by_index+0x4c>
 b50:	ldr	r3, [r2, #4]
 b54:	ldr	r3, [r3, #44]	; 0x2c
 b58:	cmp	r3, r1
 b5c:	movgt	lr, #0
 b60:	movle	lr, #1
 b64:	orrs	lr, lr, r1, lsr #31
 b68:	bne	bac <coda_cdf_cursor_goto_array_element_by_index+0x8c>
 b6c:	ldr	r6, [r2, #16]
 b70:	add	r3, ip, #1
 b74:	add	ip, r0, ip, lsl #4
 b78:	lsl	lr, r3, #4
 b7c:	mvn	r4, #0
 b80:	mvn	r5, #0
 b84:	mov	r2, #0
 b88:	str	r3, [r0, #4]
 b8c:	str	r6, [ip, #8]
 b90:	str	r1, [ip, #12]
 b94:	strd	r4, [r0, lr]
 b98:	ldrd	r4, [sp]
 b9c:	mov	r0, r2
 ba0:	ldr	r6, [sp, #8]
 ba4:	add	sp, sp, #12
 ba8:	pop	{pc}		; (ldr pc, [sp], #4)
 bac:	mov	r2, r1
 bb0:	mvn	r0, #106	; 0x6a
 bb4:	movw	r1, #0
 bb8:	movt	r1, #0
 bbc:	bl	0 <coda_set_error>
 bc0:	mvn	r2, #0
 bc4:	b	b98 <coda_cdf_cursor_goto_array_element_by_index+0x78>
 bc8:	.word	0x00000080

00000bcc <coda_cdf_cursor_goto_next_array_element>:
 bcc:	ldr	r2, [pc, #136]	; c5c <coda_cdf_cursor_goto_next_array_element+0x90>
 bd0:	mrc	15, 0, r1, cr13, cr0, {3}
 bd4:	str	r4, [sp, #-8]!
 bd8:	ldr	ip, [r0, #4]
 bdc:	str	lr, [sp, #4]
 be0:	ldr	r2, [pc, r2]
 be4:	sub	r3, ip, #1
 be8:	lsl	r3, r3, #4
 bec:	add	lr, r0, r3
 bf0:	ldr	r1, [r1, r2]
 bf4:	ldr	r2, [lr, #12]
 bf8:	cmp	r1, #0
 bfc:	add	r2, r2, #1
 c00:	beq	c28 <coda_cdf_cursor_goto_next_array_element+0x5c>
 c04:	add	ip, r0, ip, lsl #4
 c08:	ldr	r1, [ip, #-24]	; 0xffffffe8
 c0c:	ldr	r1, [r1, #4]
 c10:	ldr	r1, [r1, #44]	; 0x2c
 c14:	cmp	r1, r2
 c18:	movgt	ip, #0
 c1c:	movle	ip, #1
 c20:	orrs	ip, ip, r2, lsr #31
 c24:	bne	c40 <coda_cdf_cursor_goto_next_array_element+0x74>
 c28:	add	r3, r0, r3
 c2c:	mov	r0, #0
 c30:	str	r2, [r3, #12]
 c34:	ldr	r4, [sp]
 c38:	add	sp, sp, #4
 c3c:	pop	{pc}		; (ldr pc, [sp], #4)
 c40:	mov	r3, r1
 c44:	mvn	r0, #106	; 0x6a
 c48:	movw	r1, #0
 c4c:	movt	r1, #0
 c50:	bl	0 <coda_set_error>
 c54:	mvn	r0, #0
 c58:	b	c34 <coda_cdf_cursor_goto_next_array_element+0x68>
 c5c:	.word	0x00000074

00000c60 <coda_cdf_cursor_goto_attributes>:
 c60:	strd	r4, [sp, #-24]!	; 0xffffffe8
 c64:	mov	r5, r0
 c68:	ldr	r4, [r0, #4]
 c6c:	add	r2, r0, r4, lsl #4
 c70:	add	r3, r4, #1
 c74:	ldr	r2, [r2, #-8]
 c78:	ldr	r1, [r2, #8]
 c7c:	strd	r6, [sp, #8]
 c80:	str	r8, [sp, #16]
 c84:	str	lr, [sp, #20]
 c88:	str	r3, [r0, #4]
 c8c:	cmp	r1, #2
 c90:	bne	cb0 <coda_cdf_cursor_goto_attributes+0x50>
 c94:	ldr	r2, [r2, #12]
 c98:	cmp	r2, #0
 c9c:	beq	cb0 <coda_cdf_cursor_goto_attributes+0x50>
 ca0:	lsl	r4, r4, #4
 ca4:	add	r1, r0, r4
 ca8:	str	r2, [r1, #8]
 cac:	b	ccc <coda_cdf_cursor_goto_attributes+0x6c>
 cb0:	mov	r0, #5
 cb4:	add	r4, r5, r4, lsl #4
 cb8:	bl	0 <coda_mem_empty_record>
 cbc:	ldr	r3, [r5, #4]
 cc0:	str	r0, [r4, #8]
 cc4:	sub	r4, r3, #1
 cc8:	lsl	r4, r4, #4
 ccc:	lsl	r3, r3, #4
 cd0:	add	r4, r5, r4
 cd4:	mvn	r6, #0
 cd8:	mvn	r7, #0
 cdc:	mvn	r2, #0
 ce0:	ldr	r8, [sp, #16]
 ce4:	mov	r0, #0
 ce8:	str	r2, [r4, #12]
 cec:	strd	r6, [r5, r3]
 cf0:	ldrd	r4, [sp]
 cf4:	ldrd	r6, [sp, #8]
 cf8:	add	sp, sp, #20
 cfc:	pop	{pc}		; (ldr pc, [sp], #4)

00000d00 <coda_cdf_cursor_use_base_type_of_special_type>:
 d00:	mov	r3, r0
 d04:	mov	r0, #0
 d08:	ldr	r2, [r3, #4]
 d0c:	sub	r2, r2, #1
 d10:	add	r3, r3, r2, lsl #4
 d14:	ldr	r2, [r3, #8]
 d18:	ldr	r2, [r2, #12]
 d1c:	str	r2, [r3, #8]
 d20:	bx	lr

00000d24 <coda_cdf_cursor_get_num_elements>:
 d24:	ldr	r3, [r0, #4]
 d28:	add	r0, r0, r3, lsl #4
 d2c:	ldr	r3, [r0, #-8]
 d30:	mov	r0, #0
 d34:	ldr	r3, [r3, #4]
 d38:	ldr	r2, [r3, #8]
 d3c:	cmp	r2, #1
 d40:	ldreq	r3, [r3, #44]	; 0x2c
 d44:	movne	r3, #1
 d48:	str	r3, [r1]
 d4c:	bx	lr

00000d50 <coda_cdf_cursor_get_string_length>:
 d50:	ldr	r3, [r0, #4]
 d54:	add	r0, r0, r3, lsl #4
 d58:	ldr	r3, [r0, #-8]
 d5c:	ldr	r0, [r3, #4]
 d60:	b	0 <coda_type_get_string_length>

00000d64 <coda_cdf_cursor_get_array_dim>:
 d64:	ldr	r3, [r0, #4]
 d68:	add	r0, r0, r3, lsl #4
 d6c:	ldr	r3, [r0, #-8]
 d70:	ldr	r0, [r3, #4]
 d74:	b	0 <coda_type_get_array_dim>

00000d78 <coda_cdf_cursor_read_int8>:
 d78:	mvn	r2, #0
 d7c:	b	178 <read_basic_type>

00000d80 <coda_cdf_cursor_read_uint8>:
 d80:	mvn	r2, #0
 d84:	b	178 <read_basic_type>

00000d88 <coda_cdf_cursor_read_int16>:
 d88:	mvn	r2, #0
 d8c:	b	178 <read_basic_type>

00000d90 <coda_cdf_cursor_read_uint16>:
 d90:	mvn	r2, #0
 d94:	b	178 <read_basic_type>

00000d98 <coda_cdf_cursor_read_int32>:
 d98:	mvn	r2, #0
 d9c:	b	178 <read_basic_type>

00000da0 <coda_cdf_cursor_read_uint32>:
 da0:	mvn	r2, #0
 da4:	b	178 <read_basic_type>

00000da8 <coda_cdf_cursor_read_int64>:
 da8:	mvn	r2, #0
 dac:	b	178 <read_basic_type>

00000db0 <coda_cdf_cursor_read_float>:
 db0:	mvn	r2, #0
 db4:	b	178 <read_basic_type>

00000db8 <coda_cdf_cursor_read_double>:
 db8:	mvn	r2, #0
 dbc:	b	178 <read_basic_type>

00000dc0 <coda_cdf_cursor_read_char>:
 dc0:	mvn	r2, #0
 dc4:	b	178 <read_basic_type>

00000dc8 <coda_cdf_cursor_read_string>:
 dc8:	strd	r4, [sp, #-16]!
 dcc:	mov	r4, r1
 dd0:	mov	r5, r2
 dd4:	str	r6, [sp, #8]
 dd8:	str	lr, [sp, #12]
 ddc:	bl	178 <read_basic_type>
 de0:	cmp	r0, #0
 de4:	addeq	r4, r4, r5
 de8:	mvnne	r0, #0
 dec:	strbeq	r0, [r4, #-1]
 df0:	ldrd	r4, [sp]
 df4:	ldr	r6, [sp, #8]
 df8:	add	sp, sp, #12
 dfc:	pop	{pc}		; (ldr pc, [sp], #4)

00000e00 <coda_cdf_cursor_read_int8_array>:
 e00:	b	3b0 <read_array>

00000e04 <coda_cdf_cursor_read_uint8_array>:
 e04:	b	3b0 <read_array>

00000e08 <coda_cdf_cursor_read_int16_array>:
 e08:	b	3b0 <read_array>

00000e0c <coda_cdf_cursor_read_uint16_array>:
 e0c:	b	3b0 <read_array>

00000e10 <coda_cdf_cursor_read_int32_array>:
 e10:	b	3b0 <read_array>

00000e14 <coda_cdf_cursor_read_uint32_array>:
 e14:	b	3b0 <read_array>

00000e18 <coda_cdf_cursor_read_int64_array>:
 e18:	b	3b0 <read_array>

00000e1c <coda_cdf_cursor_read_float_array>:
 e1c:	b	3b0 <read_array>

00000e20 <coda_cdf_cursor_read_double_array>:
 e20:	b	3b0 <read_array>

00000e24 <coda_cdf_cursor_read_char_array>:
 e24:	b	3b0 <read_array>

00000e28 <coda_cdf_cursor_read_int8_partial_array>:
 e28:	b	67c <read_partial_array>

00000e2c <coda_cdf_cursor_read_uint8_partial_array>:
 e2c:	b	67c <read_partial_array>

00000e30 <coda_cdf_cursor_read_int16_partial_array>:
 e30:	b	67c <read_partial_array>

00000e34 <coda_cdf_cursor_read_uint16_partial_array>:
 e34:	b	67c <read_partial_array>

00000e38 <coda_cdf_cursor_read_int32_partial_array>:
 e38:	b	67c <read_partial_array>

00000e3c <coda_cdf_cursor_read_uint32_partial_array>:
 e3c:	b	67c <read_partial_array>

00000e40 <coda_cdf_cursor_read_int64_partial_array>:
 e40:	b	67c <read_partial_array>

00000e44 <coda_cdf_cursor_read_float_partial_array>:
 e44:	b	67c <read_partial_array>

00000e48 <coda_cdf_cursor_read_double_partial_array>:
 e48:	b	67c <read_partial_array>

00000e4c <coda_cdf_cursor_read_char_partial_array>:
 e4c:	b	67c <read_partial_array>
