
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
   0:	push	{r0, r1, r2, r3}
   4:	push	{fp, lr}
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #8
  10:	add	r3, fp, #8
  14:	str	r3, [fp, #-12]
  18:	ldr	r3, [pc, #44]	; 4c <ff_printf+0x4c>
  1c:	ldr	r3, [r3]
  20:	ldr	r2, [fp, #-12]
  24:	ldr	r1, [fp, #4]
  28:	mov	r0, r3
  2c:	bl	0 <vfprintf>
  30:	str	r0, [fp, #-8]
  34:	ldr	r3, [fp, #-8]
  38:	mov	r0, r3
  3c:	sub	sp, fp, #4
  40:	pop	{fp, lr}
  44:	add	sp, sp, #16
  48:	bx	lr
  4c:	.word	0x00000000

00000050 <print_escaped>:
  50:	push	{fp, lr}
  54:	add	fp, sp, #4
  58:	sub	sp, sp, #16
  5c:	str	r0, [fp, #-16]
  60:	str	r1, [fp, #-20]	; 0xffffffec
  64:	mov	r3, #0
  68:	str	r3, [fp, #-8]
  6c:	b	16c <print_escaped+0x11c>
  70:	ldr	r3, [fp, #-8]
  74:	ldr	r2, [fp, #-16]
  78:	add	r3, r2, r3
  7c:	ldrb	r3, [r3]
  80:	strb	r3, [fp, #-9]
  84:	ldrb	r3, [fp, #-9]
  88:	cmp	r3, #12
  8c:	beq	dc <print_escaped+0x8c>
  90:	cmp	r3, #12
  94:	bgt	b4 <print_escaped+0x64>
  98:	cmp	r3, #9
  9c:	beq	100 <print_escaped+0xb0>
  a0:	cmp	r3, #10
  a4:	beq	e8 <print_escaped+0x98>
  a8:	cmp	r3, #8
  ac:	beq	d0 <print_escaped+0x80>
  b0:	b	124 <print_escaped+0xd4>
  b4:	cmp	r3, #34	; 0x22
  b8:	beq	10c <print_escaped+0xbc>
  bc:	cmp	r3, #92	; 0x5c
  c0:	beq	118 <print_escaped+0xc8>
  c4:	cmp	r3, #13
  c8:	beq	f4 <print_escaped+0xa4>
  cc:	b	124 <print_escaped+0xd4>
  d0:	ldr	r0, [pc, #176]	; 188 <print_escaped+0x138>
  d4:	bl	0 <ff_printf>
  d8:	b	160 <print_escaped+0x110>
  dc:	ldr	r0, [pc, #168]	; 18c <print_escaped+0x13c>
  e0:	bl	0 <ff_printf>
  e4:	b	160 <print_escaped+0x110>
  e8:	ldr	r0, [pc, #160]	; 190 <print_escaped+0x140>
  ec:	bl	0 <ff_printf>
  f0:	b	160 <print_escaped+0x110>
  f4:	ldr	r0, [pc, #152]	; 194 <print_escaped+0x144>
  f8:	bl	0 <ff_printf>
  fc:	b	160 <print_escaped+0x110>
 100:	ldr	r0, [pc, #144]	; 198 <print_escaped+0x148>
 104:	bl	0 <ff_printf>
 108:	b	160 <print_escaped+0x110>
 10c:	ldr	r0, [pc, #136]	; 19c <print_escaped+0x14c>
 110:	bl	0 <ff_printf>
 114:	b	160 <print_escaped+0x110>
 118:	ldr	r0, [pc, #128]	; 1a0 <print_escaped+0x150>
 11c:	bl	0 <ff_printf>
 120:	b	160 <print_escaped+0x110>
 124:	ldrb	r3, [fp, #-9]
 128:	cmp	r3, #31
 12c:	bls	150 <print_escaped+0x100>
 130:	ldrb	r3, [fp, #-9]
 134:	cmp	r3, #126	; 0x7e
 138:	bhi	150 <print_escaped+0x100>
 13c:	ldrb	r3, [fp, #-9]
 140:	mov	r1, r3
 144:	ldr	r0, [pc, #88]	; 1a4 <print_escaped+0x154>
 148:	bl	0 <ff_printf>
 14c:	b	160 <print_escaped+0x110>
 150:	ldrb	r3, [fp, #-9]
 154:	mov	r1, r3
 158:	ldr	r0, [pc, #72]	; 1a8 <print_escaped+0x158>
 15c:	bl	0 <ff_printf>
 160:	ldr	r3, [fp, #-8]
 164:	add	r3, r3, #1
 168:	str	r3, [fp, #-8]
 16c:	ldr	r2, [fp, #-8]
 170:	ldr	r3, [fp, #-20]	; 0xffffffec
 174:	cmp	r2, r3
 178:	blt	70 <print_escaped+0x20>
 17c:	nop			; (mov r0, r0)
 180:	sub	sp, fp, #4
 184:	pop	{fp, pc}
 188:	.word	0x00000000
 18c:	.word	0x00000004
 190:	.word	0x00000008
 194:	.word	0x0000000c
 198:	.word	0x00000010
 19c:	.word	0x00000014
 1a0:	.word	0x00000018
 1a4:	.word	0x0000001c
 1a8:	.word	0x00000020

000001ac <print_data>:
 1ac:	push	{r4, r5, fp, lr}
 1b0:	add	fp, sp, #12
 1b4:	sub	sp, sp, #288	; 0x120
 1b8:	str	r0, [fp, #-288]	; 0xfffffee0
 1bc:	mov	r3, #0
 1c0:	str	r3, [fp, #-48]	; 0xffffffd0
 1c4:	ldr	r3, [pc, #2388]	; b20 <print_data+0x974>
 1c8:	ldr	r3, [r3]
 1cc:	cmp	r3, #0
 1d0:	beq	238 <print_data+0x8c>
 1d4:	sub	r3, fp, #48	; 0x30
 1d8:	mov	r1, r3
 1dc:	ldr	r0, [fp, #-288]	; 0xfffffee0
 1e0:	bl	0 <coda_cursor_has_attributes>
 1e4:	mov	r3, r0
 1e8:	cmp	r3, #0
 1ec:	beq	1f4 <print_data+0x48>
 1f0:	bl	0 <handle_coda_error>
 1f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
 1f8:	cmp	r3, #0
 1fc:	beq	238 <print_data+0x8c>
 200:	ldr	r0, [pc, #2332]	; b24 <print_data+0x978>
 204:	bl	0 <ff_printf>
 208:	ldr	r0, [fp, #-288]	; 0xfffffee0
 20c:	bl	0 <coda_cursor_goto_attributes>
 210:	mov	r3, r0
 214:	cmp	r3, #0
 218:	beq	220 <print_data+0x74>
 21c:	bl	0 <handle_coda_error>
 220:	ldr	r0, [fp, #-288]	; 0xfffffee0
 224:	bl	1ac <print_data>
 228:	ldr	r0, [fp, #-288]	; 0xfffffee0
 22c:	bl	0 <coda_cursor_goto_parent>
 230:	ldr	r0, [pc, #2288]	; b28 <print_data+0x97c>
 234:	bl	0 <ff_printf>
 238:	sub	r3, fp, #44	; 0x2c
 23c:	mov	r1, r3
 240:	ldr	r0, [fp, #-288]	; 0xfffffee0
 244:	bl	0 <coda_cursor_get_type_class>
 248:	mov	r3, r0
 24c:	cmp	r3, #0
 250:	beq	258 <print_data+0xac>
 254:	bl	0 <handle_coda_error>
 258:	ldr	r3, [fp, #-44]	; 0xffffffd4
 25c:	cmp	r3, #6
 260:	ldrls	pc, [pc, r3, lsl #2]
 264:	b	b00 <print_data+0x954>
 268:	.word	0x00000284
 26c:	.word	0x000004a4
 270:	.word	0x000005c8
 274:	.word	0x000005c8
 278:	.word	0x000005c8
 27c:	.word	0x000005c8
 280:	.word	0x0000098c
 284:	ldr	r0, [pc, #2208]	; b2c <print_data+0x980>
 288:	bl	0 <ff_printf>
 28c:	sub	r3, fp, #52	; 0x34
 290:	mov	r1, r3
 294:	ldr	r0, [fp, #-288]	; 0xfffffee0
 298:	bl	0 <coda_cursor_get_num_elements>
 29c:	mov	r3, r0
 2a0:	cmp	r3, #0
 2a4:	beq	2ac <print_data+0x100>
 2a8:	bl	0 <handle_coda_error>
 2ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
 2b0:	cmp	r3, #0
 2b4:	ble	498 <print_data+0x2ec>
 2b8:	sub	r3, fp, #56	; 0x38
 2bc:	mov	r1, r3
 2c0:	ldr	r0, [fp, #-288]	; 0xfffffee0
 2c4:	bl	0 <coda_cursor_get_type>
 2c8:	mov	r3, r0
 2cc:	cmp	r3, #0
 2d0:	beq	2d8 <print_data+0x12c>
 2d4:	bl	0 <handle_coda_error>
 2d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
 2dc:	sub	r2, fp, #60	; 0x3c
 2e0:	mov	r1, r2
 2e4:	mov	r0, r3
 2e8:	bl	0 <coda_type_get_record_union_status>
 2ec:	mov	r3, r0
 2f0:	cmp	r3, #0
 2f4:	beq	2fc <print_data+0x150>
 2f8:	bl	0 <handle_coda_error>
 2fc:	ldr	r3, [fp, #-60]	; 0xffffffc4
 300:	cmp	r3, #0
 304:	beq	390 <print_data+0x1e4>
 308:	sub	r3, fp, #64	; 0x40
 30c:	mov	r1, r3
 310:	ldr	r0, [fp, #-288]	; 0xfffffee0
 314:	bl	0 <coda_cursor_get_available_union_field_index>
 318:	mov	r3, r0
 31c:	cmp	r3, #0
 320:	beq	328 <print_data+0x17c>
 324:	bl	0 <handle_coda_error>
 328:	ldr	r3, [fp, #-56]	; 0xffffffc8
 32c:	ldr	r1, [fp, #-64]	; 0xffffffc0
 330:	sub	r2, fp, #68	; 0x44
 334:	mov	r0, r3
 338:	bl	0 <coda_type_get_record_field_name>
 33c:	mov	r3, r0
 340:	cmp	r3, #0
 344:	beq	34c <print_data+0x1a0>
 348:	bl	0 <handle_coda_error>
 34c:	ldr	r3, [fp, #-64]	; 0xffffffc0
 350:	mov	r1, r3
 354:	ldr	r0, [fp, #-288]	; 0xfffffee0
 358:	bl	0 <coda_cursor_goto_record_field_by_index>
 35c:	mov	r3, r0
 360:	cmp	r3, #0
 364:	beq	36c <print_data+0x1c0>
 368:	bl	0 <handle_coda_error>
 36c:	ldr	r3, [fp, #-68]	; 0xffffffbc
 370:	mov	r1, r3
 374:	ldr	r0, [pc, #1972]	; b30 <print_data+0x984>
 378:	bl	0 <ff_printf>
 37c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 380:	bl	1ac <print_data>
 384:	ldr	r0, [fp, #-288]	; 0xfffffee0
 388:	bl	0 <coda_cursor_goto_parent>
 38c:	b	498 <print_data+0x2ec>
 390:	mov	r3, #1
 394:	str	r3, [fp, #-16]
 398:	ldr	r0, [fp, #-288]	; 0xfffffee0
 39c:	bl	0 <coda_cursor_goto_first_record_field>
 3a0:	mov	r3, r0
 3a4:	cmp	r3, #0
 3a8:	beq	3b0 <print_data+0x204>
 3ac:	bl	0 <handle_coda_error>
 3b0:	mov	r3, #0
 3b4:	str	r3, [fp, #-64]	; 0xffffffc0
 3b8:	b	480 <print_data+0x2d4>
 3bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
 3c0:	ldr	r1, [fp, #-64]	; 0xffffffc0
 3c4:	sub	r2, fp, #76	; 0x4c
 3c8:	mov	r0, r3
 3cc:	bl	0 <coda_type_get_record_field_hidden_status>
 3d0:	mov	r3, r0
 3d4:	cmp	r3, #0
 3d8:	beq	3e0 <print_data+0x234>
 3dc:	bl	0 <handle_coda_error>
 3e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
 3e4:	cmp	r3, #0
 3e8:	bne	448 <print_data+0x29c>
 3ec:	ldr	r3, [fp, #-16]
 3f0:	cmp	r3, #0
 3f4:	bne	404 <print_data+0x258>
 3f8:	ldr	r0, [pc, #1844]	; b34 <print_data+0x988>
 3fc:	bl	0 <ff_printf>
 400:	b	40c <print_data+0x260>
 404:	mov	r3, #0
 408:	str	r3, [fp, #-16]
 40c:	ldr	r3, [fp, #-56]	; 0xffffffc8
 410:	ldr	r1, [fp, #-64]	; 0xffffffc0
 414:	sub	r2, fp, #72	; 0x48
 418:	mov	r0, r3
 41c:	bl	0 <coda_type_get_record_field_name>
 420:	mov	r3, r0
 424:	cmp	r3, #0
 428:	beq	430 <print_data+0x284>
 42c:	bl	0 <handle_coda_error>
 430:	ldr	r3, [fp, #-72]	; 0xffffffb8
 434:	mov	r1, r3
 438:	ldr	r0, [pc, #1776]	; b30 <print_data+0x984>
 43c:	bl	0 <ff_printf>
 440:	ldr	r0, [fp, #-288]	; 0xfffffee0
 444:	bl	1ac <print_data>
 448:	ldr	r3, [fp, #-52]	; 0xffffffcc
 44c:	sub	r2, r3, #1
 450:	ldr	r3, [fp, #-64]	; 0xffffffc0
 454:	cmp	r2, r3
 458:	ble	474 <print_data+0x2c8>
 45c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 460:	bl	0 <coda_cursor_goto_next_record_field>
 464:	mov	r3, r0
 468:	cmp	r3, #0
 46c:	beq	474 <print_data+0x2c8>
 470:	bl	0 <handle_coda_error>
 474:	ldr	r3, [fp, #-64]	; 0xffffffc0
 478:	add	r3, r3, #1
 47c:	str	r3, [fp, #-64]	; 0xffffffc0
 480:	ldr	r2, [fp, #-64]	; 0xffffffc0
 484:	ldr	r3, [fp, #-52]	; 0xffffffcc
 488:	cmp	r2, r3
 48c:	blt	3bc <print_data+0x210>
 490:	ldr	r0, [fp, #-288]	; 0xfffffee0
 494:	bl	0 <coda_cursor_goto_parent>
 498:	ldr	r0, [pc, #1688]	; b38 <print_data+0x98c>
 49c:	bl	0 <ff_printf>
 4a0:	b	b00 <print_data+0x954>
 4a4:	ldr	r0, [pc, #1680]	; b3c <print_data+0x990>
 4a8:	bl	0 <ff_printf>
 4ac:	sub	r2, fp, #284	; 0x11c
 4b0:	sub	r3, fp, #80	; 0x50
 4b4:	mov	r1, r3
 4b8:	ldr	r0, [fp, #-288]	; 0xfffffee0
 4bc:	bl	0 <coda_cursor_get_array_dim>
 4c0:	mov	r3, r0
 4c4:	cmp	r3, #0
 4c8:	beq	4d0 <print_data+0x324>
 4cc:	bl	0 <handle_coda_error>
 4d0:	ldr	r3, [fp, #-80]	; 0xffffffb0
 4d4:	cmp	r3, #0
 4d8:	blt	5bc <print_data+0x410>
 4dc:	mov	r3, #1
 4e0:	str	r3, [fp, #-20]	; 0xffffffec
 4e4:	mov	r3, #0
 4e8:	str	r3, [fp, #-24]	; 0xffffffe8
 4ec:	b	51c <print_data+0x370>
 4f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4f4:	lsl	r3, r3, #2
 4f8:	sub	r2, fp, #12
 4fc:	add	r3, r2, r3
 500:	ldr	r2, [r3, #-272]	; 0xfffffef0
 504:	ldr	r3, [fp, #-20]	; 0xffffffec
 508:	mul	r3, r2, r3
 50c:	str	r3, [fp, #-20]	; 0xffffffec
 510:	ldr	r3, [fp, #-24]	; 0xffffffe8
 514:	add	r3, r3, #1
 518:	str	r3, [fp, #-24]	; 0xffffffe8
 51c:	ldr	r3, [fp, #-80]	; 0xffffffb0
 520:	ldr	r2, [fp, #-24]	; 0xffffffe8
 524:	cmp	r2, r3
 528:	blt	4f0 <print_data+0x344>
 52c:	ldr	r3, [fp, #-20]	; 0xffffffec
 530:	cmp	r3, #0
 534:	ble	5bc <print_data+0x410>
 538:	ldr	r0, [fp, #-288]	; 0xfffffee0
 53c:	bl	0 <coda_cursor_goto_first_array_element>
 540:	mov	r3, r0
 544:	cmp	r3, #0
 548:	beq	550 <print_data+0x3a4>
 54c:	bl	0 <handle_coda_error>
 550:	mov	r3, #0
 554:	str	r3, [fp, #-24]	; 0xffffffe8
 558:	b	5a4 <print_data+0x3f8>
 55c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 560:	bl	1ac <print_data>
 564:	ldr	r3, [fp, #-20]	; 0xffffffec
 568:	sub	r2, r3, #1
 56c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 570:	cmp	r2, r3
 574:	ble	598 <print_data+0x3ec>
 578:	ldr	r0, [pc, #1460]	; b34 <print_data+0x988>
 57c:	bl	0 <ff_printf>
 580:	ldr	r0, [fp, #-288]	; 0xfffffee0
 584:	bl	0 <coda_cursor_goto_next_array_element>
 588:	mov	r3, r0
 58c:	cmp	r3, #0
 590:	beq	598 <print_data+0x3ec>
 594:	bl	0 <handle_coda_error>
 598:	ldr	r3, [fp, #-24]	; 0xffffffe8
 59c:	add	r3, r3, #1
 5a0:	str	r3, [fp, #-24]	; 0xffffffe8
 5a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
 5a8:	ldr	r3, [fp, #-20]	; 0xffffffec
 5ac:	cmp	r2, r3
 5b0:	blt	55c <print_data+0x3b0>
 5b4:	ldr	r0, [fp, #-288]	; 0xfffffee0
 5b8:	bl	0 <coda_cursor_goto_parent>
 5bc:	ldr	r0, [pc, #1404]	; b40 <print_data+0x994>
 5c0:	bl	0 <ff_printf>
 5c4:	b	b00 <print_data+0x954>
 5c8:	sub	r3, fp, #84	; 0x54
 5cc:	mov	r1, r3
 5d0:	ldr	r0, [fp, #-288]	; 0xfffffee0
 5d4:	bl	0 <coda_cursor_get_read_type>
 5d8:	mov	r3, r0
 5dc:	cmp	r3, #0
 5e0:	beq	5e8 <print_data+0x43c>
 5e4:	bl	0 <handle_coda_error>
 5e8:	ldr	r3, [fp, #-84]	; 0xffffffac
 5ec:	add	r3, r3, #1
 5f0:	cmp	r3, #13
 5f4:	ldrls	pc, [pc, r3, lsl #2]
 5f8:	b	af4 <print_data+0x948>
 5fc:	.word	0x0000097c
 600:	.word	0x00000840
 604:	.word	0x00000874
 608:	.word	0x00000840
 60c:	.word	0x00000874
 610:	.word	0x00000840
 614:	.word	0x00000874
 618:	.word	0x000008a8
 61c:	.word	0x000008ec
 620:	.word	0x00000930
 624:	.word	0x00000930
 628:	.word	0x00000634
 62c:	.word	0x00000678
 630:	.word	0x0000073c
 634:	sub	r3, fp, #85	; 0x55
 638:	mov	r1, r3
 63c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 640:	bl	0 <coda_cursor_read_char>
 644:	mov	r3, r0
 648:	cmp	r3, #0
 64c:	beq	654 <print_data+0x4a8>
 650:	bl	0 <handle_coda_error>
 654:	ldr	r0, [pc, #1256]	; b44 <print_data+0x998>
 658:	bl	0 <ff_printf>
 65c:	sub	r3, fp, #85	; 0x55
 660:	mov	r1, #1
 664:	mov	r0, r3
 668:	bl	50 <print_escaped>
 66c:	ldr	r0, [pc, #1232]	; b44 <print_data+0x998>
 670:	bl	0 <ff_printf>
 674:	b	988 <print_data+0x7dc>
 678:	sub	r3, fp, #92	; 0x5c
 67c:	mov	r1, r3
 680:	ldr	r0, [fp, #-288]	; 0xfffffee0
 684:	bl	0 <coda_cursor_get_string_length>
 688:	mov	r3, r0
 68c:	cmp	r3, #0
 690:	beq	698 <print_data+0x4ec>
 694:	bl	0 <handle_coda_error>
 698:	ldr	r3, [fp, #-92]	; 0xffffffa4
 69c:	add	r3, r3, #1
 6a0:	mov	r0, r3
 6a4:	bl	0 <malloc>
 6a8:	mov	r3, r0
 6ac:	str	r3, [fp, #-28]	; 0xffffffe4
 6b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
 6b4:	cmp	r3, #0
 6b8:	bne	6e0 <print_data+0x534>
 6bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
 6c0:	add	r2, r3, #1
 6c4:	ldr	r3, [pc, #1148]	; b48 <print_data+0x99c>
 6c8:	str	r3, [sp]
 6cc:	ldr	r3, [pc, #1144]	; b4c <print_data+0x9a0>
 6d0:	ldr	r1, [pc, #1144]	; b50 <print_data+0x9a4>
 6d4:	mvn	r0, #0
 6d8:	bl	0 <coda_set_error>
 6dc:	bl	0 <handle_coda_error>
 6e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
 6e4:	add	r3, r3, #1
 6e8:	mov	r2, r3
 6ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
 6f0:	ldr	r0, [fp, #-288]	; 0xfffffee0
 6f4:	bl	0 <coda_cursor_read_string>
 6f8:	mov	r3, r0
 6fc:	cmp	r3, #0
 700:	beq	708 <print_data+0x55c>
 704:	bl	0 <handle_coda_error>
 708:	ldr	r0, [pc, #1076]	; b44 <print_data+0x998>
 70c:	bl	0 <ff_printf>
 710:	ldr	r3, [fp, #-92]	; 0xffffffa4
 714:	mov	r1, r3
 718:	ldr	r0, [fp, #-28]	; 0xffffffe4
 71c:	bl	50 <print_escaped>
 720:	ldr	r3, [fp, #-92]	; 0xffffffa4
 724:	mov	r1, r3
 728:	ldr	r0, [pc, #1044]	; b44 <print_data+0x998>
 72c:	bl	0 <ff_printf>
 730:	ldr	r0, [fp, #-28]	; 0xffffffe4
 734:	bl	0 <free>
 738:	b	988 <print_data+0x7dc>
 73c:	sub	r3, fp, #100	; 0x64
 740:	mov	r1, r3
 744:	ldr	r0, [fp, #-288]	; 0xfffffee0
 748:	bl	0 <coda_cursor_get_bit_size>
 74c:	mov	r3, r0
 750:	cmp	r3, #0
 754:	beq	75c <print_data+0x5b0>
 758:	bl	0 <handle_coda_error>
 75c:	ldrd	r2, [fp, #-100]	; 0xffffff9c
 760:	lsr	r4, r2, #3
 764:	orr	r4, r4, r3, lsl #29
 768:	asr	r5, r3, #3
 76c:	ldrd	r2, [fp, #-100]	; 0xffffff9c
 770:	mov	r0, #7
 774:	mov	r1, #0
 778:	and	r2, r2, r0
 77c:	and	r3, r3, r1
 780:	orrs	r3, r2, r3
 784:	beq	794 <print_data+0x5e8>
 788:	mov	r2, #1
 78c:	mov	r3, #0
 790:	b	79c <print_data+0x5f0>
 794:	mov	r2, #0
 798:	mov	r3, #0
 79c:	adds	r2, r2, r4
 7a0:	adc	r3, r3, r5
 7a4:	strd	r2, [fp, #-36]	; 0xffffffdc
 7a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 7ac:	mov	r0, r3
 7b0:	bl	0 <malloc>
 7b4:	mov	r3, r0
 7b8:	str	r3, [fp, #-40]	; 0xffffffd8
 7bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
 7c0:	cmp	r3, #0
 7c4:	bne	7e8 <print_data+0x63c>
 7c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
 7cc:	ldr	r3, [pc, #896]	; b54 <print_data+0x9a8>
 7d0:	str	r3, [sp]
 7d4:	ldr	r3, [pc, #880]	; b4c <print_data+0x9a0>
 7d8:	ldr	r1, [pc, #880]	; b50 <print_data+0x9a4>
 7dc:	mvn	r0, #0
 7e0:	bl	0 <coda_set_error>
 7e4:	bl	0 <handle_coda_error>
 7e8:	ldrd	r2, [fp, #-100]	; 0xffffff9c
 7ec:	strd	r2, [sp]
 7f0:	mov	r2, #0
 7f4:	mov	r3, #0
 7f8:	ldr	r1, [fp, #-40]	; 0xffffffd8
 7fc:	ldr	r0, [fp, #-288]	; 0xfffffee0
 800:	bl	0 <coda_cursor_read_bits>
 804:	mov	r3, r0
 808:	cmp	r3, #0
 80c:	beq	814 <print_data+0x668>
 810:	bl	0 <handle_coda_error>
 814:	ldr	r0, [pc, #808]	; b44 <print_data+0x998>
 818:	bl	0 <ff_printf>
 81c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 820:	mov	r1, r3
 824:	ldr	r0, [fp, #-40]	; 0xffffffd8
 828:	bl	50 <print_escaped>
 82c:	ldr	r0, [pc, #784]	; b44 <print_data+0x998>
 830:	bl	0 <ff_printf>
 834:	ldr	r0, [fp, #-40]	; 0xffffffd8
 838:	bl	0 <free>
 83c:	b	988 <print_data+0x7dc>
 840:	sub	r3, fp, #104	; 0x68
 844:	mov	r1, r3
 848:	ldr	r0, [fp, #-288]	; 0xfffffee0
 84c:	bl	0 <coda_cursor_read_int32>
 850:	mov	r3, r0
 854:	cmp	r3, #0
 858:	beq	860 <print_data+0x6b4>
 85c:	bl	0 <handle_coda_error>
 860:	ldr	r3, [fp, #-104]	; 0xffffff98
 864:	mov	r1, r3
 868:	ldr	r0, [pc, #744]	; b58 <print_data+0x9ac>
 86c:	bl	0 <ff_printf>
 870:	b	988 <print_data+0x7dc>
 874:	sub	r3, fp, #108	; 0x6c
 878:	mov	r1, r3
 87c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 880:	bl	0 <coda_cursor_read_uint32>
 884:	mov	r3, r0
 888:	cmp	r3, #0
 88c:	beq	894 <print_data+0x6e8>
 890:	bl	0 <handle_coda_error>
 894:	ldr	r3, [fp, #-108]	; 0xffffff94
 898:	mov	r1, r3
 89c:	ldr	r0, [pc, #696]	; b5c <print_data+0x9b0>
 8a0:	bl	0 <ff_printf>
 8a4:	b	988 <print_data+0x7dc>
 8a8:	sub	r3, fp, #116	; 0x74
 8ac:	mov	r1, r3
 8b0:	ldr	r0, [fp, #-288]	; 0xfffffee0
 8b4:	bl	0 <coda_cursor_read_int64>
 8b8:	mov	r3, r0
 8bc:	cmp	r3, #0
 8c0:	beq	8c8 <print_data+0x71c>
 8c4:	bl	0 <handle_coda_error>
 8c8:	ldrd	r0, [fp, #-116]	; 0xffffff8c
 8cc:	sub	r3, fp, #140	; 0x8c
 8d0:	mov	r2, r3
 8d4:	bl	0 <coda_str64>
 8d8:	sub	r3, fp, #140	; 0x8c
 8dc:	mov	r1, r3
 8e0:	ldr	r0, [pc, #632]	; b60 <print_data+0x9b4>
 8e4:	bl	0 <ff_printf>
 8e8:	b	988 <print_data+0x7dc>
 8ec:	sub	r3, fp, #148	; 0x94
 8f0:	mov	r1, r3
 8f4:	ldr	r0, [fp, #-288]	; 0xfffffee0
 8f8:	bl	0 <coda_cursor_read_uint64>
 8fc:	mov	r3, r0
 900:	cmp	r3, #0
 904:	beq	90c <print_data+0x760>
 908:	bl	0 <handle_coda_error>
 90c:	ldrd	r0, [fp, #-148]	; 0xffffff6c
 910:	sub	r3, fp, #172	; 0xac
 914:	mov	r2, r3
 918:	bl	0 <coda_str64u>
 91c:	sub	r3, fp, #172	; 0xac
 920:	mov	r1, r3
 924:	ldr	r0, [pc, #564]	; b60 <print_data+0x9b4>
 928:	bl	0 <ff_printf>
 92c:	b	988 <print_data+0x7dc>
 930:	sub	r3, fp, #180	; 0xb4
 934:	mov	r1, r3
 938:	ldr	r0, [fp, #-288]	; 0xfffffee0
 93c:	bl	0 <coda_cursor_read_double>
 940:	mov	r3, r0
 944:	cmp	r3, #0
 948:	beq	950 <print_data+0x7a4>
 94c:	bl	0 <handle_coda_error>
 950:	ldr	r3, [fp, #-84]	; 0xffffffac
 954:	cmp	r3, #8
 958:	bne	96c <print_data+0x7c0>
 95c:	ldrd	r2, [fp, #-180]	; 0xffffff4c
 960:	ldr	r0, [pc, #508]	; b64 <print_data+0x9b8>
 964:	bl	0 <ff_printf>
 968:	b	988 <print_data+0x7dc>
 96c:	ldrd	r2, [fp, #-180]	; 0xffffff4c
 970:	ldr	r0, [pc, #496]	; b68 <print_data+0x9bc>
 974:	bl	0 <ff_printf>
 978:	b	988 <print_data+0x7dc>
 97c:	ldr	r0, [pc, #488]	; b6c <print_data+0x9c0>
 980:	bl	0 <ff_printf>
 984:	nop			; (mov r0, r0)
 988:	b	af4 <print_data+0x948>
 98c:	sub	r3, fp, #184	; 0xb8
 990:	mov	r1, r3
 994:	ldr	r0, [fp, #-288]	; 0xfffffee0
 998:	bl	0 <coda_cursor_get_special_type>
 99c:	mov	r3, r0
 9a0:	cmp	r3, #0
 9a4:	beq	9ac <print_data+0x800>
 9a8:	bl	0 <handle_coda_error>
 9ac:	ldr	r3, [fp, #-184]	; 0xffffff48
 9b0:	cmp	r3, #3
 9b4:	ldrls	pc, [pc, r3, lsl #2]
 9b8:	b	afc <print_data+0x950>
 9bc:	.word	0x000009cc
 9c0:	.word	0x000009d8
 9c4:	.word	0x00000a08
 9c8:	.word	0x00000aac
 9cc:	ldr	r0, [pc, #408]	; b6c <print_data+0x9c0>
 9d0:	bl	0 <ff_printf>
 9d4:	b	af0 <print_data+0x944>
 9d8:	sub	r3, fp, #196	; 0xc4
 9dc:	mov	r1, r3
 9e0:	ldr	r0, [fp, #-288]	; 0xfffffee0
 9e4:	bl	0 <coda_cursor_read_double>
 9e8:	mov	r3, r0
 9ec:	cmp	r3, #0
 9f0:	beq	9f8 <print_data+0x84c>
 9f4:	bl	0 <handle_coda_error>
 9f8:	ldrd	r2, [fp, #-196]	; 0xffffff3c
 9fc:	ldr	r0, [pc, #356]	; b68 <print_data+0x9bc>
 a00:	bl	0 <ff_printf>
 a04:	b	af0 <print_data+0x944>
 a08:	sub	r3, fp, #204	; 0xcc
 a0c:	mov	r1, r3
 a10:	ldr	r0, [fp, #-288]	; 0xfffffee0
 a14:	bl	0 <coda_cursor_read_double>
 a18:	mov	r3, r0
 a1c:	cmp	r3, #0
 a20:	beq	a28 <print_data+0x87c>
 a24:	bl	0 <handle_coda_error>
 a28:	vldr	d7, [fp, #-204]	; 0xffffff34
 a2c:	vmov.f64	d0, d7
 a30:	bl	0 <coda_isNaN>
 a34:	mov	r3, r0
 a38:	cmp	r3, #0
 a3c:	bne	a58 <print_data+0x8ac>
 a40:	vldr	d7, [fp, #-204]	; 0xffffff34
 a44:	vmov.f64	d0, d7
 a48:	bl	0 <coda_isInf>
 a4c:	mov	r3, r0
 a50:	cmp	r3, #0
 a54:	beq	a68 <print_data+0x8bc>
 a58:	ldrd	r2, [fp, #-204]	; 0xffffff34
 a5c:	ldr	r0, [pc, #260]	; b68 <print_data+0x9bc>
 a60:	bl	0 <ff_printf>
 a64:	b	af0 <print_data+0x944>
 a68:	vldr	d7, [fp, #-204]	; 0xffffff34
 a6c:	sub	r3, fp, #232	; 0xe8
 a70:	mov	r1, r3
 a74:	ldr	r0, [pc, #244]	; b70 <print_data+0x9c4>
 a78:	vmov.f64	d0, d7
 a7c:	bl	0 <coda_time_double_to_string>
 a80:	mov	r3, r0
 a84:	cmp	r3, #0
 a88:	beq	a98 <print_data+0x8ec>
 a8c:	ldr	r0, [pc, #224]	; b74 <print_data+0x9c8>
 a90:	bl	0 <ff_printf>
 a94:	b	af0 <print_data+0x944>
 a98:	sub	r3, fp, #232	; 0xe8
 a9c:	mov	r1, r3
 aa0:	ldr	r0, [pc, #208]	; b78 <print_data+0x9cc>
 aa4:	bl	0 <ff_printf>
 aa8:	b	af0 <print_data+0x944>
 aac:	sub	r2, fp, #252	; 0xfc
 ab0:	sub	r3, fp, #244	; 0xf4
 ab4:	mov	r1, r3
 ab8:	ldr	r0, [fp, #-288]	; 0xfffffee0
 abc:	bl	0 <coda_cursor_read_complex_double_split>
 ac0:	mov	r3, r0
 ac4:	cmp	r3, #0
 ac8:	beq	ad0 <print_data+0x924>
 acc:	bl	0 <handle_coda_error>
 ad0:	ldrd	r0, [fp, #-244]	; 0xffffff0c
 ad4:	ldrd	r2, [fp, #-252]	; 0xffffff04
 ad8:	strd	r2, [sp]
 adc:	mov	r2, r0
 ae0:	mov	r3, r1
 ae4:	ldr	r0, [pc, #144]	; b7c <print_data+0x9d0>
 ae8:	bl	0 <ff_printf>
 aec:	nop			; (mov r0, r0)
 af0:	b	afc <print_data+0x950>
 af4:	nop			; (mov r0, r0)
 af8:	b	b00 <print_data+0x954>
 afc:	nop			; (mov r0, r0)
 b00:	ldr	r3, [fp, #-48]	; 0xffffffd0
 b04:	cmp	r3, #0
 b08:	beq	b14 <print_data+0x968>
 b0c:	ldr	r0, [pc, #36]	; b38 <print_data+0x98c>
 b10:	bl	0 <ff_printf>
 b14:	nop			; (mov r0, r0)
 b18:	sub	sp, fp, #12
 b1c:	pop	{r4, r5, fp, pc}
 b20:	.word	0x00000000
 b24:	.word	0x00000028
 b28:	.word	0x00000034
 b2c:	.word	0x00000040
 b30:	.word	0x00000044
 b34:	.word	0x0000004c
 b38:	.word	0x00000050
 b3c:	.word	0x00000054
 b40:	.word	0x00000058
 b44:	.word	0x0000005c
 b48:	.word	0x0000012f
 b4c:	.word	0x00000060
 b50:	.word	0x000000b4
 b54:	.word	0x0000014e
 b58:	.word	0x000000ec
 b5c:	.word	0x000000f0
 b60:	.word	0x000000f4
 b64:	.word	0x000000f8
 b68:	.word	0x00000100
 b6c:	.word	0x00000108
 b70:	.word	0x00000110
 b74:	.word	0x00000130
 b78:	.word	0x0000014c
 b7c:	.word	0x00000154

00000b80 <print_json_data>:
 b80:	push	{fp, lr}
 b84:	add	fp, sp, #4
 b88:	sub	sp, sp, #536	; 0x218
 b8c:	str	r0, [fp, #-536]	; 0xfffffde8
 b90:	ldr	r2, [pc, #272]	; ca8 <print_json_data+0x128>
 b94:	ldr	r3, [fp, #-536]	; 0xfffffde8
 b98:	str	r3, [r2]
 b9c:	ldr	r3, [pc, #264]	; cac <print_json_data+0x12c>
 ba0:	ldr	r3, [r3]
 ba4:	sub	r2, fp, #12
 ba8:	mov	r1, r2
 bac:	mov	r0, r3
 bb0:	bl	0 <coda_open>
 bb4:	str	r0, [fp, #-8]
 bb8:	ldr	r3, [fp, #-8]
 bbc:	cmp	r3, #0
 bc0:	beq	c04 <print_json_data+0x84>
 bc4:	bl	0 <coda_get_errno>
 bc8:	mov	r3, r0
 bcc:	ldr	r3, [r3]
 bd0:	cmn	r3, #21
 bd4:	bne	c04 <print_json_data+0x84>
 bd8:	mov	r0, #0
 bdc:	bl	0 <coda_set_option_use_mmap>
 be0:	ldr	r3, [pc, #196]	; cac <print_json_data+0x12c>
 be4:	ldr	r3, [r3]
 be8:	sub	r2, fp, #12
 bec:	mov	r1, r2
 bf0:	mov	r0, r3
 bf4:	bl	0 <coda_open>
 bf8:	str	r0, [fp, #-8]
 bfc:	mov	r0, #1
 c00:	bl	0 <coda_set_option_use_mmap>
 c04:	ldr	r3, [fp, #-8]
 c08:	cmp	r3, #0
 c0c:	beq	c14 <print_json_data+0x94>
 c10:	bl	0 <handle_coda_error>
 c14:	ldr	r2, [fp, #-12]
 c18:	sub	r3, fp, #532	; 0x214
 c1c:	mov	r1, r2
 c20:	mov	r0, r3
 c24:	bl	0 <coda_cursor_set_product>
 c28:	mov	r3, r0
 c2c:	cmp	r3, #0
 c30:	beq	c38 <print_json_data+0xb8>
 c34:	bl	0 <handle_coda_error>
 c38:	ldr	r3, [pc, #112]	; cb0 <print_json_data+0x130>
 c3c:	ldr	r3, [r3]
 c40:	cmp	r3, #0
 c44:	beq	c74 <print_json_data+0xf4>
 c48:	ldr	r3, [pc, #96]	; cb0 <print_json_data+0x130>
 c4c:	ldr	r2, [r3]
 c50:	sub	r3, fp, #532	; 0x214
 c54:	mov	r1, r2
 c58:	mov	r0, r3
 c5c:	bl	0 <coda_cursor_goto>
 c60:	str	r0, [fp, #-8]
 c64:	ldr	r3, [fp, #-8]
 c68:	cmp	r3, #0
 c6c:	beq	c74 <print_json_data+0xf4>
 c70:	bl	0 <handle_coda_error>
 c74:	mov	r0, #0
 c78:	bl	0 <coda_set_option_perform_boundary_checks>
 c7c:	sub	r3, fp, #532	; 0x214
 c80:	mov	r0, r3
 c84:	bl	1ac <print_data>
 c88:	ldr	r0, [pc, #36]	; cb4 <print_json_data+0x134>
 c8c:	bl	0 <ff_printf>
 c90:	ldr	r3, [fp, #-12]
 c94:	mov	r0, r3
 c98:	bl	0 <coda_close>
 c9c:	nop			; (mov r0, r0)
 ca0:	sub	sp, fp, #4
 ca4:	pop	{fp, pc}
	...
 cb4:	.word	0x00000160
