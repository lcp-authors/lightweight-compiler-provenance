
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uq.dir/__/__/src/runtime/emitter.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_emitter_recycle_page>:
   0:	ldr	r3, [r0]
   4:	mov	r2, r0
   8:	mvn	r0, #0
   c:	cmp	r3, r1
  10:	beq	50 <flatcc_emitter_recycle_page+0x50>
  14:	ldr	r2, [r2, #4]
  18:	cmp	r2, r1
  1c:	bxeq	lr
  20:	ldr	r0, [r1, #2944]	; 0xb80
  24:	ldr	r2, [r1, #2948]	; 0xb84
  28:	str	r2, [r0, #2948]	; 0xb84
  2c:	ldr	r2, [r1, #2948]	; 0xb84
  30:	str	r0, [r2, #2944]	; 0xb80
  34:	ldr	r0, [r3, #2948]	; 0xb84
  38:	str	r3, [r1, #2944]	; 0xb80
  3c:	str	r0, [r1, #2948]	; 0xb84
  40:	str	r1, [r0, #2944]	; 0xb80
  44:	ldr	r0, [r1, #2944]	; 0xb80
  48:	str	r1, [r0, #2948]	; 0xb84
  4c:	mov	r0, #0
  50:	bx	lr

00000054 <flatcc_emitter_reset>:
  54:	push	{r4, sl, fp, lr}
  58:	add	fp, sp, #8
  5c:	ldr	r1, [r0]
  60:	cmp	r1, #0
  64:	beq	11c <flatcc_emitter_reset+0xc8>
  68:	mov	r4, r0
  6c:	add	r2, r1, #1472	; 0x5c0
  70:	mov	r0, #1472	; 0x5c0
  74:	mov	r3, #0
  78:	stmib	r4, {r1, r2}
  7c:	str	r0, [r4, #12]
  80:	str	r2, [r4, #16]
  84:	str	r0, [r4, #20]
  88:	movw	r0, #64064	; 0xfa40
  8c:	movt	r0, #65535	; 0xffff
  90:	str	r0, [r1, #2952]	; 0xb88
  94:	ldr	r2, [r4, #32]
  98:	ldr	r0, [r4, #24]
  9c:	cmp	r2, #0
  a0:	moveq	r2, r0
  a4:	streq	r0, [r4, #32]
  a8:	str	r3, [r4, #24]
  ac:	add	r2, r2, r2, lsl #1
  b0:	lsr	r2, r2, #2
  b4:	add	r0, r2, r0, lsr #2
  b8:	str	r0, [r4, #32]
  bc:	ldr	r2, [r4, #28]
  c0:	cmp	r2, r0, lsl #1
  c4:	bls	11c <flatcc_emitter_reset+0xc8>
  c8:	mov	r2, r1
  cc:	ldr	r0, [r2, #2944]!	; 0xb80
  d0:	cmp	r0, r1
  d4:	popeq	{r4, sl, fp, pc}
  d8:	ldr	r3, [r0, #2944]	; 0xb80
  dc:	str	r3, [r2]
  e0:	ldr	r2, [r0, #2944]	; 0xb80
  e4:	str	r1, [r2, #2948]	; 0xb84
  e8:	bl	0 <free>
  ec:	ldr	r0, [r4, #28]
  f0:	ldr	r1, [r4, #32]
  f4:	sub	r0, r0, #2944	; 0xb80
  f8:	cmp	r0, r1, lsl #1
  fc:	str	r0, [r4, #28]
 100:	bls	11c <flatcc_emitter_reset+0xc8>
 104:	ldr	r1, [r4, #4]
 108:	ldr	r3, [r4]
 10c:	mov	r2, r1
 110:	ldr	r0, [r2, #2944]!	; 0xb80
 114:	cmp	r0, r3
 118:	bne	d8 <flatcc_emitter_reset+0x84>
 11c:	pop	{r4, sl, fp, pc}

00000120 <flatcc_emitter_clear>:
 120:	push	{r4, r5, r6, sl, fp, lr}
 124:	add	fp, sp, #16
 128:	ldr	r5, [r0]
 12c:	cmp	r5, #0
 130:	beq	180 <flatcc_emitter_clear+0x60>
 134:	mov	r4, r0
 138:	ldr	r0, [r5, #2948]	; 0xb84
 13c:	mov	r6, #0
 140:	str	r6, [r0, #2944]	; 0xb80
 144:	ldr	r0, [r5, #2944]	; 0xb80
 148:	cmp	r0, #0
 14c:	beq	160 <flatcc_emitter_clear+0x40>
 150:	mov	r5, r0
 154:	ldr	r0, [r0, #2948]	; 0xb84
 158:	bl	0 <free>
 15c:	b	144 <flatcc_emitter_clear+0x24>
 160:	mov	r0, r5
 164:	bl	0 <free>
 168:	vmov.i32	q8, #0	; 0x00000000
 16c:	add	r0, r4, #16
 170:	vst1.32	{d16-d17}, [r0]
 174:	mov	r0, #32
 178:	vst1.32	{d16-d17}, [r4], r0
 17c:	str	r6, [r4]
 180:	pop	{r4, r5, r6, sl, fp, pc}

00000184 <flatcc_emitter>:
 184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 188:	add	fp, sp, #28
 18c:	sub	sp, sp, #4
 190:	mov	r6, r0
 194:	mov	r7, r1
 198:	ldr	r0, [r0, #24]
 19c:	ldr	r1, [fp, #8]
 1a0:	mov	r4, r2
 1a4:	cmn	r3, #1
 1a8:	mov	r9, r6
 1ac:	add	r0, r0, r1
 1b0:	str	r0, [r6, #24]
 1b4:	ble	308 <flatcc_emitter+0x184>
 1b8:	ldr	r0, [r9, #20]!
 1bc:	cmp	r0, r1
 1c0:	bcs	468 <flatcc_emitter+0x2e4>
 1c4:	mov	r8, #0
 1c8:	cmp	r4, #0
 1cc:	beq	4c0 <flatcc_emitter+0x33c>
 1d0:	movw	sl, #64064	; 0xfa40
 1d4:	movt	sl, #65535	; 0xffff
 1d8:	ldr	r8, [r7, #4]
 1dc:	cmp	r8, #0
 1e0:	beq	2f4 <flatcc_emitter+0x170>
 1e4:	ldr	r9, [r7]
 1e8:	b	224 <flatcc_emitter+0xa0>
 1ec:	mov	r5, r8
 1f0:	ldr	r0, [r6, #16]
 1f4:	mov	r1, r9
 1f8:	mov	r2, r5
 1fc:	bl	0 <memcpy>
 200:	ldr	r0, [r6, #16]
 204:	ldr	r1, [r6, #20]
 208:	add	r9, r9, r5
 20c:	subs	r8, r8, r5
 210:	add	r2, r0, r5
 214:	sub	r0, r1, r5
 218:	str	r2, [r6, #16]
 21c:	str	r0, [r6, #20]
 220:	beq	2f4 <flatcc_emitter+0x170>
 224:	cmp	r8, r0
 228:	mov	r5, r8
 22c:	bls	1f0 <flatcc_emitter+0x6c>
 230:	mov	r5, r0
 234:	cmp	r5, #0
 238:	beq	284 <flatcc_emitter+0x100>
 23c:	b	1f0 <flatcc_emitter+0x6c>
 240:	ldr	r1, [r6]
 244:	str	r1, [r0, #2944]	; 0xb80
 248:	str	r5, [r0, #2948]	; 0xb84
 24c:	str	r0, [r1, #2948]	; 0xb84
 250:	str	r0, [r5, #2944]	; 0xb80
 254:	mov	r5, #2944	; 0xb80
 258:	str	r0, [r6, #4]
 25c:	str	r0, [r6, #16]
 260:	str	r5, [r6, #20]
 264:	ldr	r1, [r0, #2948]	; 0xb84
 268:	ldr	r1, [r1, #2952]	; 0xb88
 26c:	add	r1, r1, #2944	; 0xb80
 270:	str	r1, [r0, #2952]	; 0xb88
 274:	cmp	r8, r5
 278:	bls	1ec <flatcc_emitter+0x68>
 27c:	cmp	r5, #0
 280:	bne	1f0 <flatcc_emitter+0x6c>
 284:	ldr	r5, [r6, #4]
 288:	cmp	r5, #0
 28c:	beq	2a0 <flatcc_emitter+0x11c>
 290:	ldr	r0, [r5, #2944]	; 0xb80
 294:	ldr	r1, [r6]
 298:	cmp	r0, r1
 29c:	bne	254 <flatcc_emitter+0xd0>
 2a0:	movw	r0, #2956	; 0xb8c
 2a4:	bl	0 <malloc>
 2a8:	cmp	r0, #0
 2ac:	beq	478 <flatcc_emitter+0x2f4>
 2b0:	ldr	r1, [r6, #28]
 2b4:	cmp	r5, #0
 2b8:	add	r1, r1, #2944	; 0xb80
 2bc:	str	r1, [r6, #28]
 2c0:	bne	240 <flatcc_emitter+0xbc>
 2c4:	add	r1, r0, #1472	; 0x5c0
 2c8:	mov	r5, #1472	; 0x5c0
 2cc:	str	r0, [r6]
 2d0:	stmib	r6, {r0, r1, r5}
 2d4:	str	r1, [r6, #16]
 2d8:	str	r5, [r6, #20]
 2dc:	str	r0, [r0, #2944]	; 0xb80
 2e0:	str	r0, [r0, #2948]	; 0xb84
 2e4:	str	sl, [r0, #2952]	; 0xb88
 2e8:	cmp	r8, r5
 2ec:	bhi	27c <flatcc_emitter+0xf8>
 2f0:	b	1ec <flatcc_emitter+0x68>
 2f4:	subs	r4, r4, #1
 2f8:	add	r7, r7, #8
 2fc:	bne	1d8 <flatcc_emitter+0x54>
 300:	mov	r8, #0
 304:	b	4c0 <flatcc_emitter+0x33c>
 308:	ldr	r0, [r9, #12]!
 30c:	cmp	r0, r1
 310:	bcs	480 <flatcc_emitter+0x2fc>
 314:	mov	r8, #0
 318:	cmp	r4, #0
 31c:	beq	4c0 <flatcc_emitter+0x33c>
 320:	add	r0, r7, r4, lsl #3
 324:	ldr	sl, [r0, #-4]
 328:	sub	r1, r0, #8
 32c:	str	r1, [sp]
 330:	cmp	sl, #0
 334:	beq	458 <flatcc_emitter+0x2d4>
 338:	ldr	r0, [sp]
 33c:	ldr	r0, [r0]
 340:	add	r7, r0, sl
 344:	ldr	r1, [r9]
 348:	cmp	sl, r1
 34c:	bhi	38c <flatcc_emitter+0x208>
 350:	b	428 <flatcc_emitter+0x2a4>
 354:	ldr	r1, [r5, #2952]	; 0xb88
 358:	sub	r1, r1, #2944	; 0xb80
 35c:	str	r1, [r0, #2952]	; 0xb88
 360:	mov	r1, #2944	; 0xb80
 364:	add	r2, r0, #2944	; 0xb80
 368:	str	r0, [r6]
 36c:	str	r2, [r6, #8]
 370:	str	r1, [r6, #12]
 374:	ldr	r2, [r0, #2944]	; 0xb80
 378:	ldr	r2, [r2, #2952]	; 0xb88
 37c:	sub	r2, r2, #2944	; 0xb80
 380:	str	r2, [r0, #2952]	; 0xb88
 384:	cmp	sl, r1
 388:	bls	428 <flatcc_emitter+0x2a4>
 38c:	cmp	r1, #0
 390:	mov	r5, r1
 394:	bne	42c <flatcc_emitter+0x2a8>
 398:	ldr	r5, [r6]
 39c:	cmp	r5, #0
 3a0:	beq	3b4 <flatcc_emitter+0x230>
 3a4:	ldr	r0, [r5, #2948]	; 0xb84
 3a8:	ldr	r1, [r6, #4]
 3ac:	cmp	r0, r1
 3b0:	bne	354 <flatcc_emitter+0x1d0>
 3b4:	movw	r0, #2956	; 0xb8c
 3b8:	bl	0 <malloc>
 3bc:	cmp	r0, #0
 3c0:	beq	478 <flatcc_emitter+0x2f4>
 3c4:	ldr	r1, [r6, #28]
 3c8:	cmp	r5, #0
 3cc:	add	r1, r1, #2944	; 0xb80
 3d0:	str	r1, [r6, #28]
 3d4:	beq	3f0 <flatcc_emitter+0x26c>
 3d8:	ldr	r1, [r6, #4]
 3dc:	str	r5, [r0, #2944]	; 0xb80
 3e0:	str	r1, [r0, #2948]	; 0xb84
 3e4:	str	r0, [r5, #2948]	; 0xb84
 3e8:	str	r0, [r1, #2944]	; 0xb80
 3ec:	b	360 <flatcc_emitter+0x1dc>
 3f0:	add	r2, r0, #1472	; 0x5c0
 3f4:	mov	r1, #1472	; 0x5c0
 3f8:	str	r0, [r6]
 3fc:	stmib	r6, {r0, r2}
 400:	str	r1, [r6, #12]
 404:	str	r2, [r6, #16]
 408:	movw	r2, #64064	; 0xfa40
 40c:	str	r1, [r6, #20]
 410:	str	r0, [r0, #2944]	; 0xb80
 414:	str	r0, [r0, #2948]	; 0xb84
 418:	movt	r2, #65535	; 0xffff
 41c:	str	r2, [r0, #2952]	; 0xb88
 420:	cmp	sl, r1
 424:	bhi	38c <flatcc_emitter+0x208>
 428:	mov	r5, sl
 42c:	sub	r0, r1, r5
 430:	sub	r7, r7, r5
 434:	mov	r2, r5
 438:	str	r0, [r6, #12]
 43c:	mov	r1, r7
 440:	ldr	r0, [r6, #8]
 444:	sub	r0, r0, r5
 448:	str	r0, [r6, #8]
 44c:	bl	0 <memcpy>
 450:	subs	sl, sl, r5
 454:	bne	344 <flatcc_emitter+0x1c0>
 458:	ldr	r0, [sp]
 45c:	subs	r4, r4, #1
 460:	bne	324 <flatcc_emitter+0x1a0>
 464:	b	4c0 <flatcc_emitter+0x33c>
 468:	ldr	r5, [r6, #16]
 46c:	add	r2, r5, r1
 470:	str	r2, [r6, #16]
 474:	b	48c <flatcc_emitter+0x308>
 478:	mvn	r8, #0
 47c:	b	4c0 <flatcc_emitter+0x33c>
 480:	ldr	r2, [r6, #8]
 484:	sub	r5, r2, r1
 488:	str	r5, [r6, #8]
 48c:	sub	r0, r0, r1
 490:	mov	r8, #0
 494:	cmp	r4, #0
 498:	str	r0, [r9]
 49c:	beq	4c0 <flatcc_emitter+0x33c>
 4a0:	ldm	r7, {r1, r2}
 4a4:	mov	r0, r5
 4a8:	bl	0 <memcpy>
 4ac:	ldr	r0, [r7, #4]
 4b0:	add	r7, r7, #8
 4b4:	subs	r4, r4, #1
 4b8:	add	r5, r5, r0
 4bc:	bne	4a0 <flatcc_emitter+0x31c>
 4c0:	mov	r0, r8
 4c4:	sub	sp, fp, #28
 4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000004cc <flatcc_emitter_copy_buffer>:
 4cc:	push	{r4, r5, r6, sl, fp, lr}
 4d0:	add	fp, sp, #16
 4d4:	mov	r3, r2
 4d8:	ldr	r2, [r0, #24]
 4dc:	mov	r5, #0
 4e0:	cmp	r2, r3
 4e4:	bhi	56c <flatcc_emitter_copy_buffer+0xa0>
 4e8:	mov	r4, r0
 4ec:	ldr	r0, [r0]
 4f0:	cmp	r0, #0
 4f4:	beq	56c <flatcc_emitter_copy_buffer+0xa0>
 4f8:	mov	r6, r1
 4fc:	ldr	r1, [r4, #4]
 500:	cmp	r0, r1
 504:	beq	574 <flatcc_emitter_copy_buffer+0xa8>
 508:	ldr	r0, [r4, #12]
 50c:	ldr	r1, [r4, #8]
 510:	rsb	r5, r0, #2944	; 0xb80
 514:	mov	r0, r6
 518:	mov	r2, r5
 51c:	bl	0 <memcpy>
 520:	ldm	r4, {r0, r1}
 524:	add	r5, r6, r5
 528:	ldr	r6, [r0, #2944]	; 0xb80
 52c:	cmp	r6, r1
 530:	beq	558 <flatcc_emitter_copy_buffer+0x8c>
 534:	mov	r0, r5
 538:	mov	r1, r6
 53c:	mov	r2, #2944	; 0xb80
 540:	bl	0 <memcpy>
 544:	ldr	r6, [r6, #2944]	; 0xb80
 548:	ldr	r0, [r4, #4]
 54c:	add	r5, r5, #2944	; 0xb80
 550:	cmp	r6, r0
 554:	bne	534 <flatcc_emitter_copy_buffer+0x68>
 558:	ldr	r0, [r4, #20]
 55c:	mov	r1, r6
 560:	rsb	r2, r0, #2944	; 0xb80
 564:	mov	r0, r5
 568:	bl	0 <memcpy>
 56c:	mov	r0, r5
 570:	pop	{r4, r5, r6, sl, fp, pc}
 574:	ldr	r1, [r4, #8]
 578:	mov	r0, r6
 57c:	bl	0 <memcpy>
 580:	mov	r0, r6
 584:	pop	{r4, r5, r6, sl, fp, pc}
