
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/fileio.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_copy_path_n>:
   0:	strd	r4, [sp, #-16]!
   4:	mov	r4, r1
   8:	mov	r1, #0
   c:	mov	r2, r4
  10:	str	r6, [sp, #8]
  14:	mov	r6, r0
  18:	str	lr, [sp, #12]
  1c:	bl	0 <memchr>
  20:	cmp	r0, #0
  24:	subne	r4, r0, r6
  28:	add	r0, r4, #1
  2c:	bl	0 <malloc>
  30:	subs	r5, r0, #0
  34:	beq	4c <__flatcc_fb_copy_path_n+0x4c>
  38:	mov	r1, r6
  3c:	mov	r2, r4
  40:	bl	0 <memcpy>
  44:	mov	r3, #0
  48:	strb	r3, [r5, r4]
  4c:	mov	r0, r5
  50:	ldrd	r4, [sp]
  54:	ldr	r6, [sp, #8]
  58:	add	sp, sp, #12
  5c:	pop	{pc}		; (ldr pc, [sp], #4)

00000060 <__flatcc_fb_copy_path>:
  60:	strd	r4, [sp, #-16]!
  64:	str	r6, [sp, #8]
  68:	mov	r6, r0
  6c:	str	lr, [sp, #12]
  70:	bl	0 <strlen>
  74:	mov	r4, r0
  78:	add	r0, r0, #1
  7c:	bl	0 <malloc>
  80:	subs	r5, r0, #0
  84:	beq	9c <__flatcc_fb_copy_path+0x3c>
  88:	mov	r1, r6
  8c:	mov	r2, r4
  90:	bl	0 <memcpy>
  94:	mov	r3, #0
  98:	strb	r3, [r5, r4]
  9c:	mov	r0, r5
  a0:	ldrd	r4, [sp]
  a4:	ldr	r6, [sp, #8]
  a8:	add	sp, sp, #12
  ac:	pop	{pc}		; (ldr pc, [sp], #4)

000000b0 <__flatcc_fb_chomp>:
  b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
  b4:	subs	r5, r2, #0
  b8:	mov	r4, r1
  bc:	strd	r6, [sp, #8]
  c0:	str	r8, [sp, #16]
  c4:	str	lr, [sp, #20]
  c8:	beq	fc <__flatcc_fb_chomp+0x4c>
  cc:	mov	r6, r0
  d0:	mov	r0, r5
  d4:	bl	0 <strlen>
  d8:	cmp	r0, r4
  dc:	mov	r2, r0
  e0:	bcs	fc <__flatcc_fb_chomp+0x4c>
  e4:	sub	r7, r4, r0
  e8:	mov	r1, r5
  ec:	add	r0, r6, r7
  f0:	bl	0 <strncmp>
  f4:	cmp	r0, #0
  f8:	moveq	r4, r7
  fc:	mov	r0, r4
 100:	ldrd	r4, [sp]
 104:	ldrd	r6, [sp, #8]
 108:	ldr	r8, [sp, #16]
 10c:	add	sp, sp, #20
 110:	pop	{pc}		; (ldr pc, [sp], #4)

00000114 <__flatcc_fb_create_join_path_n>:
 114:	strd	r4, [sp, #-32]!	; 0xffffffe0
 118:	mov	r4, r1
 11c:	strd	r6, [sp, #8]
 120:	mov	r7, r3
 124:	strd	r8, [sp, #16]
 128:	mov	r9, r0
 12c:	ldr	r8, [sp, #32]
 130:	str	sl, [sp, #24]
 134:	mov	sl, r2
 138:	str	lr, [sp, #28]
 13c:	cmp	r8, #0
 140:	moveq	r6, r8
 144:	beq	154 <__flatcc_fb_create_join_path_n+0x40>
 148:	mov	r0, r8
 14c:	bl	0 <strlen>
 150:	mov	r6, r0
 154:	cmp	r9, #0
 158:	beq	1e0 <__flatcc_fb_create_join_path_n+0xcc>
 15c:	cmp	r7, #0
 160:	bne	1c8 <__flatcc_fb_create_join_path_n+0xb4>
 164:	ldr	r3, [sp, #36]	; 0x24
 168:	cmp	r3, #0
 16c:	beq	1e4 <__flatcc_fb_create_join_path_n+0xd0>
 170:	cmp	r4, #0
 174:	beq	1e4 <__flatcc_fb_create_join_path_n+0xd0>
 178:	add	r3, r9, r4
 17c:	ldrb	r3, [r3, #-1]
 180:	cmp	r3, #92	; 0x5c
 184:	cmpne	r3, #47	; 0x2f
 188:	beq	1e4 <__flatcc_fb_create_join_path_n+0xd0>
 18c:	ldr	r3, [sp, #36]	; 0x24
 190:	add	r0, r3, r4
 194:	add	r0, r0, #1
 198:	add	r0, r0, r7
 19c:	add	r0, r0, r6
 1a0:	bl	0 <malloc>
 1a4:	subs	r5, r0, #0
 1a8:	beq	1fc <__flatcc_fb_create_join_path_n+0xe8>
 1ac:	mov	r2, r4
 1b0:	mov	r1, r9
 1b4:	bl	0 <memcpy>
 1b8:	mov	r3, #47	; 0x2f
 1bc:	strb	r3, [r5, r4]
 1c0:	add	r4, r4, #1
 1c4:	b	244 <__flatcc_fb_create_join_path_n+0x130>
 1c8:	ldrb	r3, [sl]
 1cc:	cmp	r3, #92	; 0x5c
 1d0:	cmpne	r3, #47	; 0x2f
 1d4:	moveq	r3, #1
 1d8:	movne	r3, #0
 1dc:	bne	21c <__flatcc_fb_create_join_path_n+0x108>
 1e0:	mov	r4, #0
 1e4:	add	r0, r7, #1
 1e8:	add	r0, r0, r6
 1ec:	add	r0, r0, r4
 1f0:	bl	0 <malloc>
 1f4:	subs	r5, r0, #0
 1f8:	bne	238 <__flatcc_fb_create_join_path_n+0x124>
 1fc:	mov	r5, #0
 200:	mov	r0, r5
 204:	ldrd	r4, [sp]
 208:	ldrd	r6, [sp, #8]
 20c:	ldrd	r8, [sp, #16]
 210:	ldr	sl, [sp, #24]
 214:	add	sp, sp, #28
 218:	pop	{pc}		; (ldr pc, [sp], #4)
 21c:	cmp	r7, #1
 220:	bls	164 <__flatcc_fb_create_join_path_n+0x50>
 224:	ldrb	r2, [sl, #1]
 228:	cmp	r2, #58	; 0x3a
 22c:	bne	164 <__flatcc_fb_create_join_path_n+0x50>
 230:	mov	r4, r3
 234:	b	1e4 <__flatcc_fb_create_join_path_n+0xd0>
 238:	mov	r1, r9
 23c:	mov	r2, r4
 240:	bl	0 <memcpy>
 244:	mov	r2, r7
 248:	mov	r1, sl
 24c:	add	r7, r4, r7
 250:	add	r0, r5, r4
 254:	bl	0 <memcpy>
 258:	mov	r2, r6
 25c:	mov	r1, r8
 260:	add	r0, r5, r7
 264:	add	r6, r5, r6
 268:	bl	0 <memcpy>
 26c:	mov	r3, #0
 270:	strb	r3, [r6, r7]
 274:	b	200 <__flatcc_fb_create_join_path_n+0xec>

00000278 <__flatcc_fb_create_join_path>:
 278:	strd	r4, [sp, #-24]!	; 0xffffffe8
 27c:	subs	r5, r0, #0
 280:	mov	r4, r1
 284:	strd	r6, [sp, #8]
 288:	mov	r6, r3
 28c:	moveq	r7, r5
 290:	str	r8, [sp, #16]
 294:	mov	r8, r2
 298:	str	lr, [sp, #20]
 29c:	sub	sp, sp, #8
 2a0:	beq	2ac <__flatcc_fb_create_join_path+0x34>
 2a4:	bl	0 <strlen>
 2a8:	mov	r7, r0
 2ac:	cmp	r4, #0
 2b0:	moveq	r3, r4
 2b4:	beq	2c4 <__flatcc_fb_create_join_path+0x4c>
 2b8:	mov	r0, r4
 2bc:	bl	0 <strlen>
 2c0:	mov	r3, r0
 2c4:	mov	r2, r4
 2c8:	mov	r1, r7
 2cc:	str	r8, [sp]
 2d0:	mov	r0, r5
 2d4:	str	r6, [sp, #4]
 2d8:	bl	114 <__flatcc_fb_create_join_path_n>
 2dc:	add	sp, sp, #8
 2e0:	ldrd	r4, [sp]
 2e4:	ldrd	r6, [sp, #8]
 2e8:	ldr	r8, [sp, #16]
 2ec:	add	sp, sp, #20
 2f0:	pop	{pc}		; (ldr pc, [sp], #4)

000002f4 <__flatcc_fb_create_path_ext_n>:
 2f4:	mov	ip, #0
 2f8:	push	{lr}		; (str lr, [sp, #-4]!)
 2fc:	sub	sp, sp, #12
 300:	mov	r3, r1
 304:	mov	r1, ip
 308:	stm	sp, {r2, ip}
 30c:	mov	r2, r0
 310:	mov	r0, ip
 314:	bl	114 <__flatcc_fb_create_join_path_n>
 318:	add	sp, sp, #12
 31c:	pop	{pc}		; (ldr pc, [sp], #4)

00000320 <__flatcc_fb_create_path_ext>:
 320:	mov	r3, #0
 324:	mov	r2, r1
 328:	mov	r1, r0
 32c:	mov	r0, r3
 330:	b	278 <__flatcc_fb_create_join_path>

00000334 <__flatcc_fb_create_make_path_n>:
 334:	cmp	r1, #1
 338:	strd	r4, [sp, #-24]!	; 0xffffffe8
 33c:	strd	r6, [sp, #8]
 340:	str	r8, [sp, #16]
 344:	str	lr, [sp, #20]
 348:	beq	4a4 <__flatcc_fb_create_make_path_n+0x170>
 34c:	bls	4b4 <__flatcc_fb_create_make_path_n+0x180>
 350:	ldrb	r4, [r0]
 354:	sub	r6, r0, #1
 358:	mov	r5, r0
 35c:	mov	r2, r0
 360:	add	r6, r6, r1
 364:	mov	r3, r4
 368:	cmp	r3, #92	; 0x5c
 36c:	ldrb	r0, [r2, #1]!
 370:	bne	37c <__flatcc_fb_create_make_path_n+0x48>
 374:	cmp	r0, #32
 378:	addeq	r1, r1, #1
 37c:	cmp	r3, #32
 380:	addeq	r1, r1, #1
 384:	cmp	r6, r2
 388:	mov	r3, r0
 38c:	bne	368 <__flatcc_fb_create_make_path_n+0x34>
 390:	add	r1, r1, #1
 394:	cmp	r0, #32
 398:	movne	r0, r1
 39c:	addeq	r0, r1, #1
 3a0:	bl	0 <malloc>
 3a4:	cmp	r0, #0
 3a8:	beq	450 <__flatcc_fb_create_make_path_n+0x11c>
 3ac:	mov	r3, #0
 3b0:	mov	r8, #92	; 0x5c
 3b4:	b	3ec <__flatcc_fb_create_make_path_n+0xb8>
 3b8:	cmp	r4, #32
 3bc:	add	r3, r3, #2
 3c0:	bne	3d8 <__flatcc_fb_create_make_path_n+0xa4>
 3c4:	mov	r7, r2
 3c8:	mov	r2, r3
 3cc:	strb	r8, [r1]
 3d0:	mov	r1, lr
 3d4:	add	lr, r0, r3
 3d8:	cmp	r6, r5
 3dc:	mov	r3, r2
 3e0:	strb	r4, [r1]
 3e4:	mov	r4, ip
 3e8:	beq	464 <__flatcc_fb_create_make_path_n+0x130>
 3ec:	add	r2, r3, #1
 3f0:	cmp	r4, #92	; 0x5c
 3f4:	ldrb	ip, [r5, #1]!
 3f8:	add	lr, r0, r2
 3fc:	add	r1, r0, r3
 400:	mov	r7, r3
 404:	bne	3b8 <__flatcc_fb_create_make_path_n+0x84>
 408:	cmp	ip, #32
 40c:	bne	3d8 <__flatcc_fb_create_make_path_n+0xa4>
 410:	add	r3, r3, #2
 414:	mov	r7, r2
 418:	strb	r4, [r1]
 41c:	mov	r2, r3
 420:	mov	r1, lr
 424:	add	lr, r0, r3
 428:	b	3d8 <__flatcc_fb_create_make_path_n+0xa4>
 42c:	mov	r0, #3
 430:	bl	0 <malloc>
 434:	cmp	r0, #0
 438:	beq	450 <__flatcc_fb_create_make_path_n+0x11c>
 43c:	mov	r2, #92	; 0x5c
 440:	mov	r3, #0
 444:	strb	r2, [r0]
 448:	strb	r4, [r0, #1]
 44c:	strb	r3, [r0, #2]
 450:	ldrd	r4, [sp]
 454:	ldrd	r6, [sp, #8]
 458:	ldr	r8, [sp, #16]
 45c:	add	sp, sp, #20
 460:	pop	{pc}		; (ldr pc, [sp], #4)
 464:	cmp	ip, #32
 468:	addne	r2, r0, r2
 46c:	beq	480 <__flatcc_fb_create_make_path_n+0x14c>
 470:	mov	r3, #0
 474:	strb	ip, [lr]
 478:	strb	r3, [r2, #1]
 47c:	b	450 <__flatcc_fb_create_make_path_n+0x11c>
 480:	mov	r3, #92	; 0x5c
 484:	add	r2, r7, #2
 488:	strb	r3, [lr]
 48c:	add	lr, r0, r2
 490:	mov	r3, #0
 494:	mov	r2, lr
 498:	strb	ip, [lr]
 49c:	strb	r3, [r2, #1]
 4a0:	b	450 <__flatcc_fb_create_make_path_n+0x11c>
 4a4:	ldrb	r4, [r0]
 4a8:	cmp	r4, #92	; 0x5c
 4ac:	cmpne	r4, #32
 4b0:	beq	42c <__flatcc_fb_create_make_path_n+0xf8>
 4b4:	ldrd	r4, [sp]
 4b8:	ldrd	r6, [sp, #8]
 4bc:	ldr	r8, [sp, #16]
 4c0:	ldr	lr, [sp, #20]
 4c4:	add	sp, sp, #24
 4c8:	b	0 <__flatcc_fb_copy_path_n>

000004cc <__flatcc_fb_create_make_path>:
 4cc:	str	r4, [sp, #-8]!
 4d0:	mov	r4, r0
 4d4:	str	lr, [sp, #4]
 4d8:	bl	0 <strlen>
 4dc:	mov	r1, r0
 4e0:	mov	r0, r4
 4e4:	ldr	r4, [sp]
 4e8:	ldr	lr, [sp, #4]
 4ec:	add	sp, sp, #8
 4f0:	b	334 <__flatcc_fb_create_make_path_n>

000004f4 <__flatcc_fb_find_basename>:
 4f4:	add	r1, r0, r1
 4f8:	cmp	r0, r1
 4fc:	beq	538 <__flatcc_fb_find_basename+0x44>
 500:	ldrb	r2, [r1, #-1]
 504:	sub	r3, r1, #1
 508:	cmp	r2, #47	; 0x2f
 50c:	cmpne	r2, #92	; 0x5c
 510:	bne	52c <__flatcc_fb_find_basename+0x38>
 514:	b	544 <__flatcc_fb_find_basename+0x50>
 518:	ldrb	r2, [r3, #-1]
 51c:	cmp	r2, #92	; 0x5c
 520:	cmpne	r2, #47	; 0x2f
 524:	beq	53c <__flatcc_fb_find_basename+0x48>
 528:	mov	r3, r1
 52c:	cmp	r0, r3
 530:	sub	r1, r3, #1
 534:	bne	518 <__flatcc_fb_find_basename+0x24>
 538:	mov	r3, r0
 53c:	sub	r0, r3, r0
 540:	bx	lr
 544:	mov	r3, r1
 548:	b	53c <__flatcc_fb_find_basename+0x48>

0000054c <__flatcc_fb_create_basename>:
 54c:	add	r3, r0, r1
 550:	strd	r4, [sp, #-16]!
 554:	cmp	r0, r3
 558:	str	r6, [sp, #8]
 55c:	str	lr, [sp, #12]
 560:	beq	59c <__flatcc_fb_create_basename+0x50>
 564:	ldrb	ip, [r3, #-1]
 568:	sub	r4, r3, #1
 56c:	cmp	ip, #47	; 0x2f
 570:	cmpne	ip, #92	; 0x5c
 574:	bne	590 <__flatcc_fb_create_basename+0x44>
 578:	b	5ec <__flatcc_fb_create_basename+0xa0>
 57c:	ldrb	r3, [r4, #-1]
 580:	cmp	r3, #92	; 0x5c
 584:	cmpne	r3, #47	; 0x2f
 588:	beq	5a0 <__flatcc_fb_create_basename+0x54>
 58c:	mov	r4, ip
 590:	cmp	r0, r4
 594:	sub	ip, r4, #1
 598:	bne	57c <__flatcc_fb_create_basename+0x30>
 59c:	mov	r4, r0
 5a0:	sub	r0, r4, r0
 5a4:	sub	r1, r1, r0
 5a8:	mov	r0, r4
 5ac:	bl	b0 <__flatcc_fb_chomp>
 5b0:	mov	r5, r0
 5b4:	add	r0, r0, #1
 5b8:	bl	0 <malloc>
 5bc:	subs	r6, r0, #0
 5c0:	beq	5d8 <__flatcc_fb_create_basename+0x8c>
 5c4:	mov	r1, r4
 5c8:	mov	r2, r5
 5cc:	bl	0 <memcpy>
 5d0:	mov	r3, #0
 5d4:	strb	r3, [r6, r5]
 5d8:	mov	r0, r6
 5dc:	ldrd	r4, [sp]
 5e0:	ldr	r6, [sp, #8]
 5e4:	add	sp, sp, #12
 5e8:	pop	{pc}		; (ldr pc, [sp], #4)
 5ec:	mov	r4, r3
 5f0:	b	5a0 <__flatcc_fb_create_basename+0x54>

000005f4 <__flatcc_fb_read_file>:
 5f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
 5f8:	strd	r6, [sp, #8]
 5fc:	mov	r7, r1
 600:	movw	r1, #0
 604:	movt	r1, #0
 608:	str	r8, [sp, #16]
 60c:	subs	r8, r2, #0
 610:	str	lr, [sp, #20]
 614:	sub	sp, sp, #8
 618:	addeq	r8, sp, #4
 61c:	bl	0 <fopen>
 620:	subs	r6, r0, #0
 624:	beq	6f4 <__flatcc_fb_read_file+0x100>
 628:	mov	r2, #2
 62c:	mov	r1, #0
 630:	bl	0 <fseek>
 634:	mov	r0, r6
 638:	bl	0 <ftell>
 63c:	cmp	r0, r7
 640:	mov	r5, r0
 644:	movls	r4, #0
 648:	movhi	r4, #1
 64c:	cmp	r7, #0
 650:	mov	r0, r6
 654:	str	r5, [r8]
 658:	moveq	r4, #0
 65c:	cmp	r4, #0
 660:	bne	6ec <__flatcc_fb_read_file+0xf8>
 664:	bl	0 <rewind>
 668:	cmp	r5, #0
 66c:	movne	r0, r5
 670:	moveq	r0, #1
 674:	bl	0 <malloc>
 678:	subs	r7, r0, #0
 67c:	bne	688 <__flatcc_fb_read_file+0x94>
 680:	b	6fc <__flatcc_fb_read_file+0x108>
 684:	add	r4, r4, r0
 688:	mov	r3, r6
 68c:	sub	r2, r5, r4
 690:	mov	r1, #1
 694:	add	r0, r7, r4
 698:	bl	0 <fread>
 69c:	cmp	r0, #0
 6a0:	bne	684 <__flatcc_fb_read_file+0x90>
 6a4:	cmp	r4, r5
 6a8:	mov	r0, r6
 6ac:	bne	6d4 <__flatcc_fb_read_file+0xe0>
 6b0:	bl	0 <fclose>
 6b4:	str	r4, [r8]
 6b8:	mov	r0, r7
 6bc:	add	sp, sp, #8
 6c0:	ldrd	r4, [sp]
 6c4:	ldrd	r6, [sp, #8]
 6c8:	ldr	r8, [sp, #16]
 6cc:	add	sp, sp, #20
 6d0:	pop	{pc}		; (ldr pc, [sp], #4)
 6d4:	bl	0 <fclose>
 6d8:	mov	r0, r7
 6dc:	bl	0 <free>
 6e0:	mov	r7, #0
 6e4:	str	r5, [r8]
 6e8:	b	6b8 <__flatcc_fb_read_file+0xc4>
 6ec:	bl	0 <fclose>
 6f0:	b	6e0 <__flatcc_fb_read_file+0xec>
 6f4:	mov	r5, r6
 6f8:	b	6e0 <__flatcc_fb_read_file+0xec>
 6fc:	mov	r0, r6
 700:	bl	0 <fclose>
 704:	b	6e0 <__flatcc_fb_read_file+0xec>
