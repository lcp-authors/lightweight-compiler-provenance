
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_reopen>:
   0:	push	{r4, r5, r6, sl, fp, lr}
   4:	add	fp, sp, #16
   8:	sub	sp, sp, #8
   c:	mov	r4, r0
  10:	mov	r0, #56	; 0x38
  14:	bl	0 <malloc>
  18:	cmp	r0, #0
  1c:	beq	90 <coda_xml_reopen+0x90>
  20:	mov	r5, r0
  24:	mov	r0, #0
  28:	vmov.i32	q8, #0	; 0x00000000
  2c:	mov	ip, #2
  30:	str	r0, [r5]
  34:	add	r6, r5, #20
  38:	ldr	r1, [r4]
  3c:	ldrd	r2, [r1, #8]
  40:	vst1.32	{d16-d17}, [r6]
  44:	str	r0, [r5, #40]	; 0x28
  48:	str	r0, [r5, #44]	; 0x2c
  4c:	str	r0, [r5, #48]	; 0x30
  50:	add	r0, r5, #8
  54:	str	r1, [r5, #52]	; 0x34
  58:	stm	r0, {r2, r3, ip}
  5c:	ldr	r0, [r1]
  60:	bl	0 <strdup>
  64:	cmp	r0, #0
  68:	str	r0, [r5]
  6c:	beq	c4 <coda_xml_reopen+0xc4>
  70:	mov	r0, r5
  74:	bl	0 <coda_xml_parse>
  78:	cmp	r0, #0
  7c:	beq	f0 <coda_xml_reopen+0xf0>
  80:	mov	r0, r5
  84:	bl	0 <coda_close>
  88:	mvn	r6, #0
  8c:	b	f8 <coda_xml_reopen+0xf8>
  90:	movw	r1, #0
  94:	movw	r3, #0
  98:	mov	r0, #53	; 0x35
  9c:	mov	r2, #56	; 0x38
  a0:	mvn	r6, #0
  a4:	str	r0, [sp]
  a8:	movt	r1, #0
  ac:	movt	r3, #0
  b0:	mvn	r0, #0
  b4:	bl	0 <coda_set_error>
  b8:	ldr	r0, [r4]
  bc:	bl	0 <coda_close>
  c0:	b	f8 <coda_xml_reopen+0xf8>
  c4:	movw	r1, #0
  c8:	movw	r2, #0
  cc:	mvn	r0, #0
  d0:	mov	r3, #72	; 0x48
  d4:	mvn	r6, #0
  d8:	movt	r1, #0
  dc:	movt	r2, #0
  e0:	bl	0 <coda_set_error>
  e4:	mov	r0, r5
  e8:	bl	0 <coda_close>
  ec:	b	f8 <coda_xml_reopen+0xf8>
  f0:	mov	r6, #0
  f4:	str	r5, [r4]
  f8:	mov	r0, r6
  fc:	sub	sp, fp, #16
 100:	pop	{r4, r5, r6, sl, fp, pc}

00000104 <coda_xml_reopen_with_definition>:
 104:	push	{r4, r5, r6, sl, fp, lr}
 108:	add	fp, sp, #16
 10c:	cmp	r1, #0
 110:	beq	178 <coda_xml_reopen_with_definition+0x74>
 114:	ldr	r5, [r0]
 118:	ldr	r0, [r5, #16]
 11c:	cmp	r0, #2
 120:	bne	198 <coda_xml_reopen_with_definition+0x94>
 124:	ldr	r0, [r1]
 128:	mov	r4, r1
 12c:	cmp	r0, #2
 130:	bne	1b8 <coda_xml_reopen_with_definition+0xb4>
 134:	ldr	r0, [r5, #20]
 138:	bl	0 <coda_dynamic_type_delete>
 13c:	mov	r6, #0
 140:	str	r6, [r5, #40]	; 0x28
 144:	str	r6, [r5, #44]	; 0x2c
 148:	str	r6, [r5, #20]
 14c:	ldr	r0, [r5, #48]	; 0x30
 150:	cmp	r0, #0
 154:	beq	160 <coda_xml_reopen_with_definition+0x5c>
 158:	bl	0 <free>
 15c:	str	r6, [r5, #48]	; 0x30
 160:	mov	r0, r5
 164:	str	r4, [r5, #24]
 168:	bl	0 <coda_xml_parse>
 16c:	cmp	r0, #0
 170:	mvnne	r0, #0
 174:	pop	{r4, r5, r6, sl, fp, pc}
 178:	movw	r0, #0
 17c:	movw	r1, #0
 180:	movw	r3, #0
 184:	mov	r2, #92	; 0x5c
 188:	movt	r0, #0
 18c:	movt	r1, #0
 190:	movt	r3, #0
 194:	bl	0 <__assert_fail>
 198:	movw	r0, #0
 19c:	movw	r1, #0
 1a0:	movw	r3, #0
 1a4:	mov	r2, #93	; 0x5d
 1a8:	movt	r0, #0
 1ac:	movt	r1, #0
 1b0:	movt	r3, #0
 1b4:	bl	0 <__assert_fail>
 1b8:	movw	r0, #0
 1bc:	movw	r1, #0
 1c0:	movw	r3, #0
 1c4:	mov	r2, #94	; 0x5e
 1c8:	movt	r0, #0
 1cc:	movt	r1, #0
 1d0:	movt	r3, #0
 1d4:	bl	0 <__assert_fail>

000001d8 <coda_xml_close>:
 1d8:	push	{r4, sl, fp, lr}
 1dc:	add	fp, sp, #8
 1e0:	mov	r4, r0
 1e4:	ldr	r0, [r0]
 1e8:	cmp	r0, #0
 1ec:	beq	1f4 <coda_xml_close+0x1c>
 1f0:	bl	0 <free>
 1f4:	ldr	r0, [r4, #20]
 1f8:	cmp	r0, #0
 1fc:	beq	204 <coda_xml_close+0x2c>
 200:	bl	0 <coda_dynamic_type_delete>
 204:	ldr	r0, [r4, #48]	; 0x30
 208:	cmp	r0, #0
 20c:	beq	214 <coda_xml_close+0x3c>
 210:	bl	0 <free>
 214:	ldr	r0, [r4, #52]	; 0x34
 218:	cmp	r0, #0
 21c:	beq	224 <coda_xml_close+0x4c>
 220:	bl	0 <coda_bin_close>
 224:	mov	r0, r4
 228:	bl	0 <free>
 22c:	mov	r0, #0
 230:	pop	{r4, sl, fp, pc}

00000234 <coda_xml_cursor_set_product>:
 234:	mov	r2, #1
 238:	stm	r0, {r1, r2}
 23c:	mov	r2, #0
 240:	ldr	r1, [r1, #20]
 244:	str	r2, [r0, #20]
 248:	str	r2, [r0, #16]
 24c:	mvn	r2, #0
 250:	str	r2, [r0, #12]
 254:	str	r1, [r0, #8]
 258:	mov	r0, #0
 25c:	bx	lr
