
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uq.dir/__/__/src/runtime/verifier.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatbuffers_uoffset_cast_from_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	str	r0, [fp, #-8]
      10:	ldr	r3, [fp, #-8]
      14:	mov	r0, r3
      18:	add	sp, fp, #0
      1c:	pop	{fp}		; (ldr fp, [sp], #4)
      20:	bx	lr

00000024 <__flatbuffers_uoffset_read_from_pe>:
      24:	push	{fp, lr}
      28:	add	fp, sp, #4
      2c:	sub	sp, sp, #8
      30:	str	r0, [fp, #-8]
      34:	ldr	r3, [fp, #-8]
      38:	ldr	r3, [r3]
      3c:	mov	r0, r3
      40:	bl	0 <__flatbuffers_uoffset_cast_from_pe>
      44:	mov	r3, r0
      48:	mov	r0, r3
      4c:	sub	sp, fp, #4
      50:	pop	{fp, pc}

00000054 <__flatbuffers_voffset_cast_from_pe>:
      54:	push	{fp}		; (str fp, [sp, #-4]!)
      58:	add	fp, sp, #0
      5c:	sub	sp, sp, #12
      60:	mov	r3, r0
      64:	strh	r3, [fp, #-6]
      68:	ldrh	r3, [fp, #-6]
      6c:	mov	r0, r3
      70:	add	sp, fp, #0
      74:	pop	{fp}		; (ldr fp, [sp], #4)
      78:	bx	lr

0000007c <__flatbuffers_voffset_read_from_pe>:
      7c:	push	{fp, lr}
      80:	add	fp, sp, #4
      84:	sub	sp, sp, #8
      88:	str	r0, [fp, #-8]
      8c:	ldr	r3, [fp, #-8]
      90:	ldrh	r3, [r3]
      94:	mov	r0, r3
      98:	bl	54 <__flatbuffers_voffset_cast_from_pe>
      9c:	mov	r3, r0
      a0:	mov	r0, r3
      a4:	sub	sp, fp, #4
      a8:	pop	{fp, pc}

000000ac <__flatbuffers_thash_cast_from_pe>:
      ac:	push	{fp}		; (str fp, [sp, #-4]!)
      b0:	add	fp, sp, #0
      b4:	sub	sp, sp, #12
      b8:	str	r0, [fp, #-8]
      bc:	ldr	r3, [fp, #-8]
      c0:	mov	r0, r3
      c4:	add	sp, fp, #0
      c8:	pop	{fp}		; (ldr fp, [sp], #4)
      cc:	bx	lr

000000d0 <__flatbuffers_thash_cast_from_le>:
      d0:	push	{fp}		; (str fp, [sp, #-4]!)
      d4:	add	fp, sp, #0
      d8:	sub	sp, sp, #12
      dc:	str	r0, [fp, #-8]
      e0:	ldr	r3, [fp, #-8]
      e4:	mov	r0, r3
      e8:	add	sp, fp, #0
      ec:	pop	{fp}		; (ldr fp, [sp], #4)
      f0:	bx	lr

000000f4 <__flatbuffers_thash_read_from_pe>:
      f4:	push	{fp, lr}
      f8:	add	fp, sp, #4
      fc:	sub	sp, sp, #8
     100:	str	r0, [fp, #-8]
     104:	ldr	r3, [fp, #-8]
     108:	ldr	r3, [r3]
     10c:	mov	r0, r3
     110:	bl	ac <__flatbuffers_thash_cast_from_pe>
     114:	mov	r3, r0
     118:	mov	r0, r3
     11c:	sub	sp, fp, #4
     120:	pop	{fp, pc}

00000124 <flatcc_verify_error_string>:
     124:	push	{fp}		; (str fp, [sp, #-4]!)
     128:	add	fp, sp, #0
     12c:	sub	sp, sp, #12
     130:	str	r0, [fp, #-8]
     134:	ldr	r3, [fp, #-8]
     138:	cmp	r3, #36	; 0x24
     13c:	ldrls	pc, [pc, r3, lsl #2]
     140:	b	300 <flatcc_verify_error_string+0x1dc>
     144:	.word	0x000001d8
     148:	.word	0x000001e0
     14c:	.word	0x000001e8
     150:	.word	0x000001f0
     154:	.word	0x000001f8
     158:	.word	0x00000200
     15c:	.word	0x00000208
     160:	.word	0x00000210
     164:	.word	0x00000218
     168:	.word	0x00000220
     16c:	.word	0x00000228
     170:	.word	0x00000230
     174:	.word	0x00000238
     178:	.word	0x00000240
     17c:	.word	0x00000248
     180:	.word	0x00000250
     184:	.word	0x00000258
     188:	.word	0x00000260
     18c:	.word	0x00000268
     190:	.word	0x00000270
     194:	.word	0x00000278
     198:	.word	0x00000280
     19c:	.word	0x00000288
     1a0:	.word	0x00000290
     1a4:	.word	0x00000298
     1a8:	.word	0x000002a0
     1ac:	.word	0x000002a8
     1b0:	.word	0x000002b0
     1b4:	.word	0x000002b8
     1b8:	.word	0x000002c0
     1bc:	.word	0x000002c8
     1c0:	.word	0x000002d0
     1c4:	.word	0x000002d8
     1c8:	.word	0x000002e0
     1cc:	.word	0x000002e8
     1d0:	.word	0x000002f0
     1d4:	.word	0x000002f8
     1d8:	ldr	r3, [pc, #308]	; 314 <flatcc_verify_error_string+0x1f0>
     1dc:	b	304 <flatcc_verify_error_string+0x1e0>
     1e0:	ldr	r3, [pc, #304]	; 318 <flatcc_verify_error_string+0x1f4>
     1e4:	b	304 <flatcc_verify_error_string+0x1e0>
     1e8:	ldr	r3, [pc, #300]	; 31c <flatcc_verify_error_string+0x1f8>
     1ec:	b	304 <flatcc_verify_error_string+0x1e0>
     1f0:	ldr	r3, [pc, #296]	; 320 <flatcc_verify_error_string+0x1fc>
     1f4:	b	304 <flatcc_verify_error_string+0x1e0>
     1f8:	ldr	r3, [pc, #292]	; 324 <flatcc_verify_error_string+0x200>
     1fc:	b	304 <flatcc_verify_error_string+0x1e0>
     200:	ldr	r3, [pc, #288]	; 328 <flatcc_verify_error_string+0x204>
     204:	b	304 <flatcc_verify_error_string+0x1e0>
     208:	ldr	r3, [pc, #284]	; 32c <flatcc_verify_error_string+0x208>
     20c:	b	304 <flatcc_verify_error_string+0x1e0>
     210:	ldr	r3, [pc, #280]	; 330 <flatcc_verify_error_string+0x20c>
     214:	b	304 <flatcc_verify_error_string+0x1e0>
     218:	ldr	r3, [pc, #276]	; 334 <flatcc_verify_error_string+0x210>
     21c:	b	304 <flatcc_verify_error_string+0x1e0>
     220:	ldr	r3, [pc, #272]	; 338 <flatcc_verify_error_string+0x214>
     224:	b	304 <flatcc_verify_error_string+0x1e0>
     228:	ldr	r3, [pc, #268]	; 33c <flatcc_verify_error_string+0x218>
     22c:	b	304 <flatcc_verify_error_string+0x1e0>
     230:	ldr	r3, [pc, #264]	; 340 <flatcc_verify_error_string+0x21c>
     234:	b	304 <flatcc_verify_error_string+0x1e0>
     238:	ldr	r3, [pc, #260]	; 344 <flatcc_verify_error_string+0x220>
     23c:	b	304 <flatcc_verify_error_string+0x1e0>
     240:	ldr	r3, [pc, #256]	; 348 <flatcc_verify_error_string+0x224>
     244:	b	304 <flatcc_verify_error_string+0x1e0>
     248:	ldr	r3, [pc, #252]	; 34c <flatcc_verify_error_string+0x228>
     24c:	b	304 <flatcc_verify_error_string+0x1e0>
     250:	ldr	r3, [pc, #248]	; 350 <flatcc_verify_error_string+0x22c>
     254:	b	304 <flatcc_verify_error_string+0x1e0>
     258:	ldr	r3, [pc, #244]	; 354 <flatcc_verify_error_string+0x230>
     25c:	b	304 <flatcc_verify_error_string+0x1e0>
     260:	ldr	r3, [pc, #240]	; 358 <flatcc_verify_error_string+0x234>
     264:	b	304 <flatcc_verify_error_string+0x1e0>
     268:	ldr	r3, [pc, #236]	; 35c <flatcc_verify_error_string+0x238>
     26c:	b	304 <flatcc_verify_error_string+0x1e0>
     270:	ldr	r3, [pc, #232]	; 360 <flatcc_verify_error_string+0x23c>
     274:	b	304 <flatcc_verify_error_string+0x1e0>
     278:	ldr	r3, [pc, #228]	; 364 <flatcc_verify_error_string+0x240>
     27c:	b	304 <flatcc_verify_error_string+0x1e0>
     280:	ldr	r3, [pc, #224]	; 368 <flatcc_verify_error_string+0x244>
     284:	b	304 <flatcc_verify_error_string+0x1e0>
     288:	ldr	r3, [pc, #220]	; 36c <flatcc_verify_error_string+0x248>
     28c:	b	304 <flatcc_verify_error_string+0x1e0>
     290:	ldr	r3, [pc, #216]	; 370 <flatcc_verify_error_string+0x24c>
     294:	b	304 <flatcc_verify_error_string+0x1e0>
     298:	ldr	r3, [pc, #212]	; 374 <flatcc_verify_error_string+0x250>
     29c:	b	304 <flatcc_verify_error_string+0x1e0>
     2a0:	ldr	r3, [pc, #208]	; 378 <flatcc_verify_error_string+0x254>
     2a4:	b	304 <flatcc_verify_error_string+0x1e0>
     2a8:	ldr	r3, [pc, #204]	; 37c <flatcc_verify_error_string+0x258>
     2ac:	b	304 <flatcc_verify_error_string+0x1e0>
     2b0:	ldr	r3, [pc, #200]	; 380 <flatcc_verify_error_string+0x25c>
     2b4:	b	304 <flatcc_verify_error_string+0x1e0>
     2b8:	ldr	r3, [pc, #196]	; 384 <flatcc_verify_error_string+0x260>
     2bc:	b	304 <flatcc_verify_error_string+0x1e0>
     2c0:	ldr	r3, [pc, #192]	; 388 <flatcc_verify_error_string+0x264>
     2c4:	b	304 <flatcc_verify_error_string+0x1e0>
     2c8:	ldr	r3, [pc, #188]	; 38c <flatcc_verify_error_string+0x268>
     2cc:	b	304 <flatcc_verify_error_string+0x1e0>
     2d0:	ldr	r3, [pc, #184]	; 390 <flatcc_verify_error_string+0x26c>
     2d4:	b	304 <flatcc_verify_error_string+0x1e0>
     2d8:	ldr	r3, [pc, #180]	; 394 <flatcc_verify_error_string+0x270>
     2dc:	b	304 <flatcc_verify_error_string+0x1e0>
     2e0:	ldr	r3, [pc, #176]	; 398 <flatcc_verify_error_string+0x274>
     2e4:	b	304 <flatcc_verify_error_string+0x1e0>
     2e8:	ldr	r3, [pc, #172]	; 39c <flatcc_verify_error_string+0x278>
     2ec:	b	304 <flatcc_verify_error_string+0x1e0>
     2f0:	ldr	r3, [pc, #168]	; 3a0 <flatcc_verify_error_string+0x27c>
     2f4:	b	304 <flatcc_verify_error_string+0x1e0>
     2f8:	ldr	r3, [pc, #164]	; 3a4 <flatcc_verify_error_string+0x280>
     2fc:	b	304 <flatcc_verify_error_string+0x1e0>
     300:	ldr	r3, [pc, #160]	; 3a8 <flatcc_verify_error_string+0x284>
     304:	mov	r0, r3
     308:	add	sp, fp, #0
     30c:	pop	{fp}		; (ldr fp, [sp], #4)
     310:	bx	lr
     314:	.word	0x00000004
     318:	.word	0x00000008
     31c:	.word	0x00000020
     320:	.word	0x00000034
     324:	.word	0x00000050
     328:	.word	0x00000068
     32c:	.word	0x0000008c
     330:	.word	0x000000ac
     334:	.word	0x000000c8
     338:	.word	0x000000dc
     33c:	.word	0x000000f0
     340:	.word	0x00000108
     344:	.word	0x0000011c
     348:	.word	0x00000134
     34c:	.word	0x00000150
     350:	.word	0x0000016c
     354:	.word	0x00000194
     358:	.word	0x000001bc
     35c:	.word	0x000001e4
     360:	.word	0x000001f8
     364:	.word	0x00000220
     368:	.word	0x00000238
     36c:	.word	0x00000264
     370:	.word	0x00000298
     374:	.word	0x000002c4
     378:	.word	0x000002f0
     37c:	.word	0x00000320
     380:	.word	0x00000334
     384:	.word	0x00000350
     388:	.word	0x00000368
     38c:	.word	0x00000390
     390:	.word	0x000003b8
     394:	.word	0x000003d0
     398:	.word	0x000003f8
     39c:	.word	0x00000420
     3a0:	.word	0x00000454
     3a4:	.word	0x0000047c
     3a8:	.word	0x0000048c

000003ac <read_uoffset>:
     3ac:	push	{fp, lr}
     3b0:	add	fp, sp, #4
     3b4:	sub	sp, sp, #8
     3b8:	str	r0, [fp, #-8]
     3bc:	str	r1, [fp, #-12]
     3c0:	ldr	r2, [fp, #-8]
     3c4:	ldr	r3, [fp, #-12]
     3c8:	add	r3, r2, r3
     3cc:	mov	r0, r3
     3d0:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     3d4:	mov	r3, r0
     3d8:	mov	r0, r3
     3dc:	sub	sp, fp, #4
     3e0:	pop	{fp, pc}

000003e4 <read_thash_identifier>:
     3e4:	push	{fp, lr}
     3e8:	add	fp, sp, #4
     3ec:	sub	sp, sp, #16
     3f0:	str	r0, [fp, #-16]
     3f4:	mov	r3, #0
     3f8:	str	r3, [fp, #-8]
     3fc:	sub	r3, fp, #8
     400:	mov	r2, #4
     404:	ldr	r1, [fp, #-16]
     408:	mov	r0, r3
     40c:	bl	0 <strncpy>
     410:	ldr	r3, [fp, #-8]
     414:	mov	r0, r3
     418:	bl	d0 <__flatbuffers_thash_cast_from_le>
     41c:	mov	r3, r0
     420:	mov	r0, r3
     424:	sub	sp, fp, #4
     428:	pop	{fp, pc}

0000042c <read_thash>:
     42c:	push	{fp, lr}
     430:	add	fp, sp, #4
     434:	sub	sp, sp, #8
     438:	str	r0, [fp, #-8]
     43c:	str	r1, [fp, #-12]
     440:	ldr	r2, [fp, #-8]
     444:	ldr	r3, [fp, #-12]
     448:	add	r3, r2, r3
     44c:	mov	r0, r3
     450:	bl	f4 <__flatbuffers_thash_read_from_pe>
     454:	mov	r3, r0
     458:	mov	r0, r3
     45c:	sub	sp, fp, #4
     460:	pop	{fp, pc}

00000464 <read_voffset>:
     464:	push	{fp, lr}
     468:	add	fp, sp, #4
     46c:	sub	sp, sp, #8
     470:	str	r0, [fp, #-8]
     474:	str	r1, [fp, #-12]
     478:	ldr	r2, [fp, #-8]
     47c:	ldr	r3, [fp, #-12]
     480:	add	r3, r2, r3
     484:	mov	r0, r3
     488:	bl	7c <__flatbuffers_voffset_read_from_pe>
     48c:	mov	r3, r0
     490:	mov	r0, r3
     494:	sub	sp, fp, #4
     498:	pop	{fp, pc}

0000049c <check_header>:
     49c:	push	{fp}		; (str fp, [sp, #-4]!)
     4a0:	add	fp, sp, #0
     4a4:	sub	sp, sp, #28
     4a8:	str	r0, [fp, #-16]
     4ac:	str	r1, [fp, #-20]	; 0xffffffec
     4b0:	str	r2, [fp, #-24]	; 0xffffffe8
     4b4:	ldr	r2, [fp, #-20]	; 0xffffffec
     4b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     4bc:	add	r3, r2, r3
     4c0:	str	r3, [fp, #-8]
     4c4:	ldr	r2, [fp, #-8]
     4c8:	ldr	r3, [fp, #-20]	; 0xffffffec
     4cc:	cmp	r2, r3
     4d0:	bls	500 <check_header+0x64>
     4d4:	ldr	r3, [fp, #-8]
     4d8:	add	r2, r3, #4
     4dc:	ldr	r3, [fp, #-16]
     4e0:	cmp	r2, r3
     4e4:	bhi	500 <check_header+0x64>
     4e8:	ldr	r3, [fp, #-8]
     4ec:	and	r3, r3, #3
     4f0:	cmp	r3, #0
     4f4:	bne	500 <check_header+0x64>
     4f8:	mov	r3, #1
     4fc:	b	504 <check_header+0x68>
     500:	mov	r3, #0
     504:	mov	r0, r3
     508:	add	sp, fp, #0
     50c:	pop	{fp}		; (ldr fp, [sp], #4)
     510:	bx	lr

00000514 <check_aligned_header>:
     514:	push	{fp}		; (str fp, [sp, #-4]!)
     518:	add	fp, sp, #0
     51c:	sub	sp, sp, #28
     520:	str	r0, [fp, #-16]
     524:	str	r1, [fp, #-20]	; 0xffffffec
     528:	str	r2, [fp, #-24]	; 0xffffffe8
     52c:	strh	r3, [fp, #-26]	; 0xffffffe6
     530:	ldr	r2, [fp, #-20]	; 0xffffffec
     534:	ldr	r3, [fp, #-24]	; 0xffffffe8
     538:	add	r3, r2, r3
     53c:	str	r3, [fp, #-8]
     540:	ldrh	r3, [fp, #-26]	; 0xffffffe6
     544:	cmp	r3, #4
     548:	movcs	r3, r3
     54c:	movcc	r3, #4
     550:	strh	r3, [fp, #-26]	; 0xffffffe6
     554:	ldr	r2, [fp, #-8]
     558:	ldr	r3, [fp, #-20]	; 0xffffffec
     55c:	cmp	r2, r3
     560:	bls	5a0 <check_aligned_header+0x8c>
     564:	ldr	r3, [fp, #-8]
     568:	add	r2, r3, #4
     56c:	ldr	r3, [fp, #-16]
     570:	cmp	r2, r3
     574:	bhi	5a0 <check_aligned_header+0x8c>
     578:	ldr	r3, [fp, #-8]
     57c:	add	r2, r3, #4
     580:	ldrh	r3, [fp, #-26]	; 0xffffffe6
     584:	sub	r3, r3, #1
     588:	orr	r3, r3, #3
     58c:	and	r3, r3, r2
     590:	cmp	r3, #0
     594:	bne	5a0 <check_aligned_header+0x8c>
     598:	mov	r3, #1
     59c:	b	5a4 <check_aligned_header+0x90>
     5a0:	mov	r3, #0
     5a4:	mov	r0, r3
     5a8:	add	sp, fp, #0
     5ac:	pop	{fp}		; (ldr fp, [sp], #4)
     5b0:	bx	lr

000005b4 <verify_struct>:
     5b4:	push	{fp}		; (str fp, [sp, #-4]!)
     5b8:	add	fp, sp, #0
     5bc:	sub	sp, sp, #36	; 0x24
     5c0:	str	r0, [fp, #-24]	; 0xffffffe8
     5c4:	str	r1, [fp, #-28]	; 0xffffffe4
     5c8:	str	r2, [fp, #-32]	; 0xffffffe0
     5cc:	str	r3, [fp, #-36]	; 0xffffffdc
     5d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5d4:	cmp	r3, #0
     5d8:	beq	5f4 <verify_struct+0x40>
     5dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
     5e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5e4:	add	r2, r2, r3
     5e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5ec:	cmp	r2, r3
     5f0:	bls	5fc <verify_struct+0x48>
     5f4:	mov	r3, #18
     5f8:	b	6bc <verify_struct+0x108>
     5fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
     600:	ldr	r3, [fp, #-32]	; 0xffffffe0
     604:	add	r3, r2, r3
     608:	str	r3, [fp, #-28]	; 0xffffffe4
     60c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     610:	ldr	r3, [fp, #-36]	; 0xffffffdc
     614:	add	r2, r2, r3
     618:	ldr	r3, [fp, #-28]	; 0xffffffe4
     61c:	cmp	r2, r3
     620:	movcs	r3, #1
     624:	movcc	r3, #0
     628:	uxtb	r3, r3
     62c:	str	r3, [fp, #-8]
     630:	ldr	r3, [fp, #-8]
     634:	cmp	r3, #0
     638:	bne	644 <verify_struct+0x90>
     63c:	mov	r3, #10
     640:	b	6bc <verify_struct+0x108>
     644:	ldr	r2, [fp, #-28]	; 0xffffffe4
     648:	ldr	r3, [fp, #-36]	; 0xffffffdc
     64c:	add	r2, r2, r3
     650:	ldr	r3, [fp, #-24]	; 0xffffffe8
     654:	cmp	r2, r3
     658:	movls	r3, #1
     65c:	movhi	r3, #0
     660:	uxtb	r3, r3
     664:	str	r3, [fp, #-12]
     668:	ldr	r3, [fp, #-12]
     66c:	cmp	r3, #0
     670:	bne	67c <verify_struct+0xc8>
     674:	mov	r3, #9
     678:	b	6bc <verify_struct+0x108>
     67c:	ldrh	r3, [fp, #4]
     680:	sub	r3, r3, #1
     684:	mov	r2, r3
     688:	ldr	r3, [fp, #-28]	; 0xffffffe4
     68c:	and	r3, r3, r2
     690:	cmp	r3, #0
     694:	moveq	r3, #1
     698:	movne	r3, #0
     69c:	uxtb	r3, r3
     6a0:	str	r3, [fp, #-16]
     6a4:	ldr	r3, [fp, #-16]
     6a8:	cmp	r3, #0
     6ac:	bne	6b8 <verify_struct+0x104>
     6b0:	mov	r3, #11
     6b4:	b	6bc <verify_struct+0x108>
     6b8:	mov	r3, #0
     6bc:	mov	r0, r3
     6c0:	add	sp, fp, #0
     6c4:	pop	{fp}		; (ldr fp, [sp], #4)
     6c8:	bx	lr

000006cc <read_vt_entry>:
     6cc:	push	{fp, lr}
     6d0:	add	fp, sp, #4
     6d4:	sub	sp, sp, #16
     6d8:	str	r0, [fp, #-16]
     6dc:	mov	r3, r1
     6e0:	strh	r3, [fp, #-18]	; 0xffffffee
     6e4:	ldrh	r3, [fp, #-18]	; 0xffffffee
     6e8:	add	r3, r3, #2
     6ec:	uxth	r3, r3
     6f0:	lsl	r3, r3, #1
     6f4:	strh	r3, [fp, #-6]
     6f8:	ldr	r3, [fp, #-16]
     6fc:	ldrh	r3, [r3, #22]
     700:	ldrh	r2, [fp, #-6]
     704:	cmp	r2, r3
     708:	bcc	714 <read_vt_entry+0x48>
     70c:	mov	r3, #0
     710:	b	730 <read_vt_entry+0x64>
     714:	ldr	r3, [fp, #-16]
     718:	ldr	r3, [r3, #12]
     71c:	ldrh	r2, [fp, #-6]
     720:	mov	r1, r2
     724:	mov	r0, r3
     728:	bl	464 <read_voffset>
     72c:	mov	r3, r0
     730:	mov	r0, r3
     734:	sub	sp, fp, #4
     738:	pop	{fp, pc}

0000073c <get_field_ptr>:
     73c:	push	{fp, lr}
     740:	add	fp, sp, #4
     744:	sub	sp, sp, #16
     748:	str	r0, [fp, #-16]
     74c:	mov	r3, r1
     750:	strh	r3, [fp, #-18]	; 0xffffffee
     754:	ldrh	r3, [fp, #-18]	; 0xffffffee
     758:	mov	r1, r3
     75c:	ldr	r0, [fp, #-16]
     760:	bl	6cc <read_vt_entry>
     764:	mov	r3, r0
     768:	strh	r3, [fp, #-6]
     76c:	ldrh	r3, [fp, #-6]
     770:	cmp	r3, #0
     774:	beq	798 <get_field_ptr+0x5c>
     778:	ldr	r3, [fp, #-16]
     77c:	ldr	r2, [r3]
     780:	ldr	r3, [fp, #-16]
     784:	ldr	r1, [r3, #16]
     788:	ldrh	r3, [fp, #-6]
     78c:	add	r3, r1, r3
     790:	add	r3, r2, r3
     794:	b	79c <get_field_ptr+0x60>
     798:	mov	r3, #0
     79c:	mov	r0, r3
     7a0:	sub	sp, fp, #4
     7a4:	pop	{fp, pc}

000007a8 <verify_field>:
     7a8:	push	{fp, lr}
     7ac:	add	fp, sp, #4
     7b0:	sub	sp, sp, #48	; 0x30
     7b4:	str	r0, [fp, #-40]	; 0xffffffd8
     7b8:	str	r2, [fp, #-48]	; 0xffffffd0
     7bc:	str	r3, [fp, #-52]	; 0xffffffcc
     7c0:	strh	r1, [fp, #-42]	; 0xffffffd6
     7c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     7c8:	ldr	r3, [r3]
     7cc:	str	r3, [fp, #-8]
     7d0:	ldrh	r3, [fp, #-42]	; 0xffffffd6
     7d4:	mov	r1, r3
     7d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
     7dc:	bl	6cc <read_vt_entry>
     7e0:	mov	r3, r0
     7e4:	strh	r3, [fp, #-10]
     7e8:	ldrh	r3, [fp, #-10]
     7ec:	cmp	r3, #0
     7f0:	bne	828 <verify_field+0x80>
     7f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
     7f8:	cmp	r3, #0
     7fc:	moveq	r3, #1
     800:	movne	r3, #0
     804:	uxtb	r3, r3
     808:	str	r3, [fp, #-16]
     80c:	ldr	r3, [fp, #-16]
     810:	cmp	r3, #0
     814:	bne	820 <verify_field+0x78>
     818:	mov	r3, #4
     81c:	b	8f0 <verify_field+0x148>
     820:	mov	r3, #0
     824:	b	8f0 <verify_field+0x148>
     828:	ldrh	r3, [fp, #-10]
     82c:	str	r3, [fp, #-20]	; 0xffffffec
     830:	ldr	r2, [fp, #-20]	; 0xffffffec
     834:	ldr	r3, [fp, #-52]	; 0xffffffcc
     838:	add	r3, r2, r3
     83c:	str	r3, [fp, #-24]	; 0xffffffe8
     840:	ldr	r3, [fp, #-40]	; 0xffffffd8
     844:	ldrh	r3, [r3, #20]
     848:	mov	r2, r3
     84c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     850:	cmp	r2, r3
     854:	movcs	r3, #1
     858:	movcc	r3, #0
     85c:	uxtb	r3, r3
     860:	str	r3, [fp, #-28]	; 0xffffffe4
     864:	ldr	r3, [fp, #-28]	; 0xffffffe4
     868:	cmp	r3, #0
     86c:	bne	878 <verify_field+0xd0>
     870:	mov	r3, #13
     874:	b	8f0 <verify_field+0x148>
     878:	mov	r3, #1
     87c:	str	r3, [fp, #-32]	; 0xffffffe0
     880:	ldr	r3, [fp, #-32]	; 0xffffffe0
     884:	cmp	r3, #0
     888:	bne	894 <verify_field+0xec>
     88c:	mov	r3, #14
     890:	b	8f0 <verify_field+0x148>
     894:	ldr	r3, [fp, #-40]	; 0xffffffd8
     898:	ldr	r2, [r3, #16]
     89c:	ldr	r3, [fp, #-8]
     8a0:	add	r3, r2, r3
     8a4:	ldr	r2, [fp, #-20]	; 0xffffffec
     8a8:	add	r3, r2, r3
     8ac:	str	r3, [fp, #-20]	; 0xffffffec
     8b0:	ldrh	r3, [fp, #4]
     8b4:	sub	r3, r3, #1
     8b8:	mov	r2, r3
     8bc:	ldr	r3, [fp, #-20]	; 0xffffffec
     8c0:	and	r3, r3, r2
     8c4:	cmp	r3, #0
     8c8:	moveq	r3, #1
     8cc:	movne	r3, #0
     8d0:	uxtb	r3, r3
     8d4:	str	r3, [fp, #-36]	; 0xffffffdc
     8d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8dc:	cmp	r3, #0
     8e0:	bne	8ec <verify_field+0x144>
     8e4:	mov	r3, #12
     8e8:	b	8f0 <verify_field+0x148>
     8ec:	mov	r3, #0
     8f0:	mov	r0, r3
     8f4:	sub	sp, fp, #4
     8f8:	pop	{fp, pc}

000008fc <get_offset_field>:
     8fc:	push	{fp, lr}
     900:	add	fp, sp, #4
     904:	sub	sp, sp, #40	; 0x28
     908:	str	r0, [fp, #-32]	; 0xffffffe0
     90c:	str	r2, [fp, #-40]	; 0xffffffd8
     910:	str	r3, [fp, #-44]	; 0xffffffd4
     914:	strh	r1, [fp, #-34]	; 0xffffffde
     918:	ldrh	r3, [fp, #-34]	; 0xffffffde
     91c:	mov	r1, r3
     920:	ldr	r0, [fp, #-32]	; 0xffffffe0
     924:	bl	6cc <read_vt_entry>
     928:	mov	r3, r0
     92c:	strh	r3, [fp, #-6]
     930:	ldrh	r3, [fp, #-6]
     934:	cmp	r3, #0
     938:	bne	964 <get_offset_field+0x68>
     93c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     940:	mov	r2, #0
     944:	str	r2, [r3]
     948:	ldr	r3, [fp, #-40]	; 0xffffffd8
     94c:	cmp	r3, #0
     950:	beq	95c <get_offset_field+0x60>
     954:	mov	r3, #4
     958:	b	a20 <get_offset_field+0x124>
     95c:	mov	r3, #0
     960:	b	a20 <get_offset_field+0x124>
     964:	ldrh	r3, [fp, #-6]
     968:	str	r3, [fp, #-12]
     96c:	ldr	r3, [fp, #-12]
     970:	add	r3, r3, #4
     974:	str	r3, [fp, #-16]
     978:	ldr	r3, [fp, #-32]	; 0xffffffe0
     97c:	ldrh	r3, [r3, #20]
     980:	mov	r2, r3
     984:	ldr	r3, [fp, #-16]
     988:	cmp	r2, r3
     98c:	movcs	r3, #1
     990:	movcc	r3, #0
     994:	uxtb	r3, r3
     998:	str	r3, [fp, #-20]	; 0xffffffec
     99c:	ldr	r3, [fp, #-20]	; 0xffffffec
     9a0:	cmp	r3, #0
     9a4:	bne	9b0 <get_offset_field+0xb4>
     9a8:	mov	r3, #13
     9ac:	b	a20 <get_offset_field+0x124>
     9b0:	mov	r3, #1
     9b4:	str	r3, [fp, #-24]	; 0xffffffe8
     9b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9bc:	cmp	r3, #0
     9c0:	bne	9cc <get_offset_field+0xd0>
     9c4:	mov	r3, #14
     9c8:	b	a20 <get_offset_field+0x124>
     9cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     9d0:	ldr	r3, [r3, #16]
     9d4:	ldr	r2, [fp, #-12]
     9d8:	add	r3, r2, r3
     9dc:	str	r3, [fp, #-12]
     9e0:	ldr	r3, [fp, #-12]
     9e4:	and	r3, r3, #3
     9e8:	cmp	r3, #0
     9ec:	moveq	r3, #1
     9f0:	movne	r3, #0
     9f4:	uxtb	r3, r3
     9f8:	str	r3, [fp, #-28]	; 0xffffffe4
     9fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a00:	cmp	r3, #0
     a04:	bne	a10 <get_offset_field+0x114>
     a08:	mov	r3, #12
     a0c:	b	a20 <get_offset_field+0x124>
     a10:	ldr	r3, [fp, #-44]	; 0xffffffd4
     a14:	ldr	r2, [fp, #-12]
     a18:	str	r2, [r3]
     a1c:	mov	r3, #0
     a20:	mov	r0, r3
     a24:	sub	sp, fp, #4
     a28:	pop	{fp, pc}

00000a2c <verify_string>:
     a2c:	push	{fp, lr}
     a30:	add	fp, sp, #4
     a34:	sub	sp, sp, #32
     a38:	str	r0, [fp, #-24]	; 0xffffffe8
     a3c:	str	r1, [fp, #-28]	; 0xffffffe4
     a40:	str	r2, [fp, #-32]	; 0xffffffe0
     a44:	str	r3, [fp, #-36]	; 0xffffffdc
     a48:	ldr	r2, [fp, #-36]	; 0xffffffdc
     a4c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     a50:	ldr	r0, [fp, #-28]	; 0xffffffe4
     a54:	bl	49c <check_header>
     a58:	str	r0, [fp, #-8]
     a5c:	ldr	r3, [fp, #-8]
     a60:	cmp	r3, #0
     a64:	bne	a70 <verify_string+0x44>
     a68:	mov	r3, #17
     a6c:	b	b1c <verify_string+0xf0>
     a70:	ldr	r2, [fp, #-32]	; 0xffffffe0
     a74:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a78:	add	r3, r2, r3
     a7c:	str	r3, [fp, #-32]	; 0xffffffe0
     a80:	ldr	r1, [fp, #-32]	; 0xffffffe0
     a84:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a88:	bl	3ac <read_uoffset>
     a8c:	str	r0, [fp, #-12]
     a90:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a94:	add	r3, r3, #4
     a98:	str	r3, [fp, #-32]	; 0xffffffe0
     a9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     aa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     aa4:	sub	r2, r2, r3
     aa8:	ldr	r3, [fp, #-12]
     aac:	add	r3, r3, #1
     ab0:	cmp	r2, r3
     ab4:	movcs	r3, #1
     ab8:	movcc	r3, #0
     abc:	uxtb	r3, r3
     ac0:	str	r3, [fp, #-16]
     ac4:	ldr	r3, [fp, #-16]
     ac8:	cmp	r3, #0
     acc:	bne	ad8 <verify_string+0xac>
     ad0:	mov	r3, #8
     ad4:	b	b1c <verify_string+0xf0>
     ad8:	ldr	r2, [fp, #-32]	; 0xffffffe0
     adc:	ldr	r3, [fp, #-12]
     ae0:	add	r3, r2, r3
     ae4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ae8:	add	r3, r2, r3
     aec:	ldrb	r3, [r3]
     af0:	cmp	r3, #0
     af4:	moveq	r3, #1
     af8:	movne	r3, #0
     afc:	uxtb	r3, r3
     b00:	str	r3, [fp, #-20]	; 0xffffffec
     b04:	ldr	r3, [fp, #-20]	; 0xffffffec
     b08:	cmp	r3, #0
     b0c:	bne	b18 <verify_string+0xec>
     b10:	mov	r3, #7
     b14:	b	b1c <verify_string+0xf0>
     b18:	mov	r3, #0
     b1c:	mov	r0, r3
     b20:	sub	sp, fp, #4
     b24:	pop	{fp, pc}

00000b28 <verify_vector>:
     b28:	push	{fp, lr}
     b2c:	add	fp, sp, #4
     b30:	sub	sp, sp, #32
     b34:	str	r0, [fp, #-24]	; 0xffffffe8
     b38:	str	r1, [fp, #-28]	; 0xffffffe4
     b3c:	str	r2, [fp, #-32]	; 0xffffffe0
     b40:	str	r3, [fp, #-36]	; 0xffffffdc
     b44:	ldrh	r3, [fp, #8]
     b48:	ldr	r2, [fp, #-36]	; 0xffffffdc
     b4c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     b50:	ldr	r0, [fp, #-28]	; 0xffffffe4
     b54:	bl	514 <check_aligned_header>
     b58:	str	r0, [fp, #-8]
     b5c:	ldr	r3, [fp, #-8]
     b60:	cmp	r3, #0
     b64:	bne	b70 <verify_vector+0x48>
     b68:	mov	r3, #16
     b6c:	b	c10 <verify_vector+0xe8>
     b70:	ldr	r2, [fp, #-32]	; 0xffffffe0
     b74:	ldr	r3, [fp, #-36]	; 0xffffffdc
     b78:	add	r3, r2, r3
     b7c:	str	r3, [fp, #-32]	; 0xffffffe0
     b80:	ldr	r1, [fp, #-32]	; 0xffffffe0
     b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b88:	bl	3ac <read_uoffset>
     b8c:	str	r0, [fp, #-12]
     b90:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b94:	add	r3, r3, #4
     b98:	str	r3, [fp, #-32]	; 0xffffffe0
     b9c:	ldr	r2, [fp, #-12]
     ba0:	ldr	r3, [fp, #12]
     ba4:	cmp	r2, r3
     ba8:	movls	r3, #1
     bac:	movhi	r3, #0
     bb0:	uxtb	r3, r3
     bb4:	str	r3, [fp, #-16]
     bb8:	ldr	r3, [fp, #-16]
     bbc:	cmp	r3, #0
     bc0:	bne	bcc <verify_vector+0xa4>
     bc4:	mov	r3, #25
     bc8:	b	c10 <verify_vector+0xe8>
     bcc:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     bd4:	sub	r2, r2, r3
     bd8:	ldr	r3, [fp, #-12]
     bdc:	ldr	r1, [fp, #4]
     be0:	mul	r3, r1, r3
     be4:	cmp	r2, r3
     be8:	movcs	r3, #1
     bec:	movcc	r3, #0
     bf0:	uxtb	r3, r3
     bf4:	str	r3, [fp, #-20]	; 0xffffffec
     bf8:	ldr	r3, [fp, #-20]	; 0xffffffec
     bfc:	cmp	r3, #0
     c00:	bne	c0c <verify_vector+0xe4>
     c04:	mov	r3, #26
     c08:	b	c10 <verify_vector+0xe8>
     c0c:	mov	r3, #0
     c10:	mov	r0, r3
     c14:	sub	sp, fp, #4
     c18:	pop	{fp, pc}

00000c1c <verify_string_vector>:
     c1c:	push	{fp, lr}
     c20:	add	fp, sp, #4
     c24:	sub	sp, sp, #40	; 0x28
     c28:	str	r0, [fp, #-16]
     c2c:	str	r1, [fp, #-20]	; 0xffffffec
     c30:	str	r2, [fp, #-24]	; 0xffffffe8
     c34:	str	r3, [fp, #-28]	; 0xffffffe4
     c38:	mvn	r3, #-1073741824	; 0xc0000000
     c3c:	str	r3, [sp, #8]
     c40:	mov	r3, #4
     c44:	str	r3, [sp, #4]
     c48:	mov	r3, #4
     c4c:	str	r3, [sp]
     c50:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c54:	ldr	r2, [fp, #-24]	; 0xffffffe8
     c58:	ldr	r1, [fp, #-20]	; 0xffffffec
     c5c:	ldr	r0, [fp, #-16]
     c60:	bl	b28 <verify_vector>
     c64:	mov	r3, r0
     c68:	cmp	r3, #0
     c6c:	beq	ca4 <verify_string_vector+0x88>
     c70:	mvn	r3, #-1073741824	; 0xc0000000
     c74:	str	r3, [sp, #8]
     c78:	mov	r3, #4
     c7c:	str	r3, [sp, #4]
     c80:	mov	r3, #4
     c84:	str	r3, [sp]
     c88:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     c90:	ldr	r1, [fp, #-20]	; 0xffffffec
     c94:	ldr	r0, [fp, #-16]
     c98:	bl	b28 <verify_vector>
     c9c:	mov	r3, r0
     ca0:	b	d5c <verify_string_vector+0x140>
     ca4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ca8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     cac:	add	r3, r2, r3
     cb0:	str	r3, [fp, #-24]	; 0xffffffe8
     cb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     cb8:	ldr	r0, [fp, #-16]
     cbc:	bl	3ac <read_uoffset>
     cc0:	str	r0, [fp, #-12]
     cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cc8:	add	r3, r3, #4
     ccc:	str	r3, [fp, #-24]	; 0xffffffe8
     cd0:	mov	r3, #0
     cd4:	str	r3, [fp, #-8]
     cd8:	b	d48 <verify_string_vector+0x12c>
     cdc:	ldr	r1, [fp, #-24]	; 0xffffffe8
     ce0:	ldr	r0, [fp, #-16]
     ce4:	bl	3ac <read_uoffset>
     ce8:	mov	r3, r0
     cec:	ldr	r2, [fp, #-24]	; 0xffffffe8
     cf0:	ldr	r1, [fp, #-20]	; 0xffffffec
     cf4:	ldr	r0, [fp, #-16]
     cf8:	bl	a2c <verify_string>
     cfc:	mov	r3, r0
     d00:	cmp	r3, #0
     d04:	beq	d30 <verify_string_vector+0x114>
     d08:	ldr	r1, [fp, #-24]	; 0xffffffe8
     d0c:	ldr	r0, [fp, #-16]
     d10:	bl	3ac <read_uoffset>
     d14:	mov	r3, r0
     d18:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d1c:	ldr	r1, [fp, #-20]	; 0xffffffec
     d20:	ldr	r0, [fp, #-16]
     d24:	bl	a2c <verify_string>
     d28:	mov	r3, r0
     d2c:	b	d5c <verify_string_vector+0x140>
     d30:	ldr	r3, [fp, #-8]
     d34:	add	r3, r3, #1
     d38:	str	r3, [fp, #-8]
     d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d40:	add	r3, r3, #4
     d44:	str	r3, [fp, #-24]	; 0xffffffe8
     d48:	ldr	r2, [fp, #-8]
     d4c:	ldr	r3, [fp, #-12]
     d50:	cmp	r2, r3
     d54:	bcc	cdc <verify_string_vector+0xc0>
     d58:	mov	r3, #0
     d5c:	mov	r0, r3
     d60:	sub	sp, fp, #4
     d64:	pop	{fp, pc}

00000d68 <verify_table>:
     d68:	push	{r4, fp, lr}
     d6c:	add	fp, sp, #8
     d70:	sub	sp, sp, #84	; 0x54
     d74:	str	r0, [fp, #-80]	; 0xffffffb0
     d78:	str	r1, [fp, #-84]	; 0xffffffac
     d7c:	str	r2, [fp, #-88]	; 0xffffffa8
     d80:	str	r3, [fp, #-92]	; 0xffffffa4
     d84:	ldr	r3, [fp, #4]
     d88:	sub	r3, r3, #1
     d8c:	str	r3, [fp, #-68]	; 0xffffffbc
     d90:	ldr	r3, [fp, #-68]	; 0xffffffbc
     d94:	str	r3, [fp, #-16]
     d98:	ldr	r3, [fp, #-16]
     d9c:	cmp	r3, #0
     da0:	bne	dac <verify_table+0x44>
     da4:	mov	r3, #3
     da8:	b	fb4 <verify_table+0x24c>
     dac:	ldr	r2, [fp, #-92]	; 0xffffffa4
     db0:	ldr	r1, [fp, #-88]	; 0xffffffa8
     db4:	ldr	r0, [fp, #-84]	; 0xffffffac
     db8:	bl	49c <check_header>
     dbc:	str	r0, [fp, #-20]	; 0xffffffec
     dc0:	ldr	r3, [fp, #-20]	; 0xffffffec
     dc4:	cmp	r3, #0
     dc8:	bne	dd4 <verify_table+0x6c>
     dcc:	mov	r3, #15
     dd0:	b	fb4 <verify_table+0x24c>
     dd4:	ldr	r2, [fp, #-88]	; 0xffffffa8
     dd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
     ddc:	add	r3, r2, r3
     de0:	str	r3, [fp, #-60]	; 0xffffffc4
     de4:	ldr	r4, [fp, #-60]	; 0xffffffc4
     de8:	ldr	r3, [fp, #-60]	; 0xffffffc4
     dec:	mov	r1, r3
     df0:	ldr	r0, [fp, #-80]	; 0xffffffb0
     df4:	bl	3ac <read_uoffset>
     df8:	mov	r3, r0
     dfc:	sub	r3, r4, r3
     e00:	str	r3, [fp, #-24]	; 0xffffffe8
     e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e08:	cmp	r3, #0
     e0c:	blt	e28 <verify_table+0xc0>
     e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e14:	and	r3, r3, #1
     e18:	cmp	r3, #0
     e1c:	bne	e28 <verify_table+0xc0>
     e20:	mov	r3, #1
     e24:	b	e2c <verify_table+0xc4>
     e28:	mov	r3, #0
     e2c:	str	r3, [fp, #-28]	; 0xffffffe4
     e30:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e34:	cmp	r3, #0
     e38:	bne	e44 <verify_table+0xdc>
     e3c:	mov	r3, #29
     e40:	b	fb4 <verify_table+0x24c>
     e44:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e48:	add	r2, r3, #2
     e4c:	ldr	r3, [fp, #-84]	; 0xffffffac
     e50:	cmp	r2, r3
     e54:	movls	r3, #1
     e58:	movhi	r3, #0
     e5c:	uxtb	r3, r3
     e60:	str	r3, [fp, #-32]	; 0xffffffe0
     e64:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e68:	cmp	r3, #0
     e6c:	bne	e78 <verify_table+0x110>
     e70:	mov	r3, #27
     e74:	b	fb4 <verify_table+0x24c>
     e78:	ldr	r1, [fp, #-24]	; 0xffffffe8
     e7c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     e80:	bl	464 <read_voffset>
     e84:	mov	r3, r0
     e88:	strh	r3, [fp, #-54]	; 0xffffffca
     e8c:	ldrh	r3, [fp, #-54]	; 0xffffffca
     e90:	mov	r2, r3
     e94:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e98:	add	r3, r2, r3
     e9c:	str	r3, [fp, #-36]	; 0xffffffdc
     ea0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ea4:	ldr	r3, [fp, #-84]	; 0xffffffac
     ea8:	cmp	r2, r3
     eac:	bhi	ec8 <verify_table+0x160>
     eb0:	ldrh	r3, [fp, #-54]	; 0xffffffca
     eb4:	and	r3, r3, #1
     eb8:	cmp	r3, #0
     ebc:	bne	ec8 <verify_table+0x160>
     ec0:	mov	r3, #1
     ec4:	b	ecc <verify_table+0x164>
     ec8:	mov	r3, #0
     ecc:	str	r3, [fp, #-40]	; 0xffffffd8
     ed0:	ldr	r3, [fp, #-40]	; 0xffffffd8
     ed4:	cmp	r3, #0
     ed8:	bne	ee4 <verify_table+0x17c>
     edc:	mov	r3, #30
     ee0:	b	fb4 <verify_table+0x24c>
     ee4:	mov	r3, #1
     ee8:	str	r3, [fp, #-44]	; 0xffffffd4
     eec:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ef0:	cmp	r3, #0
     ef4:	bne	f00 <verify_table+0x198>
     ef8:	mov	r3, #31
     efc:	b	fb4 <verify_table+0x24c>
     f00:	ldrh	r3, [fp, #-54]	; 0xffffffca
     f04:	cmp	r3, #3
     f08:	movhi	r3, #1
     f0c:	movls	r3, #0
     f10:	uxtb	r3, r3
     f14:	str	r3, [fp, #-48]	; 0xffffffd0
     f18:	ldr	r3, [fp, #-48]	; 0xffffffd0
     f1c:	cmp	r3, #0
     f20:	bne	f2c <verify_table+0x1c4>
     f24:	mov	r3, #28
     f28:	b	fb4 <verify_table+0x24c>
     f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f30:	add	r3, r3, #2
     f34:	mov	r1, r3
     f38:	ldr	r0, [fp, #-80]	; 0xffffffb0
     f3c:	bl	464 <read_voffset>
     f40:	mov	r3, r0
     f44:	strh	r3, [fp, #-56]	; 0xffffffc8
     f48:	ldr	r3, [fp, #-60]	; 0xffffffc4
     f4c:	ldr	r2, [fp, #-84]	; 0xffffffac
     f50:	sub	r3, r2, r3
     f54:	ldrh	r2, [fp, #-56]	; 0xffffffc8
     f58:	cmp	r3, r2
     f5c:	movcs	r3, #1
     f60:	movcc	r3, #0
     f64:	uxtb	r3, r3
     f68:	str	r3, [fp, #-52]	; 0xffffffcc
     f6c:	ldr	r3, [fp, #-52]	; 0xffffffcc
     f70:	cmp	r3, #0
     f74:	bne	f80 <verify_table+0x218>
     f78:	mov	r3, #20
     f7c:	b	fb4 <verify_table+0x24c>
     f80:	ldr	r2, [fp, #-80]	; 0xffffffb0
     f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f88:	add	r3, r2, r3
     f8c:	str	r3, [fp, #-64]	; 0xffffffc0
     f90:	ldr	r3, [fp, #-80]	; 0xffffffb0
     f94:	str	r3, [fp, #-76]	; 0xffffffb4
     f98:	ldr	r3, [fp, #-84]	; 0xffffffac
     f9c:	str	r3, [fp, #-72]	; 0xffffffb8
     fa0:	sub	r2, fp, #76	; 0x4c
     fa4:	ldr	r3, [fp, #8]
     fa8:	mov	r0, r2
     fac:	blx	r3
     fb0:	mov	r3, r0
     fb4:	mov	r0, r3
     fb8:	sub	sp, fp, #8
     fbc:	pop	{r4, fp, pc}

00000fc0 <verify_table_vector>:
     fc0:	push	{fp, lr}
     fc4:	add	fp, sp, #4
     fc8:	sub	sp, sp, #48	; 0x30
     fcc:	str	r0, [fp, #-24]	; 0xffffffe8
     fd0:	str	r1, [fp, #-28]	; 0xffffffe4
     fd4:	str	r2, [fp, #-32]	; 0xffffffe0
     fd8:	str	r3, [fp, #-36]	; 0xffffffdc
     fdc:	ldr	r3, [fp, #4]
     fe0:	sub	r2, r3, #1
     fe4:	str	r2, [fp, #4]
     fe8:	cmp	r3, #0
     fec:	movgt	r3, #1
     ff0:	movle	r3, #0
     ff4:	uxtb	r3, r3
     ff8:	str	r3, [fp, #-12]
     ffc:	ldr	r3, [fp, #-12]
    1000:	cmp	r3, #0
    1004:	bne	1010 <verify_table_vector+0x50>
    1008:	mov	r3, #3
    100c:	b	115c <verify_table_vector+0x19c>
    1010:	mvn	r3, #-1073741824	; 0xc0000000
    1014:	str	r3, [sp, #8]
    1018:	mov	r3, #4
    101c:	str	r3, [sp, #4]
    1020:	mov	r3, #4
    1024:	str	r3, [sp]
    1028:	ldr	r3, [fp, #-36]	; 0xffffffdc
    102c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1030:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1034:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1038:	bl	b28 <verify_vector>
    103c:	mov	r3, r0
    1040:	cmp	r3, #0
    1044:	beq	107c <verify_table_vector+0xbc>
    1048:	mvn	r3, #-1073741824	; 0xc0000000
    104c:	str	r3, [sp, #8]
    1050:	mov	r3, #4
    1054:	str	r3, [sp, #4]
    1058:	mov	r3, #4
    105c:	str	r3, [sp]
    1060:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1064:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1068:	ldr	r1, [fp, #-28]	; 0xffffffe4
    106c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1070:	bl	b28 <verify_vector>
    1074:	mov	r3, r0
    1078:	b	115c <verify_table_vector+0x19c>
    107c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1080:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1084:	add	r3, r2, r3
    1088:	str	r3, [fp, #-32]	; 0xffffffe0
    108c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1090:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1094:	bl	3ac <read_uoffset>
    1098:	str	r0, [fp, #-16]
    109c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    10a0:	add	r3, r3, #4
    10a4:	str	r3, [fp, #-32]	; 0xffffffe0
    10a8:	mov	r3, #0
    10ac:	str	r3, [fp, #-8]
    10b0:	b	1148 <verify_table_vector+0x188>
    10b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    10b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10bc:	bl	3ac <read_uoffset>
    10c0:	mov	r2, r0
    10c4:	ldr	r3, [fp, #8]
    10c8:	str	r3, [sp, #4]
    10cc:	ldr	r3, [fp, #4]
    10d0:	str	r3, [sp]
    10d4:	mov	r3, r2
    10d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    10dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    10e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10e4:	bl	d68 <verify_table>
    10e8:	mov	r3, r0
    10ec:	cmp	r3, #0
    10f0:	beq	1130 <verify_table_vector+0x170>
    10f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    10f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10fc:	bl	3ac <read_uoffset>
    1100:	mov	r2, r0
    1104:	ldr	r3, [fp, #8]
    1108:	str	r3, [sp, #4]
    110c:	ldr	r3, [fp, #4]
    1110:	str	r3, [sp]
    1114:	mov	r3, r2
    1118:	ldr	r2, [fp, #-32]	; 0xffffffe0
    111c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1120:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1124:	bl	d68 <verify_table>
    1128:	mov	r3, r0
    112c:	b	115c <verify_table_vector+0x19c>
    1130:	ldr	r3, [fp, #-8]
    1134:	add	r3, r3, #1
    1138:	str	r3, [fp, #-8]
    113c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1140:	add	r3, r3, #4
    1144:	str	r3, [fp, #-32]	; 0xffffffe0
    1148:	ldr	r2, [fp, #-8]
    114c:	ldr	r3, [fp, #-16]
    1150:	cmp	r2, r3
    1154:	bcc	10b4 <verify_table_vector+0xf4>
    1158:	mov	r3, #0
    115c:	mov	r0, r3
    1160:	sub	sp, fp, #4
    1164:	pop	{fp, pc}

00001168 <verify_union_vector>:
    1168:	push	{fp, lr}
    116c:	add	fp, sp, #4
    1170:	sub	sp, sp, #88	; 0x58
    1174:	str	r0, [fp, #-64]	; 0xffffffc0
    1178:	str	r1, [fp, #-68]	; 0xffffffbc
    117c:	str	r2, [fp, #-72]	; 0xffffffb8
    1180:	str	r3, [fp, #-76]	; 0xffffffb4
    1184:	ldr	r3, [fp, #12]
    1188:	sub	r2, r3, #1
    118c:	str	r2, [fp, #12]
    1190:	cmp	r3, #0
    1194:	movgt	r3, #1
    1198:	movle	r3, #0
    119c:	uxtb	r3, r3
    11a0:	str	r3, [fp, #-12]
    11a4:	ldr	r3, [fp, #-12]
    11a8:	cmp	r3, #0
    11ac:	bne	11b8 <verify_union_vector+0x50>
    11b0:	mov	r3, #3
    11b4:	b	13b4 <verify_union_vector+0x24c>
    11b8:	mvn	r3, #-1073741824	; 0xc0000000
    11bc:	str	r3, [sp, #8]
    11c0:	mov	r3, #4
    11c4:	str	r3, [sp, #4]
    11c8:	mov	r3, #4
    11cc:	str	r3, [sp]
    11d0:	ldr	r3, [fp, #-76]	; 0xffffffb4
    11d4:	ldr	r2, [fp, #-72]	; 0xffffffb8
    11d8:	ldr	r1, [fp, #-68]	; 0xffffffbc
    11dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
    11e0:	bl	b28 <verify_vector>
    11e4:	mov	r3, r0
    11e8:	cmp	r3, #0
    11ec:	beq	1224 <verify_union_vector+0xbc>
    11f0:	mvn	r3, #-1073741824	; 0xc0000000
    11f4:	str	r3, [sp, #8]
    11f8:	mov	r3, #4
    11fc:	str	r3, [sp, #4]
    1200:	mov	r3, #4
    1204:	str	r3, [sp]
    1208:	ldr	r3, [fp, #-76]	; 0xffffffb4
    120c:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1210:	ldr	r1, [fp, #-68]	; 0xffffffbc
    1214:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1218:	bl	b28 <verify_vector>
    121c:	mov	r3, r0
    1220:	b	13b4 <verify_union_vector+0x24c>
    1224:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1228:	ldr	r3, [fp, #-76]	; 0xffffffb4
    122c:	add	r3, r2, r3
    1230:	str	r3, [fp, #-72]	; 0xffffffb8
    1234:	ldr	r1, [fp, #-72]	; 0xffffffb8
    1238:	ldr	r0, [fp, #-64]	; 0xffffffc0
    123c:	bl	3ac <read_uoffset>
    1240:	str	r0, [fp, #-16]
    1244:	ldr	r2, [fp, #-16]
    1248:	ldr	r3, [fp, #4]
    124c:	cmp	r2, r3
    1250:	moveq	r3, #1
    1254:	movne	r3, #0
    1258:	uxtb	r3, r3
    125c:	str	r3, [fp, #-20]	; 0xffffffec
    1260:	ldr	r3, [fp, #-20]	; 0xffffffec
    1264:	cmp	r3, #0
    1268:	bne	1274 <verify_union_vector+0x10c>
    126c:	mov	r3, #34	; 0x22
    1270:	b	13b4 <verify_union_vector+0x24c>
    1274:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1278:	add	r3, r3, #4
    127c:	str	r3, [fp, #-72]	; 0xffffffb8
    1280:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1284:	str	r3, [fp, #-56]	; 0xffffffc8
    1288:	ldr	r3, [fp, #-68]	; 0xffffffbc
    128c:	str	r3, [fp, #-52]	; 0xffffffcc
    1290:	ldr	r3, [fp, #12]
    1294:	str	r3, [fp, #-48]	; 0xffffffd0
    1298:	mov	r3, #0
    129c:	str	r3, [fp, #-8]
    12a0:	b	13a0 <verify_union_vector+0x238>
    12a4:	ldr	r1, [fp, #-72]	; 0xffffffb8
    12a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
    12ac:	bl	3ac <read_uoffset>
    12b0:	str	r0, [fp, #-24]	; 0xffffffe8
    12b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12b8:	cmp	r3, #0
    12bc:	bne	12f8 <verify_union_vector+0x190>
    12c0:	ldr	r2, [fp, #8]
    12c4:	ldr	r3, [fp, #-8]
    12c8:	add	r3, r2, r3
    12cc:	ldrb	r3, [r3]
    12d0:	cmp	r3, #0
    12d4:	moveq	r3, #1
    12d8:	movne	r3, #0
    12dc:	uxtb	r3, r3
    12e0:	str	r3, [fp, #-32]	; 0xffffffe0
    12e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    12e8:	cmp	r3, #0
    12ec:	bne	1388 <verify_union_vector+0x220>
    12f0:	mov	r3, #32
    12f4:	b	13b4 <verify_union_vector+0x24c>
    12f8:	ldr	r2, [fp, #8]
    12fc:	ldr	r3, [fp, #-8]
    1300:	add	r3, r2, r3
    1304:	ldrb	r3, [r3]
    1308:	cmp	r3, #0
    130c:	movne	r3, #1
    1310:	moveq	r3, #0
    1314:	uxtb	r3, r3
    1318:	str	r3, [fp, #-28]	; 0xffffffe4
    131c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1320:	cmp	r3, #0
    1324:	bne	1330 <verify_union_vector+0x1c8>
    1328:	mov	r3, #33	; 0x21
    132c:	b	13b4 <verify_union_vector+0x24c>
    1330:	ldr	r2, [fp, #8]
    1334:	ldr	r3, [fp, #-8]
    1338:	add	r3, r2, r3
    133c:	ldrb	r3, [r3]
    1340:	strb	r3, [fp, #-44]	; 0xffffffd4
    1344:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1348:	str	r3, [fp, #-40]	; 0xffffffd8
    134c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1350:	str	r3, [fp, #-36]	; 0xffffffdc
    1354:	sub	r2, fp, #56	; 0x38
    1358:	ldr	r3, [fp, #16]
    135c:	mov	r0, r2
    1360:	blx	r3
    1364:	mov	r3, r0
    1368:	cmp	r3, #0
    136c:	beq	1388 <verify_union_vector+0x220>
    1370:	sub	r2, fp, #56	; 0x38
    1374:	ldr	r3, [fp, #16]
    1378:	mov	r0, r2
    137c:	blx	r3
    1380:	mov	r3, r0
    1384:	b	13b4 <verify_union_vector+0x24c>
    1388:	ldr	r3, [fp, #-8]
    138c:	add	r3, r3, #1
    1390:	str	r3, [fp, #-8]
    1394:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1398:	add	r3, r3, #4
    139c:	str	r3, [fp, #-72]	; 0xffffffb8
    13a0:	ldr	r2, [fp, #-8]
    13a4:	ldr	r3, [fp, #-16]
    13a8:	cmp	r2, r3
    13ac:	bcc	12a4 <verify_union_vector+0x13c>
    13b0:	mov	r3, #0
    13b4:	mov	r0, r3
    13b8:	sub	sp, fp, #4
    13bc:	pop	{fp, pc}

000013c0 <flatcc_verify_field>:
    13c0:	push	{fp, lr}
    13c4:	add	fp, sp, #4
    13c8:	sub	sp, sp, #24
    13cc:	str	r0, [fp, #-8]
    13d0:	str	r2, [fp, #-16]
    13d4:	strh	r1, [fp, #-10]
    13d8:	strh	r3, [fp, #-12]
    13dc:	ldrh	r1, [fp, #-10]
    13e0:	ldrh	r3, [fp, #-12]
    13e4:	str	r3, [sp]
    13e8:	ldr	r3, [fp, #-16]
    13ec:	mov	r2, #0
    13f0:	ldr	r0, [fp, #-8]
    13f4:	bl	7a8 <verify_field>
    13f8:	mov	r3, r0
    13fc:	cmp	r3, #0
    1400:	beq	1428 <flatcc_verify_field+0x68>
    1404:	ldrh	r1, [fp, #-10]
    1408:	ldrh	r3, [fp, #-12]
    140c:	str	r3, [sp]
    1410:	ldr	r3, [fp, #-16]
    1414:	mov	r2, #0
    1418:	ldr	r0, [fp, #-8]
    141c:	bl	7a8 <verify_field>
    1420:	mov	r3, r0
    1424:	b	142c <flatcc_verify_field+0x6c>
    1428:	mov	r3, #0
    142c:	mov	r0, r3
    1430:	sub	sp, fp, #4
    1434:	pop	{fp, pc}

00001438 <flatcc_verify_string_field>:
    1438:	push	{r4, r5, r6, fp, lr}
    143c:	add	fp, sp, #16
    1440:	sub	sp, sp, #28
    1444:	str	r0, [fp, #-32]	; 0xffffffe0
    1448:	mov	r3, r1
    144c:	str	r2, [fp, #-40]	; 0xffffffd8
    1450:	strh	r3, [fp, #-34]	; 0xffffffde
    1454:	sub	r3, fp, #28
    1458:	ldrh	r1, [fp, #-34]	; 0xffffffde
    145c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1460:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1464:	bl	8fc <get_offset_field>
    1468:	str	r0, [fp, #-24]	; 0xffffffe8
    146c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1470:	cmp	r3, #0
    1474:	bne	1484 <flatcc_verify_string_field+0x4c>
    1478:	ldr	r3, [fp, #-28]	; 0xffffffe4
    147c:	cmp	r3, #0
    1480:	bne	148c <flatcc_verify_string_field+0x54>
    1484:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1488:	b	14d0 <flatcc_verify_string_field+0x98>
    148c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1490:	ldr	r4, [r3]
    1494:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1498:	ldr	r5, [r3, #4]
    149c:	ldr	r6, [fp, #-28]	; 0xffffffe4
    14a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14a4:	ldr	r3, [r3]
    14a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    14ac:	mov	r1, r2
    14b0:	mov	r0, r3
    14b4:	bl	3ac <read_uoffset>
    14b8:	mov	r3, r0
    14bc:	mov	r2, r6
    14c0:	mov	r1, r5
    14c4:	mov	r0, r4
    14c8:	bl	a2c <verify_string>
    14cc:	mov	r3, r0
    14d0:	mov	r0, r3
    14d4:	sub	sp, fp, #16
    14d8:	pop	{r4, r5, r6, fp, pc}

000014dc <flatcc_verify_vector_field>:
    14dc:	push	{r4, r5, r6, fp, lr}
    14e0:	add	fp, sp, #16
    14e4:	sub	sp, sp, #44	; 0x2c
    14e8:	str	r0, [fp, #-32]	; 0xffffffe0
    14ec:	str	r2, [fp, #-40]	; 0xffffffd8
    14f0:	str	r3, [fp, #-44]	; 0xffffffd4
    14f4:	strh	r1, [fp, #-34]	; 0xffffffde
    14f8:	sub	r3, fp, #28
    14fc:	ldrh	r1, [fp, #-34]	; 0xffffffde
    1500:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1504:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1508:	bl	8fc <get_offset_field>
    150c:	str	r0, [fp, #-24]	; 0xffffffe8
    1510:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1514:	cmp	r3, #0
    1518:	bne	1528 <flatcc_verify_vector_field+0x4c>
    151c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1520:	cmp	r3, #0
    1524:	bne	1530 <flatcc_verify_vector_field+0x54>
    1528:	ldr	r3, [fp, #-24]	; 0xffffffe8
    152c:	b	1590 <flatcc_verify_vector_field+0xb4>
    1530:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1534:	ldr	r4, [r3]
    1538:	ldr	r3, [fp, #-32]	; 0xffffffe0
    153c:	ldr	r5, [r3, #4]
    1540:	ldr	r6, [fp, #-28]	; 0xffffffe4
    1544:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1548:	ldr	r3, [r3]
    154c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1550:	mov	r1, r2
    1554:	mov	r0, r3
    1558:	bl	3ac <read_uoffset>
    155c:	mov	r2, r0
    1560:	ldr	r3, [fp, #8]
    1564:	str	r3, [sp, #8]
    1568:	ldrh	r3, [fp, #4]
    156c:	str	r3, [sp, #4]
    1570:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1574:	str	r3, [sp]
    1578:	mov	r3, r2
    157c:	mov	r2, r6
    1580:	mov	r1, r5
    1584:	mov	r0, r4
    1588:	bl	b28 <verify_vector>
    158c:	mov	r3, r0
    1590:	mov	r0, r3
    1594:	sub	sp, fp, #16
    1598:	pop	{r4, r5, r6, fp, pc}

0000159c <flatcc_verify_string_vector_field>:
    159c:	push	{r4, r5, r6, fp, lr}
    15a0:	add	fp, sp, #16
    15a4:	sub	sp, sp, #28
    15a8:	str	r0, [fp, #-32]	; 0xffffffe0
    15ac:	mov	r3, r1
    15b0:	str	r2, [fp, #-40]	; 0xffffffd8
    15b4:	strh	r3, [fp, #-34]	; 0xffffffde
    15b8:	sub	r3, fp, #28
    15bc:	ldrh	r1, [fp, #-34]	; 0xffffffde
    15c0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    15c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    15c8:	bl	8fc <get_offset_field>
    15cc:	str	r0, [fp, #-24]	; 0xffffffe8
    15d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15d4:	cmp	r3, #0
    15d8:	bne	15e8 <flatcc_verify_string_vector_field+0x4c>
    15dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    15e0:	cmp	r3, #0
    15e4:	bne	15f0 <flatcc_verify_string_vector_field+0x54>
    15e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15ec:	b	1634 <flatcc_verify_string_vector_field+0x98>
    15f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    15f4:	ldr	r4, [r3]
    15f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    15fc:	ldr	r5, [r3, #4]
    1600:	ldr	r6, [fp, #-28]	; 0xffffffe4
    1604:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1608:	ldr	r3, [r3]
    160c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1610:	mov	r1, r2
    1614:	mov	r0, r3
    1618:	bl	3ac <read_uoffset>
    161c:	mov	r3, r0
    1620:	mov	r2, r6
    1624:	mov	r1, r5
    1628:	mov	r0, r4
    162c:	bl	c1c <verify_string_vector>
    1630:	mov	r3, r0
    1634:	mov	r0, r3
    1638:	sub	sp, fp, #16
    163c:	pop	{r4, r5, r6, fp, pc}

00001640 <flatcc_verify_table_field>:
    1640:	push	{r4, r5, r6, fp, lr}
    1644:	add	fp, sp, #16
    1648:	sub	sp, sp, #36	; 0x24
    164c:	str	r0, [fp, #-32]	; 0xffffffe0
    1650:	str	r2, [fp, #-40]	; 0xffffffd8
    1654:	str	r3, [fp, #-44]	; 0xffffffd4
    1658:	strh	r1, [fp, #-34]	; 0xffffffde
    165c:	sub	r3, fp, #28
    1660:	ldrh	r1, [fp, #-34]	; 0xffffffde
    1664:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1668:	ldr	r0, [fp, #-32]	; 0xffffffe0
    166c:	bl	8fc <get_offset_field>
    1670:	str	r0, [fp, #-24]	; 0xffffffe8
    1674:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1678:	cmp	r3, #0
    167c:	bne	168c <flatcc_verify_table_field+0x4c>
    1680:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1684:	cmp	r3, #0
    1688:	bne	1694 <flatcc_verify_table_field+0x54>
    168c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1690:	b	16f0 <flatcc_verify_table_field+0xb0>
    1694:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1698:	ldr	r4, [r3]
    169c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    16a0:	ldr	r5, [r3, #4]
    16a4:	ldr	r6, [fp, #-28]	; 0xffffffe4
    16a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    16ac:	ldr	r3, [r3]
    16b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    16b4:	mov	r1, r2
    16b8:	mov	r0, r3
    16bc:	bl	3ac <read_uoffset>
    16c0:	mov	r1, r0
    16c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    16c8:	ldr	r3, [r3, #8]
    16cc:	ldr	r2, [fp, #-44]	; 0xffffffd4
    16d0:	str	r2, [sp, #4]
    16d4:	str	r3, [sp]
    16d8:	mov	r3, r1
    16dc:	mov	r2, r6
    16e0:	mov	r1, r5
    16e4:	mov	r0, r4
    16e8:	bl	d68 <verify_table>
    16ec:	mov	r3, r0
    16f0:	mov	r0, r3
    16f4:	sub	sp, fp, #16
    16f8:	pop	{r4, r5, r6, fp, pc}

000016fc <flatcc_verify_table_vector_field>:
    16fc:	push	{r4, r5, r6, fp, lr}
    1700:	add	fp, sp, #16
    1704:	sub	sp, sp, #36	; 0x24
    1708:	str	r0, [fp, #-32]	; 0xffffffe0
    170c:	str	r2, [fp, #-40]	; 0xffffffd8
    1710:	str	r3, [fp, #-44]	; 0xffffffd4
    1714:	strh	r1, [fp, #-34]	; 0xffffffde
    1718:	sub	r3, fp, #28
    171c:	ldrh	r1, [fp, #-34]	; 0xffffffde
    1720:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1724:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1728:	bl	8fc <get_offset_field>
    172c:	str	r0, [fp, #-24]	; 0xffffffe8
    1730:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1734:	cmp	r3, #0
    1738:	bne	1748 <flatcc_verify_table_vector_field+0x4c>
    173c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1740:	cmp	r3, #0
    1744:	bne	1750 <flatcc_verify_table_vector_field+0x54>
    1748:	ldr	r3, [fp, #-24]	; 0xffffffe8
    174c:	b	17ac <flatcc_verify_table_vector_field+0xb0>
    1750:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1754:	ldr	r4, [r3]
    1758:	ldr	r3, [fp, #-32]	; 0xffffffe0
    175c:	ldr	r5, [r3, #4]
    1760:	ldr	r6, [fp, #-28]	; 0xffffffe4
    1764:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1768:	ldr	r3, [r3]
    176c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1770:	mov	r1, r2
    1774:	mov	r0, r3
    1778:	bl	3ac <read_uoffset>
    177c:	mov	r1, r0
    1780:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1784:	ldr	r3, [r3, #8]
    1788:	ldr	r2, [fp, #-44]	; 0xffffffd4
    178c:	str	r2, [sp, #4]
    1790:	str	r3, [sp]
    1794:	mov	r3, r1
    1798:	mov	r2, r6
    179c:	mov	r1, r5
    17a0:	mov	r0, r4
    17a4:	bl	fc0 <verify_table_vector>
    17a8:	mov	r3, r0
    17ac:	mov	r0, r3
    17b0:	sub	sp, fp, #16
    17b4:	pop	{r4, r5, r6, fp, pc}

000017b8 <flatcc_verify_union_table>:
    17b8:	push	{fp, lr}
    17bc:	add	fp, sp, #4
    17c0:	sub	sp, sp, #16
    17c4:	str	r0, [fp, #-8]
    17c8:	str	r1, [fp, #-12]
    17cc:	ldr	r3, [fp, #-8]
    17d0:	ldr	r0, [r3]
    17d4:	ldr	r3, [fp, #-8]
    17d8:	ldr	r1, [r3, #4]
    17dc:	ldr	r3, [fp, #-8]
    17e0:	ldr	ip, [r3, #16]
    17e4:	ldr	r3, [fp, #-8]
    17e8:	ldr	lr, [r3, #20]
    17ec:	ldr	r3, [fp, #-8]
    17f0:	ldr	r3, [r3, #8]
    17f4:	ldr	r2, [fp, #-12]
    17f8:	str	r2, [sp, #4]
    17fc:	str	r3, [sp]
    1800:	mov	r3, lr
    1804:	mov	r2, ip
    1808:	bl	d68 <verify_table>
    180c:	mov	r3, r0
    1810:	mov	r0, r3
    1814:	sub	sp, fp, #4
    1818:	pop	{fp, pc}

0000181c <flatcc_verify_union_struct>:
    181c:	push	{fp, lr}
    1820:	add	fp, sp, #4
    1824:	sub	sp, sp, #24
    1828:	str	r0, [fp, #-8]
    182c:	str	r1, [fp, #-12]
    1830:	mov	r3, r2
    1834:	strh	r3, [fp, #-14]
    1838:	ldr	r3, [fp, #-8]
    183c:	ldr	r0, [r3, #4]
    1840:	ldr	r3, [fp, #-8]
    1844:	ldr	r1, [r3, #16]
    1848:	ldr	r3, [fp, #-8]
    184c:	ldr	r2, [r3, #20]
    1850:	ldrh	r3, [fp, #-14]
    1854:	str	r3, [sp]
    1858:	ldr	r3, [fp, #-12]
    185c:	bl	5b4 <verify_struct>
    1860:	mov	r3, r0
    1864:	mov	r0, r3
    1868:	sub	sp, fp, #4
    186c:	pop	{fp, pc}

00001870 <flatcc_verify_union_string>:
    1870:	push	{fp, lr}
    1874:	add	fp, sp, #4
    1878:	sub	sp, sp, #8
    187c:	str	r0, [fp, #-8]
    1880:	ldr	r3, [fp, #-8]
    1884:	ldr	r0, [r3]
    1888:	ldr	r3, [fp, #-8]
    188c:	ldr	r1, [r3, #4]
    1890:	ldr	r3, [fp, #-8]
    1894:	ldr	r2, [r3, #16]
    1898:	ldr	r3, [fp, #-8]
    189c:	ldr	r3, [r3, #20]
    18a0:	bl	a2c <verify_string>
    18a4:	mov	r3, r0
    18a8:	mov	r0, r3
    18ac:	sub	sp, fp, #4
    18b0:	pop	{fp, pc}

000018b4 <flatcc_verify_buffer_header>:
    18b4:	push	{fp, lr}
    18b8:	add	fp, sp, #4
    18bc:	sub	sp, sp, #40	; 0x28
    18c0:	str	r0, [fp, #-32]	; 0xffffffe0
    18c4:	str	r1, [fp, #-36]	; 0xffffffdc
    18c8:	str	r2, [fp, #-40]	; 0xffffffd8
    18cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    18d0:	and	r3, r3, #3
    18d4:	cmp	r3, #0
    18d8:	moveq	r3, #1
    18dc:	movne	r3, #0
    18e0:	uxtb	r3, r3
    18e4:	str	r3, [fp, #-8]
    18e8:	ldr	r3, [fp, #-8]
    18ec:	cmp	r3, #0
    18f0:	bne	18fc <flatcc_verify_buffer_header+0x48>
    18f4:	mov	r3, #5
    18f8:	b	19c0 <flatcc_verify_buffer_header+0x10c>
    18fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1900:	cmn	r3, #9
    1904:	movls	r3, #1
    1908:	movhi	r3, #0
    190c:	uxtb	r3, r3
    1910:	str	r3, [fp, #-12]
    1914:	ldr	r3, [fp, #-12]
    1918:	cmp	r3, #0
    191c:	bne	1928 <flatcc_verify_buffer_header+0x74>
    1920:	mov	r3, #6
    1924:	b	19c0 <flatcc_verify_buffer_header+0x10c>
    1928:	ldr	r3, [fp, #-36]	; 0xffffffdc
    192c:	cmp	r3, #7
    1930:	movhi	r3, #1
    1934:	movls	r3, #0
    1938:	uxtb	r3, r3
    193c:	str	r3, [fp, #-16]
    1940:	ldr	r3, [fp, #-16]
    1944:	cmp	r3, #0
    1948:	bne	1954 <flatcc_verify_buffer_header+0xa0>
    194c:	mov	r3, #1
    1950:	b	19c0 <flatcc_verify_buffer_header+0x10c>
    1954:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1958:	cmp	r3, #0
    195c:	beq	19bc <flatcc_verify_buffer_header+0x108>
    1960:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1964:	bl	3e4 <read_thash_identifier>
    1968:	str	r0, [fp, #-20]	; 0xffffffec
    196c:	mov	r1, #4
    1970:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1974:	bl	42c <read_thash>
    1978:	str	r0, [fp, #-24]	; 0xffffffe8
    197c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1980:	cmp	r3, #0
    1984:	beq	1998 <flatcc_verify_buffer_header+0xe4>
    1988:	ldr	r2, [fp, #-24]	; 0xffffffe8
    198c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1990:	cmp	r2, r3
    1994:	bne	19a0 <flatcc_verify_buffer_header+0xec>
    1998:	mov	r3, #1
    199c:	b	19a4 <flatcc_verify_buffer_header+0xf0>
    19a0:	mov	r3, #0
    19a4:	str	r3, [fp, #-28]	; 0xffffffe4
    19a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    19ac:	cmp	r3, #0
    19b0:	bne	19bc <flatcc_verify_buffer_header+0x108>
    19b4:	mov	r3, #2
    19b8:	b	19c0 <flatcc_verify_buffer_header+0x10c>
    19bc:	mov	r3, #0
    19c0:	mov	r0, r3
    19c4:	sub	sp, fp, #4
    19c8:	pop	{fp, pc}

000019cc <flatcc_verify_typed_buffer_header>:
    19cc:	push	{fp, lr}
    19d0:	add	fp, sp, #4
    19d4:	sub	sp, sp, #40	; 0x28
    19d8:	str	r0, [fp, #-32]	; 0xffffffe0
    19dc:	str	r1, [fp, #-36]	; 0xffffffdc
    19e0:	str	r2, [fp, #-40]	; 0xffffffd8
    19e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    19e8:	and	r3, r3, #3
    19ec:	cmp	r3, #0
    19f0:	moveq	r3, #1
    19f4:	movne	r3, #0
    19f8:	uxtb	r3, r3
    19fc:	str	r3, [fp, #-8]
    1a00:	ldr	r3, [fp, #-8]
    1a04:	cmp	r3, #0
    1a08:	bne	1a14 <flatcc_verify_typed_buffer_header+0x48>
    1a0c:	mov	r3, #5
    1a10:	b	1ad4 <flatcc_verify_typed_buffer_header+0x108>
    1a14:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1a18:	cmn	r3, #9
    1a1c:	movls	r3, #1
    1a20:	movhi	r3, #0
    1a24:	uxtb	r3, r3
    1a28:	str	r3, [fp, #-12]
    1a2c:	ldr	r3, [fp, #-12]
    1a30:	cmp	r3, #0
    1a34:	bne	1a40 <flatcc_verify_typed_buffer_header+0x74>
    1a38:	mov	r3, #6
    1a3c:	b	1ad4 <flatcc_verify_typed_buffer_header+0x108>
    1a40:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1a44:	cmp	r3, #7
    1a48:	movhi	r3, #1
    1a4c:	movls	r3, #0
    1a50:	uxtb	r3, r3
    1a54:	str	r3, [fp, #-16]
    1a58:	ldr	r3, [fp, #-16]
    1a5c:	cmp	r3, #0
    1a60:	bne	1a6c <flatcc_verify_typed_buffer_header+0xa0>
    1a64:	mov	r3, #1
    1a68:	b	1ad4 <flatcc_verify_typed_buffer_header+0x108>
    1a6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1a70:	cmp	r3, #0
    1a74:	beq	1ad0 <flatcc_verify_typed_buffer_header+0x104>
    1a78:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1a7c:	str	r3, [fp, #-20]	; 0xffffffec
    1a80:	mov	r1, #4
    1a84:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1a88:	bl	42c <read_thash>
    1a8c:	str	r0, [fp, #-24]	; 0xffffffe8
    1a90:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a94:	cmp	r3, #0
    1a98:	beq	1aac <flatcc_verify_typed_buffer_header+0xe0>
    1a9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1aa0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1aa4:	cmp	r2, r3
    1aa8:	bne	1ab4 <flatcc_verify_typed_buffer_header+0xe8>
    1aac:	mov	r3, #1
    1ab0:	b	1ab8 <flatcc_verify_typed_buffer_header+0xec>
    1ab4:	mov	r3, #0
    1ab8:	str	r3, [fp, #-28]	; 0xffffffe4
    1abc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1ac0:	cmp	r3, #0
    1ac4:	bne	1ad0 <flatcc_verify_typed_buffer_header+0x104>
    1ac8:	mov	r3, #2
    1acc:	b	1ad4 <flatcc_verify_typed_buffer_header+0x108>
    1ad0:	mov	r3, #0
    1ad4:	mov	r0, r3
    1ad8:	sub	sp, fp, #4
    1adc:	pop	{fp, pc}

00001ae0 <flatcc_verify_struct_as_root>:
    1ae0:	push	{fp, lr}
    1ae4:	add	fp, sp, #4
    1ae8:	sub	sp, sp, #24
    1aec:	str	r0, [fp, #-8]
    1af0:	str	r1, [fp, #-12]
    1af4:	str	r2, [fp, #-16]
    1af8:	str	r3, [fp, #-20]	; 0xffffffec
    1afc:	ldr	r2, [fp, #-16]
    1b00:	ldr	r1, [fp, #-12]
    1b04:	ldr	r0, [fp, #-8]
    1b08:	bl	18b4 <flatcc_verify_buffer_header>
    1b0c:	mov	r3, r0
    1b10:	cmp	r3, #0
    1b14:	beq	1b30 <flatcc_verify_struct_as_root+0x50>
    1b18:	ldr	r2, [fp, #-16]
    1b1c:	ldr	r1, [fp, #-12]
    1b20:	ldr	r0, [fp, #-8]
    1b24:	bl	18b4 <flatcc_verify_buffer_header>
    1b28:	mov	r3, r0
    1b2c:	b	1b5c <flatcc_verify_struct_as_root+0x7c>
    1b30:	mov	r1, #0
    1b34:	ldr	r0, [fp, #-8]
    1b38:	bl	3ac <read_uoffset>
    1b3c:	mov	r2, r0
    1b40:	ldrh	r3, [fp, #4]
    1b44:	str	r3, [sp]
    1b48:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b4c:	mov	r1, #0
    1b50:	ldr	r0, [fp, #-12]
    1b54:	bl	5b4 <verify_struct>
    1b58:	mov	r3, r0
    1b5c:	mov	r0, r3
    1b60:	sub	sp, fp, #4
    1b64:	pop	{fp, pc}

00001b68 <flatcc_verify_struct_as_typed_root>:
    1b68:	push	{fp, lr}
    1b6c:	add	fp, sp, #4
    1b70:	sub	sp, sp, #24
    1b74:	str	r0, [fp, #-8]
    1b78:	str	r1, [fp, #-12]
    1b7c:	str	r2, [fp, #-16]
    1b80:	str	r3, [fp, #-20]	; 0xffffffec
    1b84:	ldr	r2, [fp, #-16]
    1b88:	ldr	r1, [fp, #-12]
    1b8c:	ldr	r0, [fp, #-8]
    1b90:	bl	19cc <flatcc_verify_typed_buffer_header>
    1b94:	mov	r3, r0
    1b98:	cmp	r3, #0
    1b9c:	beq	1bb8 <flatcc_verify_struct_as_typed_root+0x50>
    1ba0:	ldr	r2, [fp, #-16]
    1ba4:	ldr	r1, [fp, #-12]
    1ba8:	ldr	r0, [fp, #-8]
    1bac:	bl	19cc <flatcc_verify_typed_buffer_header>
    1bb0:	mov	r3, r0
    1bb4:	b	1be4 <flatcc_verify_struct_as_typed_root+0x7c>
    1bb8:	mov	r1, #0
    1bbc:	ldr	r0, [fp, #-8]
    1bc0:	bl	3ac <read_uoffset>
    1bc4:	mov	r2, r0
    1bc8:	ldrh	r3, [fp, #4]
    1bcc:	str	r3, [sp]
    1bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1bd4:	mov	r1, #0
    1bd8:	ldr	r0, [fp, #-12]
    1bdc:	bl	5b4 <verify_struct>
    1be0:	mov	r3, r0
    1be4:	mov	r0, r3
    1be8:	sub	sp, fp, #4
    1bec:	pop	{fp, pc}

00001bf0 <flatcc_verify_table_as_root>:
    1bf0:	push	{fp, lr}
    1bf4:	add	fp, sp, #4
    1bf8:	sub	sp, sp, #24
    1bfc:	str	r0, [fp, #-8]
    1c00:	str	r1, [fp, #-12]
    1c04:	str	r2, [fp, #-16]
    1c08:	str	r3, [fp, #-20]	; 0xffffffec
    1c0c:	ldr	r2, [fp, #-16]
    1c10:	ldr	r1, [fp, #-12]
    1c14:	ldr	r0, [fp, #-8]
    1c18:	bl	18b4 <flatcc_verify_buffer_header>
    1c1c:	mov	r3, r0
    1c20:	cmp	r3, #0
    1c24:	beq	1c40 <flatcc_verify_table_as_root+0x50>
    1c28:	ldr	r2, [fp, #-16]
    1c2c:	ldr	r1, [fp, #-12]
    1c30:	ldr	r0, [fp, #-8]
    1c34:	bl	18b4 <flatcc_verify_buffer_header>
    1c38:	mov	r3, r0
    1c3c:	b	1c78 <flatcc_verify_table_as_root+0x88>
    1c40:	mov	r1, #0
    1c44:	ldr	r0, [fp, #-8]
    1c48:	bl	3ac <read_uoffset>
    1c4c:	mov	r2, r0
    1c50:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c54:	str	r3, [sp, #4]
    1c58:	mov	r3, #100	; 0x64
    1c5c:	str	r3, [sp]
    1c60:	mov	r3, r2
    1c64:	mov	r2, #0
    1c68:	ldr	r1, [fp, #-12]
    1c6c:	ldr	r0, [fp, #-8]
    1c70:	bl	d68 <verify_table>
    1c74:	mov	r3, r0
    1c78:	mov	r0, r3
    1c7c:	sub	sp, fp, #4
    1c80:	pop	{fp, pc}

00001c84 <flatcc_verify_table_as_typed_root>:
    1c84:	push	{fp, lr}
    1c88:	add	fp, sp, #4
    1c8c:	sub	sp, sp, #24
    1c90:	str	r0, [fp, #-8]
    1c94:	str	r1, [fp, #-12]
    1c98:	str	r2, [fp, #-16]
    1c9c:	str	r3, [fp, #-20]	; 0xffffffec
    1ca0:	ldr	r2, [fp, #-16]
    1ca4:	ldr	r1, [fp, #-12]
    1ca8:	ldr	r0, [fp, #-8]
    1cac:	bl	19cc <flatcc_verify_typed_buffer_header>
    1cb0:	mov	r3, r0
    1cb4:	cmp	r3, #0
    1cb8:	beq	1cd4 <flatcc_verify_table_as_typed_root+0x50>
    1cbc:	ldr	r2, [fp, #-16]
    1cc0:	ldr	r1, [fp, #-12]
    1cc4:	ldr	r0, [fp, #-8]
    1cc8:	bl	19cc <flatcc_verify_typed_buffer_header>
    1ccc:	mov	r3, r0
    1cd0:	b	1d0c <flatcc_verify_table_as_typed_root+0x88>
    1cd4:	mov	r1, #0
    1cd8:	ldr	r0, [fp, #-8]
    1cdc:	bl	3ac <read_uoffset>
    1ce0:	mov	r2, r0
    1ce4:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ce8:	str	r3, [sp, #4]
    1cec:	mov	r3, #100	; 0x64
    1cf0:	str	r3, [sp]
    1cf4:	mov	r3, r2
    1cf8:	mov	r2, #0
    1cfc:	ldr	r1, [fp, #-12]
    1d00:	ldr	r0, [fp, #-8]
    1d04:	bl	d68 <verify_table>
    1d08:	mov	r3, r0
    1d0c:	mov	r0, r3
    1d10:	sub	sp, fp, #4
    1d14:	pop	{fp, pc}

00001d18 <flatcc_verify_struct_as_nested_root>:
    1d18:	push	{fp, lr}
    1d1c:	add	fp, sp, #4
    1d20:	sub	sp, sp, #32
    1d24:	str	r0, [fp, #-16]
    1d28:	str	r2, [fp, #-24]	; 0xffffffe8
    1d2c:	str	r3, [fp, #-28]	; 0xffffffe4
    1d30:	strh	r1, [fp, #-18]	; 0xffffffee
    1d34:	ldrh	r2, [fp, #8]
    1d38:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1d3c:	mvn	r3, #0
    1d40:	str	r3, [sp, #4]
    1d44:	mov	r3, #1
    1d48:	str	r3, [sp]
    1d4c:	mov	r3, r2
    1d50:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1d54:	ldr	r0, [fp, #-16]
    1d58:	bl	14dc <flatcc_verify_vector_field>
    1d5c:	mov	r3, r0
    1d60:	cmp	r3, #0
    1d64:	beq	1d98 <flatcc_verify_struct_as_nested_root+0x80>
    1d68:	ldrh	r2, [fp, #8]
    1d6c:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1d70:	mvn	r3, #0
    1d74:	str	r3, [sp, #4]
    1d78:	mov	r3, #1
    1d7c:	str	r3, [sp]
    1d80:	mov	r3, r2
    1d84:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1d88:	ldr	r0, [fp, #-16]
    1d8c:	bl	14dc <flatcc_verify_vector_field>
    1d90:	mov	r3, r0
    1d94:	b	1e18 <flatcc_verify_struct_as_nested_root+0x100>
    1d98:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1d9c:	mov	r1, r3
    1da0:	ldr	r0, [fp, #-16]
    1da4:	bl	73c <get_field_ptr>
    1da8:	str	r0, [fp, #-8]
    1dac:	ldr	r3, [fp, #-8]
    1db0:	cmp	r3, #0
    1db4:	bne	1dc0 <flatcc_verify_struct_as_nested_root+0xa8>
    1db8:	mov	r3, #0
    1dbc:	b	1e18 <flatcc_verify_struct_as_nested_root+0x100>
    1dc0:	mov	r1, #0
    1dc4:	ldr	r0, [fp, #-8]
    1dc8:	bl	3ac <read_uoffset>
    1dcc:	mov	r2, r0
    1dd0:	ldr	r3, [fp, #-8]
    1dd4:	add	r3, r2, r3
    1dd8:	str	r3, [fp, #-8]
    1ddc:	mov	r1, #0
    1de0:	ldr	r0, [fp, #-8]
    1de4:	bl	3ac <read_uoffset>
    1de8:	str	r0, [fp, #-12]
    1dec:	ldr	r3, [fp, #-8]
    1df0:	add	r3, r3, #4
    1df4:	str	r3, [fp, #-8]
    1df8:	ldrh	r3, [fp, #8]
    1dfc:	str	r3, [sp]
    1e00:	ldr	r3, [fp, #4]
    1e04:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1e08:	ldr	r1, [fp, #-12]
    1e0c:	ldr	r0, [fp, #-8]
    1e10:	bl	1ae0 <flatcc_verify_struct_as_root>
    1e14:	mov	r3, r0
    1e18:	mov	r0, r3
    1e1c:	sub	sp, fp, #4
    1e20:	pop	{fp, pc}

00001e24 <flatcc_verify_table_as_nested_root>:
    1e24:	push	{fp, lr}
    1e28:	add	fp, sp, #4
    1e2c:	sub	sp, sp, #32
    1e30:	str	r0, [fp, #-16]
    1e34:	str	r2, [fp, #-24]	; 0xffffffe8
    1e38:	str	r3, [fp, #-28]	; 0xffffffe4
    1e3c:	strh	r1, [fp, #-18]	; 0xffffffee
    1e40:	ldrh	r2, [fp, #4]
    1e44:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1e48:	mvn	r3, #0
    1e4c:	str	r3, [sp, #4]
    1e50:	mov	r3, #1
    1e54:	str	r3, [sp]
    1e58:	mov	r3, r2
    1e5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1e60:	ldr	r0, [fp, #-16]
    1e64:	bl	14dc <flatcc_verify_vector_field>
    1e68:	mov	r3, r0
    1e6c:	cmp	r3, #0
    1e70:	beq	1ea4 <flatcc_verify_table_as_nested_root+0x80>
    1e74:	ldrh	r2, [fp, #4]
    1e78:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1e7c:	mvn	r3, #0
    1e80:	str	r3, [sp, #4]
    1e84:	mov	r3, #1
    1e88:	str	r3, [sp]
    1e8c:	mov	r3, r2
    1e90:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1e94:	ldr	r0, [fp, #-16]
    1e98:	bl	14dc <flatcc_verify_vector_field>
    1e9c:	mov	r3, r0
    1ea0:	b	1f74 <flatcc_verify_table_as_nested_root+0x150>
    1ea4:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1ea8:	mov	r1, r3
    1eac:	ldr	r0, [fp, #-16]
    1eb0:	bl	73c <get_field_ptr>
    1eb4:	str	r0, [fp, #-8]
    1eb8:	ldr	r3, [fp, #-8]
    1ebc:	cmp	r3, #0
    1ec0:	bne	1ecc <flatcc_verify_table_as_nested_root+0xa8>
    1ec4:	mov	r3, #0
    1ec8:	b	1f74 <flatcc_verify_table_as_nested_root+0x150>
    1ecc:	mov	r1, #0
    1ed0:	ldr	r0, [fp, #-8]
    1ed4:	bl	3ac <read_uoffset>
    1ed8:	mov	r2, r0
    1edc:	ldr	r3, [fp, #-8]
    1ee0:	add	r3, r2, r3
    1ee4:	str	r3, [fp, #-8]
    1ee8:	mov	r1, #0
    1eec:	ldr	r0, [fp, #-8]
    1ef0:	bl	3ac <read_uoffset>
    1ef4:	str	r0, [fp, #-12]
    1ef8:	ldr	r3, [fp, #-8]
    1efc:	add	r3, r3, #4
    1f00:	str	r3, [fp, #-8]
    1f04:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1f08:	ldr	r1, [fp, #-12]
    1f0c:	ldr	r0, [fp, #-8]
    1f10:	bl	18b4 <flatcc_verify_buffer_header>
    1f14:	mov	r3, r0
    1f18:	cmp	r3, #0
    1f1c:	beq	1f38 <flatcc_verify_table_as_nested_root+0x114>
    1f20:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1f24:	ldr	r1, [fp, #-12]
    1f28:	ldr	r0, [fp, #-8]
    1f2c:	bl	18b4 <flatcc_verify_buffer_header>
    1f30:	mov	r3, r0
    1f34:	b	1f74 <flatcc_verify_table_as_nested_root+0x150>
    1f38:	mov	r1, #0
    1f3c:	ldr	r0, [fp, #-8]
    1f40:	bl	3ac <read_uoffset>
    1f44:	mov	r1, r0
    1f48:	ldr	r3, [fp, #-16]
    1f4c:	ldr	r3, [r3, #8]
    1f50:	ldr	r2, [fp, #8]
    1f54:	str	r2, [sp, #4]
    1f58:	str	r3, [sp]
    1f5c:	mov	r3, r1
    1f60:	mov	r2, #0
    1f64:	ldr	r1, [fp, #-12]
    1f68:	ldr	r0, [fp, #-8]
    1f6c:	bl	d68 <verify_table>
    1f70:	mov	r3, r0
    1f74:	mov	r0, r3
    1f78:	sub	sp, fp, #4
    1f7c:	pop	{fp, pc}

00001f80 <flatcc_verify_union_field>:
    1f80:	push	{fp, lr}
    1f84:	add	fp, sp, #4
    1f88:	sub	sp, sp, #80	; 0x50
    1f8c:	str	r0, [fp, #-64]	; 0xffffffc0
    1f90:	str	r2, [fp, #-72]	; 0xffffffb8
    1f94:	str	r3, [fp, #-76]	; 0xffffffb4
    1f98:	strh	r1, [fp, #-66]	; 0xffffffbe
    1f9c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    1fa0:	sub	r3, r3, #1
    1fa4:	uxth	r3, r3
    1fa8:	mov	r1, r3
    1fac:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1fb0:	bl	6cc <read_vt_entry>
    1fb4:	mov	r3, r0
    1fb8:	strh	r3, [fp, #-6]
    1fbc:	ldrh	r3, [fp, #-6]
    1fc0:	cmp	r3, #0
    1fc4:	bne	2040 <flatcc_verify_union_field+0xc0>
    1fc8:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    1fcc:	mov	r1, r3
    1fd0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1fd4:	bl	6cc <read_vt_entry>
    1fd8:	mov	r3, r0
    1fdc:	strh	r3, [fp, #-8]
    1fe0:	ldrh	r3, [fp, #-8]
    1fe4:	cmp	r3, #0
    1fe8:	moveq	r3, #1
    1fec:	movne	r3, #0
    1ff0:	uxtb	r3, r3
    1ff4:	str	r3, [fp, #-12]
    1ff8:	ldr	r3, [fp, #-12]
    1ffc:	cmp	r3, #0
    2000:	bne	200c <flatcc_verify_union_field+0x8c>
    2004:	mov	r3, #23
    2008:	b	21d0 <flatcc_verify_union_field+0x250>
    200c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2010:	cmp	r3, #0
    2014:	moveq	r3, #1
    2018:	movne	r3, #0
    201c:	uxtb	r3, r3
    2020:	str	r3, [fp, #-16]
    2024:	ldr	r3, [fp, #-16]
    2028:	cmp	r3, #0
    202c:	bne	2038 <flatcc_verify_union_field+0xb8>
    2030:	mov	r3, #21
    2034:	b	21d0 <flatcc_verify_union_field+0x250>
    2038:	mov	r3, #0
    203c:	b	21d0 <flatcc_verify_union_field+0x250>
    2040:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    2044:	sub	r3, r3, #1
    2048:	uxth	r1, r3
    204c:	mov	r3, #1
    2050:	str	r3, [sp]
    2054:	mov	r3, #1
    2058:	mov	r2, #0
    205c:	ldr	r0, [fp, #-64]	; 0xffffffc0
    2060:	bl	7a8 <verify_field>
    2064:	mov	r3, r0
    2068:	cmp	r3, #0
    206c:	beq	209c <flatcc_verify_union_field+0x11c>
    2070:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    2074:	sub	r3, r3, #1
    2078:	uxth	r1, r3
    207c:	mov	r3, #1
    2080:	str	r3, [sp]
    2084:	mov	r3, #1
    2088:	mov	r2, #0
    208c:	ldr	r0, [fp, #-64]	; 0xffffffc0
    2090:	bl	7a8 <verify_field>
    2094:	mov	r3, r0
    2098:	b	21d0 <flatcc_verify_union_field+0x250>
    209c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    20a0:	mov	r1, r3
    20a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
    20a8:	bl	6cc <read_vt_entry>
    20ac:	mov	r3, r0
    20b0:	strh	r3, [fp, #-8]
    20b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    20b8:	ldr	r2, [r3]
    20bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    20c0:	ldr	r1, [r3, #16]
    20c4:	ldrh	r3, [fp, #-6]
    20c8:	add	r3, r1, r3
    20cc:	add	r3, r2, r3
    20d0:	str	r3, [fp, #-20]	; 0xffffffec
    20d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    20d8:	ldrb	r3, [r3]
    20dc:	cmp	r3, #0
    20e0:	bne	20f0 <flatcc_verify_union_field+0x170>
    20e4:	ldrh	r3, [fp, #-8]
    20e8:	cmp	r3, #0
    20ec:	bne	20f8 <flatcc_verify_union_field+0x178>
    20f0:	mov	r3, #1
    20f4:	b	20fc <flatcc_verify_union_field+0x17c>
    20f8:	mov	r3, #0
    20fc:	str	r3, [fp, #-24]	; 0xffffffe8
    2100:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2104:	cmp	r3, #0
    2108:	bne	2114 <flatcc_verify_union_field+0x194>
    210c:	mov	r3, #24
    2110:	b	21d0 <flatcc_verify_union_field+0x250>
    2114:	ldr	r3, [fp, #-20]	; 0xffffffec
    2118:	ldrb	r3, [r3]
    211c:	cmp	r3, #0
    2120:	bne	212c <flatcc_verify_union_field+0x1ac>
    2124:	mov	r3, #0
    2128:	b	21d0 <flatcc_verify_union_field+0x250>
    212c:	sub	r3, fp, #32
    2130:	ldrh	r1, [fp, #-66]	; 0xffffffbe
    2134:	ldr	r2, [fp, #-72]	; 0xffffffb8
    2138:	ldr	r0, [fp, #-64]	; 0xffffffc0
    213c:	bl	8fc <get_offset_field>
    2140:	str	r0, [fp, #-28]	; 0xffffffe4
    2144:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2148:	cmp	r3, #0
    214c:	bne	215c <flatcc_verify_union_field+0x1dc>
    2150:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2154:	cmp	r3, #0
    2158:	bne	2164 <flatcc_verify_union_field+0x1e4>
    215c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2160:	b	21d0 <flatcc_verify_union_field+0x250>
    2164:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2168:	ldr	r3, [r3]
    216c:	str	r3, [fp, #-56]	; 0xffffffc8
    2170:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2174:	ldr	r3, [r3, #4]
    2178:	str	r3, [fp, #-52]	; 0xffffffcc
    217c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2180:	ldr	r3, [r3, #8]
    2184:	str	r3, [fp, #-48]	; 0xffffffd0
    2188:	ldr	r3, [fp, #-32]	; 0xffffffe0
    218c:	str	r3, [fp, #-40]	; 0xffffffd8
    2190:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2194:	ldr	r3, [r3]
    2198:	ldr	r2, [fp, #-32]	; 0xffffffe0
    219c:	mov	r1, r2
    21a0:	mov	r0, r3
    21a4:	bl	3ac <read_uoffset>
    21a8:	mov	r3, r0
    21ac:	str	r3, [fp, #-36]	; 0xffffffdc
    21b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    21b4:	ldrb	r3, [r3]
    21b8:	strb	r3, [fp, #-44]	; 0xffffffd4
    21bc:	sub	r2, fp, #56	; 0x38
    21c0:	ldr	r3, [fp, #-76]	; 0xffffffb4
    21c4:	mov	r0, r2
    21c8:	blx	r3
    21cc:	mov	r3, r0
    21d0:	mov	r0, r3
    21d4:	sub	sp, fp, #4
    21d8:	pop	{fp, pc}

000021dc <flatcc_verify_union_vector_field>:
    21dc:	push	{r4, r5, r6, fp, lr}
    21e0:	add	fp, sp, #16
    21e4:	sub	sp, sp, #68	; 0x44
    21e8:	str	r0, [fp, #-56]	; 0xffffffc8
    21ec:	str	r2, [fp, #-64]	; 0xffffffc0
    21f0:	str	r3, [fp, #-68]	; 0xffffffbc
    21f4:	strh	r1, [fp, #-58]	; 0xffffffc6
    21f8:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    21fc:	sub	r3, r3, #1
    2200:	uxth	r3, r3
    2204:	mov	r1, r3
    2208:	ldr	r0, [fp, #-56]	; 0xffffffc8
    220c:	bl	6cc <read_vt_entry>
    2210:	mov	r3, r0
    2214:	strh	r3, [fp, #-22]	; 0xffffffea
    2218:	ldrh	r3, [fp, #-22]	; 0xffffffea
    221c:	cmp	r3, #0
    2220:	bne	2274 <flatcc_verify_union_vector_field+0x98>
    2224:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    2228:	mov	r1, r3
    222c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2230:	bl	6cc <read_vt_entry>
    2234:	mov	r3, r0
    2238:	strh	r3, [fp, #-24]	; 0xffffffe8
    223c:	ldrh	r3, [fp, #-24]	; 0xffffffe8
    2240:	cmp	r3, #0
    2244:	bne	2274 <flatcc_verify_union_vector_field+0x98>
    2248:	ldr	r3, [fp, #-64]	; 0xffffffc0
    224c:	cmp	r3, #0
    2250:	moveq	r3, #1
    2254:	movne	r3, #0
    2258:	uxtb	r3, r3
    225c:	str	r3, [fp, #-28]	; 0xffffffe4
    2260:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2264:	cmp	r3, #0
    2268:	bne	2274 <flatcc_verify_union_vector_field+0x98>
    226c:	mov	r3, #22
    2270:	b	23f4 <flatcc_verify_union_vector_field+0x218>
    2274:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    2278:	sub	r3, r3, #1
    227c:	uxth	r1, r3
    2280:	mvn	r3, #0
    2284:	str	r3, [sp, #4]
    2288:	mov	r3, #1
    228c:	str	r3, [sp]
    2290:	mov	r3, #1
    2294:	ldr	r2, [fp, #-64]	; 0xffffffc0
    2298:	ldr	r0, [fp, #-56]	; 0xffffffc8
    229c:	bl	14dc <flatcc_verify_vector_field>
    22a0:	mov	r3, r0
    22a4:	cmp	r3, #0
    22a8:	beq	22e0 <flatcc_verify_union_vector_field+0x104>
    22ac:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    22b0:	sub	r3, r3, #1
    22b4:	uxth	r1, r3
    22b8:	mvn	r3, #0
    22bc:	str	r3, [sp, #4]
    22c0:	mov	r3, #1
    22c4:	str	r3, [sp]
    22c8:	mov	r3, #1
    22cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    22d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    22d4:	bl	14dc <flatcc_verify_vector_field>
    22d8:	mov	r3, r0
    22dc:	b	23f4 <flatcc_verify_union_vector_field+0x218>
    22e0:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    22e4:	sub	r3, r3, #1
    22e8:	uxth	r3, r3
    22ec:	mov	r1, r3
    22f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    22f4:	bl	73c <get_field_ptr>
    22f8:	str	r0, [fp, #-32]	; 0xffffffe0
    22fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2300:	cmp	r3, #0
    2304:	bne	2310 <flatcc_verify_union_vector_field+0x134>
    2308:	mov	r3, #0
    230c:	b	23f4 <flatcc_verify_union_vector_field+0x218>
    2310:	mov	r1, #0
    2314:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2318:	bl	3ac <read_uoffset>
    231c:	mov	r2, r0
    2320:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2324:	add	r3, r2, r3
    2328:	str	r3, [fp, #-32]	; 0xffffffe0
    232c:	mov	r1, #0
    2330:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2334:	bl	3ac <read_uoffset>
    2338:	str	r0, [fp, #-36]	; 0xffffffdc
    233c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2340:	add	r3, r3, #4
    2344:	str	r3, [fp, #-32]	; 0xffffffe0
    2348:	ldr	r3, [fp, #-32]	; 0xffffffe0
    234c:	str	r3, [fp, #-40]	; 0xffffffd8
    2350:	sub	r3, fp, #48	; 0x30
    2354:	ldrh	r1, [fp, #-58]	; 0xffffffc6
    2358:	ldr	r2, [fp, #-64]	; 0xffffffc0
    235c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2360:	bl	8fc <get_offset_field>
    2364:	str	r0, [fp, #-44]	; 0xffffffd4
    2368:	ldr	r3, [fp, #-44]	; 0xffffffd4
    236c:	cmp	r3, #0
    2370:	bne	2380 <flatcc_verify_union_vector_field+0x1a4>
    2374:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2378:	cmp	r3, #0
    237c:	bne	2388 <flatcc_verify_union_vector_field+0x1ac>
    2380:	ldr	r3, [fp, #-44]	; 0xffffffd4
    2384:	b	23f4 <flatcc_verify_union_vector_field+0x218>
    2388:	ldr	r3, [fp, #-56]	; 0xffffffc8
    238c:	ldr	r4, [r3]
    2390:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2394:	ldr	r5, [r3, #4]
    2398:	ldr	r6, [fp, #-48]	; 0xffffffd0
    239c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    23a0:	ldr	r3, [r3]
    23a4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    23a8:	mov	r1, r2
    23ac:	mov	r0, r3
    23b0:	bl	3ac <read_uoffset>
    23b4:	mov	r1, r0
    23b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    23bc:	ldr	r3, [r3, #8]
    23c0:	ldr	r2, [fp, #-68]	; 0xffffffbc
    23c4:	str	r2, [sp, #12]
    23c8:	str	r3, [sp, #8]
    23cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    23d0:	str	r3, [sp, #4]
    23d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    23d8:	str	r3, [sp]
    23dc:	mov	r3, r1
    23e0:	mov	r2, r6
    23e4:	mov	r1, r5
    23e8:	mov	r0, r4
    23ec:	bl	1168 <verify_union_vector>
    23f0:	mov	r3, r0
    23f4:	mov	r0, r3
    23f8:	sub	sp, fp, #16
    23fc:	pop	{r4, r5, r6, fp, pc}
