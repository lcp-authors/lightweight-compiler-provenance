
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-check.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_product_check>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #912	; 0x390
       c:	str	r0, [fp, #-16]
      10:	str	r1, [fp, #-20]	; 0xffffffec
      14:	str	r2, [fp, #-24]	; 0xffffffe8
      18:	str	r3, [fp, #-28]	; 0xffffffe4
      1c:	mov	r0, #0
      20:	str	r0, [fp, #-32]	; 0xffffffe0
      24:	str	r0, [sp, #356]	; 0x164
      28:	str	r0, [sp, #352]	; 0x160
      2c:	str	r0, [sp, #348]	; 0x15c
      30:	str	r0, [sp, #344]	; 0x158
      34:	ldr	r1, [fp, #-16]
      38:	add	r0, sp, #368	; 0x170
      3c:	bl	0 <coda_cursor_set_product>
      40:	cmp	r0, #0
      44:	beq	54 <coda_product_check+0x54>
      48:	mvn	r0, #0
      4c:	str	r0, [fp, #-12]
      50:	b	304 <coda_product_check+0x304>
      54:	ldr	r0, [fp, #-16]
      58:	add	r1, sp, #364	; 0x16c
      5c:	bl	0 <coda_get_product_format>
      60:	cmp	r0, #0
      64:	beq	74 <coda_product_check+0x74>
      68:	mvn	r0, #0
      6c:	str	r0, [fp, #-12]
      70:	b	304 <coda_product_check+0x304>
      74:	ldr	r0, [sp, #364]	; 0x16c
      78:	cmp	r0, #0
      7c:	beq	d8 <coda_product_check+0xd8>
      80:	ldr	r0, [sp, #364]	; 0x16c
      84:	cmp	r0, #1
      88:	beq	d8 <coda_product_check+0xd8>
      8c:	ldr	r0, [sp, #364]	; 0x16c
      90:	cmp	r0, #2
      94:	beq	d8 <coda_product_check+0xd8>
      98:	ldr	r0, [fp, #-16]
      9c:	ldr	r0, [r0, #24]
      a0:	movw	r1, #0
      a4:	cmp	r0, r1
      a8:	beq	d4 <coda_product_check+0xd4>
      ac:	ldr	r0, [fp, #-16]
      b0:	ldr	r0, [r0, #24]
      b4:	ldr	r0, [r0, #28]
      b8:	movw	r1, #0
      bc:	cmp	r0, r1
      c0:	beq	d4 <coda_product_check+0xd4>
      c4:	ldr	r0, [fp, #-16]
      c8:	ldr	r0, [r0, #24]
      cc:	ldr	r0, [r0, #28]
      d0:	str	r0, [fp, #-32]	; 0xffffffe0
      d4:	b	d8 <coda_product_check+0xd8>
      d8:	ldr	r0, [sp, #364]	; 0x16c
      dc:	cmp	r0, #0
      e0:	movw	r0, #1
      e4:	str	r0, [sp, #32]
      e8:	beq	100 <coda_product_check+0x100>
      ec:	ldr	r0, [sp, #364]	; 0x16c
      f0:	cmp	r0, #1
      f4:	movw	r0, #0
      f8:	moveq	r0, #1
      fc:	str	r0, [sp, #32]
     100:	ldr	r0, [sp, #32]
     104:	and	r0, r0, #1
     108:	str	r0, [sp, #340]	; 0x154
     10c:	ldr	r0, [sp, #340]	; 0x154
     110:	cmp	r0, #0
     114:	beq	154 <coda_product_check+0x154>
     118:	ldr	r0, [fp, #-16]
     11c:	add	r1, sp, #352	; 0x160
     120:	bl	0 <coda_get_product_file_size>
     124:	cmp	r0, #0
     128:	beq	138 <coda_product_check+0x138>
     12c:	mvn	r0, #0
     130:	str	r0, [fp, #-12]
     134:	b	304 <coda_product_check+0x304>
     138:	ldr	r0, [sp, #352]	; 0x160
     13c:	ldr	r1, [sp, #356]	; 0x164
     140:	lsl	r1, r1, #3
     144:	orr	r1, r1, r0, lsr #29
     148:	lsl	r0, r0, #3
     14c:	str	r0, [sp, #352]	; 0x160
     150:	str	r1, [sp, #356]	; 0x164
     154:	ldr	r0, [sp, #340]	; 0x154
     158:	cmp	r0, #0
     15c:	beq	1b8 <coda_product_check+0x1b8>
     160:	ldr	r0, [fp, #-20]	; 0xffffffec
     164:	cmp	r0, #0
     168:	bne	1b8 <coda_product_check+0x1b8>
     16c:	bl	0 <coda_get_option_use_fast_size_expressions>
     170:	str	r0, [sp, #336]	; 0x150
     174:	movw	r0, #0
     178:	bl	0 <coda_set_option_use_fast_size_expressions>
     17c:	add	r1, sp, #368	; 0x170
     180:	str	r0, [sp, #28]
     184:	mov	r0, r1
     188:	add	r1, sp, #344	; 0x158
     18c:	bl	0 <coda_cursor_get_bit_size>
     190:	cmp	r0, #0
     194:	beq	1ac <coda_product_check+0x1ac>
     198:	ldr	r0, [sp, #336]	; 0x150
     19c:	bl	0 <coda_set_option_use_fast_size_expressions>
     1a0:	mvn	r1, #0
     1a4:	str	r1, [fp, #-12]
     1a8:	b	304 <coda_product_check+0x304>
     1ac:	ldr	r0, [sp, #336]	; 0x150
     1b0:	bl	0 <coda_set_option_use_fast_size_expressions>
     1b4:	b	214 <coda_product_check+0x214>
     1b8:	ldr	r2, [fp, #-20]	; 0xffffffec
     1bc:	ldr	r3, [sp, #340]	; 0x154
     1c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     1c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     1c8:	add	ip, sp, #368	; 0x170
     1cc:	str	r0, [sp, #24]
     1d0:	mov	r0, ip
     1d4:	sub	ip, fp, #32
     1d8:	str	r1, [sp, #20]
     1dc:	mov	r1, ip
     1e0:	add	ip, sp, #344	; 0x158
     1e4:	str	ip, [sp]
     1e8:	ldr	ip, [sp, #24]
     1ec:	str	ip, [sp, #4]
     1f0:	ldr	lr, [sp, #20]
     1f4:	str	lr, [sp, #8]
     1f8:	bl	310 <check_data>
     1fc:	cmp	r0, #0
     200:	beq	210 <coda_product_check+0x210>
     204:	mvn	r0, #0
     208:	str	r0, [fp, #-12]
     20c:	b	304 <coda_product_check+0x304>
     210:	b	214 <coda_product_check+0x214>
     214:	ldr	r0, [sp, #340]	; 0x154
     218:	cmp	r0, #0
     21c:	beq	2fc <coda_product_check+0x2fc>
     220:	ldr	r0, [sp, #352]	; 0x160
     224:	ldr	r1, [sp, #356]	; 0x164
     228:	ldr	r2, [sp, #344]	; 0x158
     22c:	ldr	r3, [sp, #348]	; 0x15c
     230:	eor	r1, r1, r3
     234:	eor	r0, r0, r2
     238:	orr	r0, r0, r1
     23c:	cmp	r0, #0
     240:	beq	2fc <coda_product_check+0x2fc>
     244:	b	248 <coda_product_check+0x248>
     248:	ldr	r0, [sp, #352]	; 0x160
     24c:	ldr	r1, [sp, #356]	; 0x164
     250:	lsr	r0, r0, #3
     254:	orr	r0, r0, r1, lsl #29
     258:	asr	r1, r1, #3
     25c:	add	r2, sp, #59	; 0x3b
     260:	bl	0 <coda_str64>
     264:	ldr	r0, [sp, #344]	; 0x158
     268:	ldr	r1, [sp, #348]	; 0x15c
     26c:	lsr	r0, r0, #3
     270:	orr	r0, r0, r1, lsl #29
     274:	asr	r1, r1, #3
     278:	add	r2, sp, #38	; 0x26
     27c:	bl	0 <coda_str64>
     280:	ldrb	r0, [sp, #344]	; 0x158
     284:	tst	r0, #7
     288:	beq	2c4 <coda_product_check+0x2c4>
     28c:	b	290 <coda_product_check+0x290>
     290:	add	r0, sp, #80	; 0x50
     294:	add	r2, sp, #59	; 0x3b
     298:	add	r3, sp, #38	; 0x26
     29c:	ldr	r1, [sp, #344]	; 0x158
     2a0:	and	r1, r1, #7
     2a4:	movw	ip, #0
     2a8:	movt	ip, #0
     2ac:	str	r1, [sp, #16]
     2b0:	mov	r1, ip
     2b4:	ldr	ip, [sp, #16]
     2b8:	str	ip, [sp]
     2bc:	bl	0 <sprintf>
     2c0:	b	2dc <coda_product_check+0x2dc>
     2c4:	add	r3, sp, #38	; 0x26
     2c8:	add	r2, sp, #59	; 0x3b
     2cc:	add	r0, sp, #80	; 0x50
     2d0:	movw	r1, #0
     2d4:	movt	r1, #0
     2d8:	bl	0 <sprintf>
     2dc:	add	r1, sp, #80	; 0x50
     2e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     2e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     2e8:	movw	r3, #0
     2ec:	str	r0, [sp, #12]
     2f0:	mov	r0, r3
     2f4:	ldr	r3, [sp, #12]
     2f8:	blx	r3
     2fc:	movw	r0, #0
     300:	str	r0, [fp, #-12]
     304:	ldr	r0, [fp, #-12]
     308:	sub	sp, fp, #8
     30c:	pop	{r4, r5, fp, pc}

00000310 <check_data>:
     310:	push	{r4, sl, fp, lr}
     314:	add	fp, sp, #8
     318:	sub	sp, sp, #1648	; 0x670
     31c:	ldr	ip, [fp, #16]
     320:	ldr	lr, [fp, #12]
     324:	ldr	r4, [fp, #8]
     328:	str	r0, [fp, #-16]
     32c:	str	r1, [fp, #-20]	; 0xffffffec
     330:	str	r2, [fp, #-24]	; 0xffffffe8
     334:	str	r3, [fp, #-28]	; 0xffffffe4
     338:	movw	r0, #0
     33c:	str	r0, [fp, #-36]	; 0xffffffdc
     340:	ldr	r1, [fp, #8]
     344:	cmp	r1, r0
     348:	beq	350 <check_data+0x40>
     34c:	b	370 <check_data+0x60>
     350:	movw	r0, #0
     354:	movt	r0, #0
     358:	movw	r1, #0
     35c:	movt	r1, #0
     360:	movw	r2, #306	; 0x132
     364:	movw	r3, #0
     368:	movt	r3, #0
     36c:	bl	0 <__assert_fail>
     370:	ldr	r0, [fp, #-16]
     374:	sub	r1, fp, #44	; 0x2c
     378:	bl	0 <coda_cursor_get_type>
     37c:	cmp	r0, #0
     380:	beq	390 <check_data+0x80>
     384:	mvn	r0, #0
     388:	str	r0, [fp, #-12]
     38c:	b	1a08 <check_data+0x16f8>
     390:	ldr	r0, [fp, #-44]	; 0xffffffd4
     394:	sub	r1, fp, #32
     398:	bl	0 <coda_type_get_class>
     39c:	cmp	r0, #0
     3a0:	beq	3b0 <check_data+0xa0>
     3a4:	mvn	r0, #0
     3a8:	str	r0, [fp, #-12]
     3ac:	b	1a08 <check_data+0x16f8>
     3b0:	ldr	r0, [fp, #-16]
     3b4:	ldr	r1, [fp, #-20]	; 0xffffffec
     3b8:	ldr	r2, [fp, #12]
     3bc:	ldr	r3, [fp, #16]
     3c0:	bl	1a2c <check_definition>
     3c4:	cmp	r0, #0
     3c8:	beq	3d8 <check_data+0xc8>
     3cc:	mvn	r0, #0
     3d0:	str	r0, [fp, #-12]
     3d4:	b	1a08 <check_data+0x16f8>
     3d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     3dc:	cmp	r0, #0
     3e0:	beq	458 <check_data+0x148>
     3e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     3e8:	cmp	r0, #2
     3ec:	str	r0, [sp, #272]	; 0x110
     3f0:	bcc	41c <check_data+0x10c>
     3f4:	b	3f8 <check_data+0xe8>
     3f8:	ldr	r0, [sp, #272]	; 0x110
     3fc:	sub	r1, r0, #2
     400:	cmp	r1, #4
     404:	bcc	430 <check_data+0x120>
     408:	b	40c <check_data+0xfc>
     40c:	ldr	r0, [sp, #272]	; 0x110
     410:	cmp	r0, #6
     414:	bne	454 <check_data+0x144>
     418:	b	41c <check_data+0x10c>
     41c:	ldr	r0, [fp, #8]
     420:	mov	r1, #0
     424:	str	r1, [r0, #4]
     428:	str	r1, [r0]
     42c:	b	454 <check_data+0x144>
     430:	ldr	r0, [fp, #-16]
     434:	ldr	r1, [fp, #8]
     438:	bl	0 <coda_cursor_get_bit_size>
     43c:	cmp	r0, #0
     440:	beq	450 <check_data+0x140>
     444:	mvn	r0, #0
     448:	str	r0, [fp, #-12]
     44c:	b	1a08 <check_data+0x16f8>
     450:	b	454 <check_data+0x144>
     454:	b	458 <check_data+0x148>
     458:	ldr	r0, [fp, #-24]	; 0xffffffe8
     45c:	cmp	r0, #0
     460:	beq	d70 <check_data+0xa60>
     464:	ldr	r0, [fp, #-32]	; 0xffffffe0
     468:	cmp	r0, #6
     46c:	str	r0, [sp, #268]	; 0x10c
     470:	bhi	d6c <check_data+0xa5c>
     474:	add	r0, pc, #8
     478:	ldr	r1, [sp, #268]	; 0x10c
     47c:	ldr	r0, [r0, r1, lsl #2]
     480:	mov	pc, r0
     484:	.word	0x000004a0
     488:	.word	0x000004a0
     48c:	.word	0x000004a4
     490:	.word	0x000004a4
     494:	.word	0x00000570
     498:	.word	0x0000096c
     49c:	.word	0x00000c70
     4a0:	b	d6c <check_data+0xa5c>
     4a4:	ldr	r0, [fp, #-16]
     4a8:	sub	r1, fp, #56	; 0x38
     4ac:	bl	0 <coda_cursor_read_double>
     4b0:	cmp	r0, #0
     4b4:	beq	56c <check_data+0x25c>
     4b8:	ldr	r0, [pc, #4088]	; 14b8 <check_data+0x11a8>
     4bc:	ldr	r0, [pc, r0]
     4c0:	str	r0, [sp, #264]	; 0x108
     4c4:	bl	0 <__aeabi_read_tp>
     4c8:	ldr	r1, [sp, #264]	; 0x108
     4cc:	ldr	r0, [r0, r1]
     4d0:	cmn	r0, #300	; 0x12c
     4d4:	beq	524 <check_data+0x214>
     4d8:	ldr	r0, [pc, #4060]	; 14bc <check_data+0x11ac>
     4dc:	ldr	r0, [pc, r0]
     4e0:	str	r0, [sp, #260]	; 0x104
     4e4:	bl	0 <__aeabi_read_tp>
     4e8:	ldr	r1, [sp, #260]	; 0x104
     4ec:	ldr	r0, [r0, r1]
     4f0:	cmn	r0, #103	; 0x67
     4f4:	beq	524 <check_data+0x214>
     4f8:	ldr	r0, [pc, #4088]	; 14f8 <check_data+0x11e8>
     4fc:	ldr	r0, [pc, r0]
     500:	str	r0, [sp, #256]	; 0x100
     504:	bl	0 <__aeabi_read_tp>
     508:	ldr	r1, [sp, #256]	; 0x100
     50c:	ldr	r0, [r0, r1]
     510:	cmn	r0, #104	; 0x68
     514:	beq	524 <check_data+0x214>
     518:	mvn	r0, #0
     51c:	str	r0, [fp, #-12]
     520:	b	1a08 <check_data+0x16f8>
     524:	ldr	r0, [fp, #12]
     528:	ldr	r1, [fp, #-16]
     52c:	ldr	r2, [pc, #4072]	; 151c <check_data+0x120c>
     530:	ldr	r2, [pc, r2]
     534:	str	r0, [sp, #252]	; 0xfc
     538:	str	r1, [sp, #248]	; 0xf8
     53c:	str	r2, [sp, #244]	; 0xf4
     540:	bl	0 <__aeabi_read_tp>
     544:	ldr	r1, [sp, #244]	; 0xf4
     548:	ldr	r0, [r0, r1]
     54c:	bl	0 <coda_errno_to_string>
     550:	ldr	r2, [fp, #16]
     554:	ldr	r1, [sp, #248]	; 0xf8
     558:	str	r0, [sp, #240]	; 0xf0
     55c:	mov	r0, r1
     560:	ldr	r1, [sp, #240]	; 0xf0
     564:	ldr	r3, [sp, #252]	; 0xfc
     568:	blx	r3
     56c:	b	d6c <check_data+0xa5c>
     570:	movw	r0, #0
     574:	str	r0, [fp, #-60]	; 0xffffffc4
     578:	ldr	r0, [fp, #-16]
     57c:	sub	r1, fp, #64	; 0x40
     580:	bl	0 <coda_cursor_get_string_length>
     584:	cmp	r0, #0
     588:	beq	64c <check_data+0x33c>
     58c:	ldr	r0, [pc, #4068]	; 1578 <check_data+0x1268>
     590:	ldr	r0, [pc, r0]
     594:	str	r0, [sp, #236]	; 0xec
     598:	bl	0 <__aeabi_read_tp>
     59c:	ldr	r1, [sp, #236]	; 0xec
     5a0:	ldr	r0, [r0, r1]
     5a4:	cmn	r0, #300	; 0x12c
     5a8:	beq	5f8 <check_data+0x2e8>
     5ac:	ldr	r0, [pc, #4040]	; 157c <check_data+0x126c>
     5b0:	ldr	r0, [pc, r0]
     5b4:	str	r0, [sp, #232]	; 0xe8
     5b8:	bl	0 <__aeabi_read_tp>
     5bc:	ldr	r1, [sp, #232]	; 0xe8
     5c0:	ldr	r0, [r0, r1]
     5c4:	cmn	r0, #103	; 0x67
     5c8:	beq	5f8 <check_data+0x2e8>
     5cc:	ldr	r0, [pc, #4088]	; 15cc <check_data+0x12bc>
     5d0:	ldr	r0, [pc, r0]
     5d4:	str	r0, [sp, #228]	; 0xe4
     5d8:	bl	0 <__aeabi_read_tp>
     5dc:	ldr	r1, [sp, #228]	; 0xe4
     5e0:	ldr	r0, [r0, r1]
     5e4:	cmn	r0, #104	; 0x68
     5e8:	beq	5f8 <check_data+0x2e8>
     5ec:	mvn	r0, #0
     5f0:	str	r0, [fp, #-12]
     5f4:	b	1a08 <check_data+0x16f8>
     5f8:	ldr	r0, [fp, #12]
     5fc:	ldr	r1, [fp, #-16]
     600:	ldr	r2, [pc, #4040]	; 15d0 <check_data+0x12c0>
     604:	ldr	r2, [pc, r2]
     608:	str	r0, [sp, #224]	; 0xe0
     60c:	str	r1, [sp, #220]	; 0xdc
     610:	str	r2, [sp, #216]	; 0xd8
     614:	bl	0 <__aeabi_read_tp>
     618:	ldr	r1, [sp, #216]	; 0xd8
     61c:	ldr	r0, [r0, r1]
     620:	bl	0 <coda_errno_to_string>
     624:	ldr	r2, [fp, #16]
     628:	ldr	r1, [sp, #220]	; 0xdc
     62c:	str	r0, [sp, #212]	; 0xd4
     630:	mov	r0, r1
     634:	ldr	r1, [sp, #212]	; 0xd4
     638:	ldr	r3, [sp, #224]	; 0xe0
     63c:	blx	r3
     640:	movw	r0, #1
     644:	str	r0, [fp, #-36]	; 0xffffffdc
     648:	b	d6c <check_data+0xa5c>
     64c:	ldr	r0, [fp, #-64]	; 0xffffffc0
     650:	cmp	r0, #0
     654:	bge	688 <check_data+0x378>
     658:	ldr	r0, [fp, #12]
     65c:	ldr	r1, [fp, #-16]
     660:	ldr	r2, [fp, #16]
     664:	str	r0, [sp, #208]	; 0xd0
     668:	mov	r0, r1
     66c:	movw	r1, #0
     670:	movt	r1, #0
     674:	ldr	r3, [sp, #208]	; 0xd0
     678:	blx	r3
     67c:	movw	r0, #1
     680:	str	r0, [fp, #-36]	; 0xffffffdc
     684:	b	d6c <check_data+0xa5c>
     688:	ldr	r0, [fp, #-20]	; 0xffffffec
     68c:	ldr	r0, [r0]
     690:	movw	r1, #0
     694:	cmp	r0, r1
     698:	beq	6ac <check_data+0x39c>
     69c:	ldr	r0, [fp, #-20]	; 0xffffffec
     6a0:	ldr	r0, [r0]
     6a4:	str	r0, [sp, #204]	; 0xcc
     6a8:	b	6b4 <check_data+0x3a4>
     6ac:	ldr	r0, [fp, #-44]	; 0xffffffd4
     6b0:	str	r0, [sp, #204]	; 0xcc
     6b4:	ldr	r0, [sp, #204]	; 0xcc
     6b8:	sub	r1, fp, #68	; 0x44
     6bc:	sub	r2, fp, #72	; 0x48
     6c0:	bl	0 <coda_type_get_fixed_value>
     6c4:	cmp	r0, #0
     6c8:	beq	6d8 <check_data+0x3c8>
     6cc:	mvn	r0, #0
     6d0:	str	r0, [fp, #-12]
     6d4:	b	1a08 <check_data+0x16f8>
     6d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
     6dc:	cmp	r0, #0
     6e0:	ble	76c <check_data+0x45c>
     6e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
     6e8:	add	r0, r0, #1
     6ec:	bl	0 <malloc>
     6f0:	str	r0, [fp, #-60]	; 0xffffffc4
     6f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
     6f8:	movw	r1, #0
     6fc:	cmp	r0, r1
     700:	bne	738 <check_data+0x428>
     704:	ldr	r0, [fp, #-64]	; 0xffffffc0
     708:	add	r2, r0, #1
     70c:	mvn	r0, #0
     710:	movw	r1, #0
     714:	movt	r1, #0
     718:	movw	r3, #0
     71c:	movt	r3, #0
     720:	movw	ip, #411	; 0x19b
     724:	str	ip, [sp]
     728:	bl	0 <coda_set_error>
     72c:	mvn	r0, #0
     730:	str	r0, [fp, #-12]
     734:	b	1a08 <check_data+0x16f8>
     738:	ldr	r0, [fp, #-16]
     73c:	ldr	r1, [fp, #-60]	; 0xffffffc4
     740:	ldr	r2, [fp, #-64]	; 0xffffffc0
     744:	add	r2, r2, #1
     748:	bl	0 <coda_cursor_read_string>
     74c:	cmp	r0, #0
     750:	beq	768 <check_data+0x458>
     754:	ldr	r0, [fp, #-60]	; 0xffffffc4
     758:	bl	0 <free>
     75c:	mvn	r0, #0
     760:	str	r0, [fp, #-12]
     764:	b	1a08 <check_data+0x16f8>
     768:	b	76c <check_data+0x45c>
     76c:	ldr	r0, [fp, #-68]	; 0xffffffbc
     770:	movw	r1, #0
     774:	cmp	r0, r1
     778:	beq	808 <check_data+0x4f8>
     77c:	ldr	r0, [fp, #-64]	; 0xffffffc0
     780:	ldr	r1, [fp, #-72]	; 0xffffffb8
     784:	cmp	r0, r1
     788:	beq	7b4 <check_data+0x4a4>
     78c:	ldr	r0, [fp, #12]
     790:	ldr	r1, [fp, #-16]
     794:	ldr	r2, [fp, #16]
     798:	str	r0, [sp, #200]	; 0xc8
     79c:	mov	r0, r1
     7a0:	movw	r1, #0
     7a4:	movt	r1, #0
     7a8:	ldr	r3, [sp, #200]	; 0xc8
     7ac:	blx	r3
     7b0:	b	804 <check_data+0x4f4>
     7b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
     7b8:	cmp	r0, #0
     7bc:	ble	800 <check_data+0x4f0>
     7c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
     7c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
     7c8:	ldr	r2, [fp, #-72]	; 0xffffffb8
     7cc:	bl	0 <memcmp>
     7d0:	cmp	r0, #0
     7d4:	beq	7fc <check_data+0x4ec>
     7d8:	ldr	r0, [fp, #12]
     7dc:	ldr	r1, [fp, #-16]
     7e0:	ldr	r2, [fp, #16]
     7e4:	str	r0, [sp, #196]	; 0xc4
     7e8:	mov	r0, r1
     7ec:	movw	r1, #0
     7f0:	movt	r1, #0
     7f4:	ldr	r3, [sp, #196]	; 0xc4
     7f8:	blx	r3
     7fc:	b	800 <check_data+0x4f0>
     800:	b	804 <check_data+0x4f4>
     804:	b	808 <check_data+0x4f8>
     808:	ldr	r0, [fp, #-44]	; 0xffffffd4
     80c:	ldr	r0, [r0, #44]	; 0x2c
     810:	cmp	r0, #1
     814:	bne	950 <check_data+0x640>
     818:	ldr	r0, [fp, #-16]
     81c:	ldr	r0, [r0]
     820:	ldr	r0, [r0, #60]	; 0x3c
     824:	cmp	r0, #3
     828:	str	r0, [sp, #192]	; 0xc0
     82c:	bhi	94c <check_data+0x63c>
     830:	add	r0, pc, #8
     834:	ldr	r1, [sp, #192]	; 0xc0
     838:	ldr	r0, [r0, r1, lsl #2]
     83c:	mov	pc, r0
     840:	.word	0x0000092c
     844:	.word	0x00000850
     848:	.word	0x00000894
     84c:	.word	0x000008d8
     850:	ldr	r0, [fp, #-64]	; 0xffffffc0
     854:	cmp	r0, #1
     858:	bne	86c <check_data+0x55c>
     85c:	ldr	r0, [fp, #-60]	; 0xffffffc4
     860:	ldrb	r0, [r0]
     864:	cmp	r0, #10
     868:	beq	890 <check_data+0x580>
     86c:	ldr	r0, [fp, #12]
     870:	ldr	r1, [fp, #-16]
     874:	ldr	r2, [fp, #16]
     878:	str	r0, [sp, #188]	; 0xbc
     87c:	mov	r0, r1
     880:	movw	r1, #0
     884:	movt	r1, #0
     888:	ldr	r3, [sp, #188]	; 0xbc
     88c:	blx	r3
     890:	b	94c <check_data+0x63c>
     894:	ldr	r0, [fp, #-64]	; 0xffffffc0
     898:	cmp	r0, #1
     89c:	bne	8b0 <check_data+0x5a0>
     8a0:	ldr	r0, [fp, #-60]	; 0xffffffc4
     8a4:	ldrb	r0, [r0]
     8a8:	cmp	r0, #13
     8ac:	beq	8d4 <check_data+0x5c4>
     8b0:	ldr	r0, [fp, #12]
     8b4:	ldr	r1, [fp, #-16]
     8b8:	ldr	r2, [fp, #16]
     8bc:	str	r0, [sp, #184]	; 0xb8
     8c0:	mov	r0, r1
     8c4:	movw	r1, #0
     8c8:	movt	r1, #0
     8cc:	ldr	r3, [sp, #184]	; 0xb8
     8d0:	blx	r3
     8d4:	b	94c <check_data+0x63c>
     8d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
     8dc:	cmp	r0, #2
     8e0:	bne	904 <check_data+0x5f4>
     8e4:	ldr	r0, [fp, #-60]	; 0xffffffc4
     8e8:	ldrb	r0, [r0]
     8ec:	cmp	r0, #13
     8f0:	bne	904 <check_data+0x5f4>
     8f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
     8f8:	ldrb	r0, [r0, #1]
     8fc:	cmp	r0, #10
     900:	beq	928 <check_data+0x618>
     904:	ldr	r0, [fp, #12]
     908:	ldr	r1, [fp, #-16]
     90c:	ldr	r2, [fp, #16]
     910:	str	r0, [sp, #180]	; 0xb4
     914:	mov	r0, r1
     918:	movw	r1, #0
     91c:	movt	r1, #0
     920:	ldr	r3, [sp, #180]	; 0xb4
     924:	blx	r3
     928:	b	94c <check_data+0x63c>
     92c:	movw	r0, #0
     930:	movt	r0, #0
     934:	movw	r1, #0
     938:	movt	r1, #0
     93c:	movw	r2, #462	; 0x1ce
     940:	movw	r3, #0
     944:	movt	r3, #0
     948:	bl	0 <__assert_fail>
     94c:	b	950 <check_data+0x640>
     950:	ldr	r0, [fp, #-60]	; 0xffffffc4
     954:	movw	r1, #0
     958:	cmp	r0, r1
     95c:	beq	968 <check_data+0x658>
     960:	ldr	r0, [fp, #-60]	; 0xffffffc4
     964:	bl	0 <free>
     968:	b	d6c <check_data+0xa5c>
     96c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     970:	cmp	r0, #0
     974:	bne	a50 <check_data+0x740>
     978:	ldr	r0, [fp, #-16]
     97c:	ldr	r1, [fp, #8]
     980:	bl	0 <coda_cursor_get_bit_size>
     984:	cmp	r0, #0
     988:	beq	a4c <check_data+0x73c>
     98c:	ldr	r0, [pc, #4068]	; 1978 <check_data+0x1668>
     990:	ldr	r0, [pc, r0]
     994:	str	r0, [sp, #176]	; 0xb0
     998:	bl	0 <__aeabi_read_tp>
     99c:	ldr	r1, [sp, #176]	; 0xb0
     9a0:	ldr	r0, [r0, r1]
     9a4:	cmn	r0, #300	; 0x12c
     9a8:	beq	9f8 <check_data+0x6e8>
     9ac:	ldr	r0, [pc, #4040]	; 197c <check_data+0x166c>
     9b0:	ldr	r0, [pc, r0]
     9b4:	str	r0, [sp, #172]	; 0xac
     9b8:	bl	0 <__aeabi_read_tp>
     9bc:	ldr	r1, [sp, #172]	; 0xac
     9c0:	ldr	r0, [r0, r1]
     9c4:	cmn	r0, #103	; 0x67
     9c8:	beq	9f8 <check_data+0x6e8>
     9cc:	ldr	r0, [pc, #4012]	; 1980 <check_data+0x1670>
     9d0:	ldr	r0, [pc, r0]
     9d4:	str	r0, [sp, #168]	; 0xa8
     9d8:	bl	0 <__aeabi_read_tp>
     9dc:	ldr	r1, [sp, #168]	; 0xa8
     9e0:	ldr	r0, [r0, r1]
     9e4:	cmn	r0, #104	; 0x68
     9e8:	beq	9f8 <check_data+0x6e8>
     9ec:	mvn	r0, #0
     9f0:	str	r0, [fp, #-12]
     9f4:	b	1a08 <check_data+0x16f8>
     9f8:	ldr	r0, [fp, #12]
     9fc:	ldr	r1, [fp, #-16]
     a00:	ldr	r2, [pc, #3964]	; 1984 <check_data+0x1674>
     a04:	ldr	r2, [pc, r2]
     a08:	str	r0, [sp, #164]	; 0xa4
     a0c:	str	r1, [sp, #160]	; 0xa0
     a10:	str	r2, [sp, #156]	; 0x9c
     a14:	bl	0 <__aeabi_read_tp>
     a18:	ldr	r1, [sp, #156]	; 0x9c
     a1c:	ldr	r0, [r0, r1]
     a20:	bl	0 <coda_errno_to_string>
     a24:	ldr	r2, [fp, #16]
     a28:	ldr	r1, [sp, #160]	; 0xa0
     a2c:	str	r0, [sp, #152]	; 0x98
     a30:	mov	r0, r1
     a34:	ldr	r1, [sp, #152]	; 0x98
     a38:	ldr	r3, [sp, #164]	; 0xa4
     a3c:	blx	r3
     a40:	movw	r0, #1
     a44:	str	r0, [fp, #-36]	; 0xffffffdc
     a48:	b	d6c <check_data+0xa5c>
     a4c:	b	a50 <check_data+0x740>
     a50:	ldr	r0, [fp, #8]
     a54:	ldr	r0, [r0, #4]
     a58:	cmn	r0, #1
     a5c:	bgt	a94 <check_data+0x784>
     a60:	b	a64 <check_data+0x754>
     a64:	ldr	r0, [fp, #12]
     a68:	ldr	r1, [fp, #-16]
     a6c:	ldr	r2, [fp, #16]
     a70:	str	r0, [sp, #148]	; 0x94
     a74:	mov	r0, r1
     a78:	movw	r1, #0
     a7c:	movt	r1, #0
     a80:	ldr	r3, [sp, #148]	; 0x94
     a84:	blx	r3
     a88:	movw	r0, #1
     a8c:	str	r0, [fp, #-36]	; 0xffffffdc
     a90:	b	d6c <check_data+0xa5c>
     a94:	ldr	r0, [fp, #8]
     a98:	ldr	r1, [r0]
     a9c:	ldr	r0, [r0, #4]
     aa0:	lsr	r2, r1, #3
     aa4:	orr	r2, r2, r0, lsl #29
     aa8:	asr	r0, r0, #3
     aac:	and	r1, r1, #7
     ab0:	adds	r3, r2, #1
     ab4:	adc	ip, r0, #0
     ab8:	cmp	r1, #0
     abc:	movne	r2, r3
     ac0:	cmp	r1, #0
     ac4:	movne	r0, ip
     ac8:	str	r2, [fp, #-80]	; 0xffffffb0
     acc:	str	r0, [fp, #-76]	; 0xffffffb4
     ad0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ad4:	ldr	r0, [r0]
     ad8:	movw	r1, #0
     adc:	cmp	r0, r1
     ae0:	beq	af4 <check_data+0x7e4>
     ae4:	ldr	r0, [fp, #-20]	; 0xffffffec
     ae8:	ldr	r0, [r0]
     aec:	str	r0, [sp, #144]	; 0x90
     af0:	b	afc <check_data+0x7ec>
     af4:	ldr	r0, [fp, #-44]	; 0xffffffd4
     af8:	str	r0, [sp, #144]	; 0x90
     afc:	ldr	r0, [sp, #144]	; 0x90
     b00:	sub	r1, fp, #84	; 0x54
     b04:	sub	r2, fp, #88	; 0x58
     b08:	bl	0 <coda_type_get_fixed_value>
     b0c:	cmp	r0, #0
     b10:	beq	b20 <check_data+0x810>
     b14:	mvn	r0, #0
     b18:	str	r0, [fp, #-12]
     b1c:	b	1a08 <check_data+0x16f8>
     b20:	ldr	r0, [fp, #-84]	; 0xffffffac
     b24:	movw	r1, #0
     b28:	cmp	r0, r1
     b2c:	beq	c6c <check_data+0x95c>
     b30:	ldr	r0, [fp, #-80]	; 0xffffffb0
     b34:	ldr	r1, [fp, #-76]	; 0xffffffb4
     b38:	ldr	r2, [fp, #-88]	; 0xffffffa8
     b3c:	eor	r1, r1, r2, asr #31
     b40:	eor	r0, r0, r2
     b44:	orr	r0, r0, r1
     b48:	cmp	r0, #0
     b4c:	beq	b7c <check_data+0x86c>
     b50:	b	b54 <check_data+0x844>
     b54:	ldr	r0, [fp, #12]
     b58:	ldr	r1, [fp, #-16]
     b5c:	ldr	r2, [fp, #16]
     b60:	str	r0, [sp, #140]	; 0x8c
     b64:	mov	r0, r1
     b68:	movw	r1, #0
     b6c:	movt	r1, #0
     b70:	ldr	r3, [sp, #140]	; 0x8c
     b74:	blx	r3
     b78:	b	c68 <check_data+0x958>
     b7c:	ldr	r0, [fp, #-88]	; 0xffffffa8
     b80:	cmp	r0, #0
     b84:	ble	c64 <check_data+0x954>
     b88:	ldr	r0, [fp, #-80]	; 0xffffffb0
     b8c:	bl	0 <malloc>
     b90:	str	r0, [fp, #-92]	; 0xffffffa4
     b94:	ldr	r0, [fp, #-92]	; 0xffffffa4
     b98:	movw	r1, #0
     b9c:	cmp	r0, r1
     ba0:	bne	bd4 <check_data+0x8c4>
     ba4:	ldr	r2, [fp, #-80]	; 0xffffffb0
     ba8:	mvn	r0, #0
     bac:	movw	r1, #0
     bb0:	movt	r1, #0
     bb4:	movw	r3, #0
     bb8:	movt	r3, #0
     bbc:	movw	ip, #524	; 0x20c
     bc0:	str	ip, [sp]
     bc4:	bl	0 <coda_set_error>
     bc8:	mvn	r0, #0
     bcc:	str	r0, [fp, #-12]
     bd0:	b	1a08 <check_data+0x16f8>
     bd4:	ldr	r0, [fp, #-16]
     bd8:	ldr	r1, [fp, #-92]	; 0xffffffa4
     bdc:	ldr	r2, [fp, #8]
     be0:	ldr	r3, [r2]
     be4:	ldr	r2, [r2, #4]
     be8:	mov	ip, sp
     bec:	str	r2, [ip, #4]
     bf0:	str	r3, [ip]
     bf4:	mov	r2, #0
     bf8:	str	r2, [sp, #136]	; 0x88
     bfc:	ldr	r3, [sp, #136]	; 0x88
     c00:	bl	0 <coda_cursor_read_bits>
     c04:	cmp	r0, #0
     c08:	beq	c20 <check_data+0x910>
     c0c:	ldr	r0, [fp, #-92]	; 0xffffffa4
     c10:	bl	0 <free>
     c14:	mvn	r0, #0
     c18:	str	r0, [fp, #-12]
     c1c:	b	1a08 <check_data+0x16f8>
     c20:	ldr	r0, [fp, #-92]	; 0xffffffa4
     c24:	ldr	r1, [fp, #-84]	; 0xffffffac
     c28:	ldr	r2, [fp, #-88]	; 0xffffffa8
     c2c:	bl	0 <memcmp>
     c30:	cmp	r0, #0
     c34:	beq	c5c <check_data+0x94c>
     c38:	ldr	r0, [fp, #12]
     c3c:	ldr	r1, [fp, #-16]
     c40:	ldr	r2, [fp, #16]
     c44:	str	r0, [sp, #132]	; 0x84
     c48:	mov	r0, r1
     c4c:	movw	r1, #0
     c50:	movt	r1, #0
     c54:	ldr	r3, [sp, #132]	; 0x84
     c58:	blx	r3
     c5c:	ldr	r0, [fp, #-92]	; 0xffffffa4
     c60:	bl	0 <free>
     c64:	b	c68 <check_data+0x958>
     c68:	b	c6c <check_data+0x95c>
     c6c:	b	d6c <check_data+0xa5c>
     c70:	ldr	r0, [fp, #-16]
     c74:	sub	r1, fp, #96	; 0x60
     c78:	bl	0 <coda_cursor_get_special_type>
     c7c:	cmp	r0, #0
     c80:	beq	c90 <check_data+0x980>
     c84:	mvn	r0, #0
     c88:	str	r0, [fp, #-12]
     c8c:	b	1a08 <check_data+0x16f8>
     c90:	ldr	r0, [fp, #-96]	; 0xffffffa0
     c94:	cmp	r0, #2
     c98:	bne	d68 <check_data+0xa58>
     c9c:	ldr	r0, [fp, #-16]
     ca0:	sub	r1, fp, #104	; 0x68
     ca4:	bl	0 <coda_cursor_read_double>
     ca8:	cmp	r0, #0
     cac:	beq	d64 <check_data+0xa54>
     cb0:	ldr	r0, [pc, #3420]	; 1a14 <check_data+0x1704>
     cb4:	ldr	r0, [pc, r0]
     cb8:	str	r0, [sp, #128]	; 0x80
     cbc:	bl	0 <__aeabi_read_tp>
     cc0:	ldr	r1, [sp, #128]	; 0x80
     cc4:	ldr	r0, [r0, r1]
     cc8:	cmn	r0, #300	; 0x12c
     ccc:	beq	d1c <check_data+0xa0c>
     cd0:	ldr	r0, [pc, #3392]	; 1a18 <check_data+0x1708>
     cd4:	ldr	r0, [pc, r0]
     cd8:	str	r0, [sp, #124]	; 0x7c
     cdc:	bl	0 <__aeabi_read_tp>
     ce0:	ldr	r1, [sp, #124]	; 0x7c
     ce4:	ldr	r0, [r0, r1]
     ce8:	cmn	r0, #103	; 0x67
     cec:	beq	d1c <check_data+0xa0c>
     cf0:	ldr	r0, [pc, #3364]	; 1a1c <check_data+0x170c>
     cf4:	ldr	r0, [pc, r0]
     cf8:	str	r0, [sp, #120]	; 0x78
     cfc:	bl	0 <__aeabi_read_tp>
     d00:	ldr	r1, [sp, #120]	; 0x78
     d04:	ldr	r0, [r0, r1]
     d08:	cmn	r0, #104	; 0x68
     d0c:	beq	d1c <check_data+0xa0c>
     d10:	mvn	r0, #0
     d14:	str	r0, [fp, #-12]
     d18:	b	1a08 <check_data+0x16f8>
     d1c:	ldr	r0, [fp, #12]
     d20:	ldr	r1, [fp, #-16]
     d24:	ldr	r2, [pc, #3316]	; 1a20 <check_data+0x1710>
     d28:	ldr	r2, [pc, r2]
     d2c:	str	r0, [sp, #116]	; 0x74
     d30:	str	r1, [sp, #112]	; 0x70
     d34:	str	r2, [sp, #108]	; 0x6c
     d38:	bl	0 <__aeabi_read_tp>
     d3c:	ldr	r1, [sp, #108]	; 0x6c
     d40:	ldr	r0, [r0, r1]
     d44:	bl	0 <coda_errno_to_string>
     d48:	ldr	r2, [fp, #16]
     d4c:	ldr	r1, [sp, #112]	; 0x70
     d50:	str	r0, [sp, #104]	; 0x68
     d54:	mov	r0, r1
     d58:	ldr	r1, [sp, #104]	; 0x68
     d5c:	ldr	r3, [sp, #116]	; 0x74
     d60:	blx	r3
     d64:	b	d68 <check_data+0xa58>
     d68:	b	d6c <check_data+0xa5c>
     d6c:	b	d70 <check_data+0xa60>
     d70:	ldr	r0, [fp, #-16]
     d74:	sub	r1, fp, #40	; 0x28
     d78:	bl	0 <coda_cursor_has_attributes>
     d7c:	cmp	r0, #0
     d80:	beq	d90 <check_data+0xa80>
     d84:	mvn	r0, #0
     d88:	str	r0, [fp, #-12]
     d8c:	b	1a08 <check_data+0x16f8>
     d90:	ldr	r0, [fp, #-40]	; 0xffffffd8
     d94:	cmp	r0, #0
     d98:	beq	e8c <check_data+0xb7c>
     d9c:	movw	r0, #0
     da0:	str	r0, [fp, #-108]	; 0xffffff94
     da4:	ldr	r1, [fp, #-20]	; 0xffffffec
     da8:	ldr	r1, [r1]
     dac:	cmp	r1, r0
     db0:	beq	ddc <check_data+0xacc>
     db4:	ldr	r0, [fp, #-20]	; 0xffffffec
     db8:	ldr	r0, [r0]
     dbc:	sub	r1, fp, #108	; 0x6c
     dc0:	bl	0 <coda_type_get_attributes>
     dc4:	cmp	r0, #0
     dc8:	beq	dd8 <check_data+0xac8>
     dcc:	mvn	r0, #0
     dd0:	str	r0, [fp, #-12]
     dd4:	b	1a08 <check_data+0x16f8>
     dd8:	b	ddc <check_data+0xacc>
     ddc:	ldr	r0, [fp, #-16]
     de0:	bl	0 <coda_cursor_goto_attributes>
     de4:	cmp	r0, #0
     de8:	beq	df8 <check_data+0xae8>
     dec:	mvn	r0, #0
     df0:	str	r0, [fp, #-12]
     df4:	b	1a08 <check_data+0x16f8>
     df8:	ldr	r0, [fp, #-16]
     dfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e00:	ldr	r1, [fp, #12]
     e04:	ldr	r3, [fp, #16]
     e08:	sub	ip, fp, #108	; 0x6c
     e0c:	str	r1, [sp, #100]	; 0x64
     e10:	mov	r1, ip
     e14:	movw	ip, #0
     e18:	str	r3, [sp, #96]	; 0x60
     e1c:	mov	r3, ip
     e20:	sub	ip, fp, #120	; 0x78
     e24:	str	ip, [sp]
     e28:	ldr	ip, [sp, #100]	; 0x64
     e2c:	str	ip, [sp, #4]
     e30:	ldr	lr, [sp, #96]	; 0x60
     e34:	str	lr, [sp, #8]
     e38:	bl	310 <check_data>
     e3c:	cmp	r0, #0
     e40:	beq	e50 <check_data+0xb40>
     e44:	mvn	r0, #0
     e48:	str	r0, [fp, #-12]
     e4c:	b	1a08 <check_data+0x16f8>
     e50:	ldr	r0, [fp, #-16]
     e54:	bl	0 <coda_cursor_goto_parent>
     e58:	ldr	r1, [fp, #-20]	; 0xffffffec
     e5c:	ldr	r1, [r1]
     e60:	movw	r2, #0
     e64:	cmp	r1, r2
     e68:	beq	e88 <check_data+0xb78>
     e6c:	ldr	r0, [fp, #-108]	; 0xffffff94
     e70:	movw	r1, #0
     e74:	cmp	r0, r1
     e78:	bne	e88 <check_data+0xb78>
     e7c:	ldr	r0, [fp, #-20]	; 0xffffffec
     e80:	movw	r1, #0
     e84:	str	r1, [r0]
     e88:	b	e8c <check_data+0xb7c>
     e8c:	ldr	r0, [fp, #-20]	; 0xffffffec
     e90:	ldr	r0, [r0]
     e94:	movw	r1, #0
     e98:	cmp	r0, r1
     e9c:	bne	eb8 <check_data+0xba8>
     ea0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ea4:	cmp	r0, #0
     ea8:	bne	eb8 <check_data+0xba8>
     eac:	ldr	r0, [fp, #-28]	; 0xffffffe4
     eb0:	cmp	r0, #0
     eb4:	beq	15dc <check_data+0x12cc>
     eb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     ebc:	cmp	r0, #6
     ec0:	str	r0, [sp, #92]	; 0x5c
     ec4:	bhi	15d8 <check_data+0x12c8>
     ec8:	add	r0, pc, #8
     ecc:	ldr	r1, [sp, #92]	; 0x5c
     ed0:	ldr	r0, [r0, r1, lsl #2]
     ed4:	mov	pc, r0
     ed8:	.word	0x00001098
     edc:	.word	0x00000ef4
     ee0:	.word	0x000014b4
     ee4:	.word	0x000014b4
     ee8:	.word	0x000014b4
     eec:	.word	0x000014b4
     ef0:	.word	0x000014c0
     ef4:	movw	r0, #0
     ef8:	str	r0, [fp, #-132]	; 0xffffff7c
     efc:	ldr	r1, [fp, #-20]	; 0xffffffec
     f00:	ldr	r1, [r1]
     f04:	cmp	r1, r0
     f08:	beq	f34 <check_data+0xc24>
     f0c:	ldr	r0, [fp, #-20]	; 0xffffffec
     f10:	ldr	r0, [r0]
     f14:	sub	r1, fp, #132	; 0x84
     f18:	bl	0 <coda_type_get_array_base_type>
     f1c:	cmp	r0, #0
     f20:	beq	f30 <check_data+0xc20>
     f24:	mvn	r0, #0
     f28:	str	r0, [fp, #-12]
     f2c:	b	1a08 <check_data+0x16f8>
     f30:	b	f34 <check_data+0xc24>
     f34:	ldr	r0, [fp, #-16]
     f38:	sub	r1, fp, #136	; 0x88
     f3c:	bl	0 <coda_cursor_get_num_elements>
     f40:	cmp	r0, #0
     f44:	beq	f54 <check_data+0xc44>
     f48:	mvn	r0, #0
     f4c:	str	r0, [fp, #-12]
     f50:	b	1a08 <check_data+0x16f8>
     f54:	ldr	r0, [fp, #-136]	; 0xffffff78
     f58:	cmp	r0, #0
     f5c:	ble	1094 <check_data+0xd84>
     f60:	ldr	r0, [fp, #-16]
     f64:	bl	0 <coda_cursor_goto_first_array_element>
     f68:	cmp	r0, #0
     f6c:	beq	f7c <check_data+0xc6c>
     f70:	mvn	r0, #0
     f74:	str	r0, [fp, #-12]
     f78:	b	1a08 <check_data+0x16f8>
     f7c:	movw	r0, #0
     f80:	str	r0, [fp, #-140]	; 0xffffff74
     f84:	ldr	r0, [fp, #-140]	; 0xffffff74
     f88:	ldr	r1, [fp, #-136]	; 0xffffff78
     f8c:	cmp	r0, r1
     f90:	bge	1058 <check_data+0xd48>
     f94:	ldr	r0, [fp, #-16]
     f98:	ldr	r2, [fp, #-24]	; 0xffffffe8
     f9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     fa0:	ldr	r1, [fp, #12]
     fa4:	ldr	ip, [fp, #16]
     fa8:	sub	lr, fp, #132	; 0x84
     fac:	str	r1, [sp, #88]	; 0x58
     fb0:	mov	r1, lr
     fb4:	sub	lr, fp, #128	; 0x80
     fb8:	str	lr, [sp]
     fbc:	ldr	lr, [sp, #88]	; 0x58
     fc0:	str	lr, [sp, #4]
     fc4:	str	ip, [sp, #8]
     fc8:	bl	310 <check_data>
     fcc:	cmp	r0, #0
     fd0:	beq	fe0 <check_data+0xcd0>
     fd4:	mvn	r0, #0
     fd8:	str	r0, [fp, #-12]
     fdc:	b	1a08 <check_data+0x16f8>
     fe0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     fe4:	cmp	r0, #0
     fe8:	beq	1010 <check_data+0xd00>
     fec:	ldr	r0, [fp, #-128]	; 0xffffff80
     ff0:	ldr	r1, [fp, #-124]	; 0xffffff84
     ff4:	ldr	r2, [fp, #8]
     ff8:	ldr	r3, [r2]
     ffc:	ldr	ip, [r2, #4]
    1000:	adds	r0, r3, r0
    1004:	adc	r1, ip, r1
    1008:	str	r0, [r2]
    100c:	str	r1, [r2, #4]
    1010:	ldr	r0, [fp, #-140]	; 0xffffff74
    1014:	ldr	r1, [fp, #-136]	; 0xffffff78
    1018:	sub	r1, r1, #1
    101c:	cmp	r0, r1
    1020:	bge	1044 <check_data+0xd34>
    1024:	ldr	r0, [fp, #-16]
    1028:	bl	0 <coda_cursor_goto_next_array_element>
    102c:	cmp	r0, #0
    1030:	beq	1040 <check_data+0xd30>
    1034:	mvn	r0, #0
    1038:	str	r0, [fp, #-12]
    103c:	b	1a08 <check_data+0x16f8>
    1040:	b	1044 <check_data+0xd34>
    1044:	b	1048 <check_data+0xd38>
    1048:	ldr	r0, [fp, #-140]	; 0xffffff74
    104c:	add	r0, r0, #1
    1050:	str	r0, [fp, #-140]	; 0xffffff74
    1054:	b	f84 <check_data+0xc74>
    1058:	ldr	r0, [fp, #-16]
    105c:	bl	0 <coda_cursor_goto_parent>
    1060:	ldr	r1, [fp, #-20]	; 0xffffffec
    1064:	ldr	r1, [r1]
    1068:	movw	r2, #0
    106c:	cmp	r1, r2
    1070:	beq	1090 <check_data+0xd80>
    1074:	ldr	r0, [fp, #-132]	; 0xffffff7c
    1078:	movw	r1, #0
    107c:	cmp	r0, r1
    1080:	bne	1090 <check_data+0xd80>
    1084:	ldr	r0, [fp, #-20]	; 0xffffffec
    1088:	movw	r1, #0
    108c:	str	r1, [r0]
    1090:	b	1094 <check_data+0xd84>
    1094:	b	15d8 <check_data+0x12c8>
    1098:	ldr	r0, [fp, #-16]
    109c:	sub	r1, fp, #664	; 0x298
    10a0:	mov	r2, r1
    10a4:	str	r0, [sp, #84]	; 0x54
    10a8:	mov	r0, r2
    10ac:	ldr	r2, [sp, #84]	; 0x54
    10b0:	str	r1, [sp, #80]	; 0x50
    10b4:	mov	r1, r2
    10b8:	movw	r2, #520	; 0x208
    10bc:	bl	0 <memcpy>
    10c0:	ldr	r0, [sp, #80]	; 0x50
    10c4:	sub	r1, fp, #668	; 0x29c
    10c8:	bl	0 <coda_cursor_get_num_elements>
    10cc:	cmp	r0, #0
    10d0:	beq	10e0 <check_data+0xdd0>
    10d4:	mvn	r0, #0
    10d8:	str	r0, [fp, #-12]
    10dc:	b	1a08 <check_data+0x16f8>
    10e0:	ldr	r0, [fp, #-668]	; 0xfffffd64
    10e4:	cmp	r0, #0
    10e8:	ble	12cc <check_data+0xfbc>
    10ec:	ldr	r0, [fp, #-16]
    10f0:	bl	0 <coda_cursor_goto_first_record_field>
    10f4:	cmp	r0, #0
    10f8:	beq	1108 <check_data+0xdf8>
    10fc:	mvn	r0, #0
    1100:	str	r0, [fp, #-12]
    1104:	b	1a08 <check_data+0x16f8>
    1108:	movw	r0, #0
    110c:	str	r0, [fp, #-672]	; 0xfffffd60
    1110:	ldr	r0, [fp, #-672]	; 0xfffffd60
    1114:	ldr	r1, [fp, #-668]	; 0xfffffd64
    1118:	cmp	r0, r1
    111c:	bge	12c4 <check_data+0xfb4>
    1120:	movw	r0, #0
    1124:	str	r0, [fp, #-676]	; 0xfffffd5c
    1128:	ldr	r1, [fp, #-672]	; 0xfffffd60
    112c:	sub	r0, fp, #664	; 0x298
    1130:	sub	r2, fp, #680	; 0x2a8
    1134:	bl	0 <coda_cursor_get_record_field_available_status>
    1138:	cmp	r0, #0
    113c:	beq	114c <check_data+0xe3c>
    1140:	mvn	r0, #0
    1144:	str	r0, [fp, #-12]
    1148:	b	1a08 <check_data+0x16f8>
    114c:	ldr	r0, [fp, #-680]	; 0xfffffd58
    1150:	cmp	r0, #0
    1154:	beq	127c <check_data+0xf6c>
    1158:	ldr	r0, [fp, #-20]	; 0xffffffec
    115c:	ldr	r0, [r0]
    1160:	movw	r1, #0
    1164:	cmp	r0, r1
    1168:	beq	11fc <check_data+0xeec>
    116c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1170:	ldr	r1, [fp, #-672]	; 0xfffffd60
    1174:	sub	r2, fp, #684	; 0x2ac
    1178:	bl	0 <coda_type_get_record_field_name>
    117c:	cmp	r0, #0
    1180:	beq	1190 <check_data+0xe80>
    1184:	mvn	r0, #0
    1188:	str	r0, [fp, #-12]
    118c:	b	1a08 <check_data+0x16f8>
    1190:	ldr	r0, [fp, #-20]	; 0xffffffec
    1194:	ldr	r0, [r0]
    1198:	ldr	r1, [fp, #-684]	; 0xfffffd54
    119c:	sub	r2, fp, #688	; 0x2b0
    11a0:	bl	0 <coda_type_get_record_field_index_from_name>
    11a4:	cmp	r0, #0
    11a8:	beq	11cc <check_data+0xebc>
    11ac:	ldr	r0, [pc, #2164]	; 1a28 <check_data+0x1718>
    11b0:	ldr	r0, [pc, r0]
    11b4:	str	r0, [sp, #76]	; 0x4c
    11b8:	bl	0 <__aeabi_read_tp>
    11bc:	mov	r1, #0
    11c0:	ldr	r2, [sp, #76]	; 0x4c
    11c4:	str	r1, [r0, r2]
    11c8:	b	11f8 <check_data+0xee8>
    11cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    11d0:	ldr	r0, [r0]
    11d4:	ldr	r1, [fp, #-688]	; 0xfffffd50
    11d8:	sub	r2, fp, #676	; 0x2a4
    11dc:	bl	0 <coda_type_get_record_field_type>
    11e0:	cmp	r0, #0
    11e4:	beq	11f4 <check_data+0xee4>
    11e8:	mvn	r0, #0
    11ec:	str	r0, [fp, #-12]
    11f0:	b	1a08 <check_data+0x16f8>
    11f4:	b	11f8 <check_data+0xee8>
    11f8:	b	11fc <check_data+0xeec>
    11fc:	ldr	r0, [fp, #-16]
    1200:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1204:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1208:	ldr	r1, [fp, #12]
    120c:	ldr	ip, [fp, #16]
    1210:	sub	lr, fp, #676	; 0x2a4
    1214:	str	r1, [sp, #72]	; 0x48
    1218:	mov	r1, lr
    121c:	sub	lr, fp, #128	; 0x80
    1220:	str	lr, [sp]
    1224:	ldr	lr, [sp, #72]	; 0x48
    1228:	str	lr, [sp, #4]
    122c:	str	ip, [sp, #8]
    1230:	bl	310 <check_data>
    1234:	cmp	r0, #0
    1238:	beq	1248 <check_data+0xf38>
    123c:	mvn	r0, #0
    1240:	str	r0, [fp, #-12]
    1244:	b	1a08 <check_data+0x16f8>
    1248:	ldr	r0, [fp, #-28]	; 0xffffffe4
    124c:	cmp	r0, #0
    1250:	beq	1278 <check_data+0xf68>
    1254:	ldr	r0, [fp, #-128]	; 0xffffff80
    1258:	ldr	r1, [fp, #-124]	; 0xffffff84
    125c:	ldr	r2, [fp, #8]
    1260:	ldr	r3, [r2]
    1264:	ldr	ip, [r2, #4]
    1268:	adds	r0, r3, r0
    126c:	adc	r1, ip, r1
    1270:	str	r0, [r2]
    1274:	str	r1, [r2, #4]
    1278:	b	127c <check_data+0xf6c>
    127c:	ldr	r0, [fp, #-672]	; 0xfffffd60
    1280:	ldr	r1, [fp, #-668]	; 0xfffffd64
    1284:	sub	r1, r1, #1
    1288:	cmp	r0, r1
    128c:	bge	12b0 <check_data+0xfa0>
    1290:	ldr	r0, [fp, #-16]
    1294:	bl	0 <coda_cursor_goto_next_record_field>
    1298:	cmp	r0, #0
    129c:	beq	12ac <check_data+0xf9c>
    12a0:	mvn	r0, #0
    12a4:	str	r0, [fp, #-12]
    12a8:	b	1a08 <check_data+0x16f8>
    12ac:	b	12b0 <check_data+0xfa0>
    12b0:	b	12b4 <check_data+0xfa4>
    12b4:	ldr	r0, [fp, #-672]	; 0xfffffd60
    12b8:	add	r0, r0, #1
    12bc:	str	r0, [fp, #-672]	; 0xfffffd60
    12c0:	b	1110 <check_data+0xe00>
    12c4:	ldr	r0, [fp, #-16]
    12c8:	bl	0 <coda_cursor_goto_parent>
    12cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    12d0:	cmp	r0, #0
    12d4:	beq	14b0 <check_data+0x11a0>
    12d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    12dc:	ldr	r0, [r0, #32]
    12e0:	movw	r1, #0
    12e4:	cmp	r0, r1
    12e8:	beq	14b0 <check_data+0x11a0>
    12ec:	bl	0 <coda_get_option_use_fast_size_expressions>
    12f0:	str	r0, [fp, #-700]	; 0xfffffd44
    12f4:	movw	r0, #1
    12f8:	bl	0 <coda_set_option_use_fast_size_expressions>
    12fc:	ldr	r1, [fp, #-16]
    1300:	str	r0, [sp, #68]	; 0x44
    1304:	mov	r0, r1
    1308:	sub	r1, fp, #696	; 0x2b8
    130c:	bl	0 <coda_cursor_get_bit_size>
    1310:	cmp	r0, #0
    1314:	beq	136c <check_data+0x105c>
    1318:	ldr	r0, [fp, #12]
    131c:	ldr	r1, [fp, #-16]
    1320:	ldr	r2, [pc, #1788]	; 1a24 <check_data+0x1714>
    1324:	ldr	r2, [pc, r2]
    1328:	str	r0, [sp, #64]	; 0x40
    132c:	str	r1, [sp, #60]	; 0x3c
    1330:	str	r2, [sp, #56]	; 0x38
    1334:	bl	0 <__aeabi_read_tp>
    1338:	ldr	r1, [sp, #56]	; 0x38
    133c:	ldr	r0, [r0, r1]
    1340:	bl	0 <coda_errno_to_string>
    1344:	ldr	r2, [fp, #16]
    1348:	ldr	r1, [sp, #60]	; 0x3c
    134c:	str	r0, [sp, #52]	; 0x34
    1350:	mov	r0, r1
    1354:	ldr	r1, [sp, #52]	; 0x34
    1358:	ldr	r3, [sp, #64]	; 0x40
    135c:	blx	r3
    1360:	movw	r0, #1
    1364:	str	r0, [fp, #-36]	; 0xffffffdc
    1368:	b	14a8 <check_data+0x1198>
    136c:	ldr	r0, [fp, #8]
    1370:	ldr	r1, [r0]
    1374:	ldr	r0, [r0, #4]
    1378:	ldr	r2, [fp, #-696]	; 0xfffffd48
    137c:	ldr	r3, [fp, #-692]	; 0xfffffd4c
    1380:	eor	r0, r0, r3
    1384:	eor	r1, r1, r2
    1388:	orr	r0, r1, r0
    138c:	cmp	r0, #0
    1390:	beq	14a4 <check_data+0x1194>
    1394:	b	1398 <check_data+0x1088>
    1398:	ldr	r0, [fp, #8]
    139c:	ldr	r1, [r0]
    13a0:	ldr	r0, [r0, #4]
    13a4:	lsr	r1, r1, #3
    13a8:	orr	r1, r1, r0, lsl #29
    13ac:	asr	r0, r0, #3
    13b0:	add	lr, sp, #512	; 0x200
    13b4:	add	r2, lr, #158	; 0x9e
    13b8:	str	r0, [sp, #48]	; 0x30
    13bc:	mov	r0, r1
    13c0:	ldr	r1, [sp, #48]	; 0x30
    13c4:	bl	0 <coda_str64>
    13c8:	ldr	r0, [fp, #8]
    13cc:	ldrb	r0, [r0]
    13d0:	tst	r0, #7
    13d4:	beq	140c <check_data+0x10fc>
    13d8:	b	13dc <check_data+0x10cc>
    13dc:	add	lr, sp, #512	; 0x200
    13e0:	add	r0, lr, #158	; 0x9e
    13e4:	str	r0, [sp, #44]	; 0x2c
    13e8:	bl	0 <strlen>
    13ec:	ldr	r1, [sp, #44]	; 0x2c
    13f0:	add	r0, r1, r0
    13f4:	ldr	r2, [fp, #8]
    13f8:	ldr	r2, [r2]
    13fc:	and	r2, r2, #7
    1400:	movw	r1, #0
    1404:	movt	r1, #0
    1408:	bl	0 <sprintf>
    140c:	ldr	r0, [fp, #-696]	; 0xfffffd48
    1410:	ldr	r1, [fp, #-692]	; 0xfffffd4c
    1414:	lsr	r0, r0, #3
    1418:	orr	r0, r0, r1, lsl #29
    141c:	asr	r1, r1, #3
    1420:	add	r2, sp, #640	; 0x280
    1424:	bl	0 <coda_str64>
    1428:	ldrb	r0, [fp, #-696]	; 0xfffffd48
    142c:	tst	r0, #7
    1430:	beq	1460 <check_data+0x1150>
    1434:	b	1438 <check_data+0x1128>
    1438:	add	r0, sp, #640	; 0x280
    143c:	str	r0, [sp, #40]	; 0x28
    1440:	bl	0 <strlen>
    1444:	ldr	r1, [sp, #40]	; 0x28
    1448:	add	r0, r1, r0
    144c:	ldr	r2, [fp, #-696]	; 0xfffffd48
    1450:	and	r2, r2, #7
    1454:	movw	r1, #0
    1458:	movt	r1, #0
    145c:	bl	0 <sprintf>
    1460:	add	r3, sp, #640	; 0x280
    1464:	add	lr, sp, #512	; 0x200
    1468:	add	r2, lr, #158	; 0x9e
    146c:	add	r0, sp, #700	; 0x2bc
    1470:	movw	r1, #0
    1474:	movt	r1, #0
    1478:	bl	0 <sprintf>
    147c:	add	r1, sp, #700	; 0x2bc
    1480:	ldr	r2, [fp, #12]
    1484:	ldr	r3, [fp, #-16]
    1488:	ldr	ip, [fp, #16]
    148c:	str	r0, [sp, #36]	; 0x24
    1490:	mov	r0, r3
    1494:	str	r2, [sp, #32]
    1498:	mov	r2, ip
    149c:	ldr	r3, [sp, #32]
    14a0:	blx	r3
    14a4:	b	14a8 <check_data+0x1198>
    14a8:	ldr	r0, [fp, #-700]	; 0xfffffd44
    14ac:	bl	0 <coda_set_option_use_fast_size_expressions>
    14b0:	b	15d8 <check_data+0x12c8>
    14b4:	b	15d8 <check_data+0x12c8>
    14b8:	.word	0x00000ff4
    14bc:	.word	0x00000fd8
    14c0:	movw	r0, #0
    14c4:	str	r0, [sp, #632]	; 0x278
    14c8:	ldr	r0, [fp, #-16]
    14cc:	add	r1, sp, #636	; 0x27c
    14d0:	bl	0 <coda_cursor_get_special_type>
    14d4:	cmp	r0, #0
    14d8:	beq	14e8 <check_data+0x11d8>
    14dc:	mvn	r0, #0
    14e0:	str	r0, [fp, #-12]
    14e4:	b	1a08 <check_data+0x16f8>
    14e8:	ldr	r0, [sp, #636]	; 0x27c
    14ec:	cmp	r0, #0
    14f0:	beq	14fc <check_data+0x11ec>
    14f4:	b	1520 <check_data+0x1210>
    14f8:	.word	0x00000ff4
    14fc:	movw	r0, #0
    1500:	movt	r0, #0
    1504:	movw	r1, #0
    1508:	movt	r1, #0
    150c:	movw	r2, #778	; 0x30a
    1510:	movw	r3, #0
    1514:	movt	r3, #0
    1518:	bl	0 <__assert_fail>
    151c:	.word	0x00000fe4
    1520:	ldr	r0, [fp, #-20]	; 0xffffffec
    1524:	ldr	r0, [r0]
    1528:	movw	r1, #0
    152c:	cmp	r0, r1
    1530:	beq	155c <check_data+0x124c>
    1534:	ldr	r0, [fp, #-20]	; 0xffffffec
    1538:	ldr	r0, [r0]
    153c:	add	r1, sp, #632	; 0x278
    1540:	bl	0 <coda_type_get_special_base_type>
    1544:	cmp	r0, #0
    1548:	beq	1558 <check_data+0x1248>
    154c:	mvn	r0, #0
    1550:	str	r0, [fp, #-12]
    1554:	b	1a08 <check_data+0x16f8>
    1558:	b	155c <check_data+0x124c>
    155c:	ldr	r0, [fp, #-16]
    1560:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1564:	cmp	r0, #0
    1568:	beq	1580 <check_data+0x1270>
    156c:	mvn	r0, #0
    1570:	str	r0, [fp, #-12]
    1574:	b	1a08 <check_data+0x16f8>
    1578:	.word	0x00000fe0
    157c:	.word	0x00000fc4
    1580:	ldr	r0, [fp, #-16]
    1584:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1588:	ldr	r3, [fp, #-28]	; 0xffffffe4
    158c:	ldr	r1, [fp, #8]
    1590:	ldr	ip, [fp, #12]
    1594:	ldr	lr, [fp, #16]
    1598:	add	r4, sp, #632	; 0x278
    159c:	str	r1, [sp, #28]
    15a0:	mov	r1, r4
    15a4:	ldr	r4, [sp, #28]
    15a8:	str	r4, [sp]
    15ac:	str	ip, [sp, #4]
    15b0:	str	lr, [sp, #8]
    15b4:	bl	310 <check_data>
    15b8:	cmp	r0, #0
    15bc:	beq	15d4 <check_data+0x12c4>
    15c0:	mvn	r0, #0
    15c4:	str	r0, [fp, #-12]
    15c8:	b	1a08 <check_data+0x16f8>
    15cc:	.word	0x00000ff4
    15d0:	.word	0x00000fc4
    15d4:	b	15d8 <check_data+0x12c8>
    15d8:	b	15dc <check_data+0x12cc>
    15dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    15e0:	cmp	r0, #0
    15e4:	beq	1a00 <check_data+0x16f0>
    15e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    15ec:	cmp	r0, #0
    15f0:	bne	1a00 <check_data+0x16f0>
    15f4:	ldr	r0, [fp, #-16]
    15f8:	add	r1, r0, #8
    15fc:	ldr	r0, [r0, #4]
    1600:	sub	r0, r0, #1
    1604:	add	r0, r1, r0, lsl #4
    1608:	ldr	r0, [r0]
    160c:	ldr	r0, [r0]
    1610:	cmp	r0, #100	; 0x64
    1614:	bne	1a00 <check_data+0x16f0>
    1618:	ldr	r0, [fp, #-16]
    161c:	add	r1, r0, #8
    1620:	ldr	r0, [r0, #4]
    1624:	sub	r0, r0, #1
    1628:	add	r0, r1, r0, lsl #4
    162c:	ldr	r0, [r0]
    1630:	ldr	r0, [r0, #8]
    1634:	cmp	r0, #2
    1638:	bne	19fc <check_data+0x16ec>
    163c:	ldr	r0, [fp, #-16]
    1640:	ldr	r1, [r0, #4]
    1644:	add	r0, r0, r1, lsl #4
    1648:	ldr	r0, [r0, #-8]
    164c:	ldr	r0, [r0, #16]
    1650:	asr	r1, r0, #31
    1654:	str	r0, [sp, #624]	; 0x270
    1658:	str	r1, [sp, #628]	; 0x274
    165c:	mov	r0, #0
    1660:	str	r0, [sp, #620]	; 0x26c
    1664:	str	r0, [sp, #616]	; 0x268
    1668:	ldr	r0, [fp, #8]
    166c:	movw	r1, #0
    1670:	cmp	r0, r1
    1674:	beq	1690 <check_data+0x1380>
    1678:	ldr	r0, [fp, #8]
    167c:	ldr	r1, [r0]
    1680:	ldr	r0, [r0, #4]
    1684:	str	r0, [sp, #620]	; 0x26c
    1688:	str	r1, [sp, #616]	; 0x268
    168c:	b	16b4 <check_data+0x13a4>
    1690:	ldr	r0, [fp, #-16]
    1694:	add	r1, sp, #616	; 0x268
    1698:	bl	0 <coda_cursor_get_bit_size>
    169c:	cmp	r0, #0
    16a0:	beq	16b0 <check_data+0x13a0>
    16a4:	mvn	r0, #0
    16a8:	str	r0, [fp, #-12]
    16ac:	b	1a08 <check_data+0x16f8>
    16b0:	b	16b4 <check_data+0x13a4>
    16b4:	ldr	r0, [fp, #-16]
    16b8:	ldr	r0, [r0]
    16bc:	ldr	r0, [r0, #16]
    16c0:	cmp	r0, #2
    16c4:	bne	18e8 <check_data+0x15d8>
    16c8:	ldr	r0, [sp, #616]	; 0x268
    16cc:	ldr	r1, [sp, #620]	; 0x26c
    16d0:	lsr	r2, r0, #3
    16d4:	orr	r2, r2, r1, lsl #29
    16d8:	asr	r1, r1, #3
    16dc:	and	r0, r0, #7
    16e0:	adds	r3, r2, #1
    16e4:	adc	ip, r1, #0
    16e8:	cmp	r0, #0
    16ec:	movne	r2, r3
    16f0:	cmp	r0, #0
    16f4:	movne	r1, ip
    16f8:	ldr	r0, [sp, #624]	; 0x270
    16fc:	ldr	r3, [sp, #628]	; 0x274
    1700:	subs	r0, r2, r0
    1704:	sbcs	r1, r1, r3
    1708:	bge	18e8 <check_data+0x15d8>
    170c:	b	1710 <check_data+0x1400>
    1710:	ldr	r0, [fp, #-16]
    1714:	ldr	r1, [r0, #4]
    1718:	add	r0, r0, r1, lsl #4
    171c:	ldr	r0, [r0, #-8]
    1720:	ldr	r0, [r0, #24]
    1724:	str	r0, [sp, #612]	; 0x264
    1728:	ldr	r0, [sp, #624]	; 0x270
    172c:	ldr	r1, [sp, #628]	; 0x274
    1730:	ldr	r2, [sp, #616]	; 0x268
    1734:	ldr	r3, [sp, #620]	; 0x26c
    1738:	lsr	r2, r2, #3
    173c:	orr	r2, r2, r3, lsl #29
    1740:	subs	r0, r0, r2
    1744:	sbc	r1, r1, r3, asr #3
    1748:	str	r0, [sp, #600]	; 0x258
    174c:	str	r1, [sp, #604]	; 0x25c
    1750:	ldr	r0, [sp, #600]	; 0x258
    1754:	add	r0, r0, #1
    1758:	bl	0 <malloc>
    175c:	str	r0, [sp, #596]	; 0x254
    1760:	ldr	r0, [sp, #596]	; 0x254
    1764:	movw	r1, #0
    1768:	cmp	r0, r1
    176c:	bne	17a0 <check_data+0x1490>
    1770:	ldr	r2, [sp, #600]	; 0x258
    1774:	mvn	r0, #0
    1778:	movw	r1, #0
    177c:	movt	r1, #0
    1780:	movw	r3, #0
    1784:	movt	r3, #0
    1788:	movw	ip, #831	; 0x33f
    178c:	str	ip, [sp]
    1790:	bl	0 <coda_set_error>
    1794:	mvn	r0, #0
    1798:	str	r0, [fp, #-12]
    179c:	b	1a08 <check_data+0x16f8>
    17a0:	ldr	r0, [fp, #-16]
    17a4:	ldr	r0, [r0]
    17a8:	ldr	r1, [sp, #612]	; 0x264
    17ac:	asr	r2, r1, #31
    17b0:	ldr	r3, [sp, #616]	; 0x268
    17b4:	ldr	ip, [sp, #620]	; 0x26c
    17b8:	lsr	r3, r3, #3
    17bc:	orr	r3, r3, ip, lsl #29
    17c0:	adds	r1, r1, r3
    17c4:	adc	r3, r2, ip, asr #3
    17c8:	ldr	r2, [sp, #600]	; 0x258
    17cc:	ldr	ip, [sp, #604]	; 0x25c
    17d0:	ldr	lr, [sp, #596]	; 0x254
    17d4:	mov	r4, sp
    17d8:	str	lr, [r4, #8]
    17dc:	str	ip, [r4, #4]
    17e0:	str	r2, [r4]
    17e4:	mov	r2, r1
    17e8:	bl	26c0 <read_bytes>
    17ec:	cmp	r0, #0
    17f0:	beq	1808 <check_data+0x14f8>
    17f4:	ldr	r0, [sp, #596]	; 0x254
    17f8:	bl	0 <free>
    17fc:	mvn	r0, #0
    1800:	str	r0, [fp, #-12]
    1804:	b	1a08 <check_data+0x16f8>
    1808:	ldr	r0, [sp, #596]	; 0x254
    180c:	ldr	r1, [sp, #600]	; 0x258
    1810:	add	r0, r0, r1
    1814:	movw	r1, #0
    1818:	strb	r1, [r0]
    181c:	movw	r0, #0
    1820:	str	r0, [sp, #592]	; 0x250
    1824:	ldr	r0, [sp, #592]	; 0x250
    1828:	ldr	r1, [sp, #600]	; 0x258
    182c:	ldr	r2, [sp, #604]	; 0x25c
    1830:	subs	r1, r0, r1
    1834:	rscs	r0, r2, r0, asr #31
    1838:	bge	18dc <check_data+0x15cc>
    183c:	b	1840 <check_data+0x1530>
    1840:	ldr	r0, [sp, #596]	; 0x254
    1844:	ldr	r1, [sp, #592]	; 0x250
    1848:	add	r0, r0, r1
    184c:	ldrb	r0, [r0]
    1850:	cmp	r0, #32
    1854:	beq	18c8 <check_data+0x15b8>
    1858:	ldr	r0, [sp, #596]	; 0x254
    185c:	ldr	r1, [sp, #592]	; 0x250
    1860:	add	r0, r0, r1
    1864:	ldrb	r0, [r0]
    1868:	cmp	r0, #9
    186c:	beq	18c8 <check_data+0x15b8>
    1870:	ldr	r0, [sp, #596]	; 0x254
    1874:	ldr	r1, [sp, #592]	; 0x250
    1878:	add	r0, r0, r1
    187c:	ldrb	r0, [r0]
    1880:	cmp	r0, #10
    1884:	beq	18c8 <check_data+0x15b8>
    1888:	ldr	r0, [sp, #596]	; 0x254
    188c:	ldr	r1, [sp, #592]	; 0x250
    1890:	add	r0, r0, r1
    1894:	ldrb	r0, [r0]
    1898:	cmp	r0, #13
    189c:	beq	18c8 <check_data+0x15b8>
    18a0:	ldr	r0, [fp, #12]
    18a4:	ldr	r1, [fp, #-16]
    18a8:	ldr	r2, [fp, #16]
    18ac:	str	r0, [sp, #24]
    18b0:	mov	r0, r1
    18b4:	movw	r1, #0
    18b8:	movt	r1, #0
    18bc:	ldr	r3, [sp, #24]
    18c0:	blx	r3
    18c4:	b	18dc <check_data+0x15cc>
    18c8:	b	18cc <check_data+0x15bc>
    18cc:	ldr	r0, [sp, #592]	; 0x250
    18d0:	add	r0, r0, #1
    18d4:	str	r0, [sp, #592]	; 0x250
    18d8:	b	1824 <check_data+0x1514>
    18dc:	ldr	r0, [sp, #596]	; 0x254
    18e0:	bl	0 <free>
    18e4:	b	19f8 <check_data+0x16e8>
    18e8:	ldr	r0, [sp, #616]	; 0x268
    18ec:	ldr	r1, [sp, #620]	; 0x26c
    18f0:	lsr	r2, r0, #3
    18f4:	orr	r2, r2, r1, lsl #29
    18f8:	asr	r1, r1, #3
    18fc:	and	r0, r0, #7
    1900:	adds	r3, r2, #1
    1904:	adc	ip, r1, #0
    1908:	cmp	r0, #0
    190c:	movne	r2, r3
    1910:	cmp	r0, #0
    1914:	movne	r1, ip
    1918:	ldr	r0, [sp, #624]	; 0x270
    191c:	ldr	r3, [sp, #628]	; 0x274
    1920:	eor	r0, r2, r0
    1924:	eor	r1, r1, r3
    1928:	orr	r0, r0, r1
    192c:	cmp	r0, #0
    1930:	beq	19f4 <check_data+0x16e4>
    1934:	b	1938 <check_data+0x1628>
    1938:	ldr	r0, [sp, #624]	; 0x270
    193c:	ldr	r1, [sp, #628]	; 0x274
    1940:	add	lr, sp, #256	; 0x100
    1944:	add	r2, lr, #50	; 0x32
    1948:	bl	0 <coda_str64>
    194c:	ldr	r0, [sp, #616]	; 0x268
    1950:	ldr	r1, [sp, #620]	; 0x26c
    1954:	lsr	r0, r0, #3
    1958:	orr	r0, r0, r1, lsl #29
    195c:	asr	r1, r1, #3
    1960:	add	r2, sp, #276	; 0x114
    1964:	bl	0 <coda_str64>
    1968:	ldrb	r0, [sp, #616]	; 0x268
    196c:	tst	r0, #7
    1970:	beq	19b0 <check_data+0x16a0>
    1974:	b	1988 <check_data+0x1678>
    1978:	.word	0x00000fe0
    197c:	.word	0x00000fc4
    1980:	.word	0x00000fa8
    1984:	.word	0x00000f78
    1988:	add	r0, sp, #276	; 0x114
    198c:	str	r0, [sp, #20]
    1990:	bl	0 <strlen>
    1994:	ldr	r1, [sp, #20]
    1998:	add	r0, r1, r0
    199c:	ldr	r2, [sp, #616]	; 0x268
    19a0:	and	r2, r2, #7
    19a4:	movw	r1, #0
    19a8:	movt	r1, #0
    19ac:	bl	0 <sprintf>
    19b0:	add	r3, sp, #276	; 0x114
    19b4:	add	lr, sp, #256	; 0x100
    19b8:	add	r2, lr, #50	; 0x32
    19bc:	add	r0, sp, #336	; 0x150
    19c0:	movw	r1, #0
    19c4:	movt	r1, #0
    19c8:	bl	0 <sprintf>
    19cc:	add	r1, sp, #336	; 0x150
    19d0:	ldr	r2, [fp, #12]
    19d4:	ldr	r3, [fp, #-16]
    19d8:	ldr	ip, [fp, #16]
    19dc:	str	r0, [sp, #16]
    19e0:	mov	r0, r3
    19e4:	str	r2, [sp, #12]
    19e8:	mov	r2, ip
    19ec:	ldr	r3, [sp, #12]
    19f0:	blx	r3
    19f4:	b	19f8 <check_data+0x16e8>
    19f8:	b	19fc <check_data+0x16ec>
    19fc:	b	1a00 <check_data+0x16f0>
    1a00:	movw	r0, #0
    1a04:	str	r0, [fp, #-12]
    1a08:	ldr	r0, [fp, #-12]
    1a0c:	sub	sp, fp, #8
    1a10:	pop	{r4, sl, fp, pc}
    1a14:	.word	0x00000d58
    1a18:	.word	0x00000d3c
    1a1c:	.word	0x00000d20
    1a20:	.word	0x00000cf0
    1a24:	.word	0x000006f8
    1a28:	.word	0x00000870

00001a2c <check_definition>:
    1a2c:	push	{r4, r5, fp, lr}
    1a30:	add	fp, sp, #8
    1a34:	sub	sp, sp, #416	; 0x1a0
    1a38:	str	r0, [fp, #-16]
    1a3c:	str	r1, [fp, #-20]	; 0xffffffec
    1a40:	str	r2, [fp, #-24]	; 0xffffffe8
    1a44:	str	r3, [fp, #-28]	; 0xffffffe4
    1a48:	ldr	r0, [fp, #-20]	; 0xffffffec
    1a4c:	ldr	r0, [r0]
    1a50:	movw	r1, #0
    1a54:	cmp	r0, r1
    1a58:	bne	1a68 <check_definition+0x3c>
    1a5c:	movw	r0, #0
    1a60:	str	r0, [fp, #-12]
    1a64:	b	267c <check_definition+0xc50>
    1a68:	ldr	r0, [fp, #-16]
    1a6c:	sub	r1, fp, #36	; 0x24
    1a70:	bl	0 <coda_cursor_get_type_class>
    1a74:	cmp	r0, #0
    1a78:	beq	1a88 <check_definition+0x5c>
    1a7c:	mvn	r0, #0
    1a80:	str	r0, [fp, #-12]
    1a84:	b	267c <check_definition+0xc50>
    1a88:	ldr	r0, [fp, #-20]	; 0xffffffec
    1a8c:	ldr	r0, [r0]
    1a90:	sub	r1, fp, #32
    1a94:	bl	0 <coda_type_get_class>
    1a98:	cmp	r0, #0
    1a9c:	beq	1aac <check_definition+0x80>
    1aa0:	mvn	r0, #0
    1aa4:	str	r0, [fp, #-12]
    1aa8:	b	267c <check_definition+0xc50>
    1aac:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1ab0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1ab4:	cmp	r0, r1
    1ab8:	beq	1b6c <check_definition+0x140>
    1abc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1ac0:	bl	0 <coda_type_get_class_name>
    1ac4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1ac8:	str	r0, [fp, #-148]	; 0xffffff6c
    1acc:	mov	r0, r1
    1ad0:	bl	0 <coda_type_get_class_name>
    1ad4:	movw	r1, #0
    1ad8:	movt	r1, #0
    1adc:	movw	r2, #65236	; 0xfed4
    1ae0:	movt	r2, #65535	; 0xffff
    1ae4:	str	r0, [fp, #-152]	; 0xffffff68
    1ae8:	mov	r0, r2
    1aec:	ldr	r2, [fp, #-148]	; 0xffffff6c
    1af0:	ldr	r3, [fp, #-152]	; 0xffffff68
    1af4:	bl	0 <coda_set_error>
    1af8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1afc:	ldr	r1, [fp, #-16]
    1b00:	ldr	r2, [pc, #2996]	; 26bc <check_definition+0xc90>
    1b04:	ldr	r2, [pc, r2]
    1b08:	str	r0, [fp, #-156]	; 0xffffff64
    1b0c:	str	r1, [fp, #-160]	; 0xffffff60
    1b10:	str	r2, [fp, #-164]	; 0xffffff5c
    1b14:	bl	0 <__aeabi_read_tp>
    1b18:	ldr	r1, [fp, #-164]	; 0xffffff5c
    1b1c:	ldr	r2, [r0, r1]
    1b20:	str	r0, [fp, #-168]	; 0xffffff58
    1b24:	mov	r0, r2
    1b28:	bl	0 <coda_errno_to_string>
    1b2c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1b30:	ldr	r1, [fp, #-160]	; 0xffffff60
    1b34:	str	r0, [fp, #-172]	; 0xffffff54
    1b38:	mov	r0, r1
    1b3c:	ldr	r1, [fp, #-172]	; 0xffffff54
    1b40:	ldr	r3, [fp, #-156]	; 0xffffff64
    1b44:	blx	r3
    1b48:	mov	r0, #0
    1b4c:	ldr	r1, [fp, #-168]	; 0xffffff58
    1b50:	ldr	r2, [fp, #-164]	; 0xffffff5c
    1b54:	str	r0, [r1, r2]
    1b58:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b5c:	movw	r3, #0
    1b60:	str	r3, [r0]
    1b64:	str	r3, [fp, #-12]
    1b68:	b	267c <check_definition+0xc50>
    1b6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1b70:	cmp	r0, #6
    1b74:	str	r0, [fp, #-176]	; 0xffffff50
    1b78:	bhi	2674 <check_definition+0xc48>
    1b7c:	add	r0, pc, #8
    1b80:	ldr	r1, [fp, #-176]	; 0xffffff50
    1b84:	ldr	r0, [r0, r1, lsl #2]
    1b88:	mov	pc, r0
    1b8c:	.word	0x00001f18
    1b90:	.word	0x00001ba8
    1b94:	.word	0x00002490
    1b98:	.word	0x00002490
    1b9c:	.word	0x00002570
    1ba0:	.word	0x00002574
    1ba4:	.word	0x00002578
    1ba8:	sub	r2, fp, #72	; 0x48
    1bac:	ldr	r0, [fp, #-20]	; 0xffffffec
    1bb0:	ldr	r0, [r0]
    1bb4:	str	r0, [fp, #-40]	; 0xffffffd8
    1bb8:	ldr	r0, [fp, #-16]
    1bbc:	sub	r1, fp, #76	; 0x4c
    1bc0:	bl	0 <coda_cursor_get_array_dim>
    1bc4:	cmp	r0, #0
    1bc8:	beq	1bd8 <check_definition+0x1ac>
    1bcc:	mvn	r0, #0
    1bd0:	str	r0, [fp, #-12]
    1bd4:	b	267c <check_definition+0xc50>
    1bd8:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1bdc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1be0:	ldr	r1, [r1, #48]	; 0x30
    1be4:	cmp	r0, r1
    1be8:	beq	1c78 <check_definition+0x24c>
    1bec:	ldr	r2, [fp, #-76]	; 0xffffffb4
    1bf0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1bf4:	ldr	r3, [r0, #48]	; 0x30
    1bf8:	movw	r1, #0
    1bfc:	movt	r1, #0
    1c00:	movw	r0, #65236	; 0xfed4
    1c04:	movt	r0, #65535	; 0xffff
    1c08:	bl	0 <coda_set_error>
    1c0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1c10:	ldr	r1, [fp, #-16]
    1c14:	ldr	r2, [pc, #2716]	; 26b8 <check_definition+0xc8c>
    1c18:	ldr	r2, [pc, r2]
    1c1c:	str	r0, [fp, #-180]	; 0xffffff4c
    1c20:	str	r1, [fp, #-184]	; 0xffffff48
    1c24:	str	r2, [fp, #-188]	; 0xffffff44
    1c28:	bl	0 <__aeabi_read_tp>
    1c2c:	ldr	r1, [fp, #-188]	; 0xffffff44
    1c30:	ldr	r2, [r0, r1]
    1c34:	str	r0, [fp, #-192]	; 0xffffff40
    1c38:	mov	r0, r2
    1c3c:	bl	0 <coda_errno_to_string>
    1c40:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1c44:	ldr	r1, [fp, #-184]	; 0xffffff48
    1c48:	str	r0, [fp, #-196]	; 0xffffff3c
    1c4c:	mov	r0, r1
    1c50:	ldr	r1, [fp, #-196]	; 0xffffff3c
    1c54:	ldr	r3, [fp, #-180]	; 0xffffff4c
    1c58:	blx	r3
    1c5c:	mov	r0, #0
    1c60:	ldr	r1, [fp, #-192]	; 0xffffff40
    1c64:	ldr	r2, [fp, #-188]	; 0xffffff44
    1c68:	str	r0, [r1, r2]
    1c6c:	movw	r0, #0
    1c70:	str	r0, [fp, #-12]
    1c74:	b	267c <check_definition+0xc50>
    1c78:	movw	r0, #0
    1c7c:	str	r0, [fp, #-80]	; 0xffffffb0
    1c80:	ldr	r0, [fp, #-80]	; 0xffffffb0
    1c84:	ldr	r1, [fp, #-76]	; 0xffffffb4
    1c88:	cmp	r0, r1
    1c8c:	bge	1f14 <check_definition+0x4e8>
    1c90:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1c94:	add	r0, r0, #52	; 0x34
    1c98:	ldr	r1, [fp, #-80]	; 0xffffffb0
    1c9c:	add	r0, r0, r1, lsl #2
    1ca0:	ldr	r0, [r0]
    1ca4:	cmp	r0, #0
    1ca8:	blt	1d74 <check_definition+0x348>
    1cac:	ldr	r0, [fp, #-80]	; 0xffffffb0
    1cb0:	sub	r1, fp, #72	; 0x48
    1cb4:	ldr	r1, [r1, r0, lsl #2]
    1cb8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1cbc:	add	r2, r2, #52	; 0x34
    1cc0:	add	r0, r2, r0, lsl #2
    1cc4:	ldr	r0, [r0]
    1cc8:	cmp	r1, r0
    1ccc:	beq	1d70 <check_definition+0x344>
    1cd0:	ldr	r0, [fp, #-80]	; 0xffffffb0
    1cd4:	sub	r1, fp, #72	; 0x48
    1cd8:	ldr	r3, [r1, r0, lsl #2]
    1cdc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1ce0:	add	r1, r1, r0, lsl #2
    1ce4:	ldr	r1, [r1, #52]	; 0x34
    1ce8:	mov	r2, sp
    1cec:	str	r1, [r2]
    1cf0:	movw	r1, #0
    1cf4:	movt	r1, #0
    1cf8:	movw	r2, #65236	; 0xfed4
    1cfc:	movt	r2, #65535	; 0xffff
    1d00:	str	r0, [fp, #-200]	; 0xffffff38
    1d04:	mov	r0, r2
    1d08:	ldr	r2, [fp, #-200]	; 0xffffff38
    1d0c:	bl	0 <coda_set_error>
    1d10:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d14:	ldr	r1, [fp, #-16]
    1d18:	ldr	r2, [pc, #2452]	; 26b4 <check_definition+0xc88>
    1d1c:	ldr	r2, [pc, r2]
    1d20:	str	r0, [fp, #-204]	; 0xffffff34
    1d24:	str	r1, [fp, #-208]	; 0xffffff30
    1d28:	str	r2, [sp, #212]	; 0xd4
    1d2c:	bl	0 <__aeabi_read_tp>
    1d30:	ldr	r1, [sp, #212]	; 0xd4
    1d34:	ldr	r2, [r0, r1]
    1d38:	str	r0, [sp, #208]	; 0xd0
    1d3c:	mov	r0, r2
    1d40:	bl	0 <coda_errno_to_string>
    1d44:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1d48:	ldr	r1, [fp, #-208]	; 0xffffff30
    1d4c:	str	r0, [sp, #204]	; 0xcc
    1d50:	mov	r0, r1
    1d54:	ldr	r1, [sp, #204]	; 0xcc
    1d58:	ldr	r3, [fp, #-204]	; 0xffffff34
    1d5c:	blx	r3
    1d60:	mov	r0, #0
    1d64:	ldr	r1, [sp, #208]	; 0xd0
    1d68:	ldr	r2, [sp, #212]	; 0xd4
    1d6c:	str	r0, [r1, r2]
    1d70:	b	1f00 <check_definition+0x4d4>
    1d74:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1d78:	add	r0, r0, #84	; 0x54
    1d7c:	ldr	r1, [fp, #-80]	; 0xffffffb0
    1d80:	add	r0, r0, r1, lsl #2
    1d84:	ldr	r0, [r0]
    1d88:	movw	r1, #0
    1d8c:	cmp	r0, r1
    1d90:	beq	1efc <check_definition+0x4d0>
    1d94:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1d98:	add	r0, r0, #84	; 0x54
    1d9c:	ldr	r1, [fp, #-80]	; 0xffffffb0
    1da0:	add	r0, r0, r1, lsl #2
    1da4:	ldr	r0, [r0]
    1da8:	ldr	r1, [fp, #-16]
    1dac:	sub	r2, fp, #88	; 0x58
    1db0:	bl	0 <coda_expression_eval_integer>
    1db4:	cmp	r0, #0
    1db8:	beq	1e30 <check_definition+0x404>
    1dbc:	ldr	r1, [fp, #-80]	; 0xffffffb0
    1dc0:	movw	r0, #0
    1dc4:	movt	r0, #0
    1dc8:	bl	0 <coda_add_error_message>
    1dcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1dd0:	ldr	r1, [fp, #-16]
    1dd4:	ldr	r2, [pc, #2260]	; 26b0 <check_definition+0xc84>
    1dd8:	ldr	r2, [pc, r2]
    1ddc:	str	r0, [sp, #200]	; 0xc8
    1de0:	str	r1, [sp, #196]	; 0xc4
    1de4:	str	r2, [sp, #192]	; 0xc0
    1de8:	bl	0 <__aeabi_read_tp>
    1dec:	ldr	r1, [sp, #192]	; 0xc0
    1df0:	ldr	r2, [r0, r1]
    1df4:	str	r0, [sp, #188]	; 0xbc
    1df8:	mov	r0, r2
    1dfc:	bl	0 <coda_errno_to_string>
    1e00:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1e04:	ldr	r1, [sp, #196]	; 0xc4
    1e08:	str	r0, [sp, #184]	; 0xb8
    1e0c:	mov	r0, r1
    1e10:	ldr	r1, [sp, #184]	; 0xb8
    1e14:	ldr	r3, [sp, #200]	; 0xc8
    1e18:	blx	r3
    1e1c:	mov	r0, #0
    1e20:	ldr	r1, [sp, #188]	; 0xbc
    1e24:	ldr	r2, [sp, #192]	; 0xc0
    1e28:	str	r0, [r1, r2]
    1e2c:	b	1ef8 <check_definition+0x4cc>
    1e30:	ldr	r0, [fp, #-80]	; 0xffffffb0
    1e34:	sub	r1, fp, #72	; 0x48
    1e38:	ldr	r0, [r1, r0, lsl #2]
    1e3c:	ldr	r1, [fp, #-88]	; 0xffffffa8
    1e40:	ldr	r2, [fp, #-84]	; 0xffffffac
    1e44:	eor	r2, r2, r0, asr #31
    1e48:	eor	r0, r0, r1
    1e4c:	orr	r0, r0, r2
    1e50:	cmp	r0, #0
    1e54:	beq	1ef4 <check_definition+0x4c8>
    1e58:	b	1e5c <check_definition+0x430>
    1e5c:	ldr	r0, [fp, #-80]	; 0xffffffb0
    1e60:	sub	r1, fp, #72	; 0x48
    1e64:	ldr	r3, [r1, r0, lsl #2]
    1e68:	ldr	r1, [fp, #-88]	; 0xffffffa8
    1e6c:	mov	r2, sp
    1e70:	str	r1, [r2]
    1e74:	movw	r1, #0
    1e78:	movt	r1, #0
    1e7c:	movw	r2, #65236	; 0xfed4
    1e80:	movt	r2, #65535	; 0xffff
    1e84:	str	r0, [sp, #180]	; 0xb4
    1e88:	mov	r0, r2
    1e8c:	ldr	r2, [sp, #180]	; 0xb4
    1e90:	bl	0 <coda_set_error>
    1e94:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1e98:	ldr	r1, [fp, #-16]
    1e9c:	ldr	r2, [pc, #2056]	; 26ac <check_definition+0xc80>
    1ea0:	ldr	r2, [pc, r2]
    1ea4:	str	r0, [sp, #176]	; 0xb0
    1ea8:	str	r1, [sp, #172]	; 0xac
    1eac:	str	r2, [sp, #168]	; 0xa8
    1eb0:	bl	0 <__aeabi_read_tp>
    1eb4:	ldr	r1, [sp, #168]	; 0xa8
    1eb8:	ldr	r2, [r0, r1]
    1ebc:	str	r0, [sp, #164]	; 0xa4
    1ec0:	mov	r0, r2
    1ec4:	bl	0 <coda_errno_to_string>
    1ec8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1ecc:	ldr	r1, [sp, #172]	; 0xac
    1ed0:	str	r0, [sp, #160]	; 0xa0
    1ed4:	mov	r0, r1
    1ed8:	ldr	r1, [sp, #160]	; 0xa0
    1edc:	ldr	r3, [sp, #176]	; 0xb0
    1ee0:	blx	r3
    1ee4:	mov	r0, #0
    1ee8:	ldr	r1, [sp, #164]	; 0xa4
    1eec:	ldr	r2, [sp, #168]	; 0xa8
    1ef0:	str	r0, [r1, r2]
    1ef4:	b	1ef8 <check_definition+0x4cc>
    1ef8:	b	1efc <check_definition+0x4d0>
    1efc:	b	1f00 <check_definition+0x4d4>
    1f00:	b	1f04 <check_definition+0x4d8>
    1f04:	ldr	r0, [fp, #-80]	; 0xffffffb0
    1f08:	add	r0, r0, #1
    1f0c:	str	r0, [fp, #-80]	; 0xffffffb0
    1f10:	b	1c80 <check_definition+0x254>
    1f14:	b	2674 <check_definition+0xc48>
    1f18:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f1c:	ldr	r0, [r0]
    1f20:	str	r0, [fp, #-92]	; 0xffffffa4
    1f24:	ldr	r0, [fp, #-16]
    1f28:	sub	r1, fp, #96	; 0x60
    1f2c:	bl	0 <coda_cursor_get_type>
    1f30:	cmp	r0, #0
    1f34:	beq	1f44 <check_definition+0x518>
    1f38:	mvn	r0, #0
    1f3c:	str	r0, [fp, #-12]
    1f40:	b	267c <check_definition+0xc50>
    1f44:	movw	r0, #0
    1f48:	str	r0, [fp, #-104]	; 0xffffff98
    1f4c:	ldr	r0, [fp, #-104]	; 0xffffff98
    1f50:	ldr	r1, [fp, #-92]	; 0xffffffa4
    1f54:	ldr	r1, [r1, #48]	; 0x30
    1f58:	cmp	r0, r1
    1f5c:	bge	2364 <check_definition+0x938>
    1f60:	mov	r0, #1
    1f64:	str	r0, [fp, #-108]	; 0xffffff94
    1f68:	str	r0, [fp, #-112]	; 0xffffff90
    1f6c:	ldr	r0, [fp, #-16]
    1f70:	ldr	r1, [fp, #-92]	; 0xffffffa4
    1f74:	ldr	r1, [r1, #52]	; 0x34
    1f78:	ldr	r2, [fp, #-104]	; 0xffffff98
    1f7c:	add	r1, r1, r2, lsl #2
    1f80:	ldr	r1, [r1]
    1f84:	ldr	r1, [r1]
    1f88:	sub	r2, fp, #116	; 0x74
    1f8c:	bl	0 <coda_cursor_get_record_field_index_from_name>
    1f90:	cmp	r0, #0
    1f94:	beq	1fec <check_definition+0x5c0>
    1f98:	ldr	r0, [pc, #1784]	; 2698 <check_definition+0xc6c>
    1f9c:	ldr	r0, [pc, r0]
    1fa0:	str	r0, [sp, #156]	; 0x9c
    1fa4:	bl	0 <__aeabi_read_tp>
    1fa8:	ldr	r1, [sp, #156]	; 0x9c
    1fac:	ldr	r0, [r0, r1]
    1fb0:	cmn	r0, #102	; 0x66
    1fb4:	beq	1fc4 <check_definition+0x598>
    1fb8:	mvn	r0, #0
    1fbc:	str	r0, [fp, #-12]
    1fc0:	b	267c <check_definition+0xc50>
    1fc4:	ldr	r0, [pc, #1744]	; 269c <check_definition+0xc70>
    1fc8:	ldr	r0, [pc, r0]
    1fcc:	str	r0, [sp, #152]	; 0x98
    1fd0:	bl	0 <__aeabi_read_tp>
    1fd4:	mov	r1, #0
    1fd8:	ldr	r2, [sp, #152]	; 0x98
    1fdc:	str	r1, [r0, r2]
    1fe0:	movw	r0, #0
    1fe4:	str	r0, [fp, #-112]	; 0xffffff90
    1fe8:	b	2014 <check_definition+0x5e8>
    1fec:	ldr	r0, [fp, #-16]
    1ff0:	ldr	r1, [fp, #-116]	; 0xffffff8c
    1ff4:	sub	r2, fp, #112	; 0x70
    1ff8:	bl	0 <coda_cursor_get_record_field_available_status>
    1ffc:	cmp	r0, #0
    2000:	beq	2010 <check_definition+0x5e4>
    2004:	mvn	r0, #0
    2008:	str	r0, [fp, #-12]
    200c:	b	267c <check_definition+0xc50>
    2010:	b	2014 <check_definition+0x5e8>
    2014:	ldr	r0, [fp, #-92]	; 0xffffffa4
    2018:	ldr	r0, [r0, #52]	; 0x34
    201c:	ldr	r1, [fp, #-104]	; 0xffffff98
    2020:	add	r0, r0, r1, lsl #2
    2024:	ldr	r0, [r0]
    2028:	ldrsb	r0, [r0, #16]
    202c:	cmp	r0, #0
    2030:	beq	2114 <check_definition+0x6e8>
    2034:	ldr	r0, [fp, #-92]	; 0xffffffa4
    2038:	ldr	r0, [r0, #52]	; 0x34
    203c:	ldr	r1, [fp, #-104]	; 0xffffff98
    2040:	add	r0, r0, r1, lsl #2
    2044:	ldr	r0, [r0]
    2048:	ldr	r0, [r0, #20]
    204c:	movw	r1, #0
    2050:	cmp	r0, r1
    2054:	beq	2108 <check_definition+0x6dc>
    2058:	ldr	r0, [fp, #-92]	; 0xffffffa4
    205c:	ldr	r0, [r0, #52]	; 0x34
    2060:	ldr	r1, [fp, #-104]	; 0xffffff98
    2064:	add	r0, r0, r1, lsl #2
    2068:	ldr	r0, [r0]
    206c:	ldr	r0, [r0, #20]
    2070:	ldr	r1, [fp, #-16]
    2074:	sub	r2, fp, #108	; 0x6c
    2078:	bl	0 <coda_expression_eval_bool>
    207c:	cmp	r0, #0
    2080:	beq	2104 <check_definition+0x6d8>
    2084:	ldr	r0, [fp, #-92]	; 0xffffffa4
    2088:	ldr	r0, [r0, #52]	; 0x34
    208c:	ldr	r1, [fp, #-104]	; 0xffffff98
    2090:	ldr	r0, [r0, r1, lsl #2]
    2094:	ldr	r1, [r0]
    2098:	movw	r0, #0
    209c:	movt	r0, #0
    20a0:	bl	0 <coda_add_error_message>
    20a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    20a8:	ldr	r1, [fp, #-16]
    20ac:	ldr	r2, [pc, #1516]	; 26a0 <check_definition+0xc74>
    20b0:	ldr	r2, [pc, r2]
    20b4:	str	r0, [sp, #148]	; 0x94
    20b8:	str	r1, [sp, #144]	; 0x90
    20bc:	str	r2, [sp, #140]	; 0x8c
    20c0:	bl	0 <__aeabi_read_tp>
    20c4:	ldr	r1, [sp, #140]	; 0x8c
    20c8:	ldr	r2, [r0, r1]
    20cc:	str	r0, [sp, #136]	; 0x88
    20d0:	mov	r0, r2
    20d4:	bl	0 <coda_errno_to_string>
    20d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    20dc:	ldr	r1, [sp, #144]	; 0x90
    20e0:	str	r0, [sp, #132]	; 0x84
    20e4:	mov	r0, r1
    20e8:	ldr	r1, [sp, #132]	; 0x84
    20ec:	ldr	r3, [sp, #148]	; 0x94
    20f0:	blx	r3
    20f4:	mov	r0, #0
    20f8:	ldr	r1, [sp, #136]	; 0x88
    20fc:	ldr	r2, [sp, #140]	; 0x8c
    2100:	str	r0, [r1, r2]
    2104:	b	2110 <check_definition+0x6e4>
    2108:	mvn	r0, #0
    210c:	str	r0, [fp, #-108]	; 0xffffff94
    2110:	b	2114 <check_definition+0x6e8>
    2114:	ldr	r0, [fp, #-108]	; 0xffffff94
    2118:	cmn	r0, #1
    211c:	beq	21fc <check_definition+0x7d0>
    2120:	ldr	r0, [fp, #-112]	; 0xffffff90
    2124:	ldr	r1, [fp, #-108]	; 0xffffff94
    2128:	cmp	r0, r1
    212c:	beq	21f8 <check_definition+0x7cc>
    2130:	ldr	r0, [fp, #-92]	; 0xffffffa4
    2134:	ldr	r0, [r0, #52]	; 0x34
    2138:	ldr	r1, [fp, #-104]	; 0xffffff98
    213c:	ldr	r0, [r0, r1, lsl #2]
    2140:	ldr	r2, [r0]
    2144:	ldr	r0, [fp, #-112]	; 0xffffff90
    2148:	movw	r1, #0
    214c:	movt	r1, #0
    2150:	movw	r3, #0
    2154:	movt	r3, #0
    2158:	cmp	r0, #0
    215c:	mov	r0, r3
    2160:	movne	r0, r1
    2164:	ldr	ip, [fp, #-108]	; 0xffffff94
    2168:	cmp	ip, #0
    216c:	movne	r3, r1
    2170:	mov	r1, sp
    2174:	str	r3, [r1]
    2178:	movw	r1, #0
    217c:	movt	r1, #0
    2180:	movw	r3, #65236	; 0xfed4
    2184:	movt	r3, #65535	; 0xffff
    2188:	str	r0, [sp, #128]	; 0x80
    218c:	mov	r0, r3
    2190:	ldr	r3, [sp, #128]	; 0x80
    2194:	bl	0 <coda_set_error>
    2198:	ldr	r0, [fp, #-24]	; 0xffffffe8
    219c:	ldr	r1, [fp, #-16]
    21a0:	ldr	r2, [pc, #1276]	; 26a4 <check_definition+0xc78>
    21a4:	ldr	r2, [pc, r2]
    21a8:	str	r0, [sp, #124]	; 0x7c
    21ac:	str	r1, [sp, #120]	; 0x78
    21b0:	str	r2, [sp, #116]	; 0x74
    21b4:	bl	0 <__aeabi_read_tp>
    21b8:	ldr	r1, [sp, #116]	; 0x74
    21bc:	ldr	r2, [r0, r1]
    21c0:	str	r0, [sp, #112]	; 0x70
    21c4:	mov	r0, r2
    21c8:	bl	0 <coda_errno_to_string>
    21cc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    21d0:	ldr	r1, [sp, #120]	; 0x78
    21d4:	str	r0, [sp, #108]	; 0x6c
    21d8:	mov	r0, r1
    21dc:	ldr	r1, [sp, #108]	; 0x6c
    21e0:	ldr	r3, [sp, #124]	; 0x7c
    21e4:	blx	r3
    21e8:	mov	r0, #0
    21ec:	ldr	r1, [sp, #112]	; 0x70
    21f0:	ldr	r2, [sp, #116]	; 0x74
    21f4:	str	r0, [r1, r2]
    21f8:	b	21fc <check_definition+0x7d0>
    21fc:	ldr	r0, [fp, #-112]	; 0xffffff90
    2200:	cmp	r0, #0
    2204:	beq	2350 <check_definition+0x924>
    2208:	ldr	r0, [fp, #-108]	; 0xffffff94
    220c:	cmp	r0, #0
    2210:	beq	2350 <check_definition+0x924>
    2214:	ldr	r0, [fp, #-96]	; 0xffffffa0
    2218:	ldr	r1, [fp, #-116]	; 0xffffff8c
    221c:	sub	r2, fp, #124	; 0x7c
    2220:	bl	0 <coda_type_get_record_field_real_name>
    2224:	cmp	r0, #0
    2228:	beq	2238 <check_definition+0x80c>
    222c:	mvn	r0, #0
    2230:	str	r0, [fp, #-12]
    2234:	b	267c <check_definition+0xc50>
    2238:	ldr	r0, [fp, #-92]	; 0xffffffa4
    223c:	ldr	r0, [r0, #52]	; 0x34
    2240:	ldr	r1, [fp, #-104]	; 0xffffff98
    2244:	add	r0, r0, r1, lsl #2
    2248:	ldr	r0, [r0]
    224c:	ldr	r0, [r0, #4]
    2250:	movw	r1, #0
    2254:	cmp	r0, r1
    2258:	beq	227c <check_definition+0x850>
    225c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    2260:	ldr	r0, [r0, #52]	; 0x34
    2264:	ldr	r1, [fp, #-104]	; 0xffffff98
    2268:	add	r0, r0, r1, lsl #2
    226c:	ldr	r0, [r0]
    2270:	ldr	r0, [r0, #4]
    2274:	str	r0, [sp, #104]	; 0x68
    2278:	b	2298 <check_definition+0x86c>
    227c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    2280:	ldr	r0, [r0, #52]	; 0x34
    2284:	ldr	r1, [fp, #-104]	; 0xffffff98
    2288:	add	r0, r0, r1, lsl #2
    228c:	ldr	r0, [r0]
    2290:	ldr	r0, [r0]
    2294:	str	r0, [sp, #104]	; 0x68
    2298:	ldr	r0, [sp, #104]	; 0x68
    229c:	str	r0, [fp, #-120]	; 0xffffff88
    22a0:	ldr	r0, [fp, #-124]	; 0xffffff84
    22a4:	ldr	r1, [fp, #-120]	; 0xffffff88
    22a8:	bl	0 <strcmp>
    22ac:	cmp	r0, #0
    22b0:	beq	234c <check_definition+0x920>
    22b4:	ldr	r0, [fp, #-92]	; 0xffffffa4
    22b8:	ldr	r0, [r0, #52]	; 0x34
    22bc:	ldr	r1, [fp, #-104]	; 0xffffff98
    22c0:	ldr	r0, [r0, r1, lsl #2]
    22c4:	ldr	r2, [r0]
    22c8:	ldr	r3, [fp, #-124]	; 0xffffff84
    22cc:	ldr	r0, [fp, #-120]	; 0xffffff88
    22d0:	mov	r1, sp
    22d4:	str	r0, [r1]
    22d8:	movw	r1, #0
    22dc:	movt	r1, #0
    22e0:	movw	r0, #65236	; 0xfed4
    22e4:	movt	r0, #65535	; 0xffff
    22e8:	bl	0 <coda_set_error>
    22ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    22f0:	ldr	r1, [fp, #-16]
    22f4:	ldr	r2, [pc, #940]	; 26a8 <check_definition+0xc7c>
    22f8:	ldr	r2, [pc, r2]
    22fc:	str	r0, [sp, #100]	; 0x64
    2300:	str	r1, [sp, #96]	; 0x60
    2304:	str	r2, [sp, #92]	; 0x5c
    2308:	bl	0 <__aeabi_read_tp>
    230c:	ldr	r1, [sp, #92]	; 0x5c
    2310:	ldr	r2, [r0, r1]
    2314:	str	r0, [sp, #88]	; 0x58
    2318:	mov	r0, r2
    231c:	bl	0 <coda_errno_to_string>
    2320:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2324:	ldr	r1, [sp, #96]	; 0x60
    2328:	str	r0, [sp, #84]	; 0x54
    232c:	mov	r0, r1
    2330:	ldr	r1, [sp, #84]	; 0x54
    2334:	ldr	r3, [sp, #100]	; 0x64
    2338:	blx	r3
    233c:	mov	r0, #0
    2340:	ldr	r1, [sp, #88]	; 0x58
    2344:	ldr	r2, [sp, #92]	; 0x5c
    2348:	str	r0, [r1, r2]
    234c:	b	2350 <check_definition+0x924>
    2350:	b	2354 <check_definition+0x928>
    2354:	ldr	r0, [fp, #-104]	; 0xffffff98
    2358:	add	r0, r0, #1
    235c:	str	r0, [fp, #-104]	; 0xffffff98
    2360:	b	1f4c <check_definition+0x520>
    2364:	ldr	r0, [fp, #-16]
    2368:	sub	r1, fp, #100	; 0x64
    236c:	bl	0 <coda_cursor_get_num_elements>
    2370:	cmp	r0, #0
    2374:	beq	2384 <check_definition+0x958>
    2378:	mvn	r0, #0
    237c:	str	r0, [fp, #-12]
    2380:	b	267c <check_definition+0xc50>
    2384:	movw	r0, #0
    2388:	str	r0, [fp, #-104]	; 0xffffff98
    238c:	ldr	r0, [fp, #-104]	; 0xffffff98
    2390:	ldr	r1, [fp, #-100]	; 0xffffff9c
    2394:	cmp	r0, r1
    2398:	bge	248c <check_definition+0xa60>
    239c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    23a0:	ldr	r1, [fp, #-104]	; 0xffffff98
    23a4:	sub	r2, fp, #128	; 0x80
    23a8:	bl	0 <coda_type_get_record_field_name>
    23ac:	cmp	r0, #0
    23b0:	beq	23c0 <check_definition+0x994>
    23b4:	mvn	r0, #0
    23b8:	str	r0, [fp, #-12]
    23bc:	b	267c <check_definition+0xc50>
    23c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    23c4:	ldr	r0, [r0]
    23c8:	ldr	r1, [fp, #-128]	; 0xffffff80
    23cc:	sub	r2, fp, #132	; 0x84
    23d0:	bl	0 <coda_type_get_record_field_index_from_name>
    23d4:	cmp	r0, #0
    23d8:	beq	2478 <check_definition+0xa4c>
    23dc:	ldr	r0, [pc, #684]	; 2690 <check_definition+0xc64>
    23e0:	ldr	r0, [pc, r0]
    23e4:	str	r0, [sp, #80]	; 0x50
    23e8:	bl	0 <__aeabi_read_tp>
    23ec:	ldr	r1, [sp, #80]	; 0x50
    23f0:	ldr	r0, [r0, r1]
    23f4:	cmn	r0, #102	; 0x66
    23f8:	bne	2474 <check_definition+0xa48>
    23fc:	ldr	r2, [fp, #-128]	; 0xffffff80
    2400:	movw	r1, #0
    2404:	movt	r1, #0
    2408:	movw	r0, #65236	; 0xfed4
    240c:	movt	r0, #65535	; 0xffff
    2410:	bl	0 <coda_set_error>
    2414:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2418:	ldr	r1, [fp, #-16]
    241c:	ldr	r2, [pc, #624]	; 2694 <check_definition+0xc68>
    2420:	ldr	r2, [pc, r2]
    2424:	str	r0, [sp, #76]	; 0x4c
    2428:	str	r1, [sp, #72]	; 0x48
    242c:	str	r2, [sp, #68]	; 0x44
    2430:	bl	0 <__aeabi_read_tp>
    2434:	ldr	r1, [sp, #68]	; 0x44
    2438:	ldr	r2, [r0, r1]
    243c:	str	r0, [sp, #64]	; 0x40
    2440:	mov	r0, r2
    2444:	bl	0 <coda_errno_to_string>
    2448:	ldr	r2, [fp, #-28]	; 0xffffffe4
    244c:	ldr	r1, [sp, #72]	; 0x48
    2450:	str	r0, [sp, #60]	; 0x3c
    2454:	mov	r0, r1
    2458:	ldr	r1, [sp, #60]	; 0x3c
    245c:	ldr	r3, [sp, #76]	; 0x4c
    2460:	blx	r3
    2464:	mov	r0, #0
    2468:	ldr	r1, [sp, #64]	; 0x40
    246c:	ldr	r2, [sp, #68]	; 0x44
    2470:	str	r0, [r1, r2]
    2474:	b	2478 <check_definition+0xa4c>
    2478:	b	247c <check_definition+0xa50>
    247c:	ldr	r0, [fp, #-104]	; 0xffffff98
    2480:	add	r0, r0, #1
    2484:	str	r0, [fp, #-104]	; 0xffffff98
    2488:	b	238c <check_definition+0x960>
    248c:	b	2674 <check_definition+0xc48>
    2490:	ldr	r0, [fp, #-16]
    2494:	sub	r1, fp, #136	; 0x88
    2498:	bl	0 <coda_cursor_get_read_type>
    249c:	cmp	r0, #0
    24a0:	beq	24b0 <check_definition+0xa84>
    24a4:	mvn	r0, #0
    24a8:	str	r0, [fp, #-12]
    24ac:	b	267c <check_definition+0xc50>
    24b0:	ldr	r0, [fp, #-136]	; 0xffffff78
    24b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    24b8:	ldr	r1, [r1]
    24bc:	ldr	r1, [r1, #12]
    24c0:	cmp	r0, r1
    24c4:	beq	256c <check_definition+0xb40>
    24c8:	ldr	r0, [fp, #-136]	; 0xffffff78
    24cc:	bl	0 <coda_type_get_native_type_name>
    24d0:	ldr	r1, [fp, #-20]	; 0xffffffec
    24d4:	ldr	r1, [r1]
    24d8:	ldr	r1, [r1, #12]
    24dc:	str	r0, [sp, #56]	; 0x38
    24e0:	mov	r0, r1
    24e4:	bl	0 <coda_type_get_native_type_name>
    24e8:	movw	r1, #0
    24ec:	movt	r1, #0
    24f0:	movw	r2, #65236	; 0xfed4
    24f4:	movt	r2, #65535	; 0xffff
    24f8:	str	r0, [sp, #52]	; 0x34
    24fc:	mov	r0, r2
    2500:	ldr	r2, [sp, #56]	; 0x38
    2504:	ldr	r3, [sp, #52]	; 0x34
    2508:	bl	0 <coda_set_error>
    250c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2510:	ldr	r1, [fp, #-16]
    2514:	ldr	r2, [pc, #368]	; 268c <check_definition+0xc60>
    2518:	ldr	r2, [pc, r2]
    251c:	str	r0, [sp, #48]	; 0x30
    2520:	str	r1, [sp, #44]	; 0x2c
    2524:	str	r2, [sp, #40]	; 0x28
    2528:	bl	0 <__aeabi_read_tp>
    252c:	ldr	r1, [sp, #40]	; 0x28
    2530:	ldr	r2, [r0, r1]
    2534:	str	r0, [sp, #36]	; 0x24
    2538:	mov	r0, r2
    253c:	bl	0 <coda_errno_to_string>
    2540:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2544:	ldr	r1, [sp, #44]	; 0x2c
    2548:	str	r0, [sp, #32]
    254c:	mov	r0, r1
    2550:	ldr	r1, [sp, #32]
    2554:	ldr	r3, [sp, #48]	; 0x30
    2558:	blx	r3
    255c:	mov	r0, #0
    2560:	ldr	r1, [sp, #36]	; 0x24
    2564:	ldr	r2, [sp, #40]	; 0x28
    2568:	str	r0, [r1, r2]
    256c:	b	2674 <check_definition+0xc48>
    2570:	b	2674 <check_definition+0xc48>
    2574:	b	2674 <check_definition+0xc48>
    2578:	ldr	r0, [fp, #-16]
    257c:	sub	r1, fp, #140	; 0x8c
    2580:	bl	0 <coda_cursor_get_special_type>
    2584:	cmp	r0, #0
    2588:	beq	2598 <check_definition+0xb6c>
    258c:	mvn	r0, #0
    2590:	str	r0, [fp, #-12]
    2594:	b	267c <check_definition+0xc50>
    2598:	ldr	r0, [fp, #-20]	; 0xffffffec
    259c:	ldr	r0, [r0]
    25a0:	sub	r1, fp, #144	; 0x90
    25a4:	bl	0 <coda_type_get_special_type>
    25a8:	cmp	r0, #0
    25ac:	beq	25bc <check_definition+0xb90>
    25b0:	mvn	r0, #0
    25b4:	str	r0, [fp, #-12]
    25b8:	b	267c <check_definition+0xc50>
    25bc:	ldr	r0, [fp, #-140]	; 0xffffff74
    25c0:	ldr	r1, [fp, #-144]	; 0xffffff70
    25c4:	cmp	r0, r1
    25c8:	beq	2668 <check_definition+0xc3c>
    25cc:	ldr	r0, [fp, #-140]	; 0xffffff74
    25d0:	bl	0 <coda_type_get_special_type_name>
    25d4:	ldr	r1, [fp, #-144]	; 0xffffff70
    25d8:	str	r0, [sp, #28]
    25dc:	mov	r0, r1
    25e0:	bl	0 <coda_type_get_special_type_name>
    25e4:	movw	r1, #0
    25e8:	movt	r1, #0
    25ec:	movw	r2, #65236	; 0xfed4
    25f0:	movt	r2, #65535	; 0xffff
    25f4:	str	r0, [sp, #24]
    25f8:	mov	r0, r2
    25fc:	ldr	r2, [sp, #28]
    2600:	ldr	r3, [sp, #24]
    2604:	bl	0 <coda_set_error>
    2608:	ldr	r0, [fp, #-24]	; 0xffffffe8
    260c:	ldr	r1, [fp, #-16]
    2610:	ldr	r2, [pc, #112]	; 2688 <check_definition+0xc5c>
    2614:	ldr	r2, [pc, r2]
    2618:	str	r0, [sp, #20]
    261c:	str	r1, [sp, #16]
    2620:	str	r2, [sp, #12]
    2624:	bl	0 <__aeabi_read_tp>
    2628:	ldr	r1, [sp, #12]
    262c:	ldr	r2, [r0, r1]
    2630:	str	r0, [sp, #8]
    2634:	mov	r0, r2
    2638:	bl	0 <coda_errno_to_string>
    263c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2640:	ldr	r1, [sp, #16]
    2644:	str	r0, [sp, #4]
    2648:	mov	r0, r1
    264c:	ldr	r1, [sp, #4]
    2650:	ldr	r3, [sp, #20]
    2654:	blx	r3
    2658:	mov	r0, #0
    265c:	ldr	r1, [sp, #8]
    2660:	ldr	r2, [sp, #12]
    2664:	str	r0, [r1, r2]
    2668:	ldr	r0, [fp, #-20]	; 0xffffffec
    266c:	movw	r1, #0
    2670:	str	r1, [r0]
    2674:	movw	r0, #0
    2678:	str	r0, [fp, #-12]
    267c:	ldr	r0, [fp, #-12]
    2680:	sub	sp, fp, #8
    2684:	pop	{r4, r5, fp, pc}
    2688:	.word	0x0000006c
    268c:	.word	0x0000016c
    2690:	.word	0x000002a8
    2694:	.word	0x0000026c
    2698:	.word	0x000006f4
    269c:	.word	0x000006cc
    26a0:	.word	0x000005e8
    26a4:	.word	0x000004f8
    26a8:	.word	0x000003a8
    26ac:	.word	0x00000804
    26b0:	.word	0x000008d0
    26b4:	.word	0x00000990
    26b8:	.word	0x00000a98
    26bc:	.word	0x00000bb0

000026c0 <read_bytes>:
    26c0:	push	{fp, lr}
    26c4:	mov	fp, sp
    26c8:	sub	sp, sp, #112	; 0x70
    26cc:	ldr	r1, [fp, #12]
    26d0:	ldr	ip, [fp, #8]
    26d4:	ldr	lr, [fp, #16]
    26d8:	str	r0, [fp, #-8]
    26dc:	str	r3, [fp, #-12]
    26e0:	str	r2, [fp, #-16]
    26e4:	str	r1, [fp, #-20]	; 0xffffffec
    26e8:	str	ip, [fp, #-24]	; 0xffffffe8
    26ec:	ldr	r0, [fp, #-8]
    26f0:	ldr	r0, [r0, #48]	; 0x30
    26f4:	movw	r1, #0
    26f8:	cmp	r0, r1
    26fc:	beq	2814 <read_bytes+0x154>
    2700:	ldr	r0, [fp, #-16]
    2704:	ldr	r1, [fp, #-12]
    2708:	ldr	r2, [fp, #-24]	; 0xffffffe8
    270c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2710:	adds	r0, r0, r2
    2714:	adc	r1, r1, r3
    2718:	ldr	r2, [fp, #-8]
    271c:	ldr	r3, [r2, #40]	; 0x28
    2720:	ldr	r2, [r2, #44]	; 0x2c
    2724:	subs	r0, r3, r0
    2728:	sbcs	r1, r2, r1
    272c:	bcs	27f4 <read_bytes+0x134>
    2730:	b	2734 <read_bytes+0x74>
    2734:	ldr	r0, [fp, #-8]
    2738:	ldr	r0, [r0, #16]
    273c:	cmp	r0, #0
    2740:	beq	2754 <read_bytes+0x94>
    2744:	ldr	r0, [fp, #-8]
    2748:	ldr	r0, [r0, #16]
    274c:	cmp	r0, #1
    2750:	bne	2770 <read_bytes+0xb0>
    2754:	mvn	r0, #300	; 0x12c
    2758:	movw	r1, #0
    275c:	movt	r1, #0
    2760:	bl	0 <coda_set_error>
    2764:	mvn	r0, #0
    2768:	str	r0, [fp, #-4]
    276c:	b	2908 <read_bytes+0x248>
    2770:	add	r2, sp, #25
    2774:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2778:	ldr	r1, [fp, #-20]	; 0xffffffec
    277c:	sub	r3, fp, #45	; 0x2d
    2780:	str	r2, [sp, #20]
    2784:	mov	r2, r3
    2788:	bl	0 <coda_str64>
    278c:	ldr	r0, [fp, #-16]
    2790:	ldr	r1, [fp, #-12]
    2794:	add	r2, sp, #46	; 0x2e
    2798:	bl	0 <coda_str64>
    279c:	ldr	r0, [fp, #-8]
    27a0:	ldr	r1, [r0, #40]	; 0x28
    27a4:	ldr	r0, [r0, #44]	; 0x2c
    27a8:	str	r0, [sp, #16]
    27ac:	mov	r0, r1
    27b0:	ldr	r1, [sp, #16]
    27b4:	ldr	r2, [sp, #20]
    27b8:	bl	0 <coda_str64>
    27bc:	add	r0, sp, #25
    27c0:	add	r3, sp, #46	; 0x2e
    27c4:	sub	r2, fp, #45	; 0x2d
    27c8:	mvn	r1, #300	; 0x12c
    27cc:	str	r0, [sp, #12]
    27d0:	mov	r0, r1
    27d4:	movw	r1, #0
    27d8:	movt	r1, #0
    27dc:	ldr	ip, [sp, #12]
    27e0:	str	ip, [sp]
    27e4:	bl	0 <coda_set_error>
    27e8:	mvn	r0, #0
    27ec:	str	r0, [fp, #-4]
    27f0:	b	2908 <read_bytes+0x248>
    27f4:	ldr	r0, [fp, #16]
    27f8:	ldr	r1, [fp, #-8]
    27fc:	ldr	r1, [r1, #48]	; 0x30
    2800:	ldr	r2, [fp, #-16]
    2804:	add	r1, r1, r2
    2808:	ldr	r2, [fp, #-24]	; 0xffffffe8
    280c:	bl	0 <memcpy>
    2810:	b	2900 <read_bytes+0x240>
    2814:	ldr	r0, [fp, #-8]
    2818:	ldr	r0, [r0, #16]
    281c:	cmp	r0, #0
    2820:	beq	2834 <read_bytes+0x174>
    2824:	ldr	r0, [fp, #-8]
    2828:	ldr	r0, [r0, #16]
    282c:	cmp	r0, #1
    2830:	bne	2838 <read_bytes+0x178>
    2834:	b	2858 <read_bytes+0x198>
    2838:	movw	r0, #0
    283c:	movt	r0, #0
    2840:	movw	r1, #0
    2844:	movt	r1, #0
    2848:	movw	r2, #83	; 0x53
    284c:	movw	r3, #0
    2850:	movt	r3, #0
    2854:	bl	0 <__assert_fail>
    2858:	ldr	r0, [fp, #-16]
    285c:	ldr	r1, [fp, #-12]
    2860:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2864:	ldr	r3, [fp, #-20]	; 0xffffffec
    2868:	adds	r0, r0, r2
    286c:	adc	r1, r1, r3
    2870:	ldr	r2, [fp, #-8]
    2874:	ldr	r3, [r2, #8]
    2878:	ldr	r2, [r2, #12]
    287c:	subs	r0, r3, r0
    2880:	sbcs	r1, r2, r1
    2884:	bcs	28a8 <read_bytes+0x1e8>
    2888:	b	288c <read_bytes+0x1cc>
    288c:	mvn	r0, #300	; 0x12c
    2890:	movw	r1, #0
    2894:	movt	r1, #0
    2898:	bl	0 <coda_set_error>
    289c:	mvn	r0, #0
    28a0:	str	r0, [fp, #-4]
    28a4:	b	2908 <read_bytes+0x248>
    28a8:	ldr	r0, [fp, #-8]
    28ac:	ldr	r0, [r0, #56]	; 0x38
    28b0:	ldr	r1, [fp, #16]
    28b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    28b8:	ldr	r3, [fp, #-16]
    28bc:	bl	0 <pread>
    28c0:	cmp	r0, #0
    28c4:	bge	28fc <read_bytes+0x23c>
    28c8:	bl	0 <__errno_location>
    28cc:	ldr	r0, [r0]
    28d0:	bl	0 <strerror>
    28d4:	mvn	r1, #21
    28d8:	str	r0, [sp, #8]
    28dc:	mov	r0, r1
    28e0:	movw	r1, #0
    28e4:	movt	r1, #0
    28e8:	ldr	r2, [sp, #8]
    28ec:	bl	0 <coda_set_error>
    28f0:	mvn	r0, #0
    28f4:	str	r0, [fp, #-4]
    28f8:	b	2908 <read_bytes+0x248>
    28fc:	b	2900 <read_bytes+0x240>
    2900:	movw	r0, #0
    2904:	str	r0, [fp, #-4]
    2908:	ldr	r0, [fp, #-4]
    290c:	mov	sp, fp
    2910:	pop	{fp, pc}
