
../compcert-repos/prog2/CMakeFiles/7.1.dir/Aula07_Arvores/bst.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <bst_nova>:
   0:	mov	r0, #4
   4:	str	r4, [sp, #-8]!
   8:	str	lr, [sp, #4]
   c:	bl	0 <malloc>
  10:	cmp	r0, #0
  14:	ldr	r4, [sp]
  18:	add	sp, sp, #4
  1c:	movne	r3, #0
  20:	strne	r3, [r0]
  24:	pop	{pc}		; (ldr pc, [sp], #4)

00000028 <bst_min>:
  28:	cmp	r0, #0
  2c:	beq	4c <bst_min+0x24>
  30:	ldr	r2, [r0]
  34:	b	3c <bst_min+0x14>
  38:	mov	r2, r3
  3c:	ldr	r3, [r2, #4]
  40:	cmp	r3, #0
  44:	bne	38 <bst_min+0x10>
  48:	ldr	r0, [r2]
  4c:	bx	lr

00000050 <bst_max>:
  50:	cmp	r0, #0
  54:	beq	74 <bst_max+0x24>
  58:	ldr	r2, [r0]
  5c:	b	64 <bst_max+0x14>
  60:	mov	r2, r3
  64:	ldr	r3, [r2, #8]
  68:	cmp	r3, #0
  6c:	bne	60 <bst_max+0x10>
  70:	ldr	r0, [r2]
  74:	bx	lr

00000078 <bst_novo_no>:
  78:	strd	r4, [sp, #-16]!
  7c:	mov	r5, r0
  80:	mov	r0, #12
  84:	str	r6, [sp, #8]
  88:	str	lr, [sp, #12]
  8c:	bl	0 <malloc>
  90:	mov	r4, r0
  94:	mov	r0, r5
  98:	bl	0 <strlen>
  9c:	add	r6, r0, #1
  a0:	mov	r0, r6
  a4:	bl	0 <malloc>
  a8:	mov	r2, r6
  ac:	mov	r1, r5
  b0:	str	r0, [r4]
  b4:	bl	0 <memcpy>
  b8:	mov	r3, #0
  bc:	mov	r0, r4
  c0:	ldr	r6, [sp, #8]
  c4:	str	r3, [r4, #4]
  c8:	str	r3, [r4, #8]
  cc:	ldrd	r4, [sp]
  d0:	add	sp, sp, #12
  d4:	pop	{pc}		; (ldr pc, [sp], #4)

000000d8 <bst_no_valormin>:
  d8:	b	e0 <bst_no_valormin+0x8>
  dc:	mov	r0, r3
  e0:	ldr	r3, [r0, #4]
  e4:	cmp	r3, #0
  e8:	bne	dc <bst_no_valormin+0x4>
  ec:	bx	lr

000000f0 <bst_no_valormax>:
  f0:	b	f8 <bst_no_valormax+0x8>
  f4:	mov	r0, r3
  f8:	ldr	r3, [r0, #8]
  fc:	cmp	r3, #0
 100:	bne	f4 <bst_no_valormax+0x4>
 104:	bx	lr

00000108 <bst_pesquisa_impl>:
 108:	strd	r4, [sp, #-16]!
 10c:	subs	r4, r0, #0
 110:	movne	r5, r1
 114:	str	r6, [sp, #8]
 118:	str	lr, [sp, #12]
 11c:	bne	134 <bst_pesquisa_impl+0x2c>
 120:	b	154 <bst_pesquisa_impl+0x4c>
 124:	beq	154 <bst_pesquisa_impl+0x4c>
 128:	ldr	r4, [r4, #8]
 12c:	cmp	r4, #0
 130:	beq	154 <bst_pesquisa_impl+0x4c>
 134:	mov	r0, r5
 138:	ldr	r1, [r4]
 13c:	bl	0 <strcmp>
 140:	cmp	r0, #0
 144:	bge	124 <bst_pesquisa_impl+0x1c>
 148:	ldr	r4, [r4, #4]
 14c:	cmp	r4, #0
 150:	bne	134 <bst_pesquisa_impl+0x2c>
 154:	mov	r0, r4
 158:	ldrd	r4, [sp]
 15c:	ldr	r6, [sp, #8]
 160:	add	sp, sp, #12
 164:	pop	{pc}		; (ldr pc, [sp], #4)

00000168 <bst_pesquisa>:
 168:	cmp	r1, #0
 16c:	cmpne	r0, #0
 170:	beq	17c <bst_pesquisa+0x14>
 174:	ldr	r0, [r0]
 178:	b	108 <bst_pesquisa_impl>
 17c:	mov	r0, #0
 180:	bx	lr

00000184 <bst_insere_impl>:
 184:	strd	r4, [sp, #-16]!
 188:	subs	r4, r0, #0
 18c:	str	r6, [sp, #8]
 190:	str	lr, [sp, #12]
 194:	beq	1f0 <bst_insere_impl+0x6c>
 198:	mov	r0, r1
 19c:	mov	r5, r1
 1a0:	ldr	r1, [r4]
 1a4:	bl	0 <strcmp>
 1a8:	cmp	r0, #0
 1ac:	blt	1dc <bst_insere_impl+0x58>
 1b0:	bne	1c8 <bst_insere_impl+0x44>
 1b4:	mov	r0, r4
 1b8:	ldrd	r4, [sp]
 1bc:	ldr	r6, [sp, #8]
 1c0:	add	sp, sp, #12
 1c4:	pop	{pc}		; (ldr pc, [sp], #4)
 1c8:	mov	r1, r5
 1cc:	ldr	r0, [r4, #8]
 1d0:	bl	184 <bst_insere_impl>
 1d4:	str	r0, [r4, #8]
 1d8:	b	1b4 <bst_insere_impl+0x30>
 1dc:	mov	r1, r5
 1e0:	ldr	r0, [r4, #4]
 1e4:	bl	184 <bst_insere_impl>
 1e8:	str	r0, [r4, #4]
 1ec:	b	1b4 <bst_insere_impl+0x30>
 1f0:	mov	r0, r1
 1f4:	ldrd	r4, [sp]
 1f8:	ldr	r6, [sp, #8]
 1fc:	ldr	lr, [sp, #12]
 200:	add	sp, sp, #16
 204:	b	78 <bst_novo_no>

00000208 <bst_insere>:
 208:	clz	r3, r1
 20c:	cmp	r0, #0
 210:	strd	r4, [sp, #-16]!
 214:	lsr	r3, r3, #5
 218:	moveq	r4, #1
 21c:	str	r6, [sp, #8]
 220:	str	lr, [sp, #12]
 224:	movne	r4, r3
 228:	cmp	r4, #0
 22c:	bne	254 <bst_insere+0x4c>
 230:	mov	r5, r0
 234:	ldr	r0, [r0]
 238:	bl	184 <bst_insere_impl>
 23c:	str	r0, [r5]
 240:	mov	r0, r4
 244:	ldrd	r4, [sp]
 248:	ldr	r6, [sp, #8]
 24c:	add	sp, sp, #12
 250:	pop	{pc}		; (ldr pc, [sp], #4)
 254:	mvn	r4, #0
 258:	b	240 <bst_insere+0x38>

0000025c <bst_remove_impl>:
 25c:	strd	r4, [sp, #-24]!	; 0xffffffe8
 260:	subs	r5, r0, #0
 264:	strd	r6, [sp, #8]
 268:	str	r8, [sp, #16]
 26c:	str	lr, [sp, #20]
 270:	beq	390 <bst_remove_impl+0x134>
 274:	ldr	r6, [r5]
 278:	mov	r0, r1
 27c:	mov	r7, r1
 280:	mov	r1, r6
 284:	bl	0 <strcmp>
 288:	cmp	r0, #0
 28c:	blt	368 <bst_remove_impl+0x10c>
 290:	ldr	r4, [r5, #8]
 294:	bne	33c <bst_remove_impl+0xe0>
 298:	ldr	r7, [r5, #4]
 29c:	cmp	r7, #0
 2a0:	beq	380 <bst_remove_impl+0x124>
 2a4:	cmp	r4, #0
 2a8:	bne	2f8 <bst_remove_impl+0x9c>
 2ac:	ldr	r0, [r7]
 2b0:	mov	r4, r5
 2b4:	bl	0 <strlen>
 2b8:	add	r1, r0, #1
 2bc:	mov	r0, r6
 2c0:	bl	0 <realloc>
 2c4:	str	r0, [r5]
 2c8:	ldr	r1, [r7]
 2cc:	bl	0 <strcpy>
 2d0:	ldr	r6, [r7]
 2d4:	ldrd	r2, [r7, #4]
 2d8:	strd	r2, [r5, #4]
 2dc:	mov	r5, r7
 2e0:	mov	r0, r6
 2e4:	bl	0 <free>
 2e8:	mov	r0, r5
 2ec:	bl	0 <free>
 2f0:	b	350 <bst_remove_impl+0xf4>
 2f4:	mov	r4, r3
 2f8:	ldr	r3, [r4, #4]
 2fc:	cmp	r3, #0
 300:	bne	2f4 <bst_remove_impl+0x98>
 304:	ldr	r0, [r4]
 308:	bl	0 <strlen>
 30c:	add	r1, r0, #1
 310:	mov	r0, r6
 314:	bl	0 <realloc>
 318:	str	r0, [r5]
 31c:	ldr	r1, [r4]
 320:	bl	0 <strcpy>
 324:	ldr	r1, [r4]
 328:	mov	r4, r5
 32c:	ldr	r0, [r5, #8]
 330:	bl	25c <bst_remove_impl>
 334:	str	r0, [r5, #8]
 338:	b	350 <bst_remove_impl+0xf4>
 33c:	mov	r0, r4
 340:	mov	r1, r7
 344:	mov	r4, r5
 348:	bl	25c <bst_remove_impl>
 34c:	str	r0, [r5, #8]
 350:	mov	r0, r4
 354:	ldrd	r4, [sp]
 358:	ldrd	r6, [sp, #8]
 35c:	ldr	r8, [sp, #16]
 360:	add	sp, sp, #20
 364:	pop	{pc}		; (ldr pc, [sp], #4)
 368:	mov	r1, r7
 36c:	ldr	r0, [r5, #4]
 370:	mov	r4, r5
 374:	bl	25c <bst_remove_impl>
 378:	str	r0, [r5, #4]
 37c:	b	350 <bst_remove_impl+0xf4>
 380:	cmp	r4, #0
 384:	beq	2e0 <bst_remove_impl+0x84>
 388:	mov	r7, r4
 38c:	b	2ac <bst_remove_impl+0x50>
 390:	mov	r4, r5
 394:	b	350 <bst_remove_impl+0xf4>

00000398 <bst_apaga>:
 398:	ldr	r3, [r0]
 39c:	str	r4, [sp, #-8]!
 3a0:	mov	r4, r0
 3a4:	str	lr, [sp, #4]
 3a8:	cmp	r3, #0
 3ac:	beq	3cc <bst_apaga+0x34>
 3b0:	mov	r0, r3
 3b4:	ldr	r1, [r3]
 3b8:	bl	25c <bst_remove_impl>
 3bc:	cmp	r0, #0
 3c0:	mov	r3, r0
 3c4:	str	r0, [r4]
 3c8:	bne	3b0 <bst_apaga+0x18>
 3cc:	mov	r0, r4
 3d0:	ldr	r4, [sp]
 3d4:	ldr	lr, [sp, #4]
 3d8:	add	sp, sp, #8
 3dc:	b	0 <free>

000003e0 <bst_remove>:
 3e0:	clz	r3, r1
 3e4:	cmp	r0, #0
 3e8:	strd	r4, [sp, #-16]!
 3ec:	lsr	r3, r3, #5
 3f0:	moveq	r4, #1
 3f4:	str	r6, [sp, #8]
 3f8:	str	lr, [sp, #12]
 3fc:	movne	r4, r3
 400:	cmp	r4, #0
 404:	bne	42c <bst_remove+0x4c>
 408:	mov	r5, r0
 40c:	ldr	r0, [r0]
 410:	bl	25c <bst_remove_impl>
 414:	str	r0, [r5]
 418:	mov	r0, r4
 41c:	ldrd	r4, [sp]
 420:	ldr	r6, [sp, #8]
 424:	add	sp, sp, #12
 428:	pop	{pc}		; (ldr pc, [sp], #4)
 42c:	mvn	r4, #0
 430:	b	418 <bst_remove+0x38>

00000434 <bst_altura>:
 434:	strd	r4, [sp, #-24]!	; 0xffffffe8
 438:	subs	r4, r0, #0
 43c:	strd	r6, [sp, #8]
 440:	str	r8, [sp, #16]
 444:	str	lr, [sp, #20]
 448:	beq	4d4 <bst_altura+0xa0>
 44c:	mov	r5, #0
 450:	ldmib	r4, {r4, r6}
 454:	mov	r7, r5
 458:	cmp	r6, #0
 45c:	mov	r0, r4
 460:	beq	488 <bst_altura+0x54>
 464:	bl	434 <bst_altura>
 468:	mov	r8, r0
 46c:	mov	r0, r6
 470:	bl	434 <bst_altura>
 474:	cmp	r8, r0
 478:	bgt	4c4 <bst_altura+0x90>
 47c:	add	r5, r5, #1
 480:	mov	r4, r6
 484:	b	450 <bst_altura+0x1c>
 488:	cmp	r4, #0
 48c:	beq	4ac <bst_altura+0x78>
 490:	bl	434 <bst_altura>
 494:	mov	r8, r0
 498:	mov	r0, r6
 49c:	bl	434 <bst_altura>
 4a0:	cmp	r0, r8
 4a4:	add	r5, r5, #1
 4a8:	blt	450 <bst_altura+0x1c>
 4ac:	mov	r0, r7
 4b0:	ldrd	r4, [sp]
 4b4:	ldrd	r6, [sp, #8]
 4b8:	ldr	r8, [sp, #16]
 4bc:	add	sp, sp, #20
 4c0:	pop	{pc}		; (ldr pc, [sp], #4)
 4c4:	cmp	r4, #0
 4c8:	add	r5, r5, #1
 4cc:	bne	450 <bst_altura+0x1c>
 4d0:	b	4ac <bst_altura+0x78>
 4d4:	mvn	r7, #0
 4d8:	b	4ac <bst_altura+0x78>

000004dc <bst_preordem_impl>:
 4dc:	strd	r4, [sp, #-16]!
 4e0:	subs	r4, r0, #0
 4e4:	str	r6, [sp, #8]
 4e8:	str	lr, [sp, #12]
 4ec:	beq	518 <bst_preordem_impl+0x3c>
 4f0:	movw	r5, #0
 4f4:	movt	r5, #0
 4f8:	mov	r0, r5
 4fc:	ldr	r1, [r4]
 500:	bl	0 <printf>
 504:	ldr	r0, [r4, #4]
 508:	bl	4dc <bst_preordem_impl>
 50c:	ldr	r4, [r4, #8]
 510:	cmp	r4, #0
 514:	bne	4f8 <bst_preordem_impl+0x1c>
 518:	ldrd	r4, [sp]
 51c:	ldr	r6, [sp, #8]
 520:	add	sp, sp, #12
 524:	pop	{pc}		; (ldr pc, [sp], #4)

00000528 <bst_imprime>:
 528:	str	r4, [sp, #-8]!
 52c:	subs	r4, r0, #0
 530:	str	lr, [sp, #4]
 534:	beq	560 <bst_imprime+0x38>
 538:	movw	r0, #0
 53c:	movt	r0, #0
 540:	bl	0 <printf>
 544:	ldr	r0, [r4]
 548:	bl	4dc <bst_preordem_impl>
 54c:	mov	r0, #10
 550:	ldr	r4, [sp]
 554:	ldr	lr, [sp, #4]
 558:	add	sp, sp, #8
 55c:	b	0 <putchar>
 560:	ldr	r4, [sp]
 564:	add	sp, sp, #4
 568:	pop	{pc}		; (ldr pc, [sp], #4)
