
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ipow>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #8
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	vmov.f64	d1, #112	; 0x3f800000  1.0
      14:	cmp	r0, #0
      18:	bge	40 <ipow+0x40>
      1c:	mov	r1, r0
      20:	add	r0, r1, #1
      24:	cmp	r1, #0
      28:	beq	34 <ipow+0x34>
      2c:	vmul.f64	d1, d1, d0
      30:	b	1c <ipow+0x1c>
      34:	vmov.f64	d2, #112	; 0x3f800000  1.0
      38:	vdiv.f64	d1, d2, d1
      3c:	b	58 <ipow+0x58>
      40:	mov	r1, r0
      44:	sub	r0, r1, #1
      48:	cmp	r1, #0
      4c:	beq	58 <ipow+0x58>
      50:	vmul.f64	d1, d1, d0
      54:	b	40 <ipow+0x40>
      58:	vmov.f64	d0, d1
      5c:	ldr	lr, [sp, #4]
      60:	add	sp, sp, #8
      64:	bx	lr

00000068 <iswhitespace>:
      68:	mov	ip, sp
      6c:	sub	sp, sp, #8
      70:	str	ip, [sp]
      74:	str	lr, [sp, #4]
      78:	cmp	r0, #32
      7c:	beq	90 <iswhitespace+0x28>
      80:	cmp	r0, #9
      84:	moveq	r1, #1
      88:	movne	r1, #0
      8c:	b	94 <iswhitespace+0x2c>
      90:	mov	r1, #1
      94:	cmp	r1, #0
      98:	bne	ac <iswhitespace+0x44>
      9c:	cmp	r0, #10
      a0:	moveq	r1, #1
      a4:	movne	r1, #0
      a8:	b	b0 <iswhitespace+0x48>
      ac:	mov	r1, #1
      b0:	cmp	r1, #0
      b4:	bne	c8 <iswhitespace+0x60>
      b8:	cmp	r0, #13
      bc:	moveq	r0, #1
      c0:	movne	r0, #0
      c4:	b	cc <iswhitespace+0x64>
      c8:	mov	r0, #1
      cc:	ldr	lr, [sp, #4]
      d0:	add	sp, sp, #8
      d4:	bx	lr

000000d8 <compare_strings>:
      d8:	mov	ip, sp
      dc:	sub	sp, sp, #24
      e0:	str	ip, [sp]
      e4:	str	lr, [sp, #4]
      e8:	str	r4, [sp, #8]
      ec:	str	r5, [sp, #12]
      f0:	str	r6, [sp, #16]
      f4:	str	r7, [sp, #20]
      f8:	ldr	r5, [ip, #4]
      fc:	ldr	r7, [ip]
     100:	mov	r6, #0
     104:	cmp	r6, r1
     108:	blt	114 <compare_strings+0x3c>
     10c:	mov	ip, #0
     110:	b	120 <compare_strings+0x48>
     114:	cmp	r6, r7
     118:	movlt	ip, #1
     11c:	movge	ip, #0
     120:	cmp	ip, #0
     124:	beq	148 <compare_strings+0x70>
     128:	add	ip, r0, r6
     12c:	ldrb	ip, [r2, ip]
     130:	add	r4, r3, r6
     134:	ldrb	r4, [r5, r4]
     138:	cmp	ip, r4
     13c:	moveq	ip, #1
     140:	movne	ip, #0
     144:	b	14c <compare_strings+0x74>
     148:	mov	ip, #0
     14c:	cmp	ip, #0
     150:	beq	15c <compare_strings+0x84>
     154:	add	r6, r6, #1
     158:	b	104 <compare_strings+0x2c>
     15c:	cmp	r6, r1
     160:	bne	17c <compare_strings+0xa4>
     164:	cmp	r6, r7
     168:	bne	174 <compare_strings+0x9c>
     16c:	mov	r0, #0
     170:	b	1c4 <compare_strings+0xec>
     174:	mvn	r0, #0
     178:	b	1c4 <compare_strings+0xec>
     17c:	cmp	r6, r7
     180:	beq	1ac <compare_strings+0xd4>
     184:	add	ip, r0, r6
     188:	ldrb	ip, [r2, ip]
     18c:	and	r1, ip, #255	; 0xff
     190:	add	r2, r3, r6
     194:	ldrb	ip, [r5, r2]
     198:	and	r0, ip, #255	; 0xff
     19c:	cmp	r1, r0
     1a0:	movgt	r0, #1
     1a4:	movle	r0, #0
     1a8:	b	1b0 <compare_strings+0xd8>
     1ac:	mov	r0, #1
     1b0:	cmp	r0, #0
     1b4:	beq	1c0 <compare_strings+0xe8>
     1b8:	mov	r0, #1
     1bc:	b	1c4 <compare_strings+0xec>
     1c0:	mvn	r0, #0
     1c4:	ldr	r4, [sp, #8]
     1c8:	ldr	r5, [sp, #12]
     1cc:	ldr	r6, [sp, #16]
     1d0:	ldr	r7, [sp, #20]
     1d4:	ldr	lr, [sp, #4]
     1d8:	add	sp, sp, #24
     1dc:	bx	lr

000001e0 <decode_escaped_string>:
     1e0:	mov	ip, sp
     1e4:	sub	sp, sp, #16
     1e8:	str	ip, [sp]
     1ec:	str	lr, [sp, #4]
     1f0:	str	r4, [sp, #8]
     1f4:	mov	r2, r0
     1f8:	cmp	r2, #0
     1fc:	bne	208 <decode_escaped_string+0x28>
     200:	mov	r0, #0
     204:	b	4b8 <decode_escaped_string+0x2d8>
     208:	mov	r4, #0
     20c:	mov	r0, #0
     210:	ldrb	r3, [r2, r4]
     214:	cmp	r3, #0
     218:	beq	4b0 <decode_escaped_string+0x2d0>
     21c:	ldrb	r1, [r2, r4]
     220:	cmp	r1, #92	; 0x5c
     224:	bne	494 <decode_escaped_string+0x2b4>
     228:	add	r4, r4, #1
     22c:	ldrb	r1, [r2, r4]
     230:	cmp	r1, #101	; 0x65
     234:	bcs	2cc <decode_escaped_string+0xec>
     238:	cmp	r1, #92	; 0x5c
     23c:	bcs	278 <decode_escaped_string+0x98>
     240:	cmp	r1, #34	; 0x22
     244:	beq	264 <decode_escaped_string+0x84>
     248:	cmp	r1, #39	; 0x27
     24c:	bne	354 <decode_escaped_string+0x174>
     250:	mov	r3, r0
     254:	add	r0, r3, #1
     258:	mov	r1, #39	; 0x27
     25c:	strb	r1, [r2, r3]
     260:	b	4a8 <decode_escaped_string+0x2c8>
     264:	mov	r1, r0
     268:	add	r0, r1, #1
     26c:	mov	r3, #34	; 0x22
     270:	strb	r3, [r2, r1]
     274:	b	4a8 <decode_escaped_string+0x2c8>
     278:	cmp	r1, #92	; 0x5c
     27c:	beq	2b8 <decode_escaped_string+0xd8>
     280:	cmp	r1, #97	; 0x61
     284:	beq	2a4 <decode_escaped_string+0xc4>
     288:	cmp	r1, #98	; 0x62
     28c:	bne	354 <decode_escaped_string+0x174>
     290:	mov	r1, r0
     294:	add	r0, r1, #1
     298:	mov	r3, #8
     29c:	strb	r3, [r2, r1]
     2a0:	b	4a8 <decode_escaped_string+0x2c8>
     2a4:	mov	r3, r0
     2a8:	add	r0, r3, #1
     2ac:	mov	r1, #7
     2b0:	strb	r1, [r2, r3]
     2b4:	b	4a8 <decode_escaped_string+0x2c8>
     2b8:	mov	ip, r0
     2bc:	add	r0, ip, #1
     2c0:	mov	r1, #92	; 0x5c
     2c4:	strb	r1, [r2, ip]
     2c8:	b	4a8 <decode_escaped_string+0x2c8>
     2cc:	cmp	r1, #114	; 0x72
     2d0:	bcs	328 <decode_escaped_string+0x148>
     2d4:	cmp	r1, #101	; 0x65
     2d8:	beq	314 <decode_escaped_string+0x134>
     2dc:	cmp	r1, #102	; 0x66
     2e0:	beq	300 <decode_escaped_string+0x120>
     2e4:	cmp	r1, #110	; 0x6e
     2e8:	bne	354 <decode_escaped_string+0x174>
     2ec:	mov	r3, r0
     2f0:	add	r0, r3, #1
     2f4:	mov	r1, #10
     2f8:	strb	r1, [r2, r3]
     2fc:	b	4a8 <decode_escaped_string+0x2c8>
     300:	mov	ip, r0
     304:	add	r0, ip, #1
     308:	mov	r1, #12
     30c:	strb	r1, [r2, ip]
     310:	b	4a8 <decode_escaped_string+0x2c8>
     314:	mov	r1, r0
     318:	add	r0, r1, #1
     31c:	mov	ip, #27
     320:	strb	ip, [r2, r1]
     324:	b	4a8 <decode_escaped_string+0x2c8>
     328:	cmp	r1, #114	; 0x72
     32c:	beq	480 <decode_escaped_string+0x2a0>
     330:	cmp	r1, #116	; 0x74
     334:	beq	46c <decode_escaped_string+0x28c>
     338:	cmp	r1, #118	; 0x76
     33c:	bne	354 <decode_escaped_string+0x174>
     340:	mov	r3, r0
     344:	add	r0, r3, #1
     348:	mov	ip, #11
     34c:	strb	ip, [r2, r3]
     350:	b	4a8 <decode_escaped_string+0x2c8>
     354:	ldrb	ip, [r2, r4]
     358:	cmp	ip, #48	; 0x30
     35c:	blt	374 <decode_escaped_string+0x194>
     360:	ldrb	r3, [r2, r4]
     364:	cmp	r3, #57	; 0x39
     368:	movgt	r1, #1
     36c:	movle	r1, #0
     370:	b	378 <decode_escaped_string+0x198>
     374:	mov	r1, #1
     378:	cmp	r1, #0
     37c:	beq	394 <decode_escaped_string+0x1b4>
     380:	mvn	r0, #102	; 0x66
     384:	ldr	r1, [pc, #316]	; 4c8 <decode_escaped_string+0x2e8>
     388:	bl	0 <coda_set_error>
     38c:	mvn	r0, #0
     390:	b	4b8 <decode_escaped_string+0x2d8>
     394:	ldrb	r3, [r2, r4]
     398:	lsl	r3, r3, #6
     39c:	sub	r3, r3, #3072	; 0xc00
     3a0:	and	r1, r3, #255	; 0xff
     3a4:	strb	r1, [r2, r0]
     3a8:	add	r4, r4, #1
     3ac:	ldrb	r1, [r2, r4]
     3b0:	cmp	r1, #48	; 0x30
     3b4:	blt	3cc <decode_escaped_string+0x1ec>
     3b8:	ldrb	r1, [r2, r4]
     3bc:	cmp	r1, #57	; 0x39
     3c0:	movgt	r3, #1
     3c4:	movle	r3, #0
     3c8:	b	3d0 <decode_escaped_string+0x1f0>
     3cc:	mov	r3, #1
     3d0:	cmp	r3, #0
     3d4:	beq	3ec <decode_escaped_string+0x20c>
     3d8:	mvn	r0, #102	; 0x66
     3dc:	ldr	r1, [pc, #228]	; 4c8 <decode_escaped_string+0x2e8>
     3e0:	bl	0 <coda_set_error>
     3e4:	mvn	r0, #0
     3e8:	b	4b8 <decode_escaped_string+0x2d8>
     3ec:	ldrb	ip, [r2, r0]
     3f0:	ldrb	r1, [r2, r4]
     3f4:	lsl	r1, r1, #3
     3f8:	add	r3, ip, r1
     3fc:	sub	ip, r3, #384	; 0x180
     400:	and	r1, ip, #255	; 0xff
     404:	strb	r1, [r2, r0]
     408:	add	r4, r4, #1
     40c:	ldrb	r3, [r2, r4]
     410:	cmp	r3, #48	; 0x30
     414:	blt	42c <decode_escaped_string+0x24c>
     418:	ldrb	r1, [r2, r4]
     41c:	cmp	r1, #57	; 0x39
     420:	movgt	r1, #1
     424:	movle	r1, #0
     428:	b	430 <decode_escaped_string+0x250>
     42c:	mov	r1, #1
     430:	cmp	r1, #0
     434:	beq	44c <decode_escaped_string+0x26c>
     438:	mvn	r0, #102	; 0x66
     43c:	ldr	r1, [pc, #132]	; 4c8 <decode_escaped_string+0x2e8>
     440:	bl	0 <coda_set_error>
     444:	mvn	r0, #0
     448:	b	4b8 <decode_escaped_string+0x2d8>
     44c:	ldrb	r3, [r2, r0]
     450:	ldrb	ip, [r2, r4]
     454:	add	r1, r3, ip
     458:	sub	r3, r1, #48	; 0x30
     45c:	and	r3, r3, #255	; 0xff
     460:	strb	r3, [r2, r0]
     464:	add	r0, r0, #1
     468:	b	4a8 <decode_escaped_string+0x2c8>
     46c:	mov	r1, r0
     470:	add	r0, r1, #1
     474:	mov	r3, #9
     478:	strb	r3, [r2, r1]
     47c:	b	4a8 <decode_escaped_string+0x2c8>
     480:	mov	r3, r0
     484:	add	r0, r3, #1
     488:	mov	ip, #13
     48c:	strb	ip, [r2, r3]
     490:	b	4a8 <decode_escaped_string+0x2c8>
     494:	mov	r1, r0
     498:	add	r0, r1, #1
     49c:	ldrb	r3, [r2, r4]
     4a0:	and	ip, r3, #255	; 0xff
     4a4:	strb	ip, [r2, r1]
     4a8:	add	r4, r4, #1
     4ac:	b	210 <decode_escaped_string+0x30>
     4b0:	mov	r3, #0
     4b4:	strb	r3, [r2, r0]
     4b8:	ldr	r4, [sp, #8]
     4bc:	ldr	lr, [sp, #4]
     4c0:	add	sp, sp, #16
     4c4:	bx	lr
     4c8:	.word	0x00000495

000004cc <boolean_constant_new>:
     4cc:	mov	ip, sp
     4d0:	sub	sp, sp, #24
     4d4:	str	ip, [sp, #4]
     4d8:	str	lr, [sp, #8]
     4dc:	str	r4, [sp, #16]
     4e0:	str	r5, [sp, #20]
     4e4:	mov	r4, r0
     4e8:	mov	r0, #16
     4ec:	bl	0 <malloc>
     4f0:	mov	r5, r0
     4f4:	cmp	r5, #0
     4f8:	bne	528 <boolean_constant_new+0x5c>
     4fc:	mvn	r0, #0
     500:	ldr	r1, [pc, #128]	; 588 <boolean_constant_new+0xbc>
     504:	mov	r2, #16
     508:	ldr	r3, [pc, #124]	; 58c <boolean_constant_new+0xc0>
     50c:	mov	ip, #232	; 0xe8
     510:	str	ip, [sp]
     514:	bl	0 <coda_set_error>
     518:	mov	r0, r4
     51c:	bl	0 <free>
     520:	mov	r0, #0
     524:	b	574 <boolean_constant_new+0xa8>
     528:	mov	r0, #18
     52c:	str	r0, [r5]
     530:	mov	r0, #0
     534:	str	r0, [r5, #4]
     538:	mov	r1, #1
     53c:	str	r1, [r5, #8]
     540:	ldrb	r1, [r4]
     544:	cmp	r1, #116	; 0x74
     548:	beq	560 <boolean_constant_new+0x94>
     54c:	ldrb	ip, [r4]
     550:	cmp	ip, #84	; 0x54
     554:	moveq	r3, #1
     558:	movne	r3, #0
     55c:	b	564 <boolean_constant_new+0x98>
     560:	mov	r3, #1
     564:	str	r3, [r5, #12]
     568:	mov	r0, r4
     56c:	bl	0 <free>
     570:	mov	r0, r5
     574:	ldr	r4, [sp, #16]
     578:	ldr	r5, [sp, #20]
     57c:	ldr	lr, [sp, #8]
     580:	add	sp, sp, #24
     584:	bx	lr
     588:	.word	0x000005f0
     58c:	.word	0x0000053b

00000590 <float_constant_new>:
     590:	mov	ip, sp
     594:	sub	sp, sp, #32
     598:	str	ip, [sp, #4]
     59c:	str	lr, [sp, #8]
     5a0:	str	r4, [sp, #16]
     5a4:	mov	r4, r0
     5a8:	mov	r0, r4
     5ac:	bl	0 <strlen>
     5b0:	add	r2, sp, #24
     5b4:	mov	r3, #0
     5b8:	mov	r1, r0
     5bc:	mov	r0, r4
     5c0:	bl	0 <coda_ascii_parse_double>
     5c4:	cmp	r0, #0
     5c8:	bge	5dc <float_constant_new+0x4c>
     5cc:	mov	r0, r4
     5d0:	bl	0 <free>
     5d4:	mov	r0, #0
     5d8:	b	638 <float_constant_new+0xa8>
     5dc:	mov	r0, r4
     5e0:	bl	0 <free>
     5e4:	mov	r0, #24
     5e8:	bl	0 <malloc>
     5ec:	cmp	r0, #0
     5f0:	bne	618 <float_constant_new+0x88>
     5f4:	mvn	r0, #0
     5f8:	ldr	r1, [pc, #72]	; 648 <float_constant_new+0xb8>
     5fc:	mov	r2, #24
     600:	ldr	r3, [pc, #68]	; 64c <float_constant_new+0xbc>
     604:	movw	r4, #261	; 0x105
     608:	str	r4, [sp]
     60c:	bl	0 <coda_set_error>
     610:	mov	r0, #0
     614:	b	638 <float_constant_new+0xa8>
     618:	mov	r1, #19
     61c:	str	r1, [r0]
     620:	mov	r2, #2
     624:	str	r2, [r0, #4]
     628:	mov	r3, #1
     62c:	str	r3, [r0, #8]
     630:	vldr	d2, [sp, #24]
     634:	vstr	d2, [r0, #16]
     638:	ldr	r4, [sp, #16]
     63c:	ldr	lr, [sp, #8]
     640:	add	sp, sp, #32
     644:	bx	lr
     648:	.word	0x000005f0
     64c:	.word	0x0000053b

00000650 <integer_constant_new>:
     650:	mov	ip, sp
     654:	sub	sp, sp, #32
     658:	str	ip, [sp, #4]
     65c:	str	lr, [sp, #8]
     660:	str	r4, [sp, #16]
     664:	mov	r4, r0
     668:	mov	r0, r4
     66c:	bl	0 <strlen>
     670:	add	r2, sp, #24
     674:	mov	r3, #0
     678:	mov	r1, r0
     67c:	mov	r0, r4
     680:	bl	0 <coda_ascii_parse_int64>
     684:	cmp	r0, #0
     688:	bge	69c <integer_constant_new+0x4c>
     68c:	mov	r0, r4
     690:	bl	0 <free>
     694:	mov	r0, #0
     698:	b	700 <integer_constant_new+0xb0>
     69c:	mov	r0, r4
     6a0:	bl	0 <free>
     6a4:	mov	r0, #24
     6a8:	bl	0 <malloc>
     6ac:	cmp	r0, #0
     6b0:	bne	6d8 <integer_constant_new+0x88>
     6b4:	mvn	r0, #0
     6b8:	ldr	r1, [pc, #80]	; 710 <integer_constant_new+0xc0>
     6bc:	mov	r2, #24
     6c0:	ldr	r3, [pc, #76]	; 714 <integer_constant_new+0xc4>
     6c4:	mov	r4, #288	; 0x120
     6c8:	str	r4, [sp]
     6cc:	bl	0 <coda_set_error>
     6d0:	mov	r0, #0
     6d4:	b	700 <integer_constant_new+0xb0>
     6d8:	mov	r1, #20
     6dc:	str	r1, [r0]
     6e0:	mov	r1, #1
     6e4:	str	r1, [r0, #4]
     6e8:	mov	r1, #1
     6ec:	str	r1, [r0, #8]
     6f0:	ldr	r2, [sp, #24]
     6f4:	ldr	r1, [sp, #28]
     6f8:	str	r2, [r0, #16]
     6fc:	str	r1, [r0, #20]
     700:	ldr	r4, [sp, #16]
     704:	ldr	lr, [sp, #8]
     708:	add	sp, sp, #32
     70c:	bx	lr
     710:	.word	0x000005f0
     714:	.word	0x0000053b

00000718 <rawstring_constant_new>:
     718:	mov	ip, sp
     71c:	sub	sp, sp, #24
     720:	str	ip, [sp, #4]
     724:	str	lr, [sp, #8]
     728:	str	r4, [sp, #16]
     72c:	str	r5, [sp, #20]
     730:	mov	r5, r0
     734:	mov	r0, #20
     738:	bl	0 <malloc>
     73c:	mov	r4, r0
     740:	cmp	r4, #0
     744:	bne	76c <rawstring_constant_new+0x54>
     748:	mvn	r0, #0
     74c:	ldr	r1, [pc, #88]	; 7ac <rawstring_constant_new+0x94>
     750:	mov	r2, #20
     754:	ldr	r3, [pc, #84]	; 7b0 <rawstring_constant_new+0x98>
     758:	movw	r4, #307	; 0x133
     75c:	str	r4, [sp]
     760:	bl	0 <coda_set_error>
     764:	mov	r0, #0
     768:	b	798 <rawstring_constant_new+0x80>
     76c:	mov	r2, #21
     770:	str	r2, [r4]
     774:	mov	r0, #3
     778:	str	r0, [r4, #4]
     77c:	mov	r1, #1
     780:	str	r1, [r4, #8]
     784:	mov	r0, r5
     788:	bl	0 <strlen>
     78c:	str	r0, [r4, #12]
     790:	str	r5, [r4, #16]
     794:	mov	r0, r4
     798:	ldr	r4, [sp, #16]
     79c:	ldr	r5, [sp, #20]
     7a0:	ldr	lr, [sp, #8]
     7a4:	add	sp, sp, #24
     7a8:	bx	lr
     7ac:	.word	0x000005f0
     7b0:	.word	0x0000053b

000007b4 <string_constant_new>:
     7b4:	mov	ip, sp
     7b8:	sub	sp, sp, #24
     7bc:	str	ip, [sp, #4]
     7c0:	str	lr, [sp, #8]
     7c4:	str	r4, [sp, #16]
     7c8:	str	r5, [sp, #20]
     7cc:	mov	r5, r0
     7d0:	mov	r0, r5
     7d4:	bl	1e0 <decode_escaped_string>
     7d8:	mov	r4, r0
     7dc:	cmp	r4, #0
     7e0:	bge	7f4 <string_constant_new+0x40>
     7e4:	mov	r0, r5
     7e8:	bl	0 <free>
     7ec:	mov	r0, #0
     7f0:	b	848 <string_constant_new+0x94>
     7f4:	mov	r0, #20
     7f8:	bl	0 <malloc>
     7fc:	cmp	r0, #0
     800:	bne	828 <string_constant_new+0x74>
     804:	mvn	r0, #0
     808:	ldr	r1, [pc, #76]	; 85c <string_constant_new+0xa8>
     80c:	mov	r2, #20
     810:	ldr	r3, [pc, #72]	; 860 <string_constant_new+0xac>
     814:	movw	ip, #335	; 0x14f
     818:	str	ip, [sp]
     81c:	bl	0 <coda_set_error>
     820:	mov	r0, #0
     824:	b	848 <string_constant_new+0x94>
     828:	mov	r1, #22
     82c:	str	r1, [r0]
     830:	mov	r2, #3
     834:	str	r2, [r0, #4]
     838:	mov	r3, #1
     83c:	str	r3, [r0, #8]
     840:	str	r4, [r0, #12]
     844:	str	r5, [r0, #16]
     848:	ldr	r4, [sp, #16]
     84c:	ldr	r5, [sp, #20]
     850:	ldr	lr, [sp, #8]
     854:	add	sp, sp, #24
     858:	bx	lr
     85c:	.word	0x000005f0
     860:	.word	0x0000053b

00000864 <coda_expression_new>:
     864:	mov	ip, sp
     868:	sub	sp, sp, #48	; 0x30
     86c:	str	ip, [sp, #4]
     870:	str	lr, [sp, #8]
     874:	str	r4, [sp, #16]
     878:	str	r5, [sp, #20]
     87c:	str	r6, [sp, #24]
     880:	str	r7, [sp, #28]
     884:	str	r8, [sp, #32]
     888:	str	r9, [sp, #36]	; 0x24
     88c:	str	sl, [sp, #40]	; 0x28
     890:	ldr	r6, [ip, #4]
     894:	ldr	sl, [ip]
     898:	mov	r4, r3
     89c:	mov	r5, r2
     8a0:	mov	r7, r1
     8a4:	mov	r8, r0
     8a8:	cmp	r8, #20
     8ac:	bcs	8d8 <coda_expression_new+0x74>
     8b0:	cmp	r8, #18
     8b4:	beq	8cc <coda_expression_new+0x68>
     8b8:	cmp	r8, #19
     8bc:	bne	8fc <coda_expression_new+0x98>
     8c0:	mov	r0, r7
     8c4:	bl	590 <float_constant_new>
     8c8:	b	dbc <coda_expression_new+0x558>
     8cc:	mov	r0, r7
     8d0:	bl	4cc <boolean_constant_new>
     8d4:	b	dbc <coda_expression_new+0x558>
     8d8:	cmp	r8, #20
     8dc:	beq	db4 <coda_expression_new+0x550>
     8e0:	cmp	r8, #21
     8e4:	beq	da8 <coda_expression_new+0x544>
     8e8:	cmp	r8, #22
     8ec:	bne	8fc <coda_expression_new+0x98>
     8f0:	mov	r0, r7
     8f4:	bl	7b4 <string_constant_new>
     8f8:	b	dbc <coda_expression_new+0x558>
     8fc:	cmp	r8, #60	; 0x3c
     900:	bne	954 <coda_expression_new+0xf0>
     904:	ldr	r3, [r5]
     908:	cmp	r3, #19
     90c:	bne	924 <coda_expression_new+0xc0>
     910:	vldr	d3, [r5, #16]
     914:	vneg.f64	d0, d3
     918:	vstr	d0, [r5, #16]
     91c:	mov	r0, r5
     920:	b	dbc <coda_expression_new+0x558>
     924:	ldr	r2, [r5]
     928:	cmp	r2, #20
     92c:	bne	954 <coda_expression_new+0xf0>
     930:	ldr	r3, [r5, #16]
     934:	ldr	r2, [r5, #20]
     938:	rsbs	lr, r3, #0
     93c:	rsc	ip, r2, #0
     940:	mov	r2, lr
     944:	str	r2, [r5, #16]
     948:	str	ip, [r5, #20]
     94c:	mov	r0, r5
     950:	b	dbc <coda_expression_new+0x558>
     954:	mov	r0, #32
     958:	bl	0 <malloc>
     95c:	mov	r9, r0
     960:	cmp	r9, #0
     964:	bne	9dc <coda_expression_new+0x178>
     968:	mvn	r0, #0
     96c:	ldr	r1, [pc, #1140]	; de8 <coda_expression_new+0x584>
     970:	mov	r2, #32
     974:	ldr	r3, [pc, #1140]	; df0 <coda_expression_new+0x58c>
     978:	movw	r8, #387	; 0x183
     97c:	str	r8, [sp]
     980:	bl	0 <coda_set_error>
     984:	cmp	r7, #0
     988:	beq	994 <coda_expression_new+0x130>
     98c:	mov	r0, r7
     990:	bl	0 <free>
     994:	cmp	r5, #0
     998:	beq	9a4 <coda_expression_new+0x140>
     99c:	mov	r0, r5
     9a0:	bl	9f54 <coda_expression_delete>
     9a4:	cmp	r4, #0
     9a8:	beq	9b4 <coda_expression_new+0x150>
     9ac:	mov	r0, r4
     9b0:	bl	9f54 <coda_expression_delete>
     9b4:	cmp	sl, #0
     9b8:	beq	9c4 <coda_expression_new+0x160>
     9bc:	mov	r0, sl
     9c0:	bl	9f54 <coda_expression_delete>
     9c4:	cmp	r6, #0
     9c8:	beq	9d4 <coda_expression_new+0x170>
     9cc:	mov	r0, r6
     9d0:	bl	9f54 <coda_expression_delete>
     9d4:	mov	r0, #0
     9d8:	b	dbc <coda_expression_new+0x558>
     9dc:	str	r8, [r9]
     9e0:	str	r7, [r9, #12]
     9e4:	str	r5, [r9, #16]
     9e8:	str	r4, [r9, #20]
     9ec:	str	sl, [r9, #24]
     9f0:	str	r6, [r9, #28]
     9f4:	cmp	r8, #87	; 0x57
     9f8:	bcs	c40 <coda_expression_new+0x3dc>
     9fc:	add	pc, pc, r8, lsl #2
     a00:	nop	{0}
     a04:	b	ba8 <coda_expression_new+0x344>
     a08:	b	bb4 <coda_expression_new+0x350>
     a0c:	b	b78 <coda_expression_new+0x314>
     a10:	b	bf8 <coda_expression_new+0x394>
     a14:	b	b60 <coda_expression_new+0x2fc>
     a18:	b	b78 <coda_expression_new+0x314>
     a1c:	b	b60 <coda_expression_new+0x2fc>
     a20:	b	b78 <coda_expression_new+0x314>
     a24:	b	bf8 <coda_expression_new+0x394>
     a28:	b	bf8 <coda_expression_new+0x394>
     a2c:	b	b9c <coda_expression_new+0x338>
     a30:	b	bf8 <coda_expression_new+0x394>
     a34:	b	b78 <coda_expression_new+0x314>
     a38:	b	b78 <coda_expression_new+0x314>
     a3c:	b	b78 <coda_expression_new+0x314>
     a40:	b	b78 <coda_expression_new+0x314>
     a44:	b	b84 <coda_expression_new+0x320>
     a48:	b	b6c <coda_expression_new+0x308>
     a4c:	b	c24 <coda_expression_new+0x3c0>
     a50:	b	c24 <coda_expression_new+0x3c0>
     a54:	b	c24 <coda_expression_new+0x3c0>
     a58:	b	c24 <coda_expression_new+0x3c0>
     a5c:	b	c24 <coda_expression_new+0x3c0>
     a60:	b	b78 <coda_expression_new+0x314>
     a64:	b	bb4 <coda_expression_new+0x350>
     a68:	b	b60 <coda_expression_new+0x2fc>
     a6c:	b	b60 <coda_expression_new+0x2fc>
     a70:	b	b78 <coda_expression_new+0x314>
     a74:	b	b84 <coda_expression_new+0x320>
     a78:	b	b6c <coda_expression_new+0x308>
     a7c:	b	b6c <coda_expression_new+0x308>
     a80:	b	b90 <coda_expression_new+0x32c>
     a84:	b	b9c <coda_expression_new+0x338>
     a88:	b	b9c <coda_expression_new+0x338>
     a8c:	b	b9c <coda_expression_new+0x338>
     a90:	b	b9c <coda_expression_new+0x338>
     a94:	b	b9c <coda_expression_new+0x338>
     a98:	b	b9c <coda_expression_new+0x338>
     a9c:	b	b9c <coda_expression_new+0x338>
     aa0:	b	b90 <coda_expression_new+0x32c>
     aa4:	b	b60 <coda_expression_new+0x2fc>
     aa8:	b	b60 <coda_expression_new+0x2fc>
     aac:	b	bf8 <coda_expression_new+0x394>
     ab0:	b	b78 <coda_expression_new+0x314>
     ab4:	b	b78 <coda_expression_new+0x314>
     ab8:	b	b78 <coda_expression_new+0x314>
     abc:	b	b60 <coda_expression_new+0x2fc>
     ac0:	b	b60 <coda_expression_new+0x2fc>
     ac4:	b	b60 <coda_expression_new+0x2fc>
     ac8:	b	b60 <coda_expression_new+0x2fc>
     acc:	b	b78 <coda_expression_new+0x314>
     ad0:	b	b60 <coda_expression_new+0x2fc>
     ad4:	b	b60 <coda_expression_new+0x2fc>
     ad8:	b	b60 <coda_expression_new+0x2fc>
     adc:	b	b60 <coda_expression_new+0x2fc>
     ae0:	b	b84 <coda_expression_new+0x320>
     ae4:	b	bb4 <coda_expression_new+0x350>
     ae8:	b	bb4 <coda_expression_new+0x350>
     aec:	b	bb4 <coda_expression_new+0x350>
     af0:	b	bb4 <coda_expression_new+0x350>
     af4:	b	ba8 <coda_expression_new+0x344>
     af8:	b	b60 <coda_expression_new+0x2fc>
     afc:	b	b60 <coda_expression_new+0x2fc>
     b00:	b	b78 <coda_expression_new+0x314>
     b04:	b	b78 <coda_expression_new+0x314>
     b08:	b	b78 <coda_expression_new+0x314>
     b0c:	b	b6c <coda_expression_new+0x308>
     b10:	b	b84 <coda_expression_new+0x320>
     b14:	b	b84 <coda_expression_new+0x320>
     b18:	b	b84 <coda_expression_new+0x320>
     b1c:	b	b78 <coda_expression_new+0x314>
     b20:	b	c04 <coda_expression_new+0x3a0>
     b24:	b	b6c <coda_expression_new+0x308>
     b28:	b	b84 <coda_expression_new+0x320>
     b2c:	b	b90 <coda_expression_new+0x32c>
     b30:	b	b84 <coda_expression_new+0x320>
     b34:	b	b84 <coda_expression_new+0x320>
     b38:	b	b84 <coda_expression_new+0x320>
     b3c:	b	bb4 <coda_expression_new+0x350>
     b40:	b	b6c <coda_expression_new+0x308>
     b44:	b	b84 <coda_expression_new+0x320>
     b48:	b	b78 <coda_expression_new+0x314>
     b4c:	b	b60 <coda_expression_new+0x2fc>
     b50:	b	b78 <coda_expression_new+0x314>
     b54:	b	b90 <coda_expression_new+0x32c>
     b58:	b	b78 <coda_expression_new+0x314>
     b5c:	b	bf8 <coda_expression_new+0x394>
     b60:	mov	r0, #0
     b64:	str	r0, [r9, #4]
     b68:	b	c40 <coda_expression_new+0x3dc>
     b6c:	mov	r3, #2
     b70:	str	r3, [r9, #4]
     b74:	b	c40 <coda_expression_new+0x3dc>
     b78:	mov	ip, #1
     b7c:	str	ip, [r9, #4]
     b80:	b	c40 <coda_expression_new+0x3dc>
     b84:	mov	r0, #3
     b88:	str	r0, [r9, #4]
     b8c:	b	c40 <coda_expression_new+0x3dc>
     b90:	mov	ip, #5
     b94:	str	ip, [r9, #4]
     b98:	b	c40 <coda_expression_new+0x3dc>
     b9c:	mov	r1, #4
     ba0:	str	r1, [r9, #4]
     ba4:	b	c40 <coda_expression_new+0x3dc>
     ba8:	ldr	r0, [r5, #4]
     bac:	str	r0, [r9, #4]
     bb0:	b	c40 <coda_expression_new+0x3dc>
     bb4:	ldr	r1, [r5, #4]
     bb8:	cmp	r1, #2
     bbc:	beq	bd4 <coda_expression_new+0x370>
     bc0:	ldr	r0, [r4, #4]
     bc4:	cmp	r0, #2
     bc8:	moveq	r3, #1
     bcc:	movne	r3, #0
     bd0:	b	bd8 <coda_expression_new+0x374>
     bd4:	mov	r3, #1
     bd8:	cmp	r3, #0
     bdc:	bne	bec <coda_expression_new+0x388>
     be0:	ldr	r3, [r5, #4]
     be4:	str	r3, [r9, #4]
     be8:	b	c40 <coda_expression_new+0x3dc>
     bec:	mov	r2, #2
     bf0:	str	r2, [r9, #4]
     bf4:	b	c40 <coda_expression_new+0x3dc>
     bf8:	ldr	r1, [r4, #4]
     bfc:	str	r1, [r9, #4]
     c00:	b	c40 <coda_expression_new+0x3dc>
     c04:	cmp	sl, #0
     c08:	beq	c18 <coda_expression_new+0x3b4>
     c0c:	mov	r0, #3
     c10:	str	r0, [r9, #4]
     c14:	b	c40 <coda_expression_new+0x3dc>
     c18:	mov	r1, #0
     c1c:	str	r1, [r9, #4]
     c20:	b	c40 <coda_expression_new+0x3dc>
     c24:	ldr	r0, [pc, #448]	; dec <coda_expression_new+0x588>
     c28:	ldr	r1, [pc, #448]	; df0 <coda_expression_new+0x58c>
     c2c:	movw	r2, #541	; 0x21d
     c30:	ldr	r3, [pc, #428]	; de4 <coda_expression_new+0x580>
     c34:	bl	0 <__assert_fail>
     c38:	mov	r0, #1
     c3c:	bl	0 <exit>
     c40:	ldr	r3, [r9]
     c44:	cmp	r3, #69	; 0x45
     c48:	bcs	c68 <coda_expression_new+0x404>
     c4c:	cmp	r3, #67	; 0x43
     c50:	bcs	d98 <coda_expression_new+0x534>
     c54:	cmp	r3, #27
     c58:	beq	d98 <coda_expression_new+0x534>
     c5c:	cmp	r3, #28
     c60:	beq	d98 <coda_expression_new+0x534>
     c64:	b	c9c <coda_expression_new+0x438>
     c68:	cmp	r3, #83	; 0x53
     c6c:	bcs	c84 <coda_expression_new+0x420>
     c70:	cmp	r3, #69	; 0x45
     c74:	beq	d98 <coda_expression_new+0x534>
     c78:	cmp	r3, #70	; 0x46
     c7c:	beq	d98 <coda_expression_new+0x534>
     c80:	b	c9c <coda_expression_new+0x438>
     c84:	cmp	r3, #83	; 0x53
     c88:	beq	d98 <coda_expression_new+0x534>
     c8c:	cmp	r3, #84	; 0x54
     c90:	beq	d98 <coda_expression_new+0x534>
     c94:	cmp	r3, #85	; 0x55
     c98:	beq	d98 <coda_expression_new+0x534>
     c9c:	ldr	ip, [r9, #4]
     ca0:	cmp	ip, #4
     ca4:	beq	cd8 <coda_expression_new+0x474>
     ca8:	cmp	r5, #0
     cac:	beq	cd0 <coda_expression_new+0x46c>
     cb0:	ldr	r2, [r5, #8]
     cb4:	cmp	r2, #0
     cb8:	movne	r2, #1
     cbc:	moveq	r2, #0
     cc0:	cmp	r2, #0
     cc4:	movne	ip, #1
     cc8:	moveq	ip, #0
     ccc:	b	cdc <coda_expression_new+0x478>
     cd0:	mov	ip, #1
     cd4:	b	cdc <coda_expression_new+0x478>
     cd8:	mov	ip, #0
     cdc:	cmp	ip, #0
     ce0:	beq	d14 <coda_expression_new+0x4b0>
     ce4:	cmp	r4, #0
     ce8:	beq	d0c <coda_expression_new+0x4a8>
     cec:	ldr	r2, [r4, #8]
     cf0:	cmp	r2, #0
     cf4:	movne	ip, #1
     cf8:	moveq	ip, #0
     cfc:	cmp	ip, #0
     d00:	movne	r1, #1
     d04:	moveq	r1, #0
     d08:	b	d18 <coda_expression_new+0x4b4>
     d0c:	mov	r1, #1
     d10:	b	d18 <coda_expression_new+0x4b4>
     d14:	mov	r1, #0
     d18:	cmp	r1, #0
     d1c:	beq	d50 <coda_expression_new+0x4ec>
     d20:	cmp	sl, #0
     d24:	beq	d48 <coda_expression_new+0x4e4>
     d28:	ldr	r3, [sl, #8]
     d2c:	cmp	r3, #0
     d30:	movne	r3, #1
     d34:	moveq	r3, #0
     d38:	cmp	r3, #0
     d3c:	movne	r1, #1
     d40:	moveq	r1, #0
     d44:	b	d54 <coda_expression_new+0x4f0>
     d48:	mov	r1, #1
     d4c:	b	d54 <coda_expression_new+0x4f0>
     d50:	mov	r1, #0
     d54:	cmp	r1, #0
     d58:	beq	d8c <coda_expression_new+0x528>
     d5c:	cmp	r6, #0
     d60:	beq	d84 <coda_expression_new+0x520>
     d64:	ldr	r0, [r6, #8]
     d68:	cmp	r0, #0
     d6c:	movne	r3, #1
     d70:	moveq	r3, #0
     d74:	cmp	r3, #0
     d78:	movne	ip, #1
     d7c:	moveq	ip, #0
     d80:	b	d90 <coda_expression_new+0x52c>
     d84:	mov	ip, #1
     d88:	b	d90 <coda_expression_new+0x52c>
     d8c:	mov	ip, #0
     d90:	str	ip, [r9, #8]
     d94:	b	da0 <coda_expression_new+0x53c>
     d98:	mov	r0, #0
     d9c:	str	r0, [r9, #8]
     da0:	mov	r0, r9
     da4:	b	dbc <coda_expression_new+0x558>
     da8:	mov	r0, r7
     dac:	bl	718 <rawstring_constant_new>
     db0:	b	dbc <coda_expression_new+0x558>
     db4:	mov	r0, r7
     db8:	bl	650 <integer_constant_new>
     dbc:	ldr	r4, [sp, #16]
     dc0:	ldr	r5, [sp, #20]
     dc4:	ldr	r6, [sp, #24]
     dc8:	ldr	r7, [sp, #28]
     dcc:	ldr	r8, [sp, #32]
     dd0:	ldr	r9, [sp, #36]	; 0x24
     dd4:	ldr	sl, [sp, #40]	; 0x28
     dd8:	ldr	lr, [sp, #8]
     ddc:	add	sp, sp, #48	; 0x30
     de0:	bx	lr
     de4:	.word	0x00000d58
     de8:	.word	0x000005f0
     dec:	.word	0x00000bf8
     df0:	.word	0x0000053b

00000df4 <init_eval_info>:
     df4:	mov	ip, sp
     df8:	sub	sp, sp, #8
     dfc:	str	ip, [sp]
     e00:	str	lr, [sp, #4]
     e04:	str	r1, [r0]
     e08:	cmp	r1, #0
     e0c:	beq	e2c <init_eval_info+0x38>
     e10:	add	r2, r0, #8
     e14:	mov	r3, r1
     e18:	mov	lr, #130	; 0x82
     e1c:	ldr	ip, [r3], #4
     e20:	subs	lr, lr, #1
     e24:	str	ip, [r2], #4
     e28:	bne	e1c <init_eval_info+0x28>
     e2c:	mov	r2, #0
     e30:	mov	r1, #0
     e34:	str	r1, [r0, #528]	; 0x210
     e38:	str	r2, [r0, #532]	; 0x214
     e3c:	mov	r2, #0
     e40:	mov	r1, #0
     e44:	str	r1, [r0, #536]	; 0x218
     e48:	str	r2, [r0, #540]	; 0x21c
     e4c:	mov	r3, #0
     e50:	mov	r2, #0
     e54:	str	r2, [r0, #544]	; 0x220
     e58:	str	r3, [r0, #548]	; 0x224
     e5c:	mov	r1, #0
     e60:	mov	ip, #0
     e64:	str	ip, [r0, #552]	; 0x228
     e68:	str	r1, [r0, #556]	; 0x22c
     e6c:	mov	r3, #0
     e70:	str	r3, [r0, #560]	; 0x230
     e74:	ldr	lr, [sp, #4]
     e78:	add	sp, sp, #8
     e7c:	bx	lr

00000e80 <eval_boolean>:
     e80:	mov	ip, sp
     e84:	sub	sp, sp, #712	; 0x2c8
     e88:	sub	sp, sp, #2048	; 0x800
     e8c:	str	ip, [sp, #16]
     e90:	str	lr, [sp, #20]
     e94:	str	r4, [sp, #24]
     e98:	str	r5, [sp, #28]
     e9c:	str	r6, [sp, #32]
     ea0:	str	r7, [sp, #36]	; 0x24
     ea4:	str	r8, [sp, #40]	; 0x28
     ea8:	str	r9, [sp, #44]	; 0x2c
     eac:	mov	r5, r2
     eb0:	mov	r6, r0
     eb4:	ldr	r2, [r1]
     eb8:	cmp	r2, #18
     ebc:	bne	ed0 <eval_boolean+0x50>
     ec0:	ldr	r3, [r1, #12]
     ec4:	str	r3, [r5]
     ec8:	mov	r0, #0
     ecc:	b	2658 <eval_boolean+0x17d8>
     ed0:	mov	r7, r1
     ed4:	ldr	r1, [r7]
     ed8:	cmp	r1, #48	; 0x30
     edc:	bcs	1ab8 <eval_boolean+0xc38>
     ee0:	cmp	r1, #40	; 0x28
     ee4:	bcs	15a4 <eval_boolean+0x724>
     ee8:	cmp	r1, #11
     eec:	bcs	1190 <eval_boolean+0x310>
     ef0:	cmp	r1, #4
     ef4:	beq	1044 <eval_boolean+0x1c4>
     ef8:	cmp	r1, #6
     efc:	bne	2310 <eval_boolean+0x1490>
     f00:	ldr	r2, [r6]
     f04:	cmp	r2, #0
     f08:	bne	f20 <eval_boolean+0xa0>
     f0c:	ldr	r0, [pc, #3868]	; 1e30 <eval_boolean+0xfb0>
     f10:	ldr	r1, [pc, #3872]	; 1e38 <eval_boolean+0xfb8>
     f14:	movw	r2, #1239	; 0x4d7
     f18:	ldr	r3, [pc, #3852]	; 1e2c <eval_boolean+0xfac>
     f1c:	bl	0 <__assert_fail>
     f20:	add	r3, r6, #8
     f24:	mov	r2, r3
     f28:	add	r3, sp, #2240	; 0x8c0
     f2c:	mov	lr, #130	; 0x82
     f30:	ldr	ip, [r2], #4
     f34:	subs	lr, lr, #1
     f38:	str	ip, [r3], #4
     f3c:	bne	f30 <eval_boolean+0xb0>
     f40:	ldr	r1, [r7, #16]
     f44:	mov	r0, r6
     f48:	bl	7608 <eval_cursor>
     f4c:	cmp	r0, #0
     f50:	beq	f5c <eval_boolean+0xdc>
     f54:	mvn	r0, #0
     f58:	b	2658 <eval_boolean+0x17d8>
     f5c:	add	r0, r6, #8
     f60:	add	r1, sp, #52	; 0x34
     f64:	bl	0 <coda_cursor_get_num_elements>
     f68:	cmp	r0, #0
     f6c:	beq	f78 <eval_boolean+0xf8>
     f70:	mvn	r0, #0
     f74:	b	2658 <eval_boolean+0x17d8>
     f78:	ldr	r2, [sp, #52]	; 0x34
     f7c:	cmp	r2, #0
     f80:	ble	1018 <eval_boolean+0x198>
     f84:	add	r0, r6, #8
     f88:	bl	0 <coda_cursor_goto_first_array_element>
     f8c:	cmp	r0, #0
     f90:	beq	f9c <eval_boolean+0x11c>
     f94:	mvn	r0, #0
     f98:	b	2658 <eval_boolean+0x17d8>
     f9c:	mov	r4, #0
     fa0:	ldr	r1, [sp, #52]	; 0x34
     fa4:	cmp	r4, r1
     fa8:	bge	1018 <eval_boolean+0x198>
     fac:	ldr	r1, [r7, #20]
     fb0:	add	r2, sp, #56	; 0x38
     fb4:	mov	r0, r6
     fb8:	bl	e80 <eval_boolean>
     fbc:	cmp	r0, #0
     fc0:	beq	fcc <eval_boolean+0x14c>
     fc4:	mvn	r0, #0
     fc8:	b	2658 <eval_boolean+0x17d8>
     fcc:	ldr	ip, [sp, #56]	; 0x38
     fd0:	cmp	ip, #0
     fd4:	beq	fe8 <eval_boolean+0x168>
     fd8:	mov	ip, #1
     fdc:	str	ip, [r5]
     fe0:	mov	r0, #0
     fe4:	b	2658 <eval_boolean+0x17d8>
     fe8:	ldr	r0, [sp, #52]	; 0x34
     fec:	sub	r0, r0, #1
     ff0:	cmp	r4, r0
     ff4:	bge	1010 <eval_boolean+0x190>
     ff8:	add	r0, r6, #8
     ffc:	bl	0 <coda_cursor_goto_next_array_element>
    1000:	cmp	r0, #0
    1004:	beq	1010 <eval_boolean+0x190>
    1008:	mvn	r0, #0
    100c:	b	2658 <eval_boolean+0x17d8>
    1010:	add	r4, r4, #1
    1014:	b	fa0 <eval_boolean+0x120>
    1018:	mov	r2, #0
    101c:	str	r2, [r5]
    1020:	add	r0, r6, #8
    1024:	add	r2, sp, #2240	; 0x8c0
    1028:	mov	r3, r0
    102c:	mov	lr, #130	; 0x82
    1030:	ldr	ip, [r2], #4
    1034:	subs	lr, lr, #1
    1038:	str	ip, [r3], #4
    103c:	bne	1030 <eval_boolean+0x1b0>
    1040:	b	2654 <eval_boolean+0x17d4>
    1044:	ldr	r1, [r6]
    1048:	cmp	r1, #0
    104c:	bne	1064 <eval_boolean+0x1e4>
    1050:	ldr	r0, [pc, #3544]	; 1e30 <eval_boolean+0xfb0>
    1054:	ldr	r1, [pc, #3548]	; 1e38 <eval_boolean+0xfb8>
    1058:	movw	r2, #1190	; 0x4a6
    105c:	ldr	r3, [pc, #3528]	; 1e2c <eval_boolean+0xfac>
    1060:	bl	0 <__assert_fail>
    1064:	add	r3, r6, #8
    1068:	mov	r2, r3
    106c:	add	r3, sp, #696	; 0x2b8
    1070:	add	r3, r3, #1024	; 0x400
    1074:	mov	lr, #130	; 0x82
    1078:	ldr	ip, [r2], #4
    107c:	subs	lr, lr, #1
    1080:	str	ip, [r3], #4
    1084:	bne	1078 <eval_boolean+0x1f8>
    1088:	ldr	r1, [r7, #16]
    108c:	mov	r0, r6
    1090:	bl	7608 <eval_cursor>
    1094:	cmp	r0, #0
    1098:	beq	10a4 <eval_boolean+0x224>
    109c:	mvn	r0, #0
    10a0:	b	2658 <eval_boolean+0x17d8>
    10a4:	add	r0, r6, #8
    10a8:	add	r1, sp, #108	; 0x6c
    10ac:	bl	0 <coda_cursor_get_num_elements>
    10b0:	cmp	r0, #0
    10b4:	beq	10c0 <eval_boolean+0x240>
    10b8:	mvn	r0, #0
    10bc:	b	2658 <eval_boolean+0x17d8>
    10c0:	ldr	r3, [sp, #108]	; 0x6c
    10c4:	cmp	r3, #0
    10c8:	ble	1160 <eval_boolean+0x2e0>
    10cc:	add	r0, r6, #8
    10d0:	bl	0 <coda_cursor_goto_first_array_element>
    10d4:	cmp	r0, #0
    10d8:	beq	10e4 <eval_boolean+0x264>
    10dc:	mvn	r0, #0
    10e0:	b	2658 <eval_boolean+0x17d8>
    10e4:	mov	r4, #0
    10e8:	ldr	r3, [sp, #108]	; 0x6c
    10ec:	cmp	r4, r3
    10f0:	bge	1160 <eval_boolean+0x2e0>
    10f4:	ldr	r1, [r7, #20]
    10f8:	add	r2, sp, #112	; 0x70
    10fc:	mov	r0, r6
    1100:	bl	e80 <eval_boolean>
    1104:	cmp	r0, #0
    1108:	beq	1114 <eval_boolean+0x294>
    110c:	mvn	r0, #0
    1110:	b	2658 <eval_boolean+0x17d8>
    1114:	ldr	r1, [sp, #112]	; 0x70
    1118:	cmp	r1, #0
    111c:	bne	1130 <eval_boolean+0x2b0>
    1120:	mov	ip, #0
    1124:	str	ip, [r5]
    1128:	mov	r0, #0
    112c:	b	2658 <eval_boolean+0x17d8>
    1130:	ldr	ip, [sp, #108]	; 0x6c
    1134:	sub	ip, ip, #1
    1138:	cmp	r4, ip
    113c:	bge	1158 <eval_boolean+0x2d8>
    1140:	add	r0, r6, #8
    1144:	bl	0 <coda_cursor_goto_next_array_element>
    1148:	cmp	r0, #0
    114c:	beq	1158 <eval_boolean+0x2d8>
    1150:	mvn	r0, #0
    1154:	b	2658 <eval_boolean+0x17d8>
    1158:	add	r4, r4, #1
    115c:	b	10e8 <eval_boolean+0x268>
    1160:	mov	r1, #1
    1164:	str	r1, [r5]
    1168:	add	r0, r6, #8
    116c:	add	r2, sp, #696	; 0x2b8
    1170:	add	r2, r2, #1024	; 0x400
    1174:	mov	r3, r0
    1178:	mov	lr, #130	; 0x82
    117c:	ldr	ip, [r2], #4
    1180:	subs	lr, lr, #1
    1184:	str	ip, [r3], #4
    1188:	bne	117c <eval_boolean+0x2fc>
    118c:	b	2654 <eval_boolean+0x17d4>
    1190:	cmp	r1, #11
    1194:	beq	1504 <eval_boolean+0x684>
    1198:	cmp	r1, #25
    119c:	beq	1300 <eval_boolean+0x480>
    11a0:	cmp	r1, #26
    11a4:	bne	2310 <eval_boolean+0x1490>
    11a8:	ldr	r2, [r6]
    11ac:	cmp	r2, #0
    11b0:	bne	11c8 <eval_boolean+0x348>
    11b4:	ldr	r0, [pc, #3188]	; 1e30 <eval_boolean+0xfb0>
    11b8:	ldr	r1, [pc, #3192]	; 1e38 <eval_boolean+0xfb8>
    11bc:	movw	r2, #1148	; 0x47c
    11c0:	ldr	r3, [pc, #3172]	; 1e2c <eval_boolean+0xfac>
    11c4:	bl	0 <__assert_fail>
    11c8:	add	r0, r6, #8
    11cc:	mov	r2, r0
    11d0:	add	r3, sp, #1200	; 0x4b0
    11d4:	mov	lr, #130	; 0x82
    11d8:	ldr	ip, [r2], #4
    11dc:	subs	lr, lr, #1
    11e0:	str	ip, [r3], #4
    11e4:	bne	11d8 <eval_boolean+0x358>
    11e8:	ldr	r1, [r7, #16]
    11ec:	mov	r0, r6
    11f0:	bl	7608 <eval_cursor>
    11f4:	cmp	r0, #0
    11f8:	beq	1254 <eval_boolean+0x3d4>
    11fc:	ldr	r3, [pc, #3128]	; 1e3c <eval_boolean+0xfbc>
    1200:	ldr	r0, [r3]
    1204:	mvn	lr, #400	; 0x190
    1208:	cmp	r0, lr
    120c:	beq	124c <eval_boolean+0x3cc>
    1210:	ldr	r3, [pc, #3108]	; 1e3c <eval_boolean+0xfbc>
    1214:	mov	r2, #0
    1218:	str	r2, [r3]
    121c:	mov	r2, #0
    1220:	str	r2, [r5]
    1224:	add	r0, r6, #8
    1228:	add	r2, sp, #1200	; 0x4b0
    122c:	mov	r3, r0
    1230:	mov	lr, #130	; 0x82
    1234:	ldr	ip, [r2], #4
    1238:	subs	lr, lr, #1
    123c:	str	ip, [r3], #4
    1240:	bne	1234 <eval_boolean+0x3b4>
    1244:	mov	r0, #0
    1248:	b	2658 <eval_boolean+0x17d8>
    124c:	mvn	r0, #0
    1250:	b	2658 <eval_boolean+0x17d8>
    1254:	add	r0, r6, #8
    1258:	add	r1, sp, #100	; 0x64
    125c:	bl	0 <coda_cursor_get_type_class>
    1260:	cmp	r0, #0
    1264:	beq	1270 <eval_boolean+0x3f0>
    1268:	mvn	r0, #0
    126c:	b	2658 <eval_boolean+0x17d8>
    1270:	ldr	ip, [sp, #100]	; 0x64
    1274:	cmp	ip, #6
    1278:	bne	12d4 <eval_boolean+0x454>
    127c:	add	r0, r6, #8
    1280:	add	r1, sp, #104	; 0x68
    1284:	bl	0 <coda_cursor_get_special_type>
    1288:	cmp	r0, #0
    128c:	beq	1298 <eval_boolean+0x418>
    1290:	mvn	r0, #0
    1294:	b	2658 <eval_boolean+0x17d8>
    1298:	ldr	ip, [sp, #104]	; 0x68
    129c:	cmp	ip, #0
    12a0:	bne	12d4 <eval_boolean+0x454>
    12a4:	mov	r0, #0
    12a8:	str	r0, [r5]
    12ac:	add	r0, r6, #8
    12b0:	add	r2, sp, #1200	; 0x4b0
    12b4:	mov	r3, r0
    12b8:	mov	lr, #130	; 0x82
    12bc:	ldr	ip, [r2], #4
    12c0:	subs	lr, lr, #1
    12c4:	str	ip, [r3], #4
    12c8:	bne	12bc <eval_boolean+0x43c>
    12cc:	mov	r0, #0
    12d0:	b	2658 <eval_boolean+0x17d8>
    12d4:	mov	r0, #1
    12d8:	str	r0, [r5]
    12dc:	add	r0, r6, #8
    12e0:	add	r2, sp, #1200	; 0x4b0
    12e4:	mov	r3, r0
    12e8:	mov	lr, #130	; 0x82
    12ec:	ldr	ip, [r2], #4
    12f0:	subs	lr, lr, #1
    12f4:	str	ip, [r3], #4
    12f8:	bne	12ec <eval_boolean+0x46c>
    12fc:	b	2654 <eval_boolean+0x17d4>
    1300:	ldr	r0, [r7, #16]
    1304:	ldr	r2, [r0, #4]
    1308:	cmp	r2, #2
    130c:	beq	1328 <eval_boolean+0x4a8>
    1310:	ldr	r3, [r7, #20]
    1314:	ldr	r1, [r3, #4]
    1318:	cmp	r1, #2
    131c:	moveq	ip, #1
    1320:	movne	ip, #0
    1324:	b	132c <eval_boolean+0x4ac>
    1328:	mov	ip, #1
    132c:	cmp	ip, #0
    1330:	bne	14a4 <eval_boolean+0x624>
    1334:	ldr	r1, [r7, #16]
    1338:	ldr	r0, [r1, #4]
    133c:	cmp	r0, #1
    1340:	beq	1434 <eval_boolean+0x5b4>
    1344:	ldr	r0, [r7, #16]
    1348:	ldr	r3, [r0, #4]
    134c:	cmp	r3, #3
    1350:	bne	1414 <eval_boolean+0x594>
    1354:	ldr	r1, [r7, #16]
    1358:	add	r2, sp, #116	; 0x74
    135c:	add	r3, sp, #124	; 0x7c
    1360:	add	r0, sp, #132	; 0x84
    1364:	str	r0, [sp]
    1368:	mov	r0, r6
    136c:	bl	5444 <eval_string>
    1370:	cmp	r0, #0
    1374:	beq	1380 <eval_boolean+0x500>
    1378:	mvn	r0, #0
    137c:	b	2658 <eval_boolean+0x17d8>
    1380:	ldr	r1, [r7, #20]
    1384:	add	r2, sp, #120	; 0x78
    1388:	add	r3, sp, #128	; 0x80
    138c:	add	ip, sp, #136	; 0x88
    1390:	str	ip, [sp]
    1394:	mov	r0, r6
    1398:	bl	5444 <eval_string>
    139c:	cmp	r0, #0
    13a0:	beq	13b4 <eval_boolean+0x534>
    13a4:	ldr	r0, [sp, #132]	; 0x84
    13a8:	bl	0 <free>
    13ac:	mvn	r0, #0
    13b0:	b	2658 <eval_boolean+0x17d8>
    13b4:	ldr	r0, [sp, #116]	; 0x74
    13b8:	ldr	r1, [sp, #124]	; 0x7c
    13bc:	ldr	r2, [sp, #132]	; 0x84
    13c0:	ldr	r3, [sp, #120]	; 0x78
    13c4:	ldr	ip, [sp, #128]	; 0x80
    13c8:	ldr	r6, [sp, #136]	; 0x88
    13cc:	str	r6, [sp, #4]
    13d0:	str	ip, [sp]
    13d4:	bl	d8 <compare_strings>
    13d8:	cmp	r0, #0
    13dc:	moveq	ip, #1
    13e0:	movne	ip, #0
    13e4:	str	ip, [r5]
    13e8:	ldr	r0, [sp, #124]	; 0x7c
    13ec:	cmp	r0, #0
    13f0:	ble	13fc <eval_boolean+0x57c>
    13f4:	ldr	r0, [sp, #132]	; 0x84
    13f8:	bl	0 <free>
    13fc:	ldr	r0, [sp, #128]	; 0x80
    1400:	cmp	r0, #0
    1404:	ble	2654 <eval_boolean+0x17d4>
    1408:	ldr	r0, [sp, #136]	; 0x88
    140c:	bl	0 <free>
    1410:	b	2654 <eval_boolean+0x17d4>
    1414:	ldr	r0, [pc, #2584]	; 1e34 <eval_boolean+0xfb4>
    1418:	ldr	r1, [pc, #2584]	; 1e38 <eval_boolean+0xfb8>
    141c:	mov	r2, #668	; 0x29c
    1420:	ldr	r3, [pc, #2564]	; 1e2c <eval_boolean+0xfac>
    1424:	bl	0 <__assert_fail>
    1428:	mov	r0, #1
    142c:	bl	0 <exit>
    1430:	b	2654 <eval_boolean+0x17d4>
    1434:	ldr	r1, [r7, #16]
    1438:	add	r2, sp, #280	; 0x118
    143c:	mov	r0, r6
    1440:	bl	367c <eval_integer>
    1444:	cmp	r0, #0
    1448:	beq	1454 <eval_boolean+0x5d4>
    144c:	mvn	r0, #0
    1450:	b	2658 <eval_boolean+0x17d8>
    1454:	ldr	r1, [r7, #20]
    1458:	add	r2, sp, #288	; 0x120
    145c:	mov	r0, r6
    1460:	bl	367c <eval_integer>
    1464:	cmp	r0, #0
    1468:	beq	1474 <eval_boolean+0x5f4>
    146c:	mvn	r0, #0
    1470:	b	2658 <eval_boolean+0x17d8>
    1474:	ldr	r2, [sp, #280]	; 0x118
    1478:	ldr	r1, [sp, #284]	; 0x11c
    147c:	ldr	r0, [sp, #288]	; 0x120
    1480:	ldr	r3, [sp, #292]	; 0x124
    1484:	eor	r1, r1, r3
    1488:	eor	r0, r2, r0
    148c:	orr	r3, r1, r0
    1490:	cmp	r3, #0
    1494:	moveq	r0, #1
    1498:	movne	r0, #0
    149c:	str	r0, [r5]
    14a0:	b	2654 <eval_boolean+0x17d4>
    14a4:	ldr	r1, [r7, #16]
    14a8:	add	r2, sp, #264	; 0x108
    14ac:	mov	r0, r6
    14b0:	bl	26a8 <eval_float>
    14b4:	cmp	r0, #0
    14b8:	beq	14c4 <eval_boolean+0x644>
    14bc:	mvn	r0, #0
    14c0:	b	2658 <eval_boolean+0x17d8>
    14c4:	ldr	r1, [r7, #20]
    14c8:	add	r2, sp, #272	; 0x110
    14cc:	mov	r0, r6
    14d0:	bl	26a8 <eval_float>
    14d4:	cmp	r0, #0
    14d8:	beq	14e4 <eval_boolean+0x664>
    14dc:	mvn	r0, #0
    14e0:	b	2658 <eval_boolean+0x17d8>
    14e4:	vldr	d7, [sp, #264]	; 0x108
    14e8:	vldr	d1, [sp, #272]	; 0x110
    14ec:	vcmp.f64	d7, d1
    14f0:	vmrs	APSR_nzcv, fpscr
    14f4:	moveq	r2, #1
    14f8:	movne	r2, #0
    14fc:	str	r2, [r5]
    1500:	b	2654 <eval_boolean+0x17d4>
    1504:	ldr	r2, [r6]
    1508:	cmp	r2, #0
    150c:	bne	1524 <eval_boolean+0x6a4>
    1510:	ldr	r0, [pc, #2328]	; 1e30 <eval_boolean+0xfb0>
    1514:	ldr	r1, [pc, #2332]	; 1e38 <eval_boolean+0xfb8>
    1518:	movw	r2, #1348	; 0x544
    151c:	ldr	r3, [pc, #2312]	; 1e2c <eval_boolean+0xfac>
    1520:	bl	0 <__assert_fail>
    1524:	add	r1, r6, #8
    1528:	mov	r2, r1
    152c:	add	r3, sp, #680	; 0x2a8
    1530:	mov	lr, #130	; 0x82
    1534:	ldr	ip, [r2], #4
    1538:	subs	lr, lr, #1
    153c:	str	ip, [r3], #4
    1540:	bne	1534 <eval_boolean+0x6b4>
    1544:	ldr	r1, [r7, #16]
    1548:	mov	r0, r6
    154c:	bl	7608 <eval_cursor>
    1550:	cmp	r0, #0
    1554:	beq	1560 <eval_boolean+0x6e0>
    1558:	mvn	r0, #0
    155c:	b	2658 <eval_boolean+0x17d8>
    1560:	ldr	r1, [r7, #20]
    1564:	mov	r2, r5
    1568:	mov	r0, r6
    156c:	bl	e80 <eval_boolean>
    1570:	cmp	r0, #0
    1574:	beq	1580 <eval_boolean+0x700>
    1578:	mvn	r0, #0
    157c:	b	2658 <eval_boolean+0x17d8>
    1580:	add	r0, r6, #8
    1584:	add	r2, sp, #680	; 0x2a8
    1588:	mov	r3, r0
    158c:	mov	lr, #130	; 0x82
    1590:	ldr	ip, [r2], #4
    1594:	subs	lr, lr, #1
    1598:	str	ip, [r3], #4
    159c:	bne	1590 <eval_boolean+0x710>
    15a0:	b	2654 <eval_boolean+0x17d4>
    15a4:	cmp	r1, #42	; 0x2a
    15a8:	bcs	19d4 <eval_boolean+0xb54>
    15ac:	cmp	r1, #40	; 0x28
    15b0:	beq	17c4 <eval_boolean+0x944>
    15b4:	ldr	r1, [r7, #16]
    15b8:	ldr	r2, [r1, #4]
    15bc:	cmp	r2, #2
    15c0:	beq	15dc <eval_boolean+0x75c>
    15c4:	ldr	r1, [r7, #20]
    15c8:	ldr	r2, [r1, #4]
    15cc:	cmp	r2, #2
    15d0:	moveq	r0, #1
    15d4:	movne	r0, #0
    15d8:	b	15e0 <eval_boolean+0x760>
    15dc:	mov	r0, #1
    15e0:	cmp	r0, #0
    15e4:	bne	1764 <eval_boolean+0x8e4>
    15e8:	ldr	r2, [r7, #16]
    15ec:	ldr	ip, [r2, #4]
    15f0:	cmp	ip, #1
    15f4:	beq	16e8 <eval_boolean+0x868>
    15f8:	ldr	ip, [r7, #16]
    15fc:	ldr	ip, [ip, #4]
    1600:	cmp	ip, #3
    1604:	bne	16c8 <eval_boolean+0x848>
    1608:	ldr	r1, [r7, #16]
    160c:	add	r2, sp, #164	; 0xa4
    1610:	add	r3, sp, #172	; 0xac
    1614:	add	r0, sp, #180	; 0xb4
    1618:	str	r0, [sp]
    161c:	mov	r0, r6
    1620:	bl	5444 <eval_string>
    1624:	cmp	r0, #0
    1628:	beq	1634 <eval_boolean+0x7b4>
    162c:	mvn	r0, #0
    1630:	b	2658 <eval_boolean+0x17d8>
    1634:	ldr	r1, [r7, #20]
    1638:	add	r2, sp, #168	; 0xa8
    163c:	add	r3, sp, #176	; 0xb0
    1640:	add	ip, sp, #184	; 0xb8
    1644:	str	ip, [sp]
    1648:	mov	r0, r6
    164c:	bl	5444 <eval_string>
    1650:	cmp	r0, #0
    1654:	beq	1668 <eval_boolean+0x7e8>
    1658:	ldr	r0, [sp, #180]	; 0xb4
    165c:	bl	0 <free>
    1660:	mvn	r0, #0
    1664:	b	2658 <eval_boolean+0x17d8>
    1668:	ldr	r0, [sp, #164]	; 0xa4
    166c:	ldr	r1, [sp, #172]	; 0xac
    1670:	ldr	r2, [sp, #180]	; 0xb4
    1674:	ldr	r3, [sp, #168]	; 0xa8
    1678:	ldr	r6, [sp, #176]	; 0xb0
    167c:	ldr	r4, [sp, #184]	; 0xb8
    1680:	str	r4, [sp, #4]
    1684:	str	r6, [sp]
    1688:	bl	d8 <compare_strings>
    168c:	cmp	r0, #0
    1690:	movgt	r3, #1
    1694:	movle	r3, #0
    1698:	str	r3, [r5]
    169c:	ldr	r0, [sp, #172]	; 0xac
    16a0:	cmp	r0, #0
    16a4:	ble	16b0 <eval_boolean+0x830>
    16a8:	ldr	r0, [sp, #180]	; 0xb4
    16ac:	bl	0 <free>
    16b0:	ldr	r0, [sp, #176]	; 0xb0
    16b4:	cmp	r0, #0
    16b8:	ble	2654 <eval_boolean+0x17d4>
    16bc:	ldr	r0, [sp, #184]	; 0xb8
    16c0:	bl	0 <free>
    16c4:	b	2654 <eval_boolean+0x17d4>
    16c8:	ldr	r0, [pc, #1892]	; 1e34 <eval_boolean+0xfb4>
    16cc:	ldr	r1, [pc, #1892]	; 1e38 <eval_boolean+0xfb8>
    16d0:	mov	r2, #792	; 0x318
    16d4:	ldr	r3, [pc, #1872]	; 1e2c <eval_boolean+0xfac>
    16d8:	bl	0 <__assert_fail>
    16dc:	mov	r0, #1
    16e0:	bl	0 <exit>
    16e4:	b	2654 <eval_boolean+0x17d4>
    16e8:	ldr	r1, [r7, #16]
    16ec:	add	r2, sp, #344	; 0x158
    16f0:	mov	r0, r6
    16f4:	bl	367c <eval_integer>
    16f8:	cmp	r0, #0
    16fc:	beq	1708 <eval_boolean+0x888>
    1700:	mvn	r0, #0
    1704:	b	2658 <eval_boolean+0x17d8>
    1708:	ldr	r1, [r7, #20]
    170c:	add	r2, sp, #352	; 0x160
    1710:	mov	r0, r6
    1714:	bl	367c <eval_integer>
    1718:	cmp	r0, #0
    171c:	beq	1728 <eval_boolean+0x8a8>
    1720:	mvn	r0, #0
    1724:	b	2658 <eval_boolean+0x17d8>
    1728:	ldr	r3, [sp, #344]	; 0x158
    172c:	ldr	ip, [sp, #348]	; 0x15c
    1730:	ldr	r0, [sp, #352]	; 0x160
    1734:	ldr	r2, [sp, #356]	; 0x164
    1738:	cmp	ip, r2
    173c:	bne	1750 <eval_boolean+0x8d0>
    1740:	cmp	r3, r0
    1744:	movhi	r2, #1
    1748:	movls	r2, #0
    174c:	b	175c <eval_boolean+0x8dc>
    1750:	cmp	ip, r2
    1754:	movgt	r2, #1
    1758:	movle	r2, #0
    175c:	str	r2, [r5]
    1760:	b	2654 <eval_boolean+0x17d4>
    1764:	ldr	r1, [r7, #16]
    1768:	add	r2, sp, #328	; 0x148
    176c:	mov	r0, r6
    1770:	bl	26a8 <eval_float>
    1774:	cmp	r0, #0
    1778:	beq	1784 <eval_boolean+0x904>
    177c:	mvn	r0, #0
    1780:	b	2658 <eval_boolean+0x17d8>
    1784:	ldr	r1, [r7, #20]
    1788:	add	r2, sp, #336	; 0x150
    178c:	mov	r0, r6
    1790:	bl	26a8 <eval_float>
    1794:	cmp	r0, #0
    1798:	beq	17a4 <eval_boolean+0x924>
    179c:	mvn	r0, #0
    17a0:	b	2658 <eval_boolean+0x17d8>
    17a4:	vldr	d2, [sp, #328]	; 0x148
    17a8:	vldr	d3, [sp, #336]	; 0x150
    17ac:	vcmp.f64	d2, d3
    17b0:	vmrs	APSR_nzcv, fpscr
    17b4:	movgt	ip, #1
    17b8:	movle	ip, #0
    17bc:	str	ip, [r5]
    17c0:	b	2654 <eval_boolean+0x17d4>
    17c4:	ldr	r1, [r7, #16]
    17c8:	ldr	r0, [r1, #4]
    17cc:	cmp	r0, #2
    17d0:	beq	17ec <eval_boolean+0x96c>
    17d4:	ldr	r1, [r7, #20]
    17d8:	ldr	r1, [r1, #4]
    17dc:	cmp	r1, #2
    17e0:	moveq	r3, #1
    17e4:	movne	r3, #0
    17e8:	b	17f0 <eval_boolean+0x970>
    17ec:	mov	r3, #1
    17f0:	cmp	r3, #0
    17f4:	bne	1974 <eval_boolean+0xaf4>
    17f8:	ldr	r3, [r7, #16]
    17fc:	ldr	r3, [r3, #4]
    1800:	cmp	r3, #1
    1804:	beq	18f8 <eval_boolean+0xa78>
    1808:	ldr	r2, [r7, #16]
    180c:	ldr	r3, [r2, #4]
    1810:	cmp	r3, #3
    1814:	bne	18d8 <eval_boolean+0xa58>
    1818:	ldr	r1, [r7, #16]
    181c:	add	r2, sp, #188	; 0xbc
    1820:	add	r3, sp, #196	; 0xc4
    1824:	add	r0, sp, #204	; 0xcc
    1828:	str	r0, [sp]
    182c:	mov	r0, r6
    1830:	bl	5444 <eval_string>
    1834:	cmp	r0, #0
    1838:	beq	1844 <eval_boolean+0x9c4>
    183c:	mvn	r0, #0
    1840:	b	2658 <eval_boolean+0x17d8>
    1844:	ldr	r1, [r7, #20]
    1848:	add	r2, sp, #192	; 0xc0
    184c:	add	r3, sp, #200	; 0xc8
    1850:	add	r0, sp, #208	; 0xd0
    1854:	str	r0, [sp]
    1858:	mov	r0, r6
    185c:	bl	5444 <eval_string>
    1860:	cmp	r0, #0
    1864:	beq	1878 <eval_boolean+0x9f8>
    1868:	ldr	r0, [sp, #204]	; 0xcc
    186c:	bl	0 <free>
    1870:	mvn	r0, #0
    1874:	b	2658 <eval_boolean+0x17d8>
    1878:	ldr	r0, [sp, #188]	; 0xbc
    187c:	ldr	r1, [sp, #196]	; 0xc4
    1880:	ldr	r2, [sp, #204]	; 0xcc
    1884:	ldr	r3, [sp, #192]	; 0xc0
    1888:	ldr	ip, [sp, #200]	; 0xc8
    188c:	ldr	r4, [sp, #208]	; 0xd0
    1890:	str	r4, [sp, #4]
    1894:	str	ip, [sp]
    1898:	bl	d8 <compare_strings>
    189c:	cmp	r0, #0
    18a0:	movge	r0, #1
    18a4:	movlt	r0, #0
    18a8:	str	r0, [r5]
    18ac:	ldr	r0, [sp, #196]	; 0xc4
    18b0:	cmp	r0, #0
    18b4:	ble	18c0 <eval_boolean+0xa40>
    18b8:	ldr	r0, [sp, #204]	; 0xcc
    18bc:	bl	0 <free>
    18c0:	ldr	r0, [sp, #200]	; 0xc8
    18c4:	cmp	r0, #0
    18c8:	ble	2654 <eval_boolean+0x17d4>
    18cc:	ldr	r0, [sp, #208]	; 0xd0
    18d0:	bl	0 <free>
    18d4:	b	2654 <eval_boolean+0x17d4>
    18d8:	ldr	r0, [pc, #1364]	; 1e34 <eval_boolean+0xfb4>
    18dc:	ldr	r1, [pc, #1364]	; 1e38 <eval_boolean+0xfb8>
    18e0:	movw	r2, #854	; 0x356
    18e4:	ldr	r3, [pc, #1344]	; 1e2c <eval_boolean+0xfac>
    18e8:	bl	0 <__assert_fail>
    18ec:	mov	r0, #1
    18f0:	bl	0 <exit>
    18f4:	b	2654 <eval_boolean+0x17d4>
    18f8:	ldr	r1, [r7, #16]
    18fc:	add	r2, sp, #376	; 0x178
    1900:	mov	r0, r6
    1904:	bl	367c <eval_integer>
    1908:	cmp	r0, #0
    190c:	beq	1918 <eval_boolean+0xa98>
    1910:	mvn	r0, #0
    1914:	b	2658 <eval_boolean+0x17d8>
    1918:	ldr	r1, [r7, #20]
    191c:	add	r2, sp, #384	; 0x180
    1920:	mov	r0, r6
    1924:	bl	367c <eval_integer>
    1928:	cmp	r0, #0
    192c:	beq	1938 <eval_boolean+0xab8>
    1930:	mvn	r0, #0
    1934:	b	2658 <eval_boolean+0x17d8>
    1938:	ldr	r3, [sp, #376]	; 0x178
    193c:	ldr	r1, [sp, #380]	; 0x17c
    1940:	ldr	r0, [sp, #384]	; 0x180
    1944:	ldr	ip, [sp, #388]	; 0x184
    1948:	cmp	r1, ip
    194c:	bne	1960 <eval_boolean+0xae0>
    1950:	cmp	r3, r0
    1954:	movcs	r1, #1
    1958:	movcc	r1, #0
    195c:	b	196c <eval_boolean+0xaec>
    1960:	cmp	r1, ip
    1964:	movgt	r1, #1
    1968:	movle	r1, #0
    196c:	str	r1, [r5]
    1970:	b	2654 <eval_boolean+0x17d4>
    1974:	ldr	r1, [r7, #16]
    1978:	add	r2, sp, #360	; 0x168
    197c:	mov	r0, r6
    1980:	bl	26a8 <eval_float>
    1984:	cmp	r0, #0
    1988:	beq	1994 <eval_boolean+0xb14>
    198c:	mvn	r0, #0
    1990:	b	2658 <eval_boolean+0x17d8>
    1994:	ldr	r1, [r7, #20]
    1998:	add	r2, sp, #368	; 0x170
    199c:	mov	r0, r6
    19a0:	bl	26a8 <eval_float>
    19a4:	cmp	r0, #0
    19a8:	beq	19b4 <eval_boolean+0xb34>
    19ac:	mvn	r0, #0
    19b0:	b	2658 <eval_boolean+0x17d8>
    19b4:	vldr	d1, [sp, #360]	; 0x168
    19b8:	vldr	d7, [sp, #368]	; 0x170
    19bc:	vcmp.f64	d1, d7
    19c0:	vmrs	APSR_nzcv, fpscr
    19c4:	movge	r3, #1
    19c8:	movlt	r3, #0
    19cc:	str	r3, [r5]
    19d0:	b	2654 <eval_boolean+0x17d4>
    19d4:	cmp	r1, #42	; 0x2a
    19d8:	beq	1a4c <eval_boolean+0xbcc>
    19dc:	cmp	r1, #46	; 0x2e
    19e0:	beq	1a1c <eval_boolean+0xb9c>
    19e4:	cmp	r1, #47	; 0x2f
    19e8:	bne	2310 <eval_boolean+0x1490>
    19ec:	ldr	r1, [r7, #16]
    19f0:	add	r2, sp, #480	; 0x1e0
    19f4:	mov	r0, r6
    19f8:	bl	26a8 <eval_float>
    19fc:	cmp	r0, #0
    1a00:	beq	1a0c <eval_boolean+0xb8c>
    1a04:	mvn	r0, #0
    1a08:	b	2658 <eval_boolean+0x17d8>
    1a0c:	vldr	d0, [sp, #480]	; 0x1e0
    1a10:	bl	0 <coda_isMinInf>
    1a14:	str	r0, [r5]
    1a18:	b	2654 <eval_boolean+0x17d4>
    1a1c:	ldr	r1, [r7, #16]
    1a20:	add	r2, sp, #464	; 0x1d0
    1a24:	mov	r0, r6
    1a28:	bl	26a8 <eval_float>
    1a2c:	cmp	r0, #0
    1a30:	beq	1a3c <eval_boolean+0xbbc>
    1a34:	mvn	r0, #0
    1a38:	b	2658 <eval_boolean+0x17d8>
    1a3c:	vldr	d0, [sp, #464]	; 0x1d0
    1a40:	bl	0 <coda_isInf>
    1a44:	str	r0, [r5]
    1a48:	b	2654 <eval_boolean+0x17d4>
    1a4c:	ldr	r1, [r7, #16]
    1a50:	add	r2, sp, #48	; 0x30
    1a54:	mov	r0, r6
    1a58:	bl	e80 <eval_boolean>
    1a5c:	cmp	r0, #0
    1a60:	beq	1a6c <eval_boolean+0xbec>
    1a64:	mvn	r0, #0
    1a68:	b	2658 <eval_boolean+0x17d8>
    1a6c:	ldr	r1, [sp, #48]	; 0x30
    1a70:	cmp	r1, #0
    1a74:	bne	1a98 <eval_boolean+0xc18>
    1a78:	ldr	r1, [r7, #24]
    1a7c:	mov	r2, r5
    1a80:	mov	r0, r6
    1a84:	bl	e80 <eval_boolean>
    1a88:	cmp	r0, #0
    1a8c:	beq	2654 <eval_boolean+0x17d4>
    1a90:	mvn	r0, #0
    1a94:	b	2658 <eval_boolean+0x17d8>
    1a98:	ldr	r1, [r7, #20]
    1a9c:	mov	r2, r5
    1aa0:	mov	r0, r6
    1aa4:	bl	e80 <eval_boolean>
    1aa8:	cmp	r0, #0
    1aac:	beq	2654 <eval_boolean+0x17d4>
    1ab0:	mvn	r0, #0
    1ab4:	b	2658 <eval_boolean+0x17d8>
    1ab8:	cmp	r1, #54	; 0x36
    1abc:	bcs	1fd0 <eval_boolean+0x1150>
    1ac0:	cmp	r1, #51	; 0x33
    1ac4:	bcs	1b38 <eval_boolean+0xcb8>
    1ac8:	cmp	r1, #48	; 0x30
    1acc:	beq	1b08 <eval_boolean+0xc88>
    1ad0:	cmp	r1, #49	; 0x31
    1ad4:	bne	2310 <eval_boolean+0x1490>
    1ad8:	ldr	r1, [r7, #16]
    1adc:	add	r2, sp, #472	; 0x1d8
    1ae0:	mov	r0, r6
    1ae4:	bl	26a8 <eval_float>
    1ae8:	cmp	r0, #0
    1aec:	beq	1af8 <eval_boolean+0xc78>
    1af0:	mvn	r0, #0
    1af4:	b	2658 <eval_boolean+0x17d8>
    1af8:	vldr	d0, [sp, #472]	; 0x1d8
    1afc:	bl	0 <coda_isPlusInf>
    1b00:	str	r0, [r5]
    1b04:	b	2654 <eval_boolean+0x17d4>
    1b08:	ldr	r1, [r7, #16]
    1b0c:	add	r2, sp, #456	; 0x1c8
    1b10:	mov	r0, r6
    1b14:	bl	26a8 <eval_float>
    1b18:	cmp	r0, #0
    1b1c:	beq	1b28 <eval_boolean+0xca8>
    1b20:	mvn	r0, #0
    1b24:	b	2658 <eval_boolean+0x17d8>
    1b28:	vldr	d0, [sp, #456]	; 0x1c8
    1b2c:	bl	0 <coda_isNaN>
    1b30:	str	r0, [r5]
    1b34:	b	2654 <eval_boolean+0x17d4>
    1b38:	cmp	r1, #51	; 0x33
    1b3c:	beq	1dac <eval_boolean+0xf2c>
    1b40:	cmp	r1, #52	; 0x34
    1b44:	bne	1d58 <eval_boolean+0xed8>
    1b48:	ldr	ip, [r7, #16]
    1b4c:	ldr	r2, [ip, #4]
    1b50:	cmp	r2, #2
    1b54:	beq	1b70 <eval_boolean+0xcf0>
    1b58:	ldr	r1, [r7, #20]
    1b5c:	ldr	r0, [r1, #4]
    1b60:	cmp	r0, #2
    1b64:	moveq	r2, #1
    1b68:	movne	r2, #0
    1b6c:	b	1b74 <eval_boolean+0xcf4>
    1b70:	mov	r2, #1
    1b74:	cmp	r2, #0
    1b78:	bne	1cf8 <eval_boolean+0xe78>
    1b7c:	ldr	ip, [r7, #16]
    1b80:	ldr	r2, [ip, #4]
    1b84:	cmp	r2, #1
    1b88:	beq	1c7c <eval_boolean+0xdfc>
    1b8c:	ldr	r0, [r7, #16]
    1b90:	ldr	r3, [r0, #4]
    1b94:	cmp	r3, #3
    1b98:	bne	1c5c <eval_boolean+0xddc>
    1b9c:	ldr	r1, [r7, #16]
    1ba0:	add	r2, sp, #212	; 0xd4
    1ba4:	add	r3, sp, #220	; 0xdc
    1ba8:	add	r0, sp, #228	; 0xe4
    1bac:	str	r0, [sp]
    1bb0:	mov	r0, r6
    1bb4:	bl	5444 <eval_string>
    1bb8:	cmp	r0, #0
    1bbc:	beq	1bc8 <eval_boolean+0xd48>
    1bc0:	mvn	r0, #0
    1bc4:	b	2658 <eval_boolean+0x17d8>
    1bc8:	ldr	r1, [r7, #20]
    1bcc:	add	r2, sp, #216	; 0xd8
    1bd0:	add	r3, sp, #224	; 0xe0
    1bd4:	add	ip, sp, #232	; 0xe8
    1bd8:	str	ip, [sp]
    1bdc:	mov	r0, r6
    1be0:	bl	5444 <eval_string>
    1be4:	cmp	r0, #0
    1be8:	beq	1bfc <eval_boolean+0xd7c>
    1bec:	ldr	r0, [sp, #228]	; 0xe4
    1bf0:	bl	0 <free>
    1bf4:	mvn	r0, #0
    1bf8:	b	2658 <eval_boolean+0x17d8>
    1bfc:	ldr	r0, [sp, #212]	; 0xd4
    1c00:	ldr	r1, [sp, #220]	; 0xdc
    1c04:	ldr	r2, [sp, #228]	; 0xe4
    1c08:	ldr	r3, [sp, #216]	; 0xd8
    1c0c:	ldr	r6, [sp, #224]	; 0xe0
    1c10:	ldr	r4, [sp, #232]	; 0xe8
    1c14:	str	r4, [sp, #4]
    1c18:	str	r6, [sp]
    1c1c:	bl	d8 <compare_strings>
    1c20:	cmp	r0, #0
    1c24:	movlt	r1, #1
    1c28:	movge	r1, #0
    1c2c:	str	r1, [r5]
    1c30:	ldr	r0, [sp, #220]	; 0xdc
    1c34:	cmp	r0, #0
    1c38:	ble	1c44 <eval_boolean+0xdc4>
    1c3c:	ldr	r0, [sp, #228]	; 0xe4
    1c40:	bl	0 <free>
    1c44:	ldr	r0, [sp, #224]	; 0xe0
    1c48:	cmp	r0, #0
    1c4c:	ble	2654 <eval_boolean+0x17d4>
    1c50:	ldr	r0, [sp, #232]	; 0xe8
    1c54:	bl	0 <free>
    1c58:	b	2654 <eval_boolean+0x17d4>
    1c5c:	ldr	r0, [pc, #464]	; 1e34 <eval_boolean+0xfb4>
    1c60:	ldr	r1, [pc, #464]	; 1e38 <eval_boolean+0xfb8>
    1c64:	mov	r2, #916	; 0x394
    1c68:	ldr	r3, [pc, #444]	; 1e2c <eval_boolean+0xfac>
    1c6c:	bl	0 <__assert_fail>
    1c70:	mov	r0, #1
    1c74:	bl	0 <exit>
    1c78:	b	2654 <eval_boolean+0x17d4>
    1c7c:	ldr	r1, [r7, #16]
    1c80:	add	r2, sp, #408	; 0x198
    1c84:	mov	r0, r6
    1c88:	bl	367c <eval_integer>
    1c8c:	cmp	r0, #0
    1c90:	beq	1c9c <eval_boolean+0xe1c>
    1c94:	mvn	r0, #0
    1c98:	b	2658 <eval_boolean+0x17d8>
    1c9c:	ldr	r1, [r7, #20]
    1ca0:	add	r2, sp, #416	; 0x1a0
    1ca4:	mov	r0, r6
    1ca8:	bl	367c <eval_integer>
    1cac:	cmp	r0, #0
    1cb0:	beq	1cbc <eval_boolean+0xe3c>
    1cb4:	mvn	r0, #0
    1cb8:	b	2658 <eval_boolean+0x17d8>
    1cbc:	ldr	r1, [sp, #408]	; 0x198
    1cc0:	ldr	ip, [sp, #412]	; 0x19c
    1cc4:	ldr	r3, [sp, #416]	; 0x1a0
    1cc8:	ldr	r2, [sp, #420]	; 0x1a4
    1ccc:	cmp	ip, r2
    1cd0:	bne	1ce4 <eval_boolean+0xe64>
    1cd4:	cmp	r1, r3
    1cd8:	movcc	ip, #1
    1cdc:	movcs	ip, #0
    1ce0:	b	1cf0 <eval_boolean+0xe70>
    1ce4:	cmp	ip, r2
    1ce8:	movlt	ip, #1
    1cec:	movge	ip, #0
    1cf0:	str	ip, [r5]
    1cf4:	b	2654 <eval_boolean+0x17d4>
    1cf8:	ldr	r1, [r7, #16]
    1cfc:	add	r2, sp, #392	; 0x188
    1d00:	mov	r0, r6
    1d04:	bl	26a8 <eval_float>
    1d08:	cmp	r0, #0
    1d0c:	beq	1d18 <eval_boolean+0xe98>
    1d10:	mvn	r0, #0
    1d14:	b	2658 <eval_boolean+0x17d8>
    1d18:	ldr	r1, [r7, #20]
    1d1c:	add	r2, sp, #400	; 0x190
    1d20:	mov	r0, r6
    1d24:	bl	26a8 <eval_float>
    1d28:	cmp	r0, #0
    1d2c:	beq	1d38 <eval_boolean+0xeb8>
    1d30:	mvn	r0, #0
    1d34:	b	2658 <eval_boolean+0x17d8>
    1d38:	vldr	d0, [sp, #392]	; 0x188
    1d3c:	vldr	d7, [sp, #400]	; 0x190
    1d40:	vcmp.f64	d0, d7
    1d44:	vmrs	APSR_nzcv, fpscr
    1d48:	movmi	r0, #1
    1d4c:	movpl	r0, #0
    1d50:	str	r0, [r5]
    1d54:	b	2654 <eval_boolean+0x17d4>
    1d58:	ldr	r1, [r7, #16]
    1d5c:	mov	r2, r5
    1d60:	mov	r0, r6
    1d64:	bl	e80 <eval_boolean>
    1d68:	cmp	r0, #0
    1d6c:	beq	1d78 <eval_boolean+0xef8>
    1d70:	mvn	r0, #0
    1d74:	b	2658 <eval_boolean+0x17d8>
    1d78:	ldr	r0, [r5]
    1d7c:	cmp	r0, #0
    1d80:	bne	1d8c <eval_boolean+0xf0c>
    1d84:	mov	r0, #0
    1d88:	b	2658 <eval_boolean+0x17d8>
    1d8c:	ldr	r1, [r7, #20]
    1d90:	mov	r2, r5
    1d94:	mov	r0, r6
    1d98:	bl	e80 <eval_boolean>
    1d9c:	cmp	r0, #0
    1da0:	beq	2654 <eval_boolean+0x17d4>
    1da4:	mvn	r0, #0
    1da8:	b	2658 <eval_boolean+0x17d8>
    1dac:	ldr	r2, [r7, #16]
    1db0:	ldr	ip, [r2, #4]
    1db4:	cmp	ip, #2
    1db8:	beq	1dd4 <eval_boolean+0xf54>
    1dbc:	ldr	r3, [r7, #20]
    1dc0:	ldr	r3, [r3, #4]
    1dc4:	cmp	r3, #2
    1dc8:	moveq	r3, #1
    1dcc:	movne	r3, #0
    1dd0:	b	1dd8 <eval_boolean+0xf58>
    1dd4:	mov	r3, #1
    1dd8:	cmp	r3, #0
    1ddc:	bne	1f70 <eval_boolean+0x10f0>
    1de0:	ldr	ip, [r7, #16]
    1de4:	ldr	ip, [ip, #4]
    1de8:	cmp	ip, #1
    1dec:	beq	1ef4 <eval_boolean+0x1074>
    1df0:	ldr	r2, [r7, #16]
    1df4:	ldr	r1, [r2, #4]
    1df8:	cmp	r1, #3
    1dfc:	bne	1ed4 <eval_boolean+0x1054>
    1e00:	ldr	r1, [r7, #16]
    1e04:	add	r2, sp, #236	; 0xec
    1e08:	add	r3, sp, #244	; 0xf4
    1e0c:	add	r0, sp, #252	; 0xfc
    1e10:	str	r0, [sp]
    1e14:	mov	r0, r6
    1e18:	bl	5444 <eval_string>
    1e1c:	cmp	r0, #0
    1e20:	beq	1e40 <eval_boolean+0xfc0>
    1e24:	mvn	r0, #0
    1e28:	b	2658 <eval_boolean+0x17d8>
    1e2c:	.word	0x00000d6c
    1e30:	.word	0x0000046b
    1e34:	.word	0x00000bf8
    1e38:	.word	0x0000053b
    1e3c:	.word	0x00000000
    1e40:	ldr	r1, [r7, #20]
    1e44:	add	r2, sp, #240	; 0xf0
    1e48:	add	r3, sp, #248	; 0xf8
    1e4c:	add	r0, sp, #256	; 0x100
    1e50:	str	r0, [sp]
    1e54:	mov	r0, r6
    1e58:	bl	5444 <eval_string>
    1e5c:	cmp	r0, #0
    1e60:	beq	1e74 <eval_boolean+0xff4>
    1e64:	ldr	r0, [sp, #252]	; 0xfc
    1e68:	bl	0 <free>
    1e6c:	mvn	r0, #0
    1e70:	b	2658 <eval_boolean+0x17d8>
    1e74:	ldr	r0, [sp, #236]	; 0xec
    1e78:	ldr	r1, [sp, #244]	; 0xf4
    1e7c:	ldr	r2, [sp, #252]	; 0xfc
    1e80:	ldr	r3, [sp, #240]	; 0xf0
    1e84:	ldr	ip, [sp, #248]	; 0xf8
    1e88:	ldr	r6, [sp, #256]	; 0x100
    1e8c:	str	r6, [sp, #4]
    1e90:	str	ip, [sp]
    1e94:	bl	d8 <compare_strings>
    1e98:	cmp	r0, #0
    1e9c:	movle	r2, #1
    1ea0:	movgt	r2, #0
    1ea4:	str	r2, [r5]
    1ea8:	ldr	r0, [sp, #244]	; 0xf4
    1eac:	cmp	r0, #0
    1eb0:	ble	1ebc <eval_boolean+0x103c>
    1eb4:	ldr	r0, [sp, #252]	; 0xfc
    1eb8:	bl	0 <free>
    1ebc:	ldr	r0, [sp, #248]	; 0xf8
    1ec0:	cmp	r0, #0
    1ec4:	ble	2654 <eval_boolean+0x17d4>
    1ec8:	ldr	r0, [sp, #256]	; 0x100
    1ecc:	bl	0 <free>
    1ed0:	b	2654 <eval_boolean+0x17d4>
    1ed4:	ldr	r0, [pc, #1984]	; 269c <eval_boolean+0x181c>
    1ed8:	ldr	r1, [pc, #1984]	; 26a0 <eval_boolean+0x1820>
    1edc:	movw	r2, #978	; 0x3d2
    1ee0:	ldr	r3, [pc, #1940]	; 267c <eval_boolean+0x17fc>
    1ee4:	bl	0 <__assert_fail>
    1ee8:	mov	r0, #1
    1eec:	bl	0 <exit>
    1ef0:	b	2654 <eval_boolean+0x17d4>
    1ef4:	ldr	r1, [r7, #16]
    1ef8:	add	r2, sp, #440	; 0x1b8
    1efc:	mov	r0, r6
    1f00:	bl	367c <eval_integer>
    1f04:	cmp	r0, #0
    1f08:	beq	1f14 <eval_boolean+0x1094>
    1f0c:	mvn	r0, #0
    1f10:	b	2658 <eval_boolean+0x17d8>
    1f14:	ldr	r1, [r7, #20]
    1f18:	add	r2, sp, #448	; 0x1c0
    1f1c:	mov	r0, r6
    1f20:	bl	367c <eval_integer>
    1f24:	cmp	r0, #0
    1f28:	beq	1f34 <eval_boolean+0x10b4>
    1f2c:	mvn	r0, #0
    1f30:	b	2658 <eval_boolean+0x17d8>
    1f34:	ldr	r1, [sp, #440]	; 0x1b8
    1f38:	ldr	ip, [sp, #444]	; 0x1bc
    1f3c:	ldr	r0, [sp, #448]	; 0x1c0
    1f40:	ldr	r3, [sp, #452]	; 0x1c4
    1f44:	cmp	ip, r3
    1f48:	bne	1f5c <eval_boolean+0x10dc>
    1f4c:	cmp	r1, r0
    1f50:	movls	r1, #1
    1f54:	movhi	r1, #0
    1f58:	b	1f68 <eval_boolean+0x10e8>
    1f5c:	cmp	ip, r3
    1f60:	movlt	r1, #1
    1f64:	movge	r1, #0
    1f68:	str	r1, [r5]
    1f6c:	b	2654 <eval_boolean+0x17d4>
    1f70:	ldr	r1, [r7, #16]
    1f74:	add	r2, sp, #424	; 0x1a8
    1f78:	mov	r0, r6
    1f7c:	bl	26a8 <eval_float>
    1f80:	cmp	r0, #0
    1f84:	beq	1f90 <eval_boolean+0x1110>
    1f88:	mvn	r0, #0
    1f8c:	b	2658 <eval_boolean+0x17d8>
    1f90:	ldr	r1, [r7, #20]
    1f94:	add	r2, sp, #432	; 0x1b0
    1f98:	mov	r0, r6
    1f9c:	bl	26a8 <eval_float>
    1fa0:	cmp	r0, #0
    1fa4:	beq	1fb0 <eval_boolean+0x1130>
    1fa8:	mvn	r0, #0
    1fac:	b	2658 <eval_boolean+0x17d8>
    1fb0:	vldr	d6, [sp, #424]	; 0x1a8
    1fb4:	vldr	d5, [sp, #432]	; 0x1b0
    1fb8:	vcmp.f64	d6, d5
    1fbc:	vmrs	APSR_nzcv, fpscr
    1fc0:	movls	r3, #1
    1fc4:	movhi	r3, #0
    1fc8:	str	r3, [r5]
    1fcc:	b	2654 <eval_boolean+0x17d4>
    1fd0:	cmp	r1, #71	; 0x47
    1fd4:	bcs	2280 <eval_boolean+0x1400>
    1fd8:	cmp	r1, #54	; 0x36
    1fdc:	beq	222c <eval_boolean+0x13ac>
    1fe0:	cmp	r1, #61	; 0x3d
    1fe4:	beq	2028 <eval_boolean+0x11a8>
    1fe8:	cmp	r1, #62	; 0x3e
    1fec:	bne	2310 <eval_boolean+0x1490>
    1ff0:	ldr	r1, [r7, #16]
    1ff4:	mov	r2, r5
    1ff8:	mov	r0, r6
    1ffc:	bl	e80 <eval_boolean>
    2000:	cmp	r0, #0
    2004:	beq	2010 <eval_boolean+0x1190>
    2008:	mvn	r0, #0
    200c:	b	2658 <eval_boolean+0x17d8>
    2010:	ldr	r3, [r5]
    2014:	cmp	r3, #0
    2018:	moveq	r3, #1
    201c:	movne	r3, #0
    2020:	str	r3, [r5]
    2024:	b	2654 <eval_boolean+0x17d4>
    2028:	ldr	r1, [r7, #16]
    202c:	ldr	ip, [r1, #4]
    2030:	cmp	ip, #2
    2034:	beq	2050 <eval_boolean+0x11d0>
    2038:	ldr	r0, [r7, #20]
    203c:	ldr	r3, [r0, #4]
    2040:	cmp	r3, #2
    2044:	moveq	r1, #1
    2048:	movne	r1, #0
    204c:	b	2054 <eval_boolean+0x11d4>
    2050:	mov	r1, #1
    2054:	cmp	r1, #0
    2058:	bne	21cc <eval_boolean+0x134c>
    205c:	ldr	r1, [r7, #16]
    2060:	ldr	r3, [r1, #4]
    2064:	cmp	r3, #1
    2068:	beq	215c <eval_boolean+0x12dc>
    206c:	ldr	ip, [r7, #16]
    2070:	ldr	ip, [ip, #4]
    2074:	cmp	ip, #3
    2078:	bne	213c <eval_boolean+0x12bc>
    207c:	ldr	r1, [r7, #16]
    2080:	add	r2, sp, #140	; 0x8c
    2084:	add	r3, sp, #148	; 0x94
    2088:	add	ip, sp, #156	; 0x9c
    208c:	str	ip, [sp]
    2090:	mov	r0, r6
    2094:	bl	5444 <eval_string>
    2098:	cmp	r0, #0
    209c:	beq	20a8 <eval_boolean+0x1228>
    20a0:	mvn	r0, #0
    20a4:	b	2658 <eval_boolean+0x17d8>
    20a8:	ldr	r1, [r7, #20]
    20ac:	add	r2, sp, #144	; 0x90
    20b0:	add	r3, sp, #152	; 0x98
    20b4:	add	ip, sp, #160	; 0xa0
    20b8:	str	ip, [sp]
    20bc:	mov	r0, r6
    20c0:	bl	5444 <eval_string>
    20c4:	cmp	r0, #0
    20c8:	beq	20dc <eval_boolean+0x125c>
    20cc:	ldr	r0, [sp, #156]	; 0x9c
    20d0:	bl	0 <free>
    20d4:	mvn	r0, #0
    20d8:	b	2658 <eval_boolean+0x17d8>
    20dc:	ldr	r0, [sp, #140]	; 0x8c
    20e0:	ldr	r1, [sp, #148]	; 0x94
    20e4:	ldr	r2, [sp, #156]	; 0x9c
    20e8:	ldr	r3, [sp, #144]	; 0x90
    20ec:	ldr	r4, [sp, #152]	; 0x98
    20f0:	ldr	r6, [sp, #160]	; 0xa0
    20f4:	str	r6, [sp, #4]
    20f8:	str	r4, [sp]
    20fc:	bl	d8 <compare_strings>
    2100:	cmp	r0, #0
    2104:	movne	r2, #1
    2108:	moveq	r2, #0
    210c:	str	r2, [r5]
    2110:	ldr	r0, [sp, #148]	; 0x94
    2114:	cmp	r0, #0
    2118:	ble	2124 <eval_boolean+0x12a4>
    211c:	ldr	r0, [sp, #156]	; 0x9c
    2120:	bl	0 <free>
    2124:	ldr	r0, [sp, #152]	; 0x98
    2128:	cmp	r0, #0
    212c:	ble	2654 <eval_boolean+0x17d4>
    2130:	ldr	r0, [sp, #160]	; 0xa0
    2134:	bl	0 <free>
    2138:	b	2654 <eval_boolean+0x17d4>
    213c:	ldr	r0, [pc, #1368]	; 269c <eval_boolean+0x181c>
    2140:	ldr	r1, [pc, #1368]	; 26a0 <eval_boolean+0x1820>
    2144:	movw	r2, #730	; 0x2da
    2148:	ldr	r3, [pc, #1324]	; 267c <eval_boolean+0x17fc>
    214c:	bl	0 <__assert_fail>
    2150:	mov	r0, #1
    2154:	bl	0 <exit>
    2158:	b	2654 <eval_boolean+0x17d4>
    215c:	ldr	r1, [r7, #16]
    2160:	add	r2, sp, #312	; 0x138
    2164:	mov	r0, r6
    2168:	bl	367c <eval_integer>
    216c:	cmp	r0, #0
    2170:	beq	217c <eval_boolean+0x12fc>
    2174:	mvn	r0, #0
    2178:	b	2658 <eval_boolean+0x17d8>
    217c:	ldr	r1, [r7, #20]
    2180:	add	r2, sp, #320	; 0x140
    2184:	mov	r0, r6
    2188:	bl	367c <eval_integer>
    218c:	cmp	r0, #0
    2190:	beq	219c <eval_boolean+0x131c>
    2194:	mvn	r0, #0
    2198:	b	2658 <eval_boolean+0x17d8>
    219c:	ldr	r1, [sp, #312]	; 0x138
    21a0:	ldr	r2, [sp, #316]	; 0x13c
    21a4:	ldr	r0, [sp, #320]	; 0x140
    21a8:	ldr	r3, [sp, #324]	; 0x144
    21ac:	eor	r2, r2, r3
    21b0:	eor	r3, r1, r0
    21b4:	orr	r1, r2, r3
    21b8:	cmp	r1, #0
    21bc:	movne	r1, #1
    21c0:	moveq	r1, #0
    21c4:	str	r1, [r5]
    21c8:	b	2654 <eval_boolean+0x17d4>
    21cc:	ldr	r1, [r7, #16]
    21d0:	add	r2, sp, #296	; 0x128
    21d4:	mov	r0, r6
    21d8:	bl	26a8 <eval_float>
    21dc:	cmp	r0, #0
    21e0:	beq	21ec <eval_boolean+0x136c>
    21e4:	mvn	r0, #0
    21e8:	b	2658 <eval_boolean+0x17d8>
    21ec:	ldr	r1, [r7, #20]
    21f0:	add	r2, sp, #304	; 0x130
    21f4:	mov	r0, r6
    21f8:	bl	26a8 <eval_float>
    21fc:	cmp	r0, #0
    2200:	beq	220c <eval_boolean+0x138c>
    2204:	mvn	r0, #0
    2208:	b	2658 <eval_boolean+0x17d8>
    220c:	vldr	d5, [sp, #296]	; 0x128
    2210:	vldr	d6, [sp, #304]	; 0x130
    2214:	vcmp.f64	d5, d6
    2218:	vmrs	APSR_nzcv, fpscr
    221c:	movne	r0, #1
    2220:	moveq	r0, #0
    2224:	str	r0, [r5]
    2228:	b	2654 <eval_boolean+0x17d4>
    222c:	ldr	r1, [r7, #16]
    2230:	mov	r2, r5
    2234:	mov	r0, r6
    2238:	bl	e80 <eval_boolean>
    223c:	cmp	r0, #0
    2240:	beq	224c <eval_boolean+0x13cc>
    2244:	mvn	r0, #0
    2248:	b	2658 <eval_boolean+0x17d8>
    224c:	ldr	r2, [r5]
    2250:	cmp	r2, #0
    2254:	beq	2260 <eval_boolean+0x13e0>
    2258:	mov	r0, #0
    225c:	b	2658 <eval_boolean+0x17d8>
    2260:	ldr	r1, [r7, #20]
    2264:	mov	r2, r5
    2268:	mov	r0, r6
    226c:	bl	e80 <eval_boolean>
    2270:	cmp	r0, #0
    2274:	beq	2654 <eval_boolean+0x17d4>
    2278:	mvn	r0, #0
    227c:	b	2658 <eval_boolean+0x17d8>
    2280:	cmp	r1, #71	; 0x47
    2284:	beq	241c <eval_boolean+0x159c>
    2288:	cmp	r1, #82	; 0x52
    228c:	beq	2330 <eval_boolean+0x14b0>
    2290:	cmp	r1, #86	; 0x56
    2294:	bne	2310 <eval_boolean+0x1490>
    2298:	ldr	ip, [r7, #12]
    229c:	ldrb	r2, [ip]
    22a0:	sub	r8, r2, #105	; 0x69
    22a4:	lsl	r0, r8, #3
    22a8:	add	r0, r6, r0
    22ac:	ldr	r9, [r0, #528]	; 0x210
    22b0:	ldr	r4, [r0, #532]	; 0x214
    22b4:	ldr	r1, [r7, #16]
    22b8:	lsl	r2, r8, #3
    22bc:	add	r2, r6, r2
    22c0:	add	r2, r2, #528	; 0x210
    22c4:	mov	r0, r6
    22c8:	bl	367c <eval_integer>
    22cc:	cmp	r0, #0
    22d0:	beq	22dc <eval_boolean+0x145c>
    22d4:	mvn	r0, #0
    22d8:	b	2658 <eval_boolean+0x17d8>
    22dc:	ldr	r1, [r7, #20]
    22e0:	mov	r2, r5
    22e4:	mov	r0, r6
    22e8:	bl	e80 <eval_boolean>
    22ec:	cmp	r0, #0
    22f0:	beq	22fc <eval_boolean+0x147c>
    22f4:	mvn	r0, #0
    22f8:	b	2658 <eval_boolean+0x17d8>
    22fc:	lsl	ip, r8, #3
    2300:	add	r1, r6, ip
    2304:	str	r9, [r1, #528]	; 0x210
    2308:	str	r4, [r1, #532]	; 0x214
    230c:	b	2654 <eval_boolean+0x17d4>
    2310:	ldr	r0, [pc, #900]	; 269c <eval_boolean+0x181c>
    2314:	ldr	r1, [pc, #900]	; 26a0 <eval_boolean+0x1820>
    2318:	movw	r2, #1379	; 0x563
    231c:	ldr	r3, [pc, #856]	; 267c <eval_boolean+0x17fc>
    2320:	bl	0 <__assert_fail>
    2324:	mov	r0, #1
    2328:	bl	0 <exit>
    232c:	b	2654 <eval_boolean+0x17d4>
    2330:	ldr	r0, [r6]
    2334:	cmp	r0, #0
    2338:	bne	2350 <eval_boolean+0x14d0>
    233c:	ldr	r0, [pc, #832]	; 2684 <eval_boolean+0x1804>
    2340:	ldr	r1, [pc, #856]	; 26a0 <eval_boolean+0x1820>
    2344:	movw	r2, #1288	; 0x508
    2348:	ldr	r3, [pc, #812]	; 267c <eval_boolean+0x17fc>
    234c:	bl	0 <__assert_fail>
    2350:	ldr	r3, [r6, #560]	; 0x230
    2354:	cmp	r3, #0
    2358:	beq	2370 <eval_boolean+0x14f0>
    235c:	mvn	r0, #400	; 0x190
    2360:	ldr	r1, [pc, #792]	; 2680 <eval_boolean+0x1800>
    2364:	bl	0 <coda_set_error>
    2368:	mvn	r0, #0
    236c:	b	2658 <eval_boolean+0x17d8>
    2370:	ldr	r2, [r6]
    2374:	ldr	r0, [r2]
    2378:	ldr	r1, [r7, #12]
    237c:	add	r2, sp, #60	; 0x3c
    2380:	bl	0 <coda_product_variable_get_size>
    2384:	cmp	r0, #0
    2388:	beq	2394 <eval_boolean+0x1514>
    238c:	mvn	r0, #0
    2390:	b	2658 <eval_boolean+0x17d8>
    2394:	ldr	r0, [r7, #12]
    2398:	str	r0, [r6, #560]	; 0x230
    239c:	mov	r4, #0
    23a0:	ldr	r2, [sp, #60]	; 0x3c
    23a4:	cmp	r4, r2
    23a8:	bge	2408 <eval_boolean+0x1588>
    23ac:	mov	r1, r4
    23b0:	asr	r0, r1, #31
    23b4:	str	r1, [r6, #552]	; 0x228
    23b8:	str	r0, [r6, #556]	; 0x22c
    23bc:	ldr	r1, [r7, #16]
    23c0:	add	r2, sp, #64	; 0x40
    23c4:	mov	r0, r6
    23c8:	bl	e80 <eval_boolean>
    23cc:	cmp	r0, #0
    23d0:	beq	23dc <eval_boolean+0x155c>
    23d4:	mvn	r0, #0
    23d8:	b	2658 <eval_boolean+0x17d8>
    23dc:	ldr	r2, [sp, #64]	; 0x40
    23e0:	cmp	r2, #0
    23e4:	beq	2400 <eval_boolean+0x1580>
    23e8:	mov	r1, #1
    23ec:	str	r1, [r5]
    23f0:	mov	ip, #0
    23f4:	str	ip, [r6, #560]	; 0x230
    23f8:	mov	r0, #0
    23fc:	b	2658 <eval_boolean+0x17d8>
    2400:	add	r4, r4, #1
    2404:	b	23a0 <eval_boolean+0x1520>
    2408:	mov	r2, #0
    240c:	str	r2, [r5]
    2410:	mov	r3, #0
    2414:	str	r3, [r6, #560]	; 0x230
    2418:	b	2654 <eval_boolean+0x17d4>
    241c:	ldr	r1, [r7, #16]
    2420:	add	r2, sp, #88	; 0x58
    2424:	add	r3, sp, #92	; 0x5c
    2428:	add	r0, sp, #96	; 0x60
    242c:	str	r0, [sp]
    2430:	mov	r0, r6
    2434:	bl	5444 <eval_string>
    2438:	cmp	r0, #0
    243c:	beq	2448 <eval_boolean+0x15c8>
    2440:	mvn	r0, #0
    2444:	b	2658 <eval_boolean+0x17d8>
    2448:	ldr	r1, [r7, #20]
    244c:	add	r2, sp, #76	; 0x4c
    2450:	add	r3, sp, #80	; 0x50
    2454:	add	r0, sp, #84	; 0x54
    2458:	str	r0, [sp]
    245c:	mov	r0, r6
    2460:	bl	5444 <eval_string>
    2464:	cmp	r0, #0
    2468:	beq	2488 <eval_boolean+0x1608>
    246c:	ldr	r0, [sp, #96]	; 0x60
    2470:	cmp	r0, #0
    2474:	beq	2480 <eval_boolean+0x1600>
    2478:	ldr	r0, [sp, #96]	; 0x60
    247c:	bl	0 <free>
    2480:	mvn	r0, #0
    2484:	b	2658 <eval_boolean+0x17d8>
    2488:	ldr	r0, [sp, #92]	; 0x5c
    248c:	cmp	r0, #0
    2490:	ble	24d8 <eval_boolean+0x1658>
    2494:	ldr	r2, [sp, #96]	; 0x60
    2498:	ldr	r3, [sp, #88]	; 0x58
    249c:	ldr	ip, [sp, #92]	; 0x5c
    24a0:	add	r1, r3, ip
    24a4:	mov	r3, #0
    24a8:	strb	r3, [r2, r1]
    24ac:	ldr	ip, [sp, #96]	; 0x60
    24b0:	ldr	r0, [sp, #88]	; 0x58
    24b4:	add	r0, ip, r0
    24b8:	mov	r1, #36	; 0x24
    24bc:	add	r2, sp, #68	; 0x44
    24c0:	add	r3, sp, #72	; 0x48
    24c4:	mov	r4, #0
    24c8:	str	r4, [sp]
    24cc:	bl	0 <coda_pcre_compile>
    24d0:	mov	r4, r0
    24d4:	b	24f8 <eval_boolean+0x1678>
    24d8:	ldr	r0, [pc, #452]	; 26a4 <eval_boolean+0x1824>
    24dc:	mov	r1, #36	; 0x24
    24e0:	add	r2, sp, #68	; 0x44
    24e4:	add	r3, sp, #72	; 0x48
    24e8:	mov	ip, #0
    24ec:	str	ip, [sp]
    24f0:	bl	0 <coda_pcre_compile>
    24f4:	mov	r4, r0
    24f8:	ldr	ip, [sp, #96]	; 0x60
    24fc:	cmp	ip, #0
    2500:	beq	250c <eval_boolean+0x168c>
    2504:	ldr	r0, [sp, #96]	; 0x60
    2508:	bl	0 <free>
    250c:	cmp	r4, #0
    2510:	bne	2544 <eval_boolean+0x16c4>
    2514:	mvn	r0, #400	; 0x190
    2518:	ldr	r1, [pc, #368]	; 2690 <eval_boolean+0x1810>
    251c:	ldr	r2, [sp, #68]	; 0x44
    2520:	ldr	r3, [sp, #72]	; 0x48
    2524:	bl	0 <coda_set_error>
    2528:	ldr	r0, [sp, #84]	; 0x54
    252c:	cmp	r0, #0
    2530:	beq	253c <eval_boolean+0x16bc>
    2534:	ldr	r0, [sp, #84]	; 0x54
    2538:	bl	0 <free>
    253c:	mvn	r0, #0
    2540:	b	2658 <eval_boolean+0x17d8>
    2544:	ldr	r3, [sp, #84]	; 0x54
    2548:	cmp	r3, #0
    254c:	bne	2594 <eval_boolean+0x1714>
    2550:	ldr	r0, [pc, #332]	; 26a4 <eval_boolean+0x1824>
    2554:	bl	0 <strdup>
    2558:	str	r0, [sp, #84]	; 0x54
    255c:	ldr	r0, [sp, #84]	; 0x54
    2560:	cmp	r0, #0
    2564:	bne	2594 <eval_boolean+0x1714>
    2568:	mvn	r0, #0
    256c:	ldr	r1, [pc, #276]	; 2688 <eval_boolean+0x1808>
    2570:	ldr	r2, [pc, #296]	; 26a0 <eval_boolean+0x1820>
    2574:	mov	r3, #1120	; 0x460
    2578:	bl	0 <coda_set_error>
    257c:	ldr	r3, [pc, #272]	; 2694 <eval_boolean+0x1814>
    2580:	ldr	ip, [r3]
    2584:	mov	r0, r4
    2588:	blx	ip
    258c:	mvn	r0, #0
    2590:	b	2658 <eval_boolean+0x17d8>
    2594:	mov	r1, #0
    2598:	ldr	ip, [sp, #84]	; 0x54
    259c:	ldr	r3, [sp, #76]	; 0x4c
    25a0:	add	r2, ip, r3
    25a4:	ldr	r3, [sp, #80]	; 0x50
    25a8:	mov	r0, #0
    25ac:	mov	r8, #0
    25b0:	add	ip, sp, #488	; 0x1e8
    25b4:	mov	r6, #48	; 0x30
    25b8:	str	r6, [sp, #12]
    25bc:	str	ip, [sp, #8]
    25c0:	str	r8, [sp, #4]
    25c4:	str	r0, [sp]
    25c8:	mov	r0, r4
    25cc:	bl	0 <coda_pcre_exec>
    25d0:	mov	r6, r0
    25d4:	ldr	r0, [sp, #84]	; 0x54
    25d8:	bl	0 <free>
    25dc:	ldr	r2, [pc, #176]	; 2694 <eval_boolean+0x1814>
    25e0:	ldr	ip, [r2]
    25e4:	mov	r0, r4
    25e8:	blx	ip
    25ec:	cmp	r6, #0
    25f0:	blt	25fc <eval_boolean+0x177c>
    25f4:	mov	ip, #0
    25f8:	b	2608 <eval_boolean+0x1788>
    25fc:	cmn	r6, #1
    2600:	movne	ip, #1
    2604:	moveq	ip, #0
    2608:	cmp	ip, #0
    260c:	beq	2628 <eval_boolean+0x17a8>
    2610:	mvn	r0, #400	; 0x190
    2614:	ldr	r1, [pc, #112]	; 268c <eval_boolean+0x180c>
    2618:	mov	r2, r6
    261c:	bl	0 <coda_set_error>
    2620:	mvn	r0, #0
    2624:	b	2658 <eval_boolean+0x17d8>
    2628:	cmp	r6, #0
    262c:	bne	2644 <eval_boolean+0x17c4>
    2630:	mvn	r0, #400	; 0x190
    2634:	ldr	r1, [pc, #92]	; 2698 <eval_boolean+0x1818>
    2638:	bl	0 <coda_set_error>
    263c:	mvn	r0, #0
    2640:	b	2658 <eval_boolean+0x17d8>
    2644:	cmp	r6, #0
    2648:	movgt	ip, #1
    264c:	movle	ip, #0
    2650:	str	ip, [r5]
    2654:	mov	r0, #0
    2658:	ldr	r4, [sp, #24]
    265c:	ldr	r5, [sp, #28]
    2660:	ldr	r6, [sp, #32]
    2664:	ldr	r7, [sp, #36]	; 0x24
    2668:	ldr	r8, [sp, #40]	; 0x28
    266c:	ldr	r9, [sp, #44]	; 0x2c
    2670:	ldr	lr, [sp, #20]
    2674:	ldr	sp, [sp, #16]
    2678:	bx	lr
    267c:	.word	0x00000d6c
    2680:	.word	0x0000020a
    2684:	.word	0x0000046b
    2688:	.word	0x00000bc5
    268c:	.word	0x0000026a
    2690:	.word	0x000006da
    2694:	.word	0x00000000
    2698:	.word	0x000004b9
    269c:	.word	0x00000bf8
    26a0:	.word	0x0000053b
    26a4:	.word	0x00000d52

000026a8 <eval_float>:
    26a8:	mov	ip, sp
    26ac:	sub	sp, sp, #2880	; 0xb40
    26b0:	str	ip, [sp, #4]
    26b4:	str	lr, [sp, #8]
    26b8:	str	r4, [sp, #16]
    26bc:	str	r5, [sp, #20]
    26c0:	str	r6, [sp, #24]
    26c4:	str	r7, [sp, #28]
    26c8:	str	r8, [sp, #32]
    26cc:	str	r9, [sp, #36]	; 0x24
    26d0:	vstr	d8, [sp, #40]	; 0x28
    26d4:	mov	r4, r2
    26d8:	mov	r5, r0
    26dc:	ldr	r2, [r1, #4]
    26e0:	cmp	r2, #1
    26e4:	bne	271c <eval_float+0x74>
    26e8:	add	r2, sp, #128	; 0x80
    26ec:	mov	r0, r5
    26f0:	bl	367c <eval_integer>
    26f4:	cmp	r0, #0
    26f8:	beq	2704 <eval_float+0x5c>
    26fc:	mvn	r0, #0
    2700:	b	3638 <eval_float+0xf90>
    2704:	ldr	r0, [sp, #128]	; 0x80
    2708:	ldr	r1, [sp, #132]	; 0x84
    270c:	bl	0 <__compcert_i64_stod>
    2710:	vstr	d0, [r4]
    2714:	mov	r0, #0
    2718:	b	3638 <eval_float+0xf90>
    271c:	ldr	r0, [r1]
    2720:	cmp	r0, #19
    2724:	bne	2738 <eval_float+0x90>
    2728:	vldr	d0, [r1, #16]
    272c:	vstr	d0, [r4]
    2730:	mov	r0, #0
    2734:	b	3638 <eval_float+0xf90>
    2738:	mov	r6, r1
    273c:	ldr	r3, [r6]
    2740:	cmp	r3, #42	; 0x2a
    2744:	bcs	2f9c <eval_float+0x8f4>
    2748:	cmp	r3, #11
    274c:	bcs	2c34 <eval_float+0x58c>
    2750:	cmp	r3, #3
    2754:	bcs	2808 <eval_float+0x160>
    2758:	cmp	r3, #0
    275c:	beq	27bc <eval_float+0x114>
    2760:	cmp	r3, #1
    2764:	bne	3460 <eval_float+0xdb8>
    2768:	ldr	r1, [r6, #16]
    276c:	add	r2, sp, #144	; 0x90
    2770:	mov	r0, r5
    2774:	bl	26a8 <eval_float>
    2778:	cmp	r0, #0
    277c:	beq	2788 <eval_float+0xe0>
    2780:	mvn	r0, #0
    2784:	b	3638 <eval_float+0xf90>
    2788:	ldr	r1, [r6, #20]
    278c:	add	r2, sp, #152	; 0x98
    2790:	mov	r0, r5
    2794:	bl	26a8 <eval_float>
    2798:	cmp	r0, #0
    279c:	beq	27a8 <eval_float+0x100>
    27a0:	mvn	r0, #0
    27a4:	b	3638 <eval_float+0xf90>
    27a8:	vldr	d7, [sp, #144]	; 0x90
    27ac:	vldr	d2, [sp, #152]	; 0x98
    27b0:	vadd.f64	d4, d7, d2
    27b4:	vstr	d4, [r4]
    27b8:	b	3634 <eval_float+0xf8c>
    27bc:	ldr	r1, [r6, #16]
    27c0:	mov	r2, r4
    27c4:	mov	r0, r5
    27c8:	bl	26a8 <eval_float>
    27cc:	cmp	r0, #0
    27d0:	beq	27dc <eval_float+0x134>
    27d4:	mvn	r0, #0
    27d8:	b	3638 <eval_float+0xf90>
    27dc:	vldr	d4, [r4]
    27e0:	vldr	d0, [pc, #772]	; 2aec <eval_float+0x444>
    27e4:	vcmp.f64	d4, d0
    27e8:	vmrs	APSR_nzcv, fpscr
    27ec:	bge	27fc <eval_float+0x154>
    27f0:	vldr	d1, [r4]
    27f4:	vneg.f64	d0, d1
    27f8:	b	2800 <eval_float+0x158>
    27fc:	vldr	d0, [r4]
    2800:	vstr	d0, [r4]
    2804:	b	3634 <eval_float+0xf8c>
    2808:	cmp	r3, #3
    280c:	beq	2af4 <eval_float+0x44c>
    2810:	cmp	r3, #8
    2814:	beq	2980 <eval_float+0x2d8>
    2818:	cmp	r3, #9
    281c:	bne	3460 <eval_float+0xdb8>
    2820:	ldr	r2, [r5]
    2824:	cmp	r2, #0
    2828:	bne	2840 <eval_float+0x198>
    282c:	ldr	r0, [pc, #688]	; 2ae4 <eval_float+0x43c>
    2830:	ldr	r1, [pc, #688]	; 2ae8 <eval_float+0x440>
    2834:	movw	r2, #1831	; 0x727
    2838:	ldr	r3, [pc, #672]	; 2ae0 <eval_float+0x438>
    283c:	bl	0 <__assert_fail>
    2840:	add	r1, r5, #8
    2844:	mov	r2, r1
    2848:	add	r3, sp, #800	; 0x320
    284c:	mov	lr, #130	; 0x82
    2850:	ldr	ip, [r2], #4
    2854:	subs	lr, lr, #1
    2858:	str	ip, [r3], #4
    285c:	bne	2850 <eval_float+0x1a8>
    2860:	ldr	r1, [r6, #16]
    2864:	mov	r0, r5
    2868:	bl	7608 <eval_cursor>
    286c:	cmp	r0, #0
    2870:	beq	287c <eval_float+0x1d4>
    2874:	mvn	r0, #0
    2878:	b	3638 <eval_float+0xf90>
    287c:	add	r0, r5, #8
    2880:	add	r1, sp, #52	; 0x34
    2884:	bl	0 <coda_cursor_get_num_elements>
    2888:	cmp	r0, #0
    288c:	beq	2898 <eval_float+0x1f0>
    2890:	mvn	r0, #0
    2894:	b	3638 <eval_float+0xf90>
    2898:	bl	0 <coda_NaN>
    289c:	vstr	d0, [r4]
    28a0:	ldr	r1, [sp, #52]	; 0x34
    28a4:	cmp	r1, #0
    28a8:	ble	295c <eval_float+0x2b4>
    28ac:	add	r0, r5, #8
    28b0:	bl	0 <coda_cursor_goto_first_array_element>
    28b4:	cmp	r0, #0
    28b8:	beq	28c4 <eval_float+0x21c>
    28bc:	mvn	r0, #0
    28c0:	b	3638 <eval_float+0xf90>
    28c4:	mov	r7, #0
    28c8:	ldr	r2, [sp, #52]	; 0x34
    28cc:	cmp	r7, r2
    28d0:	bge	295c <eval_float+0x2b4>
    28d4:	ldr	r1, [r6, #20]
    28d8:	add	r2, sp, #120	; 0x78
    28dc:	mov	r0, r5
    28e0:	bl	26a8 <eval_float>
    28e4:	cmp	r0, #0
    28e8:	beq	28f4 <eval_float+0x24c>
    28ec:	mvn	r0, #0
    28f0:	b	3638 <eval_float+0xf90>
    28f4:	cmp	r7, #0
    28f8:	beq	2918 <eval_float+0x270>
    28fc:	vldr	d6, [sp, #120]	; 0x78
    2900:	vldr	d0, [r4]
    2904:	vcmp.f64	d6, d0
    2908:	vmrs	APSR_nzcv, fpscr
    290c:	movmi	r0, #1
    2910:	movpl	r0, #0
    2914:	b	291c <eval_float+0x274>
    2918:	mov	r0, #1
    291c:	cmp	r0, #0
    2920:	beq	292c <eval_float+0x284>
    2924:	vldr	d7, [sp, #120]	; 0x78
    2928:	vstr	d7, [r4]
    292c:	ldr	r0, [sp, #52]	; 0x34
    2930:	sub	r0, r0, #1
    2934:	cmp	r7, r0
    2938:	bge	2954 <eval_float+0x2ac>
    293c:	add	r0, r5, #8
    2940:	bl	0 <coda_cursor_goto_next_array_element>
    2944:	cmp	r0, #0
    2948:	beq	2954 <eval_float+0x2ac>
    294c:	mvn	r0, #0
    2950:	b	3638 <eval_float+0xf90>
    2954:	add	r7, r7, #1
    2958:	b	28c8 <eval_float+0x220>
    295c:	add	r0, r5, #8
    2960:	add	r2, sp, #800	; 0x320
    2964:	mov	r3, r0
    2968:	mov	lr, #130	; 0x82
    296c:	ldr	ip, [r2], #4
    2970:	subs	lr, lr, #1
    2974:	str	ip, [r3], #4
    2978:	bne	296c <eval_float+0x2c4>
    297c:	b	3634 <eval_float+0xf8c>
    2980:	ldr	r1, [r5]
    2984:	cmp	r1, #0
    2988:	bne	29a0 <eval_float+0x2f8>
    298c:	ldr	r0, [pc, #336]	; 2ae4 <eval_float+0x43c>
    2990:	ldr	r1, [pc, #336]	; 2ae8 <eval_float+0x440>
    2994:	movw	r2, #1783	; 0x6f7
    2998:	ldr	r3, [pc, #320]	; 2ae0 <eval_float+0x438>
    299c:	bl	0 <__assert_fail>
    29a0:	add	ip, r5, #8
    29a4:	mov	r2, ip
    29a8:	add	r3, sp, #280	; 0x118
    29ac:	mov	lr, #130	; 0x82
    29b0:	ldr	ip, [r2], #4
    29b4:	subs	lr, lr, #1
    29b8:	str	ip, [r3], #4
    29bc:	bne	29b0 <eval_float+0x308>
    29c0:	ldr	r1, [r6, #16]
    29c4:	mov	r0, r5
    29c8:	bl	7608 <eval_cursor>
    29cc:	cmp	r0, #0
    29d0:	beq	29dc <eval_float+0x334>
    29d4:	mvn	r0, #0
    29d8:	b	3638 <eval_float+0xf90>
    29dc:	add	r0, r5, #8
    29e0:	add	r1, sp, #48	; 0x30
    29e4:	bl	0 <coda_cursor_get_num_elements>
    29e8:	cmp	r0, #0
    29ec:	beq	29f8 <eval_float+0x350>
    29f0:	mvn	r0, #0
    29f4:	b	3638 <eval_float+0xf90>
    29f8:	bl	0 <coda_NaN>
    29fc:	vstr	d0, [r4]
    2a00:	ldr	r1, [sp, #48]	; 0x30
    2a04:	cmp	r1, #0
    2a08:	ble	2abc <eval_float+0x414>
    2a0c:	add	r0, r5, #8
    2a10:	bl	0 <coda_cursor_goto_first_array_element>
    2a14:	cmp	r0, #0
    2a18:	beq	2a24 <eval_float+0x37c>
    2a1c:	mvn	r0, #0
    2a20:	b	3638 <eval_float+0xf90>
    2a24:	mov	r7, #0
    2a28:	ldr	r1, [sp, #48]	; 0x30
    2a2c:	cmp	r7, r1
    2a30:	bge	2abc <eval_float+0x414>
    2a34:	ldr	r1, [r6, #20]
    2a38:	add	r2, sp, #112	; 0x70
    2a3c:	mov	r0, r5
    2a40:	bl	26a8 <eval_float>
    2a44:	cmp	r0, #0
    2a48:	beq	2a54 <eval_float+0x3ac>
    2a4c:	mvn	r0, #0
    2a50:	b	3638 <eval_float+0xf90>
    2a54:	cmp	r7, #0
    2a58:	beq	2a78 <eval_float+0x3d0>
    2a5c:	vldr	d2, [sp, #112]	; 0x70
    2a60:	vldr	d4, [r4]
    2a64:	vcmp.f64	d2, d4
    2a68:	vmrs	APSR_nzcv, fpscr
    2a6c:	movgt	ip, #1
    2a70:	movle	ip, #0
    2a74:	b	2a7c <eval_float+0x3d4>
    2a78:	mov	ip, #1
    2a7c:	cmp	ip, #0
    2a80:	beq	2a8c <eval_float+0x3e4>
    2a84:	vldr	d2, [sp, #112]	; 0x70
    2a88:	vstr	d2, [r4]
    2a8c:	ldr	r1, [sp, #48]	; 0x30
    2a90:	sub	r3, r1, #1
    2a94:	cmp	r7, r3
    2a98:	bge	2ab4 <eval_float+0x40c>
    2a9c:	add	r0, r5, #8
    2aa0:	bl	0 <coda_cursor_goto_next_array_element>
    2aa4:	cmp	r0, #0
    2aa8:	beq	2ab4 <eval_float+0x40c>
    2aac:	mvn	r0, #0
    2ab0:	b	3638 <eval_float+0xf90>
    2ab4:	add	r7, r7, #1
    2ab8:	b	2a28 <eval_float+0x380>
    2abc:	add	r0, r5, #8
    2ac0:	add	r2, sp, #280	; 0x118
    2ac4:	mov	r3, r0
    2ac8:	mov	lr, #130	; 0x82
    2acc:	ldr	ip, [r2], #4
    2ad0:	subs	lr, lr, #1
    2ad4:	str	ip, [r3], #4
    2ad8:	bne	2acc <eval_float+0x424>
    2adc:	b	3634 <eval_float+0xf8c>
    2ae0:	.word	0x00000d79
    2ae4:	.word	0x0000046b
    2ae8:	.word	0x0000053b
	...
    2af4:	ldr	ip, [r5]
    2af8:	cmp	ip, #0
    2afc:	bne	2b14 <eval_float+0x46c>
    2b00:	ldr	r0, [pc, #932]	; 2eac <eval_float+0x804>
    2b04:	ldr	r1, [pc, #936]	; 2eb4 <eval_float+0x80c>
    2b08:	movw	r2, #1738	; 0x6ca
    2b0c:	ldr	r3, [pc, #916]	; 2ea8 <eval_float+0x800>
    2b10:	bl	0 <__assert_fail>
    2b14:	add	ip, r5, #8
    2b18:	mov	r2, ip
    2b1c:	add	r3, sp, #312	; 0x138
    2b20:	add	r3, r3, #2048	; 0x800
    2b24:	mov	lr, #130	; 0x82
    2b28:	ldr	ip, [r2], #4
    2b2c:	subs	lr, lr, #1
    2b30:	str	ip, [r3], #4
    2b34:	bne	2b28 <eval_float+0x480>
    2b38:	ldr	r1, [r6, #16]
    2b3c:	mov	r0, r5
    2b40:	bl	7608 <eval_cursor>
    2b44:	cmp	r0, #0
    2b48:	beq	2b54 <eval_float+0x4ac>
    2b4c:	mvn	r0, #0
    2b50:	b	3638 <eval_float+0xf90>
    2b54:	add	r0, r5, #8
    2b58:	add	r1, sp, #96	; 0x60
    2b5c:	bl	0 <coda_cursor_get_num_elements>
    2b60:	cmp	r0, #0
    2b64:	beq	2b70 <eval_float+0x4c8>
    2b68:	mvn	r0, #0
    2b6c:	b	3638 <eval_float+0xf90>
    2b70:	vldr	d2, [pc, #832]	; 2eb8 <eval_float+0x810>
    2b74:	vstr	d2, [r4]
    2b78:	ldr	r1, [sp, #96]	; 0x60
    2b7c:	cmp	r1, #0
    2b80:	ble	2c0c <eval_float+0x564>
    2b84:	add	r0, r5, #8
    2b88:	bl	0 <coda_cursor_goto_first_array_element>
    2b8c:	cmp	r0, #0
    2b90:	beq	2b9c <eval_float+0x4f4>
    2b94:	mvn	r0, #0
    2b98:	b	3638 <eval_float+0xf90>
    2b9c:	mov	r7, #0
    2ba0:	ldr	r0, [sp, #96]	; 0x60
    2ba4:	cmp	r7, r0
    2ba8:	bge	2c0c <eval_float+0x564>
    2bac:	ldr	r1, [r6, #20]
    2bb0:	add	r2, sp, #104	; 0x68
    2bb4:	mov	r0, r5
    2bb8:	bl	26a8 <eval_float>
    2bbc:	cmp	r0, #0
    2bc0:	beq	2bcc <eval_float+0x524>
    2bc4:	mvn	r0, #0
    2bc8:	b	3638 <eval_float+0xf90>
    2bcc:	vldr	d7, [r4]
    2bd0:	vldr	d6, [sp, #104]	; 0x68
    2bd4:	vadd.f64	d1, d7, d6
    2bd8:	vstr	d1, [r4]
    2bdc:	ldr	r1, [sp, #96]	; 0x60
    2be0:	sub	r2, r1, #1
    2be4:	cmp	r7, r2
    2be8:	bge	2c04 <eval_float+0x55c>
    2bec:	add	r0, r5, #8
    2bf0:	bl	0 <coda_cursor_goto_next_array_element>
    2bf4:	cmp	r0, #0
    2bf8:	beq	2c04 <eval_float+0x55c>
    2bfc:	mvn	r0, #0
    2c00:	b	3638 <eval_float+0xf90>
    2c04:	add	r7, r7, #1
    2c08:	b	2ba0 <eval_float+0x4f8>
    2c0c:	add	r0, r5, #8
    2c10:	add	r2, sp, #312	; 0x138
    2c14:	add	r2, r2, #2048	; 0x800
    2c18:	mov	r3, r0
    2c1c:	mov	lr, #130	; 0x82
    2c20:	ldr	ip, [r2], #4
    2c24:	subs	lr, lr, #1
    2c28:	str	ip, [r3], #4
    2c2c:	bne	2c20 <eval_float+0x578>
    2c30:	b	3634 <eval_float+0xf8c>
    2c34:	cmp	r3, #24
    2c38:	bcs	2d24 <eval_float+0x67c>
    2c3c:	cmp	r3, #11
    2c40:	beq	2c7c <eval_float+0x5d4>
    2c44:	cmp	r3, #17
    2c48:	bne	3460 <eval_float+0xdb8>
    2c4c:	ldr	r1, [r6, #16]
    2c50:	mov	r2, r4
    2c54:	mov	r0, r5
    2c58:	bl	26a8 <eval_float>
    2c5c:	cmp	r0, #0
    2c60:	beq	2c6c <eval_float+0x5c4>
    2c64:	mvn	r0, #0
    2c68:	b	3638 <eval_float+0xf90>
    2c6c:	vldr	d0, [r4]
    2c70:	bl	0 <ceil>
    2c74:	vstr	d0, [r4]
    2c78:	b	3634 <eval_float+0xf8c>
    2c7c:	ldr	r1, [r5]
    2c80:	cmp	r1, #0
    2c84:	bne	2c9c <eval_float+0x5f4>
    2c88:	ldr	r0, [pc, #540]	; 2eac <eval_float+0x804>
    2c8c:	ldr	r1, [pc, #544]	; 2eb4 <eval_float+0x80c>
    2c90:	movw	r2, #1878	; 0x756
    2c94:	ldr	r3, [pc, #524]	; 2ea8 <eval_float+0x800>
    2c98:	bl	0 <__assert_fail>
    2c9c:	add	r0, r5, #8
    2ca0:	mov	r2, r0
    2ca4:	add	r3, sp, #296	; 0x128
    2ca8:	add	r3, r3, #1024	; 0x400
    2cac:	mov	lr, #130	; 0x82
    2cb0:	ldr	ip, [r2], #4
    2cb4:	subs	lr, lr, #1
    2cb8:	str	ip, [r3], #4
    2cbc:	bne	2cb0 <eval_float+0x608>
    2cc0:	ldr	r1, [r6, #16]
    2cc4:	mov	r0, r5
    2cc8:	bl	7608 <eval_cursor>
    2ccc:	cmp	r0, #0
    2cd0:	beq	2cdc <eval_float+0x634>
    2cd4:	mvn	r0, #0
    2cd8:	b	3638 <eval_float+0xf90>
    2cdc:	ldr	r1, [r6, #20]
    2ce0:	mov	r2, r4
    2ce4:	mov	r0, r5
    2ce8:	bl	26a8 <eval_float>
    2cec:	cmp	r0, #0
    2cf0:	beq	2cfc <eval_float+0x654>
    2cf4:	mvn	r0, #0
    2cf8:	b	3638 <eval_float+0xf90>
    2cfc:	add	r0, r5, #8
    2d00:	add	r2, sp, #296	; 0x128
    2d04:	add	r2, r2, #1024	; 0x400
    2d08:	mov	r3, r0
    2d0c:	mov	lr, #130	; 0x82
    2d10:	ldr	ip, [r2], #4
    2d14:	subs	lr, lr, #1
    2d18:	str	ip, [r3], #4
    2d1c:	bne	2d10 <eval_float+0x668>
    2d20:	b	3634 <eval_float+0xf8c>
    2d24:	cmp	r3, #24
    2d28:	beq	2f20 <eval_float+0x878>
    2d2c:	cmp	r3, #29
    2d30:	beq	2d6c <eval_float+0x6c4>
    2d34:	cmp	r3, #30
    2d38:	bne	3460 <eval_float+0xdb8>
    2d3c:	ldr	r1, [r6, #16]
    2d40:	mov	r2, r4
    2d44:	mov	r0, r5
    2d48:	bl	26a8 <eval_float>
    2d4c:	cmp	r0, #0
    2d50:	beq	2d5c <eval_float+0x6b4>
    2d54:	mvn	r0, #0
    2d58:	b	3638 <eval_float+0xf90>
    2d5c:	vldr	d0, [r4]
    2d60:	bl	0 <floor>
    2d64:	vstr	d0, [r4]
    2d68:	b	3634 <eval_float+0xf8c>
    2d6c:	ldr	ip, [r6, #16]
    2d70:	ldr	r3, [ip, #4]
    2d74:	cmp	r3, #4
    2d78:	beq	2e4c <eval_float+0x7a4>
    2d7c:	ldr	r0, [r6, #16]
    2d80:	ldr	r0, [r0, #4]
    2d84:	cmp	r0, #3
    2d88:	bne	2e18 <eval_float+0x770>
    2d8c:	ldr	r1, [r6, #16]
    2d90:	add	r2, sp, #56	; 0x38
    2d94:	add	r3, sp, #60	; 0x3c
    2d98:	add	r0, sp, #64	; 0x40
    2d9c:	str	r0, [sp]
    2da0:	mov	r0, r5
    2da4:	bl	5444 <eval_string>
    2da8:	cmp	r0, #0
    2dac:	beq	2db8 <eval_float+0x710>
    2db0:	mvn	r0, #0
    2db4:	b	3638 <eval_float+0xf90>
    2db8:	ldr	r1, [sp, #60]	; 0x3c
    2dbc:	cmp	r1, #0
    2dc0:	bne	2dd8 <eval_float+0x730>
    2dc4:	mvn	r0, #102	; 0x66
    2dc8:	ldr	r1, [pc, #224]	; 2eb0 <eval_float+0x808>
    2dcc:	bl	0 <coda_set_error>
    2dd0:	mvn	r0, #0
    2dd4:	b	3638 <eval_float+0xf90>
    2dd8:	ldr	ip, [sp, #64]	; 0x40
    2ddc:	ldr	r3, [sp, #56]	; 0x38
    2de0:	add	r0, ip, r3
    2de4:	ldr	r1, [sp, #60]	; 0x3c
    2de8:	mov	r3, #0
    2dec:	mov	r2, r4
    2df0:	bl	0 <coda_ascii_parse_double>
    2df4:	cmp	r0, #0
    2df8:	bge	2e0c <eval_float+0x764>
    2dfc:	ldr	r0, [sp, #64]	; 0x40
    2e00:	bl	0 <free>
    2e04:	mvn	r0, #0
    2e08:	b	3638 <eval_float+0xf90>
    2e0c:	ldr	r0, [sp, #64]	; 0x40
    2e10:	bl	0 <free>
    2e14:	b	3634 <eval_float+0xf8c>
    2e18:	ldr	r1, [r6, #16]
    2e1c:	add	r2, sp, #136	; 0x88
    2e20:	mov	r0, r5
    2e24:	bl	367c <eval_integer>
    2e28:	cmp	r0, #0
    2e2c:	beq	2e38 <eval_float+0x790>
    2e30:	mvn	r0, #0
    2e34:	b	3638 <eval_float+0xf90>
    2e38:	ldr	r0, [sp, #136]	; 0x88
    2e3c:	ldr	r1, [sp, #140]	; 0x8c
    2e40:	bl	0 <__compcert_i64_stod>
    2e44:	vstr	d0, [r4]
    2e48:	b	3634 <eval_float+0xf8c>
    2e4c:	ldr	ip, [r5]
    2e50:	cmp	ip, #0
    2e54:	bne	2e6c <eval_float+0x7c4>
    2e58:	ldr	r0, [pc, #76]	; 2eac <eval_float+0x804>
    2e5c:	ldr	r1, [pc, #80]	; 2eb4 <eval_float+0x80c>
    2e60:	movw	r2, #1418	; 0x58a
    2e64:	ldr	r3, [pc, #60]	; 2ea8 <eval_float+0x800>
    2e68:	bl	0 <__assert_fail>
    2e6c:	add	r1, r5, #8
    2e70:	mov	r2, r1
    2e74:	add	r3, sp, #1840	; 0x730
    2e78:	mov	lr, #130	; 0x82
    2e7c:	ldr	ip, [r2], #4
    2e80:	subs	lr, lr, #1
    2e84:	str	ip, [r3], #4
    2e88:	bne	2e7c <eval_float+0x7d4>
    2e8c:	ldr	r1, [r6, #16]
    2e90:	mov	r0, r5
    2e94:	bl	7608 <eval_cursor>
    2e98:	cmp	r0, #0
    2e9c:	beq	2ec0 <eval_float+0x818>
    2ea0:	mvn	r0, #0
    2ea4:	b	3638 <eval_float+0xf90>
    2ea8:	.word	0x00000d79
    2eac:	.word	0x0000046b
    2eb0:	.word	0x000000db
    2eb4:	.word	0x0000053b
	...
    2ec0:	bl	0 <coda_get_option_perform_conversions>
    2ec4:	mov	r6, r0
    2ec8:	mov	r0, #0
    2ecc:	bl	0 <coda_set_option_perform_conversions>
    2ed0:	add	r0, r5, #8
    2ed4:	mov	r1, r4
    2ed8:	bl	0 <coda_cursor_read_double>
    2edc:	cmp	r0, #0
    2ee0:	beq	2ef4 <eval_float+0x84c>
    2ee4:	mov	r0, r6
    2ee8:	bl	0 <coda_set_option_perform_conversions>
    2eec:	mvn	r0, #0
    2ef0:	b	3638 <eval_float+0xf90>
    2ef4:	mov	r0, r6
    2ef8:	bl	0 <coda_set_option_perform_conversions>
    2efc:	add	r0, r5, #8
    2f00:	add	r2, sp, #1840	; 0x730
    2f04:	mov	r3, r0
    2f08:	mov	lr, #130	; 0x82
    2f0c:	ldr	ip, [r2], #4
    2f10:	subs	lr, lr, #1
    2f14:	str	ip, [r3], #4
    2f18:	bne	2f0c <eval_float+0x864>
    2f1c:	b	3634 <eval_float+0xf8c>
    2f20:	ldr	r1, [r6, #16]
    2f24:	add	r2, sp, #192	; 0xc0
    2f28:	mov	r0, r5
    2f2c:	bl	26a8 <eval_float>
    2f30:	cmp	r0, #0
    2f34:	beq	2f40 <eval_float+0x898>
    2f38:	mvn	r0, #0
    2f3c:	b	3638 <eval_float+0xf90>
    2f40:	ldr	r1, [r6, #20]
    2f44:	add	r2, sp, #200	; 0xc8
    2f48:	mov	r0, r5
    2f4c:	bl	26a8 <eval_float>
    2f50:	cmp	r0, #0
    2f54:	beq	2f60 <eval_float+0x8b8>
    2f58:	mvn	r0, #0
    2f5c:	b	3638 <eval_float+0xf90>
    2f60:	vldr	d7, [sp, #200]	; 0xc8
    2f64:	vldr	d1, [pc, #760]	; 3264 <eval_float+0xbbc>
    2f68:	vcmp.f64	d7, d1
    2f6c:	vmrs	APSR_nzcv, fpscr
    2f70:	bne	2f88 <eval_float+0x8e0>
    2f74:	mvn	r0, #400	; 0x190
    2f78:	ldr	r1, [pc, #732]	; 325c <eval_float+0xbb4>
    2f7c:	bl	0 <coda_set_error>
    2f80:	mvn	r0, #0
    2f84:	b	3638 <eval_float+0xf90>
    2f88:	vldr	d3, [sp, #192]	; 0xc0
    2f8c:	vldr	d4, [sp, #200]	; 0xc8
    2f90:	vdiv.f64	d7, d3, d4
    2f94:	vstr	d7, [r4]
    2f98:	b	3634 <eval_float+0xf8c>
    2f9c:	cmp	r3, #60	; 0x3c
    2fa0:	bcs	31d8 <eval_float+0xb30>
    2fa4:	cmp	r3, #57	; 0x39
    2fa8:	bcs	3090 <eval_float+0x9e8>
    2fac:	cmp	r3, #42	; 0x2a
    2fb0:	beq	3024 <eval_float+0x97c>
    2fb4:	cmp	r3, #56	; 0x38
    2fb8:	bne	3460 <eval_float+0xdb8>
    2fbc:	ldr	r1, [r6, #16]
    2fc0:	add	r2, sp, #248	; 0xf8
    2fc4:	mov	r0, r5
    2fc8:	bl	26a8 <eval_float>
    2fcc:	cmp	r0, #0
    2fd0:	beq	2fdc <eval_float+0x934>
    2fd4:	mvn	r0, #0
    2fd8:	b	3638 <eval_float+0xf90>
    2fdc:	ldr	r1, [r6, #20]
    2fe0:	add	r2, sp, #256	; 0x100
    2fe4:	mov	r0, r5
    2fe8:	bl	26a8 <eval_float>
    2fec:	cmp	r0, #0
    2ff0:	beq	2ffc <eval_float+0x954>
    2ff4:	mvn	r0, #0
    2ff8:	b	3638 <eval_float+0xf90>
    2ffc:	vldr	d1, [sp, #248]	; 0xf8
    3000:	vldr	d6, [sp, #256]	; 0x100
    3004:	vcmp.f64	d1, d6
    3008:	vmrs	APSR_nzcv, fpscr
    300c:	bgt	3018 <eval_float+0x970>
    3010:	vldr	d4, [sp, #256]	; 0x100
    3014:	b	301c <eval_float+0x974>
    3018:	vldr	d4, [sp, #248]	; 0xf8
    301c:	vstr	d4, [r4]
    3020:	b	3634 <eval_float+0xf8c>
    3024:	ldr	r1, [r6, #16]
    3028:	add	r2, sp, #92	; 0x5c
    302c:	mov	r0, r5
    3030:	bl	e80 <eval_boolean>
    3034:	cmp	r0, #0
    3038:	beq	3044 <eval_float+0x99c>
    303c:	mvn	r0, #0
    3040:	b	3638 <eval_float+0xf90>
    3044:	ldr	r3, [sp, #92]	; 0x5c
    3048:	cmp	r3, #0
    304c:	bne	3070 <eval_float+0x9c8>
    3050:	ldr	r1, [r6, #24]
    3054:	mov	r2, r4
    3058:	mov	r0, r5
    305c:	bl	26a8 <eval_float>
    3060:	cmp	r0, #0
    3064:	beq	3634 <eval_float+0xf8c>
    3068:	mvn	r0, #0
    306c:	b	3638 <eval_float+0xf90>
    3070:	ldr	r1, [r6, #20]
    3074:	mov	r2, r4
    3078:	mov	r0, r5
    307c:	bl	26a8 <eval_float>
    3080:	cmp	r0, #0
    3084:	beq	3634 <eval_float+0xf8c>
    3088:	mvn	r0, #0
    308c:	b	3638 <eval_float+0xf90>
    3090:	cmp	r3, #57	; 0x39
    3094:	beq	3170 <eval_float+0xac8>
    3098:	cmp	r3, #58	; 0x3a
    309c:	beq	30f4 <eval_float+0xa4c>
    30a0:	ldr	r1, [r6, #16]
    30a4:	add	r2, sp, #176	; 0xb0
    30a8:	mov	r0, r5
    30ac:	bl	26a8 <eval_float>
    30b0:	cmp	r0, #0
    30b4:	beq	30c0 <eval_float+0xa18>
    30b8:	mvn	r0, #0
    30bc:	b	3638 <eval_float+0xf90>
    30c0:	ldr	r1, [r6, #20]
    30c4:	add	r2, sp, #184	; 0xb8
    30c8:	mov	r0, r5
    30cc:	bl	26a8 <eval_float>
    30d0:	cmp	r0, #0
    30d4:	beq	30e0 <eval_float+0xa38>
    30d8:	mvn	r0, #0
    30dc:	b	3638 <eval_float+0xf90>
    30e0:	vldr	d5, [sp, #176]	; 0xb0
    30e4:	vldr	d4, [sp, #184]	; 0xb8
    30e8:	vmul.f64	d2, d5, d4
    30ec:	vstr	d2, [r4]
    30f0:	b	3634 <eval_float+0xf8c>
    30f4:	ldr	r1, [r6, #16]
    30f8:	add	r2, sp, #208	; 0xd0
    30fc:	mov	r0, r5
    3100:	bl	26a8 <eval_float>
    3104:	cmp	r0, #0
    3108:	beq	3114 <eval_float+0xa6c>
    310c:	mvn	r0, #0
    3110:	b	3638 <eval_float+0xf90>
    3114:	ldr	r1, [r6, #20]
    3118:	add	r2, sp, #216	; 0xd8
    311c:	mov	r0, r5
    3120:	bl	26a8 <eval_float>
    3124:	cmp	r0, #0
    3128:	beq	3134 <eval_float+0xa8c>
    312c:	mvn	r0, #0
    3130:	b	3638 <eval_float+0xf90>
    3134:	vldr	d7, [sp, #216]	; 0xd8
    3138:	vldr	d5, [pc, #292]	; 3264 <eval_float+0xbbc>
    313c:	vcmp.f64	d7, d5
    3140:	vmrs	APSR_nzcv, fpscr
    3144:	bne	315c <eval_float+0xab4>
    3148:	mvn	r0, #400	; 0x190
    314c:	ldr	r1, [pc, #268]	; 3260 <eval_float+0xbb8>
    3150:	bl	0 <coda_set_error>
    3154:	mvn	r0, #0
    3158:	b	3638 <eval_float+0xf90>
    315c:	vldr	d0, [sp, #208]	; 0xd0
    3160:	vldr	d1, [sp, #216]	; 0xd8
    3164:	bl	0 <fmod>
    3168:	vstr	d0, [r4]
    316c:	b	3634 <eval_float+0xf8c>
    3170:	ldr	r1, [r6, #16]
    3174:	add	r2, sp, #264	; 0x108
    3178:	mov	r0, r5
    317c:	bl	26a8 <eval_float>
    3180:	cmp	r0, #0
    3184:	beq	3190 <eval_float+0xae8>
    3188:	mvn	r0, #0
    318c:	b	3638 <eval_float+0xf90>
    3190:	ldr	r1, [r6, #20]
    3194:	add	r2, sp, #272	; 0x110
    3198:	mov	r0, r5
    319c:	bl	26a8 <eval_float>
    31a0:	cmp	r0, #0
    31a4:	beq	31b0 <eval_float+0xb08>
    31a8:	mvn	r0, #0
    31ac:	b	3638 <eval_float+0xf90>
    31b0:	vldr	d0, [sp, #264]	; 0x108
    31b4:	vldr	d1, [sp, #272]	; 0x110
    31b8:	vcmp.f64	d0, d1
    31bc:	vmrs	APSR_nzcv, fpscr
    31c0:	bmi	31cc <eval_float+0xb24>
    31c4:	vldr	d3, [sp, #272]	; 0x110
    31c8:	b	31d0 <eval_float+0xb28>
    31cc:	vldr	d3, [sp, #264]	; 0x108
    31d0:	vstr	d3, [r4]
    31d4:	b	3634 <eval_float+0xf8c>
    31d8:	cmp	r3, #78	; 0x4e
    31dc:	bcs	33d0 <eval_float+0xd28>
    31e0:	cmp	r3, #60	; 0x3c
    31e4:	beq	33a0 <eval_float+0xcf8>
    31e8:	cmp	r3, #66	; 0x42
    31ec:	beq	326c <eval_float+0xbc4>
    31f0:	cmp	r3, #72	; 0x48
    31f4:	bne	3460 <eval_float+0xdb8>
    31f8:	ldr	r1, [r6, #16]
    31fc:	mov	r2, r4
    3200:	mov	r0, r5
    3204:	bl	26a8 <eval_float>
    3208:	cmp	r0, #0
    320c:	beq	3218 <eval_float+0xb70>
    3210:	mvn	r0, #0
    3214:	b	3638 <eval_float+0xf90>
    3218:	vldr	d3, [r4]
    321c:	vldr	d2, [pc, #64]	; 3264 <eval_float+0xbbc>
    3220:	vcmp.f64	d3, d2
    3224:	vmrs	APSR_nzcv, fpscr
    3228:	bmi	3244 <eval_float+0xb9c>
    322c:	vldr	d4, [r4]
    3230:	vmov.f64	d5, #96	; 0x3f000000  0.5
    3234:	vadd.f64	d0, d4, d5
    3238:	bl	0 <floor>
    323c:	vstr	d0, [r4]
    3240:	b	3634 <eval_float+0xf8c>
    3244:	vldr	d3, [r4]
    3248:	vmov.f64	d5, #96	; 0x3f000000  0.5
    324c:	vsub.f64	d0, d3, d5
    3250:	bl	0 <ceil>
    3254:	vstr	d0, [r4]
    3258:	b	3634 <eval_float+0xf8c>
    325c:	.word	0x00000a05
    3260:	.word	0x000005d6
	...
    326c:	ldr	r1, [r6, #16]
    3270:	add	r2, sp, #224	; 0xe0
    3274:	mov	r0, r5
    3278:	bl	26a8 <eval_float>
    327c:	cmp	r0, #0
    3280:	beq	328c <eval_float+0xbe4>
    3284:	mvn	r0, #0
    3288:	b	3638 <eval_float+0xf90>
    328c:	ldr	ip, [r6, #20]
    3290:	ldr	ip, [ip, #4]
    3294:	cmp	ip, #1
    3298:	bne	336c <eval_float+0xcc4>
    329c:	ldr	r1, [r6, #20]
    32a0:	add	r2, sp, #240	; 0xf0
    32a4:	mov	r0, r5
    32a8:	bl	367c <eval_integer>
    32ac:	cmp	r0, #0
    32b0:	beq	32bc <eval_float+0xc14>
    32b4:	mvn	r0, #0
    32b8:	b	3638 <eval_float+0xf90>
    32bc:	ldr	r3, [sp, #240]	; 0xf0
    32c0:	ldr	r1, [sp, #244]	; 0xf4
    32c4:	mvn	r2, #0
    32c8:	cmp	r1, r2
    32cc:	bne	32e0 <eval_float+0xc38>
    32d0:	mvn	r0, #63	; 0x3f
    32d4:	cmp	r3, r0
    32d8:	bcs	32ec <eval_float+0xc44>
    32dc:	b	3328 <eval_float+0xc80>
    32e0:	mvn	r2, #0
    32e4:	cmp	r1, r2
    32e8:	ble	3328 <eval_float+0xc80>
    32ec:	ldr	r2, [sp, #240]	; 0xf0
    32f0:	ldr	r0, [sp, #244]	; 0xf4
    32f4:	mov	r3, #0
    32f8:	cmp	r0, r3
    32fc:	bne	3314 <eval_float+0xc6c>
    3300:	mov	r0, #64	; 0x40
    3304:	cmp	r2, r0
    3308:	movls	ip, #1
    330c:	movhi	ip, #0
    3310:	b	332c <eval_float+0xc84>
    3314:	mov	r2, #0
    3318:	cmp	r0, r2
    331c:	movlt	ip, #1
    3320:	movge	ip, #0
    3324:	b	332c <eval_float+0xc84>
    3328:	mov	ip, #0
    332c:	cmp	ip, #0
    3330:	bne	3358 <eval_float+0xcb0>
    3334:	vldr	d8, [sp, #224]	; 0xe0
    3338:	ldr	r0, [sp, #240]	; 0xf0
    333c:	ldr	r1, [sp, #244]	; 0xf4
    3340:	bl	0 <__compcert_i64_stod>
    3344:	vmov.f64	d1, d0
    3348:	vmov.f64	d0, d8
    334c:	bl	0 <pow>
    3350:	vstr	d0, [r4]
    3354:	b	3634 <eval_float+0xf8c>
    3358:	vldr	d0, [sp, #224]	; 0xe0
    335c:	ldr	r0, [sp, #240]	; 0xf0
    3360:	bl	0 <ipow>
    3364:	vstr	d0, [r4]
    3368:	b	3634 <eval_float+0xf8c>
    336c:	ldr	r1, [r6, #20]
    3370:	add	r2, sp, #232	; 0xe8
    3374:	mov	r0, r5
    3378:	bl	26a8 <eval_float>
    337c:	cmp	r0, #0
    3380:	beq	338c <eval_float+0xce4>
    3384:	mvn	r0, #0
    3388:	b	3638 <eval_float+0xf90>
    338c:	vldr	d0, [sp, #224]	; 0xe0
    3390:	vldr	d1, [sp, #232]	; 0xe8
    3394:	bl	0 <pow>
    3398:	vstr	d0, [r4]
    339c:	b	3634 <eval_float+0xf8c>
    33a0:	ldr	r1, [r6, #16]
    33a4:	mov	r2, r4
    33a8:	mov	r0, r5
    33ac:	bl	26a8 <eval_float>
    33b0:	cmp	r0, #0
    33b4:	beq	33c0 <eval_float+0xd18>
    33b8:	mvn	r0, #0
    33bc:	b	3638 <eval_float+0xf90>
    33c0:	vldr	d4, [r4]
    33c4:	vneg.f64	d4, d4
    33c8:	vstr	d4, [r4]
    33cc:	b	3634 <eval_float+0xf8c>
    33d0:	cmp	r3, #78	; 0x4e
    33d4:	beq	35e4 <eval_float+0xf3c>
    33d8:	cmp	r3, #79	; 0x4f
    33dc:	beq	3480 <eval_float+0xdd8>
    33e0:	cmp	r3, #86	; 0x56
    33e4:	bne	3460 <eval_float+0xdb8>
    33e8:	ldr	r1, [r6, #12]
    33ec:	ldrb	r0, [r1]
    33f0:	sub	r9, r0, #105	; 0x69
    33f4:	lsl	r3, r9, #3
    33f8:	add	r0, r5, r3
    33fc:	ldr	r7, [r0, #528]	; 0x210
    3400:	ldr	r8, [r0, #532]	; 0x214
    3404:	ldr	r1, [r6, #16]
    3408:	lsl	r2, r9, #3
    340c:	add	ip, r5, r2
    3410:	add	r2, ip, #528	; 0x210
    3414:	mov	r0, r5
    3418:	bl	367c <eval_integer>
    341c:	cmp	r0, #0
    3420:	beq	342c <eval_float+0xd84>
    3424:	mvn	r0, #0
    3428:	b	3638 <eval_float+0xf90>
    342c:	ldr	r1, [r6, #20]
    3430:	mov	r2, r4
    3434:	mov	r0, r5
    3438:	bl	26a8 <eval_float>
    343c:	cmp	r0, #0
    3440:	beq	344c <eval_float+0xda4>
    3444:	mvn	r0, #0
    3448:	b	3638 <eval_float+0xf90>
    344c:	lsl	ip, r9, #3
    3450:	add	r2, r5, ip
    3454:	str	r7, [r2, #528]	; 0x210
    3458:	str	r8, [r2, #532]	; 0x214
    345c:	b	3634 <eval_float+0xf8c>
    3460:	ldr	r0, [pc, #516]	; 366c <eval_float+0xfc4>
    3464:	ldr	r1, [pc, #520]	; 3674 <eval_float+0xfcc>
    3468:	movw	r2, #1909	; 0x775
    346c:	ldr	r3, [pc, #492]	; 3660 <eval_float+0xfb8>
    3470:	bl	0 <__assert_fail>
    3474:	mov	r0, #1
    3478:	bl	0 <exit>
    347c:	b	3634 <eval_float+0xf8c>
    3480:	ldr	r1, [r6, #16]
    3484:	add	r2, sp, #68	; 0x44
    3488:	add	r3, sp, #76	; 0x4c
    348c:	add	ip, sp, #84	; 0x54
    3490:	str	ip, [sp]
    3494:	mov	r0, r5
    3498:	bl	5444 <eval_string>
    349c:	cmp	r0, #0
    34a0:	beq	34ac <eval_float+0xe04>
    34a4:	mvn	r0, #0
    34a8:	b	3638 <eval_float+0xf90>
    34ac:	ldr	r1, [sp, #76]	; 0x4c
    34b0:	cmp	r1, #0
    34b4:	bge	34cc <eval_float+0xe24>
    34b8:	mvn	r0, #400	; 0x190
    34bc:	ldr	r1, [pc, #436]	; 3678 <eval_float+0xfd0>
    34c0:	bl	0 <coda_set_error>
    34c4:	mvn	r0, #0
    34c8:	b	3638 <eval_float+0xf90>
    34cc:	ldr	r3, [sp, #76]	; 0x4c
    34d0:	cmp	r3, #0
    34d4:	bne	34ec <eval_float+0xe44>
    34d8:	mvn	r0, #400	; 0x190
    34dc:	ldr	r1, [pc, #384]	; 3664 <eval_float+0xfbc>
    34e0:	bl	0 <coda_set_error>
    34e4:	mvn	r0, #0
    34e8:	b	3638 <eval_float+0xf90>
    34ec:	ldr	r0, [sp, #84]	; 0x54
    34f0:	ldr	r3, [sp, #68]	; 0x44
    34f4:	ldr	r1, [sp, #76]	; 0x4c
    34f8:	add	r3, r3, r1
    34fc:	mov	r1, #0
    3500:	strb	r1, [r0, r3]
    3504:	ldr	r1, [r6, #20]
    3508:	add	r2, sp, #72	; 0x48
    350c:	add	r3, sp, #80	; 0x50
    3510:	add	r0, sp, #88	; 0x58
    3514:	str	r0, [sp]
    3518:	mov	r0, r5
    351c:	bl	5444 <eval_string>
    3520:	cmp	r0, #0
    3524:	beq	3538 <eval_float+0xe90>
    3528:	ldr	r0, [sp, #84]	; 0x54
    352c:	bl	0 <free>
    3530:	mvn	r0, #0
    3534:	b	3638 <eval_float+0xf90>
    3538:	ldr	r2, [sp, #80]	; 0x50
    353c:	cmp	r2, #0
    3540:	bge	3558 <eval_float+0xeb0>
    3544:	mvn	r0, #400	; 0x190
    3548:	ldr	r1, [pc, #280]	; 3668 <eval_float+0xfc0>
    354c:	bl	0 <coda_set_error>
    3550:	mvn	r0, #0
    3554:	b	3638 <eval_float+0xf90>
    3558:	ldr	ip, [sp, #80]	; 0x50
    355c:	cmp	ip, #0
    3560:	bne	3578 <eval_float+0xed0>
    3564:	mvn	r0, #400	; 0x190
    3568:	ldr	r1, [pc, #256]	; 3670 <eval_float+0xfc8>
    356c:	bl	0 <coda_set_error>
    3570:	mvn	r0, #0
    3574:	b	3638 <eval_float+0xf90>
    3578:	ldr	r3, [sp, #88]	; 0x58
    357c:	ldr	ip, [sp, #72]	; 0x48
    3580:	ldr	r0, [sp, #80]	; 0x50
    3584:	add	r1, ip, r0
    3588:	mov	r0, #0
    358c:	strb	r0, [r3, r1]
    3590:	ldr	ip, [sp, #88]	; 0x58
    3594:	ldr	r0, [sp, #72]	; 0x48
    3598:	add	r0, ip, r0
    359c:	ldr	r1, [sp, #84]	; 0x54
    35a0:	ldr	ip, [sp, #68]	; 0x44
    35a4:	add	r1, r1, ip
    35a8:	mov	r2, r4
    35ac:	bl	0 <coda_time_string_to_double>
    35b0:	cmp	r0, #0
    35b4:	beq	35d0 <eval_float+0xf28>
    35b8:	ldr	r0, [sp, #88]	; 0x58
    35bc:	bl	0 <free>
    35c0:	ldr	r0, [sp, #84]	; 0x54
    35c4:	bl	0 <free>
    35c8:	mvn	r0, #0
    35cc:	b	3638 <eval_float+0xf90>
    35d0:	ldr	r0, [sp, #88]	; 0x58
    35d4:	bl	0 <free>
    35d8:	ldr	r0, [sp, #84]	; 0x54
    35dc:	bl	0 <free>
    35e0:	b	3634 <eval_float+0xf8c>
    35e4:	ldr	r1, [r6, #16]
    35e8:	add	r2, sp, #160	; 0xa0
    35ec:	mov	r0, r5
    35f0:	bl	26a8 <eval_float>
    35f4:	cmp	r0, #0
    35f8:	beq	3604 <eval_float+0xf5c>
    35fc:	mvn	r0, #0
    3600:	b	3638 <eval_float+0xf90>
    3604:	ldr	r1, [r6, #20]
    3608:	add	r2, sp, #168	; 0xa8
    360c:	mov	r0, r5
    3610:	bl	26a8 <eval_float>
    3614:	cmp	r0, #0
    3618:	beq	3624 <eval_float+0xf7c>
    361c:	mvn	r0, #0
    3620:	b	3638 <eval_float+0xf90>
    3624:	vldr	d3, [sp, #160]	; 0xa0
    3628:	vldr	d1, [sp, #168]	; 0xa8
    362c:	vsub.f64	d7, d3, d1
    3630:	vstr	d7, [r4]
    3634:	mov	r0, #0
    3638:	ldr	r4, [sp, #16]
    363c:	ldr	r5, [sp, #20]
    3640:	ldr	r6, [sp, #24]
    3644:	ldr	r7, [sp, #28]
    3648:	ldr	r8, [sp, #32]
    364c:	ldr	r9, [sp, #36]	; 0x24
    3650:	vldr	d8, [sp, #40]	; 0x28
    3654:	ldr	lr, [sp, #8]
    3658:	add	sp, sp, #2880	; 0xb40
    365c:	bx	lr
    3660:	.word	0x00000d79
    3664:	.word	0x000001af
    3668:	.word	0x00000a57
    366c:	.word	0x00000bf8
    3670:	.word	0x00000c5a
    3674:	.word	0x0000053b
    3678:	.word	0x00000b84

0000367c <eval_integer>:
    367c:	mov	ip, sp
    3680:	sub	sp, sp, #9216	; 0x2400
    3684:	str	ip, [sp, #4]
    3688:	str	lr, [sp, #8]
    368c:	str	r4, [sp, #16]
    3690:	str	r5, [sp, #20]
    3694:	str	r6, [sp, #24]
    3698:	str	r7, [sp, #28]
    369c:	str	r8, [sp, #32]
    36a0:	str	r9, [sp, #36]	; 0x24
    36a4:	mov	r4, r2
    36a8:	mov	r5, r0
    36ac:	ldr	r2, [r1]
    36b0:	cmp	r2, #20
    36b4:	bne	36d0 <eval_integer+0x54>
    36b8:	ldr	r0, [r1, #16]
    36bc:	ldr	r1, [r1, #20]
    36c0:	str	r0, [r4]
    36c4:	str	r1, [r4, #4]
    36c8:	mov	r0, #0
    36cc:	b	53fc <eval_integer+0x1d80>
    36d0:	mov	r6, r1
    36d4:	ldr	r3, [r6]
    36d8:	cmp	r3, #87	; 0x57
    36dc:	bcs	53dc <eval_integer+0x1d60>
    36e0:	add	pc, pc, r3, lsl #2
    36e4:	nop	{0}
    36e8:	b	3a84 <eval_integer+0x408>
    36ec:	b	3ad8 <eval_integer+0x45c>
    36f0:	b	3d1c <eval_integer+0x6a0>
    36f4:	b	40cc <eval_integer+0xa50>
    36f8:	b	53dc <eval_integer+0x1d60>
    36fc:	b	3f68 <eval_integer+0x8ec>
    3700:	b	53dc <eval_integer+0x1d60>
    3704:	b	453c <eval_integer+0xec0>
    3708:	b	421c <eval_integer+0xba0>
    370c:	b	43b0 <eval_integer+0xd34>
    3710:	b	53dc <eval_integer+0x1d60>
    3714:	b	52c4 <eval_integer+0x1c48>
    3718:	b	4de4 <eval_integer+0x1768>
    371c:	b	4c5c <eval_integer+0x15e0>
    3720:	b	4e88 <eval_integer+0x180c>
    3724:	b	4d20 <eval_integer+0x16a4>
    3728:	b	53dc <eval_integer+0x1d60>
    372c:	b	53dc <eval_integer+0x1d60>
    3730:	b	53dc <eval_integer+0x1d60>
    3734:	b	53dc <eval_integer+0x1d60>
    3738:	b	53dc <eval_integer+0x1d60>
    373c:	b	53dc <eval_integer+0x1d60>
    3740:	b	53dc <eval_integer+0x1d60>
    3744:	b	49a0 <eval_integer+0x1324>
    3748:	b	3c0c <eval_integer+0x590>
    374c:	b	53dc <eval_integer+0x1d60>
    3750:	b	53dc <eval_integer+0x1d60>
    3754:	b	4f2c <eval_integer+0x18b0>
    3758:	b	53dc <eval_integer+0x1d60>
    375c:	b	53dc <eval_integer+0x1d60>
    3760:	b	53dc <eval_integer+0x1d60>
    3764:	b	53dc <eval_integer+0x1d60>
    3768:	b	53dc <eval_integer+0x1d60>
    376c:	b	53dc <eval_integer+0x1d60>
    3770:	b	53dc <eval_integer+0x1d60>
    3774:	b	53dc <eval_integer+0x1d60>
    3778:	b	53dc <eval_integer+0x1d60>
    377c:	b	53dc <eval_integer+0x1d60>
    3780:	b	53dc <eval_integer+0x1d60>
    3784:	b	53dc <eval_integer+0x1d60>
    3788:	b	53dc <eval_integer+0x1d60>
    378c:	b	53dc <eval_integer+0x1d60>
    3790:	b	3efc <eval_integer+0x880>
    3794:	b	4fc0 <eval_integer+0x1944>
    3798:	b	5074 <eval_integer+0x19f8>
    379c:	b	3844 <eval_integer+0x1c8>
    37a0:	b	53dc <eval_integer+0x1d60>
    37a4:	b	53dc <eval_integer+0x1d60>
    37a8:	b	53dc <eval_integer+0x1d60>
    37ac:	b	53dc <eval_integer+0x1d60>
    37b0:	b	488c <eval_integer+0x1210>
    37b4:	b	53dc <eval_integer+0x1d60>
    37b8:	b	53dc <eval_integer+0x1d60>
    37bc:	b	53dc <eval_integer+0x1d60>
    37c0:	b	53dc <eval_integer+0x1d60>
    37c4:	b	53dc <eval_integer+0x1d60>
    37c8:	b	3de4 <eval_integer+0x768>
    37cc:	b	3e70 <eval_integer+0x7f4>
    37d0:	b	3c94 <eval_integer+0x618>
    37d4:	b	3ba4 <eval_integer+0x528>
    37d8:	b	3a48 <eval_integer+0x3cc>
    37dc:	b	53dc <eval_integer+0x1d60>
    37e0:	b	53dc <eval_integer+0x1d60>
    37e4:	b	4ae0 <eval_integer+0x1464>
    37e8:	b	4bb0 <eval_integer+0x1534>
    37ec:	b	3d80 <eval_integer+0x704>
    37f0:	b	53dc <eval_integer+0x1d60>
    37f4:	b	53dc <eval_integer+0x1d60>
    37f8:	b	53dc <eval_integer+0x1d60>
    37fc:	b	53dc <eval_integer+0x1d60>
    3800:	b	4f6c <eval_integer+0x18f0>
    3804:	b	53dc <eval_integer+0x1d60>
    3808:	b	53dc <eval_integer+0x1d60>
    380c:	b	53dc <eval_integer+0x1d60>
    3810:	b	53dc <eval_integer+0x1d60>
    3814:	b	53dc <eval_integer+0x1d60>
    3818:	b	53dc <eval_integer+0x1d60>
    381c:	b	53dc <eval_integer+0x1d60>
    3820:	b	3b3c <eval_integer+0x4c0>
    3824:	b	53dc <eval_integer+0x1d60>
    3828:	b	53dc <eval_integer+0x1d60>
    382c:	b	46c8 <eval_integer+0x104c>
    3830:	b	53dc <eval_integer+0x1d60>
    3834:	b	50a0 <eval_integer+0x1a24>
    3838:	b	53dc <eval_integer+0x1d60>
    383c:	b	5198 <eval_integer+0x1b1c>
    3840:	b	5364 <eval_integer+0x1ce8>
    3844:	ldr	r0, [r6, #16]
    3848:	ldr	r2, [r0, #4]
    384c:	cmp	r2, #4
    3850:	bne	3978 <eval_integer+0x2fc>
    3854:	ldr	r0, [r5]
    3858:	cmp	r0, #0
    385c:	bne	3874 <eval_integer+0x1f8>
    3860:	ldr	r0, [pc, #3840]	; 4768 <eval_integer+0x10ec>
    3864:	ldr	r1, [pc, #3852]	; 4778 <eval_integer+0x10fc>
    3868:	mov	r2, #1936	; 0x790
    386c:	ldr	r3, [pc, #3836]	; 4770 <eval_integer+0x10f4>
    3870:	bl	0 <__assert_fail>
    3874:	add	r3, r5, #8
    3878:	mov	r2, r3
    387c:	add	r3, sp, #896	; 0x380
    3880:	mov	lr, #130	; 0x82
    3884:	ldr	ip, [r2], #4
    3888:	subs	lr, lr, #1
    388c:	str	ip, [r3], #4
    3890:	bne	3884 <eval_integer+0x208>
    3894:	ldr	r1, [r6, #16]
    3898:	mov	r0, r5
    389c:	bl	7608 <eval_cursor>
    38a0:	cmp	r0, #0
    38a4:	beq	38b0 <eval_integer+0x234>
    38a8:	mvn	r0, #0
    38ac:	b	53fc <eval_integer+0x1d80>
    38b0:	bl	0 <coda_get_option_perform_conversions>
    38b4:	mov	r6, r0
    38b8:	mov	r0, #0
    38bc:	bl	0 <coda_set_option_perform_conversions>
    38c0:	add	r0, r5, #8
    38c4:	add	r1, sp, #52	; 0x34
    38c8:	bl	0 <coda_cursor_get_read_type>
    38cc:	cmp	r0, #0
    38d0:	beq	38e4 <eval_integer+0x268>
    38d4:	mov	r0, r6
    38d8:	bl	0 <coda_set_option_perform_conversions>
    38dc:	mvn	r0, #0
    38e0:	b	53fc <eval_integer+0x1d80>
    38e4:	ldr	r2, [sp, #52]	; 0x34
    38e8:	cmp	r2, #7
    38ec:	bne	3928 <eval_integer+0x2ac>
    38f0:	add	r0, r5, #8
    38f4:	add	r1, sp, #160	; 0xa0
    38f8:	bl	0 <coda_cursor_read_uint64>
    38fc:	cmp	r0, #0
    3900:	beq	3914 <eval_integer+0x298>
    3904:	mov	r0, r6
    3908:	bl	0 <coda_set_option_perform_conversions>
    390c:	mvn	r0, #0
    3910:	b	53fc <eval_integer+0x1d80>
    3914:	ldr	r0, [sp, #160]	; 0xa0
    3918:	ldr	r2, [sp, #164]	; 0xa4
    391c:	str	r0, [r4]
    3920:	str	r2, [r4, #4]
    3924:	b	394c <eval_integer+0x2d0>
    3928:	add	r0, r5, #8
    392c:	mov	r1, r4
    3930:	bl	0 <coda_cursor_read_int64>
    3934:	cmp	r0, #0
    3938:	beq	394c <eval_integer+0x2d0>
    393c:	mov	r0, r6
    3940:	bl	0 <coda_set_option_perform_conversions>
    3944:	mvn	r0, #0
    3948:	b	53fc <eval_integer+0x1d80>
    394c:	mov	r0, r6
    3950:	bl	0 <coda_set_option_perform_conversions>
    3954:	add	r0, r5, #8
    3958:	add	r2, sp, #896	; 0x380
    395c:	mov	r3, r0
    3960:	mov	lr, #130	; 0x82
    3964:	ldr	ip, [r2], #4
    3968:	subs	lr, lr, #1
    396c:	str	ip, [r3], #4
    3970:	bne	3964 <eval_integer+0x2e8>
    3974:	b	53f8 <eval_integer+0x1d7c>
    3978:	ldr	r0, [r6, #16]
    397c:	ldr	r2, [r0, #4]
    3980:	cmp	r2, #0
    3984:	beq	3a14 <eval_integer+0x398>
    3988:	ldr	r1, [r6, #16]
    398c:	add	r2, sp, #60	; 0x3c
    3990:	add	r3, sp, #64	; 0x40
    3994:	add	r0, sp, #68	; 0x44
    3998:	str	r0, [sp]
    399c:	mov	r0, r5
    39a0:	bl	5444 <eval_string>
    39a4:	cmp	r0, #0
    39a8:	beq	39b4 <eval_integer+0x338>
    39ac:	mvn	r0, #0
    39b0:	b	53fc <eval_integer+0x1d80>
    39b4:	ldr	r1, [sp, #64]	; 0x40
    39b8:	cmp	r1, #0
    39bc:	bne	39d4 <eval_integer+0x358>
    39c0:	mvn	r0, #102	; 0x66
    39c4:	ldr	r1, [pc, #3496]	; 4774 <eval_integer+0x10f8>
    39c8:	bl	0 <coda_set_error>
    39cc:	mvn	r0, #0
    39d0:	b	53fc <eval_integer+0x1d80>
    39d4:	ldr	ip, [sp, #68]	; 0x44
    39d8:	ldr	r3, [sp, #60]	; 0x3c
    39dc:	add	r0, ip, r3
    39e0:	ldr	r1, [sp, #64]	; 0x40
    39e4:	mov	r3, #0
    39e8:	mov	r2, r4
    39ec:	bl	0 <coda_ascii_parse_int64>
    39f0:	cmp	r0, #0
    39f4:	bge	3a08 <eval_integer+0x38c>
    39f8:	ldr	r0, [sp, #68]	; 0x44
    39fc:	bl	0 <free>
    3a00:	mvn	r0, #0
    3a04:	b	53fc <eval_integer+0x1d80>
    3a08:	ldr	r0, [sp, #68]	; 0x44
    3a0c:	bl	0 <free>
    3a10:	b	53f8 <eval_integer+0x1d7c>
    3a14:	ldr	r1, [r6, #16]
    3a18:	add	r2, sp, #56	; 0x38
    3a1c:	mov	r0, r5
    3a20:	bl	e80 <eval_boolean>
    3a24:	cmp	r0, #0
    3a28:	beq	3a34 <eval_integer+0x3b8>
    3a2c:	mvn	r0, #0
    3a30:	b	53fc <eval_integer+0x1d80>
    3a34:	ldr	r1, [sp, #56]	; 0x38
    3a38:	asr	r2, r1, #31
    3a3c:	str	r1, [r4]
    3a40:	str	r2, [r4, #4]
    3a44:	b	53f8 <eval_integer+0x1d7c>
    3a48:	ldr	r1, [r6, #16]
    3a4c:	mov	r2, r4
    3a50:	mov	r0, r5
    3a54:	bl	367c <eval_integer>
    3a58:	cmp	r0, #0
    3a5c:	beq	3a68 <eval_integer+0x3ec>
    3a60:	mvn	r0, #0
    3a64:	b	53fc <eval_integer+0x1d80>
    3a68:	ldr	r1, [r4]
    3a6c:	ldr	ip, [r4, #4]
    3a70:	rsbs	r3, r1, #0
    3a74:	rsc	ip, ip, #0
    3a78:	str	r3, [r4]
    3a7c:	str	ip, [r4, #4]
    3a80:	b	53f8 <eval_integer+0x1d7c>
    3a84:	ldr	r1, [r6, #16]
    3a88:	mov	r2, r4
    3a8c:	mov	r0, r5
    3a90:	bl	367c <eval_integer>
    3a94:	cmp	r0, #0
    3a98:	beq	3aa4 <eval_integer+0x428>
    3a9c:	mvn	r0, #0
    3aa0:	b	53fc <eval_integer+0x1d80>
    3aa4:	ldr	r2, [r4, #4]
    3aa8:	cmp	r2, #0
    3aac:	bge	3ac4 <eval_integer+0x448>
    3ab0:	ldr	r1, [r4]
    3ab4:	ldr	r2, [r4, #4]
    3ab8:	rsbs	r0, r1, #0
    3abc:	rsc	r3, r2, #0
    3ac0:	b	3acc <eval_integer+0x450>
    3ac4:	ldr	r0, [r4]
    3ac8:	ldr	r3, [r4, #4]
    3acc:	str	r0, [r4]
    3ad0:	str	r3, [r4, #4]
    3ad4:	b	53f8 <eval_integer+0x1d7c>
    3ad8:	ldr	r1, [r6, #16]
    3adc:	add	r2, sp, #168	; 0xa8
    3ae0:	mov	r0, r5
    3ae4:	bl	367c <eval_integer>
    3ae8:	cmp	r0, #0
    3aec:	beq	3af8 <eval_integer+0x47c>
    3af0:	mvn	r0, #0
    3af4:	b	53fc <eval_integer+0x1d80>
    3af8:	ldr	r1, [r6, #20]
    3afc:	add	r2, sp, #176	; 0xb0
    3b00:	mov	r0, r5
    3b04:	bl	367c <eval_integer>
    3b08:	cmp	r0, #0
    3b0c:	beq	3b18 <eval_integer+0x49c>
    3b10:	mvn	r0, #0
    3b14:	b	53fc <eval_integer+0x1d80>
    3b18:	ldr	r2, [sp, #168]	; 0xa8
    3b1c:	ldr	r3, [sp, #172]	; 0xac
    3b20:	ldr	r0, [sp, #176]	; 0xb0
    3b24:	ldr	ip, [sp, #180]	; 0xb4
    3b28:	adds	r1, r2, r0
    3b2c:	adc	ip, r3, ip
    3b30:	str	r1, [r4]
    3b34:	str	ip, [r4, #4]
    3b38:	b	53f8 <eval_integer+0x1d7c>
    3b3c:	ldr	r1, [r6, #16]
    3b40:	add	r2, sp, #184	; 0xb8
    3b44:	mov	r0, r5
    3b48:	bl	367c <eval_integer>
    3b4c:	cmp	r0, #0
    3b50:	beq	3b5c <eval_integer+0x4e0>
    3b54:	mvn	r0, #0
    3b58:	b	53fc <eval_integer+0x1d80>
    3b5c:	ldr	r1, [r6, #20]
    3b60:	add	r2, sp, #192	; 0xc0
    3b64:	mov	r0, r5
    3b68:	bl	367c <eval_integer>
    3b6c:	cmp	r0, #0
    3b70:	beq	3b7c <eval_integer+0x500>
    3b74:	mvn	r0, #0
    3b78:	b	53fc <eval_integer+0x1d80>
    3b7c:	ldr	r2, [sp, #184]	; 0xb8
    3b80:	ldr	r1, [sp, #188]	; 0xbc
    3b84:	ldr	r3, [sp, #192]	; 0xc0
    3b88:	ldr	r0, [sp, #196]	; 0xc4
    3b8c:	subs	lr, r2, r3
    3b90:	sbc	r1, r1, r0
    3b94:	mov	r0, lr
    3b98:	str	r0, [r4]
    3b9c:	str	r1, [r4, #4]
    3ba0:	b	53f8 <eval_integer+0x1d7c>
    3ba4:	ldr	r1, [r6, #16]
    3ba8:	add	r2, sp, #200	; 0xc8
    3bac:	mov	r0, r5
    3bb0:	bl	367c <eval_integer>
    3bb4:	cmp	r0, #0
    3bb8:	beq	3bc4 <eval_integer+0x548>
    3bbc:	mvn	r0, #0
    3bc0:	b	53fc <eval_integer+0x1d80>
    3bc4:	ldr	r1, [r6, #20]
    3bc8:	add	r2, sp, #208	; 0xd0
    3bcc:	mov	r0, r5
    3bd0:	bl	367c <eval_integer>
    3bd4:	cmp	r0, #0
    3bd8:	beq	3be4 <eval_integer+0x568>
    3bdc:	mvn	r0, #0
    3be0:	b	53fc <eval_integer+0x1d80>
    3be4:	ldr	ip, [sp, #200]	; 0xc8
    3be8:	ldr	r2, [sp, #204]	; 0xcc
    3bec:	ldr	r3, [sp, #208]	; 0xd0
    3bf0:	ldr	r1, [sp, #212]	; 0xd4
    3bf4:	umull	r0, r5, ip, r3
    3bf8:	mla	ip, ip, r1, r5
    3bfc:	mla	r2, r2, r3, ip
    3c00:	str	r0, [r4]
    3c04:	str	r2, [r4, #4]
    3c08:	b	53f8 <eval_integer+0x1d7c>
    3c0c:	ldr	r1, [r6, #16]
    3c10:	add	r2, sp, #216	; 0xd8
    3c14:	mov	r0, r5
    3c18:	bl	367c <eval_integer>
    3c1c:	cmp	r0, #0
    3c20:	beq	3c2c <eval_integer+0x5b0>
    3c24:	mvn	r0, #0
    3c28:	b	53fc <eval_integer+0x1d80>
    3c2c:	ldr	r1, [r6, #20]
    3c30:	add	r2, sp, #224	; 0xe0
    3c34:	mov	r0, r5
    3c38:	bl	367c <eval_integer>
    3c3c:	cmp	r0, #0
    3c40:	beq	3c4c <eval_integer+0x5d0>
    3c44:	mvn	r0, #0
    3c48:	b	53fc <eval_integer+0x1d80>
    3c4c:	ldr	r1, [sp, #224]	; 0xe0
    3c50:	ldr	r3, [sp, #228]	; 0xe4
    3c54:	orr	r3, r3, r1
    3c58:	cmp	r3, #0
    3c5c:	bne	3c74 <eval_integer+0x5f8>
    3c60:	mvn	r0, #400	; 0x190
    3c64:	ldr	r1, [pc, #2804]	; 4760 <eval_integer+0x10e4>
    3c68:	bl	0 <coda_set_error>
    3c6c:	mvn	r0, #0
    3c70:	b	53fc <eval_integer+0x1d80>
    3c74:	ldr	r0, [sp, #216]	; 0xd8
    3c78:	ldr	r1, [sp, #220]	; 0xdc
    3c7c:	ldr	r2, [sp, #224]	; 0xe0
    3c80:	ldr	r3, [sp, #228]	; 0xe4
    3c84:	bl	0 <__compcert_i64_sdiv>
    3c88:	str	r0, [r4]
    3c8c:	str	r1, [r4, #4]
    3c90:	b	53f8 <eval_integer+0x1d7c>
    3c94:	ldr	r1, [r6, #16]
    3c98:	add	r2, sp, #232	; 0xe8
    3c9c:	mov	r0, r5
    3ca0:	bl	367c <eval_integer>
    3ca4:	cmp	r0, #0
    3ca8:	beq	3cb4 <eval_integer+0x638>
    3cac:	mvn	r0, #0
    3cb0:	b	53fc <eval_integer+0x1d80>
    3cb4:	ldr	r1, [r6, #20]
    3cb8:	add	r2, sp, #240	; 0xf0
    3cbc:	mov	r0, r5
    3cc0:	bl	367c <eval_integer>
    3cc4:	cmp	r0, #0
    3cc8:	beq	3cd4 <eval_integer+0x658>
    3ccc:	mvn	r0, #0
    3cd0:	b	53fc <eval_integer+0x1d80>
    3cd4:	ldr	r2, [sp, #240]	; 0xf0
    3cd8:	ldr	r3, [sp, #244]	; 0xf4
    3cdc:	orr	r0, r3, r2
    3ce0:	cmp	r0, #0
    3ce4:	bne	3cfc <eval_integer+0x680>
    3ce8:	mvn	r0, #400	; 0x190
    3cec:	ldr	r1, [pc, #2672]	; 4764 <eval_integer+0x10e8>
    3cf0:	bl	0 <coda_set_error>
    3cf4:	mvn	r0, #0
    3cf8:	b	53fc <eval_integer+0x1d80>
    3cfc:	ldr	r0, [sp, #232]	; 0xe8
    3d00:	ldr	r1, [sp, #236]	; 0xec
    3d04:	ldr	r2, [sp, #240]	; 0xf0
    3d08:	ldr	r3, [sp, #244]	; 0xf4
    3d0c:	bl	0 <__compcert_i64_smod>
    3d10:	str	r0, [r4]
    3d14:	str	r1, [r4, #4]
    3d18:	b	53f8 <eval_integer+0x1d7c>
    3d1c:	ldr	r1, [r6, #16]
    3d20:	add	r2, sp, #248	; 0xf8
    3d24:	mov	r0, r5
    3d28:	bl	367c <eval_integer>
    3d2c:	cmp	r0, #0
    3d30:	beq	3d3c <eval_integer+0x6c0>
    3d34:	mvn	r0, #0
    3d38:	b	53fc <eval_integer+0x1d80>
    3d3c:	ldr	r1, [r6, #20]
    3d40:	add	r2, sp, #256	; 0x100
    3d44:	mov	r0, r5
    3d48:	bl	367c <eval_integer>
    3d4c:	cmp	r0, #0
    3d50:	beq	3d5c <eval_integer+0x6e0>
    3d54:	mvn	r0, #0
    3d58:	b	53fc <eval_integer+0x1d80>
    3d5c:	ldr	r0, [sp, #248]	; 0xf8
    3d60:	ldr	r1, [sp, #252]	; 0xfc
    3d64:	ldr	r3, [sp, #256]	; 0x100
    3d68:	ldr	ip, [sp, #260]	; 0x104
    3d6c:	and	r2, r1, ip
    3d70:	and	r1, r0, r3
    3d74:	str	r1, [r4]
    3d78:	str	r2, [r4, #4]
    3d7c:	b	53f8 <eval_integer+0x1d7c>
    3d80:	ldr	r1, [r6, #16]
    3d84:	add	r2, sp, #264	; 0x108
    3d88:	mov	r0, r5
    3d8c:	bl	367c <eval_integer>
    3d90:	cmp	r0, #0
    3d94:	beq	3da0 <eval_integer+0x724>
    3d98:	mvn	r0, #0
    3d9c:	b	53fc <eval_integer+0x1d80>
    3da0:	ldr	r1, [r6, #20]
    3da4:	add	r2, sp, #272	; 0x110
    3da8:	mov	r0, r5
    3dac:	bl	367c <eval_integer>
    3db0:	cmp	r0, #0
    3db4:	beq	3dc0 <eval_integer+0x744>
    3db8:	mvn	r0, #0
    3dbc:	b	53fc <eval_integer+0x1d80>
    3dc0:	ldr	r0, [sp, #264]	; 0x108
    3dc4:	ldr	r2, [sp, #268]	; 0x10c
    3dc8:	ldr	ip, [sp, #272]	; 0x110
    3dcc:	ldr	r1, [sp, #276]	; 0x114
    3dd0:	orr	r1, r2, r1
    3dd4:	orr	r0, r0, ip
    3dd8:	str	r0, [r4]
    3ddc:	str	r1, [r4, #4]
    3de0:	b	53f8 <eval_integer+0x1d7c>
    3de4:	ldr	r1, [r6, #16]
    3de8:	add	r2, sp, #280	; 0x118
    3dec:	mov	r0, r5
    3df0:	bl	367c <eval_integer>
    3df4:	cmp	r0, #0
    3df8:	beq	3e04 <eval_integer+0x788>
    3dfc:	mvn	r0, #0
    3e00:	b	53fc <eval_integer+0x1d80>
    3e04:	ldr	r1, [r6, #20]
    3e08:	add	r2, sp, #288	; 0x120
    3e0c:	mov	r0, r5
    3e10:	bl	367c <eval_integer>
    3e14:	cmp	r0, #0
    3e18:	beq	3e24 <eval_integer+0x7a8>
    3e1c:	mvn	r0, #0
    3e20:	b	53fc <eval_integer+0x1d80>
    3e24:	ldr	ip, [sp, #280]	; 0x118
    3e28:	ldr	r2, [sp, #284]	; 0x11c
    3e2c:	ldr	r0, [sp, #288]	; 0x120
    3e30:	ldr	r1, [sp, #292]	; 0x124
    3e34:	cmp	r2, r1
    3e38:	bne	3e48 <eval_integer+0x7cc>
    3e3c:	cmp	ip, r0
    3e40:	bhi	3e5c <eval_integer+0x7e0>
    3e44:	b	3e50 <eval_integer+0x7d4>
    3e48:	cmp	r2, r1
    3e4c:	bgt	3e5c <eval_integer+0x7e0>
    3e50:	ldr	r0, [sp, #288]	; 0x120
    3e54:	ldr	r2, [sp, #292]	; 0x124
    3e58:	b	3e64 <eval_integer+0x7e8>
    3e5c:	ldr	r0, [sp, #280]	; 0x118
    3e60:	ldr	r2, [sp, #284]	; 0x11c
    3e64:	str	r0, [r4]
    3e68:	str	r2, [r4, #4]
    3e6c:	b	53f8 <eval_integer+0x1d7c>
    3e70:	ldr	r1, [r6, #16]
    3e74:	add	r2, sp, #296	; 0x128
    3e78:	mov	r0, r5
    3e7c:	bl	367c <eval_integer>
    3e80:	cmp	r0, #0
    3e84:	beq	3e90 <eval_integer+0x814>
    3e88:	mvn	r0, #0
    3e8c:	b	53fc <eval_integer+0x1d80>
    3e90:	ldr	r1, [r6, #20]
    3e94:	add	r2, sp, #304	; 0x130
    3e98:	mov	r0, r5
    3e9c:	bl	367c <eval_integer>
    3ea0:	cmp	r0, #0
    3ea4:	beq	3eb0 <eval_integer+0x834>
    3ea8:	mvn	r0, #0
    3eac:	b	53fc <eval_integer+0x1d80>
    3eb0:	ldr	r1, [sp, #296]	; 0x128
    3eb4:	ldr	r3, [sp, #300]	; 0x12c
    3eb8:	ldr	r0, [sp, #304]	; 0x130
    3ebc:	ldr	ip, [sp, #308]	; 0x134
    3ec0:	cmp	r3, ip
    3ec4:	bne	3ed4 <eval_integer+0x858>
    3ec8:	cmp	r1, r0
    3ecc:	bcc	3ee8 <eval_integer+0x86c>
    3ed0:	b	3edc <eval_integer+0x860>
    3ed4:	cmp	r3, ip
    3ed8:	blt	3ee8 <eval_integer+0x86c>
    3edc:	ldr	r0, [sp, #304]	; 0x130
    3ee0:	ldr	r2, [sp, #308]	; 0x134
    3ee4:	b	3ef0 <eval_integer+0x874>
    3ee8:	ldr	r0, [sp, #296]	; 0x128
    3eec:	ldr	r2, [sp, #300]	; 0x12c
    3ef0:	str	r0, [r4]
    3ef4:	str	r2, [r4, #4]
    3ef8:	b	53f8 <eval_integer+0x1d7c>
    3efc:	ldr	r1, [r6, #16]
    3f00:	add	r2, sp, #72	; 0x48
    3f04:	mov	r0, r5
    3f08:	bl	e80 <eval_boolean>
    3f0c:	cmp	r0, #0
    3f10:	beq	3f1c <eval_integer+0x8a0>
    3f14:	mvn	r0, #0
    3f18:	b	53fc <eval_integer+0x1d80>
    3f1c:	ldr	ip, [sp, #72]	; 0x48
    3f20:	cmp	ip, #0
    3f24:	bne	3f48 <eval_integer+0x8cc>
    3f28:	ldr	r1, [r6, #24]
    3f2c:	mov	r2, r4
    3f30:	mov	r0, r5
    3f34:	bl	367c <eval_integer>
    3f38:	cmp	r0, #0
    3f3c:	beq	53f8 <eval_integer+0x1d7c>
    3f40:	mvn	r0, #0
    3f44:	b	53fc <eval_integer+0x1d80>
    3f48:	ldr	r1, [r6, #20]
    3f4c:	mov	r2, r4
    3f50:	mov	r0, r5
    3f54:	bl	367c <eval_integer>
    3f58:	cmp	r0, #0
    3f5c:	beq	53f8 <eval_integer+0x1d7c>
    3f60:	mvn	r0, #0
    3f64:	b	53fc <eval_integer+0x1d80>
    3f68:	ldr	r2, [r5]
    3f6c:	cmp	r2, #0
    3f70:	bne	3f88 <eval_integer+0x90c>
    3f74:	ldr	r0, [pc, #2028]	; 4768 <eval_integer+0x10ec>
    3f78:	ldr	r1, [pc, #2040]	; 4778 <eval_integer+0x10fc>
    3f7c:	movw	r2, #2194	; 0x892
    3f80:	ldr	r3, [pc, #2024]	; 4770 <eval_integer+0x10f4>
    3f84:	bl	0 <__assert_fail>
    3f88:	add	r3, r5, #8
    3f8c:	mov	r2, r3
    3f90:	add	r3, sp, #392	; 0x188
    3f94:	add	r3, r3, #1024	; 0x400
    3f98:	mov	lr, #130	; 0x82
    3f9c:	ldr	ip, [r2], #4
    3fa0:	subs	lr, lr, #1
    3fa4:	str	ip, [r3], #4
    3fa8:	bne	3f9c <eval_integer+0x920>
    3fac:	ldr	r1, [r6, #16]
    3fb0:	mov	r0, r5
    3fb4:	bl	7608 <eval_cursor>
    3fb8:	cmp	r0, #0
    3fbc:	beq	3fc8 <eval_integer+0x94c>
    3fc0:	mvn	r0, #0
    3fc4:	b	53fc <eval_integer+0x1d80>
    3fc8:	add	r0, r5, #8
    3fcc:	add	r1, sp, #76	; 0x4c
    3fd0:	bl	0 <coda_cursor_get_num_elements>
    3fd4:	cmp	r0, #0
    3fd8:	beq	3fe4 <eval_integer+0x968>
    3fdc:	mvn	r0, #0
    3fe0:	b	53fc <eval_integer+0x1d80>
    3fe4:	mov	r3, #0
    3fe8:	mov	r2, #0
    3fec:	str	r2, [r4]
    3ff0:	str	r3, [r4, #4]
    3ff4:	ldr	r1, [sp, #76]	; 0x4c
    3ff8:	cmp	r1, #0
    3ffc:	ble	40a4 <eval_integer+0xa28>
    4000:	add	r0, r5, #8
    4004:	bl	0 <coda_cursor_goto_first_array_element>
    4008:	cmp	r0, #0
    400c:	beq	4018 <eval_integer+0x99c>
    4010:	mvn	r0, #0
    4014:	b	53fc <eval_integer+0x1d80>
    4018:	mov	r7, #0
    401c:	ldr	r2, [sp, #76]	; 0x4c
    4020:	cmp	r7, r2
    4024:	bge	40a4 <eval_integer+0xa28>
    4028:	ldr	r1, [r6, #20]
    402c:	add	r2, sp, #80	; 0x50
    4030:	mov	r0, r5
    4034:	bl	e80 <eval_boolean>
    4038:	cmp	r0, #0
    403c:	beq	4048 <eval_integer+0x9cc>
    4040:	mvn	r0, #0
    4044:	b	53fc <eval_integer+0x1d80>
    4048:	ldr	ip, [sp, #80]	; 0x50
    404c:	cmp	ip, #0
    4050:	beq	4074 <eval_integer+0x9f8>
    4054:	ldr	r0, [r4]
    4058:	ldr	r1, [r4, #4]
    405c:	mov	ip, #0
    4060:	mov	r3, #1
    4064:	adds	r2, r0, r3
    4068:	adc	r1, r1, ip
    406c:	str	r2, [r4]
    4070:	str	r1, [r4, #4]
    4074:	ldr	r1, [sp, #76]	; 0x4c
    4078:	sub	r0, r1, #1
    407c:	cmp	r7, r0
    4080:	bge	409c <eval_integer+0xa20>
    4084:	add	r0, r5, #8
    4088:	bl	0 <coda_cursor_goto_next_array_element>
    408c:	cmp	r0, #0
    4090:	beq	409c <eval_integer+0xa20>
    4094:	mvn	r0, #0
    4098:	b	53fc <eval_integer+0x1d80>
    409c:	add	r7, r7, #1
    40a0:	b	401c <eval_integer+0x9a0>
    40a4:	add	r0, r5, #8
    40a8:	add	r2, sp, #392	; 0x188
    40ac:	add	r2, r2, #1024	; 0x400
    40b0:	mov	r3, r0
    40b4:	mov	lr, #130	; 0x82
    40b8:	ldr	ip, [r2], #4
    40bc:	subs	lr, lr, #1
    40c0:	str	ip, [r3], #4
    40c4:	bne	40b8 <eval_integer+0xa3c>
    40c8:	b	53f8 <eval_integer+0x1d7c>
    40cc:	ldr	ip, [r5]
    40d0:	cmp	ip, #0
    40d4:	bne	40ec <eval_integer+0xa70>
    40d8:	ldr	r0, [pc, #1672]	; 4768 <eval_integer+0x10ec>
    40dc:	ldr	r1, [pc, #1684]	; 4778 <eval_integer+0x10fc>
    40e0:	movw	r2, #2242	; 0x8c2
    40e4:	ldr	r3, [pc, #1668]	; 4770 <eval_integer+0x10f4>
    40e8:	bl	0 <__assert_fail>
    40ec:	add	r3, r5, #8
    40f0:	mov	r2, r3
    40f4:	add	r3, sp, #1936	; 0x790
    40f8:	mov	lr, #130	; 0x82
    40fc:	ldr	ip, [r2], #4
    4100:	subs	lr, lr, #1
    4104:	str	ip, [r3], #4
    4108:	bne	40fc <eval_integer+0xa80>
    410c:	ldr	r1, [r6, #16]
    4110:	mov	r0, r5
    4114:	bl	7608 <eval_cursor>
    4118:	cmp	r0, #0
    411c:	beq	4128 <eval_integer+0xaac>
    4120:	mvn	r0, #0
    4124:	b	53fc <eval_integer+0x1d80>
    4128:	add	r0, r5, #8
    412c:	add	r1, sp, #84	; 0x54
    4130:	bl	0 <coda_cursor_get_num_elements>
    4134:	cmp	r0, #0
    4138:	beq	4144 <eval_integer+0xac8>
    413c:	mvn	r0, #0
    4140:	b	53fc <eval_integer+0x1d80>
    4144:	mov	r0, #0
    4148:	mov	ip, #0
    414c:	str	ip, [r4]
    4150:	str	r0, [r4, #4]
    4154:	ldr	r3, [sp, #84]	; 0x54
    4158:	cmp	r3, #0
    415c:	ble	41f8 <eval_integer+0xb7c>
    4160:	add	r0, r5, #8
    4164:	bl	0 <coda_cursor_goto_first_array_element>
    4168:	cmp	r0, #0
    416c:	beq	4178 <eval_integer+0xafc>
    4170:	mvn	r0, #0
    4174:	b	53fc <eval_integer+0x1d80>
    4178:	mov	r7, #0
    417c:	ldr	ip, [sp, #84]	; 0x54
    4180:	cmp	r7, ip
    4184:	bge	41f8 <eval_integer+0xb7c>
    4188:	ldr	r1, [r6, #20]
    418c:	add	r2, sp, #312	; 0x138
    4190:	mov	r0, r5
    4194:	bl	367c <eval_integer>
    4198:	cmp	r0, #0
    419c:	beq	41a8 <eval_integer+0xb2c>
    41a0:	mvn	r0, #0
    41a4:	b	53fc <eval_integer+0x1d80>
    41a8:	ldr	r0, [r4]
    41ac:	ldr	r2, [r4, #4]
    41b0:	ldr	ip, [sp, #312]	; 0x138
    41b4:	ldr	r3, [sp, #316]	; 0x13c
    41b8:	adds	r0, r0, ip
    41bc:	adc	r1, r2, r3
    41c0:	str	r0, [r4]
    41c4:	str	r1, [r4, #4]
    41c8:	ldr	r3, [sp, #84]	; 0x54
    41cc:	sub	r3, r3, #1
    41d0:	cmp	r7, r3
    41d4:	bge	41f0 <eval_integer+0xb74>
    41d8:	add	r0, r5, #8
    41dc:	bl	0 <coda_cursor_goto_next_array_element>
    41e0:	cmp	r0, #0
    41e4:	beq	41f0 <eval_integer+0xb74>
    41e8:	mvn	r0, #0
    41ec:	b	53fc <eval_integer+0x1d80>
    41f0:	add	r7, r7, #1
    41f4:	b	417c <eval_integer+0xb00>
    41f8:	add	r0, r5, #8
    41fc:	add	r2, sp, #1936	; 0x790
    4200:	mov	r3, r0
    4204:	mov	lr, #130	; 0x82
    4208:	ldr	ip, [r2], #4
    420c:	subs	lr, lr, #1
    4210:	str	ip, [r3], #4
    4214:	bne	4208 <eval_integer+0xb8c>
    4218:	b	53f8 <eval_integer+0x1d7c>
    421c:	ldr	r2, [r5]
    4220:	cmp	r2, #0
    4224:	bne	423c <eval_integer+0xbc0>
    4228:	ldr	r0, [pc, #1336]	; 4768 <eval_integer+0x10ec>
    422c:	ldr	r1, [pc, #1348]	; 4778 <eval_integer+0x10fc>
    4230:	movw	r2, #2287	; 0x8ef
    4234:	ldr	r3, [pc, #1332]	; 4770 <eval_integer+0x10f4>
    4238:	bl	0 <__assert_fail>
    423c:	add	r1, r5, #8
    4240:	mov	r2, r1
    4244:	add	r3, sp, #408	; 0x198
    4248:	add	r3, r3, #2048	; 0x800
    424c:	mov	lr, #130	; 0x82
    4250:	ldr	ip, [r2], #4
    4254:	subs	lr, lr, #1
    4258:	str	ip, [r3], #4
    425c:	bne	4250 <eval_integer+0xbd4>
    4260:	ldr	r1, [r6, #16]
    4264:	mov	r0, r5
    4268:	bl	7608 <eval_cursor>
    426c:	cmp	r0, #0
    4270:	beq	427c <eval_integer+0xc00>
    4274:	mvn	r0, #0
    4278:	b	53fc <eval_integer+0x1d80>
    427c:	add	r0, r5, #8
    4280:	add	r1, sp, #88	; 0x58
    4284:	bl	0 <coda_cursor_get_num_elements>
    4288:	cmp	r0, #0
    428c:	beq	4298 <eval_integer+0xc1c>
    4290:	mvn	r0, #0
    4294:	b	53fc <eval_integer+0x1d80>
    4298:	mov	r3, #0
    429c:	mov	r2, #0
    42a0:	str	r2, [r4]
    42a4:	str	r3, [r4, #4]
    42a8:	ldr	r2, [sp, #88]	; 0x58
    42ac:	cmp	r2, #0
    42b0:	ble	4388 <eval_integer+0xd0c>
    42b4:	add	r0, r5, #8
    42b8:	bl	0 <coda_cursor_goto_first_array_element>
    42bc:	cmp	r0, #0
    42c0:	beq	42cc <eval_integer+0xc50>
    42c4:	mvn	r0, #0
    42c8:	b	53fc <eval_integer+0x1d80>
    42cc:	mov	r7, #0
    42d0:	ldr	ip, [sp, #88]	; 0x58
    42d4:	cmp	r7, ip
    42d8:	bge	4388 <eval_integer+0xd0c>
    42dc:	ldr	r1, [r6, #20]
    42e0:	add	r2, sp, #320	; 0x140
    42e4:	mov	r0, r5
    42e8:	bl	367c <eval_integer>
    42ec:	cmp	r0, #0
    42f0:	beq	42fc <eval_integer+0xc80>
    42f4:	mvn	r0, #0
    42f8:	b	53fc <eval_integer+0x1d80>
    42fc:	cmp	r7, #0
    4300:	beq	433c <eval_integer+0xcc0>
    4304:	ldr	r3, [sp, #320]	; 0x140
    4308:	ldr	ip, [sp, #324]	; 0x144
    430c:	ldr	r2, [r4]
    4310:	ldr	r1, [r4, #4]
    4314:	cmp	ip, r1
    4318:	bne	432c <eval_integer+0xcb0>
    431c:	cmp	r3, r2
    4320:	movhi	r0, #1
    4324:	movls	r0, #0
    4328:	b	4340 <eval_integer+0xcc4>
    432c:	cmp	ip, r1
    4330:	movgt	r0, #1
    4334:	movle	r0, #0
    4338:	b	4340 <eval_integer+0xcc4>
    433c:	mov	r0, #1
    4340:	cmp	r0, #0
    4344:	beq	4358 <eval_integer+0xcdc>
    4348:	ldr	r0, [sp, #320]	; 0x140
    434c:	ldr	ip, [sp, #324]	; 0x144
    4350:	str	r0, [r4]
    4354:	str	ip, [r4, #4]
    4358:	ldr	r2, [sp, #88]	; 0x58
    435c:	sub	r3, r2, #1
    4360:	cmp	r7, r3
    4364:	bge	4380 <eval_integer+0xd04>
    4368:	add	r0, r5, #8
    436c:	bl	0 <coda_cursor_goto_next_array_element>
    4370:	cmp	r0, #0
    4374:	beq	4380 <eval_integer+0xd04>
    4378:	mvn	r0, #0
    437c:	b	53fc <eval_integer+0x1d80>
    4380:	add	r7, r7, #1
    4384:	b	42d0 <eval_integer+0xc54>
    4388:	add	r0, r5, #8
    438c:	add	r2, sp, #408	; 0x198
    4390:	add	r2, r2, #2048	; 0x800
    4394:	mov	r3, r0
    4398:	mov	lr, #130	; 0x82
    439c:	ldr	ip, [r2], #4
    43a0:	subs	lr, lr, #1
    43a4:	str	ip, [r3], #4
    43a8:	bne	439c <eval_integer+0xd20>
    43ac:	b	53f8 <eval_integer+0x1d7c>
    43b0:	ldr	r3, [r5]
    43b4:	cmp	r3, #0
    43b8:	bne	43d0 <eval_integer+0xd54>
    43bc:	ldr	r0, [pc, #932]	; 4768 <eval_integer+0x10ec>
    43c0:	ldr	r1, [pc, #944]	; 4778 <eval_integer+0x10fc>
    43c4:	movw	r2, #2335	; 0x91f
    43c8:	ldr	r3, [pc, #928]	; 4770 <eval_integer+0x10f4>
    43cc:	bl	0 <__assert_fail>
    43d0:	add	r0, r5, #8
    43d4:	mov	r2, r0
    43d8:	add	r3, sp, #2976	; 0xba0
    43dc:	mov	lr, #130	; 0x82
    43e0:	ldr	ip, [r2], #4
    43e4:	subs	lr, lr, #1
    43e8:	str	ip, [r3], #4
    43ec:	bne	43e0 <eval_integer+0xd64>
    43f0:	ldr	r1, [r6, #16]
    43f4:	mov	r0, r5
    43f8:	bl	7608 <eval_cursor>
    43fc:	cmp	r0, #0
    4400:	beq	440c <eval_integer+0xd90>
    4404:	mvn	r0, #0
    4408:	b	53fc <eval_integer+0x1d80>
    440c:	add	r0, r5, #8
    4410:	add	r1, sp, #92	; 0x5c
    4414:	bl	0 <coda_cursor_get_num_elements>
    4418:	cmp	r0, #0
    441c:	beq	4428 <eval_integer+0xdac>
    4420:	mvn	r0, #0
    4424:	b	53fc <eval_integer+0x1d80>
    4428:	mov	r0, #0
    442c:	mov	ip, #0
    4430:	str	ip, [r4]
    4434:	str	r0, [r4, #4]
    4438:	ldr	r3, [sp, #92]	; 0x5c
    443c:	cmp	r3, #0
    4440:	ble	4518 <eval_integer+0xe9c>
    4444:	add	r0, r5, #8
    4448:	bl	0 <coda_cursor_goto_first_array_element>
    444c:	cmp	r0, #0
    4450:	beq	445c <eval_integer+0xde0>
    4454:	mvn	r0, #0
    4458:	b	53fc <eval_integer+0x1d80>
    445c:	mov	r7, #0
    4460:	ldr	r1, [sp, #92]	; 0x5c
    4464:	cmp	r7, r1
    4468:	bge	4518 <eval_integer+0xe9c>
    446c:	ldr	r1, [r6, #20]
    4470:	add	r2, sp, #328	; 0x148
    4474:	mov	r0, r5
    4478:	bl	367c <eval_integer>
    447c:	cmp	r0, #0
    4480:	beq	448c <eval_integer+0xe10>
    4484:	mvn	r0, #0
    4488:	b	53fc <eval_integer+0x1d80>
    448c:	cmp	r7, #0
    4490:	beq	44cc <eval_integer+0xe50>
    4494:	ldr	r2, [sp, #328]	; 0x148
    4498:	ldr	r0, [sp, #332]	; 0x14c
    449c:	ldr	r3, [r4]
    44a0:	ldr	ip, [r4, #4]
    44a4:	cmp	r0, ip
    44a8:	bne	44bc <eval_integer+0xe40>
    44ac:	cmp	r2, r3
    44b0:	movcc	r2, #1
    44b4:	movcs	r2, #0
    44b8:	b	44d0 <eval_integer+0xe54>
    44bc:	cmp	r0, ip
    44c0:	movlt	r2, #1
    44c4:	movge	r2, #0
    44c8:	b	44d0 <eval_integer+0xe54>
    44cc:	mov	r2, #1
    44d0:	cmp	r2, #0
    44d4:	beq	44e8 <eval_integer+0xe6c>
    44d8:	ldr	r1, [sp, #328]	; 0x148
    44dc:	ldr	r0, [sp, #332]	; 0x14c
    44e0:	str	r1, [r4]
    44e4:	str	r0, [r4, #4]
    44e8:	ldr	r1, [sp, #92]	; 0x5c
    44ec:	sub	r3, r1, #1
    44f0:	cmp	r7, r3
    44f4:	bge	4510 <eval_integer+0xe94>
    44f8:	add	r0, r5, #8
    44fc:	bl	0 <coda_cursor_goto_next_array_element>
    4500:	cmp	r0, #0
    4504:	beq	4510 <eval_integer+0xe94>
    4508:	mvn	r0, #0
    450c:	b	53fc <eval_integer+0x1d80>
    4510:	add	r7, r7, #1
    4514:	b	4460 <eval_integer+0xde4>
    4518:	add	r0, r5, #8
    451c:	add	r2, sp, #2976	; 0xba0
    4520:	mov	r3, r0
    4524:	mov	lr, #130	; 0x82
    4528:	ldr	ip, [r2], #4
    452c:	subs	lr, lr, #1
    4530:	str	ip, [r3], #4
    4534:	bne	4528 <eval_integer+0xeac>
    4538:	b	53f8 <eval_integer+0x1d7c>
    453c:	ldr	r0, [r5]
    4540:	cmp	r0, #0
    4544:	bne	455c <eval_integer+0xee0>
    4548:	ldr	r0, [pc, #536]	; 4768 <eval_integer+0x10ec>
    454c:	ldr	r1, [pc, #548]	; 4778 <eval_integer+0x10fc>
    4550:	movw	r2, #2383	; 0x94f
    4554:	ldr	r3, [pc, #532]	; 4770 <eval_integer+0x10f4>
    4558:	bl	0 <__assert_fail>
    455c:	add	ip, r5, #8
    4560:	mov	r2, ip
    4564:	add	r3, sp, #424	; 0x1a8
    4568:	add	r3, r3, #3072	; 0xc00
    456c:	mov	lr, #130	; 0x82
    4570:	ldr	ip, [r2], #4
    4574:	subs	lr, lr, #1
    4578:	str	ip, [r3], #4
    457c:	bne	4570 <eval_integer+0xef4>
    4580:	ldr	r1, [r6, #16]
    4584:	mov	r0, r5
    4588:	bl	7608 <eval_cursor>
    458c:	cmp	r0, #0
    4590:	beq	459c <eval_integer+0xf20>
    4594:	mvn	r0, #0
    4598:	b	53fc <eval_integer+0x1d80>
    459c:	add	r0, r5, #8
    45a0:	add	r1, sp, #96	; 0x60
    45a4:	bl	0 <coda_cursor_get_num_elements>
    45a8:	cmp	r0, #0
    45ac:	beq	45b8 <eval_integer+0xf3c>
    45b0:	mvn	r0, #0
    45b4:	b	53fc <eval_integer+0x1d80>
    45b8:	mov	r1, #0
    45bc:	mov	r0, #0
    45c0:	str	r0, [r4]
    45c4:	str	r1, [r4, #4]
    45c8:	ldr	r2, [sp, #96]	; 0x60
    45cc:	cmp	r2, #0
    45d0:	ble	4690 <eval_integer+0x1014>
    45d4:	add	r0, r5, #8
    45d8:	bl	0 <coda_cursor_goto_first_array_element>
    45dc:	cmp	r0, #0
    45e0:	beq	45ec <eval_integer+0xf70>
    45e4:	mvn	r0, #0
    45e8:	b	53fc <eval_integer+0x1d80>
    45ec:	mov	r7, #0
    45f0:	ldr	r1, [sp, #96]	; 0x60
    45f4:	cmp	r7, r1
    45f8:	bge	4690 <eval_integer+0x1014>
    45fc:	ldr	r1, [r6, #20]
    4600:	add	r2, sp, #100	; 0x64
    4604:	mov	r0, r5
    4608:	bl	e80 <eval_boolean>
    460c:	cmp	r0, #0
    4610:	beq	461c <eval_integer+0xfa0>
    4614:	mvn	r0, #0
    4618:	b	53fc <eval_integer+0x1d80>
    461c:	ldr	ip, [sp, #100]	; 0x64
    4620:	cmp	ip, #0
    4624:	beq	4660 <eval_integer+0xfe4>
    4628:	asr	r2, r7, #31
    462c:	str	r7, [r4]
    4630:	str	r2, [r4, #4]
    4634:	add	r0, r5, #8
    4638:	add	r2, sp, #424	; 0x1a8
    463c:	add	r2, r2, #3072	; 0xc00
    4640:	mov	r3, r0
    4644:	mov	lr, #130	; 0x82
    4648:	ldr	ip, [r2], #4
    464c:	subs	lr, lr, #1
    4650:	str	ip, [r3], #4
    4654:	bne	4648 <eval_integer+0xfcc>
    4658:	mov	r0, #0
    465c:	b	53fc <eval_integer+0x1d80>
    4660:	ldr	ip, [sp, #96]	; 0x60
    4664:	sub	r1, ip, #1
    4668:	cmp	r7, r1
    466c:	bge	4688 <eval_integer+0x100c>
    4670:	add	r0, r5, #8
    4674:	bl	0 <coda_cursor_goto_next_array_element>
    4678:	cmp	r0, #0
    467c:	beq	4688 <eval_integer+0x100c>
    4680:	mvn	r0, #0
    4684:	b	53fc <eval_integer+0x1d80>
    4688:	add	r7, r7, #1
    468c:	b	45f0 <eval_integer+0xf74>
    4690:	mvn	ip, #0
    4694:	mvn	r3, #0
    4698:	str	r3, [r4]
    469c:	str	ip, [r4, #4]
    46a0:	add	r0, r5, #8
    46a4:	add	r2, sp, #424	; 0x1a8
    46a8:	add	r2, r2, #3072	; 0xc00
    46ac:	mov	r3, r0
    46b0:	mov	lr, #130	; 0x82
    46b4:	ldr	ip, [r2], #4
    46b8:	subs	lr, lr, #1
    46bc:	str	ip, [r3], #4
    46c0:	bne	46b4 <eval_integer+0x1038>
    46c4:	b	53f8 <eval_integer+0x1d7c>
    46c8:	mov	r1, #0
    46cc:	str	r1, [sp, #104]	; 0x68
    46d0:	ldr	ip, [r5]
    46d4:	cmp	ip, #0
    46d8:	bne	46f0 <eval_integer+0x1074>
    46dc:	ldr	r0, [pc, #132]	; 4768 <eval_integer+0x10ec>
    46e0:	ldr	r1, [pc, #144]	; 4778 <eval_integer+0x10fc>
    46e4:	movw	r2, #2435	; 0x983
    46e8:	ldr	r3, [pc, #128]	; 4770 <eval_integer+0x10f4>
    46ec:	bl	0 <__assert_fail>
    46f0:	add	r3, r5, #8
    46f4:	mov	r2, r3
    46f8:	add	r3, sp, #4016	; 0xfb0
    46fc:	mov	lr, #130	; 0x82
    4700:	ldr	ip, [r2], #4
    4704:	subs	lr, lr, #1
    4708:	str	ip, [r3], #4
    470c:	bne	4700 <eval_integer+0x1084>
    4710:	ldr	r1, [r6, #16]
    4714:	mov	r0, r5
    4718:	bl	7608 <eval_cursor>
    471c:	cmp	r0, #0
    4720:	beq	472c <eval_integer+0x10b0>
    4724:	mvn	r0, #0
    4728:	b	53fc <eval_integer+0x1d80>
    472c:	ldr	ip, [pc, #56]	; 476c <eval_integer+0x10f0>
    4730:	ldr	r7, [ip]
    4734:	ldr	ip, [pc, #48]	; 476c <eval_integer+0x10f0>
    4738:	mov	r2, #0
    473c:	str	r2, [ip]
    4740:	add	r0, r5, #8
    4744:	bl	0 <coda_cursor_goto_first_array_element>
    4748:	cmp	r0, #0
    474c:	beq	477c <eval_integer+0x1100>
    4750:	ldr	r1, [pc, #20]	; 476c <eval_integer+0x10f0>
    4754:	str	r7, [r1]
    4758:	mvn	r0, #0
    475c:	b	53fc <eval_integer+0x1d80>
    4760:	.word	0x00000a05
    4764:	.word	0x000005d6
    4768:	.word	0x0000046b
    476c:	.word	0x00000000
    4770:	.word	0x00000d84
    4774:	.word	0x000000db
    4778:	.word	0x0000053b
    477c:	mov	r3, #0
    4780:	mov	r2, #0
    4784:	str	r2, [r4]
    4788:	str	r3, [r4, #4]
    478c:	ldr	ip, [sp, #104]	; 0x68
    4790:	cmp	ip, #0
    4794:	bne	4860 <eval_integer+0x11e4>
    4798:	ldr	r2, [r6, #24]
    479c:	cmp	r2, #0
    47a0:	beq	47cc <eval_integer+0x1150>
    47a4:	ldr	r1, [r6, #20]
    47a8:	add	r2, sp, #104	; 0x68
    47ac:	mov	r0, r5
    47b0:	bl	e80 <eval_boolean>
    47b4:	cmp	r0, #0
    47b8:	beq	47cc <eval_integer+0x1150>
    47bc:	ldr	ip, [pc, #3172]	; 5428 <eval_integer+0x1dac>
    47c0:	str	r7, [ip]
    47c4:	mvn	r0, #0
    47c8:	b	53fc <eval_integer+0x1d80>
    47cc:	ldr	r2, [sp, #104]	; 0x68
    47d0:	cmp	r2, #0
    47d4:	bne	484c <eval_integer+0x11d0>
    47d8:	ldr	r1, [r6, #20]
    47dc:	add	r2, sp, #104	; 0x68
    47e0:	mov	r0, r5
    47e4:	bl	e80 <eval_boolean>
    47e8:	cmp	r0, #0
    47ec:	beq	4800 <eval_integer+0x1184>
    47f0:	ldr	r2, [pc, #3120]	; 5428 <eval_integer+0x1dac>
    47f4:	str	r7, [r2]
    47f8:	mvn	r0, #0
    47fc:	b	53fc <eval_integer+0x1d80>
    4800:	ldr	r3, [sp, #104]	; 0x68
    4804:	cmp	r3, #0
    4808:	bne	478c <eval_integer+0x1110>
    480c:	ldr	r3, [r4]
    4810:	ldr	ip, [r4, #4]
    4814:	mov	r1, #0
    4818:	mov	r0, #1
    481c:	adds	r3, r3, r0
    4820:	adc	r2, ip, r1
    4824:	str	r3, [r4]
    4828:	str	r2, [r4, #4]
    482c:	add	r0, r5, #8
    4830:	bl	0 <coda_cursor_goto_next_array_element>
    4834:	cmp	r0, #0
    4838:	beq	478c <eval_integer+0x1110>
    483c:	ldr	r1, [pc, #3044]	; 5428 <eval_integer+0x1dac>
    4840:	str	r7, [r1]
    4844:	mvn	r0, #0
    4848:	b	53fc <eval_integer+0x1d80>
    484c:	mvn	r1, #0
    4850:	mvn	r0, #0
    4854:	str	r0, [r4]
    4858:	str	r1, [r4, #4]
    485c:	b	478c <eval_integer+0x1110>
    4860:	ldr	r1, [pc, #3008]	; 5428 <eval_integer+0x1dac>
    4864:	str	r7, [r1]
    4868:	add	r0, r5, #8
    486c:	add	r2, sp, #4016	; 0xfb0
    4870:	mov	r3, r0
    4874:	mov	lr, #130	; 0x82
    4878:	ldr	ip, [r2], #4
    487c:	subs	lr, lr, #1
    4880:	str	ip, [r3], #4
    4884:	bne	4878 <eval_integer+0x11fc>
    4888:	b	53f8 <eval_integer+0x1d7c>
    488c:	ldr	r3, [r6, #16]
    4890:	ldr	ip, [r3, #4]
    4894:	cmp	ip, #4
    4898:	bne	494c <eval_integer+0x12d0>
    489c:	ldr	r1, [r5]
    48a0:	cmp	r1, #0
    48a4:	bne	48bc <eval_integer+0x1240>
    48a8:	ldr	r0, [pc, #2932]	; 5424 <eval_integer+0x1da8>
    48ac:	ldr	r1, [pc, #2948]	; 5438 <eval_integer+0x1dbc>
    48b0:	movw	r2, #2491	; 0x9bb
    48b4:	ldr	r3, [pc, #2928]	; 542c <eval_integer+0x1db0>
    48b8:	bl	0 <__assert_fail>
    48bc:	add	r2, r5, #8
    48c0:	add	r3, sp, #440	; 0x1b8
    48c4:	add	r3, r3, #4096	; 0x1000
    48c8:	mov	lr, #130	; 0x82
    48cc:	ldr	ip, [r2], #4
    48d0:	subs	lr, lr, #1
    48d4:	str	ip, [r3], #4
    48d8:	bne	48cc <eval_integer+0x1250>
    48dc:	ldr	r1, [r6, #16]
    48e0:	mov	r0, r5
    48e4:	bl	7608 <eval_cursor>
    48e8:	cmp	r0, #0
    48ec:	beq	48f8 <eval_integer+0x127c>
    48f0:	mvn	r0, #0
    48f4:	b	53fc <eval_integer+0x1d80>
    48f8:	add	r0, r5, #8
    48fc:	add	r1, sp, #108	; 0x6c
    4900:	bl	0 <coda_cursor_get_string_length>
    4904:	cmp	r0, #0
    4908:	beq	4914 <eval_integer+0x1298>
    490c:	mvn	r0, #0
    4910:	b	53fc <eval_integer+0x1d80>
    4914:	ldr	r0, [sp, #108]	; 0x6c
    4918:	asr	r1, r0, #31
    491c:	str	r0, [r4]
    4920:	str	r1, [r4, #4]
    4924:	add	r0, r5, #8
    4928:	add	r2, sp, #440	; 0x1b8
    492c:	add	r2, r2, #4096	; 0x1000
    4930:	mov	r3, r0
    4934:	mov	lr, #130	; 0x82
    4938:	ldr	ip, [r2], #4
    493c:	subs	lr, lr, #1
    4940:	str	ip, [r3], #4
    4944:	bne	4938 <eval_integer+0x12bc>
    4948:	b	53f8 <eval_integer+0x1d7c>
    494c:	ldr	r1, [r6, #16]
    4950:	add	r2, sp, #112	; 0x70
    4954:	add	r3, sp, #116	; 0x74
    4958:	add	ip, sp, #120	; 0x78
    495c:	str	ip, [sp]
    4960:	mov	r0, r5
    4964:	bl	5444 <eval_string>
    4968:	cmp	r0, #0
    496c:	beq	4978 <eval_integer+0x12fc>
    4970:	mvn	r0, #0
    4974:	b	53fc <eval_integer+0x1d80>
    4978:	ldr	ip, [sp, #116]	; 0x74
    497c:	cmp	ip, #0
    4980:	ble	498c <eval_integer+0x1310>
    4984:	ldr	r0, [sp, #120]	; 0x78
    4988:	bl	0 <free>
    498c:	ldr	r2, [sp, #116]	; 0x74
    4990:	asr	r3, r2, #31
    4994:	str	r2, [r4]
    4998:	str	r3, [r4, #4]
    499c:	b	53f8 <eval_integer+0x1d7c>
    49a0:	ldr	ip, [r5]
    49a4:	cmp	ip, #0
    49a8:	bne	49c0 <eval_integer+0x1344>
    49ac:	ldr	r0, [pc, #2672]	; 5424 <eval_integer+0x1da8>
    49b0:	ldr	r1, [pc, #2688]	; 5438 <eval_integer+0x1dbc>
    49b4:	mov	r2, #2528	; 0x9e0
    49b8:	ldr	r3, [pc, #2668]	; 542c <eval_integer+0x1db0>
    49bc:	bl	0 <__assert_fail>
    49c0:	add	r0, r5, #8
    49c4:	mov	r2, r0
    49c8:	add	r3, sp, #5056	; 0x13c0
    49cc:	mov	lr, #130	; 0x82
    49d0:	ldr	ip, [r2], #4
    49d4:	subs	lr, lr, #1
    49d8:	str	ip, [r3], #4
    49dc:	bne	49d0 <eval_integer+0x1354>
    49e0:	ldr	r1, [r6, #16]
    49e4:	mov	r0, r5
    49e8:	bl	7608 <eval_cursor>
    49ec:	cmp	r0, #0
    49f0:	beq	49fc <eval_integer+0x1380>
    49f4:	mvn	r0, #0
    49f8:	b	53fc <eval_integer+0x1d80>
    49fc:	ldr	r1, [r6, #20]
    4a00:	add	r2, sp, #336	; 0x150
    4a04:	mov	r0, r5
    4a08:	bl	367c <eval_integer>
    4a0c:	cmp	r0, #0
    4a10:	beq	4a1c <eval_integer+0x13a0>
    4a14:	mvn	r0, #0
    4a18:	b	53fc <eval_integer+0x1d80>
    4a1c:	add	r0, r5, #8
    4a20:	add	r1, sp, #124	; 0x7c
    4a24:	add	r2, sp, #344	; 0x158
    4a28:	bl	0 <coda_cursor_get_array_dim>
    4a2c:	cmp	r0, #0
    4a30:	beq	4a3c <eval_integer+0x13c0>
    4a34:	mvn	r0, #0
    4a38:	b	53fc <eval_integer+0x1d80>
    4a3c:	ldr	r0, [sp, #340]	; 0x154
    4a40:	cmp	r0, #0
    4a44:	bge	4a60 <eval_integer+0x13e4>
    4a48:	mvn	r0, #400	; 0x190
    4a4c:	ldr	r1, [pc, #2540]	; 5440 <eval_integer+0x1dc4>
    4a50:	ldr	r2, [sp, #336]	; 0x150
    4a54:	bl	0 <coda_set_error>
    4a58:	mvn	r0, #0
    4a5c:	b	53fc <eval_integer+0x1d80>
    4a60:	ldr	r3, [sp, #336]	; 0x150
    4a64:	ldr	r2, [sp, #340]	; 0x154
    4a68:	ldr	r0, [sp, #124]	; 0x7c
    4a6c:	asr	r1, r0, #31
    4a70:	cmp	r2, r1
    4a74:	bne	4a84 <eval_integer+0x1408>
    4a78:	cmp	r3, r0
    4a7c:	bcs	4a8c <eval_integer+0x1410>
    4a80:	b	4aa8 <eval_integer+0x142c>
    4a84:	cmp	r2, r1
    4a88:	ble	4aa8 <eval_integer+0x142c>
    4a8c:	mvn	r0, #400	; 0x190
    4a90:	ldr	r1, [pc, #2456]	; 5430 <eval_integer+0x1db4>
    4a94:	ldr	r2, [sp, #336]	; 0x150
    4a98:	ldr	r3, [sp, #124]	; 0x7c
    4a9c:	bl	0 <coda_set_error>
    4aa0:	mvn	r0, #0
    4aa4:	b	53fc <eval_integer+0x1d80>
    4aa8:	add	r3, r5, #8
    4aac:	add	r2, sp, #5056	; 0x13c0
    4ab0:	mov	lr, #130	; 0x82
    4ab4:	ldr	ip, [r2], #4
    4ab8:	subs	lr, lr, #1
    4abc:	str	ip, [r3], #4
    4ac0:	bne	4ab4 <eval_integer+0x1438>
    4ac4:	add	r2, sp, #344	; 0x158
    4ac8:	ldr	r3, [sp, #336]	; 0x150
    4acc:	ldr	r0, [r2, r3, lsl #2]
    4ad0:	asr	r1, r0, #31
    4ad4:	str	r0, [r4]
    4ad8:	str	r1, [r4, #4]
    4adc:	b	53f8 <eval_integer+0x1d7c>
    4ae0:	ldr	r1, [r5]
    4ae4:	cmp	r1, #0
    4ae8:	bne	4b00 <eval_integer+0x1484>
    4aec:	ldr	r0, [pc, #2352]	; 5424 <eval_integer+0x1da8>
    4af0:	ldr	r1, [pc, #2368]	; 5438 <eval_integer+0x1dbc>
    4af4:	movw	r2, #2563	; 0xa03
    4af8:	ldr	r3, [pc, #2348]	; 542c <eval_integer+0x1db0>
    4afc:	bl	0 <__assert_fail>
    4b00:	add	r0, r5, #8
    4b04:	mov	r2, r0
    4b08:	add	r3, sp, #456	; 0x1c8
    4b0c:	add	r3, r3, #5120	; 0x1400
    4b10:	mov	lr, #130	; 0x82
    4b14:	ldr	ip, [r2], #4
    4b18:	subs	lr, lr, #1
    4b1c:	str	ip, [r3], #4
    4b20:	bne	4b14 <eval_integer+0x1498>
    4b24:	ldr	r1, [r6, #16]
    4b28:	mov	r0, r5
    4b2c:	bl	7608 <eval_cursor>
    4b30:	cmp	r0, #0
    4b34:	beq	4b40 <eval_integer+0x14c4>
    4b38:	mvn	r0, #0
    4b3c:	b	53fc <eval_integer+0x1d80>
    4b40:	add	r0, r5, #8
    4b44:	add	r1, sp, #128	; 0x80
    4b48:	bl	0 <coda_cursor_get_type>
    4b4c:	cmp	r0, #0
    4b50:	beq	4b5c <eval_integer+0x14e0>
    4b54:	mvn	r0, #0
    4b58:	b	53fc <eval_integer+0x1d80>
    4b5c:	ldr	r0, [sp, #128]	; 0x80
    4b60:	add	r1, sp, #132	; 0x84
    4b64:	bl	0 <coda_type_get_array_num_dims>
    4b68:	cmp	r0, #0
    4b6c:	beq	4b78 <eval_integer+0x14fc>
    4b70:	mvn	r0, #0
    4b74:	b	53fc <eval_integer+0x1d80>
    4b78:	add	ip, r5, #8
    4b7c:	add	r2, sp, #456	; 0x1c8
    4b80:	add	r2, r2, #5120	; 0x1400
    4b84:	mov	r3, ip
    4b88:	mov	lr, #130	; 0x82
    4b8c:	ldr	ip, [r2], #4
    4b90:	subs	lr, lr, #1
    4b94:	str	ip, [r3], #4
    4b98:	bne	4b8c <eval_integer+0x1510>
    4b9c:	ldr	r1, [sp, #132]	; 0x84
    4ba0:	asr	r2, r1, #31
    4ba4:	str	r1, [r4]
    4ba8:	str	r2, [r4, #4]
    4bac:	b	53f8 <eval_integer+0x1d7c>
    4bb0:	ldr	ip, [r5]
    4bb4:	cmp	ip, #0
    4bb8:	bne	4bd0 <eval_integer+0x1554>
    4bbc:	ldr	r0, [pc, #2144]	; 5424 <eval_integer+0x1da8>
    4bc0:	ldr	r1, [pc, #2160]	; 5438 <eval_integer+0x1dbc>
    4bc4:	movw	r2, #2586	; 0xa1a
    4bc8:	ldr	r3, [pc, #2140]	; 542c <eval_integer+0x1db0>
    4bcc:	bl	0 <__assert_fail>
    4bd0:	add	r2, r5, #8
    4bd4:	add	r3, sp, #2000	; 0x7d0
    4bd8:	add	r3, r3, #4096	; 0x1000
    4bdc:	mov	lr, #130	; 0x82
    4be0:	ldr	ip, [r2], #4
    4be4:	subs	lr, lr, #1
    4be8:	str	ip, [r3], #4
    4bec:	bne	4be0 <eval_integer+0x1564>
    4bf0:	ldr	r1, [r6, #16]
    4bf4:	mov	r0, r5
    4bf8:	bl	7608 <eval_cursor>
    4bfc:	cmp	r0, #0
    4c00:	beq	4c0c <eval_integer+0x1590>
    4c04:	mvn	r0, #0
    4c08:	b	53fc <eval_integer+0x1d80>
    4c0c:	add	r0, r5, #8
    4c10:	add	r1, sp, #136	; 0x88
    4c14:	bl	0 <coda_cursor_get_num_elements>
    4c18:	cmp	r0, #0
    4c1c:	beq	4c28 <eval_integer+0x15ac>
    4c20:	mvn	r0, #0
    4c24:	b	53fc <eval_integer+0x1d80>
    4c28:	add	r3, r5, #8
    4c2c:	add	r2, sp, #2000	; 0x7d0
    4c30:	add	r2, r2, #4096	; 0x1000
    4c34:	mov	lr, #130	; 0x82
    4c38:	ldr	ip, [r2], #4
    4c3c:	subs	lr, lr, #1
    4c40:	str	ip, [r3], #4
    4c44:	bne	4c38 <eval_integer+0x15bc>
    4c48:	ldr	r1, [sp, #136]	; 0x88
    4c4c:	asr	r2, r1, #31
    4c50:	str	r1, [r4]
    4c54:	str	r2, [r4, #4]
    4c58:	b	53f8 <eval_integer+0x1d7c>
    4c5c:	ldr	r0, [r5]
    4c60:	cmp	r0, #0
    4c64:	bne	4c7c <eval_integer+0x1600>
    4c68:	ldr	r0, [pc, #1972]	; 5424 <eval_integer+0x1da8>
    4c6c:	ldr	r1, [pc, #1988]	; 5438 <eval_integer+0x1dbc>
    4c70:	movw	r2, #2605	; 0xa2d
    4c74:	ldr	r3, [pc, #1968]	; 542c <eval_integer+0x1db0>
    4c78:	bl	0 <__assert_fail>
    4c7c:	add	r3, r5, #8
    4c80:	mov	r2, r3
    4c84:	add	r3, sp, #472	; 0x1d8
    4c88:	add	r3, r3, #6144	; 0x1800
    4c8c:	mov	lr, #130	; 0x82
    4c90:	ldr	ip, [r2], #4
    4c94:	subs	lr, lr, #1
    4c98:	str	ip, [r3], #4
    4c9c:	bne	4c90 <eval_integer+0x1614>
    4ca0:	ldr	r1, [r6, #16]
    4ca4:	mov	r0, r5
    4ca8:	bl	7608 <eval_cursor>
    4cac:	cmp	r0, #0
    4cb0:	beq	4cbc <eval_integer+0x1640>
    4cb4:	mvn	r0, #0
    4cb8:	b	53fc <eval_integer+0x1d80>
    4cbc:	bl	0 <coda_get_option_use_fast_size_expressions>
    4cc0:	mov	r6, r0
    4cc4:	mov	r0, #0
    4cc8:	bl	0 <coda_set_option_use_fast_size_expressions>
    4ccc:	add	r0, r5, #8
    4cd0:	mov	r1, r4
    4cd4:	bl	0 <coda_cursor_get_bit_size>
    4cd8:	cmp	r0, #0
    4cdc:	beq	4cf0 <eval_integer+0x1674>
    4ce0:	mov	r0, r6
    4ce4:	bl	0 <coda_set_option_use_fast_size_expressions>
    4ce8:	mvn	r0, #0
    4cec:	b	53fc <eval_integer+0x1d80>
    4cf0:	mov	r0, r6
    4cf4:	bl	0 <coda_set_option_use_fast_size_expressions>
    4cf8:	add	r0, r5, #8
    4cfc:	add	r2, sp, #472	; 0x1d8
    4d00:	add	r2, r2, #6144	; 0x1800
    4d04:	mov	r3, r0
    4d08:	mov	lr, #130	; 0x82
    4d0c:	ldr	ip, [r2], #4
    4d10:	subs	lr, lr, #1
    4d14:	str	ip, [r3], #4
    4d18:	bne	4d0c <eval_integer+0x1690>
    4d1c:	b	53f8 <eval_integer+0x1d7c>
    4d20:	ldr	r0, [r5]
    4d24:	cmp	r0, #0
    4d28:	bne	4d40 <eval_integer+0x16c4>
    4d2c:	ldr	r0, [pc, #1776]	; 5424 <eval_integer+0x1da8>
    4d30:	ldr	r1, [pc, #1792]	; 5438 <eval_integer+0x1dbc>
    4d34:	movw	r2, #2627	; 0xa43
    4d38:	ldr	r3, [pc, #1772]	; 542c <eval_integer+0x1db0>
    4d3c:	bl	0 <__assert_fail>
    4d40:	add	r1, r5, #8
    4d44:	mov	r2, r1
    4d48:	add	r3, sp, #3040	; 0xbe0
    4d4c:	add	r3, r3, #4096	; 0x1000
    4d50:	mov	lr, #130	; 0x82
    4d54:	ldr	ip, [r2], #4
    4d58:	subs	lr, lr, #1
    4d5c:	str	ip, [r3], #4
    4d60:	bne	4d54 <eval_integer+0x16d8>
    4d64:	ldr	r1, [r6, #16]
    4d68:	mov	r0, r5
    4d6c:	bl	7608 <eval_cursor>
    4d70:	cmp	r0, #0
    4d74:	beq	4d80 <eval_integer+0x1704>
    4d78:	mvn	r0, #0
    4d7c:	b	53fc <eval_integer+0x1d80>
    4d80:	bl	0 <coda_get_option_use_fast_size_expressions>
    4d84:	mov	r6, r0
    4d88:	mov	r0, #0
    4d8c:	bl	0 <coda_set_option_use_fast_size_expressions>
    4d90:	add	r0, r5, #8
    4d94:	mov	r1, r4
    4d98:	bl	0 <coda_cursor_get_byte_size>
    4d9c:	cmp	r0, #0
    4da0:	beq	4db4 <eval_integer+0x1738>
    4da4:	mov	r0, r6
    4da8:	bl	0 <coda_set_option_use_fast_size_expressions>
    4dac:	mvn	r0, #0
    4db0:	b	53fc <eval_integer+0x1d80>
    4db4:	mov	r0, r6
    4db8:	bl	0 <coda_set_option_use_fast_size_expressions>
    4dbc:	add	r0, r5, #8
    4dc0:	add	r2, sp, #3040	; 0xbe0
    4dc4:	add	r2, r2, #4096	; 0x1000
    4dc8:	mov	r3, r0
    4dcc:	mov	lr, #130	; 0x82
    4dd0:	ldr	ip, [r2], #4
    4dd4:	subs	lr, lr, #1
    4dd8:	str	ip, [r3], #4
    4ddc:	bne	4dd0 <eval_integer+0x1754>
    4de0:	b	53f8 <eval_integer+0x1d7c>
    4de4:	ldr	r1, [r5]
    4de8:	cmp	r1, #0
    4dec:	bne	4e04 <eval_integer+0x1788>
    4df0:	ldr	r0, [pc, #1580]	; 5424 <eval_integer+0x1da8>
    4df4:	ldr	r1, [pc, #1596]	; 5438 <eval_integer+0x1dbc>
    4df8:	movw	r2, #2648	; 0xa58
    4dfc:	ldr	r3, [pc, #1576]	; 542c <eval_integer+0x1db0>
    4e00:	bl	0 <__assert_fail>
    4e04:	add	ip, r5, #8
    4e08:	mov	r2, ip
    4e0c:	add	r3, sp, #488	; 0x1e8
    4e10:	add	r3, r3, #7168	; 0x1c00
    4e14:	mov	lr, #130	; 0x82
    4e18:	ldr	ip, [r2], #4
    4e1c:	subs	lr, lr, #1
    4e20:	str	ip, [r3], #4
    4e24:	bne	4e18 <eval_integer+0x179c>
    4e28:	ldr	r1, [r6, #16]
    4e2c:	mov	r0, r5
    4e30:	bl	7608 <eval_cursor>
    4e34:	cmp	r0, #0
    4e38:	beq	4e44 <eval_integer+0x17c8>
    4e3c:	mvn	r0, #0
    4e40:	b	53fc <eval_integer+0x1d80>
    4e44:	add	r0, r5, #8
    4e48:	mov	r1, r4
    4e4c:	bl	0 <coda_cursor_get_file_bit_offset>
    4e50:	cmp	r0, #0
    4e54:	beq	4e60 <eval_integer+0x17e4>
    4e58:	mvn	r0, #0
    4e5c:	b	53fc <eval_integer+0x1d80>
    4e60:	add	r0, r5, #8
    4e64:	add	r2, sp, #488	; 0x1e8
    4e68:	add	r2, r2, #7168	; 0x1c00
    4e6c:	mov	r3, r0
    4e70:	mov	lr, #130	; 0x82
    4e74:	ldr	ip, [r2], #4
    4e78:	subs	lr, lr, #1
    4e7c:	str	ip, [r3], #4
    4e80:	bne	4e74 <eval_integer+0x17f8>
    4e84:	b	53f8 <eval_integer+0x1d7c>
    4e88:	ldr	r1, [r5]
    4e8c:	cmp	r1, #0
    4e90:	bne	4ea8 <eval_integer+0x182c>
    4e94:	ldr	r0, [pc, #1416]	; 5424 <eval_integer+0x1da8>
    4e98:	ldr	r1, [pc, #1432]	; 5438 <eval_integer+0x1dbc>
    4e9c:	movw	r2, #2665	; 0xa69
    4ea0:	ldr	r3, [pc, #1412]	; 542c <eval_integer+0x1db0>
    4ea4:	bl	0 <__assert_fail>
    4ea8:	add	ip, r5, #8
    4eac:	mov	r2, ip
    4eb0:	add	r3, sp, #4080	; 0xff0
    4eb4:	add	r3, r3, #4096	; 0x1000
    4eb8:	mov	lr, #130	; 0x82
    4ebc:	ldr	ip, [r2], #4
    4ec0:	subs	lr, lr, #1
    4ec4:	str	ip, [r3], #4
    4ec8:	bne	4ebc <eval_integer+0x1840>
    4ecc:	ldr	r1, [r6, #16]
    4ed0:	mov	r0, r5
    4ed4:	bl	7608 <eval_cursor>
    4ed8:	cmp	r0, #0
    4edc:	beq	4ee8 <eval_integer+0x186c>
    4ee0:	mvn	r0, #0
    4ee4:	b	53fc <eval_integer+0x1d80>
    4ee8:	add	r0, r5, #8
    4eec:	mov	r1, r4
    4ef0:	bl	0 <coda_cursor_get_file_byte_offset>
    4ef4:	cmp	r0, #0
    4ef8:	beq	4f04 <eval_integer+0x1888>
    4efc:	mvn	r0, #0
    4f00:	b	53fc <eval_integer+0x1d80>
    4f04:	add	r0, r5, #8
    4f08:	add	r2, sp, #4080	; 0xff0
    4f0c:	add	r2, r2, #4096	; 0x1000
    4f10:	mov	r3, r0
    4f14:	mov	lr, #130	; 0x82
    4f18:	ldr	ip, [r2], #4
    4f1c:	subs	lr, lr, #1
    4f20:	str	ip, [r3], #4
    4f24:	bne	4f18 <eval_integer+0x189c>
    4f28:	b	53f8 <eval_integer+0x1d7c>
    4f2c:	ldr	r0, [r5]
    4f30:	cmp	r0, #0
    4f34:	bne	4f4c <eval_integer+0x18d0>
    4f38:	ldr	r0, [pc, #1252]	; 5424 <eval_integer+0x1da8>
    4f3c:	ldr	r1, [pc, #1268]	; 5438 <eval_integer+0x1dbc>
    4f40:	movw	r2, #2679	; 0xa77
    4f44:	ldr	r3, [pc, #1248]	; 542c <eval_integer+0x1db0>
    4f48:	bl	0 <__assert_fail>
    4f4c:	ldr	r2, [r5]
    4f50:	ldr	r0, [r2]
    4f54:	mov	r1, r4
    4f58:	bl	0 <coda_get_product_file_size>
    4f5c:	cmp	r0, #0
    4f60:	beq	53f8 <eval_integer+0x1d7c>
    4f64:	mvn	r0, #0
    4f68:	b	53fc <eval_integer+0x1d80>
    4f6c:	ldr	r1, [r5]
    4f70:	cmp	r1, #0
    4f74:	bne	4f8c <eval_integer+0x1910>
    4f78:	ldr	r0, [pc, #1188]	; 5424 <eval_integer+0x1da8>
    4f7c:	ldr	r1, [pc, #1204]	; 5438 <eval_integer+0x1dbc>
    4f80:	movw	r2, #2689	; 0xa81
    4f84:	ldr	r3, [pc, #1184]	; 542c <eval_integer+0x1db0>
    4f88:	bl	0 <__assert_fail>
    4f8c:	ldr	ip, [r5]
    4f90:	ldr	r0, [ip]
    4f94:	add	r1, sp, #140	; 0x8c
    4f98:	bl	0 <coda_get_product_version>
    4f9c:	cmp	r0, #0
    4fa0:	beq	4fac <eval_integer+0x1930>
    4fa4:	mvn	r0, #0
    4fa8:	b	53fc <eval_integer+0x1d80>
    4fac:	ldr	r3, [sp, #140]	; 0x8c
    4fb0:	asr	ip, r3, #31
    4fb4:	str	r3, [r4]
    4fb8:	str	ip, [r4, #4]
    4fbc:	b	53f8 <eval_integer+0x1d7c>
    4fc0:	ldr	r1, [r5]
    4fc4:	cmp	r1, #0
    4fc8:	bne	4fe0 <eval_integer+0x1964>
    4fcc:	ldr	r0, [pc, #1104]	; 5424 <eval_integer+0x1da8>
    4fd0:	ldr	r1, [pc, #1120]	; 5438 <eval_integer+0x1dbc>
    4fd4:	movw	r2, #2702	; 0xa8e
    4fd8:	ldr	r3, [pc, #1100]	; 542c <eval_integer+0x1db0>
    4fdc:	bl	0 <__assert_fail>
    4fe0:	add	r0, r5, #8
    4fe4:	mov	r2, r0
    4fe8:	add	r3, sp, #504	; 0x1f8
    4fec:	add	r3, r3, #8192	; 0x2000
    4ff0:	mov	lr, #130	; 0x82
    4ff4:	ldr	ip, [r2], #4
    4ff8:	subs	lr, lr, #1
    4ffc:	str	ip, [r3], #4
    5000:	bne	4ff4 <eval_integer+0x1978>
    5004:	ldr	r1, [r6, #16]
    5008:	mov	r0, r5
    500c:	bl	7608 <eval_cursor>
    5010:	cmp	r0, #0
    5014:	beq	5020 <eval_integer+0x19a4>
    5018:	mvn	r0, #0
    501c:	b	53fc <eval_integer+0x1d80>
    5020:	add	r0, r5, #8
    5024:	add	r1, sp, #144	; 0x90
    5028:	bl	0 <coda_cursor_get_index>
    502c:	cmp	r0, #0
    5030:	beq	503c <eval_integer+0x19c0>
    5034:	mvn	r0, #0
    5038:	b	53fc <eval_integer+0x1d80>
    503c:	add	r1, r5, #8
    5040:	add	r2, sp, #504	; 0x1f8
    5044:	add	r2, r2, #8192	; 0x2000
    5048:	mov	r3, r1
    504c:	mov	lr, #130	; 0x82
    5050:	ldr	ip, [r2], #4
    5054:	subs	lr, lr, #1
    5058:	str	ip, [r3], #4
    505c:	bne	5050 <eval_integer+0x19d4>
    5060:	ldr	ip, [sp, #144]	; 0x90
    5064:	asr	r0, ip, #31
    5068:	str	ip, [r4]
    506c:	str	r0, [r4, #4]
    5070:	b	53f8 <eval_integer+0x1d7c>
    5074:	ldr	r2, [r6, #12]
    5078:	ldrb	ip, [r2]
    507c:	lsl	r3, ip, #3
    5080:	add	r2, r5, r3
    5084:	sub	lr, r2, #4096	; 0x1000
    5088:	ldr	r1, [lr, #3784]	; 0xec8
    508c:	sub	lr, r2, #4096	; 0x1000
    5090:	ldr	r3, [lr, #3788]	; 0xecc
    5094:	str	r1, [r4]
    5098:	str	r3, [r4, #4]
    509c:	b	53f8 <eval_integer+0x1d7c>
    50a0:	ldr	r1, [r5]
    50a4:	cmp	r1, #0
    50a8:	bne	50c0 <eval_integer+0x1a44>
    50ac:	ldr	r0, [pc, #880]	; 5424 <eval_integer+0x1da8>
    50b0:	ldr	r1, [pc, #896]	; 5438 <eval_integer+0x1dbc>
    50b4:	movw	r2, #2724	; 0xaa4
    50b8:	ldr	r3, [pc, #876]	; 542c <eval_integer+0x1db0>
    50bc:	bl	0 <__assert_fail>
    50c0:	ldr	r2, [r5, #560]	; 0x230
    50c4:	cmp	r2, #0
    50c8:	beq	50e0 <eval_integer+0x1a64>
    50cc:	mvn	r0, #400	; 0x190
    50d0:	ldr	r1, [pc, #840]	; 5420 <eval_integer+0x1da4>
    50d4:	bl	0 <coda_set_error>
    50d8:	mvn	r0, #0
    50dc:	b	53fc <eval_integer+0x1d80>
    50e0:	ldr	r3, [r5]
    50e4:	ldr	r0, [r3]
    50e8:	ldr	r1, [r6, #12]
    50ec:	add	r2, sp, #40	; 0x28
    50f0:	bl	0 <coda_product_variable_get_size>
    50f4:	cmp	r0, #0
    50f8:	beq	5104 <eval_integer+0x1a88>
    50fc:	mvn	r0, #0
    5100:	b	53fc <eval_integer+0x1d80>
    5104:	ldr	r0, [r6, #12]
    5108:	str	r0, [r5, #560]	; 0x230
    510c:	mov	r7, #0
    5110:	ldr	r1, [sp, #40]	; 0x28
    5114:	cmp	r7, r1
    5118:	bge	517c <eval_integer+0x1b00>
    511c:	asr	ip, r7, #31
    5120:	mov	r3, r7
    5124:	str	r3, [r5, #552]	; 0x228
    5128:	str	ip, [r5, #556]	; 0x22c
    512c:	ldr	r1, [r6, #16]
    5130:	add	r2, sp, #44	; 0x2c
    5134:	mov	r0, r5
    5138:	bl	e80 <eval_boolean>
    513c:	cmp	r0, #0
    5140:	beq	514c <eval_integer+0x1ad0>
    5144:	mvn	r0, #0
    5148:	b	53fc <eval_integer+0x1d80>
    514c:	ldr	r3, [sp, #44]	; 0x2c
    5150:	cmp	r3, #0
    5154:	beq	5174 <eval_integer+0x1af8>
    5158:	asr	r2, r7, #31
    515c:	str	r7, [r4]
    5160:	str	r2, [r4, #4]
    5164:	mov	r1, #0
    5168:	str	r1, [r5, #560]	; 0x230
    516c:	mov	r0, #0
    5170:	b	53fc <eval_integer+0x1d80>
    5174:	add	r7, r7, #1
    5178:	b	5110 <eval_integer+0x1a94>
    517c:	mvn	r0, #0
    5180:	mvn	ip, #0
    5184:	str	ip, [r4]
    5188:	str	r0, [r4, #4]
    518c:	mov	r0, #0
    5190:	str	r0, [r5, #560]	; 0x230
    5194:	b	53f8 <eval_integer+0x1d7c>
    5198:	mov	ip, #0
    519c:	mov	r3, #0
    51a0:	str	r3, [sp, #152]	; 0x98
    51a4:	str	ip, [sp, #156]	; 0x9c
    51a8:	ldr	r2, [r5]
    51ac:	cmp	r2, #0
    51b0:	bne	51c8 <eval_integer+0x1b4c>
    51b4:	ldr	r0, [pc, #616]	; 5424 <eval_integer+0x1da8>
    51b8:	ldr	r1, [pc, #632]	; 5438 <eval_integer+0x1dbc>
    51bc:	movw	r2, #2761	; 0xac9
    51c0:	ldr	r3, [pc, #612]	; 542c <eval_integer+0x1db0>
    51c4:	bl	0 <__assert_fail>
    51c8:	ldr	r0, [r6, #16]
    51cc:	cmp	r0, #0
    51d0:	beq	5240 <eval_integer+0x1bc4>
    51d4:	ldr	r0, [r5, #560]	; 0x230
    51d8:	cmp	r0, #0
    51dc:	beq	51fc <eval_integer+0x1b80>
    51e0:	ldr	r0, [r6, #12]
    51e4:	ldr	r1, [r5, #560]	; 0x230
    51e8:	bl	0 <strcmp>
    51ec:	cmp	r0, #0
    51f0:	moveq	ip, #1
    51f4:	movne	ip, #0
    51f8:	b	5200 <eval_integer+0x1b84>
    51fc:	mov	ip, #0
    5200:	cmp	ip, #0
    5204:	beq	5220 <eval_integer+0x1ba4>
    5208:	mvn	r0, #400	; 0x190
    520c:	ldr	r1, [pc, #552]	; 543c <eval_integer+0x1dc0>
    5210:	ldr	r2, [r6, #12]
    5214:	bl	0 <coda_set_error>
    5218:	mvn	r0, #0
    521c:	b	53fc <eval_integer+0x1d80>
    5220:	ldr	r1, [r6, #16]
    5224:	add	r2, sp, #152	; 0x98
    5228:	mov	r0, r5
    522c:	bl	367c <eval_integer>
    5230:	cmp	r0, #0
    5234:	beq	5284 <eval_integer+0x1c08>
    5238:	mvn	r0, #0
    523c:	b	53fc <eval_integer+0x1d80>
    5240:	ldr	r2, [r5, #560]	; 0x230
    5244:	cmp	r2, #0
    5248:	beq	5268 <eval_integer+0x1bec>
    524c:	ldr	r0, [r5, #560]	; 0x230
    5250:	ldr	r1, [r6, #12]
    5254:	bl	0 <strcmp>
    5258:	cmp	r0, #0
    525c:	moveq	r1, #1
    5260:	movne	r1, #0
    5264:	b	526c <eval_integer+0x1bf0>
    5268:	mov	r1, #0
    526c:	cmp	r1, #0
    5270:	beq	5284 <eval_integer+0x1c08>
    5274:	ldr	r0, [r5, #552]	; 0x228
    5278:	ldr	r2, [r5, #556]	; 0x22c
    527c:	str	r0, [sp, #152]	; 0x98
    5280:	str	r2, [sp, #156]	; 0x9c
    5284:	ldr	r2, [r5]
    5288:	ldr	r0, [r2]
    528c:	ldr	r1, [r6, #12]
    5290:	ldr	r2, [sp, #152]	; 0x98
    5294:	add	r3, sp, #48	; 0x30
    5298:	bl	0 <coda_product_variable_get_pointer>
    529c:	cmp	r0, #0
    52a0:	beq	52ac <eval_integer+0x1c30>
    52a4:	mvn	r0, #0
    52a8:	b	53fc <eval_integer+0x1d80>
    52ac:	ldr	r3, [sp, #48]	; 0x30
    52b0:	ldr	r1, [r3]
    52b4:	ldr	r3, [r3, #4]
    52b8:	str	r1, [r4]
    52bc:	str	r3, [r4, #4]
    52c0:	b	53f8 <eval_integer+0x1d7c>
    52c4:	ldr	r3, [r5]
    52c8:	cmp	r3, #0
    52cc:	bne	52e4 <eval_integer+0x1c68>
    52d0:	ldr	r0, [pc, #332]	; 5424 <eval_integer+0x1da8>
    52d4:	ldr	r1, [pc, #348]	; 5438 <eval_integer+0x1dbc>
    52d8:	movw	r2, #2792	; 0xae8
    52dc:	ldr	r3, [pc, #328]	; 542c <eval_integer+0x1db0>
    52e0:	bl	0 <__assert_fail>
    52e4:	add	r1, r5, #8
    52e8:	mov	r2, r1
    52ec:	add	r3, sp, #376	; 0x178
    52f0:	mov	lr, #130	; 0x82
    52f4:	ldr	ip, [r2], #4
    52f8:	subs	lr, lr, #1
    52fc:	str	ip, [r3], #4
    5300:	bne	52f4 <eval_integer+0x1c78>
    5304:	ldr	r1, [r6, #16]
    5308:	mov	r0, r5
    530c:	bl	7608 <eval_cursor>
    5310:	cmp	r0, #0
    5314:	beq	5320 <eval_integer+0x1ca4>
    5318:	mvn	r0, #0
    531c:	b	53fc <eval_integer+0x1d80>
    5320:	ldr	r1, [r6, #20]
    5324:	mov	r2, r4
    5328:	mov	r0, r5
    532c:	bl	367c <eval_integer>
    5330:	cmp	r0, #0
    5334:	beq	5340 <eval_integer+0x1cc4>
    5338:	mvn	r0, #0
    533c:	b	53fc <eval_integer+0x1d80>
    5340:	add	r0, r5, #8
    5344:	add	r2, sp, #376	; 0x178
    5348:	mov	r3, r0
    534c:	mov	lr, #130	; 0x82
    5350:	ldr	ip, [r2], #4
    5354:	subs	lr, lr, #1
    5358:	str	ip, [r3], #4
    535c:	bne	5350 <eval_integer+0x1cd4>
    5360:	b	53f8 <eval_integer+0x1d7c>
    5364:	ldr	r2, [r6, #12]
    5368:	ldrb	r2, [r2]
    536c:	sub	r9, r2, #105	; 0x69
    5370:	lsl	ip, r9, #3
    5374:	add	r0, r5, ip
    5378:	ldr	r8, [r0, #528]	; 0x210
    537c:	ldr	r7, [r0, #532]	; 0x214
    5380:	ldr	r1, [r6, #16]
    5384:	lsl	ip, r9, #3
    5388:	add	ip, r5, ip
    538c:	add	r2, ip, #528	; 0x210
    5390:	mov	r0, r5
    5394:	bl	367c <eval_integer>
    5398:	cmp	r0, #0
    539c:	beq	53a8 <eval_integer+0x1d2c>
    53a0:	mvn	r0, #0
    53a4:	b	53fc <eval_integer+0x1d80>
    53a8:	ldr	r1, [r6, #20]
    53ac:	mov	r2, r4
    53b0:	mov	r0, r5
    53b4:	bl	367c <eval_integer>
    53b8:	cmp	r0, #0
    53bc:	beq	53c8 <eval_integer+0x1d4c>
    53c0:	mvn	r0, #0
    53c4:	b	53fc <eval_integer+0x1d80>
    53c8:	lsl	ip, r9, #3
    53cc:	add	ip, r5, ip
    53d0:	str	r8, [ip, #528]	; 0x210
    53d4:	str	r7, [ip, #532]	; 0x214
    53d8:	b	53f8 <eval_integer+0x1d7c>
    53dc:	ldr	r0, [pc, #80]	; 5434 <eval_integer+0x1db8>
    53e0:	ldr	r1, [pc, #80]	; 5438 <eval_integer+0x1dbc>
    53e4:	movw	r2, #2823	; 0xb07
    53e8:	ldr	r3, [pc, #60]	; 542c <eval_integer+0x1db0>
    53ec:	bl	0 <__assert_fail>
    53f0:	mov	r0, #1
    53f4:	bl	0 <exit>
    53f8:	mov	r0, #0
    53fc:	ldr	r4, [sp, #16]
    5400:	ldr	r5, [sp, #20]
    5404:	ldr	r6, [sp, #24]
    5408:	ldr	r7, [sp, #28]
    540c:	ldr	r8, [sp, #32]
    5410:	ldr	r9, [sp, #36]	; 0x24
    5414:	ldr	lr, [sp, #8]
    5418:	add	sp, sp, #9216	; 0x2400
    541c:	bx	lr
    5420:	.word	0x0000020a
    5424:	.word	0x0000046b
    5428:	.word	0x00000000
    542c:	.word	0x00000d84
    5430:	.word	0x00000a83
    5434:	.word	0x00000bf8
    5438:	.word	0x0000053b
    543c:	.word	0x0000031f
    5440:	.word	0x000008da

00005444 <eval_string>:
    5444:	mov	ip, sp
    5448:	sub	sp, sp, #3664	; 0xe50
    544c:	str	ip, [sp, #16]
    5450:	str	lr, [sp, #20]
    5454:	str	r4, [sp, #24]
    5458:	str	r5, [sp, #28]
    545c:	str	r6, [sp, #32]
    5460:	str	r7, [sp, #36]	; 0x24
    5464:	str	r8, [sp, #40]	; 0x28
    5468:	str	r9, [sp, #44]	; 0x2c
    546c:	str	sl, [sp, #48]	; 0x30
    5470:	str	fp, [sp, #52]	; 0x34
    5474:	ldr	r5, [ip]
    5478:	mov	r4, r3
    547c:	mov	r6, r2
    5480:	mov	r8, r1
    5484:	mov	r7, r0
    5488:	ldr	r2, [r8]
    548c:	cmp	r2, #22
    5490:	beq	54a8 <eval_string+0x64>
    5494:	ldr	ip, [r8]
    5498:	cmp	ip, #21
    549c:	moveq	r3, #1
    54a0:	movne	r3, #0
    54a4:	b	54ac <eval_string+0x68>
    54a8:	mov	r3, #1
    54ac:	cmp	r3, #0
    54b0:	beq	552c <eval_string+0xe8>
    54b4:	mov	ip, #0
    54b8:	str	ip, [r6]
    54bc:	ldr	ip, [r8, #12]
    54c0:	str	ip, [r4]
    54c4:	ldr	r1, [r4]
    54c8:	cmp	r1, #0
    54cc:	ble	551c <eval_string+0xd8>
    54d0:	ldr	r2, [r4]
    54d4:	add	r0, r2, #1
    54d8:	bl	0 <malloc>
    54dc:	str	r0, [r5]
    54e0:	ldr	r3, [r5]
    54e4:	cmp	r3, #0
    54e8:	bne	5508 <eval_string+0xc4>
    54ec:	mvn	r0, #0
    54f0:	ldr	r1, [pc, #3848]	; 6400 <eval_string+0xfbc>
    54f4:	ldr	r2, [pc, #3852]	; 6408 <eval_string+0xfc4>
    54f8:	movw	r3, #2845	; 0xb1d
    54fc:	bl	0 <coda_set_error>
    5500:	mvn	r0, #0
    5504:	b	7190 <eval_string+0x1d4c>
    5508:	ldr	r0, [r5]
    550c:	ldr	r1, [r8, #16]
    5510:	ldr	r2, [r4]
    5514:	bl	0 <memcpy>
    5518:	b	5524 <eval_string+0xe0>
    551c:	mov	r2, #0
    5520:	str	r2, [r5]
    5524:	mov	r0, #0
    5528:	b	7190 <eval_string+0x1d4c>
    552c:	ldr	r3, [r8]
    5530:	cmp	r3, #57	; 0x39
    5534:	bcs	62ec <eval_string+0xea8>
    5538:	cmp	r3, #16
    553c:	bcs	5cbc <eval_string+0x878>
    5540:	cmp	r3, #8
    5544:	bcs	5890 <eval_string+0x44c>
    5548:	cmp	r3, #1
    554c:	beq	5740 <eval_string+0x2fc>
    5550:	cmp	r3, #3
    5554:	bne	6ef8 <eval_string+0x1ab4>
    5558:	ldr	r3, [r7]
    555c:	cmp	r3, #0
    5560:	bne	5578 <eval_string+0x134>
    5564:	ldr	r0, [pc, #3724]	; 63f8 <eval_string+0xfb4>
    5568:	ldr	r1, [pc, #3736]	; 6408 <eval_string+0xfc4>
    556c:	movw	r2, #3234	; 0xca2
    5570:	ldr	r3, [pc, #3716]	; 63fc <eval_string+0xfb8>
    5574:	bl	0 <__assert_fail>
    5578:	add	r1, r7, #8
    557c:	mov	r2, r1
    5580:	add	r3, sp, #56	; 0x38
    5584:	add	r3, r3, #2048	; 0x800
    5588:	mov	lr, #130	; 0x82
    558c:	ldr	ip, [r2], #4
    5590:	subs	lr, lr, #1
    5594:	str	ip, [r3], #4
    5598:	bne	558c <eval_string+0x148>
    559c:	ldr	r1, [r8, #16]
    55a0:	mov	r0, r7
    55a4:	bl	7608 <eval_cursor>
    55a8:	cmp	r0, #0
    55ac:	beq	55b8 <eval_string+0x174>
    55b0:	mvn	r0, #0
    55b4:	b	7190 <eval_string+0x1d4c>
    55b8:	add	r0, r7, #8
    55bc:	add	r1, sp, #132	; 0x84
    55c0:	bl	0 <coda_cursor_get_num_elements>
    55c4:	cmp	r0, #0
    55c8:	beq	55d4 <eval_string+0x190>
    55cc:	mvn	r0, #0
    55d0:	b	7190 <eval_string+0x1d4c>
    55d4:	mov	ip, #0
    55d8:	str	ip, [r6]
    55dc:	mov	r1, #0
    55e0:	str	r1, [r4]
    55e4:	mov	r2, #0
    55e8:	str	r2, [r5]
    55ec:	ldr	ip, [sp, #132]	; 0x84
    55f0:	cmp	ip, #0
    55f4:	ble	5718 <eval_string+0x2d4>
    55f8:	add	r0, r7, #8
    55fc:	bl	0 <coda_cursor_goto_first_array_element>
    5600:	cmp	r0, #0
    5604:	beq	5610 <eval_string+0x1cc>
    5608:	mvn	r0, #0
    560c:	b	7190 <eval_string+0x1d4c>
    5610:	mov	r9, #0
    5614:	ldr	ip, [sp, #132]	; 0x84
    5618:	cmp	r9, ip
    561c:	bge	5718 <eval_string+0x2d4>
    5620:	ldr	r1, [r8, #20]
    5624:	add	r2, sp, #136	; 0x88
    5628:	add	r3, sp, #140	; 0x8c
    562c:	add	r0, sp, #144	; 0x90
    5630:	str	r0, [sp]
    5634:	mov	r0, r7
    5638:	bl	5444 <eval_string>
    563c:	cmp	r0, #0
    5640:	beq	564c <eval_string+0x208>
    5644:	mvn	r0, #0
    5648:	b	7190 <eval_string+0x1d4c>
    564c:	ldr	ip, [sp, #140]	; 0x8c
    5650:	cmp	ip, #0
    5654:	ble	56e8 <eval_string+0x2a4>
    5658:	ldr	r0, [r5]
    565c:	ldr	ip, [r4]
    5660:	ldr	r1, [sp, #140]	; 0x8c
    5664:	add	r1, ip, r1
    5668:	add	r1, r1, #1
    566c:	bl	0 <realloc>
    5670:	mov	r6, r0
    5674:	cmp	r6, #0
    5678:	bne	56b0 <eval_string+0x26c>
    567c:	mvn	r0, #0
    5680:	ldr	r1, [pc, #3436]	; 63f4 <eval_string+0xfb0>
    5684:	ldr	r3, [r4]
    5688:	ldr	r2, [sp, #140]	; 0x8c
    568c:	add	r2, r3, r2
    5690:	ldr	r3, [pc, #3440]	; 6408 <eval_string+0xfc4>
    5694:	movw	ip, #3275	; 0xccb
    5698:	str	ip, [sp]
    569c:	bl	0 <coda_set_error>
    56a0:	ldr	r0, [sp, #144]	; 0x90
    56a4:	bl	0 <free>
    56a8:	mvn	r0, #0
    56ac:	b	7190 <eval_string+0x1d4c>
    56b0:	ldr	r3, [r4]
    56b4:	add	r0, r6, r3
    56b8:	ldr	r1, [sp, #144]	; 0x90
    56bc:	ldr	r2, [sp, #136]	; 0x88
    56c0:	add	r1, r1, r2
    56c4:	ldr	r2, [sp, #140]	; 0x8c
    56c8:	bl	0 <memcpy>
    56cc:	ldr	r0, [sp, #144]	; 0x90
    56d0:	bl	0 <free>
    56d4:	ldr	r0, [r4]
    56d8:	ldr	r3, [sp, #140]	; 0x8c
    56dc:	add	r3, r0, r3
    56e0:	str	r3, [r4]
    56e4:	str	r6, [r5]
    56e8:	ldr	ip, [sp, #132]	; 0x84
    56ec:	sub	r0, ip, #1
    56f0:	cmp	r9, r0
    56f4:	bge	5710 <eval_string+0x2cc>
    56f8:	add	r0, r7, #8
    56fc:	bl	0 <coda_cursor_goto_next_array_element>
    5700:	cmp	r0, #0
    5704:	beq	5710 <eval_string+0x2cc>
    5708:	mvn	r0, #0
    570c:	b	7190 <eval_string+0x1d4c>
    5710:	add	r9, r9, #1
    5714:	b	5614 <eval_string+0x1d0>
    5718:	add	r0, r7, #8
    571c:	add	r2, sp, #56	; 0x38
    5720:	add	r2, r2, #2048	; 0x800
    5724:	mov	r3, r0
    5728:	mov	lr, #130	; 0x82
    572c:	ldr	ip, [r2], #4
    5730:	subs	lr, lr, #1
    5734:	str	ip, [r3], #4
    5738:	bne	572c <eval_string+0x2e8>
    573c:	b	718c <eval_string+0x1d48>
    5740:	ldr	r1, [r8, #16]
    5744:	add	r2, sp, #60	; 0x3c
    5748:	add	r3, sp, #68	; 0x44
    574c:	add	r0, sp, #76	; 0x4c
    5750:	str	r0, [sp]
    5754:	mov	r0, r7
    5758:	bl	5444 <eval_string>
    575c:	cmp	r0, #0
    5760:	beq	576c <eval_string+0x328>
    5764:	mvn	r0, #0
    5768:	b	7190 <eval_string+0x1d4c>
    576c:	ldr	r1, [r8, #20]
    5770:	add	r2, sp, #64	; 0x40
    5774:	add	r3, sp, #72	; 0x48
    5778:	add	r0, sp, #80	; 0x50
    577c:	str	r0, [sp]
    5780:	mov	r0, r7
    5784:	bl	5444 <eval_string>
    5788:	cmp	r0, #0
    578c:	beq	57a0 <eval_string+0x35c>
    5790:	ldr	r0, [sp, #76]	; 0x4c
    5794:	bl	0 <free>
    5798:	mvn	r0, #0
    579c:	b	7190 <eval_string+0x1d4c>
    57a0:	mov	r2, #0
    57a4:	str	r2, [r6]
    57a8:	ldr	r3, [sp, #68]	; 0x44
    57ac:	ldr	r0, [sp, #72]	; 0x48
    57b0:	add	ip, r3, r0
    57b4:	str	ip, [r4]
    57b8:	ldr	r1, [r4]
    57bc:	cmp	r1, #0
    57c0:	ble	585c <eval_string+0x418>
    57c4:	ldr	r2, [r4]
    57c8:	add	r0, r2, #1
    57cc:	bl	0 <malloc>
    57d0:	str	r0, [r5]
    57d4:	ldr	r1, [r5]
    57d8:	cmp	r1, #0
    57dc:	bne	5808 <eval_string+0x3c4>
    57e0:	mvn	r0, #0
    57e4:	ldr	r1, [pc, #3080]	; 63f4 <eval_string+0xfb0>
    57e8:	ldr	ip, [r4]
    57ec:	add	r2, ip, #1
    57f0:	ldr	r3, [pc, #3088]	; 6408 <eval_string+0xfc4>
    57f4:	movw	r4, #3031	; 0xbd7
    57f8:	str	r4, [sp]
    57fc:	bl	0 <coda_set_error>
    5800:	mvn	r0, #0
    5804:	b	7190 <eval_string+0x1d4c>
    5808:	ldr	r0, [sp, #68]	; 0x44
    580c:	cmp	r0, #0
    5810:	ble	582c <eval_string+0x3e8>
    5814:	ldr	r0, [r5]
    5818:	ldr	ip, [sp, #76]	; 0x4c
    581c:	ldr	r1, [sp, #60]	; 0x3c
    5820:	add	r1, ip, r1
    5824:	ldr	r2, [sp, #68]	; 0x44
    5828:	bl	0 <memcpy>
    582c:	ldr	r3, [sp, #72]	; 0x48
    5830:	cmp	r3, #0
    5834:	ble	5864 <eval_string+0x420>
    5838:	ldr	r1, [r5]
    583c:	ldr	r2, [sp, #68]	; 0x44
    5840:	add	r0, r1, r2
    5844:	ldr	r3, [sp, #80]	; 0x50
    5848:	ldr	r2, [sp, #64]	; 0x40
    584c:	add	r1, r3, r2
    5850:	ldr	r2, [sp, #72]	; 0x48
    5854:	bl	0 <memcpy>
    5858:	b	5864 <eval_string+0x420>
    585c:	mov	r1, #0
    5860:	str	r1, [r5]
    5864:	ldr	r0, [sp, #68]	; 0x44
    5868:	cmp	r0, #0
    586c:	ble	5878 <eval_string+0x434>
    5870:	ldr	r0, [sp, #76]	; 0x4c
    5874:	bl	0 <free>
    5878:	ldr	r0, [sp, #72]	; 0x48
    587c:	cmp	r0, #0
    5880:	ble	718c <eval_string+0x1d48>
    5884:	ldr	r0, [sp, #80]	; 0x50
    5888:	bl	0 <free>
    588c:	b	718c <eval_string+0x1d48>
    5890:	cmp	r3, #8
    5894:	beq	5b00 <eval_string+0x6bc>
    5898:	cmp	r3, #9
    589c:	beq	594c <eval_string+0x508>
    58a0:	cmp	r3, #11
    58a4:	bne	6ef8 <eval_string+0x1ab4>
    58a8:	ldr	ip, [r7]
    58ac:	cmp	ip, #0
    58b0:	bne	58c8 <eval_string+0x484>
    58b4:	ldr	r0, [pc, #2876]	; 63f8 <eval_string+0xfb4>
    58b8:	ldr	r1, [pc, #2888]	; 6408 <eval_string+0xfc4>
    58bc:	movw	r2, #3763	; 0xeb3
    58c0:	ldr	r3, [pc, #2868]	; 63fc <eval_string+0xfb8>
    58c4:	bl	0 <__assert_fail>
    58c8:	add	r2, r7, #8
    58cc:	add	r3, sp, #544	; 0x220
    58d0:	mov	lr, #130	; 0x82
    58d4:	ldr	ip, [r2], #4
    58d8:	subs	lr, lr, #1
    58dc:	str	ip, [r3], #4
    58e0:	bne	58d4 <eval_string+0x490>
    58e4:	ldr	r1, [r8, #16]
    58e8:	mov	r0, r7
    58ec:	bl	7608 <eval_cursor>
    58f0:	cmp	r0, #0
    58f4:	beq	5900 <eval_string+0x4bc>
    58f8:	mvn	r0, #0
    58fc:	b	7190 <eval_string+0x1d4c>
    5900:	ldr	r1, [r8, #20]
    5904:	str	r5, [sp]
    5908:	mov	r3, r4
    590c:	mov	r2, r6
    5910:	mov	r0, r7
    5914:	bl	5444 <eval_string>
    5918:	cmp	r0, #0
    591c:	beq	5928 <eval_string+0x4e4>
    5920:	mvn	r0, #0
    5924:	b	7190 <eval_string+0x1d4c>
    5928:	add	r0, r7, #8
    592c:	add	r2, sp, #544	; 0x220
    5930:	mov	r3, r0
    5934:	mov	lr, #130	; 0x82
    5938:	ldr	ip, [r2], #4
    593c:	subs	lr, lr, #1
    5940:	str	ip, [r3], #4
    5944:	bne	5938 <eval_string+0x4f4>
    5948:	b	718c <eval_string+0x1d48>
    594c:	ldr	r2, [r7]
    5950:	cmp	r2, #0
    5954:	bne	596c <eval_string+0x528>
    5958:	ldr	r0, [pc, #2712]	; 63f8 <eval_string+0xfb4>
    595c:	ldr	r1, [pc, #2724]	; 6408 <eval_string+0xfc4>
    5960:	movw	r2, #3301	; 0xce5
    5964:	ldr	r3, [pc, #2704]	; 63fc <eval_string+0xfb8>
    5968:	bl	0 <__assert_fail>
    596c:	add	r1, r7, #8
    5970:	mov	r2, r1
    5974:	add	r3, sp, #2624	; 0xa40
    5978:	mov	lr, #130	; 0x82
    597c:	ldr	ip, [r2], #4
    5980:	subs	lr, lr, #1
    5984:	str	ip, [r3], #4
    5988:	bne	597c <eval_string+0x538>
    598c:	ldr	r1, [r8, #16]
    5990:	mov	r0, r7
    5994:	bl	7608 <eval_cursor>
    5998:	cmp	r0, #0
    599c:	beq	59a8 <eval_string+0x564>
    59a0:	mvn	r0, #0
    59a4:	b	7190 <eval_string+0x1d4c>
    59a8:	add	r0, r7, #8
    59ac:	add	r1, sp, #148	; 0x94
    59b0:	bl	0 <coda_cursor_get_num_elements>
    59b4:	cmp	r0, #0
    59b8:	beq	59c4 <eval_string+0x580>
    59bc:	mvn	r0, #0
    59c0:	b	7190 <eval_string+0x1d4c>
    59c4:	mov	r1, #0
    59c8:	str	r1, [r6]
    59cc:	mov	r0, #0
    59d0:	str	r0, [r4]
    59d4:	mov	r1, #0
    59d8:	str	r1, [r5]
    59dc:	ldr	r0, [sp, #148]	; 0x94
    59e0:	cmp	r0, #0
    59e4:	ble	5adc <eval_string+0x698>
    59e8:	add	r0, r7, #8
    59ec:	bl	0 <coda_cursor_goto_first_array_element>
    59f0:	cmp	r0, #0
    59f4:	beq	5a00 <eval_string+0x5bc>
    59f8:	mvn	r0, #0
    59fc:	b	7190 <eval_string+0x1d4c>
    5a00:	mov	r9, #0
    5a04:	ldr	r1, [sp, #148]	; 0x94
    5a08:	cmp	r9, r1
    5a0c:	bge	5adc <eval_string+0x698>
    5a10:	ldr	r1, [r8, #20]
    5a14:	add	r2, sp, #152	; 0x98
    5a18:	add	r3, sp, #156	; 0x9c
    5a1c:	add	r0, sp, #160	; 0xa0
    5a20:	str	r0, [sp]
    5a24:	mov	r0, r7
    5a28:	bl	5444 <eval_string>
    5a2c:	cmp	r0, #0
    5a30:	beq	5a3c <eval_string+0x5f8>
    5a34:	mvn	r0, #0
    5a38:	b	7190 <eval_string+0x1d4c>
    5a3c:	ldr	r0, [sp, #152]	; 0x98
    5a40:	ldr	r1, [sp, #156]	; 0x9c
    5a44:	ldr	r2, [sp, #160]	; 0xa0
    5a48:	ldr	r3, [r6]
    5a4c:	ldr	fp, [r4]
    5a50:	ldr	sl, [r5]
    5a54:	str	sl, [sp, #4]
    5a58:	str	fp, [sp]
    5a5c:	bl	d8 <compare_strings>
    5a60:	cmp	r0, #0
    5a64:	bge	5a98 <eval_string+0x654>
    5a68:	ldr	ip, [r4]
    5a6c:	cmp	ip, #0
    5a70:	ble	5a7c <eval_string+0x638>
    5a74:	mov	r0, r5
    5a78:	bl	0 <free>
    5a7c:	ldr	r1, [sp, #152]	; 0x98
    5a80:	str	r1, [r6]
    5a84:	ldr	r0, [sp, #156]	; 0x9c
    5a88:	str	r0, [r4]
    5a8c:	ldr	r2, [sp, #160]	; 0xa0
    5a90:	str	r2, [r5]
    5a94:	b	5aac <eval_string+0x668>
    5a98:	ldr	r3, [sp, #156]	; 0x9c
    5a9c:	cmp	r3, #0
    5aa0:	ble	5aac <eval_string+0x668>
    5aa4:	ldr	r0, [sp, #160]	; 0xa0
    5aa8:	bl	0 <free>
    5aac:	ldr	r1, [sp, #148]	; 0x94
    5ab0:	sub	r0, r1, #1
    5ab4:	cmp	r9, r0
    5ab8:	bge	5ad4 <eval_string+0x690>
    5abc:	add	r0, r7, #8
    5ac0:	bl	0 <coda_cursor_goto_next_array_element>
    5ac4:	cmp	r0, #0
    5ac8:	beq	5ad4 <eval_string+0x690>
    5acc:	mvn	r0, #0
    5ad0:	b	7190 <eval_string+0x1d4c>
    5ad4:	add	r9, r9, #1
    5ad8:	b	5a04 <eval_string+0x5c0>
    5adc:	add	r0, r7, #8
    5ae0:	add	r2, sp, #2624	; 0xa40
    5ae4:	mov	r3, r0
    5ae8:	mov	lr, #130	; 0x82
    5aec:	ldr	ip, [r2], #4
    5af0:	subs	lr, lr, #1
    5af4:	str	ip, [r3], #4
    5af8:	bne	5aec <eval_string+0x6a8>
    5afc:	b	718c <eval_string+0x1d48>
    5b00:	ldr	r1, [r7]
    5b04:	cmp	r1, #0
    5b08:	bne	5b20 <eval_string+0x6dc>
    5b0c:	ldr	r0, [pc, #2276]	; 63f8 <eval_string+0xfb4>
    5b10:	ldr	r1, [pc, #2288]	; 6408 <eval_string+0xfc4>
    5b14:	movw	r2, #3363	; 0xd23
    5b18:	ldr	r3, [pc, #2268]	; 63fc <eval_string+0xfb8>
    5b1c:	bl	0 <__assert_fail>
    5b20:	add	r0, r7, #8
    5b24:	mov	r2, r0
    5b28:	add	r3, sp, #72	; 0x48
    5b2c:	add	r3, r3, #3072	; 0xc00
    5b30:	mov	lr, #130	; 0x82
    5b34:	ldr	ip, [r2], #4
    5b38:	subs	lr, lr, #1
    5b3c:	str	ip, [r3], #4
    5b40:	bne	5b34 <eval_string+0x6f0>
    5b44:	ldr	r1, [r8, #16]
    5b48:	mov	r0, r7
    5b4c:	bl	7608 <eval_cursor>
    5b50:	cmp	r0, #0
    5b54:	beq	5b60 <eval_string+0x71c>
    5b58:	mvn	r0, #0
    5b5c:	b	7190 <eval_string+0x1d4c>
    5b60:	add	r0, r7, #8
    5b64:	add	r1, sp, #164	; 0xa4
    5b68:	bl	0 <coda_cursor_get_num_elements>
    5b6c:	cmp	r0, #0
    5b70:	beq	5b7c <eval_string+0x738>
    5b74:	mvn	r0, #0
    5b78:	b	7190 <eval_string+0x1d4c>
    5b7c:	mov	r1, #0
    5b80:	str	r1, [r6]
    5b84:	mov	ip, #0
    5b88:	str	ip, [r4]
    5b8c:	mov	r0, #0
    5b90:	str	r0, [r5]
    5b94:	ldr	r3, [sp, #164]	; 0xa4
    5b98:	cmp	r3, #0
    5b9c:	ble	5c94 <eval_string+0x850>
    5ba0:	add	r0, r7, #8
    5ba4:	bl	0 <coda_cursor_goto_first_array_element>
    5ba8:	cmp	r0, #0
    5bac:	beq	5bb8 <eval_string+0x774>
    5bb0:	mvn	r0, #0
    5bb4:	b	7190 <eval_string+0x1d4c>
    5bb8:	mov	r9, #0
    5bbc:	ldr	r3, [sp, #164]	; 0xa4
    5bc0:	cmp	r9, r3
    5bc4:	bge	5c94 <eval_string+0x850>
    5bc8:	ldr	r1, [r8, #20]
    5bcc:	add	r2, sp, #168	; 0xa8
    5bd0:	add	r3, sp, #172	; 0xac
    5bd4:	add	r0, sp, #176	; 0xb0
    5bd8:	str	r0, [sp]
    5bdc:	mov	r0, r7
    5be0:	bl	5444 <eval_string>
    5be4:	cmp	r0, #0
    5be8:	beq	5bf4 <eval_string+0x7b0>
    5bec:	mvn	r0, #0
    5bf0:	b	7190 <eval_string+0x1d4c>
    5bf4:	ldr	r0, [sp, #168]	; 0xa8
    5bf8:	ldr	r1, [sp, #172]	; 0xac
    5bfc:	ldr	r2, [sp, #176]	; 0xb0
    5c00:	ldr	r3, [r6]
    5c04:	ldr	fp, [r4]
    5c08:	ldr	sl, [r5]
    5c0c:	str	sl, [sp, #4]
    5c10:	str	fp, [sp]
    5c14:	bl	d8 <compare_strings>
    5c18:	cmp	r0, #0
    5c1c:	ble	5c50 <eval_string+0x80c>
    5c20:	ldr	ip, [r4]
    5c24:	cmp	ip, #0
    5c28:	ble	5c34 <eval_string+0x7f0>
    5c2c:	ldr	r0, [r5]
    5c30:	bl	0 <free>
    5c34:	ldr	r1, [sp, #168]	; 0xa8
    5c38:	str	r1, [r6]
    5c3c:	ldr	r3, [sp, #172]	; 0xac
    5c40:	str	r3, [r4]
    5c44:	ldr	r1, [sp, #176]	; 0xb0
    5c48:	str	r1, [r5]
    5c4c:	b	5c64 <eval_string+0x820>
    5c50:	ldr	r1, [sp, #172]	; 0xac
    5c54:	cmp	r1, #0
    5c58:	ble	5c64 <eval_string+0x820>
    5c5c:	ldr	r0, [sp, #176]	; 0xb0
    5c60:	bl	0 <free>
    5c64:	ldr	r0, [sp, #164]	; 0xa4
    5c68:	sub	r0, r0, #1
    5c6c:	cmp	r9, r0
    5c70:	bge	5c8c <eval_string+0x848>
    5c74:	add	r0, r7, #8
    5c78:	bl	0 <coda_cursor_goto_next_array_element>
    5c7c:	cmp	r0, #0
    5c80:	beq	5c8c <eval_string+0x848>
    5c84:	mvn	r0, #0
    5c88:	b	7190 <eval_string+0x1d4c>
    5c8c:	add	r9, r9, #1
    5c90:	b	5bbc <eval_string+0x778>
    5c94:	add	r0, r7, #8
    5c98:	add	r2, sp, #72	; 0x48
    5c9c:	add	r2, r2, #3072	; 0xc00
    5ca0:	mov	r3, r0
    5ca4:	mov	lr, #130	; 0x82
    5ca8:	ldr	ip, [r2], #4
    5cac:	subs	lr, lr, #1
    5cb0:	str	ip, [r3], #4
    5cb4:	bne	5ca8 <eval_string+0x864>
    5cb8:	b	718c <eval_string+0x1d48>
    5cbc:	cmp	r3, #42	; 0x2a
    5cc0:	bcs	60ec <eval_string+0xca8>
    5cc4:	cmp	r3, #16
    5cc8:	beq	5ddc <eval_string+0x998>
    5ccc:	cmp	r3, #28
    5cd0:	bne	6ef8 <eval_string+0x1ab4>
    5cd4:	ldr	r2, [r7]
    5cd8:	cmp	r2, #0
    5cdc:	bne	5cf4 <eval_string+0x8b0>
    5ce0:	ldr	r0, [pc, #1808]	; 63f8 <eval_string+0xfb4>
    5ce4:	ldr	r1, [pc, #1820]	; 6408 <eval_string+0xfc4>
    5ce8:	movw	r2, #3449	; 0xd79
    5cec:	ldr	r3, [pc, #1800]	; 63fc <eval_string+0xfb8>
    5cf0:	bl	0 <__assert_fail>
    5cf4:	ldr	ip, [r7]
    5cf8:	ldr	r0, [ip]
    5cfc:	add	r1, sp, #184	; 0xb8
    5d00:	bl	0 <coda_get_product_filename>
    5d04:	cmp	r0, #0
    5d08:	beq	5d14 <eval_string+0x8d0>
    5d0c:	mvn	r0, #0
    5d10:	b	7190 <eval_string+0x1d4c>
    5d14:	ldr	r7, [sp, #184]	; 0xb8
    5d18:	ldr	r0, [sp, #184]	; 0xb8
    5d1c:	ldrb	r1, [r0]
    5d20:	cmp	r1, #0
    5d24:	beq	5d74 <eval_string+0x930>
    5d28:	ldr	ip, [sp, #184]	; 0xb8
    5d2c:	ldrb	r3, [ip]
    5d30:	cmp	r3, #47	; 0x2f
    5d34:	beq	5d50 <eval_string+0x90c>
    5d38:	ldr	r0, [sp, #184]	; 0xb8
    5d3c:	ldrb	r2, [r0]
    5d40:	cmp	r2, #92	; 0x5c
    5d44:	moveq	ip, #1
    5d48:	movne	ip, #0
    5d4c:	b	5d54 <eval_string+0x910>
    5d50:	mov	ip, #1
    5d54:	cmp	ip, #0
    5d58:	beq	5d64 <eval_string+0x920>
    5d5c:	ldr	r0, [sp, #184]	; 0xb8
    5d60:	add	r7, r0, #1
    5d64:	ldr	r1, [sp, #184]	; 0xb8
    5d68:	add	r2, r1, #1
    5d6c:	str	r2, [sp, #184]	; 0xb8
    5d70:	b	5d18 <eval_string+0x8d4>
    5d74:	mov	r1, #0
    5d78:	str	r1, [r6]
    5d7c:	mov	r0, r7
    5d80:	bl	0 <strlen>
    5d84:	str	r0, [r4]
    5d88:	ldr	ip, [r4]
    5d8c:	add	r0, ip, #1
    5d90:	bl	0 <malloc>
    5d94:	str	r0, [r5]
    5d98:	ldr	r2, [r5]
    5d9c:	cmp	r2, #0
    5da0:	bne	5dc8 <eval_string+0x984>
    5da4:	mvn	r0, #0
    5da8:	ldr	r1, [pc, #1604]	; 63f4 <eval_string+0xfb0>
    5dac:	ldr	r2, [r4]
    5db0:	ldr	r3, [pc, #1616]	; 6408 <eval_string+0xfc4>
    5db4:	movw	ip, #3469	; 0xd8d
    5db8:	str	ip, [sp]
    5dbc:	bl	0 <coda_set_error>
    5dc0:	mvn	r0, #0
    5dc4:	b	7190 <eval_string+0x1d4c>
    5dc8:	ldr	r0, [r5]
    5dcc:	ldr	r2, [r4]
    5dd0:	mov	r1, r7
    5dd4:	bl	0 <memcpy>
    5dd8:	b	718c <eval_string+0x1d48>
    5ddc:	mov	r1, #0
    5de0:	mov	r0, #0
    5de4:	str	r0, [sp, #272]	; 0x110
    5de8:	str	r1, [sp, #276]	; 0x114
    5dec:	mvn	r2, #0
    5df0:	mvn	r1, #0
    5df4:	str	r1, [sp, #288]	; 0x120
    5df8:	str	r2, [sp, #292]	; 0x124
    5dfc:	ldr	r2, [r7]
    5e00:	cmp	r2, #0
    5e04:	bne	5e1c <eval_string+0x9d8>
    5e08:	ldr	r0, [pc, #1512]	; 63f8 <eval_string+0xfb4>
    5e0c:	ldr	r1, [pc, #1524]	; 6408 <eval_string+0xfc4>
    5e10:	movw	r2, #2938	; 0xb7a
    5e14:	ldr	r3, [pc, #1504]	; 63fc <eval_string+0xfb8>
    5e18:	bl	0 <__assert_fail>
    5e1c:	add	ip, r7, #8
    5e20:	mov	r2, ip
    5e24:	add	r3, sp, #1584	; 0x630
    5e28:	mov	lr, #130	; 0x82
    5e2c:	ldr	ip, [r2], #4
    5e30:	subs	lr, lr, #1
    5e34:	str	ip, [r3], #4
    5e38:	bne	5e2c <eval_string+0x9e8>
    5e3c:	ldr	r1, [r8, #16]
    5e40:	mov	r0, r7
    5e44:	bl	7608 <eval_cursor>
    5e48:	cmp	r0, #0
    5e4c:	beq	5e58 <eval_string+0xa14>
    5e50:	mvn	r0, #0
    5e54:	b	7190 <eval_string+0x1d4c>
    5e58:	ldr	r2, [r8, #24]
    5e5c:	cmp	r2, #0
    5e60:	beq	5ef4 <eval_string+0xab0>
    5e64:	ldr	r1, [r8, #20]
    5e68:	add	r2, sp, #272	; 0x110
    5e6c:	mov	r0, r7
    5e70:	bl	367c <eval_integer>
    5e74:	cmp	r0, #0
    5e78:	beq	5e84 <eval_string+0xa40>
    5e7c:	mvn	r0, #0
    5e80:	b	7190 <eval_string+0x1d4c>
    5e84:	ldr	r1, [r8, #24]
    5e88:	add	r2, sp, #280	; 0x118
    5e8c:	mov	r0, r7
    5e90:	bl	367c <eval_integer>
    5e94:	cmp	r0, #0
    5e98:	beq	5ea4 <eval_string+0xa60>
    5e9c:	mvn	r0, #0
    5ea0:	b	7190 <eval_string+0x1d4c>
    5ea4:	ldr	r1, [sp, #280]	; 0x118
    5ea8:	ldr	r2, [sp, #284]	; 0x11c
    5eac:	mov	r3, #0
    5eb0:	cmp	r2, r3
    5eb4:	bne	5ec8 <eval_string+0xa84>
    5eb8:	mov	ip, #0
    5ebc:	cmp	r1, ip
    5ec0:	bhi	5ed4 <eval_string+0xa90>
    5ec4:	b	5f8c <eval_string+0xb48>
    5ec8:	mov	r3, #0
    5ecc:	cmp	r2, r3
    5ed0:	ble	5f8c <eval_string+0xb48>
    5ed4:	ldr	r0, [sp, #280]	; 0x118
    5ed8:	ldr	r1, [sp, #284]	; 0x11c
    5edc:	lsl	ip, r1, #3
    5ee0:	orr	r1, ip, r0, lsr #29
    5ee4:	lsl	ip, r0, #3
    5ee8:	str	ip, [sp, #288]	; 0x120
    5eec:	str	r1, [sp, #292]	; 0x124
    5ef0:	b	5f8c <eval_string+0xb48>
    5ef4:	ldr	r3, [r8, #20]
    5ef8:	cmp	r3, #0
    5efc:	beq	5f70 <eval_string+0xb2c>
    5f00:	ldr	r1, [r8, #20]
    5f04:	add	r2, sp, #280	; 0x118
    5f08:	mov	r0, r7
    5f0c:	bl	367c <eval_integer>
    5f10:	cmp	r0, #0
    5f14:	beq	5f20 <eval_string+0xadc>
    5f18:	mvn	r0, #0
    5f1c:	b	7190 <eval_string+0x1d4c>
    5f20:	ldr	r2, [sp, #280]	; 0x118
    5f24:	ldr	ip, [sp, #284]	; 0x11c
    5f28:	mov	r1, #0
    5f2c:	cmp	ip, r1
    5f30:	bne	5f44 <eval_string+0xb00>
    5f34:	mov	r3, #0
    5f38:	cmp	r2, r3
    5f3c:	bhi	5f50 <eval_string+0xb0c>
    5f40:	b	5f8c <eval_string+0xb48>
    5f44:	mov	r1, #0
    5f48:	cmp	ip, r1
    5f4c:	ble	5f8c <eval_string+0xb48>
    5f50:	ldr	r1, [sp, #280]	; 0x118
    5f54:	ldr	r0, [sp, #284]	; 0x11c
    5f58:	lsl	r2, r0, #3
    5f5c:	orr	ip, r2, r1, lsr #29
    5f60:	lsl	r3, r1, #3
    5f64:	str	r3, [sp, #288]	; 0x120
    5f68:	str	ip, [sp, #292]	; 0x124
    5f6c:	b	5f8c <eval_string+0xb48>
    5f70:	add	r0, r7, #8
    5f74:	add	r1, sp, #288	; 0x120
    5f78:	bl	0 <coda_cursor_get_bit_size>
    5f7c:	cmp	r0, #0
    5f80:	beq	5f8c <eval_string+0xb48>
    5f84:	mvn	r0, #0
    5f88:	b	7190 <eval_string+0x1d4c>
    5f8c:	ldr	r3, [sp, #292]	; 0x124
    5f90:	cmp	r3, #0
    5f94:	bge	5fac <eval_string+0xb68>
    5f98:	mvn	r0, #400	; 0x190
    5f9c:	ldr	r1, [pc, #1120]	; 6404 <eval_string+0xfc0>
    5fa0:	bl	0 <coda_set_error>
    5fa4:	mvn	r0, #0
    5fa8:	b	7190 <eval_string+0x1d4c>
    5fac:	ldr	ip, [sp, #288]	; 0x120
    5fb0:	mov	r3, #0
    5fb4:	and	r2, ip, #7
    5fb8:	orr	r2, r3, r2
    5fbc:	cmp	r2, #0
    5fc0:	bne	5fcc <eval_string+0xb88>
    5fc4:	mov	r1, #0
    5fc8:	b	5fd0 <eval_string+0xb8c>
    5fcc:	mov	r1, #1
    5fd0:	ldr	r2, [sp, #288]	; 0x120
    5fd4:	ldr	ip, [sp, #292]	; 0x124
    5fd8:	asr	r0, ip, #3
    5fdc:	lsr	r2, r2, #3
    5fe0:	orr	r3, r2, ip, lsl #29
    5fe4:	asr	r2, r1, #31
    5fe8:	adds	ip, r3, r1
    5fec:	adc	r3, r0, r2
    5ff0:	str	ip, [sp, #280]	; 0x118
    5ff4:	str	r3, [sp, #284]	; 0x11c
    5ff8:	mov	ip, #0
    5ffc:	str	ip, [r6]
    6000:	ldr	r1, [sp, #280]	; 0x118
    6004:	str	r1, [r4]
    6008:	ldr	r0, [sp, #280]	; 0x118
    600c:	ldr	r1, [sp, #284]	; 0x11c
    6010:	mov	r3, #0
    6014:	cmp	r1, r3
    6018:	bne	602c <eval_string+0xbe8>
    601c:	mov	r2, #0
    6020:	cmp	r0, r2
    6024:	bhi	6038 <eval_string+0xbf4>
    6028:	b	60c0 <eval_string+0xc7c>
    602c:	mov	r2, #0
    6030:	cmp	r1, r2
    6034:	ble	60c0 <eval_string+0xc7c>
    6038:	ldr	ip, [sp, #280]	; 0x118
    603c:	add	r0, ip, #1
    6040:	bl	0 <malloc>
    6044:	str	r0, [r5]
    6048:	ldr	r0, [r5]
    604c:	cmp	r0, #0
    6050:	bne	6078 <eval_string+0xc34>
    6054:	mvn	r0, #0
    6058:	ldr	r1, [pc, #916]	; 63f4 <eval_string+0xfb0>
    605c:	ldr	r2, [sp, #280]	; 0x118
    6060:	ldr	r3, [pc, #928]	; 6408 <eval_string+0xfc4>
    6064:	movw	ip, #2991	; 0xbaf
    6068:	str	ip, [sp]
    606c:	bl	0 <coda_set_error>
    6070:	mvn	r0, #0
    6074:	b	7190 <eval_string+0x1d4c>
    6078:	add	r0, r7, #8
    607c:	ldr	r1, [r5]
    6080:	ldr	r2, [sp, #272]	; 0x110
    6084:	ldr	r3, [sp, #276]	; 0x114
    6088:	lsl	r3, r3, #3
    608c:	orr	r3, r3, r2, lsr #29
    6090:	lsl	r2, r2, #3
    6094:	ldr	ip, [sp, #288]	; 0x120
    6098:	ldr	r6, [sp, #292]	; 0x124
    609c:	str	r6, [sp, #4]
    60a0:	str	ip, [sp]
    60a4:	bl	0 <coda_cursor_read_bits>
    60a8:	cmp	r0, #0
    60ac:	beq	60c8 <eval_string+0xc84>
    60b0:	ldr	r0, [r5]
    60b4:	bl	0 <free>
    60b8:	mvn	r0, #0
    60bc:	b	7190 <eval_string+0x1d4c>
    60c0:	mov	r1, #0
    60c4:	str	r1, [r5]
    60c8:	add	r0, r7, #8
    60cc:	add	r2, sp, #1584	; 0x630
    60d0:	mov	r3, r0
    60d4:	mov	lr, #130	; 0x82
    60d8:	ldr	ip, [r2], #4
    60dc:	subs	lr, lr, #1
    60e0:	str	ip, [r3], #4
    60e4:	bne	60d8 <eval_string+0xc94>
    60e8:	b	718c <eval_string+0x1d48>
    60ec:	cmp	r3, #42	; 0x2a
    60f0:	beq	6270 <eval_string+0xe2c>
    60f4:	cmp	r3, #55	; 0x37
    60f8:	beq	61f0 <eval_string+0xdac>
    60fc:	cmp	r3, #56	; 0x38
    6100:	bne	6ef8 <eval_string+0x1ab4>
    6104:	ldr	r1, [r8, #16]
    6108:	add	r2, sp, #108	; 0x6c
    610c:	add	r3, sp, #116	; 0x74
    6110:	add	r0, sp, #124	; 0x7c
    6114:	str	r0, [sp]
    6118:	mov	r0, r7
    611c:	bl	5444 <eval_string>
    6120:	cmp	r0, #0
    6124:	beq	6130 <eval_string+0xcec>
    6128:	mvn	r0, #0
    612c:	b	7190 <eval_string+0x1d4c>
    6130:	ldr	r1, [r8, #20]
    6134:	add	r2, sp, #112	; 0x70
    6138:	add	r3, sp, #120	; 0x78
    613c:	add	ip, sp, #128	; 0x80
    6140:	str	ip, [sp]
    6144:	mov	r0, r7
    6148:	bl	5444 <eval_string>
    614c:	cmp	r0, #0
    6150:	beq	6164 <eval_string+0xd20>
    6154:	ldr	r0, [sp, #124]	; 0x7c
    6158:	bl	0 <free>
    615c:	mvn	r0, #0
    6160:	b	7190 <eval_string+0x1d4c>
    6164:	ldr	r0, [sp, #108]	; 0x6c
    6168:	ldr	r1, [sp, #116]	; 0x74
    616c:	ldr	r2, [sp, #124]	; 0x7c
    6170:	ldr	r3, [sp, #112]	; 0x70
    6174:	ldr	r8, [sp, #120]	; 0x78
    6178:	ldr	ip, [sp, #128]	; 0x80
    617c:	str	ip, [sp, #4]
    6180:	str	r8, [sp]
    6184:	bl	d8 <compare_strings>
    6188:	cmp	r0, #0
    618c:	bge	61c0 <eval_string+0xd7c>
    6190:	ldr	r3, [sp, #112]	; 0x70
    6194:	str	r3, [r6]
    6198:	ldr	r0, [sp, #120]	; 0x78
    619c:	str	r0, [r4]
    61a0:	ldr	r0, [sp, #128]	; 0x80
    61a4:	str	r0, [r5]
    61a8:	ldr	r0, [sp, #116]	; 0x74
    61ac:	cmp	r0, #0
    61b0:	ble	718c <eval_string+0x1d48>
    61b4:	ldr	r0, [sp, #124]	; 0x7c
    61b8:	bl	0 <free>
    61bc:	b	718c <eval_string+0x1d48>
    61c0:	ldr	r2, [sp, #108]	; 0x6c
    61c4:	str	r2, [r6]
    61c8:	ldr	r0, [sp, #116]	; 0x74
    61cc:	str	r0, [r4]
    61d0:	ldr	r2, [sp, #124]	; 0x7c
    61d4:	str	r2, [r5]
    61d8:	ldr	r0, [sp, #120]	; 0x78
    61dc:	cmp	r0, #0
    61e0:	ble	718c <eval_string+0x1d48>
    61e4:	ldr	r0, [sp, #128]	; 0x80
    61e8:	bl	0 <free>
    61ec:	b	718c <eval_string+0x1d48>
    61f0:	ldr	r1, [r8, #16]
    61f4:	str	r5, [sp]
    61f8:	mov	r3, r4
    61fc:	mov	r2, r6
    6200:	mov	r0, r7
    6204:	bl	5444 <eval_string>
    6208:	cmp	r0, #0
    620c:	beq	6218 <eval_string+0xdd4>
    6210:	mvn	r0, #0
    6214:	b	7190 <eval_string+0x1d4c>
    6218:	ldr	r1, [r4]
    621c:	cmp	r1, #0
    6220:	ble	6248 <eval_string+0xe04>
    6224:	ldr	r2, [r5]
    6228:	ldr	r1, [r6]
    622c:	ldrb	r2, [r2, r1]
    6230:	and	r0, r2, #255	; 0xff
    6234:	bl	68 <iswhitespace>
    6238:	cmp	r0, #0
    623c:	movne	ip, #1
    6240:	moveq	ip, #0
    6244:	b	624c <eval_string+0xe08>
    6248:	mov	ip, #0
    624c:	cmp	ip, #0
    6250:	beq	718c <eval_string+0x1d48>
    6254:	ldr	r2, [r4]
    6258:	sub	r0, r2, #1
    625c:	str	r0, [r4]
    6260:	ldr	ip, [r6]
    6264:	add	r1, ip, #1
    6268:	str	r1, [r6]
    626c:	b	6218 <eval_string+0xdd4>
    6270:	ldr	r1, [r8, #16]
    6274:	add	r2, sp, #180	; 0xb4
    6278:	mov	r0, r7
    627c:	bl	e80 <eval_boolean>
    6280:	cmp	r0, #0
    6284:	beq	6290 <eval_string+0xe4c>
    6288:	mvn	r0, #0
    628c:	b	7190 <eval_string+0x1d4c>
    6290:	ldr	ip, [sp, #180]	; 0xb4
    6294:	cmp	ip, #0
    6298:	bne	62c4 <eval_string+0xe80>
    629c:	ldr	r1, [r8, #24]
    62a0:	str	r5, [sp]
    62a4:	mov	r3, r4
    62a8:	mov	r2, r6
    62ac:	mov	r0, r7
    62b0:	bl	5444 <eval_string>
    62b4:	cmp	r0, #0
    62b8:	beq	718c <eval_string+0x1d48>
    62bc:	mvn	r0, #0
    62c0:	b	7190 <eval_string+0x1d4c>
    62c4:	ldr	r1, [r8, #20]
    62c8:	str	r5, [sp]
    62cc:	mov	r3, r4
    62d0:	mov	r2, r6
    62d4:	mov	r0, r7
    62d8:	bl	5444 <eval_string>
    62dc:	cmp	r0, #0
    62e0:	beq	718c <eval_string+0x1d48>
    62e4:	mvn	r0, #0
    62e8:	b	7190 <eval_string+0x1d4c>
    62ec:	cmp	r3, #73	; 0x49
    62f0:	bcs	6a14 <eval_string+0x15d0>
    62f4:	cmp	r3, #68	; 0x44
    62f8:	bcs	64cc <eval_string+0x1088>
    62fc:	cmp	r3, #57	; 0x39
    6300:	beq	63c8 <eval_string+0xf84>
    6304:	cmp	r3, #67	; 0x43
    6308:	bne	6ef8 <eval_string+0x1ab4>
    630c:	ldr	r1, [r7]
    6310:	cmp	r1, #0
    6314:	bne	632c <eval_string+0xee8>
    6318:	ldr	r0, [pc, #216]	; 63f8 <eval_string+0xfb4>
    631c:	ldr	r1, [pc, #228]	; 6408 <eval_string+0xfc4>
    6320:	movw	r2, #3624	; 0xe28
    6324:	ldr	r3, [pc, #208]	; 63fc <eval_string+0xfb8>
    6328:	bl	0 <__assert_fail>
    632c:	ldr	r3, [r7]
    6330:	ldr	r0, [r3]
    6334:	add	r1, sp, #232	; 0xe8
    6338:	bl	0 <coda_get_product_class>
    633c:	cmp	r0, #0
    6340:	beq	634c <eval_string+0xf08>
    6344:	mvn	r0, #0
    6348:	b	7190 <eval_string+0x1d4c>
    634c:	mov	r3, #0
    6350:	str	r3, [r6]
    6354:	mov	r1, #0
    6358:	str	r1, [r4]
    635c:	ldr	ip, [sp, #232]	; 0xe8
    6360:	cmp	ip, #0
    6364:	beq	718c <eval_string+0x1d48>
    6368:	ldr	r0, [sp, #232]	; 0xe8
    636c:	bl	0 <strlen>
    6370:	str	r0, [r4]
    6374:	ldr	r3, [r4]
    6378:	add	r0, r3, #1
    637c:	bl	0 <malloc>
    6380:	str	r0, [r5]
    6384:	ldr	ip, [r5]
    6388:	cmp	ip, #0
    638c:	bne	63b4 <eval_string+0xf70>
    6390:	mvn	r0, #0
    6394:	ldr	r1, [pc, #88]	; 63f4 <eval_string+0xfb0>
    6398:	ldr	r2, [r4]
    639c:	ldr	r3, [pc, #100]	; 6408 <eval_string+0xfc4>
    63a0:	movw	ip, #3638	; 0xe36
    63a4:	str	ip, [sp]
    63a8:	bl	0 <coda_set_error>
    63ac:	mvn	r0, #0
    63b0:	b	7190 <eval_string+0x1d4c>
    63b4:	ldr	r0, [r5]
    63b8:	ldr	r1, [sp, #232]	; 0xe8
    63bc:	ldr	r2, [r4]
    63c0:	bl	0 <memcpy>
    63c4:	b	718c <eval_string+0x1d48>
    63c8:	ldr	r1, [r8, #16]
    63cc:	add	r2, sp, #84	; 0x54
    63d0:	add	r3, sp, #92	; 0x5c
    63d4:	add	r0, sp, #100	; 0x64
    63d8:	str	r0, [sp]
    63dc:	mov	r0, r7
    63e0:	bl	5444 <eval_string>
    63e4:	cmp	r0, #0
    63e8:	beq	640c <eval_string+0xfc8>
    63ec:	mvn	r0, #0
    63f0:	b	7190 <eval_string+0x1d4c>
    63f4:	.word	0x00000ce9
    63f8:	.word	0x0000046b
    63fc:	.word	0x00000d91
    6400:	.word	0x00000bc5
    6404:	.word	0x00000c78
    6408:	.word	0x0000053b
    640c:	ldr	r1, [r8, #20]
    6410:	add	r2, sp, #88	; 0x58
    6414:	add	r3, sp, #96	; 0x60
    6418:	add	ip, sp, #104	; 0x68
    641c:	str	ip, [sp]
    6420:	mov	r0, r7
    6424:	bl	5444 <eval_string>
    6428:	cmp	r0, #0
    642c:	beq	6440 <eval_string+0xffc>
    6430:	ldr	r0, [sp, #100]	; 0x64
    6434:	bl	0 <free>
    6438:	mvn	r0, #0
    643c:	b	7190 <eval_string+0x1d4c>
    6440:	ldr	r0, [sp, #84]	; 0x54
    6444:	ldr	r1, [sp, #92]	; 0x5c
    6448:	ldr	r2, [sp, #100]	; 0x64
    644c:	ldr	r3, [sp, #88]	; 0x58
    6450:	ldr	ip, [sp, #96]	; 0x60
    6454:	ldr	r8, [sp, #104]	; 0x68
    6458:	str	r8, [sp, #4]
    645c:	str	ip, [sp]
    6460:	bl	d8 <compare_strings>
    6464:	cmp	r0, #0
    6468:	ble	649c <eval_string+0x1058>
    646c:	ldr	r1, [sp, #88]	; 0x58
    6470:	str	r1, [r6]
    6474:	ldr	r1, [sp, #96]	; 0x60
    6478:	str	r1, [r4]
    647c:	ldr	ip, [sp, #104]	; 0x68
    6480:	str	ip, [r5]
    6484:	ldr	r0, [sp, #92]	; 0x5c
    6488:	cmp	r0, #0
    648c:	ble	718c <eval_string+0x1d48>
    6490:	ldr	r0, [sp, #100]	; 0x64
    6494:	bl	0 <free>
    6498:	b	718c <eval_string+0x1d48>
    649c:	ldr	r2, [sp, #84]	; 0x54
    64a0:	str	r2, [r6]
    64a4:	ldr	r3, [sp, #92]	; 0x5c
    64a8:	str	r3, [r4]
    64ac:	ldr	r3, [sp, #100]	; 0x64
    64b0:	str	r3, [r5]
    64b4:	ldr	r0, [sp, #96]	; 0x60
    64b8:	cmp	r0, #0
    64bc:	ble	718c <eval_string+0x1d48>
    64c0:	ldr	r0, [sp, #104]	; 0x68
    64c4:	bl	0 <free>
    64c8:	b	718c <eval_string+0x1d48>
    64cc:	cmp	r3, #68	; 0x44
    64d0:	beq	6950 <eval_string+0x150c>
    64d4:	cmp	r3, #69	; 0x45
    64d8:	beq	6890 <eval_string+0x144c>
    64dc:	cmp	r3, #71	; 0x47
    64e0:	bne	6ef8 <eval_string+0x1ab4>
    64e4:	mov	r2, #0
    64e8:	str	r2, [sp, #216]	; 0xd8
    64ec:	ldr	r1, [r8, #16]
    64f0:	add	r2, sp, #208	; 0xd0
    64f4:	add	r3, sp, #212	; 0xd4
    64f8:	add	r0, sp, #216	; 0xd8
    64fc:	str	r0, [sp]
    6500:	mov	r0, r7
    6504:	bl	5444 <eval_string>
    6508:	cmp	r0, #0
    650c:	beq	6518 <eval_string+0x10d4>
    6510:	mvn	r0, #0
    6514:	b	7190 <eval_string+0x1d4c>
    6518:	ldr	r1, [r8, #20]
    651c:	add	r2, sp, #196	; 0xc4
    6520:	add	r3, sp, #200	; 0xc8
    6524:	add	r0, sp, #204	; 0xcc
    6528:	str	r0, [sp]
    652c:	mov	r0, r7
    6530:	bl	5444 <eval_string>
    6534:	cmp	r0, #0
    6538:	beq	6558 <eval_string+0x1114>
    653c:	ldr	r0, [sp, #216]	; 0xd8
    6540:	cmp	r0, #0
    6544:	beq	6550 <eval_string+0x110c>
    6548:	ldr	r0, [sp, #216]	; 0xd8
    654c:	bl	0 <free>
    6550:	mvn	r0, #0
    6554:	b	7190 <eval_string+0x1d4c>
    6558:	ldr	r3, [sp, #212]	; 0xd4
    655c:	cmp	r3, #0
    6560:	ble	65a8 <eval_string+0x1164>
    6564:	ldr	ip, [sp, #216]	; 0xd8
    6568:	ldr	r1, [sp, #208]	; 0xd0
    656c:	ldr	r0, [sp, #212]	; 0xd4
    6570:	add	r0, r1, r0
    6574:	mov	r2, #0
    6578:	strb	r2, [ip, r0]
    657c:	ldr	r1, [sp, #216]	; 0xd8
    6580:	ldr	r2, [sp, #208]	; 0xd0
    6584:	add	r0, r1, r2
    6588:	mov	r1, #36	; 0x24
    658c:	add	r2, sp, #188	; 0xbc
    6590:	add	r3, sp, #192	; 0xc0
    6594:	mov	r9, #0
    6598:	str	r9, [sp]
    659c:	bl	0 <coda_pcre_compile>
    65a0:	mov	r9, r0
    65a4:	b	65c8 <eval_string+0x1184>
    65a8:	ldr	r0, [pc, #3152]	; 7200 <eval_string+0x1dbc>
    65ac:	mov	r1, #36	; 0x24
    65b0:	add	r2, sp, #188	; 0xbc
    65b4:	add	r3, sp, #192	; 0xc0
    65b8:	mov	r9, #0
    65bc:	str	r9, [sp]
    65c0:	bl	0 <coda_pcre_compile>
    65c4:	mov	r9, r0
    65c8:	ldr	r0, [sp, #216]	; 0xd8
    65cc:	cmp	r0, #0
    65d0:	beq	65dc <eval_string+0x1198>
    65d4:	ldr	r0, [sp, #216]	; 0xd8
    65d8:	bl	0 <free>
    65dc:	cmp	r9, #0
    65e0:	bne	6614 <eval_string+0x11d0>
    65e4:	mvn	r0, #400	; 0x190
    65e8:	ldr	r1, [pc, #3056]	; 71e0 <eval_string+0x1d9c>
    65ec:	ldr	r2, [sp, #188]	; 0xbc
    65f0:	ldr	r3, [sp, #192]	; 0xc0
    65f4:	bl	0 <coda_set_error>
    65f8:	ldr	r0, [sp, #204]	; 0xcc
    65fc:	cmp	r0, #0
    6600:	beq	660c <eval_string+0x11c8>
    6604:	ldr	r0, [sp, #204]	; 0xcc
    6608:	bl	0 <free>
    660c:	mvn	r0, #0
    6610:	b	7190 <eval_string+0x1d4c>
    6614:	ldr	ip, [r8, #24]
    6618:	ldr	ip, [ip, #4]
    661c:	cmp	ip, #1
    6620:	beq	66f0 <eval_string+0x12ac>
    6624:	ldr	r1, [r8, #24]
    6628:	add	r2, sp, #220	; 0xdc
    662c:	add	r3, sp, #224	; 0xe0
    6630:	add	r0, sp, #228	; 0xe4
    6634:	str	r0, [sp]
    6638:	mov	r0, r7
    663c:	bl	5444 <eval_string>
    6640:	cmp	r0, #0
    6644:	beq	6660 <eval_string+0x121c>
    6648:	ldr	r2, [pc, #2968]	; 71e8 <eval_string+0x1da4>
    664c:	ldr	ip, [r2]
    6650:	mov	r0, r9
    6654:	blx	ip
    6658:	mvn	r0, #0
    665c:	b	7190 <eval_string+0x1d4c>
    6660:	cmp	r4, #0
    6664:	bne	66a0 <eval_string+0x125c>
    6668:	mvn	r0, #400	; 0x190
    666c:	ldr	r1, [pc, #2944]	; 71f4 <eval_string+0x1db0>
    6670:	bl	0 <coda_set_error>
    6674:	ldr	r0, [sp, #228]	; 0xe4
    6678:	cmp	r0, #0
    667c:	beq	6688 <eval_string+0x1244>
    6680:	ldr	r0, [sp, #228]	; 0xe4
    6684:	bl	0 <free>
    6688:	ldr	r3, [pc, #2904]	; 71e8 <eval_string+0x1da4>
    668c:	ldr	ip, [r3]
    6690:	mov	r0, r9
    6694:	blx	ip
    6698:	mvn	r0, #0
    669c:	b	7190 <eval_string+0x1d4c>
    66a0:	ldr	r1, [sp, #228]	; 0xe4
    66a4:	mov	r0, r9
    66a8:	bl	0 <coda_pcre_get_stringnumber>
    66ac:	mov	r7, r0
    66b0:	cmp	r7, #0
    66b4:	bge	66e4 <eval_string+0x12a0>
    66b8:	mvn	r0, #400	; 0x190
    66bc:	ldr	r1, [pc, #2828]	; 71d0 <eval_string+0x1d8c>
    66c0:	bl	0 <coda_set_error>
    66c4:	ldr	r0, [sp, #228]	; 0xe4
    66c8:	bl	0 <free>
    66cc:	ldr	r0, [pc, #2836]	; 71e8 <eval_string+0x1da4>
    66d0:	ldr	ip, [r0]
    66d4:	mov	r0, r9
    66d8:	blx	ip
    66dc:	mvn	r0, #0
    66e0:	b	7190 <eval_string+0x1d4c>
    66e4:	ldr	r0, [sp, #228]	; 0xe4
    66e8:	bl	0 <free>
    66ec:	b	6724 <eval_string+0x12e0>
    66f0:	ldr	r1, [r8, #24]
    66f4:	add	r2, sp, #312	; 0x138
    66f8:	mov	r0, r7
    66fc:	bl	367c <eval_integer>
    6700:	cmp	r0, #0
    6704:	beq	6720 <eval_string+0x12dc>
    6708:	ldr	r2, [pc, #2776]	; 71e8 <eval_string+0x1da4>
    670c:	ldr	ip, [r2]
    6710:	mov	r0, r9
    6714:	blx	ip
    6718:	mvn	r0, #0
    671c:	b	7190 <eval_string+0x1d4c>
    6720:	ldr	r7, [sp, #312]	; 0x138
    6724:	ldr	r1, [sp, #204]	; 0xcc
    6728:	cmp	r1, #0
    672c:	bne	6774 <eval_string+0x1330>
    6730:	ldr	r0, [pc, #2760]	; 7200 <eval_string+0x1dbc>
    6734:	bl	0 <strdup>
    6738:	str	r0, [sp, #204]	; 0xcc
    673c:	ldr	r1, [sp, #204]	; 0xcc
    6740:	cmp	r1, #0
    6744:	bne	6774 <eval_string+0x1330>
    6748:	mvn	r0, #0
    674c:	ldr	r1, [pc, #2688]	; 71d4 <eval_string+0x1d90>
    6750:	ldr	r2, [pc, #2724]	; 71fc <eval_string+0x1db8>
    6754:	movw	r3, #3583	; 0xdff
    6758:	bl	0 <coda_set_error>
    675c:	ldr	ip, [pc, #2692]	; 71e8 <eval_string+0x1da4>
    6760:	ldr	ip, [ip]
    6764:	mov	r0, r9
    6768:	blx	ip
    676c:	mvn	r0, #0
    6770:	b	7190 <eval_string+0x1d4c>
    6774:	mov	r1, #0
    6778:	ldr	r3, [sp, #204]	; 0xcc
    677c:	ldr	ip, [sp, #196]	; 0xc4
    6780:	add	r2, r3, ip
    6784:	ldr	r3, [sp, #200]	; 0xc8
    6788:	mov	r8, #0
    678c:	mov	fp, #0
    6790:	add	r0, sp, #352	; 0x160
    6794:	mov	sl, #48	; 0x30
    6798:	str	sl, [sp, #12]
    679c:	str	r0, [sp, #8]
    67a0:	str	fp, [sp, #4]
    67a4:	str	r8, [sp]
    67a8:	mov	r0, r9
    67ac:	bl	0 <coda_pcre_exec>
    67b0:	mov	r8, r0
    67b4:	ldr	r3, [pc, #2604]	; 71e8 <eval_string+0x1da4>
    67b8:	ldr	ip, [r3]
    67bc:	mov	r0, r9
    67c0:	blx	ip
    67c4:	cmp	r8, #0
    67c8:	blt	67d4 <eval_string+0x1390>
    67cc:	mov	r0, #0
    67d0:	b	67e0 <eval_string+0x139c>
    67d4:	cmn	r8, #1
    67d8:	movne	r0, #1
    67dc:	moveq	r0, #0
    67e0:	cmp	r0, #0
    67e4:	beq	6808 <eval_string+0x13c4>
    67e8:	mvn	r0, #400	; 0x190
    67ec:	ldr	r1, [pc, #2536]	; 71dc <eval_string+0x1d98>
    67f0:	mov	r2, r8
    67f4:	bl	0 <coda_set_error>
    67f8:	ldr	r0, [sp, #204]	; 0xcc
    67fc:	bl	0 <free>
    6800:	mvn	r0, #0
    6804:	b	7190 <eval_string+0x1d4c>
    6808:	cmp	r8, #0
    680c:	bne	682c <eval_string+0x13e8>
    6810:	mvn	r0, #400	; 0x190
    6814:	ldr	r1, [pc, #2512]	; 71ec <eval_string+0x1da8>
    6818:	bl	0 <coda_set_error>
    681c:	ldr	r0, [sp, #204]	; 0xcc
    6820:	bl	0 <free>
    6824:	mvn	r0, #0
    6828:	b	7190 <eval_string+0x1d4c>
    682c:	cmp	r7, r8
    6830:	bge	686c <eval_string+0x1428>
    6834:	add	r1, sp, #352	; 0x160
    6838:	ldr	ip, [r1, r7, lsl #3]
    683c:	str	ip, [r6]
    6840:	add	r3, sp, #352	; 0x160
    6844:	lsl	r1, r7, #3
    6848:	add	r0, r3, r1
    684c:	ldr	r1, [r0, #4]
    6850:	add	r3, sp, #352	; 0x160
    6854:	ldr	r0, [r3, r7, lsl #3]
    6858:	sub	ip, r1, r0
    685c:	str	ip, [r4]
    6860:	ldr	r1, [sp, #204]	; 0xcc
    6864:	str	r1, [r5]
    6868:	b	718c <eval_string+0x1d48>
    686c:	mov	r0, #0
    6870:	str	r0, [r6]
    6874:	mov	r0, #0
    6878:	str	r0, [r4]
    687c:	mov	r1, #0
    6880:	str	r1, [r5]
    6884:	ldr	r0, [sp, #204]	; 0xcc
    6888:	bl	0 <free>
    688c:	b	718c <eval_string+0x1d48>
    6890:	ldr	r3, [r7]
    6894:	cmp	r3, #0
    6898:	bne	68b0 <eval_string+0x146c>
    689c:	ldr	r0, [pc, #2340]	; 71c8 <eval_string+0x1d84>
    68a0:	ldr	r1, [pc, #2388]	; 71fc <eval_string+0x1db8>
    68a4:	movw	r2, #3676	; 0xe5c
    68a8:	ldr	r3, [pc, #2332]	; 71cc <eval_string+0x1d88>
    68ac:	bl	0 <__assert_fail>
    68b0:	ldr	r1, [r7]
    68b4:	ldr	r0, [r1]
    68b8:	add	r1, sp, #240	; 0xf0
    68bc:	bl	0 <coda_get_product_type>
    68c0:	cmp	r0, #0
    68c4:	beq	68d0 <eval_string+0x148c>
    68c8:	mvn	r0, #0
    68cc:	b	7190 <eval_string+0x1d4c>
    68d0:	mov	r0, #0
    68d4:	str	r0, [r6]
    68d8:	mov	r3, #0
    68dc:	str	r3, [r4]
    68e0:	ldr	r3, [sp, #240]	; 0xf0
    68e4:	cmp	r3, #0
    68e8:	beq	718c <eval_string+0x1d48>
    68ec:	ldr	r0, [sp, #240]	; 0xf0
    68f0:	bl	0 <strlen>
    68f4:	str	r0, [r4]
    68f8:	ldr	r0, [r4]
    68fc:	add	r0, r0, #1
    6900:	bl	0 <malloc>
    6904:	str	r0, [r5]
    6908:	ldr	ip, [r5]
    690c:	cmp	ip, #0
    6910:	bne	693c <eval_string+0x14f8>
    6914:	mvn	r0, #0
    6918:	ldr	r1, [pc, #2204]	; 71bc <eval_string+0x1d78>
    691c:	ldr	r2, [r4]
    6920:	add	r2, r2, #1
    6924:	ldr	r3, [pc, #2256]	; 71fc <eval_string+0x1db8>
    6928:	movw	r4, #3690	; 0xe6a
    692c:	str	r4, [sp]
    6930:	bl	0 <coda_set_error>
    6934:	mvn	r0, #0
    6938:	b	7190 <eval_string+0x1d4c>
    693c:	ldr	r0, [r5]
    6940:	ldr	r1, [sp, #240]	; 0xf0
    6944:	ldr	r2, [r4]
    6948:	bl	0 <memcpy>
    694c:	b	718c <eval_string+0x1d48>
    6950:	ldr	r3, [r7]
    6954:	cmp	r3, #0
    6958:	bne	6970 <eval_string+0x152c>
    695c:	ldr	r0, [pc, #2148]	; 71c8 <eval_string+0x1d84>
    6960:	ldr	r1, [pc, #2196]	; 71fc <eval_string+0x1db8>
    6964:	movw	r2, #3650	; 0xe42
    6968:	ldr	r3, [pc, #2140]	; 71cc <eval_string+0x1d88>
    696c:	bl	0 <__assert_fail>
    6970:	ldr	r1, [r7]
    6974:	ldr	r0, [r1]
    6978:	add	r1, sp, #236	; 0xec
    697c:	bl	0 <coda_get_product_format>
    6980:	cmp	r0, #0
    6984:	beq	6990 <eval_string+0x154c>
    6988:	mvn	r0, #0
    698c:	b	7190 <eval_string+0x1d4c>
    6990:	ldr	r0, [sp, #236]	; 0xec
    6994:	bl	0 <coda_type_get_format_name>
    6998:	mov	r7, r0
    699c:	mov	r2, #0
    69a0:	str	r2, [r6]
    69a4:	mov	r2, #0
    69a8:	str	r2, [r4]
    69ac:	cmp	r7, #0
    69b0:	beq	718c <eval_string+0x1d48>
    69b4:	mov	r0, r7
    69b8:	bl	0 <strlen>
    69bc:	str	r0, [r4]
    69c0:	ldr	r2, [r4]
    69c4:	add	r0, r2, #1
    69c8:	bl	0 <malloc>
    69cc:	str	r0, [r5]
    69d0:	ldr	r0, [r5]
    69d4:	cmp	r0, #0
    69d8:	bne	6a00 <eval_string+0x15bc>
    69dc:	mvn	r0, #0
    69e0:	ldr	r1, [pc, #2004]	; 71bc <eval_string+0x1d78>
    69e4:	ldr	r2, [r4]
    69e8:	ldr	r3, [pc, #2060]	; 71fc <eval_string+0x1db8>
    69ec:	movw	ip, #3665	; 0xe51
    69f0:	str	ip, [sp]
    69f4:	bl	0 <coda_set_error>
    69f8:	mvn	r0, #0
    69fc:	b	7190 <eval_string+0x1d4c>
    6a00:	ldr	r0, [r5]
    6a04:	ldr	r2, [r4]
    6a08:	mov	r1, r7
    6a0c:	bl	0 <memcpy>
    6a10:	b	718c <eval_string+0x1d48>
    6a14:	cmp	r3, #77	; 0x4d
    6a18:	bcs	6e60 <eval_string+0x1a1c>
    6a1c:	cmp	r3, #73	; 0x49
    6a20:	beq	6ddc <eval_string+0x1998>
    6a24:	cmp	r3, #75	; 0x4b
    6a28:	beq	6bc4 <eval_string+0x1780>
    6a2c:	cmp	r3, #76	; 0x4c
    6a30:	bne	6ef8 <eval_string+0x1ab4>
    6a34:	ldr	r1, [r8, #16]
    6a38:	add	r2, sp, #320	; 0x140
    6a3c:	mov	r0, r7
    6a40:	bl	26a8 <eval_float>
    6a44:	cmp	r0, #0
    6a48:	beq	6a54 <eval_string+0x1610>
    6a4c:	mvn	r0, #0
    6a50:	b	7190 <eval_string+0x1d4c>
    6a54:	ldr	r2, [r8, #20]
    6a58:	cmp	r2, #0
    6a5c:	beq	6ae8 <eval_string+0x16a4>
    6a60:	ldr	r1, [r8, #20]
    6a64:	add	r2, sp, #244	; 0xf4
    6a68:	add	r3, sp, #248	; 0xf8
    6a6c:	add	r0, sp, #56	; 0x38
    6a70:	str	r0, [sp]
    6a74:	mov	r0, r7
    6a78:	bl	5444 <eval_string>
    6a7c:	cmp	r0, #0
    6a80:	beq	6a8c <eval_string+0x1648>
    6a84:	mvn	r0, #0
    6a88:	b	7190 <eval_string+0x1d4c>
    6a8c:	ldr	r3, [sp, #248]	; 0xf8
    6a90:	cmp	r3, #0
    6a94:	bge	6aac <eval_string+0x1668>
    6a98:	mvn	r0, #400	; 0x190
    6a9c:	ldr	r1, [pc, #1868]	; 71f0 <eval_string+0x1dac>
    6aa0:	bl	0 <coda_set_error>
    6aa4:	mvn	r0, #0
    6aa8:	b	7190 <eval_string+0x1d4c>
    6aac:	ldr	r2, [sp, #248]	; 0xf8
    6ab0:	cmp	r2, #0
    6ab4:	bne	6acc <eval_string+0x1688>
    6ab8:	mvn	r0, #400	; 0x190
    6abc:	ldr	r1, [pc, #1788]	; 71c0 <eval_string+0x1d7c>
    6ac0:	bl	0 <coda_set_error>
    6ac4:	mvn	r0, #0
    6ac8:	b	7190 <eval_string+0x1d4c>
    6acc:	ldr	r2, [sp, #56]	; 0x38
    6ad0:	ldr	r1, [sp, #244]	; 0xf4
    6ad4:	ldr	r3, [sp, #248]	; 0xf8
    6ad8:	add	r0, r1, r3
    6adc:	mov	r1, #0
    6ae0:	strb	r1, [r2, r0]
    6ae4:	b	6b04 <eval_string+0x16c0>
    6ae8:	ldr	r3, [pc, #1780]	; 71e4 <eval_string+0x1da0>
    6aec:	str	r3, [sp, #56]	; 0x38
    6af0:	ldr	r0, [sp, #56]	; 0x38
    6af4:	bl	0 <strlen>
    6af8:	str	r0, [sp, #248]	; 0xf8
    6afc:	mov	r2, #0
    6b00:	str	r2, [sp, #244]	; 0xf4
    6b04:	ldr	r0, [sp, #248]	; 0xf8
    6b08:	add	r0, r0, #1
    6b0c:	bl	0 <malloc>
    6b10:	str	r0, [r5]
    6b14:	ldr	r3, [r5]
    6b18:	cmp	r3, #0
    6b1c:	bne	6b5c <eval_string+0x1718>
    6b20:	ldr	ip, [r8, #20]
    6b24:	cmp	ip, #0
    6b28:	beq	6b34 <eval_string+0x16f0>
    6b2c:	ldr	r0, [sp, #56]	; 0x38
    6b30:	bl	0 <free>
    6b34:	mvn	r0, #0
    6b38:	ldr	r1, [pc, #1660]	; 71bc <eval_string+0x1d78>
    6b3c:	ldr	r2, [r4]
    6b40:	add	r2, r2, #1
    6b44:	ldr	r3, [pc, #1712]	; 71fc <eval_string+0x1db8>
    6b48:	movw	r4, #3740	; 0xe9c
    6b4c:	str	r4, [sp]
    6b50:	bl	0 <coda_set_error>
    6b54:	mvn	r0, #0
    6b58:	b	7190 <eval_string+0x1d4c>
    6b5c:	vldr	d0, [sp, #320]	; 0x140
    6b60:	ldr	ip, [sp, #56]	; 0x38
    6b64:	ldr	r2, [sp, #244]	; 0xf4
    6b68:	add	r0, ip, r2
    6b6c:	ldr	r1, [r5]
    6b70:	bl	0 <coda_time_double_to_string>
    6b74:	cmp	r0, #0
    6b78:	beq	6b98 <eval_string+0x1754>
    6b7c:	ldr	r0, [r8, #20]
    6b80:	cmp	r0, #0
    6b84:	beq	6b90 <eval_string+0x174c>
    6b88:	ldr	r0, [sp, #56]	; 0x38
    6b8c:	bl	0 <free>
    6b90:	mvn	r0, #0
    6b94:	b	7190 <eval_string+0x1d4c>
    6b98:	mov	r2, #0
    6b9c:	str	r2, [r6]
    6ba0:	ldr	r0, [r5]
    6ba4:	bl	0 <strlen>
    6ba8:	str	r0, [r4]
    6bac:	ldr	r0, [r8, #20]
    6bb0:	cmp	r0, #0
    6bb4:	beq	718c <eval_string+0x1d48>
    6bb8:	ldr	r0, [sp, #56]	; 0x38
    6bbc:	bl	0 <free>
    6bc0:	b	718c <eval_string+0x1d48>
    6bc4:	ldr	r1, [r8, #16]
    6bc8:	ldr	r1, [r1, #4]
    6bcc:	cmp	r1, #4
    6bd0:	bne	6d60 <eval_string+0x191c>
    6bd4:	ldr	r0, [r7]
    6bd8:	cmp	r0, #0
    6bdc:	bne	6bf4 <eval_string+0x17b0>
    6be0:	ldr	r0, [pc, #1504]	; 71c8 <eval_string+0x1d84>
    6be4:	ldr	r1, [pc, #1552]	; 71fc <eval_string+0x1db8>
    6be8:	movw	r2, #2865	; 0xb31
    6bec:	ldr	r3, [pc, #1496]	; 71cc <eval_string+0x1d88>
    6bf0:	bl	0 <__assert_fail>
    6bf4:	add	r1, r7, #8
    6bf8:	mov	r2, r1
    6bfc:	add	r3, sp, #40	; 0x28
    6c00:	add	r3, r3, #1024	; 0x400
    6c04:	mov	lr, #130	; 0x82
    6c08:	ldr	ip, [r2], #4
    6c0c:	subs	lr, lr, #1
    6c10:	str	ip, [r3], #4
    6c14:	bne	6c08 <eval_string+0x17c4>
    6c18:	ldr	r1, [r8, #16]
    6c1c:	mov	r0, r7
    6c20:	bl	7608 <eval_cursor>
    6c24:	cmp	r0, #0
    6c28:	beq	6c34 <eval_string+0x17f0>
    6c2c:	mvn	r0, #0
    6c30:	b	7190 <eval_string+0x1d4c>
    6c34:	mov	r0, #0
    6c38:	str	r0, [r6]
    6c3c:	add	r0, r7, #8
    6c40:	mov	r1, r4
    6c44:	bl	0 <coda_cursor_get_string_length>
    6c48:	cmp	r0, #0
    6c4c:	beq	6c58 <eval_string+0x1814>
    6c50:	mvn	r0, #0
    6c54:	b	7190 <eval_string+0x1d4c>
    6c58:	ldr	r2, [r8, #20]
    6c5c:	cmp	r2, #0
    6c60:	beq	6cb8 <eval_string+0x1874>
    6c64:	ldr	r1, [r8, #20]
    6c68:	add	r2, sp, #256	; 0x100
    6c6c:	mov	r0, r7
    6c70:	bl	367c <eval_integer>
    6c74:	cmp	r0, #0
    6c78:	beq	6c84 <eval_string+0x1840>
    6c7c:	mvn	r0, #0
    6c80:	b	7190 <eval_string+0x1d4c>
    6c84:	ldr	ip, [r4]
    6c88:	asr	r3, ip, #31
    6c8c:	ldr	r2, [sp, #256]	; 0x100
    6c90:	ldr	r0, [sp, #260]	; 0x104
    6c94:	cmp	r3, r0
    6c98:	bne	6ca8 <eval_string+0x1864>
    6c9c:	cmp	ip, r2
    6ca0:	bhi	6cb0 <eval_string+0x186c>
    6ca4:	b	6cb8 <eval_string+0x1874>
    6ca8:	cmp	r3, r0
    6cac:	ble	6cb8 <eval_string+0x1874>
    6cb0:	ldr	ip, [sp, #256]	; 0x100
    6cb4:	str	ip, [r4]
    6cb8:	ldr	r3, [r4]
    6cbc:	cmp	r3, #0
    6cc0:	ble	6d30 <eval_string+0x18ec>
    6cc4:	ldr	r0, [r4]
    6cc8:	add	r0, r0, #1
    6ccc:	bl	0 <malloc>
    6cd0:	str	r0, [r5]
    6cd4:	ldr	ip, [r5]
    6cd8:	cmp	ip, #0
    6cdc:	bne	6d04 <eval_string+0x18c0>
    6ce0:	mvn	r0, #0
    6ce4:	ldr	r1, [pc, #1232]	; 71bc <eval_string+0x1d78>
    6ce8:	ldr	r2, [r4]
    6cec:	ldr	r3, [pc, #1288]	; 71fc <eval_string+0x1db8>
    6cf0:	movw	ip, #2895	; 0xb4f
    6cf4:	str	ip, [sp]
    6cf8:	bl	0 <coda_set_error>
    6cfc:	mvn	r0, #0
    6d00:	b	7190 <eval_string+0x1d4c>
    6d04:	add	r0, r7, #8
    6d08:	ldr	r1, [r5]
    6d0c:	ldr	r2, [r4]
    6d10:	add	r2, r2, #1
    6d14:	bl	0 <coda_cursor_read_string>
    6d18:	cmp	r0, #0
    6d1c:	beq	6d38 <eval_string+0x18f4>
    6d20:	ldr	r0, [r5]
    6d24:	bl	0 <free>
    6d28:	mvn	r0, #0
    6d2c:	b	7190 <eval_string+0x1d4c>
    6d30:	mov	r0, #0
    6d34:	str	r0, [r5]
    6d38:	add	r0, r7, #8
    6d3c:	add	r2, sp, #40	; 0x28
    6d40:	add	r2, r2, #1024	; 0x400
    6d44:	mov	r3, r0
    6d48:	mov	lr, #130	; 0x82
    6d4c:	ldr	ip, [r2], #4
    6d50:	subs	lr, lr, #1
    6d54:	str	ip, [r3], #4
    6d58:	bne	6d4c <eval_string+0x1908>
    6d5c:	b	718c <eval_string+0x1d48>
    6d60:	ldr	r1, [r8, #16]
    6d64:	add	r2, sp, #264	; 0x108
    6d68:	mov	r0, r7
    6d6c:	bl	367c <eval_integer>
    6d70:	cmp	r0, #0
    6d74:	beq	6d80 <eval_string+0x193c>
    6d78:	mvn	r0, #0
    6d7c:	b	7190 <eval_string+0x1d4c>
    6d80:	ldr	r0, [sp, #264]	; 0x108
    6d84:	ldr	r1, [sp, #268]	; 0x10c
    6d88:	add	r2, sp, #328	; 0x148
    6d8c:	bl	0 <coda_str64>
    6d90:	add	r0, sp, #328	; 0x148
    6d94:	bl	0 <strdup>
    6d98:	str	r0, [r5]
    6d9c:	ldr	ip, [r5]
    6da0:	cmp	ip, #0
    6da4:	bne	6dc4 <eval_string+0x1980>
    6da8:	mvn	r0, #0
    6dac:	ldr	r1, [pc, #1056]	; 71d4 <eval_string+0x1d90>
    6db0:	ldr	r2, [pc, #1092]	; 71fc <eval_string+0x1db8>
    6db4:	movw	r3, #2924	; 0xb6c
    6db8:	bl	0 <coda_set_error>
    6dbc:	mvn	r0, #0
    6dc0:	b	7190 <eval_string+0x1d4c>
    6dc4:	mov	r2, #0
    6dc8:	str	r2, [r6]
    6dcc:	add	r0, sp, #328	; 0x148
    6dd0:	bl	0 <strlen>
    6dd4:	str	r0, [r4]
    6dd8:	b	718c <eval_string+0x1d48>
    6ddc:	ldr	r1, [r8, #16]
    6de0:	str	r5, [sp]
    6de4:	mov	r3, r4
    6de8:	mov	r2, r6
    6dec:	mov	r0, r7
    6df0:	bl	5444 <eval_string>
    6df4:	cmp	r0, #0
    6df8:	beq	6e04 <eval_string+0x19c0>
    6dfc:	mvn	r0, #0
    6e00:	b	7190 <eval_string+0x1d4c>
    6e04:	ldr	r0, [r4]
    6e08:	cmp	r0, #0
    6e0c:	ble	6e44 <eval_string+0x1a00>
    6e10:	ldr	r2, [r5]
    6e14:	ldr	ip, [r6]
    6e18:	ldr	r3, [r4]
    6e1c:	add	r3, ip, r3
    6e20:	add	r3, r2, r3
    6e24:	sub	lr, r3, #4096	; 0x1000
    6e28:	ldrb	r3, [lr, #4095]	; 0xfff
    6e2c:	and	r0, r3, #255	; 0xff
    6e30:	bl	68 <iswhitespace>
    6e34:	cmp	r0, #0
    6e38:	movne	r1, #1
    6e3c:	moveq	r1, #0
    6e40:	b	6e48 <eval_string+0x1a04>
    6e44:	mov	r1, #0
    6e48:	cmp	r1, #0
    6e4c:	beq	718c <eval_string+0x1d48>
    6e50:	ldr	ip, [r4]
    6e54:	sub	r2, ip, #1
    6e58:	str	r2, [r4]
    6e5c:	b	6e04 <eval_string+0x19c0>
    6e60:	cmp	r3, #77	; 0x4d
    6e64:	beq	6ff4 <eval_string+0x1bb0>
    6e68:	cmp	r3, #80	; 0x50
    6e6c:	beq	6f18 <eval_string+0x1ad4>
    6e70:	cmp	r3, #86	; 0x56
    6e74:	bne	6ef8 <eval_string+0x1ab4>
    6e78:	ldr	r2, [r8, #12]
    6e7c:	ldrb	ip, [r2]
    6e80:	sub	fp, ip, #105	; 0x69
    6e84:	lsl	r0, fp, #3
    6e88:	add	ip, r7, r0
    6e8c:	ldr	r9, [ip, #528]	; 0x210
    6e90:	ldr	sl, [ip, #532]	; 0x214
    6e94:	ldr	r1, [r8, #16]
    6e98:	lsl	r2, fp, #3
    6e9c:	add	r2, r7, r2
    6ea0:	add	r2, r2, #528	; 0x210
    6ea4:	mov	r0, r7
    6ea8:	bl	367c <eval_integer>
    6eac:	cmp	r0, #0
    6eb0:	beq	6ebc <eval_string+0x1a78>
    6eb4:	mvn	r0, #0
    6eb8:	b	7190 <eval_string+0x1d4c>
    6ebc:	ldr	r1, [r8, #20]
    6ec0:	str	r5, [sp]
    6ec4:	mov	r3, r4
    6ec8:	mov	r2, r6
    6ecc:	mov	r0, r7
    6ed0:	bl	5444 <eval_string>
    6ed4:	cmp	r0, #0
    6ed8:	beq	6ee4 <eval_string+0x1aa0>
    6edc:	mvn	r0, #0
    6ee0:	b	7190 <eval_string+0x1d4c>
    6ee4:	lsl	r3, fp, #3
    6ee8:	add	ip, r7, r3
    6eec:	str	r9, [ip, #528]	; 0x210
    6ef0:	str	sl, [ip, #532]	; 0x214
    6ef4:	b	718c <eval_string+0x1d48>
    6ef8:	ldr	r0, [pc, #760]	; 71f8 <eval_string+0x1db4>
    6efc:	ldr	r1, [pc, #760]	; 71fc <eval_string+0x1db8>
    6f00:	movw	r2, #3794	; 0xed2
    6f04:	ldr	r3, [pc, #704]	; 71cc <eval_string+0x1d88>
    6f08:	bl	0 <__assert_fail>
    6f0c:	mov	r0, #1
    6f10:	bl	0 <exit>
    6f14:	b	718c <eval_string+0x1d48>
    6f18:	ldr	r1, [r8, #16]
    6f1c:	str	r5, [sp]
    6f20:	mov	r3, r4
    6f24:	mov	r2, r6
    6f28:	mov	r0, r7
    6f2c:	bl	5444 <eval_string>
    6f30:	cmp	r0, #0
    6f34:	beq	6f40 <eval_string+0x1afc>
    6f38:	mvn	r0, #0
    6f3c:	b	7190 <eval_string+0x1d4c>
    6f40:	ldr	r0, [r4]
    6f44:	cmp	r0, #0
    6f48:	ble	6f70 <eval_string+0x1b2c>
    6f4c:	ldr	r1, [r5]
    6f50:	ldr	ip, [r6]
    6f54:	ldrb	r3, [r1, ip]
    6f58:	and	r0, r3, #255	; 0xff
    6f5c:	bl	68 <iswhitespace>
    6f60:	cmp	r0, #0
    6f64:	movne	r2, #1
    6f68:	moveq	r2, #0
    6f6c:	b	6f74 <eval_string+0x1b30>
    6f70:	mov	r2, #0
    6f74:	cmp	r2, #0
    6f78:	beq	6f98 <eval_string+0x1b54>
    6f7c:	ldr	r2, [r4]
    6f80:	sub	ip, r2, #1
    6f84:	str	ip, [r4]
    6f88:	ldr	r2, [r6]
    6f8c:	add	r0, r2, #1
    6f90:	str	r0, [r6]
    6f94:	b	6f40 <eval_string+0x1afc>
    6f98:	ldr	ip, [r4]
    6f9c:	cmp	ip, #0
    6fa0:	ble	6fd8 <eval_string+0x1b94>
    6fa4:	ldr	r3, [r5]
    6fa8:	ldr	r0, [r6]
    6fac:	ldr	r2, [r4]
    6fb0:	add	r2, r0, r2
    6fb4:	add	ip, r3, r2
    6fb8:	sub	lr, ip, #4096	; 0x1000
    6fbc:	ldrb	r2, [lr, #4095]	; 0xfff
    6fc0:	and	r0, r2, #255	; 0xff
    6fc4:	bl	68 <iswhitespace>
    6fc8:	cmp	r0, #0
    6fcc:	movne	r0, #1
    6fd0:	moveq	r0, #0
    6fd4:	b	6fdc <eval_string+0x1b98>
    6fd8:	mov	r0, #0
    6fdc:	cmp	r0, #0
    6fe0:	beq	718c <eval_string+0x1d48>
    6fe4:	ldr	r2, [r4]
    6fe8:	sub	r3, r2, #1
    6fec:	str	r3, [r4]
    6ff0:	b	6f98 <eval_string+0x1b54>
    6ff4:	ldr	r1, [r8, #16]
    6ff8:	add	r2, sp, #296	; 0x128
    6ffc:	mov	r0, r7
    7000:	bl	367c <eval_integer>
    7004:	cmp	r0, #0
    7008:	beq	7014 <eval_string+0x1bd0>
    700c:	mvn	r0, #0
    7010:	b	7190 <eval_string+0x1d4c>
    7014:	ldr	r2, [sp, #300]	; 0x12c
    7018:	cmp	r2, #0
    701c:	bge	7034 <eval_string+0x1bf0>
    7020:	mvn	r0, #400	; 0x190
    7024:	ldr	r1, [pc, #408]	; 71c4 <eval_string+0x1d80>
    7028:	bl	0 <coda_set_error>
    702c:	mvn	r0, #0
    7030:	b	7190 <eval_string+0x1d4c>
    7034:	ldr	r1, [r8, #20]
    7038:	add	r2, sp, #304	; 0x130
    703c:	mov	r0, r7
    7040:	bl	367c <eval_integer>
    7044:	cmp	r0, #0
    7048:	beq	7054 <eval_string+0x1c10>
    704c:	mvn	r0, #0
    7050:	b	7190 <eval_string+0x1d4c>
    7054:	ldr	r3, [sp, #304]	; 0x130
    7058:	ldr	ip, [sp, #308]	; 0x134
    705c:	orr	r0, ip, r3
    7060:	cmp	r0, #0
    7064:	bne	7088 <eval_string+0x1c44>
    7068:	mov	ip, #0
    706c:	str	ip, [r6]
    7070:	mov	r2, #0
    7074:	str	r2, [r4]
    7078:	mov	r0, #0
    707c:	str	r0, [r5]
    7080:	mov	r0, #0
    7084:	b	7190 <eval_string+0x1d4c>
    7088:	ldr	ip, [sp, #308]	; 0x134
    708c:	cmp	ip, #0
    7090:	bge	70a8 <eval_string+0x1c64>
    7094:	mvn	r0, #400	; 0x190
    7098:	ldr	r1, [pc, #312]	; 71d8 <eval_string+0x1d94>
    709c:	bl	0 <coda_set_error>
    70a0:	mvn	r0, #0
    70a4:	b	7190 <eval_string+0x1d4c>
    70a8:	ldr	r1, [r8, #24]
    70ac:	str	r5, [sp]
    70b0:	mov	r3, r4
    70b4:	mov	r2, r6
    70b8:	mov	r0, r7
    70bc:	bl	5444 <eval_string>
    70c0:	cmp	r0, #0
    70c4:	beq	70d0 <eval_string+0x1c8c>
    70c8:	mvn	r0, #0
    70cc:	b	7190 <eval_string+0x1d4c>
    70d0:	ldr	r2, [r4]
    70d4:	cmp	r2, #0
    70d8:	bne	70e4 <eval_string+0x1ca0>
    70dc:	mov	r0, #0
    70e0:	b	7190 <eval_string+0x1d4c>
    70e4:	ldr	ip, [sp, #296]	; 0x128
    70e8:	ldr	r1, [sp, #300]	; 0x12c
    70ec:	ldr	r2, [r4]
    70f0:	asr	r3, r2, #31
    70f4:	cmp	r1, r3
    70f8:	bne	7108 <eval_string+0x1cc4>
    70fc:	cmp	ip, r2
    7100:	bcs	7110 <eval_string+0x1ccc>
    7104:	b	7138 <eval_string+0x1cf4>
    7108:	cmp	r1, r3
    710c:	ble	7138 <eval_string+0x1cf4>
    7110:	mov	r1, #0
    7114:	str	r1, [r6]
    7118:	mov	r3, #0
    711c:	str	r3, [r4]
    7120:	ldr	r0, [r5]
    7124:	bl	0 <free>
    7128:	mov	r0, #0
    712c:	str	r0, [r5]
    7130:	mov	r0, #0
    7134:	b	7190 <eval_string+0x1d4c>
    7138:	ldr	r1, [r6]
    713c:	ldr	r0, [sp, #296]	; 0x128
    7140:	add	r1, r1, r0
    7144:	str	r1, [r6]
    7148:	ldr	r3, [r4]
    714c:	ldr	r2, [sp, #296]	; 0x128
    7150:	sub	r0, r3, r2
    7154:	str	r0, [r4]
    7158:	ldr	r3, [sp, #304]	; 0x130
    715c:	ldr	ip, [sp, #308]	; 0x134
    7160:	ldr	r0, [r4]
    7164:	asr	r1, r0, #31
    7168:	cmp	ip, r1
    716c:	bne	717c <eval_string+0x1d38>
    7170:	cmp	r3, r0
    7174:	bcc	7184 <eval_string+0x1d40>
    7178:	b	718c <eval_string+0x1d48>
    717c:	cmp	ip, r1
    7180:	bge	718c <eval_string+0x1d48>
    7184:	ldr	r3, [sp, #304]	; 0x130
    7188:	str	r3, [r4]
    718c:	mov	r0, #0
    7190:	ldr	r4, [sp, #24]
    7194:	ldr	r5, [sp, #28]
    7198:	ldr	r6, [sp, #32]
    719c:	ldr	r7, [sp, #36]	; 0x24
    71a0:	ldr	r8, [sp, #40]	; 0x28
    71a4:	ldr	r9, [sp, #44]	; 0x2c
    71a8:	ldr	sl, [sp, #48]	; 0x30
    71ac:	ldr	fp, [sp, #52]	; 0x34
    71b0:	ldr	lr, [sp, #20]
    71b4:	add	sp, sp, #3664	; 0xe50
    71b8:	bx	lr
    71bc:	.word	0x00000ce9
    71c0:	.word	0x000007c8
    71c4:	.word	0x00000388
    71c8:	.word	0x0000046b
    71cc:	.word	0x00000d91
    71d0:	.word	0x0000029b
    71d4:	.word	0x00000bc5
    71d8:	.word	0x00000625
    71dc:	.word	0x0000026a
    71e0:	.word	0x000006da
    71e4:	.word	0x00000b5c
    71e8:	.word	0x00000000
    71ec:	.word	0x000004b9
    71f0:	.word	0x00000a57
    71f4:	.word	0x00000923
    71f8:	.word	0x00000bf8
    71fc:	.word	0x0000053b
    7200:	.word	0x00000d52

00007204 <eval_void>:
    7204:	mov	ip, sp
    7208:	sub	sp, sp, #80	; 0x50
    720c:	str	ip, [sp]
    7210:	str	lr, [sp, #4]
    7214:	str	r4, [sp, #8]
    7218:	str	r5, [sp, #12]
    721c:	str	r6, [sp, #16]
    7220:	str	r7, [sp, #20]
    7224:	str	r8, [sp, #24]
    7228:	str	r9, [sp, #28]
    722c:	mov	r5, r1
    7230:	mov	r4, r0
    7234:	ldr	r3, [r5]
    7238:	cmp	r3, #74	; 0x4a
    723c:	bcs	74a8 <eval_void+0x2a4>
    7240:	cmp	r3, #31
    7244:	beq	726c <eval_void+0x68>
    7248:	cmp	r3, #39	; 0x27
    724c:	bne	7574 <eval_void+0x370>
    7250:	ldr	r1, [r5, #16]
    7254:	mov	r0, r4
    7258:	bl	7608 <eval_cursor>
    725c:	cmp	r0, #0
    7260:	beq	75cc <eval_void+0x3c8>
    7264:	mvn	r0, #0
    7268:	b	75d0 <eval_void+0x3cc>
    726c:	mov	r0, #0
    7270:	mov	ip, #1
    7274:	str	ip, [sp, #72]	; 0x48
    7278:	str	r0, [sp, #76]	; 0x4c
    727c:	ldr	r1, [r5, #12]
    7280:	ldrb	r0, [r1]
    7284:	sub	r7, r0, #105	; 0x69
    7288:	lsl	r2, r7, #3
    728c:	add	r3, r4, r2
    7290:	ldr	r6, [r3, #528]	; 0x210
    7294:	ldr	r8, [r3, #532]	; 0x214
    7298:	ldr	r1, [r5, #16]
    729c:	add	r2, sp, #56	; 0x38
    72a0:	mov	r0, r4
    72a4:	bl	367c <eval_integer>
    72a8:	cmp	r0, #0
    72ac:	beq	72b8 <eval_void+0xb4>
    72b0:	mvn	r0, #0
    72b4:	b	75d0 <eval_void+0x3cc>
    72b8:	ldr	r1, [r5, #20]
    72bc:	add	r2, sp, #64	; 0x40
    72c0:	mov	r0, r4
    72c4:	bl	367c <eval_integer>
    72c8:	cmp	r0, #0
    72cc:	beq	72d8 <eval_void+0xd4>
    72d0:	mvn	r0, #0
    72d4:	b	75d0 <eval_void+0x3cc>
    72d8:	ldr	r0, [r5, #24]
    72dc:	cmp	r0, #0
    72e0:	beq	732c <eval_void+0x128>
    72e4:	ldr	r1, [r5, #24]
    72e8:	add	r2, sp, #72	; 0x48
    72ec:	mov	r0, r4
    72f0:	bl	367c <eval_integer>
    72f4:	cmp	r0, #0
    72f8:	beq	7304 <eval_void+0x100>
    72fc:	mvn	r0, #0
    7300:	b	75d0 <eval_void+0x3cc>
    7304:	ldr	r1, [sp, #72]	; 0x48
    7308:	ldr	ip, [sp, #76]	; 0x4c
    730c:	orr	r3, ip, r1
    7310:	cmp	r3, #0
    7314:	bne	732c <eval_void+0x128>
    7318:	mvn	r0, #400	; 0x190
    731c:	ldr	r1, [pc, #736]	; 7604 <eval_void+0x400>
    7320:	bl	0 <coda_set_error>
    7324:	mvn	r0, #0
    7328:	b	75d0 <eval_void+0x3cc>
    732c:	ldr	r3, [sp, #72]	; 0x48
    7330:	ldr	r0, [sp, #76]	; 0x4c
    7334:	mov	ip, #0
    7338:	cmp	r0, ip
    733c:	bne	7350 <eval_void+0x14c>
    7340:	mov	r0, #0
    7344:	cmp	r3, r0
    7348:	bhi	73f8 <eval_void+0x1f4>
    734c:	b	735c <eval_void+0x158>
    7350:	mov	r1, #0
    7354:	cmp	r0, r1
    7358:	bgt	73f8 <eval_void+0x1f4>
    735c:	lsl	ip, r7, #3
    7360:	add	r2, r4, ip
    7364:	ldr	r1, [sp, #56]	; 0x38
    7368:	ldr	r3, [sp, #60]	; 0x3c
    736c:	str	r1, [r2, #528]	; 0x210
    7370:	str	r3, [r2, #532]	; 0x214
    7374:	lsl	r3, r7, #3
    7378:	add	ip, r4, r3
    737c:	ldr	r0, [ip, #528]	; 0x210
    7380:	ldr	r3, [ip, #532]	; 0x214
    7384:	ldr	ip, [sp, #64]	; 0x40
    7388:	ldr	r2, [sp, #68]	; 0x44
    738c:	cmp	r3, r2
    7390:	bne	73a0 <eval_void+0x19c>
    7394:	cmp	r0, ip
    7398:	bcs	73a8 <eval_void+0x1a4>
    739c:	b	7494 <eval_void+0x290>
    73a0:	cmp	r3, r2
    73a4:	ble	7494 <eval_void+0x290>
    73a8:	ldr	r1, [r5, #28]
    73ac:	mov	r0, r4
    73b0:	bl	7204 <eval_void>
    73b4:	cmp	r0, #0
    73b8:	beq	73c4 <eval_void+0x1c0>
    73bc:	mvn	r0, #0
    73c0:	b	75d0 <eval_void+0x3cc>
    73c4:	lsl	r3, r7, #3
    73c8:	add	r9, r4, r3
    73cc:	lsl	r2, r7, #3
    73d0:	add	r0, r4, r2
    73d4:	ldr	r2, [r0, #528]	; 0x210
    73d8:	ldr	r1, [r0, #532]	; 0x214
    73dc:	ldr	r3, [sp, #72]	; 0x48
    73e0:	ldr	ip, [sp, #76]	; 0x4c
    73e4:	adds	r2, r2, r3
    73e8:	adc	r1, r1, ip
    73ec:	str	r2, [r9, #528]	; 0x210
    73f0:	str	r1, [r9, #532]	; 0x214
    73f4:	b	7374 <eval_void+0x170>
    73f8:	lsl	r3, r7, #3
    73fc:	add	ip, r4, r3
    7400:	ldr	r2, [sp, #56]	; 0x38
    7404:	ldr	r3, [sp, #60]	; 0x3c
    7408:	str	r2, [ip, #528]	; 0x210
    740c:	str	r3, [ip, #532]	; 0x214
    7410:	lsl	r0, r7, #3
    7414:	add	r1, r4, r0
    7418:	ldr	r0, [r1, #528]	; 0x210
    741c:	ldr	r1, [r1, #532]	; 0x214
    7420:	ldr	ip, [sp, #64]	; 0x40
    7424:	ldr	r2, [sp, #68]	; 0x44
    7428:	cmp	r1, r2
    742c:	bne	743c <eval_void+0x238>
    7430:	cmp	r0, ip
    7434:	bls	7444 <eval_void+0x240>
    7438:	b	7494 <eval_void+0x290>
    743c:	cmp	r1, r2
    7440:	bge	7494 <eval_void+0x290>
    7444:	ldr	r1, [r5, #28]
    7448:	mov	r0, r4
    744c:	bl	7204 <eval_void>
    7450:	cmp	r0, #0
    7454:	beq	7460 <eval_void+0x25c>
    7458:	mvn	r0, #0
    745c:	b	75d0 <eval_void+0x3cc>
    7460:	lsl	r2, r7, #3
    7464:	add	r0, r4, r2
    7468:	lsl	r1, r7, #3
    746c:	add	r3, r4, r1
    7470:	ldr	ip, [r3, #528]	; 0x210
    7474:	ldr	r3, [r3, #532]	; 0x214
    7478:	ldr	r2, [sp, #72]	; 0x48
    747c:	ldr	r1, [sp, #76]	; 0x4c
    7480:	adds	r2, ip, r2
    7484:	adc	r3, r3, r1
    7488:	str	r2, [r0, #528]	; 0x210
    748c:	str	r3, [r0, #532]	; 0x214
    7490:	b	7410 <eval_void+0x20c>
    7494:	lsl	ip, r7, #3
    7498:	add	r0, r4, ip
    749c:	str	r6, [r0, #528]	; 0x210
    74a0:	str	r8, [r0, #532]	; 0x214
    74a4:	b	75cc <eval_void+0x3c8>
    74a8:	cmp	r3, #74	; 0x4a
    74ac:	beq	7594 <eval_void+0x390>
    74b0:	cmp	r3, #84	; 0x54
    74b4:	bne	7574 <eval_void+0x370>
    74b8:	mov	r2, #0
    74bc:	mov	r1, #0
    74c0:	str	r1, [sp, #40]	; 0x28
    74c4:	str	r2, [sp, #44]	; 0x2c
    74c8:	ldr	ip, [r4]
    74cc:	cmp	ip, #0
    74d0:	bne	74e8 <eval_void+0x2e4>
    74d4:	ldr	r0, [pc, #280]	; 75f4 <eval_void+0x3f0>
    74d8:	ldr	r1, [pc, #284]	; 75fc <eval_void+0x3f8>
    74dc:	movw	r2, #3881	; 0xf29
    74e0:	ldr	r3, [pc, #280]	; 7600 <eval_void+0x3fc>
    74e4:	bl	0 <__assert_fail>
    74e8:	ldr	ip, [r5, #16]
    74ec:	cmp	ip, #0
    74f0:	beq	7514 <eval_void+0x310>
    74f4:	ldr	r1, [r5, #16]
    74f8:	add	r2, sp, #40	; 0x28
    74fc:	mov	r0, r4
    7500:	bl	367c <eval_integer>
    7504:	cmp	r0, #0
    7508:	beq	7514 <eval_void+0x310>
    750c:	mvn	r0, #0
    7510:	b	75d0 <eval_void+0x3cc>
    7514:	ldr	r1, [r5, #20]
    7518:	add	r2, sp, #48	; 0x30
    751c:	mov	r0, r4
    7520:	bl	367c <eval_integer>
    7524:	cmp	r0, #0
    7528:	beq	7534 <eval_void+0x330>
    752c:	mvn	r0, #0
    7530:	b	75d0 <eval_void+0x3cc>
    7534:	ldr	r1, [r4]
    7538:	ldr	r0, [r1]
    753c:	ldr	r1, [r5, #12]
    7540:	ldr	r2, [sp, #40]	; 0x28
    7544:	add	r3, sp, #32
    7548:	bl	0 <coda_product_variable_get_pointer>
    754c:	cmp	r0, #0
    7550:	beq	755c <eval_void+0x358>
    7554:	mvn	r0, #0
    7558:	b	75d0 <eval_void+0x3cc>
    755c:	ldr	r0, [sp, #32]
    7560:	ldr	ip, [sp, #48]	; 0x30
    7564:	ldr	r2, [sp, #52]	; 0x34
    7568:	str	ip, [r0]
    756c:	str	r2, [r0, #4]
    7570:	b	75cc <eval_void+0x3c8>
    7574:	ldr	r0, [pc, #124]	; 75f8 <eval_void+0x3f4>
    7578:	ldr	r1, [pc, #124]	; 75fc <eval_void+0x3f8>
    757c:	movw	r2, #3902	; 0xf3e
    7580:	ldr	r3, [pc, #120]	; 7600 <eval_void+0x3fc>
    7584:	bl	0 <__assert_fail>
    7588:	mov	r0, #1
    758c:	bl	0 <exit>
    7590:	b	75cc <eval_void+0x3c8>
    7594:	ldr	r1, [r5, #16]
    7598:	mov	r0, r4
    759c:	bl	7204 <eval_void>
    75a0:	cmp	r0, #0
    75a4:	beq	75b0 <eval_void+0x3ac>
    75a8:	mvn	r0, #0
    75ac:	b	75d0 <eval_void+0x3cc>
    75b0:	ldr	r1, [r5, #20]
    75b4:	mov	r0, r4
    75b8:	bl	7204 <eval_void>
    75bc:	cmp	r0, #0
    75c0:	beq	75cc <eval_void+0x3c8>
    75c4:	mvn	r0, #0
    75c8:	b	75d0 <eval_void+0x3cc>
    75cc:	mov	r0, #0
    75d0:	ldr	r4, [sp, #8]
    75d4:	ldr	r5, [sp, #12]
    75d8:	ldr	r6, [sp, #16]
    75dc:	ldr	r7, [sp, #20]
    75e0:	ldr	r8, [sp, #24]
    75e4:	ldr	r9, [sp, #28]
    75e8:	ldr	lr, [sp, #4]
    75ec:	add	sp, sp, #80	; 0x50
    75f0:	bx	lr
    75f4:	.word	0x0000046b
    75f8:	.word	0x00000bf8
    75fc:	.word	0x0000053b
    7600:	.word	0x00000d9d
    7604:	.word	0x00000814

00007608 <eval_cursor>:
    7608:	mov	ip, sp
    760c:	sub	sp, sp, #48	; 0x30
    7610:	str	ip, [sp]
    7614:	str	lr, [sp, #4]
    7618:	str	r4, [sp, #8]
    761c:	str	r5, [sp, #12]
    7620:	mov	r4, r1
    7624:	mov	r5, r0
    7628:	ldr	r0, [r5]
    762c:	cmp	r0, #0
    7630:	bne	7648 <eval_cursor+0x40>
    7634:	ldr	r0, [pc, #1028]	; 7a40 <eval_cursor+0x438>
    7638:	ldr	r1, [pc, #1036]	; 7a4c <eval_cursor+0x444>
    763c:	movw	r2, #3913	; 0xf49
    7640:	ldr	r3, [pc, #1036]	; 7a54 <eval_cursor+0x44c>
    7644:	bl	0 <__assert_fail>
    7648:	ldr	r3, [r4]
    764c:	cmp	r3, #35	; 0x23
    7650:	bcs	78b8 <eval_cursor+0x2b0>
    7654:	cmp	r3, #33	; 0x21
    7658:	bcs	782c <eval_cursor+0x224>
    765c:	cmp	r3, #10
    7660:	beq	77d0 <eval_cursor+0x1c8>
    7664:	cmp	r3, #32
    7668:	bne	79c4 <eval_cursor+0x3bc>
    766c:	ldr	r2, [r4, #16]
    7670:	cmp	r2, #0
    7674:	bne	7698 <eval_cursor+0x90>
    7678:	add	r0, r5, #8
    767c:	ldr	r1, [r5]
    7680:	ldr	r1, [r1]
    7684:	bl	0 <coda_cursor_set_product>
    7688:	cmp	r0, #0
    768c:	beq	76b4 <eval_cursor+0xac>
    7690:	mvn	r0, #0
    7694:	b	7a28 <eval_cursor+0x420>
    7698:	ldr	r1, [r4, #16]
    769c:	mov	r0, r5
    76a0:	bl	7608 <eval_cursor>
    76a4:	cmp	r0, #0
    76a8:	beq	76b4 <eval_cursor+0xac>
    76ac:	mvn	r0, #0
    76b0:	b	7a28 <eval_cursor+0x420>
    76b4:	ldr	r1, [r4, #20]
    76b8:	add	r2, sp, #40	; 0x28
    76bc:	mov	r0, r5
    76c0:	bl	367c <eval_integer>
    76c4:	cmp	r0, #0
    76c8:	beq	76d4 <eval_cursor+0xcc>
    76cc:	mvn	r0, #0
    76d0:	b	7a28 <eval_cursor+0x420>
    76d4:	ldr	r0, [pc, #872]	; 7a44 <eval_cursor+0x43c>
    76d8:	ldr	r3, [r0]
    76dc:	cmp	r3, #0
    76e0:	bne	77b4 <eval_cursor+0x1ac>
    76e4:	add	r0, r5, #8
    76e8:	add	r1, sp, #16
    76ec:	bl	0 <coda_cursor_get_type_class>
    76f0:	cmp	r0, #0
    76f4:	beq	7700 <eval_cursor+0xf8>
    76f8:	mvn	r0, #0
    76fc:	b	7a28 <eval_cursor+0x420>
    7700:	ldr	r0, [sp, #16]
    7704:	cmp	r0, #1
    7708:	beq	772c <eval_cursor+0x124>
    770c:	ldr	r0, [sp, #16]
    7710:	bl	0 <coda_type_get_class_name>
    7714:	mov	r2, r0
    7718:	mvn	r0, #104	; 0x68
    771c:	ldr	r1, [pc, #792]	; 7a3c <eval_cursor+0x434>
    7720:	bl	0 <coda_set_error>
    7724:	mvn	r0, #0
    7728:	b	7a28 <eval_cursor+0x420>
    772c:	add	r0, r5, #8
    7730:	add	r1, sp, #24
    7734:	bl	0 <coda_cursor_get_num_elements>
    7738:	cmp	r0, #0
    773c:	beq	7748 <eval_cursor+0x140>
    7740:	mvn	r0, #0
    7744:	b	7a28 <eval_cursor+0x420>
    7748:	ldr	ip, [sp, #44]	; 0x2c
    774c:	cmp	ip, #0
    7750:	blt	778c <eval_cursor+0x184>
    7754:	ldr	r1, [sp, #40]	; 0x28
    7758:	ldr	r3, [sp, #44]	; 0x2c
    775c:	ldr	r2, [sp, #24]
    7760:	asr	r0, r2, #31
    7764:	cmp	r3, r0
    7768:	bne	777c <eval_cursor+0x174>
    776c:	cmp	r1, r2
    7770:	movcs	r1, #1
    7774:	movcc	r1, #0
    7778:	b	7790 <eval_cursor+0x188>
    777c:	cmp	r3, r0
    7780:	movgt	r1, #1
    7784:	movle	r1, #0
    7788:	b	7790 <eval_cursor+0x188>
    778c:	mov	r1, #1
    7790:	cmp	r1, #0
    7794:	beq	77b4 <eval_cursor+0x1ac>
    7798:	mvn	r0, #106	; 0x6a
    779c:	ldr	r1, [pc, #692]	; 7a58 <eval_cursor+0x450>
    77a0:	ldr	r2, [sp, #40]	; 0x28
    77a4:	ldr	r3, [sp, #24]
    77a8:	bl	0 <coda_set_error>
    77ac:	mvn	r0, #0
    77b0:	b	7a28 <eval_cursor+0x420>
    77b4:	add	r0, r5, #8
    77b8:	ldr	r1, [sp, #40]	; 0x28
    77bc:	bl	0 <coda_cursor_goto_array_element_by_index>
    77c0:	cmp	r0, #0
    77c4:	beq	7a24 <eval_cursor+0x41c>
    77c8:	mvn	r0, #0
    77cc:	b	7a28 <eval_cursor+0x420>
    77d0:	ldr	r1, [r5]
    77d4:	ldr	r2, [r1]
    77d8:	ldr	r2, [r2, #16]
    77dc:	cmp	r2, #0
    77e0:	beq	780c <eval_cursor+0x204>
    77e4:	ldr	r0, [r5]
    77e8:	ldr	r0, [r0]
    77ec:	ldr	r0, [r0, #16]
    77f0:	bl	0 <coda_type_get_format_name>
    77f4:	mov	r2, r0
    77f8:	mvn	r0, #400	; 0x190
    77fc:	ldr	r1, [pc, #588]	; 7a50 <eval_cursor+0x448>
    7800:	bl	0 <coda_set_error>
    7804:	mvn	r0, #0
    7808:	b	7a28 <eval_cursor+0x420>
    780c:	add	r0, r5, #8
    7810:	ldr	r1, [r5]
    7814:	ldr	r1, [r1]
    7818:	bl	0 <coda_ascii_cursor_set_asciilines>
    781c:	cmp	r0, #0
    7820:	beq	7a24 <eval_cursor+0x41c>
    7824:	mvn	r0, #0
    7828:	b	7a28 <eval_cursor+0x420>
    782c:	cmp	r3, #33	; 0x21
    7830:	beq	785c <eval_cursor+0x254>
    7834:	add	r1, r5, #8
    7838:	ldr	r0, [r5]
    783c:	mov	r2, r0
    7840:	mov	r3, r1
    7844:	mov	lr, #130	; 0x82
    7848:	ldr	ip, [r2], #4
    784c:	subs	lr, lr, #1
    7850:	str	ip, [r3], #4
    7854:	bne	7848 <eval_cursor+0x240>
    7858:	b	7a24 <eval_cursor+0x41c>
    785c:	ldr	r0, [r4, #16]
    7860:	cmp	r0, #0
    7864:	beq	7884 <eval_cursor+0x27c>
    7868:	ldr	r1, [r4, #16]
    786c:	mov	r0, r5
    7870:	bl	7608 <eval_cursor>
    7874:	cmp	r0, #0
    7878:	beq	7884 <eval_cursor+0x27c>
    787c:	mvn	r0, #0
    7880:	b	7a28 <eval_cursor+0x420>
    7884:	add	r0, r5, #8
    7888:	bl	0 <coda_cursor_goto_attributes>
    788c:	cmp	r0, #0
    7890:	beq	789c <eval_cursor+0x294>
    7894:	mvn	r0, #0
    7898:	b	7a28 <eval_cursor+0x420>
    789c:	add	r0, r5, #8
    78a0:	ldr	r1, [r4, #12]
    78a4:	bl	0 <coda_cursor_goto_record_field_by_name>
    78a8:	cmp	r0, #0
    78ac:	beq	7a24 <eval_cursor+0x41c>
    78b0:	mvn	r0, #0
    78b4:	b	7a28 <eval_cursor+0x420>
    78b8:	cmp	r3, #37	; 0x25
    78bc:	bcs	7994 <eval_cursor+0x38c>
    78c0:	cmp	r3, #35	; 0x23
    78c4:	bne	7a24 <eval_cursor+0x41c>
    78c8:	ldr	r3, [r4, #16]
    78cc:	cmp	r3, #0
    78d0:	beq	78f0 <eval_cursor+0x2e8>
    78d4:	ldr	r1, [r4, #16]
    78d8:	mov	r0, r5
    78dc:	bl	7608 <eval_cursor>
    78e0:	cmp	r0, #0
    78e4:	beq	78f0 <eval_cursor+0x2e8>
    78e8:	mvn	r0, #0
    78ec:	b	7a28 <eval_cursor+0x420>
    78f0:	add	r0, r5, #8
    78f4:	add	r1, sp, #20
    78f8:	bl	0 <coda_cursor_get_type_class>
    78fc:	cmp	r0, #0
    7900:	beq	790c <eval_cursor+0x304>
    7904:	mvn	r0, #0
    7908:	b	7a28 <eval_cursor+0x420>
    790c:	ldr	r0, [sp, #20]
    7910:	cmp	r0, #6
    7914:	bne	7930 <eval_cursor+0x328>
    7918:	add	r0, r5, #8
    791c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    7920:	cmp	r0, #0
    7924:	beq	7930 <eval_cursor+0x328>
    7928:	mvn	r0, #0
    792c:	b	7a28 <eval_cursor+0x420>
    7930:	ldr	ip, [r4, #12]
    7934:	cmp	ip, #0
    7938:	bne	7978 <eval_cursor+0x370>
    793c:	ldr	r1, [r4, #20]
    7940:	add	r2, sp, #32
    7944:	mov	r0, r5
    7948:	bl	367c <eval_integer>
    794c:	cmp	r0, #0
    7950:	beq	795c <eval_cursor+0x354>
    7954:	mvn	r0, #0
    7958:	b	7a28 <eval_cursor+0x420>
    795c:	add	r0, r5, #8
    7960:	ldr	r1, [sp, #32]
    7964:	bl	0 <coda_cursor_goto_record_field_by_index>
    7968:	cmp	r0, #0
    796c:	beq	7a24 <eval_cursor+0x41c>
    7970:	mvn	r0, #0
    7974:	b	7a28 <eval_cursor+0x420>
    7978:	add	r0, r5, #8
    797c:	ldr	r1, [r4, #12]
    7980:	bl	0 <coda_cursor_goto_record_field_by_name>
    7984:	cmp	r0, #0
    7988:	beq	7a24 <eval_cursor+0x41c>
    798c:	mvn	r0, #0
    7990:	b	7a28 <eval_cursor+0x420>
    7994:	cmp	r3, #37	; 0x25
    7998:	beq	79e4 <eval_cursor+0x3dc>
    799c:	cmp	r3, #38	; 0x26
    79a0:	bne	79c4 <eval_cursor+0x3bc>
    79a4:	add	r0, r5, #8
    79a8:	ldr	ip, [r5]
    79ac:	ldr	r1, [ip]
    79b0:	bl	0 <coda_cursor_set_product>
    79b4:	cmp	r0, #0
    79b8:	beq	7a24 <eval_cursor+0x41c>
    79bc:	mvn	r0, #0
    79c0:	b	7a28 <eval_cursor+0x420>
    79c4:	ldr	r0, [pc, #124]	; 7a48 <eval_cursor+0x440>
    79c8:	ldr	r1, [pc, #124]	; 7a4c <eval_cursor+0x444>
    79cc:	movw	r2, #4079	; 0xfef
    79d0:	ldr	r3, [pc, #124]	; 7a54 <eval_cursor+0x44c>
    79d4:	bl	0 <__assert_fail>
    79d8:	mov	r0, #1
    79dc:	bl	0 <exit>
    79e0:	b	7a24 <eval_cursor+0x41c>
    79e4:	ldr	ip, [r4, #16]
    79e8:	cmp	ip, #0
    79ec:	beq	7a0c <eval_cursor+0x404>
    79f0:	ldr	r1, [r4, #16]
    79f4:	mov	r0, r5
    79f8:	bl	7608 <eval_cursor>
    79fc:	cmp	r0, #0
    7a00:	beq	7a0c <eval_cursor+0x404>
    7a04:	mvn	r0, #0
    7a08:	b	7a28 <eval_cursor+0x420>
    7a0c:	add	r0, r5, #8
    7a10:	bl	0 <coda_cursor_goto_parent>
    7a14:	cmp	r0, #0
    7a18:	beq	7a24 <eval_cursor+0x41c>
    7a1c:	mvn	r0, #0
    7a20:	b	7a28 <eval_cursor+0x420>
    7a24:	mov	r0, #0
    7a28:	ldr	r4, [sp, #8]
    7a2c:	ldr	r5, [sp, #12]
    7a30:	ldr	lr, [sp, #4]
    7a34:	add	sp, sp, #48	; 0x30
    7a38:	bx	lr
    7a3c:	.word	0x000003e6
    7a40:	.word	0x0000046b
    7a44:	.word	0x00000000
    7a48:	.word	0x00000bf8
    7a4c:	.word	0x0000053b
    7a50:	.word	0x0000004e
    7a54:	.word	0x00000da7
    7a58:	.word	0x00000181

00007a5c <coda_expression_eval_void>:
    7a5c:	mov	ip, sp
    7a60:	sub	sp, sp, #584	; 0x248
    7a64:	str	ip, [sp]
    7a68:	str	lr, [sp, #4]
    7a6c:	str	r4, [sp, #8]
    7a70:	mov	r4, r0
    7a74:	ldr	r0, [r4, #4]
    7a78:	cmp	r0, #5
    7a7c:	beq	7a94 <coda_expression_eval_void+0x38>
    7a80:	mvn	r0, #99	; 0x63
    7a84:	ldr	r1, [pc, #104]	; 7af4 <coda_expression_eval_void+0x98>
    7a88:	bl	0 <coda_set_error>
    7a8c:	mvn	r0, #0
    7a90:	b	7ae4 <coda_expression_eval_void+0x88>
    7a94:	cmp	r1, #0
    7a98:	bne	7ab0 <coda_expression_eval_void+0x54>
    7a9c:	ldr	r2, [r4, #8]
    7aa0:	cmp	r2, #0
    7aa4:	moveq	r2, #1
    7aa8:	movne	r2, #0
    7aac:	b	7ab4 <coda_expression_eval_void+0x58>
    7ab0:	mov	r2, #0
    7ab4:	cmp	r2, #0
    7ab8:	beq	7ad0 <coda_expression_eval_void+0x74>
    7abc:	mvn	r0, #99	; 0x63
    7ac0:	ldr	r1, [pc, #48]	; 7af8 <coda_expression_eval_void+0x9c>
    7ac4:	bl	0 <coda_set_error>
    7ac8:	mvn	r0, #0
    7acc:	b	7ae4 <coda_expression_eval_void+0x88>
    7ad0:	add	r0, sp, #16
    7ad4:	bl	df4 <init_eval_info>
    7ad8:	add	r0, sp, #16
    7adc:	mov	r1, r4
    7ae0:	bl	7204 <eval_void>
    7ae4:	ldr	r4, [sp, #8]
    7ae8:	ldr	lr, [sp, #4]
    7aec:	add	sp, sp, #584	; 0x248
    7af0:	bx	lr
    7af4:	.word	0x000002e6
    7af8:	.word	0x00000abd

00007afc <print_escaped_string>:
    7afc:	mov	ip, sp
    7b00:	sub	sp, sp, #32
    7b04:	str	ip, [sp]
    7b08:	str	lr, [sp, #4]
    7b0c:	str	r4, [sp, #8]
    7b10:	str	r5, [sp, #12]
    7b14:	str	r6, [sp, #16]
    7b18:	str	r7, [sp, #20]
    7b1c:	str	r8, [sp, #24]
    7b20:	str	r9, [sp, #28]
    7b24:	ldr	r5, [ip]
    7b28:	mov	r7, r3
    7b2c:	mov	r9, r2
    7b30:	mov	r4, r1
    7b34:	mov	r6, r0
    7b38:	mov	r8, #0
    7b3c:	cmp	r4, #0
    7b40:	beq	7b54 <print_escaped_string+0x58>
    7b44:	cmp	r6, #0
    7b48:	moveq	r3, #1
    7b4c:	movne	r3, #0
    7b50:	b	7b58 <print_escaped_string+0x5c>
    7b54:	mov	r3, #1
    7b58:	cmp	r3, #0
    7b5c:	bne	7dc0 <print_escaped_string+0x2c4>
    7b60:	cmp	r4, #0
    7b64:	bge	7b74 <print_escaped_string+0x78>
    7b68:	mov	r0, r6
    7b6c:	bl	0 <strlen>
    7b70:	mov	r4, r0
    7b74:	cmp	r8, r4
    7b78:	bge	7dc0 <print_escaped_string+0x2c4>
    7b7c:	ldrb	r1, [r6, r8]
    7b80:	cmp	r1, #27
    7b84:	bcs	7c1c <print_escaped_string+0x120>
    7b88:	cmp	r1, #10
    7b8c:	bcs	7bcc <print_escaped_string+0xd0>
    7b90:	cmp	r1, #7
    7b94:	beq	7bc0 <print_escaped_string+0xc4>
    7b98:	cmp	r1, #8
    7b9c:	beq	7bb4 <print_escaped_string+0xb8>
    7ba0:	cmp	r1, #9
    7ba4:	bne	7d40 <print_escaped_string+0x244>
    7ba8:	ldr	r0, [pc, #620]	; 7e1c <print_escaped_string+0x320>
    7bac:	blx	r9
    7bb0:	b	7db8 <print_escaped_string+0x2bc>
    7bb4:	ldr	r0, [pc, #612]	; 7e20 <print_escaped_string+0x324>
    7bb8:	blx	r9
    7bbc:	b	7db8 <print_escaped_string+0x2bc>
    7bc0:	ldr	r0, [pc, #540]	; 7de4 <print_escaped_string+0x2e8>
    7bc4:	blx	r9
    7bc8:	b	7db8 <print_escaped_string+0x2bc>
    7bcc:	cmp	r1, #12
    7bd0:	bcs	7bf4 <print_escaped_string+0xf8>
    7bd4:	cmp	r1, #10
    7bd8:	bne	7be8 <print_escaped_string+0xec>
    7bdc:	ldr	r0, [pc, #584]	; 7e2c <print_escaped_string+0x330>
    7be0:	blx	r9
    7be4:	b	7db8 <print_escaped_string+0x2bc>
    7be8:	ldr	r0, [pc, #508]	; 7dec <print_escaped_string+0x2f0>
    7bec:	blx	r9
    7bf0:	b	7db8 <print_escaped_string+0x2bc>
    7bf4:	cmp	r1, #12
    7bf8:	beq	7c10 <print_escaped_string+0x114>
    7bfc:	cmp	r1, #13
    7c00:	bne	7d40 <print_escaped_string+0x244>
    7c04:	ldr	r0, [pc, #484]	; 7df0 <print_escaped_string+0x2f4>
    7c08:	blx	r9
    7c0c:	b	7db8 <print_escaped_string+0x2bc>
    7c10:	ldr	r0, [pc, #500]	; 7e0c <print_escaped_string+0x310>
    7c14:	blx	r9
    7c18:	b	7db8 <print_escaped_string+0x2bc>
    7c1c:	cmp	r1, #38	; 0x26
    7c20:	bcs	7c9c <print_escaped_string+0x1a0>
    7c24:	cmp	r1, #27
    7c28:	beq	7c90 <print_escaped_string+0x194>
    7c2c:	cmp	r1, #32
    7c30:	beq	7c58 <print_escaped_string+0x15c>
    7c34:	cmp	r1, #34	; 0x22
    7c38:	bne	7d40 <print_escaped_string+0x244>
    7c3c:	cmp	r7, #0
    7c40:	bne	7c4c <print_escaped_string+0x150>
    7c44:	ldr	r0, [pc, #444]	; 7e08 <print_escaped_string+0x30c>
    7c48:	b	7c50 <print_escaped_string+0x154>
    7c4c:	ldr	r0, [pc, #444]	; 7e10 <print_escaped_string+0x314>
    7c50:	blx	r9
    7c54:	b	7db8 <print_escaped_string+0x2bc>
    7c58:	cmp	r7, #0
    7c5c:	bne	7c70 <print_escaped_string+0x174>
    7c60:	cmp	r5, #0
    7c64:	movne	r3, #1
    7c68:	moveq	r3, #0
    7c6c:	b	7c74 <print_escaped_string+0x178>
    7c70:	mov	r3, #1
    7c74:	cmp	r3, #0
    7c78:	bne	7c84 <print_escaped_string+0x188>
    7c7c:	ldr	r0, [pc, #428]	; 7e30 <print_escaped_string+0x334>
    7c80:	b	7c88 <print_escaped_string+0x18c>
    7c84:	ldr	r0, [pc, #392]	; 7e14 <print_escaped_string+0x318>
    7c88:	blx	r9
    7c8c:	b	7db8 <print_escaped_string+0x2bc>
    7c90:	ldr	r0, [pc, #352]	; 7df8 <print_escaped_string+0x2fc>
    7c94:	blx	r9
    7c98:	b	7db8 <print_escaped_string+0x2bc>
    7c9c:	cmp	r1, #62	; 0x3e
    7ca0:	bcs	7d24 <print_escaped_string+0x228>
    7ca4:	cmp	r1, #38	; 0x26
    7ca8:	beq	7cec <print_escaped_string+0x1f0>
    7cac:	cmp	r1, #60	; 0x3c
    7cb0:	bne	7d40 <print_escaped_string+0x244>
    7cb4:	cmp	r7, #0
    7cb8:	bne	7ccc <print_escaped_string+0x1d0>
    7cbc:	cmp	r5, #0
    7cc0:	movne	r2, #1
    7cc4:	moveq	r2, #0
    7cc8:	b	7cd0 <print_escaped_string+0x1d4>
    7ccc:	mov	r2, #1
    7cd0:	cmp	r2, #0
    7cd4:	bne	7ce0 <print_escaped_string+0x1e4>
    7cd8:	ldr	r0, [pc, #288]	; 7e00 <print_escaped_string+0x304>
    7cdc:	b	7ce4 <print_escaped_string+0x1e8>
    7ce0:	ldr	r0, [pc, #332]	; 7e34 <print_escaped_string+0x338>
    7ce4:	blx	r9
    7ce8:	b	7db8 <print_escaped_string+0x2bc>
    7cec:	cmp	r7, #0
    7cf0:	bne	7d04 <print_escaped_string+0x208>
    7cf4:	cmp	r5, #0
    7cf8:	movne	r0, #1
    7cfc:	moveq	r0, #0
    7d00:	b	7d08 <print_escaped_string+0x20c>
    7d04:	mov	r0, #1
    7d08:	cmp	r0, #0
    7d0c:	bne	7d18 <print_escaped_string+0x21c>
    7d10:	ldr	r0, [pc, #208]	; 7de8 <print_escaped_string+0x2ec>
    7d14:	b	7d1c <print_escaped_string+0x220>
    7d18:	ldr	r0, [pc, #228]	; 7e04 <print_escaped_string+0x308>
    7d1c:	blx	r9
    7d20:	b	7db8 <print_escaped_string+0x2bc>
    7d24:	cmp	r1, #62	; 0x3e
    7d28:	beq	7d84 <print_escaped_string+0x288>
    7d2c:	cmp	r1, #92	; 0x5c
    7d30:	bne	7d40 <print_escaped_string+0x244>
    7d34:	ldr	r0, [pc, #236]	; 7e28 <print_escaped_string+0x32c>
    7d38:	blx	r9
    7d3c:	b	7db8 <print_escaped_string+0x2bc>
    7d40:	bl	0 <__ctype_b_loc>
    7d44:	ldr	r0, [r0]
    7d48:	ldrb	r2, [r6, r8]
    7d4c:	add	ip, r0, r2, lsl #1
    7d50:	ldrh	r0, [ip]
    7d54:	and	r2, r0, #16384	; 0x4000
    7d58:	cmp	r2, #0
    7d5c:	bne	7d74 <print_escaped_string+0x278>
    7d60:	ldr	r0, [pc, #188]	; 7e24 <print_escaped_string+0x328>
    7d64:	ldrb	r3, [r6, r8]
    7d68:	and	r1, r3, #255	; 0xff
    7d6c:	blx	r9
    7d70:	b	7db8 <print_escaped_string+0x2bc>
    7d74:	ldr	r0, [pc, #128]	; 7dfc <print_escaped_string+0x300>
    7d78:	ldrb	r1, [r6, r8]
    7d7c:	blx	r9
    7d80:	b	7db8 <print_escaped_string+0x2bc>
    7d84:	cmp	r7, #0
    7d88:	bne	7d9c <print_escaped_string+0x2a0>
    7d8c:	cmp	r5, #0
    7d90:	movne	r1, #1
    7d94:	moveq	r1, #0
    7d98:	b	7da0 <print_escaped_string+0x2a4>
    7d9c:	mov	r1, #1
    7da0:	cmp	r1, #0
    7da4:	bne	7db0 <print_escaped_string+0x2b4>
    7da8:	ldr	r0, [pc, #104]	; 7e18 <print_escaped_string+0x31c>
    7dac:	b	7db4 <print_escaped_string+0x2b8>
    7db0:	ldr	r0, [pc, #60]	; 7df4 <print_escaped_string+0x2f8>
    7db4:	blx	r9
    7db8:	add	r8, r8, #1
    7dbc:	b	7b74 <print_escaped_string+0x78>
    7dc0:	ldr	r4, [sp, #8]
    7dc4:	ldr	r5, [sp, #12]
    7dc8:	ldr	r6, [sp, #16]
    7dcc:	ldr	r7, [sp, #20]
    7dd0:	ldr	r8, [sp, #24]
    7dd4:	ldr	r9, [sp, #28]
    7dd8:	ldr	lr, [sp, #4]
    7ddc:	add	sp, sp, #32
    7de0:	bx	lr
    7de4:	.word	0x000001c4
    7de8:	.word	0x0000089c
    7dec:	.word	0x00000c6f
    7df0:	.word	0x000009d9
    7df4:	.word	0x00000485
    7df8:	.word	0x00000a4e
    7dfc:	.word	0x000008fc
    7e00:	.word	0x000007fa
    7e04:	.word	0x000000c8
    7e08:	.word	0x00000a3f
    7e0c:	.word	0x000009dc
    7e10:	.word	0x000009ce
    7e14:	.word	0x000004ed
    7e18:	.word	0x000003ad
    7e1c:	.word	0x000009d6
    7e20:	.word	0x000000ce
    7e24:	.word	0x000001ce
    7e28:	.word	0x000000aa
    7e2c:	.word	0x00000c72
    7e30:	.word	0x00000abb
    7e34:	.word	0x0000099d

00007e38 <print_expression>:
    7e38:	mov	ip, sp
    7e3c:	sub	sp, sp, #88	; 0x58
    7e40:	str	ip, [sp, #4]
    7e44:	str	lr, [sp, #8]
    7e48:	str	r4, [sp, #16]
    7e4c:	str	r5, [sp, #20]
    7e50:	str	r6, [sp, #24]
    7e54:	str	r7, [sp, #28]
    7e58:	str	r8, [sp, #32]
    7e5c:	ldr	r8, [ip]
    7e60:	mov	r4, r3
    7e64:	mov	r5, r2
    7e68:	mov	r6, r1
    7e6c:	mov	r7, r0
    7e70:	cmp	r7, #0
    7e74:	bne	7e8c <print_expression+0x54>
    7e78:	ldr	r0, [pc, #3724]	; 8d0c <print_expression+0xed4>
    7e7c:	ldr	r1, [pc, #3760]	; 8d34 <print_expression+0xefc>
    7e80:	movw	r2, #4196	; 0x1064
    7e84:	ldr	r3, [pc, #3604]	; 8ca0 <print_expression+0xe68>
    7e88:	bl	0 <__assert_fail>
    7e8c:	ldr	r0, [r7]
    7e90:	cmp	r0, #87	; 0x57
    7e94:	bcs	9dc8 <print_expression+0x1f90>
    7e98:	add	pc, pc, r0, lsl #2
    7e9c:	nop	{0}
    7ea0:	b	7ffc <print_expression+0x1c4>
    7ea4:	b	803c <print_expression+0x204>
    7ea8:	b	8230 <print_expression+0x3f8>
    7eac:	b	80a0 <print_expression+0x268>
    7eb0:	b	81cc <print_expression+0x394>
    7eb4:	b	8300 <print_expression+0x4c8>
    7eb8:	b	8364 <print_expression+0x52c>
    7ebc:	b	83c8 <print_expression+0x590>
    7ec0:	b	8104 <print_expression+0x2cc>
    7ec4:	b	8168 <print_expression+0x330>
    7ec8:	b	842c <print_expression+0x5f4>
    7ecc:	b	9d00 <print_expression+0x1ec8>
    7ed0:	b	8448 <print_expression+0x610>
    7ed4:	b	8488 <print_expression+0x650>
    7ed8:	b	84c8 <print_expression+0x690>
    7edc:	b	8508 <print_expression+0x6d0>
    7ee0:	b	8548 <print_expression+0x710>
    7ee4:	b	82c0 <print_expression+0x488>
    7ee8:	b	85e8 <print_expression+0x7b0>
    7eec:	b	862c <print_expression+0x7f4>
    7ef0:	b	8648 <print_expression+0x810>
    7ef4:	b	8668 <print_expression+0x830>
    7ef8:	b	8668 <print_expression+0x830>
    7efc:	b	86b4 <print_expression+0x87c>
    7f00:	b	8718 <print_expression+0x8e0>
    7f04:	b	877c <print_expression+0x944>
    7f08:	b	87e0 <print_expression+0x9a8>
    7f0c:	b	8820 <print_expression+0x9e8>
    7f10:	b	883c <print_expression+0xa04>
    7f14:	b	8858 <print_expression+0xa20>
    7f18:	b	8898 <print_expression+0xa60>
    7f1c:	b	88d8 <print_expression+0xaa0>
    7f20:	b	89bc <print_expression+0xb84>
    7f24:	b	8a14 <print_expression+0xbdc>
    7f28:	b	8a4c <print_expression+0xc14>
    7f2c:	b	8a58 <print_expression+0xc20>
    7f30:	b	8a9c <print_expression+0xc64>
    7f34:	b	8aa8 <print_expression+0xc70>
    7f38:	b	8ae4 <print_expression+0xcac>
    7f3c:	b	8af0 <print_expression+0xcb8>
    7f40:	b	8b30 <print_expression+0xcf8>
    7f44:	b	8bc0 <print_expression+0xd88>
    7f48:	b	8d90 <print_expression+0xf58>
    7f4c:	b	8e08 <print_expression+0xfd0>
    7f50:	b	8e48 <print_expression+0x1010>
    7f54:	b	8e68 <print_expression+0x1030>
    7f58:	b	8ea8 <print_expression+0x1070>
    7f5c:	b	8ee8 <print_expression+0x10b0>
    7f60:	b	8f28 <print_expression+0x10f0>
    7f64:	b	8f68 <print_expression+0x1130>
    7f68:	b	8fa8 <print_expression+0x1170>
    7f6c:	b	8fe8 <print_expression+0x11b0>
    7f70:	b	9078 <print_expression+0x1240>
    7f74:	b	9108 <print_expression+0x12d0>
    7f78:	b	917c <print_expression+0x1344>
    7f7c:	b	91f0 <print_expression+0x13b8>
    7f80:	b	9230 <print_expression+0x13f8>
    7f84:	b	9294 <print_expression+0x145c>
    7f88:	b	92f8 <print_expression+0x14c0>
    7f8c:	b	935c <print_expression+0x1524>
    7f90:	b	93c0 <print_expression+0x1588>
    7f94:	b	93e8 <print_expression+0x15b0>
    7f98:	b	944c <print_expression+0x1614>
    7f9c:	b	9474 <print_expression+0x163c>
    7fa0:	b	94b4 <print_expression+0x167c>
    7fa4:	b	94f4 <print_expression+0x16bc>
    7fa8:	b	9558 <print_expression+0x1720>
    7fac:	b	95bc <print_expression+0x1784>
    7fb0:	b	95d8 <print_expression+0x17a0>
    7fb4:	b	95f4 <print_expression+0x17bc>
    7fb8:	b	9610 <print_expression+0x17d8>
    7fbc:	b	962c <print_expression+0x17f4>
    7fc0:	b	96c0 <print_expression+0x1888>
    7fc4:	b	9700 <print_expression+0x18c8>
    7fc8:	b	9740 <print_expression+0x1908>
    7fcc:	b	9794 <print_expression+0x195c>
    7fd0:	b	9804 <print_expression+0x19cc>
    7fd4:	b	9874 <print_expression+0x1a3c>
    7fd8:	b	98fc <print_expression+0x1ac4>
    7fdc:	b	9960 <print_expression+0x1b28>
    7fe0:	b	99c4 <print_expression+0x1b8c>
    7fe4:	b	9a04 <print_expression+0x1bcc>
    7fe8:	b	9a68 <print_expression+0x1c30>
    7fec:	b	9aac <print_expression+0x1c74>
    7ff0:	b	9af0 <print_expression+0x1cb8>
    7ff4:	b	9cb8 <print_expression+0x1e80>
    7ff8:	b	9d64 <print_expression+0x1f2c>
    7ffc:	cmp	r4, #0
    8000:	bne	800c <print_expression+0x1d4>
    8004:	ldr	r0, [pc, #3160]	; 8c64 <print_expression+0xe2c>
    8008:	b	8010 <print_expression+0x1d8>
    800c:	ldr	r0, [pc, #3416]	; 8d6c <print_expression+0xf34>
    8010:	blx	r6
    8014:	ldr	r0, [r7, #16]
    8018:	mov	r1, #15
    801c:	str	r1, [sp]
    8020:	mov	r3, r4
    8024:	mov	r2, r5
    8028:	mov	r1, r6
    802c:	bl	7e38 <print_expression>
    8030:	ldr	r0, [pc, #3096]	; 8c50 <print_expression+0xe18>
    8034:	blx	r6
    8038:	b	9dc8 <print_expression+0x1f90>
    803c:	cmp	r8, #4
    8040:	bge	804c <print_expression+0x214>
    8044:	ldr	r0, [pc, #3160]	; 8ca4 <print_expression+0xe6c>
    8048:	blx	r6
    804c:	ldr	r0, [r7, #16]
    8050:	mov	r1, #4
    8054:	str	r1, [sp]
    8058:	mov	r3, r4
    805c:	mov	r2, r5
    8060:	mov	r1, r6
    8064:	bl	7e38 <print_expression>
    8068:	ldr	r0, [pc, #3328]	; 8d70 <print_expression+0xf38>
    806c:	blx	r6
    8070:	ldr	r0, [r7, #20]
    8074:	mov	r1, #4
    8078:	str	r1, [sp]
    807c:	mov	r3, r4
    8080:	mov	r2, r5
    8084:	mov	r1, r6
    8088:	bl	7e38 <print_expression>
    808c:	cmp	r8, #4
    8090:	bge	9dc8 <print_expression+0x1f90>
    8094:	ldr	r0, [pc, #2996]	; 8c50 <print_expression+0xe18>
    8098:	blx	r6
    809c:	b	9dc8 <print_expression+0x1f90>
    80a0:	cmp	r4, #0
    80a4:	bne	80b0 <print_expression+0x278>
    80a8:	ldr	r0, [pc, #3000]	; 8c68 <print_expression+0xe30>
    80ac:	b	80b4 <print_expression+0x27c>
    80b0:	ldr	r0, [pc, #3208]	; 8d40 <print_expression+0xf08>
    80b4:	blx	r6
    80b8:	ldr	r0, [r7, #16]
    80bc:	mov	ip, #15
    80c0:	str	ip, [sp]
    80c4:	mov	r3, r4
    80c8:	mov	r2, r5
    80cc:	mov	r1, r6
    80d0:	bl	7e38 <print_expression>
    80d4:	ldr	r0, [pc, #3024]	; 8cac <print_expression+0xe74>
    80d8:	blx	r6
    80dc:	ldr	r0, [r7, #20]
    80e0:	mov	r1, #15
    80e4:	str	r1, [sp]
    80e8:	mov	r3, r4
    80ec:	mov	r2, r5
    80f0:	mov	r1, r6
    80f4:	bl	7e38 <print_expression>
    80f8:	ldr	r0, [pc, #2896]	; 8c50 <print_expression+0xe18>
    80fc:	blx	r6
    8100:	b	9dc8 <print_expression+0x1f90>
    8104:	cmp	r4, #0
    8108:	bne	8114 <print_expression+0x2dc>
    810c:	ldr	r0, [pc, #3152]	; 8d64 <print_expression+0xf2c>
    8110:	b	8118 <print_expression+0x2e0>
    8114:	ldr	r0, [pc, #2956]	; 8ca8 <print_expression+0xe70>
    8118:	blx	r6
    811c:	ldr	r0, [r7, #16]
    8120:	mov	r1, #15
    8124:	str	r1, [sp]
    8128:	mov	r3, r4
    812c:	mov	r2, r5
    8130:	mov	r1, r6
    8134:	bl	7e38 <print_expression>
    8138:	ldr	r0, [pc, #2924]	; 8cac <print_expression+0xe74>
    813c:	blx	r6
    8140:	ldr	r0, [r7, #20]
    8144:	mov	ip, #15
    8148:	str	ip, [sp]
    814c:	mov	r3, r4
    8150:	mov	r2, r5
    8154:	mov	r1, r6
    8158:	bl	7e38 <print_expression>
    815c:	ldr	r0, [pc, #2796]	; 8c50 <print_expression+0xe18>
    8160:	blx	r6
    8164:	b	9dc8 <print_expression+0x1f90>
    8168:	cmp	r4, #0
    816c:	bne	8178 <print_expression+0x340>
    8170:	ldr	r0, [pc, #3076]	; 8d7c <print_expression+0xf44>
    8174:	b	817c <print_expression+0x344>
    8178:	ldr	r0, [pc, #2924]	; 8cec <print_expression+0xeb4>
    817c:	blx	r6
    8180:	ldr	r0, [r7, #16]
    8184:	mov	ip, #15
    8188:	str	ip, [sp]
    818c:	mov	r3, r4
    8190:	mov	r2, r5
    8194:	mov	r1, r6
    8198:	bl	7e38 <print_expression>
    819c:	ldr	r0, [pc, #2824]	; 8cac <print_expression+0xe74>
    81a0:	blx	r6
    81a4:	ldr	r0, [r7, #20]
    81a8:	mov	r1, #15
    81ac:	str	r1, [sp]
    81b0:	mov	r3, r4
    81b4:	mov	r2, r5
    81b8:	mov	r1, r6
    81bc:	bl	7e38 <print_expression>
    81c0:	ldr	r0, [pc, #2696]	; 8c50 <print_expression+0xe18>
    81c4:	blx	r6
    81c8:	b	9dc8 <print_expression+0x1f90>
    81cc:	cmp	r4, #0
    81d0:	bne	81dc <print_expression+0x3a4>
    81d4:	ldr	r0, [pc, #2836]	; 8cf0 <print_expression+0xeb8>
    81d8:	b	81e0 <print_expression+0x3a8>
    81dc:	ldr	r0, [pc, #2972]	; 8d80 <print_expression+0xf48>
    81e0:	blx	r6
    81e4:	ldr	r0, [r7, #16]
    81e8:	mov	r2, #15
    81ec:	str	r2, [sp]
    81f0:	mov	r3, r4
    81f4:	mov	r2, r5
    81f8:	mov	r1, r6
    81fc:	bl	7e38 <print_expression>
    8200:	ldr	r0, [pc, #2724]	; 8cac <print_expression+0xe74>
    8204:	blx	r6
    8208:	ldr	r0, [r7, #20]
    820c:	mov	r3, #15
    8210:	str	r3, [sp]
    8214:	mov	r3, r4
    8218:	mov	r2, r5
    821c:	mov	r1, r6
    8220:	bl	7e38 <print_expression>
    8224:	ldr	r0, [pc, #2596]	; 8c50 <print_expression+0xe18>
    8228:	blx	r6
    822c:	b	9dc8 <print_expression+0x1f90>
    8230:	cmp	r8, #7
    8234:	bge	8240 <print_expression+0x408>
    8238:	ldr	r0, [pc, #2660]	; 8ca4 <print_expression+0xe6c>
    823c:	blx	r6
    8240:	ldr	r0, [r7, #16]
    8244:	mov	r1, #7
    8248:	str	r1, [sp]
    824c:	mov	r3, r4
    8250:	mov	r2, r5
    8254:	mov	r1, r6
    8258:	bl	7e38 <print_expression>
    825c:	cmp	r4, #0
    8260:	bne	8274 <print_expression+0x43c>
    8264:	cmp	r5, #0
    8268:	movne	r1, #1
    826c:	moveq	r1, #0
    8270:	b	8278 <print_expression+0x440>
    8274:	mov	r1, #1
    8278:	cmp	r1, #0
    827c:	bne	8288 <print_expression+0x450>
    8280:	ldr	r0, [pc, #2540]	; 8c74 <print_expression+0xe3c>
    8284:	b	828c <print_expression+0x454>
    8288:	ldr	r0, [pc, #2732]	; 8d3c <print_expression+0xf04>
    828c:	blx	r6
    8290:	ldr	r0, [r7, #20]
    8294:	mov	ip, #7
    8298:	str	ip, [sp]
    829c:	mov	r3, r4
    82a0:	mov	r2, r5
    82a4:	mov	r1, r6
    82a8:	bl	7e38 <print_expression>
    82ac:	cmp	r8, #7
    82b0:	bge	9dc8 <print_expression+0x1f90>
    82b4:	ldr	r0, [pc, #2452]	; 8c50 <print_expression+0xe18>
    82b8:	blx	r6
    82bc:	b	9dc8 <print_expression+0x1f90>
    82c0:	cmp	r4, #0
    82c4:	bne	82d0 <print_expression+0x498>
    82c8:	ldr	r0, [pc, #2564]	; 8cd4 <print_expression+0xe9c>
    82cc:	b	82d4 <print_expression+0x49c>
    82d0:	ldr	r0, [pc, #2592]	; 8cf8 <print_expression+0xec0>
    82d4:	blx	r6
    82d8:	ldr	r0, [r7, #16]
    82dc:	mov	r1, #15
    82e0:	str	r1, [sp]
    82e4:	mov	r3, r4
    82e8:	mov	r2, r5
    82ec:	mov	r1, r6
    82f0:	bl	7e38 <print_expression>
    82f4:	ldr	r0, [pc, #2388]	; 8c50 <print_expression+0xe18>
    82f8:	blx	r6
    82fc:	b	9dc8 <print_expression+0x1f90>
    8300:	cmp	r4, #0
    8304:	bne	8310 <print_expression+0x4d8>
    8308:	ldr	r0, [pc, #2676]	; 8d84 <print_expression+0xf4c>
    830c:	b	8314 <print_expression+0x4dc>
    8310:	ldr	r0, [pc, #2580]	; 8d2c <print_expression+0xef4>
    8314:	blx	r6
    8318:	ldr	r0, [r7, #16]
    831c:	mov	r2, #15
    8320:	str	r2, [sp]
    8324:	mov	r3, r4
    8328:	mov	r2, r5
    832c:	mov	r1, r6
    8330:	bl	7e38 <print_expression>
    8334:	ldr	r0, [pc, #2416]	; 8cac <print_expression+0xe74>
    8338:	blx	r6
    833c:	ldr	r0, [r7, #20]
    8340:	mov	r2, #15
    8344:	str	r2, [sp]
    8348:	mov	r3, r4
    834c:	mov	r2, r5
    8350:	mov	r1, r6
    8354:	bl	7e38 <print_expression>
    8358:	ldr	r0, [pc, #2288]	; 8c50 <print_expression+0xe18>
    835c:	blx	r6
    8360:	b	9dc8 <print_expression+0x1f90>
    8364:	cmp	r4, #0
    8368:	bne	8374 <print_expression+0x53c>
    836c:	ldr	r0, [pc, #2580]	; 8d88 <print_expression+0xf50>
    8370:	b	8378 <print_expression+0x540>
    8374:	ldr	r0, [pc, #2540]	; 8d68 <print_expression+0xf30>
    8378:	blx	r6
    837c:	ldr	r0, [r7, #16]
    8380:	mov	r1, #15
    8384:	str	r1, [sp]
    8388:	mov	r3, r4
    838c:	mov	r2, r5
    8390:	mov	r1, r6
    8394:	bl	7e38 <print_expression>
    8398:	ldr	r0, [pc, #2316]	; 8cac <print_expression+0xe74>
    839c:	blx	r6
    83a0:	ldr	r0, [r7, #20]
    83a4:	mov	r1, #15
    83a8:	str	r1, [sp]
    83ac:	mov	r3, r4
    83b0:	mov	r2, r5
    83b4:	mov	r1, r6
    83b8:	bl	7e38 <print_expression>
    83bc:	ldr	r0, [pc, #2188]	; 8c50 <print_expression+0xe18>
    83c0:	blx	r6
    83c4:	b	9dc8 <print_expression+0x1f90>
    83c8:	cmp	r4, #0
    83cc:	bne	83d8 <print_expression+0x5a0>
    83d0:	ldr	r0, [pc, #2232]	; 8c90 <print_expression+0xe58>
    83d4:	b	83dc <print_expression+0x5a4>
    83d8:	ldr	r0, [pc, #2452]	; 8d74 <print_expression+0xf3c>
    83dc:	blx	r6
    83e0:	ldr	r0, [r7, #16]
    83e4:	mov	r1, #15
    83e8:	str	r1, [sp]
    83ec:	mov	r3, r4
    83f0:	mov	r2, r5
    83f4:	mov	r1, r6
    83f8:	bl	7e38 <print_expression>
    83fc:	ldr	r0, [pc, #2216]	; 8cac <print_expression+0xe74>
    8400:	blx	r6
    8404:	ldr	r0, [r7, #20]
    8408:	mov	r1, #15
    840c:	str	r1, [sp]
    8410:	mov	r3, r4
    8414:	mov	r2, r5
    8418:	mov	r1, r6
    841c:	bl	7e38 <print_expression>
    8420:	ldr	r0, [pc, #2088]	; 8c50 <print_expression+0xe18>
    8424:	blx	r6
    8428:	b	9dc8 <print_expression+0x1f90>
    842c:	cmp	r4, #0
    8430:	bne	843c <print_expression+0x604>
    8434:	ldr	r0, [pc, #2116]	; 8c80 <print_expression+0xe48>
    8438:	b	8440 <print_expression+0x608>
    843c:	ldr	r0, [pc, #2156]	; 8cb0 <print_expression+0xe78>
    8440:	blx	r6
    8444:	b	9dc8 <print_expression+0x1f90>
    8448:	cmp	r4, #0
    844c:	bne	8458 <print_expression+0x620>
    8450:	ldr	r0, [pc, #2092]	; 8c84 <print_expression+0xe4c>
    8454:	b	845c <print_expression+0x624>
    8458:	ldr	r0, [pc, #2276]	; 8d44 <print_expression+0xf0c>
    845c:	blx	r6
    8460:	ldr	r0, [r7, #16]
    8464:	mov	r3, #15
    8468:	str	r3, [sp]
    846c:	mov	r3, r4
    8470:	mov	r2, r5
    8474:	mov	r1, r6
    8478:	bl	7e38 <print_expression>
    847c:	ldr	r0, [pc, #1996]	; 8c50 <print_expression+0xe18>
    8480:	blx	r6
    8484:	b	9dc8 <print_expression+0x1f90>
    8488:	cmp	r4, #0
    848c:	bne	8498 <print_expression+0x660>
    8490:	ldr	r0, [pc, #2176]	; 8d18 <print_expression+0xee0>
    8494:	b	849c <print_expression+0x664>
    8498:	ldr	r0, [pc, #2036]	; 8c94 <print_expression+0xe5c>
    849c:	blx	r6
    84a0:	ldr	r0, [r7, #16]
    84a4:	mov	r1, #15
    84a8:	str	r1, [sp]
    84ac:	mov	r3, r4
    84b0:	mov	r2, r5
    84b4:	mov	r1, r6
    84b8:	bl	7e38 <print_expression>
    84bc:	ldr	r0, [pc, #1932]	; 8c50 <print_expression+0xe18>
    84c0:	blx	r6
    84c4:	b	9dc8 <print_expression+0x1f90>
    84c8:	cmp	r4, #0
    84cc:	bne	84d8 <print_expression+0x6a0>
    84d0:	ldr	r0, [pc, #1972]	; 8c8c <print_expression+0xe54>
    84d4:	b	84dc <print_expression+0x6a4>
    84d8:	ldr	r0, [pc, #1976]	; 8c98 <print_expression+0xe60>
    84dc:	blx	r6
    84e0:	ldr	r0, [r7, #16]
    84e4:	mov	r1, #15
    84e8:	str	r1, [sp]
    84ec:	mov	r3, r4
    84f0:	mov	r2, r5
    84f4:	mov	r1, r6
    84f8:	bl	7e38 <print_expression>
    84fc:	ldr	r0, [pc, #1868]	; 8c50 <print_expression+0xe18>
    8500:	blx	r6
    8504:	b	9dc8 <print_expression+0x1f90>
    8508:	cmp	r4, #0
    850c:	bne	8518 <print_expression+0x6e0>
    8510:	ldr	r0, [pc, #2012]	; 8cf4 <print_expression+0xebc>
    8514:	b	851c <print_expression+0x6e4>
    8518:	ldr	r0, [pc, #2136]	; 8d78 <print_expression+0xf40>
    851c:	blx	r6
    8520:	ldr	r0, [r7, #16]
    8524:	mov	r1, #15
    8528:	str	r1, [sp]
    852c:	mov	r3, r4
    8530:	mov	r2, r5
    8534:	mov	r1, r6
    8538:	bl	7e38 <print_expression>
    853c:	ldr	r0, [pc, #1804]	; 8c50 <print_expression+0xe18>
    8540:	blx	r6
    8544:	b	9dc8 <print_expression+0x1f90>
    8548:	cmp	r4, #0
    854c:	bne	8558 <print_expression+0x720>
    8550:	ldr	r0, [pc, #1924]	; 8cdc <print_expression+0xea4>
    8554:	b	855c <print_expression+0x724>
    8558:	ldr	r0, [pc, #1780]	; 8c54 <print_expression+0xe1c>
    855c:	blx	r6
    8560:	ldr	r0, [r7, #16]
    8564:	mov	r1, #15
    8568:	str	r1, [sp]
    856c:	mov	r3, r4
    8570:	mov	r2, r5
    8574:	mov	r1, r6
    8578:	bl	7e38 <print_expression>
    857c:	ldr	r2, [r7, #20]
    8580:	cmp	r2, #0
    8584:	beq	85ac <print_expression+0x774>
    8588:	ldr	r0, [pc, #1960]	; 8d38 <print_expression+0xf00>
    858c:	blx	r6
    8590:	ldr	r0, [r7, #20]
    8594:	mov	r1, #15
    8598:	str	r1, [sp]
    859c:	mov	r3, r4
    85a0:	mov	r2, r5
    85a4:	mov	r1, r6
    85a8:	bl	7e38 <print_expression>
    85ac:	ldr	r0, [r7, #24]
    85b0:	cmp	r0, #0
    85b4:	beq	85dc <print_expression+0x7a4>
    85b8:	ldr	r0, [pc, #1912]	; 8d38 <print_expression+0xf00>
    85bc:	blx	r6
    85c0:	ldr	r0, [r7, #24]
    85c4:	mov	r1, #15
    85c8:	str	r1, [sp]
    85cc:	mov	r3, r4
    85d0:	mov	r2, r5
    85d4:	mov	r1, r6
    85d8:	bl	7e38 <print_expression>
    85dc:	ldr	r0, [pc, #1644]	; 8c50 <print_expression+0xe18>
    85e0:	blx	r6
    85e4:	b	9dc8 <print_expression+0x1f90>
    85e8:	ldr	r1, [r7, #12]
    85ec:	cmp	r1, #0
    85f0:	bne	8610 <print_expression+0x7d8>
    85f4:	cmp	r4, #0
    85f8:	bne	8604 <print_expression+0x7cc>
    85fc:	ldr	r0, [pc, #1652]	; 8c78 <print_expression+0xe40>
    8600:	b	8608 <print_expression+0x7d0>
    8604:	ldr	r0, [pc, #1680]	; 8c9c <print_expression+0xe64>
    8608:	blx	r6
    860c:	b	9dc8 <print_expression+0x1f90>
    8610:	cmp	r4, #0
    8614:	bne	8620 <print_expression+0x7e8>
    8618:	ldr	r0, [pc, #1592]	; 8c58 <print_expression+0xe20>
    861c:	b	8624 <print_expression+0x7ec>
    8620:	ldr	r0, [pc, #1688]	; 8cc0 <print_expression+0xe88>
    8624:	blx	r6
    8628:	b	9dc8 <print_expression+0x1f90>
    862c:	vldr	d0, [r7, #16]
    8630:	add	r0, sp, #64	; 0x40
    8634:	bl	0 <coda_strfl>
    8638:	ldr	r0, [pc, #1732]	; 8d04 <print_expression+0xecc>
    863c:	add	r1, sp, #64	; 0x40
    8640:	blx	r6
    8644:	b	9dc8 <print_expression+0x1f90>
    8648:	ldr	r0, [r7, #16]
    864c:	ldr	r1, [r7, #20]
    8650:	add	r2, sp, #40	; 0x28
    8654:	bl	0 <coda_str64>
    8658:	ldr	r0, [pc, #1700]	; 8d04 <print_expression+0xecc>
    865c:	add	r1, sp, #40	; 0x28
    8660:	blx	r6
    8664:	b	9dc8 <print_expression+0x1f90>
    8668:	cmp	r5, #0
    866c:	bne	8678 <print_expression+0x840>
    8670:	ldr	r0, [pc, #1680]	; 8d08 <print_expression+0xed0>
    8674:	b	867c <print_expression+0x844>
    8678:	ldr	r0, [pc, #1608]	; 8cc8 <print_expression+0xe90>
    867c:	blx	r6
    8680:	ldr	r0, [r7, #16]
    8684:	ldr	r1, [r7, #12]
    8688:	str	r4, [sp]
    868c:	mov	r3, r5
    8690:	mov	r2, r6
    8694:	bl	7afc <print_escaped_string>
    8698:	cmp	r5, #0
    869c:	bne	86a8 <print_expression+0x870>
    86a0:	ldr	r0, [pc, #1632]	; 8d08 <print_expression+0xed0>
    86a4:	b	86ac <print_expression+0x874>
    86a8:	ldr	r0, [pc, #1560]	; 8cc8 <print_expression+0xe90>
    86ac:	blx	r6
    86b0:	b	9dc8 <print_expression+0x1f90>
    86b4:	cmp	r4, #0
    86b8:	bne	86c4 <print_expression+0x88c>
    86bc:	ldr	r0, [pc, #1536]	; 8cc4 <print_expression+0xe8c>
    86c0:	b	86c8 <print_expression+0x890>
    86c4:	ldr	r0, [pc, #1440]	; 8c6c <print_expression+0xe34>
    86c8:	blx	r6
    86cc:	ldr	r0, [r7, #16]
    86d0:	mov	r3, #15
    86d4:	str	r3, [sp]
    86d8:	mov	r3, r4
    86dc:	mov	r2, r5
    86e0:	mov	r1, r6
    86e4:	bl	7e38 <print_expression>
    86e8:	ldr	r0, [pc, #1608]	; 8d38 <print_expression+0xf00>
    86ec:	blx	r6
    86f0:	ldr	r0, [r7, #20]
    86f4:	mov	r2, #15
    86f8:	str	r2, [sp]
    86fc:	mov	r3, r4
    8700:	mov	r2, r5
    8704:	mov	r1, r6
    8708:	bl	7e38 <print_expression>
    870c:	ldr	r0, [pc, #1340]	; 8c50 <print_expression+0xe18>
    8710:	blx	r6
    8714:	b	9dc8 <print_expression+0x1f90>
    8718:	cmp	r8, #3
    871c:	bge	8728 <print_expression+0x8f0>
    8720:	ldr	r0, [pc, #1404]	; 8ca4 <print_expression+0xe6c>
    8724:	blx	r6
    8728:	ldr	r0, [r7, #16]
    872c:	mov	r3, #3
    8730:	str	r3, [sp]
    8734:	mov	r3, r4
    8738:	mov	r2, r5
    873c:	mov	r1, r6
    8740:	bl	7e38 <print_expression>
    8744:	ldr	r0, [pc, #1408]	; 8ccc <print_expression+0xe94>
    8748:	blx	r6
    874c:	ldr	r0, [r7, #20]
    8750:	mov	r2, #3
    8754:	str	r2, [sp]
    8758:	mov	r3, r4
    875c:	mov	r2, r5
    8760:	mov	r1, r6
    8764:	bl	7e38 <print_expression>
    8768:	cmp	r8, #3
    876c:	bge	9dc8 <print_expression+0x1f90>
    8770:	ldr	r0, [pc, #1240]	; 8c50 <print_expression+0xe18>
    8774:	blx	r6
    8778:	b	9dc8 <print_expression+0x1f90>
    877c:	cmp	r8, #6
    8780:	bge	878c <print_expression+0x954>
    8784:	ldr	r0, [pc, #1304]	; 8ca4 <print_expression+0xe6c>
    8788:	blx	r6
    878c:	ldr	r0, [r7, #16]
    8790:	mov	r3, #6
    8794:	str	r3, [sp]
    8798:	mov	r3, r4
    879c:	mov	r2, r5
    87a0:	mov	r1, r6
    87a4:	bl	7e38 <print_expression>
    87a8:	ldr	r0, [pc, #1312]	; 8cd0 <print_expression+0xe98>
    87ac:	blx	r6
    87b0:	ldr	r0, [r7, #20]
    87b4:	mov	r3, #6
    87b8:	str	r3, [sp]
    87bc:	mov	r3, r4
    87c0:	mov	r2, r5
    87c4:	mov	r1, r6
    87c8:	bl	7e38 <print_expression>
    87cc:	cmp	r8, #6
    87d0:	bge	9dc8 <print_expression+0x1f90>
    87d4:	ldr	r0, [pc, #1140]	; 8c50 <print_expression+0xe18>
    87d8:	blx	r6
    87dc:	b	9dc8 <print_expression+0x1f90>
    87e0:	cmp	r4, #0
    87e4:	bne	87f0 <print_expression+0x9b8>
    87e8:	ldr	r0, [pc, #1432]	; 8d88 <print_expression+0xf50>
    87ec:	b	87f4 <print_expression+0x9bc>
    87f0:	ldr	r0, [pc, #1392]	; 8d68 <print_expression+0xf30>
    87f4:	blx	r6
    87f8:	ldr	r0, [r7, #16]
    87fc:	mov	r3, #15
    8800:	str	r3, [sp]
    8804:	mov	r3, r4
    8808:	mov	r2, r5
    880c:	mov	r1, r6
    8810:	bl	7e38 <print_expression>
    8814:	ldr	r0, [pc, #1076]	; 8c50 <print_expression+0xe18>
    8818:	blx	r6
    881c:	b	9dc8 <print_expression+0x1f90>
    8820:	cmp	r4, #0
    8824:	bne	8830 <print_expression+0x9f8>
    8828:	ldr	r0, [pc, #1088]	; 8c70 <print_expression+0xe38>
    882c:	b	8834 <print_expression+0x9fc>
    8830:	ldr	r0, [pc, #1300]	; 8d4c <print_expression+0xf14>
    8834:	blx	r6
    8838:	b	9dc8 <print_expression+0x1f90>
    883c:	cmp	r4, #0
    8840:	bne	884c <print_expression+0xa14>
    8844:	ldr	r0, [pc, #1300]	; 8d60 <print_expression+0xf28>
    8848:	b	8850 <print_expression+0xa18>
    884c:	ldr	r0, [pc, #1268]	; 8d48 <print_expression+0xf10>
    8850:	blx	r6
    8854:	b	9dc8 <print_expression+0x1f90>
    8858:	cmp	r4, #0
    885c:	bne	8868 <print_expression+0xa30>
    8860:	ldr	r0, [pc, #1172]	; 8cfc <print_expression+0xec4>
    8864:	b	886c <print_expression+0xa34>
    8868:	ldr	r0, [pc, #1208]	; 8d28 <print_expression+0xef0>
    886c:	blx	r6
    8870:	ldr	r0, [r7, #16]
    8874:	mov	r3, #15
    8878:	str	r3, [sp]
    887c:	mov	r3, r4
    8880:	mov	r2, r5
    8884:	mov	r1, r6
    8888:	bl	7e38 <print_expression>
    888c:	ldr	r0, [pc, #956]	; 8c50 <print_expression+0xe18>
    8890:	blx	r6
    8894:	b	9dc8 <print_expression+0x1f90>
    8898:	cmp	r4, #0
    889c:	bne	88a8 <print_expression+0xa70>
    88a0:	ldr	r0, [pc, #1200]	; 8d58 <print_expression+0xf20>
    88a4:	b	88ac <print_expression+0xa74>
    88a8:	ldr	r0, [pc, #984]	; 8c88 <print_expression+0xe50>
    88ac:	blx	r6
    88b0:	ldr	r0, [r7, #16]
    88b4:	mov	r3, #15
    88b8:	str	r3, [sp]
    88bc:	mov	r3, r4
    88c0:	mov	r2, r5
    88c4:	mov	r1, r6
    88c8:	bl	7e38 <print_expression>
    88cc:	ldr	r0, [pc, #892]	; 8c50 <print_expression+0xe18>
    88d0:	blx	r6
    88d4:	b	9dc8 <print_expression+0x1f90>
    88d8:	cmp	r4, #0
    88dc:	bne	88e8 <print_expression+0xab0>
    88e0:	ldr	r0, [pc, #1016]	; 8ce0 <print_expression+0xea8>
    88e4:	b	88ec <print_expression+0xab4>
    88e8:	ldr	r0, [pc, #1068]	; 8d1c <print_expression+0xee4>
    88ec:	ldr	r1, [r7, #12]
    88f0:	blx	r6
    88f4:	ldr	r0, [r7, #16]
    88f8:	mov	ip, #15
    88fc:	str	ip, [sp]
    8900:	mov	r3, r4
    8904:	mov	r2, r5
    8908:	mov	r1, r6
    890c:	bl	7e38 <print_expression>
    8910:	cmp	r4, #0
    8914:	bne	8920 <print_expression+0xae8>
    8918:	ldr	r0, [pc, #860]	; 8c7c <print_expression+0xe44>
    891c:	b	8924 <print_expression+0xaec>
    8920:	ldr	r0, [pc, #1032]	; 8d30 <print_expression+0xef8>
    8924:	blx	r6
    8928:	ldr	r0, [r7, #20]
    892c:	mov	r2, #15
    8930:	str	r2, [sp]
    8934:	mov	r3, r4
    8938:	mov	r2, r5
    893c:	mov	r1, r6
    8940:	bl	7e38 <print_expression>
    8944:	ldr	r2, [r7, #24]
    8948:	cmp	r2, #0
    894c:	beq	8984 <print_expression+0xb4c>
    8950:	cmp	r4, #0
    8954:	bne	8960 <print_expression+0xb28>
    8958:	ldr	r0, [pc, #1020]	; 8d5c <print_expression+0xf24>
    895c:	b	8964 <print_expression+0xb2c>
    8960:	ldr	r0, [pc, #852]	; 8cbc <print_expression+0xe84>
    8964:	blx	r6
    8968:	ldr	r0, [r7, #24]
    896c:	mov	r2, #15
    8970:	str	r2, [sp]
    8974:	mov	r3, r4
    8978:	mov	r2, r5
    897c:	mov	r1, r6
    8980:	bl	7e38 <print_expression>
    8984:	cmp	r4, #0
    8988:	bne	8994 <print_expression+0xb5c>
    898c:	ldr	r0, [pc, #712]	; 8c5c <print_expression+0xe24>
    8990:	b	8998 <print_expression+0xb60>
    8994:	ldr	r0, [pc, #900]	; 8d20 <print_expression+0xee8>
    8998:	blx	r6
    899c:	ldr	r0, [r7, #28]
    89a0:	mov	r1, #15
    89a4:	str	r1, [sp]
    89a8:	mov	r3, r4
    89ac:	mov	r2, r5
    89b0:	mov	r1, r6
    89b4:	bl	7e38 <print_expression>
    89b8:	b	9dc8 <print_expression+0x1f90>
    89bc:	ldr	r3, [r7, #16]
    89c0:	cmp	r3, #0
    89c4:	beq	89e4 <print_expression+0xbac>
    89c8:	ldr	r0, [r7, #16]
    89cc:	mov	r3, #15
    89d0:	str	r3, [sp]
    89d4:	mov	r3, r4
    89d8:	mov	r2, r5
    89dc:	mov	r1, r6
    89e0:	bl	7e38 <print_expression>
    89e4:	ldr	r0, [pc, #760]	; 8ce4 <print_expression+0xeac>
    89e8:	blx	r6
    89ec:	ldr	r0, [r7, #20]
    89f0:	mov	r1, #15
    89f4:	str	r1, [sp]
    89f8:	mov	r3, r4
    89fc:	mov	r2, r5
    8a00:	mov	r1, r6
    8a04:	bl	7e38 <print_expression>
    8a08:	ldr	r0, [pc, #788]	; 8d24 <print_expression+0xeec>
    8a0c:	blx	r6
    8a10:	b	9dc8 <print_expression+0x1f90>
    8a14:	ldr	r2, [r7, #16]
    8a18:	cmp	r2, #0
    8a1c:	beq	8a3c <print_expression+0xc04>
    8a20:	ldr	r0, [r7, #16]
    8a24:	mov	r3, #15
    8a28:	str	r3, [sp]
    8a2c:	mov	r3, r4
    8a30:	mov	r2, r5
    8a34:	mov	r1, r6
    8a38:	bl	7e38 <print_expression>
    8a3c:	ldr	r0, [pc, #624]	; 8cb4 <print_expression+0xe7c>
    8a40:	ldr	r1, [r7, #12]
    8a44:	blx	r6
    8a48:	b	9dc8 <print_expression+0x1f90>
    8a4c:	ldr	r0, [pc, #824]	; 8d8c <print_expression+0xf54>
    8a50:	blx	r6
    8a54:	b	9dc8 <print_expression+0x1f90>
    8a58:	ldr	r0, [r7, #16]
    8a5c:	mov	ip, #15
    8a60:	str	ip, [sp]
    8a64:	mov	r3, r4
    8a68:	mov	r2, r5
    8a6c:	mov	r1, r6
    8a70:	bl	7e38 <print_expression>
    8a74:	ldr	r0, [r7, #16]
    8a78:	ldr	r2, [r0]
    8a7c:	cmp	r2, #38	; 0x26
    8a80:	beq	8a8c <print_expression+0xc54>
    8a84:	ldr	r0, [pc, #588]	; 8cd8 <print_expression+0xea0>
    8a88:	blx	r6
    8a8c:	ldr	r0, [pc, #624]	; 8d04 <print_expression+0xecc>
    8a90:	ldr	r1, [r7, #12]
    8a94:	blx	r6
    8a98:	b	9dc8 <print_expression+0x1f90>
    8a9c:	ldr	r0, [pc, #620]	; 8d10 <print_expression+0xed8>
    8aa0:	blx	r6
    8aa4:	b	9dc8 <print_expression+0x1f90>
    8aa8:	ldr	r1, [r7, #16]
    8aac:	cmp	r1, #0
    8ab0:	beq	8ad8 <print_expression+0xca0>
    8ab4:	ldr	r0, [r7, #16]
    8ab8:	mov	r1, #15
    8abc:	str	r1, [sp]
    8ac0:	mov	r3, r4
    8ac4:	mov	r2, r5
    8ac8:	mov	r1, r6
    8acc:	bl	7e38 <print_expression>
    8ad0:	ldr	r0, [pc, #512]	; 8cd8 <print_expression+0xea0>
    8ad4:	blx	r6
    8ad8:	ldr	r0, [pc, #624]	; 8d50 <print_expression+0xf18>
    8adc:	blx	r6
    8ae0:	b	9dc8 <print_expression+0x1f90>
    8ae4:	ldr	r0, [pc, #492]	; 8cd8 <print_expression+0xea0>
    8ae8:	blx	r6
    8aec:	b	9dc8 <print_expression+0x1f90>
    8af0:	cmp	r4, #0
    8af4:	bne	8b00 <print_expression+0xcc8>
    8af8:	ldr	r0, [pc, #512]	; 8d00 <print_expression+0xec8>
    8afc:	b	8b04 <print_expression+0xccc>
    8b00:	ldr	r0, [pc, #524]	; 8d14 <print_expression+0xedc>
    8b04:	blx	r6
    8b08:	ldr	r0, [r7, #16]
    8b0c:	mov	r3, #15
    8b10:	str	r3, [sp]
    8b14:	mov	r3, r4
    8b18:	mov	r2, r5
    8b1c:	mov	r1, r6
    8b20:	bl	7e38 <print_expression>
    8b24:	ldr	r0, [pc, #292]	; 8c50 <print_expression+0xe18>
    8b28:	blx	r6
    8b2c:	b	9dc8 <print_expression+0x1f90>
    8b30:	cmp	r8, #5
    8b34:	bge	8b40 <print_expression+0xd08>
    8b38:	ldr	r0, [pc, #356]	; 8ca4 <print_expression+0xe6c>
    8b3c:	blx	r6
    8b40:	ldr	r0, [r7, #16]
    8b44:	mov	r1, #5
    8b48:	str	r1, [sp]
    8b4c:	mov	r3, r4
    8b50:	mov	r2, r5
    8b54:	mov	r1, r6
    8b58:	bl	7e38 <print_expression>
    8b5c:	cmp	r4, #0
    8b60:	bne	8b74 <print_expression+0xd3c>
    8b64:	cmp	r5, #0
    8b68:	movne	r1, #1
    8b6c:	moveq	r1, #0
    8b70:	b	8b78 <print_expression+0xd40>
    8b74:	mov	r1, #1
    8b78:	cmp	r1, #0
    8b7c:	bne	8b88 <print_expression+0xd50>
    8b80:	ldr	r0, [pc, #352]	; 8ce8 <print_expression+0xeb0>
    8b84:	b	8b8c <print_expression+0xd54>
    8b88:	ldr	r0, [pc, #296]	; 8cb8 <print_expression+0xe80>
    8b8c:	blx	r6
    8b90:	ldr	r0, [r7, #20]
    8b94:	mov	ip, #5
    8b98:	str	ip, [sp]
    8b9c:	mov	r3, r4
    8ba0:	mov	r2, r5
    8ba4:	mov	r1, r6
    8ba8:	bl	7e38 <print_expression>
    8bac:	cmp	r8, #5
    8bb0:	bge	9dc8 <print_expression+0x1f90>
    8bb4:	ldr	r0, [pc, #148]	; 8c50 <print_expression+0xe18>
    8bb8:	blx	r6
    8bbc:	b	9dc8 <print_expression+0x1f90>
    8bc0:	cmp	r8, #5
    8bc4:	bge	8bd0 <print_expression+0xd98>
    8bc8:	ldr	r0, [pc, #212]	; 8ca4 <print_expression+0xe6c>
    8bcc:	blx	r6
    8bd0:	ldr	r0, [r7, #16]
    8bd4:	mov	r1, #5
    8bd8:	str	r1, [sp]
    8bdc:	mov	r3, r4
    8be0:	mov	r2, r5
    8be4:	mov	r1, r6
    8be8:	bl	7e38 <print_expression>
    8bec:	cmp	r4, #0
    8bf0:	bne	8c04 <print_expression+0xdcc>
    8bf4:	cmp	r5, #0
    8bf8:	movne	r1, #1
    8bfc:	moveq	r1, #0
    8c00:	b	8c08 <print_expression+0xdd0>
    8c04:	mov	r1, #1
    8c08:	cmp	r1, #0
    8c0c:	bne	8c18 <print_expression+0xde0>
    8c10:	ldr	r0, [pc, #72]	; 8c60 <print_expression+0xe28>
    8c14:	b	8c1c <print_expression+0xde4>
    8c18:	ldr	r0, [pc, #308]	; 8d54 <print_expression+0xf1c>
    8c1c:	blx	r6
    8c20:	ldr	r0, [r7, #20]
    8c24:	mov	r1, #5
    8c28:	str	r1, [sp]
    8c2c:	mov	r3, r4
    8c30:	mov	r2, r5
    8c34:	mov	r1, r6
    8c38:	bl	7e38 <print_expression>
    8c3c:	cmp	r8, #5
    8c40:	bge	9dc8 <print_expression+0x1f90>
    8c44:	ldr	r0, [pc, #4]	; 8c50 <print_expression+0xe18>
    8c48:	blx	r6
    8c4c:	b	9dc8 <print_expression+0x1f90>
    8c50:	.word	0x00000afb
    8c54:	.word	0x000001fc
    8c58:	.word	0x00000143
    8c5c:	.word	0x000004e8
    8c60:	.word	0x0000072c
    8c64:	.word	0x000000ad
    8c68:	.word	0x000000c3
    8c6c:	.word	0x000009f0
    8c70:	.word	0x00000362
    8c74:	.word	0x0000076d
    8c78:	.word	0x00000535
    8c7c:	.word	0x00000897
    8c80:	.word	0x00000b21
    8c84:	.word	0x0000015f
    8c88:	.word	0x0000037a
    8c8c:	.word	0x00000965
    8c90:	.word	0x00000671
    8c94:	.word	0x000006aa
    8c98:	.word	0x0000030c
    8c9c:	.word	0x0000088a
    8ca0:	.word	0x00000db3
    8ca4:	.word	0x000007fc
    8ca8:	.word	0x000007bc
    8cac:	.word	0x000006ba
    8cb0:	.word	0x00000148
    8cb4:	.word	0x00000afd
    8cb8:	.word	0x0000089e
    8cbc:	.word	0x00000135
    8cc0:	.word	0x00000440
    8cc4:	.word	0x000009eb
    8cc8:	.word	0x00000594
    8ccc:	.word	0x00000531
    8cd0:	.word	0x00000d53
    8cd4:	.word	0x0000065f
    8cd8:	.word	0x00000a42
    8cdc:	.word	0x0000052a
    8ce0:	.word	0x000003c0
    8ce4:	.word	0x000004b7
    8ce8:	.word	0x000005cc
    8cec:	.word	0x000008ad
    8cf0:	.word	0x00000031
    8cf4:	.word	0x00000a44
    8cf8:	.word	0x000001ef
    8cfc:	.word	0x00000d44
    8d00:	.word	0x000008c6
    8d04:	.word	0x00000006
    8d08:	.word	0x000000d1
    8d0c:	.word	0x00000783
    8d10:	.word	0x000007a9
    8d14:	.word	0x0000036d
    8d18:	.word	0x0000098a
    8d1c:	.word	0x0000007b
    8d20:	.word	0x000007ab
    8d24:	.word	0x00000159
    8d28:	.word	0x000008cc
    8d2c:	.word	0x00000173
    8d30:	.word	0x0000051e
    8d34:	.word	0x0000053b
    8d38:	.word	0x00000697
    8d3c:	.word	0x000008ff
    8d40:	.word	0x00000730
    8d44:	.word	0x000004fa
    8d48:	.word	0x000007e8
    8d4c:	.word	0x00000c3b
    8d50:	.word	0x00000c75
    8d54:	.word	0x00000d4b
    8d58:	.word	0x000008a6
    8d5c:	.word	0x0000080d
    8d60:	.word	0x00000b01
    8d64:	.word	0x00000ba4
    8d68:	.word	0x0000045c
    8d6c:	.word	0x0000067d
    8d70:	.word	0x0000044c
    8d74:	.word	0x000006c4
    8d78:	.word	0x00000a2e
    8d7c:	.word	0x00000756
    8d80:	.word	0x00000a77
    8d84:	.word	0x000001c7
    8d88:	.word	0x0000095d
    8d8c:	.word	0x00000a55
    8d90:	ldr	r0, [pc, #3748]	; 9c3c <print_expression+0x1e04>
    8d94:	blx	r6
    8d98:	ldr	r0, [r7, #16]
    8d9c:	mov	r2, #15
    8da0:	str	r2, [sp]
    8da4:	mov	r3, r4
    8da8:	mov	r2, r5
    8dac:	mov	r1, r6
    8db0:	bl	7e38 <print_expression>
    8db4:	ldr	r0, [pc, #3616]	; 9bdc <print_expression+0x1da4>
    8db8:	blx	r6
    8dbc:	ldr	r0, [r7, #20]
    8dc0:	mov	r3, #15
    8dc4:	str	r3, [sp]
    8dc8:	mov	r3, r4
    8dcc:	mov	r2, r5
    8dd0:	mov	r1, r6
    8dd4:	bl	7e38 <print_expression>
    8dd8:	ldr	r0, [pc, #3580]	; 9bdc <print_expression+0x1da4>
    8ddc:	blx	r6
    8de0:	ldr	r0, [r7, #24]
    8de4:	mov	r1, #15
    8de8:	str	r1, [sp]
    8dec:	mov	r3, r4
    8df0:	mov	r2, r5
    8df4:	mov	r1, r6
    8df8:	bl	7e38 <print_expression>
    8dfc:	ldr	r0, [pc, #3444]	; 9b78 <print_expression+0x1d40>
    8e00:	blx	r6
    8e04:	b	9dc8 <print_expression+0x1f90>
    8e08:	cmp	r4, #0
    8e0c:	bne	8e18 <print_expression+0xfe0>
    8e10:	ldr	r0, [pc, #3480]	; 9bb0 <print_expression+0x1d78>
    8e14:	b	8e1c <print_expression+0xfe4>
    8e18:	ldr	r0, [pc, #3712]	; 9ca0 <print_expression+0x1e68>
    8e1c:	blx	r6
    8e20:	ldr	r0, [r7, #16]
    8e24:	mov	r3, #15
    8e28:	str	r3, [sp]
    8e2c:	mov	r3, r4
    8e30:	mov	r2, r5
    8e34:	mov	r1, r6
    8e38:	bl	7e38 <print_expression>
    8e3c:	ldr	r0, [pc, #3380]	; 9b78 <print_expression+0x1d40>
    8e40:	blx	r6
    8e44:	b	9dc8 <print_expression+0x1f90>
    8e48:	cmp	r4, #0
    8e4c:	bne	8e58 <print_expression+0x1020>
    8e50:	ldr	r0, [pc, #3524]	; 9c1c <print_expression+0x1de4>
    8e54:	b	8e5c <print_expression+0x1024>
    8e58:	ldr	r0, [pc, #3392]	; 9ba0 <print_expression+0x1d68>
    8e5c:	ldr	r1, [r7, #12]
    8e60:	blx	r6
    8e64:	b	9dc8 <print_expression+0x1f90>
    8e68:	cmp	r4, #0
    8e6c:	bne	8e78 <print_expression+0x1040>
    8e70:	ldr	r0, [pc, #3508]	; 9c2c <print_expression+0x1df4>
    8e74:	b	8e7c <print_expression+0x1044>
    8e78:	ldr	r0, [pc, #3488]	; 9c20 <print_expression+0x1de8>
    8e7c:	blx	r6
    8e80:	ldr	r0, [r7, #16]
    8e84:	mov	r3, #15
    8e88:	str	r3, [sp]
    8e8c:	mov	r3, r4
    8e90:	mov	r2, r5
    8e94:	mov	r1, r6
    8e98:	bl	7e38 <print_expression>
    8e9c:	ldr	r0, [pc, #3284]	; 9b78 <print_expression+0x1d40>
    8ea0:	blx	r6
    8ea4:	b	9dc8 <print_expression+0x1f90>
    8ea8:	cmp	r4, #0
    8eac:	bne	8eb8 <print_expression+0x1080>
    8eb0:	ldr	r0, [pc, #3508]	; 9c6c <print_expression+0x1e34>
    8eb4:	b	8ebc <print_expression+0x1084>
    8eb8:	ldr	r0, [pc, #3380]	; 9bf4 <print_expression+0x1dbc>
    8ebc:	blx	r6
    8ec0:	ldr	r0, [r7, #16]
    8ec4:	mov	r1, #15
    8ec8:	str	r1, [sp]
    8ecc:	mov	r3, r4
    8ed0:	mov	r2, r5
    8ed4:	mov	r1, r6
    8ed8:	bl	7e38 <print_expression>
    8edc:	ldr	r0, [pc, #3220]	; 9b78 <print_expression+0x1d40>
    8ee0:	blx	r6
    8ee4:	b	9dc8 <print_expression+0x1f90>
    8ee8:	cmp	r4, #0
    8eec:	bne	8ef8 <print_expression+0x10c0>
    8ef0:	ldr	r0, [pc, #3424]	; 9c58 <print_expression+0x1e20>
    8ef4:	b	8efc <print_expression+0x10c4>
    8ef8:	ldr	r0, [pc, #3340]	; 9c0c <print_expression+0x1dd4>
    8efc:	blx	r6
    8f00:	ldr	r0, [r7, #16]
    8f04:	mov	r1, #15
    8f08:	str	r1, [sp]
    8f0c:	mov	r3, r4
    8f10:	mov	r2, r5
    8f14:	mov	r1, r6
    8f18:	bl	7e38 <print_expression>
    8f1c:	ldr	r0, [pc, #3156]	; 9b78 <print_expression+0x1d40>
    8f20:	blx	r6
    8f24:	b	9dc8 <print_expression+0x1f90>
    8f28:	cmp	r4, #0
    8f2c:	bne	8f38 <print_expression+0x1100>
    8f30:	ldr	r0, [pc, #3344]	; 9c48 <print_expression+0x1e10>
    8f34:	b	8f3c <print_expression+0x1104>
    8f38:	ldr	r0, [pc, #3404]	; 9c8c <print_expression+0x1e54>
    8f3c:	blx	r6
    8f40:	ldr	r0, [r7, #16]
    8f44:	mov	r1, #15
    8f48:	str	r1, [sp]
    8f4c:	mov	r3, r4
    8f50:	mov	r2, r5
    8f54:	mov	r1, r6
    8f58:	bl	7e38 <print_expression>
    8f5c:	ldr	r0, [pc, #3092]	; 9b78 <print_expression+0x1d40>
    8f60:	blx	r6
    8f64:	b	9dc8 <print_expression+0x1f90>
    8f68:	cmp	r4, #0
    8f6c:	bne	8f78 <print_expression+0x1140>
    8f70:	ldr	r0, [pc, #3204]	; 9bfc <print_expression+0x1dc4>
    8f74:	b	8f7c <print_expression+0x1144>
    8f78:	ldr	r0, [pc, #3168]	; 9be0 <print_expression+0x1da8>
    8f7c:	blx	r6
    8f80:	ldr	r0, [r7, #16]
    8f84:	mov	r2, #15
    8f88:	str	r2, [sp]
    8f8c:	mov	r3, r4
    8f90:	mov	r2, r5
    8f94:	mov	r1, r6
    8f98:	bl	7e38 <print_expression>
    8f9c:	ldr	r0, [pc, #3028]	; 9b78 <print_expression+0x1d40>
    8fa0:	blx	r6
    8fa4:	b	9dc8 <print_expression+0x1f90>
    8fa8:	cmp	r4, #0
    8fac:	bne	8fb8 <print_expression+0x1180>
    8fb0:	ldr	r0, [pc, #2996]	; 9b6c <print_expression+0x1d34>
    8fb4:	b	8fbc <print_expression+0x1184>
    8fb8:	ldr	r0, [pc, #3220]	; 9c54 <print_expression+0x1e1c>
    8fbc:	blx	r6
    8fc0:	ldr	r0, [r7, #16]
    8fc4:	mov	ip, #15
    8fc8:	str	ip, [sp]
    8fcc:	mov	r3, r4
    8fd0:	mov	r2, r5
    8fd4:	mov	r1, r6
    8fd8:	bl	7e38 <print_expression>
    8fdc:	ldr	r0, [pc, #2964]	; 9b78 <print_expression+0x1d40>
    8fe0:	blx	r6
    8fe4:	b	9dc8 <print_expression+0x1f90>
    8fe8:	cmp	r8, #5
    8fec:	bge	8ff8 <print_expression+0x11c0>
    8ff0:	ldr	r0, [pc, #3028]	; 9bcc <print_expression+0x1d94>
    8ff4:	blx	r6
    8ff8:	ldr	r0, [r7, #16]
    8ffc:	mov	r2, #5
    9000:	str	r2, [sp]
    9004:	mov	r3, r4
    9008:	mov	r2, r5
    900c:	mov	r1, r6
    9010:	bl	7e38 <print_expression>
    9014:	cmp	r4, #0
    9018:	bne	902c <print_expression+0x11f4>
    901c:	cmp	r5, #0
    9020:	movne	ip, #1
    9024:	moveq	ip, #0
    9028:	b	9030 <print_expression+0x11f8>
    902c:	mov	ip, #1
    9030:	cmp	ip, #0
    9034:	bne	9040 <print_expression+0x1208>
    9038:	ldr	r0, [pc, #3076]	; 9c44 <print_expression+0x1e0c>
    903c:	b	9044 <print_expression+0x120c>
    9040:	ldr	r0, [pc, #3096]	; 9c60 <print_expression+0x1e28>
    9044:	blx	r6
    9048:	ldr	r0, [r7, #20]
    904c:	mov	ip, #5
    9050:	str	ip, [sp]
    9054:	mov	r3, r4
    9058:	mov	r2, r5
    905c:	mov	r1, r6
    9060:	bl	7e38 <print_expression>
    9064:	cmp	r8, #5
    9068:	bge	9dc8 <print_expression+0x1f90>
    906c:	ldr	r0, [pc, #2820]	; 9b78 <print_expression+0x1d40>
    9070:	blx	r6
    9074:	b	9dc8 <print_expression+0x1f90>
    9078:	cmp	r8, #5
    907c:	bge	9088 <print_expression+0x1250>
    9080:	ldr	r0, [pc, #2884]	; 9bcc <print_expression+0x1d94>
    9084:	blx	r6
    9088:	ldr	r0, [r7, #16]
    908c:	mov	r3, #5
    9090:	str	r3, [sp]
    9094:	mov	r3, r4
    9098:	mov	r2, r5
    909c:	mov	r1, r6
    90a0:	bl	7e38 <print_expression>
    90a4:	cmp	r4, #0
    90a8:	bne	90bc <print_expression+0x1284>
    90ac:	cmp	r5, #0
    90b0:	movne	ip, #1
    90b4:	moveq	ip, #0
    90b8:	b	90c0 <print_expression+0x1288>
    90bc:	mov	ip, #1
    90c0:	cmp	ip, #0
    90c4:	bne	90d0 <print_expression+0x1298>
    90c8:	ldr	r0, [pc, #2752]	; 9b90 <print_expression+0x1d58>
    90cc:	b	90d4 <print_expression+0x129c>
    90d0:	ldr	r0, [pc, #2732]	; 9b84 <print_expression+0x1d4c>
    90d4:	blx	r6
    90d8:	ldr	r0, [r7, #20]
    90dc:	mov	r3, #5
    90e0:	str	r3, [sp]
    90e4:	mov	r3, r4
    90e8:	mov	r2, r5
    90ec:	mov	r1, r6
    90f0:	bl	7e38 <print_expression>
    90f4:	cmp	r8, #5
    90f8:	bge	9dc8 <print_expression+0x1f90>
    90fc:	ldr	r0, [pc, #2676]	; 9b78 <print_expression+0x1d40>
    9100:	blx	r6
    9104:	b	9dc8 <print_expression+0x1f90>
    9108:	cmp	r8, #9
    910c:	bge	9118 <print_expression+0x12e0>
    9110:	ldr	r0, [pc, #2740]	; 9bcc <print_expression+0x1d94>
    9114:	blx	r6
    9118:	ldr	r0, [r7, #16]
    911c:	mov	r1, #9
    9120:	str	r1, [sp]
    9124:	mov	r3, r4
    9128:	mov	r2, r5
    912c:	mov	r1, r6
    9130:	bl	7e38 <print_expression>
    9134:	cmp	r4, #0
    9138:	bne	9144 <print_expression+0x130c>
    913c:	ldr	r0, [pc, #2672]	; 9bb4 <print_expression+0x1d7c>
    9140:	b	9148 <print_expression+0x1310>
    9144:	ldr	r0, [pc, #2668]	; 9bb8 <print_expression+0x1d80>
    9148:	blx	r6
    914c:	ldr	r0, [r7, #20]
    9150:	mov	r1, #9
    9154:	str	r1, [sp]
    9158:	mov	r3, r4
    915c:	mov	r2, r5
    9160:	mov	r1, r6
    9164:	bl	7e38 <print_expression>
    9168:	cmp	r8, #9
    916c:	bge	9dc8 <print_expression+0x1f90>
    9170:	ldr	r0, [pc, #2560]	; 9b78 <print_expression+0x1d40>
    9174:	blx	r6
    9178:	b	9dc8 <print_expression+0x1f90>
    917c:	cmp	r8, #10
    9180:	bge	918c <print_expression+0x1354>
    9184:	ldr	r0, [pc, #2624]	; 9bcc <print_expression+0x1d94>
    9188:	blx	r6
    918c:	ldr	r0, [r7, #16]
    9190:	mov	r1, #10
    9194:	str	r1, [sp]
    9198:	mov	r3, r4
    919c:	mov	r2, r5
    91a0:	mov	r1, r6
    91a4:	bl	7e38 <print_expression>
    91a8:	cmp	r4, #0
    91ac:	bne	91b8 <print_expression+0x1380>
    91b0:	ldr	r0, [pc, #2512]	; 9b88 <print_expression+0x1d50>
    91b4:	b	91bc <print_expression+0x1384>
    91b8:	ldr	r0, [pc, #2492]	; 9b7c <print_expression+0x1d44>
    91bc:	blx	r6
    91c0:	ldr	r0, [r7, #20]
    91c4:	mov	r1, #10
    91c8:	str	r1, [sp]
    91cc:	mov	r3, r4
    91d0:	mov	r2, r5
    91d4:	mov	r1, r6
    91d8:	bl	7e38 <print_expression>
    91dc:	cmp	r8, #10
    91e0:	bge	9dc8 <print_expression+0x1f90>
    91e4:	ldr	r0, [pc, #2444]	; 9b78 <print_expression+0x1d40>
    91e8:	blx	r6
    91ec:	b	9dc8 <print_expression+0x1f90>
    91f0:	cmp	r4, #0
    91f4:	bne	9200 <print_expression+0x13c8>
    91f8:	ldr	r0, [pc, #2640]	; 9c50 <print_expression+0x1e18>
    91fc:	b	9204 <print_expression+0x13cc>
    9200:	ldr	r0, [pc, #2644]	; 9c5c <print_expression+0x1e24>
    9204:	blx	r6
    9208:	ldr	r0, [r7, #16]
    920c:	mov	r1, #15
    9210:	str	r1, [sp]
    9214:	mov	r3, r4
    9218:	mov	r2, r5
    921c:	mov	r1, r6
    9220:	bl	7e38 <print_expression>
    9224:	ldr	r0, [pc, #2380]	; 9b78 <print_expression+0x1d40>
    9228:	blx	r6
    922c:	b	9dc8 <print_expression+0x1f90>
    9230:	cmp	r4, #0
    9234:	bne	9240 <print_expression+0x1408>
    9238:	ldr	r0, [pc, #2628]	; 9c84 <print_expression+0x1e4c>
    923c:	b	9244 <print_expression+0x140c>
    9240:	ldr	r0, [pc, #2440]	; 9bd0 <print_expression+0x1d98>
    9244:	blx	r6
    9248:	ldr	r0, [r7, #16]
    924c:	mov	r1, #15
    9250:	str	r1, [sp]
    9254:	mov	r3, r4
    9258:	mov	r2, r5
    925c:	mov	r1, r6
    9260:	bl	7e38 <print_expression>
    9264:	ldr	r0, [pc, #2416]	; 9bdc <print_expression+0x1da4>
    9268:	blx	r6
    926c:	ldr	r0, [r7, #20]
    9270:	mov	r1, #15
    9274:	str	r1, [sp]
    9278:	mov	r3, r4
    927c:	mov	r2, r5
    9280:	mov	r1, r6
    9284:	bl	7e38 <print_expression>
    9288:	ldr	r0, [pc, #2280]	; 9b78 <print_expression+0x1d40>
    928c:	blx	r6
    9290:	b	9dc8 <print_expression+0x1f90>
    9294:	cmp	r4, #0
    9298:	bne	92a4 <print_expression+0x146c>
    929c:	ldr	r0, [pc, #2572]	; 9cb0 <print_expression+0x1e78>
    92a0:	b	92a8 <print_expression+0x1470>
    92a4:	ldr	r0, [pc, #2396]	; 9c08 <print_expression+0x1dd0>
    92a8:	blx	r6
    92ac:	ldr	r0, [r7, #16]
    92b0:	mov	r3, #15
    92b4:	str	r3, [sp]
    92b8:	mov	r3, r4
    92bc:	mov	r2, r5
    92c0:	mov	r1, r6
    92c4:	bl	7e38 <print_expression>
    92c8:	ldr	r0, [pc, #2316]	; 9bdc <print_expression+0x1da4>
    92cc:	blx	r6
    92d0:	ldr	r0, [r7, #20]
    92d4:	mov	ip, #15
    92d8:	str	ip, [sp]
    92dc:	mov	r3, r4
    92e0:	mov	r2, r5
    92e4:	mov	r1, r6
    92e8:	bl	7e38 <print_expression>
    92ec:	ldr	r0, [pc, #2180]	; 9b78 <print_expression+0x1d40>
    92f0:	blx	r6
    92f4:	b	9dc8 <print_expression+0x1f90>
    92f8:	cmp	r8, #3
    92fc:	bge	9308 <print_expression+0x14d0>
    9300:	ldr	r0, [pc, #2244]	; 9bcc <print_expression+0x1d94>
    9304:	blx	r6
    9308:	ldr	r0, [r7, #16]
    930c:	mov	r2, #3
    9310:	str	r2, [sp]
    9314:	mov	r3, r4
    9318:	mov	r2, r5
    931c:	mov	r1, r6
    9320:	bl	7e38 <print_expression>
    9324:	ldr	r0, [pc, #2192]	; 9bbc <print_expression+0x1d84>
    9328:	blx	r6
    932c:	ldr	r0, [r7, #20]
    9330:	mov	ip, #3
    9334:	str	ip, [sp]
    9338:	mov	r3, r4
    933c:	mov	r2, r5
    9340:	mov	r1, r6
    9344:	bl	7e38 <print_expression>
    9348:	cmp	r8, #3
    934c:	bge	9dc8 <print_expression+0x1f90>
    9350:	ldr	r0, [pc, #2080]	; 9b78 <print_expression+0x1d40>
    9354:	blx	r6
    9358:	b	9dc8 <print_expression+0x1f90>
    935c:	cmp	r8, #3
    9360:	bge	936c <print_expression+0x1534>
    9364:	ldr	r0, [pc, #2144]	; 9bcc <print_expression+0x1d94>
    9368:	blx	r6
    936c:	ldr	r0, [r7, #16]
    9370:	mov	r1, #3
    9374:	str	r1, [sp]
    9378:	mov	r3, r4
    937c:	mov	r2, r5
    9380:	mov	r1, r6
    9384:	bl	7e38 <print_expression>
    9388:	ldr	r0, [pc, #2272]	; 9c70 <print_expression+0x1e38>
    938c:	blx	r6
    9390:	ldr	r0, [r7, #20]
    9394:	mov	r3, #3
    9398:	str	r3, [sp]
    939c:	mov	r3, r4
    93a0:	mov	r2, r5
    93a4:	mov	r1, r6
    93a8:	bl	7e38 <print_expression>
    93ac:	cmp	r8, #3
    93b0:	bge	9dc8 <print_expression+0x1f90>
    93b4:	ldr	r0, [pc, #1980]	; 9b78 <print_expression+0x1d40>
    93b8:	blx	r6
    93bc:	b	9dc8 <print_expression+0x1f90>
    93c0:	ldr	r0, [pc, #2080]	; 9be8 <print_expression+0x1db0>
    93c4:	blx	r6
    93c8:	ldr	r0, [r7, #16]
    93cc:	mov	r2, #1
    93d0:	str	r2, [sp]
    93d4:	mov	r3, r4
    93d8:	mov	r2, r5
    93dc:	mov	r1, r6
    93e0:	bl	7e38 <print_expression>
    93e4:	b	9dc8 <print_expression+0x1f90>
    93e8:	cmp	r8, #6
    93ec:	bge	93f8 <print_expression+0x15c0>
    93f0:	ldr	r0, [pc, #2004]	; 9bcc <print_expression+0x1d94>
    93f4:	blx	r6
    93f8:	ldr	r0, [r7, #16]
    93fc:	mov	r1, #6
    9400:	str	r1, [sp]
    9404:	mov	r3, r4
    9408:	mov	r2, r5
    940c:	mov	r1, r6
    9410:	bl	7e38 <print_expression>
    9414:	ldr	r0, [pc, #2056]	; 9c24 <print_expression+0x1dec>
    9418:	blx	r6
    941c:	ldr	r0, [r7, #20]
    9420:	mov	r1, #6
    9424:	str	r1, [sp]
    9428:	mov	r3, r4
    942c:	mov	r2, r5
    9430:	mov	r1, r6
    9434:	bl	7e38 <print_expression>
    9438:	cmp	r8, #6
    943c:	bge	9dc8 <print_expression+0x1f90>
    9440:	ldr	r0, [pc, #1840]	; 9b78 <print_expression+0x1d40>
    9444:	blx	r6
    9448:	b	9dc8 <print_expression+0x1f90>
    944c:	ldr	r0, [pc, #1900]	; 9bc0 <print_expression+0x1d88>
    9450:	blx	r6
    9454:	ldr	r0, [r7, #16]
    9458:	mov	r1, #1
    945c:	str	r1, [sp]
    9460:	mov	r3, r4
    9464:	mov	r2, r5
    9468:	mov	r1, r6
    946c:	bl	7e38 <print_expression>
    9470:	b	9dc8 <print_expression+0x1f90>
    9474:	cmp	r4, #0
    9478:	bne	9484 <print_expression+0x164c>
    947c:	ldr	r0, [pc, #2096]	; 9cb4 <print_expression+0x1e7c>
    9480:	b	9488 <print_expression+0x1650>
    9484:	ldr	r0, [pc, #1956]	; 9c30 <print_expression+0x1df8>
    9488:	blx	r6
    948c:	ldr	r0, [r7, #16]
    9490:	mov	r1, #15
    9494:	str	r1, [sp]
    9498:	mov	r3, r4
    949c:	mov	r2, r5
    94a0:	mov	r1, r6
    94a4:	bl	7e38 <print_expression>
    94a8:	ldr	r0, [pc, #1736]	; 9b78 <print_expression+0x1d40>
    94ac:	blx	r6
    94b0:	b	9dc8 <print_expression+0x1f90>
    94b4:	cmp	r4, #0
    94b8:	bne	94c4 <print_expression+0x168c>
    94bc:	ldr	r0, [pc, #1748]	; 9b98 <print_expression+0x1d60>
    94c0:	b	94c8 <print_expression+0x1690>
    94c4:	ldr	r0, [pc, #2008]	; 9ca4 <print_expression+0x1e6c>
    94c8:	blx	r6
    94cc:	ldr	r0, [r7, #16]
    94d0:	mov	r1, #15
    94d4:	str	r1, [sp]
    94d8:	mov	r3, r4
    94dc:	mov	r2, r5
    94e0:	mov	r1, r6
    94e4:	bl	7e38 <print_expression>
    94e8:	ldr	r0, [pc, #1672]	; 9b78 <print_expression+0x1d40>
    94ec:	blx	r6
    94f0:	b	9dc8 <print_expression+0x1f90>
    94f4:	cmp	r8, #7
    94f8:	bge	9504 <print_expression+0x16cc>
    94fc:	ldr	r0, [pc, #1736]	; 9bcc <print_expression+0x1d94>
    9500:	blx	r6
    9504:	ldr	r0, [r7, #16]
    9508:	mov	r2, #7
    950c:	str	r2, [sp]
    9510:	mov	r3, r4
    9514:	mov	r2, r5
    9518:	mov	r1, r6
    951c:	bl	7e38 <print_expression>
    9520:	ldr	r0, [pc, #1856]	; 9c68 <print_expression+0x1e30>
    9524:	blx	r6
    9528:	ldr	r0, [r7, #20]
    952c:	mov	r2, #7
    9530:	str	r2, [sp]
    9534:	mov	r3, r4
    9538:	mov	r2, r5
    953c:	mov	r1, r6
    9540:	bl	7e38 <print_expression>
    9544:	cmp	r8, #7
    9548:	bge	9dc8 <print_expression+0x1f90>
    954c:	ldr	r0, [pc, #1572]	; 9b78 <print_expression+0x1d40>
    9550:	blx	r6
    9554:	b	9dc8 <print_expression+0x1f90>
    9558:	cmp	r8, #2
    955c:	bge	9568 <print_expression+0x1730>
    9560:	ldr	r0, [pc, #1636]	; 9bcc <print_expression+0x1d94>
    9564:	blx	r6
    9568:	ldr	r0, [r7, #16]
    956c:	mov	r3, #2
    9570:	str	r3, [sp]
    9574:	mov	r3, r4
    9578:	mov	r2, r5
    957c:	mov	r1, r6
    9580:	bl	7e38 <print_expression>
    9584:	ldr	r0, [pc, #1776]	; 9c7c <print_expression+0x1e44>
    9588:	blx	r6
    958c:	ldr	r0, [r7, #20]
    9590:	mov	r3, #2
    9594:	str	r3, [sp]
    9598:	mov	r3, r4
    959c:	mov	r2, r5
    95a0:	mov	r1, r6
    95a4:	bl	7e38 <print_expression>
    95a8:	cmp	r8, #2
    95ac:	bge	9dc8 <print_expression+0x1f90>
    95b0:	ldr	r0, [pc, #1472]	; 9b78 <print_expression+0x1d40>
    95b4:	blx	r6
    95b8:	b	9dc8 <print_expression+0x1f90>
    95bc:	cmp	r4, #0
    95c0:	bne	95cc <print_expression+0x1794>
    95c4:	ldr	r0, [pc, #1640]	; 9c34 <print_expression+0x1dfc>
    95c8:	b	95d0 <print_expression+0x1798>
    95cc:	ldr	r0, [pc, #1520]	; 9bc4 <print_expression+0x1d8c>
    95d0:	blx	r6
    95d4:	b	9dc8 <print_expression+0x1f90>
    95d8:	cmp	r4, #0
    95dc:	bne	95e8 <print_expression+0x17b0>
    95e0:	ldr	r0, [pc, #1432]	; 9b80 <print_expression+0x1d48>
    95e4:	b	95ec <print_expression+0x17b4>
    95e8:	ldr	r0, [pc, #1592]	; 9c28 <print_expression+0x1df0>
    95ec:	blx	r6
    95f0:	b	9dc8 <print_expression+0x1f90>
    95f4:	cmp	r4, #0
    95f8:	bne	9604 <print_expression+0x17cc>
    95fc:	ldr	r0, [pc, #1648]	; 9c74 <print_expression+0x1e3c>
    9600:	b	9608 <print_expression+0x17d0>
    9604:	ldr	r0, [pc, #1416]	; 9b94 <print_expression+0x1d5c>
    9608:	blx	r6
    960c:	b	9dc8 <print_expression+0x1f90>
    9610:	cmp	r4, #0
    9614:	bne	9620 <print_expression+0x17e8>
    9618:	ldr	r0, [pc, #1412]	; 9ba4 <print_expression+0x1d6c>
    961c:	b	9624 <print_expression+0x17ec>
    9620:	ldr	r0, [pc, #1512]	; 9c10 <print_expression+0x1dd8>
    9624:	blx	r6
    9628:	b	9dc8 <print_expression+0x1f90>
    962c:	cmp	r4, #0
    9630:	bne	963c <print_expression+0x1804>
    9634:	ldr	r0, [pc, #1392]	; 9bac <print_expression+0x1d74>
    9638:	b	9640 <print_expression+0x1808>
    963c:	ldr	r0, [pc, #1612]	; 9c90 <print_expression+0x1e58>
    9640:	blx	r6
    9644:	ldr	r0, [r7, #16]
    9648:	mov	r2, #15
    964c:	str	r2, [sp]
    9650:	mov	r3, r4
    9654:	mov	r2, r5
    9658:	mov	r1, r6
    965c:	bl	7e38 <print_expression>
    9660:	ldr	r0, [pc, #1396]	; 9bdc <print_expression+0x1da4>
    9664:	blx	r6
    9668:	ldr	r0, [r7, #20]
    966c:	mov	r1, #15
    9670:	str	r1, [sp]
    9674:	mov	r3, r4
    9678:	mov	r2, r5
    967c:	mov	r1, r6
    9680:	bl	7e38 <print_expression>
    9684:	ldr	r0, [r7, #24]
    9688:	cmp	r0, #0
    968c:	beq	96b4 <print_expression+0x187c>
    9690:	ldr	r0, [pc, #1348]	; 9bdc <print_expression+0x1da4>
    9694:	blx	r6
    9698:	ldr	r0, [r7, #24]
    969c:	mov	r1, #15
    96a0:	str	r1, [sp]
    96a4:	mov	r3, r4
    96a8:	mov	r2, r5
    96ac:	mov	r1, r6
    96b0:	bl	7e38 <print_expression>
    96b4:	ldr	r0, [pc, #1212]	; 9b78 <print_expression+0x1d40>
    96b8:	blx	r6
    96bc:	b	9dc8 <print_expression+0x1f90>
    96c0:	cmp	r4, #0
    96c4:	bne	96d0 <print_expression+0x1898>
    96c8:	ldr	r0, [pc, #1188]	; 9b74 <print_expression+0x1d3c>
    96cc:	b	96d4 <print_expression+0x189c>
    96d0:	ldr	r0, [pc, #1320]	; 9c00 <print_expression+0x1dc8>
    96d4:	blx	r6
    96d8:	ldr	r0, [r7, #16]
    96dc:	mov	r2, #15
    96e0:	str	r2, [sp]
    96e4:	mov	r3, r4
    96e8:	mov	r2, r5
    96ec:	mov	r1, r6
    96f0:	bl	7e38 <print_expression>
    96f4:	ldr	r0, [pc, #1148]	; 9b78 <print_expression+0x1d40>
    96f8:	blx	r6
    96fc:	b	9dc8 <print_expression+0x1f90>
    9700:	cmp	r4, #0
    9704:	bne	9710 <print_expression+0x18d8>
    9708:	ldr	r0, [pc, #1164]	; 9b9c <print_expression+0x1d64>
    970c:	b	9714 <print_expression+0x18dc>
    9710:	ldr	r0, [pc, #1424]	; 9ca8 <print_expression+0x1e70>
    9714:	blx	r6
    9718:	ldr	r0, [r7, #16]
    971c:	mov	r1, #15
    9720:	str	r1, [sp]
    9724:	mov	r3, r4
    9728:	mov	r2, r5
    972c:	mov	r1, r6
    9730:	bl	7e38 <print_expression>
    9734:	ldr	r0, [pc, #1084]	; 9b78 <print_expression+0x1d40>
    9738:	blx	r6
    973c:	b	9dc8 <print_expression+0x1f90>
    9740:	ldr	r0, [r7, #16]
    9744:	mov	ip, #15
    9748:	str	ip, [sp]
    974c:	mov	r3, r4
    9750:	mov	r2, r5
    9754:	mov	r1, r6
    9758:	bl	7e38 <print_expression>
    975c:	cmp	r4, #0
    9760:	bne	976c <print_expression+0x1934>
    9764:	ldr	r0, [pc, #1056]	; 9b8c <print_expression+0x1d54>
    9768:	b	9770 <print_expression+0x1938>
    976c:	ldr	r0, [pc, #1300]	; 9c88 <print_expression+0x1e50>
    9770:	blx	r6
    9774:	ldr	r0, [r7, #20]
    9778:	mov	r3, #15
    977c:	str	r3, [sp]
    9780:	mov	r3, r4
    9784:	mov	r2, r5
    9788:	mov	r1, r6
    978c:	bl	7e38 <print_expression>
    9790:	b	9dc8 <print_expression+0x1f90>
    9794:	cmp	r4, #0
    9798:	bne	97a4 <print_expression+0x196c>
    979c:	ldr	r0, [pc, #1216]	; 9c64 <print_expression+0x1e2c>
    97a0:	b	97a8 <print_expression+0x1970>
    97a4:	ldr	r0, [pc, #1128]	; 9c14 <print_expression+0x1ddc>
    97a8:	blx	r6
    97ac:	ldr	r0, [r7, #16]
    97b0:	mov	r3, #15
    97b4:	str	r3, [sp]
    97b8:	mov	r3, r4
    97bc:	mov	r2, r5
    97c0:	mov	r1, r6
    97c4:	bl	7e38 <print_expression>
    97c8:	ldr	r0, [r7, #20]
    97cc:	cmp	r0, #0
    97d0:	beq	97f8 <print_expression+0x19c0>
    97d4:	ldr	r0, [pc, #1024]	; 9bdc <print_expression+0x1da4>
    97d8:	blx	r6
    97dc:	ldr	r0, [r7, #20]
    97e0:	mov	r1, #15
    97e4:	str	r1, [sp]
    97e8:	mov	r3, r4
    97ec:	mov	r2, r5
    97f0:	mov	r1, r6
    97f4:	bl	7e38 <print_expression>
    97f8:	ldr	r0, [pc, #888]	; 9b78 <print_expression+0x1d40>
    97fc:	blx	r6
    9800:	b	9dc8 <print_expression+0x1f90>
    9804:	cmp	r4, #0
    9808:	bne	9814 <print_expression+0x19dc>
    980c:	ldr	r0, [pc, #976]	; 9be4 <print_expression+0x1dac>
    9810:	b	9818 <print_expression+0x19e0>
    9814:	ldr	r0, [pc, #952]	; 9bd4 <print_expression+0x1d9c>
    9818:	blx	r6
    981c:	ldr	r0, [r7, #16]
    9820:	mov	r3, #15
    9824:	str	r3, [sp]
    9828:	mov	r3, r4
    982c:	mov	r2, r5
    9830:	mov	r1, r6
    9834:	bl	7e38 <print_expression>
    9838:	ldr	r0, [r7, #20]
    983c:	cmp	r0, #0
    9840:	beq	9868 <print_expression+0x1a30>
    9844:	ldr	r0, [pc, #912]	; 9bdc <print_expression+0x1da4>
    9848:	blx	r6
    984c:	ldr	r0, [r7, #20]
    9850:	mov	r1, #15
    9854:	str	r1, [sp]
    9858:	mov	r3, r4
    985c:	mov	r2, r5
    9860:	mov	r1, r6
    9864:	bl	7e38 <print_expression>
    9868:	ldr	r0, [pc, #776]	; 9b78 <print_expression+0x1d40>
    986c:	blx	r6
    9870:	b	9dc8 <print_expression+0x1f90>
    9874:	cmp	r4, #0
    9878:	bne	9884 <print_expression+0x1a4c>
    987c:	ldr	r0, [pc, #836]	; 9bc8 <print_expression+0x1d90>
    9880:	b	9888 <print_expression+0x1a50>
    9884:	ldr	r0, [pc, #1032]	; 9c94 <print_expression+0x1e5c>
    9888:	blx	r6
    988c:	ldr	r0, [r7, #16]
    9890:	mov	r1, #15
    9894:	str	r1, [sp]
    9898:	mov	r3, r4
    989c:	mov	r2, r5
    98a0:	mov	r1, r6
    98a4:	bl	7e38 <print_expression>
    98a8:	ldr	r0, [pc, #812]	; 9bdc <print_expression+0x1da4>
    98ac:	blx	r6
    98b0:	ldr	r0, [r7, #20]
    98b4:	mov	r1, #15
    98b8:	str	r1, [sp]
    98bc:	mov	r3, r4
    98c0:	mov	r2, r5
    98c4:	mov	r1, r6
    98c8:	bl	7e38 <print_expression>
    98cc:	ldr	r0, [pc, #776]	; 9bdc <print_expression+0x1da4>
    98d0:	blx	r6
    98d4:	ldr	r0, [r7, #24]
    98d8:	mov	ip, #15
    98dc:	str	ip, [sp]
    98e0:	mov	r3, r4
    98e4:	mov	r2, r5
    98e8:	mov	r1, r6
    98ec:	bl	7e38 <print_expression>
    98f0:	ldr	r0, [pc, #640]	; 9b78 <print_expression+0x1d40>
    98f4:	blx	r6
    98f8:	b	9dc8 <print_expression+0x1f90>
    98fc:	cmp	r8, #4
    9900:	bge	990c <print_expression+0x1ad4>
    9904:	ldr	r0, [pc, #704]	; 9bcc <print_expression+0x1d94>
    9908:	blx	r6
    990c:	ldr	r0, [r7, #16]
    9910:	mov	r1, #4
    9914:	str	r1, [sp]
    9918:	mov	r3, r4
    991c:	mov	r2, r5
    9920:	mov	r1, r6
    9924:	bl	7e38 <print_expression>
    9928:	ldr	r0, [pc, #796]	; 9c4c <print_expression+0x1e14>
    992c:	blx	r6
    9930:	ldr	r0, [r7, #20]
    9934:	mov	ip, #4
    9938:	str	ip, [sp]
    993c:	mov	r3, r4
    9940:	mov	r2, r5
    9944:	mov	r1, r6
    9948:	bl	7e38 <print_expression>
    994c:	cmp	r8, #4
    9950:	bge	9dc8 <print_expression+0x1f90>
    9954:	ldr	r0, [pc, #540]	; 9b78 <print_expression+0x1d40>
    9958:	blx	r6
    995c:	b	9dc8 <print_expression+0x1f90>
    9960:	cmp	r4, #0
    9964:	bne	9970 <print_expression+0x1b38>
    9968:	ldr	r0, [pc, #784]	; 9c80 <print_expression+0x1e48>
    996c:	b	9974 <print_expression+0x1b3c>
    9970:	ldr	r0, [pc, #560]	; 9ba8 <print_expression+0x1d70>
    9974:	blx	r6
    9978:	ldr	r0, [r7, #16]
    997c:	mov	r1, #15
    9980:	str	r1, [sp]
    9984:	mov	r3, r4
    9988:	mov	r2, r5
    998c:	mov	r1, r6
    9990:	bl	7e38 <print_expression>
    9994:	ldr	r0, [pc, #576]	; 9bdc <print_expression+0x1da4>
    9998:	blx	r6
    999c:	ldr	r0, [r7, #20]
    99a0:	mov	r1, #15
    99a4:	str	r1, [sp]
    99a8:	mov	r3, r4
    99ac:	mov	r2, r5
    99b0:	mov	r1, r6
    99b4:	bl	7e38 <print_expression>
    99b8:	ldr	r0, [pc, #440]	; 9b78 <print_expression+0x1d40>
    99bc:	blx	r6
    99c0:	b	9dc8 <print_expression+0x1f90>
    99c4:	cmp	r4, #0
    99c8:	bne	99d4 <print_expression+0x1b9c>
    99cc:	ldr	r0, [pc, #620]	; 9c40 <print_expression+0x1e08>
    99d0:	b	99d8 <print_expression+0x1ba0>
    99d4:	ldr	r0, [pc, #528]	; 9bec <print_expression+0x1db4>
    99d8:	blx	r6
    99dc:	ldr	r0, [r7, #16]
    99e0:	mov	r1, #15
    99e4:	str	r1, [sp]
    99e8:	mov	r3, r4
    99ec:	mov	r2, r5
    99f0:	mov	r1, r6
    99f4:	bl	7e38 <print_expression>
    99f8:	ldr	r0, [pc, #376]	; 9b78 <print_expression+0x1d40>
    99fc:	blx	r6
    9a00:	b	9dc8 <print_expression+0x1f90>
    9a04:	cmp	r4, #0
    9a08:	bne	9a14 <print_expression+0x1bdc>
    9a0c:	ldr	r0, [pc, #644]	; 9c98 <print_expression+0x1e60>
    9a10:	b	9a18 <print_expression+0x1be0>
    9a14:	ldr	r0, [pc, #444]	; 9bd8 <print_expression+0x1da0>
    9a18:	blx	r6
    9a1c:	ldr	r0, [r7, #16]
    9a20:	mov	r2, #15
    9a24:	str	r2, [sp]
    9a28:	mov	r3, r4
    9a2c:	mov	r2, r5
    9a30:	mov	r1, r6
    9a34:	bl	7e38 <print_expression>
    9a38:	ldr	r0, [pc, #412]	; 9bdc <print_expression+0x1da4>
    9a3c:	blx	r6
    9a40:	ldr	r0, [r7, #20]
    9a44:	mov	ip, #15
    9a48:	str	ip, [sp]
    9a4c:	mov	r3, r4
    9a50:	mov	r2, r5
    9a54:	mov	r1, r6
    9a58:	bl	7e38 <print_expression>
    9a5c:	ldr	r0, [pc, #276]	; 9b78 <print_expression+0x1d40>
    9a60:	blx	r6
    9a64:	b	9dc8 <print_expression+0x1f90>
    9a68:	cmp	r4, #0
    9a6c:	bne	9a78 <print_expression+0x1c40>
    9a70:	ldr	r0, [pc, #564]	; 9cac <print_expression+0x1e74>
    9a74:	b	9a7c <print_expression+0x1c44>
    9a78:	ldr	r0, [pc, #540]	; 9c9c <print_expression+0x1e64>
    9a7c:	ldr	r1, [r7, #12]
    9a80:	blx	r6
    9a84:	ldr	r0, [r7, #16]
    9a88:	mov	r3, #15
    9a8c:	str	r3, [sp]
    9a90:	mov	r3, r4
    9a94:	mov	r2, r5
    9a98:	mov	r1, r6
    9a9c:	bl	7e38 <print_expression>
    9aa0:	ldr	r0, [pc, #208]	; 9b78 <print_expression+0x1d40>
    9aa4:	blx	r6
    9aa8:	b	9dc8 <print_expression+0x1f90>
    9aac:	cmp	r4, #0
    9ab0:	bne	9abc <print_expression+0x1c84>
    9ab4:	ldr	r0, [pc, #444]	; 9c78 <print_expression+0x1e40>
    9ab8:	b	9ac0 <print_expression+0x1c88>
    9abc:	ldr	r0, [pc, #172]	; 9b70 <print_expression+0x1d38>
    9ac0:	ldr	r1, [r7, #12]
    9ac4:	blx	r6
    9ac8:	ldr	r0, [r7, #16]
    9acc:	mov	r1, #15
    9ad0:	str	r1, [sp]
    9ad4:	mov	r3, r4
    9ad8:	mov	r2, r5
    9adc:	mov	r1, r6
    9ae0:	bl	7e38 <print_expression>
    9ae4:	ldr	r0, [pc, #140]	; 9b78 <print_expression+0x1d40>
    9ae8:	blx	r6
    9aec:	b	9dc8 <print_expression+0x1f90>
    9af0:	cmp	r4, #0
    9af4:	bne	9b00 <print_expression+0x1cc8>
    9af8:	ldr	r0, [pc, #280]	; 9c18 <print_expression+0x1de0>
    9afc:	b	9b04 <print_expression+0x1ccc>
    9b00:	ldr	r0, [pc, #240]	; 9bf8 <print_expression+0x1dc0>
    9b04:	ldr	r1, [r7, #12]
    9b08:	blx	r6
    9b0c:	ldr	r0, [r7, #16]
    9b10:	cmp	r0, #0
    9b14:	beq	9b44 <print_expression+0x1d0c>
    9b18:	ldr	r0, [pc, #228]	; 9c04 <print_expression+0x1dcc>
    9b1c:	blx	r6
    9b20:	ldr	r0, [r7, #16]
    9b24:	mov	r1, #15
    9b28:	str	r1, [sp]
    9b2c:	mov	r3, r4
    9b30:	mov	r2, r5
    9b34:	mov	r1, r6
    9b38:	bl	7e38 <print_expression>
    9b3c:	ldr	r0, [pc, #244]	; 9c38 <print_expression+0x1e00>
    9b40:	blx	r6
    9b44:	ldr	r0, [pc, #164]	; 9bf0 <print_expression+0x1db8>
    9b48:	blx	r6
    9b4c:	ldr	r0, [r7, #20]
    9b50:	mov	r1, #15
    9b54:	str	r1, [sp]
    9b58:	mov	r3, r4
    9b5c:	mov	r2, r5
    9b60:	mov	r1, r6
    9b64:	bl	7e38 <print_expression>
    9b68:	b	9dc8 <print_expression+0x1f90>
    9b6c:	.word	0x000006d2
    9b70:	.word	0x000009b2
    9b74:	.word	0x00000658
    9b78:	.word	0x00000afb
    9b7c:	.word	0x00000971
    9b80:	.word	0x000009a2
    9b84:	.word	0x00000665
    9b88:	.word	0x00000b7f
    9b8c:	.word	0x00000699
    9b90:	.word	0x00000bfa
    9b94:	.word	0x00000b0c
    9b98:	.word	0x000008b9
    9b9c:	.word	0x0000077c
    9ba0:	.word	0x00000436
    9ba4:	.word	0x000003af
    9ba8:	.word	0x00000a21
    9bac:	.word	0x0000050c
    9bb0:	.word	0x00000671
    9bb4:	.word	0x000004f4
    9bb8:	.word	0x00000c4d
    9bbc:	.word	0x00000859
    9bc0:	.word	0x000001e2
    9bc4:	.word	0x00000843
    9bc8:	.word	0x00000c9f
    9bcc:	.word	0x000007fc
    9bd0:	.word	0x000007bc
    9bd4:	.word	0x0000090f
    9bd8:	.word	0x00000c26
    9bdc:	.word	0x000006ba
    9be0:	.word	0x0000075b
    9be4:	.word	0x0000016a
    9be8:	.word	0x000009cc
    9bec:	.word	0x00000749
    9bf0:	.word	0x00000a51
    9bf4:	.word	0x000007da
    9bf8:	.word	0x0000048a
    9bfc:	.word	0x000001e4
    9c00:	.word	0x00000689
    9c04:	.word	0x000004b7
    9c08:	.word	0x000008ad
    9c0c:	.word	0x00000124
    9c10:	.word	0x00000d1e
    9c14:	.word	0x000000b7
    9c18:	.word	0x000000d7
    9c1c:	.word	0x00000006
    9c20:	.word	0x000009df
    9c24:	.word	0x000007a4
    9c28:	.word	0x00000093
    9c2c:	.word	0x00000678
    9c30:	.word	0x00000036
    9c34:	.word	0x00000115
    9c38:	.word	0x00000159
    9c3c:	.word	0x0000097d
    9c40:	.word	0x00000000
    9c44:	.word	0x0000066c
    9c48:	.word	0x000005c5
    9c4c:	.word	0x00000a01
    9c50:	.word	0x000006bd
    9c54:	.word	0x000003ca
    9c58:	.word	0x00000993
    9c5c:	.word	0x0000069c
    9c60:	.word	0x0000085e
    9c64:	.word	0x000009fc
    9c68:	.word	0x0000015b
    9c6c:	.word	0x00000513
    9c70:	.word	0x0000051a
    9c74:	.word	0x00000d36
    9c78:	.word	0x00000450
    9c7c:	.word	0x0000091f
    9c80:	.word	0x00000b79
    9c84:	.word	0x00000ba4
    9c88:	.word	0x00000b2b
    9c8c:	.word	0x00000bb7
    9c90:	.word	0x000001d4
    9c94:	.word	0x000007fe
    9c98:	.word	0x0000064a
    9c9c:	.word	0x00000711
    9ca0:	.word	0x000006c4
    9ca4:	.word	0x00000790
    9ca8:	.word	0x00000ba9
    9cac:	.word	0x0000073c
    9cb0:	.word	0x00000756
    9cb4:	.word	0x00000981
    9cb8:	ldr	r0, [pc, #320]	; 9e00 <print_expression+0x1fc8>
    9cbc:	ldr	r1, [r7, #12]
    9cc0:	blx	r6
    9cc4:	ldr	r2, [r7, #16]
    9cc8:	cmp	r2, #0
    9ccc:	beq	9dc8 <print_expression+0x1f90>
    9cd0:	ldr	r0, [pc, #292]	; 9dfc <print_expression+0x1fc4>
    9cd4:	blx	r6
    9cd8:	ldr	r0, [r7, #16]
    9cdc:	mov	r2, #15
    9ce0:	str	r2, [sp]
    9ce4:	mov	r3, r4
    9ce8:	mov	r2, r5
    9cec:	mov	r1, r6
    9cf0:	bl	7e38 <print_expression>
    9cf4:	ldr	r0, [pc, #264]	; 9e04 <print_expression+0x1fcc>
    9cf8:	blx	r6
    9cfc:	b	9dc8 <print_expression+0x1f90>
    9d00:	cmp	r4, #0
    9d04:	bne	9d10 <print_expression+0x1ed8>
    9d08:	ldr	r0, [pc, #252]	; 9e0c <print_expression+0x1fd4>
    9d0c:	b	9d14 <print_expression+0x1edc>
    9d10:	ldr	r0, [pc, #224]	; 9df8 <print_expression+0x1fc0>
    9d14:	blx	r6
    9d18:	ldr	r0, [r7, #16]
    9d1c:	mov	r2, #15
    9d20:	str	r2, [sp]
    9d24:	mov	r3, r4
    9d28:	mov	r2, r5
    9d2c:	mov	r1, r6
    9d30:	bl	7e38 <print_expression>
    9d34:	ldr	r0, [pc, #184]	; 9df4 <print_expression+0x1fbc>
    9d38:	blx	r6
    9d3c:	ldr	r0, [r7, #20]
    9d40:	mov	r1, #15
    9d44:	str	r1, [sp]
    9d48:	mov	r3, r4
    9d4c:	mov	r2, r5
    9d50:	mov	r1, r6
    9d54:	bl	7e38 <print_expression>
    9d58:	ldr	r0, [pc, #140]	; 9dec <print_expression+0x1fb4>
    9d5c:	blx	r6
    9d60:	b	9dc8 <print_expression+0x1f90>
    9d64:	cmp	r4, #0
    9d68:	bne	9d74 <print_expression+0x1f3c>
    9d6c:	ldr	r0, [pc, #124]	; 9df0 <print_expression+0x1fb8>
    9d70:	b	9d78 <print_expression+0x1f40>
    9d74:	ldr	r0, [pc, #140]	; 9e08 <print_expression+0x1fd0>
    9d78:	ldr	r1, [r7, #12]
    9d7c:	blx	r6
    9d80:	ldr	r0, [r7, #16]
    9d84:	mov	r1, #15
    9d88:	str	r1, [sp]
    9d8c:	mov	r3, r4
    9d90:	mov	r2, r5
    9d94:	mov	r1, r6
    9d98:	bl	7e38 <print_expression>
    9d9c:	ldr	r0, [pc, #80]	; 9df4 <print_expression+0x1fbc>
    9da0:	blx	r6
    9da4:	ldr	r0, [r7, #20]
    9da8:	mov	r2, #15
    9dac:	str	r2, [sp]
    9db0:	mov	r3, r4
    9db4:	mov	r2, r5
    9db8:	mov	r1, r6
    9dbc:	bl	7e38 <print_expression>
    9dc0:	ldr	r0, [pc, #36]	; 9dec <print_expression+0x1fb4>
    9dc4:	blx	r6
    9dc8:	mov	r0, #0
    9dcc:	ldr	r4, [sp, #16]
    9dd0:	ldr	r5, [sp, #20]
    9dd4:	ldr	r6, [sp, #24]
    9dd8:	ldr	r7, [sp, #28]
    9ddc:	ldr	r8, [sp, #32]
    9de0:	ldr	lr, [sp, #8]
    9de4:	add	sp, sp, #88	; 0x58
    9de8:	bx	lr
    9dec:	.word	0x00000afb
    9df0:	.word	0x00000838
    9df4:	.word	0x000006ba
    9df8:	.word	0x00000771
    9dfc:	.word	0x000004b7
    9e00:	.word	0x000000d7
    9e04:	.word	0x00000159
    9e08:	.word	0x0000041d
    9e0c:	.word	0x000000d3

00009e10 <coda_expression_print_html>:
    9e10:	mov	ip, sp
    9e14:	sub	sp, sp, #24
    9e18:	str	ip, [sp, #4]
    9e1c:	str	lr, [sp, #8]
    9e20:	str	r4, [sp, #16]
    9e24:	mov	r2, #1
    9e28:	mov	r3, #1
    9e2c:	mov	r4, #15
    9e30:	str	r4, [sp]
    9e34:	bl	7e38 <print_expression>
    9e38:	ldr	r4, [sp, #16]
    9e3c:	ldr	lr, [sp, #8]
    9e40:	add	sp, sp, #24
    9e44:	bx	lr

00009e48 <coda_expression_print_xml>:
    9e48:	mov	ip, sp
    9e4c:	sub	sp, sp, #24
    9e50:	str	ip, [sp, #4]
    9e54:	str	lr, [sp, #8]
    9e58:	str	r4, [sp, #16]
    9e5c:	mov	r2, #1
    9e60:	mov	r3, #0
    9e64:	mov	r4, #15
    9e68:	str	r4, [sp]
    9e6c:	bl	7e38 <print_expression>
    9e70:	ldr	r4, [sp, #16]
    9e74:	ldr	lr, [sp, #8]
    9e78:	add	sp, sp, #24
    9e7c:	bx	lr

00009e80 <coda_expression_print>:
    9e80:	mov	ip, sp
    9e84:	sub	sp, sp, #24
    9e88:	str	ip, [sp, #4]
    9e8c:	str	lr, [sp, #8]
    9e90:	str	r4, [sp, #16]
    9e94:	mov	r2, #0
    9e98:	mov	r3, #0
    9e9c:	mov	r4, #15
    9ea0:	str	r4, [sp]
    9ea4:	bl	7e38 <print_expression>
    9ea8:	ldr	r4, [sp, #16]
    9eac:	ldr	lr, [sp, #8]
    9eb0:	add	sp, sp, #24
    9eb4:	bx	lr

00009eb8 <coda_expression_get_type_name>:
    9eb8:	mov	ip, sp
    9ebc:	sub	sp, sp, #8
    9ec0:	str	ip, [sp]
    9ec4:	str	lr, [sp, #4]
    9ec8:	cmp	r0, #3
    9ecc:	bcs	9ef8 <coda_expression_get_type_name+0x40>
    9ed0:	cmp	r0, #0
    9ed4:	beq	9ef0 <coda_expression_get_type_name+0x38>
    9ed8:	cmp	r0, #1
    9edc:	bne	9ee8 <coda_expression_get_type_name+0x30>
    9ee0:	ldr	r0, [pc, #100]	; 9f4c <coda_expression_get_type_name+0x94>
    9ee4:	b	9f2c <coda_expression_get_type_name+0x74>
    9ee8:	ldr	r0, [pc, #76]	; 9f3c <coda_expression_get_type_name+0x84>
    9eec:	b	9f2c <coda_expression_get_type_name+0x74>
    9ef0:	ldr	r0, [pc, #88]	; 9f50 <coda_expression_get_type_name+0x98>
    9ef4:	b	9f2c <coda_expression_get_type_name+0x74>
    9ef8:	cmp	r0, #3
    9efc:	beq	9f28 <coda_expression_get_type_name+0x70>
    9f00:	cmp	r0, #4
    9f04:	beq	9f20 <coda_expression_get_type_name+0x68>
    9f08:	cmp	r0, #5
    9f0c:	bne	9f18 <coda_expression_get_type_name+0x60>
    9f10:	ldr	r0, [pc, #40]	; 9f40 <coda_expression_get_type_name+0x88>
    9f14:	b	9f2c <coda_expression_get_type_name+0x74>
    9f18:	ldr	r0, [pc, #40]	; 9f48 <coda_expression_get_type_name+0x90>
    9f1c:	b	9f2c <coda_expression_get_type_name+0x74>
    9f20:	ldr	r0, [pc, #28]	; 9f44 <coda_expression_get_type_name+0x8c>
    9f24:	b	9f2c <coda_expression_get_type_name+0x74>
    9f28:	ldr	r0, [pc, #8]	; 9f38 <coda_expression_get_type_name+0x80>
    9f2c:	ldr	lr, [sp, #4]
    9f30:	add	sp, sp, #8
    9f34:	bx	lr
    9f38:	.word	0x000003d9
    9f3c:	.word	0x000003e0
    9f40:	.word	0x000005d1
    9f44:	.word	0x000000b2
    9f48:	.word	0x00000073
    9f4c:	.word	0x00000907
    9f50:	.word	0x00000046

00009f54 <coda_expression_delete>:
    9f54:	mov	ip, sp
    9f58:	sub	sp, sp, #16
    9f5c:	str	ip, [sp]
    9f60:	str	lr, [sp, #4]
    9f64:	str	r4, [sp, #8]
    9f68:	str	r5, [sp, #12]
    9f6c:	mov	r4, r0
    9f70:	ldr	r0, [r4]
    9f74:	cmp	r0, #20
    9f78:	bcs	9f90 <coda_expression_delete+0x3c>
    9f7c:	cmp	r0, #18
    9f80:	beq	a008 <coda_expression_delete+0xb4>
    9f84:	cmp	r0, #19
    9f88:	beq	a008 <coda_expression_delete+0xb4>
    9f8c:	b	9fa8 <coda_expression_delete+0x54>
    9f90:	cmp	r0, #20
    9f94:	beq	a008 <coda_expression_delete+0xb4>
    9f98:	cmp	r0, #21
    9f9c:	beq	9ff4 <coda_expression_delete+0xa0>
    9fa0:	cmp	r0, #22
    9fa4:	beq	9ff4 <coda_expression_delete+0xa0>
    9fa8:	ldr	r2, [r4, #12]
    9fac:	cmp	r2, #0
    9fb0:	beq	9fbc <coda_expression_delete+0x68>
    9fb4:	ldr	r0, [r4, #12]
    9fb8:	bl	0 <free>
    9fbc:	mov	r5, #0
    9fc0:	cmp	r5, #4
    9fc4:	bge	a008 <coda_expression_delete+0xb4>
    9fc8:	lsl	r3, r5, #2
    9fcc:	add	ip, r4, r3
    9fd0:	ldr	r1, [ip, #16]
    9fd4:	cmp	r1, #0
    9fd8:	beq	9fec <coda_expression_delete+0x98>
    9fdc:	lsl	r2, r5, #2
    9fe0:	add	r1, r4, r2
    9fe4:	ldr	r0, [r1, #16]
    9fe8:	bl	9f54 <coda_expression_delete>
    9fec:	add	r5, r5, #1
    9ff0:	b	9fc0 <coda_expression_delete+0x6c>
    9ff4:	ldr	r0, [r4, #16]
    9ff8:	cmp	r0, #0
    9ffc:	beq	a008 <coda_expression_delete+0xb4>
    a000:	ldr	r0, [r4, #16]
    a004:	bl	0 <free>
    a008:	mov	r0, r4
    a00c:	bl	0 <free>
    a010:	ldr	r4, [sp, #8]
    a014:	ldr	r5, [sp, #12]
    a018:	ldr	lr, [sp, #4]
    a01c:	add	sp, sp, #16
    a020:	bx	lr

0000a024 <coda_expression_is_constant>:
    a024:	mov	ip, sp
    a028:	sub	sp, sp, #8
    a02c:	str	ip, [sp]
    a030:	str	lr, [sp, #4]
    a034:	cmp	r0, #0
    a038:	bne	a058 <coda_expression_is_constant+0x34>
    a03c:	mvn	r0, #99	; 0x63
    a040:	ldr	r1, [pc, #32]	; a068 <coda_expression_is_constant+0x44>
    a044:	ldr	r2, [pc, #32]	; a06c <coda_expression_is_constant+0x48>
    a048:	movw	r3, #4969	; 0x1369
    a04c:	bl	0 <coda_set_error>
    a050:	mvn	r0, #0
    a054:	b	a05c <coda_expression_is_constant+0x38>
    a058:	ldr	r0, [r0, #8]
    a05c:	ldr	lr, [sp, #4]
    a060:	add	sp, sp, #8
    a064:	bx	lr
    a068:	.word	0x00000866
    a06c:	.word	0x0000053b

0000a070 <coda_expression_is_equal>:
    a070:	mov	ip, sp
    a074:	sub	sp, sp, #24
    a078:	str	ip, [sp]
    a07c:	str	lr, [sp, #4]
    a080:	str	r4, [sp, #8]
    a084:	str	r5, [sp, #12]
    a088:	str	r6, [sp, #16]
    a08c:	cmp	r0, #0
    a090:	bne	a0a4 <coda_expression_is_equal+0x34>
    a094:	cmp	r1, #0
    a098:	moveq	r0, #1
    a09c:	movne	r0, #0
    a0a0:	b	a238 <coda_expression_is_equal+0x1c8>
    a0a4:	cmp	r1, #0
    a0a8:	bne	a0b4 <coda_expression_is_equal+0x44>
    a0ac:	mov	r0, #0
    a0b0:	b	a238 <coda_expression_is_equal+0x1c8>
    a0b4:	ldr	r2, [r0]
    a0b8:	ldr	r3, [r1]
    a0bc:	cmp	r2, r3
    a0c0:	beq	a0cc <coda_expression_is_equal+0x5c>
    a0c4:	mov	r0, #0
    a0c8:	b	a238 <coda_expression_is_equal+0x1c8>
    a0cc:	ldr	r2, [r0]
    a0d0:	cmp	r2, #20
    a0d4:	bcs	a11c <coda_expression_is_equal+0xac>
    a0d8:	cmp	r2, #18
    a0dc:	beq	a104 <coda_expression_is_equal+0x94>
    a0e0:	cmp	r2, #19
    a0e4:	bne	a134 <coda_expression_is_equal+0xc4>
    a0e8:	vldr	d1, [r0, #16]
    a0ec:	vldr	d0, [r1, #16]
    a0f0:	vcmp.f64	d1, d0
    a0f4:	vmrs	APSR_nzcv, fpscr
    a0f8:	moveq	r0, #1
    a0fc:	movne	r0, #0
    a100:	b	a238 <coda_expression_is_equal+0x1c8>
    a104:	ldr	r2, [r0, #12]
    a108:	ldr	ip, [r1, #12]
    a10c:	cmp	r2, ip
    a110:	moveq	r0, #1
    a114:	movne	r0, #0
    a118:	b	a238 <coda_expression_is_equal+0x1c8>
    a11c:	cmp	r2, #20
    a120:	beq	a210 <coda_expression_is_equal+0x1a0>
    a124:	cmp	r2, #21
    a128:	beq	a1d4 <coda_expression_is_equal+0x164>
    a12c:	cmp	r2, #22
    a130:	beq	a1d4 <coda_expression_is_equal+0x164>
    a134:	mov	r5, r0
    a138:	mov	r4, r1
    a13c:	ldr	r0, [r5, #12]
    a140:	cmp	r0, #0
    a144:	beq	a178 <coda_expression_is_equal+0x108>
    a148:	ldr	r2, [r4, #12]
    a14c:	cmp	r2, #0
    a150:	bne	a15c <coda_expression_is_equal+0xec>
    a154:	mov	r0, #0
    a158:	b	a238 <coda_expression_is_equal+0x1c8>
    a15c:	ldr	r0, [r5, #12]
    a160:	ldr	r1, [r4, #12]
    a164:	bl	0 <strcmp>
    a168:	cmp	r0, #0
    a16c:	beq	a18c <coda_expression_is_equal+0x11c>
    a170:	mov	r0, #0
    a174:	b	a238 <coda_expression_is_equal+0x1c8>
    a178:	ldr	r1, [r4, #12]
    a17c:	cmp	r1, #0
    a180:	beq	a18c <coda_expression_is_equal+0x11c>
    a184:	mov	r0, #0
    a188:	b	a238 <coda_expression_is_equal+0x1c8>
    a18c:	mov	r6, #0
    a190:	cmp	r6, #4
    a194:	bge	a1cc <coda_expression_is_equal+0x15c>
    a198:	lsl	r2, r6, #2
    a19c:	add	r3, r5, r2
    a1a0:	ldr	r0, [r3, #16]
    a1a4:	lsl	r1, r6, #2
    a1a8:	add	r1, r4, r1
    a1ac:	ldr	r1, [r1, #16]
    a1b0:	bl	a070 <coda_expression_is_equal>
    a1b4:	cmp	r0, #0
    a1b8:	bne	a1c4 <coda_expression_is_equal+0x154>
    a1bc:	mov	r0, #0
    a1c0:	b	a238 <coda_expression_is_equal+0x1c8>
    a1c4:	add	r6, r6, #1
    a1c8:	b	a190 <coda_expression_is_equal+0x120>
    a1cc:	mov	r0, #1
    a1d0:	b	a238 <coda_expression_is_equal+0x1c8>
    a1d4:	ldr	r3, [r0, #12]
    a1d8:	ldr	ip, [r1, #12]
    a1dc:	cmp	r3, ip
    a1e0:	beq	a1ec <coda_expression_is_equal+0x17c>
    a1e4:	mov	r0, #0
    a1e8:	b	a238 <coda_expression_is_equal+0x1c8>
    a1ec:	ldr	r3, [r0, #16]
    a1f0:	ldr	r1, [r1, #16]
    a1f4:	ldr	r2, [r0, #12]
    a1f8:	mov	r0, r3
    a1fc:	bl	0 <memcmp>
    a200:	cmp	r0, #0
    a204:	moveq	r0, #1
    a208:	movne	r0, #0
    a20c:	b	a238 <coda_expression_is_equal+0x1c8>
    a210:	ldr	r4, [r0, #16]
    a214:	ldr	r3, [r0, #20]
    a218:	ldr	r2, [r1, #16]
    a21c:	ldr	r0, [r1, #20]
    a220:	eor	ip, r3, r0
    a224:	eor	r2, r4, r2
    a228:	orr	r0, ip, r2
    a22c:	cmp	r0, #0
    a230:	moveq	r0, #1
    a234:	movne	r0, #0
    a238:	ldr	r4, [sp, #8]
    a23c:	ldr	r5, [sp, #12]
    a240:	ldr	r6, [sp, #16]
    a244:	ldr	lr, [sp, #4]
    a248:	add	sp, sp, #24
    a24c:	bx	lr

0000a250 <coda_expression_get_type>:
    a250:	mov	ip, sp
    a254:	sub	sp, sp, #8
    a258:	str	ip, [sp]
    a25c:	str	lr, [sp, #4]
    a260:	cmp	r0, #0
    a264:	bne	a284 <coda_expression_get_type+0x34>
    a268:	mvn	r0, #99	; 0x63
    a26c:	ldr	r1, [pc, #40]	; a29c <coda_expression_get_type+0x4c>
    a270:	ldr	r2, [pc, #40]	; a2a0 <coda_expression_get_type+0x50>
    a274:	movw	r3, #5071	; 0x13cf
    a278:	bl	0 <coda_set_error>
    a27c:	mvn	r0, #0
    a280:	b	a290 <coda_expression_get_type+0x40>
    a284:	ldr	r2, [r0, #4]
    a288:	str	r2, [r1]
    a28c:	mov	r0, #0
    a290:	ldr	lr, [sp, #4]
    a294:	add	sp, sp, #8
    a298:	bx	lr
    a29c:	.word	0x00000866
    a2a0:	.word	0x0000053b

0000a2a4 <coda_expression_eval_bool>:
    a2a4:	mov	ip, sp
    a2a8:	sub	sp, sp, #592	; 0x250
    a2ac:	str	ip, [sp]
    a2b0:	str	lr, [sp, #4]
    a2b4:	str	r4, [sp, #8]
    a2b8:	str	r5, [sp, #12]
    a2bc:	str	r6, [sp, #16]
    a2c0:	mov	r4, r2
    a2c4:	mov	r5, r1
    a2c8:	mov	r6, r0
    a2cc:	ldr	r0, [r6, #4]
    a2d0:	cmp	r0, #0
    a2d4:	beq	a2ec <coda_expression_eval_bool+0x48>
    a2d8:	mvn	r0, #99	; 0x63
    a2dc:	ldr	r1, [pc, #196]	; a3a8 <coda_expression_eval_bool+0x104>
    a2e0:	bl	0 <coda_set_error>
    a2e4:	mvn	r0, #0
    a2e8:	b	a390 <coda_expression_eval_bool+0xec>
    a2ec:	cmp	r5, #0
    a2f0:	bne	a308 <coda_expression_eval_bool+0x64>
    a2f4:	ldr	r0, [r6, #8]
    a2f8:	cmp	r0, #0
    a2fc:	moveq	r2, #1
    a300:	movne	r2, #0
    a304:	b	a30c <coda_expression_eval_bool+0x68>
    a308:	mov	r2, #0
    a30c:	cmp	r2, #0
    a310:	beq	a328 <coda_expression_eval_bool+0x84>
    a314:	mvn	r0, #99	; 0x63
    a318:	ldr	r1, [pc, #140]	; a3ac <coda_expression_eval_bool+0x108>
    a31c:	bl	0 <coda_set_error>
    a320:	mvn	r0, #0
    a324:	b	a390 <coda_expression_eval_bool+0xec>
    a328:	add	r0, sp, #24
    a32c:	mov	r1, r5
    a330:	bl	df4 <init_eval_info>
    a334:	add	r0, sp, #24
    a338:	mov	r2, r4
    a33c:	mov	r1, r6
    a340:	bl	e80 <eval_boolean>
    a344:	cmp	r0, #0
    a348:	beq	a38c <coda_expression_eval_bool+0xe8>
    a34c:	cmp	r5, #0
    a350:	beq	a370 <coda_expression_eval_bool+0xcc>
    a354:	add	r1, sp, #32
    a358:	mov	r0, r5
    a35c:	bl	0 <coda_cursor_compare>
    a360:	cmp	r0, #0
    a364:	movne	r0, #1
    a368:	moveq	r0, #0
    a36c:	b	a374 <coda_expression_eval_bool+0xd0>
    a370:	mov	r0, #0
    a374:	cmp	r0, #0
    a378:	beq	a384 <coda_expression_eval_bool+0xe0>
    a37c:	add	r0, sp, #32
    a380:	bl	0 <coda_cursor_add_to_error_message>
    a384:	mvn	r0, #0
    a388:	b	a390 <coda_expression_eval_bool+0xec>
    a38c:	mov	r0, #0
    a390:	ldr	r4, [sp, #8]
    a394:	ldr	r5, [sp, #12]
    a398:	ldr	r6, [sp, #16]
    a39c:	ldr	lr, [sp, #4]
    a3a0:	add	sp, sp, #592	; 0x250
    a3a4:	bx	lr
    a3a8:	.word	0x00000b33
    a3ac:	.word	0x00000abd

0000a3b0 <coda_expression_eval_integer>:
    a3b0:	mov	ip, sp
    a3b4:	sub	sp, sp, #592	; 0x250
    a3b8:	str	ip, [sp]
    a3bc:	str	lr, [sp, #4]
    a3c0:	str	r4, [sp, #8]
    a3c4:	str	r5, [sp, #12]
    a3c8:	str	r6, [sp, #16]
    a3cc:	mov	r4, r2
    a3d0:	mov	r5, r1
    a3d4:	mov	r6, r0
    a3d8:	ldr	r0, [r6, #4]
    a3dc:	cmp	r0, #1
    a3e0:	beq	a3f8 <coda_expression_eval_integer+0x48>
    a3e4:	mvn	r0, #99	; 0x63
    a3e8:	ldr	r1, [pc, #196]	; a4b4 <coda_expression_eval_integer+0x104>
    a3ec:	bl	0 <coda_set_error>
    a3f0:	mvn	r0, #0
    a3f4:	b	a49c <coda_expression_eval_integer+0xec>
    a3f8:	cmp	r5, #0
    a3fc:	bne	a414 <coda_expression_eval_integer+0x64>
    a400:	ldr	r0, [r6, #8]
    a404:	cmp	r0, #0
    a408:	moveq	r2, #1
    a40c:	movne	r2, #0
    a410:	b	a418 <coda_expression_eval_integer+0x68>
    a414:	mov	r2, #0
    a418:	cmp	r2, #0
    a41c:	beq	a434 <coda_expression_eval_integer+0x84>
    a420:	mvn	r0, #99	; 0x63
    a424:	ldr	r1, [pc, #140]	; a4b8 <coda_expression_eval_integer+0x108>
    a428:	bl	0 <coda_set_error>
    a42c:	mvn	r0, #0
    a430:	b	a49c <coda_expression_eval_integer+0xec>
    a434:	add	r0, sp, #24
    a438:	mov	r1, r5
    a43c:	bl	df4 <init_eval_info>
    a440:	add	r0, sp, #24
    a444:	mov	r2, r4
    a448:	mov	r1, r6
    a44c:	bl	367c <eval_integer>
    a450:	cmp	r0, #0
    a454:	beq	a498 <coda_expression_eval_integer+0xe8>
    a458:	cmp	r5, #0
    a45c:	beq	a47c <coda_expression_eval_integer+0xcc>
    a460:	add	r1, sp, #32
    a464:	mov	r0, r5
    a468:	bl	0 <coda_cursor_compare>
    a46c:	cmp	r0, #0
    a470:	movne	r0, #1
    a474:	moveq	r0, #0
    a478:	b	a480 <coda_expression_eval_integer+0xd0>
    a47c:	mov	r0, #0
    a480:	cmp	r0, #0
    a484:	beq	a490 <coda_expression_eval_integer+0xe0>
    a488:	add	r0, sp, #32
    a48c:	bl	0 <coda_cursor_add_to_error_message>
    a490:	mvn	r0, #0
    a494:	b	a49c <coda_expression_eval_integer+0xec>
    a498:	mov	r0, #0
    a49c:	ldr	r4, [sp, #8]
    a4a0:	ldr	r5, [sp, #12]
    a4a4:	ldr	r6, [sp, #16]
    a4a8:	ldr	lr, [sp, #4]
    a4ac:	add	sp, sp, #592	; 0x250
    a4b0:	bx	lr
    a4b4:	.word	0x0000059b
    a4b8:	.word	0x00000abd

0000a4bc <coda_expression_eval_float>:
    a4bc:	mov	ip, sp
    a4c0:	sub	sp, sp, #592	; 0x250
    a4c4:	str	ip, [sp]
    a4c8:	str	lr, [sp, #4]
    a4cc:	str	r4, [sp, #8]
    a4d0:	str	r5, [sp, #12]
    a4d4:	str	r6, [sp, #16]
    a4d8:	mov	r4, r2
    a4dc:	mov	r5, r1
    a4e0:	mov	r6, r0
    a4e4:	ldr	r0, [r6, #4]
    a4e8:	cmp	r0, #2
    a4ec:	beq	a504 <coda_expression_eval_float+0x48>
    a4f0:	mvn	r0, #99	; 0x63
    a4f4:	ldr	r1, [pc, #200]	; a5c4 <coda_expression_eval_float+0x108>
    a4f8:	bl	0 <coda_set_error>
    a4fc:	mvn	r0, #0
    a500:	b	a5a8 <coda_expression_eval_float+0xec>
    a504:	cmp	r5, #0
    a508:	bne	a520 <coda_expression_eval_float+0x64>
    a50c:	ldr	r0, [r6, #8]
    a510:	cmp	r0, #0
    a514:	moveq	r2, #1
    a518:	movne	r2, #0
    a51c:	b	a524 <coda_expression_eval_float+0x68>
    a520:	mov	r2, #0
    a524:	cmp	r2, #0
    a528:	beq	a540 <coda_expression_eval_float+0x84>
    a52c:	mvn	r0, #99	; 0x63
    a530:	ldr	r1, [pc, #136]	; a5c0 <coda_expression_eval_float+0x104>
    a534:	bl	0 <coda_set_error>
    a538:	mvn	r0, #0
    a53c:	b	a5a8 <coda_expression_eval_float+0xec>
    a540:	add	r0, sp, #24
    a544:	mov	r1, r5
    a548:	bl	df4 <init_eval_info>
    a54c:	add	r0, sp, #24
    a550:	mov	r2, r4
    a554:	mov	r1, r6
    a558:	bl	26a8 <eval_float>
    a55c:	cmp	r0, #0
    a560:	beq	a5a4 <coda_expression_eval_float+0xe8>
    a564:	cmp	r5, #0
    a568:	beq	a588 <coda_expression_eval_float+0xcc>
    a56c:	add	r1, sp, #32
    a570:	mov	r0, r5
    a574:	bl	0 <coda_cursor_compare>
    a578:	cmp	r0, #0
    a57c:	movne	r0, #1
    a580:	moveq	r0, #0
    a584:	b	a58c <coda_expression_eval_float+0xd0>
    a588:	mov	r0, #0
    a58c:	cmp	r0, #0
    a590:	beq	a59c <coda_expression_eval_float+0xe0>
    a594:	add	r0, sp, #32
    a598:	bl	0 <coda_cursor_add_to_error_message>
    a59c:	mvn	r0, #0
    a5a0:	b	a5a8 <coda_expression_eval_float+0xec>
    a5a4:	mov	r0, #0
    a5a8:	ldr	r4, [sp, #8]
    a5ac:	ldr	r5, [sp, #12]
    a5b0:	ldr	r6, [sp, #16]
    a5b4:	ldr	lr, [sp, #4]
    a5b8:	add	sp, sp, #592	; 0x250
    a5bc:	bx	lr
    a5c0:	.word	0x00000abd
    a5c4:	.word	0x00000009

0000a5c8 <coda_expression_eval_string>:
    a5c8:	mov	ip, sp
    a5cc:	sub	sp, sp, #608	; 0x260
    a5d0:	str	ip, [sp, #4]
    a5d4:	str	lr, [sp, #8]
    a5d8:	str	r4, [sp, #16]
    a5dc:	str	r5, [sp, #20]
    a5e0:	str	r6, [sp, #24]
    a5e4:	str	r7, [sp, #28]
    a5e8:	mov	r5, r3
    a5ec:	mov	r6, r2
    a5f0:	mov	r4, r1
    a5f4:	mov	r7, r0
    a5f8:	ldr	r3, [r7, #4]
    a5fc:	cmp	r3, #3
    a600:	beq	a618 <coda_expression_eval_string+0x50>
    a604:	mvn	r0, #99	; 0x63
    a608:	ldr	r1, [pc, #388]	; a794 <coda_expression_eval_string+0x1cc>
    a60c:	bl	0 <coda_set_error>
    a610:	mvn	r0, #0
    a614:	b	a76c <coda_expression_eval_string+0x1a4>
    a618:	cmp	r4, #0
    a61c:	bne	a634 <coda_expression_eval_string+0x6c>
    a620:	ldr	r1, [r7, #8]
    a624:	cmp	r1, #0
    a628:	moveq	r0, #1
    a62c:	movne	r0, #0
    a630:	b	a638 <coda_expression_eval_string+0x70>
    a634:	mov	r0, #0
    a638:	cmp	r0, #0
    a63c:	beq	a654 <coda_expression_eval_string+0x8c>
    a640:	mvn	r0, #99	; 0x63
    a644:	ldr	r1, [pc, #320]	; a78c <coda_expression_eval_string+0x1c4>
    a648:	bl	0 <coda_set_error>
    a64c:	mvn	r0, #0
    a650:	b	a76c <coda_expression_eval_string+0x1a4>
    a654:	add	r0, sp, #40	; 0x28
    a658:	mov	r1, r4
    a65c:	bl	df4 <init_eval_info>
    a660:	add	r0, sp, #40	; 0x28
    a664:	add	r2, sp, #32
    a668:	str	r6, [sp]
    a66c:	mov	r3, r5
    a670:	mov	r1, r7
    a674:	bl	5444 <eval_string>
    a678:	cmp	r0, #0
    a67c:	beq	a6c0 <coda_expression_eval_string+0xf8>
    a680:	cmp	r4, #0
    a684:	beq	a6a4 <coda_expression_eval_string+0xdc>
    a688:	add	r1, sp, #48	; 0x30
    a68c:	mov	r0, r4
    a690:	bl	0 <coda_cursor_compare>
    a694:	cmp	r0, #0
    a698:	movne	r0, #1
    a69c:	moveq	r0, #0
    a6a0:	b	a6a8 <coda_expression_eval_string+0xe0>
    a6a4:	mov	r0, #0
    a6a8:	cmp	r0, #0
    a6ac:	beq	a6b8 <coda_expression_eval_string+0xf0>
    a6b0:	add	r0, sp, #48	; 0x30
    a6b4:	bl	0 <coda_cursor_add_to_error_message>
    a6b8:	mvn	r0, #0
    a6bc:	b	a76c <coda_expression_eval_string+0x1a4>
    a6c0:	ldr	r3, [r5]
    a6c4:	cmp	r3, #0
    a6c8:	ble	a74c <coda_expression_eval_string+0x184>
    a6cc:	ldr	r1, [sp, #32]
    a6d0:	cmp	r1, #0
    a6d4:	beq	a738 <coda_expression_eval_string+0x170>
    a6d8:	ldr	ip, [r5]
    a6dc:	add	r0, ip, #1
    a6e0:	bl	0 <malloc>
    a6e4:	mov	r4, r0
    a6e8:	cmp	r4, #0
    a6ec:	bne	a714 <coda_expression_eval_string+0x14c>
    a6f0:	mvn	r0, #0
    a6f4:	ldr	r1, [pc, #140]	; a788 <coda_expression_eval_string+0x1c0>
    a6f8:	ldr	r2, [r5]
    a6fc:	ldr	r3, [pc, #140]	; a790 <coda_expression_eval_string+0x1c8>
    a700:	movw	r4, #5251	; 0x1483
    a704:	str	r4, [sp]
    a708:	bl	0 <coda_set_error>
    a70c:	mvn	r0, #0
    a710:	b	a76c <coda_expression_eval_string+0x1a4>
    a714:	ldr	r0, [r6]
    a718:	ldr	r1, [sp, #32]
    a71c:	add	r1, r0, r1
    a720:	ldr	r2, [r5]
    a724:	mov	r0, r4
    a728:	bl	0 <memcpy>
    a72c:	ldr	r0, [r6]
    a730:	bl	0 <free>
    a734:	str	r4, [r6]
    a738:	ldr	r3, [r6]
    a73c:	ldr	r2, [r5]
    a740:	mov	r0, #0
    a744:	strb	r0, [r3, r2]
    a748:	b	a768 <coda_expression_eval_string+0x1a0>
    a74c:	ldr	r0, [r6]
    a750:	cmp	r0, #0
    a754:	beq	a760 <coda_expression_eval_string+0x198>
    a758:	ldr	r0, [r6]
    a75c:	bl	0 <free>
    a760:	mov	r2, #0
    a764:	str	r2, [r6]
    a768:	mov	r0, #0
    a76c:	ldr	r4, [sp, #16]
    a770:	ldr	r5, [sp, #20]
    a774:	ldr	r6, [sp, #24]
    a778:	ldr	r7, [sp, #28]
    a77c:	ldr	lr, [sp, #8]
    a780:	add	sp, sp, #608	; 0x260
    a784:	bx	lr
    a788:	.word	0x00000ce9
    a78c:	.word	0x00000abd
    a790:	.word	0x0000053b
    a794:	.word	0x00000bfe

0000a798 <coda_expression_eval_node>:
    a798:	mov	ip, sp
    a79c:	sub	sp, sp, #584	; 0x248
    a7a0:	str	ip, [sp]
    a7a4:	str	lr, [sp, #4]
    a7a8:	str	r4, [sp, #8]
    a7ac:	str	r5, [sp, #12]
    a7b0:	mov	r4, r1
    a7b4:	mov	r5, r0
    a7b8:	ldr	r3, [r5, #4]
    a7bc:	cmp	r3, #4
    a7c0:	beq	a7d8 <coda_expression_eval_node+0x40>
    a7c4:	mvn	r0, #99	; 0x63
    a7c8:	ldr	r1, [pc, #188]	; a88c <coda_expression_eval_node+0xf4>
    a7cc:	bl	0 <coda_set_error>
    a7d0:	mvn	r0, #0
    a7d4:	b	a874 <coda_expression_eval_node+0xdc>
    a7d8:	cmp	r4, #0
    a7dc:	bne	a7f4 <coda_expression_eval_node+0x5c>
    a7e0:	mvn	r0, #99	; 0x63
    a7e4:	ldr	r1, [pc, #156]	; a888 <coda_expression_eval_node+0xf0>
    a7e8:	bl	0 <coda_set_error>
    a7ec:	mvn	r0, #0
    a7f0:	b	a874 <coda_expression_eval_node+0xdc>
    a7f4:	add	r0, sp, #16
    a7f8:	mov	r1, r4
    a7fc:	bl	df4 <init_eval_info>
    a800:	add	r0, sp, #16
    a804:	mov	r1, r5
    a808:	bl	7608 <eval_cursor>
    a80c:	cmp	r0, #0
    a810:	beq	a854 <coda_expression_eval_node+0xbc>
    a814:	cmp	r4, #0
    a818:	beq	a838 <coda_expression_eval_node+0xa0>
    a81c:	add	r1, sp, #24
    a820:	mov	r0, r4
    a824:	bl	0 <coda_cursor_compare>
    a828:	cmp	r0, #0
    a82c:	movne	r0, #1
    a830:	moveq	r0, #0
    a834:	b	a83c <coda_expression_eval_node+0xa4>
    a838:	mov	r0, #0
    a83c:	cmp	r0, #0
    a840:	beq	a84c <coda_expression_eval_node+0xb4>
    a844:	add	r0, sp, #24
    a848:	bl	0 <coda_cursor_add_to_error_message>
    a84c:	mvn	r0, #0
    a850:	b	a874 <coda_expression_eval_node+0xdc>
    a854:	add	r2, sp, #24
    a858:	mov	r3, r4
    a85c:	mov	lr, #130	; 0x82
    a860:	ldr	ip, [r2], #4
    a864:	subs	lr, lr, #1
    a868:	str	ip, [r3], #4
    a86c:	bne	a860 <coda_expression_eval_node+0xc8>
    a870:	mov	r0, #0
    a874:	ldr	r4, [sp, #8]
    a878:	ldr	r5, [sp, #12]
    a87c:	ldr	lr, [sp, #4]
    a880:	add	sp, sp, #584	; 0x248
    a884:	bx	lr
    a888:	.word	0x00000ca7
    a88c:	.word	0x00000244
