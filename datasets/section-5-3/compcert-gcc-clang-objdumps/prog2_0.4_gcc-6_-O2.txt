
../compcert-repos/prog2/0.4:     file format elf32-littlearm


Disassembly of section .init:

000105e4 <.init>:
   105e4:	push	{r3, lr}
   105e8:	bl	107e0 <_start@@Base+0x3c>
   105ec:	pop	{r3, pc}

Disassembly of section .plt:

000105f0 <printf@plt-0x14>:
   105f0:	push	{lr}		; (str lr, [sp, #-4]!)
   105f4:	ldr	lr, [pc, #4]	; 10600 <printf@plt-0x4>
   105f8:	add	lr, pc, lr
   105fc:	ldr	pc, [lr, #8]!
   10600:	andeq	r0, r1, r0, lsl #20

00010604 <printf@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2560]!	; 0xa00

00010610 <puts@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2552]!	; 0x9f8

0001061c <malloc@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2544]!	; 0x9f0

00010628 <__libc_start_main@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2536]!	; 0x9e8

00010634 <__gmon_start__@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2528]!	; 0x9e0

00010640 <__isoc99_scanf@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2520]!	; 0x9d8

0001064c <abort@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2512]!	; 0x9d0

Disassembly of section .text:

00010658 <main@@Base>:
   10658:	push	{r4, r5, r6, r7, r8, lr}
   1065c:	sub	sp, sp, #8
   10660:	ldr	r0, [pc, #284]	; 10784 <main@@Base+0x12c>
   10664:	bl	10604 <printf@plt>
   10668:	add	r1, sp, #4
   1066c:	ldr	r0, [pc, #276]	; 10788 <main@@Base+0x130>
   10670:	bl	10640 <__isoc99_scanf@plt>
   10674:	ldr	r0, [sp, #4]
   10678:	cmp	r0, #100	; 0x64
   1067c:	bgt	1076c <main@@Base+0x114>
   10680:	lsl	r0, r0, #2
   10684:	bl	1061c <malloc@plt>
   10688:	ldr	r3, [sp, #4]
   1068c:	cmp	r3, #0
   10690:	mov	r6, r0
   10694:	ble	10714 <main@@Base+0xbc>
   10698:	ldr	r8, [pc, #236]	; 1078c <main@@Base+0x134>
   1069c:	ldr	r7, [pc, #228]	; 10788 <main@@Base+0x130>
   106a0:	mov	r5, r0
   106a4:	mov	r4, #0
   106a8:	add	r4, r4, #1
   106ac:	mov	r1, r4
   106b0:	mov	r0, r8
   106b4:	bl	10604 <printf@plt>
   106b8:	mov	r1, r5
   106bc:	mov	r0, r7
   106c0:	bl	10640 <__isoc99_scanf@plt>
   106c4:	ldr	r2, [sp, #4]
   106c8:	add	r5, r5, #4
   106cc:	cmp	r2, r4
   106d0:	bgt	106a8 <main@@Base+0x50>
   106d4:	cmp	r2, #1
   106d8:	ldr	r3, [r6]
   106dc:	ble	10714 <main@@Base+0xbc>
   106e0:	ldr	r0, [r6, #4]
   106e4:	cmp	r3, r0
   106e8:	addle	ip, r6, #4
   106ec:	movle	r3, #1
   106f0:	ble	10708 <main@@Base+0xb0>
   106f4:	b	10760 <main@@Base+0x108>
   106f8:	ldr	r1, [ip, #4]!
   106fc:	cmp	r1, r0
   10700:	blt	10760 <main@@Base+0x108>
   10704:	mov	r0, r1
   10708:	add	r3, r3, #1
   1070c:	cmp	r2, r3
   10710:	bne	106f8 <main@@Base+0xa0>
   10714:	ldr	r0, [pc, #116]	; 10790 <main@@Base+0x138>
   10718:	bl	10604 <printf@plt>
   1071c:	ldr	r5, [sp, #4]
   10720:	sub	r4, r5, #1
   10724:	cmp	r4, #0
   10728:	addgt	r5, r6, r5, lsl #2
   1072c:	ldrgt	r7, [pc, #96]	; 10794 <main@@Base+0x13c>
   10730:	ble	10748 <main@@Base+0xf0>
   10734:	ldr	r1, [r5, #-4]!
   10738:	mov	r0, r7
   1073c:	bl	10604 <printf@plt>
   10740:	subs	r4, r4, #1
   10744:	bne	10734 <main@@Base+0xdc>
   10748:	ldr	r1, [r6, r4, lsl #2]
   1074c:	ldr	r0, [pc, #68]	; 10798 <main@@Base+0x140>
   10750:	bl	10604 <printf@plt>
   10754:	mov	r0, #0
   10758:	add	sp, sp, #8
   1075c:	pop	{r4, r5, r6, r7, r8, pc}
   10760:	ldr	r0, [pc, #52]	; 1079c <main@@Base+0x144>
   10764:	bl	10610 <puts@plt>
   10768:	b	10754 <main@@Base+0xfc>
   1076c:	ldr	r0, [pc, #44]	; 107a0 <main@@Base+0x148>
   10770:	bl	10604 <printf@plt>
   10774:	mov	r3, #100	; 0x64
   10778:	mov	r0, r3
   1077c:	str	r3, [sp, #4]
   10780:	b	10680 <main@@Base+0x28>
   10784:	andeq	r0, r1, ip, lsl #19
   10788:			; <UNDEFINED> instruction: 0x000109b0
   1078c:	andeq	r0, r1, r4, ror #19
   10790:	andeq	r0, r1, r4, lsr #20
   10794:	strdeq	r0, [r1], -ip
   10798:	andeq	r0, r1, r0, lsl #20
   1079c:	andeq	r0, r1, r8, lsl #20
   107a0:			; <UNDEFINED> instruction: 0x000109b4

000107a4 <_start@@Base>:
   107a4:	mov	fp, #0
   107a8:	mov	lr, #0
   107ac:	pop	{r1}		; (ldr r1, [sp], #4)
   107b0:	mov	r2, sp
   107b4:	push	{r2}		; (str r2, [sp, #-4]!)
   107b8:	push	{r0}		; (str r0, [sp, #-4]!)
   107bc:	ldr	ip, [pc, #16]	; 107d4 <_start@@Base+0x30>
   107c0:	push	{ip}		; (str ip, [sp, #-4]!)
   107c4:	ldr	r0, [pc, #12]	; 107d8 <_start@@Base+0x34>
   107c8:	ldr	r3, [pc, #12]	; 107dc <_start@@Base+0x38>
   107cc:	bl	10628 <__libc_start_main@plt>
   107d0:	bl	1064c <abort@plt>
   107d4:	andeq	r0, r1, ip, ror r9
   107d8:	andeq	r0, r1, r8, asr r6
   107dc:	andeq	r0, r1, ip, lsl r9
   107e0:	ldr	r3, [pc, #20]	; 107fc <_start@@Base+0x58>
   107e4:	ldr	r2, [pc, #20]	; 10800 <_start@@Base+0x5c>
   107e8:	add	r3, pc, r3
   107ec:	ldr	r2, [r3, r2]
   107f0:	cmp	r2, #0
   107f4:	bxeq	lr
   107f8:	b	10634 <__gmon_start__@plt>
   107fc:	andeq	r0, r1, r0, lsl r8
   10800:	andeq	r0, r0, r8, lsr #32
   10804:	ldr	r3, [pc, #28]	; 10828 <_start@@Base+0x84>
   10808:	ldr	r0, [pc, #28]	; 1082c <_start@@Base+0x88>
   1080c:	sub	r3, r3, r0
   10810:	cmp	r3, #6
   10814:	bxls	lr
   10818:	ldr	r3, [pc, #16]	; 10830 <_start@@Base+0x8c>
   1081c:	cmp	r3, #0
   10820:	bxeq	lr
   10824:	bx	r3
   10828:	andeq	r1, r2, r7, lsr r0
   1082c:	andeq	r1, r2, r4, lsr r0
   10830:	andeq	r0, r0, r0
   10834:	ldr	r1, [pc, #36]	; 10860 <_start@@Base+0xbc>
   10838:	ldr	r0, [pc, #36]	; 10864 <_start@@Base+0xc0>
   1083c:	sub	r1, r1, r0
   10840:	asr	r1, r1, #2
   10844:	add	r1, r1, r1, lsr #31
   10848:	asrs	r1, r1, #1
   1084c:	bxeq	lr
   10850:	ldr	r3, [pc, #16]	; 10868 <_start@@Base+0xc4>
   10854:	cmp	r3, #0
   10858:	bxeq	lr
   1085c:	bx	r3
   10860:	andeq	r1, r2, r4, lsr r0
   10864:	andeq	r1, r2, r4, lsr r0
   10868:	andeq	r0, r0, r0
   1086c:	push	{r4, lr}
   10870:	ldr	r4, [pc, #24]	; 10890 <_start@@Base+0xec>
   10874:	ldrb	r3, [r4]
   10878:	cmp	r3, #0
   1087c:	popne	{r4, pc}
   10880:	bl	10804 <_start@@Base+0x60>
   10884:	mov	r3, #1
   10888:	strb	r3, [r4]
   1088c:	pop	{r4, pc}
   10890:	andeq	r1, r2, r4, lsr r0
   10894:	ldr	r0, [pc, #40]	; 108c4 <_start@@Base+0x120>
   10898:	ldr	r3, [r0]
   1089c:	cmp	r3, #0
   108a0:	bne	108a8 <_start@@Base+0x104>
   108a4:	b	10834 <_start@@Base+0x90>
   108a8:	ldr	r3, [pc, #24]	; 108c8 <_start@@Base+0x124>
   108ac:	cmp	r3, #0
   108b0:	beq	108a4 <_start@@Base+0x100>
   108b4:	push	{r4, lr}
   108b8:	blx	r3
   108bc:	pop	{r4, lr}
   108c0:	b	10834 <_start@@Base+0x90>
   108c4:	andeq	r0, r2, r4, lsl pc
   108c8:	andeq	r0, r0, r0

000108cc <ordenado@@Base>:
   108cc:	cmp	r1, #1
   108d0:	ldr	r3, [r0]
   108d4:	ble	1090c <ordenado@@Base+0x40>
   108d8:	ldr	ip, [r0, #4]
   108dc:	cmp	r3, ip
   108e0:	bgt	10914 <ordenado@@Base+0x48>
   108e4:	add	r0, r0, #4
   108e8:	mov	r3, #1
   108ec:	b	10900 <ordenado@@Base+0x34>
   108f0:	ldr	r2, [r0, #4]!
   108f4:	cmp	r2, ip
   108f8:	mov	ip, r2
   108fc:	blt	10914 <ordenado@@Base+0x48>
   10900:	add	r3, r3, #1
   10904:	cmp	r1, r3
   10908:	bne	108f0 <ordenado@@Base+0x24>
   1090c:	mov	r0, #1
   10910:	bx	lr
   10914:	mov	r0, #0
   10918:	bx	lr

0001091c <__libc_csu_init@@Base>:
   1091c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10920:	mov	r7, r0
   10924:	ldr	r6, [pc, #72]	; 10974 <__libc_csu_init@@Base+0x58>
   10928:	ldr	r5, [pc, #72]	; 10978 <__libc_csu_init@@Base+0x5c>
   1092c:	add	r6, pc, r6
   10930:	add	r5, pc, r5
   10934:	sub	r6, r6, r5
   10938:	mov	r8, r1
   1093c:	mov	r9, r2
   10940:	bl	105e4 <printf@plt-0x20>
   10944:	asrs	r6, r6, #2
   10948:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1094c:	mov	r4, #0
   10950:	add	r4, r4, #1
   10954:	ldr	r3, [r5], #4
   10958:	mov	r2, r9
   1095c:	mov	r1, r8
   10960:	mov	r0, r7
   10964:	blx	r3
   10968:	cmp	r6, r4
   1096c:	bne	10950 <__libc_csu_init@@Base+0x34>
   10970:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10974:	ldrdeq	r0, [r1], -ip
   10978:	ldrdeq	r0, [r1], -r4

0001097c <__libc_csu_fini@@Base>:
   1097c:	bx	lr

Disassembly of section .fini:

00010980 <.fini>:
   10980:	push	{r3, lr}
   10984:	pop	{r3, pc}
