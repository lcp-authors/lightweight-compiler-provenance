
../repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <write_data>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #264	; 0x108
   8:	str	ip, [sp, #16]
   c:	str	lr, [sp, #20]
  10:	str	r4, [sp, #24]
  14:	str	r5, [sp, #28]
  18:	str	r6, [sp, #32]
  1c:	str	r7, [sp, #36]	; 0x24
  20:	str	r8, [sp, #40]	; 0x28
  24:	str	r9, [sp, #44]	; 0x2c
  28:	str	sl, [sp, #48]	; 0x30
  2c:	str	fp, [sp, #52]	; 0x34
  30:	mov	r9, r3
  34:	mov	r5, r2
  38:	mov	r6, r1
  3c:	mov	r4, r0
  40:	ldr	r2, [pc, #2632]	; a90 <write_data+0xa90>
  44:	ldr	r0, [r2, r6, lsl #2]
  48:	add	r1, sp, #60	; 0x3c
  4c:	bl	0 <coda_type_get_class>
  50:	cmp	r0, #0
  54:	beq	5c <write_data+0x5c>
  58:	bl	0 <handle_coda_error>
  5c:	ldr	r0, [sp, #60]	; 0x3c
  60:	cmp	r0, #0
  64:	beq	9c8 <write_data+0x9c8>
  68:	cmp	r0, #1
  6c:	bne	260 <write_data+0x260>
  70:	ldr	ip, [pc, #2608]	; aa8 <write_data+0xaa8>
  74:	lsl	r2, r5, #6
  78:	add	r2, r2, r5, lsl #4
  7c:	add	sl, ip, r2
  80:	ldr	r0, [sl]
  84:	cmp	r5, #0
  88:	bne	94 <write_data+0x94>
  8c:	mov	r1, #0
  90:	str	r1, [sl, #44]	; 0x2c
  94:	ldr	r1, [pc, #2576]	; aac <write_data+0xaac>
  98:	ldr	r2, [r1]
  9c:	ldr	r1, [sl, #4]
  a0:	add	r3, r0, r1
  a4:	cmp	r2, r3
  a8:	movge	r8, #1
  ac:	movlt	r8, #0
  b0:	cmp	r2, r3
  b4:	blt	ec <write_data+0xec>
  b8:	ldr	r1, [pc, #2552]	; ab8 <write_data+0xab8>
  bc:	ldr	r1, [r1]
  c0:	sub	r3, r1, #1
  c4:	cmp	r5, r3
  c8:	bge	ec <write_data+0xec>
  cc:	ldr	r1, [pc, #2516]	; aa8 <write_data+0xaa8>
  d0:	lsl	ip, r5, #6
  d4:	add	r2, ip, r5, lsl #4
  d8:	add	r1, r1, r2
  dc:	ldr	ip, [sl, #44]	; 0x2c
  e0:	ldr	r2, [sl, #40]	; 0x28
  e4:	mul	r3, ip, r2
  e8:	str	r3, [r1, #124]	; 0x7c
  ec:	mov	fp, #1
  f0:	mov	r1, #0
  f4:	ldr	r2, [sl, #4]
  f8:	cmp	r1, r2
  fc:	bge	164 <write_data+0x164>
 100:	ldr	r2, [pc, #2520]	; ae0 <write_data+0xae0>
 104:	add	ip, r0, r1
 108:	ldr	r2, [r2, ip, lsl #2]
 10c:	cmp	r2, #0
 110:	beq	130 <write_data+0x130>
 114:	add	r3, sp, #64	; 0x40
 118:	ldr	r2, [pc, #2468]	; ac4 <write_data+0xac4>
 11c:	ldr	ip, [r2, ip, lsl #2]
 120:	ldr	r2, [sl, #44]	; 0x2c
 124:	ldr	r2, [ip, r2, lsl #2]
 128:	str	r2, [r3, r1, lsl #2]
 12c:	b	140 <write_data+0x140>
 130:	add	r2, sp, #64	; 0x40
 134:	ldr	r3, [pc, #2384]	; a8c <write_data+0xa8c>
 138:	ldr	ip, [r3, ip, lsl #2]
 13c:	str	ip, [r2, r1, lsl #2]
 140:	add	r3, sp, #64	; 0x40
 144:	ldr	r2, [r3, r1, lsl #2]
 148:	mul	fp, fp, r2
 14c:	lsl	r2, r1, #2
 150:	add	r3, sl, r2
 154:	mov	r2, #0
 158:	str	r2, [r3, #48]	; 0x30
 15c:	add	r1, r1, #1
 160:	b	f4 <write_data+0xf4>
 164:	cmp	fp, #0
 168:	beq	a2c <write_data+0xa2c>
 16c:	ldr	r0, [pc, #2304]	; a74 <write_data+0xa74>
 170:	bl	0 <coda_cursor_goto_first_array_element>
 174:	cmp	r0, #0
 178:	beq	180 <write_data+0x180>
 17c:	bl	0 <handle_coda_error>
 180:	mov	r7, #0
 184:	cmp	r7, fp
 188:	bge	254 <write_data+0x254>
 18c:	add	r1, r6, #1
 190:	add	r2, r5, #1
 194:	mov	r3, r9
 198:	mov	r0, r4
 19c:	bl	0 <write_data>
 1a0:	sub	r2, fp, #1
 1a4:	cmp	r7, r2
 1a8:	bge	24c <write_data+0x24c>
 1ac:	ldr	r0, [pc, #2240]	; a74 <write_data+0xa74>
 1b0:	bl	0 <coda_cursor_goto_next_array_element>
 1b4:	cmp	r0, #0
 1b8:	beq	1c0 <write_data+0x1c0>
 1bc:	bl	0 <handle_coda_error>
 1c0:	cmp	r8, #0
 1c4:	beq	1f8 <write_data+0x1f8>
 1c8:	ldr	r0, [pc, #2280]	; ab8 <write_data+0xab8>
 1cc:	ldr	r3, [r0]
 1d0:	sub	r0, r3, #1
 1d4:	cmp	r5, r0
 1d8:	bge	1f8 <write_data+0x1f8>
 1dc:	ldr	r3, [pc, #2244]	; aa8 <write_data+0xaa8>
 1e0:	lsl	r0, r5, #6
 1e4:	add	r2, r0, r5, lsl #4
 1e8:	add	ip, r3, r2
 1ec:	ldr	r1, [ip, #124]	; 0x7c
 1f0:	add	r0, r1, #1
 1f4:	str	r0, [ip, #124]	; 0x7c
 1f8:	ldr	r0, [pc, #2196]	; a94 <write_data+0xa94>
 1fc:	ldr	r3, [r0]
 200:	cmp	r3, #0
 204:	beq	24c <write_data+0x24c>
 208:	ldr	ip, [sl, #4]
 20c:	sub	r3, ip, #1
 210:	cmp	r3, #0
 214:	blt	24c <write_data+0x24c>
 218:	lsl	ip, r3, #2
 21c:	add	r0, sl, ip
 220:	ldr	r2, [r0, #48]	; 0x30
 224:	add	r2, r2, #1
 228:	str	r2, [r0, #48]	; 0x30
 22c:	add	r1, sp, #64	; 0x40
 230:	ldr	ip, [r1, r3, lsl #2]
 234:	cmp	r2, ip
 238:	bne	24c <write_data+0x24c>
 23c:	sub	r3, r3, #1
 240:	mov	r1, #0
 244:	str	r1, [r0, #48]	; 0x30
 248:	b	210 <write_data+0x210>
 24c:	add	r7, r7, #1
 250:	b	184 <write_data+0x184>
 254:	ldr	r0, [pc, #2072]	; a74 <write_data+0xa74>
 258:	bl	0 <coda_cursor_goto_parent>
 25c:	b	a2c <write_data+0xa2c>
 260:	ldr	r1, [pc, #2092]	; a94 <write_data+0xa94>
 264:	ldr	r1, [r1]
 268:	cmp	r1, #0
 26c:	beq	304 <write_data+0x304>
 270:	mov	r8, #0
 274:	mov	r7, #0
 278:	ldr	r2, [pc, #2028]	; a6c <write_data+0xa6c>
 27c:	ldr	r1, [r2]
 280:	cmp	r7, r1
 284:	bge	304 <write_data+0x304>
 288:	ldr	ip, [pc, #2048]	; a90 <write_data+0xa90>
 28c:	ldr	r0, [ip, r7, lsl #2]
 290:	add	r1, sp, #260	; 0x104
 294:	bl	0 <coda_type_get_class>
 298:	cmp	r0, #0
 29c:	beq	2a4 <write_data+0x2a4>
 2a0:	bl	0 <handle_coda_error>
 2a4:	ldr	r3, [sp, #260]	; 0x104
 2a8:	cmp	r3, #1
 2ac:	bne	2fc <write_data+0x2fc>
 2b0:	mov	r5, #0
 2b4:	ldr	r3, [pc, #2028]	; aa8 <write_data+0xaa8>
 2b8:	lsl	ip, r8, #6
 2bc:	add	ip, ip, r8, lsl #4
 2c0:	add	r0, r3, ip
 2c4:	ldr	r3, [r0, #4]
 2c8:	cmp	r5, r3
 2cc:	bge	2f8 <write_data+0x2f8>
 2d0:	ldr	r1, [pc, #2072]	; af0 <write_data+0xaf0>
 2d4:	lsl	r2, r5, #2
 2d8:	add	r3, r0, r2
 2dc:	ldr	r2, [r3, #48]	; 0x30
 2e0:	ldr	r3, [pc, #2048]	; ae8 <write_data+0xae8>
 2e4:	ldr	r3, [r3]
 2e8:	mov	r0, r4
 2ec:	bl	0 <fprintf>
 2f0:	add	r5, r5, #1
 2f4:	b	2b4 <write_data+0x2b4>
 2f8:	add	r8, r8, #1
 2fc:	add	r7, r7, #1
 300:	b	278 <write_data+0x278>
 304:	ldr	r3, [pc, #1924]	; a90 <write_data+0xa90>
 308:	ldr	r0, [r3, r6, lsl #2]
 30c:	add	r1, sp, #100	; 0x64
 310:	bl	0 <coda_type_get_class>
 314:	cmp	r0, #0
 318:	beq	320 <write_data+0x320>
 31c:	bl	0 <handle_coda_error>
 320:	ldr	r3, [sp, #100]	; 0x64
 324:	cmp	r3, #7
 328:	bcs	9b8 <write_data+0x9b8>
 32c:	add	pc, pc, r3, lsl #2
 330:	nop	{0}
 334:	b	99c <write_data+0x99c>
 338:	b	99c <write_data+0x99c>
 33c:	b	350 <write_data+0x350>
 340:	b	350 <write_data+0x350>
 344:	b	350 <write_data+0x350>
 348:	b	350 <write_data+0x350>
 34c:	b	844 <write_data+0x844>
 350:	ldr	r2, [pc, #1848]	; a90 <write_data+0xa90>
 354:	ldr	r0, [r2, r6, lsl #2]
 358:	add	r1, sp, #104	; 0x68
 35c:	bl	0 <coda_type_get_read_type>
 360:	cmp	r0, #0
 364:	beq	36c <write_data+0x36c>
 368:	bl	0 <handle_coda_error>
 36c:	ldr	r1, [sp, #104]	; 0x68
 370:	cmp	r1, #7
 374:	bcs	440 <write_data+0x440>
 378:	cmp	r1, #3
 37c:	bcs	394 <write_data+0x394>
 380:	cmp	r1, #0
 384:	beq	3a4 <write_data+0x3a4>
 388:	cmp	r1, #1
 38c:	beq	3d8 <write_data+0x3d8>
 390:	b	3a4 <write_data+0x3a4>
 394:	cmp	r1, #5
 398:	bcs	3d0 <write_data+0x3d0>
 39c:	cmp	r1, #3
 3a0:	beq	3d8 <write_data+0x3d8>
 3a4:	ldr	r0, [pc, #1736]	; a74 <write_data+0xa74>
 3a8:	add	r1, sp, #112	; 0x70
 3ac:	bl	0 <coda_cursor_read_int32>
 3b0:	cmp	r0, #0
 3b4:	beq	3bc <write_data+0x3bc>
 3b8:	bl	0 <handle_coda_error>
 3bc:	ldr	r1, [pc, #1708]	; a70 <write_data+0xa70>
 3c0:	ldr	r2, [sp, #112]	; 0x70
 3c4:	mov	r0, r4
 3c8:	bl	0 <fprintf>
 3cc:	b	9b8 <write_data+0x9b8>
 3d0:	cmp	r1, #5
 3d4:	bne	404 <write_data+0x404>
 3d8:	ldr	r0, [pc, #1684]	; a74 <write_data+0xa74>
 3dc:	add	r1, sp, #116	; 0x74
 3e0:	bl	0 <coda_cursor_read_uint32>
 3e4:	cmp	r0, #0
 3e8:	beq	3f0 <write_data+0x3f0>
 3ec:	bl	0 <handle_coda_error>
 3f0:	ldr	r1, [pc, #1632]	; a58 <write_data+0xa58>
 3f4:	ldr	r2, [sp, #116]	; 0x74
 3f8:	mov	r0, r4
 3fc:	bl	0 <fprintf>
 400:	b	9b8 <write_data+0x9b8>
 404:	ldr	r0, [pc, #1640]	; a74 <write_data+0xa74>
 408:	add	r1, sp, #136	; 0x88
 40c:	bl	0 <coda_cursor_read_int64>
 410:	cmp	r0, #0
 414:	beq	41c <write_data+0x41c>
 418:	bl	0 <handle_coda_error>
 41c:	ldr	r0, [sp, #136]	; 0x88
 420:	ldr	r1, [sp, #140]	; 0x8c
 424:	add	r2, sp, #184	; 0xb8
 428:	bl	0 <coda_str64>
 42c:	ldr	r1, [pc, #1664]	; ab4 <write_data+0xab4>
 430:	add	r2, sp, #184	; 0xb8
 434:	mov	r0, r4
 438:	bl	0 <fprintf>
 43c:	b	9b8 <write_data+0x9b8>
 440:	cmp	r1, #10
 444:	bcs	4e0 <write_data+0x4e0>
 448:	cmp	r1, #7
 44c:	beq	4a4 <write_data+0x4a4>
 450:	ldr	r0, [pc, #1564]	; a74 <write_data+0xa74>
 454:	add	r1, sp, #152	; 0x98
 458:	bl	0 <coda_cursor_read_double>
 45c:	cmp	r0, #0
 460:	beq	468 <write_data+0x468>
 464:	bl	0 <handle_coda_error>
 468:	ldr	r2, [sp, #104]	; 0x68
 46c:	cmp	r2, #8
 470:	beq	48c <write_data+0x48c>
 474:	ldr	r1, [pc, #1564]	; a98 <write_data+0xa98>
 478:	vldr	d2, [sp, #152]	; 0x98
 47c:	mov	r0, r4
 480:	vmov	r2, r3, d2
 484:	bl	0 <fprintf>
 488:	b	9b8 <write_data+0x9b8>
 48c:	ldr	r1, [pc, #1512]	; a7c <write_data+0xa7c>
 490:	vldr	d2, [sp, #152]	; 0x98
 494:	mov	r0, r4
 498:	vmov	r2, r3, d2
 49c:	bl	0 <fprintf>
 4a0:	b	9b8 <write_data+0x9b8>
 4a4:	ldr	r0, [pc, #1480]	; a74 <write_data+0xa74>
 4a8:	add	r1, sp, #144	; 0x90
 4ac:	bl	0 <coda_cursor_read_uint64>
 4b0:	cmp	r0, #0
 4b4:	beq	4bc <write_data+0x4bc>
 4b8:	bl	0 <handle_coda_error>
 4bc:	ldr	r0, [sp, #144]	; 0x90
 4c0:	ldr	r1, [sp, #148]	; 0x94
 4c4:	add	r2, sp, #208	; 0xd0
 4c8:	bl	0 <coda_str64u>
 4cc:	ldr	r1, [pc, #1504]	; ab4 <write_data+0xab4>
 4d0:	add	r2, sp, #208	; 0xd0
 4d4:	mov	r0, r4
 4d8:	bl	0 <fprintf>
 4dc:	b	9b8 <write_data+0x9b8>
 4e0:	cmp	r1, #12
 4e4:	bcs	5f4 <write_data+0x5f4>
 4e8:	cmp	r1, #10
 4ec:	bne	540 <write_data+0x540>
 4f0:	ldr	r0, [pc, #1404]	; a74 <write_data+0xa74>
 4f4:	add	r1, sp, #96	; 0x60
 4f8:	bl	0 <coda_cursor_read_char>
 4fc:	cmp	r0, #0
 500:	beq	508 <write_data+0x508>
 504:	bl	0 <handle_coda_error>
 508:	ldr	ip, [pc, #1360]	; a60 <write_data+0xa60>
 50c:	ldr	r1, [ip]
 510:	cmp	r1, #0
 514:	bne	52c <write_data+0x52c>
 518:	ldr	r1, [pc, #1460]	; ad4 <write_data+0xad4>
 51c:	ldrb	r2, [sp, #96]	; 0x60
 520:	mov	r0, r4
 524:	bl	0 <fprintf>
 528:	b	9b8 <write_data+0x9b8>
 52c:	ldr	r1, [pc, #1472]	; af4 <write_data+0xaf4>
 530:	ldrb	r2, [sp, #96]	; 0x60
 534:	mov	r0, r4
 538:	bl	0 <fprintf>
 53c:	b	9b8 <write_data+0x9b8>
 540:	ldr	r0, [pc, #1324]	; a74 <write_data+0xa74>
 544:	add	r1, sp, #108	; 0x6c
 548:	bl	0 <coda_cursor_get_string_length>
 54c:	cmp	r0, #0
 550:	beq	558 <write_data+0x558>
 554:	bl	0 <handle_coda_error>
 558:	ldr	r2, [sp, #108]	; 0x6c
 55c:	add	r0, r2, #1
 560:	bl	0 <malloc>
 564:	mov	r5, r0
 568:	cmp	r5, #0
 56c:	bne	594 <write_data+0x594>
 570:	mvn	r0, #0
 574:	ldr	r1, [pc, #1256]	; a64 <write_data+0xa64>
 578:	ldr	ip, [sp, #108]	; 0x6c
 57c:	add	r2, ip, #1
 580:	ldr	r3, [pc, #1360]	; ad8 <write_data+0xad8>
 584:	mov	r6, #126	; 0x7e
 588:	str	r6, [sp]
 58c:	bl	0 <coda_set_error>
 590:	bl	0 <handle_coda_error>
 594:	ldr	r0, [pc, #1240]	; a74 <write_data+0xa74>
 598:	ldr	r3, [sp, #108]	; 0x6c
 59c:	add	r2, r3, #1
 5a0:	mov	r1, r5
 5a4:	bl	0 <coda_cursor_read_string>
 5a8:	cmp	r0, #0
 5ac:	beq	5b4 <write_data+0x5b4>
 5b0:	bl	0 <handle_coda_error>
 5b4:	ldr	r1, [pc, #1188]	; a60 <write_data+0xa60>
 5b8:	ldr	r0, [r1]
 5bc:	cmp	r0, #0
 5c0:	bne	5d8 <write_data+0x5d8>
 5c4:	ldr	r1, [pc, #1256]	; ab4 <write_data+0xab4>
 5c8:	mov	r2, r5
 5cc:	mov	r0, r4
 5d0:	bl	0 <fprintf>
 5d4:	b	5e8 <write_data+0x5e8>
 5d8:	ldr	r1, [pc, #1184]	; a80 <write_data+0xa80>
 5dc:	mov	r2, r5
 5e0:	mov	r0, r4
 5e4:	bl	0 <fprintf>
 5e8:	mov	r0, r5
 5ec:	bl	0 <free>
 5f0:	b	9b8 <write_data+0x9b8>
 5f4:	cmp	r1, #12
 5f8:	beq	624 <write_data+0x624>
 5fc:	cmn	r1, #1
 600:	bne	9b8 <write_data+0x9b8>
 604:	ldr	r0, [pc, #1220]	; ad0 <write_data+0xad0>
 608:	ldr	r1, [pc, #1224]	; ad8 <write_data+0xad8>
 60c:	movw	r2, #294	; 0x126
 610:	ldr	r3, [pc, #1204]	; acc <write_data+0xacc>
 614:	bl	0 <__assert_fail>
 618:	mov	r0, #1
 61c:	bl	0 <exit>
 620:	b	9b8 <write_data+0x9b8>
 624:	ldr	r0, [pc, #1096]	; a74 <write_data+0xa74>
 628:	add	r1, sp, #128	; 0x80
 62c:	bl	0 <coda_cursor_get_bit_size>
 630:	cmp	r0, #0
 634:	beq	63c <write_data+0x63c>
 638:	bl	0 <handle_coda_error>
 63c:	mov	r3, #1
 640:	mov	r5, #0
 644:	ldr	ip, [sp, #128]	; 0x80
 648:	ldr	r0, [sp, #132]	; 0x84
 64c:	mov	r2, #0
 650:	and	r1, ip, #7
 654:	orr	r1, r2, r1
 658:	cmp	r1, #0
 65c:	movne	r1, #1
 660:	moveq	r1, #0
 664:	cmp	r1, #0
 668:	movne	r3, r3
 66c:	moveq	r3, r5
 670:	asr	r1, r0, #3
 674:	lsr	ip, ip, #3
 678:	orr	r0, ip, r0, lsl #29
 67c:	asr	ip, r3, #31
 680:	adds	r5, r0, r3
 684:	adc	r7, r1, ip
 688:	mov	r0, r5
 68c:	bl	0 <malloc>
 690:	mov	r8, r0
 694:	cmp	r8, #0
 698:	bne	6bc <write_data+0x6bc>
 69c:	mvn	r0, #0
 6a0:	ldr	r1, [pc, #956]	; a64 <write_data+0xa64>
 6a4:	mov	r2, r5
 6a8:	ldr	r3, [pc, #1064]	; ad8 <write_data+0xad8>
 6ac:	mov	r6, #163	; 0xa3
 6b0:	str	r6, [sp]
 6b4:	bl	0 <coda_set_error>
 6b8:	bl	0 <handle_coda_error>
 6bc:	ldr	r0, [pc, #944]	; a74 <write_data+0xa74>
 6c0:	mov	r3, #0
 6c4:	mov	r2, #0
 6c8:	ldr	r1, [sp, #128]	; 0x80
 6cc:	ldr	ip, [sp, #132]	; 0x84
 6d0:	str	ip, [sp, #4]
 6d4:	str	r1, [sp]
 6d8:	mov	r1, r8
 6dc:	bl	0 <coda_cursor_read_bits>
 6e0:	cmp	r0, #0
 6e4:	beq	6ec <write_data+0x6ec>
 6e8:	bl	0 <handle_coda_error>
 6ec:	mov	r6, #0
 6f0:	asr	r1, r6, #31
 6f4:	mov	r0, r6
 6f8:	mov	r2, r7
 6fc:	cmp	r1, r2
 700:	bne	714 <write_data+0x714>
 704:	mov	r2, r5
 708:	cmp	r0, r2
 70c:	bcc	71c <write_data+0x71c>
 710:	b	838 <write_data+0x838>
 714:	cmp	r1, r2
 718:	bge	838 <write_data+0x838>
 71c:	ldrb	r0, [r8, r6]
 720:	and	r2, r0, #255	; 0xff
 724:	cmp	r2, #11
 728:	bcs	78c <write_data+0x78c>
 72c:	cmp	r2, #9
 730:	bcs	764 <write_data+0x764>
 734:	cmp	r2, #7
 738:	beq	754 <write_data+0x754>
 73c:	cmp	r2, #8
 740:	bne	7dc <write_data+0x7dc>
 744:	ldr	r1, [pc, #892]	; ac8 <write_data+0xac8>
 748:	mov	r0, r4
 74c:	bl	0 <fprintf>
 750:	b	830 <write_data+0x830>
 754:	ldr	r1, [pc, #768]	; a5c <write_data+0xa5c>
 758:	mov	r0, r4
 75c:	bl	0 <fprintf>
 760:	b	830 <write_data+0x830>
 764:	cmp	r2, #9
 768:	bne	77c <write_data+0x77c>
 76c:	ldr	r1, [pc, #888]	; aec <write_data+0xaec>
 770:	mov	r0, r4
 774:	bl	0 <fprintf>
 778:	b	830 <write_data+0x830>
 77c:	ldr	r1, [pc, #792]	; a9c <write_data+0xa9c>
 780:	mov	r0, r4
 784:	bl	0 <fprintf>
 788:	b	830 <write_data+0x830>
 78c:	cmp	r2, #13
 790:	bcs	7bc <write_data+0x7bc>
 794:	cmp	r2, #11
 798:	bne	7ac <write_data+0x7ac>
 79c:	ldr	r1, [pc, #736]	; a84 <write_data+0xa84>
 7a0:	mov	r0, r4
 7a4:	bl	0 <fprintf>
 7a8:	b	830 <write_data+0x830>
 7ac:	ldr	r1, [pc, #816]	; ae4 <write_data+0xae4>
 7b0:	mov	r0, r4
 7b4:	bl	0 <fprintf>
 7b8:	b	830 <write_data+0x830>
 7bc:	cmp	r2, #13
 7c0:	beq	824 <write_data+0x824>
 7c4:	cmp	r2, #92	; 0x5c
 7c8:	bne	7dc <write_data+0x7dc>
 7cc:	ldr	r1, [pc, #744]	; abc <write_data+0xabc>
 7d0:	mov	r0, r4
 7d4:	bl	0 <fprintf>
 7d8:	b	830 <write_data+0x830>
 7dc:	cmp	r2, #126	; 0x7e
 7e0:	movle	r3, #1
 7e4:	movgt	r3, #0
 7e8:	mov	r1, #0
 7ec:	cmp	r2, #32
 7f0:	movge	r3, r3
 7f4:	movlt	r3, r1
 7f8:	cmp	r3, #0
 7fc:	bne	814 <write_data+0x814>
 800:	ldr	r1, [pc, #624]	; a78 <write_data+0xa78>
 804:	and	r2, r2, #255	; 0xff
 808:	mov	r0, r4
 80c:	bl	0 <fprintf>
 810:	b	830 <write_data+0x830>
 814:	ldr	r1, [pc, #696]	; ad4 <write_data+0xad4>
 818:	mov	r0, r4
 81c:	bl	0 <fprintf>
 820:	b	830 <write_data+0x830>
 824:	ldr	r1, [pc, #628]	; aa0 <write_data+0xaa0>
 828:	mov	r0, r4
 82c:	bl	0 <fprintf>
 830:	add	r6, r6, #1
 834:	b	6f0 <write_data+0x6f0>
 838:	mov	r0, r8
 83c:	bl	0 <free>
 840:	b	9b8 <write_data+0x9b8>
 844:	ldr	r0, [pc, #580]	; a90 <write_data+0xa90>
 848:	ldr	r0, [r0, r6, lsl #2]
 84c:	add	r1, sp, #120	; 0x78
 850:	bl	0 <coda_type_get_special_type>
 854:	cmp	r0, #0
 858:	beq	860 <write_data+0x860>
 85c:	bl	0 <handle_coda_error>
 860:	ldr	r0, [sp, #120]	; 0x78
 864:	cmp	r0, #2
 868:	bcs	878 <write_data+0x878>
 86c:	cmp	r0, #0
 870:	beq	9b8 <write_data+0x9b8>
 874:	b	8cc <write_data+0x8cc>
 878:	cmp	r0, #2
 87c:	beq	8cc <write_data+0x8cc>
 880:	cmp	r0, #3
 884:	bne	9b8 <write_data+0x9b8>
 888:	ldr	r0, [pc, #484]	; a74 <write_data+0xa74>
 88c:	add	r1, sp, #168	; 0xa8
 890:	bl	0 <coda_cursor_read_complex_double_pair>
 894:	cmp	r0, #0
 898:	beq	8a0 <write_data+0x8a0>
 89c:	bl	0 <handle_coda_error>
 8a0:	ldr	r1, [pc, #564]	; adc <write_data+0xadc>
 8a4:	vldr	d2, [sp, #168]	; 0xa8
 8a8:	ldr	r0, [pc, #568]	; ae8 <write_data+0xae8>
 8ac:	ldr	r2, [r0]
 8b0:	vldr	d5, [sp, #176]	; 0xb0
 8b4:	vstr	d5, [sp, #8]
 8b8:	str	r2, [sp]
 8bc:	mov	r0, r4
 8c0:	vmov	r2, r3, d2
 8c4:	bl	0 <fprintf>
 8c8:	b	9b8 <write_data+0x9b8>
 8cc:	ldr	r0, [pc, #416]	; a74 <write_data+0xa74>
 8d0:	add	r1, sp, #160	; 0xa0
 8d4:	bl	0 <coda_cursor_read_double>
 8d8:	cmp	r0, #0
 8dc:	beq	8e4 <write_data+0x8e4>
 8e0:	bl	0 <handle_coda_error>
 8e4:	ldr	r0, [sp, #120]	; 0x78
 8e8:	cmp	r0, #2
 8ec:	bne	984 <write_data+0x984>
 8f0:	ldr	r0, [pc, #440]	; ab0 <write_data+0xab0>
 8f4:	ldr	r2, [r0]
 8f8:	cmp	r2, #0
 8fc:	beq	984 <write_data+0x984>
 900:	vldr	d0, [sp, #160]	; 0xa0
 904:	bl	0 <coda_isNaN>
 908:	cmp	r0, #0
 90c:	bne	940 <write_data+0x940>
 910:	vldr	d0, [sp, #160]	; 0xa0
 914:	bl	0 <coda_isInf>
 918:	cmp	r0, #0
 91c:	bne	940 <write_data+0x940>
 920:	vldr	d0, [sp, #160]	; 0xa0
 924:	ldr	r0, [pc, #348]	; a88 <write_data+0xa88>
 928:	add	r1, sp, #232	; 0xe8
 92c:	bl	0 <coda_time_double_to_string>
 930:	cmp	r0, #0
 934:	beq	94c <write_data+0x94c>
 938:	bl	0 <handle_coda_error>
 93c:	b	94c <write_data+0x94c>
 940:	add	r0, sp, #232	; 0xe8
 944:	ldr	r1, [pc, #284]	; a68 <write_data+0xa68>
 948:	bl	0 <strcpy>
 94c:	ldr	r3, [pc, #268]	; a60 <write_data+0xa60>
 950:	ldr	r2, [r3]
 954:	cmp	r2, #0
 958:	bne	970 <write_data+0x970>
 95c:	ldr	r1, [pc, #336]	; ab4 <write_data+0xab4>
 960:	add	r2, sp, #232	; 0xe8
 964:	mov	r0, r4
 968:	bl	0 <fprintf>
 96c:	b	9b8 <write_data+0x9b8>
 970:	ldr	r1, [pc, #264]	; a80 <write_data+0xa80>
 974:	add	r2, sp, #232	; 0xe8
 978:	mov	r0, r4
 97c:	bl	0 <fprintf>
 980:	b	9b8 <write_data+0x9b8>
 984:	ldr	r1, [pc, #268]	; a98 <write_data+0xa98>
 988:	vldr	d2, [sp, #160]	; 0xa0
 98c:	mov	r0, r4
 990:	vmov	r2, r3, d2
 994:	bl	0 <fprintf>
 998:	b	9b8 <write_data+0x9b8>
 99c:	ldr	r0, [pc, #300]	; ad0 <write_data+0xad0>
 9a0:	ldr	r1, [pc, #304]	; ad8 <write_data+0xad8>
 9a4:	mov	r2, #368	; 0x170
 9a8:	ldr	r3, [pc, #284]	; acc <write_data+0xacc>
 9ac:	bl	0 <__assert_fail>
 9b0:	mov	r0, #1
 9b4:	bl	0 <exit>
 9b8:	ldr	r1, [pc, #228]	; aa4 <write_data+0xaa4>
 9bc:	mov	r0, r4
 9c0:	bl	0 <fprintf>
 9c4:	b	a2c <write_data+0xa2c>
 9c8:	ldr	r0, [pc, #164]	; a74 <write_data+0xa74>
 9cc:	ldr	r3, [pc, #236]	; ac0 <write_data+0xac0>
 9d0:	ldr	r1, [r3, r9, lsl #2]
 9d4:	add	r2, sp, #56	; 0x38
 9d8:	bl	0 <coda_cursor_get_record_field_available_status>
 9dc:	cmp	r0, #0
 9e0:	beq	9e8 <write_data+0x9e8>
 9e4:	bl	0 <handle_coda_error>
 9e8:	ldr	ip, [sp, #56]	; 0x38
 9ec:	cmp	ip, #0
 9f0:	beq	a2c <write_data+0xa2c>
 9f4:	ldr	r0, [pc, #120]	; a74 <write_data+0xa74>
 9f8:	ldr	r1, [pc, #192]	; ac0 <write_data+0xac0>
 9fc:	ldr	r1, [r1, r9, lsl #2]
 a00:	bl	0 <coda_cursor_goto_record_field_by_index>
 a04:	cmp	r0, #0
 a08:	beq	a10 <write_data+0xa10>
 a0c:	bl	0 <handle_coda_error>
 a10:	add	r1, r6, #1
 a14:	add	r3, r9, #1
 a18:	mov	r2, r5
 a1c:	mov	r0, r4
 a20:	bl	0 <write_data>
 a24:	ldr	r0, [pc, #72]	; a74 <write_data+0xa74>
 a28:	bl	0 <coda_cursor_goto_parent>
 a2c:	ldr	r4, [sp, #24]
 a30:	ldr	r5, [sp, #28]
 a34:	ldr	r6, [sp, #32]
 a38:	ldr	r7, [sp, #36]	; 0x24
 a3c:	ldr	r8, [sp, #40]	; 0x28
 a40:	ldr	r9, [sp, #44]	; 0x2c
 a44:	ldr	sl, [sp, #48]	; 0x30
 a48:	ldr	fp, [sp, #52]	; 0x34
 a4c:	ldr	lr, [sp, #20]
 a50:	add	sp, sp, #264	; 0x108
 a54:	bx	lr
 a58:	.word	0x00000003
 a5c:	.word	0x00000077
 a60:	.word	0x00000000
 a64:	.word	0x000000dd
 a68:	.word	0x000000be
 a6c:	.word	0x00000088
 a70:	.word	0x000000d9
 a74:	.word	0x00000090
 a78:	.word	0x0000007a
 a7c:	.word	0x00000118
 a80:	.word	0x0000011d
 a84:	.word	0x00000112
 a88:	.word	0x00000099
 a8c:	.word	0x00000004
 a90:	.word	0x00000008
 a94:	.word	0x00000000
 a98:	.word	0x000000b6
 a9c:	.word	0x00000115
 aa0:	.word	0x00000089
 aa4:	.word	0x000000b4
 aa8:	.word	0x00000320
 aac:	.word	0x00000068
	...
 ab8:	.word	0x00000d20
 abc:	.word	0x00000007
 ac0:	.word	0x00000da4
 ac4:	.word	0x0000006c
 ac8:	.word	0x0000006f
 acc:	.word	0x00000122
 ad0:	.word	0x000000bc
 ad4:	.word	0x00000080
 ad8:	.word	0x0000000a
 adc:	.word	0x00000092
 ae0:	.word	0x00000048
 ae4:	.word	0x0000008c
 ae8:	.word	0x00000000
 aec:	.word	0x0000008f
 af0:	.word	0x00000083
 af4:	.word	0x00000072

00000af8 <export_data_element_to_ascii>:
 af8:	mov	ip, sp
 afc:	sub	sp, sp, #8
 b00:	str	ip, [sp]
 b04:	str	lr, [sp, #4]
 b08:	ldr	r1, [pc, #192]	; bd0 <export_data_element_to_ascii+0xd8>
 b0c:	ldr	r0, [r1]
 b10:	cmp	r0, #0
 b14:	bne	b2c <export_data_element_to_ascii+0x34>
 b18:	ldr	r0, [pc, #192]	; be0 <export_data_element_to_ascii+0xe8>
 b1c:	ldr	r0, [r0]
 b20:	ldr	r1, [pc, #176]	; bd8 <export_data_element_to_ascii+0xe0>
 b24:	bl	0 <fprintf>
 b28:	b	b34 <export_data_element_to_ascii+0x3c>
 b2c:	mov	r2, #0
 b30:	str	r2, [r1]
 b34:	ldr	r0, [pc, #152]	; bd4 <export_data_element_to_ascii+0xdc>
 b38:	ldr	r0, [r0]
 b3c:	cmp	r0, #0
 b40:	beq	b68 <export_data_element_to_ascii+0x70>
 b44:	ldr	r0, [pc, #148]	; be0 <export_data_element_to_ascii+0xe8>
 b48:	ldr	r0, [r0]
 b4c:	mov	r1, #2
 b50:	mov	r2, #0
 b54:	bl	0 <print_full_field_name>
 b58:	ldr	r0, [pc, #128]	; be0 <export_data_element_to_ascii+0xe8>
 b5c:	ldr	r0, [r0]
 b60:	ldr	r1, [pc, #112]	; bd8 <export_data_element_to_ascii+0xe0>
 b64:	bl	0 <fprintf>
 b68:	ldr	r0, [pc, #108]	; bdc <export_data_element_to_ascii+0xe4>
 b6c:	ldr	r2, [r0]
 b70:	cmp	r2, #0
 b74:	ble	bac <export_data_element_to_ascii+0xb4>
 b78:	ldr	r3, [pc, #76]	; bcc <export_data_element_to_ascii+0xd4>
 b7c:	lsl	r1, r2, #3
 b80:	add	r2, r3, r1
 b84:	sub	lr, r2, #4096	; 0x1000
 b88:	ldr	r3, [lr, #4088]	; 0xff8
 b8c:	sub	lr, r2, #4096	; 0x1000
 b90:	ldr	r0, [lr, #4092]	; 0xffc
 b94:	orr	r0, r0, r3
 b98:	cmp	r0, #0
 b9c:	bne	bac <export_data_element_to_ascii+0xb4>
 ba0:	ldr	lr, [sp, #4]
 ba4:	add	sp, sp, #8
 ba8:	bx	lr
 bac:	ldr	r0, [pc, #44]	; be0 <export_data_element_to_ascii+0xe8>
 bb0:	ldr	r0, [r0]
 bb4:	mov	r1, #0
 bb8:	mov	r2, #0
 bbc:	mov	r3, #0
 bc0:	ldr	lr, [sp, #4]
 bc4:	add	sp, sp, #8
 bc8:	b	0 <write_data>
 bcc:	.word	0x00000130
	...
 bd8:	.word	0x000000b4
	...
