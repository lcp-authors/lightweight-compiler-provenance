
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/__/__/external/hash/str_set.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ht_clear>:
   0:	push	{r4, lr}
   4:	mov	r4, r0
   8:	ldr	r0, [r0]
   c:	cmp	r0, #0
  10:	beq	18 <ht_clear+0x18>
  14:	bl	0 <free>
  18:	mov	r3, #0
  1c:	str	r3, [r4]
  20:	str	r3, [r4, #4]
  24:	str	r3, [r4, #8]
  28:	str	r3, [r4, #12]
  2c:	pop	{r4, pc}

00000030 <ht_insert>:
  30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  34:	sub	sp, sp, #28
  38:	cmp	r3, #0
  3c:	str	r3, [sp, #8]
  40:	str	r0, [sp, #12]
  44:	beq	228 <ht_insert+0x1f8>
  48:	ldr	r3, [sp, #8]
  4c:	cmp	r3, #2
  50:	beq	1f8 <ht_insert+0x1c8>
  54:	ldr	r3, [sp, #8]
  58:	cmp	r3, #1
  5c:	beq	1e4 <ht_insert+0x1b4>
  60:	ldr	r4, [sp, #12]
  64:	mov	r3, #179	; 0xb3
  68:	mov	r8, r1
  6c:	ldr	r7, [r4, #12]
  70:	ldr	r1, [r4, #8]
  74:	mov	r9, r2
  78:	mul	r3, r3, r7
  7c:	cmp	r1, r3, lsr #8
  80:	bcc	98 <ht_insert+0x68>
  84:	lsl	r1, r1, #1
  88:	bl	260 <ht_resize>
  8c:	cmp	r0, #0
  90:	bne	20c <ht_insert+0x1dc>
  94:	ldr	r7, [r4, #12]
  98:	ldr	r2, [pc, #412]	; 23c <ht_insert+0x20c>
  9c:	add	r3, sp, #16
  a0:	ldr	r1, [sp, #12]
  a4:	stm	sp, {r2, r3}
  a8:	mov	r0, r8
  ac:	mov	r2, r9
  b0:	mov	r3, #0
  b4:	ldr	r6, [r1]
  b8:	bl	0 <cmetrohash64_1>
  bc:	ldr	r2, [sp, #64]	; 0x40
  c0:	ldr	r3, [sp, #16]
  c4:	sub	r2, r2, #2
  c8:	sub	r7, r7, #1
  cc:	cmp	r2, #1
  d0:	and	r4, r7, r3
  d4:	bls	18c <ht_insert+0x15c>
  d8:	ldr	r5, [r6, r4, lsl #2]
  dc:	add	r4, r6, r4, lsl #2
  e0:	cmp	r5, #0
  e4:	moveq	sl, r4
  e8:	beq	144 <ht_insert+0x114>
  ec:	add	fp, r3, #1
  f0:	mov	sl, #0
  f4:	b	128 <ht_insert+0xf8>
  f8:	mov	r2, r9
  fc:	mov	r1, r5
 100:	mov	r0, r8
 104:	bl	0 <strncmp>
 108:	cmp	r0, #0
 10c:	beq	16c <ht_insert+0x13c>
 110:	and	r4, r7, fp
 114:	add	fp, fp, #1
 118:	ldr	r5, [r6, r4, lsl #2]
 11c:	add	r4, r6, r4, lsl #2
 120:	cmp	r5, #0
 124:	beq	13c <ht_insert+0x10c>
 128:	cmp	r5, #2
 12c:	bne	f8 <ht_insert+0xc8>
 130:	cmp	sl, #0
 134:	moveq	sl, r4
 138:	b	110 <ht_insert+0xe0>
 13c:	cmp	sl, #0
 140:	moveq	sl, r4
 144:	ldr	r2, [sp, #12]
 148:	mov	r5, #0
 14c:	ldr	r3, [r2, #8]
 150:	add	r3, r3, #1
 154:	str	r3, [r2, #8]
 158:	ldr	r3, [sp, #8]
 15c:	str	r3, [sl]
 160:	mov	r0, r5
 164:	add	sp, sp, #28
 168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 16c:	ldr	r3, [sp, #64]	; 0x40
 170:	cmp	r3, #0
 174:	bne	160 <ht_insert+0x130>
 178:	ldr	r3, [sp, #8]
 17c:	mov	r0, r5
 180:	str	r3, [r4]
 184:	add	sp, sp, #28
 188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 18c:	ldr	r0, [sp, #12]
 190:	ldr	r1, [r6, r4, lsl #2]
 194:	add	r4, r6, r4, lsl #2
 198:	ldr	r2, [r0, #8]
 19c:	cmp	r1, #0
 1a0:	cmpne	r1, #2
 1a4:	add	r2, r2, #1
 1a8:	str	r2, [r0, #8]
 1ac:	beq	1d4 <ht_insert+0x1a4>
 1b0:	add	r3, r3, #1
 1b4:	and	r2, r7, r3
 1b8:	add	r3, r3, #1
 1bc:	ldr	r1, [r6, r2, lsl #2]
 1c0:	add	r2, r6, r2, lsl #2
 1c4:	cmp	r1, #0
 1c8:	cmpne	r1, #2
 1cc:	bne	1b4 <ht_insert+0x184>
 1d0:	mov	r4, r2
 1d4:	ldr	r3, [sp, #8]
 1d8:	mov	r5, #0
 1dc:	str	r3, [r4]
 1e0:	b	160 <ht_insert+0x130>
 1e4:	ldr	r3, [pc, #84]	; 240 <ht_insert+0x210>
 1e8:	mov	r2, #116	; 0x74
 1ec:	ldr	r1, [pc, #80]	; 244 <ht_insert+0x214>
 1f0:	ldr	r0, [pc, #80]	; 248 <ht_insert+0x218>
 1f4:	bl	0 <__assert_fail>
 1f8:	ldr	r3, [pc, #64]	; 240 <ht_insert+0x210>
 1fc:	mov	r2, #115	; 0x73
 200:	ldr	r1, [pc, #60]	; 244 <ht_insert+0x214>
 204:	ldr	r0, [pc, #64]	; 24c <ht_insert+0x21c>
 208:	bl	0 <__assert_fail>
 20c:	ldr	r3, [pc, #60]	; 250 <ht_insert+0x220>
 210:	ldr	r2, [pc, #60]	; 254 <ht_insert+0x224>
 214:	ldr	r1, [pc, #60]	; 258 <ht_insert+0x228>
 218:	ldr	r0, [r3]
 21c:	bl	0 <fprintf>
 220:	mov	r0, #1
 224:	bl	0 <exit>
 228:	ldr	r3, [pc, #16]	; 240 <ht_insert+0x210>
 22c:	mov	r2, #114	; 0x72
 230:	ldr	r1, [pc, #12]	; 244 <ht_insert+0x214>
 234:	ldr	r0, [pc, #32]	; 25c <ht_insert+0x22c>
 238:	bl	0 <__assert_fail>
 23c:	.word	0x2f693b52
	...
 248:	.word	0x0000008c
 24c:	.word	0x00000074
 250:	.word	0x00000000
 254:	.word	0x000000a4
 258:	.word	0x000000d8
 25c:	.word	0x0000005c

00000260 <ht_resize>:
 260:	ldr	r3, [r0, #8]
 264:	push	{r4, r5, r6, r7, r8, r9, lr}
 268:	cmp	r1, r3
 26c:	movcc	r1, r3
 270:	cmp	r1, #2
 274:	sub	sp, sp, #28
 278:	mov	r7, r0
 27c:	ldr	r6, [r0]
 280:	mov	r4, #4
 284:	bls	29c <ht_resize+0x3c>
 288:	mov	r2, #179	; 0xb3
 28c:	lsl	r4, r4, #1
 290:	mul	r3, r2, r4
 294:	cmp	r1, r3, lsr #8
 298:	bhi	28c <ht_resize+0x2c>
 29c:	mov	r1, #4
 2a0:	mov	r0, r4
 2a4:	bl	0 <calloc>
 2a8:	cmp	r0, #0
 2ac:	str	r0, [sp, #8]
 2b0:	beq	360 <ht_resize+0x100>
 2b4:	ldr	r3, [r7, #12]
 2b8:	mov	r5, #0
 2bc:	cmp	r3, r5
 2c0:	str	r4, [sp, #20]
 2c4:	str	r5, [sp, #12]
 2c8:	str	r5, [sp, #16]
 2cc:	subne	r6, r6, #4
 2d0:	addne	r8, sp, #8
 2d4:	movne	r9, #3
 2d8:	bne	2e8 <ht_resize+0x88>
 2dc:	b	358 <ht_resize+0xf8>
 2e0:	cmp	r3, r5
 2e4:	bls	328 <ht_resize+0xc8>
 2e8:	ldr	r4, [r6, #4]!
 2ec:	add	r5, r5, #1
 2f0:	cmp	r4, #0
 2f4:	cmpne	r4, #2
 2f8:	beq	2e0 <ht_resize+0x80>
 2fc:	mov	r0, r4
 300:	bl	0 <strlen>
 304:	mov	r3, r4
 308:	str	r9, [sp]
 30c:	mov	r1, r4
 310:	mov	r2, r0
 314:	mov	r0, r8
 318:	bl	30 <ht_insert>
 31c:	ldr	r3, [r7, #12]
 320:	cmp	r3, r5
 324:	bhi	2e8 <ht_resize+0x88>
 328:	mov	r0, r7
 32c:	bl	0 <ht_clear>
 330:	mov	ip, r8
 334:	mov	lr, #0
 338:	ldm	ip!, {r0, r1, r2, r3}
 33c:	str	r0, [r7]
 340:	str	r1, [r7, #4]
 344:	str	r2, [r7, #8]
 348:	str	r3, [r7, #12]
 34c:	mov	r0, lr
 350:	add	sp, sp, #28
 354:	pop	{r4, r5, r6, r7, r8, r9, pc}
 358:	add	r8, sp, #8
 35c:	b	328 <ht_resize+0xc8>
 360:	mvn	lr, #0
 364:	b	34c <ht_resize+0xec>

00000368 <ht_remove>:
 368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 36c:	sub	sp, sp, #20
 370:	ldr	r5, [r0]
 374:	cmp	r5, #0
 378:	beq	3fc <ht_remove+0x94>
 37c:	mov	r6, r1
 380:	ldr	r1, [pc, #164]	; 42c <ht_remove+0xc4>
 384:	add	r3, sp, #8
 388:	ldr	r7, [r0, #12]
 38c:	mov	r9, r0
 390:	stm	sp, {r1, r3}
 394:	mov	r0, r6
 398:	mov	r3, #0
 39c:	mov	r8, r2
 3a0:	bl	0 <cmetrohash64_1>
 3a4:	ldr	sl, [sp, #8]
 3a8:	sub	r7, r7, #1
 3ac:	and	r3, r7, sl
 3b0:	ldr	fp, [r5, r3, lsl #2]
 3b4:	add	r4, r5, r3, lsl #2
 3b8:	cmp	fp, #0
 3bc:	beq	3fc <ht_remove+0x94>
 3c0:	add	sl, sl, #1
 3c4:	cmp	fp, #2
 3c8:	mov	r1, fp
 3cc:	mov	r2, r8
 3d0:	mov	r0, r6
 3d4:	beq	3e4 <ht_remove+0x7c>
 3d8:	bl	0 <strncmp>
 3dc:	cmp	r0, #0
 3e0:	beq	40c <ht_remove+0xa4>
 3e4:	and	r3, sl, r7
 3e8:	add	sl, sl, #1
 3ec:	ldr	fp, [r5, r3, lsl #2]
 3f0:	add	r4, r5, r3, lsl #2
 3f4:	cmp	fp, #0
 3f8:	bne	3c4 <ht_remove+0x5c>
 3fc:	mov	fp, #0
 400:	mov	r0, fp
 404:	add	sp, sp, #20
 408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 40c:	ldr	r3, [r9, #8]
 410:	mov	r2, #2
 414:	sub	r3, r3, #1
 418:	str	r2, [r4]
 41c:	mov	r0, fp
 420:	str	r3, [r9, #8]
 424:	add	sp, sp, #20
 428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 42c:	.word	0x2f693b52

00000430 <ht_find.isra.1>:
 430:	push	{r4, r5, r6, r7, r8, r9, lr}
 434:	subs	r8, r0, #0
 438:	sub	sp, sp, #20
 43c:	beq	4b8 <ht_find.isra.1+0x88>
 440:	mov	r6, r2
 444:	ldr	r2, [pc, #124]	; 4c8 <ht_find.isra.1+0x98>
 448:	mov	r7, r3
 44c:	add	r3, sp, #8
 450:	ldr	r9, [r1]
 454:	mov	r0, r6
 458:	stm	sp, {r2, r3}
 45c:	mov	r3, #0
 460:	mov	r2, r7
 464:	bl	0 <cmetrohash64_1>
 468:	ldr	r5, [sp, #8]
 46c:	sub	r9, r9, #1
 470:	and	r3, r9, r5
 474:	ldr	r4, [r8, r3, lsl #2]
 478:	cmp	r4, #0
 47c:	beq	4b8 <ht_find.isra.1+0x88>
 480:	add	r5, r5, #1
 484:	cmp	r4, #2
 488:	mov	r1, r4
 48c:	mov	r2, r7
 490:	mov	r0, r6
 494:	beq	4a4 <ht_find.isra.1+0x74>
 498:	bl	0 <strncmp>
 49c:	cmp	r0, #0
 4a0:	beq	4bc <ht_find.isra.1+0x8c>
 4a4:	and	r1, r9, r5
 4a8:	add	r5, r5, #1
 4ac:	ldr	r4, [r8, r1, lsl #2]
 4b0:	cmp	r4, #0
 4b4:	bne	484 <ht_find.isra.1+0x54>
 4b8:	mov	r4, #0
 4bc:	mov	r0, r4
 4c0:	add	sp, sp, #20
 4c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
 4c8:	.word	0x2f693b52

000004cc <str_set_clear>:
 4cc:	b	0 <ht_clear>

000004d0 <str_set_destroy>:
 4d0:	push	{r4, r5, r6, r7, r8, lr}
 4d4:	subs	r7, r1, #0
 4d8:	mov	r6, r0
 4dc:	beq	530 <str_set_destroy+0x60>
 4e0:	ldr	r3, [r0, #12]
 4e4:	ldr	r5, [r0]
 4e8:	cmp	r3, #0
 4ec:	beq	530 <str_set_destroy+0x60>
 4f0:	mov	r8, r2
 4f4:	sub	r5, r5, #4
 4f8:	mov	r4, #0
 4fc:	b	508 <str_set_destroy+0x38>
 500:	cmp	r4, r3
 504:	bcs	530 <str_set_destroy+0x60>
 508:	ldr	r1, [r5, #4]!
 50c:	add	r4, r4, #1
 510:	cmp	r1, #0
 514:	cmpne	r1, #2
 518:	beq	500 <str_set_destroy+0x30>
 51c:	mov	r0, r8
 520:	blx	r7
 524:	ldr	r3, [r6, #12]
 528:	cmp	r4, r3
 52c:	bcc	508 <str_set_destroy+0x38>
 530:	mov	r0, r6
 534:	pop	{r4, r5, r6, r7, r8, lr}
 538:	b	0 <ht_clear>

0000053c <str_set_init>:
 53c:	cmp	r1, #2
 540:	push	{r4, r5, r6, lr}
 544:	mov	r4, #4
 548:	mov	r5, r0
 54c:	bls	564 <str_set_init+0x28>
 550:	mov	r2, #179	; 0xb3
 554:	lsl	r4, r4, #1
 558:	mul	r3, r2, r4
 55c:	cmp	r1, r3, lsr #8
 560:	bhi	554 <str_set_init+0x18>
 564:	mov	r1, #4
 568:	mov	r0, r4
 56c:	bl	0 <calloc>
 570:	cmp	r0, #0
 574:	str	r0, [r5]
 578:	movne	r0, #0
 57c:	strne	r4, [r5, #12]
 580:	strne	r0, [r5, #4]
 584:	strne	r0, [r5, #8]
 588:	mvneq	r0, #0
 58c:	pop	{r4, r5, r6, pc}

00000590 <str_set_resize>:
 590:	b	260 <ht_resize>

00000594 <str_set_insert>:
 594:	b	30 <ht_insert>

00000598 <str_set_insert_item>:
 598:	push	{r4, r5, r6, lr}
 59c:	mov	r5, r0
 5a0:	sub	sp, sp, #8
 5a4:	mov	r0, r1
 5a8:	mov	r4, r1
 5ac:	mov	r6, r2
 5b0:	bl	0 <strlen>
 5b4:	str	r6, [sp]
 5b8:	mov	r3, r4
 5bc:	mov	r1, r4
 5c0:	mov	r2, r0
 5c4:	mov	r0, r5
 5c8:	bl	30 <ht_insert>
 5cc:	add	sp, sp, #8
 5d0:	pop	{r4, r5, r6, pc}

000005d4 <str_set_find>:
 5d4:	mov	ip, r0
 5d8:	mov	r3, r2
 5dc:	ldr	r0, [r0]
 5e0:	mov	r2, r1
 5e4:	add	r1, ip, #12
 5e8:	b	430 <ht_find.isra.1>

000005ec <str_set_find_item>:
 5ec:	push	{r4, r5, r6, lr}
 5f0:	mov	r4, r0
 5f4:	mov	r0, r1
 5f8:	mov	r5, r1
 5fc:	bl	0 <strlen>
 600:	mov	r2, r5
 604:	add	r1, r4, #12
 608:	mov	r3, r0
 60c:	ldr	r0, [r4]
 610:	pop	{r4, r5, r6, lr}
 614:	b	430 <ht_find.isra.1>

00000618 <str_set_remove>:
 618:	b	368 <ht_remove>

0000061c <str_set_remove_item>:
 61c:	push	{r4, r5, r6, lr}
 620:	mov	r5, r0
 624:	mov	r0, r1
 628:	mov	r4, r1
 62c:	bl	0 <strlen>
 630:	mov	r1, r4
 634:	mov	r2, r0
 638:	mov	r0, r5
 63c:	pop	{r4, r5, r6, lr}
 640:	b	368 <ht_remove>

00000644 <str_set_visit>:
 644:	ldr	r3, [r0, #12]
 648:	push	{r4, r5, r6, r7, r8, lr}
 64c:	cmp	r3, #0
 650:	ldr	r5, [r0]
 654:	popeq	{r4, r5, r6, r7, r8, pc}
 658:	mov	r7, r2
 65c:	mov	r6, r1
 660:	mov	r8, r0
 664:	sub	r5, r5, #4
 668:	mov	r4, #0
 66c:	b	678 <str_set_visit+0x34>
 670:	cmp	r4, r3
 674:	bcs	6a0 <str_set_visit+0x5c>
 678:	ldr	r1, [r5, #4]!
 67c:	add	r4, r4, #1
 680:	cmp	r1, #0
 684:	cmpne	r1, #2
 688:	beq	670 <str_set_visit+0x2c>
 68c:	mov	r0, r7
 690:	blx	r6
 694:	ldr	r3, [r8, #12]
 698:	cmp	r4, r3
 69c:	bcc	678 <str_set_visit+0x34>
 6a0:	pop	{r4, r5, r6, r7, r8, pc}
