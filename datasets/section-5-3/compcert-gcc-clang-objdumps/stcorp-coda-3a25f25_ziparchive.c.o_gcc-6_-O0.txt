
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/ziparchive.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <default_error_handler>:
       0:	push	{r0, r1, r2, r3}
       4:	push	{fp, lr}
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #8
      10:	ldr	r3, [pc, #88]	; 70 <default_error_handler+0x70>
      14:	ldr	r3, [r3]
      18:	mov	r2, #7
      1c:	mov	r1, #1
      20:	ldr	r0, [pc, #76]	; 74 <default_error_handler+0x74>
      24:	bl	0 <fwrite>
      28:	add	r3, fp, #8
      2c:	str	r3, [fp, #-8]
      30:	ldr	r3, [pc, #56]	; 70 <default_error_handler+0x70>
      34:	ldr	r3, [r3]
      38:	ldr	r2, [fp, #-8]
      3c:	ldr	r1, [fp, #4]
      40:	mov	r0, r3
      44:	bl	0 <vfprintf>
      48:	ldr	r3, [pc, #32]	; 70 <default_error_handler+0x70>
      4c:	ldr	r3, [r3]
      50:	mov	r1, r3
      54:	mov	r0, #10
      58:	bl	0 <fputc>
      5c:	nop			; (mov r0, r0)
      60:	sub	sp, fp, #4
      64:	pop	{fp, lr}
      68:	add	sp, sp, #16
      6c:	bx	lr
	...

00000078 <get_entries>:
      78:	push	{r4, fp, lr}
      7c:	add	fp, sp, #8
      80:	sub	sp, sp, #84	; 0x54
      84:	str	r0, [fp, #-88]	; 0xffffffa8
      88:	ldr	r3, [fp, #-88]	; 0xffffffa8
      8c:	ldr	r3, [r3]
      90:	mov	r2, #2
      94:	mvn	r1, #21
      98:	mov	r0, r3
      9c:	bl	0 <lseek>
      a0:	mov	r3, r0
      a4:	cmp	r3, #0
      a8:	bge	dc <get_entries+0x64>
      ac:	ldr	r3, [fp, #-88]	; 0xffffffa8
      b0:	ldr	r4, [r3, #20]
      b4:	bl	0 <__errno_location>
      b8:	mov	r3, r0
      bc:	ldr	r3, [r3]
      c0:	mov	r0, r3
      c4:	bl	0 <strerror>
      c8:	mov	r3, r0
      cc:	mov	r0, r3
      d0:	blx	r4
      d4:	mvn	r3, #0
      d8:	b	5e0 <get_entries+0x568>
      dc:	ldr	r3, [fp, #-88]	; 0xffffffa8
      e0:	ldr	r3, [r3]
      e4:	sub	r1, fp, #84	; 0x54
      e8:	mov	r2, #22
      ec:	mov	r0, r3
      f0:	bl	0 <read>
      f4:	mov	r3, r0
      f8:	cmp	r3, #0
      fc:	bge	130 <get_entries+0xb8>
     100:	ldr	r3, [fp, #-88]	; 0xffffffa8
     104:	ldr	r4, [r3, #20]
     108:	bl	0 <__errno_location>
     10c:	mov	r3, r0
     110:	ldr	r3, [r3]
     114:	mov	r0, r3
     118:	bl	0 <strerror>
     11c:	mov	r3, r0
     120:	mov	r0, r3
     124:	blx	r4
     128:	mvn	r3, #0
     12c:	b	5e0 <get_entries+0x568>
     130:	ldr	r3, [fp, #-84]	; 0xffffffac
     134:	str	r3, [fp, #-20]	; 0xffffffec
     138:	ldr	r3, [fp, #-20]	; 0xffffffec
     13c:	ldr	r2, [pc, #1192]	; 5ec <get_entries+0x574>
     140:	cmp	r3, r2
     144:	beq	16c <get_entries+0xf4>
     148:	ldr	r3, [fp, #-88]	; 0xffffffa8
     14c:	ldr	r3, [r3, #20]
     150:	ldr	r2, [fp, #-88]	; 0xffffffa8
     154:	ldr	r2, [r2, #8]
     158:	mov	r1, r2
     15c:	ldr	r0, [pc, #1164]	; 5f0 <get_entries+0x578>
     160:	blx	r3
     164:	mvn	r3, #0
     168:	b	5e0 <get_entries+0x568>
     16c:	ldrh	r3, [fp, #-76]	; 0xffffffb4
     170:	strh	r3, [fp, #-22]	; 0xffffffea
     174:	ldr	r3, [fp, #-68]	; 0xffffffbc
     178:	str	r3, [fp, #-28]	; 0xffffffe4
     17c:	ldrh	r2, [fp, #-22]	; 0xffffffea
     180:	ldr	r3, [fp, #-88]	; 0xffffffa8
     184:	str	r2, [r3, #4]
     188:	ldrh	r3, [fp, #-22]	; 0xffffffea
     18c:	mov	r2, #44	; 0x2c
     190:	mul	r3, r2, r3
     194:	mov	r0, r3
     198:	bl	0 <malloc>
     19c:	mov	r3, r0
     1a0:	mov	r2, r3
     1a4:	ldr	r3, [fp, #-88]	; 0xffffffa8
     1a8:	str	r2, [r3, #12]
     1ac:	ldr	r3, [fp, #-88]	; 0xffffffa8
     1b0:	ldr	r3, [r3, #12]
     1b4:	cmp	r3, #0
     1b8:	bne	1e4 <get_entries+0x16c>
     1bc:	ldr	r3, [fp, #-88]	; 0xffffffa8
     1c0:	ldr	r3, [r3, #20]
     1c4:	ldrh	r2, [fp, #-22]	; 0xffffffea
     1c8:	mov	r1, #44	; 0x2c
     1cc:	mul	r2, r1, r2
     1d0:	mov	r1, r2
     1d4:	ldr	r0, [pc, #1048]	; 5f4 <get_entries+0x57c>
     1d8:	blx	r3
     1dc:	mvn	r3, #0
     1e0:	b	5e0 <get_entries+0x568>
     1e4:	mov	r3, #0
     1e8:	str	r3, [fp, #-16]
     1ec:	b	23c <get_entries+0x1c4>
     1f0:	ldr	r3, [fp, #-88]	; 0xffffffa8
     1f4:	ldr	r2, [r3, #12]
     1f8:	ldr	r3, [fp, #-16]
     1fc:	mov	r1, #44	; 0x2c
     200:	mul	r3, r1, r3
     204:	add	r3, r2, r3
     208:	mov	r2, #0
     20c:	str	r2, [r3, #36]	; 0x24
     210:	ldr	r3, [fp, #-88]	; 0xffffffa8
     214:	ldr	r2, [r3, #12]
     218:	ldr	r3, [fp, #-16]
     21c:	mov	r1, #44	; 0x2c
     220:	mul	r3, r1, r3
     224:	add	r3, r2, r3
     228:	ldr	r2, [fp, #-88]	; 0xffffffa8
     22c:	str	r2, [r3, #40]	; 0x28
     230:	ldr	r3, [fp, #-16]
     234:	add	r3, r3, #1
     238:	str	r3, [fp, #-16]
     23c:	ldrh	r2, [fp, #-22]	; 0xffffffea
     240:	ldr	r3, [fp, #-16]
     244:	cmp	r2, r3
     248:	bgt	1f0 <get_entries+0x178>
     24c:	ldr	r3, [fp, #-88]	; 0xffffffa8
     250:	ldr	r3, [r3]
     254:	ldr	r1, [fp, #-28]	; 0xffffffe4
     258:	mov	r2, #0
     25c:	mov	r0, r3
     260:	bl	0 <lseek>
     264:	mov	r3, r0
     268:	cmp	r3, #0
     26c:	bge	2a0 <get_entries+0x228>
     270:	ldr	r3, [fp, #-88]	; 0xffffffa8
     274:	ldr	r4, [r3, #20]
     278:	bl	0 <__errno_location>
     27c:	mov	r3, r0
     280:	ldr	r3, [r3]
     284:	mov	r0, r3
     288:	bl	0 <strerror>
     28c:	mov	r3, r0
     290:	mov	r0, r3
     294:	blx	r4
     298:	mvn	r3, #0
     29c:	b	5e0 <get_entries+0x568>
     2a0:	mov	r3, #0
     2a4:	str	r3, [fp, #-16]
     2a8:	b	5cc <get_entries+0x554>
     2ac:	ldr	r3, [fp, #-88]	; 0xffffffa8
     2b0:	ldr	r2, [r3, #12]
     2b4:	ldr	r3, [fp, #-16]
     2b8:	mov	r1, #44	; 0x2c
     2bc:	mul	r3, r1, r3
     2c0:	add	r3, r2, r3
     2c4:	str	r3, [fp, #-32]	; 0xffffffe0
     2c8:	ldr	r3, [fp, #-88]	; 0xffffffa8
     2cc:	ldr	r3, [r3]
     2d0:	sub	r1, fp, #84	; 0x54
     2d4:	mov	r2, #46	; 0x2e
     2d8:	mov	r0, r3
     2dc:	bl	0 <read>
     2e0:	mov	r3, r0
     2e4:	cmp	r3, #0
     2e8:	bge	31c <get_entries+0x2a4>
     2ec:	ldr	r3, [fp, #-88]	; 0xffffffa8
     2f0:	ldr	r4, [r3, #20]
     2f4:	bl	0 <__errno_location>
     2f8:	mov	r3, r0
     2fc:	ldr	r3, [r3]
     300:	mov	r0, r3
     304:	bl	0 <strerror>
     308:	mov	r3, r0
     30c:	mov	r0, r3
     310:	blx	r4
     314:	mvn	r3, #0
     318:	b	5e0 <get_entries+0x568>
     31c:	ldr	r3, [fp, #-84]	; 0xffffffac
     320:	str	r3, [fp, #-20]	; 0xffffffec
     324:	ldr	r3, [fp, #-20]	; 0xffffffec
     328:	ldr	r2, [pc, #712]	; 5f8 <get_entries+0x580>
     32c:	cmp	r3, r2
     330:	beq	358 <get_entries+0x2e0>
     334:	ldr	r3, [fp, #-88]	; 0xffffffa8
     338:	ldr	r3, [r3, #20]
     33c:	ldr	r2, [fp, #-88]	; 0xffffffa8
     340:	ldr	r2, [r2, #8]
     344:	mov	r1, r2
     348:	ldr	r0, [pc, #684]	; 5fc <get_entries+0x584>
     34c:	blx	r3
     350:	mvn	r3, #0
     354:	b	5e0 <get_entries+0x568>
     358:	ldrh	r2, [fp, #-74]	; 0xffffffb6
     35c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     360:	strh	r2, [r3, #4]
     364:	ldr	r3, [fp, #-32]	; 0xffffffe0
     368:	ldrh	r3, [r3, #4]
     36c:	cmp	r3, #0
     370:	beq	3a8 <get_entries+0x330>
     374:	ldr	r3, [fp, #-32]	; 0xffffffe0
     378:	ldrh	r3, [r3, #4]
     37c:	cmp	r3, #8
     380:	beq	3a8 <get_entries+0x330>
     384:	ldr	r3, [fp, #-88]	; 0xffffffa8
     388:	ldr	r3, [r3, #20]
     38c:	ldr	r2, [fp, #-88]	; 0xffffffa8
     390:	ldr	r2, [r2, #8]
     394:	mov	r1, r2
     398:	ldr	r0, [pc, #608]	; 600 <get_entries+0x588>
     39c:	blx	r3
     3a0:	mvn	r3, #0
     3a4:	b	5e0 <get_entries+0x568>
     3a8:	ldrh	r2, [fp, #-72]	; 0xffffffb8
     3ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3b0:	strh	r2, [r3, #6]
     3b4:	ldrh	r2, [fp, #-70]	; 0xffffffba
     3b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3bc:	strh	r2, [r3, #8]
     3c0:	ldr	r2, [fp, #-68]	; 0xffffffbc
     3c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3c8:	str	r2, [r3, #16]
     3cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
     3d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3d4:	str	r2, [r3, #20]
     3d8:	ldr	r2, [fp, #-60]	; 0xffffffc4
     3dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3e0:	str	r2, [r3, #24]
     3e4:	ldrh	r2, [fp, #-56]	; 0xffffffc8
     3e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3ec:	strh	r2, [r3, #28]
     3f0:	ldrh	r2, [fp, #-54]	; 0xffffffca
     3f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3f8:	strh	r2, [r3, #30]
     3fc:	ldrh	r3, [fp, #-52]	; 0xffffffcc
     400:	strh	r3, [fp, #-34]	; 0xffffffde
     404:	ldrh	r3, [fp, #-48]	; 0xffffffd0
     408:	strh	r3, [fp, #-36]	; 0xffffffdc
     40c:	ldrh	r3, [fp, #-36]	; 0xffffffdc
     410:	and	r2, r3, #1
     414:	ldr	r3, [fp, #-32]	; 0xffffffe0
     418:	str	r2, [r3, #32]
     41c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     420:	add	r3, r3, #12
     424:	ldr	r2, [fp, #-46]	; 0xffffffd2
     428:	str	r2, [r3]
     42c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     430:	ldr	r2, [fp, #-42]	; 0xffffffd6
     434:	str	r2, [r3]
     438:	ldr	r3, [fp, #-32]	; 0xffffffe0
     43c:	ldrh	r3, [r3, #28]
     440:	add	r3, r3, #1
     444:	mov	r0, r3
     448:	bl	0 <malloc>
     44c:	mov	r3, r0
     450:	mov	r2, r3
     454:	ldr	r3, [fp, #-32]	; 0xffffffe0
     458:	str	r2, [r3, #36]	; 0x24
     45c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     460:	ldr	r3, [r3, #36]	; 0x24
     464:	cmp	r3, #0
     468:	bne	494 <get_entries+0x41c>
     46c:	ldr	r3, [fp, #-88]	; 0xffffffa8
     470:	ldr	r3, [r3, #20]
     474:	ldr	r2, [fp, #-32]	; 0xffffffe0
     478:	ldrh	r2, [r2, #28]
     47c:	add	r2, r2, #1
     480:	mov	r1, r2
     484:	ldr	r0, [pc, #376]	; 604 <get_entries+0x58c>
     488:	blx	r3
     48c:	mvn	r3, #0
     490:	b	5e0 <get_entries+0x568>
     494:	ldr	r3, [fp, #-88]	; 0xffffffa8
     498:	ldr	r0, [r3]
     49c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     4a0:	ldr	r1, [r3, #36]	; 0x24
     4a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     4a8:	ldrh	r3, [r3, #28]
     4ac:	mov	r2, r3
     4b0:	bl	0 <read>
     4b4:	mov	r3, r0
     4b8:	cmp	r3, #0
     4bc:	bge	4f0 <get_entries+0x478>
     4c0:	ldr	r3, [fp, #-88]	; 0xffffffa8
     4c4:	ldr	r4, [r3, #20]
     4c8:	bl	0 <__errno_location>
     4cc:	mov	r3, r0
     4d0:	ldr	r3, [r3]
     4d4:	mov	r0, r3
     4d8:	bl	0 <strerror>
     4dc:	mov	r3, r0
     4e0:	mov	r0, r3
     4e4:	blx	r4
     4e8:	mvn	r3, #0
     4ec:	b	5e0 <get_entries+0x568>
     4f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     4f4:	ldr	r3, [r3, #36]	; 0x24
     4f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
     4fc:	ldrh	r2, [r2, #28]
     500:	add	r3, r3, r2
     504:	mov	r2, #0
     508:	strb	r2, [r3]
     50c:	ldr	r3, [fp, #-88]	; 0xffffffa8
     510:	ldr	r2, [r3, #16]
     514:	ldr	r3, [fp, #-32]	; 0xffffffe0
     518:	ldr	r3, [r3, #36]	; 0x24
     51c:	mov	r1, r3
     520:	mov	r0, r2
     524:	bl	0 <coda_hashtable_add_name>
     528:	mov	r3, r0
     52c:	cmp	r3, #0
     530:	beq	55c <get_entries+0x4e4>
     534:	ldr	r3, [fp, #-88]	; 0xffffffa8
     538:	ldr	r3, [r3, #20]
     53c:	ldr	r2, [fp, #-88]	; 0xffffffa8
     540:	ldr	r1, [r2, #8]
     544:	ldr	r2, [fp, #-32]	; 0xffffffe0
     548:	ldr	r2, [r2, #36]	; 0x24
     54c:	ldr	r0, [pc, #180]	; 608 <get_entries+0x590>
     550:	blx	r3
     554:	mvn	r3, #0
     558:	b	5e0 <get_entries+0x568>
     55c:	ldr	r3, [fp, #-88]	; 0xffffffa8
     560:	ldr	r0, [r3]
     564:	ldr	r3, [fp, #-32]	; 0xffffffe0
     568:	ldrh	r3, [r3, #30]
     56c:	mov	r2, r3
     570:	ldrh	r3, [fp, #-34]	; 0xffffffde
     574:	add	r3, r2, r3
     578:	mov	r2, #1
     57c:	mov	r1, r3
     580:	bl	0 <lseek>
     584:	mov	r3, r0
     588:	cmp	r3, #0
     58c:	bge	5c0 <get_entries+0x548>
     590:	ldr	r3, [fp, #-88]	; 0xffffffa8
     594:	ldr	r4, [r3, #20]
     598:	bl	0 <__errno_location>
     59c:	mov	r3, r0
     5a0:	ldr	r3, [r3]
     5a4:	mov	r0, r3
     5a8:	bl	0 <strerror>
     5ac:	mov	r3, r0
     5b0:	mov	r0, r3
     5b4:	blx	r4
     5b8:	mvn	r3, #0
     5bc:	b	5e0 <get_entries+0x568>
     5c0:	ldr	r3, [fp, #-16]
     5c4:	add	r3, r3, #1
     5c8:	str	r3, [fp, #-16]
     5cc:	ldrh	r2, [fp, #-22]	; 0xffffffea
     5d0:	ldr	r3, [fp, #-16]
     5d4:	cmp	r2, r3
     5d8:	bgt	2ac <get_entries+0x234>
     5dc:	mov	r3, #0
     5e0:	mov	r0, r3
     5e4:	sub	sp, fp, #8
     5e8:	pop	{r4, fp, pc}
     5ec:	.word	0x06054b50
     5f0:	.word	0x00000008
     5f4:	.word	0x00000090
     5f8:	.word	0x02014b50
     5fc:	.word	0x000000b0
     600:	.word	0x000000e0
     604:	.word	0x00000114
     608:	.word	0x00000130

0000060c <coda_za_open>:
     60c:	push	{r4, fp, lr}
     610:	add	fp, sp, #8
     614:	sub	sp, sp, #116	; 0x74
     618:	str	r0, [fp, #-120]	; 0xffffff88
     61c:	str	r1, [fp, #-124]	; 0xffffff84
     620:	sub	r3, fp, #108	; 0x6c
     624:	mov	r1, r3
     628:	ldr	r0, [fp, #-120]	; 0xffffff88
     62c:	bl	0 <stat>
     630:	mov	r3, r0
     634:	cmp	r3, #0
     638:	beq	694 <coda_za_open+0x88>
     63c:	bl	0 <__errno_location>
     640:	mov	r3, r0
     644:	ldr	r3, [r3]
     648:	cmp	r3, #2
     64c:	bne	664 <coda_za_open+0x58>
     650:	ldr	r3, [fp, #-124]	; 0xffffff84
     654:	ldr	r1, [fp, #-120]	; 0xffffff88
     658:	ldr	r0, [pc, #696]	; 918 <coda_za_open+0x30c>
     65c:	blx	r3
     660:	b	68c <coda_za_open+0x80>
     664:	bl	0 <__errno_location>
     668:	mov	r3, r0
     66c:	ldr	r3, [r3]
     670:	mov	r0, r3
     674:	bl	0 <strerror>
     678:	mov	r2, r0
     67c:	ldr	r3, [fp, #-124]	; 0xffffff84
     680:	ldr	r1, [fp, #-120]	; 0xffffff88
     684:	ldr	r0, [pc, #656]	; 91c <coda_za_open+0x310>
     688:	blx	r3
     68c:	mov	r3, #0
     690:	b	90c <coda_za_open+0x300>
     694:	ldr	r3, [fp, #-92]	; 0xffffffa4
     698:	and	r3, r3, #32768	; 0x8000
     69c:	cmp	r3, #0
     6a0:	bne	6bc <coda_za_open+0xb0>
     6a4:	ldr	r3, [fp, #-124]	; 0xffffff84
     6a8:	ldr	r1, [fp, #-120]	; 0xffffff88
     6ac:	ldr	r0, [pc, #620]	; 920 <coda_za_open+0x314>
     6b0:	blx	r3
     6b4:	mov	r3, #0
     6b8:	b	90c <coda_za_open+0x300>
     6bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
     6c0:	cmp	r3, #21
     6c4:	bgt	6e0 <coda_za_open+0xd4>
     6c8:	ldr	r3, [fp, #-124]	; 0xffffff84
     6cc:	ldr	r1, [fp, #-120]	; 0xffffff88
     6d0:	ldr	r0, [pc, #588]	; 924 <coda_za_open+0x318>
     6d4:	blx	r3
     6d8:	mov	r3, #0
     6dc:	b	90c <coda_za_open+0x300>
     6e0:	mov	r0, #24
     6e4:	bl	0 <malloc>
     6e8:	mov	r3, r0
     6ec:	str	r3, [fp, #-16]
     6f0:	ldr	r3, [fp, #-16]
     6f4:	cmp	r3, #0
     6f8:	bne	720 <coda_za_open+0x114>
     6fc:	ldr	r3, [fp, #-124]	; 0xffffff84
     700:	cmp	r3, #0
     704:	beq	718 <coda_za_open+0x10c>
     708:	ldr	r3, [fp, #-124]	; 0xffffff84
     70c:	mov	r1, #24
     710:	ldr	r0, [pc, #528]	; 928 <coda_za_open+0x31c>
     714:	blx	r3
     718:	mov	r3, #0
     71c:	b	90c <coda_za_open+0x300>
     720:	ldr	r0, [fp, #-120]	; 0xffffff88
     724:	bl	0 <strdup>
     728:	mov	r3, r0
     72c:	mov	r2, r3
     730:	ldr	r3, [fp, #-16]
     734:	str	r2, [r3, #8]
     738:	ldr	r3, [fp, #-16]
     73c:	ldr	r3, [r3, #8]
     740:	cmp	r3, #0
     744:	bne	770 <coda_za_open+0x164>
     748:	ldr	r0, [fp, #-16]
     74c:	bl	0 <free>
     750:	ldr	r3, [fp, #-124]	; 0xffffff84
     754:	cmp	r3, #0
     758:	beq	768 <coda_za_open+0x15c>
     75c:	ldr	r3, [fp, #-124]	; 0xffffff84
     760:	ldr	r0, [pc, #452]	; 92c <coda_za_open+0x320>
     764:	blx	r3
     768:	mov	r3, #0
     76c:	b	90c <coda_za_open+0x300>
     770:	ldr	r3, [fp, #-16]
     774:	mov	r2, #0
     778:	str	r2, [r3, #4]
     77c:	ldr	r3, [fp, #-16]
     780:	mov	r2, #0
     784:	str	r2, [r3, #12]
     788:	ldr	r3, [fp, #-16]
     78c:	mov	r2, #0
     790:	str	r2, [r3, #16]
     794:	ldr	r3, [fp, #-124]	; 0xffffff84
     798:	cmp	r3, #0
     79c:	beq	7b0 <coda_za_open+0x1a4>
     7a0:	ldr	r3, [fp, #-16]
     7a4:	ldr	r2, [fp, #-124]	; 0xffffff84
     7a8:	str	r2, [r3, #20]
     7ac:	b	7bc <coda_za_open+0x1b0>
     7b0:	ldr	r3, [fp, #-16]
     7b4:	ldr	r2, [pc, #372]	; 930 <coda_za_open+0x324>
     7b8:	str	r2, [r3, #20]
     7bc:	mov	r3, #0
     7c0:	str	r3, [fp, #-20]	; 0xffffffec
     7c4:	ldr	r1, [fp, #-20]	; 0xffffffec
     7c8:	ldr	r0, [fp, #-120]	; 0xffffff88
     7cc:	bl	0 <open>
     7d0:	mov	r2, r0
     7d4:	ldr	r3, [fp, #-16]
     7d8:	str	r2, [r3]
     7dc:	ldr	r3, [fp, #-16]
     7e0:	ldr	r3, [r3]
     7e4:	cmp	r3, #0
     7e8:	bge	83c <coda_za_open+0x230>
     7ec:	ldr	r3, [fp, #-16]
     7f0:	ldr	r4, [r3, #20]
     7f4:	bl	0 <__errno_location>
     7f8:	mov	r3, r0
     7fc:	ldr	r3, [r3]
     800:	mov	r0, r3
     804:	bl	0 <strerror>
     808:	mov	r3, r0
     80c:	mov	r2, r3
     810:	ldr	r1, [fp, #-120]	; 0xffffff88
     814:	ldr	r0, [pc, #280]	; 934 <coda_za_open+0x328>
     818:	blx	r4
     81c:	ldr	r3, [fp, #-16]
     820:	ldr	r3, [r3, #8]
     824:	mov	r0, r3
     828:	bl	0 <free>
     82c:	ldr	r0, [fp, #-16]
     830:	bl	0 <free>
     834:	mov	r3, #0
     838:	b	90c <coda_za_open+0x300>
     83c:	ldr	r3, [fp, #-16]
     840:	ldr	r3, [r3]
     844:	sub	r1, fp, #112	; 0x70
     848:	mov	r2, #2
     84c:	mov	r0, r3
     850:	bl	0 <read>
     854:	mov	r3, r0
     858:	cmp	r3, #0
     85c:	bge	898 <coda_za_open+0x28c>
     860:	ldr	r3, [fp, #-16]
     864:	ldr	r4, [r3, #20]
     868:	bl	0 <__errno_location>
     86c:	mov	r3, r0
     870:	ldr	r3, [r3]
     874:	mov	r0, r3
     878:	bl	0 <strerror>
     87c:	mov	r3, r0
     880:	mov	r0, r3
     884:	blx	r4
     888:	ldr	r0, [fp, #-16]
     88c:	bl	1104 <coda_za_close>
     890:	mov	r3, #0
     894:	b	90c <coda_za_open+0x300>
     898:	ldrb	r3, [fp, #-112]	; 0xffffff90
     89c:	cmp	r3, #80	; 0x50
     8a0:	beq	8d0 <coda_za_open+0x2c4>
     8a4:	ldrb	r3, [fp, #-111]	; 0xffffff91
     8a8:	cmp	r3, #75	; 0x4b
     8ac:	beq	8d0 <coda_za_open+0x2c4>
     8b0:	ldr	r3, [fp, #-124]	; 0xffffff84
     8b4:	ldr	r1, [fp, #-120]	; 0xffffff88
     8b8:	ldr	r0, [pc, #100]	; 924 <coda_za_open+0x318>
     8bc:	blx	r3
     8c0:	ldr	r0, [fp, #-16]
     8c4:	bl	1104 <coda_za_close>
     8c8:	mov	r3, #0
     8cc:	b	90c <coda_za_open+0x300>
     8d0:	mov	r0, #1
     8d4:	bl	0 <coda_hashtable_new>
     8d8:	mov	r2, r0
     8dc:	ldr	r3, [fp, #-16]
     8e0:	str	r2, [r3, #16]
     8e4:	ldr	r0, [fp, #-16]
     8e8:	bl	78 <get_entries>
     8ec:	mov	r3, r0
     8f0:	cmp	r3, #0
     8f4:	beq	908 <coda_za_open+0x2fc>
     8f8:	ldr	r0, [fp, #-16]
     8fc:	bl	1104 <coda_za_close>
     900:	mov	r3, #0
     904:	b	90c <coda_za_open+0x300>
     908:	ldr	r3, [fp, #-16]
     90c:	mov	r0, r3
     910:	sub	sp, fp, #8
     914:	pop	{r4, fp, pc}
     918:	.word	0x0000016c
     91c:	.word	0x00000180
     920:	.word	0x00000198
     924:	.word	0x000001c0
     928:	.word	0x00000090
     92c:	.word	0x000001e4
     930:	.word	0x00000000
     934:	.word	0x00000200

00000938 <coda_za_get_num_entries>:
     938:	push	{fp}		; (str fp, [sp, #-4]!)
     93c:	add	fp, sp, #0
     940:	sub	sp, sp, #12
     944:	str	r0, [fp, #-8]
     948:	ldr	r3, [fp, #-8]
     94c:	ldr	r3, [r3, #4]
     950:	mov	r0, r3
     954:	add	sp, fp, #0
     958:	pop	{fp}		; (ldr fp, [sp], #4)
     95c:	bx	lr

00000960 <coda_za_get_filename>:
     960:	push	{fp}		; (str fp, [sp, #-4]!)
     964:	add	fp, sp, #0
     968:	sub	sp, sp, #12
     96c:	str	r0, [fp, #-8]
     970:	ldr	r3, [fp, #-8]
     974:	ldr	r3, [r3, #8]
     978:	mov	r0, r3
     97c:	add	sp, fp, #0
     980:	pop	{fp}		; (ldr fp, [sp], #4)
     984:	bx	lr

00000988 <coda_za_get_entry_by_index>:
     988:	push	{fp}		; (str fp, [sp, #-4]!)
     98c:	add	fp, sp, #0
     990:	sub	sp, sp, #12
     994:	str	r0, [fp, #-8]
     998:	str	r1, [fp, #-12]
     99c:	ldr	r3, [fp, #-12]
     9a0:	cmp	r3, #0
     9a4:	blt	9bc <coda_za_get_entry_by_index+0x34>
     9a8:	ldr	r3, [fp, #-8]
     9ac:	ldr	r2, [r3, #4]
     9b0:	ldr	r3, [fp, #-12]
     9b4:	cmp	r2, r3
     9b8:	bgt	9c4 <coda_za_get_entry_by_index+0x3c>
     9bc:	mov	r3, #0
     9c0:	b	9dc <coda_za_get_entry_by_index+0x54>
     9c4:	ldr	r3, [fp, #-8]
     9c8:	ldr	r2, [r3, #12]
     9cc:	ldr	r3, [fp, #-12]
     9d0:	mov	r1, #44	; 0x2c
     9d4:	mul	r3, r1, r3
     9d8:	add	r3, r2, r3
     9dc:	mov	r0, r3
     9e0:	add	sp, fp, #0
     9e4:	pop	{fp}		; (ldr fp, [sp], #4)
     9e8:	bx	lr

000009ec <coda_za_get_entry_by_name>:
     9ec:	push	{fp, lr}
     9f0:	add	fp, sp, #4
     9f4:	sub	sp, sp, #16
     9f8:	str	r0, [fp, #-16]
     9fc:	str	r1, [fp, #-20]	; 0xffffffec
     a00:	ldr	r3, [fp, #-16]
     a04:	ldr	r3, [r3, #16]
     a08:	ldr	r1, [fp, #-20]	; 0xffffffec
     a0c:	mov	r0, r3
     a10:	bl	0 <coda_hashtable_get_index_from_name>
     a14:	str	r0, [fp, #-8]
     a18:	ldr	r3, [fp, #-8]
     a1c:	cmp	r3, #0
     a20:	bge	a2c <coda_za_get_entry_by_name+0x40>
     a24:	mov	r3, #0
     a28:	b	a44 <coda_za_get_entry_by_name+0x58>
     a2c:	ldr	r3, [fp, #-16]
     a30:	ldr	r2, [r3, #12]
     a34:	ldr	r3, [fp, #-8]
     a38:	mov	r1, #44	; 0x2c
     a3c:	mul	r3, r1, r3
     a40:	add	r3, r2, r3
     a44:	mov	r0, r3
     a48:	sub	sp, fp, #4
     a4c:	pop	{fp, pc}

00000a50 <coda_za_get_entry_size>:
     a50:	push	{fp}		; (str fp, [sp, #-4]!)
     a54:	add	fp, sp, #0
     a58:	sub	sp, sp, #12
     a5c:	str	r0, [fp, #-8]
     a60:	ldr	r3, [fp, #-8]
     a64:	ldr	r3, [r3, #24]
     a68:	mov	r0, r3
     a6c:	add	sp, fp, #0
     a70:	pop	{fp}		; (ldr fp, [sp], #4)
     a74:	bx	lr

00000a78 <coda_za_get_entry_name>:
     a78:	push	{fp}		; (str fp, [sp, #-4]!)
     a7c:	add	fp, sp, #0
     a80:	sub	sp, sp, #12
     a84:	str	r0, [fp, #-8]
     a88:	ldr	r3, [fp, #-8]
     a8c:	ldr	r3, [r3, #36]	; 0x24
     a90:	mov	r0, r3
     a94:	add	sp, fp, #0
     a98:	pop	{fp}		; (ldr fp, [sp], #4)
     a9c:	bx	lr

00000aa0 <coda_za_read_entry>:
     aa0:	push	{r4, fp, lr}
     aa4:	add	fp, sp, #8
     aa8:	sub	sp, sp, #140	; 0x8c
     aac:	str	r0, [fp, #-144]	; 0xffffff70
     ab0:	str	r1, [fp, #-148]	; 0xffffff6c
     ab4:	ldr	r3, [fp, #-144]	; 0xffffff70
     ab8:	ldr	r3, [r3, #40]	; 0x28
     abc:	ldr	r0, [r3]
     ac0:	ldr	r3, [fp, #-144]	; 0xffffff70
     ac4:	ldr	r3, [r3]
     ac8:	mov	r2, #0
     acc:	mov	r1, r3
     ad0:	bl	0 <lseek>
     ad4:	mov	r3, r0
     ad8:	cmp	r3, #0
     adc:	bge	b14 <coda_za_read_entry+0x74>
     ae0:	ldr	r3, [fp, #-144]	; 0xffffff70
     ae4:	ldr	r3, [r3, #40]	; 0x28
     ae8:	ldr	r4, [r3, #20]
     aec:	bl	0 <__errno_location>
     af0:	mov	r3, r0
     af4:	ldr	r3, [r3]
     af8:	mov	r0, r3
     afc:	bl	0 <strerror>
     b00:	mov	r3, r0
     b04:	mov	r0, r3
     b08:	blx	r4
     b0c:	mvn	r3, #0
     b10:	b	10a4 <coda_za_read_entry+0x604>
     b14:	ldr	r3, [fp, #-144]	; 0xffffff70
     b18:	ldr	r3, [r3, #40]	; 0x28
     b1c:	ldr	r3, [r3]
     b20:	sub	r1, fp, #68	; 0x44
     b24:	mov	r2, #30
     b28:	mov	r0, r3
     b2c:	bl	0 <read>
     b30:	mov	r3, r0
     b34:	cmp	r3, #0
     b38:	bge	b70 <coda_za_read_entry+0xd0>
     b3c:	ldr	r3, [fp, #-144]	; 0xffffff70
     b40:	ldr	r3, [r3, #40]	; 0x28
     b44:	ldr	r4, [r3, #20]
     b48:	bl	0 <__errno_location>
     b4c:	mov	r3, r0
     b50:	ldr	r3, [r3]
     b54:	mov	r0, r3
     b58:	bl	0 <strerror>
     b5c:	mov	r3, r0
     b60:	mov	r0, r3
     b64:	blx	r4
     b68:	mvn	r3, #0
     b6c:	b	10a4 <coda_za_read_entry+0x604>
     b70:	ldr	r3, [fp, #-68]	; 0xffffffbc
     b74:	str	r3, [fp, #-16]
     b78:	ldr	r3, [fp, #-16]
     b7c:	ldr	r2, [pc, #1324]	; 10b0 <coda_za_read_entry+0x610>
     b80:	cmp	r3, r2
     b84:	beq	ba4 <coda_za_read_entry+0x104>
     b88:	ldr	r3, [fp, #-144]	; 0xffffff70
     b8c:	ldr	r3, [r3, #40]	; 0x28
     b90:	ldr	r3, [r3, #20]
     b94:	ldr	r0, [pc, #1304]	; 10b4 <coda_za_read_entry+0x614>
     b98:	blx	r3
     b9c:	mvn	r3, #0
     ba0:	b	10a4 <coda_za_read_entry+0x604>
     ba4:	ldrh	r3, [fp, #-60]	; 0xffffffc4
     ba8:	strh	r3, [fp, #-18]	; 0xffffffee
     bac:	ldr	r3, [fp, #-144]	; 0xffffff70
     bb0:	ldrh	r3, [r3, #4]
     bb4:	ldrh	r2, [fp, #-18]	; 0xffffffee
     bb8:	cmp	r2, r3
     bbc:	beq	bdc <coda_za_read_entry+0x13c>
     bc0:	ldr	r3, [fp, #-144]	; 0xffffff70
     bc4:	ldr	r3, [r3, #40]	; 0x28
     bc8:	ldr	r3, [r3, #20]
     bcc:	ldr	r0, [pc, #1252]	; 10b8 <coda_za_read_entry+0x618>
     bd0:	blx	r3
     bd4:	mvn	r3, #0
     bd8:	b	10a4 <coda_za_read_entry+0x604>
     bdc:	ldrh	r3, [fp, #-58]	; 0xffffffc6
     be0:	strh	r3, [fp, #-20]	; 0xffffffec
     be4:	ldr	r3, [fp, #-144]	; 0xffffff70
     be8:	ldrh	r3, [r3, #6]
     bec:	ldrh	r2, [fp, #-20]	; 0xffffffec
     bf0:	cmp	r2, r3
     bf4:	beq	c14 <coda_za_read_entry+0x174>
     bf8:	ldr	r3, [fp, #-144]	; 0xffffff70
     bfc:	ldr	r3, [r3, #40]	; 0x28
     c00:	ldr	r3, [r3, #20]
     c04:	ldr	r0, [pc, #1200]	; 10bc <coda_za_read_entry+0x61c>
     c08:	blx	r3
     c0c:	mvn	r3, #0
     c10:	b	10a4 <coda_za_read_entry+0x604>
     c14:	ldrh	r3, [fp, #-56]	; 0xffffffc8
     c18:	strh	r3, [fp, #-22]	; 0xffffffea
     c1c:	ldr	r3, [fp, #-144]	; 0xffffff70
     c20:	ldrh	r3, [r3, #8]
     c24:	ldrh	r2, [fp, #-22]	; 0xffffffea
     c28:	cmp	r2, r3
     c2c:	beq	c4c <coda_za_read_entry+0x1ac>
     c30:	ldr	r3, [fp, #-144]	; 0xffffff70
     c34:	ldr	r3, [r3, #40]	; 0x28
     c38:	ldr	r3, [r3, #20]
     c3c:	ldr	r0, [pc, #1148]	; 10c0 <coda_za_read_entry+0x620>
     c40:	blx	r3
     c44:	mvn	r3, #0
     c48:	b	10a4 <coda_za_read_entry+0x604>
     c4c:	ldr	r3, [fp, #-54]	; 0xffffffca
     c50:	str	r3, [fp, #-72]	; 0xffffffb8
     c54:	ldr	r3, [fp, #-144]	; 0xffffff70
     c58:	ldr	r2, [r3, #16]
     c5c:	ldr	r3, [fp, #-72]	; 0xffffffb8
     c60:	cmp	r2, r3
     c64:	beq	c84 <coda_za_read_entry+0x1e4>
     c68:	ldr	r3, [fp, #-144]	; 0xffffff70
     c6c:	ldr	r3, [r3, #40]	; 0x28
     c70:	ldr	r3, [r3, #20]
     c74:	ldr	r0, [pc, #1096]	; 10c4 <coda_za_read_entry+0x624>
     c78:	blx	r3
     c7c:	mvn	r3, #0
     c80:	b	10a4 <coda_za_read_entry+0x604>
     c84:	ldr	r3, [fp, #-50]	; 0xffffffce
     c88:	str	r3, [fp, #-76]	; 0xffffffb4
     c8c:	ldr	r3, [fp, #-144]	; 0xffffff70
     c90:	ldr	r2, [r3, #20]
     c94:	ldr	r3, [fp, #-76]	; 0xffffffb4
     c98:	cmp	r2, r3
     c9c:	beq	cbc <coda_za_read_entry+0x21c>
     ca0:	ldr	r3, [fp, #-144]	; 0xffffff70
     ca4:	ldr	r3, [r3, #40]	; 0x28
     ca8:	ldr	r3, [r3, #20]
     cac:	ldr	r0, [pc, #1044]	; 10c8 <coda_za_read_entry+0x628>
     cb0:	blx	r3
     cb4:	mvn	r3, #0
     cb8:	b	10a4 <coda_za_read_entry+0x604>
     cbc:	ldr	r3, [fp, #-46]	; 0xffffffd2
     cc0:	str	r3, [fp, #-80]	; 0xffffffb0
     cc4:	ldr	r3, [fp, #-144]	; 0xffffff70
     cc8:	ldr	r2, [r3, #24]
     ccc:	ldr	r3, [fp, #-80]	; 0xffffffb0
     cd0:	cmp	r2, r3
     cd4:	beq	cf4 <coda_za_read_entry+0x254>
     cd8:	ldr	r3, [fp, #-144]	; 0xffffff70
     cdc:	ldr	r3, [r3, #40]	; 0x28
     ce0:	ldr	r3, [r3, #20]
     ce4:	ldr	r0, [pc, #992]	; 10cc <coda_za_read_entry+0x62c>
     ce8:	blx	r3
     cec:	mvn	r3, #0
     cf0:	b	10a4 <coda_za_read_entry+0x604>
     cf4:	ldrh	r3, [fp, #-42]	; 0xffffffd6
     cf8:	strh	r3, [fp, #-24]	; 0xffffffe8
     cfc:	ldr	r3, [fp, #-144]	; 0xffffff70
     d00:	ldrh	r3, [r3, #28]
     d04:	ldrh	r2, [fp, #-24]	; 0xffffffe8
     d08:	cmp	r2, r3
     d0c:	beq	d2c <coda_za_read_entry+0x28c>
     d10:	ldr	r3, [fp, #-144]	; 0xffffff70
     d14:	ldr	r3, [r3, #40]	; 0x28
     d18:	ldr	r3, [r3, #20]
     d1c:	ldr	r0, [pc, #940]	; 10d0 <coda_za_read_entry+0x630>
     d20:	blx	r3
     d24:	mvn	r3, #0
     d28:	b	10a4 <coda_za_read_entry+0x604>
     d2c:	ldrh	r3, [fp, #-40]	; 0xffffffd8
     d30:	strh	r3, [fp, #-26]	; 0xffffffe6
     d34:	ldr	r3, [fp, #-144]	; 0xffffff70
     d38:	ldr	r3, [r3, #40]	; 0x28
     d3c:	ldr	r0, [r3]
     d40:	ldrh	r2, [fp, #-24]	; 0xffffffe8
     d44:	ldrh	r3, [fp, #-26]	; 0xffffffe6
     d48:	add	r3, r2, r3
     d4c:	mov	r2, #1
     d50:	mov	r1, r3
     d54:	bl	0 <lseek>
     d58:	mov	r3, r0
     d5c:	cmp	r3, #0
     d60:	bge	d98 <coda_za_read_entry+0x2f8>
     d64:	ldr	r3, [fp, #-144]	; 0xffffff70
     d68:	ldr	r3, [r3, #40]	; 0x28
     d6c:	ldr	r4, [r3, #20]
     d70:	bl	0 <__errno_location>
     d74:	mov	r3, r0
     d78:	ldr	r3, [r3]
     d7c:	mov	r0, r3
     d80:	bl	0 <strerror>
     d84:	mov	r3, r0
     d88:	mov	r0, r3
     d8c:	blx	r4
     d90:	mvn	r3, #0
     d94:	b	10a4 <coda_za_read_entry+0x604>
     d98:	ldr	r3, [fp, #-144]	; 0xffffff70
     d9c:	ldrh	r3, [r3, #4]
     da0:	cmp	r3, #0
     da4:	bne	e08 <coda_za_read_entry+0x368>
     da8:	ldr	r3, [fp, #-144]	; 0xffffff70
     dac:	ldr	r3, [r3, #40]	; 0x28
     db0:	ldr	r0, [r3]
     db4:	ldr	r3, [fp, #-144]	; 0xffffff70
     db8:	ldr	r3, [r3, #24]
     dbc:	mov	r2, r3
     dc0:	ldr	r1, [fp, #-148]	; 0xffffff6c
     dc4:	bl	0 <read>
     dc8:	mov	r3, r0
     dcc:	cmp	r3, #0
     dd0:	bge	10a0 <coda_za_read_entry+0x600>
     dd4:	ldr	r3, [fp, #-144]	; 0xffffff70
     dd8:	ldr	r3, [r3, #40]	; 0x28
     ddc:	ldr	r4, [r3, #20]
     de0:	bl	0 <__errno_location>
     de4:	mov	r3, r0
     de8:	ldr	r3, [r3]
     dec:	mov	r0, r3
     df0:	bl	0 <strerror>
     df4:	mov	r3, r0
     df8:	mov	r0, r3
     dfc:	blx	r4
     e00:	mvn	r3, #0
     e04:	b	10a4 <coda_za_read_entry+0x604>
     e08:	ldr	r3, [fp, #-144]	; 0xffffff70
     e0c:	ldr	r3, [r3, #20]
     e10:	mov	r0, r3
     e14:	bl	0 <malloc>
     e18:	mov	r3, r0
     e1c:	str	r3, [fp, #-32]	; 0xffffffe0
     e20:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e24:	cmp	r3, #0
     e28:	bne	e54 <coda_za_read_entry+0x3b4>
     e2c:	ldr	r3, [fp, #-144]	; 0xffffff70
     e30:	ldr	r3, [r3, #40]	; 0x28
     e34:	ldr	r3, [r3, #20]
     e38:	ldr	r2, [fp, #-144]	; 0xffffff70
     e3c:	ldr	r2, [r2, #20]
     e40:	mov	r1, r2
     e44:	ldr	r0, [pc, #648]	; 10d4 <coda_za_read_entry+0x634>
     e48:	blx	r3
     e4c:	mvn	r3, #0
     e50:	b	10a4 <coda_za_read_entry+0x604>
     e54:	ldr	r3, [fp, #-144]	; 0xffffff70
     e58:	ldr	r3, [r3, #40]	; 0x28
     e5c:	ldr	r0, [r3]
     e60:	ldr	r3, [fp, #-144]	; 0xffffff70
     e64:	ldr	r3, [r3, #20]
     e68:	mov	r2, r3
     e6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     e70:	bl	0 <read>
     e74:	mov	r3, r0
     e78:	cmp	r3, #0
     e7c:	bge	ebc <coda_za_read_entry+0x41c>
     e80:	ldr	r3, [fp, #-144]	; 0xffffff70
     e84:	ldr	r3, [r3, #40]	; 0x28
     e88:	ldr	r4, [r3, #20]
     e8c:	bl	0 <__errno_location>
     e90:	mov	r3, r0
     e94:	ldr	r3, [r3]
     e98:	mov	r0, r3
     e9c:	bl	0 <strerror>
     ea0:	mov	r3, r0
     ea4:	mov	r0, r3
     ea8:	blx	r4
     eac:	ldr	r0, [fp, #-32]	; 0xffffffe0
     eb0:	bl	0 <free>
     eb4:	mvn	r3, #0
     eb8:	b	10a4 <coda_za_read_entry+0x604>
     ebc:	mov	r3, #0
     ec0:	str	r3, [fp, #-136]	; 0xffffff78
     ec4:	mov	r3, #0
     ec8:	str	r3, [fp, #-132]	; 0xffffff7c
     ecc:	mov	r3, #0
     ed0:	str	r3, [fp, #-104]	; 0xffffff98
     ed4:	mov	r3, #0
     ed8:	str	r3, [fp, #-100]	; 0xffffff9c
     edc:	mov	r3, #0
     ee0:	str	r3, [fp, #-96]	; 0xffffffa0
     ee4:	mov	r3, #0
     ee8:	str	r3, [fp, #-112]	; 0xffffff90
     eec:	sub	r0, fp, #136	; 0x88
     ef0:	mov	r3, #56	; 0x38
     ef4:	ldr	r2, [pc, #476]	; 10d8 <coda_za_read_entry+0x638>
     ef8:	mvn	r1, #14
     efc:	bl	0 <coda_inflateInit2_>
     f00:	mov	r3, r0
     f04:	cmp	r3, #0
     f08:	beq	f5c <coda_za_read_entry+0x4bc>
     f0c:	ldr	r3, [fp, #-112]	; 0xffffff90
     f10:	cmp	r3, #0
     f14:	beq	f38 <coda_za_read_entry+0x498>
     f18:	ldr	r3, [fp, #-144]	; 0xffffff70
     f1c:	ldr	r3, [r3, #40]	; 0x28
     f20:	ldr	r3, [r3, #20]
     f24:	ldr	r2, [fp, #-112]	; 0xffffff90
     f28:	mov	r1, r2
     f2c:	ldr	r0, [pc, #424]	; 10dc <coda_za_read_entry+0x63c>
     f30:	blx	r3
     f34:	b	f4c <coda_za_read_entry+0x4ac>
     f38:	ldr	r3, [fp, #-144]	; 0xffffff70
     f3c:	ldr	r3, [r3, #40]	; 0x28
     f40:	ldr	r3, [r3, #20]
     f44:	ldr	r0, [pc, #404]	; 10e0 <coda_za_read_entry+0x640>
     f48:	blx	r3
     f4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     f50:	bl	0 <free>
     f54:	mvn	r3, #0
     f58:	b	10a4 <coda_za_read_entry+0x604>
     f5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f60:	str	r3, [fp, #-136]	; 0xffffff78
     f64:	ldr	r3, [fp, #-144]	; 0xffffff70
     f68:	ldr	r3, [r3, #20]
     f6c:	str	r3, [fp, #-132]	; 0xffffff7c
     f70:	ldr	r3, [fp, #-148]	; 0xffffff6c
     f74:	str	r3, [fp, #-124]	; 0xffffff84
     f78:	ldr	r3, [fp, #-144]	; 0xffffff70
     f7c:	ldr	r3, [r3, #24]
     f80:	str	r3, [fp, #-120]	; 0xffffff88
     f84:	sub	r3, fp, #136	; 0x88
     f88:	mov	r1, #4
     f8c:	mov	r0, r3
     f90:	bl	0 <coda_inflate>
     f94:	str	r0, [fp, #-36]	; 0xffffffdc
     f98:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f9c:	cmn	r3, #2
     fa0:	bne	fb8 <coda_za_read_entry+0x518>
     fa4:	ldr	r3, [pc, #312]	; 10e4 <coda_za_read_entry+0x644>
     fa8:	ldr	r2, [pc, #312]	; 10e8 <coda_za_read_entry+0x648>
     fac:	ldr	r1, [pc, #312]	; 10ec <coda_za_read_entry+0x64c>
     fb0:	ldr	r0, [pc, #312]	; 10f0 <coda_za_read_entry+0x650>
     fb4:	bl	0 <__assert_fail>
     fb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     fbc:	cmn	r3, #3
     fc0:	beq	fd8 <coda_za_read_entry+0x538>
     fc4:	cmp	r3, #2
     fc8:	beq	fd8 <coda_za_read_entry+0x538>
     fcc:	cmn	r3, #4
     fd0:	beq	1008 <coda_za_read_entry+0x568>
     fd4:	b	1038 <coda_za_read_entry+0x598>
     fd8:	ldr	r3, [fp, #-144]	; 0xffffff70
     fdc:	ldr	r3, [r3, #40]	; 0x28
     fe0:	ldr	r3, [r3, #20]
     fe4:	ldr	r0, [pc, #264]	; 10f4 <coda_za_read_entry+0x654>
     fe8:	blx	r3
     fec:	sub	r3, fp, #136	; 0x88
     ff0:	mov	r0, r3
     ff4:	bl	0 <coda_inflateEnd>
     ff8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     ffc:	bl	0 <free>
    1000:	mvn	r3, #0
    1004:	b	10a4 <coda_za_read_entry+0x604>
    1008:	ldr	r3, [fp, #-144]	; 0xffffff70
    100c:	ldr	r3, [r3, #40]	; 0x28
    1010:	ldr	r3, [r3, #20]
    1014:	ldr	r0, [pc, #220]	; 10f8 <coda_za_read_entry+0x658>
    1018:	blx	r3
    101c:	sub	r3, fp, #136	; 0x88
    1020:	mov	r0, r3
    1024:	bl	0 <coda_inflateEnd>
    1028:	ldr	r0, [fp, #-32]	; 0xffffffe0
    102c:	bl	0 <free>
    1030:	mvn	r3, #0
    1034:	b	10a4 <coda_za_read_entry+0x604>
    1038:	ldr	r0, [fp, #-32]	; 0xffffffe0
    103c:	bl	0 <free>
    1040:	sub	r3, fp, #136	; 0x88
    1044:	mov	r0, r3
    1048:	bl	0 <coda_inflateEnd>
    104c:	mov	r3, r0
    1050:	cmp	r3, #0
    1054:	beq	10a0 <coda_za_read_entry+0x600>
    1058:	ldr	r3, [fp, #-112]	; 0xffffff90
    105c:	cmp	r3, #0
    1060:	beq	1084 <coda_za_read_entry+0x5e4>
    1064:	ldr	r3, [fp, #-144]	; 0xffffff70
    1068:	ldr	r3, [r3, #40]	; 0x28
    106c:	ldr	r3, [r3, #20]
    1070:	ldr	r2, [fp, #-112]	; 0xffffff90
    1074:	mov	r1, r2
    1078:	ldr	r0, [pc, #124]	; 10fc <coda_za_read_entry+0x65c>
    107c:	blx	r3
    1080:	b	1098 <coda_za_read_entry+0x5f8>
    1084:	ldr	r3, [fp, #-144]	; 0xffffff70
    1088:	ldr	r3, [r3, #40]	; 0x28
    108c:	ldr	r3, [r3, #20]
    1090:	ldr	r0, [pc, #104]	; 1100 <coda_za_read_entry+0x660>
    1094:	blx	r3
    1098:	mvn	r3, #0
    109c:	b	10a4 <coda_za_read_entry+0x604>
    10a0:	mov	r3, #0
    10a4:	mov	r0, r3
    10a8:	sub	sp, fp, #8
    10ac:	pop	{r4, fp, pc}
    10b0:	.word	0x04034b50
    10b4:	.word	0x00000220
    10b8:	.word	0x0000025c
    10bc:	.word	0x000002b4
    10c0:	.word	0x00000314
    10c4:	.word	0x00000374
    10c8:	.word	0x000003c4
    10cc:	.word	0x00000420
    10d0:	.word	0x00000480
    10d4:	.word	0x00000090
    10d8:	.word	0x000004dc
    10dc:	.word	0x000004e4
    10e0:	.word	0x000004e8
    10e4:	.word	0x000005e0
    10e8:	.word	0x00000279
    10ec:	.word	0x00000510
    10f0:	.word	0x0000055c
    10f4:	.word	0x00000578
    10f8:	.word	0x000005ac
    10fc:	.word	0x000005bc
    1100:	.word	0x000005cc

00001104 <coda_za_close>:
    1104:	push	{fp, lr}
    1108:	add	fp, sp, #4
    110c:	sub	sp, sp, #16
    1110:	str	r0, [fp, #-16]
    1114:	ldr	r3, [fp, #-16]
    1118:	ldr	r3, [r3]
    111c:	mov	r0, r3
    1120:	bl	0 <close>
    1124:	ldr	r3, [fp, #-16]
    1128:	ldr	r3, [r3, #12]
    112c:	cmp	r3, #0
    1130:	beq	11b8 <coda_za_close+0xb4>
    1134:	mov	r3, #0
    1138:	str	r3, [fp, #-8]
    113c:	b	1194 <coda_za_close+0x90>
    1140:	ldr	r3, [fp, #-16]
    1144:	ldr	r2, [r3, #12]
    1148:	ldr	r3, [fp, #-8]
    114c:	mov	r1, #44	; 0x2c
    1150:	mul	r3, r1, r3
    1154:	add	r3, r2, r3
    1158:	ldr	r3, [r3, #36]	; 0x24
    115c:	cmp	r3, #0
    1160:	beq	1188 <coda_za_close+0x84>
    1164:	ldr	r3, [fp, #-16]
    1168:	ldr	r2, [r3, #12]
    116c:	ldr	r3, [fp, #-8]
    1170:	mov	r1, #44	; 0x2c
    1174:	mul	r3, r1, r3
    1178:	add	r3, r2, r3
    117c:	ldr	r3, [r3, #36]	; 0x24
    1180:	mov	r0, r3
    1184:	bl	0 <free>
    1188:	ldr	r3, [fp, #-8]
    118c:	add	r3, r3, #1
    1190:	str	r3, [fp, #-8]
    1194:	ldr	r3, [fp, #-16]
    1198:	ldr	r2, [r3, #4]
    119c:	ldr	r3, [fp, #-8]
    11a0:	cmp	r2, r3
    11a4:	bgt	1140 <coda_za_close+0x3c>
    11a8:	ldr	r3, [fp, #-16]
    11ac:	ldr	r3, [r3, #12]
    11b0:	mov	r0, r3
    11b4:	bl	0 <free>
    11b8:	ldr	r3, [fp, #-16]
    11bc:	ldr	r3, [r3, #8]
    11c0:	cmp	r3, #0
    11c4:	beq	11d8 <coda_za_close+0xd4>
    11c8:	ldr	r3, [fp, #-16]
    11cc:	ldr	r3, [r3, #8]
    11d0:	mov	r0, r3
    11d4:	bl	0 <free>
    11d8:	ldr	r3, [fp, #-16]
    11dc:	ldr	r3, [r3, #16]
    11e0:	cmp	r3, #0
    11e4:	beq	11f8 <coda_za_close+0xf4>
    11e8:	ldr	r3, [fp, #-16]
    11ec:	ldr	r3, [r3, #16]
    11f0:	mov	r0, r3
    11f4:	bl	0 <coda_hashtable_delete>
    11f8:	ldr	r0, [fp, #-16]
    11fc:	bl	0 <free>
    1200:	nop			; (mov r0, r0)
    1204:	sub	sp, fp, #4
    1208:	pop	{fp, pc}
