
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	strd	r4, [sp, #-24]!	; 0xffffffe8
       4:	strd	r6, [sp, #8]
       8:	str	fp, [sp, #16]
       c:	str	lr, [sp, #20]
      10:	add	fp, sp, #20
      14:	sub	sp, sp, #96	; 0x60
      18:	str	r0, [fp, #-96]	; 0xffffffa0
      1c:	strd	r2, [fp, #-108]	; 0xffffff94
      20:	ldr	r3, [fp, #-96]	; 0xffffffa0
      24:	ldr	r3, [r3, #48]	; 0x30
      28:	cmp	r3, #0
      2c:	beq	110 <read_bytes+0x110>
      30:	ldrd	r0, [fp, #-108]	; 0xffffff94
      34:	ldrd	r2, [fp, #4]
      38:	adds	r6, r0, r2
      3c:	adc	r7, r1, r3
      40:	ldr	r3, [fp, #-96]	; 0xffffffa0
      44:	ldrd	r2, [r3, #40]	; 0x28
      48:	cmp	r7, r3
      4c:	cmpeq	r6, r2
      50:	bls	ec <read_bytes+0xec>
      54:	ldr	r3, [fp, #-96]	; 0xffffffa0
      58:	ldr	r3, [r3, #16]
      5c:	cmp	r3, #0
      60:	beq	74 <read_bytes+0x74>
      64:	ldr	r3, [fp, #-96]	; 0xffffffa0
      68:	ldr	r3, [r3, #16]
      6c:	cmp	r3, #1
      70:	bne	8c <read_bytes+0x8c>
      74:	movw	r1, #0
      78:	movt	r1, #0
      7c:	mvn	r0, #300	; 0x12c
      80:	bl	0 <coda_set_error>
      84:	mvn	r3, #0
      88:	b	1e8 <read_bytes+0x1e8>
      8c:	sub	r3, fp, #44	; 0x2c
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #4]
      98:	bl	0 <coda_str64>
      9c:	sub	r3, fp, #68	; 0x44
      a0:	mov	r2, r3
      a4:	ldrd	r0, [fp, #-108]	; 0xffffff94
      a8:	bl	0 <coda_str64>
      ac:	ldr	r3, [fp, #-96]	; 0xffffffa0
      b0:	ldrd	r0, [r3, #40]	; 0x28
      b4:	sub	r3, fp, #92	; 0x5c
      b8:	mov	r2, r3
      bc:	bl	0 <coda_str64>
      c0:	sub	r1, fp, #68	; 0x44
      c4:	sub	r2, fp, #44	; 0x2c
      c8:	sub	r3, fp, #92	; 0x5c
      cc:	str	r3, [sp]
      d0:	mov	r3, r1
      d4:	movw	r1, #0
      d8:	movt	r1, #0
      dc:	mvn	r0, #300	; 0x12c
      e0:	bl	0 <coda_set_error>
      e4:	mvn	r3, #0
      e8:	b	1e8 <read_bytes+0x1e8>
      ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
      f0:	ldr	r2, [r3, #48]	; 0x30
      f4:	ldr	r3, [fp, #-108]	; 0xffffff94
      f8:	add	r3, r2, r3
      fc:	ldr	r2, [fp, #4]
     100:	mov	r1, r3
     104:	ldr	r0, [fp, #12]
     108:	bl	0 <memcpy>
     10c:	b	1e4 <read_bytes+0x1e4>
     110:	ldr	r3, [fp, #-96]	; 0xffffffa0
     114:	ldr	r3, [r3, #16]
     118:	cmp	r3, #0
     11c:	beq	150 <read_bytes+0x150>
     120:	ldr	r3, [fp, #-96]	; 0xffffffa0
     124:	ldr	r3, [r3, #16]
     128:	cmp	r3, #1
     12c:	beq	150 <read_bytes+0x150>
     130:	movw	r3, #0
     134:	movt	r3, #0
     138:	mov	r2, #83	; 0x53
     13c:	movw	r1, #0
     140:	movt	r1, #0
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <__assert_fail>
     150:	ldrd	r0, [fp, #-108]	; 0xffffff94
     154:	ldrd	r2, [fp, #4]
     158:	adds	r4, r0, r2
     15c:	adc	r5, r1, r3
     160:	ldr	r3, [fp, #-96]	; 0xffffffa0
     164:	ldrd	r2, [r3, #8]
     168:	cmp	r5, r3
     16c:	cmpeq	r4, r2
     170:	bls	18c <read_bytes+0x18c>
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	mvn	r0, #300	; 0x12c
     180:	bl	0 <coda_set_error>
     184:	mvn	r3, #0
     188:	b	1e8 <read_bytes+0x1e8>
     18c:	ldr	r3, [fp, #-96]	; 0xffffffa0
     190:	ldr	r0, [r3, #56]	; 0x38
     194:	ldr	r2, [fp, #4]
     198:	ldr	r3, [fp, #-108]	; 0xffffff94
     19c:	ldr	r1, [fp, #12]
     1a0:	bl	0 <pread>
     1a4:	mov	r3, r0
     1a8:	cmp	r3, #0
     1ac:	bge	1e4 <read_bytes+0x1e4>
     1b0:	bl	0 <__errno_location>
     1b4:	mov	r3, r0
     1b8:	ldr	r3, [r3]
     1bc:	mov	r0, r3
     1c0:	bl	0 <strerror>
     1c4:	mov	r3, r0
     1c8:	mov	r2, r3
     1cc:	movw	r1, #0
     1d0:	movt	r1, #0
     1d4:	mvn	r0, #21
     1d8:	bl	0 <coda_set_error>
     1dc:	mvn	r3, #0
     1e0:	b	1e8 <read_bytes+0x1e8>
     1e4:	mov	r3, #0
     1e8:	mov	r0, r3
     1ec:	sub	sp, fp, #20
     1f0:	ldrd	r4, [sp]
     1f4:	ldrd	r6, [sp, #8]
     1f8:	ldr	fp, [sp, #16]
     1fc:	add	sp, sp, #20
     200:	pop	{pc}		; (ldr pc, [sp], #4)

00000204 <swap2>:
     204:	push	{fp}		; (str fp, [sp, #-4]!)
     208:	add	fp, sp, #0
     20c:	sub	sp, sp, #20
     210:	str	r0, [fp, #-16]
     214:	ldr	r3, [fp, #-16]
     218:	str	r3, [fp, #-8]
     21c:	ldr	r3, [fp, #-8]
     220:	ldrb	r2, [r3]
     224:	ldr	r3, [fp, #-8]
     228:	add	r3, r3, #1
     22c:	ldrb	r3, [r3]
     230:	eor	r3, r3, r2
     234:	uxtb	r2, r3
     238:	ldr	r3, [fp, #-8]
     23c:	strb	r2, [r3]
     240:	ldr	r3, [fp, #-8]
     244:	ldrb	r1, [r3]
     248:	ldr	r3, [fp, #-8]
     24c:	add	r3, r3, #1
     250:	ldrb	r2, [r3]
     254:	ldr	r3, [fp, #-8]
     258:	add	r3, r3, #1
     25c:	eor	r2, r2, r1
     260:	uxtb	r2, r2
     264:	strb	r2, [r3]
     268:	ldr	r3, [fp, #-8]
     26c:	ldrb	r2, [r3]
     270:	ldr	r3, [fp, #-8]
     274:	add	r3, r3, #1
     278:	ldrb	r3, [r3]
     27c:	eor	r3, r3, r2
     280:	uxtb	r2, r3
     284:	ldr	r3, [fp, #-8]
     288:	strb	r2, [r3]
     28c:	nop	{0}
     290:	add	sp, fp, #0
     294:	pop	{fp}		; (ldr fp, [sp], #4)
     298:	bx	lr

0000029c <swap4>:
     29c:	push	{fp}		; (str fp, [sp, #-4]!)
     2a0:	add	fp, sp, #0
     2a4:	sub	sp, sp, #20
     2a8:	str	r0, [fp, #-16]
     2ac:	ldr	r3, [fp, #-16]
     2b0:	str	r3, [fp, #-8]
     2b4:	ldr	r3, [fp, #-8]
     2b8:	ldrb	r2, [r3]
     2bc:	ldr	r3, [fp, #-8]
     2c0:	add	r3, r3, #3
     2c4:	ldrb	r3, [r3]
     2c8:	eor	r3, r3, r2
     2cc:	uxtb	r2, r3
     2d0:	ldr	r3, [fp, #-8]
     2d4:	strb	r2, [r3]
     2d8:	ldr	r3, [fp, #-8]
     2dc:	ldrb	r1, [r3]
     2e0:	ldr	r3, [fp, #-8]
     2e4:	add	r3, r3, #3
     2e8:	ldrb	r2, [r3]
     2ec:	ldr	r3, [fp, #-8]
     2f0:	add	r3, r3, #3
     2f4:	eor	r2, r2, r1
     2f8:	uxtb	r2, r2
     2fc:	strb	r2, [r3]
     300:	ldr	r3, [fp, #-8]
     304:	ldrb	r2, [r3]
     308:	ldr	r3, [fp, #-8]
     30c:	add	r3, r3, #3
     310:	ldrb	r3, [r3]
     314:	eor	r3, r3, r2
     318:	uxtb	r2, r3
     31c:	ldr	r3, [fp, #-8]
     320:	strb	r2, [r3]
     324:	ldr	r3, [fp, #-8]
     328:	add	r3, r3, #1
     32c:	ldrb	r1, [r3]
     330:	ldr	r3, [fp, #-8]
     334:	add	r3, r3, #2
     338:	ldrb	r2, [r3]
     33c:	ldr	r3, [fp, #-8]
     340:	add	r3, r3, #1
     344:	eor	r2, r2, r1
     348:	uxtb	r2, r2
     34c:	strb	r2, [r3]
     350:	ldr	r3, [fp, #-8]
     354:	add	r3, r3, #1
     358:	ldrb	r1, [r3]
     35c:	ldr	r3, [fp, #-8]
     360:	add	r3, r3, #2
     364:	ldrb	r2, [r3]
     368:	ldr	r3, [fp, #-8]
     36c:	add	r3, r3, #2
     370:	eor	r2, r2, r1
     374:	uxtb	r2, r2
     378:	strb	r2, [r3]
     37c:	ldr	r3, [fp, #-8]
     380:	add	r3, r3, #1
     384:	ldrb	r1, [r3]
     388:	ldr	r3, [fp, #-8]
     38c:	add	r3, r3, #2
     390:	ldrb	r2, [r3]
     394:	ldr	r3, [fp, #-8]
     398:	add	r3, r3, #1
     39c:	eor	r2, r2, r1
     3a0:	uxtb	r2, r2
     3a4:	strb	r2, [r3]
     3a8:	nop	{0}
     3ac:	add	sp, fp, #0
     3b0:	pop	{fp}		; (ldr fp, [sp], #4)
     3b4:	bx	lr

000003b8 <swap8>:
     3b8:	push	{fp}		; (str fp, [sp, #-4]!)
     3bc:	add	fp, sp, #0
     3c0:	sub	sp, sp, #20
     3c4:	str	r0, [fp, #-16]
     3c8:	ldr	r3, [fp, #-16]
     3cc:	str	r3, [fp, #-8]
     3d0:	ldr	r3, [fp, #-8]
     3d4:	ldrb	r2, [r3]
     3d8:	ldr	r3, [fp, #-8]
     3dc:	add	r3, r3, #7
     3e0:	ldrb	r3, [r3]
     3e4:	eor	r3, r3, r2
     3e8:	uxtb	r2, r3
     3ec:	ldr	r3, [fp, #-8]
     3f0:	strb	r2, [r3]
     3f4:	ldr	r3, [fp, #-8]
     3f8:	ldrb	r1, [r3]
     3fc:	ldr	r3, [fp, #-8]
     400:	add	r3, r3, #7
     404:	ldrb	r2, [r3]
     408:	ldr	r3, [fp, #-8]
     40c:	add	r3, r3, #7
     410:	eor	r2, r2, r1
     414:	uxtb	r2, r2
     418:	strb	r2, [r3]
     41c:	ldr	r3, [fp, #-8]
     420:	ldrb	r2, [r3]
     424:	ldr	r3, [fp, #-8]
     428:	add	r3, r3, #7
     42c:	ldrb	r3, [r3]
     430:	eor	r3, r3, r2
     434:	uxtb	r2, r3
     438:	ldr	r3, [fp, #-8]
     43c:	strb	r2, [r3]
     440:	ldr	r3, [fp, #-8]
     444:	add	r3, r3, #1
     448:	ldrb	r1, [r3]
     44c:	ldr	r3, [fp, #-8]
     450:	add	r3, r3, #6
     454:	ldrb	r2, [r3]
     458:	ldr	r3, [fp, #-8]
     45c:	add	r3, r3, #1
     460:	eor	r2, r2, r1
     464:	uxtb	r2, r2
     468:	strb	r2, [r3]
     46c:	ldr	r3, [fp, #-8]
     470:	add	r3, r3, #1
     474:	ldrb	r1, [r3]
     478:	ldr	r3, [fp, #-8]
     47c:	add	r3, r3, #6
     480:	ldrb	r2, [r3]
     484:	ldr	r3, [fp, #-8]
     488:	add	r3, r3, #6
     48c:	eor	r2, r2, r1
     490:	uxtb	r2, r2
     494:	strb	r2, [r3]
     498:	ldr	r3, [fp, #-8]
     49c:	add	r3, r3, #1
     4a0:	ldrb	r1, [r3]
     4a4:	ldr	r3, [fp, #-8]
     4a8:	add	r3, r3, #6
     4ac:	ldrb	r2, [r3]
     4b0:	ldr	r3, [fp, #-8]
     4b4:	add	r3, r3, #1
     4b8:	eor	r2, r2, r1
     4bc:	uxtb	r2, r2
     4c0:	strb	r2, [r3]
     4c4:	ldr	r3, [fp, #-8]
     4c8:	add	r3, r3, #2
     4cc:	ldrb	r1, [r3]
     4d0:	ldr	r3, [fp, #-8]
     4d4:	add	r3, r3, #5
     4d8:	ldrb	r2, [r3]
     4dc:	ldr	r3, [fp, #-8]
     4e0:	add	r3, r3, #2
     4e4:	eor	r2, r2, r1
     4e8:	uxtb	r2, r2
     4ec:	strb	r2, [r3]
     4f0:	ldr	r3, [fp, #-8]
     4f4:	add	r3, r3, #2
     4f8:	ldrb	r1, [r3]
     4fc:	ldr	r3, [fp, #-8]
     500:	add	r3, r3, #5
     504:	ldrb	r2, [r3]
     508:	ldr	r3, [fp, #-8]
     50c:	add	r3, r3, #5
     510:	eor	r2, r2, r1
     514:	uxtb	r2, r2
     518:	strb	r2, [r3]
     51c:	ldr	r3, [fp, #-8]
     520:	add	r3, r3, #2
     524:	ldrb	r1, [r3]
     528:	ldr	r3, [fp, #-8]
     52c:	add	r3, r3, #5
     530:	ldrb	r2, [r3]
     534:	ldr	r3, [fp, #-8]
     538:	add	r3, r3, #2
     53c:	eor	r2, r2, r1
     540:	uxtb	r2, r2
     544:	strb	r2, [r3]
     548:	ldr	r3, [fp, #-8]
     54c:	add	r3, r3, #3
     550:	ldrb	r1, [r3]
     554:	ldr	r3, [fp, #-8]
     558:	add	r3, r3, #4
     55c:	ldrb	r2, [r3]
     560:	ldr	r3, [fp, #-8]
     564:	add	r3, r3, #3
     568:	eor	r2, r2, r1
     56c:	uxtb	r2, r2
     570:	strb	r2, [r3]
     574:	ldr	r3, [fp, #-8]
     578:	add	r3, r3, #3
     57c:	ldrb	r1, [r3]
     580:	ldr	r3, [fp, #-8]
     584:	add	r3, r3, #4
     588:	ldrb	r2, [r3]
     58c:	ldr	r3, [fp, #-8]
     590:	add	r3, r3, #4
     594:	eor	r2, r2, r1
     598:	uxtb	r2, r2
     59c:	strb	r2, [r3]
     5a0:	ldr	r3, [fp, #-8]
     5a4:	add	r3, r3, #3
     5a8:	ldrb	r1, [r3]
     5ac:	ldr	r3, [fp, #-8]
     5b0:	add	r3, r3, #4
     5b4:	ldrb	r2, [r3]
     5b8:	ldr	r3, [fp, #-8]
     5bc:	add	r3, r3, #3
     5c0:	eor	r2, r2, r1
     5c4:	uxtb	r2, r2
     5c8:	strb	r2, [r3]
     5cc:	nop	{0}
     5d0:	add	sp, fp, #0
     5d4:	pop	{fp}		; (ldr fp, [sp], #4)
     5d8:	bx	lr

000005dc <coda_cdf_cursor_set_product>:
     5dc:	push	{fp}		; (str fp, [sp, #-4]!)
     5e0:	add	fp, sp, #0
     5e4:	sub	sp, sp, #12
     5e8:	str	r0, [fp, #-8]
     5ec:	str	r1, [fp, #-12]
     5f0:	ldr	r3, [fp, #-8]
     5f4:	ldr	r2, [fp, #-12]
     5f8:	str	r2, [r3]
     5fc:	ldr	r3, [fp, #-8]
     600:	mov	r2, #1
     604:	str	r2, [r3, #4]
     608:	ldr	r3, [fp, #-12]
     60c:	ldr	r2, [r3, #20]
     610:	ldr	r3, [fp, #-8]
     614:	str	r2, [r3, #8]
     618:	ldr	r3, [fp, #-8]
     61c:	mvn	r2, #0
     620:	str	r2, [r3, #12]
     624:	ldr	r1, [fp, #-8]
     628:	mvn	r2, #0
     62c:	mvn	r3, #0
     630:	strd	r2, [r1, #16]
     634:	mov	r3, #0
     638:	mov	r0, r3
     63c:	add	sp, fp, #0
     640:	pop	{fp}		; (ldr fp, [sp], #4)
     644:	bx	lr

00000648 <coda_cdf_cursor_goto_array_element>:
     648:	str	fp, [sp, #-8]!
     64c:	str	lr, [sp, #4]
     650:	add	fp, sp, #4
     654:	sub	sp, sp, #64	; 0x40
     658:	str	r0, [fp, #-56]	; 0xffffffc8
     65c:	str	r1, [fp, #-60]	; 0xffffffc4
     660:	str	r2, [fp, #-64]	; 0xffffffc0
     664:	ldr	r3, [fp, #-56]	; 0xffffffc8
     668:	ldr	r3, [r3, #4]
     66c:	sub	r3, r3, #1
     670:	ldr	r2, [fp, #-56]	; 0xffffffc8
     674:	lsl	r3, r3, #4
     678:	add	r3, r2, r3
     67c:	ldr	r3, [r3, #8]
     680:	ldr	r3, [r3, #4]
     684:	sub	r2, fp, #52	; 0x34
     688:	sub	r1, fp, #20
     68c:	mov	r0, r3
     690:	bl	0 <coda_type_get_array_dim>
     694:	mov	r3, r0
     698:	cmp	r3, #0
     69c:	beq	6a8 <coda_cdf_cursor_goto_array_element+0x60>
     6a0:	mvn	r3, #0
     6a4:	b	884 <coda_cdf_cursor_goto_array_element+0x23c>
     6a8:	ldr	r3, [fp, #-20]	; 0xffffffec
     6ac:	ldr	r2, [fp, #-60]	; 0xffffffc4
     6b0:	cmp	r2, r3
     6b4:	beq	6d8 <coda_cdf_cursor_goto_array_element+0x90>
     6b8:	ldr	r3, [fp, #-20]	; 0xffffffec
     6bc:	ldr	r2, [fp, #-60]	; 0xffffffc4
     6c0:	movw	r1, #0
     6c4:	movt	r1, #0
     6c8:	mvn	r0, #105	; 0x69
     6cc:	bl	0 <coda_set_error>
     6d0:	mvn	r3, #0
     6d4:	b	884 <coda_cdf_cursor_goto_array_element+0x23c>
     6d8:	mov	r3, #0
     6dc:	str	r3, [fp, #-8]
     6e0:	mov	r3, #0
     6e4:	str	r3, [fp, #-12]
     6e8:	b	7d0 <coda_cdf_cursor_goto_array_element+0x188>
     6ec:	ldr	r3, [fp, #-12]
     6f0:	lsl	r3, r3, #2
     6f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
     6f8:	add	r3, r2, r3
     6fc:	ldr	r3, [r3]
     700:	cmp	r3, #0
     704:	blt	738 <coda_cdf_cursor_goto_array_element+0xf0>
     708:	ldr	r3, [fp, #-12]
     70c:	lsl	r3, r3, #2
     710:	ldr	r2, [fp, #-64]	; 0xffffffc0
     714:	add	r3, r2, r3
     718:	ldr	r2, [r3]
     71c:	ldr	r3, [fp, #-12]
     720:	lsl	r3, r3, #2
     724:	sub	r1, fp, #4
     728:	add	r3, r1, r3
     72c:	ldr	r3, [r3, #-48]	; 0xffffffd0
     730:	cmp	r2, r3
     734:	blt	778 <coda_cdf_cursor_goto_array_element+0x130>
     738:	ldr	r3, [fp, #-12]
     73c:	lsl	r3, r3, #2
     740:	ldr	r2, [fp, #-64]	; 0xffffffc0
     744:	add	r3, r2, r3
     748:	ldr	r2, [r3]
     74c:	ldr	r3, [fp, #-12]
     750:	lsl	r3, r3, #2
     754:	sub	r1, fp, #4
     758:	add	r3, r1, r3
     75c:	ldr	r3, [r3, #-48]	; 0xffffffd0
     760:	movw	r1, #0
     764:	movt	r1, #0
     768:	mvn	r0, #106	; 0x6a
     76c:	bl	0 <coda_set_error>
     770:	mvn	r3, #0
     774:	b	884 <coda_cdf_cursor_goto_array_element+0x23c>
     778:	ldr	r3, [fp, #-12]
     77c:	cmp	r3, #0
     780:	ble	7a4 <coda_cdf_cursor_goto_array_element+0x15c>
     784:	ldr	r3, [fp, #-12]
     788:	lsl	r3, r3, #2
     78c:	sub	r2, fp, #4
     790:	add	r3, r2, r3
     794:	ldr	r2, [r3, #-48]	; 0xffffffd0
     798:	ldr	r3, [fp, #-8]
     79c:	mul	r3, r2, r3
     7a0:	str	r3, [fp, #-8]
     7a4:	ldr	r3, [fp, #-12]
     7a8:	lsl	r3, r3, #2
     7ac:	ldr	r2, [fp, #-64]	; 0xffffffc0
     7b0:	add	r3, r2, r3
     7b4:	ldr	r3, [r3]
     7b8:	ldr	r2, [fp, #-8]
     7bc:	add	r3, r2, r3
     7c0:	str	r3, [fp, #-8]
     7c4:	ldr	r3, [fp, #-12]
     7c8:	add	r3, r3, #1
     7cc:	str	r3, [fp, #-12]
     7d0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7d4:	ldr	r2, [fp, #-12]
     7d8:	cmp	r2, r3
     7dc:	blt	6ec <coda_cdf_cursor_goto_array_element+0xa4>
     7e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
     7e4:	ldr	r3, [r3, #4]
     7e8:	sub	r3, r3, #1
     7ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
     7f0:	lsl	r3, r3, #4
     7f4:	add	r3, r2, r3
     7f8:	ldr	r3, [r3, #8]
     7fc:	ldr	r3, [r3, #16]
     800:	str	r3, [fp, #-16]
     804:	ldr	r3, [fp, #-56]	; 0xffffffc8
     808:	ldr	r3, [r3, #4]
     80c:	add	r2, r3, #1
     810:	ldr	r3, [fp, #-56]	; 0xffffffc8
     814:	str	r2, [r3, #4]
     818:	ldr	r3, [fp, #-56]	; 0xffffffc8
     81c:	ldr	r3, [r3, #4]
     820:	sub	r3, r3, #1
     824:	ldr	r2, [fp, #-56]	; 0xffffffc8
     828:	lsl	r3, r3, #4
     82c:	add	r3, r2, r3
     830:	ldr	r2, [fp, #-16]
     834:	str	r2, [r3, #8]
     838:	ldr	r3, [fp, #-56]	; 0xffffffc8
     83c:	ldr	r3, [r3, #4]
     840:	sub	r3, r3, #1
     844:	ldr	r2, [fp, #-56]	; 0xffffffc8
     848:	lsl	r3, r3, #4
     84c:	add	r3, r2, r3
     850:	ldr	r2, [fp, #-8]
     854:	str	r2, [r3, #12]
     858:	ldr	r3, [fp, #-56]	; 0xffffffc8
     85c:	ldr	r3, [r3, #4]
     860:	sub	r3, r3, #1
     864:	ldr	r2, [fp, #-56]	; 0xffffffc8
     868:	add	r3, r3, #1
     86c:	lsl	r3, r3, #4
     870:	add	r1, r2, r3
     874:	mvn	r2, #0
     878:	mvn	r3, #0
     87c:	strd	r2, [r1]
     880:	mov	r3, #0
     884:	mov	r0, r3
     888:	sub	sp, fp, #4
     88c:	ldr	fp, [sp]
     890:	add	sp, sp, #4
     894:	pop	{pc}		; (ldr pc, [sp], #4)

00000898 <coda_cdf_cursor_goto_array_element_by_index>:
     898:	str	fp, [sp, #-8]!
     89c:	str	lr, [sp, #4]
     8a0:	add	fp, sp, #4
     8a4:	sub	sp, sp, #16
     8a8:	str	r0, [fp, #-16]
     8ac:	str	r1, [fp, #-20]	; 0xffffffec
     8b0:	ldr	r3, [pc, #300]	; 9e4 <coda_cdf_cursor_goto_array_element_by_index+0x14c>
     8b4:	ldr	r3, [pc, r3]
     8b8:	mrc	15, 0, r2, cr13, cr0, {3}
     8bc:	ldr	r3, [r2, r3]
     8c0:	cmp	r3, #0
     8c4:	beq	92c <coda_cdf_cursor_goto_array_element_by_index+0x94>
     8c8:	ldr	r3, [fp, #-16]
     8cc:	ldr	r3, [r3, #4]
     8d0:	sub	r3, r3, #1
     8d4:	ldr	r2, [fp, #-16]
     8d8:	lsl	r3, r3, #4
     8dc:	add	r3, r2, r3
     8e0:	ldr	r3, [r3, #8]
     8e4:	ldr	r3, [r3, #4]
     8e8:	ldr	r3, [r3, #44]	; 0x2c
     8ec:	str	r3, [fp, #-8]
     8f0:	ldr	r3, [fp, #-20]	; 0xffffffec
     8f4:	cmp	r3, #0
     8f8:	blt	90c <coda_cdf_cursor_goto_array_element_by_index+0x74>
     8fc:	ldr	r2, [fp, #-20]	; 0xffffffec
     900:	ldr	r3, [fp, #-8]
     904:	cmp	r2, r3
     908:	blt	92c <coda_cdf_cursor_goto_array_element_by_index+0x94>
     90c:	ldr	r3, [fp, #-8]
     910:	ldr	r2, [fp, #-20]	; 0xffffffec
     914:	movw	r1, #0
     918:	movt	r1, #0
     91c:	mvn	r0, #106	; 0x6a
     920:	bl	0 <coda_set_error>
     924:	mvn	r3, #0
     928:	b	9d0 <coda_cdf_cursor_goto_array_element_by_index+0x138>
     92c:	ldr	r3, [fp, #-16]
     930:	ldr	r3, [r3, #4]
     934:	sub	r3, r3, #1
     938:	ldr	r2, [fp, #-16]
     93c:	lsl	r3, r3, #4
     940:	add	r3, r2, r3
     944:	ldr	r3, [r3, #8]
     948:	ldr	r3, [r3, #16]
     94c:	str	r3, [fp, #-12]
     950:	ldr	r3, [fp, #-16]
     954:	ldr	r3, [r3, #4]
     958:	add	r2, r3, #1
     95c:	ldr	r3, [fp, #-16]
     960:	str	r2, [r3, #4]
     964:	ldr	r3, [fp, #-16]
     968:	ldr	r3, [r3, #4]
     96c:	sub	r3, r3, #1
     970:	ldr	r2, [fp, #-16]
     974:	lsl	r3, r3, #4
     978:	add	r3, r2, r3
     97c:	ldr	r2, [fp, #-12]
     980:	str	r2, [r3, #8]
     984:	ldr	r3, [fp, #-16]
     988:	ldr	r3, [r3, #4]
     98c:	sub	r3, r3, #1
     990:	ldr	r2, [fp, #-16]
     994:	lsl	r3, r3, #4
     998:	add	r3, r2, r3
     99c:	ldr	r2, [fp, #-20]	; 0xffffffec
     9a0:	str	r2, [r3, #12]
     9a4:	ldr	r3, [fp, #-16]
     9a8:	ldr	r3, [r3, #4]
     9ac:	sub	r3, r3, #1
     9b0:	ldr	r2, [fp, #-16]
     9b4:	add	r3, r3, #1
     9b8:	lsl	r3, r3, #4
     9bc:	add	r1, r2, r3
     9c0:	mvn	r2, #0
     9c4:	mvn	r3, #0
     9c8:	strd	r2, [r1]
     9cc:	mov	r3, #0
     9d0:	mov	r0, r3
     9d4:	sub	sp, fp, #4
     9d8:	ldr	fp, [sp]
     9dc:	add	sp, sp, #4
     9e0:	pop	{pc}		; (ldr pc, [sp], #4)
     9e4:	.word	0x00000128

000009e8 <coda_cdf_cursor_goto_next_array_element>:
     9e8:	str	fp, [sp, #-8]!
     9ec:	str	lr, [sp, #4]
     9f0:	add	fp, sp, #4
     9f4:	sub	sp, sp, #16
     9f8:	str	r0, [fp, #-16]
     9fc:	ldr	r3, [pc, #224]	; ae4 <coda_cdf_cursor_goto_next_array_element+0xfc>
     a00:	ldr	r3, [pc, r3]
     a04:	mrc	15, 0, r2, cr13, cr0, {3}
     a08:	ldr	r3, [r2, r3]
     a0c:	cmp	r3, #0
     a10:	beq	a9c <coda_cdf_cursor_goto_next_array_element+0xb4>
     a14:	ldr	r3, [fp, #-16]
     a18:	ldr	r3, [r3, #4]
     a1c:	sub	r3, r3, #1
     a20:	ldr	r2, [fp, #-16]
     a24:	lsl	r3, r3, #4
     a28:	add	r3, r2, r3
     a2c:	ldr	r3, [r3, #12]
     a30:	add	r3, r3, #1
     a34:	str	r3, [fp, #-8]
     a38:	ldr	r3, [fp, #-16]
     a3c:	ldr	r3, [r3, #4]
     a40:	sub	r3, r3, #2
     a44:	ldr	r2, [fp, #-16]
     a48:	lsl	r3, r3, #4
     a4c:	add	r3, r2, r3
     a50:	ldr	r3, [r3, #8]
     a54:	ldr	r3, [r3, #4]
     a58:	ldr	r3, [r3, #44]	; 0x2c
     a5c:	str	r3, [fp, #-12]
     a60:	ldr	r3, [fp, #-8]
     a64:	cmp	r3, #0
     a68:	blt	a7c <coda_cdf_cursor_goto_next_array_element+0x94>
     a6c:	ldr	r2, [fp, #-8]
     a70:	ldr	r3, [fp, #-12]
     a74:	cmp	r2, r3
     a78:	blt	a9c <coda_cdf_cursor_goto_next_array_element+0xb4>
     a7c:	ldr	r3, [fp, #-12]
     a80:	ldr	r2, [fp, #-8]
     a84:	movw	r1, #0
     a88:	movt	r1, #0
     a8c:	mvn	r0, #106	; 0x6a
     a90:	bl	0 <coda_set_error>
     a94:	mvn	r3, #0
     a98:	b	ad0 <coda_cdf_cursor_goto_next_array_element+0xe8>
     a9c:	ldr	r3, [fp, #-16]
     aa0:	ldr	r3, [r3, #4]
     aa4:	sub	r2, r3, #1
     aa8:	ldr	r1, [fp, #-16]
     aac:	lsl	r3, r2, #4
     ab0:	add	r3, r1, r3
     ab4:	ldr	r3, [r3, #12]
     ab8:	add	r1, r3, #1
     abc:	ldr	r0, [fp, #-16]
     ac0:	lsl	r3, r2, #4
     ac4:	add	r3, r0, r3
     ac8:	str	r1, [r3, #12]
     acc:	mov	r3, #0
     ad0:	mov	r0, r3
     ad4:	sub	sp, fp, #4
     ad8:	ldr	fp, [sp]
     adc:	add	sp, sp, #4
     ae0:	pop	{pc}		; (ldr pc, [sp], #4)
     ae4:	.word	0x000000dc

00000ae8 <coda_cdf_cursor_goto_attributes>:
     ae8:	str	r4, [sp, #-12]!
     aec:	str	fp, [sp, #4]
     af0:	str	lr, [sp, #8]
     af4:	add	fp, sp, #8
     af8:	sub	sp, sp, #20
     afc:	str	r0, [fp, #-24]	; 0xffffffe8
     b00:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b04:	ldr	r3, [r3, #4]
     b08:	sub	r3, r3, #1
     b0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b10:	lsl	r3, r3, #4
     b14:	add	r3, r2, r3
     b18:	ldr	r3, [r3, #8]
     b1c:	str	r3, [fp, #-16]
     b20:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b24:	ldr	r3, [r3, #4]
     b28:	add	r2, r3, #1
     b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b30:	str	r2, [r3, #4]
     b34:	ldr	r3, [fp, #-16]
     b38:	ldr	r3, [r3, #8]
     b3c:	cmp	r3, #2
     b40:	bne	b7c <coda_cdf_cursor_goto_attributes+0x94>
     b44:	ldr	r3, [fp, #-16]
     b48:	ldr	r3, [r3, #12]
     b4c:	cmp	r3, #0
     b50:	beq	b7c <coda_cdf_cursor_goto_attributes+0x94>
     b54:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b58:	ldr	r3, [r3, #4]
     b5c:	sub	r3, r3, #1
     b60:	ldr	r2, [fp, #-16]
     b64:	ldr	r2, [r2, #12]
     b68:	ldr	r1, [fp, #-24]	; 0xffffffe8
     b6c:	lsl	r3, r3, #4
     b70:	add	r3, r1, r3
     b74:	str	r2, [r3, #8]
     b78:	b	ba4 <coda_cdf_cursor_goto_attributes+0xbc>
     b7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b80:	ldr	r3, [r3, #4]
     b84:	sub	r4, r3, #1
     b88:	mov	r0, #5
     b8c:	bl	0 <coda_mem_empty_record>
     b90:	mov	r1, r0
     b94:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b98:	lsl	r3, r4, #4
     b9c:	add	r3, r2, r3
     ba0:	str	r1, [r3, #8]
     ba4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ba8:	ldr	r3, [r3, #4]
     bac:	sub	r3, r3, #1
     bb0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     bb4:	lsl	r3, r3, #4
     bb8:	add	r3, r2, r3
     bbc:	mvn	r2, #0
     bc0:	str	r2, [r3, #12]
     bc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     bc8:	ldr	r3, [r3, #4]
     bcc:	sub	r3, r3, #1
     bd0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     bd4:	add	r3, r3, #1
     bd8:	lsl	r3, r3, #4
     bdc:	add	r1, r2, r3
     be0:	mvn	r2, #0
     be4:	mvn	r3, #0
     be8:	strd	r2, [r1]
     bec:	mov	r3, #0
     bf0:	mov	r0, r3
     bf4:	sub	sp, fp, #8
     bf8:	ldr	r4, [sp]
     bfc:	ldr	fp, [sp, #4]
     c00:	add	sp, sp, #8
     c04:	pop	{pc}		; (ldr pc, [sp], #4)

00000c08 <coda_cdf_cursor_use_base_type_of_special_type>:
     c08:	push	{fp}		; (str fp, [sp, #-4]!)
     c0c:	add	fp, sp, #0
     c10:	sub	sp, sp, #12
     c14:	str	r0, [fp, #-8]
     c18:	ldr	r3, [fp, #-8]
     c1c:	ldr	r3, [r3, #4]
     c20:	sub	r3, r3, #1
     c24:	ldr	r2, [fp, #-8]
     c28:	lsl	r3, r3, #4
     c2c:	add	r3, r2, r3
     c30:	ldr	r2, [r3, #8]
     c34:	ldr	r3, [fp, #-8]
     c38:	ldr	r3, [r3, #4]
     c3c:	sub	r3, r3, #1
     c40:	ldr	r2, [r2, #12]
     c44:	ldr	r1, [fp, #-8]
     c48:	lsl	r3, r3, #4
     c4c:	add	r3, r1, r3
     c50:	str	r2, [r3, #8]
     c54:	mov	r3, #0
     c58:	mov	r0, r3
     c5c:	add	sp, fp, #0
     c60:	pop	{fp}		; (ldr fp, [sp], #4)
     c64:	bx	lr

00000c68 <coda_cdf_cursor_get_num_elements>:
     c68:	push	{fp}		; (str fp, [sp, #-4]!)
     c6c:	add	fp, sp, #0
     c70:	sub	sp, sp, #12
     c74:	str	r0, [fp, #-8]
     c78:	str	r1, [fp, #-12]
     c7c:	ldr	r3, [fp, #-8]
     c80:	ldr	r3, [r3, #4]
     c84:	sub	r3, r3, #1
     c88:	ldr	r2, [fp, #-8]
     c8c:	lsl	r3, r3, #4
     c90:	add	r3, r2, r3
     c94:	ldr	r3, [r3, #8]
     c98:	ldr	r3, [r3, #4]
     c9c:	ldr	r3, [r3, #8]
     ca0:	cmp	r3, #1
     ca4:	bne	cd8 <coda_cdf_cursor_get_num_elements+0x70>
     ca8:	ldr	r3, [fp, #-8]
     cac:	ldr	r3, [r3, #4]
     cb0:	sub	r3, r3, #1
     cb4:	ldr	r2, [fp, #-8]
     cb8:	lsl	r3, r3, #4
     cbc:	add	r3, r2, r3
     cc0:	ldr	r3, [r3, #8]
     cc4:	ldr	r3, [r3, #4]
     cc8:	ldr	r2, [r3, #44]	; 0x2c
     ccc:	ldr	r3, [fp, #-12]
     cd0:	str	r2, [r3]
     cd4:	b	ce4 <coda_cdf_cursor_get_num_elements+0x7c>
     cd8:	ldr	r3, [fp, #-12]
     cdc:	mov	r2, #1
     ce0:	str	r2, [r3]
     ce4:	mov	r3, #0
     ce8:	mov	r0, r3
     cec:	add	sp, fp, #0
     cf0:	pop	{fp}		; (ldr fp, [sp], #4)
     cf4:	bx	lr

00000cf8 <coda_cdf_cursor_get_string_length>:
     cf8:	str	fp, [sp, #-8]!
     cfc:	str	lr, [sp, #4]
     d00:	add	fp, sp, #4
     d04:	sub	sp, sp, #8
     d08:	str	r0, [fp, #-8]
     d0c:	str	r1, [fp, #-12]
     d10:	ldr	r3, [fp, #-8]
     d14:	ldr	r3, [r3, #4]
     d18:	sub	r3, r3, #1
     d1c:	ldr	r2, [fp, #-8]
     d20:	lsl	r3, r3, #4
     d24:	add	r3, r2, r3
     d28:	ldr	r3, [r3, #8]
     d2c:	ldr	r3, [r3, #4]
     d30:	ldr	r1, [fp, #-12]
     d34:	mov	r0, r3
     d38:	bl	0 <coda_type_get_string_length>
     d3c:	mov	r3, r0
     d40:	mov	r0, r3
     d44:	sub	sp, fp, #4
     d48:	ldr	fp, [sp]
     d4c:	add	sp, sp, #4
     d50:	pop	{pc}		; (ldr pc, [sp], #4)

00000d54 <coda_cdf_cursor_get_array_dim>:
     d54:	str	fp, [sp, #-8]!
     d58:	str	lr, [sp, #4]
     d5c:	add	fp, sp, #4
     d60:	sub	sp, sp, #16
     d64:	str	r0, [fp, #-8]
     d68:	str	r1, [fp, #-12]
     d6c:	str	r2, [fp, #-16]
     d70:	ldr	r3, [fp, #-8]
     d74:	ldr	r3, [r3, #4]
     d78:	sub	r3, r3, #1
     d7c:	ldr	r2, [fp, #-8]
     d80:	lsl	r3, r3, #4
     d84:	add	r3, r2, r3
     d88:	ldr	r3, [r3, #8]
     d8c:	ldr	r3, [r3, #4]
     d90:	ldr	r2, [fp, #-16]
     d94:	ldr	r1, [fp, #-12]
     d98:	mov	r0, r3
     d9c:	bl	0 <coda_type_get_array_dim>
     da0:	mov	r3, r0
     da4:	mov	r0, r3
     da8:	sub	sp, fp, #4
     dac:	ldr	fp, [sp]
     db0:	add	sp, sp, #4
     db4:	pop	{pc}		; (ldr pc, [sp], #4)

00000db8 <read_array>:
     db8:	str	r4, [sp, #-12]!
     dbc:	str	fp, [sp, #4]
     dc0:	str	lr, [sp, #8]
     dc4:	add	fp, sp, #8
     dc8:	sub	sp, sp, #52	; 0x34
     dcc:	str	r0, [fp, #-40]	; 0xffffffd8
     dd0:	str	r1, [fp, #-44]	; 0xffffffd4
     dd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     dd8:	ldr	r3, [r3, #4]
     ddc:	sub	r3, r3, #1
     de0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     de4:	lsl	r3, r3, #4
     de8:	add	r3, r2, r3
     dec:	ldr	r3, [r3, #8]
     df0:	str	r3, [fp, #-24]	; 0xffffffe8
     df4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     df8:	ldr	r3, [r3, #24]
     dfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e00:	ldr	r2, [r2, #28]
     e04:	mul	r3, r2, r3
     e08:	str	r3, [fp, #-28]	; 0xffffffe4
     e0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e10:	ldr	r3, [r3, #8]
     e14:	cmp	r3, #2
     e18:	beq	e3c <read_array+0x84>
     e1c:	movw	r3, #0
     e20:	movt	r3, #0
     e24:	mov	r2, #215	; 0xd7
     e28:	movw	r1, #0
     e2c:	movt	r1, #0
     e30:	movw	r0, #0
     e34:	movt	r0, #0
     e38:	bl	0 <__assert_fail>
     e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e40:	ldr	r3, [r3, #16]
     e44:	cmp	r3, #0
     e48:	bne	e60 <read_array+0xa8>
     e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e50:	ldr	r3, [r3, #4]
     e54:	ldr	r3, [r3, #8]
     e58:	str	r3, [fp, #-16]
     e5c:	b	e74 <read_array+0xbc>
     e60:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e64:	ldr	r3, [r3, #16]
     e68:	ldr	r3, [r3, #4]
     e6c:	ldr	r3, [r3, #8]
     e70:	str	r3, [fp, #-16]
     e74:	mov	r3, #0
     e78:	str	r3, [fp, #-20]	; 0xffffffec
     e7c:	b	f9c <read_array+0x1e4>
     e80:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e84:	ldr	r2, [r3, #36]	; 0x24
     e88:	ldr	r3, [fp, #-20]	; 0xffffffec
     e8c:	lsl	r3, r3, #3
     e90:	add	r3, r2, r3
     e94:	ldrd	r2, [r3]
     e98:	cmp	r2, #0
     e9c:	sbcs	r3, r3, #0
     ea0:	bge	ebc <read_array+0x104>
     ea4:	movw	r1, #0
     ea8:	movt	r1, #0
     eac:	mvn	r0, #199	; 0xc7
     eb0:	bl	0 <coda_set_error>
     eb4:	mvn	r3, #0
     eb8:	b	1140 <read_array+0x388>
     ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ec0:	ldr	r3, [r3, #40]	; 0x28
     ec4:	cmp	r3, #0
     ec8:	beq	f1c <read_array+0x164>
     ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
     ed0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     ed4:	mul	r3, r2, r3
     ed8:	mov	r2, r3
     edc:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ee0:	add	r0, r3, r2
     ee4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ee8:	ldr	r1, [r3, #40]	; 0x28
     eec:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ef0:	ldr	r2, [r3, #36]	; 0x24
     ef4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ef8:	lsl	r3, r3, #3
     efc:	add	r3, r2, r3
     f00:	ldrd	r2, [r3]
     f04:	mov	r3, r2
     f08:	add	r3, r1, r3
     f0c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     f10:	mov	r1, r3
     f14:	bl	0 <memcpy>
     f18:	b	f90 <read_array+0x1d8>
     f1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f20:	ldr	r3, [r3]
     f24:	ldr	r4, [r3, #52]	; 0x34
     f28:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f2c:	ldr	r2, [r3, #36]	; 0x24
     f30:	ldr	r3, [fp, #-20]	; 0xffffffec
     f34:	lsl	r3, r3, #3
     f38:	add	r3, r2, r3
     f3c:	ldrd	r0, [r3]
     f40:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f44:	mov	r2, r3
     f48:	asr	r3, r2, #31
     f4c:	ldr	ip, [fp, #-20]	; 0xffffffec
     f50:	ldr	lr, [fp, #-28]	; 0xffffffe4
     f54:	mul	ip, lr, ip
     f58:	mov	lr, ip
     f5c:	ldr	ip, [fp, #-44]	; 0xffffffd4
     f60:	add	ip, ip, lr
     f64:	str	ip, [sp, #8]
     f68:	strd	r2, [sp]
     f6c:	mov	r2, r0
     f70:	mov	r3, r1
     f74:	mov	r0, r4
     f78:	bl	0 <read_bytes>
     f7c:	mov	r3, r0
     f80:	cmp	r3, #0
     f84:	beq	f90 <read_array+0x1d8>
     f88:	mvn	r3, #0
     f8c:	b	1140 <read_array+0x388>
     f90:	ldr	r3, [fp, #-20]	; 0xffffffec
     f94:	add	r3, r3, #1
     f98:	str	r3, [fp, #-20]	; 0xffffffec
     f9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fa0:	ldr	r3, [r3, #20]
     fa4:	ldr	r2, [fp, #-20]	; 0xffffffec
     fa8:	cmp	r2, r3
     fac:	blt	e80 <read_array+0xc8>
     fb0:	ldr	r3, [fp, #-16]
     fb4:	cmp	r3, #4
     fb8:	beq	1130 <read_array+0x378>
     fbc:	mov	r3, #1
     fc0:	str	r3, [fp, #-32]	; 0xffffffe0
     fc4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     fc8:	ldr	r3, [r3]
     fcc:	ldr	r3, [r3, #68]	; 0x44
     fd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
     fd4:	cmp	r2, r3
     fd8:	beq	1130 <read_array+0x378>
     fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fe0:	ldr	r3, [r3, #28]
     fe4:	sub	r3, r3, #1
     fe8:	cmp	r3, #7
     fec:	ldrls	pc, [pc, r3, lsl #2]
     ff0:	b	1110 <read_array+0x358>
     ff4:	.word	0x00001138
     ff8:	.word	0x00001014
     ffc:	.word	0x00001110
    1000:	.word	0x00001068
    1004:	.word	0x00001110
    1008:	.word	0x00001110
    100c:	.word	0x00001110
    1010:	.word	0x000010bc
    1014:	mov	r3, #0
    1018:	str	r3, [fp, #-20]	; 0xffffffec
    101c:	b	1044 <read_array+0x28c>
    1020:	ldr	r3, [fp, #-20]	; 0xffffffec
    1024:	lsl	r3, r3, #1
    1028:	ldr	r2, [fp, #-44]	; 0xffffffd4
    102c:	add	r3, r2, r3
    1030:	mov	r0, r3
    1034:	bl	204 <swap2>
    1038:	ldr	r3, [fp, #-20]	; 0xffffffec
    103c:	add	r3, r3, #1
    1040:	str	r3, [fp, #-20]	; 0xffffffec
    1044:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1048:	ldr	r3, [r3, #20]
    104c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1050:	ldr	r2, [r2, #24]
    1054:	mul	r3, r2, r3
    1058:	ldr	r2, [fp, #-20]	; 0xffffffec
    105c:	cmp	r2, r3
    1060:	blt	1020 <read_array+0x268>
    1064:	b	113c <read_array+0x384>
    1068:	mov	r3, #0
    106c:	str	r3, [fp, #-20]	; 0xffffffec
    1070:	b	1098 <read_array+0x2e0>
    1074:	ldr	r3, [fp, #-20]	; 0xffffffec
    1078:	lsl	r3, r3, #2
    107c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1080:	add	r3, r2, r3
    1084:	mov	r0, r3
    1088:	bl	29c <swap4>
    108c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1090:	add	r3, r3, #1
    1094:	str	r3, [fp, #-20]	; 0xffffffec
    1098:	ldr	r3, [fp, #-24]	; 0xffffffe8
    109c:	ldr	r3, [r3, #20]
    10a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    10a4:	ldr	r2, [r2, #24]
    10a8:	mul	r3, r2, r3
    10ac:	ldr	r2, [fp, #-20]	; 0xffffffec
    10b0:	cmp	r2, r3
    10b4:	blt	1074 <read_array+0x2bc>
    10b8:	b	113c <read_array+0x384>
    10bc:	mov	r3, #0
    10c0:	str	r3, [fp, #-20]	; 0xffffffec
    10c4:	b	10ec <read_array+0x334>
    10c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    10cc:	lsl	r3, r3, #3
    10d0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    10d4:	add	r3, r2, r3
    10d8:	mov	r0, r3
    10dc:	bl	3b8 <swap8>
    10e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    10e4:	add	r3, r3, #1
    10e8:	str	r3, [fp, #-20]	; 0xffffffec
    10ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10f0:	ldr	r3, [r3, #20]
    10f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    10f8:	ldr	r2, [r2, #24]
    10fc:	mul	r3, r2, r3
    1100:	ldr	r2, [fp, #-20]	; 0xffffffec
    1104:	cmp	r2, r3
    1108:	blt	10c8 <read_array+0x310>
    110c:	b	113c <read_array+0x384>
    1110:	movw	r3, #0
    1114:	movt	r3, #0
    1118:	movw	r2, #278	; 0x116
    111c:	movw	r1, #0
    1120:	movt	r1, #0
    1124:	movw	r0, #0
    1128:	movt	r0, #0
    112c:	bl	0 <__assert_fail>
    1130:	nop	{0}
    1134:	b	113c <read_array+0x384>
    1138:	nop	{0}
    113c:	mov	r3, #0
    1140:	mov	r0, r3
    1144:	sub	sp, fp, #8
    1148:	ldr	r4, [sp]
    114c:	ldr	fp, [sp, #4]
    1150:	add	sp, sp, #8
    1154:	pop	{pc}		; (ldr pc, [sp], #4)

00001158 <read_partial_array>:
    1158:	strd	r4, [sp, #-32]!	; 0xffffffe0
    115c:	strd	r6, [sp, #8]
    1160:	strd	r8, [sp, #16]
    1164:	str	fp, [sp, #24]
    1168:	str	lr, [sp, #28]
    116c:	add	fp, sp, #28
    1170:	sub	sp, sp, #96	; 0x60
    1174:	str	r0, [fp, #-96]	; 0xffffffa0
    1178:	str	r1, [fp, #-100]	; 0xffffff9c
    117c:	str	r2, [fp, #-104]	; 0xffffff98
    1180:	str	r3, [fp, #-108]	; 0xffffff94
    1184:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1188:	ldr	r3, [r3, #4]
    118c:	sub	r3, r3, #1
    1190:	ldr	r2, [fp, #-96]	; 0xffffffa0
    1194:	lsl	r3, r3, #4
    1198:	add	r3, r2, r3
    119c:	ldr	r3, [r3, #8]
    11a0:	str	r3, [fp, #-72]	; 0xffffffb8
    11a4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    11a8:	ldr	r3, [r3, #24]
    11ac:	ldr	r2, [fp, #-72]	; 0xffffffb8
    11b0:	ldr	r2, [r2, #28]
    11b4:	mul	r3, r2, r3
    11b8:	str	r3, [fp, #-76]	; 0xffffffb4
    11bc:	ldr	r3, [fp, #-72]	; 0xffffffb8
    11c0:	ldr	r3, [r3, #8]
    11c4:	cmp	r3, #2
    11c8:	beq	11ec <read_partial_array+0x94>
    11cc:	movw	r3, #0
    11d0:	movt	r3, #0
    11d4:	mov	r2, #296	; 0x128
    11d8:	movw	r1, #0
    11dc:	movt	r1, #0
    11e0:	movw	r0, #0
    11e4:	movt	r0, #0
    11e8:	bl	0 <__assert_fail>
    11ec:	ldr	r3, [fp, #-72]	; 0xffffffb8
    11f0:	ldr	r3, [r3, #16]
    11f4:	cmp	r3, #0
    11f8:	bne	1210 <read_partial_array+0xb8>
    11fc:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1200:	ldr	r3, [r3, #4]
    1204:	ldr	r3, [r3, #8]
    1208:	str	r3, [fp, #-32]	; 0xffffffe0
    120c:	b	1224 <read_partial_array+0xcc>
    1210:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1214:	ldr	r3, [r3, #16]
    1218:	ldr	r3, [r3, #4]
    121c:	ldr	r3, [r3, #8]
    1220:	str	r3, [fp, #-32]	; 0xffffffe0
    1224:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1228:	ldr	r3, [r3, #24]
    122c:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1230:	sdiv	r3, r2, r3
    1234:	str	r3, [fp, #-80]	; 0xffffffb0
    1238:	ldr	r2, [fp, #-100]	; 0xffffff9c
    123c:	ldr	r3, [fp, #-104]	; 0xffffff98
    1240:	add	r2, r2, r3
    1244:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1248:	ldr	r3, [r3, #24]
    124c:	sdiv	r3, r2, r3
    1250:	str	r3, [fp, #-84]	; 0xffffffac
    1254:	mov	r2, #0
    1258:	mov	r3, #0
    125c:	strd	r2, [fp, #-44]	; 0xffffffd4
    1260:	ldr	r3, [fp, #-80]	; 0xffffffb0
    1264:	str	r3, [fp, #-48]	; 0xffffffd0
    1268:	b	1468 <read_partial_array+0x310>
    126c:	mov	r2, #0
    1270:	mov	r3, #0
    1274:	strd	r2, [fp, #-60]	; 0xffffffc4
    1278:	ldr	r3, [fp, #-76]	; 0xffffffb4
    127c:	mov	r2, r3
    1280:	asr	r3, r2, #31
    1284:	strd	r2, [fp, #-68]	; 0xffffffbc
    1288:	ldr	r3, [fp, #-72]	; 0xffffffb8
    128c:	ldr	r2, [r3, #36]	; 0x24
    1290:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1294:	lsl	r3, r3, #3
    1298:	add	r3, r2, r3
    129c:	ldrd	r2, [r3]
    12a0:	cmp	r2, #0
    12a4:	sbcs	r3, r3, #0
    12a8:	bge	12c4 <read_partial_array+0x16c>
    12ac:	movw	r1, #0
    12b0:	movt	r1, #0
    12b4:	mvn	r0, #199	; 0xc7
    12b8:	bl	0 <coda_set_error>
    12bc:	mvn	r3, #0
    12c0:	b	15d8 <read_partial_array+0x480>
    12c4:	ldr	r2, [fp, #-100]	; 0xffffff9c
    12c8:	ldr	r3, [fp, #-104]	; 0xffffff98
    12cc:	add	r2, r2, r3
    12d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12d4:	add	r3, r3, #1
    12d8:	ldr	r1, [fp, #-72]	; 0xffffffb8
    12dc:	ldr	r1, [r1, #24]
    12e0:	mul	r3, r1, r3
    12e4:	cmp	r2, r3
    12e8:	bge	1324 <read_partial_array+0x1cc>
    12ec:	ldr	r2, [fp, #-100]	; 0xffffff9c
    12f0:	ldr	r3, [fp, #-104]	; 0xffffff98
    12f4:	add	r2, r2, r3
    12f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    12fc:	ldr	r3, [r3, #24]
    1300:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1304:	mul	r3, r1, r3
    1308:	sub	r3, r2, r3
    130c:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1310:	ldr	r2, [r2, #28]
    1314:	mul	r3, r2, r3
    1318:	mov	r2, r3
    131c:	asr	r3, r2, #31
    1320:	strd	r2, [fp, #-68]	; 0xffffffbc
    1324:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1328:	ldr	r3, [r3, #24]
    132c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1330:	mul	r3, r2, r3
    1334:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1338:	cmp	r2, r3
    133c:	ble	1384 <read_partial_array+0x22c>
    1340:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1344:	ldr	r3, [r3, #24]
    1348:	ldr	r2, [fp, #-48]	; 0xffffffd0
    134c:	mul	r3, r2, r3
    1350:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1354:	sub	r3, r2, r3
    1358:	ldr	r2, [fp, #-72]	; 0xffffffb8
    135c:	ldr	r2, [r2, #28]
    1360:	mul	r3, r2, r3
    1364:	mov	r2, r3
    1368:	asr	r3, r2, #31
    136c:	strd	r2, [fp, #-60]	; 0xffffffc4
    1370:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    1374:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1378:	subs	r4, r0, r2
    137c:	sbc	r5, r1, r3
    1380:	strd	r4, [fp, #-68]	; 0xffffffbc
    1384:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1388:	ldr	r3, [r3, #40]	; 0x28
    138c:	cmp	r3, #0
    1390:	beq	13dc <read_partial_array+0x284>
    1394:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1398:	ldr	r2, [fp, #-108]	; 0xffffff94
    139c:	add	r0, r2, r3
    13a0:	ldr	r3, [fp, #-72]	; 0xffffffb8
    13a4:	ldr	r1, [r3, #40]	; 0x28
    13a8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    13ac:	ldr	r2, [r3, #36]	; 0x24
    13b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    13b4:	lsl	r3, r3, #3
    13b8:	add	r3, r2, r3
    13bc:	ldrd	r2, [r3]
    13c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    13c4:	add	r3, r2, r3
    13c8:	add	r3, r1, r3
    13cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
    13d0:	mov	r1, r3
    13d4:	bl	0 <memcpy>
    13d8:	b	1448 <read_partial_array+0x2f0>
    13dc:	ldr	r3, [fp, #-96]	; 0xffffffa0
    13e0:	ldr	r3, [r3]
    13e4:	ldr	ip, [r3, #52]	; 0x34
    13e8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    13ec:	ldr	r2, [r3, #36]	; 0x24
    13f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    13f4:	lsl	r3, r3, #3
    13f8:	add	r3, r2, r3
    13fc:	ldrd	r0, [r3]
    1400:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1404:	adds	r8, r0, r2
    1408:	adc	r9, r1, r3
    140c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1410:	ldr	r2, [fp, #-108]	; 0xffffff94
    1414:	add	r3, r2, r3
    1418:	str	r3, [sp, #8]
    141c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    1420:	strd	r2, [sp]
    1424:	mov	r2, r8
    1428:	mov	r3, r9
    142c:	mov	r0, ip
    1430:	bl	0 <read_bytes>
    1434:	mov	r3, r0
    1438:	cmp	r3, #0
    143c:	beq	1448 <read_partial_array+0x2f0>
    1440:	mvn	r3, #0
    1444:	b	15d8 <read_partial_array+0x480>
    1448:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    144c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    1450:	adds	r6, r0, r2
    1454:	adc	r7, r1, r3
    1458:	strd	r6, [fp, #-44]	; 0xffffffd4
    145c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1460:	add	r3, r3, #1
    1464:	str	r3, [fp, #-48]	; 0xffffffd0
    1468:	ldr	r2, [fp, #-48]	; 0xffffffd0
    146c:	ldr	r3, [fp, #-84]	; 0xffffffac
    1470:	cmp	r2, r3
    1474:	ble	126c <read_partial_array+0x114>
    1478:	ldr	r3, [fp, #-32]	; 0xffffffe0
    147c:	cmp	r3, #4
    1480:	beq	15c8 <read_partial_array+0x470>
    1484:	mov	r3, #1
    1488:	str	r3, [fp, #-88]	; 0xffffffa8
    148c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1490:	ldr	r3, [r3]
    1494:	ldr	r3, [r3, #68]	; 0x44
    1498:	ldr	r2, [fp, #-88]	; 0xffffffa8
    149c:	cmp	r2, r3
    14a0:	beq	15c8 <read_partial_array+0x470>
    14a4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    14a8:	ldr	r3, [r3, #28]
    14ac:	sub	r3, r3, #1
    14b0:	cmp	r3, #7
    14b4:	ldrls	pc, [pc, r3, lsl #2]
    14b8:	b	15a8 <read_partial_array+0x450>
    14bc:	.word	0x000015d0
    14c0:	.word	0x000014dc
    14c4:	.word	0x000015a8
    14c8:	.word	0x00001520
    14cc:	.word	0x000015a8
    14d0:	.word	0x000015a8
    14d4:	.word	0x000015a8
    14d8:	.word	0x00001564
    14dc:	mov	r3, #0
    14e0:	str	r3, [fp, #-48]	; 0xffffffd0
    14e4:	b	150c <read_partial_array+0x3b4>
    14e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    14ec:	lsl	r3, r3, #1
    14f0:	ldr	r2, [fp, #-108]	; 0xffffff94
    14f4:	add	r3, r2, r3
    14f8:	mov	r0, r3
    14fc:	bl	204 <swap2>
    1500:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1504:	add	r3, r3, #1
    1508:	str	r3, [fp, #-48]	; 0xffffffd0
    150c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1510:	ldr	r3, [fp, #-104]	; 0xffffff98
    1514:	cmp	r2, r3
    1518:	blt	14e8 <read_partial_array+0x390>
    151c:	b	15d4 <read_partial_array+0x47c>
    1520:	mov	r3, #0
    1524:	str	r3, [fp, #-48]	; 0xffffffd0
    1528:	b	1550 <read_partial_array+0x3f8>
    152c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1530:	lsl	r3, r3, #2
    1534:	ldr	r2, [fp, #-108]	; 0xffffff94
    1538:	add	r3, r2, r3
    153c:	mov	r0, r3
    1540:	bl	29c <swap4>
    1544:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1548:	add	r3, r3, #1
    154c:	str	r3, [fp, #-48]	; 0xffffffd0
    1550:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1554:	ldr	r3, [fp, #-104]	; 0xffffff98
    1558:	cmp	r2, r3
    155c:	blt	152c <read_partial_array+0x3d4>
    1560:	b	15d4 <read_partial_array+0x47c>
    1564:	mov	r3, #0
    1568:	str	r3, [fp, #-48]	; 0xffffffd0
    156c:	b	1594 <read_partial_array+0x43c>
    1570:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1574:	lsl	r3, r3, #3
    1578:	ldr	r2, [fp, #-108]	; 0xffffff94
    157c:	add	r3, r2, r3
    1580:	mov	r0, r3
    1584:	bl	3b8 <swap8>
    1588:	ldr	r3, [fp, #-48]	; 0xffffffd0
    158c:	add	r3, r3, #1
    1590:	str	r3, [fp, #-48]	; 0xffffffd0
    1594:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1598:	ldr	r3, [fp, #-104]	; 0xffffff98
    159c:	cmp	r2, r3
    15a0:	blt	1570 <read_partial_array+0x418>
    15a4:	b	15d4 <read_partial_array+0x47c>
    15a8:	movw	r3, #0
    15ac:	movt	r3, #0
    15b0:	movw	r2, #379	; 0x17b
    15b4:	movw	r1, #0
    15b8:	movt	r1, #0
    15bc:	movw	r0, #0
    15c0:	movt	r0, #0
    15c4:	bl	0 <__assert_fail>
    15c8:	nop	{0}
    15cc:	b	15d4 <read_partial_array+0x47c>
    15d0:	nop	{0}
    15d4:	mov	r3, #0
    15d8:	mov	r0, r3
    15dc:	sub	sp, fp, #28
    15e0:	ldrd	r4, [sp]
    15e4:	ldrd	r6, [sp, #8]
    15e8:	ldrd	r8, [sp, #16]
    15ec:	ldr	fp, [sp, #24]
    15f0:	add	sp, sp, #28
    15f4:	pop	{pc}		; (ldr pc, [sp], #4)

000015f8 <read_basic_type>:
    15f8:	strd	r4, [sp, #-16]!
    15fc:	str	fp, [sp, #8]
    1600:	str	lr, [sp, #12]
    1604:	add	fp, sp, #12
    1608:	sub	sp, sp, #72	; 0x48
    160c:	str	r0, [fp, #-56]	; 0xffffffc8
    1610:	str	r1, [fp, #-60]	; 0xffffffc4
    1614:	str	r2, [fp, #-64]	; 0xffffffc0
    1618:	ldr	r3, [fp, #-56]	; 0xffffffc8
    161c:	ldr	r3, [r3, #4]
    1620:	sub	r3, r3, #1
    1624:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1628:	lsl	r3, r3, #4
    162c:	add	r3, r2, r3
    1630:	ldr	r3, [r3, #8]
    1634:	str	r3, [fp, #-16]
    1638:	mov	r3, #0
    163c:	str	r3, [fp, #-24]	; 0xffffffe8
    1640:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1644:	ldr	r3, [r3, #4]
    1648:	sub	r3, r3, #1
    164c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1650:	lsl	r3, r3, #4
    1654:	add	r3, r2, r3
    1658:	ldr	r3, [r3, #8]
    165c:	ldr	r3, [r3, #8]
    1660:	cmp	r3, #0
    1664:	bne	16a8 <read_basic_type+0xb0>
    1668:	ldr	r3, [fp, #-56]	; 0xffffffc8
    166c:	ldr	r3, [r3, #4]
    1670:	sub	r3, r3, #2
    1674:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1678:	lsl	r3, r3, #4
    167c:	add	r3, r2, r3
    1680:	ldr	r3, [r3, #8]
    1684:	str	r3, [fp, #-16]
    1688:	ldr	r3, [fp, #-56]	; 0xffffffc8
    168c:	ldr	r3, [r3, #4]
    1690:	sub	r3, r3, #1
    1694:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1698:	lsl	r3, r3, #4
    169c:	add	r3, r2, r3
    16a0:	ldr	r3, [r3, #12]
    16a4:	str	r3, [fp, #-24]	; 0xffffffe8
    16a8:	ldr	r3, [fp, #-16]
    16ac:	ldr	r3, [r3, #8]
    16b0:	cmp	r3, #2
    16b4:	beq	16d8 <read_basic_type+0xe0>
    16b8:	movw	r3, #0
    16bc:	movt	r3, #0
    16c0:	movw	r2, #403	; 0x193
    16c4:	movw	r1, #0
    16c8:	movt	r1, #0
    16cc:	movw	r0, #0
    16d0:	movt	r0, #0
    16d4:	bl	0 <__assert_fail>
    16d8:	ldr	r3, [fp, #-16]
    16dc:	ldr	r3, [r3, #16]
    16e0:	cmp	r3, #0
    16e4:	bne	16fc <read_basic_type+0x104>
    16e8:	ldr	r3, [fp, #-16]
    16ec:	ldr	r3, [r3, #4]
    16f0:	ldr	r3, [r3, #8]
    16f4:	str	r3, [fp, #-20]	; 0xffffffec
    16f8:	b	1710 <read_basic_type+0x118>
    16fc:	ldr	r3, [fp, #-16]
    1700:	ldr	r3, [r3, #16]
    1704:	ldr	r3, [r3, #4]
    1708:	ldr	r3, [r3, #8]
    170c:	str	r3, [fp, #-20]	; 0xffffffec
    1710:	ldr	r3, [fp, #-16]
    1714:	ldr	r3, [r3, #24]
    1718:	ldr	r2, [fp, #-24]	; 0xffffffe8
    171c:	sdiv	r3, r2, r3
    1720:	str	r3, [fp, #-32]	; 0xffffffe0
    1724:	ldr	r3, [fp, #-16]
    1728:	ldr	r3, [r3, #24]
    172c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1730:	mul	r3, r2, r3
    1734:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1738:	sub	r3, r2, r3
    173c:	str	r3, [fp, #-36]	; 0xffffffdc
    1740:	ldr	r3, [fp, #-16]
    1744:	ldr	r3, [r3, #28]
    1748:	str	r3, [fp, #-28]	; 0xffffffe4
    174c:	ldr	r3, [fp, #-16]
    1750:	ldr	r2, [r3, #36]	; 0x24
    1754:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1758:	lsl	r3, r3, #3
    175c:	add	r3, r2, r3
    1760:	ldrd	r2, [r3]
    1764:	cmp	r2, #0
    1768:	sbcs	r3, r3, #0
    176c:	bge	1788 <read_basic_type+0x190>
    1770:	movw	r1, #0
    1774:	movt	r1, #0
    1778:	mvn	r0, #199	; 0xc7
    177c:	bl	0 <coda_set_error>
    1780:	mvn	r3, #0
    1784:	b	1914 <read_basic_type+0x31c>
    1788:	ldr	r3, [fp, #-16]
    178c:	ldr	r2, [r3, #36]	; 0x24
    1790:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1794:	lsl	r3, r3, #3
    1798:	add	r3, r2, r3
    179c:	ldrd	r0, [r3]
    17a0:	ldr	r3, [fp, #-16]
    17a4:	ldr	r3, [r3, #28]
    17a8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    17ac:	mul	r3, r2, r3
    17b0:	mov	r2, r3
    17b4:	asr	r3, r2, #31
    17b8:	adds	r4, r0, r2
    17bc:	adc	r5, r1, r3
    17c0:	strd	r4, [fp, #-44]	; 0xffffffd4
    17c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    17c8:	cmp	r3, #0
    17cc:	blt	17e8 <read_basic_type+0x1f0>
    17d0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    17d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    17d8:	cmp	r2, r3
    17dc:	bge	17e8 <read_basic_type+0x1f0>
    17e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    17e4:	str	r3, [fp, #-28]	; 0xffffffe4
    17e8:	ldr	r3, [fp, #-16]
    17ec:	ldr	r3, [r3, #40]	; 0x28
    17f0:	cmp	r3, #0
    17f4:	beq	181c <read_basic_type+0x224>
    17f8:	ldr	r3, [fp, #-16]
    17fc:	ldr	r2, [r3, #40]	; 0x28
    1800:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1804:	add	r3, r2, r3
    1808:	ldr	r2, [fp, #-28]	; 0xffffffe4
    180c:	mov	r1, r3
    1810:	ldr	r0, [fp, #-60]	; 0xffffffc4
    1814:	bl	0 <memcpy>
    1818:	b	185c <read_basic_type+0x264>
    181c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1820:	ldr	r3, [r3]
    1824:	ldr	r0, [r3, #52]	; 0x34
    1828:	ldr	r3, [fp, #-28]	; 0xffffffe4
    182c:	mov	r2, r3
    1830:	asr	r3, r2, #31
    1834:	ldr	r1, [fp, #-60]	; 0xffffffc4
    1838:	str	r1, [sp, #8]
    183c:	strd	r2, [sp]
    1840:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1844:	bl	0 <read_bytes>
    1848:	mov	r3, r0
    184c:	cmp	r3, #0
    1850:	beq	185c <read_basic_type+0x264>
    1854:	mvn	r3, #0
    1858:	b	1914 <read_basic_type+0x31c>
    185c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1860:	cmp	r3, #4
    1864:	beq	1904 <read_basic_type+0x30c>
    1868:	mov	r3, #0
    186c:	str	r3, [fp, #-48]	; 0xffffffd0
    1870:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1874:	ldr	r3, [r3]
    1878:	ldr	r3, [r3, #68]	; 0x44
    187c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1880:	cmp	r2, r3
    1884:	bne	1904 <read_basic_type+0x30c>
    1888:	ldr	r3, [fp, #-16]
    188c:	ldr	r3, [r3, #28]
    1890:	sub	r3, r3, #1
    1894:	cmp	r3, #7
    1898:	ldrls	pc, [pc, r3, lsl #2]
    189c:	b	18e4 <read_basic_type+0x2ec>
    18a0:	.word	0x0000190c
    18a4:	.word	0x000018c0
    18a8:	.word	0x000018e4
    18ac:	.word	0x000018cc
    18b0:	.word	0x000018e4
    18b4:	.word	0x000018e4
    18b8:	.word	0x000018e4
    18bc:	.word	0x000018d8
    18c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
    18c4:	bl	204 <swap2>
    18c8:	b	1910 <read_basic_type+0x318>
    18cc:	ldr	r0, [fp, #-60]	; 0xffffffc4
    18d0:	bl	29c <swap4>
    18d4:	b	1910 <read_basic_type+0x318>
    18d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
    18dc:	bl	3b8 <swap8>
    18e0:	b	1910 <read_basic_type+0x318>
    18e4:	movw	r3, #0
    18e8:	movt	r3, #0
    18ec:	movw	r2, #462	; 0x1ce
    18f0:	movw	r1, #0
    18f4:	movt	r1, #0
    18f8:	movw	r0, #0
    18fc:	movt	r0, #0
    1900:	bl	0 <__assert_fail>
    1904:	nop	{0}
    1908:	b	1910 <read_basic_type+0x318>
    190c:	nop	{0}
    1910:	mov	r3, #0
    1914:	mov	r0, r3
    1918:	sub	sp, fp, #12
    191c:	ldrd	r4, [sp]
    1920:	ldr	fp, [sp, #8]
    1924:	add	sp, sp, #12
    1928:	pop	{pc}		; (ldr pc, [sp], #4)

0000192c <coda_cdf_cursor_read_int8>:
    192c:	str	fp, [sp, #-8]!
    1930:	str	lr, [sp, #4]
    1934:	add	fp, sp, #4
    1938:	sub	sp, sp, #8
    193c:	str	r0, [fp, #-8]
    1940:	str	r1, [fp, #-12]
    1944:	mvn	r2, #0
    1948:	ldr	r1, [fp, #-12]
    194c:	ldr	r0, [fp, #-8]
    1950:	bl	15f8 <read_basic_type>
    1954:	mov	r3, r0
    1958:	mov	r0, r3
    195c:	sub	sp, fp, #4
    1960:	ldr	fp, [sp]
    1964:	add	sp, sp, #4
    1968:	pop	{pc}		; (ldr pc, [sp], #4)

0000196c <coda_cdf_cursor_read_uint8>:
    196c:	str	fp, [sp, #-8]!
    1970:	str	lr, [sp, #4]
    1974:	add	fp, sp, #4
    1978:	sub	sp, sp, #8
    197c:	str	r0, [fp, #-8]
    1980:	str	r1, [fp, #-12]
    1984:	mvn	r2, #0
    1988:	ldr	r1, [fp, #-12]
    198c:	ldr	r0, [fp, #-8]
    1990:	bl	15f8 <read_basic_type>
    1994:	mov	r3, r0
    1998:	mov	r0, r3
    199c:	sub	sp, fp, #4
    19a0:	ldr	fp, [sp]
    19a4:	add	sp, sp, #4
    19a8:	pop	{pc}		; (ldr pc, [sp], #4)

000019ac <coda_cdf_cursor_read_int16>:
    19ac:	str	fp, [sp, #-8]!
    19b0:	str	lr, [sp, #4]
    19b4:	add	fp, sp, #4
    19b8:	sub	sp, sp, #8
    19bc:	str	r0, [fp, #-8]
    19c0:	str	r1, [fp, #-12]
    19c4:	mvn	r2, #0
    19c8:	ldr	r1, [fp, #-12]
    19cc:	ldr	r0, [fp, #-8]
    19d0:	bl	15f8 <read_basic_type>
    19d4:	mov	r3, r0
    19d8:	mov	r0, r3
    19dc:	sub	sp, fp, #4
    19e0:	ldr	fp, [sp]
    19e4:	add	sp, sp, #4
    19e8:	pop	{pc}		; (ldr pc, [sp], #4)

000019ec <coda_cdf_cursor_read_uint16>:
    19ec:	str	fp, [sp, #-8]!
    19f0:	str	lr, [sp, #4]
    19f4:	add	fp, sp, #4
    19f8:	sub	sp, sp, #8
    19fc:	str	r0, [fp, #-8]
    1a00:	str	r1, [fp, #-12]
    1a04:	mvn	r2, #0
    1a08:	ldr	r1, [fp, #-12]
    1a0c:	ldr	r0, [fp, #-8]
    1a10:	bl	15f8 <read_basic_type>
    1a14:	mov	r3, r0
    1a18:	mov	r0, r3
    1a1c:	sub	sp, fp, #4
    1a20:	ldr	fp, [sp]
    1a24:	add	sp, sp, #4
    1a28:	pop	{pc}		; (ldr pc, [sp], #4)

00001a2c <coda_cdf_cursor_read_int32>:
    1a2c:	str	fp, [sp, #-8]!
    1a30:	str	lr, [sp, #4]
    1a34:	add	fp, sp, #4
    1a38:	sub	sp, sp, #8
    1a3c:	str	r0, [fp, #-8]
    1a40:	str	r1, [fp, #-12]
    1a44:	mvn	r2, #0
    1a48:	ldr	r1, [fp, #-12]
    1a4c:	ldr	r0, [fp, #-8]
    1a50:	bl	15f8 <read_basic_type>
    1a54:	mov	r3, r0
    1a58:	mov	r0, r3
    1a5c:	sub	sp, fp, #4
    1a60:	ldr	fp, [sp]
    1a64:	add	sp, sp, #4
    1a68:	pop	{pc}		; (ldr pc, [sp], #4)

00001a6c <coda_cdf_cursor_read_uint32>:
    1a6c:	str	fp, [sp, #-8]!
    1a70:	str	lr, [sp, #4]
    1a74:	add	fp, sp, #4
    1a78:	sub	sp, sp, #8
    1a7c:	str	r0, [fp, #-8]
    1a80:	str	r1, [fp, #-12]
    1a84:	mvn	r2, #0
    1a88:	ldr	r1, [fp, #-12]
    1a8c:	ldr	r0, [fp, #-8]
    1a90:	bl	15f8 <read_basic_type>
    1a94:	mov	r3, r0
    1a98:	mov	r0, r3
    1a9c:	sub	sp, fp, #4
    1aa0:	ldr	fp, [sp]
    1aa4:	add	sp, sp, #4
    1aa8:	pop	{pc}		; (ldr pc, [sp], #4)

00001aac <coda_cdf_cursor_read_int64>:
    1aac:	str	fp, [sp, #-8]!
    1ab0:	str	lr, [sp, #4]
    1ab4:	add	fp, sp, #4
    1ab8:	sub	sp, sp, #8
    1abc:	str	r0, [fp, #-8]
    1ac0:	str	r1, [fp, #-12]
    1ac4:	mvn	r2, #0
    1ac8:	ldr	r1, [fp, #-12]
    1acc:	ldr	r0, [fp, #-8]
    1ad0:	bl	15f8 <read_basic_type>
    1ad4:	mov	r3, r0
    1ad8:	mov	r0, r3
    1adc:	sub	sp, fp, #4
    1ae0:	ldr	fp, [sp]
    1ae4:	add	sp, sp, #4
    1ae8:	pop	{pc}		; (ldr pc, [sp], #4)

00001aec <coda_cdf_cursor_read_float>:
    1aec:	str	fp, [sp, #-8]!
    1af0:	str	lr, [sp, #4]
    1af4:	add	fp, sp, #4
    1af8:	sub	sp, sp, #8
    1afc:	str	r0, [fp, #-8]
    1b00:	str	r1, [fp, #-12]
    1b04:	mvn	r2, #0
    1b08:	ldr	r1, [fp, #-12]
    1b0c:	ldr	r0, [fp, #-8]
    1b10:	bl	15f8 <read_basic_type>
    1b14:	mov	r3, r0
    1b18:	mov	r0, r3
    1b1c:	sub	sp, fp, #4
    1b20:	ldr	fp, [sp]
    1b24:	add	sp, sp, #4
    1b28:	pop	{pc}		; (ldr pc, [sp], #4)

00001b2c <coda_cdf_cursor_read_double>:
    1b2c:	str	fp, [sp, #-8]!
    1b30:	str	lr, [sp, #4]
    1b34:	add	fp, sp, #4
    1b38:	sub	sp, sp, #8
    1b3c:	str	r0, [fp, #-8]
    1b40:	str	r1, [fp, #-12]
    1b44:	mvn	r2, #0
    1b48:	ldr	r1, [fp, #-12]
    1b4c:	ldr	r0, [fp, #-8]
    1b50:	bl	15f8 <read_basic_type>
    1b54:	mov	r3, r0
    1b58:	mov	r0, r3
    1b5c:	sub	sp, fp, #4
    1b60:	ldr	fp, [sp]
    1b64:	add	sp, sp, #4
    1b68:	pop	{pc}		; (ldr pc, [sp], #4)

00001b6c <coda_cdf_cursor_read_char>:
    1b6c:	str	fp, [sp, #-8]!
    1b70:	str	lr, [sp, #4]
    1b74:	add	fp, sp, #4
    1b78:	sub	sp, sp, #8
    1b7c:	str	r0, [fp, #-8]
    1b80:	str	r1, [fp, #-12]
    1b84:	mvn	r2, #0
    1b88:	ldr	r1, [fp, #-12]
    1b8c:	ldr	r0, [fp, #-8]
    1b90:	bl	15f8 <read_basic_type>
    1b94:	mov	r3, r0
    1b98:	mov	r0, r3
    1b9c:	sub	sp, fp, #4
    1ba0:	ldr	fp, [sp]
    1ba4:	add	sp, sp, #4
    1ba8:	pop	{pc}		; (ldr pc, [sp], #4)

00001bac <coda_cdf_cursor_read_string>:
    1bac:	str	fp, [sp, #-8]!
    1bb0:	str	lr, [sp, #4]
    1bb4:	add	fp, sp, #4
    1bb8:	sub	sp, sp, #16
    1bbc:	str	r0, [fp, #-8]
    1bc0:	str	r1, [fp, #-12]
    1bc4:	str	r2, [fp, #-16]
    1bc8:	ldr	r2, [fp, #-16]
    1bcc:	ldr	r1, [fp, #-12]
    1bd0:	ldr	r0, [fp, #-8]
    1bd4:	bl	15f8 <read_basic_type>
    1bd8:	mov	r3, r0
    1bdc:	cmp	r3, #0
    1be0:	beq	1bec <coda_cdf_cursor_read_string+0x40>
    1be4:	mvn	r3, #0
    1be8:	b	1c08 <coda_cdf_cursor_read_string+0x5c>
    1bec:	ldr	r3, [fp, #-16]
    1bf0:	sub	r3, r3, #1
    1bf4:	ldr	r2, [fp, #-12]
    1bf8:	add	r3, r2, r3
    1bfc:	mov	r2, #0
    1c00:	strb	r2, [r3]
    1c04:	mov	r3, #0
    1c08:	mov	r0, r3
    1c0c:	sub	sp, fp, #4
    1c10:	ldr	fp, [sp]
    1c14:	add	sp, sp, #4
    1c18:	pop	{pc}		; (ldr pc, [sp], #4)

00001c1c <coda_cdf_cursor_read_int8_array>:
    1c1c:	str	fp, [sp, #-8]!
    1c20:	str	lr, [sp, #4]
    1c24:	add	fp, sp, #4
    1c28:	sub	sp, sp, #8
    1c2c:	str	r0, [fp, #-8]
    1c30:	str	r1, [fp, #-12]
    1c34:	ldr	r1, [fp, #-12]
    1c38:	ldr	r0, [fp, #-8]
    1c3c:	bl	db8 <read_array>
    1c40:	mov	r3, r0
    1c44:	mov	r0, r3
    1c48:	sub	sp, fp, #4
    1c4c:	ldr	fp, [sp]
    1c50:	add	sp, sp, #4
    1c54:	pop	{pc}		; (ldr pc, [sp], #4)

00001c58 <coda_cdf_cursor_read_uint8_array>:
    1c58:	str	fp, [sp, #-8]!
    1c5c:	str	lr, [sp, #4]
    1c60:	add	fp, sp, #4
    1c64:	sub	sp, sp, #8
    1c68:	str	r0, [fp, #-8]
    1c6c:	str	r1, [fp, #-12]
    1c70:	ldr	r1, [fp, #-12]
    1c74:	ldr	r0, [fp, #-8]
    1c78:	bl	db8 <read_array>
    1c7c:	mov	r3, r0
    1c80:	mov	r0, r3
    1c84:	sub	sp, fp, #4
    1c88:	ldr	fp, [sp]
    1c8c:	add	sp, sp, #4
    1c90:	pop	{pc}		; (ldr pc, [sp], #4)

00001c94 <coda_cdf_cursor_read_int16_array>:
    1c94:	str	fp, [sp, #-8]!
    1c98:	str	lr, [sp, #4]
    1c9c:	add	fp, sp, #4
    1ca0:	sub	sp, sp, #8
    1ca4:	str	r0, [fp, #-8]
    1ca8:	str	r1, [fp, #-12]
    1cac:	ldr	r1, [fp, #-12]
    1cb0:	ldr	r0, [fp, #-8]
    1cb4:	bl	db8 <read_array>
    1cb8:	mov	r3, r0
    1cbc:	mov	r0, r3
    1cc0:	sub	sp, fp, #4
    1cc4:	ldr	fp, [sp]
    1cc8:	add	sp, sp, #4
    1ccc:	pop	{pc}		; (ldr pc, [sp], #4)

00001cd0 <coda_cdf_cursor_read_uint16_array>:
    1cd0:	str	fp, [sp, #-8]!
    1cd4:	str	lr, [sp, #4]
    1cd8:	add	fp, sp, #4
    1cdc:	sub	sp, sp, #8
    1ce0:	str	r0, [fp, #-8]
    1ce4:	str	r1, [fp, #-12]
    1ce8:	ldr	r1, [fp, #-12]
    1cec:	ldr	r0, [fp, #-8]
    1cf0:	bl	db8 <read_array>
    1cf4:	mov	r3, r0
    1cf8:	mov	r0, r3
    1cfc:	sub	sp, fp, #4
    1d00:	ldr	fp, [sp]
    1d04:	add	sp, sp, #4
    1d08:	pop	{pc}		; (ldr pc, [sp], #4)

00001d0c <coda_cdf_cursor_read_int32_array>:
    1d0c:	str	fp, [sp, #-8]!
    1d10:	str	lr, [sp, #4]
    1d14:	add	fp, sp, #4
    1d18:	sub	sp, sp, #8
    1d1c:	str	r0, [fp, #-8]
    1d20:	str	r1, [fp, #-12]
    1d24:	ldr	r1, [fp, #-12]
    1d28:	ldr	r0, [fp, #-8]
    1d2c:	bl	db8 <read_array>
    1d30:	mov	r3, r0
    1d34:	mov	r0, r3
    1d38:	sub	sp, fp, #4
    1d3c:	ldr	fp, [sp]
    1d40:	add	sp, sp, #4
    1d44:	pop	{pc}		; (ldr pc, [sp], #4)

00001d48 <coda_cdf_cursor_read_uint32_array>:
    1d48:	str	fp, [sp, #-8]!
    1d4c:	str	lr, [sp, #4]
    1d50:	add	fp, sp, #4
    1d54:	sub	sp, sp, #8
    1d58:	str	r0, [fp, #-8]
    1d5c:	str	r1, [fp, #-12]
    1d60:	ldr	r1, [fp, #-12]
    1d64:	ldr	r0, [fp, #-8]
    1d68:	bl	db8 <read_array>
    1d6c:	mov	r3, r0
    1d70:	mov	r0, r3
    1d74:	sub	sp, fp, #4
    1d78:	ldr	fp, [sp]
    1d7c:	add	sp, sp, #4
    1d80:	pop	{pc}		; (ldr pc, [sp], #4)

00001d84 <coda_cdf_cursor_read_int64_array>:
    1d84:	str	fp, [sp, #-8]!
    1d88:	str	lr, [sp, #4]
    1d8c:	add	fp, sp, #4
    1d90:	sub	sp, sp, #8
    1d94:	str	r0, [fp, #-8]
    1d98:	str	r1, [fp, #-12]
    1d9c:	ldr	r1, [fp, #-12]
    1da0:	ldr	r0, [fp, #-8]
    1da4:	bl	db8 <read_array>
    1da8:	mov	r3, r0
    1dac:	mov	r0, r3
    1db0:	sub	sp, fp, #4
    1db4:	ldr	fp, [sp]
    1db8:	add	sp, sp, #4
    1dbc:	pop	{pc}		; (ldr pc, [sp], #4)

00001dc0 <coda_cdf_cursor_read_float_array>:
    1dc0:	str	fp, [sp, #-8]!
    1dc4:	str	lr, [sp, #4]
    1dc8:	add	fp, sp, #4
    1dcc:	sub	sp, sp, #8
    1dd0:	str	r0, [fp, #-8]
    1dd4:	str	r1, [fp, #-12]
    1dd8:	ldr	r1, [fp, #-12]
    1ddc:	ldr	r0, [fp, #-8]
    1de0:	bl	db8 <read_array>
    1de4:	mov	r3, r0
    1de8:	mov	r0, r3
    1dec:	sub	sp, fp, #4
    1df0:	ldr	fp, [sp]
    1df4:	add	sp, sp, #4
    1df8:	pop	{pc}		; (ldr pc, [sp], #4)

00001dfc <coda_cdf_cursor_read_double_array>:
    1dfc:	str	fp, [sp, #-8]!
    1e00:	str	lr, [sp, #4]
    1e04:	add	fp, sp, #4
    1e08:	sub	sp, sp, #8
    1e0c:	str	r0, [fp, #-8]
    1e10:	str	r1, [fp, #-12]
    1e14:	ldr	r1, [fp, #-12]
    1e18:	ldr	r0, [fp, #-8]
    1e1c:	bl	db8 <read_array>
    1e20:	mov	r3, r0
    1e24:	mov	r0, r3
    1e28:	sub	sp, fp, #4
    1e2c:	ldr	fp, [sp]
    1e30:	add	sp, sp, #4
    1e34:	pop	{pc}		; (ldr pc, [sp], #4)

00001e38 <coda_cdf_cursor_read_char_array>:
    1e38:	str	fp, [sp, #-8]!
    1e3c:	str	lr, [sp, #4]
    1e40:	add	fp, sp, #4
    1e44:	sub	sp, sp, #8
    1e48:	str	r0, [fp, #-8]
    1e4c:	str	r1, [fp, #-12]
    1e50:	ldr	r1, [fp, #-12]
    1e54:	ldr	r0, [fp, #-8]
    1e58:	bl	db8 <read_array>
    1e5c:	mov	r3, r0
    1e60:	mov	r0, r3
    1e64:	sub	sp, fp, #4
    1e68:	ldr	fp, [sp]
    1e6c:	add	sp, sp, #4
    1e70:	pop	{pc}		; (ldr pc, [sp], #4)

00001e74 <coda_cdf_cursor_read_int8_partial_array>:
    1e74:	str	fp, [sp, #-8]!
    1e78:	str	lr, [sp, #4]
    1e7c:	add	fp, sp, #4
    1e80:	sub	sp, sp, #16
    1e84:	str	r0, [fp, #-8]
    1e88:	str	r1, [fp, #-12]
    1e8c:	str	r2, [fp, #-16]
    1e90:	str	r3, [fp, #-20]	; 0xffffffec
    1e94:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e98:	ldr	r2, [fp, #-16]
    1e9c:	ldr	r1, [fp, #-12]
    1ea0:	ldr	r0, [fp, #-8]
    1ea4:	bl	1158 <read_partial_array>
    1ea8:	mov	r3, r0
    1eac:	mov	r0, r3
    1eb0:	sub	sp, fp, #4
    1eb4:	ldr	fp, [sp]
    1eb8:	add	sp, sp, #4
    1ebc:	pop	{pc}		; (ldr pc, [sp], #4)

00001ec0 <coda_cdf_cursor_read_uint8_partial_array>:
    1ec0:	str	fp, [sp, #-8]!
    1ec4:	str	lr, [sp, #4]
    1ec8:	add	fp, sp, #4
    1ecc:	sub	sp, sp, #16
    1ed0:	str	r0, [fp, #-8]
    1ed4:	str	r1, [fp, #-12]
    1ed8:	str	r2, [fp, #-16]
    1edc:	str	r3, [fp, #-20]	; 0xffffffec
    1ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ee4:	ldr	r2, [fp, #-16]
    1ee8:	ldr	r1, [fp, #-12]
    1eec:	ldr	r0, [fp, #-8]
    1ef0:	bl	1158 <read_partial_array>
    1ef4:	mov	r3, r0
    1ef8:	mov	r0, r3
    1efc:	sub	sp, fp, #4
    1f00:	ldr	fp, [sp]
    1f04:	add	sp, sp, #4
    1f08:	pop	{pc}		; (ldr pc, [sp], #4)

00001f0c <coda_cdf_cursor_read_int16_partial_array>:
    1f0c:	str	fp, [sp, #-8]!
    1f10:	str	lr, [sp, #4]
    1f14:	add	fp, sp, #4
    1f18:	sub	sp, sp, #16
    1f1c:	str	r0, [fp, #-8]
    1f20:	str	r1, [fp, #-12]
    1f24:	str	r2, [fp, #-16]
    1f28:	str	r3, [fp, #-20]	; 0xffffffec
    1f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f30:	ldr	r2, [fp, #-16]
    1f34:	ldr	r1, [fp, #-12]
    1f38:	ldr	r0, [fp, #-8]
    1f3c:	bl	1158 <read_partial_array>
    1f40:	mov	r3, r0
    1f44:	mov	r0, r3
    1f48:	sub	sp, fp, #4
    1f4c:	ldr	fp, [sp]
    1f50:	add	sp, sp, #4
    1f54:	pop	{pc}		; (ldr pc, [sp], #4)

00001f58 <coda_cdf_cursor_read_uint16_partial_array>:
    1f58:	str	fp, [sp, #-8]!
    1f5c:	str	lr, [sp, #4]
    1f60:	add	fp, sp, #4
    1f64:	sub	sp, sp, #16
    1f68:	str	r0, [fp, #-8]
    1f6c:	str	r1, [fp, #-12]
    1f70:	str	r2, [fp, #-16]
    1f74:	str	r3, [fp, #-20]	; 0xffffffec
    1f78:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f7c:	ldr	r2, [fp, #-16]
    1f80:	ldr	r1, [fp, #-12]
    1f84:	ldr	r0, [fp, #-8]
    1f88:	bl	1158 <read_partial_array>
    1f8c:	mov	r3, r0
    1f90:	mov	r0, r3
    1f94:	sub	sp, fp, #4
    1f98:	ldr	fp, [sp]
    1f9c:	add	sp, sp, #4
    1fa0:	pop	{pc}		; (ldr pc, [sp], #4)

00001fa4 <coda_cdf_cursor_read_int32_partial_array>:
    1fa4:	str	fp, [sp, #-8]!
    1fa8:	str	lr, [sp, #4]
    1fac:	add	fp, sp, #4
    1fb0:	sub	sp, sp, #16
    1fb4:	str	r0, [fp, #-8]
    1fb8:	str	r1, [fp, #-12]
    1fbc:	str	r2, [fp, #-16]
    1fc0:	str	r3, [fp, #-20]	; 0xffffffec
    1fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
    1fc8:	ldr	r2, [fp, #-16]
    1fcc:	ldr	r1, [fp, #-12]
    1fd0:	ldr	r0, [fp, #-8]
    1fd4:	bl	1158 <read_partial_array>
    1fd8:	mov	r3, r0
    1fdc:	mov	r0, r3
    1fe0:	sub	sp, fp, #4
    1fe4:	ldr	fp, [sp]
    1fe8:	add	sp, sp, #4
    1fec:	pop	{pc}		; (ldr pc, [sp], #4)

00001ff0 <coda_cdf_cursor_read_uint32_partial_array>:
    1ff0:	str	fp, [sp, #-8]!
    1ff4:	str	lr, [sp, #4]
    1ff8:	add	fp, sp, #4
    1ffc:	sub	sp, sp, #16
    2000:	str	r0, [fp, #-8]
    2004:	str	r1, [fp, #-12]
    2008:	str	r2, [fp, #-16]
    200c:	str	r3, [fp, #-20]	; 0xffffffec
    2010:	ldr	r3, [fp, #-20]	; 0xffffffec
    2014:	ldr	r2, [fp, #-16]
    2018:	ldr	r1, [fp, #-12]
    201c:	ldr	r0, [fp, #-8]
    2020:	bl	1158 <read_partial_array>
    2024:	mov	r3, r0
    2028:	mov	r0, r3
    202c:	sub	sp, fp, #4
    2030:	ldr	fp, [sp]
    2034:	add	sp, sp, #4
    2038:	pop	{pc}		; (ldr pc, [sp], #4)

0000203c <coda_cdf_cursor_read_int64_partial_array>:
    203c:	str	fp, [sp, #-8]!
    2040:	str	lr, [sp, #4]
    2044:	add	fp, sp, #4
    2048:	sub	sp, sp, #16
    204c:	str	r0, [fp, #-8]
    2050:	str	r1, [fp, #-12]
    2054:	str	r2, [fp, #-16]
    2058:	str	r3, [fp, #-20]	; 0xffffffec
    205c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2060:	ldr	r2, [fp, #-16]
    2064:	ldr	r1, [fp, #-12]
    2068:	ldr	r0, [fp, #-8]
    206c:	bl	1158 <read_partial_array>
    2070:	mov	r3, r0
    2074:	mov	r0, r3
    2078:	sub	sp, fp, #4
    207c:	ldr	fp, [sp]
    2080:	add	sp, sp, #4
    2084:	pop	{pc}		; (ldr pc, [sp], #4)

00002088 <coda_cdf_cursor_read_float_partial_array>:
    2088:	str	fp, [sp, #-8]!
    208c:	str	lr, [sp, #4]
    2090:	add	fp, sp, #4
    2094:	sub	sp, sp, #16
    2098:	str	r0, [fp, #-8]
    209c:	str	r1, [fp, #-12]
    20a0:	str	r2, [fp, #-16]
    20a4:	str	r3, [fp, #-20]	; 0xffffffec
    20a8:	ldr	r3, [fp, #-20]	; 0xffffffec
    20ac:	ldr	r2, [fp, #-16]
    20b0:	ldr	r1, [fp, #-12]
    20b4:	ldr	r0, [fp, #-8]
    20b8:	bl	1158 <read_partial_array>
    20bc:	mov	r3, r0
    20c0:	mov	r0, r3
    20c4:	sub	sp, fp, #4
    20c8:	ldr	fp, [sp]
    20cc:	add	sp, sp, #4
    20d0:	pop	{pc}		; (ldr pc, [sp], #4)

000020d4 <coda_cdf_cursor_read_double_partial_array>:
    20d4:	str	fp, [sp, #-8]!
    20d8:	str	lr, [sp, #4]
    20dc:	add	fp, sp, #4
    20e0:	sub	sp, sp, #16
    20e4:	str	r0, [fp, #-8]
    20e8:	str	r1, [fp, #-12]
    20ec:	str	r2, [fp, #-16]
    20f0:	str	r3, [fp, #-20]	; 0xffffffec
    20f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    20f8:	ldr	r2, [fp, #-16]
    20fc:	ldr	r1, [fp, #-12]
    2100:	ldr	r0, [fp, #-8]
    2104:	bl	1158 <read_partial_array>
    2108:	mov	r3, r0
    210c:	mov	r0, r3
    2110:	sub	sp, fp, #4
    2114:	ldr	fp, [sp]
    2118:	add	sp, sp, #4
    211c:	pop	{pc}		; (ldr pc, [sp], #4)

00002120 <coda_cdf_cursor_read_char_partial_array>:
    2120:	str	fp, [sp, #-8]!
    2124:	str	lr, [sp, #4]
    2128:	add	fp, sp, #4
    212c:	sub	sp, sp, #16
    2130:	str	r0, [fp, #-8]
    2134:	str	r1, [fp, #-12]
    2138:	str	r2, [fp, #-16]
    213c:	str	r3, [fp, #-20]	; 0xffffffec
    2140:	ldr	r3, [fp, #-20]	; 0xffffffec
    2144:	ldr	r2, [fp, #-16]
    2148:	ldr	r1, [fp, #-12]
    214c:	ldr	r0, [fp, #-8]
    2150:	bl	1158 <read_partial_array>
    2154:	mov	r3, r0
    2158:	mov	r0, r3
    215c:	sub	sp, fp, #4
    2160:	ldr	fp, [sp]
    2164:	add	sp, sp, #4
    2168:	pop	{pc}		; (ldr pc, [sp], #4)
