
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_bin_cursor_get_bit_size>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #552	; 0x228
       c:	str	r0, [fp, #-16]
      10:	str	r1, [fp, #-20]	; 0xffffffec
      14:	ldr	r0, [fp, #-16]
      18:	add	r1, r0, #8
      1c:	ldr	r0, [r0, #4]
      20:	sub	r0, r0, #1
      24:	add	r0, r1, r0, lsl #4
      28:	ldr	r0, [r0]
      2c:	ldr	r0, [r0]
      30:	cmp	r0, #100	; 0x64
      34:	bcs	58 <coda_bin_cursor_get_bit_size+0x58>
      38:	ldr	r0, [fp, #-16]
      3c:	add	r1, r0, #8
      40:	ldr	r0, [r0, #4]
      44:	sub	r0, r0, #1
      48:	add	r0, r1, r0, lsl #4
      4c:	ldr	r0, [r0]
      50:	str	r0, [sp, #12]
      54:	b	78 <coda_bin_cursor_get_bit_size+0x78>
      58:	ldr	r0, [fp, #-16]
      5c:	add	r1, r0, #8
      60:	ldr	r0, [r0, #4]
      64:	sub	r0, r0, #1
      68:	add	r0, r1, r0, lsl #4
      6c:	ldr	r0, [r0]
      70:	ldr	r0, [r0, #4]
      74:	str	r0, [sp, #12]
      78:	ldr	r0, [sp, #12]
      7c:	str	r0, [fp, #-24]	; 0xffffffe8
      80:	ldr	r0, [fp, #-24]	; 0xffffffe8
      84:	ldr	r0, [r0, #28]
      88:	cmp	r0, #0
      8c:	bmi	b8 <coda_bin_cursor_get_bit_size+0xb8>
      90:	b	94 <coda_bin_cursor_get_bit_size+0x94>
      94:	ldr	r0, [fp, #-24]	; 0xffffffe8
      98:	ldr	r1, [r0, #24]
      9c:	ldr	r0, [r0, #28]
      a0:	ldr	r2, [fp, #-20]	; 0xffffffec
      a4:	str	r0, [r2, #4]
      a8:	str	r1, [r2]
      ac:	movw	r0, #0
      b0:	str	r0, [fp, #-12]
      b4:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
      b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
      bc:	ldr	r0, [r0, #8]
      c0:	cmp	r0, #2
      c4:	str	r0, [sp, #8]
      c8:	bcc	f4 <coda_bin_cursor_get_bit_size+0xf4>
      cc:	b	d0 <coda_bin_cursor_get_bit_size+0xd0>
      d0:	ldr	r0, [sp, #8]
      d4:	sub	r1, r0, #2
      d8:	cmp	r1, #4
      dc:	bcc	108 <coda_bin_cursor_get_bit_size+0x108>
      e0:	b	e4 <coda_bin_cursor_get_bit_size+0xe4>
      e4:	ldr	r0, [sp, #8]
      e8:	cmp	r0, #6
      ec:	beq	1fc <coda_bin_cursor_get_bit_size+0x1fc>
      f0:	b	264 <coda_bin_cursor_get_bit_size+0x264>
      f4:	ldr	r0, [fp, #-16]
      f8:	ldr	r1, [fp, #-20]	; 0xffffffec
      fc:	bl	0 <coda_ascbin_cursor_get_bit_size>
     100:	str	r0, [fp, #-12]
     104:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     108:	ldr	r0, [fp, #-24]	; 0xffffffe8
     10c:	ldr	r0, [r0, #32]
     110:	movw	r1, #0
     114:	cmp	r0, r1
     118:	bne	130 <coda_bin_cursor_get_bit_size+0x130>
     11c:	ldr	r0, [fp, #-20]	; 0xffffffec
     120:	mvn	r1, #0
     124:	str	r1, [r0, #4]
     128:	str	r1, [r0]
     12c:	b	1f8 <coda_bin_cursor_get_bit_size+0x1f8>
     130:	ldr	r0, [fp, #-24]	; 0xffffffe8
     134:	ldr	r0, [r0, #32]
     138:	ldr	r1, [fp, #-16]
     13c:	ldr	r2, [fp, #-20]	; 0xffffffec
     140:	bl	0 <coda_expression_eval_integer>
     144:	cmp	r0, #0
     148:	beq	16c <coda_bin_cursor_get_bit_size+0x16c>
     14c:	movw	r0, #0
     150:	movt	r0, #0
     154:	bl	0 <coda_add_error_message>
     158:	ldr	r0, [fp, #-16]
     15c:	bl	0 <coda_cursor_add_to_error_message>
     160:	mvn	r0, #0
     164:	str	r0, [fp, #-12]
     168:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     16c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     170:	ldr	r1, [r0, #24]
     174:	ldr	r0, [r0, #28]
     178:	mvn	r2, #7
     17c:	eor	r1, r1, r2
     180:	mvn	r0, r0
     184:	orr	r0, r1, r0
     188:	cmp	r0, #0
     18c:	bne	1b4 <coda_bin_cursor_get_bit_size+0x1b4>
     190:	b	194 <coda_bin_cursor_get_bit_size+0x194>
     194:	ldr	r0, [fp, #-20]	; 0xffffffec
     198:	ldr	r1, [r0]
     19c:	ldr	r2, [r0, #4]
     1a0:	lsl	r2, r2, #3
     1a4:	orr	r2, r2, r1, lsr #29
     1a8:	lsl	r1, r1, #3
     1ac:	str	r1, [r0]
     1b0:	str	r2, [r0, #4]
     1b4:	ldr	r0, [fp, #-20]	; 0xffffffec
     1b8:	ldr	r0, [r0, #4]
     1bc:	cmn	r0, #1
     1c0:	bgt	1f4 <coda_bin_cursor_get_bit_size+0x1f4>
     1c4:	b	1c8 <coda_bin_cursor_get_bit_size+0x1c8>
     1c8:	ldr	r0, [pc, #168]	; 278 <coda_bin_cursor_get_bit_size+0x278>
     1cc:	ldr	r1, [fp, #-20]	; 0xffffffec
     1d0:	ldr	r2, [r1]
     1d4:	movw	r1, #0
     1d8:	movt	r1, #0
     1dc:	bl	0 <coda_set_error>
     1e0:	ldr	r0, [fp, #-16]
     1e4:	bl	0 <coda_cursor_add_to_error_message>
     1e8:	mvn	r0, #0
     1ec:	str	r0, [fp, #-12]
     1f0:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     1f4:	b	1f8 <coda_bin_cursor_get_bit_size+0x1f8>
     1f8:	b	264 <coda_bin_cursor_get_bit_size+0x264>
     1fc:	ldr	r0, [fp, #-16]
     200:	add	r1, sp, #16
     204:	mov	r2, r1
     208:	str	r0, [sp, #4]
     20c:	mov	r0, r2
     210:	ldr	r2, [sp, #4]
     214:	str	r1, [sp]
     218:	mov	r1, r2
     21c:	movw	r2, #520	; 0x208
     220:	bl	0 <memcpy>
     224:	ldr	r0, [sp]
     228:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
     22c:	cmp	r0, #0
     230:	beq	240 <coda_bin_cursor_get_bit_size+0x240>
     234:	mvn	r0, #0
     238:	str	r0, [fp, #-12]
     23c:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     240:	ldr	r1, [fp, #-20]	; 0xffffffec
     244:	add	r0, sp, #16
     248:	bl	0 <coda_cursor_get_bit_size>
     24c:	cmp	r0, #0
     250:	beq	260 <coda_bin_cursor_get_bit_size+0x260>
     254:	mvn	r0, #0
     258:	str	r0, [fp, #-12]
     25c:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     260:	b	264 <coda_bin_cursor_get_bit_size+0x264>
     264:	movw	r0, #0
     268:	str	r0, [fp, #-12]
     26c:	ldr	r0, [fp, #-12]
     270:	sub	sp, fp, #8
     274:	pop	{r4, r5, fp, pc}
     278:	.word	0xfffffed4

0000027c <coda_bin_cursor_get_string_length>:
     27c:	push	{fp, lr}
     280:	mov	fp, sp
     284:	sub	sp, sp, #24
     288:	str	r0, [fp, #-8]
     28c:	str	r1, [sp, #12]
     290:	ldr	r0, [fp, #-8]
     294:	mov	r1, sp
     298:	bl	0 <coda_bin_cursor_get_bit_size>
     29c:	cmp	r0, #0
     2a0:	beq	2b0 <coda_bin_cursor_get_string_length+0x34>
     2a4:	mvn	r0, #0
     2a8:	str	r0, [fp, #-4]
     2ac:	b	2f0 <coda_bin_cursor_get_string_length+0x74>
     2b0:	ldr	r0, [sp, #4]
     2b4:	cmn	r0, #1
     2b8:	bgt	2d0 <coda_bin_cursor_get_string_length+0x54>
     2bc:	b	2c0 <coda_bin_cursor_get_string_length+0x44>
     2c0:	ldr	r0, [sp, #12]
     2c4:	mvn	r1, #0
     2c8:	str	r1, [r0]
     2cc:	b	2e8 <coda_bin_cursor_get_string_length+0x6c>
     2d0:	ldr	r0, [sp]
     2d4:	ldr	r1, [sp, #4]
     2d8:	lsr	r0, r0, #3
     2dc:	orr	r0, r0, r1, lsl #29
     2e0:	ldr	r1, [sp, #12]
     2e4:	str	r0, [r1]
     2e8:	movw	r0, #0
     2ec:	str	r0, [fp, #-4]
     2f0:	ldr	r0, [fp, #-4]
     2f4:	mov	sp, fp
     2f8:	pop	{fp, pc}

000002fc <coda_bin_cursor_get_num_elements>:
     2fc:	push	{fp, lr}
     300:	mov	fp, sp
     304:	sub	sp, sp, #16
     308:	str	r0, [sp, #8]
     30c:	str	r1, [sp, #4]
     310:	ldr	r0, [sp, #8]
     314:	add	r1, r0, #8
     318:	ldr	r0, [r0, #4]
     31c:	sub	r0, r0, #1
     320:	add	r0, r1, r0, lsl #4
     324:	ldr	r0, [r0]
     328:	ldr	r0, [r0]
     32c:	cmp	r0, #100	; 0x64
     330:	bcs	354 <coda_bin_cursor_get_num_elements+0x58>
     334:	ldr	r0, [sp, #8]
     338:	add	r1, r0, #8
     33c:	ldr	r0, [r0, #4]
     340:	sub	r0, r0, #1
     344:	add	r0, r1, r0, lsl #4
     348:	ldr	r0, [r0]
     34c:	str	r0, [sp]
     350:	b	374 <coda_bin_cursor_get_num_elements+0x78>
     354:	ldr	r0, [sp, #8]
     358:	add	r1, r0, #8
     35c:	ldr	r0, [r0, #4]
     360:	sub	r0, r0, #1
     364:	add	r0, r1, r0, lsl #4
     368:	ldr	r0, [r0]
     36c:	ldr	r0, [r0, #4]
     370:	str	r0, [sp]
     374:	ldr	r0, [sp]
     378:	ldr	r0, [r0, #8]
     37c:	cmp	r0, #1
     380:	bhi	39c <coda_bin_cursor_get_num_elements+0xa0>
     384:	b	388 <coda_bin_cursor_get_num_elements+0x8c>
     388:	ldr	r0, [sp, #8]
     38c:	ldr	r1, [sp, #4]
     390:	bl	0 <coda_ascbin_cursor_get_num_elements>
     394:	str	r0, [fp, #-4]
     398:	b	3b0 <coda_bin_cursor_get_num_elements+0xb4>
     39c:	ldr	r0, [sp, #4]
     3a0:	movw	r1, #1
     3a4:	str	r1, [r0]
     3a8:	movw	r0, #0
     3ac:	str	r0, [fp, #-4]
     3b0:	ldr	r0, [fp, #-4]
     3b4:	mov	sp, fp
     3b8:	pop	{fp, pc}

000003bc <coda_bin_cursor_read_int8>:
     3bc:	push	{r4, sl, fp, lr}
     3c0:	add	fp, sp, #8
     3c4:	sub	sp, sp, #112	; 0x70
     3c8:	str	r0, [fp, #-16]
     3cc:	str	r1, [fp, #-20]	; 0xffffffec
     3d0:	ldr	r0, [fp, #-16]
     3d4:	add	r1, r0, #8
     3d8:	ldr	r0, [r0, #4]
     3dc:	sub	r0, r0, #1
     3e0:	add	r0, r1, r0, lsl #4
     3e4:	ldr	r0, [r0]
     3e8:	ldr	r0, [r0]
     3ec:	cmp	r0, #100	; 0x64
     3f0:	bcs	414 <coda_bin_cursor_read_int8+0x58>
     3f4:	ldr	r0, [fp, #-16]
     3f8:	add	r1, r0, #8
     3fc:	ldr	r0, [r0, #4]
     400:	sub	r0, r0, #1
     404:	add	r0, r1, r0, lsl #4
     408:	ldr	r0, [r0]
     40c:	str	r0, [sp, #32]
     410:	b	434 <coda_bin_cursor_read_int8+0x78>
     414:	ldr	r0, [fp, #-16]
     418:	add	r1, r0, #8
     41c:	ldr	r0, [r0, #4]
     420:	sub	r0, r0, #1
     424:	add	r0, r1, r0, lsl #4
     428:	ldr	r0, [r0]
     42c:	ldr	r0, [r0, #4]
     430:	str	r0, [sp, #32]
     434:	ldr	r0, [sp, #32]
     438:	str	r0, [fp, #-24]	; 0xffffffe8
     43c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     440:	ldr	r1, [r0, #24]
     444:	ldr	r0, [r0, #28]
     448:	str	r0, [fp, #-28]	; 0xffffffe4
     44c:	str	r1, [fp, #-32]	; 0xffffffe0
     450:	ldr	r0, [fp, #-16]
     454:	ldr	r1, [r0, #4]
     458:	ldr	r1, [r0, r1, lsl #4]!
     45c:	ldr	r0, [r0, #4]
     460:	str	r0, [fp, #-36]	; 0xffffffdc
     464:	str	r1, [fp, #-40]	; 0xffffffd8
     468:	ldr	r0, [fp, #-28]	; 0xffffffe4
     46c:	cmn	r0, #1
     470:	bgt	568 <coda_bin_cursor_read_int8+0x1ac>
     474:	b	478 <coda_bin_cursor_read_int8+0xbc>
     478:	ldr	r0, [fp, #-16]
     47c:	sub	r1, fp, #32
     480:	bl	0 <coda_bin_cursor_get_bit_size>
     484:	cmp	r0, #0
     488:	beq	498 <coda_bin_cursor_read_int8+0xdc>
     48c:	mvn	r0, #0
     490:	str	r0, [fp, #-12]
     494:	b	71c <coda_bin_cursor_read_int8+0x360>
     498:	ldr	r0, [fp, #-28]	; 0xffffffe4
     49c:	cmp	r0, #0
     4a0:	bmi	4c0 <coda_bin_cursor_read_int8+0x104>
     4a4:	b	4a8 <coda_bin_cursor_read_int8+0xec>
     4a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     4ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
     4b0:	subs	r0, r0, #9
     4b4:	sbcs	r1, r1, #0
     4b8:	blt	564 <coda_bin_cursor_read_int8+0x1a8>
     4bc:	b	4c0 <coda_bin_cursor_read_int8+0x104>
     4c0:	ldr	r0, [pc, #608]	; 728 <coda_bin_cursor_read_int8+0x36c>
     4c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     4c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     4cc:	add	r3, sp, #59	; 0x3b
     4d0:	str	r0, [sp, #28]
     4d4:	mov	r0, r1
     4d8:	mov	r1, r2
     4dc:	mov	r2, r3
     4e0:	str	r3, [sp, #24]
     4e4:	bl	0 <coda_str64>
     4e8:	ldr	r0, [fp, #-16]
     4ec:	ldr	r1, [r0, #4]
     4f0:	ldr	r1, [r0, r1, lsl #4]!
     4f4:	ldr	r0, [r0, #4]
     4f8:	lsr	r1, r1, #3
     4fc:	orr	r1, r1, r0, lsl #29
     500:	asr	r0, r0, #3
     504:	add	r2, sp, #38	; 0x26
     508:	str	r0, [sp, #20]
     50c:	mov	r0, r1
     510:	ldr	r1, [sp, #20]
     514:	str	r2, [sp, #16]
     518:	bl	0 <coda_str64>
     51c:	ldr	r0, [fp, #-16]
     520:	ldr	r1, [r0, #4]
     524:	lsl	r1, r1, #4
     528:	ldr	r0, [r1, r0]
     52c:	and	r0, r0, #7
     530:	ldr	r1, [sp, #28]
     534:	str	r0, [sp, #12]
     538:	mov	r0, r1
     53c:	movw	r1, #0
     540:	movt	r1, #0
     544:	ldr	r2, [sp, #24]
     548:	ldr	r3, [sp, #16]
     54c:	ldr	ip, [sp, #12]
     550:	str	ip, [sp]
     554:	bl	0 <coda_set_error>
     558:	mvn	r0, #0
     55c:	str	r0, [fp, #-12]
     560:	b	71c <coda_bin_cursor_read_int8+0x360>
     564:	b	568 <coda_bin_cursor_read_int8+0x1ac>
     568:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     56c:	tst	r0, #7
     570:	bne	594 <coda_bin_cursor_read_int8+0x1d8>
     574:	b	578 <coda_bin_cursor_read_int8+0x1bc>
     578:	ldr	r0, [fp, #-32]	; 0xffffffe0
     57c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     580:	eor	r0, r0, #8
     584:	orr	r0, r0, r1
     588:	cmp	r0, #0
     58c:	beq	64c <coda_bin_cursor_read_int8+0x290>
     590:	b	594 <coda_bin_cursor_read_int8+0x1d8>
     594:	ldr	r0, [fp, #-32]	; 0xffffffe0
     598:	ldr	r1, [fp, #-28]	; 0xffffffe4
     59c:	lsr	r2, r0, #3
     5a0:	orr	r2, r2, r1, lsl #29
     5a4:	asr	r1, r1, #3
     5a8:	and	r0, r0, #7
     5ac:	adds	r3, r2, #1
     5b0:	adc	ip, r1, #0
     5b4:	cmp	r0, #0
     5b8:	movne	r2, r3
     5bc:	cmp	r0, #0
     5c0:	movne	r1, ip
     5c4:	rsbs	r0, r2, #1
     5c8:	rscs	r1, r1, #0
     5cc:	blt	5d8 <coda_bin_cursor_read_int8+0x21c>
     5d0:	b	5d4 <coda_bin_cursor_read_int8+0x218>
     5d4:	b	5f8 <coda_bin_cursor_read_int8+0x23c>
     5d8:	movw	r0, #0
     5dc:	movt	r0, #0
     5e0:	movw	r1, #0
     5e4:	movt	r1, #0
     5e8:	movw	r2, #177	; 0xb1
     5ec:	movw	r3, #0
     5f0:	movt	r3, #0
     5f4:	bl	0 <__assert_fail>
     5f8:	ldr	r0, [fp, #-20]	; 0xffffffec
     5fc:	mov	r1, #0
     600:	strb	r1, [r0]
     604:	ldr	r0, [fp, #-16]
     608:	ldr	r0, [r0]
     60c:	ldr	r2, [fp, #-40]	; 0xffffffd8
     610:	ldr	r3, [fp, #-36]	; 0xffffffdc
     614:	ldr	r1, [fp, #-32]	; 0xffffffe0
     618:	ldr	ip, [fp, #-28]	; 0xffffffe4
     61c:	ldr	lr, [fp, #-20]	; 0xffffffec
     620:	mov	r4, sp
     624:	str	lr, [r4, #8]
     628:	str	ip, [r4, #4]
     62c:	str	r1, [r4]
     630:	bl	72c <read_bits>
     634:	cmp	r0, #0
     638:	beq	648 <coda_bin_cursor_read_int8+0x28c>
     63c:	mvn	r0, #0
     640:	str	r0, [fp, #-12]
     644:	b	71c <coda_bin_cursor_read_int8+0x360>
     648:	b	6a4 <coda_bin_cursor_read_int8+0x2e8>
     64c:	ldr	r0, [fp, #-16]
     650:	ldr	r0, [r0]
     654:	ldr	r1, [fp, #-40]	; 0xffffffd8
     658:	ldr	r2, [fp, #-36]	; 0xffffffdc
     65c:	lsr	r1, r1, #3
     660:	orr	r1, r1, r2, lsl #29
     664:	asr	r3, r2, #3
     668:	ldr	r2, [fp, #-20]	; 0xffffffec
     66c:	mov	ip, sp
     670:	str	r2, [ip, #8]
     674:	mov	r2, #0
     678:	str	r2, [ip, #4]
     67c:	mov	r2, #1
     680:	str	r2, [ip]
     684:	mov	r2, r1
     688:	bl	cd4 <read_bytes>
     68c:	cmp	r0, #0
     690:	beq	6a0 <coda_bin_cursor_read_int8+0x2e4>
     694:	mvn	r0, #0
     698:	str	r0, [fp, #-12]
     69c:	b	71c <coda_bin_cursor_read_int8+0x360>
     6a0:	b	6a4 <coda_bin_cursor_read_int8+0x2e8>
     6a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     6a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     6ac:	rsbs	r0, r0, #7
     6b0:	rscs	r1, r1, #0
     6b4:	blt	714 <coda_bin_cursor_read_int8+0x358>
     6b8:	b	6bc <coda_bin_cursor_read_int8+0x300>
     6bc:	ldr	r0, [fp, #-20]	; 0xffffffec
     6c0:	ldrb	r0, [r0]
     6c4:	strb	r0, [sp, #37]	; 0x25
     6c8:	ldrb	r0, [sp, #37]	; 0x25
     6cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
     6d0:	sub	r1, r1, #1
     6d4:	movw	r2, #1
     6d8:	lsl	r1, r2, r1
     6dc:	and	r0, r0, r1
     6e0:	cmp	r0, #0
     6e4:	beq	710 <coda_bin_cursor_read_int8+0x354>
     6e8:	ldrb	r0, [sp, #37]	; 0x25
     6ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
     6f0:	movw	r2, #1
     6f4:	lsl	r1, r2, r1
     6f8:	sub	r1, r1, #1
     6fc:	mvn	r2, #0
     700:	eor	r1, r1, r2
     704:	orr	r0, r0, r1
     708:	ldr	r1, [fp, #-20]	; 0xffffffec
     70c:	strb	r0, [r1]
     710:	b	714 <coda_bin_cursor_read_int8+0x358>
     714:	movw	r0, #0
     718:	str	r0, [fp, #-12]
     71c:	ldr	r0, [fp, #-12]
     720:	sub	sp, fp, #8
     724:	pop	{r4, sl, fp, pc}
     728:	.word	0xfffffed4

0000072c <read_bits>:
     72c:	push	{r4, r5, r6, sl, fp, lr}
     730:	add	fp, sp, #16
     734:	sub	sp, sp, #104	; 0x68
     738:	ldr	r1, [fp, #12]
     73c:	ldr	ip, [fp, #8]
     740:	ldr	lr, [fp, #16]
     744:	str	r0, [fp, #-24]	; 0xffffffe8
     748:	str	r3, [fp, #-28]	; 0xffffffe4
     74c:	str	r2, [fp, #-32]	; 0xffffffe0
     750:	str	r1, [fp, #-36]	; 0xffffffdc
     754:	str	ip, [fp, #-40]	; 0xffffffd8
     758:	ldr	r0, [fp, #-32]	; 0xffffffe0
     75c:	and	r0, r0, #7
     760:	ldr	r1, [fp, #-40]	; 0xffffffd8
     764:	ldr	r2, [fp, #-36]	; 0xffffffdc
     768:	adds	r0, r0, r1
     76c:	adc	r1, r2, #0
     770:	str	r0, [fp, #-56]	; 0xffffffc8
     774:	str	r1, [fp, #-52]	; 0xffffffcc
     778:	ldr	r0, [fp, #-56]	; 0xffffffc8
     77c:	rsb	r0, r0, #0
     780:	and	r0, r0, #7
     784:	str	r0, [fp, #-44]	; 0xffffffd4
     788:	ldr	r0, [fp, #-56]	; 0xffffffc8
     78c:	ldr	r1, [fp, #-52]	; 0xffffffcc
     790:	rsbs	r0, r0, #8
     794:	rscs	r1, r1, #0
     798:	blt	844 <read_bits+0x118>
     79c:	b	7a0 <read_bits+0x74>
     7a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     7a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     7ac:	lsr	r1, r1, #3
     7b0:	orr	r1, r1, r2, lsl #29
     7b4:	asr	r3, r2, #3
     7b8:	ldr	r2, [fp, #16]
     7bc:	mov	ip, sp
     7c0:	str	r2, [ip, #8]
     7c4:	mov	r2, #0
     7c8:	str	r2, [ip, #4]
     7cc:	mov	r2, #1
     7d0:	str	r2, [ip]
     7d4:	mov	r2, r1
     7d8:	bl	cd4 <read_bytes>
     7dc:	cmp	r0, #0
     7e0:	beq	7f0 <read_bits+0xc4>
     7e4:	mvn	r0, #0
     7e8:	str	r0, [fp, #-20]	; 0xffffffec
     7ec:	b	cc8 <read_bits+0x59c>
     7f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
     7f4:	cmp	r0, #0
     7f8:	beq	810 <read_bits+0xe4>
     7fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
     800:	ldr	r1, [fp, #16]
     804:	ldrb	r2, [r1]
     808:	asr	r0, r2, r0
     80c:	strb	r0, [r1]
     810:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     814:	tst	r0, #7
     818:	beq	840 <read_bits+0x114>
     81c:	b	820 <read_bits+0xf4>
     820:	ldr	r0, [fp, #-40]	; 0xffffffd8
     824:	movw	r1, #1
     828:	lsl	r0, r1, r0
     82c:	sub	r0, r0, #1
     830:	ldr	r1, [fp, #16]
     834:	ldrb	r2, [r1]
     838:	and	r0, r2, r0
     83c:	strb	r0, [r1]
     840:	b	cc0 <read_bits+0x594>
     844:	ldr	r0, [fp, #-44]	; 0xffffffd4
     848:	cmp	r0, #0
     84c:	bne	99c <read_bits+0x270>
     850:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     854:	tst	r0, #7
     858:	beq	920 <read_bits+0x1f4>
     85c:	b	860 <read_bits+0x134>
     860:	ldr	r0, [fp, #-24]	; 0xffffffe8
     864:	ldr	r1, [fp, #-32]	; 0xffffffe0
     868:	ldr	r2, [fp, #-28]	; 0xffffffe4
     86c:	lsr	r1, r1, #3
     870:	orr	r1, r1, r2, lsl #29
     874:	asr	r3, r2, #3
     878:	mov	r2, sp
     87c:	add	ip, sp, #59	; 0x3b
     880:	str	ip, [r2, #8]
     884:	mov	ip, #0
     888:	str	ip, [r2, #4]
     88c:	mov	ip, #1
     890:	str	ip, [r2]
     894:	mov	r2, r1
     898:	bl	cd4 <read_bytes>
     89c:	cmp	r0, #0
     8a0:	beq	8b0 <read_bits+0x184>
     8a4:	mvn	r0, #0
     8a8:	str	r0, [fp, #-20]	; 0xffffffec
     8ac:	b	cc8 <read_bits+0x59c>
     8b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     8b4:	and	r0, r0, #7
     8b8:	str	r0, [sp, #60]	; 0x3c
     8bc:	ldrb	r0, [sp, #59]	; 0x3b
     8c0:	ldr	r1, [sp, #60]	; 0x3c
     8c4:	mov	r2, #1
     8c8:	mvn	r3, #0
     8cc:	add	r1, r3, r2, lsl r1
     8d0:	and	r0, r0, r1
     8d4:	ldr	r1, [fp, #16]
     8d8:	strb	r0, [r1]
     8dc:	ldr	r0, [fp, #16]
     8e0:	add	r0, r0, #1
     8e4:	str	r0, [fp, #16]
     8e8:	ldr	r0, [sp, #60]	; 0x3c
     8ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
     8f0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     8f4:	adds	r0, r1, r0
     8f8:	adc	r1, r2, #0
     8fc:	str	r0, [fp, #-32]	; 0xffffffe0
     900:	str	r1, [fp, #-28]	; 0xffffffe4
     904:	ldr	r0, [sp, #60]	; 0x3c
     908:	ldr	r1, [fp, #-40]	; 0xffffffd8
     90c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     910:	subs	r0, r1, r0
     914:	sbc	r1, r2, #0
     918:	str	r0, [fp, #-40]	; 0xffffffd8
     91c:	str	r1, [fp, #-36]	; 0xffffffdc
     920:	ldr	r0, [fp, #-40]	; 0xffffffd8
     924:	ldr	r1, [fp, #-36]	; 0xffffffdc
     928:	subs	r0, r0, #1
     92c:	sbcs	r1, r1, #0
     930:	blt	998 <read_bits+0x26c>
     934:	b	938 <read_bits+0x20c>
     938:	ldr	r0, [fp, #-24]	; 0xffffffe8
     93c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     940:	ldr	r2, [fp, #-28]	; 0xffffffe4
     944:	lsr	r1, r1, #3
     948:	orr	r1, r1, r2, lsl #29
     94c:	asr	r3, r2, #3
     950:	ldr	r2, [fp, #-40]	; 0xffffffd8
     954:	ldr	ip, [fp, #-36]	; 0xffffffdc
     958:	lsr	r2, r2, #3
     95c:	orr	r2, r2, ip, lsl #29
     960:	asr	ip, ip, #3
     964:	ldr	lr, [fp, #16]
     968:	mov	r4, sp
     96c:	str	lr, [r4, #8]
     970:	str	ip, [r4, #4]
     974:	str	r2, [r4]
     978:	mov	r2, r1
     97c:	bl	cd4 <read_bytes>
     980:	cmp	r0, #0
     984:	beq	994 <read_bits+0x268>
     988:	mvn	r0, #0
     98c:	str	r0, [fp, #-20]	; 0xffffffec
     990:	b	cc8 <read_bits+0x59c>
     994:	b	998 <read_bits+0x26c>
     998:	b	cbc <read_bits+0x590>
     99c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     9a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     9a4:	mov	r2, #24
     9a8:	mov	r3, #0
     9ac:	bl	0 <__aeabi_ldivmod>
     9b0:	orr	r2, r2, r3
     9b4:	cmp	r2, #0
     9b8:	beq	bb8 <read_bits+0x48c>
     9bc:	b	9c0 <read_bits+0x294>
     9c0:	add	r0, sp, #55	; 0x37
     9c4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     9c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     9cc:	mov	r3, #24
     9d0:	mov	ip, #0
     9d4:	str	r0, [sp, #28]
     9d8:	mov	r0, r1
     9dc:	mov	r1, r2
     9e0:	mov	r2, r3
     9e4:	mov	r3, ip
     9e8:	str	ip, [sp, #24]
     9ec:	bl	0 <__aeabi_ldivmod>
     9f0:	str	r2, [sp, #44]	; 0x2c
     9f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
     9f8:	and	r2, r2, #7
     9fc:	ldr	r3, [sp, #44]	; 0x2c
     a00:	add	r2, r2, r3
     a04:	lsr	r3, r2, #3
     a08:	mov	ip, #1
     a0c:	add	lr, ip, r2, lsr #3
     a10:	tst	r2, #7
     a14:	movne	r3, lr
     a18:	str	r3, [sp, #40]	; 0x28
     a1c:	ldr	r2, [sp, #44]	; 0x2c
     a20:	lsr	r3, r2, #3
     a24:	add	ip, ip, r2, lsr #3
     a28:	tst	r2, #7
     a2c:	movne	r3, ip
     a30:	str	r3, [sp, #36]	; 0x24
     a34:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a38:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a3c:	ldr	ip, [fp, #-28]	; 0xffffffe4
     a40:	lsr	r3, r3, #3
     a44:	orr	r3, r3, ip, lsl #29
     a48:	asr	ip, ip, #3
     a4c:	ldr	lr, [sp, #40]	; 0x28
     a50:	mov	r4, sp
     a54:	ldr	r5, [sp, #28]
     a58:	str	r5, [r4, #8]
     a5c:	ldr	r6, [sp, #24]
     a60:	str	r6, [r4, #4]
     a64:	str	lr, [r4]
     a68:	str	r0, [sp, #20]
     a6c:	mov	r0, r2
     a70:	mov	r2, r3
     a74:	mov	r3, ip
     a78:	str	r1, [sp, #16]
     a7c:	bl	cd4 <read_bytes>
     a80:	cmp	r0, #0
     a84:	beq	a94 <read_bits+0x368>
     a88:	mvn	r0, #0
     a8c:	str	r0, [fp, #-20]	; 0xffffffec
     a90:	b	cc8 <read_bits+0x59c>
     a94:	movw	r0, #0
     a98:	str	r0, [sp, #48]	; 0x30
     a9c:	str	r0, [sp, #32]
     aa0:	ldr	r0, [sp, #32]
     aa4:	ldr	r1, [sp, #40]	; 0x28
     aa8:	cmp	r0, r1
     aac:	bcs	ae8 <read_bits+0x3bc>
     ab0:	ldr	r0, [sp, #32]
     ab4:	add	r1, sp, #55	; 0x37
     ab8:	add	r0, r1, r0
     abc:	ldrb	r0, [r0]
     ac0:	add	r1, sp, #48	; 0x30
     ac4:	ldr	r2, [sp, #32]
     ac8:	movw	r3, #3
     acc:	sub	r2, r3, r2
     ad0:	add	r1, r1, r2
     ad4:	strb	r0, [r1]
     ad8:	ldr	r0, [sp, #32]
     adc:	add	r0, r0, #1
     ae0:	str	r0, [sp, #32]
     ae4:	b	aa0 <read_bits+0x374>
     ae8:	ldr	r0, [sp, #48]	; 0x30
     aec:	ldr	r1, [fp, #-44]	; 0xffffffd4
     af0:	ldr	r2, [sp, #40]	; 0x28
     af4:	rsb	r2, r2, #4
     af8:	lsl	r2, r2, #3
     afc:	add	r1, r1, r2
     b00:	lsr	r0, r0, r1
     b04:	ldr	r1, [sp, #44]	; 0x2c
     b08:	movw	r2, #1
     b0c:	lsl	r1, r2, r1
     b10:	sub	r1, r1, #1
     b14:	and	r0, r0, r1
     b18:	str	r0, [sp, #48]	; 0x30
     b1c:	movw	r0, #0
     b20:	str	r0, [sp, #32]
     b24:	ldr	r0, [sp, #32]
     b28:	ldr	r1, [sp, #36]	; 0x24
     b2c:	cmp	r0, r1
     b30:	bcs	b70 <read_bits+0x444>
     b34:	add	r0, sp, #48	; 0x30
     b38:	ldr	r1, [sp, #36]	; 0x24
     b3c:	sub	r1, r1, #1
     b40:	ldr	r2, [sp, #32]
     b44:	sub	r1, r1, r2
     b48:	add	r0, r0, r1
     b4c:	ldrb	r0, [r0]
     b50:	ldr	r1, [fp, #16]
     b54:	ldr	r2, [sp, #32]
     b58:	add	r1, r1, r2
     b5c:	strb	r0, [r1]
     b60:	ldr	r0, [sp, #32]
     b64:	add	r0, r0, #1
     b68:	str	r0, [sp, #32]
     b6c:	b	b24 <read_bits+0x3f8>
     b70:	ldr	r0, [sp, #36]	; 0x24
     b74:	ldr	r1, [fp, #16]
     b78:	add	r0, r1, r0
     b7c:	str	r0, [fp, #16]
     b80:	ldr	r0, [sp, #44]	; 0x2c
     b84:	ldr	r1, [fp, #-32]	; 0xffffffe0
     b88:	ldr	r2, [fp, #-28]	; 0xffffffe4
     b8c:	adds	r0, r1, r0
     b90:	adc	r1, r2, #0
     b94:	str	r0, [fp, #-32]	; 0xffffffe0
     b98:	str	r1, [fp, #-28]	; 0xffffffe4
     b9c:	ldr	r0, [sp, #44]	; 0x2c
     ba0:	ldr	r1, [fp, #-40]	; 0xffffffd8
     ba4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ba8:	subs	r0, r1, r0
     bac:	sbc	r1, r2, #0
     bb0:	str	r0, [fp, #-40]	; 0xffffffd8
     bb4:	str	r1, [fp, #-36]	; 0xffffffdc
     bb8:	b	bbc <read_bits+0x490>
     bbc:	ldr	r0, [fp, #-40]	; 0xffffffd8
     bc0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     bc4:	subs	r0, r0, #1
     bc8:	sbcs	r1, r1, #0
     bcc:	blt	cb8 <read_bits+0x58c>
     bd0:	b	bd4 <read_bits+0x4a8>
     bd4:	add	r0, sp, #55	; 0x37
     bd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     bdc:	ldr	r2, [fp, #-32]	; 0xffffffe0
     be0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     be4:	lsr	r2, r2, #3
     be8:	orr	r2, r2, r3, lsl #29
     bec:	asr	r3, r3, #3
     bf0:	mov	ip, sp
     bf4:	str	r0, [ip, #8]
     bf8:	mov	r0, #0
     bfc:	str	r0, [ip, #4]
     c00:	mov	r0, #4
     c04:	str	r0, [ip]
     c08:	mov	r0, r1
     c0c:	bl	cd4 <read_bytes>
     c10:	cmp	r0, #0
     c14:	beq	c24 <read_bits+0x4f8>
     c18:	mvn	r0, #0
     c1c:	str	r0, [fp, #-20]	; 0xffffffec
     c20:	b	cc8 <read_bits+0x59c>
     c24:	ldrb	r0, [sp, #58]	; 0x3a
     c28:	strb	r0, [sp, #48]	; 0x30
     c2c:	ldrb	r0, [sp, #57]	; 0x39
     c30:	strb	r0, [sp, #49]	; 0x31
     c34:	ldrb	r0, [sp, #56]	; 0x38
     c38:	strb	r0, [sp, #50]	; 0x32
     c3c:	ldrb	r0, [sp, #55]	; 0x37
     c40:	strb	r0, [sp, #51]	; 0x33
     c44:	ldr	r0, [fp, #-44]	; 0xffffffd4
     c48:	ldr	r1, [sp, #48]	; 0x30
     c4c:	lsr	r0, r1, r0
     c50:	str	r0, [sp, #48]	; 0x30
     c54:	ldrb	r0, [sp, #50]	; 0x32
     c58:	ldr	r1, [fp, #16]
     c5c:	strb	r0, [r1]
     c60:	ldrb	r0, [sp, #49]	; 0x31
     c64:	ldr	r1, [fp, #16]
     c68:	strb	r0, [r1, #1]
     c6c:	ldrb	r0, [sp, #48]	; 0x30
     c70:	ldr	r1, [fp, #16]
     c74:	strb	r0, [r1, #2]
     c78:	ldr	r0, [fp, #16]
     c7c:	add	r0, r0, #3
     c80:	str	r0, [fp, #16]
     c84:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c88:	ldr	r1, [fp, #-28]	; 0xffffffe4
     c8c:	adds	r0, r0, #24
     c90:	adc	r1, r1, #0
     c94:	str	r0, [fp, #-32]	; 0xffffffe0
     c98:	str	r1, [fp, #-28]	; 0xffffffe4
     c9c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     ca0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     ca4:	subs	r0, r0, #24
     ca8:	sbc	r1, r1, #0
     cac:	str	r0, [fp, #-40]	; 0xffffffd8
     cb0:	str	r1, [fp, #-36]	; 0xffffffdc
     cb4:	b	bbc <read_bits+0x490>
     cb8:	b	cbc <read_bits+0x590>
     cbc:	b	cc0 <read_bits+0x594>
     cc0:	movw	r0, #0
     cc4:	str	r0, [fp, #-20]	; 0xffffffec
     cc8:	ldr	r0, [fp, #-20]	; 0xffffffec
     ccc:	sub	sp, fp, #16
     cd0:	pop	{r4, r5, r6, sl, fp, pc}

00000cd4 <read_bytes>:
     cd4:	push	{fp, lr}
     cd8:	mov	fp, sp
     cdc:	sub	sp, sp, #112	; 0x70
     ce0:	ldr	r1, [fp, #12]
     ce4:	ldr	ip, [fp, #8]
     ce8:	ldr	lr, [fp, #16]
     cec:	str	r0, [fp, #-8]
     cf0:	str	r3, [fp, #-12]
     cf4:	str	r2, [fp, #-16]
     cf8:	str	r1, [fp, #-20]	; 0xffffffec
     cfc:	str	ip, [fp, #-24]	; 0xffffffe8
     d00:	ldr	r0, [fp, #-8]
     d04:	ldr	r0, [r0, #48]	; 0x30
     d08:	movw	r1, #0
     d0c:	cmp	r0, r1
     d10:	beq	e28 <read_bytes+0x154>
     d14:	ldr	r0, [fp, #-16]
     d18:	ldr	r1, [fp, #-12]
     d1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d20:	ldr	r3, [fp, #-20]	; 0xffffffec
     d24:	adds	r0, r0, r2
     d28:	adc	r1, r1, r3
     d2c:	ldr	r2, [fp, #-8]
     d30:	ldr	r3, [r2, #40]	; 0x28
     d34:	ldr	r2, [r2, #44]	; 0x2c
     d38:	subs	r0, r3, r0
     d3c:	sbcs	r1, r2, r1
     d40:	bcs	e08 <read_bytes+0x134>
     d44:	b	d48 <read_bytes+0x74>
     d48:	ldr	r0, [fp, #-8]
     d4c:	ldr	r0, [r0, #16]
     d50:	cmp	r0, #0
     d54:	beq	d68 <read_bytes+0x94>
     d58:	ldr	r0, [fp, #-8]
     d5c:	ldr	r0, [r0, #16]
     d60:	cmp	r0, #1
     d64:	bne	d84 <read_bytes+0xb0>
     d68:	mvn	r0, #300	; 0x12c
     d6c:	movw	r1, #0
     d70:	movt	r1, #0
     d74:	bl	0 <coda_set_error>
     d78:	mvn	r0, #0
     d7c:	str	r0, [fp, #-4]
     d80:	b	f1c <read_bytes+0x248>
     d84:	add	r2, sp, #25
     d88:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d8c:	ldr	r1, [fp, #-20]	; 0xffffffec
     d90:	sub	r3, fp, #45	; 0x2d
     d94:	str	r2, [sp, #20]
     d98:	mov	r2, r3
     d9c:	bl	0 <coda_str64>
     da0:	ldr	r0, [fp, #-16]
     da4:	ldr	r1, [fp, #-12]
     da8:	add	r2, sp, #46	; 0x2e
     dac:	bl	0 <coda_str64>
     db0:	ldr	r0, [fp, #-8]
     db4:	ldr	r1, [r0, #40]	; 0x28
     db8:	ldr	r0, [r0, #44]	; 0x2c
     dbc:	str	r0, [sp, #16]
     dc0:	mov	r0, r1
     dc4:	ldr	r1, [sp, #16]
     dc8:	ldr	r2, [sp, #20]
     dcc:	bl	0 <coda_str64>
     dd0:	add	r0, sp, #25
     dd4:	add	r3, sp, #46	; 0x2e
     dd8:	sub	r2, fp, #45	; 0x2d
     ddc:	mvn	r1, #300	; 0x12c
     de0:	str	r0, [sp, #12]
     de4:	mov	r0, r1
     de8:	movw	r1, #0
     dec:	movt	r1, #0
     df0:	ldr	ip, [sp, #12]
     df4:	str	ip, [sp]
     df8:	bl	0 <coda_set_error>
     dfc:	mvn	r0, #0
     e00:	str	r0, [fp, #-4]
     e04:	b	f1c <read_bytes+0x248>
     e08:	ldr	r0, [fp, #16]
     e0c:	ldr	r1, [fp, #-8]
     e10:	ldr	r1, [r1, #48]	; 0x30
     e14:	ldr	r2, [fp, #-16]
     e18:	add	r1, r1, r2
     e1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e20:	bl	0 <memcpy>
     e24:	b	f14 <read_bytes+0x240>
     e28:	ldr	r0, [fp, #-8]
     e2c:	ldr	r0, [r0, #16]
     e30:	cmp	r0, #0
     e34:	beq	e48 <read_bytes+0x174>
     e38:	ldr	r0, [fp, #-8]
     e3c:	ldr	r0, [r0, #16]
     e40:	cmp	r0, #1
     e44:	bne	e4c <read_bytes+0x178>
     e48:	b	e6c <read_bytes+0x198>
     e4c:	movw	r0, #0
     e50:	movt	r0, #0
     e54:	movw	r1, #0
     e58:	movt	r1, #0
     e5c:	movw	r2, #83	; 0x53
     e60:	movw	r3, #0
     e64:	movt	r3, #0
     e68:	bl	0 <__assert_fail>
     e6c:	ldr	r0, [fp, #-16]
     e70:	ldr	r1, [fp, #-12]
     e74:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e78:	ldr	r3, [fp, #-20]	; 0xffffffec
     e7c:	adds	r0, r0, r2
     e80:	adc	r1, r1, r3
     e84:	ldr	r2, [fp, #-8]
     e88:	ldr	r3, [r2, #8]
     e8c:	ldr	r2, [r2, #12]
     e90:	subs	r0, r3, r0
     e94:	sbcs	r1, r2, r1
     e98:	bcs	ebc <read_bytes+0x1e8>
     e9c:	b	ea0 <read_bytes+0x1cc>
     ea0:	mvn	r0, #300	; 0x12c
     ea4:	movw	r1, #0
     ea8:	movt	r1, #0
     eac:	bl	0 <coda_set_error>
     eb0:	mvn	r0, #0
     eb4:	str	r0, [fp, #-4]
     eb8:	b	f1c <read_bytes+0x248>
     ebc:	ldr	r0, [fp, #-8]
     ec0:	ldr	r0, [r0, #56]	; 0x38
     ec4:	ldr	r1, [fp, #16]
     ec8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ecc:	ldr	r3, [fp, #-16]
     ed0:	bl	0 <pread>
     ed4:	cmp	r0, #0
     ed8:	bge	f10 <read_bytes+0x23c>
     edc:	bl	0 <__errno_location>
     ee0:	ldr	r0, [r0]
     ee4:	bl	0 <strerror>
     ee8:	mvn	r1, #21
     eec:	str	r0, [sp, #8]
     ef0:	mov	r0, r1
     ef4:	movw	r1, #0
     ef8:	movt	r1, #0
     efc:	ldr	r2, [sp, #8]
     f00:	bl	0 <coda_set_error>
     f04:	mvn	r0, #0
     f08:	str	r0, [fp, #-4]
     f0c:	b	f1c <read_bytes+0x248>
     f10:	b	f14 <read_bytes+0x240>
     f14:	movw	r0, #0
     f18:	str	r0, [fp, #-4]
     f1c:	ldr	r0, [fp, #-4]
     f20:	mov	sp, fp
     f24:	pop	{fp, pc}

00000f28 <coda_bin_cursor_read_uint8>:
     f28:	push	{r4, sl, fp, lr}
     f2c:	add	fp, sp, #8
     f30:	sub	sp, sp, #112	; 0x70
     f34:	str	r0, [fp, #-16]
     f38:	str	r1, [fp, #-20]	; 0xffffffec
     f3c:	ldr	r0, [fp, #-16]
     f40:	add	r1, r0, #8
     f44:	ldr	r0, [r0, #4]
     f48:	sub	r0, r0, #1
     f4c:	add	r0, r1, r0, lsl #4
     f50:	ldr	r0, [r0]
     f54:	ldr	r0, [r0]
     f58:	cmp	r0, #100	; 0x64
     f5c:	bcs	f80 <coda_bin_cursor_read_uint8+0x58>
     f60:	ldr	r0, [fp, #-16]
     f64:	add	r1, r0, #8
     f68:	ldr	r0, [r0, #4]
     f6c:	sub	r0, r0, #1
     f70:	add	r0, r1, r0, lsl #4
     f74:	ldr	r0, [r0]
     f78:	str	r0, [sp, #32]
     f7c:	b	fa0 <coda_bin_cursor_read_uint8+0x78>
     f80:	ldr	r0, [fp, #-16]
     f84:	add	r1, r0, #8
     f88:	ldr	r0, [r0, #4]
     f8c:	sub	r0, r0, #1
     f90:	add	r0, r1, r0, lsl #4
     f94:	ldr	r0, [r0]
     f98:	ldr	r0, [r0, #4]
     f9c:	str	r0, [sp, #32]
     fa0:	ldr	r0, [sp, #32]
     fa4:	str	r0, [fp, #-24]	; 0xffffffe8
     fa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     fac:	ldr	r1, [r0, #24]
     fb0:	ldr	r0, [r0, #28]
     fb4:	str	r0, [fp, #-28]	; 0xffffffe4
     fb8:	str	r1, [fp, #-32]	; 0xffffffe0
     fbc:	ldr	r0, [fp, #-16]
     fc0:	ldr	r1, [r0, #4]
     fc4:	ldr	r1, [r0, r1, lsl #4]!
     fc8:	ldr	r0, [r0, #4]
     fcc:	str	r0, [fp, #-36]	; 0xffffffdc
     fd0:	str	r1, [fp, #-40]	; 0xffffffd8
     fd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     fd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     fdc:	and	r0, r0, r1
     fe0:	cmn	r0, #1
     fe4:	bne	10dc <coda_bin_cursor_read_uint8+0x1b4>
     fe8:	b	fec <coda_bin_cursor_read_uint8+0xc4>
     fec:	ldr	r0, [fp, #-16]
     ff0:	sub	r1, fp, #32
     ff4:	bl	0 <coda_bin_cursor_get_bit_size>
     ff8:	cmp	r0, #0
     ffc:	beq	100c <coda_bin_cursor_read_uint8+0xe4>
    1000:	mvn	r0, #0
    1004:	str	r0, [fp, #-12]
    1008:	b	1220 <coda_bin_cursor_read_uint8+0x2f8>
    100c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1010:	cmp	r0, #0
    1014:	bmi	1034 <coda_bin_cursor_read_uint8+0x10c>
    1018:	b	101c <coda_bin_cursor_read_uint8+0xf4>
    101c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1020:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1024:	subs	r0, r0, #9
    1028:	sbcs	r1, r1, #0
    102c:	blt	10d8 <coda_bin_cursor_read_uint8+0x1b0>
    1030:	b	1034 <coda_bin_cursor_read_uint8+0x10c>
    1034:	ldr	r0, [pc, #496]	; 122c <coda_bin_cursor_read_uint8+0x304>
    1038:	ldr	r1, [fp, #-32]	; 0xffffffe0
    103c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1040:	add	r3, sp, #59	; 0x3b
    1044:	str	r0, [sp, #28]
    1048:	mov	r0, r1
    104c:	mov	r1, r2
    1050:	mov	r2, r3
    1054:	str	r3, [sp, #24]
    1058:	bl	0 <coda_str64>
    105c:	ldr	r0, [fp, #-16]
    1060:	ldr	r1, [r0, #4]
    1064:	ldr	r1, [r0, r1, lsl #4]!
    1068:	ldr	r0, [r0, #4]
    106c:	lsr	r1, r1, #3
    1070:	orr	r1, r1, r0, lsl #29
    1074:	asr	r0, r0, #3
    1078:	add	r2, sp, #38	; 0x26
    107c:	str	r0, [sp, #20]
    1080:	mov	r0, r1
    1084:	ldr	r1, [sp, #20]
    1088:	str	r2, [sp, #16]
    108c:	bl	0 <coda_str64>
    1090:	ldr	r0, [fp, #-16]
    1094:	ldr	r1, [r0, #4]
    1098:	lsl	r1, r1, #4
    109c:	ldr	r0, [r1, r0]
    10a0:	and	r0, r0, #7
    10a4:	ldr	r1, [sp, #28]
    10a8:	str	r0, [sp, #12]
    10ac:	mov	r0, r1
    10b0:	movw	r1, #0
    10b4:	movt	r1, #0
    10b8:	ldr	r2, [sp, #24]
    10bc:	ldr	r3, [sp, #16]
    10c0:	ldr	ip, [sp, #12]
    10c4:	str	ip, [sp]
    10c8:	bl	0 <coda_set_error>
    10cc:	mvn	r0, #0
    10d0:	str	r0, [fp, #-12]
    10d4:	b	1220 <coda_bin_cursor_read_uint8+0x2f8>
    10d8:	b	10dc <coda_bin_cursor_read_uint8+0x1b4>
    10dc:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    10e0:	tst	r0, #7
    10e4:	bne	1108 <coda_bin_cursor_read_uint8+0x1e0>
    10e8:	b	10ec <coda_bin_cursor_read_uint8+0x1c4>
    10ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
    10f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    10f4:	eor	r0, r0, #8
    10f8:	orr	r0, r0, r1
    10fc:	cmp	r0, #0
    1100:	beq	11c0 <coda_bin_cursor_read_uint8+0x298>
    1104:	b	1108 <coda_bin_cursor_read_uint8+0x1e0>
    1108:	ldr	r0, [fp, #-32]	; 0xffffffe0
    110c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1110:	lsr	r2, r0, #3
    1114:	orr	r2, r2, r1, lsl #29
    1118:	asr	r1, r1, #3
    111c:	and	r0, r0, #7
    1120:	adds	r3, r2, #1
    1124:	adc	ip, r1, #0
    1128:	cmp	r0, #0
    112c:	movne	r2, r3
    1130:	cmp	r0, #0
    1134:	movne	r1, ip
    1138:	rsbs	r0, r2, #1
    113c:	rscs	r1, r1, #0
    1140:	blt	114c <coda_bin_cursor_read_uint8+0x224>
    1144:	b	1148 <coda_bin_cursor_read_uint8+0x220>
    1148:	b	116c <coda_bin_cursor_read_uint8+0x244>
    114c:	movw	r0, #0
    1150:	movt	r0, #0
    1154:	movw	r1, #0
    1158:	movt	r1, #0
    115c:	movw	r2, #233	; 0xe9
    1160:	movw	r3, #0
    1164:	movt	r3, #0
    1168:	bl	0 <__assert_fail>
    116c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1170:	mov	r1, #0
    1174:	strb	r1, [r0]
    1178:	ldr	r0, [fp, #-16]
    117c:	ldr	r0, [r0]
    1180:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1184:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1188:	ldr	r1, [fp, #-32]	; 0xffffffe0
    118c:	ldr	ip, [fp, #-28]	; 0xffffffe4
    1190:	ldr	lr, [fp, #-20]	; 0xffffffec
    1194:	mov	r4, sp
    1198:	str	lr, [r4, #8]
    119c:	str	ip, [r4, #4]
    11a0:	str	r1, [r4]
    11a4:	bl	72c <read_bits>
    11a8:	cmp	r0, #0
    11ac:	beq	11bc <coda_bin_cursor_read_uint8+0x294>
    11b0:	mvn	r0, #0
    11b4:	str	r0, [fp, #-12]
    11b8:	b	1220 <coda_bin_cursor_read_uint8+0x2f8>
    11bc:	b	1218 <coda_bin_cursor_read_uint8+0x2f0>
    11c0:	ldr	r0, [fp, #-16]
    11c4:	ldr	r0, [r0]
    11c8:	ldr	r1, [fp, #-40]	; 0xffffffd8
    11cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    11d0:	lsr	r1, r1, #3
    11d4:	orr	r1, r1, r2, lsl #29
    11d8:	asr	r3, r2, #3
    11dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    11e0:	mov	ip, sp
    11e4:	str	r2, [ip, #8]
    11e8:	mov	r2, #0
    11ec:	str	r2, [ip, #4]
    11f0:	mov	r2, #1
    11f4:	str	r2, [ip]
    11f8:	mov	r2, r1
    11fc:	bl	cd4 <read_bytes>
    1200:	cmp	r0, #0
    1204:	beq	1214 <coda_bin_cursor_read_uint8+0x2ec>
    1208:	mvn	r0, #0
    120c:	str	r0, [fp, #-12]
    1210:	b	1220 <coda_bin_cursor_read_uint8+0x2f8>
    1214:	b	1218 <coda_bin_cursor_read_uint8+0x2f0>
    1218:	movw	r0, #0
    121c:	str	r0, [fp, #-12]
    1220:	ldr	r0, [fp, #-12]
    1224:	sub	sp, fp, #8
    1228:	pop	{r4, sl, fp, pc}
    122c:	.word	0xfffffed4

00001230 <coda_bin_cursor_read_int16>:
    1230:	push	{r4, sl, fp, lr}
    1234:	add	fp, sp, #8
    1238:	sub	sp, sp, #128	; 0x80
    123c:	str	r0, [fp, #-16]
    1240:	str	r1, [fp, #-20]	; 0xffffffec
    1244:	ldr	r0, [fp, #-16]
    1248:	add	r1, r0, #8
    124c:	ldr	r0, [r0, #4]
    1250:	sub	r0, r0, #1
    1254:	add	r0, r1, r0, lsl #4
    1258:	ldr	r0, [r0]
    125c:	ldr	r0, [r0]
    1260:	cmp	r0, #100	; 0x64
    1264:	bcs	1288 <coda_bin_cursor_read_int16+0x58>
    1268:	ldr	r0, [fp, #-16]
    126c:	add	r1, r0, #8
    1270:	ldr	r0, [r0, #4]
    1274:	sub	r0, r0, #1
    1278:	add	r0, r1, r0, lsl #4
    127c:	ldr	r0, [r0]
    1280:	str	r0, [sp, #32]
    1284:	b	12a8 <coda_bin_cursor_read_int16+0x78>
    1288:	ldr	r0, [fp, #-16]
    128c:	add	r1, r0, #8
    1290:	ldr	r0, [r0, #4]
    1294:	sub	r0, r0, #1
    1298:	add	r0, r1, r0, lsl #4
    129c:	ldr	r0, [r0]
    12a0:	ldr	r0, [r0, #4]
    12a4:	str	r0, [sp, #32]
    12a8:	ldr	r0, [sp, #32]
    12ac:	str	r0, [fp, #-24]	; 0xffffffe8
    12b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12b4:	ldr	r1, [r0, #24]
    12b8:	ldr	r0, [r0, #28]
    12bc:	str	r0, [fp, #-28]	; 0xffffffe4
    12c0:	str	r1, [fp, #-32]	; 0xffffffe0
    12c4:	ldr	r0, [fp, #-16]
    12c8:	ldr	r1, [r0, #4]
    12cc:	ldr	r1, [r0, r1, lsl #4]!
    12d0:	ldr	r0, [r0, #4]
    12d4:	str	r0, [fp, #-36]	; 0xffffffdc
    12d8:	str	r1, [fp, #-40]	; 0xffffffd8
    12dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12e0:	ldr	r0, [r0, #44]	; 0x2c
    12e4:	str	r0, [fp, #-44]	; 0xffffffd4
    12e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    12ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    12f0:	and	r0, r0, r1
    12f4:	cmn	r0, #1
    12f8:	bne	13f0 <coda_bin_cursor_read_int16+0x1c0>
    12fc:	b	1300 <coda_bin_cursor_read_int16+0xd0>
    1300:	ldr	r0, [fp, #-16]
    1304:	sub	r1, fp, #32
    1308:	bl	0 <coda_bin_cursor_get_bit_size>
    130c:	cmp	r0, #0
    1310:	beq	1320 <coda_bin_cursor_read_int16+0xf0>
    1314:	mvn	r0, #0
    1318:	str	r0, [fp, #-12]
    131c:	b	15b0 <coda_bin_cursor_read_int16+0x380>
    1320:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1324:	cmp	r0, #0
    1328:	bmi	1348 <coda_bin_cursor_read_int16+0x118>
    132c:	b	1330 <coda_bin_cursor_read_int16+0x100>
    1330:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1334:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1338:	subs	r0, r0, #17
    133c:	sbcs	r1, r1, #0
    1340:	blt	13ec <coda_bin_cursor_read_int16+0x1bc>
    1344:	b	1348 <coda_bin_cursor_read_int16+0x118>
    1348:	ldr	r0, [pc, #620]	; 15bc <coda_bin_cursor_read_int16+0x38c>
    134c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1350:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1354:	sub	r3, fp, #65	; 0x41
    1358:	str	r0, [sp, #28]
    135c:	mov	r0, r1
    1360:	mov	r1, r2
    1364:	mov	r2, r3
    1368:	str	r3, [sp, #24]
    136c:	bl	0 <coda_str64>
    1370:	ldr	r0, [fp, #-16]
    1374:	ldr	r1, [r0, #4]
    1378:	ldr	r1, [r0, r1, lsl #4]!
    137c:	ldr	r0, [r0, #4]
    1380:	lsr	r1, r1, #3
    1384:	orr	r1, r1, r0, lsl #29
    1388:	asr	r0, r0, #3
    138c:	add	r2, sp, #50	; 0x32
    1390:	str	r0, [sp, #20]
    1394:	mov	r0, r1
    1398:	ldr	r1, [sp, #20]
    139c:	str	r2, [sp, #16]
    13a0:	bl	0 <coda_str64>
    13a4:	ldr	r0, [fp, #-16]
    13a8:	ldr	r1, [r0, #4]
    13ac:	lsl	r1, r1, #4
    13b0:	ldr	r0, [r1, r0]
    13b4:	and	r0, r0, #7
    13b8:	ldr	r1, [sp, #28]
    13bc:	str	r0, [sp, #12]
    13c0:	mov	r0, r1
    13c4:	movw	r1, #0
    13c8:	movt	r1, #0
    13cc:	ldr	r2, [sp, #24]
    13d0:	ldr	r3, [sp, #16]
    13d4:	ldr	ip, [sp, #12]
    13d8:	str	ip, [sp]
    13dc:	bl	0 <coda_set_error>
    13e0:	mvn	r0, #0
    13e4:	str	r0, [fp, #-12]
    13e8:	b	15b0 <coda_bin_cursor_read_int16+0x380>
    13ec:	b	13f0 <coda_bin_cursor_read_int16+0x1c0>
    13f0:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    13f4:	tst	r0, #7
    13f8:	bne	141c <coda_bin_cursor_read_int16+0x1ec>
    13fc:	b	1400 <coda_bin_cursor_read_int16+0x1d0>
    1400:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1404:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1408:	eor	r0, r0, #16
    140c:	orr	r0, r0, r1
    1410:	cmp	r0, #0
    1414:	beq	14b0 <coda_bin_cursor_read_int16+0x280>
    1418:	b	141c <coda_bin_cursor_read_int16+0x1ec>
    141c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1420:	str	r0, [sp, #44]	; 0x2c
    1424:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1428:	cmp	r0, #0
    142c:	bne	145c <coda_bin_cursor_read_int16+0x22c>
    1430:	ldr	r0, [fp, #-20]	; 0xffffffec
    1434:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1438:	ldr	r2, [fp, #-28]	; 0xffffffe4
    143c:	lsr	r3, r1, #3
    1440:	orr	r2, r3, r2, lsl #29
    1444:	add	r3, r2, #1
    1448:	tst	r1, #7
    144c:	movne	r2, r3
    1450:	rsb	r1, r2, #2
    1454:	add	r0, r0, r1
    1458:	str	r0, [sp, #44]	; 0x2c
    145c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1460:	mov	r1, #0
    1464:	strh	r1, [r0]
    1468:	ldr	r0, [fp, #-16]
    146c:	ldr	r0, [r0]
    1470:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1474:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1478:	ldr	r1, [fp, #-32]	; 0xffffffe0
    147c:	ldr	ip, [fp, #-28]	; 0xffffffe4
    1480:	ldr	lr, [sp, #44]	; 0x2c
    1484:	mov	r4, sp
    1488:	str	lr, [r4, #8]
    148c:	str	ip, [r4, #4]
    1490:	str	r1, [r4]
    1494:	bl	72c <read_bits>
    1498:	cmp	r0, #0
    149c:	beq	14ac <coda_bin_cursor_read_int16+0x27c>
    14a0:	mvn	r0, #0
    14a4:	str	r0, [fp, #-12]
    14a8:	b	15b0 <coda_bin_cursor_read_int16+0x380>
    14ac:	b	1508 <coda_bin_cursor_read_int16+0x2d8>
    14b0:	ldr	r0, [fp, #-16]
    14b4:	ldr	r0, [r0]
    14b8:	ldr	r1, [fp, #-40]	; 0xffffffd8
    14bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    14c0:	lsr	r1, r1, #3
    14c4:	orr	r1, r1, r2, lsl #29
    14c8:	asr	r3, r2, #3
    14cc:	ldr	r2, [fp, #-20]	; 0xffffffec
    14d0:	mov	ip, sp
    14d4:	str	r2, [ip, #8]
    14d8:	mov	r2, #0
    14dc:	str	r2, [ip, #4]
    14e0:	mov	r2, #2
    14e4:	str	r2, [ip]
    14e8:	mov	r2, r1
    14ec:	bl	cd4 <read_bytes>
    14f0:	cmp	r0, #0
    14f4:	beq	1504 <coda_bin_cursor_read_int16+0x2d4>
    14f8:	mvn	r0, #0
    14fc:	str	r0, [fp, #-12]
    1500:	b	15b0 <coda_bin_cursor_read_int16+0x380>
    1504:	b	1508 <coda_bin_cursor_read_int16+0x2d8>
    1508:	ldr	r0, [fp, #-44]	; 0xffffffd4
    150c:	cmp	r0, #0
    1510:	bne	1538 <coda_bin_cursor_read_int16+0x308>
    1514:	ldr	r0, [fp, #-20]	; 0xffffffec
    1518:	ldrb	r0, [r0, #1]
    151c:	strb	r0, [sp, #40]	; 0x28
    1520:	ldr	r0, [fp, #-20]	; 0xffffffec
    1524:	ldrb	r0, [r0]
    1528:	strb	r0, [sp, #41]	; 0x29
    152c:	ldrh	r0, [sp, #40]	; 0x28
    1530:	ldr	r1, [fp, #-20]	; 0xffffffec
    1534:	strh	r0, [r1]
    1538:	ldr	r0, [fp, #-32]	; 0xffffffe0
    153c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1540:	rsbs	r0, r0, #15
    1544:	rscs	r1, r1, #0
    1548:	blt	15a8 <coda_bin_cursor_read_int16+0x378>
    154c:	b	1550 <coda_bin_cursor_read_int16+0x320>
    1550:	ldr	r0, [fp, #-20]	; 0xffffffec
    1554:	ldrh	r0, [r0]
    1558:	strh	r0, [sp, #38]	; 0x26
    155c:	ldrh	r0, [sp, #38]	; 0x26
    1560:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1564:	sub	r1, r1, #1
    1568:	movw	r2, #1
    156c:	lsl	r1, r2, r1
    1570:	and	r0, r0, r1
    1574:	cmp	r0, #0
    1578:	beq	15a4 <coda_bin_cursor_read_int16+0x374>
    157c:	ldrh	r0, [sp, #38]	; 0x26
    1580:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1584:	movw	r2, #1
    1588:	lsl	r1, r2, r1
    158c:	sub	r1, r1, #1
    1590:	mvn	r2, #0
    1594:	eor	r1, r1, r2
    1598:	orr	r0, r0, r1
    159c:	ldr	r1, [fp, #-20]	; 0xffffffec
    15a0:	strh	r0, [r1]
    15a4:	b	15a8 <coda_bin_cursor_read_int16+0x378>
    15a8:	movw	r0, #0
    15ac:	str	r0, [fp, #-12]
    15b0:	ldr	r0, [fp, #-12]
    15b4:	sub	sp, fp, #8
    15b8:	pop	{r4, sl, fp, pc}
    15bc:	.word	0xfffffed4

000015c0 <coda_bin_cursor_read_uint16>:
    15c0:	push	{r4, sl, fp, lr}
    15c4:	add	fp, sp, #8
    15c8:	sub	sp, sp, #128	; 0x80
    15cc:	str	r0, [fp, #-16]
    15d0:	str	r1, [fp, #-20]	; 0xffffffec
    15d4:	ldr	r0, [fp, #-16]
    15d8:	add	r1, r0, #8
    15dc:	ldr	r0, [r0, #4]
    15e0:	sub	r0, r0, #1
    15e4:	add	r0, r1, r0, lsl #4
    15e8:	ldr	r0, [r0]
    15ec:	ldr	r0, [r0]
    15f0:	cmp	r0, #100	; 0x64
    15f4:	bcs	1618 <coda_bin_cursor_read_uint16+0x58>
    15f8:	ldr	r0, [fp, #-16]
    15fc:	add	r1, r0, #8
    1600:	ldr	r0, [r0, #4]
    1604:	sub	r0, r0, #1
    1608:	add	r0, r1, r0, lsl #4
    160c:	ldr	r0, [r0]
    1610:	str	r0, [sp, #36]	; 0x24
    1614:	b	1638 <coda_bin_cursor_read_uint16+0x78>
    1618:	ldr	r0, [fp, #-16]
    161c:	add	r1, r0, #8
    1620:	ldr	r0, [r0, #4]
    1624:	sub	r0, r0, #1
    1628:	add	r0, r1, r0, lsl #4
    162c:	ldr	r0, [r0]
    1630:	ldr	r0, [r0, #4]
    1634:	str	r0, [sp, #36]	; 0x24
    1638:	ldr	r0, [sp, #36]	; 0x24
    163c:	str	r0, [fp, #-24]	; 0xffffffe8
    1640:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1644:	ldr	r1, [r0, #24]
    1648:	ldr	r0, [r0, #28]
    164c:	str	r0, [fp, #-28]	; 0xffffffe4
    1650:	str	r1, [fp, #-32]	; 0xffffffe0
    1654:	ldr	r0, [fp, #-16]
    1658:	ldr	r1, [r0, #4]
    165c:	ldr	r1, [r0, r1, lsl #4]!
    1660:	ldr	r0, [r0, #4]
    1664:	str	r0, [fp, #-36]	; 0xffffffdc
    1668:	str	r1, [fp, #-40]	; 0xffffffd8
    166c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1670:	ldr	r0, [r0, #44]	; 0x2c
    1674:	str	r0, [fp, #-44]	; 0xffffffd4
    1678:	ldr	r0, [fp, #-32]	; 0xffffffe0
    167c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1680:	and	r0, r0, r1
    1684:	cmn	r0, #1
    1688:	bne	1780 <coda_bin_cursor_read_uint16+0x1c0>
    168c:	b	1690 <coda_bin_cursor_read_uint16+0xd0>
    1690:	ldr	r0, [fp, #-16]
    1694:	sub	r1, fp, #32
    1698:	bl	0 <coda_bin_cursor_get_bit_size>
    169c:	cmp	r0, #0
    16a0:	beq	16b0 <coda_bin_cursor_read_uint16+0xf0>
    16a4:	mvn	r0, #0
    16a8:	str	r0, [fp, #-12]
    16ac:	b	18d0 <coda_bin_cursor_read_uint16+0x310>
    16b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    16b4:	cmp	r0, #0
    16b8:	bmi	16d8 <coda_bin_cursor_read_uint16+0x118>
    16bc:	b	16c0 <coda_bin_cursor_read_uint16+0x100>
    16c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    16c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    16c8:	subs	r0, r0, #17
    16cc:	sbcs	r1, r1, #0
    16d0:	blt	177c <coda_bin_cursor_read_uint16+0x1bc>
    16d4:	b	16d8 <coda_bin_cursor_read_uint16+0x118>
    16d8:	ldr	r0, [pc, #508]	; 18dc <coda_bin_cursor_read_uint16+0x31c>
    16dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    16e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    16e4:	sub	r3, fp, #65	; 0x41
    16e8:	str	r0, [sp, #32]
    16ec:	mov	r0, r1
    16f0:	mov	r1, r2
    16f4:	mov	r2, r3
    16f8:	str	r3, [sp, #28]
    16fc:	bl	0 <coda_str64>
    1700:	ldr	r0, [fp, #-16]
    1704:	ldr	r1, [r0, #4]
    1708:	ldr	r1, [r0, r1, lsl #4]!
    170c:	ldr	r0, [r0, #4]
    1710:	lsr	r1, r1, #3
    1714:	orr	r1, r1, r0, lsl #29
    1718:	asr	r0, r0, #3
    171c:	add	r2, sp, #50	; 0x32
    1720:	str	r0, [sp, #24]
    1724:	mov	r0, r1
    1728:	ldr	r1, [sp, #24]
    172c:	str	r2, [sp, #20]
    1730:	bl	0 <coda_str64>
    1734:	ldr	r0, [fp, #-16]
    1738:	ldr	r1, [r0, #4]
    173c:	lsl	r1, r1, #4
    1740:	ldr	r0, [r1, r0]
    1744:	and	r0, r0, #7
    1748:	ldr	r1, [sp, #32]
    174c:	str	r0, [sp, #16]
    1750:	mov	r0, r1
    1754:	movw	r1, #0
    1758:	movt	r1, #0
    175c:	ldr	r2, [sp, #28]
    1760:	ldr	r3, [sp, #20]
    1764:	ldr	ip, [sp, #16]
    1768:	str	ip, [sp]
    176c:	bl	0 <coda_set_error>
    1770:	mvn	r0, #0
    1774:	str	r0, [fp, #-12]
    1778:	b	18d0 <coda_bin_cursor_read_uint16+0x310>
    177c:	b	1780 <coda_bin_cursor_read_uint16+0x1c0>
    1780:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    1784:	tst	r0, #7
    1788:	bne	17ac <coda_bin_cursor_read_uint16+0x1ec>
    178c:	b	1790 <coda_bin_cursor_read_uint16+0x1d0>
    1790:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1794:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1798:	eor	r0, r0, #16
    179c:	orr	r0, r0, r1
    17a0:	cmp	r0, #0
    17a4:	beq	1840 <coda_bin_cursor_read_uint16+0x280>
    17a8:	b	17ac <coda_bin_cursor_read_uint16+0x1ec>
    17ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    17b0:	str	r0, [sp, #44]	; 0x2c
    17b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    17b8:	cmp	r0, #0
    17bc:	bne	17ec <coda_bin_cursor_read_uint16+0x22c>
    17c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    17c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    17c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    17cc:	lsr	r3, r1, #3
    17d0:	orr	r2, r3, r2, lsl #29
    17d4:	add	r3, r2, #1
    17d8:	tst	r1, #7
    17dc:	movne	r2, r3
    17e0:	rsb	r1, r2, #2
    17e4:	add	r0, r0, r1
    17e8:	str	r0, [sp, #44]	; 0x2c
    17ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    17f0:	mov	r1, #0
    17f4:	strh	r1, [r0]
    17f8:	ldr	r0, [fp, #-16]
    17fc:	ldr	r0, [r0]
    1800:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1804:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1808:	ldr	r1, [fp, #-32]	; 0xffffffe0
    180c:	ldr	ip, [fp, #-28]	; 0xffffffe4
    1810:	ldr	lr, [sp, #44]	; 0x2c
    1814:	mov	r4, sp
    1818:	str	lr, [r4, #8]
    181c:	str	ip, [r4, #4]
    1820:	str	r1, [r4]
    1824:	bl	72c <read_bits>
    1828:	cmp	r0, #0
    182c:	beq	183c <coda_bin_cursor_read_uint16+0x27c>
    1830:	mvn	r0, #0
    1834:	str	r0, [fp, #-12]
    1838:	b	18d0 <coda_bin_cursor_read_uint16+0x310>
    183c:	b	1898 <coda_bin_cursor_read_uint16+0x2d8>
    1840:	ldr	r0, [fp, #-16]
    1844:	ldr	r0, [r0]
    1848:	ldr	r1, [fp, #-40]	; 0xffffffd8
    184c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1850:	lsr	r1, r1, #3
    1854:	orr	r1, r1, r2, lsl #29
    1858:	asr	r3, r2, #3
    185c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1860:	mov	ip, sp
    1864:	str	r2, [ip, #8]
    1868:	mov	r2, #0
    186c:	str	r2, [ip, #4]
    1870:	mov	r2, #2
    1874:	str	r2, [ip]
    1878:	mov	r2, r1
    187c:	bl	cd4 <read_bytes>
    1880:	cmp	r0, #0
    1884:	beq	1894 <coda_bin_cursor_read_uint16+0x2d4>
    1888:	mvn	r0, #0
    188c:	str	r0, [fp, #-12]
    1890:	b	18d0 <coda_bin_cursor_read_uint16+0x310>
    1894:	b	1898 <coda_bin_cursor_read_uint16+0x2d8>
    1898:	ldr	r0, [fp, #-44]	; 0xffffffd4
    189c:	cmp	r0, #0
    18a0:	bne	18c8 <coda_bin_cursor_read_uint16+0x308>
    18a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    18a8:	ldrb	r0, [r0, #1]
    18ac:	strb	r0, [sp, #40]	; 0x28
    18b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    18b4:	ldrb	r0, [r0]
    18b8:	strb	r0, [sp, #41]	; 0x29
    18bc:	ldrh	r0, [sp, #40]	; 0x28
    18c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    18c4:	strh	r0, [r1]
    18c8:	movw	r0, #0
    18cc:	str	r0, [fp, #-12]
    18d0:	ldr	r0, [fp, #-12]
    18d4:	sub	sp, fp, #8
    18d8:	pop	{r4, sl, fp, pc}
    18dc:	.word	0xfffffed4

000018e0 <coda_bin_cursor_read_int32>:
    18e0:	push	{r4, sl, fp, lr}
    18e4:	add	fp, sp, #8
    18e8:	sub	sp, sp, #128	; 0x80
    18ec:	str	r0, [fp, #-16]
    18f0:	str	r1, [fp, #-20]	; 0xffffffec
    18f4:	ldr	r0, [fp, #-16]
    18f8:	add	r1, r0, #8
    18fc:	ldr	r0, [r0, #4]
    1900:	sub	r0, r0, #1
    1904:	add	r0, r1, r0, lsl #4
    1908:	ldr	r0, [r0]
    190c:	ldr	r0, [r0]
    1910:	cmp	r0, #100	; 0x64
    1914:	bcs	1938 <coda_bin_cursor_read_int32+0x58>
    1918:	ldr	r0, [fp, #-16]
    191c:	add	r1, r0, #8
    1920:	ldr	r0, [r0, #4]
    1924:	sub	r0, r0, #1
    1928:	add	r0, r1, r0, lsl #4
    192c:	ldr	r0, [r0]
    1930:	str	r0, [sp, #32]
    1934:	b	1958 <coda_bin_cursor_read_int32+0x78>
    1938:	ldr	r0, [fp, #-16]
    193c:	add	r1, r0, #8
    1940:	ldr	r0, [r0, #4]
    1944:	sub	r0, r0, #1
    1948:	add	r0, r1, r0, lsl #4
    194c:	ldr	r0, [r0]
    1950:	ldr	r0, [r0, #4]
    1954:	str	r0, [sp, #32]
    1958:	ldr	r0, [sp, #32]
    195c:	str	r0, [fp, #-24]	; 0xffffffe8
    1960:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1964:	ldr	r1, [r0, #24]
    1968:	ldr	r0, [r0, #28]
    196c:	str	r0, [fp, #-28]	; 0xffffffe4
    1970:	str	r1, [fp, #-32]	; 0xffffffe0
    1974:	ldr	r0, [fp, #-16]
    1978:	ldr	r1, [r0, #4]
    197c:	ldr	r1, [r0, r1, lsl #4]!
    1980:	ldr	r0, [r0, #4]
    1984:	str	r0, [fp, #-36]	; 0xffffffdc
    1988:	str	r1, [fp, #-40]	; 0xffffffd8
    198c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1990:	ldr	r0, [r0, #44]	; 0x2c
    1994:	str	r0, [fp, #-44]	; 0xffffffd4
    1998:	ldr	r0, [fp, #-32]	; 0xffffffe0
    199c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    19a0:	and	r0, r0, r1
    19a4:	cmn	r0, #1
    19a8:	bne	1aa0 <coda_bin_cursor_read_int32+0x1c0>
    19ac:	b	19b0 <coda_bin_cursor_read_int32+0xd0>
    19b0:	ldr	r0, [fp, #-16]
    19b4:	sub	r1, fp, #32
    19b8:	bl	0 <coda_bin_cursor_get_bit_size>
    19bc:	cmp	r0, #0
    19c0:	beq	19d0 <coda_bin_cursor_read_int32+0xf0>
    19c4:	mvn	r0, #0
    19c8:	str	r0, [fp, #-12]
    19cc:	b	1c78 <coda_bin_cursor_read_int32+0x398>
    19d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    19d4:	cmp	r0, #0
    19d8:	bmi	19f8 <coda_bin_cursor_read_int32+0x118>
    19dc:	b	19e0 <coda_bin_cursor_read_int32+0x100>
    19e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    19e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    19e8:	subs	r0, r0, #33	; 0x21
    19ec:	sbcs	r1, r1, #0
    19f0:	blt	1a9c <coda_bin_cursor_read_int32+0x1bc>
    19f4:	b	19f8 <coda_bin_cursor_read_int32+0x118>
    19f8:	ldr	r0, [pc, #644]	; 1c84 <coda_bin_cursor_read_int32+0x3a4>
    19fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1a00:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1a04:	sub	r3, fp, #65	; 0x41
    1a08:	str	r0, [sp, #28]
    1a0c:	mov	r0, r1
    1a10:	mov	r1, r2
    1a14:	mov	r2, r3
    1a18:	str	r3, [sp, #24]
    1a1c:	bl	0 <coda_str64>
    1a20:	ldr	r0, [fp, #-16]
    1a24:	ldr	r1, [r0, #4]
    1a28:	ldr	r1, [r0, r1, lsl #4]!
    1a2c:	ldr	r0, [r0, #4]
    1a30:	lsr	r1, r1, #3
    1a34:	orr	r1, r1, r0, lsl #29
    1a38:	asr	r0, r0, #3
    1a3c:	add	r2, sp, #50	; 0x32
    1a40:	str	r0, [sp, #20]
    1a44:	mov	r0, r1
    1a48:	ldr	r1, [sp, #20]
    1a4c:	str	r2, [sp, #16]
    1a50:	bl	0 <coda_str64>
    1a54:	ldr	r0, [fp, #-16]
    1a58:	ldr	r1, [r0, #4]
    1a5c:	lsl	r1, r1, #4
    1a60:	ldr	r0, [r1, r0]
    1a64:	and	r0, r0, #7
    1a68:	ldr	r1, [sp, #28]
    1a6c:	str	r0, [sp, #12]
    1a70:	mov	r0, r1
    1a74:	movw	r1, #0
    1a78:	movt	r1, #0
    1a7c:	ldr	r2, [sp, #24]
    1a80:	ldr	r3, [sp, #16]
    1a84:	ldr	ip, [sp, #12]
    1a88:	str	ip, [sp]
    1a8c:	bl	0 <coda_set_error>
    1a90:	mvn	r0, #0
    1a94:	str	r0, [fp, #-12]
    1a98:	b	1c78 <coda_bin_cursor_read_int32+0x398>
    1a9c:	b	1aa0 <coda_bin_cursor_read_int32+0x1c0>
    1aa0:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    1aa4:	tst	r0, #7
    1aa8:	bne	1acc <coda_bin_cursor_read_int32+0x1ec>
    1aac:	b	1ab0 <coda_bin_cursor_read_int32+0x1d0>
    1ab0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1ab4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1ab8:	eor	r0, r0, #32
    1abc:	orr	r0, r0, r1
    1ac0:	cmp	r0, #0
    1ac4:	beq	1b60 <coda_bin_cursor_read_int32+0x280>
    1ac8:	b	1acc <coda_bin_cursor_read_int32+0x1ec>
    1acc:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ad0:	str	r0, [sp, #44]	; 0x2c
    1ad4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1ad8:	cmp	r0, #0
    1adc:	bne	1b0c <coda_bin_cursor_read_int32+0x22c>
    1ae0:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ae4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1ae8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1aec:	lsr	r3, r1, #3
    1af0:	orr	r2, r3, r2, lsl #29
    1af4:	add	r3, r2, #1
    1af8:	tst	r1, #7
    1afc:	movne	r2, r3
    1b00:	rsb	r1, r2, #4
    1b04:	add	r0, r0, r1
    1b08:	str	r0, [sp, #44]	; 0x2c
    1b0c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b10:	mov	r1, #0
    1b14:	str	r1, [r0]
    1b18:	ldr	r0, [fp, #-16]
    1b1c:	ldr	r0, [r0]
    1b20:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1b24:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1b28:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1b2c:	ldr	ip, [fp, #-28]	; 0xffffffe4
    1b30:	ldr	lr, [sp, #44]	; 0x2c
    1b34:	mov	r4, sp
    1b38:	str	lr, [r4, #8]
    1b3c:	str	ip, [r4, #4]
    1b40:	str	r1, [r4]
    1b44:	bl	72c <read_bits>
    1b48:	cmp	r0, #0
    1b4c:	beq	1b5c <coda_bin_cursor_read_int32+0x27c>
    1b50:	mvn	r0, #0
    1b54:	str	r0, [fp, #-12]
    1b58:	b	1c78 <coda_bin_cursor_read_int32+0x398>
    1b5c:	b	1bb8 <coda_bin_cursor_read_int32+0x2d8>
    1b60:	ldr	r0, [fp, #-16]
    1b64:	ldr	r0, [r0]
    1b68:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1b6c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1b70:	lsr	r1, r1, #3
    1b74:	orr	r1, r1, r2, lsl #29
    1b78:	asr	r3, r2, #3
    1b7c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b80:	mov	ip, sp
    1b84:	str	r2, [ip, #8]
    1b88:	mov	r2, #0
    1b8c:	str	r2, [ip, #4]
    1b90:	mov	r2, #4
    1b94:	str	r2, [ip]
    1b98:	mov	r2, r1
    1b9c:	bl	cd4 <read_bytes>
    1ba0:	cmp	r0, #0
    1ba4:	beq	1bb4 <coda_bin_cursor_read_int32+0x2d4>
    1ba8:	mvn	r0, #0
    1bac:	str	r0, [fp, #-12]
    1bb0:	b	1c78 <coda_bin_cursor_read_int32+0x398>
    1bb4:	b	1bb8 <coda_bin_cursor_read_int32+0x2d8>
    1bb8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1bbc:	cmp	r0, #0
    1bc0:	bne	1c00 <coda_bin_cursor_read_int32+0x320>
    1bc4:	ldr	r0, [fp, #-20]	; 0xffffffec
    1bc8:	ldrb	r0, [r0, #3]
    1bcc:	strb	r0, [sp, #40]	; 0x28
    1bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
    1bd4:	ldrb	r0, [r0, #2]
    1bd8:	strb	r0, [sp, #41]	; 0x29
    1bdc:	ldr	r0, [fp, #-20]	; 0xffffffec
    1be0:	ldrb	r0, [r0, #1]
    1be4:	strb	r0, [sp, #42]	; 0x2a
    1be8:	ldr	r0, [fp, #-20]	; 0xffffffec
    1bec:	ldrb	r0, [r0]
    1bf0:	strb	r0, [sp, #43]	; 0x2b
    1bf4:	ldr	r0, [sp, #40]	; 0x28
    1bf8:	ldr	r1, [fp, #-20]	; 0xffffffec
    1bfc:	str	r0, [r1]
    1c00:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1c04:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1c08:	rsbs	r0, r0, #31
    1c0c:	rscs	r1, r1, #0
    1c10:	blt	1c70 <coda_bin_cursor_read_int32+0x390>
    1c14:	b	1c18 <coda_bin_cursor_read_int32+0x338>
    1c18:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c1c:	ldr	r0, [r0]
    1c20:	str	r0, [sp, #36]	; 0x24
    1c24:	ldr	r0, [sp, #36]	; 0x24
    1c28:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1c2c:	sub	r1, r1, #1
    1c30:	movw	r2, #1
    1c34:	lsl	r1, r2, r1
    1c38:	and	r0, r0, r1
    1c3c:	cmp	r0, #0
    1c40:	beq	1c6c <coda_bin_cursor_read_int32+0x38c>
    1c44:	ldr	r0, [sp, #36]	; 0x24
    1c48:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1c4c:	movw	r2, #1
    1c50:	lsl	r1, r2, r1
    1c54:	sub	r1, r1, #1
    1c58:	mvn	r2, #0
    1c5c:	eor	r1, r1, r2
    1c60:	orr	r0, r0, r1
    1c64:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c68:	str	r0, [r1]
    1c6c:	b	1c70 <coda_bin_cursor_read_int32+0x390>
    1c70:	movw	r0, #0
    1c74:	str	r0, [fp, #-12]
    1c78:	ldr	r0, [fp, #-12]
    1c7c:	sub	sp, fp, #8
    1c80:	pop	{r4, sl, fp, pc}
    1c84:	.word	0xfffffed4

00001c88 <coda_bin_cursor_read_uint32>:
    1c88:	push	{r4, sl, fp, lr}
    1c8c:	add	fp, sp, #8
    1c90:	sub	sp, sp, #128	; 0x80
    1c94:	str	r0, [fp, #-16]
    1c98:	str	r1, [fp, #-20]	; 0xffffffec
    1c9c:	ldr	r0, [fp, #-16]
    1ca0:	add	r1, r0, #8
    1ca4:	ldr	r0, [r0, #4]
    1ca8:	sub	r0, r0, #1
    1cac:	add	r0, r1, r0, lsl #4
    1cb0:	ldr	r0, [r0]
    1cb4:	ldr	r0, [r0]
    1cb8:	cmp	r0, #100	; 0x64
    1cbc:	bcs	1ce0 <coda_bin_cursor_read_uint32+0x58>
    1cc0:	ldr	r0, [fp, #-16]
    1cc4:	add	r1, r0, #8
    1cc8:	ldr	r0, [r0, #4]
    1ccc:	sub	r0, r0, #1
    1cd0:	add	r0, r1, r0, lsl #4
    1cd4:	ldr	r0, [r0]
    1cd8:	str	r0, [sp, #36]	; 0x24
    1cdc:	b	1d00 <coda_bin_cursor_read_uint32+0x78>
    1ce0:	ldr	r0, [fp, #-16]
    1ce4:	add	r1, r0, #8
    1ce8:	ldr	r0, [r0, #4]
    1cec:	sub	r0, r0, #1
    1cf0:	add	r0, r1, r0, lsl #4
    1cf4:	ldr	r0, [r0]
    1cf8:	ldr	r0, [r0, #4]
    1cfc:	str	r0, [sp, #36]	; 0x24
    1d00:	ldr	r0, [sp, #36]	; 0x24
    1d04:	str	r0, [fp, #-24]	; 0xffffffe8
    1d08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d0c:	ldr	r1, [r0, #24]
    1d10:	ldr	r0, [r0, #28]
    1d14:	str	r0, [fp, #-28]	; 0xffffffe4
    1d18:	str	r1, [fp, #-32]	; 0xffffffe0
    1d1c:	ldr	r0, [fp, #-16]
    1d20:	ldr	r1, [r0, #4]
    1d24:	ldr	r1, [r0, r1, lsl #4]!
    1d28:	ldr	r0, [r0, #4]
    1d2c:	str	r0, [fp, #-36]	; 0xffffffdc
    1d30:	str	r1, [fp, #-40]	; 0xffffffd8
    1d34:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d38:	ldr	r0, [r0, #44]	; 0x2c
    1d3c:	str	r0, [fp, #-44]	; 0xffffffd4
    1d40:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1d44:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1d48:	and	r0, r0, r1
    1d4c:	cmn	r0, #1
    1d50:	bne	1e48 <coda_bin_cursor_read_uint32+0x1c0>
    1d54:	b	1d58 <coda_bin_cursor_read_uint32+0xd0>
    1d58:	ldr	r0, [fp, #-16]
    1d5c:	sub	r1, fp, #32
    1d60:	bl	0 <coda_bin_cursor_get_bit_size>
    1d64:	cmp	r0, #0
    1d68:	beq	1d78 <coda_bin_cursor_read_uint32+0xf0>
    1d6c:	mvn	r0, #0
    1d70:	str	r0, [fp, #-12]
    1d74:	b	1fb0 <coda_bin_cursor_read_uint32+0x328>
    1d78:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1d7c:	cmp	r0, #0
    1d80:	bmi	1da0 <coda_bin_cursor_read_uint32+0x118>
    1d84:	b	1d88 <coda_bin_cursor_read_uint32+0x100>
    1d88:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1d8c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1d90:	subs	r0, r0, #33	; 0x21
    1d94:	sbcs	r1, r1, #0
    1d98:	blt	1e44 <coda_bin_cursor_read_uint32+0x1bc>
    1d9c:	b	1da0 <coda_bin_cursor_read_uint32+0x118>
    1da0:	ldr	r0, [pc, #532]	; 1fbc <coda_bin_cursor_read_uint32+0x334>
    1da4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1da8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1dac:	sub	r3, fp, #65	; 0x41
    1db0:	str	r0, [sp, #32]
    1db4:	mov	r0, r1
    1db8:	mov	r1, r2
    1dbc:	mov	r2, r3
    1dc0:	str	r3, [sp, #28]
    1dc4:	bl	0 <coda_str64>
    1dc8:	ldr	r0, [fp, #-16]
    1dcc:	ldr	r1, [r0, #4]
    1dd0:	ldr	r1, [r0, r1, lsl #4]!
    1dd4:	ldr	r0, [r0, #4]
    1dd8:	lsr	r1, r1, #3
    1ddc:	orr	r1, r1, r0, lsl #29
    1de0:	asr	r0, r0, #3
    1de4:	add	r2, sp, #50	; 0x32
    1de8:	str	r0, [sp, #24]
    1dec:	mov	r0, r1
    1df0:	ldr	r1, [sp, #24]
    1df4:	str	r2, [sp, #20]
    1df8:	bl	0 <coda_str64>
    1dfc:	ldr	r0, [fp, #-16]
    1e00:	ldr	r1, [r0, #4]
    1e04:	lsl	r1, r1, #4
    1e08:	ldr	r0, [r1, r0]
    1e0c:	and	r0, r0, #7
    1e10:	ldr	r1, [sp, #32]
    1e14:	str	r0, [sp, #16]
    1e18:	mov	r0, r1
    1e1c:	movw	r1, #0
    1e20:	movt	r1, #0
    1e24:	ldr	r2, [sp, #28]
    1e28:	ldr	r3, [sp, #20]
    1e2c:	ldr	ip, [sp, #16]
    1e30:	str	ip, [sp]
    1e34:	bl	0 <coda_set_error>
    1e38:	mvn	r0, #0
    1e3c:	str	r0, [fp, #-12]
    1e40:	b	1fb0 <coda_bin_cursor_read_uint32+0x328>
    1e44:	b	1e48 <coda_bin_cursor_read_uint32+0x1c0>
    1e48:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    1e4c:	tst	r0, #7
    1e50:	bne	1e74 <coda_bin_cursor_read_uint32+0x1ec>
    1e54:	b	1e58 <coda_bin_cursor_read_uint32+0x1d0>
    1e58:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1e5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1e60:	eor	r0, r0, #32
    1e64:	orr	r0, r0, r1
    1e68:	cmp	r0, #0
    1e6c:	beq	1f08 <coda_bin_cursor_read_uint32+0x280>
    1e70:	b	1e74 <coda_bin_cursor_read_uint32+0x1ec>
    1e74:	ldr	r0, [fp, #-20]	; 0xffffffec
    1e78:	str	r0, [sp, #44]	; 0x2c
    1e7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1e80:	cmp	r0, #0
    1e84:	bne	1eb4 <coda_bin_cursor_read_uint32+0x22c>
    1e88:	ldr	r0, [fp, #-20]	; 0xffffffec
    1e8c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1e90:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1e94:	lsr	r3, r1, #3
    1e98:	orr	r2, r3, r2, lsl #29
    1e9c:	add	r3, r2, #1
    1ea0:	tst	r1, #7
    1ea4:	movne	r2, r3
    1ea8:	rsb	r1, r2, #4
    1eac:	add	r0, r0, r1
    1eb0:	str	r0, [sp, #44]	; 0x2c
    1eb4:	ldr	r0, [fp, #-20]	; 0xffffffec
    1eb8:	mov	r1, #0
    1ebc:	str	r1, [r0]
    1ec0:	ldr	r0, [fp, #-16]
    1ec4:	ldr	r0, [r0]
    1ec8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1ecc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1ed0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1ed4:	ldr	ip, [fp, #-28]	; 0xffffffe4
    1ed8:	ldr	lr, [sp, #44]	; 0x2c
    1edc:	mov	r4, sp
    1ee0:	str	lr, [r4, #8]
    1ee4:	str	ip, [r4, #4]
    1ee8:	str	r1, [r4]
    1eec:	bl	72c <read_bits>
    1ef0:	cmp	r0, #0
    1ef4:	beq	1f04 <coda_bin_cursor_read_uint32+0x27c>
    1ef8:	mvn	r0, #0
    1efc:	str	r0, [fp, #-12]
    1f00:	b	1fb0 <coda_bin_cursor_read_uint32+0x328>
    1f04:	b	1f60 <coda_bin_cursor_read_uint32+0x2d8>
    1f08:	ldr	r0, [fp, #-16]
    1f0c:	ldr	r0, [r0]
    1f10:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1f14:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1f18:	lsr	r1, r1, #3
    1f1c:	orr	r1, r1, r2, lsl #29
    1f20:	asr	r3, r2, #3
    1f24:	ldr	r2, [fp, #-20]	; 0xffffffec
    1f28:	mov	ip, sp
    1f2c:	str	r2, [ip, #8]
    1f30:	mov	r2, #0
    1f34:	str	r2, [ip, #4]
    1f38:	mov	r2, #4
    1f3c:	str	r2, [ip]
    1f40:	mov	r2, r1
    1f44:	bl	cd4 <read_bytes>
    1f48:	cmp	r0, #0
    1f4c:	beq	1f5c <coda_bin_cursor_read_uint32+0x2d4>
    1f50:	mvn	r0, #0
    1f54:	str	r0, [fp, #-12]
    1f58:	b	1fb0 <coda_bin_cursor_read_uint32+0x328>
    1f5c:	b	1f60 <coda_bin_cursor_read_uint32+0x2d8>
    1f60:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1f64:	cmp	r0, #0
    1f68:	bne	1fa8 <coda_bin_cursor_read_uint32+0x320>
    1f6c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f70:	ldrb	r0, [r0, #3]
    1f74:	strb	r0, [sp, #40]	; 0x28
    1f78:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f7c:	ldrb	r0, [r0, #2]
    1f80:	strb	r0, [sp, #41]	; 0x29
    1f84:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f88:	ldrb	r0, [r0, #1]
    1f8c:	strb	r0, [sp, #42]	; 0x2a
    1f90:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f94:	ldrb	r0, [r0]
    1f98:	strb	r0, [sp, #43]	; 0x2b
    1f9c:	ldr	r0, [sp, #40]	; 0x28
    1fa0:	ldr	r1, [fp, #-20]	; 0xffffffec
    1fa4:	str	r0, [r1]
    1fa8:	movw	r0, #0
    1fac:	str	r0, [fp, #-12]
    1fb0:	ldr	r0, [fp, #-12]
    1fb4:	sub	sp, fp, #8
    1fb8:	pop	{r4, sl, fp, pc}
    1fbc:	.word	0xfffffed4

00001fc0 <coda_bin_cursor_read_int64>:
    1fc0:	push	{r4, sl, fp, lr}
    1fc4:	add	fp, sp, #8
    1fc8:	sub	sp, sp, #144	; 0x90
    1fcc:	str	r0, [fp, #-16]
    1fd0:	str	r1, [fp, #-20]	; 0xffffffec
    1fd4:	ldr	r0, [fp, #-16]
    1fd8:	add	r1, r0, #8
    1fdc:	ldr	r0, [r0, #4]
    1fe0:	sub	r0, r0, #1
    1fe4:	add	r0, r1, r0, lsl #4
    1fe8:	ldr	r0, [r0]
    1fec:	ldr	r0, [r0]
    1ff0:	cmp	r0, #100	; 0x64
    1ff4:	bcs	2018 <coda_bin_cursor_read_int64+0x58>
    1ff8:	ldr	r0, [fp, #-16]
    1ffc:	add	r1, r0, #8
    2000:	ldr	r0, [r0, #4]
    2004:	sub	r0, r0, #1
    2008:	add	r0, r1, r0, lsl #4
    200c:	ldr	r0, [r0]
    2010:	str	r0, [sp, #36]	; 0x24
    2014:	b	2038 <coda_bin_cursor_read_int64+0x78>
    2018:	ldr	r0, [fp, #-16]
    201c:	add	r1, r0, #8
    2020:	ldr	r0, [r0, #4]
    2024:	sub	r0, r0, #1
    2028:	add	r0, r1, r0, lsl #4
    202c:	ldr	r0, [r0]
    2030:	ldr	r0, [r0, #4]
    2034:	str	r0, [sp, #36]	; 0x24
    2038:	ldr	r0, [sp, #36]	; 0x24
    203c:	str	r0, [fp, #-24]	; 0xffffffe8
    2040:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2044:	ldr	r1, [r0, #24]
    2048:	ldr	r0, [r0, #28]
    204c:	str	r0, [fp, #-28]	; 0xffffffe4
    2050:	str	r1, [fp, #-32]	; 0xffffffe0
    2054:	ldr	r0, [fp, #-16]
    2058:	ldr	r1, [r0, #4]
    205c:	ldr	r1, [r0, r1, lsl #4]!
    2060:	ldr	r0, [r0, #4]
    2064:	str	r0, [fp, #-36]	; 0xffffffdc
    2068:	str	r1, [fp, #-40]	; 0xffffffd8
    206c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2070:	ldr	r0, [r0, #44]	; 0x2c
    2074:	str	r0, [fp, #-44]	; 0xffffffd4
    2078:	ldr	r0, [fp, #-32]	; 0xffffffe0
    207c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2080:	and	r0, r0, r1
    2084:	cmn	r0, #1
    2088:	bne	2180 <coda_bin_cursor_read_int64+0x1c0>
    208c:	b	2090 <coda_bin_cursor_read_int64+0xd0>
    2090:	ldr	r0, [fp, #-16]
    2094:	sub	r1, fp, #32
    2098:	bl	0 <coda_bin_cursor_get_bit_size>
    209c:	cmp	r0, #0
    20a0:	beq	20b0 <coda_bin_cursor_read_int64+0xf0>
    20a4:	mvn	r0, #0
    20a8:	str	r0, [fp, #-12]
    20ac:	b	23d0 <coda_bin_cursor_read_int64+0x410>
    20b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    20b4:	cmp	r0, #0
    20b8:	bmi	20d8 <coda_bin_cursor_read_int64+0x118>
    20bc:	b	20c0 <coda_bin_cursor_read_int64+0x100>
    20c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    20c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    20c8:	subs	r0, r0, #65	; 0x41
    20cc:	sbcs	r1, r1, #0
    20d0:	blt	217c <coda_bin_cursor_read_int64+0x1bc>
    20d4:	b	20d8 <coda_bin_cursor_read_int64+0x118>
    20d8:	ldr	r0, [pc, #764]	; 23dc <coda_bin_cursor_read_int64+0x41c>
    20dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    20e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    20e4:	sub	r3, fp, #65	; 0x41
    20e8:	str	r0, [sp, #32]
    20ec:	mov	r0, r1
    20f0:	mov	r1, r2
    20f4:	mov	r2, r3
    20f8:	str	r3, [sp, #28]
    20fc:	bl	0 <coda_str64>
    2100:	ldr	r0, [fp, #-16]
    2104:	ldr	r1, [r0, #4]
    2108:	ldr	r1, [r0, r1, lsl #4]!
    210c:	ldr	r0, [r0, #4]
    2110:	lsr	r1, r1, #3
    2114:	orr	r1, r1, r0, lsl #29
    2118:	asr	r0, r0, #3
    211c:	add	r2, sp, #66	; 0x42
    2120:	str	r0, [sp, #24]
    2124:	mov	r0, r1
    2128:	ldr	r1, [sp, #24]
    212c:	str	r2, [sp, #20]
    2130:	bl	0 <coda_str64>
    2134:	ldr	r0, [fp, #-16]
    2138:	ldr	r1, [r0, #4]
    213c:	lsl	r1, r1, #4
    2140:	ldr	r0, [r1, r0]
    2144:	and	r0, r0, #7
    2148:	ldr	r1, [sp, #32]
    214c:	str	r0, [sp, #16]
    2150:	mov	r0, r1
    2154:	movw	r1, #0
    2158:	movt	r1, #0
    215c:	ldr	r2, [sp, #28]
    2160:	ldr	r3, [sp, #20]
    2164:	ldr	ip, [sp, #16]
    2168:	str	ip, [sp]
    216c:	bl	0 <coda_set_error>
    2170:	mvn	r0, #0
    2174:	str	r0, [fp, #-12]
    2178:	b	23d0 <coda_bin_cursor_read_int64+0x410>
    217c:	b	2180 <coda_bin_cursor_read_int64+0x1c0>
    2180:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    2184:	tst	r0, #7
    2188:	bne	21ac <coda_bin_cursor_read_int64+0x1ec>
    218c:	b	2190 <coda_bin_cursor_read_int64+0x1d0>
    2190:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2194:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2198:	eor	r0, r0, #64	; 0x40
    219c:	orr	r0, r0, r1
    21a0:	cmp	r0, #0
    21a4:	beq	2244 <coda_bin_cursor_read_int64+0x284>
    21a8:	b	21ac <coda_bin_cursor_read_int64+0x1ec>
    21ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    21b0:	str	r0, [sp, #60]	; 0x3c
    21b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    21b8:	cmp	r0, #0
    21bc:	bne	21ec <coda_bin_cursor_read_int64+0x22c>
    21c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    21c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    21c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    21cc:	lsr	r3, r1, #3
    21d0:	orr	r2, r3, r2, lsl #29
    21d4:	add	r3, r2, #1
    21d8:	tst	r1, #7
    21dc:	movne	r2, r3
    21e0:	rsb	r1, r2, #8
    21e4:	add	r0, r0, r1
    21e8:	str	r0, [sp, #60]	; 0x3c
    21ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    21f0:	mov	r1, #0
    21f4:	str	r1, [r0, #4]
    21f8:	str	r1, [r0]
    21fc:	ldr	r0, [fp, #-16]
    2200:	ldr	r0, [r0]
    2204:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2208:	ldr	r3, [fp, #-36]	; 0xffffffdc
    220c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2210:	ldr	ip, [fp, #-28]	; 0xffffffe4
    2214:	ldr	lr, [sp, #60]	; 0x3c
    2218:	mov	r4, sp
    221c:	str	lr, [r4, #8]
    2220:	str	ip, [r4, #4]
    2224:	str	r1, [r4]
    2228:	bl	72c <read_bits>
    222c:	cmp	r0, #0
    2230:	beq	2240 <coda_bin_cursor_read_int64+0x280>
    2234:	mvn	r0, #0
    2238:	str	r0, [fp, #-12]
    223c:	b	23d0 <coda_bin_cursor_read_int64+0x410>
    2240:	b	229c <coda_bin_cursor_read_int64+0x2dc>
    2244:	ldr	r0, [fp, #-16]
    2248:	ldr	r0, [r0]
    224c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    2250:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2254:	lsr	r1, r1, #3
    2258:	orr	r1, r1, r2, lsl #29
    225c:	asr	r3, r2, #3
    2260:	ldr	r2, [fp, #-20]	; 0xffffffec
    2264:	mov	ip, sp
    2268:	str	r2, [ip, #8]
    226c:	mov	r2, #0
    2270:	str	r2, [ip, #4]
    2274:	mov	r2, #8
    2278:	str	r2, [ip]
    227c:	mov	r2, r1
    2280:	bl	cd4 <read_bytes>
    2284:	cmp	r0, #0
    2288:	beq	2298 <coda_bin_cursor_read_int64+0x2d8>
    228c:	mvn	r0, #0
    2290:	str	r0, [fp, #-12]
    2294:	b	23d0 <coda_bin_cursor_read_int64+0x410>
    2298:	b	229c <coda_bin_cursor_read_int64+0x2dc>
    229c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    22a0:	cmp	r0, #0
    22a4:	bne	231c <coda_bin_cursor_read_int64+0x35c>
    22a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    22ac:	ldrb	r0, [r0, #7]
    22b0:	strb	r0, [sp, #48]	; 0x30
    22b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    22b8:	ldrb	r0, [r0, #6]
    22bc:	strb	r0, [sp, #49]	; 0x31
    22c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    22c4:	ldrb	r0, [r0, #5]
    22c8:	strb	r0, [sp, #50]	; 0x32
    22cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    22d0:	ldrb	r0, [r0, #4]
    22d4:	strb	r0, [sp, #51]	; 0x33
    22d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    22dc:	ldrb	r0, [r0, #3]
    22e0:	strb	r0, [sp, #52]	; 0x34
    22e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    22e8:	ldrb	r0, [r0, #2]
    22ec:	strb	r0, [sp, #53]	; 0x35
    22f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    22f4:	ldrb	r0, [r0, #1]
    22f8:	strb	r0, [sp, #54]	; 0x36
    22fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    2300:	ldrb	r0, [r0]
    2304:	strb	r0, [sp, #55]	; 0x37
    2308:	ldr	r0, [sp, #48]	; 0x30
    230c:	ldr	r1, [sp, #52]	; 0x34
    2310:	ldr	r2, [fp, #-20]	; 0xffffffec
    2314:	str	r1, [r2, #4]
    2318:	str	r0, [r2]
    231c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2320:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2324:	rsbs	r0, r0, #63	; 0x3f
    2328:	rscs	r1, r1, #0
    232c:	blt	23c8 <coda_bin_cursor_read_int64+0x408>
    2330:	b	2334 <coda_bin_cursor_read_int64+0x374>
    2334:	ldr	r0, [fp, #-20]	; 0xffffffec
    2338:	ldr	r1, [r0]
    233c:	ldr	r0, [r0, #4]
    2340:	str	r0, [sp, #44]	; 0x2c
    2344:	str	r1, [sp, #40]	; 0x28
    2348:	ldr	r0, [sp, #40]	; 0x28
    234c:	ldr	r1, [sp, #44]	; 0x2c
    2350:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2354:	sub	r3, r2, #1
    2358:	mov	ip, #1
    235c:	lsl	r3, ip, r3
    2360:	sub	lr, r2, #33	; 0x21
    2364:	cmp	lr, #0
    2368:	movwpl	r3, #0
    236c:	rsb	r2, r2, #33	; 0x21
    2370:	lsr	r2, ip, r2
    2374:	cmp	lr, #0
    2378:	lslpl	r2, ip, lr
    237c:	and	r1, r1, r2
    2380:	and	r0, r0, r3
    2384:	orr	r0, r0, r1
    2388:	cmp	r0, #0
    238c:	beq	23c4 <coda_bin_cursor_read_int64+0x404>
    2390:	b	2394 <coda_bin_cursor_read_int64+0x3d4>
    2394:	ldr	r0, [sp, #40]	; 0x28
    2398:	ldr	r1, [sp, #44]	; 0x2c
    239c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    23a0:	mov	r3, #1
    23a4:	mvn	ip, #0
    23a8:	add	r2, ip, r3, lsl r2
    23ac:	mvn	r2, r2
    23b0:	orr	r0, r0, r2
    23b4:	orr	r1, r1, r2, asr #31
    23b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    23bc:	str	r1, [r2, #4]
    23c0:	str	r0, [r2]
    23c4:	b	23c8 <coda_bin_cursor_read_int64+0x408>
    23c8:	movw	r0, #0
    23cc:	str	r0, [fp, #-12]
    23d0:	ldr	r0, [fp, #-12]
    23d4:	sub	sp, fp, #8
    23d8:	pop	{r4, sl, fp, pc}
    23dc:	.word	0xfffffed4

000023e0 <coda_bin_cursor_read_uint64>:
    23e0:	push	{r4, sl, fp, lr}
    23e4:	add	fp, sp, #8
    23e8:	sub	sp, sp, #136	; 0x88
    23ec:	str	r0, [fp, #-16]
    23f0:	str	r1, [fp, #-20]	; 0xffffffec
    23f4:	ldr	r0, [fp, #-16]
    23f8:	add	r1, r0, #8
    23fc:	ldr	r0, [r0, #4]
    2400:	sub	r0, r0, #1
    2404:	add	r0, r1, r0, lsl #4
    2408:	ldr	r0, [r0]
    240c:	ldr	r0, [r0]
    2410:	cmp	r0, #100	; 0x64
    2414:	bcs	2438 <coda_bin_cursor_read_uint64+0x58>
    2418:	ldr	r0, [fp, #-16]
    241c:	add	r1, r0, #8
    2420:	ldr	r0, [r0, #4]
    2424:	sub	r0, r0, #1
    2428:	add	r0, r1, r0, lsl #4
    242c:	ldr	r0, [r0]
    2430:	str	r0, [sp, #36]	; 0x24
    2434:	b	2458 <coda_bin_cursor_read_uint64+0x78>
    2438:	ldr	r0, [fp, #-16]
    243c:	add	r1, r0, #8
    2440:	ldr	r0, [r0, #4]
    2444:	sub	r0, r0, #1
    2448:	add	r0, r1, r0, lsl #4
    244c:	ldr	r0, [r0]
    2450:	ldr	r0, [r0, #4]
    2454:	str	r0, [sp, #36]	; 0x24
    2458:	ldr	r0, [sp, #36]	; 0x24
    245c:	str	r0, [fp, #-24]	; 0xffffffe8
    2460:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2464:	ldr	r1, [r0, #24]
    2468:	ldr	r0, [r0, #28]
    246c:	str	r0, [fp, #-28]	; 0xffffffe4
    2470:	str	r1, [fp, #-32]	; 0xffffffe0
    2474:	ldr	r0, [fp, #-16]
    2478:	ldr	r1, [r0, #4]
    247c:	ldr	r1, [r0, r1, lsl #4]!
    2480:	ldr	r0, [r0, #4]
    2484:	str	r0, [fp, #-36]	; 0xffffffdc
    2488:	str	r1, [fp, #-40]	; 0xffffffd8
    248c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2490:	ldr	r0, [r0, #44]	; 0x2c
    2494:	str	r0, [fp, #-44]	; 0xffffffd4
    2498:	ldr	r0, [fp, #-32]	; 0xffffffe0
    249c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    24a0:	and	r0, r0, r1
    24a4:	cmn	r0, #1
    24a8:	bne	25a0 <coda_bin_cursor_read_uint64+0x1c0>
    24ac:	b	24b0 <coda_bin_cursor_read_uint64+0xd0>
    24b0:	ldr	r0, [fp, #-16]
    24b4:	sub	r1, fp, #32
    24b8:	bl	0 <coda_bin_cursor_get_bit_size>
    24bc:	cmp	r0, #0
    24c0:	beq	24d0 <coda_bin_cursor_read_uint64+0xf0>
    24c4:	mvn	r0, #0
    24c8:	str	r0, [fp, #-12]
    24cc:	b	2744 <coda_bin_cursor_read_uint64+0x364>
    24d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    24d4:	cmp	r0, #0
    24d8:	bmi	24f8 <coda_bin_cursor_read_uint64+0x118>
    24dc:	b	24e0 <coda_bin_cursor_read_uint64+0x100>
    24e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    24e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    24e8:	subs	r0, r0, #65	; 0x41
    24ec:	sbcs	r1, r1, #0
    24f0:	blt	259c <coda_bin_cursor_read_uint64+0x1bc>
    24f4:	b	24f8 <coda_bin_cursor_read_uint64+0x118>
    24f8:	ldr	r0, [pc, #592]	; 2750 <coda_bin_cursor_read_uint64+0x370>
    24fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2500:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2504:	sub	r3, fp, #65	; 0x41
    2508:	str	r0, [sp, #32]
    250c:	mov	r0, r1
    2510:	mov	r1, r2
    2514:	mov	r2, r3
    2518:	str	r3, [sp, #28]
    251c:	bl	0 <coda_str64>
    2520:	ldr	r0, [fp, #-16]
    2524:	ldr	r1, [r0, #4]
    2528:	ldr	r1, [r0, r1, lsl #4]!
    252c:	ldr	r0, [r0, #4]
    2530:	lsr	r1, r1, #3
    2534:	orr	r1, r1, r0, lsl #29
    2538:	asr	r0, r0, #3
    253c:	add	r2, sp, #58	; 0x3a
    2540:	str	r0, [sp, #24]
    2544:	mov	r0, r1
    2548:	ldr	r1, [sp, #24]
    254c:	str	r2, [sp, #20]
    2550:	bl	0 <coda_str64>
    2554:	ldr	r0, [fp, #-16]
    2558:	ldr	r1, [r0, #4]
    255c:	lsl	r1, r1, #4
    2560:	ldr	r0, [r1, r0]
    2564:	and	r0, r0, #7
    2568:	ldr	r1, [sp, #32]
    256c:	str	r0, [sp, #16]
    2570:	mov	r0, r1
    2574:	movw	r1, #0
    2578:	movt	r1, #0
    257c:	ldr	r2, [sp, #28]
    2580:	ldr	r3, [sp, #20]
    2584:	ldr	ip, [sp, #16]
    2588:	str	ip, [sp]
    258c:	bl	0 <coda_set_error>
    2590:	mvn	r0, #0
    2594:	str	r0, [fp, #-12]
    2598:	b	2744 <coda_bin_cursor_read_uint64+0x364>
    259c:	b	25a0 <coda_bin_cursor_read_uint64+0x1c0>
    25a0:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    25a4:	tst	r0, #7
    25a8:	bne	25cc <coda_bin_cursor_read_uint64+0x1ec>
    25ac:	b	25b0 <coda_bin_cursor_read_uint64+0x1d0>
    25b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    25b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    25b8:	eor	r0, r0, #64	; 0x40
    25bc:	orr	r0, r0, r1
    25c0:	cmp	r0, #0
    25c4:	beq	2664 <coda_bin_cursor_read_uint64+0x284>
    25c8:	b	25cc <coda_bin_cursor_read_uint64+0x1ec>
    25cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    25d0:	str	r0, [sp, #52]	; 0x34
    25d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    25d8:	cmp	r0, #0
    25dc:	bne	260c <coda_bin_cursor_read_uint64+0x22c>
    25e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    25e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    25e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    25ec:	lsr	r3, r1, #3
    25f0:	orr	r2, r3, r2, lsl #29
    25f4:	add	r3, r2, #1
    25f8:	tst	r1, #7
    25fc:	movne	r2, r3
    2600:	rsb	r1, r2, #8
    2604:	add	r0, r0, r1
    2608:	str	r0, [sp, #52]	; 0x34
    260c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2610:	mov	r1, #0
    2614:	str	r1, [r0, #4]
    2618:	str	r1, [r0]
    261c:	ldr	r0, [fp, #-16]
    2620:	ldr	r0, [r0]
    2624:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2628:	ldr	r3, [fp, #-36]	; 0xffffffdc
    262c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2630:	ldr	ip, [fp, #-28]	; 0xffffffe4
    2634:	ldr	lr, [sp, #52]	; 0x34
    2638:	mov	r4, sp
    263c:	str	lr, [r4, #8]
    2640:	str	ip, [r4, #4]
    2644:	str	r1, [r4]
    2648:	bl	72c <read_bits>
    264c:	cmp	r0, #0
    2650:	beq	2660 <coda_bin_cursor_read_uint64+0x280>
    2654:	mvn	r0, #0
    2658:	str	r0, [fp, #-12]
    265c:	b	2744 <coda_bin_cursor_read_uint64+0x364>
    2660:	b	26bc <coda_bin_cursor_read_uint64+0x2dc>
    2664:	ldr	r0, [fp, #-16]
    2668:	ldr	r0, [r0]
    266c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    2670:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2674:	lsr	r1, r1, #3
    2678:	orr	r1, r1, r2, lsl #29
    267c:	asr	r3, r2, #3
    2680:	ldr	r2, [fp, #-20]	; 0xffffffec
    2684:	mov	ip, sp
    2688:	str	r2, [ip, #8]
    268c:	mov	r2, #0
    2690:	str	r2, [ip, #4]
    2694:	mov	r2, #8
    2698:	str	r2, [ip]
    269c:	mov	r2, r1
    26a0:	bl	cd4 <read_bytes>
    26a4:	cmp	r0, #0
    26a8:	beq	26b8 <coda_bin_cursor_read_uint64+0x2d8>
    26ac:	mvn	r0, #0
    26b0:	str	r0, [fp, #-12]
    26b4:	b	2744 <coda_bin_cursor_read_uint64+0x364>
    26b8:	b	26bc <coda_bin_cursor_read_uint64+0x2dc>
    26bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    26c0:	cmp	r0, #0
    26c4:	bne	273c <coda_bin_cursor_read_uint64+0x35c>
    26c8:	ldr	r0, [fp, #-20]	; 0xffffffec
    26cc:	ldrb	r0, [r0, #7]
    26d0:	strb	r0, [sp, #40]	; 0x28
    26d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    26d8:	ldrb	r0, [r0, #6]
    26dc:	strb	r0, [sp, #41]	; 0x29
    26e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    26e4:	ldrb	r0, [r0, #5]
    26e8:	strb	r0, [sp, #42]	; 0x2a
    26ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    26f0:	ldrb	r0, [r0, #4]
    26f4:	strb	r0, [sp, #43]	; 0x2b
    26f8:	ldr	r0, [fp, #-20]	; 0xffffffec
    26fc:	ldrb	r0, [r0, #3]
    2700:	strb	r0, [sp, #44]	; 0x2c
    2704:	ldr	r0, [fp, #-20]	; 0xffffffec
    2708:	ldrb	r0, [r0, #2]
    270c:	strb	r0, [sp, #45]	; 0x2d
    2710:	ldr	r0, [fp, #-20]	; 0xffffffec
    2714:	ldrb	r0, [r0, #1]
    2718:	strb	r0, [sp, #46]	; 0x2e
    271c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2720:	ldrb	r0, [r0]
    2724:	strb	r0, [sp, #47]	; 0x2f
    2728:	ldr	r0, [sp, #40]	; 0x28
    272c:	ldr	r1, [sp, #44]	; 0x2c
    2730:	ldr	r2, [fp, #-20]	; 0xffffffec
    2734:	str	r1, [r2, #4]
    2738:	str	r0, [r2]
    273c:	movw	r0, #0
    2740:	str	r0, [fp, #-12]
    2744:	ldr	r0, [fp, #-12]
    2748:	sub	sp, fp, #8
    274c:	pop	{r4, sl, fp, pc}
    2750:	.word	0xfffffed4

00002754 <coda_bin_cursor_read_float>:
    2754:	push	{fp, lr}
    2758:	mov	fp, sp
    275c:	sub	sp, sp, #48	; 0x30
    2760:	str	r0, [fp, #-8]
    2764:	str	r1, [fp, #-12]
    2768:	ldr	r0, [fp, #-8]
    276c:	add	r1, r0, #8
    2770:	ldr	r0, [r0, #4]
    2774:	sub	r0, r0, #1
    2778:	add	r0, r1, r0, lsl #4
    277c:	ldr	r0, [r0]
    2780:	ldr	r0, [r0]
    2784:	cmp	r0, #100	; 0x64
    2788:	bcs	27ac <coda_bin_cursor_read_float+0x58>
    278c:	ldr	r0, [fp, #-8]
    2790:	add	r1, r0, #8
    2794:	ldr	r0, [r0, #4]
    2798:	sub	r0, r0, #1
    279c:	add	r0, r1, r0, lsl #4
    27a0:	ldr	r0, [r0]
    27a4:	str	r0, [sp, #12]
    27a8:	b	27cc <coda_bin_cursor_read_float+0x78>
    27ac:	ldr	r0, [fp, #-8]
    27b0:	add	r1, r0, #8
    27b4:	ldr	r0, [r0, #4]
    27b8:	sub	r0, r0, #1
    27bc:	add	r0, r1, r0, lsl #4
    27c0:	ldr	r0, [r0]
    27c4:	ldr	r0, [r0, #4]
    27c8:	str	r0, [sp, #12]
    27cc:	ldr	r0, [sp, #12]
    27d0:	str	r0, [fp, #-16]
    27d4:	ldr	r0, [fp, #-8]
    27d8:	ldr	r1, [r0, #4]
    27dc:	ldr	r1, [r0, r1, lsl #4]!
    27e0:	ldr	r0, [r0, #4]
    27e4:	str	r0, [sp, #28]
    27e8:	str	r1, [sp, #24]
    27ec:	ldr	r0, [fp, #-16]
    27f0:	ldr	r0, [r0, #44]	; 0x2c
    27f4:	str	r0, [sp, #20]
    27f8:	ldrb	r0, [sp, #24]
    27fc:	tst	r0, #7
    2800:	beq	2850 <coda_bin_cursor_read_float+0xfc>
    2804:	b	2808 <coda_bin_cursor_read_float+0xb4>
    2808:	ldr	r0, [fp, #-8]
    280c:	ldr	r0, [r0]
    2810:	ldr	r2, [sp, #24]
    2814:	ldr	r3, [sp, #28]
    2818:	ldr	r1, [fp, #-12]
    281c:	mov	ip, sp
    2820:	str	r1, [ip, #8]
    2824:	mov	r1, #0
    2828:	str	r1, [ip, #4]
    282c:	mov	r1, #32
    2830:	str	r1, [ip]
    2834:	bl	72c <read_bits>
    2838:	cmp	r0, #0
    283c:	beq	284c <coda_bin_cursor_read_float+0xf8>
    2840:	mvn	r0, #0
    2844:	str	r0, [fp, #-4]
    2848:	b	28f8 <coda_bin_cursor_read_float+0x1a4>
    284c:	b	28a8 <coda_bin_cursor_read_float+0x154>
    2850:	ldr	r0, [fp, #-8]
    2854:	ldr	r0, [r0]
    2858:	ldr	r1, [sp, #24]
    285c:	ldr	r2, [sp, #28]
    2860:	lsr	r1, r1, #3
    2864:	orr	r1, r1, r2, lsl #29
    2868:	asr	r3, r2, #3
    286c:	ldr	r2, [fp, #-12]
    2870:	mov	ip, sp
    2874:	str	r2, [ip, #8]
    2878:	mov	r2, #0
    287c:	str	r2, [ip, #4]
    2880:	mov	r2, #4
    2884:	str	r2, [ip]
    2888:	mov	r2, r1
    288c:	bl	cd4 <read_bytes>
    2890:	cmp	r0, #0
    2894:	beq	28a4 <coda_bin_cursor_read_float+0x150>
    2898:	mvn	r0, #0
    289c:	str	r0, [fp, #-4]
    28a0:	b	28f8 <coda_bin_cursor_read_float+0x1a4>
    28a4:	b	28a8 <coda_bin_cursor_read_float+0x154>
    28a8:	ldr	r0, [sp, #20]
    28ac:	cmp	r0, #0
    28b0:	bne	28f0 <coda_bin_cursor_read_float+0x19c>
    28b4:	ldr	r0, [fp, #-12]
    28b8:	ldrb	r0, [r0, #3]
    28bc:	strb	r0, [sp, #16]
    28c0:	ldr	r0, [fp, #-12]
    28c4:	ldrb	r0, [r0, #2]
    28c8:	strb	r0, [sp, #17]
    28cc:	ldr	r0, [fp, #-12]
    28d0:	ldrb	r0, [r0, #1]
    28d4:	strb	r0, [sp, #18]
    28d8:	ldr	r0, [fp, #-12]
    28dc:	ldrb	r0, [r0]
    28e0:	strb	r0, [sp, #19]
    28e4:	vldr	s0, [sp, #16]
    28e8:	ldr	r0, [fp, #-12]
    28ec:	vstr	s0, [r0]
    28f0:	movw	r0, #0
    28f4:	str	r0, [fp, #-4]
    28f8:	ldr	r0, [fp, #-4]
    28fc:	mov	sp, fp
    2900:	pop	{fp, pc}

00002904 <coda_bin_cursor_read_double>:
    2904:	push	{fp, lr}
    2908:	mov	fp, sp
    290c:	sub	sp, sp, #8
    2910:	str	r0, [sp, #4]
    2914:	str	r1, [sp]
    2918:	ldr	r0, [sp, #4]
    291c:	ldr	r1, [sp]
    2920:	bl	292c <read_double>
    2924:	mov	sp, fp
    2928:	pop	{fp, pc}

0000292c <read_double>:
    292c:	push	{fp, lr}
    2930:	mov	fp, sp
    2934:	sub	sp, sp, #56	; 0x38
    2938:	str	r0, [fp, #-8]
    293c:	str	r1, [fp, #-12]
    2940:	ldr	r0, [fp, #-8]
    2944:	add	r1, r0, #8
    2948:	ldr	r0, [r0, #4]
    294c:	sub	r0, r0, #1
    2950:	add	r0, r1, r0, lsl #4
    2954:	ldr	r0, [r0]
    2958:	ldr	r0, [r0]
    295c:	cmp	r0, #100	; 0x64
    2960:	bcs	2984 <read_double+0x58>
    2964:	ldr	r0, [fp, #-8]
    2968:	add	r1, r0, #8
    296c:	ldr	r0, [r0, #4]
    2970:	sub	r0, r0, #1
    2974:	add	r0, r1, r0, lsl #4
    2978:	ldr	r0, [r0]
    297c:	str	r0, [sp, #12]
    2980:	b	29a4 <read_double+0x78>
    2984:	ldr	r0, [fp, #-8]
    2988:	add	r1, r0, #8
    298c:	ldr	r0, [r0, #4]
    2990:	sub	r0, r0, #1
    2994:	add	r0, r1, r0, lsl #4
    2998:	ldr	r0, [r0]
    299c:	ldr	r0, [r0, #4]
    29a0:	str	r0, [sp, #12]
    29a4:	ldr	r0, [sp, #12]
    29a8:	str	r0, [fp, #-16]
    29ac:	ldr	r0, [fp, #-8]
    29b0:	ldr	r1, [r0, #4]
    29b4:	ldr	r1, [r0, r1, lsl #4]!
    29b8:	ldr	r0, [r0, #4]
    29bc:	str	r0, [fp, #-20]	; 0xffffffec
    29c0:	str	r1, [fp, #-24]	; 0xffffffe8
    29c4:	ldr	r0, [fp, #-16]
    29c8:	ldr	r0, [r0, #44]	; 0x2c
    29cc:	str	r0, [sp, #28]
    29d0:	ldrb	r0, [fp, #-24]	; 0xffffffe8
    29d4:	tst	r0, #7
    29d8:	beq	2a28 <read_double+0xfc>
    29dc:	b	29e0 <read_double+0xb4>
    29e0:	ldr	r0, [fp, #-8]
    29e4:	ldr	r0, [r0]
    29e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    29ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    29f0:	ldr	r1, [fp, #-12]
    29f4:	mov	ip, sp
    29f8:	str	r1, [ip, #8]
    29fc:	mov	r1, #0
    2a00:	str	r1, [ip, #4]
    2a04:	mov	r1, #64	; 0x40
    2a08:	str	r1, [ip]
    2a0c:	bl	72c <read_bits>
    2a10:	cmp	r0, #0
    2a14:	beq	2a24 <read_double+0xf8>
    2a18:	mvn	r0, #0
    2a1c:	str	r0, [fp, #-4]
    2a20:	b	2b00 <read_double+0x1d4>
    2a24:	b	2a80 <read_double+0x154>
    2a28:	ldr	r0, [fp, #-8]
    2a2c:	ldr	r0, [r0]
    2a30:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2a34:	ldr	r2, [fp, #-20]	; 0xffffffec
    2a38:	lsr	r1, r1, #3
    2a3c:	orr	r1, r1, r2, lsl #29
    2a40:	asr	r3, r2, #3
    2a44:	ldr	r2, [fp, #-12]
    2a48:	mov	ip, sp
    2a4c:	str	r2, [ip, #8]
    2a50:	mov	r2, #0
    2a54:	str	r2, [ip, #4]
    2a58:	mov	r2, #8
    2a5c:	str	r2, [ip]
    2a60:	mov	r2, r1
    2a64:	bl	cd4 <read_bytes>
    2a68:	cmp	r0, #0
    2a6c:	beq	2a7c <read_double+0x150>
    2a70:	mvn	r0, #0
    2a74:	str	r0, [fp, #-4]
    2a78:	b	2b00 <read_double+0x1d4>
    2a7c:	b	2a80 <read_double+0x154>
    2a80:	ldr	r0, [sp, #28]
    2a84:	cmp	r0, #0
    2a88:	bne	2af8 <read_double+0x1cc>
    2a8c:	ldr	r0, [fp, #-12]
    2a90:	ldrb	r0, [r0, #7]
    2a94:	strb	r0, [sp, #16]
    2a98:	ldr	r0, [fp, #-12]
    2a9c:	ldrb	r0, [r0, #6]
    2aa0:	strb	r0, [sp, #17]
    2aa4:	ldr	r0, [fp, #-12]
    2aa8:	ldrb	r0, [r0, #5]
    2aac:	strb	r0, [sp, #18]
    2ab0:	ldr	r0, [fp, #-12]
    2ab4:	ldrb	r0, [r0, #4]
    2ab8:	strb	r0, [sp, #19]
    2abc:	ldr	r0, [fp, #-12]
    2ac0:	ldrb	r0, [r0, #3]
    2ac4:	strb	r0, [sp, #20]
    2ac8:	ldr	r0, [fp, #-12]
    2acc:	ldrb	r0, [r0, #2]
    2ad0:	strb	r0, [sp, #21]
    2ad4:	ldr	r0, [fp, #-12]
    2ad8:	ldrb	r0, [r0, #1]
    2adc:	strb	r0, [sp, #22]
    2ae0:	ldr	r0, [fp, #-12]
    2ae4:	ldrb	r0, [r0]
    2ae8:	strb	r0, [sp, #23]
    2aec:	vldr	d16, [sp, #16]
    2af0:	ldr	r0, [fp, #-12]
    2af4:	vstr	d16, [r0]
    2af8:	movw	r0, #0
    2afc:	str	r0, [fp, #-4]
    2b00:	ldr	r0, [fp, #-4]
    2b04:	mov	sp, fp
    2b08:	pop	{fp, pc}

00002b0c <coda_bin_cursor_read_char>:
    2b0c:	push	{fp, lr}
    2b10:	mov	fp, sp
    2b14:	sub	sp, sp, #8
    2b18:	str	r0, [sp, #4]
    2b1c:	str	r1, [sp]
    2b20:	ldr	r0, [sp, #4]
    2b24:	ldr	r1, [sp]
    2b28:	bl	f28 <coda_bin_cursor_read_uint8>
    2b2c:	mov	sp, fp
    2b30:	pop	{fp, pc}

00002b34 <coda_bin_cursor_read_string>:
    2b34:	push	{r4, sl, fp, lr}
    2b38:	add	fp, sp, #8
    2b3c:	sub	sp, sp, #128	; 0x80
    2b40:	str	r0, [fp, #-16]
    2b44:	str	r1, [fp, #-20]	; 0xffffffec
    2b48:	str	r2, [fp, #-24]	; 0xffffffe8
    2b4c:	ldr	r0, [fp, #-16]
    2b50:	add	r1, r0, #8
    2b54:	ldr	r0, [r0, #4]
    2b58:	sub	r0, r0, #1
    2b5c:	add	r0, r1, r0, lsl #4
    2b60:	ldr	r0, [r0]
    2b64:	ldr	r0, [r0]
    2b68:	cmp	r0, #100	; 0x64
    2b6c:	bcs	2b90 <coda_bin_cursor_read_string+0x5c>
    2b70:	ldr	r0, [fp, #-16]
    2b74:	add	r1, r0, #8
    2b78:	ldr	r0, [r0, #4]
    2b7c:	sub	r0, r0, #1
    2b80:	add	r0, r1, r0, lsl #4
    2b84:	ldr	r0, [r0]
    2b88:	str	r0, [sp, #32]
    2b8c:	b	2bb0 <coda_bin_cursor_read_string+0x7c>
    2b90:	ldr	r0, [fp, #-16]
    2b94:	add	r1, r0, #8
    2b98:	ldr	r0, [r0, #4]
    2b9c:	sub	r0, r0, #1
    2ba0:	add	r0, r1, r0, lsl #4
    2ba4:	ldr	r0, [r0]
    2ba8:	ldr	r0, [r0, #4]
    2bac:	str	r0, [sp, #32]
    2bb0:	ldr	r0, [sp, #32]
    2bb4:	str	r0, [fp, #-28]	; 0xffffffe4
    2bb8:	ldr	r0, [fp, #-16]
    2bbc:	ldr	r1, [r0, #4]
    2bc0:	ldr	r1, [r0, r1, lsl #4]!
    2bc4:	ldr	r0, [r0, #4]
    2bc8:	str	r0, [fp, #-36]	; 0xffffffdc
    2bcc:	str	r1, [fp, #-40]	; 0xffffffd8
    2bd0:	mov	r0, #0
    2bd4:	str	r0, [fp, #-44]	; 0xffffffd4
    2bd8:	str	r0, [fp, #-48]	; 0xffffffd0
    2bdc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2be0:	ldr	r0, [r0, #28]
    2be4:	cmn	r0, #1
    2be8:	bgt	2d10 <coda_bin_cursor_read_string+0x1dc>
    2bec:	b	2bf0 <coda_bin_cursor_read_string+0xbc>
    2bf0:	ldr	r0, [fp, #-16]
    2bf4:	sub	r1, fp, #56	; 0x38
    2bf8:	bl	0 <coda_bin_cursor_get_bit_size>
    2bfc:	cmp	r0, #0
    2c00:	beq	2c10 <coda_bin_cursor_read_string+0xdc>
    2c04:	mvn	r0, #0
    2c08:	str	r0, [fp, #-12]
    2c0c:	b	2dfc <coda_bin_cursor_read_string+0x2c8>
    2c10:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2c14:	cmn	r0, #1
    2c18:	bgt	2cc4 <coda_bin_cursor_read_string+0x190>
    2c1c:	b	2c20 <coda_bin_cursor_read_string+0xec>
    2c20:	ldr	r0, [pc, #480]	; 2e08 <coda_bin_cursor_read_string+0x2d4>
    2c24:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2c28:	ldr	r2, [fp, #-52]	; 0xffffffcc
    2c2c:	add	r3, sp, #59	; 0x3b
    2c30:	str	r0, [sp, #28]
    2c34:	mov	r0, r1
    2c38:	mov	r1, r2
    2c3c:	mov	r2, r3
    2c40:	str	r3, [sp, #24]
    2c44:	bl	0 <coda_str64>
    2c48:	ldr	r0, [fp, #-16]
    2c4c:	ldr	r1, [r0, #4]
    2c50:	ldr	r1, [r0, r1, lsl #4]!
    2c54:	ldr	r0, [r0, #4]
    2c58:	lsr	r1, r1, #3
    2c5c:	orr	r1, r1, r0, lsl #29
    2c60:	asr	r0, r0, #3
    2c64:	add	r2, sp, #38	; 0x26
    2c68:	str	r0, [sp, #20]
    2c6c:	mov	r0, r1
    2c70:	ldr	r1, [sp, #20]
    2c74:	str	r2, [sp, #16]
    2c78:	bl	0 <coda_str64>
    2c7c:	ldr	r0, [fp, #-16]
    2c80:	ldr	r1, [r0, #4]
    2c84:	lsl	r1, r1, #4
    2c88:	ldr	r0, [r1, r0]
    2c8c:	and	r0, r0, #7
    2c90:	ldr	r1, [sp, #28]
    2c94:	str	r0, [sp, #12]
    2c98:	mov	r0, r1
    2c9c:	movw	r1, #0
    2ca0:	movt	r1, #0
    2ca4:	ldr	r2, [sp, #24]
    2ca8:	ldr	r3, [sp, #16]
    2cac:	ldr	ip, [sp, #12]
    2cb0:	str	ip, [sp]
    2cb4:	bl	0 <coda_set_error>
    2cb8:	mvn	r0, #0
    2cbc:	str	r0, [fp, #-12]
    2cc0:	b	2dfc <coda_bin_cursor_read_string+0x2c8>
    2cc4:	ldrb	r0, [fp, #-56]	; 0xffffffc8
    2cc8:	tst	r0, #7
    2ccc:	beq	2cf0 <coda_bin_cursor_read_string+0x1bc>
    2cd0:	b	2cd4 <coda_bin_cursor_read_string+0x1a0>
    2cd4:	ldr	r0, [pc, #300]	; 2e08 <coda_bin_cursor_read_string+0x2d4>
    2cd8:	movw	r1, #0
    2cdc:	movt	r1, #0
    2ce0:	bl	0 <coda_set_error>
    2ce4:	mvn	r0, #0
    2ce8:	str	r0, [fp, #-12]
    2cec:	b	2dfc <coda_bin_cursor_read_string+0x2c8>
    2cf0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2cf4:	ldr	r1, [fp, #-52]	; 0xffffffcc
    2cf8:	lsr	r0, r0, #3
    2cfc:	orr	r0, r0, r1, lsl #29
    2d00:	asr	r1, r1, #3
    2d04:	str	r1, [fp, #-44]	; 0xffffffd4
    2d08:	str	r0, [fp, #-48]	; 0xffffffd0
    2d0c:	b	2d30 <coda_bin_cursor_read_string+0x1fc>
    2d10:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2d14:	ldr	r1, [r0, #24]
    2d18:	ldr	r0, [r0, #28]
    2d1c:	lsr	r1, r1, #3
    2d20:	orr	r1, r1, r0, lsl #29
    2d24:	asr	r0, r0, #3
    2d28:	str	r0, [fp, #-44]	; 0xffffffd4
    2d2c:	str	r1, [fp, #-48]	; 0xffffffd0
    2d30:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2d34:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2d38:	adds	r0, r0, #1
    2d3c:	adc	r1, r1, #0
    2d40:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2d44:	subs	r0, r2, r0
    2d48:	rscs	r1, r1, r2, asr #31
    2d4c:	bge	2d68 <coda_bin_cursor_read_string+0x234>
    2d50:	b	2d54 <coda_bin_cursor_read_string+0x220>
    2d54:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2d58:	sub	r0, r0, #1
    2d5c:	asr	r1, r0, #31
    2d60:	str	r0, [fp, #-48]	; 0xffffffd0
    2d64:	str	r1, [fp, #-44]	; 0xffffffd4
    2d68:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2d6c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2d70:	subs	r0, r0, #1
    2d74:	sbcs	r1, r1, #0
    2d78:	blt	2de8 <coda_bin_cursor_read_string+0x2b4>
    2d7c:	b	2d80 <coda_bin_cursor_read_string+0x24c>
    2d80:	ldr	r0, [fp, #-16]
    2d84:	ldr	r0, [r0]
    2d88:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2d8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2d90:	ldr	r1, [fp, #-48]	; 0xffffffd0
    2d94:	ldr	ip, [fp, #-44]	; 0xffffffd4
    2d98:	lsl	ip, ip, #3
    2d9c:	orr	ip, ip, r1, lsr #29
    2da0:	lsl	r1, r1, #3
    2da4:	ldr	lr, [fp, #-20]	; 0xffffffec
    2da8:	mov	r4, sp
    2dac:	str	lr, [r4, #8]
    2db0:	str	ip, [r4, #4]
    2db4:	str	r1, [r4]
    2db8:	bl	72c <read_bits>
    2dbc:	cmp	r0, #0
    2dc0:	beq	2dd0 <coda_bin_cursor_read_string+0x29c>
    2dc4:	mvn	r0, #0
    2dc8:	str	r0, [fp, #-12]
    2dcc:	b	2dfc <coda_bin_cursor_read_string+0x2c8>
    2dd0:	ldr	r0, [fp, #-20]	; 0xffffffec
    2dd4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    2dd8:	add	r0, r0, r1
    2ddc:	movw	r1, #0
    2de0:	strb	r1, [r0]
    2de4:	b	2df4 <coda_bin_cursor_read_string+0x2c0>
    2de8:	ldr	r0, [fp, #-20]	; 0xffffffec
    2dec:	movw	r1, #0
    2df0:	strb	r1, [r0]
    2df4:	movw	r0, #0
    2df8:	str	r0, [fp, #-12]
    2dfc:	ldr	r0, [fp, #-12]
    2e00:	sub	sp, fp, #8
    2e04:	pop	{r4, sl, fp, pc}
    2e08:	.word	0xfffffed4

00002e0c <coda_bin_cursor_read_bits>:
    2e0c:	push	{r4, sl, fp, lr}
    2e10:	add	fp, sp, #8
    2e14:	sub	sp, sp, #40	; 0x28
    2e18:	ldr	ip, [fp, #12]
    2e1c:	ldr	lr, [fp, #8]
    2e20:	str	r0, [fp, #-12]
    2e24:	str	r1, [fp, #-16]
    2e28:	str	r3, [sp, #28]
    2e2c:	str	r2, [sp, #24]
    2e30:	str	ip, [sp, #20]
    2e34:	str	lr, [sp, #16]
    2e38:	ldr	r0, [fp, #-12]
    2e3c:	ldr	r1, [r0]
    2e40:	ldr	r2, [r0, #4]
    2e44:	ldr	r2, [r0, r2, lsl #4]!
    2e48:	ldr	r0, [r0, #4]
    2e4c:	ldr	r3, [sp, #24]
    2e50:	ldr	ip, [sp, #28]
    2e54:	adds	r2, r2, r3
    2e58:	adc	r3, r0, ip
    2e5c:	ldr	r0, [sp, #16]
    2e60:	ldr	ip, [sp, #20]
    2e64:	ldr	lr, [fp, #-16]
    2e68:	mov	r4, sp
    2e6c:	str	lr, [r4, #8]
    2e70:	str	ip, [r4, #4]
    2e74:	str	r0, [r4]
    2e78:	mov	r0, r1
    2e7c:	bl	72c <read_bits>
    2e80:	sub	sp, fp, #8
    2e84:	pop	{r4, sl, fp, pc}

00002e88 <coda_bin_cursor_read_bytes>:
    2e88:	push	{r4, sl, fp, lr}
    2e8c:	add	fp, sp, #8
    2e90:	sub	sp, sp, #48	; 0x30
    2e94:	ldr	ip, [fp, #12]
    2e98:	ldr	lr, [fp, #8]
    2e9c:	str	r0, [fp, #-16]
    2ea0:	str	r1, [fp, #-20]	; 0xffffffec
    2ea4:	str	r3, [sp, #28]
    2ea8:	str	r2, [sp, #24]
    2eac:	str	ip, [sp, #20]
    2eb0:	str	lr, [sp, #16]
    2eb4:	ldr	r0, [fp, #-16]
    2eb8:	ldr	r1, [r0, #4]
    2ebc:	lsl	r1, r1, #4
    2ec0:	ldrb	r0, [r1, r0]
    2ec4:	tst	r0, #7
    2ec8:	beq	2f18 <coda_bin_cursor_read_bytes+0x90>
    2ecc:	b	2ed0 <coda_bin_cursor_read_bytes+0x48>
    2ed0:	ldr	r0, [fp, #-16]
    2ed4:	ldr	r1, [fp, #-20]	; 0xffffffec
    2ed8:	ldr	r2, [sp, #24]
    2edc:	ldr	r3, [sp, #28]
    2ee0:	lsl	r3, r3, #3
    2ee4:	orr	r3, r3, r2, lsr #29
    2ee8:	lsl	r2, r2, #3
    2eec:	ldr	ip, [sp, #16]
    2ef0:	ldr	lr, [sp, #20]
    2ef4:	lsl	lr, lr, #3
    2ef8:	orr	lr, lr, ip, lsr #29
    2efc:	lsl	ip, ip, #3
    2f00:	mov	r4, sp
    2f04:	str	lr, [r4, #4]
    2f08:	str	ip, [r4]
    2f0c:	bl	2e0c <coda_bin_cursor_read_bits>
    2f10:	str	r0, [fp, #-12]
    2f14:	b	2f70 <coda_bin_cursor_read_bytes+0xe8>
    2f18:	ldr	r0, [fp, #-16]
    2f1c:	ldr	r1, [r0]
    2f20:	ldr	r2, [r0, #4]
    2f24:	ldr	r2, [r0, r2, lsl #4]!
    2f28:	ldr	r0, [r0, #4]
    2f2c:	lsr	r2, r2, #3
    2f30:	orr	r2, r2, r0, lsl #29
    2f34:	asr	r0, r0, #3
    2f38:	ldr	r3, [sp, #24]
    2f3c:	ldr	ip, [sp, #28]
    2f40:	adds	r2, r2, r3
    2f44:	adc	r3, r0, ip
    2f48:	ldr	r0, [sp, #16]
    2f4c:	ldr	ip, [sp, #20]
    2f50:	ldr	lr, [fp, #-20]	; 0xffffffec
    2f54:	mov	r4, sp
    2f58:	str	lr, [r4, #8]
    2f5c:	str	ip, [r4, #4]
    2f60:	str	r0, [r4]
    2f64:	mov	r0, r1
    2f68:	bl	cd4 <read_bytes>
    2f6c:	str	r0, [fp, #-12]
    2f70:	ldr	r0, [fp, #-12]
    2f74:	sub	sp, fp, #8
    2f78:	pop	{r4, sl, fp, pc}

00002f7c <coda_bin_cursor_read_int8_array>:
    2f7c:	push	{fp, lr}
    2f80:	mov	fp, sp
    2f84:	sub	sp, sp, #32
    2f88:	str	r0, [fp, #-8]
    2f8c:	str	r1, [fp, #-12]
    2f90:	str	r2, [sp, #16]
    2f94:	ldr	r0, [fp, #-8]
    2f98:	add	r1, r0, #8
    2f9c:	ldr	r0, [r0, #4]
    2fa0:	sub	r0, r0, #1
    2fa4:	add	r0, r1, r0, lsl #4
    2fa8:	ldr	r0, [r0]
    2fac:	ldr	r0, [r0]
    2fb0:	cmp	r0, #100	; 0x64
    2fb4:	bcs	2fd8 <coda_bin_cursor_read_int8_array+0x5c>
    2fb8:	ldr	r0, [fp, #-8]
    2fbc:	add	r1, r0, #8
    2fc0:	ldr	r0, [r0, #4]
    2fc4:	sub	r0, r0, #1
    2fc8:	add	r0, r1, r0, lsl #4
    2fcc:	ldr	r0, [r0]
    2fd0:	str	r0, [sp, #8]
    2fd4:	b	2ff8 <coda_bin_cursor_read_int8_array+0x7c>
    2fd8:	ldr	r0, [fp, #-8]
    2fdc:	add	r1, r0, #8
    2fe0:	ldr	r0, [r0, #4]
    2fe4:	sub	r0, r0, #1
    2fe8:	add	r0, r1, r0, lsl #4
    2fec:	ldr	r0, [r0]
    2ff0:	ldr	r0, [r0, #4]
    2ff4:	str	r0, [sp, #8]
    2ff8:	ldr	r0, [sp, #8]
    2ffc:	str	r0, [sp, #12]
    3000:	ldr	r0, [sp, #12]
    3004:	ldr	r0, [r0, #40]	; 0x28
    3008:	ldr	r0, [r0]
    300c:	cmp	r0, #1
    3010:	bne	3048 <coda_bin_cursor_read_int8_array+0xcc>
    3014:	ldr	r0, [fp, #-8]
    3018:	ldr	r2, [fp, #-12]
    301c:	ldr	r1, [sp, #16]
    3020:	movw	r3, #0
    3024:	movt	r3, #0
    3028:	str	r1, [sp, #4]
    302c:	mov	r1, r3
    3030:	movw	r3, #1
    3034:	ldr	ip, [sp, #4]
    3038:	str	ip, [sp]
    303c:	bl	30fc <read_array>
    3040:	str	r0, [fp, #-4]
    3044:	b	30f0 <coda_bin_cursor_read_int8_array+0x174>
    3048:	ldr	r0, [sp, #12]
    304c:	ldr	r0, [r0, #40]	; 0x28
    3050:	ldr	r0, [r0]
    3054:	cmp	r0, #0
    3058:	bne	3060 <coda_bin_cursor_read_int8_array+0xe4>
    305c:	b	3080 <coda_bin_cursor_read_int8_array+0x104>
    3060:	movw	r0, #0
    3064:	movt	r0, #0
    3068:	movw	r1, #0
    306c:	movt	r1, #0
    3070:	movw	r2, #906	; 0x38a
    3074:	movw	r3, #0
    3078:	movt	r3, #0
    307c:	bl	0 <__assert_fail>
    3080:	ldr	r0, [fp, #-8]
    3084:	ldr	r2, [fp, #-12]
    3088:	movw	r1, #0
    308c:	movt	r1, #0
    3090:	movw	r3, #1
    3094:	movw	ip, #0
    3098:	str	ip, [sp]
    309c:	bl	30fc <read_array>
    30a0:	cmp	r0, #0
    30a4:	beq	30b4 <coda_bin_cursor_read_int8_array+0x138>
    30a8:	mvn	r0, #0
    30ac:	str	r0, [fp, #-4]
    30b0:	b	30f0 <coda_bin_cursor_read_int8_array+0x174>
    30b4:	ldr	r0, [sp, #16]
    30b8:	cmp	r0, #0
    30bc:	beq	30e8 <coda_bin_cursor_read_int8_array+0x16c>
    30c0:	ldr	r0, [fp, #-8]
    30c4:	ldr	r1, [fp, #-12]
    30c8:	movw	r2, #1
    30cc:	bl	34e0 <transpose_array>
    30d0:	cmp	r0, #0
    30d4:	beq	30e4 <coda_bin_cursor_read_int8_array+0x168>
    30d8:	mvn	r0, #0
    30dc:	str	r0, [fp, #-4]
    30e0:	b	30f0 <coda_bin_cursor_read_int8_array+0x174>
    30e4:	b	30e8 <coda_bin_cursor_read_int8_array+0x16c>
    30e8:	movw	r0, #0
    30ec:	str	r0, [fp, #-4]
    30f0:	ldr	r0, [fp, #-4]
    30f4:	mov	sp, fp
    30f8:	pop	{fp, pc}

000030fc <read_array>:
    30fc:	push	{r4, r5, fp, lr}
    3100:	add	fp, sp, #8
    3104:	sub	sp, sp, #664	; 0x298
    3108:	ldr	ip, [fp, #8]
    310c:	add	lr, sp, #88	; 0x58
    3110:	str	r0, [fp, #-16]
    3114:	str	r1, [fp, #-20]	; 0xffffffec
    3118:	str	r2, [fp, #-24]	; 0xffffffe8
    311c:	str	r3, [fp, #-28]	; 0xffffffe4
    3120:	ldr	r0, [fp, #-16]
    3124:	add	r1, sp, #84	; 0x54
    3128:	mov	r2, lr
    312c:	str	ip, [sp, #24]
    3130:	bl	0 <coda_cursor_get_array_dim>
    3134:	cmp	r0, #0
    3138:	beq	3148 <read_array+0x4c>
    313c:	mvn	r0, #0
    3140:	str	r0, [fp, #-12]
    3144:	b	34d4 <read_array+0x3d8>
    3148:	ldr	r0, [fp, #-16]
    314c:	add	r1, sp, #120	; 0x78
    3150:	str	r0, [sp, #20]
    3154:	mov	r0, r1
    3158:	ldr	r1, [sp, #20]
    315c:	movw	r2, #520	; 0x208
    3160:	bl	0 <memcpy>
    3164:	ldr	r0, [sp, #84]	; 0x54
    3168:	cmp	r0, #1
    316c:	ble	317c <read_array+0x80>
    3170:	ldr	r0, [fp, #8]
    3174:	cmp	r0, #1
    3178:	beq	329c <read_array+0x1a0>
    317c:	movw	r0, #1
    3180:	str	r0, [sp, #80]	; 0x50
    3184:	movw	r0, #0
    3188:	str	r0, [sp, #76]	; 0x4c
    318c:	ldr	r0, [sp, #76]	; 0x4c
    3190:	ldr	r1, [sp, #84]	; 0x54
    3194:	cmp	r0, r1
    3198:	bge	31c8 <read_array+0xcc>
    319c:	ldr	r0, [sp, #76]	; 0x4c
    31a0:	add	r1, sp, #88	; 0x58
    31a4:	add	r0, r1, r0, lsl #2
    31a8:	ldr	r0, [r0]
    31ac:	ldr	r1, [sp, #80]	; 0x50
    31b0:	mul	r0, r1, r0
    31b4:	str	r0, [sp, #80]	; 0x50
    31b8:	ldr	r0, [sp, #76]	; 0x4c
    31bc:	add	r0, r0, #1
    31c0:	str	r0, [sp, #76]	; 0x4c
    31c4:	b	318c <read_array+0x90>
    31c8:	ldr	r0, [sp, #80]	; 0x50
    31cc:	cmp	r0, #0
    31d0:	ble	3298 <read_array+0x19c>
    31d4:	add	r0, sp, #120	; 0x78
    31d8:	movw	r1, #0
    31dc:	bl	0 <coda_cursor_goto_array_element_by_index>
    31e0:	cmp	r0, #0
    31e4:	beq	31f4 <read_array+0xf8>
    31e8:	mvn	r0, #0
    31ec:	str	r0, [fp, #-12]
    31f0:	b	34d4 <read_array+0x3d8>
    31f4:	movw	r0, #0
    31f8:	str	r0, [sp, #76]	; 0x4c
    31fc:	ldr	r0, [sp, #76]	; 0x4c
    3200:	ldr	r1, [sp, #80]	; 0x50
    3204:	cmp	r0, r1
    3208:	bge	3294 <read_array+0x198>
    320c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3210:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3214:	ldr	r2, [sp, #76]	; 0x4c
    3218:	ldr	r3, [fp, #-28]	; 0xffffffe4
    321c:	mul	r2, r2, r3
    3220:	add	r1, r1, r2
    3224:	add	r2, sp, #120	; 0x78
    3228:	str	r0, [sp, #16]
    322c:	mov	r0, r2
    3230:	ldr	r2, [sp, #16]
    3234:	blx	r2
    3238:	cmp	r0, #0
    323c:	beq	324c <read_array+0x150>
    3240:	mvn	r0, #0
    3244:	str	r0, [fp, #-12]
    3248:	b	34d4 <read_array+0x3d8>
    324c:	ldr	r0, [sp, #76]	; 0x4c
    3250:	ldr	r1, [sp, #80]	; 0x50
    3254:	sub	r1, r1, #1
    3258:	cmp	r0, r1
    325c:	bge	3280 <read_array+0x184>
    3260:	add	r0, sp, #120	; 0x78
    3264:	bl	0 <coda_cursor_goto_next_array_element>
    3268:	cmp	r0, #0
    326c:	beq	327c <read_array+0x180>
    3270:	mvn	r0, #0
    3274:	str	r0, [fp, #-12]
    3278:	b	34d4 <read_array+0x3d8>
    327c:	b	3280 <read_array+0x184>
    3280:	b	3284 <read_array+0x188>
    3284:	ldr	r0, [sp, #76]	; 0x4c
    3288:	add	r0, r0, #1
    328c:	str	r0, [sp, #76]	; 0x4c
    3290:	b	31fc <read_array+0x100>
    3294:	b	3298 <read_array+0x19c>
    3298:	b	34cc <read_array+0x3d0>
    329c:	movw	r0, #1
    32a0:	str	r0, [sp, #40]	; 0x28
    32a4:	movw	r0, #0
    32a8:	str	r0, [sp, #76]	; 0x4c
    32ac:	ldr	r0, [sp, #76]	; 0x4c
    32b0:	ldr	r1, [sp, #84]	; 0x54
    32b4:	cmp	r0, r1
    32b8:	bge	32f0 <read_array+0x1f4>
    32bc:	ldr	r0, [sp, #76]	; 0x4c
    32c0:	add	r1, sp, #40	; 0x28
    32c4:	ldr	r2, [r1, r0, lsl #2]
    32c8:	add	r3, sp, #88	; 0x58
    32cc:	ldr	r3, [r3, r0, lsl #2]
    32d0:	mul	r2, r2, r3
    32d4:	add	r0, r0, #1
    32d8:	add	r0, r1, r0, lsl #2
    32dc:	str	r2, [r0]
    32e0:	ldr	r0, [sp, #76]	; 0x4c
    32e4:	add	r0, r0, #1
    32e8:	str	r0, [sp, #76]	; 0x4c
    32ec:	b	32ac <read_array+0x1b0>
    32f0:	ldr	r0, [sp, #84]	; 0x54
    32f4:	add	r1, sp, #40	; 0x28
    32f8:	add	r0, r1, r0, lsl #2
    32fc:	ldr	r0, [r0, #-4]
    3300:	str	r0, [sp, #36]	; 0x24
    3304:	ldr	r0, [sp, #84]	; 0x54
    3308:	add	r0, r1, r0, lsl #2
    330c:	ldr	r0, [r0]
    3310:	str	r0, [sp, #80]	; 0x50
    3314:	ldr	r0, [sp, #80]	; 0x50
    3318:	cmp	r0, #0
    331c:	ble	34c8 <read_array+0x3cc>
    3320:	movw	r0, #0
    3324:	str	r0, [sp, #32]
    3328:	str	r0, [sp, #28]
    332c:	add	r1, sp, #120	; 0x78
    3330:	str	r0, [sp, #12]
    3334:	mov	r0, r1
    3338:	ldr	r1, [sp, #12]
    333c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3340:	cmp	r0, #0
    3344:	beq	3354 <read_array+0x258>
    3348:	mvn	r0, #0
    334c:	str	r0, [fp, #-12]
    3350:	b	34d4 <read_array+0x3d8>
    3354:	b	3358 <read_array+0x25c>
    3358:	b	335c <read_array+0x260>
    335c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3360:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3364:	ldr	r2, [sp, #28]
    3368:	ldr	r3, [fp, #-28]	; 0xffffffe4
    336c:	mul	r2, r2, r3
    3370:	add	r1, r1, r2
    3374:	add	r2, sp, #120	; 0x78
    3378:	str	r0, [sp, #8]
    337c:	mov	r0, r2
    3380:	ldr	r2, [sp, #8]
    3384:	blx	r2
    3388:	cmp	r0, #0
    338c:	beq	339c <read_array+0x2a0>
    3390:	mvn	r0, #0
    3394:	str	r0, [fp, #-12]
    3398:	b	34d4 <read_array+0x3d8>
    339c:	ldr	r0, [sp, #32]
    33a0:	add	r0, r0, #1
    33a4:	str	r0, [sp, #32]
    33a8:	ldr	r0, [sp, #32]
    33ac:	ldr	r1, [sp, #80]	; 0x50
    33b0:	cmp	r0, r1
    33b4:	bge	33d8 <read_array+0x2dc>
    33b8:	add	r0, sp, #120	; 0x78
    33bc:	bl	0 <coda_cursor_goto_next_array_element>
    33c0:	cmp	r0, #0
    33c4:	beq	33d4 <read_array+0x2d8>
    33c8:	mvn	r0, #0
    33cc:	str	r0, [fp, #-12]
    33d0:	b	34d4 <read_array+0x3d8>
    33d4:	b	33d8 <read_array+0x2dc>
    33d8:	ldr	r0, [sp, #36]	; 0x24
    33dc:	ldr	r1, [sp, #28]
    33e0:	add	r0, r1, r0
    33e4:	str	r0, [sp, #28]
    33e8:	ldr	r0, [sp, #28]
    33ec:	ldr	r1, [sp, #80]	; 0x50
    33f0:	cmp	r0, r1
    33f4:	blt	335c <read_array+0x260>
    33f8:	ldr	r0, [sp, #32]
    33fc:	ldr	r1, [sp, #80]	; 0x50
    3400:	cmp	r0, r1
    3404:	bne	340c <read_array+0x310>
    3408:	b	34c4 <read_array+0x3c8>
    340c:	ldr	r0, [sp, #84]	; 0x54
    3410:	add	r1, sp, #40	; 0x28
    3414:	add	r0, r1, r0, lsl #2
    3418:	ldr	r1, [r0, #-8]
    341c:	ldr	r0, [r0]
    3420:	sub	r0, r1, r0
    3424:	ldr	r1, [sp, #28]
    3428:	add	r0, r1, r0
    342c:	str	r0, [sp, #28]
    3430:	ldr	r0, [sp, #84]	; 0x54
    3434:	sub	r0, r0, #3
    3438:	str	r0, [sp, #76]	; 0x4c
    343c:	ldr	r0, [sp, #76]	; 0x4c
    3440:	cmp	r0, #0
    3444:	movw	r0, #0
    3448:	str	r0, [sp, #4]
    344c:	blt	3478 <read_array+0x37c>
    3450:	ldr	r0, [sp, #28]
    3454:	ldr	r1, [sp, #76]	; 0x4c
    3458:	add	r1, r1, #2
    345c:	add	r2, sp, #40	; 0x28
    3460:	add	r1, r2, r1, lsl #2
    3464:	ldr	r1, [r1]
    3468:	cmp	r0, r1
    346c:	movw	r0, #0
    3470:	movge	r0, #1
    3474:	str	r0, [sp, #4]
    3478:	ldr	r0, [sp, #4]
    347c:	tst	r0, #1
    3480:	beq	34c0 <read_array+0x3c4>
    3484:	ldr	r0, [sp, #76]	; 0x4c
    3488:	add	r1, sp, #40	; 0x28
    348c:	ldr	r2, [r1, r0, lsl #2]
    3490:	add	r0, r0, #2
    3494:	add	r0, r1, r0, lsl #2
    3498:	ldr	r0, [r0]
    349c:	sub	r0, r2, r0
    34a0:	ldr	r1, [sp, #28]
    34a4:	add	r0, r1, r0
    34a8:	str	r0, [sp, #28]
    34ac:	ldr	r0, [sp, #76]	; 0x4c
    34b0:	mvn	r1, #0
    34b4:	add	r0, r0, r1
    34b8:	str	r0, [sp, #76]	; 0x4c
    34bc:	b	343c <read_array+0x340>
    34c0:	b	3358 <read_array+0x25c>
    34c4:	b	34c8 <read_array+0x3cc>
    34c8:	b	34cc <read_array+0x3d0>
    34cc:	movw	r0, #0
    34d0:	str	r0, [fp, #-12]
    34d4:	ldr	r0, [fp, #-12]
    34d8:	sub	sp, fp, #8
    34dc:	pop	{r4, r5, fp, pc}

000034e0 <transpose_array>:
    34e0:	push	{fp, lr}
    34e4:	mov	fp, sp
    34e8:	sub	sp, sp, #208	; 0xd0
    34ec:	sub	r3, fp, #48	; 0x30
    34f0:	str	r0, [fp, #-8]
    34f4:	str	r1, [fp, #-12]
    34f8:	str	r2, [fp, #-16]
    34fc:	movw	r0, #0
    3500:	str	r0, [sp, #40]	; 0x28
    3504:	ldr	r0, [fp, #-8]
    3508:	sub	r1, fp, #52	; 0x34
    350c:	mov	r2, r3
    3510:	bl	0 <coda_cursor_get_array_dim>
    3514:	cmp	r0, #0
    3518:	beq	3528 <transpose_array+0x48>
    351c:	mvn	r0, #0
    3520:	str	r0, [fp, #-4]
    3524:	b	3b84 <transpose_array+0x6a4>
    3528:	ldr	r0, [fp, #-52]	; 0xffffffcc
    352c:	cmp	r0, #1
    3530:	bgt	3540 <transpose_array+0x60>
    3534:	movw	r0, #0
    3538:	str	r0, [fp, #-4]
    353c:	b	3b84 <transpose_array+0x6a4>
    3540:	ldr	r0, [fp, #-12]
    3544:	str	r0, [sp, #32]
    3548:	movw	r0, #1
    354c:	str	r0, [fp, #-56]	; 0xffffffc8
    3550:	movw	r0, #0
    3554:	str	r0, [sp, #36]	; 0x24
    3558:	ldr	r0, [sp, #36]	; 0x24
    355c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3560:	cmp	r0, r1
    3564:	bge	35c0 <transpose_array+0xe0>
    3568:	ldr	r0, [sp, #36]	; 0x24
    356c:	sub	r1, fp, #48	; 0x30
    3570:	ldr	r0, [r1, r0, lsl #2]
    3574:	ldr	r2, [fp, #-56]	; 0xffffffc8
    3578:	mul	r0, r2, r0
    357c:	str	r0, [fp, #-56]	; 0xffffffc8
    3580:	ldr	r0, [sp, #36]	; 0x24
    3584:	add	r2, sp, #80	; 0x50
    3588:	mov	r3, #0
    358c:	str	r3, [r2, r0, lsl #2]
    3590:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3594:	ldr	r2, [sp, #36]	; 0x24
    3598:	sub	r0, r0, r2
    359c:	add	r0, r1, r0, lsl #2
    35a0:	ldr	r0, [r0, #-4]
    35a4:	add	r1, sp, #44	; 0x2c
    35a8:	add	r1, r1, r2, lsl #2
    35ac:	str	r0, [r1]
    35b0:	ldr	r0, [sp, #36]	; 0x24
    35b4:	add	r0, r0, #1
    35b8:	str	r0, [sp, #36]	; 0x24
    35bc:	b	3558 <transpose_array+0x78>
    35c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    35c4:	cmp	r0, #1
    35c8:	bgt	35d8 <transpose_array+0xf8>
    35cc:	movw	r0, #0
    35d0:	str	r0, [fp, #-4]
    35d4:	b	3b84 <transpose_array+0x6a4>
    35d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    35dc:	sub	r1, fp, #92	; 0x5c
    35e0:	mov	r2, #1
    35e4:	str	r2, [r1, r0, lsl #2]
    35e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    35ec:	add	r1, sp, #44	; 0x2c
    35f0:	add	r0, r1, r0, lsl #2
    35f4:	movw	r1, #1
    35f8:	str	r1, [r0]
    35fc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3600:	str	r0, [sp, #36]	; 0x24
    3604:	ldr	r0, [sp, #36]	; 0x24
    3608:	cmp	r0, #0
    360c:	ble	3648 <transpose_array+0x168>
    3610:	ldr	r0, [sp, #36]	; 0x24
    3614:	sub	r1, fp, #92	; 0x5c
    3618:	ldr	r2, [r1, r0, lsl #2]
    361c:	add	r3, sp, #44	; 0x2c
    3620:	ldr	r3, [r3, r0, lsl #2]
    3624:	mul	r2, r2, r3
    3628:	sub	r0, r0, #1
    362c:	add	r0, r1, r0, lsl #2
    3630:	str	r2, [r0]
    3634:	ldr	r0, [sp, #36]	; 0x24
    3638:	mvn	r1, #0
    363c:	add	r0, r0, r1
    3640:	str	r0, [sp, #36]	; 0x24
    3644:	b	3604 <transpose_array+0x124>
    3648:	ldr	r0, [fp, #-52]	; 0xffffffcc
    364c:	add	r1, sp, #44	; 0x2c
    3650:	mov	r2, #0
    3654:	str	r2, [r1, r0, lsl #2]
    3658:	ldr	r0, [fp, #-52]	; 0xffffffcc
    365c:	add	r1, sp, #80	; 0x50
    3660:	add	r0, r1, r0, lsl #2
    3664:	movw	r1, #0
    3668:	str	r1, [r0]
    366c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3670:	ldr	r1, [fp, #-16]
    3674:	mul	r0, r0, r1
    3678:	bl	0 <malloc>
    367c:	str	r0, [sp, #28]
    3680:	ldr	r0, [sp, #28]
    3684:	movw	r1, #0
    3688:	cmp	r0, r1
    368c:	bne	36c8 <transpose_array+0x1e8>
    3690:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3694:	ldr	r1, [fp, #-16]
    3698:	mul	r2, r0, r1
    369c:	mvn	r0, #0
    36a0:	movw	r1, #0
    36a4:	movt	r1, #0
    36a8:	movw	r3, #0
    36ac:	movt	r3, #0
    36b0:	movw	ip, #93	; 0x5d
    36b4:	str	ip, [sp]
    36b8:	bl	0 <coda_set_error>
    36bc:	mvn	r0, #0
    36c0:	str	r0, [fp, #-4]
    36c4:	b	3b84 <transpose_array+0x6a4>
    36c8:	ldr	r0, [fp, #-16]
    36cc:	sub	r0, r0, #1
    36d0:	cmp	r0, #7
    36d4:	str	r0, [sp, #8]
    36d8:	bhi	3b3c <transpose_array+0x65c>
    36dc:	add	r0, pc, #8
    36e0:	ldr	r1, [sp, #8]
    36e4:	ldr	r0, [r0, r1, lsl #2]
    36e8:	mov	pc, r0
    36ec:	.word	0x0000370c
    36f0:	.word	0x00003814
    36f4:	.word	0x00003b3c
    36f8:	.word	0x00003924
    36fc:	.word	0x00003b3c
    3700:	.word	0x00003b3c
    3704:	.word	0x00003b3c
    3708:	.word	0x00003a2c
    370c:	movw	r0, #0
    3710:	str	r0, [sp, #36]	; 0x24
    3714:	ldr	r0, [sp, #36]	; 0x24
    3718:	ldr	r1, [fp, #-56]	; 0xffffffc8
    371c:	cmp	r0, r1
    3720:	bge	3810 <transpose_array+0x330>
    3724:	mov	r0, #0
    3728:	str	r0, [sp, #24]
    372c:	ldr	r0, [sp, #32]
    3730:	ldr	r1, [sp, #36]	; 0x24
    3734:	ldrb	r0, [r0, r1]
    3738:	ldr	r1, [sp, #28]
    373c:	ldr	r2, [sp, #40]	; 0x28
    3740:	strb	r0, [r1, r2]
    3744:	ldr	r0, [sp, #24]
    3748:	sub	r1, fp, #92	; 0x5c
    374c:	ldr	r0, [r1, r0, lsl #2]
    3750:	ldr	r1, [sp, #40]	; 0x28
    3754:	add	r0, r1, r0
    3758:	str	r0, [sp, #40]	; 0x28
    375c:	ldr	r0, [sp, #24]
    3760:	add	r1, sp, #80	; 0x50
    3764:	add	r0, r1, r0, lsl #2
    3768:	ldr	r1, [r0]
    376c:	add	r1, r1, #1
    3770:	str	r1, [r0]
    3774:	ldr	r0, [sp, #24]
    3778:	add	r1, sp, #80	; 0x50
    377c:	ldr	r1, [r1, r0, lsl #2]
    3780:	add	r2, sp, #44	; 0x2c
    3784:	add	r0, r2, r0, lsl #2
    3788:	ldr	r0, [r0]
    378c:	cmp	r1, r0
    3790:	bne	37fc <transpose_array+0x31c>
    3794:	ldr	r0, [sp, #24]
    3798:	add	r1, sp, #80	; 0x50
    379c:	mov	r2, #0
    37a0:	str	r2, [r1, r0, lsl #2]
    37a4:	ldr	r0, [sp, #24]
    37a8:	sub	r2, fp, #92	; 0x5c
    37ac:	ldr	r3, [r2, r0, lsl #2]
    37b0:	add	ip, sp, #44	; 0x2c
    37b4:	ldr	r0, [ip, r0, lsl #2]
    37b8:	ldr	ip, [sp, #40]	; 0x28
    37bc:	mls	r0, r3, r0, ip
    37c0:	str	r0, [sp, #40]	; 0x28
    37c4:	ldr	r0, [sp, #24]
    37c8:	add	r0, r0, #1
    37cc:	str	r0, [sp, #24]
    37d0:	ldr	r0, [sp, #24]
    37d4:	ldr	r0, [r2, r0, lsl #2]
    37d8:	ldr	r2, [sp, #40]	; 0x28
    37dc:	add	r0, r2, r0
    37e0:	str	r0, [sp, #40]	; 0x28
    37e4:	ldr	r0, [sp, #24]
    37e8:	add	r0, r1, r0, lsl #2
    37ec:	ldr	r1, [r0]
    37f0:	add	r1, r1, #1
    37f4:	str	r1, [r0]
    37f8:	b	3774 <transpose_array+0x294>
    37fc:	b	3800 <transpose_array+0x320>
    3800:	ldr	r0, [sp, #36]	; 0x24
    3804:	add	r0, r0, #1
    3808:	str	r0, [sp, #36]	; 0x24
    380c:	b	3714 <transpose_array+0x234>
    3810:	b	3b5c <transpose_array+0x67c>
    3814:	movw	r0, #0
    3818:	str	r0, [sp, #36]	; 0x24
    381c:	ldr	r0, [sp, #36]	; 0x24
    3820:	ldr	r1, [fp, #-56]	; 0xffffffc8
    3824:	cmp	r0, r1
    3828:	bge	3920 <transpose_array+0x440>
    382c:	mov	r0, #0
    3830:	str	r0, [sp, #20]
    3834:	ldr	r0, [sp, #32]
    3838:	ldr	r1, [sp, #36]	; 0x24
    383c:	add	r0, r0, r1, lsl #1
    3840:	ldrh	r0, [r0]
    3844:	ldr	r1, [sp, #28]
    3848:	ldr	r2, [sp, #40]	; 0x28
    384c:	add	r1, r1, r2, lsl #1
    3850:	strh	r0, [r1]
    3854:	ldr	r0, [sp, #20]
    3858:	sub	r1, fp, #92	; 0x5c
    385c:	ldr	r0, [r1, r0, lsl #2]
    3860:	ldr	r1, [sp, #40]	; 0x28
    3864:	add	r0, r1, r0
    3868:	str	r0, [sp, #40]	; 0x28
    386c:	ldr	r0, [sp, #20]
    3870:	add	r1, sp, #80	; 0x50
    3874:	add	r0, r1, r0, lsl #2
    3878:	ldr	r1, [r0]
    387c:	add	r1, r1, #1
    3880:	str	r1, [r0]
    3884:	ldr	r0, [sp, #20]
    3888:	add	r1, sp, #80	; 0x50
    388c:	ldr	r1, [r1, r0, lsl #2]
    3890:	add	r2, sp, #44	; 0x2c
    3894:	add	r0, r2, r0, lsl #2
    3898:	ldr	r0, [r0]
    389c:	cmp	r1, r0
    38a0:	bne	390c <transpose_array+0x42c>
    38a4:	ldr	r0, [sp, #20]
    38a8:	add	r1, sp, #80	; 0x50
    38ac:	mov	r2, #0
    38b0:	str	r2, [r1, r0, lsl #2]
    38b4:	ldr	r0, [sp, #20]
    38b8:	sub	r2, fp, #92	; 0x5c
    38bc:	ldr	r3, [r2, r0, lsl #2]
    38c0:	add	ip, sp, #44	; 0x2c
    38c4:	ldr	r0, [ip, r0, lsl #2]
    38c8:	ldr	ip, [sp, #40]	; 0x28
    38cc:	mls	r0, r3, r0, ip
    38d0:	str	r0, [sp, #40]	; 0x28
    38d4:	ldr	r0, [sp, #20]
    38d8:	add	r0, r0, #1
    38dc:	str	r0, [sp, #20]
    38e0:	ldr	r0, [sp, #20]
    38e4:	ldr	r0, [r2, r0, lsl #2]
    38e8:	ldr	r2, [sp, #40]	; 0x28
    38ec:	add	r0, r2, r0
    38f0:	str	r0, [sp, #40]	; 0x28
    38f4:	ldr	r0, [sp, #20]
    38f8:	add	r0, r1, r0, lsl #2
    38fc:	ldr	r1, [r0]
    3900:	add	r1, r1, #1
    3904:	str	r1, [r0]
    3908:	b	3884 <transpose_array+0x3a4>
    390c:	b	3910 <transpose_array+0x430>
    3910:	ldr	r0, [sp, #36]	; 0x24
    3914:	add	r0, r0, #1
    3918:	str	r0, [sp, #36]	; 0x24
    391c:	b	381c <transpose_array+0x33c>
    3920:	b	3b5c <transpose_array+0x67c>
    3924:	movw	r0, #0
    3928:	str	r0, [sp, #36]	; 0x24
    392c:	ldr	r0, [sp, #36]	; 0x24
    3930:	ldr	r1, [fp, #-56]	; 0xffffffc8
    3934:	cmp	r0, r1
    3938:	bge	3a28 <transpose_array+0x548>
    393c:	mov	r0, #0
    3940:	str	r0, [sp, #16]
    3944:	ldr	r0, [sp, #32]
    3948:	ldr	r1, [sp, #36]	; 0x24
    394c:	ldr	r0, [r0, r1, lsl #2]
    3950:	ldr	r1, [sp, #28]
    3954:	ldr	r2, [sp, #40]	; 0x28
    3958:	str	r0, [r1, r2, lsl #2]
    395c:	ldr	r0, [sp, #16]
    3960:	sub	r1, fp, #92	; 0x5c
    3964:	ldr	r0, [r1, r0, lsl #2]
    3968:	ldr	r1, [sp, #40]	; 0x28
    396c:	add	r0, r1, r0
    3970:	str	r0, [sp, #40]	; 0x28
    3974:	ldr	r0, [sp, #16]
    3978:	add	r1, sp, #80	; 0x50
    397c:	add	r0, r1, r0, lsl #2
    3980:	ldr	r1, [r0]
    3984:	add	r1, r1, #1
    3988:	str	r1, [r0]
    398c:	ldr	r0, [sp, #16]
    3990:	add	r1, sp, #80	; 0x50
    3994:	ldr	r1, [r1, r0, lsl #2]
    3998:	add	r2, sp, #44	; 0x2c
    399c:	add	r0, r2, r0, lsl #2
    39a0:	ldr	r0, [r0]
    39a4:	cmp	r1, r0
    39a8:	bne	3a14 <transpose_array+0x534>
    39ac:	ldr	r0, [sp, #16]
    39b0:	add	r1, sp, #80	; 0x50
    39b4:	mov	r2, #0
    39b8:	str	r2, [r1, r0, lsl #2]
    39bc:	ldr	r0, [sp, #16]
    39c0:	sub	r2, fp, #92	; 0x5c
    39c4:	ldr	r3, [r2, r0, lsl #2]
    39c8:	add	ip, sp, #44	; 0x2c
    39cc:	ldr	r0, [ip, r0, lsl #2]
    39d0:	ldr	ip, [sp, #40]	; 0x28
    39d4:	mls	r0, r3, r0, ip
    39d8:	str	r0, [sp, #40]	; 0x28
    39dc:	ldr	r0, [sp, #16]
    39e0:	add	r0, r0, #1
    39e4:	str	r0, [sp, #16]
    39e8:	ldr	r0, [sp, #16]
    39ec:	ldr	r0, [r2, r0, lsl #2]
    39f0:	ldr	r2, [sp, #40]	; 0x28
    39f4:	add	r0, r2, r0
    39f8:	str	r0, [sp, #40]	; 0x28
    39fc:	ldr	r0, [sp, #16]
    3a00:	add	r0, r1, r0, lsl #2
    3a04:	ldr	r1, [r0]
    3a08:	add	r1, r1, #1
    3a0c:	str	r1, [r0]
    3a10:	b	398c <transpose_array+0x4ac>
    3a14:	b	3a18 <transpose_array+0x538>
    3a18:	ldr	r0, [sp, #36]	; 0x24
    3a1c:	add	r0, r0, #1
    3a20:	str	r0, [sp, #36]	; 0x24
    3a24:	b	392c <transpose_array+0x44c>
    3a28:	b	3b5c <transpose_array+0x67c>
    3a2c:	movw	r0, #0
    3a30:	str	r0, [sp, #36]	; 0x24
    3a34:	ldr	r0, [sp, #36]	; 0x24
    3a38:	ldr	r1, [fp, #-56]	; 0xffffffc8
    3a3c:	cmp	r0, r1
    3a40:	bge	3b38 <transpose_array+0x658>
    3a44:	mov	r0, #0
    3a48:	str	r0, [sp, #12]
    3a4c:	ldr	r0, [sp, #32]
    3a50:	ldr	r1, [sp, #36]	; 0x24
    3a54:	ldr	r1, [r0, r1, lsl #3]!
    3a58:	ldr	r0, [r0, #4]
    3a5c:	ldr	r2, [sp, #28]
    3a60:	ldr	r3, [sp, #40]	; 0x28
    3a64:	str	r1, [r2, r3, lsl #3]!
    3a68:	str	r0, [r2, #4]
    3a6c:	ldr	r0, [sp, #12]
    3a70:	sub	r1, fp, #92	; 0x5c
    3a74:	ldr	r0, [r1, r0, lsl #2]
    3a78:	ldr	r1, [sp, #40]	; 0x28
    3a7c:	add	r0, r1, r0
    3a80:	str	r0, [sp, #40]	; 0x28
    3a84:	ldr	r0, [sp, #12]
    3a88:	add	r1, sp, #80	; 0x50
    3a8c:	add	r0, r1, r0, lsl #2
    3a90:	ldr	r1, [r0]
    3a94:	add	r1, r1, #1
    3a98:	str	r1, [r0]
    3a9c:	ldr	r0, [sp, #12]
    3aa0:	add	r1, sp, #80	; 0x50
    3aa4:	ldr	r1, [r1, r0, lsl #2]
    3aa8:	add	r2, sp, #44	; 0x2c
    3aac:	add	r0, r2, r0, lsl #2
    3ab0:	ldr	r0, [r0]
    3ab4:	cmp	r1, r0
    3ab8:	bne	3b24 <transpose_array+0x644>
    3abc:	ldr	r0, [sp, #12]
    3ac0:	add	r1, sp, #80	; 0x50
    3ac4:	mov	r2, #0
    3ac8:	str	r2, [r1, r0, lsl #2]
    3acc:	ldr	r0, [sp, #12]
    3ad0:	sub	r2, fp, #92	; 0x5c
    3ad4:	ldr	r3, [r2, r0, lsl #2]
    3ad8:	add	ip, sp, #44	; 0x2c
    3adc:	ldr	r0, [ip, r0, lsl #2]
    3ae0:	ldr	ip, [sp, #40]	; 0x28
    3ae4:	mls	r0, r3, r0, ip
    3ae8:	str	r0, [sp, #40]	; 0x28
    3aec:	ldr	r0, [sp, #12]
    3af0:	add	r0, r0, #1
    3af4:	str	r0, [sp, #12]
    3af8:	ldr	r0, [sp, #12]
    3afc:	ldr	r0, [r2, r0, lsl #2]
    3b00:	ldr	r2, [sp, #40]	; 0x28
    3b04:	add	r0, r2, r0
    3b08:	str	r0, [sp, #40]	; 0x28
    3b0c:	ldr	r0, [sp, #12]
    3b10:	add	r0, r1, r0, lsl #2
    3b14:	ldr	r1, [r0]
    3b18:	add	r1, r1, #1
    3b1c:	str	r1, [r0]
    3b20:	b	3a9c <transpose_array+0x5bc>
    3b24:	b	3b28 <transpose_array+0x648>
    3b28:	ldr	r0, [sp, #36]	; 0x24
    3b2c:	add	r0, r0, #1
    3b30:	str	r0, [sp, #36]	; 0x24
    3b34:	b	3a34 <transpose_array+0x554>
    3b38:	b	3b5c <transpose_array+0x67c>
    3b3c:	movw	r0, #0
    3b40:	movt	r0, #0
    3b44:	movw	r1, #0
    3b48:	movt	r1, #0
    3b4c:	movw	r2, #172	; 0xac
    3b50:	movw	r3, #0
    3b54:	movt	r3, #0
    3b58:	bl	0 <__assert_fail>
    3b5c:	ldr	r0, [fp, #-12]
    3b60:	ldr	r1, [sp, #28]
    3b64:	ldr	r2, [fp, #-56]	; 0xffffffc8
    3b68:	ldr	r3, [fp, #-16]
    3b6c:	mul	r2, r2, r3
    3b70:	bl	0 <memcpy>
    3b74:	ldr	r0, [sp, #28]
    3b78:	bl	0 <free>
    3b7c:	movw	r0, #0
    3b80:	str	r0, [fp, #-4]
    3b84:	ldr	r0, [fp, #-4]
    3b88:	mov	sp, fp
    3b8c:	pop	{fp, pc}

00003b90 <coda_bin_cursor_read_uint8_array>:
    3b90:	push	{fp, lr}
    3b94:	mov	fp, sp
    3b98:	sub	sp, sp, #32
    3b9c:	str	r0, [fp, #-8]
    3ba0:	str	r1, [fp, #-12]
    3ba4:	str	r2, [sp, #16]
    3ba8:	ldr	r0, [fp, #-8]
    3bac:	add	r1, r0, #8
    3bb0:	ldr	r0, [r0, #4]
    3bb4:	sub	r0, r0, #1
    3bb8:	add	r0, r1, r0, lsl #4
    3bbc:	ldr	r0, [r0]
    3bc0:	ldr	r0, [r0]
    3bc4:	cmp	r0, #100	; 0x64
    3bc8:	bcs	3bec <coda_bin_cursor_read_uint8_array+0x5c>
    3bcc:	ldr	r0, [fp, #-8]
    3bd0:	add	r1, r0, #8
    3bd4:	ldr	r0, [r0, #4]
    3bd8:	sub	r0, r0, #1
    3bdc:	add	r0, r1, r0, lsl #4
    3be0:	ldr	r0, [r0]
    3be4:	str	r0, [sp, #8]
    3be8:	b	3c0c <coda_bin_cursor_read_uint8_array+0x7c>
    3bec:	ldr	r0, [fp, #-8]
    3bf0:	add	r1, r0, #8
    3bf4:	ldr	r0, [r0, #4]
    3bf8:	sub	r0, r0, #1
    3bfc:	add	r0, r1, r0, lsl #4
    3c00:	ldr	r0, [r0]
    3c04:	ldr	r0, [r0, #4]
    3c08:	str	r0, [sp, #8]
    3c0c:	ldr	r0, [sp, #8]
    3c10:	str	r0, [sp, #12]
    3c14:	ldr	r0, [sp, #12]
    3c18:	ldr	r0, [r0, #40]	; 0x28
    3c1c:	ldr	r0, [r0]
    3c20:	cmp	r0, #1
    3c24:	bne	3c5c <coda_bin_cursor_read_uint8_array+0xcc>
    3c28:	ldr	r0, [fp, #-8]
    3c2c:	ldr	r2, [fp, #-12]
    3c30:	ldr	r1, [sp, #16]
    3c34:	movw	r3, #0
    3c38:	movt	r3, #0
    3c3c:	str	r1, [sp, #4]
    3c40:	mov	r1, r3
    3c44:	movw	r3, #1
    3c48:	ldr	ip, [sp, #4]
    3c4c:	str	ip, [sp]
    3c50:	bl	30fc <read_array>
    3c54:	str	r0, [fp, #-4]
    3c58:	b	3d04 <coda_bin_cursor_read_uint8_array+0x174>
    3c5c:	ldr	r0, [sp, #12]
    3c60:	ldr	r0, [r0, #40]	; 0x28
    3c64:	ldr	r0, [r0]
    3c68:	cmp	r0, #0
    3c6c:	bne	3c74 <coda_bin_cursor_read_uint8_array+0xe4>
    3c70:	b	3c94 <coda_bin_cursor_read_uint8_array+0x104>
    3c74:	movw	r0, #0
    3c78:	movt	r0, #0
    3c7c:	movw	r1, #0
    3c80:	movt	r1, #0
    3c84:	movw	r2, #932	; 0x3a4
    3c88:	movw	r3, #0
    3c8c:	movt	r3, #0
    3c90:	bl	0 <__assert_fail>
    3c94:	ldr	r0, [fp, #-8]
    3c98:	ldr	r2, [fp, #-12]
    3c9c:	movw	r1, #0
    3ca0:	movt	r1, #0
    3ca4:	movw	r3, #1
    3ca8:	movw	ip, #0
    3cac:	str	ip, [sp]
    3cb0:	bl	30fc <read_array>
    3cb4:	cmp	r0, #0
    3cb8:	beq	3cc8 <coda_bin_cursor_read_uint8_array+0x138>
    3cbc:	mvn	r0, #0
    3cc0:	str	r0, [fp, #-4]
    3cc4:	b	3d04 <coda_bin_cursor_read_uint8_array+0x174>
    3cc8:	ldr	r0, [sp, #16]
    3ccc:	cmp	r0, #0
    3cd0:	beq	3cfc <coda_bin_cursor_read_uint8_array+0x16c>
    3cd4:	ldr	r0, [fp, #-8]
    3cd8:	ldr	r1, [fp, #-12]
    3cdc:	movw	r2, #1
    3ce0:	bl	34e0 <transpose_array>
    3ce4:	cmp	r0, #0
    3ce8:	beq	3cf8 <coda_bin_cursor_read_uint8_array+0x168>
    3cec:	mvn	r0, #0
    3cf0:	str	r0, [fp, #-4]
    3cf4:	b	3d04 <coda_bin_cursor_read_uint8_array+0x174>
    3cf8:	b	3cfc <coda_bin_cursor_read_uint8_array+0x16c>
    3cfc:	movw	r0, #0
    3d00:	str	r0, [fp, #-4]
    3d04:	ldr	r0, [fp, #-4]
    3d08:	mov	sp, fp
    3d0c:	pop	{fp, pc}

00003d10 <coda_bin_cursor_read_int16_array>:
    3d10:	push	{fp, lr}
    3d14:	mov	fp, sp
    3d18:	sub	sp, sp, #40	; 0x28
    3d1c:	str	r0, [fp, #-8]
    3d20:	str	r1, [fp, #-12]
    3d24:	str	r2, [fp, #-16]
    3d28:	ldr	r0, [fp, #-8]
    3d2c:	add	r1, r0, #8
    3d30:	ldr	r0, [r0, #4]
    3d34:	sub	r0, r0, #1
    3d38:	add	r0, r1, r0, lsl #4
    3d3c:	ldr	r0, [r0]
    3d40:	ldr	r0, [r0]
    3d44:	cmp	r0, #100	; 0x64
    3d48:	bcs	3d6c <coda_bin_cursor_read_int16_array+0x5c>
    3d4c:	ldr	r0, [fp, #-8]
    3d50:	add	r1, r0, #8
    3d54:	ldr	r0, [r0, #4]
    3d58:	sub	r0, r0, #1
    3d5c:	add	r0, r1, r0, lsl #4
    3d60:	ldr	r0, [r0]
    3d64:	str	r0, [sp, #16]
    3d68:	b	3d8c <coda_bin_cursor_read_int16_array+0x7c>
    3d6c:	ldr	r0, [fp, #-8]
    3d70:	add	r1, r0, #8
    3d74:	ldr	r0, [r0, #4]
    3d78:	sub	r0, r0, #1
    3d7c:	add	r0, r1, r0, lsl #4
    3d80:	ldr	r0, [r0]
    3d84:	ldr	r0, [r0, #4]
    3d88:	str	r0, [sp, #16]
    3d8c:	ldr	r0, [sp, #16]
    3d90:	str	r0, [sp, #20]
    3d94:	ldr	r0, [sp, #20]
    3d98:	ldr	r0, [r0, #40]	; 0x28
    3d9c:	ldr	r0, [r0]
    3da0:	cmp	r0, #1
    3da4:	bne	3de8 <coda_bin_cursor_read_int16_array+0xd8>
    3da8:	movw	r0, #0
    3dac:	movt	r0, #0
    3db0:	ldr	r1, [fp, #-8]
    3db4:	ldr	r2, [fp, #-12]
    3db8:	ldr	r3, [fp, #-16]
    3dbc:	str	r0, [sp, #12]
    3dc0:	mov	r0, r1
    3dc4:	ldr	r1, [sp, #12]
    3dc8:	movw	ip, #2
    3dcc:	str	r3, [sp, #8]
    3dd0:	mov	r3, ip
    3dd4:	ldr	ip, [sp, #8]
    3dd8:	str	ip, [sp]
    3ddc:	bl	30fc <read_array>
    3de0:	str	r0, [fp, #-4]
    3de4:	b	3e9c <coda_bin_cursor_read_int16_array+0x18c>
    3de8:	ldr	r0, [sp, #20]
    3dec:	ldr	r0, [r0, #40]	; 0x28
    3df0:	ldr	r0, [r0]
    3df4:	cmp	r0, #0
    3df8:	bne	3e00 <coda_bin_cursor_read_int16_array+0xf0>
    3dfc:	b	3e20 <coda_bin_cursor_read_int16_array+0x110>
    3e00:	movw	r0, #0
    3e04:	movt	r0, #0
    3e08:	movw	r1, #0
    3e0c:	movt	r1, #0
    3e10:	movw	r2, #958	; 0x3be
    3e14:	movw	r3, #0
    3e18:	movt	r3, #0
    3e1c:	bl	0 <__assert_fail>
    3e20:	movw	r0, #0
    3e24:	movt	r0, #0
    3e28:	ldr	r1, [fp, #-8]
    3e2c:	ldr	r2, [fp, #-12]
    3e30:	str	r0, [sp, #4]
    3e34:	mov	r0, r1
    3e38:	ldr	r1, [sp, #4]
    3e3c:	movw	r3, #2
    3e40:	movw	ip, #0
    3e44:	str	ip, [sp]
    3e48:	bl	30fc <read_array>
    3e4c:	cmp	r0, #0
    3e50:	beq	3e60 <coda_bin_cursor_read_int16_array+0x150>
    3e54:	mvn	r0, #0
    3e58:	str	r0, [fp, #-4]
    3e5c:	b	3e9c <coda_bin_cursor_read_int16_array+0x18c>
    3e60:	ldr	r0, [fp, #-16]
    3e64:	cmp	r0, #0
    3e68:	beq	3e94 <coda_bin_cursor_read_int16_array+0x184>
    3e6c:	ldr	r0, [fp, #-8]
    3e70:	ldr	r1, [fp, #-12]
    3e74:	movw	r2, #2
    3e78:	bl	34e0 <transpose_array>
    3e7c:	cmp	r0, #0
    3e80:	beq	3e90 <coda_bin_cursor_read_int16_array+0x180>
    3e84:	mvn	r0, #0
    3e88:	str	r0, [fp, #-4]
    3e8c:	b	3e9c <coda_bin_cursor_read_int16_array+0x18c>
    3e90:	b	3e94 <coda_bin_cursor_read_int16_array+0x184>
    3e94:	movw	r0, #0
    3e98:	str	r0, [fp, #-4]
    3e9c:	ldr	r0, [fp, #-4]
    3ea0:	mov	sp, fp
    3ea4:	pop	{fp, pc}

00003ea8 <coda_bin_cursor_read_uint16_array>:
    3ea8:	push	{fp, lr}
    3eac:	mov	fp, sp
    3eb0:	sub	sp, sp, #40	; 0x28
    3eb4:	str	r0, [fp, #-8]
    3eb8:	str	r1, [fp, #-12]
    3ebc:	str	r2, [fp, #-16]
    3ec0:	ldr	r0, [fp, #-8]
    3ec4:	add	r1, r0, #8
    3ec8:	ldr	r0, [r0, #4]
    3ecc:	sub	r0, r0, #1
    3ed0:	add	r0, r1, r0, lsl #4
    3ed4:	ldr	r0, [r0]
    3ed8:	ldr	r0, [r0]
    3edc:	cmp	r0, #100	; 0x64
    3ee0:	bcs	3f04 <coda_bin_cursor_read_uint16_array+0x5c>
    3ee4:	ldr	r0, [fp, #-8]
    3ee8:	add	r1, r0, #8
    3eec:	ldr	r0, [r0, #4]
    3ef0:	sub	r0, r0, #1
    3ef4:	add	r0, r1, r0, lsl #4
    3ef8:	ldr	r0, [r0]
    3efc:	str	r0, [sp, #16]
    3f00:	b	3f24 <coda_bin_cursor_read_uint16_array+0x7c>
    3f04:	ldr	r0, [fp, #-8]
    3f08:	add	r1, r0, #8
    3f0c:	ldr	r0, [r0, #4]
    3f10:	sub	r0, r0, #1
    3f14:	add	r0, r1, r0, lsl #4
    3f18:	ldr	r0, [r0]
    3f1c:	ldr	r0, [r0, #4]
    3f20:	str	r0, [sp, #16]
    3f24:	ldr	r0, [sp, #16]
    3f28:	str	r0, [sp, #20]
    3f2c:	ldr	r0, [sp, #20]
    3f30:	ldr	r0, [r0, #40]	; 0x28
    3f34:	ldr	r0, [r0]
    3f38:	cmp	r0, #1
    3f3c:	bne	3f80 <coda_bin_cursor_read_uint16_array+0xd8>
    3f40:	movw	r0, #0
    3f44:	movt	r0, #0
    3f48:	ldr	r1, [fp, #-8]
    3f4c:	ldr	r2, [fp, #-12]
    3f50:	ldr	r3, [fp, #-16]
    3f54:	str	r0, [sp, #12]
    3f58:	mov	r0, r1
    3f5c:	ldr	r1, [sp, #12]
    3f60:	movw	ip, #2
    3f64:	str	r3, [sp, #8]
    3f68:	mov	r3, ip
    3f6c:	ldr	ip, [sp, #8]
    3f70:	str	ip, [sp]
    3f74:	bl	30fc <read_array>
    3f78:	str	r0, [fp, #-4]
    3f7c:	b	4034 <coda_bin_cursor_read_uint16_array+0x18c>
    3f80:	ldr	r0, [sp, #20]
    3f84:	ldr	r0, [r0, #40]	; 0x28
    3f88:	ldr	r0, [r0]
    3f8c:	cmp	r0, #0
    3f90:	bne	3f98 <coda_bin_cursor_read_uint16_array+0xf0>
    3f94:	b	3fb8 <coda_bin_cursor_read_uint16_array+0x110>
    3f98:	movw	r0, #0
    3f9c:	movt	r0, #0
    3fa0:	movw	r1, #0
    3fa4:	movt	r1, #0
    3fa8:	movw	r2, #984	; 0x3d8
    3fac:	movw	r3, #0
    3fb0:	movt	r3, #0
    3fb4:	bl	0 <__assert_fail>
    3fb8:	movw	r0, #0
    3fbc:	movt	r0, #0
    3fc0:	ldr	r1, [fp, #-8]
    3fc4:	ldr	r2, [fp, #-12]
    3fc8:	str	r0, [sp, #4]
    3fcc:	mov	r0, r1
    3fd0:	ldr	r1, [sp, #4]
    3fd4:	movw	r3, #2
    3fd8:	movw	ip, #0
    3fdc:	str	ip, [sp]
    3fe0:	bl	30fc <read_array>
    3fe4:	cmp	r0, #0
    3fe8:	beq	3ff8 <coda_bin_cursor_read_uint16_array+0x150>
    3fec:	mvn	r0, #0
    3ff0:	str	r0, [fp, #-4]
    3ff4:	b	4034 <coda_bin_cursor_read_uint16_array+0x18c>
    3ff8:	ldr	r0, [fp, #-16]
    3ffc:	cmp	r0, #0
    4000:	beq	402c <coda_bin_cursor_read_uint16_array+0x184>
    4004:	ldr	r0, [fp, #-8]
    4008:	ldr	r1, [fp, #-12]
    400c:	movw	r2, #2
    4010:	bl	34e0 <transpose_array>
    4014:	cmp	r0, #0
    4018:	beq	4028 <coda_bin_cursor_read_uint16_array+0x180>
    401c:	mvn	r0, #0
    4020:	str	r0, [fp, #-4]
    4024:	b	4034 <coda_bin_cursor_read_uint16_array+0x18c>
    4028:	b	402c <coda_bin_cursor_read_uint16_array+0x184>
    402c:	movw	r0, #0
    4030:	str	r0, [fp, #-4]
    4034:	ldr	r0, [fp, #-4]
    4038:	mov	sp, fp
    403c:	pop	{fp, pc}

00004040 <coda_bin_cursor_read_int32_array>:
    4040:	push	{fp, lr}
    4044:	mov	fp, sp
    4048:	sub	sp, sp, #40	; 0x28
    404c:	str	r0, [fp, #-8]
    4050:	str	r1, [fp, #-12]
    4054:	str	r2, [fp, #-16]
    4058:	ldr	r0, [fp, #-8]
    405c:	add	r1, r0, #8
    4060:	ldr	r0, [r0, #4]
    4064:	sub	r0, r0, #1
    4068:	add	r0, r1, r0, lsl #4
    406c:	ldr	r0, [r0]
    4070:	ldr	r0, [r0]
    4074:	cmp	r0, #100	; 0x64
    4078:	bcs	409c <coda_bin_cursor_read_int32_array+0x5c>
    407c:	ldr	r0, [fp, #-8]
    4080:	add	r1, r0, #8
    4084:	ldr	r0, [r0, #4]
    4088:	sub	r0, r0, #1
    408c:	add	r0, r1, r0, lsl #4
    4090:	ldr	r0, [r0]
    4094:	str	r0, [sp, #16]
    4098:	b	40bc <coda_bin_cursor_read_int32_array+0x7c>
    409c:	ldr	r0, [fp, #-8]
    40a0:	add	r1, r0, #8
    40a4:	ldr	r0, [r0, #4]
    40a8:	sub	r0, r0, #1
    40ac:	add	r0, r1, r0, lsl #4
    40b0:	ldr	r0, [r0]
    40b4:	ldr	r0, [r0, #4]
    40b8:	str	r0, [sp, #16]
    40bc:	ldr	r0, [sp, #16]
    40c0:	str	r0, [sp, #20]
    40c4:	ldr	r0, [sp, #20]
    40c8:	ldr	r0, [r0, #40]	; 0x28
    40cc:	ldr	r0, [r0]
    40d0:	cmp	r0, #1
    40d4:	bne	4118 <coda_bin_cursor_read_int32_array+0xd8>
    40d8:	movw	r0, #0
    40dc:	movt	r0, #0
    40e0:	ldr	r1, [fp, #-8]
    40e4:	ldr	r2, [fp, #-12]
    40e8:	ldr	r3, [fp, #-16]
    40ec:	str	r0, [sp, #12]
    40f0:	mov	r0, r1
    40f4:	ldr	r1, [sp, #12]
    40f8:	movw	ip, #4
    40fc:	str	r3, [sp, #8]
    4100:	mov	r3, ip
    4104:	ldr	ip, [sp, #8]
    4108:	str	ip, [sp]
    410c:	bl	30fc <read_array>
    4110:	str	r0, [fp, #-4]
    4114:	b	41cc <coda_bin_cursor_read_int32_array+0x18c>
    4118:	ldr	r0, [sp, #20]
    411c:	ldr	r0, [r0, #40]	; 0x28
    4120:	ldr	r0, [r0]
    4124:	cmp	r0, #0
    4128:	bne	4130 <coda_bin_cursor_read_int32_array+0xf0>
    412c:	b	4150 <coda_bin_cursor_read_int32_array+0x110>
    4130:	movw	r0, #0
    4134:	movt	r0, #0
    4138:	movw	r1, #0
    413c:	movt	r1, #0
    4140:	movw	r2, #1010	; 0x3f2
    4144:	movw	r3, #0
    4148:	movt	r3, #0
    414c:	bl	0 <__assert_fail>
    4150:	movw	r0, #0
    4154:	movt	r0, #0
    4158:	ldr	r1, [fp, #-8]
    415c:	ldr	r2, [fp, #-12]
    4160:	str	r0, [sp, #4]
    4164:	mov	r0, r1
    4168:	ldr	r1, [sp, #4]
    416c:	movw	r3, #4
    4170:	movw	ip, #0
    4174:	str	ip, [sp]
    4178:	bl	30fc <read_array>
    417c:	cmp	r0, #0
    4180:	beq	4190 <coda_bin_cursor_read_int32_array+0x150>
    4184:	mvn	r0, #0
    4188:	str	r0, [fp, #-4]
    418c:	b	41cc <coda_bin_cursor_read_int32_array+0x18c>
    4190:	ldr	r0, [fp, #-16]
    4194:	cmp	r0, #0
    4198:	beq	41c4 <coda_bin_cursor_read_int32_array+0x184>
    419c:	ldr	r0, [fp, #-8]
    41a0:	ldr	r1, [fp, #-12]
    41a4:	movw	r2, #4
    41a8:	bl	34e0 <transpose_array>
    41ac:	cmp	r0, #0
    41b0:	beq	41c0 <coda_bin_cursor_read_int32_array+0x180>
    41b4:	mvn	r0, #0
    41b8:	str	r0, [fp, #-4]
    41bc:	b	41cc <coda_bin_cursor_read_int32_array+0x18c>
    41c0:	b	41c4 <coda_bin_cursor_read_int32_array+0x184>
    41c4:	movw	r0, #0
    41c8:	str	r0, [fp, #-4]
    41cc:	ldr	r0, [fp, #-4]
    41d0:	mov	sp, fp
    41d4:	pop	{fp, pc}

000041d8 <coda_bin_cursor_read_uint32_array>:
    41d8:	push	{fp, lr}
    41dc:	mov	fp, sp
    41e0:	sub	sp, sp, #40	; 0x28
    41e4:	str	r0, [fp, #-8]
    41e8:	str	r1, [fp, #-12]
    41ec:	str	r2, [fp, #-16]
    41f0:	ldr	r0, [fp, #-8]
    41f4:	add	r1, r0, #8
    41f8:	ldr	r0, [r0, #4]
    41fc:	sub	r0, r0, #1
    4200:	add	r0, r1, r0, lsl #4
    4204:	ldr	r0, [r0]
    4208:	ldr	r0, [r0]
    420c:	cmp	r0, #100	; 0x64
    4210:	bcs	4234 <coda_bin_cursor_read_uint32_array+0x5c>
    4214:	ldr	r0, [fp, #-8]
    4218:	add	r1, r0, #8
    421c:	ldr	r0, [r0, #4]
    4220:	sub	r0, r0, #1
    4224:	add	r0, r1, r0, lsl #4
    4228:	ldr	r0, [r0]
    422c:	str	r0, [sp, #16]
    4230:	b	4254 <coda_bin_cursor_read_uint32_array+0x7c>
    4234:	ldr	r0, [fp, #-8]
    4238:	add	r1, r0, #8
    423c:	ldr	r0, [r0, #4]
    4240:	sub	r0, r0, #1
    4244:	add	r0, r1, r0, lsl #4
    4248:	ldr	r0, [r0]
    424c:	ldr	r0, [r0, #4]
    4250:	str	r0, [sp, #16]
    4254:	ldr	r0, [sp, #16]
    4258:	str	r0, [sp, #20]
    425c:	ldr	r0, [sp, #20]
    4260:	ldr	r0, [r0, #40]	; 0x28
    4264:	ldr	r0, [r0]
    4268:	cmp	r0, #1
    426c:	bne	42b0 <coda_bin_cursor_read_uint32_array+0xd8>
    4270:	movw	r0, #0
    4274:	movt	r0, #0
    4278:	ldr	r1, [fp, #-8]
    427c:	ldr	r2, [fp, #-12]
    4280:	ldr	r3, [fp, #-16]
    4284:	str	r0, [sp, #12]
    4288:	mov	r0, r1
    428c:	ldr	r1, [sp, #12]
    4290:	movw	ip, #4
    4294:	str	r3, [sp, #8]
    4298:	mov	r3, ip
    429c:	ldr	ip, [sp, #8]
    42a0:	str	ip, [sp]
    42a4:	bl	30fc <read_array>
    42a8:	str	r0, [fp, #-4]
    42ac:	b	4364 <coda_bin_cursor_read_uint32_array+0x18c>
    42b0:	ldr	r0, [sp, #20]
    42b4:	ldr	r0, [r0, #40]	; 0x28
    42b8:	ldr	r0, [r0]
    42bc:	cmp	r0, #0
    42c0:	bne	42c8 <coda_bin_cursor_read_uint32_array+0xf0>
    42c4:	b	42e8 <coda_bin_cursor_read_uint32_array+0x110>
    42c8:	movw	r0, #0
    42cc:	movt	r0, #0
    42d0:	movw	r1, #0
    42d4:	movt	r1, #0
    42d8:	movw	r2, #1036	; 0x40c
    42dc:	movw	r3, #0
    42e0:	movt	r3, #0
    42e4:	bl	0 <__assert_fail>
    42e8:	movw	r0, #0
    42ec:	movt	r0, #0
    42f0:	ldr	r1, [fp, #-8]
    42f4:	ldr	r2, [fp, #-12]
    42f8:	str	r0, [sp, #4]
    42fc:	mov	r0, r1
    4300:	ldr	r1, [sp, #4]
    4304:	movw	r3, #4
    4308:	movw	ip, #0
    430c:	str	ip, [sp]
    4310:	bl	30fc <read_array>
    4314:	cmp	r0, #0
    4318:	beq	4328 <coda_bin_cursor_read_uint32_array+0x150>
    431c:	mvn	r0, #0
    4320:	str	r0, [fp, #-4]
    4324:	b	4364 <coda_bin_cursor_read_uint32_array+0x18c>
    4328:	ldr	r0, [fp, #-16]
    432c:	cmp	r0, #0
    4330:	beq	435c <coda_bin_cursor_read_uint32_array+0x184>
    4334:	ldr	r0, [fp, #-8]
    4338:	ldr	r1, [fp, #-12]
    433c:	movw	r2, #4
    4340:	bl	34e0 <transpose_array>
    4344:	cmp	r0, #0
    4348:	beq	4358 <coda_bin_cursor_read_uint32_array+0x180>
    434c:	mvn	r0, #0
    4350:	str	r0, [fp, #-4]
    4354:	b	4364 <coda_bin_cursor_read_uint32_array+0x18c>
    4358:	b	435c <coda_bin_cursor_read_uint32_array+0x184>
    435c:	movw	r0, #0
    4360:	str	r0, [fp, #-4]
    4364:	ldr	r0, [fp, #-4]
    4368:	mov	sp, fp
    436c:	pop	{fp, pc}

00004370 <coda_bin_cursor_read_int64_array>:
    4370:	push	{fp, lr}
    4374:	mov	fp, sp
    4378:	sub	sp, sp, #40	; 0x28
    437c:	str	r0, [fp, #-8]
    4380:	str	r1, [fp, #-12]
    4384:	str	r2, [fp, #-16]
    4388:	ldr	r0, [fp, #-8]
    438c:	add	r1, r0, #8
    4390:	ldr	r0, [r0, #4]
    4394:	sub	r0, r0, #1
    4398:	add	r0, r1, r0, lsl #4
    439c:	ldr	r0, [r0]
    43a0:	ldr	r0, [r0]
    43a4:	cmp	r0, #100	; 0x64
    43a8:	bcs	43cc <coda_bin_cursor_read_int64_array+0x5c>
    43ac:	ldr	r0, [fp, #-8]
    43b0:	add	r1, r0, #8
    43b4:	ldr	r0, [r0, #4]
    43b8:	sub	r0, r0, #1
    43bc:	add	r0, r1, r0, lsl #4
    43c0:	ldr	r0, [r0]
    43c4:	str	r0, [sp, #16]
    43c8:	b	43ec <coda_bin_cursor_read_int64_array+0x7c>
    43cc:	ldr	r0, [fp, #-8]
    43d0:	add	r1, r0, #8
    43d4:	ldr	r0, [r0, #4]
    43d8:	sub	r0, r0, #1
    43dc:	add	r0, r1, r0, lsl #4
    43e0:	ldr	r0, [r0]
    43e4:	ldr	r0, [r0, #4]
    43e8:	str	r0, [sp, #16]
    43ec:	ldr	r0, [sp, #16]
    43f0:	str	r0, [sp, #20]
    43f4:	ldr	r0, [sp, #20]
    43f8:	ldr	r0, [r0, #40]	; 0x28
    43fc:	ldr	r0, [r0]
    4400:	cmp	r0, #1
    4404:	bne	4448 <coda_bin_cursor_read_int64_array+0xd8>
    4408:	movw	r0, #0
    440c:	movt	r0, #0
    4410:	ldr	r1, [fp, #-8]
    4414:	ldr	r2, [fp, #-12]
    4418:	ldr	r3, [fp, #-16]
    441c:	str	r0, [sp, #12]
    4420:	mov	r0, r1
    4424:	ldr	r1, [sp, #12]
    4428:	movw	ip, #8
    442c:	str	r3, [sp, #8]
    4430:	mov	r3, ip
    4434:	ldr	ip, [sp, #8]
    4438:	str	ip, [sp]
    443c:	bl	30fc <read_array>
    4440:	str	r0, [fp, #-4]
    4444:	b	44fc <coda_bin_cursor_read_int64_array+0x18c>
    4448:	ldr	r0, [sp, #20]
    444c:	ldr	r0, [r0, #40]	; 0x28
    4450:	ldr	r0, [r0]
    4454:	cmp	r0, #0
    4458:	bne	4460 <coda_bin_cursor_read_int64_array+0xf0>
    445c:	b	4480 <coda_bin_cursor_read_int64_array+0x110>
    4460:	movw	r0, #0
    4464:	movt	r0, #0
    4468:	movw	r1, #0
    446c:	movt	r1, #0
    4470:	movw	r2, #1062	; 0x426
    4474:	movw	r3, #0
    4478:	movt	r3, #0
    447c:	bl	0 <__assert_fail>
    4480:	movw	r0, #0
    4484:	movt	r0, #0
    4488:	ldr	r1, [fp, #-8]
    448c:	ldr	r2, [fp, #-12]
    4490:	str	r0, [sp, #4]
    4494:	mov	r0, r1
    4498:	ldr	r1, [sp, #4]
    449c:	movw	r3, #8
    44a0:	movw	ip, #0
    44a4:	str	ip, [sp]
    44a8:	bl	30fc <read_array>
    44ac:	cmp	r0, #0
    44b0:	beq	44c0 <coda_bin_cursor_read_int64_array+0x150>
    44b4:	mvn	r0, #0
    44b8:	str	r0, [fp, #-4]
    44bc:	b	44fc <coda_bin_cursor_read_int64_array+0x18c>
    44c0:	ldr	r0, [fp, #-16]
    44c4:	cmp	r0, #0
    44c8:	beq	44f4 <coda_bin_cursor_read_int64_array+0x184>
    44cc:	ldr	r0, [fp, #-8]
    44d0:	ldr	r1, [fp, #-12]
    44d4:	movw	r2, #8
    44d8:	bl	34e0 <transpose_array>
    44dc:	cmp	r0, #0
    44e0:	beq	44f0 <coda_bin_cursor_read_int64_array+0x180>
    44e4:	mvn	r0, #0
    44e8:	str	r0, [fp, #-4]
    44ec:	b	44fc <coda_bin_cursor_read_int64_array+0x18c>
    44f0:	b	44f4 <coda_bin_cursor_read_int64_array+0x184>
    44f4:	movw	r0, #0
    44f8:	str	r0, [fp, #-4]
    44fc:	ldr	r0, [fp, #-4]
    4500:	mov	sp, fp
    4504:	pop	{fp, pc}

00004508 <coda_bin_cursor_read_uint64_array>:
    4508:	push	{fp, lr}
    450c:	mov	fp, sp
    4510:	sub	sp, sp, #40	; 0x28
    4514:	str	r0, [fp, #-8]
    4518:	str	r1, [fp, #-12]
    451c:	str	r2, [fp, #-16]
    4520:	ldr	r0, [fp, #-8]
    4524:	add	r1, r0, #8
    4528:	ldr	r0, [r0, #4]
    452c:	sub	r0, r0, #1
    4530:	add	r0, r1, r0, lsl #4
    4534:	ldr	r0, [r0]
    4538:	ldr	r0, [r0]
    453c:	cmp	r0, #100	; 0x64
    4540:	bcs	4564 <coda_bin_cursor_read_uint64_array+0x5c>
    4544:	ldr	r0, [fp, #-8]
    4548:	add	r1, r0, #8
    454c:	ldr	r0, [r0, #4]
    4550:	sub	r0, r0, #1
    4554:	add	r0, r1, r0, lsl #4
    4558:	ldr	r0, [r0]
    455c:	str	r0, [sp, #16]
    4560:	b	4584 <coda_bin_cursor_read_uint64_array+0x7c>
    4564:	ldr	r0, [fp, #-8]
    4568:	add	r1, r0, #8
    456c:	ldr	r0, [r0, #4]
    4570:	sub	r0, r0, #1
    4574:	add	r0, r1, r0, lsl #4
    4578:	ldr	r0, [r0]
    457c:	ldr	r0, [r0, #4]
    4580:	str	r0, [sp, #16]
    4584:	ldr	r0, [sp, #16]
    4588:	str	r0, [sp, #20]
    458c:	ldr	r0, [sp, #20]
    4590:	ldr	r0, [r0, #40]	; 0x28
    4594:	ldr	r0, [r0]
    4598:	cmp	r0, #1
    459c:	bne	45e0 <coda_bin_cursor_read_uint64_array+0xd8>
    45a0:	movw	r0, #0
    45a4:	movt	r0, #0
    45a8:	ldr	r1, [fp, #-8]
    45ac:	ldr	r2, [fp, #-12]
    45b0:	ldr	r3, [fp, #-16]
    45b4:	str	r0, [sp, #12]
    45b8:	mov	r0, r1
    45bc:	ldr	r1, [sp, #12]
    45c0:	movw	ip, #8
    45c4:	str	r3, [sp, #8]
    45c8:	mov	r3, ip
    45cc:	ldr	ip, [sp, #8]
    45d0:	str	ip, [sp]
    45d4:	bl	30fc <read_array>
    45d8:	str	r0, [fp, #-4]
    45dc:	b	4694 <coda_bin_cursor_read_uint64_array+0x18c>
    45e0:	ldr	r0, [sp, #20]
    45e4:	ldr	r0, [r0, #40]	; 0x28
    45e8:	ldr	r0, [r0]
    45ec:	cmp	r0, #0
    45f0:	bne	45f8 <coda_bin_cursor_read_uint64_array+0xf0>
    45f4:	b	4618 <coda_bin_cursor_read_uint64_array+0x110>
    45f8:	movw	r0, #0
    45fc:	movt	r0, #0
    4600:	movw	r1, #0
    4604:	movt	r1, #0
    4608:	movw	r2, #1088	; 0x440
    460c:	movw	r3, #0
    4610:	movt	r3, #0
    4614:	bl	0 <__assert_fail>
    4618:	movw	r0, #0
    461c:	movt	r0, #0
    4620:	ldr	r1, [fp, #-8]
    4624:	ldr	r2, [fp, #-12]
    4628:	str	r0, [sp, #4]
    462c:	mov	r0, r1
    4630:	ldr	r1, [sp, #4]
    4634:	movw	r3, #8
    4638:	movw	ip, #0
    463c:	str	ip, [sp]
    4640:	bl	30fc <read_array>
    4644:	cmp	r0, #0
    4648:	beq	4658 <coda_bin_cursor_read_uint64_array+0x150>
    464c:	mvn	r0, #0
    4650:	str	r0, [fp, #-4]
    4654:	b	4694 <coda_bin_cursor_read_uint64_array+0x18c>
    4658:	ldr	r0, [fp, #-16]
    465c:	cmp	r0, #0
    4660:	beq	468c <coda_bin_cursor_read_uint64_array+0x184>
    4664:	ldr	r0, [fp, #-8]
    4668:	ldr	r1, [fp, #-12]
    466c:	movw	r2, #8
    4670:	bl	34e0 <transpose_array>
    4674:	cmp	r0, #0
    4678:	beq	4688 <coda_bin_cursor_read_uint64_array+0x180>
    467c:	mvn	r0, #0
    4680:	str	r0, [fp, #-4]
    4684:	b	4694 <coda_bin_cursor_read_uint64_array+0x18c>
    4688:	b	468c <coda_bin_cursor_read_uint64_array+0x184>
    468c:	movw	r0, #0
    4690:	str	r0, [fp, #-4]
    4694:	ldr	r0, [fp, #-4]
    4698:	mov	sp, fp
    469c:	pop	{fp, pc}

000046a0 <coda_bin_cursor_read_float_array>:
    46a0:	push	{fp, lr}
    46a4:	mov	fp, sp
    46a8:	sub	sp, sp, #40	; 0x28
    46ac:	str	r0, [fp, #-8]
    46b0:	str	r1, [fp, #-12]
    46b4:	str	r2, [fp, #-16]
    46b8:	ldr	r0, [fp, #-8]
    46bc:	add	r1, r0, #8
    46c0:	ldr	r0, [r0, #4]
    46c4:	sub	r0, r0, #1
    46c8:	add	r0, r1, r0, lsl #4
    46cc:	ldr	r0, [r0]
    46d0:	ldr	r0, [r0]
    46d4:	cmp	r0, #100	; 0x64
    46d8:	bcs	46fc <coda_bin_cursor_read_float_array+0x5c>
    46dc:	ldr	r0, [fp, #-8]
    46e0:	add	r1, r0, #8
    46e4:	ldr	r0, [r0, #4]
    46e8:	sub	r0, r0, #1
    46ec:	add	r0, r1, r0, lsl #4
    46f0:	ldr	r0, [r0]
    46f4:	str	r0, [sp, #16]
    46f8:	b	471c <coda_bin_cursor_read_float_array+0x7c>
    46fc:	ldr	r0, [fp, #-8]
    4700:	add	r1, r0, #8
    4704:	ldr	r0, [r0, #4]
    4708:	sub	r0, r0, #1
    470c:	add	r0, r1, r0, lsl #4
    4710:	ldr	r0, [r0]
    4714:	ldr	r0, [r0, #4]
    4718:	str	r0, [sp, #16]
    471c:	ldr	r0, [sp, #16]
    4720:	str	r0, [sp, #20]
    4724:	ldr	r0, [sp, #20]
    4728:	ldr	r0, [r0, #40]	; 0x28
    472c:	ldr	r0, [r0]
    4730:	cmp	r0, #1
    4734:	bne	4778 <coda_bin_cursor_read_float_array+0xd8>
    4738:	movw	r0, #0
    473c:	movt	r0, #0
    4740:	ldr	r1, [fp, #-8]
    4744:	ldr	r2, [fp, #-12]
    4748:	ldr	r3, [fp, #-16]
    474c:	str	r0, [sp, #12]
    4750:	mov	r0, r1
    4754:	ldr	r1, [sp, #12]
    4758:	movw	ip, #4
    475c:	str	r3, [sp, #8]
    4760:	mov	r3, ip
    4764:	ldr	ip, [sp, #8]
    4768:	str	ip, [sp]
    476c:	bl	30fc <read_array>
    4770:	str	r0, [fp, #-4]
    4774:	b	482c <coda_bin_cursor_read_float_array+0x18c>
    4778:	ldr	r0, [sp, #20]
    477c:	ldr	r0, [r0, #40]	; 0x28
    4780:	ldr	r0, [r0]
    4784:	cmp	r0, #0
    4788:	bne	4790 <coda_bin_cursor_read_float_array+0xf0>
    478c:	b	47b0 <coda_bin_cursor_read_float_array+0x110>
    4790:	movw	r0, #0
    4794:	movt	r0, #0
    4798:	movw	r1, #0
    479c:	movt	r1, #0
    47a0:	movw	r2, #1114	; 0x45a
    47a4:	movw	r3, #0
    47a8:	movt	r3, #0
    47ac:	bl	0 <__assert_fail>
    47b0:	movw	r0, #0
    47b4:	movt	r0, #0
    47b8:	ldr	r1, [fp, #-8]
    47bc:	ldr	r2, [fp, #-12]
    47c0:	str	r0, [sp, #4]
    47c4:	mov	r0, r1
    47c8:	ldr	r1, [sp, #4]
    47cc:	movw	r3, #4
    47d0:	movw	ip, #0
    47d4:	str	ip, [sp]
    47d8:	bl	30fc <read_array>
    47dc:	cmp	r0, #0
    47e0:	beq	47f0 <coda_bin_cursor_read_float_array+0x150>
    47e4:	mvn	r0, #0
    47e8:	str	r0, [fp, #-4]
    47ec:	b	482c <coda_bin_cursor_read_float_array+0x18c>
    47f0:	ldr	r0, [fp, #-16]
    47f4:	cmp	r0, #0
    47f8:	beq	4824 <coda_bin_cursor_read_float_array+0x184>
    47fc:	ldr	r0, [fp, #-8]
    4800:	ldr	r1, [fp, #-12]
    4804:	movw	r2, #4
    4808:	bl	34e0 <transpose_array>
    480c:	cmp	r0, #0
    4810:	beq	4820 <coda_bin_cursor_read_float_array+0x180>
    4814:	mvn	r0, #0
    4818:	str	r0, [fp, #-4]
    481c:	b	482c <coda_bin_cursor_read_float_array+0x18c>
    4820:	b	4824 <coda_bin_cursor_read_float_array+0x184>
    4824:	movw	r0, #0
    4828:	str	r0, [fp, #-4]
    482c:	ldr	r0, [fp, #-4]
    4830:	mov	sp, fp
    4834:	pop	{fp, pc}

00004838 <coda_bin_cursor_read_double_array>:
    4838:	push	{fp, lr}
    483c:	mov	fp, sp
    4840:	sub	sp, sp, #40	; 0x28
    4844:	str	r0, [fp, #-8]
    4848:	str	r1, [fp, #-12]
    484c:	str	r2, [fp, #-16]
    4850:	ldr	r0, [fp, #-8]
    4854:	add	r1, r0, #8
    4858:	ldr	r0, [r0, #4]
    485c:	sub	r0, r0, #1
    4860:	add	r0, r1, r0, lsl #4
    4864:	ldr	r0, [r0]
    4868:	ldr	r0, [r0]
    486c:	cmp	r0, #100	; 0x64
    4870:	bcs	4894 <coda_bin_cursor_read_double_array+0x5c>
    4874:	ldr	r0, [fp, #-8]
    4878:	add	r1, r0, #8
    487c:	ldr	r0, [r0, #4]
    4880:	sub	r0, r0, #1
    4884:	add	r0, r1, r0, lsl #4
    4888:	ldr	r0, [r0]
    488c:	str	r0, [sp, #16]
    4890:	b	48b4 <coda_bin_cursor_read_double_array+0x7c>
    4894:	ldr	r0, [fp, #-8]
    4898:	add	r1, r0, #8
    489c:	ldr	r0, [r0, #4]
    48a0:	sub	r0, r0, #1
    48a4:	add	r0, r1, r0, lsl #4
    48a8:	ldr	r0, [r0]
    48ac:	ldr	r0, [r0, #4]
    48b0:	str	r0, [sp, #16]
    48b4:	ldr	r0, [sp, #16]
    48b8:	str	r0, [sp, #20]
    48bc:	ldr	r0, [sp, #20]
    48c0:	ldr	r0, [r0, #40]	; 0x28
    48c4:	ldr	r0, [r0]
    48c8:	cmp	r0, #1
    48cc:	bne	4910 <coda_bin_cursor_read_double_array+0xd8>
    48d0:	movw	r0, #0
    48d4:	movt	r0, #0
    48d8:	ldr	r1, [fp, #-8]
    48dc:	ldr	r2, [fp, #-12]
    48e0:	ldr	r3, [fp, #-16]
    48e4:	str	r0, [sp, #12]
    48e8:	mov	r0, r1
    48ec:	ldr	r1, [sp, #12]
    48f0:	movw	ip, #8
    48f4:	str	r3, [sp, #8]
    48f8:	mov	r3, ip
    48fc:	ldr	ip, [sp, #8]
    4900:	str	ip, [sp]
    4904:	bl	30fc <read_array>
    4908:	str	r0, [fp, #-4]
    490c:	b	49c4 <coda_bin_cursor_read_double_array+0x18c>
    4910:	ldr	r0, [sp, #20]
    4914:	ldr	r0, [r0, #40]	; 0x28
    4918:	ldr	r0, [r0]
    491c:	cmp	r0, #0
    4920:	bne	4928 <coda_bin_cursor_read_double_array+0xf0>
    4924:	b	4948 <coda_bin_cursor_read_double_array+0x110>
    4928:	movw	r0, #0
    492c:	movt	r0, #0
    4930:	movw	r1, #0
    4934:	movt	r1, #0
    4938:	movw	r2, #1140	; 0x474
    493c:	movw	r3, #0
    4940:	movt	r3, #0
    4944:	bl	0 <__assert_fail>
    4948:	movw	r0, #0
    494c:	movt	r0, #0
    4950:	ldr	r1, [fp, #-8]
    4954:	ldr	r2, [fp, #-12]
    4958:	str	r0, [sp, #4]
    495c:	mov	r0, r1
    4960:	ldr	r1, [sp, #4]
    4964:	movw	r3, #8
    4968:	movw	ip, #0
    496c:	str	ip, [sp]
    4970:	bl	30fc <read_array>
    4974:	cmp	r0, #0
    4978:	beq	4988 <coda_bin_cursor_read_double_array+0x150>
    497c:	mvn	r0, #0
    4980:	str	r0, [fp, #-4]
    4984:	b	49c4 <coda_bin_cursor_read_double_array+0x18c>
    4988:	ldr	r0, [fp, #-16]
    498c:	cmp	r0, #0
    4990:	beq	49bc <coda_bin_cursor_read_double_array+0x184>
    4994:	ldr	r0, [fp, #-8]
    4998:	ldr	r1, [fp, #-12]
    499c:	movw	r2, #8
    49a0:	bl	34e0 <transpose_array>
    49a4:	cmp	r0, #0
    49a8:	beq	49b8 <coda_bin_cursor_read_double_array+0x180>
    49ac:	mvn	r0, #0
    49b0:	str	r0, [fp, #-4]
    49b4:	b	49c4 <coda_bin_cursor_read_double_array+0x18c>
    49b8:	b	49bc <coda_bin_cursor_read_double_array+0x184>
    49bc:	movw	r0, #0
    49c0:	str	r0, [fp, #-4]
    49c4:	ldr	r0, [fp, #-4]
    49c8:	mov	sp, fp
    49cc:	pop	{fp, pc}

000049d0 <coda_bin_cursor_read_char_array>:
    49d0:	push	{fp, lr}
    49d4:	mov	fp, sp
    49d8:	sub	sp, sp, #32
    49dc:	str	r0, [fp, #-8]
    49e0:	str	r1, [fp, #-12]
    49e4:	str	r2, [sp, #16]
    49e8:	ldr	r0, [fp, #-8]
    49ec:	add	r1, r0, #8
    49f0:	ldr	r0, [r0, #4]
    49f4:	sub	r0, r0, #1
    49f8:	add	r0, r1, r0, lsl #4
    49fc:	ldr	r0, [r0]
    4a00:	ldr	r0, [r0]
    4a04:	cmp	r0, #100	; 0x64
    4a08:	bcs	4a2c <coda_bin_cursor_read_char_array+0x5c>
    4a0c:	ldr	r0, [fp, #-8]
    4a10:	add	r1, r0, #8
    4a14:	ldr	r0, [r0, #4]
    4a18:	sub	r0, r0, #1
    4a1c:	add	r0, r1, r0, lsl #4
    4a20:	ldr	r0, [r0]
    4a24:	str	r0, [sp, #8]
    4a28:	b	4a4c <coda_bin_cursor_read_char_array+0x7c>
    4a2c:	ldr	r0, [fp, #-8]
    4a30:	add	r1, r0, #8
    4a34:	ldr	r0, [r0, #4]
    4a38:	sub	r0, r0, #1
    4a3c:	add	r0, r1, r0, lsl #4
    4a40:	ldr	r0, [r0]
    4a44:	ldr	r0, [r0, #4]
    4a48:	str	r0, [sp, #8]
    4a4c:	ldr	r0, [sp, #8]
    4a50:	str	r0, [sp, #12]
    4a54:	ldr	r0, [sp, #12]
    4a58:	ldr	r0, [r0, #40]	; 0x28
    4a5c:	ldr	r0, [r0]
    4a60:	cmp	r0, #1
    4a64:	bne	4a9c <coda_bin_cursor_read_char_array+0xcc>
    4a68:	ldr	r0, [fp, #-8]
    4a6c:	ldr	r2, [fp, #-12]
    4a70:	ldr	r1, [sp, #16]
    4a74:	movw	r3, #0
    4a78:	movt	r3, #0
    4a7c:	str	r1, [sp, #4]
    4a80:	mov	r1, r3
    4a84:	movw	r3, #1
    4a88:	ldr	ip, [sp, #4]
    4a8c:	str	ip, [sp]
    4a90:	bl	30fc <read_array>
    4a94:	str	r0, [fp, #-4]
    4a98:	b	4b44 <coda_bin_cursor_read_char_array+0x174>
    4a9c:	ldr	r0, [sp, #12]
    4aa0:	ldr	r0, [r0, #40]	; 0x28
    4aa4:	ldr	r0, [r0]
    4aa8:	cmp	r0, #0
    4aac:	bne	4ab4 <coda_bin_cursor_read_char_array+0xe4>
    4ab0:	b	4ad4 <coda_bin_cursor_read_char_array+0x104>
    4ab4:	movw	r0, #0
    4ab8:	movt	r0, #0
    4abc:	movw	r1, #0
    4ac0:	movt	r1, #0
    4ac4:	movw	r2, #1166	; 0x48e
    4ac8:	movw	r3, #0
    4acc:	movt	r3, #0
    4ad0:	bl	0 <__assert_fail>
    4ad4:	ldr	r0, [fp, #-8]
    4ad8:	ldr	r2, [fp, #-12]
    4adc:	movw	r1, #0
    4ae0:	movt	r1, #0
    4ae4:	movw	r3, #1
    4ae8:	movw	ip, #0
    4aec:	str	ip, [sp]
    4af0:	bl	30fc <read_array>
    4af4:	cmp	r0, #0
    4af8:	beq	4b08 <coda_bin_cursor_read_char_array+0x138>
    4afc:	mvn	r0, #0
    4b00:	str	r0, [fp, #-4]
    4b04:	b	4b44 <coda_bin_cursor_read_char_array+0x174>
    4b08:	ldr	r0, [sp, #16]
    4b0c:	cmp	r0, #0
    4b10:	beq	4b3c <coda_bin_cursor_read_char_array+0x16c>
    4b14:	ldr	r0, [fp, #-8]
    4b18:	ldr	r1, [fp, #-12]
    4b1c:	movw	r2, #1
    4b20:	bl	34e0 <transpose_array>
    4b24:	cmp	r0, #0
    4b28:	beq	4b38 <coda_bin_cursor_read_char_array+0x168>
    4b2c:	mvn	r0, #0
    4b30:	str	r0, [fp, #-4]
    4b34:	b	4b44 <coda_bin_cursor_read_char_array+0x174>
    4b38:	b	4b3c <coda_bin_cursor_read_char_array+0x16c>
    4b3c:	movw	r0, #0
    4b40:	str	r0, [fp, #-4]
    4b44:	ldr	r0, [fp, #-4]
    4b48:	mov	sp, fp
    4b4c:	pop	{fp, pc}

00004b50 <coda_bin_cursor_read_int8_partial_array>:
    4b50:	push	{fp, lr}
    4b54:	mov	fp, sp
    4b58:	sub	sp, sp, #48	; 0x30
    4b5c:	str	r0, [fp, #-8]
    4b60:	str	r1, [fp, #-12]
    4b64:	str	r2, [fp, #-16]
    4b68:	str	r3, [fp, #-20]	; 0xffffffec
    4b6c:	ldr	r0, [fp, #-8]
    4b70:	add	r1, r0, #8
    4b74:	ldr	r0, [r0, #4]
    4b78:	sub	r0, r0, #1
    4b7c:	add	r0, r1, r0, lsl #4
    4b80:	ldr	r0, [r0]
    4b84:	ldr	r0, [r0]
    4b88:	cmp	r0, #100	; 0x64
    4b8c:	bcs	4bb0 <coda_bin_cursor_read_int8_partial_array+0x60>
    4b90:	ldr	r0, [fp, #-8]
    4b94:	add	r1, r0, #8
    4b98:	ldr	r0, [r0, #4]
    4b9c:	sub	r0, r0, #1
    4ba0:	add	r0, r1, r0, lsl #4
    4ba4:	ldr	r0, [r0]
    4ba8:	str	r0, [sp, #20]
    4bac:	b	4bd0 <coda_bin_cursor_read_int8_partial_array+0x80>
    4bb0:	ldr	r0, [fp, #-8]
    4bb4:	add	r1, r0, #8
    4bb8:	ldr	r0, [r0, #4]
    4bbc:	sub	r0, r0, #1
    4bc0:	add	r0, r1, r0, lsl #4
    4bc4:	ldr	r0, [r0]
    4bc8:	ldr	r0, [r0, #4]
    4bcc:	str	r0, [sp, #20]
    4bd0:	ldr	r0, [sp, #20]
    4bd4:	str	r0, [sp, #24]
    4bd8:	ldr	r0, [sp, #24]
    4bdc:	ldr	r0, [r0, #40]	; 0x28
    4be0:	ldr	r0, [r0]
    4be4:	cmp	r0, #1
    4be8:	bne	4c28 <coda_bin_cursor_read_int8_partial_array+0xd8>
    4bec:	ldr	r0, [fp, #-8]
    4bf0:	ldr	r2, [fp, #-12]
    4bf4:	ldr	r3, [fp, #-16]
    4bf8:	ldr	r1, [fp, #-20]	; 0xffffffec
    4bfc:	movw	ip, #0
    4c00:	movt	ip, #0
    4c04:	str	r1, [sp, #16]
    4c08:	mov	r1, ip
    4c0c:	ldr	ip, [sp, #16]
    4c10:	str	ip, [sp]
    4c14:	movw	lr, #1
    4c18:	str	lr, [sp, #4]
    4c1c:	bl	4ca4 <read_partial_array>
    4c20:	str	r0, [fp, #-4]
    4c24:	b	4c98 <coda_bin_cursor_read_int8_partial_array+0x148>
    4c28:	ldr	r0, [sp, #24]
    4c2c:	ldr	r0, [r0, #40]	; 0x28
    4c30:	ldr	r0, [r0]
    4c34:	cmp	r0, #0
    4c38:	bne	4c40 <coda_bin_cursor_read_int8_partial_array+0xf0>
    4c3c:	b	4c60 <coda_bin_cursor_read_int8_partial_array+0x110>
    4c40:	movw	r0, #0
    4c44:	movt	r0, #0
    4c48:	movw	r1, #0
    4c4c:	movt	r1, #0
    4c50:	movw	r2, #1192	; 0x4a8
    4c54:	movw	r3, #0
    4c58:	movt	r3, #0
    4c5c:	bl	0 <__assert_fail>
    4c60:	ldr	r0, [fp, #-8]
    4c64:	ldr	r2, [fp, #-12]
    4c68:	ldr	r3, [fp, #-16]
    4c6c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4c70:	movw	ip, #0
    4c74:	movt	ip, #0
    4c78:	str	r1, [sp, #12]
    4c7c:	mov	r1, ip
    4c80:	ldr	ip, [sp, #12]
    4c84:	str	ip, [sp]
    4c88:	movw	lr, #1
    4c8c:	str	lr, [sp, #4]
    4c90:	bl	4ca4 <read_partial_array>
    4c94:	str	r0, [fp, #-4]
    4c98:	ldr	r0, [fp, #-4]
    4c9c:	mov	sp, fp
    4ca0:	pop	{fp, pc}

00004ca4 <read_partial_array>:
    4ca4:	push	{r4, r5, fp, lr}
    4ca8:	add	fp, sp, #8
    4cac:	sub	sp, sp, #568	; 0x238
    4cb0:	ldr	ip, [fp, #12]
    4cb4:	ldr	lr, [fp, #8]
    4cb8:	str	r0, [fp, #-16]
    4cbc:	str	r1, [fp, #-20]	; 0xffffffec
    4cc0:	str	r2, [fp, #-24]	; 0xffffffe8
    4cc4:	str	r3, [fp, #-28]	; 0xffffffe4
    4cc8:	ldr	r0, [fp, #-16]
    4ccc:	add	r1, sp, #24
    4cd0:	str	r0, [sp, #16]
    4cd4:	mov	r0, r1
    4cd8:	ldr	r1, [sp, #16]
    4cdc:	movw	r2, #520	; 0x208
    4ce0:	str	ip, [sp, #12]
    4ce4:	str	lr, [sp, #8]
    4ce8:	bl	0 <memcpy>
    4cec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    4cf0:	cmp	r0, #0
    4cf4:	ble	4dbc <read_partial_array+0x118>
    4cf8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4cfc:	add	r0, sp, #24
    4d00:	bl	0 <coda_cursor_goto_array_element_by_index>
    4d04:	cmp	r0, #0
    4d08:	beq	4d18 <read_partial_array+0x74>
    4d0c:	mvn	r0, #0
    4d10:	str	r0, [fp, #-12]
    4d14:	b	4dc4 <read_partial_array+0x120>
    4d18:	movw	r0, #0
    4d1c:	str	r0, [sp, #20]
    4d20:	ldr	r0, [sp, #20]
    4d24:	ldr	r1, [fp, #-28]	; 0xffffffe4
    4d28:	cmp	r0, r1
    4d2c:	bge	4db8 <read_partial_array+0x114>
    4d30:	ldr	r0, [fp, #-20]	; 0xffffffec
    4d34:	ldr	r1, [fp, #8]
    4d38:	ldr	r2, [sp, #20]
    4d3c:	ldr	r3, [fp, #12]
    4d40:	mul	r2, r2, r3
    4d44:	add	r1, r1, r2
    4d48:	add	r2, sp, #24
    4d4c:	str	r0, [sp, #4]
    4d50:	mov	r0, r2
    4d54:	ldr	r2, [sp, #4]
    4d58:	blx	r2
    4d5c:	cmp	r0, #0
    4d60:	beq	4d70 <read_partial_array+0xcc>
    4d64:	mvn	r0, #0
    4d68:	str	r0, [fp, #-12]
    4d6c:	b	4dc4 <read_partial_array+0x120>
    4d70:	ldr	r0, [sp, #20]
    4d74:	ldr	r1, [fp, #-28]	; 0xffffffe4
    4d78:	sub	r1, r1, #1
    4d7c:	cmp	r0, r1
    4d80:	bge	4da4 <read_partial_array+0x100>
    4d84:	add	r0, sp, #24
    4d88:	bl	0 <coda_cursor_goto_next_array_element>
    4d8c:	cmp	r0, #0
    4d90:	beq	4da0 <read_partial_array+0xfc>
    4d94:	mvn	r0, #0
    4d98:	str	r0, [fp, #-12]
    4d9c:	b	4dc4 <read_partial_array+0x120>
    4da0:	b	4da4 <read_partial_array+0x100>
    4da4:	b	4da8 <read_partial_array+0x104>
    4da8:	ldr	r0, [sp, #20]
    4dac:	add	r0, r0, #1
    4db0:	str	r0, [sp, #20]
    4db4:	b	4d20 <read_partial_array+0x7c>
    4db8:	b	4dbc <read_partial_array+0x118>
    4dbc:	movw	r0, #0
    4dc0:	str	r0, [fp, #-12]
    4dc4:	ldr	r0, [fp, #-12]
    4dc8:	sub	sp, fp, #8
    4dcc:	pop	{r4, r5, fp, pc}

00004dd0 <coda_bin_cursor_read_uint8_partial_array>:
    4dd0:	push	{fp, lr}
    4dd4:	mov	fp, sp
    4dd8:	sub	sp, sp, #48	; 0x30
    4ddc:	str	r0, [fp, #-8]
    4de0:	str	r1, [fp, #-12]
    4de4:	str	r2, [fp, #-16]
    4de8:	str	r3, [fp, #-20]	; 0xffffffec
    4dec:	ldr	r0, [fp, #-8]
    4df0:	add	r1, r0, #8
    4df4:	ldr	r0, [r0, #4]
    4df8:	sub	r0, r0, #1
    4dfc:	add	r0, r1, r0, lsl #4
    4e00:	ldr	r0, [r0]
    4e04:	ldr	r0, [r0]
    4e08:	cmp	r0, #100	; 0x64
    4e0c:	bcs	4e30 <coda_bin_cursor_read_uint8_partial_array+0x60>
    4e10:	ldr	r0, [fp, #-8]
    4e14:	add	r1, r0, #8
    4e18:	ldr	r0, [r0, #4]
    4e1c:	sub	r0, r0, #1
    4e20:	add	r0, r1, r0, lsl #4
    4e24:	ldr	r0, [r0]
    4e28:	str	r0, [sp, #20]
    4e2c:	b	4e50 <coda_bin_cursor_read_uint8_partial_array+0x80>
    4e30:	ldr	r0, [fp, #-8]
    4e34:	add	r1, r0, #8
    4e38:	ldr	r0, [r0, #4]
    4e3c:	sub	r0, r0, #1
    4e40:	add	r0, r1, r0, lsl #4
    4e44:	ldr	r0, [r0]
    4e48:	ldr	r0, [r0, #4]
    4e4c:	str	r0, [sp, #20]
    4e50:	ldr	r0, [sp, #20]
    4e54:	str	r0, [sp, #24]
    4e58:	ldr	r0, [sp, #24]
    4e5c:	ldr	r0, [r0, #40]	; 0x28
    4e60:	ldr	r0, [r0]
    4e64:	cmp	r0, #1
    4e68:	bne	4ea8 <coda_bin_cursor_read_uint8_partial_array+0xd8>
    4e6c:	ldr	r0, [fp, #-8]
    4e70:	ldr	r2, [fp, #-12]
    4e74:	ldr	r3, [fp, #-16]
    4e78:	ldr	r1, [fp, #-20]	; 0xffffffec
    4e7c:	movw	ip, #0
    4e80:	movt	ip, #0
    4e84:	str	r1, [sp, #16]
    4e88:	mov	r1, ip
    4e8c:	ldr	ip, [sp, #16]
    4e90:	str	ip, [sp]
    4e94:	movw	lr, #1
    4e98:	str	lr, [sp, #4]
    4e9c:	bl	4ca4 <read_partial_array>
    4ea0:	str	r0, [fp, #-4]
    4ea4:	b	4f18 <coda_bin_cursor_read_uint8_partial_array+0x148>
    4ea8:	ldr	r0, [sp, #24]
    4eac:	ldr	r0, [r0, #40]	; 0x28
    4eb0:	ldr	r0, [r0]
    4eb4:	cmp	r0, #0
    4eb8:	bne	4ec0 <coda_bin_cursor_read_uint8_partial_array+0xf0>
    4ebc:	b	4ee0 <coda_bin_cursor_read_uint8_partial_array+0x110>
    4ec0:	movw	r0, #0
    4ec4:	movt	r0, #0
    4ec8:	movw	r1, #0
    4ecc:	movt	r1, #0
    4ed0:	movw	r2, #1206	; 0x4b6
    4ed4:	movw	r3, #0
    4ed8:	movt	r3, #0
    4edc:	bl	0 <__assert_fail>
    4ee0:	ldr	r0, [fp, #-8]
    4ee4:	ldr	r2, [fp, #-12]
    4ee8:	ldr	r3, [fp, #-16]
    4eec:	ldr	r1, [fp, #-20]	; 0xffffffec
    4ef0:	movw	ip, #0
    4ef4:	movt	ip, #0
    4ef8:	str	r1, [sp, #12]
    4efc:	mov	r1, ip
    4f00:	ldr	ip, [sp, #12]
    4f04:	str	ip, [sp]
    4f08:	movw	lr, #1
    4f0c:	str	lr, [sp, #4]
    4f10:	bl	4ca4 <read_partial_array>
    4f14:	str	r0, [fp, #-4]
    4f18:	ldr	r0, [fp, #-4]
    4f1c:	mov	sp, fp
    4f20:	pop	{fp, pc}

00004f24 <coda_bin_cursor_read_int16_partial_array>:
    4f24:	push	{fp, lr}
    4f28:	mov	fp, sp
    4f2c:	sub	sp, sp, #48	; 0x30
    4f30:	str	r0, [fp, #-8]
    4f34:	str	r1, [fp, #-12]
    4f38:	str	r2, [fp, #-16]
    4f3c:	str	r3, [fp, #-20]	; 0xffffffec
    4f40:	ldr	r0, [fp, #-8]
    4f44:	add	r1, r0, #8
    4f48:	ldr	r0, [r0, #4]
    4f4c:	sub	r0, r0, #1
    4f50:	add	r0, r1, r0, lsl #4
    4f54:	ldr	r0, [r0]
    4f58:	ldr	r0, [r0]
    4f5c:	cmp	r0, #100	; 0x64
    4f60:	bcs	4f84 <coda_bin_cursor_read_int16_partial_array+0x60>
    4f64:	ldr	r0, [fp, #-8]
    4f68:	add	r1, r0, #8
    4f6c:	ldr	r0, [r0, #4]
    4f70:	sub	r0, r0, #1
    4f74:	add	r0, r1, r0, lsl #4
    4f78:	ldr	r0, [r0]
    4f7c:	str	r0, [sp, #20]
    4f80:	b	4fa4 <coda_bin_cursor_read_int16_partial_array+0x80>
    4f84:	ldr	r0, [fp, #-8]
    4f88:	add	r1, r0, #8
    4f8c:	ldr	r0, [r0, #4]
    4f90:	sub	r0, r0, #1
    4f94:	add	r0, r1, r0, lsl #4
    4f98:	ldr	r0, [r0]
    4f9c:	ldr	r0, [r0, #4]
    4fa0:	str	r0, [sp, #20]
    4fa4:	ldr	r0, [sp, #20]
    4fa8:	str	r0, [sp, #24]
    4fac:	ldr	r0, [sp, #24]
    4fb0:	ldr	r0, [r0, #40]	; 0x28
    4fb4:	ldr	r0, [r0]
    4fb8:	cmp	r0, #1
    4fbc:	bne	4ffc <coda_bin_cursor_read_int16_partial_array+0xd8>
    4fc0:	movw	r0, #0
    4fc4:	movt	r0, #0
    4fc8:	ldr	r1, [fp, #-8]
    4fcc:	ldr	r2, [fp, #-12]
    4fd0:	ldr	r3, [fp, #-16]
    4fd4:	ldr	ip, [fp, #-20]	; 0xffffffec
    4fd8:	str	r0, [sp, #16]
    4fdc:	mov	r0, r1
    4fe0:	ldr	r1, [sp, #16]
    4fe4:	str	ip, [sp]
    4fe8:	movw	ip, #2
    4fec:	str	ip, [sp, #4]
    4ff0:	bl	4ca4 <read_partial_array>
    4ff4:	str	r0, [fp, #-4]
    4ff8:	b	506c <coda_bin_cursor_read_int16_partial_array+0x148>
    4ffc:	ldr	r0, [sp, #24]
    5000:	ldr	r0, [r0, #40]	; 0x28
    5004:	ldr	r0, [r0]
    5008:	cmp	r0, #0
    500c:	bne	5014 <coda_bin_cursor_read_int16_partial_array+0xf0>
    5010:	b	5034 <coda_bin_cursor_read_int16_partial_array+0x110>
    5014:	movw	r0, #0
    5018:	movt	r0, #0
    501c:	movw	r1, #0
    5020:	movt	r1, #0
    5024:	movw	r2, #1220	; 0x4c4
    5028:	movw	r3, #0
    502c:	movt	r3, #0
    5030:	bl	0 <__assert_fail>
    5034:	movw	r0, #0
    5038:	movt	r0, #0
    503c:	ldr	r1, [fp, #-8]
    5040:	ldr	r2, [fp, #-12]
    5044:	ldr	r3, [fp, #-16]
    5048:	ldr	ip, [fp, #-20]	; 0xffffffec
    504c:	str	r0, [sp, #12]
    5050:	mov	r0, r1
    5054:	ldr	r1, [sp, #12]
    5058:	str	ip, [sp]
    505c:	movw	ip, #2
    5060:	str	ip, [sp, #4]
    5064:	bl	4ca4 <read_partial_array>
    5068:	str	r0, [fp, #-4]
    506c:	ldr	r0, [fp, #-4]
    5070:	mov	sp, fp
    5074:	pop	{fp, pc}

00005078 <coda_bin_cursor_read_uint16_partial_array>:
    5078:	push	{fp, lr}
    507c:	mov	fp, sp
    5080:	sub	sp, sp, #48	; 0x30
    5084:	str	r0, [fp, #-8]
    5088:	str	r1, [fp, #-12]
    508c:	str	r2, [fp, #-16]
    5090:	str	r3, [fp, #-20]	; 0xffffffec
    5094:	ldr	r0, [fp, #-8]
    5098:	add	r1, r0, #8
    509c:	ldr	r0, [r0, #4]
    50a0:	sub	r0, r0, #1
    50a4:	add	r0, r1, r0, lsl #4
    50a8:	ldr	r0, [r0]
    50ac:	ldr	r0, [r0]
    50b0:	cmp	r0, #100	; 0x64
    50b4:	bcs	50d8 <coda_bin_cursor_read_uint16_partial_array+0x60>
    50b8:	ldr	r0, [fp, #-8]
    50bc:	add	r1, r0, #8
    50c0:	ldr	r0, [r0, #4]
    50c4:	sub	r0, r0, #1
    50c8:	add	r0, r1, r0, lsl #4
    50cc:	ldr	r0, [r0]
    50d0:	str	r0, [sp, #20]
    50d4:	b	50f8 <coda_bin_cursor_read_uint16_partial_array+0x80>
    50d8:	ldr	r0, [fp, #-8]
    50dc:	add	r1, r0, #8
    50e0:	ldr	r0, [r0, #4]
    50e4:	sub	r0, r0, #1
    50e8:	add	r0, r1, r0, lsl #4
    50ec:	ldr	r0, [r0]
    50f0:	ldr	r0, [r0, #4]
    50f4:	str	r0, [sp, #20]
    50f8:	ldr	r0, [sp, #20]
    50fc:	str	r0, [sp, #24]
    5100:	ldr	r0, [sp, #24]
    5104:	ldr	r0, [r0, #40]	; 0x28
    5108:	ldr	r0, [r0]
    510c:	cmp	r0, #1
    5110:	bne	5150 <coda_bin_cursor_read_uint16_partial_array+0xd8>
    5114:	movw	r0, #0
    5118:	movt	r0, #0
    511c:	ldr	r1, [fp, #-8]
    5120:	ldr	r2, [fp, #-12]
    5124:	ldr	r3, [fp, #-16]
    5128:	ldr	ip, [fp, #-20]	; 0xffffffec
    512c:	str	r0, [sp, #16]
    5130:	mov	r0, r1
    5134:	ldr	r1, [sp, #16]
    5138:	str	ip, [sp]
    513c:	movw	ip, #2
    5140:	str	ip, [sp, #4]
    5144:	bl	4ca4 <read_partial_array>
    5148:	str	r0, [fp, #-4]
    514c:	b	51c0 <coda_bin_cursor_read_uint16_partial_array+0x148>
    5150:	ldr	r0, [sp, #24]
    5154:	ldr	r0, [r0, #40]	; 0x28
    5158:	ldr	r0, [r0]
    515c:	cmp	r0, #0
    5160:	bne	5168 <coda_bin_cursor_read_uint16_partial_array+0xf0>
    5164:	b	5188 <coda_bin_cursor_read_uint16_partial_array+0x110>
    5168:	movw	r0, #0
    516c:	movt	r0, #0
    5170:	movw	r1, #0
    5174:	movt	r1, #0
    5178:	movw	r2, #1234	; 0x4d2
    517c:	movw	r3, #0
    5180:	movt	r3, #0
    5184:	bl	0 <__assert_fail>
    5188:	movw	r0, #0
    518c:	movt	r0, #0
    5190:	ldr	r1, [fp, #-8]
    5194:	ldr	r2, [fp, #-12]
    5198:	ldr	r3, [fp, #-16]
    519c:	ldr	ip, [fp, #-20]	; 0xffffffec
    51a0:	str	r0, [sp, #12]
    51a4:	mov	r0, r1
    51a8:	ldr	r1, [sp, #12]
    51ac:	str	ip, [sp]
    51b0:	movw	ip, #2
    51b4:	str	ip, [sp, #4]
    51b8:	bl	4ca4 <read_partial_array>
    51bc:	str	r0, [fp, #-4]
    51c0:	ldr	r0, [fp, #-4]
    51c4:	mov	sp, fp
    51c8:	pop	{fp, pc}

000051cc <coda_bin_cursor_read_int32_partial_array>:
    51cc:	push	{fp, lr}
    51d0:	mov	fp, sp
    51d4:	sub	sp, sp, #48	; 0x30
    51d8:	str	r0, [fp, #-8]
    51dc:	str	r1, [fp, #-12]
    51e0:	str	r2, [fp, #-16]
    51e4:	str	r3, [fp, #-20]	; 0xffffffec
    51e8:	ldr	r0, [fp, #-8]
    51ec:	add	r1, r0, #8
    51f0:	ldr	r0, [r0, #4]
    51f4:	sub	r0, r0, #1
    51f8:	add	r0, r1, r0, lsl #4
    51fc:	ldr	r0, [r0]
    5200:	ldr	r0, [r0]
    5204:	cmp	r0, #100	; 0x64
    5208:	bcs	522c <coda_bin_cursor_read_int32_partial_array+0x60>
    520c:	ldr	r0, [fp, #-8]
    5210:	add	r1, r0, #8
    5214:	ldr	r0, [r0, #4]
    5218:	sub	r0, r0, #1
    521c:	add	r0, r1, r0, lsl #4
    5220:	ldr	r0, [r0]
    5224:	str	r0, [sp, #20]
    5228:	b	524c <coda_bin_cursor_read_int32_partial_array+0x80>
    522c:	ldr	r0, [fp, #-8]
    5230:	add	r1, r0, #8
    5234:	ldr	r0, [r0, #4]
    5238:	sub	r0, r0, #1
    523c:	add	r0, r1, r0, lsl #4
    5240:	ldr	r0, [r0]
    5244:	ldr	r0, [r0, #4]
    5248:	str	r0, [sp, #20]
    524c:	ldr	r0, [sp, #20]
    5250:	str	r0, [sp, #24]
    5254:	ldr	r0, [sp, #24]
    5258:	ldr	r0, [r0, #40]	; 0x28
    525c:	ldr	r0, [r0]
    5260:	cmp	r0, #1
    5264:	bne	52a4 <coda_bin_cursor_read_int32_partial_array+0xd8>
    5268:	movw	r0, #0
    526c:	movt	r0, #0
    5270:	ldr	r1, [fp, #-8]
    5274:	ldr	r2, [fp, #-12]
    5278:	ldr	r3, [fp, #-16]
    527c:	ldr	ip, [fp, #-20]	; 0xffffffec
    5280:	str	r0, [sp, #16]
    5284:	mov	r0, r1
    5288:	ldr	r1, [sp, #16]
    528c:	str	ip, [sp]
    5290:	movw	ip, #4
    5294:	str	ip, [sp, #4]
    5298:	bl	4ca4 <read_partial_array>
    529c:	str	r0, [fp, #-4]
    52a0:	b	5314 <coda_bin_cursor_read_int32_partial_array+0x148>
    52a4:	ldr	r0, [sp, #24]
    52a8:	ldr	r0, [r0, #40]	; 0x28
    52ac:	ldr	r0, [r0]
    52b0:	cmp	r0, #0
    52b4:	bne	52bc <coda_bin_cursor_read_int32_partial_array+0xf0>
    52b8:	b	52dc <coda_bin_cursor_read_int32_partial_array+0x110>
    52bc:	movw	r0, #0
    52c0:	movt	r0, #0
    52c4:	movw	r1, #0
    52c8:	movt	r1, #0
    52cc:	movw	r2, #1248	; 0x4e0
    52d0:	movw	r3, #0
    52d4:	movt	r3, #0
    52d8:	bl	0 <__assert_fail>
    52dc:	movw	r0, #0
    52e0:	movt	r0, #0
    52e4:	ldr	r1, [fp, #-8]
    52e8:	ldr	r2, [fp, #-12]
    52ec:	ldr	r3, [fp, #-16]
    52f0:	ldr	ip, [fp, #-20]	; 0xffffffec
    52f4:	str	r0, [sp, #12]
    52f8:	mov	r0, r1
    52fc:	ldr	r1, [sp, #12]
    5300:	str	ip, [sp]
    5304:	movw	ip, #4
    5308:	str	ip, [sp, #4]
    530c:	bl	4ca4 <read_partial_array>
    5310:	str	r0, [fp, #-4]
    5314:	ldr	r0, [fp, #-4]
    5318:	mov	sp, fp
    531c:	pop	{fp, pc}

00005320 <coda_bin_cursor_read_uint32_partial_array>:
    5320:	push	{fp, lr}
    5324:	mov	fp, sp
    5328:	sub	sp, sp, #48	; 0x30
    532c:	str	r0, [fp, #-8]
    5330:	str	r1, [fp, #-12]
    5334:	str	r2, [fp, #-16]
    5338:	str	r3, [fp, #-20]	; 0xffffffec
    533c:	ldr	r0, [fp, #-8]
    5340:	add	r1, r0, #8
    5344:	ldr	r0, [r0, #4]
    5348:	sub	r0, r0, #1
    534c:	add	r0, r1, r0, lsl #4
    5350:	ldr	r0, [r0]
    5354:	ldr	r0, [r0]
    5358:	cmp	r0, #100	; 0x64
    535c:	bcs	5380 <coda_bin_cursor_read_uint32_partial_array+0x60>
    5360:	ldr	r0, [fp, #-8]
    5364:	add	r1, r0, #8
    5368:	ldr	r0, [r0, #4]
    536c:	sub	r0, r0, #1
    5370:	add	r0, r1, r0, lsl #4
    5374:	ldr	r0, [r0]
    5378:	str	r0, [sp, #20]
    537c:	b	53a0 <coda_bin_cursor_read_uint32_partial_array+0x80>
    5380:	ldr	r0, [fp, #-8]
    5384:	add	r1, r0, #8
    5388:	ldr	r0, [r0, #4]
    538c:	sub	r0, r0, #1
    5390:	add	r0, r1, r0, lsl #4
    5394:	ldr	r0, [r0]
    5398:	ldr	r0, [r0, #4]
    539c:	str	r0, [sp, #20]
    53a0:	ldr	r0, [sp, #20]
    53a4:	str	r0, [sp, #24]
    53a8:	ldr	r0, [sp, #24]
    53ac:	ldr	r0, [r0, #40]	; 0x28
    53b0:	ldr	r0, [r0]
    53b4:	cmp	r0, #1
    53b8:	bne	53f8 <coda_bin_cursor_read_uint32_partial_array+0xd8>
    53bc:	movw	r0, #0
    53c0:	movt	r0, #0
    53c4:	ldr	r1, [fp, #-8]
    53c8:	ldr	r2, [fp, #-12]
    53cc:	ldr	r3, [fp, #-16]
    53d0:	ldr	ip, [fp, #-20]	; 0xffffffec
    53d4:	str	r0, [sp, #16]
    53d8:	mov	r0, r1
    53dc:	ldr	r1, [sp, #16]
    53e0:	str	ip, [sp]
    53e4:	movw	ip, #4
    53e8:	str	ip, [sp, #4]
    53ec:	bl	4ca4 <read_partial_array>
    53f0:	str	r0, [fp, #-4]
    53f4:	b	5468 <coda_bin_cursor_read_uint32_partial_array+0x148>
    53f8:	ldr	r0, [sp, #24]
    53fc:	ldr	r0, [r0, #40]	; 0x28
    5400:	ldr	r0, [r0]
    5404:	cmp	r0, #0
    5408:	bne	5410 <coda_bin_cursor_read_uint32_partial_array+0xf0>
    540c:	b	5430 <coda_bin_cursor_read_uint32_partial_array+0x110>
    5410:	movw	r0, #0
    5414:	movt	r0, #0
    5418:	movw	r1, #0
    541c:	movt	r1, #0
    5420:	movw	r2, #1262	; 0x4ee
    5424:	movw	r3, #0
    5428:	movt	r3, #0
    542c:	bl	0 <__assert_fail>
    5430:	movw	r0, #0
    5434:	movt	r0, #0
    5438:	ldr	r1, [fp, #-8]
    543c:	ldr	r2, [fp, #-12]
    5440:	ldr	r3, [fp, #-16]
    5444:	ldr	ip, [fp, #-20]	; 0xffffffec
    5448:	str	r0, [sp, #12]
    544c:	mov	r0, r1
    5450:	ldr	r1, [sp, #12]
    5454:	str	ip, [sp]
    5458:	movw	ip, #4
    545c:	str	ip, [sp, #4]
    5460:	bl	4ca4 <read_partial_array>
    5464:	str	r0, [fp, #-4]
    5468:	ldr	r0, [fp, #-4]
    546c:	mov	sp, fp
    5470:	pop	{fp, pc}

00005474 <coda_bin_cursor_read_int64_partial_array>:
    5474:	push	{fp, lr}
    5478:	mov	fp, sp
    547c:	sub	sp, sp, #48	; 0x30
    5480:	str	r0, [fp, #-8]
    5484:	str	r1, [fp, #-12]
    5488:	str	r2, [fp, #-16]
    548c:	str	r3, [fp, #-20]	; 0xffffffec
    5490:	ldr	r0, [fp, #-8]
    5494:	add	r1, r0, #8
    5498:	ldr	r0, [r0, #4]
    549c:	sub	r0, r0, #1
    54a0:	add	r0, r1, r0, lsl #4
    54a4:	ldr	r0, [r0]
    54a8:	ldr	r0, [r0]
    54ac:	cmp	r0, #100	; 0x64
    54b0:	bcs	54d4 <coda_bin_cursor_read_int64_partial_array+0x60>
    54b4:	ldr	r0, [fp, #-8]
    54b8:	add	r1, r0, #8
    54bc:	ldr	r0, [r0, #4]
    54c0:	sub	r0, r0, #1
    54c4:	add	r0, r1, r0, lsl #4
    54c8:	ldr	r0, [r0]
    54cc:	str	r0, [sp, #20]
    54d0:	b	54f4 <coda_bin_cursor_read_int64_partial_array+0x80>
    54d4:	ldr	r0, [fp, #-8]
    54d8:	add	r1, r0, #8
    54dc:	ldr	r0, [r0, #4]
    54e0:	sub	r0, r0, #1
    54e4:	add	r0, r1, r0, lsl #4
    54e8:	ldr	r0, [r0]
    54ec:	ldr	r0, [r0, #4]
    54f0:	str	r0, [sp, #20]
    54f4:	ldr	r0, [sp, #20]
    54f8:	str	r0, [sp, #24]
    54fc:	ldr	r0, [sp, #24]
    5500:	ldr	r0, [r0, #40]	; 0x28
    5504:	ldr	r0, [r0]
    5508:	cmp	r0, #1
    550c:	bne	554c <coda_bin_cursor_read_int64_partial_array+0xd8>
    5510:	movw	r0, #0
    5514:	movt	r0, #0
    5518:	ldr	r1, [fp, #-8]
    551c:	ldr	r2, [fp, #-12]
    5520:	ldr	r3, [fp, #-16]
    5524:	ldr	ip, [fp, #-20]	; 0xffffffec
    5528:	str	r0, [sp, #16]
    552c:	mov	r0, r1
    5530:	ldr	r1, [sp, #16]
    5534:	str	ip, [sp]
    5538:	movw	ip, #8
    553c:	str	ip, [sp, #4]
    5540:	bl	4ca4 <read_partial_array>
    5544:	str	r0, [fp, #-4]
    5548:	b	55bc <coda_bin_cursor_read_int64_partial_array+0x148>
    554c:	ldr	r0, [sp, #24]
    5550:	ldr	r0, [r0, #40]	; 0x28
    5554:	ldr	r0, [r0]
    5558:	cmp	r0, #0
    555c:	bne	5564 <coda_bin_cursor_read_int64_partial_array+0xf0>
    5560:	b	5584 <coda_bin_cursor_read_int64_partial_array+0x110>
    5564:	movw	r0, #0
    5568:	movt	r0, #0
    556c:	movw	r1, #0
    5570:	movt	r1, #0
    5574:	movw	r2, #1276	; 0x4fc
    5578:	movw	r3, #0
    557c:	movt	r3, #0
    5580:	bl	0 <__assert_fail>
    5584:	movw	r0, #0
    5588:	movt	r0, #0
    558c:	ldr	r1, [fp, #-8]
    5590:	ldr	r2, [fp, #-12]
    5594:	ldr	r3, [fp, #-16]
    5598:	ldr	ip, [fp, #-20]	; 0xffffffec
    559c:	str	r0, [sp, #12]
    55a0:	mov	r0, r1
    55a4:	ldr	r1, [sp, #12]
    55a8:	str	ip, [sp]
    55ac:	movw	ip, #8
    55b0:	str	ip, [sp, #4]
    55b4:	bl	4ca4 <read_partial_array>
    55b8:	str	r0, [fp, #-4]
    55bc:	ldr	r0, [fp, #-4]
    55c0:	mov	sp, fp
    55c4:	pop	{fp, pc}

000055c8 <coda_bin_cursor_read_uint64_partial_array>:
    55c8:	push	{fp, lr}
    55cc:	mov	fp, sp
    55d0:	sub	sp, sp, #48	; 0x30
    55d4:	str	r0, [fp, #-8]
    55d8:	str	r1, [fp, #-12]
    55dc:	str	r2, [fp, #-16]
    55e0:	str	r3, [fp, #-20]	; 0xffffffec
    55e4:	ldr	r0, [fp, #-8]
    55e8:	add	r1, r0, #8
    55ec:	ldr	r0, [r0, #4]
    55f0:	sub	r0, r0, #1
    55f4:	add	r0, r1, r0, lsl #4
    55f8:	ldr	r0, [r0]
    55fc:	ldr	r0, [r0]
    5600:	cmp	r0, #100	; 0x64
    5604:	bcs	5628 <coda_bin_cursor_read_uint64_partial_array+0x60>
    5608:	ldr	r0, [fp, #-8]
    560c:	add	r1, r0, #8
    5610:	ldr	r0, [r0, #4]
    5614:	sub	r0, r0, #1
    5618:	add	r0, r1, r0, lsl #4
    561c:	ldr	r0, [r0]
    5620:	str	r0, [sp, #20]
    5624:	b	5648 <coda_bin_cursor_read_uint64_partial_array+0x80>
    5628:	ldr	r0, [fp, #-8]
    562c:	add	r1, r0, #8
    5630:	ldr	r0, [r0, #4]
    5634:	sub	r0, r0, #1
    5638:	add	r0, r1, r0, lsl #4
    563c:	ldr	r0, [r0]
    5640:	ldr	r0, [r0, #4]
    5644:	str	r0, [sp, #20]
    5648:	ldr	r0, [sp, #20]
    564c:	str	r0, [sp, #24]
    5650:	ldr	r0, [sp, #24]
    5654:	ldr	r0, [r0, #40]	; 0x28
    5658:	ldr	r0, [r0]
    565c:	cmp	r0, #1
    5660:	bne	56a0 <coda_bin_cursor_read_uint64_partial_array+0xd8>
    5664:	movw	r0, #0
    5668:	movt	r0, #0
    566c:	ldr	r1, [fp, #-8]
    5670:	ldr	r2, [fp, #-12]
    5674:	ldr	r3, [fp, #-16]
    5678:	ldr	ip, [fp, #-20]	; 0xffffffec
    567c:	str	r0, [sp, #16]
    5680:	mov	r0, r1
    5684:	ldr	r1, [sp, #16]
    5688:	str	ip, [sp]
    568c:	movw	ip, #8
    5690:	str	ip, [sp, #4]
    5694:	bl	4ca4 <read_partial_array>
    5698:	str	r0, [fp, #-4]
    569c:	b	5710 <coda_bin_cursor_read_uint64_partial_array+0x148>
    56a0:	ldr	r0, [sp, #24]
    56a4:	ldr	r0, [r0, #40]	; 0x28
    56a8:	ldr	r0, [r0]
    56ac:	cmp	r0, #0
    56b0:	bne	56b8 <coda_bin_cursor_read_uint64_partial_array+0xf0>
    56b4:	b	56d8 <coda_bin_cursor_read_uint64_partial_array+0x110>
    56b8:	movw	r0, #0
    56bc:	movt	r0, #0
    56c0:	movw	r1, #0
    56c4:	movt	r1, #0
    56c8:	movw	r2, #1290	; 0x50a
    56cc:	movw	r3, #0
    56d0:	movt	r3, #0
    56d4:	bl	0 <__assert_fail>
    56d8:	movw	r0, #0
    56dc:	movt	r0, #0
    56e0:	ldr	r1, [fp, #-8]
    56e4:	ldr	r2, [fp, #-12]
    56e8:	ldr	r3, [fp, #-16]
    56ec:	ldr	ip, [fp, #-20]	; 0xffffffec
    56f0:	str	r0, [sp, #12]
    56f4:	mov	r0, r1
    56f8:	ldr	r1, [sp, #12]
    56fc:	str	ip, [sp]
    5700:	movw	ip, #8
    5704:	str	ip, [sp, #4]
    5708:	bl	4ca4 <read_partial_array>
    570c:	str	r0, [fp, #-4]
    5710:	ldr	r0, [fp, #-4]
    5714:	mov	sp, fp
    5718:	pop	{fp, pc}

0000571c <coda_bin_cursor_read_float_partial_array>:
    571c:	push	{fp, lr}
    5720:	mov	fp, sp
    5724:	sub	sp, sp, #48	; 0x30
    5728:	str	r0, [fp, #-8]
    572c:	str	r1, [fp, #-12]
    5730:	str	r2, [fp, #-16]
    5734:	str	r3, [fp, #-20]	; 0xffffffec
    5738:	ldr	r0, [fp, #-8]
    573c:	add	r1, r0, #8
    5740:	ldr	r0, [r0, #4]
    5744:	sub	r0, r0, #1
    5748:	add	r0, r1, r0, lsl #4
    574c:	ldr	r0, [r0]
    5750:	ldr	r0, [r0]
    5754:	cmp	r0, #100	; 0x64
    5758:	bcs	577c <coda_bin_cursor_read_float_partial_array+0x60>
    575c:	ldr	r0, [fp, #-8]
    5760:	add	r1, r0, #8
    5764:	ldr	r0, [r0, #4]
    5768:	sub	r0, r0, #1
    576c:	add	r0, r1, r0, lsl #4
    5770:	ldr	r0, [r0]
    5774:	str	r0, [sp, #20]
    5778:	b	579c <coda_bin_cursor_read_float_partial_array+0x80>
    577c:	ldr	r0, [fp, #-8]
    5780:	add	r1, r0, #8
    5784:	ldr	r0, [r0, #4]
    5788:	sub	r0, r0, #1
    578c:	add	r0, r1, r0, lsl #4
    5790:	ldr	r0, [r0]
    5794:	ldr	r0, [r0, #4]
    5798:	str	r0, [sp, #20]
    579c:	ldr	r0, [sp, #20]
    57a0:	str	r0, [sp, #24]
    57a4:	ldr	r0, [sp, #24]
    57a8:	ldr	r0, [r0, #40]	; 0x28
    57ac:	ldr	r0, [r0]
    57b0:	cmp	r0, #1
    57b4:	bne	57f4 <coda_bin_cursor_read_float_partial_array+0xd8>
    57b8:	movw	r0, #0
    57bc:	movt	r0, #0
    57c0:	ldr	r1, [fp, #-8]
    57c4:	ldr	r2, [fp, #-12]
    57c8:	ldr	r3, [fp, #-16]
    57cc:	ldr	ip, [fp, #-20]	; 0xffffffec
    57d0:	str	r0, [sp, #16]
    57d4:	mov	r0, r1
    57d8:	ldr	r1, [sp, #16]
    57dc:	str	ip, [sp]
    57e0:	movw	ip, #4
    57e4:	str	ip, [sp, #4]
    57e8:	bl	4ca4 <read_partial_array>
    57ec:	str	r0, [fp, #-4]
    57f0:	b	5864 <coda_bin_cursor_read_float_partial_array+0x148>
    57f4:	ldr	r0, [sp, #24]
    57f8:	ldr	r0, [r0, #40]	; 0x28
    57fc:	ldr	r0, [r0]
    5800:	cmp	r0, #0
    5804:	bne	580c <coda_bin_cursor_read_float_partial_array+0xf0>
    5808:	b	582c <coda_bin_cursor_read_float_partial_array+0x110>
    580c:	movw	r0, #0
    5810:	movt	r0, #0
    5814:	movw	r1, #0
    5818:	movt	r1, #0
    581c:	movw	r2, #1304	; 0x518
    5820:	movw	r3, #0
    5824:	movt	r3, #0
    5828:	bl	0 <__assert_fail>
    582c:	movw	r0, #0
    5830:	movt	r0, #0
    5834:	ldr	r1, [fp, #-8]
    5838:	ldr	r2, [fp, #-12]
    583c:	ldr	r3, [fp, #-16]
    5840:	ldr	ip, [fp, #-20]	; 0xffffffec
    5844:	str	r0, [sp, #12]
    5848:	mov	r0, r1
    584c:	ldr	r1, [sp, #12]
    5850:	str	ip, [sp]
    5854:	movw	ip, #4
    5858:	str	ip, [sp, #4]
    585c:	bl	4ca4 <read_partial_array>
    5860:	str	r0, [fp, #-4]
    5864:	ldr	r0, [fp, #-4]
    5868:	mov	sp, fp
    586c:	pop	{fp, pc}

00005870 <coda_bin_cursor_read_double_partial_array>:
    5870:	push	{fp, lr}
    5874:	mov	fp, sp
    5878:	sub	sp, sp, #48	; 0x30
    587c:	str	r0, [fp, #-8]
    5880:	str	r1, [fp, #-12]
    5884:	str	r2, [fp, #-16]
    5888:	str	r3, [fp, #-20]	; 0xffffffec
    588c:	ldr	r0, [fp, #-8]
    5890:	add	r1, r0, #8
    5894:	ldr	r0, [r0, #4]
    5898:	sub	r0, r0, #1
    589c:	add	r0, r1, r0, lsl #4
    58a0:	ldr	r0, [r0]
    58a4:	ldr	r0, [r0]
    58a8:	cmp	r0, #100	; 0x64
    58ac:	bcs	58d0 <coda_bin_cursor_read_double_partial_array+0x60>
    58b0:	ldr	r0, [fp, #-8]
    58b4:	add	r1, r0, #8
    58b8:	ldr	r0, [r0, #4]
    58bc:	sub	r0, r0, #1
    58c0:	add	r0, r1, r0, lsl #4
    58c4:	ldr	r0, [r0]
    58c8:	str	r0, [sp, #20]
    58cc:	b	58f0 <coda_bin_cursor_read_double_partial_array+0x80>
    58d0:	ldr	r0, [fp, #-8]
    58d4:	add	r1, r0, #8
    58d8:	ldr	r0, [r0, #4]
    58dc:	sub	r0, r0, #1
    58e0:	add	r0, r1, r0, lsl #4
    58e4:	ldr	r0, [r0]
    58e8:	ldr	r0, [r0, #4]
    58ec:	str	r0, [sp, #20]
    58f0:	ldr	r0, [sp, #20]
    58f4:	str	r0, [sp, #24]
    58f8:	ldr	r0, [sp, #24]
    58fc:	ldr	r0, [r0, #40]	; 0x28
    5900:	ldr	r0, [r0]
    5904:	cmp	r0, #1
    5908:	bne	5948 <coda_bin_cursor_read_double_partial_array+0xd8>
    590c:	movw	r0, #0
    5910:	movt	r0, #0
    5914:	ldr	r1, [fp, #-8]
    5918:	ldr	r2, [fp, #-12]
    591c:	ldr	r3, [fp, #-16]
    5920:	ldr	ip, [fp, #-20]	; 0xffffffec
    5924:	str	r0, [sp, #16]
    5928:	mov	r0, r1
    592c:	ldr	r1, [sp, #16]
    5930:	str	ip, [sp]
    5934:	movw	ip, #8
    5938:	str	ip, [sp, #4]
    593c:	bl	4ca4 <read_partial_array>
    5940:	str	r0, [fp, #-4]
    5944:	b	59b8 <coda_bin_cursor_read_double_partial_array+0x148>
    5948:	ldr	r0, [sp, #24]
    594c:	ldr	r0, [r0, #40]	; 0x28
    5950:	ldr	r0, [r0]
    5954:	cmp	r0, #0
    5958:	bne	5960 <coda_bin_cursor_read_double_partial_array+0xf0>
    595c:	b	5980 <coda_bin_cursor_read_double_partial_array+0x110>
    5960:	movw	r0, #0
    5964:	movt	r0, #0
    5968:	movw	r1, #0
    596c:	movt	r1, #0
    5970:	movw	r2, #1318	; 0x526
    5974:	movw	r3, #0
    5978:	movt	r3, #0
    597c:	bl	0 <__assert_fail>
    5980:	movw	r0, #0
    5984:	movt	r0, #0
    5988:	ldr	r1, [fp, #-8]
    598c:	ldr	r2, [fp, #-12]
    5990:	ldr	r3, [fp, #-16]
    5994:	ldr	ip, [fp, #-20]	; 0xffffffec
    5998:	str	r0, [sp, #12]
    599c:	mov	r0, r1
    59a0:	ldr	r1, [sp, #12]
    59a4:	str	ip, [sp]
    59a8:	movw	ip, #8
    59ac:	str	ip, [sp, #4]
    59b0:	bl	4ca4 <read_partial_array>
    59b4:	str	r0, [fp, #-4]
    59b8:	ldr	r0, [fp, #-4]
    59bc:	mov	sp, fp
    59c0:	pop	{fp, pc}

000059c4 <coda_bin_cursor_read_char_partial_array>:
    59c4:	push	{fp, lr}
    59c8:	mov	fp, sp
    59cc:	sub	sp, sp, #48	; 0x30
    59d0:	str	r0, [fp, #-8]
    59d4:	str	r1, [fp, #-12]
    59d8:	str	r2, [fp, #-16]
    59dc:	str	r3, [fp, #-20]	; 0xffffffec
    59e0:	ldr	r0, [fp, #-8]
    59e4:	add	r1, r0, #8
    59e8:	ldr	r0, [r0, #4]
    59ec:	sub	r0, r0, #1
    59f0:	add	r0, r1, r0, lsl #4
    59f4:	ldr	r0, [r0]
    59f8:	ldr	r0, [r0]
    59fc:	cmp	r0, #100	; 0x64
    5a00:	bcs	5a24 <coda_bin_cursor_read_char_partial_array+0x60>
    5a04:	ldr	r0, [fp, #-8]
    5a08:	add	r1, r0, #8
    5a0c:	ldr	r0, [r0, #4]
    5a10:	sub	r0, r0, #1
    5a14:	add	r0, r1, r0, lsl #4
    5a18:	ldr	r0, [r0]
    5a1c:	str	r0, [sp, #20]
    5a20:	b	5a44 <coda_bin_cursor_read_char_partial_array+0x80>
    5a24:	ldr	r0, [fp, #-8]
    5a28:	add	r1, r0, #8
    5a2c:	ldr	r0, [r0, #4]
    5a30:	sub	r0, r0, #1
    5a34:	add	r0, r1, r0, lsl #4
    5a38:	ldr	r0, [r0]
    5a3c:	ldr	r0, [r0, #4]
    5a40:	str	r0, [sp, #20]
    5a44:	ldr	r0, [sp, #20]
    5a48:	str	r0, [sp, #24]
    5a4c:	ldr	r0, [sp, #24]
    5a50:	ldr	r0, [r0, #40]	; 0x28
    5a54:	ldr	r0, [r0]
    5a58:	cmp	r0, #1
    5a5c:	bne	5a9c <coda_bin_cursor_read_char_partial_array+0xd8>
    5a60:	ldr	r0, [fp, #-8]
    5a64:	ldr	r2, [fp, #-12]
    5a68:	ldr	r3, [fp, #-16]
    5a6c:	ldr	r1, [fp, #-20]	; 0xffffffec
    5a70:	movw	ip, #0
    5a74:	movt	ip, #0
    5a78:	str	r1, [sp, #16]
    5a7c:	mov	r1, ip
    5a80:	ldr	ip, [sp, #16]
    5a84:	str	ip, [sp]
    5a88:	movw	lr, #1
    5a8c:	str	lr, [sp, #4]
    5a90:	bl	4ca4 <read_partial_array>
    5a94:	str	r0, [fp, #-4]
    5a98:	b	5b0c <coda_bin_cursor_read_char_partial_array+0x148>
    5a9c:	ldr	r0, [sp, #24]
    5aa0:	ldr	r0, [r0, #40]	; 0x28
    5aa4:	ldr	r0, [r0]
    5aa8:	cmp	r0, #0
    5aac:	bne	5ab4 <coda_bin_cursor_read_char_partial_array+0xf0>
    5ab0:	b	5ad4 <coda_bin_cursor_read_char_partial_array+0x110>
    5ab4:	movw	r0, #0
    5ab8:	movt	r0, #0
    5abc:	movw	r1, #0
    5ac0:	movt	r1, #0
    5ac4:	movw	r2, #1332	; 0x534
    5ac8:	movw	r3, #0
    5acc:	movt	r3, #0
    5ad0:	bl	0 <__assert_fail>
    5ad4:	ldr	r0, [fp, #-8]
    5ad8:	ldr	r2, [fp, #-12]
    5adc:	ldr	r3, [fp, #-16]
    5ae0:	ldr	r1, [fp, #-20]	; 0xffffffec
    5ae4:	movw	ip, #0
    5ae8:	movt	ip, #0
    5aec:	str	r1, [sp, #12]
    5af0:	mov	r1, ip
    5af4:	ldr	ip, [sp, #12]
    5af8:	str	ip, [sp]
    5afc:	movw	lr, #1
    5b00:	str	lr, [sp, #4]
    5b04:	bl	4ca4 <read_partial_array>
    5b08:	str	r0, [fp, #-4]
    5b0c:	ldr	r0, [fp, #-4]
    5b10:	mov	sp, fp
    5b14:	pop	{fp, pc}
