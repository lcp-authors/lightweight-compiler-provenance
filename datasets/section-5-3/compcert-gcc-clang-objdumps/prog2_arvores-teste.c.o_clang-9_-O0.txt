
../compcert-repos/prog2/CMakeFiles/7.1.dir/Aula07_Arvores/arvores-teste.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #216	; 0xd8
   c:	movw	r0, #0
  10:	str	r0, [fp, #-4]
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	bl	0 <printf>
  20:	movw	r1, #0
  24:	movt	r1, #0
  28:	movw	r2, #0
  2c:	movt	r2, #0
  30:	sub	r3, fp, #44	; 0x2c
  34:	str	r0, [sp, #48]	; 0x30
  38:	mov	r0, r3
  3c:	str	r1, [sp, #44]	; 0x2c
  40:	mov	r1, r2
  44:	movw	r2, #40	; 0x28
  48:	bl	0 <memcpy>
  4c:	ldr	r0, [sp, #44]	; 0x2c
  50:	blx	r0
  54:	str	r0, [sp, #64]	; 0x40
  58:	movw	r0, #0
  5c:	str	r0, [sp, #68]	; 0x44
  60:	ldr	r0, [sp, #68]	; 0x44
  64:	cmp	r0, #10
  68:	bge	94 <main+0x94>
  6c:	ldr	r0, [sp, #64]	; 0x40
  70:	ldr	r1, [sp, #68]	; 0x44
  74:	sub	r2, fp, #44	; 0x2c
  78:	add	r1, r2, r1, lsl #2
  7c:	ldr	r1, [r1]
  80:	bl	0 <bst_insere>
  84:	ldr	r0, [sp, #68]	; 0x44
  88:	add	r0, r0, #1
  8c:	str	r0, [sp, #68]	; 0x44
  90:	b	60 <main+0x60>
  94:	ldr	r0, [sp, #64]	; 0x40
  98:	ldr	r0, [r0]
  9c:	bl	0 <bst_altura>
  a0:	movw	r1, #0
  a4:	movt	r1, #0
  a8:	str	r0, [sp, #40]	; 0x28
  ac:	mov	r0, r1
  b0:	ldr	r1, [sp, #40]	; 0x28
  b4:	bl	0 <printf>
  b8:	ldr	r1, [sp, #64]	; 0x40
  bc:	str	r0, [sp, #36]	; 0x24
  c0:	mov	r0, r1
  c4:	bl	0 <bst_imprime>
  c8:	movw	r0, #0
  cc:	movt	r0, #0
  d0:	bl	0 <printf>
  d4:	movw	r1, #0
  d8:	movt	r1, #0
  dc:	str	r0, [sp, #32]
  e0:	blx	r1
  e4:	str	r0, [sp, #60]	; 0x3c
  e8:	movw	r0, #0
  ec:	movt	r0, #0
  f0:	movw	r1, #0
  f4:	movt	r1, #0
  f8:	bl	0 <fopen>
  fc:	str	r0, [sp, #56]	; 0x38
 100:	add	r0, sp, #72	; 0x48
 104:	ldr	r2, [sp, #56]	; 0x38
 108:	movw	r1, #100	; 0x64
 10c:	bl	0 <fgets>
 110:	movw	r1, #0
 114:	cmp	r0, r1
 118:	beq	1b8 <main+0x1b8>
 11c:	add	r0, sp, #72	; 0x48
 120:	str	r0, [sp, #28]
 124:	movw	r1, #0
 128:	movt	r1, #0
 12c:	bl	0 <strtok>
 130:	add	r1, sp, #72	; 0x48
 134:	ldr	r2, [sp, #28]
 138:	str	r0, [sp, #24]
 13c:	mov	r0, r2
 140:	ldr	r3, [sp, #24]
 144:	str	r1, [sp, #20]
 148:	mov	r1, r3
 14c:	bl	0 <strcpy>
 150:	movw	r1, #0
 154:	str	r0, [sp, #16]
 158:	mov	r0, r1
 15c:	movw	r1, #0
 160:	movt	r1, #0
 164:	bl	0 <strtok>
 168:	add	r1, sp, #72	; 0x48
 16c:	ldr	r2, [sp, #20]
 170:	str	r0, [sp, #12]
 174:	mov	r0, r2
 178:	ldr	r3, [sp, #12]
 17c:	str	r1, [sp, #8]
 180:	mov	r1, r3
 184:	bl	0 <strcpy>
 188:	ldr	r1, [sp, #8]
 18c:	str	r0, [sp, #4]
 190:	mov	r0, r1
 194:	bl	0 <strlen>
 198:	sub	r0, r0, #1
 19c:	ldr	r1, [sp, #8]
 1a0:	add	r0, r1, r0
 1a4:	movw	r2, #0
 1a8:	strb	r2, [r0]
 1ac:	ldr	r0, [sp, #60]	; 0x3c
 1b0:	bl	0 <avl_insere>
 1b4:	b	100 <main+0x100>
 1b8:	ldr	r0, [sp, #56]	; 0x38
 1bc:	bl	0 <fclose>
 1c0:	ldr	r1, [sp, #60]	; 0x3c
 1c4:	str	r0, [sp]
 1c8:	mov	r0, r1
 1cc:	movw	r1, #0
 1d0:	movt	r1, #0
 1d4:	bl	0 <avl_pesquisa>
 1d8:	str	r0, [sp, #52]	; 0x34
 1dc:	ldr	r0, [sp, #52]	; 0x34
 1e0:	movw	r1, #0
 1e4:	cmp	r0, r1
 1e8:	beq	208 <main+0x208>
 1ec:	ldr	r0, [sp, #52]	; 0x34
 1f0:	ldr	r1, [r0]
 1f4:	ldr	r0, [sp, #52]	; 0x34
 1f8:	ldr	r2, [r0, #16]
 1fc:	movw	r0, #0
 200:	movt	r0, #0
 204:	bl	0 <printf>
 208:	ldr	r0, [sp, #60]	; 0x3c
 20c:	movw	r1, #0
 210:	movt	r1, #0
 214:	bl	0 <avl_pesquisa>
 218:	str	r0, [sp, #52]	; 0x34
 21c:	ldr	r0, [sp, #52]	; 0x34
 220:	movw	r1, #0
 224:	cmp	r0, r1
 228:	beq	248 <main+0x248>
 22c:	ldr	r0, [sp, #52]	; 0x34
 230:	ldr	r1, [r0]
 234:	ldr	r0, [sp, #52]	; 0x34
 238:	ldr	r2, [r0, #16]
 23c:	movw	r0, #0
 240:	movt	r0, #0
 244:	bl	0 <printf>
 248:	ldr	r0, [sp, #60]	; 0x3c
 24c:	movw	r1, #0
 250:	movt	r1, #0
 254:	bl	0 <avl_pesquisa>
 258:	str	r0, [sp, #52]	; 0x34
 25c:	ldr	r0, [sp, #52]	; 0x34
 260:	movw	r1, #0
 264:	cmp	r0, r1
 268:	beq	288 <main+0x288>
 26c:	ldr	r0, [sp, #52]	; 0x34
 270:	ldr	r1, [r0]
 274:	ldr	r0, [sp, #52]	; 0x34
 278:	ldr	r2, [r0, #16]
 27c:	movw	r0, #0
 280:	movt	r0, #0
 284:	bl	0 <printf>
 288:	movw	r0, #0
 28c:	mov	sp, fp
 290:	pop	{fp, pc}
