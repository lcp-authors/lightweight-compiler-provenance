
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dbg_emitter>:
   0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4:	add	fp, sp, #24
   8:	mov	r4, r3
   c:	ldr	r3, [fp, #8]
  10:	movw	r0, #0
  14:	mov	r6, r1
  18:	mov	r5, r2
  1c:	mov	r1, r2
  20:	movt	r0, #0
  24:	mov	r2, r4
  28:	bl	0 <printf>
  2c:	cmp	r5, #1
  30:	blt	ac <dbg_emitter+0xac>
  34:	movw	r7, #0
  38:	movw	r8, #0
  3c:	movw	r9, #0
  40:	add	r6, r6, #4
  44:	movt	r7, #0
  48:	movt	r8, #0
  4c:	movt	r9, #0
  50:	b	64 <dbg_emitter+0x64>
  54:	ldr	r0, [r6], #8
  58:	subs	r5, r5, #1
  5c:	add	r4, r0, r4
  60:	beq	ac <dbg_emitter+0xac>
  64:	ldr	r0, [r6, #-4]
  68:	cmp	r0, r7
  6c:	beq	7c <dbg_emitter+0x7c>
  70:	cmp	r0, #0
  74:	bne	54 <dbg_emitter+0x54>
  78:	b	98 <dbg_emitter+0x98>
  7c:	ldr	r2, [r6]
  80:	mov	r0, r8
  84:	mov	r1, r4
  88:	bl	0 <printf>
  8c:	ldr	r0, [r6, #-4]
  90:	cmp	r0, #0
  94:	bne	54 <dbg_emitter+0x54>
  98:	ldr	r2, [r6]
  9c:	mov	r0, r9
  a0:	mov	r1, r4
  a4:	bl	0 <printf>
  a8:	b	54 <dbg_emitter+0x54>
  ac:	mov	r0, #0
  b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000000b4 <debug_test>:
  b4:	push	{r4, r5, r6, r7, fp, lr}
  b8:	add	fp, sp, #16
  bc:	sub	sp, sp, #280	; 0x118
  c0:	vmov.i32	q8, #0	; 0x00000000
  c4:	add	r4, sp, #8
  c8:	mov	r5, #0
  cc:	add	r0, r4, #16
  d0:	mov	r1, r4
  d4:	str	r5, [sp, #40]	; 0x28
  d8:	vst1.64	{d16-d17}, [r0]
  dc:	mov	r0, #36	; 0x24
  e0:	vst1.64	{d16-d17}, [r1], r0
  e4:	movw	r0, #0
  e8:	movt	r0, #0
  ec:	str	r5, [r1]
  f0:	bl	0 <puts>
  f4:	movw	r1, #0
  f8:	str	r5, [sp]
  fc:	add	r5, sp, #48	; 0x30
 100:	mov	r2, #0
 104:	mov	r3, #0
 108:	movt	r1, #0
 10c:	mov	r0, r5
 110:	bl	0 <flatcc_builder_custom_init>
 114:	mvn	r0, #-1073741824	; 0xc0000000
 118:	mov	r1, #4
 11c:	mov	r2, #10
 120:	mov	r3, #4
 124:	str	r1, [sp]
 128:	str	r0, [sp, #4]
 12c:	mov	r0, r5
 130:	mov	r1, r4
 134:	bl	0 <flatcc_builder_create_vector>
 138:	mov	r1, r0
 13c:	mov	r0, r5
 140:	bl	158 <main_create_as_root>
 144:	mov	r0, r5
 148:	bl	0 <flatcc_builder_clear>
 14c:	mov	r0, #0
 150:	sub	sp, fp, #16
 154:	pop	{r4, r5, r6, r7, fp, pc}

00000158 <main_create_as_root>:
 158:	push	{r4, r5, r6, r7, fp, lr}
 15c:	add	fp, sp, #16
 160:	mov	r5, r1
 164:	mov	r1, #0
 168:	mov	r2, #0
 16c:	mov	r3, #0
 170:	mov	r4, r0
 174:	mov	r7, #0
 178:	bl	0 <flatcc_builder_start_buffer>
 17c:	cmp	r0, #0
 180:	popne	{r4, r5, r6, r7, fp, pc}
 184:	mov	r0, r4
 188:	mov	r1, #3
 18c:	bl	0 <flatcc_builder_start_table>
 190:	cmp	r0, #0
 194:	bne	1c8 <main_create_as_root+0x70>
 198:	mov	r0, r4
 19c:	mov	r1, #0
 1a0:	mov	r2, #8
 1a4:	mov	r3, #8
 1a8:	mov	r7, #0
 1ac:	bl	0 <flatcc_builder_table_add>
 1b0:	cmp	r0, #0
 1b4:	movne	r7, #0
 1b8:	movne	r6, #42	; 0x2a
 1bc:	strdne	r6, [r0]
 1c0:	cmpne	r5, #0
 1c4:	bne	1d8 <main_create_as_root+0x80>
 1c8:	mov	r0, r4
 1cc:	mov	r1, r7
 1d0:	pop	{r4, r5, r6, r7, fp, lr}
 1d4:	b	0 <flatcc_builder_end_buffer>
 1d8:	mov	r0, r4
 1dc:	mov	r1, #2
 1e0:	bl	0 <flatcc_builder_table_add_offset>
 1e4:	cmp	r0, #0
 1e8:	beq	1c8 <main_create_as_root+0x70>
 1ec:	str	r5, [r0]
 1f0:	mov	r0, r4
 1f4:	mov	r1, #1
 1f8:	mov	r2, #1
 1fc:	mov	r3, #1
 200:	mov	r5, #1
 204:	bl	0 <flatcc_builder_table_add>
 208:	cmp	r0, #0
 20c:	beq	1c8 <main_create_as_root+0x70>
 210:	movw	r1, #0
 214:	strb	r5, [r0]
 218:	mov	r0, r4
 21c:	mov	r2, #0
 220:	movt	r1, #0
 224:	bl	0 <flatcc_builder_check_required>
 228:	cmp	r0, #0
 22c:	beq	240 <main_create_as_root+0xe8>
 230:	mov	r0, r4
 234:	bl	0 <flatcc_builder_end_table>
 238:	mov	r7, r0
 23c:	b	1c8 <main_create_as_root+0x70>
 240:	movw	r0, #0
 244:	movw	r1, #0
 248:	movw	r3, #0
 24c:	mov	r2, #21
 250:	movt	r0, #0
 254:	movt	r1, #0
 258:	movt	r3, #0
 25c:	bl	0 <__assert_fail>

00000260 <emit_test>:
 260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 264:	add	fp, sp, #28
 268:	sub	sp, sp, #284	; 0x11c
 26c:	movw	r0, #0
 270:	add	r6, sp, #28
 274:	add	r4, sp, #8
 278:	movt	r0, #0
 27c:	vld1.64	{d16-d17}, [r0]
 280:	mov	r0, r6
 284:	vst1.64	{d16-d17}, [r4]
 288:	bl	0 <flatcc_builder_init>
 28c:	mov	r0, r6
 290:	bl	0 <flatcc_builder_get_emit_context>
 294:	mov	r5, r0
 298:	mvn	r0, #-1073741824	; 0xc0000000
 29c:	mov	r1, #4
 2a0:	mov	r2, #4
 2a4:	mov	r3, #4
 2a8:	str	r1, [sp]
 2ac:	str	r0, [sp, #4]
 2b0:	mov	r0, r6
 2b4:	mov	r1, r4
 2b8:	bl	0 <flatcc_builder_create_vector>
 2bc:	mov	r1, r0
 2c0:	mov	r0, r6
 2c4:	bl	158 <main_create_as_root>
 2c8:	ldm	r5, {r1, r2}
 2cc:	mvn	r0, #0
 2d0:	cmp	r1, r2
 2d4:	bne	4fc <emit_test+0x29c>
 2d8:	ldr	r4, [r5, #8]
 2dc:	cmp	r4, #0
 2e0:	beq	4fc <emit_test+0x29c>
 2e4:	ldr	r5, [r5, #24]
 2e8:	add	r0, sp, #28
 2ec:	bl	0 <flatcc_builder_get_buffer_size>
 2f0:	cmp	r5, r0
 2f4:	bne	540 <emit_test+0x2e0>
 2f8:	movw	r6, #0
 2fc:	movw	r1, #0
 300:	mov	r2, r5
 304:	movt	r6, #0
 308:	movt	r1, #0
 30c:	ldr	r0, [r6]
 310:	bl	0 <fprintf>
 314:	ldr	r6, [r6]
 318:	movw	r1, #0
 31c:	movw	r2, #0
 320:	movt	r1, #0
 324:	movt	r2, #0
 328:	mov	r0, r6
 32c:	bl	0 <fprintf>
 330:	cmp	r5, #0
 334:	beq	420 <emit_test+0x1c0>
 338:	movw	sl, #0
 33c:	sub	r7, fp, #49	; 0x31
 340:	mov	r8, #0
 344:	movt	sl, #0
 348:	ands	r9, r8, #15
 34c:	beq	3b0 <emit_test+0x150>
 350:	b	3d0 <emit_test+0x170>
 354:	movw	r1, #0
 358:	mov	r0, r6
 35c:	mov	r2, r8
 360:	movt	r1, #0
 364:	bl	0 <fprintf>
 368:	ldrb	r2, [r4, r8]
 36c:	mov	r0, r6
 370:	mov	r1, sl
 374:	bl	0 <fprintf>
 378:	ldrb	r0, [r4, r8]
 37c:	add	r8, r8, #1
 380:	sub	r1, r0, #32
 384:	uxtb	r1, r1
 388:	cmp	r1, #94	; 0x5e
 38c:	mov	r1, #0
 390:	movwhi	r0, #46	; 0x2e
 394:	cmp	r5, r8
 398:	strb	r0, [r7, r9]
 39c:	add	r0, r7, r9
 3a0:	strb	r1, [r0, #1]
 3a4:	beq	3e8 <emit_test+0x188>
 3a8:	ands	r9, r8, #15
 3ac:	bne	3d0 <emit_test+0x170>
 3b0:	cmp	r8, #0
 3b4:	beq	354 <emit_test+0xf4>
 3b8:	movw	r1, #0
 3bc:	mov	r0, r6
 3c0:	mov	r2, r7
 3c4:	movt	r1, #0
 3c8:	bl	0 <fprintf>
 3cc:	b	354 <emit_test+0xf4>
 3d0:	tst	r8, #7
 3d4:	bne	368 <emit_test+0x108>
 3d8:	mov	r0, #32
 3dc:	mov	r1, r6
 3e0:	bl	0 <fputc>
 3e4:	b	368 <emit_test+0x108>
 3e8:	tst	r5, #15
 3ec:	beq	420 <emit_test+0x1c0>
 3f0:	movw	r8, #0
 3f4:	add	r7, r5, #1
 3f8:	movt	r8, #0
 3fc:	mov	r0, r8
 400:	mov	r1, #3
 404:	mov	r2, #1
 408:	mov	r3, r6
 40c:	bl	0 <fwrite>
 410:	add	r0, r7, #1
 414:	tst	r7, #15
 418:	mov	r7, r0
 41c:	bne	3fc <emit_test+0x19c>
 420:	movw	r1, #0
 424:	sub	r2, fp, #49	; 0x31
 428:	mov	r0, r6
 42c:	movt	r1, #0
 430:	bl	0 <fprintf>
 434:	cmp	r5, #58	; 0x3a
 438:	bne	554 <emit_test+0x2f4>
 43c:	movw	r1, #0
 440:	mov	r0, r4
 444:	mov	r2, #58	; 0x3a
 448:	movt	r1, #0
 44c:	bl	0 <bcmp>
 450:	cmp	r0, #0
 454:	bne	568 <emit_test+0x308>
 458:	ldr	r0, [r4]
 45c:	ldr	r1, [r4, r0]!
 460:	mov	r0, r4
 464:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 468:	cmp	r1, #6
 46c:	bcc	504 <emit_test+0x2a4>
 470:	ldrh	r2, [r0, #4]
 474:	cmp	r2, #0
 478:	beq	504 <emit_test+0x2a4>
 47c:	mov	r3, r4
 480:	ldr	r2, [r3, r2]!
 484:	ldr	r3, [r3, #4]
 488:	eor	r2, r2, #42	; 0x2a
 48c:	orrs	r2, r2, r3
 490:	bne	504 <emit_test+0x2a4>
 494:	cmp	r1, #8
 498:	bcc	518 <emit_test+0x2b8>
 49c:	ldrh	r2, [r0, #6]
 4a0:	cmp	r2, #0
 4a4:	beq	518 <emit_test+0x2b8>
 4a8:	ldrb	r2, [r4, r2]
 4ac:	cmp	r2, #1
 4b0:	bne	518 <emit_test+0x2b8>
 4b4:	cmp	r1, #10
 4b8:	bcc	52c <emit_test+0x2cc>
 4bc:	ldrh	r0, [r0, #8]
 4c0:	cmp	r0, #0
 4c4:	beq	52c <emit_test+0x2cc>
 4c8:	ldr	r0, [r4, r0]!
 4cc:	ldr	r0, [r4, r0]!
 4d0:	cmp	r0, #4
 4d4:	bne	52c <emit_test+0x2cc>
 4d8:	add	r0, r4, #4
 4dc:	vldr	s0, [pc, #184]	; 59c <emit_test+0x33c>
 4e0:	vldr	s2, [r0, #8]
 4e4:	vcmp.f32	s2, s0
 4e8:	vmrs	APSR_nzcv, fpscr
 4ec:	bne	57c <emit_test+0x31c>
 4f0:	add	r0, sp, #28
 4f4:	bl	0 <flatcc_builder_clear>
 4f8:	mov	r0, #0
 4fc:	sub	sp, fp, #28
 500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 504:	movw	r0, #0
 508:	movw	r1, #0
 50c:	movw	r3, #0
 510:	mov	r2, #112	; 0x70
 514:	b	58c <emit_test+0x32c>
 518:	movw	r0, #0
 51c:	movw	r1, #0
 520:	movw	r3, #0
 524:	mov	r2, #113	; 0x71
 528:	b	58c <emit_test+0x32c>
 52c:	movw	r0, #0
 530:	movw	r1, #0
 534:	movw	r3, #0
 538:	mov	r2, #114	; 0x72
 53c:	b	58c <emit_test+0x32c>
 540:	movw	r0, #0
 544:	movw	r1, #0
 548:	movw	r3, #0
 54c:	mov	r2, #101	; 0x65
 550:	b	58c <emit_test+0x32c>
 554:	movw	r0, #0
 558:	movw	r1, #0
 55c:	movw	r3, #0
 560:	mov	r2, #106	; 0x6a
 564:	b	58c <emit_test+0x32c>
 568:	movw	r0, #0
 56c:	movw	r1, #0
 570:	movw	r3, #0
 574:	mov	r2, #108	; 0x6c
 578:	b	58c <emit_test+0x32c>
 57c:	movw	r0, #0
 580:	movw	r1, #0
 584:	movw	r3, #0
 588:	mov	r2, #115	; 0x73
 58c:	movt	r0, #0
 590:	movt	r1, #0
 594:	movt	r3, #0
 598:	bl	0 <__assert_fail>
 59c:	.word	0x3f99999a

000005a0 <main>:
 5a0:	push	{r4, r5, r6, r7, fp, lr}
 5a4:	add	fp, sp, #16
 5a8:	sub	sp, sp, #280	; 0x118
 5ac:	vmov.i32	q8, #0	; 0x00000000
 5b0:	add	r4, sp, #8
 5b4:	mov	r5, #0
 5b8:	add	r0, r4, #16
 5bc:	mov	r1, r4
 5c0:	str	r5, [sp, #40]	; 0x28
 5c4:	vst1.64	{d16-d17}, [r0]
 5c8:	mov	r0, #36	; 0x24
 5cc:	vst1.64	{d16-d17}, [r1], r0
 5d0:	movw	r0, #0
 5d4:	movt	r0, #0
 5d8:	str	r5, [r1]
 5dc:	bl	0 <puts>
 5e0:	movw	r1, #0
 5e4:	str	r5, [sp]
 5e8:	add	r5, sp, #48	; 0x30
 5ec:	mov	r2, #0
 5f0:	mov	r3, #0
 5f4:	movt	r1, #0
 5f8:	mov	r0, r5
 5fc:	bl	0 <flatcc_builder_custom_init>
 600:	mvn	r0, #-1073741824	; 0xc0000000
 604:	mov	r1, #4
 608:	mov	r2, #10
 60c:	mov	r3, #4
 610:	str	r1, [sp]
 614:	str	r0, [sp, #4]
 618:	mov	r0, r5
 61c:	mov	r1, r4
 620:	bl	0 <flatcc_builder_create_vector>
 624:	mov	r1, r0
 628:	mov	r0, r5
 62c:	bl	158 <main_create_as_root>
 630:	mov	r0, r5
 634:	bl	0 <flatcc_builder_clear>
 638:	bl	260 <emit_test>
 63c:	sub	sp, fp, #16
 640:	pop	{r4, r5, r6, r7, fp, pc}
