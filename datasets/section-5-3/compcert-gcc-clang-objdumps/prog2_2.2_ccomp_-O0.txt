
../repos/prog2/2.2:     file format elf32-littlearm


Disassembly of section .init:

0001043c <.init>:
   1043c:	push	{r3, lr}
   10440:	bl	1051c <abort@plt+0x3c>
   10444:	pop	{r3, pc}

Disassembly of section .plt:

00010448 <printf@plt-0x14>:
   10448:	push	{lr}		; (str lr, [sp, #-4]!)
   1044c:	ldr	lr, [pc, #4]	; 10458 <printf@plt-0x4>
   10450:	add	lr, pc, lr
   10454:	ldr	pc, [lr, #8]!
   10458:	andeq	r0, r1, r8, lsr #23

0001045c <printf@plt>:
   1045c:	add	ip, pc, #0, 12
   10460:	add	ip, ip, #16, 20	; 0x10000
   10464:	ldr	pc, [ip, #2984]!	; 0xba8

00010468 <free@plt>:
   10468:	add	ip, pc, #0, 12
   1046c:	add	ip, ip, #16, 20	; 0x10000
   10470:	ldr	pc, [ip, #2976]!	; 0xba0

00010474 <fgets@plt>:
   10474:	add	ip, pc, #0, 12
   10478:	add	ip, ip, #16, 20	; 0x10000
   1047c:	ldr	pc, [ip, #2968]!	; 0xb98

00010480 <getchar@plt>:
   10480:	add	ip, pc, #0, 12
   10484:	add	ip, ip, #16, 20	; 0x10000
   10488:	ldr	pc, [ip, #2960]!	; 0xb90

0001048c <realloc@plt>:
   1048c:	add	ip, pc, #0, 12
   10490:	add	ip, ip, #16, 20	; 0x10000
   10494:	ldr	pc, [ip, #2952]!	; 0xb88

00010498 <strcpy@plt>:
   10498:	add	ip, pc, #0, 12
   1049c:	add	ip, ip, #16, 20	; 0x10000
   104a0:	ldr	pc, [ip, #2944]!	; 0xb80

000104a4 <malloc@plt>:
   104a4:	add	ip, pc, #0, 12
   104a8:	add	ip, ip, #16, 20	; 0x10000
   104ac:	ldr	pc, [ip, #2936]!	; 0xb78

000104b0 <__libc_start_main@plt>:
   104b0:	add	ip, pc, #0, 12
   104b4:	add	ip, ip, #16, 20	; 0x10000
   104b8:	ldr	pc, [ip, #2928]!	; 0xb70

000104bc <scanf@plt>:
   104bc:	add	ip, pc, #0, 12
   104c0:	add	ip, ip, #16, 20	; 0x10000
   104c4:	ldr	pc, [ip, #2920]!	; 0xb68

000104c8 <__gmon_start__@plt>:
   104c8:	add	ip, pc, #0, 12
   104cc:	add	ip, ip, #16, 20	; 0x10000
   104d0:	ldr	pc, [ip, #2912]!	; 0xb60

000104d4 <strlen@plt>:
   104d4:	add	ip, pc, #0, 12
   104d8:	add	ip, ip, #16, 20	; 0x10000
   104dc:	ldr	pc, [ip, #2904]!	; 0xb58

000104e0 <abort@plt>:
   104e0:	add	ip, pc, #0, 12
   104e4:	add	ip, ip, #16, 20	; 0x10000
   104e8:	ldr	pc, [ip, #2896]!	; 0xb50

Disassembly of section .text:

000104ec <.text>:
   104ec:	bleq	4c630 <stdin@@GLIBC_2.4+0x2b5e8>
   104f0:	cdpeq	0, 0, cr15, cr0, cr15, {2}
   104f4:	strbtmi	fp, [sl], -r2, lsl #24
   104f8:	strlt	fp, [r1], #-1028	; 0xfffffbfc
   104fc:			; <UNDEFINED> instruction: 0xc010f8df
   10500:	stcgt	8, cr15, [r4, #-308]	; 0xfffffecc
   10504:	blmi	122518 <stdin@@GLIBC_2.4+0x1014d0>
   10508:	svc	0x00d2f7ff
   1050c:	svc	0x00e8f7ff
   10510:			; <UNDEFINED> instruction: 0x000107b1
   10514:	andeq	r0, r1, ip, lsr #11
   10518:	andeq	r0, r1, r1, ror r7
   1051c:	ldr	r3, [pc, #20]	; 10538 <abort@plt+0x58>
   10520:	ldr	r2, [pc, #20]	; 1053c <abort@plt+0x5c>
   10524:	add	r3, pc, r3
   10528:	ldr	r2, [r3, r2]
   1052c:	cmp	r2, #0
   10530:	bxeq	lr
   10534:	b	104c8 <__gmon_start__@plt>
   10538:	ldrdeq	r0, [r1], -r4
   1053c:	andeq	r0, r0, ip, lsr r0
   10540:	subeq	pc, r8, r1, asr #4
   10544:	andeq	pc, r2, r0, asr #5
   10548:	movteq	pc, #33345	; 0x8241	; <UNPREDICTABLE>
   1054c:	movweq	pc, #8896	; 0x22c0	; <UNPREDICTABLE>
   10550:	andle	r4, r5, r3, lsl #5
   10554:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10558:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   1055c:	ldrmi	fp, [r8, -r3, lsl #2]
   10560:	svclt	0x00004770
   10564:	subeq	pc, r8, r1, asr #4
   10568:	andeq	pc, r2, r0, asr #5
   1056c:	cmpeq	r8, r1, asr #4	; <UNPREDICTABLE>
   10570:	smlabteq	r2, r0, r2, pc	; <UNPREDICTABLE>
   10574:	svceq	0x00d91a0b
   10578:			; <UNDEFINED> instruction: 0x01a3eb01
   1057c:	andle	r1, r5, r9, asr #32
   10580:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10584:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   10588:	ldrmi	fp, [r8, -r3, lsl #2]
   1058c:	svclt	0x00004770
   10590:	vqrshl.s8	d27, d0, d1
   10594:	vmls.i<illegal width 8>	d16, d0, d0[3]
   10598:	stmdavc	r3!, {r1, sl}
   1059c:			; <UNDEFINED> instruction: 0xf7ffb91b
   105a0:	movwcs	pc, #8143	; 0x1fcf	; <UNPREDICTABLE>
   105a4:	ldclt	0, cr7, [r0, #-140]	; 0xffffff74
   105a8:	svclt	0x0000e7dc
   105ac:	mov	ip, sp
   105b0:	sub	sp, sp, #104	; 0x68
   105b4:	str	ip, [sp]
   105b8:	str	lr, [sp, #4]
   105bc:	str	r4, [sp, #8]
   105c0:	str	r5, [sp, #12]
   105c4:	mov	r0, #12
   105c8:	bl	104a4 <malloc@plt>
   105cc:	mov	r4, r0
   105d0:	mov	r0, #0
   105d4:	cmp	r0, #3
   105d8:	bge	105ec <abort@plt+0x10c>
   105dc:	mov	r2, #0
   105e0:	str	r2, [r4, r0, lsl #2]
   105e4:	add	r0, r0, #1
   105e8:	b	105d4 <abort@plt+0xf4>
   105ec:	mov	r5, #0
   105f0:	cmp	r5, #3
   105f4:	bge	10630 <abort@plt+0x150>
   105f8:	ldr	r0, [pc, #348]	; 1075c <abort@plt+0x27c>
   105fc:	add	r1, r5, #1
   10600:	bl	1045c <printf@plt>
   10604:	ldr	ip, [r4, r5, lsl #2]
   10608:	cmp	ip, #0
   1060c:	beq	10620 <abort@plt+0x140>
   10610:	ldr	r0, [pc, #332]	; 10764 <abort@plt+0x284>
   10614:	ldr	r1, [r4, r5, lsl #2]
   10618:	bl	1045c <printf@plt>
   1061c:	b	10628 <abort@plt+0x148>
   10620:	ldr	r0, [pc, #300]	; 10754 <abort@plt+0x274>
   10624:	bl	1045c <printf@plt>
   10628:	add	r5, r5, #1
   1062c:	b	105f0 <abort@plt+0x110>
   10630:	ldr	r0, [pc, #308]	; 1076c <abort@plt+0x28c>
   10634:	mov	r1, #3
   10638:	bl	1045c <printf@plt>
   1063c:	ldr	r0, [pc, #284]	; 10760 <abort@plt+0x280>
   10640:	add	r1, sp, #16
   10644:	bl	104bc <scanf@plt>
   10648:	bl	10480 <getchar@plt>
   1064c:	ldr	ip, [sp, #16]
   10650:	cmp	ip, #0
   10654:	blt	1066c <abort@plt+0x18c>
   10658:	ldr	ip, [sp, #16]
   1065c:	cmp	ip, #3
   10660:	movgt	r3, #1
   10664:	movle	r3, #0
   10668:	b	10670 <abort@plt+0x190>
   1066c:	mov	r3, #1
   10670:	cmp	r3, #0
   10674:	bne	10630 <abort@plt+0x150>
   10678:	ldr	r0, [sp, #16]
   1067c:	cmp	r0, #0
   10680:	beq	10718 <abort@plt+0x238>
   10684:	ldr	r0, [pc, #220]	; 10768 <abort@plt+0x288>
   10688:	bl	1045c <printf@plt>
   1068c:	add	r0, sp, #24
   10690:	mov	r1, #80	; 0x50
   10694:	ldr	r2, [pc, #188]	; 10758 <abort@plt+0x278>
   10698:	ldr	r2, [r2]
   1069c:	bl	10474 <fgets@plt>
   106a0:	add	r0, sp, #24
   106a4:	bl	104d4 <strlen@plt>
   106a8:	add	ip, sp, #24
   106ac:	add	r1, ip, r0
   106b0:	mov	r2, #0
   106b4:	sub	lr, r1, #4096	; 0x1000
   106b8:	strb	r2, [lr, #4095]	; 0xfff
   106bc:	add	r0, sp, #24
   106c0:	bl	104d4 <strlen@plt>
   106c4:	mov	r1, r0
   106c8:	ldr	r2, [sp, #16]
   106cc:	lsl	r2, r2, #2
   106d0:	add	r3, r4, r2
   106d4:	sub	lr, r3, #4096	; 0x1000
   106d8:	ldr	r0, [lr, #4092]	; 0xffc
   106dc:	add	r1, r1, #1
   106e0:	bl	1048c <realloc@plt>
   106e4:	ldr	r3, [sp, #16]
   106e8:	lsl	r2, r3, #2
   106ec:	add	r1, r4, r2
   106f0:	sub	lr, r1, #4096	; 0x1000
   106f4:	str	r0, [lr, #4092]	; 0xffc
   106f8:	ldr	r2, [sp, #16]
   106fc:	lsl	r3, r2, #2
   10700:	add	r1, r4, r3
   10704:	sub	lr, r1, #4096	; 0x1000
   10708:	ldr	r0, [lr, #4092]	; 0xffc
   1070c:	add	r1, sp, #24
   10710:	bl	10498 <strcpy@plt>
   10714:	b	105ec <abort@plt+0x10c>
   10718:	mov	r5, #0
   1071c:	cmp	r5, #3
   10720:	bge	10734 <abort@plt+0x254>
   10724:	ldr	r0, [r4, r5, lsl #2]
   10728:	bl	10468 <free@plt>
   1072c:	add	r5, r5, #1
   10730:	b	1071c <abort@plt+0x23c>
   10734:	mov	r0, r4
   10738:	bl	10468 <free@plt>
   1073c:	mov	r0, #0
   10740:	ldr	r4, [sp, #8]
   10744:	ldr	r5, [sp, #12]
   10748:	ldr	lr, [sp, #4]
   1074c:	add	sp, sp, #104	; 0x68
   10750:	bx	lr
   10754:	andeq	r0, r1, r7, ror #16
   10758:	andeq	r1, r2, r8, asr #32
   1075c:	andeq	r0, r1, r1, ror #16
   10760:	andeq	r0, r1, lr, asr r8
   10764:	muleq	r1, r4, r8
   10768:	andeq	r0, r1, r0, asr r8
   1076c:	andeq	r0, r1, r0, ror r8
   10770:	mvnsmi	lr, #737280	; 0xb4000
   10774:	cfmadd32mi	mvax0, mvfx4, mvfx12, mvfx7
   10778:	strmi	r4, [r8], ip, lsl #26
   1077c:			; <UNDEFINED> instruction: 0x4691447e
   10780:			; <UNDEFINED> instruction: 0xf7ff447d
   10784:	blne	1dcc0fc <stdin@@GLIBC_2.4+0x1dab0b4>
   10788:	strhle	r1, [sl], -r6
   1078c:	strcs	r3, [r0], #-3332	; 0xfffff2fc
   10790:	svccc	0x0004f855
   10794:	strbmi	r4, [r1], -sl, asr #12
   10798:	strcc	r4, [r1], #-1592	; 0xfffff9c8
   1079c:	adcmi	r4, r6, #152, 14	; 0x2600000
   107a0:	pop	{r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
   107a4:	svclt	0x000083f8
   107a8:	muleq	r1, r4, r7
   107ac:	andeq	r0, r1, ip, lsl #15
   107b0:	svclt	0x00004770

Disassembly of section .fini:

000107b4 <.fini>:
   107b4:	push	{r3, lr}
   107b8:	pop	{r3, pc}
