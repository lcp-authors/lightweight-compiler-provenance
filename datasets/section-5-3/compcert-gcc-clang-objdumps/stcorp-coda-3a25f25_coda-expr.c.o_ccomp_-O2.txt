
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <iswhitespace>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #8
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	mov	r2, #1
      14:	cmp	r0, #9
      18:	moveq	r1, #1
      1c:	movne	r1, #0
      20:	cmp	r0, #32
      24:	moveq	r2, r2
      28:	movne	r2, r1
      2c:	mov	ip, #1
      30:	cmp	r0, #10
      34:	moveq	r1, #1
      38:	movne	r1, #0
      3c:	cmp	r2, #0
      40:	movne	r1, ip
      44:	moveq	r1, r1
      48:	mov	r3, #1
      4c:	cmp	r0, #13
      50:	moveq	r2, #1
      54:	movne	r2, #0
      58:	cmp	r1, #0
      5c:	movne	r0, r3
      60:	moveq	r0, r2
      64:	ldr	lr, [sp, #4]
      68:	add	sp, sp, #8
      6c:	bx	lr

00000070 <compare_strings>:
      70:	mov	ip, sp
      74:	sub	sp, sp, #24
      78:	str	ip, [sp]
      7c:	str	lr, [sp, #4]
      80:	str	r4, [sp, #8]
      84:	str	r5, [sp, #12]
      88:	str	r6, [sp, #16]
      8c:	str	r7, [sp, #20]
      90:	ldr	r5, [ip, #4]
      94:	ldr	r7, [ip]
      98:	mov	r6, #0
      9c:	cmp	r6, r7
      a0:	movlt	r4, #1
      a4:	movge	r4, #0
      a8:	mov	ip, #0
      ac:	cmp	r6, r1
      b0:	movlt	ip, r4
      b4:	movge	ip, ip
      b8:	cmp	ip, #0
      bc:	beq	e0 <compare_strings+0x70>
      c0:	add	ip, r0, r6
      c4:	ldrb	ip, [r2, ip]
      c8:	add	r4, r3, r6
      cc:	ldrb	r4, [r5, r4]
      d0:	cmp	ip, r4
      d4:	bne	e0 <compare_strings+0x70>
      d8:	add	r6, r6, #1
      dc:	b	9c <compare_strings+0x2c>
      e0:	cmp	r6, r1
      e4:	bne	100 <compare_strings+0x90>
      e8:	cmp	r6, r7
      ec:	bne	f8 <compare_strings+0x88>
      f0:	mov	r0, #0
      f4:	b	134 <compare_strings+0xc4>
      f8:	mvn	r0, #0
      fc:	b	134 <compare_strings+0xc4>
     100:	cmp	r6, r7
     104:	beq	130 <compare_strings+0xc0>
     108:	add	ip, r0, r6
     10c:	ldrb	r1, [r2, ip]
     110:	and	r1, r1, #255	; 0xff
     114:	add	r3, r3, r6
     118:	ldrb	ip, [r5, r3]
     11c:	and	r0, ip, #255	; 0xff
     120:	cmp	r1, r0
     124:	bgt	130 <compare_strings+0xc0>
     128:	mvn	r0, #0
     12c:	b	134 <compare_strings+0xc4>
     130:	mov	r0, #1
     134:	ldr	r4, [sp, #8]
     138:	ldr	r5, [sp, #12]
     13c:	ldr	r6, [sp, #16]
     140:	ldr	r7, [sp, #20]
     144:	ldr	lr, [sp, #4]
     148:	add	sp, sp, #24
     14c:	bx	lr

00000150 <coda_expression_new>:
     150:	mov	ip, sp
     154:	sub	sp, sp, #56	; 0x38
     158:	str	ip, [sp, #4]
     15c:	str	lr, [sp, #8]
     160:	str	r4, [sp, #16]
     164:	str	r5, [sp, #20]
     168:	str	r6, [sp, #24]
     16c:	str	r7, [sp, #28]
     170:	str	r8, [sp, #32]
     174:	str	r9, [sp, #36]	; 0x24
     178:	str	sl, [sp, #40]	; 0x28
     17c:	ldr	r7, [ip, #4]
     180:	ldr	r4, [ip]
     184:	mov	r8, r3
     188:	mov	r6, r2
     18c:	mov	r5, r1
     190:	mov	r9, r0
     194:	cmp	r9, #20
     198:	bcs	314 <coda_expression_new+0x1c4>
     19c:	cmp	r9, #18
     1a0:	beq	264 <coda_expression_new+0x114>
     1a4:	cmp	r9, #19
     1a8:	bne	60c <coda_expression_new+0x4bc>
     1ac:	mov	r0, r5
     1b0:	bl	0 <strlen>
     1b4:	add	r2, sp, #48	; 0x30
     1b8:	mov	r3, #0
     1bc:	mov	r1, r0
     1c0:	mov	r0, r5
     1c4:	bl	0 <coda_ascii_parse_double>
     1c8:	cmp	r0, #0
     1cc:	bge	1e0 <coda_expression_new+0x90>
     1d0:	mov	r0, r5
     1d4:	bl	0 <free>
     1d8:	mov	r0, #0
     1dc:	b	23c <coda_expression_new+0xec>
     1e0:	mov	r0, r5
     1e4:	bl	0 <free>
     1e8:	mov	r0, #24
     1ec:	bl	0 <malloc>
     1f0:	cmp	r0, #0
     1f4:	bne	21c <coda_expression_new+0xcc>
     1f8:	mvn	r0, #0
     1fc:	ldr	r1, [pc, #2436]	; b88 <coda_expression_new+0xa38>
     200:	mov	r2, #24
     204:	ldr	r3, [pc, #2436]	; b90 <coda_expression_new+0xa40>
     208:	movw	r4, #261	; 0x105
     20c:	str	r4, [sp]
     210:	bl	0 <coda_set_error>
     214:	mov	r0, #0
     218:	b	23c <coda_expression_new+0xec>
     21c:	mov	r2, #19
     220:	str	r2, [r0]
     224:	mov	r3, #2
     228:	str	r3, [r0, #4]
     22c:	mov	ip, #1
     230:	str	ip, [r0, #8]
     234:	vldr	d5, [sp, #48]	; 0x30
     238:	vstr	d5, [r0, #16]
     23c:	ldr	r4, [sp, #16]
     240:	ldr	r5, [sp, #20]
     244:	ldr	r6, [sp, #24]
     248:	ldr	r7, [sp, #28]
     24c:	ldr	r8, [sp, #32]
     250:	ldr	r9, [sp, #36]	; 0x24
     254:	ldr	sl, [sp, #40]	; 0x28
     258:	ldr	lr, [sp, #8]
     25c:	add	sp, sp, #56	; 0x38
     260:	bx	lr
     264:	mov	r0, #16
     268:	bl	0 <malloc>
     26c:	mov	r4, r0
     270:	cmp	r4, #0
     274:	bne	2a4 <coda_expression_new+0x154>
     278:	mvn	r0, #0
     27c:	ldr	r1, [pc, #2308]	; b88 <coda_expression_new+0xa38>
     280:	mov	r2, #16
     284:	ldr	r3, [pc, #2308]	; b90 <coda_expression_new+0xa40>
     288:	mov	r4, #232	; 0xe8
     28c:	str	r4, [sp]
     290:	bl	0 <coda_set_error>
     294:	mov	r0, r5
     298:	bl	0 <free>
     29c:	mov	r4, #0
     2a0:	b	2e8 <coda_expression_new+0x198>
     2a4:	mov	r2, #18
     2a8:	str	r2, [r4]
     2ac:	mov	r1, #0
     2b0:	str	r1, [r4, #4]
     2b4:	mov	r1, #1
     2b8:	str	r1, [r4, #8]
     2bc:	ldrb	r2, [r5]
     2c0:	cmp	r2, #116	; 0x74
     2c4:	beq	2d8 <coda_expression_new+0x188>
     2c8:	cmp	r2, #84	; 0x54
     2cc:	moveq	r0, #1
     2d0:	movne	r0, #0
     2d4:	b	2dc <coda_expression_new+0x18c>
     2d8:	mov	r0, #1
     2dc:	str	r0, [r4, #12]
     2e0:	mov	r0, r5
     2e4:	bl	0 <free>
     2e8:	mov	r0, r4
     2ec:	ldr	r4, [sp, #16]
     2f0:	ldr	r5, [sp, #20]
     2f4:	ldr	r6, [sp, #24]
     2f8:	ldr	r7, [sp, #28]
     2fc:	ldr	r8, [sp, #32]
     300:	ldr	r9, [sp, #36]	; 0x24
     304:	ldr	sl, [sp, #40]	; 0x28
     308:	ldr	lr, [sp, #8]
     30c:	add	sp, sp, #56	; 0x38
     310:	bx	lr
     314:	cmp	r9, #20
     318:	beq	ac4 <coda_expression_new+0x974>
     31c:	cmp	r9, #21
     320:	beq	a38 <coda_expression_new+0x8e8>
     324:	cmp	r9, #22
     328:	bne	60c <coda_expression_new+0x4bc>
     32c:	cmp	r5, #0
     330:	bne	33c <coda_expression_new+0x1ec>
     334:	mov	r4, #0
     338:	b	578 <coda_expression_new+0x428>
     33c:	mov	r6, #0
     340:	mov	r4, #0
     344:	ldrb	r3, [r5, r6]
     348:	cmp	r3, #0
     34c:	beq	570 <coda_expression_new+0x420>
     350:	cmp	r3, #92	; 0x5c
     354:	bne	55c <coda_expression_new+0x40c>
     358:	add	r6, r6, #1
     35c:	ldrb	r1, [r5, r6]
     360:	cmp	r1, #101	; 0x65
     364:	bcs	3fc <coda_expression_new+0x2ac>
     368:	cmp	r1, #92	; 0x5c
     36c:	bcs	3a8 <coda_expression_new+0x258>
     370:	cmp	r1, #34	; 0x22
     374:	beq	394 <coda_expression_new+0x244>
     378:	cmp	r1, #39	; 0x27
     37c:	bne	484 <coda_expression_new+0x334>
     380:	mov	r2, r4
     384:	add	r4, r2, #1
     388:	mov	ip, #39	; 0x27
     38c:	strb	ip, [r5, r2]
     390:	b	568 <coda_expression_new+0x418>
     394:	mov	ip, r4
     398:	add	r4, ip, #1
     39c:	mov	r1, #34	; 0x22
     3a0:	strb	r1, [r5, ip]
     3a4:	b	568 <coda_expression_new+0x418>
     3a8:	cmp	r1, #92	; 0x5c
     3ac:	beq	3e8 <coda_expression_new+0x298>
     3b0:	cmp	r1, #97	; 0x61
     3b4:	beq	3d4 <coda_expression_new+0x284>
     3b8:	cmp	r1, #98	; 0x62
     3bc:	bne	484 <coda_expression_new+0x334>
     3c0:	mov	ip, r4
     3c4:	add	r4, ip, #1
     3c8:	mov	r3, #8
     3cc:	strb	r3, [r5, ip]
     3d0:	b	568 <coda_expression_new+0x418>
     3d4:	mov	r2, r4
     3d8:	add	r4, r2, #1
     3dc:	mov	r3, #7
     3e0:	strb	r3, [r5, r2]
     3e4:	b	568 <coda_expression_new+0x418>
     3e8:	mov	r3, r4
     3ec:	add	r4, r3, #1
     3f0:	mov	ip, #92	; 0x5c
     3f4:	strb	ip, [r5, r3]
     3f8:	b	568 <coda_expression_new+0x418>
     3fc:	cmp	r1, #114	; 0x72
     400:	bcs	458 <coda_expression_new+0x308>
     404:	cmp	r1, #101	; 0x65
     408:	beq	444 <coda_expression_new+0x2f4>
     40c:	cmp	r1, #102	; 0x66
     410:	beq	430 <coda_expression_new+0x2e0>
     414:	cmp	r1, #110	; 0x6e
     418:	bne	484 <coda_expression_new+0x334>
     41c:	mov	r1, r4
     420:	add	r4, r1, #1
     424:	mov	r3, #10
     428:	strb	r3, [r5, r1]
     42c:	b	568 <coda_expression_new+0x418>
     430:	mov	r1, r4
     434:	add	r4, r1, #1
     438:	mov	r3, #12
     43c:	strb	r3, [r5, r1]
     440:	b	568 <coda_expression_new+0x418>
     444:	mov	r1, r4
     448:	add	r4, r1, #1
     44c:	mov	ip, #27
     450:	strb	ip, [r5, r1]
     454:	b	568 <coda_expression_new+0x418>
     458:	cmp	r1, #114	; 0x72
     45c:	beq	548 <coda_expression_new+0x3f8>
     460:	cmp	r1, #116	; 0x74
     464:	beq	534 <coda_expression_new+0x3e4>
     468:	cmp	r1, #118	; 0x76
     46c:	bne	484 <coda_expression_new+0x334>
     470:	mov	r0, r4
     474:	add	r4, r0, #1
     478:	mov	ip, #11
     47c:	strb	ip, [r5, r0]
     480:	b	568 <coda_expression_new+0x418>
     484:	ldrb	r2, [r5, r6]
     488:	cmp	r2, #48	; 0x30
     48c:	blt	520 <coda_expression_new+0x3d0>
     490:	cmp	r2, #57	; 0x39
     494:	bgt	520 <coda_expression_new+0x3d0>
     498:	lsl	r3, r2, #6
     49c:	sub	r1, r3, #3072	; 0xc00
     4a0:	strb	r1, [r5, r4]
     4a4:	add	r2, r6, #1
     4a8:	ldrb	r0, [r5, r2]
     4ac:	cmp	r0, #48	; 0x30
     4b0:	blt	50c <coda_expression_new+0x3bc>
     4b4:	cmp	r0, #57	; 0x39
     4b8:	bgt	50c <coda_expression_new+0x3bc>
     4bc:	lsl	r0, r0, #3
     4c0:	add	r0, r1, r0
     4c4:	sub	r0, r0, #384	; 0x180
     4c8:	strb	r0, [r5, r4]
     4cc:	add	r6, r2, #1
     4d0:	ldrb	r3, [r5, r6]
     4d4:	cmp	r3, #48	; 0x30
     4d8:	blt	4f8 <coda_expression_new+0x3a8>
     4dc:	cmp	r3, #57	; 0x39
     4e0:	bgt	4f8 <coda_expression_new+0x3a8>
     4e4:	add	r3, r0, r3
     4e8:	sub	r3, r3, #48	; 0x30
     4ec:	strb	r3, [r5, r4]
     4f0:	add	r4, r4, #1
     4f4:	b	568 <coda_expression_new+0x418>
     4f8:	mvn	r0, #102	; 0x66
     4fc:	ldr	r1, [pc, #1680]	; b94 <coda_expression_new+0xa44>
     500:	bl	0 <coda_set_error>
     504:	mvn	r4, #0
     508:	b	578 <coda_expression_new+0x428>
     50c:	mvn	r0, #102	; 0x66
     510:	ldr	r1, [pc, #1660]	; b94 <coda_expression_new+0xa44>
     514:	bl	0 <coda_set_error>
     518:	mvn	r4, #0
     51c:	b	578 <coda_expression_new+0x428>
     520:	mvn	r0, #102	; 0x66
     524:	ldr	r1, [pc, #1640]	; b94 <coda_expression_new+0xa44>
     528:	bl	0 <coda_set_error>
     52c:	mvn	r4, #0
     530:	b	578 <coda_expression_new+0x428>
     534:	mov	r0, r4
     538:	add	r4, r0, #1
     53c:	mov	ip, #9
     540:	strb	ip, [r5, r0]
     544:	b	568 <coda_expression_new+0x418>
     548:	mov	r3, r4
     54c:	add	r4, r3, #1
     550:	mov	r2, #13
     554:	strb	r2, [r5, r3]
     558:	b	568 <coda_expression_new+0x418>
     55c:	mov	r1, r4
     560:	add	r4, r1, #1
     564:	strb	r3, [r5, r1]
     568:	add	r6, r6, #1
     56c:	b	344 <coda_expression_new+0x1f4>
     570:	mov	r2, #0
     574:	strb	r2, [r5, r4]
     578:	cmp	r4, #0
     57c:	bge	590 <coda_expression_new+0x440>
     580:	mov	r0, r5
     584:	bl	0 <free>
     588:	mov	r0, #0
     58c:	b	5e4 <coda_expression_new+0x494>
     590:	mov	r0, #20
     594:	bl	0 <malloc>
     598:	cmp	r0, #0
     59c:	bne	5c4 <coda_expression_new+0x474>
     5a0:	mvn	r0, #0
     5a4:	ldr	r1, [pc, #1500]	; b88 <coda_expression_new+0xa38>
     5a8:	mov	r2, #20
     5ac:	ldr	r3, [pc, #1500]	; b90 <coda_expression_new+0xa40>
     5b0:	movw	r4, #335	; 0x14f
     5b4:	str	r4, [sp]
     5b8:	bl	0 <coda_set_error>
     5bc:	mov	r0, #0
     5c0:	b	5e4 <coda_expression_new+0x494>
     5c4:	mov	ip, #22
     5c8:	str	ip, [r0]
     5cc:	mov	r2, #3
     5d0:	str	r2, [r0, #4]
     5d4:	mov	r1, #1
     5d8:	str	r1, [r0, #8]
     5dc:	str	r4, [r0, #12]
     5e0:	str	r5, [r0, #16]
     5e4:	ldr	r4, [sp, #16]
     5e8:	ldr	r5, [sp, #20]
     5ec:	ldr	r6, [sp, #24]
     5f0:	ldr	r7, [sp, #28]
     5f4:	ldr	r8, [sp, #32]
     5f8:	ldr	r9, [sp, #36]	; 0x24
     5fc:	ldr	sl, [sp, #40]	; 0x28
     600:	ldr	lr, [sp, #8]
     604:	add	sp, sp, #56	; 0x38
     608:	bx	lr
     60c:	cmp	r9, #60	; 0x3c
     610:	bne	65c <coda_expression_new+0x50c>
     614:	ldr	ip, [r6]
     618:	cmp	ip, #19
     61c:	bne	634 <coda_expression_new+0x4e4>
     620:	vldr	d0, [r6, #16]
     624:	vneg.f64	d5, d0
     628:	vstr	d5, [r6, #16]
     62c:	mov	sl, r6
     630:	b	a0c <coda_expression_new+0x8bc>
     634:	cmp	ip, #20
     638:	bne	65c <coda_expression_new+0x50c>
     63c:	ldr	r2, [r6, #16]
     640:	ldr	r1, [r6, #20]
     644:	rsbs	r0, r2, #0
     648:	rsc	r2, r1, #0
     64c:	str	r0, [r6, #16]
     650:	str	r2, [r6, #20]
     654:	mov	sl, r6
     658:	b	a0c <coda_expression_new+0x8bc>
     65c:	mov	r0, #32
     660:	bl	0 <malloc>
     664:	mov	sl, r0
     668:	cmp	sl, #0
     66c:	bne	6e4 <coda_expression_new+0x594>
     670:	mvn	r0, #0
     674:	ldr	r1, [pc, #1292]	; b88 <coda_expression_new+0xa38>
     678:	mov	r2, #32
     67c:	ldr	r3, [pc, #1292]	; b90 <coda_expression_new+0xa40>
     680:	movw	r9, #387	; 0x183
     684:	str	r9, [sp]
     688:	bl	0 <coda_set_error>
     68c:	cmp	r5, #0
     690:	beq	69c <coda_expression_new+0x54c>
     694:	mov	r0, r5
     698:	bl	0 <free>
     69c:	cmp	r6, #0
     6a0:	beq	6ac <coda_expression_new+0x55c>
     6a4:	mov	r0, r6
     6a8:	bl	9820 <coda_expression_delete>
     6ac:	cmp	r8, #0
     6b0:	beq	6bc <coda_expression_new+0x56c>
     6b4:	mov	r0, r8
     6b8:	bl	9820 <coda_expression_delete>
     6bc:	cmp	r4, #0
     6c0:	beq	6cc <coda_expression_new+0x57c>
     6c4:	mov	r0, r4
     6c8:	bl	9820 <coda_expression_delete>
     6cc:	cmp	r7, #0
     6d0:	beq	6dc <coda_expression_new+0x58c>
     6d4:	mov	r0, r7
     6d8:	bl	9820 <coda_expression_delete>
     6dc:	mov	sl, #0
     6e0:	b	a0c <coda_expression_new+0x8bc>
     6e4:	str	r9, [sl]
     6e8:	str	r5, [sl, #12]
     6ec:	str	r6, [sl, #16]
     6f0:	str	r8, [sl, #20]
     6f4:	str	r4, [sl, #24]
     6f8:	str	r7, [sl, #28]
     6fc:	cmp	r9, #87	; 0x57
     700:	bcs	930 <coda_expression_new+0x7e0>
     704:	add	pc, pc, r9, lsl #2
     708:	nop	{0}
     70c:	b	8b0 <coda_expression_new+0x760>
     710:	b	8bc <coda_expression_new+0x76c>
     714:	b	880 <coda_expression_new+0x730>
     718:	b	8e8 <coda_expression_new+0x798>
     71c:	b	868 <coda_expression_new+0x718>
     720:	b	880 <coda_expression_new+0x730>
     724:	b	868 <coda_expression_new+0x718>
     728:	b	880 <coda_expression_new+0x730>
     72c:	b	8e8 <coda_expression_new+0x798>
     730:	b	8e8 <coda_expression_new+0x798>
     734:	b	8a4 <coda_expression_new+0x754>
     738:	b	8e8 <coda_expression_new+0x798>
     73c:	b	880 <coda_expression_new+0x730>
     740:	b	880 <coda_expression_new+0x730>
     744:	b	880 <coda_expression_new+0x730>
     748:	b	880 <coda_expression_new+0x730>
     74c:	b	88c <coda_expression_new+0x73c>
     750:	b	874 <coda_expression_new+0x724>
     754:	b	914 <coda_expression_new+0x7c4>
     758:	b	914 <coda_expression_new+0x7c4>
     75c:	b	914 <coda_expression_new+0x7c4>
     760:	b	914 <coda_expression_new+0x7c4>
     764:	b	914 <coda_expression_new+0x7c4>
     768:	b	880 <coda_expression_new+0x730>
     76c:	b	8bc <coda_expression_new+0x76c>
     770:	b	868 <coda_expression_new+0x718>
     774:	b	868 <coda_expression_new+0x718>
     778:	b	880 <coda_expression_new+0x730>
     77c:	b	88c <coda_expression_new+0x73c>
     780:	b	874 <coda_expression_new+0x724>
     784:	b	874 <coda_expression_new+0x724>
     788:	b	898 <coda_expression_new+0x748>
     78c:	b	8a4 <coda_expression_new+0x754>
     790:	b	8a4 <coda_expression_new+0x754>
     794:	b	8a4 <coda_expression_new+0x754>
     798:	b	8a4 <coda_expression_new+0x754>
     79c:	b	8a4 <coda_expression_new+0x754>
     7a0:	b	8a4 <coda_expression_new+0x754>
     7a4:	b	8a4 <coda_expression_new+0x754>
     7a8:	b	898 <coda_expression_new+0x748>
     7ac:	b	868 <coda_expression_new+0x718>
     7b0:	b	868 <coda_expression_new+0x718>
     7b4:	b	8e8 <coda_expression_new+0x798>
     7b8:	b	880 <coda_expression_new+0x730>
     7bc:	b	880 <coda_expression_new+0x730>
     7c0:	b	880 <coda_expression_new+0x730>
     7c4:	b	868 <coda_expression_new+0x718>
     7c8:	b	868 <coda_expression_new+0x718>
     7cc:	b	868 <coda_expression_new+0x718>
     7d0:	b	868 <coda_expression_new+0x718>
     7d4:	b	880 <coda_expression_new+0x730>
     7d8:	b	868 <coda_expression_new+0x718>
     7dc:	b	868 <coda_expression_new+0x718>
     7e0:	b	868 <coda_expression_new+0x718>
     7e4:	b	868 <coda_expression_new+0x718>
     7e8:	b	88c <coda_expression_new+0x73c>
     7ec:	b	8bc <coda_expression_new+0x76c>
     7f0:	b	8bc <coda_expression_new+0x76c>
     7f4:	b	8bc <coda_expression_new+0x76c>
     7f8:	b	8bc <coda_expression_new+0x76c>
     7fc:	b	8b0 <coda_expression_new+0x760>
     800:	b	868 <coda_expression_new+0x718>
     804:	b	868 <coda_expression_new+0x718>
     808:	b	880 <coda_expression_new+0x730>
     80c:	b	880 <coda_expression_new+0x730>
     810:	b	880 <coda_expression_new+0x730>
     814:	b	874 <coda_expression_new+0x724>
     818:	b	88c <coda_expression_new+0x73c>
     81c:	b	88c <coda_expression_new+0x73c>
     820:	b	88c <coda_expression_new+0x73c>
     824:	b	880 <coda_expression_new+0x730>
     828:	b	8f4 <coda_expression_new+0x7a4>
     82c:	b	874 <coda_expression_new+0x724>
     830:	b	88c <coda_expression_new+0x73c>
     834:	b	898 <coda_expression_new+0x748>
     838:	b	88c <coda_expression_new+0x73c>
     83c:	b	88c <coda_expression_new+0x73c>
     840:	b	88c <coda_expression_new+0x73c>
     844:	b	8bc <coda_expression_new+0x76c>
     848:	b	874 <coda_expression_new+0x724>
     84c:	b	88c <coda_expression_new+0x73c>
     850:	b	880 <coda_expression_new+0x730>
     854:	b	868 <coda_expression_new+0x718>
     858:	b	880 <coda_expression_new+0x730>
     85c:	b	898 <coda_expression_new+0x748>
     860:	b	880 <coda_expression_new+0x730>
     864:	b	8e8 <coda_expression_new+0x798>
     868:	mov	r1, #0
     86c:	str	r1, [sl, #4]
     870:	b	930 <coda_expression_new+0x7e0>
     874:	mov	ip, #2
     878:	str	ip, [sl, #4]
     87c:	b	930 <coda_expression_new+0x7e0>
     880:	mov	r3, #1
     884:	str	r3, [sl, #4]
     888:	b	930 <coda_expression_new+0x7e0>
     88c:	mov	ip, #3
     890:	str	ip, [sl, #4]
     894:	b	930 <coda_expression_new+0x7e0>
     898:	mov	r0, #5
     89c:	str	r0, [sl, #4]
     8a0:	b	930 <coda_expression_new+0x7e0>
     8a4:	mov	r3, #4
     8a8:	str	r3, [sl, #4]
     8ac:	b	930 <coda_expression_new+0x7e0>
     8b0:	ldr	ip, [r6, #4]
     8b4:	str	ip, [sl, #4]
     8b8:	b	930 <coda_expression_new+0x7e0>
     8bc:	ldr	r0, [r6, #4]
     8c0:	cmp	r0, #2
     8c4:	beq	8dc <coda_expression_new+0x78c>
     8c8:	ldr	r3, [r8, #4]
     8cc:	cmp	r3, #2
     8d0:	beq	8dc <coda_expression_new+0x78c>
     8d4:	str	r0, [sl, #4]
     8d8:	b	930 <coda_expression_new+0x7e0>
     8dc:	mov	r2, #2
     8e0:	str	r2, [sl, #4]
     8e4:	b	930 <coda_expression_new+0x7e0>
     8e8:	ldr	r1, [r8, #4]
     8ec:	str	r1, [sl, #4]
     8f0:	b	930 <coda_expression_new+0x7e0>
     8f4:	cmp	r4, #0
     8f8:	beq	908 <coda_expression_new+0x7b8>
     8fc:	mov	r3, #3
     900:	str	r3, [sl, #4]
     904:	b	930 <coda_expression_new+0x7e0>
     908:	mov	ip, #0
     90c:	str	ip, [sl, #4]
     910:	b	930 <coda_expression_new+0x7e0>
     914:	ldr	r0, [pc, #624]	; b8c <coda_expression_new+0xa3c>
     918:	ldr	r1, [pc, #624]	; b90 <coda_expression_new+0xa40>
     91c:	movw	r2, #541	; 0x21d
     920:	ldr	r3, [pc, #604]	; b84 <coda_expression_new+0xa34>
     924:	bl	0 <__assert_fail>
     928:	mov	r0, #1
     92c:	bl	0 <exit>
     930:	ldr	r0, [sl]
     934:	cmp	r0, #69	; 0x45
     938:	bcs	958 <coda_expression_new+0x808>
     93c:	cmp	r0, #67	; 0x43
     940:	bcs	a04 <coda_expression_new+0x8b4>
     944:	cmp	r0, #27
     948:	beq	a04 <coda_expression_new+0x8b4>
     94c:	cmp	r0, #28
     950:	beq	a04 <coda_expression_new+0x8b4>
     954:	b	98c <coda_expression_new+0x83c>
     958:	cmp	r0, #83	; 0x53
     95c:	bcs	974 <coda_expression_new+0x824>
     960:	cmp	r0, #69	; 0x45
     964:	beq	a04 <coda_expression_new+0x8b4>
     968:	cmp	r0, #70	; 0x46
     96c:	beq	a04 <coda_expression_new+0x8b4>
     970:	b	98c <coda_expression_new+0x83c>
     974:	cmp	r0, #83	; 0x53
     978:	beq	a04 <coda_expression_new+0x8b4>
     97c:	cmp	r0, #84	; 0x54
     980:	beq	a04 <coda_expression_new+0x8b4>
     984:	cmp	r0, #85	; 0x55
     988:	beq	a04 <coda_expression_new+0x8b4>
     98c:	ldr	r0, [sl, #4]
     990:	cmp	r0, #4
     994:	beq	9f8 <coda_expression_new+0x8a8>
     998:	cmp	r6, #0
     99c:	beq	9ac <coda_expression_new+0x85c>
     9a0:	ldr	r3, [r6, #8]
     9a4:	cmp	r3, #0
     9a8:	beq	9f8 <coda_expression_new+0x8a8>
     9ac:	cmp	r8, #0
     9b0:	beq	9c0 <coda_expression_new+0x870>
     9b4:	ldr	r0, [r8, #8]
     9b8:	cmp	r0, #0
     9bc:	beq	9f8 <coda_expression_new+0x8a8>
     9c0:	cmp	r4, #0
     9c4:	beq	9d4 <coda_expression_new+0x884>
     9c8:	ldr	ip, [r4, #8]
     9cc:	cmp	ip, #0
     9d0:	beq	9f8 <coda_expression_new+0x8a8>
     9d4:	cmp	r7, #0
     9d8:	beq	9f0 <coda_expression_new+0x8a0>
     9dc:	ldr	r1, [r7, #8]
     9e0:	cmp	r1, #0
     9e4:	movne	ip, #1
     9e8:	moveq	ip, #0
     9ec:	b	9fc <coda_expression_new+0x8ac>
     9f0:	mov	ip, #1
     9f4:	b	9fc <coda_expression_new+0x8ac>
     9f8:	mov	ip, #0
     9fc:	str	ip, [sl, #8]
     a00:	b	a0c <coda_expression_new+0x8bc>
     a04:	mov	r1, #0
     a08:	str	r1, [sl, #8]
     a0c:	mov	r0, sl
     a10:	ldr	r4, [sp, #16]
     a14:	ldr	r5, [sp, #20]
     a18:	ldr	r6, [sp, #24]
     a1c:	ldr	r7, [sp, #28]
     a20:	ldr	r8, [sp, #32]
     a24:	ldr	r9, [sp, #36]	; 0x24
     a28:	ldr	sl, [sp, #40]	; 0x28
     a2c:	ldr	lr, [sp, #8]
     a30:	add	sp, sp, #56	; 0x38
     a34:	bx	lr
     a38:	mov	r0, #20
     a3c:	bl	0 <malloc>
     a40:	mov	r4, r0
     a44:	cmp	r4, #0
     a48:	bne	a70 <coda_expression_new+0x920>
     a4c:	mvn	r0, #0
     a50:	ldr	r1, [pc, #304]	; b88 <coda_expression_new+0xa38>
     a54:	mov	r2, #20
     a58:	ldr	r3, [pc, #304]	; b90 <coda_expression_new+0xa40>
     a5c:	movw	r4, #307	; 0x133
     a60:	str	r4, [sp]
     a64:	bl	0 <coda_set_error>
     a68:	mov	r4, #0
     a6c:	b	a98 <coda_expression_new+0x948>
     a70:	mov	r3, #21
     a74:	str	r3, [r4]
     a78:	mov	ip, #3
     a7c:	str	ip, [r4, #4]
     a80:	mov	r2, #1
     a84:	str	r2, [r4, #8]
     a88:	mov	r0, r5
     a8c:	bl	0 <strlen>
     a90:	str	r0, [r4, #12]
     a94:	str	r5, [r4, #16]
     a98:	mov	r0, r4
     a9c:	ldr	r4, [sp, #16]
     aa0:	ldr	r5, [sp, #20]
     aa4:	ldr	r6, [sp, #24]
     aa8:	ldr	r7, [sp, #28]
     aac:	ldr	r8, [sp, #32]
     ab0:	ldr	r9, [sp, #36]	; 0x24
     ab4:	ldr	sl, [sp, #40]	; 0x28
     ab8:	ldr	lr, [sp, #8]
     abc:	add	sp, sp, #56	; 0x38
     ac0:	bx	lr
     ac4:	mov	r0, r5
     ac8:	bl	0 <strlen>
     acc:	add	r2, sp, #48	; 0x30
     ad0:	mov	r3, #0
     ad4:	mov	r1, r0
     ad8:	mov	r0, r5
     adc:	bl	0 <coda_ascii_parse_int64>
     ae0:	cmp	r0, #0
     ae4:	bge	af8 <coda_expression_new+0x9a8>
     ae8:	mov	r0, r5
     aec:	bl	0 <free>
     af0:	mov	r0, #0
     af4:	b	b5c <coda_expression_new+0xa0c>
     af8:	mov	r0, r5
     afc:	bl	0 <free>
     b00:	mov	r0, #24
     b04:	bl	0 <malloc>
     b08:	cmp	r0, #0
     b0c:	bne	b34 <coda_expression_new+0x9e4>
     b10:	mvn	r0, #0
     b14:	ldr	r1, [pc, #108]	; b88 <coda_expression_new+0xa38>
     b18:	mov	r2, #24
     b1c:	ldr	r3, [pc, #108]	; b90 <coda_expression_new+0xa40>
     b20:	mov	ip, #288	; 0x120
     b24:	str	ip, [sp]
     b28:	bl	0 <coda_set_error>
     b2c:	mov	r0, #0
     b30:	b	b5c <coda_expression_new+0xa0c>
     b34:	mov	r1, #20
     b38:	str	r1, [r0]
     b3c:	mov	ip, #1
     b40:	str	ip, [r0, #4]
     b44:	mov	r2, #1
     b48:	str	r2, [r0, #8]
     b4c:	ldr	ip, [sp, #48]	; 0x30
     b50:	ldr	r2, [sp, #52]	; 0x34
     b54:	str	ip, [r0, #16]
     b58:	str	r2, [r0, #20]
     b5c:	ldr	r4, [sp, #16]
     b60:	ldr	r5, [sp, #20]
     b64:	ldr	r6, [sp, #24]
     b68:	ldr	r7, [sp, #28]
     b6c:	ldr	r8, [sp, #32]
     b70:	ldr	r9, [sp, #36]	; 0x24
     b74:	ldr	sl, [sp, #40]	; 0x28
     b78:	ldr	lr, [sp, #8]
     b7c:	add	sp, sp, #56	; 0x38
     b80:	bx	lr
     b84:	.word	0x00000d58
     b88:	.word	0x000005f0
     b8c:	.word	0x00000bf8
     b90:	.word	0x0000053b
     b94:	.word	0x00000495

00000b98 <init_eval_info>:
     b98:	mov	ip, sp
     b9c:	sub	sp, sp, #8
     ba0:	str	ip, [sp]
     ba4:	str	lr, [sp, #4]
     ba8:	str	r1, [r0]
     bac:	cmp	r1, #0
     bb0:	beq	bd0 <init_eval_info+0x38>
     bb4:	add	r2, r0, #8
     bb8:	mov	r3, r1
     bbc:	mov	lr, #130	; 0x82
     bc0:	ldr	ip, [r3], #4
     bc4:	subs	lr, lr, #1
     bc8:	str	ip, [r2], #4
     bcc:	bne	bc0 <init_eval_info+0x28>
     bd0:	mov	r2, #0
     bd4:	mov	r1, #0
     bd8:	str	r1, [r0, #528]	; 0x210
     bdc:	str	r2, [r0, #532]	; 0x214
     be0:	str	r1, [r0, #536]	; 0x218
     be4:	str	r2, [r0, #540]	; 0x21c
     be8:	str	r1, [r0, #544]	; 0x220
     bec:	str	r2, [r0, #548]	; 0x224
     bf0:	str	r1, [r0, #552]	; 0x228
     bf4:	str	r2, [r0, #556]	; 0x22c
     bf8:	mov	ip, #0
     bfc:	str	ip, [r0, #560]	; 0x230
     c00:	ldr	lr, [sp, #4]
     c04:	add	sp, sp, #8
     c08:	bx	lr

00000c0c <eval_boolean>:
     c0c:	mov	ip, sp
     c10:	sub	sp, sp, #712	; 0x2c8
     c14:	sub	sp, sp, #2048	; 0x800
     c18:	str	ip, [sp, #16]
     c1c:	str	lr, [sp, #20]
     c20:	str	r4, [sp, #24]
     c24:	str	r5, [sp, #28]
     c28:	str	r6, [sp, #32]
     c2c:	str	r7, [sp, #36]	; 0x24
     c30:	str	r8, [sp, #40]	; 0x28
     c34:	str	r9, [sp, #44]	; 0x2c
     c38:	mov	r4, r2
     c3c:	mov	r6, r1
     c40:	mov	r5, r0
     c44:	ldr	r2, [r6]
     c48:	cmp	r2, #18
     c4c:	bne	c60 <eval_boolean+0x54>
     c50:	ldr	r1, [r6, #12]
     c54:	str	r1, [r4]
     c58:	mov	r0, #0
     c5c:	b	22b0 <eval_boolean+0x16a4>
     c60:	cmp	r2, #48	; 0x30
     c64:	bcs	17b0 <eval_boolean+0xba4>
     c68:	cmp	r2, #40	; 0x28
     c6c:	bcs	12f4 <eval_boolean+0x6e8>
     c70:	cmp	r2, #11
     c74:	bcs	f14 <eval_boolean+0x308>
     c78:	cmp	r2, #4
     c7c:	beq	dcc <eval_boolean+0x1c0>
     c80:	cmp	r2, #6
     c84:	bne	1f7c <eval_boolean+0x1370>
     c88:	ldr	r2, [r5]
     c8c:	cmp	r2, #0
     c90:	bne	ca8 <eval_boolean+0x9c>
     c94:	ldr	r0, [pc, #3820]	; 1b88 <eval_boolean+0xf7c>
     c98:	ldr	r1, [pc, #3824]	; 1b90 <eval_boolean+0xf84>
     c9c:	movw	r2, #1239	; 0x4d7
     ca0:	ldr	r3, [pc, #3804]	; 1b84 <eval_boolean+0xf78>
     ca4:	bl	0 <__assert_fail>
     ca8:	add	r3, r5, #8
     cac:	mov	r2, r3
     cb0:	add	r3, sp, #2240	; 0x8c0
     cb4:	mov	lr, #130	; 0x82
     cb8:	ldr	ip, [r2], #4
     cbc:	subs	lr, lr, #1
     cc0:	str	ip, [r3], #4
     cc4:	bne	cb8 <eval_boolean+0xac>
     cc8:	ldr	r1, [r6, #16]
     ccc:	mov	r0, r5
     cd0:	bl	6fa4 <eval_cursor>
     cd4:	cmp	r0, #0
     cd8:	beq	ce4 <eval_boolean+0xd8>
     cdc:	mvn	r0, #0
     ce0:	b	22b0 <eval_boolean+0x16a4>
     ce4:	add	r0, r5, #8
     ce8:	add	r1, sp, #52	; 0x34
     cec:	bl	0 <coda_cursor_get_num_elements>
     cf0:	cmp	r0, #0
     cf4:	beq	d00 <eval_boolean+0xf4>
     cf8:	mvn	r0, #0
     cfc:	b	22b0 <eval_boolean+0x16a4>
     d00:	ldr	r2, [sp, #52]	; 0x34
     d04:	cmp	r2, #0
     d08:	ble	da0 <eval_boolean+0x194>
     d0c:	add	r0, r5, #8
     d10:	bl	0 <coda_cursor_goto_first_array_element>
     d14:	cmp	r0, #0
     d18:	beq	d24 <eval_boolean+0x118>
     d1c:	mvn	r0, #0
     d20:	b	22b0 <eval_boolean+0x16a4>
     d24:	mov	r7, #0
     d28:	ldr	r3, [sp, #52]	; 0x34
     d2c:	cmp	r7, r3
     d30:	bge	da0 <eval_boolean+0x194>
     d34:	ldr	r1, [r6, #20]
     d38:	add	r2, sp, #56	; 0x38
     d3c:	mov	r0, r5
     d40:	bl	c0c <eval_boolean>
     d44:	cmp	r0, #0
     d48:	beq	d54 <eval_boolean+0x148>
     d4c:	mvn	r0, #0
     d50:	b	22b0 <eval_boolean+0x16a4>
     d54:	ldr	r2, [sp, #56]	; 0x38
     d58:	cmp	r2, #0
     d5c:	beq	d70 <eval_boolean+0x164>
     d60:	mov	r0, #1
     d64:	str	r0, [r4]
     d68:	mov	r0, #0
     d6c:	b	22b0 <eval_boolean+0x16a4>
     d70:	ldr	r1, [sp, #52]	; 0x34
     d74:	sub	r3, r1, #1
     d78:	cmp	r7, r3
     d7c:	bge	d98 <eval_boolean+0x18c>
     d80:	add	r0, r5, #8
     d84:	bl	0 <coda_cursor_goto_next_array_element>
     d88:	cmp	r0, #0
     d8c:	beq	d98 <eval_boolean+0x18c>
     d90:	mvn	r0, #0
     d94:	b	22b0 <eval_boolean+0x16a4>
     d98:	add	r7, r7, #1
     d9c:	b	d28 <eval_boolean+0x11c>
     da0:	mov	r1, #0
     da4:	str	r1, [r4]
     da8:	add	r0, r5, #8
     dac:	add	r2, sp, #2240	; 0x8c0
     db0:	mov	r3, r0
     db4:	mov	lr, #130	; 0x82
     db8:	ldr	ip, [r2], #4
     dbc:	subs	lr, lr, #1
     dc0:	str	ip, [r3], #4
     dc4:	bne	db8 <eval_boolean+0x1ac>
     dc8:	b	22ac <eval_boolean+0x16a0>
     dcc:	ldr	ip, [r5]
     dd0:	cmp	ip, #0
     dd4:	bne	dec <eval_boolean+0x1e0>
     dd8:	ldr	r0, [pc, #3496]	; 1b88 <eval_boolean+0xf7c>
     ddc:	ldr	r1, [pc, #3500]	; 1b90 <eval_boolean+0xf84>
     de0:	movw	r2, #1190	; 0x4a6
     de4:	ldr	r3, [pc, #3480]	; 1b84 <eval_boolean+0xf78>
     de8:	bl	0 <__assert_fail>
     dec:	add	r2, r5, #8
     df0:	add	r3, sp, #696	; 0x2b8
     df4:	add	r3, r3, #1024	; 0x400
     df8:	mov	lr, #130	; 0x82
     dfc:	ldr	ip, [r2], #4
     e00:	subs	lr, lr, #1
     e04:	str	ip, [r3], #4
     e08:	bne	dfc <eval_boolean+0x1f0>
     e0c:	ldr	r1, [r6, #16]
     e10:	mov	r0, r5
     e14:	bl	6fa4 <eval_cursor>
     e18:	cmp	r0, #0
     e1c:	beq	e28 <eval_boolean+0x21c>
     e20:	mvn	r0, #0
     e24:	b	22b0 <eval_boolean+0x16a4>
     e28:	add	r0, r5, #8
     e2c:	add	r1, sp, #108	; 0x6c
     e30:	bl	0 <coda_cursor_get_num_elements>
     e34:	cmp	r0, #0
     e38:	beq	e44 <eval_boolean+0x238>
     e3c:	mvn	r0, #0
     e40:	b	22b0 <eval_boolean+0x16a4>
     e44:	ldr	r0, [sp, #108]	; 0x6c
     e48:	cmp	r0, #0
     e4c:	ble	ee4 <eval_boolean+0x2d8>
     e50:	add	r0, r5, #8
     e54:	bl	0 <coda_cursor_goto_first_array_element>
     e58:	cmp	r0, #0
     e5c:	beq	e68 <eval_boolean+0x25c>
     e60:	mvn	r0, #0
     e64:	b	22b0 <eval_boolean+0x16a4>
     e68:	mov	r7, #0
     e6c:	ldr	r1, [sp, #108]	; 0x6c
     e70:	cmp	r7, r1
     e74:	bge	ee4 <eval_boolean+0x2d8>
     e78:	ldr	r1, [r6, #20]
     e7c:	add	r2, sp, #112	; 0x70
     e80:	mov	r0, r5
     e84:	bl	c0c <eval_boolean>
     e88:	cmp	r0, #0
     e8c:	beq	e98 <eval_boolean+0x28c>
     e90:	mvn	r0, #0
     e94:	b	22b0 <eval_boolean+0x16a4>
     e98:	ldr	ip, [sp, #112]	; 0x70
     e9c:	cmp	ip, #0
     ea0:	bne	eb4 <eval_boolean+0x2a8>
     ea4:	mov	r1, #0
     ea8:	str	r1, [r4]
     eac:	mov	r0, #0
     eb0:	b	22b0 <eval_boolean+0x16a4>
     eb4:	ldr	r1, [sp, #108]	; 0x6c
     eb8:	sub	r3, r1, #1
     ebc:	cmp	r7, r3
     ec0:	bge	edc <eval_boolean+0x2d0>
     ec4:	add	r0, r5, #8
     ec8:	bl	0 <coda_cursor_goto_next_array_element>
     ecc:	cmp	r0, #0
     ed0:	beq	edc <eval_boolean+0x2d0>
     ed4:	mvn	r0, #0
     ed8:	b	22b0 <eval_boolean+0x16a4>
     edc:	add	r7, r7, #1
     ee0:	b	e6c <eval_boolean+0x260>
     ee4:	mov	r0, #1
     ee8:	str	r0, [r4]
     eec:	add	r0, r5, #8
     ef0:	add	r2, sp, #696	; 0x2b8
     ef4:	add	r2, r2, #1024	; 0x400
     ef8:	mov	r3, r0
     efc:	mov	lr, #130	; 0x82
     f00:	ldr	ip, [r2], #4
     f04:	subs	lr, lr, #1
     f08:	str	ip, [r3], #4
     f0c:	bne	f00 <eval_boolean+0x2f4>
     f10:	b	22ac <eval_boolean+0x16a0>
     f14:	cmp	r2, #11
     f18:	beq	1258 <eval_boolean+0x64c>
     f1c:	cmp	r2, #25
     f20:	beq	1080 <eval_boolean+0x474>
     f24:	cmp	r2, #26
     f28:	bne	1f7c <eval_boolean+0x1370>
     f2c:	ldr	r1, [r5]
     f30:	cmp	r1, #0
     f34:	bne	f4c <eval_boolean+0x340>
     f38:	ldr	r0, [pc, #3144]	; 1b88 <eval_boolean+0xf7c>
     f3c:	ldr	r1, [pc, #3148]	; 1b90 <eval_boolean+0xf84>
     f40:	movw	r2, #1148	; 0x47c
     f44:	ldr	r3, [pc, #3128]	; 1b84 <eval_boolean+0xf78>
     f48:	bl	0 <__assert_fail>
     f4c:	add	ip, r5, #8
     f50:	mov	r2, ip
     f54:	add	r3, sp, #1200	; 0x4b0
     f58:	mov	lr, #130	; 0x82
     f5c:	ldr	ip, [r2], #4
     f60:	subs	lr, lr, #1
     f64:	str	ip, [r3], #4
     f68:	bne	f5c <eval_boolean+0x350>
     f6c:	ldr	r1, [r6, #16]
     f70:	mov	r0, r5
     f74:	bl	6fa4 <eval_cursor>
     f78:	cmp	r0, #0
     f7c:	beq	fd4 <eval_boolean+0x3c8>
     f80:	ldr	r1, [pc, #3084]	; 1b94 <eval_boolean+0xf88>
     f84:	ldr	r3, [r1]
     f88:	mvn	lr, #400	; 0x190
     f8c:	cmp	r3, lr
     f90:	beq	fcc <eval_boolean+0x3c0>
     f94:	mov	r3, #0
     f98:	str	r3, [r1]
     f9c:	mov	r1, #0
     fa0:	str	r1, [r4]
     fa4:	add	r0, r5, #8
     fa8:	add	r2, sp, #1200	; 0x4b0
     fac:	mov	r3, r0
     fb0:	mov	lr, #130	; 0x82
     fb4:	ldr	ip, [r2], #4
     fb8:	subs	lr, lr, #1
     fbc:	str	ip, [r3], #4
     fc0:	bne	fb4 <eval_boolean+0x3a8>
     fc4:	mov	r0, #0
     fc8:	b	22b0 <eval_boolean+0x16a4>
     fcc:	mvn	r0, #0
     fd0:	b	22b0 <eval_boolean+0x16a4>
     fd4:	add	r0, r5, #8
     fd8:	add	r1, sp, #100	; 0x64
     fdc:	bl	0 <coda_cursor_get_type_class>
     fe0:	cmp	r0, #0
     fe4:	beq	ff0 <eval_boolean+0x3e4>
     fe8:	mvn	r0, #0
     fec:	b	22b0 <eval_boolean+0x16a4>
     ff0:	ldr	r3, [sp, #100]	; 0x64
     ff4:	cmp	r3, #6
     ff8:	bne	1054 <eval_boolean+0x448>
     ffc:	add	r0, r5, #8
    1000:	add	r1, sp, #104	; 0x68
    1004:	bl	0 <coda_cursor_get_special_type>
    1008:	cmp	r0, #0
    100c:	beq	1018 <eval_boolean+0x40c>
    1010:	mvn	r0, #0
    1014:	b	22b0 <eval_boolean+0x16a4>
    1018:	ldr	r0, [sp, #104]	; 0x68
    101c:	cmp	r0, #0
    1020:	bne	1054 <eval_boolean+0x448>
    1024:	mov	ip, #0
    1028:	str	ip, [r4]
    102c:	add	r0, r5, #8
    1030:	add	r2, sp, #1200	; 0x4b0
    1034:	mov	r3, r0
    1038:	mov	lr, #130	; 0x82
    103c:	ldr	ip, [r2], #4
    1040:	subs	lr, lr, #1
    1044:	str	ip, [r3], #4
    1048:	bne	103c <eval_boolean+0x430>
    104c:	mov	r0, #0
    1050:	b	22b0 <eval_boolean+0x16a4>
    1054:	mov	r2, #1
    1058:	str	r2, [r4]
    105c:	add	r0, r5, #8
    1060:	add	r2, sp, #1200	; 0x4b0
    1064:	mov	r3, r0
    1068:	mov	lr, #130	; 0x82
    106c:	ldr	ip, [r2], #4
    1070:	subs	lr, lr, #1
    1074:	str	ip, [r3], #4
    1078:	bne	106c <eval_boolean+0x460>
    107c:	b	22ac <eval_boolean+0x16a0>
    1080:	ldr	r1, [r6, #16]
    1084:	ldr	r3, [r1, #4]
    1088:	cmp	r3, #2
    108c:	beq	11f8 <eval_boolean+0x5ec>
    1090:	ldr	r2, [r6, #20]
    1094:	ldr	ip, [r2, #4]
    1098:	cmp	ip, #2
    109c:	beq	11f8 <eval_boolean+0x5ec>
    10a0:	cmp	r3, #1
    10a4:	beq	118c <eval_boolean+0x580>
    10a8:	cmp	r3, #3
    10ac:	bne	116c <eval_boolean+0x560>
    10b0:	add	r2, sp, #116	; 0x74
    10b4:	add	r3, sp, #124	; 0x7c
    10b8:	add	r0, sp, #132	; 0x84
    10bc:	str	r0, [sp]
    10c0:	mov	r0, r5
    10c4:	bl	4f8c <eval_string>
    10c8:	cmp	r0, #0
    10cc:	beq	10d8 <eval_boolean+0x4cc>
    10d0:	mvn	r0, #0
    10d4:	b	22b0 <eval_boolean+0x16a4>
    10d8:	ldr	r1, [r6, #20]
    10dc:	add	r2, sp, #120	; 0x78
    10e0:	add	r3, sp, #128	; 0x80
    10e4:	add	r0, sp, #136	; 0x88
    10e8:	str	r0, [sp]
    10ec:	mov	r0, r5
    10f0:	bl	4f8c <eval_string>
    10f4:	cmp	r0, #0
    10f8:	beq	110c <eval_boolean+0x500>
    10fc:	ldr	r0, [sp, #132]	; 0x84
    1100:	bl	0 <free>
    1104:	mvn	r0, #0
    1108:	b	22b0 <eval_boolean+0x16a4>
    110c:	ldr	r0, [sp, #116]	; 0x74
    1110:	ldr	r1, [sp, #124]	; 0x7c
    1114:	ldr	r2, [sp, #132]	; 0x84
    1118:	ldr	r3, [sp, #120]	; 0x78
    111c:	ldr	r5, [sp, #128]	; 0x80
    1120:	ldr	ip, [sp, #136]	; 0x88
    1124:	str	ip, [sp, #4]
    1128:	str	r5, [sp]
    112c:	bl	70 <compare_strings>
    1130:	cmp	r0, #0
    1134:	moveq	r3, #1
    1138:	movne	r3, #0
    113c:	str	r3, [r4]
    1140:	ldr	r0, [sp, #124]	; 0x7c
    1144:	cmp	r0, #0
    1148:	ble	1154 <eval_boolean+0x548>
    114c:	ldr	r0, [sp, #132]	; 0x84
    1150:	bl	0 <free>
    1154:	ldr	r0, [sp, #128]	; 0x80
    1158:	cmp	r0, #0
    115c:	ble	22ac <eval_boolean+0x16a0>
    1160:	ldr	r0, [sp, #136]	; 0x88
    1164:	bl	0 <free>
    1168:	b	22ac <eval_boolean+0x16a0>
    116c:	ldr	r0, [pc, #2584]	; 1b8c <eval_boolean+0xf80>
    1170:	ldr	r1, [pc, #2584]	; 1b90 <eval_boolean+0xf84>
    1174:	mov	r2, #668	; 0x29c
    1178:	ldr	r3, [pc, #2564]	; 1b84 <eval_boolean+0xf78>
    117c:	bl	0 <__assert_fail>
    1180:	mov	r0, #1
    1184:	bl	0 <exit>
    1188:	b	22ac <eval_boolean+0x16a0>
    118c:	add	r2, sp, #280	; 0x118
    1190:	mov	r0, r5
    1194:	bl	3240 <eval_integer>
    1198:	cmp	r0, #0
    119c:	beq	11a8 <eval_boolean+0x59c>
    11a0:	mvn	r0, #0
    11a4:	b	22b0 <eval_boolean+0x16a4>
    11a8:	ldr	r1, [r6, #20]
    11ac:	add	r2, sp, #288	; 0x120
    11b0:	mov	r0, r5
    11b4:	bl	3240 <eval_integer>
    11b8:	cmp	r0, #0
    11bc:	beq	11c8 <eval_boolean+0x5bc>
    11c0:	mvn	r0, #0
    11c4:	b	22b0 <eval_boolean+0x16a4>
    11c8:	ldr	r0, [sp, #280]	; 0x118
    11cc:	ldr	ip, [sp, #284]	; 0x11c
    11d0:	ldr	r2, [sp, #288]	; 0x120
    11d4:	ldr	r1, [sp, #292]	; 0x124
    11d8:	eor	ip, ip, r1
    11dc:	eor	r3, r0, r2
    11e0:	orr	r2, ip, r3
    11e4:	cmp	r2, #0
    11e8:	moveq	r1, #1
    11ec:	movne	r1, #0
    11f0:	str	r1, [r4]
    11f4:	b	22ac <eval_boolean+0x16a0>
    11f8:	ldr	r1, [r6, #16]
    11fc:	add	r2, sp, #264	; 0x108
    1200:	mov	r0, r5
    1204:	bl	2300 <eval_float>
    1208:	cmp	r0, #0
    120c:	beq	1218 <eval_boolean+0x60c>
    1210:	mvn	r0, #0
    1214:	b	22b0 <eval_boolean+0x16a4>
    1218:	ldr	r1, [r6, #20]
    121c:	add	r2, sp, #272	; 0x110
    1220:	mov	r0, r5
    1224:	bl	2300 <eval_float>
    1228:	cmp	r0, #0
    122c:	beq	1238 <eval_boolean+0x62c>
    1230:	mvn	r0, #0
    1234:	b	22b0 <eval_boolean+0x16a4>
    1238:	vldr	d6, [sp, #264]	; 0x108
    123c:	vldr	d3, [sp, #272]	; 0x110
    1240:	vcmp.f64	d6, d3
    1244:	vmrs	APSR_nzcv, fpscr
    1248:	moveq	r2, #1
    124c:	movne	r2, #0
    1250:	str	r2, [r4]
    1254:	b	22ac <eval_boolean+0x16a0>
    1258:	ldr	r1, [r5]
    125c:	cmp	r1, #0
    1260:	bne	1278 <eval_boolean+0x66c>
    1264:	ldr	r0, [pc, #2332]	; 1b88 <eval_boolean+0xf7c>
    1268:	ldr	r1, [pc, #2336]	; 1b90 <eval_boolean+0xf84>
    126c:	movw	r2, #1348	; 0x544
    1270:	ldr	r3, [pc, #2316]	; 1b84 <eval_boolean+0xf78>
    1274:	bl	0 <__assert_fail>
    1278:	add	r2, r5, #8
    127c:	add	r3, sp, #680	; 0x2a8
    1280:	mov	lr, #130	; 0x82
    1284:	ldr	ip, [r2], #4
    1288:	subs	lr, lr, #1
    128c:	str	ip, [r3], #4
    1290:	bne	1284 <eval_boolean+0x678>
    1294:	ldr	r1, [r6, #16]
    1298:	mov	r0, r5
    129c:	bl	6fa4 <eval_cursor>
    12a0:	cmp	r0, #0
    12a4:	beq	12b0 <eval_boolean+0x6a4>
    12a8:	mvn	r0, #0
    12ac:	b	22b0 <eval_boolean+0x16a4>
    12b0:	ldr	r1, [r6, #20]
    12b4:	mov	r2, r4
    12b8:	mov	r0, r5
    12bc:	bl	c0c <eval_boolean>
    12c0:	cmp	r0, #0
    12c4:	beq	12d0 <eval_boolean+0x6c4>
    12c8:	mvn	r0, #0
    12cc:	b	22b0 <eval_boolean+0x16a4>
    12d0:	add	r0, r5, #8
    12d4:	add	r2, sp, #680	; 0x2a8
    12d8:	mov	r3, r0
    12dc:	mov	lr, #130	; 0x82
    12e0:	ldr	ip, [r2], #4
    12e4:	subs	lr, lr, #1
    12e8:	str	ip, [r3], #4
    12ec:	bne	12e0 <eval_boolean+0x6d4>
    12f0:	b	22ac <eval_boolean+0x16a0>
    12f4:	cmp	r2, #42	; 0x2a
    12f8:	bcs	16cc <eval_boolean+0xac0>
    12fc:	cmp	r2, #40	; 0x28
    1300:	beq	14e8 <eval_boolean+0x8dc>
    1304:	ldr	r1, [r6, #16]
    1308:	ldr	r3, [r1, #4]
    130c:	cmp	r3, #2
    1310:	beq	1488 <eval_boolean+0x87c>
    1314:	ldr	r0, [r6, #20]
    1318:	ldr	r2, [r0, #4]
    131c:	cmp	r2, #2
    1320:	beq	1488 <eval_boolean+0x87c>
    1324:	cmp	r3, #1
    1328:	beq	1410 <eval_boolean+0x804>
    132c:	cmp	r3, #3
    1330:	bne	13f0 <eval_boolean+0x7e4>
    1334:	add	r2, sp, #164	; 0xa4
    1338:	add	r3, sp, #172	; 0xac
    133c:	add	ip, sp, #180	; 0xb4
    1340:	str	ip, [sp]
    1344:	mov	r0, r5
    1348:	bl	4f8c <eval_string>
    134c:	cmp	r0, #0
    1350:	beq	135c <eval_boolean+0x750>
    1354:	mvn	r0, #0
    1358:	b	22b0 <eval_boolean+0x16a4>
    135c:	ldr	r1, [r6, #20]
    1360:	add	r2, sp, #168	; 0xa8
    1364:	add	r3, sp, #176	; 0xb0
    1368:	add	r0, sp, #184	; 0xb8
    136c:	str	r0, [sp]
    1370:	mov	r0, r5
    1374:	bl	4f8c <eval_string>
    1378:	cmp	r0, #0
    137c:	beq	1390 <eval_boolean+0x784>
    1380:	ldr	r0, [sp, #180]	; 0xb4
    1384:	bl	0 <free>
    1388:	mvn	r0, #0
    138c:	b	22b0 <eval_boolean+0x16a4>
    1390:	ldr	r0, [sp, #164]	; 0xa4
    1394:	ldr	r1, [sp, #172]	; 0xac
    1398:	ldr	r2, [sp, #180]	; 0xb4
    139c:	ldr	r3, [sp, #168]	; 0xa8
    13a0:	ldr	ip, [sp, #176]	; 0xb0
    13a4:	ldr	r5, [sp, #184]	; 0xb8
    13a8:	str	r5, [sp, #4]
    13ac:	str	ip, [sp]
    13b0:	bl	70 <compare_strings>
    13b4:	cmp	r0, #0
    13b8:	movgt	ip, #1
    13bc:	movle	ip, #0
    13c0:	str	ip, [r4]
    13c4:	ldr	r0, [sp, #172]	; 0xac
    13c8:	cmp	r0, #0
    13cc:	ble	13d8 <eval_boolean+0x7cc>
    13d0:	ldr	r0, [sp, #180]	; 0xb4
    13d4:	bl	0 <free>
    13d8:	ldr	r0, [sp, #176]	; 0xb0
    13dc:	cmp	r0, #0
    13e0:	ble	22ac <eval_boolean+0x16a0>
    13e4:	ldr	r0, [sp, #184]	; 0xb8
    13e8:	bl	0 <free>
    13ec:	b	22ac <eval_boolean+0x16a0>
    13f0:	ldr	r0, [pc, #1940]	; 1b8c <eval_boolean+0xf80>
    13f4:	ldr	r1, [pc, #1940]	; 1b90 <eval_boolean+0xf84>
    13f8:	mov	r2, #792	; 0x318
    13fc:	ldr	r3, [pc, #1920]	; 1b84 <eval_boolean+0xf78>
    1400:	bl	0 <__assert_fail>
    1404:	mov	r0, #1
    1408:	bl	0 <exit>
    140c:	b	22ac <eval_boolean+0x16a0>
    1410:	add	r2, sp, #344	; 0x158
    1414:	mov	r0, r5
    1418:	bl	3240 <eval_integer>
    141c:	cmp	r0, #0
    1420:	beq	142c <eval_boolean+0x820>
    1424:	mvn	r0, #0
    1428:	b	22b0 <eval_boolean+0x16a4>
    142c:	ldr	r1, [r6, #20]
    1430:	add	r2, sp, #352	; 0x160
    1434:	mov	r0, r5
    1438:	bl	3240 <eval_integer>
    143c:	cmp	r0, #0
    1440:	beq	144c <eval_boolean+0x840>
    1444:	mvn	r0, #0
    1448:	b	22b0 <eval_boolean+0x16a4>
    144c:	ldr	r3, [sp, #344]	; 0x158
    1450:	ldr	r0, [sp, #348]	; 0x15c
    1454:	ldr	r1, [sp, #352]	; 0x160
    1458:	ldr	r2, [sp, #356]	; 0x164
    145c:	cmp	r0, r2
    1460:	bne	1474 <eval_boolean+0x868>
    1464:	cmp	r3, r1
    1468:	movhi	r1, #1
    146c:	movls	r1, #0
    1470:	b	1480 <eval_boolean+0x874>
    1474:	cmp	r0, r2
    1478:	movgt	r1, #1
    147c:	movle	r1, #0
    1480:	str	r1, [r4]
    1484:	b	22ac <eval_boolean+0x16a0>
    1488:	ldr	r1, [r6, #16]
    148c:	add	r2, sp, #328	; 0x148
    1490:	mov	r0, r5
    1494:	bl	2300 <eval_float>
    1498:	cmp	r0, #0
    149c:	beq	14a8 <eval_boolean+0x89c>
    14a0:	mvn	r0, #0
    14a4:	b	22b0 <eval_boolean+0x16a4>
    14a8:	ldr	r1, [r6, #20]
    14ac:	add	r2, sp, #336	; 0x150
    14b0:	mov	r0, r5
    14b4:	bl	2300 <eval_float>
    14b8:	cmp	r0, #0
    14bc:	beq	14c8 <eval_boolean+0x8bc>
    14c0:	mvn	r0, #0
    14c4:	b	22b0 <eval_boolean+0x16a4>
    14c8:	vldr	d1, [sp, #328]	; 0x148
    14cc:	vldr	d5, [sp, #336]	; 0x150
    14d0:	vcmp.f64	d1, d5
    14d4:	vmrs	APSR_nzcv, fpscr
    14d8:	movgt	r1, #1
    14dc:	movle	r1, #0
    14e0:	str	r1, [r4]
    14e4:	b	22ac <eval_boolean+0x16a0>
    14e8:	ldr	r1, [r6, #16]
    14ec:	ldr	r2, [r1, #4]
    14f0:	cmp	r2, #2
    14f4:	beq	166c <eval_boolean+0xa60>
    14f8:	ldr	r3, [r6, #20]
    14fc:	ldr	ip, [r3, #4]
    1500:	cmp	ip, #2
    1504:	beq	166c <eval_boolean+0xa60>
    1508:	cmp	r2, #1
    150c:	beq	15f4 <eval_boolean+0x9e8>
    1510:	cmp	r2, #3
    1514:	bne	15d4 <eval_boolean+0x9c8>
    1518:	add	r2, sp, #188	; 0xbc
    151c:	add	r3, sp, #196	; 0xc4
    1520:	add	ip, sp, #204	; 0xcc
    1524:	str	ip, [sp]
    1528:	mov	r0, r5
    152c:	bl	4f8c <eval_string>
    1530:	cmp	r0, #0
    1534:	beq	1540 <eval_boolean+0x934>
    1538:	mvn	r0, #0
    153c:	b	22b0 <eval_boolean+0x16a4>
    1540:	ldr	r1, [r6, #20]
    1544:	add	r2, sp, #192	; 0xc0
    1548:	add	r3, sp, #200	; 0xc8
    154c:	add	r0, sp, #208	; 0xd0
    1550:	str	r0, [sp]
    1554:	mov	r0, r5
    1558:	bl	4f8c <eval_string>
    155c:	cmp	r0, #0
    1560:	beq	1574 <eval_boolean+0x968>
    1564:	ldr	r0, [sp, #204]	; 0xcc
    1568:	bl	0 <free>
    156c:	mvn	r0, #0
    1570:	b	22b0 <eval_boolean+0x16a4>
    1574:	ldr	r0, [sp, #188]	; 0xbc
    1578:	ldr	r1, [sp, #196]	; 0xc4
    157c:	ldr	r2, [sp, #204]	; 0xcc
    1580:	ldr	r3, [sp, #192]	; 0xc0
    1584:	ldr	r6, [sp, #200]	; 0xc8
    1588:	ldr	r5, [sp, #208]	; 0xd0
    158c:	str	r5, [sp, #4]
    1590:	str	r6, [sp]
    1594:	bl	70 <compare_strings>
    1598:	cmp	r0, #0
    159c:	movge	ip, #1
    15a0:	movlt	ip, #0
    15a4:	str	ip, [r4]
    15a8:	ldr	r0, [sp, #196]	; 0xc4
    15ac:	cmp	r0, #0
    15b0:	ble	15bc <eval_boolean+0x9b0>
    15b4:	ldr	r0, [sp, #204]	; 0xcc
    15b8:	bl	0 <free>
    15bc:	ldr	r0, [sp, #200]	; 0xc8
    15c0:	cmp	r0, #0
    15c4:	ble	22ac <eval_boolean+0x16a0>
    15c8:	ldr	r0, [sp, #208]	; 0xd0
    15cc:	bl	0 <free>
    15d0:	b	22ac <eval_boolean+0x16a0>
    15d4:	ldr	r0, [pc, #1456]	; 1b8c <eval_boolean+0xf80>
    15d8:	ldr	r1, [pc, #1456]	; 1b90 <eval_boolean+0xf84>
    15dc:	movw	r2, #854	; 0x356
    15e0:	ldr	r3, [pc, #1436]	; 1b84 <eval_boolean+0xf78>
    15e4:	bl	0 <__assert_fail>
    15e8:	mov	r0, #1
    15ec:	bl	0 <exit>
    15f0:	b	22ac <eval_boolean+0x16a0>
    15f4:	add	r2, sp, #376	; 0x178
    15f8:	mov	r0, r5
    15fc:	bl	3240 <eval_integer>
    1600:	cmp	r0, #0
    1604:	beq	1610 <eval_boolean+0xa04>
    1608:	mvn	r0, #0
    160c:	b	22b0 <eval_boolean+0x16a4>
    1610:	ldr	r1, [r6, #20]
    1614:	add	r2, sp, #384	; 0x180
    1618:	mov	r0, r5
    161c:	bl	3240 <eval_integer>
    1620:	cmp	r0, #0
    1624:	beq	1630 <eval_boolean+0xa24>
    1628:	mvn	r0, #0
    162c:	b	22b0 <eval_boolean+0x16a4>
    1630:	ldr	r2, [sp, #376]	; 0x178
    1634:	ldr	r0, [sp, #380]	; 0x17c
    1638:	ldr	ip, [sp, #384]	; 0x180
    163c:	ldr	r1, [sp, #388]	; 0x184
    1640:	cmp	r0, r1
    1644:	bne	1658 <eval_boolean+0xa4c>
    1648:	cmp	r2, ip
    164c:	movcs	r0, #1
    1650:	movcc	r0, #0
    1654:	b	1664 <eval_boolean+0xa58>
    1658:	cmp	r0, r1
    165c:	movgt	r0, #1
    1660:	movle	r0, #0
    1664:	str	r0, [r4]
    1668:	b	22ac <eval_boolean+0x16a0>
    166c:	ldr	r1, [r6, #16]
    1670:	add	r2, sp, #360	; 0x168
    1674:	mov	r0, r5
    1678:	bl	2300 <eval_float>
    167c:	cmp	r0, #0
    1680:	beq	168c <eval_boolean+0xa80>
    1684:	mvn	r0, #0
    1688:	b	22b0 <eval_boolean+0x16a4>
    168c:	ldr	r1, [r6, #20]
    1690:	add	r2, sp, #368	; 0x170
    1694:	mov	r0, r5
    1698:	bl	2300 <eval_float>
    169c:	cmp	r0, #0
    16a0:	beq	16ac <eval_boolean+0xaa0>
    16a4:	mvn	r0, #0
    16a8:	b	22b0 <eval_boolean+0x16a4>
    16ac:	vldr	d7, [sp, #360]	; 0x168
    16b0:	vldr	d5, [sp, #368]	; 0x170
    16b4:	vcmp.f64	d7, d5
    16b8:	vmrs	APSR_nzcv, fpscr
    16bc:	movge	r3, #1
    16c0:	movlt	r3, #0
    16c4:	str	r3, [r4]
    16c8:	b	22ac <eval_boolean+0x16a0>
    16cc:	cmp	r2, #42	; 0x2a
    16d0:	beq	1744 <eval_boolean+0xb38>
    16d4:	cmp	r2, #46	; 0x2e
    16d8:	beq	1714 <eval_boolean+0xb08>
    16dc:	cmp	r2, #47	; 0x2f
    16e0:	bne	1f7c <eval_boolean+0x1370>
    16e4:	ldr	r1, [r6, #16]
    16e8:	add	r2, sp, #480	; 0x1e0
    16ec:	mov	r0, r5
    16f0:	bl	2300 <eval_float>
    16f4:	cmp	r0, #0
    16f8:	beq	1704 <eval_boolean+0xaf8>
    16fc:	mvn	r0, #0
    1700:	b	22b0 <eval_boolean+0x16a4>
    1704:	vldr	d0, [sp, #480]	; 0x1e0
    1708:	bl	0 <coda_isMinInf>
    170c:	str	r0, [r4]
    1710:	b	22ac <eval_boolean+0x16a0>
    1714:	ldr	r1, [r6, #16]
    1718:	add	r2, sp, #464	; 0x1d0
    171c:	mov	r0, r5
    1720:	bl	2300 <eval_float>
    1724:	cmp	r0, #0
    1728:	beq	1734 <eval_boolean+0xb28>
    172c:	mvn	r0, #0
    1730:	b	22b0 <eval_boolean+0x16a4>
    1734:	vldr	d0, [sp, #464]	; 0x1d0
    1738:	bl	0 <coda_isInf>
    173c:	str	r0, [r4]
    1740:	b	22ac <eval_boolean+0x16a0>
    1744:	ldr	r1, [r6, #16]
    1748:	add	r2, sp, #48	; 0x30
    174c:	mov	r0, r5
    1750:	bl	c0c <eval_boolean>
    1754:	cmp	r0, #0
    1758:	beq	1764 <eval_boolean+0xb58>
    175c:	mvn	r0, #0
    1760:	b	22b0 <eval_boolean+0x16a4>
    1764:	ldr	r2, [sp, #48]	; 0x30
    1768:	cmp	r2, #0
    176c:	bne	1790 <eval_boolean+0xb84>
    1770:	ldr	r1, [r6, #24]
    1774:	mov	r2, r4
    1778:	mov	r0, r5
    177c:	bl	c0c <eval_boolean>
    1780:	cmp	r0, #0
    1784:	beq	22ac <eval_boolean+0x16a0>
    1788:	mvn	r0, #0
    178c:	b	22b0 <eval_boolean+0x16a4>
    1790:	ldr	r1, [r6, #20]
    1794:	mov	r2, r4
    1798:	mov	r0, r5
    179c:	bl	c0c <eval_boolean>
    17a0:	cmp	r0, #0
    17a4:	beq	22ac <eval_boolean+0x16a0>
    17a8:	mvn	r0, #0
    17ac:	b	22b0 <eval_boolean+0x16a4>
    17b0:	cmp	r2, #54	; 0x36
    17b4:	bcs	1c70 <eval_boolean+0x1064>
    17b8:	cmp	r2, #51	; 0x33
    17bc:	bcs	1830 <eval_boolean+0xc24>
    17c0:	cmp	r2, #48	; 0x30
    17c4:	beq	1800 <eval_boolean+0xbf4>
    17c8:	cmp	r2, #49	; 0x31
    17cc:	bne	1f7c <eval_boolean+0x1370>
    17d0:	ldr	r1, [r6, #16]
    17d4:	add	r2, sp, #472	; 0x1d8
    17d8:	mov	r0, r5
    17dc:	bl	2300 <eval_float>
    17e0:	cmp	r0, #0
    17e4:	beq	17f0 <eval_boolean+0xbe4>
    17e8:	mvn	r0, #0
    17ec:	b	22b0 <eval_boolean+0x16a4>
    17f0:	vldr	d0, [sp, #472]	; 0x1d8
    17f4:	bl	0 <coda_isPlusInf>
    17f8:	str	r0, [r4]
    17fc:	b	22ac <eval_boolean+0x16a0>
    1800:	ldr	r1, [r6, #16]
    1804:	add	r2, sp, #456	; 0x1c8
    1808:	mov	r0, r5
    180c:	bl	2300 <eval_float>
    1810:	cmp	r0, #0
    1814:	beq	1820 <eval_boolean+0xc14>
    1818:	mvn	r0, #0
    181c:	b	22b0 <eval_boolean+0x16a4>
    1820:	vldr	d0, [sp, #456]	; 0x1c8
    1824:	bl	0 <coda_isNaN>
    1828:	str	r0, [r4]
    182c:	b	22ac <eval_boolean+0x16a0>
    1830:	cmp	r2, #51	; 0x33
    1834:	beq	1a78 <eval_boolean+0xe6c>
    1838:	cmp	r2, #52	; 0x34
    183c:	bne	1a24 <eval_boolean+0xe18>
    1840:	ldr	r1, [r6, #16]
    1844:	ldr	r2, [r1, #4]
    1848:	cmp	r2, #2
    184c:	beq	19c4 <eval_boolean+0xdb8>
    1850:	ldr	ip, [r6, #20]
    1854:	ldr	r3, [ip, #4]
    1858:	cmp	r3, #2
    185c:	beq	19c4 <eval_boolean+0xdb8>
    1860:	cmp	r2, #1
    1864:	beq	194c <eval_boolean+0xd40>
    1868:	cmp	r2, #3
    186c:	bne	192c <eval_boolean+0xd20>
    1870:	add	r2, sp, #212	; 0xd4
    1874:	add	r3, sp, #220	; 0xdc
    1878:	add	ip, sp, #228	; 0xe4
    187c:	str	ip, [sp]
    1880:	mov	r0, r5
    1884:	bl	4f8c <eval_string>
    1888:	cmp	r0, #0
    188c:	beq	1898 <eval_boolean+0xc8c>
    1890:	mvn	r0, #0
    1894:	b	22b0 <eval_boolean+0x16a4>
    1898:	ldr	r1, [r6, #20]
    189c:	add	r2, sp, #216	; 0xd8
    18a0:	add	r3, sp, #224	; 0xe0
    18a4:	add	r0, sp, #232	; 0xe8
    18a8:	str	r0, [sp]
    18ac:	mov	r0, r5
    18b0:	bl	4f8c <eval_string>
    18b4:	cmp	r0, #0
    18b8:	beq	18cc <eval_boolean+0xcc0>
    18bc:	ldr	r0, [sp, #228]	; 0xe4
    18c0:	bl	0 <free>
    18c4:	mvn	r0, #0
    18c8:	b	22b0 <eval_boolean+0x16a4>
    18cc:	ldr	r0, [sp, #212]	; 0xd4
    18d0:	ldr	r1, [sp, #220]	; 0xdc
    18d4:	ldr	r2, [sp, #228]	; 0xe4
    18d8:	ldr	r3, [sp, #216]	; 0xd8
    18dc:	ldr	r5, [sp, #224]	; 0xe0
    18e0:	ldr	r6, [sp, #232]	; 0xe8
    18e4:	str	r6, [sp, #4]
    18e8:	str	r5, [sp]
    18ec:	bl	70 <compare_strings>
    18f0:	cmp	r0, #0
    18f4:	movlt	r3, #1
    18f8:	movge	r3, #0
    18fc:	str	r3, [r4]
    1900:	ldr	r0, [sp, #220]	; 0xdc
    1904:	cmp	r0, #0
    1908:	ble	1914 <eval_boolean+0xd08>
    190c:	ldr	r0, [sp, #228]	; 0xe4
    1910:	bl	0 <free>
    1914:	ldr	r0, [sp, #224]	; 0xe0
    1918:	cmp	r0, #0
    191c:	ble	22ac <eval_boolean+0x16a0>
    1920:	ldr	r0, [sp, #232]	; 0xe8
    1924:	bl	0 <free>
    1928:	b	22ac <eval_boolean+0x16a0>
    192c:	ldr	r0, [pc, #600]	; 1b8c <eval_boolean+0xf80>
    1930:	ldr	r1, [pc, #600]	; 1b90 <eval_boolean+0xf84>
    1934:	mov	r2, #916	; 0x394
    1938:	ldr	r3, [pc, #580]	; 1b84 <eval_boolean+0xf78>
    193c:	bl	0 <__assert_fail>
    1940:	mov	r0, #1
    1944:	bl	0 <exit>
    1948:	b	22ac <eval_boolean+0x16a0>
    194c:	add	r2, sp, #408	; 0x198
    1950:	mov	r0, r5
    1954:	bl	3240 <eval_integer>
    1958:	cmp	r0, #0
    195c:	beq	1968 <eval_boolean+0xd5c>
    1960:	mvn	r0, #0
    1964:	b	22b0 <eval_boolean+0x16a4>
    1968:	ldr	r1, [r6, #20]
    196c:	add	r2, sp, #416	; 0x1a0
    1970:	mov	r0, r5
    1974:	bl	3240 <eval_integer>
    1978:	cmp	r0, #0
    197c:	beq	1988 <eval_boolean+0xd7c>
    1980:	mvn	r0, #0
    1984:	b	22b0 <eval_boolean+0x16a4>
    1988:	ldr	r0, [sp, #408]	; 0x198
    198c:	ldr	r2, [sp, #412]	; 0x19c
    1990:	ldr	r1, [sp, #416]	; 0x1a0
    1994:	ldr	r3, [sp, #420]	; 0x1a4
    1998:	cmp	r2, r3
    199c:	bne	19b0 <eval_boolean+0xda4>
    19a0:	cmp	r0, r1
    19a4:	movcc	r3, #1
    19a8:	movcs	r3, #0
    19ac:	b	19bc <eval_boolean+0xdb0>
    19b0:	cmp	r2, r3
    19b4:	movlt	r3, #1
    19b8:	movge	r3, #0
    19bc:	str	r3, [r4]
    19c0:	b	22ac <eval_boolean+0x16a0>
    19c4:	ldr	r1, [r6, #16]
    19c8:	add	r2, sp, #392	; 0x188
    19cc:	mov	r0, r5
    19d0:	bl	2300 <eval_float>
    19d4:	cmp	r0, #0
    19d8:	beq	19e4 <eval_boolean+0xdd8>
    19dc:	mvn	r0, #0
    19e0:	b	22b0 <eval_boolean+0x16a4>
    19e4:	ldr	r1, [r6, #20]
    19e8:	add	r2, sp, #400	; 0x190
    19ec:	mov	r0, r5
    19f0:	bl	2300 <eval_float>
    19f4:	cmp	r0, #0
    19f8:	beq	1a04 <eval_boolean+0xdf8>
    19fc:	mvn	r0, #0
    1a00:	b	22b0 <eval_boolean+0x16a4>
    1a04:	vldr	d1, [sp, #392]	; 0x188
    1a08:	vldr	d0, [sp, #400]	; 0x190
    1a0c:	vcmp.f64	d1, d0
    1a10:	vmrs	APSR_nzcv, fpscr
    1a14:	movmi	r0, #1
    1a18:	movpl	r0, #0
    1a1c:	str	r0, [r4]
    1a20:	b	22ac <eval_boolean+0x16a0>
    1a24:	ldr	r1, [r6, #16]
    1a28:	mov	r2, r4
    1a2c:	mov	r0, r5
    1a30:	bl	c0c <eval_boolean>
    1a34:	cmp	r0, #0
    1a38:	beq	1a44 <eval_boolean+0xe38>
    1a3c:	mvn	r0, #0
    1a40:	b	22b0 <eval_boolean+0x16a4>
    1a44:	ldr	r1, [r4]
    1a48:	cmp	r1, #0
    1a4c:	bne	1a58 <eval_boolean+0xe4c>
    1a50:	mov	r0, #0
    1a54:	b	22b0 <eval_boolean+0x16a4>
    1a58:	ldr	r1, [r6, #20]
    1a5c:	mov	r2, r4
    1a60:	mov	r0, r5
    1a64:	bl	c0c <eval_boolean>
    1a68:	cmp	r0, #0
    1a6c:	beq	22ac <eval_boolean+0x16a0>
    1a70:	mvn	r0, #0
    1a74:	b	22b0 <eval_boolean+0x16a4>
    1a78:	ldr	r1, [r6, #16]
    1a7c:	ldr	r3, [r1, #4]
    1a80:	cmp	r3, #2
    1a84:	beq	1c10 <eval_boolean+0x1004>
    1a88:	ldr	r2, [r6, #20]
    1a8c:	ldr	r2, [r2, #4]
    1a90:	cmp	r2, #2
    1a94:	beq	1c10 <eval_boolean+0x1004>
    1a98:	cmp	r3, #1
    1a9c:	beq	1b98 <eval_boolean+0xf8c>
    1aa0:	cmp	r3, #3
    1aa4:	bne	1b64 <eval_boolean+0xf58>
    1aa8:	add	r2, sp, #236	; 0xec
    1aac:	add	r3, sp, #244	; 0xf4
    1ab0:	add	ip, sp, #252	; 0xfc
    1ab4:	str	ip, [sp]
    1ab8:	mov	r0, r5
    1abc:	bl	4f8c <eval_string>
    1ac0:	cmp	r0, #0
    1ac4:	beq	1ad0 <eval_boolean+0xec4>
    1ac8:	mvn	r0, #0
    1acc:	b	22b0 <eval_boolean+0x16a4>
    1ad0:	ldr	r1, [r6, #20]
    1ad4:	add	r2, sp, #240	; 0xf0
    1ad8:	add	r3, sp, #248	; 0xf8
    1adc:	add	r0, sp, #256	; 0x100
    1ae0:	str	r0, [sp]
    1ae4:	mov	r0, r5
    1ae8:	bl	4f8c <eval_string>
    1aec:	cmp	r0, #0
    1af0:	beq	1b04 <eval_boolean+0xef8>
    1af4:	ldr	r0, [sp, #252]	; 0xfc
    1af8:	bl	0 <free>
    1afc:	mvn	r0, #0
    1b00:	b	22b0 <eval_boolean+0x16a4>
    1b04:	ldr	r0, [sp, #236]	; 0xec
    1b08:	ldr	r1, [sp, #244]	; 0xf4
    1b0c:	ldr	r2, [sp, #252]	; 0xfc
    1b10:	ldr	r3, [sp, #240]	; 0xf0
    1b14:	ldr	r6, [sp, #248]	; 0xf8
    1b18:	ldr	r5, [sp, #256]	; 0x100
    1b1c:	str	r5, [sp, #4]
    1b20:	str	r6, [sp]
    1b24:	bl	70 <compare_strings>
    1b28:	cmp	r0, #0
    1b2c:	movle	r2, #1
    1b30:	movgt	r2, #0
    1b34:	str	r2, [r4]
    1b38:	ldr	r0, [sp, #244]	; 0xf4
    1b3c:	cmp	r0, #0
    1b40:	ble	1b4c <eval_boolean+0xf40>
    1b44:	ldr	r0, [sp, #252]	; 0xfc
    1b48:	bl	0 <free>
    1b4c:	ldr	r0, [sp, #248]	; 0xf8
    1b50:	cmp	r0, #0
    1b54:	ble	22ac <eval_boolean+0x16a0>
    1b58:	ldr	r0, [sp, #256]	; 0x100
    1b5c:	bl	0 <free>
    1b60:	b	22ac <eval_boolean+0x16a0>
    1b64:	ldr	r0, [pc, #32]	; 1b8c <eval_boolean+0xf80>
    1b68:	ldr	r1, [pc, #32]	; 1b90 <eval_boolean+0xf84>
    1b6c:	movw	r2, #978	; 0x3d2
    1b70:	ldr	r3, [pc, #12]	; 1b84 <eval_boolean+0xf78>
    1b74:	bl	0 <__assert_fail>
    1b78:	mov	r0, #1
    1b7c:	bl	0 <exit>
    1b80:	b	22ac <eval_boolean+0x16a0>
    1b84:	.word	0x00000d6c
    1b88:	.word	0x0000046b
    1b8c:	.word	0x00000bf8
    1b90:	.word	0x0000053b
    1b94:	.word	0x00000000
    1b98:	add	r2, sp, #440	; 0x1b8
    1b9c:	mov	r0, r5
    1ba0:	bl	3240 <eval_integer>
    1ba4:	cmp	r0, #0
    1ba8:	beq	1bb4 <eval_boolean+0xfa8>
    1bac:	mvn	r0, #0
    1bb0:	b	22b0 <eval_boolean+0x16a4>
    1bb4:	ldr	r1, [r6, #20]
    1bb8:	add	r2, sp, #448	; 0x1c0
    1bbc:	mov	r0, r5
    1bc0:	bl	3240 <eval_integer>
    1bc4:	cmp	r0, #0
    1bc8:	beq	1bd4 <eval_boolean+0xfc8>
    1bcc:	mvn	r0, #0
    1bd0:	b	22b0 <eval_boolean+0x16a4>
    1bd4:	ldr	r3, [sp, #440]	; 0x1b8
    1bd8:	ldr	ip, [sp, #444]	; 0x1bc
    1bdc:	ldr	r0, [sp, #448]	; 0x1c0
    1be0:	ldr	r1, [sp, #452]	; 0x1c4
    1be4:	cmp	ip, r1
    1be8:	bne	1bfc <eval_boolean+0xff0>
    1bec:	cmp	r3, r0
    1bf0:	movls	ip, #1
    1bf4:	movhi	ip, #0
    1bf8:	b	1c08 <eval_boolean+0xffc>
    1bfc:	cmp	ip, r1
    1c00:	movlt	ip, #1
    1c04:	movge	ip, #0
    1c08:	str	ip, [r4]
    1c0c:	b	22ac <eval_boolean+0x16a0>
    1c10:	ldr	r1, [r6, #16]
    1c14:	add	r2, sp, #424	; 0x1a8
    1c18:	mov	r0, r5
    1c1c:	bl	2300 <eval_float>
    1c20:	cmp	r0, #0
    1c24:	beq	1c30 <eval_boolean+0x1024>
    1c28:	mvn	r0, #0
    1c2c:	b	22b0 <eval_boolean+0x16a4>
    1c30:	ldr	r1, [r6, #20]
    1c34:	add	r2, sp, #432	; 0x1b0
    1c38:	mov	r0, r5
    1c3c:	bl	2300 <eval_float>
    1c40:	cmp	r0, #0
    1c44:	beq	1c50 <eval_boolean+0x1044>
    1c48:	mvn	r0, #0
    1c4c:	b	22b0 <eval_boolean+0x16a4>
    1c50:	vldr	d3, [sp, #424]	; 0x1a8
    1c54:	vldr	d2, [sp, #432]	; 0x1b0
    1c58:	vcmp.f64	d3, d2
    1c5c:	vmrs	APSR_nzcv, fpscr
    1c60:	movls	r3, #1
    1c64:	movhi	r3, #0
    1c68:	str	r3, [r4]
    1c6c:	b	22ac <eval_boolean+0x16a0>
    1c70:	cmp	r2, #71	; 0x47
    1c74:	bcs	1ef4 <eval_boolean+0x12e8>
    1c78:	cmp	r2, #54	; 0x36
    1c7c:	beq	1ea0 <eval_boolean+0x1294>
    1c80:	cmp	r2, #61	; 0x3d
    1c84:	beq	1cc8 <eval_boolean+0x10bc>
    1c88:	cmp	r2, #62	; 0x3e
    1c8c:	bne	1f7c <eval_boolean+0x1370>
    1c90:	ldr	r1, [r6, #16]
    1c94:	mov	r2, r4
    1c98:	mov	r0, r5
    1c9c:	bl	c0c <eval_boolean>
    1ca0:	cmp	r0, #0
    1ca4:	beq	1cb0 <eval_boolean+0x10a4>
    1ca8:	mvn	r0, #0
    1cac:	b	22b0 <eval_boolean+0x16a4>
    1cb0:	ldr	r1, [r4]
    1cb4:	cmp	r1, #0
    1cb8:	moveq	ip, #1
    1cbc:	movne	ip, #0
    1cc0:	str	ip, [r4]
    1cc4:	b	22ac <eval_boolean+0x16a0>
    1cc8:	ldr	r1, [r6, #16]
    1ccc:	ldr	r2, [r1, #4]
    1cd0:	cmp	r2, #2
    1cd4:	beq	1e40 <eval_boolean+0x1234>
    1cd8:	ldr	r3, [r6, #20]
    1cdc:	ldr	r3, [r3, #4]
    1ce0:	cmp	r3, #2
    1ce4:	beq	1e40 <eval_boolean+0x1234>
    1ce8:	cmp	r2, #1
    1cec:	beq	1dd4 <eval_boolean+0x11c8>
    1cf0:	cmp	r2, #3
    1cf4:	bne	1db4 <eval_boolean+0x11a8>
    1cf8:	add	r2, sp, #140	; 0x8c
    1cfc:	add	r3, sp, #148	; 0x94
    1d00:	add	r0, sp, #156	; 0x9c
    1d04:	str	r0, [sp]
    1d08:	mov	r0, r5
    1d0c:	bl	4f8c <eval_string>
    1d10:	cmp	r0, #0
    1d14:	beq	1d20 <eval_boolean+0x1114>
    1d18:	mvn	r0, #0
    1d1c:	b	22b0 <eval_boolean+0x16a4>
    1d20:	ldr	r1, [r6, #20]
    1d24:	add	r2, sp, #144	; 0x90
    1d28:	add	r3, sp, #152	; 0x98
    1d2c:	add	ip, sp, #160	; 0xa0
    1d30:	str	ip, [sp]
    1d34:	mov	r0, r5
    1d38:	bl	4f8c <eval_string>
    1d3c:	cmp	r0, #0
    1d40:	beq	1d54 <eval_boolean+0x1148>
    1d44:	ldr	r0, [sp, #156]	; 0x9c
    1d48:	bl	0 <free>
    1d4c:	mvn	r0, #0
    1d50:	b	22b0 <eval_boolean+0x16a4>
    1d54:	ldr	r0, [sp, #140]	; 0x8c
    1d58:	ldr	r1, [sp, #148]	; 0x94
    1d5c:	ldr	r2, [sp, #156]	; 0x9c
    1d60:	ldr	r3, [sp, #144]	; 0x90
    1d64:	ldr	ip, [sp, #152]	; 0x98
    1d68:	ldr	r6, [sp, #160]	; 0xa0
    1d6c:	str	r6, [sp, #4]
    1d70:	str	ip, [sp]
    1d74:	bl	70 <compare_strings>
    1d78:	cmp	r0, #0
    1d7c:	movne	r1, #1
    1d80:	moveq	r1, #0
    1d84:	str	r1, [r4]
    1d88:	ldr	r0, [sp, #148]	; 0x94
    1d8c:	cmp	r0, #0
    1d90:	ble	1d9c <eval_boolean+0x1190>
    1d94:	ldr	r0, [sp, #156]	; 0x9c
    1d98:	bl	0 <free>
    1d9c:	ldr	r0, [sp, #152]	; 0x98
    1da0:	cmp	r0, #0
    1da4:	ble	22ac <eval_boolean+0x16a0>
    1da8:	ldr	r0, [sp, #160]	; 0xa0
    1dac:	bl	0 <free>
    1db0:	b	22ac <eval_boolean+0x16a0>
    1db4:	ldr	r0, [pc, #1336]	; 22f4 <eval_boolean+0x16e8>
    1db8:	ldr	r1, [pc, #1336]	; 22f8 <eval_boolean+0x16ec>
    1dbc:	movw	r2, #730	; 0x2da
    1dc0:	ldr	r3, [pc, #1292]	; 22d4 <eval_boolean+0x16c8>
    1dc4:	bl	0 <__assert_fail>
    1dc8:	mov	r0, #1
    1dcc:	bl	0 <exit>
    1dd0:	b	22ac <eval_boolean+0x16a0>
    1dd4:	add	r2, sp, #312	; 0x138
    1dd8:	mov	r0, r5
    1ddc:	bl	3240 <eval_integer>
    1de0:	cmp	r0, #0
    1de4:	beq	1df0 <eval_boolean+0x11e4>
    1de8:	mvn	r0, #0
    1dec:	b	22b0 <eval_boolean+0x16a4>
    1df0:	ldr	r1, [r6, #20]
    1df4:	add	r2, sp, #320	; 0x140
    1df8:	mov	r0, r5
    1dfc:	bl	3240 <eval_integer>
    1e00:	cmp	r0, #0
    1e04:	beq	1e10 <eval_boolean+0x1204>
    1e08:	mvn	r0, #0
    1e0c:	b	22b0 <eval_boolean+0x16a4>
    1e10:	ldr	r2, [sp, #312]	; 0x138
    1e14:	ldr	r1, [sp, #316]	; 0x13c
    1e18:	ldr	ip, [sp, #320]	; 0x140
    1e1c:	ldr	r3, [sp, #324]	; 0x144
    1e20:	eor	r0, r1, r3
    1e24:	eor	r3, r2, ip
    1e28:	orr	ip, r0, r3
    1e2c:	cmp	ip, #0
    1e30:	movne	r3, #1
    1e34:	moveq	r3, #0
    1e38:	str	r3, [r4]
    1e3c:	b	22ac <eval_boolean+0x16a0>
    1e40:	ldr	r1, [r6, #16]
    1e44:	add	r2, sp, #296	; 0x128
    1e48:	mov	r0, r5
    1e4c:	bl	2300 <eval_float>
    1e50:	cmp	r0, #0
    1e54:	beq	1e60 <eval_boolean+0x1254>
    1e58:	mvn	r0, #0
    1e5c:	b	22b0 <eval_boolean+0x16a4>
    1e60:	ldr	r1, [r6, #20]
    1e64:	add	r2, sp, #304	; 0x130
    1e68:	mov	r0, r5
    1e6c:	bl	2300 <eval_float>
    1e70:	cmp	r0, #0
    1e74:	beq	1e80 <eval_boolean+0x1274>
    1e78:	mvn	r0, #0
    1e7c:	b	22b0 <eval_boolean+0x16a4>
    1e80:	vldr	d0, [sp, #296]	; 0x128
    1e84:	vldr	d1, [sp, #304]	; 0x130
    1e88:	vcmp.f64	d0, d1
    1e8c:	vmrs	APSR_nzcv, fpscr
    1e90:	movne	r1, #1
    1e94:	moveq	r1, #0
    1e98:	str	r1, [r4]
    1e9c:	b	22ac <eval_boolean+0x16a0>
    1ea0:	ldr	r1, [r6, #16]
    1ea4:	mov	r2, r4
    1ea8:	mov	r0, r5
    1eac:	bl	c0c <eval_boolean>
    1eb0:	cmp	r0, #0
    1eb4:	beq	1ec0 <eval_boolean+0x12b4>
    1eb8:	mvn	r0, #0
    1ebc:	b	22b0 <eval_boolean+0x16a4>
    1ec0:	ldr	r2, [r4]
    1ec4:	cmp	r2, #0
    1ec8:	beq	1ed4 <eval_boolean+0x12c8>
    1ecc:	mov	r0, #0
    1ed0:	b	22b0 <eval_boolean+0x16a4>
    1ed4:	ldr	r1, [r6, #20]
    1ed8:	mov	r2, r4
    1edc:	mov	r0, r5
    1ee0:	bl	c0c <eval_boolean>
    1ee4:	cmp	r0, #0
    1ee8:	beq	22ac <eval_boolean+0x16a0>
    1eec:	mvn	r0, #0
    1ef0:	b	22b0 <eval_boolean+0x16a4>
    1ef4:	cmp	r2, #71	; 0x47
    1ef8:	beq	2088 <eval_boolean+0x147c>
    1efc:	cmp	r2, #82	; 0x52
    1f00:	beq	1f9c <eval_boolean+0x1390>
    1f04:	cmp	r2, #86	; 0x56
    1f08:	bne	1f7c <eval_boolean+0x1370>
    1f0c:	ldr	r0, [r6, #12]
    1f10:	ldrb	r0, [r0]
    1f14:	sub	r7, r0, #105	; 0x69
    1f18:	lsl	r3, r7, #3
    1f1c:	add	r2, r5, r3
    1f20:	ldr	r8, [r2, #528]	; 0x210
    1f24:	ldr	r9, [r2, #532]	; 0x214
    1f28:	ldr	r1, [r6, #16]
    1f2c:	add	r2, r2, #528	; 0x210
    1f30:	mov	r0, r5
    1f34:	bl	3240 <eval_integer>
    1f38:	cmp	r0, #0
    1f3c:	beq	1f48 <eval_boolean+0x133c>
    1f40:	mvn	r0, #0
    1f44:	b	22b0 <eval_boolean+0x16a4>
    1f48:	ldr	r1, [r6, #20]
    1f4c:	mov	r2, r4
    1f50:	mov	r0, r5
    1f54:	bl	c0c <eval_boolean>
    1f58:	cmp	r0, #0
    1f5c:	beq	1f68 <eval_boolean+0x135c>
    1f60:	mvn	r0, #0
    1f64:	b	22b0 <eval_boolean+0x16a4>
    1f68:	lsl	r3, r7, #3
    1f6c:	add	r0, r5, r3
    1f70:	str	r8, [r0, #528]	; 0x210
    1f74:	str	r9, [r0, #532]	; 0x214
    1f78:	b	22ac <eval_boolean+0x16a0>
    1f7c:	ldr	r0, [pc, #880]	; 22f4 <eval_boolean+0x16e8>
    1f80:	ldr	r1, [pc, #880]	; 22f8 <eval_boolean+0x16ec>
    1f84:	movw	r2, #1379	; 0x563
    1f88:	ldr	r3, [pc, #836]	; 22d4 <eval_boolean+0x16c8>
    1f8c:	bl	0 <__assert_fail>
    1f90:	mov	r0, #1
    1f94:	bl	0 <exit>
    1f98:	b	22ac <eval_boolean+0x16a0>
    1f9c:	ldr	ip, [r5]
    1fa0:	cmp	ip, #0
    1fa4:	bne	1fbc <eval_boolean+0x13b0>
    1fa8:	ldr	r0, [pc, #812]	; 22dc <eval_boolean+0x16d0>
    1fac:	ldr	r1, [pc, #836]	; 22f8 <eval_boolean+0x16ec>
    1fb0:	movw	r2, #1288	; 0x508
    1fb4:	ldr	r3, [pc, #792]	; 22d4 <eval_boolean+0x16c8>
    1fb8:	bl	0 <__assert_fail>
    1fbc:	ldr	r0, [r5, #560]	; 0x230
    1fc0:	cmp	r0, #0
    1fc4:	beq	1fdc <eval_boolean+0x13d0>
    1fc8:	mvn	r0, #400	; 0x190
    1fcc:	ldr	r1, [pc, #772]	; 22d8 <eval_boolean+0x16cc>
    1fd0:	bl	0 <coda_set_error>
    1fd4:	mvn	r0, #0
    1fd8:	b	22b0 <eval_boolean+0x16a4>
    1fdc:	ldr	r2, [r5]
    1fe0:	ldr	r0, [r2]
    1fe4:	ldr	r1, [r6, #12]
    1fe8:	add	r2, sp, #60	; 0x3c
    1fec:	bl	0 <coda_product_variable_get_size>
    1ff0:	cmp	r0, #0
    1ff4:	beq	2000 <eval_boolean+0x13f4>
    1ff8:	mvn	r0, #0
    1ffc:	b	22b0 <eval_boolean+0x16a4>
    2000:	ldr	r2, [r6, #12]
    2004:	str	r2, [r5, #560]	; 0x230
    2008:	mov	r7, #0
    200c:	ldr	r2, [sp, #60]	; 0x3c
    2010:	cmp	r7, r2
    2014:	bge	2074 <eval_boolean+0x1468>
    2018:	asr	r2, r7, #31
    201c:	mov	r1, r7
    2020:	str	r1, [r5, #552]	; 0x228
    2024:	str	r2, [r5, #556]	; 0x22c
    2028:	ldr	r1, [r6, #16]
    202c:	add	r2, sp, #64	; 0x40
    2030:	mov	r0, r5
    2034:	bl	c0c <eval_boolean>
    2038:	cmp	r0, #0
    203c:	beq	2048 <eval_boolean+0x143c>
    2040:	mvn	r0, #0
    2044:	b	22b0 <eval_boolean+0x16a4>
    2048:	ldr	r3, [sp, #64]	; 0x40
    204c:	cmp	r3, #0
    2050:	beq	206c <eval_boolean+0x1460>
    2054:	mov	r0, #1
    2058:	str	r0, [r4]
    205c:	mov	ip, #0
    2060:	str	ip, [r5, #560]	; 0x230
    2064:	mov	r0, #0
    2068:	b	22b0 <eval_boolean+0x16a4>
    206c:	add	r7, r7, #1
    2070:	b	200c <eval_boolean+0x1400>
    2074:	mov	r3, #0
    2078:	str	r3, [r4]
    207c:	mov	r1, #0
    2080:	str	r1, [r5, #560]	; 0x230
    2084:	b	22ac <eval_boolean+0x16a0>
    2088:	ldr	r1, [r6, #16]
    208c:	add	r2, sp, #88	; 0x58
    2090:	add	r3, sp, #92	; 0x5c
    2094:	add	ip, sp, #96	; 0x60
    2098:	str	ip, [sp]
    209c:	mov	r0, r5
    20a0:	bl	4f8c <eval_string>
    20a4:	cmp	r0, #0
    20a8:	beq	20b4 <eval_boolean+0x14a8>
    20ac:	mvn	r0, #0
    20b0:	b	22b0 <eval_boolean+0x16a4>
    20b4:	ldr	r1, [r6, #20]
    20b8:	add	r2, sp, #76	; 0x4c
    20bc:	add	r3, sp, #80	; 0x50
    20c0:	add	r0, sp, #84	; 0x54
    20c4:	str	r0, [sp]
    20c8:	mov	r0, r5
    20cc:	bl	4f8c <eval_string>
    20d0:	cmp	r0, #0
    20d4:	beq	20f0 <eval_boolean+0x14e4>
    20d8:	ldr	r0, [sp, #96]	; 0x60
    20dc:	cmp	r0, #0
    20e0:	beq	20e8 <eval_boolean+0x14dc>
    20e4:	bl	0 <free>
    20e8:	mvn	r0, #0
    20ec:	b	22b0 <eval_boolean+0x16a4>
    20f0:	ldr	r2, [sp, #92]	; 0x5c
    20f4:	cmp	r2, #0
    20f8:	ble	213c <eval_boolean+0x1530>
    20fc:	ldr	r3, [sp, #96]	; 0x60
    2100:	ldr	r1, [sp, #88]	; 0x58
    2104:	add	ip, r1, r2
    2108:	mov	r1, #0
    210c:	strb	r1, [r3, ip]
    2110:	ldr	ip, [sp, #96]	; 0x60
    2114:	ldr	r0, [sp, #88]	; 0x58
    2118:	add	r0, ip, r0
    211c:	mov	r1, #36	; 0x24
    2120:	add	r2, sp, #68	; 0x44
    2124:	add	r3, sp, #72	; 0x48
    2128:	mov	ip, #0
    212c:	str	ip, [sp]
    2130:	bl	0 <coda_pcre_compile>
    2134:	mov	r5, r0
    2138:	b	215c <eval_boolean+0x1550>
    213c:	ldr	r0, [pc, #440]	; 22fc <eval_boolean+0x16f0>
    2140:	mov	r1, #36	; 0x24
    2144:	add	r2, sp, #68	; 0x44
    2148:	add	r3, sp, #72	; 0x48
    214c:	mov	ip, #0
    2150:	str	ip, [sp]
    2154:	bl	0 <coda_pcre_compile>
    2158:	mov	r5, r0
    215c:	ldr	r0, [sp, #96]	; 0x60
    2160:	cmp	r0, #0
    2164:	beq	216c <eval_boolean+0x1560>
    2168:	bl	0 <free>
    216c:	cmp	r5, #0
    2170:	bne	21a0 <eval_boolean+0x1594>
    2174:	mvn	r0, #400	; 0x190
    2178:	ldr	r1, [pc, #360]	; 22e8 <eval_boolean+0x16dc>
    217c:	ldr	r2, [sp, #68]	; 0x44
    2180:	ldr	r3, [sp, #72]	; 0x48
    2184:	bl	0 <coda_set_error>
    2188:	ldr	r0, [sp, #84]	; 0x54
    218c:	cmp	r0, #0
    2190:	beq	2198 <eval_boolean+0x158c>
    2194:	bl	0 <free>
    2198:	mvn	r0, #0
    219c:	b	22b0 <eval_boolean+0x16a4>
    21a0:	ldr	r1, [sp, #84]	; 0x54
    21a4:	cmp	r1, #0
    21a8:	bne	21ec <eval_boolean+0x15e0>
    21ac:	ldr	r0, [pc, #328]	; 22fc <eval_boolean+0x16f0>
    21b0:	bl	0 <strdup>
    21b4:	str	r0, [sp, #84]	; 0x54
    21b8:	cmp	r0, #0
    21bc:	bne	21ec <eval_boolean+0x15e0>
    21c0:	mvn	r0, #0
    21c4:	ldr	r1, [pc, #276]	; 22e0 <eval_boolean+0x16d4>
    21c8:	ldr	r2, [pc, #296]	; 22f8 <eval_boolean+0x16ec>
    21cc:	mov	r3, #1120	; 0x460
    21d0:	bl	0 <coda_set_error>
    21d4:	ldr	r0, [pc, #272]	; 22ec <eval_boolean+0x16e0>
    21d8:	ldr	ip, [r0]
    21dc:	mov	r0, r5
    21e0:	blx	ip
    21e4:	mvn	r0, #0
    21e8:	b	22b0 <eval_boolean+0x16a4>
    21ec:	mov	r1, #0
    21f0:	ldr	r0, [sp, #84]	; 0x54
    21f4:	ldr	r2, [sp, #76]	; 0x4c
    21f8:	add	r2, r0, r2
    21fc:	ldr	r3, [sp, #80]	; 0x50
    2200:	mov	r8, #0
    2204:	mov	ip, #0
    2208:	add	r6, sp, #488	; 0x1e8
    220c:	mov	r0, #48	; 0x30
    2210:	str	r0, [sp, #12]
    2214:	str	r6, [sp, #8]
    2218:	str	ip, [sp, #4]
    221c:	str	r8, [sp]
    2220:	mov	r0, r5
    2224:	bl	0 <coda_pcre_exec>
    2228:	mov	r6, r0
    222c:	ldr	r0, [sp, #84]	; 0x54
    2230:	bl	0 <free>
    2234:	ldr	ip, [pc, #176]	; 22ec <eval_boolean+0x16e0>
    2238:	ldr	ip, [ip]
    223c:	mov	r0, r5
    2240:	blx	ip
    2244:	cmn	r6, #1
    2248:	movne	r1, #1
    224c:	moveq	r1, #0
    2250:	mov	r0, #0
    2254:	cmp	r6, #0
    2258:	movlt	r1, r1
    225c:	movge	r1, r0
    2260:	cmp	r1, #0
    2264:	beq	2280 <eval_boolean+0x1674>
    2268:	mvn	r0, #400	; 0x190
    226c:	ldr	r1, [pc, #112]	; 22e4 <eval_boolean+0x16d8>
    2270:	mov	r2, r6
    2274:	bl	0 <coda_set_error>
    2278:	mvn	r0, #0
    227c:	b	22b0 <eval_boolean+0x16a4>
    2280:	cmp	r6, #0
    2284:	bne	229c <eval_boolean+0x1690>
    2288:	mvn	r0, #400	; 0x190
    228c:	ldr	r1, [pc, #92]	; 22f0 <eval_boolean+0x16e4>
    2290:	bl	0 <coda_set_error>
    2294:	mvn	r0, #0
    2298:	b	22b0 <eval_boolean+0x16a4>
    229c:	cmp	r6, #0
    22a0:	movgt	r1, #1
    22a4:	movle	r1, #0
    22a8:	str	r1, [r4]
    22ac:	mov	r0, #0
    22b0:	ldr	r4, [sp, #24]
    22b4:	ldr	r5, [sp, #28]
    22b8:	ldr	r6, [sp, #32]
    22bc:	ldr	r7, [sp, #36]	; 0x24
    22c0:	ldr	r8, [sp, #40]	; 0x28
    22c4:	ldr	r9, [sp, #44]	; 0x2c
    22c8:	ldr	lr, [sp, #20]
    22cc:	ldr	sp, [sp, #16]
    22d0:	bx	lr
    22d4:	.word	0x00000d6c
    22d8:	.word	0x0000020a
    22dc:	.word	0x0000046b
    22e0:	.word	0x00000bc5
    22e4:	.word	0x0000026a
    22e8:	.word	0x000006da
    22ec:	.word	0x00000000
    22f0:	.word	0x000004b9
    22f4:	.word	0x00000bf8
    22f8:	.word	0x0000053b
    22fc:	.word	0x00000d52

00002300 <eval_float>:
    2300:	mov	ip, sp
    2304:	sub	sp, sp, #2880	; 0xb40
    2308:	str	ip, [sp, #4]
    230c:	str	lr, [sp, #8]
    2310:	str	r4, [sp, #16]
    2314:	str	r5, [sp, #20]
    2318:	str	r6, [sp, #24]
    231c:	str	r7, [sp, #28]
    2320:	str	r8, [sp, #32]
    2324:	str	r9, [sp, #36]	; 0x24
    2328:	vstr	d8, [sp, #40]	; 0x28
    232c:	mov	r4, r2
    2330:	mov	r5, r0
    2334:	ldr	r2, [r1, #4]
    2338:	cmp	r2, #1
    233c:	bne	2374 <eval_float+0x74>
    2340:	add	r2, sp, #128	; 0x80
    2344:	mov	r0, r5
    2348:	bl	3240 <eval_integer>
    234c:	cmp	r0, #0
    2350:	beq	235c <eval_float+0x5c>
    2354:	mvn	r0, #0
    2358:	b	31f4 <eval_float+0xef4>
    235c:	ldr	r0, [sp, #128]	; 0x80
    2360:	ldr	r1, [sp, #132]	; 0x84
    2364:	bl	0 <__compcert_i64_stod>
    2368:	vstr	d0, [r4]
    236c:	mov	r0, #0
    2370:	b	31f4 <eval_float+0xef4>
    2374:	ldr	r0, [r1]
    2378:	cmp	r0, #19
    237c:	bne	2390 <eval_float+0x90>
    2380:	vldr	d5, [r1, #16]
    2384:	vstr	d5, [r4]
    2388:	mov	r0, #0
    238c:	b	31f4 <eval_float+0xef4>
    2390:	mov	r6, r1
    2394:	cmp	r0, #42	; 0x2a
    2398:	bcs	2b88 <eval_float+0x888>
    239c:	cmp	r0, #11
    23a0:	bcs	283c <eval_float+0x53c>
    23a4:	cmp	r0, #3
    23a8:	bcs	244c <eval_float+0x14c>
    23ac:	cmp	r0, #0
    23b0:	beq	2410 <eval_float+0x110>
    23b4:	cmp	r0, #1
    23b8:	bne	302c <eval_float+0xd2c>
    23bc:	ldr	r1, [r6, #16]
    23c0:	add	r2, sp, #144	; 0x90
    23c4:	mov	r0, r5
    23c8:	bl	2300 <eval_float>
    23cc:	cmp	r0, #0
    23d0:	beq	23dc <eval_float+0xdc>
    23d4:	mvn	r0, #0
    23d8:	b	31f4 <eval_float+0xef4>
    23dc:	ldr	r1, [r6, #20]
    23e0:	add	r2, sp, #152	; 0x98
    23e4:	mov	r0, r5
    23e8:	bl	2300 <eval_float>
    23ec:	cmp	r0, #0
    23f0:	beq	23fc <eval_float+0xfc>
    23f4:	mvn	r0, #0
    23f8:	b	31f4 <eval_float+0xef4>
    23fc:	vldr	d2, [sp, #144]	; 0x90
    2400:	vldr	d6, [sp, #152]	; 0x98
    2404:	vadd.f64	d3, d2, d6
    2408:	vstr	d3, [r4]
    240c:	b	31f0 <eval_float+0xef0>
    2410:	ldr	r1, [r6, #16]
    2414:	mov	r2, r4
    2418:	mov	r0, r5
    241c:	bl	2300 <eval_float>
    2420:	cmp	r0, #0
    2424:	beq	2430 <eval_float+0x130>
    2428:	mvn	r0, #0
    242c:	b	31f4 <eval_float+0xef4>
    2430:	vldr	d7, [r4]
    2434:	vcmp.f64	d7, #0.0
    2438:	vmrs	APSR_nzcv, fpscr
    243c:	bge	2444 <eval_float+0x144>
    2440:	vneg.f64	d7, d7
    2444:	vstr	d7, [r4]
    2448:	b	31f0 <eval_float+0xef0>
    244c:	cmp	r0, #3
    2450:	beq	26fc <eval_float+0x3fc>
    2454:	cmp	r0, #8
    2458:	beq	25b0 <eval_float+0x2b0>
    245c:	cmp	r0, #9
    2460:	bne	302c <eval_float+0xd2c>
    2464:	ldr	r2, [r5]
    2468:	cmp	r2, #0
    246c:	bne	2484 <eval_float+0x184>
    2470:	ldr	r0, [pc, #1576]	; 2aa0 <eval_float+0x7a0>
    2474:	ldr	r1, [pc, #1580]	; 2aa8 <eval_float+0x7a8>
    2478:	movw	r2, #1831	; 0x727
    247c:	ldr	r3, [pc, #1560]	; 2a9c <eval_float+0x79c>
    2480:	bl	0 <__assert_fail>
    2484:	add	r3, r5, #8
    2488:	mov	r2, r3
    248c:	add	r3, sp, #800	; 0x320
    2490:	mov	lr, #130	; 0x82
    2494:	ldr	ip, [r2], #4
    2498:	subs	lr, lr, #1
    249c:	str	ip, [r3], #4
    24a0:	bne	2494 <eval_float+0x194>
    24a4:	ldr	r1, [r6, #16]
    24a8:	mov	r0, r5
    24ac:	bl	6fa4 <eval_cursor>
    24b0:	cmp	r0, #0
    24b4:	beq	24c0 <eval_float+0x1c0>
    24b8:	mvn	r0, #0
    24bc:	b	31f4 <eval_float+0xef4>
    24c0:	add	r0, r5, #8
    24c4:	add	r1, sp, #52	; 0x34
    24c8:	bl	0 <coda_cursor_get_num_elements>
    24cc:	cmp	r0, #0
    24d0:	beq	24dc <eval_float+0x1dc>
    24d4:	mvn	r0, #0
    24d8:	b	31f4 <eval_float+0xef4>
    24dc:	bl	0 <coda_NaN>
    24e0:	vstr	d0, [r4]
    24e4:	ldr	r3, [sp, #52]	; 0x34
    24e8:	cmp	r3, #0
    24ec:	ble	258c <eval_float+0x28c>
    24f0:	add	r0, r5, #8
    24f4:	bl	0 <coda_cursor_goto_first_array_element>
    24f8:	cmp	r0, #0
    24fc:	beq	2508 <eval_float+0x208>
    2500:	mvn	r0, #0
    2504:	b	31f4 <eval_float+0xef4>
    2508:	mov	r7, #0
    250c:	ldr	r3, [sp, #52]	; 0x34
    2510:	cmp	r7, r3
    2514:	bge	258c <eval_float+0x28c>
    2518:	ldr	r1, [r6, #20]
    251c:	add	r2, sp, #120	; 0x78
    2520:	mov	r0, r5
    2524:	bl	2300 <eval_float>
    2528:	cmp	r0, #0
    252c:	beq	2538 <eval_float+0x238>
    2530:	mvn	r0, #0
    2534:	b	31f4 <eval_float+0xef4>
    2538:	cmp	r7, #0
    253c:	beq	2554 <eval_float+0x254>
    2540:	vldr	d6, [sp, #120]	; 0x78
    2544:	vldr	d1, [r4]
    2548:	vcmp.f64	d6, d1
    254c:	vmrs	APSR_nzcv, fpscr
    2550:	bpl	255c <eval_float+0x25c>
    2554:	vldr	d3, [sp, #120]	; 0x78
    2558:	vstr	d3, [r4]
    255c:	ldr	r0, [sp, #52]	; 0x34
    2560:	sub	r1, r0, #1
    2564:	cmp	r7, r1
    2568:	bge	2584 <eval_float+0x284>
    256c:	add	r0, r5, #8
    2570:	bl	0 <coda_cursor_goto_next_array_element>
    2574:	cmp	r0, #0
    2578:	beq	2584 <eval_float+0x284>
    257c:	mvn	r0, #0
    2580:	b	31f4 <eval_float+0xef4>
    2584:	add	r7, r7, #1
    2588:	b	250c <eval_float+0x20c>
    258c:	add	r0, r5, #8
    2590:	add	r2, sp, #800	; 0x320
    2594:	mov	r3, r0
    2598:	mov	lr, #130	; 0x82
    259c:	ldr	ip, [r2], #4
    25a0:	subs	lr, lr, #1
    25a4:	str	ip, [r3], #4
    25a8:	bne	259c <eval_float+0x29c>
    25ac:	b	31f0 <eval_float+0xef0>
    25b0:	ldr	r0, [r5]
    25b4:	cmp	r0, #0
    25b8:	bne	25d0 <eval_float+0x2d0>
    25bc:	ldr	r0, [pc, #1244]	; 2aa0 <eval_float+0x7a0>
    25c0:	ldr	r1, [pc, #1248]	; 2aa8 <eval_float+0x7a8>
    25c4:	movw	r2, #1783	; 0x6f7
    25c8:	ldr	r3, [pc, #1228]	; 2a9c <eval_float+0x79c>
    25cc:	bl	0 <__assert_fail>
    25d0:	add	r0, r5, #8
    25d4:	mov	r2, r0
    25d8:	add	r3, sp, #280	; 0x118
    25dc:	mov	lr, #130	; 0x82
    25e0:	ldr	ip, [r2], #4
    25e4:	subs	lr, lr, #1
    25e8:	str	ip, [r3], #4
    25ec:	bne	25e0 <eval_float+0x2e0>
    25f0:	ldr	r1, [r6, #16]
    25f4:	mov	r0, r5
    25f8:	bl	6fa4 <eval_cursor>
    25fc:	cmp	r0, #0
    2600:	beq	260c <eval_float+0x30c>
    2604:	mvn	r0, #0
    2608:	b	31f4 <eval_float+0xef4>
    260c:	add	r0, r5, #8
    2610:	add	r1, sp, #48	; 0x30
    2614:	bl	0 <coda_cursor_get_num_elements>
    2618:	cmp	r0, #0
    261c:	beq	2628 <eval_float+0x328>
    2620:	mvn	r0, #0
    2624:	b	31f4 <eval_float+0xef4>
    2628:	bl	0 <coda_NaN>
    262c:	vstr	d0, [r4]
    2630:	ldr	ip, [sp, #48]	; 0x30
    2634:	cmp	ip, #0
    2638:	ble	26d8 <eval_float+0x3d8>
    263c:	add	r0, r5, #8
    2640:	bl	0 <coda_cursor_goto_first_array_element>
    2644:	cmp	r0, #0
    2648:	beq	2654 <eval_float+0x354>
    264c:	mvn	r0, #0
    2650:	b	31f4 <eval_float+0xef4>
    2654:	mov	r7, #0
    2658:	ldr	r1, [sp, #48]	; 0x30
    265c:	cmp	r7, r1
    2660:	bge	26d8 <eval_float+0x3d8>
    2664:	ldr	r1, [r6, #20]
    2668:	add	r2, sp, #112	; 0x70
    266c:	mov	r0, r5
    2670:	bl	2300 <eval_float>
    2674:	cmp	r0, #0
    2678:	beq	2684 <eval_float+0x384>
    267c:	mvn	r0, #0
    2680:	b	31f4 <eval_float+0xef4>
    2684:	cmp	r7, #0
    2688:	beq	26a0 <eval_float+0x3a0>
    268c:	vldr	d3, [sp, #112]	; 0x70
    2690:	vldr	d1, [r4]
    2694:	vcmp.f64	d3, d1
    2698:	vmrs	APSR_nzcv, fpscr
    269c:	ble	26a8 <eval_float+0x3a8>
    26a0:	vldr	d1, [sp, #112]	; 0x70
    26a4:	vstr	d1, [r4]
    26a8:	ldr	r0, [sp, #48]	; 0x30
    26ac:	sub	r0, r0, #1
    26b0:	cmp	r7, r0
    26b4:	bge	26d0 <eval_float+0x3d0>
    26b8:	add	r0, r5, #8
    26bc:	bl	0 <coda_cursor_goto_next_array_element>
    26c0:	cmp	r0, #0
    26c4:	beq	26d0 <eval_float+0x3d0>
    26c8:	mvn	r0, #0
    26cc:	b	31f4 <eval_float+0xef4>
    26d0:	add	r7, r7, #1
    26d4:	b	2658 <eval_float+0x358>
    26d8:	add	r0, r5, #8
    26dc:	add	r2, sp, #280	; 0x118
    26e0:	mov	r3, r0
    26e4:	mov	lr, #130	; 0x82
    26e8:	ldr	ip, [r2], #4
    26ec:	subs	lr, lr, #1
    26f0:	str	ip, [r3], #4
    26f4:	bne	26e8 <eval_float+0x3e8>
    26f8:	b	31f0 <eval_float+0xef0>
    26fc:	ldr	ip, [r5]
    2700:	cmp	ip, #0
    2704:	bne	271c <eval_float+0x41c>
    2708:	ldr	r0, [pc, #912]	; 2aa0 <eval_float+0x7a0>
    270c:	ldr	r1, [pc, #916]	; 2aa8 <eval_float+0x7a8>
    2710:	movw	r2, #1738	; 0x6ca
    2714:	ldr	r3, [pc, #896]	; 2a9c <eval_float+0x79c>
    2718:	bl	0 <__assert_fail>
    271c:	add	r3, r5, #8
    2720:	mov	r2, r3
    2724:	add	r3, sp, #312	; 0x138
    2728:	add	r3, r3, #2048	; 0x800
    272c:	mov	lr, #130	; 0x82
    2730:	ldr	ip, [r2], #4
    2734:	subs	lr, lr, #1
    2738:	str	ip, [r3], #4
    273c:	bne	2730 <eval_float+0x430>
    2740:	ldr	r1, [r6, #16]
    2744:	mov	r0, r5
    2748:	bl	6fa4 <eval_cursor>
    274c:	cmp	r0, #0
    2750:	beq	275c <eval_float+0x45c>
    2754:	mvn	r0, #0
    2758:	b	31f4 <eval_float+0xef4>
    275c:	add	r0, r5, #8
    2760:	add	r1, sp, #96	; 0x60
    2764:	bl	0 <coda_cursor_get_num_elements>
    2768:	cmp	r0, #0
    276c:	beq	2778 <eval_float+0x478>
    2770:	mvn	r0, #0
    2774:	b	31f4 <eval_float+0xef4>
    2778:	vldr	d3, [pc, #812]	; 2aac <eval_float+0x7ac>
    277c:	vstr	d3, [r4]
    2780:	ldr	ip, [sp, #96]	; 0x60
    2784:	cmp	ip, #0
    2788:	ble	2814 <eval_float+0x514>
    278c:	add	r0, r5, #8
    2790:	bl	0 <coda_cursor_goto_first_array_element>
    2794:	cmp	r0, #0
    2798:	beq	27a4 <eval_float+0x4a4>
    279c:	mvn	r0, #0
    27a0:	b	31f4 <eval_float+0xef4>
    27a4:	mov	r7, #0
    27a8:	ldr	r3, [sp, #96]	; 0x60
    27ac:	cmp	r7, r3
    27b0:	bge	2814 <eval_float+0x514>
    27b4:	ldr	r1, [r6, #20]
    27b8:	add	r2, sp, #104	; 0x68
    27bc:	mov	r0, r5
    27c0:	bl	2300 <eval_float>
    27c4:	cmp	r0, #0
    27c8:	beq	27d4 <eval_float+0x4d4>
    27cc:	mvn	r0, #0
    27d0:	b	31f4 <eval_float+0xef4>
    27d4:	vldr	d1, [r4]
    27d8:	vldr	d3, [sp, #104]	; 0x68
    27dc:	vadd.f64	d2, d1, d3
    27e0:	vstr	d2, [r4]
    27e4:	ldr	r3, [sp, #96]	; 0x60
    27e8:	sub	r1, r3, #1
    27ec:	cmp	r7, r1
    27f0:	bge	280c <eval_float+0x50c>
    27f4:	add	r0, r5, #8
    27f8:	bl	0 <coda_cursor_goto_next_array_element>
    27fc:	cmp	r0, #0
    2800:	beq	280c <eval_float+0x50c>
    2804:	mvn	r0, #0
    2808:	b	31f4 <eval_float+0xef4>
    280c:	add	r7, r7, #1
    2810:	b	27a8 <eval_float+0x4a8>
    2814:	add	r0, r5, #8
    2818:	add	r2, sp, #312	; 0x138
    281c:	add	r2, r2, #2048	; 0x800
    2820:	mov	r3, r0
    2824:	mov	lr, #130	; 0x82
    2828:	ldr	ip, [r2], #4
    282c:	subs	lr, lr, #1
    2830:	str	ip, [r3], #4
    2834:	bne	2828 <eval_float+0x528>
    2838:	b	31f0 <eval_float+0xef0>
    283c:	cmp	r0, #24
    2840:	bcs	292c <eval_float+0x62c>
    2844:	cmp	r0, #11
    2848:	beq	2884 <eval_float+0x584>
    284c:	cmp	r0, #17
    2850:	bne	302c <eval_float+0xd2c>
    2854:	ldr	r1, [r6, #16]
    2858:	mov	r2, r4
    285c:	mov	r0, r5
    2860:	bl	2300 <eval_float>
    2864:	cmp	r0, #0
    2868:	beq	2874 <eval_float+0x574>
    286c:	mvn	r0, #0
    2870:	b	31f4 <eval_float+0xef4>
    2874:	vldr	d0, [r4]
    2878:	bl	0 <ceil>
    287c:	vstr	d0, [r4]
    2880:	b	31f0 <eval_float+0xef0>
    2884:	ldr	r3, [r5]
    2888:	cmp	r3, #0
    288c:	bne	28a4 <eval_float+0x5a4>
    2890:	ldr	r0, [pc, #520]	; 2aa0 <eval_float+0x7a0>
    2894:	ldr	r1, [pc, #524]	; 2aa8 <eval_float+0x7a8>
    2898:	movw	r2, #1878	; 0x756
    289c:	ldr	r3, [pc, #504]	; 2a9c <eval_float+0x79c>
    28a0:	bl	0 <__assert_fail>
    28a4:	add	r1, r5, #8
    28a8:	mov	r2, r1
    28ac:	add	r3, sp, #296	; 0x128
    28b0:	add	r3, r3, #1024	; 0x400
    28b4:	mov	lr, #130	; 0x82
    28b8:	ldr	ip, [r2], #4
    28bc:	subs	lr, lr, #1
    28c0:	str	ip, [r3], #4
    28c4:	bne	28b8 <eval_float+0x5b8>
    28c8:	ldr	r1, [r6, #16]
    28cc:	mov	r0, r5
    28d0:	bl	6fa4 <eval_cursor>
    28d4:	cmp	r0, #0
    28d8:	beq	28e4 <eval_float+0x5e4>
    28dc:	mvn	r0, #0
    28e0:	b	31f4 <eval_float+0xef4>
    28e4:	ldr	r1, [r6, #20]
    28e8:	mov	r2, r4
    28ec:	mov	r0, r5
    28f0:	bl	2300 <eval_float>
    28f4:	cmp	r0, #0
    28f8:	beq	2904 <eval_float+0x604>
    28fc:	mvn	r0, #0
    2900:	b	31f4 <eval_float+0xef4>
    2904:	add	r0, r5, #8
    2908:	add	r2, sp, #296	; 0x128
    290c:	add	r2, r2, #1024	; 0x400
    2910:	mov	r3, r0
    2914:	mov	lr, #130	; 0x82
    2918:	ldr	ip, [r2], #4
    291c:	subs	lr, lr, #1
    2920:	str	ip, [r3], #4
    2924:	bne	2918 <eval_float+0x618>
    2928:	b	31f0 <eval_float+0xef0>
    292c:	cmp	r0, #24
    2930:	beq	2b14 <eval_float+0x814>
    2934:	cmp	r0, #29
    2938:	beq	2974 <eval_float+0x674>
    293c:	cmp	r0, #30
    2940:	bne	302c <eval_float+0xd2c>
    2944:	ldr	r1, [r6, #16]
    2948:	mov	r2, r4
    294c:	mov	r0, r5
    2950:	bl	2300 <eval_float>
    2954:	cmp	r0, #0
    2958:	beq	2964 <eval_float+0x664>
    295c:	mvn	r0, #0
    2960:	b	31f4 <eval_float+0xef4>
    2964:	vldr	d0, [r4]
    2968:	bl	0 <floor>
    296c:	vstr	d0, [r4]
    2970:	b	31f0 <eval_float+0xef0>
    2974:	ldr	r1, [r6, #16]
    2978:	ldr	r2, [r1, #4]
    297c:	cmp	r2, #4
    2980:	beq	2a40 <eval_float+0x740>
    2984:	cmp	r2, #3
    2988:	bne	2a10 <eval_float+0x710>
    298c:	add	r2, sp, #56	; 0x38
    2990:	add	r3, sp, #60	; 0x3c
    2994:	add	ip, sp, #64	; 0x40
    2998:	str	ip, [sp]
    299c:	mov	r0, r5
    29a0:	bl	4f8c <eval_string>
    29a4:	cmp	r0, #0
    29a8:	beq	29b4 <eval_float+0x6b4>
    29ac:	mvn	r0, #0
    29b0:	b	31f4 <eval_float+0xef4>
    29b4:	ldr	r1, [sp, #60]	; 0x3c
    29b8:	cmp	r1, #0
    29bc:	bne	29d4 <eval_float+0x6d4>
    29c0:	mvn	r0, #102	; 0x66
    29c4:	ldr	r1, [pc, #216]	; 2aa4 <eval_float+0x7a4>
    29c8:	bl	0 <coda_set_error>
    29cc:	mvn	r0, #0
    29d0:	b	31f4 <eval_float+0xef4>
    29d4:	ldr	r0, [sp, #64]	; 0x40
    29d8:	ldr	r3, [sp, #56]	; 0x38
    29dc:	add	r0, r0, r3
    29e0:	mov	r3, #0
    29e4:	mov	r2, r4
    29e8:	bl	0 <coda_ascii_parse_double>
    29ec:	cmp	r0, #0
    29f0:	bge	2a04 <eval_float+0x704>
    29f4:	ldr	r0, [sp, #64]	; 0x40
    29f8:	bl	0 <free>
    29fc:	mvn	r0, #0
    2a00:	b	31f4 <eval_float+0xef4>
    2a04:	ldr	r0, [sp, #64]	; 0x40
    2a08:	bl	0 <free>
    2a0c:	b	31f0 <eval_float+0xef0>
    2a10:	add	r2, sp, #136	; 0x88
    2a14:	mov	r0, r5
    2a18:	bl	3240 <eval_integer>
    2a1c:	cmp	r0, #0
    2a20:	beq	2a2c <eval_float+0x72c>
    2a24:	mvn	r0, #0
    2a28:	b	31f4 <eval_float+0xef4>
    2a2c:	ldr	r0, [sp, #136]	; 0x88
    2a30:	ldr	r1, [sp, #140]	; 0x8c
    2a34:	bl	0 <__compcert_i64_stod>
    2a38:	vstr	d0, [r4]
    2a3c:	b	31f0 <eval_float+0xef0>
    2a40:	ldr	r2, [r5]
    2a44:	cmp	r2, #0
    2a48:	bne	2a60 <eval_float+0x760>
    2a4c:	ldr	r0, [pc, #76]	; 2aa0 <eval_float+0x7a0>
    2a50:	ldr	r1, [pc, #80]	; 2aa8 <eval_float+0x7a8>
    2a54:	movw	r2, #1418	; 0x58a
    2a58:	ldr	r3, [pc, #60]	; 2a9c <eval_float+0x79c>
    2a5c:	bl	0 <__assert_fail>
    2a60:	add	r3, r5, #8
    2a64:	mov	r2, r3
    2a68:	add	r3, sp, #1840	; 0x730
    2a6c:	mov	lr, #130	; 0x82
    2a70:	ldr	ip, [r2], #4
    2a74:	subs	lr, lr, #1
    2a78:	str	ip, [r3], #4
    2a7c:	bne	2a70 <eval_float+0x770>
    2a80:	ldr	r1, [r6, #16]
    2a84:	mov	r0, r5
    2a88:	bl	6fa4 <eval_cursor>
    2a8c:	cmp	r0, #0
    2a90:	beq	2ab4 <eval_float+0x7b4>
    2a94:	mvn	r0, #0
    2a98:	b	31f4 <eval_float+0xef4>
    2a9c:	.word	0x00000d79
    2aa0:	.word	0x0000046b
    2aa4:	.word	0x000000db
    2aa8:	.word	0x0000053b
	...
    2ab4:	bl	0 <coda_get_option_perform_conversions>
    2ab8:	mov	r6, r0
    2abc:	mov	r0, #0
    2ac0:	bl	0 <coda_set_option_perform_conversions>
    2ac4:	add	r0, r5, #8
    2ac8:	mov	r1, r4
    2acc:	bl	0 <coda_cursor_read_double>
    2ad0:	cmp	r0, #0
    2ad4:	beq	2ae8 <eval_float+0x7e8>
    2ad8:	mov	r0, r6
    2adc:	bl	0 <coda_set_option_perform_conversions>
    2ae0:	mvn	r0, #0
    2ae4:	b	31f4 <eval_float+0xef4>
    2ae8:	mov	r0, r6
    2aec:	bl	0 <coda_set_option_perform_conversions>
    2af0:	add	r0, r5, #8
    2af4:	add	r2, sp, #1840	; 0x730
    2af8:	mov	r3, r0
    2afc:	mov	lr, #130	; 0x82
    2b00:	ldr	ip, [r2], #4
    2b04:	subs	lr, lr, #1
    2b08:	str	ip, [r3], #4
    2b0c:	bne	2b00 <eval_float+0x800>
    2b10:	b	31f0 <eval_float+0xef0>
    2b14:	ldr	r1, [r6, #16]
    2b18:	add	r2, sp, #192	; 0xc0
    2b1c:	mov	r0, r5
    2b20:	bl	2300 <eval_float>
    2b24:	cmp	r0, #0
    2b28:	beq	2b34 <eval_float+0x834>
    2b2c:	mvn	r0, #0
    2b30:	b	31f4 <eval_float+0xef4>
    2b34:	ldr	r1, [r6, #20]
    2b38:	add	r2, sp, #200	; 0xc8
    2b3c:	mov	r0, r5
    2b40:	bl	2300 <eval_float>
    2b44:	cmp	r0, #0
    2b48:	beq	2b54 <eval_float+0x854>
    2b4c:	mvn	r0, #0
    2b50:	b	31f4 <eval_float+0xef4>
    2b54:	vldr	d6, [sp, #200]	; 0xc8
    2b58:	vcmp.f64	d6, #0.0
    2b5c:	vmrs	APSR_nzcv, fpscr
    2b60:	bne	2b78 <eval_float+0x878>
    2b64:	mvn	r0, #400	; 0x190
    2b68:	ldr	r1, [pc, #1708]	; 321c <eval_float+0xf1c>
    2b6c:	bl	0 <coda_set_error>
    2b70:	mvn	r0, #0
    2b74:	b	31f4 <eval_float+0xef4>
    2b78:	vldr	d4, [sp, #192]	; 0xc0
    2b7c:	vdiv.f64	d1, d4, d6
    2b80:	vstr	d1, [r4]
    2b84:	b	31f0 <eval_float+0xef0>
    2b88:	cmp	r0, #60	; 0x3c
    2b8c:	bcs	2dac <eval_float+0xaac>
    2b90:	cmp	r0, #57	; 0x39
    2b94:	bcs	2c74 <eval_float+0x974>
    2b98:	cmp	r0, #42	; 0x2a
    2b9c:	beq	2c08 <eval_float+0x908>
    2ba0:	cmp	r0, #56	; 0x38
    2ba4:	bne	302c <eval_float+0xd2c>
    2ba8:	ldr	r1, [r6, #16]
    2bac:	add	r2, sp, #248	; 0xf8
    2bb0:	mov	r0, r5
    2bb4:	bl	2300 <eval_float>
    2bb8:	cmp	r0, #0
    2bbc:	beq	2bc8 <eval_float+0x8c8>
    2bc0:	mvn	r0, #0
    2bc4:	b	31f4 <eval_float+0xef4>
    2bc8:	ldr	r1, [r6, #20]
    2bcc:	add	r2, sp, #256	; 0x100
    2bd0:	mov	r0, r5
    2bd4:	bl	2300 <eval_float>
    2bd8:	cmp	r0, #0
    2bdc:	beq	2be8 <eval_float+0x8e8>
    2be0:	mvn	r0, #0
    2be4:	b	31f4 <eval_float+0xef4>
    2be8:	vldr	d3, [sp, #248]	; 0xf8
    2bec:	vldr	d4, [sp, #256]	; 0x100
    2bf0:	vcmp.f64	d3, d4
    2bf4:	vmrs	APSR_nzcv, fpscr
    2bf8:	ble	2c00 <eval_float+0x900>
    2bfc:	vmov.f64	d4, d3
    2c00:	vstr	d4, [r4]
    2c04:	b	31f0 <eval_float+0xef0>
    2c08:	ldr	r1, [r6, #16]
    2c0c:	add	r2, sp, #92	; 0x5c
    2c10:	mov	r0, r5
    2c14:	bl	c0c <eval_boolean>
    2c18:	cmp	r0, #0
    2c1c:	beq	2c28 <eval_float+0x928>
    2c20:	mvn	r0, #0
    2c24:	b	31f4 <eval_float+0xef4>
    2c28:	ldr	ip, [sp, #92]	; 0x5c
    2c2c:	cmp	ip, #0
    2c30:	bne	2c54 <eval_float+0x954>
    2c34:	ldr	r1, [r6, #24]
    2c38:	mov	r2, r4
    2c3c:	mov	r0, r5
    2c40:	bl	2300 <eval_float>
    2c44:	cmp	r0, #0
    2c48:	beq	31f0 <eval_float+0xef0>
    2c4c:	mvn	r0, #0
    2c50:	b	31f4 <eval_float+0xef4>
    2c54:	ldr	r1, [r6, #20]
    2c58:	mov	r2, r4
    2c5c:	mov	r0, r5
    2c60:	bl	2300 <eval_float>
    2c64:	cmp	r0, #0
    2c68:	beq	31f0 <eval_float+0xef0>
    2c6c:	mvn	r0, #0
    2c70:	b	31f4 <eval_float+0xef4>
    2c74:	cmp	r0, #57	; 0x39
    2c78:	beq	2d4c <eval_float+0xa4c>
    2c7c:	cmp	r0, #58	; 0x3a
    2c80:	beq	2cd8 <eval_float+0x9d8>
    2c84:	ldr	r1, [r6, #16]
    2c88:	add	r2, sp, #176	; 0xb0
    2c8c:	mov	r0, r5
    2c90:	bl	2300 <eval_float>
    2c94:	cmp	r0, #0
    2c98:	beq	2ca4 <eval_float+0x9a4>
    2c9c:	mvn	r0, #0
    2ca0:	b	31f4 <eval_float+0xef4>
    2ca4:	ldr	r1, [r6, #20]
    2ca8:	add	r2, sp, #184	; 0xb8
    2cac:	mov	r0, r5
    2cb0:	bl	2300 <eval_float>
    2cb4:	cmp	r0, #0
    2cb8:	beq	2cc4 <eval_float+0x9c4>
    2cbc:	mvn	r0, #0
    2cc0:	b	31f4 <eval_float+0xef4>
    2cc4:	vldr	d0, [sp, #176]	; 0xb0
    2cc8:	vldr	d7, [sp, #184]	; 0xb8
    2ccc:	vmul.f64	d4, d0, d7
    2cd0:	vstr	d4, [r4]
    2cd4:	b	31f0 <eval_float+0xef0>
    2cd8:	ldr	r1, [r6, #16]
    2cdc:	add	r2, sp, #208	; 0xd0
    2ce0:	mov	r0, r5
    2ce4:	bl	2300 <eval_float>
    2ce8:	cmp	r0, #0
    2cec:	beq	2cf8 <eval_float+0x9f8>
    2cf0:	mvn	r0, #0
    2cf4:	b	31f4 <eval_float+0xef4>
    2cf8:	ldr	r1, [r6, #20]
    2cfc:	add	r2, sp, #216	; 0xd8
    2d00:	mov	r0, r5
    2d04:	bl	2300 <eval_float>
    2d08:	cmp	r0, #0
    2d0c:	beq	2d18 <eval_float+0xa18>
    2d10:	mvn	r0, #0
    2d14:	b	31f4 <eval_float+0xef4>
    2d18:	vldr	d1, [sp, #216]	; 0xd8
    2d1c:	vcmp.f64	d1, #0.0
    2d20:	vmrs	APSR_nzcv, fpscr
    2d24:	bne	2d3c <eval_float+0xa3c>
    2d28:	mvn	r0, #400	; 0x190
    2d2c:	ldr	r1, [pc, #1264]	; 3224 <eval_float+0xf24>
    2d30:	bl	0 <coda_set_error>
    2d34:	mvn	r0, #0
    2d38:	b	31f4 <eval_float+0xef4>
    2d3c:	vldr	d0, [sp, #208]	; 0xd0
    2d40:	bl	0 <fmod>
    2d44:	vstr	d0, [r4]
    2d48:	b	31f0 <eval_float+0xef0>
    2d4c:	ldr	r1, [r6, #16]
    2d50:	add	r2, sp, #264	; 0x108
    2d54:	mov	r0, r5
    2d58:	bl	2300 <eval_float>
    2d5c:	cmp	r0, #0
    2d60:	beq	2d6c <eval_float+0xa6c>
    2d64:	mvn	r0, #0
    2d68:	b	31f4 <eval_float+0xef4>
    2d6c:	ldr	r1, [r6, #20]
    2d70:	add	r2, sp, #272	; 0x110
    2d74:	mov	r0, r5
    2d78:	bl	2300 <eval_float>
    2d7c:	cmp	r0, #0
    2d80:	beq	2d8c <eval_float+0xa8c>
    2d84:	mvn	r0, #0
    2d88:	b	31f4 <eval_float+0xef4>
    2d8c:	vldr	d0, [sp, #264]	; 0x108
    2d90:	vldr	d1, [sp, #272]	; 0x110
    2d94:	vcmp.f64	d0, d1
    2d98:	vmrs	APSR_nzcv, fpscr
    2d9c:	bpl	2da4 <eval_float+0xaa4>
    2da0:	vmov.f64	d1, d0
    2da4:	vstr	d1, [r4]
    2da8:	b	31f0 <eval_float+0xef0>
    2dac:	cmp	r0, #78	; 0x4e
    2db0:	bcs	2fa4 <eval_float+0xca4>
    2db4:	cmp	r0, #60	; 0x3c
    2db8:	beq	2f74 <eval_float+0xc74>
    2dbc:	cmp	r0, #66	; 0x42
    2dc0:	beq	2e24 <eval_float+0xb24>
    2dc4:	cmp	r0, #72	; 0x48
    2dc8:	bne	302c <eval_float+0xd2c>
    2dcc:	ldr	r1, [r6, #16]
    2dd0:	mov	r2, r4
    2dd4:	mov	r0, r5
    2dd8:	bl	2300 <eval_float>
    2ddc:	cmp	r0, #0
    2de0:	beq	2dec <eval_float+0xaec>
    2de4:	mvn	r0, #0
    2de8:	b	31f4 <eval_float+0xef4>
    2dec:	vldr	d5, [r4]
    2df0:	vcmp.f64	d5, #0.0
    2df4:	vmrs	APSR_nzcv, fpscr
    2df8:	bmi	2e10 <eval_float+0xb10>
    2dfc:	vmov.f64	d0, #96	; 0x3f000000  0.5
    2e00:	vadd.f64	d0, d5, d0
    2e04:	bl	0 <floor>
    2e08:	vstr	d0, [r4]
    2e0c:	b	31f0 <eval_float+0xef0>
    2e10:	vmov.f64	d7, #96	; 0x3f000000  0.5
    2e14:	vsub.f64	d0, d5, d7
    2e18:	bl	0 <ceil>
    2e1c:	vstr	d0, [r4]
    2e20:	b	31f0 <eval_float+0xef0>
    2e24:	ldr	r1, [r6, #16]
    2e28:	add	r2, sp, #224	; 0xe0
    2e2c:	mov	r0, r5
    2e30:	bl	2300 <eval_float>
    2e34:	cmp	r0, #0
    2e38:	beq	2e44 <eval_float+0xb44>
    2e3c:	mvn	r0, #0
    2e40:	b	31f4 <eval_float+0xef4>
    2e44:	ldr	r1, [r6, #20]
    2e48:	ldr	ip, [r1, #4]
    2e4c:	cmp	ip, #1
    2e50:	bne	2f44 <eval_float+0xc44>
    2e54:	add	r2, sp, #240	; 0xf0
    2e58:	mov	r0, r5
    2e5c:	bl	3240 <eval_integer>
    2e60:	cmp	r0, #0
    2e64:	beq	2e70 <eval_float+0xb70>
    2e68:	mvn	r0, #0
    2e6c:	b	31f4 <eval_float+0xef4>
    2e70:	ldr	r3, [sp, #240]	; 0xf0
    2e74:	ldr	ip, [sp, #244]	; 0xf4
    2e78:	cmn	ip, #1
    2e7c:	bne	2e8c <eval_float+0xb8c>
    2e80:	cmn	r3, #64	; 0x40
    2e84:	bcs	2e94 <eval_float+0xb94>
    2e88:	b	2f20 <eval_float+0xc20>
    2e8c:	cmn	ip, #1
    2e90:	ble	2f20 <eval_float+0xc20>
    2e94:	ldr	r1, [sp, #240]	; 0xf0
    2e98:	ldr	r2, [sp, #244]	; 0xf4
    2e9c:	cmp	r2, #0
    2ea0:	bne	2eb4 <eval_float+0xbb4>
    2ea4:	cmp	r1, #64	; 0x40
    2ea8:	movls	r1, #1
    2eac:	movhi	r1, #0
    2eb0:	b	2ec0 <eval_float+0xbc0>
    2eb4:	cmp	r2, #0
    2eb8:	movlt	r1, #1
    2ebc:	movge	r1, #0
    2ec0:	cmp	r1, #0
    2ec4:	beq	2f20 <eval_float+0xc20>
    2ec8:	vldr	d0, [sp, #224]	; 0xe0
    2ecc:	ldr	r1, [sp, #240]	; 0xf0
    2ed0:	vmov.f64	d2, #112	; 0x3f800000  1.0
    2ed4:	cmp	r1, #0
    2ed8:	bge	2f00 <eval_float+0xc00>
    2edc:	mov	r0, r1
    2ee0:	add	r1, r0, #1
    2ee4:	cmp	r0, #0
    2ee8:	beq	2ef4 <eval_float+0xbf4>
    2eec:	vmul.f64	d2, d2, d0
    2ef0:	b	2edc <eval_float+0xbdc>
    2ef4:	vmov.f64	d7, #112	; 0x3f800000  1.0
    2ef8:	vdiv.f64	d2, d7, d2
    2efc:	b	2f18 <eval_float+0xc18>
    2f00:	mov	r2, r1
    2f04:	sub	r1, r2, #1
    2f08:	cmp	r2, #0
    2f0c:	beq	2f18 <eval_float+0xc18>
    2f10:	vmul.f64	d2, d2, d0
    2f14:	b	2f00 <eval_float+0xc00>
    2f18:	vstr	d2, [r4]
    2f1c:	b	31f0 <eval_float+0xef0>
    2f20:	vldr	d8, [sp, #224]	; 0xe0
    2f24:	ldr	r0, [sp, #240]	; 0xf0
    2f28:	ldr	r1, [sp, #244]	; 0xf4
    2f2c:	bl	0 <__compcert_i64_stod>
    2f30:	vmov.f64	d1, d0
    2f34:	vmov.f64	d0, d8
    2f38:	bl	0 <pow>
    2f3c:	vstr	d0, [r4]
    2f40:	b	31f0 <eval_float+0xef0>
    2f44:	add	r2, sp, #232	; 0xe8
    2f48:	mov	r0, r5
    2f4c:	bl	2300 <eval_float>
    2f50:	cmp	r0, #0
    2f54:	beq	2f60 <eval_float+0xc60>
    2f58:	mvn	r0, #0
    2f5c:	b	31f4 <eval_float+0xef4>
    2f60:	vldr	d0, [sp, #224]	; 0xe0
    2f64:	vldr	d1, [sp, #232]	; 0xe8
    2f68:	bl	0 <pow>
    2f6c:	vstr	d0, [r4]
    2f70:	b	31f0 <eval_float+0xef0>
    2f74:	ldr	r1, [r6, #16]
    2f78:	mov	r2, r4
    2f7c:	mov	r0, r5
    2f80:	bl	2300 <eval_float>
    2f84:	cmp	r0, #0
    2f88:	beq	2f94 <eval_float+0xc94>
    2f8c:	mvn	r0, #0
    2f90:	b	31f4 <eval_float+0xef4>
    2f94:	vldr	d2, [r4]
    2f98:	vneg.f64	d2, d2
    2f9c:	vstr	d2, [r4]
    2fa0:	b	31f0 <eval_float+0xef0>
    2fa4:	cmp	r0, #78	; 0x4e
    2fa8:	beq	31a0 <eval_float+0xea0>
    2fac:	cmp	r0, #79	; 0x4f
    2fb0:	beq	304c <eval_float+0xd4c>
    2fb4:	cmp	r0, #86	; 0x56
    2fb8:	bne	302c <eval_float+0xd2c>
    2fbc:	ldr	ip, [r6, #12]
    2fc0:	ldrb	r1, [ip]
    2fc4:	sub	r7, r1, #105	; 0x69
    2fc8:	lsl	r0, r7, #3
    2fcc:	add	ip, r5, r0
    2fd0:	ldr	r8, [ip, #528]	; 0x210
    2fd4:	ldr	r9, [ip, #532]	; 0x214
    2fd8:	ldr	r1, [r6, #16]
    2fdc:	add	r2, ip, #528	; 0x210
    2fe0:	mov	r0, r5
    2fe4:	bl	3240 <eval_integer>
    2fe8:	cmp	r0, #0
    2fec:	beq	2ff8 <eval_float+0xcf8>
    2ff0:	mvn	r0, #0
    2ff4:	b	31f4 <eval_float+0xef4>
    2ff8:	ldr	r1, [r6, #20]
    2ffc:	mov	r2, r4
    3000:	mov	r0, r5
    3004:	bl	2300 <eval_float>
    3008:	cmp	r0, #0
    300c:	beq	3018 <eval_float+0xd18>
    3010:	mvn	r0, #0
    3014:	b	31f4 <eval_float+0xef4>
    3018:	lsl	ip, r7, #3
    301c:	add	r2, r5, ip
    3020:	str	r8, [r2, #528]	; 0x210
    3024:	str	r9, [r2, #532]	; 0x214
    3028:	b	31f0 <eval_float+0xef0>
    302c:	ldr	r0, [pc, #508]	; 3230 <eval_float+0xf30>
    3030:	ldr	r1, [pc, #512]	; 3238 <eval_float+0xf38>
    3034:	movw	r2, #1909	; 0x775
    3038:	ldr	r3, [pc, #480]	; 3220 <eval_float+0xf20>
    303c:	bl	0 <__assert_fail>
    3040:	mov	r0, #1
    3044:	bl	0 <exit>
    3048:	b	31f0 <eval_float+0xef0>
    304c:	ldr	r1, [r6, #16]
    3050:	add	r2, sp, #68	; 0x44
    3054:	add	r3, sp, #76	; 0x4c
    3058:	add	ip, sp, #84	; 0x54
    305c:	str	ip, [sp]
    3060:	mov	r0, r5
    3064:	bl	4f8c <eval_string>
    3068:	cmp	r0, #0
    306c:	beq	3078 <eval_float+0xd78>
    3070:	mvn	r0, #0
    3074:	b	31f4 <eval_float+0xef4>
    3078:	ldr	r0, [sp, #76]	; 0x4c
    307c:	cmp	r0, #0
    3080:	bge	3098 <eval_float+0xd98>
    3084:	mvn	r0, #400	; 0x190
    3088:	ldr	r1, [pc, #428]	; 323c <eval_float+0xf3c>
    308c:	bl	0 <coda_set_error>
    3090:	mvn	r0, #0
    3094:	b	31f4 <eval_float+0xef4>
    3098:	cmp	r0, #0
    309c:	bne	30b4 <eval_float+0xdb4>
    30a0:	mvn	r0, #400	; 0x190
    30a4:	ldr	r1, [pc, #380]	; 3228 <eval_float+0xf28>
    30a8:	bl	0 <coda_set_error>
    30ac:	mvn	r0, #0
    30b0:	b	31f4 <eval_float+0xef4>
    30b4:	ldr	r1, [sp, #84]	; 0x54
    30b8:	ldr	ip, [sp, #68]	; 0x44
    30bc:	add	r3, ip, r0
    30c0:	mov	ip, #0
    30c4:	strb	ip, [r1, r3]
    30c8:	ldr	r1, [r6, #20]
    30cc:	add	r2, sp, #72	; 0x48
    30d0:	add	r3, sp, #80	; 0x50
    30d4:	add	ip, sp, #88	; 0x58
    30d8:	str	ip, [sp]
    30dc:	mov	r0, r5
    30e0:	bl	4f8c <eval_string>
    30e4:	cmp	r0, #0
    30e8:	beq	30fc <eval_float+0xdfc>
    30ec:	ldr	r0, [sp, #84]	; 0x54
    30f0:	bl	0 <free>
    30f4:	mvn	r0, #0
    30f8:	b	31f4 <eval_float+0xef4>
    30fc:	ldr	r3, [sp, #80]	; 0x50
    3100:	cmp	r3, #0
    3104:	bge	311c <eval_float+0xe1c>
    3108:	mvn	r0, #400	; 0x190
    310c:	ldr	r1, [pc, #280]	; 322c <eval_float+0xf2c>
    3110:	bl	0 <coda_set_error>
    3114:	mvn	r0, #0
    3118:	b	31f4 <eval_float+0xef4>
    311c:	cmp	r3, #0
    3120:	bne	3138 <eval_float+0xe38>
    3124:	mvn	r0, #400	; 0x190
    3128:	ldr	r1, [pc, #260]	; 3234 <eval_float+0xf34>
    312c:	bl	0 <coda_set_error>
    3130:	mvn	r0, #0
    3134:	b	31f4 <eval_float+0xef4>
    3138:	ldr	r0, [sp, #88]	; 0x58
    313c:	ldr	ip, [sp, #72]	; 0x48
    3140:	add	r3, ip, r3
    3144:	mov	r2, #0
    3148:	strb	r2, [r0, r3]
    314c:	ldr	r2, [sp, #88]	; 0x58
    3150:	ldr	r1, [sp, #72]	; 0x48
    3154:	add	r0, r2, r1
    3158:	ldr	r2, [sp, #84]	; 0x54
    315c:	ldr	r3, [sp, #68]	; 0x44
    3160:	add	r1, r2, r3
    3164:	mov	r2, r4
    3168:	bl	0 <coda_time_string_to_double>
    316c:	cmp	r0, #0
    3170:	beq	318c <eval_float+0xe8c>
    3174:	ldr	r0, [sp, #88]	; 0x58
    3178:	bl	0 <free>
    317c:	ldr	r0, [sp, #84]	; 0x54
    3180:	bl	0 <free>
    3184:	mvn	r0, #0
    3188:	b	31f4 <eval_float+0xef4>
    318c:	ldr	r0, [sp, #88]	; 0x58
    3190:	bl	0 <free>
    3194:	ldr	r0, [sp, #84]	; 0x54
    3198:	bl	0 <free>
    319c:	b	31f0 <eval_float+0xef0>
    31a0:	ldr	r1, [r6, #16]
    31a4:	add	r2, sp, #160	; 0xa0
    31a8:	mov	r0, r5
    31ac:	bl	2300 <eval_float>
    31b0:	cmp	r0, #0
    31b4:	beq	31c0 <eval_float+0xec0>
    31b8:	mvn	r0, #0
    31bc:	b	31f4 <eval_float+0xef4>
    31c0:	ldr	r1, [r6, #20]
    31c4:	add	r2, sp, #168	; 0xa8
    31c8:	mov	r0, r5
    31cc:	bl	2300 <eval_float>
    31d0:	cmp	r0, #0
    31d4:	beq	31e0 <eval_float+0xee0>
    31d8:	mvn	r0, #0
    31dc:	b	31f4 <eval_float+0xef4>
    31e0:	vldr	d6, [sp, #160]	; 0xa0
    31e4:	vldr	d0, [sp, #168]	; 0xa8
    31e8:	vsub.f64	d4, d6, d0
    31ec:	vstr	d4, [r4]
    31f0:	mov	r0, #0
    31f4:	ldr	r4, [sp, #16]
    31f8:	ldr	r5, [sp, #20]
    31fc:	ldr	r6, [sp, #24]
    3200:	ldr	r7, [sp, #28]
    3204:	ldr	r8, [sp, #32]
    3208:	ldr	r9, [sp, #36]	; 0x24
    320c:	vldr	d8, [sp, #40]	; 0x28
    3210:	ldr	lr, [sp, #8]
    3214:	add	sp, sp, #2880	; 0xb40
    3218:	bx	lr
    321c:	.word	0x00000a05
    3220:	.word	0x00000d79
    3224:	.word	0x000005d6
    3228:	.word	0x000001af
    322c:	.word	0x00000a57
    3230:	.word	0x00000bf8
    3234:	.word	0x00000c5a
    3238:	.word	0x0000053b
    323c:	.word	0x00000b84

00003240 <eval_integer>:
    3240:	mov	ip, sp
    3244:	sub	sp, sp, #9216	; 0x2400
    3248:	str	ip, [sp, #4]
    324c:	str	lr, [sp, #8]
    3250:	str	r4, [sp, #16]
    3254:	str	r5, [sp, #20]
    3258:	str	r6, [sp, #24]
    325c:	str	r7, [sp, #28]
    3260:	str	r8, [sp, #32]
    3264:	str	r9, [sp, #36]	; 0x24
    3268:	mov	r4, r2
    326c:	mov	r6, r0
    3270:	ldr	r0, [r1]
    3274:	cmp	r0, #20
    3278:	bne	3294 <eval_integer+0x54>
    327c:	ldr	r3, [r1, #16]
    3280:	ldr	r0, [r1, #20]
    3284:	str	r3, [r4]
    3288:	str	r0, [r4, #4]
    328c:	mov	r0, #0
    3290:	b	4f44 <eval_integer+0x1d04>
    3294:	mov	r5, r1
    3298:	cmp	r0, #87	; 0x57
    329c:	bcs	4f24 <eval_integer+0x1ce4>
    32a0:	add	pc, pc, r0, lsl #2
    32a4:	nop	{0}
    32a8:	b	3630 <eval_integer+0x3f0>
    32ac:	b	3674 <eval_integer+0x434>
    32b0:	b	38b8 <eval_integer+0x678>
    32b4:	b	3c6c <eval_integer+0xa2c>
    32b8:	b	4f24 <eval_integer+0x1ce4>
    32bc:	b	3b04 <eval_integer+0x8c4>
    32c0:	b	4f24 <eval_integer+0x1ce4>
    32c4:	b	40c8 <eval_integer+0xe88>
    32c8:	b	3dbc <eval_integer+0xb7c>
    32cc:	b	3f44 <eval_integer+0xd04>
    32d0:	b	4f24 <eval_integer+0x1ce4>
    32d4:	b	4e14 <eval_integer+0x1bd4>
    32d8:	b	496c <eval_integer+0x172c>
    32dc:	b	47e4 <eval_integer+0x15a4>
    32e0:	b	4a0c <eval_integer+0x17cc>
    32e4:	b	48a8 <eval_integer+0x1668>
    32e8:	b	4f24 <eval_integer+0x1ce4>
    32ec:	b	4f24 <eval_integer+0x1ce4>
    32f0:	b	4f24 <eval_integer+0x1ce4>
    32f4:	b	4f24 <eval_integer+0x1ce4>
    32f8:	b	4f24 <eval_integer+0x1ce4>
    32fc:	b	4f24 <eval_integer+0x1ce4>
    3300:	b	4f24 <eval_integer+0x1ce4>
    3304:	b	452c <eval_integer+0x12ec>
    3308:	b	37a8 <eval_integer+0x568>
    330c:	b	4f24 <eval_integer+0x1ce4>
    3310:	b	4f24 <eval_integer+0x1ce4>
    3314:	b	4ab0 <eval_integer+0x1870>
    3318:	b	4f24 <eval_integer+0x1ce4>
    331c:	b	4f24 <eval_integer+0x1ce4>
    3320:	b	4f24 <eval_integer+0x1ce4>
    3324:	b	4f24 <eval_integer+0x1ce4>
    3328:	b	4f24 <eval_integer+0x1ce4>
    332c:	b	4f24 <eval_integer+0x1ce4>
    3330:	b	4f24 <eval_integer+0x1ce4>
    3334:	b	4f24 <eval_integer+0x1ce4>
    3338:	b	4f24 <eval_integer+0x1ce4>
    333c:	b	4f24 <eval_integer+0x1ce4>
    3340:	b	4f24 <eval_integer+0x1ce4>
    3344:	b	4f24 <eval_integer+0x1ce4>
    3348:	b	4f24 <eval_integer+0x1ce4>
    334c:	b	4f24 <eval_integer+0x1ce4>
    3350:	b	3a98 <eval_integer+0x858>
    3354:	b	4b44 <eval_integer+0x1904>
    3358:	b	4bf4 <eval_integer+0x19b4>
    335c:	b	3404 <eval_integer+0x1c4>
    3360:	b	4f24 <eval_integer+0x1ce4>
    3364:	b	4f24 <eval_integer+0x1ce4>
    3368:	b	4f24 <eval_integer+0x1ce4>
    336c:	b	4f24 <eval_integer+0x1ce4>
    3370:	b	4418 <eval_integer+0x11d8>
    3374:	b	4f24 <eval_integer+0x1ce4>
    3378:	b	4f24 <eval_integer+0x1ce4>
    337c:	b	4f24 <eval_integer+0x1ce4>
    3380:	b	4f24 <eval_integer+0x1ce4>
    3384:	b	4f24 <eval_integer+0x1ce4>
    3388:	b	3980 <eval_integer+0x740>
    338c:	b	3a0c <eval_integer+0x7cc>
    3390:	b	3830 <eval_integer+0x5f0>
    3394:	b	3740 <eval_integer+0x500>
    3398:	b	35f4 <eval_integer+0x3b4>
    339c:	b	4f24 <eval_integer+0x1ce4>
    33a0:	b	4f24 <eval_integer+0x1ce4>
    33a4:	b	4664 <eval_integer+0x1424>
    33a8:	b	4734 <eval_integer+0x14f4>
    33ac:	b	391c <eval_integer+0x6dc>
    33b0:	b	4f24 <eval_integer+0x1ce4>
    33b4:	b	4f24 <eval_integer+0x1ce4>
    33b8:	b	4f24 <eval_integer+0x1ce4>
    33bc:	b	4f24 <eval_integer+0x1ce4>
    33c0:	b	4af0 <eval_integer+0x18b0>
    33c4:	b	4f24 <eval_integer+0x1ce4>
    33c8:	b	4f24 <eval_integer+0x1ce4>
    33cc:	b	4f24 <eval_integer+0x1ce4>
    33d0:	b	4f24 <eval_integer+0x1ce4>
    33d4:	b	4f24 <eval_integer+0x1ce4>
    33d8:	b	4f24 <eval_integer+0x1ce4>
    33dc:	b	4f24 <eval_integer+0x1ce4>
    33e0:	b	36dc <eval_integer+0x49c>
    33e4:	b	4f24 <eval_integer+0x1ce4>
    33e8:	b	4f24 <eval_integer+0x1ce4>
    33ec:	b	4254 <eval_integer+0x1014>
    33f0:	b	4f24 <eval_integer+0x1ce4>
    33f4:	b	4c20 <eval_integer+0x19e0>
    33f8:	b	4f24 <eval_integer+0x1ce4>
    33fc:	b	4d18 <eval_integer+0x1ad8>
    3400:	b	4eb4 <eval_integer+0x1c74>
    3404:	ldr	r1, [r5, #16]
    3408:	ldr	r3, [r1, #4]
    340c:	cmp	r3, #4
    3410:	bne	3538 <eval_integer+0x2f8>
    3414:	ldr	r0, [r6]
    3418:	cmp	r0, #0
    341c:	bne	3434 <eval_integer+0x1f4>
    3420:	ldr	r0, [pc, #3864]	; 4340 <eval_integer+0x1100>
    3424:	ldr	r1, [pc, #3876]	; 4350 <eval_integer+0x1110>
    3428:	mov	r2, #1936	; 0x790
    342c:	ldr	r3, [pc, #3860]	; 4348 <eval_integer+0x1108>
    3430:	bl	0 <__assert_fail>
    3434:	add	r3, r6, #8
    3438:	mov	r2, r3
    343c:	add	r3, sp, #896	; 0x380
    3440:	mov	lr, #130	; 0x82
    3444:	ldr	ip, [r2], #4
    3448:	subs	lr, lr, #1
    344c:	str	ip, [r3], #4
    3450:	bne	3444 <eval_integer+0x204>
    3454:	ldr	r1, [r5, #16]
    3458:	mov	r0, r6
    345c:	bl	6fa4 <eval_cursor>
    3460:	cmp	r0, #0
    3464:	beq	3470 <eval_integer+0x230>
    3468:	mvn	r0, #0
    346c:	b	4f44 <eval_integer+0x1d04>
    3470:	bl	0 <coda_get_option_perform_conversions>
    3474:	mov	r5, r0
    3478:	mov	r0, #0
    347c:	bl	0 <coda_set_option_perform_conversions>
    3480:	add	r0, r6, #8
    3484:	add	r1, sp, #52	; 0x34
    3488:	bl	0 <coda_cursor_get_read_type>
    348c:	cmp	r0, #0
    3490:	beq	34a4 <eval_integer+0x264>
    3494:	mov	r0, r5
    3498:	bl	0 <coda_set_option_perform_conversions>
    349c:	mvn	r0, #0
    34a0:	b	4f44 <eval_integer+0x1d04>
    34a4:	ldr	r1, [sp, #52]	; 0x34
    34a8:	cmp	r1, #7
    34ac:	bne	34e8 <eval_integer+0x2a8>
    34b0:	add	r0, r6, #8
    34b4:	add	r1, sp, #160	; 0xa0
    34b8:	bl	0 <coda_cursor_read_uint64>
    34bc:	cmp	r0, #0
    34c0:	beq	34d4 <eval_integer+0x294>
    34c4:	mov	r0, r5
    34c8:	bl	0 <coda_set_option_perform_conversions>
    34cc:	mvn	r0, #0
    34d0:	b	4f44 <eval_integer+0x1d04>
    34d4:	ldr	ip, [sp, #160]	; 0xa0
    34d8:	ldr	r3, [sp, #164]	; 0xa4
    34dc:	str	ip, [r4]
    34e0:	str	r3, [r4, #4]
    34e4:	b	350c <eval_integer+0x2cc>
    34e8:	add	r0, r6, #8
    34ec:	mov	r1, r4
    34f0:	bl	0 <coda_cursor_read_int64>
    34f4:	cmp	r0, #0
    34f8:	beq	350c <eval_integer+0x2cc>
    34fc:	mov	r0, r5
    3500:	bl	0 <coda_set_option_perform_conversions>
    3504:	mvn	r0, #0
    3508:	b	4f44 <eval_integer+0x1d04>
    350c:	mov	r0, r5
    3510:	bl	0 <coda_set_option_perform_conversions>
    3514:	add	r0, r6, #8
    3518:	add	r2, sp, #896	; 0x380
    351c:	mov	r3, r0
    3520:	mov	lr, #130	; 0x82
    3524:	ldr	ip, [r2], #4
    3528:	subs	lr, lr, #1
    352c:	str	ip, [r3], #4
    3530:	bne	3524 <eval_integer+0x2e4>
    3534:	b	4f40 <eval_integer+0x1d00>
    3538:	cmp	r3, #0
    353c:	beq	35c4 <eval_integer+0x384>
    3540:	add	r2, sp, #60	; 0x3c
    3544:	add	r3, sp, #64	; 0x40
    3548:	add	ip, sp, #68	; 0x44
    354c:	str	ip, [sp]
    3550:	mov	r0, r6
    3554:	bl	4f8c <eval_string>
    3558:	cmp	r0, #0
    355c:	beq	3568 <eval_integer+0x328>
    3560:	mvn	r0, #0
    3564:	b	4f44 <eval_integer+0x1d04>
    3568:	ldr	r1, [sp, #64]	; 0x40
    356c:	cmp	r1, #0
    3570:	bne	3588 <eval_integer+0x348>
    3574:	mvn	r0, #102	; 0x66
    3578:	ldr	r1, [pc, #3532]	; 434c <eval_integer+0x110c>
    357c:	bl	0 <coda_set_error>
    3580:	mvn	r0, #0
    3584:	b	4f44 <eval_integer+0x1d04>
    3588:	ldr	r2, [sp, #68]	; 0x44
    358c:	ldr	r3, [sp, #60]	; 0x3c
    3590:	add	r0, r2, r3
    3594:	mov	r3, #0
    3598:	mov	r2, r4
    359c:	bl	0 <coda_ascii_parse_int64>
    35a0:	cmp	r0, #0
    35a4:	bge	35b8 <eval_integer+0x378>
    35a8:	ldr	r0, [sp, #68]	; 0x44
    35ac:	bl	0 <free>
    35b0:	mvn	r0, #0
    35b4:	b	4f44 <eval_integer+0x1d04>
    35b8:	ldr	r0, [sp, #68]	; 0x44
    35bc:	bl	0 <free>
    35c0:	b	4f40 <eval_integer+0x1d00>
    35c4:	add	r2, sp, #56	; 0x38
    35c8:	mov	r0, r6
    35cc:	bl	c0c <eval_boolean>
    35d0:	cmp	r0, #0
    35d4:	beq	35e0 <eval_integer+0x3a0>
    35d8:	mvn	r0, #0
    35dc:	b	4f44 <eval_integer+0x1d04>
    35e0:	ldr	r2, [sp, #56]	; 0x38
    35e4:	asr	r3, r2, #31
    35e8:	str	r2, [r4]
    35ec:	str	r3, [r4, #4]
    35f0:	b	4f40 <eval_integer+0x1d00>
    35f4:	ldr	r1, [r5, #16]
    35f8:	mov	r2, r4
    35fc:	mov	r0, r6
    3600:	bl	3240 <eval_integer>
    3604:	cmp	r0, #0
    3608:	beq	3614 <eval_integer+0x3d4>
    360c:	mvn	r0, #0
    3610:	b	4f44 <eval_integer+0x1d04>
    3614:	ldr	ip, [r4]
    3618:	ldr	r1, [r4, #4]
    361c:	rsbs	r2, ip, #0
    3620:	rsc	r3, r1, #0
    3624:	str	r2, [r4]
    3628:	str	r3, [r4, #4]
    362c:	b	4f40 <eval_integer+0x1d00>
    3630:	ldr	r1, [r5, #16]
    3634:	mov	r2, r4
    3638:	mov	r0, r6
    363c:	bl	3240 <eval_integer>
    3640:	cmp	r0, #0
    3644:	beq	3650 <eval_integer+0x410>
    3648:	mvn	r0, #0
    364c:	b	4f44 <eval_integer+0x1d04>
    3650:	ldr	r3, [r4]
    3654:	ldr	ip, [r4, #4]
    3658:	cmp	ip, #0
    365c:	bge	3668 <eval_integer+0x428>
    3660:	rsbs	r3, r3, #0
    3664:	rsc	ip, ip, #0
    3668:	str	r3, [r4]
    366c:	str	ip, [r4, #4]
    3670:	b	4f40 <eval_integer+0x1d00>
    3674:	ldr	r1, [r5, #16]
    3678:	add	r2, sp, #168	; 0xa8
    367c:	mov	r0, r6
    3680:	bl	3240 <eval_integer>
    3684:	cmp	r0, #0
    3688:	beq	3694 <eval_integer+0x454>
    368c:	mvn	r0, #0
    3690:	b	4f44 <eval_integer+0x1d04>
    3694:	ldr	r1, [r5, #20]
    3698:	add	r2, sp, #176	; 0xb0
    369c:	mov	r0, r6
    36a0:	bl	3240 <eval_integer>
    36a4:	cmp	r0, #0
    36a8:	beq	36b4 <eval_integer+0x474>
    36ac:	mvn	r0, #0
    36b0:	b	4f44 <eval_integer+0x1d04>
    36b4:	ldr	r0, [sp, #168]	; 0xa8
    36b8:	ldr	r2, [sp, #172]	; 0xac
    36bc:	ldr	r1, [sp, #176]	; 0xb0
    36c0:	ldr	ip, [sp, #180]	; 0xb4
    36c4:	adds	lr, r0, r1
    36c8:	adc	r0, r2, ip
    36cc:	mov	ip, lr
    36d0:	str	ip, [r4]
    36d4:	str	r0, [r4, #4]
    36d8:	b	4f40 <eval_integer+0x1d00>
    36dc:	ldr	r1, [r5, #16]
    36e0:	add	r2, sp, #184	; 0xb8
    36e4:	mov	r0, r6
    36e8:	bl	3240 <eval_integer>
    36ec:	cmp	r0, #0
    36f0:	beq	36fc <eval_integer+0x4bc>
    36f4:	mvn	r0, #0
    36f8:	b	4f44 <eval_integer+0x1d04>
    36fc:	ldr	r1, [r5, #20]
    3700:	add	r2, sp, #192	; 0xc0
    3704:	mov	r0, r6
    3708:	bl	3240 <eval_integer>
    370c:	cmp	r0, #0
    3710:	beq	371c <eval_integer+0x4dc>
    3714:	mvn	r0, #0
    3718:	b	4f44 <eval_integer+0x1d04>
    371c:	ldr	r3, [sp, #184]	; 0xb8
    3720:	ldr	r0, [sp, #188]	; 0xbc
    3724:	ldr	r1, [sp, #192]	; 0xc0
    3728:	ldr	ip, [sp, #196]	; 0xc4
    372c:	subs	r3, r3, r1
    3730:	sbc	ip, r0, ip
    3734:	str	r3, [r4]
    3738:	str	ip, [r4, #4]
    373c:	b	4f40 <eval_integer+0x1d00>
    3740:	ldr	r1, [r5, #16]
    3744:	add	r2, sp, #200	; 0xc8
    3748:	mov	r0, r6
    374c:	bl	3240 <eval_integer>
    3750:	cmp	r0, #0
    3754:	beq	3760 <eval_integer+0x520>
    3758:	mvn	r0, #0
    375c:	b	4f44 <eval_integer+0x1d04>
    3760:	ldr	r1, [r5, #20]
    3764:	add	r2, sp, #208	; 0xd0
    3768:	mov	r0, r6
    376c:	bl	3240 <eval_integer>
    3770:	cmp	r0, #0
    3774:	beq	3780 <eval_integer+0x540>
    3778:	mvn	r0, #0
    377c:	b	4f44 <eval_integer+0x1d04>
    3780:	ldr	ip, [sp, #200]	; 0xc8
    3784:	ldr	r5, [sp, #204]	; 0xcc
    3788:	ldr	r0, [sp, #208]	; 0xd0
    378c:	ldr	r3, [sp, #212]	; 0xd4
    3790:	umull	r1, r2, ip, r0
    3794:	mla	ip, ip, r3, r2
    3798:	mla	r2, r5, r0, ip
    379c:	str	r1, [r4]
    37a0:	str	r2, [r4, #4]
    37a4:	b	4f40 <eval_integer+0x1d00>
    37a8:	ldr	r1, [r5, #16]
    37ac:	add	r2, sp, #216	; 0xd8
    37b0:	mov	r0, r6
    37b4:	bl	3240 <eval_integer>
    37b8:	cmp	r0, #0
    37bc:	beq	37c8 <eval_integer+0x588>
    37c0:	mvn	r0, #0
    37c4:	b	4f44 <eval_integer+0x1d04>
    37c8:	ldr	r1, [r5, #20]
    37cc:	add	r2, sp, #224	; 0xe0
    37d0:	mov	r0, r6
    37d4:	bl	3240 <eval_integer>
    37d8:	cmp	r0, #0
    37dc:	beq	37e8 <eval_integer+0x5a8>
    37e0:	mvn	r0, #0
    37e4:	b	4f44 <eval_integer+0x1d04>
    37e8:	ldr	r2, [sp, #224]	; 0xe0
    37ec:	ldr	r3, [sp, #228]	; 0xe4
    37f0:	mov	r1, r3
    37f4:	mov	r0, r2
    37f8:	orr	ip, r1, r0
    37fc:	cmp	ip, #0
    3800:	bne	3818 <eval_integer+0x5d8>
    3804:	mvn	r0, #400	; 0x190
    3808:	ldr	r1, [pc, #2856]	; 4338 <eval_integer+0x10f8>
    380c:	bl	0 <coda_set_error>
    3810:	mvn	r0, #0
    3814:	b	4f44 <eval_integer+0x1d04>
    3818:	ldr	r0, [sp, #216]	; 0xd8
    381c:	ldr	r1, [sp, #220]	; 0xdc
    3820:	bl	0 <__compcert_i64_sdiv>
    3824:	str	r0, [r4]
    3828:	str	r1, [r4, #4]
    382c:	b	4f40 <eval_integer+0x1d00>
    3830:	ldr	r1, [r5, #16]
    3834:	add	r2, sp, #232	; 0xe8
    3838:	mov	r0, r6
    383c:	bl	3240 <eval_integer>
    3840:	cmp	r0, #0
    3844:	beq	3850 <eval_integer+0x610>
    3848:	mvn	r0, #0
    384c:	b	4f44 <eval_integer+0x1d04>
    3850:	ldr	r1, [r5, #20]
    3854:	add	r2, sp, #240	; 0xf0
    3858:	mov	r0, r6
    385c:	bl	3240 <eval_integer>
    3860:	cmp	r0, #0
    3864:	beq	3870 <eval_integer+0x630>
    3868:	mvn	r0, #0
    386c:	b	4f44 <eval_integer+0x1d04>
    3870:	ldr	r2, [sp, #240]	; 0xf0
    3874:	ldr	r3, [sp, #244]	; 0xf4
    3878:	mov	r0, r3
    387c:	mov	ip, r2
    3880:	orr	ip, r0, ip
    3884:	cmp	ip, #0
    3888:	bne	38a0 <eval_integer+0x660>
    388c:	mvn	r0, #400	; 0x190
    3890:	ldr	r1, [pc, #2724]	; 433c <eval_integer+0x10fc>
    3894:	bl	0 <coda_set_error>
    3898:	mvn	r0, #0
    389c:	b	4f44 <eval_integer+0x1d04>
    38a0:	ldr	r0, [sp, #232]	; 0xe8
    38a4:	ldr	r1, [sp, #236]	; 0xec
    38a8:	bl	0 <__compcert_i64_smod>
    38ac:	str	r0, [r4]
    38b0:	str	r1, [r4, #4]
    38b4:	b	4f40 <eval_integer+0x1d00>
    38b8:	ldr	r1, [r5, #16]
    38bc:	add	r2, sp, #248	; 0xf8
    38c0:	mov	r0, r6
    38c4:	bl	3240 <eval_integer>
    38c8:	cmp	r0, #0
    38cc:	beq	38d8 <eval_integer+0x698>
    38d0:	mvn	r0, #0
    38d4:	b	4f44 <eval_integer+0x1d04>
    38d8:	ldr	r1, [r5, #20]
    38dc:	add	r2, sp, #256	; 0x100
    38e0:	mov	r0, r6
    38e4:	bl	3240 <eval_integer>
    38e8:	cmp	r0, #0
    38ec:	beq	38f8 <eval_integer+0x6b8>
    38f0:	mvn	r0, #0
    38f4:	b	4f44 <eval_integer+0x1d04>
    38f8:	ldr	r2, [sp, #248]	; 0xf8
    38fc:	ldr	r3, [sp, #252]	; 0xfc
    3900:	ldr	r1, [sp, #256]	; 0x100
    3904:	ldr	ip, [sp, #260]	; 0x104
    3908:	and	ip, r3, ip
    390c:	and	r3, r2, r1
    3910:	str	r3, [r4]
    3914:	str	ip, [r4, #4]
    3918:	b	4f40 <eval_integer+0x1d00>
    391c:	ldr	r1, [r5, #16]
    3920:	add	r2, sp, #264	; 0x108
    3924:	mov	r0, r6
    3928:	bl	3240 <eval_integer>
    392c:	cmp	r0, #0
    3930:	beq	393c <eval_integer+0x6fc>
    3934:	mvn	r0, #0
    3938:	b	4f44 <eval_integer+0x1d04>
    393c:	ldr	r1, [r5, #20]
    3940:	add	r2, sp, #272	; 0x110
    3944:	mov	r0, r6
    3948:	bl	3240 <eval_integer>
    394c:	cmp	r0, #0
    3950:	beq	395c <eval_integer+0x71c>
    3954:	mvn	r0, #0
    3958:	b	4f44 <eval_integer+0x1d04>
    395c:	ldr	r3, [sp, #264]	; 0x108
    3960:	ldr	r0, [sp, #268]	; 0x10c
    3964:	ldr	r2, [sp, #272]	; 0x110
    3968:	ldr	r1, [sp, #276]	; 0x114
    396c:	orr	ip, r0, r1
    3970:	orr	r2, r3, r2
    3974:	str	r2, [r4]
    3978:	str	ip, [r4, #4]
    397c:	b	4f40 <eval_integer+0x1d00>
    3980:	ldr	r1, [r5, #16]
    3984:	add	r2, sp, #280	; 0x118
    3988:	mov	r0, r6
    398c:	bl	3240 <eval_integer>
    3990:	cmp	r0, #0
    3994:	beq	39a0 <eval_integer+0x760>
    3998:	mvn	r0, #0
    399c:	b	4f44 <eval_integer+0x1d04>
    39a0:	ldr	r1, [r5, #20]
    39a4:	add	r2, sp, #288	; 0x120
    39a8:	mov	r0, r6
    39ac:	bl	3240 <eval_integer>
    39b0:	cmp	r0, #0
    39b4:	beq	39c0 <eval_integer+0x780>
    39b8:	mvn	r0, #0
    39bc:	b	4f44 <eval_integer+0x1d04>
    39c0:	ldr	ip, [sp, #280]	; 0x118
    39c4:	ldr	r1, [sp, #284]	; 0x11c
    39c8:	ldr	r2, [sp, #288]	; 0x120
    39cc:	ldr	r0, [sp, #292]	; 0x124
    39d0:	cmp	r1, r0
    39d4:	bne	39e4 <eval_integer+0x7a4>
    39d8:	cmp	ip, r2
    39dc:	bhi	39f8 <eval_integer+0x7b8>
    39e0:	b	39ec <eval_integer+0x7ac>
    39e4:	cmp	r1, r0
    39e8:	bgt	39f8 <eval_integer+0x7b8>
    39ec:	ldr	ip, [sp, #288]	; 0x120
    39f0:	ldr	r1, [sp, #292]	; 0x124
    39f4:	b	3a00 <eval_integer+0x7c0>
    39f8:	ldr	ip, [sp, #280]	; 0x118
    39fc:	ldr	r1, [sp, #284]	; 0x11c
    3a00:	str	ip, [r4]
    3a04:	str	r1, [r4, #4]
    3a08:	b	4f40 <eval_integer+0x1d00>
    3a0c:	ldr	r1, [r5, #16]
    3a10:	add	r2, sp, #296	; 0x128
    3a14:	mov	r0, r6
    3a18:	bl	3240 <eval_integer>
    3a1c:	cmp	r0, #0
    3a20:	beq	3a2c <eval_integer+0x7ec>
    3a24:	mvn	r0, #0
    3a28:	b	4f44 <eval_integer+0x1d04>
    3a2c:	ldr	r1, [r5, #20]
    3a30:	add	r2, sp, #304	; 0x130
    3a34:	mov	r0, r6
    3a38:	bl	3240 <eval_integer>
    3a3c:	cmp	r0, #0
    3a40:	beq	3a4c <eval_integer+0x80c>
    3a44:	mvn	r0, #0
    3a48:	b	4f44 <eval_integer+0x1d04>
    3a4c:	ldr	r3, [sp, #296]	; 0x128
    3a50:	ldr	r0, [sp, #300]	; 0x12c
    3a54:	ldr	ip, [sp, #304]	; 0x130
    3a58:	ldr	r2, [sp, #308]	; 0x134
    3a5c:	cmp	r0, r2
    3a60:	bne	3a70 <eval_integer+0x830>
    3a64:	cmp	r3, ip
    3a68:	bcc	3a84 <eval_integer+0x844>
    3a6c:	b	3a78 <eval_integer+0x838>
    3a70:	cmp	r0, r2
    3a74:	blt	3a84 <eval_integer+0x844>
    3a78:	ldr	r2, [sp, #304]	; 0x130
    3a7c:	ldr	r0, [sp, #308]	; 0x134
    3a80:	b	3a8c <eval_integer+0x84c>
    3a84:	ldr	r2, [sp, #296]	; 0x128
    3a88:	ldr	r0, [sp, #300]	; 0x12c
    3a8c:	str	r2, [r4]
    3a90:	str	r0, [r4, #4]
    3a94:	b	4f40 <eval_integer+0x1d00>
    3a98:	ldr	r1, [r5, #16]
    3a9c:	add	r2, sp, #72	; 0x48
    3aa0:	mov	r0, r6
    3aa4:	bl	c0c <eval_boolean>
    3aa8:	cmp	r0, #0
    3aac:	beq	3ab8 <eval_integer+0x878>
    3ab0:	mvn	r0, #0
    3ab4:	b	4f44 <eval_integer+0x1d04>
    3ab8:	ldr	r1, [sp, #72]	; 0x48
    3abc:	cmp	r1, #0
    3ac0:	bne	3ae4 <eval_integer+0x8a4>
    3ac4:	ldr	r1, [r5, #24]
    3ac8:	mov	r2, r4
    3acc:	mov	r0, r6
    3ad0:	bl	3240 <eval_integer>
    3ad4:	cmp	r0, #0
    3ad8:	beq	4f40 <eval_integer+0x1d00>
    3adc:	mvn	r0, #0
    3ae0:	b	4f44 <eval_integer+0x1d04>
    3ae4:	ldr	r1, [r5, #20]
    3ae8:	mov	r2, r4
    3aec:	mov	r0, r6
    3af0:	bl	3240 <eval_integer>
    3af4:	cmp	r0, #0
    3af8:	beq	4f40 <eval_integer+0x1d00>
    3afc:	mvn	r0, #0
    3b00:	b	4f44 <eval_integer+0x1d04>
    3b04:	ldr	r3, [r6]
    3b08:	cmp	r3, #0
    3b0c:	bne	3b24 <eval_integer+0x8e4>
    3b10:	ldr	r0, [pc, #2088]	; 4340 <eval_integer+0x1100>
    3b14:	ldr	r1, [pc, #2100]	; 4350 <eval_integer+0x1110>
    3b18:	movw	r2, #2194	; 0x892
    3b1c:	ldr	r3, [pc, #2084]	; 4348 <eval_integer+0x1108>
    3b20:	bl	0 <__assert_fail>
    3b24:	add	r1, r6, #8
    3b28:	mov	r2, r1
    3b2c:	add	r3, sp, #392	; 0x188
    3b30:	add	r3, r3, #1024	; 0x400
    3b34:	mov	lr, #130	; 0x82
    3b38:	ldr	ip, [r2], #4
    3b3c:	subs	lr, lr, #1
    3b40:	str	ip, [r3], #4
    3b44:	bne	3b38 <eval_integer+0x8f8>
    3b48:	ldr	r1, [r5, #16]
    3b4c:	mov	r0, r6
    3b50:	bl	6fa4 <eval_cursor>
    3b54:	cmp	r0, #0
    3b58:	beq	3b64 <eval_integer+0x924>
    3b5c:	mvn	r0, #0
    3b60:	b	4f44 <eval_integer+0x1d04>
    3b64:	add	r0, r6, #8
    3b68:	add	r1, sp, #76	; 0x4c
    3b6c:	bl	0 <coda_cursor_get_num_elements>
    3b70:	cmp	r0, #0
    3b74:	beq	3b80 <eval_integer+0x940>
    3b78:	mvn	r0, #0
    3b7c:	b	4f44 <eval_integer+0x1d04>
    3b80:	mov	r2, #0
    3b84:	mov	r1, #0
    3b88:	str	r1, [r4]
    3b8c:	str	r2, [r4, #4]
    3b90:	ldr	r1, [sp, #76]	; 0x4c
    3b94:	cmp	r1, #0
    3b98:	ble	3c44 <eval_integer+0xa04>
    3b9c:	add	r0, r6, #8
    3ba0:	bl	0 <coda_cursor_goto_first_array_element>
    3ba4:	cmp	r0, #0
    3ba8:	beq	3bb4 <eval_integer+0x974>
    3bac:	mvn	r0, #0
    3bb0:	b	4f44 <eval_integer+0x1d04>
    3bb4:	mov	r7, #0
    3bb8:	ldr	r0, [sp, #76]	; 0x4c
    3bbc:	cmp	r7, r0
    3bc0:	bge	3c44 <eval_integer+0xa04>
    3bc4:	ldr	r1, [r5, #20]
    3bc8:	add	r2, sp, #80	; 0x50
    3bcc:	mov	r0, r6
    3bd0:	bl	c0c <eval_boolean>
    3bd4:	cmp	r0, #0
    3bd8:	beq	3be4 <eval_integer+0x9a4>
    3bdc:	mvn	r0, #0
    3be0:	b	4f44 <eval_integer+0x1d04>
    3be4:	ldr	r2, [sp, #80]	; 0x50
    3be8:	cmp	r2, #0
    3bec:	beq	3c14 <eval_integer+0x9d4>
    3bf0:	ldr	r3, [r4]
    3bf4:	ldr	r2, [r4, #4]
    3bf8:	mov	r0, #0
    3bfc:	mov	ip, #1
    3c00:	adds	lr, r3, ip
    3c04:	adc	r1, r2, r0
    3c08:	mov	r2, lr
    3c0c:	str	r2, [r4]
    3c10:	str	r1, [r4, #4]
    3c14:	ldr	r3, [sp, #76]	; 0x4c
    3c18:	sub	r1, r3, #1
    3c1c:	cmp	r7, r1
    3c20:	bge	3c3c <eval_integer+0x9fc>
    3c24:	add	r0, r6, #8
    3c28:	bl	0 <coda_cursor_goto_next_array_element>
    3c2c:	cmp	r0, #0
    3c30:	beq	3c3c <eval_integer+0x9fc>
    3c34:	mvn	r0, #0
    3c38:	b	4f44 <eval_integer+0x1d04>
    3c3c:	add	r7, r7, #1
    3c40:	b	3bb8 <eval_integer+0x978>
    3c44:	add	r0, r6, #8
    3c48:	add	r2, sp, #392	; 0x188
    3c4c:	add	r2, r2, #1024	; 0x400
    3c50:	mov	r3, r0
    3c54:	mov	lr, #130	; 0x82
    3c58:	ldr	ip, [r2], #4
    3c5c:	subs	lr, lr, #1
    3c60:	str	ip, [r3], #4
    3c64:	bne	3c58 <eval_integer+0xa18>
    3c68:	b	4f40 <eval_integer+0x1d00>
    3c6c:	ldr	r0, [r6]
    3c70:	cmp	r0, #0
    3c74:	bne	3c8c <eval_integer+0xa4c>
    3c78:	ldr	r0, [pc, #1728]	; 4340 <eval_integer+0x1100>
    3c7c:	ldr	r1, [pc, #1740]	; 4350 <eval_integer+0x1110>
    3c80:	movw	r2, #2242	; 0x8c2
    3c84:	ldr	r3, [pc, #1724]	; 4348 <eval_integer+0x1108>
    3c88:	bl	0 <__assert_fail>
    3c8c:	add	ip, r6, #8
    3c90:	mov	r2, ip
    3c94:	add	r3, sp, #1936	; 0x790
    3c98:	mov	lr, #130	; 0x82
    3c9c:	ldr	ip, [r2], #4
    3ca0:	subs	lr, lr, #1
    3ca4:	str	ip, [r3], #4
    3ca8:	bne	3c9c <eval_integer+0xa5c>
    3cac:	ldr	r1, [r5, #16]
    3cb0:	mov	r0, r6
    3cb4:	bl	6fa4 <eval_cursor>
    3cb8:	cmp	r0, #0
    3cbc:	beq	3cc8 <eval_integer+0xa88>
    3cc0:	mvn	r0, #0
    3cc4:	b	4f44 <eval_integer+0x1d04>
    3cc8:	add	r0, r6, #8
    3ccc:	add	r1, sp, #84	; 0x54
    3cd0:	bl	0 <coda_cursor_get_num_elements>
    3cd4:	cmp	r0, #0
    3cd8:	beq	3ce4 <eval_integer+0xaa4>
    3cdc:	mvn	r0, #0
    3ce0:	b	4f44 <eval_integer+0x1d04>
    3ce4:	mov	r2, #0
    3ce8:	mov	r1, #0
    3cec:	str	r1, [r4]
    3cf0:	str	r2, [r4, #4]
    3cf4:	ldr	r3, [sp, #84]	; 0x54
    3cf8:	cmp	r3, #0
    3cfc:	ble	3d98 <eval_integer+0xb58>
    3d00:	add	r0, r6, #8
    3d04:	bl	0 <coda_cursor_goto_first_array_element>
    3d08:	cmp	r0, #0
    3d0c:	beq	3d18 <eval_integer+0xad8>
    3d10:	mvn	r0, #0
    3d14:	b	4f44 <eval_integer+0x1d04>
    3d18:	mov	r7, #0
    3d1c:	ldr	r0, [sp, #84]	; 0x54
    3d20:	cmp	r7, r0
    3d24:	bge	3d98 <eval_integer+0xb58>
    3d28:	ldr	r1, [r5, #20]
    3d2c:	add	r2, sp, #312	; 0x138
    3d30:	mov	r0, r6
    3d34:	bl	3240 <eval_integer>
    3d38:	cmp	r0, #0
    3d3c:	beq	3d48 <eval_integer+0xb08>
    3d40:	mvn	r0, #0
    3d44:	b	4f44 <eval_integer+0x1d04>
    3d48:	ldr	r0, [r4]
    3d4c:	ldr	r1, [r4, #4]
    3d50:	ldr	r3, [sp, #312]	; 0x138
    3d54:	ldr	r2, [sp, #316]	; 0x13c
    3d58:	adds	r0, r0, r3
    3d5c:	adc	r2, r1, r2
    3d60:	str	r0, [r4]
    3d64:	str	r2, [r4, #4]
    3d68:	ldr	r0, [sp, #84]	; 0x54
    3d6c:	sub	ip, r0, #1
    3d70:	cmp	r7, ip
    3d74:	bge	3d90 <eval_integer+0xb50>
    3d78:	add	r0, r6, #8
    3d7c:	bl	0 <coda_cursor_goto_next_array_element>
    3d80:	cmp	r0, #0
    3d84:	beq	3d90 <eval_integer+0xb50>
    3d88:	mvn	r0, #0
    3d8c:	b	4f44 <eval_integer+0x1d04>
    3d90:	add	r7, r7, #1
    3d94:	b	3d1c <eval_integer+0xadc>
    3d98:	add	r0, r6, #8
    3d9c:	add	r2, sp, #1936	; 0x790
    3da0:	mov	r3, r0
    3da4:	mov	lr, #130	; 0x82
    3da8:	ldr	ip, [r2], #4
    3dac:	subs	lr, lr, #1
    3db0:	str	ip, [r3], #4
    3db4:	bne	3da8 <eval_integer+0xb68>
    3db8:	b	4f40 <eval_integer+0x1d00>
    3dbc:	ldr	r0, [r6]
    3dc0:	cmp	r0, #0
    3dc4:	bne	3ddc <eval_integer+0xb9c>
    3dc8:	ldr	r0, [pc, #1392]	; 4340 <eval_integer+0x1100>
    3dcc:	ldr	r1, [pc, #1404]	; 4350 <eval_integer+0x1110>
    3dd0:	movw	r2, #2287	; 0x8ef
    3dd4:	ldr	r3, [pc, #1388]	; 4348 <eval_integer+0x1108>
    3dd8:	bl	0 <__assert_fail>
    3ddc:	add	r2, r6, #8
    3de0:	add	r3, sp, #408	; 0x198
    3de4:	add	r3, r3, #2048	; 0x800
    3de8:	mov	lr, #130	; 0x82
    3dec:	ldr	ip, [r2], #4
    3df0:	subs	lr, lr, #1
    3df4:	str	ip, [r3], #4
    3df8:	bne	3dec <eval_integer+0xbac>
    3dfc:	ldr	r1, [r5, #16]
    3e00:	mov	r0, r6
    3e04:	bl	6fa4 <eval_cursor>
    3e08:	cmp	r0, #0
    3e0c:	beq	3e18 <eval_integer+0xbd8>
    3e10:	mvn	r0, #0
    3e14:	b	4f44 <eval_integer+0x1d04>
    3e18:	add	r0, r6, #8
    3e1c:	add	r1, sp, #88	; 0x58
    3e20:	bl	0 <coda_cursor_get_num_elements>
    3e24:	cmp	r0, #0
    3e28:	beq	3e34 <eval_integer+0xbf4>
    3e2c:	mvn	r0, #0
    3e30:	b	4f44 <eval_integer+0x1d04>
    3e34:	mov	r1, #0
    3e38:	mov	r0, #0
    3e3c:	str	r0, [r4]
    3e40:	str	r1, [r4, #4]
    3e44:	ldr	r0, [sp, #88]	; 0x58
    3e48:	cmp	r0, #0
    3e4c:	ble	3f1c <eval_integer+0xcdc>
    3e50:	add	r0, r6, #8
    3e54:	bl	0 <coda_cursor_goto_first_array_element>
    3e58:	cmp	r0, #0
    3e5c:	beq	3e68 <eval_integer+0xc28>
    3e60:	mvn	r0, #0
    3e64:	b	4f44 <eval_integer+0x1d04>
    3e68:	mov	r7, #0
    3e6c:	ldr	ip, [sp, #88]	; 0x58
    3e70:	cmp	r7, ip
    3e74:	bge	3f1c <eval_integer+0xcdc>
    3e78:	ldr	r1, [r5, #20]
    3e7c:	add	r2, sp, #320	; 0x140
    3e80:	mov	r0, r6
    3e84:	bl	3240 <eval_integer>
    3e88:	cmp	r0, #0
    3e8c:	beq	3e98 <eval_integer+0xc58>
    3e90:	mvn	r0, #0
    3e94:	b	4f44 <eval_integer+0x1d04>
    3e98:	cmp	r7, #0
    3e9c:	beq	3edc <eval_integer+0xc9c>
    3ea0:	ldr	r0, [sp, #320]	; 0x140
    3ea4:	ldr	r1, [sp, #324]	; 0x144
    3ea8:	ldr	r3, [r4]
    3eac:	ldr	r2, [r4, #4]
    3eb0:	cmp	r1, r2
    3eb4:	bne	3ec8 <eval_integer+0xc88>
    3eb8:	cmp	r0, r3
    3ebc:	movhi	r1, #1
    3ec0:	movls	r1, #0
    3ec4:	b	3ed4 <eval_integer+0xc94>
    3ec8:	cmp	r1, r2
    3ecc:	movgt	r1, #1
    3ed0:	movle	r1, #0
    3ed4:	cmp	r1, #0
    3ed8:	beq	3eec <eval_integer+0xcac>
    3edc:	ldr	r3, [sp, #320]	; 0x140
    3ee0:	ldr	ip, [sp, #324]	; 0x144
    3ee4:	str	r3, [r4]
    3ee8:	str	ip, [r4, #4]
    3eec:	ldr	r0, [sp, #88]	; 0x58
    3ef0:	sub	r2, r0, #1
    3ef4:	cmp	r7, r2
    3ef8:	bge	3f14 <eval_integer+0xcd4>
    3efc:	add	r0, r6, #8
    3f00:	bl	0 <coda_cursor_goto_next_array_element>
    3f04:	cmp	r0, #0
    3f08:	beq	3f14 <eval_integer+0xcd4>
    3f0c:	mvn	r0, #0
    3f10:	b	4f44 <eval_integer+0x1d04>
    3f14:	add	r7, r7, #1
    3f18:	b	3e6c <eval_integer+0xc2c>
    3f1c:	add	r0, r6, #8
    3f20:	add	r2, sp, #408	; 0x198
    3f24:	add	r2, r2, #2048	; 0x800
    3f28:	mov	r3, r0
    3f2c:	mov	lr, #130	; 0x82
    3f30:	ldr	ip, [r2], #4
    3f34:	subs	lr, lr, #1
    3f38:	str	ip, [r3], #4
    3f3c:	bne	3f30 <eval_integer+0xcf0>
    3f40:	b	4f40 <eval_integer+0x1d00>
    3f44:	ldr	r0, [r6]
    3f48:	cmp	r0, #0
    3f4c:	bne	3f64 <eval_integer+0xd24>
    3f50:	ldr	r0, [pc, #1000]	; 4340 <eval_integer+0x1100>
    3f54:	ldr	r1, [pc, #1012]	; 4350 <eval_integer+0x1110>
    3f58:	movw	r2, #2335	; 0x91f
    3f5c:	ldr	r3, [pc, #996]	; 4348 <eval_integer+0x1108>
    3f60:	bl	0 <__assert_fail>
    3f64:	add	ip, r6, #8
    3f68:	mov	r2, ip
    3f6c:	add	r3, sp, #2976	; 0xba0
    3f70:	mov	lr, #130	; 0x82
    3f74:	ldr	ip, [r2], #4
    3f78:	subs	lr, lr, #1
    3f7c:	str	ip, [r3], #4
    3f80:	bne	3f74 <eval_integer+0xd34>
    3f84:	ldr	r1, [r5, #16]
    3f88:	mov	r0, r6
    3f8c:	bl	6fa4 <eval_cursor>
    3f90:	cmp	r0, #0
    3f94:	beq	3fa0 <eval_integer+0xd60>
    3f98:	mvn	r0, #0
    3f9c:	b	4f44 <eval_integer+0x1d04>
    3fa0:	add	r0, r6, #8
    3fa4:	add	r1, sp, #92	; 0x5c
    3fa8:	bl	0 <coda_cursor_get_num_elements>
    3fac:	cmp	r0, #0
    3fb0:	beq	3fbc <eval_integer+0xd7c>
    3fb4:	mvn	r0, #0
    3fb8:	b	4f44 <eval_integer+0x1d04>
    3fbc:	mov	r0, #0
    3fc0:	mov	ip, #0
    3fc4:	str	ip, [r4]
    3fc8:	str	r0, [r4, #4]
    3fcc:	ldr	ip, [sp, #92]	; 0x5c
    3fd0:	cmp	ip, #0
    3fd4:	ble	40a4 <eval_integer+0xe64>
    3fd8:	add	r0, r6, #8
    3fdc:	bl	0 <coda_cursor_goto_first_array_element>
    3fe0:	cmp	r0, #0
    3fe4:	beq	3ff0 <eval_integer+0xdb0>
    3fe8:	mvn	r0, #0
    3fec:	b	4f44 <eval_integer+0x1d04>
    3ff0:	mov	r7, #0
    3ff4:	ldr	r1, [sp, #92]	; 0x5c
    3ff8:	cmp	r7, r1
    3ffc:	bge	40a4 <eval_integer+0xe64>
    4000:	ldr	r1, [r5, #20]
    4004:	add	r2, sp, #328	; 0x148
    4008:	mov	r0, r6
    400c:	bl	3240 <eval_integer>
    4010:	cmp	r0, #0
    4014:	beq	4020 <eval_integer+0xde0>
    4018:	mvn	r0, #0
    401c:	b	4f44 <eval_integer+0x1d04>
    4020:	cmp	r7, #0
    4024:	beq	4064 <eval_integer+0xe24>
    4028:	ldr	r3, [sp, #328]	; 0x148
    402c:	ldr	r0, [sp, #332]	; 0x14c
    4030:	ldr	r1, [r4]
    4034:	ldr	ip, [r4, #4]
    4038:	cmp	r0, ip
    403c:	bne	4050 <eval_integer+0xe10>
    4040:	cmp	r3, r1
    4044:	movcc	ip, #1
    4048:	movcs	ip, #0
    404c:	b	405c <eval_integer+0xe1c>
    4050:	cmp	r0, ip
    4054:	movlt	ip, #1
    4058:	movge	ip, #0
    405c:	cmp	ip, #0
    4060:	beq	4074 <eval_integer+0xe34>
    4064:	ldr	r2, [sp, #328]	; 0x148
    4068:	ldr	r3, [sp, #332]	; 0x14c
    406c:	str	r2, [r4]
    4070:	str	r3, [r4, #4]
    4074:	ldr	r2, [sp, #92]	; 0x5c
    4078:	sub	r1, r2, #1
    407c:	cmp	r7, r1
    4080:	bge	409c <eval_integer+0xe5c>
    4084:	add	r0, r6, #8
    4088:	bl	0 <coda_cursor_goto_next_array_element>
    408c:	cmp	r0, #0
    4090:	beq	409c <eval_integer+0xe5c>
    4094:	mvn	r0, #0
    4098:	b	4f44 <eval_integer+0x1d04>
    409c:	add	r7, r7, #1
    40a0:	b	3ff4 <eval_integer+0xdb4>
    40a4:	add	r0, r6, #8
    40a8:	add	r2, sp, #2976	; 0xba0
    40ac:	mov	r3, r0
    40b0:	mov	lr, #130	; 0x82
    40b4:	ldr	ip, [r2], #4
    40b8:	subs	lr, lr, #1
    40bc:	str	ip, [r3], #4
    40c0:	bne	40b4 <eval_integer+0xe74>
    40c4:	b	4f40 <eval_integer+0x1d00>
    40c8:	ldr	r1, [r6]
    40cc:	cmp	r1, #0
    40d0:	bne	40e8 <eval_integer+0xea8>
    40d4:	ldr	r0, [pc, #612]	; 4340 <eval_integer+0x1100>
    40d8:	ldr	r1, [pc, #624]	; 4350 <eval_integer+0x1110>
    40dc:	movw	r2, #2383	; 0x94f
    40e0:	ldr	r3, [pc, #608]	; 4348 <eval_integer+0x1108>
    40e4:	bl	0 <__assert_fail>
    40e8:	add	ip, r6, #8
    40ec:	mov	r2, ip
    40f0:	add	r3, sp, #424	; 0x1a8
    40f4:	add	r3, r3, #3072	; 0xc00
    40f8:	mov	lr, #130	; 0x82
    40fc:	ldr	ip, [r2], #4
    4100:	subs	lr, lr, #1
    4104:	str	ip, [r3], #4
    4108:	bne	40fc <eval_integer+0xebc>
    410c:	ldr	r1, [r5, #16]
    4110:	mov	r0, r6
    4114:	bl	6fa4 <eval_cursor>
    4118:	cmp	r0, #0
    411c:	beq	4128 <eval_integer+0xee8>
    4120:	mvn	r0, #0
    4124:	b	4f44 <eval_integer+0x1d04>
    4128:	add	r0, r6, #8
    412c:	add	r1, sp, #96	; 0x60
    4130:	bl	0 <coda_cursor_get_num_elements>
    4134:	cmp	r0, #0
    4138:	beq	4144 <eval_integer+0xf04>
    413c:	mvn	r0, #0
    4140:	b	4f44 <eval_integer+0x1d04>
    4144:	mov	r1, #0
    4148:	mov	r0, #0
    414c:	str	r0, [r4]
    4150:	str	r1, [r4, #4]
    4154:	ldr	r2, [sp, #96]	; 0x60
    4158:	cmp	r2, #0
    415c:	ble	421c <eval_integer+0xfdc>
    4160:	add	r0, r6, #8
    4164:	bl	0 <coda_cursor_goto_first_array_element>
    4168:	cmp	r0, #0
    416c:	beq	4178 <eval_integer+0xf38>
    4170:	mvn	r0, #0
    4174:	b	4f44 <eval_integer+0x1d04>
    4178:	mov	r7, #0
    417c:	ldr	ip, [sp, #96]	; 0x60
    4180:	cmp	r7, ip
    4184:	bge	421c <eval_integer+0xfdc>
    4188:	ldr	r1, [r5, #20]
    418c:	add	r2, sp, #100	; 0x64
    4190:	mov	r0, r6
    4194:	bl	c0c <eval_boolean>
    4198:	cmp	r0, #0
    419c:	beq	41a8 <eval_integer+0xf68>
    41a0:	mvn	r0, #0
    41a4:	b	4f44 <eval_integer+0x1d04>
    41a8:	ldr	ip, [sp, #100]	; 0x64
    41ac:	cmp	ip, #0
    41b0:	beq	41ec <eval_integer+0xfac>
    41b4:	asr	r3, r7, #31
    41b8:	str	r7, [r4]
    41bc:	str	r3, [r4, #4]
    41c0:	add	r0, r6, #8
    41c4:	add	r2, sp, #424	; 0x1a8
    41c8:	add	r2, r2, #3072	; 0xc00
    41cc:	mov	r3, r0
    41d0:	mov	lr, #130	; 0x82
    41d4:	ldr	ip, [r2], #4
    41d8:	subs	lr, lr, #1
    41dc:	str	ip, [r3], #4
    41e0:	bne	41d4 <eval_integer+0xf94>
    41e4:	mov	r0, #0
    41e8:	b	4f44 <eval_integer+0x1d04>
    41ec:	ldr	r0, [sp, #96]	; 0x60
    41f0:	sub	r1, r0, #1
    41f4:	cmp	r7, r1
    41f8:	bge	4214 <eval_integer+0xfd4>
    41fc:	add	r0, r6, #8
    4200:	bl	0 <coda_cursor_goto_next_array_element>
    4204:	cmp	r0, #0
    4208:	beq	4214 <eval_integer+0xfd4>
    420c:	mvn	r0, #0
    4210:	b	4f44 <eval_integer+0x1d04>
    4214:	add	r7, r7, #1
    4218:	b	417c <eval_integer+0xf3c>
    421c:	mvn	r3, #0
    4220:	mvn	r2, #0
    4224:	str	r2, [r4]
    4228:	str	r3, [r4, #4]
    422c:	add	r0, r6, #8
    4230:	add	r2, sp, #424	; 0x1a8
    4234:	add	r2, r2, #3072	; 0xc00
    4238:	mov	r3, r0
    423c:	mov	lr, #130	; 0x82
    4240:	ldr	ip, [r2], #4
    4244:	subs	lr, lr, #1
    4248:	str	ip, [r3], #4
    424c:	bne	4240 <eval_integer+0x1000>
    4250:	b	4f40 <eval_integer+0x1d00>
    4254:	mov	ip, #0
    4258:	str	ip, [sp, #104]	; 0x68
    425c:	ldr	r2, [r6]
    4260:	cmp	r2, #0
    4264:	bne	427c <eval_integer+0x103c>
    4268:	ldr	r0, [pc, #208]	; 4340 <eval_integer+0x1100>
    426c:	ldr	r1, [pc, #220]	; 4350 <eval_integer+0x1110>
    4270:	movw	r2, #2435	; 0x983
    4274:	ldr	r3, [pc, #204]	; 4348 <eval_integer+0x1108>
    4278:	bl	0 <__assert_fail>
    427c:	add	r0, r6, #8
    4280:	mov	r2, r0
    4284:	add	r3, sp, #4016	; 0xfb0
    4288:	mov	lr, #130	; 0x82
    428c:	ldr	ip, [r2], #4
    4290:	subs	lr, lr, #1
    4294:	str	ip, [r3], #4
    4298:	bne	428c <eval_integer+0x104c>
    429c:	ldr	r1, [r5, #16]
    42a0:	mov	r0, r6
    42a4:	bl	6fa4 <eval_cursor>
    42a8:	cmp	r0, #0
    42ac:	beq	42b8 <eval_integer+0x1078>
    42b0:	mvn	r0, #0
    42b4:	b	4f44 <eval_integer+0x1d04>
    42b8:	ldr	r0, [pc, #132]	; 4344 <eval_integer+0x1104>
    42bc:	ldr	r7, [r0]
    42c0:	mov	ip, #0
    42c4:	str	ip, [r0]
    42c8:	add	r0, r6, #8
    42cc:	bl	0 <coda_cursor_goto_first_array_element>
    42d0:	cmp	r0, #0
    42d4:	beq	42e8 <eval_integer+0x10a8>
    42d8:	ldr	r3, [pc, #100]	; 4344 <eval_integer+0x1104>
    42dc:	str	r7, [r3]
    42e0:	mvn	r0, #0
    42e4:	b	4f44 <eval_integer+0x1d04>
    42e8:	mov	r0, #0
    42ec:	mov	ip, #0
    42f0:	str	ip, [r4]
    42f4:	str	r0, [r4, #4]
    42f8:	ldr	r2, [sp, #104]	; 0x68
    42fc:	cmp	r2, #0
    4300:	bne	43ec <eval_integer+0x11ac>
    4304:	ldr	r1, [r5, #24]
    4308:	cmp	r1, #0
    430c:	beq	4354 <eval_integer+0x1114>
    4310:	ldr	r1, [r5, #20]
    4314:	add	r2, sp, #104	; 0x68
    4318:	mov	r0, r6
    431c:	bl	c0c <eval_boolean>
    4320:	cmp	r0, #0
    4324:	beq	4354 <eval_integer+0x1114>
    4328:	ldr	r0, [pc, #20]	; 4344 <eval_integer+0x1104>
    432c:	str	r7, [r0]
    4330:	mvn	r0, #0
    4334:	b	4f44 <eval_integer+0x1d04>
    4338:	.word	0x00000a05
    433c:	.word	0x000005d6
    4340:	.word	0x0000046b
    4344:	.word	0x00000000
    4348:	.word	0x00000d84
    434c:	.word	0x000000db
    4350:	.word	0x0000053b
    4354:	ldr	r1, [sp, #104]	; 0x68
    4358:	cmp	r1, #0
    435c:	bne	43d8 <eval_integer+0x1198>
    4360:	ldr	r1, [r5, #20]
    4364:	add	r2, sp, #104	; 0x68
    4368:	mov	r0, r6
    436c:	bl	c0c <eval_boolean>
    4370:	cmp	r0, #0
    4374:	beq	4388 <eval_integer+0x1148>
    4378:	ldr	r1, [pc, #3056]	; 4f70 <eval_integer+0x1d30>
    437c:	str	r7, [r1]
    4380:	mvn	r0, #0
    4384:	b	4f44 <eval_integer+0x1d04>
    4388:	ldr	r3, [sp, #104]	; 0x68
    438c:	cmp	r3, #0
    4390:	bne	42f8 <eval_integer+0x10b8>
    4394:	ldr	ip, [r4]
    4398:	ldr	r3, [r4, #4]
    439c:	mov	r2, #0
    43a0:	mov	r1, #1
    43a4:	adds	lr, ip, r1
    43a8:	adc	r3, r3, r2
    43ac:	mov	r2, lr
    43b0:	str	r2, [r4]
    43b4:	str	r3, [r4, #4]
    43b8:	add	r0, r6, #8
    43bc:	bl	0 <coda_cursor_goto_next_array_element>
    43c0:	cmp	r0, #0
    43c4:	beq	42f8 <eval_integer+0x10b8>
    43c8:	ldr	r3, [pc, #2976]	; 4f70 <eval_integer+0x1d30>
    43cc:	str	r7, [r3]
    43d0:	mvn	r0, #0
    43d4:	b	4f44 <eval_integer+0x1d04>
    43d8:	mvn	r3, #0
    43dc:	mvn	r2, #0
    43e0:	str	r2, [r4]
    43e4:	str	r3, [r4, #4]
    43e8:	b	42f8 <eval_integer+0x10b8>
    43ec:	ldr	r2, [pc, #2940]	; 4f70 <eval_integer+0x1d30>
    43f0:	str	r7, [r2]
    43f4:	add	r0, r6, #8
    43f8:	add	r2, sp, #4016	; 0xfb0
    43fc:	mov	r3, r0
    4400:	mov	lr, #130	; 0x82
    4404:	ldr	ip, [r2], #4
    4408:	subs	lr, lr, #1
    440c:	str	ip, [r3], #4
    4410:	bne	4404 <eval_integer+0x11c4>
    4414:	b	4f40 <eval_integer+0x1d00>
    4418:	ldr	r1, [r5, #16]
    441c:	ldr	r2, [r1, #4]
    4420:	cmp	r2, #4
    4424:	bne	44dc <eval_integer+0x129c>
    4428:	ldr	r1, [r6]
    442c:	cmp	r1, #0
    4430:	bne	4448 <eval_integer+0x1208>
    4434:	ldr	r0, [pc, #2864]	; 4f6c <eval_integer+0x1d2c>
    4438:	ldr	r1, [pc, #2880]	; 4f80 <eval_integer+0x1d40>
    443c:	movw	r2, #2491	; 0x9bb
    4440:	ldr	r3, [pc, #2860]	; 4f74 <eval_integer+0x1d34>
    4444:	bl	0 <__assert_fail>
    4448:	add	ip, r6, #8
    444c:	mov	r2, ip
    4450:	add	r3, sp, #440	; 0x1b8
    4454:	add	r3, r3, #4096	; 0x1000
    4458:	mov	lr, #130	; 0x82
    445c:	ldr	ip, [r2], #4
    4460:	subs	lr, lr, #1
    4464:	str	ip, [r3], #4
    4468:	bne	445c <eval_integer+0x121c>
    446c:	ldr	r1, [r5, #16]
    4470:	mov	r0, r6
    4474:	bl	6fa4 <eval_cursor>
    4478:	cmp	r0, #0
    447c:	beq	4488 <eval_integer+0x1248>
    4480:	mvn	r0, #0
    4484:	b	4f44 <eval_integer+0x1d04>
    4488:	add	r0, r6, #8
    448c:	add	r1, sp, #108	; 0x6c
    4490:	bl	0 <coda_cursor_get_string_length>
    4494:	cmp	r0, #0
    4498:	beq	44a4 <eval_integer+0x1264>
    449c:	mvn	r0, #0
    44a0:	b	4f44 <eval_integer+0x1d04>
    44a4:	ldr	r0, [sp, #108]	; 0x6c
    44a8:	asr	r1, r0, #31
    44ac:	str	r0, [r4]
    44b0:	str	r1, [r4, #4]
    44b4:	add	r0, r6, #8
    44b8:	add	r2, sp, #440	; 0x1b8
    44bc:	add	r2, r2, #4096	; 0x1000
    44c0:	mov	r3, r0
    44c4:	mov	lr, #130	; 0x82
    44c8:	ldr	ip, [r2], #4
    44cc:	subs	lr, lr, #1
    44d0:	str	ip, [r3], #4
    44d4:	bne	44c8 <eval_integer+0x1288>
    44d8:	b	4f40 <eval_integer+0x1d00>
    44dc:	add	r2, sp, #112	; 0x70
    44e0:	add	r3, sp, #116	; 0x74
    44e4:	add	r0, sp, #120	; 0x78
    44e8:	str	r0, [sp]
    44ec:	mov	r0, r6
    44f0:	bl	4f8c <eval_string>
    44f4:	cmp	r0, #0
    44f8:	beq	4504 <eval_integer+0x12c4>
    44fc:	mvn	r0, #0
    4500:	b	4f44 <eval_integer+0x1d04>
    4504:	ldr	r0, [sp, #116]	; 0x74
    4508:	cmp	r0, #0
    450c:	ble	4518 <eval_integer+0x12d8>
    4510:	ldr	r0, [sp, #120]	; 0x78
    4514:	bl	0 <free>
    4518:	ldr	r3, [sp, #116]	; 0x74
    451c:	asr	ip, r3, #31
    4520:	str	r3, [r4]
    4524:	str	ip, [r4, #4]
    4528:	b	4f40 <eval_integer+0x1d00>
    452c:	ldr	r0, [r6]
    4530:	cmp	r0, #0
    4534:	bne	454c <eval_integer+0x130c>
    4538:	ldr	r0, [pc, #2604]	; 4f6c <eval_integer+0x1d2c>
    453c:	ldr	r1, [pc, #2620]	; 4f80 <eval_integer+0x1d40>
    4540:	mov	r2, #2528	; 0x9e0
    4544:	ldr	r3, [pc, #2600]	; 4f74 <eval_integer+0x1d34>
    4548:	bl	0 <__assert_fail>
    454c:	add	ip, r6, #8
    4550:	mov	r2, ip
    4554:	add	r3, sp, #5056	; 0x13c0
    4558:	mov	lr, #130	; 0x82
    455c:	ldr	ip, [r2], #4
    4560:	subs	lr, lr, #1
    4564:	str	ip, [r3], #4
    4568:	bne	455c <eval_integer+0x131c>
    456c:	ldr	r1, [r5, #16]
    4570:	mov	r0, r6
    4574:	bl	6fa4 <eval_cursor>
    4578:	cmp	r0, #0
    457c:	beq	4588 <eval_integer+0x1348>
    4580:	mvn	r0, #0
    4584:	b	4f44 <eval_integer+0x1d04>
    4588:	ldr	r1, [r5, #20]
    458c:	add	r2, sp, #336	; 0x150
    4590:	mov	r0, r6
    4594:	bl	3240 <eval_integer>
    4598:	cmp	r0, #0
    459c:	beq	45a8 <eval_integer+0x1368>
    45a0:	mvn	r0, #0
    45a4:	b	4f44 <eval_integer+0x1d04>
    45a8:	add	r0, r6, #8
    45ac:	add	r1, sp, #124	; 0x7c
    45b0:	add	r2, sp, #344	; 0x158
    45b4:	bl	0 <coda_cursor_get_array_dim>
    45b8:	cmp	r0, #0
    45bc:	beq	45c8 <eval_integer+0x1388>
    45c0:	mvn	r0, #0
    45c4:	b	4f44 <eval_integer+0x1d04>
    45c8:	ldr	r2, [sp, #336]	; 0x150
    45cc:	ldr	r3, [sp, #340]	; 0x154
    45d0:	cmp	r3, #0
    45d4:	bge	45ec <eval_integer+0x13ac>
    45d8:	mvn	r0, #400	; 0x190
    45dc:	ldr	r1, [pc, #2468]	; 4f88 <eval_integer+0x1d48>
    45e0:	bl	0 <coda_set_error>
    45e4:	mvn	r0, #0
    45e8:	b	4f44 <eval_integer+0x1d04>
    45ec:	ldr	ip, [sp, #124]	; 0x7c
    45f0:	asr	r1, ip, #31
    45f4:	cmp	r3, r1
    45f8:	bne	4608 <eval_integer+0x13c8>
    45fc:	cmp	r2, ip
    4600:	bcs	4610 <eval_integer+0x13d0>
    4604:	b	462c <eval_integer+0x13ec>
    4608:	cmp	r3, r1
    460c:	ble	462c <eval_integer+0x13ec>
    4610:	mvn	r0, #400	; 0x190
    4614:	ldr	r1, [pc, #2396]	; 4f78 <eval_integer+0x1d38>
    4618:	ldr	r2, [sp, #336]	; 0x150
    461c:	ldr	r3, [sp, #124]	; 0x7c
    4620:	bl	0 <coda_set_error>
    4624:	mvn	r0, #0
    4628:	b	4f44 <eval_integer+0x1d04>
    462c:	add	r2, r6, #8
    4630:	add	r3, sp, #5056	; 0x13c0
    4634:	mov	lr, #130	; 0x82
    4638:	ldr	ip, [r3], #4
    463c:	subs	lr, lr, #1
    4640:	str	ip, [r2], #4
    4644:	bne	4638 <eval_integer+0x13f8>
    4648:	add	r2, sp, #344	; 0x158
    464c:	ldr	r1, [sp, #336]	; 0x150
    4650:	ldr	r2, [r2, r1, lsl #2]
    4654:	asr	r3, r2, #31
    4658:	str	r2, [r4]
    465c:	str	r3, [r4, #4]
    4660:	b	4f40 <eval_integer+0x1d00>
    4664:	ldr	r0, [r6]
    4668:	cmp	r0, #0
    466c:	bne	4684 <eval_integer+0x1444>
    4670:	ldr	r0, [pc, #2292]	; 4f6c <eval_integer+0x1d2c>
    4674:	ldr	r1, [pc, #2308]	; 4f80 <eval_integer+0x1d40>
    4678:	movw	r2, #2563	; 0xa03
    467c:	ldr	r3, [pc, #2288]	; 4f74 <eval_integer+0x1d34>
    4680:	bl	0 <__assert_fail>
    4684:	add	r1, r6, #8
    4688:	mov	r2, r1
    468c:	add	r3, sp, #456	; 0x1c8
    4690:	add	r3, r3, #5120	; 0x1400
    4694:	mov	lr, #130	; 0x82
    4698:	ldr	ip, [r2], #4
    469c:	subs	lr, lr, #1
    46a0:	str	ip, [r3], #4
    46a4:	bne	4698 <eval_integer+0x1458>
    46a8:	ldr	r1, [r5, #16]
    46ac:	mov	r0, r6
    46b0:	bl	6fa4 <eval_cursor>
    46b4:	cmp	r0, #0
    46b8:	beq	46c4 <eval_integer+0x1484>
    46bc:	mvn	r0, #0
    46c0:	b	4f44 <eval_integer+0x1d04>
    46c4:	add	r0, r6, #8
    46c8:	add	r1, sp, #128	; 0x80
    46cc:	bl	0 <coda_cursor_get_type>
    46d0:	cmp	r0, #0
    46d4:	beq	46e0 <eval_integer+0x14a0>
    46d8:	mvn	r0, #0
    46dc:	b	4f44 <eval_integer+0x1d04>
    46e0:	ldr	r0, [sp, #128]	; 0x80
    46e4:	add	r1, sp, #132	; 0x84
    46e8:	bl	0 <coda_type_get_array_num_dims>
    46ec:	cmp	r0, #0
    46f0:	beq	46fc <eval_integer+0x14bc>
    46f4:	mvn	r0, #0
    46f8:	b	4f44 <eval_integer+0x1d04>
    46fc:	add	r0, r6, #8
    4700:	add	r2, sp, #456	; 0x1c8
    4704:	add	r2, r2, #5120	; 0x1400
    4708:	mov	r3, r0
    470c:	mov	lr, #130	; 0x82
    4710:	ldr	ip, [r2], #4
    4714:	subs	lr, lr, #1
    4718:	str	ip, [r3], #4
    471c:	bne	4710 <eval_integer+0x14d0>
    4720:	ldr	r0, [sp, #132]	; 0x84
    4724:	asr	r1, r0, #31
    4728:	str	r0, [r4]
    472c:	str	r1, [r4, #4]
    4730:	b	4f40 <eval_integer+0x1d00>
    4734:	ldr	ip, [r6]
    4738:	cmp	ip, #0
    473c:	bne	4754 <eval_integer+0x1514>
    4740:	ldr	r0, [pc, #2084]	; 4f6c <eval_integer+0x1d2c>
    4744:	ldr	r1, [pc, #2100]	; 4f80 <eval_integer+0x1d40>
    4748:	movw	r2, #2586	; 0xa1a
    474c:	ldr	r3, [pc, #2080]	; 4f74 <eval_integer+0x1d34>
    4750:	bl	0 <__assert_fail>
    4754:	add	r1, r6, #8
    4758:	mov	r2, r1
    475c:	add	r3, sp, #2000	; 0x7d0
    4760:	add	r3, r3, #4096	; 0x1000
    4764:	mov	lr, #130	; 0x82
    4768:	ldr	ip, [r2], #4
    476c:	subs	lr, lr, #1
    4770:	str	ip, [r3], #4
    4774:	bne	4768 <eval_integer+0x1528>
    4778:	ldr	r1, [r5, #16]
    477c:	mov	r0, r6
    4780:	bl	6fa4 <eval_cursor>
    4784:	cmp	r0, #0
    4788:	beq	4794 <eval_integer+0x1554>
    478c:	mvn	r0, #0
    4790:	b	4f44 <eval_integer+0x1d04>
    4794:	add	r0, r6, #8
    4798:	add	r1, sp, #136	; 0x88
    479c:	bl	0 <coda_cursor_get_num_elements>
    47a0:	cmp	r0, #0
    47a4:	beq	47b0 <eval_integer+0x1570>
    47a8:	mvn	r0, #0
    47ac:	b	4f44 <eval_integer+0x1d04>
    47b0:	add	r2, r6, #8
    47b4:	add	r3, sp, #2000	; 0x7d0
    47b8:	add	r3, r3, #4096	; 0x1000
    47bc:	mov	lr, #130	; 0x82
    47c0:	ldr	ip, [r3], #4
    47c4:	subs	lr, lr, #1
    47c8:	str	ip, [r2], #4
    47cc:	bne	47c0 <eval_integer+0x1580>
    47d0:	ldr	ip, [sp, #136]	; 0x88
    47d4:	asr	r0, ip, #31
    47d8:	str	ip, [r4]
    47dc:	str	r0, [r4, #4]
    47e0:	b	4f40 <eval_integer+0x1d00>
    47e4:	ldr	r3, [r6]
    47e8:	cmp	r3, #0
    47ec:	bne	4804 <eval_integer+0x15c4>
    47f0:	ldr	r0, [pc, #1908]	; 4f6c <eval_integer+0x1d2c>
    47f4:	ldr	r1, [pc, #1924]	; 4f80 <eval_integer+0x1d40>
    47f8:	movw	r2, #2605	; 0xa2d
    47fc:	ldr	r3, [pc, #1904]	; 4f74 <eval_integer+0x1d34>
    4800:	bl	0 <__assert_fail>
    4804:	add	r0, r6, #8
    4808:	mov	r2, r0
    480c:	add	r3, sp, #472	; 0x1d8
    4810:	add	r3, r3, #6144	; 0x1800
    4814:	mov	lr, #130	; 0x82
    4818:	ldr	ip, [r2], #4
    481c:	subs	lr, lr, #1
    4820:	str	ip, [r3], #4
    4824:	bne	4818 <eval_integer+0x15d8>
    4828:	ldr	r1, [r5, #16]
    482c:	mov	r0, r6
    4830:	bl	6fa4 <eval_cursor>
    4834:	cmp	r0, #0
    4838:	beq	4844 <eval_integer+0x1604>
    483c:	mvn	r0, #0
    4840:	b	4f44 <eval_integer+0x1d04>
    4844:	bl	0 <coda_get_option_use_fast_size_expressions>
    4848:	mov	r5, r0
    484c:	mov	r0, #0
    4850:	bl	0 <coda_set_option_use_fast_size_expressions>
    4854:	add	r0, r6, #8
    4858:	mov	r1, r4
    485c:	bl	0 <coda_cursor_get_bit_size>
    4860:	cmp	r0, #0
    4864:	beq	4878 <eval_integer+0x1638>
    4868:	mov	r0, r5
    486c:	bl	0 <coda_set_option_use_fast_size_expressions>
    4870:	mvn	r0, #0
    4874:	b	4f44 <eval_integer+0x1d04>
    4878:	mov	r0, r5
    487c:	bl	0 <coda_set_option_use_fast_size_expressions>
    4880:	add	r0, r6, #8
    4884:	add	r2, sp, #472	; 0x1d8
    4888:	add	r2, r2, #6144	; 0x1800
    488c:	mov	r3, r0
    4890:	mov	lr, #130	; 0x82
    4894:	ldr	ip, [r2], #4
    4898:	subs	lr, lr, #1
    489c:	str	ip, [r3], #4
    48a0:	bne	4894 <eval_integer+0x1654>
    48a4:	b	4f40 <eval_integer+0x1d00>
    48a8:	ldr	ip, [r6]
    48ac:	cmp	ip, #0
    48b0:	bne	48c8 <eval_integer+0x1688>
    48b4:	ldr	r0, [pc, #1712]	; 4f6c <eval_integer+0x1d2c>
    48b8:	ldr	r1, [pc, #1728]	; 4f80 <eval_integer+0x1d40>
    48bc:	movw	r2, #2627	; 0xa43
    48c0:	ldr	r3, [pc, #1708]	; 4f74 <eval_integer+0x1d34>
    48c4:	bl	0 <__assert_fail>
    48c8:	add	r3, r6, #8
    48cc:	mov	r2, r3
    48d0:	add	r3, sp, #3040	; 0xbe0
    48d4:	add	r3, r3, #4096	; 0x1000
    48d8:	mov	lr, #130	; 0x82
    48dc:	ldr	ip, [r2], #4
    48e0:	subs	lr, lr, #1
    48e4:	str	ip, [r3], #4
    48e8:	bne	48dc <eval_integer+0x169c>
    48ec:	ldr	r1, [r5, #16]
    48f0:	mov	r0, r6
    48f4:	bl	6fa4 <eval_cursor>
    48f8:	cmp	r0, #0
    48fc:	beq	4908 <eval_integer+0x16c8>
    4900:	mvn	r0, #0
    4904:	b	4f44 <eval_integer+0x1d04>
    4908:	bl	0 <coda_get_option_use_fast_size_expressions>
    490c:	mov	r5, r0
    4910:	mov	r0, #0
    4914:	bl	0 <coda_set_option_use_fast_size_expressions>
    4918:	add	r0, r6, #8
    491c:	mov	r1, r4
    4920:	bl	0 <coda_cursor_get_byte_size>
    4924:	cmp	r0, #0
    4928:	beq	493c <eval_integer+0x16fc>
    492c:	mov	r0, r5
    4930:	bl	0 <coda_set_option_use_fast_size_expressions>
    4934:	mvn	r0, #0
    4938:	b	4f44 <eval_integer+0x1d04>
    493c:	mov	r0, r5
    4940:	bl	0 <coda_set_option_use_fast_size_expressions>
    4944:	add	r0, r6, #8
    4948:	add	r2, sp, #3040	; 0xbe0
    494c:	add	r2, r2, #4096	; 0x1000
    4950:	mov	r3, r0
    4954:	mov	lr, #130	; 0x82
    4958:	ldr	ip, [r2], #4
    495c:	subs	lr, lr, #1
    4960:	str	ip, [r3], #4
    4964:	bne	4958 <eval_integer+0x1718>
    4968:	b	4f40 <eval_integer+0x1d00>
    496c:	ldr	r0, [r6]
    4970:	cmp	r0, #0
    4974:	bne	498c <eval_integer+0x174c>
    4978:	ldr	r0, [pc, #1516]	; 4f6c <eval_integer+0x1d2c>
    497c:	ldr	r1, [pc, #1532]	; 4f80 <eval_integer+0x1d40>
    4980:	movw	r2, #2648	; 0xa58
    4984:	ldr	r3, [pc, #1512]	; 4f74 <eval_integer+0x1d34>
    4988:	bl	0 <__assert_fail>
    498c:	add	r2, r6, #8
    4990:	add	r3, sp, #488	; 0x1e8
    4994:	add	r3, r3, #7168	; 0x1c00
    4998:	mov	lr, #130	; 0x82
    499c:	ldr	ip, [r2], #4
    49a0:	subs	lr, lr, #1
    49a4:	str	ip, [r3], #4
    49a8:	bne	499c <eval_integer+0x175c>
    49ac:	ldr	r1, [r5, #16]
    49b0:	mov	r0, r6
    49b4:	bl	6fa4 <eval_cursor>
    49b8:	cmp	r0, #0
    49bc:	beq	49c8 <eval_integer+0x1788>
    49c0:	mvn	r0, #0
    49c4:	b	4f44 <eval_integer+0x1d04>
    49c8:	add	r0, r6, #8
    49cc:	mov	r1, r4
    49d0:	bl	0 <coda_cursor_get_file_bit_offset>
    49d4:	cmp	r0, #0
    49d8:	beq	49e4 <eval_integer+0x17a4>
    49dc:	mvn	r0, #0
    49e0:	b	4f44 <eval_integer+0x1d04>
    49e4:	add	r0, r6, #8
    49e8:	add	r2, sp, #488	; 0x1e8
    49ec:	add	r2, r2, #7168	; 0x1c00
    49f0:	mov	r3, r0
    49f4:	mov	lr, #130	; 0x82
    49f8:	ldr	ip, [r2], #4
    49fc:	subs	lr, lr, #1
    4a00:	str	ip, [r3], #4
    4a04:	bne	49f8 <eval_integer+0x17b8>
    4a08:	b	4f40 <eval_integer+0x1d00>
    4a0c:	ldr	ip, [r6]
    4a10:	cmp	ip, #0
    4a14:	bne	4a2c <eval_integer+0x17ec>
    4a18:	ldr	r0, [pc, #1356]	; 4f6c <eval_integer+0x1d2c>
    4a1c:	ldr	r1, [pc, #1372]	; 4f80 <eval_integer+0x1d40>
    4a20:	movw	r2, #2665	; 0xa69
    4a24:	ldr	r3, [pc, #1352]	; 4f74 <eval_integer+0x1d34>
    4a28:	bl	0 <__assert_fail>
    4a2c:	add	r3, r6, #8
    4a30:	mov	r2, r3
    4a34:	add	r3, sp, #4080	; 0xff0
    4a38:	add	r3, r3, #4096	; 0x1000
    4a3c:	mov	lr, #130	; 0x82
    4a40:	ldr	ip, [r2], #4
    4a44:	subs	lr, lr, #1
    4a48:	str	ip, [r3], #4
    4a4c:	bne	4a40 <eval_integer+0x1800>
    4a50:	ldr	r1, [r5, #16]
    4a54:	mov	r0, r6
    4a58:	bl	6fa4 <eval_cursor>
    4a5c:	cmp	r0, #0
    4a60:	beq	4a6c <eval_integer+0x182c>
    4a64:	mvn	r0, #0
    4a68:	b	4f44 <eval_integer+0x1d04>
    4a6c:	add	r0, r6, #8
    4a70:	mov	r1, r4
    4a74:	bl	0 <coda_cursor_get_file_byte_offset>
    4a78:	cmp	r0, #0
    4a7c:	beq	4a88 <eval_integer+0x1848>
    4a80:	mvn	r0, #0
    4a84:	b	4f44 <eval_integer+0x1d04>
    4a88:	add	r0, r6, #8
    4a8c:	add	r2, sp, #4080	; 0xff0
    4a90:	add	r2, r2, #4096	; 0x1000
    4a94:	mov	r3, r0
    4a98:	mov	lr, #130	; 0x82
    4a9c:	ldr	ip, [r2], #4
    4aa0:	subs	lr, lr, #1
    4aa4:	str	ip, [r3], #4
    4aa8:	bne	4a9c <eval_integer+0x185c>
    4aac:	b	4f40 <eval_integer+0x1d00>
    4ab0:	ldr	r2, [r6]
    4ab4:	cmp	r2, #0
    4ab8:	bne	4ad0 <eval_integer+0x1890>
    4abc:	ldr	r0, [pc, #1192]	; 4f6c <eval_integer+0x1d2c>
    4ac0:	ldr	r1, [pc, #1208]	; 4f80 <eval_integer+0x1d40>
    4ac4:	movw	r2, #2679	; 0xa77
    4ac8:	ldr	r3, [pc, #1188]	; 4f74 <eval_integer+0x1d34>
    4acc:	bl	0 <__assert_fail>
    4ad0:	ldr	r0, [r6]
    4ad4:	ldr	r0, [r0]
    4ad8:	mov	r1, r4
    4adc:	bl	0 <coda_get_product_file_size>
    4ae0:	cmp	r0, #0
    4ae4:	beq	4f40 <eval_integer+0x1d00>
    4ae8:	mvn	r0, #0
    4aec:	b	4f44 <eval_integer+0x1d04>
    4af0:	ldr	ip, [r6]
    4af4:	cmp	ip, #0
    4af8:	bne	4b10 <eval_integer+0x18d0>
    4afc:	ldr	r0, [pc, #1128]	; 4f6c <eval_integer+0x1d2c>
    4b00:	ldr	r1, [pc, #1144]	; 4f80 <eval_integer+0x1d40>
    4b04:	movw	r2, #2689	; 0xa81
    4b08:	ldr	r3, [pc, #1124]	; 4f74 <eval_integer+0x1d34>
    4b0c:	bl	0 <__assert_fail>
    4b10:	ldr	r0, [r6]
    4b14:	ldr	r0, [r0]
    4b18:	add	r1, sp, #140	; 0x8c
    4b1c:	bl	0 <coda_get_product_version>
    4b20:	cmp	r0, #0
    4b24:	beq	4b30 <eval_integer+0x18f0>
    4b28:	mvn	r0, #0
    4b2c:	b	4f44 <eval_integer+0x1d04>
    4b30:	ldr	r3, [sp, #140]	; 0x8c
    4b34:	asr	ip, r3, #31
    4b38:	str	r3, [r4]
    4b3c:	str	ip, [r4, #4]
    4b40:	b	4f40 <eval_integer+0x1d00>
    4b44:	ldr	r2, [r6]
    4b48:	cmp	r2, #0
    4b4c:	bne	4b64 <eval_integer+0x1924>
    4b50:	ldr	r0, [pc, #1044]	; 4f6c <eval_integer+0x1d2c>
    4b54:	ldr	r1, [pc, #1060]	; 4f80 <eval_integer+0x1d40>
    4b58:	movw	r2, #2702	; 0xa8e
    4b5c:	ldr	r3, [pc, #1040]	; 4f74 <eval_integer+0x1d34>
    4b60:	bl	0 <__assert_fail>
    4b64:	add	r0, r6, #8
    4b68:	mov	r2, r0
    4b6c:	add	r3, sp, #504	; 0x1f8
    4b70:	add	r3, r3, #8192	; 0x2000
    4b74:	mov	lr, #130	; 0x82
    4b78:	ldr	ip, [r2], #4
    4b7c:	subs	lr, lr, #1
    4b80:	str	ip, [r3], #4
    4b84:	bne	4b78 <eval_integer+0x1938>
    4b88:	ldr	r1, [r5, #16]
    4b8c:	mov	r0, r6
    4b90:	bl	6fa4 <eval_cursor>
    4b94:	cmp	r0, #0
    4b98:	beq	4ba4 <eval_integer+0x1964>
    4b9c:	mvn	r0, #0
    4ba0:	b	4f44 <eval_integer+0x1d04>
    4ba4:	add	r0, r6, #8
    4ba8:	add	r1, sp, #144	; 0x90
    4bac:	bl	0 <coda_cursor_get_index>
    4bb0:	cmp	r0, #0
    4bb4:	beq	4bc0 <eval_integer+0x1980>
    4bb8:	mvn	r0, #0
    4bbc:	b	4f44 <eval_integer+0x1d04>
    4bc0:	add	r2, r6, #8
    4bc4:	add	r3, sp, #504	; 0x1f8
    4bc8:	add	r3, r3, #8192	; 0x2000
    4bcc:	mov	lr, #130	; 0x82
    4bd0:	ldr	ip, [r3], #4
    4bd4:	subs	lr, lr, #1
    4bd8:	str	ip, [r2], #4
    4bdc:	bne	4bd0 <eval_integer+0x1990>
    4be0:	ldr	r1, [sp, #144]	; 0x90
    4be4:	asr	r2, r1, #31
    4be8:	str	r1, [r4]
    4bec:	str	r2, [r4, #4]
    4bf0:	b	4f40 <eval_integer+0x1d00>
    4bf4:	ldr	r3, [r5, #12]
    4bf8:	ldrb	ip, [r3]
    4bfc:	lsl	r3, ip, #3
    4c00:	add	r3, r6, r3
    4c04:	sub	lr, r3, #4096	; 0x1000
    4c08:	ldr	r0, [lr, #3784]	; 0xec8
    4c0c:	sub	lr, r3, #4096	; 0x1000
    4c10:	ldr	r2, [lr, #3788]	; 0xecc
    4c14:	str	r0, [r4]
    4c18:	str	r2, [r4, #4]
    4c1c:	b	4f40 <eval_integer+0x1d00>
    4c20:	ldr	r3, [r6]
    4c24:	cmp	r3, #0
    4c28:	bne	4c40 <eval_integer+0x1a00>
    4c2c:	ldr	r0, [pc, #824]	; 4f6c <eval_integer+0x1d2c>
    4c30:	ldr	r1, [pc, #840]	; 4f80 <eval_integer+0x1d40>
    4c34:	movw	r2, #2724	; 0xaa4
    4c38:	ldr	r3, [pc, #820]	; 4f74 <eval_integer+0x1d34>
    4c3c:	bl	0 <__assert_fail>
    4c40:	ldr	r1, [r6, #560]	; 0x230
    4c44:	cmp	r1, #0
    4c48:	beq	4c60 <eval_integer+0x1a20>
    4c4c:	mvn	r0, #400	; 0x190
    4c50:	ldr	r1, [pc, #784]	; 4f68 <eval_integer+0x1d28>
    4c54:	bl	0 <coda_set_error>
    4c58:	mvn	r0, #0
    4c5c:	b	4f44 <eval_integer+0x1d04>
    4c60:	ldr	r1, [r6]
    4c64:	ldr	r0, [r1]
    4c68:	ldr	r1, [r5, #12]
    4c6c:	add	r2, sp, #40	; 0x28
    4c70:	bl	0 <coda_product_variable_get_size>
    4c74:	cmp	r0, #0
    4c78:	beq	4c84 <eval_integer+0x1a44>
    4c7c:	mvn	r0, #0
    4c80:	b	4f44 <eval_integer+0x1d04>
    4c84:	ldr	r3, [r5, #12]
    4c88:	str	r3, [r6, #560]	; 0x230
    4c8c:	mov	r7, #0
    4c90:	ldr	r3, [sp, #40]	; 0x28
    4c94:	cmp	r7, r3
    4c98:	bge	4cfc <eval_integer+0x1abc>
    4c9c:	asr	r2, r7, #31
    4ca0:	mov	r1, r7
    4ca4:	str	r1, [r6, #552]	; 0x228
    4ca8:	str	r2, [r6, #556]	; 0x22c
    4cac:	ldr	r1, [r5, #16]
    4cb0:	add	r2, sp, #44	; 0x2c
    4cb4:	mov	r0, r6
    4cb8:	bl	c0c <eval_boolean>
    4cbc:	cmp	r0, #0
    4cc0:	beq	4ccc <eval_integer+0x1a8c>
    4cc4:	mvn	r0, #0
    4cc8:	b	4f44 <eval_integer+0x1d04>
    4ccc:	ldr	r2, [sp, #44]	; 0x2c
    4cd0:	cmp	r2, #0
    4cd4:	beq	4cf4 <eval_integer+0x1ab4>
    4cd8:	asr	r0, r7, #31
    4cdc:	str	r7, [r4]
    4ce0:	str	r0, [r4, #4]
    4ce4:	mov	r2, #0
    4ce8:	str	r2, [r6, #560]	; 0x230
    4cec:	mov	r0, #0
    4cf0:	b	4f44 <eval_integer+0x1d04>
    4cf4:	add	r7, r7, #1
    4cf8:	b	4c90 <eval_integer+0x1a50>
    4cfc:	mvn	r0, #0
    4d00:	mvn	ip, #0
    4d04:	str	ip, [r4]
    4d08:	str	r0, [r4, #4]
    4d0c:	mov	r3, #0
    4d10:	str	r3, [r6, #560]	; 0x230
    4d14:	b	4f40 <eval_integer+0x1d00>
    4d18:	mov	r1, #0
    4d1c:	mov	r0, #0
    4d20:	str	r0, [sp, #152]	; 0x98
    4d24:	str	r1, [sp, #156]	; 0x9c
    4d28:	ldr	ip, [r6]
    4d2c:	cmp	ip, #0
    4d30:	bne	4d48 <eval_integer+0x1b08>
    4d34:	ldr	r0, [pc, #560]	; 4f6c <eval_integer+0x1d2c>
    4d38:	ldr	r1, [pc, #576]	; 4f80 <eval_integer+0x1d40>
    4d3c:	movw	r2, #2761	; 0xac9
    4d40:	ldr	r3, [pc, #556]	; 4f74 <eval_integer+0x1d34>
    4d44:	bl	0 <__assert_fail>
    4d48:	ldr	r2, [r5, #16]
    4d4c:	cmp	r2, #0
    4d50:	beq	4da8 <eval_integer+0x1b68>
    4d54:	ldr	r1, [r6, #560]	; 0x230
    4d58:	cmp	r1, #0
    4d5c:	beq	4d88 <eval_integer+0x1b48>
    4d60:	ldr	r0, [r5, #12]
    4d64:	bl	0 <strcmp>
    4d68:	cmp	r0, #0
    4d6c:	bne	4d88 <eval_integer+0x1b48>
    4d70:	mvn	r0, #400	; 0x190
    4d74:	ldr	r1, [pc, #520]	; 4f84 <eval_integer+0x1d44>
    4d78:	ldr	r2, [r5, #12]
    4d7c:	bl	0 <coda_set_error>
    4d80:	mvn	r0, #0
    4d84:	b	4f44 <eval_integer+0x1d04>
    4d88:	ldr	r1, [r5, #16]
    4d8c:	add	r2, sp, #152	; 0x98
    4d90:	mov	r0, r6
    4d94:	bl	3240 <eval_integer>
    4d98:	cmp	r0, #0
    4d9c:	beq	4dd4 <eval_integer+0x1b94>
    4da0:	mvn	r0, #0
    4da4:	b	4f44 <eval_integer+0x1d04>
    4da8:	ldr	r0, [r6, #560]	; 0x230
    4dac:	cmp	r0, #0
    4db0:	beq	4dd4 <eval_integer+0x1b94>
    4db4:	ldr	r1, [r5, #12]
    4db8:	bl	0 <strcmp>
    4dbc:	cmp	r0, #0
    4dc0:	bne	4dd4 <eval_integer+0x1b94>
    4dc4:	ldr	ip, [r6, #552]	; 0x228
    4dc8:	ldr	r0, [r6, #556]	; 0x22c
    4dcc:	str	ip, [sp, #152]	; 0x98
    4dd0:	str	r0, [sp, #156]	; 0x9c
    4dd4:	ldr	r1, [r6]
    4dd8:	ldr	r0, [r1]
    4ddc:	ldr	r1, [r5, #12]
    4de0:	ldr	r2, [sp, #152]	; 0x98
    4de4:	add	r3, sp, #48	; 0x30
    4de8:	bl	0 <coda_product_variable_get_pointer>
    4dec:	cmp	r0, #0
    4df0:	beq	4dfc <eval_integer+0x1bbc>
    4df4:	mvn	r0, #0
    4df8:	b	4f44 <eval_integer+0x1d04>
    4dfc:	ldr	r0, [sp, #48]	; 0x30
    4e00:	ldr	r3, [r0]
    4e04:	ldr	r2, [r0, #4]
    4e08:	str	r3, [r4]
    4e0c:	str	r2, [r4, #4]
    4e10:	b	4f40 <eval_integer+0x1d00>
    4e14:	ldr	r2, [r6]
    4e18:	cmp	r2, #0
    4e1c:	bne	4e34 <eval_integer+0x1bf4>
    4e20:	ldr	r0, [pc, #324]	; 4f6c <eval_integer+0x1d2c>
    4e24:	ldr	r1, [pc, #340]	; 4f80 <eval_integer+0x1d40>
    4e28:	movw	r2, #2792	; 0xae8
    4e2c:	ldr	r3, [pc, #320]	; 4f74 <eval_integer+0x1d34>
    4e30:	bl	0 <__assert_fail>
    4e34:	add	r1, r6, #8
    4e38:	mov	r2, r1
    4e3c:	add	r3, sp, #376	; 0x178
    4e40:	mov	lr, #130	; 0x82
    4e44:	ldr	ip, [r2], #4
    4e48:	subs	lr, lr, #1
    4e4c:	str	ip, [r3], #4
    4e50:	bne	4e44 <eval_integer+0x1c04>
    4e54:	ldr	r1, [r5, #16]
    4e58:	mov	r0, r6
    4e5c:	bl	6fa4 <eval_cursor>
    4e60:	cmp	r0, #0
    4e64:	beq	4e70 <eval_integer+0x1c30>
    4e68:	mvn	r0, #0
    4e6c:	b	4f44 <eval_integer+0x1d04>
    4e70:	ldr	r1, [r5, #20]
    4e74:	mov	r2, r4
    4e78:	mov	r0, r6
    4e7c:	bl	3240 <eval_integer>
    4e80:	cmp	r0, #0
    4e84:	beq	4e90 <eval_integer+0x1c50>
    4e88:	mvn	r0, #0
    4e8c:	b	4f44 <eval_integer+0x1d04>
    4e90:	add	r0, r6, #8
    4e94:	add	r2, sp, #376	; 0x178
    4e98:	mov	r3, r0
    4e9c:	mov	lr, #130	; 0x82
    4ea0:	ldr	ip, [r2], #4
    4ea4:	subs	lr, lr, #1
    4ea8:	str	ip, [r3], #4
    4eac:	bne	4ea0 <eval_integer+0x1c60>
    4eb0:	b	4f40 <eval_integer+0x1d00>
    4eb4:	ldr	r0, [r5, #12]
    4eb8:	ldrb	r3, [r0]
    4ebc:	sub	r9, r3, #105	; 0x69
    4ec0:	lsl	r2, r9, #3
    4ec4:	add	r2, r6, r2
    4ec8:	ldr	r7, [r2, #528]	; 0x210
    4ecc:	ldr	r8, [r2, #532]	; 0x214
    4ed0:	ldr	r1, [r5, #16]
    4ed4:	add	r2, r2, #528	; 0x210
    4ed8:	mov	r0, r6
    4edc:	bl	3240 <eval_integer>
    4ee0:	cmp	r0, #0
    4ee4:	beq	4ef0 <eval_integer+0x1cb0>
    4ee8:	mvn	r0, #0
    4eec:	b	4f44 <eval_integer+0x1d04>
    4ef0:	ldr	r1, [r5, #20]
    4ef4:	mov	r2, r4
    4ef8:	mov	r0, r6
    4efc:	bl	3240 <eval_integer>
    4f00:	cmp	r0, #0
    4f04:	beq	4f10 <eval_integer+0x1cd0>
    4f08:	mvn	r0, #0
    4f0c:	b	4f44 <eval_integer+0x1d04>
    4f10:	lsl	r0, r9, #3
    4f14:	add	r0, r6, r0
    4f18:	str	r7, [r0, #528]	; 0x210
    4f1c:	str	r8, [r0, #532]	; 0x214
    4f20:	b	4f40 <eval_integer+0x1d00>
    4f24:	ldr	r0, [pc, #80]	; 4f7c <eval_integer+0x1d3c>
    4f28:	ldr	r1, [pc, #80]	; 4f80 <eval_integer+0x1d40>
    4f2c:	movw	r2, #2823	; 0xb07
    4f30:	ldr	r3, [pc, #60]	; 4f74 <eval_integer+0x1d34>
    4f34:	bl	0 <__assert_fail>
    4f38:	mov	r0, #1
    4f3c:	bl	0 <exit>
    4f40:	mov	r0, #0
    4f44:	ldr	r4, [sp, #16]
    4f48:	ldr	r5, [sp, #20]
    4f4c:	ldr	r6, [sp, #24]
    4f50:	ldr	r7, [sp, #28]
    4f54:	ldr	r8, [sp, #32]
    4f58:	ldr	r9, [sp, #36]	; 0x24
    4f5c:	ldr	lr, [sp, #8]
    4f60:	add	sp, sp, #9216	; 0x2400
    4f64:	bx	lr
    4f68:	.word	0x0000020a
    4f6c:	.word	0x0000046b
    4f70:	.word	0x00000000
    4f74:	.word	0x00000d84
    4f78:	.word	0x00000a83
    4f7c:	.word	0x00000bf8
    4f80:	.word	0x0000053b
    4f84:	.word	0x0000031f
    4f88:	.word	0x000008da

00004f8c <eval_string>:
    4f8c:	mov	ip, sp
    4f90:	sub	sp, sp, #3664	; 0xe50
    4f94:	str	ip, [sp, #16]
    4f98:	str	lr, [sp, #20]
    4f9c:	str	r4, [sp, #24]
    4fa0:	str	r5, [sp, #28]
    4fa4:	str	r6, [sp, #32]
    4fa8:	str	r7, [sp, #36]	; 0x24
    4fac:	str	r8, [sp, #40]	; 0x28
    4fb0:	str	r9, [sp, #44]	; 0x2c
    4fb4:	str	sl, [sp, #48]	; 0x30
    4fb8:	str	fp, [sp, #52]	; 0x34
    4fbc:	ldr	r6, [ip]
    4fc0:	mov	r5, r3
    4fc4:	mov	r7, r2
    4fc8:	mov	r9, r1
    4fcc:	mov	r8, r0
    4fd0:	ldr	r1, [r9]
    4fd4:	cmp	r1, #22
    4fd8:	beq	6aec <eval_string+0x1b60>
    4fdc:	cmp	r1, #21
    4fe0:	beq	6aec <eval_string+0x1b60>
    4fe4:	cmp	r1, #57	; 0x39
    4fe8:	bcs	5d14 <eval_string+0xd88>
    4fec:	cmp	r1, #16
    4ff0:	bcs	5754 <eval_string+0x7c8>
    4ff4:	cmp	r1, #8
    4ff8:	bcs	5328 <eval_string+0x39c>
    4ffc:	cmp	r1, #1
    5000:	beq	51f0 <eval_string+0x264>
    5004:	cmp	r1, #3
    5008:	bne	6888 <eval_string+0x18fc>
    500c:	ldr	r3, [r8]
    5010:	cmp	r3, #0
    5014:	bne	502c <eval_string+0xa0>
    5018:	ldr	r0, [pc, #3836]	; 5f1c <eval_string+0xf90>
    501c:	ldr	r1, [pc, #3844]	; 5f28 <eval_string+0xf9c>
    5020:	movw	r2, #3234	; 0xca2
    5024:	ldr	r3, [pc, #3828]	; 5f20 <eval_string+0xf94>
    5028:	bl	0 <__assert_fail>
    502c:	add	ip, r8, #8
    5030:	mov	r2, ip
    5034:	add	r3, sp, #56	; 0x38
    5038:	add	r3, r3, #2048	; 0x800
    503c:	mov	lr, #130	; 0x82
    5040:	ldr	ip, [r2], #4
    5044:	subs	lr, lr, #1
    5048:	str	ip, [r3], #4
    504c:	bne	5040 <eval_string+0xb4>
    5050:	ldr	r1, [r9, #16]
    5054:	mov	r0, r8
    5058:	bl	6fa4 <eval_cursor>
    505c:	cmp	r0, #0
    5060:	beq	506c <eval_string+0xe0>
    5064:	mvn	r0, #0
    5068:	b	6b50 <eval_string+0x1bc4>
    506c:	add	r0, r8, #8
    5070:	add	r1, sp, #132	; 0x84
    5074:	bl	0 <coda_cursor_get_num_elements>
    5078:	cmp	r0, #0
    507c:	beq	5088 <eval_string+0xfc>
    5080:	mvn	r0, #0
    5084:	b	6b50 <eval_string+0x1bc4>
    5088:	mov	r2, #0
    508c:	str	r2, [r7]
    5090:	mov	r0, #0
    5094:	str	r0, [r5]
    5098:	mov	ip, #0
    509c:	str	ip, [r6]
    50a0:	ldr	r2, [sp, #132]	; 0x84
    50a4:	cmp	r2, #0
    50a8:	ble	51c8 <eval_string+0x23c>
    50ac:	add	r0, r8, #8
    50b0:	bl	0 <coda_cursor_goto_first_array_element>
    50b4:	cmp	r0, #0
    50b8:	beq	50c4 <eval_string+0x138>
    50bc:	mvn	r0, #0
    50c0:	b	6b50 <eval_string+0x1bc4>
    50c4:	mov	r7, #0
    50c8:	ldr	r3, [sp, #132]	; 0x84
    50cc:	cmp	r7, r3
    50d0:	bge	51c8 <eval_string+0x23c>
    50d4:	ldr	r1, [r9, #20]
    50d8:	add	r2, sp, #136	; 0x88
    50dc:	add	r3, sp, #140	; 0x8c
    50e0:	add	r0, sp, #144	; 0x90
    50e4:	str	r0, [sp]
    50e8:	mov	r0, r8
    50ec:	bl	4f8c <eval_string>
    50f0:	cmp	r0, #0
    50f4:	beq	5100 <eval_string+0x174>
    50f8:	mvn	r0, #0
    50fc:	b	6b50 <eval_string+0x1bc4>
    5100:	ldr	r3, [sp, #140]	; 0x8c
    5104:	cmp	r3, #0
    5108:	ble	5198 <eval_string+0x20c>
    510c:	ldr	r0, [r6]
    5110:	ldr	r1, [r5]
    5114:	add	r2, r1, r3
    5118:	add	r1, r2, #1
    511c:	bl	0 <realloc>
    5120:	mov	r4, r0
    5124:	cmp	r4, #0
    5128:	bne	5160 <eval_string+0x1d4>
    512c:	mvn	r0, #0
    5130:	ldr	r1, [pc, #3552]	; 5f18 <eval_string+0xf8c>
    5134:	ldr	r2, [r5]
    5138:	ldr	r3, [sp, #140]	; 0x8c
    513c:	add	r2, r2, r3
    5140:	ldr	r3, [pc, #3552]	; 5f28 <eval_string+0xf9c>
    5144:	movw	ip, #3275	; 0xccb
    5148:	str	ip, [sp]
    514c:	bl	0 <coda_set_error>
    5150:	ldr	r0, [sp, #144]	; 0x90
    5154:	bl	0 <free>
    5158:	mvn	r0, #0
    515c:	b	6b50 <eval_string+0x1bc4>
    5160:	ldr	r1, [r5]
    5164:	add	r0, r4, r1
    5168:	ldr	ip, [sp, #144]	; 0x90
    516c:	ldr	r3, [sp, #136]	; 0x88
    5170:	add	r1, ip, r3
    5174:	ldr	r2, [sp, #140]	; 0x8c
    5178:	bl	0 <memcpy>
    517c:	ldr	r0, [sp, #144]	; 0x90
    5180:	bl	0 <free>
    5184:	ldr	r2, [r5]
    5188:	ldr	r1, [sp, #140]	; 0x8c
    518c:	add	ip, r2, r1
    5190:	str	ip, [r5]
    5194:	str	r4, [r6]
    5198:	ldr	ip, [sp, #132]	; 0x84
    519c:	sub	r3, ip, #1
    51a0:	cmp	r7, r3
    51a4:	bge	51c0 <eval_string+0x234>
    51a8:	add	r0, r8, #8
    51ac:	bl	0 <coda_cursor_goto_next_array_element>
    51b0:	cmp	r0, #0
    51b4:	beq	51c0 <eval_string+0x234>
    51b8:	mvn	r0, #0
    51bc:	b	6b50 <eval_string+0x1bc4>
    51c0:	add	r7, r7, #1
    51c4:	b	50c8 <eval_string+0x13c>
    51c8:	add	r0, r8, #8
    51cc:	add	r2, sp, #56	; 0x38
    51d0:	add	r2, r2, #2048	; 0x800
    51d4:	mov	r3, r0
    51d8:	mov	lr, #130	; 0x82
    51dc:	ldr	ip, [r2], #4
    51e0:	subs	lr, lr, #1
    51e4:	str	ip, [r3], #4
    51e8:	bne	51dc <eval_string+0x250>
    51ec:	b	6ae4 <eval_string+0x1b58>
    51f0:	ldr	r1, [r9, #16]
    51f4:	add	r2, sp, #60	; 0x3c
    51f8:	add	r3, sp, #68	; 0x44
    51fc:	add	r0, sp, #76	; 0x4c
    5200:	str	r0, [sp]
    5204:	mov	r0, r8
    5208:	bl	4f8c <eval_string>
    520c:	cmp	r0, #0
    5210:	beq	521c <eval_string+0x290>
    5214:	mvn	r0, #0
    5218:	b	6b50 <eval_string+0x1bc4>
    521c:	ldr	r1, [r9, #20]
    5220:	add	r2, sp, #64	; 0x40
    5224:	add	r3, sp, #72	; 0x48
    5228:	add	r0, sp, #80	; 0x50
    522c:	str	r0, [sp]
    5230:	mov	r0, r8
    5234:	bl	4f8c <eval_string>
    5238:	cmp	r0, #0
    523c:	beq	5250 <eval_string+0x2c4>
    5240:	ldr	r0, [sp, #76]	; 0x4c
    5244:	bl	0 <free>
    5248:	mvn	r0, #0
    524c:	b	6b50 <eval_string+0x1bc4>
    5250:	mov	r3, #0
    5254:	str	r3, [r7]
    5258:	ldr	ip, [sp, #68]	; 0x44
    525c:	ldr	r1, [sp, #72]	; 0x48
    5260:	add	r3, ip, r1
    5264:	str	r3, [r5]
    5268:	cmp	r3, #0
    526c:	ble	52f4 <eval_string+0x368>
    5270:	add	r0, r3, #1
    5274:	bl	0 <malloc>
    5278:	str	r0, [r6]
    527c:	cmp	r0, #0
    5280:	bne	52ac <eval_string+0x320>
    5284:	mvn	r0, #0
    5288:	ldr	r1, [pc, #3208]	; 5f18 <eval_string+0xf8c>
    528c:	ldr	r2, [r5]
    5290:	add	r2, r2, #1
    5294:	ldr	r3, [pc, #3212]	; 5f28 <eval_string+0xf9c>
    5298:	movw	r4, #3031	; 0xbd7
    529c:	str	r4, [sp]
    52a0:	bl	0 <coda_set_error>
    52a4:	mvn	r0, #0
    52a8:	b	6b50 <eval_string+0x1bc4>
    52ac:	ldr	r2, [sp, #68]	; 0x44
    52b0:	cmp	r2, #0
    52b4:	ble	52c8 <eval_string+0x33c>
    52b8:	ldr	ip, [sp, #76]	; 0x4c
    52bc:	ldr	r3, [sp, #60]	; 0x3c
    52c0:	add	r1, ip, r3
    52c4:	bl	0 <memcpy>
    52c8:	ldr	r2, [sp, #72]	; 0x48
    52cc:	cmp	r2, #0
    52d0:	ble	52fc <eval_string+0x370>
    52d4:	ldr	ip, [r6]
    52d8:	ldr	r3, [sp, #68]	; 0x44
    52dc:	add	r0, ip, r3
    52e0:	ldr	r3, [sp, #80]	; 0x50
    52e4:	ldr	r1, [sp, #64]	; 0x40
    52e8:	add	r1, r3, r1
    52ec:	bl	0 <memcpy>
    52f0:	b	52fc <eval_string+0x370>
    52f4:	mov	r2, #0
    52f8:	str	r2, [r6]
    52fc:	ldr	r0, [sp, #68]	; 0x44
    5300:	cmp	r0, #0
    5304:	ble	5310 <eval_string+0x384>
    5308:	ldr	r0, [sp, #76]	; 0x4c
    530c:	bl	0 <free>
    5310:	ldr	r0, [sp, #72]	; 0x48
    5314:	cmp	r0, #0
    5318:	ble	6ae4 <eval_string+0x1b58>
    531c:	ldr	r0, [sp, #80]	; 0x50
    5320:	bl	0 <free>
    5324:	b	6ae4 <eval_string+0x1b58>
    5328:	cmp	r1, #8
    532c:	beq	559c <eval_string+0x610>
    5330:	cmp	r1, #9
    5334:	beq	53e8 <eval_string+0x45c>
    5338:	cmp	r1, #11
    533c:	bne	6888 <eval_string+0x18fc>
    5340:	ldr	ip, [r8]
    5344:	cmp	ip, #0
    5348:	bne	5360 <eval_string+0x3d4>
    534c:	ldr	r0, [pc, #3016]	; 5f1c <eval_string+0xf90>
    5350:	ldr	r1, [pc, #3024]	; 5f28 <eval_string+0xf9c>
    5354:	movw	r2, #3763	; 0xeb3
    5358:	ldr	r3, [pc, #3008]	; 5f20 <eval_string+0xf94>
    535c:	bl	0 <__assert_fail>
    5360:	add	r0, r8, #8
    5364:	mov	r2, r0
    5368:	add	r3, sp, #544	; 0x220
    536c:	mov	lr, #130	; 0x82
    5370:	ldr	ip, [r2], #4
    5374:	subs	lr, lr, #1
    5378:	str	ip, [r3], #4
    537c:	bne	5370 <eval_string+0x3e4>
    5380:	ldr	r1, [r9, #16]
    5384:	mov	r0, r8
    5388:	bl	6fa4 <eval_cursor>
    538c:	cmp	r0, #0
    5390:	beq	539c <eval_string+0x410>
    5394:	mvn	r0, #0
    5398:	b	6b50 <eval_string+0x1bc4>
    539c:	ldr	r1, [r9, #20]
    53a0:	str	r6, [sp]
    53a4:	mov	r3, r5
    53a8:	mov	r2, r7
    53ac:	mov	r0, r8
    53b0:	bl	4f8c <eval_string>
    53b4:	cmp	r0, #0
    53b8:	beq	53c4 <eval_string+0x438>
    53bc:	mvn	r0, #0
    53c0:	b	6b50 <eval_string+0x1bc4>
    53c4:	add	r0, r8, #8
    53c8:	add	r2, sp, #544	; 0x220
    53cc:	mov	r3, r0
    53d0:	mov	lr, #130	; 0x82
    53d4:	ldr	ip, [r2], #4
    53d8:	subs	lr, lr, #1
    53dc:	str	ip, [r3], #4
    53e0:	bne	53d4 <eval_string+0x448>
    53e4:	b	6ae4 <eval_string+0x1b58>
    53e8:	ldr	r0, [r8]
    53ec:	cmp	r0, #0
    53f0:	bne	5408 <eval_string+0x47c>
    53f4:	ldr	r0, [pc, #2848]	; 5f1c <eval_string+0xf90>
    53f8:	ldr	r1, [pc, #2856]	; 5f28 <eval_string+0xf9c>
    53fc:	movw	r2, #3301	; 0xce5
    5400:	ldr	r3, [pc, #2840]	; 5f20 <eval_string+0xf94>
    5404:	bl	0 <__assert_fail>
    5408:	add	ip, r8, #8
    540c:	mov	r2, ip
    5410:	add	r3, sp, #2624	; 0xa40
    5414:	mov	lr, #130	; 0x82
    5418:	ldr	ip, [r2], #4
    541c:	subs	lr, lr, #1
    5420:	str	ip, [r3], #4
    5424:	bne	5418 <eval_string+0x48c>
    5428:	ldr	r1, [r9, #16]
    542c:	mov	r0, r8
    5430:	bl	6fa4 <eval_cursor>
    5434:	cmp	r0, #0
    5438:	beq	5444 <eval_string+0x4b8>
    543c:	mvn	r0, #0
    5440:	b	6b50 <eval_string+0x1bc4>
    5444:	add	r0, r8, #8
    5448:	add	r1, sp, #148	; 0x94
    544c:	bl	0 <coda_cursor_get_num_elements>
    5450:	cmp	r0, #0
    5454:	beq	5460 <eval_string+0x4d4>
    5458:	mvn	r0, #0
    545c:	b	6b50 <eval_string+0x1bc4>
    5460:	mov	ip, #0
    5464:	str	ip, [r7]
    5468:	mov	r1, #0
    546c:	str	r1, [r5]
    5470:	mov	r0, #0
    5474:	str	r0, [r6]
    5478:	ldr	r0, [sp, #148]	; 0x94
    547c:	cmp	r0, #0
    5480:	ble	5578 <eval_string+0x5ec>
    5484:	add	r0, r8, #8
    5488:	bl	0 <coda_cursor_goto_first_array_element>
    548c:	cmp	r0, #0
    5490:	beq	549c <eval_string+0x510>
    5494:	mvn	r0, #0
    5498:	b	6b50 <eval_string+0x1bc4>
    549c:	mov	r4, #0
    54a0:	ldr	ip, [sp, #148]	; 0x94
    54a4:	cmp	r4, ip
    54a8:	bge	5578 <eval_string+0x5ec>
    54ac:	ldr	r1, [r9, #20]
    54b0:	add	r2, sp, #152	; 0x98
    54b4:	add	r3, sp, #156	; 0x9c
    54b8:	add	r0, sp, #160	; 0xa0
    54bc:	str	r0, [sp]
    54c0:	mov	r0, r8
    54c4:	bl	4f8c <eval_string>
    54c8:	cmp	r0, #0
    54cc:	beq	54d8 <eval_string+0x54c>
    54d0:	mvn	r0, #0
    54d4:	b	6b50 <eval_string+0x1bc4>
    54d8:	ldr	r0, [sp, #152]	; 0x98
    54dc:	ldr	r1, [sp, #156]	; 0x9c
    54e0:	ldr	r2, [sp, #160]	; 0xa0
    54e4:	ldr	r3, [r7]
    54e8:	ldr	fp, [r5]
    54ec:	ldr	sl, [r6]
    54f0:	str	sl, [sp, #4]
    54f4:	str	fp, [sp]
    54f8:	bl	70 <compare_strings>
    54fc:	cmp	r0, #0
    5500:	bge	5534 <eval_string+0x5a8>
    5504:	ldr	r0, [r5]
    5508:	cmp	r0, #0
    550c:	ble	5518 <eval_string+0x58c>
    5510:	mov	r0, r6
    5514:	bl	0 <free>
    5518:	ldr	r1, [sp, #152]	; 0x98
    551c:	str	r1, [r7]
    5520:	ldr	r2, [sp, #156]	; 0x9c
    5524:	str	r2, [r5]
    5528:	ldr	r0, [sp, #160]	; 0xa0
    552c:	str	r0, [r6]
    5530:	b	5548 <eval_string+0x5bc>
    5534:	ldr	r1, [sp, #156]	; 0x9c
    5538:	cmp	r1, #0
    553c:	ble	5548 <eval_string+0x5bc>
    5540:	ldr	r0, [sp, #160]	; 0xa0
    5544:	bl	0 <free>
    5548:	ldr	r0, [sp, #148]	; 0x94
    554c:	sub	ip, r0, #1
    5550:	cmp	r4, ip
    5554:	bge	5570 <eval_string+0x5e4>
    5558:	add	r0, r8, #8
    555c:	bl	0 <coda_cursor_goto_next_array_element>
    5560:	cmp	r0, #0
    5564:	beq	5570 <eval_string+0x5e4>
    5568:	mvn	r0, #0
    556c:	b	6b50 <eval_string+0x1bc4>
    5570:	add	r4, r4, #1
    5574:	b	54a0 <eval_string+0x514>
    5578:	add	r0, r8, #8
    557c:	add	r2, sp, #2624	; 0xa40
    5580:	mov	r3, r0
    5584:	mov	lr, #130	; 0x82
    5588:	ldr	ip, [r2], #4
    558c:	subs	lr, lr, #1
    5590:	str	ip, [r3], #4
    5594:	bne	5588 <eval_string+0x5fc>
    5598:	b	6ae4 <eval_string+0x1b58>
    559c:	ldr	r3, [r8]
    55a0:	cmp	r3, #0
    55a4:	bne	55bc <eval_string+0x630>
    55a8:	ldr	r0, [pc, #2412]	; 5f1c <eval_string+0xf90>
    55ac:	ldr	r1, [pc, #2420]	; 5f28 <eval_string+0xf9c>
    55b0:	movw	r2, #3363	; 0xd23
    55b4:	ldr	r3, [pc, #2404]	; 5f20 <eval_string+0xf94>
    55b8:	bl	0 <__assert_fail>
    55bc:	add	r2, r8, #8
    55c0:	add	r3, sp, #72	; 0x48
    55c4:	add	r3, r3, #3072	; 0xc00
    55c8:	mov	lr, #130	; 0x82
    55cc:	ldr	ip, [r2], #4
    55d0:	subs	lr, lr, #1
    55d4:	str	ip, [r3], #4
    55d8:	bne	55cc <eval_string+0x640>
    55dc:	ldr	r1, [r9, #16]
    55e0:	mov	r0, r8
    55e4:	bl	6fa4 <eval_cursor>
    55e8:	cmp	r0, #0
    55ec:	beq	55f8 <eval_string+0x66c>
    55f0:	mvn	r0, #0
    55f4:	b	6b50 <eval_string+0x1bc4>
    55f8:	add	r0, r8, #8
    55fc:	add	r1, sp, #164	; 0xa4
    5600:	bl	0 <coda_cursor_get_num_elements>
    5604:	cmp	r0, #0
    5608:	beq	5614 <eval_string+0x688>
    560c:	mvn	r0, #0
    5610:	b	6b50 <eval_string+0x1bc4>
    5614:	mov	r3, #0
    5618:	str	r3, [r7]
    561c:	mov	r3, #0
    5620:	str	r3, [r5]
    5624:	mov	r1, #0
    5628:	str	r1, [r6]
    562c:	ldr	r3, [sp, #164]	; 0xa4
    5630:	cmp	r3, #0
    5634:	ble	572c <eval_string+0x7a0>
    5638:	add	r0, r8, #8
    563c:	bl	0 <coda_cursor_goto_first_array_element>
    5640:	cmp	r0, #0
    5644:	beq	5650 <eval_string+0x6c4>
    5648:	mvn	r0, #0
    564c:	b	6b50 <eval_string+0x1bc4>
    5650:	mov	r4, #0
    5654:	ldr	ip, [sp, #164]	; 0xa4
    5658:	cmp	r4, ip
    565c:	bge	572c <eval_string+0x7a0>
    5660:	ldr	r1, [r9, #20]
    5664:	add	r2, sp, #168	; 0xa8
    5668:	add	r3, sp, #172	; 0xac
    566c:	add	r0, sp, #176	; 0xb0
    5670:	str	r0, [sp]
    5674:	mov	r0, r8
    5678:	bl	4f8c <eval_string>
    567c:	cmp	r0, #0
    5680:	beq	568c <eval_string+0x700>
    5684:	mvn	r0, #0
    5688:	b	6b50 <eval_string+0x1bc4>
    568c:	ldr	r0, [sp, #168]	; 0xa8
    5690:	ldr	r1, [sp, #172]	; 0xac
    5694:	ldr	r2, [sp, #176]	; 0xb0
    5698:	ldr	r3, [r7]
    569c:	ldr	fp, [r5]
    56a0:	ldr	sl, [r6]
    56a4:	str	sl, [sp, #4]
    56a8:	str	fp, [sp]
    56ac:	bl	70 <compare_strings>
    56b0:	cmp	r0, #0
    56b4:	ble	56e8 <eval_string+0x75c>
    56b8:	ldr	r0, [r5]
    56bc:	cmp	r0, #0
    56c0:	ble	56cc <eval_string+0x740>
    56c4:	ldr	r0, [r6]
    56c8:	bl	0 <free>
    56cc:	ldr	r3, [sp, #168]	; 0xa8
    56d0:	str	r3, [r7]
    56d4:	ldr	r2, [sp, #172]	; 0xac
    56d8:	str	r2, [r5]
    56dc:	ldr	r0, [sp, #176]	; 0xb0
    56e0:	str	r0, [r6]
    56e4:	b	56fc <eval_string+0x770>
    56e8:	ldr	r0, [sp, #172]	; 0xac
    56ec:	cmp	r0, #0
    56f0:	ble	56fc <eval_string+0x770>
    56f4:	ldr	r0, [sp, #176]	; 0xb0
    56f8:	bl	0 <free>
    56fc:	ldr	r3, [sp, #164]	; 0xa4
    5700:	sub	r3, r3, #1
    5704:	cmp	r4, r3
    5708:	bge	5724 <eval_string+0x798>
    570c:	add	r0, r8, #8
    5710:	bl	0 <coda_cursor_goto_next_array_element>
    5714:	cmp	r0, #0
    5718:	beq	5724 <eval_string+0x798>
    571c:	mvn	r0, #0
    5720:	b	6b50 <eval_string+0x1bc4>
    5724:	add	r4, r4, #1
    5728:	b	5654 <eval_string+0x6c8>
    572c:	add	r0, r8, #8
    5730:	add	r2, sp, #72	; 0x48
    5734:	add	r2, r2, #3072	; 0xc00
    5738:	mov	r3, r0
    573c:	mov	lr, #130	; 0x82
    5740:	ldr	ip, [r2], #4
    5744:	subs	lr, lr, #1
    5748:	str	ip, [r3], #4
    574c:	bne	5740 <eval_string+0x7b4>
    5750:	b	6ae4 <eval_string+0x1b58>
    5754:	cmp	r1, #42	; 0x2a
    5758:	bcs	5b28 <eval_string+0xb9c>
    575c:	cmp	r1, #16
    5760:	beq	5844 <eval_string+0x8b8>
    5764:	cmp	r1, #28
    5768:	bne	6888 <eval_string+0x18fc>
    576c:	ldr	r1, [r8]
    5770:	cmp	r1, #0
    5774:	bne	578c <eval_string+0x800>
    5778:	ldr	r0, [pc, #1948]	; 5f1c <eval_string+0xf90>
    577c:	ldr	r1, [pc, #1956]	; 5f28 <eval_string+0xf9c>
    5780:	movw	r2, #3449	; 0xd79
    5784:	ldr	r3, [pc, #1940]	; 5f20 <eval_string+0xf94>
    5788:	bl	0 <__assert_fail>
    578c:	ldr	r0, [r8]
    5790:	ldr	r0, [r0]
    5794:	add	r1, sp, #184	; 0xb8
    5798:	bl	0 <coda_get_product_filename>
    579c:	cmp	r0, #0
    57a0:	beq	57ac <eval_string+0x820>
    57a4:	mvn	r0, #0
    57a8:	b	6b50 <eval_string+0x1bc4>
    57ac:	ldr	r4, [sp, #184]	; 0xb8
    57b0:	ldr	r1, [sp, #184]	; 0xb8
    57b4:	ldrb	r2, [r1]
    57b8:	cmp	r2, #0
    57bc:	beq	57e8 <eval_string+0x85c>
    57c0:	cmp	r2, #47	; 0x2f
    57c4:	beq	57d0 <eval_string+0x844>
    57c8:	cmp	r2, #92	; 0x5c
    57cc:	bne	57d8 <eval_string+0x84c>
    57d0:	ldr	r1, [sp, #184]	; 0xb8
    57d4:	add	r4, r1, #1
    57d8:	ldr	r1, [sp, #184]	; 0xb8
    57dc:	add	r0, r1, #1
    57e0:	str	r0, [sp, #184]	; 0xb8
    57e4:	b	57b0 <eval_string+0x824>
    57e8:	mov	r3, #0
    57ec:	str	r3, [r7]
    57f0:	mov	r0, r4
    57f4:	bl	0 <strlen>
    57f8:	str	r0, [r5]
    57fc:	add	r0, r0, #1
    5800:	bl	0 <malloc>
    5804:	str	r0, [r6]
    5808:	cmp	r0, #0
    580c:	bne	5834 <eval_string+0x8a8>
    5810:	mvn	r0, #0
    5814:	ldr	r1, [pc, #1788]	; 5f18 <eval_string+0xf8c>
    5818:	ldr	r2, [r5]
    581c:	ldr	r3, [pc, #1796]	; 5f28 <eval_string+0xf9c>
    5820:	movw	ip, #3469	; 0xd8d
    5824:	str	ip, [sp]
    5828:	bl	0 <coda_set_error>
    582c:	mvn	r0, #0
    5830:	b	6b50 <eval_string+0x1bc4>
    5834:	ldr	r2, [r5]
    5838:	mov	r1, r4
    583c:	bl	0 <memcpy>
    5840:	b	6ae4 <eval_string+0x1b58>
    5844:	mov	r3, #0
    5848:	mov	r2, #0
    584c:	str	r2, [sp, #272]	; 0x110
    5850:	str	r3, [sp, #276]	; 0x114
    5854:	mvn	r1, #0
    5858:	mvn	r0, #0
    585c:	str	r0, [sp, #288]	; 0x120
    5860:	str	r1, [sp, #292]	; 0x124
    5864:	ldr	r2, [r8]
    5868:	cmp	r2, #0
    586c:	bne	5884 <eval_string+0x8f8>
    5870:	ldr	r0, [pc, #1700]	; 5f1c <eval_string+0xf90>
    5874:	ldr	r1, [pc, #1708]	; 5f28 <eval_string+0xf9c>
    5878:	movw	r2, #2938	; 0xb7a
    587c:	ldr	r3, [pc, #1692]	; 5f20 <eval_string+0xf94>
    5880:	bl	0 <__assert_fail>
    5884:	add	r1, r8, #8
    5888:	mov	r2, r1
    588c:	add	r3, sp, #1584	; 0x630
    5890:	mov	lr, #130	; 0x82
    5894:	ldr	ip, [r2], #4
    5898:	subs	lr, lr, #1
    589c:	str	ip, [r3], #4
    58a0:	bne	5894 <eval_string+0x908>
    58a4:	ldr	r1, [r9, #16]
    58a8:	mov	r0, r8
    58ac:	bl	6fa4 <eval_cursor>
    58b0:	cmp	r0, #0
    58b4:	beq	58c0 <eval_string+0x934>
    58b8:	mvn	r0, #0
    58bc:	b	6b50 <eval_string+0x1bc4>
    58c0:	ldr	r0, [r9, #24]
    58c4:	cmp	r0, #0
    58c8:	beq	5950 <eval_string+0x9c4>
    58cc:	ldr	r1, [r9, #20]
    58d0:	add	r2, sp, #272	; 0x110
    58d4:	mov	r0, r8
    58d8:	bl	3240 <eval_integer>
    58dc:	cmp	r0, #0
    58e0:	beq	58ec <eval_string+0x960>
    58e4:	mvn	r0, #0
    58e8:	b	6b50 <eval_string+0x1bc4>
    58ec:	ldr	r1, [r9, #24]
    58f0:	add	r2, sp, #280	; 0x118
    58f4:	mov	r0, r8
    58f8:	bl	3240 <eval_integer>
    58fc:	cmp	r0, #0
    5900:	beq	590c <eval_string+0x980>
    5904:	mvn	r0, #0
    5908:	b	6b50 <eval_string+0x1bc4>
    590c:	ldr	r0, [sp, #280]	; 0x118
    5910:	ldr	r1, [sp, #284]	; 0x11c
    5914:	cmp	r1, #0
    5918:	bne	5928 <eval_string+0x99c>
    591c:	cmp	r0, #0
    5920:	bhi	5930 <eval_string+0x9a4>
    5924:	b	59d8 <eval_string+0xa4c>
    5928:	cmp	r1, #0
    592c:	ble	59d8 <eval_string+0xa4c>
    5930:	ldr	ip, [sp, #280]	; 0x118
    5934:	ldr	r0, [sp, #284]	; 0x11c
    5938:	lsl	r0, r0, #3
    593c:	orr	r1, r0, ip, lsr #29
    5940:	lsl	r0, ip, #3
    5944:	str	r0, [sp, #288]	; 0x120
    5948:	str	r1, [sp, #292]	; 0x124
    594c:	b	59d8 <eval_string+0xa4c>
    5950:	ldr	r1, [r9, #20]
    5954:	cmp	r1, #0
    5958:	beq	59bc <eval_string+0xa30>
    595c:	add	r2, sp, #280	; 0x118
    5960:	mov	r0, r8
    5964:	bl	3240 <eval_integer>
    5968:	cmp	r0, #0
    596c:	beq	5978 <eval_string+0x9ec>
    5970:	mvn	r0, #0
    5974:	b	6b50 <eval_string+0x1bc4>
    5978:	ldr	r0, [sp, #280]	; 0x118
    597c:	ldr	ip, [sp, #284]	; 0x11c
    5980:	cmp	ip, #0
    5984:	bne	5994 <eval_string+0xa08>
    5988:	cmp	r0, #0
    598c:	bhi	599c <eval_string+0xa10>
    5990:	b	59d8 <eval_string+0xa4c>
    5994:	cmp	ip, #0
    5998:	ble	59d8 <eval_string+0xa4c>
    599c:	ldr	ip, [sp, #280]	; 0x118
    59a0:	ldr	r3, [sp, #284]	; 0x11c
    59a4:	lsl	r0, r3, #3
    59a8:	orr	r2, r0, ip, lsr #29
    59ac:	lsl	r1, ip, #3
    59b0:	str	r1, [sp, #288]	; 0x120
    59b4:	str	r2, [sp, #292]	; 0x124
    59b8:	b	59d8 <eval_string+0xa4c>
    59bc:	add	r0, r8, #8
    59c0:	add	r1, sp, #288	; 0x120
    59c4:	bl	0 <coda_cursor_get_bit_size>
    59c8:	cmp	r0, #0
    59cc:	beq	59d8 <eval_string+0xa4c>
    59d0:	mvn	r0, #0
    59d4:	b	6b50 <eval_string+0x1bc4>
    59d8:	ldr	r2, [sp, #288]	; 0x120
    59dc:	ldr	ip, [sp, #292]	; 0x124
    59e0:	cmp	ip, #0
    59e4:	bge	59fc <eval_string+0xa70>
    59e8:	mvn	r0, #400	; 0x190
    59ec:	ldr	r1, [pc, #1328]	; 5f24 <eval_string+0xf98>
    59f0:	bl	0 <coda_set_error>
    59f4:	mvn	r0, #0
    59f8:	b	6b50 <eval_string+0x1bc4>
    59fc:	mov	r4, #1
    5a00:	mov	r3, #0
    5a04:	mov	r0, #0
    5a08:	and	r1, r2, #7
    5a0c:	orr	r0, r0, r1
    5a10:	cmp	r0, #0
    5a14:	movne	r0, #1
    5a18:	moveq	r0, #0
    5a1c:	cmp	r0, #0
    5a20:	movne	r3, r4
    5a24:	moveq	r3, r3
    5a28:	asr	r0, ip, #3
    5a2c:	lsr	r1, r2, #3
    5a30:	orr	r2, r1, ip, lsl #29
    5a34:	asr	r1, r3, #31
    5a38:	adds	lr, r2, r3
    5a3c:	adc	r3, r0, r1
    5a40:	mov	r0, lr
    5a44:	str	r0, [sp, #280]	; 0x118
    5a48:	str	r3, [sp, #284]	; 0x11c
    5a4c:	mov	r2, #0
    5a50:	str	r2, [r7]
    5a54:	str	r0, [r5]
    5a58:	cmp	r3, #0
    5a5c:	bne	5a6c <eval_string+0xae0>
    5a60:	cmp	r0, #0
    5a64:	bhi	5a74 <eval_string+0xae8>
    5a68:	b	5afc <eval_string+0xb70>
    5a6c:	cmp	r3, #0
    5a70:	ble	5afc <eval_string+0xb70>
    5a74:	ldr	ip, [sp, #280]	; 0x118
    5a78:	add	r0, ip, #1
    5a7c:	bl	0 <malloc>
    5a80:	str	r0, [r6]
    5a84:	cmp	r0, #0
    5a88:	bne	5ab0 <eval_string+0xb24>
    5a8c:	mvn	r0, #0
    5a90:	ldr	r1, [pc, #1152]	; 5f18 <eval_string+0xf8c>
    5a94:	ldr	r2, [sp, #280]	; 0x118
    5a98:	ldr	r3, [pc, #1160]	; 5f28 <eval_string+0xf9c>
    5a9c:	movw	ip, #2991	; 0xbaf
    5aa0:	str	ip, [sp]
    5aa4:	bl	0 <coda_set_error>
    5aa8:	mvn	r0, #0
    5aac:	b	6b50 <eval_string+0x1bc4>
    5ab0:	add	ip, r8, #8
    5ab4:	mov	r1, r0
    5ab8:	ldr	r2, [sp, #272]	; 0x110
    5abc:	ldr	r0, [sp, #276]	; 0x114
    5ac0:	lsl	r0, r0, #3
    5ac4:	orr	r3, r0, r2, lsr #29
    5ac8:	lsl	r2, r2, #3
    5acc:	ldr	r0, [sp, #288]	; 0x120
    5ad0:	ldr	r4, [sp, #292]	; 0x124
    5ad4:	str	r4, [sp, #4]
    5ad8:	str	r0, [sp]
    5adc:	mov	r0, ip
    5ae0:	bl	0 <coda_cursor_read_bits>
    5ae4:	cmp	r0, #0
    5ae8:	beq	5b04 <eval_string+0xb78>
    5aec:	ldr	r0, [r6]
    5af0:	bl	0 <free>
    5af4:	mvn	r0, #0
    5af8:	b	6b50 <eval_string+0x1bc4>
    5afc:	mov	ip, #0
    5b00:	str	ip, [r6]
    5b04:	add	r0, r8, #8
    5b08:	add	r2, sp, #1584	; 0x630
    5b0c:	mov	r3, r0
    5b10:	mov	lr, #130	; 0x82
    5b14:	ldr	ip, [r2], #4
    5b18:	subs	lr, lr, #1
    5b1c:	str	ip, [r3], #4
    5b20:	bne	5b14 <eval_string+0xb88>
    5b24:	b	6ae4 <eval_string+0x1b58>
    5b28:	cmp	r1, #42	; 0x2a
    5b2c:	beq	5c98 <eval_string+0xd0c>
    5b30:	cmp	r1, #55	; 0x37
    5b34:	beq	5c2c <eval_string+0xca0>
    5b38:	cmp	r1, #56	; 0x38
    5b3c:	bne	6888 <eval_string+0x18fc>
    5b40:	ldr	r1, [r9, #16]
    5b44:	add	r2, sp, #108	; 0x6c
    5b48:	add	r3, sp, #116	; 0x74
    5b4c:	add	r0, sp, #124	; 0x7c
    5b50:	str	r0, [sp]
    5b54:	mov	r0, r8
    5b58:	bl	4f8c <eval_string>
    5b5c:	cmp	r0, #0
    5b60:	beq	5b6c <eval_string+0xbe0>
    5b64:	mvn	r0, #0
    5b68:	b	6b50 <eval_string+0x1bc4>
    5b6c:	ldr	r1, [r9, #20]
    5b70:	add	r2, sp, #112	; 0x70
    5b74:	add	r3, sp, #120	; 0x78
    5b78:	add	r0, sp, #128	; 0x80
    5b7c:	str	r0, [sp]
    5b80:	mov	r0, r8
    5b84:	bl	4f8c <eval_string>
    5b88:	cmp	r0, #0
    5b8c:	beq	5ba0 <eval_string+0xc14>
    5b90:	ldr	r0, [sp, #124]	; 0x7c
    5b94:	bl	0 <free>
    5b98:	mvn	r0, #0
    5b9c:	b	6b50 <eval_string+0x1bc4>
    5ba0:	ldr	r0, [sp, #108]	; 0x6c
    5ba4:	ldr	r1, [sp, #116]	; 0x74
    5ba8:	ldr	r2, [sp, #124]	; 0x7c
    5bac:	ldr	r3, [sp, #112]	; 0x70
    5bb0:	ldr	r8, [sp, #120]	; 0x78
    5bb4:	ldr	ip, [sp, #128]	; 0x80
    5bb8:	str	ip, [sp, #4]
    5bbc:	str	r8, [sp]
    5bc0:	bl	70 <compare_strings>
    5bc4:	cmp	r0, #0
    5bc8:	bge	5bfc <eval_string+0xc70>
    5bcc:	ldr	r2, [sp, #112]	; 0x70
    5bd0:	str	r2, [r7]
    5bd4:	ldr	r0, [sp, #120]	; 0x78
    5bd8:	str	r0, [r5]
    5bdc:	ldr	r2, [sp, #128]	; 0x80
    5be0:	str	r2, [r6]
    5be4:	ldr	r0, [sp, #116]	; 0x74
    5be8:	cmp	r0, #0
    5bec:	ble	6ae4 <eval_string+0x1b58>
    5bf0:	ldr	r0, [sp, #124]	; 0x7c
    5bf4:	bl	0 <free>
    5bf8:	b	6ae4 <eval_string+0x1b58>
    5bfc:	ldr	r1, [sp, #108]	; 0x6c
    5c00:	str	r1, [r7]
    5c04:	ldr	r0, [sp, #116]	; 0x74
    5c08:	str	r0, [r5]
    5c0c:	ldr	r3, [sp, #124]	; 0x7c
    5c10:	str	r3, [r6]
    5c14:	ldr	r0, [sp, #120]	; 0x78
    5c18:	cmp	r0, #0
    5c1c:	ble	6ae4 <eval_string+0x1b58>
    5c20:	ldr	r0, [sp, #128]	; 0x80
    5c24:	bl	0 <free>
    5c28:	b	6ae4 <eval_string+0x1b58>
    5c2c:	ldr	r1, [r9, #16]
    5c30:	str	r6, [sp]
    5c34:	mov	r3, r5
    5c38:	mov	r2, r7
    5c3c:	mov	r0, r8
    5c40:	bl	4f8c <eval_string>
    5c44:	cmp	r0, #0
    5c48:	beq	5c54 <eval_string+0xcc8>
    5c4c:	mvn	r0, #0
    5c50:	b	6b50 <eval_string+0x1bc4>
    5c54:	ldr	r0, [r5]
    5c58:	cmp	r0, #0
    5c5c:	ble	6ae4 <eval_string+0x1b58>
    5c60:	ldr	ip, [r6]
    5c64:	ldr	r2, [r7]
    5c68:	ldrb	r3, [ip, r2]
    5c6c:	and	r0, r3, #255	; 0xff
    5c70:	bl	0 <iswhitespace>
    5c74:	cmp	r0, #0
    5c78:	beq	6ae4 <eval_string+0x1b58>
    5c7c:	ldr	ip, [r5]
    5c80:	sub	r2, ip, #1
    5c84:	str	r2, [r5]
    5c88:	ldr	r3, [r7]
    5c8c:	add	r3, r3, #1
    5c90:	str	r3, [r7]
    5c94:	b	5c54 <eval_string+0xcc8>
    5c98:	ldr	r1, [r9, #16]
    5c9c:	add	r2, sp, #180	; 0xb4
    5ca0:	mov	r0, r8
    5ca4:	bl	c0c <eval_boolean>
    5ca8:	cmp	r0, #0
    5cac:	beq	5cb8 <eval_string+0xd2c>
    5cb0:	mvn	r0, #0
    5cb4:	b	6b50 <eval_string+0x1bc4>
    5cb8:	ldr	r2, [sp, #180]	; 0xb4
    5cbc:	cmp	r2, #0
    5cc0:	bne	5cec <eval_string+0xd60>
    5cc4:	ldr	r1, [r9, #24]
    5cc8:	str	r6, [sp]
    5ccc:	mov	r3, r5
    5cd0:	mov	r2, r7
    5cd4:	mov	r0, r8
    5cd8:	bl	4f8c <eval_string>
    5cdc:	cmp	r0, #0
    5ce0:	beq	6ae4 <eval_string+0x1b58>
    5ce4:	mvn	r0, #0
    5ce8:	b	6b50 <eval_string+0x1bc4>
    5cec:	ldr	r1, [r9, #20]
    5cf0:	str	r6, [sp]
    5cf4:	mov	r3, r5
    5cf8:	mov	r2, r7
    5cfc:	mov	r0, r8
    5d00:	bl	4f8c <eval_string>
    5d04:	cmp	r0, #0
    5d08:	beq	6ae4 <eval_string+0x1b58>
    5d0c:	mvn	r0, #0
    5d10:	b	6b50 <eval_string+0x1bc4>
    5d14:	cmp	r1, #73	; 0x49
    5d18:	bcs	63ec <eval_string+0x1460>
    5d1c:	cmp	r1, #68	; 0x44
    5d20:	bcs	5ecc <eval_string+0xf40>
    5d24:	cmp	r1, #57	; 0x39
    5d28:	beq	5de0 <eval_string+0xe54>
    5d2c:	cmp	r1, #67	; 0x43
    5d30:	bne	6888 <eval_string+0x18fc>
    5d34:	ldr	ip, [r8]
    5d38:	cmp	ip, #0
    5d3c:	bne	5d54 <eval_string+0xdc8>
    5d40:	ldr	r0, [pc, #468]	; 5f1c <eval_string+0xf90>
    5d44:	ldr	r1, [pc, #476]	; 5f28 <eval_string+0xf9c>
    5d48:	movw	r2, #3624	; 0xe28
    5d4c:	ldr	r3, [pc, #460]	; 5f20 <eval_string+0xf94>
    5d50:	bl	0 <__assert_fail>
    5d54:	ldr	r1, [r8]
    5d58:	ldr	r0, [r1]
    5d5c:	add	r1, sp, #232	; 0xe8
    5d60:	bl	0 <coda_get_product_class>
    5d64:	cmp	r0, #0
    5d68:	beq	5d74 <eval_string+0xde8>
    5d6c:	mvn	r0, #0
    5d70:	b	6b50 <eval_string+0x1bc4>
    5d74:	mov	ip, #0
    5d78:	str	ip, [r7]
    5d7c:	mov	r1, #0
    5d80:	str	r1, [r5]
    5d84:	ldr	r0, [sp, #232]	; 0xe8
    5d88:	cmp	r0, #0
    5d8c:	beq	6ae4 <eval_string+0x1b58>
    5d90:	bl	0 <strlen>
    5d94:	str	r0, [r5]
    5d98:	add	r0, r0, #1
    5d9c:	bl	0 <malloc>
    5da0:	str	r0, [r6]
    5da4:	cmp	r0, #0
    5da8:	bne	5dd0 <eval_string+0xe44>
    5dac:	mvn	r0, #0
    5db0:	ldr	r1, [pc, #352]	; 5f18 <eval_string+0xf8c>
    5db4:	ldr	r2, [r5]
    5db8:	ldr	r3, [pc, #360]	; 5f28 <eval_string+0xf9c>
    5dbc:	movw	r4, #3638	; 0xe36
    5dc0:	str	r4, [sp]
    5dc4:	bl	0 <coda_set_error>
    5dc8:	mvn	r0, #0
    5dcc:	b	6b50 <eval_string+0x1bc4>
    5dd0:	ldr	r1, [sp, #232]	; 0xe8
    5dd4:	ldr	r2, [r5]
    5dd8:	bl	0 <memcpy>
    5ddc:	b	6ae4 <eval_string+0x1b58>
    5de0:	ldr	r1, [r9, #16]
    5de4:	add	r2, sp, #84	; 0x54
    5de8:	add	r3, sp, #92	; 0x5c
    5dec:	add	r0, sp, #100	; 0x64
    5df0:	str	r0, [sp]
    5df4:	mov	r0, r8
    5df8:	bl	4f8c <eval_string>
    5dfc:	cmp	r0, #0
    5e00:	beq	5e0c <eval_string+0xe80>
    5e04:	mvn	r0, #0
    5e08:	b	6b50 <eval_string+0x1bc4>
    5e0c:	ldr	r1, [r9, #20]
    5e10:	add	r2, sp, #88	; 0x58
    5e14:	add	r3, sp, #96	; 0x60
    5e18:	add	ip, sp, #104	; 0x68
    5e1c:	str	ip, [sp]
    5e20:	mov	r0, r8
    5e24:	bl	4f8c <eval_string>
    5e28:	cmp	r0, #0
    5e2c:	beq	5e40 <eval_string+0xeb4>
    5e30:	ldr	r0, [sp, #100]	; 0x64
    5e34:	bl	0 <free>
    5e38:	mvn	r0, #0
    5e3c:	b	6b50 <eval_string+0x1bc4>
    5e40:	ldr	r0, [sp, #84]	; 0x54
    5e44:	ldr	r1, [sp, #92]	; 0x5c
    5e48:	ldr	r2, [sp, #100]	; 0x64
    5e4c:	ldr	r3, [sp, #88]	; 0x58
    5e50:	ldr	ip, [sp, #96]	; 0x60
    5e54:	ldr	r8, [sp, #104]	; 0x68
    5e58:	str	r8, [sp, #4]
    5e5c:	str	ip, [sp]
    5e60:	bl	70 <compare_strings>
    5e64:	cmp	r0, #0
    5e68:	ble	5e9c <eval_string+0xf10>
    5e6c:	ldr	r0, [sp, #88]	; 0x58
    5e70:	str	r0, [r7]
    5e74:	ldr	r1, [sp, #96]	; 0x60
    5e78:	str	r1, [r5]
    5e7c:	ldr	r2, [sp, #104]	; 0x68
    5e80:	str	r2, [r6]
    5e84:	ldr	r0, [sp, #92]	; 0x5c
    5e88:	cmp	r0, #0
    5e8c:	ble	6ae4 <eval_string+0x1b58>
    5e90:	ldr	r0, [sp, #100]	; 0x64
    5e94:	bl	0 <free>
    5e98:	b	6ae4 <eval_string+0x1b58>
    5e9c:	ldr	ip, [sp, #84]	; 0x54
    5ea0:	str	ip, [r7]
    5ea4:	ldr	r2, [sp, #92]	; 0x5c
    5ea8:	str	r2, [r5]
    5eac:	ldr	r2, [sp, #100]	; 0x64
    5eb0:	str	r2, [r6]
    5eb4:	ldr	r0, [sp, #96]	; 0x60
    5eb8:	cmp	r0, #0
    5ebc:	ble	6ae4 <eval_string+0x1b58>
    5ec0:	ldr	r0, [sp, #104]	; 0x68
    5ec4:	bl	0 <free>
    5ec8:	b	6ae4 <eval_string+0x1b58>
    5ecc:	cmp	r1, #68	; 0x44
    5ed0:	beq	6334 <eval_string+0x13a8>
    5ed4:	cmp	r1, #69	; 0x45
    5ed8:	beq	6284 <eval_string+0x12f8>
    5edc:	cmp	r1, #71	; 0x47
    5ee0:	bne	6888 <eval_string+0x18fc>
    5ee4:	mov	ip, #0
    5ee8:	str	ip, [sp, #216]	; 0xd8
    5eec:	ldr	r1, [r9, #16]
    5ef0:	add	r2, sp, #208	; 0xd0
    5ef4:	add	r3, sp, #212	; 0xd4
    5ef8:	add	r0, sp, #216	; 0xd8
    5efc:	str	r0, [sp]
    5f00:	mov	r0, r8
    5f04:	bl	4f8c <eval_string>
    5f08:	cmp	r0, #0
    5f0c:	beq	5f2c <eval_string+0xfa0>
    5f10:	mvn	r0, #0
    5f14:	b	6b50 <eval_string+0x1bc4>
    5f18:	.word	0x00000ce9
    5f1c:	.word	0x0000046b
    5f20:	.word	0x00000d91
    5f24:	.word	0x00000c78
    5f28:	.word	0x0000053b
    5f2c:	ldr	r1, [r9, #20]
    5f30:	add	r2, sp, #196	; 0xc4
    5f34:	add	r3, sp, #200	; 0xc8
    5f38:	add	r0, sp, #204	; 0xcc
    5f3c:	str	r0, [sp]
    5f40:	mov	r0, r8
    5f44:	bl	4f8c <eval_string>
    5f48:	cmp	r0, #0
    5f4c:	beq	5f68 <eval_string+0xfdc>
    5f50:	ldr	r0, [sp, #216]	; 0xd8
    5f54:	cmp	r0, #0
    5f58:	beq	5f60 <eval_string+0xfd4>
    5f5c:	bl	0 <free>
    5f60:	mvn	r0, #0
    5f64:	b	6b50 <eval_string+0x1bc4>
    5f68:	ldr	r3, [sp, #212]	; 0xd4
    5f6c:	cmp	r3, #0
    5f70:	ble	5fb4 <eval_string+0x1028>
    5f74:	ldr	r0, [sp, #216]	; 0xd8
    5f78:	ldr	ip, [sp, #208]	; 0xd0
    5f7c:	add	r2, ip, r3
    5f80:	mov	r1, #0
    5f84:	strb	r1, [r0, r2]
    5f88:	ldr	ip, [sp, #216]	; 0xd8
    5f8c:	ldr	r3, [sp, #208]	; 0xd0
    5f90:	add	r0, ip, r3
    5f94:	mov	r1, #36	; 0x24
    5f98:	add	r2, sp, #188	; 0xbc
    5f9c:	add	r3, sp, #192	; 0xc0
    5fa0:	mov	r4, #0
    5fa4:	str	r4, [sp]
    5fa8:	bl	0 <coda_pcre_compile>
    5fac:	mov	r4, r0
    5fb0:	b	5fd4 <eval_string+0x1048>
    5fb4:	ldr	r0, [pc, #3076]	; 6bc0 <eval_string+0x1c34>
    5fb8:	mov	r1, #36	; 0x24
    5fbc:	add	r2, sp, #188	; 0xbc
    5fc0:	add	r3, sp, #192	; 0xc0
    5fc4:	mov	r4, #0
    5fc8:	str	r4, [sp]
    5fcc:	bl	0 <coda_pcre_compile>
    5fd0:	mov	r4, r0
    5fd4:	ldr	r0, [sp, #216]	; 0xd8
    5fd8:	cmp	r0, #0
    5fdc:	beq	5fe4 <eval_string+0x1058>
    5fe0:	bl	0 <free>
    5fe4:	cmp	r4, #0
    5fe8:	bne	6018 <eval_string+0x108c>
    5fec:	mvn	r0, #400	; 0x190
    5ff0:	ldr	r1, [pc, #2984]	; 6ba0 <eval_string+0x1c14>
    5ff4:	ldr	r2, [sp, #188]	; 0xbc
    5ff8:	ldr	r3, [sp, #192]	; 0xc0
    5ffc:	bl	0 <coda_set_error>
    6000:	ldr	r0, [sp, #204]	; 0xcc
    6004:	cmp	r0, #0
    6008:	beq	6010 <eval_string+0x1084>
    600c:	bl	0 <free>
    6010:	mvn	r0, #0
    6014:	b	6b50 <eval_string+0x1bc4>
    6018:	ldr	r1, [r9, #24]
    601c:	ldr	ip, [r1, #4]
    6020:	cmp	ip, #1
    6024:	beq	60ec <eval_string+0x1160>
    6028:	add	r2, sp, #220	; 0xdc
    602c:	add	r3, sp, #224	; 0xe0
    6030:	add	r0, sp, #228	; 0xe4
    6034:	str	r0, [sp]
    6038:	mov	r0, r8
    603c:	bl	4f8c <eval_string>
    6040:	cmp	r0, #0
    6044:	beq	6060 <eval_string+0x10d4>
    6048:	ldr	r0, [pc, #2904]	; 6ba8 <eval_string+0x1c1c>
    604c:	ldr	ip, [r0]
    6050:	mov	r0, r4
    6054:	blx	ip
    6058:	mvn	r0, #0
    605c:	b	6b50 <eval_string+0x1bc4>
    6060:	cmp	r5, #0
    6064:	bne	609c <eval_string+0x1110>
    6068:	mvn	r0, #400	; 0x190
    606c:	ldr	r1, [pc, #2880]	; 6bb4 <eval_string+0x1c28>
    6070:	bl	0 <coda_set_error>
    6074:	ldr	r0, [sp, #228]	; 0xe4
    6078:	cmp	r0, #0
    607c:	beq	6084 <eval_string+0x10f8>
    6080:	bl	0 <free>
    6084:	ldr	r2, [pc, #2844]	; 6ba8 <eval_string+0x1c1c>
    6088:	ldr	ip, [r2]
    608c:	mov	r0, r4
    6090:	blx	ip
    6094:	mvn	r0, #0
    6098:	b	6b50 <eval_string+0x1bc4>
    609c:	ldr	r1, [sp, #228]	; 0xe4
    60a0:	mov	r0, r4
    60a4:	bl	0 <coda_pcre_get_stringnumber>
    60a8:	mov	r9, r0
    60ac:	cmp	r9, #0
    60b0:	bge	60e0 <eval_string+0x1154>
    60b4:	mvn	r0, #400	; 0x190
    60b8:	ldr	r1, [pc, #2768]	; 6b90 <eval_string+0x1c04>
    60bc:	bl	0 <coda_set_error>
    60c0:	ldr	r0, [sp, #228]	; 0xe4
    60c4:	bl	0 <free>
    60c8:	ldr	ip, [pc, #2776]	; 6ba8 <eval_string+0x1c1c>
    60cc:	ldr	ip, [ip]
    60d0:	mov	r0, r4
    60d4:	blx	ip
    60d8:	mvn	r0, #0
    60dc:	b	6b50 <eval_string+0x1bc4>
    60e0:	ldr	r0, [sp, #228]	; 0xe4
    60e4:	bl	0 <free>
    60e8:	b	611c <eval_string+0x1190>
    60ec:	add	r2, sp, #312	; 0x138
    60f0:	mov	r0, r8
    60f4:	bl	3240 <eval_integer>
    60f8:	cmp	r0, #0
    60fc:	beq	6118 <eval_string+0x118c>
    6100:	ldr	r2, [pc, #2720]	; 6ba8 <eval_string+0x1c1c>
    6104:	ldr	ip, [r2]
    6108:	mov	r0, r4
    610c:	blx	ip
    6110:	mvn	r0, #0
    6114:	b	6b50 <eval_string+0x1bc4>
    6118:	ldr	r9, [sp, #312]	; 0x138
    611c:	ldr	r2, [sp, #204]	; 0xcc
    6120:	cmp	r2, #0
    6124:	bne	6168 <eval_string+0x11dc>
    6128:	ldr	r0, [pc, #2704]	; 6bc0 <eval_string+0x1c34>
    612c:	bl	0 <strdup>
    6130:	str	r0, [sp, #204]	; 0xcc
    6134:	cmp	r0, #0
    6138:	bne	6168 <eval_string+0x11dc>
    613c:	mvn	r0, #0
    6140:	ldr	r1, [pc, #2636]	; 6b94 <eval_string+0x1c08>
    6144:	ldr	r2, [pc, #2672]	; 6bbc <eval_string+0x1c30>
    6148:	movw	r3, #3583	; 0xdff
    614c:	bl	0 <coda_set_error>
    6150:	ldr	r0, [pc, #2640]	; 6ba8 <eval_string+0x1c1c>
    6154:	ldr	ip, [r0]
    6158:	mov	r0, r4
    615c:	blx	ip
    6160:	mvn	r0, #0
    6164:	b	6b50 <eval_string+0x1bc4>
    6168:	mov	r1, #0
    616c:	ldr	ip, [sp, #204]	; 0xcc
    6170:	ldr	r3, [sp, #196]	; 0xc4
    6174:	add	r2, ip, r3
    6178:	ldr	r3, [sp, #200]	; 0xc8
    617c:	mov	fp, #0
    6180:	mov	sl, #0
    6184:	add	r8, sp, #352	; 0x160
    6188:	mov	r0, #48	; 0x30
    618c:	str	r0, [sp, #12]
    6190:	str	r8, [sp, #8]
    6194:	str	sl, [sp, #4]
    6198:	str	fp, [sp]
    619c:	mov	r0, r4
    61a0:	bl	0 <coda_pcre_exec>
    61a4:	mov	r8, r0
    61a8:	ldr	ip, [pc, #2552]	; 6ba8 <eval_string+0x1c1c>
    61ac:	ldr	ip, [ip]
    61b0:	mov	r0, r4
    61b4:	blx	ip
    61b8:	cmn	r8, #1
    61bc:	movne	r1, #1
    61c0:	moveq	r1, #0
    61c4:	mov	ip, #0
    61c8:	cmp	r8, #0
    61cc:	movlt	r0, r1
    61d0:	movge	r0, ip
    61d4:	cmp	r0, #0
    61d8:	beq	61fc <eval_string+0x1270>
    61dc:	mvn	r0, #400	; 0x190
    61e0:	ldr	r1, [pc, #2484]	; 6b9c <eval_string+0x1c10>
    61e4:	mov	r2, r8
    61e8:	bl	0 <coda_set_error>
    61ec:	ldr	r0, [sp, #204]	; 0xcc
    61f0:	bl	0 <free>
    61f4:	mvn	r0, #0
    61f8:	b	6b50 <eval_string+0x1bc4>
    61fc:	cmp	r8, #0
    6200:	bne	6220 <eval_string+0x1294>
    6204:	mvn	r0, #400	; 0x190
    6208:	ldr	r1, [pc, #2460]	; 6bac <eval_string+0x1c20>
    620c:	bl	0 <coda_set_error>
    6210:	ldr	r0, [sp, #204]	; 0xcc
    6214:	bl	0 <free>
    6218:	mvn	r0, #0
    621c:	b	6b50 <eval_string+0x1bc4>
    6220:	cmp	r9, r8
    6224:	bge	6260 <eval_string+0x12d4>
    6228:	add	r1, sp, #352	; 0x160
    622c:	ldr	ip, [r1, r9, lsl #3]
    6230:	str	ip, [r7]
    6234:	add	r3, sp, #352	; 0x160
    6238:	lsl	r0, r9, #3
    623c:	add	r1, r3, r0
    6240:	ldr	r0, [r1, #4]
    6244:	add	r2, sp, #352	; 0x160
    6248:	ldr	r3, [r2, r9, lsl #3]
    624c:	sub	ip, r0, r3
    6250:	str	ip, [r5]
    6254:	ldr	ip, [sp, #204]	; 0xcc
    6258:	str	ip, [r6]
    625c:	b	6ae4 <eval_string+0x1b58>
    6260:	mov	r0, #0
    6264:	str	r0, [r7]
    6268:	mov	r3, #0
    626c:	str	r3, [r5]
    6270:	mov	r2, #0
    6274:	str	r2, [r6]
    6278:	ldr	r0, [sp, #204]	; 0xcc
    627c:	bl	0 <free>
    6280:	b	6ae4 <eval_string+0x1b58>
    6284:	ldr	ip, [r8]
    6288:	cmp	ip, #0
    628c:	bne	62a4 <eval_string+0x1318>
    6290:	ldr	r0, [pc, #2288]	; 6b88 <eval_string+0x1bfc>
    6294:	ldr	r1, [pc, #2336]	; 6bbc <eval_string+0x1c30>
    6298:	movw	r2, #3676	; 0xe5c
    629c:	ldr	r3, [pc, #2280]	; 6b8c <eval_string+0x1c00>
    62a0:	bl	0 <__assert_fail>
    62a4:	ldr	r3, [r8]
    62a8:	ldr	r0, [r3]
    62ac:	add	r1, sp, #240	; 0xf0
    62b0:	bl	0 <coda_get_product_type>
    62b4:	cmp	r0, #0
    62b8:	beq	62c4 <eval_string+0x1338>
    62bc:	mvn	r0, #0
    62c0:	b	6b50 <eval_string+0x1bc4>
    62c4:	mov	ip, #0
    62c8:	str	ip, [r7]
    62cc:	mov	r1, #0
    62d0:	str	r1, [r5]
    62d4:	ldr	r0, [sp, #240]	; 0xf0
    62d8:	cmp	r0, #0
    62dc:	beq	6ae4 <eval_string+0x1b58>
    62e0:	bl	0 <strlen>
    62e4:	str	r0, [r5]
    62e8:	add	r0, r0, #1
    62ec:	bl	0 <malloc>
    62f0:	str	r0, [r6]
    62f4:	cmp	r0, #0
    62f8:	bne	6324 <eval_string+0x1398>
    62fc:	mvn	r0, #0
    6300:	ldr	r1, [pc, #2164]	; 6b7c <eval_string+0x1bf0>
    6304:	ldr	ip, [r5]
    6308:	add	r2, ip, #1
    630c:	ldr	r3, [pc, #2216]	; 6bbc <eval_string+0x1c30>
    6310:	movw	r4, #3690	; 0xe6a
    6314:	str	r4, [sp]
    6318:	bl	0 <coda_set_error>
    631c:	mvn	r0, #0
    6320:	b	6b50 <eval_string+0x1bc4>
    6324:	ldr	r1, [sp, #240]	; 0xf0
    6328:	ldr	r2, [r5]
    632c:	bl	0 <memcpy>
    6330:	b	6ae4 <eval_string+0x1b58>
    6334:	ldr	r2, [r8]
    6338:	cmp	r2, #0
    633c:	bne	6354 <eval_string+0x13c8>
    6340:	ldr	r0, [pc, #2112]	; 6b88 <eval_string+0x1bfc>
    6344:	ldr	r1, [pc, #2160]	; 6bbc <eval_string+0x1c30>
    6348:	movw	r2, #3650	; 0xe42
    634c:	ldr	r3, [pc, #2104]	; 6b8c <eval_string+0x1c00>
    6350:	bl	0 <__assert_fail>
    6354:	ldr	r2, [r8]
    6358:	ldr	r0, [r2]
    635c:	add	r1, sp, #236	; 0xec
    6360:	bl	0 <coda_get_product_format>
    6364:	cmp	r0, #0
    6368:	beq	6374 <eval_string+0x13e8>
    636c:	mvn	r0, #0
    6370:	b	6b50 <eval_string+0x1bc4>
    6374:	ldr	r0, [sp, #236]	; 0xec
    6378:	bl	0 <coda_type_get_format_name>
    637c:	mov	r4, r0
    6380:	mov	r1, #0
    6384:	str	r1, [r7]
    6388:	mov	r2, #0
    638c:	str	r2, [r5]
    6390:	cmp	r4, #0
    6394:	beq	6ae4 <eval_string+0x1b58>
    6398:	mov	r0, r4
    639c:	bl	0 <strlen>
    63a0:	str	r0, [r5]
    63a4:	add	r0, r0, #1
    63a8:	bl	0 <malloc>
    63ac:	str	r0, [r6]
    63b0:	cmp	r0, #0
    63b4:	bne	63dc <eval_string+0x1450>
    63b8:	mvn	r0, #0
    63bc:	ldr	r1, [pc, #1976]	; 6b7c <eval_string+0x1bf0>
    63c0:	ldr	r2, [r5]
    63c4:	ldr	r3, [pc, #2032]	; 6bbc <eval_string+0x1c30>
    63c8:	movw	r4, #3665	; 0xe51
    63cc:	str	r4, [sp]
    63d0:	bl	0 <coda_set_error>
    63d4:	mvn	r0, #0
    63d8:	b	6b50 <eval_string+0x1bc4>
    63dc:	ldr	r2, [r5]
    63e0:	mov	r1, r4
    63e4:	bl	0 <memcpy>
    63e8:	b	6ae4 <eval_string+0x1b58>
    63ec:	cmp	r1, #77	; 0x4d
    63f0:	bcs	67f8 <eval_string+0x186c>
    63f4:	cmp	r1, #73	; 0x49
    63f8:	beq	678c <eval_string+0x1800>
    63fc:	cmp	r1, #75	; 0x4b
    6400:	beq	6588 <eval_string+0x15fc>
    6404:	cmp	r1, #76	; 0x4c
    6408:	bne	6888 <eval_string+0x18fc>
    640c:	ldr	r1, [r9, #16]
    6410:	add	r2, sp, #320	; 0x140
    6414:	mov	r0, r8
    6418:	bl	2300 <eval_float>
    641c:	cmp	r0, #0
    6420:	beq	642c <eval_string+0x14a0>
    6424:	mvn	r0, #0
    6428:	b	6b50 <eval_string+0x1bc4>
    642c:	ldr	r1, [r9, #20]
    6430:	cmp	r1, #0
    6434:	beq	64b4 <eval_string+0x1528>
    6438:	add	r2, sp, #244	; 0xf4
    643c:	add	r3, sp, #248	; 0xf8
    6440:	add	r0, sp, #56	; 0x38
    6444:	str	r0, [sp]
    6448:	mov	r0, r8
    644c:	bl	4f8c <eval_string>
    6450:	cmp	r0, #0
    6454:	beq	6460 <eval_string+0x14d4>
    6458:	mvn	r0, #0
    645c:	b	6b50 <eval_string+0x1bc4>
    6460:	ldr	r0, [sp, #248]	; 0xf8
    6464:	cmp	r0, #0
    6468:	bge	6480 <eval_string+0x14f4>
    646c:	mvn	r0, #400	; 0x190
    6470:	ldr	r1, [pc, #1848]	; 6bb0 <eval_string+0x1c24>
    6474:	bl	0 <coda_set_error>
    6478:	mvn	r0, #0
    647c:	b	6b50 <eval_string+0x1bc4>
    6480:	cmp	r0, #0
    6484:	bne	649c <eval_string+0x1510>
    6488:	mvn	r0, #400	; 0x190
    648c:	ldr	r1, [pc, #1772]	; 6b80 <eval_string+0x1bf4>
    6490:	bl	0 <coda_set_error>
    6494:	mvn	r0, #0
    6498:	b	6b50 <eval_string+0x1bc4>
    649c:	ldr	ip, [sp, #56]	; 0x38
    64a0:	ldr	r3, [sp, #244]	; 0xf4
    64a4:	add	r3, r3, r0
    64a8:	mov	r2, #0
    64ac:	strb	r2, [ip, r3]
    64b0:	b	64cc <eval_string+0x1540>
    64b4:	ldr	r0, [pc, #1768]	; 6ba4 <eval_string+0x1c18>
    64b8:	str	r0, [sp, #56]	; 0x38
    64bc:	bl	0 <strlen>
    64c0:	str	r0, [sp, #248]	; 0xf8
    64c4:	mov	r0, #0
    64c8:	str	r0, [sp, #244]	; 0xf4
    64cc:	ldr	r2, [sp, #248]	; 0xf8
    64d0:	add	r0, r2, #1
    64d4:	bl	0 <malloc>
    64d8:	mov	r1, r0
    64dc:	str	r1, [r6]
    64e0:	cmp	r1, #0
    64e4:	bne	6524 <eval_string+0x1598>
    64e8:	ldr	r2, [r9, #20]
    64ec:	cmp	r2, #0
    64f0:	beq	64fc <eval_string+0x1570>
    64f4:	ldr	r0, [sp, #56]	; 0x38
    64f8:	bl	0 <free>
    64fc:	mvn	r0, #0
    6500:	ldr	r1, [pc, #1652]	; 6b7c <eval_string+0x1bf0>
    6504:	ldr	r2, [r5]
    6508:	add	r2, r2, #1
    650c:	ldr	r3, [pc, #1704]	; 6bbc <eval_string+0x1c30>
    6510:	movw	ip, #3740	; 0xe9c
    6514:	str	ip, [sp]
    6518:	bl	0 <coda_set_error>
    651c:	mvn	r0, #0
    6520:	b	6b50 <eval_string+0x1bc4>
    6524:	vldr	d0, [sp, #320]	; 0x140
    6528:	ldr	r2, [sp, #56]	; 0x38
    652c:	ldr	ip, [sp, #244]	; 0xf4
    6530:	add	r0, r2, ip
    6534:	bl	0 <coda_time_double_to_string>
    6538:	cmp	r0, #0
    653c:	beq	655c <eval_string+0x15d0>
    6540:	ldr	r0, [r9, #20]
    6544:	cmp	r0, #0
    6548:	beq	6554 <eval_string+0x15c8>
    654c:	ldr	r0, [sp, #56]	; 0x38
    6550:	bl	0 <free>
    6554:	mvn	r0, #0
    6558:	b	6b50 <eval_string+0x1bc4>
    655c:	mov	r0, #0
    6560:	str	r0, [r7]
    6564:	ldr	r0, [r6]
    6568:	bl	0 <strlen>
    656c:	str	r0, [r5]
    6570:	ldr	r0, [r9, #20]
    6574:	cmp	r0, #0
    6578:	beq	6ae4 <eval_string+0x1b58>
    657c:	ldr	r0, [sp, #56]	; 0x38
    6580:	bl	0 <free>
    6584:	b	6ae4 <eval_string+0x1b58>
    6588:	ldr	r1, [r9, #16]
    658c:	ldr	r2, [r1, #4]
    6590:	cmp	r2, #4
    6594:	bne	6718 <eval_string+0x178c>
    6598:	ldr	r2, [r8]
    659c:	cmp	r2, #0
    65a0:	bne	65b8 <eval_string+0x162c>
    65a4:	ldr	r0, [pc, #1500]	; 6b88 <eval_string+0x1bfc>
    65a8:	ldr	r1, [pc, #1548]	; 6bbc <eval_string+0x1c30>
    65ac:	movw	r2, #2865	; 0xb31
    65b0:	ldr	r3, [pc, #1492]	; 6b8c <eval_string+0x1c00>
    65b4:	bl	0 <__assert_fail>
    65b8:	add	r0, r8, #8
    65bc:	mov	r2, r0
    65c0:	add	r3, sp, #40	; 0x28
    65c4:	add	r3, r3, #1024	; 0x400
    65c8:	mov	lr, #130	; 0x82
    65cc:	ldr	ip, [r2], #4
    65d0:	subs	lr, lr, #1
    65d4:	str	ip, [r3], #4
    65d8:	bne	65cc <eval_string+0x1640>
    65dc:	ldr	r1, [r9, #16]
    65e0:	mov	r0, r8
    65e4:	bl	6fa4 <eval_cursor>
    65e8:	cmp	r0, #0
    65ec:	beq	65f8 <eval_string+0x166c>
    65f0:	mvn	r0, #0
    65f4:	b	6b50 <eval_string+0x1bc4>
    65f8:	mov	r3, #0
    65fc:	str	r3, [r7]
    6600:	add	r0, r8, #8
    6604:	mov	r1, r5
    6608:	bl	0 <coda_cursor_get_string_length>
    660c:	cmp	r0, #0
    6610:	beq	661c <eval_string+0x1690>
    6614:	mvn	r0, #0
    6618:	b	6b50 <eval_string+0x1bc4>
    661c:	ldr	r1, [r9, #20]
    6620:	cmp	r1, #0
    6624:	beq	6678 <eval_string+0x16ec>
    6628:	add	r2, sp, #256	; 0x100
    662c:	mov	r0, r8
    6630:	bl	3240 <eval_integer>
    6634:	cmp	r0, #0
    6638:	beq	6644 <eval_string+0x16b8>
    663c:	mvn	r0, #0
    6640:	b	6b50 <eval_string+0x1bc4>
    6644:	ldr	r1, [r5]
    6648:	asr	r2, r1, #31
    664c:	ldr	r3, [sp, #256]	; 0x100
    6650:	ldr	r0, [sp, #260]	; 0x104
    6654:	cmp	r2, r0
    6658:	bne	6668 <eval_string+0x16dc>
    665c:	cmp	r1, r3
    6660:	bhi	6670 <eval_string+0x16e4>
    6664:	b	6678 <eval_string+0x16ec>
    6668:	cmp	r2, r0
    666c:	ble	6678 <eval_string+0x16ec>
    6670:	ldr	ip, [sp, #256]	; 0x100
    6674:	str	ip, [r5]
    6678:	ldr	ip, [r5]
    667c:	cmp	ip, #0
    6680:	ble	66e8 <eval_string+0x175c>
    6684:	add	r0, ip, #1
    6688:	bl	0 <malloc>
    668c:	str	r0, [r6]
    6690:	mov	r1, r0
    6694:	cmp	r1, #0
    6698:	bne	66c0 <eval_string+0x1734>
    669c:	mvn	r0, #0
    66a0:	ldr	r1, [pc, #1236]	; 6b7c <eval_string+0x1bf0>
    66a4:	ldr	r2, [r5]
    66a8:	ldr	r3, [pc, #1292]	; 6bbc <eval_string+0x1c30>
    66ac:	movw	ip, #2895	; 0xb4f
    66b0:	str	ip, [sp]
    66b4:	bl	0 <coda_set_error>
    66b8:	mvn	r0, #0
    66bc:	b	6b50 <eval_string+0x1bc4>
    66c0:	add	r0, r8, #8
    66c4:	ldr	r2, [r5]
    66c8:	add	r2, r2, #1
    66cc:	bl	0 <coda_cursor_read_string>
    66d0:	cmp	r0, #0
    66d4:	beq	66f0 <eval_string+0x1764>
    66d8:	ldr	r0, [r6]
    66dc:	bl	0 <free>
    66e0:	mvn	r0, #0
    66e4:	b	6b50 <eval_string+0x1bc4>
    66e8:	mov	r0, #0
    66ec:	str	r0, [r6]
    66f0:	add	r0, r8, #8
    66f4:	add	r2, sp, #40	; 0x28
    66f8:	add	r2, r2, #1024	; 0x400
    66fc:	mov	r3, r0
    6700:	mov	lr, #130	; 0x82
    6704:	ldr	ip, [r2], #4
    6708:	subs	lr, lr, #1
    670c:	str	ip, [r3], #4
    6710:	bne	6704 <eval_string+0x1778>
    6714:	b	6ae4 <eval_string+0x1b58>
    6718:	add	r2, sp, #264	; 0x108
    671c:	mov	r0, r8
    6720:	bl	3240 <eval_integer>
    6724:	cmp	r0, #0
    6728:	beq	6734 <eval_string+0x17a8>
    672c:	mvn	r0, #0
    6730:	b	6b50 <eval_string+0x1bc4>
    6734:	ldr	r0, [sp, #264]	; 0x108
    6738:	ldr	r1, [sp, #268]	; 0x10c
    673c:	add	r2, sp, #328	; 0x148
    6740:	bl	0 <coda_str64>
    6744:	add	r0, sp, #328	; 0x148
    6748:	bl	0 <strdup>
    674c:	str	r0, [r6]
    6750:	cmp	r0, #0
    6754:	bne	6774 <eval_string+0x17e8>
    6758:	mvn	r0, #0
    675c:	ldr	r1, [pc, #1072]	; 6b94 <eval_string+0x1c08>
    6760:	ldr	r2, [pc, #1108]	; 6bbc <eval_string+0x1c30>
    6764:	movw	r3, #2924	; 0xb6c
    6768:	bl	0 <coda_set_error>
    676c:	mvn	r0, #0
    6770:	b	6b50 <eval_string+0x1bc4>
    6774:	mov	r0, #0
    6778:	str	r0, [r7]
    677c:	add	r0, sp, #328	; 0x148
    6780:	bl	0 <strlen>
    6784:	str	r0, [r5]
    6788:	b	6ae4 <eval_string+0x1b58>
    678c:	ldr	r1, [r9, #16]
    6790:	str	r6, [sp]
    6794:	mov	r3, r5
    6798:	mov	r2, r7
    679c:	mov	r0, r8
    67a0:	bl	4f8c <eval_string>
    67a4:	cmp	r0, #0
    67a8:	beq	67b4 <eval_string+0x1828>
    67ac:	mvn	r0, #0
    67b0:	b	6b50 <eval_string+0x1bc4>
    67b4:	ldr	r0, [r5]
    67b8:	cmp	r0, #0
    67bc:	ble	6ae4 <eval_string+0x1b58>
    67c0:	ldr	ip, [r6]
    67c4:	ldr	r3, [r7]
    67c8:	add	r0, r3, r0
    67cc:	add	r1, ip, r0
    67d0:	sub	lr, r1, #4096	; 0x1000
    67d4:	ldrb	r0, [lr, #4095]	; 0xfff
    67d8:	and	r0, r0, #255	; 0xff
    67dc:	bl	0 <iswhitespace>
    67e0:	cmp	r0, #0
    67e4:	beq	6ae4 <eval_string+0x1b58>
    67e8:	ldr	r0, [r5]
    67ec:	sub	r3, r0, #1
    67f0:	str	r3, [r5]
    67f4:	b	67b4 <eval_string+0x1828>
    67f8:	cmp	r1, #77	; 0x4d
    67fc:	beq	6958 <eval_string+0x19cc>
    6800:	cmp	r1, #80	; 0x50
    6804:	beq	68a8 <eval_string+0x191c>
    6808:	cmp	r1, #86	; 0x56
    680c:	bne	6888 <eval_string+0x18fc>
    6810:	ldr	r1, [r9, #12]
    6814:	ldrb	r1, [r1]
    6818:	sub	r4, r1, #105	; 0x69
    681c:	lsl	r1, r4, #3
    6820:	add	r3, r8, r1
    6824:	ldr	sl, [r3, #528]	; 0x210
    6828:	ldr	fp, [r3, #532]	; 0x214
    682c:	ldr	r1, [r9, #16]
    6830:	add	r2, r3, #528	; 0x210
    6834:	mov	r0, r8
    6838:	bl	3240 <eval_integer>
    683c:	cmp	r0, #0
    6840:	beq	684c <eval_string+0x18c0>
    6844:	mvn	r0, #0
    6848:	b	6b50 <eval_string+0x1bc4>
    684c:	ldr	r1, [r9, #20]
    6850:	str	r6, [sp]
    6854:	mov	r3, r5
    6858:	mov	r2, r7
    685c:	mov	r0, r8
    6860:	bl	4f8c <eval_string>
    6864:	cmp	r0, #0
    6868:	beq	6874 <eval_string+0x18e8>
    686c:	mvn	r0, #0
    6870:	b	6b50 <eval_string+0x1bc4>
    6874:	lsl	r0, r4, #3
    6878:	add	r0, r8, r0
    687c:	str	sl, [r0, #528]	; 0x210
    6880:	str	fp, [r0, #532]	; 0x214
    6884:	b	6ae4 <eval_string+0x1b58>
    6888:	ldr	r0, [pc, #808]	; 6bb8 <eval_string+0x1c2c>
    688c:	ldr	r1, [pc, #808]	; 6bbc <eval_string+0x1c30>
    6890:	movw	r2, #3794	; 0xed2
    6894:	ldr	r3, [pc, #752]	; 6b8c <eval_string+0x1c00>
    6898:	bl	0 <__assert_fail>
    689c:	mov	r0, #1
    68a0:	bl	0 <exit>
    68a4:	b	6ae4 <eval_string+0x1b58>
    68a8:	ldr	r1, [r9, #16]
    68ac:	str	r6, [sp]
    68b0:	mov	r3, r5
    68b4:	mov	r2, r7
    68b8:	mov	r0, r8
    68bc:	bl	4f8c <eval_string>
    68c0:	cmp	r0, #0
    68c4:	beq	68d0 <eval_string+0x1944>
    68c8:	mvn	r0, #0
    68cc:	b	6b50 <eval_string+0x1bc4>
    68d0:	ldr	r1, [r5]
    68d4:	cmp	r1, #0
    68d8:	ble	6914 <eval_string+0x1988>
    68dc:	ldr	r1, [r6]
    68e0:	ldr	r0, [r7]
    68e4:	ldrb	ip, [r1, r0]
    68e8:	and	r0, ip, #255	; 0xff
    68ec:	bl	0 <iswhitespace>
    68f0:	cmp	r0, #0
    68f4:	beq	6914 <eval_string+0x1988>
    68f8:	ldr	r1, [r5]
    68fc:	sub	r2, r1, #1
    6900:	str	r2, [r5]
    6904:	ldr	r1, [r7]
    6908:	add	ip, r1, #1
    690c:	str	ip, [r7]
    6910:	b	68d0 <eval_string+0x1944>
    6914:	ldr	r3, [r5]
    6918:	cmp	r3, #0
    691c:	ble	6ae4 <eval_string+0x1b58>
    6920:	ldr	ip, [r6]
    6924:	ldr	r2, [r7]
    6928:	add	r2, r2, r3
    692c:	add	r1, ip, r2
    6930:	sub	lr, r1, #4096	; 0x1000
    6934:	ldrb	r2, [lr, #4095]	; 0xfff
    6938:	and	r0, r2, #255	; 0xff
    693c:	bl	0 <iswhitespace>
    6940:	cmp	r0, #0
    6944:	beq	6ae4 <eval_string+0x1b58>
    6948:	ldr	r2, [r5]
    694c:	sub	r3, r2, #1
    6950:	str	r3, [r5]
    6954:	b	6914 <eval_string+0x1988>
    6958:	ldr	r1, [r9, #16]
    695c:	add	r2, sp, #296	; 0x128
    6960:	mov	r0, r8
    6964:	bl	3240 <eval_integer>
    6968:	cmp	r0, #0
    696c:	beq	6978 <eval_string+0x19ec>
    6970:	mvn	r0, #0
    6974:	b	6b50 <eval_string+0x1bc4>
    6978:	ldr	r3, [sp, #300]	; 0x12c
    697c:	cmp	r3, #0
    6980:	bge	6998 <eval_string+0x1a0c>
    6984:	mvn	r0, #400	; 0x190
    6988:	ldr	r1, [pc, #500]	; 6b84 <eval_string+0x1bf8>
    698c:	bl	0 <coda_set_error>
    6990:	mvn	r0, #0
    6994:	b	6b50 <eval_string+0x1bc4>
    6998:	ldr	r1, [r9, #20]
    699c:	add	r2, sp, #304	; 0x130
    69a0:	mov	r0, r8
    69a4:	bl	3240 <eval_integer>
    69a8:	cmp	r0, #0
    69ac:	beq	69b8 <eval_string+0x1a2c>
    69b0:	mvn	r0, #0
    69b4:	b	6b50 <eval_string+0x1bc4>
    69b8:	ldr	r0, [sp, #304]	; 0x130
    69bc:	ldr	ip, [sp, #308]	; 0x134
    69c0:	mov	r2, ip
    69c4:	orr	r2, r2, r0
    69c8:	cmp	r2, #0
    69cc:	bne	69f0 <eval_string+0x1a64>
    69d0:	mov	r0, #0
    69d4:	str	r0, [r7]
    69d8:	mov	r3, #0
    69dc:	str	r3, [r5]
    69e0:	mov	r3, #0
    69e4:	str	r3, [r6]
    69e8:	mov	r0, #0
    69ec:	b	6b50 <eval_string+0x1bc4>
    69f0:	cmp	ip, #0
    69f4:	bge	6a0c <eval_string+0x1a80>
    69f8:	mvn	r0, #400	; 0x190
    69fc:	ldr	r1, [pc, #404]	; 6b98 <eval_string+0x1c0c>
    6a00:	bl	0 <coda_set_error>
    6a04:	mvn	r0, #0
    6a08:	b	6b50 <eval_string+0x1bc4>
    6a0c:	ldr	r1, [r9, #24]
    6a10:	str	r6, [sp]
    6a14:	mov	r3, r5
    6a18:	mov	r2, r7
    6a1c:	mov	r0, r8
    6a20:	bl	4f8c <eval_string>
    6a24:	cmp	r0, #0
    6a28:	beq	6a34 <eval_string+0x1aa8>
    6a2c:	mvn	r0, #0
    6a30:	b	6b50 <eval_string+0x1bc4>
    6a34:	ldr	r2, [r5]
    6a38:	cmp	r2, #0
    6a3c:	bne	6a48 <eval_string+0x1abc>
    6a40:	mov	r0, #0
    6a44:	b	6b50 <eval_string+0x1bc4>
    6a48:	ldr	r3, [sp, #296]	; 0x128
    6a4c:	ldr	r0, [sp, #300]	; 0x12c
    6a50:	asr	r1, r2, #31
    6a54:	cmp	r0, r1
    6a58:	bne	6a68 <eval_string+0x1adc>
    6a5c:	cmp	r3, r2
    6a60:	bcs	6a70 <eval_string+0x1ae4>
    6a64:	b	6a98 <eval_string+0x1b0c>
    6a68:	cmp	r0, r1
    6a6c:	ble	6a98 <eval_string+0x1b0c>
    6a70:	mov	r0, #0
    6a74:	str	r0, [r7]
    6a78:	mov	r1, #0
    6a7c:	str	r1, [r5]
    6a80:	ldr	r0, [r6]
    6a84:	bl	0 <free>
    6a88:	mov	ip, #0
    6a8c:	str	ip, [r6]
    6a90:	mov	r0, #0
    6a94:	b	6b50 <eval_string+0x1bc4>
    6a98:	ldr	r2, [r7]
    6a9c:	ldr	r1, [sp, #296]	; 0x128
    6aa0:	add	r2, r2, r1
    6aa4:	str	r2, [r7]
    6aa8:	ldr	r3, [r5]
    6aac:	sub	r3, r3, r1
    6ab0:	str	r3, [r5]
    6ab4:	ldr	r0, [sp, #304]	; 0x130
    6ab8:	ldr	r2, [sp, #308]	; 0x134
    6abc:	asr	ip, r3, #31
    6ac0:	cmp	r2, ip
    6ac4:	bne	6ad4 <eval_string+0x1b48>
    6ac8:	cmp	r0, r3
    6acc:	bcc	6adc <eval_string+0x1b50>
    6ad0:	b	6ae4 <eval_string+0x1b58>
    6ad4:	cmp	r2, ip
    6ad8:	bge	6ae4 <eval_string+0x1b58>
    6adc:	ldr	r2, [sp, #304]	; 0x130
    6ae0:	str	r2, [r5]
    6ae4:	mov	r0, #0
    6ae8:	b	6b50 <eval_string+0x1bc4>
    6aec:	mov	r1, #0
    6af0:	str	r1, [r7]
    6af4:	ldr	r0, [r9, #12]
    6af8:	str	r0, [r5]
    6afc:	cmp	r0, #0
    6b00:	ble	6b44 <eval_string+0x1bb8>
    6b04:	add	r0, r0, #1
    6b08:	bl	0 <malloc>
    6b0c:	str	r0, [r6]
    6b10:	cmp	r0, #0
    6b14:	bne	6b34 <eval_string+0x1ba8>
    6b18:	mvn	r0, #0
    6b1c:	ldr	r1, [pc, #112]	; 6b94 <eval_string+0x1c08>
    6b20:	ldr	r2, [pc, #148]	; 6bbc <eval_string+0x1c30>
    6b24:	movw	r3, #2845	; 0xb1d
    6b28:	bl	0 <coda_set_error>
    6b2c:	mvn	r0, #0
    6b30:	b	6b50 <eval_string+0x1bc4>
    6b34:	ldr	r1, [r9, #16]
    6b38:	ldr	r2, [r5]
    6b3c:	bl	0 <memcpy>
    6b40:	b	6b4c <eval_string+0x1bc0>
    6b44:	mov	r2, #0
    6b48:	str	r2, [r6]
    6b4c:	mov	r0, #0
    6b50:	ldr	r4, [sp, #24]
    6b54:	ldr	r5, [sp, #28]
    6b58:	ldr	r6, [sp, #32]
    6b5c:	ldr	r7, [sp, #36]	; 0x24
    6b60:	ldr	r8, [sp, #40]	; 0x28
    6b64:	ldr	r9, [sp, #44]	; 0x2c
    6b68:	ldr	sl, [sp, #48]	; 0x30
    6b6c:	ldr	fp, [sp, #52]	; 0x34
    6b70:	ldr	lr, [sp, #20]
    6b74:	add	sp, sp, #3664	; 0xe50
    6b78:	bx	lr
    6b7c:	.word	0x00000ce9
    6b80:	.word	0x000007c8
    6b84:	.word	0x00000388
    6b88:	.word	0x0000046b
    6b8c:	.word	0x00000d91
    6b90:	.word	0x0000029b
    6b94:	.word	0x00000bc5
    6b98:	.word	0x00000625
    6b9c:	.word	0x0000026a
    6ba0:	.word	0x000006da
    6ba4:	.word	0x00000b5c
    6ba8:	.word	0x00000000
    6bac:	.word	0x000004b9
    6bb0:	.word	0x00000a57
    6bb4:	.word	0x00000923
    6bb8:	.word	0x00000bf8
    6bbc:	.word	0x0000053b
    6bc0:	.word	0x00000d52

00006bc4 <eval_void>:
    6bc4:	mov	ip, sp
    6bc8:	sub	sp, sp, #80	; 0x50
    6bcc:	str	ip, [sp]
    6bd0:	str	lr, [sp, #4]
    6bd4:	str	r4, [sp, #8]
    6bd8:	str	r5, [sp, #12]
    6bdc:	str	r6, [sp, #16]
    6be0:	str	r7, [sp, #20]
    6be4:	str	r8, [sp, #24]
    6be8:	mov	r5, r1
    6bec:	mov	r4, r0
    6bf0:	ldr	r1, [r5]
    6bf4:	cmp	r1, #74	; 0x4a
    6bf8:	bcs	6e4c <eval_void+0x288>
    6bfc:	cmp	r1, #31
    6c00:	beq	6c28 <eval_void+0x64>
    6c04:	cmp	r1, #39	; 0x27
    6c08:	bne	6f14 <eval_void+0x350>
    6c0c:	ldr	r1, [r5, #16]
    6c10:	mov	r0, r4
    6c14:	bl	6fa4 <eval_cursor>
    6c18:	cmp	r0, #0
    6c1c:	beq	6f6c <eval_void+0x3a8>
    6c20:	mvn	r0, #0
    6c24:	b	6f70 <eval_void+0x3ac>
    6c28:	mov	r0, #0
    6c2c:	mov	ip, #1
    6c30:	str	ip, [sp, #72]	; 0x48
    6c34:	str	r0, [sp, #76]	; 0x4c
    6c38:	ldr	r3, [r5, #12]
    6c3c:	ldrb	r2, [r3]
    6c40:	sub	r6, r2, #105	; 0x69
    6c44:	lsl	r1, r6, #3
    6c48:	add	r1, r4, r1
    6c4c:	ldr	r7, [r1, #528]	; 0x210
    6c50:	ldr	r8, [r1, #532]	; 0x214
    6c54:	ldr	r1, [r5, #16]
    6c58:	add	r2, sp, #56	; 0x38
    6c5c:	mov	r0, r4
    6c60:	bl	3240 <eval_integer>
    6c64:	cmp	r0, #0
    6c68:	beq	6c74 <eval_void+0xb0>
    6c6c:	mvn	r0, #0
    6c70:	b	6f70 <eval_void+0x3ac>
    6c74:	ldr	r1, [r5, #20]
    6c78:	add	r2, sp, #64	; 0x40
    6c7c:	mov	r0, r4
    6c80:	bl	3240 <eval_integer>
    6c84:	cmp	r0, #0
    6c88:	beq	6c94 <eval_void+0xd0>
    6c8c:	mvn	r0, #0
    6c90:	b	6f70 <eval_void+0x3ac>
    6c94:	ldr	r1, [r5, #24]
    6c98:	cmp	r1, #0
    6c9c:	beq	6ce4 <eval_void+0x120>
    6ca0:	add	r2, sp, #72	; 0x48
    6ca4:	mov	r0, r4
    6ca8:	bl	3240 <eval_integer>
    6cac:	cmp	r0, #0
    6cb0:	beq	6cbc <eval_void+0xf8>
    6cb4:	mvn	r0, #0
    6cb8:	b	6f70 <eval_void+0x3ac>
    6cbc:	ldr	r1, [sp, #72]	; 0x48
    6cc0:	ldr	ip, [sp, #76]	; 0x4c
    6cc4:	orr	r2, ip, r1
    6cc8:	cmp	r2, #0
    6ccc:	bne	6ce4 <eval_void+0x120>
    6cd0:	mvn	r0, #400	; 0x190
    6cd4:	ldr	r1, [pc, #708]	; 6fa0 <eval_void+0x3dc>
    6cd8:	bl	0 <coda_set_error>
    6cdc:	mvn	r0, #0
    6ce0:	b	6f70 <eval_void+0x3ac>
    6ce4:	ldr	ip, [sp, #72]	; 0x48
    6ce8:	ldr	r0, [sp, #76]	; 0x4c
    6cec:	cmp	r0, #0
    6cf0:	bne	6d00 <eval_void+0x13c>
    6cf4:	cmp	ip, #0
    6cf8:	bhi	6da0 <eval_void+0x1dc>
    6cfc:	b	6d08 <eval_void+0x144>
    6d00:	cmp	r0, #0
    6d04:	bgt	6da0 <eval_void+0x1dc>
    6d08:	lsl	r2, r6, #3
    6d0c:	add	r2, r4, r2
    6d10:	ldr	r0, [sp, #56]	; 0x38
    6d14:	ldr	ip, [sp, #60]	; 0x3c
    6d18:	str	r0, [r2, #528]	; 0x210
    6d1c:	str	ip, [r2, #532]	; 0x214
    6d20:	lsl	r2, r6, #3
    6d24:	add	r0, r4, r2
    6d28:	ldr	r1, [r0, #528]	; 0x210
    6d2c:	ldr	r3, [r0, #532]	; 0x214
    6d30:	ldr	ip, [sp, #64]	; 0x40
    6d34:	ldr	r0, [sp, #68]	; 0x44
    6d38:	cmp	r3, r0
    6d3c:	bne	6d4c <eval_void+0x188>
    6d40:	cmp	r1, ip
    6d44:	bcs	6d54 <eval_void+0x190>
    6d48:	b	6e38 <eval_void+0x274>
    6d4c:	cmp	r3, r0
    6d50:	ble	6e38 <eval_void+0x274>
    6d54:	ldr	r1, [r5, #28]
    6d58:	mov	r0, r4
    6d5c:	bl	6bc4 <eval_void>
    6d60:	cmp	r0, #0
    6d64:	beq	6d70 <eval_void+0x1ac>
    6d68:	mvn	r0, #0
    6d6c:	b	6f70 <eval_void+0x3ac>
    6d70:	lsl	r3, r6, #3
    6d74:	add	r1, r4, r3
    6d78:	ldr	r2, [r1, #528]	; 0x210
    6d7c:	ldr	r0, [r1, #532]	; 0x214
    6d80:	ldr	ip, [sp, #72]	; 0x48
    6d84:	ldr	r3, [sp, #76]	; 0x4c
    6d88:	adds	lr, r2, ip
    6d8c:	adc	ip, r0, r3
    6d90:	mov	r0, lr
    6d94:	str	r0, [r1, #528]	; 0x210
    6d98:	str	ip, [r1, #532]	; 0x214
    6d9c:	b	6d20 <eval_void+0x15c>
    6da0:	lsl	r0, r6, #3
    6da4:	add	r1, r4, r0
    6da8:	ldr	r3, [sp, #56]	; 0x38
    6dac:	ldr	r0, [sp, #60]	; 0x3c
    6db0:	str	r3, [r1, #528]	; 0x210
    6db4:	str	r0, [r1, #532]	; 0x214
    6db8:	lsl	r2, r6, #3
    6dbc:	add	r1, r4, r2
    6dc0:	ldr	r0, [r1, #528]	; 0x210
    6dc4:	ldr	r3, [r1, #532]	; 0x214
    6dc8:	ldr	r1, [sp, #64]	; 0x40
    6dcc:	ldr	r2, [sp, #68]	; 0x44
    6dd0:	cmp	r3, r2
    6dd4:	bne	6de4 <eval_void+0x220>
    6dd8:	cmp	r0, r1
    6ddc:	bls	6dec <eval_void+0x228>
    6de0:	b	6e38 <eval_void+0x274>
    6de4:	cmp	r3, r2
    6de8:	bge	6e38 <eval_void+0x274>
    6dec:	ldr	r1, [r5, #28]
    6df0:	mov	r0, r4
    6df4:	bl	6bc4 <eval_void>
    6df8:	cmp	r0, #0
    6dfc:	beq	6e08 <eval_void+0x244>
    6e00:	mvn	r0, #0
    6e04:	b	6f70 <eval_void+0x3ac>
    6e08:	lsl	r2, r6, #3
    6e0c:	add	r2, r4, r2
    6e10:	ldr	r1, [r2, #528]	; 0x210
    6e14:	ldr	r3, [r2, #532]	; 0x214
    6e18:	ldr	r0, [sp, #72]	; 0x48
    6e1c:	ldr	ip, [sp, #76]	; 0x4c
    6e20:	adds	lr, r1, r0
    6e24:	adc	ip, r3, ip
    6e28:	mov	r3, lr
    6e2c:	str	r3, [r2, #528]	; 0x210
    6e30:	str	ip, [r2, #532]	; 0x214
    6e34:	b	6db8 <eval_void+0x1f4>
    6e38:	lsl	ip, r6, #3
    6e3c:	add	r0, r4, ip
    6e40:	str	r7, [r0, #528]	; 0x210
    6e44:	str	r8, [r0, #532]	; 0x214
    6e48:	b	6f6c <eval_void+0x3a8>
    6e4c:	cmp	r1, #74	; 0x4a
    6e50:	beq	6f34 <eval_void+0x370>
    6e54:	cmp	r1, #84	; 0x54
    6e58:	bne	6f14 <eval_void+0x350>
    6e5c:	mov	r2, #0
    6e60:	mov	r1, #0
    6e64:	str	r1, [sp, #40]	; 0x28
    6e68:	str	r2, [sp, #44]	; 0x2c
    6e6c:	ldr	r0, [r4]
    6e70:	cmp	r0, #0
    6e74:	bne	6e8c <eval_void+0x2c8>
    6e78:	ldr	r0, [pc, #272]	; 6f90 <eval_void+0x3cc>
    6e7c:	ldr	r1, [pc, #276]	; 6f98 <eval_void+0x3d4>
    6e80:	movw	r2, #3881	; 0xf29
    6e84:	ldr	r3, [pc, #272]	; 6f9c <eval_void+0x3d8>
    6e88:	bl	0 <__assert_fail>
    6e8c:	ldr	r1, [r5, #16]
    6e90:	cmp	r1, #0
    6e94:	beq	6eb4 <eval_void+0x2f0>
    6e98:	add	r2, sp, #40	; 0x28
    6e9c:	mov	r0, r4
    6ea0:	bl	3240 <eval_integer>
    6ea4:	cmp	r0, #0
    6ea8:	beq	6eb4 <eval_void+0x2f0>
    6eac:	mvn	r0, #0
    6eb0:	b	6f70 <eval_void+0x3ac>
    6eb4:	ldr	r1, [r5, #20]
    6eb8:	add	r2, sp, #48	; 0x30
    6ebc:	mov	r0, r4
    6ec0:	bl	3240 <eval_integer>
    6ec4:	cmp	r0, #0
    6ec8:	beq	6ed4 <eval_void+0x310>
    6ecc:	mvn	r0, #0
    6ed0:	b	6f70 <eval_void+0x3ac>
    6ed4:	ldr	ip, [r4]
    6ed8:	ldr	r0, [ip]
    6edc:	ldr	r1, [r5, #12]
    6ee0:	ldr	r2, [sp, #40]	; 0x28
    6ee4:	add	r3, sp, #32
    6ee8:	bl	0 <coda_product_variable_get_pointer>
    6eec:	cmp	r0, #0
    6ef0:	beq	6efc <eval_void+0x338>
    6ef4:	mvn	r0, #0
    6ef8:	b	6f70 <eval_void+0x3ac>
    6efc:	ldr	r3, [sp, #32]
    6f00:	ldr	r0, [sp, #48]	; 0x30
    6f04:	ldr	r1, [sp, #52]	; 0x34
    6f08:	str	r0, [r3]
    6f0c:	str	r1, [r3, #4]
    6f10:	b	6f6c <eval_void+0x3a8>
    6f14:	ldr	r0, [pc, #120]	; 6f94 <eval_void+0x3d0>
    6f18:	ldr	r1, [pc, #120]	; 6f98 <eval_void+0x3d4>
    6f1c:	movw	r2, #3902	; 0xf3e
    6f20:	ldr	r3, [pc, #116]	; 6f9c <eval_void+0x3d8>
    6f24:	bl	0 <__assert_fail>
    6f28:	mov	r0, #1
    6f2c:	bl	0 <exit>
    6f30:	b	6f6c <eval_void+0x3a8>
    6f34:	ldr	r1, [r5, #16]
    6f38:	mov	r0, r4
    6f3c:	bl	6bc4 <eval_void>
    6f40:	cmp	r0, #0
    6f44:	beq	6f50 <eval_void+0x38c>
    6f48:	mvn	r0, #0
    6f4c:	b	6f70 <eval_void+0x3ac>
    6f50:	ldr	r1, [r5, #20]
    6f54:	mov	r0, r4
    6f58:	bl	6bc4 <eval_void>
    6f5c:	cmp	r0, #0
    6f60:	beq	6f6c <eval_void+0x3a8>
    6f64:	mvn	r0, #0
    6f68:	b	6f70 <eval_void+0x3ac>
    6f6c:	mov	r0, #0
    6f70:	ldr	r4, [sp, #8]
    6f74:	ldr	r5, [sp, #12]
    6f78:	ldr	r6, [sp, #16]
    6f7c:	ldr	r7, [sp, #20]
    6f80:	ldr	r8, [sp, #24]
    6f84:	ldr	lr, [sp, #4]
    6f88:	add	sp, sp, #80	; 0x50
    6f8c:	bx	lr
    6f90:	.word	0x0000046b
    6f94:	.word	0x00000bf8
    6f98:	.word	0x0000053b
    6f9c:	.word	0x00000d9d
    6fa0:	.word	0x00000814

00006fa4 <eval_cursor>:
    6fa4:	mov	ip, sp
    6fa8:	sub	sp, sp, #48	; 0x30
    6fac:	str	ip, [sp]
    6fb0:	str	lr, [sp, #4]
    6fb4:	str	r4, [sp, #8]
    6fb8:	str	r5, [sp, #12]
    6fbc:	mov	r4, r1
    6fc0:	mov	r5, r0
    6fc4:	ldr	ip, [r5]
    6fc8:	cmp	ip, #0
    6fcc:	bne	6fe4 <eval_cursor+0x40>
    6fd0:	ldr	r0, [pc, #972]	; 73a4 <eval_cursor+0x400>
    6fd4:	ldr	r1, [pc, #980]	; 73b0 <eval_cursor+0x40c>
    6fd8:	movw	r2, #3913	; 0xf49
    6fdc:	ldr	r3, [pc, #980]	; 73b8 <eval_cursor+0x414>
    6fe0:	bl	0 <__assert_fail>
    6fe4:	ldr	r2, [r4]
    6fe8:	cmp	r2, #35	; 0x23
    6fec:	bcs	7228 <eval_cursor+0x284>
    6ff0:	cmp	r2, #33	; 0x21
    6ff4:	bcs	71a0 <eval_cursor+0x1fc>
    6ff8:	cmp	r2, #10
    6ffc:	beq	7158 <eval_cursor+0x1b4>
    7000:	cmp	r2, #32
    7004:	bne	732c <eval_cursor+0x388>
    7008:	ldr	r1, [r4, #16]
    700c:	cmp	r1, #0
    7010:	bne	7034 <eval_cursor+0x90>
    7014:	add	r0, r5, #8
    7018:	ldr	r2, [r5]
    701c:	ldr	r1, [r2]
    7020:	bl	0 <coda_cursor_set_product>
    7024:	cmp	r0, #0
    7028:	beq	704c <eval_cursor+0xa8>
    702c:	mvn	r0, #0
    7030:	b	738c <eval_cursor+0x3e8>
    7034:	mov	r0, r5
    7038:	bl	6fa4 <eval_cursor>
    703c:	cmp	r0, #0
    7040:	beq	704c <eval_cursor+0xa8>
    7044:	mvn	r0, #0
    7048:	b	738c <eval_cursor+0x3e8>
    704c:	ldr	r1, [r4, #20]
    7050:	add	r2, sp, #40	; 0x28
    7054:	mov	r0, r5
    7058:	bl	3240 <eval_integer>
    705c:	cmp	r0, #0
    7060:	beq	706c <eval_cursor+0xc8>
    7064:	mvn	r0, #0
    7068:	b	738c <eval_cursor+0x3e8>
    706c:	ldr	r2, [pc, #820]	; 73a8 <eval_cursor+0x404>
    7070:	ldr	r3, [r2]
    7074:	cmp	r3, #0
    7078:	bne	713c <eval_cursor+0x198>
    707c:	add	r0, r5, #8
    7080:	add	r1, sp, #16
    7084:	bl	0 <coda_cursor_get_type_class>
    7088:	cmp	r0, #0
    708c:	beq	7098 <eval_cursor+0xf4>
    7090:	mvn	r0, #0
    7094:	b	738c <eval_cursor+0x3e8>
    7098:	ldr	r0, [sp, #16]
    709c:	cmp	r0, #1
    70a0:	beq	70c0 <eval_cursor+0x11c>
    70a4:	bl	0 <coda_type_get_class_name>
    70a8:	mov	r2, r0
    70ac:	mvn	r0, #104	; 0x68
    70b0:	ldr	r1, [pc, #744]	; 73a0 <eval_cursor+0x3fc>
    70b4:	bl	0 <coda_set_error>
    70b8:	mvn	r0, #0
    70bc:	b	738c <eval_cursor+0x3e8>
    70c0:	add	r0, r5, #8
    70c4:	add	r1, sp, #24
    70c8:	bl	0 <coda_cursor_get_num_elements>
    70cc:	cmp	r0, #0
    70d0:	beq	70dc <eval_cursor+0x138>
    70d4:	mvn	r0, #0
    70d8:	b	738c <eval_cursor+0x3e8>
    70dc:	ldr	r1, [sp, #40]	; 0x28
    70e0:	ldr	r3, [sp, #44]	; 0x2c
    70e4:	cmp	r3, #0
    70e8:	blt	7120 <eval_cursor+0x17c>
    70ec:	ldr	r2, [sp, #24]
    70f0:	asr	r0, r2, #31
    70f4:	cmp	r3, r0
    70f8:	bne	710c <eval_cursor+0x168>
    70fc:	cmp	r1, r2
    7100:	movcs	r3, #1
    7104:	movcc	r3, #0
    7108:	b	7118 <eval_cursor+0x174>
    710c:	cmp	r3, r0
    7110:	movgt	r3, #1
    7114:	movle	r3, #0
    7118:	cmp	r3, #0
    711c:	beq	713c <eval_cursor+0x198>
    7120:	mvn	r0, #106	; 0x6a
    7124:	ldr	r1, [pc, #656]	; 73bc <eval_cursor+0x418>
    7128:	ldr	r2, [sp, #40]	; 0x28
    712c:	ldr	r3, [sp, #24]
    7130:	bl	0 <coda_set_error>
    7134:	mvn	r0, #0
    7138:	b	738c <eval_cursor+0x3e8>
    713c:	add	r0, r5, #8
    7140:	ldr	r1, [sp, #40]	; 0x28
    7144:	bl	0 <coda_cursor_goto_array_element_by_index>
    7148:	cmp	r0, #0
    714c:	beq	7388 <eval_cursor+0x3e4>
    7150:	mvn	r0, #0
    7154:	b	738c <eval_cursor+0x3e8>
    7158:	ldr	r0, [r5]
    715c:	ldr	r1, [r0]
    7160:	ldr	r0, [r1, #16]
    7164:	cmp	r0, #0
    7168:	beq	7188 <eval_cursor+0x1e4>
    716c:	bl	0 <coda_type_get_format_name>
    7170:	mov	r2, r0
    7174:	mvn	r0, #400	; 0x190
    7178:	ldr	r1, [pc, #564]	; 73b4 <eval_cursor+0x410>
    717c:	bl	0 <coda_set_error>
    7180:	mvn	r0, #0
    7184:	b	738c <eval_cursor+0x3e8>
    7188:	add	r0, r5, #8
    718c:	bl	0 <coda_ascii_cursor_set_asciilines>
    7190:	cmp	r0, #0
    7194:	beq	7388 <eval_cursor+0x3e4>
    7198:	mvn	r0, #0
    719c:	b	738c <eval_cursor+0x3e8>
    71a0:	cmp	r2, #33	; 0x21
    71a4:	beq	71d0 <eval_cursor+0x22c>
    71a8:	add	r0, r5, #8
    71ac:	ldr	ip, [r5]
    71b0:	mov	r2, ip
    71b4:	mov	r3, r0
    71b8:	mov	lr, #130	; 0x82
    71bc:	ldr	ip, [r2], #4
    71c0:	subs	lr, lr, #1
    71c4:	str	ip, [r3], #4
    71c8:	bne	71bc <eval_cursor+0x218>
    71cc:	b	7388 <eval_cursor+0x3e4>
    71d0:	ldr	r1, [r4, #16]
    71d4:	cmp	r1, #0
    71d8:	beq	71f4 <eval_cursor+0x250>
    71dc:	mov	r0, r5
    71e0:	bl	6fa4 <eval_cursor>
    71e4:	cmp	r0, #0
    71e8:	beq	71f4 <eval_cursor+0x250>
    71ec:	mvn	r0, #0
    71f0:	b	738c <eval_cursor+0x3e8>
    71f4:	add	r0, r5, #8
    71f8:	bl	0 <coda_cursor_goto_attributes>
    71fc:	cmp	r0, #0
    7200:	beq	720c <eval_cursor+0x268>
    7204:	mvn	r0, #0
    7208:	b	738c <eval_cursor+0x3e8>
    720c:	add	r0, r5, #8
    7210:	ldr	r1, [r4, #12]
    7214:	bl	0 <coda_cursor_goto_record_field_by_name>
    7218:	cmp	r0, #0
    721c:	beq	7388 <eval_cursor+0x3e4>
    7220:	mvn	r0, #0
    7224:	b	738c <eval_cursor+0x3e8>
    7228:	cmp	r2, #37	; 0x25
    722c:	bcs	72fc <eval_cursor+0x358>
    7230:	cmp	r2, #35	; 0x23
    7234:	bne	7388 <eval_cursor+0x3e4>
    7238:	ldr	r1, [r4, #16]
    723c:	cmp	r1, #0
    7240:	beq	725c <eval_cursor+0x2b8>
    7244:	mov	r0, r5
    7248:	bl	6fa4 <eval_cursor>
    724c:	cmp	r0, #0
    7250:	beq	725c <eval_cursor+0x2b8>
    7254:	mvn	r0, #0
    7258:	b	738c <eval_cursor+0x3e8>
    725c:	add	r0, r5, #8
    7260:	add	r1, sp, #20
    7264:	bl	0 <coda_cursor_get_type_class>
    7268:	cmp	r0, #0
    726c:	beq	7278 <eval_cursor+0x2d4>
    7270:	mvn	r0, #0
    7274:	b	738c <eval_cursor+0x3e8>
    7278:	ldr	r3, [sp, #20]
    727c:	cmp	r3, #6
    7280:	bne	729c <eval_cursor+0x2f8>
    7284:	add	r0, r5, #8
    7288:	bl	0 <coda_cursor_use_base_type_of_special_type>
    728c:	cmp	r0, #0
    7290:	beq	729c <eval_cursor+0x2f8>
    7294:	mvn	r0, #0
    7298:	b	738c <eval_cursor+0x3e8>
    729c:	ldr	r1, [r4, #12]
    72a0:	cmp	r1, #0
    72a4:	bne	72e4 <eval_cursor+0x340>
    72a8:	ldr	r1, [r4, #20]
    72ac:	add	r2, sp, #32
    72b0:	mov	r0, r5
    72b4:	bl	3240 <eval_integer>
    72b8:	cmp	r0, #0
    72bc:	beq	72c8 <eval_cursor+0x324>
    72c0:	mvn	r0, #0
    72c4:	b	738c <eval_cursor+0x3e8>
    72c8:	add	r0, r5, #8
    72cc:	ldr	r1, [sp, #32]
    72d0:	bl	0 <coda_cursor_goto_record_field_by_index>
    72d4:	cmp	r0, #0
    72d8:	beq	7388 <eval_cursor+0x3e4>
    72dc:	mvn	r0, #0
    72e0:	b	738c <eval_cursor+0x3e8>
    72e4:	add	r0, r5, #8
    72e8:	bl	0 <coda_cursor_goto_record_field_by_name>
    72ec:	cmp	r0, #0
    72f0:	beq	7388 <eval_cursor+0x3e4>
    72f4:	mvn	r0, #0
    72f8:	b	738c <eval_cursor+0x3e8>
    72fc:	cmp	r2, #37	; 0x25
    7300:	beq	734c <eval_cursor+0x3a8>
    7304:	cmp	r2, #38	; 0x26
    7308:	bne	732c <eval_cursor+0x388>
    730c:	add	r0, r5, #8
    7310:	ldr	r1, [r5]
    7314:	ldr	r1, [r1]
    7318:	bl	0 <coda_cursor_set_product>
    731c:	cmp	r0, #0
    7320:	beq	7388 <eval_cursor+0x3e4>
    7324:	mvn	r0, #0
    7328:	b	738c <eval_cursor+0x3e8>
    732c:	ldr	r0, [pc, #120]	; 73ac <eval_cursor+0x408>
    7330:	ldr	r1, [pc, #120]	; 73b0 <eval_cursor+0x40c>
    7334:	movw	r2, #4079	; 0xfef
    7338:	ldr	r3, [pc, #120]	; 73b8 <eval_cursor+0x414>
    733c:	bl	0 <__assert_fail>
    7340:	mov	r0, #1
    7344:	bl	0 <exit>
    7348:	b	7388 <eval_cursor+0x3e4>
    734c:	ldr	r1, [r4, #16]
    7350:	cmp	r1, #0
    7354:	beq	7370 <eval_cursor+0x3cc>
    7358:	mov	r0, r5
    735c:	bl	6fa4 <eval_cursor>
    7360:	cmp	r0, #0
    7364:	beq	7370 <eval_cursor+0x3cc>
    7368:	mvn	r0, #0
    736c:	b	738c <eval_cursor+0x3e8>
    7370:	add	r0, r5, #8
    7374:	bl	0 <coda_cursor_goto_parent>
    7378:	cmp	r0, #0
    737c:	beq	7388 <eval_cursor+0x3e4>
    7380:	mvn	r0, #0
    7384:	b	738c <eval_cursor+0x3e8>
    7388:	mov	r0, #0
    738c:	ldr	r4, [sp, #8]
    7390:	ldr	r5, [sp, #12]
    7394:	ldr	lr, [sp, #4]
    7398:	add	sp, sp, #48	; 0x30
    739c:	bx	lr
    73a0:	.word	0x000003e6
    73a4:	.word	0x0000046b
    73a8:	.word	0x00000000
    73ac:	.word	0x00000bf8
    73b0:	.word	0x0000053b
    73b4:	.word	0x0000004e
    73b8:	.word	0x00000da7
    73bc:	.word	0x00000181

000073c0 <coda_expression_eval_void>:
    73c0:	mov	ip, sp
    73c4:	sub	sp, sp, #584	; 0x248
    73c8:	str	ip, [sp]
    73cc:	str	lr, [sp, #4]
    73d0:	str	r4, [sp, #8]
    73d4:	mov	r4, r0
    73d8:	ldr	r2, [r4, #4]
    73dc:	cmp	r2, #5
    73e0:	beq	73f8 <coda_expression_eval_void+0x38>
    73e4:	mvn	r0, #99	; 0x63
    73e8:	ldr	r1, [pc, #84]	; 7444 <coda_expression_eval_void+0x84>
    73ec:	bl	0 <coda_set_error>
    73f0:	mvn	r0, #0
    73f4:	b	7434 <coda_expression_eval_void+0x74>
    73f8:	cmp	r1, #0
    73fc:	bne	7420 <coda_expression_eval_void+0x60>
    7400:	ldr	r2, [r4, #8]
    7404:	cmp	r2, #0
    7408:	bne	7420 <coda_expression_eval_void+0x60>
    740c:	mvn	r0, #99	; 0x63
    7410:	ldr	r1, [pc, #48]	; 7448 <coda_expression_eval_void+0x88>
    7414:	bl	0 <coda_set_error>
    7418:	mvn	r0, #0
    741c:	b	7434 <coda_expression_eval_void+0x74>
    7420:	add	r0, sp, #16
    7424:	bl	b98 <init_eval_info>
    7428:	add	r0, sp, #16
    742c:	mov	r1, r4
    7430:	bl	6bc4 <eval_void>
    7434:	ldr	r4, [sp, #8]
    7438:	ldr	lr, [sp, #4]
    743c:	add	sp, sp, #584	; 0x248
    7440:	bx	lr
    7444:	.word	0x000002e6
    7448:	.word	0x00000abd

0000744c <print_expression>:
    744c:	mov	ip, sp
    7450:	sub	sp, sp, #88	; 0x58
    7454:	str	ip, [sp, #4]
    7458:	str	lr, [sp, #8]
    745c:	str	r4, [sp, #16]
    7460:	str	r5, [sp, #20]
    7464:	str	r6, [sp, #24]
    7468:	str	r7, [sp, #28]
    746c:	str	r8, [sp, #32]
    7470:	str	r9, [sp, #36]	; 0x24
    7474:	ldr	r8, [ip]
    7478:	mov	r4, r3
    747c:	mov	r5, r2
    7480:	mov	r6, r1
    7484:	mov	r7, r0
    7488:	cmp	r7, #0
    748c:	bne	74a4 <print_expression+0x58>
    7490:	ldr	r0, [pc, #3708]	; 8314 <print_expression+0xec8>
    7494:	ldr	r1, [pc, #3748]	; 8340 <print_expression+0xef4>
    7498:	movw	r2, #4196	; 0x1064
    749c:	ldr	r3, [pc, #3592]	; 82ac <print_expression+0xe60>
    74a0:	bl	0 <__assert_fail>
    74a4:	ldr	r0, [r7]
    74a8:	cmp	r0, #87	; 0x57
    74ac:	bcs	9658 <print_expression+0x220c>
    74b0:	add	pc, pc, r0, lsl #2
    74b4:	nop	{0}
    74b8:	b	7614 <print_expression+0x1c8>
    74bc:	b	7654 <print_expression+0x208>
    74c0:	b	7848 <print_expression+0x3fc>
    74c4:	b	76b8 <print_expression+0x26c>
    74c8:	b	77e4 <print_expression+0x398>
    74cc:	b	7918 <print_expression+0x4cc>
    74d0:	b	797c <print_expression+0x530>
    74d4:	b	79e0 <print_expression+0x594>
    74d8:	b	771c <print_expression+0x2d0>
    74dc:	b	7780 <print_expression+0x334>
    74e0:	b	7a44 <print_expression+0x5f8>
    74e4:	b	9590 <print_expression+0x2144>
    74e8:	b	7a60 <print_expression+0x614>
    74ec:	b	7aa0 <print_expression+0x654>
    74f0:	b	7ae0 <print_expression+0x694>
    74f4:	b	7b20 <print_expression+0x6d4>
    74f8:	b	7b60 <print_expression+0x714>
    74fc:	b	78d8 <print_expression+0x48c>
    7500:	b	7c00 <print_expression+0x7b4>
    7504:	b	7c44 <print_expression+0x7f8>
    7508:	b	7c60 <print_expression+0x814>
    750c:	b	7c80 <print_expression+0x834>
    7510:	b	7c80 <print_expression+0x834>
    7514:	b	7f3c <print_expression+0xaf0>
    7518:	b	7fa0 <print_expression+0xb54>
    751c:	b	8004 <print_expression+0xbb8>
    7520:	b	8068 <print_expression+0xc1c>
    7524:	b	80a8 <print_expression+0xc5c>
    7528:	b	80c4 <print_expression+0xc78>
    752c:	b	80e0 <print_expression+0xc94>
    7530:	b	8120 <print_expression+0xcd4>
    7534:	b	8160 <print_expression+0xd14>
    7538:	b	83a4 <print_expression+0xf58>
    753c:	b	83f8 <print_expression+0xfac>
    7540:	b	842c <print_expression+0xfe0>
    7544:	b	8438 <print_expression+0xfec>
    7548:	b	847c <print_expression+0x1030>
    754c:	b	8488 <print_expression+0x103c>
    7550:	b	84c0 <print_expression+0x1074>
    7554:	b	84cc <print_expression+0x1080>
    7558:	b	850c <print_expression+0x10c0>
    755c:	b	859c <print_expression+0x1150>
    7560:	b	862c <print_expression+0x11e0>
    7564:	b	86a4 <print_expression+0x1258>
    7568:	b	86e4 <print_expression+0x1298>
    756c:	b	8704 <print_expression+0x12b8>
    7570:	b	8744 <print_expression+0x12f8>
    7574:	b	8784 <print_expression+0x1338>
    7578:	b	87c4 <print_expression+0x1378>
    757c:	b	8804 <print_expression+0x13b8>
    7580:	b	8844 <print_expression+0x13f8>
    7584:	b	8884 <print_expression+0x1438>
    7588:	b	8914 <print_expression+0x14c8>
    758c:	b	89a4 <print_expression+0x1558>
    7590:	b	8a18 <print_expression+0x15cc>
    7594:	b	8a8c <print_expression+0x1640>
    7598:	b	8acc <print_expression+0x1680>
    759c:	b	8b30 <print_expression+0x16e4>
    75a0:	b	8b94 <print_expression+0x1748>
    75a4:	b	8bf8 <print_expression+0x17ac>
    75a8:	b	8c5c <print_expression+0x1810>
    75ac:	b	8c84 <print_expression+0x1838>
    75b0:	b	8ce8 <print_expression+0x189c>
    75b4:	b	8d10 <print_expression+0x18c4>
    75b8:	b	8d50 <print_expression+0x1904>
    75bc:	b	8d90 <print_expression+0x1944>
    75c0:	b	8df4 <print_expression+0x19a8>
    75c4:	b	8e58 <print_expression+0x1a0c>
    75c8:	b	8e74 <print_expression+0x1a28>
    75cc:	b	8e90 <print_expression+0x1a44>
    75d0:	b	8eac <print_expression+0x1a60>
    75d4:	b	8ec8 <print_expression+0x1a7c>
    75d8:	b	8f5c <print_expression+0x1b10>
    75dc:	b	8f9c <print_expression+0x1b50>
    75e0:	b	8fdc <print_expression+0x1b90>
    75e4:	b	9030 <print_expression+0x1be4>
    75e8:	b	90a0 <print_expression+0x1c54>
    75ec:	b	9110 <print_expression+0x1cc4>
    75f0:	b	92d8 <print_expression+0x1e8c>
    75f4:	b	933c <print_expression+0x1ef0>
    75f8:	b	93a0 <print_expression+0x1f54>
    75fc:	b	93e0 <print_expression+0x1f94>
    7600:	b	9444 <print_expression+0x1ff8>
    7604:	b	9488 <print_expression+0x203c>
    7608:	b	94cc <print_expression+0x2080>
    760c:	b	9548 <print_expression+0x20fc>
    7610:	b	95f4 <print_expression+0x21a8>
    7614:	ldr	r2, [pc, #3424]	; 837c <print_expression+0xf30>
    7618:	ldr	r1, [pc, #3132]	; 825c <print_expression+0xe10>
    761c:	cmp	r4, #0
    7620:	movne	r0, r2
    7624:	moveq	r0, r1
    7628:	blx	r6
    762c:	ldr	r0, [r7, #16]
    7630:	mov	r3, #15
    7634:	str	r3, [sp]
    7638:	mov	r3, r4
    763c:	mov	r2, r5
    7640:	mov	r1, r6
    7644:	bl	744c <print_expression>
    7648:	ldr	r0, [pc, #3060]	; 8244 <print_expression+0xdf8>
    764c:	blx	r6
    7650:	b	9658 <print_expression+0x220c>
    7654:	cmp	r8, #4
    7658:	bge	7664 <print_expression+0x218>
    765c:	ldr	r0, [pc, #3148]	; 82b0 <print_expression+0xe64>
    7660:	blx	r6
    7664:	ldr	r0, [r7, #16]
    7668:	mov	ip, #4
    766c:	str	ip, [sp]
    7670:	mov	r3, r4
    7674:	mov	r2, r5
    7678:	mov	r1, r6
    767c:	bl	744c <print_expression>
    7680:	ldr	r0, [pc, #3320]	; 8380 <print_expression+0xf34>
    7684:	blx	r6
    7688:	ldr	r0, [r7, #20]
    768c:	mov	r1, #4
    7690:	str	r1, [sp]
    7694:	mov	r3, r4
    7698:	mov	r2, r5
    769c:	mov	r1, r6
    76a0:	bl	744c <print_expression>
    76a4:	cmp	r8, #4
    76a8:	bge	9658 <print_expression+0x220c>
    76ac:	ldr	r0, [pc, #2960]	; 8244 <print_expression+0xdf8>
    76b0:	blx	r6
    76b4:	b	9658 <print_expression+0x220c>
    76b8:	ldr	r0, [pc, #3212]	; 834c <print_expression+0xf00>
    76bc:	ldr	ip, [pc, #2972]	; 8260 <print_expression+0xe14>
    76c0:	cmp	r4, #0
    76c4:	movne	r0, r0
    76c8:	moveq	r0, ip
    76cc:	blx	r6
    76d0:	ldr	r0, [r7, #16]
    76d4:	mov	r1, #15
    76d8:	str	r1, [sp]
    76dc:	mov	r3, r4
    76e0:	mov	r2, r5
    76e4:	mov	r1, r6
    76e8:	bl	744c <print_expression>
    76ec:	ldr	r0, [pc, #3016]	; 82bc <print_expression+0xe70>
    76f0:	blx	r6
    76f4:	ldr	r0, [r7, #20]
    76f8:	mov	r3, #15
    76fc:	str	r3, [sp]
    7700:	mov	r3, r4
    7704:	mov	r2, r5
    7708:	mov	r1, r6
    770c:	bl	744c <print_expression>
    7710:	ldr	r0, [pc, #2860]	; 8244 <print_expression+0xdf8>
    7714:	blx	r6
    7718:	b	9658 <print_expression+0x220c>
    771c:	ldr	r2, [pc, #2960]	; 82b4 <print_expression+0xe68>
    7720:	ldr	r3, [pc, #3148]	; 8374 <print_expression+0xf28>
    7724:	cmp	r4, #0
    7728:	movne	r0, r2
    772c:	moveq	r0, r3
    7730:	blx	r6
    7734:	ldr	r0, [r7, #16]
    7738:	mov	r2, #15
    773c:	str	r2, [sp]
    7740:	mov	r3, r4
    7744:	mov	r2, r5
    7748:	mov	r1, r6
    774c:	bl	744c <print_expression>
    7750:	ldr	r0, [pc, #2916]	; 82bc <print_expression+0xe70>
    7754:	blx	r6
    7758:	ldr	r0, [r7, #20]
    775c:	mov	ip, #15
    7760:	str	ip, [sp]
    7764:	mov	r3, r4
    7768:	mov	r2, r5
    776c:	mov	r1, r6
    7770:	bl	744c <print_expression>
    7774:	ldr	r0, [pc, #2760]	; 8244 <print_expression+0xdf8>
    7778:	blx	r6
    777c:	b	9658 <print_expression+0x220c>
    7780:	ldr	r1, [pc, #2928]	; 82f8 <print_expression+0xeac>
    7784:	ldr	r2, [pc, #3072]	; 838c <print_expression+0xf40>
    7788:	cmp	r4, #0
    778c:	movne	r0, r1
    7790:	moveq	r0, r2
    7794:	blx	r6
    7798:	ldr	r0, [r7, #16]
    779c:	mov	r1, #15
    77a0:	str	r1, [sp]
    77a4:	mov	r3, r4
    77a8:	mov	r2, r5
    77ac:	mov	r1, r6
    77b0:	bl	744c <print_expression>
    77b4:	ldr	r0, [pc, #2816]	; 82bc <print_expression+0xe70>
    77b8:	blx	r6
    77bc:	ldr	r0, [r7, #20]
    77c0:	mov	r1, #15
    77c4:	str	r1, [sp]
    77c8:	mov	r3, r4
    77cc:	mov	r2, r5
    77d0:	mov	r1, r6
    77d4:	bl	744c <print_expression>
    77d8:	ldr	r0, [pc, #2660]	; 8244 <print_expression+0xdf8>
    77dc:	blx	r6
    77e0:	b	9658 <print_expression+0x220c>
    77e4:	ldr	r1, [pc, #2980]	; 8390 <print_expression+0xf44>
    77e8:	ldr	r0, [pc, #2828]	; 82fc <print_expression+0xeb0>
    77ec:	cmp	r4, #0
    77f0:	movne	r0, r1
    77f4:	moveq	r0, r0
    77f8:	blx	r6
    77fc:	ldr	r0, [r7, #16]
    7800:	mov	ip, #15
    7804:	str	ip, [sp]
    7808:	mov	r3, r4
    780c:	mov	r2, r5
    7810:	mov	r1, r6
    7814:	bl	744c <print_expression>
    7818:	ldr	r0, [pc, #2716]	; 82bc <print_expression+0xe70>
    781c:	blx	r6
    7820:	ldr	r0, [r7, #20]
    7824:	mov	r2, #15
    7828:	str	r2, [sp]
    782c:	mov	r3, r4
    7830:	mov	r2, r5
    7834:	mov	r1, r6
    7838:	bl	744c <print_expression>
    783c:	ldr	r0, [pc, #2560]	; 8244 <print_expression+0xdf8>
    7840:	blx	r6
    7844:	b	9658 <print_expression+0x220c>
    7848:	cmp	r8, #7
    784c:	bge	7858 <print_expression+0x40c>
    7850:	ldr	r0, [pc, #2648]	; 82b0 <print_expression+0xe64>
    7854:	blx	r6
    7858:	ldr	r0, [r7, #16]
    785c:	mov	r2, #7
    7860:	str	r2, [sp]
    7864:	mov	r3, r4
    7868:	mov	r2, r5
    786c:	mov	r1, r6
    7870:	bl	744c <print_expression>
    7874:	mov	ip, #1
    7878:	cmp	r5, #0
    787c:	movne	r0, #1
    7880:	moveq	r0, #0
    7884:	cmp	r4, #0
    7888:	movne	r3, ip
    788c:	moveq	r3, r0
    7890:	ldr	r2, [pc, #2736]	; 8348 <print_expression+0xefc>
    7894:	ldr	r1, [pc, #2512]	; 826c <print_expression+0xe20>
    7898:	cmp	r3, #0
    789c:	movne	r0, r2
    78a0:	moveq	r0, r1
    78a4:	blx	r6
    78a8:	ldr	r0, [r7, #20]
    78ac:	mov	ip, #7
    78b0:	str	ip, [sp]
    78b4:	mov	r3, r4
    78b8:	mov	r2, r5
    78bc:	mov	r1, r6
    78c0:	bl	744c <print_expression>
    78c4:	cmp	r8, #7
    78c8:	bge	9658 <print_expression+0x220c>
    78cc:	ldr	r0, [pc, #2416]	; 8244 <print_expression+0xdf8>
    78d0:	blx	r6
    78d4:	b	9658 <print_expression+0x220c>
    78d8:	ldr	r1, [pc, #2596]	; 8304 <print_expression+0xeb8>
    78dc:	ldr	r0, [pc, #2556]	; 82e0 <print_expression+0xe94>
    78e0:	cmp	r4, #0
    78e4:	movne	r0, r1
    78e8:	moveq	r0, r0
    78ec:	blx	r6
    78f0:	ldr	r0, [r7, #16]
    78f4:	mov	r1, #15
    78f8:	str	r1, [sp]
    78fc:	mov	r3, r4
    7900:	mov	r2, r5
    7904:	mov	r1, r6
    7908:	bl	744c <print_expression>
    790c:	ldr	r0, [pc, #2352]	; 8244 <print_expression+0xdf8>
    7910:	blx	r6
    7914:	b	9658 <print_expression+0x220c>
    7918:	ldr	ip, [pc, #2572]	; 832c <print_expression+0xee0>
    791c:	ldr	r1, [pc, #2672]	; 8394 <print_expression+0xf48>
    7920:	cmp	r4, #0
    7924:	movne	r0, ip
    7928:	moveq	r0, r1
    792c:	blx	r6
    7930:	ldr	r0, [r7, #16]
    7934:	mov	r1, #15
    7938:	str	r1, [sp]
    793c:	mov	r3, r4
    7940:	mov	r2, r5
    7944:	mov	r1, r6
    7948:	bl	744c <print_expression>
    794c:	ldr	r0, [pc, #2408]	; 82bc <print_expression+0xe70>
    7950:	blx	r6
    7954:	ldr	r0, [r7, #20]
    7958:	mov	ip, #15
    795c:	str	ip, [sp]
    7960:	mov	r3, r4
    7964:	mov	r2, r5
    7968:	mov	r1, r6
    796c:	bl	744c <print_expression>
    7970:	ldr	r0, [pc, #2252]	; 8244 <print_expression+0xdf8>
    7974:	blx	r6
    7978:	b	9658 <print_expression+0x220c>
    797c:	ldr	r0, [pc, #2548]	; 8378 <print_expression+0xf2c>
    7980:	ldr	r1, [pc, #2584]	; 83a0 <print_expression+0xf54>
    7984:	cmp	r4, #0
    7988:	movne	r0, r0
    798c:	moveq	r0, r1
    7990:	blx	r6
    7994:	ldr	r0, [r7, #16]
    7998:	mov	r1, #15
    799c:	str	r1, [sp]
    79a0:	mov	r3, r4
    79a4:	mov	r2, r5
    79a8:	mov	r1, r6
    79ac:	bl	744c <print_expression>
    79b0:	ldr	r0, [pc, #2308]	; 82bc <print_expression+0xe70>
    79b4:	blx	r6
    79b8:	ldr	r0, [r7, #20]
    79bc:	mov	r1, #15
    79c0:	str	r1, [sp]
    79c4:	mov	r3, r4
    79c8:	mov	r2, r5
    79cc:	mov	r1, r6
    79d0:	bl	744c <print_expression>
    79d4:	ldr	r0, [pc, #2152]	; 8244 <print_expression+0xdf8>
    79d8:	blx	r6
    79dc:	b	9658 <print_expression+0x220c>
    79e0:	ldr	r2, [pc, #2460]	; 8384 <print_expression+0xf38>
    79e4:	ldr	ip, [pc, #2216]	; 8294 <print_expression+0xe48>
    79e8:	cmp	r4, #0
    79ec:	movne	r0, r2
    79f0:	moveq	r0, ip
    79f4:	blx	r6
    79f8:	ldr	r0, [r7, #16]
    79fc:	mov	r1, #15
    7a00:	str	r1, [sp]
    7a04:	mov	r3, r4
    7a08:	mov	r2, r5
    7a0c:	mov	r1, r6
    7a10:	bl	744c <print_expression>
    7a14:	ldr	r0, [pc, #2208]	; 82bc <print_expression+0xe70>
    7a18:	blx	r6
    7a1c:	ldr	r0, [r7, #20]
    7a20:	mov	r3, #15
    7a24:	str	r3, [sp]
    7a28:	mov	r3, r4
    7a2c:	mov	r2, r5
    7a30:	mov	r1, r6
    7a34:	bl	744c <print_expression>
    7a38:	ldr	r0, [pc, #2052]	; 8244 <print_expression+0xdf8>
    7a3c:	blx	r6
    7a40:	b	9658 <print_expression+0x220c>
    7a44:	ldr	ip, [pc, #2164]	; 82c0 <print_expression+0xe74>
    7a48:	ldr	r0, [pc, #2092]	; 827c <print_expression+0xe30>
    7a4c:	cmp	r4, #0
    7a50:	movne	r0, ip
    7a54:	moveq	r0, r0
    7a58:	blx	r6
    7a5c:	b	9658 <print_expression+0x220c>
    7a60:	ldr	r3, [pc, #2280]	; 8350 <print_expression+0xf04>
    7a64:	ldr	ip, [pc, #2068]	; 8280 <print_expression+0xe34>
    7a68:	cmp	r4, #0
    7a6c:	movne	r0, r3
    7a70:	moveq	r0, ip
    7a74:	blx	r6
    7a78:	ldr	r0, [r7, #16]
    7a7c:	mov	r1, #15
    7a80:	str	r1, [sp]
    7a84:	mov	r3, r4
    7a88:	mov	r2, r5
    7a8c:	mov	r1, r6
    7a90:	bl	744c <print_expression>
    7a94:	ldr	r0, [pc, #1960]	; 8244 <print_expression+0xdf8>
    7a98:	blx	r6
    7a9c:	b	9658 <print_expression+0x220c>
    7aa0:	ldr	r0, [pc, #2032]	; 8298 <print_expression+0xe4c>
    7aa4:	ldr	r1, [pc, #2160]	; 831c <print_expression+0xed0>
    7aa8:	cmp	r4, #0
    7aac:	movne	r0, r0
    7ab0:	moveq	r0, r1
    7ab4:	blx	r6
    7ab8:	ldr	r0, [r7, #16]
    7abc:	mov	r1, #15
    7ac0:	str	r1, [sp]
    7ac4:	mov	r3, r4
    7ac8:	mov	r2, r5
    7acc:	mov	r1, r6
    7ad0:	bl	744c <print_expression>
    7ad4:	ldr	r0, [pc, #1896]	; 8244 <print_expression+0xdf8>
    7ad8:	blx	r6
    7adc:	b	9658 <print_expression+0x220c>
    7ae0:	ldr	ip, [pc, #1972]	; 829c <print_expression+0xe50>
    7ae4:	ldr	r1, [pc, #1952]	; 828c <print_expression+0xe40>
    7ae8:	cmp	r4, #0
    7aec:	movne	r0, ip
    7af0:	moveq	r0, r1
    7af4:	blx	r6
    7af8:	ldr	r0, [r7, #16]
    7afc:	mov	r3, #15
    7b00:	str	r3, [sp]
    7b04:	mov	r3, r4
    7b08:	mov	r2, r5
    7b0c:	mov	r1, r6
    7b10:	bl	744c <print_expression>
    7b14:	ldr	r0, [pc, #1832]	; 8244 <print_expression+0xdf8>
    7b18:	blx	r6
    7b1c:	b	9658 <print_expression+0x220c>
    7b20:	ldr	r2, [pc, #2144]	; 8388 <print_expression+0xf3c>
    7b24:	ldr	r3, [pc, #2004]	; 8300 <print_expression+0xeb4>
    7b28:	cmp	r4, #0
    7b2c:	movne	r0, r2
    7b30:	moveq	r0, r3
    7b34:	blx	r6
    7b38:	ldr	r0, [r7, #16]
    7b3c:	mov	r2, #15
    7b40:	str	r2, [sp]
    7b44:	mov	r3, r4
    7b48:	mov	r2, r5
    7b4c:	mov	r1, r6
    7b50:	bl	744c <print_expression>
    7b54:	ldr	r0, [pc, #1768]	; 8244 <print_expression+0xdf8>
    7b58:	blx	r6
    7b5c:	b	9658 <print_expression+0x220c>
    7b60:	ldr	r1, [pc, #1760]	; 8248 <print_expression+0xdfc>
    7b64:	ldr	r0, [pc, #1920]	; 82ec <print_expression+0xea0>
    7b68:	cmp	r4, #0
    7b6c:	movne	r0, r1
    7b70:	moveq	r0, r0
    7b74:	blx	r6
    7b78:	ldr	r0, [r7, #16]
    7b7c:	mov	r3, #15
    7b80:	str	r3, [sp]
    7b84:	mov	r3, r4
    7b88:	mov	r2, r5
    7b8c:	mov	r1, r6
    7b90:	bl	744c <print_expression>
    7b94:	ldr	r1, [r7, #20]
    7b98:	cmp	r1, #0
    7b9c:	beq	7bc4 <print_expression+0x778>
    7ba0:	ldr	r0, [pc, #1948]	; 8344 <print_expression+0xef8>
    7ba4:	blx	r6
    7ba8:	ldr	r0, [r7, #20]
    7bac:	mov	r3, #15
    7bb0:	str	r3, [sp]
    7bb4:	mov	r3, r4
    7bb8:	mov	r2, r5
    7bbc:	mov	r1, r6
    7bc0:	bl	744c <print_expression>
    7bc4:	ldr	r1, [r7, #24]
    7bc8:	cmp	r1, #0
    7bcc:	beq	7bf4 <print_expression+0x7a8>
    7bd0:	ldr	r0, [pc, #1900]	; 8344 <print_expression+0xef8>
    7bd4:	blx	r6
    7bd8:	ldr	r0, [r7, #24]
    7bdc:	mov	ip, #15
    7be0:	str	ip, [sp]
    7be4:	mov	r3, r4
    7be8:	mov	r2, r5
    7bec:	mov	r1, r6
    7bf0:	bl	744c <print_expression>
    7bf4:	ldr	r0, [pc, #1608]	; 8244 <print_expression+0xdf8>
    7bf8:	blx	r6
    7bfc:	b	9658 <print_expression+0x220c>
    7c00:	ldr	r0, [r7, #12]
    7c04:	cmp	r0, #0
    7c08:	bne	7c28 <print_expression+0x7dc>
    7c0c:	ldr	r1, [pc, #1676]	; 82a0 <print_expression+0xe54>
    7c10:	ldr	r2, [pc, #1624]	; 8270 <print_expression+0xe24>
    7c14:	cmp	r4, #0
    7c18:	movne	r0, r1
    7c1c:	moveq	r0, r2
    7c20:	blx	r6
    7c24:	b	9658 <print_expression+0x220c>
    7c28:	ldr	r3, [pc, #1688]	; 82c8 <print_expression+0xe7c>
    7c2c:	ldr	r1, [pc, #1568]	; 8254 <print_expression+0xe08>
    7c30:	cmp	r4, #0
    7c34:	movne	r0, r3
    7c38:	moveq	r0, r1
    7c3c:	blx	r6
    7c40:	b	9658 <print_expression+0x220c>
    7c44:	vldr	d0, [r7, #16]
    7c48:	add	r0, sp, #64	; 0x40
    7c4c:	bl	0 <coda_strfl>
    7c50:	ldr	r0, [pc, #1716]	; 830c <print_expression+0xec0>
    7c54:	add	r1, sp, #64	; 0x40
    7c58:	blx	r6
    7c5c:	b	9658 <print_expression+0x220c>
    7c60:	ldr	r0, [r7, #16]
    7c64:	ldr	r1, [r7, #20]
    7c68:	add	r2, sp, #40	; 0x28
    7c6c:	bl	0 <coda_str64>
    7c70:	ldr	r0, [pc, #1684]	; 830c <print_expression+0xec0>
    7c74:	add	r1, sp, #40	; 0x28
    7c78:	blx	r6
    7c7c:	b	9658 <print_expression+0x220c>
    7c80:	ldr	ip, [pc, #1608]	; 82d0 <print_expression+0xe84>
    7c84:	ldr	r2, [pc, #1668]	; 8310 <print_expression+0xec4>
    7c88:	cmp	r5, #0
    7c8c:	movne	r0, ip
    7c90:	moveq	r0, r2
    7c94:	blx	r6
    7c98:	ldr	r8, [r7, #16]
    7c9c:	ldr	r7, [r7, #12]
    7ca0:	mov	r9, #0
    7ca4:	mov	r1, #1
    7ca8:	cmp	r8, #0
    7cac:	moveq	r3, #1
    7cb0:	movne	r3, #0
    7cb4:	cmp	r7, #0
    7cb8:	moveq	r2, r1
    7cbc:	movne	r2, r3
    7cc0:	cmp	r2, #0
    7cc4:	bne	7f20 <print_expression+0xad4>
    7cc8:	cmp	r7, #0
    7ccc:	bge	7cdc <print_expression+0x890>
    7cd0:	mov	r0, r8
    7cd4:	bl	0 <strlen>
    7cd8:	mov	r7, r0
    7cdc:	cmp	r9, r7
    7ce0:	bge	7f20 <print_expression+0xad4>
    7ce4:	ldrb	r3, [r8, r9]
    7ce8:	cmp	r3, #27
    7cec:	bcs	7d84 <print_expression+0x938>
    7cf0:	cmp	r3, #10
    7cf4:	bcs	7d34 <print_expression+0x8e8>
    7cf8:	cmp	r3, #7
    7cfc:	beq	7d28 <print_expression+0x8dc>
    7d00:	cmp	r3, #8
    7d04:	beq	7d1c <print_expression+0x8d0>
    7d08:	cmp	r3, #9
    7d0c:	bne	7ea8 <print_expression+0xa5c>
    7d10:	ldr	r0, [pc, #1564]	; 8334 <print_expression+0xee8>
    7d14:	blx	r6
    7d18:	b	7f18 <print_expression+0xacc>
    7d1c:	ldr	r0, [pc, #1556]	; 8338 <print_expression+0xeec>
    7d20:	blx	r6
    7d24:	b	7f18 <print_expression+0xacc>
    7d28:	ldr	r0, [pc, #1308]	; 824c <print_expression+0xe00>
    7d2c:	blx	r6
    7d30:	b	7f18 <print_expression+0xacc>
    7d34:	cmp	r3, #12
    7d38:	bcs	7d5c <print_expression+0x910>
    7d3c:	cmp	r3, #10
    7d40:	bne	7d50 <print_expression+0x904>
    7d44:	ldr	r0, [pc, #1560]	; 8364 <print_expression+0xf18>
    7d48:	blx	r6
    7d4c:	b	7f18 <print_expression+0xacc>
    7d50:	ldr	r0, [pc, #1308]	; 8274 <print_expression+0xe28>
    7d54:	blx	r6
    7d58:	b	7f18 <print_expression+0xacc>
    7d5c:	cmp	r3, #12
    7d60:	beq	7d78 <print_expression+0x92c>
    7d64:	cmp	r3, #13
    7d68:	bne	7ea8 <print_expression+0xa5c>
    7d6c:	ldr	r0, [pc, #1296]	; 8284 <print_expression+0xe38>
    7d70:	blx	r6
    7d74:	b	7f18 <print_expression+0xacc>
    7d78:	ldr	r0, [pc, #1384]	; 82e8 <print_expression+0xe9c>
    7d7c:	blx	r6
    7d80:	b	7f18 <print_expression+0xacc>
    7d84:	cmp	r3, #38	; 0x26
    7d88:	bcs	7e04 <print_expression+0x9b8>
    7d8c:	cmp	r3, #27
    7d90:	beq	7df8 <print_expression+0x9ac>
    7d94:	cmp	r3, #32
    7d98:	beq	7dc0 <print_expression+0x974>
    7d9c:	cmp	r3, #34	; 0x22
    7da0:	bne	7ea8 <print_expression+0xa5c>
    7da4:	ldr	ip, [pc, #1352]	; 82f4 <print_expression+0xea8>
    7da8:	ldr	r0, [pc, #1332]	; 82e4 <print_expression+0xe98>
    7dac:	cmp	r5, #0
    7db0:	movne	r0, ip
    7db4:	moveq	r0, r0
    7db8:	blx	r6
    7dbc:	b	7f18 <print_expression+0xacc>
    7dc0:	mov	r2, #1
    7dc4:	cmp	r4, #0
    7dc8:	movne	r3, #1
    7dcc:	moveq	r3, #0
    7dd0:	cmp	r5, #0
    7dd4:	movne	r1, r2
    7dd8:	moveq	r1, r3
    7ddc:	ldr	r2, [pc, #1332]	; 8318 <print_expression+0xecc>
    7de0:	ldr	r3, [pc, #1456]	; 8398 <print_expression+0xf4c>
    7de4:	cmp	r1, #0
    7de8:	movne	r0, r2
    7dec:	moveq	r0, r3
    7df0:	blx	r6
    7df4:	b	7f18 <print_expression+0xacc>
    7df8:	ldr	r0, [pc, #1188]	; 82a4 <print_expression+0xe58>
    7dfc:	blx	r6
    7e00:	b	7f18 <print_expression+0xacc>
    7e04:	cmp	r3, #62	; 0x3e
    7e08:	bcs	7e8c <print_expression+0xa40>
    7e0c:	cmp	r3, #38	; 0x26
    7e10:	beq	7e54 <print_expression+0xa08>
    7e14:	cmp	r3, #60	; 0x3c
    7e18:	bne	7ea8 <print_expression+0xa5c>
    7e1c:	mov	ip, #1
    7e20:	cmp	r4, #0
    7e24:	movne	r0, #1
    7e28:	moveq	r0, #0
    7e2c:	cmp	r5, #0
    7e30:	movne	ip, ip
    7e34:	moveq	ip, r0
    7e38:	ldr	r0, [pc, #1372]	; 839c <print_expression+0xf50>
    7e3c:	ldr	r3, [pc, #1140]	; 82b8 <print_expression+0xe6c>
    7e40:	cmp	ip, #0
    7e44:	movne	r0, r0
    7e48:	moveq	r0, r3
    7e4c:	blx	r6
    7e50:	b	7f18 <print_expression+0xacc>
    7e54:	mov	r0, #1
    7e58:	cmp	r4, #0
    7e5c:	movne	ip, #1
    7e60:	moveq	ip, #0
    7e64:	cmp	r5, #0
    7e68:	movne	r0, r0
    7e6c:	moveq	r0, ip
    7e70:	ldr	r2, [pc, #1116]	; 82d4 <print_expression+0xe88>
    7e74:	ldr	ip, [pc, #980]	; 8250 <print_expression+0xe04>
    7e78:	cmp	r0, #0
    7e7c:	movne	r0, r2
    7e80:	moveq	r0, ip
    7e84:	blx	r6
    7e88:	b	7f18 <print_expression+0xacc>
    7e8c:	cmp	r3, #62	; 0x3e
    7e90:	beq	7ee4 <print_expression+0xa98>
    7e94:	cmp	r3, #92	; 0x5c
    7e98:	bne	7ea8 <print_expression+0xa5c>
    7e9c:	ldr	r0, [pc, #1208]	; 835c <print_expression+0xf10>
    7ea0:	blx	r6
    7ea4:	b	7f18 <print_expression+0xacc>
    7ea8:	bl	0 <__ctype_b_loc>
    7eac:	ldr	r2, [r0]
    7eb0:	ldrb	r1, [r8, r9]
    7eb4:	add	r2, r2, r1, lsl #1
    7eb8:	ldrh	r2, [r2]
    7ebc:	and	r2, r2, #16384	; 0x4000
    7ec0:	cmp	r2, #0
    7ec4:	bne	7ed8 <print_expression+0xa8c>
    7ec8:	ldr	r0, [pc, #1156]	; 8354 <print_expression+0xf08>
    7ecc:	and	r1, r1, #255	; 0xff
    7ed0:	blx	r6
    7ed4:	b	7f18 <print_expression+0xacc>
    7ed8:	ldr	r0, [pc, #968]	; 82a8 <print_expression+0xe5c>
    7edc:	blx	r6
    7ee0:	b	7f18 <print_expression+0xacc>
    7ee4:	mov	r2, #1
    7ee8:	cmp	r4, #0
    7eec:	movne	r0, #1
    7ef0:	moveq	r0, #0
    7ef4:	cmp	r5, #0
    7ef8:	movne	r0, r2
    7efc:	moveq	r0, r0
    7f00:	ldr	ip, [pc, #904]	; 8290 <print_expression+0xe44>
    7f04:	ldr	r3, [pc, #1060]	; 8330 <print_expression+0xee4>
    7f08:	cmp	r0, #0
    7f0c:	movne	r0, ip
    7f10:	moveq	r0, r3
    7f14:	blx	r6
    7f18:	add	r9, r9, #1
    7f1c:	b	7cdc <print_expression+0x890>
    7f20:	ldr	r0, [pc, #936]	; 82d0 <print_expression+0xe84>
    7f24:	ldr	r3, [pc, #996]	; 8310 <print_expression+0xec4>
    7f28:	cmp	r5, #0
    7f2c:	movne	r0, r0
    7f30:	moveq	r0, r3
    7f34:	blx	r6
    7f38:	b	9658 <print_expression+0x220c>
    7f3c:	ldr	r0, [pc, #800]	; 8264 <print_expression+0xe18>
    7f40:	ldr	r1, [pc, #900]	; 82cc <print_expression+0xe80>
    7f44:	cmp	r4, #0
    7f48:	movne	r0, r0
    7f4c:	moveq	r0, r1
    7f50:	blx	r6
    7f54:	ldr	r0, [r7, #16]
    7f58:	mov	r3, #15
    7f5c:	str	r3, [sp]
    7f60:	mov	r3, r4
    7f64:	mov	r2, r5
    7f68:	mov	r1, r6
    7f6c:	bl	744c <print_expression>
    7f70:	ldr	r0, [pc, #972]	; 8344 <print_expression+0xef8>
    7f74:	blx	r6
    7f78:	ldr	r0, [r7, #20]
    7f7c:	mov	ip, #15
    7f80:	str	ip, [sp]
    7f84:	mov	r3, r4
    7f88:	mov	r2, r5
    7f8c:	mov	r1, r6
    7f90:	bl	744c <print_expression>
    7f94:	ldr	r0, [pc, #680]	; 8244 <print_expression+0xdf8>
    7f98:	blx	r6
    7f9c:	b	9658 <print_expression+0x220c>
    7fa0:	cmp	r8, #3
    7fa4:	bge	7fb0 <print_expression+0xb64>
    7fa8:	ldr	r0, [pc, #768]	; 82b0 <print_expression+0xe64>
    7fac:	blx	r6
    7fb0:	ldr	r0, [r7, #16]
    7fb4:	mov	r1, #3
    7fb8:	str	r1, [sp]
    7fbc:	mov	r3, r4
    7fc0:	mov	r2, r5
    7fc4:	mov	r1, r6
    7fc8:	bl	744c <print_expression>
    7fcc:	ldr	r0, [pc, #772]	; 82d8 <print_expression+0xe8c>
    7fd0:	blx	r6
    7fd4:	ldr	r0, [r7, #20]
    7fd8:	mov	r3, #3
    7fdc:	str	r3, [sp]
    7fe0:	mov	r3, r4
    7fe4:	mov	r2, r5
    7fe8:	mov	r1, r6
    7fec:	bl	744c <print_expression>
    7ff0:	cmp	r8, #3
    7ff4:	bge	9658 <print_expression+0x220c>
    7ff8:	ldr	r0, [pc, #580]	; 8244 <print_expression+0xdf8>
    7ffc:	blx	r6
    8000:	b	9658 <print_expression+0x220c>
    8004:	cmp	r8, #6
    8008:	bge	8014 <print_expression+0xbc8>
    800c:	ldr	r0, [pc, #668]	; 82b0 <print_expression+0xe64>
    8010:	blx	r6
    8014:	ldr	r0, [r7, #16]
    8018:	mov	r2, #6
    801c:	str	r2, [sp]
    8020:	mov	r3, r4
    8024:	mov	r2, r5
    8028:	mov	r1, r6
    802c:	bl	744c <print_expression>
    8030:	ldr	r0, [pc, #676]	; 82dc <print_expression+0xe90>
    8034:	blx	r6
    8038:	ldr	r0, [r7, #20]
    803c:	mov	r3, #6
    8040:	str	r3, [sp]
    8044:	mov	r3, r4
    8048:	mov	r2, r5
    804c:	mov	r1, r6
    8050:	bl	744c <print_expression>
    8054:	cmp	r8, #6
    8058:	bge	9658 <print_expression+0x220c>
    805c:	ldr	r0, [pc, #480]	; 8244 <print_expression+0xdf8>
    8060:	blx	r6
    8064:	b	9658 <print_expression+0x220c>
    8068:	ldr	r1, [pc, #776]	; 8378 <print_expression+0xf2c>
    806c:	ldr	r0, [pc, #812]	; 83a0 <print_expression+0xf54>
    8070:	cmp	r4, #0
    8074:	movne	r0, r1
    8078:	moveq	r0, r0
    807c:	blx	r6
    8080:	ldr	r0, [r7, #16]
    8084:	mov	r1, #15
    8088:	str	r1, [sp]
    808c:	mov	r3, r4
    8090:	mov	r2, r5
    8094:	mov	r1, r6
    8098:	bl	744c <print_expression>
    809c:	ldr	r0, [pc, #416]	; 8244 <print_expression+0xdf8>
    80a0:	blx	r6
    80a4:	b	9658 <print_expression+0x220c>
    80a8:	ldr	r0, [pc, #688]	; 8360 <print_expression+0xf14>
    80ac:	ldr	r1, [pc, #436]	; 8268 <print_expression+0xe1c>
    80b0:	cmp	r4, #0
    80b4:	movne	r0, r0
    80b8:	moveq	r0, r1
    80bc:	blx	r6
    80c0:	b	9658 <print_expression+0x220c>
    80c4:	ldr	r0, [pc, #652]	; 8358 <print_expression+0xf0c>
    80c8:	ldr	ip, [pc, #672]	; 8370 <print_expression+0xf24>
    80cc:	cmp	r4, #0
    80d0:	movne	r0, r0
    80d4:	moveq	r0, ip
    80d8:	blx	r6
    80dc:	b	9658 <print_expression+0x220c>
    80e0:	ldr	r3, [pc, #576]	; 8328 <print_expression+0xedc>
    80e4:	ldr	r1, [pc, #540]	; 8308 <print_expression+0xebc>
    80e8:	cmp	r4, #0
    80ec:	movne	r0, r3
    80f0:	moveq	r0, r1
    80f4:	blx	r6
    80f8:	ldr	r0, [r7, #16]
    80fc:	mov	r3, #15
    8100:	str	r3, [sp]
    8104:	mov	r3, r4
    8108:	mov	r2, r5
    810c:	mov	r1, r6
    8110:	bl	744c <print_expression>
    8114:	ldr	r0, [pc, #296]	; 8244 <print_expression+0xdf8>
    8118:	blx	r6
    811c:	b	9658 <print_expression+0x220c>
    8120:	ldr	r3, [pc, #352]	; 8288 <print_expression+0xe3c>
    8124:	ldr	r2, [pc, #572]	; 8368 <print_expression+0xf1c>
    8128:	cmp	r4, #0
    812c:	movne	r0, r3
    8130:	moveq	r0, r2
    8134:	blx	r6
    8138:	ldr	r0, [r7, #16]
    813c:	mov	r1, #15
    8140:	str	r1, [sp]
    8144:	mov	r3, r4
    8148:	mov	r2, r5
    814c:	mov	r1, r6
    8150:	bl	744c <print_expression>
    8154:	ldr	r0, [pc, #232]	; 8244 <print_expression+0xdf8>
    8158:	blx	r6
    815c:	b	9658 <print_expression+0x220c>
    8160:	ldr	r2, [pc, #440]	; 8320 <print_expression+0xed4>
    8164:	ldr	r3, [pc, #388]	; 82f0 <print_expression+0xea4>
    8168:	cmp	r4, #0
    816c:	movne	r0, r2
    8170:	moveq	r0, r3
    8174:	ldr	r1, [r7, #12]
    8178:	blx	r6
    817c:	ldr	r0, [r7, #16]
    8180:	mov	r1, #15
    8184:	str	r1, [sp]
    8188:	mov	r3, r4
    818c:	mov	r2, r5
    8190:	mov	r1, r6
    8194:	bl	744c <print_expression>
    8198:	ldr	r3, [pc, #412]	; 833c <print_expression+0xef0>
    819c:	ldr	r1, [pc, #212]	; 8278 <print_expression+0xe2c>
    81a0:	cmp	r4, #0
    81a4:	movne	r0, r3
    81a8:	moveq	r0, r1
    81ac:	blx	r6
    81b0:	ldr	r0, [r7, #20]
    81b4:	mov	r3, #15
    81b8:	str	r3, [sp]
    81bc:	mov	r3, r4
    81c0:	mov	r2, r5
    81c4:	mov	r1, r6
    81c8:	bl	744c <print_expression>
    81cc:	ldr	r1, [r7, #24]
    81d0:	cmp	r1, #0
    81d4:	beq	820c <print_expression+0xdc0>
    81d8:	ldr	r2, [pc, #228]	; 82c4 <print_expression+0xe78>
    81dc:	ldr	r3, [pc, #392]	; 836c <print_expression+0xf20>
    81e0:	cmp	r4, #0
    81e4:	movne	r0, r2
    81e8:	moveq	r0, r3
    81ec:	blx	r6
    81f0:	ldr	r0, [r7, #24]
    81f4:	mov	r3, #15
    81f8:	str	r3, [sp]
    81fc:	mov	r3, r4
    8200:	mov	r2, r5
    8204:	mov	r1, r6
    8208:	bl	744c <print_expression>
    820c:	ldr	r1, [pc, #272]	; 8324 <print_expression+0xed8>
    8210:	ldr	r3, [pc, #64]	; 8258 <print_expression+0xe0c>
    8214:	cmp	r4, #0
    8218:	movne	r0, r1
    821c:	moveq	r0, r3
    8220:	blx	r6
    8224:	ldr	r0, [r7, #28]
    8228:	mov	r1, #15
    822c:	str	r1, [sp]
    8230:	mov	r3, r4
    8234:	mov	r2, r5
    8238:	mov	r1, r6
    823c:	bl	744c <print_expression>
    8240:	b	9658 <print_expression+0x220c>
    8244:	.word	0x00000afb
    8248:	.word	0x000001fc
    824c:	.word	0x000001c4
    8250:	.word	0x0000089c
    8254:	.word	0x00000143
    8258:	.word	0x000004e8
    825c:	.word	0x000000ad
    8260:	.word	0x000000c3
    8264:	.word	0x000009f0
    8268:	.word	0x00000362
    826c:	.word	0x0000076d
    8270:	.word	0x00000535
    8274:	.word	0x00000c6f
    8278:	.word	0x00000897
    827c:	.word	0x00000b21
    8280:	.word	0x0000015f
    8284:	.word	0x000009d9
    8288:	.word	0x0000037a
    828c:	.word	0x00000965
    8290:	.word	0x00000485
    8294:	.word	0x00000671
    8298:	.word	0x000006aa
    829c:	.word	0x0000030c
    82a0:	.word	0x0000088a
    82a4:	.word	0x00000a4e
    82a8:	.word	0x000008fc
    82ac:	.word	0x00000db3
    82b0:	.word	0x000007fc
    82b4:	.word	0x000007bc
    82b8:	.word	0x000007fa
    82bc:	.word	0x000006ba
    82c0:	.word	0x00000148
    82c4:	.word	0x00000135
    82c8:	.word	0x00000440
    82cc:	.word	0x000009eb
    82d0:	.word	0x00000594
    82d4:	.word	0x000000c8
    82d8:	.word	0x00000531
    82dc:	.word	0x00000d53
    82e0:	.word	0x0000065f
    82e4:	.word	0x00000a3f
    82e8:	.word	0x000009dc
    82ec:	.word	0x0000052a
    82f0:	.word	0x000003c0
    82f4:	.word	0x000009ce
    82f8:	.word	0x000008ad
    82fc:	.word	0x00000031
    8300:	.word	0x00000a44
    8304:	.word	0x000001ef
    8308:	.word	0x00000d44
    830c:	.word	0x00000006
    8310:	.word	0x000000d1
    8314:	.word	0x00000783
    8318:	.word	0x000004ed
    831c:	.word	0x0000098a
    8320:	.word	0x0000007b
    8324:	.word	0x000007ab
    8328:	.word	0x000008cc
    832c:	.word	0x00000173
    8330:	.word	0x000003ad
    8334:	.word	0x000009d6
    8338:	.word	0x000000ce
    833c:	.word	0x0000051e
    8340:	.word	0x0000053b
    8344:	.word	0x00000697
    8348:	.word	0x000008ff
    834c:	.word	0x00000730
    8350:	.word	0x000004fa
    8354:	.word	0x000001ce
    8358:	.word	0x000007e8
    835c:	.word	0x000000aa
    8360:	.word	0x00000c3b
    8364:	.word	0x00000c72
    8368:	.word	0x000008a6
    836c:	.word	0x0000080d
    8370:	.word	0x00000b01
    8374:	.word	0x00000ba4
    8378:	.word	0x0000045c
    837c:	.word	0x0000067d
    8380:	.word	0x0000044c
    8384:	.word	0x000006c4
    8388:	.word	0x00000a2e
    838c:	.word	0x00000756
    8390:	.word	0x00000a77
    8394:	.word	0x000001c7
    8398:	.word	0x00000abb
    839c:	.word	0x0000099d
    83a0:	.word	0x0000095d
    83a4:	ldr	r0, [r7, #16]
    83a8:	cmp	r0, #0
    83ac:	beq	83c8 <print_expression+0xf7c>
    83b0:	mov	r3, #15
    83b4:	str	r3, [sp]
    83b8:	mov	r3, r4
    83bc:	mov	r2, r5
    83c0:	mov	r1, r6
    83c4:	bl	744c <print_expression>
    83c8:	ldr	r0, [pc, #3664]	; 9220 <print_expression+0x1dd4>
    83cc:	blx	r6
    83d0:	ldr	r0, [r7, #20]
    83d4:	mov	r1, #15
    83d8:	str	r1, [sp]
    83dc:	mov	r3, r4
    83e0:	mov	r2, r5
    83e4:	mov	r1, r6
    83e8:	bl	744c <print_expression>
    83ec:	ldr	r0, [pc, #3700]	; 9268 <print_expression+0x1e1c>
    83f0:	blx	r6
    83f4:	b	9658 <print_expression+0x220c>
    83f8:	ldr	r0, [r7, #16]
    83fc:	cmp	r0, #0
    8400:	beq	841c <print_expression+0xfd0>
    8404:	mov	r1, #15
    8408:	str	r1, [sp]
    840c:	mov	r3, r4
    8410:	mov	r2, r5
    8414:	mov	r1, r6
    8418:	bl	744c <print_expression>
    841c:	ldr	r0, [pc, #3548]	; 9200 <print_expression+0x1db4>
    8420:	ldr	r1, [r7, #12]
    8424:	blx	r6
    8428:	b	9658 <print_expression+0x220c>
    842c:	ldr	r0, [pc, #3740]	; 92d0 <print_expression+0x1e84>
    8430:	blx	r6
    8434:	b	9658 <print_expression+0x220c>
    8438:	ldr	r0, [r7, #16]
    843c:	mov	r1, #15
    8440:	str	r1, [sp]
    8444:	mov	r3, r4
    8448:	mov	r2, r5
    844c:	mov	r1, r6
    8450:	bl	744c <print_expression>
    8454:	ldr	r1, [r7, #16]
    8458:	ldr	r1, [r1]
    845c:	cmp	r1, #38	; 0x26
    8460:	beq	846c <print_expression+0x1020>
    8464:	ldr	r0, [pc, #3504]	; 921c <print_expression+0x1dd0>
    8468:	blx	r6
    846c:	ldr	r0, [pc, #3536]	; 9244 <print_expression+0x1df8>
    8470:	ldr	r1, [r7, #12]
    8474:	blx	r6
    8478:	b	9658 <print_expression+0x220c>
    847c:	ldr	r0, [pc, #3536]	; 9254 <print_expression+0x1e08>
    8480:	blx	r6
    8484:	b	9658 <print_expression+0x220c>
    8488:	ldr	r0, [r7, #16]
    848c:	cmp	r0, #0
    8490:	beq	84b4 <print_expression+0x1068>
    8494:	mov	r2, #15
    8498:	str	r2, [sp]
    849c:	mov	r3, r4
    84a0:	mov	r2, r5
    84a4:	mov	r1, r6
    84a8:	bl	744c <print_expression>
    84ac:	ldr	r0, [pc, #3432]	; 921c <print_expression+0x1dd0>
    84b0:	blx	r6
    84b4:	ldr	r0, [pc, #3532]	; 9288 <print_expression+0x1e3c>
    84b8:	blx	r6
    84bc:	b	9658 <print_expression+0x220c>
    84c0:	ldr	r0, [pc, #3412]	; 921c <print_expression+0x1dd0>
    84c4:	blx	r6
    84c8:	b	9658 <print_expression+0x220c>
    84cc:	ldr	r2, [pc, #3460]	; 9258 <print_expression+0x1e0c>
    84d0:	ldr	r1, [pc, #3420]	; 9234 <print_expression+0x1de8>
    84d4:	cmp	r4, #0
    84d8:	movne	r0, r2
    84dc:	moveq	r0, r1
    84e0:	blx	r6
    84e4:	ldr	r0, [r7, #16]
    84e8:	mov	r1, #15
    84ec:	str	r1, [sp]
    84f0:	mov	r3, r4
    84f4:	mov	r2, r5
    84f8:	mov	r1, r6
    84fc:	bl	744c <print_expression>
    8500:	ldr	r0, [pc, #3224]	; 91a0 <print_expression+0x1d54>
    8504:	blx	r6
    8508:	b	9658 <print_expression+0x220c>
    850c:	cmp	r8, #5
    8510:	bge	851c <print_expression+0x10d0>
    8514:	ldr	r0, [pc, #3288]	; 91f4 <print_expression+0x1da8>
    8518:	blx	r6
    851c:	ldr	r0, [r7, #16]
    8520:	mov	r2, #5
    8524:	str	r2, [sp]
    8528:	mov	r3, r4
    852c:	mov	r2, r5
    8530:	mov	r1, r6
    8534:	bl	744c <print_expression>
    8538:	mov	r1, #1
    853c:	cmp	r5, #0
    8540:	movne	ip, #1
    8544:	moveq	ip, #0
    8548:	cmp	r4, #0
    854c:	movne	r3, r1
    8550:	moveq	r3, ip
    8554:	ldr	r0, [pc, #3244]	; 9208 <print_expression+0x1dbc>
    8558:	ldr	ip, [pc, #3268]	; 9224 <print_expression+0x1dd8>
    855c:	cmp	r3, #0
    8560:	movne	r0, r0
    8564:	moveq	r0, ip
    8568:	blx	r6
    856c:	ldr	r0, [r7, #20]
    8570:	mov	ip, #5
    8574:	str	ip, [sp]
    8578:	mov	r3, r4
    857c:	mov	r2, r5
    8580:	mov	r1, r6
    8584:	bl	744c <print_expression>
    8588:	cmp	r8, #5
    858c:	bge	9658 <print_expression+0x220c>
    8590:	ldr	r0, [pc, #3080]	; 91a0 <print_expression+0x1d54>
    8594:	blx	r6
    8598:	b	9658 <print_expression+0x220c>
    859c:	cmp	r8, #5
    85a0:	bge	85ac <print_expression+0x1160>
    85a4:	ldr	r0, [pc, #3144]	; 91f4 <print_expression+0x1da8>
    85a8:	blx	r6
    85ac:	ldr	r0, [r7, #16]
    85b0:	mov	r3, #5
    85b4:	str	r3, [sp]
    85b8:	mov	r3, r4
    85bc:	mov	r2, r5
    85c0:	mov	r1, r6
    85c4:	bl	744c <print_expression>
    85c8:	mov	r3, #1
    85cc:	cmp	r5, #0
    85d0:	movne	r1, #1
    85d4:	moveq	r1, #0
    85d8:	cmp	r4, #0
    85dc:	movne	r2, r3
    85e0:	moveq	r2, r1
    85e4:	ldr	r0, [pc, #3240]	; 9294 <print_expression+0x1e48>
    85e8:	ldr	r3, [pc, #3000]	; 91a8 <print_expression+0x1d5c>
    85ec:	cmp	r2, #0
    85f0:	movne	r0, r0
    85f4:	moveq	r0, r3
    85f8:	blx	r6
    85fc:	ldr	r0, [r7, #20]
    8600:	mov	r3, #5
    8604:	str	r3, [sp]
    8608:	mov	r3, r4
    860c:	mov	r2, r5
    8610:	mov	r1, r6
    8614:	bl	744c <print_expression>
    8618:	cmp	r8, #5
    861c:	bge	9658 <print_expression+0x220c>
    8620:	ldr	r0, [pc, #2936]	; 91a0 <print_expression+0x1d54>
    8624:	blx	r6
    8628:	b	9658 <print_expression+0x220c>
    862c:	ldr	r0, [pc, #3128]	; 926c <print_expression+0x1e20>
    8630:	blx	r6
    8634:	ldr	r0, [r7, #16]
    8638:	mov	r1, #15
    863c:	str	r1, [sp]
    8640:	mov	r3, r4
    8644:	mov	r2, r5
    8648:	mov	r1, r6
    864c:	bl	744c <print_expression>
    8650:	ldr	r0, [pc, #2988]	; 9204 <print_expression+0x1db8>
    8654:	blx	r6
    8658:	ldr	r0, [r7, #20]
    865c:	mov	ip, #15
    8660:	str	ip, [sp]
    8664:	mov	r3, r4
    8668:	mov	r2, r5
    866c:	mov	r1, r6
    8670:	bl	744c <print_expression>
    8674:	ldr	r0, [pc, #2952]	; 9204 <print_expression+0x1db8>
    8678:	blx	r6
    867c:	ldr	r0, [r7, #24]
    8680:	mov	ip, #15
    8684:	str	ip, [sp]
    8688:	mov	r3, r4
    868c:	mov	r2, r5
    8690:	mov	r1, r6
    8694:	bl	744c <print_expression>
    8698:	ldr	r0, [pc, #2816]	; 91a0 <print_expression+0x1d54>
    869c:	blx	r6
    86a0:	b	9658 <print_expression+0x220c>
    86a4:	ldr	r1, [pc, #3092]	; 92c0 <print_expression+0x1e74>
    86a8:	ldr	ip, [pc, #2856]	; 91d8 <print_expression+0x1d8c>
    86ac:	cmp	r4, #0
    86b0:	movne	r0, r1
    86b4:	moveq	r0, ip
    86b8:	blx	r6
    86bc:	ldr	r0, [r7, #16]
    86c0:	mov	ip, #15
    86c4:	str	ip, [sp]
    86c8:	mov	r3, r4
    86cc:	mov	r2, r5
    86d0:	mov	r1, r6
    86d4:	bl	744c <print_expression>
    86d8:	ldr	r0, [pc, #2752]	; 91a0 <print_expression+0x1d54>
    86dc:	blx	r6
    86e0:	b	9658 <print_expression+0x220c>
    86e4:	ldr	r2, [pc, #2784]	; 91cc <print_expression+0x1d80>
    86e8:	ldr	ip, [pc, #2900]	; 9244 <print_expression+0x1df8>
    86ec:	cmp	r4, #0
    86f0:	movne	r0, r2
    86f4:	moveq	r0, ip
    86f8:	ldr	r1, [r7, #12]
    86fc:	blx	r6
    8700:	b	9658 <print_expression+0x220c>
    8704:	ldr	r3, [pc, #2876]	; 9248 <print_expression+0x1dfc>
    8708:	ldr	r2, [pc, #2892]	; 925c <print_expression+0x1e10>
    870c:	cmp	r4, #0
    8710:	movne	r0, r3
    8714:	moveq	r0, r2
    8718:	blx	r6
    871c:	ldr	r0, [r7, #16]
    8720:	mov	r3, #15
    8724:	str	r3, [sp]
    8728:	mov	r3, r4
    872c:	mov	r2, r5
    8730:	mov	r1, r6
    8734:	bl	744c <print_expression>
    8738:	ldr	r0, [pc, #2656]	; 91a0 <print_expression+0x1d54>
    873c:	blx	r6
    8740:	b	9658 <print_expression+0x220c>
    8744:	ldr	ip, [pc, #2764]	; 9218 <print_expression+0x1dcc>
    8748:	ldr	r2, [pc, #2892]	; 929c <print_expression+0x1e50>
    874c:	cmp	r4, #0
    8750:	movne	r0, ip
    8754:	moveq	r0, r2
    8758:	blx	r6
    875c:	ldr	r0, [r7, #16]
    8760:	mov	r1, #15
    8764:	str	r1, [sp]
    8768:	mov	r3, r4
    876c:	mov	r2, r5
    8770:	mov	r1, r6
    8774:	bl	744c <print_expression>
    8778:	ldr	r0, [pc, #2592]	; 91a0 <print_expression+0x1d54>
    877c:	blx	r6
    8780:	b	9658 <print_expression+0x220c>
    8784:	ldr	r2, [pc, #2732]	; 9238 <print_expression+0x1dec>
    8788:	ldr	r0, [pc, #2800]	; 9280 <print_expression+0x1e34>
    878c:	cmp	r4, #0
    8790:	movne	r0, r2
    8794:	moveq	r0, r0
    8798:	blx	r6
    879c:	ldr	r0, [r7, #16]
    87a0:	mov	r1, #15
    87a4:	str	r1, [sp]
    87a8:	mov	r3, r4
    87ac:	mov	r2, r5
    87b0:	mov	r1, r6
    87b4:	bl	744c <print_expression>
    87b8:	ldr	r0, [pc, #2528]	; 91a0 <print_expression+0x1d54>
    87bc:	blx	r6
    87c0:	b	9658 <print_expression+0x220c>
    87c4:	ldr	r3, [pc, #2792]	; 92b4 <print_expression+0x1e68>
    87c8:	ldr	r0, [pc, #2724]	; 9274 <print_expression+0x1e28>
    87cc:	cmp	r4, #0
    87d0:	movne	r0, r3
    87d4:	moveq	r0, r0
    87d8:	blx	r6
    87dc:	ldr	r0, [r7, #16]
    87e0:	mov	r3, #15
    87e4:	str	r3, [sp]
    87e8:	mov	r3, r4
    87ec:	mov	r2, r5
    87f0:	mov	r1, r6
    87f4:	bl	744c <print_expression>
    87f8:	ldr	r0, [pc, #2464]	; 91a0 <print_expression+0x1d54>
    87fc:	blx	r6
    8800:	b	9658 <print_expression+0x220c>
    8804:	ldr	r2, [pc, #2560]	; 920c <print_expression+0x1dc0>
    8808:	ldr	r0, [pc, #2584]	; 9228 <print_expression+0x1ddc>
    880c:	cmp	r4, #0
    8810:	movne	r0, r2
    8814:	moveq	r0, r0
    8818:	blx	r6
    881c:	ldr	r0, [r7, #16]
    8820:	mov	r3, #15
    8824:	str	r3, [sp]
    8828:	mov	r3, r4
    882c:	mov	r2, r5
    8830:	mov	r1, r6
    8834:	bl	744c <print_expression>
    8838:	ldr	r0, [pc, #2400]	; 91a0 <print_expression+0x1d54>
    883c:	blx	r6
    8840:	b	9658 <print_expression+0x220c>
    8844:	ldr	r0, [pc, #2608]	; 927c <print_expression+0x1e30>
    8848:	ldr	r1, [pc, #2376]	; 9198 <print_expression+0x1d4c>
    884c:	cmp	r4, #0
    8850:	movne	r0, r0
    8854:	moveq	r0, r1
    8858:	blx	r6
    885c:	ldr	r0, [r7, #16]
    8860:	mov	r1, #15
    8864:	str	r1, [sp]
    8868:	mov	r3, r4
    886c:	mov	r2, r5
    8870:	mov	r1, r6
    8874:	bl	744c <print_expression>
    8878:	ldr	r0, [pc, #2336]	; 91a0 <print_expression+0x1d54>
    887c:	blx	r6
    8880:	b	9658 <print_expression+0x220c>
    8884:	cmp	r8, #5
    8888:	bge	8894 <print_expression+0x1448>
    888c:	ldr	r0, [pc, #2400]	; 91f4 <print_expression+0x1da8>
    8890:	blx	r6
    8894:	ldr	r0, [r7, #16]
    8898:	mov	r2, #5
    889c:	str	r2, [sp]
    88a0:	mov	r3, r4
    88a4:	mov	r2, r5
    88a8:	mov	r1, r6
    88ac:	bl	744c <print_expression>
    88b0:	mov	r2, #1
    88b4:	cmp	r5, #0
    88b8:	movne	r0, #1
    88bc:	moveq	r0, #0
    88c0:	cmp	r4, #0
    88c4:	movne	r0, r2
    88c8:	moveq	r0, r0
    88cc:	ldr	ip, [pc, #2488]	; 928c <print_expression+0x1e40>
    88d0:	ldr	r3, [pc, #2456]	; 9270 <print_expression+0x1e24>
    88d4:	cmp	r0, #0
    88d8:	movne	r0, ip
    88dc:	moveq	r0, r3
    88e0:	blx	r6
    88e4:	ldr	r0, [r7, #20]
    88e8:	mov	ip, #5
    88ec:	str	ip, [sp]
    88f0:	mov	r3, r4
    88f4:	mov	r2, r5
    88f8:	mov	r1, r6
    88fc:	bl	744c <print_expression>
    8900:	cmp	r8, #5
    8904:	bge	9658 <print_expression+0x220c>
    8908:	ldr	r0, [pc, #2192]	; 91a0 <print_expression+0x1d54>
    890c:	blx	r6
    8910:	b	9658 <print_expression+0x220c>
    8914:	cmp	r8, #5
    8918:	bge	8924 <print_expression+0x14d8>
    891c:	ldr	r0, [pc, #2256]	; 91f4 <print_expression+0x1da8>
    8920:	blx	r6
    8924:	ldr	r0, [r7, #16]
    8928:	mov	r1, #5
    892c:	str	r1, [sp]
    8930:	mov	r3, r4
    8934:	mov	r2, r5
    8938:	mov	r1, r6
    893c:	bl	744c <print_expression>
    8940:	mov	ip, #1
    8944:	cmp	r5, #0
    8948:	movne	r3, #1
    894c:	moveq	r3, #0
    8950:	cmp	r4, #0
    8954:	movne	r2, ip
    8958:	moveq	r2, r3
    895c:	ldr	r3, [pc, #2124]	; 91b0 <print_expression+0x1d64>
    8960:	ldr	ip, [pc, #2132]	; 91bc <print_expression+0x1d70>
    8964:	cmp	r2, #0
    8968:	movne	r0, r3
    896c:	moveq	r0, ip
    8970:	blx	r6
    8974:	ldr	r0, [r7, #20]
    8978:	mov	r1, #5
    897c:	str	r1, [sp]
    8980:	mov	r3, r4
    8984:	mov	r2, r5
    8988:	mov	r1, r6
    898c:	bl	744c <print_expression>
    8990:	cmp	r8, #5
    8994:	bge	9658 <print_expression+0x220c>
    8998:	ldr	r0, [pc, #2048]	; 91a0 <print_expression+0x1d54>
    899c:	blx	r6
    89a0:	b	9658 <print_expression+0x220c>
    89a4:	cmp	r8, #9
    89a8:	bge	89b4 <print_expression+0x1568>
    89ac:	ldr	r0, [pc, #2112]	; 91f4 <print_expression+0x1da8>
    89b0:	blx	r6
    89b4:	ldr	r0, [r7, #16]
    89b8:	mov	r1, #9
    89bc:	str	r1, [sp]
    89c0:	mov	r3, r4
    89c4:	mov	r2, r5
    89c8:	mov	r1, r6
    89cc:	bl	744c <print_expression>
    89d0:	ldr	r2, [pc, #2052]	; 91dc <print_expression+0x1d90>
    89d4:	ldr	ip, [pc, #2052]	; 91e0 <print_expression+0x1d94>
    89d8:	cmp	r4, #0
    89dc:	movne	r0, r2
    89e0:	moveq	r0, ip
    89e4:	blx	r6
    89e8:	ldr	r0, [r7, #20]
    89ec:	mov	r1, #9
    89f0:	str	r1, [sp]
    89f4:	mov	r3, r4
    89f8:	mov	r2, r5
    89fc:	mov	r1, r6
    8a00:	bl	744c <print_expression>
    8a04:	cmp	r8, #9
    8a08:	bge	9658 <print_expression+0x220c>
    8a0c:	ldr	r0, [pc, #1932]	; 91a0 <print_expression+0x1d54>
    8a10:	blx	r6
    8a14:	b	9658 <print_expression+0x220c>
    8a18:	cmp	r8, #10
    8a1c:	bge	8a28 <print_expression+0x15dc>
    8a20:	ldr	r0, [pc, #1996]	; 91f4 <print_expression+0x1da8>
    8a24:	blx	r6
    8a28:	ldr	r0, [r7, #16]
    8a2c:	mov	r1, #10
    8a30:	str	r1, [sp]
    8a34:	mov	r3, r4
    8a38:	mov	r2, r5
    8a3c:	mov	r1, r6
    8a40:	bl	744c <print_expression>
    8a44:	ldr	r1, [pc, #1880]	; 91a4 <print_expression+0x1d58>
    8a48:	ldr	r2, [pc, #1892]	; 91b4 <print_expression+0x1d68>
    8a4c:	cmp	r4, #0
    8a50:	movne	r0, r1
    8a54:	moveq	r0, r2
    8a58:	blx	r6
    8a5c:	ldr	r0, [r7, #20]
    8a60:	mov	r1, #10
    8a64:	str	r1, [sp]
    8a68:	mov	r3, r4
    8a6c:	mov	r2, r5
    8a70:	mov	r1, r6
    8a74:	bl	744c <print_expression>
    8a78:	cmp	r8, #10
    8a7c:	bge	9658 <print_expression+0x220c>
    8a80:	ldr	r0, [pc, #1816]	; 91a0 <print_expression+0x1d54>
    8a84:	blx	r6
    8a88:	b	9658 <print_expression+0x220c>
    8a8c:	ldr	r0, [pc, #2032]	; 9284 <print_expression+0x1e38>
    8a90:	ldr	ip, [pc, #2016]	; 9278 <print_expression+0x1e2c>
    8a94:	cmp	r4, #0
    8a98:	movne	r0, r0
    8a9c:	moveq	r0, ip
    8aa0:	blx	r6
    8aa4:	ldr	r0, [r7, #16]
    8aa8:	mov	ip, #15
    8aac:	str	ip, [sp]
    8ab0:	mov	r3, r4
    8ab4:	mov	r2, r5
    8ab8:	mov	r1, r6
    8abc:	bl	744c <print_expression>
    8ac0:	ldr	r0, [pc, #1752]	; 91a0 <print_expression+0x1d54>
    8ac4:	blx	r6
    8ac8:	b	9658 <print_expression+0x220c>
    8acc:	ldr	ip, [pc, #1828]	; 91f8 <print_expression+0x1dac>
    8ad0:	ldr	r2, [pc, #2004]	; 92ac <print_expression+0x1e60>
    8ad4:	cmp	r4, #0
    8ad8:	movne	r0, ip
    8adc:	moveq	r0, r2
    8ae0:	blx	r6
    8ae4:	ldr	r0, [r7, #16]
    8ae8:	mov	r1, #15
    8aec:	str	r1, [sp]
    8af0:	mov	r3, r4
    8af4:	mov	r2, r5
    8af8:	mov	r1, r6
    8afc:	bl	744c <print_expression>
    8b00:	ldr	r0, [pc, #1788]	; 9204 <print_expression+0x1db8>
    8b04:	blx	r6
    8b08:	ldr	r0, [r7, #20]
    8b0c:	mov	r1, #15
    8b10:	str	r1, [sp]
    8b14:	mov	r3, r4
    8b18:	mov	r2, r5
    8b1c:	mov	r1, r6
    8b20:	bl	744c <print_expression>
    8b24:	ldr	r0, [pc, #1652]	; 91a0 <print_expression+0x1d54>
    8b28:	blx	r6
    8b2c:	b	9658 <print_expression+0x220c>
    8b30:	ldr	ip, [pc, #1784]	; 9230 <print_expression+0x1de4>
    8b34:	ldr	r2, [pc, #1936]	; 92cc <print_expression+0x1e80>
    8b38:	cmp	r4, #0
    8b3c:	movne	r0, ip
    8b40:	moveq	r0, r2
    8b44:	blx	r6
    8b48:	ldr	r0, [r7, #16]
    8b4c:	mov	r3, #15
    8b50:	str	r3, [sp]
    8b54:	mov	r3, r4
    8b58:	mov	r2, r5
    8b5c:	mov	r1, r6
    8b60:	bl	744c <print_expression>
    8b64:	ldr	r0, [pc, #1688]	; 9204 <print_expression+0x1db8>
    8b68:	blx	r6
    8b6c:	ldr	r0, [r7, #20]
    8b70:	mov	ip, #15
    8b74:	str	ip, [sp]
    8b78:	mov	r3, r4
    8b7c:	mov	r2, r5
    8b80:	mov	r1, r6
    8b84:	bl	744c <print_expression>
    8b88:	ldr	r0, [pc, #1552]	; 91a0 <print_expression+0x1d54>
    8b8c:	blx	r6
    8b90:	b	9658 <print_expression+0x220c>
    8b94:	cmp	r8, #3
    8b98:	bge	8ba4 <print_expression+0x1758>
    8b9c:	ldr	r0, [pc, #1616]	; 91f4 <print_expression+0x1da8>
    8ba0:	blx	r6
    8ba4:	ldr	r0, [r7, #16]
    8ba8:	mov	r1, #3
    8bac:	str	r1, [sp]
    8bb0:	mov	r3, r4
    8bb4:	mov	r2, r5
    8bb8:	mov	r1, r6
    8bbc:	bl	744c <print_expression>
    8bc0:	ldr	r0, [pc, #1564]	; 91e4 <print_expression+0x1d98>
    8bc4:	blx	r6
    8bc8:	ldr	r0, [r7, #20]
    8bcc:	mov	r2, #3
    8bd0:	str	r2, [sp]
    8bd4:	mov	r3, r4
    8bd8:	mov	r2, r5
    8bdc:	mov	r1, r6
    8be0:	bl	744c <print_expression>
    8be4:	cmp	r8, #3
    8be8:	bge	9658 <print_expression+0x220c>
    8bec:	ldr	r0, [pc, #1452]	; 91a0 <print_expression+0x1d54>
    8bf0:	blx	r6
    8bf4:	b	9658 <print_expression+0x220c>
    8bf8:	cmp	r8, #3
    8bfc:	bge	8c08 <print_expression+0x17bc>
    8c00:	ldr	r0, [pc, #1516]	; 91f4 <print_expression+0x1da8>
    8c04:	blx	r6
    8c08:	ldr	r0, [r7, #16]
    8c0c:	mov	r1, #3
    8c10:	str	r1, [sp]
    8c14:	mov	r3, r4
    8c18:	mov	r2, r5
    8c1c:	mov	r1, r6
    8c20:	bl	744c <print_expression>
    8c24:	ldr	r0, [pc, #1652]	; 92a0 <print_expression+0x1e54>
    8c28:	blx	r6
    8c2c:	ldr	r0, [r7, #20]
    8c30:	mov	r3, #3
    8c34:	str	r3, [sp]
    8c38:	mov	r3, r4
    8c3c:	mov	r2, r5
    8c40:	mov	r1, r6
    8c44:	bl	744c <print_expression>
    8c48:	cmp	r8, #3
    8c4c:	bge	9658 <print_expression+0x220c>
    8c50:	ldr	r0, [pc, #1352]	; 91a0 <print_expression+0x1d54>
    8c54:	blx	r6
    8c58:	b	9658 <print_expression+0x220c>
    8c5c:	ldr	r0, [pc, #1456]	; 9214 <print_expression+0x1dc8>
    8c60:	blx	r6
    8c64:	ldr	r0, [r7, #16]
    8c68:	mov	r2, #1
    8c6c:	str	r2, [sp]
    8c70:	mov	r3, r4
    8c74:	mov	r2, r5
    8c78:	mov	r1, r6
    8c7c:	bl	744c <print_expression>
    8c80:	b	9658 <print_expression+0x220c>
    8c84:	cmp	r8, #6
    8c88:	bge	8c94 <print_expression+0x1848>
    8c8c:	ldr	r0, [pc, #1376]	; 91f4 <print_expression+0x1da8>
    8c90:	blx	r6
    8c94:	ldr	r0, [r7, #16]
    8c98:	mov	r2, #6
    8c9c:	str	r2, [sp]
    8ca0:	mov	r3, r4
    8ca4:	mov	r2, r5
    8ca8:	mov	r1, r6
    8cac:	bl	744c <print_expression>
    8cb0:	ldr	r0, [pc, #1428]	; 924c <print_expression+0x1e00>
    8cb4:	blx	r6
    8cb8:	ldr	r0, [r7, #20]
    8cbc:	mov	r1, #6
    8cc0:	str	r1, [sp]
    8cc4:	mov	r3, r4
    8cc8:	mov	r2, r5
    8ccc:	mov	r1, r6
    8cd0:	bl	744c <print_expression>
    8cd4:	cmp	r8, #6
    8cd8:	bge	9658 <print_expression+0x220c>
    8cdc:	ldr	r0, [pc, #1212]	; 91a0 <print_expression+0x1d54>
    8ce0:	blx	r6
    8ce4:	b	9658 <print_expression+0x220c>
    8ce8:	ldr	r0, [pc, #1272]	; 91e8 <print_expression+0x1d9c>
    8cec:	blx	r6
    8cf0:	ldr	r0, [r7, #16]
    8cf4:	mov	ip, #1
    8cf8:	str	ip, [sp]
    8cfc:	mov	r3, r4
    8d00:	mov	r2, r5
    8d04:	mov	r1, r6
    8d08:	bl	744c <print_expression>
    8d0c:	b	9658 <print_expression+0x220c>
    8d10:	ldr	r1, [pc, #1352]	; 9260 <print_expression+0x1e14>
    8d14:	ldr	ip, [pc, #1464]	; 92d4 <print_expression+0x1e88>
    8d18:	cmp	r4, #0
    8d1c:	movne	r0, r1
    8d20:	moveq	r0, ip
    8d24:	blx	r6
    8d28:	ldr	r0, [r7, #16]
    8d2c:	mov	r3, #15
    8d30:	str	r3, [sp]
    8d34:	mov	r3, r4
    8d38:	mov	r2, r5
    8d3c:	mov	r1, r6
    8d40:	bl	744c <print_expression>
    8d44:	ldr	r0, [pc, #1108]	; 91a0 <print_expression+0x1d54>
    8d48:	blx	r6
    8d4c:	b	9658 <print_expression+0x220c>
    8d50:	ldr	ip, [pc, #1388]	; 92c4 <print_expression+0x1e78>
    8d54:	ldr	r3, [pc, #1128]	; 91c4 <print_expression+0x1d78>
    8d58:	cmp	r4, #0
    8d5c:	movne	r0, ip
    8d60:	moveq	r0, r3
    8d64:	blx	r6
    8d68:	ldr	r0, [r7, #16]
    8d6c:	mov	r3, #15
    8d70:	str	r3, [sp]
    8d74:	mov	r3, r4
    8d78:	mov	r2, r5
    8d7c:	mov	r1, r6
    8d80:	bl	744c <print_expression>
    8d84:	ldr	r0, [pc, #1044]	; 91a0 <print_expression+0x1d54>
    8d88:	blx	r6
    8d8c:	b	9658 <print_expression+0x220c>
    8d90:	cmp	r8, #7
    8d94:	bge	8da0 <print_expression+0x1954>
    8d98:	ldr	r0, [pc, #1108]	; 91f4 <print_expression+0x1da8>
    8d9c:	blx	r6
    8da0:	ldr	r0, [r7, #16]
    8da4:	mov	r1, #7
    8da8:	str	r1, [sp]
    8dac:	mov	r3, r4
    8db0:	mov	r2, r5
    8db4:	mov	r1, r6
    8db8:	bl	744c <print_expression>
    8dbc:	ldr	r0, [pc, #1236]	; 9298 <print_expression+0x1e4c>
    8dc0:	blx	r6
    8dc4:	ldr	r0, [r7, #20]
    8dc8:	mov	r1, #7
    8dcc:	str	r1, [sp]
    8dd0:	mov	r3, r4
    8dd4:	mov	r2, r5
    8dd8:	mov	r1, r6
    8ddc:	bl	744c <print_expression>
    8de0:	cmp	r8, #7
    8de4:	bge	9658 <print_expression+0x220c>
    8de8:	ldr	r0, [pc, #944]	; 91a0 <print_expression+0x1d54>
    8dec:	blx	r6
    8df0:	b	9658 <print_expression+0x220c>
    8df4:	cmp	r8, #2
    8df8:	bge	8e04 <print_expression+0x19b8>
    8dfc:	ldr	r0, [pc, #1008]	; 91f4 <print_expression+0x1da8>
    8e00:	blx	r6
    8e04:	ldr	r0, [r7, #16]
    8e08:	mov	r1, #2
    8e0c:	str	r1, [sp]
    8e10:	mov	r3, r4
    8e14:	mov	r2, r5
    8e18:	mov	r1, r6
    8e1c:	bl	744c <print_expression>
    8e20:	ldr	r0, [pc, #1152]	; 92a8 <print_expression+0x1e5c>
    8e24:	blx	r6
    8e28:	ldr	r0, [r7, #20]
    8e2c:	mov	r3, #2
    8e30:	str	r3, [sp]
    8e34:	mov	r3, r4
    8e38:	mov	r2, r5
    8e3c:	mov	r1, r6
    8e40:	bl	744c <print_expression>
    8e44:	cmp	r8, #2
    8e48:	bge	9658 <print_expression+0x220c>
    8e4c:	ldr	r0, [pc, #844]	; 91a0 <print_expression+0x1d54>
    8e50:	blx	r6
    8e54:	b	9658 <print_expression+0x220c>
    8e58:	ldr	ip, [pc, #908]	; 91ec <print_expression+0x1da0>
    8e5c:	ldr	r0, [pc, #1024]	; 9264 <print_expression+0x1e18>
    8e60:	cmp	r4, #0
    8e64:	movne	r0, ip
    8e68:	moveq	r0, r0
    8e6c:	blx	r6
    8e70:	b	9658 <print_expression+0x220c>
    8e74:	ldr	r1, [pc, #980]	; 9250 <print_expression+0x1e04>
    8e78:	ldr	r0, [pc, #812]	; 91ac <print_expression+0x1d60>
    8e7c:	cmp	r4, #0
    8e80:	movne	r0, r1
    8e84:	moveq	r0, r0
    8e88:	blx	r6
    8e8c:	b	9658 <print_expression+0x220c>
    8e90:	ldr	r2, [pc, #808]	; 91c0 <print_expression+0x1d74>
    8e94:	ldr	r1, [pc, #1032]	; 92a4 <print_expression+0x1e58>
    8e98:	cmp	r4, #0
    8e9c:	movne	r0, r2
    8ea0:	moveq	r0, r1
    8ea4:	blx	r6
    8ea8:	b	9658 <print_expression+0x220c>
    8eac:	ldr	r3, [pc, #904]	; 923c <print_expression+0x1df0>
    8eb0:	ldr	ip, [pc, #792]	; 91d0 <print_expression+0x1d84>
    8eb4:	cmp	r4, #0
    8eb8:	movne	r0, r3
    8ebc:	moveq	r0, ip
    8ec0:	blx	r6
    8ec4:	b	9658 <print_expression+0x220c>
    8ec8:	ldr	r1, [pc, #1000]	; 92b8 <print_expression+0x1e6c>
    8ecc:	ldr	r2, [pc, #768]	; 91d4 <print_expression+0x1d88>
    8ed0:	cmp	r4, #0
    8ed4:	movne	r0, r1
    8ed8:	moveq	r0, r2
    8edc:	blx	r6
    8ee0:	ldr	r0, [r7, #16]
    8ee4:	mov	r1, #15
    8ee8:	str	r1, [sp]
    8eec:	mov	r3, r4
    8ef0:	mov	r2, r5
    8ef4:	mov	r1, r6
    8ef8:	bl	744c <print_expression>
    8efc:	ldr	r0, [pc, #768]	; 9204 <print_expression+0x1db8>
    8f00:	blx	r6
    8f04:	ldr	r0, [r7, #20]
    8f08:	mov	ip, #15
    8f0c:	str	ip, [sp]
    8f10:	mov	r3, r4
    8f14:	mov	r2, r5
    8f18:	mov	r1, r6
    8f1c:	bl	744c <print_expression>
    8f20:	ldr	r1, [r7, #24]
    8f24:	cmp	r1, #0
    8f28:	beq	8f50 <print_expression+0x1b04>
    8f2c:	ldr	r0, [pc, #720]	; 9204 <print_expression+0x1db8>
    8f30:	blx	r6
    8f34:	ldr	r0, [r7, #24]
    8f38:	mov	r3, #15
    8f3c:	str	r3, [sp]
    8f40:	mov	r3, r4
    8f44:	mov	r2, r5
    8f48:	mov	r1, r6
    8f4c:	bl	744c <print_expression>
    8f50:	ldr	r0, [pc, #584]	; 91a0 <print_expression+0x1d54>
    8f54:	blx	r6
    8f58:	b	9658 <print_expression+0x220c>
    8f5c:	ldr	r1, [pc, #712]	; 922c <print_expression+0x1de0>
    8f60:	ldr	r2, [pc, #564]	; 919c <print_expression+0x1d50>
    8f64:	cmp	r4, #0
    8f68:	movne	r0, r1
    8f6c:	moveq	r0, r2
    8f70:	blx	r6
    8f74:	ldr	r0, [r7, #16]
    8f78:	mov	r2, #15
    8f7c:	str	r2, [sp]
    8f80:	mov	r3, r4
    8f84:	mov	r2, r5
    8f88:	mov	r1, r6
    8f8c:	bl	744c <print_expression>
    8f90:	ldr	r0, [pc, #520]	; 91a0 <print_expression+0x1d54>
    8f94:	blx	r6
    8f98:	b	9658 <print_expression+0x220c>
    8f9c:	ldr	r2, [pc, #804]	; 92c8 <print_expression+0x1e7c>
    8fa0:	ldr	r3, [pc, #544]	; 91c8 <print_expression+0x1d7c>
    8fa4:	cmp	r4, #0
    8fa8:	movne	r0, r2
    8fac:	moveq	r0, r3
    8fb0:	blx	r6
    8fb4:	ldr	r0, [r7, #16]
    8fb8:	mov	r1, #15
    8fbc:	str	r1, [sp]
    8fc0:	mov	r3, r4
    8fc4:	mov	r2, r5
    8fc8:	mov	r1, r6
    8fcc:	bl	744c <print_expression>
    8fd0:	ldr	r0, [pc, #456]	; 91a0 <print_expression+0x1d54>
    8fd4:	blx	r6
    8fd8:	b	9658 <print_expression+0x220c>
    8fdc:	ldr	r0, [r7, #16]
    8fe0:	mov	r3, #15
    8fe4:	str	r3, [sp]
    8fe8:	mov	r3, r4
    8fec:	mov	r2, r5
    8ff0:	mov	r1, r6
    8ff4:	bl	744c <print_expression>
    8ff8:	ldr	r1, [pc, #688]	; 92b0 <print_expression+0x1e64>
    8ffc:	ldr	r3, [pc, #436]	; 91b8 <print_expression+0x1d6c>
    9000:	cmp	r4, #0
    9004:	movne	r0, r1
    9008:	moveq	r0, r3
    900c:	blx	r6
    9010:	ldr	r0, [r7, #20]
    9014:	mov	r2, #15
    9018:	str	r2, [sp]
    901c:	mov	r3, r4
    9020:	mov	r2, r5
    9024:	mov	r1, r6
    9028:	bl	744c <print_expression>
    902c:	b	9658 <print_expression+0x220c>
    9030:	ldr	r0, [pc, #520]	; 9240 <print_expression+0x1df4>
    9034:	ldr	r2, [pc, #596]	; 9290 <print_expression+0x1e44>
    9038:	cmp	r4, #0
    903c:	movne	r0, r0
    9040:	moveq	r0, r2
    9044:	blx	r6
    9048:	ldr	r0, [r7, #16]
    904c:	mov	r1, #15
    9050:	str	r1, [sp]
    9054:	mov	r3, r4
    9058:	mov	r2, r5
    905c:	mov	r1, r6
    9060:	bl	744c <print_expression>
    9064:	ldr	ip, [r7, #20]
    9068:	cmp	ip, #0
    906c:	beq	9094 <print_expression+0x1c48>
    9070:	ldr	r0, [pc, #396]	; 9204 <print_expression+0x1db8>
    9074:	blx	r6
    9078:	ldr	r0, [r7, #20]
    907c:	mov	r2, #15
    9080:	str	r2, [sp]
    9084:	mov	r3, r4
    9088:	mov	r2, r5
    908c:	mov	r1, r6
    9090:	bl	744c <print_expression>
    9094:	ldr	r0, [pc, #260]	; 91a0 <print_expression+0x1d54>
    9098:	blx	r6
    909c:	b	9658 <print_expression+0x220c>
    90a0:	ldr	ip, [pc, #340]	; 91fc <print_expression+0x1db0>
    90a4:	ldr	r3, [pc, #356]	; 9210 <print_expression+0x1dc4>
    90a8:	cmp	r4, #0
    90ac:	movne	r0, ip
    90b0:	moveq	r0, r3
    90b4:	blx	r6
    90b8:	ldr	r0, [r7, #16]
    90bc:	mov	r2, #15
    90c0:	str	r2, [sp]
    90c4:	mov	r3, r4
    90c8:	mov	r2, r5
    90cc:	mov	r1, r6
    90d0:	bl	744c <print_expression>
    90d4:	ldr	r2, [r7, #20]
    90d8:	cmp	r2, #0
    90dc:	beq	9104 <print_expression+0x1cb8>
    90e0:	ldr	r0, [pc, #284]	; 9204 <print_expression+0x1db8>
    90e4:	blx	r6
    90e8:	ldr	r0, [r7, #20]
    90ec:	mov	r3, #15
    90f0:	str	r3, [sp]
    90f4:	mov	r3, r4
    90f8:	mov	r2, r5
    90fc:	mov	r1, r6
    9100:	bl	744c <print_expression>
    9104:	ldr	r0, [pc, #148]	; 91a0 <print_expression+0x1d54>
    9108:	blx	r6
    910c:	b	9658 <print_expression+0x220c>
    9110:	ldr	ip, [pc, #420]	; 92bc <print_expression+0x1e70>
    9114:	ldr	r0, [pc, #212]	; 91f0 <print_expression+0x1da4>
    9118:	cmp	r4, #0
    911c:	movne	r0, ip
    9120:	moveq	r0, r0
    9124:	blx	r6
    9128:	ldr	r0, [r7, #16]
    912c:	mov	r3, #15
    9130:	str	r3, [sp]
    9134:	mov	r3, r4
    9138:	mov	r2, r5
    913c:	mov	r1, r6
    9140:	bl	744c <print_expression>
    9144:	ldr	r0, [pc, #184]	; 9204 <print_expression+0x1db8>
    9148:	blx	r6
    914c:	ldr	r0, [r7, #20]
    9150:	mov	r1, #15
    9154:	str	r1, [sp]
    9158:	mov	r3, r4
    915c:	mov	r2, r5
    9160:	mov	r1, r6
    9164:	bl	744c <print_expression>
    9168:	ldr	r0, [pc, #148]	; 9204 <print_expression+0x1db8>
    916c:	blx	r6
    9170:	ldr	r0, [r7, #24]
    9174:	mov	r1, #15
    9178:	str	r1, [sp]
    917c:	mov	r3, r4
    9180:	mov	r2, r5
    9184:	mov	r1, r6
    9188:	bl	744c <print_expression>
    918c:	ldr	r0, [pc, #12]	; 91a0 <print_expression+0x1d54>
    9190:	blx	r6
    9194:	b	9658 <print_expression+0x220c>
    9198:	.word	0x000006d2
    919c:	.word	0x00000658
    91a0:	.word	0x00000afb
    91a4:	.word	0x00000971
    91a8:	.word	0x0000072c
    91ac:	.word	0x000009a2
    91b0:	.word	0x00000665
    91b4:	.word	0x00000b7f
    91b8:	.word	0x00000699
    91bc:	.word	0x00000bfa
    91c0:	.word	0x00000b0c
    91c4:	.word	0x000008b9
    91c8:	.word	0x0000077c
    91cc:	.word	0x00000436
    91d0:	.word	0x000003af
    91d4:	.word	0x0000050c
    91d8:	.word	0x00000671
    91dc:	.word	0x00000c4d
    91e0:	.word	0x000004f4
    91e4:	.word	0x00000859
    91e8:	.word	0x000001e2
    91ec:	.word	0x00000843
    91f0:	.word	0x00000c9f
    91f4:	.word	0x000007fc
    91f8:	.word	0x000007bc
    91fc:	.word	0x0000090f
    9200:	.word	0x00000afd
    9204:	.word	0x000006ba
    9208:	.word	0x0000089e
    920c:	.word	0x0000075b
    9210:	.word	0x0000016a
    9214:	.word	0x000009cc
    9218:	.word	0x000007da
    921c:	.word	0x00000a42
    9220:	.word	0x000004b7
    9224:	.word	0x000005cc
    9228:	.word	0x000001e4
    922c:	.word	0x00000689
    9230:	.word	0x000008ad
    9234:	.word	0x000008c6
    9238:	.word	0x00000124
    923c:	.word	0x00000d1e
    9240:	.word	0x000000b7
    9244:	.word	0x00000006
    9248:	.word	0x000009df
    924c:	.word	0x000007a4
    9250:	.word	0x00000093
    9254:	.word	0x000007a9
    9258:	.word	0x0000036d
    925c:	.word	0x00000678
    9260:	.word	0x00000036
    9264:	.word	0x00000115
    9268:	.word	0x00000159
    926c:	.word	0x0000097d
    9270:	.word	0x0000066c
    9274:	.word	0x000005c5
    9278:	.word	0x000006bd
    927c:	.word	0x000003ca
    9280:	.word	0x00000993
    9284:	.word	0x0000069c
    9288:	.word	0x00000c75
    928c:	.word	0x0000085e
    9290:	.word	0x000009fc
    9294:	.word	0x00000d4b
    9298:	.word	0x0000015b
    929c:	.word	0x00000513
    92a0:	.word	0x0000051a
    92a4:	.word	0x00000d36
    92a8:	.word	0x0000091f
    92ac:	.word	0x00000ba4
    92b0:	.word	0x00000b2b
    92b4:	.word	0x00000bb7
    92b8:	.word	0x000001d4
    92bc:	.word	0x000007fe
    92c0:	.word	0x000006c4
    92c4:	.word	0x00000790
    92c8:	.word	0x00000ba9
    92cc:	.word	0x00000756
    92d0:	.word	0x00000a55
    92d4:	.word	0x00000981
    92d8:	cmp	r8, #4
    92dc:	bge	92e8 <print_expression+0x1e9c>
    92e0:	ldr	r0, [pc, #932]	; 968c <print_expression+0x2240>
    92e4:	blx	r6
    92e8:	ldr	r0, [r7, #16]
    92ec:	mov	r1, #4
    92f0:	str	r1, [sp]
    92f4:	mov	r3, r4
    92f8:	mov	r2, r5
    92fc:	mov	r1, r6
    9300:	bl	744c <print_expression>
    9304:	ldr	r0, [pc, #948]	; 96c0 <print_expression+0x2274>
    9308:	blx	r6
    930c:	ldr	r0, [r7, #20]
    9310:	mov	r1, #4
    9314:	str	r1, [sp]
    9318:	mov	r3, r4
    931c:	mov	r2, r5
    9320:	mov	r1, r6
    9324:	bl	744c <print_expression>
    9328:	cmp	r8, #4
    932c:	bge	9658 <print_expression+0x220c>
    9330:	ldr	r0, [pc, #844]	; 9684 <print_expression+0x2238>
    9334:	blx	r6
    9338:	b	9658 <print_expression+0x220c>
    933c:	ldr	r1, [pc, #836]	; 9688 <print_expression+0x223c>
    9340:	ldr	r0, [pc, #896]	; 96c8 <print_expression+0x227c>
    9344:	cmp	r4, #0
    9348:	movne	r0, r1
    934c:	moveq	r0, r0
    9350:	blx	r6
    9354:	ldr	r0, [r7, #16]
    9358:	mov	r2, #15
    935c:	str	r2, [sp]
    9360:	mov	r3, r4
    9364:	mov	r2, r5
    9368:	mov	r1, r6
    936c:	bl	744c <print_expression>
    9370:	ldr	r0, [pc, #800]	; 9698 <print_expression+0x224c>
    9374:	blx	r6
    9378:	ldr	r0, [r7, #20]
    937c:	mov	r1, #15
    9380:	str	r1, [sp]
    9384:	mov	r3, r4
    9388:	mov	r2, r5
    938c:	mov	r1, r6
    9390:	bl	744c <print_expression>
    9394:	ldr	r0, [pc, #744]	; 9684 <print_expression+0x2238>
    9398:	blx	r6
    939c:	b	9658 <print_expression+0x220c>
    93a0:	ldr	r3, [pc, #760]	; 96a0 <print_expression+0x2254>
    93a4:	ldr	r2, [pc, #780]	; 96b8 <print_expression+0x226c>
    93a8:	cmp	r4, #0
    93ac:	movne	r0, r3
    93b0:	moveq	r0, r2
    93b4:	blx	r6
    93b8:	ldr	r0, [r7, #16]
    93bc:	mov	r3, #15
    93c0:	str	r3, [sp]
    93c4:	mov	r3, r4
    93c8:	mov	r2, r5
    93cc:	mov	r1, r6
    93d0:	bl	744c <print_expression>
    93d4:	ldr	r0, [pc, #680]	; 9684 <print_expression+0x2238>
    93d8:	blx	r6
    93dc:	b	9658 <print_expression+0x220c>
    93e0:	ldr	r1, [pc, #684]	; 9694 <print_expression+0x2248>
    93e4:	ldr	r0, [pc, #740]	; 96d0 <print_expression+0x2284>
    93e8:	cmp	r4, #0
    93ec:	movne	r0, r1
    93f0:	moveq	r0, r0
    93f4:	blx	r6
    93f8:	ldr	r0, [r7, #16]
    93fc:	mov	r2, #15
    9400:	str	r2, [sp]
    9404:	mov	r3, r4
    9408:	mov	r2, r5
    940c:	mov	r1, r6
    9410:	bl	744c <print_expression>
    9414:	ldr	r0, [pc, #636]	; 9698 <print_expression+0x224c>
    9418:	blx	r6
    941c:	ldr	r0, [r7, #20]
    9420:	mov	r1, #15
    9424:	str	r1, [sp]
    9428:	mov	r3, r4
    942c:	mov	r2, r5
    9430:	mov	r1, r6
    9434:	bl	744c <print_expression>
    9438:	ldr	r0, [pc, #580]	; 9684 <print_expression+0x2238>
    943c:	blx	r6
    9440:	b	9658 <print_expression+0x220c>
    9444:	ldr	r2, [pc, #648]	; 96d4 <print_expression+0x2288>
    9448:	ldr	r1, [pc, #648]	; 96d8 <print_expression+0x228c>
    944c:	cmp	r4, #0
    9450:	movne	r0, r2
    9454:	moveq	r0, r1
    9458:	ldr	r1, [r7, #12]
    945c:	blx	r6
    9460:	ldr	r0, [r7, #16]
    9464:	mov	r1, #15
    9468:	str	r1, [sp]
    946c:	mov	r3, r4
    9470:	mov	r2, r5
    9474:	mov	r1, r6
    9478:	bl	744c <print_expression>
    947c:	ldr	r0, [pc, #512]	; 9684 <print_expression+0x2238>
    9480:	blx	r6
    9484:	b	9658 <print_expression+0x220c>
    9488:	ldr	r3, [pc, #496]	; 9680 <print_expression+0x2234>
    948c:	ldr	r2, [pc, #560]	; 96c4 <print_expression+0x2278>
    9490:	cmp	r4, #0
    9494:	movne	r0, r3
    9498:	moveq	r0, r2
    949c:	ldr	r1, [r7, #12]
    94a0:	blx	r6
    94a4:	ldr	r0, [r7, #16]
    94a8:	mov	r3, #15
    94ac:	str	r3, [sp]
    94b0:	mov	r3, r4
    94b4:	mov	r2, r5
    94b8:	mov	r1, r6
    94bc:	bl	744c <print_expression>
    94c0:	ldr	r0, [pc, #444]	; 9684 <print_expression+0x2238>
    94c4:	blx	r6
    94c8:	b	9658 <print_expression+0x220c>
    94cc:	ldr	r0, [pc, #468]	; 96a8 <print_expression+0x225c>
    94d0:	ldr	r3, [pc, #472]	; 96b0 <print_expression+0x2264>
    94d4:	cmp	r4, #0
    94d8:	movne	r0, r0
    94dc:	moveq	r0, r3
    94e0:	ldr	r1, [r7, #12]
    94e4:	blx	r6
    94e8:	ldr	ip, [r7, #16]
    94ec:	cmp	ip, #0
    94f0:	beq	9520 <print_expression+0x20d4>
    94f4:	ldr	r0, [pc, #432]	; 96ac <print_expression+0x2260>
    94f8:	blx	r6
    94fc:	ldr	r0, [r7, #16]
    9500:	mov	r1, #15
    9504:	str	r1, [sp]
    9508:	mov	r3, r4
    950c:	mov	r2, r5
    9510:	mov	r1, r6
    9514:	bl	744c <print_expression>
    9518:	ldr	r0, [pc, #404]	; 96b4 <print_expression+0x2268>
    951c:	blx	r6
    9520:	ldr	r0, [pc, #380]	; 96a4 <print_expression+0x2258>
    9524:	blx	r6
    9528:	ldr	r0, [r7, #20]
    952c:	mov	r1, #15
    9530:	str	r1, [sp]
    9534:	mov	r3, r4
    9538:	mov	r2, r5
    953c:	mov	r1, r6
    9540:	bl	744c <print_expression>
    9544:	b	9658 <print_expression+0x220c>
    9548:	ldr	r0, [pc, #352]	; 96b0 <print_expression+0x2264>
    954c:	ldr	r1, [r7, #12]
    9550:	blx	r6
    9554:	ldr	ip, [r7, #16]
    9558:	cmp	ip, #0
    955c:	beq	9658 <print_expression+0x220c>
    9560:	ldr	r0, [pc, #324]	; 96ac <print_expression+0x2260>
    9564:	blx	r6
    9568:	ldr	r0, [r7, #16]
    956c:	mov	r1, #15
    9570:	str	r1, [sp]
    9574:	mov	r3, r4
    9578:	mov	r2, r5
    957c:	mov	r1, r6
    9580:	bl	744c <print_expression>
    9584:	ldr	r0, [pc, #296]	; 96b4 <print_expression+0x2268>
    9588:	blx	r6
    958c:	b	9658 <print_expression+0x220c>
    9590:	ldr	r2, [pc, #260]	; 969c <print_expression+0x2250>
    9594:	ldr	r1, [pc, #304]	; 96cc <print_expression+0x2280>
    9598:	cmp	r4, #0
    959c:	movne	r0, r2
    95a0:	moveq	r0, r1
    95a4:	blx	r6
    95a8:	ldr	r0, [r7, #16]
    95ac:	mov	r1, #15
    95b0:	str	r1, [sp]
    95b4:	mov	r3, r4
    95b8:	mov	r2, r5
    95bc:	mov	r1, r6
    95c0:	bl	744c <print_expression>
    95c4:	ldr	r0, [pc, #204]	; 9698 <print_expression+0x224c>
    95c8:	blx	r6
    95cc:	ldr	r0, [r7, #20]
    95d0:	mov	r2, #15
    95d4:	str	r2, [sp]
    95d8:	mov	r3, r4
    95dc:	mov	r2, r5
    95e0:	mov	r1, r6
    95e4:	bl	744c <print_expression>
    95e8:	ldr	r0, [pc, #148]	; 9684 <print_expression+0x2238>
    95ec:	blx	r6
    95f0:	b	9658 <print_expression+0x220c>
    95f4:	ldr	r3, [pc, #192]	; 96bc <print_expression+0x2270>
    95f8:	ldr	ip, [pc, #144]	; 9690 <print_expression+0x2244>
    95fc:	cmp	r4, #0
    9600:	movne	r0, r3
    9604:	moveq	r0, ip
    9608:	ldr	r1, [r7, #12]
    960c:	blx	r6
    9610:	ldr	r0, [r7, #16]
    9614:	mov	ip, #15
    9618:	str	ip, [sp]
    961c:	mov	r3, r4
    9620:	mov	r2, r5
    9624:	mov	r1, r6
    9628:	bl	744c <print_expression>
    962c:	ldr	r0, [pc, #100]	; 9698 <print_expression+0x224c>
    9630:	blx	r6
    9634:	ldr	r0, [r7, #20]
    9638:	mov	r2, #15
    963c:	str	r2, [sp]
    9640:	mov	r3, r4
    9644:	mov	r2, r5
    9648:	mov	r1, r6
    964c:	bl	744c <print_expression>
    9650:	ldr	r0, [pc, #44]	; 9684 <print_expression+0x2238>
    9654:	blx	r6
    9658:	mov	r0, #0
    965c:	ldr	r4, [sp, #16]
    9660:	ldr	r5, [sp, #20]
    9664:	ldr	r6, [sp, #24]
    9668:	ldr	r7, [sp, #28]
    966c:	ldr	r8, [sp, #32]
    9670:	ldr	r9, [sp, #36]	; 0x24
    9674:	ldr	lr, [sp, #8]
    9678:	add	sp, sp, #88	; 0x58
    967c:	bx	lr
    9680:	.word	0x000009b2
    9684:	.word	0x00000afb
    9688:	.word	0x00000a21
    968c:	.word	0x000007fc
    9690:	.word	0x00000838
    9694:	.word	0x00000c26
    9698:	.word	0x000006ba
    969c:	.word	0x00000771
    96a0:	.word	0x00000749
    96a4:	.word	0x00000a51
    96a8:	.word	0x0000048a
    96ac:	.word	0x000004b7
    96b0:	.word	0x000000d7
    96b4:	.word	0x00000159
    96b8:	.word	0x00000000
    96bc:	.word	0x0000041d
    96c0:	.word	0x00000a01
    96c4:	.word	0x00000450
    96c8:	.word	0x00000b79
    96cc:	.word	0x000000d3
    96d0:	.word	0x0000064a
    96d4:	.word	0x00000711
    96d8:	.word	0x0000073c

000096dc <coda_expression_print_html>:
    96dc:	mov	ip, sp
    96e0:	sub	sp, sp, #24
    96e4:	str	ip, [sp, #4]
    96e8:	str	lr, [sp, #8]
    96ec:	str	r4, [sp, #16]
    96f0:	mov	r2, #1
    96f4:	mov	r3, #1
    96f8:	mov	r4, #15
    96fc:	str	r4, [sp]
    9700:	bl	744c <print_expression>
    9704:	ldr	r4, [sp, #16]
    9708:	ldr	lr, [sp, #8]
    970c:	add	sp, sp, #24
    9710:	bx	lr

00009714 <coda_expression_print_xml>:
    9714:	mov	ip, sp
    9718:	sub	sp, sp, #24
    971c:	str	ip, [sp, #4]
    9720:	str	lr, [sp, #8]
    9724:	str	r4, [sp, #16]
    9728:	mov	r2, #1
    972c:	mov	r3, #0
    9730:	mov	r4, #15
    9734:	str	r4, [sp]
    9738:	bl	744c <print_expression>
    973c:	ldr	r4, [sp, #16]
    9740:	ldr	lr, [sp, #8]
    9744:	add	sp, sp, #24
    9748:	bx	lr

0000974c <coda_expression_print>:
    974c:	mov	ip, sp
    9750:	sub	sp, sp, #24
    9754:	str	ip, [sp, #4]
    9758:	str	lr, [sp, #8]
    975c:	str	r4, [sp, #16]
    9760:	mov	r2, #0
    9764:	mov	r3, #0
    9768:	mov	r4, #15
    976c:	str	r4, [sp]
    9770:	bl	744c <print_expression>
    9774:	ldr	r4, [sp, #16]
    9778:	ldr	lr, [sp, #8]
    977c:	add	sp, sp, #24
    9780:	bx	lr

00009784 <coda_expression_get_type_name>:
    9784:	mov	ip, sp
    9788:	sub	sp, sp, #8
    978c:	str	ip, [sp]
    9790:	str	lr, [sp, #4]
    9794:	cmp	r0, #3
    9798:	bcs	97c4 <coda_expression_get_type_name+0x40>
    979c:	cmp	r0, #0
    97a0:	beq	97bc <coda_expression_get_type_name+0x38>
    97a4:	cmp	r0, #1
    97a8:	bne	97b4 <coda_expression_get_type_name+0x30>
    97ac:	ldr	r0, [pc, #100]	; 9818 <coda_expression_get_type_name+0x94>
    97b0:	b	97f8 <coda_expression_get_type_name+0x74>
    97b4:	ldr	r0, [pc, #76]	; 9808 <coda_expression_get_type_name+0x84>
    97b8:	b	97f8 <coda_expression_get_type_name+0x74>
    97bc:	ldr	r0, [pc, #88]	; 981c <coda_expression_get_type_name+0x98>
    97c0:	b	97f8 <coda_expression_get_type_name+0x74>
    97c4:	cmp	r0, #3
    97c8:	beq	97f4 <coda_expression_get_type_name+0x70>
    97cc:	cmp	r0, #4
    97d0:	beq	97ec <coda_expression_get_type_name+0x68>
    97d4:	cmp	r0, #5
    97d8:	bne	97e4 <coda_expression_get_type_name+0x60>
    97dc:	ldr	r0, [pc, #40]	; 980c <coda_expression_get_type_name+0x88>
    97e0:	b	97f8 <coda_expression_get_type_name+0x74>
    97e4:	ldr	r0, [pc, #40]	; 9814 <coda_expression_get_type_name+0x90>
    97e8:	b	97f8 <coda_expression_get_type_name+0x74>
    97ec:	ldr	r0, [pc, #28]	; 9810 <coda_expression_get_type_name+0x8c>
    97f0:	b	97f8 <coda_expression_get_type_name+0x74>
    97f4:	ldr	r0, [pc, #8]	; 9804 <coda_expression_get_type_name+0x80>
    97f8:	ldr	lr, [sp, #4]
    97fc:	add	sp, sp, #8
    9800:	bx	lr
    9804:	.word	0x000003d9
    9808:	.word	0x000003e0
    980c:	.word	0x000005d1
    9810:	.word	0x000000b2
    9814:	.word	0x00000073
    9818:	.word	0x00000907
    981c:	.word	0x00000046

00009820 <coda_expression_delete>:
    9820:	mov	ip, sp
    9824:	sub	sp, sp, #16
    9828:	str	ip, [sp]
    982c:	str	lr, [sp, #4]
    9830:	str	r4, [sp, #8]
    9834:	str	r5, [sp, #12]
    9838:	mov	r4, r0
    983c:	ldr	r1, [r4]
    9840:	cmp	r1, #20
    9844:	bcs	985c <coda_expression_delete+0x3c>
    9848:	cmp	r1, #18
    984c:	beq	98c0 <coda_expression_delete+0xa0>
    9850:	cmp	r1, #19
    9854:	beq	98c0 <coda_expression_delete+0xa0>
    9858:	b	9874 <coda_expression_delete+0x54>
    985c:	cmp	r1, #20
    9860:	beq	98c0 <coda_expression_delete+0xa0>
    9864:	cmp	r1, #21
    9868:	beq	98b0 <coda_expression_delete+0x90>
    986c:	cmp	r1, #22
    9870:	beq	98b0 <coda_expression_delete+0x90>
    9874:	ldr	r0, [r4, #12]
    9878:	cmp	r0, #0
    987c:	beq	9884 <coda_expression_delete+0x64>
    9880:	bl	0 <free>
    9884:	mov	r5, #0
    9888:	lsl	r2, r5, #2
    988c:	add	r0, r4, r2
    9890:	ldr	r0, [r0, #16]
    9894:	cmp	r0, #0
    9898:	beq	98a0 <coda_expression_delete+0x80>
    989c:	bl	9820 <coda_expression_delete>
    98a0:	add	r5, r5, #1
    98a4:	cmp	r5, #4
    98a8:	blt	9888 <coda_expression_delete+0x68>
    98ac:	b	98c0 <coda_expression_delete+0xa0>
    98b0:	ldr	r0, [r4, #16]
    98b4:	cmp	r0, #0
    98b8:	beq	98c0 <coda_expression_delete+0xa0>
    98bc:	bl	0 <free>
    98c0:	mov	r0, r4
    98c4:	ldr	r4, [sp, #8]
    98c8:	ldr	r5, [sp, #12]
    98cc:	ldr	lr, [sp, #4]
    98d0:	add	sp, sp, #16
    98d4:	b	0 <free>

000098d8 <coda_expression_is_constant>:
    98d8:	mov	ip, sp
    98dc:	sub	sp, sp, #8
    98e0:	str	ip, [sp]
    98e4:	str	lr, [sp, #4]
    98e8:	cmp	r0, #0
    98ec:	bne	990c <coda_expression_is_constant+0x34>
    98f0:	mvn	r0, #99	; 0x63
    98f4:	ldr	r1, [pc, #32]	; 991c <coda_expression_is_constant+0x44>
    98f8:	ldr	r2, [pc, #32]	; 9920 <coda_expression_is_constant+0x48>
    98fc:	movw	r3, #4969	; 0x1369
    9900:	bl	0 <coda_set_error>
    9904:	mvn	r0, #0
    9908:	b	9910 <coda_expression_is_constant+0x38>
    990c:	ldr	r0, [r0, #8]
    9910:	ldr	lr, [sp, #4]
    9914:	add	sp, sp, #8
    9918:	bx	lr
    991c:	.word	0x00000866
    9920:	.word	0x0000053b

00009924 <coda_expression_is_equal>:
    9924:	mov	ip, sp
    9928:	sub	sp, sp, #24
    992c:	str	ip, [sp]
    9930:	str	lr, [sp, #4]
    9934:	str	r4, [sp, #8]
    9938:	str	r5, [sp, #12]
    993c:	str	r6, [sp, #16]
    9940:	mov	r5, r0
    9944:	cmp	r5, #0
    9948:	bne	995c <coda_expression_is_equal+0x38>
    994c:	cmp	r1, #0
    9950:	moveq	r0, #1
    9954:	movne	r0, #0
    9958:	b	9ad0 <coda_expression_is_equal+0x1ac>
    995c:	cmp	r1, #0
    9960:	bne	996c <coda_expression_is_equal+0x48>
    9964:	mov	r0, #0
    9968:	b	9ad0 <coda_expression_is_equal+0x1ac>
    996c:	ldr	r0, [r5]
    9970:	ldr	r3, [r1]
    9974:	cmp	r0, r3
    9978:	beq	9984 <coda_expression_is_equal+0x60>
    997c:	mov	r0, #0
    9980:	b	9ad0 <coda_expression_is_equal+0x1ac>
    9984:	cmp	r0, #20
    9988:	bcs	99d0 <coda_expression_is_equal+0xac>
    998c:	cmp	r0, #18
    9990:	beq	99b8 <coda_expression_is_equal+0x94>
    9994:	cmp	r0, #19
    9998:	bne	99e8 <coda_expression_is_equal+0xc4>
    999c:	vldr	d4, [r5, #16]
    99a0:	vldr	d1, [r1, #16]
    99a4:	vcmp.f64	d4, d1
    99a8:	vmrs	APSR_nzcv, fpscr
    99ac:	moveq	r0, #1
    99b0:	movne	r0, #0
    99b4:	b	9ad0 <coda_expression_is_equal+0x1ac>
    99b8:	ldr	r2, [r5, #12]
    99bc:	ldr	r0, [r1, #12]
    99c0:	cmp	r2, r0
    99c4:	moveq	r0, #1
    99c8:	movne	r0, #0
    99cc:	b	9ad0 <coda_expression_is_equal+0x1ac>
    99d0:	cmp	r0, #20
    99d4:	beq	9aa8 <coda_expression_is_equal+0x184>
    99d8:	cmp	r0, #21
    99dc:	beq	9a74 <coda_expression_is_equal+0x150>
    99e0:	cmp	r0, #22
    99e4:	beq	9a74 <coda_expression_is_equal+0x150>
    99e8:	mov	r4, r1
    99ec:	ldr	r0, [r5, #12]
    99f0:	cmp	r0, #0
    99f4:	beq	9a20 <coda_expression_is_equal+0xfc>
    99f8:	ldr	r1, [r4, #12]
    99fc:	cmp	r1, #0
    9a00:	bne	9a0c <coda_expression_is_equal+0xe8>
    9a04:	mov	r0, #0
    9a08:	b	9ad0 <coda_expression_is_equal+0x1ac>
    9a0c:	bl	0 <strcmp>
    9a10:	cmp	r0, #0
    9a14:	beq	9a34 <coda_expression_is_equal+0x110>
    9a18:	mov	r0, #0
    9a1c:	b	9ad0 <coda_expression_is_equal+0x1ac>
    9a20:	ldr	r3, [r4, #12]
    9a24:	cmp	r3, #0
    9a28:	beq	9a34 <coda_expression_is_equal+0x110>
    9a2c:	mov	r0, #0
    9a30:	b	9ad0 <coda_expression_is_equal+0x1ac>
    9a34:	mov	r6, #0
    9a38:	lsl	r1, r6, #2
    9a3c:	add	ip, r5, r1
    9a40:	ldr	r0, [ip, #16]
    9a44:	add	r2, r4, r1
    9a48:	ldr	r1, [r2, #16]
    9a4c:	bl	9924 <coda_expression_is_equal>
    9a50:	cmp	r0, #0
    9a54:	bne	9a60 <coda_expression_is_equal+0x13c>
    9a58:	mov	r0, #0
    9a5c:	b	9ad0 <coda_expression_is_equal+0x1ac>
    9a60:	add	r6, r6, #1
    9a64:	cmp	r6, #4
    9a68:	blt	9a38 <coda_expression_is_equal+0x114>
    9a6c:	mov	r0, #1
    9a70:	b	9ad0 <coda_expression_is_equal+0x1ac>
    9a74:	ldr	r2, [r5, #12]
    9a78:	ldr	r3, [r1, #12]
    9a7c:	cmp	r2, r3
    9a80:	beq	9a8c <coda_expression_is_equal+0x168>
    9a84:	mov	r0, #0
    9a88:	b	9ad0 <coda_expression_is_equal+0x1ac>
    9a8c:	ldr	r0, [r5, #16]
    9a90:	ldr	r1, [r1, #16]
    9a94:	bl	0 <memcmp>
    9a98:	cmp	r0, #0
    9a9c:	moveq	r0, #1
    9aa0:	movne	r0, #0
    9aa4:	b	9ad0 <coda_expression_is_equal+0x1ac>
    9aa8:	ldr	r3, [r5, #16]
    9aac:	ldr	ip, [r5, #20]
    9ab0:	ldr	r2, [r1, #16]
    9ab4:	ldr	r0, [r1, #20]
    9ab8:	eor	r0, ip, r0
    9abc:	eor	r3, r3, r2
    9ac0:	orr	r0, r0, r3
    9ac4:	cmp	r0, #0
    9ac8:	moveq	r0, #1
    9acc:	movne	r0, #0
    9ad0:	ldr	r4, [sp, #8]
    9ad4:	ldr	r5, [sp, #12]
    9ad8:	ldr	r6, [sp, #16]
    9adc:	ldr	lr, [sp, #4]
    9ae0:	add	sp, sp, #24
    9ae4:	bx	lr

00009ae8 <coda_expression_get_type>:
    9ae8:	mov	ip, sp
    9aec:	sub	sp, sp, #8
    9af0:	str	ip, [sp]
    9af4:	str	lr, [sp, #4]
    9af8:	cmp	r0, #0
    9afc:	bne	9b1c <coda_expression_get_type+0x34>
    9b00:	mvn	r0, #99	; 0x63
    9b04:	ldr	r1, [pc, #40]	; 9b34 <coda_expression_get_type+0x4c>
    9b08:	ldr	r2, [pc, #40]	; 9b38 <coda_expression_get_type+0x50>
    9b0c:	movw	r3, #5071	; 0x13cf
    9b10:	bl	0 <coda_set_error>
    9b14:	mvn	r0, #0
    9b18:	b	9b28 <coda_expression_get_type+0x40>
    9b1c:	ldr	r2, [r0, #4]
    9b20:	str	r2, [r1]
    9b24:	mov	r0, #0
    9b28:	ldr	lr, [sp, #4]
    9b2c:	add	sp, sp, #8
    9b30:	bx	lr
    9b34:	.word	0x00000866
    9b38:	.word	0x0000053b

00009b3c <coda_expression_eval_bool>:
    9b3c:	mov	ip, sp
    9b40:	sub	sp, sp, #592	; 0x250
    9b44:	str	ip, [sp]
    9b48:	str	lr, [sp, #4]
    9b4c:	str	r4, [sp, #8]
    9b50:	str	r5, [sp, #12]
    9b54:	str	r6, [sp, #16]
    9b58:	mov	r4, r2
    9b5c:	mov	r5, r1
    9b60:	mov	r6, r0
    9b64:	ldr	r0, [r6, #4]
    9b68:	cmp	r0, #0
    9b6c:	beq	9b84 <coda_expression_eval_bool+0x48>
    9b70:	mvn	r0, #99	; 0x63
    9b74:	ldr	r1, [pc, #156]	; 9c18 <coda_expression_eval_bool+0xdc>
    9b78:	bl	0 <coda_set_error>
    9b7c:	mvn	r0, #0
    9b80:	b	9c00 <coda_expression_eval_bool+0xc4>
    9b84:	cmp	r5, #0
    9b88:	bne	9bac <coda_expression_eval_bool+0x70>
    9b8c:	ldr	r0, [r6, #8]
    9b90:	cmp	r0, #0
    9b94:	bne	9bac <coda_expression_eval_bool+0x70>
    9b98:	mvn	r0, #99	; 0x63
    9b9c:	ldr	r1, [pc, #120]	; 9c1c <coda_expression_eval_bool+0xe0>
    9ba0:	bl	0 <coda_set_error>
    9ba4:	mvn	r0, #0
    9ba8:	b	9c00 <coda_expression_eval_bool+0xc4>
    9bac:	add	r0, sp, #24
    9bb0:	mov	r1, r5
    9bb4:	bl	b98 <init_eval_info>
    9bb8:	add	r0, sp, #24
    9bbc:	mov	r2, r4
    9bc0:	mov	r1, r6
    9bc4:	bl	c0c <eval_boolean>
    9bc8:	cmp	r0, #0
    9bcc:	beq	9bfc <coda_expression_eval_bool+0xc0>
    9bd0:	cmp	r5, #0
    9bd4:	beq	9bf4 <coda_expression_eval_bool+0xb8>
    9bd8:	add	r1, sp, #32
    9bdc:	mov	r0, r5
    9be0:	bl	0 <coda_cursor_compare>
    9be4:	cmp	r0, #0
    9be8:	beq	9bf4 <coda_expression_eval_bool+0xb8>
    9bec:	add	r0, sp, #32
    9bf0:	bl	0 <coda_cursor_add_to_error_message>
    9bf4:	mvn	r0, #0
    9bf8:	b	9c00 <coda_expression_eval_bool+0xc4>
    9bfc:	mov	r0, #0
    9c00:	ldr	r4, [sp, #8]
    9c04:	ldr	r5, [sp, #12]
    9c08:	ldr	r6, [sp, #16]
    9c0c:	ldr	lr, [sp, #4]
    9c10:	add	sp, sp, #592	; 0x250
    9c14:	bx	lr
    9c18:	.word	0x00000b33
    9c1c:	.word	0x00000abd

00009c20 <coda_expression_eval_integer>:
    9c20:	mov	ip, sp
    9c24:	sub	sp, sp, #592	; 0x250
    9c28:	str	ip, [sp]
    9c2c:	str	lr, [sp, #4]
    9c30:	str	r4, [sp, #8]
    9c34:	str	r5, [sp, #12]
    9c38:	str	r6, [sp, #16]
    9c3c:	mov	r4, r2
    9c40:	mov	r5, r1
    9c44:	mov	r6, r0
    9c48:	ldr	r0, [r6, #4]
    9c4c:	cmp	r0, #1
    9c50:	beq	9c68 <coda_expression_eval_integer+0x48>
    9c54:	mvn	r0, #99	; 0x63
    9c58:	ldr	r1, [pc, #156]	; 9cfc <coda_expression_eval_integer+0xdc>
    9c5c:	bl	0 <coda_set_error>
    9c60:	mvn	r0, #0
    9c64:	b	9ce4 <coda_expression_eval_integer+0xc4>
    9c68:	cmp	r5, #0
    9c6c:	bne	9c90 <coda_expression_eval_integer+0x70>
    9c70:	ldr	r0, [r6, #8]
    9c74:	cmp	r0, #0
    9c78:	bne	9c90 <coda_expression_eval_integer+0x70>
    9c7c:	mvn	r0, #99	; 0x63
    9c80:	ldr	r1, [pc, #120]	; 9d00 <coda_expression_eval_integer+0xe0>
    9c84:	bl	0 <coda_set_error>
    9c88:	mvn	r0, #0
    9c8c:	b	9ce4 <coda_expression_eval_integer+0xc4>
    9c90:	add	r0, sp, #24
    9c94:	mov	r1, r5
    9c98:	bl	b98 <init_eval_info>
    9c9c:	add	r0, sp, #24
    9ca0:	mov	r2, r4
    9ca4:	mov	r1, r6
    9ca8:	bl	3240 <eval_integer>
    9cac:	cmp	r0, #0
    9cb0:	beq	9ce0 <coda_expression_eval_integer+0xc0>
    9cb4:	cmp	r5, #0
    9cb8:	beq	9cd8 <coda_expression_eval_integer+0xb8>
    9cbc:	add	r1, sp, #32
    9cc0:	mov	r0, r5
    9cc4:	bl	0 <coda_cursor_compare>
    9cc8:	cmp	r0, #0
    9ccc:	beq	9cd8 <coda_expression_eval_integer+0xb8>
    9cd0:	add	r0, sp, #32
    9cd4:	bl	0 <coda_cursor_add_to_error_message>
    9cd8:	mvn	r0, #0
    9cdc:	b	9ce4 <coda_expression_eval_integer+0xc4>
    9ce0:	mov	r0, #0
    9ce4:	ldr	r4, [sp, #8]
    9ce8:	ldr	r5, [sp, #12]
    9cec:	ldr	r6, [sp, #16]
    9cf0:	ldr	lr, [sp, #4]
    9cf4:	add	sp, sp, #592	; 0x250
    9cf8:	bx	lr
    9cfc:	.word	0x0000059b
    9d00:	.word	0x00000abd

00009d04 <coda_expression_eval_float>:
    9d04:	mov	ip, sp
    9d08:	sub	sp, sp, #592	; 0x250
    9d0c:	str	ip, [sp]
    9d10:	str	lr, [sp, #4]
    9d14:	str	r4, [sp, #8]
    9d18:	str	r5, [sp, #12]
    9d1c:	str	r6, [sp, #16]
    9d20:	mov	r4, r2
    9d24:	mov	r5, r1
    9d28:	mov	r6, r0
    9d2c:	ldr	r0, [r6, #4]
    9d30:	cmp	r0, #2
    9d34:	beq	9d4c <coda_expression_eval_float+0x48>
    9d38:	mvn	r0, #99	; 0x63
    9d3c:	ldr	r1, [pc, #160]	; 9de4 <coda_expression_eval_float+0xe0>
    9d40:	bl	0 <coda_set_error>
    9d44:	mvn	r0, #0
    9d48:	b	9dc8 <coda_expression_eval_float+0xc4>
    9d4c:	cmp	r5, #0
    9d50:	bne	9d74 <coda_expression_eval_float+0x70>
    9d54:	ldr	r0, [r6, #8]
    9d58:	cmp	r0, #0
    9d5c:	bne	9d74 <coda_expression_eval_float+0x70>
    9d60:	mvn	r0, #99	; 0x63
    9d64:	ldr	r1, [pc, #116]	; 9de0 <coda_expression_eval_float+0xdc>
    9d68:	bl	0 <coda_set_error>
    9d6c:	mvn	r0, #0
    9d70:	b	9dc8 <coda_expression_eval_float+0xc4>
    9d74:	add	r0, sp, #24
    9d78:	mov	r1, r5
    9d7c:	bl	b98 <init_eval_info>
    9d80:	add	r0, sp, #24
    9d84:	mov	r2, r4
    9d88:	mov	r1, r6
    9d8c:	bl	2300 <eval_float>
    9d90:	cmp	r0, #0
    9d94:	beq	9dc4 <coda_expression_eval_float+0xc0>
    9d98:	cmp	r5, #0
    9d9c:	beq	9dbc <coda_expression_eval_float+0xb8>
    9da0:	add	r1, sp, #32
    9da4:	mov	r0, r5
    9da8:	bl	0 <coda_cursor_compare>
    9dac:	cmp	r0, #0
    9db0:	beq	9dbc <coda_expression_eval_float+0xb8>
    9db4:	add	r0, sp, #32
    9db8:	bl	0 <coda_cursor_add_to_error_message>
    9dbc:	mvn	r0, #0
    9dc0:	b	9dc8 <coda_expression_eval_float+0xc4>
    9dc4:	mov	r0, #0
    9dc8:	ldr	r4, [sp, #8]
    9dcc:	ldr	r5, [sp, #12]
    9dd0:	ldr	r6, [sp, #16]
    9dd4:	ldr	lr, [sp, #4]
    9dd8:	add	sp, sp, #592	; 0x250
    9ddc:	bx	lr
    9de0:	.word	0x00000abd
    9de4:	.word	0x00000009

00009de8 <coda_expression_eval_string>:
    9de8:	mov	ip, sp
    9dec:	sub	sp, sp, #608	; 0x260
    9df0:	str	ip, [sp, #4]
    9df4:	str	lr, [sp, #8]
    9df8:	str	r4, [sp, #16]
    9dfc:	str	r5, [sp, #20]
    9e00:	str	r6, [sp, #24]
    9e04:	str	r7, [sp, #28]
    9e08:	mov	r5, r3
    9e0c:	mov	r6, r2
    9e10:	mov	r4, r1
    9e14:	mov	r7, r0
    9e18:	ldr	r2, [r7, #4]
    9e1c:	cmp	r2, #3
    9e20:	beq	9e38 <coda_expression_eval_string+0x50>
    9e24:	mvn	r0, #99	; 0x63
    9e28:	ldr	r1, [pc, #340]	; 9f84 <coda_expression_eval_string+0x19c>
    9e2c:	bl	0 <coda_set_error>
    9e30:	mvn	r0, #0
    9e34:	b	9f5c <coda_expression_eval_string+0x174>
    9e38:	cmp	r4, #0
    9e3c:	bne	9e60 <coda_expression_eval_string+0x78>
    9e40:	ldr	r0, [r7, #8]
    9e44:	cmp	r0, #0
    9e48:	bne	9e60 <coda_expression_eval_string+0x78>
    9e4c:	mvn	r0, #99	; 0x63
    9e50:	ldr	r1, [pc, #292]	; 9f7c <coda_expression_eval_string+0x194>
    9e54:	bl	0 <coda_set_error>
    9e58:	mvn	r0, #0
    9e5c:	b	9f5c <coda_expression_eval_string+0x174>
    9e60:	add	r0, sp, #40	; 0x28
    9e64:	mov	r1, r4
    9e68:	bl	b98 <init_eval_info>
    9e6c:	add	r0, sp, #40	; 0x28
    9e70:	add	r2, sp, #32
    9e74:	str	r6, [sp]
    9e78:	mov	r3, r5
    9e7c:	mov	r1, r7
    9e80:	bl	4f8c <eval_string>
    9e84:	cmp	r0, #0
    9e88:	beq	9eb8 <coda_expression_eval_string+0xd0>
    9e8c:	cmp	r4, #0
    9e90:	beq	9eb0 <coda_expression_eval_string+0xc8>
    9e94:	add	r1, sp, #48	; 0x30
    9e98:	mov	r0, r4
    9e9c:	bl	0 <coda_cursor_compare>
    9ea0:	cmp	r0, #0
    9ea4:	beq	9eb0 <coda_expression_eval_string+0xc8>
    9ea8:	add	r0, sp, #48	; 0x30
    9eac:	bl	0 <coda_cursor_add_to_error_message>
    9eb0:	mvn	r0, #0
    9eb4:	b	9f5c <coda_expression_eval_string+0x174>
    9eb8:	ldr	r0, [r5]
    9ebc:	cmp	r0, #0
    9ec0:	ble	9f40 <coda_expression_eval_string+0x158>
    9ec4:	ldr	r2, [sp, #32]
    9ec8:	cmp	r2, #0
    9ecc:	beq	9f2c <coda_expression_eval_string+0x144>
    9ed0:	add	r0, r0, #1
    9ed4:	bl	0 <malloc>
    9ed8:	mov	r4, r0
    9edc:	cmp	r4, #0
    9ee0:	bne	9f08 <coda_expression_eval_string+0x120>
    9ee4:	mvn	r0, #0
    9ee8:	ldr	r1, [pc, #136]	; 9f78 <coda_expression_eval_string+0x190>
    9eec:	ldr	r2, [r5]
    9ef0:	ldr	r3, [pc, #136]	; 9f80 <coda_expression_eval_string+0x198>
    9ef4:	movw	r4, #5251	; 0x1483
    9ef8:	str	r4, [sp]
    9efc:	bl	0 <coda_set_error>
    9f00:	mvn	r0, #0
    9f04:	b	9f5c <coda_expression_eval_string+0x174>
    9f08:	ldr	r2, [r6]
    9f0c:	ldr	r1, [sp, #32]
    9f10:	add	r1, r2, r1
    9f14:	ldr	r2, [r5]
    9f18:	mov	r0, r4
    9f1c:	bl	0 <memcpy>
    9f20:	ldr	r0, [r6]
    9f24:	bl	0 <free>
    9f28:	str	r4, [r6]
    9f2c:	ldr	ip, [r6]
    9f30:	ldr	r0, [r5]
    9f34:	mov	r1, #0
    9f38:	strb	r1, [ip, r0]
    9f3c:	b	9f58 <coda_expression_eval_string+0x170>
    9f40:	ldr	r0, [r6]
    9f44:	cmp	r0, #0
    9f48:	beq	9f50 <coda_expression_eval_string+0x168>
    9f4c:	bl	0 <free>
    9f50:	mov	r1, #0
    9f54:	str	r1, [r6]
    9f58:	mov	r0, #0
    9f5c:	ldr	r4, [sp, #16]
    9f60:	ldr	r5, [sp, #20]
    9f64:	ldr	r6, [sp, #24]
    9f68:	ldr	r7, [sp, #28]
    9f6c:	ldr	lr, [sp, #8]
    9f70:	add	sp, sp, #608	; 0x260
    9f74:	bx	lr
    9f78:	.word	0x00000ce9
    9f7c:	.word	0x00000abd
    9f80:	.word	0x0000053b
    9f84:	.word	0x00000bfe

00009f88 <coda_expression_eval_node>:
    9f88:	mov	ip, sp
    9f8c:	sub	sp, sp, #584	; 0x248
    9f90:	str	ip, [sp]
    9f94:	str	lr, [sp, #4]
    9f98:	str	r4, [sp, #8]
    9f9c:	str	r5, [sp, #12]
    9fa0:	mov	r4, r1
    9fa4:	mov	r5, r0
    9fa8:	ldr	ip, [r5, #4]
    9fac:	cmp	ip, #4
    9fb0:	beq	9fc8 <coda_expression_eval_node+0x40>
    9fb4:	mvn	r0, #99	; 0x63
    9fb8:	ldr	r1, [pc, #168]	; a068 <coda_expression_eval_node+0xe0>
    9fbc:	bl	0 <coda_set_error>
    9fc0:	mvn	r0, #0
    9fc4:	b	a050 <coda_expression_eval_node+0xc8>
    9fc8:	cmp	r4, #0
    9fcc:	bne	9fe4 <coda_expression_eval_node+0x5c>
    9fd0:	mvn	r0, #99	; 0x63
    9fd4:	ldr	r1, [pc, #136]	; a064 <coda_expression_eval_node+0xdc>
    9fd8:	bl	0 <coda_set_error>
    9fdc:	mvn	r0, #0
    9fe0:	b	a050 <coda_expression_eval_node+0xc8>
    9fe4:	add	r0, sp, #16
    9fe8:	mov	r1, r4
    9fec:	bl	b98 <init_eval_info>
    9ff0:	add	r0, sp, #16
    9ff4:	mov	r1, r5
    9ff8:	bl	6fa4 <eval_cursor>
    9ffc:	cmp	r0, #0
    a000:	beq	a030 <coda_expression_eval_node+0xa8>
    a004:	cmp	r4, #0
    a008:	beq	a028 <coda_expression_eval_node+0xa0>
    a00c:	add	r1, sp, #24
    a010:	mov	r0, r4
    a014:	bl	0 <coda_cursor_compare>
    a018:	cmp	r0, #0
    a01c:	beq	a028 <coda_expression_eval_node+0xa0>
    a020:	add	r0, sp, #24
    a024:	bl	0 <coda_cursor_add_to_error_message>
    a028:	mvn	r0, #0
    a02c:	b	a050 <coda_expression_eval_node+0xc8>
    a030:	add	r2, sp, #24
    a034:	mov	r3, r4
    a038:	mov	lr, #130	; 0x82
    a03c:	ldr	ip, [r2], #4
    a040:	subs	lr, lr, #1
    a044:	str	ip, [r3], #4
    a048:	bne	a03c <coda_expression_eval_node+0xb4>
    a04c:	mov	r0, #0
    a050:	ldr	r4, [sp, #8]
    a054:	ldr	r5, [sp, #12]
    a058:	ldr	lr, [sp, #4]
    a05c:	add	sp, sp, #584	; 0x248
    a060:	bx	lr
    a064:	.word	0x00000ca7
    a068:	.word	0x00000244
