
../repos/prog2/CMakeFiles/MT2E1-2.dir/Extras/Miniteste2-Exemplo1/prob2/heap.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <heap_nova>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #16
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	str	r5, [sp, #12]
  18:	mov	r5, r0
  1c:	mov	r0, #12
  20:	bl	0 <malloc>
  24:	mov	r4, r0
  28:	cmp	r4, #0
  2c:	bne	38 <heap_nova+0x38>
  30:	mov	r0, #0
  34:	b	74 <heap_nova+0x74>
  38:	mov	r0, #0
  3c:	str	r0, [r4]
  40:	str	r5, [r4, #4]
  44:	mov	r1, #4
  48:	mov	r0, r5
  4c:	bl	0 <calloc>
  50:	str	r0, [r4, #8]
  54:	ldr	r2, [r4, #8]
  58:	cmp	r2, #0
  5c:	bne	70 <heap_nova+0x70>
  60:	mov	r0, r4
  64:	bl	0 <free>
  68:	mov	r0, #0
  6c:	b	74 <heap_nova+0x74>
  70:	mov	r0, r4
  74:	ldr	r4, [sp, #8]
  78:	ldr	r5, [sp, #12]
  7c:	ldr	lr, [sp, #4]
  80:	add	sp, sp, #16
  84:	bx	lr

00000088 <heap_apaga>:
  88:	mov	ip, sp
  8c:	sub	sp, sp, #16
  90:	str	ip, [sp]
  94:	str	lr, [sp, #4]
  98:	str	r4, [sp, #8]
  9c:	str	r5, [sp, #12]
  a0:	mov	r4, r0
  a4:	cmp	r4, #0
  a8:	beq	fc <heap_apaga+0x74>
  ac:	mov	r5, #0
  b0:	ldr	r1, [r4]
  b4:	cmp	r5, r1
  b8:	bge	ec <heap_apaga+0x64>
  bc:	ldr	r3, [r4, #8]
  c0:	ldr	r0, [r3, r5, lsl #2]
  c4:	ldr	r0, [r0, #4]
  c8:	bl	0 <free>
  cc:	ldr	r0, [r4, #8]
  d0:	ldr	r0, [r0, r5, lsl #2]
  d4:	bl	0 <free>
  d8:	ldr	r2, [r4, #8]
  dc:	mov	ip, #0
  e0:	str	ip, [r2, r5, lsl #2]
  e4:	add	r5, r5, #1
  e8:	b	b0 <heap_apaga+0x28>
  ec:	ldr	r0, [r4, #8]
  f0:	bl	0 <free>
  f4:	mov	r0, r4
  f8:	bl	0 <free>
  fc:	ldr	r4, [sp, #8]
 100:	ldr	r5, [sp, #12]
 104:	ldr	lr, [sp, #4]
 108:	add	sp, sp, #16
 10c:	bx	lr

00000110 <elemento_cria>:
 110:	mov	ip, sp
 114:	sub	sp, sp, #24
 118:	str	ip, [sp]
 11c:	str	lr, [sp, #4]
 120:	str	r4, [sp, #8]
 124:	str	r5, [sp, #12]
 128:	str	r6, [sp, #16]
 12c:	mov	r4, r1
 130:	mov	r5, r0
 134:	mov	r0, #8
 138:	bl	0 <malloc>
 13c:	mov	r6, r0
 140:	cmp	r6, #0
 144:	bne	150 <elemento_cria+0x40>
 148:	mov	r0, #0
 14c:	b	198 <elemento_cria+0x88>
 150:	mov	r0, r4
 154:	bl	0 <strlen>
 158:	add	r0, r0, #1
 15c:	mov	r1, #1
 160:	bl	0 <calloc>
 164:	str	r0, [r6, #4]
 168:	ldr	r1, [r6, #4]
 16c:	cmp	r1, #0
 170:	bne	184 <elemento_cria+0x74>
 174:	mov	r0, r6
 178:	bl	0 <free>
 17c:	mov	r0, #0
 180:	b	198 <elemento_cria+0x88>
 184:	ldr	r0, [r6, #4]
 188:	mov	r1, r4
 18c:	bl	0 <strcpy>
 190:	str	r5, [r6]
 194:	mov	r0, r6
 198:	ldr	r4, [sp, #8]
 19c:	ldr	r5, [sp, #12]
 1a0:	ldr	r6, [sp, #16]
 1a4:	ldr	lr, [sp, #4]
 1a8:	add	sp, sp, #24
 1ac:	bx	lr

000001b0 <heap_insere>:
 1b0:	mov	ip, sp
 1b4:	sub	sp, sp, #16
 1b8:	str	ip, [sp]
 1bc:	str	lr, [sp, #4]
 1c0:	str	r4, [sp, #8]
 1c4:	str	r5, [sp, #12]
 1c8:	mov	r4, r0
 1cc:	mov	r0, r2
 1d0:	ldr	ip, [r4]
 1d4:	ldr	r2, [r4, #4]
 1d8:	cmp	ip, r2
 1dc:	blt	1e8 <heap_insere+0x38>
 1e0:	mov	r0, #0
 1e4:	b	2b4 <heap_insere+0x104>
 1e8:	bl	110 <elemento_cria>
 1ec:	cmp	r0, #0
 1f0:	bne	1fc <heap_insere+0x4c>
 1f4:	mov	r0, #0
 1f8:	b	2b4 <heap_insere+0x104>
 1fc:	ldr	r5, [r4]
 200:	ldr	r2, [r4, #8]
 204:	str	r0, [r2, r5, lsl #2]
 208:	ldr	r2, [r4]
 20c:	add	r0, r2, #1
 210:	str	r0, [r4]
 214:	cmp	r5, #0
 218:	beq	250 <heap_insere+0xa0>
 21c:	ldr	r3, [r4, #8]
 220:	ldr	r0, [r3, r5, lsl #2]
 224:	ldr	ip, [r4, #8]
 228:	sub	r1, r5, #1
 22c:	asr	lr, r1, #31
 230:	add	lr, r1, lr, lsr #31
 234:	asr	r1, lr, #1
 238:	ldr	r1, [ip, r1, lsl #2]
 23c:	bl	538 <menor_que>
 240:	cmp	r0, #0
 244:	movne	r1, #1
 248:	moveq	r1, #0
 24c:	b	254 <heap_insere+0xa4>
 250:	mov	r1, #0
 254:	cmp	r1, #0
 258:	beq	2b0 <heap_insere+0x100>
 25c:	ldr	r1, [r4, #8]
 260:	sub	ip, r5, #1
 264:	asr	lr, ip, #31
 268:	add	lr, ip, lr, lsr #31
 26c:	asr	r0, lr, #1
 270:	ldr	ip, [r1, r0, lsl #2]
 274:	ldr	r3, [r4, #8]
 278:	sub	r2, r5, #1
 27c:	asr	lr, r2, #31
 280:	add	lr, r2, lr, lsr #31
 284:	asr	r1, lr, #1
 288:	ldr	r2, [r4, #8]
 28c:	ldr	r0, [r2, r5, lsl #2]
 290:	str	r0, [r3, r1, lsl #2]
 294:	ldr	r1, [r4, #8]
 298:	str	ip, [r1, r5, lsl #2]
 29c:	sub	r1, r5, #1
 2a0:	asr	lr, r1, #31
 2a4:	add	lr, r1, lr, lsr #31
 2a8:	asr	r5, lr, #1
 2ac:	b	214 <heap_insere+0x64>
 2b0:	mov	r0, #1
 2b4:	ldr	r4, [sp, #8]
 2b8:	ldr	r5, [sp, #12]
 2bc:	ldr	lr, [sp, #4]
 2c0:	add	sp, sp, #16
 2c4:	bx	lr

000002c8 <heap_remove>:
 2c8:	mov	ip, sp
 2cc:	sub	sp, sp, #24
 2d0:	str	ip, [sp]
 2d4:	str	lr, [sp, #4]
 2d8:	str	r4, [sp, #8]
 2dc:	str	r5, [sp, #12]
 2e0:	str	r6, [sp, #16]
 2e4:	str	r7, [sp, #20]
 2e8:	mov	r7, r0
 2ec:	cmp	r7, #0
 2f0:	beq	308 <heap_remove+0x40>
 2f4:	ldr	r0, [r7]
 2f8:	cmp	r0, #0
 2fc:	movle	r1, #1
 300:	movgt	r1, #0
 304:	b	30c <heap_remove+0x44>
 308:	mov	r1, #1
 30c:	cmp	r1, #0
 310:	beq	31c <heap_remove+0x54>
 314:	mov	r0, #0
 318:	b	428 <heap_remove+0x160>
 31c:	ldr	r1, [r7, #8]
 320:	ldr	ip, [r1]
 324:	ldr	r6, [ip, #4]
 328:	ldr	r2, [r7, #8]
 32c:	ldr	r0, [r2]
 330:	bl	0 <free>
 334:	ldr	r1, [r7]
 338:	sub	r2, r1, #1
 33c:	str	r2, [r7]
 340:	ldr	r2, [r7, #8]
 344:	ldr	ip, [r7, #8]
 348:	ldr	r0, [r7]
 34c:	ldr	r3, [ip, r0, lsl #2]
 350:	str	r3, [r2]
 354:	ldr	r3, [r7, #8]
 358:	ldr	r1, [r7]
 35c:	mov	r2, #0
 360:	str	r2, [r3, r1, lsl #2]
 364:	mov	r5, #0
 368:	lsl	ip, r5, #1
 36c:	add	r0, ip, #1
 370:	ldr	r1, [r7]
 374:	cmp	r0, r1
 378:	bge	424 <heap_remove+0x15c>
 37c:	lsl	r1, r5, #1
 380:	add	r4, r1, #1
 384:	lsl	r0, r5, #1
 388:	add	r3, r0, #2
 38c:	ldr	r1, [r7]
 390:	cmp	r3, r1
 394:	bge	3cc <heap_remove+0x104>
 398:	ldr	r3, [r7, #8]
 39c:	lsl	r0, r5, #3
 3a0:	add	ip, r3, r0
 3a4:	ldr	r0, [ip, #8]
 3a8:	ldr	r2, [r7, #8]
 3ac:	lsl	r1, r5, #3
 3b0:	add	r2, r2, r1
 3b4:	ldr	r1, [r2, #4]
 3b8:	bl	538 <menor_que>
 3bc:	cmp	r0, #0
 3c0:	movne	r2, #1
 3c4:	moveq	r2, #0
 3c8:	b	3d0 <heap_remove+0x108>
 3cc:	mov	r2, #0
 3d0:	cmp	r2, #0
 3d4:	beq	3e0 <heap_remove+0x118>
 3d8:	lsl	r3, r5, #1
 3dc:	add	r4, r3, #2
 3e0:	ldr	ip, [r7, #8]
 3e4:	ldr	r0, [ip, r4, lsl #2]
 3e8:	ldr	r1, [r7, #8]
 3ec:	ldr	r1, [r1, r5, lsl #2]
 3f0:	bl	538 <menor_que>
 3f4:	cmp	r0, #0
 3f8:	beq	424 <heap_remove+0x15c>
 3fc:	ldr	ip, [r7, #8]
 400:	ldr	r0, [ip, r4, lsl #2]
 404:	ldr	r3, [r7, #8]
 408:	ldr	ip, [r7, #8]
 40c:	ldr	r2, [ip, r5, lsl #2]
 410:	str	r2, [r3, r4, lsl #2]
 414:	ldr	r3, [r7, #8]
 418:	str	r0, [r3, r5, lsl #2]
 41c:	mov	r5, r4
 420:	b	368 <heap_remove+0xa0>
 424:	mov	r0, r6
 428:	ldr	r4, [sp, #8]
 42c:	ldr	r5, [sp, #12]
 430:	ldr	r6, [sp, #16]
 434:	ldr	r7, [sp, #20]
 438:	ldr	lr, [sp, #4]
 43c:	add	sp, sp, #24
 440:	bx	lr

00000444 <mostraHeap>:
 444:	mov	ip, sp
 448:	sub	sp, sp, #24
 44c:	str	ip, [sp]
 450:	str	lr, [sp, #4]
 454:	str	r4, [sp, #8]
 458:	str	r5, [sp, #12]
 45c:	str	r6, [sp, #16]
 460:	str	r7, [sp, #20]
 464:	mov	r4, r1
 468:	mov	r5, r0
 46c:	mov	r6, #0
 470:	ldr	r0, [r5]
 474:	cmp	r4, r0
 478:	bge	500 <mostraHeap+0xbc>
 47c:	mov	r0, r4
 480:	cmp	r0, #0
 484:	ble	4a0 <mostraHeap+0x5c>
 488:	sub	ip, r0, #1
 48c:	asr	lr, ip, #31
 490:	add	lr, ip, lr, lsr #31
 494:	asr	r0, lr, #1
 498:	add	r6, r6, #1
 49c:	b	480 <mostraHeap+0x3c>
 4a0:	lsl	r2, r4, #1
 4a4:	add	r1, r2, #1
 4a8:	mov	r0, r5
 4ac:	bl	444 <mostraHeap>
 4b0:	mov	r7, #0
 4b4:	add	r2, r6, r6, lsl #1
 4b8:	cmp	r7, r2
 4bc:	bge	4d0 <mostraHeap+0x8c>
 4c0:	ldr	r0, [pc, #108]	; 534 <mostraHeap+0xf0>
 4c4:	bl	0 <printf>
 4c8:	add	r7, r7, #1
 4cc:	b	4b4 <mostraHeap+0x70>
 4d0:	ldr	r0, [pc, #88]	; 530 <mostraHeap+0xec>
 4d4:	ldr	r1, [r5, #8]
 4d8:	ldr	r1, [r1, r4, lsl #2]
 4dc:	ldr	r1, [r1, #4]
 4e0:	ldr	r3, [r5, #8]
 4e4:	ldr	r2, [r3, r4, lsl #2]
 4e8:	ldr	r2, [r2]
 4ec:	bl	0 <printf>
 4f0:	lsl	r3, r4, #1
 4f4:	add	r1, r3, #2
 4f8:	mov	r0, r5
 4fc:	bl	444 <mostraHeap>
 500:	cmp	r6, #0
 504:	bne	510 <mostraHeap+0xcc>
 508:	ldr	r0, [pc, #28]	; 52c <mostraHeap+0xe8>
 50c:	bl	0 <printf>
 510:	ldr	r4, [sp, #8]
 514:	ldr	r5, [sp, #12]
 518:	ldr	r6, [sp, #16]
 51c:	ldr	r7, [sp, #20]
 520:	ldr	lr, [sp, #4]
 524:	add	sp, sp, #24
 528:	bx	lr
 52c:	.word	0x00000009
 530:	.word	0x00000000
 534:	.word	0x0000000b

00000538 <menor_que>:
 538:	mov	ip, sp
 53c:	sub	sp, sp, #8
 540:	str	ip, [sp]
 544:	str	lr, [sp, #4]
 548:	cmp	r0, #0
 54c:	beq	560 <menor_que+0x28>
 550:	cmp	r1, #0
 554:	moveq	r2, #1
 558:	movne	r2, #0
 55c:	b	564 <menor_que+0x2c>
 560:	mov	r2, #1
 564:	cmp	r2, #0
 568:	beq	574 <menor_que+0x3c>
 56c:	mov	r0, #0
 570:	b	588 <menor_que+0x50>
 574:	ldr	r3, [r0]
 578:	ldr	r1, [r1]
 57c:	cmp	r3, r1
 580:	movlt	r0, #1
 584:	movge	r0, #0
 588:	ldr	lr, [sp, #4]
 58c:	add	sp, sp, #8
 590:	bx	lr
