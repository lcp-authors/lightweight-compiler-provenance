
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/CMakeFiles/reflection_test.dir/reflection_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <test_schema>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #136	; 0x88
       c:	str	r0, [fp, #-4]
      10:	mvn	r0, #0
      14:	str	r0, [fp, #-16]
      18:	ldr	r0, [fp, #-4]
      1c:	movw	r1, #10000	; 0x2710
      20:	sub	r2, fp, #12
      24:	bl	414 <readfile>
      28:	str	r0, [fp, #-8]
      2c:	ldr	r0, [fp, #-8]
      30:	movw	r1, #0
      34:	cmp	r0, r1
      38:	bne	50 <test_schema+0x50>
      3c:	movw	r0, #0
      40:	movt	r0, #0
      44:	bl	0 <printf>
      48:	str	r0, [fp, #-52]	; 0xffffffcc
      4c:	b	3f0 <test_schema+0x3f0>
      50:	ldr	r0, [fp, #-8]
      54:	bl	600 <reflection_Schema_as_root>
      58:	str	r0, [fp, #-20]	; 0xffffffec
      5c:	ldr	r0, [fp, #-20]	; 0xffffffec
      60:	bl	678 <reflection_Schema_objects>
      64:	str	r0, [fp, #-24]	; 0xffffffe8
      68:	movw	r0, #0
      6c:	str	r0, [fp, #-44]	; 0xffffffd4
      70:	ldr	r0, [fp, #-44]	; 0xffffffd4
      74:	ldr	r1, [fp, #-24]	; 0xffffffe8
      78:	str	r0, [fp, #-56]	; 0xffffffc8
      7c:	mov	r0, r1
      80:	bl	780 <reflection_Object_vec_len>
      84:	ldr	r1, [fp, #-56]	; 0xffffffc8
      88:	cmp	r1, r0
      8c:	bcs	dc <test_schema+0xdc>
      90:	ldr	r1, [fp, #-44]	; 0xffffffd4
      94:	ldr	r0, [fp, #-24]	; 0xffffffe8
      98:	ldr	r2, [fp, #-44]	; 0xffffffd4
      9c:	str	r1, [fp, #-60]	; 0xffffffc4
      a0:	mov	r1, r2
      a4:	bl	8d8 <reflection_Object_vec_at>
      a8:	bl	7d0 <reflection_Object_name>
      ac:	movw	r1, #0
      b0:	movt	r1, #0
      b4:	str	r0, [fp, #-64]	; 0xffffffc0
      b8:	mov	r0, r1
      bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
      c0:	ldr	r2, [fp, #-64]	; 0xffffffc0
      c4:	bl	0 <printf>
      c8:	str	r0, [sp, #68]	; 0x44
      cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
      d0:	add	r0, r0, #1
      d4:	str	r0, [fp, #-44]	; 0xffffffd4
      d8:	b	70 <test_schema+0x70>
      dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
      e0:	movw	r1, #0
      e4:	movt	r1, #0
      e8:	bl	95c <reflection_Object_vec_find>
      ec:	str	r0, [fp, #-44]	; 0xffffffd4
      f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
      f4:	movw	r1, #0
      f8:	movt	r1, #0
      fc:	ldr	r1, [r1]
     100:	cmp	r0, r1
     104:	bne	11c <test_schema+0x11c>
     108:	movw	r0, #0
     10c:	movt	r0, #0
     110:	bl	0 <printf>
     114:	str	r0, [sp, #64]	; 0x40
     118:	b	3f0 <test_schema+0x3f0>
     11c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     120:	str	r0, [fp, #-48]	; 0xffffffd0
     124:	ldr	r0, [fp, #-24]	; 0xffffffe8
     128:	ldr	r1, [fp, #-44]	; 0xffffffd4
     12c:	bl	8d8 <reflection_Object_vec_at>
     130:	str	r0, [fp, #-28]	; 0xffffffe4
     134:	ldr	r0, [fp, #-28]	; 0xffffffe4
     138:	bl	7d0 <reflection_Object_name>
     13c:	movw	r1, #0
     140:	movt	r1, #0
     144:	bl	0 <strcmp>
     148:	cmp	r0, #0
     14c:	beq	164 <test_schema+0x164>
     150:	movw	r0, #0
     154:	movt	r0, #0
     158:	bl	0 <printf>
     15c:	str	r0, [sp, #60]	; 0x3c
     160:	b	3f0 <test_schema+0x3f0>
     164:	ldr	r0, [fp, #-28]	; 0xffffffe4
     168:	bl	984 <reflection_Object_fields>
     16c:	str	r0, [fp, #-32]	; 0xffffffe0
     170:	ldr	r0, [fp, #-32]	; 0xffffffe0
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	bl	a8c <reflection_Field_vec_find>
     180:	str	r0, [fp, #-44]	; 0xffffffd4
     184:	ldr	r0, [fp, #-44]	; 0xffffffd4
     188:	movw	r1, #0
     18c:	movt	r1, #0
     190:	ldr	r1, [r1]
     194:	cmp	r0, r1
     198:	bne	1b0 <test_schema+0x1b0>
     19c:	movw	r0, #0
     1a0:	movt	r0, #0
     1a4:	bl	0 <printf>
     1a8:	str	r0, [sp, #56]	; 0x38
     1ac:	b	3f0 <test_schema+0x3f0>
     1b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
     1b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
     1b8:	bl	ab4 <reflection_Field_vec_at>
     1bc:	str	r0, [fp, #-36]	; 0xffffffdc
     1c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
     1c4:	bl	b38 <reflection_Field_default_integer>
     1c8:	eor	r0, r0, #150	; 0x96
     1cc:	orr	r0, r0, r1
     1d0:	cmp	r0, #0
     1d4:	beq	244 <test_schema+0x244>
     1d8:	b	1dc <test_schema+0x1dc>
     1dc:	movw	r0, #0
     1e0:	movt	r0, #0
     1e4:	bl	0 <printf>
     1e8:	ldr	lr, [fp, #-36]	; 0xffffffdc
     1ec:	str	r0, [sp, #52]	; 0x34
     1f0:	mov	r0, lr
     1f4:	bl	c34 <reflection_Field_name>
     1f8:	movw	lr, #0
     1fc:	movt	lr, #0
     200:	str	r0, [sp, #48]	; 0x30
     204:	mov	r0, lr
     208:	ldr	r1, [sp, #48]	; 0x30
     20c:	bl	0 <printf>
     210:	ldr	r1, [fp, #-36]	; 0xffffffdc
     214:	str	r0, [sp, #44]	; 0x2c
     218:	mov	r0, r1
     21c:	bl	b38 <reflection_Field_default_integer>
     220:	movw	lr, #0
     224:	movt	lr, #0
     228:	str	r0, [sp, #40]	; 0x28
     22c:	mov	r0, lr
     230:	ldr	r2, [sp, #40]	; 0x28
     234:	mov	r3, r1
     238:	bl	0 <printf>
     23c:	str	r0, [sp, #36]	; 0x24
     240:	b	3f0 <test_schema+0x3f0>
     244:	ldr	r0, [fp, #-36]	; 0xffffffdc
     248:	bl	d3c <reflection_Field_type>
     24c:	str	r0, [fp, #-40]	; 0xffffffd8
     250:	ldr	r0, [fp, #-40]	; 0xffffffd8
     254:	bl	e40 <reflection_Type_base_type>
     258:	sxtb	r0, r0
     25c:	cmp	r0, #5
     260:	beq	278 <test_schema+0x278>
     264:	movw	r0, #0
     268:	movt	r0, #0
     26c:	bl	0 <printf>
     270:	str	r0, [sp, #32]
     274:	b	3f0 <test_schema+0x3f0>
     278:	ldr	r0, [fp, #-32]	; 0xffffffe0
     27c:	movw	r1, #0
     280:	movt	r1, #0
     284:	bl	a8c <reflection_Field_vec_find>
     288:	str	r0, [fp, #-44]	; 0xffffffd4
     28c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     290:	movw	r1, #0
     294:	movt	r1, #0
     298:	ldr	r1, [r1]
     29c:	cmp	r0, r1
     2a0:	bne	2b8 <test_schema+0x2b8>
     2a4:	movw	r0, #0
     2a8:	movt	r0, #0
     2ac:	bl	0 <printf>
     2b0:	str	r0, [sp, #28]
     2b4:	b	3f0 <test_schema+0x3f0>
     2b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     2bc:	ldr	r1, [fp, #-44]	; 0xffffffd4
     2c0:	bl	ab4 <reflection_Field_vec_at>
     2c4:	bl	d3c <reflection_Field_type>
     2c8:	str	r0, [fp, #-40]	; 0xffffffd8
     2cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
     2d0:	bl	e40 <reflection_Type_base_type>
     2d4:	sxtb	r0, r0
     2d8:	cmp	r0, #15
     2dc:	beq	2f4 <test_schema+0x2f4>
     2e0:	movw	r0, #0
     2e4:	movt	r0, #0
     2e8:	bl	0 <printf>
     2ec:	str	r0, [sp, #24]
     2f0:	b	3f0 <test_schema+0x3f0>
     2f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     2f8:	bl	f28 <reflection_Type_index>
     2fc:	ldr	lr, [fp, #-48]	; 0xffffffd0
     300:	cmp	r0, lr
     304:	beq	31c <test_schema+0x31c>
     308:	movw	r0, #0
     30c:	movt	r0, #0
     310:	bl	0 <printf>
     314:	str	r0, [sp, #20]
     318:	b	3f0 <test_schema+0x3f0>
     31c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     320:	movw	r1, #0
     324:	movt	r1, #0
     328:	bl	a8c <reflection_Field_vec_find>
     32c:	str	r0, [fp, #-44]	; 0xffffffd4
     330:	ldr	r0, [fp, #-44]	; 0xffffffd4
     334:	movw	r1, #0
     338:	movt	r1, #0
     33c:	ldr	r1, [r1]
     340:	cmp	r0, r1
     344:	bne	35c <test_schema+0x35c>
     348:	movw	r0, #0
     34c:	movt	r0, #0
     350:	bl	0 <printf>
     354:	str	r0, [sp, #16]
     358:	b	3f0 <test_schema+0x3f0>
     35c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     360:	ldr	r1, [fp, #-44]	; 0xffffffd4
     364:	bl	ab4 <reflection_Field_vec_at>
     368:	bl	d3c <reflection_Field_type>
     36c:	str	r0, [fp, #-40]	; 0xffffffd8
     370:	ldr	r0, [fp, #-40]	; 0xffffffd8
     374:	bl	e40 <reflection_Type_base_type>
     378:	sxtb	r0, r0
     37c:	cmp	r0, #14
     380:	beq	398 <test_schema+0x398>
     384:	movw	r0, #0
     388:	movt	r0, #0
     38c:	bl	0 <printf>
     390:	str	r0, [sp, #12]
     394:	b	3f0 <test_schema+0x3f0>
     398:	ldr	r0, [fp, #-40]	; 0xffffffd8
     39c:	bl	1008 <reflection_Type_element>
     3a0:	sxtb	r0, r0
     3a4:	cmp	r0, #15
     3a8:	beq	3c0 <test_schema+0x3c0>
     3ac:	movw	r0, #0
     3b0:	movt	r0, #0
     3b4:	bl	0 <printf>
     3b8:	str	r0, [sp, #8]
     3bc:	b	3f0 <test_schema+0x3f0>
     3c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     3c4:	bl	f28 <reflection_Type_index>
     3c8:	ldr	lr, [fp, #-48]	; 0xffffffd0
     3cc:	cmp	r0, lr
     3d0:	beq	3e8 <test_schema+0x3e8>
     3d4:	movw	r0, #0
     3d8:	movt	r0, #0
     3dc:	bl	0 <printf>
     3e0:	str	r0, [sp, #4]
     3e4:	b	3f0 <test_schema+0x3f0>
     3e8:	movw	r0, #0
     3ec:	str	r0, [fp, #-16]
     3f0:	ldr	r0, [fp, #-8]
     3f4:	movw	r1, #0
     3f8:	cmp	r0, r1
     3fc:	beq	408 <test_schema+0x408>
     400:	ldr	r0, [fp, #-8]
     404:	bl	0 <free>
     408:	ldr	r0, [fp, #-16]
     40c:	mov	sp, fp
     410:	pop	{fp, pc}

00000414 <readfile>:
     414:	push	{fp, lr}
     418:	mov	fp, sp
     41c:	sub	sp, sp, #64	; 0x40
     420:	str	r0, [fp, #-8]
     424:	str	r1, [fp, #-12]
     428:	str	r2, [fp, #-16]
     42c:	ldr	r0, [fp, #-16]
     430:	movw	r1, #0
     434:	cmp	r0, r1
     438:	beq	448 <readfile+0x34>
     43c:	ldr	r0, [fp, #-16]
     440:	str	r0, [sp, #20]
     444:	b	454 <readfile+0x40>
     448:	add	r0, sp, #28
     44c:	str	r0, [sp, #20]
     450:	b	454 <readfile+0x40>
     454:	ldr	r0, [sp, #20]
     458:	str	r0, [fp, #-16]
     45c:	ldr	r0, [fp, #-8]
     460:	movw	r1, #0
     464:	movt	r1, #0
     468:	bl	0 <fopen>
     46c:	str	r0, [fp, #-20]	; 0xffffffec
     470:	movw	r0, #0
     474:	str	r0, [fp, #-24]	; 0xffffffe8
     478:	str	r0, [sp, #24]
     47c:	ldr	r1, [fp, #-20]	; 0xffffffec
     480:	cmp	r1, r0
     484:	bne	48c <readfile+0x78>
     488:	b	5ac <readfile+0x198>
     48c:	ldr	r0, [fp, #-20]	; 0xffffffec
     490:	movw	r1, #0
     494:	movw	r2, #2
     498:	bl	0 <fseek>
     49c:	ldr	r1, [fp, #-20]	; 0xffffffec
     4a0:	str	r0, [sp, #16]
     4a4:	mov	r0, r1
     4a8:	bl	0 <ftell>
     4ac:	str	r0, [fp, #-24]	; 0xffffffe8
     4b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4b4:	ldr	r1, [fp, #-16]
     4b8:	str	r0, [r1]
     4bc:	ldr	r0, [fp, #-12]
     4c0:	cmp	r0, #0
     4c4:	bls	4dc <readfile+0xc8>
     4c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4cc:	ldr	r1, [fp, #-12]
     4d0:	cmp	r0, r1
     4d4:	bls	4dc <readfile+0xc8>
     4d8:	b	5ac <readfile+0x198>
     4dc:	ldr	r0, [fp, #-20]	; 0xffffffec
     4e0:	bl	0 <rewind>
     4e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4e8:	cmp	r0, #0
     4ec:	beq	4fc <readfile+0xe8>
     4f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4f4:	str	r0, [sp, #12]
     4f8:	b	508 <readfile+0xf4>
     4fc:	movw	r0, #1
     500:	str	r0, [sp, #12]
     504:	b	508 <readfile+0xf4>
     508:	ldr	r0, [sp, #12]
     50c:	bl	0 <malloc>
     510:	str	r0, [sp, #24]
     514:	ldr	r0, [sp, #24]
     518:	movw	lr, #0
     51c:	cmp	r0, lr
     520:	bne	528 <readfile+0x114>
     524:	b	5ac <readfile+0x198>
     528:	movw	r0, #0
     52c:	str	r0, [fp, #-28]	; 0xffffffe4
     530:	ldr	r0, [sp, #24]
     534:	ldr	r1, [fp, #-28]	; 0xffffffe4
     538:	add	r0, r0, r1
     53c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     540:	ldr	r2, [fp, #-28]	; 0xffffffe4
     544:	sub	r2, r1, r2
     548:	ldr	r3, [fp, #-20]	; 0xffffffec
     54c:	movw	r1, #1
     550:	bl	0 <fread>
     554:	str	r0, [sp, #32]
     558:	cmp	r0, #0
     55c:	beq	574 <readfile+0x160>
     560:	ldr	r0, [sp, #32]
     564:	ldr	r1, [fp, #-28]	; 0xffffffe4
     568:	add	r0, r1, r0
     56c:	str	r0, [fp, #-28]	; 0xffffffe4
     570:	b	530 <readfile+0x11c>
     574:	ldr	r0, [fp, #-28]	; 0xffffffe4
     578:	ldr	r1, [fp, #-24]	; 0xffffffe8
     57c:	cmp	r0, r1
     580:	beq	588 <readfile+0x174>
     584:	b	5ac <readfile+0x198>
     588:	ldr	r0, [fp, #-20]	; 0xffffffec
     58c:	bl	0 <fclose>
     590:	ldr	lr, [fp, #-24]	; 0xffffffe8
     594:	ldr	r1, [fp, #-16]
     598:	str	lr, [r1]
     59c:	ldr	r1, [sp, #24]
     5a0:	str	r1, [fp, #-4]
     5a4:	str	r0, [sp, #8]
     5a8:	b	5f4 <readfile+0x1e0>
     5ac:	ldr	r0, [fp, #-20]	; 0xffffffec
     5b0:	movw	r1, #0
     5b4:	cmp	r0, r1
     5b8:	beq	5c8 <readfile+0x1b4>
     5bc:	ldr	r0, [fp, #-20]	; 0xffffffec
     5c0:	bl	0 <fclose>
     5c4:	str	r0, [sp, #4]
     5c8:	ldr	r0, [sp, #24]
     5cc:	movw	r1, #0
     5d0:	cmp	r0, r1
     5d4:	beq	5e0 <readfile+0x1cc>
     5d8:	ldr	r0, [sp, #24]
     5dc:	bl	0 <free>
     5e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5e4:	ldr	r1, [fp, #-16]
     5e8:	str	r0, [r1]
     5ec:	movw	r0, #0
     5f0:	str	r0, [fp, #-4]
     5f4:	ldr	r0, [fp, #-4]
     5f8:	mov	sp, fp
     5fc:	pop	{fp, pc}

00000600 <reflection_Schema_as_root>:
     600:	push	{fp, lr}
     604:	mov	fp, sp
     608:	sub	sp, sp, #16
     60c:	str	r0, [fp, #-4]
     610:	movw	r0, #0
     614:	movt	r0, #0
     618:	str	r0, [sp, #8]
     61c:	ldr	r0, [fp, #-4]
     620:	movw	r1, #0
     624:	cmp	r0, r1
     628:	beq	640 <reflection_Schema_as_root+0x40>
     62c:	ldr	r0, [fp, #-4]
     630:	ldr	r1, [sp, #8]
     634:	bl	1184 <flatbuffers_has_identifier>
     638:	cmp	r0, #0
     63c:	bne	64c <reflection_Schema_as_root+0x4c>
     640:	movw	r0, #0
     644:	str	r0, [sp, #4]
     648:	b	66c <reflection_Schema_as_root+0x6c>
     64c:	ldr	r0, [fp, #-4]
     650:	ldr	r1, [fp, #-4]
     654:	str	r0, [sp]
     658:	mov	r0, r1
     65c:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     660:	ldr	r1, [sp]
     664:	add	r0, r1, r0
     668:	str	r0, [sp, #4]
     66c:	ldr	r0, [sp, #4]
     670:	mov	sp, fp
     674:	pop	{fp, pc}

00000678 <reflection_Schema_objects>:
     678:	push	{fp, lr}
     67c:	mov	fp, sp
     680:	sub	sp, sp, #24
     684:	str	r0, [fp, #-4]
     688:	movw	r0, #0
     68c:	strh	r0, [fp, #-10]
     690:	ldr	r0, [fp, #-4]
     694:	movw	r1, #0
     698:	cmp	r0, r1
     69c:	beq	6a8 <reflection_Schema_objects+0x30>
     6a0:	b	6a4 <reflection_Schema_objects+0x2c>
     6a4:	b	6c8 <reflection_Schema_objects+0x50>
     6a8:	movw	r0, #0
     6ac:	movt	r0, #0
     6b0:	movw	r1, #0
     6b4:	movt	r1, #0
     6b8:	movw	r2, #237	; 0xed
     6bc:	movw	r3, #0
     6c0:	movt	r3, #0
     6c4:	bl	0 <__assert_fail>
     6c8:	mov	r0, #0
     6cc:	strh	r0, [sp, #12]
     6d0:	ldr	r0, [fp, #-4]
     6d4:	str	r0, [sp, #4]
     6d8:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
     6dc:	ldr	lr, [sp, #4]
     6e0:	sub	r0, lr, r0
     6e4:	str	r0, [sp, #8]
     6e8:	ldr	r0, [sp, #8]
     6ec:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     6f0:	ldrh	lr, [sp, #12]
     6f4:	add	lr, lr, #3
     6f8:	lsl	lr, lr, #1
     6fc:	cmp	r0, lr
     700:	bcc	71c <reflection_Schema_objects+0xa4>
     704:	ldr	r0, [sp, #8]
     708:	ldrh	r1, [sp, #12]
     70c:	add	r0, r0, r1, lsl #1
     710:	add	r0, r0, #4
     714:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     718:	strh	r0, [fp, #-10]
     71c:	ldrsh	r0, [fp, #-10]
     720:	cmp	r0, #0
     724:	beq	760 <reflection_Schema_objects+0xe8>
     728:	ldr	r0, [fp, #-4]
     72c:	ldrh	r1, [fp, #-10]
     730:	add	r0, r0, r1
     734:	str	r0, [fp, #-8]
     738:	ldr	r0, [fp, #-8]
     73c:	add	r0, r0, #4
     740:	ldr	r1, [fp, #-8]
     744:	str	r0, [sp]
     748:	mov	r0, r1
     74c:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     750:	ldr	r1, [sp]
     754:	add	r0, r1, r0
     758:	mov	sp, fp
     75c:	pop	{fp, pc}
     760:	movw	r0, #0
     764:	movt	r0, #0
     768:	movw	r1, #0
     76c:	movt	r1, #0
     770:	movw	r2, #237	; 0xed
     774:	movw	r3, #0
     778:	movt	r3, #0
     77c:	bl	0 <__assert_fail>

00000780 <reflection_Object_vec_len>:
     780:	push	{fp, lr}
     784:	mov	fp, sp
     788:	sub	sp, sp, #8
     78c:	str	r0, [sp, #4]
     790:	ldr	r0, [sp, #4]
     794:	movw	r1, #0
     798:	cmp	r0, r1
     79c:	beq	7b8 <reflection_Object_vec_len+0x38>
     7a0:	ldr	r0, [sp, #4]
     7a4:	mvn	r1, #3
     7a8:	add	r0, r0, r1
     7ac:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     7b0:	str	r0, [sp]
     7b4:	b	7c4 <reflection_Object_vec_len+0x44>
     7b8:	movw	r0, #0
     7bc:	str	r0, [sp]
     7c0:	b	7c4 <reflection_Object_vec_len+0x44>
     7c4:	ldr	r0, [sp]
     7c8:	mov	sp, fp
     7cc:	pop	{fp, pc}

000007d0 <reflection_Object_name>:
     7d0:	push	{fp, lr}
     7d4:	mov	fp, sp
     7d8:	sub	sp, sp, #24
     7dc:	str	r0, [fp, #-4]
     7e0:	movw	r0, #0
     7e4:	strh	r0, [fp, #-10]
     7e8:	ldr	r0, [fp, #-4]
     7ec:	movw	r1, #0
     7f0:	cmp	r0, r1
     7f4:	beq	800 <reflection_Object_name+0x30>
     7f8:	b	7fc <reflection_Object_name+0x2c>
     7fc:	b	820 <reflection_Object_name+0x50>
     800:	movw	r0, #0
     804:	movt	r0, #0
     808:	movw	r1, #0
     80c:	movt	r1, #0
     810:	movw	r2, #218	; 0xda
     814:	movw	r3, #0
     818:	movt	r3, #0
     81c:	bl	0 <__assert_fail>
     820:	mov	r0, #0
     824:	strh	r0, [sp, #12]
     828:	ldr	r0, [fp, #-4]
     82c:	str	r0, [sp, #4]
     830:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
     834:	ldr	lr, [sp, #4]
     838:	sub	r0, lr, r0
     83c:	str	r0, [sp, #8]
     840:	ldr	r0, [sp, #8]
     844:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     848:	ldrh	lr, [sp, #12]
     84c:	add	lr, lr, #3
     850:	lsl	lr, lr, #1
     854:	cmp	r0, lr
     858:	bcc	874 <reflection_Object_name+0xa4>
     85c:	ldr	r0, [sp, #8]
     860:	ldrh	r1, [sp, #12]
     864:	add	r0, r0, r1, lsl #1
     868:	add	r0, r0, #4
     86c:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     870:	strh	r0, [fp, #-10]
     874:	ldrsh	r0, [fp, #-10]
     878:	cmp	r0, #0
     87c:	beq	8b8 <reflection_Object_name+0xe8>
     880:	ldr	r0, [fp, #-4]
     884:	ldrh	r1, [fp, #-10]
     888:	add	r0, r0, r1
     88c:	str	r0, [fp, #-8]
     890:	ldr	r0, [fp, #-8]
     894:	add	r0, r0, #4
     898:	ldr	r1, [fp, #-8]
     89c:	str	r0, [sp]
     8a0:	mov	r0, r1
     8a4:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     8a8:	ldr	r1, [sp]
     8ac:	add	r0, r1, r0
     8b0:	mov	sp, fp
     8b4:	pop	{fp, pc}
     8b8:	movw	r0, #0
     8bc:	movt	r0, #0
     8c0:	movw	r1, #0
     8c4:	movt	r1, #0
     8c8:	movw	r2, #218	; 0xda
     8cc:	movw	r3, #0
     8d0:	movt	r3, #0
     8d4:	bl	0 <__assert_fail>

000008d8 <reflection_Object_vec_at>:
     8d8:	push	{fp, lr}
     8dc:	mov	fp, sp
     8e0:	sub	sp, sp, #16
     8e4:	str	r0, [fp, #-4]
     8e8:	str	r1, [sp, #8]
     8ec:	ldr	r0, [fp, #-4]
     8f0:	ldr	r1, [sp, #8]
     8f4:	add	r0, r0, r1, lsl #2
     8f8:	str	r0, [sp, #4]
     8fc:	ldr	r0, [fp, #-4]
     900:	bl	1328 <flatbuffers_vec_len>
     904:	ldr	r1, [sp, #8]
     908:	cmp	r0, r1
     90c:	bls	918 <reflection_Object_vec_at+0x40>
     910:	b	914 <reflection_Object_vec_at+0x3c>
     914:	b	938 <reflection_Object_vec_at+0x60>
     918:	movw	r0, #0
     91c:	movt	r0, #0
     920:	movw	r1, #0
     924:	movt	r1, #0
     928:	movw	r2, #215	; 0xd7
     92c:	movw	r3, #0
     930:	movt	r3, #0
     934:	bl	0 <__assert_fail>
     938:	ldr	r0, [sp, #4]
     93c:	ldr	r1, [sp, #4]
     940:	str	r0, [sp]
     944:	mov	r0, r1
     948:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     94c:	ldr	r1, [sp]
     950:	add	r0, r1, r0
     954:	mov	sp, fp
     958:	pop	{fp, pc}

0000095c <reflection_Object_vec_find>:
     95c:	push	{fp, lr}
     960:	mov	fp, sp
     964:	sub	sp, sp, #8
     968:	str	r0, [sp, #4]
     96c:	str	r1, [sp]
     970:	ldr	r0, [sp, #4]
     974:	ldr	r1, [sp]
     978:	bl	1378 <reflection_Object_vec_find_by_name>
     97c:	mov	sp, fp
     980:	pop	{fp, pc}

00000984 <reflection_Object_fields>:
     984:	push	{fp, lr}
     988:	mov	fp, sp
     98c:	sub	sp, sp, #24
     990:	str	r0, [fp, #-4]
     994:	movw	r0, #0
     998:	strh	r0, [fp, #-10]
     99c:	ldr	r0, [fp, #-4]
     9a0:	movw	r1, #0
     9a4:	cmp	r0, r1
     9a8:	beq	9b4 <reflection_Object_fields+0x30>
     9ac:	b	9b0 <reflection_Object_fields+0x2c>
     9b0:	b	9d4 <reflection_Object_fields+0x50>
     9b4:	movw	r0, #0
     9b8:	movt	r0, #0
     9bc:	movw	r1, #0
     9c0:	movt	r1, #0
     9c4:	movw	r2, #224	; 0xe0
     9c8:	movw	r3, #0
     9cc:	movt	r3, #0
     9d0:	bl	0 <__assert_fail>
     9d4:	mov	r0, #1
     9d8:	strh	r0, [sp, #12]
     9dc:	ldr	r0, [fp, #-4]
     9e0:	str	r0, [sp, #4]
     9e4:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
     9e8:	ldr	lr, [sp, #4]
     9ec:	sub	r0, lr, r0
     9f0:	str	r0, [sp, #8]
     9f4:	ldr	r0, [sp, #8]
     9f8:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     9fc:	ldrh	lr, [sp, #12]
     a00:	add	lr, lr, #3
     a04:	lsl	lr, lr, #1
     a08:	cmp	r0, lr
     a0c:	bcc	a28 <reflection_Object_fields+0xa4>
     a10:	ldr	r0, [sp, #8]
     a14:	ldrh	r1, [sp, #12]
     a18:	add	r0, r0, r1, lsl #1
     a1c:	add	r0, r0, #4
     a20:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     a24:	strh	r0, [fp, #-10]
     a28:	ldrsh	r0, [fp, #-10]
     a2c:	cmp	r0, #0
     a30:	beq	a6c <reflection_Object_fields+0xe8>
     a34:	ldr	r0, [fp, #-4]
     a38:	ldrh	r1, [fp, #-10]
     a3c:	add	r0, r0, r1
     a40:	str	r0, [fp, #-8]
     a44:	ldr	r0, [fp, #-8]
     a48:	add	r0, r0, #4
     a4c:	ldr	r1, [fp, #-8]
     a50:	str	r0, [sp]
     a54:	mov	r0, r1
     a58:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     a5c:	ldr	r1, [sp]
     a60:	add	r0, r1, r0
     a64:	mov	sp, fp
     a68:	pop	{fp, pc}
     a6c:	movw	r0, #0
     a70:	movt	r0, #0
     a74:	movw	r1, #0
     a78:	movt	r1, #0
     a7c:	movw	r2, #224	; 0xe0
     a80:	movw	r3, #0
     a84:	movt	r3, #0
     a88:	bl	0 <__assert_fail>

00000a8c <reflection_Field_vec_find>:
     a8c:	push	{fp, lr}
     a90:	mov	fp, sp
     a94:	sub	sp, sp, #8
     a98:	str	r0, [sp, #4]
     a9c:	str	r1, [sp]
     aa0:	ldr	r0, [sp, #4]
     aa4:	ldr	r1, [sp]
     aa8:	bl	14d4 <reflection_Field_vec_find_by_name>
     aac:	mov	sp, fp
     ab0:	pop	{fp, pc}

00000ab4 <reflection_Field_vec_at>:
     ab4:	push	{fp, lr}
     ab8:	mov	fp, sp
     abc:	sub	sp, sp, #16
     ac0:	str	r0, [fp, #-4]
     ac4:	str	r1, [sp, #8]
     ac8:	ldr	r0, [fp, #-4]
     acc:	ldr	r1, [sp, #8]
     ad0:	add	r0, r0, r1, lsl #2
     ad4:	str	r0, [sp, #4]
     ad8:	ldr	r0, [fp, #-4]
     adc:	bl	1328 <flatbuffers_vec_len>
     ae0:	ldr	r1, [sp, #8]
     ae4:	cmp	r0, r1
     ae8:	bls	af4 <reflection_Field_vec_at+0x40>
     aec:	b	af0 <reflection_Field_vec_at+0x3c>
     af0:	b	b14 <reflection_Field_vec_at+0x60>
     af4:	movw	r0, #0
     af8:	movt	r0, #0
     afc:	movw	r1, #0
     b00:	movt	r1, #0
     b04:	movw	r2, #192	; 0xc0
     b08:	movw	r3, #0
     b0c:	movt	r3, #0
     b10:	bl	0 <__assert_fail>
     b14:	ldr	r0, [sp, #4]
     b18:	ldr	r1, [sp, #4]
     b1c:	str	r0, [sp]
     b20:	mov	r0, r1
     b24:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     b28:	ldr	r1, [sp]
     b2c:	add	r0, r1, r0
     b30:	mov	sp, fp
     b34:	pop	{fp, pc}

00000b38 <reflection_Field_default_integer>:
     b38:	push	{fp, lr}
     b3c:	mov	fp, sp
     b40:	sub	sp, sp, #32
     b44:	str	r0, [fp, #-4]
     b48:	movw	r0, #0
     b4c:	strh	r0, [fp, #-6]
     b50:	ldr	r0, [fp, #-4]
     b54:	movw	r1, #0
     b58:	cmp	r0, r1
     b5c:	beq	b68 <reflection_Field_default_integer+0x30>
     b60:	b	b64 <reflection_Field_default_integer+0x2c>
     b64:	b	b88 <reflection_Field_default_integer+0x50>
     b68:	movw	r0, #0
     b6c:	movt	r0, #0
     b70:	movw	r1, #0
     b74:	movt	r1, #0
     b78:	movw	r2, #204	; 0xcc
     b7c:	movw	r3, #0
     b80:	movt	r3, #0
     b84:	bl	0 <__assert_fail>
     b88:	mov	r0, #4
     b8c:	strh	r0, [fp, #-8]
     b90:	ldr	r0, [fp, #-4]
     b94:	str	r0, [sp, #16]
     b98:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
     b9c:	ldr	lr, [sp, #16]
     ba0:	sub	r0, lr, r0
     ba4:	str	r0, [fp, #-12]
     ba8:	ldr	r0, [fp, #-12]
     bac:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     bb0:	ldrh	lr, [fp, #-8]
     bb4:	add	lr, lr, #3
     bb8:	lsl	lr, lr, #1
     bbc:	cmp	r0, lr
     bc0:	bcc	bdc <reflection_Field_default_integer+0xa4>
     bc4:	ldr	r0, [fp, #-12]
     bc8:	ldrh	r1, [fp, #-8]
     bcc:	add	r0, r0, r1, lsl #1
     bd0:	add	r0, r0, #4
     bd4:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     bd8:	strh	r0, [fp, #-6]
     bdc:	ldrh	r0, [fp, #-6]
     be0:	cmp	r0, #0
     be4:	beq	c04 <reflection_Field_default_integer+0xcc>
     be8:	ldr	r0, [fp, #-4]
     bec:	ldrh	r1, [fp, #-6]
     bf0:	add	r0, r0, r1
     bf4:	bl	1654 <flatbuffers_int64_read_from_pe>
     bf8:	str	r0, [sp, #12]
     bfc:	str	r1, [sp, #8]
     c00:	b	c18 <reflection_Field_default_integer+0xe0>
     c04:	mov	r0, #0
     c08:	mov	r1, r0
     c0c:	str	r1, [sp, #12]
     c10:	str	r0, [sp, #8]
     c14:	b	c18 <reflection_Field_default_integer+0xe0>
     c18:	ldr	r0, [sp, #8]
     c1c:	ldr	r1, [sp, #12]
     c20:	str	r0, [sp, #4]
     c24:	mov	r0, r1
     c28:	ldr	r1, [sp, #4]
     c2c:	mov	sp, fp
     c30:	pop	{fp, pc}

00000c34 <reflection_Field_name>:
     c34:	push	{fp, lr}
     c38:	mov	fp, sp
     c3c:	sub	sp, sp, #24
     c40:	str	r0, [fp, #-4]
     c44:	movw	r0, #0
     c48:	strh	r0, [fp, #-10]
     c4c:	ldr	r0, [fp, #-4]
     c50:	movw	r1, #0
     c54:	cmp	r0, r1
     c58:	beq	c64 <reflection_Field_name+0x30>
     c5c:	b	c60 <reflection_Field_name+0x2c>
     c60:	b	c84 <reflection_Field_name+0x50>
     c64:	movw	r0, #0
     c68:	movt	r0, #0
     c6c:	movw	r1, #0
     c70:	movt	r1, #0
     c74:	movw	r2, #195	; 0xc3
     c78:	movw	r3, #0
     c7c:	movt	r3, #0
     c80:	bl	0 <__assert_fail>
     c84:	mov	r0, #0
     c88:	strh	r0, [sp, #12]
     c8c:	ldr	r0, [fp, #-4]
     c90:	str	r0, [sp, #4]
     c94:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
     c98:	ldr	lr, [sp, #4]
     c9c:	sub	r0, lr, r0
     ca0:	str	r0, [sp, #8]
     ca4:	ldr	r0, [sp, #8]
     ca8:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     cac:	ldrh	lr, [sp, #12]
     cb0:	add	lr, lr, #3
     cb4:	lsl	lr, lr, #1
     cb8:	cmp	r0, lr
     cbc:	bcc	cd8 <reflection_Field_name+0xa4>
     cc0:	ldr	r0, [sp, #8]
     cc4:	ldrh	r1, [sp, #12]
     cc8:	add	r0, r0, r1, lsl #1
     ccc:	add	r0, r0, #4
     cd0:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     cd4:	strh	r0, [fp, #-10]
     cd8:	ldrsh	r0, [fp, #-10]
     cdc:	cmp	r0, #0
     ce0:	beq	d1c <reflection_Field_name+0xe8>
     ce4:	ldr	r0, [fp, #-4]
     ce8:	ldrh	r1, [fp, #-10]
     cec:	add	r0, r0, r1
     cf0:	str	r0, [fp, #-8]
     cf4:	ldr	r0, [fp, #-8]
     cf8:	add	r0, r0, #4
     cfc:	ldr	r1, [fp, #-8]
     d00:	str	r0, [sp]
     d04:	mov	r0, r1
     d08:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     d0c:	ldr	r1, [sp]
     d10:	add	r0, r1, r0
     d14:	mov	sp, fp
     d18:	pop	{fp, pc}
     d1c:	movw	r0, #0
     d20:	movt	r0, #0
     d24:	movw	r1, #0
     d28:	movt	r1, #0
     d2c:	movw	r2, #195	; 0xc3
     d30:	movw	r3, #0
     d34:	movt	r3, #0
     d38:	bl	0 <__assert_fail>

00000d3c <reflection_Field_type>:
     d3c:	push	{fp, lr}
     d40:	mov	fp, sp
     d44:	sub	sp, sp, #24
     d48:	str	r0, [fp, #-4]
     d4c:	movw	r0, #0
     d50:	strh	r0, [fp, #-10]
     d54:	ldr	r0, [fp, #-4]
     d58:	movw	r1, #0
     d5c:	cmp	r0, r1
     d60:	beq	d6c <reflection_Field_type+0x30>
     d64:	b	d68 <reflection_Field_type+0x2c>
     d68:	b	d8c <reflection_Field_type+0x50>
     d6c:	movw	r0, #0
     d70:	movt	r0, #0
     d74:	movw	r1, #0
     d78:	movt	r1, #0
     d7c:	movw	r2, #201	; 0xc9
     d80:	movw	r3, #0
     d84:	movt	r3, #0
     d88:	bl	0 <__assert_fail>
     d8c:	mov	r0, #1
     d90:	strh	r0, [sp, #12]
     d94:	ldr	r0, [fp, #-4]
     d98:	str	r0, [sp, #4]
     d9c:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
     da0:	ldr	lr, [sp, #4]
     da4:	sub	r0, lr, r0
     da8:	str	r0, [sp, #8]
     dac:	ldr	r0, [sp, #8]
     db0:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     db4:	ldrh	lr, [sp, #12]
     db8:	add	lr, lr, #3
     dbc:	lsl	lr, lr, #1
     dc0:	cmp	r0, lr
     dc4:	bcc	de0 <reflection_Field_type+0xa4>
     dc8:	ldr	r0, [sp, #8]
     dcc:	ldrh	r1, [sp, #12]
     dd0:	add	r0, r0, r1, lsl #1
     dd4:	add	r0, r0, #4
     dd8:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     ddc:	strh	r0, [fp, #-10]
     de0:	ldrsh	r0, [fp, #-10]
     de4:	cmp	r0, #0
     de8:	beq	e20 <reflection_Field_type+0xe4>
     dec:	ldr	r0, [fp, #-4]
     df0:	ldrh	r1, [fp, #-10]
     df4:	add	r0, r0, r1
     df8:	str	r0, [fp, #-8]
     dfc:	ldr	r0, [fp, #-8]
     e00:	ldr	r1, [fp, #-8]
     e04:	str	r0, [sp]
     e08:	mov	r0, r1
     e0c:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
     e10:	ldr	r1, [sp]
     e14:	add	r0, r1, r0
     e18:	mov	sp, fp
     e1c:	pop	{fp, pc}
     e20:	movw	r0, #0
     e24:	movt	r0, #0
     e28:	movw	r1, #0
     e2c:	movt	r1, #0
     e30:	movw	r2, #201	; 0xc9
     e34:	movw	r3, #0
     e38:	movt	r3, #0
     e3c:	bl	0 <__assert_fail>

00000e40 <reflection_Type_base_type>:
     e40:	push	{fp, lr}
     e44:	mov	fp, sp
     e48:	sub	sp, sp, #24
     e4c:	str	r0, [fp, #-4]
     e50:	movw	r0, #0
     e54:	strh	r0, [fp, #-6]
     e58:	ldr	r0, [fp, #-4]
     e5c:	movw	r1, #0
     e60:	cmp	r0, r1
     e64:	beq	e70 <reflection_Type_base_type+0x30>
     e68:	b	e6c <reflection_Type_base_type+0x2c>
     e6c:	b	e90 <reflection_Type_base_type+0x50>
     e70:	movw	r0, #0
     e74:	movt	r0, #0
     e78:	movw	r1, #0
     e7c:	movt	r1, #0
     e80:	movw	r2, #147	; 0x93
     e84:	movw	r3, #0
     e88:	movt	r3, #0
     e8c:	bl	0 <__assert_fail>
     e90:	mov	r0, #0
     e94:	strh	r0, [fp, #-8]
     e98:	ldr	r0, [fp, #-4]
     e9c:	str	r0, [sp, #8]
     ea0:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
     ea4:	ldr	lr, [sp, #8]
     ea8:	sub	r0, lr, r0
     eac:	str	r0, [sp, #12]
     eb0:	ldr	r0, [sp, #12]
     eb4:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     eb8:	ldrh	lr, [fp, #-8]
     ebc:	add	lr, lr, #3
     ec0:	lsl	lr, lr, #1
     ec4:	cmp	r0, lr
     ec8:	bcc	ee4 <reflection_Type_base_type+0xa4>
     ecc:	ldr	r0, [sp, #12]
     ed0:	ldrh	r1, [fp, #-8]
     ed4:	add	r0, r0, r1, lsl #1
     ed8:	add	r0, r0, #4
     edc:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     ee0:	strh	r0, [fp, #-6]
     ee4:	ldrh	r0, [fp, #-6]
     ee8:	cmp	r0, #0
     eec:	beq	f0c <reflection_Type_base_type+0xcc>
     ef0:	ldr	r0, [fp, #-4]
     ef4:	ldrh	r1, [fp, #-6]
     ef8:	add	r0, r0, r1
     efc:	bl	16a4 <reflection_BaseType_read_from_pe>
     f00:	sxtb	r0, r0
     f04:	str	r0, [sp, #4]
     f08:	b	f18 <reflection_Type_base_type+0xd8>
     f0c:	movw	r0, #0
     f10:	str	r0, [sp, #4]
     f14:	b	f18 <reflection_Type_base_type+0xd8>
     f18:	ldr	r0, [sp, #4]
     f1c:	sxtb	r0, r0
     f20:	mov	sp, fp
     f24:	pop	{fp, pc}

00000f28 <reflection_Type_index>:
     f28:	push	{fp, lr}
     f2c:	mov	fp, sp
     f30:	sub	sp, sp, #24
     f34:	str	r0, [fp, #-4]
     f38:	movw	r0, #0
     f3c:	strh	r0, [fp, #-6]
     f40:	ldr	r0, [fp, #-4]
     f44:	movw	r1, #0
     f48:	cmp	r0, r1
     f4c:	beq	f58 <reflection_Type_index+0x30>
     f50:	b	f54 <reflection_Type_index+0x2c>
     f54:	b	f78 <reflection_Type_index+0x50>
     f58:	movw	r0, #0
     f5c:	movt	r0, #0
     f60:	movw	r1, #0
     f64:	movt	r1, #0
     f68:	movw	r2, #149	; 0x95
     f6c:	movw	r3, #0
     f70:	movt	r3, #0
     f74:	bl	0 <__assert_fail>
     f78:	mov	r0, #2
     f7c:	strh	r0, [fp, #-8]
     f80:	ldr	r0, [fp, #-4]
     f84:	str	r0, [sp, #8]
     f88:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
     f8c:	ldr	lr, [sp, #8]
     f90:	sub	r0, lr, r0
     f94:	str	r0, [sp, #12]
     f98:	ldr	r0, [sp, #12]
     f9c:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     fa0:	ldrh	lr, [fp, #-8]
     fa4:	add	lr, lr, #3
     fa8:	lsl	lr, lr, #1
     fac:	cmp	r0, lr
     fb0:	bcc	fcc <reflection_Type_index+0xa4>
     fb4:	ldr	r0, [sp, #12]
     fb8:	ldrh	r1, [fp, #-8]
     fbc:	add	r0, r0, r1, lsl #1
     fc0:	add	r0, r0, #4
     fc4:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
     fc8:	strh	r0, [fp, #-6]
     fcc:	ldrh	r0, [fp, #-6]
     fd0:	cmp	r0, #0
     fd4:	beq	ff0 <reflection_Type_index+0xc8>
     fd8:	ldr	r0, [fp, #-4]
     fdc:	ldrh	r1, [fp, #-6]
     fe0:	add	r0, r0, r1
     fe4:	bl	16e0 <flatbuffers_int32_read_from_pe>
     fe8:	str	r0, [sp, #4]
     fec:	b	ffc <reflection_Type_index+0xd4>
     ff0:	mvn	r0, #0
     ff4:	str	r0, [sp, #4]
     ff8:	b	ffc <reflection_Type_index+0xd4>
     ffc:	ldr	r0, [sp, #4]
    1000:	mov	sp, fp
    1004:	pop	{fp, pc}

00001008 <reflection_Type_element>:
    1008:	push	{fp, lr}
    100c:	mov	fp, sp
    1010:	sub	sp, sp, #24
    1014:	str	r0, [fp, #-4]
    1018:	movw	r0, #0
    101c:	strh	r0, [fp, #-6]
    1020:	ldr	r0, [fp, #-4]
    1024:	movw	r1, #0
    1028:	cmp	r0, r1
    102c:	beq	1038 <reflection_Type_element+0x30>
    1030:	b	1034 <reflection_Type_element+0x2c>
    1034:	b	1058 <reflection_Type_element+0x50>
    1038:	movw	r0, #0
    103c:	movt	r0, #0
    1040:	movw	r1, #0
    1044:	movt	r1, #0
    1048:	movw	r2, #148	; 0x94
    104c:	movw	r3, #0
    1050:	movt	r3, #0
    1054:	bl	0 <__assert_fail>
    1058:	mov	r0, #1
    105c:	strh	r0, [fp, #-8]
    1060:	ldr	r0, [fp, #-4]
    1064:	str	r0, [sp, #8]
    1068:	bl	12b4 <__flatbuffers_soffset_read_from_pe>
    106c:	ldr	lr, [sp, #8]
    1070:	sub	r0, lr, r0
    1074:	str	r0, [sp, #12]
    1078:	ldr	r0, [sp, #12]
    107c:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
    1080:	ldrh	lr, [fp, #-8]
    1084:	add	lr, lr, #3
    1088:	lsl	lr, lr, #1
    108c:	cmp	r0, lr
    1090:	bcc	10ac <reflection_Type_element+0xa4>
    1094:	ldr	r0, [sp, #12]
    1098:	ldrh	r1, [fp, #-8]
    109c:	add	r0, r0, r1, lsl #1
    10a0:	add	r0, r0, #4
    10a4:	bl	12d8 <__flatbuffers_voffset_read_from_pe>
    10a8:	strh	r0, [fp, #-6]
    10ac:	ldrh	r0, [fp, #-6]
    10b0:	cmp	r0, #0
    10b4:	beq	10d4 <reflection_Type_element+0xcc>
    10b8:	ldr	r0, [fp, #-4]
    10bc:	ldrh	r1, [fp, #-6]
    10c0:	add	r0, r0, r1
    10c4:	bl	16a4 <reflection_BaseType_read_from_pe>
    10c8:	sxtb	r0, r0
    10cc:	str	r0, [sp, #4]
    10d0:	b	10e0 <reflection_Type_element+0xd8>
    10d4:	movw	r0, #0
    10d8:	str	r0, [sp, #4]
    10dc:	b	10e0 <reflection_Type_element+0xd8>
    10e0:	ldr	r0, [sp, #4]
    10e4:	sxtb	r0, r0
    10e8:	mov	sp, fp
    10ec:	pop	{fp, pc}

000010f0 <main>:
    10f0:	push	{fp, lr}
    10f4:	mov	fp, sp
    10f8:	sub	sp, sp, #16
    10fc:	movw	r2, #0
    1100:	str	r2, [fp, #-4]
    1104:	str	r0, [sp, #8]
    1108:	str	r1, [sp, #4]
    110c:	ldr	r0, [sp, #8]
    1110:	cmp	r0, #1
    1114:	beq	114c <main+0x5c>
    1118:	ldr	r0, [sp, #8]
    111c:	cmp	r0, #2
    1120:	beq	114c <main+0x5c>
    1124:	movw	r0, #0
    1128:	movt	r0, #0
    112c:	ldr	r0, [r0]
    1130:	movw	r1, #0
    1134:	movt	r1, #0
    1138:	bl	0 <fprintf>
    113c:	movw	r1, #1
    1140:	str	r0, [sp]
    1144:	mov	r0, r1
    1148:	bl	0 <exit>
    114c:	ldr	r0, [sp, #8]
    1150:	cmp	r0, #2
    1154:	bne	116c <main+0x7c>
    1158:	ldr	r0, [sp, #4]
    115c:	ldr	r0, [r0, #4]
    1160:	movw	r1, #0
    1164:	movt	r1, #0
    1168:	str	r0, [r1]
    116c:	movw	r0, #0
    1170:	movt	r0, #0
    1174:	ldr	r0, [r0]
    1178:	bl	0 <test_schema>
    117c:	mov	sp, fp
    1180:	pop	{fp, pc}

00001184 <flatbuffers_has_identifier>:
    1184:	push	{fp, lr}
    1188:	mov	fp, sp
    118c:	sub	sp, sp, #32
    1190:	str	r0, [fp, #-8]
    1194:	str	r1, [fp, #-12]
    1198:	movw	r0, #0
    119c:	str	r0, [sp, #12]
    11a0:	ldr	r1, [fp, #-12]
    11a4:	cmp	r1, r0
    11a8:	bne	11b8 <flatbuffers_has_identifier+0x34>
    11ac:	movw	r0, #1
    11b0:	str	r0, [fp, #-4]
    11b4:	b	1224 <flatbuffers_has_identifier+0xa0>
    11b8:	add	r0, sp, #12
    11bc:	ldr	r1, [fp, #-12]
    11c0:	movw	r2, #4
    11c4:	bl	0 <strncpy>
    11c8:	ldr	r1, [sp, #12]
    11cc:	str	r0, [sp, #8]
    11d0:	mov	r0, r1
    11d4:	bl	1254 <__flatbuffers_thash_cast_from_le>
    11d8:	str	r0, [sp, #12]
    11dc:	ldr	r0, [fp, #-8]
    11e0:	add	r0, r0, #4
    11e4:	bl	1268 <__flatbuffers_thash_read_from_pe>
    11e8:	str	r0, [sp, #16]
    11ec:	ldr	r0, [sp, #12]
    11f0:	cmp	r0, #0
    11f4:	movw	r0, #1
    11f8:	str	r0, [sp, #4]
    11fc:	beq	1218 <flatbuffers_has_identifier+0x94>
    1200:	ldr	r0, [sp, #16]
    1204:	ldr	r1, [sp, #12]
    1208:	cmp	r0, r1
    120c:	movw	r0, #0
    1210:	moveq	r0, #1
    1214:	str	r0, [sp, #4]
    1218:	ldr	r0, [sp, #4]
    121c:	and	r0, r0, #1
    1220:	str	r0, [fp, #-4]
    1224:	ldr	r0, [fp, #-4]
    1228:	mov	sp, fp
    122c:	pop	{fp, pc}

00001230 <__flatbuffers_uoffset_read_from_pe>:
    1230:	push	{fp, lr}
    1234:	mov	fp, sp
    1238:	sub	sp, sp, #8
    123c:	str	r0, [sp, #4]
    1240:	ldr	r0, [sp, #4]
    1244:	ldr	r0, [r0]
    1248:	bl	12a0 <__flatbuffers_uoffset_cast_from_pe>
    124c:	mov	sp, fp
    1250:	pop	{fp, pc}

00001254 <__flatbuffers_thash_cast_from_le>:
    1254:	sub	sp, sp, #4
    1258:	str	r0, [sp]
    125c:	ldr	r0, [sp]
    1260:	add	sp, sp, #4
    1264:	bx	lr

00001268 <__flatbuffers_thash_read_from_pe>:
    1268:	push	{fp, lr}
    126c:	mov	fp, sp
    1270:	sub	sp, sp, #8
    1274:	str	r0, [sp, #4]
    1278:	ldr	r0, [sp, #4]
    127c:	ldr	r0, [r0]
    1280:	bl	128c <__flatbuffers_thash_cast_from_pe>
    1284:	mov	sp, fp
    1288:	pop	{fp, pc}

0000128c <__flatbuffers_thash_cast_from_pe>:
    128c:	sub	sp, sp, #4
    1290:	str	r0, [sp]
    1294:	ldr	r0, [sp]
    1298:	add	sp, sp, #4
    129c:	bx	lr

000012a0 <__flatbuffers_uoffset_cast_from_pe>:
    12a0:	sub	sp, sp, #4
    12a4:	str	r0, [sp]
    12a8:	ldr	r0, [sp]
    12ac:	add	sp, sp, #4
    12b0:	bx	lr

000012b4 <__flatbuffers_soffset_read_from_pe>:
    12b4:	push	{fp, lr}
    12b8:	mov	fp, sp
    12bc:	sub	sp, sp, #8
    12c0:	str	r0, [sp, #4]
    12c4:	ldr	r0, [sp, #4]
    12c8:	ldr	r0, [r0]
    12cc:	bl	1300 <__flatbuffers_soffset_cast_from_pe>
    12d0:	mov	sp, fp
    12d4:	pop	{fp, pc}

000012d8 <__flatbuffers_voffset_read_from_pe>:
    12d8:	push	{fp, lr}
    12dc:	mov	fp, sp
    12e0:	sub	sp, sp, #8
    12e4:	str	r0, [sp, #4]
    12e8:	ldr	r0, [sp, #4]
    12ec:	ldrh	r0, [r0]
    12f0:	bl	1314 <__flatbuffers_voffset_cast_from_pe>
    12f4:	uxth	r0, r0
    12f8:	mov	sp, fp
    12fc:	pop	{fp, pc}

00001300 <__flatbuffers_soffset_cast_from_pe>:
    1300:	sub	sp, sp, #4
    1304:	str	r0, [sp]
    1308:	ldr	r0, [sp]
    130c:	add	sp, sp, #4
    1310:	bx	lr

00001314 <__flatbuffers_voffset_cast_from_pe>:
    1314:	sub	sp, sp, #4
    1318:	strh	r0, [sp, #2]
    131c:	ldrh	r0, [sp, #2]
    1320:	add	sp, sp, #4
    1324:	bx	lr

00001328 <flatbuffers_vec_len>:
    1328:	push	{fp, lr}
    132c:	mov	fp, sp
    1330:	sub	sp, sp, #8
    1334:	str	r0, [sp, #4]
    1338:	ldr	r0, [sp, #4]
    133c:	movw	r1, #0
    1340:	cmp	r0, r1
    1344:	beq	1360 <flatbuffers_vec_len+0x38>
    1348:	ldr	r0, [sp, #4]
    134c:	mvn	r1, #3
    1350:	add	r0, r0, r1
    1354:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
    1358:	str	r0, [sp]
    135c:	b	136c <flatbuffers_vec_len+0x44>
    1360:	movw	r0, #0
    1364:	str	r0, [sp]
    1368:	b	136c <flatbuffers_vec_len+0x44>
    136c:	ldr	r0, [sp]
    1370:	mov	sp, fp
    1374:	pop	{fp, pc}

00001378 <reflection_Object_vec_find_by_name>:
    1378:	push	{fp, lr}
    137c:	mov	fp, sp
    1380:	sub	sp, sp, #32
    1384:	str	r0, [fp, #-8]
    1388:	str	r1, [fp, #-12]
    138c:	movw	r0, #0
    1390:	str	r0, [sp, #12]
    1394:	ldr	r0, [fp, #-8]
    1398:	bl	780 <reflection_Object_vec_len>
    139c:	str	r0, [sp, #8]
    13a0:	cmp	r0, #0
    13a4:	bne	13bc <reflection_Object_vec_find_by_name+0x44>
    13a8:	movw	r0, #0
    13ac:	movt	r0, #0
    13b0:	ldr	r0, [r0]
    13b4:	str	r0, [fp, #-4]
    13b8:	b	149c <reflection_Object_vec_find_by_name+0x124>
    13bc:	ldr	r0, [sp, #8]
    13c0:	mvn	r1, #0
    13c4:	add	r0, r0, r1
    13c8:	str	r0, [sp, #8]
    13cc:	ldr	r0, [sp, #12]
    13d0:	ldr	r1, [sp, #8]
    13d4:	cmp	r0, r1
    13d8:	bcs	1440 <reflection_Object_vec_find_by_name+0xc8>
    13dc:	ldr	r0, [sp, #12]
    13e0:	ldr	r1, [sp, #8]
    13e4:	ldr	r2, [sp, #12]
    13e8:	sub	r1, r1, r2
    13ec:	lsr	r1, r1, #1
    13f0:	add	r0, r0, r1
    13f4:	str	r0, [sp, #4]
    13f8:	ldr	r0, [fp, #-8]
    13fc:	ldr	r1, [sp, #4]
    1400:	bl	8d8 <reflection_Object_vec_at>
    1404:	bl	7d0 <reflection_Object_name>
    1408:	str	r0, [sp, #16]
    140c:	ldr	r0, [sp, #16]
    1410:	ldr	r1, [fp, #-12]
    1414:	movw	r2, #0
    1418:	bl	14a8 <__flatbuffers_string_cmp>
    141c:	cmp	r0, #0
    1420:	bge	1434 <reflection_Object_vec_find_by_name+0xbc>
    1424:	ldr	r0, [sp, #4]
    1428:	add	r0, r0, #1
    142c:	str	r0, [sp, #12]
    1430:	b	143c <reflection_Object_vec_find_by_name+0xc4>
    1434:	ldr	r0, [sp, #4]
    1438:	str	r0, [sp, #8]
    143c:	b	13cc <reflection_Object_vec_find_by_name+0x54>
    1440:	ldr	r0, [sp, #12]
    1444:	ldr	r1, [sp, #8]
    1448:	cmp	r0, r1
    144c:	bne	148c <reflection_Object_vec_find_by_name+0x114>
    1450:	ldr	r0, [fp, #-8]
    1454:	ldr	r1, [sp, #12]
    1458:	bl	8d8 <reflection_Object_vec_at>
    145c:	bl	7d0 <reflection_Object_name>
    1460:	str	r0, [sp, #16]
    1464:	ldr	r0, [sp, #16]
    1468:	ldr	r1, [fp, #-12]
    146c:	movw	r2, #0
    1470:	bl	14a8 <__flatbuffers_string_cmp>
    1474:	cmp	r0, #0
    1478:	bne	1488 <reflection_Object_vec_find_by_name+0x110>
    147c:	ldr	r0, [sp, #12]
    1480:	str	r0, [fp, #-4]
    1484:	b	149c <reflection_Object_vec_find_by_name+0x124>
    1488:	b	148c <reflection_Object_vec_find_by_name+0x114>
    148c:	movw	r0, #0
    1490:	movt	r0, #0
    1494:	ldr	r0, [r0]
    1498:	str	r0, [fp, #-4]
    149c:	ldr	r0, [fp, #-4]
    14a0:	mov	sp, fp
    14a4:	pop	{fp, pc}

000014a8 <__flatbuffers_string_cmp>:
    14a8:	push	{fp, lr}
    14ac:	mov	fp, sp
    14b0:	sub	sp, sp, #16
    14b4:	str	r0, [fp, #-4]
    14b8:	str	r1, [sp, #8]
    14bc:	str	r2, [sp, #4]
    14c0:	ldr	r0, [fp, #-4]
    14c4:	ldr	r1, [sp, #8]
    14c8:	bl	0 <strcmp>
    14cc:	mov	sp, fp
    14d0:	pop	{fp, pc}

000014d4 <reflection_Field_vec_find_by_name>:
    14d4:	push	{fp, lr}
    14d8:	mov	fp, sp
    14dc:	sub	sp, sp, #32
    14e0:	str	r0, [fp, #-8]
    14e4:	str	r1, [fp, #-12]
    14e8:	movw	r0, #0
    14ec:	str	r0, [sp, #12]
    14f0:	ldr	r0, [fp, #-8]
    14f4:	bl	1604 <reflection_Field_vec_len>
    14f8:	str	r0, [sp, #8]
    14fc:	cmp	r0, #0
    1500:	bne	1518 <reflection_Field_vec_find_by_name+0x44>
    1504:	movw	r0, #0
    1508:	movt	r0, #0
    150c:	ldr	r0, [r0]
    1510:	str	r0, [fp, #-4]
    1514:	b	15f8 <reflection_Field_vec_find_by_name+0x124>
    1518:	ldr	r0, [sp, #8]
    151c:	mvn	r1, #0
    1520:	add	r0, r0, r1
    1524:	str	r0, [sp, #8]
    1528:	ldr	r0, [sp, #12]
    152c:	ldr	r1, [sp, #8]
    1530:	cmp	r0, r1
    1534:	bcs	159c <reflection_Field_vec_find_by_name+0xc8>
    1538:	ldr	r0, [sp, #12]
    153c:	ldr	r1, [sp, #8]
    1540:	ldr	r2, [sp, #12]
    1544:	sub	r1, r1, r2
    1548:	lsr	r1, r1, #1
    154c:	add	r0, r0, r1
    1550:	str	r0, [sp, #4]
    1554:	ldr	r0, [fp, #-8]
    1558:	ldr	r1, [sp, #4]
    155c:	bl	ab4 <reflection_Field_vec_at>
    1560:	bl	c34 <reflection_Field_name>
    1564:	str	r0, [sp, #16]
    1568:	ldr	r0, [sp, #16]
    156c:	ldr	r1, [fp, #-12]
    1570:	movw	r2, #0
    1574:	bl	14a8 <__flatbuffers_string_cmp>
    1578:	cmp	r0, #0
    157c:	bge	1590 <reflection_Field_vec_find_by_name+0xbc>
    1580:	ldr	r0, [sp, #4]
    1584:	add	r0, r0, #1
    1588:	str	r0, [sp, #12]
    158c:	b	1598 <reflection_Field_vec_find_by_name+0xc4>
    1590:	ldr	r0, [sp, #4]
    1594:	str	r0, [sp, #8]
    1598:	b	1528 <reflection_Field_vec_find_by_name+0x54>
    159c:	ldr	r0, [sp, #12]
    15a0:	ldr	r1, [sp, #8]
    15a4:	cmp	r0, r1
    15a8:	bne	15e8 <reflection_Field_vec_find_by_name+0x114>
    15ac:	ldr	r0, [fp, #-8]
    15b0:	ldr	r1, [sp, #12]
    15b4:	bl	ab4 <reflection_Field_vec_at>
    15b8:	bl	c34 <reflection_Field_name>
    15bc:	str	r0, [sp, #16]
    15c0:	ldr	r0, [sp, #16]
    15c4:	ldr	r1, [fp, #-12]
    15c8:	movw	r2, #0
    15cc:	bl	14a8 <__flatbuffers_string_cmp>
    15d0:	cmp	r0, #0
    15d4:	bne	15e4 <reflection_Field_vec_find_by_name+0x110>
    15d8:	ldr	r0, [sp, #12]
    15dc:	str	r0, [fp, #-4]
    15e0:	b	15f8 <reflection_Field_vec_find_by_name+0x124>
    15e4:	b	15e8 <reflection_Field_vec_find_by_name+0x114>
    15e8:	movw	r0, #0
    15ec:	movt	r0, #0
    15f0:	ldr	r0, [r0]
    15f4:	str	r0, [fp, #-4]
    15f8:	ldr	r0, [fp, #-4]
    15fc:	mov	sp, fp
    1600:	pop	{fp, pc}

00001604 <reflection_Field_vec_len>:
    1604:	push	{fp, lr}
    1608:	mov	fp, sp
    160c:	sub	sp, sp, #8
    1610:	str	r0, [sp, #4]
    1614:	ldr	r0, [sp, #4]
    1618:	movw	r1, #0
    161c:	cmp	r0, r1
    1620:	beq	163c <reflection_Field_vec_len+0x38>
    1624:	ldr	r0, [sp, #4]
    1628:	mvn	r1, #3
    162c:	add	r0, r0, r1
    1630:	bl	1230 <__flatbuffers_uoffset_read_from_pe>
    1634:	str	r0, [sp]
    1638:	b	1648 <reflection_Field_vec_len+0x44>
    163c:	movw	r0, #0
    1640:	str	r0, [sp]
    1644:	b	1648 <reflection_Field_vec_len+0x44>
    1648:	ldr	r0, [sp]
    164c:	mov	sp, fp
    1650:	pop	{fp, pc}

00001654 <flatbuffers_int64_read_from_pe>:
    1654:	push	{fp, lr}
    1658:	mov	fp, sp
    165c:	sub	sp, sp, #8
    1660:	str	r0, [sp, #4]
    1664:	ldr	r0, [sp, #4]
    1668:	ldr	r1, [r0]
    166c:	ldr	r0, [r0, #4]
    1670:	str	r0, [sp]
    1674:	mov	r0, r1
    1678:	ldr	r1, [sp]
    167c:	bl	1688 <flatbuffers_int64_cast_from_pe>
    1680:	mov	sp, fp
    1684:	pop	{fp, pc}

00001688 <flatbuffers_int64_cast_from_pe>:
    1688:	sub	sp, sp, #8
    168c:	str	r0, [sp]
    1690:	str	r1, [sp, #4]
    1694:	ldr	r0, [sp]
    1698:	ldr	r1, [sp, #4]
    169c:	add	sp, sp, #8
    16a0:	bx	lr

000016a4 <reflection_BaseType_read_from_pe>:
    16a4:	push	{fp, lr}
    16a8:	mov	fp, sp
    16ac:	sub	sp, sp, #8
    16b0:	str	r0, [sp, #4]
    16b4:	ldr	r0, [sp, #4]
    16b8:	ldrsb	r0, [r0]
    16bc:	bl	16cc <reflection_BaseType_cast_from_pe>
    16c0:	sxtb	r0, r0
    16c4:	mov	sp, fp
    16c8:	pop	{fp, pc}

000016cc <reflection_BaseType_cast_from_pe>:
    16cc:	sub	sp, sp, #4
    16d0:	strb	r0, [sp, #3]
    16d4:	ldrsb	r0, [sp, #3]
    16d8:	add	sp, sp, #4
    16dc:	bx	lr

000016e0 <flatbuffers_int32_read_from_pe>:
    16e0:	push	{fp, lr}
    16e4:	mov	fp, sp
    16e8:	sub	sp, sp, #8
    16ec:	str	r0, [sp, #4]
    16f0:	ldr	r0, [sp, #4]
    16f4:	ldr	r0, [r0]
    16f8:	bl	1704 <flatbuffers_int32_cast_from_pe>
    16fc:	mov	sp, fp
    1700:	pop	{fp, pc}

00001704 <flatbuffers_int32_cast_from_pe>:
    1704:	sub	sp, sp, #4
    1708:	str	r0, [sp]
    170c:	ldr	r0, [sp]
    1710:	add	sp, sp, #4
    1714:	bx	lr
