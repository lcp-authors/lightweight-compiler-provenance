
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <fpow>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	vmov.f64	d0, #112	; 0x3f800000  1.0
  14:	cmp	r1, #0
  18:	bge	4c <fpow+0x4c>
  1c:	rsb	r1, r1, #0
  20:	mov	r2, r1
  24:	sub	r1, r2, #1
  28:	cmp	r2, #0
  2c:	beq	40 <fpow+0x40>
  30:	vmov	s4, r0
  34:	vcvt.f64.s32	d2, s4
  38:	vmul.f64	d0, d0, d2
  3c:	b	20 <fpow+0x20>
  40:	vmov.f64	d1, #112	; 0x3f800000  1.0
  44:	vdiv.f64	d0, d1, d0
  48:	b	6c <fpow+0x6c>
  4c:	mov	r2, r1
  50:	sub	r1, r2, #1
  54:	cmp	r2, #0
  58:	beq	6c <fpow+0x6c>
  5c:	vmov	s2, r0
  60:	vcvt.f64.s32	d1, s2
  64:	vmul.f64	d0, d0, d1
  68:	b	4c <fpow+0x4c>
  6c:	ldr	lr, [sp, #4]
  70:	add	sp, sp, #8
  74:	bx	lr

00000078 <coda_grib_type_delete>:
  78:	mov	ip, sp
  7c:	sub	sp, sp, #16
  80:	str	ip, [sp]
  84:	str	lr, [sp, #4]
  88:	str	r4, [sp, #8]
  8c:	mov	r4, r0
  90:	cmp	r4, #0
  94:	bne	ac <coda_grib_type_delete+0x34>
  98:	ldr	r0, [pc, #148]	; 134 <coda_grib_type_delete+0xbc>
  9c:	ldr	r1, [pc, #140]	; 130 <coda_grib_type_delete+0xb8>
  a0:	mov	r2, #61	; 0x3d
  a4:	ldr	r3, [pc, #140]	; 138 <coda_grib_type_delete+0xc0>
  a8:	bl	0 <__assert_fail>
  ac:	ldr	r0, [r4]
  b0:	cmp	r0, #105	; 0x69
  b4:	beq	cc <coda_grib_type_delete+0x54>
  b8:	ldr	r0, [pc, #124]	; 13c <coda_grib_type_delete+0xc4>
  bc:	ldr	r1, [pc, #108]	; 130 <coda_grib_type_delete+0xb8>
  c0:	mov	r2, #62	; 0x3e
  c4:	ldr	r3, [pc, #108]	; 138 <coda_grib_type_delete+0xc0>
  c8:	bl	0 <__assert_fail>
  cc:	ldr	r2, [r4, #4]
  d0:	ldr	r1, [r2, #8]
  d4:	cmp	r1, #1
  d8:	bne	10c <coda_grib_type_delete+0x94>
  dc:	ldr	r0, [r4, #12]
  e0:	cmp	r0, #0
  e4:	beq	ec <coda_grib_type_delete+0x74>
  e8:	bl	0 <coda_dynamic_type_delete>
  ec:	ldr	r0, [r4, #56]	; 0x38
  f0:	cmp	r0, #0
  f4:	beq	fc <coda_grib_type_delete+0x84>
  f8:	bl	0 <free>
  fc:	ldr	r0, [r4, #60]	; 0x3c
 100:	cmp	r0, #0
 104:	beq	10c <coda_grib_type_delete+0x94>
 108:	bl	0 <free>
 10c:	ldr	r0, [r4, #4]
 110:	cmp	r0, #0
 114:	beq	11c <coda_grib_type_delete+0xa4>
 118:	bl	0 <coda_type_release>
 11c:	mov	r0, r4
 120:	ldr	r4, [sp, #8]
 124:	ldr	lr, [sp, #4]
 128:	add	sp, sp, #16
 12c:	b	0 <free>
 130:	.word	0x0000006d
 134:	.word	0x00000060
 138:	.word	0x00000124
 13c:	.word	0x00000000

00000140 <coda_grib_value_array_new>:
 140:	mov	ip, sp
 144:	sub	sp, sp, #40	; 0x28
 148:	str	ip, [sp, #4]
 14c:	str	lr, [sp, #8]
 150:	str	r4, [sp, #16]
 154:	str	r5, [sp, #20]
 158:	str	r6, [sp, #24]
 15c:	str	r7, [sp, #28]
 160:	str	r8, [sp, #32]
 164:	mov	r5, r3
 168:	mov	r6, r2
 16c:	mov	r7, r1
 170:	mov	r8, r0
 174:	cmp	r8, #0
 178:	bne	198 <coda_grib_value_array_new+0x58>
 17c:	mvn	r0, #99	; 0x63
 180:	ldr	r1, [pc, #400]	; 318 <coda_grib_value_array_new+0x1d8>
 184:	ldr	r2, [pc, #388]	; 310 <coda_grib_value_array_new+0x1d0>
 188:	mov	r3, #92	; 0x5c
 18c:	bl	0 <coda_set_error>
 190:	mov	r0, #0
 194:	b	2ec <coda_grib_value_array_new+0x1ac>
 198:	ldr	r2, [r8, #40]	; 0x28
 19c:	ldr	r0, [r2, #8]
 1a0:	cmp	r0, #3
 1a4:	beq	1d0 <coda_grib_value_array_new+0x90>
 1a8:	bl	0 <coda_type_get_class_name>
 1ac:	movw	r2, #65136	; 0xfe70
 1b0:	movt	r2, #65535	; 0xffff
 1b4:	ldr	r1, [pc, #336]	; 30c <coda_grib_value_array_new+0x1cc>
 1b8:	mov	r3, r0
 1bc:	mov	r0, r2
 1c0:	mov	r2, r3
 1c4:	bl	0 <coda_set_error>
 1c8:	mov	r0, #0
 1cc:	b	2ec <coda_grib_value_array_new+0x1ac>
 1d0:	mov	r0, #64	; 0x40
 1d4:	bl	0 <malloc>
 1d8:	mov	r4, r0
 1dc:	cmp	r4, #0
 1e0:	bne	208 <coda_grib_value_array_new+0xc8>
 1e4:	mvn	r0, #0
 1e8:	ldr	r1, [pc, #292]	; 314 <coda_grib_value_array_new+0x1d4>
 1ec:	mov	r2, #64	; 0x40
 1f0:	ldr	r3, [pc, #280]	; 310 <coda_grib_value_array_new+0x1d0>
 1f4:	mov	ip, #106	; 0x6a
 1f8:	str	ip, [sp]
 1fc:	bl	0 <coda_set_error>
 200:	mov	r0, #0
 204:	b	2ec <coda_grib_value_array_new+0x1ac>
 208:	mov	r3, #105	; 0x69
 20c:	str	r3, [r4]
 210:	str	r8, [r4, #4]
 214:	ldr	r1, [r8, #4]
 218:	add	r1, r1, #1
 21c:	str	r1, [r8, #4]
 220:	str	r7, [r4, #8]
 224:	mov	r1, #0
 228:	str	r1, [r4, #12]
 22c:	lsl	r3, r5, #3
 230:	orr	r3, r3, r6, lsr #29
 234:	lsl	r2, r6, #3
 238:	str	r2, [r4, #16]
 23c:	str	r3, [r4, #20]
 240:	mov	r2, #0
 244:	str	r2, [r4, #24]
 248:	mov	ip, #32
 24c:	str	ip, [r4, #28]
 250:	mov	r2, #0
 254:	strh	r2, [r4, #32]
 258:	mov	r0, #0
 25c:	strh	r0, [r4, #34]	; 0x22
 260:	vldr	d0, [pc, #184]	; 320 <coda_grib_value_array_new+0x1e0>
 264:	vldr	s12, [pc, #176]	; 31c <coda_grib_value_array_new+0x1dc>
 268:	vstr	s12, [r4, #36]	; 0x24
 26c:	vstr	d0, [r4, #40]	; 0x28
 270:	vstr	d0, [r4, #48]	; 0x30
 274:	mov	r2, #0
 278:	str	r2, [r4, #56]	; 0x38
 27c:	mov	r1, #0
 280:	str	r1, [r4, #60]	; 0x3c
 284:	mov	r0, #8
 288:	bl	0 <malloc>
 28c:	str	r0, [r4, #12]
 290:	cmp	r0, #0
 294:	bne	2c4 <coda_grib_value_array_new+0x184>
 298:	mov	r0, r4
 29c:	bl	78 <coda_grib_type_delete>
 2a0:	mvn	r0, #0
 2a4:	ldr	r1, [pc, #104]	; 314 <coda_grib_value_array_new+0x1d4>
 2a8:	mov	r2, #8
 2ac:	ldr	r3, [pc, #92]	; 310 <coda_grib_value_array_new+0x1d0>
 2b0:	mov	ip, #130	; 0x82
 2b4:	str	ip, [sp]
 2b8:	bl	0 <coda_set_error>
 2bc:	mov	r0, #0
 2c0:	b	2ec <coda_grib_value_array_new+0x1ac>
 2c4:	mov	ip, #105	; 0x69
 2c8:	str	ip, [r0]
 2cc:	ldr	r0, [r4, #12]
 2d0:	ldr	ip, [r8, #40]	; 0x28
 2d4:	str	ip, [r0, #4]
 2d8:	ldr	r1, [r8, #40]	; 0x28
 2dc:	ldr	r3, [r1, #4]
 2e0:	add	r0, r3, #1
 2e4:	str	r0, [r1, #4]
 2e8:	mov	r0, r4
 2ec:	ldr	r4, [sp, #16]
 2f0:	ldr	r5, [sp, #20]
 2f4:	ldr	r6, [sp, #24]
 2f8:	ldr	r7, [sp, #28]
 2fc:	ldr	r8, [sp, #32]
 300:	ldr	lr, [sp, #8]
 304:	add	sp, sp, #40	; 0x28
 308:	bx	lr
 30c:	.word	0x00000023
 310:	.word	0x0000006d
 314:	.word	0x000000cb
 318:	.word	0x00000100
	...

00000328 <coda_grib_value_array_simple_packing_new>:
 328:	mov	ip, sp
 32c:	sub	sp, sp, #56	; 0x38
 330:	str	ip, [sp, #4]
 334:	str	lr, [sp, #8]
 338:	str	r4, [sp, #16]
 33c:	str	r5, [sp, #20]
 340:	str	r6, [sp, #24]
 344:	str	r7, [sp, #28]
 348:	str	r8, [sp, #32]
 34c:	str	r9, [sp, #36]	; 0x24
 350:	vstr	d8, [sp, #40]	; 0x28
 354:	vstr	d9, [sp, #48]	; 0x30
 358:	ldr	r7, [ip, #12]
 35c:	vmov.f64	d8, d0
 360:	ldr	r8, [ip, #8]
 364:	ldr	r6, [ip, #4]
 368:	ldr	r9, [ip]
 36c:	mov	r5, r1
 370:	mov	r1, r5
 374:	bl	140 <coda_grib_value_array_new>
 378:	mov	r4, r0
 37c:	cmp	r4, #0
 380:	bne	38c <coda_grib_value_array_simple_packing_new+0x64>
 384:	mov	r0, #0
 388:	b	554 <coda_grib_value_array_simple_packing_new+0x22c>
 38c:	mov	r1, #1
 390:	str	r1, [r4, #24]
 394:	str	r9, [r4, #28]
 398:	strh	r6, [r4, #32]
 39c:	strh	r8, [r4, #34]	; 0x22
 3a0:	vstr	s16, [r4, #36]	; 0x24
 3a4:	mov	r0, #2
 3a8:	mov	r1, r8
 3ac:	bl	0 <fpow>
 3b0:	vmov.f64	d9, d0
 3b4:	mov	r0, #10
 3b8:	rsb	r1, r6, #0
 3bc:	bl	0 <fpow>
 3c0:	vmul.f64	d1, d9, d0
 3c4:	vstr	d1, [r4, #40]	; 0x28
 3c8:	mov	r0, #10
 3cc:	rsb	r1, r6, #0
 3d0:	bl	0 <fpow>
 3d4:	vcvt.f64.f32	d4, s16
 3d8:	vmul.f64	d0, d4, d0
 3dc:	vstr	d0, [r4, #48]	; 0x30
 3e0:	mov	r3, #0
 3e4:	str	r3, [r4, #56]	; 0x38
 3e8:	mov	r3, #0
 3ec:	str	r3, [r4, #60]	; 0x3c
 3f0:	cmp	r7, #0
 3f4:	beq	550 <coda_grib_value_array_simple_packing_new+0x228>
 3f8:	and	r2, r5, #7
 3fc:	cmp	r2, #0
 400:	movne	r1, #1
 404:	moveq	r1, #0
 408:	add	r5, r1, r5, asr #3
 40c:	mov	r0, r5
 410:	bl	0 <malloc>
 414:	str	r0, [r4, #56]	; 0x38
 418:	cmp	r0, #0
 41c:	bne	44c <coda_grib_value_array_simple_packing_new+0x124>
 420:	mov	r0, r4
 424:	bl	78 <coda_grib_type_delete>
 428:	mvn	r0, #0
 42c:	ldr	r1, [pc, #336]	; 584 <coda_grib_value_array_simple_packing_new+0x25c>
 430:	ldr	r3, [pc, #328]	; 580 <coda_grib_value_array_simple_packing_new+0x258>
 434:	mov	r2, #173	; 0xad
 438:	str	r2, [sp]
 43c:	mov	r2, r5
 440:	bl	0 <coda_set_error>
 444:	mov	r0, #0
 448:	b	554 <coda_grib_value_array_simple_packing_new+0x22c>
 44c:	mov	r2, r5
 450:	mov	r1, r7
 454:	bl	0 <memcpy>
 458:	mov	r0, r5
 45c:	bl	0 <malloc>
 460:	str	r0, [r4, #60]	; 0x3c
 464:	cmp	r0, #0
 468:	bne	498 <coda_grib_value_array_simple_packing_new+0x170>
 46c:	mov	r0, r4
 470:	bl	78 <coda_grib_type_delete>
 474:	mvn	r0, #0
 478:	ldr	r1, [pc, #260]	; 584 <coda_grib_value_array_simple_packing_new+0x25c>
 47c:	ldr	r3, [pc, #252]	; 580 <coda_grib_value_array_simple_packing_new+0x258>
 480:	mov	r2, #183	; 0xb7
 484:	str	r2, [sp]
 488:	mov	r2, r5
 48c:	bl	0 <coda_set_error>
 490:	mov	r0, #0
 494:	b	554 <coda_grib_value_array_simple_packing_new+0x22c>
 498:	mov	r0, #0
 49c:	cmp	r0, r5
 4a0:	bge	550 <coda_grib_value_array_simple_packing_new+0x228>
 4a4:	ldr	r2, [r4, #56]	; 0x38
 4a8:	ldrb	r1, [r2, r0]
 4ac:	ldr	r6, [r4, #60]	; 0x3c
 4b0:	asr	r3, r1, #7
 4b4:	and	r2, r3, #1
 4b8:	asr	r3, r1, #6
 4bc:	and	r3, r3, #1
 4c0:	add	r3, r2, r3
 4c4:	asr	r2, r1, #5
 4c8:	and	r2, r2, #1
 4cc:	add	ip, r3, r2
 4d0:	asr	r2, r1, #4
 4d4:	and	r2, r2, #1
 4d8:	add	r3, ip, r2
 4dc:	asr	ip, r1, #3
 4e0:	and	r2, ip, #1
 4e4:	add	r2, r3, r2
 4e8:	asr	ip, r1, #2
 4ec:	and	r3, ip, #1
 4f0:	add	r2, r2, r3
 4f4:	asr	r3, r1, #1
 4f8:	and	ip, r3, #1
 4fc:	add	r3, r2, ip
 500:	and	ip, r1, #1
 504:	add	ip, r3, ip
 508:	strb	ip, [r6, r0]
 50c:	asr	lr, r0, #31
 510:	add	lr, r0, lr, lsr #28
 514:	asr	r3, lr, #4
 518:	lsl	r3, r3, #4
 51c:	sub	r1, r0, r3
 520:	cmp	r1, #0
 524:	beq	548 <coda_grib_value_array_simple_packing_new+0x220>
 528:	ldr	r1, [r4, #60]	; 0x3c
 52c:	ldrb	r3, [r1, r0]
 530:	mov	r2, r1
 534:	add	ip, r2, r0
 538:	sub	lr, ip, #4096	; 0x1000
 53c:	ldrb	r2, [lr, #4095]	; 0xfff
 540:	add	r3, r3, r2
 544:	strb	r3, [r1, r0]
 548:	add	r0, r0, #1
 54c:	b	49c <coda_grib_value_array_simple_packing_new+0x174>
 550:	mov	r0, r4
 554:	ldr	r4, [sp, #16]
 558:	ldr	r5, [sp, #20]
 55c:	ldr	r6, [sp, #24]
 560:	ldr	r7, [sp, #28]
 564:	ldr	r8, [sp, #32]
 568:	ldr	r9, [sp, #36]	; 0x24
 56c:	vldr	d8, [sp, #40]	; 0x28
 570:	vldr	d9, [sp, #48]	; 0x30
 574:	ldr	lr, [sp, #8]
 578:	add	sp, sp, #56	; 0x38
 57c:	bx	lr
 580:	.word	0x0000006d
 584:	.word	0x000000cb
