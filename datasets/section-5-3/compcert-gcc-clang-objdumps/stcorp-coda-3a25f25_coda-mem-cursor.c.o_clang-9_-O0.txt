
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_cursor_update_offset>:
       0:	sub	sp, sp, #4
       4:	str	r0, [sp]
       8:	ldr	r0, [sp]
       c:	add	r1, r0, #8
      10:	ldr	r0, [r0, #4]
      14:	sub	r0, r0, #1
      18:	add	r0, r1, r0, lsl #4
      1c:	ldr	r0, [r0]
      20:	ldr	r0, [r0, #8]
      24:	cmp	r0, #2
      28:	bne	5c <coda_mem_cursor_update_offset+0x5c>
      2c:	ldr	r0, [sp]
      30:	ldr	r1, [r0, #4]
      34:	lsl	r2, r1, #4
      38:	add	r1, r0, r1, lsl #4
      3c:	ldr	r3, [r1, #-8]
      40:	ldr	ip, [r3, #24]
      44:	ldr	r3, [r3, #28]
      48:	lsl	r3, r3, #3
      4c:	orr	r3, r3, ip, lsr #29
      50:	lsl	ip, ip, #3
      54:	str	ip, [r2, r0]
      58:	str	r3, [r1, #4]
      5c:	add	sp, sp, #4
      60:	bx	lr

00000064 <coda_mem_cursor_goto_record_field_by_index>:
      64:	push	{fp, lr}
      68:	mov	fp, sp
      6c:	sub	sp, sp, #16
      70:	str	r0, [sp, #8]
      74:	str	r1, [sp, #4]
      78:	ldr	r0, [sp, #8]
      7c:	add	r1, r0, #8
      80:	ldr	r0, [r0, #4]
      84:	sub	r0, r0, #1
      88:	add	r0, r1, r0, lsl #4
      8c:	ldr	r0, [r0]
      90:	str	r0, [sp]
      94:	ldr	r0, [sp]
      98:	ldr	r0, [r0, #8]
      9c:	cmp	r0, #0
      a0:	bne	1a4 <coda_mem_cursor_goto_record_field_by_index+0x140>
      a4:	ldr	r0, [sp, #4]
      a8:	cmp	r0, #0
      ac:	blt	c4 <coda_mem_cursor_goto_record_field_by_index+0x60>
      b0:	ldr	r0, [sp, #4]
      b4:	ldr	r1, [sp]
      b8:	ldr	r1, [r1, #16]
      bc:	cmp	r0, r1
      c0:	blt	ec <coda_mem_cursor_goto_record_field_by_index+0x88>
      c4:	ldr	r2, [sp, #4]
      c8:	ldr	r0, [sp]
      cc:	ldr	r3, [r0, #16]
      d0:	mvn	r0, #100	; 0x64
      d4:	movw	r1, #0
      d8:	movt	r1, #0
      dc:	bl	0 <coda_set_error>
      e0:	mvn	r0, #0
      e4:	str	r0, [fp, #-4]
      e8:	b	1e8 <coda_mem_cursor_goto_record_field_by_index+0x184>
      ec:	ldr	r0, [sp, #8]
      f0:	ldr	r1, [r0, #4]
      f4:	add	r1, r1, #1
      f8:	str	r1, [r0, #4]
      fc:	ldr	r0, [sp]
     100:	ldr	r0, [r0, #20]
     104:	ldr	r1, [sp, #4]
     108:	add	r0, r0, r1, lsl #2
     10c:	ldr	r0, [r0]
     110:	movw	r1, #0
     114:	cmp	r0, r1
     118:	beq	148 <coda_mem_cursor_goto_record_field_by_index+0xe4>
     11c:	ldr	r0, [sp]
     120:	ldr	r0, [r0, #20]
     124:	ldr	r1, [sp, #4]
     128:	ldr	r0, [r0, r1, lsl #2]
     12c:	ldr	r1, [sp, #8]
     130:	add	r2, r1, #8
     134:	ldr	r1, [r1, #4]
     138:	sub	r1, r1, #1
     13c:	add	r1, r2, r1, lsl #4
     140:	str	r0, [r1]
     144:	b	170 <coda_mem_cursor_goto_record_field_by_index+0x10c>
     148:	ldr	r0, [sp]
     14c:	ldr	r0, [r0, #4]
     150:	ldr	r0, [r0]
     154:	bl	0 <coda_no_data_singleton>
     158:	ldr	r1, [sp, #8]
     15c:	add	r2, r1, #8
     160:	ldr	r1, [r1, #4]
     164:	sub	r1, r1, #1
     168:	add	r1, r2, r1, lsl #4
     16c:	str	r0, [r1]
     170:	ldr	r0, [sp, #4]
     174:	ldr	r1, [sp, #8]
     178:	ldr	r2, [r1, #4]
     17c:	add	r1, r1, r2, lsl #4
     180:	str	r0, [r1, #-4]
     184:	ldr	r0, [sp, #8]
     188:	ldr	r1, [r0, #4]
     18c:	mvn	r2, #0
     190:	str	r2, [r0, r1, lsl #4]!
     194:	str	r2, [r0, #4]
     198:	movw	r0, #0
     19c:	str	r0, [fp, #-4]
     1a0:	b	1e8 <coda_mem_cursor_goto_record_field_by_index+0x184>
     1a4:	ldr	r0, [sp]
     1a8:	ldr	r0, [r0, #8]
     1ac:	cmp	r0, #2
     1b0:	bne	1b8 <coda_mem_cursor_goto_record_field_by_index+0x154>
     1b4:	b	1d8 <coda_mem_cursor_goto_record_field_by_index+0x174>
     1b8:	movw	r0, #0
     1bc:	movt	r0, #0
     1c0:	movw	r1, #0
     1c4:	movt	r1, #0
     1c8:	movw	r2, #79	; 0x4f
     1cc:	movw	r3, #0
     1d0:	movt	r3, #0
     1d4:	bl	0 <__assert_fail>
     1d8:	ldr	r0, [sp, #8]
     1dc:	ldr	r1, [sp, #4]
     1e0:	bl	0 <coda_ascbin_cursor_goto_record_field_by_index>
     1e4:	str	r0, [fp, #-4]
     1e8:	ldr	r0, [fp, #-4]
     1ec:	mov	sp, fp
     1f0:	pop	{fp, pc}

000001f4 <coda_mem_cursor_goto_next_record_field>:
     1f4:	push	{fp, lr}
     1f8:	mov	fp, sp
     1fc:	sub	sp, sp, #16
     200:	str	r0, [sp, #8]
     204:	ldr	r0, [sp, #8]
     208:	add	r1, r0, #8
     20c:	ldr	r0, [r0, #4]
     210:	sub	r0, r0, #2
     214:	add	r0, r1, r0, lsl #4
     218:	ldr	r0, [r0]
     21c:	str	r0, [sp, #4]
     220:	ldr	r0, [sp, #4]
     224:	ldr	r0, [r0, #8]
     228:	cmp	r0, #0
     22c:	bne	340 <coda_mem_cursor_goto_next_record_field+0x14c>
     230:	ldr	r0, [sp, #8]
     234:	add	r1, r0, #8
     238:	ldr	r0, [r0, #4]
     23c:	sub	r0, r0, #1
     240:	add	r0, r1, r0, lsl #4
     244:	ldr	r0, [r0, #4]
     248:	add	r0, r0, #1
     24c:	str	r0, [sp]
     250:	ldr	r0, [sp]
     254:	cmp	r0, #0
     258:	blt	270 <coda_mem_cursor_goto_next_record_field+0x7c>
     25c:	ldr	r0, [sp]
     260:	ldr	r1, [sp, #4]
     264:	ldr	r1, [r1, #16]
     268:	cmp	r0, r1
     26c:	blt	298 <coda_mem_cursor_goto_next_record_field+0xa4>
     270:	ldr	r2, [sp]
     274:	ldr	r0, [sp, #4]
     278:	ldr	r3, [r0, #16]
     27c:	mvn	r0, #100	; 0x64
     280:	movw	r1, #0
     284:	movt	r1, #0
     288:	bl	0 <coda_set_error>
     28c:	mvn	r0, #0
     290:	str	r0, [fp, #-4]
     294:	b	380 <coda_mem_cursor_goto_next_record_field+0x18c>
     298:	ldr	r0, [sp, #4]
     29c:	ldr	r0, [r0, #20]
     2a0:	ldr	r1, [sp]
     2a4:	add	r0, r0, r1, lsl #2
     2a8:	ldr	r0, [r0]
     2ac:	movw	r1, #0
     2b0:	cmp	r0, r1
     2b4:	beq	2e4 <coda_mem_cursor_goto_next_record_field+0xf0>
     2b8:	ldr	r0, [sp, #4]
     2bc:	ldr	r0, [r0, #20]
     2c0:	ldr	r1, [sp]
     2c4:	ldr	r0, [r0, r1, lsl #2]
     2c8:	ldr	r1, [sp, #8]
     2cc:	add	r2, r1, #8
     2d0:	ldr	r1, [r1, #4]
     2d4:	sub	r1, r1, #1
     2d8:	add	r1, r2, r1, lsl #4
     2dc:	str	r0, [r1]
     2e0:	b	30c <coda_mem_cursor_goto_next_record_field+0x118>
     2e4:	ldr	r0, [sp, #4]
     2e8:	ldr	r0, [r0, #4]
     2ec:	ldr	r0, [r0]
     2f0:	bl	0 <coda_no_data_singleton>
     2f4:	ldr	r1, [sp, #8]
     2f8:	add	r2, r1, #8
     2fc:	ldr	r1, [r1, #4]
     300:	sub	r1, r1, #1
     304:	add	r1, r2, r1, lsl #4
     308:	str	r0, [r1]
     30c:	ldr	r0, [sp]
     310:	ldr	r1, [sp, #8]
     314:	ldr	r2, [r1, #4]
     318:	add	r1, r1, r2, lsl #4
     31c:	str	r0, [r1, #-4]
     320:	ldr	r0, [sp, #8]
     324:	ldr	r1, [r0, #4]
     328:	mvn	r2, #0
     32c:	str	r2, [r0, r1, lsl #4]!
     330:	str	r2, [r0, #4]
     334:	movw	r0, #0
     338:	str	r0, [fp, #-4]
     33c:	b	380 <coda_mem_cursor_goto_next_record_field+0x18c>
     340:	ldr	r0, [sp, #4]
     344:	ldr	r0, [r0, #8]
     348:	cmp	r0, #2
     34c:	bne	354 <coda_mem_cursor_goto_next_record_field+0x160>
     350:	b	374 <coda_mem_cursor_goto_next_record_field+0x180>
     354:	movw	r0, #0
     358:	movt	r0, #0
     35c:	movw	r1, #0
     360:	movt	r1, #0
     364:	movw	r2, #111	; 0x6f
     368:	movw	r3, #0
     36c:	movt	r3, #0
     370:	bl	0 <__assert_fail>
     374:	ldr	r0, [sp, #8]
     378:	bl	0 <coda_ascbin_cursor_goto_next_record_field>
     37c:	str	r0, [fp, #-4]
     380:	ldr	r0, [fp, #-4]
     384:	mov	sp, fp
     388:	pop	{fp, pc}

0000038c <coda_mem_cursor_goto_available_union_field>:
     38c:	push	{fp, lr}
     390:	mov	fp, sp
     394:	sub	sp, sp, #16
     398:	str	r0, [sp, #8]
     39c:	ldr	r0, [sp, #8]
     3a0:	add	r1, r0, #8
     3a4:	ldr	r0, [r0, #4]
     3a8:	sub	r0, r0, #1
     3ac:	add	r0, r1, r0, lsl #4
     3b0:	ldr	r0, [r0]
     3b4:	str	r0, [sp, #4]
     3b8:	ldr	r0, [sp, #4]
     3bc:	ldr	r0, [r0, #8]
     3c0:	cmp	r0, #0
     3c4:	bne	43c <coda_mem_cursor_goto_available_union_field+0xb0>
     3c8:	ldr	r0, [sp, #8]
     3cc:	mov	r1, sp
     3d0:	bl	488 <coda_mem_cursor_get_available_union_field_index>
     3d4:	cmp	r0, #0
     3d8:	beq	3e8 <coda_mem_cursor_goto_available_union_field+0x5c>
     3dc:	mvn	r0, #0
     3e0:	str	r0, [fp, #-4]
     3e4:	b	47c <coda_mem_cursor_goto_available_union_field+0xf0>
     3e8:	ldr	r0, [sp, #4]
     3ec:	ldr	r0, [r0, #20]
     3f0:	ldr	r1, [sp]
     3f4:	ldr	r0, [r0, r1, lsl #2]
     3f8:	ldr	r1, [sp, #8]
     3fc:	ldr	r2, [r1, #4]
     400:	add	r1, r1, r2, lsl #4
     404:	str	r0, [r1, #-8]
     408:	ldr	r0, [sp]
     40c:	ldr	r1, [sp, #8]
     410:	ldr	r2, [r1, #4]
     414:	add	r1, r1, r2, lsl #4
     418:	str	r0, [r1, #-4]
     41c:	ldr	r0, [sp, #8]
     420:	ldr	r1, [r0, #4]
     424:	mvn	r2, #0
     428:	str	r2, [r0, r1, lsl #4]!
     42c:	str	r2, [r0, #4]
     430:	movw	r0, #0
     434:	str	r0, [fp, #-4]
     438:	b	47c <coda_mem_cursor_goto_available_union_field+0xf0>
     43c:	ldr	r0, [sp, #4]
     440:	ldr	r0, [r0, #8]
     444:	cmp	r0, #2
     448:	bne	450 <coda_mem_cursor_goto_available_union_field+0xc4>
     44c:	b	470 <coda_mem_cursor_goto_available_union_field+0xe4>
     450:	movw	r0, #0
     454:	movt	r0, #0
     458:	movw	r1, #0
     45c:	movt	r1, #0
     460:	movw	r2, #134	; 0x86
     464:	movw	r3, #0
     468:	movt	r3, #0
     46c:	bl	0 <__assert_fail>
     470:	ldr	r0, [sp, #8]
     474:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
     478:	str	r0, [fp, #-4]
     47c:	ldr	r0, [fp, #-4]
     480:	mov	sp, fp
     484:	pop	{fp, pc}

00000488 <coda_mem_cursor_get_available_union_field_index>:
     488:	push	{fp, lr}
     48c:	mov	fp, sp
     490:	sub	sp, sp, #24
     494:	str	r0, [fp, #-8]
     498:	str	r1, [sp, #12]
     49c:	ldr	r0, [fp, #-8]
     4a0:	add	r1, r0, #8
     4a4:	ldr	r0, [r0, #4]
     4a8:	sub	r0, r0, #1
     4ac:	add	r0, r1, r0, lsl #4
     4b0:	ldr	r0, [r0]
     4b4:	str	r0, [sp, #8]
     4b8:	ldr	r0, [sp, #8]
     4bc:	ldr	r0, [r0, #8]
     4c0:	cmp	r0, #0
     4c4:	bne	54c <coda_mem_cursor_get_available_union_field_index+0xc4>
     4c8:	movw	r0, #0
     4cc:	str	r0, [sp, #4]
     4d0:	ldr	r0, [sp, #4]
     4d4:	ldr	r1, [sp, #8]
     4d8:	ldr	r1, [r1, #16]
     4dc:	cmp	r0, r1
     4e0:	bge	530 <coda_mem_cursor_get_available_union_field_index+0xa8>
     4e4:	ldr	r0, [sp, #8]
     4e8:	ldr	r0, [r0, #20]
     4ec:	ldr	r1, [sp, #4]
     4f0:	add	r0, r0, r1, lsl #2
     4f4:	ldr	r0, [r0]
     4f8:	movw	r1, #0
     4fc:	cmp	r0, r1
     500:	beq	51c <coda_mem_cursor_get_available_union_field_index+0x94>
     504:	ldr	r0, [sp, #4]
     508:	ldr	r1, [sp, #12]
     50c:	str	r0, [r1]
     510:	movw	r0, #0
     514:	str	r0, [fp, #-4]
     518:	b	5a4 <coda_mem_cursor_get_available_union_field_index+0x11c>
     51c:	b	520 <coda_mem_cursor_get_available_union_field_index+0x98>
     520:	ldr	r0, [sp, #4]
     524:	add	r0, r0, #1
     528:	str	r0, [sp, #4]
     52c:	b	4d0 <coda_mem_cursor_get_available_union_field_index+0x48>
     530:	ldr	r0, [pc, #120]	; 5b0 <coda_mem_cursor_get_available_union_field_index+0x128>
     534:	movw	r1, #0
     538:	movt	r1, #0
     53c:	bl	0 <coda_set_error>
     540:	mvn	r0, #0
     544:	str	r0, [fp, #-4]
     548:	b	5a4 <coda_mem_cursor_get_available_union_field_index+0x11c>
     54c:	ldr	r0, [fp, #-8]
     550:	add	r1, r0, #8
     554:	ldr	r0, [r0, #4]
     558:	sub	r0, r0, #1
     55c:	add	r0, r1, r0, lsl #4
     560:	ldr	r0, [r0]
     564:	ldr	r0, [r0, #8]
     568:	cmp	r0, #2
     56c:	bne	574 <coda_mem_cursor_get_available_union_field_index+0xec>
     570:	b	594 <coda_mem_cursor_get_available_union_field_index+0x10c>
     574:	movw	r0, #0
     578:	movt	r0, #0
     57c:	movw	r1, #0
     580:	movt	r1, #0
     584:	movw	r2, #399	; 0x18f
     588:	movw	r3, #0
     58c:	movt	r3, #0
     590:	bl	0 <__assert_fail>
     594:	ldr	r0, [fp, #-8]
     598:	ldr	r1, [sp, #12]
     59c:	bl	0 <coda_ascbin_cursor_get_available_union_field_index>
     5a0:	str	r0, [fp, #-4]
     5a4:	ldr	r0, [fp, #-4]
     5a8:	mov	sp, fp
     5ac:	pop	{fp, pc}
     5b0:	.word	0xfffffed4

000005b4 <coda_mem_cursor_goto_array_element>:
     5b4:	push	{fp, lr}
     5b8:	mov	fp, sp
     5bc:	sub	sp, sp, #24
     5c0:	str	r0, [fp, #-8]
     5c4:	str	r1, [sp, #12]
     5c8:	str	r2, [sp, #8]
     5cc:	ldr	r0, [fp, #-8]
     5d0:	add	r1, r0, #8
     5d4:	ldr	r0, [r0, #4]
     5d8:	sub	r0, r0, #1
     5dc:	add	r0, r1, r0, lsl #4
     5e0:	ldr	r0, [r0]
     5e4:	str	r0, [sp, #4]
     5e8:	ldr	r0, [sp, #4]
     5ec:	ldr	r0, [r0, #8]
     5f0:	cmp	r0, #1
     5f4:	bne	708 <coda_mem_cursor_goto_array_element+0x154>
     5f8:	ldr	r0, [sp, #12]
     5fc:	cmp	r0, #1
     600:	beq	624 <coda_mem_cursor_goto_array_element+0x70>
     604:	ldr	r2, [sp, #12]
     608:	mvn	r0, #105	; 0x69
     60c:	movw	r1, #0
     610:	movt	r1, #0
     614:	bl	0 <coda_set_error>
     618:	mvn	r0, #0
     61c:	str	r0, [fp, #-4]
     620:	b	750 <coda_mem_cursor_goto_array_element+0x19c>
     624:	ldr	r0, [pc, #304]	; 75c <coda_mem_cursor_goto_array_element+0x1a8>
     628:	ldr	r0, [pc, r0]
     62c:	str	r0, [sp]
     630:	bl	0 <__aeabi_read_tp>
     634:	ldr	r1, [sp]
     638:	ldr	r0, [r0, r1]
     63c:	cmp	r0, #0
     640:	beq	69c <coda_mem_cursor_goto_array_element+0xe8>
     644:	ldr	r0, [sp, #8]
     648:	ldr	r0, [r0]
     64c:	cmp	r0, #0
     650:	blt	66c <coda_mem_cursor_goto_array_element+0xb8>
     654:	ldr	r0, [sp, #8]
     658:	ldr	r0, [r0]
     65c:	ldr	r1, [sp, #4]
     660:	ldr	r1, [r1, #16]
     664:	cmp	r0, r1
     668:	blt	698 <coda_mem_cursor_goto_array_element+0xe4>
     66c:	ldr	r0, [sp, #8]
     670:	ldr	r2, [r0]
     674:	ldr	r0, [sp, #4]
     678:	ldr	r3, [r0, #16]
     67c:	mvn	r0, #106	; 0x6a
     680:	movw	r1, #0
     684:	movt	r1, #0
     688:	bl	0 <coda_set_error>
     68c:	mvn	r0, #0
     690:	str	r0, [fp, #-4]
     694:	b	750 <coda_mem_cursor_goto_array_element+0x19c>
     698:	b	69c <coda_mem_cursor_goto_array_element+0xe8>
     69c:	ldr	r0, [fp, #-8]
     6a0:	ldr	r1, [r0, #4]
     6a4:	add	r1, r1, #1
     6a8:	str	r1, [r0, #4]
     6ac:	ldr	r0, [sp, #4]
     6b0:	ldr	r0, [r0, #20]
     6b4:	ldr	r1, [sp, #8]
     6b8:	ldr	r1, [r1]
     6bc:	ldr	r0, [r0, r1, lsl #2]
     6c0:	ldr	r1, [fp, #-8]
     6c4:	ldr	r2, [r1, #4]
     6c8:	add	r1, r1, r2, lsl #4
     6cc:	str	r0, [r1, #-8]
     6d0:	ldr	r0, [sp, #8]
     6d4:	ldr	r0, [r0]
     6d8:	ldr	r1, [fp, #-8]
     6dc:	ldr	r2, [r1, #4]
     6e0:	add	r1, r1, r2, lsl #4
     6e4:	str	r0, [r1, #-4]
     6e8:	ldr	r0, [fp, #-8]
     6ec:	ldr	r1, [r0, #4]
     6f0:	mvn	r2, #0
     6f4:	str	r2, [r0, r1, lsl #4]!
     6f8:	str	r2, [r0, #4]
     6fc:	movw	r0, #0
     700:	str	r0, [fp, #-4]
     704:	b	750 <coda_mem_cursor_goto_array_element+0x19c>
     708:	ldr	r0, [sp, #4]
     70c:	ldr	r0, [r0, #8]
     710:	cmp	r0, #2
     714:	bne	71c <coda_mem_cursor_goto_array_element+0x168>
     718:	b	73c <coda_mem_cursor_goto_array_element+0x188>
     71c:	movw	r0, #0
     720:	movt	r0, #0
     724:	movw	r1, #0
     728:	movt	r1, #0
     72c:	movw	r2, #169	; 0xa9
     730:	movw	r3, #0
     734:	movt	r3, #0
     738:	bl	0 <__assert_fail>
     73c:	ldr	r0, [fp, #-8]
     740:	ldr	r1, [sp, #12]
     744:	ldr	r2, [sp, #8]
     748:	bl	0 <coda_ascbin_cursor_goto_array_element>
     74c:	str	r0, [fp, #-4]
     750:	ldr	r0, [fp, #-4]
     754:	mov	sp, fp
     758:	pop	{fp, pc}
     75c:	.word	0x0000012c

00000760 <coda_mem_cursor_goto_array_element_by_index>:
     760:	push	{fp, lr}
     764:	mov	fp, sp
     768:	sub	sp, sp, #24
     76c:	str	r0, [fp, #-8]
     770:	str	r1, [sp, #12]
     774:	ldr	r0, [fp, #-8]
     778:	add	r1, r0, #8
     77c:	ldr	r0, [r0, #4]
     780:	sub	r0, r0, #1
     784:	add	r0, r1, r0, lsl #4
     788:	ldr	r0, [r0]
     78c:	str	r0, [sp, #8]
     790:	ldr	r0, [sp, #8]
     794:	ldr	r0, [r0, #8]
     798:	cmp	r0, #1
     79c:	bne	870 <coda_mem_cursor_goto_array_element_by_index+0x110>
     7a0:	ldr	r0, [pc, #280]	; 8c0 <coda_mem_cursor_goto_array_element_by_index+0x160>
     7a4:	ldr	r0, [pc, r0]
     7a8:	str	r0, [sp, #4]
     7ac:	bl	0 <__aeabi_read_tp>
     7b0:	ldr	r1, [sp, #4]
     7b4:	ldr	r0, [r0, r1]
     7b8:	cmp	r0, #0
     7bc:	beq	80c <coda_mem_cursor_goto_array_element_by_index+0xac>
     7c0:	ldr	r0, [sp, #12]
     7c4:	cmp	r0, #0
     7c8:	blt	7e0 <coda_mem_cursor_goto_array_element_by_index+0x80>
     7cc:	ldr	r0, [sp, #12]
     7d0:	ldr	r1, [sp, #8]
     7d4:	ldr	r1, [r1, #16]
     7d8:	cmp	r0, r1
     7dc:	blt	808 <coda_mem_cursor_goto_array_element_by_index+0xa8>
     7e0:	ldr	r2, [sp, #12]
     7e4:	ldr	r0, [sp, #8]
     7e8:	ldr	r3, [r0, #16]
     7ec:	mvn	r0, #106	; 0x6a
     7f0:	movw	r1, #0
     7f4:	movt	r1, #0
     7f8:	bl	0 <coda_set_error>
     7fc:	mvn	r0, #0
     800:	str	r0, [fp, #-4]
     804:	b	8b4 <coda_mem_cursor_goto_array_element_by_index+0x154>
     808:	b	80c <coda_mem_cursor_goto_array_element_by_index+0xac>
     80c:	ldr	r0, [fp, #-8]
     810:	ldr	r1, [r0, #4]
     814:	add	r1, r1, #1
     818:	str	r1, [r0, #4]
     81c:	ldr	r0, [sp, #8]
     820:	ldr	r0, [r0, #20]
     824:	ldr	r1, [sp, #12]
     828:	ldr	r0, [r0, r1, lsl #2]
     82c:	ldr	r1, [fp, #-8]
     830:	ldr	r2, [r1, #4]
     834:	add	r1, r1, r2, lsl #4
     838:	str	r0, [r1, #-8]
     83c:	ldr	r0, [sp, #12]
     840:	ldr	r1, [fp, #-8]
     844:	ldr	r2, [r1, #4]
     848:	add	r1, r1, r2, lsl #4
     84c:	str	r0, [r1, #-4]
     850:	ldr	r0, [fp, #-8]
     854:	ldr	r1, [r0, #4]
     858:	mvn	r2, #0
     85c:	str	r2, [r0, r1, lsl #4]!
     860:	str	r2, [r0, #4]
     864:	movw	r0, #0
     868:	str	r0, [fp, #-4]
     86c:	b	8b4 <coda_mem_cursor_goto_array_element_by_index+0x154>
     870:	ldr	r0, [sp, #8]
     874:	ldr	r0, [r0, #8]
     878:	cmp	r0, #2
     87c:	bne	884 <coda_mem_cursor_goto_array_element_by_index+0x124>
     880:	b	8a4 <coda_mem_cursor_goto_array_element_by_index+0x144>
     884:	movw	r0, #0
     888:	movt	r0, #0
     88c:	movw	r1, #0
     890:	movt	r1, #0
     894:	movw	r2, #197	; 0xc5
     898:	movw	r3, #0
     89c:	movt	r3, #0
     8a0:	bl	0 <__assert_fail>
     8a4:	ldr	r0, [fp, #-8]
     8a8:	ldr	r1, [sp, #12]
     8ac:	bl	0 <coda_ascbin_cursor_goto_array_element_by_index>
     8b0:	str	r0, [fp, #-4]
     8b4:	ldr	r0, [fp, #-4]
     8b8:	mov	sp, fp
     8bc:	pop	{fp, pc}
     8c0:	.word	0x00000114

000008c4 <coda_mem_cursor_goto_next_array_element>:
     8c4:	push	{fp, lr}
     8c8:	mov	fp, sp
     8cc:	sub	sp, sp, #16
     8d0:	str	r0, [sp, #8]
     8d4:	ldr	r0, [sp, #8]
     8d8:	add	r1, r0, #8
     8dc:	ldr	r0, [r0, #4]
     8e0:	sub	r0, r0, #2
     8e4:	add	r0, r1, r0, lsl #4
     8e8:	ldr	r0, [r0]
     8ec:	str	r0, [sp, #4]
     8f0:	ldr	r0, [sp, #4]
     8f4:	ldr	r0, [r0, #8]
     8f8:	cmp	r0, #1
     8fc:	bne	a10 <coda_mem_cursor_goto_next_array_element+0x14c>
     900:	ldr	r0, [sp, #8]
     904:	add	r1, r0, #8
     908:	ldr	r0, [r0, #4]
     90c:	sub	r0, r0, #1
     910:	add	r0, r1, r0, lsl #4
     914:	ldr	r0, [r0, #4]
     918:	add	r0, r0, #1
     91c:	str	r0, [sp]
     920:	ldr	r0, [sp]
     924:	cmp	r0, #0
     928:	blt	940 <coda_mem_cursor_goto_next_array_element+0x7c>
     92c:	ldr	r0, [sp]
     930:	ldr	r1, [sp, #4]
     934:	ldr	r1, [r1, #16]
     938:	cmp	r0, r1
     93c:	blt	968 <coda_mem_cursor_goto_next_array_element+0xa4>
     940:	ldr	r2, [sp]
     944:	ldr	r0, [sp, #4]
     948:	ldr	r3, [r0, #16]
     94c:	mvn	r0, #106	; 0x6a
     950:	movw	r1, #0
     954:	movt	r1, #0
     958:	bl	0 <coda_set_error>
     95c:	mvn	r0, #0
     960:	str	r0, [fp, #-4]
     964:	b	a50 <coda_mem_cursor_goto_next_array_element+0x18c>
     968:	ldr	r0, [sp, #4]
     96c:	ldr	r0, [r0, #20]
     970:	ldr	r1, [sp]
     974:	add	r0, r0, r1, lsl #2
     978:	ldr	r0, [r0]
     97c:	movw	r1, #0
     980:	cmp	r0, r1
     984:	beq	9b4 <coda_mem_cursor_goto_next_array_element+0xf0>
     988:	ldr	r0, [sp, #4]
     98c:	ldr	r0, [r0, #20]
     990:	ldr	r1, [sp]
     994:	ldr	r0, [r0, r1, lsl #2]
     998:	ldr	r1, [sp, #8]
     99c:	add	r2, r1, #8
     9a0:	ldr	r1, [r1, #4]
     9a4:	sub	r1, r1, #1
     9a8:	add	r1, r2, r1, lsl #4
     9ac:	str	r0, [r1]
     9b0:	b	9dc <coda_mem_cursor_goto_next_array_element+0x118>
     9b4:	ldr	r0, [sp, #4]
     9b8:	ldr	r0, [r0, #4]
     9bc:	ldr	r0, [r0]
     9c0:	bl	0 <coda_no_data_singleton>
     9c4:	ldr	r1, [sp, #8]
     9c8:	add	r2, r1, #8
     9cc:	ldr	r1, [r1, #4]
     9d0:	sub	r1, r1, #1
     9d4:	add	r1, r2, r1, lsl #4
     9d8:	str	r0, [r1]
     9dc:	ldr	r0, [sp]
     9e0:	ldr	r1, [sp, #8]
     9e4:	ldr	r2, [r1, #4]
     9e8:	add	r1, r1, r2, lsl #4
     9ec:	str	r0, [r1, #-4]
     9f0:	ldr	r0, [sp, #8]
     9f4:	ldr	r1, [r0, #4]
     9f8:	mvn	r2, #0
     9fc:	str	r2, [r0, r1, lsl #4]!
     a00:	str	r2, [r0, #4]
     a04:	movw	r0, #0
     a08:	str	r0, [fp, #-4]
     a0c:	b	a50 <coda_mem_cursor_goto_next_array_element+0x18c>
     a10:	ldr	r0, [sp, #4]
     a14:	ldr	r0, [r0, #8]
     a18:	cmp	r0, #2
     a1c:	bne	a24 <coda_mem_cursor_goto_next_array_element+0x160>
     a20:	b	a44 <coda_mem_cursor_goto_next_array_element+0x180>
     a24:	movw	r0, #0
     a28:	movt	r0, #0
     a2c:	movw	r1, #0
     a30:	movt	r1, #0
     a34:	movw	r2, #229	; 0xe5
     a38:	movw	r3, #0
     a3c:	movt	r3, #0
     a40:	bl	0 <__assert_fail>
     a44:	ldr	r0, [sp, #8]
     a48:	bl	0 <coda_ascbin_cursor_goto_next_array_element>
     a4c:	str	r0, [fp, #-4]
     a50:	ldr	r0, [fp, #-4]
     a54:	mov	sp, fp
     a58:	pop	{fp, pc}

00000a5c <coda_mem_cursor_goto_attributes>:
     a5c:	push	{fp, lr}
     a60:	mov	fp, sp
     a64:	sub	sp, sp, #8
     a68:	str	r0, [sp, #4]
     a6c:	ldr	r0, [sp, #4]
     a70:	ldr	r1, [r0, #4]
     a74:	add	r1, r1, #1
     a78:	str	r1, [r0, #4]
     a7c:	ldr	r0, [sp, #4]
     a80:	add	r1, r0, #8
     a84:	ldr	r0, [r0, #4]
     a88:	sub	r0, r0, #2
     a8c:	add	r0, r1, r0, lsl #4
     a90:	ldr	r0, [r0]
     a94:	ldr	r0, [r0, #12]
     a98:	movw	r1, #0
     a9c:	cmp	r0, r1
     aa0:	beq	acc <coda_mem_cursor_goto_attributes+0x70>
     aa4:	ldr	r0, [sp, #4]
     aa8:	add	r1, r0, #8
     aac:	ldr	r0, [r0, #4]
     ab0:	add	r2, r1, r0, lsl #4
     ab4:	ldr	r2, [r2, #-32]	; 0xffffffe0
     ab8:	ldr	r2, [r2, #12]
     abc:	sub	r0, r0, #1
     ac0:	add	r0, r1, r0, lsl #4
     ac4:	str	r2, [r0]
     ac8:	b	b00 <coda_mem_cursor_goto_attributes+0xa4>
     acc:	ldr	r0, [sp, #4]
     ad0:	ldr	r1, [r0, #4]
     ad4:	add	r0, r0, r1, lsl #4
     ad8:	ldr	r0, [r0, #-24]	; 0xffffffe8
     adc:	ldr	r0, [r0, #4]
     ae0:	ldr	r0, [r0]
     ae4:	bl	0 <coda_mem_empty_record>
     ae8:	ldr	r1, [sp, #4]
     aec:	add	r2, r1, #8
     af0:	ldr	r1, [r1, #4]
     af4:	sub	r1, r1, #1
     af8:	add	r1, r2, r1, lsl #4
     afc:	str	r0, [r1]
     b00:	ldr	r0, [sp, #4]
     b04:	ldr	r1, [r0, #4]
     b08:	add	r0, r0, r1, lsl #4
     b0c:	mvn	r1, #0
     b10:	str	r1, [r0, #-4]
     b14:	ldr	r0, [sp, #4]
     b18:	ldr	r2, [r0, #4]
     b1c:	str	r1, [r0, r2, lsl #4]!
     b20:	str	r1, [r0, #4]
     b24:	movw	r0, #0
     b28:	mov	sp, fp
     b2c:	pop	{fp, pc}

00000b30 <coda_mem_cursor_use_base_type_of_special_type>:
     b30:	push	{fp, lr}
     b34:	mov	fp, sp
     b38:	sub	sp, sp, #16
     b3c:	str	r0, [sp, #8]
     b40:	ldr	r0, [sp, #8]
     b44:	add	r1, r0, #8
     b48:	ldr	r0, [r0, #4]
     b4c:	sub	r0, r0, #1
     b50:	add	r0, r1, r0, lsl #4
     b54:	ldr	r0, [r0]
     b58:	str	r0, [sp, #4]
     b5c:	ldr	r0, [sp, #4]
     b60:	ldr	r0, [r0, #8]
     b64:	cmp	r0, #3
     b68:	bne	b94 <coda_mem_cursor_use_base_type_of_special_type+0x64>
     b6c:	ldr	r0, [sp, #8]
     b70:	add	r1, r0, #8
     b74:	ldr	r0, [r0, #4]
     b78:	sub	r0, r0, #1
     b7c:	ldr	r0, [r1, r0, lsl #4]!
     b80:	ldr	r0, [r0, #16]
     b84:	str	r0, [r1]
     b88:	movw	r0, #0
     b8c:	str	r0, [fp, #-4]
     b90:	b	bf4 <coda_mem_cursor_use_base_type_of_special_type+0xc4>
     b94:	ldr	r0, [sp, #4]
     b98:	ldr	r0, [r0, #8]
     b9c:	cmp	r0, #2
     ba0:	bne	ba8 <coda_mem_cursor_use_base_type_of_special_type+0x78>
     ba4:	b	bc8 <coda_mem_cursor_use_base_type_of_special_type+0x98>
     ba8:	movw	r0, #0
     bac:	movt	r0, #0
     bb0:	movw	r1, #0
     bb4:	movt	r1, #0
     bb8:	movw	r2, #263	; 0x107
     bbc:	movw	r3, #0
     bc0:	movt	r3, #0
     bc4:	bl	0 <__assert_fail>
     bc8:	ldr	r0, [sp, #4]
     bcc:	ldr	r0, [r0, #4]
     bd0:	ldr	r0, [r0, #44]	; 0x2c
     bd4:	ldr	r1, [sp, #8]
     bd8:	add	r2, r1, #8
     bdc:	ldr	r1, [r1, #4]
     be0:	sub	r1, r1, #1
     be4:	add	r1, r2, r1, lsl #4
     be8:	str	r0, [r1]
     bec:	movw	r0, #0
     bf0:	str	r0, [fp, #-4]
     bf4:	ldr	r0, [fp, #-4]
     bf8:	mov	sp, fp
     bfc:	pop	{fp, pc}

00000c00 <coda_mem_cursor_get_string_length>:
     c00:	push	{fp, lr}
     c04:	mov	fp, sp
     c08:	sub	sp, sp, #24
     c0c:	str	r0, [fp, #-8]
     c10:	str	r1, [sp, #12]
     c14:	ldr	r0, [fp, #-8]
     c18:	mov	r1, sp
     c1c:	bl	c80 <coda_mem_cursor_get_bit_size>
     c20:	cmp	r0, #0
     c24:	beq	c34 <coda_mem_cursor_get_string_length+0x34>
     c28:	mvn	r0, #0
     c2c:	str	r0, [fp, #-4]
     c30:	b	c74 <coda_mem_cursor_get_string_length+0x74>
     c34:	ldr	r0, [sp, #4]
     c38:	cmn	r0, #1
     c3c:	bgt	c54 <coda_mem_cursor_get_string_length+0x54>
     c40:	b	c44 <coda_mem_cursor_get_string_length+0x44>
     c44:	ldr	r0, [sp, #12]
     c48:	mvn	r1, #0
     c4c:	str	r1, [r0]
     c50:	b	c6c <coda_mem_cursor_get_string_length+0x6c>
     c54:	ldr	r0, [sp]
     c58:	ldr	r1, [sp, #4]
     c5c:	lsr	r0, r0, #3
     c60:	orr	r0, r0, r1, lsl #29
     c64:	ldr	r1, [sp, #12]
     c68:	str	r0, [r1]
     c6c:	movw	r0, #0
     c70:	str	r0, [fp, #-4]
     c74:	ldr	r0, [fp, #-4]
     c78:	mov	sp, fp
     c7c:	pop	{fp, pc}

00000c80 <coda_mem_cursor_get_bit_size>:
     c80:	push	{r4, r5, fp, lr}
     c84:	add	fp, sp, #8
     c88:	sub	sp, sp, #544	; 0x220
     c8c:	str	r0, [fp, #-16]
     c90:	str	r1, [fp, #-20]	; 0xffffffec
     c94:	ldr	r0, [fp, #-16]
     c98:	add	r1, r0, #8
     c9c:	ldr	r0, [r0, #4]
     ca0:	sub	r0, r0, #1
     ca4:	add	r0, r1, r0, lsl #4
     ca8:	ldr	r0, [r0]
     cac:	str	r0, [fp, #-24]	; 0xffffffe8
     cb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cb4:	ldr	r0, [r0, #8]
     cb8:	cmp	r0, #3
     cbc:	bne	d18 <coda_mem_cursor_get_bit_size+0x98>
     cc0:	ldr	r0, [fp, #-16]
     cc4:	add	r1, sp, #8
     cc8:	mov	r2, r1
     ccc:	str	r0, [sp, #4]
     cd0:	mov	r0, r2
     cd4:	ldr	r2, [sp, #4]
     cd8:	str	r1, [sp]
     cdc:	mov	r1, r2
     ce0:	movw	r2, #520	; 0x208
     ce4:	bl	0 <memcpy>
     ce8:	ldr	r0, [sp]
     cec:	bl	0 <coda_cursor_use_base_type_of_special_type>
     cf0:	cmp	r0, #0
     cf4:	beq	d04 <coda_mem_cursor_get_bit_size+0x84>
     cf8:	mvn	r0, #0
     cfc:	str	r0, [fp, #-12]
     d00:	b	dd0 <coda_mem_cursor_get_bit_size+0x150>
     d04:	ldr	r1, [fp, #-20]	; 0xffffffec
     d08:	add	r0, sp, #8
     d0c:	bl	0 <coda_cursor_get_bit_size>
     d10:	str	r0, [fp, #-12]
     d14:	b	dd0 <coda_mem_cursor_get_bit_size+0x150>
     d18:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d1c:	ldr	r0, [r0, #8]
     d20:	cmp	r0, #2
     d24:	bne	db8 <coda_mem_cursor_get_bit_size+0x138>
     d28:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d2c:	ldr	r0, [r0, #4]
     d30:	ldr	r0, [r0]
     d34:	cmp	r0, #0
     d38:	bne	d60 <coda_mem_cursor_get_bit_size+0xe0>
     d3c:	ldr	r0, [fp, #-16]
     d40:	ldr	r1, [fp, #-20]	; 0xffffffec
     d44:	bl	0 <coda_ascii_cursor_get_bit_size>
     d48:	cmp	r0, #0
     d4c:	beq	d5c <coda_mem_cursor_get_bit_size+0xdc>
     d50:	mvn	r0, #0
     d54:	str	r0, [fp, #-12]
     d58:	b	dd0 <coda_mem_cursor_get_bit_size+0x150>
     d5c:	b	d84 <coda_mem_cursor_get_bit_size+0x104>
     d60:	ldr	r0, [fp, #-16]
     d64:	ldr	r1, [fp, #-20]	; 0xffffffec
     d68:	bl	0 <coda_bin_cursor_get_bit_size>
     d6c:	cmp	r0, #0
     d70:	beq	d80 <coda_mem_cursor_get_bit_size+0x100>
     d74:	mvn	r0, #0
     d78:	str	r0, [fp, #-12]
     d7c:	b	dd0 <coda_mem_cursor_get_bit_size+0x150>
     d80:	b	d84 <coda_mem_cursor_get_bit_size+0x104>
     d84:	ldr	r0, [fp, #-20]	; 0xffffffec
     d88:	ldr	r0, [r0, #4]
     d8c:	cmn	r0, #1
     d90:	bgt	db4 <coda_mem_cursor_get_bit_size+0x134>
     d94:	b	d98 <coda_mem_cursor_get_bit_size+0x118>
     d98:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d9c:	ldr	r0, [r0, #16]
     da0:	lsl	r1, r0, #3
     da4:	sbfx	r0, r0, #28, #1
     da8:	ldr	r2, [fp, #-20]	; 0xffffffec
     dac:	str	r0, [r2, #4]
     db0:	str	r1, [r2]
     db4:	b	dc8 <coda_mem_cursor_get_bit_size+0x148>
     db8:	ldr	r0, [fp, #-20]	; 0xffffffec
     dbc:	mvn	r1, #0
     dc0:	str	r1, [r0, #4]
     dc4:	str	r1, [r0]
     dc8:	movw	r0, #0
     dcc:	str	r0, [fp, #-12]
     dd0:	ldr	r0, [fp, #-12]
     dd4:	sub	sp, fp, #8
     dd8:	pop	{r4, r5, fp, pc}

00000ddc <coda_mem_cursor_get_num_elements>:
     ddc:	push	{fp, lr}
     de0:	mov	fp, sp
     de4:	sub	sp, sp, #24
     de8:	str	r0, [fp, #-8]
     dec:	str	r1, [sp, #12]
     df0:	ldr	r0, [fp, #-8]
     df4:	ldr	r1, [r0, #4]
     df8:	add	r0, r0, r1, lsl #4
     dfc:	ldr	r0, [r0, #-8]
     e00:	str	r0, [sp, #8]
     e04:	ldr	r0, [sp, #8]
     e08:	ldr	r0, [r0, #8]
     e0c:	cmp	r0, #3
     e10:	str	r0, [sp, #4]
     e14:	bhi	ed0 <coda_mem_cursor_get_num_elements+0xf4>
     e18:	add	r0, pc, #8
     e1c:	ldr	r1, [sp, #4]
     e20:	ldr	r0, [r0, r1, lsl #2]
     e24:	mov	pc, r0
     e28:	.word	0x00000e38
     e2c:	.word	0x00000e60
     e30:	.word	0x00000e88
     e34:	.word	0x00000ec4
     e38:	ldr	r0, [fp, #-8]
     e3c:	add	r1, r0, #8
     e40:	ldr	r0, [r0, #4]
     e44:	sub	r0, r0, #1
     e48:	add	r0, r1, r0, lsl #4
     e4c:	ldr	r0, [r0]
     e50:	ldr	r0, [r0, #16]
     e54:	ldr	r1, [sp, #12]
     e58:	str	r0, [r1]
     e5c:	b	ed0 <coda_mem_cursor_get_num_elements+0xf4>
     e60:	ldr	r0, [fp, #-8]
     e64:	add	r1, r0, #8
     e68:	ldr	r0, [r0, #4]
     e6c:	sub	r0, r0, #1
     e70:	add	r0, r1, r0, lsl #4
     e74:	ldr	r0, [r0]
     e78:	ldr	r0, [r0, #16]
     e7c:	ldr	r1, [sp, #12]
     e80:	str	r0, [r1]
     e84:	b	ed0 <coda_mem_cursor_get_num_elements+0xf4>
     e88:	ldr	r0, [sp, #8]
     e8c:	ldr	r0, [r0, #4]
     e90:	ldr	r0, [r0]
     e94:	cmp	r0, #0
     e98:	bne	eb0 <coda_mem_cursor_get_num_elements+0xd4>
     e9c:	ldr	r0, [fp, #-8]
     ea0:	ldr	r1, [sp, #12]
     ea4:	bl	0 <coda_ascii_cursor_get_num_elements>
     ea8:	str	r0, [fp, #-4]
     eac:	b	ed8 <coda_mem_cursor_get_num_elements+0xfc>
     eb0:	ldr	r0, [fp, #-8]
     eb4:	ldr	r1, [sp, #12]
     eb8:	bl	0 <coda_bin_cursor_get_num_elements>
     ebc:	str	r0, [fp, #-4]
     ec0:	b	ed8 <coda_mem_cursor_get_num_elements+0xfc>
     ec4:	ldr	r0, [sp, #12]
     ec8:	movw	r1, #1
     ecc:	str	r1, [r0]
     ed0:	movw	r0, #0
     ed4:	str	r0, [fp, #-4]
     ed8:	ldr	r0, [fp, #-4]
     edc:	mov	sp, fp
     ee0:	pop	{fp, pc}

00000ee4 <coda_mem_cursor_get_record_field_available_status>:
     ee4:	push	{fp, lr}
     ee8:	mov	fp, sp
     eec:	sub	sp, sp, #24
     ef0:	str	r0, [fp, #-8]
     ef4:	str	r1, [sp, #12]
     ef8:	str	r2, [sp, #8]
     efc:	ldr	r0, [fp, #-8]
     f00:	add	r1, r0, #8
     f04:	ldr	r0, [r0, #4]
     f08:	sub	r0, r0, #1
     f0c:	add	r0, r1, r0, lsl #4
     f10:	ldr	r0, [r0]
     f14:	str	r0, [sp, #4]
     f18:	ldr	r0, [sp, #4]
     f1c:	ldr	r0, [r0, #8]
     f20:	cmp	r0, #2
     f24:	bne	f40 <coda_mem_cursor_get_record_field_available_status+0x5c>
     f28:	ldr	r0, [fp, #-8]
     f2c:	ldr	r1, [sp, #12]
     f30:	ldr	r2, [sp, #8]
     f34:	bl	0 <coda_ascbin_cursor_get_record_field_available_status>
     f38:	str	r0, [fp, #-4]
     f3c:	b	ff0 <coda_mem_cursor_get_record_field_available_status+0x10c>
     f40:	ldr	r0, [sp, #4]
     f44:	ldr	r0, [r0, #8]
     f48:	cmp	r0, #0
     f4c:	bne	f54 <coda_mem_cursor_get_record_field_available_status+0x70>
     f50:	b	f74 <coda_mem_cursor_get_record_field_available_status+0x90>
     f54:	movw	r0, #0
     f58:	movt	r0, #0
     f5c:	movw	r1, #0
     f60:	movt	r1, #0
     f64:	movw	r2, #364	; 0x16c
     f68:	movw	r3, #0
     f6c:	movt	r3, #0
     f70:	bl	0 <__assert_fail>
     f74:	ldr	r0, [sp, #12]
     f78:	cmp	r0, #0
     f7c:	blt	f94 <coda_mem_cursor_get_record_field_available_status+0xb0>
     f80:	ldr	r0, [sp, #12]
     f84:	ldr	r1, [sp, #4]
     f88:	ldr	r1, [r1, #16]
     f8c:	cmp	r0, r1
     f90:	blt	fbc <coda_mem_cursor_get_record_field_available_status+0xd8>
     f94:	ldr	r2, [sp, #12]
     f98:	ldr	r0, [sp, #4]
     f9c:	ldr	r3, [r0, #16]
     fa0:	mvn	r0, #100	; 0x64
     fa4:	movw	r1, #0
     fa8:	movt	r1, #0
     fac:	bl	0 <coda_set_error>
     fb0:	mvn	r0, #0
     fb4:	str	r0, [fp, #-4]
     fb8:	b	ff0 <coda_mem_cursor_get_record_field_available_status+0x10c>
     fbc:	ldr	r0, [sp, #4]
     fc0:	ldr	r0, [r0, #20]
     fc4:	ldr	r1, [sp, #12]
     fc8:	add	r0, r0, r1, lsl #2
     fcc:	ldr	r0, [r0]
     fd0:	movw	r1, #0
     fd4:	cmp	r0, r1
     fd8:	movw	r0, #0
     fdc:	movne	r0, #1
     fe0:	and	r0, r0, #1
     fe4:	ldr	r2, [sp, #8]
     fe8:	str	r0, [r2]
     fec:	str	r1, [fp, #-4]
     ff0:	ldr	r0, [fp, #-4]
     ff4:	mov	sp, fp
     ff8:	pop	{fp, pc}

00000ffc <coda_mem_cursor_get_array_dim>:
     ffc:	push	{fp, lr}
    1000:	mov	fp, sp
    1004:	sub	sp, sp, #32
    1008:	str	r0, [fp, #-8]
    100c:	str	r1, [fp, #-12]
    1010:	str	r2, [sp, #16]
    1014:	ldr	r0, [fp, #-8]
    1018:	add	r1, r0, #8
    101c:	ldr	r0, [r0, #4]
    1020:	sub	r0, r0, #1
    1024:	add	r0, r1, r0, lsl #4
    1028:	ldr	r0, [r0]
    102c:	str	r0, [sp, #12]
    1030:	ldr	r0, [sp, #12]
    1034:	ldr	r0, [r0, #8]
    1038:	cmp	r0, #2
    103c:	bne	1058 <coda_mem_cursor_get_array_dim+0x5c>
    1040:	ldr	r0, [fp, #-8]
    1044:	ldr	r1, [fp, #-12]
    1048:	ldr	r2, [sp, #16]
    104c:	bl	0 <coda_ascbin_cursor_get_array_dim>
    1050:	str	r0, [fp, #-4]
    1054:	b	1148 <coda_mem_cursor_get_array_dim+0x14c>
    1058:	ldr	r0, [sp, #12]
    105c:	ldr	r0, [r0, #8]
    1060:	cmp	r0, #1
    1064:	bne	106c <coda_mem_cursor_get_array_dim+0x70>
    1068:	b	108c <coda_mem_cursor_get_array_dim+0x90>
    106c:	movw	r0, #0
    1070:	movt	r0, #0
    1074:	movw	r1, #0
    1078:	movt	r1, #0
    107c:	movw	r2, #413	; 0x19d
    1080:	movw	r3, #0
    1084:	movt	r3, #0
    1088:	bl	0 <__assert_fail>
    108c:	ldr	r0, [fp, #-8]
    1090:	add	r1, r0, #8
    1094:	ldr	r0, [r0, #4]
    1098:	sub	r0, r0, #1
    109c:	add	r0, r1, r0, lsl #4
    10a0:	ldr	r0, [r0]
    10a4:	str	r0, [sp, #8]
    10a8:	ldr	r0, [sp, #8]
    10ac:	ldr	r0, [r0, #4]
    10b0:	ldr	r0, [r0, #44]	; 0x2c
    10b4:	cmp	r0, #0
    10b8:	blt	1124 <coda_mem_cursor_get_array_dim+0x128>
    10bc:	ldr	r0, [sp, #8]
    10c0:	ldr	r0, [r0, #4]
    10c4:	ldr	r0, [r0, #48]	; 0x30
    10c8:	ldr	r1, [fp, #-12]
    10cc:	str	r0, [r1]
    10d0:	movw	r0, #0
    10d4:	str	r0, [sp, #4]
    10d8:	ldr	r0, [sp, #4]
    10dc:	ldr	r1, [sp, #8]
    10e0:	ldr	r1, [r1, #4]
    10e4:	ldr	r1, [r1, #48]	; 0x30
    10e8:	cmp	r0, r1
    10ec:	bge	1120 <coda_mem_cursor_get_array_dim+0x124>
    10f0:	ldr	r0, [sp, #8]
    10f4:	ldr	r0, [r0, #4]
    10f8:	ldr	r1, [sp, #4]
    10fc:	add	r0, r0, r1, lsl #2
    1100:	ldr	r0, [r0, #52]	; 0x34
    1104:	ldr	r2, [sp, #16]
    1108:	add	r1, r2, r1, lsl #2
    110c:	str	r0, [r1]
    1110:	ldr	r0, [sp, #4]
    1114:	add	r0, r0, #1
    1118:	str	r0, [sp, #4]
    111c:	b	10d8 <coda_mem_cursor_get_array_dim+0xdc>
    1120:	b	1140 <coda_mem_cursor_get_array_dim+0x144>
    1124:	ldr	r0, [fp, #-12]
    1128:	movw	r1, #1
    112c:	str	r1, [r0]
    1130:	ldr	r0, [sp, #8]
    1134:	ldr	r0, [r0, #16]
    1138:	ldr	r1, [sp, #16]
    113c:	str	r0, [r1]
    1140:	movw	r0, #0
    1144:	str	r0, [fp, #-4]
    1148:	ldr	r0, [fp, #-4]
    114c:	mov	sp, fp
    1150:	pop	{fp, pc}

00001154 <coda_mem_cursor_read_int8>:
    1154:	push	{fp, lr}
    1158:	mov	fp, sp
    115c:	sub	sp, sp, #16
    1160:	str	r0, [sp, #8]
    1164:	str	r1, [sp, #4]
    1168:	ldr	r0, [sp, #8]
    116c:	add	r1, r0, #8
    1170:	ldr	r0, [r0, #4]
    1174:	sub	r0, r0, #1
    1178:	add	r0, r1, r0, lsl #4
    117c:	ldr	r0, [r0]
    1180:	str	r0, [sp]
    1184:	ldr	r0, [sp]
    1188:	ldr	r0, [r0, #8]
    118c:	cmp	r0, #2
    1190:	bne	1198 <coda_mem_cursor_read_int8+0x44>
    1194:	b	11b8 <coda_mem_cursor_read_int8+0x64>
    1198:	movw	r0, #0
    119c:	movt	r0, #0
    11a0:	movw	r1, #0
    11a4:	movt	r1, #0
    11a8:	movw	r2, #439	; 0x1b7
    11ac:	movw	r3, #0
    11b0:	movt	r3, #0
    11b4:	bl	0 <__assert_fail>
    11b8:	ldr	r0, [sp]
    11bc:	ldr	r0, [r0, #4]
    11c0:	ldr	r0, [r0]
    11c4:	cmp	r0, #0
    11c8:	bne	11e0 <coda_mem_cursor_read_int8+0x8c>
    11cc:	ldr	r0, [sp, #8]
    11d0:	ldr	r1, [sp, #4]
    11d4:	bl	0 <coda_ascii_cursor_read_int8>
    11d8:	str	r0, [fp, #-4]
    11dc:	b	11f0 <coda_mem_cursor_read_int8+0x9c>
    11e0:	ldr	r0, [sp, #8]
    11e4:	ldr	r1, [sp, #4]
    11e8:	bl	0 <coda_bin_cursor_read_int8>
    11ec:	str	r0, [fp, #-4]
    11f0:	ldr	r0, [fp, #-4]
    11f4:	mov	sp, fp
    11f8:	pop	{fp, pc}

000011fc <coda_mem_cursor_read_uint8>:
    11fc:	push	{fp, lr}
    1200:	mov	fp, sp
    1204:	sub	sp, sp, #16
    1208:	str	r0, [sp, #8]
    120c:	str	r1, [sp, #4]
    1210:	ldr	r0, [sp, #8]
    1214:	add	r1, r0, #8
    1218:	ldr	r0, [r0, #4]
    121c:	sub	r0, r0, #1
    1220:	add	r0, r1, r0, lsl #4
    1224:	ldr	r0, [r0]
    1228:	str	r0, [sp]
    122c:	ldr	r0, [sp]
    1230:	ldr	r0, [r0, #8]
    1234:	cmp	r0, #2
    1238:	bne	1240 <coda_mem_cursor_read_uint8+0x44>
    123c:	b	1260 <coda_mem_cursor_read_uint8+0x64>
    1240:	movw	r0, #0
    1244:	movt	r0, #0
    1248:	movw	r1, #0
    124c:	movt	r1, #0
    1250:	movw	r2, #451	; 0x1c3
    1254:	movw	r3, #0
    1258:	movt	r3, #0
    125c:	bl	0 <__assert_fail>
    1260:	ldr	r0, [sp]
    1264:	ldr	r0, [r0, #4]
    1268:	ldr	r0, [r0]
    126c:	cmp	r0, #0
    1270:	bne	1288 <coda_mem_cursor_read_uint8+0x8c>
    1274:	ldr	r0, [sp, #8]
    1278:	ldr	r1, [sp, #4]
    127c:	bl	0 <coda_ascii_cursor_read_uint8>
    1280:	str	r0, [fp, #-4]
    1284:	b	1298 <coda_mem_cursor_read_uint8+0x9c>
    1288:	ldr	r0, [sp, #8]
    128c:	ldr	r1, [sp, #4]
    1290:	bl	0 <coda_bin_cursor_read_uint8>
    1294:	str	r0, [fp, #-4]
    1298:	ldr	r0, [fp, #-4]
    129c:	mov	sp, fp
    12a0:	pop	{fp, pc}

000012a4 <coda_mem_cursor_read_int16>:
    12a4:	push	{fp, lr}
    12a8:	mov	fp, sp
    12ac:	sub	sp, sp, #16
    12b0:	str	r0, [sp, #8]
    12b4:	str	r1, [sp, #4]
    12b8:	ldr	r0, [sp, #8]
    12bc:	add	r1, r0, #8
    12c0:	ldr	r0, [r0, #4]
    12c4:	sub	r0, r0, #1
    12c8:	add	r0, r1, r0, lsl #4
    12cc:	ldr	r0, [r0]
    12d0:	str	r0, [sp]
    12d4:	ldr	r0, [sp]
    12d8:	ldr	r0, [r0, #8]
    12dc:	cmp	r0, #2
    12e0:	bne	12e8 <coda_mem_cursor_read_int16+0x44>
    12e4:	b	1308 <coda_mem_cursor_read_int16+0x64>
    12e8:	movw	r0, #0
    12ec:	movt	r0, #0
    12f0:	movw	r1, #0
    12f4:	movt	r1, #0
    12f8:	movw	r2, #463	; 0x1cf
    12fc:	movw	r3, #0
    1300:	movt	r3, #0
    1304:	bl	0 <__assert_fail>
    1308:	ldr	r0, [sp]
    130c:	ldr	r0, [r0, #4]
    1310:	ldr	r0, [r0]
    1314:	cmp	r0, #0
    1318:	bne	1330 <coda_mem_cursor_read_int16+0x8c>
    131c:	ldr	r0, [sp, #8]
    1320:	ldr	r1, [sp, #4]
    1324:	bl	0 <coda_ascii_cursor_read_int16>
    1328:	str	r0, [fp, #-4]
    132c:	b	1340 <coda_mem_cursor_read_int16+0x9c>
    1330:	ldr	r0, [sp, #8]
    1334:	ldr	r1, [sp, #4]
    1338:	bl	0 <coda_bin_cursor_read_int16>
    133c:	str	r0, [fp, #-4]
    1340:	ldr	r0, [fp, #-4]
    1344:	mov	sp, fp
    1348:	pop	{fp, pc}

0000134c <coda_mem_cursor_read_uint16>:
    134c:	push	{fp, lr}
    1350:	mov	fp, sp
    1354:	sub	sp, sp, #16
    1358:	str	r0, [sp, #8]
    135c:	str	r1, [sp, #4]
    1360:	ldr	r0, [sp, #8]
    1364:	add	r1, r0, #8
    1368:	ldr	r0, [r0, #4]
    136c:	sub	r0, r0, #1
    1370:	add	r0, r1, r0, lsl #4
    1374:	ldr	r0, [r0]
    1378:	str	r0, [sp]
    137c:	ldr	r0, [sp]
    1380:	ldr	r0, [r0, #8]
    1384:	cmp	r0, #2
    1388:	bne	1390 <coda_mem_cursor_read_uint16+0x44>
    138c:	b	13b0 <coda_mem_cursor_read_uint16+0x64>
    1390:	movw	r0, #0
    1394:	movt	r0, #0
    1398:	movw	r1, #0
    139c:	movt	r1, #0
    13a0:	movw	r2, #475	; 0x1db
    13a4:	movw	r3, #0
    13a8:	movt	r3, #0
    13ac:	bl	0 <__assert_fail>
    13b0:	ldr	r0, [sp]
    13b4:	ldr	r0, [r0, #4]
    13b8:	ldr	r0, [r0]
    13bc:	cmp	r0, #0
    13c0:	bne	13d8 <coda_mem_cursor_read_uint16+0x8c>
    13c4:	ldr	r0, [sp, #8]
    13c8:	ldr	r1, [sp, #4]
    13cc:	bl	0 <coda_ascii_cursor_read_uint16>
    13d0:	str	r0, [fp, #-4]
    13d4:	b	13e8 <coda_mem_cursor_read_uint16+0x9c>
    13d8:	ldr	r0, [sp, #8]
    13dc:	ldr	r1, [sp, #4]
    13e0:	bl	0 <coda_bin_cursor_read_uint16>
    13e4:	str	r0, [fp, #-4]
    13e8:	ldr	r0, [fp, #-4]
    13ec:	mov	sp, fp
    13f0:	pop	{fp, pc}

000013f4 <coda_mem_cursor_read_int32>:
    13f4:	push	{fp, lr}
    13f8:	mov	fp, sp
    13fc:	sub	sp, sp, #16
    1400:	str	r0, [sp, #8]
    1404:	str	r1, [sp, #4]
    1408:	ldr	r0, [sp, #8]
    140c:	add	r1, r0, #8
    1410:	ldr	r0, [r0, #4]
    1414:	sub	r0, r0, #1
    1418:	add	r0, r1, r0, lsl #4
    141c:	ldr	r0, [r0]
    1420:	str	r0, [sp]
    1424:	ldr	r0, [sp]
    1428:	ldr	r0, [r0, #8]
    142c:	cmp	r0, #2
    1430:	bne	1438 <coda_mem_cursor_read_int32+0x44>
    1434:	b	1458 <coda_mem_cursor_read_int32+0x64>
    1438:	movw	r0, #0
    143c:	movt	r0, #0
    1440:	movw	r1, #0
    1444:	movt	r1, #0
    1448:	movw	r2, #487	; 0x1e7
    144c:	movw	r3, #0
    1450:	movt	r3, #0
    1454:	bl	0 <__assert_fail>
    1458:	ldr	r0, [sp]
    145c:	ldr	r0, [r0, #4]
    1460:	ldr	r0, [r0]
    1464:	cmp	r0, #0
    1468:	bne	1480 <coda_mem_cursor_read_int32+0x8c>
    146c:	ldr	r0, [sp, #8]
    1470:	ldr	r1, [sp, #4]
    1474:	bl	0 <coda_ascii_cursor_read_int32>
    1478:	str	r0, [fp, #-4]
    147c:	b	1490 <coda_mem_cursor_read_int32+0x9c>
    1480:	ldr	r0, [sp, #8]
    1484:	ldr	r1, [sp, #4]
    1488:	bl	0 <coda_bin_cursor_read_int32>
    148c:	str	r0, [fp, #-4]
    1490:	ldr	r0, [fp, #-4]
    1494:	mov	sp, fp
    1498:	pop	{fp, pc}

0000149c <coda_mem_cursor_read_uint32>:
    149c:	push	{fp, lr}
    14a0:	mov	fp, sp
    14a4:	sub	sp, sp, #16
    14a8:	str	r0, [sp, #8]
    14ac:	str	r1, [sp, #4]
    14b0:	ldr	r0, [sp, #8]
    14b4:	add	r1, r0, #8
    14b8:	ldr	r0, [r0, #4]
    14bc:	sub	r0, r0, #1
    14c0:	add	r0, r1, r0, lsl #4
    14c4:	ldr	r0, [r0]
    14c8:	str	r0, [sp]
    14cc:	ldr	r0, [sp]
    14d0:	ldr	r0, [r0, #8]
    14d4:	cmp	r0, #2
    14d8:	bne	14e0 <coda_mem_cursor_read_uint32+0x44>
    14dc:	b	1500 <coda_mem_cursor_read_uint32+0x64>
    14e0:	movw	r0, #0
    14e4:	movt	r0, #0
    14e8:	movw	r1, #0
    14ec:	movt	r1, #0
    14f0:	movw	r2, #499	; 0x1f3
    14f4:	movw	r3, #0
    14f8:	movt	r3, #0
    14fc:	bl	0 <__assert_fail>
    1500:	ldr	r0, [sp]
    1504:	ldr	r0, [r0, #4]
    1508:	ldr	r0, [r0]
    150c:	cmp	r0, #0
    1510:	bne	1528 <coda_mem_cursor_read_uint32+0x8c>
    1514:	ldr	r0, [sp, #8]
    1518:	ldr	r1, [sp, #4]
    151c:	bl	0 <coda_ascii_cursor_read_uint32>
    1520:	str	r0, [fp, #-4]
    1524:	b	1538 <coda_mem_cursor_read_uint32+0x9c>
    1528:	ldr	r0, [sp, #8]
    152c:	ldr	r1, [sp, #4]
    1530:	bl	0 <coda_bin_cursor_read_uint32>
    1534:	str	r0, [fp, #-4]
    1538:	ldr	r0, [fp, #-4]
    153c:	mov	sp, fp
    1540:	pop	{fp, pc}

00001544 <coda_mem_cursor_read_int64>:
    1544:	push	{fp, lr}
    1548:	mov	fp, sp
    154c:	sub	sp, sp, #16
    1550:	str	r0, [sp, #8]
    1554:	str	r1, [sp, #4]
    1558:	ldr	r0, [sp, #8]
    155c:	add	r1, r0, #8
    1560:	ldr	r0, [r0, #4]
    1564:	sub	r0, r0, #1
    1568:	add	r0, r1, r0, lsl #4
    156c:	ldr	r0, [r0]
    1570:	str	r0, [sp]
    1574:	ldr	r0, [sp]
    1578:	ldr	r0, [r0, #8]
    157c:	cmp	r0, #2
    1580:	bne	1588 <coda_mem_cursor_read_int64+0x44>
    1584:	b	15a8 <coda_mem_cursor_read_int64+0x64>
    1588:	movw	r0, #0
    158c:	movt	r0, #0
    1590:	movw	r1, #0
    1594:	movt	r1, #0
    1598:	movw	r2, #511	; 0x1ff
    159c:	movw	r3, #0
    15a0:	movt	r3, #0
    15a4:	bl	0 <__assert_fail>
    15a8:	ldr	r0, [sp]
    15ac:	ldr	r0, [r0, #4]
    15b0:	ldr	r0, [r0]
    15b4:	cmp	r0, #0
    15b8:	bne	15d0 <coda_mem_cursor_read_int64+0x8c>
    15bc:	ldr	r0, [sp, #8]
    15c0:	ldr	r1, [sp, #4]
    15c4:	bl	0 <coda_ascii_cursor_read_int64>
    15c8:	str	r0, [fp, #-4]
    15cc:	b	15e0 <coda_mem_cursor_read_int64+0x9c>
    15d0:	ldr	r0, [sp, #8]
    15d4:	ldr	r1, [sp, #4]
    15d8:	bl	0 <coda_bin_cursor_read_int64>
    15dc:	str	r0, [fp, #-4]
    15e0:	ldr	r0, [fp, #-4]
    15e4:	mov	sp, fp
    15e8:	pop	{fp, pc}

000015ec <coda_mem_cursor_read_uint64>:
    15ec:	push	{fp, lr}
    15f0:	mov	fp, sp
    15f4:	sub	sp, sp, #16
    15f8:	str	r0, [sp, #8]
    15fc:	str	r1, [sp, #4]
    1600:	ldr	r0, [sp, #8]
    1604:	add	r1, r0, #8
    1608:	ldr	r0, [r0, #4]
    160c:	sub	r0, r0, #1
    1610:	add	r0, r1, r0, lsl #4
    1614:	ldr	r0, [r0]
    1618:	str	r0, [sp]
    161c:	ldr	r0, [sp]
    1620:	ldr	r0, [r0, #8]
    1624:	cmp	r0, #2
    1628:	bne	1630 <coda_mem_cursor_read_uint64+0x44>
    162c:	b	1650 <coda_mem_cursor_read_uint64+0x64>
    1630:	movw	r0, #0
    1634:	movt	r0, #0
    1638:	movw	r1, #0
    163c:	movt	r1, #0
    1640:	movw	r2, #523	; 0x20b
    1644:	movw	r3, #0
    1648:	movt	r3, #0
    164c:	bl	0 <__assert_fail>
    1650:	ldr	r0, [sp]
    1654:	ldr	r0, [r0, #4]
    1658:	ldr	r0, [r0]
    165c:	cmp	r0, #0
    1660:	bne	1678 <coda_mem_cursor_read_uint64+0x8c>
    1664:	ldr	r0, [sp, #8]
    1668:	ldr	r1, [sp, #4]
    166c:	bl	0 <coda_ascii_cursor_read_uint64>
    1670:	str	r0, [fp, #-4]
    1674:	b	1688 <coda_mem_cursor_read_uint64+0x9c>
    1678:	ldr	r0, [sp, #8]
    167c:	ldr	r1, [sp, #4]
    1680:	bl	0 <coda_bin_cursor_read_uint64>
    1684:	str	r0, [fp, #-4]
    1688:	ldr	r0, [fp, #-4]
    168c:	mov	sp, fp
    1690:	pop	{fp, pc}

00001694 <coda_mem_cursor_read_float>:
    1694:	push	{fp, lr}
    1698:	mov	fp, sp
    169c:	sub	sp, sp, #16
    16a0:	str	r0, [sp, #8]
    16a4:	str	r1, [sp, #4]
    16a8:	ldr	r0, [sp, #8]
    16ac:	add	r1, r0, #8
    16b0:	ldr	r0, [r0, #4]
    16b4:	sub	r0, r0, #1
    16b8:	add	r0, r1, r0, lsl #4
    16bc:	ldr	r0, [r0]
    16c0:	str	r0, [sp]
    16c4:	ldr	r0, [sp]
    16c8:	ldr	r0, [r0, #8]
    16cc:	cmp	r0, #2
    16d0:	bne	16d8 <coda_mem_cursor_read_float+0x44>
    16d4:	b	16f8 <coda_mem_cursor_read_float+0x64>
    16d8:	movw	r0, #0
    16dc:	movt	r0, #0
    16e0:	movw	r1, #0
    16e4:	movt	r1, #0
    16e8:	movw	r2, #535	; 0x217
    16ec:	movw	r3, #0
    16f0:	movt	r3, #0
    16f4:	bl	0 <__assert_fail>
    16f8:	ldr	r0, [sp]
    16fc:	ldr	r0, [r0, #4]
    1700:	ldr	r0, [r0]
    1704:	cmp	r0, #0
    1708:	bne	1720 <coda_mem_cursor_read_float+0x8c>
    170c:	ldr	r0, [sp, #8]
    1710:	ldr	r1, [sp, #4]
    1714:	bl	0 <coda_ascii_cursor_read_float>
    1718:	str	r0, [fp, #-4]
    171c:	b	1730 <coda_mem_cursor_read_float+0x9c>
    1720:	ldr	r0, [sp, #8]
    1724:	ldr	r1, [sp, #4]
    1728:	bl	0 <coda_bin_cursor_read_float>
    172c:	str	r0, [fp, #-4]
    1730:	ldr	r0, [fp, #-4]
    1734:	mov	sp, fp
    1738:	pop	{fp, pc}

0000173c <coda_mem_cursor_read_double>:
    173c:	push	{fp, lr}
    1740:	mov	fp, sp
    1744:	sub	sp, sp, #16
    1748:	str	r0, [sp, #8]
    174c:	str	r1, [sp, #4]
    1750:	ldr	r0, [sp, #8]
    1754:	add	r1, r0, #8
    1758:	ldr	r0, [r0, #4]
    175c:	sub	r0, r0, #1
    1760:	add	r0, r1, r0, lsl #4
    1764:	ldr	r0, [r0]
    1768:	str	r0, [sp]
    176c:	ldr	r0, [sp]
    1770:	ldr	r0, [r0, #8]
    1774:	cmp	r0, #2
    1778:	bne	1780 <coda_mem_cursor_read_double+0x44>
    177c:	b	17a0 <coda_mem_cursor_read_double+0x64>
    1780:	movw	r0, #0
    1784:	movt	r0, #0
    1788:	movw	r1, #0
    178c:	movt	r1, #0
    1790:	movw	r2, #547	; 0x223
    1794:	movw	r3, #0
    1798:	movt	r3, #0
    179c:	bl	0 <__assert_fail>
    17a0:	ldr	r0, [sp]
    17a4:	ldr	r0, [r0, #4]
    17a8:	ldr	r0, [r0]
    17ac:	cmp	r0, #0
    17b0:	bne	17c8 <coda_mem_cursor_read_double+0x8c>
    17b4:	ldr	r0, [sp, #8]
    17b8:	ldr	r1, [sp, #4]
    17bc:	bl	0 <coda_ascii_cursor_read_double>
    17c0:	str	r0, [fp, #-4]
    17c4:	b	17d8 <coda_mem_cursor_read_double+0x9c>
    17c8:	ldr	r0, [sp, #8]
    17cc:	ldr	r1, [sp, #4]
    17d0:	bl	0 <coda_bin_cursor_read_double>
    17d4:	str	r0, [fp, #-4]
    17d8:	ldr	r0, [fp, #-4]
    17dc:	mov	sp, fp
    17e0:	pop	{fp, pc}

000017e4 <coda_mem_cursor_read_char>:
    17e4:	push	{fp, lr}
    17e8:	mov	fp, sp
    17ec:	sub	sp, sp, #16
    17f0:	str	r0, [sp, #8]
    17f4:	str	r1, [sp, #4]
    17f8:	ldr	r0, [sp, #8]
    17fc:	add	r1, r0, #8
    1800:	ldr	r0, [r0, #4]
    1804:	sub	r0, r0, #1
    1808:	add	r0, r1, r0, lsl #4
    180c:	ldr	r0, [r0]
    1810:	str	r0, [sp]
    1814:	ldr	r0, [sp]
    1818:	ldr	r0, [r0, #8]
    181c:	cmp	r0, #2
    1820:	bne	1828 <coda_mem_cursor_read_char+0x44>
    1824:	b	1848 <coda_mem_cursor_read_char+0x64>
    1828:	movw	r0, #0
    182c:	movt	r0, #0
    1830:	movw	r1, #0
    1834:	movt	r1, #0
    1838:	movw	r2, #559	; 0x22f
    183c:	movw	r3, #0
    1840:	movt	r3, #0
    1844:	bl	0 <__assert_fail>
    1848:	ldr	r0, [sp]
    184c:	ldr	r0, [r0, #4]
    1850:	ldr	r0, [r0]
    1854:	cmp	r0, #0
    1858:	beq	1870 <coda_mem_cursor_read_char+0x8c>
    185c:	ldr	r0, [sp]
    1860:	ldr	r0, [r0, #4]
    1864:	ldr	r0, [r0]
    1868:	cmp	r0, #2
    186c:	bne	1884 <coda_mem_cursor_read_char+0xa0>
    1870:	ldr	r0, [sp, #8]
    1874:	ldr	r1, [sp, #4]
    1878:	bl	0 <coda_ascii_cursor_read_char>
    187c:	str	r0, [fp, #-4]
    1880:	b	1894 <coda_mem_cursor_read_char+0xb0>
    1884:	ldr	r0, [sp, #8]
    1888:	ldr	r1, [sp, #4]
    188c:	bl	0 <coda_bin_cursor_read_char>
    1890:	str	r0, [fp, #-4]
    1894:	ldr	r0, [fp, #-4]
    1898:	mov	sp, fp
    189c:	pop	{fp, pc}

000018a0 <coda_mem_cursor_read_string>:
    18a0:	push	{r4, r5, fp, lr}
    18a4:	add	fp, sp, #8
    18a8:	sub	sp, sp, #552	; 0x228
    18ac:	str	r0, [fp, #-16]
    18b0:	str	r1, [fp, #-20]	; 0xffffffec
    18b4:	str	r2, [fp, #-24]	; 0xffffffe8
    18b8:	ldr	r0, [fp, #-16]
    18bc:	add	r1, r0, #8
    18c0:	ldr	r0, [r0, #4]
    18c4:	sub	r0, r0, #1
    18c8:	add	r0, r1, r0, lsl #4
    18cc:	ldr	r0, [r0]
    18d0:	str	r0, [fp, #-28]	; 0xffffffe4
    18d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    18d8:	ldr	r0, [r0, #8]
    18dc:	cmp	r0, #3
    18e0:	bne	1940 <coda_mem_cursor_read_string+0xa0>
    18e4:	ldr	r0, [fp, #-16]
    18e8:	add	r1, sp, #8
    18ec:	mov	r2, r1
    18f0:	str	r0, [sp, #4]
    18f4:	mov	r0, r2
    18f8:	ldr	r2, [sp, #4]
    18fc:	str	r1, [sp]
    1900:	mov	r1, r2
    1904:	movw	r2, #520	; 0x208
    1908:	bl	0 <memcpy>
    190c:	ldr	r0, [sp]
    1910:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1914:	cmp	r0, #0
    1918:	beq	1928 <coda_mem_cursor_read_string+0x88>
    191c:	mvn	r0, #0
    1920:	str	r0, [fp, #-12]
    1924:	b	1988 <coda_mem_cursor_read_string+0xe8>
    1928:	ldr	r1, [fp, #-20]	; 0xffffffec
    192c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1930:	add	r0, sp, #8
    1934:	bl	0 <coda_cursor_read_string>
    1938:	str	r0, [fp, #-12]
    193c:	b	1988 <coda_mem_cursor_read_string+0xe8>
    1940:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1944:	ldr	r0, [r0, #8]
    1948:	cmp	r0, #2
    194c:	bne	1954 <coda_mem_cursor_read_string+0xb4>
    1950:	b	1974 <coda_mem_cursor_read_string+0xd4>
    1954:	movw	r0, #0
    1958:	movt	r0, #0
    195c:	movw	r1, #0
    1960:	movt	r1, #0
    1964:	movw	r2, #582	; 0x246
    1968:	movw	r3, #0
    196c:	movt	r3, #0
    1970:	bl	0 <__assert_fail>
    1974:	ldr	r0, [fp, #-16]
    1978:	ldr	r1, [fp, #-20]	; 0xffffffec
    197c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1980:	bl	0 <coda_ascii_cursor_read_string>
    1984:	str	r0, [fp, #-12]
    1988:	ldr	r0, [fp, #-12]
    198c:	sub	sp, fp, #8
    1990:	pop	{r4, r5, fp, pc}

00001994 <coda_mem_cursor_read_bits>:
    1994:	push	{r4, sl, fp, lr}
    1998:	add	fp, sp, #8
    199c:	sub	sp, sp, #576	; 0x240
    19a0:	ldr	ip, [fp, #12]
    19a4:	ldr	lr, [fp, #8]
    19a8:	str	r0, [fp, #-16]
    19ac:	str	r1, [fp, #-20]	; 0xffffffec
    19b0:	str	r3, [fp, #-28]	; 0xffffffe4
    19b4:	str	r2, [fp, #-32]	; 0xffffffe0
    19b8:	str	ip, [fp, #-36]	; 0xffffffdc
    19bc:	str	lr, [fp, #-40]	; 0xffffffd8
    19c0:	ldr	r0, [fp, #-16]
    19c4:	add	r1, r0, #8
    19c8:	ldr	r0, [r0, #4]
    19cc:	sub	r0, r0, #1
    19d0:	add	r0, r1, r0, lsl #4
    19d4:	ldr	r0, [r0]
    19d8:	str	r0, [fp, #-44]	; 0xffffffd4
    19dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    19e0:	ldr	r0, [r0, #8]
    19e4:	cmp	r0, #3
    19e8:	bne	1a60 <coda_mem_cursor_read_bits+0xcc>
    19ec:	ldr	r0, [fp, #-16]
    19f0:	add	r1, sp, #16
    19f4:	mov	r2, r1
    19f8:	str	r0, [sp, #12]
    19fc:	mov	r0, r2
    1a00:	ldr	r2, [sp, #12]
    1a04:	str	r1, [sp, #8]
    1a08:	mov	r1, r2
    1a0c:	movw	r2, #520	; 0x208
    1a10:	bl	0 <memcpy>
    1a14:	ldr	r0, [sp, #8]
    1a18:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1a1c:	cmp	r0, #0
    1a20:	beq	1a30 <coda_mem_cursor_read_bits+0x9c>
    1a24:	mvn	r0, #0
    1a28:	str	r0, [fp, #-12]
    1a2c:	b	1afc <coda_mem_cursor_read_bits+0x168>
    1a30:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a34:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1a38:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1a3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1a40:	ldr	ip, [fp, #-36]	; 0xffffffdc
    1a44:	mov	lr, sp
    1a48:	str	ip, [lr, #4]
    1a4c:	str	r0, [lr]
    1a50:	add	r0, sp, #16
    1a54:	bl	0 <coda_cursor_read_bits>
    1a58:	str	r0, [fp, #-12]
    1a5c:	b	1afc <coda_mem_cursor_read_bits+0x168>
    1a60:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1a64:	ldr	r0, [r0, #8]
    1a68:	cmp	r0, #2
    1a6c:	bne	1ae4 <coda_mem_cursor_read_bits+0x150>
    1a70:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1a74:	ldr	r0, [r0, #4]
    1a78:	ldr	r0, [r0]
    1a7c:	cmp	r0, #0
    1a80:	bne	1ab4 <coda_mem_cursor_read_bits+0x120>
    1a84:	ldr	r0, [fp, #-16]
    1a88:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a8c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1a90:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1a94:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1a98:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1a9c:	mov	r4, sp
    1aa0:	str	lr, [r4, #4]
    1aa4:	str	ip, [r4]
    1aa8:	bl	0 <coda_ascii_cursor_read_bits>
    1aac:	str	r0, [fp, #-12]
    1ab0:	b	1afc <coda_mem_cursor_read_bits+0x168>
    1ab4:	ldr	r0, [fp, #-16]
    1ab8:	ldr	r1, [fp, #-20]	; 0xffffffec
    1abc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1ac0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1ac4:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1ac8:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1acc:	mov	r4, sp
    1ad0:	str	lr, [r4, #4]
    1ad4:	str	ip, [r4]
    1ad8:	bl	0 <coda_bin_cursor_read_bits>
    1adc:	str	r0, [fp, #-12]
    1ae0:	b	1afc <coda_mem_cursor_read_bits+0x168>
    1ae4:	mvn	r0, #104	; 0x68
    1ae8:	movw	r1, #0
    1aec:	movt	r1, #0
    1af0:	bl	0 <coda_set_error>
    1af4:	mvn	r0, #0
    1af8:	str	r0, [fp, #-12]
    1afc:	ldr	r0, [fp, #-12]
    1b00:	sub	sp, fp, #8
    1b04:	pop	{r4, sl, fp, pc}

00001b08 <coda_mem_cursor_read_bytes>:
    1b08:	push	{r4, sl, fp, lr}
    1b0c:	add	fp, sp, #8
    1b10:	sub	sp, sp, #576	; 0x240
    1b14:	ldr	ip, [fp, #12]
    1b18:	ldr	lr, [fp, #8]
    1b1c:	str	r0, [fp, #-16]
    1b20:	str	r1, [fp, #-20]	; 0xffffffec
    1b24:	str	r3, [fp, #-28]	; 0xffffffe4
    1b28:	str	r2, [fp, #-32]	; 0xffffffe0
    1b2c:	str	ip, [fp, #-36]	; 0xffffffdc
    1b30:	str	lr, [fp, #-40]	; 0xffffffd8
    1b34:	ldr	r0, [fp, #-16]
    1b38:	add	r1, r0, #8
    1b3c:	ldr	r0, [r0, #4]
    1b40:	sub	r0, r0, #1
    1b44:	add	r0, r1, r0, lsl #4
    1b48:	ldr	r0, [r0]
    1b4c:	str	r0, [fp, #-44]	; 0xffffffd4
    1b50:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1b54:	ldr	r0, [r0, #8]
    1b58:	cmp	r0, #3
    1b5c:	bne	1bd4 <coda_mem_cursor_read_bytes+0xcc>
    1b60:	ldr	r0, [fp, #-16]
    1b64:	add	r1, sp, #16
    1b68:	mov	r2, r1
    1b6c:	str	r0, [sp, #12]
    1b70:	mov	r0, r2
    1b74:	ldr	r2, [sp, #12]
    1b78:	str	r1, [sp, #8]
    1b7c:	mov	r1, r2
    1b80:	movw	r2, #520	; 0x208
    1b84:	bl	0 <memcpy>
    1b88:	ldr	r0, [sp, #8]
    1b8c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1b90:	cmp	r0, #0
    1b94:	beq	1ba4 <coda_mem_cursor_read_bytes+0x9c>
    1b98:	mvn	r0, #0
    1b9c:	str	r0, [fp, #-12]
    1ba0:	b	1c84 <coda_mem_cursor_read_bytes+0x17c>
    1ba4:	ldr	r1, [fp, #-20]	; 0xffffffec
    1ba8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1bac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1bb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1bb4:	ldr	ip, [fp, #-36]	; 0xffffffdc
    1bb8:	mov	lr, sp
    1bbc:	str	ip, [lr, #4]
    1bc0:	str	r0, [lr]
    1bc4:	add	r0, sp, #16
    1bc8:	bl	0 <coda_cursor_read_bytes>
    1bcc:	str	r0, [fp, #-12]
    1bd0:	b	1c84 <coda_mem_cursor_read_bytes+0x17c>
    1bd4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1bd8:	ldr	r0, [r0, #8]
    1bdc:	cmp	r0, #2
    1be0:	bne	1c6c <coda_mem_cursor_read_bytes+0x164>
    1be4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1be8:	ldr	r0, [r0, #4]
    1bec:	ldr	r0, [r0]
    1bf0:	cmp	r0, #0
    1bf4:	beq	1c0c <coda_mem_cursor_read_bytes+0x104>
    1bf8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1bfc:	ldr	r0, [r0, #4]
    1c00:	ldr	r0, [r0]
    1c04:	cmp	r0, #2
    1c08:	bne	1c3c <coda_mem_cursor_read_bytes+0x134>
    1c0c:	ldr	r0, [fp, #-16]
    1c10:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c14:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1c18:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1c1c:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1c20:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1c24:	mov	r4, sp
    1c28:	str	lr, [r4, #4]
    1c2c:	str	ip, [r4]
    1c30:	bl	0 <coda_ascii_cursor_read_bytes>
    1c34:	str	r0, [fp, #-12]
    1c38:	b	1c84 <coda_mem_cursor_read_bytes+0x17c>
    1c3c:	ldr	r0, [fp, #-16]
    1c40:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c44:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1c48:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1c4c:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1c50:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1c54:	mov	r4, sp
    1c58:	str	lr, [r4, #4]
    1c5c:	str	ip, [r4]
    1c60:	bl	0 <coda_bin_cursor_read_bytes>
    1c64:	str	r0, [fp, #-12]
    1c68:	b	1c84 <coda_mem_cursor_read_bytes+0x17c>
    1c6c:	mvn	r0, #104	; 0x68
    1c70:	movw	r1, #0
    1c74:	movt	r1, #0
    1c78:	bl	0 <coda_set_error>
    1c7c:	mvn	r0, #0
    1c80:	str	r0, [fp, #-12]
    1c84:	ldr	r0, [fp, #-12]
    1c88:	sub	sp, fp, #8
    1c8c:	pop	{r4, sl, fp, pc}

00001c90 <coda_mem_cursor_read_int8_array>:
    1c90:	push	{fp, lr}
    1c94:	mov	fp, sp
    1c98:	sub	sp, sp, #32
    1c9c:	str	r0, [fp, #-8]
    1ca0:	str	r1, [fp, #-12]
    1ca4:	str	r2, [sp, #16]
    1ca8:	ldr	r0, [fp, #-8]
    1cac:	add	r1, r0, #8
    1cb0:	ldr	r0, [r0, #4]
    1cb4:	sub	r0, r0, #1
    1cb8:	add	r0, r1, r0, lsl #4
    1cbc:	ldr	r0, [r0]
    1cc0:	str	r0, [sp, #12]
    1cc4:	ldr	r0, [sp, #12]
    1cc8:	ldr	r0, [r0, #8]
    1ccc:	cmp	r0, #1
    1cd0:	bne	1d08 <coda_mem_cursor_read_int8_array+0x78>
    1cd4:	ldr	r0, [fp, #-8]
    1cd8:	ldr	r2, [fp, #-12]
    1cdc:	ldr	r1, [sp, #16]
    1ce0:	movw	r3, #0
    1ce4:	movt	r3, #0
    1ce8:	str	r1, [sp, #8]
    1cec:	mov	r1, r3
    1cf0:	movw	r3, #1
    1cf4:	ldr	ip, [sp, #8]
    1cf8:	str	ip, [sp]
    1cfc:	bl	1e40 <read_array>
    1d00:	str	r0, [fp, #-4]
    1d04:	b	1e34 <coda_mem_cursor_read_int8_array+0x1a4>
    1d08:	ldr	r0, [sp, #12]
    1d0c:	ldr	r0, [r0, #8]
    1d10:	cmp	r0, #2
    1d14:	bne	1d1c <coda_mem_cursor_read_int8_array+0x8c>
    1d18:	b	1d3c <coda_mem_cursor_read_int8_array+0xac>
    1d1c:	movw	r0, #0
    1d20:	movt	r0, #0
    1d24:	movw	r1, #0
    1d28:	movt	r1, #0
    1d2c:	movw	r2, #651	; 0x28b
    1d30:	movw	r3, #0
    1d34:	movt	r3, #0
    1d38:	bl	0 <__assert_fail>
    1d3c:	ldr	r0, [sp, #12]
    1d40:	ldr	r0, [r0, #4]
    1d44:	ldr	r0, [r0, #40]	; 0x28
    1d48:	ldr	r0, [r0]
    1d4c:	cmp	r0, #1
    1d50:	bne	1d88 <coda_mem_cursor_read_int8_array+0xf8>
    1d54:	ldr	r0, [fp, #-8]
    1d58:	ldr	r2, [fp, #-12]
    1d5c:	ldr	r1, [sp, #16]
    1d60:	movw	r3, #0
    1d64:	movt	r3, #0
    1d68:	str	r1, [sp, #4]
    1d6c:	mov	r1, r3
    1d70:	movw	r3, #1
    1d74:	ldr	ip, [sp, #4]
    1d78:	str	ip, [sp]
    1d7c:	bl	1e40 <read_array>
    1d80:	str	r0, [fp, #-4]
    1d84:	b	1e34 <coda_mem_cursor_read_int8_array+0x1a4>
    1d88:	ldr	r0, [sp, #12]
    1d8c:	ldr	r0, [r0, #4]
    1d90:	ldr	r0, [r0, #40]	; 0x28
    1d94:	ldr	r0, [r0]
    1d98:	cmp	r0, #0
    1d9c:	bne	1da4 <coda_mem_cursor_read_int8_array+0x114>
    1da0:	b	1dc4 <coda_mem_cursor_read_int8_array+0x134>
    1da4:	movw	r0, #0
    1da8:	movt	r0, #0
    1dac:	movw	r1, #0
    1db0:	movt	r1, #0
    1db4:	movw	r2, #657	; 0x291
    1db8:	movw	r3, #0
    1dbc:	movt	r3, #0
    1dc0:	bl	0 <__assert_fail>
    1dc4:	ldr	r0, [fp, #-8]
    1dc8:	ldr	r2, [fp, #-12]
    1dcc:	movw	r1, #0
    1dd0:	movt	r1, #0
    1dd4:	movw	r3, #1
    1dd8:	movw	ip, #0
    1ddc:	str	ip, [sp]
    1de0:	bl	1e40 <read_array>
    1de4:	cmp	r0, #0
    1de8:	beq	1df8 <coda_mem_cursor_read_int8_array+0x168>
    1dec:	mvn	r0, #0
    1df0:	str	r0, [fp, #-4]
    1df4:	b	1e34 <coda_mem_cursor_read_int8_array+0x1a4>
    1df8:	ldr	r0, [sp, #16]
    1dfc:	cmp	r0, #0
    1e00:	beq	1e2c <coda_mem_cursor_read_int8_array+0x19c>
    1e04:	ldr	r0, [fp, #-8]
    1e08:	ldr	r1, [fp, #-12]
    1e0c:	movw	r2, #1
    1e10:	bl	2224 <transpose_array>
    1e14:	cmp	r0, #0
    1e18:	beq	1e28 <coda_mem_cursor_read_int8_array+0x198>
    1e1c:	mvn	r0, #0
    1e20:	str	r0, [fp, #-4]
    1e24:	b	1e34 <coda_mem_cursor_read_int8_array+0x1a4>
    1e28:	b	1e2c <coda_mem_cursor_read_int8_array+0x19c>
    1e2c:	movw	r0, #0
    1e30:	str	r0, [fp, #-4]
    1e34:	ldr	r0, [fp, #-4]
    1e38:	mov	sp, fp
    1e3c:	pop	{fp, pc}

00001e40 <read_array>:
    1e40:	push	{r4, r5, fp, lr}
    1e44:	add	fp, sp, #8
    1e48:	sub	sp, sp, #664	; 0x298
    1e4c:	ldr	ip, [fp, #8]
    1e50:	add	lr, sp, #88	; 0x58
    1e54:	str	r0, [fp, #-16]
    1e58:	str	r1, [fp, #-20]	; 0xffffffec
    1e5c:	str	r2, [fp, #-24]	; 0xffffffe8
    1e60:	str	r3, [fp, #-28]	; 0xffffffe4
    1e64:	ldr	r0, [fp, #-16]
    1e68:	add	r1, sp, #84	; 0x54
    1e6c:	mov	r2, lr
    1e70:	str	ip, [sp, #24]
    1e74:	bl	0 <coda_cursor_get_array_dim>
    1e78:	cmp	r0, #0
    1e7c:	beq	1e8c <read_array+0x4c>
    1e80:	mvn	r0, #0
    1e84:	str	r0, [fp, #-12]
    1e88:	b	2218 <read_array+0x3d8>
    1e8c:	ldr	r0, [fp, #-16]
    1e90:	add	r1, sp, #120	; 0x78
    1e94:	str	r0, [sp, #20]
    1e98:	mov	r0, r1
    1e9c:	ldr	r1, [sp, #20]
    1ea0:	movw	r2, #520	; 0x208
    1ea4:	bl	0 <memcpy>
    1ea8:	ldr	r0, [sp, #84]	; 0x54
    1eac:	cmp	r0, #1
    1eb0:	ble	1ec0 <read_array+0x80>
    1eb4:	ldr	r0, [fp, #8]
    1eb8:	cmp	r0, #1
    1ebc:	beq	1fe0 <read_array+0x1a0>
    1ec0:	movw	r0, #1
    1ec4:	str	r0, [sp, #80]	; 0x50
    1ec8:	movw	r0, #0
    1ecc:	str	r0, [sp, #76]	; 0x4c
    1ed0:	ldr	r0, [sp, #76]	; 0x4c
    1ed4:	ldr	r1, [sp, #84]	; 0x54
    1ed8:	cmp	r0, r1
    1edc:	bge	1f0c <read_array+0xcc>
    1ee0:	ldr	r0, [sp, #76]	; 0x4c
    1ee4:	add	r1, sp, #88	; 0x58
    1ee8:	add	r0, r1, r0, lsl #2
    1eec:	ldr	r0, [r0]
    1ef0:	ldr	r1, [sp, #80]	; 0x50
    1ef4:	mul	r0, r1, r0
    1ef8:	str	r0, [sp, #80]	; 0x50
    1efc:	ldr	r0, [sp, #76]	; 0x4c
    1f00:	add	r0, r0, #1
    1f04:	str	r0, [sp, #76]	; 0x4c
    1f08:	b	1ed0 <read_array+0x90>
    1f0c:	ldr	r0, [sp, #80]	; 0x50
    1f10:	cmp	r0, #0
    1f14:	ble	1fdc <read_array+0x19c>
    1f18:	add	r0, sp, #120	; 0x78
    1f1c:	movw	r1, #0
    1f20:	bl	0 <coda_cursor_goto_array_element_by_index>
    1f24:	cmp	r0, #0
    1f28:	beq	1f38 <read_array+0xf8>
    1f2c:	mvn	r0, #0
    1f30:	str	r0, [fp, #-12]
    1f34:	b	2218 <read_array+0x3d8>
    1f38:	movw	r0, #0
    1f3c:	str	r0, [sp, #76]	; 0x4c
    1f40:	ldr	r0, [sp, #76]	; 0x4c
    1f44:	ldr	r1, [sp, #80]	; 0x50
    1f48:	cmp	r0, r1
    1f4c:	bge	1fd8 <read_array+0x198>
    1f50:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f54:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1f58:	ldr	r2, [sp, #76]	; 0x4c
    1f5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1f60:	mul	r2, r2, r3
    1f64:	add	r1, r1, r2
    1f68:	add	r2, sp, #120	; 0x78
    1f6c:	str	r0, [sp, #16]
    1f70:	mov	r0, r2
    1f74:	ldr	r2, [sp, #16]
    1f78:	blx	r2
    1f7c:	cmp	r0, #0
    1f80:	beq	1f90 <read_array+0x150>
    1f84:	mvn	r0, #0
    1f88:	str	r0, [fp, #-12]
    1f8c:	b	2218 <read_array+0x3d8>
    1f90:	ldr	r0, [sp, #76]	; 0x4c
    1f94:	ldr	r1, [sp, #80]	; 0x50
    1f98:	sub	r1, r1, #1
    1f9c:	cmp	r0, r1
    1fa0:	bge	1fc4 <read_array+0x184>
    1fa4:	add	r0, sp, #120	; 0x78
    1fa8:	bl	0 <coda_cursor_goto_next_array_element>
    1fac:	cmp	r0, #0
    1fb0:	beq	1fc0 <read_array+0x180>
    1fb4:	mvn	r0, #0
    1fb8:	str	r0, [fp, #-12]
    1fbc:	b	2218 <read_array+0x3d8>
    1fc0:	b	1fc4 <read_array+0x184>
    1fc4:	b	1fc8 <read_array+0x188>
    1fc8:	ldr	r0, [sp, #76]	; 0x4c
    1fcc:	add	r0, r0, #1
    1fd0:	str	r0, [sp, #76]	; 0x4c
    1fd4:	b	1f40 <read_array+0x100>
    1fd8:	b	1fdc <read_array+0x19c>
    1fdc:	b	2210 <read_array+0x3d0>
    1fe0:	movw	r0, #1
    1fe4:	str	r0, [sp, #40]	; 0x28
    1fe8:	movw	r0, #0
    1fec:	str	r0, [sp, #76]	; 0x4c
    1ff0:	ldr	r0, [sp, #76]	; 0x4c
    1ff4:	ldr	r1, [sp, #84]	; 0x54
    1ff8:	cmp	r0, r1
    1ffc:	bge	2034 <read_array+0x1f4>
    2000:	ldr	r0, [sp, #76]	; 0x4c
    2004:	add	r1, sp, #40	; 0x28
    2008:	ldr	r2, [r1, r0, lsl #2]
    200c:	add	r3, sp, #88	; 0x58
    2010:	ldr	r3, [r3, r0, lsl #2]
    2014:	mul	r2, r2, r3
    2018:	add	r0, r0, #1
    201c:	add	r0, r1, r0, lsl #2
    2020:	str	r2, [r0]
    2024:	ldr	r0, [sp, #76]	; 0x4c
    2028:	add	r0, r0, #1
    202c:	str	r0, [sp, #76]	; 0x4c
    2030:	b	1ff0 <read_array+0x1b0>
    2034:	ldr	r0, [sp, #84]	; 0x54
    2038:	add	r1, sp, #40	; 0x28
    203c:	add	r0, r1, r0, lsl #2
    2040:	ldr	r0, [r0, #-4]
    2044:	str	r0, [sp, #36]	; 0x24
    2048:	ldr	r0, [sp, #84]	; 0x54
    204c:	add	r0, r1, r0, lsl #2
    2050:	ldr	r0, [r0]
    2054:	str	r0, [sp, #80]	; 0x50
    2058:	ldr	r0, [sp, #80]	; 0x50
    205c:	cmp	r0, #0
    2060:	ble	220c <read_array+0x3cc>
    2064:	movw	r0, #0
    2068:	str	r0, [sp, #32]
    206c:	str	r0, [sp, #28]
    2070:	add	r1, sp, #120	; 0x78
    2074:	str	r0, [sp, #12]
    2078:	mov	r0, r1
    207c:	ldr	r1, [sp, #12]
    2080:	bl	0 <coda_cursor_goto_array_element_by_index>
    2084:	cmp	r0, #0
    2088:	beq	2098 <read_array+0x258>
    208c:	mvn	r0, #0
    2090:	str	r0, [fp, #-12]
    2094:	b	2218 <read_array+0x3d8>
    2098:	b	209c <read_array+0x25c>
    209c:	b	20a0 <read_array+0x260>
    20a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    20a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    20a8:	ldr	r2, [sp, #28]
    20ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    20b0:	mul	r2, r2, r3
    20b4:	add	r1, r1, r2
    20b8:	add	r2, sp, #120	; 0x78
    20bc:	str	r0, [sp, #8]
    20c0:	mov	r0, r2
    20c4:	ldr	r2, [sp, #8]
    20c8:	blx	r2
    20cc:	cmp	r0, #0
    20d0:	beq	20e0 <read_array+0x2a0>
    20d4:	mvn	r0, #0
    20d8:	str	r0, [fp, #-12]
    20dc:	b	2218 <read_array+0x3d8>
    20e0:	ldr	r0, [sp, #32]
    20e4:	add	r0, r0, #1
    20e8:	str	r0, [sp, #32]
    20ec:	ldr	r0, [sp, #32]
    20f0:	ldr	r1, [sp, #80]	; 0x50
    20f4:	cmp	r0, r1
    20f8:	bge	211c <read_array+0x2dc>
    20fc:	add	r0, sp, #120	; 0x78
    2100:	bl	0 <coda_cursor_goto_next_array_element>
    2104:	cmp	r0, #0
    2108:	beq	2118 <read_array+0x2d8>
    210c:	mvn	r0, #0
    2110:	str	r0, [fp, #-12]
    2114:	b	2218 <read_array+0x3d8>
    2118:	b	211c <read_array+0x2dc>
    211c:	ldr	r0, [sp, #36]	; 0x24
    2120:	ldr	r1, [sp, #28]
    2124:	add	r0, r1, r0
    2128:	str	r0, [sp, #28]
    212c:	ldr	r0, [sp, #28]
    2130:	ldr	r1, [sp, #80]	; 0x50
    2134:	cmp	r0, r1
    2138:	blt	20a0 <read_array+0x260>
    213c:	ldr	r0, [sp, #32]
    2140:	ldr	r1, [sp, #80]	; 0x50
    2144:	cmp	r0, r1
    2148:	bne	2150 <read_array+0x310>
    214c:	b	2208 <read_array+0x3c8>
    2150:	ldr	r0, [sp, #84]	; 0x54
    2154:	add	r1, sp, #40	; 0x28
    2158:	add	r0, r1, r0, lsl #2
    215c:	ldr	r1, [r0, #-8]
    2160:	ldr	r0, [r0]
    2164:	sub	r0, r1, r0
    2168:	ldr	r1, [sp, #28]
    216c:	add	r0, r1, r0
    2170:	str	r0, [sp, #28]
    2174:	ldr	r0, [sp, #84]	; 0x54
    2178:	sub	r0, r0, #3
    217c:	str	r0, [sp, #76]	; 0x4c
    2180:	ldr	r0, [sp, #76]	; 0x4c
    2184:	cmp	r0, #0
    2188:	movw	r0, #0
    218c:	str	r0, [sp, #4]
    2190:	blt	21bc <read_array+0x37c>
    2194:	ldr	r0, [sp, #28]
    2198:	ldr	r1, [sp, #76]	; 0x4c
    219c:	add	r1, r1, #2
    21a0:	add	r2, sp, #40	; 0x28
    21a4:	add	r1, r2, r1, lsl #2
    21a8:	ldr	r1, [r1]
    21ac:	cmp	r0, r1
    21b0:	movw	r0, #0
    21b4:	movge	r0, #1
    21b8:	str	r0, [sp, #4]
    21bc:	ldr	r0, [sp, #4]
    21c0:	tst	r0, #1
    21c4:	beq	2204 <read_array+0x3c4>
    21c8:	ldr	r0, [sp, #76]	; 0x4c
    21cc:	add	r1, sp, #40	; 0x28
    21d0:	ldr	r2, [r1, r0, lsl #2]
    21d4:	add	r0, r0, #2
    21d8:	add	r0, r1, r0, lsl #2
    21dc:	ldr	r0, [r0]
    21e0:	sub	r0, r2, r0
    21e4:	ldr	r1, [sp, #28]
    21e8:	add	r0, r1, r0
    21ec:	str	r0, [sp, #28]
    21f0:	ldr	r0, [sp, #76]	; 0x4c
    21f4:	mvn	r1, #0
    21f8:	add	r0, r0, r1
    21fc:	str	r0, [sp, #76]	; 0x4c
    2200:	b	2180 <read_array+0x340>
    2204:	b	209c <read_array+0x25c>
    2208:	b	220c <read_array+0x3cc>
    220c:	b	2210 <read_array+0x3d0>
    2210:	movw	r0, #0
    2214:	str	r0, [fp, #-12]
    2218:	ldr	r0, [fp, #-12]
    221c:	sub	sp, fp, #8
    2220:	pop	{r4, r5, fp, pc}

00002224 <transpose_array>:
    2224:	push	{fp, lr}
    2228:	mov	fp, sp
    222c:	sub	sp, sp, #208	; 0xd0
    2230:	sub	r3, fp, #48	; 0x30
    2234:	str	r0, [fp, #-8]
    2238:	str	r1, [fp, #-12]
    223c:	str	r2, [fp, #-16]
    2240:	movw	r0, #0
    2244:	str	r0, [sp, #40]	; 0x28
    2248:	ldr	r0, [fp, #-8]
    224c:	sub	r1, fp, #52	; 0x34
    2250:	mov	r2, r3
    2254:	bl	0 <coda_cursor_get_array_dim>
    2258:	cmp	r0, #0
    225c:	beq	226c <transpose_array+0x48>
    2260:	mvn	r0, #0
    2264:	str	r0, [fp, #-4]
    2268:	b	28c8 <transpose_array+0x6a4>
    226c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2270:	cmp	r0, #1
    2274:	bgt	2284 <transpose_array+0x60>
    2278:	movw	r0, #0
    227c:	str	r0, [fp, #-4]
    2280:	b	28c8 <transpose_array+0x6a4>
    2284:	ldr	r0, [fp, #-12]
    2288:	str	r0, [sp, #32]
    228c:	movw	r0, #1
    2290:	str	r0, [fp, #-56]	; 0xffffffc8
    2294:	movw	r0, #0
    2298:	str	r0, [sp, #36]	; 0x24
    229c:	ldr	r0, [sp, #36]	; 0x24
    22a0:	ldr	r1, [fp, #-52]	; 0xffffffcc
    22a4:	cmp	r0, r1
    22a8:	bge	2304 <transpose_array+0xe0>
    22ac:	ldr	r0, [sp, #36]	; 0x24
    22b0:	sub	r1, fp, #48	; 0x30
    22b4:	ldr	r0, [r1, r0, lsl #2]
    22b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    22bc:	mul	r0, r2, r0
    22c0:	str	r0, [fp, #-56]	; 0xffffffc8
    22c4:	ldr	r0, [sp, #36]	; 0x24
    22c8:	add	r2, sp, #80	; 0x50
    22cc:	mov	r3, #0
    22d0:	str	r3, [r2, r0, lsl #2]
    22d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    22d8:	ldr	r2, [sp, #36]	; 0x24
    22dc:	sub	r0, r0, r2
    22e0:	add	r0, r1, r0, lsl #2
    22e4:	ldr	r0, [r0, #-4]
    22e8:	add	r1, sp, #44	; 0x2c
    22ec:	add	r1, r1, r2, lsl #2
    22f0:	str	r0, [r1]
    22f4:	ldr	r0, [sp, #36]	; 0x24
    22f8:	add	r0, r0, #1
    22fc:	str	r0, [sp, #36]	; 0x24
    2300:	b	229c <transpose_array+0x78>
    2304:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2308:	cmp	r0, #1
    230c:	bgt	231c <transpose_array+0xf8>
    2310:	movw	r0, #0
    2314:	str	r0, [fp, #-4]
    2318:	b	28c8 <transpose_array+0x6a4>
    231c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2320:	sub	r1, fp, #92	; 0x5c
    2324:	mov	r2, #1
    2328:	str	r2, [r1, r0, lsl #2]
    232c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2330:	add	r1, sp, #44	; 0x2c
    2334:	add	r0, r1, r0, lsl #2
    2338:	movw	r1, #1
    233c:	str	r1, [r0]
    2340:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2344:	str	r0, [sp, #36]	; 0x24
    2348:	ldr	r0, [sp, #36]	; 0x24
    234c:	cmp	r0, #0
    2350:	ble	238c <transpose_array+0x168>
    2354:	ldr	r0, [sp, #36]	; 0x24
    2358:	sub	r1, fp, #92	; 0x5c
    235c:	ldr	r2, [r1, r0, lsl #2]
    2360:	add	r3, sp, #44	; 0x2c
    2364:	ldr	r3, [r3, r0, lsl #2]
    2368:	mul	r2, r2, r3
    236c:	sub	r0, r0, #1
    2370:	add	r0, r1, r0, lsl #2
    2374:	str	r2, [r0]
    2378:	ldr	r0, [sp, #36]	; 0x24
    237c:	mvn	r1, #0
    2380:	add	r0, r0, r1
    2384:	str	r0, [sp, #36]	; 0x24
    2388:	b	2348 <transpose_array+0x124>
    238c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2390:	add	r1, sp, #44	; 0x2c
    2394:	mov	r2, #0
    2398:	str	r2, [r1, r0, lsl #2]
    239c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    23a0:	add	r1, sp, #80	; 0x50
    23a4:	add	r0, r1, r0, lsl #2
    23a8:	movw	r1, #0
    23ac:	str	r1, [r0]
    23b0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    23b4:	ldr	r1, [fp, #-16]
    23b8:	mul	r0, r0, r1
    23bc:	bl	0 <malloc>
    23c0:	str	r0, [sp, #28]
    23c4:	ldr	r0, [sp, #28]
    23c8:	movw	r1, #0
    23cc:	cmp	r0, r1
    23d0:	bne	240c <transpose_array+0x1e8>
    23d4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    23d8:	ldr	r1, [fp, #-16]
    23dc:	mul	r2, r0, r1
    23e0:	mvn	r0, #0
    23e4:	movw	r1, #0
    23e8:	movt	r1, #0
    23ec:	movw	r3, #0
    23f0:	movt	r3, #0
    23f4:	movw	ip, #93	; 0x5d
    23f8:	str	ip, [sp]
    23fc:	bl	0 <coda_set_error>
    2400:	mvn	r0, #0
    2404:	str	r0, [fp, #-4]
    2408:	b	28c8 <transpose_array+0x6a4>
    240c:	ldr	r0, [fp, #-16]
    2410:	sub	r0, r0, #1
    2414:	cmp	r0, #7
    2418:	str	r0, [sp, #8]
    241c:	bhi	2880 <transpose_array+0x65c>
    2420:	add	r0, pc, #8
    2424:	ldr	r1, [sp, #8]
    2428:	ldr	r0, [r0, r1, lsl #2]
    242c:	mov	pc, r0
    2430:	.word	0x00002450
    2434:	.word	0x00002558
    2438:	.word	0x00002880
    243c:	.word	0x00002668
    2440:	.word	0x00002880
    2444:	.word	0x00002880
    2448:	.word	0x00002880
    244c:	.word	0x00002770
    2450:	movw	r0, #0
    2454:	str	r0, [sp, #36]	; 0x24
    2458:	ldr	r0, [sp, #36]	; 0x24
    245c:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2460:	cmp	r0, r1
    2464:	bge	2554 <transpose_array+0x330>
    2468:	mov	r0, #0
    246c:	str	r0, [sp, #24]
    2470:	ldr	r0, [sp, #32]
    2474:	ldr	r1, [sp, #36]	; 0x24
    2478:	ldrb	r0, [r0, r1]
    247c:	ldr	r1, [sp, #28]
    2480:	ldr	r2, [sp, #40]	; 0x28
    2484:	strb	r0, [r1, r2]
    2488:	ldr	r0, [sp, #24]
    248c:	sub	r1, fp, #92	; 0x5c
    2490:	ldr	r0, [r1, r0, lsl #2]
    2494:	ldr	r1, [sp, #40]	; 0x28
    2498:	add	r0, r1, r0
    249c:	str	r0, [sp, #40]	; 0x28
    24a0:	ldr	r0, [sp, #24]
    24a4:	add	r1, sp, #80	; 0x50
    24a8:	add	r0, r1, r0, lsl #2
    24ac:	ldr	r1, [r0]
    24b0:	add	r1, r1, #1
    24b4:	str	r1, [r0]
    24b8:	ldr	r0, [sp, #24]
    24bc:	add	r1, sp, #80	; 0x50
    24c0:	ldr	r1, [r1, r0, lsl #2]
    24c4:	add	r2, sp, #44	; 0x2c
    24c8:	add	r0, r2, r0, lsl #2
    24cc:	ldr	r0, [r0]
    24d0:	cmp	r1, r0
    24d4:	bne	2540 <transpose_array+0x31c>
    24d8:	ldr	r0, [sp, #24]
    24dc:	add	r1, sp, #80	; 0x50
    24e0:	mov	r2, #0
    24e4:	str	r2, [r1, r0, lsl #2]
    24e8:	ldr	r0, [sp, #24]
    24ec:	sub	r2, fp, #92	; 0x5c
    24f0:	ldr	r3, [r2, r0, lsl #2]
    24f4:	add	ip, sp, #44	; 0x2c
    24f8:	ldr	r0, [ip, r0, lsl #2]
    24fc:	ldr	ip, [sp, #40]	; 0x28
    2500:	mls	r0, r3, r0, ip
    2504:	str	r0, [sp, #40]	; 0x28
    2508:	ldr	r0, [sp, #24]
    250c:	add	r0, r0, #1
    2510:	str	r0, [sp, #24]
    2514:	ldr	r0, [sp, #24]
    2518:	ldr	r0, [r2, r0, lsl #2]
    251c:	ldr	r2, [sp, #40]	; 0x28
    2520:	add	r0, r2, r0
    2524:	str	r0, [sp, #40]	; 0x28
    2528:	ldr	r0, [sp, #24]
    252c:	add	r0, r1, r0, lsl #2
    2530:	ldr	r1, [r0]
    2534:	add	r1, r1, #1
    2538:	str	r1, [r0]
    253c:	b	24b8 <transpose_array+0x294>
    2540:	b	2544 <transpose_array+0x320>
    2544:	ldr	r0, [sp, #36]	; 0x24
    2548:	add	r0, r0, #1
    254c:	str	r0, [sp, #36]	; 0x24
    2550:	b	2458 <transpose_array+0x234>
    2554:	b	28a0 <transpose_array+0x67c>
    2558:	movw	r0, #0
    255c:	str	r0, [sp, #36]	; 0x24
    2560:	ldr	r0, [sp, #36]	; 0x24
    2564:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2568:	cmp	r0, r1
    256c:	bge	2664 <transpose_array+0x440>
    2570:	mov	r0, #0
    2574:	str	r0, [sp, #20]
    2578:	ldr	r0, [sp, #32]
    257c:	ldr	r1, [sp, #36]	; 0x24
    2580:	add	r0, r0, r1, lsl #1
    2584:	ldrh	r0, [r0]
    2588:	ldr	r1, [sp, #28]
    258c:	ldr	r2, [sp, #40]	; 0x28
    2590:	add	r1, r1, r2, lsl #1
    2594:	strh	r0, [r1]
    2598:	ldr	r0, [sp, #20]
    259c:	sub	r1, fp, #92	; 0x5c
    25a0:	ldr	r0, [r1, r0, lsl #2]
    25a4:	ldr	r1, [sp, #40]	; 0x28
    25a8:	add	r0, r1, r0
    25ac:	str	r0, [sp, #40]	; 0x28
    25b0:	ldr	r0, [sp, #20]
    25b4:	add	r1, sp, #80	; 0x50
    25b8:	add	r0, r1, r0, lsl #2
    25bc:	ldr	r1, [r0]
    25c0:	add	r1, r1, #1
    25c4:	str	r1, [r0]
    25c8:	ldr	r0, [sp, #20]
    25cc:	add	r1, sp, #80	; 0x50
    25d0:	ldr	r1, [r1, r0, lsl #2]
    25d4:	add	r2, sp, #44	; 0x2c
    25d8:	add	r0, r2, r0, lsl #2
    25dc:	ldr	r0, [r0]
    25e0:	cmp	r1, r0
    25e4:	bne	2650 <transpose_array+0x42c>
    25e8:	ldr	r0, [sp, #20]
    25ec:	add	r1, sp, #80	; 0x50
    25f0:	mov	r2, #0
    25f4:	str	r2, [r1, r0, lsl #2]
    25f8:	ldr	r0, [sp, #20]
    25fc:	sub	r2, fp, #92	; 0x5c
    2600:	ldr	r3, [r2, r0, lsl #2]
    2604:	add	ip, sp, #44	; 0x2c
    2608:	ldr	r0, [ip, r0, lsl #2]
    260c:	ldr	ip, [sp, #40]	; 0x28
    2610:	mls	r0, r3, r0, ip
    2614:	str	r0, [sp, #40]	; 0x28
    2618:	ldr	r0, [sp, #20]
    261c:	add	r0, r0, #1
    2620:	str	r0, [sp, #20]
    2624:	ldr	r0, [sp, #20]
    2628:	ldr	r0, [r2, r0, lsl #2]
    262c:	ldr	r2, [sp, #40]	; 0x28
    2630:	add	r0, r2, r0
    2634:	str	r0, [sp, #40]	; 0x28
    2638:	ldr	r0, [sp, #20]
    263c:	add	r0, r1, r0, lsl #2
    2640:	ldr	r1, [r0]
    2644:	add	r1, r1, #1
    2648:	str	r1, [r0]
    264c:	b	25c8 <transpose_array+0x3a4>
    2650:	b	2654 <transpose_array+0x430>
    2654:	ldr	r0, [sp, #36]	; 0x24
    2658:	add	r0, r0, #1
    265c:	str	r0, [sp, #36]	; 0x24
    2660:	b	2560 <transpose_array+0x33c>
    2664:	b	28a0 <transpose_array+0x67c>
    2668:	movw	r0, #0
    266c:	str	r0, [sp, #36]	; 0x24
    2670:	ldr	r0, [sp, #36]	; 0x24
    2674:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2678:	cmp	r0, r1
    267c:	bge	276c <transpose_array+0x548>
    2680:	mov	r0, #0
    2684:	str	r0, [sp, #16]
    2688:	ldr	r0, [sp, #32]
    268c:	ldr	r1, [sp, #36]	; 0x24
    2690:	ldr	r0, [r0, r1, lsl #2]
    2694:	ldr	r1, [sp, #28]
    2698:	ldr	r2, [sp, #40]	; 0x28
    269c:	str	r0, [r1, r2, lsl #2]
    26a0:	ldr	r0, [sp, #16]
    26a4:	sub	r1, fp, #92	; 0x5c
    26a8:	ldr	r0, [r1, r0, lsl #2]
    26ac:	ldr	r1, [sp, #40]	; 0x28
    26b0:	add	r0, r1, r0
    26b4:	str	r0, [sp, #40]	; 0x28
    26b8:	ldr	r0, [sp, #16]
    26bc:	add	r1, sp, #80	; 0x50
    26c0:	add	r0, r1, r0, lsl #2
    26c4:	ldr	r1, [r0]
    26c8:	add	r1, r1, #1
    26cc:	str	r1, [r0]
    26d0:	ldr	r0, [sp, #16]
    26d4:	add	r1, sp, #80	; 0x50
    26d8:	ldr	r1, [r1, r0, lsl #2]
    26dc:	add	r2, sp, #44	; 0x2c
    26e0:	add	r0, r2, r0, lsl #2
    26e4:	ldr	r0, [r0]
    26e8:	cmp	r1, r0
    26ec:	bne	2758 <transpose_array+0x534>
    26f0:	ldr	r0, [sp, #16]
    26f4:	add	r1, sp, #80	; 0x50
    26f8:	mov	r2, #0
    26fc:	str	r2, [r1, r0, lsl #2]
    2700:	ldr	r0, [sp, #16]
    2704:	sub	r2, fp, #92	; 0x5c
    2708:	ldr	r3, [r2, r0, lsl #2]
    270c:	add	ip, sp, #44	; 0x2c
    2710:	ldr	r0, [ip, r0, lsl #2]
    2714:	ldr	ip, [sp, #40]	; 0x28
    2718:	mls	r0, r3, r0, ip
    271c:	str	r0, [sp, #40]	; 0x28
    2720:	ldr	r0, [sp, #16]
    2724:	add	r0, r0, #1
    2728:	str	r0, [sp, #16]
    272c:	ldr	r0, [sp, #16]
    2730:	ldr	r0, [r2, r0, lsl #2]
    2734:	ldr	r2, [sp, #40]	; 0x28
    2738:	add	r0, r2, r0
    273c:	str	r0, [sp, #40]	; 0x28
    2740:	ldr	r0, [sp, #16]
    2744:	add	r0, r1, r0, lsl #2
    2748:	ldr	r1, [r0]
    274c:	add	r1, r1, #1
    2750:	str	r1, [r0]
    2754:	b	26d0 <transpose_array+0x4ac>
    2758:	b	275c <transpose_array+0x538>
    275c:	ldr	r0, [sp, #36]	; 0x24
    2760:	add	r0, r0, #1
    2764:	str	r0, [sp, #36]	; 0x24
    2768:	b	2670 <transpose_array+0x44c>
    276c:	b	28a0 <transpose_array+0x67c>
    2770:	movw	r0, #0
    2774:	str	r0, [sp, #36]	; 0x24
    2778:	ldr	r0, [sp, #36]	; 0x24
    277c:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2780:	cmp	r0, r1
    2784:	bge	287c <transpose_array+0x658>
    2788:	mov	r0, #0
    278c:	str	r0, [sp, #12]
    2790:	ldr	r0, [sp, #32]
    2794:	ldr	r1, [sp, #36]	; 0x24
    2798:	ldr	r1, [r0, r1, lsl #3]!
    279c:	ldr	r0, [r0, #4]
    27a0:	ldr	r2, [sp, #28]
    27a4:	ldr	r3, [sp, #40]	; 0x28
    27a8:	str	r1, [r2, r3, lsl #3]!
    27ac:	str	r0, [r2, #4]
    27b0:	ldr	r0, [sp, #12]
    27b4:	sub	r1, fp, #92	; 0x5c
    27b8:	ldr	r0, [r1, r0, lsl #2]
    27bc:	ldr	r1, [sp, #40]	; 0x28
    27c0:	add	r0, r1, r0
    27c4:	str	r0, [sp, #40]	; 0x28
    27c8:	ldr	r0, [sp, #12]
    27cc:	add	r1, sp, #80	; 0x50
    27d0:	add	r0, r1, r0, lsl #2
    27d4:	ldr	r1, [r0]
    27d8:	add	r1, r1, #1
    27dc:	str	r1, [r0]
    27e0:	ldr	r0, [sp, #12]
    27e4:	add	r1, sp, #80	; 0x50
    27e8:	ldr	r1, [r1, r0, lsl #2]
    27ec:	add	r2, sp, #44	; 0x2c
    27f0:	add	r0, r2, r0, lsl #2
    27f4:	ldr	r0, [r0]
    27f8:	cmp	r1, r0
    27fc:	bne	2868 <transpose_array+0x644>
    2800:	ldr	r0, [sp, #12]
    2804:	add	r1, sp, #80	; 0x50
    2808:	mov	r2, #0
    280c:	str	r2, [r1, r0, lsl #2]
    2810:	ldr	r0, [sp, #12]
    2814:	sub	r2, fp, #92	; 0x5c
    2818:	ldr	r3, [r2, r0, lsl #2]
    281c:	add	ip, sp, #44	; 0x2c
    2820:	ldr	r0, [ip, r0, lsl #2]
    2824:	ldr	ip, [sp, #40]	; 0x28
    2828:	mls	r0, r3, r0, ip
    282c:	str	r0, [sp, #40]	; 0x28
    2830:	ldr	r0, [sp, #12]
    2834:	add	r0, r0, #1
    2838:	str	r0, [sp, #12]
    283c:	ldr	r0, [sp, #12]
    2840:	ldr	r0, [r2, r0, lsl #2]
    2844:	ldr	r2, [sp, #40]	; 0x28
    2848:	add	r0, r2, r0
    284c:	str	r0, [sp, #40]	; 0x28
    2850:	ldr	r0, [sp, #12]
    2854:	add	r0, r1, r0, lsl #2
    2858:	ldr	r1, [r0]
    285c:	add	r1, r1, #1
    2860:	str	r1, [r0]
    2864:	b	27e0 <transpose_array+0x5bc>
    2868:	b	286c <transpose_array+0x648>
    286c:	ldr	r0, [sp, #36]	; 0x24
    2870:	add	r0, r0, #1
    2874:	str	r0, [sp, #36]	; 0x24
    2878:	b	2778 <transpose_array+0x554>
    287c:	b	28a0 <transpose_array+0x67c>
    2880:	movw	r0, #0
    2884:	movt	r0, #0
    2888:	movw	r1, #0
    288c:	movt	r1, #0
    2890:	movw	r2, #172	; 0xac
    2894:	movw	r3, #0
    2898:	movt	r3, #0
    289c:	bl	0 <__assert_fail>
    28a0:	ldr	r0, [fp, #-12]
    28a4:	ldr	r1, [sp, #28]
    28a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    28ac:	ldr	r3, [fp, #-16]
    28b0:	mul	r2, r2, r3
    28b4:	bl	0 <memcpy>
    28b8:	ldr	r0, [sp, #28]
    28bc:	bl	0 <free>
    28c0:	movw	r0, #0
    28c4:	str	r0, [fp, #-4]
    28c8:	ldr	r0, [fp, #-4]
    28cc:	mov	sp, fp
    28d0:	pop	{fp, pc}

000028d4 <coda_mem_cursor_read_uint8_array>:
    28d4:	push	{fp, lr}
    28d8:	mov	fp, sp
    28dc:	sub	sp, sp, #32
    28e0:	str	r0, [fp, #-8]
    28e4:	str	r1, [fp, #-12]
    28e8:	str	r2, [sp, #16]
    28ec:	ldr	r0, [fp, #-8]
    28f0:	add	r1, r0, #8
    28f4:	ldr	r0, [r0, #4]
    28f8:	sub	r0, r0, #1
    28fc:	add	r0, r1, r0, lsl #4
    2900:	ldr	r0, [r0]
    2904:	str	r0, [sp, #12]
    2908:	ldr	r0, [sp, #12]
    290c:	ldr	r0, [r0, #8]
    2910:	cmp	r0, #1
    2914:	bne	294c <coda_mem_cursor_read_uint8_array+0x78>
    2918:	ldr	r0, [fp, #-8]
    291c:	ldr	r2, [fp, #-12]
    2920:	ldr	r1, [sp, #16]
    2924:	movw	r3, #0
    2928:	movt	r3, #0
    292c:	str	r1, [sp, #8]
    2930:	mov	r1, r3
    2934:	movw	r3, #1
    2938:	ldr	ip, [sp, #8]
    293c:	str	ip, [sp]
    2940:	bl	1e40 <read_array>
    2944:	str	r0, [fp, #-4]
    2948:	b	2a78 <coda_mem_cursor_read_uint8_array+0x1a4>
    294c:	ldr	r0, [sp, #12]
    2950:	ldr	r0, [r0, #8]
    2954:	cmp	r0, #2
    2958:	bne	2960 <coda_mem_cursor_read_uint8_array+0x8c>
    295c:	b	2980 <coda_mem_cursor_read_uint8_array+0xac>
    2960:	movw	r0, #0
    2964:	movt	r0, #0
    2968:	movw	r1, #0
    296c:	movt	r1, #0
    2970:	movw	r2, #682	; 0x2aa
    2974:	movw	r3, #0
    2978:	movt	r3, #0
    297c:	bl	0 <__assert_fail>
    2980:	ldr	r0, [sp, #12]
    2984:	ldr	r0, [r0, #4]
    2988:	ldr	r0, [r0, #40]	; 0x28
    298c:	ldr	r0, [r0]
    2990:	cmp	r0, #1
    2994:	bne	29cc <coda_mem_cursor_read_uint8_array+0xf8>
    2998:	ldr	r0, [fp, #-8]
    299c:	ldr	r2, [fp, #-12]
    29a0:	ldr	r1, [sp, #16]
    29a4:	movw	r3, #0
    29a8:	movt	r3, #0
    29ac:	str	r1, [sp, #4]
    29b0:	mov	r1, r3
    29b4:	movw	r3, #1
    29b8:	ldr	ip, [sp, #4]
    29bc:	str	ip, [sp]
    29c0:	bl	1e40 <read_array>
    29c4:	str	r0, [fp, #-4]
    29c8:	b	2a78 <coda_mem_cursor_read_uint8_array+0x1a4>
    29cc:	ldr	r0, [sp, #12]
    29d0:	ldr	r0, [r0, #4]
    29d4:	ldr	r0, [r0, #40]	; 0x28
    29d8:	ldr	r0, [r0]
    29dc:	cmp	r0, #0
    29e0:	bne	29e8 <coda_mem_cursor_read_uint8_array+0x114>
    29e4:	b	2a08 <coda_mem_cursor_read_uint8_array+0x134>
    29e8:	movw	r0, #0
    29ec:	movt	r0, #0
    29f0:	movw	r1, #0
    29f4:	movt	r1, #0
    29f8:	movw	r2, #688	; 0x2b0
    29fc:	movw	r3, #0
    2a00:	movt	r3, #0
    2a04:	bl	0 <__assert_fail>
    2a08:	ldr	r0, [fp, #-8]
    2a0c:	ldr	r2, [fp, #-12]
    2a10:	movw	r1, #0
    2a14:	movt	r1, #0
    2a18:	movw	r3, #1
    2a1c:	movw	ip, #0
    2a20:	str	ip, [sp]
    2a24:	bl	1e40 <read_array>
    2a28:	cmp	r0, #0
    2a2c:	beq	2a3c <coda_mem_cursor_read_uint8_array+0x168>
    2a30:	mvn	r0, #0
    2a34:	str	r0, [fp, #-4]
    2a38:	b	2a78 <coda_mem_cursor_read_uint8_array+0x1a4>
    2a3c:	ldr	r0, [sp, #16]
    2a40:	cmp	r0, #0
    2a44:	beq	2a70 <coda_mem_cursor_read_uint8_array+0x19c>
    2a48:	ldr	r0, [fp, #-8]
    2a4c:	ldr	r1, [fp, #-12]
    2a50:	movw	r2, #1
    2a54:	bl	2224 <transpose_array>
    2a58:	cmp	r0, #0
    2a5c:	beq	2a6c <coda_mem_cursor_read_uint8_array+0x198>
    2a60:	mvn	r0, #0
    2a64:	str	r0, [fp, #-4]
    2a68:	b	2a78 <coda_mem_cursor_read_uint8_array+0x1a4>
    2a6c:	b	2a70 <coda_mem_cursor_read_uint8_array+0x19c>
    2a70:	movw	r0, #0
    2a74:	str	r0, [fp, #-4]
    2a78:	ldr	r0, [fp, #-4]
    2a7c:	mov	sp, fp
    2a80:	pop	{fp, pc}

00002a84 <coda_mem_cursor_read_int16_array>:
    2a84:	push	{fp, lr}
    2a88:	mov	fp, sp
    2a8c:	sub	sp, sp, #48	; 0x30
    2a90:	str	r0, [fp, #-8]
    2a94:	str	r1, [fp, #-12]
    2a98:	str	r2, [fp, #-16]
    2a9c:	ldr	r0, [fp, #-8]
    2aa0:	add	r1, r0, #8
    2aa4:	ldr	r0, [r0, #4]
    2aa8:	sub	r0, r0, #1
    2aac:	add	r0, r1, r0, lsl #4
    2ab0:	ldr	r0, [r0]
    2ab4:	str	r0, [fp, #-20]	; 0xffffffec
    2ab8:	ldr	r0, [fp, #-20]	; 0xffffffec
    2abc:	ldr	r0, [r0, #8]
    2ac0:	cmp	r0, #1
    2ac4:	bne	2b08 <coda_mem_cursor_read_int16_array+0x84>
    2ac8:	movw	r0, #0
    2acc:	movt	r0, #0
    2ad0:	ldr	r1, [fp, #-8]
    2ad4:	ldr	r2, [fp, #-12]
    2ad8:	ldr	r3, [fp, #-16]
    2adc:	str	r0, [sp, #24]
    2ae0:	mov	r0, r1
    2ae4:	ldr	r1, [sp, #24]
    2ae8:	movw	ip, #2
    2aec:	str	r3, [sp, #20]
    2af0:	mov	r3, ip
    2af4:	ldr	ip, [sp, #20]
    2af8:	str	ip, [sp]
    2afc:	bl	1e40 <read_array>
    2b00:	str	r0, [fp, #-4]
    2b04:	b	2c4c <coda_mem_cursor_read_int16_array+0x1c8>
    2b08:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b0c:	ldr	r0, [r0, #8]
    2b10:	cmp	r0, #2
    2b14:	bne	2b1c <coda_mem_cursor_read_int16_array+0x98>
    2b18:	b	2b3c <coda_mem_cursor_read_int16_array+0xb8>
    2b1c:	movw	r0, #0
    2b20:	movt	r0, #0
    2b24:	movw	r1, #0
    2b28:	movt	r1, #0
    2b2c:	movw	r2, #713	; 0x2c9
    2b30:	movw	r3, #0
    2b34:	movt	r3, #0
    2b38:	bl	0 <__assert_fail>
    2b3c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b40:	ldr	r0, [r0, #4]
    2b44:	ldr	r0, [r0, #40]	; 0x28
    2b48:	ldr	r0, [r0]
    2b4c:	cmp	r0, #1
    2b50:	bne	2b94 <coda_mem_cursor_read_int16_array+0x110>
    2b54:	movw	r0, #0
    2b58:	movt	r0, #0
    2b5c:	ldr	r1, [fp, #-8]
    2b60:	ldr	r2, [fp, #-12]
    2b64:	ldr	r3, [fp, #-16]
    2b68:	str	r0, [sp, #16]
    2b6c:	mov	r0, r1
    2b70:	ldr	r1, [sp, #16]
    2b74:	movw	ip, #2
    2b78:	str	r3, [sp, #12]
    2b7c:	mov	r3, ip
    2b80:	ldr	ip, [sp, #12]
    2b84:	str	ip, [sp]
    2b88:	bl	1e40 <read_array>
    2b8c:	str	r0, [fp, #-4]
    2b90:	b	2c4c <coda_mem_cursor_read_int16_array+0x1c8>
    2b94:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b98:	ldr	r0, [r0, #4]
    2b9c:	ldr	r0, [r0, #40]	; 0x28
    2ba0:	ldr	r0, [r0]
    2ba4:	cmp	r0, #0
    2ba8:	bne	2bb0 <coda_mem_cursor_read_int16_array+0x12c>
    2bac:	b	2bd0 <coda_mem_cursor_read_int16_array+0x14c>
    2bb0:	movw	r0, #0
    2bb4:	movt	r0, #0
    2bb8:	movw	r1, #0
    2bbc:	movt	r1, #0
    2bc0:	movw	r2, #719	; 0x2cf
    2bc4:	movw	r3, #0
    2bc8:	movt	r3, #0
    2bcc:	bl	0 <__assert_fail>
    2bd0:	movw	r0, #0
    2bd4:	movt	r0, #0
    2bd8:	ldr	r1, [fp, #-8]
    2bdc:	ldr	r2, [fp, #-12]
    2be0:	str	r0, [sp, #8]
    2be4:	mov	r0, r1
    2be8:	ldr	r1, [sp, #8]
    2bec:	movw	r3, #2
    2bf0:	movw	ip, #0
    2bf4:	str	ip, [sp]
    2bf8:	bl	1e40 <read_array>
    2bfc:	cmp	r0, #0
    2c00:	beq	2c10 <coda_mem_cursor_read_int16_array+0x18c>
    2c04:	mvn	r0, #0
    2c08:	str	r0, [fp, #-4]
    2c0c:	b	2c4c <coda_mem_cursor_read_int16_array+0x1c8>
    2c10:	ldr	r0, [fp, #-16]
    2c14:	cmp	r0, #0
    2c18:	beq	2c44 <coda_mem_cursor_read_int16_array+0x1c0>
    2c1c:	ldr	r0, [fp, #-8]
    2c20:	ldr	r1, [fp, #-12]
    2c24:	movw	r2, #2
    2c28:	bl	2224 <transpose_array>
    2c2c:	cmp	r0, #0
    2c30:	beq	2c40 <coda_mem_cursor_read_int16_array+0x1bc>
    2c34:	mvn	r0, #0
    2c38:	str	r0, [fp, #-4]
    2c3c:	b	2c4c <coda_mem_cursor_read_int16_array+0x1c8>
    2c40:	b	2c44 <coda_mem_cursor_read_int16_array+0x1c0>
    2c44:	movw	r0, #0
    2c48:	str	r0, [fp, #-4]
    2c4c:	ldr	r0, [fp, #-4]
    2c50:	mov	sp, fp
    2c54:	pop	{fp, pc}

00002c58 <coda_mem_cursor_read_uint16_array>:
    2c58:	push	{fp, lr}
    2c5c:	mov	fp, sp
    2c60:	sub	sp, sp, #48	; 0x30
    2c64:	str	r0, [fp, #-8]
    2c68:	str	r1, [fp, #-12]
    2c6c:	str	r2, [fp, #-16]
    2c70:	ldr	r0, [fp, #-8]
    2c74:	add	r1, r0, #8
    2c78:	ldr	r0, [r0, #4]
    2c7c:	sub	r0, r0, #1
    2c80:	add	r0, r1, r0, lsl #4
    2c84:	ldr	r0, [r0]
    2c88:	str	r0, [fp, #-20]	; 0xffffffec
    2c8c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2c90:	ldr	r0, [r0, #8]
    2c94:	cmp	r0, #1
    2c98:	bne	2cdc <coda_mem_cursor_read_uint16_array+0x84>
    2c9c:	movw	r0, #0
    2ca0:	movt	r0, #0
    2ca4:	ldr	r1, [fp, #-8]
    2ca8:	ldr	r2, [fp, #-12]
    2cac:	ldr	r3, [fp, #-16]
    2cb0:	str	r0, [sp, #24]
    2cb4:	mov	r0, r1
    2cb8:	ldr	r1, [sp, #24]
    2cbc:	movw	ip, #2
    2cc0:	str	r3, [sp, #20]
    2cc4:	mov	r3, ip
    2cc8:	ldr	ip, [sp, #20]
    2ccc:	str	ip, [sp]
    2cd0:	bl	1e40 <read_array>
    2cd4:	str	r0, [fp, #-4]
    2cd8:	b	2e20 <coda_mem_cursor_read_uint16_array+0x1c8>
    2cdc:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ce0:	ldr	r0, [r0, #8]
    2ce4:	cmp	r0, #2
    2ce8:	bne	2cf0 <coda_mem_cursor_read_uint16_array+0x98>
    2cec:	b	2d10 <coda_mem_cursor_read_uint16_array+0xb8>
    2cf0:	movw	r0, #0
    2cf4:	movt	r0, #0
    2cf8:	movw	r1, #0
    2cfc:	movt	r1, #0
    2d00:	movw	r2, #744	; 0x2e8
    2d04:	movw	r3, #0
    2d08:	movt	r3, #0
    2d0c:	bl	0 <__assert_fail>
    2d10:	ldr	r0, [fp, #-20]	; 0xffffffec
    2d14:	ldr	r0, [r0, #4]
    2d18:	ldr	r0, [r0, #40]	; 0x28
    2d1c:	ldr	r0, [r0]
    2d20:	cmp	r0, #1
    2d24:	bne	2d68 <coda_mem_cursor_read_uint16_array+0x110>
    2d28:	movw	r0, #0
    2d2c:	movt	r0, #0
    2d30:	ldr	r1, [fp, #-8]
    2d34:	ldr	r2, [fp, #-12]
    2d38:	ldr	r3, [fp, #-16]
    2d3c:	str	r0, [sp, #16]
    2d40:	mov	r0, r1
    2d44:	ldr	r1, [sp, #16]
    2d48:	movw	ip, #2
    2d4c:	str	r3, [sp, #12]
    2d50:	mov	r3, ip
    2d54:	ldr	ip, [sp, #12]
    2d58:	str	ip, [sp]
    2d5c:	bl	1e40 <read_array>
    2d60:	str	r0, [fp, #-4]
    2d64:	b	2e20 <coda_mem_cursor_read_uint16_array+0x1c8>
    2d68:	ldr	r0, [fp, #-20]	; 0xffffffec
    2d6c:	ldr	r0, [r0, #4]
    2d70:	ldr	r0, [r0, #40]	; 0x28
    2d74:	ldr	r0, [r0]
    2d78:	cmp	r0, #0
    2d7c:	bne	2d84 <coda_mem_cursor_read_uint16_array+0x12c>
    2d80:	b	2da4 <coda_mem_cursor_read_uint16_array+0x14c>
    2d84:	movw	r0, #0
    2d88:	movt	r0, #0
    2d8c:	movw	r1, #0
    2d90:	movt	r1, #0
    2d94:	movw	r2, #750	; 0x2ee
    2d98:	movw	r3, #0
    2d9c:	movt	r3, #0
    2da0:	bl	0 <__assert_fail>
    2da4:	movw	r0, #0
    2da8:	movt	r0, #0
    2dac:	ldr	r1, [fp, #-8]
    2db0:	ldr	r2, [fp, #-12]
    2db4:	str	r0, [sp, #8]
    2db8:	mov	r0, r1
    2dbc:	ldr	r1, [sp, #8]
    2dc0:	movw	r3, #2
    2dc4:	movw	ip, #0
    2dc8:	str	ip, [sp]
    2dcc:	bl	1e40 <read_array>
    2dd0:	cmp	r0, #0
    2dd4:	beq	2de4 <coda_mem_cursor_read_uint16_array+0x18c>
    2dd8:	mvn	r0, #0
    2ddc:	str	r0, [fp, #-4]
    2de0:	b	2e20 <coda_mem_cursor_read_uint16_array+0x1c8>
    2de4:	ldr	r0, [fp, #-16]
    2de8:	cmp	r0, #0
    2dec:	beq	2e18 <coda_mem_cursor_read_uint16_array+0x1c0>
    2df0:	ldr	r0, [fp, #-8]
    2df4:	ldr	r1, [fp, #-12]
    2df8:	movw	r2, #2
    2dfc:	bl	2224 <transpose_array>
    2e00:	cmp	r0, #0
    2e04:	beq	2e14 <coda_mem_cursor_read_uint16_array+0x1bc>
    2e08:	mvn	r0, #0
    2e0c:	str	r0, [fp, #-4]
    2e10:	b	2e20 <coda_mem_cursor_read_uint16_array+0x1c8>
    2e14:	b	2e18 <coda_mem_cursor_read_uint16_array+0x1c0>
    2e18:	movw	r0, #0
    2e1c:	str	r0, [fp, #-4]
    2e20:	ldr	r0, [fp, #-4]
    2e24:	mov	sp, fp
    2e28:	pop	{fp, pc}

00002e2c <coda_mem_cursor_read_int32_array>:
    2e2c:	push	{fp, lr}
    2e30:	mov	fp, sp
    2e34:	sub	sp, sp, #48	; 0x30
    2e38:	str	r0, [fp, #-8]
    2e3c:	str	r1, [fp, #-12]
    2e40:	str	r2, [fp, #-16]
    2e44:	ldr	r0, [fp, #-8]
    2e48:	add	r1, r0, #8
    2e4c:	ldr	r0, [r0, #4]
    2e50:	sub	r0, r0, #1
    2e54:	add	r0, r1, r0, lsl #4
    2e58:	ldr	r0, [r0]
    2e5c:	str	r0, [fp, #-20]	; 0xffffffec
    2e60:	ldr	r0, [fp, #-20]	; 0xffffffec
    2e64:	ldr	r0, [r0, #8]
    2e68:	cmp	r0, #1
    2e6c:	bne	2eb0 <coda_mem_cursor_read_int32_array+0x84>
    2e70:	movw	r0, #0
    2e74:	movt	r0, #0
    2e78:	ldr	r1, [fp, #-8]
    2e7c:	ldr	r2, [fp, #-12]
    2e80:	ldr	r3, [fp, #-16]
    2e84:	str	r0, [sp, #24]
    2e88:	mov	r0, r1
    2e8c:	ldr	r1, [sp, #24]
    2e90:	movw	ip, #4
    2e94:	str	r3, [sp, #20]
    2e98:	mov	r3, ip
    2e9c:	ldr	ip, [sp, #20]
    2ea0:	str	ip, [sp]
    2ea4:	bl	1e40 <read_array>
    2ea8:	str	r0, [fp, #-4]
    2eac:	b	2ff4 <coda_mem_cursor_read_int32_array+0x1c8>
    2eb0:	ldr	r0, [fp, #-20]	; 0xffffffec
    2eb4:	ldr	r0, [r0, #8]
    2eb8:	cmp	r0, #2
    2ebc:	bne	2ec4 <coda_mem_cursor_read_int32_array+0x98>
    2ec0:	b	2ee4 <coda_mem_cursor_read_int32_array+0xb8>
    2ec4:	movw	r0, #0
    2ec8:	movt	r0, #0
    2ecc:	movw	r1, #0
    2ed0:	movt	r1, #0
    2ed4:	movw	r2, #775	; 0x307
    2ed8:	movw	r3, #0
    2edc:	movt	r3, #0
    2ee0:	bl	0 <__assert_fail>
    2ee4:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ee8:	ldr	r0, [r0, #4]
    2eec:	ldr	r0, [r0, #40]	; 0x28
    2ef0:	ldr	r0, [r0]
    2ef4:	cmp	r0, #1
    2ef8:	bne	2f3c <coda_mem_cursor_read_int32_array+0x110>
    2efc:	movw	r0, #0
    2f00:	movt	r0, #0
    2f04:	ldr	r1, [fp, #-8]
    2f08:	ldr	r2, [fp, #-12]
    2f0c:	ldr	r3, [fp, #-16]
    2f10:	str	r0, [sp, #16]
    2f14:	mov	r0, r1
    2f18:	ldr	r1, [sp, #16]
    2f1c:	movw	ip, #4
    2f20:	str	r3, [sp, #12]
    2f24:	mov	r3, ip
    2f28:	ldr	ip, [sp, #12]
    2f2c:	str	ip, [sp]
    2f30:	bl	1e40 <read_array>
    2f34:	str	r0, [fp, #-4]
    2f38:	b	2ff4 <coda_mem_cursor_read_int32_array+0x1c8>
    2f3c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2f40:	ldr	r0, [r0, #4]
    2f44:	ldr	r0, [r0, #40]	; 0x28
    2f48:	ldr	r0, [r0]
    2f4c:	cmp	r0, #0
    2f50:	bne	2f58 <coda_mem_cursor_read_int32_array+0x12c>
    2f54:	b	2f78 <coda_mem_cursor_read_int32_array+0x14c>
    2f58:	movw	r0, #0
    2f5c:	movt	r0, #0
    2f60:	movw	r1, #0
    2f64:	movt	r1, #0
    2f68:	movw	r2, #781	; 0x30d
    2f6c:	movw	r3, #0
    2f70:	movt	r3, #0
    2f74:	bl	0 <__assert_fail>
    2f78:	movw	r0, #0
    2f7c:	movt	r0, #0
    2f80:	ldr	r1, [fp, #-8]
    2f84:	ldr	r2, [fp, #-12]
    2f88:	str	r0, [sp, #8]
    2f8c:	mov	r0, r1
    2f90:	ldr	r1, [sp, #8]
    2f94:	movw	r3, #4
    2f98:	movw	ip, #0
    2f9c:	str	ip, [sp]
    2fa0:	bl	1e40 <read_array>
    2fa4:	cmp	r0, #0
    2fa8:	beq	2fb8 <coda_mem_cursor_read_int32_array+0x18c>
    2fac:	mvn	r0, #0
    2fb0:	str	r0, [fp, #-4]
    2fb4:	b	2ff4 <coda_mem_cursor_read_int32_array+0x1c8>
    2fb8:	ldr	r0, [fp, #-16]
    2fbc:	cmp	r0, #0
    2fc0:	beq	2fec <coda_mem_cursor_read_int32_array+0x1c0>
    2fc4:	ldr	r0, [fp, #-8]
    2fc8:	ldr	r1, [fp, #-12]
    2fcc:	movw	r2, #4
    2fd0:	bl	2224 <transpose_array>
    2fd4:	cmp	r0, #0
    2fd8:	beq	2fe8 <coda_mem_cursor_read_int32_array+0x1bc>
    2fdc:	mvn	r0, #0
    2fe0:	str	r0, [fp, #-4]
    2fe4:	b	2ff4 <coda_mem_cursor_read_int32_array+0x1c8>
    2fe8:	b	2fec <coda_mem_cursor_read_int32_array+0x1c0>
    2fec:	movw	r0, #0
    2ff0:	str	r0, [fp, #-4]
    2ff4:	ldr	r0, [fp, #-4]
    2ff8:	mov	sp, fp
    2ffc:	pop	{fp, pc}

00003000 <coda_mem_cursor_read_uint32_array>:
    3000:	push	{fp, lr}
    3004:	mov	fp, sp
    3008:	sub	sp, sp, #48	; 0x30
    300c:	str	r0, [fp, #-8]
    3010:	str	r1, [fp, #-12]
    3014:	str	r2, [fp, #-16]
    3018:	ldr	r0, [fp, #-8]
    301c:	add	r1, r0, #8
    3020:	ldr	r0, [r0, #4]
    3024:	sub	r0, r0, #1
    3028:	add	r0, r1, r0, lsl #4
    302c:	ldr	r0, [r0]
    3030:	str	r0, [fp, #-20]	; 0xffffffec
    3034:	ldr	r0, [fp, #-20]	; 0xffffffec
    3038:	ldr	r0, [r0, #8]
    303c:	cmp	r0, #1
    3040:	bne	3084 <coda_mem_cursor_read_uint32_array+0x84>
    3044:	movw	r0, #0
    3048:	movt	r0, #0
    304c:	ldr	r1, [fp, #-8]
    3050:	ldr	r2, [fp, #-12]
    3054:	ldr	r3, [fp, #-16]
    3058:	str	r0, [sp, #24]
    305c:	mov	r0, r1
    3060:	ldr	r1, [sp, #24]
    3064:	movw	ip, #4
    3068:	str	r3, [sp, #20]
    306c:	mov	r3, ip
    3070:	ldr	ip, [sp, #20]
    3074:	str	ip, [sp]
    3078:	bl	1e40 <read_array>
    307c:	str	r0, [fp, #-4]
    3080:	b	31c8 <coda_mem_cursor_read_uint32_array+0x1c8>
    3084:	ldr	r0, [fp, #-20]	; 0xffffffec
    3088:	ldr	r0, [r0, #8]
    308c:	cmp	r0, #2
    3090:	bne	3098 <coda_mem_cursor_read_uint32_array+0x98>
    3094:	b	30b8 <coda_mem_cursor_read_uint32_array+0xb8>
    3098:	movw	r0, #0
    309c:	movt	r0, #0
    30a0:	movw	r1, #0
    30a4:	movt	r1, #0
    30a8:	movw	r2, #806	; 0x326
    30ac:	movw	r3, #0
    30b0:	movt	r3, #0
    30b4:	bl	0 <__assert_fail>
    30b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    30bc:	ldr	r0, [r0, #4]
    30c0:	ldr	r0, [r0, #40]	; 0x28
    30c4:	ldr	r0, [r0]
    30c8:	cmp	r0, #1
    30cc:	bne	3110 <coda_mem_cursor_read_uint32_array+0x110>
    30d0:	movw	r0, #0
    30d4:	movt	r0, #0
    30d8:	ldr	r1, [fp, #-8]
    30dc:	ldr	r2, [fp, #-12]
    30e0:	ldr	r3, [fp, #-16]
    30e4:	str	r0, [sp, #16]
    30e8:	mov	r0, r1
    30ec:	ldr	r1, [sp, #16]
    30f0:	movw	ip, #4
    30f4:	str	r3, [sp, #12]
    30f8:	mov	r3, ip
    30fc:	ldr	ip, [sp, #12]
    3100:	str	ip, [sp]
    3104:	bl	1e40 <read_array>
    3108:	str	r0, [fp, #-4]
    310c:	b	31c8 <coda_mem_cursor_read_uint32_array+0x1c8>
    3110:	ldr	r0, [fp, #-20]	; 0xffffffec
    3114:	ldr	r0, [r0, #4]
    3118:	ldr	r0, [r0, #40]	; 0x28
    311c:	ldr	r0, [r0]
    3120:	cmp	r0, #0
    3124:	bne	312c <coda_mem_cursor_read_uint32_array+0x12c>
    3128:	b	314c <coda_mem_cursor_read_uint32_array+0x14c>
    312c:	movw	r0, #0
    3130:	movt	r0, #0
    3134:	movw	r1, #0
    3138:	movt	r1, #0
    313c:	movw	r2, #812	; 0x32c
    3140:	movw	r3, #0
    3144:	movt	r3, #0
    3148:	bl	0 <__assert_fail>
    314c:	movw	r0, #0
    3150:	movt	r0, #0
    3154:	ldr	r1, [fp, #-8]
    3158:	ldr	r2, [fp, #-12]
    315c:	str	r0, [sp, #8]
    3160:	mov	r0, r1
    3164:	ldr	r1, [sp, #8]
    3168:	movw	r3, #4
    316c:	movw	ip, #0
    3170:	str	ip, [sp]
    3174:	bl	1e40 <read_array>
    3178:	cmp	r0, #0
    317c:	beq	318c <coda_mem_cursor_read_uint32_array+0x18c>
    3180:	mvn	r0, #0
    3184:	str	r0, [fp, #-4]
    3188:	b	31c8 <coda_mem_cursor_read_uint32_array+0x1c8>
    318c:	ldr	r0, [fp, #-16]
    3190:	cmp	r0, #0
    3194:	beq	31c0 <coda_mem_cursor_read_uint32_array+0x1c0>
    3198:	ldr	r0, [fp, #-8]
    319c:	ldr	r1, [fp, #-12]
    31a0:	movw	r2, #4
    31a4:	bl	2224 <transpose_array>
    31a8:	cmp	r0, #0
    31ac:	beq	31bc <coda_mem_cursor_read_uint32_array+0x1bc>
    31b0:	mvn	r0, #0
    31b4:	str	r0, [fp, #-4]
    31b8:	b	31c8 <coda_mem_cursor_read_uint32_array+0x1c8>
    31bc:	b	31c0 <coda_mem_cursor_read_uint32_array+0x1c0>
    31c0:	movw	r0, #0
    31c4:	str	r0, [fp, #-4]
    31c8:	ldr	r0, [fp, #-4]
    31cc:	mov	sp, fp
    31d0:	pop	{fp, pc}

000031d4 <coda_mem_cursor_read_int64_array>:
    31d4:	push	{fp, lr}
    31d8:	mov	fp, sp
    31dc:	sub	sp, sp, #48	; 0x30
    31e0:	str	r0, [fp, #-8]
    31e4:	str	r1, [fp, #-12]
    31e8:	str	r2, [fp, #-16]
    31ec:	ldr	r0, [fp, #-8]
    31f0:	add	r1, r0, #8
    31f4:	ldr	r0, [r0, #4]
    31f8:	sub	r0, r0, #1
    31fc:	add	r0, r1, r0, lsl #4
    3200:	ldr	r0, [r0]
    3204:	str	r0, [fp, #-20]	; 0xffffffec
    3208:	ldr	r0, [fp, #-20]	; 0xffffffec
    320c:	ldr	r0, [r0, #8]
    3210:	cmp	r0, #1
    3214:	bne	3258 <coda_mem_cursor_read_int64_array+0x84>
    3218:	movw	r0, #0
    321c:	movt	r0, #0
    3220:	ldr	r1, [fp, #-8]
    3224:	ldr	r2, [fp, #-12]
    3228:	ldr	r3, [fp, #-16]
    322c:	str	r0, [sp, #24]
    3230:	mov	r0, r1
    3234:	ldr	r1, [sp, #24]
    3238:	movw	ip, #8
    323c:	str	r3, [sp, #20]
    3240:	mov	r3, ip
    3244:	ldr	ip, [sp, #20]
    3248:	str	ip, [sp]
    324c:	bl	1e40 <read_array>
    3250:	str	r0, [fp, #-4]
    3254:	b	339c <coda_mem_cursor_read_int64_array+0x1c8>
    3258:	ldr	r0, [fp, #-20]	; 0xffffffec
    325c:	ldr	r0, [r0, #8]
    3260:	cmp	r0, #2
    3264:	bne	326c <coda_mem_cursor_read_int64_array+0x98>
    3268:	b	328c <coda_mem_cursor_read_int64_array+0xb8>
    326c:	movw	r0, #0
    3270:	movt	r0, #0
    3274:	movw	r1, #0
    3278:	movt	r1, #0
    327c:	movw	r2, #837	; 0x345
    3280:	movw	r3, #0
    3284:	movt	r3, #0
    3288:	bl	0 <__assert_fail>
    328c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3290:	ldr	r0, [r0, #4]
    3294:	ldr	r0, [r0, #40]	; 0x28
    3298:	ldr	r0, [r0]
    329c:	cmp	r0, #1
    32a0:	bne	32e4 <coda_mem_cursor_read_int64_array+0x110>
    32a4:	movw	r0, #0
    32a8:	movt	r0, #0
    32ac:	ldr	r1, [fp, #-8]
    32b0:	ldr	r2, [fp, #-12]
    32b4:	ldr	r3, [fp, #-16]
    32b8:	str	r0, [sp, #16]
    32bc:	mov	r0, r1
    32c0:	ldr	r1, [sp, #16]
    32c4:	movw	ip, #8
    32c8:	str	r3, [sp, #12]
    32cc:	mov	r3, ip
    32d0:	ldr	ip, [sp, #12]
    32d4:	str	ip, [sp]
    32d8:	bl	1e40 <read_array>
    32dc:	str	r0, [fp, #-4]
    32e0:	b	339c <coda_mem_cursor_read_int64_array+0x1c8>
    32e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    32e8:	ldr	r0, [r0, #4]
    32ec:	ldr	r0, [r0, #40]	; 0x28
    32f0:	ldr	r0, [r0]
    32f4:	cmp	r0, #0
    32f8:	bne	3300 <coda_mem_cursor_read_int64_array+0x12c>
    32fc:	b	3320 <coda_mem_cursor_read_int64_array+0x14c>
    3300:	movw	r0, #0
    3304:	movt	r0, #0
    3308:	movw	r1, #0
    330c:	movt	r1, #0
    3310:	movw	r2, #843	; 0x34b
    3314:	movw	r3, #0
    3318:	movt	r3, #0
    331c:	bl	0 <__assert_fail>
    3320:	movw	r0, #0
    3324:	movt	r0, #0
    3328:	ldr	r1, [fp, #-8]
    332c:	ldr	r2, [fp, #-12]
    3330:	str	r0, [sp, #8]
    3334:	mov	r0, r1
    3338:	ldr	r1, [sp, #8]
    333c:	movw	r3, #8
    3340:	movw	ip, #0
    3344:	str	ip, [sp]
    3348:	bl	1e40 <read_array>
    334c:	cmp	r0, #0
    3350:	beq	3360 <coda_mem_cursor_read_int64_array+0x18c>
    3354:	mvn	r0, #0
    3358:	str	r0, [fp, #-4]
    335c:	b	339c <coda_mem_cursor_read_int64_array+0x1c8>
    3360:	ldr	r0, [fp, #-16]
    3364:	cmp	r0, #0
    3368:	beq	3394 <coda_mem_cursor_read_int64_array+0x1c0>
    336c:	ldr	r0, [fp, #-8]
    3370:	ldr	r1, [fp, #-12]
    3374:	movw	r2, #8
    3378:	bl	2224 <transpose_array>
    337c:	cmp	r0, #0
    3380:	beq	3390 <coda_mem_cursor_read_int64_array+0x1bc>
    3384:	mvn	r0, #0
    3388:	str	r0, [fp, #-4]
    338c:	b	339c <coda_mem_cursor_read_int64_array+0x1c8>
    3390:	b	3394 <coda_mem_cursor_read_int64_array+0x1c0>
    3394:	movw	r0, #0
    3398:	str	r0, [fp, #-4]
    339c:	ldr	r0, [fp, #-4]
    33a0:	mov	sp, fp
    33a4:	pop	{fp, pc}

000033a8 <coda_mem_cursor_read_uint64_array>:
    33a8:	push	{fp, lr}
    33ac:	mov	fp, sp
    33b0:	sub	sp, sp, #48	; 0x30
    33b4:	str	r0, [fp, #-8]
    33b8:	str	r1, [fp, #-12]
    33bc:	str	r2, [fp, #-16]
    33c0:	ldr	r0, [fp, #-8]
    33c4:	add	r1, r0, #8
    33c8:	ldr	r0, [r0, #4]
    33cc:	sub	r0, r0, #1
    33d0:	add	r0, r1, r0, lsl #4
    33d4:	ldr	r0, [r0]
    33d8:	str	r0, [fp, #-20]	; 0xffffffec
    33dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    33e0:	ldr	r0, [r0, #8]
    33e4:	cmp	r0, #1
    33e8:	bne	342c <coda_mem_cursor_read_uint64_array+0x84>
    33ec:	movw	r0, #0
    33f0:	movt	r0, #0
    33f4:	ldr	r1, [fp, #-8]
    33f8:	ldr	r2, [fp, #-12]
    33fc:	ldr	r3, [fp, #-16]
    3400:	str	r0, [sp, #24]
    3404:	mov	r0, r1
    3408:	ldr	r1, [sp, #24]
    340c:	movw	ip, #8
    3410:	str	r3, [sp, #20]
    3414:	mov	r3, ip
    3418:	ldr	ip, [sp, #20]
    341c:	str	ip, [sp]
    3420:	bl	1e40 <read_array>
    3424:	str	r0, [fp, #-4]
    3428:	b	3570 <coda_mem_cursor_read_uint64_array+0x1c8>
    342c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3430:	ldr	r0, [r0, #8]
    3434:	cmp	r0, #2
    3438:	bne	3440 <coda_mem_cursor_read_uint64_array+0x98>
    343c:	b	3460 <coda_mem_cursor_read_uint64_array+0xb8>
    3440:	movw	r0, #0
    3444:	movt	r0, #0
    3448:	movw	r1, #0
    344c:	movt	r1, #0
    3450:	movw	r2, #868	; 0x364
    3454:	movw	r3, #0
    3458:	movt	r3, #0
    345c:	bl	0 <__assert_fail>
    3460:	ldr	r0, [fp, #-20]	; 0xffffffec
    3464:	ldr	r0, [r0, #4]
    3468:	ldr	r0, [r0, #40]	; 0x28
    346c:	ldr	r0, [r0]
    3470:	cmp	r0, #1
    3474:	bne	34b8 <coda_mem_cursor_read_uint64_array+0x110>
    3478:	movw	r0, #0
    347c:	movt	r0, #0
    3480:	ldr	r1, [fp, #-8]
    3484:	ldr	r2, [fp, #-12]
    3488:	ldr	r3, [fp, #-16]
    348c:	str	r0, [sp, #16]
    3490:	mov	r0, r1
    3494:	ldr	r1, [sp, #16]
    3498:	movw	ip, #8
    349c:	str	r3, [sp, #12]
    34a0:	mov	r3, ip
    34a4:	ldr	ip, [sp, #12]
    34a8:	str	ip, [sp]
    34ac:	bl	1e40 <read_array>
    34b0:	str	r0, [fp, #-4]
    34b4:	b	3570 <coda_mem_cursor_read_uint64_array+0x1c8>
    34b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    34bc:	ldr	r0, [r0, #4]
    34c0:	ldr	r0, [r0, #40]	; 0x28
    34c4:	ldr	r0, [r0]
    34c8:	cmp	r0, #0
    34cc:	bne	34d4 <coda_mem_cursor_read_uint64_array+0x12c>
    34d0:	b	34f4 <coda_mem_cursor_read_uint64_array+0x14c>
    34d4:	movw	r0, #0
    34d8:	movt	r0, #0
    34dc:	movw	r1, #0
    34e0:	movt	r1, #0
    34e4:	movw	r2, #874	; 0x36a
    34e8:	movw	r3, #0
    34ec:	movt	r3, #0
    34f0:	bl	0 <__assert_fail>
    34f4:	movw	r0, #0
    34f8:	movt	r0, #0
    34fc:	ldr	r1, [fp, #-8]
    3500:	ldr	r2, [fp, #-12]
    3504:	str	r0, [sp, #8]
    3508:	mov	r0, r1
    350c:	ldr	r1, [sp, #8]
    3510:	movw	r3, #8
    3514:	movw	ip, #0
    3518:	str	ip, [sp]
    351c:	bl	1e40 <read_array>
    3520:	cmp	r0, #0
    3524:	beq	3534 <coda_mem_cursor_read_uint64_array+0x18c>
    3528:	mvn	r0, #0
    352c:	str	r0, [fp, #-4]
    3530:	b	3570 <coda_mem_cursor_read_uint64_array+0x1c8>
    3534:	ldr	r0, [fp, #-16]
    3538:	cmp	r0, #0
    353c:	beq	3568 <coda_mem_cursor_read_uint64_array+0x1c0>
    3540:	ldr	r0, [fp, #-8]
    3544:	ldr	r1, [fp, #-12]
    3548:	movw	r2, #8
    354c:	bl	2224 <transpose_array>
    3550:	cmp	r0, #0
    3554:	beq	3564 <coda_mem_cursor_read_uint64_array+0x1bc>
    3558:	mvn	r0, #0
    355c:	str	r0, [fp, #-4]
    3560:	b	3570 <coda_mem_cursor_read_uint64_array+0x1c8>
    3564:	b	3568 <coda_mem_cursor_read_uint64_array+0x1c0>
    3568:	movw	r0, #0
    356c:	str	r0, [fp, #-4]
    3570:	ldr	r0, [fp, #-4]
    3574:	mov	sp, fp
    3578:	pop	{fp, pc}

0000357c <coda_mem_cursor_read_float_array>:
    357c:	push	{fp, lr}
    3580:	mov	fp, sp
    3584:	sub	sp, sp, #48	; 0x30
    3588:	str	r0, [fp, #-8]
    358c:	str	r1, [fp, #-12]
    3590:	str	r2, [fp, #-16]
    3594:	ldr	r0, [fp, #-8]
    3598:	add	r1, r0, #8
    359c:	ldr	r0, [r0, #4]
    35a0:	sub	r0, r0, #1
    35a4:	add	r0, r1, r0, lsl #4
    35a8:	ldr	r0, [r0]
    35ac:	str	r0, [fp, #-20]	; 0xffffffec
    35b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    35b4:	ldr	r0, [r0, #8]
    35b8:	cmp	r0, #1
    35bc:	bne	3600 <coda_mem_cursor_read_float_array+0x84>
    35c0:	movw	r0, #0
    35c4:	movt	r0, #0
    35c8:	ldr	r1, [fp, #-8]
    35cc:	ldr	r2, [fp, #-12]
    35d0:	ldr	r3, [fp, #-16]
    35d4:	str	r0, [sp, #24]
    35d8:	mov	r0, r1
    35dc:	ldr	r1, [sp, #24]
    35e0:	movw	ip, #4
    35e4:	str	r3, [sp, #20]
    35e8:	mov	r3, ip
    35ec:	ldr	ip, [sp, #20]
    35f0:	str	ip, [sp]
    35f4:	bl	1e40 <read_array>
    35f8:	str	r0, [fp, #-4]
    35fc:	b	3744 <coda_mem_cursor_read_float_array+0x1c8>
    3600:	ldr	r0, [fp, #-20]	; 0xffffffec
    3604:	ldr	r0, [r0, #8]
    3608:	cmp	r0, #2
    360c:	bne	3614 <coda_mem_cursor_read_float_array+0x98>
    3610:	b	3634 <coda_mem_cursor_read_float_array+0xb8>
    3614:	movw	r0, #0
    3618:	movt	r0, #0
    361c:	movw	r1, #0
    3620:	movt	r1, #0
    3624:	movw	r2, #899	; 0x383
    3628:	movw	r3, #0
    362c:	movt	r3, #0
    3630:	bl	0 <__assert_fail>
    3634:	ldr	r0, [fp, #-20]	; 0xffffffec
    3638:	ldr	r0, [r0, #4]
    363c:	ldr	r0, [r0, #40]	; 0x28
    3640:	ldr	r0, [r0]
    3644:	cmp	r0, #1
    3648:	bne	368c <coda_mem_cursor_read_float_array+0x110>
    364c:	movw	r0, #0
    3650:	movt	r0, #0
    3654:	ldr	r1, [fp, #-8]
    3658:	ldr	r2, [fp, #-12]
    365c:	ldr	r3, [fp, #-16]
    3660:	str	r0, [sp, #16]
    3664:	mov	r0, r1
    3668:	ldr	r1, [sp, #16]
    366c:	movw	ip, #4
    3670:	str	r3, [sp, #12]
    3674:	mov	r3, ip
    3678:	ldr	ip, [sp, #12]
    367c:	str	ip, [sp]
    3680:	bl	1e40 <read_array>
    3684:	str	r0, [fp, #-4]
    3688:	b	3744 <coda_mem_cursor_read_float_array+0x1c8>
    368c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3690:	ldr	r0, [r0, #4]
    3694:	ldr	r0, [r0, #40]	; 0x28
    3698:	ldr	r0, [r0]
    369c:	cmp	r0, #0
    36a0:	bne	36a8 <coda_mem_cursor_read_float_array+0x12c>
    36a4:	b	36c8 <coda_mem_cursor_read_float_array+0x14c>
    36a8:	movw	r0, #0
    36ac:	movt	r0, #0
    36b0:	movw	r1, #0
    36b4:	movt	r1, #0
    36b8:	movw	r2, #905	; 0x389
    36bc:	movw	r3, #0
    36c0:	movt	r3, #0
    36c4:	bl	0 <__assert_fail>
    36c8:	movw	r0, #0
    36cc:	movt	r0, #0
    36d0:	ldr	r1, [fp, #-8]
    36d4:	ldr	r2, [fp, #-12]
    36d8:	str	r0, [sp, #8]
    36dc:	mov	r0, r1
    36e0:	ldr	r1, [sp, #8]
    36e4:	movw	r3, #4
    36e8:	movw	ip, #0
    36ec:	str	ip, [sp]
    36f0:	bl	1e40 <read_array>
    36f4:	cmp	r0, #0
    36f8:	beq	3708 <coda_mem_cursor_read_float_array+0x18c>
    36fc:	mvn	r0, #0
    3700:	str	r0, [fp, #-4]
    3704:	b	3744 <coda_mem_cursor_read_float_array+0x1c8>
    3708:	ldr	r0, [fp, #-16]
    370c:	cmp	r0, #0
    3710:	beq	373c <coda_mem_cursor_read_float_array+0x1c0>
    3714:	ldr	r0, [fp, #-8]
    3718:	ldr	r1, [fp, #-12]
    371c:	movw	r2, #4
    3720:	bl	2224 <transpose_array>
    3724:	cmp	r0, #0
    3728:	beq	3738 <coda_mem_cursor_read_float_array+0x1bc>
    372c:	mvn	r0, #0
    3730:	str	r0, [fp, #-4]
    3734:	b	3744 <coda_mem_cursor_read_float_array+0x1c8>
    3738:	b	373c <coda_mem_cursor_read_float_array+0x1c0>
    373c:	movw	r0, #0
    3740:	str	r0, [fp, #-4]
    3744:	ldr	r0, [fp, #-4]
    3748:	mov	sp, fp
    374c:	pop	{fp, pc}

00003750 <coda_mem_cursor_read_double_array>:
    3750:	push	{fp, lr}
    3754:	mov	fp, sp
    3758:	sub	sp, sp, #48	; 0x30
    375c:	str	r0, [fp, #-8]
    3760:	str	r1, [fp, #-12]
    3764:	str	r2, [fp, #-16]
    3768:	ldr	r0, [fp, #-8]
    376c:	add	r1, r0, #8
    3770:	ldr	r0, [r0, #4]
    3774:	sub	r0, r0, #1
    3778:	add	r0, r1, r0, lsl #4
    377c:	ldr	r0, [r0]
    3780:	str	r0, [fp, #-20]	; 0xffffffec
    3784:	ldr	r0, [fp, #-20]	; 0xffffffec
    3788:	ldr	r0, [r0, #8]
    378c:	cmp	r0, #1
    3790:	bne	37d4 <coda_mem_cursor_read_double_array+0x84>
    3794:	movw	r0, #0
    3798:	movt	r0, #0
    379c:	ldr	r1, [fp, #-8]
    37a0:	ldr	r2, [fp, #-12]
    37a4:	ldr	r3, [fp, #-16]
    37a8:	str	r0, [sp, #24]
    37ac:	mov	r0, r1
    37b0:	ldr	r1, [sp, #24]
    37b4:	movw	ip, #8
    37b8:	str	r3, [sp, #20]
    37bc:	mov	r3, ip
    37c0:	ldr	ip, [sp, #20]
    37c4:	str	ip, [sp]
    37c8:	bl	1e40 <read_array>
    37cc:	str	r0, [fp, #-4]
    37d0:	b	3918 <coda_mem_cursor_read_double_array+0x1c8>
    37d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    37d8:	ldr	r0, [r0, #8]
    37dc:	cmp	r0, #2
    37e0:	bne	37e8 <coda_mem_cursor_read_double_array+0x98>
    37e4:	b	3808 <coda_mem_cursor_read_double_array+0xb8>
    37e8:	movw	r0, #0
    37ec:	movt	r0, #0
    37f0:	movw	r1, #0
    37f4:	movt	r1, #0
    37f8:	movw	r2, #930	; 0x3a2
    37fc:	movw	r3, #0
    3800:	movt	r3, #0
    3804:	bl	0 <__assert_fail>
    3808:	ldr	r0, [fp, #-20]	; 0xffffffec
    380c:	ldr	r0, [r0, #4]
    3810:	ldr	r0, [r0, #40]	; 0x28
    3814:	ldr	r0, [r0]
    3818:	cmp	r0, #1
    381c:	bne	3860 <coda_mem_cursor_read_double_array+0x110>
    3820:	movw	r0, #0
    3824:	movt	r0, #0
    3828:	ldr	r1, [fp, #-8]
    382c:	ldr	r2, [fp, #-12]
    3830:	ldr	r3, [fp, #-16]
    3834:	str	r0, [sp, #16]
    3838:	mov	r0, r1
    383c:	ldr	r1, [sp, #16]
    3840:	movw	ip, #8
    3844:	str	r3, [sp, #12]
    3848:	mov	r3, ip
    384c:	ldr	ip, [sp, #12]
    3850:	str	ip, [sp]
    3854:	bl	1e40 <read_array>
    3858:	str	r0, [fp, #-4]
    385c:	b	3918 <coda_mem_cursor_read_double_array+0x1c8>
    3860:	ldr	r0, [fp, #-20]	; 0xffffffec
    3864:	ldr	r0, [r0, #4]
    3868:	ldr	r0, [r0, #40]	; 0x28
    386c:	ldr	r0, [r0]
    3870:	cmp	r0, #0
    3874:	bne	387c <coda_mem_cursor_read_double_array+0x12c>
    3878:	b	389c <coda_mem_cursor_read_double_array+0x14c>
    387c:	movw	r0, #0
    3880:	movt	r0, #0
    3884:	movw	r1, #0
    3888:	movt	r1, #0
    388c:	movw	r2, #936	; 0x3a8
    3890:	movw	r3, #0
    3894:	movt	r3, #0
    3898:	bl	0 <__assert_fail>
    389c:	movw	r0, #0
    38a0:	movt	r0, #0
    38a4:	ldr	r1, [fp, #-8]
    38a8:	ldr	r2, [fp, #-12]
    38ac:	str	r0, [sp, #8]
    38b0:	mov	r0, r1
    38b4:	ldr	r1, [sp, #8]
    38b8:	movw	r3, #8
    38bc:	movw	ip, #0
    38c0:	str	ip, [sp]
    38c4:	bl	1e40 <read_array>
    38c8:	cmp	r0, #0
    38cc:	beq	38dc <coda_mem_cursor_read_double_array+0x18c>
    38d0:	mvn	r0, #0
    38d4:	str	r0, [fp, #-4]
    38d8:	b	3918 <coda_mem_cursor_read_double_array+0x1c8>
    38dc:	ldr	r0, [fp, #-16]
    38e0:	cmp	r0, #0
    38e4:	beq	3910 <coda_mem_cursor_read_double_array+0x1c0>
    38e8:	ldr	r0, [fp, #-8]
    38ec:	ldr	r1, [fp, #-12]
    38f0:	movw	r2, #8
    38f4:	bl	2224 <transpose_array>
    38f8:	cmp	r0, #0
    38fc:	beq	390c <coda_mem_cursor_read_double_array+0x1bc>
    3900:	mvn	r0, #0
    3904:	str	r0, [fp, #-4]
    3908:	b	3918 <coda_mem_cursor_read_double_array+0x1c8>
    390c:	b	3910 <coda_mem_cursor_read_double_array+0x1c0>
    3910:	movw	r0, #0
    3914:	str	r0, [fp, #-4]
    3918:	ldr	r0, [fp, #-4]
    391c:	mov	sp, fp
    3920:	pop	{fp, pc}

00003924 <coda_mem_cursor_read_char_array>:
    3924:	push	{fp, lr}
    3928:	mov	fp, sp
    392c:	sub	sp, sp, #32
    3930:	str	r0, [fp, #-8]
    3934:	str	r1, [fp, #-12]
    3938:	str	r2, [sp, #16]
    393c:	ldr	r0, [fp, #-8]
    3940:	add	r1, r0, #8
    3944:	ldr	r0, [r0, #4]
    3948:	sub	r0, r0, #1
    394c:	add	r0, r1, r0, lsl #4
    3950:	ldr	r0, [r0]
    3954:	str	r0, [sp, #12]
    3958:	ldr	r0, [sp, #12]
    395c:	ldr	r0, [r0, #8]
    3960:	cmp	r0, #1
    3964:	bne	399c <coda_mem_cursor_read_char_array+0x78>
    3968:	ldr	r0, [fp, #-8]
    396c:	ldr	r2, [fp, #-12]
    3970:	ldr	r1, [sp, #16]
    3974:	movw	r3, #0
    3978:	movt	r3, #0
    397c:	str	r1, [sp, #8]
    3980:	mov	r1, r3
    3984:	movw	r3, #1
    3988:	ldr	ip, [sp, #8]
    398c:	str	ip, [sp]
    3990:	bl	1e40 <read_array>
    3994:	str	r0, [fp, #-4]
    3998:	b	3ac8 <coda_mem_cursor_read_char_array+0x1a4>
    399c:	ldr	r0, [sp, #12]
    39a0:	ldr	r0, [r0, #8]
    39a4:	cmp	r0, #2
    39a8:	bne	39b0 <coda_mem_cursor_read_char_array+0x8c>
    39ac:	b	39d0 <coda_mem_cursor_read_char_array+0xac>
    39b0:	movw	r0, #0
    39b4:	movt	r0, #0
    39b8:	movw	r1, #0
    39bc:	movt	r1, #0
    39c0:	movw	r2, #960	; 0x3c0
    39c4:	movw	r3, #0
    39c8:	movt	r3, #0
    39cc:	bl	0 <__assert_fail>
    39d0:	ldr	r0, [sp, #12]
    39d4:	ldr	r0, [r0, #4]
    39d8:	ldr	r0, [r0, #40]	; 0x28
    39dc:	ldr	r0, [r0]
    39e0:	cmp	r0, #1
    39e4:	bne	3a1c <coda_mem_cursor_read_char_array+0xf8>
    39e8:	ldr	r0, [fp, #-8]
    39ec:	ldr	r2, [fp, #-12]
    39f0:	ldr	r1, [sp, #16]
    39f4:	movw	r3, #0
    39f8:	movt	r3, #0
    39fc:	str	r1, [sp, #4]
    3a00:	mov	r1, r3
    3a04:	movw	r3, #1
    3a08:	ldr	ip, [sp, #4]
    3a0c:	str	ip, [sp]
    3a10:	bl	1e40 <read_array>
    3a14:	str	r0, [fp, #-4]
    3a18:	b	3ac8 <coda_mem_cursor_read_char_array+0x1a4>
    3a1c:	ldr	r0, [sp, #12]
    3a20:	ldr	r0, [r0, #4]
    3a24:	ldr	r0, [r0, #40]	; 0x28
    3a28:	ldr	r0, [r0]
    3a2c:	cmp	r0, #0
    3a30:	bne	3a38 <coda_mem_cursor_read_char_array+0x114>
    3a34:	b	3a58 <coda_mem_cursor_read_char_array+0x134>
    3a38:	movw	r0, #0
    3a3c:	movt	r0, #0
    3a40:	movw	r1, #0
    3a44:	movt	r1, #0
    3a48:	movw	r2, #966	; 0x3c6
    3a4c:	movw	r3, #0
    3a50:	movt	r3, #0
    3a54:	bl	0 <__assert_fail>
    3a58:	ldr	r0, [fp, #-8]
    3a5c:	ldr	r2, [fp, #-12]
    3a60:	movw	r1, #0
    3a64:	movt	r1, #0
    3a68:	movw	r3, #1
    3a6c:	movw	ip, #0
    3a70:	str	ip, [sp]
    3a74:	bl	1e40 <read_array>
    3a78:	cmp	r0, #0
    3a7c:	beq	3a8c <coda_mem_cursor_read_char_array+0x168>
    3a80:	mvn	r0, #0
    3a84:	str	r0, [fp, #-4]
    3a88:	b	3ac8 <coda_mem_cursor_read_char_array+0x1a4>
    3a8c:	ldr	r0, [sp, #16]
    3a90:	cmp	r0, #0
    3a94:	beq	3ac0 <coda_mem_cursor_read_char_array+0x19c>
    3a98:	ldr	r0, [fp, #-8]
    3a9c:	ldr	r1, [fp, #-12]
    3aa0:	movw	r2, #1
    3aa4:	bl	2224 <transpose_array>
    3aa8:	cmp	r0, #0
    3aac:	beq	3abc <coda_mem_cursor_read_char_array+0x198>
    3ab0:	mvn	r0, #0
    3ab4:	str	r0, [fp, #-4]
    3ab8:	b	3ac8 <coda_mem_cursor_read_char_array+0x1a4>
    3abc:	b	3ac0 <coda_mem_cursor_read_char_array+0x19c>
    3ac0:	movw	r0, #0
    3ac4:	str	r0, [fp, #-4]
    3ac8:	ldr	r0, [fp, #-4]
    3acc:	mov	sp, fp
    3ad0:	pop	{fp, pc}

00003ad4 <coda_mem_cursor_read_int8_partial_array>:
    3ad4:	push	{fp, lr}
    3ad8:	mov	fp, sp
    3adc:	sub	sp, sp, #48	; 0x30
    3ae0:	str	r0, [fp, #-8]
    3ae4:	str	r1, [fp, #-12]
    3ae8:	str	r2, [fp, #-16]
    3aec:	str	r3, [fp, #-20]	; 0xffffffec
    3af0:	ldr	r0, [fp, #-8]
    3af4:	add	r1, r0, #8
    3af8:	ldr	r0, [r0, #4]
    3afc:	sub	r0, r0, #1
    3b00:	add	r0, r1, r0, lsl #4
    3b04:	ldr	r0, [r0]
    3b08:	str	r0, [sp, #24]
    3b0c:	ldr	r0, [sp, #24]
    3b10:	ldr	r0, [r0, #8]
    3b14:	cmp	r0, #1
    3b18:	bne	3b58 <coda_mem_cursor_read_int8_partial_array+0x84>
    3b1c:	ldr	r0, [fp, #-8]
    3b20:	ldr	r2, [fp, #-12]
    3b24:	ldr	r3, [fp, #-16]
    3b28:	ldr	r1, [fp, #-20]	; 0xffffffec
    3b2c:	movw	ip, #0
    3b30:	movt	ip, #0
    3b34:	str	r1, [sp, #20]
    3b38:	mov	r1, ip
    3b3c:	ldr	ip, [sp, #20]
    3b40:	str	ip, [sp]
    3b44:	movw	lr, #1
    3b48:	str	lr, [sp, #4]
    3b4c:	bl	3c60 <read_partial_array>
    3b50:	str	r0, [fp, #-4]
    3b54:	b	3c54 <coda_mem_cursor_read_int8_partial_array+0x180>
    3b58:	ldr	r0, [sp, #24]
    3b5c:	ldr	r0, [r0, #8]
    3b60:	cmp	r0, #2
    3b64:	bne	3b6c <coda_mem_cursor_read_int8_partial_array+0x98>
    3b68:	b	3b8c <coda_mem_cursor_read_int8_partial_array+0xb8>
    3b6c:	movw	r0, #0
    3b70:	movt	r0, #0
    3b74:	movw	r1, #0
    3b78:	movt	r1, #0
    3b7c:	movw	r2, #991	; 0x3df
    3b80:	movw	r3, #0
    3b84:	movt	r3, #0
    3b88:	bl	0 <__assert_fail>
    3b8c:	ldr	r0, [sp, #24]
    3b90:	ldr	r0, [r0, #4]
    3b94:	ldr	r0, [r0, #40]	; 0x28
    3b98:	ldr	r0, [r0]
    3b9c:	cmp	r0, #1
    3ba0:	bne	3be0 <coda_mem_cursor_read_int8_partial_array+0x10c>
    3ba4:	ldr	r0, [fp, #-8]
    3ba8:	ldr	r2, [fp, #-12]
    3bac:	ldr	r3, [fp, #-16]
    3bb0:	ldr	r1, [fp, #-20]	; 0xffffffec
    3bb4:	movw	ip, #0
    3bb8:	movt	ip, #0
    3bbc:	str	r1, [sp, #16]
    3bc0:	mov	r1, ip
    3bc4:	ldr	ip, [sp, #16]
    3bc8:	str	ip, [sp]
    3bcc:	movw	lr, #1
    3bd0:	str	lr, [sp, #4]
    3bd4:	bl	3c60 <read_partial_array>
    3bd8:	str	r0, [fp, #-4]
    3bdc:	b	3c54 <coda_mem_cursor_read_int8_partial_array+0x180>
    3be0:	ldr	r0, [sp, #24]
    3be4:	ldr	r0, [r0, #4]
    3be8:	ldr	r0, [r0, #40]	; 0x28
    3bec:	ldr	r0, [r0]
    3bf0:	cmp	r0, #0
    3bf4:	bne	3bfc <coda_mem_cursor_read_int8_partial_array+0x128>
    3bf8:	b	3c1c <coda_mem_cursor_read_int8_partial_array+0x148>
    3bfc:	movw	r0, #0
    3c00:	movt	r0, #0
    3c04:	movw	r1, #0
    3c08:	movt	r1, #0
    3c0c:	movw	r2, #997	; 0x3e5
    3c10:	movw	r3, #0
    3c14:	movt	r3, #0
    3c18:	bl	0 <__assert_fail>
    3c1c:	ldr	r0, [fp, #-8]
    3c20:	ldr	r2, [fp, #-12]
    3c24:	ldr	r3, [fp, #-16]
    3c28:	ldr	r1, [fp, #-20]	; 0xffffffec
    3c2c:	movw	ip, #0
    3c30:	movt	ip, #0
    3c34:	str	r1, [sp, #12]
    3c38:	mov	r1, ip
    3c3c:	ldr	ip, [sp, #12]
    3c40:	str	ip, [sp]
    3c44:	movw	lr, #1
    3c48:	str	lr, [sp, #4]
    3c4c:	bl	3c60 <read_partial_array>
    3c50:	str	r0, [fp, #-4]
    3c54:	ldr	r0, [fp, #-4]
    3c58:	mov	sp, fp
    3c5c:	pop	{fp, pc}

00003c60 <read_partial_array>:
    3c60:	push	{r4, r5, fp, lr}
    3c64:	add	fp, sp, #8
    3c68:	sub	sp, sp, #568	; 0x238
    3c6c:	ldr	ip, [fp, #12]
    3c70:	ldr	lr, [fp, #8]
    3c74:	str	r0, [fp, #-16]
    3c78:	str	r1, [fp, #-20]	; 0xffffffec
    3c7c:	str	r2, [fp, #-24]	; 0xffffffe8
    3c80:	str	r3, [fp, #-28]	; 0xffffffe4
    3c84:	ldr	r0, [fp, #-16]
    3c88:	add	r1, sp, #24
    3c8c:	str	r0, [sp, #16]
    3c90:	mov	r0, r1
    3c94:	ldr	r1, [sp, #16]
    3c98:	movw	r2, #520	; 0x208
    3c9c:	str	ip, [sp, #12]
    3ca0:	str	lr, [sp, #8]
    3ca4:	bl	0 <memcpy>
    3ca8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3cac:	cmp	r0, #0
    3cb0:	ble	3d78 <read_partial_array+0x118>
    3cb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3cb8:	add	r0, sp, #24
    3cbc:	bl	0 <coda_cursor_goto_array_element_by_index>
    3cc0:	cmp	r0, #0
    3cc4:	beq	3cd4 <read_partial_array+0x74>
    3cc8:	mvn	r0, #0
    3ccc:	str	r0, [fp, #-12]
    3cd0:	b	3d80 <read_partial_array+0x120>
    3cd4:	movw	r0, #0
    3cd8:	str	r0, [sp, #20]
    3cdc:	ldr	r0, [sp, #20]
    3ce0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3ce4:	cmp	r0, r1
    3ce8:	bge	3d74 <read_partial_array+0x114>
    3cec:	ldr	r0, [fp, #-20]	; 0xffffffec
    3cf0:	ldr	r1, [fp, #8]
    3cf4:	ldr	r2, [sp, #20]
    3cf8:	ldr	r3, [fp, #12]
    3cfc:	mul	r2, r2, r3
    3d00:	add	r1, r1, r2
    3d04:	add	r2, sp, #24
    3d08:	str	r0, [sp, #4]
    3d0c:	mov	r0, r2
    3d10:	ldr	r2, [sp, #4]
    3d14:	blx	r2
    3d18:	cmp	r0, #0
    3d1c:	beq	3d2c <read_partial_array+0xcc>
    3d20:	mvn	r0, #0
    3d24:	str	r0, [fp, #-12]
    3d28:	b	3d80 <read_partial_array+0x120>
    3d2c:	ldr	r0, [sp, #20]
    3d30:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3d34:	sub	r1, r1, #1
    3d38:	cmp	r0, r1
    3d3c:	bge	3d60 <read_partial_array+0x100>
    3d40:	add	r0, sp, #24
    3d44:	bl	0 <coda_cursor_goto_next_array_element>
    3d48:	cmp	r0, #0
    3d4c:	beq	3d5c <read_partial_array+0xfc>
    3d50:	mvn	r0, #0
    3d54:	str	r0, [fp, #-12]
    3d58:	b	3d80 <read_partial_array+0x120>
    3d5c:	b	3d60 <read_partial_array+0x100>
    3d60:	b	3d64 <read_partial_array+0x104>
    3d64:	ldr	r0, [sp, #20]
    3d68:	add	r0, r0, #1
    3d6c:	str	r0, [sp, #20]
    3d70:	b	3cdc <read_partial_array+0x7c>
    3d74:	b	3d78 <read_partial_array+0x118>
    3d78:	movw	r0, #0
    3d7c:	str	r0, [fp, #-12]
    3d80:	ldr	r0, [fp, #-12]
    3d84:	sub	sp, fp, #8
    3d88:	pop	{r4, r5, fp, pc}

00003d8c <coda_mem_cursor_read_uint8_partial_array>:
    3d8c:	push	{fp, lr}
    3d90:	mov	fp, sp
    3d94:	sub	sp, sp, #48	; 0x30
    3d98:	str	r0, [fp, #-8]
    3d9c:	str	r1, [fp, #-12]
    3da0:	str	r2, [fp, #-16]
    3da4:	str	r3, [fp, #-20]	; 0xffffffec
    3da8:	ldr	r0, [fp, #-8]
    3dac:	add	r1, r0, #8
    3db0:	ldr	r0, [r0, #4]
    3db4:	sub	r0, r0, #1
    3db8:	add	r0, r1, r0, lsl #4
    3dbc:	ldr	r0, [r0]
    3dc0:	str	r0, [sp, #24]
    3dc4:	ldr	r0, [sp, #24]
    3dc8:	ldr	r0, [r0, #8]
    3dcc:	cmp	r0, #1
    3dd0:	bne	3e10 <coda_mem_cursor_read_uint8_partial_array+0x84>
    3dd4:	ldr	r0, [fp, #-8]
    3dd8:	ldr	r2, [fp, #-12]
    3ddc:	ldr	r3, [fp, #-16]
    3de0:	ldr	r1, [fp, #-20]	; 0xffffffec
    3de4:	movw	ip, #0
    3de8:	movt	ip, #0
    3dec:	str	r1, [sp, #20]
    3df0:	mov	r1, ip
    3df4:	ldr	ip, [sp, #20]
    3df8:	str	ip, [sp]
    3dfc:	movw	lr, #1
    3e00:	str	lr, [sp, #4]
    3e04:	bl	3c60 <read_partial_array>
    3e08:	str	r0, [fp, #-4]
    3e0c:	b	3f0c <coda_mem_cursor_read_uint8_partial_array+0x180>
    3e10:	ldr	r0, [sp, #24]
    3e14:	ldr	r0, [r0, #8]
    3e18:	cmp	r0, #2
    3e1c:	bne	3e24 <coda_mem_cursor_read_uint8_partial_array+0x98>
    3e20:	b	3e44 <coda_mem_cursor_read_uint8_partial_array+0xb8>
    3e24:	movw	r0, #0
    3e28:	movt	r0, #0
    3e2c:	movw	r1, #0
    3e30:	movt	r1, #0
    3e34:	movw	r2, #1011	; 0x3f3
    3e38:	movw	r3, #0
    3e3c:	movt	r3, #0
    3e40:	bl	0 <__assert_fail>
    3e44:	ldr	r0, [sp, #24]
    3e48:	ldr	r0, [r0, #4]
    3e4c:	ldr	r0, [r0, #40]	; 0x28
    3e50:	ldr	r0, [r0]
    3e54:	cmp	r0, #1
    3e58:	bne	3e98 <coda_mem_cursor_read_uint8_partial_array+0x10c>
    3e5c:	ldr	r0, [fp, #-8]
    3e60:	ldr	r2, [fp, #-12]
    3e64:	ldr	r3, [fp, #-16]
    3e68:	ldr	r1, [fp, #-20]	; 0xffffffec
    3e6c:	movw	ip, #0
    3e70:	movt	ip, #0
    3e74:	str	r1, [sp, #16]
    3e78:	mov	r1, ip
    3e7c:	ldr	ip, [sp, #16]
    3e80:	str	ip, [sp]
    3e84:	movw	lr, #1
    3e88:	str	lr, [sp, #4]
    3e8c:	bl	3c60 <read_partial_array>
    3e90:	str	r0, [fp, #-4]
    3e94:	b	3f0c <coda_mem_cursor_read_uint8_partial_array+0x180>
    3e98:	ldr	r0, [sp, #24]
    3e9c:	ldr	r0, [r0, #4]
    3ea0:	ldr	r0, [r0, #40]	; 0x28
    3ea4:	ldr	r0, [r0]
    3ea8:	cmp	r0, #0
    3eac:	bne	3eb4 <coda_mem_cursor_read_uint8_partial_array+0x128>
    3eb0:	b	3ed4 <coda_mem_cursor_read_uint8_partial_array+0x148>
    3eb4:	movw	r0, #0
    3eb8:	movt	r0, #0
    3ebc:	movw	r1, #0
    3ec0:	movt	r1, #0
    3ec4:	movw	r2, #1017	; 0x3f9
    3ec8:	movw	r3, #0
    3ecc:	movt	r3, #0
    3ed0:	bl	0 <__assert_fail>
    3ed4:	ldr	r0, [fp, #-8]
    3ed8:	ldr	r2, [fp, #-12]
    3edc:	ldr	r3, [fp, #-16]
    3ee0:	ldr	r1, [fp, #-20]	; 0xffffffec
    3ee4:	movw	ip, #0
    3ee8:	movt	ip, #0
    3eec:	str	r1, [sp, #12]
    3ef0:	mov	r1, ip
    3ef4:	ldr	ip, [sp, #12]
    3ef8:	str	ip, [sp]
    3efc:	movw	lr, #1
    3f00:	str	lr, [sp, #4]
    3f04:	bl	3c60 <read_partial_array>
    3f08:	str	r0, [fp, #-4]
    3f0c:	ldr	r0, [fp, #-4]
    3f10:	mov	sp, fp
    3f14:	pop	{fp, pc}

00003f18 <coda_mem_cursor_read_int16_partial_array>:
    3f18:	push	{fp, lr}
    3f1c:	mov	fp, sp
    3f20:	sub	sp, sp, #48	; 0x30
    3f24:	str	r0, [fp, #-8]
    3f28:	str	r1, [fp, #-12]
    3f2c:	str	r2, [fp, #-16]
    3f30:	str	r3, [fp, #-20]	; 0xffffffec
    3f34:	ldr	r0, [fp, #-8]
    3f38:	add	r1, r0, #8
    3f3c:	ldr	r0, [r0, #4]
    3f40:	sub	r0, r0, #1
    3f44:	add	r0, r1, r0, lsl #4
    3f48:	ldr	r0, [r0]
    3f4c:	str	r0, [sp, #24]
    3f50:	ldr	r0, [sp, #24]
    3f54:	ldr	r0, [r0, #8]
    3f58:	cmp	r0, #1
    3f5c:	bne	3f9c <coda_mem_cursor_read_int16_partial_array+0x84>
    3f60:	movw	r0, #0
    3f64:	movt	r0, #0
    3f68:	ldr	r1, [fp, #-8]
    3f6c:	ldr	r2, [fp, #-12]
    3f70:	ldr	r3, [fp, #-16]
    3f74:	ldr	ip, [fp, #-20]	; 0xffffffec
    3f78:	str	r0, [sp, #20]
    3f7c:	mov	r0, r1
    3f80:	ldr	r1, [sp, #20]
    3f84:	str	ip, [sp]
    3f88:	movw	ip, #2
    3f8c:	str	ip, [sp, #4]
    3f90:	bl	3c60 <read_partial_array>
    3f94:	str	r0, [fp, #-4]
    3f98:	b	4098 <coda_mem_cursor_read_int16_partial_array+0x180>
    3f9c:	ldr	r0, [sp, #24]
    3fa0:	ldr	r0, [r0, #8]
    3fa4:	cmp	r0, #2
    3fa8:	bne	3fb0 <coda_mem_cursor_read_int16_partial_array+0x98>
    3fac:	b	3fd0 <coda_mem_cursor_read_int16_partial_array+0xb8>
    3fb0:	movw	r0, #0
    3fb4:	movt	r0, #0
    3fb8:	movw	r1, #0
    3fbc:	movt	r1, #0
    3fc0:	movw	r2, #1031	; 0x407
    3fc4:	movw	r3, #0
    3fc8:	movt	r3, #0
    3fcc:	bl	0 <__assert_fail>
    3fd0:	ldr	r0, [sp, #24]
    3fd4:	ldr	r0, [r0, #4]
    3fd8:	ldr	r0, [r0, #40]	; 0x28
    3fdc:	ldr	r0, [r0]
    3fe0:	cmp	r0, #1
    3fe4:	bne	4024 <coda_mem_cursor_read_int16_partial_array+0x10c>
    3fe8:	movw	r0, #0
    3fec:	movt	r0, #0
    3ff0:	ldr	r1, [fp, #-8]
    3ff4:	ldr	r2, [fp, #-12]
    3ff8:	ldr	r3, [fp, #-16]
    3ffc:	ldr	ip, [fp, #-20]	; 0xffffffec
    4000:	str	r0, [sp, #16]
    4004:	mov	r0, r1
    4008:	ldr	r1, [sp, #16]
    400c:	str	ip, [sp]
    4010:	movw	ip, #2
    4014:	str	ip, [sp, #4]
    4018:	bl	3c60 <read_partial_array>
    401c:	str	r0, [fp, #-4]
    4020:	b	4098 <coda_mem_cursor_read_int16_partial_array+0x180>
    4024:	ldr	r0, [sp, #24]
    4028:	ldr	r0, [r0, #4]
    402c:	ldr	r0, [r0, #40]	; 0x28
    4030:	ldr	r0, [r0]
    4034:	cmp	r0, #0
    4038:	bne	4040 <coda_mem_cursor_read_int16_partial_array+0x128>
    403c:	b	4060 <coda_mem_cursor_read_int16_partial_array+0x148>
    4040:	movw	r0, #0
    4044:	movt	r0, #0
    4048:	movw	r1, #0
    404c:	movt	r1, #0
    4050:	movw	r2, #1037	; 0x40d
    4054:	movw	r3, #0
    4058:	movt	r3, #0
    405c:	bl	0 <__assert_fail>
    4060:	movw	r0, #0
    4064:	movt	r0, #0
    4068:	ldr	r1, [fp, #-8]
    406c:	ldr	r2, [fp, #-12]
    4070:	ldr	r3, [fp, #-16]
    4074:	ldr	ip, [fp, #-20]	; 0xffffffec
    4078:	str	r0, [sp, #12]
    407c:	mov	r0, r1
    4080:	ldr	r1, [sp, #12]
    4084:	str	ip, [sp]
    4088:	movw	ip, #2
    408c:	str	ip, [sp, #4]
    4090:	bl	3c60 <read_partial_array>
    4094:	str	r0, [fp, #-4]
    4098:	ldr	r0, [fp, #-4]
    409c:	mov	sp, fp
    40a0:	pop	{fp, pc}

000040a4 <coda_mem_cursor_read_uint16_partial_array>:
    40a4:	push	{fp, lr}
    40a8:	mov	fp, sp
    40ac:	sub	sp, sp, #48	; 0x30
    40b0:	str	r0, [fp, #-8]
    40b4:	str	r1, [fp, #-12]
    40b8:	str	r2, [fp, #-16]
    40bc:	str	r3, [fp, #-20]	; 0xffffffec
    40c0:	ldr	r0, [fp, #-8]
    40c4:	add	r1, r0, #8
    40c8:	ldr	r0, [r0, #4]
    40cc:	sub	r0, r0, #1
    40d0:	add	r0, r1, r0, lsl #4
    40d4:	ldr	r0, [r0]
    40d8:	str	r0, [sp, #24]
    40dc:	ldr	r0, [sp, #24]
    40e0:	ldr	r0, [r0, #8]
    40e4:	cmp	r0, #1
    40e8:	bne	4128 <coda_mem_cursor_read_uint16_partial_array+0x84>
    40ec:	movw	r0, #0
    40f0:	movt	r0, #0
    40f4:	ldr	r1, [fp, #-8]
    40f8:	ldr	r2, [fp, #-12]
    40fc:	ldr	r3, [fp, #-16]
    4100:	ldr	ip, [fp, #-20]	; 0xffffffec
    4104:	str	r0, [sp, #20]
    4108:	mov	r0, r1
    410c:	ldr	r1, [sp, #20]
    4110:	str	ip, [sp]
    4114:	movw	ip, #2
    4118:	str	ip, [sp, #4]
    411c:	bl	3c60 <read_partial_array>
    4120:	str	r0, [fp, #-4]
    4124:	b	4224 <coda_mem_cursor_read_uint16_partial_array+0x180>
    4128:	ldr	r0, [sp, #24]
    412c:	ldr	r0, [r0, #8]
    4130:	cmp	r0, #2
    4134:	bne	413c <coda_mem_cursor_read_uint16_partial_array+0x98>
    4138:	b	415c <coda_mem_cursor_read_uint16_partial_array+0xb8>
    413c:	movw	r0, #0
    4140:	movt	r0, #0
    4144:	movw	r1, #0
    4148:	movt	r1, #0
    414c:	movw	r2, #1051	; 0x41b
    4150:	movw	r3, #0
    4154:	movt	r3, #0
    4158:	bl	0 <__assert_fail>
    415c:	ldr	r0, [sp, #24]
    4160:	ldr	r0, [r0, #4]
    4164:	ldr	r0, [r0, #40]	; 0x28
    4168:	ldr	r0, [r0]
    416c:	cmp	r0, #1
    4170:	bne	41b0 <coda_mem_cursor_read_uint16_partial_array+0x10c>
    4174:	movw	r0, #0
    4178:	movt	r0, #0
    417c:	ldr	r1, [fp, #-8]
    4180:	ldr	r2, [fp, #-12]
    4184:	ldr	r3, [fp, #-16]
    4188:	ldr	ip, [fp, #-20]	; 0xffffffec
    418c:	str	r0, [sp, #16]
    4190:	mov	r0, r1
    4194:	ldr	r1, [sp, #16]
    4198:	str	ip, [sp]
    419c:	movw	ip, #2
    41a0:	str	ip, [sp, #4]
    41a4:	bl	3c60 <read_partial_array>
    41a8:	str	r0, [fp, #-4]
    41ac:	b	4224 <coda_mem_cursor_read_uint16_partial_array+0x180>
    41b0:	ldr	r0, [sp, #24]
    41b4:	ldr	r0, [r0, #4]
    41b8:	ldr	r0, [r0, #40]	; 0x28
    41bc:	ldr	r0, [r0]
    41c0:	cmp	r0, #0
    41c4:	bne	41cc <coda_mem_cursor_read_uint16_partial_array+0x128>
    41c8:	b	41ec <coda_mem_cursor_read_uint16_partial_array+0x148>
    41cc:	movw	r0, #0
    41d0:	movt	r0, #0
    41d4:	movw	r1, #0
    41d8:	movt	r1, #0
    41dc:	movw	r2, #1057	; 0x421
    41e0:	movw	r3, #0
    41e4:	movt	r3, #0
    41e8:	bl	0 <__assert_fail>
    41ec:	movw	r0, #0
    41f0:	movt	r0, #0
    41f4:	ldr	r1, [fp, #-8]
    41f8:	ldr	r2, [fp, #-12]
    41fc:	ldr	r3, [fp, #-16]
    4200:	ldr	ip, [fp, #-20]	; 0xffffffec
    4204:	str	r0, [sp, #12]
    4208:	mov	r0, r1
    420c:	ldr	r1, [sp, #12]
    4210:	str	ip, [sp]
    4214:	movw	ip, #2
    4218:	str	ip, [sp, #4]
    421c:	bl	3c60 <read_partial_array>
    4220:	str	r0, [fp, #-4]
    4224:	ldr	r0, [fp, #-4]
    4228:	mov	sp, fp
    422c:	pop	{fp, pc}

00004230 <coda_mem_cursor_read_int32_partial_array>:
    4230:	push	{fp, lr}
    4234:	mov	fp, sp
    4238:	sub	sp, sp, #48	; 0x30
    423c:	str	r0, [fp, #-8]
    4240:	str	r1, [fp, #-12]
    4244:	str	r2, [fp, #-16]
    4248:	str	r3, [fp, #-20]	; 0xffffffec
    424c:	ldr	r0, [fp, #-8]
    4250:	add	r1, r0, #8
    4254:	ldr	r0, [r0, #4]
    4258:	sub	r0, r0, #1
    425c:	add	r0, r1, r0, lsl #4
    4260:	ldr	r0, [r0]
    4264:	str	r0, [sp, #24]
    4268:	ldr	r0, [sp, #24]
    426c:	ldr	r0, [r0, #8]
    4270:	cmp	r0, #1
    4274:	bne	42b4 <coda_mem_cursor_read_int32_partial_array+0x84>
    4278:	movw	r0, #0
    427c:	movt	r0, #0
    4280:	ldr	r1, [fp, #-8]
    4284:	ldr	r2, [fp, #-12]
    4288:	ldr	r3, [fp, #-16]
    428c:	ldr	ip, [fp, #-20]	; 0xffffffec
    4290:	str	r0, [sp, #20]
    4294:	mov	r0, r1
    4298:	ldr	r1, [sp, #20]
    429c:	str	ip, [sp]
    42a0:	movw	ip, #4
    42a4:	str	ip, [sp, #4]
    42a8:	bl	3c60 <read_partial_array>
    42ac:	str	r0, [fp, #-4]
    42b0:	b	43b0 <coda_mem_cursor_read_int32_partial_array+0x180>
    42b4:	ldr	r0, [sp, #24]
    42b8:	ldr	r0, [r0, #8]
    42bc:	cmp	r0, #2
    42c0:	bne	42c8 <coda_mem_cursor_read_int32_partial_array+0x98>
    42c4:	b	42e8 <coda_mem_cursor_read_int32_partial_array+0xb8>
    42c8:	movw	r0, #0
    42cc:	movt	r0, #0
    42d0:	movw	r1, #0
    42d4:	movt	r1, #0
    42d8:	movw	r2, #1071	; 0x42f
    42dc:	movw	r3, #0
    42e0:	movt	r3, #0
    42e4:	bl	0 <__assert_fail>
    42e8:	ldr	r0, [sp, #24]
    42ec:	ldr	r0, [r0, #4]
    42f0:	ldr	r0, [r0, #40]	; 0x28
    42f4:	ldr	r0, [r0]
    42f8:	cmp	r0, #1
    42fc:	bne	433c <coda_mem_cursor_read_int32_partial_array+0x10c>
    4300:	movw	r0, #0
    4304:	movt	r0, #0
    4308:	ldr	r1, [fp, #-8]
    430c:	ldr	r2, [fp, #-12]
    4310:	ldr	r3, [fp, #-16]
    4314:	ldr	ip, [fp, #-20]	; 0xffffffec
    4318:	str	r0, [sp, #16]
    431c:	mov	r0, r1
    4320:	ldr	r1, [sp, #16]
    4324:	str	ip, [sp]
    4328:	movw	ip, #4
    432c:	str	ip, [sp, #4]
    4330:	bl	3c60 <read_partial_array>
    4334:	str	r0, [fp, #-4]
    4338:	b	43b0 <coda_mem_cursor_read_int32_partial_array+0x180>
    433c:	ldr	r0, [sp, #24]
    4340:	ldr	r0, [r0, #4]
    4344:	ldr	r0, [r0, #40]	; 0x28
    4348:	ldr	r0, [r0]
    434c:	cmp	r0, #0
    4350:	bne	4358 <coda_mem_cursor_read_int32_partial_array+0x128>
    4354:	b	4378 <coda_mem_cursor_read_int32_partial_array+0x148>
    4358:	movw	r0, #0
    435c:	movt	r0, #0
    4360:	movw	r1, #0
    4364:	movt	r1, #0
    4368:	movw	r2, #1077	; 0x435
    436c:	movw	r3, #0
    4370:	movt	r3, #0
    4374:	bl	0 <__assert_fail>
    4378:	movw	r0, #0
    437c:	movt	r0, #0
    4380:	ldr	r1, [fp, #-8]
    4384:	ldr	r2, [fp, #-12]
    4388:	ldr	r3, [fp, #-16]
    438c:	ldr	ip, [fp, #-20]	; 0xffffffec
    4390:	str	r0, [sp, #12]
    4394:	mov	r0, r1
    4398:	ldr	r1, [sp, #12]
    439c:	str	ip, [sp]
    43a0:	movw	ip, #4
    43a4:	str	ip, [sp, #4]
    43a8:	bl	3c60 <read_partial_array>
    43ac:	str	r0, [fp, #-4]
    43b0:	ldr	r0, [fp, #-4]
    43b4:	mov	sp, fp
    43b8:	pop	{fp, pc}

000043bc <coda_mem_cursor_read_uint32_partial_array>:
    43bc:	push	{fp, lr}
    43c0:	mov	fp, sp
    43c4:	sub	sp, sp, #48	; 0x30
    43c8:	str	r0, [fp, #-8]
    43cc:	str	r1, [fp, #-12]
    43d0:	str	r2, [fp, #-16]
    43d4:	str	r3, [fp, #-20]	; 0xffffffec
    43d8:	ldr	r0, [fp, #-8]
    43dc:	add	r1, r0, #8
    43e0:	ldr	r0, [r0, #4]
    43e4:	sub	r0, r0, #1
    43e8:	add	r0, r1, r0, lsl #4
    43ec:	ldr	r0, [r0]
    43f0:	str	r0, [sp, #24]
    43f4:	ldr	r0, [sp, #24]
    43f8:	ldr	r0, [r0, #8]
    43fc:	cmp	r0, #1
    4400:	bne	4440 <coda_mem_cursor_read_uint32_partial_array+0x84>
    4404:	movw	r0, #0
    4408:	movt	r0, #0
    440c:	ldr	r1, [fp, #-8]
    4410:	ldr	r2, [fp, #-12]
    4414:	ldr	r3, [fp, #-16]
    4418:	ldr	ip, [fp, #-20]	; 0xffffffec
    441c:	str	r0, [sp, #20]
    4420:	mov	r0, r1
    4424:	ldr	r1, [sp, #20]
    4428:	str	ip, [sp]
    442c:	movw	ip, #4
    4430:	str	ip, [sp, #4]
    4434:	bl	3c60 <read_partial_array>
    4438:	str	r0, [fp, #-4]
    443c:	b	453c <coda_mem_cursor_read_uint32_partial_array+0x180>
    4440:	ldr	r0, [sp, #24]
    4444:	ldr	r0, [r0, #8]
    4448:	cmp	r0, #2
    444c:	bne	4454 <coda_mem_cursor_read_uint32_partial_array+0x98>
    4450:	b	4474 <coda_mem_cursor_read_uint32_partial_array+0xb8>
    4454:	movw	r0, #0
    4458:	movt	r0, #0
    445c:	movw	r1, #0
    4460:	movt	r1, #0
    4464:	movw	r2, #1091	; 0x443
    4468:	movw	r3, #0
    446c:	movt	r3, #0
    4470:	bl	0 <__assert_fail>
    4474:	ldr	r0, [sp, #24]
    4478:	ldr	r0, [r0, #4]
    447c:	ldr	r0, [r0, #40]	; 0x28
    4480:	ldr	r0, [r0]
    4484:	cmp	r0, #1
    4488:	bne	44c8 <coda_mem_cursor_read_uint32_partial_array+0x10c>
    448c:	movw	r0, #0
    4490:	movt	r0, #0
    4494:	ldr	r1, [fp, #-8]
    4498:	ldr	r2, [fp, #-12]
    449c:	ldr	r3, [fp, #-16]
    44a0:	ldr	ip, [fp, #-20]	; 0xffffffec
    44a4:	str	r0, [sp, #16]
    44a8:	mov	r0, r1
    44ac:	ldr	r1, [sp, #16]
    44b0:	str	ip, [sp]
    44b4:	movw	ip, #4
    44b8:	str	ip, [sp, #4]
    44bc:	bl	3c60 <read_partial_array>
    44c0:	str	r0, [fp, #-4]
    44c4:	b	453c <coda_mem_cursor_read_uint32_partial_array+0x180>
    44c8:	ldr	r0, [sp, #24]
    44cc:	ldr	r0, [r0, #4]
    44d0:	ldr	r0, [r0, #40]	; 0x28
    44d4:	ldr	r0, [r0]
    44d8:	cmp	r0, #0
    44dc:	bne	44e4 <coda_mem_cursor_read_uint32_partial_array+0x128>
    44e0:	b	4504 <coda_mem_cursor_read_uint32_partial_array+0x148>
    44e4:	movw	r0, #0
    44e8:	movt	r0, #0
    44ec:	movw	r1, #0
    44f0:	movt	r1, #0
    44f4:	movw	r2, #1097	; 0x449
    44f8:	movw	r3, #0
    44fc:	movt	r3, #0
    4500:	bl	0 <__assert_fail>
    4504:	movw	r0, #0
    4508:	movt	r0, #0
    450c:	ldr	r1, [fp, #-8]
    4510:	ldr	r2, [fp, #-12]
    4514:	ldr	r3, [fp, #-16]
    4518:	ldr	ip, [fp, #-20]	; 0xffffffec
    451c:	str	r0, [sp, #12]
    4520:	mov	r0, r1
    4524:	ldr	r1, [sp, #12]
    4528:	str	ip, [sp]
    452c:	movw	ip, #4
    4530:	str	ip, [sp, #4]
    4534:	bl	3c60 <read_partial_array>
    4538:	str	r0, [fp, #-4]
    453c:	ldr	r0, [fp, #-4]
    4540:	mov	sp, fp
    4544:	pop	{fp, pc}

00004548 <coda_mem_cursor_read_int64_partial_array>:
    4548:	push	{fp, lr}
    454c:	mov	fp, sp
    4550:	sub	sp, sp, #48	; 0x30
    4554:	str	r0, [fp, #-8]
    4558:	str	r1, [fp, #-12]
    455c:	str	r2, [fp, #-16]
    4560:	str	r3, [fp, #-20]	; 0xffffffec
    4564:	ldr	r0, [fp, #-8]
    4568:	add	r1, r0, #8
    456c:	ldr	r0, [r0, #4]
    4570:	sub	r0, r0, #1
    4574:	add	r0, r1, r0, lsl #4
    4578:	ldr	r0, [r0]
    457c:	str	r0, [sp, #24]
    4580:	ldr	r0, [sp, #24]
    4584:	ldr	r0, [r0, #8]
    4588:	cmp	r0, #1
    458c:	bne	45cc <coda_mem_cursor_read_int64_partial_array+0x84>
    4590:	movw	r0, #0
    4594:	movt	r0, #0
    4598:	ldr	r1, [fp, #-8]
    459c:	ldr	r2, [fp, #-12]
    45a0:	ldr	r3, [fp, #-16]
    45a4:	ldr	ip, [fp, #-20]	; 0xffffffec
    45a8:	str	r0, [sp, #20]
    45ac:	mov	r0, r1
    45b0:	ldr	r1, [sp, #20]
    45b4:	str	ip, [sp]
    45b8:	movw	ip, #8
    45bc:	str	ip, [sp, #4]
    45c0:	bl	3c60 <read_partial_array>
    45c4:	str	r0, [fp, #-4]
    45c8:	b	46c8 <coda_mem_cursor_read_int64_partial_array+0x180>
    45cc:	ldr	r0, [sp, #24]
    45d0:	ldr	r0, [r0, #8]
    45d4:	cmp	r0, #2
    45d8:	bne	45e0 <coda_mem_cursor_read_int64_partial_array+0x98>
    45dc:	b	4600 <coda_mem_cursor_read_int64_partial_array+0xb8>
    45e0:	movw	r0, #0
    45e4:	movt	r0, #0
    45e8:	movw	r1, #0
    45ec:	movt	r1, #0
    45f0:	movw	r2, #1111	; 0x457
    45f4:	movw	r3, #0
    45f8:	movt	r3, #0
    45fc:	bl	0 <__assert_fail>
    4600:	ldr	r0, [sp, #24]
    4604:	ldr	r0, [r0, #4]
    4608:	ldr	r0, [r0, #40]	; 0x28
    460c:	ldr	r0, [r0]
    4610:	cmp	r0, #1
    4614:	bne	4654 <coda_mem_cursor_read_int64_partial_array+0x10c>
    4618:	movw	r0, #0
    461c:	movt	r0, #0
    4620:	ldr	r1, [fp, #-8]
    4624:	ldr	r2, [fp, #-12]
    4628:	ldr	r3, [fp, #-16]
    462c:	ldr	ip, [fp, #-20]	; 0xffffffec
    4630:	str	r0, [sp, #16]
    4634:	mov	r0, r1
    4638:	ldr	r1, [sp, #16]
    463c:	str	ip, [sp]
    4640:	movw	ip, #8
    4644:	str	ip, [sp, #4]
    4648:	bl	3c60 <read_partial_array>
    464c:	str	r0, [fp, #-4]
    4650:	b	46c8 <coda_mem_cursor_read_int64_partial_array+0x180>
    4654:	ldr	r0, [sp, #24]
    4658:	ldr	r0, [r0, #4]
    465c:	ldr	r0, [r0, #40]	; 0x28
    4660:	ldr	r0, [r0]
    4664:	cmp	r0, #0
    4668:	bne	4670 <coda_mem_cursor_read_int64_partial_array+0x128>
    466c:	b	4690 <coda_mem_cursor_read_int64_partial_array+0x148>
    4670:	movw	r0, #0
    4674:	movt	r0, #0
    4678:	movw	r1, #0
    467c:	movt	r1, #0
    4680:	movw	r2, #1117	; 0x45d
    4684:	movw	r3, #0
    4688:	movt	r3, #0
    468c:	bl	0 <__assert_fail>
    4690:	movw	r0, #0
    4694:	movt	r0, #0
    4698:	ldr	r1, [fp, #-8]
    469c:	ldr	r2, [fp, #-12]
    46a0:	ldr	r3, [fp, #-16]
    46a4:	ldr	ip, [fp, #-20]	; 0xffffffec
    46a8:	str	r0, [sp, #12]
    46ac:	mov	r0, r1
    46b0:	ldr	r1, [sp, #12]
    46b4:	str	ip, [sp]
    46b8:	movw	ip, #8
    46bc:	str	ip, [sp, #4]
    46c0:	bl	3c60 <read_partial_array>
    46c4:	str	r0, [fp, #-4]
    46c8:	ldr	r0, [fp, #-4]
    46cc:	mov	sp, fp
    46d0:	pop	{fp, pc}

000046d4 <coda_mem_cursor_read_uint64_partial_array>:
    46d4:	push	{fp, lr}
    46d8:	mov	fp, sp
    46dc:	sub	sp, sp, #48	; 0x30
    46e0:	str	r0, [fp, #-8]
    46e4:	str	r1, [fp, #-12]
    46e8:	str	r2, [fp, #-16]
    46ec:	str	r3, [fp, #-20]	; 0xffffffec
    46f0:	ldr	r0, [fp, #-8]
    46f4:	add	r1, r0, #8
    46f8:	ldr	r0, [r0, #4]
    46fc:	sub	r0, r0, #1
    4700:	add	r0, r1, r0, lsl #4
    4704:	ldr	r0, [r0]
    4708:	str	r0, [sp, #24]
    470c:	ldr	r0, [sp, #24]
    4710:	ldr	r0, [r0, #8]
    4714:	cmp	r0, #1
    4718:	bne	4758 <coda_mem_cursor_read_uint64_partial_array+0x84>
    471c:	movw	r0, #0
    4720:	movt	r0, #0
    4724:	ldr	r1, [fp, #-8]
    4728:	ldr	r2, [fp, #-12]
    472c:	ldr	r3, [fp, #-16]
    4730:	ldr	ip, [fp, #-20]	; 0xffffffec
    4734:	str	r0, [sp, #20]
    4738:	mov	r0, r1
    473c:	ldr	r1, [sp, #20]
    4740:	str	ip, [sp]
    4744:	movw	ip, #8
    4748:	str	ip, [sp, #4]
    474c:	bl	3c60 <read_partial_array>
    4750:	str	r0, [fp, #-4]
    4754:	b	4854 <coda_mem_cursor_read_uint64_partial_array+0x180>
    4758:	ldr	r0, [sp, #24]
    475c:	ldr	r0, [r0, #8]
    4760:	cmp	r0, #2
    4764:	bne	476c <coda_mem_cursor_read_uint64_partial_array+0x98>
    4768:	b	478c <coda_mem_cursor_read_uint64_partial_array+0xb8>
    476c:	movw	r0, #0
    4770:	movt	r0, #0
    4774:	movw	r1, #0
    4778:	movt	r1, #0
    477c:	movw	r2, #1131	; 0x46b
    4780:	movw	r3, #0
    4784:	movt	r3, #0
    4788:	bl	0 <__assert_fail>
    478c:	ldr	r0, [sp, #24]
    4790:	ldr	r0, [r0, #4]
    4794:	ldr	r0, [r0, #40]	; 0x28
    4798:	ldr	r0, [r0]
    479c:	cmp	r0, #1
    47a0:	bne	47e0 <coda_mem_cursor_read_uint64_partial_array+0x10c>
    47a4:	movw	r0, #0
    47a8:	movt	r0, #0
    47ac:	ldr	r1, [fp, #-8]
    47b0:	ldr	r2, [fp, #-12]
    47b4:	ldr	r3, [fp, #-16]
    47b8:	ldr	ip, [fp, #-20]	; 0xffffffec
    47bc:	str	r0, [sp, #16]
    47c0:	mov	r0, r1
    47c4:	ldr	r1, [sp, #16]
    47c8:	str	ip, [sp]
    47cc:	movw	ip, #8
    47d0:	str	ip, [sp, #4]
    47d4:	bl	3c60 <read_partial_array>
    47d8:	str	r0, [fp, #-4]
    47dc:	b	4854 <coda_mem_cursor_read_uint64_partial_array+0x180>
    47e0:	ldr	r0, [sp, #24]
    47e4:	ldr	r0, [r0, #4]
    47e8:	ldr	r0, [r0, #40]	; 0x28
    47ec:	ldr	r0, [r0]
    47f0:	cmp	r0, #0
    47f4:	bne	47fc <coda_mem_cursor_read_uint64_partial_array+0x128>
    47f8:	b	481c <coda_mem_cursor_read_uint64_partial_array+0x148>
    47fc:	movw	r0, #0
    4800:	movt	r0, #0
    4804:	movw	r1, #0
    4808:	movt	r1, #0
    480c:	movw	r2, #1137	; 0x471
    4810:	movw	r3, #0
    4814:	movt	r3, #0
    4818:	bl	0 <__assert_fail>
    481c:	movw	r0, #0
    4820:	movt	r0, #0
    4824:	ldr	r1, [fp, #-8]
    4828:	ldr	r2, [fp, #-12]
    482c:	ldr	r3, [fp, #-16]
    4830:	ldr	ip, [fp, #-20]	; 0xffffffec
    4834:	str	r0, [sp, #12]
    4838:	mov	r0, r1
    483c:	ldr	r1, [sp, #12]
    4840:	str	ip, [sp]
    4844:	movw	ip, #8
    4848:	str	ip, [sp, #4]
    484c:	bl	3c60 <read_partial_array>
    4850:	str	r0, [fp, #-4]
    4854:	ldr	r0, [fp, #-4]
    4858:	mov	sp, fp
    485c:	pop	{fp, pc}

00004860 <coda_mem_cursor_read_float_partial_array>:
    4860:	push	{fp, lr}
    4864:	mov	fp, sp
    4868:	sub	sp, sp, #48	; 0x30
    486c:	str	r0, [fp, #-8]
    4870:	str	r1, [fp, #-12]
    4874:	str	r2, [fp, #-16]
    4878:	str	r3, [fp, #-20]	; 0xffffffec
    487c:	ldr	r0, [fp, #-8]
    4880:	add	r1, r0, #8
    4884:	ldr	r0, [r0, #4]
    4888:	sub	r0, r0, #1
    488c:	add	r0, r1, r0, lsl #4
    4890:	ldr	r0, [r0]
    4894:	str	r0, [sp, #24]
    4898:	ldr	r0, [sp, #24]
    489c:	ldr	r0, [r0, #8]
    48a0:	cmp	r0, #1
    48a4:	bne	48e4 <coda_mem_cursor_read_float_partial_array+0x84>
    48a8:	movw	r0, #0
    48ac:	movt	r0, #0
    48b0:	ldr	r1, [fp, #-8]
    48b4:	ldr	r2, [fp, #-12]
    48b8:	ldr	r3, [fp, #-16]
    48bc:	ldr	ip, [fp, #-20]	; 0xffffffec
    48c0:	str	r0, [sp, #20]
    48c4:	mov	r0, r1
    48c8:	ldr	r1, [sp, #20]
    48cc:	str	ip, [sp]
    48d0:	movw	ip, #4
    48d4:	str	ip, [sp, #4]
    48d8:	bl	3c60 <read_partial_array>
    48dc:	str	r0, [fp, #-4]
    48e0:	b	49e0 <coda_mem_cursor_read_float_partial_array+0x180>
    48e4:	ldr	r0, [sp, #24]
    48e8:	ldr	r0, [r0, #8]
    48ec:	cmp	r0, #2
    48f0:	bne	48f8 <coda_mem_cursor_read_float_partial_array+0x98>
    48f4:	b	4918 <coda_mem_cursor_read_float_partial_array+0xb8>
    48f8:	movw	r0, #0
    48fc:	movt	r0, #0
    4900:	movw	r1, #0
    4904:	movt	r1, #0
    4908:	movw	r2, #1151	; 0x47f
    490c:	movw	r3, #0
    4910:	movt	r3, #0
    4914:	bl	0 <__assert_fail>
    4918:	ldr	r0, [sp, #24]
    491c:	ldr	r0, [r0, #4]
    4920:	ldr	r0, [r0, #40]	; 0x28
    4924:	ldr	r0, [r0]
    4928:	cmp	r0, #1
    492c:	bne	496c <coda_mem_cursor_read_float_partial_array+0x10c>
    4930:	movw	r0, #0
    4934:	movt	r0, #0
    4938:	ldr	r1, [fp, #-8]
    493c:	ldr	r2, [fp, #-12]
    4940:	ldr	r3, [fp, #-16]
    4944:	ldr	ip, [fp, #-20]	; 0xffffffec
    4948:	str	r0, [sp, #16]
    494c:	mov	r0, r1
    4950:	ldr	r1, [sp, #16]
    4954:	str	ip, [sp]
    4958:	movw	ip, #4
    495c:	str	ip, [sp, #4]
    4960:	bl	3c60 <read_partial_array>
    4964:	str	r0, [fp, #-4]
    4968:	b	49e0 <coda_mem_cursor_read_float_partial_array+0x180>
    496c:	ldr	r0, [sp, #24]
    4970:	ldr	r0, [r0, #4]
    4974:	ldr	r0, [r0, #40]	; 0x28
    4978:	ldr	r0, [r0]
    497c:	cmp	r0, #0
    4980:	bne	4988 <coda_mem_cursor_read_float_partial_array+0x128>
    4984:	b	49a8 <coda_mem_cursor_read_float_partial_array+0x148>
    4988:	movw	r0, #0
    498c:	movt	r0, #0
    4990:	movw	r1, #0
    4994:	movt	r1, #0
    4998:	movw	r2, #1157	; 0x485
    499c:	movw	r3, #0
    49a0:	movt	r3, #0
    49a4:	bl	0 <__assert_fail>
    49a8:	movw	r0, #0
    49ac:	movt	r0, #0
    49b0:	ldr	r1, [fp, #-8]
    49b4:	ldr	r2, [fp, #-12]
    49b8:	ldr	r3, [fp, #-16]
    49bc:	ldr	ip, [fp, #-20]	; 0xffffffec
    49c0:	str	r0, [sp, #12]
    49c4:	mov	r0, r1
    49c8:	ldr	r1, [sp, #12]
    49cc:	str	ip, [sp]
    49d0:	movw	ip, #4
    49d4:	str	ip, [sp, #4]
    49d8:	bl	3c60 <read_partial_array>
    49dc:	str	r0, [fp, #-4]
    49e0:	ldr	r0, [fp, #-4]
    49e4:	mov	sp, fp
    49e8:	pop	{fp, pc}

000049ec <coda_mem_cursor_read_double_partial_array>:
    49ec:	push	{fp, lr}
    49f0:	mov	fp, sp
    49f4:	sub	sp, sp, #48	; 0x30
    49f8:	str	r0, [fp, #-8]
    49fc:	str	r1, [fp, #-12]
    4a00:	str	r2, [fp, #-16]
    4a04:	str	r3, [fp, #-20]	; 0xffffffec
    4a08:	ldr	r0, [fp, #-8]
    4a0c:	add	r1, r0, #8
    4a10:	ldr	r0, [r0, #4]
    4a14:	sub	r0, r0, #1
    4a18:	add	r0, r1, r0, lsl #4
    4a1c:	ldr	r0, [r0]
    4a20:	str	r0, [sp, #24]
    4a24:	ldr	r0, [sp, #24]
    4a28:	ldr	r0, [r0, #8]
    4a2c:	cmp	r0, #1
    4a30:	bne	4a70 <coda_mem_cursor_read_double_partial_array+0x84>
    4a34:	movw	r0, #0
    4a38:	movt	r0, #0
    4a3c:	ldr	r1, [fp, #-8]
    4a40:	ldr	r2, [fp, #-12]
    4a44:	ldr	r3, [fp, #-16]
    4a48:	ldr	ip, [fp, #-20]	; 0xffffffec
    4a4c:	str	r0, [sp, #20]
    4a50:	mov	r0, r1
    4a54:	ldr	r1, [sp, #20]
    4a58:	str	ip, [sp]
    4a5c:	movw	ip, #8
    4a60:	str	ip, [sp, #4]
    4a64:	bl	3c60 <read_partial_array>
    4a68:	str	r0, [fp, #-4]
    4a6c:	b	4b6c <coda_mem_cursor_read_double_partial_array+0x180>
    4a70:	ldr	r0, [sp, #24]
    4a74:	ldr	r0, [r0, #8]
    4a78:	cmp	r0, #2
    4a7c:	bne	4a84 <coda_mem_cursor_read_double_partial_array+0x98>
    4a80:	b	4aa4 <coda_mem_cursor_read_double_partial_array+0xb8>
    4a84:	movw	r0, #0
    4a88:	movt	r0, #0
    4a8c:	movw	r1, #0
    4a90:	movt	r1, #0
    4a94:	movw	r2, #1171	; 0x493
    4a98:	movw	r3, #0
    4a9c:	movt	r3, #0
    4aa0:	bl	0 <__assert_fail>
    4aa4:	ldr	r0, [sp, #24]
    4aa8:	ldr	r0, [r0, #4]
    4aac:	ldr	r0, [r0, #40]	; 0x28
    4ab0:	ldr	r0, [r0]
    4ab4:	cmp	r0, #1
    4ab8:	bne	4af8 <coda_mem_cursor_read_double_partial_array+0x10c>
    4abc:	movw	r0, #0
    4ac0:	movt	r0, #0
    4ac4:	ldr	r1, [fp, #-8]
    4ac8:	ldr	r2, [fp, #-12]
    4acc:	ldr	r3, [fp, #-16]
    4ad0:	ldr	ip, [fp, #-20]	; 0xffffffec
    4ad4:	str	r0, [sp, #16]
    4ad8:	mov	r0, r1
    4adc:	ldr	r1, [sp, #16]
    4ae0:	str	ip, [sp]
    4ae4:	movw	ip, #8
    4ae8:	str	ip, [sp, #4]
    4aec:	bl	3c60 <read_partial_array>
    4af0:	str	r0, [fp, #-4]
    4af4:	b	4b6c <coda_mem_cursor_read_double_partial_array+0x180>
    4af8:	ldr	r0, [sp, #24]
    4afc:	ldr	r0, [r0, #4]
    4b00:	ldr	r0, [r0, #40]	; 0x28
    4b04:	ldr	r0, [r0]
    4b08:	cmp	r0, #0
    4b0c:	bne	4b14 <coda_mem_cursor_read_double_partial_array+0x128>
    4b10:	b	4b34 <coda_mem_cursor_read_double_partial_array+0x148>
    4b14:	movw	r0, #0
    4b18:	movt	r0, #0
    4b1c:	movw	r1, #0
    4b20:	movt	r1, #0
    4b24:	movw	r2, #1177	; 0x499
    4b28:	movw	r3, #0
    4b2c:	movt	r3, #0
    4b30:	bl	0 <__assert_fail>
    4b34:	movw	r0, #0
    4b38:	movt	r0, #0
    4b3c:	ldr	r1, [fp, #-8]
    4b40:	ldr	r2, [fp, #-12]
    4b44:	ldr	r3, [fp, #-16]
    4b48:	ldr	ip, [fp, #-20]	; 0xffffffec
    4b4c:	str	r0, [sp, #12]
    4b50:	mov	r0, r1
    4b54:	ldr	r1, [sp, #12]
    4b58:	str	ip, [sp]
    4b5c:	movw	ip, #8
    4b60:	str	ip, [sp, #4]
    4b64:	bl	3c60 <read_partial_array>
    4b68:	str	r0, [fp, #-4]
    4b6c:	ldr	r0, [fp, #-4]
    4b70:	mov	sp, fp
    4b74:	pop	{fp, pc}

00004b78 <coda_mem_cursor_read_char_partial_array>:
    4b78:	push	{fp, lr}
    4b7c:	mov	fp, sp
    4b80:	sub	sp, sp, #48	; 0x30
    4b84:	str	r0, [fp, #-8]
    4b88:	str	r1, [fp, #-12]
    4b8c:	str	r2, [fp, #-16]
    4b90:	str	r3, [fp, #-20]	; 0xffffffec
    4b94:	ldr	r0, [fp, #-8]
    4b98:	add	r1, r0, #8
    4b9c:	ldr	r0, [r0, #4]
    4ba0:	sub	r0, r0, #1
    4ba4:	add	r0, r1, r0, lsl #4
    4ba8:	ldr	r0, [r0]
    4bac:	str	r0, [sp, #24]
    4bb0:	ldr	r0, [sp, #24]
    4bb4:	ldr	r0, [r0, #8]
    4bb8:	cmp	r0, #1
    4bbc:	bne	4bfc <coda_mem_cursor_read_char_partial_array+0x84>
    4bc0:	ldr	r0, [fp, #-8]
    4bc4:	ldr	r2, [fp, #-12]
    4bc8:	ldr	r3, [fp, #-16]
    4bcc:	ldr	r1, [fp, #-20]	; 0xffffffec
    4bd0:	movw	ip, #0
    4bd4:	movt	ip, #0
    4bd8:	str	r1, [sp, #20]
    4bdc:	mov	r1, ip
    4be0:	ldr	ip, [sp, #20]
    4be4:	str	ip, [sp]
    4be8:	movw	lr, #1
    4bec:	str	lr, [sp, #4]
    4bf0:	bl	3c60 <read_partial_array>
    4bf4:	str	r0, [fp, #-4]
    4bf8:	b	4cf8 <coda_mem_cursor_read_char_partial_array+0x180>
    4bfc:	ldr	r0, [sp, #24]
    4c00:	ldr	r0, [r0, #8]
    4c04:	cmp	r0, #2
    4c08:	bne	4c10 <coda_mem_cursor_read_char_partial_array+0x98>
    4c0c:	b	4c30 <coda_mem_cursor_read_char_partial_array+0xb8>
    4c10:	movw	r0, #0
    4c14:	movt	r0, #0
    4c18:	movw	r1, #0
    4c1c:	movt	r1, #0
    4c20:	movw	r2, #1191	; 0x4a7
    4c24:	movw	r3, #0
    4c28:	movt	r3, #0
    4c2c:	bl	0 <__assert_fail>
    4c30:	ldr	r0, [sp, #24]
    4c34:	ldr	r0, [r0, #4]
    4c38:	ldr	r0, [r0, #40]	; 0x28
    4c3c:	ldr	r0, [r0]
    4c40:	cmp	r0, #1
    4c44:	bne	4c84 <coda_mem_cursor_read_char_partial_array+0x10c>
    4c48:	ldr	r0, [fp, #-8]
    4c4c:	ldr	r2, [fp, #-12]
    4c50:	ldr	r3, [fp, #-16]
    4c54:	ldr	r1, [fp, #-20]	; 0xffffffec
    4c58:	movw	ip, #0
    4c5c:	movt	ip, #0
    4c60:	str	r1, [sp, #16]
    4c64:	mov	r1, ip
    4c68:	ldr	ip, [sp, #16]
    4c6c:	str	ip, [sp]
    4c70:	movw	lr, #1
    4c74:	str	lr, [sp, #4]
    4c78:	bl	3c60 <read_partial_array>
    4c7c:	str	r0, [fp, #-4]
    4c80:	b	4cf8 <coda_mem_cursor_read_char_partial_array+0x180>
    4c84:	ldr	r0, [sp, #24]
    4c88:	ldr	r0, [r0, #4]
    4c8c:	ldr	r0, [r0, #40]	; 0x28
    4c90:	ldr	r0, [r0]
    4c94:	cmp	r0, #0
    4c98:	bne	4ca0 <coda_mem_cursor_read_char_partial_array+0x128>
    4c9c:	b	4cc0 <coda_mem_cursor_read_char_partial_array+0x148>
    4ca0:	movw	r0, #0
    4ca4:	movt	r0, #0
    4ca8:	movw	r1, #0
    4cac:	movt	r1, #0
    4cb0:	movw	r2, #1197	; 0x4ad
    4cb4:	movw	r3, #0
    4cb8:	movt	r3, #0
    4cbc:	bl	0 <__assert_fail>
    4cc0:	ldr	r0, [fp, #-8]
    4cc4:	ldr	r2, [fp, #-12]
    4cc8:	ldr	r3, [fp, #-16]
    4ccc:	ldr	r1, [fp, #-20]	; 0xffffffec
    4cd0:	movw	ip, #0
    4cd4:	movt	ip, #0
    4cd8:	str	r1, [sp, #12]
    4cdc:	mov	r1, ip
    4ce0:	ldr	ip, [sp, #12]
    4ce4:	str	ip, [sp]
    4ce8:	movw	lr, #1
    4cec:	str	lr, [sp, #4]
    4cf0:	bl	3c60 <read_partial_array>
    4cf4:	str	r0, [fp, #-4]
    4cf8:	ldr	r0, [fp, #-4]
    4cfc:	mov	sp, fp
    4d00:	pop	{fp, pc}
