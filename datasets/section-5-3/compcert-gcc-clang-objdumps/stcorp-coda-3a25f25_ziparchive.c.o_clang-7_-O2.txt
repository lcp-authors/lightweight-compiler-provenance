
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/ziparchive.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_za_open>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #148	; 0x94
   c:	mov	r6, r0
  10:	mov	r5, r1
  14:	add	r2, sp, #8
  18:	mov	r0, #3
  1c:	mov	r1, r6
  20:	bl	0 <__xstat>
  24:	cmp	r0, #0
  28:	beq	48 <coda_za_open+0x48>
  2c:	bl	0 <__errno_location>
  30:	ldr	r0, [r0]
  34:	cmp	r0, #2
  38:	bne	60 <coda_za_open+0x60>
  3c:	movw	r0, #0
  40:	movt	r0, #0
  44:	b	90 <coda_za_open+0x90>
  48:	ldrb	r0, [sp, #25]
  4c:	tst	r0, #128	; 0x80
  50:	bne	7c <coda_za_open+0x7c>
  54:	movw	r0, #0
  58:	movt	r0, #0
  5c:	b	90 <coda_za_open+0x90>
  60:	bl	0 <strerror>
  64:	mov	r2, r0
  68:	movw	r0, #0
  6c:	mov	r1, r6
  70:	movt	r0, #0
  74:	blx	r5
  78:	b	98 <coda_za_open+0x98>
  7c:	ldr	r0, [sp, #52]	; 0x34
  80:	cmp	r0, #21
  84:	bgt	a8 <coda_za_open+0xa8>
  88:	movw	r0, #0
  8c:	movt	r0, #0
  90:	mov	r1, r6
  94:	blx	r5
  98:	mov	r4, #0
  9c:	mov	r0, r4
  a0:	sub	sp, fp, #28
  a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  a8:	mov	r0, #24
  ac:	bl	0 <malloc>
  b0:	cmp	r0, #0
  b4:	beq	318 <coda_za_open+0x318>
  b8:	mov	r4, r0
  bc:	mov	r0, r6
  c0:	bl	0 <strdup>
  c4:	cmp	r0, #0
  c8:	str	r0, [r4, #8]
  cc:	beq	338 <coda_za_open+0x338>
  d0:	movw	r1, #0
  d4:	cmp	r5, #0
  d8:	mov	r0, #0
  dc:	movt	r1, #0
  e0:	str	r0, [r4, #4]
  e4:	str	r0, [r4, #12]
  e8:	str	r0, [r4, #16]
  ec:	mov	r0, r6
  f0:	movne	r1, r5
  f4:	str	r1, [r4, #20]
  f8:	mov	r1, #0
  fc:	bl	0 <open>
 100:	cmn	r0, #1
 104:	str	r0, [r4]
 108:	ble	37c <coda_za_open+0x37c>
 10c:	add	r1, sp, #6
 110:	mov	r2, #2
 114:	bl	0 <read>
 118:	cmn	r0, #1
 11c:	ble	35c <coda_za_open+0x35c>
 120:	ldrb	r0, [sp, #6]
 124:	cmp	r0, #80	; 0x50
 128:	ldrbne	r0, [sp, #7]
 12c:	cmpne	r0, #75	; 0x4b
 130:	bne	3b4 <coda_za_open+0x3b4>
 134:	mov	r0, #1
 138:	bl	0 <coda_hashtable_new>
 13c:	str	r0, [r4, #16]
 140:	mvn	r1, #21
 144:	mov	r2, #2
 148:	ldr	r0, [r4]
 14c:	bl	0 <lseek>
 150:	cmn	r0, #1
 154:	ble	35c <coda_za_open+0x35c>
 158:	ldr	r0, [r4]
 15c:	sub	r1, fp, #76	; 0x4c
 160:	mov	r2, #22
 164:	bl	0 <read>
 168:	cmn	r0, #1
 16c:	ble	35c <coda_za_open+0x35c>
 170:	ldr	r0, [fp, #-76]	; 0xffffffb4
 174:	movw	r1, #19280	; 0x4b50
 178:	movt	r1, #1541	; 0x605
 17c:	cmp	r0, r1
 180:	bne	3c8 <coda_za_open+0x3c8>
 184:	ldrh	r7, [fp, #-68]	; 0xffffffbc
 188:	mov	r0, #44	; 0x2c
 18c:	ldr	r5, [fp, #-60]	; 0xffffffc4
 190:	mul	r6, r7, r0
 194:	str	r7, [r4, #4]
 198:	mov	r0, r6
 19c:	bl	0 <malloc>
 1a0:	cmp	r0, #0
 1a4:	str	r0, [r4, #12]
 1a8:	beq	3dc <coda_za_open+0x3dc>
 1ac:	cmp	r7, #0
 1b0:	beq	1d0 <coda_za_open+0x1d0>
 1b4:	add	r0, r0, #40	; 0x28
 1b8:	mov	r1, #0
 1bc:	mov	r2, r7
 1c0:	stmda	r0, {r1, r4}
 1c4:	add	r0, r0, #44	; 0x2c
 1c8:	subs	r2, r2, #1
 1cc:	bne	1c0 <coda_za_open+0x1c0>
 1d0:	ldr	r0, [r4]
 1d4:	mov	r1, r5
 1d8:	mov	r2, #0
 1dc:	bl	0 <lseek>
 1e0:	cmp	r0, #0
 1e4:	blt	35c <coda_za_open+0x35c>
 1e8:	cmp	r7, #0
 1ec:	beq	9c <coda_za_open+0x9c>
 1f0:	mov	r6, #36	; 0x24
 1f4:	mov	r5, #0
 1f8:	ldr	r0, [r4]
 1fc:	ldr	r8, [r4, #12]
 200:	sub	r1, fp, #76	; 0x4c
 204:	mov	r2, #46	; 0x2e
 208:	bl	0 <read>
 20c:	cmn	r0, #1
 210:	ble	35c <coda_za_open+0x35c>
 214:	ldr	r0, [fp, #-76]	; 0xffffffb4
 218:	movw	r1, #19280	; 0x4b50
 21c:	movt	r1, #513	; 0x201
 220:	cmp	r0, r1
 224:	bne	3f4 <coda_za_open+0x3f4>
 228:	ldrh	r0, [fp, #-66]	; 0xffffffbe
 22c:	add	r9, r8, r6
 230:	strh	r0, [r9, #-32]	; 0xffffffe0
 234:	orr	r0, r0, #8
 238:	cmp	r0, #8
 23c:	bne	408 <coda_za_open+0x408>
 240:	ldrh	r0, [fp, #-64]	; 0xffffffc0
 244:	strh	r0, [r9, #-30]	; 0xffffffe2
 248:	ldrh	r0, [fp, #-62]	; 0xffffffc2
 24c:	strh	r0, [r9, #-28]	; 0xffffffe4
 250:	ldr	r0, [fp, #-60]	; 0xffffffc4
 254:	str	r0, [r9, #-20]	; 0xffffffec
 258:	ldr	r0, [fp, #-56]	; 0xffffffc8
 25c:	str	r0, [r9, #-16]
 260:	ldr	r0, [fp, #-52]	; 0xffffffcc
 264:	str	r0, [r9, #-12]
 268:	ldrh	r0, [fp, #-48]	; 0xffffffd0
 26c:	strh	r0, [r9, #-8]
 270:	add	r0, r0, #1
 274:	ldrh	r1, [fp, #-46]	; 0xffffffd2
 278:	strh	r1, [r9, #-6]
 27c:	ldrh	r1, [fp, #-40]	; 0xffffffd8
 280:	ldrh	sl, [fp, #-44]	; 0xffffffd4
 284:	and	r1, r1, #1
 288:	str	r1, [r9, #-4]
 28c:	ldr	r1, [fp, #-38]	; 0xffffffda
 290:	str	r1, [r9, #-24]	; 0xffffffe8
 294:	ldr	r1, [fp, #-34]	; 0xffffffde
 298:	str	r1, [r9, #-36]	; 0xffffffdc
 29c:	bl	0 <malloc>
 2a0:	cmp	r0, #0
 2a4:	str	r0, [r8, r6]
 2a8:	beq	41c <coda_za_open+0x41c>
 2ac:	mov	r1, r0
 2b0:	ldrh	r2, [r9, #-8]
 2b4:	ldr	r0, [r4]
 2b8:	bl	0 <read>
 2bc:	cmn	r0, #1
 2c0:	ble	35c <coda_za_open+0x35c>
 2c4:	ldr	r0, [r8, r6]
 2c8:	ldrh	r1, [r9, #-8]
 2cc:	mov	r2, #0
 2d0:	strb	r2, [r0, r1]
 2d4:	ldr	r1, [r8, r6]
 2d8:	ldr	r0, [r4, #16]
 2dc:	bl	0 <coda_hashtable_add_name>
 2e0:	cmp	r0, #0
 2e4:	bne	434 <coda_za_open+0x434>
 2e8:	ldrh	r0, [r9, #-6]
 2ec:	mov	r2, #1
 2f0:	add	r1, r0, sl
 2f4:	ldr	r0, [r4]
 2f8:	bl	0 <lseek>
 2fc:	cmn	r0, #1
 300:	ble	35c <coda_za_open+0x35c>
 304:	add	r5, r5, #1
 308:	add	r6, r6, #44	; 0x2c
 30c:	cmp	r5, r7
 310:	bcc	1f8 <coda_za_open+0x1f8>
 314:	b	9c <coda_za_open+0x9c>
 318:	mov	r4, #0
 31c:	cmp	r5, #0
 320:	beq	9c <coda_za_open+0x9c>
 324:	movw	r0, #0
 328:	mov	r1, #24
 32c:	movt	r0, #0
 330:	blx	r5
 334:	b	9c <coda_za_open+0x9c>
 338:	mov	r0, r4
 33c:	bl	0 <free>
 340:	mov	r4, #0
 344:	cmp	r5, #0
 348:	beq	9c <coda_za_open+0x9c>
 34c:	movw	r0, #0
 350:	movt	r0, #0
 354:	blx	r5
 358:	b	9c <coda_za_open+0x9c>
 35c:	ldr	r5, [r4, #20]
 360:	bl	0 <__errno_location>
 364:	ldr	r0, [r0]
 368:	bl	0 <strerror>
 36c:	blx	r5
 370:	mov	r0, r4
 374:	bl	4bc <coda_za_close>
 378:	b	98 <coda_za_open+0x98>
 37c:	ldr	r5, [r4, #20]
 380:	bl	0 <__errno_location>
 384:	ldr	r0, [r0]
 388:	bl	0 <strerror>
 38c:	mov	r2, r0
 390:	movw	r0, #0
 394:	mov	r1, r6
 398:	movt	r0, #0
 39c:	blx	r5
 3a0:	ldr	r0, [r4, #8]
 3a4:	bl	0 <free>
 3a8:	mov	r0, r4
 3ac:	bl	0 <free>
 3b0:	b	98 <coda_za_open+0x98>
 3b4:	movw	r0, #0
 3b8:	mov	r1, r6
 3bc:	movt	r0, #0
 3c0:	blx	r5
 3c4:	b	370 <coda_za_open+0x370>
 3c8:	ldr	r1, [r4, #8]
 3cc:	ldr	r2, [r4, #20]
 3d0:	movw	r0, #0
 3d4:	movt	r0, #0
 3d8:	b	3ec <coda_za_open+0x3ec>
 3dc:	ldr	r2, [r4, #20]
 3e0:	movw	r0, #0
 3e4:	mov	r1, r6
 3e8:	movt	r0, #0
 3ec:	blx	r2
 3f0:	b	370 <coda_za_open+0x370>
 3f4:	ldr	r1, [r4, #8]
 3f8:	ldr	r2, [r4, #20]
 3fc:	movw	r0, #0
 400:	movt	r0, #0
 404:	b	3ec <coda_za_open+0x3ec>
 408:	ldr	r1, [r4, #8]
 40c:	ldr	r2, [r4, #20]
 410:	movw	r0, #0
 414:	movt	r0, #0
 418:	b	3ec <coda_za_open+0x3ec>
 41c:	ldrh	r0, [r9, #-8]
 420:	ldr	r2, [r4, #20]
 424:	add	r1, r0, #1
 428:	movw	r0, #0
 42c:	movt	r0, #0
 430:	b	3ec <coda_za_open+0x3ec>
 434:	ldr	r2, [r8, r6]
 438:	ldr	r1, [r4, #8]
 43c:	ldr	r3, [r4, #20]
 440:	movw	r0, #0
 444:	movt	r0, #0
 448:	blx	r3
 44c:	b	370 <coda_za_open+0x370>

00000450 <default_error_handler>:
 450:	sub	sp, sp, #12
 454:	push	{r4, r5, fp, lr}
 458:	add	fp, sp, #8
 45c:	sub	sp, sp, #4
 460:	movw	r5, #0
 464:	mov	r4, r0
 468:	add	r0, fp, #8
 46c:	stm	r0, {r1, r2, r3}
 470:	movt	r5, #0
 474:	movw	r0, #0
 478:	mov	r1, #7
 47c:	mov	r2, #1
 480:	ldr	r3, [r5]
 484:	movt	r0, #0
 488:	bl	0 <fwrite>
 48c:	ldr	r0, [r5]
 490:	add	r2, fp, #8
 494:	mov	r1, r4
 498:	str	r2, [sp]
 49c:	bl	0 <vfprintf>
 4a0:	ldr	r1, [r5]
 4a4:	mov	r0, #10
 4a8:	bl	0 <fputc>
 4ac:	sub	sp, fp, #8
 4b0:	pop	{r4, r5, fp, lr}
 4b4:	add	sp, sp, #12
 4b8:	bx	lr

000004bc <coda_za_close>:
 4bc:	push	{r4, r5, r6, sl, fp, lr}
 4c0:	add	fp, sp, #16
 4c4:	mov	r4, r0
 4c8:	ldr	r0, [r0]
 4cc:	bl	0 <close>
 4d0:	ldr	r0, [r4, #12]
 4d4:	cmp	r0, #0
 4d8:	beq	520 <coda_za_close+0x64>
 4dc:	ldr	r2, [r4, #4]
 4e0:	cmp	r2, #1
 4e4:	blt	51c <coda_za_close+0x60>
 4e8:	mov	r5, #0
 4ec:	mov	r6, #36	; 0x24
 4f0:	ldr	r1, [r0, r6]
 4f4:	cmp	r1, #0
 4f8:	beq	50c <coda_za_close+0x50>
 4fc:	mov	r0, r1
 500:	bl	0 <free>
 504:	ldr	r2, [r4, #4]
 508:	ldr	r0, [r4, #12]
 50c:	add	r5, r5, #1
 510:	add	r6, r6, #44	; 0x2c
 514:	cmp	r5, r2
 518:	blt	4f0 <coda_za_close+0x34>
 51c:	bl	0 <free>
 520:	ldr	r0, [r4, #8]
 524:	cmp	r0, #0
 528:	beq	530 <coda_za_close+0x74>
 52c:	bl	0 <free>
 530:	ldr	r0, [r4, #16]
 534:	cmp	r0, #0
 538:	beq	540 <coda_za_close+0x84>
 53c:	bl	0 <coda_hashtable_delete>
 540:	mov	r0, r4
 544:	pop	{r4, r5, r6, sl, fp, lr}
 548:	b	0 <free>

0000054c <coda_za_get_num_entries>:
 54c:	ldr	r0, [r0, #4]
 550:	bx	lr

00000554 <coda_za_get_filename>:
 554:	ldr	r0, [r0, #8]
 558:	bx	lr

0000055c <coda_za_get_entry_by_index>:
 55c:	mov	r2, r0
 560:	cmp	r1, #0
 564:	mov	r0, #0
 568:	ldrge	r3, [r2, #4]
 56c:	cmpge	r3, r1
 570:	ldrgt	r0, [r2, #12]
 574:	movgt	r2, #44	; 0x2c
 578:	mlagt	r0, r1, r2, r0
 57c:	bx	lr

00000580 <coda_za_get_entry_by_name>:
 580:	push	{r4, sl, fp, lr}
 584:	add	fp, sp, #8
 588:	mov	r4, r0
 58c:	ldr	r0, [r0, #16]
 590:	bl	0 <coda_hashtable_get_index_from_name>
 594:	cmp	r0, #0
 598:	ldrge	r1, [r4, #12]
 59c:	movlt	r0, #0
 5a0:	movge	r2, #44	; 0x2c
 5a4:	mlage	r0, r0, r2, r1
 5a8:	pop	{r4, sl, fp, pc}

000005ac <coda_za_get_entry_size>:
 5ac:	ldr	r0, [r0, #24]
 5b0:	bx	lr

000005b4 <coda_za_get_entry_name>:
 5b4:	ldr	r0, [r0, #36]	; 0x24
 5b8:	bx	lr

000005bc <coda_za_read_entry>:
 5bc:	push	{r4, r5, r6, r7, fp, lr}
 5c0:	add	fp, sp, #16
 5c4:	sub	sp, sp, #88	; 0x58
 5c8:	mov	r5, r1
 5cc:	mov	r4, r0
 5d0:	ldr	r1, [r0]
 5d4:	ldr	r0, [r0, #40]	; 0x28
 5d8:	mov	r2, #0
 5dc:	ldr	r0, [r0]
 5e0:	bl	0 <lseek>
 5e4:	ldr	r1, [r4, #40]	; 0x28
 5e8:	cmn	r0, #1
 5ec:	ble	74c <coda_za_read_entry+0x190>
 5f0:	ldr	r0, [r1]
 5f4:	sub	r1, fp, #48	; 0x30
 5f8:	mov	r2, #30
 5fc:	bl	0 <read>
 600:	cmn	r0, #1
 604:	ble	824 <coda_za_read_entry+0x268>
 608:	ldr	r0, [fp, #-48]	; 0xffffffd0
 60c:	movw	r1, #19280	; 0x4b50
 610:	movt	r1, #1027	; 0x403
 614:	cmp	r0, r1
 618:	bne	754 <coda_za_read_entry+0x198>
 61c:	ldrh	r0, [r4, #4]
 620:	ldrh	r1, [fp, #-40]	; 0xffffffd8
 624:	cmp	r1, r0
 628:	bne	768 <coda_za_read_entry+0x1ac>
 62c:	ldrh	r0, [r4, #6]
 630:	ldrh	r1, [fp, #-38]	; 0xffffffda
 634:	cmp	r1, r0
 638:	bne	77c <coda_za_read_entry+0x1c0>
 63c:	ldrh	r0, [r4, #8]
 640:	ldrh	r1, [fp, #-36]	; 0xffffffdc
 644:	cmp	r1, r0
 648:	bne	790 <coda_za_read_entry+0x1d4>
 64c:	ldr	r0, [r4, #16]
 650:	ldr	r1, [fp, #-34]	; 0xffffffde
 654:	cmp	r1, r0
 658:	bne	7a4 <coda_za_read_entry+0x1e8>
 65c:	ldr	r0, [r4, #20]
 660:	ldr	r1, [fp, #-30]	; 0xffffffe2
 664:	cmp	r1, r0
 668:	bne	7b8 <coda_za_read_entry+0x1fc>
 66c:	ldr	r0, [r4, #24]
 670:	ldr	r1, [fp, #-26]	; 0xffffffe6
 674:	cmp	r1, r0
 678:	bne	7cc <coda_za_read_entry+0x210>
 67c:	ldrh	r1, [r4, #28]
 680:	ldrh	r0, [fp, #-22]	; 0xffffffea
 684:	cmp	r0, r1
 688:	bne	7e0 <coda_za_read_entry+0x224>
 68c:	ldrh	r1, [fp, #-20]	; 0xffffffec
 690:	mov	r2, #1
 694:	add	r1, r1, r0
 698:	ldr	r0, [r4, #40]	; 0x28
 69c:	ldr	r0, [r0]
 6a0:	bl	0 <lseek>
 6a4:	cmn	r0, #1
 6a8:	ble	824 <coda_za_read_entry+0x268>
 6ac:	ldrh	r0, [r4, #4]
 6b0:	cmp	r0, #0
 6b4:	beq	7f8 <coda_za_read_entry+0x23c>
 6b8:	ldr	r7, [r4, #20]
 6bc:	mov	r0, r7
 6c0:	bl	0 <malloc>
 6c4:	mov	r6, r0
 6c8:	ldr	r0, [r4, #40]	; 0x28
 6cc:	cmp	r6, #0
 6d0:	beq	848 <coda_za_read_entry+0x28c>
 6d4:	ldr	r0, [r0]
 6d8:	mov	r1, r6
 6dc:	mov	r2, r7
 6e0:	bl	0 <read>
 6e4:	cmn	r0, #1
 6e8:	ble	860 <coda_za_read_entry+0x2a4>
 6ec:	movw	r2, #0
 6f0:	mov	r0, #0
 6f4:	mvn	r1, #14
 6f8:	mov	r3, #56	; 0x38
 6fc:	str	r0, [sp, #4]
 700:	str	r0, [sp]
 704:	str	r0, [sp, #32]
 708:	str	r0, [sp, #36]	; 0x24
 70c:	str	r0, [sp, #40]	; 0x28
 710:	str	r0, [sp, #24]
 714:	mov	r0, sp
 718:	movt	r2, #0
 71c:	bl	0 <coda_inflateInit2_>
 720:	cmp	r0, #0
 724:	beq	87c <coda_za_read_entry+0x2c0>
 728:	ldr	r0, [r4, #40]	; 0x28
 72c:	ldr	r1, [sp, #24]
 730:	ldr	r2, [r0, #20]
 734:	cmp	r1, #0
 738:	beq	8e4 <coda_za_read_entry+0x328>
 73c:	movw	r0, #0
 740:	movt	r0, #0
 744:	blx	r2
 748:	b	910 <coda_za_read_entry+0x354>
 74c:	ldr	r4, [r1, #20]
 750:	b	82c <coda_za_read_entry+0x270>
 754:	ldr	r0, [r4, #40]	; 0x28
 758:	ldr	r1, [r0, #20]
 75c:	movw	r0, #0
 760:	movt	r0, #0
 764:	b	7f0 <coda_za_read_entry+0x234>
 768:	ldr	r0, [r4, #40]	; 0x28
 76c:	ldr	r1, [r0, #20]
 770:	movw	r0, #0
 774:	movt	r0, #0
 778:	b	7f0 <coda_za_read_entry+0x234>
 77c:	ldr	r0, [r4, #40]	; 0x28
 780:	ldr	r1, [r0, #20]
 784:	movw	r0, #0
 788:	movt	r0, #0
 78c:	b	7f0 <coda_za_read_entry+0x234>
 790:	ldr	r0, [r4, #40]	; 0x28
 794:	ldr	r1, [r0, #20]
 798:	movw	r0, #0
 79c:	movt	r0, #0
 7a0:	b	7f0 <coda_za_read_entry+0x234>
 7a4:	ldr	r0, [r4, #40]	; 0x28
 7a8:	ldr	r1, [r0, #20]
 7ac:	movw	r0, #0
 7b0:	movt	r0, #0
 7b4:	b	7f0 <coda_za_read_entry+0x234>
 7b8:	ldr	r0, [r4, #40]	; 0x28
 7bc:	ldr	r1, [r0, #20]
 7c0:	movw	r0, #0
 7c4:	movt	r0, #0
 7c8:	b	7f0 <coda_za_read_entry+0x234>
 7cc:	ldr	r0, [r4, #40]	; 0x28
 7d0:	ldr	r1, [r0, #20]
 7d4:	movw	r0, #0
 7d8:	movt	r0, #0
 7dc:	b	7f0 <coda_za_read_entry+0x234>
 7e0:	ldr	r0, [r4, #40]	; 0x28
 7e4:	ldr	r1, [r0, #20]
 7e8:	movw	r0, #0
 7ec:	movt	r0, #0
 7f0:	blx	r1
 7f4:	b	83c <coda_za_read_entry+0x280>
 7f8:	ldr	r0, [r4, #40]	; 0x28
 7fc:	ldr	r2, [r4, #24]
 800:	mov	r1, r5
 804:	ldr	r0, [r0]
 808:	bl	0 <read>
 80c:	mov	r1, r0
 810:	mov	r0, #0
 814:	cmn	r1, #1
 818:	ble	824 <coda_za_read_entry+0x268>
 81c:	sub	sp, fp, #16
 820:	pop	{r4, r5, r6, r7, fp, pc}
 824:	ldr	r0, [r4, #40]	; 0x28
 828:	ldr	r4, [r0, #20]
 82c:	bl	0 <__errno_location>
 830:	ldr	r0, [r0]
 834:	bl	0 <strerror>
 838:	blx	r4
 83c:	mvn	r0, #0
 840:	sub	sp, fp, #16
 844:	pop	{r4, r5, r6, r7, fp, pc}
 848:	ldr	r2, [r0, #20]
 84c:	movw	r0, #0
 850:	mov	r1, r7
 854:	movt	r0, #0
 858:	blx	r2
 85c:	b	83c <coda_za_read_entry+0x280>
 860:	ldr	r0, [r4, #40]	; 0x28
 864:	ldr	r4, [r0, #20]
 868:	bl	0 <__errno_location>
 86c:	ldr	r0, [r0]
 870:	bl	0 <strerror>
 874:	blx	r4
 878:	b	910 <coda_za_read_entry+0x354>
 87c:	str	r6, [sp]
 880:	ldr	r0, [r4, #20]
 884:	ldr	r1, [r4, #24]
 888:	str	r5, [sp, #12]
 88c:	str	r0, [sp, #4]
 890:	str	r1, [sp, #16]
 894:	mov	r0, sp
 898:	mov	r1, #4
 89c:	bl	0 <coda_inflate>
 8a0:	add	r0, r0, #4
 8a4:	cmp	r0, #6
 8a8:	bhi	91c <coda_za_read_entry+0x360>
 8ac:	add	r1, pc, #0
 8b0:	ldr	pc, [r1, r0, lsl #2]
 8b4:	.word	0x000008f4
 8b8:	.word	0x000008d0
 8bc:	.word	0x00000970
 8c0:	.word	0x0000091c
 8c4:	.word	0x0000091c
 8c8:	.word	0x0000091c
 8cc:	.word	0x000008d0
 8d0:	ldr	r0, [r4, #40]	; 0x28
 8d4:	ldr	r1, [r0, #20]
 8d8:	movw	r0, #0
 8dc:	movt	r0, #0
 8e0:	b	904 <coda_za_read_entry+0x348>
 8e4:	movw	r0, #0
 8e8:	movt	r0, #0
 8ec:	blx	r2
 8f0:	b	910 <coda_za_read_entry+0x354>
 8f4:	ldr	r0, [r4, #40]	; 0x28
 8f8:	ldr	r1, [r0, #20]
 8fc:	movw	r0, #0
 900:	movt	r0, #0
 904:	blx	r1
 908:	mov	r0, sp
 90c:	bl	0 <coda_inflateEnd>
 910:	mov	r0, r6
 914:	bl	0 <free>
 918:	b	83c <coda_za_read_entry+0x280>
 91c:	mov	r0, r6
 920:	bl	0 <free>
 924:	mov	r0, sp
 928:	bl	0 <coda_inflateEnd>
 92c:	cmp	r0, #0
 930:	beq	954 <coda_za_read_entry+0x398>
 934:	ldr	r0, [r4, #40]	; 0x28
 938:	ldr	r1, [sp, #24]
 93c:	ldr	r2, [r0, #20]
 940:	cmp	r1, #0
 944:	beq	960 <coda_za_read_entry+0x3a4>
 948:	movw	r0, #0
 94c:	movt	r0, #0
 950:	b	858 <coda_za_read_entry+0x29c>
 954:	mov	r0, #0
 958:	sub	sp, fp, #16
 95c:	pop	{r4, r5, r6, r7, fp, pc}
 960:	movw	r0, #0
 964:	movt	r0, #0
 968:	blx	r2
 96c:	b	83c <coda_za_read_entry+0x280>
 970:	movw	r0, #0
 974:	movw	r1, #0
 978:	movw	r3, #0
 97c:	movw	r2, #633	; 0x279
 980:	movt	r0, #0
 984:	movt	r1, #0
 988:	movt	r3, #0
 98c:	bl	0 <__assert_fail>
