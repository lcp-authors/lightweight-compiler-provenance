
../compcert-repos/prog2/9:     file format elf32-littlearm


Disassembly of section .init:

000109c4 <.init>:
   109c4:	push	{r3, lr}
   109c8:	bl	10dc8 <_start@@Base+0x3c>
   109cc:	pop	{r3, pc}

Disassembly of section .plt:

000109d0 <calloc@plt-0x14>:
   109d0:	push	{lr}		; (str lr, [sp, #-4]!)
   109d4:	ldr	lr, [pc, #4]	; 109e0 <calloc@plt-0x4>
   109d8:	add	lr, pc, lr
   109dc:	ldr	pc, [lr, #8]!
   109e0:	andeq	r1, r1, r0, lsr #12

000109e4 <calloc@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #69632	; 0x11000
   109ec:	ldr	pc, [ip, #1568]!	; 0x620

000109f0 <strcmp@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #69632	; 0x11000
   109f8:	ldr	pc, [ip, #1560]!	; 0x618

000109fc <printf@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #69632	; 0x11000
   10a04:	ldr	pc, [ip, #1552]!	; 0x610

00010a08 <__isoc99_fscanf@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #69632	; 0x11000
   10a10:	ldr	pc, [ip, #1544]!	; 0x608

00010a14 <fopen@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #69632	; 0x11000
   10a1c:	ldr	pc, [ip, #1536]!	; 0x600

00010a20 <fflush@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #69632	; 0x11000
   10a28:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a2c <free@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #69632	; 0x11000
   10a34:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a38 <fgets@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #69632	; 0x11000
   10a40:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a44 <strdup@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #69632	; 0x11000
   10a4c:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a50 <puts@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #69632	; 0x11000
   10a58:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a5c <malloc@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #69632	; 0x11000
   10a64:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a68 <__libc_start_main@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #69632	; 0x11000
   10a70:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a74 <__gmon_start__@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #69632	; 0x11000
   10a7c:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a80 <feof@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #69632	; 0x11000
   10a88:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a8c <strlen@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #69632	; 0x11000
   10a94:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a98 <putchar@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #69632	; 0x11000
   10aa0:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa4 <fclose@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #69632	; 0x11000
   10aac:	ldr	pc, [ip, #1440]!	; 0x5a0

00010ab0 <abort@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #69632	; 0x11000
   10ab8:	ldr	pc, [ip, #1432]!	; 0x598

Disassembly of section .text:

00010abc <main@@Base>:
   10abc:	push	{r4, r5, r6, lr}
   10ac0:	mov	r0, #42	; 0x2a
   10ac4:	bl	11230 <vetor_cria@@Base>
   10ac8:	ldr	r5, [pc, #620]	; 10d3c <main@@Base+0x280>
   10acc:	mov	r4, r0
   10ad0:	ldr	r0, [pc, #616]	; 10d40 <main@@Base+0x284>
   10ad4:	bl	10a50 <puts@plt>
   10ad8:	mov	r0, r4
   10adc:	ldr	r1, [pc, #608]	; 10d44 <main@@Base+0x288>
   10ae0:	bl	1108c <fp_carrega@@Base>
   10ae4:	ldr	r1, [r5]
   10ae8:	ldr	r0, [pc, #600]	; 10d48 <main@@Base+0x28c>
   10aec:	bl	109fc <printf@plt>
   10af0:	mov	r0, r4
   10af4:	bl	113e0 <vetor_imprime@@Base>
   10af8:	ldr	r3, [r4]
   10afc:	cmp	r3, #42	; 0x2a
   10b00:	beq	10b18 <main@@Base+0x5c>
   10b04:	ldr	r0, [pc, #576]	; 10d4c <main@@Base+0x290>
   10b08:	bl	10a50 <puts@plt>
   10b0c:	mov	r6, #1
   10b10:	mov	r0, r6
   10b14:	pop	{r4, r5, r6, pc}
   10b18:	mov	r0, r4
   10b1c:	bl	1103c <fp_remove@@Base>
   10b20:	mov	r1, r0
   10b24:	ldr	r0, [pc, #548]	; 10d50 <main@@Base+0x294>
   10b28:	bl	109f0 <strcmp@plt>
   10b2c:	subs	r6, r0, #0
   10b30:	bne	10d1c <main@@Base+0x260>
   10b34:	mov	r0, r4
   10b38:	str	r6, [r5]
   10b3c:	bl	1103c <fp_remove@@Base>
   10b40:	ldr	r1, [r5]
   10b44:	ldr	r0, [pc, #520]	; 10d54 <main@@Base+0x298>
   10b48:	bl	109fc <printf@plt>
   10b4c:	ldm	r4, {r2, r3}
   10b50:	str	r6, [r5]
   10b54:	cmp	r2, r3
   10b58:	beq	10b6c <main@@Base+0xb0>
   10b5c:	mov	r2, #99	; 0x63
   10b60:	ldr	r1, [pc, #496]	; 10d58 <main@@Base+0x29c>
   10b64:	mov	r0, r4
   10b68:	bl	10eb4 <_start@@Base+0x128>
   10b6c:	ldr	r1, [r5]
   10b70:	ldr	r0, [pc, #484]	; 10d5c <main@@Base+0x2a0>
   10b74:	bl	109fc <printf@plt>
   10b78:	mov	r0, r4
   10b7c:	bl	1103c <fp_remove@@Base>
   10b80:	ldm	r4, {r1, r3}
   10b84:	mov	r2, #0
   10b88:	str	r2, [r5]
   10b8c:	cmp	r1, r3
   10b90:	beq	10ba0 <main@@Base+0xe4>
   10b94:	ldr	r1, [pc, #444]	; 10d58 <main@@Base+0x29c>
   10b98:	mov	r0, r4
   10b9c:	bl	10eb4 <_start@@Base+0x128>
   10ba0:	ldr	r1, [r5]
   10ba4:	ldr	r0, [pc, #436]	; 10d60 <main@@Base+0x2a4>
   10ba8:	bl	109fc <printf@plt>
   10bac:	mov	r0, r4
   10bb0:	bl	1103c <fp_remove@@Base>
   10bb4:	ldr	r2, [r4]
   10bb8:	ldr	r1, [r4, #4]
   10bbc:	mov	r3, #0
   10bc0:	cmp	r1, r2
   10bc4:	str	r3, [r5]
   10bc8:	beq	10bdc <main@@Base+0x120>
   10bcc:	mov	r0, r4
   10bd0:	mov	r2, #42	; 0x2a
   10bd4:	ldr	r1, [pc, #380]	; 10d58 <main@@Base+0x29c>
   10bd8:	bl	10eb4 <_start@@Base+0x128>
   10bdc:	ldr	r1, [r5]
   10be0:	ldr	r0, [pc, #380]	; 10d64 <main@@Base+0x2a8>
   10be4:	bl	109fc <printf@plt>
   10be8:	ldr	r0, [pc, #376]	; 10d68 <main@@Base+0x2ac>
   10bec:	bl	10a50 <puts@plt>
   10bf0:	mov	r0, #42	; 0x2a
   10bf4:	bl	11288 <vetor_criaHeap@@Base>
   10bf8:	ldr	r2, [pc, #324]	; 10d44 <main@@Base+0x288>
   10bfc:	ldr	r1, [pc, #360]	; 10d6c <main@@Base+0x2b0>
   10c00:	mov	r4, r0
   10c04:	bl	11174 <heap_carrega@@Base>
   10c08:	ldr	r1, [r5]
   10c0c:	ldr	r0, [pc, #348]	; 10d70 <main@@Base+0x2b4>
   10c10:	bl	109fc <printf@plt>
   10c14:	mov	r0, r4
   10c18:	bl	11468 <vetor_imprimeHeap@@Base>
   10c1c:	ldr	r3, [r4]
   10c20:	cmp	r3, #42	; 0x2a
   10c24:	bne	10d2c <main@@Base+0x270>
   10c28:	mov	r1, #0
   10c2c:	ldr	r0, [pc, #284]	; 10d50 <main@@Base+0x294>
   10c30:	bl	109f0 <strcmp@plt>
   10c34:	subs	r6, r0, #0
   10c38:	bne	10d1c <main@@Base+0x260>
   10c3c:	mov	r1, r6
   10c40:	ldr	r0, [pc, #300]	; 10d74 <main@@Base+0x2b8>
   10c44:	str	r6, [r5]
   10c48:	bl	109fc <printf@plt>
   10c4c:	ldm	r4, {r2, r3}
   10c50:	str	r6, [r5]
   10c54:	cmp	r2, r3
   10c58:	beq	10c70 <main@@Base+0x1b4>
   10c5c:	mov	r3, #99	; 0x63
   10c60:	ldr	r2, [pc, #240]	; 10d58 <main@@Base+0x29c>
   10c64:	ldr	r1, [pc, #256]	; 10d6c <main@@Base+0x2b0>
   10c68:	mov	r0, r4
   10c6c:	bl	10f54 <_start@@Base+0x1c8>
   10c70:	ldr	r1, [r5]
   10c74:	ldr	r0, [pc, #252]	; 10d78 <main@@Base+0x2bc>
   10c78:	bl	109fc <printf@plt>
   10c7c:	ldm	r4, {r1, r2}
   10c80:	mov	r3, #0
   10c84:	str	r3, [r5]
   10c88:	cmp	r1, r2
   10c8c:	beq	10ca0 <main@@Base+0x1e4>
   10c90:	ldr	r2, [pc, #192]	; 10d58 <main@@Base+0x29c>
   10c94:	ldr	r1, [pc, #208]	; 10d6c <main@@Base+0x2b0>
   10c98:	mov	r0, r4
   10c9c:	bl	10f54 <_start@@Base+0x1c8>
   10ca0:	ldr	r1, [r5]
   10ca4:	ldr	r0, [pc, #208]	; 10d7c <main@@Base+0x2c0>
   10ca8:	bl	109fc <printf@plt>
   10cac:	ldm	r4, {r1, r2}
   10cb0:	mov	r3, #0
   10cb4:	str	r3, [r5]
   10cb8:	cmp	r1, r2
   10cbc:	beq	10cd4 <main@@Base+0x218>
   10cc0:	mov	r0, r4
   10cc4:	mov	r3, #42	; 0x2a
   10cc8:	ldr	r2, [pc, #136]	; 10d58 <main@@Base+0x29c>
   10ccc:	ldr	r1, [pc, #152]	; 10d6c <main@@Base+0x2b0>
   10cd0:	bl	10f54 <_start@@Base+0x1c8>
   10cd4:	ldr	r1, [r5]
   10cd8:	ldr	r0, [pc, #132]	; 10d64 <main@@Base+0x2a8>
   10cdc:	bl	109fc <printf@plt>
   10ce0:	mov	r0, #42	; 0x2a
   10ce4:	bl	11288 <vetor_criaHeap@@Base>
   10ce8:	ldr	r2, [pc, #84]	; 10d44 <main@@Base+0x288>
   10cec:	ldr	r1, [pc, #140]	; 10d80 <main@@Base+0x2c4>
   10cf0:	bl	11174 <heap_carrega@@Base>
   10cf4:	ldr	r1, [r5]
   10cf8:	ldr	r0, [pc, #112]	; 10d70 <main@@Base+0x2b4>
   10cfc:	bl	109fc <printf@plt>
   10d00:	mov	r4, #42	; 0x2a
   10d04:	mov	r5, #0
   10d08:	mov	r0, r5
   10d0c:	bl	10a50 <puts@plt>
   10d10:	subs	r4, r4, #1
   10d14:	bne	10d08 <main@@Base+0x24c>
   10d18:	b	10b10 <main@@Base+0x54>
   10d1c:	ldr	r0, [pc, #96]	; 10d84 <main@@Base+0x2c8>
   10d20:	bl	10a50 <puts@plt>
   10d24:	mov	r6, #1
   10d28:	b	10b10 <main@@Base+0x54>
   10d2c:	ldr	r0, [pc, #84]	; 10d88 <main@@Base+0x2cc>
   10d30:	bl	10a50 <puts@plt>
   10d34:	mov	r6, #1
   10d38:	b	10b10 <main@@Base+0x54>
   10d3c:	andeq	r2, r2, r8, rrx
   10d40:	andeq	r1, r1, ip, lsl #11
   10d44:	andeq	r1, r1, r4, asr #11
   10d48:	ldrdeq	r1, [r1], -r0
   10d4c:	andeq	r1, r1, r8, lsl #12
   10d50:	andeq	r1, r1, r0, lsr r6
   10d54:	andeq	r1, r1, r8, lsl #13
   10d58:			; <UNDEFINED> instruction: 0x000116bc
   10d5c:	andeq	r1, r1, ip, asr #13
   10d60:	andeq	r1, r1, r4, lsl r7
   10d64:	andeq	r1, r1, ip, asr r7
   10d68:	andeq	r1, r1, r4, lsr #15
   10d6c:	andeq	r1, r1, r4, lsl r3
   10d70:	ldrdeq	r1, [r1], -ip
   10d74:	andeq	r1, r1, ip, lsr r8
   10d78:	andeq	r1, r1, r0, ror r8
   10d7c:			; <UNDEFINED> instruction: 0x000118b8
   10d80:	andeq	r1, r1, ip, ror r3
   10d84:	andeq	r1, r1, r4, asr #12
   10d88:	andeq	r1, r1, r4, lsl r8

00010d8c <_start@@Base>:
   10d8c:	mov	fp, #0
   10d90:	mov	lr, #0
   10d94:	pop	{r1}		; (ldr r1, [sp], #4)
   10d98:	mov	r2, sp
   10d9c:	push	{r2}		; (str r2, [sp, #-4]!)
   10da0:	push	{r0}		; (str r0, [sp, #-4]!)
   10da4:	ldr	ip, [pc, #16]	; 10dbc <_start@@Base+0x30>
   10da8:	push	{ip}		; (str ip, [sp, #-4]!)
   10dac:	ldr	r0, [pc, #12]	; 10dc0 <_start@@Base+0x34>
   10db0:	ldr	r3, [pc, #12]	; 10dc4 <_start@@Base+0x38>
   10db4:	bl	10a68 <__libc_start_main@plt>
   10db8:	bl	10ab0 <abort@plt>
   10dbc:	andeq	r1, r1, r0, asr r5
   10dc0:			; <UNDEFINED> instruction: 0x00010abc
   10dc4:	strdeq	r1, [r1], -r0
   10dc8:	ldr	r3, [pc, #20]	; 10de4 <_start@@Base+0x58>
   10dcc:	ldr	r2, [pc, #20]	; 10de8 <_start@@Base+0x5c>
   10dd0:	add	r3, pc, r3
   10dd4:	ldr	r2, [r3, r2]
   10dd8:	cmp	r2, #0
   10ddc:	bxeq	lr
   10de0:	b	10a74 <__gmon_start__@plt>
   10de4:	andeq	r1, r1, r8, lsr #4
   10de8:	andeq	r0, r0, r4, asr r0
   10dec:	ldr	r3, [pc, #28]	; 10e10 <_start@@Base+0x84>
   10df0:	ldr	r0, [pc, #28]	; 10e14 <_start@@Base+0x88>
   10df4:	sub	r3, r3, r0
   10df8:	cmp	r3, #6
   10dfc:	bxls	lr
   10e00:	ldr	r3, [pc, #16]	; 10e18 <_start@@Base+0x8c>
   10e04:	cmp	r3, #0
   10e08:	bxeq	lr
   10e0c:	bx	r3
   10e10:	andeq	r2, r2, r3, rrx
   10e14:	andeq	r2, r2, r0, rrx
   10e18:	andeq	r0, r0, r0
   10e1c:	ldr	r1, [pc, #36]	; 10e48 <_start@@Base+0xbc>
   10e20:	ldr	r0, [pc, #36]	; 10e4c <_start@@Base+0xc0>
   10e24:	sub	r1, r1, r0
   10e28:	asr	r1, r1, #2
   10e2c:	add	r1, r1, r1, lsr #31
   10e30:	asrs	r1, r1, #1
   10e34:	bxeq	lr
   10e38:	ldr	r3, [pc, #16]	; 10e50 <_start@@Base+0xc4>
   10e3c:	cmp	r3, #0
   10e40:	bxeq	lr
   10e44:	bx	r3
   10e48:	andeq	r2, r2, r0, rrx
   10e4c:	andeq	r2, r2, r0, rrx
   10e50:	andeq	r0, r0, r0
   10e54:	push	{r4, lr}
   10e58:	ldr	r4, [pc, #24]	; 10e78 <_start@@Base+0xec>
   10e5c:	ldrb	r3, [r4]
   10e60:	cmp	r3, #0
   10e64:	popne	{r4, pc}
   10e68:	bl	10dec <_start@@Base+0x60>
   10e6c:	mov	r3, #1
   10e70:	strb	r3, [r4]
   10e74:	pop	{r4, pc}
   10e78:	andeq	r2, r2, r4, rrx
   10e7c:	ldr	r0, [pc, #40]	; 10eac <_start@@Base+0x120>
   10e80:	ldr	r3, [r0]
   10e84:	cmp	r3, #0
   10e88:	bne	10e90 <_start@@Base+0x104>
   10e8c:	b	10e1c <_start@@Base+0x90>
   10e90:	ldr	r3, [pc, #24]	; 10eb0 <_start@@Base+0x124>
   10e94:	cmp	r3, #0
   10e98:	beq	10e8c <_start@@Base+0x100>
   10e9c:	push	{r4, lr}
   10ea0:	blx	r3
   10ea4:	pop	{r4, lr}
   10ea8:	b	10e1c <_start@@Base+0x90>
   10eac:	andeq	r1, r2, r4, lsl pc
   10eb0:	andeq	r0, r0, r0
   10eb4:	push	{r4, r5, r6, r7, r8, lr}
   10eb8:	mov	r5, r0
   10ebc:	mov	r0, r2
   10ec0:	bl	112e0 <elemento_cria@@Base>
   10ec4:	ldr	r3, [r5]
   10ec8:	cmp	r3, #0
   10ecc:	mov	r6, r0
   10ed0:	ble	10f48 <_start@@Base+0x1bc>
   10ed4:	mov	r4, #0
   10ed8:	b	10ee8 <_start@@Base+0x15c>
   10edc:	add	r4, r4, #1
   10ee0:	cmp	r4, r3
   10ee4:	bge	10f40 <_start@@Base+0x1b4>
   10ee8:	ldr	r3, [r5, #8]
   10eec:	mov	r1, r6
   10ef0:	lsl	r7, r4, #2
   10ef4:	ldr	r0, [r3, r4, lsl #2]
   10ef8:	bl	11314 <maior_que@@Base>
   10efc:	ldr	r3, [r5]
   10f00:	cmp	r0, #0
   10f04:	bne	10edc <_start@@Base+0x150>
   10f08:	cmp	r4, r3
   10f0c:	add	r2, r3, #1
   10f10:	ldr	r0, [r5, #8]
   10f14:	bgt	10f30 <_start@@Base+0x1a4>
   10f18:	add	r4, r0, r4, lsl #2
   10f1c:	add	r3, r0, r2, lsl #2
   10f20:	ldr	r1, [r3, #-4]!
   10f24:	cmp	r3, r4
   10f28:	str	r1, [r3, #4]
   10f2c:	bne	10f20 <_start@@Base+0x194>
   10f30:	str	r6, [r0, r7]
   10f34:	mov	r0, #1
   10f38:	str	r2, [r5]
   10f3c:	pop	{r4, r5, r6, r7, r8, pc}
   10f40:	lsl	r7, r4, #2
   10f44:	b	10f08 <_start@@Base+0x17c>
   10f48:	mov	r7, #0
   10f4c:	mov	r4, r7
   10f50:	b	10f08 <_start@@Base+0x17c>
   10f54:	push	{r4, r5, r6, r7, r8, lr}
   10f58:	mov	r5, r0
   10f5c:	mov	r8, r1
   10f60:	mov	r0, r3
   10f64:	mov	r1, r2
   10f68:	bl	112e0 <elemento_cria@@Base>
   10f6c:	ldr	r2, [r5]
   10f70:	cmp	r2, #0
   10f74:	movgt	r4, #0
   10f78:	mov	r6, r0
   10f7c:	bgt	10f94 <_start@@Base+0x208>
   10f80:	b	11000 <_start@@Base+0x274>
   10f84:	ldr	r2, [r5]
   10f88:	add	r4, r4, #1
   10f8c:	cmp	r4, r2
   10f90:	bge	10ff0 <_start@@Base+0x264>
   10f94:	ldr	r3, [r5, #8]
   10f98:	mov	r1, r6
   10f9c:	lsl	r7, r4, #2
   10fa0:	ldr	r0, [r3, r4, lsl #2]
   10fa4:	blx	r8
   10fa8:	cmp	r0, #1
   10fac:	bne	10f84 <_start@@Base+0x1f8>
   10fb0:	cmp	r4, #0
   10fb4:	ldr	r2, [r5]
   10fb8:	ble	10ff8 <_start@@Base+0x26c>
   10fbc:	ldr	ip, [r5, #8]
   10fc0:	add	r3, r4, #1
   10fc4:	add	r0, ip, #4
   10fc8:	add	r3, ip, r3, lsl #2
   10fcc:	ldr	r1, [r3, #-4]!
   10fd0:	cmp	r0, r3
   10fd4:	str	r1, [r3, #4]
   10fd8:	bne	10fcc <_start@@Base+0x240>
   10fdc:	add	r2, r2, #1
   10fe0:	str	r6, [ip, r7]
   10fe4:	mov	r0, r4
   10fe8:	str	r2, [r5]
   10fec:	pop	{r4, r5, r6, r7, r8, pc}
   10ff0:	lsl	r7, r4, #2
   10ff4:	b	10fbc <_start@@Base+0x230>
   10ff8:	ldr	ip, [r5, #8]
   10ffc:	b	10fdc <_start@@Base+0x250>
   11000:	mov	r7, #0
   11004:	mov	r4, r7
   11008:	ldr	ip, [r5, #8]
   1100c:	b	10fdc <_start@@Base+0x250>

00011010 <fp_insere@@Base>:
   11010:	subs	r3, r0, #0
   11014:	beq	11034 <fp_insere@@Base+0x24>
   11018:	ldr	ip, [r3]
   1101c:	ldr	r3, [r3, #4]
   11020:	cmp	ip, r3
   11024:	beq	1102c <fp_insere@@Base+0x1c>
   11028:	b	10eb4 <_start@@Base+0x128>
   1102c:	mov	r0, #0
   11030:	bx	lr
   11034:	mvn	r0, #0
   11038:	bx	lr

0001103c <fp_remove@@Base>:
   1103c:	cmp	r0, #0
   11040:	bxeq	lr
   11044:	ldr	ip, [r0]
   11048:	cmp	ip, #0
   1104c:	beq	11084 <fp_remove@@Base+0x48>
   11050:	ldr	r3, [r0, #8]
   11054:	push	{lr}		; (str lr, [sp, #-4]!)
   11058:	addgt	r1, r3, ip, lsl #2
   1105c:	ldr	lr, [r3]
   11060:	ble	11074 <fp_remove@@Base+0x38>
   11064:	ldr	r2, [r3, #4]
   11068:	str	r2, [r3], #4
   1106c:	cmp	r3, r1
   11070:	bne	11064 <fp_remove@@Base+0x28>
   11074:	sub	ip, ip, #1
   11078:	str	ip, [r0]
   1107c:	ldr	r0, [lr, #4]
   11080:	pop	{pc}		; (ldr pc, [sp], #4)
   11084:	mov	r0, ip
   11088:	bx	lr

0001108c <fp_carrega@@Base>:
   1108c:	mov	r3, r1
   11090:	push	{r4, r5, r6, r7, r8, lr}
   11094:	mov	r4, r0
   11098:	sub	sp, sp, #264	; 0x108
   1109c:	ldr	r1, [pc, #152]	; 1113c <fp_carrega@@Base+0xb0>
   110a0:	mov	r0, r3
   110a4:	bl	10a14 <fopen@plt>
   110a8:	subs	r5, r0, #0
   110ac:	movne	r8, #256	; 0x100
   110b0:	ldrne	r7, [pc, #136]	; 11140 <fp_carrega@@Base+0xb4>
   110b4:	beq	11130 <fp_carrega@@Base+0xa4>
   110b8:	mov	r0, r5
   110bc:	bl	10a80 <feof@plt>
   110c0:	add	r2, sp, #4
   110c4:	mov	r1, r7
   110c8:	subs	r6, r0, #0
   110cc:	mov	r0, r5
   110d0:	bne	11124 <fp_carrega@@Base+0x98>
   110d4:	bl	10a08 <__isoc99_fscanf@plt>
   110d8:	mov	r1, r8
   110dc:	mov	r2, r5
   110e0:	add	r0, sp, #8
   110e4:	bl	10a38 <fgets@plt>
   110e8:	add	r0, sp, #8
   110ec:	bl	10a8c <strlen@plt>
   110f0:	add	r3, sp, #264	; 0x108
   110f4:	cmp	r4, #0
   110f8:	add	r1, sp, #8
   110fc:	add	r3, r3, r0
   11100:	mov	r0, r4
   11104:	strb	r6, [r3, #-257]	; 0xfffffeff
   11108:	beq	110b8 <fp_carrega@@Base+0x2c>
   1110c:	ldm	r4, {r2, r3}
   11110:	cmp	r2, r3
   11114:	beq	110b8 <fp_carrega@@Base+0x2c>
   11118:	ldr	r2, [sp, #4]
   1111c:	bl	10eb4 <_start@@Base+0x128>
   11120:	b	110b8 <fp_carrega@@Base+0x2c>
   11124:	bl	10aa4 <fclose@plt>
   11128:	add	sp, sp, #264	; 0x108
   1112c:	pop	{r4, r5, r6, r7, r8, pc}
   11130:	ldr	r0, [pc, #12]	; 11144 <fp_carrega@@Base+0xb8>
   11134:	bl	10a50 <puts@plt>
   11138:	b	11128 <fp_carrega@@Base+0x9c>
   1113c:	andeq	r1, r1, r0, ror #10
   11140:	andeq	r1, r1, r8, lsl #11
   11144:	andeq	r1, r1, r4, ror #10

00011148 <heap_insere@@Base>:
   11148:	push	{lr}		; (str lr, [sp, #-4]!)
   1114c:	ldr	ip, [r0, #4]
   11150:	ldr	lr, [r0]
   11154:	cmp	lr, ip
   11158:	beq	11164 <heap_insere@@Base+0x1c>
   1115c:	pop	{lr}		; (ldr lr, [sp], #4)
   11160:	b	10f54 <_start@@Base+0x1c8>
   11164:	mov	r0, #0
   11168:	pop	{pc}		; (ldr pc, [sp], #4)

0001116c <heap_remove@@Base>:
   1116c:	mov	r0, #0
   11170:	bx	lr

00011174 <heap_carrega@@Base>:
   11174:	push	{r4, r5, r6, r7, r8, r9, lr}
   11178:	mov	r5, r0
   1117c:	sub	sp, sp, #268	; 0x10c
   11180:	mov	r9, r1
   11184:	mov	r0, r2
   11188:	ldr	r1, [pc, #148]	; 11224 <heap_carrega@@Base+0xb0>
   1118c:	bl	10a14 <fopen@plt>
   11190:	subs	r4, r0, #0
   11194:	movne	r8, #256	; 0x100
   11198:	ldrne	r7, [pc, #136]	; 11228 <heap_carrega@@Base+0xb4>
   1119c:	bne	111d8 <heap_carrega@@Base+0x64>
   111a0:	b	11218 <heap_carrega@@Base+0xa4>
   111a4:	bl	10a08 <__isoc99_fscanf@plt>
   111a8:	mov	r2, r4
   111ac:	mov	r1, r8
   111b0:	add	r0, sp, #8
   111b4:	bl	10a38 <fgets@plt>
   111b8:	add	r0, sp, #8
   111bc:	bl	10a8c <strlen@plt>
   111c0:	ldm	r5, {r2, r3}
   111c4:	cmp	r2, r3
   111c8:	add	r3, sp, #264	; 0x108
   111cc:	add	r0, r3, r0
   111d0:	strb	r6, [r0, #-257]	; 0xfffffeff
   111d4:	bne	11200 <heap_carrega@@Base+0x8c>
   111d8:	mov	r0, r4
   111dc:	bl	10a80 <feof@plt>
   111e0:	add	r2, sp, #4
   111e4:	mov	r1, r7
   111e8:	subs	r6, r0, #0
   111ec:	mov	r0, r4
   111f0:	beq	111a4 <heap_carrega@@Base+0x30>
   111f4:	bl	10aa4 <fclose@plt>
   111f8:	add	sp, sp, #268	; 0x10c
   111fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11200:	ldr	r3, [sp, #4]
   11204:	add	r2, sp, #8
   11208:	mov	r1, r9
   1120c:	mov	r0, r5
   11210:	bl	10f54 <_start@@Base+0x1c8>
   11214:	b	111d8 <heap_carrega@@Base+0x64>
   11218:	ldr	r0, [pc, #12]	; 1122c <heap_carrega@@Base+0xb8>
   1121c:	bl	10a50 <puts@plt>
   11220:	b	111f8 <heap_carrega@@Base+0x84>
   11224:	andeq	r1, r1, r0, ror #10
   11228:	andeq	r1, r1, r8, lsl #11
   1122c:	andeq	r1, r1, r4, ror #10

00011230 <vetor_cria@@Base>:
   11230:	push	{r4, r5, r6, lr}
   11234:	mov	r5, r0
   11238:	mov	r0, #12
   1123c:	bl	10a5c <malloc@plt>
   11240:	subs	r4, r0, #0
   11244:	beq	11270 <vetor_cria@@Base+0x40>
   11248:	mov	r3, #0
   1124c:	str	r5, [r4, #4]
   11250:	mov	r0, r5
   11254:	str	r3, [r4]
   11258:	mov	r1, #4
   1125c:	bl	109e4 <calloc@plt>
   11260:	cmp	r0, #0
   11264:	mov	r5, r0
   11268:	str	r0, [r4, #8]
   1126c:	beq	11278 <vetor_cria@@Base+0x48>
   11270:	mov	r0, r4
   11274:	pop	{r4, r5, r6, pc}
   11278:	mov	r0, r4
   1127c:	bl	10a2c <free@plt>
   11280:	mov	r4, r5
   11284:	b	11270 <vetor_cria@@Base+0x40>

00011288 <vetor_criaHeap@@Base>:
   11288:	push	{r4, r5, r6, lr}
   1128c:	mov	r5, r0
   11290:	mov	r0, #12
   11294:	bl	10a5c <malloc@plt>
   11298:	subs	r4, r0, #0
   1129c:	beq	112c8 <vetor_criaHeap@@Base+0x40>
   112a0:	mov	r3, #0
   112a4:	str	r5, [r4, #4]
   112a8:	add	r0, r5, #1
   112ac:	str	r3, [r4]
   112b0:	mov	r1, #4
   112b4:	bl	109e4 <calloc@plt>
   112b8:	cmp	r0, #0
   112bc:	mov	r5, r0
   112c0:	str	r0, [r4, #8]
   112c4:	beq	112d0 <vetor_criaHeap@@Base+0x48>
   112c8:	mov	r0, r4
   112cc:	pop	{r4, r5, r6, pc}
   112d0:	mov	r0, r4
   112d4:	bl	10a2c <free@plt>
   112d8:	mov	r4, r5
   112dc:	b	112c8 <vetor_criaHeap@@Base+0x40>

000112e0 <elemento_cria@@Base>:
   112e0:	push	{r4, r5, r6, lr}
   112e4:	mov	r5, r0
   112e8:	mov	r0, #8
   112ec:	mov	r6, r1
   112f0:	bl	10a5c <malloc@plt>
   112f4:	subs	r4, r0, #0
   112f8:	beq	1130c <elemento_cria@@Base+0x2c>
   112fc:	mov	r0, r6
   11300:	bl	10a44 <strdup@plt>
   11304:	str	r5, [r4]
   11308:	str	r0, [r4, #4]
   1130c:	mov	r0, r4
   11310:	pop	{r4, r5, r6, pc}

00011314 <maior_que@@Base>:
   11314:	cmp	r1, #0
   11318:	cmpne	r0, #0
   1131c:	push	{r4, r5, r6, lr}
   11320:	beq	11360 <maior_que@@Base+0x4c>
   11324:	ldr	r3, [pc, #68]	; 11370 <maior_que@@Base+0x5c>
   11328:	mov	r5, r0
   1132c:	mov	r4, r1
   11330:	ldr	r0, [r3]
   11334:	bl	10a20 <fflush@plt>
   11338:	ldr	r2, [pc, #52]	; 11374 <maior_que@@Base+0x60>
   1133c:	ldr	r0, [r5]
   11340:	ldr	r1, [r4]
   11344:	ldr	r3, [r2]
   11348:	cmp	r0, r1
   1134c:	add	r3, r3, #1
   11350:	movle	r0, #0
   11354:	movgt	r0, #1
   11358:	str	r3, [r2]
   1135c:	pop	{r4, r5, r6, pc}
   11360:	ldr	r0, [pc, #16]	; 11378 <maior_que@@Base+0x64>
   11364:	bl	10a50 <puts@plt>
   11368:	mov	r0, #0
   1136c:	pop	{r4, r5, r6, pc}
   11370:	andeq	r2, r2, r0, rrx
   11374:	andeq	r2, r2, r8, rrx
   11378:	andeq	r1, r1, r0, lsl #18

0001137c <maior_que_HeapSort@@Base>:
   1137c:	cmp	r1, #0
   11380:	cmpne	r0, #0
   11384:	push	{r4, r5, r6, lr}
   11388:	beq	113c4 <maior_que_HeapSort@@Base+0x48>
   1138c:	ldr	r3, [pc, #64]	; 113d4 <maior_que_HeapSort@@Base+0x58>
   11390:	mov	r4, r0
   11394:	mov	r5, r1
   11398:	ldr	r0, [r3]
   1139c:	bl	10a20 <fflush@plt>
   113a0:	ldr	r2, [pc, #48]	; 113d8 <maior_que_HeapSort@@Base+0x5c>
   113a4:	ldr	r1, [r5, #4]
   113a8:	ldr	r0, [r4, #4]
   113ac:	ldr	r3, [r2]
   113b0:	add	r3, r3, #1
   113b4:	str	r3, [r2]
   113b8:	bl	109f0 <strcmp@plt>
   113bc:	lsr	r0, r0, #31
   113c0:	pop	{r4, r5, r6, pc}
   113c4:	ldr	r0, [pc, #16]	; 113dc <maior_que_HeapSort@@Base+0x60>
   113c8:	bl	10a50 <puts@plt>
   113cc:	mov	r0, #0
   113d0:	pop	{r4, r5, r6, pc}
   113d4:	andeq	r2, r2, r0, rrx
   113d8:	andeq	r2, r2, r8, rrx
   113dc:	andeq	r1, r1, r0, lsl #18

000113e0 <vetor_imprime@@Base>:
   113e0:	ldr	r3, [r0]
   113e4:	cmp	r3, #0
   113e8:	ble	11454 <vetor_imprime@@Base+0x74>
   113ec:	ldr	r3, [r0, #8]
   113f0:	push	{r4, r5, r6, lr}
   113f4:	mov	r5, r0
   113f8:	ldr	r3, [r3]
   113fc:	ldr	r0, [pc, #88]	; 1145c <vetor_imprime@@Base+0x7c>
   11400:	ldr	r2, [r3]
   11404:	ldr	r1, [r3, #4]
   11408:	bl	109fc <printf@plt>
   1140c:	ldr	r3, [r5]
   11410:	cmp	r3, #1
   11414:	movgt	r4, #1
   11418:	ldrgt	r6, [pc, #64]	; 11460 <vetor_imprime@@Base+0x80>
   1141c:	ble	11448 <vetor_imprime@@Base+0x68>
   11420:	ldr	r3, [r5, #8]
   11424:	mov	r0, r6
   11428:	ldr	r3, [r3, r4, lsl #2]
   1142c:	add	r4, r4, #1
   11430:	ldr	r2, [r3]
   11434:	ldr	r1, [r3, #4]
   11438:	bl	109fc <printf@plt>
   1143c:	ldr	r3, [r5]
   11440:	cmp	r3, r4
   11444:	bgt	11420 <vetor_imprime@@Base+0x40>
   11448:	mov	r0, #10
   1144c:	pop	{r4, r5, r6, lr}
   11450:	b	10a98 <putchar@plt>
   11454:	ldr	r0, [pc, #8]	; 11464 <vetor_imprime@@Base+0x84>
   11458:	b	10a50 <puts@plt>
   1145c:	andeq	r1, r1, ip, lsl #18
   11460:	andeq	r1, r1, r4, asr #18
   11464:	andeq	r1, r1, ip, lsr #18

00011468 <vetor_imprimeHeap@@Base>:
   11468:	ldr	r3, [r0]
   1146c:	cmp	r3, #0
   11470:	ble	114dc <vetor_imprimeHeap@@Base+0x74>
   11474:	ldr	r3, [r0, #8]
   11478:	push	{r4, r5, r6, lr}
   1147c:	mov	r5, r0
   11480:	ldr	r3, [r3, #4]
   11484:	ldr	r0, [pc, #88]	; 114e4 <vetor_imprimeHeap@@Base+0x7c>
   11488:	ldr	r2, [r3]
   1148c:	ldr	r1, [r3, #4]
   11490:	bl	109fc <printf@plt>
   11494:	ldr	r3, [r5]
   11498:	cmp	r3, #2
   1149c:	movgt	r4, #2
   114a0:	ldrgt	r6, [pc, #64]	; 114e8 <vetor_imprimeHeap@@Base+0x80>
   114a4:	ble	114d0 <vetor_imprimeHeap@@Base+0x68>
   114a8:	ldr	r3, [r5, #8]
   114ac:	mov	r0, r6
   114b0:	ldr	r3, [r3, r4, lsl #2]
   114b4:	add	r4, r4, #1
   114b8:	ldr	r2, [r3]
   114bc:	ldr	r1, [r3, #4]
   114c0:	bl	109fc <printf@plt>
   114c4:	ldr	r3, [r5]
   114c8:	cmp	r3, r4
   114cc:	bgt	114a8 <vetor_imprimeHeap@@Base+0x40>
   114d0:	mov	r0, #10
   114d4:	pop	{r4, r5, r6, lr}
   114d8:	b	10a98 <putchar@plt>
   114dc:	ldr	r0, [pc, #8]	; 114ec <vetor_imprimeHeap@@Base+0x84>
   114e0:	b	10a50 <puts@plt>
   114e4:	andeq	r1, r1, ip, lsl #18
   114e8:	andeq	r1, r1, r4, asr #18
   114ec:	andeq	r1, r1, ip, lsr #18

000114f0 <__libc_csu_init@@Base>:
   114f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   114f4:	mov	r7, r0
   114f8:	ldr	r6, [pc, #72]	; 11548 <__libc_csu_init@@Base+0x58>
   114fc:	ldr	r5, [pc, #72]	; 1154c <__libc_csu_init@@Base+0x5c>
   11500:	add	r6, pc, r6
   11504:	add	r5, pc, r5
   11508:	sub	r6, r6, r5
   1150c:	mov	r8, r1
   11510:	mov	r9, r2
   11514:	bl	109c4 <calloc@plt-0x20>
   11518:	asrs	r6, r6, #2
   1151c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11520:	mov	r4, #0
   11524:	add	r4, r4, #1
   11528:	ldr	r3, [r5], #4
   1152c:	mov	r2, r9
   11530:	mov	r1, r8
   11534:	mov	r0, r7
   11538:	blx	r3
   1153c:	cmp	r6, r4
   11540:	bne	11524 <__libc_csu_init@@Base+0x34>
   11544:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11548:	andeq	r0, r1, r8, lsl #20
   1154c:	andeq	r0, r1, r0, lsl #20

00011550 <__libc_csu_fini@@Base>:
   11550:	bx	lr

Disassembly of section .fini:

00011554 <.fini>:
   11554:	push	{r3, lr}
   11558:	pop	{r3, pc}
