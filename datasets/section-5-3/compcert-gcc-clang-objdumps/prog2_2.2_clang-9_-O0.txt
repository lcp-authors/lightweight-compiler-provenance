
../compcert-repos/prog2/2.2:     file format elf32-littlearm


Disassembly of section .init:

00010750 <.init>:
   10750:	push	{r3, lr}
   10754:	bl	1083c <_start@@Base+0x3c>
   10758:	pop	{r3, pc}

Disassembly of section .plt:

0001075c <printf@plt-0x14>:
   1075c:	push	{lr}		; (str lr, [sp, #-4]!)
   10760:	ldr	lr, [pc, #4]	; 1076c <printf@plt-0x4>
   10764:	add	lr, pc, lr
   10768:	ldr	pc, [lr, #8]!
   1076c:	muleq	r1, r4, r8

00010770 <printf@plt>:
   10770:	add	ip, pc, #0, 12
   10774:	add	ip, ip, #16, 20	; 0x10000
   10778:	ldr	pc, [ip, #2196]!	; 0x894

0001077c <free@plt>:
   1077c:	add	ip, pc, #0, 12
   10780:	add	ip, ip, #16, 20	; 0x10000
   10784:	ldr	pc, [ip, #2188]!	; 0x88c

00010788 <fgets@plt>:
   10788:	add	ip, pc, #0, 12
   1078c:	add	ip, ip, #16, 20	; 0x10000
   10790:	ldr	pc, [ip, #2180]!	; 0x884

00010794 <getchar@plt>:
   10794:	add	ip, pc, #0, 12
   10798:	add	ip, ip, #16, 20	; 0x10000
   1079c:	ldr	pc, [ip, #2172]!	; 0x87c

000107a0 <realloc@plt>:
   107a0:	add	ip, pc, #0, 12
   107a4:	add	ip, ip, #16, 20	; 0x10000
   107a8:	ldr	pc, [ip, #2164]!	; 0x874

000107ac <strcpy@plt>:
   107ac:	add	ip, pc, #0, 12
   107b0:	add	ip, ip, #16, 20	; 0x10000
   107b4:	ldr	pc, [ip, #2156]!	; 0x86c

000107b8 <malloc@plt>:
   107b8:	add	ip, pc, #0, 12
   107bc:	add	ip, ip, #16, 20	; 0x10000
   107c0:	ldr	pc, [ip, #2148]!	; 0x864

000107c4 <__libc_start_main@plt>:
   107c4:	add	ip, pc, #0, 12
   107c8:	add	ip, ip, #16, 20	; 0x10000
   107cc:	ldr	pc, [ip, #2140]!	; 0x85c

000107d0 <__gmon_start__@plt>:
   107d0:	add	ip, pc, #0, 12
   107d4:	add	ip, ip, #16, 20	; 0x10000
   107d8:	ldr	pc, [ip, #2132]!	; 0x854

000107dc <strlen@plt>:
   107dc:	add	ip, pc, #0, 12
   107e0:	add	ip, ip, #16, 20	; 0x10000
   107e4:	ldr	pc, [ip, #2124]!	; 0x84c

000107e8 <__isoc99_scanf@plt>:
   107e8:	add	ip, pc, #0, 12
   107ec:	add	ip, ip, #16, 20	; 0x10000
   107f0:	ldr	pc, [ip, #2116]!	; 0x844

000107f4 <abort@plt>:
   107f4:	add	ip, pc, #0, 12
   107f8:	add	ip, ip, #16, 20	; 0x10000
   107fc:	ldr	pc, [ip, #2108]!	; 0x83c

Disassembly of section .text:

00010800 <_start@@Base>:
   10800:	mov	fp, #0
   10804:	mov	lr, #0
   10808:	pop	{r1}		; (ldr r1, [sp], #4)
   1080c:	mov	r2, sp
   10810:	push	{r2}		; (str r2, [sp, #-4]!)
   10814:	push	{r0}		; (str r0, [sp, #-4]!)
   10818:	ldr	ip, [pc, #16]	; 10830 <_start@@Base+0x30>
   1081c:	push	{ip}		; (str ip, [sp, #-4]!)
   10820:	ldr	r0, [pc, #12]	; 10834 <_start@@Base+0x34>
   10824:	ldr	r3, [pc, #12]	; 10838 <_start@@Base+0x38>
   10828:	bl	107c4 <__libc_start_main@plt>
   1082c:	bl	107f4 <abort@plt>
   10830:	andeq	r0, r1, r8, lsr #23
   10834:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10838:	andeq	r0, r1, r8, asr #22
   1083c:	ldr	r3, [pc, #20]	; 10858 <_start@@Base+0x58>
   10840:	ldr	r2, [pc, #20]	; 1085c <_start@@Base+0x5c>
   10844:	add	r3, pc, r3
   10848:	ldr	r2, [r3, r2]
   1084c:	cmp	r2, #0
   10850:	bxeq	lr
   10854:	b	107d0 <__gmon_start__@plt>
   10858:			; <UNDEFINED> instruction: 0x000107b4
   1085c:	andeq	r0, r0, ip, lsr r0
   10860:	ldr	r0, [pc, #24]	; 10880 <_start@@Base+0x80>
   10864:	ldr	r3, [pc, #24]	; 10884 <_start@@Base+0x84>
   10868:	cmp	r3, r0
   1086c:	bxeq	lr
   10870:	ldr	r3, [pc, #16]	; 10888 <_start@@Base+0x88>
   10874:	cmp	r3, #0
   10878:	bxeq	lr
   1087c:	bx	r3
   10880:	andeq	r1, r2, r8, asr #32
   10884:	andeq	r1, r2, r8, asr #32
   10888:	andeq	r0, r0, r0
   1088c:	ldr	r0, [pc, #36]	; 108b8 <_start@@Base+0xb8>
   10890:	ldr	r1, [pc, #36]	; 108bc <_start@@Base+0xbc>
   10894:	sub	r1, r1, r0
   10898:	asr	r1, r1, #2
   1089c:	add	r1, r1, r1, lsr #31
   108a0:	asrs	r1, r1, #1
   108a4:	bxeq	lr
   108a8:	ldr	r3, [pc, #16]	; 108c0 <_start@@Base+0xc0>
   108ac:	cmp	r3, #0
   108b0:	bxeq	lr
   108b4:	bx	r3
   108b8:	andeq	r1, r2, r8, asr #32
   108bc:	andeq	r1, r2, r8, asr #32
   108c0:	andeq	r0, r0, r0
   108c4:	push	{r4, lr}
   108c8:	ldr	r4, [pc, #24]	; 108e8 <_start@@Base+0xe8>
   108cc:	ldrb	r3, [r4]
   108d0:	cmp	r3, #0
   108d4:	popne	{r4, pc}
   108d8:	bl	10860 <_start@@Base+0x60>
   108dc:	mov	r3, #1
   108e0:	strb	r3, [r4]
   108e4:	pop	{r4, pc}
   108e8:	andeq	r1, r2, ip, asr #32
   108ec:	b	1088c <_start@@Base+0x8c>

000108f0 <main@@Base>:
   108f0:	push	{fp, lr}
   108f4:	mov	fp, sp
   108f8:	sub	sp, sp, #128	; 0x80
   108fc:	movw	r0, #0
   10900:	str	r0, [fp, #-4]
   10904:	movw	r0, #12
   10908:	bl	107b8 <malloc@plt>
   1090c:	str	r0, [fp, #-8]
   10910:	movw	r0, #0
   10914:	str	r0, [sp, #36]	; 0x24
   10918:	ldr	r0, [sp, #36]	; 0x24
   1091c:	cmp	r0, #3
   10920:	bge	10948 <main@@Base+0x58>
   10924:	ldr	r0, [fp, #-8]
   10928:	ldr	r1, [sp, #36]	; 0x24
   1092c:	add	r0, r0, r1, lsl #2
   10930:	movw	r1, #0
   10934:	str	r1, [r0]
   10938:	ldr	r0, [sp, #36]	; 0x24
   1093c:	add	r0, r0, #1
   10940:	str	r0, [sp, #36]	; 0x24
   10944:	b	10918 <main@@Base+0x28>
   10948:	b	1094c <main@@Base+0x5c>
   1094c:	movw	r0, #0
   10950:	str	r0, [sp, #36]	; 0x24
   10954:	ldr	r0, [sp, #36]	; 0x24
   10958:	cmp	r0, #3
   1095c:	bge	109d0 <main@@Base+0xe0>
   10960:	ldr	r0, [sp, #36]	; 0x24
   10964:	add	r1, r0, #1
   10968:	movw	r0, #3000	; 0xbb8
   1096c:	movt	r0, #1
   10970:	bl	10770 <printf@plt>
   10974:	ldr	r1, [fp, #-8]
   10978:	ldr	r2, [sp, #36]	; 0x24
   1097c:	add	r1, r1, r2, lsl #2
   10980:	ldr	r1, [r1]
   10984:	movw	r2, #0
   10988:	cmp	r1, r2
   1098c:	bne	109a0 <main@@Base+0xb0>
   10990:	movw	r0, #3006	; 0xbbe
   10994:	movt	r0, #1
   10998:	bl	10770 <printf@plt>
   1099c:	b	109bc <main@@Base+0xcc>
   109a0:	ldr	r0, [fp, #-8]
   109a4:	ldr	r1, [sp, #36]	; 0x24
   109a8:	add	r0, r0, r1, lsl #2
   109ac:	ldr	r1, [r0]
   109b0:	movw	r0, #3015	; 0xbc7
   109b4:	movt	r0, #1
   109b8:	bl	10770 <printf@plt>
   109bc:	b	109c0 <main@@Base+0xd0>
   109c0:	ldr	r0, [sp, #36]	; 0x24
   109c4:	add	r0, r0, #1
   109c8:	str	r0, [sp, #36]	; 0x24
   109cc:	b	10954 <main@@Base+0x64>
   109d0:	b	109d4 <main@@Base+0xe4>
   109d4:	movw	r0, #3019	; 0xbcb
   109d8:	movt	r0, #1
   109dc:	movw	r1, #3
   109e0:	bl	10770 <printf@plt>
   109e4:	movw	r1, #3055	; 0xbef
   109e8:	movt	r1, #1
   109ec:	str	r0, [sp, #28]
   109f0:	mov	r0, r1
   109f4:	add	r1, sp, #32
   109f8:	bl	107e8 <__isoc99_scanf@plt>
   109fc:	str	r0, [sp, #24]
   10a00:	bl	10794 <getchar@plt>
   10a04:	ldr	r0, [sp, #32]
   10a08:	cmp	r0, #0
   10a0c:	movw	r0, #1
   10a10:	str	r0, [sp, #20]
   10a14:	blt	10a2c <main@@Base+0x13c>
   10a18:	ldr	r0, [sp, #32]
   10a1c:	cmp	r0, #3
   10a20:	movw	r0, #0
   10a24:	movgt	r0, #1
   10a28:	str	r0, [sp, #20]
   10a2c:	ldr	r0, [sp, #20]
   10a30:	tst	r0, #1
   10a34:	bne	109d4 <main@@Base+0xe4>
   10a38:	ldr	r0, [sp, #32]
   10a3c:	cmp	r0, #0
   10a40:	bne	10a48 <main@@Base+0x158>
   10a44:	b	10afc <main@@Base+0x20c>
   10a48:	add	r1, sp, #40	; 0x28
   10a4c:	movw	r0, #3058	; 0xbf2
   10a50:	movt	r0, #1
   10a54:	str	r1, [sp, #16]
   10a58:	bl	10770 <printf@plt>
   10a5c:	movw	r1, #4168	; 0x1048
   10a60:	movt	r1, #2
   10a64:	ldr	r2, [r1]
   10a68:	add	r1, sp, #40	; 0x28
   10a6c:	mov	r3, #80	; 0x50
   10a70:	str	r0, [sp, #12]
   10a74:	mov	r0, r1
   10a78:	str	r1, [sp, #8]
   10a7c:	mov	r1, r3
   10a80:	bl	10788 <fgets@plt>
   10a84:	ldr	r1, [sp, #8]
   10a88:	str	r0, [sp, #4]
   10a8c:	mov	r0, r1
   10a90:	bl	107dc <strlen@plt>
   10a94:	ldr	r1, [sp, #8]
   10a98:	add	r0, r0, r1
   10a9c:	mov	r2, #0
   10aa0:	strb	r2, [r0, #-1]
   10aa4:	ldr	r0, [fp, #-8]
   10aa8:	ldr	r2, [sp, #32]
   10aac:	add	r0, r0, r2, lsl #2
   10ab0:	ldr	r0, [r0, #-4]
   10ab4:	str	r0, [sp]
   10ab8:	mov	r0, r1
   10abc:	bl	107dc <strlen@plt>
   10ac0:	add	r1, r0, #1
   10ac4:	ldr	r0, [sp]
   10ac8:	bl	107a0 <realloc@plt>
   10acc:	ldr	r1, [fp, #-8]
   10ad0:	ldr	r2, [sp, #32]
   10ad4:	add	r1, r1, r2, lsl #2
   10ad8:	str	r0, [r1, #-4]
   10adc:	ldr	r0, [fp, #-8]
   10ae0:	ldr	r1, [sp, #32]
   10ae4:	sub	r1, r1, #1
   10ae8:	add	r0, r0, r1, lsl #2
   10aec:	ldr	r0, [r0]
   10af0:	ldr	r1, [sp, #16]
   10af4:	bl	107ac <strcpy@plt>
   10af8:	b	1094c <main@@Base+0x5c>
   10afc:	movw	r0, #0
   10b00:	str	r0, [sp, #36]	; 0x24
   10b04:	ldr	r0, [sp, #36]	; 0x24
   10b08:	cmp	r0, #3
   10b0c:	bge	10b34 <main@@Base+0x244>
   10b10:	ldr	r0, [fp, #-8]
   10b14:	ldr	r1, [sp, #36]	; 0x24
   10b18:	add	r0, r0, r1, lsl #2
   10b1c:	ldr	r0, [r0]
   10b20:	bl	1077c <free@plt>
   10b24:	ldr	r0, [sp, #36]	; 0x24
   10b28:	add	r0, r0, #1
   10b2c:	str	r0, [sp, #36]	; 0x24
   10b30:	b	10b04 <main@@Base+0x214>
   10b34:	ldr	r0, [fp, #-8]
   10b38:	bl	1077c <free@plt>
   10b3c:	movw	r0, #0
   10b40:	mov	sp, fp
   10b44:	pop	{fp, pc}

00010b48 <__libc_csu_init@@Base>:
   10b48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b4c:	mov	r7, r0
   10b50:	ldr	r6, [pc, #72]	; 10ba0 <__libc_csu_init@@Base+0x58>
   10b54:	ldr	r5, [pc, #72]	; 10ba4 <__libc_csu_init@@Base+0x5c>
   10b58:	add	r6, pc, r6
   10b5c:	add	r5, pc, r5
   10b60:	sub	r6, r6, r5
   10b64:	mov	r8, r1
   10b68:	mov	r9, r2
   10b6c:	bl	10750 <printf@plt-0x20>
   10b70:	asrs	r6, r6, #2
   10b74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b78:	mov	r4, #0
   10b7c:	add	r4, r4, #1
   10b80:	ldr	r3, [r5], #4
   10b84:	mov	r2, r9
   10b88:	mov	r1, r8
   10b8c:	mov	r0, r7
   10b90:	blx	r3
   10b94:	cmp	r6, r4
   10b98:	bne	10b7c <__libc_csu_init@@Base+0x34>
   10b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ba0:	andeq	r0, r1, ip, lsr #7
   10ba4:	andeq	r0, r1, r4, lsr #7

00010ba8 <__libc_csu_fini@@Base>:
   10ba8:	bx	lr

Disassembly of section .fini:

00010bac <.fini>:
   10bac:	push	{r3, lr}
   10bb0:	pop	{r3, pc}
