
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-time.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_month_to_integer>:
       0:	push	{r4, sl, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #8
       c:	ldrb	r1, [r0]
      10:	mov	r2, #3
      14:	strb	r1, [sp, #4]
      18:	ldrb	r1, [r0, #1]
      1c:	strb	r1, [sp, #5]
      20:	mov	r1, #0
      24:	ldrb	r0, [r0, #2]
      28:	strb	r1, [sp, #7]
      2c:	movw	r1, #0
      30:	movt	r1, #0
      34:	strb	r0, [sp, #6]
      38:	add	r0, sp, #4
      3c:	bl	0 <strncasecmp>
      40:	cmp	r0, #0
      44:	beq	19c <coda_month_to_integer+0x19c>
      48:	movw	r1, #0
      4c:	add	r0, sp, #4
      50:	mov	r2, #3
      54:	mov	r4, #3
      58:	movt	r1, #0
      5c:	bl	0 <strncasecmp>
      60:	cmp	r0, #0
      64:	beq	1a4 <coda_month_to_integer+0x1a4>
      68:	movw	r1, #0
      6c:	add	r0, sp, #4
      70:	mov	r2, #3
      74:	movt	r1, #0
      78:	bl	0 <strncasecmp>
      7c:	cmp	r0, #0
      80:	beq	1f0 <coda_month_to_integer+0x1f0>
      84:	movw	r1, #0
      88:	add	r0, sp, #4
      8c:	mov	r2, #3
      90:	movt	r1, #0
      94:	bl	0 <strncasecmp>
      98:	cmp	r0, #0
      9c:	beq	1ac <coda_month_to_integer+0x1ac>
      a0:	movw	r1, #0
      a4:	add	r0, sp, #4
      a8:	mov	r2, #3
      ac:	movt	r1, #0
      b0:	bl	0 <strncasecmp>
      b4:	cmp	r0, #0
      b8:	beq	1b4 <coda_month_to_integer+0x1b4>
      bc:	movw	r1, #0
      c0:	add	r0, sp, #4
      c4:	mov	r2, #3
      c8:	movt	r1, #0
      cc:	bl	0 <strncasecmp>
      d0:	cmp	r0, #0
      d4:	beq	1bc <coda_month_to_integer+0x1bc>
      d8:	movw	r1, #0
      dc:	add	r0, sp, #4
      e0:	mov	r2, #3
      e4:	movt	r1, #0
      e8:	bl	0 <strncasecmp>
      ec:	cmp	r0, #0
      f0:	beq	1c4 <coda_month_to_integer+0x1c4>
      f4:	movw	r1, #0
      f8:	add	r0, sp, #4
      fc:	mov	r2, #3
     100:	movt	r1, #0
     104:	bl	0 <strncasecmp>
     108:	cmp	r0, #0
     10c:	beq	1cc <coda_month_to_integer+0x1cc>
     110:	movw	r1, #0
     114:	add	r0, sp, #4
     118:	mov	r2, #3
     11c:	movt	r1, #0
     120:	bl	0 <strncasecmp>
     124:	cmp	r0, #0
     128:	beq	1d4 <coda_month_to_integer+0x1d4>
     12c:	movw	r1, #0
     130:	add	r0, sp, #4
     134:	mov	r2, #3
     138:	movt	r1, #0
     13c:	bl	0 <strncasecmp>
     140:	cmp	r0, #0
     144:	beq	1dc <coda_month_to_integer+0x1dc>
     148:	movw	r1, #0
     14c:	add	r0, sp, #4
     150:	mov	r2, #3
     154:	movt	r1, #0
     158:	bl	0 <strncasecmp>
     15c:	cmp	r0, #0
     160:	beq	1e4 <coda_month_to_integer+0x1e4>
     164:	movw	r1, #0
     168:	add	r0, sp, #4
     16c:	mov	r2, #3
     170:	movt	r1, #0
     174:	bl	0 <strncasecmp>
     178:	cmp	r0, #0
     17c:	beq	1ec <coda_month_to_integer+0x1ec>
     180:	movw	r1, #0
     184:	add	r2, sp, #4
     188:	mvn	r0, #99	; 0x63
     18c:	movt	r1, #0
     190:	bl	0 <coda_set_error>
     194:	mvn	r4, #0
     198:	b	1f0 <coda_month_to_integer+0x1f0>
     19c:	mov	r4, #1
     1a0:	b	1f0 <coda_month_to_integer+0x1f0>
     1a4:	mov	r4, #2
     1a8:	b	1f0 <coda_month_to_integer+0x1f0>
     1ac:	mov	r4, #4
     1b0:	b	1f0 <coda_month_to_integer+0x1f0>
     1b4:	mov	r4, #5
     1b8:	b	1f0 <coda_month_to_integer+0x1f0>
     1bc:	mov	r4, #6
     1c0:	b	1f0 <coda_month_to_integer+0x1f0>
     1c4:	mov	r4, #7
     1c8:	b	1f0 <coda_month_to_integer+0x1f0>
     1cc:	mov	r4, #8
     1d0:	b	1f0 <coda_month_to_integer+0x1f0>
     1d4:	mov	r4, #9
     1d8:	b	1f0 <coda_month_to_integer+0x1f0>
     1dc:	mov	r4, #10
     1e0:	b	1f0 <coda_month_to_integer+0x1f0>
     1e4:	mov	r4, #11
     1e8:	b	1f0 <coda_month_to_integer+0x1f0>
     1ec:	mov	r4, #12
     1f0:	mov	r0, r4
     1f4:	sub	sp, fp, #8
     1f8:	pop	{r4, sl, fp, pc}

000001fc <coda_dayofyear_to_month_day>:
     1fc:	push	{r4, r5, r6, sl, fp, lr}
     200:	add	fp, sp, #16
     204:	sub	sp, sp, #8
     208:	cmp	r2, #0
     20c:	mov	r4, r2
     210:	str	r0, [sp, #4]
     214:	movne	r5, r3
     218:	cmpne	r3, #0
     21c:	bne	240 <coda_dayofyear_to_month_day+0x44>
     220:	movw	r1, #0
     224:	movw	r2, #0
     228:	mvn	r0, #99	; 0x63
     22c:	movw	r3, #549	; 0x225
     230:	movt	r1, #0
     234:	movt	r2, #0
     238:	bl	0 <coda_set_error>
     23c:	b	268 <coda_dayofyear_to_month_day+0x6c>
     240:	mov	r2, r0
     244:	movw	r0, #367	; 0x16f
     248:	mov	r6, r1
     24c:	cmp	r1, r0
     250:	bcc	274 <coda_dayofyear_to_month_day+0x78>
     254:	movw	r1, #0
     258:	mvn	r0, #103	; 0x67
     25c:	mov	r2, r6
     260:	movt	r1, #0
     264:	bl	0 <coda_set_error>
     268:	mvn	r0, #0
     26c:	sub	sp, fp, #16
     270:	pop	{r4, r5, r6, sl, fp, pc}
     274:	mov	r3, sp
     278:	mov	r0, #1
     27c:	mov	r1, #1
     280:	bl	2cc <dmy_to_mjd2000>
     284:	mov	r1, r0
     288:	mvn	r0, #0
     28c:	cmp	r1, #0
     290:	beq	29c <coda_dayofyear_to_month_day+0xa0>
     294:	sub	sp, fp, #16
     298:	pop	{r4, r5, r6, sl, fp, pc}
     29c:	ldr	r0, [sp]
     2a0:	add	r3, sp, #4
     2a4:	mov	r1, r5
     2a8:	mov	r2, r4
     2ac:	add	r0, r6, r0
     2b0:	sub	r0, r0, #1
     2b4:	str	r0, [sp]
     2b8:	bl	528 <mjd2000_to_dmy>
     2bc:	cmp	r0, #0
     2c0:	mvnne	r0, #0
     2c4:	sub	sp, fp, #16
     2c8:	pop	{r4, r5, r6, sl, fp, pc}

000002cc <dmy_to_mjd2000>:
     2cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2d0:	add	fp, sp, #28
     2d4:	sub	sp, sp, #20
     2d8:	mov	ip, r1
     2dc:	mov	lr, r0
     2e0:	cmp	r0, #1
     2e4:	blt	334 <dmy_to_mjd2000+0x68>
     2e8:	sub	r0, ip, #1
     2ec:	cmp	r0, #11
     2f0:	bhi	334 <dmy_to_mjd2000+0x68>
     2f4:	cmp	r2, #0
     2f8:	beq	334 <dmy_to_mjd2000+0x68>
     2fc:	movw	r1, #0
     300:	cmp	ip, #2
     304:	movt	r1, #0
     308:	ldr	r0, [r1, r0, lsl #2]
     30c:	ldr	r1, [r1, ip, lsl #2]
     310:	sub	r7, r1, r0
     314:	mov	r1, #0
     318:	addeq	r1, r2, r2, lsr #31
     31c:	andeq	r1, r1, #3
     320:	clzeq	r1, r1
     324:	lsreq	r1, r1, #5
     328:	add	r1, r7, r1
     32c:	cmp	r1, lr
     330:	bge	35c <dmy_to_mjd2000+0x90>
     334:	movw	r1, #0
     338:	str	r2, [sp]
     33c:	mvn	r0, #103	; 0x67
     340:	mov	r2, lr
     344:	mov	r3, ip
     348:	movt	r1, #0
     34c:	bl	0 <coda_set_error>
     350:	mvn	r0, #0
     354:	sub	sp, fp, #28
     358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     35c:	add	r6, r2, r2, lsr #31
     360:	movw	r1, #365	; 0x16d
     364:	cmp	ip, #2
     368:	mul	r5, r6, r1
     36c:	asr	r1, r6, #31
     370:	add	r1, r6, r1, lsr #30
     374:	asr	sl, r1, #2
     378:	bic	r1, r1, #3
     37c:	sub	r1, r6, r1
     380:	asr	r9, r1, #31
     384:	mov	r1, #0
     388:	bgt	398 <dmy_to_mjd2000+0xcc>
     38c:	tst	r6, #3
     390:	mov	r1, #0
     394:	mvneq	r1, #0
     398:	add	r4, lr, r5
     39c:	add	r4, r4, sl
     3a0:	add	r4, r4, r9
     3a4:	add	r4, r4, r0
     3a8:	add	r1, r4, r1
     3ac:	movw	r4, #17122	; 0x42e2
     3b0:	movt	r4, #26
     3b4:	add	r1, r1, r4
     3b8:	movw	r4, #1925	; 0x785
     3bc:	movt	r4, #36	; 0x24
     3c0:	cmp	r1, r4
     3c4:	ble	50c <dmy_to_mjd2000+0x240>
     3c8:	str	r5, [sp, #16]
     3cc:	movw	r5, #34079	; 0x851f
     3d0:	mov	r1, #0
     3d4:	cmp	ip, #2
     3d8:	movt	r5, #20971	; 0x51eb
     3dc:	bne	428 <dmy_to_mjd2000+0x15c>
     3e0:	smmul	r1, r6, r5
     3e4:	mov	r8, #100	; 0x64
     3e8:	asr	r4, r1, #5
     3ec:	add	r4, r4, r1, lsr #31
     3f0:	mls	r4, r4, r8, r6
     3f4:	clz	r4, r4
     3f8:	lsr	r8, r4, #5
     3fc:	and	r4, r6, #3
     400:	clz	r4, r4
     404:	lsr	r4, r4, #5
     408:	eor	r8, r4, r8
     40c:	asr	r4, r1, #7
     410:	add	r1, r4, r1, lsr #31
     414:	mov	r4, #400	; 0x190
     418:	mls	r1, r1, r4, r6
     41c:	clz	r1, r1
     420:	lsr	r1, r1, #5
     424:	eor	r1, r1, r8
     428:	add	r1, r7, r1
     42c:	cmp	r1, lr
     430:	blt	334 <dmy_to_mjd2000+0x68>
     434:	movw	r1, #31457	; 0x7ae1
     438:	mov	r8, #0
     43c:	cmp	ip, #2
     440:	movt	r1, #44564	; 0xae14
     444:	smmul	r1, r6, r1
     448:	asr	r4, r1, #5
     44c:	add	r1, r4, r1, lsr #31
     450:	str	r1, [sp, #12]
     454:	smmul	r1, r6, r5
     458:	asr	r4, r1, #7
     45c:	add	r7, r4, r1, lsr #31
     460:	mov	r4, #400	; 0x190
     464:	mls	r4, r7, r4, r6
     468:	mov	r5, r7
     46c:	asr	r7, r4, #31
     470:	str	r7, [sp, #8]
     474:	asr	r7, r1, #5
     478:	add	r1, r7, r1, lsr #31
     47c:	mov	r7, #100	; 0x64
     480:	mls	r1, r1, r7, r6
     484:	lsr	r7, r1, #31
     488:	bgt	4b4 <dmy_to_mjd2000+0x1e8>
     48c:	and	r6, r6, #3
     490:	cmp	r1, #0
     494:	mov	r1, #0
     498:	clz	r6, r6
     49c:	lsr	r6, r6, #5
     4a0:	subeq	r6, r6, #1
     4a4:	cmp	r4, #0
     4a8:	mvneq	r1, #0
     4ac:	subs	r8, r6, r1
     4b0:	mvnne	r8, #0
     4b4:	ldr	r4, [sp, #12]
     4b8:	add	r1, lr, r5
     4bc:	add	r1, r1, r4
     4c0:	ldr	r4, [sp, #16]
     4c4:	add	r1, r1, sl
     4c8:	add	r1, r1, r4
     4cc:	ldr	r4, [sp, #8]
     4d0:	add	r1, r1, r4
     4d4:	add	r1, r1, r7
     4d8:	add	r1, r1, r9
     4dc:	add	r0, r1, r0
     4e0:	movw	r1, #10273	; 0x2821
     4e4:	movt	r1, #65527	; 0xfff7
     4e8:	add	r0, r0, r8
     4ec:	add	r0, r0, r1
     4f0:	movw	r1, #60610	; 0xecc2
     4f4:	cmp	r0, r1
     4f8:	ble	334 <dmy_to_mjd2000+0x68>
     4fc:	movw	r1, #45674	; 0xb26a
     500:	movt	r1, #65533	; 0xfffd
     504:	add	r0, r0, r1
     508:	b	518 <dmy_to_mjd2000+0x24c>
     50c:	movw	r0, #38823	; 0x97a7
     510:	movt	r0, #65498	; 0xffda
     514:	add	r0, r1, r0
     518:	str	r0, [r3]
     51c:	mov	r0, #0
     520:	sub	sp, fp, #28
     524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000528 <mjd2000_to_dmy>:
     528:	push	{r4, r5, r6, sl, fp, lr}
     52c:	add	fp, sp, #16
     530:	movw	r5, #40748	; 0x9f2c
     534:	movt	r5, #65534	; 0xfffe
     538:	cmp	r0, r5
     53c:	ble	5d0 <mjd2000_to_dmy+0xa8>
     540:	movw	r6, #1725	; 0x6bd
     544:	mov	r4, #400	; 0x190
     548:	movw	ip, #36524	; 0x8eac
     54c:	movt	r6, #14699	; 0x396b
     550:	smmul	r6, r0, r6
     554:	asr	r5, r6, #15
     558:	add	r6, r5, r6, lsr #31
     55c:	movw	r5, #15025	; 0x3ab1
     560:	movt	r5, #2
     564:	mls	r0, r6, r5, r0
     568:	add	r6, r6, r0, asr #31
     56c:	mul	lr, r6, r4
     570:	and	r6, r5, r0, asr #31
     574:	add	r0, r6, r0
     578:	add	r4, lr, #2000	; 0x7d0
     57c:	cmp	r0, ip
     580:	str	r4, [r3]
     584:	bgt	694 <mjd2000_to_dmy+0x16c>
     588:	movw	r6, #45171	; 0xb073
     58c:	movw	ip, #365	; 0x16d
     590:	movt	r6, #5741	; 0x166d
     594:	smmul	r6, r0, r6
     598:	asr	r5, r6, #7
     59c:	add	r6, r5, r6, lsr #31
     5a0:	movw	r5, #1461	; 0x5b5
     5a4:	mls	r0, r6, r5, r0
     5a8:	add	r6, r6, r0, asr #31
     5ac:	add	r4, r4, r6, lsl #2
     5b0:	and	r6, r5, r0, asr #31
     5b4:	add	r0, r6, r0
     5b8:	str	r4, [r3]
     5bc:	cmp	r0, ip
     5c0:	bgt	838 <mjd2000_to_dmy+0x310>
     5c4:	cmn	r0, #1
     5c8:	bgt	810 <mjd2000_to_dmy+0x2e8>
     5cc:	b	a6c <mjd2000_to_dmy+0x544>
     5d0:	movw	r5, #45171	; 0xb073
     5d4:	sub	r0, r0, #13
     5d8:	movw	ip, #1461	; 0x5b5
     5dc:	movt	r5, #5741	; 0x166d
     5e0:	smmul	r5, r0, r5
     5e4:	asr	r4, r5, #7
     5e8:	add	r5, r4, r5, lsr #31
     5ec:	mls	r0, r5, ip, r0
     5f0:	add	r4, r5, r0, asr #31
     5f4:	mov	r5, #2000	; 0x7d0
     5f8:	add	r5, r5, r4, lsl #2
     5fc:	str	r5, [r3]
     600:	and	r5, ip, r0, asr #31
     604:	add	r6, r5, r0
     608:	movw	r0, #365	; 0x16d
     60c:	cmp	r6, r0
     610:	bgt	740 <mjd2000_to_dmy+0x218>
     614:	cmn	r6, #1
     618:	ble	a6c <mjd2000_to_dmy+0x544>
     61c:	movw	ip, #0
     620:	cmp	r6, #31
     624:	mov	lr, #1
     628:	movt	ip, #0
     62c:	movge	lr, #2
     630:	cmpge	r6, #60	; 0x3c
     634:	blt	7b0 <mjd2000_to_dmy+0x288>
     638:	cmp	r6, #91	; 0x5b
     63c:	mov	lr, #3
     640:	movge	lr, #4
     644:	cmpge	r6, #121	; 0x79
     648:	blt	7b0 <mjd2000_to_dmy+0x288>
     64c:	cmp	r6, #152	; 0x98
     650:	mov	lr, #5
     654:	movge	lr, #6
     658:	cmpge	r6, #182	; 0xb6
     65c:	blt	7b0 <mjd2000_to_dmy+0x288>
     660:	cmp	r6, #213	; 0xd5
     664:	mov	lr, #7
     668:	movge	lr, #8
     66c:	cmpge	r6, #244	; 0xf4
     670:	blt	7b0 <mjd2000_to_dmy+0x288>
     674:	movw	r0, #274	; 0x112
     678:	mov	lr, #9
     67c:	cmp	r6, r0
     680:	movge	lr, #10
     684:	cmpge	r6, #304	; 0x130
     688:	ble	7b0 <mjd2000_to_dmy+0x288>
     68c:	movw	r0, #335	; 0x14f
     690:	b	984 <mjd2000_to_dmy+0x45c>
     694:	movw	r4, #36525	; 0x8ead
     698:	movw	r6, #2100	; 0x834
     69c:	sub	r0, r0, r4
     6a0:	movw	r4, #33275	; 0x81fb
     6a4:	movt	r4, #58796	; 0xe5ac
     6a8:	smmla	r4, r0, r4, r0
     6ac:	asr	r5, r4, #15
     6b0:	add	r4, r5, r4, lsr #31
     6b4:	mls	r5, r4, ip, r0
     6b8:	add	r0, r4, r5, asr #31
     6bc:	mov	r4, #100	; 0x64
     6c0:	mla	r0, r0, r4, lr
     6c4:	add	r0, r0, r6
     6c8:	and	r6, ip, r5, asr #31
     6cc:	str	r0, [r3]
     6d0:	add	r4, r6, r5
     6d4:	movw	r6, #1459	; 0x5b3
     6d8:	cmp	r4, r6
     6dc:	bgt	7c8 <mjd2000_to_dmy+0x2a0>
     6e0:	movw	r5, #62305	; 0xf361
     6e4:	uxth	ip, r4
     6e8:	movt	r5, #26393	; 0x6719
     6ec:	umull	r5, r6, ip, r5
     6f0:	sub	r5, ip, r6
     6f4:	mov	ip, #1
     6f8:	add	r6, r6, r5, lsr #1
     6fc:	add	r0, r0, r6, lsr #8
     700:	str	r0, [r3]
     704:	lsr	r0, r6, #8
     708:	movw	r6, #365	; 0x16d
     70c:	mls	lr, r0, r6, r4
     710:	uxth	r0, lr
     714:	cmp	r0, #31
     718:	bcc	730 <mjd2000_to_dmy+0x208>
     71c:	cmp	r0, #59	; 0x3b
     720:	mov	ip, #2
     724:	movcs	ip, #3
     728:	cmpcs	r0, #90	; 0x5a
     72c:	bcs	9f0 <mjd2000_to_dmy+0x4c8>
     730:	add	r0, lr, #1
     734:	str	ip, [r2]
     738:	uxth	r0, r0
     73c:	b	8a0 <mjd2000_to_dmy+0x378>
     740:	movw	r5, #366	; 0x16e
     744:	lsl	ip, r4, #2
     748:	sub	r6, r6, r5
     74c:	movw	r5, #63921	; 0xf9b1
     750:	movt	r5, #45964	; 0xb38c
     754:	smmla	r5, r6, r5, r6
     758:	asr	r4, r5, #8
     75c:	add	r5, r4, r5, lsr #31
     760:	movw	r4, #2001	; 0x7d1
     764:	mls	r6, r5, r0, r6
     768:	add	r5, ip, r5
     76c:	and	r0, r0, r6, asr #31
     770:	add	r5, r5, r6, asr #31
     774:	add	r6, r0, r6
     778:	add	r5, r5, r4
     77c:	cmn	r6, #1
     780:	str	r5, [r3]
     784:	ble	a4c <mjd2000_to_dmy+0x524>
     788:	movw	ip, #0
     78c:	mov	lr, #1
     790:	cmp	r6, #31
     794:	movt	ip, #0
     798:	blt	7b0 <mjd2000_to_dmy+0x288>
     79c:	cmp	r6, #59	; 0x3b
     7a0:	mov	lr, #2
     7a4:	movge	lr, #3
     7a8:	cmpge	r6, #90	; 0x5a
     7ac:	bge	938 <mjd2000_to_dmy+0x410>
     7b0:	add	r0, ip, lr, lsl #2
     7b4:	str	lr, [r2]
     7b8:	ldr	r0, [r0, #-4]
     7bc:	sub	r0, r6, r0
     7c0:	add	r0, r0, #1
     7c4:	b	8b4 <mjd2000_to_dmy+0x38c>
     7c8:	movw	r5, #45171	; 0xb073
     7cc:	movw	r6, #1460	; 0x5b4
     7d0:	movw	ip, #1461	; 0x5b5
     7d4:	movt	r5, #5741	; 0x166d
     7d8:	sub	r6, r4, r6
     7dc:	smmul	r5, r6, r5
     7e0:	asr	r4, r5, #7
     7e4:	add	r5, r4, r5, lsr #31
     7e8:	mls	r6, r5, ip, r6
     7ec:	add	r5, r5, r6, asr #31
     7f0:	add	r0, r0, r5, lsl #2
     7f4:	add	r4, r0, #4
     7f8:	and	r0, ip, r6, asr #31
     7fc:	movw	ip, #365	; 0x16d
     800:	str	r4, [r3]
     804:	add	r0, r0, r6
     808:	cmp	r0, ip
     80c:	bgt	838 <mjd2000_to_dmy+0x310>
     810:	cmp	r0, #31
     814:	mov	ip, #1
     818:	movge	ip, #2
     81c:	cmpge	r0, #60	; 0x3c
     820:	bge	8d0 <mjd2000_to_dmy+0x3a8>
     824:	str	ip, [r2]
     828:	movw	r2, #0
     82c:	add	r0, r0, #1
     830:	movt	r2, #0
     834:	b	8a8 <mjd2000_to_dmy+0x380>
     838:	movw	r6, #366	; 0x16e
     83c:	sub	r0, r0, r6
     840:	movw	r6, #63921	; 0xf9b1
     844:	movt	r6, #45964	; 0xb38c
     848:	smmla	r6, r0, r6, r0
     84c:	asr	r5, r6, #8
     850:	add	r6, r5, r6, lsr #31
     854:	orr	r5, r4, #1
     858:	mls	r0, r6, ip, r0
     85c:	add	r6, r5, r6
     860:	add	r6, r6, r0, asr #31
     864:	str	r6, [r3]
     868:	and	r6, ip, r0, asr #31
     86c:	add	r0, r6, r0
     870:	cmn	r0, #1
     874:	ble	a4c <mjd2000_to_dmy+0x524>
     878:	mov	ip, #1
     87c:	cmp	r0, #31
     880:	blt	898 <mjd2000_to_dmy+0x370>
     884:	cmp	r0, #59	; 0x3b
     888:	mov	ip, #2
     88c:	movge	ip, #3
     890:	cmpge	r0, #90	; 0x5a
     894:	bge	994 <mjd2000_to_dmy+0x46c>
     898:	add	r0, r0, #1
     89c:	str	ip, [r2]
     8a0:	movw	r2, #0
     8a4:	movt	r2, #0
     8a8:	add	r2, r2, ip, lsl #2
     8ac:	ldr	r2, [r2, #-4]
     8b0:	sub	r0, r0, r2
     8b4:	str	r0, [r1]
     8b8:	ldr	r0, [r3]
     8bc:	cmp	r0, #0
     8c0:	suble	r0, r0, #1
     8c4:	strle	r0, [r3]
     8c8:	mov	r0, #0
     8cc:	pop	{r4, r5, r6, sl, fp, pc}
     8d0:	cmp	r0, #91	; 0x5b
     8d4:	mov	ip, #3
     8d8:	movge	ip, #4
     8dc:	cmpge	r0, #121	; 0x79
     8e0:	blt	824 <mjd2000_to_dmy+0x2fc>
     8e4:	cmp	r0, #152	; 0x98
     8e8:	mov	ip, #5
     8ec:	movge	ip, #6
     8f0:	cmpge	r0, #182	; 0xb6
     8f4:	blt	824 <mjd2000_to_dmy+0x2fc>
     8f8:	cmp	r0, #213	; 0xd5
     8fc:	mov	ip, #7
     900:	movge	ip, #8
     904:	cmpge	r0, #244	; 0xf4
     908:	blt	824 <mjd2000_to_dmy+0x2fc>
     90c:	movw	r6, #274	; 0x112
     910:	mov	ip, #9
     914:	cmp	r0, r6
     918:	movge	ip, #10
     91c:	cmpge	r0, #304	; 0x130
     920:	ble	824 <mjd2000_to_dmy+0x2fc>
     924:	movw	r6, #335	; 0x14f
     928:	mov	ip, #12
     92c:	cmp	r0, r6
     930:	movwlt	ip, #11
     934:	b	824 <mjd2000_to_dmy+0x2fc>
     938:	cmp	r6, #120	; 0x78
     93c:	mov	lr, #4
     940:	movge	lr, #5
     944:	cmpge	r6, #151	; 0x97
     948:	blt	7b0 <mjd2000_to_dmy+0x288>
     94c:	cmp	r6, #181	; 0xb5
     950:	mov	lr, #6
     954:	movge	lr, #7
     958:	cmpge	r6, #212	; 0xd4
     95c:	blt	7b0 <mjd2000_to_dmy+0x288>
     960:	cmp	r6, #243	; 0xf3
     964:	mov	lr, #8
     968:	movge	lr, #9
     96c:	cmpge	r6, #272	; 0x110
     970:	ble	7b0 <mjd2000_to_dmy+0x288>
     974:	mov	lr, #10
     978:	cmp	r6, #304	; 0x130
     97c:	blt	7b0 <mjd2000_to_dmy+0x288>
     980:	movw	r0, #334	; 0x14e
     984:	cmp	r6, r0
     988:	mov	lr, #12
     98c:	movwlt	lr, #11
     990:	b	7b0 <mjd2000_to_dmy+0x288>
     994:	cmp	r0, #120	; 0x78
     998:	mov	ip, #4
     99c:	movge	ip, #5
     9a0:	cmpge	r0, #151	; 0x97
     9a4:	blt	898 <mjd2000_to_dmy+0x370>
     9a8:	cmp	r0, #181	; 0xb5
     9ac:	mov	ip, #6
     9b0:	movge	ip, #7
     9b4:	cmpge	r0, #212	; 0xd4
     9b8:	blt	898 <mjd2000_to_dmy+0x370>
     9bc:	cmp	r0, #243	; 0xf3
     9c0:	mov	ip, #8
     9c4:	movge	ip, #9
     9c8:	cmpge	r0, #272	; 0x110
     9cc:	ble	898 <mjd2000_to_dmy+0x370>
     9d0:	mov	ip, #10
     9d4:	cmp	r0, #304	; 0x130
     9d8:	blt	898 <mjd2000_to_dmy+0x370>
     9dc:	movw	r6, #334	; 0x14e
     9e0:	mov	ip, #12
     9e4:	cmp	r0, r6
     9e8:	movwlt	ip, #11
     9ec:	b	898 <mjd2000_to_dmy+0x370>
     9f0:	cmp	r0, #120	; 0x78
     9f4:	mov	ip, #4
     9f8:	movcs	ip, #5
     9fc:	cmpcs	r0, #151	; 0x97
     a00:	bcc	730 <mjd2000_to_dmy+0x208>
     a04:	cmp	r0, #181	; 0xb5
     a08:	mov	ip, #6
     a0c:	movcs	ip, #7
     a10:	cmpcs	r0, #212	; 0xd4
     a14:	bcc	730 <mjd2000_to_dmy+0x208>
     a18:	cmp	r0, #243	; 0xf3
     a1c:	mov	ip, #8
     a20:	movcs	ip, #9
     a24:	cmpcs	r0, #272	; 0x110
     a28:	bls	730 <mjd2000_to_dmy+0x208>
     a2c:	mov	ip, #10
     a30:	cmp	r0, #304	; 0x130
     a34:	bcc	730 <mjd2000_to_dmy+0x208>
     a38:	lsr	r0, r0, #1
     a3c:	mov	ip, #12
     a40:	cmp	r0, #167	; 0xa7
     a44:	movwcc	ip, #11
     a48:	b	730 <mjd2000_to_dmy+0x208>
     a4c:	movw	r0, #0
     a50:	movw	r1, #0
     a54:	movw	r3, #0
     a58:	movw	r2, #377	; 0x179
     a5c:	movt	r0, #0
     a60:	movt	r1, #0
     a64:	movt	r3, #0
     a68:	bl	0 <__assert_fail>
     a6c:	movw	r0, #0
     a70:	movw	r1, #0
     a74:	movw	r3, #0
     a78:	movw	r2, #358	; 0x166
     a7c:	movt	r0, #0
     a80:	movt	r1, #0
     a84:	movt	r3, #0
     a88:	bl	0 <__assert_fail>

00000a8c <coda_leap_second_table_done>:
     a8c:	push	{r4, sl, fp, lr}
     a90:	add	fp, sp, #8
     a94:	ldr	r4, [pc, #48]	; acc <coda_leap_second_table_done+0x40>
     a98:	bl	0 <__aeabi_read_tp>
     a9c:	ldr	r0, [r0, r4]
     aa0:	cmp	r0, #0
     aa4:	beq	ab8 <coda_leap_second_table_done+0x2c>
     aa8:	bl	0 <free>
     aac:	mov	r1, #0
     ab0:	bl	0 <__aeabi_read_tp>
     ab4:	str	r1, [r0, r4]
     ab8:	ldr	r1, [pc, #16]	; ad0 <coda_leap_second_table_done+0x44>
     abc:	mov	r2, #0
     ac0:	bl	0 <__aeabi_read_tp>
     ac4:	str	r2, [r0, r1]
     ac8:	pop	{r4, sl, fp, pc}
	...
     ad4:	.word	0xe320f000

00000ad8 <coda_leap_second_table_init>:
     ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     adc:	add	fp, sp, #28
     ae0:	sub	sp, sp, #4
     ae4:	vpush	{d8-d10}
     ae8:	sub	sp, sp, #192	; 0xc0
     aec:	ldr	r4, [pc, #988]	; ed0 <coda_leap_second_table_init+0x3f8>
     af0:	bl	0 <__aeabi_read_tp>
     af4:	ldr	r0, [r0, r4]
     af8:	cmp	r0, #0
     afc:	beq	b10 <coda_leap_second_table_init+0x38>
     b00:	bl	0 <free>
     b04:	mov	r1, #0
     b08:	bl	0 <__aeabi_read_tp>
     b0c:	str	r1, [r0, r4]
     b10:	ldr	r1, [pc, #956]	; ed4 <coda_leap_second_table_init+0x3fc>
     b14:	mov	r5, #0
     b18:	bl	0 <__aeabi_read_tp>
     b1c:	str	r5, [r0, r1]
     b20:	movw	r0, #0
     b24:	movt	r0, #0
     b28:	bl	0 <getenv>
     b2c:	cmp	r0, #0
     b30:	beq	cd4 <coda_leap_second_table_init+0x1fc>
     b34:	movw	r1, #0
     b38:	mov	r4, r0
     b3c:	movt	r1, #0
     b40:	bl	0 <fopen>
     b44:	cmp	r0, #0
     b48:	beq	db0 <coda_leap_second_table_init+0x2d8>
     b4c:	vldr	d8, [pc, #652]	; de0 <coda_leap_second_table_init+0x308>
     b50:	vldr	d9, [pc, #656]	; de8 <coda_leap_second_table_init+0x310>
     b54:	vldr	d10, [pc, #660]	; df0 <coda_leap_second_table_init+0x318>
     b58:	mov	r5, r0
     b5c:	add	r0, sp, #77	; 0x4d
     b60:	mov	r8, #0
     b64:	add	r6, sp, #88	; 0x58
     b68:	add	r7, sp, #84	; 0x54
     b6c:	mov	r9, #0
     b70:	add	r1, r0, #2
     b74:	add	r0, r0, #1
     b78:	str	r1, [sp, #36]	; 0x24
     b7c:	str	r0, [sp, #32]
     b80:	b	bac <coda_leap_second_table_init+0xd4>
     b84:	mov	r0, r5
     b88:	bl	0 <fclose>
     b8c:	movw	r1, #0
     b90:	mvn	r0, #21
     b94:	mov	r2, r4
     b98:	movt	r1, #0
     b9c:	bl	0 <coda_set_error>
     ba0:	mov	sl, #1
     ba4:	cmp	sl, #0
     ba8:	bne	cbc <coda_leap_second_table_init+0x1e4>
     bac:	movw	r1, #0
     bb0:	mov	r0, r5
     bb4:	mov	r2, r6
     bb8:	mov	r3, r7
     bbc:	str	r8, [sp, #84]	; 0x54
     bc0:	movt	r1, #0
     bc4:	bl	0 <__isoc99_fscanf>
     bc8:	ldr	r0, [sp, #84]	; 0x54
     bcc:	cmp	r0, #1
     bd0:	blt	ca0 <coda_leap_second_table_init+0x1c8>
     bd4:	cmp	r0, #80	; 0x50
     bd8:	bne	b84 <coda_leap_second_table_init+0xac>
     bdc:	movw	r1, #0
     be0:	mov	r0, r5
     be4:	strb	r8, [sp, #168]	; 0xa8
     be8:	movt	r1, #0
     bec:	bl	0 <__isoc99_fscanf>
     bf0:	ldr	r0, [sp, #32]
     bf4:	movw	r1, #0
     bf8:	add	r2, sp, #80	; 0x50
     bfc:	add	r3, sp, #77	; 0x4d
     c00:	str	r7, [sp, #28]
     c04:	movt	r1, #0
     c08:	str	r0, [sp]
     c0c:	ldr	r0, [sp, #36]	; 0x24
     c10:	str	r0, [sp, #4]
     c14:	add	r0, sp, #72	; 0x48
     c18:	str	r0, [sp, #8]
     c1c:	add	r0, sp, #64	; 0x40
     c20:	str	r0, [sp, #12]
     c24:	add	r0, sp, #56	; 0x38
     c28:	str	r0, [sp, #16]
     c2c:	add	r0, sp, #48	; 0x30
     c30:	str	r0, [sp, #20]
     c34:	add	r0, sp, #40	; 0x28
     c38:	str	r0, [sp, #24]
     c3c:	mov	r0, r6
     c40:	bl	0 <__isoc99_sscanf>
     c44:	cmp	r0, #9
     c48:	ldrne	r0, [sp, #84]	; 0x54
     c4c:	cmpne	r0, #80	; 0x50
     c50:	bne	b84 <coda_leap_second_table_init+0xac>
     c54:	vldr	d16, [sp, #64]	; 0x40
     c58:	mov	sl, #0
     c5c:	vcmpe.f64	d16, d8
     c60:	vmrs	APSR_nzcv, fpscr
     c64:	ble	ba4 <coda_leap_second_table_init+0xcc>
     c68:	add	r0, r9, #10
     c6c:	vadd.f64	d16, d16, d9
     c70:	vmov	s0, r0
     c74:	vcvt.f64.s32	d0, s0
     c78:	vmla.f64	d0, d16, d10
     c7c:	bl	ed8 <register_leap_second>
     c80:	cmp	r0, #0
     c84:	beq	cb0 <coda_leap_second_table_init+0x1d8>
     c88:	mov	r0, r5
     c8c:	bl	0 <fclose>
     c90:	mov	sl, #1
     c94:	cmp	sl, #0
     c98:	beq	bac <coda_leap_second_table_init+0xd4>
     c9c:	b	cbc <coda_leap_second_table_init+0x1e4>
     ca0:	mov	sl, #2
     ca4:	cmp	sl, #0
     ca8:	beq	bac <coda_leap_second_table_init+0xd4>
     cac:	b	cbc <coda_leap_second_table_init+0x1e4>
     cb0:	add	r9, r9, #1
     cb4:	cmp	sl, #0
     cb8:	beq	bac <coda_leap_second_table_init+0xd4>
     cbc:	cmp	sl, #2
     cc0:	bne	dc4 <coda_leap_second_table_init+0x2ec>
     cc4:	mov	r0, r5
     cc8:	bl	0 <fclose>
     ccc:	mov	r5, #0
     cd0:	b	dc8 <coda_leap_second_table_init+0x2f0>
     cd4:	vldr	d0, [pc, #284]	; df8 <coda_leap_second_table_init+0x320>
     cd8:	bl	ed8 <register_leap_second>
     cdc:	vldr	d0, [pc, #284]	; e00 <coda_leap_second_table_init+0x328>
     ce0:	bl	ed8 <register_leap_second>
     ce4:	vldr	d0, [pc, #284]	; e08 <coda_leap_second_table_init+0x330>
     ce8:	bl	ed8 <register_leap_second>
     cec:	vldr	d0, [pc, #284]	; e10 <coda_leap_second_table_init+0x338>
     cf0:	bl	ed8 <register_leap_second>
     cf4:	vldr	d0, [pc, #284]	; e18 <coda_leap_second_table_init+0x340>
     cf8:	bl	ed8 <register_leap_second>
     cfc:	vldr	d0, [pc, #284]	; e20 <coda_leap_second_table_init+0x348>
     d00:	bl	ed8 <register_leap_second>
     d04:	vldr	d0, [pc, #284]	; e28 <coda_leap_second_table_init+0x350>
     d08:	bl	ed8 <register_leap_second>
     d0c:	vldr	d0, [pc, #284]	; e30 <coda_leap_second_table_init+0x358>
     d10:	bl	ed8 <register_leap_second>
     d14:	vldr	d0, [pc, #284]	; e38 <coda_leap_second_table_init+0x360>
     d18:	bl	ed8 <register_leap_second>
     d1c:	vldr	d0, [pc, #284]	; e40 <coda_leap_second_table_init+0x368>
     d20:	bl	ed8 <register_leap_second>
     d24:	vldr	d0, [pc, #284]	; e48 <coda_leap_second_table_init+0x370>
     d28:	bl	ed8 <register_leap_second>
     d2c:	vldr	d0, [pc, #284]	; e50 <coda_leap_second_table_init+0x378>
     d30:	bl	ed8 <register_leap_second>
     d34:	vldr	d0, [pc, #284]	; e58 <coda_leap_second_table_init+0x380>
     d38:	bl	ed8 <register_leap_second>
     d3c:	vldr	d0, [pc, #284]	; e60 <coda_leap_second_table_init+0x388>
     d40:	bl	ed8 <register_leap_second>
     d44:	vldr	d0, [pc, #284]	; e68 <coda_leap_second_table_init+0x390>
     d48:	bl	ed8 <register_leap_second>
     d4c:	vldr	d0, [pc, #284]	; e70 <coda_leap_second_table_init+0x398>
     d50:	bl	ed8 <register_leap_second>
     d54:	vldr	d0, [pc, #284]	; e78 <coda_leap_second_table_init+0x3a0>
     d58:	bl	ed8 <register_leap_second>
     d5c:	vldr	d0, [pc, #284]	; e80 <coda_leap_second_table_init+0x3a8>
     d60:	bl	ed8 <register_leap_second>
     d64:	vldr	d0, [pc, #284]	; e88 <coda_leap_second_table_init+0x3b0>
     d68:	bl	ed8 <register_leap_second>
     d6c:	vldr	d0, [pc, #284]	; e90 <coda_leap_second_table_init+0x3b8>
     d70:	bl	ed8 <register_leap_second>
     d74:	vldr	d0, [pc, #284]	; e98 <coda_leap_second_table_init+0x3c0>
     d78:	bl	ed8 <register_leap_second>
     d7c:	vldr	d0, [pc, #284]	; ea0 <coda_leap_second_table_init+0x3c8>
     d80:	bl	ed8 <register_leap_second>
     d84:	vldr	d0, [pc, #284]	; ea8 <coda_leap_second_table_init+0x3d0>
     d88:	bl	ed8 <register_leap_second>
     d8c:	vldr	d0, [pc, #284]	; eb0 <coda_leap_second_table_init+0x3d8>
     d90:	bl	ed8 <register_leap_second>
     d94:	vldr	d0, [pc, #284]	; eb8 <coda_leap_second_table_init+0x3e0>
     d98:	bl	ed8 <register_leap_second>
     d9c:	vldr	d0, [pc, #284]	; ec0 <coda_leap_second_table_init+0x3e8>
     da0:	bl	ed8 <register_leap_second>
     da4:	vldr	d0, [pc, #284]	; ec8 <coda_leap_second_table_init+0x3f0>
     da8:	bl	ed8 <register_leap_second>
     dac:	b	dc8 <coda_leap_second_table_init+0x2f0>
     db0:	movw	r1, #0
     db4:	mvn	r0, #20
     db8:	mov	r2, r4
     dbc:	movt	r1, #0
     dc0:	bl	0 <coda_set_error>
     dc4:	mvn	r5, #0
     dc8:	mov	r0, r5
     dcc:	sub	sp, fp, #56	; 0x38
     dd0:	vpop	{d8-d10}
     dd4:	add	sp, sp, #4
     dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ddc:	nop	{0}
     de0:	.word	0xc0000000
     de4:	.word	0x4142a032
     de8:	.word	0x40000000
     dec:	.word	0xc142b42c
     df0:	.word	0x00000000
     df4:	.word	0x40f51800
     df8:	.word	0xbb000000
     dfc:	.word	0xc1c9dd75
     e00:	.word	0xba800000
     e04:	.word	0xc1c9642b
     e08:	.word	0xfa000000
     e0c:	.word	0xc1c87391
     e10:	.word	0x39800000
     e14:	.word	0xc1c782f8
     e18:	.word	0x79000000
     e1c:	.word	0xc1c6925e
     e20:	.word	0xf8800000
     e24:	.word	0xc1c5a11b
     e28:	.word	0x38000000
     e2c:	.word	0xc1c4b082
     e30:	.word	0x77800000
     e34:	.word	0xc1c3bfe8
     e38:	.word	0xb7000000
     e3c:	.word	0xc1c2cf4e
     e40:	.word	0x76800000
     e44:	.word	0xc1c166bc
     e48:	.word	0xb6000000
     e4c:	.word	0xc1c07622
     e50:	.word	0xeb000000
     e54:	.word	0xc1bf0b11
     e58:	.word	0x6a000000
     e5c:	.word	0xc1bb4759
     e60:	.word	0x69000000
     e64:	.word	0xc1b6925e
     e68:	.word	0xe8000000
     e6c:	.word	0xc1b2cea5
     e70:	.word	0x67000000
     e74:	.word	0xc1b0ed72
     e78:	.word	0xcc000000
     e7c:	.word	0xc1ac389b
     e80:	.word	0xca000000
     e84:	.word	0xc1a87634
     e88:	.word	0xc8000000
     e8c:	.word	0xc1a4b3cd
     e90:	.word	0x8c000000
     e94:	.word	0xc19e187d
     e98:	.word	0x88000000
     e9c:	.word	0xc192d3eb
     ea0:	.word	0x10000000
     ea4:	.word	0xc17e1336
     ea8:	.word	0x40000000
     eac:	.word	0x41a693b0
     eb0:	.word	0x21000000
     eb4:	.word	0x41b0eec4
     eb8:	.word	0xa2000000
     ebc:	.word	0x41b7824f
     ec0:	.word	0x23000000
     ec4:	.word	0x41bd25ea
     ec8:	.word	0x24000000
     ecc:	.word	0x41bffb03
	...

00000ed8 <register_leap_second>:
     ed8:	push	{r4, r5, r6, sl, fp, lr}
     edc:	add	fp, sp, #16
     ee0:	vpush	{d8}
     ee4:	sub	sp, sp, #8
     ee8:	ldr	r4, [pc, #260]	; ff4 <register_leap_second+0x11c>
     eec:	vmov.f64	d8, d0
     ef0:	bl	0 <__aeabi_read_tp>
     ef4:	ldr	r1, [r0, r4]
     ef8:	tst	r1, #15
     efc:	bne	f30 <register_leap_second+0x58>
     f00:	ldr	r5, [pc, #240]	; ff8 <register_leap_second+0x120>
     f04:	bl	0 <__aeabi_read_tp>
     f08:	ldr	r0, [r0, r5]
     f0c:	mov	r6, #128	; 0x80
     f10:	add	r1, r6, r1, lsl #3
     f14:	bl	0 <realloc>
     f18:	cmp	r0, #0
     f1c:	beq	fc0 <register_leap_second+0xe8>
     f20:	mov	r1, r0
     f24:	bl	0 <__aeabi_read_tp>
     f28:	str	r1, [r0, r5]
     f2c:	ldr	r1, [r0, r4]
     f30:	ldr	r2, [pc, #192]	; ff8 <register_leap_second+0x120>
     f34:	bl	0 <__aeabi_read_tp>
     f38:	ldr	r0, [r0, r2]
     f3c:	cmp	r1, #1
     f40:	blt	f98 <register_leap_second+0xc0>
     f44:	add	r2, r0, r1, lsl #3
     f48:	vldr	d16, [r2, #-8]
     f4c:	vcmpe.f64	d16, d8
     f50:	vmrs	APSR_nzcv, fpscr
     f54:	blt	f98 <register_leap_second+0xc0>
     f58:	mov	r2, r0
     f5c:	mov	r3, r1
     f60:	b	f78 <register_leap_second+0xa0>
     f64:	vstr	d8, [r2]
     f68:	vmov.f64	d8, d16
     f6c:	add	r2, r2, #8
     f70:	subs	r3, r3, #1
     f74:	beq	f98 <register_leap_second+0xc0>
     f78:	vldr	d16, [r2]
     f7c:	vcmpe.f64	d8, d16
     f80:	vmrs	APSR_nzcv, fpscr
     f84:	bhi	f6c <register_leap_second+0x94>
     f88:	vcmp.f64	d8, d16
     f8c:	vmrs	APSR_nzcv, fpscr
     f90:	bne	f64 <register_leap_second+0x8c>
     f94:	b	fac <register_leap_second+0xd4>
     f98:	add	r0, r0, r1, lsl #3
     f9c:	add	r1, r1, #1
     fa0:	vstr	d8, [r0]
     fa4:	bl	0 <__aeabi_read_tp>
     fa8:	str	r1, [r0, r4]
     fac:	mov	r4, #0
     fb0:	mov	r0, r4
     fb4:	sub	sp, fp, #24
     fb8:	vpop	{d8}
     fbc:	pop	{r4, r5, r6, sl, fp, pc}
     fc0:	bl	0 <__aeabi_read_tp>
     fc4:	ldr	r0, [r0, r4]
     fc8:	movw	r1, #609	; 0x261
     fcc:	movw	r3, #0
     fd0:	mvn	r4, #0
     fd4:	str	r1, [sp]
     fd8:	movw	r1, #0
     fdc:	movt	r3, #0
     fe0:	movt	r1, #0
     fe4:	add	r2, r6, r0, lsl #3
     fe8:	mvn	r0, #0
     fec:	bl	0 <coda_set_error>
     ff0:	b	fb0 <register_leap_second+0xd8>
	...
     ffc:	.word	0xe320f000

00001000 <coda_time_double_to_parts>:
    1000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1004:	add	fp, sp, #28
    1008:	sub	sp, sp, #4
    100c:	vpush	{d8-d10}
    1010:	sub	sp, sp, #16
    1014:	cmp	r0, #0
    1018:	movne	r6, r1
    101c:	cmpne	r1, #0
    1020:	beq	104c <coda_time_double_to_parts+0x4c>
    1024:	cmp	r2, #0
    1028:	mov	r5, r2
    102c:	movne	r8, r3
    1030:	cmpne	r3, #0
    1034:	beq	104c <coda_time_double_to_parts+0x4c>
    1038:	ldr	sl, [fp, #8]
    103c:	cmp	sl, #0
    1040:	ldrne	r9, [fp, #12]
    1044:	cmpne	r9, #0
    1048:	bne	1080 <coda_time_double_to_parts+0x80>
    104c:	movw	r1, #0
    1050:	movw	r2, #0
    1054:	mvn	r0, #99	; 0x63
    1058:	movw	r3, #787	; 0x313
    105c:	movt	r1, #0
    1060:	movt	r2, #0
    1064:	bl	0 <coda_set_error>
    1068:	mvn	r4, #0
    106c:	mov	r0, r4
    1070:	sub	sp, fp, #56	; 0x38
    1074:	vpop	{d8-d10}
    1078:	add	sp, sp, #4
    107c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1080:	mov	r7, r0
    1084:	ldr	r0, [fp, #16]
    1088:	cmp	r0, #0
    108c:	beq	104c <coda_time_double_to_parts+0x4c>
    1090:	vmov.f64	d8, d0
    1094:	bl	0 <coda_isNaN>
    1098:	cmp	r0, #0
    109c:	beq	10ac <coda_time_double_to_parts+0xac>
    10a0:	movw	r1, #0
    10a4:	movt	r1, #0
    10a8:	b	10c4 <coda_time_double_to_parts+0xc4>
    10ac:	vmov.f64	d0, d8
    10b0:	bl	0 <coda_isInf>
    10b4:	cmp	r0, #0
    10b8:	beq	10d0 <coda_time_double_to_parts+0xd0>
    10bc:	movw	r1, #0
    10c0:	movt	r1, #0
    10c4:	mvn	r0, #103	; 0x67
    10c8:	bl	0 <coda_set_error>
    10cc:	b	1068 <coda_time_double_to_parts+0x68>
    10d0:	vldr	d16, [pc, #240]	; 11c8 <coda_time_double_to_parts+0x1c8>
    10d4:	vldr	d17, [pc, #244]	; 11d0 <coda_time_double_to_parts+0x1d0>
    10d8:	add	r1, sp, #12
    10dc:	add	r2, sp, #8
    10e0:	add	r3, sp, #4
    10e4:	vadd.f64	d8, d8, d16
    10e8:	vrintm.f64	d9, d8
    10ec:	vdiv.f64	d16, d9, d17
    10f0:	vcvtm.s32.f64	s20, d16
    10f4:	vmov	r0, s20
    10f8:	bl	528 <mjd2000_to_dmy>
    10fc:	mvn	r4, #0
    1100:	cmp	r0, #0
    1104:	bne	106c <coda_time_double_to_parts+0x6c>
    1108:	vldr	d16, [pc, #200]	; 11d8 <coda_time_double_to_parts+0x1d8>
    110c:	vcvt.f64.s32	d17, s20
    1110:	vmov.f64	d18, d9
    1114:	movw	r0, #20864	; 0x5180
    1118:	movt	r0, #1
    111c:	vmla.f64	d18, d17, d16
    1120:	vcvt.s32.f64	s0, d18
    1124:	vmov	r2, s0
    1128:	cmp	r2, r0
    112c:	bcc	1144 <coda_time_double_to_parts+0x144>
    1130:	movw	r1, #0
    1134:	mvn	r0, #103	; 0x67
    1138:	movt	r1, #0
    113c:	bl	0 <coda_set_error>
    1140:	b	106c <coda_time_double_to_parts+0x6c>
    1144:	ldr	r0, [sp, #4]
    1148:	vldr	d16, [pc, #144]	; 11e0 <coda_time_double_to_parts+0x1e0>
    114c:	vsub.f64	d17, d8, d9
    1150:	mov	r4, #0
    1154:	str	r0, [r7]
    1158:	ldr	r0, [sp, #8]
    115c:	vmul.f64	d16, d17, d16
    1160:	str	r0, [r6]
    1164:	ldr	r0, [sp, #12]
    1168:	vrintm.f64	d16, d16
    116c:	str	r0, [r5]
    1170:	movw	r0, #46021	; 0xb3c5
    1174:	movt	r0, #37282	; 0x91a2
    1178:	umull	r0, r1, r2, r0
    117c:	lsr	r0, r1, #11
    1180:	mov	r1, #3600	; 0xe10
    1184:	str	r0, [r8]
    1188:	mls	r0, r0, r1, r2
    118c:	movw	r2, #34953	; 0x8889
    1190:	movt	r2, #34952	; 0x8888
    1194:	uxth	r1, r0
    1198:	umull	r1, r2, r1, r2
    119c:	lsr	r1, r2, #5
    11a0:	str	r1, [sl]
    11a4:	lsl	r1, r1, #4
    11a8:	sub	r1, r1, r2, lsr #5
    11ac:	sub	r0, r0, r1, lsl #2
    11b0:	uxth	r0, r0
    11b4:	str	r0, [r9]
    11b8:	vcvt.s32.f64	s0, d16
    11bc:	ldr	r0, [fp, #16]
    11c0:	vstr	s0, [r0]
    11c4:	b	106c <coda_time_double_to_parts+0x6c>
    11c8:	.word	0xa0b5ed8d
    11cc:	.word	0x3ea0c6f7
    11d0:	.word	0x00000000
    11d4:	.word	0x40f51800
    11d8:	.word	0x00000000
    11dc:	.word	0xc0f51800
    11e0:	.word	0x00000000
    11e4:	.word	0x412e8480

000011e8 <coda_time_double_to_parts_utc>:
    11e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11ec:	add	fp, sp, #28
    11f0:	sub	sp, sp, #4
    11f4:	vpush	{d8-d11}
    11f8:	sub	sp, sp, #16
    11fc:	cmp	r0, #0
    1200:	movne	r6, r1
    1204:	cmpne	r1, #0
    1208:	beq	1238 <coda_time_double_to_parts_utc+0x50>
    120c:	cmp	r2, #0
    1210:	mov	r5, r2
    1214:	movne	r8, r3
    1218:	cmpne	r3, #0
    121c:	beq	1238 <coda_time_double_to_parts_utc+0x50>
    1220:	ldr	sl, [fp, #8]
    1224:	cmp	sl, #0
    1228:	movne	r7, r0
    122c:	ldrne	r0, [fp, #12]
    1230:	cmpne	r0, #0
    1234:	bne	126c <coda_time_double_to_parts_utc+0x84>
    1238:	movw	r1, #0
    123c:	movw	r2, #0
    1240:	mvn	r0, #99	; 0x63
    1244:	movw	r3, #874	; 0x36a
    1248:	movt	r1, #0
    124c:	movt	r2, #0
    1250:	bl	0 <coda_set_error>
    1254:	mvn	r4, #0
    1258:	mov	r0, r4
    125c:	sub	sp, fp, #64	; 0x40
    1260:	vpop	{d8-d11}
    1264:	add	sp, sp, #4
    1268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    126c:	ldr	r0, [fp, #16]
    1270:	cmp	r0, #0
    1274:	beq	1238 <coda_time_double_to_parts_utc+0x50>
    1278:	vmov.f64	d8, d0
    127c:	bl	0 <coda_isNaN>
    1280:	cmp	r0, #0
    1284:	beq	1294 <coda_time_double_to_parts_utc+0xac>
    1288:	movw	r1, #0
    128c:	movt	r1, #0
    1290:	b	12ac <coda_time_double_to_parts_utc+0xc4>
    1294:	vmov.f64	d0, d8
    1298:	bl	0 <coda_isInf>
    129c:	cmp	r0, #0
    12a0:	beq	12b8 <coda_time_double_to_parts_utc+0xd0>
    12a4:	movw	r1, #0
    12a8:	movt	r1, #0
    12ac:	mvn	r0, #103	; 0x67
    12b0:	bl	0 <coda_set_error>
    12b4:	b	1254 <coda_time_double_to_parts_utc+0x6c>
    12b8:	bl	0 <__aeabi_read_tp>
    12bc:	ldr	r1, [pc, #464]	; 1494 <coda_time_double_to_parts_utc+0x2ac>
    12c0:	ldr	r1, [r0, r1]
    12c4:	cmp	r1, #0
    12c8:	beq	1444 <coda_time_double_to_parts_utc+0x25c>
    12cc:	ldr	r2, [pc, #444]	; 1490 <coda_time_double_to_parts_utc+0x2a8>
    12d0:	ldr	r0, [r0, r2]
    12d4:	cmp	r0, #1
    12d8:	blt	1444 <coda_time_double_to_parts_utc+0x25c>
    12dc:	vldr	d16, [pc, #388]	; 1468 <coda_time_double_to_parts_utc+0x280>
    12e0:	mov	r2, #0
    12e4:	mov	r3, r1
    12e8:	vadd.f64	d8, d8, d16
    12ec:	vrintm.f64	d16, d8
    12f0:	vldr	d17, [r3]
    12f4:	vcmpe.f64	d16, d17
    12f8:	vmrs	APSR_nzcv, fpscr
    12fc:	ble	131c <coda_time_double_to_parts_utc+0x134>
    1300:	add	r2, r2, #1
    1304:	add	r3, r3, #8
    1308:	cmp	r0, r2
    130c:	bne	12f0 <coda_time_double_to_parts_utc+0x108>
    1310:	add	r1, r1, r0, lsl #3
    1314:	vldr	d17, [r1]
    1318:	b	1320 <coda_time_double_to_parts_utc+0x138>
    131c:	mov	r0, r2
    1320:	vsub.f64	d17, d16, d17
    1324:	vldr	d18, [pc, #324]	; 1470 <coda_time_double_to_parts_utc+0x288>
    1328:	mov	r9, #0
    132c:	add	r1, sp, #12
    1330:	add	r2, sp, #8
    1334:	add	r3, sp, #4
    1338:	vabs.f64	d17, d17
    133c:	vcmpe.f64	d17, d18
    1340:	vldr	d17, [pc, #304]	; 1478 <coda_time_double_to_parts_utc+0x290>
    1344:	vmrs	APSR_nzcv, fpscr
    1348:	movwmi	r9, #1
    134c:	add	r0, r0, r9
    1350:	add	r0, r0, #10
    1354:	vmov	s0, r0
    1358:	vcvt.f64.s32	d10, s0
    135c:	vsub.f64	d9, d16, d10
    1360:	vdiv.f64	d16, d9, d17
    1364:	vcvtm.s32.f64	s22, d16
    1368:	vmov	r0, s22
    136c:	bl	528 <mjd2000_to_dmy>
    1370:	mvn	r4, #0
    1374:	cmp	r0, #0
    1378:	bne	1258 <coda_time_double_to_parts_utc+0x70>
    137c:	vldr	d16, [pc, #252]	; 1480 <coda_time_double_to_parts_utc+0x298>
    1380:	vcvt.f64.s32	d17, s22
    1384:	vmov.f64	d18, d9
    1388:	movw	r0, #20864	; 0x5180
    138c:	movt	r0, #1
    1390:	vmla.f64	d18, d17, d16
    1394:	vcvt.s32.f64	s0, d18
    1398:	vmov	r2, s0
    139c:	cmp	r2, r0
    13a0:	bcc	13b8 <coda_time_double_to_parts_utc+0x1d0>
    13a4:	movw	r1, #0
    13a8:	mvn	r0, #103	; 0x67
    13ac:	movt	r1, #0
    13b0:	bl	0 <coda_set_error>
    13b4:	b	1258 <coda_time_double_to_parts_utc+0x70>
    13b8:	ldr	r0, [sp, #4]
    13bc:	vsub.f64	d16, d8, d10
    13c0:	vldr	d17, [pc, #192]	; 1488 <coda_time_double_to_parts_utc+0x2a0>
    13c4:	mov	r4, #0
    13c8:	str	r0, [r7]
    13cc:	ldr	r0, [sp, #8]
    13d0:	vsub.f64	d16, d16, d9
    13d4:	str	r0, [r6]
    13d8:	ldr	r0, [sp, #12]
    13dc:	vmul.f64	d16, d16, d17
    13e0:	str	r0, [r5]
    13e4:	movw	r0, #46021	; 0xb3c5
    13e8:	movt	r0, #37282	; 0x91a2
    13ec:	vrintm.f64	d16, d16
    13f0:	umull	r0, r1, r2, r0
    13f4:	lsr	r0, r1, #11
    13f8:	mov	r1, #3600	; 0xe10
    13fc:	str	r0, [r8]
    1400:	mls	r0, r0, r1, r2
    1404:	movw	r2, #34953	; 0x8889
    1408:	movt	r2, #34952	; 0x8888
    140c:	uxth	r1, r0
    1410:	umull	r1, r2, r1, r2
    1414:	lsr	r1, r2, #5
    1418:	str	r1, [sl]
    141c:	lsl	r1, r1, #4
    1420:	sub	r1, r1, r2, lsr #5
    1424:	sub	r0, r0, r1, lsl #2
    1428:	ldr	r1, [fp, #12]
    142c:	uxtah	r0, r9, r0
    1430:	str	r0, [r1]
    1434:	vcvt.s32.f64	s0, d16
    1438:	ldr	r0, [fp, #16]
    143c:	vstr	s0, [r0]
    1440:	b	1258 <coda_time_double_to_parts_utc+0x70>
    1444:	movw	r0, #0
    1448:	movw	r1, #0
    144c:	movw	r3, #0
    1450:	movw	r2, #894	; 0x37e
    1454:	movt	r0, #0
    1458:	movt	r1, #0
    145c:	movt	r3, #0
    1460:	bl	0 <__assert_fail>
    1464:	nop	{0}
    1468:	.word	0xa0b5ed8d
    146c:	.word	0x3ea0c6f7
    1470:	.word	0x9999999a
    1474:	.word	0x3fb99999
    1478:	.word	0x00000000
    147c:	.word	0x40f51800
    1480:	.word	0x00000000
    1484:	.word	0xc0f51800
    1488:	.word	0x00000000
    148c:	.word	0x412e8480
	...

00001498 <coda_time_parts_to_double>:
    1498:	push	{r4, r5, r6, sl, fp, lr}
    149c:	add	fp, sp, #16
    14a0:	sub	sp, sp, #16
    14a4:	ldr	r6, [fp, #20]
    14a8:	cmp	r6, #0
    14ac:	beq	1518 <coda_time_parts_to_double+0x80>
    14b0:	mov	r5, r0
    14b4:	mov	r4, r3
    14b8:	mov	r0, r2
    14bc:	add	r3, sp, #12
    14c0:	mov	r2, r5
    14c4:	bl	2cc <dmy_to_mjd2000>
    14c8:	mvn	r5, #0
    14cc:	cmp	r0, #0
    14d0:	bne	1538 <coda_time_parts_to_double+0xa0>
    14d4:	ldr	r1, [fp, #16]
    14d8:	movw	r2, #16959	; 0x423f
    14dc:	ldr	r0, [fp, #12]
    14e0:	ldr	r3, [fp, #8]
    14e4:	movt	r2, #15
    14e8:	cmp	r1, r2
    14ec:	bhi	14fc <coda_time_parts_to_double+0x64>
    14f0:	cmp	r0, #60	; 0x3c
    14f4:	cmpls	r4, #23
    14f8:	bls	1544 <coda_time_parts_to_double+0xac>
    14fc:	stm	sp, {r0, r1}
    1500:	movw	r1, #0
    1504:	mvn	r0, #103	; 0x67
    1508:	mov	r2, r4
    150c:	movt	r1, #0
    1510:	bl	0 <coda_set_error>
    1514:	b	1538 <coda_time_parts_to_double+0xa0>
    1518:	movw	r1, #0
    151c:	movw	r2, #0
    1520:	mvn	r0, #99	; 0x63
    1524:	movw	r3, #954	; 0x3ba
    1528:	movt	r1, #0
    152c:	movt	r2, #0
    1530:	bl	0 <coda_set_error>
    1534:	mvn	r5, #0
    1538:	mov	r0, r5
    153c:	sub	sp, fp, #16
    1540:	pop	{r4, r5, r6, sl, fp, pc}
    1544:	cmp	r3, #60	; 0x3c
    1548:	bcs	14fc <coda_time_parts_to_double+0x64>
    154c:	vmov	s0, r3
    1550:	vldr	d16, [pc, #80]	; 15a8 <coda_time_parts_to_double+0x110>
    1554:	vmov	s2, r4
    1558:	vldr	d19, [pc, #88]	; 15b8 <coda_time_parts_to_double+0x120>
    155c:	vldr	d18, [pc, #76]	; 15b0 <coda_time_parts_to_double+0x118>
    1560:	mov	r5, #0
    1564:	vcvt.f64.s32	d17, s0
    1568:	vmov	s0, r1
    156c:	vcvt.f64.s32	d20, s2
    1570:	vldr	s4, [sp, #12]
    1574:	vmov	s2, r0
    1578:	vmul.f64	d16, d17, d16
    157c:	vcvt.f64.s32	d17, s0
    1580:	vmla.f64	d16, d20, d18
    1584:	vcvt.f64.s32	d21, s2
    1588:	vldr	d18, [pc, #48]	; 15c0 <coda_time_parts_to_double+0x128>
    158c:	vdiv.f64	d17, d17, d19
    1590:	vcvt.f64.s32	d19, s4
    1594:	vadd.f64	d16, d16, d21
    1598:	vadd.f64	d16, d16, d17
    159c:	vmla.f64	d16, d19, d18
    15a0:	vstr	d16, [r6]
    15a4:	b	1538 <coda_time_parts_to_double+0xa0>
    15a8:	.word	0x00000000
    15ac:	.word	0x404e0000
    15b0:	.word	0x00000000
    15b4:	.word	0x40ac2000
    15b8:	.word	0x00000000
    15bc:	.word	0x412e8480
    15c0:	.word	0x00000000
    15c4:	.word	0x40f51800

000015c8 <coda_time_parts_to_double_utc>:
    15c8:	push	{r4, r5, r6, sl, fp, lr}
    15cc:	add	fp, sp, #16
    15d0:	sub	sp, sp, #16
    15d4:	ldr	r6, [fp, #20]
    15d8:	cmp	r6, #0
    15dc:	beq	164c <coda_time_parts_to_double_utc+0x84>
    15e0:	mov	r5, r0
    15e4:	mov	r4, r3
    15e8:	mov	r0, r2
    15ec:	add	r3, sp, #12
    15f0:	mov	r2, r5
    15f4:	bl	2cc <dmy_to_mjd2000>
    15f8:	mvn	r5, #0
    15fc:	cmp	r0, #0
    1600:	bne	166c <coda_time_parts_to_double_utc+0xa4>
    1604:	ldr	r1, [fp, #16]
    1608:	movw	r0, #16959	; 0x423f
    160c:	ldr	r2, [fp, #12]
    1610:	ldr	r3, [fp, #8]
    1614:	movt	r0, #15
    1618:	cmp	r1, r0
    161c:	bhi	162c <coda_time_parts_to_double_utc+0x64>
    1620:	cmp	r2, #60	; 0x3c
    1624:	cmpls	r4, #23
    1628:	bls	1678 <coda_time_parts_to_double_utc+0xb0>
    162c:	str	r1, [sp, #4]
    1630:	movw	r1, #0
    1634:	str	r2, [sp]
    1638:	mvn	r0, #103	; 0x67
    163c:	mov	r2, r4
    1640:	movt	r1, #0
    1644:	bl	0 <coda_set_error>
    1648:	b	166c <coda_time_parts_to_double_utc+0xa4>
    164c:	movw	r1, #0
    1650:	movw	r2, #0
    1654:	mvn	r0, #99	; 0x63
    1658:	mov	r3, #1008	; 0x3f0
    165c:	movt	r1, #0
    1660:	movt	r2, #0
    1664:	bl	0 <coda_set_error>
    1668:	mvn	r5, #0
    166c:	mov	r0, r5
    1670:	sub	sp, fp, #16
    1674:	pop	{r4, r5, r6, sl, fp, pc}
    1678:	cmp	r3, #60	; 0x3c
    167c:	bcs	162c <coda_time_parts_to_double_utc+0x64>
    1680:	vmov	s0, r3
    1684:	vmov	s2, r4
    1688:	vcvt.f64.s32	d16, s0
    168c:	bl	0 <__aeabi_read_tp>
    1690:	vcvt.f64.s32	d17, s2
    1694:	vmov	s0, r2
    1698:	vmov	s2, r1
    169c:	ldr	r1, [pc, #208]	; 1774 <coda_time_parts_to_double_utc+0x1ac>
    16a0:	vcvt.f64.s32	d18, s0
    16a4:	vcvt.f64.s32	d19, s2
    16a8:	ldr	r1, [r0, r1]
    16ac:	cmp	r1, #0
    16b0:	beq	172c <coda_time_parts_to_double_utc+0x164>
    16b4:	ldr	r2, [pc, #180]	; 1770 <coda_time_parts_to_double_utc+0x1a8>
    16b8:	ldr	r0, [r0, r2]
    16bc:	cmp	r0, #0
    16c0:	ble	172c <coda_time_parts_to_double_utc+0x164>
    16c4:	vldr	d20, [pc, #132]	; 1750 <coda_time_parts_to_double_utc+0x188>
    16c8:	vldr	d21, [pc, #136]	; 1758 <coda_time_parts_to_double_utc+0x190>
    16cc:	vldr	d22, [pc, #140]	; 1760 <coda_time_parts_to_double_utc+0x198>
    16d0:	vldr	s0, [sp, #12]
    16d4:	vmul.f64	d16, d16, d20
    16d8:	vmla.f64	d16, d17, d21
    16dc:	vdiv.f64	d17, d19, d22
    16e0:	vcvt.f64.s32	d19, s0
    16e4:	vadd.f64	d16, d16, d18
    16e8:	vldr	d18, [pc, #120]	; 1768 <coda_time_parts_to_double_utc+0x1a0>
    16ec:	vadd.f64	d16, d16, d17
    16f0:	vmov.f64	d17, #36	; 0x41200000  10.0
    16f4:	vmla.f64	d17, d19, d18
    16f8:	vmov.f64	d18, #112	; 0x3f800000  1.0
    16fc:	vldr	d19, [r1]
    1700:	vcmpe.f64	d17, d19
    1704:	vmrs	APSR_nzcv, fpscr
    1708:	blt	171c <coda_time_parts_to_double_utc+0x154>
    170c:	vadd.f64	d17, d17, d18
    1710:	add	r1, r1, #8
    1714:	subs	r0, r0, #1
    1718:	bne	16fc <coda_time_parts_to_double_utc+0x134>
    171c:	vadd.f64	d16, d16, d17
    1720:	mov	r5, #0
    1724:	vstr	d16, [r6]
    1728:	b	166c <coda_time_parts_to_double_utc+0xa4>
    172c:	movw	r0, #0
    1730:	movw	r1, #0
    1734:	movw	r3, #0
    1738:	mov	r2, #1024	; 0x400
    173c:	movt	r0, #0
    1740:	movt	r1, #0
    1744:	movt	r3, #0
    1748:	bl	0 <__assert_fail>
    174c:	nop	{0}
    1750:	.word	0x00000000
    1754:	.word	0x404e0000
    1758:	.word	0x00000000
    175c:	.word	0x40ac2000
    1760:	.word	0x00000000
    1764:	.word	0x412e8480
    1768:	.word	0x00000000
    176c:	.word	0x40f51800
	...

00001778 <coda_time_parts_to_string>:
    1778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    177c:	add	fp, sp, #28
    1780:	sub	sp, sp, #44	; 0x2c
    1784:	mov	r5, r2
    1788:	ldr	r2, [fp, #20]
    178c:	str	r3, [sp, #32]
    1790:	cmp	r2, #0
    1794:	beq	1c50 <coda_time_parts_to_string+0x4d8>
    1798:	ldr	r6, [fp, #24]
    179c:	cmp	r6, #0
    17a0:	beq	1c68 <coda_time_parts_to_string+0x4f0>
    17a4:	ldrb	r3, [r2]
    17a8:	cmp	r3, #0
    17ac:	beq	1ca0 <coda_time_parts_to_string+0x528>
    17b0:	str	r0, [sp, #16]
    17b4:	ldr	r0, [fp, #16]
    17b8:	movw	r7, #26215	; 0x6667
    17bc:	movw	sl, #0
    17c0:	str	r1, [sp, #20]
    17c4:	str	r5, [sp, #24]
    17c8:	mov	r8, #0
    17cc:	mov	r9, #0
    17d0:	mov	r4, #0
    17d4:	movt	r7, #26214	; 0x6666
    17d8:	movt	sl, #0
    17dc:	smmul	r7, r0, r7
    17e0:	asr	r0, r7, #2
    17e4:	add	r0, r0, r7, lsr #31
    17e8:	str	r0, [sp]
    17ec:	add	r0, r2, #1
    17f0:	str	r0, [sp, #12]
    17f4:	sub	r0, r1, #1
    17f8:	str	r0, [sp, #8]
    17fc:	sub	r0, r5, #1
    1800:	mvn	r5, #123	; 0x7b
    1804:	str	r0, [sp, #4]
    1808:	mov	r7, r4
    180c:	clz	r1, r4
    1810:	lsr	r4, r1, #5
    1814:	str	r7, [sp, #28]
    1818:	b	1840 <coda_time_parts_to_string+0xc8>
    181c:	ldrb	r1, [r2, r9]
    1820:	cmp	r7, #0
    1824:	beq	187c <coda_time_parts_to_string+0x104>
    1828:	strb	r1, [r6, r8]
    182c:	add	r8, r8, #1
    1830:	add	r9, r9, #1
    1834:	ldrb	r3, [r2, r9]
    1838:	cmp	r3, #0
    183c:	beq	1c88 <coda_time_parts_to_string+0x510>
    1840:	uxtab	r1, r5, r3
    1844:	clz	r1, r1
    1848:	lsr	r1, r1, #5
    184c:	tst	r1, r4
    1850:	bne	1c88 <coda_time_parts_to_string+0x510>
    1854:	uxtb	r0, r3
    1858:	cmp	r0, #39	; 0x27
    185c:	bne	181c <coda_time_parts_to_string+0xa4>
    1860:	add	r9, r9, #1
    1864:	mov	r1, #39	; 0x27
    1868:	ldrb	r3, [r2, r9]
    186c:	cmp	r3, #39	; 0x27
    1870:	bne	1c44 <coda_time_parts_to_string+0x4cc>
    1874:	cmp	r7, #0
    1878:	bne	1828 <coda_time_parts_to_string+0xb0>
    187c:	sub	r0, r1, #68	; 0x44
    1880:	cmp	r0, #53	; 0x35
    1884:	bhi	19e0 <coda_time_parts_to_string+0x268>
    1888:	add	r3, pc, #0
    188c:	ldr	pc, [r3, r0, lsl #2]
    1890:	.word	0x00001968
    1894:	.word	0x000019e0
    1898:	.word	0x000019e0
    189c:	.word	0x000019e0
    18a0:	.word	0x000019f8
    18a4:	.word	0x000019e0
    18a8:	.word	0x000019e0
    18ac:	.word	0x000019e0
    18b0:	.word	0x000019e0
    18b4:	.word	0x00001a1c
    18b8:	.word	0x000019e0
    18bc:	.word	0x000019e0
    18c0:	.word	0x000019e0
    18c4:	.word	0x000019e0
    18c8:	.word	0x000019e0
    18cc:	.word	0x00001a84
    18d0:	.word	0x000019e0
    18d4:	.word	0x000019e0
    18d8:	.word	0x000019e0
    18dc:	.word	0x000019e0
    18e0:	.word	0x000019e0
    18e4:	.word	0x000019e0
    18e8:	.word	0x000019e0
    18ec:	.word	0x000019e0
    18f0:	.word	0x000019e0
    18f4:	.word	0x000019e0
    18f8:	.word	0x000019e0
    18fc:	.word	0x000019e0
    1900:	.word	0x000019e0
    1904:	.word	0x000019e0
    1908:	.word	0x000019e0
    190c:	.word	0x000019e0
    1910:	.word	0x00001b40
    1914:	.word	0x000019e0
    1918:	.word	0x000019e0
    191c:	.word	0x000019e0
    1920:	.word	0x000019e0
    1924:	.word	0x000019e0
    1928:	.word	0x000019e0
    192c:	.word	0x000019e0
    1930:	.word	0x000019e0
    1934:	.word	0x00001b64
    1938:	.word	0x000019e0
    193c:	.word	0x000019e0
    1940:	.word	0x000019e0
    1944:	.word	0x000019e0
    1948:	.word	0x000019e0
    194c:	.word	0x00001b84
    1950:	.word	0x000019e0
    1954:	.word	0x000019e0
    1958:	.word	0x000019e0
    195c:	.word	0x000019e0
    1960:	.word	0x000019e0
    1964:	.word	0x00001bc0
    1968:	add	r0, r9, r2
    196c:	ldrb	r1, [r0, #1]
    1970:	cmp	r1, #68	; 0x44
    1974:	ldrbeq	r0, [r0, #2]
    1978:	cmpeq	r0, #68	; 0x44
    197c:	bne	1cac <coda_time_parts_to_string+0x534>
    1980:	ldr	sl, [sp, #16]
    1984:	ldr	r0, [sp, #24]
    1988:	ldr	r1, [sp, #20]
    198c:	sub	r3, fp, #32
    1990:	mov	r2, sl
    1994:	bl	2cc <dmy_to_mjd2000>
    1998:	cmp	r0, #0
    199c:	bne	1cbc <coda_time_parts_to_string+0x544>
    19a0:	mov	r0, #1
    19a4:	mov	r1, #1
    19a8:	mov	r2, sl
    19ac:	add	r3, sp, #36	; 0x24
    19b0:	bl	2cc <dmy_to_mjd2000>
    19b4:	cmp	r0, #0
    19b8:	bne	1cbc <coda_time_parts_to_string+0x544>
    19bc:	ldr	r1, [sp, #36]	; 0x24
    19c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    19c4:	add	r0, r6, r8
    19c8:	sub	r1, r2, r1
    19cc:	add	r2, r1, #1
    19d0:	movw	r1, #0
    19d4:	movt	r1, #0
    19d8:	bl	0 <sprintf>
    19dc:	b	1a78 <coda_time_parts_to_string+0x300>
    19e0:	and	r0, r1, #223	; 0xdf
    19e4:	sub	r0, r0, #65	; 0x41
    19e8:	uxtb	r0, r0
    19ec:	cmp	r0, #25
    19f0:	bhi	1828 <coda_time_parts_to_string+0xb0>
    19f4:	b	1cac <coda_time_parts_to_string+0x534>
    19f8:	add	r0, r9, r2
    19fc:	ldrb	r0, [r0, #1]
    1a00:	cmp	r0, #72	; 0x48
    1a04:	bne	1cac <coda_time_parts_to_string+0x534>
    1a08:	ldr	r0, [sp, #32]
    1a0c:	cmp	r0, #24
    1a10:	bcs	1cd4 <coda_time_parts_to_string+0x55c>
    1a14:	ldr	r2, [sp, #32]
    1a18:	b	1ba0 <coda_time_parts_to_string+0x428>
    1a1c:	add	r0, r9, r2
    1a20:	ldrb	r0, [r0, #1]
    1a24:	cmp	r0, #77	; 0x4d
    1a28:	bne	1cac <coda_time_parts_to_string+0x534>
    1a2c:	ldr	r0, [sp, #8]
    1a30:	cmp	r0, #12
    1a34:	bcs	1ce0 <coda_time_parts_to_string+0x568>
    1a38:	add	sl, r6, r8
    1a3c:	add	r6, r9, #2
    1a40:	ldr	r3, [sp, #20]
    1a44:	ldrb	r0, [r2, r6]
    1a48:	cmp	r0, #77	; 0x4d
    1a4c:	bne	1c18 <coda_time_parts_to_string+0x4a0>
    1a50:	movw	r0, #0
    1a54:	movt	r0, #0
    1a58:	ldr	r6, [r0, r3, lsl #2]
    1a5c:	mov	r0, r6
    1a60:	bl	0 <strlen>
    1a64:	add	r2, r0, #1
    1a68:	mov	r0, sl
    1a6c:	mov	r1, r6
    1a70:	bl	0 <memcpy>
    1a74:	ldr	r6, [fp, #24]
    1a78:	add	r8, r8, #3
    1a7c:	add	r9, r9, #3
    1a80:	b	1b28 <coda_time_parts_to_string+0x3b0>
    1a84:	ldr	r0, [fp, #16]
    1a88:	movw	r1, #16959	; 0x423f
    1a8c:	movt	r1, #15
    1a90:	cmp	r0, r1
    1a94:	bhi	1cc8 <coda_time_parts_to_string+0x550>
    1a98:	ldr	r0, [sp, #12]
    1a9c:	mov	sl, #0
    1aa0:	add	r0, r0, r9
    1aa4:	ldrb	r1, [r0, sl]
    1aa8:	add	sl, sl, #1
    1aac:	cmp	r1, #83	; 0x53
    1ab0:	beq	1aa4 <coda_time_parts_to_string+0x32c>
    1ab4:	ldr	r3, [fp, #16]
    1ab8:	movw	r5, #34079	; 0x851f
    1abc:	cmp	sl, #5
    1ac0:	movt	r5, #20971	; 0x51eb
    1ac4:	bhi	1b0c <coda_time_parts_to_string+0x394>
    1ac8:	rsb	r0, sl, #2
    1acc:	ldr	r3, [sp]
    1ad0:	ands	r0, r0, #1
    1ad4:	ldr	r0, [fp, #16]
    1ad8:	mov	r1, r3
    1adc:	moveq	r1, r0
    1ae0:	mov	r0, sl
    1ae4:	addne	r0, r0, #1
    1ae8:	cmp	sl, #5
    1aec:	beq	1b0c <coda_time_parts_to_string+0x394>
    1af0:	sub	r0, r0, #6
    1af4:	mov	r3, r1
    1af8:	smmul	r1, r3, r5
    1afc:	adds	r0, r0, #2
    1b00:	asr	r2, r1, #5
    1b04:	add	r3, r2, r1, lsr #31
    1b08:	bne	1af8 <coda_time_parts_to_string+0x380>
    1b0c:	movw	r1, #0
    1b10:	add	r0, r6, r8
    1b14:	mov	r2, sl
    1b18:	add	r9, r9, sl
    1b1c:	movt	r1, #0
    1b20:	bl	0 <sprintf>
    1b24:	add	r8, r8, sl
    1b28:	movw	sl, #0
    1b2c:	mvn	r5, #123	; 0x7b
    1b30:	movt	sl, #0
    1b34:	ldr	r7, [sp, #28]
    1b38:	ldr	r2, [fp, #20]
    1b3c:	b	1834 <coda_time_parts_to_string+0xbc>
    1b40:	add	r0, r9, r2
    1b44:	ldrb	r0, [r0, #1]
    1b48:	cmp	r0, #100	; 0x64
    1b4c:	bne	1cac <coda_time_parts_to_string+0x534>
    1b50:	ldr	r0, [sp, #4]
    1b54:	cmp	r0, #31
    1b58:	bcs	1cec <coda_time_parts_to_string+0x574>
    1b5c:	ldr	r2, [sp, #24]
    1b60:	b	1ba0 <coda_time_parts_to_string+0x428>
    1b64:	add	r0, r9, r2
    1b68:	ldrb	r0, [r0, #1]
    1b6c:	cmp	r0, #109	; 0x6d
    1b70:	bne	1cac <coda_time_parts_to_string+0x534>
    1b74:	ldr	r2, [fp, #8]
    1b78:	cmp	r2, #60	; 0x3c
    1b7c:	bcc	1ba0 <coda_time_parts_to_string+0x428>
    1b80:	b	1cf8 <coda_time_parts_to_string+0x580>
    1b84:	add	r0, r9, r2
    1b88:	ldrb	r0, [r0, #1]
    1b8c:	cmp	r0, #115	; 0x73
    1b90:	bne	1cac <coda_time_parts_to_string+0x534>
    1b94:	ldr	r2, [fp, #12]
    1b98:	cmp	r2, #61	; 0x3d
    1b9c:	bcs	1d04 <coda_time_parts_to_string+0x58c>
    1ba0:	add	r0, r6, r8
    1ba4:	mov	r1, sl
    1ba8:	bl	0 <sprintf>
    1bac:	ldr	r2, [fp, #20]
    1bb0:	ldr	r7, [sp, #28]
    1bb4:	add	r8, r8, #2
    1bb8:	add	r9, r9, #2
    1bbc:	b	1834 <coda_time_parts_to_string+0xbc>
    1bc0:	add	r0, r9, r2
    1bc4:	ldrb	r1, [r0, #1]
    1bc8:	cmp	r1, #121	; 0x79
    1bcc:	bne	1cac <coda_time_parts_to_string+0x534>
    1bd0:	ldrb	r1, [r0, #2]
    1bd4:	cmp	r1, #121	; 0x79
    1bd8:	ldrbeq	r0, [r0, #3]
    1bdc:	cmpeq	r0, #121	; 0x79
    1be0:	bne	1cac <coda_time_parts_to_string+0x534>
    1be4:	ldr	r2, [sp, #16]
    1be8:	movw	r0, #10000	; 0x2710
    1bec:	cmp	r2, r0
    1bf0:	bcs	1d10 <coda_time_parts_to_string+0x598>
    1bf4:	movw	r1, #0
    1bf8:	add	r0, r6, r8
    1bfc:	movt	r1, #0
    1c00:	bl	0 <sprintf>
    1c04:	ldr	r2, [fp, #20]
    1c08:	ldr	r7, [sp, #28]
    1c0c:	add	r8, r8, #4
    1c10:	add	r9, r9, #4
    1c14:	b	1834 <coda_time_parts_to_string+0xbc>
    1c18:	mov	r0, sl
    1c1c:	movw	sl, #0
    1c20:	mov	r2, r3
    1c24:	movt	sl, #0
    1c28:	mov	r1, sl
    1c2c:	bl	0 <sprintf>
    1c30:	mov	r9, r6
    1c34:	ldr	r6, [fp, #24]
    1c38:	add	r8, r8, #2
    1c3c:	mvn	r5, #123	; 0x7b
    1c40:	b	1b34 <coda_time_parts_to_string+0x3bc>
    1c44:	cmp	r3, #0
    1c48:	bne	1808 <coda_time_parts_to_string+0x90>
    1c4c:	b	1c8c <coda_time_parts_to_string+0x514>
    1c50:	movw	r1, #0
    1c54:	movw	r2, #0
    1c58:	mvn	r0, #99	; 0x63
    1c5c:	movw	r3, #1069	; 0x42d
    1c60:	movt	r1, #0
    1c64:	b	1c7c <coda_time_parts_to_string+0x504>
    1c68:	movw	r1, #0
    1c6c:	movw	r2, #0
    1c70:	mvn	r0, #99	; 0x63
    1c74:	movw	r3, #1074	; 0x432
    1c78:	movt	r1, #0
    1c7c:	movt	r2, #0
    1c80:	bl	0 <coda_set_error>
    1c84:	b	1cbc <coda_time_parts_to_string+0x544>
    1c88:	mov	r4, r7
    1c8c:	cmp	r4, #0
    1c90:	beq	1ca0 <coda_time_parts_to_string+0x528>
    1c94:	movw	r1, #0
    1c98:	movt	r1, #0
    1c9c:	b	1cb4 <coda_time_parts_to_string+0x53c>
    1ca0:	mov	r0, #0
    1ca4:	sub	sp, fp, #28
    1ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cac:	movw	r1, #0
    1cb0:	movt	r1, #0
    1cb4:	mvn	r0, #102	; 0x66
    1cb8:	bl	0 <coda_set_error>
    1cbc:	mvn	r0, #0
    1cc0:	sub	sp, fp, #28
    1cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cc8:	movw	r1, #0
    1ccc:	movt	r1, #0
    1cd0:	b	1d18 <coda_time_parts_to_string+0x5a0>
    1cd4:	movw	r1, #0
    1cd8:	movt	r1, #0
    1cdc:	b	1d18 <coda_time_parts_to_string+0x5a0>
    1ce0:	movw	r1, #0
    1ce4:	movt	r1, #0
    1ce8:	b	1d18 <coda_time_parts_to_string+0x5a0>
    1cec:	movw	r1, #0
    1cf0:	movt	r1, #0
    1cf4:	b	1d18 <coda_time_parts_to_string+0x5a0>
    1cf8:	movw	r1, #0
    1cfc:	movt	r1, #0
    1d00:	b	1d18 <coda_time_parts_to_string+0x5a0>
    1d04:	movw	r1, #0
    1d08:	movt	r1, #0
    1d0c:	b	1d18 <coda_time_parts_to_string+0x5a0>
    1d10:	movw	r1, #0
    1d14:	movt	r1, #0
    1d18:	mvn	r0, #103	; 0x67
    1d1c:	bl	0 <coda_set_error>
    1d20:	b	1cbc <coda_time_parts_to_string+0x544>

00001d24 <coda_time_string_to_parts>:
    1d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d28:	add	fp, sp, #28
    1d2c:	sub	sp, sp, #44	; 0x2c
    1d30:	cmp	r0, #0
    1d34:	beq	1dbc <coda_time_string_to_parts+0x98>
    1d38:	mov	r4, r1
    1d3c:	cmp	r1, #0
    1d40:	beq	1dd4 <coda_time_string_to_parts+0xb0>
    1d44:	mov	r7, r2
    1d48:	cmp	r2, #0
    1d4c:	beq	1da4 <coda_time_string_to_parts+0x80>
    1d50:	cmp	r3, #0
    1d54:	mov	r6, r3
    1d58:	movne	r5, r0
    1d5c:	ldrne	r0, [fp, #8]
    1d60:	strne	r0, [fp, #-32]	; 0xffffffe0
    1d64:	cmpne	r0, #0
    1d68:	beq	1da4 <coda_time_string_to_parts+0x80>
    1d6c:	ldr	r0, [fp, #12]
    1d70:	str	r0, [sp, #36]	; 0x24
    1d74:	cmp	r0, #0
    1d78:	ldrne	r0, [fp, #16]
    1d7c:	strne	r0, [sp, #32]
    1d80:	cmpne	r0, #0
    1d84:	beq	1da4 <coda_time_string_to_parts+0x80>
    1d88:	ldr	r0, [fp, #20]
    1d8c:	str	r0, [sp, #28]
    1d90:	cmp	r0, #0
    1d94:	ldrne	r0, [fp, #24]
    1d98:	strne	r0, [sp, #24]
    1d9c:	cmpne	r0, #0
    1da0:	bne	1dfc <coda_time_string_to_parts+0xd8>
    1da4:	movw	r1, #0
    1da8:	movw	r2, #0
    1dac:	mvn	r0, #99	; 0x63
    1db0:	movw	r3, #1479	; 0x5c7
    1db4:	movt	r1, #0
    1db8:	b	1de8 <coda_time_string_to_parts+0xc4>
    1dbc:	movw	r1, #0
    1dc0:	movw	r2, #0
    1dc4:	mvn	r0, #99	; 0x63
    1dc8:	movw	r3, #1468	; 0x5bc
    1dcc:	movt	r1, #0
    1dd0:	b	1de8 <coda_time_string_to_parts+0xc4>
    1dd4:	movw	r1, #0
    1dd8:	movw	r2, #0
    1ddc:	mvn	r0, #99	; 0x63
    1de0:	movw	r3, #1473	; 0x5c1
    1de4:	movt	r1, #0
    1de8:	movt	r2, #0
    1dec:	bl	0 <coda_set_error>
    1df0:	mvn	r0, #0
    1df4:	sub	sp, fp, #28
    1df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dfc:	ldrb	r0, [r5]
    1e00:	cmp	r0, #0
    1e04:	beq	1e44 <coda_time_string_to_parts+0x120>
    1e08:	mov	r9, #0
    1e0c:	mov	r1, #0
    1e10:	cmp	r1, #0
    1e14:	uxtbeq	r2, r0
    1e18:	cmpeq	r2, #124	; 0x7c
    1e1c:	beq	1e60 <coda_time_string_to_parts+0x13c>
    1e20:	uxtb	r0, r0
    1e24:	clz	r2, r1
    1e28:	cmp	r0, #39	; 0x27
    1e2c:	add	r0, r5, r9
    1e30:	add	r9, r9, #1
    1e34:	ldrb	r0, [r0, #1]
    1e38:	lsreq	r1, r2, #5
    1e3c:	cmp	r0, #0
    1e40:	bne	1e10 <coda_time_string_to_parts+0xec>
    1e44:	mov	r0, r5
    1e48:	mov	r1, r4
    1e4c:	mov	r2, r7
    1e50:	mov	r3, r6
    1e54:	sub	sp, fp, #28
    1e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e5c:	b	1f90 <string_to_parts>
    1e60:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1e64:	mov	r1, r4
    1e68:	mov	r2, r7
    1e6c:	mov	r3, r6
    1e70:	str	r0, [sp]
    1e74:	ldr	r0, [sp, #36]	; 0x24
    1e78:	str	r0, [sp, #4]
    1e7c:	ldr	r0, [sp, #32]
    1e80:	str	r0, [sp, #8]
    1e84:	ldr	r0, [sp, #28]
    1e88:	str	r0, [sp, #12]
    1e8c:	ldr	r0, [sp, #24]
    1e90:	str	r0, [sp, #16]
    1e94:	mov	r0, r5
    1e98:	bl	1f90 <string_to_parts>
    1e9c:	cmp	r0, #0
    1ea0:	beq	1f60 <coda_time_string_to_parts+0x23c>
    1ea4:	add	r8, r5, #2
    1ea8:	mov	sl, #0
    1eac:	b	1efc <coda_time_string_to_parts+0x1d8>
    1eb0:	mov	r9, r2
    1eb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1eb8:	mov	r2, r7
    1ebc:	mov	r3, r6
    1ec0:	str	r1, [sp]
    1ec4:	ldr	r1, [sp, #36]	; 0x24
    1ec8:	str	r1, [sp, #4]
    1ecc:	ldr	r1, [sp, #32]
    1ed0:	str	r1, [sp, #8]
    1ed4:	ldr	r1, [sp, #28]
    1ed8:	str	r1, [sp, #12]
    1edc:	ldr	r1, [sp, #24]
    1ee0:	str	r1, [sp, #16]
    1ee4:	mov	r1, r4
    1ee8:	bl	1f90 <string_to_parts>
    1eec:	mov	r1, r0
    1ef0:	mov	r0, #0
    1ef4:	cmp	r1, #0
    1ef8:	beq	1f84 <coda_time_string_to_parts+0x260>
    1efc:	ldrb	r0, [r5, r9]
    1f00:	cmp	r0, #0
    1f04:	beq	1f6c <coda_time_string_to_parts+0x248>
    1f08:	add	r2, r9, #1
    1f0c:	mov	r0, r5
    1f10:	ldrb	r1, [r0, r2]!
    1f14:	cmp	r1, #0
    1f18:	beq	1eb0 <coda_time_string_to_parts+0x18c>
    1f1c:	cmp	sl, #0
    1f20:	uxtbeq	r2, r1
    1f24:	cmpeq	r2, #124	; 0x7c
    1f28:	beq	1f54 <coda_time_string_to_parts+0x230>
    1f2c:	uxtb	r1, r1
    1f30:	clz	r2, sl
    1f34:	cmp	r1, #39	; 0x27
    1f38:	ldrb	r1, [r8, r9]
    1f3c:	add	r9, r9, #1
    1f40:	lsreq	sl, r2, #5
    1f44:	cmp	r1, #0
    1f48:	bne	1f1c <coda_time_string_to_parts+0x1f8>
    1f4c:	add	r9, r9, #1
    1f50:	b	1eb4 <coda_time_string_to_parts+0x190>
    1f54:	add	r9, r9, #1
    1f58:	mov	sl, #0
    1f5c:	b	1eb4 <coda_time_string_to_parts+0x190>
    1f60:	mov	r0, #0
    1f64:	sub	sp, fp, #28
    1f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f6c:	movw	r1, #0
    1f70:	mvn	r0, #103	; 0x67
    1f74:	mov	r2, r4
    1f78:	mov	r3, r5
    1f7c:	movt	r1, #0
    1f80:	b	1dec <coda_time_string_to_parts+0xc8>
    1f84:	sub	sp, fp, #28
    1f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f8c:	nop	{0}

00001f90 <string_to_parts>:
    1f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f94:	add	fp, sp, #28
    1f98:	sub	sp, sp, #4
    1f9c:	vpush	{d8-d11}
    1fa0:	sub	sp, sp, #24
    1fa4:	mov	r4, r0
    1fa8:	mov	r0, #2000	; 0x7d0
    1fac:	ldr	r6, [fp, #8]
    1fb0:	ldr	r5, [fp, #12]
    1fb4:	ldr	r7, [fp, #16]
    1fb8:	mov	ip, r1
    1fbc:	mov	r1, #1
    1fc0:	mov	r9, #0
    1fc4:	mov	lr, #0
    1fc8:	str	r0, [r2]
    1fcc:	ldr	r0, [fp, #20]
    1fd0:	str	r1, [r3]
    1fd4:	str	r1, [r6]
    1fd8:	str	r9, [r5]
    1fdc:	str	r9, [r7]
    1fe0:	str	r9, [r0]
    1fe4:	ldr	r0, [fp, #24]
    1fe8:	str	r9, [r0]
    1fec:	ldrb	r0, [r4]
    1ff0:	cmp	r0, #0
    1ff4:	beq	2958 <string_to_parts+0x9c8>
    1ff8:	vdup.32	q4, r1
    1ffc:	vmov.i32	q5, #10	; 0x0000000a
    2000:	mov	sl, #0
    2004:	mov	lr, #0
    2008:	mov	r8, #0
    200c:	str	r2, [sp, #20]
    2010:	str	r3, [sp, #16]
    2014:	mov	r1, sl
    2018:	uxtb	r0, r0
    201c:	mov	sl, r1
    2020:	clz	r1, r1
    2024:	lsr	r1, r1, #5
    2028:	cmp	r0, #124	; 0x7c
    202c:	bne	2038 <string_to_parts+0xa8>
    2030:	cmp	r1, #0
    2034:	bne	2938 <string_to_parts+0x9a8>
    2038:	cmp	r0, #39	; 0x27
    203c:	bne	2068 <string_to_parts+0xd8>
    2040:	add	r0, r4, r8
    2044:	ldrb	r0, [r0, #1]
    2048:	cmp	r0, #0
    204c:	beq	2934 <string_to_parts+0x9a4>
    2050:	add	r8, r8, #1
    2054:	cmp	r0, #39	; 0x27
    2058:	bne	2018 <string_to_parts+0x88>
    205c:	cmp	sl, #0
    2060:	bne	2074 <string_to_parts+0xe4>
    2064:	b	208c <string_to_parts+0xfc>
    2068:	ldrb	r0, [r4, r8]
    206c:	cmp	sl, #0
    2070:	beq	208c <string_to_parts+0xfc>
    2074:	ldrb	r1, [ip, lr]
    2078:	cmp	r0, r1
    207c:	bne	29ac <string_to_parts+0xa1c>
    2080:	add	lr, lr, #1
    2084:	add	r8, r8, #1
    2088:	b	2848 <string_to_parts+0x8b8>
    208c:	sub	r1, r0, #68	; 0x44
    2090:	cmp	r1, #53	; 0x35
    2094:	bhi	2284 <string_to_parts+0x2f4>
    2098:	add	r2, pc, #0
    209c:	ldr	pc, [r2, r1, lsl #2]
    20a0:	.word	0x00002178
    20a4:	.word	0x00002284
    20a8:	.word	0x00002284
    20ac:	.word	0x00002284
    20b0:	.word	0x000022ac
    20b4:	.word	0x00002284
    20b8:	.word	0x00002284
    20bc:	.word	0x00002284
    20c0:	.word	0x00002284
    20c4:	.word	0x000022f8
    20c8:	.word	0x00002284
    20cc:	.word	0x00002284
    20d0:	.word	0x00002284
    20d4:	.word	0x00002284
    20d8:	.word	0x00002284
    20dc:	.word	0x00002350
    20e0:	.word	0x00002284
    20e4:	.word	0x00002284
    20e8:	.word	0x00002284
    20ec:	.word	0x00002284
    20f0:	.word	0x00002284
    20f4:	.word	0x00002284
    20f8:	.word	0x00002284
    20fc:	.word	0x00002284
    2100:	.word	0x00002284
    2104:	.word	0x00002284
    2108:	.word	0x00002284
    210c:	.word	0x00002284
    2110:	.word	0x00002284
    2114:	.word	0x00002284
    2118:	.word	0x00002284
    211c:	.word	0x00002284
    2120:	.word	0x000023f0
    2124:	.word	0x00002284
    2128:	.word	0x00002284
    212c:	.word	0x00002284
    2130:	.word	0x00002284
    2134:	.word	0x00002284
    2138:	.word	0x00002284
    213c:	.word	0x00002284
    2140:	.word	0x00002284
    2144:	.word	0x0000243c
    2148:	.word	0x00002284
    214c:	.word	0x00002284
    2150:	.word	0x00002284
    2154:	.word	0x00002284
    2158:	.word	0x00002284
    215c:	.word	0x00002484
    2160:	.word	0x00002284
    2164:	.word	0x00002284
    2168:	.word	0x00002284
    216c:	.word	0x00002284
    2170:	.word	0x00002284
    2174:	.word	0x000024cc
    2178:	add	r0, r8, r4
    217c:	ldrb	r1, [r0, #1]
    2180:	cmp	r1, #68	; 0x44
    2184:	ldrbeq	r0, [r0, #2]
    2188:	cmpeq	r0, #68	; 0x44
    218c:	bne	2994 <string_to_parts+0xa04>
    2190:	add	r3, r8, #3
    2194:	add	r0, ip, lr
    2198:	mov	r2, #3
    219c:	str	lr, [sp, #12]
    21a0:	ldrb	r1, [r4, r3]
    21a4:	str	r3, [sp, #8]
    21a8:	cmp	r1, #42	; 0x2a
    21ac:	bne	21d0 <string_to_parts+0x240>
    21b0:	ldrb	r1, [r0]
    21b4:	cmp	r1, #32
    21b8:	bne	21d0 <string_to_parts+0x240>
    21bc:	ldrb	r1, [r0, #1]!
    21c0:	mov	r2, #2
    21c4:	cmp	r1, #32
    21c8:	movweq	r2, #1
    21cc:	addeq	r0, r0, #1
    21d0:	ldrb	r1, [r0]
    21d4:	sub	r1, r1, #48	; 0x30
    21d8:	uxtb	r3, r1
    21dc:	cmp	r3, #9
    21e0:	bhi	29b8 <string_to_parts+0xa28>
    21e4:	cmp	r2, #1
    21e8:	str	ip, [sp, #4]
    21ec:	bls	2238 <string_to_parts+0x2a8>
    21f0:	ldrb	r3, [r0, #1]
    21f4:	sub	r7, r3, #48	; 0x30
    21f8:	uxtb	r7, r7
    21fc:	cmp	r7, #9
    2200:	bhi	29b8 <string_to_parts+0xa28>
    2204:	add	r1, r1, r1, lsl #2
    2208:	cmp	r2, #3
    220c:	add	r1, r3, r1, lsl #1
    2210:	sub	r1, r1, #48	; 0x30
    2214:	bne	2238 <string_to_parts+0x2a8>
    2218:	ldrb	r0, [r0, #2]
    221c:	sub	r2, r0, #48	; 0x30
    2220:	uxtb	r2, r2
    2224:	cmp	r2, #9
    2228:	bhi	29b8 <string_to_parts+0xa28>
    222c:	add	r1, r1, r1, lsl #2
    2230:	add	r0, r0, r1, lsl #1
    2234:	sub	r1, r0, #48	; 0x30
    2238:	ldr	r0, [sp, #20]
    223c:	ldr	r2, [sp, #16]
    2240:	mov	r3, r6
    2244:	mov	r7, r6
    2248:	ldr	r0, [r0]
    224c:	bl	1fc <coda_dayofyear_to_month_day>
    2250:	cmp	r0, #0
    2254:	bne	2a00 <string_to_parts+0xa70>
    2258:	ldr	r0, [sp, #8]
    225c:	ldr	lr, [sp, #12]
    2260:	mov	r6, r7
    2264:	ldr	ip, [sp, #4]
    2268:	ldr	r7, [fp, #16]
    226c:	ldrb	r0, [r4, r0]
    2270:	add	lr, lr, #3
    2274:	cmp	r0, #42	; 0x2a
    2278:	mov	r0, #3
    227c:	movweq	r0, #4
    2280:	b	2844 <string_to_parts+0x8b4>
    2284:	sub	r1, r0, #65	; 0x41
    2288:	uxtb	r1, r1
    228c:	cmp	r1, #26
    2290:	bcc	2994 <string_to_parts+0xa04>
    2294:	cmp	r0, #42	; 0x2a
    2298:	subne	r1, r0, #97	; 0x61
    229c:	uxtbne	r1, r1
    22a0:	cmpne	r1, #25
    22a4:	bhi	2074 <string_to_parts+0xe4>
    22a8:	b	2994 <string_to_parts+0xa04>
    22ac:	add	r0, r8, r4
    22b0:	ldrb	r0, [r0, #1]
    22b4:	cmp	r0, #72	; 0x48
    22b8:	bne	2994 <string_to_parts+0xa04>
    22bc:	str	lr, [sp, #12]
    22c0:	add	r3, ip, lr
    22c4:	add	lr, r8, #2
    22c8:	mov	r2, #2
    22cc:	mov	r0, r7
    22d0:	ldrb	r1, [r4, lr]
    22d4:	cmp	r1, #42	; 0x2a
    22d8:	bne	2630 <string_to_parts+0x6a0>
    22dc:	mov	r1, r3
    22e0:	ldrb	r2, [r1], #1
    22e4:	cmp	r2, #32
    22e8:	mov	r2, #2
    22ec:	movweq	r2, #1
    22f0:	movne	r1, r3
    22f4:	b	2634 <string_to_parts+0x6a4>
    22f8:	add	r0, r8, r4
    22fc:	ldrb	r0, [r0, #1]
    2300:	cmp	r0, #77	; 0x4d
    2304:	bne	2994 <string_to_parts+0xa04>
    2308:	add	r0, r8, #2
    230c:	ldrb	r1, [r4, r0]
    2310:	cmp	r1, #77	; 0x4d
    2314:	bne	2688 <string_to_parts+0x6f8>
    2318:	add	r0, ip, lr
    231c:	str	ip, [sp, #4]
    2320:	mov	r7, lr
    2324:	bl	0 <coda_month_to_integer>
    2328:	ldr	r1, [sp, #16]
    232c:	cmn	r0, #1
    2330:	str	r0, [r1]
    2334:	beq	2a0c <string_to_parts+0xa7c>
    2338:	add	r7, r7, #3
    233c:	ldr	ip, [sp, #4]
    2340:	add	r8, r8, #3
    2344:	mov	lr, r7
    2348:	ldr	r7, [fp, #16]
    234c:	b	2848 <string_to_parts+0x8b8>
    2350:	mov	r0, #0
    2354:	str	lr, [sp, #12]
    2358:	add	r8, r8, #1
    235c:	mov	r2, r0
    2360:	add	r0, r0, #1
    2364:	ldrb	r1, [r4, r8]
    2368:	cmp	r1, #83	; 0x53
    236c:	beq	2358 <string_to_parts+0x3c8>
    2370:	ldr	r3, [fp, #24]
    2374:	ldr	r7, [sp, #12]
    2378:	mov	r1, #0
    237c:	cmp	r0, #6
    2380:	str	r1, [r3]
    2384:	mov	r3, r0
    2388:	movcs	r3, #6
    238c:	ldrb	r5, [ip, r7]
    2390:	sub	r6, r5, #48	; 0x30
    2394:	uxtb	r6, r6
    2398:	cmp	r6, #9
    239c:	bhi	29a0 <string_to_parts+0xa10>
    23a0:	add	r1, r1, r1, lsl #2
    23a4:	sub	r3, r3, #1
    23a8:	add	r7, r7, #1
    23ac:	cmp	r3, #0
    23b0:	add	r1, r5, r1, lsl #1
    23b4:	ldr	r5, [fp, #24]
    23b8:	sub	r1, r1, #48	; 0x30
    23bc:	str	r1, [r5]
    23c0:	bgt	238c <string_to_parts+0x3fc>
    23c4:	ldr	lr, [sp, #12]
    23c8:	cmp	r0, #5
    23cc:	add	lr, r0, lr
    23d0:	bhi	27c0 <string_to_parts+0x830>
    23d4:	rsb	r2, r2, #5
    23d8:	cmp	r2, #4
    23dc:	bcs	2858 <string_to_parts+0x8c8>
    23e0:	ldr	r6, [fp, #8]
    23e4:	ldr	r5, [fp, #12]
    23e8:	ldr	r7, [fp, #16]
    23ec:	b	2914 <string_to_parts+0x984>
    23f0:	add	r0, r8, r4
    23f4:	ldrb	r0, [r0, #1]
    23f8:	cmp	r0, #100	; 0x64
    23fc:	bne	2994 <string_to_parts+0xa04>
    2400:	str	lr, [sp, #12]
    2404:	add	r3, ip, lr
    2408:	add	lr, r8, #2
    240c:	mov	r2, #2
    2410:	mov	r0, r7
    2414:	ldrb	r1, [r4, lr]
    2418:	cmp	r1, #42	; 0x2a
    241c:	bne	26bc <string_to_parts+0x72c>
    2420:	mov	r1, r3
    2424:	ldrb	r2, [r1], #1
    2428:	cmp	r2, #32
    242c:	mov	r2, #2
    2430:	movweq	r2, #1
    2434:	movne	r1, r3
    2438:	b	26c0 <string_to_parts+0x730>
    243c:	add	r0, r8, r4
    2440:	ldrb	r0, [r0, #1]
    2444:	cmp	r0, #109	; 0x6d
    2448:	bne	2994 <string_to_parts+0xa04>
    244c:	str	lr, [sp, #12]
    2450:	add	r3, ip, lr
    2454:	add	lr, r8, #2
    2458:	mov	r2, #2
    245c:	ldrb	r1, [r4, lr]
    2460:	cmp	r1, #42	; 0x2a
    2464:	bne	2714 <string_to_parts+0x784>
    2468:	mov	r1, r3
    246c:	ldrb	r2, [r1], #1
    2470:	cmp	r2, #32
    2474:	mov	r2, #2
    2478:	movweq	r2, #1
    247c:	movne	r1, r3
    2480:	b	2718 <string_to_parts+0x788>
    2484:	add	r0, r8, r4
    2488:	ldrb	r0, [r0, #1]
    248c:	cmp	r0, #115	; 0x73
    2490:	bne	2994 <string_to_parts+0xa04>
    2494:	str	lr, [sp, #12]
    2498:	add	r3, ip, lr
    249c:	add	lr, r8, #2
    24a0:	mov	r2, #2
    24a4:	ldrb	r1, [r4, lr]
    24a8:	cmp	r1, #42	; 0x2a
    24ac:	bne	2770 <string_to_parts+0x7e0>
    24b0:	mov	r1, r3
    24b4:	ldrb	r2, [r1], #1
    24b8:	cmp	r2, #32
    24bc:	mov	r2, #2
    24c0:	movweq	r2, #1
    24c4:	movne	r1, r3
    24c8:	b	2774 <string_to_parts+0x7e4>
    24cc:	add	r1, r8, r4
    24d0:	ldrb	r0, [r1, #1]
    24d4:	cmp	r0, #121	; 0x79
    24d8:	bne	2994 <string_to_parts+0xa04>
    24dc:	ldrb	r0, [r1, #2]
    24e0:	cmp	r0, #121	; 0x79
    24e4:	ldrbeq	r0, [r1, #3]
    24e8:	cmpeq	r0, #121	; 0x79
    24ec:	bne	2994 <string_to_parts+0xa04>
    24f0:	ldrb	r2, [r1, #4]
    24f4:	mov	r0, #4
    24f8:	add	r3, ip, lr
    24fc:	str	lr, [sp, #12]
    2500:	str	r0, [sp, #8]
    2504:	cmp	r2, #42	; 0x2a
    2508:	bne	2544 <string_to_parts+0x5b4>
    250c:	ldrb	r2, [r3]
    2510:	cmp	r2, #32
    2514:	bne	2544 <string_to_parts+0x5b4>
    2518:	ldrb	r2, [r3, #1]!
    251c:	mov	r0, #3
    2520:	str	r0, [sp, #8]
    2524:	cmp	r2, #32
    2528:	bne	2544 <string_to_parts+0x5b4>
    252c:	ldrb	r1, [r3, #1]!
    2530:	mov	r0, #2
    2534:	cmp	r1, #32
    2538:	movweq	r0, #1
    253c:	addeq	r3, r3, #1
    2540:	str	r0, [sp, #8]
    2544:	ldr	r0, [sp, #20]
    2548:	mov	r1, #0
    254c:	str	r1, [r0]
    2550:	mov	r1, r3
    2554:	ldrb	r2, [r3]
    2558:	sub	r2, r2, #48	; 0x30
    255c:	uxtb	r3, r2
    2560:	cmp	r3, #9
    2564:	bhi	29e8 <string_to_parts+0xa58>
    2568:	str	r2, [r0]
    256c:	ldr	r0, [sp, #8]
    2570:	cmp	r0, #1
    2574:	bls	2614 <string_to_parts+0x684>
    2578:	ldrb	r3, [r1, #1]
    257c:	mov	lr, r7
    2580:	ldr	r0, [sp, #20]
    2584:	sub	r7, r3, #48	; 0x30
    2588:	uxtb	r7, r7
    258c:	cmp	r7, #9
    2590:	bhi	29e8 <string_to_parts+0xa58>
    2594:	add	r2, r2, r2, lsl #2
    2598:	mov	r7, lr
    259c:	add	r2, r3, r2, lsl #1
    25a0:	sub	r2, r2, #48	; 0x30
    25a4:	str	r2, [r0]
    25a8:	ldr	r0, [sp, #8]
    25ac:	cmp	r0, #3
    25b0:	bcc	2614 <string_to_parts+0x684>
    25b4:	ldrb	r3, [r1, #2]
    25b8:	ldr	r0, [sp, #20]
    25bc:	sub	r7, r3, #48	; 0x30
    25c0:	uxtb	r7, r7
    25c4:	cmp	r7, #9
    25c8:	bhi	29e8 <string_to_parts+0xa58>
    25cc:	add	r2, r2, r2, lsl #2
    25d0:	mov	r7, lr
    25d4:	add	r2, r3, r2, lsl #1
    25d8:	sub	r2, r2, #48	; 0x30
    25dc:	str	r2, [r0]
    25e0:	ldr	r0, [sp, #8]
    25e4:	cmp	r0, #4
    25e8:	bcc	2614 <string_to_parts+0x684>
    25ec:	ldrb	r0, [r1, #3]
    25f0:	ldr	r3, [sp, #20]
    25f4:	sub	r1, r0, #48	; 0x30
    25f8:	uxtb	r1, r1
    25fc:	cmp	r1, #9
    2600:	bhi	29e8 <string_to_parts+0xa58>
    2604:	add	r1, r2, r2, lsl #2
    2608:	add	r0, r0, r1, lsl #1
    260c:	sub	r0, r0, #48	; 0x30
    2610:	str	r0, [r3]
    2614:	ldrb	r0, [r4, r8]
    2618:	ldr	lr, [sp, #12]
    261c:	cmp	r0, #42	; 0x2a
    2620:	mov	r0, #4
    2624:	add	lr, lr, #4
    2628:	movweq	r0, #5
    262c:	b	2844 <string_to_parts+0x8b4>
    2630:	mov	r1, r3
    2634:	mov	r3, #0
    2638:	str	r3, [r5]
    263c:	ldrb	r3, [r1]
    2640:	sub	r3, r3, #48	; 0x30
    2644:	uxtb	r7, r3
    2648:	cmp	r7, #9
    264c:	bhi	29c4 <string_to_parts+0xa34>
    2650:	mov	r7, r0
    2654:	cmp	r2, #1
    2658:	str	r3, [r5]
    265c:	bls	282c <string_to_parts+0x89c>
    2660:	ldrb	r1, [r1, #1]
    2664:	sub	r2, r1, #48	; 0x30
    2668:	uxtb	r2, r2
    266c:	cmp	r2, #9
    2670:	bhi	29c4 <string_to_parts+0xa34>
    2674:	add	r2, r3, r3, lsl #2
    2678:	add	r1, r1, r2, lsl #1
    267c:	sub	r1, r1, #48	; 0x30
    2680:	str	r1, [r5]
    2684:	b	282c <string_to_parts+0x89c>
    2688:	str	lr, [sp, #12]
    268c:	add	r3, ip, lr
    2690:	mov	r2, #2
    2694:	mov	lr, r0
    2698:	cmp	r1, #42	; 0x2a
    269c:	bne	27d0 <string_to_parts+0x840>
    26a0:	mov	r1, r3
    26a4:	ldrb	r2, [r1], #1
    26a8:	cmp	r2, #32
    26ac:	mov	r2, #2
    26b0:	movweq	r2, #1
    26b4:	movne	r1, r3
    26b8:	b	27d4 <string_to_parts+0x844>
    26bc:	mov	r1, r3
    26c0:	mov	r3, #0
    26c4:	str	r3, [r6]
    26c8:	ldrb	r3, [r1]
    26cc:	sub	r3, r3, #48	; 0x30
    26d0:	uxtb	r7, r3
    26d4:	cmp	r7, #9
    26d8:	bhi	29b8 <string_to_parts+0xa28>
    26dc:	mov	r7, r0
    26e0:	cmp	r2, #1
    26e4:	str	r3, [r6]
    26e8:	bls	282c <string_to_parts+0x89c>
    26ec:	ldrb	r1, [r1, #1]
    26f0:	sub	r2, r1, #48	; 0x30
    26f4:	uxtb	r2, r2
    26f8:	cmp	r2, #9
    26fc:	bhi	29b8 <string_to_parts+0xa28>
    2700:	add	r2, r3, r3, lsl #2
    2704:	add	r1, r1, r2, lsl #1
    2708:	sub	r1, r1, #48	; 0x30
    270c:	str	r1, [r6]
    2710:	b	282c <string_to_parts+0x89c>
    2714:	mov	r1, r3
    2718:	mov	r0, #0
    271c:	str	r0, [r7]
    2720:	mov	r0, r7
    2724:	ldrb	r3, [r1]
    2728:	sub	r3, r3, #48	; 0x30
    272c:	uxtb	r7, r3
    2730:	cmp	r7, #9
    2734:	bhi	29d0 <string_to_parts+0xa40>
    2738:	mov	r7, r0
    273c:	cmp	r2, #1
    2740:	str	r3, [r0]
    2744:	bls	282c <string_to_parts+0x89c>
    2748:	ldrb	r1, [r1, #1]
    274c:	sub	r2, r1, #48	; 0x30
    2750:	uxtb	r2, r2
    2754:	cmp	r2, #9
    2758:	bhi	29d0 <string_to_parts+0xa40>
    275c:	add	r2, r3, r3, lsl #2
    2760:	add	r1, r1, r2, lsl #1
    2764:	sub	r1, r1, #48	; 0x30
    2768:	str	r1, [r7]
    276c:	b	282c <string_to_parts+0x89c>
    2770:	mov	r1, r3
    2774:	ldr	r0, [fp, #20]
    2778:	mov	r3, #0
    277c:	str	r3, [r0]
    2780:	ldrb	r3, [r1]
    2784:	sub	r3, r3, #48	; 0x30
    2788:	uxtb	r7, r3
    278c:	cmp	r7, #9
    2790:	ldr	r7, [fp, #16]
    2794:	bhi	29dc <string_to_parts+0xa4c>
    2798:	cmp	r2, #1
    279c:	str	r3, [r0]
    27a0:	bls	282c <string_to_parts+0x89c>
    27a4:	ldrb	r1, [r1, #1]
    27a8:	ldr	r0, [fp, #20]
    27ac:	sub	r2, r1, #48	; 0x30
    27b0:	uxtb	r2, r2
    27b4:	cmp	r2, #9
    27b8:	bls	281c <string_to_parts+0x88c>
    27bc:	b	29dc <string_to_parts+0xa4c>
    27c0:	ldr	r6, [fp, #8]
    27c4:	ldr	r5, [fp, #12]
    27c8:	ldr	r7, [fp, #16]
    27cc:	b	2848 <string_to_parts+0x8b8>
    27d0:	mov	r1, r3
    27d4:	ldr	r0, [sp, #16]
    27d8:	mov	r3, #0
    27dc:	str	r3, [r0]
    27e0:	ldrb	r3, [r1]
    27e4:	sub	r3, r3, #48	; 0x30
    27e8:	uxtb	r7, r3
    27ec:	cmp	r7, #9
    27f0:	ldr	r7, [fp, #16]
    27f4:	bhi	29f4 <string_to_parts+0xa64>
    27f8:	cmp	r2, #1
    27fc:	str	r3, [r0]
    2800:	bls	282c <string_to_parts+0x89c>
    2804:	ldrb	r1, [r1, #1]
    2808:	ldr	r0, [sp, #16]
    280c:	sub	r2, r1, #48	; 0x30
    2810:	uxtb	r2, r2
    2814:	cmp	r2, #9
    2818:	bhi	29f4 <string_to_parts+0xa64>
    281c:	add	r2, r3, r3, lsl #2
    2820:	add	r1, r1, r2, lsl #1
    2824:	sub	r1, r1, #48	; 0x30
    2828:	str	r1, [r0]
    282c:	ldrb	r0, [r4, lr]
    2830:	ldr	lr, [sp, #12]
    2834:	cmp	r0, #42	; 0x2a
    2838:	mov	r0, #2
    283c:	add	lr, lr, #2
    2840:	movweq	r0, #3
    2844:	add	r8, r0, r8
    2848:	ldrb	r0, [r4, r8]
    284c:	cmp	r0, #0
    2850:	bne	2014 <string_to_parts+0x84>
    2854:	b	2938 <string_to_parts+0x9a8>
    2858:	vorr	d18, d8, d8
    285c:	bic	r3, r2, #3
    2860:	vorr	q8, q4, q4
    2864:	str	lr, [sp, #12]
    2868:	sub	r7, r3, #4
    286c:	cmp	r7, #12
    2870:	vmov.32	d18[0], r1
    2874:	mov	r1, #1
    2878:	add	r1, r1, r7, lsr #2
    287c:	and	r1, r1, #3
    2880:	vorr	d16, d18, d18
    2884:	bcc	28a4 <string_to_parts+0x914>
    2888:	mvn	r7, r7, lsr #2
    288c:	add	r7, r7, r1
    2890:	add	r6, pc, #392	; 0x188
    2894:	adds	r7, r7, #4
    2898:	vld1.64	{d18-d19}, [r6 :128]
    289c:	vmul.i32	q8, q8, q9
    28a0:	bne	2890 <string_to_parts+0x900>
    28a4:	cmp	r1, #0
    28a8:	beq	28d0 <string_to_parts+0x940>
    28ac:	and	r1, r2, #12
    28b0:	mov	r5, #1
    28b4:	sub	r1, r1, #4
    28b8:	add	r1, r5, r1, lsr #2
    28bc:	and	r1, r1, #3
    28c0:	rsb	r1, r1, #0
    28c4:	vmul.i32	q8, q8, q5
    28c8:	adds	r1, r1, #1
    28cc:	bcc	28c4 <string_to_parts+0x934>
    28d0:	vext.8	q9, q8, q8, #8
    28d4:	ldr	r7, [fp, #16]
    28d8:	cmp	r2, r3
    28dc:	vmul.i32	q0, q8, q9
    28e0:	vmul.i32	q8, q0, d0[1]
    28e4:	vmov.32	r1, d16[0]
    28e8:	bne	2904 <string_to_parts+0x974>
    28ec:	ldr	r2, [fp, #24]
    28f0:	ldr	r6, [fp, #8]
    28f4:	ldr	r5, [fp, #12]
    28f8:	ldr	lr, [sp, #12]
    28fc:	str	r1, [r2]
    2900:	b	2848 <string_to_parts+0x8b8>
    2904:	ldr	r6, [fp, #8]
    2908:	ldr	r5, [fp, #12]
    290c:	ldr	lr, [sp, #12]
    2910:	add	r0, r0, r3
    2914:	ldr	r2, [fp, #24]
    2918:	sub	r0, r0, #6
    291c:	add	r1, r1, r1, lsl #2
    2920:	adds	r0, r0, #1
    2924:	lsl	r1, r1, #1
    2928:	bcc	291c <string_to_parts+0x98c>
    292c:	str	r1, [r2]
    2930:	b	2848 <string_to_parts+0x8b8>
    2934:	mov	sl, r1
    2938:	cmp	sl, #0
    293c:	beq	2958 <string_to_parts+0x9c8>
    2940:	movw	r1, #0
    2944:	movt	r1, #0
    2948:	mvn	r0, #102	; 0x66
    294c:	mov	r2, r4
    2950:	bl	0 <coda_set_error>
    2954:	b	297c <string_to_parts+0x9ec>
    2958:	ldrb	r0, [ip, lr]
    295c:	cmp	r0, #0
    2960:	beq	2980 <string_to_parts+0x9f0>
    2964:	movw	r1, #0
    2968:	movt	r1, #0
    296c:	mvn	r0, #103	; 0x67
    2970:	mov	r2, ip
    2974:	mov	r3, r4
    2978:	bl	0 <coda_set_error>
    297c:	mvn	r9, #0
    2980:	mov	r0, r9
    2984:	sub	sp, fp, #64	; 0x40
    2988:	vpop	{d8-d11}
    298c:	add	sp, sp, #4
    2990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2994:	movw	r1, #0
    2998:	movt	r1, #0
    299c:	b	2948 <string_to_parts+0x9b8>
    29a0:	movw	r1, #0
    29a4:	movt	r1, #0
    29a8:	b	296c <string_to_parts+0x9dc>
    29ac:	movw	r1, #0
    29b0:	movt	r1, #0
    29b4:	b	296c <string_to_parts+0x9dc>
    29b8:	movw	r1, #0
    29bc:	movt	r1, #0
    29c0:	b	296c <string_to_parts+0x9dc>
    29c4:	movw	r1, #0
    29c8:	movt	r1, #0
    29cc:	b	296c <string_to_parts+0x9dc>
    29d0:	movw	r1, #0
    29d4:	movt	r1, #0
    29d8:	b	296c <string_to_parts+0x9dc>
    29dc:	movw	r1, #0
    29e0:	movt	r1, #0
    29e4:	b	296c <string_to_parts+0x9dc>
    29e8:	movw	r1, #0
    29ec:	movt	r1, #0
    29f0:	b	296c <string_to_parts+0x9dc>
    29f4:	movw	r1, #0
    29f8:	movt	r1, #0
    29fc:	b	296c <string_to_parts+0x9dc>
    2a00:	movw	r1, #0
    2a04:	movt	r1, #0
    2a08:	b	2a14 <string_to_parts+0xa84>
    2a0c:	movw	r1, #0
    2a10:	movt	r1, #0
    2a14:	ldr	r2, [sp, #4]
    2a18:	mvn	r0, #103	; 0x67
    2a1c:	b	2974 <string_to_parts+0x9e4>
    2a20:	.word	0x00002710
    2a24:	.word	0x00002710
    2a28:	.word	0x00002710
    2a2c:	.word	0x00002710

00002a30 <coda_time_double_to_string>:
    2a30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    2a34:	add	fp, sp, #24
    2a38:	sub	sp, sp, #48	; 0x30
    2a3c:	mov	r8, r1
    2a40:	mov	r5, r0
    2a44:	add	r0, sp, #20
    2a48:	add	r1, sp, #24
    2a4c:	add	r2, sp, #28
    2a50:	add	r3, sp, #32
    2a54:	str	r2, [sp]
    2a58:	str	r1, [sp, #4]
    2a5c:	str	r0, [sp, #8]
    2a60:	sub	r0, fp, #28
    2a64:	sub	r1, fp, #32
    2a68:	add	r2, sp, #36	; 0x24
    2a6c:	bl	1000 <coda_time_double_to_parts>
    2a70:	mov	r1, r0
    2a74:	mvn	r0, #0
    2a78:	cmp	r1, #0
    2a7c:	beq	2a88 <coda_time_double_to_string+0x58>
    2a80:	sub	sp, fp, #24
    2a84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    2a88:	ldr	r3, [sp, #32]
    2a8c:	ldr	r2, [sp, #36]	; 0x24
    2a90:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2a94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2a98:	ldr	r4, [sp, #28]
    2a9c:	ldr	r6, [sp, #24]
    2aa0:	ldr	r7, [sp, #20]
    2aa4:	stm	sp, {r4, r6, r7}
    2aa8:	str	r5, [sp, #12]
    2aac:	str	r8, [sp, #16]
    2ab0:	bl	1778 <coda_time_parts_to_string>
    2ab4:	sub	sp, fp, #24
    2ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00002abc <coda_time_double_to_string_utc>:
    2abc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    2ac0:	add	fp, sp, #24
    2ac4:	sub	sp, sp, #48	; 0x30
    2ac8:	mov	r8, r1
    2acc:	mov	r5, r0
    2ad0:	add	r0, sp, #20
    2ad4:	add	r1, sp, #24
    2ad8:	add	r2, sp, #28
    2adc:	add	r3, sp, #32
    2ae0:	str	r2, [sp]
    2ae4:	str	r1, [sp, #4]
    2ae8:	str	r0, [sp, #8]
    2aec:	sub	r0, fp, #28
    2af0:	sub	r1, fp, #32
    2af4:	add	r2, sp, #36	; 0x24
    2af8:	bl	11e8 <coda_time_double_to_parts_utc>
    2afc:	mov	r1, r0
    2b00:	mvn	r0, #0
    2b04:	cmp	r1, #0
    2b08:	beq	2b14 <coda_time_double_to_string_utc+0x58>
    2b0c:	sub	sp, fp, #24
    2b10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    2b14:	ldr	r3, [sp, #32]
    2b18:	ldr	r2, [sp, #36]	; 0x24
    2b1c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2b20:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2b24:	ldr	r4, [sp, #28]
    2b28:	ldr	r6, [sp, #24]
    2b2c:	ldr	r7, [sp, #20]
    2b30:	stm	sp, {r4, r6, r7}
    2b34:	str	r5, [sp, #12]
    2b38:	str	r8, [sp, #16]
    2b3c:	bl	1778 <coda_time_parts_to_string>
    2b40:	sub	sp, fp, #24
    2b44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00002b48 <coda_time_string_to_double>:
    2b48:	push	{r4, r5, r6, r7, fp, lr}
    2b4c:	add	fp, sp, #16
    2b50:	sub	sp, sp, #48	; 0x30
    2b54:	mov	r7, r2
    2b58:	add	r2, sp, #20
    2b5c:	add	r3, sp, #24
    2b60:	add	r4, sp, #28
    2b64:	add	r5, sp, #32
    2b68:	sub	r6, fp, #28
    2b6c:	str	r3, [sp, #12]
    2b70:	str	r2, [sp, #16]
    2b74:	sub	r2, fp, #20
    2b78:	sub	r3, fp, #24
    2b7c:	str	r6, [sp]
    2b80:	str	r5, [sp, #4]
    2b84:	str	r4, [sp, #8]
    2b88:	bl	1d24 <coda_time_string_to_parts>
    2b8c:	mov	r1, r0
    2b90:	mvn	r0, #0
    2b94:	cmp	r1, #0
    2b98:	beq	2ba4 <coda_time_string_to_double+0x5c>
    2b9c:	sub	sp, fp, #16
    2ba0:	pop	{r4, r5, r6, r7, fp, pc}
    2ba4:	add	r6, sp, #20
    2ba8:	ldr	r3, [sp, #32]
    2bac:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2bb0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2bb4:	ldr	r0, [fp, #-20]	; 0xffffffec
    2bb8:	str	r7, [sp, #12]
    2bbc:	ldm	r6, {r4, r5, r6}
    2bc0:	str	r6, [sp]
    2bc4:	str	r5, [sp, #4]
    2bc8:	str	r4, [sp, #8]
    2bcc:	bl	1498 <coda_time_parts_to_double>
    2bd0:	sub	sp, fp, #16
    2bd4:	pop	{r4, r5, r6, r7, fp, pc}

00002bd8 <coda_time_string_to_double_utc>:
    2bd8:	push	{r4, r5, r6, r7, fp, lr}
    2bdc:	add	fp, sp, #16
    2be0:	sub	sp, sp, #48	; 0x30
    2be4:	mov	r7, r2
    2be8:	add	r2, sp, #20
    2bec:	add	r3, sp, #24
    2bf0:	add	r4, sp, #28
    2bf4:	add	r5, sp, #32
    2bf8:	sub	r6, fp, #28
    2bfc:	str	r3, [sp, #12]
    2c00:	str	r2, [sp, #16]
    2c04:	sub	r2, fp, #20
    2c08:	sub	r3, fp, #24
    2c0c:	str	r6, [sp]
    2c10:	str	r5, [sp, #4]
    2c14:	str	r4, [sp, #8]
    2c18:	bl	1d24 <coda_time_string_to_parts>
    2c1c:	mov	r1, r0
    2c20:	mvn	r0, #0
    2c24:	cmp	r1, #0
    2c28:	beq	2c34 <coda_time_string_to_double_utc+0x5c>
    2c2c:	sub	sp, fp, #16
    2c30:	pop	{r4, r5, r6, r7, fp, pc}
    2c34:	add	r6, sp, #20
    2c38:	ldr	r3, [sp, #32]
    2c3c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2c40:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2c44:	ldr	r0, [fp, #-20]	; 0xffffffec
    2c48:	str	r7, [sp, #12]
    2c4c:	ldm	r6, {r4, r5, r6}
    2c50:	str	r6, [sp]
    2c54:	str	r5, [sp, #4]
    2c58:	str	r4, [sp, #8]
    2c5c:	bl	15c8 <coda_time_parts_to_double_utc>
    2c60:	sub	sp, fp, #16
    2c64:	pop	{r4, r5, r6, r7, fp, pc}

00002c68 <coda_datetime_to_double>:
    2c68:	b	1498 <coda_time_parts_to_double>

00002c6c <coda_double_to_datetime>:
    2c6c:	b	1000 <coda_time_double_to_parts>

00002c70 <coda_time_to_string>:
    2c70:	push	{r4, r5, r6, r7, fp, lr}
    2c74:	add	fp, sp, #16
    2c78:	sub	sp, sp, #48	; 0x30
    2c7c:	mov	r7, r0
    2c80:	add	r0, sp, #20
    2c84:	add	r1, sp, #24
    2c88:	add	r2, sp, #28
    2c8c:	add	r3, sp, #32
    2c90:	str	r2, [sp]
    2c94:	str	r1, [sp, #4]
    2c98:	str	r0, [sp, #8]
    2c9c:	sub	r0, fp, #20
    2ca0:	sub	r1, fp, #24
    2ca4:	sub	r2, fp, #28
    2ca8:	bl	1000 <coda_time_double_to_parts>
    2cac:	mov	r1, r0
    2cb0:	mvn	r0, #0
    2cb4:	cmp	r1, #0
    2cb8:	beq	2cc4 <coda_time_to_string+0x54>
    2cbc:	sub	sp, fp, #16
    2cc0:	pop	{r4, r5, r6, r7, fp, pc}
    2cc4:	ldr	r3, [sp, #32]
    2cc8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2ccc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2cd0:	ldr	r0, [fp, #-20]	; 0xffffffec
    2cd4:	ldr	r4, [sp, #28]
    2cd8:	movw	ip, #0
    2cdc:	ldr	r5, [sp, #24]
    2ce0:	ldr	r6, [sp, #20]
    2ce4:	movt	ip, #0
    2ce8:	stm	sp, {r4, r5, r6, ip}
    2cec:	str	r7, [sp, #16]
    2cf0:	bl	1778 <coda_time_parts_to_string>
    2cf4:	sub	sp, fp, #16
    2cf8:	pop	{r4, r5, r6, r7, fp, pc}

00002cfc <coda_string_to_time>:
    2cfc:	push	{r4, r5, r6, r7, fp, lr}
    2d00:	add	fp, sp, #16
    2d04:	sub	sp, sp, #48	; 0x30
    2d08:	mov	r7, r1
    2d0c:	mov	r1, r0
    2d10:	add	r0, sp, #20
    2d14:	add	r2, sp, #24
    2d18:	add	r3, sp, #28
    2d1c:	add	r4, sp, #32
    2d20:	sub	r5, fp, #28
    2d24:	str	r0, [sp, #16]
    2d28:	movw	r0, #0
    2d2c:	str	r3, [sp, #8]
    2d30:	str	r2, [sp, #12]
    2d34:	sub	r2, fp, #20
    2d38:	sub	r3, fp, #24
    2d3c:	str	r5, [sp]
    2d40:	str	r4, [sp, #4]
    2d44:	movt	r0, #0
    2d48:	bl	1d24 <coda_time_string_to_parts>
    2d4c:	mov	r1, r0
    2d50:	mvn	r0, #0
    2d54:	cmp	r1, #0
    2d58:	beq	2d64 <coda_string_to_time+0x68>
    2d5c:	sub	sp, fp, #16
    2d60:	pop	{r4, r5, r6, r7, fp, pc}
    2d64:	ldr	r5, [sp, #28]
    2d68:	ldr	r3, [sp, #32]
    2d6c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2d70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2d74:	ldr	r0, [fp, #-20]	; 0xffffffec
    2d78:	ldr	r4, [sp, #24]
    2d7c:	ldr	r6, [sp, #20]
    2d80:	str	r5, [sp]
    2d84:	stmib	sp, {r4, r6, r7}
    2d88:	bl	1498 <coda_time_parts_to_double>
    2d8c:	sub	sp, fp, #16
    2d90:	pop	{r4, r5, r6, r7, fp, pc}

00002d94 <coda_utcdatetime_to_double>:
    2d94:	b	15c8 <coda_time_parts_to_double_utc>

00002d98 <coda_double_to_utcdatetime>:
    2d98:	b	11e8 <coda_time_double_to_parts_utc>

00002d9c <coda_time_to_utcstring>:
    2d9c:	push	{r4, r5, r6, r7, fp, lr}
    2da0:	add	fp, sp, #16
    2da4:	sub	sp, sp, #48	; 0x30
    2da8:	mov	r7, r0
    2dac:	add	r0, sp, #20
    2db0:	add	r1, sp, #24
    2db4:	add	r2, sp, #28
    2db8:	add	r3, sp, #32
    2dbc:	str	r2, [sp]
    2dc0:	str	r1, [sp, #4]
    2dc4:	str	r0, [sp, #8]
    2dc8:	sub	r0, fp, #20
    2dcc:	sub	r1, fp, #24
    2dd0:	sub	r2, fp, #28
    2dd4:	bl	11e8 <coda_time_double_to_parts_utc>
    2dd8:	mov	r1, r0
    2ddc:	mvn	r0, #0
    2de0:	cmp	r1, #0
    2de4:	beq	2df0 <coda_time_to_utcstring+0x54>
    2de8:	sub	sp, fp, #16
    2dec:	pop	{r4, r5, r6, r7, fp, pc}
    2df0:	ldr	r3, [sp, #32]
    2df4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2df8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2dfc:	ldr	r0, [fp, #-20]	; 0xffffffec
    2e00:	ldr	r4, [sp, #28]
    2e04:	movw	ip, #0
    2e08:	ldr	r5, [sp, #24]
    2e0c:	ldr	r6, [sp, #20]
    2e10:	movt	ip, #0
    2e14:	stm	sp, {r4, r5, r6, ip}
    2e18:	str	r7, [sp, #16]
    2e1c:	bl	1778 <coda_time_parts_to_string>
    2e20:	sub	sp, fp, #16
    2e24:	pop	{r4, r5, r6, r7, fp, pc}

00002e28 <coda_utcstring_to_time>:
    2e28:	push	{r4, r5, r6, r7, fp, lr}
    2e2c:	add	fp, sp, #16
    2e30:	sub	sp, sp, #48	; 0x30
    2e34:	mov	r7, r1
    2e38:	mov	r1, r0
    2e3c:	add	r0, sp, #20
    2e40:	add	r2, sp, #24
    2e44:	add	r3, sp, #28
    2e48:	add	r4, sp, #32
    2e4c:	sub	r5, fp, #28
    2e50:	str	r0, [sp, #16]
    2e54:	movw	r0, #0
    2e58:	str	r3, [sp, #8]
    2e5c:	str	r2, [sp, #12]
    2e60:	sub	r2, fp, #20
    2e64:	sub	r3, fp, #24
    2e68:	str	r5, [sp]
    2e6c:	str	r4, [sp, #4]
    2e70:	movt	r0, #0
    2e74:	bl	1d24 <coda_time_string_to_parts>
    2e78:	mov	r1, r0
    2e7c:	mvn	r0, #0
    2e80:	cmp	r1, #0
    2e84:	beq	2e90 <coda_utcstring_to_time+0x68>
    2e88:	sub	sp, fp, #16
    2e8c:	pop	{r4, r5, r6, r7, fp, pc}
    2e90:	ldr	r5, [sp, #28]
    2e94:	ldr	r3, [sp, #32]
    2e98:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2e9c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2ea0:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ea4:	ldr	r4, [sp, #24]
    2ea8:	ldr	r6, [sp, #20]
    2eac:	str	r5, [sp]
    2eb0:	stmib	sp, {r4, r6, r7}
    2eb4:	bl	15c8 <coda_time_parts_to_double_utc>
    2eb8:	sub	sp, fp, #16
    2ebc:	pop	{r4, r5, r6, r7, fp, pc}
