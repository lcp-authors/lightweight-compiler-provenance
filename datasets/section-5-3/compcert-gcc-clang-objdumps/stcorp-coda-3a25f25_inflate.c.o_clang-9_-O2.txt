
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/zlib/inflate.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_inflateResetKeep>:
       0:	mov	r1, r0
       4:	mvn	r0, #1
       8:	cmp	r1, #0
       c:	bxeq	lr
      10:	ldr	r2, [r1, #28]
      14:	cmp	r2, #0
      18:	beq	88 <coda_inflateResetKeep+0x88>
      1c:	mov	r0, #0
      20:	str	r0, [r2, #28]
      24:	str	r0, [r1, #8]
      28:	str	r0, [r1, #20]
      2c:	str	r0, [r1, #24]
      30:	ldr	r3, [r2, #8]
      34:	cmp	r3, #0
      38:	andne	r3, r3, #1
      3c:	strne	r3, [r1, #48]	; 0x30
      40:	movw	r1, #7108	; 0x1bc4
      44:	mvn	r3, #0
      48:	str	r3, [r2, r1]
      4c:	mov	r1, #7104	; 0x1bc0
      50:	mov	r3, #1
      54:	str	r3, [r2, r1]
      58:	mov	r1, #32768	; 0x8000
      5c:	str	r0, [r2, #56]	; 0x38
      60:	str	r0, [r2, #60]	; 0x3c
      64:	str	r0, [r2, #32]
      68:	str	r1, [r2, #20]
      6c:	add	r1, r2, #1328	; 0x530
      70:	str	r0, [r2, #12]
      74:	str	r0, [r2]
      78:	str	r0, [r2, #4]
      7c:	str	r1, [r2, #108]	; 0x6c
      80:	str	r1, [r2, #76]	; 0x4c
      84:	str	r1, [r2, #80]	; 0x50
      88:	bx	lr

0000008c <coda_inflateReset>:
      8c:	mov	r1, r0
      90:	mvn	r0, #1
      94:	cmp	r1, #0
      98:	bxeq	lr
      9c:	ldr	r2, [r1, #28]
      a0:	cmp	r2, #0
      a4:	beq	120 <coda_inflateReset+0x94>
      a8:	mov	r0, #0
      ac:	str	r0, [r2, #40]	; 0x28
      b0:	str	r0, [r2, #44]	; 0x2c
      b4:	str	r0, [r2, #48]	; 0x30
      b8:	str	r0, [r2, #28]
      bc:	str	r0, [r1, #8]
      c0:	str	r0, [r1, #20]
      c4:	str	r0, [r1, #24]
      c8:	ldr	r3, [r2, #8]
      cc:	cmp	r3, #0
      d0:	andne	r3, r3, #1
      d4:	strne	r3, [r1, #48]	; 0x30
      d8:	movw	r1, #7108	; 0x1bc4
      dc:	mvn	r3, #0
      e0:	str	r3, [r2, r1]
      e4:	mov	r1, #7104	; 0x1bc0
      e8:	mov	r3, #1
      ec:	str	r3, [r2, r1]
      f0:	mov	r1, #32768	; 0x8000
      f4:	str	r0, [r2, #56]	; 0x38
      f8:	str	r0, [r2, #60]	; 0x3c
      fc:	str	r0, [r2, #32]
     100:	str	r1, [r2, #20]
     104:	add	r1, r2, #1328	; 0x530
     108:	str	r0, [r2, #12]
     10c:	str	r0, [r2]
     110:	str	r0, [r2, #4]
     114:	str	r1, [r2, #108]	; 0x6c
     118:	str	r1, [r2, #76]	; 0x4c
     11c:	str	r1, [r2, #80]	; 0x50
     120:	bx	lr

00000124 <coda_inflateReset2>:
     124:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     128:	add	fp, sp, #24
     12c:	mvn	r4, #1
     130:	cmp	r0, #0
     134:	beq	248 <coda_inflateReset2+0x124>
     138:	ldr	r7, [r0, #28]
     13c:	mov	r5, r0
     140:	cmp	r7, #0
     144:	beq	248 <coda_inflateReset2+0x124>
     148:	mov	r6, r1
     14c:	cmn	r1, #1
     150:	ble	168 <coda_inflateReset2+0x44>
     154:	mov	r0, #1
     158:	cmp	r6, #48	; 0x30
     15c:	add	r8, r0, r6, lsr #4
     160:	andlt	r6, r6, #15
     164:	b	170 <coda_inflateReset2+0x4c>
     168:	rsb	r6, r6, #0
     16c:	mov	r8, #0
     170:	cmp	r6, #0
     174:	bicne	r0, r6, #7
     178:	cmpne	r0, #8
     17c:	bne	248 <coda_inflateReset2+0x124>
     180:	ldr	r1, [r7, #52]	; 0x34
     184:	cmp	r1, #0
     188:	beq	198 <coda_inflateReset2+0x74>
     18c:	ldr	r0, [r7, #36]	; 0x24
     190:	cmp	r0, r6
     194:	bne	1a4 <coda_inflateReset2+0x80>
     198:	str	r6, [r7, #36]	; 0x24
     19c:	str	r8, [r7, #8]
     1a0:	b	1d0 <coda_inflateReset2+0xac>
     1a4:	ldr	r2, [r5, #36]	; 0x24
     1a8:	ldr	r0, [r5, #40]	; 0x28
     1ac:	blx	r2
     1b0:	mov	r0, #0
     1b4:	str	r0, [r7, #52]	; 0x34
     1b8:	ldr	r0, [r5, #28]
     1bc:	str	r6, [r7, #36]	; 0x24
     1c0:	str	r8, [r7, #8]
     1c4:	cmp	r0, #0
     1c8:	mov	r7, r0
     1cc:	beq	248 <coda_inflateReset2+0x124>
     1d0:	mov	r4, #0
     1d4:	mvn	r1, #0
     1d8:	str	r4, [r7, #40]	; 0x28
     1dc:	str	r4, [r7, #44]	; 0x2c
     1e0:	str	r4, [r7, #48]	; 0x30
     1e4:	str	r4, [r7, #28]
     1e8:	str	r4, [r5, #8]
     1ec:	str	r4, [r5, #20]
     1f0:	str	r4, [r5, #24]
     1f4:	ldr	r0, [r7, #8]
     1f8:	cmp	r0, #0
     1fc:	andne	r0, r0, #1
     200:	strne	r0, [r5, #48]	; 0x30
     204:	movw	r0, #7108	; 0x1bc4
     208:	str	r1, [r7, r0]
     20c:	mov	r0, #7104	; 0x1bc0
     210:	mov	r1, #1
     214:	str	r1, [r7, r0]
     218:	mov	r0, #32768	; 0x8000
     21c:	str	r4, [r7, #56]	; 0x38
     220:	str	r4, [r7, #60]	; 0x3c
     224:	str	r4, [r7, #32]
     228:	str	r0, [r7, #20]
     22c:	add	r0, r7, #1328	; 0x530
     230:	str	r4, [r7, #12]
     234:	str	r4, [r7]
     238:	str	r4, [r7, #4]
     23c:	str	r0, [r7, #108]	; 0x6c
     240:	str	r0, [r7, #76]	; 0x4c
     244:	str	r0, [r7, #80]	; 0x50
     248:	mov	r0, r4
     24c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000250 <coda_inflateInit2_>:
     250:	push	{r4, r5, r6, r7, fp, lr}
     254:	add	fp, sp, #16
     258:	mvn	r6, #5
     25c:	cmp	r2, #0
     260:	beq	278 <coda_inflateInit2_+0x28>
     264:	cmp	r3, #56	; 0x38
     268:	moveq	r4, r0
     26c:	ldrbeq	r0, [r2]
     270:	cmpeq	r0, #49	; 0x31
     274:	beq	280 <coda_inflateInit2_+0x30>
     278:	mov	r0, r6
     27c:	pop	{r4, r5, r6, r7, fp, pc}
     280:	cmp	r4, #0
     284:	beq	328 <coda_inflateInit2_+0xd8>
     288:	mov	r0, #0
     28c:	mov	r5, r1
     290:	str	r0, [r4, #24]
     294:	ldr	r3, [r4, #32]
     298:	cmp	r3, #0
     29c:	bne	2b0 <coda_inflateInit2_+0x60>
     2a0:	movw	r3, #0
     2a4:	str	r0, [r4, #40]	; 0x28
     2a8:	movt	r3, #0
     2ac:	str	r3, [r4, #32]
     2b0:	ldr	r0, [r4, #36]	; 0x24
     2b4:	mov	r1, #1
     2b8:	movw	r2, #7116	; 0x1bcc
     2bc:	cmp	r0, #0
     2c0:	movweq	r0, #0
     2c4:	movteq	r0, #0
     2c8:	streq	r0, [r4, #36]	; 0x24
     2cc:	ldr	r0, [r4, #40]	; 0x28
     2d0:	blx	r3
     2d4:	cmp	r0, #0
     2d8:	beq	334 <coda_inflateInit2_+0xe4>
     2dc:	mov	r6, #0
     2e0:	str	r0, [r4, #28]
     2e4:	mov	r7, r0
     2e8:	mov	r1, r5
     2ec:	str	r6, [r0, #52]	; 0x34
     2f0:	mov	r0, r4
     2f4:	bl	124 <coda_inflateReset2>
     2f8:	cmp	r0, #0
     2fc:	beq	278 <coda_inflateInit2_+0x28>
     300:	mov	r5, r0
     304:	ldr	r2, [r4, #36]	; 0x24
     308:	ldr	r0, [r4, #40]	; 0x28
     30c:	mov	r1, r7
     310:	blx	r2
     314:	mov	r0, #0
     318:	mov	r6, r5
     31c:	str	r0, [r4, #28]
     320:	mov	r0, r6
     324:	pop	{r4, r5, r6, r7, fp, pc}
     328:	mvn	r6, #1
     32c:	mov	r0, r6
     330:	pop	{r4, r5, r6, r7, fp, pc}
     334:	mvn	r6, #3
     338:	mov	r0, r6
     33c:	pop	{r4, r5, r6, r7, fp, pc}

00000340 <coda_inflateInit_>:
     340:	push	{r4, r5, fp, lr}
     344:	add	fp, sp, #8
     348:	mov	r4, r0
     34c:	mvn	r0, #5
     350:	cmp	r1, #0
     354:	beq	368 <coda_inflateInit_+0x28>
     358:	cmp	r2, #56	; 0x38
     35c:	ldrbeq	r1, [r1]
     360:	cmpeq	r1, #49	; 0x31
     364:	beq	36c <coda_inflateInit_+0x2c>
     368:	pop	{r4, r5, fp, pc}
     36c:	cmp	r4, #0
     370:	beq	444 <coda_inflateInit_+0x104>
     374:	mov	r0, #0
     378:	str	r0, [r4, #24]
     37c:	ldr	r3, [r4, #32]
     380:	cmp	r3, #0
     384:	bne	398 <coda_inflateInit_+0x58>
     388:	movw	r3, #0
     38c:	str	r0, [r4, #40]	; 0x28
     390:	movt	r3, #0
     394:	str	r3, [r4, #32]
     398:	ldr	r0, [r4, #36]	; 0x24
     39c:	mov	r1, #1
     3a0:	movw	r2, #7116	; 0x1bcc
     3a4:	mov	r5, #1
     3a8:	cmp	r0, #0
     3ac:	movweq	r0, #0
     3b0:	movteq	r0, #0
     3b4:	streq	r0, [r4, #36]	; 0x24
     3b8:	ldr	r0, [r4, #40]	; 0x28
     3bc:	blx	r3
     3c0:	cmp	r0, #0
     3c4:	beq	44c <coda_inflateInit_+0x10c>
     3c8:	str	r0, [r4, #28]
     3cc:	add	r2, pc, #140	; 0x8c
     3d0:	mov	r1, r0
     3d4:	mov	r0, #0
     3d8:	vld1.64	{d16-d17}, [r2 :128]
     3dc:	add	r2, r1, #36	; 0x24
     3e0:	str	r0, [r1, #52]	; 0x34
     3e4:	str	r0, [r1, #28]
     3e8:	vst1.32	{d16-d17}, [r2]
     3ec:	str	r5, [r4, #48]	; 0x30
     3f0:	str	r0, [r4, #24]
     3f4:	str	r0, [r4, #8]
     3f8:	str	r0, [r4, #20]
     3fc:	add	r3, pc, #108	; 0x6c
     400:	mov	r2, #7104	; 0x1bc0
     404:	vld1.64	{d16-d17}, [r3 :128]
     408:	str	r5, [r1, r2]
     40c:	add	r2, r1, #1328	; 0x530
     410:	mov	r3, #32768	; 0x8000
     414:	str	r2, [r1, #108]	; 0x6c
     418:	str	r0, [r1, #60]	; 0x3c
     41c:	str	r0, [r1, #56]	; 0x38
     420:	str	r0, [r1, #32]
     424:	str	r3, [r1, #20]
     428:	str	r2, [r1, #76]	; 0x4c
     42c:	str	r2, [r1, #80]	; 0x50
     430:	movw	r2, #7108	; 0x1bc4
     434:	vst1.32	{d16-d17}, [r1], r2
     438:	mvn	r2, #0
     43c:	str	r2, [r1]
     440:	pop	{r4, r5, fp, pc}
     444:	mvn	r0, #1
     448:	pop	{r4, r5, fp, pc}
     44c:	mvn	r0, #3
     450:	pop	{r4, r5, fp, pc}
     454:	nop	{0}
     458:	nop	{0}
     45c:	nop	{0}
     460:	.word	0x0000000f
	...
     478:	.word	0x00000001
     47c:	.word	0x00000000

00000480 <coda_inflatePrime>:
     480:	push	{fp, lr}
     484:	mov	fp, sp
     488:	mov	r3, r0
     48c:	mvn	r0, #1
     490:	cmp	r3, #0
     494:	beq	4e0 <coda_inflatePrime+0x60>
     498:	ldr	r3, [r3, #28]
     49c:	cmp	r3, #0
     4a0:	beq	4e0 <coda_inflatePrime+0x60>
     4a4:	cmn	r1, #1
     4a8:	ble	4e4 <coda_inflatePrime+0x64>
     4ac:	cmp	r1, #16
     4b0:	bgt	4e0 <coda_inflatePrime+0x60>
     4b4:	ldr	ip, [r3, #60]	; 0x3c
     4b8:	add	lr, ip, r1
     4bc:	cmp	lr, #32
     4c0:	pophi	{fp, pc}
     4c4:	mvn	r0, #0
     4c8:	str	lr, [r3, #60]	; 0x3c
     4cc:	bic	r0, r2, r0, lsl r1
     4d0:	ldr	r1, [r3, #56]	; 0x38
     4d4:	add	r0, r1, r0, lsl ip
     4d8:	str	r0, [r3, #56]	; 0x38
     4dc:	mov	r0, #0
     4e0:	pop	{fp, pc}
     4e4:	mov	r0, #0
     4e8:	str	r0, [r3, #56]	; 0x38
     4ec:	str	r0, [r3, #60]	; 0x3c
     4f0:	pop	{fp, pc}

000004f4 <coda_inflate>:
     4f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4f8:	add	fp, sp, #28
     4fc:	sub	sp, sp, #116	; 0x74
     500:	mov	r4, r0
     504:	mvn	r0, #1
     508:	cmp	r4, #0
     50c:	beq	2158 <coda_inflate+0x1c64>
     510:	ldr	sl, [r4, #28]
     514:	cmp	sl, #0
     518:	beq	2158 <coda_inflate+0x1c64>
     51c:	ldr	lr, [r4, #12]
     520:	cmp	lr, #0
     524:	beq	2158 <coda_inflate+0x1c64>
     528:	ldr	ip, [r4]
     52c:	cmp	ip, #0
     530:	beq	214c <coda_inflate+0x1c58>
     534:	movw	r2, #7112	; 0x1bc8
     538:	ldr	r3, [sl]
     53c:	str	r1, [fp, #-56]	; 0xffffffc8
     540:	str	r4, [fp, #-36]	; 0xffffffdc
     544:	add	r0, sl, r2
     548:	movw	r2, #7108	; 0x1bc4
     54c:	str	r0, [sp, #52]	; 0x34
     550:	add	r0, sl, r2
     554:	str	r0, [fp, #-48]	; 0xffffffd0
     558:	add	r0, sl, #128	; 0x80
     55c:	str	r0, [sp, #36]	; 0x24
     560:	sub	r0, r1, #5
     564:	cmp	r3, #11
     568:	mov	r1, #0
     56c:	str	r0, [fp, #-64]	; 0xffffffc0
     570:	add	r0, sl, #7104	; 0x1bc0
     574:	moveq	r3, #12
     578:	str	r1, [fp, #-52]	; 0xffffffcc
     57c:	str	r0, [sp, #44]	; 0x2c
     580:	add	r0, sl, #88	; 0x58
     584:	streq	r3, [sl]
     588:	str	r0, [sp, #40]	; 0x28
     58c:	add	r0, sl, #624	; 0x270
     590:	ldr	r9, [r4, #4]
     594:	ldr	r8, [r4, #16]
     598:	ldr	r5, [sl, #56]	; 0x38
     59c:	ldr	r6, [sl, #60]	; 0x3c
     5a0:	str	r0, [sp, #48]	; 0x30
     5a4:	add	r0, sl, #752	; 0x2f0
     5a8:	str	r0, [sp, #68]	; 0x44
     5ac:	add	r0, sl, #112	; 0x70
     5b0:	str	r0, [sp, #72]	; 0x48
     5b4:	add	r0, sl, #84	; 0x54
     5b8:	str	r0, [sp, #64]	; 0x40
     5bc:	add	r0, sl, #108	; 0x6c
     5c0:	str	r9, [fp, #-68]	; 0xffffffbc
     5c4:	str	r8, [fp, #-44]	; 0xffffffd4
     5c8:	str	r0, [sp, #60]	; 0x3c
     5cc:	add	r0, sl, #1328	; 0x530
     5d0:	str	r0, [sp, #56]	; 0x38
     5d4:	cmp	r3, #30
     5d8:	bhi	218c <coda_inflate+0x1c98>
     5dc:	add	r2, pc, #8
     5e0:	mvn	r0, #2
     5e4:	mov	r4, #1
     5e8:	ldr	pc, [r2, r3, lsl #2]
     5ec:	.word	0x00000668
     5f0:	.word	0x000006c8
     5f4:	.word	0x00000714
     5f8:	.word	0x00000720
     5fc:	.word	0x000013a8
     600:	.word	0x00001470
     604:	.word	0x00001550
     608:	.word	0x00001620
     60c:	.word	0x000016e8
     610:	.word	0x0000072c
     614:	.word	0x00000af4
     618:	.word	0x00000b34
     61c:	.word	0x00000b40
     620:	.word	0x000007bc
     624:	.word	0x00000a38
     628:	.word	0x00000a40
     62c:	.word	0x0000085c
     630:	.word	0x000008a8
     634:	.word	0x000008bc
     638:	.word	0x00001a74
     63c:	.word	0x00001a7c
     640:	.word	0x000008c4
     644:	.word	0x00001c64
     648:	.word	0x00000928
     64c:	.word	0x00001e18
     650:	.word	0x00000930
     654:	.word	0x0000095c
     658:	.word	0x0000194c
     65c:	.word	0x00002228
     660:	.word	0x00002210
     664:	.word	0x00002278
     668:	ldr	r0, [sl, #8]
     66c:	cmp	r0, #0
     670:	beq	ac4 <coda_inflate+0x5d0>
     674:	cmp	r6, #16
     678:	bcs	1844 <coda_inflate+0x1350>
     67c:	cmp	r9, #0
     680:	beq	2208 <coda_inflate+0x1d14>
     684:	mov	r2, ip
     688:	sub	r3, r9, #1
     68c:	ldrb	r1, [r2], #1
     690:	add	r5, r5, r1, lsl r6
     694:	add	r1, r6, #8
     698:	cmp	r1, #16
     69c:	bcs	1838 <coda_inflate+0x1344>
     6a0:	cmp	r3, #0
     6a4:	beq	21f4 <coda_inflate+0x1d00>
     6a8:	ldrb	r2, [ip, #1]
     6ac:	add	r6, r6, #16
     6b0:	add	ip, ip, #2
     6b4:	sub	r9, r9, #2
     6b8:	add	r5, r5, r2, lsl r1
     6bc:	tst	r0, #2
     6c0:	bne	184c <coda_inflate+0x1358>
     6c4:	b	18b0 <coda_inflate+0x13bc>
     6c8:	cmp	r6, #16
     6cc:	bcs	c98 <coda_inflate+0x7a4>
     6d0:	cmp	r9, #0
     6d4:	beq	2208 <coda_inflate+0x1d14>
     6d8:	mov	r1, ip
     6dc:	sub	r2, r9, #1
     6e0:	ldrb	r0, [r1], #1
     6e4:	add	r5, r5, r0, lsl r6
     6e8:	add	r0, r6, #8
     6ec:	cmp	r0, #16
     6f0:	bcs	c8c <coda_inflate+0x798>
     6f4:	cmp	r2, #0
     6f8:	beq	21bc <coda_inflate+0x1cc8>
     6fc:	ldrb	r1, [ip, #1]
     700:	add	r6, r6, #16
     704:	add	ip, ip, #2
     708:	sub	r9, r9, #2
     70c:	add	r5, r5, r1, lsl r0
     710:	b	c98 <coda_inflate+0x7a4>
     714:	cmp	r6, #31
     718:	bls	1224 <coda_inflate+0xd30>
     71c:	b	12b4 <coda_inflate+0xdc0>
     720:	cmp	r6, #15
     724:	bls	1304 <coda_inflate+0xe10>
     728:	b	134c <coda_inflate+0xe58>
     72c:	cmp	r6, #32
     730:	bcs	ad4 <coda_inflate+0x5e0>
     734:	cmp	r9, #0
     738:	beq	2208 <coda_inflate+0x1d14>
     73c:	mov	r1, ip
     740:	sub	r2, r9, #1
     744:	ldrb	r0, [r1], #1
     748:	add	r5, r5, r0, lsl r6
     74c:	add	r0, r6, #8
     750:	cmp	r0, #32
     754:	bcs	acc <coda_inflate+0x5d8>
     758:	cmp	r2, #0
     75c:	beq	21bc <coda_inflate+0x1cc8>
     760:	ldrb	r1, [ip, #1]
     764:	sub	r2, r9, #2
     768:	add	r5, r5, r1, lsl r0
     76c:	add	r0, r6, #16
     770:	add	r1, ip, #2
     774:	cmp	r0, #31
     778:	bhi	acc <coda_inflate+0x5d8>
     77c:	cmp	r2, #0
     780:	beq	21bc <coda_inflate+0x1cc8>
     784:	ldrb	r1, [ip, #2]
     788:	add	r6, r6, #24
     78c:	cmp	r6, #31
     790:	add	r5, r5, r1, lsl r0
     794:	add	r0, ip, #3
     798:	sub	r1, r9, #3
     79c:	bhi	20bc <coda_inflate+0x1bc8>
     7a0:	cmp	r1, #0
     7a4:	beq	2204 <coda_inflate+0x1d10>
     7a8:	ldrb	r0, [ip, #3]
     7ac:	add	ip, ip, #4
     7b0:	sub	r9, r9, #4
     7b4:	add	r5, r5, r0, lsl r6
     7b8:	b	ad4 <coda_inflate+0x5e0>
     7bc:	and	r0, r6, #7
     7c0:	sub	r6, r6, r0
     7c4:	lsr	r5, r5, r0
     7c8:	cmp	r6, #31
     7cc:	bhi	a08 <coda_inflate+0x514>
     7d0:	cmp	r9, #0
     7d4:	beq	2208 <coda_inflate+0x1d14>
     7d8:	mov	r1, ip
     7dc:	sub	r2, r9, #1
     7e0:	ldrb	r0, [r1], #1
     7e4:	add	r5, r5, r0, lsl r6
     7e8:	add	r0, r6, #8
     7ec:	cmp	r0, #32
     7f0:	bcs	9fc <coda_inflate+0x508>
     7f4:	cmp	r2, #0
     7f8:	beq	21bc <coda_inflate+0x1cc8>
     7fc:	ldrb	r1, [ip, #1]
     800:	sub	r2, r9, #2
     804:	add	r5, r5, r1, lsl r0
     808:	add	r0, r6, #16
     80c:	add	r1, ip, #2
     810:	cmp	r0, #31
     814:	bhi	9fc <coda_inflate+0x508>
     818:	cmp	r2, #0
     81c:	beq	21bc <coda_inflate+0x1cc8>
     820:	ldrb	r1, [ip, #2]
     824:	sub	r2, r9, #3
     828:	add	r5, r5, r1, lsl r0
     82c:	add	r0, r6, #24
     830:	add	r1, ip, #3
     834:	cmp	r0, #31
     838:	bhi	9fc <coda_inflate+0x508>
     83c:	cmp	r2, #0
     840:	beq	21bc <coda_inflate+0x1cc8>
     844:	ldrb	r1, [ip, #3]
     848:	add	r6, r6, #32
     84c:	add	ip, ip, #4
     850:	sub	r9, r9, #4
     854:	add	r5, r5, r1, lsl r0
     858:	b	a08 <coda_inflate+0x514>
     85c:	cmp	r6, #14
     860:	bcs	cc8 <coda_inflate+0x7d4>
     864:	cmp	r9, #0
     868:	beq	2208 <coda_inflate+0x1d14>
     86c:	mov	r1, ip
     870:	sub	r2, r9, #1
     874:	ldrb	r0, [r1], #1
     878:	add	r5, r5, r0, lsl r6
     87c:	add	r0, r6, #8
     880:	cmp	r0, #14
     884:	bcs	cbc <coda_inflate+0x7c8>
     888:	cmp	r2, #0
     88c:	beq	21bc <coda_inflate+0x1cc8>
     890:	ldrb	r1, [ip, #1]
     894:	add	r6, r6, #16
     898:	add	ip, ip, #2
     89c:	sub	r9, r9, #2
     8a0:	add	r5, r5, r1, lsl r0
     8a4:	b	cc8 <coda_inflate+0x7d4>
     8a8:	ldr	r1, [sl, #92]	; 0x5c
     8ac:	ldr	r0, [sl, #104]	; 0x68
     8b0:	cmp	r0, r1
     8b4:	bcc	d24 <coda_inflate+0x830>
     8b8:	b	d84 <coda_inflate+0x890>
     8bc:	ldr	r4, [sl, #104]	; 0x68
     8c0:	b	e90 <coda_inflate+0x99c>
     8c4:	ldr	r0, [sl, #72]	; 0x48
     8c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     8cc:	cmp	r0, #0
     8d0:	beq	1c50 <coda_inflate+0x175c>
     8d4:	cmp	r6, r0
     8d8:	bcs	8fc <coda_inflate+0x408>
     8dc:	cmp	r9, #0
     8e0:	beq	2160 <coda_inflate+0x1c6c>
     8e4:	ldrb	r1, [ip], #1
     8e8:	sub	r9, r9, #1
     8ec:	add	r5, r5, r1, lsl r6
     8f0:	add	r6, r6, #8
     8f4:	cmp	r6, r0
     8f8:	bcc	8dc <coda_inflate+0x3e8>
     8fc:	ldr	r2, [sl, #64]	; 0x40
     900:	mvn	r1, #0
     904:	sub	r6, r6, r0
     908:	bic	r1, r5, r1, lsl r0
     90c:	lsr	r5, r5, r0
     910:	add	r1, r2, r1
     914:	str	r1, [sl, #64]	; 0x40
     918:	ldr	r2, [r3]
     91c:	add	r2, r2, r0
     920:	str	r2, [r3]
     924:	b	1c54 <coda_inflate+0x1760>
     928:	ldr	r0, [sl, #72]	; 0x48
     92c:	b	1db4 <coda_inflate+0x18c0>
     930:	cmp	r8, #0
     934:	beq	217c <coda_inflate+0x1c88>
     938:	ldr	r0, [sl, #64]	; 0x40
     93c:	sub	r8, r8, #1
     940:	strb	r0, [lr], #1
     944:	mov	r0, #20
     948:	str	r0, [sl]
     94c:	ldr	r3, [sl]
     950:	cmp	r3, #30
     954:	bls	5dc <coda_inflate+0xe8>
     958:	b	218c <coda_inflate+0x1c98>
     95c:	ldr	r0, [sl, #8]
     960:	cmp	r0, #0
     964:	beq	1944 <coda_inflate+0x1450>
     968:	cmp	r6, #31
     96c:	bhi	c3c <coda_inflate+0x748>
     970:	cmp	r9, #0
     974:	beq	2208 <coda_inflate+0x1d14>
     978:	mov	r1, ip
     97c:	sub	r2, r9, #1
     980:	ldrb	r0, [r1], #1
     984:	add	r5, r5, r0, lsl r6
     988:	add	r0, r6, #8
     98c:	cmp	r0, #32
     990:	bcs	c30 <coda_inflate+0x73c>
     994:	cmp	r2, #0
     998:	beq	21bc <coda_inflate+0x1cc8>
     99c:	ldrb	r1, [ip, #1]
     9a0:	sub	r2, r9, #2
     9a4:	add	r5, r5, r1, lsl r0
     9a8:	add	r0, r6, #16
     9ac:	add	r1, ip, #2
     9b0:	cmp	r0, #31
     9b4:	bhi	c30 <coda_inflate+0x73c>
     9b8:	cmp	r2, #0
     9bc:	beq	21bc <coda_inflate+0x1cc8>
     9c0:	ldrb	r1, [ip, #2]
     9c4:	sub	r2, r9, #3
     9c8:	add	r5, r5, r1, lsl r0
     9cc:	add	r0, r6, #24
     9d0:	add	r1, ip, #3
     9d4:	cmp	r0, #31
     9d8:	bhi	c30 <coda_inflate+0x73c>
     9dc:	cmp	r2, #0
     9e0:	beq	21bc <coda_inflate+0x1cc8>
     9e4:	ldrb	r1, [ip, #3]
     9e8:	add	r6, r6, #32
     9ec:	add	ip, ip, #4
     9f0:	sub	r9, r9, #4
     9f4:	add	r5, r5, r1, lsl r0
     9f8:	b	c3c <coda_inflate+0x748>
     9fc:	mov	ip, r1
     a00:	mov	r9, r2
     a04:	mov	r6, r0
     a08:	uxth	r0, r5
     a0c:	mvn	r1, r5
     a10:	cmp	r0, r1, lsr #16
     a14:	bne	ab8 <coda_inflate+0x5c4>
     a18:	mov	r1, #14
     a1c:	mov	r5, #0
     a20:	mov	r6, #0
     a24:	str	r1, [sl]
     a28:	str	r0, [sl, #64]	; 0x40
     a2c:	ldr	r0, [fp, #-56]	; 0xffffffc8
     a30:	cmp	r0, #6
     a34:	beq	238c <coda_inflate+0x1e98>
     a38:	mov	r0, #15
     a3c:	str	r0, [sl]
     a40:	ldr	r4, [sl, #64]	; 0x40
     a44:	cmp	r4, #0
     a48:	beq	1d58 <coda_inflate+0x1864>
     a4c:	cmp	r4, r9
     a50:	movhi	r4, r9
     a54:	cmp	r4, r8
     a58:	movhi	r4, r8
     a5c:	cmp	r4, #0
     a60:	beq	217c <coda_inflate+0x1c88>
     a64:	mov	r0, lr
     a68:	mov	r1, ip
     a6c:	mov	r2, r4
     a70:	str	r8, [fp, #-40]	; 0xffffffd8
     a74:	mov	r8, lr
     a78:	mov	r7, ip
     a7c:	bl	0 <memcpy>
     a80:	ldr	r0, [sl, #64]	; 0x40
     a84:	mov	lr, r8
     a88:	ldr	r8, [fp, #-40]	; 0xffffffd8
     a8c:	mov	ip, r7
     a90:	add	ip, r7, r4
     a94:	sub	r9, r9, r4
     a98:	add	lr, lr, r4
     a9c:	sub	r0, r0, r4
     aa0:	sub	r8, r8, r4
     aa4:	str	r0, [sl, #64]	; 0x40
     aa8:	ldr	r3, [sl]
     aac:	cmp	r3, #30
     ab0:	bls	5dc <coda_inflate+0xe8>
     ab4:	b	218c <coda_inflate+0x1c98>
     ab8:	movw	r0, #0
     abc:	movt	r0, #0
     ac0:	b	209c <coda_inflate+0x1ba8>
     ac4:	mov	r0, #12
     ac8:	b	20a8 <coda_inflate+0x1bb4>
     acc:	mov	ip, r1
     ad0:	mov	r9, r2
     ad4:	ldr	r1, [fp, #-36]	; 0xffffffdc
     ad8:	rev	r0, r5
     adc:	mov	r5, #0
     ae0:	mov	r6, #0
     ae4:	str	r0, [sl, #24]
     ae8:	str	r0, [r1, #48]	; 0x30
     aec:	mov	r0, #10
     af0:	str	r0, [sl]
     af4:	ldr	r0, [sl, #12]
     af8:	cmp	r0, #0
     afc:	beq	21cc <coda_inflate+0x1cd8>
     b00:	mov	r0, #0
     b04:	mov	r1, #0
     b08:	mov	r2, #0
     b0c:	mov	r4, lr
     b10:	mov	r7, ip
     b14:	bl	0 <coda_adler32>
     b18:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b1c:	str	r0, [sl, #24]
     b20:	mov	ip, r7
     b24:	mov	lr, r4
     b28:	str	r0, [r1, #48]	; 0x30
     b2c:	mov	r0, #11
     b30:	str	r0, [sl]
     b34:	ldr	r0, [fp, #-64]	; 0xffffffc0
     b38:	cmp	r0, #2
     b3c:	bcc	217c <coda_inflate+0x1c88>
     b40:	ldr	r0, [sl, #4]
     b44:	cmp	r0, #0
     b48:	beq	b70 <coda_inflate+0x67c>
     b4c:	mov	r0, #26
     b50:	str	r0, [sl]
     b54:	and	r0, r6, #7
     b58:	ldr	r3, [sl]
     b5c:	sub	r6, r6, r0
     b60:	lsr	r5, r5, r0
     b64:	cmp	r3, #30
     b68:	bls	5dc <coda_inflate+0xe8>
     b6c:	b	218c <coda_inflate+0x1c98>
     b70:	cmp	r6, #2
     b74:	bhi	b90 <coda_inflate+0x69c>
     b78:	cmp	r9, #0
     b7c:	beq	2160 <coda_inflate+0x1c6c>
     b80:	ldrb	r0, [ip], #1
     b84:	sub	r9, r9, #1
     b88:	add	r5, r5, r0, lsl r6
     b8c:	add	r6, r6, #8
     b90:	and	r0, r5, #1
     b94:	str	r0, [sl, #4]
     b98:	ubfx	r1, r5, #1, #2
     b9c:	add	r2, pc, #4
     ba0:	mov	r0, #13
     ba4:	ldr	pc, [r2, r1, lsl #2]
     ba8:	.word	0x00000c14
     bac:	.word	0x00000bb8
     bb0:	.word	0x00000bf8
     bb4:	.word	0x00000c00
     bb8:	movw	r1, #0
     bbc:	movw	r3, #0
     bc0:	mov	r0, #9
     bc4:	mov	r2, #5
     bc8:	movt	r1, #0
     bcc:	movt	r3, #0
     bd0:	str	r1, [sl, #76]	; 0x4c
     bd4:	str	r3, [sl, #80]	; 0x50
     bd8:	str	r0, [sl, #84]	; 0x54
     bdc:	mov	r0, #19
     be0:	str	r2, [sl, #88]	; 0x58
     be4:	str	r0, [sl]
     be8:	ldr	r0, [fp, #-56]	; 0xffffffc8
     bec:	cmp	r0, #6
     bf0:	bne	c18 <coda_inflate+0x724>
     bf4:	b	23a8 <coda_inflate+0x1eb4>
     bf8:	mov	r0, #16
     bfc:	b	c14 <coda_inflate+0x720>
     c00:	ldr	r1, [fp, #-36]	; 0xffffffdc
     c04:	movw	r0, #0
     c08:	movt	r0, #0
     c0c:	str	r0, [r1, #24]
     c10:	mov	r0, #29
     c14:	str	r0, [sl]
     c18:	ldr	r3, [sl]
     c1c:	sub	r6, r6, #3
     c20:	lsr	r5, r5, #3
     c24:	cmp	r3, #30
     c28:	bls	5dc <coda_inflate+0xe8>
     c2c:	b	218c <coda_inflate+0x1c98>
     c30:	mov	ip, r1
     c34:	mov	r9, r2
     c38:	mov	r6, r0
     c3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     c40:	ldr	r1, [fp, #-36]	; 0xffffffdc
     c44:	subs	r2, r0, r8
     c48:	ldr	r0, [r1, #20]
     c4c:	add	r0, r0, r2
     c50:	str	r0, [r1, #20]
     c54:	ldr	r0, [sl, #28]
     c58:	add	r0, r0, r2
     c5c:	str	r0, [sl, #28]
     c60:	beq	11cc <coda_inflate+0xcd8>
     c64:	ldr	r3, [sl, #16]
     c68:	ldr	r0, [sl, #24]
     c6c:	str	r8, [fp, #-40]	; 0xffffffd8
     c70:	mov	r8, ip
     c74:	mov	r7, lr
     c78:	sub	r1, lr, r2
     c7c:	cmp	r3, #0
     c80:	beq	1904 <coda_inflate+0x1410>
     c84:	bl	0 <coda_crc32>
     c88:	b	1908 <coda_inflate+0x1414>
     c8c:	mov	ip, r1
     c90:	mov	r9, r2
     c94:	mov	r6, r0
     c98:	uxtb	r0, r5
     c9c:	str	r5, [sl, #16]
     ca0:	cmp	r0, #8
     ca4:	bne	2094 <coda_inflate+0x1ba0>
     ca8:	tst	r5, #57344	; 0xe000
     cac:	beq	11d4 <coda_inflate+0xce0>
     cb0:	movw	r0, #0
     cb4:	movt	r0, #0
     cb8:	b	209c <coda_inflate+0x1ba8>
     cbc:	mov	ip, r1
     cc0:	mov	r9, r2
     cc4:	mov	r6, r0
     cc8:	ubfx	r0, r5, #5, #5
     ccc:	movw	r2, #257	; 0x101
     cd0:	movw	r3, #286	; 0x11e
     cd4:	sub	r6, r6, #14
     cd8:	add	r1, r0, #1
     cdc:	str	r1, [sl, #100]	; 0x64
     ce0:	and	r1, r5, #31
     ce4:	add	r2, r1, r2
     ce8:	cmp	r2, r3
     cec:	str	r2, [sl, #96]	; 0x60
     cf0:	ubfx	r1, r5, #10, #4
     cf4:	lsr	r5, r5, #14
     cf8:	add	r1, r1, #4
     cfc:	cmpls	r0, #30
     d00:	str	r1, [sl, #92]	; 0x5c
     d04:	bcc	d14 <coda_inflate+0x820>
     d08:	movw	r0, #0
     d0c:	movt	r0, #0
     d10:	b	209c <coda_inflate+0x1ba8>
     d14:	mov	r0, #17
     d18:	str	r0, [sl]
     d1c:	mov	r0, #0
     d20:	str	r0, [sl, #104]	; 0x68
     d24:	movw	r2, #0
     d28:	movt	r2, #0
     d2c:	add	r2, r2, r0, lsl #1
     d30:	cmp	r6, #2
     d34:	bls	d68 <coda_inflate+0x874>
     d38:	add	r0, r0, #1
     d3c:	and	r7, r5, #7
     d40:	sub	r6, r6, #3
     d44:	lsr	r5, r5, #3
     d48:	str	r0, [sl, #104]	; 0x68
     d4c:	cmp	r0, r1
     d50:	ldrh	r3, [r2], #2
     d54:	add	r3, sl, r3, lsl #1
     d58:	strh	r7, [r3, #112]	; 0x70
     d5c:	bcs	d84 <coda_inflate+0x890>
     d60:	cmp	r6, #2
     d64:	bhi	d38 <coda_inflate+0x844>
     d68:	cmp	r9, #0
     d6c:	beq	2160 <coda_inflate+0x1c6c>
     d70:	ldrb	r3, [ip], #1
     d74:	sub	r9, r9, #1
     d78:	add	r5, r5, r3, lsl r6
     d7c:	add	r6, r6, #8
     d80:	b	d38 <coda_inflate+0x844>
     d84:	str	ip, [sp, #32]
     d88:	ldr	ip, [sp, #68]	; 0x44
     d8c:	ldr	r1, [sp, #72]	; 0x48
     d90:	ldr	r3, [sp, #60]	; 0x3c
     d94:	str	r8, [fp, #-40]	; 0xffffffd8
     d98:	mov	r8, lr
     d9c:	cmp	r0, #18
     da0:	bhi	e20 <coda_inflate+0x92c>
     da4:	rsb	r2, r0, #1
     da8:	tst	r2, #1
     dac:	mov	r2, r0
     db0:	beq	dd4 <coda_inflate+0x8e0>
     db4:	movw	r2, #0
     db8:	movt	r2, #0
     dbc:	add	r2, r2, r0, lsl #1
     dc0:	ldrh	r2, [r2]
     dc4:	add	r7, sl, r2, lsl #1
     dc8:	mov	r2, #0
     dcc:	strh	r2, [r7, #112]	; 0x70
     dd0:	add	r2, r0, #1
     dd4:	cmp	r0, #18
     dd8:	beq	e18 <coda_inflate+0x924>
     ddc:	movw	r0, #0
     de0:	sub	r7, r2, #19
     de4:	movt	r0, #0
     de8:	add	r0, r0, r2, lsl #1
     dec:	add	r0, r0, #2
     df0:	ldrh	r2, [r0, #-2]
     df4:	mov	r4, #0
     df8:	adds	r7, r7, #2
     dfc:	add	r2, r1, r2, lsl #1
     e00:	strh	r4, [r2]
     e04:	ldrh	r2, [r0]
     e08:	add	r0, r0, #4
     e0c:	add	r2, r1, r2, lsl #1
     e10:	strh	r4, [r2]
     e14:	bne	df0 <coda_inflate+0x8fc>
     e18:	mov	r0, #19
     e1c:	str	r0, [sl, #104]	; 0x68
     e20:	mov	r0, #7
     e24:	mov	r2, #19
     e28:	mov	r4, #0
     e2c:	str	r0, [sl, #84]	; 0x54
     e30:	ldr	r0, [sp, #56]	; 0x38
     e34:	str	r0, [sl, #76]	; 0x4c
     e38:	str	r0, [sl, #108]	; 0x6c
     e3c:	ldr	r0, [sp, #64]	; 0x40
     e40:	stm	sp, {r0, ip}
     e44:	mov	r0, #0
     e48:	bl	0 <coda_inflate_table>
     e4c:	cmp	r0, #0
     e50:	beq	e70 <coda_inflate+0x97c>
     e54:	ldr	r1, [fp, #-36]	; 0xffffffdc
     e58:	str	r0, [fp, #-52]	; 0xffffffcc
     e5c:	movw	r0, #0
     e60:	ldr	ip, [sp, #32]
     e64:	mov	lr, r8
     e68:	movt	r0, #0
     e6c:	b	202c <coda_inflate+0x1b38>
     e70:	mov	lr, r8
     e74:	ldr	ip, [sp, #32]
     e78:	ldr	r8, [fp, #-40]	; 0xffffffd8
     e7c:	mov	r0, #18
     e80:	str	r0, [sl]
     e84:	mov	r0, #0
     e88:	str	r4, [sl, #104]	; 0x68
     e8c:	str	r0, [fp, #-52]	; 0xffffffcc
     e90:	ldr	r1, [sl, #96]	; 0x60
     e94:	ldr	r0, [sl, #100]	; 0x64
     e98:	str	lr, [fp, #-60]	; 0xffffffc4
     e9c:	str	r1, [sp, #28]
     ea0:	add	r1, r0, r1
     ea4:	cmp	r4, r1
     ea8:	bcs	1138 <coda_inflate+0xc44>
     eac:	ldr	r0, [sl, #84]	; 0x54
     eb0:	ldr	lr, [sl, #76]	; 0x4c
     eb4:	mvn	r2, #0
     eb8:	str	r8, [fp, #-40]	; 0xffffffd8
     ebc:	mvn	r7, r2, lsl r0
     ec0:	and	r3, r5, r7
     ec4:	add	r0, lr, r3, lsl #2
     ec8:	ldrb	r0, [r0, #1]
     ecc:	cmp	r6, r0
     ed0:	bcs	f00 <coda_inflate+0xa0c>
     ed4:	cmp	r9, #0
     ed8:	beq	216c <coda_inflate+0x1c78>
     edc:	ldrb	r0, [ip], #1
     ee0:	sub	r9, r9, #1
     ee4:	add	r5, r5, r0, lsl r6
     ee8:	add	r6, r6, #8
     eec:	and	r3, r5, r7
     ef0:	add	r0, lr, r3, lsl #2
     ef4:	ldrb	r0, [r0, #1]
     ef8:	cmp	r6, r0
     efc:	bcc	ed4 <coda_inflate+0x9e0>
     f00:	add	r2, lr, r3, lsl #2
     f04:	ldrh	r2, [r2, #2]
     f08:	cmp	r2, #15
     f0c:	bhi	f4c <coda_inflate+0xa58>
     f10:	mov	r8, r1
     f14:	mov	r1, r7
     f18:	add	r7, sl, r4, lsl #1
     f1c:	add	r3, r4, #1
     f20:	sub	r6, r6, r0
     f24:	lsr	r5, r5, r0
     f28:	str	r3, [sl, #104]	; 0x68
     f2c:	mov	r4, r3
     f30:	strh	r2, [r7, #112]	; 0x70
     f34:	mov	r7, r1
     f38:	mov	r1, r8
     f3c:	ldr	r8, [fp, #-40]	; 0xffffffd8
     f40:	cmp	r4, r1
     f44:	bcc	ec0 <coda_inflate+0x9cc>
     f48:	b	1138 <coda_inflate+0xc44>
     f4c:	cmp	r2, #16
     f50:	beq	fac <coda_inflate+0xab8>
     f54:	ldr	r8, [fp, #-40]	; 0xffffffd8
     f58:	cmp	r2, #17
     f5c:	bne	1008 <coda_inflate+0xb14>
     f60:	add	r2, r0, #3
     f64:	cmp	r6, r2
     f68:	bcs	f8c <coda_inflate+0xa98>
     f6c:	cmp	r9, #0
     f70:	beq	216c <coda_inflate+0x1c78>
     f74:	ldrb	r3, [ip], #1
     f78:	sub	r9, r9, #1
     f7c:	add	r5, r5, r3, lsl r6
     f80:	add	r6, r6, #8
     f84:	cmp	r6, r2
     f88:	bcc	f6c <coda_inflate+0xa78>
     f8c:	mov	r2, #7
     f90:	and	r2, r2, r5, lsr r0
     f94:	add	r3, r2, #3
     f98:	sub	r2, r6, r0
     f9c:	lsr	r0, r5, r0
     fa0:	sub	r6, r2, #3
     fa4:	lsr	r5, r0, #3
     fa8:	b	1050 <coda_inflate+0xb5c>
     fac:	ldr	r8, [fp, #-40]	; 0xffffffd8
     fb0:	add	r2, r0, #2
     fb4:	cmp	r6, r2
     fb8:	bcs	fdc <coda_inflate+0xae8>
     fbc:	cmp	r9, #0
     fc0:	beq	216c <coda_inflate+0x1c78>
     fc4:	ldrb	r3, [ip], #1
     fc8:	sub	r9, r9, #1
     fcc:	add	r5, r5, r3, lsl r6
     fd0:	add	r6, r6, #8
     fd4:	cmp	r6, r2
     fd8:	bcc	fbc <coda_inflate+0xac8>
     fdc:	sub	r6, r6, r0
     fe0:	lsr	r2, r5, r0
     fe4:	cmp	r4, #0
     fe8:	beq	2138 <coda_inflate+0x1c44>
     fec:	add	r0, sl, r4, lsl #1
     ff0:	lsr	r5, r2, #2
     ff4:	and	r2, r2, #3
     ff8:	sub	r6, r6, #2
     ffc:	add	r3, r2, #3
    1000:	ldrh	r0, [r0, #110]	; 0x6e
    1004:	b	1054 <coda_inflate+0xb60>
    1008:	add	r2, r0, #7
    100c:	cmp	r6, r2
    1010:	bcs	1034 <coda_inflate+0xb40>
    1014:	cmp	r9, #0
    1018:	beq	216c <coda_inflate+0x1c78>
    101c:	ldrb	r3, [ip], #1
    1020:	sub	r9, r9, #1
    1024:	add	r5, r5, r3, lsl r6
    1028:	add	r6, r6, #8
    102c:	cmp	r6, r2
    1030:	bcc	1014 <coda_inflate+0xb20>
    1034:	mov	r2, #127	; 0x7f
    1038:	and	r2, r2, r5, lsr r0
    103c:	add	r3, r2, #11
    1040:	sub	r2, r6, r0
    1044:	lsr	r0, r5, r0
    1048:	sub	r6, r2, #7
    104c:	lsr	r5, r0, #7
    1050:	mov	r0, #0
    1054:	add	r2, r3, r4
    1058:	cmp	r2, r1
    105c:	bhi	20c8 <coda_inflate+0x1bd4>
    1060:	cmp	r3, #7
    1064:	str	r1, [sp, #24]
    1068:	bls	1110 <coda_inflate+0xc1c>
    106c:	vdup.16	q8, r0
    1070:	and	r1, r3, #248	; 0xf8
    1074:	str	r7, [sp, #20]
    1078:	mov	r7, #1
    107c:	str	ip, [sp, #32]
    1080:	subs	r2, r1, #8
    1084:	str	r1, [sp, #16]
    1088:	add	ip, r7, r2, lsr #3
    108c:	and	r7, ip, #1
    1090:	str	r7, [sp, #12]
    1094:	beq	10c8 <coda_inflate+0xbd4>
    1098:	ldr	r1, [sp, #36]	; 0x24
    109c:	sub	ip, ip, r7
    10a0:	mov	r7, #0
    10a4:	add	r2, r1, r4, lsl #1
    10a8:	sub	r8, r2, #16
    10ac:	mov	r1, #32
    10b0:	subs	ip, ip, #2
    10b4:	add	r7, r7, #16
    10b8:	vst1.16	{d16-d17}, [r8]
    10bc:	vst1.16	{d16-d17}, [r2], r1
    10c0:	bne	10a8 <coda_inflate+0xbb4>
    10c4:	b	10cc <coda_inflate+0xbd8>
    10c8:	mov	r7, #0
    10cc:	ldr	r1, [sp, #12]
    10d0:	cmp	r1, #0
    10d4:	beq	10e8 <coda_inflate+0xbf4>
    10d8:	add	r1, r4, r7
    10dc:	add	r1, sl, r1, lsl #1
    10e0:	add	r1, r1, #112	; 0x70
    10e4:	vst1.16	{d16-d17}, [r1]
    10e8:	ldr	r1, [sp, #16]
    10ec:	ldr	r8, [fp, #-40]	; 0xffffffd8
    10f0:	ldr	ip, [sp, #32]
    10f4:	add	r4, r4, r1
    10f8:	cmp	r3, r1
    10fc:	bne	1108 <coda_inflate+0xc14>
    1100:	ldr	r7, [sp, #20]
    1104:	b	1128 <coda_inflate+0xc34>
    1108:	ldr	r7, [sp, #20]
    110c:	sub	r3, r3, r1
    1110:	ldr	r1, [sp, #72]	; 0x48
    1114:	add	r2, r1, r4, lsl #1
    1118:	strh	r0, [r2], #2
    111c:	add	r4, r4, #1
    1120:	subs	r3, r3, #1
    1124:	bne	1118 <coda_inflate+0xc24>
    1128:	ldr	r1, [sp, #24]
    112c:	str	r4, [sl, #104]	; 0x68
    1130:	cmp	r4, r1
    1134:	bcc	ec0 <coda_inflate+0x9cc>
    1138:	ldr	r0, [sp, #48]	; 0x30
    113c:	ldrh	r0, [r0]
    1140:	cmp	r0, #0
    1144:	beq	11a0 <coda_inflate+0xcac>
    1148:	mov	r0, #9
    114c:	ldr	r4, [sp, #60]	; 0x3c
    1150:	ldr	r7, [sp, #68]	; 0x44
    1154:	ldr	r1, [sp, #72]	; 0x48
    1158:	ldr	r2, [sp, #28]
    115c:	str	ip, [sp, #32]
    1160:	str	r0, [sl, #84]	; 0x54
    1164:	ldr	r0, [sp, #56]	; 0x38
    1168:	mov	r3, r4
    116c:	str	r0, [sl, #76]	; 0x4c
    1170:	str	r0, [sl, #108]	; 0x6c
    1174:	ldr	r0, [sp, #64]	; 0x40
    1178:	str	r7, [sp, #4]
    117c:	str	r0, [sp]
    1180:	mov	r0, #1
    1184:	bl	0 <coda_inflate_table>
    1188:	cmp	r0, #0
    118c:	beq	17c8 <coda_inflate+0x12d4>
    1190:	str	r0, [fp, #-52]	; 0xffffffcc
    1194:	movw	r0, #0
    1198:	movt	r0, #0
    119c:	b	1810 <coda_inflate+0x131c>
    11a0:	movw	r0, #0
    11a4:	movt	r0, #0
    11a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    11ac:	str	r0, [r1, #24]
    11b0:	mov	r0, #29
    11b4:	str	r0, [sl]
    11b8:	ldr	lr, [fp, #-60]	; 0xffffffc4
    11bc:	ldr	r3, [sl]
    11c0:	cmp	r3, #30
    11c4:	bls	5dc <coda_inflate+0xe8>
    11c8:	b	218c <coda_inflate+0x1c98>
    11cc:	ldr	r0, [sl, #24]
    11d0:	b	1920 <coda_inflate+0x142c>
    11d4:	ldr	r0, [sl, #32]
    11d8:	cmp	r0, #0
    11dc:	ubfxne	r1, r5, #8, #1
    11e0:	strne	r1, [r0]
    11e4:	tst	r5, #512	; 0x200
    11e8:	beq	1214 <coda_inflate+0xd20>
    11ec:	strh	r5, [fp, #-32]	; 0xffffffe0
    11f0:	sub	r1, fp, #32
    11f4:	mov	r2, #2
    11f8:	mov	r4, lr
    11fc:	mov	r5, ip
    1200:	ldr	r0, [sl, #24]
    1204:	bl	0 <coda_crc32>
    1208:	mov	ip, r5
    120c:	mov	lr, r4
    1210:	str	r0, [sl, #24]
    1214:	mov	r0, #2
    1218:	mov	r6, #0
    121c:	mov	r5, #0
    1220:	str	r0, [sl]
    1224:	cmp	r9, #0
    1228:	beq	2208 <coda_inflate+0x1d14>
    122c:	mov	r1, ip
    1230:	sub	r2, r9, #1
    1234:	ldrb	r0, [r1], #1
    1238:	add	r5, r5, r0, lsl r6
    123c:	add	r0, r6, #8
    1240:	cmp	r0, #32
    1244:	bcs	12ac <coda_inflate+0xdb8>
    1248:	cmp	r2, #0
    124c:	beq	21bc <coda_inflate+0x1cc8>
    1250:	ldrb	r1, [ip, #1]
    1254:	sub	r2, r9, #2
    1258:	add	r5, r5, r1, lsl r0
    125c:	add	r0, r6, #16
    1260:	add	r1, ip, #2
    1264:	cmp	r0, #31
    1268:	bhi	12ac <coda_inflate+0xdb8>
    126c:	cmp	r2, #0
    1270:	beq	21bc <coda_inflate+0x1cc8>
    1274:	ldrb	r1, [ip, #2]
    1278:	add	r6, r6, #24
    127c:	cmp	r6, #31
    1280:	add	r5, r5, r1, lsl r0
    1284:	add	r0, ip, #3
    1288:	sub	r1, r9, #3
    128c:	bhi	1a44 <coda_inflate+0x1550>
    1290:	cmp	r1, #0
    1294:	beq	2204 <coda_inflate+0x1d10>
    1298:	ldrb	r0, [ip, #3]
    129c:	add	ip, ip, #4
    12a0:	sub	r9, r9, #4
    12a4:	add	r5, r5, r0, lsl r6
    12a8:	b	12b4 <coda_inflate+0xdc0>
    12ac:	mov	ip, r1
    12b0:	mov	r9, r2
    12b4:	ldr	r0, [sl, #32]
    12b8:	cmp	r0, #0
    12bc:	strne	r5, [r0, #4]
    12c0:	ldrb	r0, [sl, #17]
    12c4:	tst	r0, #2
    12c8:	beq	12f4 <coda_inflate+0xe00>
    12cc:	str	r5, [fp, #-32]	; 0xffffffe0
    12d0:	sub	r1, fp, #32
    12d4:	mov	r2, #4
    12d8:	mov	r4, lr
    12dc:	mov	r5, ip
    12e0:	ldr	r0, [sl, #24]
    12e4:	bl	0 <coda_crc32>
    12e8:	mov	ip, r5
    12ec:	mov	lr, r4
    12f0:	str	r0, [sl, #24]
    12f4:	mov	r0, #3
    12f8:	mov	r6, #0
    12fc:	mov	r5, #0
    1300:	str	r0, [sl]
    1304:	cmp	r9, #0
    1308:	beq	2208 <coda_inflate+0x1d14>
    130c:	mov	r0, ip
    1310:	ldrb	r1, [r0], #1
    1314:	add	r5, r5, r1, lsl r6
    1318:	add	r6, r6, #8
    131c:	sub	r1, r9, #1
    1320:	cmp	r6, #16
    1324:	bcs	1344 <coda_inflate+0xe50>
    1328:	cmp	r1, #0
    132c:	beq	2204 <coda_inflate+0x1d10>
    1330:	ldrb	r0, [ip, #1]
    1334:	add	ip, ip, #2
    1338:	sub	r9, r9, #2
    133c:	add	r5, r5, r0, lsl r6
    1340:	b	134c <coda_inflate+0xe58>
    1344:	mov	ip, r0
    1348:	mov	r9, r1
    134c:	ldr	r0, [sl, #32]
    1350:	cmp	r0, #0
    1354:	uxtbne	r2, r5
    1358:	lsrne	r1, r5, #8
    135c:	strne	r2, [r0, #8]
    1360:	strne	r1, [r0, #12]
    1364:	ldrb	r0, [sl, #17]
    1368:	tst	r0, #2
    136c:	beq	1398 <coda_inflate+0xea4>
    1370:	strh	r5, [fp, #-32]	; 0xffffffe0
    1374:	sub	r1, fp, #32
    1378:	mov	r2, #2
    137c:	mov	r4, lr
    1380:	mov	r5, ip
    1384:	ldr	r0, [sl, #24]
    1388:	bl	0 <coda_crc32>
    138c:	mov	ip, r5
    1390:	mov	lr, r4
    1394:	str	r0, [sl, #24]
    1398:	mov	r0, #4
    139c:	mov	r5, #0
    13a0:	mov	r6, #0
    13a4:	str	r0, [sl]
    13a8:	ldr	r0, [sl, #16]
    13ac:	tst	r0, #1024	; 0x400
    13b0:	bne	13c8 <coda_inflate+0xed4>
    13b4:	ldr	r0, [sl, #32]
    13b8:	cmp	r0, #0
    13bc:	movne	r1, #0
    13c0:	strne	r1, [r0, #16]
    13c4:	b	1468 <coda_inflate+0xf74>
    13c8:	cmp	r6, #15
    13cc:	bhi	1410 <coda_inflate+0xf1c>
    13d0:	cmp	r9, #0
    13d4:	beq	2208 <coda_inflate+0x1d14>
    13d8:	mov	r2, ip
    13dc:	sub	r3, r9, #1
    13e0:	ldrb	r1, [r2], #1
    13e4:	add	r1, r5, r1, lsl r6
    13e8:	add	r6, r6, #8
    13ec:	cmp	r6, #16
    13f0:	bcs	1418 <coda_inflate+0xf24>
    13f4:	cmp	r3, #0
    13f8:	beq	2398 <coda_inflate+0x1ea4>
    13fc:	ldrb	r2, [ip, #1]
    1400:	add	ip, ip, #2
    1404:	sub	r9, r9, #2
    1408:	add	r1, r1, r2, lsl r6
    140c:	b	1420 <coda_inflate+0xf2c>
    1410:	mov	r1, r5
    1414:	b	1420 <coda_inflate+0xf2c>
    1418:	mov	ip, r2
    141c:	mov	r9, r3
    1420:	str	r1, [sl, #64]	; 0x40
    1424:	mov	r5, #0
    1428:	ldr	r2, [sl, #32]
    142c:	cmp	r2, #0
    1430:	strne	r1, [r2, #20]
    1434:	tst	r0, #512	; 0x200
    1438:	beq	1464 <coda_inflate+0xf70>
    143c:	strh	r1, [fp, #-32]	; 0xffffffe0
    1440:	sub	r1, fp, #32
    1444:	mov	r2, #2
    1448:	mov	r4, lr
    144c:	mov	r6, ip
    1450:	ldr	r0, [sl, #24]
    1454:	bl	0 <coda_crc32>
    1458:	mov	ip, r6
    145c:	mov	lr, r4
    1460:	str	r0, [sl, #24]
    1464:	mov	r6, #0
    1468:	mov	r0, #5
    146c:	str	r0, [sl]
    1470:	ldr	r1, [sl, #16]
    1474:	tst	r1, #1024	; 0x400
    1478:	beq	1540 <coda_inflate+0x104c>
    147c:	ldr	r0, [sl, #64]	; 0x40
    1480:	cmp	r0, r9
    1484:	mov	r4, r0
    1488:	movhi	r4, r9
    148c:	cmp	r4, #0
    1490:	beq	1538 <coda_inflate+0x1044>
    1494:	ldr	r2, [sl, #32]
    1498:	cmp	r2, #0
    149c:	beq	14f0 <coda_inflate+0xffc>
    14a0:	ldr	r3, [r2, #16]
    14a4:	cmp	r3, #0
    14a8:	beq	14f0 <coda_inflate+0xffc>
    14ac:	ldr	r1, [r2, #20]
    14b0:	ldr	r7, [r2, #24]
    14b4:	mov	r2, r4
    14b8:	str	r8, [fp, #-40]	; 0xffffffd8
    14bc:	mov	r8, lr
    14c0:	sub	r0, r1, r0
    14c4:	add	r1, r0, r4
    14c8:	cmp	r1, r7
    14cc:	mov	r1, ip
    14d0:	subhi	r2, r7, r0
    14d4:	add	r0, r3, r0
    14d8:	mov	r7, ip
    14dc:	bl	0 <memcpy>
    14e0:	mov	lr, r8
    14e4:	ldr	r8, [fp, #-40]	; 0xffffffd8
    14e8:	ldr	r1, [sl, #16]
    14ec:	mov	ip, r7
    14f0:	tst	r1, #512	; 0x200
    14f4:	beq	1524 <coda_inflate+0x1030>
    14f8:	ldr	r0, [sl, #24]
    14fc:	mov	r1, ip
    1500:	mov	r2, r4
    1504:	str	r8, [fp, #-40]	; 0xffffffd8
    1508:	mov	r8, lr
    150c:	mov	r7, ip
    1510:	bl	0 <coda_crc32>
    1514:	mov	lr, r8
    1518:	ldr	r8, [fp, #-40]	; 0xffffffd8
    151c:	mov	ip, r7
    1520:	str	r0, [sl, #24]
    1524:	ldr	r0, [sl, #64]	; 0x40
    1528:	add	ip, ip, r4
    152c:	sub	r9, r9, r4
    1530:	sub	r0, r0, r4
    1534:	str	r0, [sl, #64]	; 0x40
    1538:	cmp	r0, #0
    153c:	bne	217c <coda_inflate+0x1c88>
    1540:	mov	r0, #6
    1544:	str	r0, [sl]
    1548:	mov	r0, #0
    154c:	str	r0, [sl, #64]	; 0x40
    1550:	ldrb	r0, [sl, #17]
    1554:	tst	r0, #8
    1558:	bne	1570 <coda_inflate+0x107c>
    155c:	ldr	r0, [sl, #32]
    1560:	cmp	r0, #0
    1564:	movne	r1, #0
    1568:	strne	r1, [r0, #28]
    156c:	b	1610 <coda_inflate+0x111c>
    1570:	cmp	r9, #0
    1574:	beq	2160 <coda_inflate+0x1c6c>
    1578:	str	r8, [fp, #-40]	; 0xffffffd8
    157c:	mov	r8, #0
    1580:	b	1590 <coda_inflate+0x109c>
    1584:	cmp	r4, #0
    1588:	cmpne	r9, r8
    158c:	bls	15cc <coda_inflate+0x10d8>
    1590:	ldr	r1, [sl, #32]
    1594:	ldrb	r4, [ip, r8]
    1598:	add	r8, r8, #1
    159c:	cmp	r1, #0
    15a0:	beq	1584 <coda_inflate+0x1090>
    15a4:	ldr	r0, [r1, #28]
    15a8:	cmp	r0, #0
    15ac:	beq	1584 <coda_inflate+0x1090>
    15b0:	ldr	r2, [sl, #64]	; 0x40
    15b4:	ldr	r1, [r1, #32]
    15b8:	cmp	r2, r1
    15bc:	addcc	r1, r2, #1
    15c0:	strcc	r1, [sl, #64]	; 0x40
    15c4:	strbcc	r4, [r0, r2]
    15c8:	b	1584 <coda_inflate+0x1090>
    15cc:	ldrb	r0, [sl, #17]
    15d0:	tst	r0, #2
    15d4:	beq	15fc <coda_inflate+0x1108>
    15d8:	ldr	r0, [sl, #24]
    15dc:	mov	r1, ip
    15e0:	mov	r2, r8
    15e4:	str	lr, [fp, #-60]	; 0xffffffc4
    15e8:	mov	r7, ip
    15ec:	bl	0 <coda_crc32>
    15f0:	ldr	lr, [fp, #-60]	; 0xffffffc4
    15f4:	mov	ip, r7
    15f8:	str	r0, [sl, #24]
    15fc:	cmp	r4, #0
    1600:	bne	21a8 <coda_inflate+0x1cb4>
    1604:	add	ip, ip, r8
    1608:	sub	r9, r9, r8
    160c:	ldr	r8, [fp, #-40]	; 0xffffffd8
    1610:	mov	r0, #7
    1614:	str	r0, [sl]
    1618:	mov	r0, #0
    161c:	str	r0, [sl, #64]	; 0x40
    1620:	ldrb	r0, [sl, #17]
    1624:	tst	r0, #16
    1628:	bne	1640 <coda_inflate+0x114c>
    162c:	ldr	r0, [sl, #32]
    1630:	cmp	r0, #0
    1634:	movne	r1, #0
    1638:	strne	r1, [r0, #36]	; 0x24
    163c:	b	16e0 <coda_inflate+0x11ec>
    1640:	cmp	r9, #0
    1644:	beq	2160 <coda_inflate+0x1c6c>
    1648:	mov	r4, #0
    164c:	b	165c <coda_inflate+0x1168>
    1650:	cmp	r7, #0
    1654:	cmpne	r9, r4
    1658:	bls	1698 <coda_inflate+0x11a4>
    165c:	ldr	r1, [sl, #32]
    1660:	ldrb	r7, [ip, r4]
    1664:	add	r4, r4, #1
    1668:	cmp	r1, #0
    166c:	beq	1650 <coda_inflate+0x115c>
    1670:	ldr	r0, [r1, #36]	; 0x24
    1674:	cmp	r0, #0
    1678:	beq	1650 <coda_inflate+0x115c>
    167c:	ldr	r2, [sl, #64]	; 0x40
    1680:	ldr	r1, [r1, #40]	; 0x28
    1684:	cmp	r2, r1
    1688:	addcc	r1, r2, #1
    168c:	strcc	r1, [sl, #64]	; 0x40
    1690:	strbcc	r7, [r0, r2]
    1694:	b	1650 <coda_inflate+0x115c>
    1698:	ldrb	r0, [sl, #17]
    169c:	tst	r0, #2
    16a0:	beq	16d0 <coda_inflate+0x11dc>
    16a4:	ldr	r0, [sl, #24]
    16a8:	mov	r1, ip
    16ac:	mov	r2, r4
    16b0:	str	r8, [fp, #-40]	; 0xffffffd8
    16b4:	str	lr, [fp, #-60]	; 0xffffffc4
    16b8:	mov	r8, ip
    16bc:	bl	0 <coda_crc32>
    16c0:	mov	ip, r8
    16c4:	ldr	lr, [fp, #-60]	; 0xffffffc4
    16c8:	ldr	r8, [fp, #-40]	; 0xffffffd8
    16cc:	str	r0, [sl, #24]
    16d0:	cmp	r7, #0
    16d4:	bne	2198 <coda_inflate+0x1ca4>
    16d8:	add	ip, ip, r4
    16dc:	sub	r9, r9, r4
    16e0:	mov	r0, #8
    16e4:	str	r0, [sl]
    16e8:	ldr	r0, [sl, #16]
    16ec:	tst	r0, #512	; 0x200
    16f0:	beq	1760 <coda_inflate+0x126c>
    16f4:	cmp	r6, #15
    16f8:	bhi	174c <coda_inflate+0x1258>
    16fc:	cmp	r9, #0
    1700:	beq	2208 <coda_inflate+0x1d14>
    1704:	mov	r2, ip
    1708:	sub	r3, r9, #1
    170c:	ldrb	r1, [r2], #1
    1710:	add	r5, r5, r1, lsl r6
    1714:	add	r1, r6, #8
    1718:	cmp	r1, #16
    171c:	bcs	1740 <coda_inflate+0x124c>
    1720:	cmp	r3, #0
    1724:	beq	21f4 <coda_inflate+0x1d00>
    1728:	ldrb	r2, [ip, #1]
    172c:	add	r6, r6, #16
    1730:	add	ip, ip, #2
    1734:	sub	r9, r9, #2
    1738:	add	r5, r5, r2, lsl r1
    173c:	b	174c <coda_inflate+0x1258>
    1740:	mov	ip, r2
    1744:	mov	r9, r3
    1748:	mov	r6, r1
    174c:	ldrh	r1, [sl, #24]
    1750:	cmp	r5, r1
    1754:	bne	17bc <coda_inflate+0x12c8>
    1758:	mov	r5, #0
    175c:	mov	r6, #0
    1760:	ldr	r1, [sl, #32]
    1764:	mov	r7, ip
    1768:	mov	r4, lr
    176c:	cmp	r1, #0
    1770:	movne	r2, #1
    1774:	strne	r2, [r1, #48]	; 0x30
    1778:	ubfxne	r0, r0, #9, #1
    177c:	mov	r2, #0
    1780:	strne	r0, [r1, #44]	; 0x2c
    1784:	mov	r0, #0
    1788:	mov	r1, #0
    178c:	bl	0 <coda_crc32>
    1790:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1794:	str	r0, [sl, #24]
    1798:	mov	lr, r4
    179c:	mov	ip, r7
    17a0:	str	r0, [r1, #48]	; 0x30
    17a4:	mov	r0, #11
    17a8:	str	r0, [sl]
    17ac:	ldr	r3, [sl]
    17b0:	cmp	r3, #30
    17b4:	bls	5dc <coda_inflate+0xe8>
    17b8:	b	218c <coda_inflate+0x1c98>
    17bc:	movw	r0, #0
    17c0:	movt	r0, #0
    17c4:	b	209c <coda_inflate+0x1ba8>
    17c8:	mov	r0, #6
    17cc:	mov	r3, r4
    17d0:	str	r0, [sl, #88]	; 0x58
    17d4:	ldr	r1, [sl, #108]	; 0x6c
    17d8:	ldr	r0, [sl, #96]	; 0x60
    17dc:	ldr	r2, [sl, #100]	; 0x64
    17e0:	str	r1, [sl, #80]	; 0x50
    17e4:	ldr	r1, [sp, #40]	; 0x28
    17e8:	add	r0, sl, r0, lsl #1
    17ec:	stm	sp, {r1, r7}
    17f0:	add	r1, r0, #112	; 0x70
    17f4:	mov	r0, #2
    17f8:	bl	0 <coda_inflate_table>
    17fc:	cmp	r0, #0
    1800:	beq	1a50 <coda_inflate+0x155c>
    1804:	str	r0, [fp, #-52]	; 0xffffffcc
    1808:	movw	r0, #0
    180c:	movt	r0, #0
    1810:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1814:	str	r0, [r1, #24]
    1818:	mov	r0, #29
    181c:	str	r0, [sl]
    1820:	ldr	lr, [fp, #-60]	; 0xffffffc4
    1824:	ldr	ip, [sp, #32]
    1828:	ldr	r3, [sl]
    182c:	cmp	r3, #30
    1830:	bls	5dc <coda_inflate+0xe8>
    1834:	b	218c <coda_inflate+0x1c98>
    1838:	mov	ip, r2
    183c:	mov	r9, r3
    1840:	mov	r6, r1
    1844:	tst	r0, #2
    1848:	beq	18b0 <coda_inflate+0x13bc>
    184c:	movw	r4, #35615	; 0x8b1f
    1850:	cmp	r5, r4
    1854:	bne	18b0 <coda_inflate+0x13bc>
    1858:	mov	r0, #0
    185c:	mov	r1, #0
    1860:	mov	r2, #0
    1864:	mov	r5, #0
    1868:	mov	r6, lr
    186c:	mov	r7, ip
    1870:	bl	0 <coda_crc32>
    1874:	sub	r1, fp, #32
    1878:	mov	r2, #2
    187c:	str	r0, [sl, #24]
    1880:	strh	r4, [fp, #-32]	; 0xffffffe0
    1884:	bl	0 <coda_crc32>
    1888:	str	r0, [sl, #24]
    188c:	mov	r0, #1
    1890:	mov	lr, r6
    1894:	mov	ip, r7
    1898:	mov	r6, #0
    189c:	str	r0, [sl]
    18a0:	ldr	r3, [sl]
    18a4:	cmp	r3, #30
    18a8:	bls	5dc <coda_inflate+0xe8>
    18ac:	b	218c <coda_inflate+0x1c98>
    18b0:	mov	r1, #0
    18b4:	str	r1, [sl, #16]
    18b8:	ldr	r1, [sl, #32]
    18bc:	cmp	r1, #0
    18c0:	mvnne	r2, #0
    18c4:	strne	r2, [r1, #48]	; 0x30
    18c8:	tst	r0, #1
    18cc:	beq	18f8 <coda_inflate+0x1404>
    18d0:	lsl	r0, r5, #8
    18d4:	lsr	r1, r5, #8
    18d8:	uxtah	r0, r1, r0
    18dc:	movw	r1, #31711	; 0x7bdf
    18e0:	movt	r1, #48623	; 0xbdef
    18e4:	mul	r0, r0, r1
    18e8:	movw	r1, #4229	; 0x1085
    18ec:	movt	r1, #2114	; 0x842
    18f0:	cmp	r0, r1
    18f4:	bcc	2058 <coda_inflate+0x1b64>
    18f8:	movw	r0, #0
    18fc:	movt	r0, #0
    1900:	b	209c <coda_inflate+0x1ba8>
    1904:	bl	0 <coda_adler32>
    1908:	mov	ip, r8
    190c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1910:	ldr	r8, [fp, #-40]	; 0xffffffd8
    1914:	mov	lr, r7
    1918:	str	r0, [sl, #24]
    191c:	str	r0, [r1, #48]	; 0x30
    1920:	ldr	r1, [sl, #16]
    1924:	cmp	r1, #0
    1928:	mov	r1, r5
    192c:	reveq	r1, r1
    1930:	cmp	r1, r0
    1934:	bne	1a18 <coda_inflate+0x1524>
    1938:	mov	r5, #0
    193c:	mov	r6, #0
    1940:	str	r8, [fp, #-44]	; 0xffffffd4
    1944:	mov	r0, #27
    1948:	str	r0, [sl]
    194c:	ldr	r0, [sl, #8]
    1950:	cmp	r0, #0
    1954:	ldrne	r0, [sl, #16]
    1958:	cmpne	r0, #0
    195c:	beq	2220 <coda_inflate+0x1d2c>
    1960:	cmp	r6, #31
    1964:	bhi	1a00 <coda_inflate+0x150c>
    1968:	cmp	r9, #0
    196c:	beq	2208 <coda_inflate+0x1d14>
    1970:	mov	r1, ip
    1974:	sub	r2, r9, #1
    1978:	ldrb	r0, [r1], #1
    197c:	add	r5, r5, r0, lsl r6
    1980:	add	r0, r6, #8
    1984:	cmp	r0, #32
    1988:	bcs	19f4 <coda_inflate+0x1500>
    198c:	cmp	r2, #0
    1990:	beq	21bc <coda_inflate+0x1cc8>
    1994:	ldrb	r1, [ip, #1]
    1998:	sub	r2, r9, #2
    199c:	add	r5, r5, r1, lsl r0
    19a0:	add	r0, r6, #16
    19a4:	add	r1, ip, #2
    19a8:	cmp	r0, #31
    19ac:	bhi	19f4 <coda_inflate+0x1500>
    19b0:	cmp	r2, #0
    19b4:	beq	21bc <coda_inflate+0x1cc8>
    19b8:	ldrb	r1, [ip, #2]
    19bc:	sub	r2, r9, #3
    19c0:	add	r5, r5, r1, lsl r0
    19c4:	add	r0, r6, #24
    19c8:	add	r1, ip, #3
    19cc:	cmp	r0, #31
    19d0:	bhi	19f4 <coda_inflate+0x1500>
    19d4:	cmp	r2, #0
    19d8:	beq	21bc <coda_inflate+0x1cc8>
    19dc:	ldrb	r1, [ip, #3]
    19e0:	add	r6, r6, #32
    19e4:	add	ip, ip, #4
    19e8:	sub	r9, r9, #4
    19ec:	add	r5, r5, r1, lsl r0
    19f0:	b	1a00 <coda_inflate+0x150c>
    19f4:	mov	ip, r1
    19f8:	mov	r9, r2
    19fc:	mov	r6, r0
    1a00:	ldr	r0, [sl, #28]
    1a04:	cmp	r5, r0
    1a08:	beq	2218 <coda_inflate+0x1d24>
    1a0c:	movw	r0, #0
    1a10:	movt	r0, #0
    1a14:	b	209c <coda_inflate+0x1ba8>
    1a18:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1a1c:	movw	r0, #0
    1a20:	str	r8, [fp, #-44]	; 0xffffffd4
    1a24:	movt	r0, #0
    1a28:	str	r0, [r1, #24]
    1a2c:	mov	r0, #29
    1a30:	str	r0, [sl]
    1a34:	ldr	r3, [sl]
    1a38:	cmp	r3, #30
    1a3c:	bls	5dc <coda_inflate+0xe8>
    1a40:	b	218c <coda_inflate+0x1c98>
    1a44:	mov	ip, r0
    1a48:	mov	r9, r1
    1a4c:	b	12b4 <coda_inflate+0xdc0>
    1a50:	mov	r0, #19
    1a54:	ldr	lr, [fp, #-60]	; 0xffffffc4
    1a58:	ldr	ip, [sp, #32]
    1a5c:	str	r0, [sl]
    1a60:	mov	r0, #0
    1a64:	str	r0, [fp, #-52]	; 0xffffffcc
    1a68:	ldr	r0, [fp, #-56]	; 0xffffffc8
    1a6c:	cmp	r0, #6
    1a70:	beq	23b8 <coda_inflate+0x1ec4>
    1a74:	mov	r0, #20
    1a78:	str	r0, [sl]
    1a7c:	lsr	r0, r8, #1
    1a80:	cmp	r0, #129	; 0x81
    1a84:	cmpcs	r9, #6
    1a88:	bcs	1b74 <coda_inflate+0x1680>
    1a8c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1a90:	mov	r1, #0
    1a94:	mvn	r7, #0
    1a98:	str	r1, [r0]
    1a9c:	ldr	r3, [sl, #84]	; 0x54
    1aa0:	ldr	r0, [sl, #76]	; 0x4c
    1aa4:	bic	r2, r5, r7, lsl r3
    1aa8:	add	r1, r0, r2, lsl #2
    1aac:	ldrb	r1, [r1, #1]
    1ab0:	cmp	r6, r1
    1ab4:	bcs	1ae8 <coda_inflate+0x15f4>
    1ab8:	mvn	r3, r7, lsl r3
    1abc:	cmp	r9, #0
    1ac0:	beq	2160 <coda_inflate+0x1c6c>
    1ac4:	ldrb	r1, [ip], #1
    1ac8:	sub	r9, r9, #1
    1acc:	add	r5, r5, r1, lsl r6
    1ad0:	add	r6, r6, #8
    1ad4:	and	r2, r5, r3
    1ad8:	add	r1, r0, r2, lsl #2
    1adc:	ldrb	r1, [r1, #1]
    1ae0:	cmp	r6, r1
    1ae4:	bcc	1abc <coda_inflate+0x15c8>
    1ae8:	mov	r3, r0
    1aec:	str	r8, [fp, #-40]	; 0xffffffd8
    1af0:	ldrb	r4, [r3, r2, lsl #2]!
    1af4:	ldrh	r8, [r3, #2]
    1af8:	cmp	r4, #0
    1afc:	beq	1bdc <coda_inflate+0x16e8>
    1b00:	ands	r2, r4, #240	; 0xf0
    1b04:	bne	1bdc <coda_inflate+0x16e8>
    1b08:	mov	r3, lr
    1b0c:	add	lr, r1, r4
    1b10:	mvn	r2, #0
    1b14:	bic	r2, r5, r2, lsl lr
    1b18:	add	r7, r8, r2, lsr r1
    1b1c:	add	r2, r0, r7, lsl #2
    1b20:	ldrb	r2, [r2, #1]
    1b24:	add	r4, r1, r2
    1b28:	cmp	r4, r6
    1b2c:	bls	1bec <coda_inflate+0x16f8>
    1b30:	mvn	r2, #0
    1b34:	mvn	r4, r2, lsl lr
    1b38:	mov	lr, r3
    1b3c:	cmp	r9, #0
    1b40:	beq	2184 <coda_inflate+0x1c90>
    1b44:	ldrb	r2, [ip], #1
    1b48:	sub	r9, r9, #1
    1b4c:	add	r5, r5, r2, lsl r6
    1b50:	add	r6, r6, #8
    1b54:	and	r2, r5, r4
    1b58:	add	r7, r8, r2, lsr r1
    1b5c:	add	r2, r0, r7, lsl #2
    1b60:	ldrb	r2, [r2, #1]
    1b64:	add	r3, r1, r2
    1b68:	cmp	r3, r6
    1b6c:	bhi	1b3c <coda_inflate+0x1648>
    1b70:	b	1bf0 <coda_inflate+0x16fc>
    1b74:	ldr	r4, [fp, #-36]	; 0xffffffdc
    1b78:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1b7c:	mov	r0, r4
    1b80:	str	lr, [r4, #12]
    1b84:	str	r8, [r4, #16]
    1b88:	str	ip, [r4]
    1b8c:	str	r9, [r4, #4]
    1b90:	str	r5, [sl, #56]	; 0x38
    1b94:	str	r6, [sl, #60]	; 0x3c
    1b98:	bl	0 <coda_inflate_fast>
    1b9c:	ldr	r0, [sl]
    1ba0:	ldr	r5, [sl, #56]	; 0x38
    1ba4:	ldr	r6, [sl, #60]	; 0x3c
    1ba8:	ldr	ip, [r4]
    1bac:	ldr	r9, [r4, #4]
    1bb0:	ldr	lr, [r4, #12]
    1bb4:	ldr	r8, [r4, #16]
    1bb8:	cmp	r0, #11
    1bbc:	bne	20ac <coda_inflate+0x1bb8>
    1bc0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1bc4:	mvn	r0, #0
    1bc8:	str	r0, [r1]
    1bcc:	ldr	r3, [sl]
    1bd0:	cmp	r3, #30
    1bd4:	bls	5dc <coda_inflate+0xe8>
    1bd8:	b	218c <coda_inflate+0x1c98>
    1bdc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1be0:	mov	r2, r1
    1be4:	mov	r1, #0
    1be8:	b	1c08 <coda_inflate+0x1714>
    1bec:	mov	lr, r3
    1bf0:	ldrb	r4, [r0, r7, lsl #2]!
    1bf4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1bf8:	sub	r6, r6, r1
    1bfc:	lsr	r5, r5, r1
    1c00:	ldrh	r8, [r0, #2]
    1c04:	str	r1, [r3]
    1c08:	add	r0, r1, r2
    1c0c:	sub	r6, r6, r2
    1c10:	lsr	r5, r5, r2
    1c14:	cmp	r4, #0
    1c18:	str	r0, [r3]
    1c1c:	str	r8, [sl, #64]	; 0x40
    1c20:	beq	1d48 <coda_inflate+0x1854>
    1c24:	ldr	r8, [fp, #-40]	; 0xffffffd8
    1c28:	tst	r4, #32
    1c2c:	bne	1d50 <coda_inflate+0x185c>
    1c30:	tst	r4, #64	; 0x40
    1c34:	bne	204c <coda_inflate+0x1b58>
    1c38:	mov	r0, #21
    1c3c:	str	r0, [sl]
    1c40:	and	r0, r4, #15
    1c44:	str	r0, [sl, #72]	; 0x48
    1c48:	cmp	r0, #0
    1c4c:	bne	8d4 <coda_inflate+0x3e0>
    1c50:	ldr	r1, [sl, #64]	; 0x40
    1c54:	ldr	r0, [sp, #52]	; 0x34
    1c58:	str	r1, [r0]
    1c5c:	mov	r0, #22
    1c60:	str	r0, [sl]
    1c64:	ldr	r3, [sl, #88]	; 0x58
    1c68:	ldr	r0, [sl, #80]	; 0x50
    1c6c:	mvn	r7, #0
    1c70:	bic	r2, r5, r7, lsl r3
    1c74:	add	r1, r0, r2, lsl #2
    1c78:	ldrb	r1, [r1, #1]
    1c7c:	cmp	r6, r1
    1c80:	bcs	1cb4 <coda_inflate+0x17c0>
    1c84:	mvn	r3, r7, lsl r3
    1c88:	cmp	r9, #0
    1c8c:	beq	2160 <coda_inflate+0x1c6c>
    1c90:	ldrb	r1, [ip], #1
    1c94:	sub	r9, r9, #1
    1c98:	add	r5, r5, r1, lsl r6
    1c9c:	add	r6, r6, #8
    1ca0:	and	r2, r5, r3
    1ca4:	add	r1, r0, r2, lsl #2
    1ca8:	ldrb	r1, [r1, #1]
    1cac:	cmp	r6, r1
    1cb0:	bcc	1c88 <coda_inflate+0x1794>
    1cb4:	mov	r3, r0
    1cb8:	str	r8, [fp, #-40]	; 0xffffffd8
    1cbc:	ldrb	r4, [r3, r2, lsl #2]!
    1cc0:	ldrh	r8, [r3, #2]
    1cc4:	tst	r4, #240	; 0xf0
    1cc8:	beq	1cdc <coda_inflate+0x17e8>
    1ccc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1cd0:	mov	r3, r1
    1cd4:	ldr	r0, [r2]
    1cd8:	b	1d84 <coda_inflate+0x1890>
    1cdc:	mov	r2, lr
    1ce0:	add	lr, r1, r4
    1ce4:	mvn	r3, #0
    1ce8:	bic	r3, r5, r3, lsl lr
    1cec:	add	r7, r8, r3, lsr r1
    1cf0:	add	r3, r0, r7, lsl #2
    1cf4:	ldrb	r3, [r3, #1]
    1cf8:	add	r4, r1, r3
    1cfc:	cmp	r4, r6
    1d00:	bls	1d60 <coda_inflate+0x186c>
    1d04:	mvn	r3, #0
    1d08:	mvn	r4, r3, lsl lr
    1d0c:	mov	lr, r2
    1d10:	cmp	r9, #0
    1d14:	beq	2184 <coda_inflate+0x1c90>
    1d18:	ldrb	r3, [ip], #1
    1d1c:	sub	r9, r9, #1
    1d20:	add	r5, r5, r3, lsl r6
    1d24:	add	r6, r6, #8
    1d28:	and	r3, r5, r4
    1d2c:	add	r7, r8, r3, lsr r1
    1d30:	add	r3, r0, r7, lsl #2
    1d34:	ldrb	r3, [r3, #1]
    1d38:	add	r2, r1, r3
    1d3c:	cmp	r2, r6
    1d40:	bhi	1d10 <coda_inflate+0x181c>
    1d44:	b	1d64 <coda_inflate+0x1870>
    1d48:	mov	r0, #25
    1d4c:	b	2034 <coda_inflate+0x1b40>
    1d50:	mvn	r0, #0
    1d54:	str	r0, [r3]
    1d58:	mov	r0, #11
    1d5c:	b	20a8 <coda_inflate+0x1bb4>
    1d60:	mov	lr, r2
    1d64:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1d68:	ldrb	r4, [r0, r7, lsl #2]!
    1d6c:	sub	r6, r6, r1
    1d70:	lsr	r5, r5, r1
    1d74:	ldrh	r8, [r0, #2]
    1d78:	ldr	r0, [r2]
    1d7c:	add	r0, r0, r1
    1d80:	str	r0, [r2]
    1d84:	add	r0, r0, r3
    1d88:	sub	r6, r6, r3
    1d8c:	lsr	r5, r5, r3
    1d90:	tst	r4, #64	; 0x40
    1d94:	str	r0, [r2]
    1d98:	bne	2020 <coda_inflate+0x1b2c>
    1d9c:	mov	r0, #23
    1da0:	str	r0, [sl]
    1da4:	str	r8, [sl, #68]	; 0x44
    1da8:	ldr	r8, [fp, #-40]	; 0xffffffd8
    1dac:	and	r0, r4, #15
    1db0:	str	r0, [sl, #72]	; 0x48
    1db4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1db8:	cmp	r0, #0
    1dbc:	beq	1e10 <coda_inflate+0x191c>
    1dc0:	cmp	r6, r0
    1dc4:	bcs	1de8 <coda_inflate+0x18f4>
    1dc8:	cmp	r9, #0
    1dcc:	beq	2160 <coda_inflate+0x1c6c>
    1dd0:	ldrb	r1, [ip], #1
    1dd4:	sub	r9, r9, #1
    1dd8:	add	r5, r5, r1, lsl r6
    1ddc:	add	r6, r6, #8
    1de0:	cmp	r6, r0
    1de4:	bcc	1dc8 <coda_inflate+0x18d4>
    1de8:	ldr	r2, [sl, #68]	; 0x44
    1dec:	mvn	r1, #0
    1df0:	sub	r6, r6, r0
    1df4:	bic	r1, r5, r1, lsl r0
    1df8:	lsr	r5, r5, r0
    1dfc:	add	r1, r2, r1
    1e00:	str	r1, [sl, #68]	; 0x44
    1e04:	ldr	r1, [r3]
    1e08:	add	r1, r1, r0
    1e0c:	str	r1, [r3]
    1e10:	mov	r0, #24
    1e14:	str	r0, [sl]
    1e18:	cmp	r8, #0
    1e1c:	beq	217c <coda_inflate+0x1c88>
    1e20:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1e24:	sub	r1, r0, r8
    1e28:	ldr	r0, [sl, #68]	; 0x44
    1e2c:	cmp	r0, r1
    1e30:	bls	1e60 <coda_inflate+0x196c>
    1e34:	sub	r4, r0, r1
    1e38:	ldr	r1, [sl, #44]	; 0x2c
    1e3c:	cmp	r4, r1
    1e40:	bls	1e70 <coda_inflate+0x197c>
    1e44:	ldr	r0, [sp, #44]	; 0x2c
    1e48:	ldr	r1, [r0]
    1e4c:	cmp	r1, #0
    1e50:	beq	1e70 <coda_inflate+0x197c>
    1e54:	movw	r0, #0
    1e58:	movt	r0, #0
    1e5c:	b	209c <coda_inflate+0x1ba8>
    1e60:	ldr	r2, [sl, #64]	; 0x40
    1e64:	sub	r1, lr, r0
    1e68:	mov	r4, r2
    1e6c:	b	1e98 <coda_inflate+0x19a4>
    1e70:	ldr	r1, [sl, #48]	; 0x30
    1e74:	ldr	r2, [sl, #64]	; 0x40
    1e78:	ldr	r3, [sl, #52]	; 0x34
    1e7c:	cmp	r4, r1
    1e80:	subhi	r4, r4, r1
    1e84:	ldrhi	r1, [sl, #40]	; 0x28
    1e88:	cmp	r4, r2
    1e8c:	sub	r1, r1, r4
    1e90:	movhi	r4, r2
    1e94:	add	r1, r3, r1
    1e98:	cmp	r4, r8
    1e9c:	movhi	r4, r8
    1ea0:	sub	r2, r2, r4
    1ea4:	cmp	r4, #16
    1ea8:	str	r2, [sl, #64]	; 0x40
    1eac:	bcc	1fac <coda_inflate+0x1ab8>
    1eb0:	add	r2, r1, r4
    1eb4:	cmp	lr, r2
    1eb8:	addcc	r2, lr, r4
    1ebc:	cmpcc	r1, r2
    1ec0:	bcc	1fac <coda_inflate+0x1ab8>
    1ec4:	bic	r0, r4, #15
    1ec8:	mov	r7, #1
    1ecc:	str	r4, [sp, #24]
    1ed0:	str	ip, [sp, #32]
    1ed4:	str	r8, [fp, #-40]	; 0xffffffd8
    1ed8:	sub	r3, r0, #16
    1edc:	str	r0, [sp, #20]
    1ee0:	add	r4, r7, r3, lsr #4
    1ee4:	mov	r7, #0
    1ee8:	cmp	r3, #48	; 0x30
    1eec:	and	r0, r4, #3
    1ef0:	str	r0, [sp, #28]
    1ef4:	bcc	1f5c <coda_inflate+0x1a68>
    1ef8:	ldr	r0, [sp, #28]
    1efc:	mov	r7, #0
    1f00:	sub	r4, r0, r4
    1f04:	add	r3, r1, r7
    1f08:	mov	r2, #48	; 0x30
    1f0c:	add	ip, lr, r7
    1f10:	mov	r8, lr
    1f14:	adds	r4, r4, #4
    1f18:	add	r7, r7, #64	; 0x40
    1f1c:	mov	r0, r3
    1f20:	mov	lr, ip
    1f24:	vld1.8	{d16-d17}, [r0], r2
    1f28:	vst1.8	{d16-d17}, [lr], r2
    1f2c:	add	r2, r3, #16
    1f30:	vld1.8	{d16-d17}, [r2]
    1f34:	add	r2, ip, #16
    1f38:	vst1.8	{d16-d17}, [r2]
    1f3c:	add	r2, r3, #32
    1f40:	vld1.8	{d16-d17}, [r2]
    1f44:	add	r2, ip, #32
    1f48:	vst1.8	{d16-d17}, [r2]
    1f4c:	vld1.8	{d16-d17}, [r0]
    1f50:	vst1.8	{d16-d17}, [lr]
    1f54:	mov	lr, r8
    1f58:	bne	1f04 <coda_inflate+0x1a10>
    1f5c:	ldr	r0, [sp, #28]
    1f60:	cmp	r0, #0
    1f64:	beq	1f84 <coda_inflate+0x1a90>
    1f68:	add	r4, lr, r7
    1f6c:	add	r7, r1, r7
    1f70:	rsb	r3, r0, #0
    1f74:	vld1.8	{d16-d17}, [r7]!
    1f78:	adds	r3, r3, #1
    1f7c:	vst1.8	{d16-d17}, [r4]!
    1f80:	bcc	1f74 <coda_inflate+0x1a80>
    1f84:	ldr	r0, [sp, #20]
    1f88:	ldr	r4, [sp, #24]
    1f8c:	ldr	r8, [fp, #-40]	; 0xffffffd8
    1f90:	ldr	ip, [sp, #32]
    1f94:	add	lr, lr, r0
    1f98:	cmp	r4, r0
    1f9c:	beq	2008 <coda_inflate+0x1b14>
    1fa0:	add	r1, r1, r0
    1fa4:	sub	r2, r4, r0
    1fa8:	b	1fb0 <coda_inflate+0x1abc>
    1fac:	mov	r2, r4
    1fb0:	ands	r7, r2, #3
    1fb4:	sub	r3, r2, #1
    1fb8:	beq	1fd0 <coda_inflate+0x1adc>
    1fbc:	ldrb	r0, [r1], #1
    1fc0:	subs	r7, r7, #1
    1fc4:	sub	r2, r2, #1
    1fc8:	strb	r0, [lr], #1
    1fcc:	bne	1fbc <coda_inflate+0x1ac8>
    1fd0:	cmp	r3, #3
    1fd4:	bcc	2008 <coda_inflate+0x1b14>
    1fd8:	ldrb	r0, [r1]
    1fdc:	subs	r2, r2, #4
    1fe0:	strb	r0, [lr]
    1fe4:	ldrb	r0, [r1, #1]
    1fe8:	strb	r0, [lr, #1]
    1fec:	ldrb	r0, [r1, #2]
    1ff0:	strb	r0, [lr, #2]
    1ff4:	ldrb	r0, [r1, #3]
    1ff8:	add	r1, r1, #4
    1ffc:	strb	r0, [lr, #3]
    2000:	add	lr, lr, #4
    2004:	bne	1fd8 <coda_inflate+0x1ae4>
    2008:	ldr	r0, [sl, #64]	; 0x40
    200c:	sub	r8, r8, r4
    2010:	cmp	r0, #0
    2014:	bne	20ac <coda_inflate+0x1bb8>
    2018:	mov	r0, #20
    201c:	b	20a8 <coda_inflate+0x1bb4>
    2020:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2024:	movw	r0, #0
    2028:	movt	r0, #0
    202c:	str	r0, [r1, #24]
    2030:	mov	r0, #29
    2034:	str	r0, [sl]
    2038:	ldr	r8, [fp, #-40]	; 0xffffffd8
    203c:	ldr	r3, [sl]
    2040:	cmp	r3, #30
    2044:	bls	5dc <coda_inflate+0xe8>
    2048:	b	218c <coda_inflate+0x1c98>
    204c:	movw	r0, #0
    2050:	movt	r0, #0
    2054:	b	209c <coda_inflate+0x1ba8>
    2058:	and	r0, r5, #15
    205c:	cmp	r0, #8
    2060:	bne	2094 <coda_inflate+0x1ba0>
    2064:	ldr	r1, [sl, #36]	; 0x24
    2068:	ubfx	r0, r5, #4, #4
    206c:	add	r2, r0, #8
    2070:	cmp	r1, #0
    2074:	beq	20d4 <coda_inflate+0x1be0>
    2078:	cmp	r2, r1
    207c:	bls	20d8 <coda_inflate+0x1be4>
    2080:	movw	r0, #0
    2084:	sub	r6, r6, #4
    2088:	lsr	r5, r5, #4
    208c:	movt	r0, #0
    2090:	b	209c <coda_inflate+0x1ba8>
    2094:	movw	r0, #0
    2098:	movt	r0, #0
    209c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    20a0:	str	r0, [r1, #24]
    20a4:	mov	r0, #29
    20a8:	str	r0, [sl]
    20ac:	ldr	r3, [sl]
    20b0:	cmp	r3, #30
    20b4:	bls	5dc <coda_inflate+0xe8>
    20b8:	b	218c <coda_inflate+0x1c98>
    20bc:	mov	ip, r0
    20c0:	mov	r9, r1
    20c4:	b	ad4 <coda_inflate+0x5e0>
    20c8:	movw	r0, #0
    20cc:	movt	r0, #0
    20d0:	b	11a8 <coda_inflate+0xcb4>
    20d4:	str	r2, [sl, #36]	; 0x24
    20d8:	mov	r1, #256	; 0x100
    20dc:	mov	r2, #0
    20e0:	mov	r6, #0
    20e4:	mov	r4, lr
    20e8:	mov	r7, ip
    20ec:	lsl	r0, r1, r0
    20f0:	mov	r1, #0
    20f4:	str	r0, [sl, #20]
    20f8:	mov	r0, #0
    20fc:	bl	0 <coda_adler32>
    2100:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2104:	tst	r5, #8192	; 0x2000
    2108:	str	r0, [sl, #24]
    210c:	mov	ip, r7
    2110:	mov	lr, r4
    2114:	mov	r5, #0
    2118:	str	r0, [r1, #48]	; 0x30
    211c:	mov	r0, #9
    2120:	movweq	r0, #11
    2124:	str	r0, [sl]
    2128:	ldr	r3, [sl]
    212c:	cmp	r3, #30
    2130:	bls	5dc <coda_inflate+0xe8>
    2134:	b	218c <coda_inflate+0x1c98>
    2138:	ldr	r1, [fp, #-36]	; 0xffffffdc
    213c:	movw	r0, #0
    2140:	mov	r5, r2
    2144:	movt	r0, #0
    2148:	b	11ac <coda_inflate+0xcb8>
    214c:	ldr	r2, [r4, #4]
    2150:	cmp	r2, #0
    2154:	beq	534 <coda_inflate+0x40>
    2158:	sub	sp, fp, #28
    215c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2160:	ldr	r4, [fp, #-52]	; 0xffffffcc
    2164:	mov	r9, #0
    2168:	b	2228 <coda_inflate+0x1d34>
    216c:	ldr	r4, [fp, #-52]	; 0xffffffcc
    2170:	ldr	lr, [fp, #-60]	; 0xffffffc4
    2174:	mov	r9, #0
    2178:	b	2228 <coda_inflate+0x1d34>
    217c:	ldr	r4, [fp, #-52]	; 0xffffffcc
    2180:	b	2228 <coda_inflate+0x1d34>
    2184:	mov	r9, #0
    2188:	b	21b0 <coda_inflate+0x1cbc>
    218c:	mvn	r0, #1
    2190:	sub	sp, fp, #28
    2194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2198:	sub	r9, r9, r4
    219c:	add	ip, ip, r4
    21a0:	ldr	r4, [fp, #-52]	; 0xffffffcc
    21a4:	b	2228 <coda_inflate+0x1d34>
    21a8:	sub	r9, r9, r8
    21ac:	add	ip, ip, r8
    21b0:	ldr	r4, [fp, #-52]	; 0xffffffcc
    21b4:	ldr	r8, [fp, #-40]	; 0xffffffd8
    21b8:	b	2228 <coda_inflate+0x1d34>
    21bc:	mov	ip, r1
    21c0:	mov	r9, #0
    21c4:	mov	r6, r0
    21c8:	b	220c <coda_inflate+0x1d18>
    21cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    21d0:	str	lr, [r0, #12]
    21d4:	str	r8, [r0, #16]
    21d8:	str	ip, [r0]
    21dc:	str	r9, [r0, #4]
    21e0:	str	r5, [sl, #56]	; 0x38
    21e4:	str	r6, [sl, #60]	; 0x3c
    21e8:	mov	r0, #2
    21ec:	sub	sp, fp, #28
    21f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21f4:	mov	ip, r2
    21f8:	mov	r9, #0
    21fc:	mov	r6, r1
    2200:	b	220c <coda_inflate+0x1d18>
    2204:	mov	ip, r0
    2208:	mov	r9, #0
    220c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2210:	mov	r4, r0
    2214:	b	2228 <coda_inflate+0x1d34>
    2218:	mov	r5, #0
    221c:	mov	r6, #0
    2220:	mov	r0, #28
    2224:	str	r0, [sl]
    2228:	ldr	r3, [fp, #-36]	; 0xffffffdc
    222c:	str	lr, [r3, #12]
    2230:	str	r8, [r3, #16]
    2234:	str	ip, [r3]
    2238:	str	r9, [r3, #4]
    223c:	str	r5, [sl, #56]	; 0x38
    2240:	str	r6, [sl, #60]	; 0x3c
    2244:	ldr	r5, [fp, #-44]	; 0xffffffd4
    2248:	ldr	r0, [sl, #40]	; 0x28
    224c:	cmp	r0, #0
    2250:	beq	2284 <coda_inflate+0x1d90>
    2254:	sub	r2, r5, r8
    2258:	mov	r0, r3
    225c:	mov	r1, lr
    2260:	mov	r6, r3
    2264:	bl	23c0 <updatewindow>
    2268:	cmp	r0, #0
    226c:	beq	22b4 <coda_inflate+0x1dc0>
    2270:	mov	r0, #30
    2274:	str	r0, [sl]
    2278:	mvn	r0, #3
    227c:	sub	sp, fp, #28
    2280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2284:	cmp	r5, r8
    2288:	beq	22ac <coda_inflate+0x1db8>
    228c:	ldr	r0, [sl]
    2290:	cmp	r0, #28
    2294:	bhi	22ac <coda_inflate+0x1db8>
    2298:	ldr	r1, [fp, #-56]	; 0xffffffc8
    229c:	cmp	r1, #4
    22a0:	bne	2254 <coda_inflate+0x1d60>
    22a4:	cmp	r0, #25
    22a8:	bls	2254 <coda_inflate+0x1d60>
    22ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
    22b0:	b	22c4 <coda_inflate+0x1dd0>
    22b4:	ldr	r9, [r6, #4]
    22b8:	ldr	r8, [r6, #16]
    22bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
    22c0:	mov	r3, r6
    22c4:	sub	r6, r0, r9
    22c8:	ldr	r0, [r3, #8]
    22cc:	ldr	r1, [r3, #20]
    22d0:	subs	r5, r5, r8
    22d4:	ldr	r7, [fp, #-56]	; 0xffffffc8
    22d8:	add	r0, r0, r6
    22dc:	str	r0, [r3, #8]
    22e0:	add	r0, r1, r5
    22e4:	str	r0, [r3, #20]
    22e8:	ldr	r1, [sl, #28]
    22ec:	ldr	r0, [sl, #8]
    22f0:	add	r1, r1, r5
    22f4:	cmpne	r0, #0
    22f8:	str	r1, [sl, #28]
    22fc:	beq	2338 <coda_inflate+0x1e44>
    2300:	ldr	r0, [r3, #12]
    2304:	ldr	r2, [sl, #16]
    2308:	sub	r1, r0, r5
    230c:	ldr	r0, [sl, #24]
    2310:	cmp	r2, #0
    2314:	beq	2324 <coda_inflate+0x1e30>
    2318:	mov	r2, r5
    231c:	bl	0 <coda_crc32>
    2320:	b	232c <coda_inflate+0x1e38>
    2324:	mov	r2, r5
    2328:	bl	0 <coda_adler32>
    232c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2330:	str	r0, [sl, #24]
    2334:	str	r0, [r3, #48]	; 0x30
    2338:	ldr	r2, [sl, #60]	; 0x3c
    233c:	ldm	sl, {r0, r1}
    2340:	cmp	r1, #0
    2344:	addne	r2, r2, #64	; 0x40
    2348:	cmp	r0, #11
    234c:	addeq	r2, r2, #128	; 0x80
    2350:	cmp	r0, #14
    2354:	add	r1, r2, #256	; 0x100
    2358:	moveq	r2, r1
    235c:	cmp	r0, #19
    2360:	moveq	r2, r1
    2364:	orrs	r0, r5, r6
    2368:	mov	r0, r4
    236c:	mvneq	r0, #4
    2370:	cmp	r7, #4
    2374:	str	r2, [r3, #44]	; 0x2c
    2378:	mvneq	r0, #4
    237c:	cmp	r4, #0
    2380:	movne	r0, r4
    2384:	sub	sp, fp, #28
    2388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    238c:	ldr	r4, [fp, #-52]	; 0xffffffcc
    2390:	mov	r6, #0
    2394:	b	2228 <coda_inflate+0x1d34>
    2398:	mov	ip, r2
    239c:	mov	r9, #0
    23a0:	mov	r5, r1
    23a4:	b	220c <coda_inflate+0x1d18>
    23a8:	ldr	r4, [fp, #-52]	; 0xffffffcc
    23ac:	sub	r6, r6, #3
    23b0:	lsr	r5, r5, #3
    23b4:	b	2228 <coda_inflate+0x1d34>
    23b8:	mov	r4, #0
    23bc:	b	2228 <coda_inflate+0x1d34>

000023c0 <updatewindow>:
    23c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    23c4:	add	fp, sp, #24
    23c8:	ldr	r4, [r0, #28]
    23cc:	mov	r5, r2
    23d0:	mov	r2, r0
    23d4:	mov	r8, r1
    23d8:	ldr	r0, [r4, #52]	; 0x34
    23dc:	cmp	r0, #0
    23e0:	bne	240c <updatewindow+0x4c>
    23e4:	ldr	r0, [r4, #36]	; 0x24
    23e8:	mov	r6, #1
    23ec:	ldr	r3, [r2, #32]
    23f0:	lsl	r1, r6, r0
    23f4:	ldr	r0, [r2, #40]	; 0x28
    23f8:	mov	r2, #1
    23fc:	blx	r3
    2400:	cmp	r0, #0
    2404:	str	r0, [r4, #52]	; 0x34
    2408:	beq	24e0 <updatewindow+0x120>
    240c:	ldr	r2, [r4, #40]	; 0x28
    2410:	cmp	r2, #0
    2414:	beq	2470 <updatewindow+0xb0>
    2418:	cmp	r2, r5
    241c:	bls	2494 <updatewindow+0xd4>
    2420:	ldr	r3, [r4, #48]	; 0x30
    2424:	sub	r1, r8, r5
    2428:	sub	r7, r2, r3
    242c:	add	r0, r0, r3
    2430:	cmp	r7, r5
    2434:	movhi	r7, r5
    2438:	mov	r2, r7
    243c:	bl	0 <memcpy>
    2440:	subs	r5, r5, r7
    2444:	beq	24b4 <updatewindow+0xf4>
    2448:	ldr	r0, [r4, #52]	; 0x34
    244c:	sub	r1, r8, r5
    2450:	mov	r2, r5
    2454:	bl	0 <memcpy>
    2458:	ldr	r0, [r4, #40]	; 0x28
    245c:	mov	r6, #0
    2460:	str	r0, [r4, #44]	; 0x2c
    2464:	mov	r0, r6
    2468:	str	r5, [r4, #48]	; 0x30
    246c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    2470:	ldr	r2, [r4, #36]	; 0x24
    2474:	mov	r3, #1
    2478:	mov	r1, #0
    247c:	lsl	r2, r3, r2
    2480:	str	r2, [r4, #40]	; 0x28
    2484:	str	r1, [r4, #44]	; 0x2c
    2488:	str	r1, [r4, #48]	; 0x30
    248c:	cmp	r2, r5
    2490:	bhi	2420 <updatewindow+0x60>
    2494:	sub	r1, r8, r2
    2498:	bl	0 <memcpy>
    249c:	ldr	r0, [r4, #40]	; 0x28
    24a0:	mov	r6, #0
    24a4:	str	r0, [r4, #44]	; 0x2c
    24a8:	mov	r0, r6
    24ac:	str	r6, [r4, #48]	; 0x30
    24b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    24b4:	ldr	r2, [r4, #48]	; 0x30
    24b8:	ldr	r1, [r4, #40]	; 0x28
    24bc:	ldr	r0, [r4, #44]	; 0x2c
    24c0:	mov	r6, #0
    24c4:	add	r2, r2, r7
    24c8:	subs	r3, r2, r1
    24cc:	movne	r3, r2
    24d0:	cmp	r0, r1
    24d4:	addcc	r0, r0, r7
    24d8:	str	r3, [r4, #48]	; 0x30
    24dc:	strcc	r0, [r4, #44]	; 0x2c
    24e0:	mov	r0, r6
    24e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000024e8 <coda_inflateEnd>:
    24e8:	push	{r4, sl, fp, lr}
    24ec:	add	fp, sp, #8
    24f0:	mov	r4, r0
    24f4:	mvn	r0, #1
    24f8:	cmp	r4, #0
    24fc:	beq	2548 <coda_inflateEnd+0x60>
    2500:	ldr	r1, [r4, #28]
    2504:	cmp	r1, #0
    2508:	beq	2548 <coda_inflateEnd+0x60>
    250c:	ldr	r3, [r4, #36]	; 0x24
    2510:	cmp	r3, #0
    2514:	beq	2548 <coda_inflateEnd+0x60>
    2518:	ldr	r2, [r1, #52]	; 0x34
    251c:	cmp	r2, #0
    2520:	beq	2538 <coda_inflateEnd+0x50>
    2524:	ldr	r0, [r4, #40]	; 0x28
    2528:	mov	r1, r2
    252c:	blx	r3
    2530:	ldr	r1, [r4, #28]
    2534:	ldr	r3, [r4, #36]	; 0x24
    2538:	ldr	r0, [r4, #40]	; 0x28
    253c:	blx	r3
    2540:	mov	r0, #0
    2544:	str	r0, [r4, #28]
    2548:	pop	{r4, sl, fp, pc}

0000254c <coda_inflateGetDictionary>:
    254c:	push	{r4, r5, r6, sl, fp, lr}
    2550:	add	fp, sp, #16
    2554:	mov	r5, r1
    2558:	mov	r1, r0
    255c:	mvn	r0, #1
    2560:	cmp	r1, #0
    2564:	beq	25c8 <coda_inflateGetDictionary+0x7c>
    2568:	ldr	r6, [r1, #28]
    256c:	cmp	r6, #0
    2570:	beq	25c8 <coda_inflateGetDictionary+0x7c>
    2574:	cmp	r5, #0
    2578:	mov	r4, r2
    257c:	ldrne	r0, [r6, #44]	; 0x2c
    2580:	cmpne	r0, #0
    2584:	beq	25b8 <coda_inflateGetDictionary+0x6c>
    2588:	ldr	r1, [r6, #48]	; 0x30
    258c:	ldr	r3, [r6, #52]	; 0x34
    2590:	sub	r2, r0, r1
    2594:	add	r1, r3, r1
    2598:	mov	r0, r5
    259c:	bl	0 <memcpy>
    25a0:	ldr	r0, [r6, #44]	; 0x2c
    25a4:	ldr	r2, [r6, #48]	; 0x30
    25a8:	ldr	r1, [r6, #52]	; 0x34
    25ac:	add	r0, r5, r0
    25b0:	sub	r0, r0, r2
    25b4:	bl	0 <memcpy>
    25b8:	cmp	r4, #0
    25bc:	mov	r0, #0
    25c0:	ldrne	r1, [r6, #44]	; 0x2c
    25c4:	strne	r1, [r4]
    25c8:	pop	{r4, r5, r6, sl, fp, pc}

000025cc <coda_inflateSetDictionary>:
    25cc:	push	{r4, r5, r6, r7, fp, lr}
    25d0:	add	fp, sp, #16
    25d4:	mov	r5, r0
    25d8:	mvn	r0, #1
    25dc:	cmp	r5, #0
    25e0:	beq	2680 <coda_inflateSetDictionary+0xb4>
    25e4:	ldr	r7, [r5, #28]
    25e8:	cmp	r7, #0
    25ec:	beq	2680 <coda_inflateSetDictionary+0xb4>
    25f0:	mov	r4, r2
    25f4:	ldr	r2, [r7, #8]
    25f8:	mov	r6, r1
    25fc:	ldr	r1, [r7]
    2600:	cmp	r2, #0
    2604:	beq	2614 <coda_inflateSetDictionary+0x48>
    2608:	cmp	r1, #10
    260c:	beq	261c <coda_inflateSetDictionary+0x50>
    2610:	b	2680 <coda_inflateSetDictionary+0xb4>
    2614:	cmp	r1, #10
    2618:	bne	264c <coda_inflateSetDictionary+0x80>
    261c:	mov	r0, #0
    2620:	mov	r1, #0
    2624:	mov	r2, #0
    2628:	bl	0 <coda_adler32>
    262c:	mov	r1, r6
    2630:	mov	r2, r4
    2634:	bl	0 <coda_adler32>
    2638:	ldr	r2, [r7, #24]
    263c:	mov	r1, r0
    2640:	mvn	r0, #2
    2644:	cmp	r1, r2
    2648:	bne	2680 <coda_inflateSetDictionary+0xb4>
    264c:	add	r1, r6, r4
    2650:	mov	r0, r5
    2654:	mov	r2, r4
    2658:	bl	23c0 <updatewindow>
    265c:	cmp	r0, #0
    2660:	beq	2674 <coda_inflateSetDictionary+0xa8>
    2664:	mov	r0, #30
    2668:	str	r0, [r7]
    266c:	mvn	r0, #3
    2670:	pop	{r4, r5, r6, r7, fp, pc}
    2674:	mov	r0, #1
    2678:	str	r0, [r7, #12]
    267c:	mov	r0, #0
    2680:	pop	{r4, r5, r6, r7, fp, pc}

00002684 <coda_inflateGetHeader>:
    2684:	mov	r2, r0
    2688:	mvn	r0, #1
    268c:	cmp	r2, #0
    2690:	bxeq	lr
    2694:	ldr	r2, [r2, #28]
    2698:	cmp	r2, #0
    269c:	beq	26b4 <coda_inflateGetHeader+0x30>
    26a0:	ldrb	r3, [r2, #8]
    26a4:	tst	r3, #2
    26a8:	movne	r0, #0
    26ac:	strne	r1, [r2, #32]
    26b0:	strne	r0, [r1, #48]	; 0x30
    26b4:	bx	lr

000026b8 <coda_inflateSync>:
    26b8:	push	{r4, r5, r6, r7, fp, lr}
    26bc:	add	fp, sp, #16
    26c0:	sub	sp, sp, #4
    26c4:	mvn	r1, #1
    26c8:	cmp	r0, #0
    26cc:	beq	2924 <coda_inflateSync+0x26c>
    26d0:	ldr	ip, [r0, #28]
    26d4:	cmp	ip, #0
    26d8:	beq	2924 <coda_inflateSync+0x26c>
    26dc:	ldr	lr, [r0, #4]
    26e0:	cmp	lr, #0
    26e4:	bne	26f8 <coda_inflateSync+0x40>
    26e8:	ldr	r2, [ip, #60]	; 0x3c
    26ec:	mvn	r1, #4
    26f0:	cmp	r2, #8
    26f4:	bcc	2924 <coda_inflateSync+0x26c>
    26f8:	ldr	r1, [ip]
    26fc:	cmp	r1, #31
    2700:	bne	270c <coda_inflateSync+0x54>
    2704:	ldr	r3, [ip, #104]	; 0x68
    2708:	b	2810 <coda_inflateSync+0x158>
    270c:	mov	r1, #31
    2710:	str	r1, [ip]
    2714:	ldr	r3, [ip, #60]	; 0x3c
    2718:	ldr	r2, [ip, #56]	; 0x38
    271c:	bic	r1, r3, #7
    2720:	and	r3, r3, #7
    2724:	lsl	r3, r2, r3
    2728:	cmp	r1, #0
    272c:	str	r3, [ip, #56]	; 0x38
    2730:	str	r1, [ip, #60]	; 0x3c
    2734:	beq	277c <coda_inflateSync+0xc4>
    2738:	subs	r2, r1, #8
    273c:	mov	r6, #1
    2740:	add	r2, r6, r2, lsr #3
    2744:	and	r7, r2, #1
    2748:	beq	278c <coda_inflateSync+0xd4>
    274c:	sub	r4, r2, r7
    2750:	mov	r2, #0
    2754:	mov	r5, sp
    2758:	add	r6, r5, r2
    275c:	add	r2, r2, #2
    2760:	sub	r1, r1, #16
    2764:	strh	r3, [r6]
    2768:	lsr	r3, r3, #16
    276c:	cmp	r4, r2
    2770:	bne	2758 <coda_inflateSync+0xa0>
    2774:	sub	lr, r2, #1
    2778:	b	2790 <coda_inflateSync+0xd8>
    277c:	mov	r3, #0
    2780:	mov	r2, ip
    2784:	str	r3, [r2, #104]!	; 0x68
    2788:	b	2808 <coda_inflateSync+0x150>
    278c:	mov	r2, #0
    2790:	cmp	r7, #0
    2794:	mov	r4, #0
    2798:	movne	r7, sp
    279c:	movne	lr, r2
    27a0:	subne	r1, r1, #8
    27a4:	strbne	r3, [r7, r2]
    27a8:	mov	r2, ip
    27ac:	lsrne	r3, r3, #8
    27b0:	str	r4, [r2, #104]!	; 0x68
    27b4:	str	r3, [r2, #-48]	; 0xffffffd0
    27b8:	str	r1, [r2, #-44]	; 0xffffffd4
    27bc:	mov	r1, sp
    27c0:	mov	r3, #0
    27c4:	b	27e8 <coda_inflateSync+0x130>
    27c8:	cmp	r5, #0
    27cc:	mov	r5, #0
    27d0:	rsbeq	r5, r3, #4
    27d4:	mov	r3, r5
    27d8:	cmp	r4, lr
    27dc:	addcc	r4, r4, #1
    27e0:	cmpcc	r3, #4
    27e4:	bcs	2808 <coda_inflateSync+0x150>
    27e8:	ldrb	r5, [r1, r4]
    27ec:	cmp	r3, #2
    27f0:	mov	r6, #255	; 0xff
    27f4:	movwcc	r6, #0
    27f8:	cmp	r6, r5
    27fc:	bne	27c8 <coda_inflateSync+0x110>
    2800:	add	r3, r3, #1
    2804:	b	27d8 <coda_inflateSync+0x120>
    2808:	str	r3, [r2]
    280c:	ldr	lr, [r0, #4]
    2810:	ldr	r2, [r0]
    2814:	mov	r1, #0
    2818:	cmp	lr, #0
    281c:	beq	2870 <coda_inflateSync+0x1b8>
    2820:	cmp	r3, #3
    2824:	bhi	2870 <coda_inflateSync+0x1b8>
    2828:	mov	r1, #0
    282c:	b	2850 <coda_inflateSync+0x198>
    2830:	cmp	r4, #0
    2834:	mov	r4, #0
    2838:	rsbeq	r4, r3, #4
    283c:	mov	r3, r4
    2840:	add	r1, r1, #1
    2844:	cmp	r1, lr
    2848:	cmpcc	r3, #4
    284c:	bcs	2870 <coda_inflateSync+0x1b8>
    2850:	ldrb	r4, [r2, r1]
    2854:	cmp	r3, #2
    2858:	mov	r5, #255	; 0xff
    285c:	movwcc	r5, #0
    2860:	cmp	r5, r4
    2864:	bne	2830 <coda_inflateSync+0x178>
    2868:	add	r3, r3, #1
    286c:	b	2840 <coda_inflateSync+0x188>
    2870:	add	r2, r2, r1
    2874:	str	r3, [ip, #104]	; 0x68
    2878:	cmp	r3, #4
    287c:	str	r2, [r0]
    2880:	ldmib	r0, {r2, r7}
    2884:	sub	r2, r2, r1
    2888:	str	r2, [r0, #4]
    288c:	add	r2, r7, r1
    2890:	mvn	r1, #2
    2894:	str	r2, [r0, #8]
    2898:	bne	2924 <coda_inflateSync+0x26c>
    289c:	mov	r1, #0
    28a0:	ldr	r3, [r0, #20]
    28a4:	str	r1, [ip, #40]	; 0x28
    28a8:	str	r1, [ip, #44]	; 0x2c
    28ac:	str	r1, [ip, #48]	; 0x30
    28b0:	str	r1, [ip, #28]
    28b4:	str	r1, [r0, #8]
    28b8:	str	r1, [r0, #20]
    28bc:	str	r1, [r0, #24]
    28c0:	ldr	r6, [ip, #8]
    28c4:	cmp	r6, #0
    28c8:	andne	r7, r6, #1
    28cc:	mvn	r6, #0
    28d0:	strne	r7, [r0, #48]	; 0x30
    28d4:	movw	r7, #7108	; 0x1bc4
    28d8:	str	r6, [ip, r7]
    28dc:	mov	r7, #7104	; 0x1bc0
    28e0:	mov	r6, #1
    28e4:	str	r6, [ip, r7]
    28e8:	mov	r7, #32768	; 0x8000
    28ec:	str	r1, [ip, #56]	; 0x38
    28f0:	str	r1, [ip, #60]	; 0x3c
    28f4:	str	r1, [ip, #32]
    28f8:	str	r7, [ip, #20]
    28fc:	add	r7, ip, #1328	; 0x530
    2900:	str	r1, [ip, #12]
    2904:	str	r1, [ip, #4]
    2908:	str	r7, [ip, #108]	; 0x6c
    290c:	str	r7, [ip, #76]	; 0x4c
    2910:	str	r7, [ip, #80]	; 0x50
    2914:	str	r3, [r0, #20]
    2918:	str	r2, [r0, #8]
    291c:	mov	r0, #11
    2920:	str	r0, [ip]
    2924:	mov	r0, r1
    2928:	sub	sp, fp, #16
    292c:	pop	{r4, r5, r6, r7, fp, pc}

00002930 <coda_inflateSyncPoint>:
    2930:	mov	r1, r0
    2934:	mvn	r0, #1
    2938:	cmp	r1, #0
    293c:	beq	2968 <coda_inflateSyncPoint+0x38>
    2940:	ldr	r1, [r1, #28]
    2944:	cmp	r1, #0
    2948:	beq	2968 <coda_inflateSyncPoint+0x38>
    294c:	ldr	r2, [r1]
    2950:	mov	r0, #0
    2954:	cmp	r2, #13
    2958:	bxne	lr
    295c:	ldr	r0, [r1, #60]	; 0x3c
    2960:	clz	r0, r0
    2964:	lsr	r0, r0, #5
    2968:	bx	lr

0000296c <coda_inflateCopy>:
    296c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2970:	add	fp, sp, #24
    2974:	cmp	r0, #0
    2978:	mvn	r6, #1
    297c:	movne	r7, r1
    2980:	cmpne	r1, #0
    2984:	bne	2990 <coda_inflateCopy+0x24>
    2988:	mov	r0, r6
    298c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2990:	ldr	r5, [r7, #28]
    2994:	cmp	r5, #0
    2998:	beq	2988 <coda_inflateCopy+0x1c>
    299c:	ldr	r3, [r7, #32]
    29a0:	cmp	r3, #0
    29a4:	beq	2988 <coda_inflateCopy+0x1c>
    29a8:	mov	r4, r0
    29ac:	ldr	r0, [r7, #36]	; 0x24
    29b0:	cmp	r0, #0
    29b4:	beq	2988 <coda_inflateCopy+0x1c>
    29b8:	ldr	r0, [r7, #40]	; 0x28
    29bc:	mov	r1, #1
    29c0:	movw	r2, #7116	; 0x1bcc
    29c4:	blx	r3
    29c8:	mvn	r6, #3
    29cc:	cmp	r0, #0
    29d0:	beq	2988 <coda_inflateCopy+0x1c>
    29d4:	mov	r9, r0
    29d8:	ldr	r0, [r5, #52]	; 0x34
    29dc:	cmp	r0, #0
    29e0:	beq	2a24 <coda_inflateCopy+0xb8>
    29e4:	ldr	r0, [r5, #36]	; 0x24
    29e8:	mov	r1, #1
    29ec:	ldr	r3, [r7, #32]
    29f0:	mov	r2, #1
    29f4:	lsl	r1, r1, r0
    29f8:	ldr	r0, [r7, #40]	; 0x28
    29fc:	blx	r3
    2a00:	mov	r8, r0
    2a04:	cmp	r0, #0
    2a08:	bne	2a28 <coda_inflateCopy+0xbc>
    2a0c:	ldr	r2, [r7, #36]	; 0x24
    2a10:	ldr	r0, [r7, #40]	; 0x28
    2a14:	mov	r1, r9
    2a18:	blx	r2
    2a1c:	mov	r0, r6
    2a20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2a24:	mov	r8, #0
    2a28:	add	r0, r7, #32
    2a2c:	add	r2, r7, #16
    2a30:	mov	r1, #48	; 0x30
    2a34:	vld1.8	{d18-d19}, [r0]
    2a38:	vld1.8	{d20-d21}, [r2]
    2a3c:	vld1.8	{d16-d17}, [r7], r1
    2a40:	add	r0, r4, #32
    2a44:	movw	r2, #7116	; 0x1bcc
    2a48:	vld1.8	{d22}, [r7]
    2a4c:	vst1.8	{d18-d19}, [r0]
    2a50:	add	r0, r4, #16
    2a54:	vst1.8	{d20-d21}, [r0]
    2a58:	mov	r0, r4
    2a5c:	vst1.8	{d16-d17}, [r0], r1
    2a60:	mov	r1, r5
    2a64:	vst1.8	{d22}, [r0]
    2a68:	mov	r0, r9
    2a6c:	bl	0 <memcpy>
    2a70:	ldr	r1, [r5, #76]	; 0x4c
    2a74:	add	r0, r5, #1328	; 0x530
    2a78:	cmp	r1, r0
    2a7c:	bcc	2ab0 <coda_inflateCopy+0x144>
    2a80:	movw	r2, #7100	; 0x1bbc
    2a84:	add	r2, r5, r2
    2a88:	cmp	r1, r2
    2a8c:	bhi	2ab0 <coda_inflateCopy+0x144>
    2a90:	sub	r1, r1, r0
    2a94:	add	r2, r9, #1328	; 0x530
    2a98:	add	r1, r2, r1
    2a9c:	str	r1, [r9, #76]	; 0x4c
    2aa0:	ldr	r1, [r5, #80]	; 0x50
    2aa4:	sub	r1, r1, r0
    2aa8:	add	r1, r2, r1
    2aac:	str	r1, [r9, #80]	; 0x50
    2ab0:	ldr	r1, [r5, #108]	; 0x6c
    2ab4:	cmp	r8, #0
    2ab8:	sub	r0, r1, r0
    2abc:	add	r0, r9, r0
    2ac0:	add	r0, r0, #1328	; 0x530
    2ac4:	str	r0, [r9, #108]	; 0x6c
    2ac8:	beq	2ae4 <coda_inflateCopy+0x178>
    2acc:	ldr	r0, [r5, #36]	; 0x24
    2ad0:	ldr	r1, [r5, #52]	; 0x34
    2ad4:	mov	r2, #1
    2ad8:	lsl	r2, r2, r0
    2adc:	mov	r0, r8
    2ae0:	bl	0 <memcpy>
    2ae4:	mov	r6, #0
    2ae8:	str	r8, [r9, #52]	; 0x34
    2aec:	str	r9, [r4, #28]
    2af0:	mov	r0, r6
    2af4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00002af8 <coda_inflateUndermine>:
    2af8:	mov	r1, r0
    2afc:	mvn	r0, #1
    2b00:	cmp	r1, #0
    2b04:	bxeq	lr
    2b08:	ldr	r1, [r1, #28]
    2b0c:	cmp	r1, #0
    2b10:	movne	r0, #7104	; 0x1bc0
    2b14:	movne	r2, #1
    2b18:	strne	r2, [r1, r0]
    2b1c:	mvnne	r0, #2
    2b20:	bx	lr

00002b24 <coda_inflateMark>:
    2b24:	mov	r1, r0
    2b28:	movw	r0, #0
    2b2c:	movt	r0, #65535	; 0xffff
    2b30:	cmp	r1, #0
    2b34:	beq	2b84 <coda_inflateMark+0x60>
    2b38:	ldr	r1, [r1, #28]
    2b3c:	cmp	r1, #0
    2b40:	bxeq	lr
    2b44:	movw	r0, #7108	; 0x1bc4
    2b48:	mov	r2, r1
    2b4c:	ldr	r3, [r2], r0
    2b50:	ldr	r0, [r2]
    2b54:	cmp	r3, #24
    2b58:	lsl	r0, r0, #16
    2b5c:	beq	2b70 <coda_inflateMark+0x4c>
    2b60:	cmp	r3, #15
    2b64:	mov	r2, #0
    2b68:	ldreq	r2, [r1, #64]	; 0x40
    2b6c:	b	2b80 <coda_inflateMark+0x5c>
    2b70:	movw	r2, #7112	; 0x1bc8
    2b74:	ldr	r2, [r1, r2]
    2b78:	ldr	r1, [r1, #64]	; 0x40
    2b7c:	sub	r2, r2, r1
    2b80:	add	r0, r2, r0
    2b84:	bx	lr
