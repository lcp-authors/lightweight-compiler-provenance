
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-dim.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dim_info_init>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	movw	r3, #0
       c:	movt	r3, #0
      10:	mov	r2, #0
      14:	str	r2, [r3]
      18:	movw	r3, #0
      1c:	movt	r3, #0
      20:	mov	r2, #0
      24:	str	r2, [r3, #68]	; 0x44
      28:	movw	r3, #0
      2c:	movt	r3, #0
      30:	mvn	r2, #0
      34:	str	r2, [r3, #104]	; 0x68
      38:	nop	{0}
      3c:	add	sp, fp, #0
      40:	pop	{fp}		; (ldr fp, [sp], #4)
      44:	bx	lr

00000048 <dim_info_done>:
      48:	push	{fp}		; (str fp, [sp, #-4]!)
      4c:	add	fp, sp, #0
      50:	nop	{0}
      54:	add	sp, fp, #0
      58:	pop	{fp}		; (ldr fp, [sp], #4)
      5c:	bx	lr

00000060 <print_all_distinct_dims>:
      60:	str	fp, [sp, #-8]!
      64:	str	lr, [sp, #4]
      68:	add	fp, sp, #4
      6c:	sub	sp, sp, #24
      70:	str	r0, [fp, #-16]
      74:	movw	r3, #0
      78:	movt	r3, #0
      7c:	ldr	r3, [r3]
      80:	ldr	r2, [fp, #-16]
      84:	cmp	r2, r3
      88:	blt	ac <print_all_distinct_dims+0x4c>
      8c:	movw	r3, #0
      90:	movt	r3, #0
      94:	mov	r2, #50	; 0x32
      98:	movw	r1, #0
      9c:	movt	r1, #0
      a0:	movw	r0, #0
      a4:	movt	r0, #0
      a8:	bl	0 <__assert_fail>
      ac:	movw	r3, #0
      b0:	movt	r3, #0
      b4:	ldr	r2, [fp, #-16]
      b8:	add	r2, r2, #18
      bc:	ldr	r3, [r3, r2, lsl #2]
      c0:	cmp	r3, #0
      c4:	beq	404 <print_all_distinct_dims+0x3a4>
      c8:	movw	r2, #0
      cc:	movt	r2, #0
      d0:	ldr	r3, [fp, #-16]
      d4:	lsl	r3, r3, #2
      d8:	add	r3, r2, r3
      dc:	ldr	r3, [r3, #4]
      e0:	add	r3, r3, #1
      e4:	lsl	r3, r3, #2
      e8:	mov	r0, r3
      ec:	bl	0 <malloc>
      f0:	mov	r3, r0
      f4:	str	r3, [fp, #-12]
      f8:	ldr	r3, [fp, #-12]
      fc:	cmp	r3, #0
     100:	bne	148 <print_all_distinct_dims+0xe8>
     104:	movw	r2, #0
     108:	movt	r2, #0
     10c:	ldr	r3, [fp, #-16]
     110:	lsl	r3, r3, #2
     114:	add	r3, r2, r3
     118:	ldr	r3, [r3, #4]
     11c:	add	r3, r3, #1
     120:	lsl	r2, r3, #2
     124:	mov	r3, #61	; 0x3d
     128:	str	r3, [sp]
     12c:	movw	r3, #0
     130:	movt	r3, #0
     134:	movw	r1, #0
     138:	movt	r1, #0
     13c:	mvn	r0, #0
     140:	bl	0 <coda_set_error>
     144:	bl	0 <handle_coda_error>
     148:	movw	r2, #0
     14c:	movt	r2, #0
     150:	ldr	r3, [fp, #-16]
     154:	lsl	r3, r3, #2
     158:	add	r3, r2, r3
     15c:	ldr	r3, [r3, #4]
     160:	add	r3, r3, #1
     164:	lsl	r3, r3, #2
     168:	mov	r2, r3
     16c:	mov	r1, #0
     170:	ldr	r0, [fp, #-12]
     174:	bl	0 <memset>
     178:	mov	r3, #0
     17c:	str	r3, [fp, #-8]
     180:	b	208 <print_all_distinct_dims+0x1a8>
     184:	movw	r2, #0
     188:	movt	r2, #0
     18c:	ldr	r3, [fp, #-16]
     190:	add	r3, r3, #26
     194:	lsl	r3, r3, #2
     198:	add	r3, r2, r3
     19c:	ldr	r2, [r3, #4]
     1a0:	ldr	r3, [fp, #-8]
     1a4:	lsl	r3, r3, #2
     1a8:	add	r3, r2, r3
     1ac:	ldr	r3, [r3]
     1b0:	cmp	r3, #0
     1b4:	blt	1fc <print_all_distinct_dims+0x19c>
     1b8:	movw	r2, #0
     1bc:	movt	r2, #0
     1c0:	ldr	r3, [fp, #-16]
     1c4:	add	r3, r3, #26
     1c8:	lsl	r3, r3, #2
     1cc:	add	r3, r2, r3
     1d0:	ldr	r2, [r3, #4]
     1d4:	ldr	r3, [fp, #-8]
     1d8:	lsl	r3, r3, #2
     1dc:	add	r3, r2, r3
     1e0:	ldr	r3, [r3]
     1e4:	lsl	r3, r3, #2
     1e8:	ldr	r2, [fp, #-12]
     1ec:	add	r3, r2, r3
     1f0:	ldr	r2, [r3]
     1f4:	add	r2, r2, #1
     1f8:	str	r2, [r3]
     1fc:	ldr	r3, [fp, #-8]
     200:	add	r3, r3, #1
     204:	str	r3, [fp, #-8]
     208:	ldr	r3, [fp, #-8]
     20c:	mov	r0, r3
     210:	asr	r1, r0, #31
     214:	movw	r2, #0
     218:	movt	r2, #0
     21c:	ldr	r3, [fp, #-16]
     220:	add	r3, r3, #34	; 0x22
     224:	lsl	r3, r3, #2
     228:	add	r3, r2, r3
     22c:	ldr	r3, [r3, #4]
     230:	sub	r2, r3, #1
     234:	movw	r3, #0
     238:	movt	r3, #0
     23c:	add	r2, r2, #30
     240:	lsl	r2, r2, #3
     244:	add	r3, r3, r2
     248:	ldrd	r2, [r3]
     24c:	cmp	r0, r2
     250:	sbcs	r3, r1, r3
     254:	blt	184 <print_all_distinct_dims+0x124>
     258:	ldr	r3, [fp, #-16]
     25c:	add	r3, r3, #1
     260:	mov	r1, r3
     264:	movw	r0, #0
     268:	movt	r0, #0
     26c:	bl	0 <printf>
     270:	movw	r2, #0
     274:	movt	r2, #0
     278:	ldr	r3, [fp, #-16]
     27c:	add	r3, r3, #8
     280:	lsl	r3, r3, #2
     284:	add	r3, r2, r3
     288:	ldr	r3, [r3, #4]
     28c:	str	r3, [fp, #-8]
     290:	b	2cc <print_all_distinct_dims+0x26c>
     294:	ldr	r3, [fp, #-8]
     298:	lsl	r3, r3, #2
     29c:	ldr	r2, [fp, #-12]
     2a0:	add	r3, r2, r3
     2a4:	ldr	r3, [r3]
     2a8:	cmp	r3, #0
     2ac:	ble	2c0 <print_all_distinct_dims+0x260>
     2b0:	ldr	r1, [fp, #-8]
     2b4:	movw	r0, #0
     2b8:	movt	r0, #0
     2bc:	bl	0 <printf>
     2c0:	ldr	r3, [fp, #-8]
     2c4:	add	r3, r3, #1
     2c8:	str	r3, [fp, #-8]
     2cc:	movw	r2, #0
     2d0:	movt	r2, #0
     2d4:	ldr	r3, [fp, #-16]
     2d8:	lsl	r3, r3, #2
     2dc:	add	r3, r2, r3
     2e0:	ldr	r3, [r3, #4]
     2e4:	ldr	r2, [fp, #-8]
     2e8:	cmp	r2, r3
     2ec:	blt	294 <print_all_distinct_dims+0x234>
     2f0:	movw	r2, #0
     2f4:	movt	r2, #0
     2f8:	ldr	r3, [fp, #-16]
     2fc:	lsl	r3, r3, #2
     300:	add	r3, r2, r3
     304:	ldr	r3, [r3, #4]
     308:	mov	r1, r3
     30c:	movw	r0, #0
     310:	movt	r0, #0
     314:	bl	0 <printf>
     318:	movw	r0, #0
     31c:	movt	r0, #0
     320:	bl	0 <printf>
     324:	movw	r2, #0
     328:	movt	r2, #0
     32c:	ldr	r3, [fp, #-16]
     330:	add	r3, r3, #8
     334:	lsl	r3, r3, #2
     338:	add	r3, r2, r3
     33c:	ldr	r3, [r3, #4]
     340:	str	r3, [fp, #-8]
     344:	b	394 <print_all_distinct_dims+0x334>
     348:	ldr	r3, [fp, #-8]
     34c:	lsl	r3, r3, #2
     350:	ldr	r2, [fp, #-12]
     354:	add	r3, r2, r3
     358:	ldr	r3, [r3]
     35c:	cmp	r3, #0
     360:	ble	388 <print_all_distinct_dims+0x328>
     364:	ldr	r3, [fp, #-8]
     368:	lsl	r3, r3, #2
     36c:	ldr	r2, [fp, #-12]
     370:	add	r3, r2, r3
     374:	ldr	r3, [r3]
     378:	mov	r1, r3
     37c:	movw	r0, #0
     380:	movt	r0, #0
     384:	bl	0 <printf>
     388:	ldr	r3, [fp, #-8]
     38c:	add	r3, r3, #1
     390:	str	r3, [fp, #-8]
     394:	movw	r2, #0
     398:	movt	r2, #0
     39c:	ldr	r3, [fp, #-16]
     3a0:	lsl	r3, r3, #2
     3a4:	add	r3, r2, r3
     3a8:	ldr	r3, [r3, #4]
     3ac:	ldr	r2, [fp, #-8]
     3b0:	cmp	r2, r3
     3b4:	blt	348 <print_all_distinct_dims+0x2e8>
     3b8:	movw	r2, #0
     3bc:	movt	r2, #0
     3c0:	ldr	r3, [fp, #-16]
     3c4:	lsl	r3, r3, #2
     3c8:	add	r3, r2, r3
     3cc:	ldr	r3, [r3, #4]
     3d0:	lsl	r3, r3, #2
     3d4:	ldr	r2, [fp, #-12]
     3d8:	add	r3, r2, r3
     3dc:	ldr	r3, [r3]
     3e0:	mov	r1, r3
     3e4:	movw	r0, #0
     3e8:	movt	r0, #0
     3ec:	bl	0 <printf>
     3f0:	mov	r0, #10
     3f4:	bl	0 <putchar>
     3f8:	ldr	r0, [fp, #-12]
     3fc:	bl	0 <free>
     400:	b	408 <print_all_distinct_dims+0x3a8>
     404:	nop	{0}
     408:	sub	sp, fp, #4
     40c:	ldr	fp, [sp]
     410:	add	sp, sp, #4
     414:	pop	{pc}		; (ldr pc, [sp], #4)

00000418 <get_all_dims_for_array>:
     418:	str	fp, [sp, #-8]!
     41c:	str	lr, [sp, #4]
     420:	add	fp, sp, #4
     424:	sub	sp, sp, #120	; 0x78
     428:	str	r0, [fp, #-112]	; 0xffffff90
     42c:	str	r1, [fp, #-116]	; 0xffffff8c
     430:	str	r2, [fp, #-120]	; 0xffffff88
     434:	sub	r3, fp, #52	; 0x34
     438:	mov	r1, r3
     43c:	ldr	r0, [pc, #2348]	; d70 <get_all_dims_for_array+0x958>
     440:	bl	0 <coda_cursor_get_type_class>
     444:	mov	r3, r0
     448:	cmp	r3, #0
     44c:	beq	454 <get_all_dims_for_array+0x3c>
     450:	bl	0 <handle_coda_error>
     454:	ldr	r3, [fp, #-52]	; 0xffffffcc
     458:	cmp	r3, #5
     45c:	ldrls	pc, [pc, r3, lsl #2]
     460:	b	d30 <get_all_dims_for_array+0x918>
     464:	.word	0x0000093c
     468:	.word	0x0000047c
     46c:	.word	0x00000d30
     470:	.word	0x00000d30
     474:	.word	0x00000b18
     478:	.word	0x00000b18
     47c:	ldr	r2, [fp, #-116]	; 0xffffff8c
     480:	mov	r3, r2
     484:	lsl	r3, r3, #2
     488:	add	r3, r3, r2
     48c:	lsl	r3, r3, #4
     490:	add	r2, r3, #800	; 0x320
     494:	movw	r3, #0
     498:	movt	r3, #0
     49c:	add	r3, r2, r3
     4a0:	str	r3, [fp, #-28]	; 0xffffffe4
     4a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     4a8:	ldr	r3, [r3]
     4ac:	str	r3, [fp, #-32]	; 0xffffffe0
     4b0:	movw	r3, #0
     4b4:	movt	r3, #0
     4b8:	ldr	r3, [r3, #3360]	; 0xd20
     4bc:	ldr	r2, [fp, #-116]	; 0xffffff8c
     4c0:	cmp	r2, r3
     4c4:	bne	734 <get_all_dims_for_array+0x31c>
     4c8:	sub	r2, fp, #104	; 0x68
     4cc:	sub	r3, fp, #56	; 0x38
     4d0:	mov	r1, r3
     4d4:	ldr	r0, [pc, #2196]	; d70 <get_all_dims_for_array+0x958>
     4d8:	bl	0 <coda_cursor_get_array_dim>
     4dc:	mov	r3, r0
     4e0:	cmp	r3, #0
     4e4:	beq	4ec <get_all_dims_for_array+0xd4>
     4e8:	bl	0 <handle_coda_error>
     4ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
     4f0:	ldr	r2, [r3, #4]
     4f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
     4f8:	cmp	r2, r3
     4fc:	beq	520 <get_all_dims_for_array+0x108>
     500:	movw	r3, #0
     504:	movt	r3, #0
     508:	mov	r2, #125	; 0x7d
     50c:	movw	r1, #0
     510:	movt	r1, #0
     514:	movw	r0, #0
     518:	movt	r0, #0
     51c:	bl	0 <__assert_fail>
     520:	mov	r3, #0
     524:	str	r3, [fp, #-8]
     528:	b	71c <get_all_dims_for_array+0x304>
     52c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     530:	ldr	r2, [fp, #-8]
     534:	add	r2, r2, #2
     538:	ldr	r3, [r3, r2, lsl #2]
     53c:	cmn	r3, #1
     540:	bne	710 <get_all_dims_for_array+0x2f8>
     544:	ldr	r2, [fp, #-32]	; 0xffffffe0
     548:	ldr	r3, [fp, #-8]
     54c:	add	r3, r2, r3
     550:	movw	r2, #0
     554:	movt	r2, #0
     558:	add	r3, r3, #26
     55c:	lsl	r3, r3, #2
     560:	add	r3, r2, r3
     564:	ldr	r2, [r3, #4]
     568:	ldr	r3, [fp, #-28]	; 0xffffffe4
     56c:	ldr	r3, [r3, #44]	; 0x2c
     570:	lsl	r3, r3, #2
     574:	add	r2, r2, r3
     578:	ldr	r3, [fp, #-8]
     57c:	lsl	r3, r3, #2
     580:	sub	r1, fp, #4
     584:	add	r3, r1, r3
     588:	ldr	r3, [r3, #-100]	; 0xffffff9c
     58c:	str	r3, [r2]
     590:	ldr	r2, [fp, #-32]	; 0xffffffe0
     594:	ldr	r3, [fp, #-8]
     598:	add	r3, r2, r3
     59c:	movw	r2, #0
     5a0:	movt	r2, #0
     5a4:	lsl	r3, r3, #2
     5a8:	add	r3, r2, r3
     5ac:	ldr	r3, [r3, #4]
     5b0:	cmn	r3, #1
     5b4:	bne	628 <get_all_dims_for_array+0x210>
     5b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5bc:	ldr	r3, [fp, #-8]
     5c0:	add	r0, r2, r3
     5c4:	ldr	r3, [fp, #-8]
     5c8:	lsl	r3, r3, #2
     5cc:	sub	r2, fp, #4
     5d0:	add	r3, r2, r3
     5d4:	ldr	r1, [r3, #-100]	; 0xffffff9c
     5d8:	movw	r2, #0
     5dc:	movt	r2, #0
     5e0:	lsl	r3, r0, #2
     5e4:	add	r3, r2, r3
     5e8:	str	r1, [r3, #4]
     5ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5f0:	ldr	r3, [fp, #-8]
     5f4:	add	r0, r2, r3
     5f8:	ldr	r3, [fp, #-8]
     5fc:	lsl	r3, r3, #2
     600:	sub	r2, fp, #4
     604:	add	r3, r2, r3
     608:	ldr	r1, [r3, #-100]	; 0xffffff9c
     60c:	movw	r2, #0
     610:	movt	r2, #0
     614:	add	r3, r0, #8
     618:	lsl	r3, r3, #2
     61c:	add	r3, r2, r3
     620:	str	r1, [r3, #4]
     624:	b	710 <get_all_dims_for_array+0x2f8>
     628:	ldr	r2, [fp, #-32]	; 0xffffffe0
     62c:	ldr	r3, [fp, #-8]
     630:	add	r3, r2, r3
     634:	movw	r2, #0
     638:	movt	r2, #0
     63c:	lsl	r3, r3, #2
     640:	add	r3, r2, r3
     644:	ldr	r2, [r3, #4]
     648:	ldr	r3, [fp, #-8]
     64c:	lsl	r3, r3, #2
     650:	sub	r1, fp, #4
     654:	add	r3, r1, r3
     658:	ldr	r3, [r3, #-100]	; 0xffffff9c
     65c:	cmp	r2, r3
     660:	bge	698 <get_all_dims_for_array+0x280>
     664:	ldr	r2, [fp, #-32]	; 0xffffffe0
     668:	ldr	r3, [fp, #-8]
     66c:	add	r0, r2, r3
     670:	ldr	r3, [fp, #-8]
     674:	lsl	r3, r3, #2
     678:	sub	r2, fp, #4
     67c:	add	r3, r2, r3
     680:	ldr	r1, [r3, #-100]	; 0xffffff9c
     684:	movw	r2, #0
     688:	movt	r2, #0
     68c:	lsl	r3, r0, #2
     690:	add	r3, r2, r3
     694:	str	r1, [r3, #4]
     698:	ldr	r2, [fp, #-32]	; 0xffffffe0
     69c:	ldr	r3, [fp, #-8]
     6a0:	add	r3, r2, r3
     6a4:	movw	r2, #0
     6a8:	movt	r2, #0
     6ac:	add	r3, r3, #8
     6b0:	lsl	r3, r3, #2
     6b4:	add	r3, r2, r3
     6b8:	ldr	r2, [r3, #4]
     6bc:	ldr	r3, [fp, #-8]
     6c0:	lsl	r3, r3, #2
     6c4:	sub	r1, fp, #4
     6c8:	add	r3, r1, r3
     6cc:	ldr	r3, [r3, #-100]	; 0xffffff9c
     6d0:	cmp	r2, r3
     6d4:	ble	710 <get_all_dims_for_array+0x2f8>
     6d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
     6dc:	ldr	r3, [fp, #-8]
     6e0:	add	r0, r2, r3
     6e4:	ldr	r3, [fp, #-8]
     6e8:	lsl	r3, r3, #2
     6ec:	sub	r2, fp, #4
     6f0:	add	r3, r2, r3
     6f4:	ldr	r1, [r3, #-100]	; 0xffffff9c
     6f8:	movw	r2, #0
     6fc:	movt	r2, #0
     700:	add	r3, r0, #8
     704:	lsl	r3, r3, #2
     708:	add	r3, r2, r3
     70c:	str	r1, [r3, #4]
     710:	ldr	r3, [fp, #-8]
     714:	add	r3, r3, #1
     718:	str	r3, [fp, #-8]
     71c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     720:	ldr	r3, [r3, #4]
     724:	ldr	r2, [fp, #-8]
     728:	cmp	r2, r3
     72c:	blt	52c <get_all_dims_for_array+0x114>
     730:	b	d50 <get_all_dims_for_array+0x938>
     734:	ldr	r3, [fp, #-116]	; 0xffffff8c
     738:	cmp	r3, #0
     73c:	bne	74c <get_all_dims_for_array+0x334>
     740:	ldr	r3, [fp, #-28]	; 0xffffffe4
     744:	mov	r2, #0
     748:	str	r2, [r3, #44]	; 0x2c
     74c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     750:	ldr	r3, [r3, #44]	; 0x2c
     754:	ldr	r2, [fp, #-28]	; 0xffffffe4
     758:	ldr	r2, [r2, #40]	; 0x28
     75c:	ldr	r1, [fp, #-116]	; 0xffffff8c
     760:	add	r1, r1, #1
     764:	mul	r0, r2, r3
     768:	movw	r2, #0
     76c:	movt	r2, #0
     770:	mov	r3, r1
     774:	lsl	r3, r3, #2
     778:	add	r3, r3, r1
     77c:	lsl	r3, r3, #4
     780:	add	r3, r2, r3
     784:	add	r3, r3, #844	; 0x34c
     788:	str	r0, [r3]
     78c:	mov	r3, #1
     790:	str	r3, [fp, #-12]
     794:	ldr	r3, [fp, #-32]	; 0xffffffe0
     798:	str	r3, [fp, #-16]
     79c:	b	82c <get_all_dims_for_array+0x414>
     7a0:	movw	r3, #0
     7a4:	movt	r3, #0
     7a8:	ldr	r2, [fp, #-16]
     7ac:	add	r2, r2, #18
     7b0:	ldr	r3, [r3, r2, lsl #2]
     7b4:	cmp	r3, #0
     7b8:	beq	7fc <get_all_dims_for_array+0x3e4>
     7bc:	movw	r2, #0
     7c0:	movt	r2, #0
     7c4:	ldr	r3, [fp, #-16]
     7c8:	add	r3, r3, #26
     7cc:	lsl	r3, r3, #2
     7d0:	add	r3, r2, r3
     7d4:	ldr	r2, [r3, #4]
     7d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7dc:	ldr	r3, [r3, #44]	; 0x2c
     7e0:	lsl	r3, r3, #2
     7e4:	add	r3, r2, r3
     7e8:	ldr	r2, [r3]
     7ec:	ldr	r3, [fp, #-12]
     7f0:	mul	r3, r2, r3
     7f4:	str	r3, [fp, #-12]
     7f8:	b	820 <get_all_dims_for_array+0x408>
     7fc:	movw	r2, #0
     800:	movt	r2, #0
     804:	ldr	r3, [fp, #-16]
     808:	lsl	r3, r3, #2
     80c:	add	r3, r2, r3
     810:	ldr	r2, [r3, #4]
     814:	ldr	r3, [fp, #-12]
     818:	mul	r3, r2, r3
     81c:	str	r3, [fp, #-12]
     820:	ldr	r3, [fp, #-16]
     824:	add	r3, r3, #1
     828:	str	r3, [fp, #-16]
     82c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     830:	ldr	r2, [r3, #4]
     834:	ldr	r3, [fp, #-32]	; 0xffffffe0
     838:	add	r3, r2, r3
     83c:	ldr	r2, [fp, #-16]
     840:	cmp	r2, r3
     844:	blt	7a0 <get_all_dims_for_array+0x388>
     848:	ldr	r3, [fp, #-12]
     84c:	cmp	r3, #0
     850:	ble	d50 <get_all_dims_for_array+0x938>
     854:	ldr	r0, [pc, #1300]	; d70 <get_all_dims_for_array+0x958>
     858:	bl	0 <coda_cursor_goto_first_array_element>
     85c:	mov	r3, r0
     860:	cmp	r3, #0
     864:	beq	86c <get_all_dims_for_array+0x454>
     868:	bl	0 <handle_coda_error>
     86c:	mov	r3, #0
     870:	str	r3, [fp, #-20]	; 0xffffffec
     874:	b	920 <get_all_dims_for_array+0x508>
     878:	ldr	r3, [fp, #-112]	; 0xffffff90
     87c:	add	r0, r3, #1
     880:	ldr	r3, [fp, #-116]	; 0xffffff8c
     884:	add	r3, r3, #1
     888:	ldr	r2, [fp, #-120]	; 0xffffff88
     88c:	mov	r1, r3
     890:	bl	418 <get_all_dims_for_array>
     894:	ldr	r3, [fp, #-12]
     898:	sub	r3, r3, #1
     89c:	ldr	r2, [fp, #-20]	; 0xffffffec
     8a0:	cmp	r2, r3
     8a4:	bge	914 <get_all_dims_for_array+0x4fc>
     8a8:	ldr	r0, [pc, #1216]	; d70 <get_all_dims_for_array+0x958>
     8ac:	bl	0 <coda_cursor_goto_next_array_element>
     8b0:	mov	r3, r0
     8b4:	cmp	r3, #0
     8b8:	beq	8c0 <get_all_dims_for_array+0x4a8>
     8bc:	bl	0 <handle_coda_error>
     8c0:	ldr	r3, [fp, #-116]	; 0xffffff8c
     8c4:	add	r1, r3, #1
     8c8:	movw	r2, #0
     8cc:	movt	r2, #0
     8d0:	mov	r3, r1
     8d4:	lsl	r3, r3, #2
     8d8:	add	r3, r3, r1
     8dc:	lsl	r3, r3, #4
     8e0:	add	r3, r2, r3
     8e4:	add	r3, r3, #844	; 0x34c
     8e8:	ldr	r3, [r3]
     8ec:	add	r0, r3, #1
     8f0:	movw	r2, #0
     8f4:	movt	r2, #0
     8f8:	mov	r3, r1
     8fc:	lsl	r3, r3, #2
     900:	add	r3, r3, r1
     904:	lsl	r3, r3, #4
     908:	add	r3, r2, r3
     90c:	add	r3, r3, #844	; 0x34c
     910:	str	r0, [r3]
     914:	ldr	r3, [fp, #-20]	; 0xffffffec
     918:	add	r3, r3, #1
     91c:	str	r3, [fp, #-20]	; 0xffffffec
     920:	ldr	r2, [fp, #-20]	; 0xffffffec
     924:	ldr	r3, [fp, #-12]
     928:	cmp	r2, r3
     92c:	blt	878 <get_all_dims_for_array+0x460>
     930:	ldr	r0, [pc, #1080]	; d70 <get_all_dims_for_array+0x958>
     934:	bl	0 <coda_cursor_goto_parent>
     938:	b	d50 <get_all_dims_for_array+0x938>
     93c:	movw	r2, #0
     940:	movt	r2, #0
     944:	ldr	r3, [fp, #-120]	; 0xffffff88
     948:	add	r3, r3, #872	; 0x368
     94c:	lsl	r3, r3, #2
     950:	add	r3, r2, r3
     954:	ldr	r3, [r3, #4]
     958:	sub	r2, fp, #60	; 0x3c
     95c:	mov	r1, r3
     960:	ldr	r0, [pc, #1032]	; d70 <get_all_dims_for_array+0x958>
     964:	bl	0 <coda_cursor_get_record_field_available_status>
     968:	mov	r3, r0
     96c:	cmp	r3, #0
     970:	beq	978 <get_all_dims_for_array+0x560>
     974:	bl	0 <handle_coda_error>
     978:	ldr	r3, [fp, #-60]	; 0xffffffc4
     97c:	cmp	r3, #0
     980:	beq	9e4 <get_all_dims_for_array+0x5cc>
     984:	movw	r2, #0
     988:	movt	r2, #0
     98c:	ldr	r3, [fp, #-120]	; 0xffffff88
     990:	add	r3, r3, #872	; 0x368
     994:	lsl	r3, r3, #2
     998:	add	r3, r2, r3
     99c:	ldr	r3, [r3, #4]
     9a0:	mov	r1, r3
     9a4:	ldr	r0, [pc, #964]	; d70 <get_all_dims_for_array+0x958>
     9a8:	bl	0 <coda_cursor_goto_record_field_by_index>
     9ac:	mov	r3, r0
     9b0:	cmp	r3, #0
     9b4:	beq	9bc <get_all_dims_for_array+0x5a4>
     9b8:	bl	0 <handle_coda_error>
     9bc:	ldr	r3, [fp, #-112]	; 0xffffff90
     9c0:	add	r0, r3, #1
     9c4:	ldr	r3, [fp, #-120]	; 0xffffff88
     9c8:	add	r3, r3, #1
     9cc:	mov	r2, r3
     9d0:	ldr	r1, [fp, #-116]	; 0xffffff8c
     9d4:	bl	418 <get_all_dims_for_array>
     9d8:	ldr	r0, [pc, #912]	; d70 <get_all_dims_for_array+0x958>
     9dc:	bl	0 <coda_cursor_goto_parent>
     9e0:	b	d5c <get_all_dims_for_array+0x944>
     9e4:	movw	r3, #0
     9e8:	movt	r3, #0
     9ec:	ldr	r2, [r3, #3360]	; 0xd20
     9f0:	mov	r3, r2
     9f4:	lsl	r3, r3, #2
     9f8:	add	r3, r3, r2
     9fc:	lsl	r3, r3, #4
     a00:	add	r2, r3, #800	; 0x320
     a04:	movw	r3, #0
     a08:	movt	r3, #0
     a0c:	add	r3, r2, r3
     a10:	str	r3, [fp, #-36]	; 0xffffffdc
     a14:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a18:	ldr	r3, [r3]
     a1c:	str	r3, [fp, #-40]	; 0xffffffd8
     a20:	mov	r3, #0
     a24:	str	r3, [fp, #-24]	; 0xffffffe8
     a28:	b	b00 <get_all_dims_for_array+0x6e8>
     a2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a30:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a34:	add	r2, r2, #2
     a38:	ldr	r3, [r3, r2, lsl #2]
     a3c:	cmn	r3, #1
     a40:	bne	af4 <get_all_dims_for_array+0x6dc>
     a44:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a4c:	add	r3, r2, r3
     a50:	movw	r2, #0
     a54:	movt	r2, #0
     a58:	add	r3, r3, #26
     a5c:	lsl	r3, r3, #2
     a60:	add	r3, r2, r3
     a64:	ldr	r2, [r3, #4]
     a68:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a6c:	ldr	r3, [r3, #44]	; 0x2c
     a70:	lsl	r3, r3, #2
     a74:	add	r3, r2, r3
     a78:	mov	r2, #0
     a7c:	str	r2, [r3]
     a80:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a84:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a88:	add	r3, r2, r3
     a8c:	movw	r2, #0
     a90:	movt	r2, #0
     a94:	lsl	r3, r3, #2
     a98:	add	r3, r2, r3
     a9c:	ldr	r3, [r3, #4]
     aa0:	cmn	r3, #1
     aa4:	bne	acc <get_all_dims_for_array+0x6b4>
     aa8:	ldr	r2, [fp, #-40]	; 0xffffffd8
     aac:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ab0:	add	r3, r2, r3
     ab4:	movw	r2, #0
     ab8:	movt	r2, #0
     abc:	lsl	r3, r3, #2
     ac0:	add	r3, r2, r3
     ac4:	mov	r2, #0
     ac8:	str	r2, [r3, #4]
     acc:	ldr	r2, [fp, #-40]	; 0xffffffd8
     ad0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ad4:	add	r3, r2, r3
     ad8:	movw	r2, #0
     adc:	movt	r2, #0
     ae0:	add	r3, r3, #8
     ae4:	lsl	r3, r3, #2
     ae8:	add	r3, r2, r3
     aec:	mov	r2, #0
     af0:	str	r2, [r3, #4]
     af4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     af8:	add	r3, r3, #1
     afc:	str	r3, [fp, #-24]	; 0xffffffe8
     b00:	ldr	r3, [fp, #-36]	; 0xffffffdc
     b04:	ldr	r3, [r3, #4]
     b08:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b0c:	cmp	r2, r3
     b10:	blt	a2c <get_all_dims_for_array+0x614>
     b14:	b	d5c <get_all_dims_for_array+0x944>
     b18:	movw	r3, #0
     b1c:	movt	r3, #0
     b20:	ldr	r3, [r3, #3360]	; 0xd20
     b24:	ldr	r2, [fp, #-116]	; 0xffffff8c
     b28:	cmp	r2, r3
     b2c:	beq	b50 <get_all_dims_for_array+0x738>
     b30:	movw	r3, #0
     b34:	movt	r3, #0
     b38:	mov	r2, #252	; 0xfc
     b3c:	movw	r1, #0
     b40:	movt	r1, #0
     b44:	movw	r0, #0
     b48:	movt	r0, #0
     b4c:	bl	0 <__assert_fail>
     b50:	ldr	r3, [fp, #-52]	; 0xffffffcc
     b54:	cmp	r3, #4
     b58:	bne	b90 <get_all_dims_for_array+0x778>
     b5c:	sub	r3, fp, #72	; 0x48
     b60:	mov	r1, r3
     b64:	ldr	r0, [pc, #516]	; d70 <get_all_dims_for_array+0x958>
     b68:	bl	0 <coda_cursor_get_string_length>
     b6c:	mov	r3, r0
     b70:	cmp	r3, #0
     b74:	beq	b7c <get_all_dims_for_array+0x764>
     b78:	bl	0 <handle_coda_error>
     b7c:	ldr	r3, [fp, #-72]	; 0xffffffb8
     b80:	mov	r2, r3
     b84:	asr	r3, r2, #31
     b88:	strd	r2, [fp, #-68]	; 0xffffffbc
     b8c:	b	bb0 <get_all_dims_for_array+0x798>
     b90:	sub	r3, fp, #68	; 0x44
     b94:	mov	r1, r3
     b98:	ldr	r0, [pc, #464]	; d70 <get_all_dims_for_array+0x958>
     b9c:	bl	0 <coda_cursor_get_byte_size>
     ba0:	mov	r3, r0
     ba4:	cmp	r3, #0
     ba8:	beq	bb0 <get_all_dims_for_array+0x798>
     bac:	bl	0 <handle_coda_error>
     bb0:	ldr	r2, [fp, #-116]	; 0xffffff8c
     bb4:	mov	r3, r2
     bb8:	lsl	r3, r3, #2
     bbc:	add	r3, r3, r2
     bc0:	lsl	r3, r3, #4
     bc4:	add	r2, r3, #800	; 0x320
     bc8:	movw	r3, #0
     bcc:	movt	r3, #0
     bd0:	add	r3, r2, r3
     bd4:	str	r3, [fp, #-44]	; 0xffffffd4
     bd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bdc:	ldr	r3, [r3]
     be0:	str	r3, [fp, #-48]	; 0xffffffd0
     be4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
     be8:	movw	r2, #0
     bec:	movt	r2, #0
     bf0:	ldr	r3, [fp, #-48]	; 0xffffffd0
     bf4:	add	r3, r3, #26
     bf8:	lsl	r3, r3, #2
     bfc:	add	r3, r2, r3
     c00:	ldr	r2, [r3, #4]
     c04:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c08:	ldr	r3, [r3, #44]	; 0x2c
     c0c:	lsl	r3, r3, #2
     c10:	add	r3, r2, r3
     c14:	mov	r2, r0
     c18:	str	r2, [r3]
     c1c:	movw	r2, #0
     c20:	movt	r2, #0
     c24:	ldr	r3, [fp, #-48]	; 0xffffffd0
     c28:	lsl	r3, r3, #2
     c2c:	add	r3, r2, r3
     c30:	ldr	r3, [r3, #4]
     c34:	cmn	r3, #1
     c38:	bne	c84 <get_all_dims_for_array+0x86c>
     c3c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
     c40:	mov	r1, r2
     c44:	movw	r2, #0
     c48:	movt	r2, #0
     c4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     c50:	lsl	r3, r3, #2
     c54:	add	r3, r2, r3
     c58:	str	r1, [r3, #4]
     c5c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
     c60:	mov	r1, r2
     c64:	movw	r2, #0
     c68:	movt	r2, #0
     c6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     c70:	add	r3, r3, #8
     c74:	lsl	r3, r3, #2
     c78:	add	r3, r2, r3
     c7c:	str	r1, [r3, #4]
     c80:	b	d58 <get_all_dims_for_array+0x940>
     c84:	movw	r2, #0
     c88:	movt	r2, #0
     c8c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     c90:	lsl	r3, r3, #2
     c94:	add	r3, r2, r3
     c98:	ldr	r3, [r3, #4]
     c9c:	mov	r0, r3
     ca0:	asr	r1, r0, #31
     ca4:	ldrd	r2, [fp, #-68]	; 0xffffffbc
     ca8:	cmp	r0, r2
     cac:	sbcs	r3, r1, r3
     cb0:	bge	cd4 <get_all_dims_for_array+0x8bc>
     cb4:	ldrd	r2, [fp, #-68]	; 0xffffffbc
     cb8:	mov	r1, r2
     cbc:	movw	r2, #0
     cc0:	movt	r2, #0
     cc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
     cc8:	lsl	r3, r3, #2
     ccc:	add	r3, r2, r3
     cd0:	str	r1, [r3, #4]
     cd4:	movw	r2, #0
     cd8:	movt	r2, #0
     cdc:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ce0:	add	r3, r3, #8
     ce4:	lsl	r3, r3, #2
     ce8:	add	r3, r2, r3
     cec:	ldr	r3, [r3, #4]
     cf0:	mov	r2, r3
     cf4:	asr	r3, r2, #31
     cf8:	ldrd	r0, [fp, #-68]	; 0xffffffbc
     cfc:	cmp	r0, r2
     d00:	sbcs	r3, r1, r3
     d04:	bge	d58 <get_all_dims_for_array+0x940>
     d08:	ldrd	r2, [fp, #-68]	; 0xffffffbc
     d0c:	mov	r1, r2
     d10:	movw	r2, #0
     d14:	movt	r2, #0
     d18:	ldr	r3, [fp, #-48]	; 0xffffffd0
     d1c:	add	r3, r3, #8
     d20:	lsl	r3, r3, #2
     d24:	add	r3, r2, r3
     d28:	str	r1, [r3, #4]
     d2c:	b	d58 <get_all_dims_for_array+0x940>
     d30:	movw	r3, #0
     d34:	movt	r3, #0
     d38:	movw	r2, #294	; 0x126
     d3c:	movw	r1, #0
     d40:	movt	r1, #0
     d44:	movw	r0, #0
     d48:	movt	r0, #0
     d4c:	bl	0 <__assert_fail>
     d50:	nop	{0}
     d54:	b	d5c <get_all_dims_for_array+0x944>
     d58:	nop	{0}
     d5c:	nop	{0}
     d60:	sub	sp, fp, #4
     d64:	ldr	fp, [sp]
     d68:	add	sp, sp, #4
     d6c:	pop	{pc}		; (ldr pc, [sp], #4)
     d70:	.word	0x00000090

00000d74 <dim_enter_array>:
     d74:	strd	r4, [sp, #-24]!	; 0xffffffe8
     d78:	strd	r6, [sp, #8]
     d7c:	str	fp, [sp, #16]
     d80:	str	lr, [sp, #20]
     d84:	add	fp, sp, #20
     d88:	sub	sp, sp, #112	; 0x70
     d8c:	movw	r3, #0
     d90:	movt	r3, #0
     d94:	ldr	r2, [r3, #3360]	; 0xd20
     d98:	mov	r3, r2
     d9c:	lsl	r3, r3, #2
     da0:	add	r3, r3, r2
     da4:	lsl	r3, r3, #4
     da8:	add	r2, r3, #800	; 0x320
     dac:	movw	r3, #0
     db0:	movt	r3, #0
     db4:	add	r3, r2, r3
     db8:	str	r3, [fp, #-64]	; 0xffffffc0
     dbc:	movw	r3, #0
     dc0:	movt	r3, #0
     dc4:	ldr	r2, [r3, #136]	; 0x88
     dc8:	movw	r3, #0
     dcc:	movt	r3, #0
     dd0:	add	r2, r2, #2
     dd4:	ldr	r3, [r3, r2, lsl #2]
     dd8:	sub	r2, fp, #72	; 0x48
     ddc:	mov	r1, r2
     de0:	mov	r0, r3
     de4:	bl	0 <coda_type_get_class>
     de8:	mov	r3, r0
     dec:	cmp	r3, #0
     df0:	beq	df8 <dim_enter_array+0x84>
     df4:	bl	0 <handle_coda_error>
     df8:	ldr	r3, [fp, #-72]	; 0xffffffb8
     dfc:	sub	r3, r3, #1
     e00:	cmp	r3, #5
     e04:	ldrls	pc, [pc, r3, lsl #2]
     e08:	b	105c <dim_enter_array+0x2e8>
     e0c:	.word	0x00000e24
     e10:	.word	0x0000105c
     e14:	.word	0x0000105c
     e18:	.word	0x00000f44
     e1c:	.word	0x00000f9c
     e20:	.word	0x00000ebc
     e24:	movw	r3, #0
     e28:	movt	r3, #0
     e2c:	ldr	r2, [r3, #136]	; 0x88
     e30:	movw	r3, #0
     e34:	movt	r3, #0
     e38:	add	r2, r2, #2
     e3c:	ldr	r3, [r3, r2, lsl #2]
     e40:	sub	r2, fp, #124	; 0x7c
     e44:	sub	r1, fp, #76	; 0x4c
     e48:	mov	r0, r3
     e4c:	bl	0 <coda_type_get_array_dim>
     e50:	mov	r3, r0
     e54:	cmp	r3, #0
     e58:	beq	e60 <dim_enter_array+0xec>
     e5c:	bl	0 <handle_coda_error>
     e60:	ldr	r2, [fp, #-76]	; 0xffffffb4
     e64:	ldr	r3, [fp, #-64]	; 0xffffffc0
     e68:	str	r2, [r3, #4]
     e6c:	mov	r3, #0
     e70:	str	r3, [fp, #-48]	; 0xffffffd0
     e74:	b	ea8 <dim_enter_array+0x134>
     e78:	ldr	r3, [fp, #-48]	; 0xffffffd0
     e7c:	lsl	r3, r3, #2
     e80:	sub	r2, fp, #20
     e84:	add	r3, r2, r3
     e88:	ldr	r1, [r3, #-104]	; 0xffffff98
     e8c:	ldr	r3, [fp, #-64]	; 0xffffffc0
     e90:	ldr	r2, [fp, #-48]	; 0xffffffd0
     e94:	add	r2, r2, #2
     e98:	str	r1, [r3, r2, lsl #2]
     e9c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ea0:	add	r3, r3, #1
     ea4:	str	r3, [fp, #-48]	; 0xffffffd0
     ea8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     eac:	ldr	r2, [fp, #-48]	; 0xffffffd0
     eb0:	cmp	r2, r3
     eb4:	blt	e78 <dim_enter_array+0x104>
     eb8:	b	107c <dim_enter_array+0x308>
     ebc:	movw	r3, #0
     ec0:	movt	r3, #0
     ec4:	ldr	r2, [r3, #136]	; 0x88
     ec8:	movw	r3, #0
     ecc:	movt	r3, #0
     ed0:	add	r2, r2, #2
     ed4:	ldr	r3, [r3, r2, lsl #2]
     ed8:	sub	r2, fp, #80	; 0x50
     edc:	mov	r1, r2
     ee0:	mov	r0, r3
     ee4:	bl	0 <coda_type_get_special_type>
     ee8:	mov	r3, r0
     eec:	cmp	r3, #0
     ef0:	beq	ef8 <dim_enter_array+0x184>
     ef4:	bl	0 <handle_coda_error>
     ef8:	ldr	r3, [fp, #-80]	; 0xffffffb0
     efc:	cmp	r3, #3
     f00:	bne	f24 <dim_enter_array+0x1b0>
     f04:	ldr	r3, [fp, #-64]	; 0xffffffc0
     f08:	mov	r2, #1
     f0c:	str	r2, [r3, #4]
     f10:	ldr	r3, [fp, #-64]	; 0xffffffc0
     f14:	mov	r2, #2
     f18:	str	r2, [r3, #8]
     f1c:	nop	{0}
     f20:	b	107c <dim_enter_array+0x308>
     f24:	movw	r3, #0
     f28:	movt	r3, #0
     f2c:	movw	r2, #349	; 0x15d
     f30:	movw	r1, #0
     f34:	movt	r1, #0
     f38:	movw	r0, #0
     f3c:	movt	r0, #0
     f40:	bl	0 <__assert_fail>
     f44:	movw	r3, #0
     f48:	movt	r3, #0
     f4c:	ldr	r2, [r3, #136]	; 0x88
     f50:	movw	r3, #0
     f54:	movt	r3, #0
     f58:	add	r2, r2, #2
     f5c:	ldr	r3, [r3, r2, lsl #2]
     f60:	sub	r2, fp, #84	; 0x54
     f64:	mov	r1, r2
     f68:	mov	r0, r3
     f6c:	bl	0 <coda_type_get_string_length>
     f70:	mov	r3, r0
     f74:	cmp	r3, #0
     f78:	beq	f80 <dim_enter_array+0x20c>
     f7c:	bl	0 <handle_coda_error>
     f80:	ldr	r3, [fp, #-64]	; 0xffffffc0
     f84:	mov	r2, #1
     f88:	str	r2, [r3, #4]
     f8c:	ldr	r2, [fp, #-84]	; 0xffffffac
     f90:	ldr	r3, [fp, #-64]	; 0xffffffc0
     f94:	str	r2, [r3, #8]
     f98:	b	107c <dim_enter_array+0x308>
     f9c:	movw	r3, #0
     fa0:	movt	r3, #0
     fa4:	ldr	r2, [r3, #136]	; 0x88
     fa8:	movw	r3, #0
     fac:	movt	r3, #0
     fb0:	add	r2, r2, #2
     fb4:	ldr	r3, [r3, r2, lsl #2]
     fb8:	sub	r2, fp, #92	; 0x5c
     fbc:	mov	r1, r2
     fc0:	mov	r0, r3
     fc4:	bl	0 <coda_type_get_bit_size>
     fc8:	mov	r3, r0
     fcc:	cmp	r3, #0
     fd0:	beq	fd8 <dim_enter_array+0x264>
     fd4:	bl	0 <handle_coda_error>
     fd8:	ldr	r3, [fp, #-64]	; 0xffffffc0
     fdc:	mov	r2, #1
     fe0:	str	r2, [r3, #4]
     fe4:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     fe8:	cmp	r2, #0
     fec:	sbcs	r3, r3, #0
     ff0:	blt	104c <dim_enter_array+0x2d8>
     ff4:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     ff8:	mov	r2, #0
     ffc:	mov	r3, #0
    1000:	lsr	r2, r0, #3
    1004:	orr	r2, r2, r1, lsl #29
    1008:	asr	r3, r1, #3
    100c:	mov	ip, r2
    1010:	ldrd	r2, [fp, #-92]	; 0xffffffa4
    1014:	mov	r0, #7
    1018:	mov	r1, #0
    101c:	and	r6, r2, r0
    1020:	and	r7, r3, r1
    1024:	orrs	r3, r6, r7
    1028:	beq	1034 <dim_enter_array+0x2c0>
    102c:	mov	r3, #1
    1030:	b	1038 <dim_enter_array+0x2c4>
    1034:	mov	r3, #0
    1038:	add	r3, r3, ip
    103c:	mov	r2, r3
    1040:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1044:	str	r2, [r3, #8]
    1048:	b	107c <dim_enter_array+0x308>
    104c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1050:	mvn	r2, #0
    1054:	str	r2, [r3, #8]
    1058:	b	107c <dim_enter_array+0x308>
    105c:	movw	r3, #0
    1060:	movt	r3, #0
    1064:	movw	r2, #386	; 0x182
    1068:	movw	r1, #0
    106c:	movt	r1, #0
    1070:	movw	r0, #0
    1074:	movt	r0, #0
    1078:	bl	0 <__assert_fail>
    107c:	movw	r3, #0
    1080:	movt	r3, #0
    1084:	ldr	r3, [r3]
    1088:	cmp	r3, #0
    108c:	bne	10b8 <dim_enter_array+0x344>
    1090:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1094:	mvn	r2, #0
    1098:	str	r2, [r3]
    109c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    10a0:	mov	r2, #0
    10a4:	str	r2, [r3, #40]	; 0x28
    10a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    10ac:	mov	r2, #0
    10b0:	str	r2, [r3, #44]	; 0x2c
    10b4:	b	1cbc <dim_enter_array+0xf48>
    10b8:	movw	r3, #0
    10bc:	movt	r3, #0
    10c0:	ldr	r3, [r3]
    10c4:	str	r3, [fp, #-68]	; 0xffffffbc
    10c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    10cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
    10d0:	str	r2, [r3]
    10d4:	movw	r3, #0
    10d8:	movt	r3, #0
    10dc:	ldr	r2, [r3]
    10e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    10e4:	ldr	r3, [r3, #4]
    10e8:	add	r3, r2, r3
    10ec:	cmp	r3, #8
    10f0:	ble	1114 <dim_enter_array+0x3a0>
    10f4:	movw	r3, #0
    10f8:	movt	r3, #0
    10fc:	movw	r2, #402	; 0x192
    1100:	movw	r1, #0
    1104:	movt	r1, #0
    1108:	movw	r0, #0
    110c:	movt	r0, #0
    1110:	bl	0 <__assert_fail>
    1114:	movw	r3, #0
    1118:	movt	r3, #0
    111c:	ldr	r2, [r3]
    1120:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1124:	ldr	r3, [r3, #4]
    1128:	add	r2, r2, r3
    112c:	movw	r3, #0
    1130:	movt	r3, #0
    1134:	str	r2, [r3]
    1138:	ldr	r3, [fp, #-68]	; 0xffffffbc
    113c:	cmp	r3, #0
    1140:	ble	1190 <dim_enter_array+0x41c>
    1144:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1148:	sub	r2, r3, #1
    114c:	movw	r3, #0
    1150:	movt	r3, #0
    1154:	add	r2, r2, #30
    1158:	lsl	r2, r2, #3
    115c:	add	r3, r3, r2
    1160:	ldrd	r2, [r3]
    1164:	strd	r2, [fp, #-28]	; 0xffffffe4
    1168:	ldr	r3, [fp, #-68]	; 0xffffffbc
    116c:	sub	r2, r3, #1
    1170:	movw	r3, #0
    1174:	movt	r3, #0
    1178:	add	r2, r2, #38	; 0x26
    117c:	lsl	r2, r2, #3
    1180:	add	r3, r3, r2
    1184:	ldrd	r2, [r3]
    1188:	strd	r2, [fp, #-36]	; 0xffffffdc
    118c:	b	11a8 <dim_enter_array+0x434>
    1190:	mov	r2, #1
    1194:	mov	r3, #0
    1198:	strd	r2, [fp, #-28]	; 0xffffffe4
    119c:	mov	r2, #1
    11a0:	mov	r3, #0
    11a4:	strd	r2, [fp, #-36]	; 0xffffffdc
    11a8:	mov	r3, #0
    11ac:	str	r3, [fp, #-40]	; 0xffffffd8
    11b0:	mov	r3, #0
    11b4:	str	r3, [fp, #-44]	; 0xffffffd4
    11b8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    11bc:	cmp	r2, #1
    11c0:	sbcs	r3, r3, #0
    11c4:	blt	1268 <dim_enter_array+0x4f4>
    11c8:	mov	r3, #0
    11cc:	str	r3, [fp, #-48]	; 0xffffffd0
    11d0:	b	1250 <dim_enter_array+0x4dc>
    11d4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    11d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    11dc:	add	r3, r2, r3
    11e0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    11e4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    11e8:	add	r1, r1, #2
    11ec:	ldr	r1, [r2, r1, lsl #2]
    11f0:	movw	r2, #0
    11f4:	movt	r2, #0
    11f8:	lsl	r3, r3, #2
    11fc:	add	r3, r2, r3
    1200:	str	r1, [r3, #4]
    1204:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1208:	ldr	r3, [fp, #-48]	; 0xffffffd0
    120c:	add	r2, r2, r3
    1210:	movw	r3, #0
    1214:	movt	r3, #0
    1218:	add	r2, r2, #18
    121c:	mov	r1, #0
    1220:	str	r1, [r3, r2, lsl #2]
    1224:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1228:	ldr	r2, [fp, #-48]	; 0xffffffd0
    122c:	add	r2, r2, #2
    1230:	ldr	r3, [r3, r2, lsl #2]
    1234:	cmn	r3, #1
    1238:	bne	1244 <dim_enter_array+0x4d0>
    123c:	mov	r3, #1
    1240:	str	r3, [fp, #-40]	; 0xffffffd8
    1244:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1248:	add	r3, r3, #1
    124c:	str	r3, [fp, #-48]	; 0xffffffd0
    1250:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1254:	ldr	r3, [r3, #4]
    1258:	ldr	r2, [fp, #-48]	; 0xffffffd0
    125c:	cmp	r2, r3
    1260:	blt	11d4 <dim_enter_array+0x460>
    1264:	b	12d8 <dim_enter_array+0x564>
    1268:	mov	r3, #0
    126c:	str	r3, [fp, #-48]	; 0xffffffd0
    1270:	b	12c4 <dim_enter_array+0x550>
    1274:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1278:	ldr	r3, [fp, #-48]	; 0xffffffd0
    127c:	add	r3, r2, r3
    1280:	movw	r2, #0
    1284:	movt	r2, #0
    1288:	lsl	r3, r3, #2
    128c:	add	r3, r2, r3
    1290:	mov	r2, #0
    1294:	str	r2, [r3, #4]
    1298:	ldr	r2, [fp, #-68]	; 0xffffffbc
    129c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12a0:	add	r2, r2, r3
    12a4:	movw	r3, #0
    12a8:	movt	r3, #0
    12ac:	add	r2, r2, #18
    12b0:	mov	r1, #0
    12b4:	str	r1, [r3, r2, lsl #2]
    12b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12bc:	add	r3, r3, #1
    12c0:	str	r3, [fp, #-48]	; 0xffffffd0
    12c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    12c8:	ldr	r3, [r3, #4]
    12cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    12d0:	cmp	r2, r3
    12d4:	blt	1274 <dim_enter_array+0x500>
    12d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    12dc:	cmp	r3, #0
    12e0:	beq	1618 <dim_enter_array+0x8a4>
    12e4:	mov	r3, #0
    12e8:	str	r3, [fp, #-48]	; 0xffffffd0
    12ec:	b	1490 <dim_enter_array+0x71c>
    12f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    12f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    12f8:	add	r2, r2, #2
    12fc:	ldr	r3, [r3, r2, lsl #2]
    1300:	cmn	r3, #1
    1304:	bne	1434 <dim_enter_array+0x6c0>
    1308:	ldr	r2, [fp, #-68]	; 0xffffffbc
    130c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1310:	add	r3, r2, r3
    1314:	movw	r2, #0
    1318:	movt	r2, #0
    131c:	add	r3, r3, #34	; 0x22
    1320:	lsl	r3, r3, #2
    1324:	add	r3, r2, r3
    1328:	ldr	r2, [fp, #-68]	; 0xffffffbc
    132c:	str	r2, [r3, #4]
    1330:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1334:	lsl	r1, r3, #2
    1338:	ldr	r2, [fp, #-68]	; 0xffffffbc
    133c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1340:	add	r6, r2, r3
    1344:	mov	r0, r1
    1348:	bl	0 <malloc>
    134c:	mov	r3, r0
    1350:	mov	r1, r3
    1354:	movw	r2, #0
    1358:	movt	r2, #0
    135c:	add	r3, r6, #26
    1360:	lsl	r3, r3, #2
    1364:	add	r3, r2, r3
    1368:	str	r1, [r3, #4]
    136c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1370:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1374:	add	r3, r2, r3
    1378:	movw	r2, #0
    137c:	movt	r2, #0
    1380:	add	r3, r3, #26
    1384:	lsl	r3, r3, #2
    1388:	add	r3, r2, r3
    138c:	ldr	r3, [r3, #4]
    1390:	cmp	r3, #0
    1394:	bne	13c4 <dim_enter_array+0x650>
    1398:	ldr	r3, [fp, #-28]	; 0xffffffe4
    139c:	lsl	r2, r3, #2
    13a0:	mov	r3, #456	; 0x1c8
    13a4:	str	r3, [sp]
    13a8:	movw	r3, #0
    13ac:	movt	r3, #0
    13b0:	movw	r1, #0
    13b4:	movt	r1, #0
    13b8:	mvn	r0, #0
    13bc:	bl	0 <coda_set_error>
    13c0:	bl	0 <handle_coda_error>
    13c4:	mov	r3, #0
    13c8:	str	r3, [fp, #-52]	; 0xffffffcc
    13cc:	b	1414 <dim_enter_array+0x6a0>
    13d0:	ldr	r2, [fp, #-68]	; 0xffffffbc
    13d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    13d8:	add	r3, r2, r3
    13dc:	movw	r2, #0
    13e0:	movt	r2, #0
    13e4:	add	r3, r3, #26
    13e8:	lsl	r3, r3, #2
    13ec:	add	r3, r2, r3
    13f0:	ldr	r2, [r3, #4]
    13f4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    13f8:	lsl	r3, r3, #2
    13fc:	add	r3, r2, r3
    1400:	mvn	r2, #0
    1404:	str	r2, [r3]
    1408:	ldr	r3, [fp, #-52]	; 0xffffffcc
    140c:	add	r3, r3, #1
    1410:	str	r3, [fp, #-52]	; 0xffffffcc
    1414:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1418:	mov	r0, r3
    141c:	asr	r1, r0, #31
    1420:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    1424:	cmp	r0, r2
    1428:	sbcs	r3, r1, r3
    142c:	blt	13d0 <dim_enter_array+0x65c>
    1430:	b	1484 <dim_enter_array+0x710>
    1434:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1438:	ldr	r3, [fp, #-48]	; 0xffffffd0
    143c:	add	r3, r2, r3
    1440:	movw	r2, #0
    1444:	movt	r2, #0
    1448:	add	r3, r3, #34	; 0x22
    144c:	lsl	r3, r3, #2
    1450:	add	r3, r2, r3
    1454:	mov	r2, #0
    1458:	str	r2, [r3, #4]
    145c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1460:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1464:	add	r3, r2, r3
    1468:	movw	r2, #0
    146c:	movt	r2, #0
    1470:	add	r3, r3, #26
    1474:	lsl	r3, r3, #2
    1478:	add	r3, r2, r3
    147c:	mov	r2, #0
    1480:	str	r2, [r3, #4]
    1484:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1488:	add	r3, r3, #1
    148c:	str	r3, [fp, #-48]	; 0xffffffd0
    1490:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1494:	ldr	r3, [r3, #4]
    1498:	ldr	r2, [fp, #-48]	; 0xffffffd0
    149c:	cmp	r2, r3
    14a0:	blt	12f0 <dim_enter_array+0x57c>
    14a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    14a8:	mov	r2, #0
    14ac:	str	r2, [r3, #44]	; 0x2c
    14b0:	mov	r2, #0
    14b4:	mov	r1, #0
    14b8:	mov	r0, #0
    14bc:	bl	418 <get_all_dims_for_array>
    14c0:	mov	r3, #0
    14c4:	str	r3, [fp, #-48]	; 0xffffffd0
    14c8:	b	1604 <dim_enter_array+0x890>
    14cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    14d0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    14d4:	add	r2, r2, #2
    14d8:	ldr	r3, [r3, r2, lsl #2]
    14dc:	cmn	r3, #1
    14e0:	bne	15f8 <dim_enter_array+0x884>
    14e4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    14e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    14ec:	add	r3, r2, r3
    14f0:	movw	r2, #0
    14f4:	movt	r2, #0
    14f8:	lsl	r3, r3, #2
    14fc:	add	r3, r2, r3
    1500:	ldr	r1, [r3, #4]
    1504:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1508:	ldr	r3, [fp, #-48]	; 0xffffffd0
    150c:	add	r3, r2, r3
    1510:	movw	r2, #0
    1514:	movt	r2, #0
    1518:	add	r3, r3, #8
    151c:	lsl	r3, r3, #2
    1520:	add	r3, r2, r3
    1524:	ldr	r3, [r3, #4]
    1528:	cmp	r1, r3
    152c:	beq	155c <dim_enter_array+0x7e8>
    1530:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1534:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1538:	add	r2, r2, r3
    153c:	movw	r3, #0
    1540:	movt	r3, #0
    1544:	add	r2, r2, #18
    1548:	mov	r1, #1
    154c:	str	r1, [r3, r2, lsl #2]
    1550:	mov	r3, #1
    1554:	str	r3, [fp, #-44]	; 0xffffffd4
    1558:	b	15f8 <dim_enter_array+0x884>
    155c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1560:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1564:	add	r2, r2, r3
    1568:	movw	r3, #0
    156c:	movt	r3, #0
    1570:	add	r2, r2, #18
    1574:	mov	r1, #0
    1578:	str	r1, [r3, r2, lsl #2]
    157c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1580:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1584:	add	r3, r2, r3
    1588:	movw	r2, #0
    158c:	movt	r2, #0
    1590:	add	r3, r3, #26
    1594:	lsl	r3, r3, #2
    1598:	add	r3, r2, r3
    159c:	ldr	r3, [r3, #4]
    15a0:	mov	r0, r3
    15a4:	bl	0 <free>
    15a8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    15ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
    15b0:	add	r3, r2, r3
    15b4:	movw	r2, #0
    15b8:	movt	r2, #0
    15bc:	add	r3, r3, #26
    15c0:	lsl	r3, r3, #2
    15c4:	add	r3, r2, r3
    15c8:	mov	r2, #0
    15cc:	str	r2, [r3, #4]
    15d0:	ldr	r2, [fp, #-68]	; 0xffffffbc
    15d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    15d8:	add	r3, r2, r3
    15dc:	movw	r2, #0
    15e0:	movt	r2, #0
    15e4:	add	r3, r3, #34	; 0x22
    15e8:	lsl	r3, r3, #2
    15ec:	add	r3, r2, r3
    15f0:	mov	r2, #0
    15f4:	str	r2, [r3, #4]
    15f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    15fc:	add	r3, r3, #1
    1600:	str	r3, [fp, #-48]	; 0xffffffd0
    1604:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1608:	ldr	r3, [r3, #4]
    160c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1610:	cmp	r2, r3
    1614:	blt	14cc <dim_enter_array+0x758>
    1618:	movw	r3, #0
    161c:	movt	r3, #0
    1620:	mov	r2, #0
    1624:	str	r2, [r3, #68]	; 0x44
    1628:	movw	r3, #0
    162c:	movt	r3, #0
    1630:	mvn	r2, #0
    1634:	str	r2, [r3, #104]	; 0x68
    1638:	mov	r3, #0
    163c:	str	r3, [fp, #-48]	; 0xffffffd0
    1640:	b	168c <dim_enter_array+0x918>
    1644:	movw	r3, #0
    1648:	movt	r3, #0
    164c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1650:	add	r2, r2, #18
    1654:	ldr	r3, [r3, r2, lsl #2]
    1658:	cmp	r3, #0
    165c:	beq	1680 <dim_enter_array+0x90c>
    1660:	movw	r3, #0
    1664:	movt	r3, #0
    1668:	mov	r2, #1
    166c:	str	r2, [r3, #68]	; 0x44
    1670:	movw	r3, #0
    1674:	movt	r3, #0
    1678:	ldr	r2, [fp, #-48]	; 0xffffffd0
    167c:	str	r2, [r3, #104]	; 0x68
    1680:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1684:	add	r3, r3, #1
    1688:	str	r3, [fp, #-48]	; 0xffffffd0
    168c:	movw	r3, #0
    1690:	movt	r3, #0
    1694:	ldr	r3, [r3]
    1698:	ldr	r2, [fp, #-48]	; 0xffffffd0
    169c:	cmp	r2, r3
    16a0:	blt	1644 <dim_enter_array+0x8d0>
    16a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    16a8:	mov	r2, #1
    16ac:	str	r2, [r3, #40]	; 0x28
    16b0:	mov	r3, #0
    16b4:	str	r3, [fp, #-48]	; 0xffffffd0
    16b8:	b	17f8 <dim_enter_array+0xa84>
    16bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    16c0:	ldr	r1, [r3, #40]	; 0x28
    16c4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    16c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    16cc:	add	r3, r2, r3
    16d0:	movw	r2, #0
    16d4:	movt	r2, #0
    16d8:	lsl	r3, r3, #2
    16dc:	add	r3, r2, r3
    16e0:	ldr	r3, [r3, #4]
    16e4:	mul	r2, r3, r1
    16e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    16ec:	str	r2, [r3, #40]	; 0x28
    16f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    16f4:	cmp	r3, #0
    16f8:	bne	1760 <dim_enter_array+0x9ec>
    16fc:	movw	r2, #0
    1700:	movt	r2, #0
    1704:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1708:	lsl	r3, r3, #2
    170c:	add	r3, r2, r3
    1710:	ldr	r3, [r3, #4]
    1714:	mov	r2, r3
    1718:	asr	r3, r2, #31
    171c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1720:	mul	r0, r3, r1
    1724:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1728:	mul	r1, r2, r1
    172c:	add	r1, r0, r1
    1730:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1734:	umull	r2, r3, r0, r2
    1738:	add	r1, r1, r3
    173c:	mov	r3, r1
    1740:	movw	r1, #0
    1744:	movt	r1, #0
    1748:	ldr	r0, [fp, #-68]	; 0xffffffbc
    174c:	add	r0, r0, #30
    1750:	lsl	r0, r0, #3
    1754:	add	r1, r1, r0
    1758:	strd	r2, [r1]
    175c:	b	17ec <dim_enter_array+0xa78>
    1760:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1764:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1768:	add	r3, r2, r3
    176c:	sub	r2, r3, #1
    1770:	movw	r3, #0
    1774:	movt	r3, #0
    1778:	add	r2, r2, #30
    177c:	lsl	r2, r2, #3
    1780:	add	r3, r3, r2
    1784:	ldrd	r0, [r3]
    1788:	ldr	r2, [fp, #-68]	; 0xffffffbc
    178c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1790:	add	r3, r2, r3
    1794:	movw	r2, #0
    1798:	movt	r2, #0
    179c:	lsl	r3, r3, #2
    17a0:	add	r3, r2, r3
    17a4:	ldr	r3, [r3, #4]
    17a8:	mov	r2, r3
    17ac:	asr	r3, r2, #31
    17b0:	ldr	lr, [fp, #-68]	; 0xffffffbc
    17b4:	ldr	ip, [fp, #-48]	; 0xffffffd0
    17b8:	add	ip, lr, ip
    17bc:	mul	r6, r2, r1
    17c0:	mul	lr, r0, r3
    17c4:	add	lr, r6, lr
    17c8:	umull	r2, r3, r0, r2
    17cc:	add	r1, lr, r3
    17d0:	mov	r3, r1
    17d4:	movw	r1, #0
    17d8:	movt	r1, #0
    17dc:	add	r0, ip, #30
    17e0:	lsl	r0, r0, #3
    17e4:	add	r1, r1, r0
    17e8:	strd	r2, [r1]
    17ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
    17f0:	add	r3, r3, #1
    17f4:	str	r3, [fp, #-48]	; 0xffffffd0
    17f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    17fc:	ldr	r3, [r3, #4]
    1800:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1804:	cmp	r2, r3
    1808:	blt	16bc <dim_enter_array+0x948>
    180c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1810:	cmp	r3, #0
    1814:	beq	19cc <dim_enter_array+0xc58>
    1818:	mov	r3, #0
    181c:	str	r3, [fp, #-48]	; 0xffffffd0
    1820:	b	185c <dim_enter_array+0xae8>
    1824:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1828:	ldr	r3, [fp, #-48]	; 0xffffffd0
    182c:	add	r2, r2, r3
    1830:	movw	r3, #0
    1834:	movt	r3, #0
    1838:	add	r2, r2, #38	; 0x26
    183c:	lsl	r2, r2, #3
    1840:	add	r1, r3, r2
    1844:	mov	r2, #0
    1848:	mov	r3, #0
    184c:	strd	r2, [r1]
    1850:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1854:	add	r3, r3, #1
    1858:	str	r3, [fp, #-48]	; 0xffffffd0
    185c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1860:	ldr	r3, [r3, #4]
    1864:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1868:	cmp	r2, r3
    186c:	blt	1824 <dim_enter_array+0xab0>
    1870:	mov	r3, #0
    1874:	str	r3, [fp, #-56]	; 0xffffffc8
    1878:	b	19ac <dim_enter_array+0xc38>
    187c:	mov	r3, #1
    1880:	str	r3, [fp, #-60]	; 0xffffffc4
    1884:	mov	r3, #0
    1888:	str	r3, [fp, #-48]	; 0xffffffd0
    188c:	b	198c <dim_enter_array+0xc18>
    1890:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1894:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1898:	add	r2, r2, r3
    189c:	movw	r3, #0
    18a0:	movt	r3, #0
    18a4:	add	r2, r2, #18
    18a8:	ldr	r3, [r3, r2, lsl #2]
    18ac:	cmp	r3, #0
    18b0:	beq	18f8 <dim_enter_array+0xb84>
    18b4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    18b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    18bc:	add	r3, r2, r3
    18c0:	movw	r2, #0
    18c4:	movt	r2, #0
    18c8:	add	r3, r3, #26
    18cc:	lsl	r3, r3, #2
    18d0:	add	r3, r2, r3
    18d4:	ldr	r2, [r3, #4]
    18d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    18dc:	lsl	r3, r3, #2
    18e0:	add	r3, r2, r3
    18e4:	ldr	r2, [r3]
    18e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    18ec:	mul	r3, r2, r3
    18f0:	str	r3, [fp, #-60]	; 0xffffffc4
    18f4:	b	1924 <dim_enter_array+0xbb0>
    18f8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    18fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1900:	add	r3, r2, r3
    1904:	movw	r2, #0
    1908:	movt	r2, #0
    190c:	lsl	r3, r3, #2
    1910:	add	r3, r2, r3
    1914:	ldr	r2, [r3, #4]
    1918:	ldr	r3, [fp, #-60]	; 0xffffffc4
    191c:	mul	r3, r2, r3
    1920:	str	r3, [fp, #-60]	; 0xffffffc4
    1924:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1928:	ldr	r3, [fp, #-48]	; 0xffffffd0
    192c:	add	r2, r2, r3
    1930:	movw	r3, #0
    1934:	movt	r3, #0
    1938:	add	r2, r2, #38	; 0x26
    193c:	lsl	r2, r2, #3
    1940:	add	r3, r3, r2
    1944:	ldrd	r0, [r3]
    1948:	ldr	r3, [fp, #-60]	; 0xffffffc4
    194c:	mov	r2, r3
    1950:	asr	r3, r2, #31
    1954:	ldr	lr, [fp, #-68]	; 0xffffffbc
    1958:	ldr	ip, [fp, #-48]	; 0xffffffd0
    195c:	add	ip, lr, ip
    1960:	adds	r4, r0, r2
    1964:	adc	r5, r1, r3
    1968:	movw	r3, #0
    196c:	movt	r3, #0
    1970:	add	r2, ip, #38	; 0x26
    1974:	lsl	r2, r2, #3
    1978:	add	r3, r3, r2
    197c:	strd	r4, [r3]
    1980:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1984:	add	r3, r3, #1
    1988:	str	r3, [fp, #-48]	; 0xffffffd0
    198c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1990:	ldr	r3, [r3, #4]
    1994:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1998:	cmp	r2, r3
    199c:	blt	1890 <dim_enter_array+0xb1c>
    19a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    19a4:	add	r3, r3, #1
    19a8:	str	r3, [fp, #-56]	; 0xffffffc8
    19ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    19b0:	mov	r0, r3
    19b4:	asr	r1, r0, #31
    19b8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    19bc:	cmp	r0, r2
    19c0:	sbcs	r3, r1, r3
    19c4:	blt	187c <dim_enter_array+0xb08>
    19c8:	b	1ae4 <dim_enter_array+0xd70>
    19cc:	movw	r2, #0
    19d0:	movt	r2, #0
    19d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    19d8:	lsl	r3, r3, #2
    19dc:	add	r3, r2, r3
    19e0:	ldr	r3, [r3, #4]
    19e4:	mov	r2, r3
    19e8:	asr	r3, r2, #31
    19ec:	ldr	r1, [fp, #-36]	; 0xffffffdc
    19f0:	mul	r0, r3, r1
    19f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    19f8:	mul	r1, r2, r1
    19fc:	add	r1, r0, r1
    1a00:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1a04:	umull	r2, r3, r0, r2
    1a08:	add	r1, r1, r3
    1a0c:	mov	r3, r1
    1a10:	movw	r1, #0
    1a14:	movt	r1, #0
    1a18:	ldr	r0, [fp, #-68]	; 0xffffffbc
    1a1c:	add	r0, r0, #38	; 0x26
    1a20:	lsl	r0, r0, #3
    1a24:	add	r1, r1, r0
    1a28:	strd	r2, [r1]
    1a2c:	mov	r3, #1
    1a30:	str	r3, [fp, #-48]	; 0xffffffd0
    1a34:	b	1ad0 <dim_enter_array+0xd5c>
    1a38:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1a3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1a40:	add	r3, r2, r3
    1a44:	sub	r2, r3, #1
    1a48:	movw	r3, #0
    1a4c:	movt	r3, #0
    1a50:	add	r2, r2, #38	; 0x26
    1a54:	lsl	r2, r2, #3
    1a58:	add	r3, r3, r2
    1a5c:	ldrd	r0, [r3]
    1a60:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1a64:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1a68:	add	r3, r2, r3
    1a6c:	movw	r2, #0
    1a70:	movt	r2, #0
    1a74:	lsl	r3, r3, #2
    1a78:	add	r3, r2, r3
    1a7c:	ldr	r3, [r3, #4]
    1a80:	mov	r2, r3
    1a84:	asr	r3, r2, #31
    1a88:	ldr	lr, [fp, #-68]	; 0xffffffbc
    1a8c:	ldr	ip, [fp, #-48]	; 0xffffffd0
    1a90:	add	ip, lr, ip
    1a94:	mul	r4, r2, r1
    1a98:	mul	lr, r0, r3
    1a9c:	add	lr, r4, lr
    1aa0:	umull	r2, r3, r0, r2
    1aa4:	add	r1, lr, r3
    1aa8:	mov	r3, r1
    1aac:	movw	r1, #0
    1ab0:	movt	r1, #0
    1ab4:	add	r0, ip, #38	; 0x26
    1ab8:	lsl	r0, r0, #3
    1abc:	add	r1, r1, r0
    1ac0:	strd	r2, [r1]
    1ac4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1ac8:	add	r3, r3, #1
    1acc:	str	r3, [fp, #-48]	; 0xffffffd0
    1ad0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1ad4:	ldr	r3, [r3, #4]
    1ad8:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1adc:	cmp	r2, r3
    1ae0:	blt	1a38 <dim_enter_array+0xcc4>
    1ae4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1ae8:	ldr	r2, [r3, #4]
    1aec:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1af0:	add	r3, r2, r3
    1af4:	sub	r2, r3, #1
    1af8:	movw	r3, #0
    1afc:	movt	r3, #0
    1b00:	add	r2, r2, #38	; 0x26
    1b04:	lsl	r2, r2, #3
    1b08:	add	r3, r3, r2
    1b0c:	ldrd	r2, [r3]
    1b10:	cmp	r2, #1
    1b14:	sbcs	r3, r3, #0
    1b18:	blt	1cbc <dim_enter_array+0xf48>
    1b1c:	movw	r3, #0
    1b20:	movt	r3, #0
    1b24:	ldr	r3, [r3]
    1b28:	sub	r3, r3, #1
    1b2c:	movw	r2, #0
    1b30:	movt	r2, #0
    1b34:	lsl	r3, r3, #2
    1b38:	add	r3, r2, r3
    1b3c:	ldr	r1, [r3, #4]
    1b40:	movw	r3, #0
    1b44:	movt	r3, #0
    1b48:	ldr	r3, [r3]
    1b4c:	sub	r2, r3, #1
    1b50:	mov	r0, r1
    1b54:	asr	r1, r0, #31
    1b58:	movw	r3, #0
    1b5c:	movt	r3, #0
    1b60:	add	r2, r2, #22
    1b64:	lsl	r2, r2, #3
    1b68:	add	r3, r3, r2
    1b6c:	strd	r0, [r3]
    1b70:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1b74:	ldr	r3, [r3, #4]
    1b78:	sub	r3, r3, #2
    1b7c:	str	r3, [fp, #-48]	; 0xffffffd0
    1b80:	b	1c1c <dim_enter_array+0xea8>
    1b84:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1b88:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1b8c:	add	r3, r2, r3
    1b90:	movw	r2, #0
    1b94:	movt	r2, #0
    1b98:	lsl	r3, r3, #2
    1b9c:	add	r3, r2, r3
    1ba0:	ldr	r3, [r3, #4]
    1ba4:	mov	r0, r3
    1ba8:	asr	r1, r0, #31
    1bac:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1bb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1bb4:	add	r3, r2, r3
    1bb8:	add	r2, r3, #1
    1bbc:	movw	r3, #0
    1bc0:	movt	r3, #0
    1bc4:	add	r2, r2, #22
    1bc8:	lsl	r2, r2, #3
    1bcc:	add	r3, r3, r2
    1bd0:	ldrd	r2, [r3]
    1bd4:	ldr	lr, [fp, #-68]	; 0xffffffbc
    1bd8:	ldr	ip, [fp, #-48]	; 0xffffffd0
    1bdc:	add	ip, lr, ip
    1be0:	mul	r4, r2, r1
    1be4:	mul	lr, r0, r3
    1be8:	add	lr, r4, lr
    1bec:	umull	r2, r3, r0, r2
    1bf0:	add	r1, lr, r3
    1bf4:	mov	r3, r1
    1bf8:	movw	r1, #0
    1bfc:	movt	r1, #0
    1c00:	add	r0, ip, #22
    1c04:	lsl	r0, r0, #3
    1c08:	add	r1, r1, r0
    1c0c:	strd	r2, [r1]
    1c10:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1c14:	sub	r3, r3, #1
    1c18:	str	r3, [fp, #-48]	; 0xffffffd0
    1c1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1c20:	cmp	r3, #0
    1c24:	bge	1b84 <dim_enter_array+0xe10>
    1c28:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1c2c:	sub	r3, r3, #1
    1c30:	str	r3, [fp, #-48]	; 0xffffffd0
    1c34:	b	1cb0 <dim_enter_array+0xf3c>
    1c38:	movw	r3, #0
    1c3c:	movt	r3, #0
    1c40:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1c44:	add	r2, r2, #22
    1c48:	lsl	r2, r2, #3
    1c4c:	add	r3, r3, r2
    1c50:	ldrd	r0, [r3]
    1c54:	movw	r3, #0
    1c58:	movt	r3, #0
    1c5c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1c60:	add	r2, r2, #22
    1c64:	lsl	r2, r2, #3
    1c68:	add	r3, r3, r2
    1c6c:	ldrd	r2, [r3]
    1c70:	mul	lr, r2, r1
    1c74:	mul	ip, r0, r3
    1c78:	add	ip, lr, ip
    1c7c:	umull	r2, r3, r0, r2
    1c80:	add	r1, ip, r3
    1c84:	mov	r3, r1
    1c88:	movw	r1, #0
    1c8c:	movt	r1, #0
    1c90:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1c94:	add	r0, r0, #22
    1c98:	lsl	r0, r0, #3
    1c9c:	add	r1, r1, r0
    1ca0:	strd	r2, [r1]
    1ca4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1ca8:	sub	r3, r3, #1
    1cac:	str	r3, [fp, #-48]	; 0xffffffd0
    1cb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1cb4:	cmp	r3, #0
    1cb8:	bge	1c38 <dim_enter_array+0xec4>
    1cbc:	sub	sp, fp, #20
    1cc0:	ldrd	r4, [sp]
    1cc4:	ldrd	r6, [sp, #8]
    1cc8:	ldr	fp, [sp, #16]
    1ccc:	add	sp, sp, #20
    1cd0:	pop	{pc}		; (ldr pc, [sp], #4)

00001cd4 <dim_leave_array>:
    1cd4:	str	fp, [sp, #-8]!
    1cd8:	str	lr, [sp, #4]
    1cdc:	add	fp, sp, #4
    1ce0:	sub	sp, sp, #16
    1ce4:	movw	r3, #0
    1ce8:	movt	r3, #0
    1cec:	ldr	r3, [r3, #3360]	; 0xd20
    1cf0:	cmp	r3, #0
    1cf4:	bge	1d18 <dim_leave_array+0x44>
    1cf8:	movw	r3, #0
    1cfc:	movt	r3, #0
    1d00:	movw	r2, #579	; 0x243
    1d04:	movw	r1, #0
    1d08:	movt	r1, #0
    1d0c:	movw	r0, #0
    1d10:	movt	r0, #0
    1d14:	bl	0 <__assert_fail>
    1d18:	movw	r3, #0
    1d1c:	movt	r3, #0
    1d20:	ldr	r2, [r3, #3360]	; 0xd20
    1d24:	mov	r3, r2
    1d28:	lsl	r3, r3, #2
    1d2c:	add	r3, r3, r2
    1d30:	lsl	r3, r3, #4
    1d34:	add	r2, r3, #800	; 0x320
    1d38:	movw	r3, #0
    1d3c:	movt	r3, #0
    1d40:	add	r3, r2, r3
    1d44:	str	r3, [fp, #-12]
    1d48:	ldr	r3, [fp, #-12]
    1d4c:	ldr	r3, [r3]
    1d50:	str	r3, [fp, #-16]
    1d54:	movw	r3, #0
    1d58:	movt	r3, #0
    1d5c:	ldr	r2, [r3]
    1d60:	ldr	r3, [fp, #-12]
    1d64:	ldr	r3, [r3, #4]
    1d68:	sub	r2, r2, r3
    1d6c:	movw	r3, #0
    1d70:	movt	r3, #0
    1d74:	str	r2, [r3]
    1d78:	mov	r3, #0
    1d7c:	str	r3, [fp, #-8]
    1d80:	b	1de0 <dim_leave_array+0x10c>
    1d84:	ldr	r2, [fp, #-16]
    1d88:	ldr	r3, [fp, #-8]
    1d8c:	add	r2, r2, r3
    1d90:	movw	r3, #0
    1d94:	movt	r3, #0
    1d98:	add	r2, r2, #18
    1d9c:	ldr	r3, [r3, r2, lsl #2]
    1da0:	cmp	r3, #0
    1da4:	beq	1dd4 <dim_leave_array+0x100>
    1da8:	ldr	r2, [fp, #-16]
    1dac:	ldr	r3, [fp, #-8]
    1db0:	add	r3, r2, r3
    1db4:	movw	r2, #0
    1db8:	movt	r2, #0
    1dbc:	add	r3, r3, #26
    1dc0:	lsl	r3, r3, #2
    1dc4:	add	r3, r2, r3
    1dc8:	ldr	r3, [r3, #4]
    1dcc:	mov	r0, r3
    1dd0:	bl	0 <free>
    1dd4:	ldr	r3, [fp, #-8]
    1dd8:	add	r3, r3, #1
    1ddc:	str	r3, [fp, #-8]
    1de0:	ldr	r3, [fp, #-12]
    1de4:	ldr	r3, [r3, #4]
    1de8:	ldr	r2, [fp, #-8]
    1dec:	cmp	r2, r3
    1df0:	blt	1d84 <dim_leave_array+0xb0>
    1df4:	movw	r3, #0
    1df8:	movt	r3, #0
    1dfc:	mov	r2, #0
    1e00:	str	r2, [r3, #68]	; 0x44
    1e04:	movw	r3, #0
    1e08:	movt	r3, #0
    1e0c:	mvn	r2, #0
    1e10:	str	r2, [r3, #104]	; 0x68
    1e14:	mov	r3, #0
    1e18:	str	r3, [fp, #-8]
    1e1c:	b	1e68 <dim_leave_array+0x194>
    1e20:	movw	r3, #0
    1e24:	movt	r3, #0
    1e28:	ldr	r2, [fp, #-8]
    1e2c:	add	r2, r2, #18
    1e30:	ldr	r3, [r3, r2, lsl #2]
    1e34:	cmp	r3, #0
    1e38:	beq	1e5c <dim_leave_array+0x188>
    1e3c:	movw	r3, #0
    1e40:	movt	r3, #0
    1e44:	mov	r2, #1
    1e48:	str	r2, [r3, #68]	; 0x44
    1e4c:	movw	r3, #0
    1e50:	movt	r3, #0
    1e54:	ldr	r2, [fp, #-8]
    1e58:	str	r2, [r3, #104]	; 0x68
    1e5c:	ldr	r3, [fp, #-8]
    1e60:	add	r3, r3, #1
    1e64:	str	r3, [fp, #-8]
    1e68:	movw	r3, #0
    1e6c:	movt	r3, #0
    1e70:	ldr	r3, [r3]
    1e74:	ldr	r2, [fp, #-8]
    1e78:	cmp	r2, r3
    1e7c:	blt	1e20 <dim_leave_array+0x14c>
    1e80:	ldr	r3, [fp, #-12]
    1e84:	ldr	r2, [r3, #4]
    1e88:	ldr	r3, [fp, #-16]
    1e8c:	add	r3, r2, r3
    1e90:	sub	r2, r3, #1
    1e94:	movw	r3, #0
    1e98:	movt	r3, #0
    1e9c:	add	r2, r2, #38	; 0x26
    1ea0:	lsl	r2, r2, #3
    1ea4:	add	r3, r3, r2
    1ea8:	ldrd	r2, [r3]
    1eac:	cmp	r2, #1
    1eb0:	sbcs	r3, r3, #0
    1eb4:	blt	1f48 <dim_leave_array+0x274>
    1eb8:	ldr	r3, [fp, #-16]
    1ebc:	sub	r3, r3, #1
    1ec0:	str	r3, [fp, #-8]
    1ec4:	b	1f3c <dim_leave_array+0x268>
    1ec8:	movw	r3, #0
    1ecc:	movt	r3, #0
    1ed0:	ldr	r2, [fp, #-8]
    1ed4:	add	r2, r2, #22
    1ed8:	lsl	r2, r2, #3
    1edc:	add	r3, r3, r2
    1ee0:	ldrd	r0, [r3]
    1ee4:	movw	r3, #0
    1ee8:	movt	r3, #0
    1eec:	ldr	r2, [fp, #-16]
    1ef0:	add	r2, r2, #22
    1ef4:	lsl	r2, r2, #3
    1ef8:	add	r3, r3, r2
    1efc:	ldrd	r2, [r3]
    1f00:	bl	0 <__aeabi_ldivmod>
    1f04:	mov	r2, r0
    1f08:	mov	r3, r1
    1f0c:	mov	r0, r2
    1f10:	mov	r1, r3
    1f14:	movw	r3, #0
    1f18:	movt	r3, #0
    1f1c:	ldr	r2, [fp, #-8]
    1f20:	add	r2, r2, #22
    1f24:	lsl	r2, r2, #3
    1f28:	add	r3, r3, r2
    1f2c:	strd	r0, [r3]
    1f30:	ldr	r3, [fp, #-8]
    1f34:	sub	r3, r3, #1
    1f38:	str	r3, [fp, #-8]
    1f3c:	ldr	r3, [fp, #-8]
    1f40:	cmp	r3, #0
    1f44:	bge	1ec8 <dim_leave_array+0x1f4>
    1f48:	nop	{0}
    1f4c:	sub	sp, fp, #4
    1f50:	ldr	fp, [sp]
    1f54:	add	sp, sp, #4
    1f58:	pop	{pc}		; (ldr pc, [sp], #4)

00001f5c <get_record_field_available_status>:
    1f5c:	str	fp, [sp, #-8]!
    1f60:	str	lr, [sp, #4]
    1f64:	add	fp, sp, #4
    1f68:	sub	sp, sp, #48	; 0x30
    1f6c:	str	r0, [fp, #-40]	; 0xffffffd8
    1f70:	str	r1, [fp, #-44]	; 0xffffffd4
    1f74:	str	r2, [fp, #-48]	; 0xffffffd0
    1f78:	sub	r3, fp, #28
    1f7c:	mov	r1, r3
    1f80:	ldr	r0, [pc, #1012]	; 237c <get_record_field_available_status+0x420>
    1f84:	bl	0 <coda_cursor_get_type_class>
    1f88:	mov	r3, r0
    1f8c:	cmp	r3, #0
    1f90:	beq	1f98 <get_record_field_available_status+0x3c>
    1f94:	bl	0 <handle_coda_error>
    1f98:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1f9c:	cmp	r3, #0
    1fa0:	beq	225c <get_record_field_available_status+0x300>
    1fa4:	cmp	r3, #1
    1fa8:	bne	2340 <get_record_field_available_status+0x3e4>
    1fac:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1fb0:	mov	r3, r2
    1fb4:	lsl	r3, r3, #2
    1fb8:	add	r3, r3, r2
    1fbc:	lsl	r3, r3, #4
    1fc0:	add	r2, r3, #800	; 0x320
    1fc4:	movw	r3, #0
    1fc8:	movt	r3, #0
    1fcc:	add	r3, r2, r3
    1fd0:	str	r3, [fp, #-20]	; 0xffffffec
    1fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
    1fd8:	ldr	r3, [r3]
    1fdc:	str	r3, [fp, #-24]	; 0xffffffe8
    1fe0:	movw	r3, #0
    1fe4:	movt	r3, #0
    1fe8:	ldr	r3, [r3, #3360]	; 0xd20
    1fec:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1ff0:	cmp	r2, r3
    1ff4:	blt	2018 <get_record_field_available_status+0xbc>
    1ff8:	movw	r3, #0
    1ffc:	movt	r3, #0
    2000:	movw	r2, #638	; 0x27e
    2004:	movw	r1, #0
    2008:	movt	r1, #0
    200c:	movw	r0, #0
    2010:	movt	r0, #0
    2014:	bl	0 <__assert_fail>
    2018:	ldr	r3, [fp, #-44]	; 0xffffffd4
    201c:	cmp	r3, #0
    2020:	bne	2030 <get_record_field_available_status+0xd4>
    2024:	ldr	r3, [fp, #-20]	; 0xffffffec
    2028:	mov	r2, #0
    202c:	str	r2, [r3, #44]	; 0x2c
    2030:	movw	r3, #0
    2034:	movt	r3, #0
    2038:	ldr	r3, [r3, #3360]	; 0xd20
    203c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    2040:	cmp	r2, r3
    2044:	bge	2088 <get_record_field_available_status+0x12c>
    2048:	ldr	r3, [fp, #-20]	; 0xffffffec
    204c:	ldr	r3, [r3, #44]	; 0x2c
    2050:	ldr	r2, [fp, #-20]	; 0xffffffec
    2054:	ldr	r2, [r2, #40]	; 0x28
    2058:	ldr	r1, [fp, #-44]	; 0xffffffd4
    205c:	add	r1, r1, #1
    2060:	mul	r0, r2, r3
    2064:	movw	r2, #0
    2068:	movt	r2, #0
    206c:	mov	r3, r1
    2070:	lsl	r3, r3, #2
    2074:	add	r3, r3, r1
    2078:	lsl	r3, r3, #4
    207c:	add	r3, r2, r3
    2080:	add	r3, r3, #844	; 0x34c
    2084:	str	r0, [r3]
    2088:	mov	r3, #1
    208c:	str	r3, [fp, #-8]
    2090:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2094:	str	r3, [fp, #-12]
    2098:	b	2128 <get_record_field_available_status+0x1cc>
    209c:	movw	r3, #0
    20a0:	movt	r3, #0
    20a4:	ldr	r2, [fp, #-12]
    20a8:	add	r2, r2, #18
    20ac:	ldr	r3, [r3, r2, lsl #2]
    20b0:	cmp	r3, #0
    20b4:	beq	20f8 <get_record_field_available_status+0x19c>
    20b8:	movw	r2, #0
    20bc:	movt	r2, #0
    20c0:	ldr	r3, [fp, #-12]
    20c4:	add	r3, r3, #26
    20c8:	lsl	r3, r3, #2
    20cc:	add	r3, r2, r3
    20d0:	ldr	r2, [r3, #4]
    20d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    20d8:	ldr	r3, [r3, #44]	; 0x2c
    20dc:	lsl	r3, r3, #2
    20e0:	add	r3, r2, r3
    20e4:	ldr	r2, [r3]
    20e8:	ldr	r3, [fp, #-8]
    20ec:	mul	r3, r2, r3
    20f0:	str	r3, [fp, #-8]
    20f4:	b	211c <get_record_field_available_status+0x1c0>
    20f8:	movw	r2, #0
    20fc:	movt	r2, #0
    2100:	ldr	r3, [fp, #-12]
    2104:	lsl	r3, r3, #2
    2108:	add	r3, r2, r3
    210c:	ldr	r2, [r3, #4]
    2110:	ldr	r3, [fp, #-8]
    2114:	mul	r3, r2, r3
    2118:	str	r3, [fp, #-8]
    211c:	ldr	r3, [fp, #-12]
    2120:	add	r3, r3, #1
    2124:	str	r3, [fp, #-12]
    2128:	ldr	r3, [fp, #-20]	; 0xffffffec
    212c:	ldr	r2, [r3, #4]
    2130:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2134:	add	r3, r2, r3
    2138:	ldr	r2, [fp, #-12]
    213c:	cmp	r2, r3
    2140:	blt	209c <get_record_field_available_status+0x140>
    2144:	ldr	r3, [fp, #-8]
    2148:	cmp	r3, #0
    214c:	ble	2254 <get_record_field_available_status+0x2f8>
    2150:	ldr	r0, [pc, #548]	; 237c <get_record_field_available_status+0x420>
    2154:	bl	0 <coda_cursor_goto_first_array_element>
    2158:	mov	r3, r0
    215c:	cmp	r3, #0
    2160:	beq	2168 <get_record_field_available_status+0x20c>
    2164:	bl	0 <handle_coda_error>
    2168:	mov	r3, #0
    216c:	str	r3, [fp, #-16]
    2170:	b	2238 <get_record_field_available_status+0x2dc>
    2174:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2178:	add	r0, r3, #1
    217c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    2180:	add	r3, r3, #1
    2184:	ldr	r2, [fp, #-48]	; 0xffffffd0
    2188:	mov	r1, r3
    218c:	bl	1f5c <get_record_field_available_status>
    2190:	mov	r3, r0
    2194:	cmp	r3, #0
    2198:	beq	21ac <get_record_field_available_status+0x250>
    219c:	ldr	r0, [pc, #472]	; 237c <get_record_field_available_status+0x420>
    21a0:	bl	0 <coda_cursor_goto_parent>
    21a4:	mov	r3, #1
    21a8:	b	2368 <get_record_field_available_status+0x40c>
    21ac:	ldr	r3, [fp, #-8]
    21b0:	sub	r3, r3, #1
    21b4:	ldr	r2, [fp, #-16]
    21b8:	cmp	r2, r3
    21bc:	bge	222c <get_record_field_available_status+0x2d0>
    21c0:	ldr	r0, [pc, #436]	; 237c <get_record_field_available_status+0x420>
    21c4:	bl	0 <coda_cursor_goto_next_array_element>
    21c8:	mov	r3, r0
    21cc:	cmp	r3, #0
    21d0:	beq	21d8 <get_record_field_available_status+0x27c>
    21d4:	bl	0 <handle_coda_error>
    21d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    21dc:	add	r1, r3, #1
    21e0:	movw	r2, #0
    21e4:	movt	r2, #0
    21e8:	mov	r3, r1
    21ec:	lsl	r3, r3, #2
    21f0:	add	r3, r3, r1
    21f4:	lsl	r3, r3, #4
    21f8:	add	r3, r2, r3
    21fc:	add	r3, r3, #844	; 0x34c
    2200:	ldr	r3, [r3]
    2204:	add	r0, r3, #1
    2208:	movw	r2, #0
    220c:	movt	r2, #0
    2210:	mov	r3, r1
    2214:	lsl	r3, r3, #2
    2218:	add	r3, r3, r1
    221c:	lsl	r3, r3, #4
    2220:	add	r3, r2, r3
    2224:	add	r3, r3, #844	; 0x34c
    2228:	str	r0, [r3]
    222c:	ldr	r3, [fp, #-16]
    2230:	add	r3, r3, #1
    2234:	str	r3, [fp, #-16]
    2238:	ldr	r2, [fp, #-16]
    223c:	ldr	r3, [fp, #-8]
    2240:	cmp	r2, r3
    2244:	blt	2174 <get_record_field_available_status+0x218>
    2248:	ldr	r0, [pc, #300]	; 237c <get_record_field_available_status+0x420>
    224c:	bl	0 <coda_cursor_goto_parent>
    2250:	b	2364 <get_record_field_available_status+0x408>
    2254:	nop	{0}
    2258:	b	2364 <get_record_field_available_status+0x408>
    225c:	movw	r2, #0
    2260:	movt	r2, #0
    2264:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2268:	add	r3, r3, #872	; 0x368
    226c:	lsl	r3, r3, #2
    2270:	add	r3, r2, r3
    2274:	ldr	r3, [r3, #4]
    2278:	sub	r2, fp, #32
    227c:	mov	r1, r3
    2280:	ldr	r0, [pc, #244]	; 237c <get_record_field_available_status+0x420>
    2284:	bl	0 <coda_cursor_get_record_field_available_status>
    2288:	mov	r3, r0
    228c:	cmp	r3, #0
    2290:	beq	2298 <get_record_field_available_status+0x33c>
    2294:	bl	0 <handle_coda_error>
    2298:	ldr	r3, [fp, #-32]	; 0xffffffe0
    229c:	cmp	r3, #0
    22a0:	beq	2360 <get_record_field_available_status+0x404>
    22a4:	movw	r3, #0
    22a8:	movt	r3, #0
    22ac:	ldr	r3, [r3, #3748]	; 0xea4
    22b0:	sub	r3, r3, #1
    22b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    22b8:	cmp	r2, r3
    22bc:	bne	22c8 <get_record_field_available_status+0x36c>
    22c0:	mov	r3, #1
    22c4:	b	2368 <get_record_field_available_status+0x40c>
    22c8:	movw	r2, #0
    22cc:	movt	r2, #0
    22d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    22d4:	add	r3, r3, #872	; 0x368
    22d8:	lsl	r3, r3, #2
    22dc:	add	r3, r2, r3
    22e0:	ldr	r3, [r3, #4]
    22e4:	mov	r1, r3
    22e8:	ldr	r0, [pc, #140]	; 237c <get_record_field_available_status+0x420>
    22ec:	bl	0 <coda_cursor_goto_record_field_by_index>
    22f0:	mov	r3, r0
    22f4:	cmp	r3, #0
    22f8:	beq	2300 <get_record_field_available_status+0x3a4>
    22fc:	bl	0 <handle_coda_error>
    2300:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2304:	add	r0, r3, #1
    2308:	ldr	r3, [fp, #-48]	; 0xffffffd0
    230c:	add	r3, r3, #1
    2310:	mov	r2, r3
    2314:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2318:	bl	1f5c <get_record_field_available_status>
    231c:	mov	r3, r0
    2320:	str	r3, [fp, #-32]	; 0xffffffe0
    2324:	ldr	r0, [pc, #80]	; 237c <get_record_field_available_status+0x420>
    2328:	bl	0 <coda_cursor_goto_parent>
    232c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2330:	cmp	r3, #0
    2334:	beq	2360 <get_record_field_available_status+0x404>
    2338:	mov	r3, #1
    233c:	b	2368 <get_record_field_available_status+0x40c>
    2340:	movw	r3, #0
    2344:	movt	r3, #0
    2348:	movw	r2, #729	; 0x2d9
    234c:	movw	r1, #0
    2350:	movt	r1, #0
    2354:	movw	r0, #0
    2358:	movt	r0, #0
    235c:	bl	0 <__assert_fail>
    2360:	nop	{0}
    2364:	mov	r3, #0
    2368:	mov	r0, r3
    236c:	sub	sp, fp, #4
    2370:	ldr	fp, [sp]
    2374:	add	sp, sp, #4
    2378:	pop	{pc}		; (ldr pc, [sp], #4)
    237c:	.word	0x00000090

00002380 <dim_record_field_available>:
    2380:	str	fp, [sp, #-8]!
    2384:	str	lr, [sp, #4]
    2388:	add	fp, sp, #4
    238c:	mov	r2, #0
    2390:	mov	r1, #0
    2394:	mov	r0, #0
    2398:	bl	1f5c <get_record_field_available_status>
    239c:	mov	r3, r0
    23a0:	mov	r0, r3
    23a4:	sub	sp, fp, #4
    23a8:	ldr	fp, [sp]
    23ac:	add	sp, sp, #4
    23b0:	pop	{pc}		; (ldr pc, [sp], #4)
