
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-dim.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_record_field_available_status>:
       0:	strd	r4, [sp, #-36]!	; 0xffffffdc
       4:	strd	r6, [sp, #8]
       8:	mov	r7, r0
       c:	mov	r6, r2
      10:	strd	r8, [sp, #16]
      14:	mov	r8, r1
      18:	strd	sl, [sp, #24]
      1c:	str	lr, [sp, #32]
      20:	sub	sp, sp, #12
      24:	ldr	r0, [pc, #632]	; 2a4 <get_record_field_available_status+0x2a4>
      28:	mov	r1, sp
      2c:	bl	0 <coda_cursor_get_type_class>
      30:	cmp	r0, #0
      34:	bne	1ac <get_record_field_available_status+0x1ac>
      38:	ldr	r3, [sp]
      3c:	cmp	r3, #0
      40:	beq	120 <get_record_field_available_status+0x120>
      44:	cmp	r3, #1
      48:	bne	264 <get_record_field_available_status+0x264>
      4c:	movw	r5, #0
      50:	movt	r5, #0
      54:	lsl	ip, r8, #2
      58:	ldr	r2, [r5, #3360]	; 0xd20
      5c:	add	r3, ip, r8
      60:	add	r3, r5, r3, lsl #4
      64:	ldr	r3, [r3, #800]	; 0x320
      68:	cmp	r2, r8
      6c:	ble	284 <get_record_field_available_status+0x284>
      70:	add	ip, ip, r8
      74:	cmp	r8, #0
      78:	add	ip, r5, ip, lsl #4
      7c:	streq	r8, [r5, #844]	; 0x34c
      80:	add	r8, r8, #1
      84:	ldr	r1, [ip, #804]	; 0x324
      88:	lsl	r9, r8, #2
      8c:	ldr	lr, [ip, #840]	; 0x348
      90:	add	r0, r9, r8
      94:	add	r0, r5, r0, lsl #4
      98:	ldr	r2, [ip, #844]	; 0x34c
      9c:	mul	lr, lr, r2
      a0:	add	r2, r3, r1
      a4:	cmp	r2, r3
      a8:	str	lr, [r0, #844]	; 0x34c
      ac:	ble	1b4 <get_record_field_available_status+0x1b4>
      b0:	movw	r0, #0
      b4:	movt	r0, #0
      b8:	add	r3, r3, #1
      bc:	add	r1, r0, #4
      c0:	add	r3, r0, r3, lsl #2
      c4:	mov	r4, #1
      c8:	add	r1, r1, r2, lsl #2
      cc:	ldr	r2, [r3, #68]	; 0x44
      d0:	add	r3, r3, #4
      d4:	cmp	r2, #0
      d8:	ldrne	r2, [r3, #100]	; 0x64
      dc:	ldrne	r0, [ip, #844]	; 0x34c
      e0:	ldreq	r2, [r3, #-4]
      e4:	ldrne	r2, [r2, r0, lsl #2]
      e8:	cmp	r3, r1
      ec:	mul	r4, r2, r4
      f0:	bne	cc <get_record_field_available_status+0xcc>
      f4:	cmp	r4, #0
      f8:	bgt	1b8 <get_record_field_available_status+0x1b8>
      fc:	mov	fp, #0
     100:	mov	r0, fp
     104:	add	sp, sp, #12
     108:	ldrd	r4, [sp]
     10c:	ldrd	r6, [sp, #8]
     110:	ldrd	r8, [sp, #16]
     114:	ldrd	sl, [sp, #24]
     118:	add	sp, sp, #32
     11c:	pop	{pc}		; (ldr pc, [sp], #4)
     120:	movw	r5, #0
     124:	movt	r5, #0
     128:	add	r4, r6, #872	; 0x368
     12c:	add	r0, r5, #144	; 0x90
     130:	add	r3, r5, r4, lsl #2
     134:	add	r2, sp, #4
     138:	ldr	r1, [r3, #4]
     13c:	bl	0 <coda_cursor_get_record_field_available_status>
     140:	cmp	r0, #0
     144:	bne	23c <get_record_field_available_status+0x23c>
     148:	ldr	r3, [sp, #4]
     14c:	cmp	r3, #0
     150:	beq	fc <get_record_field_available_status+0xfc>
     154:	ldr	r3, [r5, #3748]	; 0xea4
     158:	sub	r3, r3, #1
     15c:	cmp	r3, r6
     160:	beq	1a4 <get_record_field_available_status+0x1a4>
     164:	add	r5, r5, r4, lsl #2
     168:	ldr	r0, [pc, #308]	; 2a4 <get_record_field_available_status+0x2a4>
     16c:	ldr	r1, [r5, #4]
     170:	bl	0 <coda_cursor_goto_record_field_by_index>
     174:	cmp	r0, #0
     178:	bne	25c <get_record_field_available_status+0x25c>
     17c:	add	r2, r6, #1
     180:	mov	r1, r8
     184:	add	r0, r7, #1
     188:	bl	0 <get_record_field_available_status>
     18c:	str	r0, [sp, #4]
     190:	ldr	r0, [pc, #268]	; 2a4 <get_record_field_available_status+0x2a4>
     194:	bl	0 <coda_cursor_goto_parent>
     198:	ldr	r3, [sp, #4]
     19c:	cmp	r3, #0
     1a0:	beq	fc <get_record_field_available_status+0xfc>
     1a4:	mov	fp, #1
     1a8:	b	100 <get_record_field_available_status+0x100>
     1ac:	bl	0 <handle_coda_error>
     1b0:	b	38 <get_record_field_available_status+0x38>
     1b4:	mov	r4, #1
     1b8:	ldr	r0, [pc, #228]	; 2a4 <get_record_field_available_status+0x2a4>
     1bc:	bl	0 <coda_cursor_goto_first_array_element>
     1c0:	cmp	r0, #0
     1c4:	bne	234 <get_record_field_available_status+0x234>
     1c8:	add	r9, r9, r8
     1cc:	add	r7, r7, #1
     1d0:	add	r5, r5, r9, lsl #4
     1d4:	mov	sl, #0
     1d8:	mov	r2, r6
     1dc:	mov	r1, r8
     1e0:	mov	r0, r7
     1e4:	bl	0 <get_record_field_available_status>
     1e8:	subs	fp, r0, #0
     1ec:	bne	24c <get_record_field_available_status+0x24c>
     1f0:	sub	r3, r4, #1
     1f4:	cmp	r3, sl
     1f8:	bgt	214 <get_record_field_available_status+0x214>
     1fc:	add	sl, sl, #1
     200:	cmp	r4, sl
     204:	bgt	1d8 <get_record_field_available_status+0x1d8>
     208:	ldr	r0, [pc, #148]	; 2a4 <get_record_field_available_status+0x2a4>
     20c:	bl	0 <coda_cursor_goto_parent>
     210:	b	100 <get_record_field_available_status+0x100>
     214:	ldr	r0, [pc, #136]	; 2a4 <get_record_field_available_status+0x2a4>
     218:	bl	0 <coda_cursor_goto_next_array_element>
     21c:	cmp	r0, #0
     220:	bne	244 <get_record_field_available_status+0x244>
     224:	ldr	r3, [r5, #844]	; 0x34c
     228:	add	r3, r3, #1
     22c:	str	r3, [r5, #844]	; 0x34c
     230:	b	1fc <get_record_field_available_status+0x1fc>
     234:	bl	0 <handle_coda_error>
     238:	b	1c8 <get_record_field_available_status+0x1c8>
     23c:	bl	0 <handle_coda_error>
     240:	b	148 <get_record_field_available_status+0x148>
     244:	bl	0 <handle_coda_error>
     248:	b	224 <get_record_field_available_status+0x224>
     24c:	ldr	r0, [pc, #80]	; 2a4 <get_record_field_available_status+0x2a4>
     250:	mov	fp, #1
     254:	bl	0 <coda_cursor_goto_parent>
     258:	b	100 <get_record_field_available_status+0x100>
     25c:	bl	0 <handle_coda_error>
     260:	b	17c <get_record_field_available_status+0x17c>
     264:	movw	r3, #0
     268:	movt	r3, #0
     26c:	movw	r1, #0
     270:	movt	r1, #0
     274:	movw	r0, #0
     278:	movt	r0, #0
     27c:	movw	r2, #729	; 0x2d9
     280:	bl	0 <__assert_fail>
     284:	movw	r3, #0
     288:	movt	r3, #0
     28c:	movw	r1, #0
     290:	movt	r1, #0
     294:	movw	r0, #0
     298:	movt	r0, #0
     29c:	movw	r2, #638	; 0x27e
     2a0:	bl	0 <__assert_fail>
     2a4:	.word	0x00000090

000002a8 <get_all_dims_for_array>:
     2a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
     2ac:	mov	r5, r1
     2b0:	strd	r6, [sp, #8]
     2b4:	mov	r7, r0
     2b8:	mov	r6, r2
     2bc:	strd	r8, [sp, #16]
     2c0:	strd	sl, [sp, #24]
     2c4:	str	lr, [sp, #32]
     2c8:	sub	sp, sp, #44	; 0x2c
     2cc:	ldr	r0, [pc, #1148]	; 750 <get_all_dims_for_array+0x4a8>
     2d0:	mov	r1, sp
     2d4:	bl	0 <coda_cursor_get_type_class>
     2d8:	cmp	r0, #0
     2dc:	bne	57c <get_all_dims_for_array+0x2d4>
     2e0:	ldr	r3, [sp]
     2e4:	cmp	r3, #5
     2e8:	ldrls	pc, [pc, r3, lsl #2]
     2ec:	b	6d8 <get_all_dims_for_array+0x430>
     2f0:	.word	0x000004cc
     2f4:	.word	0x000003c8
     2f8:	.word	0x000006d8
     2fc:	.word	0x000006d8
     300:	.word	0x00000308
     304:	.word	0x00000308
     308:	movw	r4, #0
     30c:	movt	r4, #0
     310:	ldr	r2, [r4, #3360]	; 0xd20
     314:	cmp	r2, r5
     318:	bne	718 <get_all_dims_for_array+0x470>
     31c:	cmp	r3, #4
     320:	beq	5ac <get_all_dims_for_array+0x304>
     324:	add	r1, sp, #8
     328:	add	r0, r4, #144	; 0x90
     32c:	bl	0 <coda_cursor_get_byte_size>
     330:	cmp	r0, #0
     334:	bne	584 <get_all_dims_for_array+0x2dc>
     338:	ldrd	r0, [sp, #8]
     33c:	mov	ip, r0
     340:	add	r5, r5, r5, lsl #2
     344:	movw	r3, #0
     348:	movt	r3, #0
     34c:	add	r4, r4, r5, lsl #4
     350:	ldr	r2, [r4, #800]	; 0x320
     354:	ldr	r5, [r4, #844]	; 0x34c
     358:	add	r4, r3, r2, lsl #2
     35c:	mov	lr, r4
     360:	ldr	r4, [r4, #108]	; 0x6c
     364:	str	ip, [r4, r5, lsl #2]
     368:	ldr	r4, [lr, #4]
     36c:	cmn	r4, #1
     370:	moveq	r2, lr
     374:	streq	ip, [lr, #4]
     378:	streq	ip, [r2, #36]	; 0x24
     37c:	beq	3ac <get_all_dims_for_array+0x104>
     380:	add	r2, r2, #8
     384:	asr	r5, r4, #31
     388:	cmp	r4, r0
     38c:	add	r3, r3, r2, lsl #2
     390:	sbcs	r4, r5, r1
     394:	ldr	r4, [r3, #4]
     398:	strlt	ip, [lr, #4]
     39c:	asr	r5, r4, #31
     3a0:	cmp	r0, r4
     3a4:	sbcs	r2, r1, r5
     3a8:	strlt	ip, [r3, #4]
     3ac:	add	sp, sp, #44	; 0x2c
     3b0:	ldrd	r4, [sp]
     3b4:	ldrd	r6, [sp, #8]
     3b8:	ldrd	r8, [sp, #16]
     3bc:	ldrd	sl, [sp, #24]
     3c0:	add	sp, sp, #32
     3c4:	pop	{pc}		; (ldr pc, [sp], #4)
     3c8:	movw	r4, #0
     3cc:	movt	r4, #0
     3d0:	lsl	r8, r5, #2
     3d4:	ldr	r2, [r4, #3360]	; 0xd20
     3d8:	add	r3, r8, r5
     3dc:	add	r3, r4, r3, lsl #4
     3e0:	ldr	sl, [r3, #800]	; 0x320
     3e4:	cmp	r2, r5
     3e8:	beq	60c <get_all_dims_for_array+0x364>
     3ec:	add	r2, r8, r5
     3f0:	cmp	r5, #0
     3f4:	add	r2, r4, r2, lsl #4
     3f8:	streq	r5, [r4, #844]	; 0x34c
     3fc:	add	r5, r5, #1
     400:	ldr	r0, [r2, #804]	; 0x324
     404:	lsl	r9, r5, #2
     408:	ldr	ip, [r2, #840]	; 0x348
     40c:	add	r3, r9, r5
     410:	add	r3, r4, r3, lsl #4
     414:	ldr	r1, [r2, #844]	; 0x34c
     418:	mul	ip, ip, r1
     41c:	add	r1, sl, r0
     420:	cmp	sl, r1
     424:	str	ip, [r3, #844]	; 0x34c
     428:	bge	70c <get_all_dims_for_array+0x464>
     42c:	movw	ip, #0
     430:	movt	ip, #0
     434:	add	r3, sl, #1
     438:	add	r0, ip, #4
     43c:	add	r3, ip, r3, lsl #2
     440:	mov	r8, #1
     444:	add	r0, r0, r1, lsl #2
     448:	ldr	r1, [r3, #68]	; 0x44
     44c:	add	r3, r3, #4
     450:	cmp	r1, #0
     454:	ldrne	r1, [r3, #100]	; 0x64
     458:	ldrne	ip, [r2, #844]	; 0x34c
     45c:	ldreq	r1, [r3, #-4]
     460:	ldrne	r1, [r1, ip, lsl #2]
     464:	cmp	r3, r0
     468:	mul	r8, r1, r8
     46c:	bne	448 <get_all_dims_for_array+0x1a0>
     470:	cmp	r8, #0
     474:	subgt	fp, r8, #1
     478:	ble	3ac <get_all_dims_for_array+0x104>
     47c:	ldr	r0, [pc, #716]	; 750 <get_all_dims_for_array+0x4a8>
     480:	bl	0 <coda_cursor_goto_first_array_element>
     484:	cmp	r0, #0
     488:	bne	6fc <get_all_dims_for_array+0x454>
     48c:	add	r9, r9, r5
     490:	add	r7, r7, #1
     494:	add	r4, r4, r9, lsl #4
     498:	mov	sl, #0
     49c:	mov	r2, r6
     4a0:	mov	r1, r5
     4a4:	mov	r0, r7
     4a8:	bl	2a8 <get_all_dims_for_array>
     4ac:	cmp	sl, fp
     4b0:	blt	58c <get_all_dims_for_array+0x2e4>
     4b4:	add	sl, sl, #1
     4b8:	cmp	r8, sl
     4bc:	bgt	49c <get_all_dims_for_array+0x1f4>
     4c0:	ldr	r0, [pc, #648]	; 750 <get_all_dims_for_array+0x4a8>
     4c4:	bl	0 <coda_cursor_goto_parent>
     4c8:	b	3ac <get_all_dims_for_array+0x104>
     4cc:	movw	r4, #0
     4d0:	movt	r4, #0
     4d4:	add	r8, r6, #872	; 0x368
     4d8:	add	r0, r4, #144	; 0x90
     4dc:	add	r3, r4, r8, lsl #2
     4e0:	add	r2, sp, #8
     4e4:	ldr	r1, [r3, #4]
     4e8:	bl	0 <coda_cursor_get_record_field_available_status>
     4ec:	cmp	r0, #0
     4f0:	bne	604 <get_all_dims_for_array+0x35c>
     4f4:	ldr	r2, [sp, #8]
     4f8:	cmp	r2, #0
     4fc:	bne	5d0 <get_all_dims_for_array+0x328>
     500:	ldr	r3, [r4, #3360]	; 0xd20
     504:	add	r3, r3, r3, lsl #2
     508:	lsl	r1, r3, #4
     50c:	add	r0, r4, r1
     510:	ldr	r3, [r0, #800]	; 0x320
     514:	ldr	ip, [r0, #804]	; 0x324
     518:	cmp	ip, #0
     51c:	ble	3ac <get_all_dims_for_array+0x104>
     520:	add	ip, r3, #1
     524:	add	r1, r1, #808	; 0x328
     528:	movw	r3, #0
     52c:	movt	r3, #0
     530:	add	r3, r3, ip, lsl #2
     534:	add	r4, r4, r1
     538:	mov	ip, r2
     53c:	ldr	r1, [r4], #4
     540:	cmn	r1, #1
     544:	bne	564 <get_all_dims_for_array+0x2bc>
     548:	ldr	r1, [r3, #104]	; 0x68
     54c:	ldr	lr, [r0, #844]	; 0x34c
     550:	str	ip, [r1, lr, lsl #2]
     554:	ldr	r1, [r3]
     558:	str	ip, [r3, #32]
     55c:	cmn	r1, #1
     560:	streq	ip, [r3]
     564:	ldr	r1, [r0, #804]	; 0x324
     568:	add	r2, r2, #1
     56c:	add	r3, r3, #4
     570:	cmp	r1, r2
     574:	bgt	53c <get_all_dims_for_array+0x294>
     578:	b	3ac <get_all_dims_for_array+0x104>
     57c:	bl	0 <handle_coda_error>
     580:	b	2e0 <get_all_dims_for_array+0x38>
     584:	bl	0 <handle_coda_error>
     588:	b	338 <get_all_dims_for_array+0x90>
     58c:	ldr	r0, [pc, #444]	; 750 <get_all_dims_for_array+0x4a8>
     590:	bl	0 <coda_cursor_goto_next_array_element>
     594:	cmp	r0, #0
     598:	bne	6c8 <get_all_dims_for_array+0x420>
     59c:	ldr	r3, [r4, #844]	; 0x34c
     5a0:	add	r3, r3, #1
     5a4:	str	r3, [r4, #844]	; 0x34c
     5a8:	b	4b4 <get_all_dims_for_array+0x20c>
     5ac:	add	r1, sp, #4
     5b0:	add	r0, r4, #144	; 0x90
     5b4:	bl	0 <coda_cursor_get_string_length>
     5b8:	cmp	r0, #0
     5bc:	bne	6f4 <get_all_dims_for_array+0x44c>
     5c0:	ldr	ip, [sp, #4]
     5c4:	mov	r0, ip
     5c8:	asr	r1, ip, #31
     5cc:	b	340 <get_all_dims_for_array+0x98>
     5d0:	add	r4, r4, r8, lsl #2
     5d4:	ldr	r0, [pc, #372]	; 750 <get_all_dims_for_array+0x4a8>
     5d8:	ldr	r1, [r4, #4]
     5dc:	bl	0 <coda_cursor_goto_record_field_by_index>
     5e0:	cmp	r0, #0
     5e4:	bne	704 <get_all_dims_for_array+0x45c>
     5e8:	add	r0, r7, #1
     5ec:	add	r2, r6, #1
     5f0:	mov	r1, r5
     5f4:	bl	2a8 <get_all_dims_for_array>
     5f8:	ldr	r0, [pc, #336]	; 750 <get_all_dims_for_array+0x4a8>
     5fc:	bl	0 <coda_cursor_goto_parent>
     600:	b	3ac <get_all_dims_for_array+0x104>
     604:	bl	0 <handle_coda_error>
     608:	b	4f4 <get_all_dims_for_array+0x24c>
     60c:	add	r6, sp, #8
     610:	add	r1, sp, #4
     614:	mov	r2, r6
     618:	add	r0, r4, #144	; 0x90
     61c:	bl	0 <coda_cursor_get_array_dim>
     620:	cmp	r0, #0
     624:	bne	6d0 <get_all_dims_for_array+0x428>
     628:	add	r5, r8, r5
     62c:	ldr	r2, [sp, #4]
     630:	lsl	r5, r5, #4
     634:	add	r0, r4, r5
     638:	ldr	r3, [r0, #804]	; 0x324
     63c:	cmp	r3, r2
     640:	bne	734 <get_all_dims_for_array+0x48c>
     644:	cmp	r3, #0
     648:	ble	3ac <get_all_dims_for_array+0x104>
     64c:	add	r3, sl, #1
     650:	movw	r2, #0
     654:	movt	r2, #0
     658:	add	r5, r5, #808	; 0x328
     65c:	add	r3, r2, r3, lsl #2
     660:	add	r4, r4, r5
     664:	mov	r2, #0
     668:	b	680 <get_all_dims_for_array+0x3d8>
     66c:	ldr	r1, [r0, #804]	; 0x324
     670:	add	r2, r2, #1
     674:	add	r3, r3, #4
     678:	cmp	r1, r2
     67c:	ble	3ac <get_all_dims_for_array+0x104>
     680:	ldr	r1, [r4], #4
     684:	cmn	r1, #1
     688:	bne	66c <get_all_dims_for_array+0x3c4>
     68c:	ldr	r1, [r6, r2, lsl #2]
     690:	ldr	ip, [r3, #104]	; 0x68
     694:	ldr	lr, [r0, #844]	; 0x34c
     698:	str	r1, [ip, lr, lsl #2]
     69c:	ldr	ip, [r3]
     6a0:	cmn	ip, #1
     6a4:	streq	r1, [r3]
     6a8:	streq	r1, [r3, #32]
     6ac:	beq	66c <get_all_dims_for_array+0x3c4>
     6b0:	cmp	r1, ip
     6b4:	ldr	ip, [r3, #32]
     6b8:	strgt	r1, [r3]
     6bc:	cmp	r1, ip
     6c0:	strlt	r1, [r3, #32]
     6c4:	b	66c <get_all_dims_for_array+0x3c4>
     6c8:	bl	0 <handle_coda_error>
     6cc:	b	59c <get_all_dims_for_array+0x2f4>
     6d0:	bl	0 <handle_coda_error>
     6d4:	b	628 <get_all_dims_for_array+0x380>
     6d8:	movw	r1, #0
     6dc:	movt	r1, #0
     6e0:	ldr	r3, [pc, #108]	; 754 <get_all_dims_for_array+0x4ac>
     6e4:	movw	r0, #0
     6e8:	movt	r0, #0
     6ec:	movw	r2, #294	; 0x126
     6f0:	bl	0 <__assert_fail>
     6f4:	bl	0 <handle_coda_error>
     6f8:	b	5c0 <get_all_dims_for_array+0x318>
     6fc:	bl	0 <handle_coda_error>
     700:	b	48c <get_all_dims_for_array+0x1e4>
     704:	bl	0 <handle_coda_error>
     708:	b	5e8 <get_all_dims_for_array+0x340>
     70c:	mov	fp, #0
     710:	mov	r8, #1
     714:	b	47c <get_all_dims_for_array+0x1d4>
     718:	movw	r1, #0
     71c:	movt	r1, #0
     720:	ldr	r3, [pc, #44]	; 754 <get_all_dims_for_array+0x4ac>
     724:	movw	r0, #0
     728:	movt	r0, #0
     72c:	mov	r2, #252	; 0xfc
     730:	bl	0 <__assert_fail>
     734:	movw	r1, #0
     738:	movt	r1, #0
     73c:	ldr	r3, [pc, #16]	; 754 <get_all_dims_for_array+0x4ac>
     740:	movw	r0, #0
     744:	movt	r0, #0
     748:	mov	r2, #125	; 0x7d
     74c:	bl	0 <__assert_fail>
     750:	.word	0x00000090
     754:	.word	0x00000024

00000758 <dim_info_init>:
     758:	mov	r2, #0
     75c:	movw	r3, #0
     760:	movt	r3, #0
     764:	mvn	r1, #0
     768:	str	r2, [r3]
     76c:	str	r2, [r3, #68]	; 0x44
     770:	str	r1, [r3, #104]	; 0x68
     774:	bx	lr

00000778 <dim_info_done>:
     778:	bx	lr

0000077c <print_all_distinct_dims>:
     77c:	strd	r4, [sp, #-36]!	; 0xffffffdc
     780:	movw	r5, #0
     784:	movt	r5, #0
     788:	ldr	r3, [r5]
     78c:	strd	r6, [sp, #8]
     790:	strd	r8, [sp, #16]
     794:	strd	sl, [sp, #24]
     798:	str	lr, [sp, #32]
     79c:	sub	sp, sp, #12
     7a0:	cmp	r3, r0
     7a4:	ble	988 <print_all_distinct_dims+0x20c>
     7a8:	add	r3, r0, #18
     7ac:	mov	r9, r0
     7b0:	ldr	r3, [r5, r3, lsl #2]
     7b4:	cmp	r3, #0
     7b8:	bne	7d8 <print_all_distinct_dims+0x5c>
     7bc:	add	sp, sp, #12
     7c0:	ldrd	r4, [sp]
     7c4:	ldrd	r6, [sp, #8]
     7c8:	ldrd	r8, [sp, #16]
     7cc:	ldrd	sl, [sp, #24]
     7d0:	add	sp, sp, #32
     7d4:	pop	{pc}		; (ldr pc, [sp], #4)
     7d8:	lsl	r7, r0, #2
     7dc:	add	r8, r5, r7
     7e0:	ldr	r4, [r8, #4]
     7e4:	add	r4, r4, #1
     7e8:	lsl	r4, r4, #2
     7ec:	mov	r0, r4
     7f0:	bl	0 <malloc>
     7f4:	subs	r6, r0, #0
     7f8:	beq	950 <print_all_distinct_dims+0x1d4>
     7fc:	mov	r1, #0
     800:	mov	r2, r4
     804:	mov	r0, r6
     808:	bl	0 <memset>
     80c:	add	r3, r5, r9, lsl #2
     810:	ldr	r3, [r3, #140]	; 0x8c
     814:	add	r3, r5, r3, lsl #3
     818:	ldrd	r0, [r3, #232]	; 0xe8
     81c:	cmp	r0, #1
     820:	sbcs	r3, r1, #0
     824:	blt	854 <print_all_distinct_dims+0xd8>
     828:	add	r3, r5, r9, lsl #2
     82c:	ldr	r3, [r3, #108]	; 0x6c
     830:	add	r0, r3, r0, lsl #2
     834:	ldr	r2, [r3], #4
     838:	cmp	r2, #0
     83c:	blt	84c <print_all_distinct_dims+0xd0>
     840:	ldr	r1, [r6, r2, lsl #2]
     844:	add	r1, r1, #1
     848:	str	r1, [r6, r2, lsl #2]
     84c:	cmp	r0, r3
     850:	bne	834 <print_all_distinct_dims+0xb8>
     854:	add	r1, r9, #1
     858:	movw	r0, #0
     85c:	movt	r0, #0
     860:	add	r9, r9, #8
     864:	bl	0 <printf>
     868:	add	r3, r5, r9, lsl #2
     86c:	add	fp, r5, r7
     870:	ldr	r1, [fp, #4]
     874:	ldr	r4, [r3, #4]
     878:	cmp	r4, r1
     87c:	movwlt	sl, #0
     880:	addlt	r8, r6, r4, lsl #2
     884:	movtlt	sl, #0
     888:	bge	8b4 <print_all_distinct_dims+0x138>
     88c:	ldr	r3, [r8], #4
     890:	cmp	r3, #0
     894:	ble	8a4 <print_all_distinct_dims+0x128>
     898:	mov	r1, r4
     89c:	mov	r0, sl
     8a0:	bl	0 <printf>
     8a4:	ldr	r1, [fp, #4]
     8a8:	add	r4, r4, #1
     8ac:	cmp	r1, r4
     8b0:	bgt	88c <print_all_distinct_dims+0x110>
     8b4:	add	r9, r5, r9, lsl #2
     8b8:	movw	r0, #0
     8bc:	movt	r0, #0
     8c0:	bl	0 <printf>
     8c4:	add	r5, r5, r7
     8c8:	movw	r0, #0
     8cc:	movt	r0, #0
     8d0:	bl	0 <printf>
     8d4:	ldr	r3, [r5, #4]
     8d8:	ldr	r4, [r9, #4]
     8dc:	cmp	r4, r3
     8e0:	bge	914 <print_all_distinct_dims+0x198>
     8e4:	add	r7, r6, r4, lsl #2
     8e8:	movw	r8, #0
     8ec:	movt	r8, #0
     8f0:	ldr	r1, [r7], #4
     8f4:	cmp	r1, #0
     8f8:	ble	904 <print_all_distinct_dims+0x188>
     8fc:	mov	r0, r8
     900:	bl	0 <printf>
     904:	ldr	r3, [r5, #4]
     908:	add	r4, r4, #1
     90c:	cmp	r3, r4
     910:	bgt	8f0 <print_all_distinct_dims+0x174>
     914:	ldr	r1, [r6, r3, lsl #2]
     918:	movw	r0, #0
     91c:	movt	r0, #0
     920:	bl	0 <printf>
     924:	mov	r0, #10
     928:	bl	0 <putchar>
     92c:	mov	r0, r6
     930:	add	sp, sp, #12
     934:	ldrd	r4, [sp]
     938:	ldrd	r6, [sp, #8]
     93c:	ldrd	r8, [sp, #16]
     940:	ldrd	sl, [sp, #24]
     944:	ldr	lr, [sp, #32]
     948:	add	sp, sp, #36	; 0x24
     94c:	b	0 <free>
     950:	mov	r0, #61	; 0x3d
     954:	mov	r2, r4
     958:	movw	r3, #0
     95c:	movt	r3, #0
     960:	movw	r1, #0
     964:	movt	r1, #0
     968:	str	r0, [sp]
     96c:	mvn	r0, #0
     970:	bl	0 <coda_set_error>
     974:	bl	0 <handle_coda_error>
     978:	ldr	r4, [r8, #4]
     97c:	add	r4, r4, #1
     980:	lsl	r4, r4, #2
     984:	b	7fc <print_all_distinct_dims+0x80>
     988:	movw	r1, #0
     98c:	movt	r1, #0
     990:	ldr	r3, [pc, #12]	; 9a4 <print_all_distinct_dims+0x228>
     994:	movw	r0, #0
     998:	movt	r0, #0
     99c:	mov	r2, #50	; 0x32
     9a0:	bl	0 <__assert_fail>
     9a4:	.word	0x0000003c

000009a8 <dim_enter_array>:
     9a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
     9ac:	strd	r6, [sp, #8]
     9b0:	strd	sl, [sp, #24]
     9b4:	movw	fp, #0
     9b8:	movt	fp, #0
     9bc:	ldr	r3, [fp, #136]	; 0x88
     9c0:	strd	r8, [sp, #16]
     9c4:	ldr	r2, [fp, #3360]	; 0xd20
     9c8:	str	lr, [sp, #32]
     9cc:	sub	sp, sp, #100	; 0x64
     9d0:	add	r1, sp, #56	; 0x38
     9d4:	add	r3, r3, #2
     9d8:	ldr	r0, [fp, r3, lsl #2]
     9dc:	str	r2, [sp, #12]
     9e0:	bl	0 <coda_type_get_class>
     9e4:	cmp	r0, #0
     9e8:	bne	10b0 <dim_enter_array+0x708>
     9ec:	ldr	r3, [sp, #56]	; 0x38
     9f0:	sub	r3, r3, #1
     9f4:	cmp	r3, #5
     9f8:	ldrls	pc, [pc, r3, lsl #2]
     9fc:	b	128c <dim_enter_array+0x8e4>
     a00:	.word	0x00000d10
     a04:	.word	0x0000128c
     a08:	.word	0x0000128c
     a0c:	.word	0x00000ccc
     a10:	.word	0x00000c60
     a14:	.word	0x00000a18
     a18:	ldr	r3, [fp, #136]	; 0x88
     a1c:	add	r1, sp, #64	; 0x40
     a20:	add	r3, r3, #2
     a24:	ldr	r0, [fp, r3, lsl #2]
     a28:	bl	0 <coda_type_get_special_type>
     a2c:	cmp	r0, #0
     a30:	bne	1204 <dim_enter_array+0x85c>
     a34:	ldr	r3, [sp, #64]	; 0x40
     a38:	cmp	r3, #3
     a3c:	bne	12c4 <dim_enter_array+0x91c>
     a40:	ldr	r0, [sp, #12]
     a44:	mov	r1, #1
     a48:	mov	r2, #2
     a4c:	lsl	r3, r0, #2
     a50:	str	r3, [sp, #20]
     a54:	add	r3, r3, r0
     a58:	add	r3, fp, r3, lsl #4
     a5c:	str	r1, [r3, #804]	; 0x324
     a60:	str	r2, [r3, #808]	; 0x328
     a64:	movw	r3, #0
     a68:	movt	r3, #0
     a6c:	ldr	r3, [r3]
     a70:	cmp	r3, #0
     a74:	beq	108c <dim_enter_array+0x6e4>
     a78:	ldr	r2, [sp, #12]
     a7c:	movw	sl, #0
     a80:	movt	sl, #0
     a84:	ldr	r3, [sp, #20]
     a88:	add	r3, r3, r2
     a8c:	ldr	r2, [sl]
     a90:	add	r3, fp, r3, lsl #4
     a94:	ldr	r1, [r3, #804]	; 0x324
     a98:	str	r2, [sp, #16]
     a9c:	str	r2, [r3, #800]	; 0x320
     aa0:	add	ip, r1, r2
     aa4:	cmp	ip, #8
     aa8:	mov	r2, ip
     aac:	bgt	12a8 <dim_enter_array+0x900>
     ab0:	ldr	r0, [sp, #16]
     ab4:	str	ip, [sl]
     ab8:	cmp	r0, #0
     abc:	ble	1148 <dim_enter_array+0x7a0>
     ac0:	add	r3, r0, #37	; 0x25
     ac4:	add	r0, sl, r0, lsl #3
     ac8:	lsl	r3, r3, #3
     acc:	ldrd	r4, [r0, #232]	; 0xe8
     ad0:	strd	r4, [sp, #24]
     ad4:	ldrd	r4, [sl, r3]
     ad8:	cmp	r4, #1
     adc:	strd	r4, [sp, #40]	; 0x28
     ae0:	sbcs	r3, r5, #0
     ae4:	blt	11b0 <dim_enter_array+0x808>
     ae8:	cmp	r1, #0
     aec:	ble	11e0 <dim_enter_array+0x838>
     af0:	ldr	r1, [sp, #12]
     af4:	mov	r5, #0
     af8:	mov	lr, r5
     afc:	ldr	r3, [sp, #20]
     b00:	ldr	r0, [pc, #2008]	; 12e0 <dim_enter_array+0x938>
     b04:	add	r9, r3, r1
     b08:	ldr	r3, [sp, #16]
     b0c:	add	r9, fp, r9, lsl #4
     b10:	add	r0, r0, r2, lsl #2
     b14:	add	r9, r9, #808	; 0x328
     b18:	mov	r1, r9
     b1c:	add	r6, r3, #1
     b20:	lsl	r3, r6, #2
     b24:	str	r3, [sp, #32]
     b28:	add	r3, sl, r3
     b2c:	ldr	r2, [r1], #4
     b30:	cmn	r2, #1
     b34:	str	r2, [r3], #4
     b38:	moveq	r5, #1
     b3c:	cmp	r3, r0
     b40:	str	lr, [r3, #64]	; 0x40
     b44:	bne	b2c <dim_enter_array+0x184>
     b48:	cmp	r5, #0
     b4c:	streq	r5, [sp, #32]
     b50:	beq	d84 <dim_enter_array+0x3dc>
     b54:	ldr	r2, [sp, #12]
     b58:	mov	r8, r9
     b5c:	mov	r6, #0
     b60:	ldr	r3, [sp, #20]
     b64:	add	r7, r3, r2
     b68:	ldr	r3, [sp, #32]
     b6c:	add	r7, fp, r7, lsl #4
     b70:	add	r4, r3, #104	; 0x68
     b74:	ldr	r3, [sp, #24]
     b78:	add	r4, sl, r4
     b7c:	lsl	r3, r3, #2
     b80:	str	r3, [sp, #36]	; 0x24
     b84:	movw	r3, #0
     b88:	movt	r3, #0
     b8c:	str	r3, [sp, #52]	; 0x34
     b90:	ldr	r3, [r8], #4
     b94:	cmn	r3, #1
     b98:	movne	r3, #0
     b9c:	strne	r3, [r4]
     ba0:	strne	r3, [r4, #32]
     ba4:	beq	115c <dim_enter_array+0x7b4>
     ba8:	ldr	r2, [r7, #804]	; 0x324
     bac:	add	r6, r6, #1
     bb0:	add	r4, r4, #4
     bb4:	add	r3, r7, #804	; 0x324
     bb8:	cmp	r2, r6
     bbc:	bgt	b90 <dim_enter_array+0x1e8>
     bc0:	mov	r4, #0
     bc4:	str	r3, [sp, #36]	; 0x24
     bc8:	mov	r2, r4
     bcc:	mov	r1, r4
     bd0:	mov	r0, r4
     bd4:	str	r4, [r7, #844]	; 0x34c
     bd8:	bl	2a8 <get_all_dims_for_array>
     bdc:	ldr	r3, [sp, #36]	; 0x24
     be0:	ldr	r3, [r3]
     be4:	cmp	r3, r4
     be8:	ble	d7c <dim_enter_array+0x3d4>
     bec:	ldr	r2, [sp, #12]
     bf0:	mov	r8, r4
     bf4:	ldr	r3, [sp, #20]
     bf8:	add	r7, r3, r2
     bfc:	ldr	r3, [sp, #32]
     c00:	add	r7, fp, r7, lsl #4
     c04:	str	r4, [sp, #32]
     c08:	add	r6, sl, r3
     c0c:	mov	r3, fp
     c10:	mov	fp, sl
     c14:	mov	sl, r5
     c18:	mov	r5, r3
     c1c:	b	c34 <dim_enter_array+0x28c>
     c20:	ldr	r3, [r7, #804]	; 0x324
     c24:	add	r4, r4, #1
     c28:	add	r6, r6, #4
     c2c:	cmp	r3, r4
     c30:	ble	10b8 <dim_enter_array+0x710>
     c34:	ldr	r3, [r9], #4
     c38:	cmn	r3, #1
     c3c:	bne	c20 <dim_enter_array+0x278>
     c40:	ldr	r1, [r6]
     c44:	ldr	r3, [r6, #32]
     c48:	cmp	r1, r3
     c4c:	beq	120c <dim_enter_array+0x864>
     c50:	mov	r3, #1
     c54:	str	sl, [sp, #32]
     c58:	str	r3, [r6, #68]	; 0x44
     c5c:	b	c20 <dim_enter_array+0x278>
     c60:	ldr	r3, [fp, #136]	; 0x88
     c64:	add	r1, sp, #64	; 0x40
     c68:	add	r3, r3, #2
     c6c:	ldr	r0, [fp, r3, lsl #2]
     c70:	bl	0 <coda_type_get_bit_size>
     c74:	cmp	r0, #0
     c78:	bne	11fc <dim_enter_array+0x854>
     c7c:	ldr	r1, [sp, #12]
     c80:	mov	r2, #1
     c84:	ldrd	r4, [sp, #64]	; 0x40
     c88:	lsl	r3, r1, #2
     c8c:	cmp	r4, #0
     c90:	str	r3, [sp, #20]
     c94:	add	r3, r3, r1
     c98:	sbcs	r1, r5, #0
     c9c:	add	r3, fp, r3, lsl #4
     ca0:	str	r2, [r3, #804]	; 0x324
     ca4:	mvnlt	r2, #0
     ca8:	strlt	r2, [r3, #808]	; 0x328
     cac:	blt	a64 <dim_enter_array+0xbc>
     cb0:	lsr	r2, r4, #3
     cb4:	and	r0, r4, #7
     cb8:	orr	r2, r2, r5, lsl #29
     cbc:	cmp	r0, #0
     cc0:	addne	r2, r2, #1
     cc4:	str	r2, [r3, #808]	; 0x328
     cc8:	b	a64 <dim_enter_array+0xbc>
     ccc:	ldr	r3, [fp, #136]	; 0x88
     cd0:	add	r1, sp, #64	; 0x40
     cd4:	add	r3, r3, #2
     cd8:	ldr	r0, [fp, r3, lsl #2]
     cdc:	bl	0 <coda_type_get_string_length>
     ce0:	cmp	r0, #0
     ce4:	bne	11f4 <dim_enter_array+0x84c>
     ce8:	ldr	r0, [sp, #12]
     cec:	mov	r1, #1
     cf0:	ldr	r2, [sp, #64]	; 0x40
     cf4:	lsl	r3, r0, #2
     cf8:	str	r3, [sp, #20]
     cfc:	add	r3, r3, r0
     d00:	add	r3, fp, r3, lsl #4
     d04:	str	r1, [r3, #804]	; 0x324
     d08:	str	r2, [r3, #808]	; 0x328
     d0c:	b	a64 <dim_enter_array+0xbc>
     d10:	ldr	r3, [fp, #136]	; 0x88
     d14:	add	r2, sp, #64	; 0x40
     d18:	add	r1, sp, #60	; 0x3c
     d1c:	add	r3, r3, #2
     d20:	ldr	r0, [fp, r3, lsl #2]
     d24:	bl	0 <coda_type_get_array_dim>
     d28:	cmp	r0, #0
     d2c:	bne	11ec <dim_enter_array+0x844>
     d30:	ldr	r2, [sp, #12]
     d34:	ldr	r0, [sp, #60]	; 0x3c
     d38:	lsl	r3, r2, #2
     d3c:	add	r2, r3, r2
     d40:	cmp	r0, #0
     d44:	lsl	r2, r2, #4
     d48:	str	r3, [sp, #20]
     d4c:	add	r3, fp, r2
     d50:	str	r0, [r3, #804]	; 0x324
     d54:	ble	a64 <dim_enter_array+0xbc>
     d58:	add	r3, sp, #60	; 0x3c
     d5c:	add	r2, r2, #808	; 0x328
     d60:	add	r0, r3, r0, lsl #2
     d64:	add	r2, fp, r2
     d68:	ldr	r1, [r3, #4]!
     d6c:	cmp	r3, r0
     d70:	str	r1, [r2], #4
     d74:	bne	d68 <dim_enter_array+0x3c0>
     d78:	b	a64 <dim_enter_array+0xbc>
     d7c:	ldr	ip, [sl]
     d80:	str	r4, [sp, #32]
     d84:	mov	r0, #0
     d88:	mvn	lr, #0
     d8c:	cmp	ip, r0
     d90:	str	r0, [sl, #68]	; 0x44
     d94:	str	lr, [sl, #104]	; 0x68
     d98:	ble	dd8 <dim_enter_array+0x430>
     d9c:	ldr	r2, [pc, #1344]	; 12e4 <dim_enter_array+0x93c>
     da0:	mov	r4, r0
     da4:	mov	r3, r0
     da8:	ldr	r1, [r2], #4
     dac:	cmp	r1, #0
     db0:	beq	dc0 <dim_enter_array+0x418>
     db4:	mov	r0, #1
     db8:	mov	lr, r3
     dbc:	mov	r4, r0
     dc0:	add	r3, r3, #1
     dc4:	cmp	ip, r3
     dc8:	bne	da8 <dim_enter_array+0x400>
     dcc:	cmp	r0, #0
     dd0:	strne	r4, [sl, #68]	; 0x44
     dd4:	strne	lr, [sl, #104]	; 0x68
     dd8:	ldr	r2, [sp, #12]
     ddc:	mov	ip, #1
     de0:	ldr	r3, [sp, #20]
     de4:	add	r3, r3, r2
     de8:	add	r3, fp, r3, lsl #4
     dec:	ldr	r6, [r3, #804]	; 0x324
     df0:	str	ip, [r3, #840]	; 0x348
     df4:	cmp	r6, #0
     df8:	ble	1224 <dim_enter_array+0x87c>
     dfc:	ldr	r2, [sp, #16]
     e00:	str	sl, [sp, #36]	; 0x24
     e04:	str	fp, [sp, #48]	; 0x30
     e08:	add	r3, r2, #29
     e0c:	add	lr, r2, ip
     e10:	add	r7, sl, r2, lsl #2
     e14:	lsl	r1, r3, #3
     e18:	add	r8, r2, #30
     e1c:	mov	r3, #0
     e20:	add	lr, sl, lr, lsl #2
     e24:	add	r8, sl, r8, lsl #3
     e28:	add	r2, sl, r1
     e2c:	ldrd	sl, [sp, #24]
     e30:	str	r1, [sp, #52]	; 0x34
     e34:	b	e68 <dim_enter_array+0x4c0>
     e38:	ldr	r0, [r7, #4]
     e3c:	add	r3, r3, #1
     e40:	add	r2, r2, #8
     e44:	cmp	r3, r6
     e48:	mul	r9, r0, fp
     e4c:	mov	r4, r0
     e50:	asr	r5, r0, #31
     e54:	umull	r0, r1, r0, sl
     e58:	mla	r9, sl, r5, r9
     e5c:	add	r1, r9, r1
     e60:	strd	r0, [r8]
     e64:	beq	ea8 <dim_enter_array+0x500>
     e68:	ldr	r9, [lr], #4
     e6c:	cmp	r3, #0
     e70:	mul	ip, r9, ip
     e74:	beq	e38 <dim_enter_array+0x490>
     e78:	ldr	r0, [r2]
     e7c:	asr	r5, r9, #31
     e80:	add	r3, r3, #1
     e84:	cmp	r3, r6
     e88:	add	r2, r2, #8
     e8c:	mul	r4, r5, r0
     e90:	ldr	r5, [r2, #-4]
     e94:	umull	r0, r1, r0, r9
     e98:	mla	r9, r9, r5, r4
     e9c:	add	r1, r9, r1
     ea0:	strd	r0, [r2]
     ea4:	bne	e68 <dim_enter_array+0x4c0>
     ea8:	ldr	r1, [sp, #12]
     eac:	ldr	r2, [sp, #20]
     eb0:	ldr	sl, [sp, #36]	; 0x24
     eb4:	ldr	fp, [sp, #48]	; 0x30
     eb8:	add	r2, r2, r1
     ebc:	ldr	r1, [sp, #32]
     ec0:	add	r2, fp, r2, lsl #4
     ec4:	cmp	r1, #0
     ec8:	str	ip, [r2, #840]	; 0x348
     ecc:	beq	10c8 <dim_enter_array+0x720>
     ed0:	ldr	r3, [sp, #16]
     ed4:	mov	r2, #0
     ed8:	ldr	ip, [pc, #1032]	; 12e8 <dim_enter_array+0x940>
     edc:	add	r0, r6, r3
     ee0:	ldr	r3, [sp, #52]	; 0x34
     ee4:	add	r0, ip, r0, lsl #3
     ee8:	add	r1, r3, #72	; 0x48
     eec:	mov	r3, #0
     ef0:	add	r1, sl, r1
     ef4:	strd	r2, [r1], #8
     ef8:	cmp	r0, r1
     efc:	bne	ef4 <dim_enter_array+0x54c>
     f00:	ldrd	r2, [sp, #24]
     f04:	cmp	r2, #1
     f08:	sbcs	r1, r3, #0
     f0c:	blt	f88 <dim_enter_array+0x5e0>
     f10:	ldr	r1, [sp, #16]
     f14:	mov	r8, r2
     f18:	mov	r5, #0
     f1c:	add	r7, r1, #38	; 0x26
     f20:	add	lr, r6, r1
     f24:	add	r9, sl, r1, lsl #2
     f28:	add	r7, sl, r7, lsl #3
     f2c:	add	lr, sl, lr, lsl #2
     f30:	cmp	r6, #0
     f34:	lslgt	r4, r5, #2
     f38:	movgt	ip, r7
     f3c:	movgt	r3, r9
     f40:	movgt	r2, #1
     f44:	ble	f7c <dim_enter_array+0x5d4>
     f48:	ldr	r1, [r3, #72]	; 0x48
     f4c:	add	r3, r3, #4
     f50:	cmp	r1, #0
     f54:	ldrne	r1, [r3, #104]	; 0x68
     f58:	ldreq	r1, [r3]
     f5c:	ldrne	r1, [r1, r4]
     f60:	mul	r2, r1, r2
     f64:	ldrd	r0, [ip]
     f68:	adds	r0, r0, r2
     f6c:	adc	r1, r1, r2, asr #31
     f70:	cmp	lr, r3
     f74:	strd	r0, [ip], #8
     f78:	bne	f48 <dim_enter_array+0x5a0>
     f7c:	add	r5, r5, #1
     f80:	cmp	r5, r8
     f84:	bne	f30 <dim_enter_array+0x588>
     f88:	ldr	r2, [sp, #12]
     f8c:	ldr	r3, [sp, #20]
     f90:	add	r3, r3, r2
     f94:	add	fp, fp, r3, lsl #4
     f98:	ldr	r3, [sp, #16]
     f9c:	ldr	r2, [fp, #804]	; 0x324
     fa0:	add	r3, r2, r3
     fa4:	add	r3, r3, #37	; 0x25
     fa8:	lsl	r3, r3, #3
     fac:	ldrd	r0, [sl, r3]
     fb0:	cmp	r0, #1
     fb4:	sbcs	r3, r1, #0
     fb8:	blt	1070 <dim_enter_array+0x6c8>
     fbc:	ldr	r3, [sl]
     fc0:	cmp	r2, #1
     fc4:	ldr	r0, [sl, r3, lsl #2]
     fc8:	add	r3, sl, r3, lsl #3
     fcc:	asr	r1, r0, #31
     fd0:	strd	r0, [r3, #168]	; 0xa8
     fd4:	ble	1020 <dim_enter_array+0x678>
     fd8:	ldr	r3, [sp, #16]
     fdc:	ldr	r6, [pc, #764]	; 12e0 <dim_enter_array+0x938>
     fe0:	add	r0, r2, r3
     fe4:	mov	r2, r0
     fe8:	add	r0, r0, #21
     fec:	add	ip, sl, r2, lsl #2
     ff0:	add	r0, sl, r0, lsl #3
     ff4:	add	r6, r6, r3, lsl #2
     ff8:	ldr	r2, [ip, #-4]!
     ffc:	ldm	r0, {r1, lr}
    1000:	asr	r5, r2, #31
    1004:	cmp	r6, ip
    1008:	mul	lr, r2, lr
    100c:	umull	r2, r3, r1, r2
    1010:	mla	r1, r1, r5, lr
    1014:	add	r3, r1, r3
    1018:	strd	r2, [r0, #-8]!
    101c:	bne	ff8 <dim_enter_array+0x650>
    1020:	ldr	r3, [sp, #16]
    1024:	cmp	r3, #0
    1028:	ble	1070 <dim_enter_array+0x6c8>
    102c:	ldr	r3, [sp, #16]
    1030:	ldr	r4, [pc, #692]	; 12ec <dim_enter_array+0x944>
    1034:	add	r1, r3, #21
    1038:	add	r3, r3, #22
    103c:	add	r1, sl, r1, lsl #3
    1040:	add	sl, sl, r3, lsl #3
    1044:	ldr	r2, [sl]
    1048:	ldr	lr, [r1]
    104c:	ldr	ip, [r1, #4]
    1050:	ldr	r0, [sl, #4]
    1054:	mul	ip, ip, r2
    1058:	umull	r2, r3, r2, lr
    105c:	mla	r0, lr, r0, ip
    1060:	add	r3, r0, r3
    1064:	strd	r2, [r1], #-8
    1068:	cmp	r1, r4
    106c:	bne	1044 <dim_enter_array+0x69c>
    1070:	add	sp, sp, #100	; 0x64
    1074:	ldrd	r4, [sp]
    1078:	ldrd	r6, [sp, #8]
    107c:	ldrd	r8, [sp, #16]
    1080:	ldrd	sl, [sp, #24]
    1084:	add	sp, sp, #32
    1088:	pop	{pc}		; (ldr pc, [sp], #4)
    108c:	ldr	r1, [sp, #12]
    1090:	ldr	r2, [sp, #20]
    1094:	add	r2, r2, r1
    1098:	mvn	r1, #0
    109c:	add	fp, fp, r2, lsl #4
    10a0:	str	r1, [fp, #800]	; 0x320
    10a4:	str	r3, [fp, #840]	; 0x348
    10a8:	str	r3, [fp, #844]	; 0x34c
    10ac:	b	1070 <dim_enter_array+0x6c8>
    10b0:	bl	0 <handle_coda_error>
    10b4:	b	9ec <dim_enter_array+0x44>
    10b8:	mov	sl, fp
    10bc:	mov	fp, r5
    10c0:	ldr	ip, [sl]
    10c4:	b	d84 <dim_enter_array+0x3dc>
    10c8:	ldr	r8, [sp, #16]
    10cc:	cmp	r3, #1
    10d0:	ldrd	r6, [sp, #40]	; 0x28
    10d4:	add	r1, sl, r8, lsl #2
    10d8:	add	r2, r8, #38	; 0x26
    10dc:	lsl	r2, r2, #3
    10e0:	ldr	r0, [r1, #4]
    10e4:	add	ip, sl, r2
    10e8:	mul	lr, r0, r7
    10ec:	asr	r5, r0, #31
    10f0:	umull	r0, r1, r0, r6
    10f4:	mla	lr, r6, r5, lr
    10f8:	add	r1, lr, r1
    10fc:	strd	r0, [sl, r2]
    1100:	beq	f88 <dim_enter_array+0x5e0>
    1104:	ldr	r5, [pc, #484]	; 12f0 <dim_enter_array+0x948>
    1108:	add	r3, r3, r8
    110c:	add	r4, sl, r8, lsl #2
    1110:	add	r4, r4, #4
    1114:	add	r5, r5, r3, lsl #3
    1118:	ldr	r2, [r4, #4]!
    111c:	ldr	r1, [ip]
    1120:	ldr	r0, [ip, #4]
    1124:	asr	r7, r2, #31
    1128:	mul	r0, r2, r0
    112c:	umull	r2, r3, r2, r1
    1130:	mla	r1, r1, r7, r0
    1134:	add	r3, r1, r3
    1138:	strd	r2, [ip, #8]!
    113c:	cmp	ip, r5
    1140:	bne	1118 <dim_enter_array+0x770>
    1144:	b	f88 <dim_enter_array+0x5e0>
    1148:	mov	r4, #1
    114c:	mov	r5, #0
    1150:	strd	r4, [sp, #24]
    1154:	strd	r4, [sp, #40]	; 0x28
    1158:	b	ae8 <dim_enter_array+0x140>
    115c:	str	r3, [sp, #48]	; 0x30
    1160:	ldr	r3, [sp, #16]
    1164:	ldr	r0, [sp, #36]	; 0x24
    1168:	str	r3, [r4, #32]
    116c:	bl	0 <malloc>
    1170:	cmp	r0, #0
    1174:	str	r0, [r4]
    1178:	ldr	r3, [sp, #48]	; 0x30
    117c:	beq	1264 <dim_enter_array+0x8bc>
    1180:	ldrd	r2, [sp, #24]
    1184:	cmp	r2, #1
    1188:	sbcs	r3, r3, #0
    118c:	blt	ba8 <dim_enter_array+0x200>
    1190:	ldr	r3, [r4]
    1194:	mvn	r1, #0
    1198:	ldr	r2, [sp, #36]	; 0x24
    119c:	add	r2, r2, r3
    11a0:	str	r1, [r3], #4
    11a4:	cmp	r3, r2
    11a8:	bne	11a0 <dim_enter_array+0x7f8>
    11ac:	b	ba8 <dim_enter_array+0x200>
    11b0:	cmp	r1, #0
    11b4:	ble	11e0 <dim_enter_array+0x838>
    11b8:	ldr	r3, [sp, #16]
    11bc:	add	r1, sl, #4
    11c0:	mov	r2, #0
    11c4:	add	r1, r1, ip, lsl #2
    11c8:	add	r3, r3, #1
    11cc:	add	r3, sl, r3, lsl #2
    11d0:	str	r2, [r3], #4
    11d4:	cmp	r3, r1
    11d8:	str	r2, [r3, #64]	; 0x40
    11dc:	bne	11d0 <dim_enter_array+0x828>
    11e0:	mov	r3, #0
    11e4:	str	r3, [sp, #32]
    11e8:	b	d84 <dim_enter_array+0x3dc>
    11ec:	bl	0 <handle_coda_error>
    11f0:	b	d30 <dim_enter_array+0x388>
    11f4:	bl	0 <handle_coda_error>
    11f8:	b	ce8 <dim_enter_array+0x340>
    11fc:	bl	0 <handle_coda_error>
    1200:	b	c7c <dim_enter_array+0x2d4>
    1204:	bl	0 <handle_coda_error>
    1208:	b	a34 <dim_enter_array+0x8c>
    120c:	str	r8, [r6, #68]	; 0x44
    1210:	ldr	r0, [r6, #104]	; 0x68
    1214:	bl	0 <free>
    1218:	str	r8, [r6, #104]	; 0x68
    121c:	str	r8, [r6, #136]	; 0x88
    1220:	b	c20 <dim_enter_array+0x278>
    1224:	ldr	r3, [sp, #32]
    1228:	cmp	r3, #0
    122c:	bne	f00 <dim_enter_array+0x558>
    1230:	ldr	r2, [sp, #16]
    1234:	ldrd	r4, [sp, #40]	; 0x28
    1238:	add	r3, sl, r2, lsl #2
    123c:	add	ip, r2, #38	; 0x26
    1240:	lsl	ip, ip, #3
    1244:	ldr	r0, [r3, #4]
    1248:	mul	lr, r0, r5
    124c:	asr	r3, r0, #31
    1250:	umull	r0, r1, r0, r4
    1254:	mla	r3, r4, r3, lr
    1258:	add	r1, r3, r1
    125c:	strd	r0, [sl, ip]
    1260:	b	f88 <dim_enter_array+0x5e0>
    1264:	mov	r2, #456	; 0x1c8
    1268:	mov	r0, r3
    126c:	ldr	r3, [sp, #52]	; 0x34
    1270:	movw	r1, #0
    1274:	movt	r1, #0
    1278:	str	r2, [sp]
    127c:	ldr	r2, [sp, #36]	; 0x24
    1280:	bl	0 <coda_set_error>
    1284:	bl	0 <handle_coda_error>
    1288:	b	1180 <dim_enter_array+0x7d8>
    128c:	movw	r1, #0
    1290:	movt	r1, #0
    1294:	ldr	r3, [pc, #88]	; 12f4 <dim_enter_array+0x94c>
    1298:	movw	r0, #0
    129c:	movt	r0, #0
    12a0:	movw	r2, #386	; 0x182
    12a4:	bl	0 <__assert_fail>
    12a8:	movw	r1, #0
    12ac:	movt	r1, #0
    12b0:	ldr	r3, [pc, #60]	; 12f4 <dim_enter_array+0x94c>
    12b4:	movw	r0, #0
    12b8:	movt	r0, #0
    12bc:	movw	r2, #402	; 0x192
    12c0:	bl	0 <__assert_fail>
    12c4:	movw	r1, #0
    12c8:	movt	r1, #0
    12cc:	ldr	r3, [pc, #32]	; 12f4 <dim_enter_array+0x94c>
    12d0:	movw	r0, #0
    12d4:	movt	r0, #0
    12d8:	movw	r2, #349	; 0x15d
    12dc:	bl	0 <__assert_fail>
    12e0:	.word	0x00000004
    12e4:	.word	0x00000048
    12e8:	.word	0x00000130
    12ec:	.word	0x000000a8
    12f0:	.word	0x00000128
    12f4:	.word	0x00000054

000012f8 <dim_leave_array>:
    12f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    12fc:	strd	r6, [sp, #8]
    1300:	str	r8, [sp, #16]
    1304:	movw	r8, #0
    1308:	movt	r8, #0
    130c:	ldr	r3, [r8, #3360]	; 0xd20
    1310:	str	lr, [sp, #20]
    1314:	cmp	r3, #0
    1318:	blt	1448 <dim_leave_array+0x150>
    131c:	add	r3, r3, r3, lsl #2
    1320:	movw	r7, #0
    1324:	movt	r7, #0
    1328:	ldr	lr, [r7]
    132c:	add	r8, r8, r3, lsl #4
    1330:	ldr	r6, [r8, #800]	; 0x320
    1334:	ldr	r2, [r8, #804]	; 0x324
    1338:	sub	lr, lr, r2
    133c:	cmp	r2, #0
    1340:	str	lr, [r7]
    1344:	ble	1390 <dim_leave_array+0x98>
    1348:	add	r5, r6, #18
    134c:	mov	r4, #0
    1350:	add	r5, r7, r5, lsl #2
    1354:	b	1368 <dim_leave_array+0x70>
    1358:	ldr	r2, [r8, #804]	; 0x324
    135c:	add	r4, r4, #1
    1360:	cmp	r2, r4
    1364:	ble	138c <dim_leave_array+0x94>
    1368:	ldr	r3, [r5], #4
    136c:	cmp	r3, #0
    1370:	beq	1358 <dim_leave_array+0x60>
    1374:	ldr	r0, [r5, #32]
    1378:	add	r4, r4, #1
    137c:	bl	0 <free>
    1380:	ldr	r2, [r8, #804]	; 0x324
    1384:	cmp	r2, r4
    1388:	bgt	1368 <dim_leave_array+0x70>
    138c:	ldr	lr, [r7]
    1390:	mov	ip, #0
    1394:	mvn	r4, #0
    1398:	cmp	lr, ip
    139c:	str	ip, [r7, #68]	; 0x44
    13a0:	str	r4, [r7, #104]	; 0x68
    13a4:	ble	13e4 <dim_leave_array+0xec>
    13a8:	ldr	r1, [pc, #180]	; 1464 <dim_leave_array+0x16c>
    13ac:	mov	r5, ip
    13b0:	mov	r3, ip
    13b4:	ldr	r0, [r1], #4
    13b8:	cmp	r0, #0
    13bc:	beq	13cc <dim_leave_array+0xd4>
    13c0:	mov	ip, #1
    13c4:	mov	r4, r3
    13c8:	mov	r5, ip
    13cc:	add	r3, r3, #1
    13d0:	cmp	r3, lr
    13d4:	bne	13b4 <dim_leave_array+0xbc>
    13d8:	cmp	ip, #0
    13dc:	strne	r5, [r7, #68]	; 0x44
    13e0:	strne	r4, [r7, #104]	; 0x68
    13e4:	add	r2, r2, r6
    13e8:	add	r2, r2, #37	; 0x25
    13ec:	lsl	r2, r2, #3
    13f0:	ldrd	r2, [r2, r7]
    13f4:	cmp	r2, #1
    13f8:	sbcs	r3, r3, #0
    13fc:	blt	1434 <dim_leave_array+0x13c>
    1400:	cmp	r6, #0
    1404:	ble	1434 <dim_leave_array+0x13c>
    1408:	ldr	r5, [pc, #88]	; 1468 <dim_leave_array+0x170>
    140c:	add	r4, r6, #21
    1410:	add	r6, r6, #22
    1414:	add	r4, r7, r4, lsl #3
    1418:	add	r7, r7, r6, lsl #3
    141c:	ldrd	r0, [r4]
    1420:	ldrd	r2, [r7]
    1424:	bl	0 <__aeabi_ldivmod>
    1428:	strd	r0, [r4], #-8
    142c:	cmp	r5, r4
    1430:	bne	141c <dim_leave_array+0x124>
    1434:	ldrd	r4, [sp]
    1438:	ldrd	r6, [sp, #8]
    143c:	ldr	r8, [sp, #16]
    1440:	add	sp, sp, #20
    1444:	pop	{pc}		; (ldr pc, [sp], #4)
    1448:	movw	r1, #0
    144c:	movt	r1, #0
    1450:	ldr	r3, [pc, #20]	; 146c <dim_leave_array+0x174>
    1454:	movw	r0, #0
    1458:	movt	r0, #0
    145c:	movw	r2, #579	; 0x243
    1460:	bl	0 <__assert_fail>
    1464:	.word	0x00000048
    1468:	.word	0x000000a8
    146c:	.word	0x00000064

00001470 <dim_record_field_available>:
    1470:	mov	r2, #0
    1474:	mov	r1, r2
    1478:	mov	r0, r2
    147c:	b	0 <get_record_field_available_status>
