
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cdf.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <swap8>:
       0:	push	{r4, r5, r6, lr}
       4:	ldrb	ip, [r0]
       8:	ldrb	r6, [r0, #7]
       c:	ldrb	r5, [r0, #6]
      10:	ldrb	r4, [r0, #5]
      14:	ldrb	lr, [r0, #4]
      18:	ldrb	r1, [r0, #1]
      1c:	ldrb	r2, [r0, #2]
      20:	ldrb	r3, [r0, #3]
      24:	eor	ip, ip, r6
      28:	eor	r1, r1, r5
      2c:	eor	r2, r2, r4
      30:	eor	r3, r3, lr
      34:	eor	r6, r6, ip
      38:	eor	r5, r5, r1
      3c:	eor	r4, r4, r2
      40:	eor	lr, lr, r3
      44:	eor	ip, ip, r6
      48:	eor	r1, r1, r5
      4c:	eor	r2, r2, r4
      50:	eor	r3, r3, lr
      54:	strb	ip, [r0]
      58:	strb	r6, [r0, #7]
      5c:	strb	r1, [r0, #1]
      60:	strb	r5, [r0, #6]
      64:	strb	r2, [r0, #2]
      68:	strb	r4, [r0, #5]
      6c:	strb	r3, [r0, #3]
      70:	strb	lr, [r0, #4]
      74:	pop	{r4, r5, r6, pc}

00000078 <read_bytes>:
      78:	push	{r4, r5, r6, r7, r8, r9, lr}
      7c:	sub	sp, sp, #84	; 0x54
      80:	ldr	r5, [r0, #48]	; 0x30
      84:	mov	r6, r2
      88:	cmp	r5, #0
      8c:	mov	r7, r3
      90:	mov	r4, r0
      94:	ldrd	r2, [sp, #112]	; 0x70
      98:	beq	144 <read_bytes+0xcc>
      9c:	ldrd	r8, [r0, #40]	; 0x28
      a0:	adds	r0, r6, r2
      a4:	adc	r1, r7, r3
      a8:	cmp	r1, r9
      ac:	cmpeq	r0, r8
      b0:	bls	12c <read_bytes+0xb4>
      b4:	ldr	r1, [r4, #16]
      b8:	cmp	r1, #1
      bc:	bls	114 <read_bytes+0x9c>
      c0:	mov	r1, r3
      c4:	mov	r0, r2
      c8:	add	r2, sp, #8
      cc:	bl	0 <coda_str64>
      d0:	add	r5, sp, #56	; 0x38
      d4:	mov	r0, r6
      d8:	mov	r1, r7
      dc:	add	r2, sp, #32
      e0:	bl	0 <coda_str64>
      e4:	ldrd	r0, [r4, #40]	; 0x28
      e8:	mov	r2, r5
      ec:	bl	0 <coda_str64>
      f0:	mvn	r0, #300	; 0x12c
      f4:	str	r5, [sp]
      f8:	add	r3, sp, #32
      fc:	add	r2, sp, #8
     100:	ldr	r1, [pc, #180]	; 1bc <read_bytes+0x144>
     104:	bl	0 <coda_set_error>
     108:	mvn	r0, #0
     10c:	add	sp, sp, #84	; 0x54
     110:	pop	{r4, r5, r6, r7, r8, r9, pc}
     114:	ldr	r1, [pc, #164]	; 1c0 <read_bytes+0x148>
     118:	mvn	r0, #300	; 0x12c
     11c:	bl	0 <coda_set_error>
     120:	mvn	r0, #0
     124:	add	sp, sp, #84	; 0x54
     128:	pop	{r4, r5, r6, r7, r8, r9, pc}
     12c:	add	r1, r5, r6
     130:	ldr	r0, [sp, #120]	; 0x78
     134:	bl	0 <memcpy>
     138:	mov	r0, #0
     13c:	add	sp, sp, #84	; 0x54
     140:	pop	{r4, r5, r6, r7, r8, r9, pc}
     144:	ldr	r1, [r0, #16]
     148:	cmp	r1, #1
     14c:	bhi	1a8 <read_bytes+0x130>
     150:	ldrd	r8, [r0, #8]
     154:	adds	r0, r6, r2
     158:	adc	r1, r7, r3
     15c:	cmp	r1, r9
     160:	cmpeq	r0, r8
     164:	bhi	114 <read_bytes+0x9c>
     168:	mov	r3, r6
     16c:	ldr	r0, [r4, #56]	; 0x38
     170:	ldr	r1, [sp, #120]	; 0x78
     174:	bl	0 <pread>
     178:	cmp	r0, #0
     17c:	movge	r0, r5
     180:	bge	10c <read_bytes+0x94>
     184:	bl	0 <__errno_location>
     188:	ldr	r0, [r0]
     18c:	bl	0 <strerror>
     190:	ldr	r1, [pc, #44]	; 1c4 <read_bytes+0x14c>
     194:	mov	r2, r0
     198:	mvn	r0, #21
     19c:	bl	0 <coda_set_error>
     1a0:	mvn	r0, #0
     1a4:	b	10c <read_bytes+0x94>
     1a8:	ldr	r3, [pc, #24]	; 1c8 <read_bytes+0x150>
     1ac:	mov	r2, #83	; 0x53
     1b0:	ldr	r1, [pc, #20]	; 1cc <read_bytes+0x154>
     1b4:	ldr	r0, [pc, #20]	; 1d0 <read_bytes+0x158>
     1b8:	bl	0 <__assert_fail>
     1bc:	.word	0x0000002c
     1c0:	.word	0x00000000
     1c4:	.word	0x00000108
     1c8:	.word	0x00000000
     1cc:	.word	0x00000068
     1d0:	.word	0x000000b8

000001d4 <read_attribute_sub>:
     1d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1d8:	sub	sp, sp, #28
     1dc:	mov	r4, r0
     1e0:	ldr	r5, [sp, #68]	; 0x44
     1e4:	ldr	fp, [sp, #64]	; 0x40
     1e8:	ldr	r1, [r5, #8]
     1ec:	cmp	r1, #4
     1f0:	beq	2ac <read_attribute_sub+0xd8>
     1f4:	mov	r8, fp
     1f8:	asr	r9, fp, #31
     1fc:	add	r6, sp, #16
     200:	ldr	r0, [r0, #52]	; 0x34
     204:	strd	r8, [sp]
     208:	str	r6, [sp, #8]
     20c:	bl	78 <read_bytes>
     210:	cmp	r0, #0
     214:	mvnne	r0, #0
     218:	bne	328 <read_attribute_sub+0x154>
     21c:	ldr	r3, [r4, #68]	; 0x44
     220:	cmp	r3, #0
     224:	bne	274 <read_attribute_sub+0xa0>
     228:	sub	fp, fp, #1
     22c:	cmp	fp, #7
     230:	ldrls	pc, [pc, fp, lsl #2]
     234:	b	49c <read_attribute_sub+0x2c8>
     238:	.word	0x00000274
     23c:	.word	0x00000258
     240:	.word	0x0000049c
     244:	.word	0x0000033c
     248:	.word	0x0000049c
     24c:	.word	0x0000049c
     250:	.word	0x0000049c
     254:	.word	0x00000330
     258:	ldrb	r2, [sp, #17]
     25c:	ldrb	r3, [sp, #16]
     260:	eor	r3, r3, r2
     264:	eor	r2, r2, r3
     268:	eor	r3, r3, r2
     26c:	strb	r3, [sp, #16]
     270:	strb	r2, [sp, #17]
     274:	ldr	r3, [r5, #12]
     278:	cmp	r3, #9
     27c:	ldrls	pc, [pc, r3, lsl #2]
     280:	b	4b0 <read_attribute_sub+0x2dc>
     284:	.word	0x00000378
     288:	.word	0x00000398
     28c:	.word	0x000003b8
     290:	.word	0x000003d8
     294:	.word	0x000003f8
     298:	.word	0x00000418
     29c:	.word	0x00000438
     2a0:	.word	0x000004b0
     2a4:	.word	0x0000045c
     2a8:	.word	0x0000047c
     2ac:	add	r8, fp, #1
     2b0:	mov	r0, r8
     2b4:	mov	r6, r2
     2b8:	mov	r7, r3
     2bc:	bl	0 <malloc>
     2c0:	subs	sl, r0, #0
     2c4:	beq	4d4 <read_attribute_sub+0x300>
     2c8:	mov	r8, fp
     2cc:	asr	r9, fp, #31
     2d0:	ldr	r0, [r4, #52]	; 0x34
     2d4:	mov	r2, r6
     2d8:	str	sl, [sp, #8]
     2dc:	mov	r3, r7
     2e0:	strd	r8, [sp]
     2e4:	bl	78 <read_bytes>
     2e8:	subs	r1, r0, #0
     2ec:	bne	4c4 <read_attribute_sub+0x2f0>
     2f0:	mov	r2, r4
     2f4:	strb	r1, [sl, fp]
     2f8:	mov	r3, sl
     2fc:	mov	r0, r5
     300:	bl	0 <coda_mem_string_new>
     304:	ldr	r3, [sp, #72]	; 0x48
     308:	mov	r4, r0
     30c:	str	r0, [r3]
     310:	mov	r0, sl
     314:	bl	0 <free>
     318:	mov	r0, r4
     31c:	cmp	r0, #0
     320:	movne	r0, #0
     324:	mvneq	r0, #0
     328:	add	sp, sp, #28
     32c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     330:	mov	r0, r6
     334:	bl	0 <swap8>
     338:	b	274 <read_attribute_sub+0xa0>
     33c:	ldrb	r0, [sp, #19]
     340:	ldrb	r1, [sp, #18]
     344:	ldrb	r2, [sp, #16]
     348:	ldrb	r3, [sp, #17]
     34c:	eor	r2, r2, r0
     350:	eor	r3, r3, r1
     354:	eor	r0, r0, r2
     358:	eor	r1, r1, r3
     35c:	eor	r2, r2, r0
     360:	eor	r3, r3, r1
     364:	strb	r2, [sp, #16]
     368:	strb	r0, [sp, #19]
     36c:	strb	r3, [sp, #17]
     370:	strb	r1, [sp, #18]
     374:	b	274 <read_attribute_sub+0xa0>
     378:	ldrsb	r3, [sp, #16]
     37c:	mov	r2, r4
     380:	mov	r0, r5
     384:	mov	r1, #0
     388:	bl	0 <coda_mem_int8_new>
     38c:	ldr	r3, [sp, #72]	; 0x48
     390:	str	r0, [r3]
     394:	b	31c <read_attribute_sub+0x148>
     398:	ldrb	r3, [sp, #16]
     39c:	mov	r2, r4
     3a0:	mov	r0, r5
     3a4:	mov	r1, #0
     3a8:	bl	0 <coda_mem_uint8_new>
     3ac:	ldr	r3, [sp, #72]	; 0x48
     3b0:	str	r0, [r3]
     3b4:	b	31c <read_attribute_sub+0x148>
     3b8:	ldrsh	r3, [sp, #16]
     3bc:	mov	r2, r4
     3c0:	mov	r0, r5
     3c4:	mov	r1, #0
     3c8:	bl	0 <coda_mem_int16_new>
     3cc:	ldr	r3, [sp, #72]	; 0x48
     3d0:	str	r0, [r3]
     3d4:	b	31c <read_attribute_sub+0x148>
     3d8:	ldrh	r3, [sp, #16]
     3dc:	mov	r2, r4
     3e0:	mov	r0, r5
     3e4:	mov	r1, #0
     3e8:	bl	0 <coda_mem_uint16_new>
     3ec:	ldr	r3, [sp, #72]	; 0x48
     3f0:	str	r0, [r3]
     3f4:	b	31c <read_attribute_sub+0x148>
     3f8:	ldr	r3, [sp, #16]
     3fc:	mov	r2, r4
     400:	mov	r0, r5
     404:	mov	r1, #0
     408:	bl	0 <coda_mem_int32_new>
     40c:	ldr	r3, [sp, #72]	; 0x48
     410:	str	r0, [r3]
     414:	b	31c <read_attribute_sub+0x148>
     418:	ldr	r3, [sp, #16]
     41c:	mov	r2, r4
     420:	mov	r0, r5
     424:	mov	r1, #0
     428:	bl	0 <coda_mem_uint32_new>
     42c:	ldr	r3, [sp, #72]	; 0x48
     430:	str	r0, [r3]
     434:	b	31c <read_attribute_sub+0x148>
     438:	ldrd	r6, [sp, #16]
     43c:	mov	r2, r4
     440:	mov	r0, r5
     444:	strd	r6, [sp]
     448:	mov	r1, #0
     44c:	bl	0 <coda_mem_int64_new>
     450:	ldr	r3, [sp, #72]	; 0x48
     454:	str	r0, [r3]
     458:	b	31c <read_attribute_sub+0x148>
     45c:	mov	r2, r4
     460:	mov	r0, r5
     464:	vldr	s0, [sp, #16]
     468:	mov	r1, #0
     46c:	bl	0 <coda_mem_float_new>
     470:	ldr	r3, [sp, #72]	; 0x48
     474:	str	r0, [r3]
     478:	b	31c <read_attribute_sub+0x148>
     47c:	mov	r2, r4
     480:	mov	r0, r5
     484:	vldr	d0, [sp, #16]
     488:	mov	r1, #0
     48c:	bl	0 <coda_mem_double_new>
     490:	ldr	r3, [sp, #72]	; 0x48
     494:	str	r0, [r3]
     498:	b	31c <read_attribute_sub+0x148>
     49c:	ldr	r3, [pc, #84]	; 4f8 <read_attribute_sub+0x324>
     4a0:	mov	r2, #129	; 0x81
     4a4:	ldr	r1, [pc, #80]	; 4fc <read_attribute_sub+0x328>
     4a8:	ldr	r0, [pc, #80]	; 500 <read_attribute_sub+0x32c>
     4ac:	bl	0 <__assert_fail>
     4b0:	ldr	r3, [pc, #64]	; 4f8 <read_attribute_sub+0x324>
     4b4:	mov	r2, #175	; 0xaf
     4b8:	ldr	r1, [pc, #60]	; 4fc <read_attribute_sub+0x328>
     4bc:	ldr	r0, [pc, #60]	; 500 <read_attribute_sub+0x32c>
     4c0:	bl	0 <__assert_fail>
     4c4:	mov	r0, sl
     4c8:	bl	0 <free>
     4cc:	mvn	r0, #0
     4d0:	b	328 <read_attribute_sub+0x154>
     4d4:	mov	r3, #76	; 0x4c
     4d8:	str	r3, [sp]
     4dc:	mvn	r0, #0
     4e0:	mov	r2, r8
     4e4:	ldr	r3, [pc, #16]	; 4fc <read_attribute_sub+0x328>
     4e8:	ldr	r1, [pc, #20]	; 504 <read_attribute_sub+0x330>
     4ec:	bl	0 <coda_set_error>
     4f0:	mvn	r0, #0
     4f4:	b	328 <read_attribute_sub+0x154>
     4f8:	.word	0x0000000c
     4fc:	.word	0x00000128
     500:	.word	0x000001a8
     504:	.word	0x00000170

00000508 <read_AEDR>:
     508:	orrs	r1, r2, r3
     50c:	bne	518 <read_AEDR+0x10>
     510:	mov	r0, #0
     514:	bx	lr
     518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     51c:	mov	r8, #4
     520:	sub	sp, sp, #60	; 0x3c
     524:	mov	r9, #0
     528:	mov	r5, r3
     52c:	mov	r4, r2
     530:	add	r3, sp, #28
     534:	adds	r2, r2, #8
     538:	mov	r6, r0
     53c:	ldr	r0, [r0, #52]	; 0x34
     540:	str	r3, [sp, #8]
     544:	strd	r8, [sp]
     548:	adc	r3, r5, #0
     54c:	bl	78 <read_bytes>
     550:	cmp	r0, #0
     554:	blt	a60 <read_AEDR+0x558>
     558:	ldrb	r0, [sp, #31]
     55c:	ldrb	r1, [sp, #30]
     560:	ldrb	r2, [sp, #28]
     564:	ldrb	r3, [sp, #29]
     568:	eor	r2, r2, r0
     56c:	eor	r3, r3, r1
     570:	eor	r0, r0, r2
     574:	eor	r1, r1, r3
     578:	eor	r2, r2, r0
     57c:	eor	r3, r3, r1
     580:	strb	r3, [sp, #29]
     584:	strb	r2, [sp, #28]
     588:	strb	r0, [sp, #31]
     58c:	strb	r1, [sp, #30]
     590:	ldr	r2, [sp, #28]
     594:	sub	r3, r2, #5
     598:	bics	r3, r3, #4
     59c:	bne	b54 <read_AEDR+0x64c>
     5a0:	mov	r2, #8
     5a4:	mov	r3, #0
     5a8:	ldr	r0, [r6, #52]	; 0x34
     5ac:	add	r7, sp, #48	; 0x30
     5b0:	strd	r2, [sp]
     5b4:	adds	r2, r4, #12
     5b8:	adc	r3, r5, #0
     5bc:	str	r7, [sp, #8]
     5c0:	bl	78 <read_bytes>
     5c4:	cmp	r0, #0
     5c8:	blt	a60 <read_AEDR+0x558>
     5cc:	adds	r2, r4, #20
     5d0:	add	r3, sp, #32
     5d4:	ldr	r0, [r6, #52]	; 0x34
     5d8:	str	r3, [sp, #8]
     5dc:	strd	r8, [sp]
     5e0:	adc	r3, r5, #0
     5e4:	bl	78 <read_bytes>
     5e8:	cmp	r0, #0
     5ec:	blt	a60 <read_AEDR+0x558>
     5f0:	adds	r2, r4, #24
     5f4:	add	r3, sp, #36	; 0x24
     5f8:	ldr	r0, [r6, #52]	; 0x34
     5fc:	str	r3, [sp, #8]
     600:	strd	r8, [sp]
     604:	adc	r3, r5, #0
     608:	bl	78 <read_bytes>
     60c:	cmp	r0, #0
     610:	blt	a60 <read_AEDR+0x558>
     614:	adds	r2, r4, #28
     618:	add	r3, sp, #40	; 0x28
     61c:	ldr	r0, [r6, #52]	; 0x34
     620:	str	r3, [sp, #8]
     624:	strd	r8, [sp]
     628:	adc	r3, r5, #0
     62c:	bl	78 <read_bytes>
     630:	cmp	r0, #0
     634:	blt	a60 <read_AEDR+0x558>
     638:	adds	r2, r4, #32
     63c:	add	r3, sp, #44	; 0x2c
     640:	ldr	r0, [r6, #52]	; 0x34
     644:	str	r3, [sp, #8]
     648:	strd	r8, [sp]
     64c:	adc	r3, r5, #0
     650:	bl	78 <read_bytes>
     654:	cmp	r0, #0
     658:	blt	a60 <read_AEDR+0x558>
     65c:	mov	r0, r7
     660:	bl	0 <swap8>
     664:	ldrb	ip, [sp, #39]	; 0x27
     668:	ldrb	r8, [sp, #38]	; 0x26
     66c:	ldrb	sl, [sp, #35]	; 0x23
     670:	ldrb	r9, [sp, #34]	; 0x22
     674:	ldrb	r0, [sp, #36]	; 0x24
     678:	ldrb	r1, [sp, #37]	; 0x25
     67c:	ldrb	r2, [sp, #32]
     680:	ldrb	r3, [sp, #33]	; 0x21
     684:	eor	r0, r0, ip
     688:	eor	r1, r1, r8
     68c:	eor	r2, r2, sl
     690:	eor	r3, r3, r9
     694:	eor	ip, ip, r0
     698:	eor	r8, r8, r1
     69c:	eor	sl, sl, r2
     6a0:	eor	r9, r9, r3
     6a4:	eor	r0, r0, ip
     6a8:	eor	r1, r1, r8
     6ac:	eor	r2, r2, sl
     6b0:	eor	r3, r3, r9
     6b4:	ldrb	lr, [sp, #43]	; 0x2b
     6b8:	ldrb	r7, [sp, #42]	; 0x2a
     6bc:	strb	r0, [sp, #36]	; 0x24
     6c0:	strb	ip, [sp, #39]	; 0x27
     6c4:	ldrb	r0, [sp, #41]	; 0x29
     6c8:	ldrb	ip, [sp, #40]	; 0x28
     6cc:	strb	r1, [sp, #37]	; 0x25
     6d0:	strb	r8, [sp, #38]	; 0x26
     6d4:	ldrb	r1, [sp, #44]	; 0x2c
     6d8:	ldrb	r8, [sp, #47]	; 0x2f
     6dc:	strb	r2, [sp, #32]
     6e0:	strb	r3, [sp, #33]	; 0x21
     6e4:	ldrb	r2, [sp, #46]	; 0x2e
     6e8:	ldrb	r3, [sp, #45]	; 0x2d
     6ec:	eor	ip, ip, lr
     6f0:	eor	r0, r0, r7
     6f4:	eor	r1, r1, r8
     6f8:	eor	r3, r3, r2
     6fc:	eor	lr, lr, ip
     700:	eor	r7, r7, r0
     704:	eor	r8, r8, r1
     708:	eor	r2, r2, r3
     70c:	eor	ip, ip, lr
     710:	eor	r0, r0, r7
     714:	eor	r1, r1, r8
     718:	eor	r3, r3, r2
     71c:	strb	sl, [sp, #35]	; 0x23
     720:	strb	r9, [sp, #34]	; 0x22
     724:	strb	ip, [sp, #40]	; 0x28
     728:	strb	lr, [sp, #43]	; 0x2b
     72c:	strb	r0, [sp, #41]	; 0x29
     730:	strb	r7, [sp, #42]	; 0x2a
     734:	strb	r1, [sp, #44]	; 0x2c
     738:	strb	r8, [sp, #47]	; 0x2f
     73c:	strb	r3, [sp, #45]	; 0x2d
     740:	strb	r2, [sp, #46]	; 0x2e
     744:	ldr	sl, [sp, #36]	; 0x24
     748:	cmp	sl, #32
     74c:	beq	b88 <read_AEDR+0x680>
     750:	sub	r3, sl, #1
     754:	ldr	r9, [sp, #44]	; 0x2c
     758:	cmp	r3, #51	; 0x33
     75c:	ldrls	pc, [pc, r3, lsl #2]
     760:	b	b10 <read_AEDR+0x608>
     764:	.word	0x00000a90
     768:	.word	0x00000aa0
     76c:	.word	0x00000b10
     770:	.word	0x00000af0
     774:	.word	0x00000b10
     778:	.word	0x00000b10
     77c:	.word	0x00000b10
     780:	.word	0x00000a68
     784:	.word	0x00000b10
     788:	.word	0x00000b10
     78c:	.word	0x00000ab0
     790:	.word	0x00000ac0
     794:	.word	0x00000b10
     798:	.word	0x00000ad0
     79c:	.word	0x00000b10
     7a0:	.word	0x00000b10
     7a4:	.word	0x00000b10
     7a8:	.word	0x00000b10
     7ac:	.word	0x00000b10
     7b0:	.word	0x00000b10
     7b4:	.word	0x00000ae0
     7b8:	.word	0x00000b00
     7bc:	.word	0x00000b10
     7c0:	.word	0x00000b10
     7c4:	.word	0x00000b10
     7c8:	.word	0x00000b10
     7cc:	.word	0x00000b10
     7d0:	.word	0x00000b10
     7d4:	.word	0x00000b10
     7d8:	.word	0x00000b10
     7dc:	.word	0x00000b00
     7e0:	.word	0x00000b10
     7e4:	.word	0x00000a68
     7e8:	.word	0x00000b10
     7ec:	.word	0x00000b10
     7f0:	.word	0x00000b10
     7f4:	.word	0x00000b10
     7f8:	.word	0x00000b10
     7fc:	.word	0x00000b10
     800:	.word	0x00000b10
     804:	.word	0x00000a90
     808:	.word	0x00000b10
     80c:	.word	0x00000b10
     810:	.word	0x00000ae0
     814:	.word	0x00000b00
     818:	.word	0x00000b10
     81c:	.word	0x00000b10
     820:	.word	0x00000b10
     824:	.word	0x00000b10
     828:	.word	0x00000b10
     82c:	.word	0x00000834
     830:	.word	0x00000834
     834:	mov	r0, #5
     838:	bl	0 <coda_type_text_new>
     83c:	mov	r8, r9
     840:	mov	r3, #11
     844:	mov	fp, #4
     848:	mov	r7, r0
     84c:	cmp	r7, #0
     850:	beq	a60 <read_AEDR+0x558>
     854:	mov	r1, r3
     858:	mov	r0, r7
     85c:	bl	0 <coda_type_set_read_type>
     860:	cmp	r0, #0
     864:	bne	b48 <read_AEDR+0x640>
     868:	cmp	fp, #4
     86c:	beq	89c <read_AEDR+0x394>
     870:	mov	r2, r8
     874:	asr	r3, r8, #31
     878:	mov	r0, r7
     87c:	bl	0 <coda_type_set_byte_size>
     880:	cmp	r0, #0
     884:	bne	b48 <read_AEDR+0x640>
     888:	mov	r1, #1
     88c:	mov	r0, r7
     890:	bl	0 <coda_type_number_set_endianness>
     894:	cmp	r0, #0
     898:	bne	b48 <read_AEDR+0x640>
     89c:	adds	r4, r4, #56	; 0x38
     8a0:	sub	sl, sl, #51	; 0x33
     8a4:	adc	r5, r5, #0
     8a8:	cmp	r9, #1
     8ac:	cmpne	sl, #1
     8b0:	bls	980 <read_AEDR+0x478>
     8b4:	mov	r0, #5
     8b8:	bl	0 <coda_type_array_new>
     8bc:	subs	r3, r0, #0
     8c0:	str	r3, [sp, #20]
     8c4:	beq	b48 <read_AEDR+0x640>
     8c8:	mov	r1, r7
     8cc:	bl	0 <coda_type_array_set_base_type>
     8d0:	subs	sl, r0, #0
     8d4:	bne	b40 <read_AEDR+0x638>
     8d8:	mov	r0, r7
     8dc:	bl	0 <coda_type_release>
     8e0:	mov	r1, sl
     8e4:	ldr	r0, [sp, #20]
     8e8:	bl	0 <coda_type_array_add_variable_dimension>
     8ec:	subs	sl, r0, #0
     8f0:	bne	b9c <read_AEDR+0x694>
     8f4:	mov	r1, sl
     8f8:	ldr	r0, [sp, #20]
     8fc:	bl	0 <coda_mem_array_new>
     900:	subs	fp, r0, #0
     904:	ldr	r0, [sp, #20]
     908:	beq	b4c <read_AEDR+0x644>
     90c:	bl	0 <coda_type_release>
     910:	cmp	r9, #0
     914:	bgt	93c <read_AEDR+0x434>
     918:	b	9b0 <read_AEDR+0x4a8>
     91c:	ldr	r1, [sp, #24]
     920:	mov	r0, fp
     924:	bl	0 <coda_mem_array_add_element>
     928:	cmp	r0, #0
     92c:	bne	b28 <read_AEDR+0x620>
     930:	add	sl, sl, #1
     934:	cmp	r9, sl
     938:	ble	9b0 <read_AEDR+0x4a8>
     93c:	mul	r2, r8, sl
     940:	add	r3, sp, #24
     944:	adds	r0, r4, r2
     948:	adc	r1, r5, r2, asr #31
     94c:	str	r3, [sp, #8]
     950:	mov	r2, r0
     954:	str	r7, [sp, #4]
     958:	str	r8, [sp]
     95c:	mov	r3, r1
     960:	mov	r0, r6
     964:	bl	1d4 <read_attribute_sub>
     968:	cmp	r0, #0
     96c:	beq	91c <read_AEDR+0x414>
     970:	mov	r0, fp
     974:	bl	0 <coda_dynamic_type_delete>
     978:	mvn	r0, #0
     97c:	b	a28 <read_AEDR+0x520>
     980:	add	r1, sp, #24
     984:	str	r7, [sp, #4]
     988:	str	r8, [sp]
     98c:	mov	r2, r4
     990:	mov	r3, r5
     994:	str	r1, [sp, #8]
     998:	mov	r0, r6
     99c:	bl	1d4 <read_attribute_sub>
     9a0:	cmp	r0, #0
     9a4:	mov	r0, r7
     9a8:	bne	b4c <read_AEDR+0x644>
     9ac:	bl	0 <coda_type_release>
     9b0:	ldr	r3, [sp, #28]
     9b4:	cmp	r3, #5
     9b8:	beq	a30 <read_AEDR+0x528>
     9bc:	ldr	r2, [sp, #40]	; 0x28
     9c0:	cmp	r2, #0
     9c4:	blt	b68 <read_AEDR+0x660>
     9c8:	ldr	r1, [r6, #20]
     9cc:	ldr	r3, [r1, #16]
     9d0:	cmp	r2, r3
     9d4:	bge	b70 <read_AEDR+0x668>
     9d8:	ldr	r3, [r1, #20]
     9dc:	ldr	r0, [r3, r2, lsl #2]
     9e0:	ldr	r3, [r0]
     9e4:	cmp	r3, #103	; 0x67
     9e8:	bne	bac <read_AEDR+0x6a4>
     9ec:	mov	r3, #1
     9f0:	ldr	r2, [sp, #24]
     9f4:	ldr	r1, [sp, #96]	; 0x60
     9f8:	bl	0 <coda_cdf_variable_add_attribute>
     9fc:	cmp	r0, #0
     a00:	bne	a58 <read_AEDR+0x550>
     a04:	ldr	r1, [sp, #100]	; 0x64
     a08:	ldrd	r2, [sp, #48]	; 0x30
     a0c:	str	r1, [sp, #4]
     a10:	ldr	r1, [sp, #96]	; 0x60
     a14:	mov	r0, r6
     a18:	str	r1, [sp]
     a1c:	bl	508 <read_AEDR>
     a20:	adds	r0, r0, #0
     a24:	mvnne	r0, #0
     a28:	add	sp, sp, #60	; 0x3c
     a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a30:	ldr	r3, [sp, #100]	; 0x64
     a34:	tst	r3, #1
     a38:	beq	9bc <read_AEDR+0x4b4>
     a3c:	mov	r3, #1
     a40:	ldr	r2, [sp, #24]
     a44:	ldr	r1, [sp, #96]	; 0x60
     a48:	ldr	r0, [r6, #20]
     a4c:	bl	0 <coda_mem_type_add_attribute>
     a50:	cmp	r0, #0
     a54:	beq	a04 <read_AEDR+0x4fc>
     a58:	ldr	r0, [sp, #24]
     a5c:	bl	0 <coda_dynamic_type_delete>
     a60:	mvn	r0, #0
     a64:	b	a28 <read_AEDR+0x520>
     a68:	mov	r8, #8
     a6c:	mov	r3, #6
     a70:	mov	fp, #2
     a74:	mov	r1, fp
     a78:	mov	r0, #5
     a7c:	str	r3, [sp, #20]
     a80:	bl	0 <coda_type_number_new>
     a84:	ldr	r3, [sp, #20]
     a88:	mov	r7, r0
     a8c:	b	84c <read_AEDR+0x344>
     a90:	mov	r8, #1
     a94:	mov	r3, #0
     a98:	mov	fp, #2
     a9c:	b	a74 <read_AEDR+0x56c>
     aa0:	mov	r3, #2
     aa4:	mov	fp, r3
     aa8:	mov	r8, sl
     aac:	b	a74 <read_AEDR+0x56c>
     ab0:	mov	r8, #1
     ab4:	mov	r3, r8
     ab8:	mov	fp, #2
     abc:	b	a74 <read_AEDR+0x56c>
     ac0:	mov	r8, #2
     ac4:	mov	fp, r8
     ac8:	mov	r3, #3
     acc:	b	a74 <read_AEDR+0x56c>
     ad0:	mov	r8, #4
     ad4:	mov	r3, #5
     ad8:	mov	fp, #2
     adc:	b	a74 <read_AEDR+0x56c>
     ae0:	mov	r8, #4
     ae4:	mov	r3, #8
     ae8:	mov	fp, #3
     aec:	b	a74 <read_AEDR+0x56c>
     af0:	mov	r8, sl
     af4:	mov	r3, #4
     af8:	mov	fp, #2
     afc:	b	a74 <read_AEDR+0x56c>
     b00:	mov	r8, #8
     b04:	mov	r3, #9
     b08:	mov	fp, #3
     b0c:	b	a74 <read_AEDR+0x56c>
     b10:	mvn	r0, #99	; 0x63
     b14:	mov	r2, sl
     b18:	ldr	r1, [pc, #160]	; bc0 <read_AEDR+0x6b8>
     b1c:	bl	0 <coda_set_error>
     b20:	mvn	r0, #0
     b24:	b	a28 <read_AEDR+0x520>
     b28:	mov	r0, fp
     b2c:	bl	0 <coda_dynamic_type_delete>
     b30:	ldr	r0, [sp, #24]
     b34:	bl	0 <coda_dynamic_type_delete>
     b38:	mvn	r0, #0
     b3c:	b	a28 <read_AEDR+0x520>
     b40:	ldr	r0, [sp, #20]
     b44:	bl	0 <coda_type_release>
     b48:	mov	r0, r7
     b4c:	bl	0 <coda_type_release>
     b50:	b	a60 <read_AEDR+0x558>
     b54:	ldr	r0, [pc, #104]	; bc4 <read_AEDR+0x6bc>
     b58:	ldr	r1, [pc, #104]	; bc8 <read_AEDR+0x6c0>
     b5c:	bl	0 <coda_set_error>
     b60:	mvn	r0, #0
     b64:	b	a28 <read_AEDR+0x520>
     b68:	ldr	r3, [r6, #20]
     b6c:	ldr	r3, [r3, #16]
     b70:	ldr	r0, [pc, #76]	; bc4 <read_AEDR+0x6bc>
     b74:	sub	r3, r3, #1
     b78:	ldr	r1, [pc, #76]	; bcc <read_AEDR+0x6c4>
     b7c:	bl	0 <coda_set_error>
     b80:	mvn	r0, #0
     b84:	b	a28 <read_AEDR+0x520>
     b88:	mvn	r0, #199	; 0xc7
     b8c:	ldr	r1, [pc, #60]	; bd0 <read_AEDR+0x6c8>
     b90:	bl	0 <coda_set_error>
     b94:	mvn	r0, #0
     b98:	b	a28 <read_AEDR+0x520>
     b9c:	ldr	r0, [sp, #20]
     ba0:	bl	0 <coda_type_release>
     ba4:	mvn	r0, #0
     ba8:	b	a28 <read_AEDR+0x520>
     bac:	ldr	r3, [pc, #32]	; bd4 <read_AEDR+0x6cc>
     bb0:	ldr	r2, [pc, #32]	; bd8 <read_AEDR+0x6d0>
     bb4:	ldr	r1, [pc, #32]	; bdc <read_AEDR+0x6d4>
     bb8:	ldr	r0, [pc, #32]	; be0 <read_AEDR+0x6d8>
     bbc:	bl	0 <__assert_fail>
     bc0:	.word	0x0000020c
     bc4:	.word	0xfffffed4
     bc8:	.word	0x000001ac
     bcc:	.word	0x00000228
     bd0:	.word	0x000001e4
     bd4:	.word	0x00000020
     bd8:	.word	0x000001b7
     bdc:	.word	0x00000128
     be0:	.word	0x00000278

00000be4 <rtrim.constprop.3>:
     be4:	push	{r4, lr}
     be8:	mov	r4, r0
     bec:	bl	0 <strlen>
     bf0:	cmp	r0, #0
     bf4:	pople	{r4, pc}
     bf8:	sub	r2, r0, #1
     bfc:	add	r3, r4, r2
     c00:	ldrb	r2, [r4, r2]
     c04:	cmp	r2, #32
     c08:	popne	{r4, pc}
     c0c:	add	r0, r4, r0
     c10:	mov	r1, #0
     c14:	cmp	r3, r4
     c18:	strb	r1, [r0, #-1]!
     c1c:	popeq	{r4, pc}
     c20:	ldrb	r2, [r3, #-1]!
     c24:	cmp	r2, #32
     c28:	beq	c14 <rtrim.constprop.3+0x30>
     c2c:	pop	{r4, pc}

00000c30 <read_ADR>:
     c30:	orrs	r1, r2, r3
     c34:	bne	c40 <read_ADR+0x10>
     c38:	mov	r0, #0
     c3c:	bx	lr
     c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c44:	mov	r6, #4
     c48:	sub	sp, sp, #340	; 0x154
     c4c:	mov	r7, #0
     c50:	mov	r5, r3
     c54:	mov	r4, r2
     c58:	add	r3, sp, #20
     c5c:	adds	r2, r2, #8
     c60:	mov	sl, r0
     c64:	ldr	r0, [r0, #52]	; 0x34
     c68:	str	r3, [sp, #8]
     c6c:	strd	r6, [sp]
     c70:	adc	r3, r5, #0
     c74:	bl	78 <read_bytes>
     c78:	cmp	r0, #0
     c7c:	blt	1028 <read_ADR+0x3f8>
     c80:	ldrb	r0, [sp, #23]
     c84:	ldrb	r1, [sp, #22]
     c88:	ldrb	r2, [sp, #20]
     c8c:	ldrb	r3, [sp, #21]
     c90:	eor	r2, r2, r0
     c94:	eor	r3, r3, r1
     c98:	eor	r0, r0, r2
     c9c:	eor	r1, r1, r3
     ca0:	eor	r2, r2, r0
     ca4:	eor	r3, r3, r1
     ca8:	strb	r2, [sp, #20]
     cac:	strb	r0, [sp, #23]
     cb0:	strb	r3, [sp, #21]
     cb4:	strb	r1, [sp, #22]
     cb8:	ldr	r2, [sp, #20]
     cbc:	cmp	r2, #4
     cc0:	bne	1034 <read_ADR+0x404>
     cc4:	mov	r8, #8
     cc8:	mov	r9, #0
     ccc:	adds	r2, r4, #12
     cd0:	add	fp, sp, #48	; 0x30
     cd4:	ldr	r0, [sl, #52]	; 0x34
     cd8:	adc	r3, r5, #0
     cdc:	strd	r8, [sp]
     ce0:	str	fp, [sp, #8]
     ce4:	bl	78 <read_bytes>
     ce8:	cmp	r0, #0
     cec:	blt	1028 <read_ADR+0x3f8>
     cf0:	adds	r2, r4, #20
     cf4:	add	r3, sp, #56	; 0x38
     cf8:	ldr	r0, [sl, #52]	; 0x34
     cfc:	str	r3, [sp, #8]
     d00:	strd	r8, [sp]
     d04:	adc	r3, r5, #0
     d08:	bl	78 <read_bytes>
     d0c:	cmp	r0, #0
     d10:	blt	1028 <read_ADR+0x3f8>
     d14:	adds	r2, r4, #28
     d18:	add	r3, sp, #24
     d1c:	ldr	r0, [sl, #52]	; 0x34
     d20:	str	r3, [sp, #8]
     d24:	strd	r6, [sp]
     d28:	adc	r3, r5, #0
     d2c:	bl	78 <read_bytes>
     d30:	cmp	r0, #0
     d34:	blt	1028 <read_ADR+0x3f8>
     d38:	adds	r2, r4, #32
     d3c:	add	r3, sp, #28
     d40:	ldr	r0, [sl, #52]	; 0x34
     d44:	str	r3, [sp, #8]
     d48:	strd	r6, [sp]
     d4c:	adc	r3, r5, #0
     d50:	bl	78 <read_bytes>
     d54:	cmp	r0, #0
     d58:	blt	1028 <read_ADR+0x3f8>
     d5c:	adds	r2, r4, #36	; 0x24
     d60:	add	r3, sp, #32
     d64:	ldr	r0, [sl, #52]	; 0x34
     d68:	str	r3, [sp, #8]
     d6c:	strd	r6, [sp]
     d70:	adc	r3, r5, #0
     d74:	bl	78 <read_bytes>
     d78:	cmp	r0, #0
     d7c:	blt	1028 <read_ADR+0x3f8>
     d80:	adds	r2, r4, #40	; 0x28
     d84:	add	r3, sp, #36	; 0x24
     d88:	ldr	r0, [sl, #52]	; 0x34
     d8c:	str	r3, [sp, #8]
     d90:	strd	r6, [sp]
     d94:	adc	r3, r5, #0
     d98:	bl	78 <read_bytes>
     d9c:	cmp	r0, #0
     da0:	blt	1028 <read_ADR+0x3f8>
     da4:	adds	r2, r4, #48	; 0x30
     da8:	add	r6, sp, #64	; 0x40
     dac:	ldr	r0, [sl, #52]	; 0x34
     db0:	adc	r3, r5, #0
     db4:	strd	r8, [sp]
     db8:	str	r6, [sp, #8]
     dbc:	bl	78 <read_bytes>
     dc0:	cmp	r0, #0
     dc4:	blt	1028 <read_ADR+0x3f8>
     dc8:	mov	r8, #4
     dcc:	mov	r9, #0
     dd0:	adds	r2, r4, #56	; 0x38
     dd4:	add	r3, sp, #40	; 0x28
     dd8:	ldr	r0, [sl, #52]	; 0x34
     ddc:	str	r3, [sp, #8]
     de0:	strd	r8, [sp]
     de4:	adc	r3, r5, #0
     de8:	bl	78 <read_bytes>
     dec:	cmp	r0, #0
     df0:	blt	1028 <read_ADR+0x3f8>
     df4:	adds	r2, r4, #60	; 0x3c
     df8:	add	r3, sp, #44	; 0x2c
     dfc:	ldr	r0, [sl, #52]	; 0x34
     e00:	str	r3, [sp, #8]
     e04:	strd	r8, [sp]
     e08:	adc	r3, r5, #0
     e0c:	bl	78 <read_bytes>
     e10:	cmp	r0, #0
     e14:	blt	1028 <read_ADR+0x3f8>
     e18:	mov	r8, #256	; 0x100
     e1c:	mov	r9, #0
     e20:	adds	r2, r4, #68	; 0x44
     e24:	add	r7, sp, #76	; 0x4c
     e28:	ldr	r0, [sl, #52]	; 0x34
     e2c:	adc	r3, r5, #0
     e30:	strd	r8, [sp]
     e34:	str	r7, [sp, #8]
     e38:	bl	78 <read_bytes>
     e3c:	cmp	r0, #0
     e40:	blt	1028 <read_ADR+0x3f8>
     e44:	mov	r3, #0
     e48:	mov	r0, r7
     e4c:	strb	r3, [sp, #332]	; 0x14c
     e50:	bl	be4 <rtrim.constprop.3>
     e54:	mov	r0, fp
     e58:	bl	0 <swap8>
     e5c:	add	r0, sp, #56	; 0x38
     e60:	bl	0 <swap8>
     e64:	ldrb	r4, [sp, #27]
     e68:	ldrb	r0, [sp, #24]
     e6c:	ldrb	ip, [sp, #26]
     e70:	ldrb	r8, [sp, #31]
     e74:	ldrb	r5, [sp, #30]
     e78:	ldrb	r1, [sp, #25]
     e7c:	ldrb	r2, [sp, #28]
     e80:	ldrb	r3, [sp, #29]
     e84:	eor	r0, r0, r4
     e88:	eor	r4, r4, r0
     e8c:	eor	r1, r1, ip
     e90:	eor	r2, r2, r8
     e94:	eor	r3, r3, r5
     e98:	eor	ip, ip, r1
     e9c:	eor	r0, r0, r4
     ea0:	eor	r5, r5, r3
     ea4:	eor	r8, r8, r2
     ea8:	ldrb	lr, [sp, #35]	; 0x23
     eac:	eor	r1, r1, ip
     eb0:	eor	r3, r3, r5
     eb4:	eor	r2, r2, r8
     eb8:	strb	r0, [sp, #24]
     ebc:	ldrb	r0, [sp, #32]
     ec0:	strb	r4, [sp, #27]
     ec4:	strb	r1, [sp, #25]
     ec8:	ldrb	r4, [sp, #34]	; 0x22
     ecc:	ldrb	r1, [sp, #33]	; 0x21
     ed0:	strb	ip, [sp, #26]
     ed4:	strb	r2, [sp, #28]
     ed8:	ldrb	ip, [sp, #39]	; 0x27
     edc:	ldrb	r2, [sp, #36]	; 0x24
     ee0:	strb	r3, [sp, #29]
     ee4:	strb	r5, [sp, #30]
     ee8:	ldrb	r3, [sp, #37]	; 0x25
     eec:	ldrb	r5, [sp, #38]	; 0x26
     ef0:	eor	r0, r0, lr
     ef4:	eor	lr, lr, r0
     ef8:	eor	r1, r1, r4
     efc:	eor	r2, r2, ip
     f00:	eor	r3, r3, r5
     f04:	eor	r0, r0, lr
     f08:	eor	ip, ip, r2
     f0c:	eor	r4, r4, r1
     f10:	eor	r5, r5, r3
     f14:	eor	r1, r1, r4
     f18:	eor	r2, r2, ip
     f1c:	eor	r3, r3, r5
     f20:	strb	r0, [sp, #32]
     f24:	mov	r0, r6
     f28:	strb	lr, [sp, #35]	; 0x23
     f2c:	strb	r1, [sp, #33]	; 0x21
     f30:	strb	r4, [sp, #34]	; 0x22
     f34:	strb	r2, [sp, #36]	; 0x24
     f38:	strb	ip, [sp, #39]	; 0x27
     f3c:	strb	r3, [sp, #37]	; 0x25
     f40:	strb	r5, [sp, #38]	; 0x26
     f44:	strb	r8, [sp, #31]
     f48:	bl	0 <swap8>
     f4c:	ldrb	lr, [sp, #42]	; 0x2a
     f50:	ldrb	r1, [sp, #41]	; 0x29
     f54:	ldrb	r4, [sp, #43]	; 0x2b
     f58:	ldrb	ip, [sp, #47]	; 0x2f
     f5c:	ldrb	r5, [sp, #46]	; 0x2e
     f60:	ldrb	r0, [sp, #40]	; 0x28
     f64:	ldrb	r2, [sp, #44]	; 0x2c
     f68:	eor	r1, r1, lr
     f6c:	ldrb	r3, [sp, #45]	; 0x2d
     f70:	eor	lr, lr, r1
     f74:	eor	r1, r1, lr
     f78:	eor	r0, r0, r4
     f7c:	eor	r2, r2, ip
     f80:	eor	r3, r3, r5
     f84:	strb	r1, [sp, #41]	; 0x29
     f88:	ldr	r1, [sp, #24]
     f8c:	eor	r4, r4, r0
     f90:	eor	ip, ip, r2
     f94:	eor	r5, r5, r3
     f98:	eor	r2, r2, ip
     f9c:	eor	r3, r3, r5
     fa0:	eor	r0, r0, r4
     fa4:	tst	r1, #1
     fa8:	strb	r2, [sp, #44]	; 0x2c
     fac:	strb	r3, [sp, #45]	; 0x2d
     fb0:	strb	r0, [sp, #40]	; 0x28
     fb4:	strb	r4, [sp, #43]	; 0x2b
     fb8:	strb	lr, [sp, #42]	; 0x2a
     fbc:	strb	ip, [sp, #47]	; 0x2f
     fc0:	strb	r5, [sp, #46]	; 0x2e
     fc4:	ldrd	r2, [r6, #-8]
     fc8:	bne	100c <read_ADR+0x3dc>
     fcc:	ldr	r0, [sp, #32]
     fd0:	cmp	r0, #0
     fd4:	ldrdeq	r2, [r6]
     fd8:	str	r1, [sp, #4]
     fdc:	str	r7, [sp]
     fe0:	mov	r0, sl
     fe4:	bl	508 <read_AEDR>
     fe8:	cmp	r0, #0
     fec:	bne	1028 <read_ADR+0x3f8>
     ff0:	mov	r0, sl
     ff4:	ldrd	r2, [fp]
     ff8:	bl	c30 <read_ADR>
     ffc:	adds	r0, r0, #0
    1000:	mvnne	r0, #0
    1004:	add	sp, sp, #340	; 0x154
    1008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    100c:	ldr	r0, [sp, #40]	; 0x28
    1010:	cmp	r0, #0
    1014:	beq	fd8 <read_ADR+0x3a8>
    1018:	mov	r2, r0
    101c:	ldr	r1, [pc, #36]	; 1048 <read_ADR+0x418>
    1020:	ldr	r0, [pc, #36]	; 104c <read_ADR+0x41c>
    1024:	bl	0 <coda_set_error>
    1028:	mvn	r0, #0
    102c:	add	sp, sp, #340	; 0x154
    1030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1034:	ldr	r0, [pc, #16]	; 104c <read_ADR+0x41c>
    1038:	ldr	r1, [pc, #16]	; 1050 <read_ADR+0x420>
    103c:	bl	0 <coda_set_error>
    1040:	mvn	r0, #0
    1044:	b	1004 <read_ADR+0x3d4>
    1048:	.word	0x00000310
    104c:	.word	0xfffffed4
    1050:	.word	0x000002d8

00001054 <read_VXR.part.1>:
    1054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1058:	sub	sp, sp, #172	; 0xac
    105c:	add	ip, sp, #64	; 0x40
    1060:	mov	r4, #0
    1064:	mov	r6, r2
    1068:	mov	r9, #4
    106c:	adds	r2, r2, #8
    1070:	mov	r5, r0
    1074:	mov	r7, r3
    1078:	ldr	r0, [r0, #52]	; 0x34
    107c:	adc	r3, r3, #0
    1080:	str	ip, [sp, #8]
    1084:	str	r9, [sp]
    1088:	str	r4, [sp, #4]
    108c:	str	r1, [sp, #52]	; 0x34
    1090:	bl	78 <read_bytes>
    1094:	cmp	r0, r4
    1098:	blt	1470 <read_VXR.part.1+0x41c>
    109c:	ldrb	r0, [sp, #67]	; 0x43
    10a0:	ldrb	r1, [sp, #66]	; 0x42
    10a4:	ldrb	r2, [sp, #64]	; 0x40
    10a8:	ldrb	r3, [sp, #65]	; 0x41
    10ac:	eor	r2, r2, r0
    10b0:	eor	r3, r3, r1
    10b4:	eor	r0, r0, r2
    10b8:	eor	r1, r1, r3
    10bc:	eor	r2, r2, r0
    10c0:	eor	r3, r3, r1
    10c4:	strb	r2, [sp, #64]	; 0x40
    10c8:	strb	r0, [sp, #67]	; 0x43
    10cc:	strb	r3, [sp, #65]	; 0x41
    10d0:	strb	r1, [sp, #66]	; 0x42
    10d4:	ldr	r2, [sp, #64]	; 0x40
    10d8:	cmp	r2, #6
    10dc:	bne	172c <read_VXR.part.1+0x6d8>
    10e0:	mov	r8, #0
    10e4:	mov	r3, #8
    10e8:	adds	r2, r6, #12
    10ec:	add	fp, sp, #88	; 0x58
    10f0:	ldr	r0, [r5, #52]	; 0x34
    10f4:	stm	sp, {r3, r8}
    10f8:	str	fp, [sp, #8]
    10fc:	adc	r3, r7, #0
    1100:	bl	78 <read_bytes>
    1104:	cmp	r0, r8
    1108:	blt	1470 <read_VXR.part.1+0x41c>
    110c:	adds	r2, r6, #20
    1110:	add	r3, sp, #68	; 0x44
    1114:	ldr	r0, [r5, #52]	; 0x34
    1118:	str	r3, [sp, #8]
    111c:	str	r9, [sp]
    1120:	adc	r3, r7, #0
    1124:	str	r4, [sp, #4]
    1128:	bl	78 <read_bytes>
    112c:	cmp	r0, r8
    1130:	blt	1470 <read_VXR.part.1+0x41c>
    1134:	adds	r2, r6, #24
    1138:	add	r3, sp, #72	; 0x48
    113c:	ldr	r0, [r5, #52]	; 0x34
    1140:	str	r3, [sp, #8]
    1144:	str	r9, [sp]
    1148:	adc	r3, r7, #0
    114c:	str	r4, [sp, #4]
    1150:	bl	78 <read_bytes>
    1154:	cmp	r0, r8
    1158:	blt	1470 <read_VXR.part.1+0x41c>
    115c:	mov	r0, fp
    1160:	bl	0 <swap8>
    1164:	ldrb	r1, [sp, #75]	; 0x4b
    1168:	ldrb	ip, [sp, #74]	; 0x4a
    116c:	ldrb	r2, [sp, #72]	; 0x48
    1170:	ldrb	r3, [sp, #73]	; 0x49
    1174:	ldrb	r0, [sp, #71]	; 0x47
    1178:	eor	r2, r2, r1
    117c:	eor	r3, r3, ip
    1180:	eor	r1, r1, r2
    1184:	eor	ip, ip, r3
    1188:	eor	r2, r2, r1
    118c:	eor	r3, r3, ip
    1190:	strb	r2, [sp, #72]	; 0x48
    1194:	strb	r1, [sp, #75]	; 0x4b
    1198:	strb	r3, [sp, #73]	; 0x49
    119c:	ldrb	r1, [sp, #70]	; 0x46
    11a0:	ldrb	r2, [sp, #68]	; 0x44
    11a4:	ldrb	r3, [sp, #69]	; 0x45
    11a8:	adds	sl, r6, #28
    11ac:	strb	ip, [sp, #74]	; 0x4a
    11b0:	eor	r2, r2, r0
    11b4:	eor	r3, r3, r1
    11b8:	adc	fp, r7, #0
    11bc:	ldr	ip, [sp, #72]	; 0x48
    11c0:	eor	r0, r0, r2
    11c4:	eor	r1, r1, r3
    11c8:	mov	r6, sl
    11cc:	mov	r7, fp
    11d0:	eor	r2, r2, r0
    11d4:	eor	r3, r3, r1
    11d8:	cmp	ip, r8
    11dc:	strd	r6, [sp, #40]	; 0x28
    11e0:	strb	r2, [sp, #68]	; 0x44
    11e4:	strb	r0, [sp, #71]	; 0x47
    11e8:	strb	r3, [sp, #69]	; 0x45
    11ec:	strb	r1, [sp, #70]	; 0x46
    11f0:	ble	16e8 <read_VXR.part.1+0x694>
    11f4:	mov	r3, #8
    11f8:	str	r3, [sp, #36]	; 0x24
    11fc:	mov	r2, sl
    1200:	mov	r3, r7
    1204:	mov	fp, r4
    1208:	str	r8, [sp, #48]	; 0x30
    120c:	mov	r4, r8
    1210:	str	r9, [sp, #32]
    1214:	mov	r7, fp
    1218:	strd	r2, [sp, #16]
    121c:	b	1240 <read_VXR.part.1+0x1ec>
    1220:	ldrd	r0, [sp, #16]
    1224:	ldr	r3, [sp, #72]	; 0x48
    1228:	add	r4, r4, #1
    122c:	adds	r0, r0, #4
    1230:	adc	r1, r1, #0
    1234:	cmp	r4, r3
    1238:	strd	r0, [sp, #16]
    123c:	bge	16e8 <read_VXR.part.1+0x694>
    1240:	ldr	r6, [sp, #32]
    1244:	add	r3, sp, #76	; 0x4c
    1248:	ldr	r0, [r5, #52]	; 0x34
    124c:	str	r3, [sp, #8]
    1250:	mov	r3, r6
    1254:	stm	sp, {r3, r7}
    1258:	ldrd	r2, [sp, #16]
    125c:	bl	78 <read_bytes>
    1260:	cmp	r0, #0
    1264:	blt	1470 <read_VXR.part.1+0x41c>
    1268:	ldr	r2, [sp, #68]	; 0x44
    126c:	ldrd	sl, [sp, #40]	; 0x28
    1270:	add	r2, r4, r2
    1274:	add	r3, sp, #80	; 0x50
    1278:	lsl	r2, r2, #2
    127c:	adds	r8, sl, r2
    1280:	ldr	r0, [r5, #52]	; 0x34
    1284:	str	r3, [sp, #8]
    1288:	mov	r3, r6
    128c:	adc	r9, fp, r2, asr #31
    1290:	stm	sp, {r3, r7}
    1294:	mov	r2, r8
    1298:	mov	r3, r9
    129c:	bl	78 <read_bytes>
    12a0:	cmp	r0, #0
    12a4:	blt	1470 <read_VXR.part.1+0x41c>
    12a8:	ldr	r2, [sp, #68]	; 0x44
    12ac:	add	r3, sp, #96	; 0x60
    12b0:	add	r2, r4, r2
    12b4:	ldr	r0, [r5, #52]	; 0x34
    12b8:	str	r3, [sp, #8]
    12bc:	ldr	r3, [sp, #36]	; 0x24
    12c0:	lsl	r2, r2, #3
    12c4:	adds	r8, sl, r2
    12c8:	str	r3, [sp]
    12cc:	ldr	r3, [sp, #48]	; 0x30
    12d0:	adc	r9, fp, r2, asr #31
    12d4:	str	r3, [sp, #4]
    12d8:	mov	r2, r8
    12dc:	mov	r3, r9
    12e0:	bl	78 <read_bytes>
    12e4:	cmp	r0, #0
    12e8:	blt	1470 <read_VXR.part.1+0x41c>
    12ec:	ldrb	r6, [sp, #79]	; 0x4f
    12f0:	ldrb	r3, [sp, #76]	; 0x4c
    12f4:	ldrb	lr, [sp, #78]	; 0x4e
    12f8:	ldrb	r1, [sp, #77]	; 0x4d
    12fc:	eor	r3, r3, r6
    1300:	eor	r6, r6, r3
    1304:	eor	r3, r3, r6
    1308:	ldrb	r0, [sp, #82]	; 0x52
    130c:	ldrb	ip, [sp, #83]	; 0x53
    1310:	ldrb	r2, [sp, #80]	; 0x50
    1314:	strb	r3, [sp, #76]	; 0x4c
    1318:	ldrb	r3, [sp, #81]	; 0x51
    131c:	eor	r1, r1, lr
    1320:	eor	lr, lr, r1
    1324:	eor	r1, r1, lr
    1328:	eor	r3, r3, r0
    132c:	eor	r2, r2, ip
    1330:	eor	ip, ip, r2
    1334:	strb	r1, [sp, #77]	; 0x4d
    1338:	eor	r1, r0, r3
    133c:	eor	r2, r2, ip
    1340:	eor	r3, r3, r1
    1344:	add	r0, sp, #96	; 0x60
    1348:	strb	r2, [sp, #80]	; 0x50
    134c:	strb	r3, [sp, #81]	; 0x51
    1350:	strb	r6, [sp, #79]	; 0x4f
    1354:	strb	lr, [sp, #78]	; 0x4e
    1358:	strb	ip, [sp, #83]	; 0x53
    135c:	strb	r1, [sp, #82]	; 0x52
    1360:	bl	0 <swap8>
    1364:	ldrd	r2, [sp, #96]	; 0x60
    1368:	strd	r2, [sp, #24]
    136c:	orrs	r3, r2, r3
    1370:	beq	1220 <read_VXR.part.1+0x1cc>
    1374:	add	r3, sp, #84	; 0x54
    1378:	ldr	r0, [r5, #52]	; 0x34
    137c:	str	r3, [sp, #8]
    1380:	ldr	r3, [sp, #32]
    1384:	ldr	r1, [sp, #80]	; 0x50
    1388:	ldr	r6, [sp, #76]	; 0x4c
    138c:	stm	sp, {r3, r7}
    1390:	ldrd	r2, [sp, #24]
    1394:	mov	sl, r1
    1398:	adds	r2, r2, #8
    139c:	adc	r3, r3, #0
    13a0:	bl	78 <read_bytes>
    13a4:	cmp	r0, #0
    13a8:	blt	1470 <read_VXR.part.1+0x41c>
    13ac:	ldrb	r0, [sp, #87]	; 0x57
    13b0:	ldrb	r1, [sp, #86]	; 0x56
    13b4:	ldrb	r2, [sp, #84]	; 0x54
    13b8:	ldrb	r3, [sp, #85]	; 0x55
    13bc:	eor	r2, r2, r0
    13c0:	eor	r3, r3, r1
    13c4:	eor	r0, r0, r2
    13c8:	eor	r1, r1, r3
    13cc:	eor	r2, r2, r0
    13d0:	eor	r3, r3, r1
    13d4:	strb	r2, [sp, #84]	; 0x54
    13d8:	strb	r0, [sp, #87]	; 0x57
    13dc:	strb	r3, [sp, #85]	; 0x55
    13e0:	strb	r1, [sp, #86]	; 0x56
    13e4:	ldr	r2, [sp, #84]	; 0x54
    13e8:	cmp	r2, #6
    13ec:	beq	1660 <read_VXR.part.1+0x60c>
    13f0:	cmp	r2, #7
    13f4:	beq	147c <read_VXR.part.1+0x428>
    13f8:	cmp	r2, #13
    13fc:	bne	1764 <read_VXR.part.1+0x710>
    1400:	ldr	r2, [sp, #52]	; 0x34
    1404:	ldr	r3, [r2, #20]
    1408:	cmp	r6, r3
    140c:	bge	1220 <read_VXR.part.1+0x1cc>
    1410:	ldr	r2, [r2, #40]	; 0x28
    1414:	cmp	r2, #0
    1418:	beq	16b4 <read_VXR.part.1+0x660>
    141c:	ldr	r3, [sp, #36]	; 0x24
    1420:	ldr	r0, [r5, #52]	; 0x34
    1424:	str	r3, [sp]
    1428:	ldr	r3, [sp, #48]	; 0x30
    142c:	add	r8, sp, #104	; 0x68
    1430:	stmib	sp, {r3, r8}
    1434:	ldrd	r2, [sp, #24]
    1438:	adds	r2, r2, #16
    143c:	adc	r3, r3, #0
    1440:	bl	78 <read_bytes>
    1444:	cmp	r0, #0
    1448:	blt	1470 <read_VXR.part.1+0x41c>
    144c:	mov	r0, r8
    1450:	bl	0 <swap8>
    1454:	ldrd	r2, [sp, #104]	; 0x68
    1458:	cmp	r2, #20
    145c:	sbcs	r1, r3, #0
    1460:	bge	1510 <read_VXR.part.1+0x4bc>
    1464:	ldr	r1, [pc, #944]	; 181c <read_VXR.part.1+0x7c8>
    1468:	ldr	r0, [pc, #944]	; 1820 <read_VXR.part.1+0x7cc>
    146c:	bl	0 <coda_set_error>
    1470:	mvn	r0, #0
    1474:	add	sp, sp, #172	; 0xac
    1478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    147c:	ldr	r3, [sp, #52]	; 0x34
    1480:	ldr	r3, [r3, #20]
    1484:	cmp	sl, r3
    1488:	subge	r3, r3, #1
    148c:	movge	sl, r3
    1490:	cmp	r6, sl
    1494:	mov	ip, sl
    1498:	bgt	1220 <read_VXR.part.1+0x1cc>
    149c:	ldr	r3, [sp, #52]	; 0x34
    14a0:	str	r7, [sp, #56]	; 0x38
    14a4:	mov	lr, r6
    14a8:	ldr	r1, [r3, #24]
    14ac:	ldr	r2, [r3, #36]	; 0x24
    14b0:	mov	sl, r1
    14b4:	ldrd	r0, [sp, #24]
    14b8:	ldr	r3, [r3, #28]
    14bc:	mov	fp, r4
    14c0:	adds	r0, r0, #12
    14c4:	adc	r1, r1, #0
    14c8:	mov	r8, r3
    14cc:	mov	r9, r2
    14d0:	mov	r7, sl
    14d4:	str	r5, [sp, #24]
    14d8:	sub	r3, lr, r6
    14dc:	lsl	r2, lr, #3
    14e0:	mul	r3, r7, r3
    14e4:	add	lr, lr, #1
    14e8:	mul	r3, r8, r3
    14ec:	adds	r4, r0, r3
    14f0:	adc	r5, r1, r3, asr #31
    14f4:	cmp	lr, ip
    14f8:	strd	r4, [r9, r2]
    14fc:	ble	14d8 <read_VXR.part.1+0x484>
    1500:	mov	r4, fp
    1504:	ldr	r5, [sp, #24]
    1508:	ldr	r7, [sp, #56]	; 0x38
    150c:	b	1220 <read_VXR.part.1+0x1cc>
    1510:	mov	r0, r2
    1514:	strd	r2, [sp, #56]	; 0x38
    1518:	bl	0 <malloc>
    151c:	ldrd	r2, [sp, #56]	; 0x38
    1520:	subs	r8, r0, #0
    1524:	beq	1740 <read_VXR.part.1+0x6ec>
    1528:	ldr	r0, [r5, #52]	; 0x34
    152c:	strd	r2, [sp]
    1530:	ldrd	r2, [sp, #24]
    1534:	str	r8, [sp, #8]
    1538:	adds	r2, r2, #24
    153c:	adc	r3, r3, #0
    1540:	bl	78 <read_bytes>
    1544:	cmp	r0, #0
    1548:	blt	1720 <read_VXR.part.1+0x6cc>
    154c:	mov	ip, #0
    1550:	mov	r3, #56	; 0x38
    1554:	add	r0, sp, #112	; 0x70
    1558:	ldr	r2, [pc, #708]	; 1824 <read_VXR.part.1+0x7d0>
    155c:	mov	r1, #31
    1560:	str	ip, [sp, #112]	; 0x70
    1564:	str	ip, [sp, #116]	; 0x74
    1568:	str	ip, [sp, #144]	; 0x90
    156c:	str	ip, [sp, #148]	; 0x94
    1570:	str	ip, [sp, #152]	; 0x98
    1574:	str	ip, [sp, #136]	; 0x88
    1578:	bl	0 <coda_inflateInit2_>
    157c:	subs	r3, r0, #0
    1580:	mov	r9, r3
    1584:	bne	1684 <read_VXR.part.1+0x630>
    1588:	ldr	r3, [sp, #52]	; 0x34
    158c:	ldr	r0, [sp, #52]	; 0x34
    1590:	ldr	r2, [sp, #104]	; 0x68
    1594:	ldr	r3, [r3, #20]
    1598:	str	r2, [sp, #116]	; 0x74
    159c:	cmp	sl, r3
    15a0:	subge	r3, r3, #1
    15a4:	movge	sl, r3
    15a8:	ldr	r2, [r0, #24]
    15ac:	sub	r1, sl, r6
    15b0:	movge	r3, #1
    15b4:	mul	ip, r2, r6
    15b8:	mla	r2, r1, r2, r2
    15bc:	movge	r9, r3
    15c0:	ldr	r3, [r0, #28]
    15c4:	ldr	r0, [r0, #40]	; 0x28
    15c8:	mov	r1, #4
    15cc:	mla	ip, r3, ip, r0
    15d0:	mul	r3, r3, r2
    15d4:	add	r0, sp, #112	; 0x70
    15d8:	str	r8, [sp, #112]	; 0x70
    15dc:	str	ip, [sp, #124]	; 0x7c
    15e0:	str	r3, [sp, #128]	; 0x80
    15e4:	bl	0 <coda_inflate>
    15e8:	cmn	r0, #2
    15ec:	beq	1808 <read_VXR.part.1+0x7b4>
    15f0:	cmp	r0, #0
    15f4:	blt	1774 <read_VXR.part.1+0x720>
    15f8:	mov	r0, r8
    15fc:	bl	0 <free>
    1600:	add	r0, sp, #112	; 0x70
    1604:	bl	0 <coda_inflateEnd>
    1608:	cmp	r0, #0
    160c:	bne	17cc <read_VXR.part.1+0x778>
    1610:	cmp	r6, sl
    1614:	bgt	1220 <read_VXR.part.1+0x1cc>
    1618:	ldr	r3, [sp, #52]	; 0x34
    161c:	mov	r8, sl
    1620:	ldr	r9, [sp, #32]
    1624:	ldr	lr, [r3, #36]	; 0x24
    1628:	ldr	ip, [r3, #24]
    162c:	ldr	r0, [r3, #28]
    1630:	ldrd	sl, [sp, #16]
    1634:	mul	r2, r6, ip
    1638:	lsl	r1, r6, #3
    163c:	add	r6, r6, #1
    1640:	mul	r2, r0, r2
    1644:	cmp	r8, r6
    1648:	asr	r3, r2, #31
    164c:	strd	r2, [lr, r1]
    1650:	bge	1634 <read_VXR.part.1+0x5e0>
    1654:	strd	sl, [sp, #16]
    1658:	str	r9, [sp, #32]
    165c:	b	1220 <read_VXR.part.1+0x1cc>
    1660:	str	sl, [sp, #4]
    1664:	str	r6, [sp]
    1668:	ldrd	r2, [sp, #24]
    166c:	ldr	r1, [sp, #52]	; 0x34
    1670:	mov	r0, r5
    1674:	bl	1054 <read_VXR.part.1>
    1678:	cmp	r0, #0
    167c:	bne	1470 <read_VXR.part.1+0x41c>
    1680:	b	1220 <read_VXR.part.1+0x1cc>
    1684:	ldr	r1, [pc, #412]	; 1828 <read_VXR.part.1+0x7d4>
    1688:	mvn	r0, #21
    168c:	bl	0 <coda_set_error>
    1690:	ldr	r1, [sp, #136]	; 0x88
    1694:	mov	sl, r8
    1698:	cmp	r1, #0
    169c:	beq	16a8 <read_VXR.part.1+0x654>
    16a0:	ldr	r0, [pc, #388]	; 182c <read_VXR.part.1+0x7d8>
    16a4:	bl	0 <coda_add_error_message>
    16a8:	mov	r0, sl
    16ac:	bl	0 <free>
    16b0:	b	1470 <read_VXR.part.1+0x41c>
    16b4:	ldr	r9, [sp, #52]	; 0x34
    16b8:	ldr	r2, [r9, #24]
    16bc:	ldr	r1, [r9, #28]
    16c0:	mul	r3, r2, r3
    16c4:	mul	r8, r1, r3
    16c8:	mov	r0, r8
    16cc:	bl	0 <malloc>
    16d0:	cmp	r0, #0
    16d4:	str	r0, [r9, #40]	; 0x28
    16d8:	bne	141c <read_VXR.part.1+0x3c8>
    16dc:	ldr	r3, [pc, #332]	; 1830 <read_VXR.part.1+0x7dc>
    16e0:	mov	r2, r8
    16e4:	b	174c <read_VXR.part.1+0x6f8>
    16e8:	ldrd	r2, [sp, #88]	; 0x58
    16ec:	orrs	r1, r2, r3
    16f0:	moveq	r0, #0
    16f4:	beq	1474 <read_VXR.part.1+0x420>
    16f8:	ldr	r1, [sp, #212]	; 0xd4
    16fc:	mov	r0, r5
    1700:	str	r1, [sp, #4]
    1704:	ldr	r1, [sp, #208]	; 0xd0
    1708:	str	r1, [sp]
    170c:	ldr	r1, [sp, #52]	; 0x34
    1710:	bl	1054 <read_VXR.part.1>
    1714:	adds	r0, r0, #0
    1718:	mvnne	r0, #0
    171c:	b	1474 <read_VXR.part.1+0x420>
    1720:	mov	r0, r8
    1724:	bl	0 <free>
    1728:	b	1470 <read_VXR.part.1+0x41c>
    172c:	ldr	r0, [pc, #236]	; 1820 <read_VXR.part.1+0x7cc>
    1730:	ldr	r1, [pc, #252]	; 1834 <read_VXR.part.1+0x7e0>
    1734:	bl	0 <coda_set_error>
    1738:	mvn	r0, #0
    173c:	b	1474 <read_VXR.part.1+0x420>
    1740:	mov	r0, r2
    1744:	mov	r3, #652	; 0x28c
    1748:	mov	r2, r0
    174c:	str	r3, [sp]
    1750:	ldr	r1, [pc, #224]	; 1838 <read_VXR.part.1+0x7e4>
    1754:	ldr	r3, [pc, #224]	; 183c <read_VXR.part.1+0x7e8>
    1758:	mvn	r0, #0
    175c:	bl	0 <coda_set_error>
    1760:	b	1470 <read_VXR.part.1+0x41c>
    1764:	ldr	r1, [pc, #212]	; 1840 <read_VXR.part.1+0x7ec>
    1768:	ldr	r0, [pc, #176]	; 1820 <read_VXR.part.1+0x7cc>
    176c:	bl	0 <coda_set_error>
    1770:	b	1470 <read_VXR.part.1+0x41c>
    1774:	adds	r2, r0, #5
    1778:	eor	r3, r9, #1
    177c:	and	r3, r3, #1
    1780:	movne	r2, #1
    1784:	orrs	r3, r2, r3
    1788:	beq	15f8 <read_VXR.part.1+0x5a4>
    178c:	cmn	r0, #4
    1790:	mov	sl, r8
    1794:	beq	17f8 <read_VXR.part.1+0x7a4>
    1798:	cmn	r0, #3
    179c:	bne	17f0 <read_VXR.part.1+0x79c>
    17a0:	ldr	r1, [pc, #156]	; 1844 <read_VXR.part.1+0x7f0>
    17a4:	mvn	r0, #21
    17a8:	bl	0 <coda_set_error>
    17ac:	ldr	r1, [sp, #136]	; 0x88
    17b0:	cmp	r1, #0
    17b4:	beq	17c0 <read_VXR.part.1+0x76c>
    17b8:	ldr	r0, [pc, #108]	; 182c <read_VXR.part.1+0x7d8>
    17bc:	bl	0 <coda_add_error_message>
    17c0:	add	r0, sp, #112	; 0x70
    17c4:	bl	0 <coda_inflateEnd>
    17c8:	b	16a8 <read_VXR.part.1+0x654>
    17cc:	ldr	r1, [pc, #116]	; 1848 <read_VXR.part.1+0x7f4>
    17d0:	mvn	r0, #21
    17d4:	bl	0 <coda_set_error>
    17d8:	ldr	r1, [sp, #136]	; 0x88
    17dc:	cmp	r1, #0
    17e0:	beq	1470 <read_VXR.part.1+0x41c>
    17e4:	ldr	r0, [pc, #64]	; 182c <read_VXR.part.1+0x7d8>
    17e8:	bl	0 <coda_add_error_message>
    17ec:	b	1470 <read_VXR.part.1+0x41c>
    17f0:	ldr	r1, [pc, #84]	; 184c <read_VXR.part.1+0x7f8>
    17f4:	b	17a4 <read_VXR.part.1+0x750>
    17f8:	mov	r1, #0
    17fc:	mvn	r0, #0
    1800:	bl	0 <coda_set_error>
    1804:	b	17c0 <read_VXR.part.1+0x76c>
    1808:	ldr	r3, [pc, #64]	; 1850 <read_VXR.part.1+0x7fc>
    180c:	ldr	r2, [pc, #64]	; 1854 <read_VXR.part.1+0x800>
    1810:	ldr	r1, [pc, #36]	; 183c <read_VXR.part.1+0x7e8>
    1814:	ldr	r0, [pc, #60]	; 1858 <read_VXR.part.1+0x804>
    1818:	bl	0 <__assert_fail>
    181c:	.word	0x00000370
    1820:	.word	0xfffffed4
    1824:	.word	0x000003a0
    1828:	.word	0x000003a8
    182c:	.word	0x000003d0
    1830:	.word	0x00000275
    1834:	.word	0x00000338
    1838:	.word	0x00000170
    183c:	.word	0x00000128
    1840:	.word	0x00000464
    1844:	.word	0x000003f4
    1848:	.word	0x00000458
    184c:	.word	0x0000042c
    1850:	.word	0x0000002c
    1854:	.word	0x000002af
    1858:	.word	0x000003d8

0000185c <read_VDR.part.2>:
    185c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1860:	mov	r6, #4
    1864:	sub	sp, sp, #444	; 0x1bc
    1868:	mov	r7, #0
    186c:	add	r1, sp, #36	; 0x24
    1870:	mov	sl, r2
    1874:	adds	r2, r2, #8
    1878:	mov	r4, r0
    187c:	mov	fp, r3
    1880:	ldr	r0, [r0, #52]	; 0x34
    1884:	adc	r3, r3, #0
    1888:	strd	r6, [sp]
    188c:	str	r1, [sp, #8]
    1890:	bl	78 <read_bytes>
    1894:	cmp	r0, #0
    1898:	blt	1d24 <read_VDR.part.2+0x4c8>
    189c:	ldrb	r0, [sp, #39]	; 0x27
    18a0:	ldrb	r1, [sp, #38]	; 0x26
    18a4:	ldrb	r2, [sp, #36]	; 0x24
    18a8:	ldrb	r3, [sp, #37]	; 0x25
    18ac:	ldr	ip, [sp, #480]	; 0x1e0
    18b0:	eor	r2, r2, r0
    18b4:	eor	r3, r3, r1
    18b8:	eor	r0, r0, r2
    18bc:	eor	r1, r1, r3
    18c0:	eor	r2, r2, r0
    18c4:	eor	r3, r3, r1
    18c8:	strb	r2, [sp, #36]	; 0x24
    18cc:	strb	r0, [sp, #39]	; 0x27
    18d0:	strb	r3, [sp, #37]	; 0x25
    18d4:	strb	r1, [sp, #38]	; 0x26
    18d8:	cmp	ip, #0
    18dc:	ldr	r2, [sp, #36]	; 0x24
    18e0:	bne	1d34 <read_VDR.part.2+0x4d8>
    18e4:	cmp	r2, #3
    18e8:	bne	20a4 <read_VDR.part.2+0x848>
    18ec:	mov	r8, #8
    18f0:	mov	r9, #0
    18f4:	adds	r2, sl, #12
    18f8:	add	r5, sp, #80	; 0x50
    18fc:	ldr	r0, [r4, #52]	; 0x34
    1900:	adc	r3, fp, #0
    1904:	strd	r8, [sp]
    1908:	str	r5, [sp, #8]
    190c:	bl	78 <read_bytes>
    1910:	cmp	r0, #0
    1914:	blt	1d24 <read_VDR.part.2+0x4c8>
    1918:	mov	r6, #4
    191c:	mov	r7, #0
    1920:	adds	r2, sl, #20
    1924:	add	r3, sp, #40	; 0x28
    1928:	ldr	r0, [r4, #52]	; 0x34
    192c:	str	r3, [sp, #8]
    1930:	strd	r6, [sp]
    1934:	adc	r3, fp, #0
    1938:	bl	78 <read_bytes>
    193c:	cmp	r0, #0
    1940:	blt	1d24 <read_VDR.part.2+0x4c8>
    1944:	adds	r2, sl, #24
    1948:	add	r3, sp, #44	; 0x2c
    194c:	ldr	r0, [r4, #52]	; 0x34
    1950:	str	r3, [sp, #8]
    1954:	strd	r6, [sp]
    1958:	adc	r3, fp, #0
    195c:	bl	78 <read_bytes>
    1960:	cmp	r0, #0
    1964:	blt	1d24 <read_VDR.part.2+0x4c8>
    1968:	adds	r2, sl, #28
    196c:	add	r3, sp, #88	; 0x58
    1970:	ldr	r0, [r4, #52]	; 0x34
    1974:	str	r3, [sp, #8]
    1978:	strd	r8, [sp]
    197c:	adc	r3, fp, #0
    1980:	bl	78 <read_bytes>
    1984:	cmp	r0, #0
    1988:	blt	1d24 <read_VDR.part.2+0x4c8>
    198c:	adds	r2, sl, #36	; 0x24
    1990:	add	r3, sp, #96	; 0x60
    1994:	ldr	r0, [r4, #52]	; 0x34
    1998:	str	r3, [sp, #8]
    199c:	strd	r8, [sp]
    19a0:	adc	r3, fp, #0
    19a4:	bl	78 <read_bytes>
    19a8:	cmp	r0, #0
    19ac:	blt	1d24 <read_VDR.part.2+0x4c8>
    19b0:	adds	r2, sl, #44	; 0x2c
    19b4:	add	r3, sp, #48	; 0x30
    19b8:	ldr	r0, [r4, #52]	; 0x34
    19bc:	str	r3, [sp, #8]
    19c0:	strd	r6, [sp]
    19c4:	adc	r3, fp, #0
    19c8:	bl	78 <read_bytes>
    19cc:	cmp	r0, #0
    19d0:	blt	1d24 <read_VDR.part.2+0x4c8>
    19d4:	adds	r2, sl, #48	; 0x30
    19d8:	add	r3, sp, #52	; 0x34
    19dc:	ldr	r0, [r4, #52]	; 0x34
    19e0:	str	r3, [sp, #8]
    19e4:	strd	r6, [sp]
    19e8:	adc	r3, fp, #0
    19ec:	bl	78 <read_bytes>
    19f0:	cmp	r0, #0
    19f4:	blt	1d24 <read_VDR.part.2+0x4c8>
    19f8:	adds	r2, sl, #64	; 0x40
    19fc:	add	r3, sp, #56	; 0x38
    1a00:	ldr	r0, [r4, #52]	; 0x34
    1a04:	str	r3, [sp, #8]
    1a08:	strd	r6, [sp]
    1a0c:	adc	r3, fp, #0
    1a10:	bl	78 <read_bytes>
    1a14:	cmp	r0, #0
    1a18:	blt	1d24 <read_VDR.part.2+0x4c8>
    1a1c:	adds	r2, sl, #68	; 0x44
    1a20:	add	r3, sp, #60	; 0x3c
    1a24:	ldr	r0, [r4, #52]	; 0x34
    1a28:	str	r3, [sp, #8]
    1a2c:	strd	r6, [sp]
    1a30:	adc	r3, fp, #0
    1a34:	bl	78 <read_bytes>
    1a38:	cmp	r0, #0
    1a3c:	blt	1d24 <read_VDR.part.2+0x4c8>
    1a40:	adds	r2, sl, #72	; 0x48
    1a44:	add	r3, sp, #104	; 0x68
    1a48:	ldr	r0, [r4, #52]	; 0x34
    1a4c:	str	r3, [sp, #8]
    1a50:	strd	r8, [sp]
    1a54:	adc	r3, fp, #0
    1a58:	bl	78 <read_bytes>
    1a5c:	cmp	r0, #0
    1a60:	blt	1d24 <read_VDR.part.2+0x4c8>
    1a64:	mov	r8, #0
    1a68:	adds	r2, sl, #80	; 0x50
    1a6c:	add	r3, sp, #64	; 0x40
    1a70:	ldr	r0, [r4, #52]	; 0x34
    1a74:	str	r3, [sp, #8]
    1a78:	stm	sp, {r6, r8}
    1a7c:	adc	r3, fp, #0
    1a80:	bl	78 <read_bytes>
    1a84:	cmp	r0, r8
    1a88:	blt	1d24 <read_VDR.part.2+0x4c8>
    1a8c:	mov	r2, #256	; 0x100
    1a90:	mov	r3, #0
    1a94:	ldr	r0, [r4, #52]	; 0x34
    1a98:	strd	r2, [sp]
    1a9c:	adds	r2, sl, #84	; 0x54
    1aa0:	add	r3, sp, #180	; 0xb4
    1aa4:	str	r3, [sp, #8]
    1aa8:	adc	r3, fp, #0
    1aac:	bl	78 <read_bytes>
    1ab0:	cmp	r0, r8
    1ab4:	blt	1d24 <read_VDR.part.2+0x4c8>
    1ab8:	add	r0, sp, #180	; 0xb4
    1abc:	strb	r8, [sp, #436]	; 0x1b4
    1ac0:	bl	be4 <rtrim.constprop.3>
    1ac4:	mov	r0, r5
    1ac8:	bl	0 <swap8>
    1acc:	ldrb	r5, [sp, #43]	; 0x2b
    1ad0:	ldrb	r3, [sp, #40]	; 0x28
    1ad4:	ldrb	lr, [sp, #42]	; 0x2a
    1ad8:	ldrb	r1, [sp, #41]	; 0x29
    1adc:	eor	r3, r3, r5
    1ae0:	eor	r5, r5, r3
    1ae4:	eor	r3, r3, r5
    1ae8:	ldrb	r0, [sp, #46]	; 0x2e
    1aec:	ldrb	ip, [sp, #47]	; 0x2f
    1af0:	ldrb	r2, [sp, #44]	; 0x2c
    1af4:	strb	r3, [sp, #40]	; 0x28
    1af8:	ldrb	r3, [sp, #45]	; 0x2d
    1afc:	eor	r1, r1, lr
    1b00:	eor	lr, lr, r1
    1b04:	eor	r1, r1, lr
    1b08:	eor	r3, r3, r0
    1b0c:	eor	r2, r2, ip
    1b10:	eor	ip, ip, r2
    1b14:	strb	r1, [sp, #41]	; 0x29
    1b18:	eor	r1, r0, r3
    1b1c:	eor	r2, r2, ip
    1b20:	eor	r3, r3, r1
    1b24:	add	r0, sp, #88	; 0x58
    1b28:	strb	lr, [sp, #42]	; 0x2a
    1b2c:	strb	r2, [sp, #44]	; 0x2c
    1b30:	strb	ip, [sp, #47]	; 0x2f
    1b34:	strb	r3, [sp, #45]	; 0x2d
    1b38:	strb	r1, [sp, #46]	; 0x2e
    1b3c:	strb	r5, [sp, #43]	; 0x2b
    1b40:	bl	0 <swap8>
    1b44:	add	r0, sp, #96	; 0x60
    1b48:	bl	0 <swap8>
    1b4c:	ldrb	r7, [sp, #51]	; 0x33
    1b50:	ldrb	r0, [sp, #50]	; 0x32
    1b54:	ldrb	r2, [sp, #55]	; 0x37
    1b58:	ldrb	ip, [sp, #54]	; 0x36
    1b5c:	ldrb	r5, [sp, #48]	; 0x30
    1b60:	ldrb	r1, [sp, #49]	; 0x31
    1b64:	ldrb	lr, [sp, #52]	; 0x34
    1b68:	ldrb	r3, [sp, #53]	; 0x35
    1b6c:	eor	r5, r5, r7
    1b70:	eor	r1, r1, r0
    1b74:	eor	lr, lr, r2
    1b78:	eor	r3, r3, ip
    1b7c:	eor	r7, r7, r5
    1b80:	eor	r0, r0, r1
    1b84:	eor	r2, r2, lr
    1b88:	eor	ip, ip, r3
    1b8c:	eor	r5, r5, r7
    1b90:	eor	r1, r1, r0
    1b94:	eor	lr, lr, r2
    1b98:	eor	r3, r3, ip
    1b9c:	strb	r5, [sp, #48]	; 0x30
    1ba0:	strb	r7, [sp, #51]	; 0x33
    1ba4:	ldrb	r5, [sp, #59]	; 0x3b
    1ba8:	ldrb	r7, [sp, #56]	; 0x38
    1bac:	strb	r1, [sp, #49]	; 0x31
    1bb0:	strb	r0, [sp, #50]	; 0x32
    1bb4:	ldrb	r1, [sp, #57]	; 0x39
    1bb8:	ldrb	r0, [sp, #58]	; 0x3a
    1bbc:	strb	lr, [sp, #52]	; 0x34
    1bc0:	strb	r2, [sp, #55]	; 0x37
    1bc4:	ldrb	lr, [sp, #63]	; 0x3f
    1bc8:	ldrb	r2, [sp, #60]	; 0x3c
    1bcc:	strb	r3, [sp, #53]	; 0x35
    1bd0:	strb	ip, [sp, #54]	; 0x36
    1bd4:	ldrb	r3, [sp, #61]	; 0x3d
    1bd8:	ldrb	ip, [sp, #62]	; 0x3e
    1bdc:	eor	r7, r7, r5
    1be0:	eor	r1, r1, r0
    1be4:	eor	r2, r2, lr
    1be8:	eor	r3, r3, ip
    1bec:	eor	ip, ip, r3
    1bf0:	eor	r0, r0, r1
    1bf4:	eor	lr, lr, r2
    1bf8:	eor	r5, r5, r7
    1bfc:	eor	r1, r1, r0
    1c00:	eor	r3, r3, ip
    1c04:	eor	r2, r2, lr
    1c08:	strb	r0, [sp, #58]	; 0x3a
    1c0c:	eor	r7, r7, r5
    1c10:	add	r0, sp, #104	; 0x68
    1c14:	strb	r1, [sp, #57]	; 0x39
    1c18:	strb	r2, [sp, #60]	; 0x3c
    1c1c:	strb	r3, [sp, #61]	; 0x3d
    1c20:	strb	ip, [sp, #62]	; 0x3e
    1c24:	strb	r7, [sp, #56]	; 0x38
    1c28:	strb	r5, [sp, #59]	; 0x3b
    1c2c:	strb	lr, [sp, #63]	; 0x3f
    1c30:	bl	0 <swap8>
    1c34:	ldrb	r0, [sp, #67]	; 0x43
    1c38:	ldrb	r1, [sp, #66]	; 0x42
    1c3c:	ldrb	r2, [sp, #64]	; 0x40
    1c40:	ldrb	r3, [sp, #65]	; 0x41
    1c44:	ldr	ip, [sp, #40]	; 0x28
    1c48:	eor	r2, r2, r0
    1c4c:	eor	r3, r3, r1
    1c50:	eor	r0, r0, r2
    1c54:	eor	r1, r1, r3
    1c58:	eor	r2, r2, r0
    1c5c:	eor	r3, r3, r1
    1c60:	cmp	ip, #32
    1c64:	strb	r2, [sp, #64]	; 0x40
    1c68:	strb	r0, [sp, #67]	; 0x43
    1c6c:	strb	r3, [sp, #65]	; 0x41
    1c70:	strb	r1, [sp, #66]	; 0x42
    1c74:	beq	20dc <read_VDR.part.2+0x880>
    1c78:	ldr	r3, [sp, #480]	; 0x1e0
    1c7c:	cmp	r3, #0
    1c80:	bne	1f40 <read_VDR.part.2+0x6e4>
    1c84:	ldr	r2, [r4, #80]	; 0x50
    1c88:	str	r2, [sp, #68]	; 0x44
    1c8c:	cmp	r2, #0
    1c90:	ble	1d50 <read_VDR.part.2+0x4f4>
    1c94:	mov	r8, sl
    1c98:	mov	r9, fp
    1c9c:	add	r5, sp, #148	; 0x94
    1ca0:	mov	sl, #0
    1ca4:	mov	r6, #4
    1ca8:	mov	r7, #0
    1cac:	b	1d00 <read_VDR.part.2+0x4a4>
    1cb0:	ldrb	r0, [r5, #3]
    1cb4:	ldrb	r2, [r5]
    1cb8:	ldrb	r1, [r5, #2]
    1cbc:	ldrb	r3, [r5, #1]
    1cc0:	eor	r2, r2, r0
    1cc4:	eor	r0, r0, r2
    1cc8:	eor	r2, r2, r0
    1ccc:	eor	r3, r3, r1
    1cd0:	strb	r2, [r5]
    1cd4:	ldr	r2, [sp, #68]	; 0x44
    1cd8:	eor	r1, r1, r3
    1cdc:	adds	r8, r8, #4
    1ce0:	adc	r9, r9, #0
    1ce4:	eor	r3, r3, r1
    1ce8:	cmp	sl, r2
    1cec:	strb	r0, [r5, #3]
    1cf0:	strb	r3, [r5, #1]
    1cf4:	strb	r1, [r5, #2]
    1cf8:	add	r5, r5, #4
    1cfc:	bge	1d50 <read_VDR.part.2+0x4f4>
    1d00:	ldr	r0, [r4, #52]	; 0x34
    1d04:	mov	r2, r8
    1d08:	str	r5, [sp, #8]
    1d0c:	strd	r6, [sp]
    1d10:	mov	r3, r9
    1d14:	bl	78 <read_bytes>
    1d18:	add	sl, sl, #1
    1d1c:	cmp	r0, #0
    1d20:	bge	1cb0 <read_VDR.part.2+0x454>
    1d24:	mvn	r5, #0
    1d28:	mov	r0, r5
    1d2c:	add	sp, sp, #444	; 0x1bc
    1d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d34:	cmp	r2, #8
    1d38:	beq	18ec <read_VDR.part.2+0x90>
    1d3c:	ldr	r1, [pc, #1004]	; 2130 <read_VDR.part.2+0x8d4>
    1d40:	ldr	r0, [pc, #1004]	; 2134 <read_VDR.part.2+0x8d8>
    1d44:	bl	0 <coda_set_error>
    1d48:	mvn	r5, #0
    1d4c:	b	1d28 <read_VDR.part.2+0x4cc>
    1d50:	ldr	r3, [sp, #48]	; 0x30
    1d54:	ands	r5, r3, #1
    1d58:	and	r3, r3, #4
    1d5c:	bne	1d6c <read_VDR.part.2+0x510>
    1d60:	ldr	r2, [sp, #44]	; 0x2c
    1d64:	cmp	r2, #0
    1d68:	bne	2088 <read_VDR.part.2+0x82c>
    1d6c:	cmp	r3, #0
    1d70:	bne	1e38 <read_VDR.part.2+0x5dc>
    1d74:	ldr	r3, [r4, #20]
    1d78:	ldr	r2, [sp, #60]	; 0x3c
    1d7c:	ldr	r3, [r3, #16]
    1d80:	cmp	r3, r2
    1d84:	bne	20b8 <read_VDR.part.2+0x85c>
    1d88:	ldr	lr, [sp, #52]	; 0x34
    1d8c:	ldr	r3, [sp, #480]	; 0x1e0
    1d90:	ldr	ip, [sp, #56]	; 0x38
    1d94:	str	lr, [sp, #16]
    1d98:	ldr	lr, [r4, #72]	; 0x48
    1d9c:	cmp	r3, #0
    1da0:	str	ip, [sp, #12]
    1da4:	add	ip, sp, #76	; 0x4c
    1da8:	str	ip, [sp, #20]
    1dac:	str	lr, [sp, #8]
    1db0:	addne	ip, sp, #116	; 0x74
    1db4:	addeq	ip, r4, #84	; 0x54
    1db8:	add	lr, sp, #148	; 0x94
    1dbc:	ldr	r3, [sp, #68]	; 0x44
    1dc0:	ldr	r1, [sp, #44]	; 0x2c
    1dc4:	ldr	r0, [sp, #40]	; 0x28
    1dc8:	mov	r2, r5
    1dcc:	stm	sp, {ip, lr}
    1dd0:	bl	0 <coda_cdf_variable_new>
    1dd4:	cmp	r0, #0
    1dd8:	mov	r6, r0
    1ddc:	beq	1d24 <read_VDR.part.2+0x4c8>
    1de0:	mov	r2, r0
    1de4:	add	r1, sp, #180	; 0xb4
    1de8:	mov	r3, #1
    1dec:	ldr	r0, [r4, #20]
    1df0:	bl	0 <coda_mem_record_add_field>
    1df4:	subs	r5, r0, #0
    1df8:	bne	20cc <read_VDR.part.2+0x870>
    1dfc:	ldrd	r2, [sp, #88]	; 0x58
    1e00:	orrs	r1, r2, r3
    1e04:	bne	2050 <read_VDR.part.2+0x7f4>
    1e08:	ldrd	r2, [sp, #80]	; 0x50
    1e0c:	orrs	r1, r2, r3
    1e10:	beq	1d28 <read_VDR.part.2+0x4cc>
    1e14:	ldr	r1, [sp, #480]	; 0x1e0
    1e18:	mov	r0, r4
    1e1c:	str	r1, [sp]
    1e20:	bl	185c <read_VDR.part.2>
    1e24:	adds	r5, r0, #0
    1e28:	mvnne	r5, #0
    1e2c:	mov	r0, r5
    1e30:	add	sp, sp, #444	; 0x1bc
    1e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e38:	ldrd	r6, [sp, #104]	; 0x68
    1e3c:	mvn	r3, #0
    1e40:	mvn	r2, #0
    1e44:	cmp	r7, r3
    1e48:	cmpeq	r6, r2
    1e4c:	beq	1d74 <read_VDR.part.2+0x518>
    1e50:	orrs	r3, r6, r7
    1e54:	beq	1d74 <read_VDR.part.2+0x518>
    1e58:	mov	r8, #4
    1e5c:	mov	r9, #0
    1e60:	adds	r2, r6, #8
    1e64:	add	r3, sp, #72	; 0x48
    1e68:	ldr	r0, [r4, #52]	; 0x34
    1e6c:	str	r3, [sp, #8]
    1e70:	strd	r8, [sp]
    1e74:	adc	r3, r7, #0
    1e78:	bl	78 <read_bytes>
    1e7c:	cmp	r0, #0
    1e80:	blt	1d24 <read_VDR.part.2+0x4c8>
    1e84:	ldrb	r0, [sp, #75]	; 0x4b
    1e88:	ldrb	r1, [sp, #74]	; 0x4a
    1e8c:	ldrb	r2, [sp, #72]	; 0x48
    1e90:	ldrb	r3, [sp, #73]	; 0x49
    1e94:	eor	r2, r2, r0
    1e98:	eor	r3, r3, r1
    1e9c:	eor	r0, r0, r2
    1ea0:	eor	r1, r1, r3
    1ea4:	eor	r2, r2, r0
    1ea8:	eor	r3, r3, r1
    1eac:	strb	r2, [sp, #72]	; 0x48
    1eb0:	strb	r0, [sp, #75]	; 0x4b
    1eb4:	strb	r3, [sp, #73]	; 0x49
    1eb8:	strb	r1, [sp, #74]	; 0x4a
    1ebc:	ldr	r2, [sp, #72]	; 0x48
    1ec0:	cmp	r2, #11
    1ec4:	bne	20f0 <read_VDR.part.2+0x894>
    1ec8:	adds	r2, r6, #12
    1ecc:	add	r1, sp, #76	; 0x4c
    1ed0:	ldr	r0, [r4, #52]	; 0x34
    1ed4:	adc	r3, r7, #0
    1ed8:	strd	r8, [sp]
    1edc:	str	r1, [sp, #8]
    1ee0:	bl	78 <read_bytes>
    1ee4:	cmp	r0, #0
    1ee8:	blt	1d24 <read_VDR.part.2+0x4c8>
    1eec:	ldrb	r0, [sp, #79]	; 0x4f
    1ef0:	ldrb	r1, [sp, #78]	; 0x4e
    1ef4:	ldrb	r2, [sp, #76]	; 0x4c
    1ef8:	ldrb	r3, [sp, #77]	; 0x4d
    1efc:	eor	r2, r2, r0
    1f00:	eor	r3, r3, r1
    1f04:	eor	r0, r0, r2
    1f08:	eor	r1, r1, r3
    1f0c:	eor	r2, r2, r0
    1f10:	eor	r3, r3, r1
    1f14:	strb	r2, [sp, #76]	; 0x4c
    1f18:	strb	r0, [sp, #79]	; 0x4f
    1f1c:	strb	r3, [sp, #77]	; 0x4d
    1f20:	strb	r1, [sp, #78]	; 0x4e
    1f24:	ldr	r2, [sp, #76]	; 0x4c
    1f28:	cmp	r2, #5
    1f2c:	beq	1d74 <read_VDR.part.2+0x518>
    1f30:	ldr	r1, [pc, #512]	; 2138 <read_VDR.part.2+0x8dc>
    1f34:	mvn	r0, #199	; 0xc7
    1f38:	bl	0 <coda_set_error>
    1f3c:	b	1d24 <read_VDR.part.2+0x4c8>
    1f40:	adds	r2, sl, #340	; 0x154
    1f44:	add	r3, sp, #68	; 0x44
    1f48:	ldr	r0, [r4, #52]	; 0x34
    1f4c:	str	r3, [sp, #8]
    1f50:	stm	sp, {r6, r8}
    1f54:	adc	r3, fp, #0
    1f58:	bl	78 <read_bytes>
    1f5c:	cmp	r0, #0
    1f60:	blt	1d24 <read_VDR.part.2+0x4c8>
    1f64:	ldrb	r0, [sp, #71]	; 0x47
    1f68:	ldrb	r1, [sp, #70]	; 0x46
    1f6c:	ldrb	r2, [sp, #68]	; 0x44
    1f70:	ldrb	r3, [sp, #69]	; 0x45
    1f74:	eor	r2, r2, r0
    1f78:	eor	r3, r3, r1
    1f7c:	eor	r0, r0, r2
    1f80:	eor	r1, r1, r3
    1f84:	eor	r3, r3, r1
    1f88:	eor	r2, r2, r0
    1f8c:	strb	r2, [sp, #68]	; 0x44
    1f90:	strb	r0, [sp, #71]	; 0x47
    1f94:	strb	r3, [sp, #69]	; 0x45
    1f98:	strb	r1, [sp, #70]	; 0x46
    1f9c:	ldr	r3, [sp, #68]	; 0x44
    1fa0:	cmp	r3, #0
    1fa4:	blt	2118 <read_VDR.part.2+0x8bc>
    1fa8:	cmp	r3, #8
    1fac:	bgt	2100 <read_VDR.part.2+0x8a4>
    1fb0:	cmp	r3, #0
    1fb4:	beq	1d50 <read_VDR.part.2+0x4f4>
    1fb8:	adds	r2, sl, #344	; 0x158
    1fbc:	adc	r3, fp, #0
    1fc0:	mov	r5, r8
    1fc4:	mov	r7, r8
    1fc8:	strd	r2, [sp, #24]
    1fcc:	mov	r8, r2
    1fd0:	mov	r9, r3
    1fd4:	add	sl, sp, #116	; 0x74
    1fd8:	b	202c <read_VDR.part.2+0x7d0>
    1fdc:	ldrb	r0, [sl, #3]
    1fe0:	ldrb	r2, [sl]
    1fe4:	ldrb	r1, [sl, #2]
    1fe8:	ldrb	r3, [sl, #1]
    1fec:	eor	r2, r2, r0
    1ff0:	eor	r0, r0, r2
    1ff4:	eor	r2, r2, r0
    1ff8:	eor	r3, r3, r1
    1ffc:	strb	r2, [sl]
    2000:	ldr	r2, [sp, #68]	; 0x44
    2004:	eor	r1, r1, r3
    2008:	adds	r8, r8, #4
    200c:	adc	r9, r9, #0
    2010:	eor	r3, r3, r1
    2014:	cmp	r5, r2
    2018:	strb	r0, [sl, #3]
    201c:	strb	r3, [sl, #1]
    2020:	strb	r1, [sl, #2]
    2024:	add	sl, sl, #4
    2028:	bge	2074 <read_VDR.part.2+0x818>
    202c:	ldr	r0, [r4, #52]	; 0x34
    2030:	mov	r2, r8
    2034:	stm	sp, {r6, r7, sl}
    2038:	mov	r3, r9
    203c:	bl	78 <read_bytes>
    2040:	add	r5, r5, #1
    2044:	cmp	r0, #0
    2048:	bge	1fdc <read_VDR.part.2+0x780>
    204c:	b	1d24 <read_VDR.part.2+0x4c8>
    2050:	mvn	r0, #0
    2054:	str	r0, [sp, #4]
    2058:	ldr	r1, [sp, #76]	; 0x4c
    205c:	str	r5, [sp]
    2060:	mov	r0, r4
    2064:	bl	1054 <read_VXR.part.1>
    2068:	cmp	r0, #0
    206c:	beq	1e08 <read_VDR.part.2+0x5ac>
    2070:	b	1d24 <read_VDR.part.2+0x4c8>
    2074:	ldrd	sl, [sp, #24]
    2078:	lsl	r3, r2, #2
    207c:	adds	sl, sl, r3
    2080:	adc	fp, fp, r3, asr #31
    2084:	b	1c8c <read_VDR.part.2+0x430>
    2088:	add	r3, r2, #1
    208c:	ldr	r1, [pc, #168]	; 213c <read_VDR.part.2+0x8e0>
    2090:	add	r2, sp, #180	; 0xb4
    2094:	ldr	r0, [pc, #152]	; 2134 <read_VDR.part.2+0x8d8>
    2098:	bl	0 <coda_set_error>
    209c:	mvn	r5, #0
    20a0:	b	1d28 <read_VDR.part.2+0x4cc>
    20a4:	ldr	r1, [pc, #148]	; 2140 <read_VDR.part.2+0x8e4>
    20a8:	ldr	r0, [pc, #132]	; 2134 <read_VDR.part.2+0x8d8>
    20ac:	bl	0 <coda_set_error>
    20b0:	mvn	r5, #0
    20b4:	b	1d28 <read_VDR.part.2+0x4cc>
    20b8:	ldr	r1, [pc, #132]	; 2144 <read_VDR.part.2+0x8e8>
    20bc:	ldr	r0, [pc, #112]	; 2134 <read_VDR.part.2+0x8d8>
    20c0:	bl	0 <coda_set_error>
    20c4:	mvn	r5, #0
    20c8:	b	1d28 <read_VDR.part.2+0x4cc>
    20cc:	mov	r0, r6
    20d0:	bl	0 <coda_cdf_type_delete>
    20d4:	mvn	r5, #0
    20d8:	b	1d28 <read_VDR.part.2+0x4cc>
    20dc:	ldr	r1, [pc, #100]	; 2148 <read_VDR.part.2+0x8ec>
    20e0:	mvn	r0, #199	; 0xc7
    20e4:	bl	0 <coda_set_error>
    20e8:	mvn	r5, #0
    20ec:	b	1d28 <read_VDR.part.2+0x4cc>
    20f0:	ldr	r1, [pc, #84]	; 214c <read_VDR.part.2+0x8f0>
    20f4:	ldr	r0, [pc, #56]	; 2134 <read_VDR.part.2+0x8d8>
    20f8:	bl	0 <coda_set_error>
    20fc:	b	1d24 <read_VDR.part.2+0x4c8>
    2100:	add	r2, sp, #180	; 0xb4
    2104:	ldr	r1, [pc, #68]	; 2150 <read_VDR.part.2+0x8f4>
    2108:	ldr	r0, [pc, #36]	; 2134 <read_VDR.part.2+0x8d8>
    210c:	bl	0 <coda_set_error>
    2110:	mvn	r5, #0
    2114:	b	1d28 <read_VDR.part.2+0x4cc>
    2118:	add	r2, sp, #180	; 0xb4
    211c:	ldr	r1, [pc, #48]	; 2154 <read_VDR.part.2+0x8f8>
    2120:	ldr	r0, [pc, #12]	; 2134 <read_VDR.part.2+0x8d8>
    2124:	bl	0 <coda_set_error>
    2128:	mvn	r5, #0
    212c:	b	1d28 <read_VDR.part.2+0x4cc>
    2130:	.word	0x0000049c
    2134:	.word	0xfffffed4
    2138:	.word	0x0000060c
    213c:	.word	0x00000574
    2140:	.word	0x000004d4
    2144:	.word	0x00000644
    2148:	.word	0x000001e4
    214c:	.word	0x000005d4
    2150:	.word	0x00000544
    2154:	.word	0x0000050c

00002158 <coda_cdf_close>:
    2158:	push	{r4, lr}
    215c:	mov	r4, r0
    2160:	ldr	r0, [r0]
    2164:	cmp	r0, #0
    2168:	beq	2170 <coda_cdf_close+0x18>
    216c:	bl	0 <free>
    2170:	ldr	r0, [r4, #20]
    2174:	cmp	r0, #0
    2178:	beq	2180 <coda_cdf_close+0x28>
    217c:	bl	0 <coda_dynamic_type_delete>
    2180:	ldr	r0, [r4, #48]	; 0x30
    2184:	cmp	r0, #0
    2188:	beq	2190 <coda_cdf_close+0x38>
    218c:	bl	0 <free>
    2190:	ldr	r0, [r4, #52]	; 0x34
    2194:	cmp	r0, #0
    2198:	beq	21a0 <coda_cdf_close+0x48>
    219c:	bl	0 <coda_bin_close>
    21a0:	mov	r0, r4
    21a4:	bl	0 <free>
    21a8:	mov	r0, #0
    21ac:	pop	{r4, pc}

000021b0 <coda_cdf_reopen>:
    21b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b4:	mov	r5, r0
    21b8:	sub	sp, sp, #148	; 0x94
    21bc:	mov	r0, #120	; 0x78
    21c0:	bl	0 <malloc>
    21c4:	subs	r4, r0, #0
    21c8:	beq	29e8 <coda_cdf_reopen+0x838>
    21cc:	ldr	r6, [r5]
    21d0:	mov	sl, #0
    21d4:	mov	fp, #0
    21d8:	ldrd	r2, [r6, #8]
    21dc:	mov	r1, #0
    21e0:	mov	r7, #5
    21e4:	ldr	r0, [r6]
    21e8:	str	r1, [r4]
    21ec:	str	r6, [r4, #52]	; 0x34
    21f0:	strd	r2, [r4, #8]
    21f4:	strd	sl, [r4, #40]	; 0x28
    21f8:	str	r1, [r4, #20]
    21fc:	str	r1, [r4, #24]
    2200:	str	r1, [r4, #28]
    2204:	str	r1, [r4, #32]
    2208:	str	r1, [r4, #48]	; 0x30
    220c:	str	r7, [r4, #16]
    2210:	bl	0 <strdup>
    2214:	cmp	r0, #0
    2218:	str	r0, [r4]
    221c:	beq	2a14 <coda_cdf_reopen+0x864>
    2220:	mov	r8, #8
    2224:	mov	r9, #0
    2228:	add	r1, sp, #88	; 0x58
    222c:	mov	r2, sl
    2230:	mov	r3, fp
    2234:	mov	r0, r6
    2238:	strd	r8, [sp]
    223c:	str	r1, [sp, #8]
    2240:	bl	78 <read_bytes>
    2244:	cmp	r0, #0
    2248:	blt	291c <coda_cdf_reopen+0x76c>
    224c:	ldrb	r6, [sp, #91]	; 0x5b
    2250:	ldrb	r1, [sp, #88]	; 0x58
    2254:	ldrb	lr, [sp, #90]	; 0x5a
    2258:	ldrb	r3, [sp, #89]	; 0x59
    225c:	eor	r1, r1, r6
    2260:	eor	r6, r6, r1
    2264:	eor	r3, r3, lr
    2268:	eor	lr, lr, r3
    226c:	eor	r0, r1, r6
    2270:	ldrb	ip, [sp, #95]	; 0x5f
    2274:	eor	r1, r3, lr
    2278:	ldrb	r2, [sp, #92]	; 0x5c
    227c:	strb	r0, [sp, #88]	; 0x58
    2280:	ldrb	r3, [sp, #93]	; 0x5d
    2284:	ldrb	r0, [sp, #94]	; 0x5e
    2288:	strb	r6, [sp, #91]	; 0x5b
    228c:	strb	r1, [sp, #89]	; 0x59
    2290:	strb	lr, [sp, #90]	; 0x5a
    2294:	ldr	r8, [pc, #1992]	; 2a64 <coda_cdf_reopen+0x8b4>
    2298:	eor	r2, r2, ip
    229c:	eor	r3, r3, r0
    22a0:	ldr	lr, [sp, #88]	; 0x58
    22a4:	ldr	r6, [pc, #1980]	; 2a68 <coda_cdf_reopen+0x8b8>
    22a8:	eor	ip, ip, r2
    22ac:	eor	r0, r0, r3
    22b0:	cmp	lr, r8
    22b4:	cmpne	lr, r6
    22b8:	eor	r2, r2, ip
    22bc:	eor	r3, r3, r0
    22c0:	moveq	r8, #1
    22c4:	movne	r8, #0
    22c8:	strb	r2, [sp, #92]	; 0x5c
    22cc:	strb	ip, [sp, #95]	; 0x5f
    22d0:	strb	r3, [sp, #93]	; 0x5d
    22d4:	strb	r0, [sp, #94]	; 0x5e
    22d8:	beq	299c <coda_cdf_reopen+0x7ec>
    22dc:	ldr	r3, [sp, #92]	; 0x5c
    22e0:	ldr	r2, [pc, #1924]	; 2a6c <coda_cdf_reopen+0x8bc>
    22e4:	cmp	r3, r2
    22e8:	ldreq	r1, [pc, #1920]	; 2a70 <coda_cdf_reopen+0x8c0>
    22ec:	beq	29a0 <coda_cdf_reopen+0x7f0>
    22f0:	ldr	r2, [pc, #1916]	; 2a74 <coda_cdf_reopen+0x8c4>
    22f4:	cmp	lr, r2
    22f8:	cmpeq	r3, r6
    22fc:	bne	2a50 <coda_cdf_reopen+0x8a0>
    2300:	mov	r0, r7
    2304:	bl	0 <coda_type_record_new>
    2308:	subs	r6, r0, #0
    230c:	beq	291c <coda_cdf_reopen+0x76c>
    2310:	mov	r1, r8
    2314:	bl	0 <coda_mem_record_new>
    2318:	cmp	r0, #0
    231c:	str	r0, [r4, #20]
    2320:	beq	2a38 <coda_cdf_reopen+0x888>
    2324:	mov	r0, r6
    2328:	mov	r7, #0
    232c:	mov	r6, #4
    2330:	bl	0 <coda_type_release>
    2334:	add	r3, sp, #20
    2338:	ldr	r0, [r4, #52]	; 0x34
    233c:	mov	r2, #16
    2340:	str	r3, [sp, #8]
    2344:	strd	r6, [sp]
    2348:	mov	r3, #0
    234c:	bl	78 <read_bytes>
    2350:	cmp	r0, #0
    2354:	blt	291c <coda_cdf_reopen+0x76c>
    2358:	ldrb	r0, [sp, #23]
    235c:	ldrb	r1, [sp, #22]
    2360:	ldrb	r2, [sp, #20]
    2364:	ldrb	r3, [sp, #21]
    2368:	eor	r2, r2, r0
    236c:	eor	r3, r3, r1
    2370:	eor	r0, r0, r2
    2374:	eor	r1, r1, r3
    2378:	eor	r2, r2, r0
    237c:	eor	r3, r3, r1
    2380:	strb	r2, [sp, #20]
    2384:	strb	r0, [sp, #23]
    2388:	strb	r3, [sp, #21]
    238c:	strb	r1, [sp, #22]
    2390:	ldr	r2, [sp, #20]
    2394:	cmp	r2, #1
    2398:	bne	2950 <coda_cdf_reopen+0x7a0>
    239c:	mov	r2, #8
    23a0:	mov	r3, #0
    23a4:	add	r8, sp, #48	; 0x30
    23a8:	ldr	r0, [r4, #52]	; 0x34
    23ac:	strd	r2, [sp]
    23b0:	str	r8, [sp, #8]
    23b4:	mov	r2, #20
    23b8:	mov	r3, #0
    23bc:	bl	78 <read_bytes>
    23c0:	cmp	r0, #0
    23c4:	blt	291c <coda_cdf_reopen+0x76c>
    23c8:	mov	r6, #4
    23cc:	mov	r7, #0
    23d0:	add	r3, r4, #56	; 0x38
    23d4:	ldr	r0, [r4, #52]	; 0x34
    23d8:	mov	r2, #28
    23dc:	str	r3, [sp, #8]
    23e0:	strd	r6, [sp]
    23e4:	mov	r3, #0
    23e8:	bl	78 <read_bytes>
    23ec:	cmp	r0, #0
    23f0:	blt	291c <coda_cdf_reopen+0x76c>
    23f4:	add	r3, r4, #60	; 0x3c
    23f8:	ldr	r0, [r4, #52]	; 0x34
    23fc:	mov	r2, #32
    2400:	str	r3, [sp, #8]
    2404:	strd	r6, [sp]
    2408:	mov	r3, #0
    240c:	bl	78 <read_bytes>
    2410:	cmp	r0, #0
    2414:	blt	291c <coda_cdf_reopen+0x76c>
    2418:	add	r3, sp, #24
    241c:	ldr	r0, [r4, #52]	; 0x34
    2420:	mov	r2, #36	; 0x24
    2424:	str	r3, [sp, #8]
    2428:	strd	r6, [sp]
    242c:	mov	r3, #0
    2430:	bl	78 <read_bytes>
    2434:	cmp	r0, #0
    2438:	blt	291c <coda_cdf_reopen+0x76c>
    243c:	add	r3, sp, #28
    2440:	ldr	r0, [r4, #52]	; 0x34
    2444:	mov	r2, #40	; 0x28
    2448:	str	r3, [sp, #8]
    244c:	strd	r6, [sp]
    2450:	mov	r3, #0
    2454:	bl	78 <read_bytes>
    2458:	cmp	r0, #0
    245c:	blt	291c <coda_cdf_reopen+0x76c>
    2460:	add	r3, r4, #64	; 0x40
    2464:	ldr	r0, [r4, #52]	; 0x34
    2468:	mov	r2, #52	; 0x34
    246c:	str	r3, [sp, #8]
    2470:	strd	r6, [sp]
    2474:	mov	r3, #0
    2478:	bl	78 <read_bytes>
    247c:	cmp	r0, #0
    2480:	blt	291c <coda_cdf_reopen+0x76c>
    2484:	mov	r0, r8
    2488:	bl	0 <swap8>
    248c:	ldrb	sl, [r4, #59]	; 0x3b
    2490:	ldrb	r6, [r4, #58]	; 0x3a
    2494:	ldrb	r9, [r4, #63]	; 0x3f
    2498:	ldrb	r1, [r4, #56]	; 0x38
    249c:	ldrb	r2, [r4, #57]	; 0x39
    24a0:	ldrb	r3, [r4, #60]	; 0x3c
    24a4:	eor	r1, r1, sl
    24a8:	eor	r2, r2, r6
    24ac:	eor	r3, r3, r9
    24b0:	ldrb	r8, [r4, #62]	; 0x3e
    24b4:	ldrb	ip, [r4, #61]	; 0x3d
    24b8:	eor	sl, sl, r1
    24bc:	eor	r6, r6, r2
    24c0:	eor	r9, r9, r3
    24c4:	eor	r1, r1, sl
    24c8:	eor	r2, r2, r6
    24cc:	eor	r3, r3, r9
    24d0:	ldrb	lr, [sp, #27]
    24d4:	ldrb	r7, [sp, #26]
    24d8:	ldrb	r0, [sp, #24]
    24dc:	strb	r1, [r4, #56]	; 0x38
    24e0:	strb	sl, [r4, #59]	; 0x3b
    24e4:	ldrb	r1, [sp, #25]
    24e8:	ldrb	sl, [sp, #30]
    24ec:	strb	r2, [r4, #57]	; 0x39
    24f0:	strb	r6, [r4, #58]	; 0x3a
    24f4:	ldrb	r2, [sp, #28]
    24f8:	ldrb	r6, [sp, #31]
    24fc:	strb	r3, [r4, #60]	; 0x3c
    2500:	ldrb	r3, [sp, #29]
    2504:	eor	ip, ip, r8
    2508:	eor	r8, r8, ip
    250c:	eor	r0, r0, lr
    2510:	eor	ip, ip, r8
    2514:	eor	r1, r1, r7
    2518:	eor	r2, r2, r6
    251c:	eor	r3, r3, sl
    2520:	eor	lr, lr, r0
    2524:	eor	r7, r7, r1
    2528:	eor	r6, r6, r2
    252c:	strb	ip, [r4, #61]	; 0x3d
    2530:	eor	ip, sl, r3
    2534:	eor	r3, r3, ip
    2538:	eor	r0, r0, lr
    253c:	eor	r1, r1, r7
    2540:	eor	r2, r2, r6
    2544:	strb	r0, [sp, #24]
    2548:	strb	r1, [sp, #25]
    254c:	strb	r2, [sp, #28]
    2550:	strb	r3, [sp, #29]
    2554:	strb	r9, [r4, #63]	; 0x3f
    2558:	strb	r8, [r4, #62]	; 0x3e
    255c:	strb	lr, [sp, #27]
    2560:	strb	r7, [sp, #26]
    2564:	strb	r6, [sp, #31]
    2568:	strb	ip, [sp, #30]
    256c:	ldrb	ip, [r4, #67]	; 0x43
    2570:	ldrb	r0, [r4, #66]	; 0x42
    2574:	ldrb	r1, [r4, #64]	; 0x40
    2578:	ldrb	r3, [r4, #65]	; 0x41
    257c:	ldr	r2, [sp, #24]
    2580:	eor	r1, r1, ip
    2584:	eor	r3, r3, r0
    2588:	eor	ip, ip, r1
    258c:	eor	r0, r0, r3
    2590:	eor	r1, r1, ip
    2594:	eor	r3, r3, r0
    2598:	cmp	r2, #16
    259c:	strb	r1, [r4, #64]	; 0x40
    25a0:	strb	ip, [r4, #67]	; 0x43
    25a4:	strb	r3, [r4, #65]	; 0x41
    25a8:	strb	r0, [r4, #66]	; 0x42
    25ac:	bhi	2910 <coda_cdf_reopen+0x760>
    25b0:	mov	r0, #1
    25b4:	ldr	r3, [pc, #1212]	; 2a78 <coda_cdf_reopen+0x8c8>
    25b8:	lsl	r1, r0, r2
    25bc:	and	r3, r3, r1
    25c0:	cmp	r3, #0
    25c4:	beq	28f0 <coda_cdf_reopen+0x740>
    25c8:	mov	r3, #0
    25cc:	str	r3, [r4, #68]	; 0x44
    25d0:	ldr	r3, [sp, #28]
    25d4:	tst	r3, #1
    25d8:	movne	r2, #0
    25dc:	moveq	r2, #1
    25e0:	tst	r3, #2
    25e4:	str	r2, [r4, #72]	; 0x48
    25e8:	beq	29ac <coda_cdf_reopen+0x7fc>
    25ec:	ldrd	sl, [sp, #48]	; 0x30
    25f0:	and	r3, r3, #12
    25f4:	mov	r6, #4
    25f8:	mov	r7, #0
    25fc:	adds	r2, sl, #8
    2600:	add	r1, sp, #32
    2604:	sub	r3, r3, #12
    2608:	clz	r3, r3
    260c:	lsr	r3, r3, #5
    2610:	str	r3, [r4, #76]	; 0x4c
    2614:	ldr	r0, [r4, #52]	; 0x34
    2618:	adc	r3, fp, #0
    261c:	strd	r6, [sp]
    2620:	str	r1, [sp, #8]
    2624:	bl	78 <read_bytes>
    2628:	cmp	r0, #0
    262c:	blt	291c <coda_cdf_reopen+0x76c>
    2630:	ldrb	r0, [sp, #35]	; 0x23
    2634:	ldrb	r1, [sp, #34]	; 0x22
    2638:	ldrb	r2, [sp, #32]
    263c:	ldrb	r3, [sp, #33]	; 0x21
    2640:	eor	r2, r2, r0
    2644:	eor	r3, r3, r1
    2648:	eor	r0, r0, r2
    264c:	eor	r1, r1, r3
    2650:	eor	r2, r2, r0
    2654:	eor	r3, r3, r1
    2658:	strb	r2, [sp, #32]
    265c:	strb	r0, [sp, #35]	; 0x23
    2660:	strb	r3, [sp, #33]	; 0x21
    2664:	strb	r1, [sp, #34]	; 0x22
    2668:	ldr	r2, [sp, #32]
    266c:	cmp	r2, #2
    2670:	bne	298c <coda_cdf_reopen+0x7dc>
    2674:	mov	r6, #8
    2678:	mov	r7, #0
    267c:	adds	r2, sl, #12
    2680:	add	r8, sp, #56	; 0x38
    2684:	ldr	r0, [r4, #52]	; 0x34
    2688:	adc	r3, fp, #0
    268c:	strd	r6, [sp]
    2690:	str	r8, [sp, #8]
    2694:	bl	78 <read_bytes>
    2698:	cmp	r0, #0
    269c:	blt	291c <coda_cdf_reopen+0x76c>
    26a0:	adds	r2, sl, #20
    26a4:	add	r9, sp, #64	; 0x40
    26a8:	ldr	r0, [r4, #52]	; 0x34
    26ac:	adc	r3, fp, #0
    26b0:	strd	r6, [sp]
    26b4:	str	r9, [sp, #8]
    26b8:	bl	78 <read_bytes>
    26bc:	cmp	r0, #0
    26c0:	blt	291c <coda_cdf_reopen+0x76c>
    26c4:	adds	r2, sl, #28
    26c8:	add	r3, sp, #72	; 0x48
    26cc:	ldr	r0, [r4, #52]	; 0x34
    26d0:	str	r3, [sp, #8]
    26d4:	strd	r6, [sp]
    26d8:	adc	r3, fp, #0
    26dc:	bl	78 <read_bytes>
    26e0:	cmp	r0, #0
    26e4:	blt	291c <coda_cdf_reopen+0x76c>
    26e8:	adds	r2, sl, #36	; 0x24
    26ec:	add	r3, sp, #80	; 0x50
    26f0:	ldr	r0, [r4, #52]	; 0x34
    26f4:	str	r3, [sp, #8]
    26f8:	strd	r6, [sp]
    26fc:	adc	r3, fp, #0
    2700:	bl	78 <read_bytes>
    2704:	cmp	r0, #0
    2708:	blt	291c <coda_cdf_reopen+0x76c>
    270c:	mov	r6, #4
    2710:	mov	r7, #0
    2714:	adds	r2, sl, #44	; 0x2c
    2718:	add	r3, sp, #36	; 0x24
    271c:	ldr	r0, [r4, #52]	; 0x34
    2720:	str	r3, [sp, #8]
    2724:	strd	r6, [sp]
    2728:	adc	r3, fp, #0
    272c:	bl	78 <read_bytes>
    2730:	cmp	r0, #0
    2734:	blt	291c <coda_cdf_reopen+0x76c>
    2738:	adds	r2, sl, #48	; 0x30
    273c:	add	r3, sp, #40	; 0x28
    2740:	ldr	r0, [r4, #52]	; 0x34
    2744:	str	r3, [sp, #8]
    2748:	strd	r6, [sp]
    274c:	adc	r3, fp, #0
    2750:	bl	78 <read_bytes>
    2754:	cmp	r0, #0
    2758:	blt	291c <coda_cdf_reopen+0x76c>
    275c:	adds	r2, sl, #56	; 0x38
    2760:	add	r3, r4, #80	; 0x50
    2764:	ldr	r0, [r4, #52]	; 0x34
    2768:	str	r3, [sp, #8]
    276c:	strd	r6, [sp]
    2770:	adc	r3, fp, #0
    2774:	bl	78 <read_bytes>
    2778:	cmp	r0, #0
    277c:	blt	291c <coda_cdf_reopen+0x76c>
    2780:	adds	r2, sl, #60	; 0x3c
    2784:	add	r1, sp, #44	; 0x2c
    2788:	ldr	r0, [r4, #52]	; 0x34
    278c:	adc	r3, fp, #0
    2790:	strd	r6, [sp]
    2794:	str	r1, [sp, #8]
    2798:	bl	78 <read_bytes>
    279c:	cmp	r0, #0
    27a0:	blt	291c <coda_cdf_reopen+0x76c>
    27a4:	mov	r0, r8
    27a8:	bl	0 <swap8>
    27ac:	mov	r0, r9
    27b0:	bl	0 <swap8>
    27b4:	add	r0, sp, #72	; 0x48
    27b8:	bl	0 <swap8>
    27bc:	add	r0, sp, #80	; 0x50
    27c0:	bl	0 <swap8>
    27c4:	ldrb	sl, [sp, #39]	; 0x27
    27c8:	ldrb	r6, [sp, #38]	; 0x26
    27cc:	ldrb	r9, [sp, #43]	; 0x2b
    27d0:	ldrb	r1, [sp, #36]	; 0x24
    27d4:	ldrb	r2, [sp, #37]	; 0x25
    27d8:	ldrb	r3, [sp, #40]	; 0x28
    27dc:	eor	r1, r1, sl
    27e0:	eor	r2, r2, r6
    27e4:	eor	r3, r3, r9
    27e8:	ldrb	r8, [sp, #42]	; 0x2a
    27ec:	ldrb	ip, [sp, #41]	; 0x29
    27f0:	eor	sl, sl, r1
    27f4:	eor	r6, r6, r2
    27f8:	eor	r9, r9, r3
    27fc:	eor	r1, r1, sl
    2800:	eor	r2, r2, r6
    2804:	eor	r3, r3, r9
    2808:	ldrb	lr, [r4, #83]	; 0x53
    280c:	ldrb	r7, [r4, #82]	; 0x52
    2810:	ldrb	r0, [r4, #80]	; 0x50
    2814:	strb	r1, [sp, #36]	; 0x24
    2818:	strb	sl, [sp, #39]	; 0x27
    281c:	ldrb	r1, [r4, #81]	; 0x51
    2820:	ldrb	sl, [sp, #46]	; 0x2e
    2824:	strb	r2, [sp, #37]	; 0x25
    2828:	strb	r6, [sp, #38]	; 0x26
    282c:	ldrb	r2, [sp, #44]	; 0x2c
    2830:	ldrb	r6, [sp, #47]	; 0x2f
    2834:	strb	r3, [sp, #40]	; 0x28
    2838:	ldrb	r3, [sp, #45]	; 0x2d
    283c:	eor	ip, ip, r8
    2840:	eor	r8, r8, ip
    2844:	eor	r0, r0, lr
    2848:	eor	ip, ip, r8
    284c:	eor	r1, r1, r7
    2850:	eor	r2, r2, r6
    2854:	eor	r3, r3, sl
    2858:	eor	lr, lr, r0
    285c:	eor	r7, r7, r1
    2860:	eor	r6, r6, r2
    2864:	strb	ip, [sp, #41]	; 0x29
    2868:	eor	ip, sl, r3
    286c:	eor	r0, r0, lr
    2870:	eor	r1, r1, r7
    2874:	eor	r2, r2, r6
    2878:	eor	r3, r3, ip
    287c:	strb	r2, [sp, #44]	; 0x2c
    2880:	strb	r3, [sp, #45]	; 0x2d
    2884:	strb	r9, [sp, #43]	; 0x2b
    2888:	strb	r8, [sp, #42]	; 0x2a
    288c:	strb	r0, [r4, #80]	; 0x50
    2890:	strb	lr, [r4, #83]	; 0x53
    2894:	strb	r1, [r4, #81]	; 0x51
    2898:	strb	r7, [r4, #82]	; 0x52
    289c:	strb	r6, [sp, #47]	; 0x2f
    28a0:	strb	ip, [sp, #46]	; 0x2e
    28a4:	ldrd	r0, [sp, #80]	; 0x50
    28a8:	ldrd	r2, [r4, #8]
    28ac:	cmp	r3, r1
    28b0:	cmpeq	r2, r0
    28b4:	bne	29bc <coda_cdf_reopen+0x80c>
    28b8:	ldrd	r2, [sp, #56]	; 0x38
    28bc:	orrs	r1, r2, r3
    28c0:	bne	2960 <coda_cdf_reopen+0x7b0>
    28c4:	ldrd	r2, [sp, #64]	; 0x40
    28c8:	orrs	r1, r2, r3
    28cc:	bne	2934 <coda_cdf_reopen+0x784>
    28d0:	ldrd	r2, [sp, #72]	; 0x48
    28d4:	mov	r0, r4
    28d8:	bl	c30 <read_ADR>
    28dc:	cmp	r0, #0
    28e0:	streq	r4, [r5]
    28e4:	bne	291c <coda_cdf_reopen+0x76c>
    28e8:	add	sp, sp, #148	; 0x94
    28ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28f0:	ldr	r3, [pc, #388]	; 2a7c <coda_cdf_reopen+0x8cc>
    28f4:	and	r3, r3, r1
    28f8:	cmp	r3, #0
    28fc:	bne	292c <coda_cdf_reopen+0x77c>
    2900:	ldr	r3, [pc, #376]	; 2a80 <coda_cdf_reopen+0x8d0>
    2904:	and	r3, r3, r1
    2908:	cmp	r3, #0
    290c:	bne	297c <coda_cdf_reopen+0x7cc>
    2910:	ldr	r1, [pc, #364]	; 2a84 <coda_cdf_reopen+0x8d4>
    2914:	mvn	r0, #199	; 0xc7
    2918:	bl	0 <coda_set_error>
    291c:	mov	r0, r4
    2920:	bl	2158 <coda_cdf_close>
    2924:	mvn	r0, #0
    2928:	b	28e8 <coda_cdf_reopen+0x738>
    292c:	str	r0, [r4, #68]	; 0x44
    2930:	b	25d0 <coda_cdf_reopen+0x420>
    2934:	mov	r1, #1
    2938:	str	r1, [sp]
    293c:	mov	r0, r4
    2940:	bl	185c <read_VDR.part.2>
    2944:	cmp	r0, #0
    2948:	beq	28d0 <coda_cdf_reopen+0x720>
    294c:	b	291c <coda_cdf_reopen+0x76c>
    2950:	ldr	r1, [pc, #304]	; 2a88 <coda_cdf_reopen+0x8d8>
    2954:	ldr	r0, [pc, #304]	; 2a8c <coda_cdf_reopen+0x8dc>
    2958:	bl	0 <coda_set_error>
    295c:	b	291c <coda_cdf_reopen+0x76c>
    2960:	mov	r1, #0
    2964:	str	r1, [sp]
    2968:	mov	r0, r4
    296c:	bl	185c <read_VDR.part.2>
    2970:	cmp	r0, #0
    2974:	beq	28c4 <coda_cdf_reopen+0x714>
    2978:	b	291c <coda_cdf_reopen+0x76c>
    297c:	ldr	r1, [pc, #268]	; 2a90 <coda_cdf_reopen+0x8e0>
    2980:	mvn	r0, #199	; 0xc7
    2984:	bl	0 <coda_set_error>
    2988:	b	291c <coda_cdf_reopen+0x76c>
    298c:	ldr	r1, [pc, #256]	; 2a94 <coda_cdf_reopen+0x8e4>
    2990:	ldr	r0, [pc, #244]	; 2a8c <coda_cdf_reopen+0x8dc>
    2994:	bl	0 <coda_set_error>
    2998:	b	291c <coda_cdf_reopen+0x76c>
    299c:	ldr	r1, [pc, #244]	; 2a98 <coda_cdf_reopen+0x8e8>
    29a0:	mvn	r0, #199	; 0xc7
    29a4:	bl	0 <coda_set_error>
    29a8:	b	291c <coda_cdf_reopen+0x76c>
    29ac:	ldr	r1, [pc, #232]	; 2a9c <coda_cdf_reopen+0x8ec>
    29b0:	mvn	r0, #199	; 0xc7
    29b4:	bl	0 <coda_set_error>
    29b8:	b	291c <coda_cdf_reopen+0x76c>
    29bc:	add	r2, sp, #96	; 0x60
    29c0:	bl	0 <coda_str64>
    29c4:	ldrd	r0, [r4, #8]
    29c8:	add	r2, sp, #120	; 0x78
    29cc:	bl	0 <coda_str64>
    29d0:	add	r3, sp, #120	; 0x78
    29d4:	add	r2, sp, #96	; 0x60
    29d8:	ldr	r1, [pc, #192]	; 2aa0 <coda_cdf_reopen+0x8f0>
    29dc:	ldr	r0, [pc, #168]	; 2a8c <coda_cdf_reopen+0x8dc>
    29e0:	bl	0 <coda_set_error>
    29e4:	b	291c <coda_cdf_reopen+0x76c>
    29e8:	ldr	r2, [pc, #180]	; 2aa4 <coda_cdf_reopen+0x8f4>
    29ec:	ldr	r3, [pc, #180]	; 2aa8 <coda_cdf_reopen+0x8f8>
    29f0:	str	r2, [sp]
    29f4:	ldr	r1, [pc, #176]	; 2aac <coda_cdf_reopen+0x8fc>
    29f8:	mov	r2, #120	; 0x78
    29fc:	mvn	r0, #0
    2a00:	bl	0 <coda_set_error>
    2a04:	ldr	r0, [r5]
    2a08:	bl	0 <coda_close>
    2a0c:	mvn	r0, #0
    2a10:	b	28e8 <coda_cdf_reopen+0x738>
    2a14:	ldr	r3, [pc, #148]	; 2ab0 <coda_cdf_reopen+0x900>
    2a18:	ldr	r2, [pc, #136]	; 2aa8 <coda_cdf_reopen+0x8f8>
    2a1c:	ldr	r1, [pc, #144]	; 2ab4 <coda_cdf_reopen+0x904>
    2a20:	mvn	r0, #0
    2a24:	bl	0 <coda_set_error>
    2a28:	mov	r0, r4
    2a2c:	bl	2158 <coda_cdf_close>
    2a30:	mvn	r0, #0
    2a34:	b	28e8 <coda_cdf_reopen+0x738>
    2a38:	mov	r0, r4
    2a3c:	bl	2158 <coda_cdf_close>
    2a40:	mov	r0, r6
    2a44:	bl	0 <coda_type_release>
    2a48:	mvn	r0, #0
    2a4c:	b	28e8 <coda_cdf_reopen+0x738>
    2a50:	ldr	r3, [pc, #96]	; 2ab8 <coda_cdf_reopen+0x908>
    2a54:	ldr	r2, [pc, #96]	; 2abc <coda_cdf_reopen+0x90c>
    2a58:	ldr	r1, [pc, #72]	; 2aa8 <coda_cdf_reopen+0x8f8>
    2a5c:	ldr	r0, [pc, #92]	; 2ac0 <coda_cdf_reopen+0x910>
    2a60:	bl	0 <__assert_fail>
    2a64:	.word	0xcdf26002
    2a68:	.word	0x0000ffff
    2a6c:	.word	0xcccc0001
    2a70:	.word	0x000006ec
    2a74:	.word	0xcdf30001
    2a78:	.word	0x00001aa6
    2a7c:	.word	0x00012050
    2a80:	.word	0x0000c008
    2a84:	.word	0x000007f4
    2a88:	.word	0x00000754
    2a8c:	.word	0xfffffed4
    2a90:	.word	0x0000078c
    2a94:	.word	0x0000083c
    2a98:	.word	0x000006b8
    2a9c:	.word	0x0000081c
    2aa0:	.word	0x00000874
    2aa4:	.word	0x00000523
    2aa8:	.word	0x00000128
    2aac:	.word	0x00000170
    2ab0:	.word	0x00000537
    2ab4:	.word	0x0000067c
    2ab8:	.word	0x00000034
    2abc:	.word	0x00000552
    2ac0:	.word	0x00000720
