
../compcert-repos/prog2/Extras_cores:     file format elf32-littlearm


Disassembly of section .init:

00010534 <.init>:
   10534:	push	{r3, lr}
   10538:	bl	1062c <_start@@Base+0x3c>
   1053c:	pop	{r3, pc}

Disassembly of section .plt:

00010540 <printf@plt-0x14>:
   10540:	push	{lr}		; (str lr, [sp, #-4]!)
   10544:	ldr	lr, [pc, #4]	; 10550 <printf@plt-0x4>
   10548:	add	lr, pc, lr
   1054c:	ldr	pc, [lr, #8]!
   10550:			; <UNDEFINED> instruction: 0x00010ab0

00010554 <printf@plt>:
   10554:	add	ip, pc, #0, 12
   10558:	add	ip, ip, #16, 20	; 0x10000
   1055c:	ldr	pc, [ip, #2736]!	; 0xab0

00010560 <__libc_start_main@plt>:
   10560:	add	ip, pc, #0, 12
   10564:	add	ip, ip, #16, 20	; 0x10000
   10568:	ldr	pc, [ip, #2728]!	; 0xaa8

0001056c <__gmon_start__@plt>:
   1056c:	add	ip, pc, #0, 12
   10570:	add	ip, ip, #16, 20	; 0x10000
   10574:	ldr	pc, [ip, #2720]!	; 0xaa0

00010578 <abort@plt>:
   10578:	add	ip, pc, #0, 12
   1057c:	add	ip, ip, #16, 20	; 0x10000
   10580:	ldr	pc, [ip, #2712]!	; 0xa98

Disassembly of section .text:

00010584 <main@@Base>:
   10584:	push	{r4, lr}
   10588:	ldr	r0, [pc, #64]	; 105d0 <main@@Base+0x4c>
   1058c:	bl	10554 <printf@plt>
   10590:	ldr	r0, [pc, #60]	; 105d4 <main@@Base+0x50>
   10594:	bl	10554 <printf@plt>
   10598:	ldr	r0, [pc, #56]	; 105d8 <main@@Base+0x54>
   1059c:	bl	10554 <printf@plt>
   105a0:	ldr	r0, [pc, #52]	; 105dc <main@@Base+0x58>
   105a4:	bl	10554 <printf@plt>
   105a8:	ldr	r0, [pc, #48]	; 105e0 <main@@Base+0x5c>
   105ac:	bl	10554 <printf@plt>
   105b0:	ldr	r0, [pc, #44]	; 105e4 <main@@Base+0x60>
   105b4:	bl	10554 <printf@plt>
   105b8:	ldr	r0, [pc, #40]	; 105e8 <main@@Base+0x64>
   105bc:	bl	10554 <printf@plt>
   105c0:	ldr	r0, [pc, #36]	; 105ec <main@@Base+0x68>
   105c4:	bl	10554 <printf@plt>
   105c8:	mov	r0, #0
   105cc:	pop	{r4, pc}
   105d0:	andeq	r0, r1, r8, lsl #15
   105d4:	muleq	r1, r8, r7
   105d8:	andeq	r0, r1, r8, lsr #15
   105dc:			; <UNDEFINED> instruction: 0x000107bc
   105e0:	andeq	r0, r1, ip, asr #15
   105e4:	andeq	r0, r1, r0, ror #15
   105e8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   105ec:	andeq	r0, r1, r0, lsl #16

000105f0 <_start@@Base>:
   105f0:	mov	fp, #0
   105f4:	mov	lr, #0
   105f8:	pop	{r1}		; (ldr r1, [sp], #4)
   105fc:	mov	r2, sp
   10600:	push	{r2}		; (str r2, [sp, #-4]!)
   10604:	push	{r0}		; (str r0, [sp, #-4]!)
   10608:	ldr	ip, [pc, #16]	; 10620 <_start@@Base+0x30>
   1060c:	push	{ip}		; (str ip, [sp, #-4]!)
   10610:	ldr	r0, [pc, #12]	; 10624 <_start@@Base+0x34>
   10614:	ldr	r3, [pc, #12]	; 10628 <_start@@Base+0x38>
   10618:	bl	10560 <__libc_start_main@plt>
   1061c:	bl	10578 <abort@plt>
   10620:	andeq	r0, r1, r8, ror r7
   10624:	andeq	r0, r1, r4, lsl #11
   10628:	andeq	r0, r1, r8, lsl r7
   1062c:	ldr	r3, [pc, #20]	; 10648 <_start@@Base+0x58>
   10630:	ldr	r2, [pc, #20]	; 1064c <_start@@Base+0x5c>
   10634:	add	r3, pc, r3
   10638:	ldr	r2, [r3, r2]
   1063c:	cmp	r2, #0
   10640:	bxeq	lr
   10644:	b	1056c <__gmon_start__@plt>
   10648:	andeq	r0, r1, r4, asr #19
   1064c:	andeq	r0, r0, ip, lsl r0
   10650:	ldr	r3, [pc, #28]	; 10674 <_start@@Base+0x84>
   10654:	ldr	r0, [pc, #28]	; 10678 <_start@@Base+0x88>
   10658:	sub	r3, r3, r0
   1065c:	cmp	r3, #6
   10660:	bxls	lr
   10664:	ldr	r3, [pc, #16]	; 1067c <_start@@Base+0x8c>
   10668:	cmp	r3, #0
   1066c:	bxeq	lr
   10670:	bx	r3
   10674:	andeq	r1, r2, fp, lsr #32
   10678:	andeq	r1, r2, r8, lsr #32
   1067c:	andeq	r0, r0, r0
   10680:	ldr	r1, [pc, #36]	; 106ac <_start@@Base+0xbc>
   10684:	ldr	r0, [pc, #36]	; 106b0 <_start@@Base+0xc0>
   10688:	sub	r1, r1, r0
   1068c:	asr	r1, r1, #2
   10690:	add	r1, r1, r1, lsr #31
   10694:	asrs	r1, r1, #1
   10698:	bxeq	lr
   1069c:	ldr	r3, [pc, #16]	; 106b4 <_start@@Base+0xc4>
   106a0:	cmp	r3, #0
   106a4:	bxeq	lr
   106a8:	bx	r3
   106ac:	andeq	r1, r2, r8, lsr #32
   106b0:	andeq	r1, r2, r8, lsr #32
   106b4:	andeq	r0, r0, r0
   106b8:	push	{r4, lr}
   106bc:	ldr	r4, [pc, #24]	; 106dc <_start@@Base+0xec>
   106c0:	ldrb	r3, [r4]
   106c4:	cmp	r3, #0
   106c8:	popne	{r4, pc}
   106cc:	bl	10650 <_start@@Base+0x60>
   106d0:	mov	r3, #1
   106d4:	strb	r3, [r4]
   106d8:	pop	{r4, pc}
   106dc:	andeq	r1, r2, r8, lsr #32
   106e0:	ldr	r0, [pc, #40]	; 10710 <_start@@Base+0x120>
   106e4:	ldr	r3, [r0]
   106e8:	cmp	r3, #0
   106ec:	bne	106f4 <_start@@Base+0x104>
   106f0:	b	10680 <_start@@Base+0x90>
   106f4:	ldr	r3, [pc, #24]	; 10714 <_start@@Base+0x124>
   106f8:	cmp	r3, #0
   106fc:	beq	106f0 <_start@@Base+0x100>
   10700:	push	{r4, lr}
   10704:	blx	r3
   10708:	pop	{r4, lr}
   1070c:	b	10680 <_start@@Base+0x90>
   10710:	andeq	r0, r2, r4, lsl pc
   10714:	andeq	r0, r0, r0

00010718 <__libc_csu_init@@Base>:
   10718:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1071c:	mov	r7, r0
   10720:	ldr	r6, [pc, #72]	; 10770 <__libc_csu_init@@Base+0x58>
   10724:	ldr	r5, [pc, #72]	; 10774 <__libc_csu_init@@Base+0x5c>
   10728:	add	r6, pc, r6
   1072c:	add	r5, pc, r5
   10730:	sub	r6, r6, r5
   10734:	mov	r8, r1
   10738:	mov	r9, r2
   1073c:	bl	10534 <printf@plt-0x20>
   10740:	asrs	r6, r6, #2
   10744:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10748:	mov	r4, #0
   1074c:	add	r4, r4, #1
   10750:	ldr	r3, [r5], #4
   10754:	mov	r2, r9
   10758:	mov	r1, r8
   1075c:	mov	r0, r7
   10760:	blx	r3
   10764:	cmp	r6, r4
   10768:	bne	1074c <__libc_csu_init@@Base+0x34>
   1076c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10770:	andeq	r0, r1, r0, ror #15
   10774:	ldrdeq	r0, [r1], -r8

00010778 <__libc_csu_fini@@Base>:
   10778:	bx	lr

Disassembly of section .fini:

0001077c <.fini>:
   1077c:	push	{r3, lr}
   10780:	pop	{r3, pc}
