
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacheck.dir/tools/codacheck/codacheck.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_help>:
   0:	push	{r4, lr}
   4:	ldr	r0, [pc, #260]	; 110 <print_help+0x110>
   8:	bl	0 <puts>
   c:	ldr	r0, [pc, #256]	; 114 <print_help+0x114>
  10:	bl	0 <puts>
  14:	ldr	r0, [pc, #252]	; 118 <print_help+0x118>
  18:	bl	0 <puts>
  1c:	ldr	r0, [pc, #248]	; 11c <print_help+0x11c>
  20:	bl	0 <puts>
  24:	ldr	r0, [pc, #244]	; 120 <print_help+0x120>
  28:	bl	0 <puts>
  2c:	ldr	r0, [pc, #240]	; 124 <print_help+0x124>
  30:	bl	0 <puts>
  34:	ldr	r0, [pc, #236]	; 128 <print_help+0x128>
  38:	bl	0 <puts>
  3c:	ldr	r0, [pc, #232]	; 12c <print_help+0x12c>
  40:	bl	0 <puts>
  44:	ldr	r0, [pc, #228]	; 130 <print_help+0x130>
  48:	bl	0 <puts>
  4c:	ldr	r0, [pc, #224]	; 134 <print_help+0x134>
  50:	bl	0 <puts>
  54:	ldr	r0, [pc, #220]	; 138 <print_help+0x138>
  58:	bl	0 <puts>
  5c:	ldr	r0, [pc, #216]	; 13c <print_help+0x13c>
  60:	bl	0 <puts>
  64:	ldr	r0, [pc, #212]	; 140 <print_help+0x140>
  68:	bl	0 <puts>
  6c:	ldr	r0, [pc, #208]	; 144 <print_help+0x144>
  70:	bl	0 <puts>
  74:	ldr	r0, [pc, #204]	; 148 <print_help+0x148>
  78:	bl	0 <puts>
  7c:	mov	r0, #10
  80:	bl	0 <putchar>
  84:	ldr	r0, [pc, #192]	; 14c <print_help+0x14c>
  88:	bl	0 <puts>
  8c:	ldr	r0, [pc, #188]	; 150 <print_help+0x150>
  90:	bl	0 <puts>
  94:	mov	r0, #10
  98:	bl	0 <putchar>
  9c:	ldr	r0, [pc, #176]	; 154 <print_help+0x154>
  a0:	bl	0 <puts>
  a4:	ldr	r0, [pc, #172]	; 158 <print_help+0x158>
  a8:	bl	0 <puts>
  ac:	mov	r0, #10
  b0:	bl	0 <putchar>
  b4:	ldr	r0, [pc, #160]	; 15c <print_help+0x15c>
  b8:	bl	0 <puts>
  bc:	ldr	r0, [pc, #156]	; 160 <print_help+0x160>
  c0:	bl	0 <puts>
  c4:	mov	r0, #10
  c8:	bl	0 <putchar>
  cc:	ldr	r0, [pc, #144]	; 164 <print_help+0x164>
  d0:	bl	0 <puts>
  d4:	ldr	r0, [pc, #140]	; 168 <print_help+0x168>
  d8:	bl	0 <puts>
  dc:	ldr	r0, [pc, #136]	; 16c <print_help+0x16c>
  e0:	bl	0 <puts>
  e4:	ldr	r0, [pc, #132]	; 170 <print_help+0x170>
  e8:	bl	0 <puts>
  ec:	ldr	r0, [pc, #128]	; 174 <print_help+0x174>
  f0:	bl	0 <puts>
  f4:	ldr	r0, [pc, #124]	; 178 <print_help+0x178>
  f8:	bl	0 <puts>
  fc:	ldr	r0, [pc, #120]	; 17c <print_help+0x17c>
 100:	bl	0 <puts>
 104:	mov	r0, #10
 108:	pop	{r4, lr}
 10c:	b	0 <putchar>
 110:	.word	0x00000000
 114:	.word	0x00000008
 118:	.word	0x00000040
 11c:	.word	0x00000088
 120:	.word	0x0000009c
 124:	.word	0x000000bc
 128:	.word	0x0000010c
 12c:	.word	0x00000154
 130:	.word	0x000001a0
 134:	.word	0x000001b8
 138:	.word	0x000001f8
 13c:	.word	0x00000230
 140:	.word	0x0000024c
 144:	.word	0x00000294
 148:	.word	0x000002ac
 14c:	.word	0x000002ec
 150:	.word	0x0000033c
 154:	.word	0x00000358
 158:	.word	0x00000374
 15c:	.word	0x00000394
 160:	.word	0x000003b0
 164:	.word	0x000003e4
 168:	.word	0x00000434
 16c:	.word	0x00000480
 170:	.word	0x000004ac
 174:	.word	0x000004f8
 178:	.word	0x00000540
 17c:	.word	0x00000580

00000180 <check_file>:
 180:	push	{r4, lr}
 184:	sub	sp, sp, #40	; 0x28
 188:	mov	r4, r0
 18c:	bl	0 <puts>
 190:	add	r2, sp, #28
 194:	add	r3, sp, #24
 198:	str	r2, [sp, #4]
 19c:	str	r3, [sp]
 1a0:	mov	r0, r4
 1a4:	add	r3, sp, #20
 1a8:	add	r2, sp, #16
 1ac:	add	r1, sp, #32
 1b0:	bl	0 <coda_recognize_file>
 1b4:	cmp	r0, #0
 1b8:	bne	264 <check_file+0xe4>
 1bc:	ldr	r3, [pc, #480]	; 3a4 <check_file+0x224>
 1c0:	ldr	r3, [r3]
 1c4:	cmp	r3, #0
 1c8:	beq	1e4 <check_file+0x64>
 1cc:	ldr	r3, [sp, #20]
 1d0:	cmp	r3, #0
 1d4:	beq	31c <check_file+0x19c>
 1d8:	ldr	r3, [sp, #24]
 1dc:	cmp	r3, #0
 1e0:	beq	31c <check_file+0x19c>
 1e4:	ldr	r3, [pc, #444]	; 3a8 <check_file+0x228>
 1e8:	ldr	r3, [r3]
 1ec:	cmp	r3, #0
 1f0:	bne	2d8 <check_file+0x158>
 1f4:	add	r1, sp, #12
 1f8:	mov	r0, r4
 1fc:	bl	0 <coda_open>
 200:	cmp	r0, #0
 204:	bne	29c <check_file+0x11c>
 208:	ldr	r1, [pc, #412]	; 3ac <check_file+0x22c>
 20c:	mov	r3, #0
 210:	ldr	r2, [pc, #408]	; 3b0 <check_file+0x230>
 214:	ldr	r1, [r1]
 218:	ldr	r0, [sp, #12]
 21c:	clz	r1, r1
 220:	lsr	r1, r1, #5
 224:	bl	0 <coda_product_check>
 228:	cmp	r0, #0
 22c:	beq	334 <check_file+0x1b4>
 230:	bl	0 <coda_get_errno>
 234:	ldr	r0, [r0]
 238:	bl	0 <coda_errno_to_string>
 23c:	mov	r1, r0
 240:	ldr	r0, [pc, #364]	; 3b4 <check_file+0x234>
 244:	bl	0 <printf>
 248:	ldr	r3, [pc, #360]	; 3b8 <check_file+0x238>
 24c:	mov	r2, #1
 250:	ldr	r0, [sp, #12]
 254:	str	r2, [r3]
 258:	bl	0 <coda_close>
 25c:	add	sp, sp, #40	; 0x28
 260:	pop	{r4, pc}
 264:	bl	0 <coda_get_errno>
 268:	ldr	r0, [r0]
 26c:	bl	0 <coda_errno_to_string>
 270:	mov	r1, r0
 274:	ldr	r0, [pc, #312]	; 3b4 <check_file+0x234>
 278:	bl	0 <printf>
 27c:	mov	r1, #0
 280:	mov	r0, r1
 284:	bl	0 <coda_set_error>
 288:	ldr	r3, [pc, #296]	; 3b8 <check_file+0x238>
 28c:	mov	r2, #1
 290:	str	r2, [r3]
 294:	add	sp, sp, #40	; 0x28
 298:	pop	{r4, pc}
 29c:	bl	0 <coda_get_errno>
 2a0:	ldr	r3, [r0]
 2a4:	cmn	r3, #21
 2a8:	beq	378 <check_file+0x1f8>
 2ac:	bl	0 <coda_get_errno>
 2b0:	ldr	r0, [r0]
 2b4:	bl	0 <coda_errno_to_string>
 2b8:	mov	r1, r0
 2bc:	ldr	r0, [pc, #240]	; 3b4 <check_file+0x234>
 2c0:	bl	0 <printf>
 2c4:	ldr	r3, [pc, #236]	; 3b8 <check_file+0x238>
 2c8:	mov	r2, #1
 2cc:	str	r2, [r3]
 2d0:	add	sp, sp, #40	; 0x28
 2d4:	pop	{r4, pc}
 2d8:	ldr	r0, [sp, #16]
 2dc:	bl	0 <coda_type_get_format_name>
 2e0:	mov	r1, r0
 2e4:	ldr	r0, [pc, #208]	; 3bc <check_file+0x23c>
 2e8:	bl	0 <printf>
 2ec:	ldr	r1, [sp, #20]
 2f0:	cmp	r1, #0
 2f4:	beq	310 <check_file+0x190>
 2f8:	ldr	r2, [sp, #24]
 2fc:	cmp	r2, #0
 300:	beq	310 <check_file+0x190>
 304:	ldr	r3, [sp, #28]
 308:	ldr	r0, [pc, #176]	; 3c0 <check_file+0x240>
 30c:	bl	0 <printf>
 310:	mov	r0, #10
 314:	bl	0 <putchar>
 318:	b	1f4 <check_file+0x74>
 31c:	ldr	r0, [pc, #160]	; 3c4 <check_file+0x244>
 320:	bl	0 <puts>
 324:	ldr	r3, [pc, #140]	; 3b8 <check_file+0x238>
 328:	mov	r2, #1
 32c:	str	r2, [r3]
 330:	b	25c <check_file+0xdc>
 334:	ldr	r0, [sp, #12]
 338:	bl	0 <coda_close>
 33c:	cmp	r0, #0
 340:	beq	36c <check_file+0x1ec>
 344:	bl	0 <coda_get_errno>
 348:	ldr	r0, [r0]
 34c:	bl	0 <coda_errno_to_string>
 350:	mov	r1, r0
 354:	ldr	r0, [pc, #108]	; 3c8 <check_file+0x248>
 358:	bl	0 <printf>
 35c:	ldr	r3, [pc, #84]	; 3b8 <check_file+0x238>
 360:	mov	r2, #1
 364:	str	r2, [r3]
 368:	b	25c <check_file+0xdc>
 36c:	mov	r0, #10
 370:	bl	0 <putchar>
 374:	b	25c <check_file+0xdc>
 378:	mov	r0, #0
 37c:	bl	0 <coda_set_option_use_mmap>
 380:	add	r1, sp, #12
 384:	mov	r0, r4
 388:	bl	0 <coda_open>
 38c:	mov	r4, r0
 390:	mov	r0, #1
 394:	bl	0 <coda_set_option_use_mmap>
 398:	cmp	r4, #0
 39c:	bne	2ac <check_file+0x12c>
 3a0:	b	208 <check_file+0x88>
	...
 3b4:	.word	0x000005c0
 3b8:	.word	0x00000000
 3bc:	.word	0x000005fc
 3c0:	.word	0x00000614
 3c4:	.word	0x000005d0
 3c8:	.word	0x00000620

000003cc <print_error>:
 3cc:	push	{r4, lr}
 3d0:	mov	r4, r0
 3d4:	ldr	r0, [pc, #52]	; 410 <print_error+0x44>
 3d8:	bl	0 <printf>
 3dc:	cmp	r4, #0
 3e0:	beq	3f8 <print_error+0x2c>
 3e4:	ldr	r0, [pc, #40]	; 414 <print_error+0x48>
 3e8:	bl	0 <printf>
 3ec:	mov	r0, r4
 3f0:	ldr	r1, [pc, #32]	; 418 <print_error+0x4c>
 3f4:	bl	0 <coda_cursor_print_path>
 3f8:	mov	r0, #10
 3fc:	bl	0 <putchar>
 400:	ldr	r3, [pc, #20]	; 41c <print_error+0x50>
 404:	mov	r2, #1
 408:	str	r2, [r3]
 40c:	pop	{r4, pc}
 410:	.word	0x00000630
 414:	.word	0x0000063c
	...

Disassembly of section .text.startup:

00000000 <main>:
   0:	ldr	r2, [pc, #952]	; 3c0 <main+0x3c0>
   4:	mov	r3, #0
   8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c:	sub	sp, sp, #1012	; 0x3f4
  10:	str	r3, [r2]
  14:	ldr	sl, [pc, #936]	; 3c4 <main+0x3c4>
  18:	ldr	r2, [pc, #936]	; 3c8 <main+0x3c8>
  1c:	cmp	r0, #1
  20:	str	r1, [sp]
  24:	str	r3, [sl]
  28:	str	r3, [r2]
  2c:	beq	2a4 <main+0x2a4>
  30:	ldr	r4, [r1, #4]
  34:	mov	r7, r0
  38:	ldr	r1, [pc, #908]	; 3cc <main+0x3cc>
  3c:	mov	r0, r4
  40:	bl	0 <strcmp>
  44:	cmp	r0, #0
  48:	beq	2a4 <main+0x2a4>
  4c:	ldr	r1, [pc, #892]	; 3d0 <main+0x3d0>
  50:	mov	r0, r4
  54:	bl	0 <strcmp>
  58:	cmp	r0, #0
  5c:	beq	2a4 <main+0x2a4>
  60:	ldr	r1, [pc, #876]	; 3d4 <main+0x3d4>
  64:	mov	r0, r4
  68:	bl	0 <strcmp>
  6c:	cmp	r0, #0
  70:	beq	374 <main+0x374>
  74:	ldr	r1, [pc, #860]	; 3d8 <main+0x3d8>
  78:	mov	r0, r4
  7c:	bl	0 <strcmp>
  80:	cmp	r0, #0
  84:	beq	374 <main+0x374>
  88:	cmp	r7, #2
  8c:	ble	a4 <main+0xa4>
  90:	mov	r0, r4
  94:	ldr	r1, [pc, #832]	; 3dc <main+0x3dc>
  98:	bl	0 <strcmp>
  9c:	cmp	r0, #0
  a0:	beq	1e4 <main+0x1e4>
  a4:	ldr	r3, [sp]
  a8:	ldr	r2, [pc, #816]	; 3e0 <main+0x3e0>
  ac:	mov	r1, #0
  b0:	ldr	r0, [r3]
  b4:	bl	0 <coda_set_definition_path_conditional>
  b8:	cmp	r0, #0
  bc:	moveq	r4, #1
  c0:	bne	184 <main+0x184>
  c4:	mov	r3, #1
  c8:	cmp	r7, r4
  cc:	str	r3, [sp, #4]
  d0:	ble	178 <main+0x178>
  d4:	mov	r9, r3
  d8:	ldr	r3, [sp]
  dc:	ldr	r8, [pc, #768]	; 3e4 <main+0x3e4>
  e0:	ldr	fp, [pc, #768]	; 3e8 <main+0x3e8>
  e4:	add	r6, r3, r4, lsl #2
  e8:	ldr	r5, [r6], #4
  ec:	mov	r1, r8
  f0:	mov	r0, r5
  f4:	bl	0 <strcmp>
  f8:	cmp	r0, #0
  fc:	beq	1b0 <main+0x1b0>
 100:	mov	r1, fp
 104:	mov	r0, r5
 108:	bl	0 <strcmp>
 10c:	cmp	r0, #0
 110:	beq	1b0 <main+0x1b0>
 114:	ldr	r1, [pc, #720]	; 3ec <main+0x3ec>
 118:	mov	r0, r5
 11c:	bl	0 <strcmp>
 120:	cmp	r0, #0
 124:	beq	1b8 <main+0x1b8>
 128:	ldr	r1, [pc, #704]	; 3f0 <main+0x3f0>
 12c:	mov	r0, r5
 130:	bl	0 <strcmp>
 134:	cmp	r0, #0
 138:	beq	1b8 <main+0x1b8>
 13c:	ldr	r1, [pc, #688]	; 3f4 <main+0x3f4>
 140:	mov	r0, r5
 144:	bl	0 <strcmp>
 148:	cmp	r0, #0
 14c:	beq	164 <main+0x164>
 150:	ldr	r1, [pc, #672]	; 3f8 <main+0x3f8>
 154:	mov	r0, r5
 158:	bl	0 <strcmp>
 15c:	cmp	r0, #0
 160:	bne	1c4 <main+0x1c4>
 164:	ldr	r3, [pc, #604]	; 3c8 <main+0x3c8>
 168:	str	r9, [r3]
 16c:	add	r4, r4, #1
 170:	cmp	r7, r4
 174:	bne	e8 <main+0xe8>
 178:	bl	0 <coda_init>
 17c:	subs	r4, r0, #0
 180:	beq	1f8 <main+0x1f8>
 184:	ldr	r3, [pc, #624]	; 3fc <main+0x3fc>
 188:	ldr	r4, [r3]
 18c:	bl	0 <coda_get_errno>
 190:	ldr	r0, [r0]
 194:	bl	0 <coda_errno_to_string>
 198:	ldr	r1, [pc, #608]	; 400 <main+0x400>
 19c:	mov	r2, r0
 1a0:	mov	r0, r4
 1a4:	bl	0 <fprintf>
 1a8:	mov	r0, #1
 1ac:	bl	0 <exit>
 1b0:	str	r9, [sl]
 1b4:	b	16c <main+0x16c>
 1b8:	ldr	r3, [pc, #512]	; 3c0 <main+0x3c0>
 1bc:	str	r9, [r3]
 1c0:	b	16c <main+0x16c>
 1c4:	ldr	r1, [pc, #568]	; 404 <main+0x404>
 1c8:	mov	r0, r5
 1cc:	bl	0 <strcmp>
 1d0:	cmp	r0, #0
 1d4:	bne	228 <main+0x228>
 1d8:	mov	r3, #0
 1dc:	str	r3, [sp, #4]
 1e0:	b	16c <main+0x16c>
 1e4:	ldr	r3, [sp]
 1e8:	mov	r4, #3
 1ec:	ldr	r0, [r3, #8]
 1f0:	bl	0 <coda_set_definition_path>
 1f4:	b	c4 <main+0xc4>
 1f8:	bl	0 <coda_set_option_perform_boundary_checks>
 1fc:	mov	r0, r4
 200:	bl	0 <coda_set_option_perform_conversions>
 204:	ldr	r0, [sp, #4]
 208:	bl	0 <coda_set_option_use_mmap>
 20c:	bl	0 <coda_done>
 210:	ldr	r3, [pc, #496]	; 408 <main+0x408>
 214:	ldr	r0, [r3]
 218:	cmp	r0, #0
 21c:	bne	358 <main+0x358>
 220:	add	sp, sp, #1012	; 0x3f4
 224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 228:	ldr	r1, [pc, #476]	; 40c <main+0x40c>
 22c:	mov	r0, r5
 230:	bl	0 <strcmp>
 234:	cmp	r0, #0
 238:	bne	248 <main+0x248>
 23c:	sub	r3, r7, #1
 240:	cmp	r3, r4
 244:	beq	2b0 <main+0x2b0>
 248:	ldrb	r3, [r5]
 24c:	cmp	r3, #45	; 0x2d
 250:	beq	39c <main+0x39c>
 254:	bl	0 <coda_init>
 258:	subs	r6, r0, #0
 25c:	bne	184 <main+0x184>
 260:	bl	0 <coda_set_option_perform_boundary_checks>
 264:	mov	r0, r6
 268:	bl	0 <coda_set_option_perform_conversions>
 26c:	ldr	r0, [sp, #4]
 270:	bl	0 <coda_set_option_use_mmap>
 274:	cmp	r7, r4
 278:	ldrgt	r3, [sp]
 27c:	addgt	r5, r3, r4, lsl #2
 280:	ble	20c <main+0x20c>
 284:	ldr	r0, [r5], #4
 288:	bl	180 <main+0x180>
 28c:	add	r4, r4, #1
 290:	mov	r0, r6
 294:	bl	0 <fflush>
 298:	cmp	r7, r4
 29c:	bne	284 <main+0x284>
 2a0:	b	20c <main+0x20c>
 2a4:	bl	0 <main>
 2a8:	mov	r0, #0
 2ac:	bl	0 <exit>
 2b0:	bl	0 <coda_init>
 2b4:	subs	r7, r0, #0
 2b8:	bne	184 <main+0x184>
 2bc:	mov	r0, #0
 2c0:	bl	0 <coda_set_option_perform_boundary_checks>
 2c4:	mov	r0, #0
 2c8:	bl	0 <coda_set_option_perform_conversions>
 2cc:	ldr	r0, [sp, #4]
 2d0:	bl	0 <coda_set_option_use_mmap>
 2d4:	ldr	r5, [pc, #308]	; 410 <main+0x410>
 2d8:	mov	r6, #0
 2dc:	mov	r4, r7
 2e0:	b	300 <main+0x300>
 2e4:	cmp	r0, #10
 2e8:	beq	330 <main+0x330>
 2ec:	add	r3, sp, #8
 2f0:	strb	r0, [r3, r4]
 2f4:	add	r4, r4, #1
 2f8:	cmp	r4, #1000	; 0x3e8
 2fc:	beq	360 <main+0x360>
 300:	ldr	r0, [r5]
 304:	bl	0 <getc>
 308:	uxtb	r0, r0
 30c:	cmp	r0, #13
 310:	bne	2e4 <main+0x2e4>
 314:	ldr	r0, [r5]
 318:	bl	0 <getc>
 31c:	uxtb	r0, r0
 320:	cmp	r0, #10
 324:	beq	330 <main+0x330>
 328:	ldr	r1, [r5]
 32c:	bl	0 <ungetc>
 330:	add	r3, sp, #1008	; 0x3f0
 334:	add	r3, r3, r4
 338:	cmp	r4, #0
 33c:	strb	r6, [r3, #-1000]	; 0xfffffc18
 340:	beq	2dc <main+0x2dc>
 344:	add	r0, sp, #8
 348:	bl	180 <main+0x180>
 34c:	mov	r0, r6
 350:	bl	0 <fflush>
 354:	b	2dc <main+0x2dc>
 358:	mov	r0, #1
 35c:	bl	0 <exit>
 360:	ldr	r3, [pc, #172]	; 414 <main+0x414>
 364:	mov	r2, #316	; 0x13c
 368:	ldr	r1, [pc, #168]	; 418 <main+0x418>
 36c:	ldr	r0, [pc, #168]	; 41c <main+0x41c>
 370:	bl	0 <__assert_fail>
 374:	bl	0 <coda_get_libcoda_version>
 378:	mov	r1, r0
 37c:	ldr	r0, [pc, #156]	; 420 <main+0x420>
 380:	bl	0 <printf>
 384:	ldr	r0, [pc, #152]	; 424 <main+0x424>
 388:	bl	0 <puts>
 38c:	mov	r0, #10
 390:	bl	0 <putchar>
 394:	mov	r0, #0
 398:	bl	0 <exit>
 39c:	ldr	r3, [pc, #88]	; 3fc <main+0x3fc>
 3a0:	mov	r2, #25
 3a4:	mov	r1, #1
 3a8:	ldr	r3, [r3]
 3ac:	ldr	r0, [pc, #116]	; 428 <main+0x428>
 3b0:	bl	0 <fwrite>
 3b4:	bl	0 <main>
 3b8:	mov	r0, #1
 3bc:	bl	0 <exit>
	...
 3cc:	.word	0x00000644
 3d0:	.word	0x00000648
 3d4:	.word	0x00000650
 3d8:	.word	0x00000654
 3dc:	.word	0x000006a8
 3e0:	.word	0x000006ac
 3e4:	.word	0x000006d4
 3e8:	.word	0x000006d8
 3ec:	.word	0x000006e4
 3f0:	.word	0x000006e8
 3f4:	.word	0x000006f0
 3f8:	.word	0x000006f4
 3fc:	.word	0x00000000
 400:	.word	0x000006c8
 404:	.word	0x00000704
 408:	.word	0x00000000
 40c:	.word	0x00000710
	...
 418:	.word	0x00000730
 41c:	.word	0x00000780
 420:	.word	0x00000660
 424:	.word	0x00000678
 428:	.word	0x00000714
