
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_uint8_cast_to_pe>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #8
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	and	r0, r0, #255	; 0xff
      14:	ldr	lr, [sp, #4]
      18:	add	sp, sp, #8
      1c:	bx	lr

00000020 <flatbuffers_uint8__ptr_add>:
      20:	mov	ip, sp
      24:	sub	sp, sp, #8
      28:	str	ip, [sp]
      2c:	str	lr, [sp, #4]
      30:	add	r0, r0, r1
      34:	ldr	lr, [sp, #4]
      38:	add	sp, sp, #8
      3c:	bx	lr

00000040 <__flatbuffers_uoffset_cast_from_pe>:
      40:	mov	ip, sp
      44:	sub	sp, sp, #8
      48:	str	ip, [sp]
      4c:	str	lr, [sp, #4]
      50:	ldr	lr, [sp, #4]
      54:	add	sp, sp, #8
      58:	bx	lr

0000005c <__flatbuffers_uoffset_read_from_pe>:
      5c:	mov	ip, sp
      60:	sub	sp, sp, #8
      64:	str	ip, [sp]
      68:	str	lr, [sp, #4]
      6c:	ldr	r0, [r0]
      70:	bl	40 <__flatbuffers_uoffset_cast_from_pe>
      74:	ldr	lr, [sp, #4]
      78:	add	sp, sp, #8
      7c:	bx	lr

00000080 <__flatbuffers_soffset_cast_from_pe>:
      80:	mov	ip, sp
      84:	sub	sp, sp, #8
      88:	str	ip, [sp]
      8c:	str	lr, [sp, #4]
      90:	ldr	lr, [sp, #4]
      94:	add	sp, sp, #8
      98:	bx	lr

0000009c <__flatbuffers_soffset_read_from_pe>:
      9c:	mov	ip, sp
      a0:	sub	sp, sp, #8
      a4:	str	ip, [sp]
      a8:	str	lr, [sp, #4]
      ac:	ldr	r0, [r0]
      b0:	bl	80 <__flatbuffers_soffset_cast_from_pe>
      b4:	ldr	lr, [sp, #4]
      b8:	add	sp, sp, #8
      bc:	bx	lr

000000c0 <__flatbuffers_voffset_cast_from_pe>:
      c0:	mov	ip, sp
      c4:	sub	sp, sp, #8
      c8:	str	ip, [sp]
      cc:	str	lr, [sp, #4]
      d0:	bic	r0, r0, #16711680	; 0xff0000
      d4:	bic	r0, r0, #-16777216	; 0xff000000
      d8:	ldr	lr, [sp, #4]
      dc:	add	sp, sp, #8
      e0:	bx	lr

000000e4 <__flatbuffers_voffset_read_from_pe>:
      e4:	mov	ip, sp
      e8:	sub	sp, sp, #8
      ec:	str	ip, [sp]
      f0:	str	lr, [sp, #4]
      f4:	ldrh	r0, [r0]
      f8:	bic	r0, r0, #16711680	; 0xff0000
      fc:	bic	r0, r0, #-16777216	; 0xff000000
     100:	bl	c0 <__flatbuffers_voffset_cast_from_pe>
     104:	bic	r0, r0, #16711680	; 0xff0000
     108:	bic	r0, r0, #-16777216	; 0xff000000
     10c:	ldr	lr, [sp, #4]
     110:	add	sp, sp, #8
     114:	bx	lr

00000118 <__flatbuffers_thash_cast_from_pe>:
     118:	mov	ip, sp
     11c:	sub	sp, sp, #8
     120:	str	ip, [sp]
     124:	str	lr, [sp, #4]
     128:	ldr	lr, [sp, #4]
     12c:	add	sp, sp, #8
     130:	bx	lr

00000134 <__flatbuffers_thash_cast_from_le>:
     134:	mov	ip, sp
     138:	sub	sp, sp, #8
     13c:	str	ip, [sp]
     140:	str	lr, [sp, #4]
     144:	ldr	lr, [sp, #4]
     148:	add	sp, sp, #8
     14c:	bx	lr

00000150 <__flatbuffers_thash_read_from_pe>:
     150:	mov	ip, sp
     154:	sub	sp, sp, #8
     158:	str	ip, [sp]
     15c:	str	lr, [sp, #4]
     160:	ldr	r0, [r0]
     164:	bl	118 <__flatbuffers_thash_cast_from_pe>
     168:	ldr	lr, [sp, #4]
     16c:	add	sp, sp, #8
     170:	bx	lr

00000174 <flatbuffers_vec_len>:
     174:	mov	ip, sp
     178:	sub	sp, sp, #8
     17c:	str	ip, [sp]
     180:	str	lr, [sp, #4]
     184:	cmp	r0, #0
     188:	beq	198 <flatbuffers_vec_len+0x24>
     18c:	sub	r0, r0, #4
     190:	bl	5c <__flatbuffers_uoffset_read_from_pe>
     194:	b	19c <flatbuffers_vec_len+0x28>
     198:	mov	r0, #0
     19c:	ldr	lr, [sp, #4]
     1a0:	add	sp, sp, #8
     1a4:	bx	lr

000001a8 <flatbuffers_string_len>:
     1a8:	mov	ip, sp
     1ac:	sub	sp, sp, #8
     1b0:	str	ip, [sp]
     1b4:	str	lr, [sp, #4]
     1b8:	cmp	r0, #0
     1bc:	beq	1cc <flatbuffers_string_len+0x24>
     1c0:	sub	r0, r0, #4
     1c4:	bl	5c <__flatbuffers_uoffset_read_from_pe>
     1c8:	b	1d0 <flatbuffers_string_len+0x28>
     1cc:	mov	r0, #0
     1d0:	ldr	lr, [sp, #4]
     1d4:	add	sp, sp, #8
     1d8:	bx	lr

000001dc <flatbuffers_uint8_vec_len>:
     1dc:	mov	ip, sp
     1e0:	sub	sp, sp, #8
     1e4:	str	ip, [sp]
     1e8:	str	lr, [sp, #4]
     1ec:	bl	174 <flatbuffers_vec_len>
     1f0:	ldr	lr, [sp, #4]
     1f4:	add	sp, sp, #8
     1f8:	bx	lr

000001fc <flatbuffers_has_identifier>:
     1fc:	mov	ip, sp
     200:	sub	sp, sp, #24
     204:	str	ip, [sp]
     208:	str	lr, [sp, #4]
     20c:	str	r4, [sp, #8]
     210:	mov	r4, r0
     214:	mov	r3, #0
     218:	str	r3, [sp, #16]
     21c:	cmp	r1, #0
     220:	bne	22c <flatbuffers_has_identifier+0x30>
     224:	mov	r0, #1
     228:	b	270 <flatbuffers_has_identifier+0x74>
     22c:	add	r0, sp, #16
     230:	mov	r2, #4
     234:	bl	0 <strncpy>
     238:	ldr	r0, [sp, #16]
     23c:	bl	134 <__flatbuffers_thash_cast_from_le>
     240:	str	r0, [sp, #16]
     244:	add	r0, r4, #4
     248:	bl	150 <__flatbuffers_thash_read_from_pe>
     24c:	ldr	r1, [sp, #16]
     250:	cmp	r1, #0
     254:	beq	26c <flatbuffers_has_identifier+0x70>
     258:	ldr	r1, [sp, #16]
     25c:	cmp	r0, r1
     260:	moveq	r0, #1
     264:	movne	r0, #0
     268:	b	270 <flatbuffers_has_identifier+0x74>
     26c:	mov	r0, #1
     270:	ldr	r4, [sp, #8]
     274:	ldr	lr, [sp, #4]
     278:	add	sp, sp, #24
     27c:	bx	lr

00000280 <MyGame_Example_Monster_vec_len>:
     280:	mov	ip, sp
     284:	sub	sp, sp, #8
     288:	str	ip, [sp]
     28c:	str	lr, [sp, #4]
     290:	cmp	r0, #0
     294:	beq	2a4 <MyGame_Example_Monster_vec_len+0x24>
     298:	sub	r0, r0, #4
     29c:	bl	5c <__flatbuffers_uoffset_read_from_pe>
     2a0:	b	2a8 <MyGame_Example_Monster_vec_len+0x28>
     2a4:	mov	r0, #0
     2a8:	ldr	lr, [sp, #4]
     2ac:	add	sp, sp, #8
     2b0:	bx	lr

000002b4 <MyGame_Example_Monster_vec_at>:
     2b4:	mov	ip, sp
     2b8:	sub	sp, sp, #16
     2bc:	str	ip, [sp]
     2c0:	str	lr, [sp, #4]
     2c4:	str	r4, [sp, #8]
     2c8:	str	r5, [sp, #12]
     2cc:	mov	r4, r1
     2d0:	add	r5, r0, r4, lsl #2
     2d4:	bl	174 <flatbuffers_vec_len>
     2d8:	cmp	r0, r4
     2dc:	bls	2f4 <MyGame_Example_Monster_vec_at+0x40>
     2e0:	ldr	r3, [pc, #76]	; 334 <MyGame_Example_Monster_vec_at+0x80>
     2e4:	cmp	r3, #0
     2e8:	movne	r1, #1
     2ec:	moveq	r1, #0
     2f0:	b	2f8 <MyGame_Example_Monster_vec_at+0x44>
     2f4:	mov	r1, #0
     2f8:	cmp	r1, #0
     2fc:	bne	314 <MyGame_Example_Monster_vec_at+0x60>
     300:	ldr	r0, [pc, #56]	; 340 <MyGame_Example_Monster_vec_at+0x8c>
     304:	ldr	r1, [pc, #48]	; 33c <MyGame_Example_Monster_vec_at+0x88>
     308:	movw	r2, #693	; 0x2b5
     30c:	ldr	r3, [pc, #36]	; 338 <MyGame_Example_Monster_vec_at+0x84>
     310:	bl	0 <__assert_fail>
     314:	mov	r0, r5
     318:	bl	5c <__flatbuffers_uoffset_read_from_pe>
     31c:	add	r0, r5, r0
     320:	ldr	r4, [sp, #8]
     324:	ldr	r5, [sp, #12]
     328:	ldr	lr, [sp, #4]
     32c:	add	sp, sp, #16
     330:	bx	lr
     334:	.word	0x000000da
     338:	.word	0x000004b7
     33c:	.word	0x00000264
     340:	.word	0x00000468

00000344 <MyGame_Example_Monster_as_root>:
     344:	mov	ip, sp
     348:	sub	sp, sp, #16
     34c:	str	ip, [sp]
     350:	str	lr, [sp, #4]
     354:	str	r4, [sp, #8]
     358:	mov	r4, r0
     35c:	ldr	r1, [pc, #76]	; 3b0 <MyGame_Example_Monster_as_root+0x6c>
     360:	cmp	r4, #0
     364:	beq	380 <MyGame_Example_Monster_as_root+0x3c>
     368:	mov	r0, r4
     36c:	bl	1fc <flatbuffers_has_identifier>
     370:	cmp	r0, #0
     374:	moveq	r1, #1
     378:	movne	r1, #0
     37c:	b	384 <MyGame_Example_Monster_as_root+0x40>
     380:	mov	r1, #1
     384:	cmp	r1, #0
     388:	bne	39c <MyGame_Example_Monster_as_root+0x58>
     38c:	mov	r0, r4
     390:	bl	5c <__flatbuffers_uoffset_read_from_pe>
     394:	add	r0, r4, r0
     398:	b	3a0 <MyGame_Example_Monster_as_root+0x5c>
     39c:	mov	r0, #0
     3a0:	ldr	r4, [sp, #8]
     3a4:	ldr	lr, [sp, #4]
     3a8:	add	sp, sp, #16
     3ac:	bx	lr
     3b0:	.word	0x0000008c

000003b4 <MyGame_Example_Monster_name>:
     3b4:	mov	ip, sp
     3b8:	sub	sp, sp, #24
     3bc:	str	ip, [sp]
     3c0:	str	lr, [sp, #4]
     3c4:	str	r4, [sp, #8]
     3c8:	str	r5, [sp, #12]
     3cc:	str	r6, [sp, #16]
     3d0:	str	r7, [sp, #20]
     3d4:	mov	r4, r0
     3d8:	mov	r6, #0
     3dc:	cmp	r4, #0
     3e0:	beq	3f8 <MyGame_Example_Monster_name+0x44>
     3e4:	ldr	r1, [pc, #236]	; 4d8 <MyGame_Example_Monster_name+0x124>
     3e8:	cmp	r1, #0
     3ec:	movne	r0, #1
     3f0:	moveq	r0, #0
     3f4:	b	3fc <MyGame_Example_Monster_name+0x48>
     3f8:	mov	r0, #0
     3fc:	cmp	r0, #0
     400:	bne	418 <MyGame_Example_Monster_name+0x64>
     404:	ldr	r0, [pc, #200]	; 4d4 <MyGame_Example_Monster_name+0x120>
     408:	ldr	r1, [pc, #212]	; 4e4 <MyGame_Example_Monster_name+0x130>
     40c:	movw	r2, #699	; 0x2bb
     410:	ldr	r3, [pc, #196]	; 4dc <MyGame_Example_Monster_name+0x128>
     414:	bl	0 <__assert_fail>
     418:	mov	r7, #3
     41c:	mov	r0, r4
     420:	bl	9c <__flatbuffers_soffset_read_from_pe>
     424:	sub	r5, r4, r0
     428:	mov	r0, r5
     42c:	bl	e4 <__flatbuffers_voffset_read_from_pe>
     430:	lsl	r3, r7, #1
     434:	add	r1, r3, #6
     438:	cmp	r0, r1
     43c:	bcc	454 <MyGame_Example_Monster_name+0xa0>
     440:	add	r1, r5, r7, lsl #1
     444:	add	r0, r1, #4
     448:	bl	e4 <__flatbuffers_voffset_read_from_pe>
     44c:	bic	r6, r0, #16711680	; 0xff0000
     450:	bic	r6, r6, #-16777216	; 0xff000000
     454:	cmp	r6, #0
     458:	beq	474 <MyGame_Example_Monster_name+0xc0>
     45c:	add	r4, r4, r6
     460:	mov	r0, r4
     464:	bl	5c <__flatbuffers_uoffset_read_from_pe>
     468:	add	r0, r4, r0
     46c:	add	r0, r0, #4
     470:	b	4b8 <MyGame_Example_Monster_name+0x104>
     474:	mov	r0, #0
     478:	cmp	r0, #0
     47c:	beq	494 <MyGame_Example_Monster_name+0xe0>
     480:	ldr	r0, [pc, #88]	; 4e0 <MyGame_Example_Monster_name+0x12c>
     484:	cmp	r0, #0
     488:	movne	r0, #1
     48c:	moveq	r0, #0
     490:	b	498 <MyGame_Example_Monster_name+0xe4>
     494:	mov	r0, #0
     498:	cmp	r0, #0
     49c:	bne	4b4 <MyGame_Example_Monster_name+0x100>
     4a0:	ldr	r0, [pc, #64]	; 4e8 <MyGame_Example_Monster_name+0x134>
     4a4:	ldr	r1, [pc, #56]	; 4e4 <MyGame_Example_Monster_name+0x130>
     4a8:	movw	r2, #699	; 0x2bb
     4ac:	ldr	r3, [pc, #40]	; 4dc <MyGame_Example_Monster_name+0x128>
     4b0:	bl	0 <__assert_fail>
     4b4:	mov	r0, #0
     4b8:	ldr	r4, [sp, #8]
     4bc:	ldr	r5, [sp, #12]
     4c0:	ldr	r6, [sp, #16]
     4c4:	ldr	r7, [sp, #20]
     4c8:	ldr	lr, [sp, #4]
     4cc:	add	sp, sp, #24
     4d0:	bx	lr
     4d4:	.word	0x000000b4
     4d8:	.word	0x00000115
     4dc:	.word	0x000004d5
     4e0:	.word	0x00000380
     4e4:	.word	0x00000264
     4e8:	.word	0x00000243

000004ec <MyGame_Example_Monster_inventory>:
     4ec:	mov	ip, sp
     4f0:	sub	sp, sp, #24
     4f4:	str	ip, [sp]
     4f8:	str	lr, [sp, #4]
     4fc:	str	r4, [sp, #8]
     500:	str	r5, [sp, #12]
     504:	str	r6, [sp, #16]
     508:	str	r7, [sp, #20]
     50c:	mov	r4, r0
     510:	mov	r6, #0
     514:	cmp	r4, #0
     518:	beq	530 <MyGame_Example_Monster_inventory+0x44>
     51c:	ldr	r1, [pc, #236]	; 610 <MyGame_Example_Monster_inventory+0x124>
     520:	cmp	r1, #0
     524:	movne	r0, #1
     528:	moveq	r0, #0
     52c:	b	534 <MyGame_Example_Monster_inventory+0x48>
     530:	mov	r0, #0
     534:	cmp	r0, #0
     538:	bne	550 <MyGame_Example_Monster_inventory+0x64>
     53c:	ldr	r0, [pc, #200]	; 60c <MyGame_Example_Monster_inventory+0x120>
     540:	ldr	r1, [pc, #212]	; 61c <MyGame_Example_Monster_inventory+0x130>
     544:	movw	r2, #706	; 0x2c2
     548:	ldr	r3, [pc, #208]	; 620 <MyGame_Example_Monster_inventory+0x134>
     54c:	bl	0 <__assert_fail>
     550:	mov	r7, #5
     554:	mov	r0, r4
     558:	bl	9c <__flatbuffers_soffset_read_from_pe>
     55c:	sub	r5, r4, r0
     560:	mov	r0, r5
     564:	bl	e4 <__flatbuffers_voffset_read_from_pe>
     568:	lsl	r3, r7, #1
     56c:	add	r1, r3, #6
     570:	cmp	r0, r1
     574:	bcc	58c <MyGame_Example_Monster_inventory+0xa0>
     578:	add	r1, r5, r7, lsl #1
     57c:	add	r0, r1, #4
     580:	bl	e4 <__flatbuffers_voffset_read_from_pe>
     584:	bic	r6, r0, #16711680	; 0xff0000
     588:	bic	r6, r6, #-16777216	; 0xff000000
     58c:	cmp	r6, #0
     590:	beq	5ac <MyGame_Example_Monster_inventory+0xc0>
     594:	add	r4, r4, r6
     598:	mov	r0, r4
     59c:	bl	5c <__flatbuffers_uoffset_read_from_pe>
     5a0:	add	r0, r4, r0
     5a4:	add	r0, r0, #4
     5a8:	b	5f0 <MyGame_Example_Monster_inventory+0x104>
     5ac:	mov	r0, #1
     5b0:	cmp	r0, #0
     5b4:	beq	5cc <MyGame_Example_Monster_inventory+0xe0>
     5b8:	ldr	r0, [pc, #88]	; 618 <MyGame_Example_Monster_inventory+0x12c>
     5bc:	cmp	r0, #0
     5c0:	movne	r0, #1
     5c4:	moveq	r0, #0
     5c8:	b	5d0 <MyGame_Example_Monster_inventory+0xe4>
     5cc:	mov	r0, #0
     5d0:	cmp	r0, #0
     5d4:	bne	5ec <MyGame_Example_Monster_inventory+0x100>
     5d8:	ldr	r0, [pc, #52]	; 614 <MyGame_Example_Monster_inventory+0x128>
     5dc:	ldr	r1, [pc, #56]	; 61c <MyGame_Example_Monster_inventory+0x130>
     5e0:	movw	r2, #706	; 0x2c2
     5e4:	ldr	r3, [pc, #52]	; 620 <MyGame_Example_Monster_inventory+0x134>
     5e8:	bl	0 <__assert_fail>
     5ec:	mov	r0, #0
     5f0:	ldr	r4, [sp, #8]
     5f4:	ldr	r5, [sp, #12]
     5f8:	ldr	r6, [sp, #16]
     5fc:	ldr	r7, [sp, #20]
     600:	ldr	lr, [sp, #4]
     604:	add	sp, sp, #24
     608:	bx	lr
     60c:	.word	0x000000b4
     610:	.word	0x00000115
     614:	.word	0x00000209
     618:	.word	0x00000380
     61c:	.word	0x00000264
     620:	.word	0x000004f1

00000624 <MyGame_Example_Monster_testarrayoftables>:
     624:	mov	ip, sp
     628:	sub	sp, sp, #24
     62c:	str	ip, [sp]
     630:	str	lr, [sp, #4]
     634:	str	r4, [sp, #8]
     638:	str	r5, [sp, #12]
     63c:	str	r6, [sp, #16]
     640:	str	r7, [sp, #20]
     644:	mov	r4, r0
     648:	mov	r6, #0
     64c:	cmp	r4, #0
     650:	beq	668 <MyGame_Example_Monster_testarrayoftables+0x44>
     654:	ldr	r1, [pc, #236]	; 748 <MyGame_Example_Monster_testarrayoftables+0x124>
     658:	cmp	r1, #0
     65c:	movne	r0, #1
     660:	moveq	r0, #0
     664:	b	66c <MyGame_Example_Monster_testarrayoftables+0x48>
     668:	mov	r0, #0
     66c:	cmp	r0, #0
     670:	bne	688 <MyGame_Example_Monster_testarrayoftables+0x64>
     674:	ldr	r0, [pc, #200]	; 744 <MyGame_Example_Monster_testarrayoftables+0x120>
     678:	ldr	r1, [pc, #212]	; 754 <MyGame_Example_Monster_testarrayoftables+0x130>
     67c:	movw	r2, #711	; 0x2c7
     680:	ldr	r3, [pc, #208]	; 758 <MyGame_Example_Monster_testarrayoftables+0x134>
     684:	bl	0 <__assert_fail>
     688:	mov	r7, #11
     68c:	mov	r0, r4
     690:	bl	9c <__flatbuffers_soffset_read_from_pe>
     694:	sub	r5, r4, r0
     698:	mov	r0, r5
     69c:	bl	e4 <__flatbuffers_voffset_read_from_pe>
     6a0:	lsl	r3, r7, #1
     6a4:	add	r1, r3, #6
     6a8:	cmp	r0, r1
     6ac:	bcc	6c4 <MyGame_Example_Monster_testarrayoftables+0xa0>
     6b0:	add	r1, r5, r7, lsl #1
     6b4:	add	r0, r1, #4
     6b8:	bl	e4 <__flatbuffers_voffset_read_from_pe>
     6bc:	bic	r6, r0, #16711680	; 0xff0000
     6c0:	bic	r6, r6, #-16777216	; 0xff000000
     6c4:	cmp	r6, #0
     6c8:	beq	6e4 <MyGame_Example_Monster_testarrayoftables+0xc0>
     6cc:	add	r4, r4, r6
     6d0:	mov	r0, r4
     6d4:	bl	5c <__flatbuffers_uoffset_read_from_pe>
     6d8:	add	r0, r4, r0
     6dc:	add	r0, r0, #4
     6e0:	b	728 <MyGame_Example_Monster_testarrayoftables+0x104>
     6e4:	mov	r0, #1
     6e8:	cmp	r0, #0
     6ec:	beq	704 <MyGame_Example_Monster_testarrayoftables+0xe0>
     6f0:	ldr	r0, [pc, #88]	; 750 <MyGame_Example_Monster_testarrayoftables+0x12c>
     6f4:	cmp	r0, #0
     6f8:	movne	r0, #1
     6fc:	moveq	r0, #0
     700:	b	708 <MyGame_Example_Monster_testarrayoftables+0xe4>
     704:	mov	r0, #0
     708:	cmp	r0, #0
     70c:	bne	724 <MyGame_Example_Monster_testarrayoftables+0x100>
     710:	ldr	r0, [pc, #52]	; 74c <MyGame_Example_Monster_testarrayoftables+0x128>
     714:	ldr	r1, [pc, #56]	; 754 <MyGame_Example_Monster_testarrayoftables+0x130>
     718:	movw	r2, #711	; 0x2c7
     71c:	ldr	r3, [pc, #52]	; 758 <MyGame_Example_Monster_testarrayoftables+0x134>
     720:	bl	0 <__assert_fail>
     724:	mov	r0, #0
     728:	ldr	r4, [sp, #8]
     72c:	ldr	r5, [sp, #12]
     730:	ldr	r6, [sp, #16]
     734:	ldr	r7, [sp, #20]
     738:	ldr	lr, [sp, #4]
     73c:	add	sp, sp, #24
     740:	bx	lr
     744:	.word	0x000000b4
     748:	.word	0x00000115
     74c:	.word	0x00000209
     750:	.word	0x00000380
     754:	.word	0x00000264
     758:	.word	0x00000512

0000075c <flatbuffers_uint8_to_pe>:
     75c:	mov	ip, sp
     760:	sub	sp, sp, #16
     764:	str	ip, [sp]
     768:	str	lr, [sp, #4]
     76c:	str	r4, [sp, #8]
     770:	mov	r4, r0
     774:	ldrb	r1, [r4]
     778:	and	r0, r1, #255	; 0xff
     77c:	bl	0 <flatbuffers_uint8_cast_to_pe>
     780:	and	r0, r0, #255	; 0xff
     784:	strb	r0, [r4]
     788:	mov	r0, r4
     78c:	ldr	r4, [sp, #8]
     790:	ldr	lr, [sp, #4]
     794:	add	sp, sp, #16
     798:	bx	lr

0000079c <flatbuffers_uint8_vec_start>:
     79c:	mov	ip, sp
     7a0:	sub	sp, sp, #24
     7a4:	str	ip, [sp]
     7a8:	str	lr, [sp, #4]
     7ac:	str	r4, [sp, #8]
     7b0:	str	r5, [sp, #12]
     7b4:	str	r6, [sp, #16]
     7b8:	mov	r4, r0
     7bc:	mov	r0, #0
     7c0:	cmp	r0, #0
     7c4:	bne	7d0 <flatbuffers_uint8_vec_start+0x34>
     7c8:	mov	r1, #1
     7cc:	b	7d4 <flatbuffers_uint8_vec_start+0x38>
     7d0:	mov	r1, #1
     7d4:	mov	r6, #1
     7d8:	mov	r5, #1
     7dc:	mvn	r0, #0
     7e0:	bl	0 <__aeabi_uidiv>
     7e4:	mov	r3, r0
     7e8:	mov	r2, r5
     7ec:	mov	r1, r6
     7f0:	mov	r0, r4
     7f4:	bl	0 <flatcc_builder_start_vector>
     7f8:	ldr	r4, [sp, #8]
     7fc:	ldr	r5, [sp, #12]
     800:	ldr	r6, [sp, #16]
     804:	ldr	lr, [sp, #4]
     808:	add	sp, sp, #24
     80c:	bx	lr

00000810 <flatbuffers_uint8_vec_end>:
     810:	mov	ip, sp
     814:	sub	sp, sp, #24
     818:	str	ip, [sp]
     81c:	str	lr, [sp, #4]
     820:	str	r4, [sp, #8]
     824:	str	r5, [sp, #12]
     828:	str	r6, [sp, #16]
     82c:	str	r7, [sp, #20]
     830:	mov	r6, r0
     834:	mov	r1, #0
     838:	cmp	r1, #0
     83c:	beq	87c <flatbuffers_uint8_vec_end+0x6c>
     840:	mov	r0, r6
     844:	bl	0 <flatcc_builder_vector_edit>
     848:	mov	r5, r0
     84c:	mov	r7, #0
     850:	mov	r0, r6
     854:	bl	0 <flatcc_builder_vector_count>
     858:	mov	r4, r0
     85c:	cmp	r7, r4
     860:	bcs	87c <flatbuffers_uint8_vec_end+0x6c>
     864:	mov	r1, r7
     868:	mov	r0, r5
     86c:	bl	20 <flatbuffers_uint8__ptr_add>
     870:	bl	75c <flatbuffers_uint8_to_pe>
     874:	add	r7, r7, #1
     878:	b	85c <flatbuffers_uint8_vec_end+0x4c>
     87c:	mov	r0, r6
     880:	bl	0 <flatcc_builder_end_vector>
     884:	ldr	r4, [sp, #8]
     888:	ldr	r5, [sp, #12]
     88c:	ldr	r6, [sp, #16]
     890:	ldr	r7, [sp, #20]
     894:	ldr	lr, [sp, #4]
     898:	add	sp, sp, #24
     89c:	bx	lr

000008a0 <flatbuffers_uint8_vec_append>:
     8a0:	mov	ip, sp
     8a4:	sub	sp, sp, #8
     8a8:	str	ip, [sp]
     8ac:	str	lr, [sp, #4]
     8b0:	bl	0 <flatcc_builder_append_vector>
     8b4:	ldr	lr, [sp, #4]
     8b8:	add	sp, sp, #8
     8bc:	bx	lr

000008c0 <flatbuffers_string_append>:
     8c0:	mov	ip, sp
     8c4:	sub	sp, sp, #8
     8c8:	str	ip, [sp]
     8cc:	str	lr, [sp, #4]
     8d0:	bl	0 <flatcc_builder_append_string>
     8d4:	ldr	lr, [sp, #4]
     8d8:	add	sp, sp, #8
     8dc:	bx	lr

000008e0 <flatbuffers_buffer_start>:
     8e0:	mov	ip, sp
     8e4:	sub	sp, sp, #8
     8e8:	str	ip, [sp]
     8ec:	str	lr, [sp, #4]
     8f0:	mov	r2, #0
     8f4:	mov	r3, #0
     8f8:	bl	0 <flatcc_builder_start_buffer>
     8fc:	ldr	lr, [sp, #4]
     900:	add	sp, sp, #8
     904:	bx	lr

00000908 <flatbuffers_buffer_end>:
     908:	mov	ip, sp
     90c:	sub	sp, sp, #8
     910:	str	ip, [sp]
     914:	str	lr, [sp, #4]
     918:	bl	0 <flatcc_builder_end_buffer>
     91c:	ldr	lr, [sp, #4]
     920:	add	sp, sp, #8
     924:	bx	lr

00000928 <MyGame_Example_Monster_start>:
     928:	mov	ip, sp
     92c:	sub	sp, sp, #8
     930:	str	ip, [sp]
     934:	str	lr, [sp, #4]
     938:	mov	r1, #36	; 0x24
     93c:	bl	0 <flatcc_builder_start_table>
     940:	ldr	lr, [sp, #4]
     944:	add	sp, sp, #8
     948:	bx	lr

0000094c <MyGame_Example_Monster_end>:
     94c:	mov	ip, sp
     950:	sub	sp, sp, #16
     954:	str	ip, [sp]
     958:	str	lr, [sp, #4]
     95c:	str	r4, [sp, #8]
     960:	mov	r4, r0
     964:	ldr	r1, [pc, #60]	; 9a8 <MyGame_Example_Monster_end+0x5c>
     968:	mov	r2, #1
     96c:	mov	r0, r4
     970:	bl	0 <flatcc_builder_check_required>
     974:	cmp	r0, #0
     978:	bne	990 <MyGame_Example_Monster_end+0x44>
     97c:	ldr	r0, [pc, #40]	; 9ac <MyGame_Example_Monster_end+0x60>
     980:	ldr	r1, [pc, #40]	; 9b0 <MyGame_Example_Monster_end+0x64>
     984:	mov	r2, #235	; 0xeb
     988:	ldr	r3, [pc, #36]	; 9b4 <MyGame_Example_Monster_end+0x68>
     98c:	bl	0 <__assert_fail>
     990:	mov	r0, r4
     994:	bl	0 <flatcc_builder_end_table>
     998:	ldr	r4, [sp, #8]
     99c:	ldr	lr, [sp, #4]
     9a0:	add	sp, sp, #16
     9a4:	bx	lr
     9a8:	.word	0x0000053c
     9ac:	.word	0x0000012f
     9b0:	.word	0x00000012
     9b4:	.word	0x00000540

000009b8 <MyGame_Example_Monster_vec_start>:
     9b8:	mov	ip, sp
     9bc:	sub	sp, sp, #8
     9c0:	str	ip, [sp]
     9c4:	str	lr, [sp, #4]
     9c8:	bl	0 <flatcc_builder_start_offset_vector>
     9cc:	ldr	lr, [sp, #4]
     9d0:	add	sp, sp, #8
     9d4:	bx	lr

000009d8 <MyGame_Example_Monster_vec_end>:
     9d8:	mov	ip, sp
     9dc:	sub	sp, sp, #8
     9e0:	str	ip, [sp]
     9e4:	str	lr, [sp, #4]
     9e8:	bl	0 <flatcc_builder_end_offset_vector>
     9ec:	ldr	lr, [sp, #4]
     9f0:	add	sp, sp, #8
     9f4:	bx	lr

000009f8 <MyGame_Example_Monster_vec_push>:
     9f8:	mov	ip, sp
     9fc:	sub	sp, sp, #8
     a00:	str	ip, [sp]
     a04:	str	lr, [sp, #4]
     a08:	cmp	r1, #0
     a0c:	beq	a18 <MyGame_Example_Monster_vec_push+0x20>
     a10:	bl	0 <flatcc_builder_offset_vector_push>
     a14:	b	a1c <MyGame_Example_Monster_vec_push+0x24>
     a18:	mov	r0, #0
     a1c:	ldr	lr, [sp, #4]
     a20:	add	sp, sp, #8
     a24:	bx	lr

00000a28 <MyGame_Example_Monster_name_add>:
     a28:	mov	ip, sp
     a2c:	sub	sp, sp, #16
     a30:	str	ip, [sp]
     a34:	str	lr, [sp, #4]
     a38:	str	r4, [sp, #8]
     a3c:	mov	r4, r1
     a40:	cmp	r4, #0
     a44:	beq	a64 <MyGame_Example_Monster_name_add+0x3c>
     a48:	mov	r1, #3
     a4c:	bl	0 <flatcc_builder_table_add_offset>
     a50:	mov	r1, r0
     a54:	cmp	r1, #0
     a58:	movne	r3, #1
     a5c:	moveq	r3, #0
     a60:	b	a68 <MyGame_Example_Monster_name_add+0x40>
     a64:	mov	r3, #0
     a68:	cmp	r3, #0
     a6c:	beq	a7c <MyGame_Example_Monster_name_add+0x54>
     a70:	str	r4, [r1]
     a74:	mov	r0, #0
     a78:	b	a80 <MyGame_Example_Monster_name_add+0x58>
     a7c:	mvn	r0, #0
     a80:	ldr	r4, [sp, #8]
     a84:	ldr	lr, [sp, #4]
     a88:	add	sp, sp, #16
     a8c:	bx	lr

00000a90 <MyGame_Example_Monster_name_start>:
     a90:	mov	ip, sp
     a94:	sub	sp, sp, #8
     a98:	str	ip, [sp]
     a9c:	str	lr, [sp, #4]
     aa0:	bl	0 <flatcc_builder_start_string>
     aa4:	ldr	lr, [sp, #4]
     aa8:	add	sp, sp, #8
     aac:	bx	lr

00000ab0 <MyGame_Example_Monster_name_end>:
     ab0:	mov	ip, sp
     ab4:	sub	sp, sp, #16
     ab8:	str	ip, [sp]
     abc:	str	lr, [sp, #4]
     ac0:	str	r4, [sp, #8]
     ac4:	mov	r4, r0
     ac8:	mov	r0, r4
     acc:	bl	0 <flatcc_builder_end_string>
     ad0:	mov	r1, r0
     ad4:	mov	r0, r4
     ad8:	bl	a28 <MyGame_Example_Monster_name_add>
     adc:	ldr	r4, [sp, #8]
     ae0:	ldr	lr, [sp, #4]
     ae4:	add	sp, sp, #16
     ae8:	bx	lr

00000aec <MyGame_Example_Monster_name_create_str>:
     aec:	mov	ip, sp
     af0:	sub	sp, sp, #16
     af4:	str	ip, [sp]
     af8:	str	lr, [sp, #4]
     afc:	str	r4, [sp, #8]
     b00:	mov	r4, r0
     b04:	mov	r0, r4
     b08:	bl	0 <flatcc_builder_create_string_str>
     b0c:	mov	r1, r0
     b10:	mov	r0, r4
     b14:	bl	a28 <MyGame_Example_Monster_name_add>
     b18:	ldr	r4, [sp, #8]
     b1c:	ldr	lr, [sp, #4]
     b20:	add	sp, sp, #16
     b24:	bx	lr

00000b28 <MyGame_Example_Monster_inventory_add>:
     b28:	mov	ip, sp
     b2c:	sub	sp, sp, #16
     b30:	str	ip, [sp]
     b34:	str	lr, [sp, #4]
     b38:	str	r4, [sp, #8]
     b3c:	mov	r4, r1
     b40:	cmp	r4, #0
     b44:	beq	b64 <MyGame_Example_Monster_inventory_add+0x3c>
     b48:	mov	r1, #5
     b4c:	bl	0 <flatcc_builder_table_add_offset>
     b50:	mov	r1, r0
     b54:	cmp	r1, #0
     b58:	movne	r3, #1
     b5c:	moveq	r3, #0
     b60:	b	b68 <MyGame_Example_Monster_inventory_add+0x40>
     b64:	mov	r3, #0
     b68:	cmp	r3, #0
     b6c:	beq	b7c <MyGame_Example_Monster_inventory_add+0x54>
     b70:	str	r4, [r1]
     b74:	mov	r0, #0
     b78:	b	b80 <MyGame_Example_Monster_inventory_add+0x58>
     b7c:	mvn	r0, #0
     b80:	ldr	r4, [sp, #8]
     b84:	ldr	lr, [sp, #4]
     b88:	add	sp, sp, #16
     b8c:	bx	lr

00000b90 <MyGame_Example_Monster_inventory_start>:
     b90:	mov	ip, sp
     b94:	sub	sp, sp, #8
     b98:	str	ip, [sp]
     b9c:	str	lr, [sp, #4]
     ba0:	bl	79c <flatbuffers_uint8_vec_start>
     ba4:	ldr	lr, [sp, #4]
     ba8:	add	sp, sp, #8
     bac:	bx	lr

00000bb0 <MyGame_Example_Monster_inventory_end>:
     bb0:	mov	ip, sp
     bb4:	sub	sp, sp, #16
     bb8:	str	ip, [sp]
     bbc:	str	lr, [sp, #4]
     bc0:	str	r4, [sp, #8]
     bc4:	mov	r4, r0
     bc8:	mov	r0, r4
     bcc:	bl	810 <flatbuffers_uint8_vec_end>
     bd0:	mov	r1, r0
     bd4:	mov	r0, r4
     bd8:	bl	b28 <MyGame_Example_Monster_inventory_add>
     bdc:	ldr	r4, [sp, #8]
     be0:	ldr	lr, [sp, #4]
     be4:	add	sp, sp, #16
     be8:	bx	lr

00000bec <MyGame_Example_Monster_testarrayoftables_add>:
     bec:	mov	ip, sp
     bf0:	sub	sp, sp, #16
     bf4:	str	ip, [sp]
     bf8:	str	lr, [sp, #4]
     bfc:	str	r4, [sp, #8]
     c00:	mov	r4, r1
     c04:	cmp	r4, #0
     c08:	beq	c28 <MyGame_Example_Monster_testarrayoftables_add+0x3c>
     c0c:	mov	r1, #11
     c10:	bl	0 <flatcc_builder_table_add_offset>
     c14:	mov	r1, r0
     c18:	cmp	r1, #0
     c1c:	movne	r3, #1
     c20:	moveq	r3, #0
     c24:	b	c2c <MyGame_Example_Monster_testarrayoftables_add+0x40>
     c28:	mov	r3, #0
     c2c:	cmp	r3, #0
     c30:	beq	c40 <MyGame_Example_Monster_testarrayoftables_add+0x54>
     c34:	str	r4, [r1]
     c38:	mov	r0, #0
     c3c:	b	c44 <MyGame_Example_Monster_testarrayoftables_add+0x58>
     c40:	mvn	r0, #0
     c44:	ldr	r4, [sp, #8]
     c48:	ldr	lr, [sp, #4]
     c4c:	add	sp, sp, #16
     c50:	bx	lr

00000c54 <MyGame_Example_Monster_start_as_root>:
     c54:	mov	ip, sp
     c58:	sub	sp, sp, #16
     c5c:	str	ip, [sp]
     c60:	str	lr, [sp, #4]
     c64:	str	r4, [sp, #8]
     c68:	mov	r4, r0
     c6c:	ldr	r1, [pc, #44]	; ca0 <MyGame_Example_Monster_start_as_root+0x4c>
     c70:	mov	r0, r4
     c74:	bl	8e0 <flatbuffers_buffer_start>
     c78:	cmp	r0, #0
     c7c:	bne	c8c <MyGame_Example_Monster_start_as_root+0x38>
     c80:	mov	r0, r4
     c84:	bl	928 <MyGame_Example_Monster_start>
     c88:	b	c90 <MyGame_Example_Monster_start_as_root+0x3c>
     c8c:	mvn	r0, #0
     c90:	ldr	r4, [sp, #8]
     c94:	ldr	lr, [sp, #4]
     c98:	add	sp, sp, #16
     c9c:	bx	lr
     ca0:	.word	0x0000008c

00000ca4 <MyGame_Example_Monster_end_as_root>:
     ca4:	mov	ip, sp
     ca8:	sub	sp, sp, #16
     cac:	str	ip, [sp]
     cb0:	str	lr, [sp, #4]
     cb4:	str	r4, [sp, #8]
     cb8:	mov	r4, r0
     cbc:	mov	r0, r4
     cc0:	bl	94c <MyGame_Example_Monster_end>
     cc4:	mov	r1, r0
     cc8:	mov	r0, r4
     ccc:	bl	908 <flatbuffers_buffer_end>
     cd0:	ldr	r4, [sp, #8]
     cd4:	ldr	lr, [sp, #4]
     cd8:	add	sp, sp, #16
     cdc:	bx	lr

00000ce0 <elapsed_realtime>:
     ce0:	mov	ip, sp
     ce4:	sub	sp, sp, #16
     ce8:	str	ip, [sp]
     cec:	str	lr, [sp, #4]
     cf0:	add	r0, sp, #8
     cf4:	mov	r1, #0
     cf8:	bl	0 <gettimeofday>
     cfc:	ldr	r0, [pc, #96]	; d64 <elapsed_realtime+0x84>
     d00:	ldr	r0, [r0]
     d04:	cmp	r0, #0
     d08:	bne	d18 <elapsed_realtime+0x38>
     d0c:	ldr	r0, [pc, #80]	; d64 <elapsed_realtime+0x84>
     d10:	vldr	d7, [sp, #8]
     d14:	vstr	d7, [r0]
     d18:	ldr	r3, [sp, #8]
     d1c:	ldr	r0, [pc, #64]	; d64 <elapsed_realtime+0x84>
     d20:	ldr	r2, [r0]
     d24:	sub	r0, r3, r2
     d28:	vmov	s2, r0
     d2c:	vcvt.f64.s32	d1, s2
     d30:	ldr	r0, [sp, #12]
     d34:	ldr	r1, [pc, #36]	; d60 <elapsed_realtime+0x80>
     d38:	ldr	ip, [r1]
     d3c:	sub	r1, r0, ip
     d40:	vmov	s8, r1
     d44:	vcvt.f64.s32	d4, s8
     d48:	vldr	d0, [pc, #24]	; d68 <elapsed_realtime+0x88>
     d4c:	vdiv.f64	d2, d4, d0
     d50:	vadd.f64	d0, d1, d2
     d54:	ldr	lr, [sp, #4]
     d58:	add	sp, sp, #16
     d5c:	bx	lr
     d60:	.word	0x00000004
	...
     d6c:	.word	0x412e8480

00000d70 <show_benchmark>:
     d70:	mov	ip, sp
     d74:	sub	sp, sp, #32
     d78:	str	ip, [sp]
     d7c:	str	lr, [sp, #4]
     d80:	str	r4, [sp, #8]
     d84:	str	r5, [sp, #12]
     d88:	str	r6, [sp, #16]
     d8c:	vstr	d8, [sp, #24]
     d90:	mov	r4, r3
     d94:	mov	r5, r2
     d98:	mov	r6, r1
     d9c:	mov	r1, r0
     da0:	vsub.f64	d8, d1, d0
     da4:	ldr	r0, [pc, #376]	; f24 <show_benchmark+0x1b4>
     da8:	bl	0 <printf>
     dac:	ldr	r0, [pc, #348]	; f10 <show_benchmark+0x1a0>
     db0:	vmov.f64	d2, d8
     db4:	vmov	r2, r3, d2
     db8:	bl	0 <printf>
     dbc:	ldr	r0, [pc, #360]	; f2c <show_benchmark+0x1bc>
     dc0:	mov	r1, r5
     dc4:	bl	0 <printf>
     dc8:	ldr	r0, [pc, #336]	; f20 <show_benchmark+0x1b0>
     dcc:	mov	r1, r6
     dd0:	bl	0 <printf>
     dd4:	ldr	r0, [pc, #304]	; f0c <show_benchmark+0x19c>
     dd8:	vmov	s6, r5
     ddc:	vcvt.f64.s32	d3, s6
     de0:	vmov	s10, r6
     de4:	vcvt.f64.u32	d5, s10
     de8:	vmul.f64	d6, d3, d5
     dec:	vldr	d3, [pc, #332]	; f40 <show_benchmark+0x1d0>
     df0:	vdiv.f64	d2, d6, d3
     df4:	vdiv.f64	d2, d2, d8
     df8:	vmov	r2, r3, d2
     dfc:	bl	0 <printf>
     e00:	ldr	r0, [pc, #276]	; f1c <show_benchmark+0x1ac>
     e04:	vmov	s10, r5
     e08:	vcvt.f64.s32	d5, s10
     e0c:	vdiv.f64	d2, d5, d8
     e10:	vmov	r2, r3, d2
     e14:	bl	0 <printf>
     e18:	cmp	r4, #0
     e1c:	bne	e28 <show_benchmark+0xb8>
     e20:	mov	r3, #0
     e24:	b	e34 <show_benchmark+0xc4>
     e28:	cmp	r5, #1
     e2c:	movne	r3, #1
     e30:	moveq	r3, #0
     e34:	cmp	r3, #0
     e38:	beq	e54 <show_benchmark+0xe4>
     e3c:	ldr	r0, [pc, #212]	; f18 <show_benchmark+0x1a8>
     e40:	vmov.f64	d3, #112	; 0x3f800000  1.0
     e44:	vdiv.f64	d2, d3, d8
     e48:	mov	r1, r4
     e4c:	vmov	r2, r3, d2
     e50:	bl	0 <printf>
     e54:	vldr	d7, [pc, #220]	; f38 <show_benchmark+0x1c8>
     e58:	vmul.f64	d0, d8, d7
     e5c:	vmov	s2, r5
     e60:	vcvt.f64.s32	d1, s2
     e64:	vdiv.f64	d2, d0, d1
     e68:	vldr	d1, [pc, #216]	; f48 <show_benchmark+0x1d8>
     e6c:	vcmp.f64	d2, d1
     e70:	vmrs	APSR_nzcv, fpscr
     e74:	bmi	ee0 <show_benchmark+0x170>
     e78:	vldr	d1, [pc, #192]	; f40 <show_benchmark+0x1d0>
     e7c:	vcmp.f64	d2, d1
     e80:	vmrs	APSR_nzcv, fpscr
     e84:	bmi	ec8 <show_benchmark+0x158>
     e88:	vldr	d4, [pc, #168]	; f38 <show_benchmark+0x1c8>
     e8c:	vcmp.f64	d2, d4
     e90:	vmrs	APSR_nzcv, fpscr
     e94:	bmi	eb0 <show_benchmark+0x140>
     e98:	ldr	r0, [pc, #116]	; f14 <show_benchmark+0x1a4>
     e9c:	vldr	d0, [pc, #148]	; f38 <show_benchmark+0x1c8>
     ea0:	vdiv.f64	d2, d2, d0
     ea4:	vmov	r2, r3, d2
     ea8:	bl	0 <printf>
     eac:	b	eec <show_benchmark+0x17c>
     eb0:	ldr	r0, [pc, #112]	; f28 <show_benchmark+0x1b8>
     eb4:	vldr	d3, [pc, #132]	; f40 <show_benchmark+0x1d0>
     eb8:	vdiv.f64	d2, d2, d3
     ebc:	vmov	r2, r3, d2
     ec0:	bl	0 <printf>
     ec4:	b	eec <show_benchmark+0x17c>
     ec8:	ldr	r0, [pc, #100]	; f34 <show_benchmark+0x1c4>
     ecc:	vldr	d7, [pc, #116]	; f48 <show_benchmark+0x1d8>
     ed0:	vdiv.f64	d2, d2, d7
     ed4:	vmov	r2, r3, d2
     ed8:	bl	0 <printf>
     edc:	b	eec <show_benchmark+0x17c>
     ee0:	ldr	r0, [pc, #72]	; f30 <show_benchmark+0x1c0>
     ee4:	vmov	r2, r3, d2
     ee8:	bl	0 <printf>
     eec:	mov	r0, #0
     ef0:	ldr	r4, [sp, #8]
     ef4:	ldr	r5, [sp, #12]
     ef8:	ldr	r6, [sp, #16]
     efc:	vldr	d8, [sp, #24]
     f00:	ldr	lr, [sp, #4]
     f04:	add	sp, sp, #32
     f08:	bx	lr
     f0c:	.word	0x0000035b
     f10:	.word	0x0000049f
     f14:	.word	0x00000397
     f18:	.word	0x00000337
     f1c:	.word	0x0000030d
     f20:	.word	0x000001d6
     f24:	.word	0x00000091
     f28:	.word	0x000002dd
     f2c:	.word	0x000003d7
     f30:	.word	0x000002f5
     f34:	.word	0x000000f0
     f38:	.word	0x00000000
     f3c:	.word	0x41cdcd65
     f40:	.word	0x00000000
     f44:	.word	0x412e8480
     f48:	.word	0x00000000
     f4c:	.word	0x408f4000

00000f50 <create_monster>:
     f50:	mov	ip, sp
     f54:	sub	sp, sp, #16
     f58:	str	ip, [sp]
     f5c:	str	lr, [sp, #4]
     f60:	str	r4, [sp, #8]
     f64:	str	r5, [sp, #12]
     f68:	mov	r4, r0
     f6c:	mov	r0, r4
     f70:	bl	928 <MyGame_Example_Monster_start>
     f74:	mov	r0, r4
     f78:	bl	a90 <MyGame_Example_Monster_name_start>
     f7c:	mov	r5, #0
     f80:	cmp	r5, #100	; 0x64
     f84:	bcs	fa0 <create_monster+0x50>
     f88:	ldr	r1, [pc, #108]	; ffc <create_monster+0xac>
     f8c:	mov	r2, #7
     f90:	mov	r0, r4
     f94:	bl	8c0 <flatbuffers_string_append>
     f98:	add	r5, r5, #1
     f9c:	b	f80 <create_monster+0x30>
     fa0:	mov	r0, r4
     fa4:	bl	ab0 <MyGame_Example_Monster_name_end>
     fa8:	mov	r0, r4
     fac:	bl	b90 <MyGame_Example_Monster_inventory_start>
     fb0:	mov	r5, #0
     fb4:	cmp	r5, #100	; 0x64
     fb8:	bcs	fd4 <create_monster+0x84>
     fbc:	ldr	r1, [pc, #52]	; ff8 <create_monster+0xa8>
     fc0:	mov	r2, #1000	; 0x3e8
     fc4:	mov	r0, r4
     fc8:	bl	8a0 <flatbuffers_uint8_vec_append>
     fcc:	add	r5, r5, #1
     fd0:	b	fb4 <create_monster+0x64>
     fd4:	mov	r0, r4
     fd8:	bl	bb0 <MyGame_Example_Monster_inventory_end>
     fdc:	mov	r0, r4
     fe0:	bl	94c <MyGame_Example_Monster_end>
     fe4:	ldr	r4, [sp, #8]
     fe8:	ldr	r5, [sp, #12]
     fec:	ldr	lr, [sp, #4]
     ff0:	add	sp, sp, #16
     ff4:	bx	lr
     ff8:	.word	0x00000008
     ffc:	.word	0x000003e7

00001000 <create_monsters>:
    1000:	mov	ip, sp
    1004:	sub	sp, sp, #24
    1008:	str	ip, [sp]
    100c:	str	lr, [sp, #4]
    1010:	str	r4, [sp, #8]
    1014:	str	r5, [sp, #12]
    1018:	str	r6, [sp, #16]
    101c:	mov	r4, r0
    1020:	mov	r0, r4
    1024:	bl	9b8 <MyGame_Example_Monster_vec_start>
    1028:	mov	r6, #0
    102c:	cmp	r6, #1000	; 0x3e8
    1030:	bcs	1070 <create_monsters+0x70>
    1034:	mov	r0, r4
    1038:	bl	f50 <create_monster>
    103c:	mov	r5, r0
    1040:	cmp	r5, #0
    1044:	bne	105c <create_monsters+0x5c>
    1048:	ldr	r0, [pc, #68]	; 1094 <create_monsters+0x94>
    104c:	ldr	r1, [pc, #60]	; 1090 <create_monsters+0x90>
    1050:	mov	r2, #42	; 0x2a
    1054:	ldr	r3, [pc, #60]	; 1098 <create_monsters+0x98>
    1058:	bl	0 <__assert_fail>
    105c:	mov	r1, r5
    1060:	mov	r0, r4
    1064:	bl	9f8 <MyGame_Example_Monster_vec_push>
    1068:	add	r6, r6, #1
    106c:	b	102c <create_monsters+0x2c>
    1070:	mov	r0, r4
    1074:	bl	9d8 <MyGame_Example_Monster_vec_end>
    1078:	ldr	r4, [sp, #8]
    107c:	ldr	r5, [sp, #12]
    1080:	ldr	r6, [sp, #16]
    1084:	ldr	lr, [sp, #4]
    1088:	add	sp, sp, #24
    108c:	bx	lr
    1090:	.word	0x000003ef
    1094:	.word	0x000000a0
    1098:	.word	0x0000055b

0000109c <create_root_monster>:
    109c:	mov	ip, sp
    10a0:	sub	sp, sp, #16
    10a4:	str	ip, [sp]
    10a8:	str	lr, [sp, #4]
    10ac:	str	r4, [sp, #8]
    10b0:	str	r5, [sp, #12]
    10b4:	mov	r4, r0
    10b8:	mov	r0, r4
    10bc:	bl	0 <flatcc_builder_reset>
    10c0:	mov	r0, r4
    10c4:	bl	c54 <MyGame_Example_Monster_start_as_root>
    10c8:	ldr	r1, [pc, #96]	; 1130 <create_root_monster+0x94>
    10cc:	mov	r0, r4
    10d0:	bl	aec <MyGame_Example_Monster_name_create_str>
    10d4:	mov	r0, r4
    10d8:	bl	1000 <create_monsters>
    10dc:	mov	r5, r0
    10e0:	cmp	r5, #0
    10e4:	bne	10fc <create_root_monster+0x60>
    10e8:	ldr	r0, [pc, #68]	; 1134 <create_root_monster+0x98>
    10ec:	ldr	r1, [pc, #52]	; 1128 <create_root_monster+0x8c>
    10f0:	mov	r2, #56	; 0x38
    10f4:	ldr	r3, [pc, #48]	; 112c <create_root_monster+0x90>
    10f8:	bl	0 <__assert_fail>
    10fc:	mov	r1, r5
    1100:	mov	r0, r4
    1104:	bl	bec <MyGame_Example_Monster_testarrayoftables_add>
    1108:	mov	r0, r4
    110c:	bl	ca4 <MyGame_Example_Monster_end_as_root>
    1110:	mov	r0, #0
    1114:	ldr	r4, [sp, #8]
    1118:	ldr	r5, [sp, #12]
    111c:	ldr	lr, [sp, #4]
    1120:	add	sp, sp, #16
    1124:	bx	lr
    1128:	.word	0x000003ef
    112c:	.word	0x0000056b
    1130:	.word	0x00000108
    1134:	.word	0x000000ed

00001138 <verify_monster>:
    1138:	mov	ip, sp
    113c:	sub	sp, sp, #24
    1140:	str	ip, [sp]
    1144:	str	lr, [sp, #4]
    1148:	str	r4, [sp, #8]
    114c:	str	r5, [sp, #12]
    1150:	str	r6, [sp, #16]
    1154:	str	r7, [sp, #20]
    1158:	mov	r4, r1
    115c:	mov	r6, r0
    1160:	mov	r0, r4
    1164:	bl	3b4 <MyGame_Example_Monster_name>
    1168:	mov	r5, r0
    116c:	mov	r0, r4
    1170:	bl	4ec <MyGame_Example_Monster_inventory>
    1174:	mov	r4, r0
    1178:	mov	r0, r5
    117c:	bl	1a8 <flatbuffers_string_len>
    1180:	cmp	r0, #700	; 0x2bc
    1184:	beq	11a4 <verify_monster+0x6c>
    1188:	ldr	r0, [pc, #312]	; 12c8 <verify_monster+0x190>
    118c:	ldr	r1, [pc, #316]	; 12d0 <verify_monster+0x198>
    1190:	mov	r2, #74	; 0x4a
    1194:	ldr	r3, [pc, #304]	; 12cc <verify_monster+0x194>
    1198:	bl	0 <__assert_fail>
    119c:	mvn	r0, #0
    11a0:	b	12a8 <verify_monster+0x170>
    11a4:	mov	r0, r4
    11a8:	bl	1dc <flatbuffers_uint8_vec_len>
    11ac:	movw	lr, #34464	; 0x86a0
    11b0:	movt	lr, #1
    11b4:	cmp	r0, lr
    11b8:	beq	11d8 <verify_monster+0xa0>
    11bc:	ldr	r0, [pc, #260]	; 12c8 <verify_monster+0x190>
    11c0:	ldr	r1, [pc, #264]	; 12d0 <verify_monster+0x198>
    11c4:	mov	r2, #78	; 0x4e
    11c8:	ldr	r3, [pc, #252]	; 12cc <verify_monster+0x194>
    11cc:	bl	0 <__assert_fail>
    11d0:	mvn	r0, #0
    11d4:	b	12a8 <verify_monster+0x170>
    11d8:	mov	r7, #0
    11dc:	cmp	r7, #100	; 0x64
    11e0:	bcs	1258 <verify_monster+0x120>
    11e4:	mov	r2, #7
    11e8:	mla	r0, r2, r7, r5
    11ec:	ldr	r1, [pc, #232]	; 12dc <verify_monster+0x1a4>
    11f0:	mov	r2, #7
    11f4:	bl	0 <memcmp>
    11f8:	cmp	r0, #0
    11fc:	beq	1250 <verify_monster+0x118>
    1200:	cmp	r5, #0
    1204:	bne	1210 <verify_monster+0xd8>
    1208:	ldr	r2, [pc, #196]	; 12d4 <verify_monster+0x19c>
    120c:	b	1214 <verify_monster+0xdc>
    1210:	mov	r2, r5
    1214:	ldr	r0, [pc, #196]	; 12e0 <verify_monster+0x1a8>
    1218:	mov	r1, r7
    121c:	bl	0 <printf>
    1220:	ldr	r0, [pc, #176]	; 12d8 <verify_monster+0x1a0>
    1224:	mov	ip, #7
    1228:	mla	r1, ip, r7, r5
    122c:	sub	r1, r1, r6
    1230:	bl	0 <printf>
    1234:	ldr	r0, [pc, #140]	; 12c8 <verify_monster+0x190>
    1238:	ldr	r1, [pc, #144]	; 12d0 <verify_monster+0x198>
    123c:	mov	r2, #85	; 0x55
    1240:	ldr	r3, [pc, #132]	; 12cc <verify_monster+0x194>
    1244:	bl	0 <__assert_fail>
    1248:	mvn	r0, #0
    124c:	b	12a8 <verify_monster+0x170>
    1250:	add	r7, r7, #1
    1254:	b	11dc <verify_monster+0xa4>
    1258:	mov	r5, #0
    125c:	cmp	r5, #100	; 0x64
    1260:	bcs	12a4 <verify_monster+0x16c>
    1264:	mov	r1, #1000	; 0x3e8
    1268:	mla	r0, r1, r5, r4
    126c:	ldr	r1, [pc, #80]	; 12c4 <verify_monster+0x18c>
    1270:	mov	r2, #1000	; 0x3e8
    1274:	bl	0 <memcmp>
    1278:	cmp	r0, #0
    127c:	beq	129c <verify_monster+0x164>
    1280:	ldr	r0, [pc, #64]	; 12c8 <verify_monster+0x190>
    1284:	ldr	r1, [pc, #68]	; 12d0 <verify_monster+0x198>
    1288:	mov	r2, #91	; 0x5b
    128c:	ldr	r3, [pc, #56]	; 12cc <verify_monster+0x194>
    1290:	bl	0 <__assert_fail>
    1294:	mvn	r0, #0
    1298:	b	12a8 <verify_monster+0x170>
    129c:	add	r5, r5, #1
    12a0:	b	125c <verify_monster+0x124>
    12a4:	mov	r0, #0
    12a8:	ldr	r4, [sp, #8]
    12ac:	ldr	r5, [sp, #12]
    12b0:	ldr	r6, [sp, #16]
    12b4:	ldr	r7, [sp, #20]
    12b8:	ldr	lr, [sp, #4]
    12bc:	add	sp, sp, #24
    12c0:	bx	lr
    12c4:	.word	0x00000008
    12c8:	.word	0x00000454
    12cc:	.word	0x0000057f
    12d0:	.word	0x000003ef
    12d4:	.word	0x000001d1
    12d8:	.word	0x00000373
    12dc:	.word	0x000003e7
    12e0:	.word	0x000001e9

000012e4 <main>:
    12e4:	mov	ip, sp
    12e8:	sub	sp, sp, #288	; 0x120
    12ec:	str	ip, [sp]
    12f0:	str	lr, [sp, #4]
    12f4:	str	r4, [sp, #8]
    12f8:	str	r5, [sp, #12]
    12fc:	str	r6, [sp, #16]
    1300:	str	r7, [sp, #20]
    1304:	str	r8, [sp, #24]
    1308:	str	r9, [sp, #28]
    130c:	str	sl, [sp, #32]
    1310:	vstr	d8, [sp, #40]	; 0x28
    1314:	mov	r6, #10
    1318:	mov	r8, #0
    131c:	add	r7, sp, #56	; 0x38
    1320:	mov	r0, r7
    1324:	bl	0 <flatcc_builder_init>
    1328:	mov	r0, r7
    132c:	bl	109c <create_root_monster>
    1330:	add	r1, sp, #48	; 0x30
    1334:	mov	r0, r7
    1338:	bl	0 <flatcc_builder_finalize_buffer>
    133c:	mov	r5, r0
    1340:	ldr	r0, [pc, #480]	; 1528 <main+0x244>
    1344:	ldr	r1, [pc, #480]	; 152c <main+0x248>
    1348:	bl	0 <fopen>
    134c:	mov	r4, r0
    1350:	cmp	r4, #0
    1354:	bne	1360 <main+0x7c>
    1358:	mvn	r8, #0
    135c:	b	14d0 <main+0x1ec>
    1360:	mov	r1, #1
    1364:	ldr	r2, [sp, #48]	; 0x30
    1368:	mov	r3, r4
    136c:	mov	r0, r5
    1370:	bl	0 <fwrite>
    1374:	ldr	r3, [sp, #48]	; 0x30
    1378:	cmp	r3, r0
    137c:	movne	r0, #1
    1380:	moveq	r0, #0
    1384:	orr	r8, r8, r0
    1388:	mov	r0, r4
    138c:	bl	0 <fclose>
    1390:	cmp	r8, #0
    1394:	bne	14d0 <main+0x1ec>
    1398:	ldr	r0, [pc, #400]	; 1530 <main+0x24c>
    139c:	ldr	r1, [sp, #48]	; 0x30
    13a0:	bl	0 <printf>
    13a4:	ldr	r0, [pc, #404]	; 1540 <main+0x25c>
    13a8:	bl	0 <printf>
    13ac:	bl	ce0 <elapsed_realtime>
    13b0:	vmov.f64	d8, d0
    13b4:	mov	r9, #0
    13b8:	cmp	r9, r6
    13bc:	bge	14b0 <main+0x1cc>
    13c0:	mov	r0, r7
    13c4:	bl	109c <create_root_monster>
    13c8:	ldr	r2, [sp, #48]	; 0x30
    13cc:	mov	r1, r5
    13d0:	mov	r0, r7
    13d4:	bl	0 <flatcc_builder_copy_buffer>
    13d8:	mov	r0, r5
    13dc:	bl	344 <MyGame_Example_Monster_as_root>
    13e0:	mov	r4, r0
    13e4:	mov	r0, r4
    13e8:	bl	3b4 <MyGame_Example_Monster_name>
    13ec:	ldr	r1, [pc, #336]	; 1544 <main+0x260>
    13f0:	bl	0 <strcmp>
    13f4:	orr	r8, r8, r0
    13f8:	cmp	r8, #0
    13fc:	beq	1414 <main+0x130>
    1400:	ldr	r0, [pc, #300]	; 1534 <main+0x250>
    1404:	ldr	r1, [pc, #280]	; 1524 <main+0x240>
    1408:	mov	r2, #139	; 0x8b
    140c:	ldr	r3, [pc, #268]	; 1520 <main+0x23c>
    1410:	bl	0 <__assert_fail>
    1414:	mov	r0, r4
    1418:	bl	624 <MyGame_Example_Monster_testarrayoftables>
    141c:	mov	r4, r0
    1420:	mov	r0, r4
    1424:	bl	280 <MyGame_Example_Monster_vec_len>
    1428:	cmp	r0, #1000	; 0x3e8
    142c:	movne	r3, #1
    1430:	moveq	r3, #0
    1434:	orr	r8, r8, r3
    1438:	cmp	r8, #0
    143c:	beq	1454 <main+0x170>
    1440:	ldr	r0, [pc, #236]	; 1534 <main+0x250>
    1444:	ldr	r1, [pc, #216]	; 1524 <main+0x240>
    1448:	mov	r2, #143	; 0x8f
    144c:	ldr	r3, [pc, #204]	; 1520 <main+0x23c>
    1450:	bl	0 <__assert_fail>
    1454:	mov	sl, #0
    1458:	cmp	sl, #1000	; 0x3e8
    145c:	bge	14a0 <main+0x1bc>
    1460:	mov	r1, sl
    1464:	mov	r0, r4
    1468:	bl	2b4 <MyGame_Example_Monster_vec_at>
    146c:	mov	r1, r0
    1470:	mov	r0, r5
    1474:	bl	1138 <verify_monster>
    1478:	orr	r8, r8, r0
    147c:	cmp	r8, #0
    1480:	beq	1498 <main+0x1b4>
    1484:	ldr	r0, [pc, #168]	; 1534 <main+0x250>
    1488:	ldr	r1, [pc, #148]	; 1524 <main+0x240>
    148c:	mov	r2, #147	; 0x93
    1490:	ldr	r3, [pc, #136]	; 1520 <main+0x23c>
    1494:	bl	0 <__assert_fail>
    1498:	add	sl, sl, #1
    149c:	b	1458 <main+0x174>
    14a0:	cmp	r8, #0
    14a4:	bne	14d0 <main+0x1ec>
    14a8:	add	r9, r9, #1
    14ac:	b	13b8 <main+0xd4>
    14b0:	bl	ce0 <elapsed_realtime>
    14b4:	vmov.f64	d1, d0
    14b8:	ldr	r0, [pc, #120]	; 1538 <main+0x254>
    14bc:	ldr	r1, [sp, #48]	; 0x30
    14c0:	mov	r3, #0
    14c4:	mov	r2, r6
    14c8:	vmov.f64	d0, d8
    14cc:	bl	d70 <show_benchmark>
    14d0:	mov	r0, r7
    14d4:	bl	0 <flatcc_builder_clear>
    14d8:	mov	r0, r5
    14dc:	bl	0 <free>
    14e0:	cmp	r8, #0
    14e4:	beq	14f0 <main+0x20c>
    14e8:	ldr	r0, [pc, #76]	; 153c <main+0x258>
    14ec:	bl	0 <printf>
    14f0:	mov	r0, r8
    14f4:	ldr	r4, [sp, #8]
    14f8:	ldr	r5, [sp, #12]
    14fc:	ldr	r6, [sp, #16]
    1500:	ldr	r7, [sp, #20]
    1504:	ldr	r8, [sp, #24]
    1508:	ldr	r9, [sp, #28]
    150c:	ldr	sl, [sp, #32]
    1510:	vldr	d8, [sp, #40]	; 0x28
    1514:	ldr	lr, [sp, #4]
    1518:	add	sp, sp, #288	; 0x120
    151c:	bx	lr
    1520:	.word	0x0000058e
    1524:	.word	0x000003ef
    1528:	.word	0x0000022d
    152c:	.word	0x0000022a
    1530:	.word	0x00000000
    1534:	.word	0x0000032e
    1538:	.word	0x000003ae
    153c:	.word	0x00000456
    1540:	.word	0x000000a2
    1544:	.word	0x00000108
