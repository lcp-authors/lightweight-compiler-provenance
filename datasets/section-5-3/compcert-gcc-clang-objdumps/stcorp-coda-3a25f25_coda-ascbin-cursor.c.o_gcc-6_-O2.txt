
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascbin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_relative_field_bit_offset_by_index>:
       0:	ldr	r3, [r0, #4]
       4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       8:	sub	sp, sp, #556	; 0x22c
       c:	add	r3, r0, r3, lsl #4
      10:	ldr	r5, [r3, #-8]
      14:	ldr	r3, [r5, #52]	; 0x34
      18:	add	ip, r3, r1, lsl #2
      1c:	ldr	r4, [r3, r1, lsl #2]
      20:	ldrd	r6, [r4, #24]
      24:	cmp	r6, #0
      28:	sbcs	r3, r7, #0
      2c:	blt	44 <get_relative_field_bit_offset_by_index+0x44>
      30:	strd	r6, [r2]
      34:	mov	r7, #0
      38:	mov	r0, r7
      3c:	add	sp, sp, #556	; 0x22c
      40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      44:	ldr	r3, [r4, #32]
      48:	str	r2, [sp, #4]
      4c:	cmp	r3, #0
      50:	mov	r9, r1
      54:	mov	r8, r0
      58:	beq	f0 <get_relative_field_bit_offset_by_index+0xf0>
      5c:	ldr	r0, [r4, #20]
      60:	cmp	r0, #0
      64:	beq	c0 <get_relative_field_bit_offset_by_index+0xc0>
      68:	add	r2, sp, #32
      6c:	mov	r1, r8
      70:	bl	0 <coda_expression_eval_bool>
      74:	cmp	r0, #0
      78:	bne	a4 <get_relative_field_bit_offset_by_index+0xa4>
      7c:	ldr	r7, [sp, #32]
      80:	cmp	r7, #0
      84:	bne	bc <get_relative_field_bit_offset_by_index+0xbc>
      88:	cmp	r9, #0
      8c:	bne	270 <get_relative_field_bit_offset_by_index+0x270>
      90:	ldr	r1, [sp, #4]
      94:	mov	r2, #0
      98:	mov	r3, #0
      9c:	strd	r2, [r1]
      a0:	b	38 <get_relative_field_bit_offset_by_index+0x38>
      a4:	ldr	r0, [pc, #544]	; 2cc <get_relative_field_bit_offset_by_index+0x2cc>
      a8:	bl	0 <coda_add_error_message>
      ac:	mov	r0, r8
      b0:	bl	0 <coda_cursor_add_to_error_message>
      b4:	mvn	r7, #0
      b8:	b	38 <get_relative_field_bit_offset_by_index+0x38>
      bc:	ldr	r3, [r4, #32]
      c0:	ldr	r2, [sp, #4]
      c4:	mov	r0, r3
      c8:	mov	r1, r8
      cc:	bl	0 <coda_expression_eval_integer>
      d0:	subs	r7, r0, #0
      d4:	beq	38 <get_relative_field_bit_offset_by_index+0x38>
      d8:	ldr	r0, [pc, #496]	; 2d0 <get_relative_field_bit_offset_by_index+0x2d0>
      dc:	bl	0 <coda_add_error_message>
      e0:	mov	r0, r8
      e4:	bl	0 <coda_cursor_add_to_error_message>
      e8:	mvn	r7, #0
      ec:	b	38 <get_relative_field_bit_offset_by_index+0x38>
      f0:	cmp	r1, #0
      f4:	beq	2b8 <get_relative_field_bit_offset_by_index+0x2b8>
      f8:	sub	r4, r1, #1
      fc:	mvn	r0, #0
     100:	mvn	r1, #0
     104:	ldr	fp, [sp, #4]
     108:	b	120 <get_relative_field_bit_offset_by_index+0x120>
     10c:	ldr	r3, [r3, #32]
     110:	cmp	r3, #0
     114:	bne	134 <get_relative_field_bit_offset_by_index+0x134>
     118:	subs	r4, r4, #1
     11c:	bmi	298 <get_relative_field_bit_offset_by_index+0x298>
     120:	ldr	r3, [ip, #-4]!
     124:	ldrd	r6, [r3, #24]
     128:	cmp	r7, r1
     12c:	cmpeq	r6, r0
     130:	beq	10c <get_relative_field_bit_offset_by_index+0x10c>
     134:	add	r2, sp, #16
     138:	mov	r1, r4
     13c:	mov	r0, r8
     140:	str	fp, [sp, #4]
     144:	bl	0 <get_relative_field_bit_offset_by_index>
     148:	subs	r7, r0, #0
     14c:	bne	268 <get_relative_field_bit_offset_by_index+0x268>
     150:	mov	r2, #520	; 0x208
     154:	mov	r1, r8
     158:	add	r0, sp, #32
     15c:	bl	0 <memcpy>
     160:	ldr	r3, [r8, #4]
     164:	ldrd	r0, [sp, #16]
     168:	ldr	ip, [sp, #36]	; 0x24
     16c:	lsl	r3, r3, #4
     170:	add	ip, ip, #1
     174:	ldrd	r2, [r3, r8]
     178:	str	ip, [sp, #36]	; 0x24
     17c:	adds	sl, r2, r0
     180:	adc	fp, r3, r1
     184:	add	r3, sp, #40	; 0x28
     188:	add	lr, r3, ip, lsl #4
     18c:	mov	r2, sl
     190:	mov	r3, fp
     194:	cmp	r4, r9
     198:	strd	r2, [lr, #-8]
     19c:	bge	28c <get_relative_field_bit_offset_by_index+0x28c>
     1a0:	lsl	r6, r4, #2
     1a4:	b	1d8 <get_relative_field_bit_offset_by_index+0x1d8>
     1a8:	add	r2, sp, #12
     1ac:	mov	r1, r8
     1b0:	bl	0 <coda_expression_eval_bool>
     1b4:	cmp	r0, #0
     1b8:	bne	260 <get_relative_field_bit_offset_by_index+0x260>
     1bc:	ldr	r3, [sp, #12]
     1c0:	cmp	r3, #0
     1c4:	bne	2ac <get_relative_field_bit_offset_by_index+0x2ac>
     1c8:	add	r4, r4, #1
     1cc:	cmp	r9, r4
     1d0:	add	r6, r6, #4
     1d4:	beq	288 <get_relative_field_bit_offset_by_index+0x288>
     1d8:	ldr	r3, [r5, #52]	; 0x34
     1dc:	mov	r2, #1
     1e0:	str	r2, [sp, #12]
     1e4:	ldr	r3, [r3, r6]
     1e8:	ldr	r0, [r3, #20]
     1ec:	cmp	r0, #0
     1f0:	bne	1a8 <get_relative_field_bit_offset_by_index+0x1a8>
     1f4:	ldr	r2, [sp, #36]	; 0x24
     1f8:	ldr	ip, [r3, #8]
     1fc:	sub	r3, r2, #1
     200:	add	r2, sp, #552	; 0x228
     204:	add	r3, r2, r3, lsl #4
     208:	add	r1, sp, #24
     20c:	add	r0, sp, #32
     210:	str	ip, [r3, #-512]	; 0xfffffe00
     214:	str	r4, [r3, #-508]	; 0xfffffe04
     218:	bl	0 <coda_cursor_get_bit_size>
     21c:	cmp	r0, #0
     220:	bne	268 <get_relative_field_bit_offset_by_index+0x268>
     224:	ldr	ip, [sp, #36]	; 0x24
     228:	add	r1, sp, #40	; 0x28
     22c:	ldrd	r2, [sp, #24]
     230:	add	ip, r1, ip, lsl #4
     234:	ldrd	r0, [sp, #16]
     238:	adds	sl, r0, r2
     23c:	adc	fp, r1, r3
     240:	ldrd	r0, [ip, #-8]
     244:	strd	sl, [sp, #16]
     248:	adds	r0, r0, r2
     24c:	adc	r1, r1, r3
     250:	mov	r2, r0
     254:	mov	r3, r1
     258:	strd	r2, [ip, #-8]
     25c:	b	1c8 <get_relative_field_bit_offset_by_index+0x1c8>
     260:	ldr	r0, [pc, #100]	; 2cc <get_relative_field_bit_offset_by_index+0x2cc>
     264:	bl	0 <coda_add_error_message>
     268:	mvn	r7, #0
     26c:	b	38 <get_relative_field_bit_offset_by_index+0x38>
     270:	ldr	r2, [sp, #4]
     274:	sub	r1, r9, #1
     278:	mov	r0, r8
     27c:	bl	0 <get_relative_field_bit_offset_by_index>
     280:	mov	r7, r0
     284:	b	38 <get_relative_field_bit_offset_by_index+0x38>
     288:	ldrd	r0, [sp, #16]
     28c:	ldr	r3, [sp, #4]
     290:	strd	r0, [r3]
     294:	b	38 <get_relative_field_bit_offset_by_index+0x38>
     298:	ldr	r3, [pc, #52]	; 2d4 <get_relative_field_bit_offset_by_index+0x2d4>
     29c:	mov	r2, #110	; 0x6e
     2a0:	ldr	r1, [pc, #48]	; 2d8 <get_relative_field_bit_offset_by_index+0x2d8>
     2a4:	ldr	r0, [pc, #48]	; 2dc <get_relative_field_bit_offset_by_index+0x2dc>
     2a8:	bl	0 <__assert_fail>
     2ac:	ldr	r3, [r5, #52]	; 0x34
     2b0:	ldr	r3, [r3, r6]
     2b4:	b	1f4 <get_relative_field_bit_offset_by_index+0x1f4>
     2b8:	ldr	r3, [pc, #20]	; 2d4 <get_relative_field_bit_offset_by_index+0x2d4>
     2bc:	mov	r2, #99	; 0x63
     2c0:	ldr	r1, [pc, #16]	; 2d8 <get_relative_field_bit_offset_by_index+0x2d8>
     2c4:	ldr	r0, [pc, #20]	; 2e0 <get_relative_field_bit_offset_by_index+0x2e0>
     2c8:	bl	0 <__assert_fail>
     2cc:	.word	0x00000000
     2d0:	.word	0x0000001c
     2d4:	.word	0x00000000
     2d8:	.word	0x00000034
     2dc:	.word	0x0000009c
     2e0:	.word	0x00000088

000002e4 <get_next_relative_field_bit_offset>:
     2e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2e8:	mov	r8, r1
     2ec:	ldr	r1, [r0, #4]
     2f0:	mov	r5, r2
     2f4:	sub	r7, r1, #1
     2f8:	add	r2, r0, r1, lsl #4
     2fc:	add	r3, r0, r7, lsl #4
     300:	ldr	r2, [r2, #-24]	; 0xffffffe8
     304:	ldr	r3, [r3, #12]
     308:	sub	sp, sp, #532	; 0x214
     30c:	ldr	ip, [r2, #48]	; 0x30
     310:	add	r3, r3, #1
     314:	cmp	r3, ip
     318:	bge	468 <get_next_relative_field_bit_offset+0x184>
     31c:	ldr	r2, [r2, #52]	; 0x34
     320:	ldr	r6, [r2, r3, lsl #2]
     324:	ldrd	r2, [r6, #24]
     328:	cmp	r2, #0
     32c:	sbcs	ip, r3, #0
     330:	blt	358 <get_next_relative_field_bit_offset+0x74>
     334:	cmp	r5, #0
     338:	strd	r2, [r8]
     33c:	beq	424 <get_next_relative_field_bit_offset+0x140>
     340:	mvn	r2, #0
     344:	mvn	r3, #0
     348:	mov	r0, #0
     34c:	strd	r2, [r5]
     350:	add	sp, sp, #532	; 0x214
     354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     358:	lsl	r1, r1, #4
     35c:	add	r3, r0, r1
     360:	ldrd	sl, [r0, r1]
     364:	ldrd	r2, [r3, #-16]
     368:	ldr	r9, [r6, #32]
     36c:	mov	r4, r0
     370:	subs	sl, sl, r2
     374:	sbc	fp, fp, r3
     378:	cmp	r9, #0
     37c:	beq	430 <get_next_relative_field_bit_offset+0x14c>
     380:	add	r0, sp, #8
     384:	mov	r2, #520	; 0x208
     388:	mov	r1, r4
     38c:	bl	0 <memcpy>
     390:	cmp	r5, #0
     394:	str	r7, [sp, #12]
     398:	mvnne	r2, #0
     39c:	mvnne	r3, #0
     3a0:	strdne	r2, [r5]
     3a4:	ldr	r0, [r6, #20]
     3a8:	cmp	r0, #0
     3ac:	beq	3f4 <get_next_relative_field_bit_offset+0x110>
     3b0:	add	r2, sp, #4
     3b4:	add	r1, sp, #8
     3b8:	bl	0 <coda_expression_eval_bool>
     3bc:	cmp	r0, #0
     3c0:	bne	3d8 <get_next_relative_field_bit_offset+0xf4>
     3c4:	ldr	r0, [sp, #4]
     3c8:	cmp	r0, #0
     3cc:	bne	3f0 <get_next_relative_field_bit_offset+0x10c>
     3d0:	strd	sl, [r8]
     3d4:	b	350 <get_next_relative_field_bit_offset+0x6c>
     3d8:	ldr	r0, [pc, #156]	; 47c <get_next_relative_field_bit_offset+0x198>
     3dc:	bl	0 <coda_add_error_message>
     3e0:	mov	r0, r4
     3e4:	bl	0 <coda_cursor_add_to_error_message>
     3e8:	mvn	r0, #0
     3ec:	b	350 <get_next_relative_field_bit_offset+0x6c>
     3f0:	ldr	r9, [r6, #32]
     3f4:	mov	r2, r8
     3f8:	add	r1, sp, #8
     3fc:	mov	r0, r9
     400:	bl	0 <coda_expression_eval_integer>
     404:	cmp	r0, #0
     408:	beq	350 <get_next_relative_field_bit_offset+0x6c>
     40c:	ldr	r0, [pc, #108]	; 480 <get_next_relative_field_bit_offset+0x19c>
     410:	bl	0 <coda_add_error_message>
     414:	mov	r0, r4
     418:	bl	0 <coda_cursor_add_to_error_message>
     41c:	mvn	r0, #0
     420:	b	350 <get_next_relative_field_bit_offset+0x6c>
     424:	mov	r0, #0
     428:	add	sp, sp, #532	; 0x214
     42c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     430:	add	r1, sp, #8
     434:	bl	0 <coda_cursor_get_bit_size>
     438:	cmp	r0, #0
     43c:	bne	460 <get_next_relative_field_bit_offset+0x17c>
     440:	ldrd	r6, [sp, #8]
     444:	adds	sl, sl, r6
     448:	adc	fp, fp, r7
     44c:	cmp	r5, #0
     450:	strd	sl, [r8]
     454:	beq	424 <get_next_relative_field_bit_offset+0x140>
     458:	strd	r6, [r5]
     45c:	b	350 <get_next_relative_field_bit_offset+0x6c>
     460:	mvn	r0, #0
     464:	b	350 <get_next_relative_field_bit_offset+0x6c>
     468:	ldr	r3, [pc, #20]	; 484 <get_next_relative_field_bit_offset+0x1a0>
     46c:	mov	r2, #161	; 0xa1
     470:	ldr	r1, [pc, #16]	; 488 <get_next_relative_field_bit_offset+0x1a4>
     474:	ldr	r0, [pc, #16]	; 48c <get_next_relative_field_bit_offset+0x1a8>
     478:	bl	0 <__assert_fail>
     47c:	.word	0x00000000
     480:	.word	0x0000001c
     484:	.word	0x00000028
     488:	.word	0x00000034
     48c:	.word	0x000000a8

00000490 <coda_ascbin_cursor_set_product>:
     490:	ldr	r3, [r1, #20]
     494:	mov	r2, #1
     498:	cmp	r3, #0
     49c:	push	{r4, r5, r6, lr}
     4a0:	stm	r0, {r1, r2}
     4a4:	beq	4c8 <coda_ascbin_cursor_set_product+0x38>
     4a8:	mov	r4, #0
     4ac:	mov	r5, #0
     4b0:	mvn	r2, #0
     4b4:	str	r3, [r0, #8]
     4b8:	strd	r4, [r0, #16]
     4bc:	str	r2, [r0, #12]
     4c0:	mov	r0, #0
     4c4:	pop	{r4, r5, r6, pc}
     4c8:	ldr	r3, [pc, #12]	; 4dc <coda_ascbin_cursor_set_product+0x4c>
     4cc:	mov	r2, #234	; 0xea
     4d0:	ldr	r1, [pc, #8]	; 4e0 <coda_ascbin_cursor_set_product+0x50>
     4d4:	ldr	r0, [pc, #8]	; 4e4 <coda_ascbin_cursor_set_product+0x54>
     4d8:	bl	0 <__assert_fail>
     4dc:	.word	0x0000004c
     4e0:	.word	0x00000034
     4e4:	.word	0x000000cc

000004e8 <coda_ascbin_cursor_goto_record_field_by_index>:
     4e8:	ldr	r2, [r0, #4]
     4ec:	push	{r4, r5, r6, r7, r8, r9, lr}
     4f0:	sub	r2, r2, #1
     4f4:	sub	sp, sp, #20
     4f8:	mov	r3, #1
     4fc:	str	r3, [sp, #4]
     500:	add	r3, r0, r2, lsl #4
     504:	mov	r4, r0
     508:	ldr	r5, [r3, #8]
     50c:	mov	r6, r1
     510:	ldr	r3, [r5]
     514:	cmp	r3, #99	; 0x63
     518:	ldrhi	r5, [r5, #4]
     51c:	cmp	r1, #0
     520:	ldr	r3, [r5, #48]	; 0x30
     524:	blt	624 <coda_ascbin_cursor_goto_record_field_by_index+0x13c>
     528:	cmp	r1, r3
     52c:	bge	624 <coda_ascbin_cursor_goto_record_field_by_index+0x13c>
     530:	ldr	r3, [r5, #68]	; 0x44
     534:	add	r2, r0, r2, lsl #4
     538:	cmp	r3, #0
     53c:	ldrd	r8, [r2, #16]
     540:	beq	5a8 <coda_ascbin_cursor_goto_record_field_by_index+0xc0>
     544:	add	r1, sp, #8
     548:	bl	0 <coda_cursor_get_available_union_field_index>
     54c:	cmp	r0, #0
     550:	bne	61c <coda_ascbin_cursor_goto_record_field_by_index+0x134>
     554:	ldr	r3, [sp, #8]
     558:	cmp	r6, r3
     55c:	strne	r0, [sp, #4]
     560:	beq	5ec <coda_ascbin_cursor_goto_record_field_by_index+0x104>
     564:	ldr	r7, [r4, #4]
     568:	cmp	r0, #0
     56c:	add	r3, r7, #1
     570:	str	r3, [r4, #4]
     574:	beq	5f4 <coda_ascbin_cursor_goto_record_field_by_index+0x10c>
     578:	ldr	r2, [r5, #52]	; 0x34
     57c:	add	r7, r4, r7, lsl #4
     580:	ldr	r2, [r2, r6, lsl #2]
     584:	ldr	r2, [r2, #8]
     588:	str	r2, [r7, #8]
     58c:	add	r2, r4, r3, lsl #4
     590:	mov	r0, #0
     594:	lsl	r3, r3, #4
     598:	str	r6, [r2, #-4]
     59c:	strd	r8, [r4, r3]
     5a0:	add	sp, sp, #20
     5a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
     5a8:	add	r2, sp, #8
     5ac:	bl	0 <get_relative_field_bit_offset_by_index>
     5b0:	cmp	r0, #0
     5b4:	bne	61c <coda_ascbin_cursor_goto_record_field_by_index+0x134>
     5b8:	ldr	r1, [r5, #52]	; 0x34
     5bc:	ldrd	r2, [sp, #8]
     5c0:	ldr	r1, [r1, r6, lsl #2]
     5c4:	adds	r8, r8, r2
     5c8:	adc	r9, r9, r3
     5cc:	ldr	r0, [r1, #20]
     5d0:	cmp	r0, #0
     5d4:	beq	5ec <coda_ascbin_cursor_goto_record_field_by_index+0x104>
     5d8:	add	r2, sp, #4
     5dc:	mov	r1, r4
     5e0:	bl	0 <coda_expression_eval_bool>
     5e4:	cmp	r0, #0
     5e8:	bne	60c <coda_ascbin_cursor_goto_record_field_by_index+0x124>
     5ec:	ldr	r0, [sp, #4]
     5f0:	b	564 <coda_ascbin_cursor_goto_record_field_by_index+0x7c>
     5f4:	ldr	r0, [r5]
     5f8:	bl	0 <coda_no_data_singleton>
     5fc:	add	r7, r4, r7, lsl #4
     600:	ldr	r3, [r4, #4]
     604:	str	r0, [r7, #8]
     608:	b	58c <coda_ascbin_cursor_goto_record_field_by_index+0xa4>
     60c:	ldr	r0, [pc, #40]	; 63c <coda_ascbin_cursor_goto_record_field_by_index+0x154>
     610:	bl	0 <coda_add_error_message>
     614:	mov	r0, r4
     618:	bl	0 <coda_cursor_add_to_error_message>
     61c:	mvn	r0, #0
     620:	b	5a0 <coda_ascbin_cursor_goto_record_field_by_index+0xb8>
     624:	mvn	r0, #100	; 0x64
     628:	mov	r2, r6
     62c:	ldr	r1, [pc, #12]	; 640 <coda_ascbin_cursor_goto_record_field_by_index+0x158>
     630:	bl	0 <coda_set_error>
     634:	mvn	r0, #0
     638:	b	5a0 <coda_ascbin_cursor_goto_record_field_by_index+0xb8>
     63c:	.word	0x00000000
     640:	.word	0x000000e8

00000644 <coda_ascbin_cursor_goto_next_record_field>:
     644:	ldr	r3, [r0, #4]
     648:	push	{r4, r5, r6, r7, r8, r9, lr}
     64c:	sub	r1, r3, #2
     650:	sub	sp, sp, #540	; 0x21c
     654:	mov	r2, #1
     658:	str	r2, [sp, #4]
     65c:	add	r2, r0, r1, lsl #4
     660:	sub	r9, r3, #1
     664:	ldr	r8, [r2, #8]
     668:	add	r3, r0, r9, lsl #4
     66c:	mov	r4, r0
     670:	ldr	r2, [r8]
     674:	ldr	r5, [r3, #12]
     678:	cmp	r2, #99	; 0x63
     67c:	ldrhi	r8, [r8, #4]
     680:	adds	r5, r5, #1
     684:	ldr	r3, [r8, #48]	; 0x30
     688:	bmi	7cc <coda_ascbin_cursor_goto_next_record_field+0x188>
     68c:	cmp	r5, r3
     690:	bge	7cc <coda_ascbin_cursor_goto_next_record_field+0x188>
     694:	ldr	r2, [r8, #68]	; 0x44
     698:	add	r1, r0, r1, lsl #4
     69c:	cmp	r2, #0
     6a0:	ldrd	r6, [r1, #16]
     6a4:	beq	720 <coda_ascbin_cursor_goto_next_record_field+0xdc>
     6a8:	mov	r2, #520	; 0x208
     6ac:	mov	r1, r4
     6b0:	add	r0, sp, #16
     6b4:	bl	0 <memcpy>
     6b8:	add	r0, sp, #16
     6bc:	add	r1, sp, #8
     6c0:	str	r9, [sp, #20]
     6c4:	bl	0 <coda_cursor_get_available_union_field_index>
     6c8:	cmp	r0, #0
     6cc:	bne	7c4 <coda_ascbin_cursor_goto_next_record_field+0x180>
     6d0:	ldr	r3, [sp, #8]
     6d4:	cmp	r5, r3
     6d8:	strne	r0, [sp, #4]
     6dc:	beq	784 <coda_ascbin_cursor_goto_next_record_field+0x140>
     6e0:	ldr	r3, [r4, #4]
     6e4:	ldr	r0, [r8]
     6e8:	sub	r8, r3, #1
     6ec:	bl	0 <coda_no_data_singleton>
     6f0:	ldr	r3, [r4, #4]
     6f4:	add	r8, r4, r8, lsl #4
     6f8:	sub	r3, r3, #1
     6fc:	lsl	r2, r3, #4
     700:	str	r0, [r8, #8]
     704:	add	r2, r4, r2
     708:	mov	r0, #0
     70c:	add	r4, r4, r3, lsl #4
     710:	str	r5, [r2, #12]
     714:	strd	r6, [r4, #16]
     718:	add	sp, sp, #540	; 0x21c
     71c:	pop	{r4, r5, r6, r7, r8, r9, pc}
     720:	add	r1, sp, #8
     724:	bl	2e4 <get_next_relative_field_bit_offset>
     728:	cmp	r0, #0
     72c:	bne	7c4 <coda_ascbin_cursor_goto_next_record_field+0x180>
     730:	ldr	r3, [r8, #52]	; 0x34
     734:	ldrd	r0, [sp, #8]
     738:	ldr	r3, [r3, r5, lsl #2]
     73c:	adds	r6, r6, r0
     740:	adc	r7, r7, r1
     744:	ldr	r9, [r3, #20]
     748:	cmp	r9, #0
     74c:	beq	784 <coda_ascbin_cursor_goto_next_record_field+0x140>
     750:	mov	r2, #520	; 0x208
     754:	mov	r1, r4
     758:	add	r0, sp, #16
     75c:	bl	0 <memcpy>
     760:	ldr	r3, [sp, #20]
     764:	add	r1, sp, #16
     768:	sub	r3, r3, #1
     76c:	mov	r0, r9
     770:	add	r2, sp, #4
     774:	str	r3, [sp, #20]
     778:	bl	0 <coda_expression_eval_bool>
     77c:	cmp	r0, #0
     780:	bne	7b4 <coda_ascbin_cursor_goto_next_record_field+0x170>
     784:	ldr	r0, [sp, #4]
     788:	cmp	r0, #0
     78c:	beq	6e0 <coda_ascbin_cursor_goto_next_record_field+0x9c>
     790:	ldr	r2, [r8, #52]	; 0x34
     794:	ldr	r3, [r4, #4]
     798:	ldr	r1, [r2, r5, lsl #2]
     79c:	sub	r3, r3, #1
     7a0:	lsl	r2, r3, #4
     7a4:	ldr	r0, [r1, #8]
     7a8:	add	r1, r4, r2
     7ac:	str	r0, [r1, #8]
     7b0:	b	704 <coda_ascbin_cursor_goto_next_record_field+0xc0>
     7b4:	ldr	r0, [pc, #40]	; 7e4 <coda_ascbin_cursor_goto_next_record_field+0x1a0>
     7b8:	bl	0 <coda_add_error_message>
     7bc:	mov	r0, r4
     7c0:	bl	0 <coda_cursor_add_to_error_message>
     7c4:	mvn	r0, #0
     7c8:	b	718 <coda_ascbin_cursor_goto_next_record_field+0xd4>
     7cc:	mvn	r0, #100	; 0x64
     7d0:	mov	r2, r5
     7d4:	ldr	r1, [pc, #12]	; 7e8 <coda_ascbin_cursor_goto_next_record_field+0x1a4>
     7d8:	bl	0 <coda_set_error>
     7dc:	mvn	r0, #0
     7e0:	b	718 <coda_ascbin_cursor_goto_next_record_field+0xd4>
     7e4:	.word	0x00000000
     7e8:	.word	0x000000e8

000007ec <coda_ascbin_cursor_goto_array_element>:
     7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7f0:	mov	r5, r0
     7f4:	ldr	fp, [r0, #4]
     7f8:	sub	sp, sp, #12
     7fc:	sub	r0, fp, #1
     800:	add	r3, r5, r0, lsl #4
     804:	ldr	sl, [r3, #8]
     808:	ldr	r3, [sl]
     80c:	cmp	r3, #99	; 0x63
     810:	ldrhi	sl, [sl, #4]
     814:	ldr	r3, [sl, #48]	; 0x30
     818:	cmp	r3, r1
     81c:	bne	99c <coda_ascbin_cursor_goto_array_element+0x1b0>
     820:	cmp	r1, #0
     824:	movgt	r7, #0
     828:	subgt	r9, r2, #4
     82c:	movgt	r4, r7
     830:	addgt	r8, sl, #52	; 0x34
     834:	bgt	870 <coda_ascbin_cursor_goto_array_element+0x84>
     838:	b	9d0 <coda_ascbin_cursor_goto_array_element+0x1e4>
     83c:	ldr	r2, [r9, #4]!
     840:	cmp	r6, r2
     844:	movgt	r3, #0
     848:	movle	r3, #1
     84c:	orrs	r3, r3, r2, lsr #31
     850:	bne	89c <coda_ascbin_cursor_goto_array_element+0xb0>
     854:	cmp	r7, #0
     858:	ldr	r3, [sl, #48]	; 0x30
     85c:	mulne	r4, r6, r4
     860:	add	r7, r7, #1
     864:	cmp	r3, r7
     868:	add	r4, r4, r2
     86c:	ble	8b8 <coda_ascbin_cursor_goto_array_element+0xcc>
     870:	ldr	r6, [r8], #4
     874:	cmn	r6, #1
     878:	bne	83c <coda_ascbin_cursor_goto_array_element+0x50>
     87c:	mov	r2, sp
     880:	mov	r1, r5
     884:	ldr	r0, [r8, #28]
     888:	bl	0 <coda_expression_eval_integer>
     88c:	cmp	r0, #0
     890:	bne	9b4 <coda_ascbin_cursor_goto_array_element+0x1c8>
     894:	ldr	r6, [sp]
     898:	b	83c <coda_ascbin_cursor_goto_array_element+0x50>
     89c:	mvn	r0, #106	; 0x6a
     8a0:	mov	r3, r6
     8a4:	ldr	r1, [pc, #352]	; a0c <coda_ascbin_cursor_goto_array_element+0x220>
     8a8:	bl	0 <coda_set_error>
     8ac:	mvn	r0, #0
     8b0:	add	sp, sp, #12
     8b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8b8:	ldr	r0, [r5, #4]
     8bc:	ldr	lr, [sl, #40]	; 0x28
     8c0:	add	ip, r0, #1
     8c4:	lsl	fp, r0, #4
     8c8:	ldrd	r8, [lr, #24]
     8cc:	ldrd	r6, [r5, fp]
     8d0:	add	fp, r5, fp
     8d4:	cmp	r8, #0
     8d8:	sbcs	r3, r9, #0
     8dc:	str	ip, [r5, #4]
     8e0:	strd	r6, [fp, #16]
     8e4:	blt	924 <coda_ascbin_cursor_goto_array_element+0x138>
     8e8:	mul	r9, r4, r9
     8ec:	asr	r1, r4, #31
     8f0:	umull	r2, r3, r4, r8
     8f4:	mla	r8, r8, r1, r9
     8f8:	adds	r2, r2, r6
     8fc:	add	r3, r8, r3
     900:	adc	r3, r3, r7
     904:	sub	r1, ip, #1
     908:	strd	r2, [fp, #16]
     90c:	add	ip, r5, r1, lsl #4
     910:	mov	r0, #0
     914:	str	lr, [ip, #8]
     918:	str	r4, [ip, #12]
     91c:	add	sp, sp, #12
     920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     924:	cmp	r4, #0
     928:	beq	a00 <coda_ascbin_cursor_goto_array_element+0x214>
     92c:	mov	r6, #0
     930:	b	964 <coda_ascbin_cursor_goto_array_element+0x178>
     934:	ldr	ip, [r5, #4]
     938:	ldrd	r8, [sp]
     93c:	sub	r0, ip, #1
     940:	lsl	ip, ip, #4
     944:	mov	r1, r0
     948:	ldrd	r2, [r5, ip]
     94c:	ldr	lr, [sl, #40]	; 0x28
     950:	adds	r2, r2, r8
     954:	adc	r3, r3, r9
     958:	cmp	r4, r6
     95c:	strd	r2, [r5, ip]
     960:	beq	90c <coda_ascbin_cursor_goto_array_element+0x120>
     964:	add	r0, r5, r0, lsl #4
     968:	mov	r1, sp
     96c:	str	r6, [r0, #12]
     970:	str	lr, [r0, #8]
     974:	mov	r0, r5
     978:	bl	0 <coda_cursor_get_bit_size>
     97c:	add	r6, r6, #1
     980:	cmp	r0, #0
     984:	beq	934 <coda_ascbin_cursor_goto_array_element+0x148>
     988:	ldr	r3, [r5, #4]
     98c:	mvn	r0, #0
     990:	add	r3, r3, r0
     994:	str	r3, [r5, #4]
     998:	b	8b0 <coda_ascbin_cursor_goto_array_element+0xc4>
     99c:	mov	r2, r1
     9a0:	mvn	r0, #105	; 0x69
     9a4:	ldr	r1, [pc, #100]	; a10 <coda_ascbin_cursor_goto_array_element+0x224>
     9a8:	bl	0 <coda_set_error>
     9ac:	mvn	r0, #0
     9b0:	b	8b0 <coda_ascbin_cursor_goto_array_element+0xc4>
     9b4:	mov	r1, r7
     9b8:	ldr	r0, [pc, #84]	; a14 <coda_ascbin_cursor_goto_array_element+0x228>
     9bc:	bl	0 <coda_add_error_message>
     9c0:	mov	r0, r5
     9c4:	bl	0 <coda_cursor_add_to_error_message>
     9c8:	mov	r0, r6
     9cc:	b	8b0 <coda_ascbin_cursor_goto_array_element+0xc4>
     9d0:	ldr	lr, [sl, #40]	; 0x28
     9d4:	add	r0, r5, r0, lsl #4
     9d8:	add	ip, fp, #1
     9dc:	ldrd	r8, [lr, #24]
     9e0:	ldrd	r6, [r0, #16]
     9e4:	add	fp, r5, fp, lsl #4
     9e8:	cmp	r8, #0
     9ec:	sbcs	r3, r9, #0
     9f0:	str	ip, [r5, #4]
     9f4:	movge	r4, #0
     9f8:	strd	r6, [fp, #16]
     9fc:	bge	8e8 <coda_ascbin_cursor_goto_array_element+0xfc>
     a00:	sub	r1, ip, #1
     a04:	mov	r4, #0
     a08:	b	90c <coda_ascbin_cursor_goto_array_element+0x120>
     a0c:	.word	0x00000178
     a10:	.word	0x00000118
     a14:	.word	0x00000160

00000a18 <coda_ascbin_cursor_goto_array_element_by_index>:
     a18:	ldr	r3, [r0, #4]
     a1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a20:	sub	r2, r3, #1
     a24:	mov	r5, r1
     a28:	add	r1, r0, r2, lsl #4
     a2c:	mov	r4, r0
     a30:	ldr	sl, [r1, #8]
     a34:	sub	sp, sp, #12
     a38:	ldr	r1, [sl]
     a3c:	cmp	r1, #99	; 0x63
     a40:	ldr	r1, [pc, #328]	; b90 <coda_ascbin_cursor_goto_array_element_by_index+0x178>
     a44:	ldrhi	sl, [sl, #4]
     a48:	bl	0 <__aeabi_read_tp>
     a4c:	ldr	r1, [pc, r1]
     a50:	ldr	r1, [r0, r1]
     a54:	cmp	r1, #0
     a58:	bne	ac4 <coda_ascbin_cursor_goto_array_element_by_index+0xac>
     a5c:	ldr	ip, [sl, #40]	; 0x28
     a60:	add	r2, r4, r2, lsl #4
     a64:	lsl	lr, r3, #4
     a68:	ldrd	r8, [ip, #24]
     a6c:	ldrd	r6, [r2, #16]
     a70:	add	fp, r4, lr
     a74:	cmp	r8, #0
     a78:	add	r2, r3, #1
     a7c:	sbcs	r1, r9, #0
     a80:	str	r2, [r4, #4]
     a84:	strd	r6, [fp, #16]
     a88:	blt	b0c <coda_ascbin_cursor_goto_array_element_by_index+0xf4>
     a8c:	mul	r9, r5, r9
     a90:	asr	r1, r5, #31
     a94:	umull	r2, r3, r5, r8
     a98:	mla	r8, r8, r1, r9
     a9c:	adds	r2, r2, r6
     aa0:	add	r3, r8, r3
     aa4:	adc	r3, r3, r7
     aa8:	strd	r2, [fp, #16]
     aac:	add	r4, r4, lr
     ab0:	mov	r0, #0
     ab4:	str	ip, [r4, #8]
     ab8:	str	r5, [r4, #12]
     abc:	add	sp, sp, #12
     ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ac4:	mov	r1, sp
     ac8:	mov	r0, r4
     acc:	bl	0 <coda_cursor_get_num_elements>
     ad0:	cmp	r0, #0
     ad4:	bne	b04 <coda_ascbin_cursor_goto_array_element_by_index+0xec>
     ad8:	cmp	r5, #0
     adc:	ldr	r3, [sp]
     ae0:	blt	af4 <coda_ascbin_cursor_goto_array_element_by_index+0xdc>
     ae4:	cmp	r5, r3
     ae8:	ldrlt	r3, [r4, #4]
     aec:	sublt	r2, r3, #1
     af0:	blt	a5c <coda_ascbin_cursor_goto_array_element_by_index+0x44>
     af4:	mov	r2, r5
     af8:	ldr	r1, [pc, #148]	; b94 <coda_ascbin_cursor_goto_array_element_by_index+0x17c>
     afc:	mvn	r0, #106	; 0x6a
     b00:	bl	0 <coda_set_error>
     b04:	mvn	r0, #0
     b08:	b	abc <coda_ascbin_cursor_goto_array_element_by_index+0xa4>
     b0c:	cmp	r5, #0
     b10:	ble	aac <coda_ascbin_cursor_goto_array_element_by_index+0x94>
     b14:	mov	lr, r3
     b18:	mov	r6, #0
     b1c:	b	b4c <coda_ascbin_cursor_goto_array_element_by_index+0x134>
     b20:	ldr	r2, [r4, #4]
     b24:	ldrd	r0, [sp]
     b28:	sub	lr, r2, #1
     b2c:	lsl	ip, r2, #4
     b30:	ldrd	r2, [r4, ip]
     b34:	adds	r0, r0, r2
     b38:	adc	r1, r1, r3
     b3c:	cmp	r5, r6
     b40:	strd	r0, [r4, ip]
     b44:	ldr	ip, [sl, #40]	; 0x28
     b48:	beq	b88 <coda_ascbin_cursor_goto_array_element_by_index+0x170>
     b4c:	add	lr, r4, lr, lsl #4
     b50:	mov	r1, sp
     b54:	str	r6, [lr, #12]
     b58:	str	ip, [lr, #8]
     b5c:	mov	r0, r4
     b60:	bl	0 <coda_cursor_get_bit_size>
     b64:	add	r6, r6, #1
     b68:	cmp	r0, #0
     b6c:	beq	b20 <coda_ascbin_cursor_goto_array_element_by_index+0x108>
     b70:	ldr	r3, [r4, #4]
     b74:	mvn	r0, #0
     b78:	add	r3, r3, r0
     b7c:	str	r3, [r4, #4]
     b80:	add	sp, sp, #12
     b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b88:	lsl	lr, lr, #4
     b8c:	b	aac <coda_ascbin_cursor_goto_array_element_by_index+0x94>
     b90:	.word	0x0000013c
     b94:	.word	0x00000178

00000b98 <coda_ascbin_cursor_goto_next_array_element>:
     b98:	ldr	r3, [r0, #4]
     b9c:	push	{r4, r5, r6, r7, lr}
     ba0:	mov	r4, r0
     ba4:	add	r2, r0, r3, lsl #4
     ba8:	sub	r3, r3, #1
     bac:	ldr	r2, [r2, #-24]	; 0xffffffe8
     bb0:	sub	sp, sp, #12
     bb4:	mov	r7, sp
     bb8:	ldr	r1, [r2]
     bbc:	cmp	r1, #99	; 0x63
     bc0:	movls	r6, r2
     bc4:	ldrhi	r6, [r2, #4]
     bc8:	ldr	r2, [pc, #192]	; c90 <coda_ascbin_cursor_goto_next_array_element+0xf8>
     bcc:	add	r1, r4, r3, lsl #4
     bd0:	bl	0 <__aeabi_read_tp>
     bd4:	ldr	r2, [pc, r2]
     bd8:	ldr	r5, [r1, #12]
     bdc:	ldr	r2, [r0, r2]
     be0:	add	r5, r5, #1
     be4:	cmp	r2, #0
     be8:	beq	c2c <coda_ascbin_cursor_goto_next_array_element+0x94>
     bec:	str	r3, [r4, #4]
     bf0:	mov	r1, sp
     bf4:	mov	r0, r4
     bf8:	bl	0 <coda_cursor_get_num_elements>
     bfc:	ldr	r3, [r4, #4]
     c00:	cmp	r0, #0
     c04:	addne	r3, r3, #1
     c08:	strne	r3, [r4, #4]
     c0c:	bne	c88 <coda_ascbin_cursor_goto_next_array_element+0xf0>
     c10:	add	r3, r3, #1
     c14:	cmp	r5, #0
     c18:	str	r3, [r4, #4]
     c1c:	ldr	r3, [sp]
     c20:	blt	c78 <coda_ascbin_cursor_goto_next_array_element+0xe0>
     c24:	cmp	r5, r3
     c28:	bge	c78 <coda_ascbin_cursor_goto_next_array_element+0xe0>
     c2c:	mov	r1, r7
     c30:	mov	r0, r4
     c34:	bl	0 <coda_cursor_get_bit_size>
     c38:	cmp	r0, #0
     c3c:	bne	c88 <coda_ascbin_cursor_goto_next_array_element+0xf0>
     c40:	ldr	r1, [r4, #4]
     c44:	ldr	r2, [r6, #40]	; 0x28
     c48:	sub	r3, r1, #1
     c4c:	lsl	r1, r1, #4
     c50:	add	r3, r4, r3, lsl #4
     c54:	ldrd	r6, [sp]
     c58:	str	r2, [r3, #8]
     c5c:	str	r5, [r3, #12]
     c60:	ldrd	r2, [r4, r1]
     c64:	adds	r2, r2, r6
     c68:	adc	r3, r3, r7
     c6c:	strd	r2, [r4, r1]
     c70:	add	sp, sp, #12
     c74:	pop	{r4, r5, r6, r7, pc}
     c78:	mov	r2, r5
     c7c:	ldr	r1, [pc, #16]	; c94 <coda_ascbin_cursor_goto_next_array_element+0xfc>
     c80:	mvn	r0, #106	; 0x6a
     c84:	bl	0 <coda_set_error>
     c88:	mvn	r0, #0
     c8c:	b	c70 <coda_ascbin_cursor_goto_next_array_element+0xd8>
     c90:	.word	0x000000b4
     c94:	.word	0x00000178

00000c98 <coda_ascbin_cursor_goto_attributes>:
     c98:	push	{r4, r5, r6, r7, r8, lr}
     c9c:	mov	r4, r0
     ca0:	ldr	r5, [r0, #4]
     ca4:	mvn	r6, #0
     ca8:	mvn	r7, #0
     cac:	add	r3, r0, r5, lsl #4
     cb0:	ldr	r3, [r3, #-8]
     cb4:	ldr	r0, [r3]
     cb8:	cmp	r0, #99	; 0x63
     cbc:	ldrhi	r3, [r3, #4]
     cc0:	ldrhi	r0, [r3]
     cc4:	add	r3, r5, #1
     cc8:	str	r3, [r4, #4]
     ccc:	bl	0 <coda_type_empty_record>
     cd0:	ldr	r3, [r4, #4]
     cd4:	add	r5, r4, r5, lsl #4
     cd8:	mvn	r1, #0
     cdc:	add	r2, r4, r3, lsl #4
     ce0:	lsl	r3, r3, #4
     ce4:	str	r0, [r5, #8]
     ce8:	str	r1, [r2, #-4]
     cec:	mov	r0, #0
     cf0:	strd	r6, [r4, r3]
     cf4:	pop	{r4, r5, r6, r7, r8, pc}

00000cf8 <coda_ascbin_cursor_use_base_type_of_special_type>:
     cf8:	ldr	r3, [r0, #4]
     cfc:	sub	r3, r3, #1
     d00:	lsl	r3, r3, #4
     d04:	add	r2, r0, r3
     d08:	add	r3, r0, r3
     d0c:	ldr	r2, [r2, #8]
     d10:	mov	r0, #0
     d14:	ldr	r1, [r2]
     d18:	cmp	r1, #99	; 0x63
     d1c:	ldrhi	r2, [r2, #4]
     d20:	ldr	r2, [r2, #44]	; 0x2c
     d24:	str	r2, [r3, #8]
     d28:	bx	lr

00000d2c <coda_ascbin_cursor_get_bit_size>:
     d2c:	ldr	r3, [r0, #4]
     d30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d34:	sub	sp, sp, #564	; 0x234
     d38:	add	r3, r0, r3, lsl #4
     d3c:	ldr	r4, [r3, #-8]
     d40:	ldr	r3, [r4]
     d44:	cmp	r3, #99	; 0x63
     d48:	ldrhi	r4, [r4, #4]
     d4c:	ldrd	r2, [r4, #24]
     d50:	cmp	r2, #0
     d54:	sbcs	ip, r3, #0
     d58:	blt	d70 <coda_ascbin_cursor_get_bit_size+0x44>
     d5c:	mov	r5, #0
     d60:	strd	r2, [r1]
     d64:	mov	r0, r5
     d68:	add	sp, sp, #564	; 0x234
     d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d70:	ldr	r3, [r4, #8]
     d74:	mov	sl, r1
     d78:	cmp	r3, #0
     d7c:	mov	r6, r0
     d80:	beq	dcc <coda_ascbin_cursor_get_bit_size+0xa0>
     d84:	cmp	r3, #1
     d88:	bne	db8 <coda_ascbin_cursor_get_bit_size+0x8c>
     d8c:	add	r1, sp, #24
     d90:	bl	0 <coda_cursor_get_num_elements>
     d94:	subs	r5, r0, #0
     d98:	bne	e88 <coda_ascbin_cursor_get_bit_size+0x15c>
     d9c:	ldr	r7, [sp, #24]
     da0:	cmp	r7, #0
     da4:	bne	e90 <coda_ascbin_cursor_get_bit_size+0x164>
     da8:	mov	r2, #0
     dac:	mov	r3, #0
     db0:	strd	r2, [sl]
     db4:	b	d64 <coda_ascbin_cursor_get_bit_size+0x38>
     db8:	ldr	r3, [pc, #1036]	; 11cc <coda_ascbin_cursor_get_bit_size+0x4a0>
     dbc:	mov	r2, #768	; 0x300
     dc0:	ldr	r1, [pc, #1032]	; 11d0 <coda_ascbin_cursor_get_bit_size+0x4a4>
     dc4:	ldr	r0, [pc, #1032]	; 11d4 <coda_ascbin_cursor_get_bit_size+0x4a8>
     dc8:	bl	0 <__assert_fail>
     dcc:	ldr	r3, [pc, #1028]	; 11d8 <coda_ascbin_cursor_get_bit_size+0x4ac>
     dd0:	bl	0 <__aeabi_read_tp>
     dd4:	ldr	r3, [pc, r3]
     dd8:	ldr	r3, [r0, r3]
     ddc:	cmp	r3, #0
     de0:	beq	e48 <coda_ascbin_cursor_get_bit_size+0x11c>
     de4:	ldr	r0, [r4, #32]
     de8:	cmp	r0, #0
     dec:	beq	e48 <coda_ascbin_cursor_get_bit_size+0x11c>
     df0:	mov	r2, r1
     df4:	mov	r1, r6
     df8:	bl	0 <coda_expression_eval_integer>
     dfc:	subs	r5, r0, #0
     e00:	bne	11b4 <coda_ascbin_cursor_get_bit_size+0x488>
     e04:	ldrd	r0, [r4, #24]
     e08:	mvn	r3, #0
     e0c:	mvn	r2, #7
     e10:	cmp	r1, r3
     e14:	cmpeq	r0, r2
     e18:	beq	1168 <coda_ascbin_cursor_get_bit_size+0x43c>
     e1c:	ldrd	r2, [sl]
     e20:	cmp	r2, #0
     e24:	sbcs	r1, r3, #0
     e28:	bge	d64 <coda_ascbin_cursor_get_bit_size+0x38>
     e2c:	ldr	r1, [pc, #936]	; 11dc <coda_ascbin_cursor_get_bit_size+0x4b0>
     e30:	ldr	r0, [pc, #936]	; 11e0 <coda_ascbin_cursor_get_bit_size+0x4b4>
     e34:	bl	0 <coda_set_error>
     e38:	mov	r0, r6
     e3c:	bl	0 <coda_cursor_add_to_error_message>
     e40:	mvn	r5, #0
     e44:	b	d64 <coda_ascbin_cursor_get_bit_size+0x38>
     e48:	ldr	r3, [r4, #68]	; 0x44
     e4c:	cmp	r3, #0
     e50:	beq	fa8 <coda_ascbin_cursor_get_bit_size+0x27c>
     e54:	mov	r1, r6
     e58:	mov	r2, #520	; 0x208
     e5c:	add	r0, sp, #40	; 0x28
     e60:	bl	0 <memcpy>
     e64:	add	r0, sp, #40	; 0x28
     e68:	bl	0 <coda_cursor_goto_available_union_field>
     e6c:	cmp	r0, #0
     e70:	bne	e88 <coda_ascbin_cursor_get_bit_size+0x15c>
     e74:	mov	r1, sl
     e78:	add	r0, sp, #40	; 0x28
     e7c:	bl	0 <coda_cursor_get_bit_size>
     e80:	subs	r5, r0, #0
     e84:	beq	d64 <coda_ascbin_cursor_get_bit_size+0x38>
     e88:	mvn	r5, #0
     e8c:	b	d64 <coda_ascbin_cursor_get_bit_size+0x38>
     e90:	ldr	r3, [r4, #40]	; 0x28
     e94:	str	r3, [sp]
     e98:	ldrd	r2, [r3, #24]
     e9c:	cmp	r2, #0
     ea0:	mov	r1, r3
     ea4:	sbcs	r3, r3, #0
     ea8:	mov	r0, r2
     eac:	blt	ed4 <coda_ascbin_cursor_get_bit_size+0x1a8>
     eb0:	strd	r0, [sp]
     eb4:	mul	r3, r7, r1
     eb8:	ldr	r2, [sp]
     ebc:	asr	r9, r7, #31
     ec0:	umull	r0, r1, r7, r0
     ec4:	mla	r2, r2, r9, r3
     ec8:	add	r1, r2, r1
     ecc:	strd	r0, [sl]
     ed0:	b	d64 <coda_ascbin_cursor_get_bit_size+0x38>
     ed4:	add	fp, sp, #40	; 0x28
     ed8:	mov	r1, r6
     edc:	mov	r2, #520	; 0x208
     ee0:	mov	r0, fp
     ee4:	bl	0 <memcpy>
     ee8:	ldr	r3, [sp, #44]	; 0x2c
     eec:	add	r2, sp, #48	; 0x30
     ef0:	add	ip, r3, #1
     ef4:	add	r3, r2, r3, lsl #4
     ef8:	add	r1, r2, ip, lsl #4
     efc:	ldrd	r2, [r3, #-8]
     f00:	cmp	r7, #0
     f04:	str	ip, [sp, #44]	; 0x2c
     f08:	strd	r2, [r1, #-8]
     f0c:	ble	1198 <coda_ascbin_cursor_get_bit_size+0x46c>
     f10:	mov	r9, r5
     f14:	mov	r6, #0
     f18:	mov	r7, #0
     f1c:	add	r8, sp, #32
     f20:	ldr	r3, [sp]
     f24:	b	f7c <coda_ascbin_cursor_get_bit_size+0x250>
     f28:	ldrd	r2, [r8]
     f2c:	ldr	ip, [sp, #44]	; 0x2c
     f30:	add	r9, r9, #1
     f34:	mov	r1, r3
     f38:	mov	r0, r2
     f3c:	add	r3, sp, #48	; 0x30
     f40:	add	lr, r3, ip, lsl #4
     f44:	mov	r2, r0
     f48:	adds	r0, r0, r6
     f4c:	mov	r3, r1
     f50:	adc	r1, r1, r7
     f54:	mov	r6, r0
     f58:	mov	r7, r1
     f5c:	ldrd	r0, [lr, #-8]
     f60:	adds	r2, r2, r0
     f64:	adc	r3, r3, r1
     f68:	ldr	r1, [sp, #24]
     f6c:	strd	r2, [lr, #-8]
     f70:	cmp	r1, r9
     f74:	ble	11a0 <coda_ascbin_cursor_get_bit_size+0x474>
     f78:	ldr	r3, [r4, #40]	; 0x28
     f7c:	sub	ip, ip, #1
     f80:	add	r2, sp, #560	; 0x230
     f84:	add	ip, r2, ip, lsl #4
     f88:	mov	r1, r8
     f8c:	mov	r0, fp
     f90:	str	r3, [ip, #-512]	; 0xfffffe00
     f94:	str	r9, [ip, #-508]	; 0xfffffe04
     f98:	bl	0 <coda_cursor_get_bit_size>
     f9c:	cmp	r0, #0
     fa0:	beq	f28 <coda_ascbin_cursor_get_bit_size+0x1fc>
     fa4:	b	e88 <coda_ascbin_cursor_get_bit_size+0x15c>
     fa8:	ldr	r3, [r4, #48]	; 0x30
     fac:	cmp	r3, #0
     fb0:	ble	1184 <coda_ascbin_cursor_get_bit_size+0x458>
     fb4:	add	fp, sp, #40	; 0x28
     fb8:	mov	r2, #520	; 0x208
     fbc:	mov	r1, r6
     fc0:	mov	r0, fp
     fc4:	bl	0 <memcpy>
     fc8:	mov	r0, fp
     fcc:	bl	0 <coda_cursor_goto_first_record_field>
     fd0:	cmp	r0, #0
     fd4:	bne	e88 <coda_ascbin_cursor_get_bit_size+0x15c>
     fd8:	ldr	r3, [r4, #48]	; 0x30
     fdc:	cmp	r3, #0
     fe0:	ble	1184 <coda_ascbin_cursor_get_bit_size+0x458>
     fe4:	mov	r0, #0
     fe8:	mov	r1, #0
     fec:	mov	r5, #1
     ff0:	mov	r9, r5
     ff4:	add	r8, sp, #32
     ff8:	str	fp, [sp, #8]
     ffc:	str	sl, [sp, #12]
    1000:	strd	r0, [sp]
    1004:	b	10f0 <coda_ascbin_cursor_get_bit_size+0x3c4>
    1008:	mov	r1, r8
    100c:	ldr	r0, [sp, #8]
    1010:	bl	0 <coda_cursor_get_bit_size>
    1014:	cmp	r0, #0
    1018:	bne	e88 <coda_ascbin_cursor_get_bit_size+0x15c>
    101c:	ldrd	r0, [r8]
    1020:	ldrd	sl, [sp]
    1024:	ldr	r3, [r4, #48]	; 0x30
    1028:	adds	sl, sl, r0
    102c:	adc	fp, fp, r1
    1030:	sub	r2, r3, #1
    1034:	cmp	r7, r2
    1038:	strd	sl, [sp]
    103c:	movge	ip, r5
    1040:	bge	10e4 <coda_ascbin_cursor_get_bit_size+0x3b8>
    1044:	ldr	r2, [r4, #52]	; 0x34
    1048:	str	r9, [sp, #20]
    104c:	lsl	r7, r5, #2
    1050:	ldr	r1, [r2, r5, lsl #2]
    1054:	ldr	r0, [r1, #20]
    1058:	cmp	r0, #0
    105c:	beq	108c <coda_ascbin_cursor_get_bit_size+0x360>
    1060:	add	r2, sp, #20
    1064:	mov	r1, r6
    1068:	bl	0 <coda_expression_eval_bool>
    106c:	cmp	r0, #0
    1070:	bne	e88 <coda_ascbin_cursor_get_bit_size+0x15c>
    1074:	ldr	r3, [sp, #20]
    1078:	cmp	r3, #0
    107c:	beq	1138 <coda_ascbin_cursor_get_bit_size+0x40c>
    1080:	ldr	r2, [r4, #52]	; 0x34
    1084:	ldr	r3, [r4, #48]	; 0x30
    1088:	ldr	r1, [r2, r7]
    108c:	ldr	r2, [sp, #44]	; 0x2c
    1090:	ldr	r0, [r1, #8]
    1094:	sub	r2, r2, #1
    1098:	add	r1, sp, #560	; 0x230
    109c:	lsl	ip, r2, #4
    10a0:	add	r1, r1, ip
    10a4:	str	r0, [r1, #-512]	; 0xfffffe00
    10a8:	ldr	r1, [r6, #4]
    10ac:	add	r0, sp, #560	; 0x230
    10b0:	add	ip, r0, ip
    10b4:	lsl	r1, r1, #4
    10b8:	add	r0, sp, #48	; 0x30
    10bc:	add	r2, r0, r2, lsl #4
    10c0:	ldrd	sl, [r8, #-8]
    10c4:	ldrd	r0, [r1, r6]
    10c8:	str	r5, [ip, #-508]	; 0xfffffe04
    10cc:	mov	ip, r5
    10d0:	adds	sl, sl, r0
    10d4:	adc	fp, fp, r1
    10d8:	mov	r0, sl
    10dc:	mov	r1, fp
    10e0:	strd	r0, [r2, #8]
    10e4:	cmp	r3, ip
    10e8:	add	r5, r5, #1
    10ec:	ble	11a8 <coda_ascbin_cursor_get_bit_size+0x47c>
    10f0:	sub	r3, r3, #1
    10f4:	sub	r7, r5, #1
    10f8:	cmp	r7, r3
    10fc:	mvn	r2, #0
    1100:	mvn	r3, #0
    1104:	strd	r2, [r8]
    1108:	bge	1008 <coda_ascbin_cursor_get_bit_size+0x2dc>
    110c:	mov	r2, r8
    1110:	add	r1, sp, #24
    1114:	ldr	r0, [sp, #8]
    1118:	bl	2e4 <get_next_relative_field_bit_offset>
    111c:	cmp	r0, #0
    1120:	bne	e88 <coda_ascbin_cursor_get_bit_size+0x15c>
    1124:	ldrd	r0, [r8]
    1128:	cmp	r0, #0
    112c:	sbcs	r3, r1, #0
    1130:	bge	1020 <coda_ascbin_cursor_get_bit_size+0x2f4>
    1134:	b	1008 <coda_ascbin_cursor_get_bit_size+0x2dc>
    1138:	ldr	r0, [r4]
    113c:	ldr	r7, [sp, #44]	; 0x2c
    1140:	bl	0 <coda_no_data_singleton>
    1144:	sub	r7, r7, #1
    1148:	ldr	r2, [sp, #44]	; 0x2c
    114c:	add	r3, sp, #560	; 0x230
    1150:	add	r7, r3, r7, lsl #4
    1154:	sub	r2, r2, #1
    1158:	ldr	r3, [r4, #48]	; 0x30
    115c:	lsl	ip, r2, #4
    1160:	str	r0, [r7, #-512]	; 0xfffffe00
    1164:	b	10a8 <coda_ascbin_cursor_get_bit_size+0x37c>
    1168:	ldr	r0, [sl, #4]
    116c:	ldr	r1, [sl]
    1170:	lsl	r3, r0, #3
    1174:	orr	r3, r3, r1, lsr #29
    1178:	lsl	r2, r1, #3
    117c:	strd	r2, [sl]
    1180:	b	e20 <coda_ascbin_cursor_get_bit_size+0xf4>
    1184:	mov	r2, #0
    1188:	mov	r3, #0
    118c:	strd	r2, [sl]
    1190:	mov	r5, #0
    1194:	b	d64 <coda_ascbin_cursor_get_bit_size+0x38>
    1198:	mov	r6, #0
    119c:	mov	r7, #0
    11a0:	strd	r6, [sl]
    11a4:	b	d64 <coda_ascbin_cursor_get_bit_size+0x38>
    11a8:	ldrd	r2, [sp]
    11ac:	ldr	sl, [sp, #12]
    11b0:	b	118c <coda_ascbin_cursor_get_bit_size+0x460>
    11b4:	ldr	r0, [pc, #40]	; 11e4 <coda_ascbin_cursor_get_bit_size+0x4b8>
    11b8:	bl	0 <coda_add_error_message>
    11bc:	mov	r0, r6
    11c0:	bl	0 <coda_cursor_add_to_error_message>
    11c4:	mvn	r5, #0
    11c8:	b	d64 <coda_ascbin_cursor_get_bit_size+0x38>
    11cc:	.word	0x0000006c
    11d0:	.word	0x00000034
    11d4:	.word	0x000001e8
    11d8:	.word	0x000003fc
    11dc:	.word	0x000001c0
    11e0:	.word	0xfffffed4
    11e4:	.word	0x000001a8

000011e8 <coda_ascbin_cursor_get_num_elements>:
    11e8:	ldr	r3, [r0, #4]
    11ec:	push	{r4, r5, r6, r7, r8, r9, lr}
    11f0:	sub	sp, sp, #36	; 0x24
    11f4:	add	r3, r0, r3, lsl #4
    11f8:	ldr	r7, [r3, #-8]
    11fc:	ldr	r3, [r7]
    1200:	cmp	r3, #99	; 0x63
    1204:	ldrhi	r7, [r7, #4]
    1208:	ldr	r4, [r7, #8]
    120c:	cmp	r4, #0
    1210:	beq	1254 <coda_ascbin_cursor_get_num_elements+0x6c>
    1214:	cmp	r4, #1
    1218:	mov	r8, r1
    121c:	mov	r9, r0
    1220:	bne	1240 <coda_ascbin_cursor_get_num_elements+0x58>
    1224:	ldr	r3, [r7, #44]	; 0x2c
    1228:	cmn	r3, #1
    122c:	strne	r3, [r1]
    1230:	movne	r0, #0
    1234:	beq	1268 <coda_ascbin_cursor_get_num_elements+0x80>
    1238:	add	sp, sp, #36	; 0x24
    123c:	pop	{r4, r5, r6, r7, r8, r9, pc}
    1240:	ldr	r3, [pc, #216]	; 1320 <coda_ascbin_cursor_get_num_elements+0x138>
    1244:	ldr	r2, [pc, #216]	; 1324 <coda_ascbin_cursor_get_num_elements+0x13c>
    1248:	ldr	r1, [pc, #216]	; 1328 <coda_ascbin_cursor_get_num_elements+0x140>
    124c:	ldr	r0, [pc, #216]	; 132c <coda_ascbin_cursor_get_num_elements+0x144>
    1250:	bl	0 <__assert_fail>
    1254:	ldr	r3, [r7, #48]	; 0x30
    1258:	mov	r0, r4
    125c:	str	r3, [r1]
    1260:	add	sp, sp, #36	; 0x24
    1264:	pop	{r4, r5, r6, r7, r8, r9, pc}
    1268:	ldr	r2, [r7, #48]	; 0x30
    126c:	cmp	r2, #0
    1270:	addgt	r6, r7, #52	; 0x34
    1274:	movgt	r5, #0
    1278:	bgt	128c <coda_ascbin_cursor_get_num_elements+0xa4>
    127c:	b	12d0 <coda_ascbin_cursor_get_num_elements+0xe8>
    1280:	add	r5, r5, #1
    1284:	cmp	r2, r5
    1288:	ble	12d0 <coda_ascbin_cursor_get_num_elements+0xe8>
    128c:	ldr	r3, [r6], #4
    1290:	cmn	r3, #1
    1294:	mulne	r4, r3, r4
    1298:	bne	1280 <coda_ascbin_cursor_get_num_elements+0x98>
    129c:	mov	r2, sp
    12a0:	mov	r1, r9
    12a4:	ldr	r0, [r6, #28]
    12a8:	bl	0 <coda_expression_eval_integer>
    12ac:	cmp	r0, #0
    12b0:	bne	12e0 <coda_ascbin_cursor_get_num_elements+0xf8>
    12b4:	ldrd	r0, [sp]
    12b8:	cmp	r0, #0
    12bc:	sbcs	r3, r1, #0
    12c0:	blt	12fc <coda_ascbin_cursor_get_num_elements+0x114>
    12c4:	mul	r4, r0, r4
    12c8:	ldr	r2, [r7, #48]	; 0x30
    12cc:	b	1280 <coda_ascbin_cursor_get_num_elements+0x98>
    12d0:	mov	r0, #0
    12d4:	str	r4, [r8]
    12d8:	add	sp, sp, #36	; 0x24
    12dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
    12e0:	ldr	r0, [pc, #72]	; 1330 <coda_ascbin_cursor_get_num_elements+0x148>
    12e4:	mov	r1, r5
    12e8:	bl	0 <coda_add_error_message>
    12ec:	mov	r0, r9
    12f0:	bl	0 <coda_cursor_add_to_error_message>
    12f4:	mvn	r0, #0
    12f8:	b	1238 <coda_ascbin_cursor_get_num_elements+0x50>
    12fc:	add	r2, sp, #8
    1300:	bl	0 <coda_str64>
    1304:	add	r2, sp, #8
    1308:	ldr	r1, [pc, #36]	; 1334 <coda_ascbin_cursor_get_num_elements+0x14c>
    130c:	ldr	r0, [pc, #36]	; 1338 <coda_ascbin_cursor_get_num_elements+0x150>
    1310:	bl	0 <coda_set_error>
    1314:	mov	r0, r9
    1318:	bl	0 <coda_cursor_add_to_error_message>
    131c:	b	12f4 <coda_ascbin_cursor_get_num_elements+0x10c>
    1320:	.word	0x0000008c
    1324:	.word	0x00000343
    1328:	.word	0x00000034
    132c:	.word	0x000001e8
    1330:	.word	0x00000160
    1334:	.word	0x000001ec
    1338:	.word	0xfffffed4

0000133c <coda_ascbin_cursor_get_record_field_available_status>:
    133c:	ldr	r3, [r0, #4]
    1340:	push	{r4, r5, lr}
    1344:	mov	r4, r1
    1348:	add	r3, r0, r3, lsl #4
    134c:	sub	sp, sp, #12
    1350:	ldr	r1, [r3, #-8]
    1354:	mov	r5, r2
    1358:	ldr	r3, [r1]
    135c:	cmp	r3, #99	; 0x63
    1360:	ldrhi	r1, [r1, #4]
    1364:	cmp	r4, #0
    1368:	ldr	r3, [r1, #48]	; 0x30
    136c:	blt	13f0 <coda_ascbin_cursor_get_record_field_available_status+0xb4>
    1370:	cmp	r4, r3
    1374:	bge	13f0 <coda_ascbin_cursor_get_record_field_available_status+0xb4>
    1378:	ldr	r3, [r1, #68]	; 0x44
    137c:	cmp	r3, #0
    1380:	beq	13b0 <coda_ascbin_cursor_get_record_field_available_status+0x74>
    1384:	add	r1, sp, #4
    1388:	bl	0 <coda_cursor_get_available_union_field_index>
    138c:	cmp	r0, #0
    1390:	mvnne	r0, #0
    1394:	ldreq	r3, [sp, #4]
    1398:	subeq	r4, r3, r4
    139c:	clzeq	r4, r4
    13a0:	lsreq	r4, r4, #5
    13a4:	streq	r4, [r5]
    13a8:	add	sp, sp, #12
    13ac:	pop	{r4, r5, pc}
    13b0:	ldr	r3, [r1, #52]	; 0x34
    13b4:	ldr	r3, [r3, r4, lsl #2]
    13b8:	ldr	r3, [r3, #20]
    13bc:	cmp	r3, #0
    13c0:	beq	13e0 <coda_ascbin_cursor_get_record_field_available_status+0xa4>
    13c4:	mov	r1, r0
    13c8:	mov	r0, r3
    13cc:	bl	0 <coda_expression_eval_bool>
    13d0:	adds	r0, r0, #0
    13d4:	mvnne	r0, #0
    13d8:	add	sp, sp, #12
    13dc:	pop	{r4, r5, pc}
    13e0:	mov	r0, r3
    13e4:	mov	r3, #1
    13e8:	str	r3, [r2]
    13ec:	b	13a8 <coda_ascbin_cursor_get_record_field_available_status+0x6c>
    13f0:	mvn	r0, #100	; 0x64
    13f4:	mov	r2, r4
    13f8:	ldr	r1, [pc, #8]	; 1408 <coda_ascbin_cursor_get_record_field_available_status+0xcc>
    13fc:	bl	0 <coda_set_error>
    1400:	mvn	r0, #0
    1404:	b	13a8 <coda_ascbin_cursor_get_record_field_available_status+0x6c>
    1408:	.word	0x000000e8

0000140c <coda_ascbin_cursor_get_available_union_field_index>:
    140c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1410:	mov	r7, r0
    1414:	ldr	r5, [r0, #4]
    1418:	sub	sp, sp, #588	; 0x24c
    141c:	sub	r6, r5, #1
    1420:	mov	sl, r1
    1424:	add	r3, r0, r6, lsl #4
    1428:	ldr	r4, [r3, #8]
    142c:	ldr	r3, [r4]
    1430:	cmp	r3, #99	; 0x63
    1434:	ldrhi	r4, [r4, #4]
    1438:	ldr	fp, [r4, #68]	; 0x44
    143c:	cmp	fp, #0
    1440:	beq	1570 <coda_ascbin_cursor_get_available_union_field_index+0x164>
    1444:	ldr	r3, [r4, #48]	; 0x30
    1448:	cmp	r3, #0
    144c:	ble	1584 <coda_ascbin_cursor_get_available_union_field_index+0x178>
    1450:	mov	r2, #520	; 0x208
    1454:	mov	r1, r7
    1458:	add	r0, sp, #64	; 0x40
    145c:	bl	0 <memcpy>
    1460:	ldr	r3, [r4, #52]	; 0x34
    1464:	add	r2, sp, #72	; 0x48
    1468:	add	r6, r2, r6, lsl #4
    146c:	ldr	r3, [r3]
    1470:	add	r2, r5, #1
    1474:	ldrd	r8, [r6, #8]
    1478:	ldr	ip, [r3, #8]
    147c:	add	r3, sp, #584	; 0x248
    1480:	add	r5, r3, r5, lsl #4
    1484:	add	r3, sp, #72	; 0x48
    1488:	add	r3, r3, r2, lsl #4
    148c:	mvn	r6, #0
    1490:	str	r2, [sp, #68]	; 0x44
    1494:	add	r1, sp, #64	; 0x40
    1498:	mov	r0, fp
    149c:	str	ip, [r5, #-512]	; 0xfffffe00
    14a0:	str	r6, [r5, #-508]	; 0xfffffe04
    14a4:	add	r2, sp, #8
    14a8:	strd	r8, [r3, #-8]
    14ac:	bl	0 <coda_expression_eval_integer>
    14b0:	cmp	r0, #0
    14b4:	bne	1558 <coda_ascbin_cursor_get_available_union_field_index+0x14c>
    14b8:	ldrd	r2, [sp, #8]
    14bc:	cmp	r2, #0
    14c0:	sbcs	r1, r3, #0
    14c4:	blt	14e8 <coda_ascbin_cursor_get_available_union_field_index+0xdc>
    14c8:	ldr	r8, [r4, #48]	; 0x30
    14cc:	cmp	r2, r8
    14d0:	asr	r9, r8, #31
    14d4:	sbcs	r1, r3, r9
    14d8:	strlt	r2, [sl]
    14dc:	bge	14e8 <coda_ascbin_cursor_get_available_union_field_index+0xdc>
    14e0:	add	sp, sp, #588	; 0x24c
    14e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14e8:	mov	r0, r2
    14ec:	mov	r1, r3
    14f0:	add	r2, sp, #16
    14f4:	bl	0 <coda_str64>
    14f8:	ldr	r3, [r7, #4]
    14fc:	add	r5, sp, #40	; 0x28
    1500:	mov	r2, r5
    1504:	add	r1, r7, r3, lsl #4
    1508:	ldr	r0, [r7, r3, lsl #4]
    150c:	ldr	r1, [r1, #4]
    1510:	lsr	r0, r0, #3
    1514:	orr	r0, r0, r1, lsl #29
    1518:	asr	r1, r1, #3
    151c:	bl	0 <coda_str64>
    1520:	ldr	r1, [r7, #4]
    1524:	ldr	r3, [r4, #48]	; 0x30
    1528:	add	r2, sp, #16
    152c:	ldr	r1, [r7, r1, lsl #4]
    1530:	ldr	r0, [pc, #96]	; 1598 <coda_ascbin_cursor_get_available_union_field_index+0x18c>
    1534:	and	r1, r1, #7
    1538:	str	r1, [sp, #4]
    153c:	str	r5, [sp]
    1540:	ldr	r1, [pc, #84]	; 159c <coda_ascbin_cursor_get_available_union_field_index+0x190>
    1544:	bl	0 <coda_set_error>
    1548:	mov	r0, r7
    154c:	bl	0 <coda_cursor_add_to_error_message>
    1550:	mvn	r0, #0
    1554:	b	14e0 <coda_ascbin_cursor_get_available_union_field_index+0xd4>
    1558:	ldr	r0, [pc, #64]	; 15a0 <coda_ascbin_cursor_get_available_union_field_index+0x194>
    155c:	bl	0 <coda_add_error_message>
    1560:	mov	r0, r7
    1564:	bl	0 <coda_cursor_add_to_error_message>
    1568:	mov	r0, r6
    156c:	b	14e0 <coda_ascbin_cursor_get_available_union_field_index+0xd4>
    1570:	mvn	r0, #104	; 0x68
    1574:	ldr	r1, [pc, #40]	; 15a4 <coda_ascbin_cursor_get_available_union_field_index+0x198>
    1578:	bl	0 <coda_set_error>
    157c:	mvn	r0, #0
    1580:	b	14e0 <coda_ascbin_cursor_get_available_union_field_index+0xd4>
    1584:	ldr	r3, [pc, #28]	; 15a8 <coda_ascbin_cursor_get_available_union_field_index+0x19c>
    1588:	ldr	r2, [pc, #28]	; 15ac <coda_ascbin_cursor_get_available_union_field_index+0x1a0>
    158c:	ldr	r1, [pc, #28]	; 15b0 <coda_ascbin_cursor_get_available_union_field_index+0x1a4>
    1590:	ldr	r0, [pc, #28]	; 15b4 <coda_ascbin_cursor_get_available_union_field_index+0x1a8>
    1594:	bl	0 <__assert_fail>
    1598:	.word	0xfffffed4
    159c:	.word	0x00000290
    15a0:	.word	0x00000274
    15a4:	.word	0x00000238
    15a8:	.word	0x000000b0
    15ac:	.word	0x00000379
    15b0:	.word	0x00000034
    15b4:	.word	0x0000025c

000015b8 <coda_ascbin_cursor_goto_available_union_field>:
    15b8:	ldr	r3, [r0, #4]
    15bc:	push	{r4, r5, lr}
    15c0:	mov	r4, r0
    15c4:	add	r3, r0, r3, lsl #4
    15c8:	sub	sp, sp, #12
    15cc:	ldr	r3, [r3, #-8]
    15d0:	ldr	r2, [r3]
    15d4:	cmp	r2, #99	; 0x63
    15d8:	movls	r5, r3
    15dc:	ldrhi	r5, [r3, #4]
    15e0:	ldr	r3, [r5, #68]	; 0x44
    15e4:	cmp	r3, #0
    15e8:	beq	1640 <coda_ascbin_cursor_goto_available_union_field+0x88>
    15ec:	add	r1, sp, #4
    15f0:	bl	140c <coda_ascbin_cursor_get_available_union_field_index>
    15f4:	cmp	r0, #0
    15f8:	bne	1638 <coda_ascbin_cursor_goto_available_union_field+0x80>
    15fc:	ldr	r2, [r5, #52]	; 0x34
    1600:	ldr	ip, [sp, #4]
    1604:	ldr	r3, [r4, #4]
    1608:	ldr	lr, [r2, ip, lsl #2]
    160c:	lsl	r1, r3, #4
    1610:	add	r2, r4, r1
    1614:	ldr	lr, [lr, #8]
    1618:	add	r3, r3, #1
    161c:	str	r3, [r4, #4]
    1620:	str	lr, [r2, #8]
    1624:	str	ip, [r2, #12]
    1628:	ldrd	r4, [r4, r1]
    162c:	strd	r4, [r2, #16]
    1630:	add	sp, sp, #12
    1634:	pop	{r4, r5, pc}
    1638:	mvn	r0, #0
    163c:	b	1630 <coda_ascbin_cursor_goto_available_union_field+0x78>
    1640:	mvn	r0, #104	; 0x68
    1644:	ldr	r1, [pc, #8]	; 1654 <coda_ascbin_cursor_goto_available_union_field+0x9c>
    1648:	bl	0 <coda_set_error>
    164c:	mvn	r0, #0
    1650:	b	1630 <coda_ascbin_cursor_goto_available_union_field+0x78>
    1654:	.word	0x00000238

00001658 <coda_ascbin_cursor_get_array_dim>:
    1658:	ldr	r3, [r0, #4]
    165c:	push	{r4, r5, r6, r7, r8, lr}
    1660:	sub	sp, sp, #32
    1664:	add	r3, r0, r3, lsl #4
    1668:	ldr	r7, [r3, #-8]
    166c:	ldr	r3, [r7]
    1670:	cmp	r3, #99	; 0x63
    1674:	ldrhi	r7, [r7, #4]
    1678:	ldr	r3, [r7, #48]	; 0x30
    167c:	str	r3, [r1]
    1680:	ldr	ip, [r7, #48]	; 0x30
    1684:	cmp	ip, #0
    1688:	movgt	r8, r0
    168c:	movgt	r4, r2
    1690:	addgt	r6, r7, #52	; 0x34
    1694:	movgt	r5, #0
    1698:	bgt	16b0 <coda_ascbin_cursor_get_array_dim+0x58>
    169c:	b	1700 <coda_ascbin_cursor_get_array_dim+0xa8>
    16a0:	add	r5, r5, #1
    16a4:	cmp	ip, r5
    16a8:	add	r4, r4, #4
    16ac:	ble	1700 <coda_ascbin_cursor_get_array_dim+0xa8>
    16b0:	ldr	r3, [r6], #4
    16b4:	cmn	r3, #1
    16b8:	strne	r3, [r4]
    16bc:	bne	16a0 <coda_ascbin_cursor_get_array_dim+0x48>
    16c0:	mov	r2, sp
    16c4:	mov	r1, r8
    16c8:	ldr	r0, [r6, #28]
    16cc:	bl	0 <coda_expression_eval_integer>
    16d0:	cmp	r0, #0
    16d4:	bne	170c <coda_ascbin_cursor_get_array_dim+0xb4>
    16d8:	ldrd	r0, [sp]
    16dc:	cmp	r0, #0
    16e0:	sbcs	r3, r1, #0
    16e4:	blt	172c <coda_ascbin_cursor_get_array_dim+0xd4>
    16e8:	ldr	ip, [r7, #48]	; 0x30
    16ec:	add	r5, r5, #1
    16f0:	cmp	ip, r5
    16f4:	str	r0, [r4]
    16f8:	add	r4, r4, #4
    16fc:	bgt	16b0 <coda_ascbin_cursor_get_array_dim+0x58>
    1700:	mov	r0, #0
    1704:	add	sp, sp, #32
    1708:	pop	{r4, r5, r6, r7, r8, pc}
    170c:	ldr	r0, [pc, #60]	; 1750 <coda_ascbin_cursor_get_array_dim+0xf8>
    1710:	mov	r1, r5
    1714:	bl	0 <coda_add_error_message>
    1718:	mov	r0, r8
    171c:	bl	0 <coda_cursor_add_to_error_message>
    1720:	mvn	r0, #0
    1724:	add	sp, sp, #32
    1728:	pop	{r4, r5, r6, r7, r8, pc}
    172c:	add	r2, sp, #8
    1730:	bl	0 <coda_str64>
    1734:	add	r2, sp, #8
    1738:	ldr	r1, [pc, #20]	; 1754 <coda_ascbin_cursor_get_array_dim+0xfc>
    173c:	ldr	r0, [pc, #20]	; 1758 <coda_ascbin_cursor_get_array_dim+0x100>
    1740:	bl	0 <coda_set_error>
    1744:	mov	r0, r8
    1748:	bl	0 <coda_cursor_add_to_error_message>
    174c:	b	1720 <coda_ascbin_cursor_get_array_dim+0xc8>
    1750:	.word	0x00000160
    1754:	.word	0x00000310
    1758:	.word	0xfffffed4
