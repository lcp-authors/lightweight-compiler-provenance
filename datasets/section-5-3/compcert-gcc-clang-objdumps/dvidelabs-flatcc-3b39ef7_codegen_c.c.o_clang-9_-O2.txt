
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_c.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_open_output_file>:
   0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4:	add	fp, sp, #24
   8:	sub	sp, sp, #8
   c:	mov	r4, r0
  10:	mov	r9, r1
  14:	ldr	r0, [r0, #204]	; 0xcc
  18:	movw	r6, #0
  1c:	mov	r5, #0
  20:	ldr	r1, [r4, #212]	; 0xd4
  24:	movt	r6, #0
  28:	ldr	r1, [r1, #216]	; 0xd8
  2c:	cmp	r1, #0
  30:	movne	r6, r1
  34:	cmp	r0, #0
  38:	bne	9c <__flatcc_fb_open_output_file+0x9c>
  3c:	mov	r0, r6
  40:	mov	r7, r3
  44:	mov	r8, r2
  48:	bl	0 <strlen>
  4c:	mov	r1, r0
  50:	mov	r0, #1
  54:	mov	r2, r9
  58:	mov	r3, r8
  5c:	str	r7, [sp]
  60:	str	r0, [sp, #4]
  64:	mov	r0, r6
  68:	bl	0 <__flatcc_fb_create_join_path_n>
  6c:	cmp	r0, #0
  70:	beq	cc <__flatcc_fb_open_output_file+0xcc>
  74:	movw	r1, #0
  78:	mov	r6, r0
  7c:	movt	r1, #0
  80:	bl	0 <fopen>
  84:	mov	r5, #0
  88:	cmp	r0, #0
  8c:	str	r0, [r4, #204]	; 0xcc
  90:	beq	a8 <__flatcc_fb_open_output_file+0xa8>
  94:	mov	r0, r6
  98:	bl	0 <free>
  9c:	mov	r0, r5
  a0:	sub	sp, fp, #24
  a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  a8:	movw	r0, #0
  ac:	movw	r1, #0
  b0:	mov	r2, r6
  b4:	movt	r0, #0
  b8:	movt	r1, #0
  bc:	ldr	r0, [r0]
  c0:	bl	0 <fprintf>
  c4:	mvn	r5, #0
  c8:	b	94 <__flatcc_fb_open_output_file+0x94>
  cc:	movw	r0, #0
  d0:	mov	r1, #34	; 0x22
  d4:	mov	r2, #1
  d8:	movt	r0, #0
  dc:	ldr	r3, [r0]
  e0:	movw	r0, #0
  e4:	movt	r0, #0
  e8:	bl	0 <fwrite>
  ec:	mov	r0, #1
  f0:	bl	0 <exit>

000000f4 <__flatcc_fb_close_output_file>:
  f4:	push	{r4, sl, fp, lr}
  f8:	add	fp, sp, #8
  fc:	mov	r4, r0
 100:	ldr	r0, [r0, #212]	; 0xd4
 104:	ldr	r1, [r0, #124]	; 0x7c
 108:	cmp	r1, #0
 10c:	bne	11c <__flatcc_fb_close_output_file+0x28>
 110:	ldr	r0, [r0, #108]	; 0x6c
 114:	cmp	r0, #0
 118:	beq	120 <__flatcc_fb_close_output_file+0x2c>
 11c:	pop	{r4, sl, fp, pc}
 120:	ldr	r0, [r4, #204]	; 0xcc
 124:	cmp	r0, #0
 128:	popeq	{r4, sl, fp, pc}
 12c:	bl	0 <fclose>
 130:	mov	r0, #0
 134:	str	r0, [r4, #204]	; 0xcc
 138:	pop	{r4, sl, fp, pc}

0000013c <__flatcc_fb_end_output_c>:
 13c:	push	{r4, sl, fp, lr}
 140:	add	fp, sp, #8
 144:	mov	r4, r0
 148:	ldr	r0, [r0, #204]	; 0xcc
 14c:	cmp	r0, #0
 150:	beq	16c <__flatcc_fb_end_output_c+0x30>
 154:	movw	r1, #0
 158:	movt	r1, #0
 15c:	ldr	r1, [r1]
 160:	cmp	r0, r1
 164:	beq	16c <__flatcc_fb_end_output_c+0x30>
 168:	bl	0 <fclose>
 16c:	mov	r0, #0
 170:	str	r0, [r4, #204]	; 0xcc
 174:	pop	{r4, sl, fp, pc}

00000178 <__flatcc_fb_init_output_c>:
 178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 17c:	add	fp, sp, #28
 180:	sub	sp, sp, #4
 184:	ldr	r5, [r1, #128]	; 0x80
 188:	ldr	r7, [r1, #216]	; 0xd8
 18c:	mov	r6, r1
 190:	mov	r1, #0
 194:	mov	r2, #232	; 0xe8
 198:	mov	sl, r0
 19c:	mov	r4, #0
 1a0:	bl	0 <memset>
 1a4:	movw	r0, #0
 1a8:	movw	r8, #0
 1ac:	cmp	r5, #0
 1b0:	movw	r9, #0
 1b4:	str	r6, [sl, #212]	; 0xd4
 1b8:	movt	r0, #0
 1bc:	movt	r8, #0
 1c0:	movt	r9, #0
 1c4:	moveq	r8, r0
 1c8:	cmp	r7, #0
 1cc:	movne	r9, r7
 1d0:	ldr	r7, [r6, #196]	; 0xc4
 1d4:	cmp	r7, #0
 1d8:	beq	214 <__flatcc_fb_init_output_c+0x9c>
 1dc:	mov	r0, r7
 1e0:	bl	0 <strlen>
 1e4:	mov	r5, r0
 1e8:	cmp	r0, #101	; 0x65
 1ec:	bcc	220 <__flatcc_fb_init_output_c+0xa8>
 1f0:	movw	r0, #0
 1f4:	movw	r1, #0
 1f8:	mov	r2, #100	; 0x64
 1fc:	movt	r0, #0
 200:	movt	r1, #0
 204:	ldr	r0, [r0]
 208:	bl	0 <fprintf>
 20c:	mvn	r7, #0
 210:	b	300 <__flatcc_fb_init_output_c+0x188>
 214:	movw	r7, #0
 218:	mov	r5, #11
 21c:	movt	r7, #0
 220:	mov	r0, sl
 224:	mov	r1, r7
 228:	mov	r2, #100	; 0x64
 22c:	bl	0 <strncpy>
 230:	cmp	r5, #0
 234:	strb	r4, [sl, #100]	; 0x64
 238:	mov	r4, sl
 23c:	addne	r0, sl, r5
 240:	movne	r1, #95	; 0x5f
 244:	strhne	r1, [r0]
 248:	ldrb	r7, [r4], #102	; 0x66
 24c:	cmp	r7, #0
 250:	beq	278 <__flatcc_fb_init_output_c+0x100>
 254:	bl	0 <__ctype_toupper_loc>
 258:	ldr	r1, [r0]
 25c:	uxtb	r2, r7
 260:	ldr	r1, [r1, r2, lsl #2]
 264:	strb	r1, [r4]
 268:	ldrb	r7, [r4, #-101]	; 0xffffff9b
 26c:	add	r4, r4, #1
 270:	cmp	r7, #0
 274:	bne	258 <__flatcc_fb_init_output_c+0xe0>
 278:	mov	r7, #0
 27c:	add	r0, sl, r5
 280:	strb	r7, [r4]
 284:	strb	r7, [r0, #102]	; 0x66
 288:	ldr	r0, [r6, #176]	; 0xb0
 28c:	str	r0, [sl, #224]	; 0xe0
 290:	ldr	r0, [r6, #108]	; 0x6c
 294:	cmp	r0, #0
 298:	beq	2b0 <__flatcc_fb_init_output_c+0x138>
 29c:	movw	r0, #0
 2a0:	movt	r0, #0
 2a4:	ldr	r0, [r0]
 2a8:	str	r0, [sl, #204]	; 0xcc
 2ac:	b	300 <__flatcc_fb_init_output_c+0x188>
 2b0:	ldr	r0, [sl, #212]	; 0xd4
 2b4:	ldr	r1, [r0, #124]	; 0x7c
 2b8:	cmp	r1, #0
 2bc:	beq	300 <__flatcc_fb_init_output_c+0x188>
 2c0:	movw	r2, #0
 2c4:	mov	r0, r9
 2c8:	mov	r3, #1
 2cc:	movt	r2, #0
 2d0:	bl	0 <__flatcc_fb_create_join_path>
 2d4:	cmp	r0, #0
 2d8:	beq	330 <__flatcc_fb_init_output_c+0x1b8>
 2dc:	mov	r1, r8
 2e0:	mov	r5, r0
 2e4:	bl	0 <fopen>
 2e8:	mov	r7, #0
 2ec:	cmp	r0, #0
 2f0:	str	r0, [sl, #204]	; 0xcc
 2f4:	beq	30c <__flatcc_fb_init_output_c+0x194>
 2f8:	mov	r0, r5
 2fc:	bl	0 <free>
 300:	mov	r0, r7
 304:	sub	sp, fp, #28
 308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 30c:	movw	r0, #0
 310:	movw	r1, #0
 314:	mov	r2, r5
 318:	movt	r0, #0
 31c:	movt	r1, #0
 320:	ldr	r0, [r0]
 324:	bl	0 <fprintf>
 328:	mvn	r7, #0
 32c:	b	2f8 <__flatcc_fb_init_output_c+0x180>
 330:	movw	r0, #0
 334:	mov	r1, #34	; 0x22
 338:	mov	r2, #1
 33c:	movt	r0, #0
 340:	ldr	r3, [r0]
 344:	movw	r0, #0
 348:	movt	r0, #0
 34c:	bl	0 <fwrite>
 350:	mov	r0, #1
 354:	bl	0 <exit>

00000358 <__flatcc_fb_gen_c_includes>:
 358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 35c:	add	fp, sp, #28
 360:	sub	sp, sp, #36	; 0x24
 364:	mov	r6, r0
 368:	ldr	r0, [r0, #208]	; 0xd0
 36c:	vmov.i32	q8, #0	; 0x00000000
 370:	add	r4, sp, #16
 374:	str	r2, [sp, #12]
 378:	str	r1, [sp, #8]
 37c:	ldr	r8, [r0]
 380:	vst1.64	{d16-d17}, [r4]
 384:	ldr	r0, [r0, #164]	; 0xa4
 388:	bl	0 <__flatcc_fb_copy_path>
 38c:	mov	r1, r0
 390:	mov	r0, r4
 394:	mov	r2, #1
 398:	bl	0 <str_set_insert_item>
 39c:	cmp	r8, #0
 3a0:	beq	468 <__flatcc_fb_gen_c_includes+0x110>
 3a4:	add	r7, sp, #16
 3a8:	b	3c4 <__flatcc_fb_gen_c_includes+0x6c>
 3ac:	mov	r0, r5
 3b0:	bl	0 <free>
 3b4:	mov	r0, r4
 3b8:	bl	0 <free>
 3bc:	cmp	r8, #0
 3c0:	beq	468 <__flatcc_fb_gen_c_includes+0x110>
 3c4:	ldr	r2, [r6, #212]	; 0xd4
 3c8:	ldrd	r0, [r8, #8]
 3cc:	ldr	r2, [r2, #96]	; 0x60
 3d0:	bl	0 <__flatcc_fb_create_basename>
 3d4:	cmp	r0, #0
 3d8:	beq	484 <__flatcc_fb_gen_c_includes+0x12c>
 3dc:	ldr	r8, [r8]
 3e0:	mov	r4, r0
 3e4:	bl	0 <__flatcc_fb_copy_path>
 3e8:	cmp	r0, #0
 3ec:	beq	484 <__flatcc_fb_gen_c_includes+0x12c>
 3f0:	ldrb	r9, [r0]
 3f4:	mov	r5, r0
 3f8:	cmp	r9, #0
 3fc:	beq	428 <__flatcc_fb_gen_c_includes+0xd0>
 400:	add	sl, r5, #1
 404:	bl	0 <__ctype_toupper_loc>
 408:	ldr	r1, [r0]
 40c:	uxtb	r2, r9
 410:	ldr	r1, [r1, r2, lsl #2]
 414:	strb	r1, [sl, #-1]
 418:	ldrb	r9, [sl]
 41c:	add	sl, sl, #1
 420:	cmp	r9, #0
 424:	bne	408 <__flatcc_fb_gen_c_includes+0xb0>
 428:	mov	r0, r7
 42c:	mov	r1, r5
 430:	mov	r2, #1
 434:	bl	0 <str_set_insert_item>
 438:	cmp	r0, #0
 43c:	bne	3ac <__flatcc_fb_gen_c_includes+0x54>
 440:	ldr	r1, [sp, #8]
 444:	ldr	r0, [r6, #204]	; 0xcc
 448:	ldr	r3, [sp, #12]
 44c:	mov	r2, r5
 450:	str	r4, [sp]
 454:	str	r1, [sp, #4]
 458:	movw	r1, #0
 45c:	movt	r1, #0
 460:	bl	0 <fprintf>
 464:	b	3b4 <__flatcc_fb_gen_c_includes+0x5c>
 468:	movw	r1, #0
 46c:	add	r0, sp, #16
 470:	mov	r2, #0
 474:	movt	r1, #0
 478:	bl	0 <str_set_destroy>
 47c:	sub	sp, fp, #28
 480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 484:	movw	r0, #0
 488:	mov	r1, #34	; 0x22
 48c:	mov	r2, #1
 490:	movt	r0, #0
 494:	ldr	r3, [r0]
 498:	movw	r0, #0
 49c:	movt	r0, #0
 4a0:	bl	0 <fwrite>
 4a4:	mov	r0, #1
 4a8:	bl	0 <exit>

000004ac <_str_set_destructor>:
 4ac:	mov	r0, r1
 4b0:	b	0 <free>

000004b4 <__flatcc_fb_copy_scope>:
 4b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 4b8:	add	fp, sp, #24
 4bc:	mov	r4, r1
 4c0:	ldr	r1, [r0]
 4c4:	ldr	r5, [r0, #24]
 4c8:	mov	r6, r0
 4cc:	cmp	r1, #0
 4d0:	mov	r0, r5
 4d4:	beq	4fc <__flatcc_fb_copy_scope+0x48>
 4d8:	mov	r0, r5
 4dc:	ldr	r2, [r1]
 4e0:	ldr	r1, [r1, #4]
 4e4:	ldr	r1, [r1, #4]
 4e8:	cmp	r2, #0
 4ec:	add	r0, r0, r1
 4f0:	mov	r1, r2
 4f4:	add	r0, r0, #1
 4f8:	bne	4dc <__flatcc_fb_copy_scope+0x28>
 4fc:	cmp	r0, #101	; 0x65
 500:	bls	50c <__flatcc_fb_copy_scope+0x58>
 504:	mvn	r5, #0
 508:	b	55c <__flatcc_fb_copy_scope+0xa8>
 50c:	ldr	r1, [r6, #20]
 510:	mov	r0, r4
 514:	mov	r2, r5
 518:	bl	0 <memcpy>
 51c:	ldr	r7, [r6]
 520:	cmp	r7, #0
 524:	beq	558 <__flatcc_fb_copy_scope+0xa4>
 528:	mov	r8, #95	; 0x5f
 52c:	ldr	r2, [r7, #4]
 530:	add	r0, r4, r5
 534:	ldm	r2, {r1, r6}
 538:	mov	r2, r6
 53c:	bl	0 <memcpy>
 540:	add	r0, r6, r5
 544:	strb	r8, [r4, r0]
 548:	add	r5, r0, #1
 54c:	ldr	r7, [r7]
 550:	cmp	r7, #0
 554:	bne	52c <__flatcc_fb_copy_scope+0x78>
 558:	add	r4, r4, r5
 55c:	mov	r0, #0
 560:	strb	r0, [r4]
 564:	mov	r0, r5
 568:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000056c <__flatcc_fb_scoped_symbol_name>:
 56c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 570:	add	fp, sp, #24
 574:	mov	r6, r0
 578:	ldr	r0, [r2, #204]	; 0xcc
 57c:	ldr	r8, [r1, #4]
 580:	mov	r4, r2
 584:	cmp	r0, r6
 588:	beq	630 <__flatcc_fb_scoped_symbol_name+0xc4>
 58c:	ldr	r1, [r6]
 590:	ldr	r5, [r6, #24]
 594:	cmp	r1, #0
 598:	mov	r0, r5
 59c:	beq	5c4 <__flatcc_fb_scoped_symbol_name+0x58>
 5a0:	mov	r0, r5
 5a4:	ldr	r2, [r1]
 5a8:	ldr	r1, [r1, #4]
 5ac:	ldr	r1, [r1, #4]
 5b0:	cmp	r2, #0
 5b4:	add	r0, r0, r1
 5b8:	mov	r1, r2
 5bc:	add	r0, r0, #1
 5c0:	bne	5a4 <__flatcc_fb_scoped_symbol_name+0x38>
 5c4:	cmp	r0, #102	; 0x66
 5c8:	bcs	69c <__flatcc_fb_scoped_symbol_name+0x130>
 5cc:	ldr	r1, [r6, #20]
 5d0:	mov	r0, r4
 5d4:	mov	r2, r5
 5d8:	bl	0 <memcpy>
 5dc:	ldr	r7, [r6]
 5e0:	cmp	r7, #0
 5e4:	beq	618 <__flatcc_fb_scoped_symbol_name+0xac>
 5e8:	mov	r9, #95	; 0x5f
 5ec:	ldr	r2, [r7, #4]
 5f0:	add	r0, r4, r5
 5f4:	ldm	r2, {r1, r6}
 5f8:	mov	r2, r6
 5fc:	bl	0 <memcpy>
 600:	add	r0, r6, r5
 604:	strb	r9, [r4, r0]
 608:	add	r5, r0, #1
 60c:	ldr	r7, [r7]
 610:	cmp	r7, #0
 614:	bne	5ec <__flatcc_fb_scoped_symbol_name+0x80>
 618:	mov	r0, #0
 61c:	cmn	r5, #1
 620:	strb	r0, [r4, r5]
 624:	mov	r0, r4
 628:	str	r5, [r0, #208]!	; 0xd0
 62c:	ble	6b0 <__flatcc_fb_scoped_symbol_name+0x144>
 630:	ldr	r2, [r8, #4]
 634:	ldr	r0, [r4, #208]	; 0xd0
 638:	add	r1, r0, r2
 63c:	str	r2, [r4, #212]	; 0xd4
 640:	cmp	r1, #204	; 0xcc
 644:	str	r1, [r4, #216]	; 0xd8
 648:	bge	668 <__flatcc_fb_scoped_symbol_name+0xfc>
 64c:	ldr	r1, [r8]
 650:	add	r0, r4, r0
 654:	bl	0 <memcpy>
 658:	ldr	r0, [r4, #216]	; 0xd8
 65c:	mov	r1, #0
 660:	strb	r1, [r4, r0]
 664:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 668:	movw	r0, #0
 66c:	ldr	r3, [r8]
 670:	movw	r1, #0
 674:	movt	r0, #0
 678:	movt	r1, #0
 67c:	ldr	r0, [r0]
 680:	bl	0 <fprintf>
 684:	ldr	r0, [r4, #208]	; 0xd0
 688:	mov	r1, #203	; 0xcb
 68c:	rsb	r2, r0, #203	; 0xcb
 690:	str	r2, [r4, #212]	; 0xd4
 694:	str	r1, [r4, #216]	; 0xd8
 698:	b	64c <__flatcc_fb_scoped_symbol_name+0xe0>
 69c:	mov	r0, #0
 6a0:	mvn	r1, #0
 6a4:	strb	r0, [r4]
 6a8:	mov	r0, r4
 6ac:	str	r1, [r0, #208]!	; 0xd0
 6b0:	mov	r1, #0
 6b4:	mov	r2, #1
 6b8:	str	r1, [r0]
 6bc:	movw	r0, #0
 6c0:	mov	r1, #28
 6c4:	movt	r0, #0
 6c8:	ldr	r3, [r0]
 6cc:	movw	r0, #0
 6d0:	movt	r0, #0
 6d4:	bl	0 <fwrite>
 6d8:	b	630 <__flatcc_fb_scoped_symbol_name+0xc4>

000006dc <__flatcc_fb_codegen_common_c>:
 6dc:	push	{r4, r5, r6, sl, fp, lr}
 6e0:	add	fp, sp, #16
 6e4:	mov	r4, r0
 6e8:	bl	0 <strlen>
 6ec:	sub	r5, r0, #1
 6f0:	ldr	r0, [r4, #212]	; 0xd4
 6f4:	ldr	r1, [r0, #144]	; 0x90
 6f8:	cmp	r1, #0
 6fc:	beq	770 <__flatcc_fb_codegen_common_c+0x94>
 700:	movw	r3, #0
 704:	mov	r0, r4
 708:	mov	r1, r4
 70c:	mov	r2, r5
 710:	movt	r3, #0
 714:	bl	0 <__flatcc_fb_open_output_file>
 718:	mvn	r6, #0
 71c:	cmp	r0, #0
 720:	bne	7a0 <__flatcc_fb_codegen_common_c+0xc4>
 724:	mov	r0, r4
 728:	bl	0 <__flatcc_fb_gen_common_c_header>
 72c:	mov	r6, r0
 730:	ldr	r0, [r4, #212]	; 0xd4
 734:	ldr	r1, [r0, #124]	; 0x7c
 738:	cmp	r1, #0
 73c:	bne	764 <__flatcc_fb_codegen_common_c+0x88>
 740:	ldr	r0, [r0, #108]	; 0x6c
 744:	cmp	r0, #0
 748:	bne	764 <__flatcc_fb_codegen_common_c+0x88>
 74c:	ldr	r0, [r4, #204]	; 0xcc
 750:	cmp	r0, #0
 754:	beq	764 <__flatcc_fb_codegen_common_c+0x88>
 758:	bl	0 <fclose>
 75c:	mov	r0, #0
 760:	str	r0, [r4, #204]	; 0xcc
 764:	cmp	r6, #0
 768:	bne	7a0 <__flatcc_fb_codegen_common_c+0xc4>
 76c:	ldr	r0, [r4, #212]	; 0xd4
 770:	ldr	r0, [r0, #148]	; 0x94
 774:	cmp	r0, #0
 778:	beq	7cc <__flatcc_fb_codegen_common_c+0xf0>
 77c:	movw	r3, #0
 780:	mov	r0, r4
 784:	mov	r1, r4
 788:	mov	r2, r5
 78c:	movt	r3, #0
 790:	bl	0 <__flatcc_fb_open_output_file>
 794:	mvn	r6, #0
 798:	cmp	r0, #0
 79c:	beq	7a8 <__flatcc_fb_codegen_common_c+0xcc>
 7a0:	mov	r0, r6
 7a4:	pop	{r4, r5, r6, sl, fp, pc}
 7a8:	mov	r0, r4
 7ac:	bl	0 <__flatcc_fb_gen_common_c_builder_header>
 7b0:	ldr	r0, [r4, #212]	; 0xd4
 7b4:	ldr	r1, [r0, #124]	; 0x7c
 7b8:	cmp	r1, #0
 7bc:	bne	7cc <__flatcc_fb_codegen_common_c+0xf0>
 7c0:	ldr	r0, [r0, #108]	; 0x6c
 7c4:	cmp	r0, #0
 7c8:	beq	7d8 <__flatcc_fb_codegen_common_c+0xfc>
 7cc:	mov	r6, #0
 7d0:	mov	r0, r6
 7d4:	pop	{r4, r5, r6, sl, fp, pc}
 7d8:	ldr	r0, [r4, #204]	; 0xcc
 7dc:	mov	r6, #0
 7e0:	cmp	r0, #0
 7e4:	beq	7a0 <__flatcc_fb_codegen_common_c+0xc4>
 7e8:	bl	0 <fclose>
 7ec:	mov	r6, #0
 7f0:	str	r6, [r4, #204]	; 0xcc
 7f4:	mov	r0, r6
 7f8:	pop	{r4, r5, r6, sl, fp, pc}

000007fc <__flatcc_fb_codegen_c>:
 7fc:	push	{r4, r5, r6, sl, fp, lr}
 800:	add	fp, sp, #16
 804:	str	r1, [r0, #208]	; 0xd0
 808:	mov	r4, r0
 80c:	mov	r2, #0
 810:	ldr	r0, [r1, #60]	; 0x3c
 814:	mov	r1, #0
 818:	bl	0 <fb_scope_table_find>
 81c:	str	r0, [r4, #216]	; 0xd8
 820:	ldr	r0, [r4, #208]	; 0xd0
 824:	ldr	r6, [r0, #160]	; 0xa0
 828:	mov	r0, r6
 82c:	bl	0 <strlen>
 830:	ldr	r1, [r4, #212]	; 0xd4
 834:	mov	r5, r0
 838:	ldr	r0, [r1, #152]	; 0x98
 83c:	cmp	r0, #0
 840:	beq	8b4 <__flatcc_fb_codegen_c+0xb8>
 844:	movw	r3, #0
 848:	mov	r0, r4
 84c:	mov	r1, r6
 850:	mov	r2, r5
 854:	movt	r3, #0
 858:	bl	0 <__flatcc_fb_open_output_file>
 85c:	mov	r1, r0
 860:	mvn	r0, #0
 864:	cmp	r1, #0
 868:	bne	a6c <__flatcc_fb_codegen_c+0x270>
 86c:	mov	r0, r4
 870:	bl	0 <__flatcc_fb_gen_c_reader>
 874:	cmp	r0, #0
 878:	bne	a6c <__flatcc_fb_codegen_c+0x270>
 87c:	ldr	r1, [r4, #212]	; 0xd4
 880:	ldr	r0, [r1, #124]	; 0x7c
 884:	cmp	r0, #0
 888:	bne	8b4 <__flatcc_fb_codegen_c+0xb8>
 88c:	ldr	r0, [r1, #108]	; 0x6c
 890:	cmp	r0, #0
 894:	bne	8b4 <__flatcc_fb_codegen_c+0xb8>
 898:	ldr	r0, [r4, #204]	; 0xcc
 89c:	cmp	r0, #0
 8a0:	beq	8b4 <__flatcc_fb_codegen_c+0xb8>
 8a4:	bl	0 <fclose>
 8a8:	mov	r0, #0
 8ac:	str	r0, [r4, #204]	; 0xcc
 8b0:	ldr	r1, [r4, #212]	; 0xd4
 8b4:	ldr	r0, [r1, #156]	; 0x9c
 8b8:	cmp	r0, #0
 8bc:	beq	934 <__flatcc_fb_codegen_c+0x138>
 8c0:	ldr	r0, [r4, #208]	; 0xd0
 8c4:	movw	r3, #0
 8c8:	mov	r2, r5
 8cc:	movt	r3, #0
 8d0:	ldr	r1, [r0, #160]	; 0xa0
 8d4:	mov	r0, r4
 8d8:	bl	0 <__flatcc_fb_open_output_file>
 8dc:	mov	r1, r0
 8e0:	mvn	r0, #0
 8e4:	cmp	r1, #0
 8e8:	bne	a6c <__flatcc_fb_codegen_c+0x270>
 8ec:	mov	r0, r4
 8f0:	bl	0 <__flatcc_fb_gen_c_builder>
 8f4:	cmp	r0, #0
 8f8:	bne	a6c <__flatcc_fb_codegen_c+0x270>
 8fc:	ldr	r1, [r4, #212]	; 0xd4
 900:	ldr	r0, [r1, #124]	; 0x7c
 904:	cmp	r0, #0
 908:	bne	934 <__flatcc_fb_codegen_c+0x138>
 90c:	ldr	r0, [r1, #108]	; 0x6c
 910:	cmp	r0, #0
 914:	bne	934 <__flatcc_fb_codegen_c+0x138>
 918:	ldr	r0, [r4, #204]	; 0xcc
 91c:	cmp	r0, #0
 920:	beq	934 <__flatcc_fb_codegen_c+0x138>
 924:	bl	0 <fclose>
 928:	mov	r0, #0
 92c:	str	r0, [r4, #204]	; 0xcc
 930:	ldr	r1, [r4, #212]	; 0xd4
 934:	ldr	r0, [r1, #160]	; 0xa0
 938:	cmp	r0, #0
 93c:	beq	9b4 <__flatcc_fb_codegen_c+0x1b8>
 940:	ldr	r0, [r4, #208]	; 0xd0
 944:	movw	r3, #0
 948:	mov	r2, r5
 94c:	movt	r3, #0
 950:	ldr	r1, [r0, #160]	; 0xa0
 954:	mov	r0, r4
 958:	bl	0 <__flatcc_fb_open_output_file>
 95c:	mov	r1, r0
 960:	mvn	r0, #0
 964:	cmp	r1, #0
 968:	bne	a6c <__flatcc_fb_codegen_c+0x270>
 96c:	mov	r0, r4
 970:	bl	0 <__flatcc_fb_gen_c_verifier>
 974:	cmp	r0, #0
 978:	bne	a6c <__flatcc_fb_codegen_c+0x270>
 97c:	ldr	r1, [r4, #212]	; 0xd4
 980:	ldr	r0, [r1, #124]	; 0x7c
 984:	cmp	r0, #0
 988:	bne	9b4 <__flatcc_fb_codegen_c+0x1b8>
 98c:	ldr	r0, [r1, #108]	; 0x6c
 990:	cmp	r0, #0
 994:	bne	9b4 <__flatcc_fb_codegen_c+0x1b8>
 998:	ldr	r0, [r4, #204]	; 0xcc
 99c:	cmp	r0, #0
 9a0:	beq	9b4 <__flatcc_fb_codegen_c+0x1b8>
 9a4:	bl	0 <fclose>
 9a8:	mov	r0, #0
 9ac:	str	r0, [r4, #204]	; 0xcc
 9b0:	ldr	r1, [r4, #212]	; 0xd4
 9b4:	ldr	r0, [r1, #164]	; 0xa4
 9b8:	cmp	r0, #0
 9bc:	beq	a34 <__flatcc_fb_codegen_c+0x238>
 9c0:	ldr	r0, [r4, #208]	; 0xd0
 9c4:	movw	r3, #0
 9c8:	mov	r2, r5
 9cc:	movt	r3, #0
 9d0:	ldr	r1, [r0, #160]	; 0xa0
 9d4:	mov	r0, r4
 9d8:	bl	0 <__flatcc_fb_open_output_file>
 9dc:	mov	r1, r0
 9e0:	mvn	r0, #0
 9e4:	cmp	r1, #0
 9e8:	bne	a6c <__flatcc_fb_codegen_c+0x270>
 9ec:	mov	r0, r4
 9f0:	bl	0 <__flatcc_fb_gen_c_json_parser>
 9f4:	cmp	r0, #0
 9f8:	bne	a6c <__flatcc_fb_codegen_c+0x270>
 9fc:	ldr	r1, [r4, #212]	; 0xd4
 a00:	ldr	r0, [r1, #124]	; 0x7c
 a04:	cmp	r0, #0
 a08:	bne	a34 <__flatcc_fb_codegen_c+0x238>
 a0c:	ldr	r0, [r1, #108]	; 0x6c
 a10:	cmp	r0, #0
 a14:	bne	a34 <__flatcc_fb_codegen_c+0x238>
 a18:	ldr	r0, [r4, #204]	; 0xcc
 a1c:	cmp	r0, #0
 a20:	beq	a34 <__flatcc_fb_codegen_c+0x238>
 a24:	bl	0 <fclose>
 a28:	mov	r0, #0
 a2c:	str	r0, [r4, #204]	; 0xcc
 a30:	ldr	r1, [r4, #212]	; 0xd4
 a34:	ldr	r0, [r1, #168]	; 0xa8
 a38:	cmp	r0, #0
 a3c:	beq	a9c <__flatcc_fb_codegen_c+0x2a0>
 a40:	ldr	r0, [r4, #208]	; 0xd0
 a44:	movw	r3, #0
 a48:	mov	r2, r5
 a4c:	movt	r3, #0
 a50:	ldr	r1, [r0, #160]	; 0xa0
 a54:	mov	r0, r4
 a58:	bl	0 <__flatcc_fb_open_output_file>
 a5c:	mov	r1, r0
 a60:	mvn	r0, #0
 a64:	cmp	r1, #0
 a68:	beq	a70 <__flatcc_fb_codegen_c+0x274>
 a6c:	pop	{r4, r5, r6, sl, fp, pc}
 a70:	mov	r0, r4
 a74:	bl	0 <__flatcc_fb_gen_c_json_printer>
 a78:	cmp	r0, #0
 a7c:	popne	{r4, r5, r6, sl, fp, pc}
 a80:	ldr	r0, [r4, #212]	; 0xd4
 a84:	ldr	r1, [r0, #124]	; 0x7c
 a88:	cmp	r1, #0
 a8c:	bne	a9c <__flatcc_fb_codegen_c+0x2a0>
 a90:	ldr	r0, [r0, #108]	; 0x6c
 a94:	cmp	r0, #0
 a98:	beq	aa4 <__flatcc_fb_codegen_c+0x2a8>
 a9c:	mov	r0, #0
 aa0:	pop	{r4, r5, r6, sl, fp, pc}
 aa4:	ldr	r1, [r4, #204]	; 0xcc
 aa8:	mov	r0, #0
 aac:	cmp	r1, #0
 ab0:	beq	a6c <__flatcc_fb_codegen_c+0x270>
 ab4:	mov	r0, r1
 ab8:	bl	0 <fclose>
 abc:	mov	r0, #0
 ac0:	str	r0, [r4, #204]	; 0xcc
 ac4:	pop	{r4, r5, r6, sl, fp, pc}
