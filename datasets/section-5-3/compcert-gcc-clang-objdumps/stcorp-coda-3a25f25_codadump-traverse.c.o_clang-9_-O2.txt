
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-traverse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_full_field_name>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #12
   c:	mov	sl, r2
  10:	mov	r4, r0
  14:	cmp	r1, #1
  18:	bne	100 <print_full_field_name+0x100>
  1c:	movw	r5, #0
  20:	mov	r6, #0
  24:	str	sl, [sp]
  28:	movt	r5, #0
  2c:	ldr	r0, [r5, #136]	; 0x88
  30:	cmp	r0, #1
  34:	blt	15c <print_full_field_name+0x15c>
  38:	movw	r9, #0
  3c:	add	sl, sp, #8
  40:	mov	r7, #0
  44:	mov	r8, #0
  48:	movt	r9, #0
  4c:	b	64 <print_full_field_name+0x64>
  50:	add	r6, r6, #1
  54:	ldr	r0, [r5, #136]	; 0x88
  58:	add	r8, r8, #1
  5c:	cmp	r8, r0
  60:	bge	15c <print_full_field_name+0x15c>
  64:	add	r0, r5, r8, lsl #2
  68:	mov	r1, sl
  6c:	ldr	r0, [r0, #8]
  70:	bl	0 <coda_type_get_class>
  74:	cmp	r0, #0
  78:	beq	80 <print_full_field_name+0x80>
  7c:	bl	0 <handle_coda_error>
  80:	ldr	r0, [sp, #8]
  84:	cmp	r0, #1
  88:	beq	b0 <print_full_field_name+0xb0>
  8c:	cmp	r0, #0
  90:	bne	54 <print_full_field_name+0x54>
  94:	add	r0, r5, r7, lsl #2
  98:	mov	r1, r9
  9c:	ldr	r2, [r0, #3620]	; 0xe24
  a0:	mov	r0, r4
  a4:	bl	0 <fprintf>
  a8:	add	r7, r7, #1
  ac:	b	54 <print_full_field_name+0x54>
  b0:	cmp	r8, #0
  b4:	bne	c4 <print_full_field_name+0xc4>
  b8:	mov	r0, #47	; 0x2f
  bc:	mov	r1, r4
  c0:	bl	0 <fputc>
  c4:	add	r0, r6, r6, lsl #2
  c8:	add	r0, r5, r0, lsl #4
  cc:	ldr	r0, [r0, #804]	; 0x324
  d0:	cmp	r0, #1
  d4:	blt	50 <print_full_field_name+0x50>
  d8:	mov	r0, #91	; 0x5b
  dc:	mov	r1, r4
  e0:	bl	0 <fputc>
  e4:	mov	r0, r4
  e8:	mov	r1, r6
  ec:	bl	2c4 <print_array_dim>
  f0:	mov	r0, #93	; 0x5d
  f4:	mov	r1, r4
  f8:	bl	0 <fputc>
  fc:	b	50 <print_full_field_name+0x50>
 100:	movw	r7, #0
 104:	mov	r5, r1
 108:	movt	r7, #0
 10c:	ldr	r0, [r7, #3748]	; 0xea4
 110:	cmp	r0, #1
 114:	blt	190 <print_full_field_name+0x190>
 118:	mov	r6, #0
 11c:	cmp	r6, #0
 120:	bne	14c <print_full_field_name+0x14c>
 124:	add	r0, r7, r6, lsl #2
 128:	mov	r1, r4
 12c:	ldr	r0, [r0, #3620]	; 0xe24
 130:	bl	0 <fputs>
 134:	ldr	r0, [r7, #3748]	; 0xea4
 138:	add	r6, r6, #1
 13c:	cmp	r6, r0
 140:	bge	190 <print_full_field_name+0x190>
 144:	cmp	r6, #0
 148:	beq	124 <print_full_field_name+0x124>
 14c:	mov	r0, #46	; 0x2e
 150:	mov	r1, r4
 154:	bl	0 <fputc>
 158:	b	124 <print_full_field_name+0x124>
 15c:	ldr	r0, [sp]
 160:	cmp	r0, #0
 164:	beq	2bc <print_full_field_name+0x2bc>
 168:	ldr	r0, [r5, #3360]	; 0xd20
 16c:	cmp	r6, r0
 170:	bge	2bc <print_full_field_name+0x2bc>
 174:	mov	r0, #91	; 0x5b
 178:	mov	r1, r4
 17c:	bl	0 <fputc>
 180:	mov	r0, r4
 184:	mov	r1, r6
 188:	bl	2c4 <print_array_dim>
 18c:	b	2b0 <print_full_field_name+0x2b0>
 190:	cmp	r5, #2
 194:	bne	2bc <print_full_field_name+0x2bc>
 198:	ldr	r0, [r7, #136]	; 0x88
 19c:	mov	r6, #0
 1a0:	cmp	r0, #1
 1a4:	blt	248 <print_full_field_name+0x248>
 1a8:	movw	r9, #0
 1ac:	add	r8, sp, #4
 1b0:	mov	r5, #0
 1b4:	movt	r9, #0
 1b8:	b	1f0 <print_full_field_name+0x1f0>
 1bc:	mov	r0, r9
 1c0:	mov	r1, #2
 1c4:	mov	r2, #1
 1c8:	mov	r3, r4
 1cc:	bl	0 <fwrite>
 1d0:	mov	r0, r4
 1d4:	mov	r1, r6
 1d8:	bl	2c4 <print_array_dim>
 1dc:	add	r6, r6, #1
 1e0:	ldr	r0, [r7, #136]	; 0x88
 1e4:	add	r5, r5, #1
 1e8:	cmp	r5, r0
 1ec:	bge	248 <print_full_field_name+0x248>
 1f0:	add	r0, r7, r5, lsl #2
 1f4:	mov	r1, r8
 1f8:	ldr	r0, [r0, #8]
 1fc:	bl	0 <coda_type_get_class>
 200:	cmp	r0, #0
 204:	beq	20c <print_full_field_name+0x20c>
 208:	bl	0 <handle_coda_error>
 20c:	ldr	r0, [sp, #4]
 210:	cmp	r0, #1
 214:	bne	1e0 <print_full_field_name+0x1e0>
 218:	add	r0, r6, r6, lsl #2
 21c:	add	r0, r7, r0, lsl #4
 220:	ldr	r1, [r0, #804]	; 0x324
 224:	cmp	r1, #1
 228:	blt	1e0 <print_full_field_name+0x1e0>
 22c:	ldr	r0, [r0, #800]	; 0x320
 230:	cmp	r0, #0
 234:	beq	1bc <print_full_field_name+0x1bc>
 238:	mov	r0, #44	; 0x2c
 23c:	mov	r1, r4
 240:	bl	0 <fputc>
 244:	b	1d0 <print_full_field_name+0x1d0>
 248:	cmp	sl, #0
 24c:	beq	2a8 <print_full_field_name+0x2a8>
 250:	ldr	r0, [r7, #3360]	; 0xd20
 254:	cmp	r6, r0
 258:	bge	2a8 <print_full_field_name+0x2a8>
 25c:	add	r0, r6, r6, lsl #2
 260:	add	r0, r7, r0, lsl #4
 264:	ldr	r0, [r0, #800]	; 0x320
 268:	cmp	r0, #0
 26c:	beq	280 <print_full_field_name+0x280>
 270:	mov	r0, #44	; 0x2c
 274:	mov	r1, r4
 278:	bl	0 <fputc>
 27c:	b	298 <print_full_field_name+0x298>
 280:	movw	r0, #0
 284:	mov	r1, #2
 288:	mov	r2, #1
 28c:	mov	r3, r4
 290:	movt	r0, #0
 294:	bl	0 <fwrite>
 298:	mov	r0, r4
 29c:	mov	r1, r6
 2a0:	bl	2c4 <print_array_dim>
 2a4:	add	r6, r6, #1
 2a8:	cmp	r6, #1
 2ac:	blt	2bc <print_full_field_name+0x2bc>
 2b0:	mov	r0, #93	; 0x5d
 2b4:	mov	r1, r4
 2b8:	bl	0 <fputc>
 2bc:	sub	sp, fp, #28
 2c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000002c4 <print_array_dim>:
 2c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2c8:	add	fp, sp, #28
 2cc:	sub	sp, sp, #4
 2d0:	mov	r4, r0
 2d4:	add	r0, r1, r1, lsl #2
 2d8:	movw	r1, #0
 2dc:	movt	r1, #0
 2e0:	add	r0, r1, r0, lsl #4
 2e4:	mov	r7, r0
 2e8:	ldr	r1, [r7, #804]!	; 0x324
 2ec:	cmp	r1, #1
 2f0:	blt	3b0 <print_array_dim+0xec>
 2f4:	movw	r8, #0
 2f8:	movw	r9, #0
 2fc:	add	sl, r0, #808	; 0x328
 300:	add	r5, r0, #800	; 0x320
 304:	mov	r6, #0
 308:	movt	r8, #0
 30c:	movt	r9, #0
 310:	cmp	r6, #0
 314:	bne	348 <print_array_dim+0x84>
 318:	b	354 <print_array_dim+0x90>
 31c:	ldr	r2, [r0, #4]
 320:	movw	r1, #0
 324:	mov	r0, r4
 328:	movt	r1, #0
 32c:	bl	0 <fprintf>
 330:	ldr	r0, [r7]
 334:	add	r6, r6, #1
 338:	cmp	r6, r0
 33c:	bge	3b0 <print_array_dim+0xec>
 340:	cmp	r6, #0
 344:	beq	354 <print_array_dim+0x90>
 348:	mov	r0, #44	; 0x2c
 34c:	mov	r1, r4
 350:	bl	0 <fputc>
 354:	ldr	r0, [r8]
 358:	cmp	r0, #0
 35c:	beq	394 <print_array_dim+0xd0>
 360:	ldr	r0, [r5]
 364:	add	r0, r6, r0
 368:	add	r0, r9, r0, lsl #2
 36c:	ldr	r1, [r0, #72]	; 0x48
 370:	cmp	r1, #0
 374:	beq	31c <print_array_dim+0x58>
 378:	ldr	r3, [r0, #4]
 37c:	ldr	r2, [r0, #36]	; 0x24
 380:	movw	r1, #0
 384:	mov	r0, r4
 388:	movt	r1, #0
 38c:	bl	0 <fprintf>
 390:	b	330 <print_array_dim+0x6c>
 394:	ldr	r2, [sl, r6, lsl #2]
 398:	cmn	r2, #1
 39c:	bne	320 <print_array_dim+0x5c>
 3a0:	mov	r0, #63	; 0x3f
 3a4:	mov	r1, r4
 3a8:	bl	0 <fputc>
 3ac:	b	330 <print_array_dim+0x6c>
 3b0:	sub	sp, fp, #28
 3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000003b8 <traverse_info_init>:
 3b8:	movw	r0, #0
 3bc:	mov	r1, #0
 3c0:	movt	r0, #0
 3c4:	str	r1, [r0, #3748]	; 0xea4
 3c8:	str	r1, [r0, #3360]	; 0xd20
 3cc:	str	r1, [r0, #136]	; 0x88
 3d0:	str	r1, [r0, #4]
 3d4:	bx	lr

000003d8 <traverse_info_done>:
 3d8:	push	{r4, sl, fp, lr}
 3dc:	add	fp, sp, #8
 3e0:	movw	r4, #0
 3e4:	movt	r4, #0
 3e8:	ldr	r0, [r4, #4]
 3ec:	cmp	r0, #0
 3f0:	beq	3f8 <traverse_info_done+0x20>
 3f4:	bl	0 <coda_close>
 3f8:	ldr	r0, [r4, #664]	; 0x298
 3fc:	cmp	r0, #0
 400:	popeq	{r4, sl, fp, pc}
 404:	add	r0, r4, #664	; 0x298
 408:	pop	{r4, sl, fp, lr}
 40c:	b	0 <codadump_filter_remove>

00000410 <traverse_product>:
 410:	push	{r4, r5, fp, lr}
 414:	add	fp, sp, #8
 418:	movw	r5, #0
 41c:	movt	r5, #0
 420:	mov	r1, r5
 424:	ldr	r0, [r1], #4
 428:	bl	0 <coda_open>
 42c:	cmp	r0, #0
 430:	beq	470 <traverse_product+0x60>
 434:	bl	0 <coda_get_errno>
 438:	ldr	r0, [r0]
 43c:	cmn	r0, #21
 440:	bne	46c <traverse_product+0x5c>
 444:	mov	r0, #0
 448:	bl	0 <coda_set_option_use_mmap>
 44c:	mov	r1, r5
 450:	ldr	r0, [r1], #4
 454:	bl	0 <coda_open>
 458:	mov	r4, r0
 45c:	mov	r0, #1
 460:	bl	0 <coda_set_option_use_mmap>
 464:	cmp	r4, #0
 468:	beq	470 <traverse_product+0x60>
 46c:	bl	0 <handle_coda_error>
 470:	ldr	r1, [r5, #4]
 474:	add	r4, r5, #144	; 0x90
 478:	mov	r0, r4
 47c:	bl	0 <coda_cursor_set_product>
 480:	cmp	r0, #0
 484:	beq	48c <traverse_product+0x7c>
 488:	bl	0 <handle_coda_error>
 48c:	ldr	r0, [r5, #136]	; 0x88
 490:	add	r0, r5, r0, lsl #2
 494:	add	r1, r0, #8
 498:	mov	r0, r4
 49c:	bl	0 <coda_cursor_get_type>
 4a0:	cmp	r0, #0
 4a4:	beq	4ac <traverse_product+0x9c>
 4a8:	bl	0 <handle_coda_error>
 4ac:	bl	4c4 <traverse_data>
 4b0:	ldr	r0, [r5, #4]
 4b4:	bl	0 <coda_close>
 4b8:	mov	r0, #0
 4bc:	str	r0, [r5, #4]
 4c0:	pop	{r4, r5, fp, pc}

000004c4 <traverse_data>:
 4c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 4c8:	add	fp, sp, #24
 4cc:	sub	sp, sp, #16
 4d0:	movw	r6, #0
 4d4:	add	r1, sp, #12
 4d8:	movt	r6, #0
 4dc:	ldr	r0, [r6, #136]	; 0x88
 4e0:	add	r0, r6, r0, lsl #2
 4e4:	ldr	r0, [r0, #8]
 4e8:	bl	0 <coda_type_get_class>
 4ec:	cmp	r0, #0
 4f0:	beq	4f8 <traverse_data+0x34>
 4f4:	bl	0 <handle_coda_error>
 4f8:	ldr	r0, [sp, #12]
 4fc:	cmp	r0, #6
 500:	bhi	74c <traverse_data+0x288>
 504:	add	r1, pc, #0
 508:	ldr	pc, [r1, r0, lsl #2]
 50c:	.word	0x00000584
 510:	.word	0x00000680
 514:	.word	0x00000528
 518:	.word	0x00000528
 51c:	.word	0x00000528
 520:	.word	0x00000528
 524:	.word	0x000006d8
 528:	ldr	r0, [r6, #136]	; 0x88
 52c:	add	r1, sp, #8
 530:	add	r0, r6, r0, lsl #2
 534:	ldr	r0, [r0, #8]
 538:	bl	0 <coda_type_get_read_type>
 53c:	cmp	r0, #0
 540:	beq	548 <traverse_data+0x84>
 544:	bl	0 <handle_coda_error>
 548:	ldr	r0, [sp, #8]
 54c:	sub	r0, r0, #11
 550:	cmp	r0, #1
 554:	bhi	748 <traverse_data+0x284>
 558:	bl	0 <dim_enter_array>
 55c:	ldr	r0, [r6, #3360]	; 0xd20
 560:	add	r0, r0, #1
 564:	str	r0, [r6, #3360]	; 0xd20
 568:	bl	910 <handle_data_element>
 56c:	ldr	r0, [r6, #3360]	; 0xd20
 570:	sub	r0, r0, #1
 574:	str	r0, [r6, #3360]	; 0xd20
 578:	bl	0 <dim_leave_array>
 57c:	sub	sp, fp, #24
 580:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 584:	ldr	r0, [r6, #136]	; 0x88
 588:	cmp	r0, #30
 58c:	bgt	74c <traverse_data+0x288>
 590:	ldr	r1, [r6, #3748]	; 0xea4
 594:	add	r0, r6, r0, lsl #2
 598:	add	r1, r1, #1
 59c:	str	r1, [r6, #3748]	; 0xea4
 5a0:	add	r1, sp, #8
 5a4:	ldr	r0, [r0, #8]
 5a8:	bl	0 <coda_type_get_num_record_fields>
 5ac:	cmp	r0, #0
 5b0:	beq	5b8 <traverse_data+0xf4>
 5b4:	bl	0 <handle_coda_error>
 5b8:	ldr	r0, [r6, #136]	; 0x88
 5bc:	add	r0, r0, #1
 5c0:	str	r0, [r6, #136]	; 0x88
 5c4:	ldr	r0, [r6, #796]	; 0x31c
 5c8:	add	r0, r6, r0, lsl #2
 5cc:	ldr	r8, [r0, #664]	; 0x298
 5d0:	cmp	r8, #0
 5d4:	beq	75c <traverse_data+0x298>
 5d8:	add	r4, sp, #4
 5dc:	add	r7, r6, #664	; 0x298
 5e0:	mov	r0, r8
 5e4:	b	638 <traverse_data+0x174>
 5e8:	ldr	r0, [r6, #796]	; 0x31c
 5ec:	ldr	r0, [r7, r0, lsl #2]
 5f0:	bl	0 <codadump_filter_get_subfilter>
 5f4:	ldr	r1, [r6, #796]	; 0x31c
 5f8:	add	r1, r1, #1
 5fc:	str	r0, [r7, r1, lsl #2]
 600:	ldr	r0, [sp, #4]
 604:	str	r1, [r6, #796]	; 0x31c
 608:	mov	r1, #1
 60c:	bl	7f4 <traverse_record>
 610:	ldr	r0, [r6, #796]	; 0x31c
 614:	sub	r0, r0, #1
 618:	str	r0, [r6, #796]	; 0x31c
 61c:	ldr	r0, [r7, r0, lsl #2]
 620:	bl	0 <codadump_filter_get_next_filter>
 624:	ldr	r2, [r6, #796]	; 0x31c
 628:	mov	r1, r7
 62c:	cmp	r0, #0
 630:	str	r0, [r1, r2, lsl #2]!
 634:	beq	754 <traverse_data+0x290>
 638:	bl	0 <codadump_filter_get_fieldname>
 63c:	cmp	r0, #0
 640:	beq	7b0 <traverse_data+0x2ec>
 644:	mov	r5, r0
 648:	ldr	r0, [r6, #136]	; 0x88
 64c:	mov	r2, r4
 650:	mov	r1, r5
 654:	add	r0, r6, r0, lsl #2
 658:	ldr	r0, [r0, #4]
 65c:	bl	0 <coda_type_get_record_field_index_from_name>
 660:	cmp	r0, #0
 664:	beq	5e8 <traverse_data+0x124>
 668:	bl	0 <coda_get_errno>
 66c:	ldr	r0, [r0]
 670:	cmn	r0, #102	; 0x66
 674:	beq	7d0 <traverse_data+0x30c>
 678:	bl	0 <handle_coda_error>
 67c:	b	5e8 <traverse_data+0x124>
 680:	ldr	r0, [r6, #136]	; 0x88
 684:	cmp	r0, #30
 688:	bgt	74c <traverse_data+0x288>
 68c:	bl	0 <dim_enter_array>
 690:	ldr	r0, [r6, #3360]	; 0xd20
 694:	add	r2, r6, #8
 698:	add	r0, r0, #1
 69c:	str	r0, [r6, #3360]	; 0xd20
 6a0:	ldr	r0, [r6, #136]	; 0x88
 6a4:	add	r1, r0, #1
 6a8:	str	r1, [r6, #136]	; 0x88
 6ac:	add	r1, r2, r1, lsl #2
 6b0:	ldr	r0, [r2, r0, lsl #2]
 6b4:	bl	0 <coda_type_get_array_base_type>
 6b8:	cmp	r0, #0
 6bc:	beq	6c4 <traverse_data+0x200>
 6c0:	bl	0 <handle_coda_error>
 6c4:	bl	4c4 <traverse_data>
 6c8:	ldr	r0, [r6, #136]	; 0x88
 6cc:	sub	r0, r0, #1
 6d0:	str	r0, [r6, #136]	; 0x88
 6d4:	b	56c <traverse_data+0xa8>
 6d8:	bl	0 <coda_get_option_bypass_special_types>
 6dc:	mov	r2, r0
 6e0:	ldr	r0, [r6, #136]	; 0x88
 6e4:	cmp	r2, #0
 6e8:	add	r1, r6, r0, lsl #2
 6ec:	ldr	r0, [r1, #8]!
 6f0:	beq	710 <traverse_data+0x24c>
 6f4:	bl	0 <coda_type_get_special_base_type>
 6f8:	cmp	r0, #0
 6fc:	beq	704 <traverse_data+0x240>
 700:	bl	0 <handle_coda_error>
 704:	bl	4c4 <traverse_data>
 708:	sub	sp, fp, #24
 70c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 710:	add	r1, sp, #8
 714:	bl	0 <coda_type_get_special_type>
 718:	cmp	r0, #0
 71c:	beq	724 <traverse_data+0x260>
 720:	bl	0 <handle_coda_error>
 724:	ldr	r0, [sp, #8]
 728:	sub	r1, r0, #1
 72c:	cmp	r1, #2
 730:	bcc	748 <traverse_data+0x284>
 734:	cmp	r0, #0
 738:	beq	74c <traverse_data+0x288>
 73c:	cmp	r0, #3
 740:	beq	558 <traverse_data+0x94>
 744:	b	74c <traverse_data+0x288>
 748:	bl	910 <handle_data_element>
 74c:	sub	sp, fp, #24
 750:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 754:	str	r8, [r1]
 758:	b	790 <traverse_data+0x2cc>
 75c:	ldr	r1, [sp, #8]
 760:	mov	r0, #0
 764:	str	r0, [sp, #4]
 768:	cmp	r1, #1
 76c:	blt	790 <traverse_data+0x2cc>
 770:	mov	r1, #0
 774:	bl	7f4 <traverse_record>
 778:	ldr	r0, [sp, #4]
 77c:	ldr	r1, [sp, #8]
 780:	add	r0, r0, #1
 784:	cmp	r0, r1
 788:	str	r0, [sp, #4]
 78c:	blt	770 <traverse_data+0x2ac>
 790:	ldr	r0, [r6, #136]	; 0x88
 794:	sub	r0, r0, #1
 798:	str	r0, [r6, #136]	; 0x88
 79c:	ldr	r0, [r6, #3748]	; 0xea4
 7a0:	sub	r0, r0, #1
 7a4:	str	r0, [r6, #3748]	; 0xea4
 7a8:	sub	sp, fp, #24
 7ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 7b0:	movw	r0, #0
 7b4:	movw	r1, #0
 7b8:	movw	r3, #0
 7bc:	movw	r2, #393	; 0x189
 7c0:	movt	r0, #0
 7c4:	movt	r1, #0
 7c8:	movt	r3, #0
 7cc:	bl	0 <__assert_fail>
 7d0:	movw	r0, #0
 7d4:	movw	r1, #0
 7d8:	mov	r2, r5
 7dc:	movt	r0, #0
 7e0:	movt	r1, #0
 7e4:	ldr	r0, [r0]
 7e8:	bl	0 <fprintf>
 7ec:	mov	r0, #1
 7f0:	bl	0 <exit>

000007f4 <traverse_record>:
 7f4:	push	{r4, r5, r6, sl, fp, lr}
 7f8:	add	fp, sp, #16
 7fc:	sub	sp, sp, #8
 800:	movw	r6, #0
 804:	mov	r4, r0
 808:	mov	r5, r1
 80c:	add	r2, sp, #4
 810:	movt	r6, #0
 814:	mov	r1, r4
 818:	ldr	r0, [r6, #3748]	; 0xea4
 81c:	add	r0, r6, r0, lsl #2
 820:	str	r4, [r0, #3488]	; 0xda0
 824:	ldr	r0, [r6, #136]	; 0x88
 828:	add	r0, r6, r0, lsl #2
 82c:	ldr	r0, [r0, #4]
 830:	bl	0 <coda_type_get_record_field_hidden_status>
 834:	cmp	r0, #0
 838:	beq	840 <traverse_record+0x4c>
 83c:	bl	0 <handle_coda_error>
 840:	cmp	r5, #0
 844:	bne	854 <traverse_record+0x60>
 848:	ldr	r0, [sp, #4]
 84c:	cmp	r0, #0
 850:	bne	908 <traverse_record+0x114>
 854:	movw	r0, #0
 858:	movt	r0, #0
 85c:	ldr	r0, [r0]
 860:	cmp	r0, #0
 864:	beq	8b4 <traverse_record+0xc0>
 868:	ldr	r0, [r6, #136]	; 0x88
 86c:	mov	r2, sp
 870:	mov	r1, r4
 874:	add	r0, r6, r0, lsl #2
 878:	ldr	r0, [r0, #4]
 87c:	bl	0 <coda_type_get_record_field_available_status>
 880:	cmp	r0, #0
 884:	beq	88c <traverse_record+0x98>
 888:	bl	0 <handle_coda_error>
 88c:	ldr	r0, [sp]
 890:	cmn	r0, #1
 894:	bne	8a8 <traverse_record+0xb4>
 898:	bl	0 <dim_record_field_available>
 89c:	cmp	r0, #0
 8a0:	beq	908 <traverse_record+0x114>
 8a4:	ldr	r0, [sp]
 8a8:	ldr	r1, [r6, #136]	; 0x88
 8ac:	add	r1, r6, r1, lsl #2
 8b0:	str	r0, [r1, #3360]	; 0xd20
 8b4:	ldr	r0, [r6, #136]	; 0x88
 8b8:	ldr	r1, [r6, #3748]	; 0xea4
 8bc:	add	r0, r6, r0, lsl #2
 8c0:	add	r1, r6, r1, lsl #2
 8c4:	ldr	r0, [r0, #4]
 8c8:	add	r2, r1, #3616	; 0xe20
 8cc:	mov	r1, r4
 8d0:	bl	0 <coda_type_get_record_field_name>
 8d4:	cmp	r0, #0
 8d8:	beq	8e0 <traverse_record+0xec>
 8dc:	bl	0 <handle_coda_error>
 8e0:	ldr	r0, [r6, #136]	; 0x88
 8e4:	add	r1, r6, r0, lsl #2
 8e8:	ldr	r0, [r1, #4]
 8ec:	add	r2, r1, #8
 8f0:	mov	r1, r4
 8f4:	bl	0 <coda_type_get_record_field_type>
 8f8:	cmp	r0, #0
 8fc:	beq	904 <traverse_record+0x110>
 900:	bl	0 <handle_coda_error>
 904:	bl	4c4 <traverse_data>
 908:	sub	sp, fp, #16
 90c:	pop	{r4, r5, r6, sl, fp, pc}

00000910 <handle_data_element>:
 910:	push	{r4, r5, fp, lr}
 914:	add	fp, sp, #8
 918:	sub	sp, sp, #8
 91c:	movw	r0, #0
 920:	movt	r0, #0
 924:	ldr	r0, [r0]
 928:	cmp	r0, #1
 92c:	beq	9d4 <handle_data_element+0xc4>
 930:	cmp	r0, #0
 934:	bne	b4c <handle_data_element+0x23c>
 938:	movw	r5, #0
 93c:	mov	r1, #1
 940:	mov	r2, #0
 944:	movt	r5, #0
 948:	ldr	r0, [r5]
 94c:	bl	0 <print_full_field_name>
 950:	movw	r0, #0
 954:	movw	r4, #0
 958:	movt	r0, #0
 95c:	movt	r4, #0
 960:	ldr	r0, [r0]
 964:	cmp	r0, #0
 968:	beq	a50 <handle_data_element+0x140>
 96c:	ldr	r0, [r4, #136]	; 0x88
 970:	add	r1, sp, #4
 974:	add	r0, r4, r0, lsl #2
 978:	ldr	r0, [r0, #8]
 97c:	bl	0 <coda_type_get_class>
 980:	cmp	r0, #0
 984:	beq	98c <handle_data_element+0x7c>
 988:	bl	0 <handle_coda_error>
 98c:	ldr	r0, [sp, #4]
 990:	cmp	r0, #6
 994:	bne	9e0 <handle_data_element+0xd0>
 998:	ldr	r0, [r4, #136]	; 0x88
 99c:	mov	r1, sp
 9a0:	add	r0, r4, r0, lsl #2
 9a4:	ldr	r0, [r0, #8]
 9a8:	bl	0 <coda_type_get_special_type>
 9ac:	cmp	r0, #0
 9b0:	beq	9b8 <handle_data_element+0xa8>
 9b4:	bl	0 <handle_coda_error>
 9b8:	ldr	r0, [sp]
 9bc:	bl	0 <coda_type_get_special_type_name>
 9c0:	mov	r1, r0
 9c4:	movw	r0, #0
 9c8:	movt	r0, #0
 9cc:	bl	0 <printf>
 9d0:	b	a50 <handle_data_element+0x140>
 9d4:	sub	sp, fp, #8
 9d8:	pop	{r4, r5, fp, lr}
 9dc:	b	0 <export_data_element_to_ascii>
 9e0:	ldr	r0, [r4, #136]	; 0x88
 9e4:	mov	r1, sp
 9e8:	add	r0, r4, r0, lsl #2
 9ec:	ldr	r0, [r0, #8]
 9f0:	bl	0 <coda_type_get_read_type>
 9f4:	cmp	r0, #0
 9f8:	beq	a00 <handle_data_element+0xf0>
 9fc:	bl	0 <handle_coda_error>
 a00:	ldr	r0, [sp]
 a04:	bl	0 <coda_type_get_native_type_name>
 a08:	mov	r1, r0
 a0c:	movw	r0, #0
 a10:	movt	r0, #0
 a14:	bl	0 <printf>
 a18:	ldr	r0, [sp]
 a1c:	sub	r0, r0, #11
 a20:	cmp	r0, #1
 a24:	bhi	a50 <handle_data_element+0x140>
 a28:	mov	r0, #40	; 0x28
 a2c:	bl	0 <putchar>
 a30:	ldr	r1, [r4, #3360]	; 0xd20
 a34:	cmp	r1, #0
 a38:	ble	b54 <handle_data_element+0x244>
 a3c:	ldr	r0, [r5]
 a40:	sub	r1, r1, #1
 a44:	bl	2c4 <print_array_dim>
 a48:	mov	r0, #41	; 0x29
 a4c:	bl	0 <putchar>
 a50:	movw	r0, #0
 a54:	movt	r0, #0
 a58:	ldr	r0, [r0]
 a5c:	cmp	r0, #0
 a60:	beq	aa8 <handle_data_element+0x198>
 a64:	ldr	r0, [r4, #136]	; 0x88
 a68:	add	r1, sp, #4
 a6c:	add	r0, r4, r0, lsl #2
 a70:	ldr	r0, [r0, #8]
 a74:	bl	0 <coda_type_get_unit>
 a78:	cmp	r0, #0
 a7c:	beq	a84 <handle_data_element+0x174>
 a80:	bl	0 <handle_coda_error>
 a84:	ldr	r1, [sp, #4]
 a88:	cmp	r1, #0
 a8c:	beq	aa8 <handle_data_element+0x198>
 a90:	ldrb	r0, [r1]
 a94:	cmp	r0, #0
 a98:	beq	aa8 <handle_data_element+0x198>
 a9c:	movw	r0, #0
 aa0:	movt	r0, #0
 aa4:	bl	0 <printf>
 aa8:	movw	r0, #0
 aac:	movt	r0, #0
 ab0:	ldr	r0, [r0]
 ab4:	cmp	r0, #0
 ab8:	beq	b00 <handle_data_element+0x1f0>
 abc:	ldr	r0, [r4, #136]	; 0x88
 ac0:	add	r1, sp, #4
 ac4:	add	r0, r4, r0, lsl #2
 ac8:	ldr	r0, [r0, #8]
 acc:	bl	0 <coda_type_get_description>
 ad0:	cmp	r0, #0
 ad4:	beq	adc <handle_data_element+0x1cc>
 ad8:	bl	0 <handle_coda_error>
 adc:	ldr	r1, [sp, #4]
 ae0:	cmp	r1, #0
 ae4:	beq	b00 <handle_data_element+0x1f0>
 ae8:	ldrb	r0, [r1]
 aec:	cmp	r0, #0
 af0:	beq	b00 <handle_data_element+0x1f0>
 af4:	movw	r0, #0
 af8:	movt	r0, #0
 afc:	bl	0 <printf>
 b00:	mov	r0, #10
 b04:	bl	0 <putchar>
 b08:	movw	r0, #0
 b0c:	movt	r0, #0
 b10:	ldr	r0, [r0]
 b14:	cmp	r0, #0
 b18:	beq	b4c <handle_data_element+0x23c>
 b1c:	movw	r5, #0
 b20:	movt	r5, #0
 b24:	ldr	r0, [r5]
 b28:	cmp	r0, #1
 b2c:	blt	b4c <handle_data_element+0x23c>
 b30:	mov	r4, #0
 b34:	mov	r0, r4
 b38:	bl	0 <print_all_distinct_dims>
 b3c:	ldr	r0, [r5]
 b40:	add	r4, r4, #1
 b44:	cmp	r4, r0
 b48:	blt	b34 <handle_data_element+0x224>
 b4c:	sub	sp, fp, #8
 b50:	pop	{r4, r5, fp, pc}
 b54:	movw	r0, #0
 b58:	movw	r1, #0
 b5c:	movw	r3, #0
 b60:	mov	r2, #238	; 0xee
 b64:	movt	r0, #0
 b68:	movt	r1, #0
 b6c:	movt	r3, #0
 b70:	bl	0 <__assert_fail>
