
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #352	; 0x160
       c:	movw	r2, #0
      10:	str	r2, [fp, #-12]
      14:	str	r0, [fp, #-16]
      18:	str	r1, [fp, #-20]	; 0xffffffec
      1c:	movw	r0, #10
      20:	str	r0, [sp, #60]	; 0x3c
      24:	str	r2, [sp, #52]	; 0x34
      28:	add	r0, sp, #96	; 0x60
      2c:	str	r0, [sp, #92]	; 0x5c
      30:	ldr	r0, [sp, #92]	; 0x5c
      34:	bl	0 <flatcc_builder_init>
      38:	ldr	r1, [sp, #92]	; 0x5c
      3c:	str	r0, [sp, #44]	; 0x2c
      40:	mov	r0, r1
      44:	bl	338 <create_root_monster>
      48:	ldr	r1, [sp, #92]	; 0x5c
      4c:	str	r0, [sp, #40]	; 0x28
      50:	mov	r0, r1
      54:	sub	r1, fp, #32
      58:	bl	0 <flatcc_builder_finalize_buffer>
      5c:	str	r0, [fp, #-28]	; 0xffffffe4
      60:	movw	r0, #0
      64:	movt	r0, #0
      68:	movw	r1, #0
      6c:	movt	r1, #0
      70:	bl	0 <fopen>
      74:	str	r0, [fp, #-24]	; 0xffffffe8
      78:	ldr	r0, [fp, #-24]	; 0xffffffe8
      7c:	movw	r1, #0
      80:	cmp	r0, r1
      84:	bne	94 <main+0x94>
      88:	mvn	r0, #0
      8c:	str	r0, [sp, #52]	; 0x34
      90:	b	300 <main+0x300>
      94:	ldr	r0, [fp, #-32]	; 0xffffffe0
      98:	ldr	r1, [fp, #-28]	; 0xffffffe4
      9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
      a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
      a4:	str	r0, [sp, #36]	; 0x24
      a8:	mov	r0, r1
      ac:	movw	r1, #1
      b0:	bl	0 <fwrite>
      b4:	ldr	r1, [sp, #36]	; 0x24
      b8:	cmp	r1, r0
      bc:	movw	r0, #0
      c0:	movne	r0, #1
      c4:	and	r0, r0, #1
      c8:	ldr	r2, [sp, #52]	; 0x34
      cc:	orr	r0, r2, r0
      d0:	str	r0, [sp, #52]	; 0x34
      d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
      d8:	bl	0 <fclose>
      dc:	ldr	r1, [sp, #52]	; 0x34
      e0:	cmp	r1, #0
      e4:	str	r0, [sp, #32]
      e8:	beq	f0 <main+0xf0>
      ec:	b	300 <main+0x300>
      f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
      f4:	movw	r0, #0
      f8:	movt	r0, #0
      fc:	bl	0 <printf>
     100:	movw	r1, #0
     104:	movt	r1, #0
     108:	str	r0, [sp, #28]
     10c:	mov	r0, r1
     110:	bl	0 <printf>
     114:	str	r0, [sp, #24]
     118:	bl	3f0 <elapsed_realtime>
     11c:	vstr	d0, [sp, #72]	; 0x48
     120:	movw	r0, #0
     124:	str	r0, [sp, #56]	; 0x38
     128:	ldr	r0, [sp, #56]	; 0x38
     12c:	ldr	r1, [sp, #60]	; 0x3c
     130:	cmp	r0, r1
     134:	bge	2d4 <main+0x2d4>
     138:	ldr	r0, [sp, #92]	; 0x5c
     13c:	bl	338 <create_root_monster>
     140:	ldr	lr, [sp, #92]	; 0x5c
     144:	ldr	r1, [fp, #-28]	; 0xffffffe4
     148:	ldr	r2, [fp, #-32]	; 0xffffffe0
     14c:	str	r0, [sp, #20]
     150:	mov	r0, lr
     154:	bl	0 <flatcc_builder_copy_buffer>
     158:	ldr	r1, [fp, #-28]	; 0xffffffe4
     15c:	str	r0, [sp, #16]
     160:	mov	r0, r1
     164:	bl	488 <MyGame_Example_Monster_as_root>
     168:	str	r0, [sp, #88]	; 0x58
     16c:	ldr	r0, [sp, #88]	; 0x58
     170:	bl	500 <MyGame_Example_Monster_name>
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	bl	0 <strcmp>
     180:	ldr	r1, [sp, #52]	; 0x34
     184:	orr	r0, r1, r0
     188:	str	r0, [sp, #52]	; 0x34
     18c:	ldr	r0, [sp, #52]	; 0x34
     190:	cmp	r0, #0
     194:	bne	19c <main+0x19c>
     198:	b	1bc <main+0x1bc>
     19c:	movw	r0, #0
     1a0:	movt	r0, #0
     1a4:	movw	r1, #0
     1a8:	movt	r1, #0
     1ac:	movw	r2, #139	; 0x8b
     1b0:	movw	r3, #0
     1b4:	movt	r3, #0
     1b8:	bl	0 <__assert_fail>
     1bc:	ldr	r0, [sp, #88]	; 0x58
     1c0:	bl	608 <MyGame_Example_Monster_testarrayoftables>
     1c4:	str	r0, [sp, #84]	; 0x54
     1c8:	ldr	r0, [sp, #84]	; 0x54
     1cc:	bl	704 <MyGame_Example_Monster_vec_len>
     1d0:	cmp	r0, #1000	; 0x3e8
     1d4:	movw	r0, #0
     1d8:	movne	r0, #1
     1dc:	and	r0, r0, #1
     1e0:	ldr	lr, [sp, #52]	; 0x34
     1e4:	orr	r0, lr, r0
     1e8:	str	r0, [sp, #52]	; 0x34
     1ec:	ldr	r0, [sp, #52]	; 0x34
     1f0:	cmp	r0, #0
     1f4:	bne	1fc <main+0x1fc>
     1f8:	b	21c <main+0x21c>
     1fc:	movw	r0, #0
     200:	movt	r0, #0
     204:	movw	r1, #0
     208:	movt	r1, #0
     20c:	movw	r2, #143	; 0x8f
     210:	movw	r3, #0
     214:	movt	r3, #0
     218:	bl	0 <__assert_fail>
     21c:	movw	r0, #0
     220:	str	r0, [sp, #48]	; 0x30
     224:	ldr	r0, [sp, #48]	; 0x30
     228:	cmp	r0, #1000	; 0x3e8
     22c:	bge	2b0 <main+0x2b0>
     230:	ldr	r0, [fp, #-28]	; 0xffffffe4
     234:	ldr	r1, [sp, #84]	; 0x54
     238:	ldr	r2, [sp, #48]	; 0x30
     23c:	str	r0, [sp, #12]
     240:	mov	r0, r1
     244:	mov	r1, r2
     248:	bl	968 <MyGame_Example_Monster_vec_at>
     24c:	ldr	r1, [sp, #12]
     250:	str	r0, [sp, #8]
     254:	mov	r0, r1
     258:	ldr	r1, [sp, #8]
     25c:	bl	754 <verify_monster>
     260:	ldr	r1, [sp, #52]	; 0x34
     264:	orr	r0, r1, r0
     268:	str	r0, [sp, #52]	; 0x34
     26c:	ldr	r0, [sp, #52]	; 0x34
     270:	cmp	r0, #0
     274:	bne	27c <main+0x27c>
     278:	b	29c <main+0x29c>
     27c:	movw	r0, #0
     280:	movt	r0, #0
     284:	movw	r1, #0
     288:	movt	r1, #0
     28c:	movw	r2, #147	; 0x93
     290:	movw	r3, #0
     294:	movt	r3, #0
     298:	bl	0 <__assert_fail>
     29c:	b	2a0 <main+0x2a0>
     2a0:	ldr	r0, [sp, #48]	; 0x30
     2a4:	add	r0, r0, #1
     2a8:	str	r0, [sp, #48]	; 0x30
     2ac:	b	224 <main+0x224>
     2b0:	ldr	r0, [sp, #52]	; 0x34
     2b4:	cmp	r0, #0
     2b8:	beq	2c0 <main+0x2c0>
     2bc:	b	300 <main+0x300>
     2c0:	b	2c4 <main+0x2c4>
     2c4:	ldr	r0, [sp, #56]	; 0x38
     2c8:	add	r0, r0, #1
     2cc:	str	r0, [sp, #56]	; 0x38
     2d0:	b	128 <main+0x128>
     2d4:	bl	3f0 <elapsed_realtime>
     2d8:	vstr	d0, [sp, #64]	; 0x40
     2dc:	vldr	d0, [sp, #72]	; 0x48
     2e0:	vldr	d1, [sp, #64]	; 0x40
     2e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     2e8:	ldr	r2, [sp, #60]	; 0x3c
     2ec:	movw	r0, #0
     2f0:	movt	r0, #0
     2f4:	movw	r3, #0
     2f8:	bl	9f0 <show_benchmark>
     2fc:	str	r0, [sp, #4]
     300:	ldr	r0, [sp, #92]	; 0x5c
     304:	bl	0 <flatcc_builder_clear>
     308:	ldr	r0, [fp, #-28]	; 0xffffffe4
     30c:	bl	0 <free>
     310:	ldr	r0, [sp, #52]	; 0x34
     314:	cmp	r0, #0
     318:	beq	32c <main+0x32c>
     31c:	movw	r0, #0
     320:	movt	r0, #0
     324:	bl	0 <printf>
     328:	str	r0, [sp]
     32c:	ldr	r0, [sp, #52]	; 0x34
     330:	sub	sp, fp, #8
     334:	pop	{r4, r5, fp, pc}

00000338 <create_root_monster>:
     338:	push	{fp, lr}
     33c:	mov	fp, sp
     340:	sub	sp, sp, #32
     344:	str	r0, [fp, #-4]
     348:	ldr	r0, [fp, #-4]
     34c:	bl	0 <flatcc_builder_reset>
     350:	ldr	lr, [fp, #-4]
     354:	str	r0, [fp, #-12]
     358:	mov	r0, lr
     35c:	bl	c40 <MyGame_Example_Monster_start_as_root>
     360:	ldr	lr, [fp, #-4]
     364:	str	r0, [sp, #16]
     368:	mov	r0, lr
     36c:	movw	r1, #0
     370:	movt	r1, #0
     374:	bl	c8c <MyGame_Example_Monster_name_create_str>
     378:	ldr	r1, [fp, #-4]
     37c:	str	r0, [sp, #12]
     380:	mov	r0, r1
     384:	bl	cd8 <create_monsters>
     388:	str	r0, [fp, #-8]
     38c:	ldr	r0, [fp, #-8]
     390:	cmp	r0, #0
     394:	beq	39c <create_root_monster+0x64>
     398:	b	3bc <create_root_monster+0x84>
     39c:	movw	r0, #0
     3a0:	movt	r0, #0
     3a4:	movw	r1, #0
     3a8:	movt	r1, #0
     3ac:	movw	r2, #56	; 0x38
     3b0:	movw	r3, #0
     3b4:	movt	r3, #0
     3b8:	bl	0 <__assert_fail>
     3bc:	ldr	r0, [fp, #-4]
     3c0:	ldr	r1, [fp, #-8]
     3c4:	bl	d74 <MyGame_Example_Monster_testarrayoftables_add>
     3c8:	ldr	r1, [fp, #-4]
     3cc:	str	r0, [sp, #8]
     3d0:	mov	r0, r1
     3d4:	bl	de0 <MyGame_Example_Monster_end_as_root>
     3d8:	movw	r1, #0
     3dc:	str	r0, [sp, #4]
     3e0:	mov	r0, r1
     3e4:	mov	sp, fp
     3e8:	pop	{fp, pc}
     3ec:	nop	{0}

000003f0 <elapsed_realtime>:
     3f0:	push	{fp, lr}
     3f4:	mov	fp, sp
     3f8:	sub	sp, sp, #16
     3fc:	add	r0, sp, #8
     400:	movw	r1, #0
     404:	bl	0 <gettimeofday>
     408:	movw	r1, #0
     40c:	movt	r1, #0
     410:	ldr	r1, [r1]
     414:	cmp	r1, #0
     418:	str	r0, [sp, #4]
     41c:	bne	438 <elapsed_realtime+0x48>
     420:	ldr	r0, [sp, #8]
     424:	movw	r1, #0
     428:	movt	r1, #0
     42c:	str	r0, [r1]
     430:	ldr	r0, [sp, #12]
     434:	str	r0, [r1, #4]
     438:	vldr	d16, [pc, #64]	; 480 <elapsed_realtime+0x90>
     43c:	ldr	r0, [sp, #8]
     440:	movw	r1, #0
     444:	movt	r1, #0
     448:	ldr	r2, [r1]
     44c:	sub	r0, r0, r2
     450:	vmov	s0, r0
     454:	vcvt.f64.s32	d17, s0
     458:	ldr	r0, [sp, #12]
     45c:	ldr	r1, [r1, #4]
     460:	sub	r0, r0, r1
     464:	vmov	s0, r0
     468:	vcvt.f64.s32	d18, s0
     46c:	vdiv.f64	d16, d18, d16
     470:	vadd.f64	d0, d17, d16
     474:	mov	sp, fp
     478:	pop	{fp, pc}
     47c:	nop	{0}
     480:	.word	0x00000000
     484:	.word	0x412e8480

00000488 <MyGame_Example_Monster_as_root>:
     488:	push	{fp, lr}
     48c:	mov	fp, sp
     490:	sub	sp, sp, #16
     494:	str	r0, [fp, #-4]
     498:	movw	r0, #0
     49c:	movt	r0, #0
     4a0:	str	r0, [sp, #8]
     4a4:	ldr	r0, [fp, #-4]
     4a8:	movw	r1, #0
     4ac:	cmp	r0, r1
     4b0:	beq	4c8 <MyGame_Example_Monster_as_root+0x40>
     4b4:	ldr	r0, [fp, #-4]
     4b8:	ldr	r1, [sp, #8]
     4bc:	bl	12b4 <flatbuffers_has_identifier>
     4c0:	cmp	r0, #0
     4c4:	bne	4d4 <MyGame_Example_Monster_as_root+0x4c>
     4c8:	movw	r0, #0
     4cc:	str	r0, [sp, #4]
     4d0:	b	4f4 <MyGame_Example_Monster_as_root+0x6c>
     4d4:	ldr	r0, [fp, #-4]
     4d8:	ldr	r1, [fp, #-4]
     4dc:	str	r0, [sp]
     4e0:	mov	r0, r1
     4e4:	bl	1360 <__flatbuffers_uoffset_read_from_pe>
     4e8:	ldr	r1, [sp]
     4ec:	add	r0, r1, r0
     4f0:	str	r0, [sp, #4]
     4f4:	ldr	r0, [sp, #4]
     4f8:	mov	sp, fp
     4fc:	pop	{fp, pc}

00000500 <MyGame_Example_Monster_name>:
     500:	push	{fp, lr}
     504:	mov	fp, sp
     508:	sub	sp, sp, #24
     50c:	str	r0, [fp, #-4]
     510:	movw	r0, #0
     514:	strh	r0, [fp, #-10]
     518:	ldr	r0, [fp, #-4]
     51c:	movw	r1, #0
     520:	cmp	r0, r1
     524:	beq	530 <MyGame_Example_Monster_name+0x30>
     528:	b	52c <MyGame_Example_Monster_name+0x2c>
     52c:	b	550 <MyGame_Example_Monster_name+0x50>
     530:	movw	r0, #0
     534:	movt	r0, #0
     538:	movw	r1, #0
     53c:	movt	r1, #0
     540:	movw	r2, #699	; 0x2bb
     544:	movw	r3, #0
     548:	movt	r3, #0
     54c:	bl	0 <__assert_fail>
     550:	mov	r0, #3
     554:	strh	r0, [sp, #12]
     558:	ldr	r0, [fp, #-4]
     55c:	str	r0, [sp, #4]
     560:	bl	13e4 <__flatbuffers_soffset_read_from_pe>
     564:	ldr	lr, [sp, #4]
     568:	sub	r0, lr, r0
     56c:	str	r0, [sp, #8]
     570:	ldr	r0, [sp, #8]
     574:	bl	1408 <__flatbuffers_voffset_read_from_pe>
     578:	ldrh	lr, [sp, #12]
     57c:	add	lr, lr, #3
     580:	lsl	lr, lr, #1
     584:	cmp	r0, lr
     588:	bcc	5a4 <MyGame_Example_Monster_name+0xa4>
     58c:	ldr	r0, [sp, #8]
     590:	ldrh	r1, [sp, #12]
     594:	add	r0, r0, r1, lsl #1
     598:	add	r0, r0, #4
     59c:	bl	1408 <__flatbuffers_voffset_read_from_pe>
     5a0:	strh	r0, [fp, #-10]
     5a4:	ldrsh	r0, [fp, #-10]
     5a8:	cmp	r0, #0
     5ac:	beq	5e8 <MyGame_Example_Monster_name+0xe8>
     5b0:	ldr	r0, [fp, #-4]
     5b4:	ldrh	r1, [fp, #-10]
     5b8:	add	r0, r0, r1
     5bc:	str	r0, [fp, #-8]
     5c0:	ldr	r0, [fp, #-8]
     5c4:	add	r0, r0, #4
     5c8:	ldr	r1, [fp, #-8]
     5cc:	str	r0, [sp]
     5d0:	mov	r0, r1
     5d4:	bl	1360 <__flatbuffers_uoffset_read_from_pe>
     5d8:	ldr	r1, [sp]
     5dc:	add	r0, r1, r0
     5e0:	mov	sp, fp
     5e4:	pop	{fp, pc}
     5e8:	movw	r0, #0
     5ec:	movt	r0, #0
     5f0:	movw	r1, #0
     5f4:	movt	r1, #0
     5f8:	movw	r2, #699	; 0x2bb
     5fc:	movw	r3, #0
     600:	movt	r3, #0
     604:	bl	0 <__assert_fail>

00000608 <MyGame_Example_Monster_testarrayoftables>:
     608:	push	{fp, lr}
     60c:	mov	fp, sp
     610:	sub	sp, sp, #32
     614:	str	r0, [fp, #-8]
     618:	movw	r0, #0
     61c:	strh	r0, [fp, #-14]
     620:	ldr	r0, [fp, #-8]
     624:	movw	r1, #0
     628:	cmp	r0, r1
     62c:	beq	638 <MyGame_Example_Monster_testarrayoftables+0x30>
     630:	b	634 <MyGame_Example_Monster_testarrayoftables+0x2c>
     634:	b	658 <MyGame_Example_Monster_testarrayoftables+0x50>
     638:	movw	r0, #0
     63c:	movt	r0, #0
     640:	movw	r1, #0
     644:	movt	r1, #0
     648:	movw	r2, #711	; 0x2c7
     64c:	movw	r3, #0
     650:	movt	r3, #0
     654:	bl	0 <__assert_fail>
     658:	mov	r0, #11
     65c:	strh	r0, [sp, #16]
     660:	ldr	r0, [fp, #-8]
     664:	str	r0, [sp, #8]
     668:	bl	13e4 <__flatbuffers_soffset_read_from_pe>
     66c:	ldr	lr, [sp, #8]
     670:	sub	r0, lr, r0
     674:	str	r0, [sp, #12]
     678:	ldr	r0, [sp, #12]
     67c:	bl	1408 <__flatbuffers_voffset_read_from_pe>
     680:	ldrh	lr, [sp, #16]
     684:	add	lr, lr, #3
     688:	lsl	lr, lr, #1
     68c:	cmp	r0, lr
     690:	bcc	6ac <MyGame_Example_Monster_testarrayoftables+0xa4>
     694:	ldr	r0, [sp, #12]
     698:	ldrh	r1, [sp, #16]
     69c:	add	r0, r0, r1, lsl #1
     6a0:	add	r0, r0, #4
     6a4:	bl	1408 <__flatbuffers_voffset_read_from_pe>
     6a8:	strh	r0, [fp, #-14]
     6ac:	ldrsh	r0, [fp, #-14]
     6b0:	cmp	r0, #0
     6b4:	beq	6f0 <MyGame_Example_Monster_testarrayoftables+0xe8>
     6b8:	ldr	r0, [fp, #-8]
     6bc:	ldrh	r1, [fp, #-14]
     6c0:	add	r0, r0, r1
     6c4:	str	r0, [fp, #-12]
     6c8:	ldr	r0, [fp, #-12]
     6cc:	add	r0, r0, #4
     6d0:	ldr	r1, [fp, #-12]
     6d4:	str	r0, [sp, #4]
     6d8:	mov	r0, r1
     6dc:	bl	1360 <__flatbuffers_uoffset_read_from_pe>
     6e0:	ldr	r1, [sp, #4]
     6e4:	add	r0, r1, r0
     6e8:	str	r0, [fp, #-4]
     6ec:	b	6f8 <MyGame_Example_Monster_testarrayoftables+0xf0>
     6f0:	movw	r0, #0
     6f4:	str	r0, [fp, #-4]
     6f8:	ldr	r0, [fp, #-4]
     6fc:	mov	sp, fp
     700:	pop	{fp, pc}

00000704 <MyGame_Example_Monster_vec_len>:
     704:	push	{fp, lr}
     708:	mov	fp, sp
     70c:	sub	sp, sp, #8
     710:	str	r0, [sp, #4]
     714:	ldr	r0, [sp, #4]
     718:	movw	r1, #0
     71c:	cmp	r0, r1
     720:	beq	73c <MyGame_Example_Monster_vec_len+0x38>
     724:	ldr	r0, [sp, #4]
     728:	mvn	r1, #3
     72c:	add	r0, r0, r1
     730:	bl	1360 <__flatbuffers_uoffset_read_from_pe>
     734:	str	r0, [sp]
     738:	b	748 <MyGame_Example_Monster_vec_len+0x44>
     73c:	movw	r0, #0
     740:	str	r0, [sp]
     744:	b	748 <MyGame_Example_Monster_vec_len+0x44>
     748:	ldr	r0, [sp]
     74c:	mov	sp, fp
     750:	pop	{fp, pc}

00000754 <verify_monster>:
     754:	push	{fp, lr}
     758:	mov	fp, sp
     75c:	sub	sp, sp, #40	; 0x28
     760:	str	r0, [fp, #-4]
     764:	str	r1, [fp, #-8]
     768:	ldr	r0, [fp, #-8]
     76c:	bl	500 <MyGame_Example_Monster_name>
     770:	str	r0, [fp, #-16]
     774:	ldr	r0, [fp, #-8]
     778:	bl	1458 <MyGame_Example_Monster_inventory>
     77c:	str	r0, [sp, #20]
     780:	ldr	r0, [fp, #-16]
     784:	bl	1554 <flatbuffers_string_len>
     788:	cmp	r0, #700	; 0x2bc
     78c:	beq	7b0 <verify_monster+0x5c>
     790:	movw	r0, #0
     794:	movt	r0, #0
     798:	movw	r1, #0
     79c:	movt	r1, #0
     7a0:	movw	r2, #74	; 0x4a
     7a4:	movw	r3, #0
     7a8:	movt	r3, #0
     7ac:	bl	0 <__assert_fail>
     7b0:	ldr	r0, [sp, #20]
     7b4:	bl	15a4 <flatbuffers_uint8_vec_len>
     7b8:	ldr	lr, [pc, #420]	; 964 <verify_monster+0x210>
     7bc:	cmp	r0, lr
     7c0:	beq	7e4 <verify_monster+0x90>
     7c4:	movw	r0, #0
     7c8:	movt	r0, #0
     7cc:	movw	r1, #0
     7d0:	movt	r1, #0
     7d4:	movw	r2, #78	; 0x4e
     7d8:	movw	r3, #0
     7dc:	movt	r3, #0
     7e0:	bl	0 <__assert_fail>
     7e4:	movw	r0, #0
     7e8:	str	r0, [fp, #-12]
     7ec:	ldr	r0, [fp, #-12]
     7f0:	cmp	r0, #100	; 0x64
     7f4:	bcs	8e4 <verify_monster+0x190>
     7f8:	ldr	r0, [fp, #-16]
     7fc:	ldr	r1, [fp, #-12]
     800:	movw	r2, #7
     804:	mul	r1, r1, r2
     808:	add	r0, r0, r1
     80c:	movw	r1, #0
     810:	movt	r1, #0
     814:	mov	r2, #7
     818:	bl	0 <memcmp>
     81c:	cmp	r0, #0
     820:	beq	8d0 <verify_monster+0x17c>
     824:	ldr	r1, [fp, #-12]
     828:	ldr	r0, [fp, #-16]
     82c:	movw	r2, #0
     830:	cmp	r0, r2
     834:	str	r1, [sp, #16]
     838:	beq	848 <verify_monster+0xf4>
     83c:	ldr	r0, [fp, #-16]
     840:	str	r0, [sp, #12]
     844:	b	858 <verify_monster+0x104>
     848:	movw	r0, #0
     84c:	movt	r0, #0
     850:	str	r0, [sp, #12]
     854:	b	858 <verify_monster+0x104>
     858:	ldr	r0, [sp, #12]
     85c:	movw	r1, #0
     860:	movt	r1, #0
     864:	str	r0, [sp, #8]
     868:	mov	r0, r1
     86c:	ldr	r1, [sp, #16]
     870:	ldr	r2, [sp, #8]
     874:	bl	0 <printf>
     878:	ldr	r1, [fp, #-16]
     87c:	ldr	r2, [fp, #-12]
     880:	movw	lr, #7
     884:	mul	r2, r2, lr
     888:	add	r1, r1, r2
     88c:	ldr	r2, [fp, #-4]
     890:	sub	r1, r1, r2
     894:	movw	r2, #0
     898:	movt	r2, #0
     89c:	str	r0, [sp, #4]
     8a0:	mov	r0, r2
     8a4:	bl	0 <printf>
     8a8:	movw	r1, #0
     8ac:	movt	r1, #0
     8b0:	str	r0, [sp]
     8b4:	mov	r0, r1
     8b8:	movw	r1, #0
     8bc:	movt	r1, #0
     8c0:	movw	r2, #85	; 0x55
     8c4:	movw	r3, #0
     8c8:	movt	r3, #0
     8cc:	bl	0 <__assert_fail>
     8d0:	b	8d4 <verify_monster+0x180>
     8d4:	ldr	r0, [fp, #-12]
     8d8:	add	r0, r0, #1
     8dc:	str	r0, [fp, #-12]
     8e0:	b	7ec <verify_monster+0x98>
     8e4:	movw	r0, #0
     8e8:	str	r0, [fp, #-12]
     8ec:	ldr	r0, [fp, #-12]
     8f0:	cmp	r0, #100	; 0x64
     8f4:	bcs	958 <verify_monster+0x204>
     8f8:	ldr	r0, [sp, #20]
     8fc:	ldr	r1, [fp, #-12]
     900:	movw	r2, #1000	; 0x3e8
     904:	mul	r1, r1, r2
     908:	add	r0, r0, r1
     90c:	movw	r1, #0
     910:	movt	r1, #0
     914:	mov	r2, #1000	; 0x3e8
     918:	bl	0 <memcmp>
     91c:	cmp	r0, #0
     920:	beq	944 <verify_monster+0x1f0>
     924:	movw	r0, #0
     928:	movt	r0, #0
     92c:	movw	r1, #0
     930:	movt	r1, #0
     934:	movw	r2, #91	; 0x5b
     938:	movw	r3, #0
     93c:	movt	r3, #0
     940:	bl	0 <__assert_fail>
     944:	b	948 <verify_monster+0x1f4>
     948:	ldr	r0, [fp, #-12]
     94c:	add	r0, r0, #1
     950:	str	r0, [fp, #-12]
     954:	b	8ec <verify_monster+0x198>
     958:	movw	r0, #0
     95c:	mov	sp, fp
     960:	pop	{fp, pc}
     964:	.word	0x000186a0

00000968 <MyGame_Example_Monster_vec_at>:
     968:	push	{fp, lr}
     96c:	mov	fp, sp
     970:	sub	sp, sp, #16
     974:	str	r0, [fp, #-4]
     978:	str	r1, [sp, #8]
     97c:	ldr	r0, [fp, #-4]
     980:	ldr	r1, [sp, #8]
     984:	add	r0, r0, r1, lsl #2
     988:	str	r0, [sp, #4]
     98c:	ldr	r0, [fp, #-4]
     990:	bl	15c4 <flatbuffers_vec_len>
     994:	ldr	r1, [sp, #8]
     998:	cmp	r0, r1
     99c:	bls	9a8 <MyGame_Example_Monster_vec_at+0x40>
     9a0:	b	9a4 <MyGame_Example_Monster_vec_at+0x3c>
     9a4:	b	9c8 <MyGame_Example_Monster_vec_at+0x60>
     9a8:	movw	r0, #0
     9ac:	movt	r0, #0
     9b0:	movw	r1, #0
     9b4:	movt	r1, #0
     9b8:	movw	r2, #693	; 0x2b5
     9bc:	movw	r3, #0
     9c0:	movt	r3, #0
     9c4:	bl	0 <__assert_fail>
     9c8:	ldr	r0, [sp, #4]
     9cc:	ldr	r1, [sp, #4]
     9d0:	str	r0, [sp]
     9d4:	mov	r0, r1
     9d8:	bl	1360 <__flatbuffers_uoffset_read_from_pe>
     9dc:	ldr	r1, [sp]
     9e0:	add	r0, r1, r0
     9e4:	mov	sp, fp
     9e8:	pop	{fp, pc}
     9ec:	nop	{0}

000009f0 <show_benchmark>:
     9f0:	push	{fp, lr}
     9f4:	mov	fp, sp
     9f8:	sub	sp, sp, #104	; 0x68
     9fc:	str	r0, [fp, #-4]
     a00:	vstr	d0, [fp, #-16]
     a04:	vstr	d1, [fp, #-24]	; 0xffffffe8
     a08:	str	r1, [fp, #-28]	; 0xffffffe4
     a0c:	str	r2, [fp, #-32]	; 0xffffffe0
     a10:	str	r3, [fp, #-36]	; 0xffffffdc
     a14:	vldr	d0, [fp, #-24]	; 0xffffffe8
     a18:	vldr	d1, [fp, #-16]
     a1c:	vsub.f64	d0, d0, d1
     a20:	vstr	d0, [fp, #-48]	; 0xffffffd0
     a24:	ldr	r1, [fp, #-4]
     a28:	movw	r0, #0
     a2c:	movt	r0, #0
     a30:	bl	0 <printf>
     a34:	vldr	d0, [fp, #-48]	; 0xffffffd0
     a38:	movw	r1, #0
     a3c:	movt	r1, #0
     a40:	str	r0, [sp, #44]	; 0x2c
     a44:	mov	r0, r1
     a48:	vmov	r2, r3, d0
     a4c:	bl	0 <printf>
     a50:	ldr	r1, [fp, #-32]	; 0xffffffe0
     a54:	movw	r2, #0
     a58:	movt	r2, #0
     a5c:	str	r0, [sp, #40]	; 0x28
     a60:	mov	r0, r2
     a64:	bl	0 <printf>
     a68:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a6c:	movw	r2, #0
     a70:	movt	r2, #0
     a74:	str	r0, [sp, #36]	; 0x24
     a78:	mov	r0, r2
     a7c:	bl	0 <printf>
     a80:	vldr	d0, [pc, #416]	; c28 <show_benchmark+0x238>
     a84:	ldr	r1, [fp, #-32]	; 0xffffffe0
     a88:	vmov	s4, r1
     a8c:	vcvt.f64.s32	d1, s4
     a90:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a94:	vmov	s4, r1
     a98:	vcvt.f64.u32	d16, s4
     a9c:	vmul.f64	d16, d1, d16
     aa0:	vdiv.f64	d16, d16, d0
     aa4:	vldr	d0, [fp, #-48]	; 0xffffffd0
     aa8:	vdiv.f64	d16, d16, d0
     aac:	movw	r1, #0
     ab0:	movt	r1, #0
     ab4:	str	r0, [sp, #32]
     ab8:	mov	r0, r1
     abc:	vmov	r2, r3, d16
     ac0:	bl	0 <printf>
     ac4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     ac8:	vmov	s4, r1
     acc:	vcvt.f64.s32	d16, s4
     ad0:	vldr	d0, [fp, #-48]	; 0xffffffd0
     ad4:	vdiv.f64	d16, d16, d0
     ad8:	movw	r1, #0
     adc:	movt	r1, #0
     ae0:	str	r0, [sp, #28]
     ae4:	mov	r0, r1
     ae8:	vmov	r2, r3, d16
     aec:	bl	0 <printf>
     af0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     af4:	movw	r2, #0
     af8:	cmp	r1, r2
     afc:	str	r0, [sp, #24]
     b00:	beq	b34 <show_benchmark+0x144>
     b04:	ldr	r0, [fp, #-32]	; 0xffffffe0
     b08:	cmp	r0, #1
     b0c:	beq	b34 <show_benchmark+0x144>
     b10:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b14:	vldr	d16, [fp, #-48]	; 0xffffffd0
     b18:	vmov.f64	d17, #112	; 0x3f800000  1.0
     b1c:	vdiv.f64	d16, d17, d16
     b20:	movw	r0, #0
     b24:	movt	r0, #0
     b28:	vmov	r2, r3, d16
     b2c:	bl	0 <printf>
     b30:	str	r0, [sp, #20]
     b34:	vldr	d16, [pc, #244]	; c30 <show_benchmark+0x240>
     b38:	vldr	d17, [pc, #248]	; c38 <show_benchmark+0x248>
     b3c:	vldr	d18, [fp, #-48]	; 0xffffffd0
     b40:	vmul.f64	d17, d18, d17
     b44:	ldr	r0, [fp, #-32]	; 0xffffffe0
     b48:	vmov	s0, r0
     b4c:	vcvt.f64.s32	d18, s0
     b50:	vdiv.f64	d17, d17, d18
     b54:	vstr	d17, [sp, #48]	; 0x30
     b58:	vldr	d17, [sp, #48]	; 0x30
     b5c:	vcmpe.f64	d17, d16
     b60:	vmrs	APSR_nzcv, fpscr
     b64:	bpl	b84 <show_benchmark+0x194>
     b68:	vldr	d16, [sp, #48]	; 0x30
     b6c:	movw	r0, #0
     b70:	movt	r0, #0
     b74:	vmov	r2, r3, d16
     b78:	bl	0 <printf>
     b7c:	str	r0, [sp, #16]
     b80:	b	c1c <show_benchmark+0x22c>
     b84:	vldr	d16, [pc, #156]	; c28 <show_benchmark+0x238>
     b88:	vldr	d17, [sp, #48]	; 0x30
     b8c:	vcmpe.f64	d17, d16
     b90:	vmrs	APSR_nzcv, fpscr
     b94:	bpl	bbc <show_benchmark+0x1cc>
     b98:	vldr	d16, [pc, #144]	; c30 <show_benchmark+0x240>
     b9c:	vldr	d17, [sp, #48]	; 0x30
     ba0:	vdiv.f64	d16, d17, d16
     ba4:	movw	r0, #0
     ba8:	movt	r0, #0
     bac:	vmov	r2, r3, d16
     bb0:	bl	0 <printf>
     bb4:	str	r0, [sp, #12]
     bb8:	b	c18 <show_benchmark+0x228>
     bbc:	vldr	d16, [pc, #116]	; c38 <show_benchmark+0x248>
     bc0:	vldr	d17, [sp, #48]	; 0x30
     bc4:	vcmpe.f64	d17, d16
     bc8:	vmrs	APSR_nzcv, fpscr
     bcc:	bpl	bf4 <show_benchmark+0x204>
     bd0:	vldr	d16, [pc, #80]	; c28 <show_benchmark+0x238>
     bd4:	vldr	d17, [sp, #48]	; 0x30
     bd8:	vdiv.f64	d16, d17, d16
     bdc:	movw	r0, #0
     be0:	movt	r0, #0
     be4:	vmov	r2, r3, d16
     be8:	bl	0 <printf>
     bec:	str	r0, [sp, #8]
     bf0:	b	c14 <show_benchmark+0x224>
     bf4:	vldr	d16, [pc, #60]	; c38 <show_benchmark+0x248>
     bf8:	vldr	d17, [sp, #48]	; 0x30
     bfc:	vdiv.f64	d16, d17, d16
     c00:	movw	r0, #0
     c04:	movt	r0, #0
     c08:	vmov	r2, r3, d16
     c0c:	bl	0 <printf>
     c10:	str	r0, [sp, #4]
     c14:	b	c18 <show_benchmark+0x228>
     c18:	b	c1c <show_benchmark+0x22c>
     c1c:	movw	r0, #0
     c20:	mov	sp, fp
     c24:	pop	{fp, pc}
     c28:	.word	0x00000000
     c2c:	.word	0x412e8480
     c30:	.word	0x00000000
     c34:	.word	0x408f4000
     c38:	.word	0x00000000
     c3c:	.word	0x41cdcd65

00000c40 <MyGame_Example_Monster_start_as_root>:
     c40:	push	{fp, lr}
     c44:	mov	fp, sp
     c48:	sub	sp, sp, #8
     c4c:	str	r0, [sp, #4]
     c50:	ldr	r0, [sp, #4]
     c54:	movw	r1, #0
     c58:	movt	r1, #0
     c5c:	bl	e20 <flatbuffers_buffer_start>
     c60:	cmp	r0, #0
     c64:	beq	c74 <MyGame_Example_Monster_start_as_root+0x34>
     c68:	mvn	r0, #0
     c6c:	str	r0, [sp]
     c70:	b	c80 <MyGame_Example_Monster_start_as_root+0x40>
     c74:	ldr	r0, [sp, #4]
     c78:	bl	e54 <MyGame_Example_Monster_start>
     c7c:	str	r0, [sp]
     c80:	ldr	r0, [sp]
     c84:	mov	sp, fp
     c88:	pop	{fp, pc}

00000c8c <MyGame_Example_Monster_name_create_str>:
     c8c:	push	{fp, lr}
     c90:	mov	fp, sp
     c94:	sub	sp, sp, #16
     c98:	str	r0, [fp, #-4]
     c9c:	str	r1, [sp, #8]
     ca0:	ldr	r0, [fp, #-4]
     ca4:	ldr	r1, [fp, #-4]
     ca8:	ldr	r2, [sp, #8]
     cac:	str	r0, [sp, #4]
     cb0:	mov	r0, r1
     cb4:	mov	r1, r2
     cb8:	bl	0 <flatcc_builder_create_string_str>
     cbc:	ldr	r1, [sp, #4]
     cc0:	str	r0, [sp]
     cc4:	mov	r0, r1
     cc8:	ldr	r1, [sp]
     ccc:	bl	e78 <MyGame_Example_Monster_name_add>
     cd0:	mov	sp, fp
     cd4:	pop	{fp, pc}

00000cd8 <create_monsters>:
     cd8:	push	{fp, lr}
     cdc:	mov	fp, sp
     ce0:	sub	sp, sp, #24
     ce4:	str	r0, [fp, #-4]
     ce8:	ldr	r0, [fp, #-4]
     cec:	bl	ee4 <MyGame_Example_Monster_vec_start>
     cf0:	movw	lr, #0
     cf4:	str	lr, [fp, #-8]
     cf8:	str	r0, [sp, #8]
     cfc:	ldr	r0, [fp, #-8]
     d00:	cmp	r0, #1000	; 0x3e8
     d04:	bcs	d64 <create_monsters+0x8c>
     d08:	ldr	r0, [fp, #-4]
     d0c:	bl	f04 <create_monster>
     d10:	str	r0, [sp, #12]
     d14:	ldr	r0, [sp, #12]
     d18:	cmp	r0, #0
     d1c:	beq	d24 <create_monsters+0x4c>
     d20:	b	d44 <create_monsters+0x6c>
     d24:	movw	r0, #0
     d28:	movt	r0, #0
     d2c:	movw	r1, #0
     d30:	movt	r1, #0
     d34:	movw	r2, #42	; 0x2a
     d38:	movw	r3, #0
     d3c:	movt	r3, #0
     d40:	bl	0 <__assert_fail>
     d44:	ldr	r0, [fp, #-4]
     d48:	ldr	r1, [sp, #12]
     d4c:	bl	fe4 <MyGame_Example_Monster_vec_push>
     d50:	str	r0, [sp, #4]
     d54:	ldr	r0, [fp, #-8]
     d58:	add	r0, r0, #1
     d5c:	str	r0, [fp, #-8]
     d60:	b	cfc <create_monsters+0x24>
     d64:	ldr	r0, [fp, #-4]
     d68:	bl	1030 <MyGame_Example_Monster_vec_end>
     d6c:	mov	sp, fp
     d70:	pop	{fp, pc}

00000d74 <MyGame_Example_Monster_testarrayoftables_add>:
     d74:	push	{fp, lr}
     d78:	mov	fp, sp
     d7c:	sub	sp, sp, #16
     d80:	str	r0, [fp, #-4]
     d84:	str	r1, [sp, #8]
     d88:	ldr	r0, [sp, #8]
     d8c:	cmp	r0, #0
     d90:	beq	dc8 <MyGame_Example_Monster_testarrayoftables_add+0x54>
     d94:	ldr	r0, [fp, #-4]
     d98:	movw	r1, #11
     d9c:	bl	0 <flatcc_builder_table_add_offset>
     da0:	str	r0, [sp, #4]
     da4:	movw	r1, #0
     da8:	cmp	r0, r1
     dac:	beq	dc8 <MyGame_Example_Monster_testarrayoftables_add+0x54>
     db0:	ldr	r0, [sp, #8]
     db4:	ldr	r1, [sp, #4]
     db8:	str	r0, [r1]
     dbc:	movw	r0, #0
     dc0:	str	r0, [sp]
     dc4:	b	dd4 <MyGame_Example_Monster_testarrayoftables_add+0x60>
     dc8:	mvn	r0, #0
     dcc:	str	r0, [sp]
     dd0:	b	dd4 <MyGame_Example_Monster_testarrayoftables_add+0x60>
     dd4:	ldr	r0, [sp]
     dd8:	mov	sp, fp
     ddc:	pop	{fp, pc}

00000de0 <MyGame_Example_Monster_end_as_root>:
     de0:	push	{fp, lr}
     de4:	mov	fp, sp
     de8:	sub	sp, sp, #16
     dec:	str	r0, [fp, #-4]
     df0:	ldr	r0, [fp, #-4]
     df4:	ldr	r1, [fp, #-4]
     df8:	str	r0, [sp, #8]
     dfc:	mov	r0, r1
     e00:	bl	1170 <MyGame_Example_Monster_end>
     e04:	ldr	r1, [sp, #8]
     e08:	str	r0, [sp, #4]
     e0c:	mov	r0, r1
     e10:	ldr	r1, [sp, #4]
     e14:	bl	128c <flatbuffers_buffer_end>
     e18:	mov	sp, fp
     e1c:	pop	{fp, pc}

00000e20 <flatbuffers_buffer_start>:
     e20:	push	{fp, lr}
     e24:	mov	fp, sp
     e28:	sub	sp, sp, #8
     e2c:	str	r0, [sp, #4]
     e30:	str	r1, [sp]
     e34:	ldr	r0, [sp, #4]
     e38:	ldr	r1, [sp]
     e3c:	movw	r2, #0
     e40:	uxth	r2, r2
     e44:	movw	r3, #0
     e48:	bl	0 <flatcc_builder_start_buffer>
     e4c:	mov	sp, fp
     e50:	pop	{fp, pc}

00000e54 <MyGame_Example_Monster_start>:
     e54:	push	{fp, lr}
     e58:	mov	fp, sp
     e5c:	sub	sp, sp, #8
     e60:	str	r0, [sp, #4]
     e64:	ldr	r0, [sp, #4]
     e68:	movw	r1, #36	; 0x24
     e6c:	bl	0 <flatcc_builder_start_table>
     e70:	mov	sp, fp
     e74:	pop	{fp, pc}

00000e78 <MyGame_Example_Monster_name_add>:
     e78:	push	{fp, lr}
     e7c:	mov	fp, sp
     e80:	sub	sp, sp, #16
     e84:	str	r0, [fp, #-4]
     e88:	str	r1, [sp, #8]
     e8c:	ldr	r0, [sp, #8]
     e90:	cmp	r0, #0
     e94:	beq	ecc <MyGame_Example_Monster_name_add+0x54>
     e98:	ldr	r0, [fp, #-4]
     e9c:	movw	r1, #3
     ea0:	bl	0 <flatcc_builder_table_add_offset>
     ea4:	str	r0, [sp, #4]
     ea8:	movw	r1, #0
     eac:	cmp	r0, r1
     eb0:	beq	ecc <MyGame_Example_Monster_name_add+0x54>
     eb4:	ldr	r0, [sp, #8]
     eb8:	ldr	r1, [sp, #4]
     ebc:	str	r0, [r1]
     ec0:	movw	r0, #0
     ec4:	str	r0, [sp]
     ec8:	b	ed8 <MyGame_Example_Monster_name_add+0x60>
     ecc:	mvn	r0, #0
     ed0:	str	r0, [sp]
     ed4:	b	ed8 <MyGame_Example_Monster_name_add+0x60>
     ed8:	ldr	r0, [sp]
     edc:	mov	sp, fp
     ee0:	pop	{fp, pc}

00000ee4 <MyGame_Example_Monster_vec_start>:
     ee4:	push	{fp, lr}
     ee8:	mov	fp, sp
     eec:	sub	sp, sp, #8
     ef0:	str	r0, [sp, #4]
     ef4:	ldr	r0, [sp, #4]
     ef8:	bl	0 <flatcc_builder_start_offset_vector>
     efc:	mov	sp, fp
     f00:	pop	{fp, pc}

00000f04 <create_monster>:
     f04:	push	{fp, lr}
     f08:	mov	fp, sp
     f0c:	sub	sp, sp, #40	; 0x28
     f10:	str	r0, [fp, #-4]
     f14:	ldr	r0, [fp, #-4]
     f18:	bl	e54 <MyGame_Example_Monster_start>
     f1c:	ldr	lr, [fp, #-4]
     f20:	str	r0, [fp, #-12]
     f24:	mov	r0, lr
     f28:	bl	1050 <MyGame_Example_Monster_name_start>
     f2c:	movw	lr, #0
     f30:	str	lr, [fp, #-8]
     f34:	str	r0, [fp, #-16]
     f38:	ldr	r0, [fp, #-8]
     f3c:	cmp	r0, #100	; 0x64
     f40:	bcs	f6c <create_monster+0x68>
     f44:	ldr	r0, [fp, #-4]
     f48:	movw	r1, #0
     f4c:	movt	r1, #0
     f50:	movw	r2, #7
     f54:	bl	1070 <flatbuffers_string_append>
     f58:	str	r0, [sp, #20]
     f5c:	ldr	r0, [fp, #-8]
     f60:	add	r0, r0, #1
     f64:	str	r0, [fp, #-8]
     f68:	b	f38 <create_monster+0x34>
     f6c:	ldr	r0, [fp, #-4]
     f70:	bl	10a0 <MyGame_Example_Monster_name_end>
     f74:	ldr	lr, [fp, #-4]
     f78:	str	r0, [sp, #16]
     f7c:	mov	r0, lr
     f80:	bl	10e0 <MyGame_Example_Monster_inventory_start>
     f84:	movw	lr, #0
     f88:	str	lr, [fp, #-8]
     f8c:	str	r0, [sp, #12]
     f90:	ldr	r0, [fp, #-8]
     f94:	cmp	r0, #100	; 0x64
     f98:	bcs	fc4 <create_monster+0xc0>
     f9c:	ldr	r0, [fp, #-4]
     fa0:	movw	r1, #0
     fa4:	movt	r1, #0
     fa8:	movw	r2, #1000	; 0x3e8
     fac:	bl	1100 <flatbuffers_uint8_vec_append>
     fb0:	str	r0, [sp, #8]
     fb4:	ldr	r0, [fp, #-8]
     fb8:	add	r0, r0, #1
     fbc:	str	r0, [fp, #-8]
     fc0:	b	f90 <create_monster+0x8c>
     fc4:	ldr	r0, [fp, #-4]
     fc8:	bl	1130 <MyGame_Example_Monster_inventory_end>
     fcc:	ldr	lr, [fp, #-4]
     fd0:	str	r0, [sp, #4]
     fd4:	mov	r0, lr
     fd8:	bl	1170 <MyGame_Example_Monster_end>
     fdc:	mov	sp, fp
     fe0:	pop	{fp, pc}

00000fe4 <MyGame_Example_Monster_vec_push>:
     fe4:	push	{fp, lr}
     fe8:	mov	fp, sp
     fec:	sub	sp, sp, #16
     ff0:	str	r0, [fp, #-4]
     ff4:	str	r1, [sp, #8]
     ff8:	ldr	r0, [sp, #8]
     ffc:	cmp	r0, #0
    1000:	beq	1018 <MyGame_Example_Monster_vec_push+0x34>
    1004:	ldr	r0, [fp, #-4]
    1008:	ldr	r1, [sp, #8]
    100c:	bl	0 <flatcc_builder_offset_vector_push>
    1010:	str	r0, [sp, #4]
    1014:	b	1024 <MyGame_Example_Monster_vec_push+0x40>
    1018:	movw	r0, #0
    101c:	str	r0, [sp, #4]
    1020:	b	1024 <MyGame_Example_Monster_vec_push+0x40>
    1024:	ldr	r0, [sp, #4]
    1028:	mov	sp, fp
    102c:	pop	{fp, pc}

00001030 <MyGame_Example_Monster_vec_end>:
    1030:	push	{fp, lr}
    1034:	mov	fp, sp
    1038:	sub	sp, sp, #8
    103c:	str	r0, [sp, #4]
    1040:	ldr	r0, [sp, #4]
    1044:	bl	0 <flatcc_builder_end_offset_vector>
    1048:	mov	sp, fp
    104c:	pop	{fp, pc}

00001050 <MyGame_Example_Monster_name_start>:
    1050:	push	{fp, lr}
    1054:	mov	fp, sp
    1058:	sub	sp, sp, #8
    105c:	str	r0, [sp, #4]
    1060:	ldr	r0, [sp, #4]
    1064:	bl	0 <flatcc_builder_start_string>
    1068:	mov	sp, fp
    106c:	pop	{fp, pc}

00001070 <flatbuffers_string_append>:
    1070:	push	{fp, lr}
    1074:	mov	fp, sp
    1078:	sub	sp, sp, #16
    107c:	str	r0, [fp, #-4]
    1080:	str	r1, [sp, #8]
    1084:	str	r2, [sp, #4]
    1088:	ldr	r0, [fp, #-4]
    108c:	ldr	r1, [sp, #8]
    1090:	ldr	r2, [sp, #4]
    1094:	bl	0 <flatcc_builder_append_string>
    1098:	mov	sp, fp
    109c:	pop	{fp, pc}

000010a0 <MyGame_Example_Monster_name_end>:
    10a0:	push	{fp, lr}
    10a4:	mov	fp, sp
    10a8:	sub	sp, sp, #16
    10ac:	str	r0, [fp, #-4]
    10b0:	ldr	r0, [fp, #-4]
    10b4:	ldr	r1, [fp, #-4]
    10b8:	str	r0, [sp, #8]
    10bc:	mov	r0, r1
    10c0:	bl	0 <flatcc_builder_end_string>
    10c4:	ldr	r1, [sp, #8]
    10c8:	str	r0, [sp, #4]
    10cc:	mov	r0, r1
    10d0:	ldr	r1, [sp, #4]
    10d4:	bl	e78 <MyGame_Example_Monster_name_add>
    10d8:	mov	sp, fp
    10dc:	pop	{fp, pc}

000010e0 <MyGame_Example_Monster_inventory_start>:
    10e0:	push	{fp, lr}
    10e4:	mov	fp, sp
    10e8:	sub	sp, sp, #8
    10ec:	str	r0, [sp, #4]
    10f0:	ldr	r0, [sp, #4]
    10f4:	bl	11d0 <flatbuffers_uint8_vec_start>
    10f8:	mov	sp, fp
    10fc:	pop	{fp, pc}

00001100 <flatbuffers_uint8_vec_append>:
    1100:	push	{fp, lr}
    1104:	mov	fp, sp
    1108:	sub	sp, sp, #16
    110c:	str	r0, [fp, #-4]
    1110:	str	r1, [sp, #8]
    1114:	str	r2, [sp, #4]
    1118:	ldr	r0, [fp, #-4]
    111c:	ldr	r1, [sp, #8]
    1120:	ldr	r2, [sp, #4]
    1124:	bl	0 <flatcc_builder_append_vector>
    1128:	mov	sp, fp
    112c:	pop	{fp, pc}

00001130 <MyGame_Example_Monster_inventory_end>:
    1130:	push	{fp, lr}
    1134:	mov	fp, sp
    1138:	sub	sp, sp, #16
    113c:	str	r0, [fp, #-4]
    1140:	ldr	r0, [fp, #-4]
    1144:	ldr	r1, [fp, #-4]
    1148:	str	r0, [sp, #8]
    114c:	mov	r0, r1
    1150:	bl	126c <flatbuffers_uint8_vec_end>
    1154:	ldr	r1, [sp, #8]
    1158:	str	r0, [sp, #4]
    115c:	mov	r0, r1
    1160:	ldr	r1, [sp, #4]
    1164:	bl	1200 <MyGame_Example_Monster_inventory_add>
    1168:	mov	sp, fp
    116c:	pop	{fp, pc}

00001170 <MyGame_Example_Monster_end>:
    1170:	push	{fp, lr}
    1174:	mov	fp, sp
    1178:	sub	sp, sp, #8
    117c:	str	r0, [sp, #4]
    1180:	ldr	r0, [sp, #4]
    1184:	movw	r1, #0
    1188:	movt	r1, #0
    118c:	movw	r2, #1
    1190:	bl	0 <flatcc_builder_check_required>
    1194:	cmp	r0, #0
    1198:	beq	11a0 <MyGame_Example_Monster_end+0x30>
    119c:	b	11c0 <MyGame_Example_Monster_end+0x50>
    11a0:	movw	r0, #0
    11a4:	movt	r0, #0
    11a8:	movw	r1, #0
    11ac:	movt	r1, #0
    11b0:	movw	r2, #235	; 0xeb
    11b4:	movw	r3, #0
    11b8:	movt	r3, #0
    11bc:	bl	0 <__assert_fail>
    11c0:	ldr	r0, [sp, #4]
    11c4:	bl	0 <flatcc_builder_end_table>
    11c8:	mov	sp, fp
    11cc:	pop	{fp, pc}

000011d0 <flatbuffers_uint8_vec_start>:
    11d0:	push	{fp, lr}
    11d4:	mov	fp, sp
    11d8:	sub	sp, sp, #8
    11dc:	str	r0, [sp, #4]
    11e0:	ldr	r0, [sp, #4]
    11e4:	movw	r1, #1
    11e8:	movw	r2, #1
    11ec:	uxth	r2, r2
    11f0:	mvn	r3, #0
    11f4:	bl	0 <flatcc_builder_start_vector>
    11f8:	mov	sp, fp
    11fc:	pop	{fp, pc}

00001200 <MyGame_Example_Monster_inventory_add>:
    1200:	push	{fp, lr}
    1204:	mov	fp, sp
    1208:	sub	sp, sp, #16
    120c:	str	r0, [fp, #-4]
    1210:	str	r1, [sp, #8]
    1214:	ldr	r0, [sp, #8]
    1218:	cmp	r0, #0
    121c:	beq	1254 <MyGame_Example_Monster_inventory_add+0x54>
    1220:	ldr	r0, [fp, #-4]
    1224:	movw	r1, #5
    1228:	bl	0 <flatcc_builder_table_add_offset>
    122c:	str	r0, [sp, #4]
    1230:	movw	r1, #0
    1234:	cmp	r0, r1
    1238:	beq	1254 <MyGame_Example_Monster_inventory_add+0x54>
    123c:	ldr	r0, [sp, #8]
    1240:	ldr	r1, [sp, #4]
    1244:	str	r0, [r1]
    1248:	movw	r0, #0
    124c:	str	r0, [sp]
    1250:	b	1260 <MyGame_Example_Monster_inventory_add+0x60>
    1254:	mvn	r0, #0
    1258:	str	r0, [sp]
    125c:	b	1260 <MyGame_Example_Monster_inventory_add+0x60>
    1260:	ldr	r0, [sp]
    1264:	mov	sp, fp
    1268:	pop	{fp, pc}

0000126c <flatbuffers_uint8_vec_end>:
    126c:	push	{fp, lr}
    1270:	mov	fp, sp
    1274:	sub	sp, sp, #8
    1278:	str	r0, [sp, #4]
    127c:	ldr	r0, [sp, #4]
    1280:	bl	0 <flatcc_builder_end_vector>
    1284:	mov	sp, fp
    1288:	pop	{fp, pc}

0000128c <flatbuffers_buffer_end>:
    128c:	push	{fp, lr}
    1290:	mov	fp, sp
    1294:	sub	sp, sp, #8
    1298:	str	r0, [sp, #4]
    129c:	str	r1, [sp]
    12a0:	ldr	r0, [sp, #4]
    12a4:	ldr	r1, [sp]
    12a8:	bl	0 <flatcc_builder_end_buffer>
    12ac:	mov	sp, fp
    12b0:	pop	{fp, pc}

000012b4 <flatbuffers_has_identifier>:
    12b4:	push	{fp, lr}
    12b8:	mov	fp, sp
    12bc:	sub	sp, sp, #32
    12c0:	str	r0, [fp, #-8]
    12c4:	str	r1, [fp, #-12]
    12c8:	movw	r0, #0
    12cc:	str	r0, [sp, #12]
    12d0:	ldr	r1, [fp, #-12]
    12d4:	cmp	r1, r0
    12d8:	bne	12e8 <flatbuffers_has_identifier+0x34>
    12dc:	movw	r0, #1
    12e0:	str	r0, [fp, #-4]
    12e4:	b	1354 <flatbuffers_has_identifier+0xa0>
    12e8:	add	r0, sp, #12
    12ec:	ldr	r1, [fp, #-12]
    12f0:	movw	r2, #4
    12f4:	bl	0 <strncpy>
    12f8:	ldr	r1, [sp, #12]
    12fc:	str	r0, [sp, #8]
    1300:	mov	r0, r1
    1304:	bl	1384 <__flatbuffers_thash_cast_from_le>
    1308:	str	r0, [sp, #12]
    130c:	ldr	r0, [fp, #-8]
    1310:	add	r0, r0, #4
    1314:	bl	1398 <__flatbuffers_thash_read_from_pe>
    1318:	str	r0, [sp, #16]
    131c:	ldr	r0, [sp, #12]
    1320:	cmp	r0, #0
    1324:	movw	r0, #1
    1328:	str	r0, [sp, #4]
    132c:	beq	1348 <flatbuffers_has_identifier+0x94>
    1330:	ldr	r0, [sp, #16]
    1334:	ldr	r1, [sp, #12]
    1338:	cmp	r0, r1
    133c:	movw	r0, #0
    1340:	moveq	r0, #1
    1344:	str	r0, [sp, #4]
    1348:	ldr	r0, [sp, #4]
    134c:	and	r0, r0, #1
    1350:	str	r0, [fp, #-4]
    1354:	ldr	r0, [fp, #-4]
    1358:	mov	sp, fp
    135c:	pop	{fp, pc}

00001360 <__flatbuffers_uoffset_read_from_pe>:
    1360:	push	{fp, lr}
    1364:	mov	fp, sp
    1368:	sub	sp, sp, #8
    136c:	str	r0, [sp, #4]
    1370:	ldr	r0, [sp, #4]
    1374:	ldr	r0, [r0]
    1378:	bl	13d0 <__flatbuffers_uoffset_cast_from_pe>
    137c:	mov	sp, fp
    1380:	pop	{fp, pc}

00001384 <__flatbuffers_thash_cast_from_le>:
    1384:	sub	sp, sp, #4
    1388:	str	r0, [sp]
    138c:	ldr	r0, [sp]
    1390:	add	sp, sp, #4
    1394:	bx	lr

00001398 <__flatbuffers_thash_read_from_pe>:
    1398:	push	{fp, lr}
    139c:	mov	fp, sp
    13a0:	sub	sp, sp, #8
    13a4:	str	r0, [sp, #4]
    13a8:	ldr	r0, [sp, #4]
    13ac:	ldr	r0, [r0]
    13b0:	bl	13bc <__flatbuffers_thash_cast_from_pe>
    13b4:	mov	sp, fp
    13b8:	pop	{fp, pc}

000013bc <__flatbuffers_thash_cast_from_pe>:
    13bc:	sub	sp, sp, #4
    13c0:	str	r0, [sp]
    13c4:	ldr	r0, [sp]
    13c8:	add	sp, sp, #4
    13cc:	bx	lr

000013d0 <__flatbuffers_uoffset_cast_from_pe>:
    13d0:	sub	sp, sp, #4
    13d4:	str	r0, [sp]
    13d8:	ldr	r0, [sp]
    13dc:	add	sp, sp, #4
    13e0:	bx	lr

000013e4 <__flatbuffers_soffset_read_from_pe>:
    13e4:	push	{fp, lr}
    13e8:	mov	fp, sp
    13ec:	sub	sp, sp, #8
    13f0:	str	r0, [sp, #4]
    13f4:	ldr	r0, [sp, #4]
    13f8:	ldr	r0, [r0]
    13fc:	bl	1430 <__flatbuffers_soffset_cast_from_pe>
    1400:	mov	sp, fp
    1404:	pop	{fp, pc}

00001408 <__flatbuffers_voffset_read_from_pe>:
    1408:	push	{fp, lr}
    140c:	mov	fp, sp
    1410:	sub	sp, sp, #8
    1414:	str	r0, [sp, #4]
    1418:	ldr	r0, [sp, #4]
    141c:	ldrh	r0, [r0]
    1420:	bl	1444 <__flatbuffers_voffset_cast_from_pe>
    1424:	uxth	r0, r0
    1428:	mov	sp, fp
    142c:	pop	{fp, pc}

00001430 <__flatbuffers_soffset_cast_from_pe>:
    1430:	sub	sp, sp, #4
    1434:	str	r0, [sp]
    1438:	ldr	r0, [sp]
    143c:	add	sp, sp, #4
    1440:	bx	lr

00001444 <__flatbuffers_voffset_cast_from_pe>:
    1444:	sub	sp, sp, #4
    1448:	strh	r0, [sp, #2]
    144c:	ldrh	r0, [sp, #2]
    1450:	add	sp, sp, #4
    1454:	bx	lr

00001458 <MyGame_Example_Monster_inventory>:
    1458:	push	{fp, lr}
    145c:	mov	fp, sp
    1460:	sub	sp, sp, #32
    1464:	str	r0, [fp, #-8]
    1468:	movw	r0, #0
    146c:	strh	r0, [fp, #-14]
    1470:	ldr	r0, [fp, #-8]
    1474:	movw	r1, #0
    1478:	cmp	r0, r1
    147c:	beq	1488 <MyGame_Example_Monster_inventory+0x30>
    1480:	b	1484 <MyGame_Example_Monster_inventory+0x2c>
    1484:	b	14a8 <MyGame_Example_Monster_inventory+0x50>
    1488:	movw	r0, #0
    148c:	movt	r0, #0
    1490:	movw	r1, #0
    1494:	movt	r1, #0
    1498:	movw	r2, #706	; 0x2c2
    149c:	movw	r3, #0
    14a0:	movt	r3, #0
    14a4:	bl	0 <__assert_fail>
    14a8:	mov	r0, #5
    14ac:	strh	r0, [sp, #16]
    14b0:	ldr	r0, [fp, #-8]
    14b4:	str	r0, [sp, #8]
    14b8:	bl	13e4 <__flatbuffers_soffset_read_from_pe>
    14bc:	ldr	lr, [sp, #8]
    14c0:	sub	r0, lr, r0
    14c4:	str	r0, [sp, #12]
    14c8:	ldr	r0, [sp, #12]
    14cc:	bl	1408 <__flatbuffers_voffset_read_from_pe>
    14d0:	ldrh	lr, [sp, #16]
    14d4:	add	lr, lr, #3
    14d8:	lsl	lr, lr, #1
    14dc:	cmp	r0, lr
    14e0:	bcc	14fc <MyGame_Example_Monster_inventory+0xa4>
    14e4:	ldr	r0, [sp, #12]
    14e8:	ldrh	r1, [sp, #16]
    14ec:	add	r0, r0, r1, lsl #1
    14f0:	add	r0, r0, #4
    14f4:	bl	1408 <__flatbuffers_voffset_read_from_pe>
    14f8:	strh	r0, [fp, #-14]
    14fc:	ldrsh	r0, [fp, #-14]
    1500:	cmp	r0, #0
    1504:	beq	1540 <MyGame_Example_Monster_inventory+0xe8>
    1508:	ldr	r0, [fp, #-8]
    150c:	ldrh	r1, [fp, #-14]
    1510:	add	r0, r0, r1
    1514:	str	r0, [fp, #-12]
    1518:	ldr	r0, [fp, #-12]
    151c:	add	r0, r0, #4
    1520:	ldr	r1, [fp, #-12]
    1524:	str	r0, [sp, #4]
    1528:	mov	r0, r1
    152c:	bl	1360 <__flatbuffers_uoffset_read_from_pe>
    1530:	ldr	r1, [sp, #4]
    1534:	add	r0, r1, r0
    1538:	str	r0, [fp, #-4]
    153c:	b	1548 <MyGame_Example_Monster_inventory+0xf0>
    1540:	movw	r0, #0
    1544:	str	r0, [fp, #-4]
    1548:	ldr	r0, [fp, #-4]
    154c:	mov	sp, fp
    1550:	pop	{fp, pc}

00001554 <flatbuffers_string_len>:
    1554:	push	{fp, lr}
    1558:	mov	fp, sp
    155c:	sub	sp, sp, #8
    1560:	str	r0, [sp, #4]
    1564:	ldr	r0, [sp, #4]
    1568:	movw	r1, #0
    156c:	cmp	r0, r1
    1570:	beq	158c <flatbuffers_string_len+0x38>
    1574:	ldr	r0, [sp, #4]
    1578:	mvn	r1, #3
    157c:	add	r0, r0, r1
    1580:	bl	1360 <__flatbuffers_uoffset_read_from_pe>
    1584:	str	r0, [sp]
    1588:	b	1598 <flatbuffers_string_len+0x44>
    158c:	movw	r0, #0
    1590:	str	r0, [sp]
    1594:	b	1598 <flatbuffers_string_len+0x44>
    1598:	ldr	r0, [sp]
    159c:	mov	sp, fp
    15a0:	pop	{fp, pc}

000015a4 <flatbuffers_uint8_vec_len>:
    15a4:	push	{fp, lr}
    15a8:	mov	fp, sp
    15ac:	sub	sp, sp, #8
    15b0:	str	r0, [sp, #4]
    15b4:	ldr	r0, [sp, #4]
    15b8:	bl	15c4 <flatbuffers_vec_len>
    15bc:	mov	sp, fp
    15c0:	pop	{fp, pc}

000015c4 <flatbuffers_vec_len>:
    15c4:	push	{fp, lr}
    15c8:	mov	fp, sp
    15cc:	sub	sp, sp, #8
    15d0:	str	r0, [sp, #4]
    15d4:	ldr	r0, [sp, #4]
    15d8:	movw	r1, #0
    15dc:	cmp	r0, r1
    15e0:	beq	15fc <flatbuffers_vec_len+0x38>
    15e4:	ldr	r0, [sp, #4]
    15e8:	mvn	r1, #3
    15ec:	add	r0, r0, r1
    15f0:	bl	1360 <__flatbuffers_uoffset_read_from_pe>
    15f4:	str	r0, [sp]
    15f8:	b	1608 <flatbuffers_vec_len+0x44>
    15fc:	movw	r0, #0
    1600:	str	r0, [sp]
    1604:	b	1608 <flatbuffers_vec_len+0x44>
    1608:	ldr	r0, [sp]
    160c:	mov	sp, fp
    1610:	pop	{fp, pc}
