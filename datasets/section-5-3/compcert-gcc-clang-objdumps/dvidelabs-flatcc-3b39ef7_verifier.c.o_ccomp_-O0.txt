
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uql.dir/__/__/src/runtime/verifier.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatbuffers_uoffset_cast_from_pe>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #8
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	ldr	lr, [sp, #4]
      14:	add	sp, sp, #8
      18:	bx	lr

0000001c <__flatbuffers_uoffset_read_from_pe>:
      1c:	mov	ip, sp
      20:	sub	sp, sp, #8
      24:	str	ip, [sp]
      28:	str	lr, [sp, #4]
      2c:	ldr	r0, [r0]
      30:	bl	0 <__flatbuffers_uoffset_cast_from_pe>
      34:	ldr	lr, [sp, #4]
      38:	add	sp, sp, #8
      3c:	bx	lr

00000040 <__flatbuffers_voffset_cast_from_pe>:
      40:	mov	ip, sp
      44:	sub	sp, sp, #8
      48:	str	ip, [sp]
      4c:	str	lr, [sp, #4]
      50:	bic	r0, r0, #16711680	; 0xff0000
      54:	bic	r0, r0, #-16777216	; 0xff000000
      58:	ldr	lr, [sp, #4]
      5c:	add	sp, sp, #8
      60:	bx	lr

00000064 <__flatbuffers_voffset_read_from_pe>:
      64:	mov	ip, sp
      68:	sub	sp, sp, #8
      6c:	str	ip, [sp]
      70:	str	lr, [sp, #4]
      74:	ldrh	r0, [r0]
      78:	bic	r0, r0, #16711680	; 0xff0000
      7c:	bic	r0, r0, #-16777216	; 0xff000000
      80:	bl	40 <__flatbuffers_voffset_cast_from_pe>
      84:	bic	r0, r0, #16711680	; 0xff0000
      88:	bic	r0, r0, #-16777216	; 0xff000000
      8c:	ldr	lr, [sp, #4]
      90:	add	sp, sp, #8
      94:	bx	lr

00000098 <__flatbuffers_thash_cast_from_pe>:
      98:	mov	ip, sp
      9c:	sub	sp, sp, #8
      a0:	str	ip, [sp]
      a4:	str	lr, [sp, #4]
      a8:	ldr	lr, [sp, #4]
      ac:	add	sp, sp, #8
      b0:	bx	lr

000000b4 <__flatbuffers_thash_cast_from_le>:
      b4:	mov	ip, sp
      b8:	sub	sp, sp, #8
      bc:	str	ip, [sp]
      c0:	str	lr, [sp, #4]
      c4:	ldr	lr, [sp, #4]
      c8:	add	sp, sp, #8
      cc:	bx	lr

000000d0 <__flatbuffers_thash_read_from_pe>:
      d0:	mov	ip, sp
      d4:	sub	sp, sp, #8
      d8:	str	ip, [sp]
      dc:	str	lr, [sp, #4]
      e0:	ldr	r0, [r0]
      e4:	bl	98 <__flatbuffers_thash_cast_from_pe>
      e8:	ldr	lr, [sp, #4]
      ec:	add	sp, sp, #8
      f0:	bx	lr

000000f4 <flatcc_verify_error_string>:
      f4:	mov	ip, sp
      f8:	sub	sp, sp, #8
      fc:	str	ip, [sp]
     100:	str	lr, [sp, #4]
     104:	cmp	r0, #37	; 0x25
     108:	bcs	2d0 <flatcc_verify_error_string+0x1dc>
     10c:	add	pc, pc, r0, lsl #2
     110:	nop	{0}
     114:	b	1a8 <flatcc_verify_error_string+0xb4>
     118:	b	1b0 <flatcc_verify_error_string+0xbc>
     11c:	b	1b8 <flatcc_verify_error_string+0xc4>
     120:	b	1c0 <flatcc_verify_error_string+0xcc>
     124:	b	1c8 <flatcc_verify_error_string+0xd4>
     128:	b	1d0 <flatcc_verify_error_string+0xdc>
     12c:	b	1d8 <flatcc_verify_error_string+0xe4>
     130:	b	1e0 <flatcc_verify_error_string+0xec>
     134:	b	1e8 <flatcc_verify_error_string+0xf4>
     138:	b	1f0 <flatcc_verify_error_string+0xfc>
     13c:	b	1f8 <flatcc_verify_error_string+0x104>
     140:	b	200 <flatcc_verify_error_string+0x10c>
     144:	b	208 <flatcc_verify_error_string+0x114>
     148:	b	210 <flatcc_verify_error_string+0x11c>
     14c:	b	218 <flatcc_verify_error_string+0x124>
     150:	b	220 <flatcc_verify_error_string+0x12c>
     154:	b	228 <flatcc_verify_error_string+0x134>
     158:	b	230 <flatcc_verify_error_string+0x13c>
     15c:	b	238 <flatcc_verify_error_string+0x144>
     160:	b	240 <flatcc_verify_error_string+0x14c>
     164:	b	248 <flatcc_verify_error_string+0x154>
     168:	b	250 <flatcc_verify_error_string+0x15c>
     16c:	b	258 <flatcc_verify_error_string+0x164>
     170:	b	260 <flatcc_verify_error_string+0x16c>
     174:	b	268 <flatcc_verify_error_string+0x174>
     178:	b	270 <flatcc_verify_error_string+0x17c>
     17c:	b	278 <flatcc_verify_error_string+0x184>
     180:	b	280 <flatcc_verify_error_string+0x18c>
     184:	b	288 <flatcc_verify_error_string+0x194>
     188:	b	290 <flatcc_verify_error_string+0x19c>
     18c:	b	298 <flatcc_verify_error_string+0x1a4>
     190:	b	2a0 <flatcc_verify_error_string+0x1ac>
     194:	b	2a8 <flatcc_verify_error_string+0x1b4>
     198:	b	2b0 <flatcc_verify_error_string+0x1bc>
     19c:	b	2b8 <flatcc_verify_error_string+0x1c4>
     1a0:	b	2c0 <flatcc_verify_error_string+0x1cc>
     1a4:	b	2c8 <flatcc_verify_error_string+0x1d4>
     1a8:	ldr	r0, [pc, #332]	; 2fc <flatcc_verify_error_string+0x208>
     1ac:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1b0:	ldr	r0, [pc, #404]	; 34c <flatcc_verify_error_string+0x258>
     1b4:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1b8:	ldr	r0, [pc, #428]	; 36c <flatcc_verify_error_string+0x278>
     1bc:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1c0:	ldr	r0, [pc, #352]	; 328 <flatcc_verify_error_string+0x234>
     1c4:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1c8:	ldr	r0, [pc, #404]	; 364 <flatcc_verify_error_string+0x270>
     1cc:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1d0:	ldr	r0, [pc, #276]	; 2ec <flatcc_verify_error_string+0x1f8>
     1d4:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1d8:	ldr	r0, [pc, #384]	; 360 <flatcc_verify_error_string+0x26c>
     1dc:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1e0:	ldr	r0, [pc, #392]	; 370 <flatcc_verify_error_string+0x27c>
     1e4:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1e8:	ldr	r0, [pc, #272]	; 300 <flatcc_verify_error_string+0x20c>
     1ec:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1f0:	ldr	r0, [pc, #312]	; 330 <flatcc_verify_error_string+0x23c>
     1f4:	b	2d4 <flatcc_verify_error_string+0x1e0>
     1f8:	ldr	r0, [pc, #284]	; 31c <flatcc_verify_error_string+0x228>
     1fc:	b	2d4 <flatcc_verify_error_string+0x1e0>
     200:	ldr	r0, [pc, #336]	; 358 <flatcc_verify_error_string+0x264>
     204:	b	2d4 <flatcc_verify_error_string+0x1e0>
     208:	ldr	r0, [pc, #212]	; 2e4 <flatcc_verify_error_string+0x1f0>
     20c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     210:	ldr	r0, [pc, #276]	; 32c <flatcc_verify_error_string+0x238>
     214:	b	2d4 <flatcc_verify_error_string+0x1e0>
     218:	ldr	r0, [pc, #228]	; 304 <flatcc_verify_error_string+0x210>
     21c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     220:	ldr	r0, [pc, #204]	; 2f4 <flatcc_verify_error_string+0x200>
     224:	b	2d4 <flatcc_verify_error_string+0x1e0>
     228:	ldr	r0, [pc, #324]	; 374 <flatcc_verify_error_string+0x280>
     22c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     230:	ldr	r0, [pc, #212]	; 30c <flatcc_verify_error_string+0x218>
     234:	b	2d4 <flatcc_verify_error_string+0x1e0>
     238:	ldr	r0, [pc, #260]	; 344 <flatcc_verify_error_string+0x250>
     23c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     240:	ldr	r0, [pc, #220]	; 324 <flatcc_verify_error_string+0x230>
     244:	b	2d4 <flatcc_verify_error_string+0x1e0>
     248:	ldr	r0, [pc, #268]	; 35c <flatcc_verify_error_string+0x268>
     24c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     250:	ldr	r0, [pc, #136]	; 2e0 <flatcc_verify_error_string+0x1ec>
     254:	b	2d4 <flatcc_verify_error_string+0x1e0>
     258:	ldr	r0, [pc, #264]	; 368 <flatcc_verify_error_string+0x274>
     25c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     260:	ldr	r0, [pc, #224]	; 348 <flatcc_verify_error_string+0x254>
     264:	b	2d4 <flatcc_verify_error_string+0x1e0>
     268:	ldr	r0, [pc, #196]	; 334 <flatcc_verify_error_string+0x240>
     26c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     270:	ldr	r0, [pc, #216]	; 350 <flatcc_verify_error_string+0x25c>
     274:	b	2d4 <flatcc_verify_error_string+0x1e0>
     278:	ldr	r0, [pc, #104]	; 2e8 <flatcc_verify_error_string+0x1f4>
     27c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     280:	ldr	r0, [pc, #140]	; 314 <flatcc_verify_error_string+0x220>
     284:	b	2d4 <flatcc_verify_error_string+0x1e0>
     288:	ldr	r0, [pc, #96]	; 2f0 <flatcc_verify_error_string+0x1fc>
     28c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     290:	ldr	r0, [pc, #112]	; 308 <flatcc_verify_error_string+0x214>
     294:	b	2d4 <flatcc_verify_error_string+0x1e0>
     298:	ldr	r0, [pc, #128]	; 320 <flatcc_verify_error_string+0x22c>
     29c:	b	2d4 <flatcc_verify_error_string+0x1e0>
     2a0:	ldr	r0, [pc, #148]	; 33c <flatcc_verify_error_string+0x248>
     2a4:	b	2d4 <flatcc_verify_error_string+0x1e0>
     2a8:	ldr	r0, [pc, #164]	; 354 <flatcc_verify_error_string+0x260>
     2ac:	b	2d4 <flatcc_verify_error_string+0x1e0>
     2b0:	ldr	r0, [pc, #136]	; 340 <flatcc_verify_error_string+0x24c>
     2b4:	b	2d4 <flatcc_verify_error_string+0x1e0>
     2b8:	ldr	r0, [pc, #88]	; 318 <flatcc_verify_error_string+0x224>
     2bc:	b	2d4 <flatcc_verify_error_string+0x1e0>
     2c0:	ldr	r0, [pc, #72]	; 310 <flatcc_verify_error_string+0x21c>
     2c4:	b	2d4 <flatcc_verify_error_string+0x1e0>
     2c8:	ldr	r0, [pc, #104]	; 338 <flatcc_verify_error_string+0x244>
     2cc:	b	2d4 <flatcc_verify_error_string+0x1e0>
     2d0:	ldr	r0, [pc, #32]	; 2f8 <flatcc_verify_error_string+0x204>
     2d4:	ldr	lr, [sp, #4]
     2d8:	add	sp, sp, #8
     2dc:	bx	lr
     2e0:	.word	0x0000027e
     2e4:	.word	0x0000006a
     2e8:	.word	0x00000141
     2ec:	.word	0x00000191
     2f0:	.word	0x000000e7
     2f4:	.word	0x000003e5
     2f8:	.word	0x00000062
     2fc:	.word	0x00000468
     300:	.word	0x000002aa
     304:	.word	0x0000023b
     308:	.word	0x000004db
     30c:	.word	0x000003bd
     310:	.word	0x00000169
     314:	.word	0x00000126
     318:	.word	0x00000488
     31c:	.word	0x00000320
     320:	.word	0x000000c1
     324:	.word	0x000000ff
     328:	.word	0x000000a7
     32c:	.word	0x0000044f
     330:	.word	0x000001f5
     334:	.word	0x00000255
     338:	.word	0x000002cf
     33c:	.word	0x00000226
     340:	.word	0x00000082
     344:	.word	0x0000030c
     348:	.word	0x000001b4
     34c:	.word	0x000001dd
     350:	.word	0x00000000
     354:	.word	0x00000335
     358:	.word	0x000002be
     35c:	.word	0x000002dd
     360:	.word	0x000004bc
     364:	.word	0x000002f5
     368:	.word	0x0000002f
     36c:	.word	0x00000155
     370:	.word	0x0000040c
     374:	.word	0x00000427

00000378 <read_uoffset>:
     378:	mov	ip, sp
     37c:	sub	sp, sp, #8
     380:	str	ip, [sp]
     384:	str	lr, [sp, #4]
     388:	add	r0, r0, r1
     38c:	bl	1c <__flatbuffers_uoffset_read_from_pe>
     390:	ldr	lr, [sp, #4]
     394:	add	sp, sp, #8
     398:	bx	lr

0000039c <read_thash_identifier>:
     39c:	mov	ip, sp
     3a0:	sub	sp, sp, #16
     3a4:	str	ip, [sp]
     3a8:	str	lr, [sp, #4]
     3ac:	mov	r1, r0
     3b0:	mov	r0, #0
     3b4:	str	r0, [sp, #8]
     3b8:	add	r0, sp, #8
     3bc:	mov	r2, #4
     3c0:	bl	0 <strncpy>
     3c4:	ldr	r0, [sp, #8]
     3c8:	bl	b4 <__flatbuffers_thash_cast_from_le>
     3cc:	ldr	lr, [sp, #4]
     3d0:	add	sp, sp, #16
     3d4:	bx	lr

000003d8 <read_thash>:
     3d8:	mov	ip, sp
     3dc:	sub	sp, sp, #8
     3e0:	str	ip, [sp]
     3e4:	str	lr, [sp, #4]
     3e8:	add	r0, r0, r1
     3ec:	bl	d0 <__flatbuffers_thash_read_from_pe>
     3f0:	ldr	lr, [sp, #4]
     3f4:	add	sp, sp, #8
     3f8:	bx	lr

000003fc <read_voffset>:
     3fc:	mov	ip, sp
     400:	sub	sp, sp, #8
     404:	str	ip, [sp]
     408:	str	lr, [sp, #4]
     40c:	add	r0, r0, r1
     410:	bl	64 <__flatbuffers_voffset_read_from_pe>
     414:	bic	r0, r0, #16711680	; 0xff0000
     418:	bic	r0, r0, #-16777216	; 0xff000000
     41c:	ldr	lr, [sp, #4]
     420:	add	sp, sp, #8
     424:	bx	lr

00000428 <check_header>:
     428:	mov	ip, sp
     42c:	sub	sp, sp, #8
     430:	str	ip, [sp]
     434:	str	lr, [sp, #4]
     438:	add	r3, r1, r2
     43c:	mov	r2, #0
     440:	cmp	r2, #0
     444:	beq	45c <check_header+0x34>
     448:	add	r2, r3, #4
     44c:	cmp	r2, r3
     450:	movcc	r2, #1
     454:	movcs	r2, #0
     458:	b	460 <check_header+0x38>
     45c:	mov	r2, #0
     460:	cmp	r2, #0
     464:	beq	470 <check_header+0x48>
     468:	mov	r0, #0
     46c:	b	4b0 <check_header+0x88>
     470:	cmp	r3, r1
     474:	bls	48c <check_header+0x64>
     478:	add	r2, r3, #4
     47c:	cmp	r2, r0
     480:	movls	ip, #1
     484:	movhi	ip, #0
     488:	b	490 <check_header+0x68>
     48c:	mov	ip, #0
     490:	cmp	ip, #0
     494:	beq	4ac <check_header+0x84>
     498:	and	r0, r3, #3
     49c:	cmp	r0, #0
     4a0:	moveq	r0, #1
     4a4:	movne	r0, #0
     4a8:	b	4b0 <check_header+0x88>
     4ac:	mov	r0, #0
     4b0:	ldr	lr, [sp, #4]
     4b4:	add	sp, sp, #8
     4b8:	bx	lr

000004bc <check_aligned_header>:
     4bc:	mov	ip, sp
     4c0:	sub	sp, sp, #16
     4c4:	str	ip, [sp]
     4c8:	str	lr, [sp, #4]
     4cc:	str	r4, [sp, #8]
     4d0:	add	r4, r1, r2
     4d4:	mov	r2, #0
     4d8:	cmp	r2, #0
     4dc:	beq	4f4 <check_aligned_header+0x38>
     4e0:	add	ip, r4, #4
     4e4:	cmp	ip, r4
     4e8:	movcc	r2, #1
     4ec:	movcs	r2, #0
     4f0:	b	4f8 <check_aligned_header+0x3c>
     4f4:	mov	r2, #0
     4f8:	cmp	r2, #0
     4fc:	beq	508 <check_aligned_header+0x4c>
     500:	mov	r0, #0
     504:	b	568 <check_aligned_header+0xac>
     508:	cmp	r3, #4
     50c:	bcs	514 <check_aligned_header+0x58>
     510:	mov	r3, #4
     514:	bic	r2, r3, #16711680	; 0xff0000
     518:	bic	r2, r2, #-16777216	; 0xff000000
     51c:	cmp	r4, r1
     520:	bls	538 <check_aligned_header+0x7c>
     524:	add	r3, r4, #4
     528:	cmp	r3, r0
     52c:	movls	ip, #1
     530:	movhi	ip, #0
     534:	b	53c <check_aligned_header+0x80>
     538:	mov	ip, #0
     53c:	cmp	ip, #0
     540:	beq	564 <check_aligned_header+0xa8>
     544:	add	r1, r4, #4
     548:	sub	r3, r2, #1
     54c:	orr	r2, r3, #3
     550:	and	r0, r1, r2
     554:	cmp	r0, #0
     558:	moveq	r0, #1
     55c:	movne	r0, #0
     560:	b	568 <check_aligned_header+0xac>
     564:	mov	r0, #0
     568:	ldr	r4, [sp, #8]
     56c:	ldr	lr, [sp, #4]
     570:	add	sp, sp, #16
     574:	bx	lr

00000578 <verify_struct>:
     578:	mov	ip, sp
     57c:	sub	sp, sp, #16
     580:	str	ip, [sp]
     584:	str	lr, [sp, #4]
     588:	str	r4, [sp, #8]
     58c:	ldr	r4, [ip]
     590:	cmp	r2, #0
     594:	beq	5ac <verify_struct+0x34>
     598:	add	ip, r1, r2
     59c:	cmp	ip, r0
     5a0:	movhi	ip, #1
     5a4:	movls	ip, #0
     5a8:	b	5b0 <verify_struct+0x38>
     5ac:	mov	ip, #1
     5b0:	cmp	ip, #0
     5b4:	beq	5c0 <verify_struct+0x48>
     5b8:	mov	r0, #18
     5bc:	b	62c <verify_struct+0xb4>
     5c0:	add	r1, r1, r2
     5c4:	add	r2, r1, r3
     5c8:	cmp	r2, r1
     5cc:	movcs	ip, #1
     5d0:	movcc	ip, #0
     5d4:	cmp	ip, #0
     5d8:	bne	5e4 <verify_struct+0x6c>
     5dc:	mov	r0, #10
     5e0:	b	62c <verify_struct+0xb4>
     5e4:	add	r3, r1, r3
     5e8:	cmp	r3, r0
     5ec:	movls	r2, #1
     5f0:	movhi	r2, #0
     5f4:	cmp	r2, #0
     5f8:	bne	604 <verify_struct+0x8c>
     5fc:	mov	r0, #9
     600:	b	62c <verify_struct+0xb4>
     604:	sub	ip, r4, #1
     608:	and	r0, r1, ip
     60c:	cmp	r0, #0
     610:	moveq	r0, #1
     614:	movne	r0, #0
     618:	cmp	r0, #0
     61c:	bne	628 <verify_struct+0xb0>
     620:	mov	r0, #11
     624:	b	62c <verify_struct+0xb4>
     628:	mov	r0, #0
     62c:	ldr	r4, [sp, #8]
     630:	ldr	lr, [sp, #4]
     634:	add	sp, sp, #16
     638:	bx	lr

0000063c <read_vt_entry>:
     63c:	mov	ip, sp
     640:	sub	sp, sp, #8
     644:	str	ip, [sp]
     648:	str	lr, [sp, #4]
     64c:	lsl	r2, r1, #1
     650:	add	r1, r2, #4
     654:	bic	r1, r1, #16711680	; 0xff0000
     658:	bic	r1, r1, #-16777216	; 0xff000000
     65c:	ldrh	ip, [r0, #22]
     660:	cmp	r1, ip
     664:	blt	670 <read_vt_entry+0x34>
     668:	mov	r0, #0
     66c:	b	678 <read_vt_entry+0x3c>
     670:	ldr	r0, [r0, #12]
     674:	bl	3fc <read_voffset>
     678:	ldr	lr, [sp, #4]
     67c:	add	sp, sp, #8
     680:	bx	lr

00000684 <get_field_ptr>:
     684:	mov	ip, sp
     688:	sub	sp, sp, #16
     68c:	str	ip, [sp]
     690:	str	lr, [sp, #4]
     694:	str	r4, [sp, #8]
     698:	mov	r4, r0
     69c:	bic	r1, r1, #16711680	; 0xff0000
     6a0:	bic	r1, r1, #-16777216	; 0xff000000
     6a4:	mov	r0, r4
     6a8:	bl	63c <read_vt_entry>
     6ac:	bic	r2, r0, #16711680	; 0xff0000
     6b0:	bic	r2, r2, #-16777216	; 0xff000000
     6b4:	cmp	r2, #0
     6b8:	beq	6d0 <get_field_ptr+0x4c>
     6bc:	ldr	r3, [r4]
     6c0:	ldr	r1, [r4, #16]
     6c4:	add	r0, r3, r1
     6c8:	add	r0, r0, r2
     6cc:	b	6d4 <get_field_ptr+0x50>
     6d0:	mov	r0, #0
     6d4:	ldr	r4, [sp, #8]
     6d8:	ldr	lr, [sp, #4]
     6dc:	add	sp, sp, #16
     6e0:	bx	lr

000006e4 <verify_field>:
     6e4:	mov	ip, sp
     6e8:	sub	sp, sp, #32
     6ec:	str	ip, [sp]
     6f0:	str	lr, [sp, #4]
     6f4:	str	r4, [sp, #8]
     6f8:	str	r5, [sp, #12]
     6fc:	str	r6, [sp, #16]
     700:	str	r7, [sp, #20]
     704:	str	r8, [sp, #24]
     708:	str	r9, [sp, #28]
     70c:	ldr	r9, [ip]
     710:	mov	r5, r3
     714:	mov	r4, r2
     718:	mov	r8, r1
     71c:	mov	r6, r0
     720:	ldr	r7, [r6]
     724:	mov	r2, #1
     728:	cmp	r2, #0
     72c:	bne	744 <verify_field+0x60>
     730:	ldr	r0, [pc, #296]	; 860 <verify_field+0x17c>
     734:	ldr	r1, [pc, #288]	; 85c <verify_field+0x178>
     738:	mov	r2, #196	; 0xc4
     73c:	ldr	r3, [pc, #272]	; 854 <verify_field+0x170>
     740:	bl	0 <__assert_fail>
     744:	mov	ip, #1
     748:	cmp	ip, #0
     74c:	bne	764 <verify_field+0x80>
     750:	ldr	r0, [pc, #256]	; 858 <verify_field+0x174>
     754:	ldr	r1, [pc, #256]	; 85c <verify_field+0x178>
     758:	mov	r2, #197	; 0xc5
     75c:	ldr	r3, [pc, #240]	; 854 <verify_field+0x170>
     760:	bl	0 <__assert_fail>
     764:	bic	r1, r8, #16711680	; 0xff0000
     768:	bic	r1, r1, #-16777216	; 0xff000000
     76c:	mov	r0, r6
     770:	bl	63c <read_vt_entry>
     774:	bic	r1, r0, #16711680	; 0xff0000
     778:	bic	r1, r1, #-16777216	; 0xff000000
     77c:	cmp	r1, #0
     780:	bne	7a8 <verify_field+0xc4>
     784:	cmp	r4, #0
     788:	moveq	r0, #1
     78c:	movne	r0, #0
     790:	cmp	r0, #0
     794:	bne	7a0 <verify_field+0xbc>
     798:	mov	r0, #4
     79c:	b	830 <verify_field+0x14c>
     7a0:	mov	r0, #0
     7a4:	b	830 <verify_field+0x14c>
     7a8:	add	r2, r1, r5
     7ac:	ldrh	ip, [r6, #20]
     7b0:	cmp	r2, ip
     7b4:	movls	r3, #1
     7b8:	movhi	r3, #0
     7bc:	cmp	r3, #0
     7c0:	bne	7cc <verify_field+0xe8>
     7c4:	mov	r0, #13
     7c8:	b	830 <verify_field+0x14c>
     7cc:	mov	r0, #1
     7d0:	cmp	r0, #0
     7d4:	bne	7e8 <verify_field+0x104>
     7d8:	cmp	r1, r2
     7dc:	movls	r2, #1
     7e0:	movhi	r2, #0
     7e4:	b	7ec <verify_field+0x108>
     7e8:	mov	r2, #1
     7ec:	cmp	r2, #0
     7f0:	bne	7fc <verify_field+0x118>
     7f4:	mov	r0, #14
     7f8:	b	830 <verify_field+0x14c>
     7fc:	ldr	r2, [r6, #16]
     800:	add	r0, r2, r7
     804:	add	r3, r1, r0
     808:	sub	ip, r9, #1
     80c:	and	r0, r3, ip
     810:	cmp	r0, #0
     814:	moveq	r0, #1
     818:	movne	r0, #0
     81c:	cmp	r0, #0
     820:	bne	82c <verify_field+0x148>
     824:	mov	r0, #12
     828:	b	830 <verify_field+0x14c>
     82c:	mov	r0, #0
     830:	ldr	r4, [sp, #8]
     834:	ldr	r5, [sp, #12]
     838:	ldr	r6, [sp, #16]
     83c:	ldr	r7, [sp, #20]
     840:	ldr	r8, [sp, #24]
     844:	ldr	r9, [sp, #28]
     848:	ldr	lr, [sp, #4]
     84c:	add	sp, sp, #32
     850:	bx	lr
     854:	.word	0x00000503
     858:	.word	0x0000046b
     85c:	.word	0x0000035c
     860:	.word	0x00000209

00000864 <get_offset_field>:
     864:	mov	ip, sp
     868:	sub	sp, sp, #24
     86c:	str	ip, [sp]
     870:	str	lr, [sp, #4]
     874:	str	r4, [sp, #8]
     878:	str	r5, [sp, #12]
     87c:	str	r6, [sp, #16]
     880:	mov	r5, r3
     884:	mov	r6, r2
     888:	mov	r4, r0
     88c:	bic	r1, r1, #16711680	; 0xff0000
     890:	bic	r1, r1, #-16777216	; 0xff000000
     894:	mov	r0, r4
     898:	bl	63c <read_vt_entry>
     89c:	bic	r0, r0, #16711680	; 0xff0000
     8a0:	bic	r0, r0, #-16777216	; 0xff000000
     8a4:	cmp	r0, #0
     8a8:	bne	8cc <get_offset_field+0x68>
     8ac:	mov	r2, #0
     8b0:	str	r2, [r5]
     8b4:	cmp	r6, #0
     8b8:	beq	8c4 <get_offset_field+0x60>
     8bc:	mov	r0, #4
     8c0:	b	950 <get_offset_field+0xec>
     8c4:	mov	r0, #0
     8c8:	b	950 <get_offset_field+0xec>
     8cc:	add	r1, r0, #4
     8d0:	ldrh	r2, [r4, #20]
     8d4:	cmp	r1, r2
     8d8:	movls	r3, #1
     8dc:	movhi	r3, #0
     8e0:	cmp	r3, #0
     8e4:	bne	8f0 <get_offset_field+0x8c>
     8e8:	mov	r0, #13
     8ec:	b	950 <get_offset_field+0xec>
     8f0:	mov	ip, #1
     8f4:	cmp	ip, #0
     8f8:	bne	90c <get_offset_field+0xa8>
     8fc:	cmp	r0, r1
     900:	movls	r1, #1
     904:	movhi	r1, #0
     908:	b	910 <get_offset_field+0xac>
     90c:	mov	r1, #1
     910:	cmp	r1, #0
     914:	bne	920 <get_offset_field+0xbc>
     918:	mov	r0, #14
     91c:	b	950 <get_offset_field+0xec>
     920:	ldr	r3, [r4, #16]
     924:	add	r3, r0, r3
     928:	and	r2, r3, #3
     92c:	cmp	r2, #0
     930:	moveq	r0, #1
     934:	movne	r0, #0
     938:	cmp	r0, #0
     93c:	bne	948 <get_offset_field+0xe4>
     940:	mov	r0, #12
     944:	b	950 <get_offset_field+0xec>
     948:	str	r3, [r5]
     94c:	mov	r0, #0
     950:	ldr	r4, [sp, #8]
     954:	ldr	r5, [sp, #12]
     958:	ldr	r6, [sp, #16]
     95c:	ldr	lr, [sp, #4]
     960:	add	sp, sp, #24
     964:	bx	lr

00000968 <verify_string>:
     968:	mov	ip, sp
     96c:	sub	sp, sp, #24
     970:	str	ip, [sp]
     974:	str	lr, [sp, #4]
     978:	str	r4, [sp, #8]
     97c:	str	r5, [sp, #12]
     980:	str	r6, [sp, #16]
     984:	str	r7, [sp, #20]
     988:	mov	r4, r3
     98c:	mov	r5, r2
     990:	mov	r6, r1
     994:	mov	r7, r0
     998:	mov	r2, r4
     99c:	mov	r1, r5
     9a0:	mov	r0, r6
     9a4:	bl	428 <check_header>
     9a8:	cmp	r0, #0
     9ac:	bne	9b8 <verify_string+0x50>
     9b0:	mov	r0, #17
     9b4:	b	a18 <verify_string+0xb0>
     9b8:	add	r4, r5, r4
     9bc:	mov	r1, r4
     9c0:	mov	r0, r7
     9c4:	bl	378 <read_uoffset>
     9c8:	add	ip, r4, #4
     9cc:	sub	r2, r6, ip
     9d0:	add	r1, r0, #1
     9d4:	cmp	r2, r1
     9d8:	movcs	r2, #1
     9dc:	movcc	r2, #0
     9e0:	cmp	r2, #0
     9e4:	bne	9f0 <verify_string+0x88>
     9e8:	mov	r0, #8
     9ec:	b	a18 <verify_string+0xb0>
     9f0:	add	r3, r7, ip
     9f4:	ldrb	r0, [r3, r0]
     9f8:	cmp	r0, #0
     9fc:	moveq	r0, #1
     a00:	movne	r0, #0
     a04:	cmp	r0, #0
     a08:	bne	a14 <verify_string+0xac>
     a0c:	mov	r0, #7
     a10:	b	a18 <verify_string+0xb0>
     a14:	mov	r0, #0
     a18:	ldr	r4, [sp, #8]
     a1c:	ldr	r5, [sp, #12]
     a20:	ldr	r6, [sp, #16]
     a24:	ldr	r7, [sp, #20]
     a28:	ldr	lr, [sp, #4]
     a2c:	add	sp, sp, #24
     a30:	bx	lr

00000a34 <verify_vector>:
     a34:	mov	ip, sp
     a38:	sub	sp, sp, #32
     a3c:	str	ip, [sp]
     a40:	str	lr, [sp, #4]
     a44:	str	r4, [sp, #8]
     a48:	str	r5, [sp, #12]
     a4c:	str	r6, [sp, #16]
     a50:	str	r7, [sp, #20]
     a54:	str	r8, [sp, #24]
     a58:	str	r9, [sp, #28]
     a5c:	ldr	r8, [ip, #8]
     a60:	mov	r6, r1
     a64:	ldr	r1, [ip, #4]
     a68:	ldr	r7, [ip]
     a6c:	mov	r4, r3
     a70:	mov	r5, r2
     a74:	mov	r9, r0
     a78:	bic	r3, r1, #16711680	; 0xff0000
     a7c:	bic	r3, r3, #-16777216	; 0xff000000
     a80:	mov	r2, r4
     a84:	mov	r1, r5
     a88:	mov	r0, r6
     a8c:	bl	4bc <check_aligned_header>
     a90:	cmp	r0, #0
     a94:	bne	aa0 <verify_vector+0x6c>
     a98:	mov	r0, #16
     a9c:	b	af8 <verify_vector+0xc4>
     aa0:	add	r4, r5, r4
     aa4:	mov	r1, r4
     aa8:	mov	r0, r9
     aac:	bl	378 <read_uoffset>
     ab0:	add	r1, r4, #4
     ab4:	cmp	r0, r8
     ab8:	movls	r2, #1
     abc:	movhi	r2, #0
     ac0:	cmp	r2, #0
     ac4:	bne	ad0 <verify_vector+0x9c>
     ac8:	mov	r0, #25
     acc:	b	af8 <verify_vector+0xc4>
     ad0:	sub	r1, r6, r1
     ad4:	mul	ip, r0, r7
     ad8:	cmp	r1, ip
     adc:	movcs	r0, #1
     ae0:	movcc	r0, #0
     ae4:	cmp	r0, #0
     ae8:	bne	af4 <verify_vector+0xc0>
     aec:	mov	r0, #26
     af0:	b	af8 <verify_vector+0xc4>
     af4:	mov	r0, #0
     af8:	ldr	r4, [sp, #8]
     afc:	ldr	r5, [sp, #12]
     b00:	ldr	r6, [sp, #16]
     b04:	ldr	r7, [sp, #20]
     b08:	ldr	r8, [sp, #24]
     b0c:	ldr	r9, [sp, #28]
     b10:	ldr	lr, [sp, #4]
     b14:	add	sp, sp, #32
     b18:	bx	lr

00000b1c <verify_string_vector>:
     b1c:	mov	ip, sp
     b20:	sub	sp, sp, #48	; 0x30
     b24:	str	ip, [sp, #12]
     b28:	str	lr, [sp, #16]
     b2c:	str	r4, [sp, #24]
     b30:	str	r5, [sp, #28]
     b34:	str	r6, [sp, #32]
     b38:	str	r7, [sp, #36]	; 0x24
     b3c:	str	r8, [sp, #40]	; 0x28
     b40:	str	r9, [sp, #44]	; 0x2c
     b44:	mov	r4, r3
     b48:	mov	r5, r2
     b4c:	mov	r7, r1
     b50:	mov	r6, r0
     b54:	mov	r2, #0
     b58:	cmp	r2, #0
     b5c:	bne	b68 <verify_string_vector+0x4c>
     b60:	mov	r1, #4
     b64:	b	b6c <verify_string_vector+0x50>
     b68:	mov	r1, #1
     b6c:	mov	r8, #4
     b70:	mov	r9, #4
     b74:	mvn	r0, #0
     b78:	bl	0 <__aeabi_uidiv>
     b7c:	str	r0, [sp, #8]
     b80:	str	r9, [sp, #4]
     b84:	str	r8, [sp]
     b88:	mov	r3, r4
     b8c:	mov	r2, r5
     b90:	mov	r1, r7
     b94:	mov	r0, r6
     b98:	bl	a34 <verify_vector>
     b9c:	cmp	r0, #0
     ba0:	beq	bf0 <verify_string_vector+0xd4>
     ba4:	mov	ip, #0
     ba8:	cmp	ip, #0
     bac:	bne	bb8 <verify_string_vector+0x9c>
     bb0:	mov	r1, #4
     bb4:	b	bbc <verify_string_vector+0xa0>
     bb8:	mov	r1, #1
     bbc:	mov	r8, #4
     bc0:	mov	r9, #4
     bc4:	mvn	r0, #0
     bc8:	bl	0 <__aeabi_uidiv>
     bcc:	str	r0, [sp, #8]
     bd0:	str	r9, [sp, #4]
     bd4:	str	r8, [sp]
     bd8:	mov	r3, r4
     bdc:	mov	r2, r5
     be0:	mov	r1, r7
     be4:	mov	r0, r6
     be8:	bl	a34 <verify_vector>
     bec:	b	c70 <verify_string_vector+0x154>
     bf0:	add	r5, r5, r4
     bf4:	mov	r1, r5
     bf8:	mov	r0, r6
     bfc:	bl	378 <read_uoffset>
     c00:	mov	r4, r0
     c04:	add	r5, r5, #4
     c08:	mov	r8, #0
     c0c:	cmp	r8, r4
     c10:	bcs	c6c <verify_string_vector+0x150>
     c14:	mov	r1, r5
     c18:	mov	r0, r6
     c1c:	bl	378 <read_uoffset>
     c20:	mov	r3, r0
     c24:	mov	r2, r5
     c28:	mov	r1, r7
     c2c:	mov	r0, r6
     c30:	bl	968 <verify_string>
     c34:	cmp	r0, #0
     c38:	beq	c60 <verify_string_vector+0x144>
     c3c:	mov	r1, r5
     c40:	mov	r0, r6
     c44:	bl	378 <read_uoffset>
     c48:	mov	r3, r0
     c4c:	mov	r2, r5
     c50:	mov	r1, r7
     c54:	mov	r0, r6
     c58:	bl	968 <verify_string>
     c5c:	b	c70 <verify_string_vector+0x154>
     c60:	add	r8, r8, #1
     c64:	add	r5, r5, #4
     c68:	b	c0c <verify_string_vector+0xf0>
     c6c:	mov	r0, #0
     c70:	ldr	r4, [sp, #24]
     c74:	ldr	r5, [sp, #28]
     c78:	ldr	r6, [sp, #32]
     c7c:	ldr	r7, [sp, #36]	; 0x24
     c80:	ldr	r8, [sp, #40]	; 0x28
     c84:	ldr	r9, [sp, #44]	; 0x2c
     c88:	ldr	lr, [sp, #16]
     c8c:	add	sp, sp, #48	; 0x30
     c90:	bx	lr

00000c94 <verify_table>:
     c94:	mov	ip, sp
     c98:	sub	sp, sp, #56	; 0x38
     c9c:	str	ip, [sp]
     ca0:	str	lr, [sp, #4]
     ca4:	str	r4, [sp, #8]
     ca8:	str	r5, [sp, #12]
     cac:	str	r6, [sp, #16]
     cb0:	str	r7, [sp, #20]
     cb4:	str	r8, [sp, #24]
     cb8:	ldr	r6, [ip, #4]
     cbc:	mov	r8, r3
     cc0:	ldr	r3, [ip]
     cc4:	mov	r7, r2
     cc8:	mov	r5, r1
     ccc:	mov	r4, r0
     cd0:	sub	r1, r3, #1
     cd4:	str	r1, [sp, #40]	; 0x28
     cd8:	cmp	r1, #0
     cdc:	bne	ce8 <verify_table+0x54>
     ce0:	mov	r0, #3
     ce4:	b	e70 <verify_table+0x1dc>
     ce8:	mov	r2, r8
     cec:	mov	r1, r7
     cf0:	mov	r0, r5
     cf4:	bl	428 <check_header>
     cf8:	cmp	r0, #0
     cfc:	bne	d08 <verify_table+0x74>
     d00:	mov	r0, #15
     d04:	b	e70 <verify_table+0x1dc>
     d08:	add	ip, r7, r8
     d0c:	str	ip, [sp, #48]	; 0x30
     d10:	ldr	r1, [sp, #48]	; 0x30
     d14:	mov	r0, r4
     d18:	bl	378 <read_uoffset>
     d1c:	ldr	r2, [sp, #48]	; 0x30
     d20:	sub	r7, r2, r0
     d24:	cmp	r7, #0
     d28:	blt	d40 <verify_table+0xac>
     d2c:	and	r2, r7, #1
     d30:	cmp	r2, #0
     d34:	moveq	r0, #1
     d38:	movne	r0, #0
     d3c:	b	d44 <verify_table+0xb0>
     d40:	mov	r0, #0
     d44:	cmp	r0, #0
     d48:	bne	d54 <verify_table+0xc0>
     d4c:	mov	r0, #29
     d50:	b	e70 <verify_table+0x1dc>
     d54:	add	r0, r7, #2
     d58:	cmp	r0, r5
     d5c:	movls	r1, #1
     d60:	movhi	r1, #0
     d64:	cmp	r1, #0
     d68:	bne	d74 <verify_table+0xe0>
     d6c:	mov	r0, #27
     d70:	b	e70 <verify_table+0x1dc>
     d74:	mov	r1, r7
     d78:	mov	r0, r4
     d7c:	bl	3fc <read_voffset>
     d80:	bic	r1, r0, #16711680	; 0xff0000
     d84:	bic	r1, r1, #-16777216	; 0xff000000
     d88:	strh	r1, [sp, #54]	; 0x36
     d8c:	ldrh	r1, [sp, #54]	; 0x36
     d90:	add	ip, r7, r1
     d94:	cmp	ip, r5
     d98:	bhi	db4 <verify_table+0x120>
     d9c:	ldrh	r1, [sp, #54]	; 0x36
     da0:	and	r0, r1, #1
     da4:	cmp	r0, #0
     da8:	moveq	r2, #1
     dac:	movne	r2, #0
     db0:	b	db8 <verify_table+0x124>
     db4:	mov	r2, #0
     db8:	cmp	r2, #0
     dbc:	bne	dc8 <verify_table+0x134>
     dc0:	mov	r0, #30
     dc4:	b	e70 <verify_table+0x1dc>
     dc8:	mov	r3, #1
     dcc:	cmp	r3, #0
     dd0:	bne	de4 <verify_table+0x150>
     dd4:	cmp	ip, r7
     dd8:	movcs	r3, #1
     ddc:	movcc	r3, #0
     de0:	b	de8 <verify_table+0x154>
     de4:	mov	r3, #1
     de8:	cmp	r3, #0
     dec:	bne	df8 <verify_table+0x164>
     df0:	mov	r0, #31
     df4:	b	e70 <verify_table+0x1dc>
     df8:	ldrh	r2, [sp, #54]	; 0x36
     dfc:	cmp	r2, #4
     e00:	movcs	r2, #1
     e04:	movcc	r2, #0
     e08:	cmp	r2, #0
     e0c:	bne	e18 <verify_table+0x184>
     e10:	mov	r0, #28
     e14:	b	e70 <verify_table+0x1dc>
     e18:	add	r1, r7, #2
     e1c:	mov	r0, r4
     e20:	bl	3fc <read_voffset>
     e24:	bic	r2, r0, #16711680	; 0xff0000
     e28:	bic	r2, r2, #-16777216	; 0xff000000
     e2c:	strh	r2, [sp, #52]	; 0x34
     e30:	ldr	r0, [sp, #48]	; 0x30
     e34:	sub	r0, r5, r0
     e38:	ldrh	r1, [sp, #52]	; 0x34
     e3c:	cmp	r0, r1
     e40:	movcs	r0, #1
     e44:	movcc	r0, #0
     e48:	cmp	r0, #0
     e4c:	bne	e58 <verify_table+0x1c4>
     e50:	mov	r0, #20
     e54:	b	e70 <verify_table+0x1dc>
     e58:	add	r3, r4, r7
     e5c:	str	r3, [sp, #44]	; 0x2c
     e60:	str	r4, [sp, #32]
     e64:	str	r5, [sp, #36]	; 0x24
     e68:	add	r0, sp, #32
     e6c:	blx	r6
     e70:	ldr	r4, [sp, #8]
     e74:	ldr	r5, [sp, #12]
     e78:	ldr	r6, [sp, #16]
     e7c:	ldr	r7, [sp, #20]
     e80:	ldr	r8, [sp, #24]
     e84:	ldr	lr, [sp, #4]
     e88:	add	sp, sp, #56	; 0x38
     e8c:	bx	lr

00000e90 <verify_table_vector>:
     e90:	mov	ip, sp
     e94:	sub	sp, sp, #56	; 0x38
     e98:	str	ip, [sp, #12]
     e9c:	str	lr, [sp, #16]
     ea0:	str	r4, [sp, #24]
     ea4:	str	r5, [sp, #28]
     ea8:	str	r6, [sp, #32]
     eac:	str	r7, [sp, #36]	; 0x24
     eb0:	str	r8, [sp, #40]	; 0x28
     eb4:	str	r9, [sp, #44]	; 0x2c
     eb8:	str	sl, [sp, #48]	; 0x30
     ebc:	str	fp, [sp, #52]	; 0x34
     ec0:	ldr	r9, [ip, #4]
     ec4:	mov	r6, r0
     ec8:	ldr	r0, [ip]
     ecc:	mov	r4, r3
     ed0:	mov	r5, r2
     ed4:	mov	r7, r1
     ed8:	sub	r8, r0, #1
     edc:	cmp	r0, #0
     ee0:	movgt	r2, #1
     ee4:	movle	r2, #0
     ee8:	cmp	r2, #0
     eec:	bne	ef8 <verify_table_vector+0x68>
     ef0:	mov	r0, #3
     ef4:	b	1024 <verify_table_vector+0x194>
     ef8:	mov	r0, #0
     efc:	cmp	r0, #0
     f00:	bne	f0c <verify_table_vector+0x7c>
     f04:	mov	r1, #4
     f08:	b	f10 <verify_table_vector+0x80>
     f0c:	mov	r1, #1
     f10:	mov	sl, #4
     f14:	mov	fp, #4
     f18:	mvn	r0, #0
     f1c:	bl	0 <__aeabi_uidiv>
     f20:	str	r0, [sp, #8]
     f24:	str	fp, [sp, #4]
     f28:	str	sl, [sp]
     f2c:	mov	r3, r4
     f30:	mov	r2, r5
     f34:	mov	r1, r7
     f38:	mov	r0, r6
     f3c:	bl	a34 <verify_vector>
     f40:	cmp	r0, #0
     f44:	beq	f94 <verify_table_vector+0x104>
     f48:	mov	r3, #0
     f4c:	cmp	r3, #0
     f50:	bne	f5c <verify_table_vector+0xcc>
     f54:	mov	r1, #4
     f58:	b	f60 <verify_table_vector+0xd0>
     f5c:	mov	r1, #1
     f60:	mov	r9, #4
     f64:	mov	r8, #4
     f68:	mvn	r0, #0
     f6c:	bl	0 <__aeabi_uidiv>
     f70:	str	r0, [sp, #8]
     f74:	str	r8, [sp, #4]
     f78:	str	r9, [sp]
     f7c:	mov	r3, r4
     f80:	mov	r2, r5
     f84:	mov	r1, r7
     f88:	mov	r0, r6
     f8c:	bl	a34 <verify_vector>
     f90:	b	1024 <verify_table_vector+0x194>
     f94:	add	r5, r5, r4
     f98:	mov	r1, r5
     f9c:	mov	r0, r6
     fa0:	bl	378 <read_uoffset>
     fa4:	mov	r4, r0
     fa8:	add	r5, r5, #4
     fac:	mov	sl, #0
     fb0:	cmp	sl, r4
     fb4:	bcs	1020 <verify_table_vector+0x190>
     fb8:	mov	r1, r5
     fbc:	mov	r0, r6
     fc0:	bl	378 <read_uoffset>
     fc4:	str	r9, [sp, #4]
     fc8:	str	r8, [sp]
     fcc:	mov	r3, r0
     fd0:	mov	r2, r5
     fd4:	mov	r1, r7
     fd8:	mov	r0, r6
     fdc:	bl	c94 <verify_table>
     fe0:	cmp	r0, #0
     fe4:	beq	1014 <verify_table_vector+0x184>
     fe8:	mov	r1, r5
     fec:	mov	r0, r6
     ff0:	bl	378 <read_uoffset>
     ff4:	mov	r3, r0
     ff8:	str	r9, [sp, #4]
     ffc:	str	r8, [sp]
    1000:	mov	r2, r5
    1004:	mov	r1, r7
    1008:	mov	r0, r6
    100c:	bl	c94 <verify_table>
    1010:	b	1024 <verify_table_vector+0x194>
    1014:	add	sl, sl, #1
    1018:	add	r5, r5, #4
    101c:	b	fb0 <verify_table_vector+0x120>
    1020:	mov	r0, #0
    1024:	ldr	r4, [sp, #24]
    1028:	ldr	r5, [sp, #28]
    102c:	ldr	r6, [sp, #32]
    1030:	ldr	r7, [sp, #36]	; 0x24
    1034:	ldr	r8, [sp, #40]	; 0x28
    1038:	ldr	r9, [sp, #44]	; 0x2c
    103c:	ldr	sl, [sp, #48]	; 0x30
    1040:	ldr	fp, [sp, #52]	; 0x34
    1044:	ldr	lr, [sp, #16]
    1048:	add	sp, sp, #56	; 0x38
    104c:	bx	lr

00001050 <verify_union_vector>:
    1050:	mov	ip, sp
    1054:	sub	sp, sp, #88	; 0x58
    1058:	str	ip, [sp, #12]
    105c:	str	lr, [sp, #16]
    1060:	str	r4, [sp, #32]
    1064:	str	r5, [sp, #36]	; 0x24
    1068:	str	r6, [sp, #40]	; 0x28
    106c:	str	r7, [sp, #44]	; 0x2c
    1070:	str	r8, [sp, #48]	; 0x30
    1074:	str	r9, [sp, #52]	; 0x34
    1078:	str	sl, [sp, #56]	; 0x38
    107c:	str	fp, [sp, #60]	; 0x3c
    1080:	ldr	sl, [ip, #12]
    1084:	mov	r6, r3
    1088:	ldr	r3, [ip, #8]
    108c:	ldr	r9, [ip, #4]
    1090:	ldr	ip, [ip]
    1094:	str	ip, [sp, #24]
    1098:	mov	r8, r2
    109c:	mov	r5, r1
    10a0:	mov	fp, r0
    10a4:	sub	r7, r3, #1
    10a8:	cmp	r3, #0
    10ac:	movgt	ip, #1
    10b0:	movle	ip, #0
    10b4:	cmp	ip, #0
    10b8:	bne	10c4 <verify_union_vector+0x74>
    10bc:	mov	r0, #3
    10c0:	b	124c <verify_union_vector+0x1fc>
    10c4:	mov	r2, #0
    10c8:	cmp	r2, #0
    10cc:	bne	10d8 <verify_union_vector+0x88>
    10d0:	mov	r1, #4
    10d4:	b	10dc <verify_union_vector+0x8c>
    10d8:	mov	r1, #1
    10dc:	mov	r2, #4
    10e0:	str	r2, [sp, #28]
    10e4:	mov	r4, #4
    10e8:	mvn	r0, #0
    10ec:	bl	0 <__aeabi_uidiv>
    10f0:	str	r0, [sp, #8]
    10f4:	str	r4, [sp, #4]
    10f8:	ldr	ip, [sp, #28]
    10fc:	str	ip, [sp]
    1100:	mov	r3, r6
    1104:	mov	r2, r8
    1108:	mov	r1, r5
    110c:	mov	r0, fp
    1110:	bl	a34 <verify_vector>
    1114:	cmp	r0, #0
    1118:	beq	1168 <verify_union_vector+0x118>
    111c:	mov	r2, #0
    1120:	cmp	r2, #0
    1124:	bne	1130 <verify_union_vector+0xe0>
    1128:	mov	r1, #4
    112c:	b	1134 <verify_union_vector+0xe4>
    1130:	mov	r1, #1
    1134:	mov	r7, #4
    1138:	mov	r4, #4
    113c:	mvn	r0, #0
    1140:	bl	0 <__aeabi_uidiv>
    1144:	str	r0, [sp, #8]
    1148:	str	r4, [sp, #4]
    114c:	str	r7, [sp]
    1150:	mov	r3, r6
    1154:	mov	r2, r8
    1158:	mov	r1, r5
    115c:	mov	r0, fp
    1160:	bl	a34 <verify_vector>
    1164:	b	124c <verify_union_vector+0x1fc>
    1168:	add	r6, r8, r6
    116c:	mov	r1, r6
    1170:	mov	r0, fp
    1174:	bl	378 <read_uoffset>
    1178:	mov	r4, r0
    117c:	ldr	r2, [sp, #24]
    1180:	cmp	r4, r2
    1184:	moveq	r0, #1
    1188:	movne	r0, #0
    118c:	cmp	r0, #0
    1190:	bne	119c <verify_union_vector+0x14c>
    1194:	mov	r0, #34	; 0x22
    1198:	b	124c <verify_union_vector+0x1fc>
    119c:	add	r6, r6, #4
    11a0:	str	fp, [sp, #64]	; 0x40
    11a4:	str	r5, [sp, #68]	; 0x44
    11a8:	str	r7, [sp, #72]	; 0x48
    11ac:	mov	r5, #0
    11b0:	cmp	r5, r4
    11b4:	bcs	1248 <verify_union_vector+0x1f8>
    11b8:	mov	r1, r6
    11bc:	mov	r0, fp
    11c0:	bl	378 <read_uoffset>
    11c4:	cmp	r0, #0
    11c8:	beq	121c <verify_union_vector+0x1cc>
    11cc:	ldrb	r1, [r9, r5]
    11d0:	cmp	r1, #0
    11d4:	movne	ip, #1
    11d8:	moveq	ip, #0
    11dc:	cmp	ip, #0
    11e0:	bne	11ec <verify_union_vector+0x19c>
    11e4:	mov	r0, #33	; 0x21
    11e8:	b	124c <verify_union_vector+0x1fc>
    11ec:	ldrb	r1, [r9, r5]
    11f0:	and	r1, r1, #255	; 0xff
    11f4:	strb	r1, [sp, #76]	; 0x4c
    11f8:	str	r6, [sp, #80]	; 0x50
    11fc:	str	r0, [sp, #84]	; 0x54
    1200:	add	r0, sp, #64	; 0x40
    1204:	blx	sl
    1208:	cmp	r0, #0
    120c:	beq	123c <verify_union_vector+0x1ec>
    1210:	add	r0, sp, #64	; 0x40
    1214:	blx	sl
    1218:	b	124c <verify_union_vector+0x1fc>
    121c:	ldrb	r2, [r9, r5]
    1220:	cmp	r2, #0
    1224:	moveq	r1, #1
    1228:	movne	r1, #0
    122c:	cmp	r1, #0
    1230:	bne	123c <verify_union_vector+0x1ec>
    1234:	mov	r0, #32
    1238:	b	124c <verify_union_vector+0x1fc>
    123c:	add	r5, r5, #1
    1240:	add	r6, r6, #4
    1244:	b	11b0 <verify_union_vector+0x160>
    1248:	mov	r0, #0
    124c:	ldr	r4, [sp, #32]
    1250:	ldr	r5, [sp, #36]	; 0x24
    1254:	ldr	r6, [sp, #40]	; 0x28
    1258:	ldr	r7, [sp, #44]	; 0x2c
    125c:	ldr	r8, [sp, #48]	; 0x30
    1260:	ldr	r9, [sp, #52]	; 0x34
    1264:	ldr	sl, [sp, #56]	; 0x38
    1268:	ldr	fp, [sp, #60]	; 0x3c
    126c:	ldr	lr, [sp, #16]
    1270:	add	sp, sp, #88	; 0x58
    1274:	bx	lr

00001278 <flatcc_verify_field>:
    1278:	mov	ip, sp
    127c:	sub	sp, sp, #32
    1280:	str	ip, [sp, #4]
    1284:	str	lr, [sp, #8]
    1288:	str	r4, [sp, #16]
    128c:	str	r5, [sp, #20]
    1290:	str	r6, [sp, #24]
    1294:	str	r7, [sp, #28]
    1298:	mov	r6, r3
    129c:	mov	r4, r2
    12a0:	mov	r7, r1
    12a4:	mov	r5, r0
    12a8:	bic	r1, r7, #16711680	; 0xff0000
    12ac:	bic	r1, r1, #-16777216	; 0xff000000
    12b0:	mov	r2, #0
    12b4:	bic	r3, r6, #16711680	; 0xff0000
    12b8:	bic	r3, r3, #-16777216	; 0xff000000
    12bc:	str	r3, [sp]
    12c0:	mov	r3, r4
    12c4:	mov	r0, r5
    12c8:	bl	6e4 <verify_field>
    12cc:	cmp	r0, #0
    12d0:	beq	12fc <flatcc_verify_field+0x84>
    12d4:	bic	r1, r7, #16711680	; 0xff0000
    12d8:	bic	r1, r1, #-16777216	; 0xff000000
    12dc:	mov	r2, #0
    12e0:	bic	r3, r6, #16711680	; 0xff0000
    12e4:	bic	r3, r3, #-16777216	; 0xff000000
    12e8:	str	r3, [sp]
    12ec:	mov	r3, r4
    12f0:	mov	r0, r5
    12f4:	bl	6e4 <verify_field>
    12f8:	b	1300 <flatcc_verify_field+0x88>
    12fc:	mov	r0, #0
    1300:	ldr	r4, [sp, #16]
    1304:	ldr	r5, [sp, #20]
    1308:	ldr	r6, [sp, #24]
    130c:	ldr	r7, [sp, #28]
    1310:	ldr	lr, [sp, #8]
    1314:	add	sp, sp, #32
    1318:	bx	lr

0000131c <flatcc_verify_string_field>:
    131c:	mov	ip, sp
    1320:	sub	sp, sp, #24
    1324:	str	ip, [sp]
    1328:	str	lr, [sp, #4]
    132c:	str	r4, [sp, #8]
    1330:	mov	r4, r0
    1334:	bic	r1, r1, #16711680	; 0xff0000
    1338:	bic	r1, r1, #-16777216	; 0xff000000
    133c:	add	r3, sp, #16
    1340:	mov	r0, r4
    1344:	bl	864 <get_offset_field>
    1348:	cmp	r0, #0
    134c:	bne	1364 <flatcc_verify_string_field+0x48>
    1350:	ldr	ip, [sp, #16]
    1354:	cmp	ip, #0
    1358:	moveq	r3, #1
    135c:	movne	r3, #0
    1360:	b	1368 <flatcc_verify_string_field+0x4c>
    1364:	mov	r3, #1
    1368:	cmp	r3, #0
    136c:	bne	1398 <flatcc_verify_string_field+0x7c>
    1370:	ldr	r0, [r4]
    1374:	ldr	r1, [sp, #16]
    1378:	bl	378 <read_uoffset>
    137c:	ldr	r3, [r4]
    1380:	ldr	r1, [r4, #4]
    1384:	ldr	r2, [sp, #16]
    1388:	mov	ip, r0
    138c:	mov	r0, r3
    1390:	mov	r3, ip
    1394:	bl	968 <verify_string>
    1398:	ldr	r4, [sp, #8]
    139c:	ldr	lr, [sp, #4]
    13a0:	add	sp, sp, #24
    13a4:	bx	lr

000013a8 <flatcc_verify_vector_field>:
    13a8:	mov	ip, sp
    13ac:	sub	sp, sp, #48	; 0x30
    13b0:	str	ip, [sp, #12]
    13b4:	str	lr, [sp, #16]
    13b8:	str	r4, [sp, #24]
    13bc:	str	r5, [sp, #28]
    13c0:	str	r6, [sp, #32]
    13c4:	str	r7, [sp, #36]	; 0x24
    13c8:	ldr	r7, [ip, #4]
    13cc:	ldr	r6, [ip]
    13d0:	mov	r5, r3
    13d4:	mov	r4, r0
    13d8:	bic	r1, r1, #16711680	; 0xff0000
    13dc:	bic	r1, r1, #-16777216	; 0xff000000
    13e0:	add	r3, sp, #40	; 0x28
    13e4:	mov	r0, r4
    13e8:	bl	864 <get_offset_field>
    13ec:	cmp	r0, #0
    13f0:	bne	1408 <flatcc_verify_vector_field+0x60>
    13f4:	ldr	r3, [sp, #40]	; 0x28
    13f8:	cmp	r3, #0
    13fc:	moveq	r1, #1
    1400:	movne	r1, #0
    1404:	b	140c <flatcc_verify_vector_field+0x64>
    1408:	mov	r1, #1
    140c:	cmp	r1, #0
    1410:	bne	1448 <flatcc_verify_vector_field+0xa0>
    1414:	ldr	r0, [r4]
    1418:	ldr	r1, [sp, #40]	; 0x28
    141c:	bl	378 <read_uoffset>
    1420:	mov	r3, r0
    1424:	ldr	r0, [r4]
    1428:	ldr	r1, [r4, #4]
    142c:	ldr	r2, [sp, #40]	; 0x28
    1430:	bic	ip, r6, #16711680	; 0xff0000
    1434:	bic	ip, ip, #-16777216	; 0xff000000
    1438:	str	r7, [sp, #8]
    143c:	str	ip, [sp, #4]
    1440:	str	r5, [sp]
    1444:	bl	a34 <verify_vector>
    1448:	ldr	r4, [sp, #24]
    144c:	ldr	r5, [sp, #28]
    1450:	ldr	r6, [sp, #32]
    1454:	ldr	r7, [sp, #36]	; 0x24
    1458:	ldr	lr, [sp, #16]
    145c:	add	sp, sp, #48	; 0x30
    1460:	bx	lr

00001464 <flatcc_verify_string_vector_field>:
    1464:	mov	ip, sp
    1468:	sub	sp, sp, #24
    146c:	str	ip, [sp]
    1470:	str	lr, [sp, #4]
    1474:	str	r4, [sp, #8]
    1478:	mov	r4, r0
    147c:	bic	r1, r1, #16711680	; 0xff0000
    1480:	bic	r1, r1, #-16777216	; 0xff000000
    1484:	add	r3, sp, #16
    1488:	mov	r0, r4
    148c:	bl	864 <get_offset_field>
    1490:	cmp	r0, #0
    1494:	bne	14ac <flatcc_verify_string_vector_field+0x48>
    1498:	ldr	ip, [sp, #16]
    149c:	cmp	ip, #0
    14a0:	moveq	r3, #1
    14a4:	movne	r3, #0
    14a8:	b	14b0 <flatcc_verify_string_vector_field+0x4c>
    14ac:	mov	r3, #1
    14b0:	cmp	r3, #0
    14b4:	bne	14e0 <flatcc_verify_string_vector_field+0x7c>
    14b8:	ldr	r0, [r4]
    14bc:	ldr	r1, [sp, #16]
    14c0:	bl	378 <read_uoffset>
    14c4:	ldr	r3, [r4]
    14c8:	ldr	r1, [r4, #4]
    14cc:	ldr	r2, [sp, #16]
    14d0:	mov	ip, r0
    14d4:	mov	r0, r3
    14d8:	mov	r3, ip
    14dc:	bl	b1c <verify_string_vector>
    14e0:	ldr	r4, [sp, #8]
    14e4:	ldr	lr, [sp, #4]
    14e8:	add	sp, sp, #24
    14ec:	bx	lr

000014f0 <flatcc_verify_table_field>:
    14f0:	mov	ip, sp
    14f4:	sub	sp, sp, #32
    14f8:	str	ip, [sp, #8]
    14fc:	str	lr, [sp, #12]
    1500:	str	r4, [sp, #16]
    1504:	str	r5, [sp, #20]
    1508:	mov	r5, r3
    150c:	mov	r4, r0
    1510:	bic	r1, r1, #16711680	; 0xff0000
    1514:	bic	r1, r1, #-16777216	; 0xff000000
    1518:	add	r3, sp, #24
    151c:	mov	r0, r4
    1520:	bl	864 <get_offset_field>
    1524:	cmp	r0, #0
    1528:	bne	1540 <flatcc_verify_table_field+0x50>
    152c:	ldr	r3, [sp, #24]
    1530:	cmp	r3, #0
    1534:	moveq	r2, #1
    1538:	movne	r2, #0
    153c:	b	1544 <flatcc_verify_table_field+0x54>
    1540:	mov	r2, #1
    1544:	cmp	r2, #0
    1548:	bne	1578 <flatcc_verify_table_field+0x88>
    154c:	ldr	r0, [r4]
    1550:	ldr	r1, [sp, #24]
    1554:	bl	378 <read_uoffset>
    1558:	mov	r3, r0
    155c:	ldr	r0, [r4]
    1560:	ldr	r1, [r4, #4]
    1564:	ldr	r2, [sp, #24]
    1568:	ldr	r4, [r4, #8]
    156c:	str	r5, [sp, #4]
    1570:	str	r4, [sp]
    1574:	bl	c94 <verify_table>
    1578:	ldr	r4, [sp, #16]
    157c:	ldr	r5, [sp, #20]
    1580:	ldr	lr, [sp, #12]
    1584:	add	sp, sp, #32
    1588:	bx	lr

0000158c <flatcc_verify_table_vector_field>:
    158c:	mov	ip, sp
    1590:	sub	sp, sp, #32
    1594:	str	ip, [sp, #8]
    1598:	str	lr, [sp, #12]
    159c:	str	r4, [sp, #16]
    15a0:	str	r5, [sp, #20]
    15a4:	mov	r5, r3
    15a8:	mov	r4, r0
    15ac:	bic	r1, r1, #16711680	; 0xff0000
    15b0:	bic	r1, r1, #-16777216	; 0xff000000
    15b4:	add	r3, sp, #24
    15b8:	mov	r0, r4
    15bc:	bl	864 <get_offset_field>
    15c0:	cmp	r0, #0
    15c4:	bne	15dc <flatcc_verify_table_vector_field+0x50>
    15c8:	ldr	r3, [sp, #24]
    15cc:	cmp	r3, #0
    15d0:	moveq	r2, #1
    15d4:	movne	r2, #0
    15d8:	b	15e0 <flatcc_verify_table_vector_field+0x54>
    15dc:	mov	r2, #1
    15e0:	cmp	r2, #0
    15e4:	bne	1614 <flatcc_verify_table_vector_field+0x88>
    15e8:	ldr	r0, [r4]
    15ec:	ldr	r1, [sp, #24]
    15f0:	bl	378 <read_uoffset>
    15f4:	mov	r3, r0
    15f8:	ldr	r0, [r4]
    15fc:	ldr	r1, [r4, #4]
    1600:	ldr	r2, [sp, #24]
    1604:	ldr	r4, [r4, #8]
    1608:	str	r5, [sp, #4]
    160c:	str	r4, [sp]
    1610:	bl	e90 <verify_table_vector>
    1614:	ldr	r4, [sp, #16]
    1618:	ldr	r5, [sp, #20]
    161c:	ldr	lr, [sp, #12]
    1620:	add	sp, sp, #32
    1624:	bx	lr

00001628 <flatcc_verify_union_table>:
    1628:	mov	ip, sp
    162c:	sub	sp, sp, #24
    1630:	str	ip, [sp, #8]
    1634:	str	lr, [sp, #12]
    1638:	str	r4, [sp, #16]
    163c:	mov	ip, r1
    1640:	mov	r4, r0
    1644:	ldr	r0, [r4]
    1648:	ldr	r1, [r4, #4]
    164c:	ldr	r2, [r4, #16]
    1650:	ldr	r3, [r4, #20]
    1654:	ldr	r4, [r4, #8]
    1658:	str	ip, [sp, #4]
    165c:	str	r4, [sp]
    1660:	bl	c94 <verify_table>
    1664:	ldr	r4, [sp, #16]
    1668:	ldr	lr, [sp, #12]
    166c:	add	sp, sp, #24
    1670:	bx	lr

00001674 <flatcc_verify_union_struct>:
    1674:	mov	ip, sp
    1678:	sub	sp, sp, #16
    167c:	str	ip, [sp, #4]
    1680:	str	lr, [sp, #8]
    1684:	mov	ip, r2
    1688:	mov	r3, r1
    168c:	mov	r2, r0
    1690:	ldr	r0, [r2, #4]
    1694:	ldr	r1, [r2, #16]
    1698:	ldr	r2, [r2, #20]
    169c:	bic	ip, ip, #16711680	; 0xff0000
    16a0:	bic	ip, ip, #-16777216	; 0xff000000
    16a4:	str	ip, [sp]
    16a8:	bl	578 <verify_struct>
    16ac:	ldr	lr, [sp, #8]
    16b0:	add	sp, sp, #16
    16b4:	bx	lr

000016b8 <flatcc_verify_union_string>:
    16b8:	mov	ip, sp
    16bc:	sub	sp, sp, #8
    16c0:	str	ip, [sp]
    16c4:	str	lr, [sp, #4]
    16c8:	mov	r3, r0
    16cc:	ldr	r0, [r3]
    16d0:	ldr	r1, [r3, #4]
    16d4:	ldr	r2, [r3, #16]
    16d8:	ldr	r3, [r3, #20]
    16dc:	bl	968 <verify_string>
    16e0:	ldr	lr, [sp, #4]
    16e4:	add	sp, sp, #8
    16e8:	bx	lr

000016ec <flatcc_verify_buffer_header>:
    16ec:	mov	ip, sp
    16f0:	sub	sp, sp, #16
    16f4:	str	ip, [sp]
    16f8:	str	lr, [sp, #4]
    16fc:	str	r4, [sp, #8]
    1700:	str	r5, [sp, #12]
    1704:	mov	r5, r0
    1708:	and	r3, r5, #3
    170c:	cmp	r3, #0
    1710:	moveq	r3, #1
    1714:	movne	r3, #0
    1718:	cmp	r3, #0
    171c:	bne	1728 <flatcc_verify_buffer_header+0x3c>
    1720:	mov	r0, #5
    1724:	b	17b0 <flatcc_verify_buffer_header+0xc4>
    1728:	cmn	r1, #9
    172c:	movls	ip, #1
    1730:	movhi	ip, #0
    1734:	cmp	ip, #0
    1738:	bne	1744 <flatcc_verify_buffer_header+0x58>
    173c:	mov	r0, #6
    1740:	b	17b0 <flatcc_verify_buffer_header+0xc4>
    1744:	cmp	r1, #8
    1748:	movcs	r1, #1
    174c:	movcc	r1, #0
    1750:	cmp	r1, #0
    1754:	bne	1760 <flatcc_verify_buffer_header+0x74>
    1758:	mov	r0, #1
    175c:	b	17b0 <flatcc_verify_buffer_header+0xc4>
    1760:	cmp	r2, #0
    1764:	beq	17ac <flatcc_verify_buffer_header+0xc0>
    1768:	mov	r0, r2
    176c:	bl	39c <read_thash_identifier>
    1770:	mov	r4, r0
    1774:	mov	r1, #4
    1778:	mov	r0, r5
    177c:	bl	3d8 <read_thash>
    1780:	cmp	r4, #0
    1784:	beq	1798 <flatcc_verify_buffer_header+0xac>
    1788:	cmp	r0, r4
    178c:	moveq	r0, #1
    1790:	movne	r0, #0
    1794:	b	179c <flatcc_verify_buffer_header+0xb0>
    1798:	mov	r0, #1
    179c:	cmp	r0, #0
    17a0:	bne	17ac <flatcc_verify_buffer_header+0xc0>
    17a4:	mov	r0, #2
    17a8:	b	17b0 <flatcc_verify_buffer_header+0xc4>
    17ac:	mov	r0, #0
    17b0:	ldr	r4, [sp, #8]
    17b4:	ldr	r5, [sp, #12]
    17b8:	ldr	lr, [sp, #4]
    17bc:	add	sp, sp, #16
    17c0:	bx	lr

000017c4 <flatcc_verify_typed_buffer_header>:
    17c4:	mov	ip, sp
    17c8:	sub	sp, sp, #16
    17cc:	str	ip, [sp]
    17d0:	str	lr, [sp, #4]
    17d4:	str	r4, [sp, #8]
    17d8:	mov	r4, r2
    17dc:	and	r3, r0, #3
    17e0:	cmp	r3, #0
    17e4:	moveq	r2, #1
    17e8:	movne	r2, #0
    17ec:	cmp	r2, #0
    17f0:	bne	17fc <flatcc_verify_typed_buffer_header+0x38>
    17f4:	mov	r0, #5
    17f8:	b	1874 <flatcc_verify_typed_buffer_header+0xb0>
    17fc:	cmn	r1, #9
    1800:	movls	r2, #1
    1804:	movhi	r2, #0
    1808:	cmp	r2, #0
    180c:	bne	1818 <flatcc_verify_typed_buffer_header+0x54>
    1810:	mov	r0, #6
    1814:	b	1874 <flatcc_verify_typed_buffer_header+0xb0>
    1818:	cmp	r1, #8
    181c:	movcs	r2, #1
    1820:	movcc	r2, #0
    1824:	cmp	r2, #0
    1828:	bne	1834 <flatcc_verify_typed_buffer_header+0x70>
    182c:	mov	r0, #1
    1830:	b	1874 <flatcc_verify_typed_buffer_header+0xb0>
    1834:	cmp	r4, #0
    1838:	beq	1870 <flatcc_verify_typed_buffer_header+0xac>
    183c:	mov	r1, #4
    1840:	bl	3d8 <read_thash>
    1844:	cmp	r4, #0
    1848:	beq	185c <flatcc_verify_typed_buffer_header+0x98>
    184c:	cmp	r0, r4
    1850:	moveq	r0, #1
    1854:	movne	r0, #0
    1858:	b	1860 <flatcc_verify_typed_buffer_header+0x9c>
    185c:	mov	r0, #1
    1860:	cmp	r0, #0
    1864:	bne	1870 <flatcc_verify_typed_buffer_header+0xac>
    1868:	mov	r0, #2
    186c:	b	1874 <flatcc_verify_typed_buffer_header+0xb0>
    1870:	mov	r0, #0
    1874:	ldr	r4, [sp, #8]
    1878:	ldr	lr, [sp, #4]
    187c:	add	sp, sp, #16
    1880:	bx	lr

00001884 <flatcc_verify_struct_as_root>:
    1884:	mov	ip, sp
    1888:	sub	sp, sp, #40	; 0x28
    188c:	str	ip, [sp, #4]
    1890:	str	lr, [sp, #8]
    1894:	str	r4, [sp, #16]
    1898:	str	r5, [sp, #20]
    189c:	str	r6, [sp, #24]
    18a0:	str	r7, [sp, #28]
    18a4:	str	r8, [sp, #32]
    18a8:	ldr	r8, [ip]
    18ac:	mov	r4, r3
    18b0:	mov	r5, r2
    18b4:	mov	r6, r1
    18b8:	mov	r7, r0
    18bc:	mov	r2, r5
    18c0:	mov	r1, r6
    18c4:	mov	r0, r7
    18c8:	bl	16ec <flatcc_verify_buffer_header>
    18cc:	cmp	r0, #0
    18d0:	beq	18e8 <flatcc_verify_struct_as_root+0x64>
    18d4:	mov	r2, r5
    18d8:	mov	r1, r6
    18dc:	mov	r0, r7
    18e0:	bl	16ec <flatcc_verify_buffer_header>
    18e4:	b	1914 <flatcc_verify_struct_as_root+0x90>
    18e8:	mov	r1, #0
    18ec:	mov	r0, r7
    18f0:	bl	378 <read_uoffset>
    18f4:	mov	r2, r0
    18f8:	mov	r1, #0
    18fc:	bic	r3, r8, #16711680	; 0xff0000
    1900:	bic	r3, r3, #-16777216	; 0xff000000
    1904:	str	r3, [sp]
    1908:	mov	r3, r4
    190c:	mov	r0, r6
    1910:	bl	578 <verify_struct>
    1914:	ldr	r4, [sp, #16]
    1918:	ldr	r5, [sp, #20]
    191c:	ldr	r6, [sp, #24]
    1920:	ldr	r7, [sp, #28]
    1924:	ldr	r8, [sp, #32]
    1928:	ldr	lr, [sp, #8]
    192c:	add	sp, sp, #40	; 0x28
    1930:	bx	lr

00001934 <flatcc_verify_struct_as_typed_root>:
    1934:	mov	ip, sp
    1938:	sub	sp, sp, #40	; 0x28
    193c:	str	ip, [sp, #4]
    1940:	str	lr, [sp, #8]
    1944:	str	r4, [sp, #16]
    1948:	str	r5, [sp, #20]
    194c:	str	r6, [sp, #24]
    1950:	str	r7, [sp, #28]
    1954:	str	r8, [sp, #32]
    1958:	ldr	r8, [ip]
    195c:	mov	r4, r3
    1960:	mov	r5, r2
    1964:	mov	r6, r1
    1968:	mov	r7, r0
    196c:	mov	r2, r5
    1970:	mov	r1, r6
    1974:	mov	r0, r7
    1978:	bl	17c4 <flatcc_verify_typed_buffer_header>
    197c:	cmp	r0, #0
    1980:	beq	1998 <flatcc_verify_struct_as_typed_root+0x64>
    1984:	mov	r2, r5
    1988:	mov	r1, r6
    198c:	mov	r0, r7
    1990:	bl	17c4 <flatcc_verify_typed_buffer_header>
    1994:	b	19c4 <flatcc_verify_struct_as_typed_root+0x90>
    1998:	mov	r1, #0
    199c:	mov	r0, r7
    19a0:	bl	378 <read_uoffset>
    19a4:	mov	r2, r0
    19a8:	mov	r1, #0
    19ac:	bic	r3, r8, #16711680	; 0xff0000
    19b0:	bic	r3, r3, #-16777216	; 0xff000000
    19b4:	str	r3, [sp]
    19b8:	mov	r3, r4
    19bc:	mov	r0, r6
    19c0:	bl	578 <verify_struct>
    19c4:	ldr	r4, [sp, #16]
    19c8:	ldr	r5, [sp, #20]
    19cc:	ldr	r6, [sp, #24]
    19d0:	ldr	r7, [sp, #28]
    19d4:	ldr	r8, [sp, #32]
    19d8:	ldr	lr, [sp, #8]
    19dc:	add	sp, sp, #40	; 0x28
    19e0:	bx	lr

000019e4 <flatcc_verify_table_as_root>:
    19e4:	mov	ip, sp
    19e8:	sub	sp, sp, #32
    19ec:	str	ip, [sp, #8]
    19f0:	str	lr, [sp, #12]
    19f4:	str	r4, [sp, #16]
    19f8:	str	r5, [sp, #20]
    19fc:	str	r6, [sp, #24]
    1a00:	str	r7, [sp, #28]
    1a04:	mov	r4, r3
    1a08:	mov	r5, r2
    1a0c:	mov	r6, r1
    1a10:	mov	r7, r0
    1a14:	mov	r2, r5
    1a18:	mov	r1, r6
    1a1c:	mov	r0, r7
    1a20:	bl	16ec <flatcc_verify_buffer_header>
    1a24:	cmp	r0, #0
    1a28:	beq	1a40 <flatcc_verify_table_as_root+0x5c>
    1a2c:	mov	r2, r5
    1a30:	mov	r1, r6
    1a34:	mov	r0, r7
    1a38:	bl	16ec <flatcc_verify_buffer_header>
    1a3c:	b	1a6c <flatcc_verify_table_as_root+0x88>
    1a40:	mov	r1, #0
    1a44:	mov	r0, r7
    1a48:	bl	378 <read_uoffset>
    1a4c:	mov	r3, r0
    1a50:	mov	r2, #0
    1a54:	mov	r0, #100	; 0x64
    1a58:	str	r4, [sp, #4]
    1a5c:	str	r0, [sp]
    1a60:	mov	r1, r6
    1a64:	mov	r0, r7
    1a68:	bl	c94 <verify_table>
    1a6c:	ldr	r4, [sp, #16]
    1a70:	ldr	r5, [sp, #20]
    1a74:	ldr	r6, [sp, #24]
    1a78:	ldr	r7, [sp, #28]
    1a7c:	ldr	lr, [sp, #12]
    1a80:	add	sp, sp, #32
    1a84:	bx	lr

00001a88 <flatcc_verify_table_as_typed_root>:
    1a88:	mov	ip, sp
    1a8c:	sub	sp, sp, #32
    1a90:	str	ip, [sp, #8]
    1a94:	str	lr, [sp, #12]
    1a98:	str	r4, [sp, #16]
    1a9c:	str	r5, [sp, #20]
    1aa0:	str	r6, [sp, #24]
    1aa4:	str	r7, [sp, #28]
    1aa8:	mov	r4, r3
    1aac:	mov	r5, r2
    1ab0:	mov	r6, r1
    1ab4:	mov	r7, r0
    1ab8:	mov	r2, r5
    1abc:	mov	r1, r6
    1ac0:	mov	r0, r7
    1ac4:	bl	17c4 <flatcc_verify_typed_buffer_header>
    1ac8:	cmp	r0, #0
    1acc:	beq	1ae4 <flatcc_verify_table_as_typed_root+0x5c>
    1ad0:	mov	r2, r5
    1ad4:	mov	r1, r6
    1ad8:	mov	r0, r7
    1adc:	bl	17c4 <flatcc_verify_typed_buffer_header>
    1ae0:	b	1b10 <flatcc_verify_table_as_typed_root+0x88>
    1ae4:	mov	r1, #0
    1ae8:	mov	r0, r7
    1aec:	bl	378 <read_uoffset>
    1af0:	mov	r3, r0
    1af4:	mov	r2, #0
    1af8:	mov	r0, #100	; 0x64
    1afc:	str	r4, [sp, #4]
    1b00:	str	r0, [sp]
    1b04:	mov	r1, r6
    1b08:	mov	r0, r7
    1b0c:	bl	c94 <verify_table>
    1b10:	ldr	r4, [sp, #16]
    1b14:	ldr	r5, [sp, #20]
    1b18:	ldr	r6, [sp, #24]
    1b1c:	ldr	r7, [sp, #28]
    1b20:	ldr	lr, [sp, #12]
    1b24:	add	sp, sp, #32
    1b28:	bx	lr

00001b2c <flatcc_verify_struct_as_nested_root>:
    1b2c:	mov	ip, sp
    1b30:	sub	sp, sp, #48	; 0x30
    1b34:	str	ip, [sp, #8]
    1b38:	str	lr, [sp, #12]
    1b3c:	str	r4, [sp, #16]
    1b40:	str	r5, [sp, #20]
    1b44:	str	r6, [sp, #24]
    1b48:	str	r7, [sp, #28]
    1b4c:	str	r8, [sp, #32]
    1b50:	str	r9, [sp, #36]	; 0x24
    1b54:	str	sl, [sp, #40]	; 0x28
    1b58:	str	fp, [sp, #44]	; 0x2c
    1b5c:	ldr	r5, [ip, #4]
    1b60:	ldr	r7, [ip]
    1b64:	mov	r6, r3
    1b68:	mov	r8, r2
    1b6c:	mov	r9, r1
    1b70:	mov	r4, r0
    1b74:	mov	r1, #0
    1b78:	cmp	r1, #0
    1b7c:	bne	1b88 <flatcc_verify_struct_as_nested_root+0x5c>
    1b80:	mov	r1, #1
    1b84:	b	1b8c <flatcc_verify_struct_as_nested_root+0x60>
    1b88:	mov	r1, #1
    1b8c:	bic	sl, r9, #16711680	; 0xff0000
    1b90:	bic	sl, sl, #-16777216	; 0xff000000
    1b94:	mov	fp, #1
    1b98:	mvn	r0, #0
    1b9c:	bl	0 <__aeabi_uidiv>
    1ba0:	str	r0, [sp, #4]
    1ba4:	str	fp, [sp]
    1ba8:	mov	r3, r5
    1bac:	mov	r2, r8
    1bb0:	mov	r1, sl
    1bb4:	mov	r0, r4
    1bb8:	bl	13a8 <flatcc_verify_vector_field>
    1bbc:	cmp	r0, #0
    1bc0:	beq	1c10 <flatcc_verify_struct_as_nested_root+0xe4>
    1bc4:	mov	r1, #0
    1bc8:	cmp	r1, #0
    1bcc:	bne	1bd8 <flatcc_verify_struct_as_nested_root+0xac>
    1bd0:	mov	r1, #1
    1bd4:	b	1bdc <flatcc_verify_struct_as_nested_root+0xb0>
    1bd8:	mov	r1, #1
    1bdc:	bic	r6, r9, #16711680	; 0xff0000
    1be0:	bic	r6, r6, #-16777216	; 0xff000000
    1be4:	mov	r7, #1
    1be8:	mvn	r0, #0
    1bec:	bl	0 <__aeabi_uidiv>
    1bf0:	str	r0, [sp, #4]
    1bf4:	str	r7, [sp]
    1bf8:	mov	r3, r5
    1bfc:	mov	r2, r8
    1c00:	mov	r1, r6
    1c04:	mov	r0, r4
    1c08:	bl	13a8 <flatcc_verify_vector_field>
    1c0c:	b	1c70 <flatcc_verify_struct_as_nested_root+0x144>
    1c10:	bic	r1, r9, #16711680	; 0xff0000
    1c14:	bic	r1, r1, #-16777216	; 0xff000000
    1c18:	mov	r0, r4
    1c1c:	bl	684 <get_field_ptr>
    1c20:	mov	r4, r0
    1c24:	cmp	r4, #0
    1c28:	bne	1c34 <flatcc_verify_struct_as_nested_root+0x108>
    1c2c:	mov	r0, #0
    1c30:	b	1c70 <flatcc_verify_struct_as_nested_root+0x144>
    1c34:	mov	r1, #0
    1c38:	mov	r0, r4
    1c3c:	bl	378 <read_uoffset>
    1c40:	add	r4, r4, r0
    1c44:	mov	r1, #0
    1c48:	mov	r0, r4
    1c4c:	bl	378 <read_uoffset>
    1c50:	mov	r1, r0
    1c54:	add	r0, r4, #4
    1c58:	bic	r2, r5, #16711680	; 0xff0000
    1c5c:	bic	r2, r2, #-16777216	; 0xff000000
    1c60:	str	r2, [sp]
    1c64:	mov	r3, r7
    1c68:	mov	r2, r6
    1c6c:	bl	1884 <flatcc_verify_struct_as_root>
    1c70:	ldr	r4, [sp, #16]
    1c74:	ldr	r5, [sp, #20]
    1c78:	ldr	r6, [sp, #24]
    1c7c:	ldr	r7, [sp, #28]
    1c80:	ldr	r8, [sp, #32]
    1c84:	ldr	r9, [sp, #36]	; 0x24
    1c88:	ldr	sl, [sp, #40]	; 0x28
    1c8c:	ldr	fp, [sp, #44]	; 0x2c
    1c90:	ldr	lr, [sp, #12]
    1c94:	add	sp, sp, #48	; 0x30
    1c98:	bx	lr

00001c9c <flatcc_verify_table_as_nested_root>:
    1c9c:	mov	ip, sp
    1ca0:	sub	sp, sp, #48	; 0x30
    1ca4:	str	ip, [sp, #8]
    1ca8:	str	lr, [sp, #12]
    1cac:	str	r4, [sp, #16]
    1cb0:	str	r5, [sp, #20]
    1cb4:	str	r6, [sp, #24]
    1cb8:	str	r7, [sp, #28]
    1cbc:	str	r8, [sp, #32]
    1cc0:	str	r9, [sp, #36]	; 0x24
    1cc4:	str	sl, [sp, #40]	; 0x28
    1cc8:	str	fp, [sp, #44]	; 0x2c
    1ccc:	ldr	r8, [ip, #4]
    1cd0:	ldr	r4, [ip]
    1cd4:	mov	r9, r3
    1cd8:	mov	r5, r2
    1cdc:	mov	sl, r1
    1ce0:	mov	r7, r0
    1ce4:	mov	ip, #0
    1ce8:	cmp	ip, #0
    1cec:	bne	1cf8 <flatcc_verify_table_as_nested_root+0x5c>
    1cf0:	mov	r1, #1
    1cf4:	b	1cfc <flatcc_verify_table_as_nested_root+0x60>
    1cf8:	mov	r1, #1
    1cfc:	bic	r6, sl, #16711680	; 0xff0000
    1d00:	bic	r6, r6, #-16777216	; 0xff000000
    1d04:	mov	fp, #1
    1d08:	mvn	r0, #0
    1d0c:	bl	0 <__aeabi_uidiv>
    1d10:	str	r0, [sp, #4]
    1d14:	str	fp, [sp]
    1d18:	mov	r3, r4
    1d1c:	mov	r2, r5
    1d20:	mov	r1, r6
    1d24:	mov	r0, r7
    1d28:	bl	13a8 <flatcc_verify_vector_field>
    1d2c:	cmp	r0, #0
    1d30:	beq	1d80 <flatcc_verify_table_as_nested_root+0xe4>
    1d34:	mov	r3, #0
    1d38:	cmp	r3, #0
    1d3c:	bne	1d48 <flatcc_verify_table_as_nested_root+0xac>
    1d40:	mov	r1, #1
    1d44:	b	1d4c <flatcc_verify_table_as_nested_root+0xb0>
    1d48:	mov	r1, #1
    1d4c:	bic	r6, sl, #16711680	; 0xff0000
    1d50:	bic	r6, r6, #-16777216	; 0xff000000
    1d54:	mov	r8, #1
    1d58:	mvn	r0, #0
    1d5c:	bl	0 <__aeabi_uidiv>
    1d60:	str	r0, [sp, #4]
    1d64:	str	r8, [sp]
    1d68:	mov	r3, r4
    1d6c:	mov	r2, r5
    1d70:	mov	r1, r6
    1d74:	mov	r0, r7
    1d78:	bl	13a8 <flatcc_verify_vector_field>
    1d7c:	b	1e20 <flatcc_verify_table_as_nested_root+0x184>
    1d80:	bic	r1, sl, #16711680	; 0xff0000
    1d84:	bic	r1, r1, #-16777216	; 0xff000000
    1d88:	mov	r0, r7
    1d8c:	bl	684 <get_field_ptr>
    1d90:	mov	r4, r0
    1d94:	cmp	r4, #0
    1d98:	bne	1da4 <flatcc_verify_table_as_nested_root+0x108>
    1d9c:	mov	r0, #0
    1da0:	b	1e20 <flatcc_verify_table_as_nested_root+0x184>
    1da4:	mov	r1, #0
    1da8:	mov	r0, r4
    1dac:	bl	378 <read_uoffset>
    1db0:	add	r4, r4, r0
    1db4:	mov	r1, #0
    1db8:	mov	r0, r4
    1dbc:	bl	378 <read_uoffset>
    1dc0:	mov	r5, r0
    1dc4:	add	r4, r4, #4
    1dc8:	mov	r2, r9
    1dcc:	mov	r1, r5
    1dd0:	mov	r0, r4
    1dd4:	bl	16ec <flatcc_verify_buffer_header>
    1dd8:	cmp	r0, #0
    1ddc:	beq	1df4 <flatcc_verify_table_as_nested_root+0x158>
    1de0:	mov	r2, r9
    1de4:	mov	r1, r5
    1de8:	mov	r0, r4
    1dec:	bl	16ec <flatcc_verify_buffer_header>
    1df0:	b	1e20 <flatcc_verify_table_as_nested_root+0x184>
    1df4:	mov	r1, #0
    1df8:	mov	r0, r4
    1dfc:	bl	378 <read_uoffset>
    1e00:	mov	r3, r0
    1e04:	mov	r2, #0
    1e08:	ldr	ip, [r7, #8]
    1e0c:	str	r8, [sp, #4]
    1e10:	str	ip, [sp]
    1e14:	mov	r1, r5
    1e18:	mov	r0, r4
    1e1c:	bl	c94 <verify_table>
    1e20:	ldr	r4, [sp, #16]
    1e24:	ldr	r5, [sp, #20]
    1e28:	ldr	r6, [sp, #24]
    1e2c:	ldr	r7, [sp, #28]
    1e30:	ldr	r8, [sp, #32]
    1e34:	ldr	r9, [sp, #36]	; 0x24
    1e38:	ldr	sl, [sp, #40]	; 0x28
    1e3c:	ldr	fp, [sp, #44]	; 0x2c
    1e40:	ldr	lr, [sp, #12]
    1e44:	add	sp, sp, #48	; 0x30
    1e48:	bx	lr

00001e4c <flatcc_verify_union_field>:
    1e4c:	mov	ip, sp
    1e50:	sub	sp, sp, #72	; 0x48
    1e54:	str	ip, [sp, #4]
    1e58:	str	lr, [sp, #8]
    1e5c:	str	r4, [sp, #16]
    1e60:	str	r5, [sp, #20]
    1e64:	str	r6, [sp, #24]
    1e68:	str	r7, [sp, #28]
    1e6c:	str	r8, [sp, #32]
    1e70:	mov	r5, r3
    1e74:	mov	r6, r2
    1e78:	mov	r7, r1
    1e7c:	mov	r4, r0
    1e80:	sub	r2, r7, #1
    1e84:	bic	r1, r2, #16711680	; 0xff0000
    1e88:	bic	r1, r1, #-16777216	; 0xff000000
    1e8c:	mov	r0, r4
    1e90:	bl	63c <read_vt_entry>
    1e94:	bic	r3, r0, #16711680	; 0xff0000
    1e98:	bic	r3, r3, #-16777216	; 0xff000000
    1e9c:	bic	r8, r3, #16711680	; 0xff0000
    1ea0:	bic	r8, r8, #-16777216	; 0xff000000
    1ea4:	cmp	r3, #0
    1ea8:	bne	1f04 <flatcc_verify_union_field+0xb8>
    1eac:	bic	r1, r7, #16711680	; 0xff0000
    1eb0:	bic	r1, r1, #-16777216	; 0xff000000
    1eb4:	mov	r0, r4
    1eb8:	bl	63c <read_vt_entry>
    1ebc:	bic	r2, r0, #16711680	; 0xff0000
    1ec0:	bic	r2, r2, #-16777216	; 0xff000000
    1ec4:	cmp	r2, #0
    1ec8:	moveq	r0, #1
    1ecc:	movne	r0, #0
    1ed0:	cmp	r0, #0
    1ed4:	bne	1ee0 <flatcc_verify_union_field+0x94>
    1ed8:	mov	r0, #23
    1edc:	b	2048 <flatcc_verify_union_field+0x1fc>
    1ee0:	cmp	r6, #0
    1ee4:	moveq	r0, #1
    1ee8:	movne	r0, #0
    1eec:	cmp	r0, #0
    1ef0:	bne	1efc <flatcc_verify_union_field+0xb0>
    1ef4:	mov	r0, #21
    1ef8:	b	2048 <flatcc_verify_union_field+0x1fc>
    1efc:	mov	r0, #0
    1f00:	b	2048 <flatcc_verify_union_field+0x1fc>
    1f04:	sub	r1, r7, #1
    1f08:	bic	r1, r1, #16711680	; 0xff0000
    1f0c:	bic	r1, r1, #-16777216	; 0xff000000
    1f10:	mov	r2, #0
    1f14:	mov	r3, #1
    1f18:	mov	r0, #1
    1f1c:	str	r0, [sp]
    1f20:	mov	r0, r4
    1f24:	bl	6e4 <verify_field>
    1f28:	cmp	r0, #0
    1f2c:	beq	1f58 <flatcc_verify_union_field+0x10c>
    1f30:	sub	r3, r7, #1
    1f34:	bic	r1, r3, #16711680	; 0xff0000
    1f38:	bic	r1, r1, #-16777216	; 0xff000000
    1f3c:	mov	r2, #0
    1f40:	mov	r3, #1
    1f44:	mov	ip, #1
    1f48:	str	ip, [sp]
    1f4c:	mov	r0, r4
    1f50:	bl	6e4 <verify_field>
    1f54:	b	2048 <flatcc_verify_union_field+0x1fc>
    1f58:	bic	r1, r7, #16711680	; 0xff0000
    1f5c:	bic	r1, r1, #-16777216	; 0xff000000
    1f60:	mov	r0, r4
    1f64:	bl	63c <read_vt_entry>
    1f68:	bic	r3, r0, #16711680	; 0xff0000
    1f6c:	bic	r3, r3, #-16777216	; 0xff000000
    1f70:	ldr	r2, [r4]
    1f74:	ldr	r0, [r4, #16]
    1f78:	add	ip, r2, r0
    1f7c:	add	r8, ip, r8
    1f80:	ldrb	r1, [r8]
    1f84:	cmp	r1, #0
    1f88:	bne	1f9c <flatcc_verify_union_field+0x150>
    1f8c:	cmp	r3, #0
    1f90:	moveq	r0, #1
    1f94:	movne	r0, #0
    1f98:	b	1fa0 <flatcc_verify_union_field+0x154>
    1f9c:	mov	r0, #1
    1fa0:	cmp	r0, #0
    1fa4:	bne	1fb0 <flatcc_verify_union_field+0x164>
    1fa8:	mov	r0, #24
    1fac:	b	2048 <flatcc_verify_union_field+0x1fc>
    1fb0:	ldrb	r2, [r8]
    1fb4:	cmp	r2, #0
    1fb8:	bne	1fc4 <flatcc_verify_union_field+0x178>
    1fbc:	mov	r0, #0
    1fc0:	b	2048 <flatcc_verify_union_field+0x1fc>
    1fc4:	bic	r1, r7, #16711680	; 0xff0000
    1fc8:	bic	r1, r1, #-16777216	; 0xff000000
    1fcc:	add	r3, sp, #40	; 0x28
    1fd0:	mov	r2, r6
    1fd4:	mov	r0, r4
    1fd8:	bl	864 <get_offset_field>
    1fdc:	cmp	r0, #0
    1fe0:	bne	1ff8 <flatcc_verify_union_field+0x1ac>
    1fe4:	ldr	r1, [sp, #40]	; 0x28
    1fe8:	cmp	r1, #0
    1fec:	moveq	r2, #1
    1ff0:	movne	r2, #0
    1ff4:	b	1ffc <flatcc_verify_union_field+0x1b0>
    1ff8:	mov	r2, #1
    1ffc:	cmp	r2, #0
    2000:	bne	2048 <flatcc_verify_union_field+0x1fc>
    2004:	ldr	r2, [r4]
    2008:	str	r2, [sp, #48]	; 0x30
    200c:	ldr	ip, [r4, #4]
    2010:	str	ip, [sp, #52]	; 0x34
    2014:	ldr	r0, [r4, #8]
    2018:	str	r0, [sp, #56]	; 0x38
    201c:	ldr	ip, [sp, #40]	; 0x28
    2020:	str	ip, [sp, #64]	; 0x40
    2024:	ldr	r0, [r4]
    2028:	ldr	r1, [sp, #40]	; 0x28
    202c:	bl	378 <read_uoffset>
    2030:	str	r0, [sp, #68]	; 0x44
    2034:	ldrb	r1, [r8]
    2038:	and	ip, r1, #255	; 0xff
    203c:	strb	ip, [sp, #60]	; 0x3c
    2040:	add	r0, sp, #48	; 0x30
    2044:	blx	r5
    2048:	ldr	r4, [sp, #16]
    204c:	ldr	r5, [sp, #20]
    2050:	ldr	r6, [sp, #24]
    2054:	ldr	r7, [sp, #28]
    2058:	ldr	r8, [sp, #32]
    205c:	ldr	lr, [sp, #8]
    2060:	add	sp, sp, #72	; 0x48
    2064:	bx	lr

00002068 <flatcc_verify_union_vector_field>:
    2068:	mov	ip, sp
    206c:	sub	sp, sp, #64	; 0x40
    2070:	str	ip, [sp, #16]
    2074:	str	lr, [sp, #20]
    2078:	str	r4, [sp, #24]
    207c:	str	r5, [sp, #28]
    2080:	str	r6, [sp, #32]
    2084:	str	r7, [sp, #36]	; 0x24
    2088:	str	r8, [sp, #40]	; 0x28
    208c:	str	r9, [sp, #44]	; 0x2c
    2090:	str	sl, [sp, #48]	; 0x30
    2094:	mov	r6, r3
    2098:	mov	r7, r2
    209c:	mov	r8, r1
    20a0:	mov	r5, r0
    20a4:	sub	r3, r8, #1
    20a8:	bic	r1, r3, #16711680	; 0xff0000
    20ac:	bic	r1, r1, #-16777216	; 0xff000000
    20b0:	mov	r0, r5
    20b4:	bl	63c <read_vt_entry>
    20b8:	bic	r0, r0, #16711680	; 0xff0000
    20bc:	bic	r0, r0, #-16777216	; 0xff000000
    20c0:	cmp	r0, #0
    20c4:	bne	2104 <flatcc_verify_union_vector_field+0x9c>
    20c8:	bic	r1, r8, #16711680	; 0xff0000
    20cc:	bic	r1, r1, #-16777216	; 0xff000000
    20d0:	mov	r0, r5
    20d4:	bl	63c <read_vt_entry>
    20d8:	bic	ip, r0, #16711680	; 0xff0000
    20dc:	bic	ip, ip, #-16777216	; 0xff000000
    20e0:	cmp	ip, #0
    20e4:	bne	2104 <flatcc_verify_union_vector_field+0x9c>
    20e8:	cmp	r7, #0
    20ec:	moveq	r1, #1
    20f0:	movne	r1, #0
    20f4:	cmp	r1, #0
    20f8:	bne	2104 <flatcc_verify_union_vector_field+0x9c>
    20fc:	mov	r0, #22
    2100:	b	2270 <flatcc_verify_union_vector_field+0x208>
    2104:	mov	r3, #0
    2108:	cmp	r3, #0
    210c:	bne	2118 <flatcc_verify_union_vector_field+0xb0>
    2110:	mov	r1, #1
    2114:	b	211c <flatcc_verify_union_vector_field+0xb4>
    2118:	mov	r1, #1
    211c:	sub	r2, r8, #1
    2120:	bic	r9, r2, #16711680	; 0xff0000
    2124:	bic	r9, r9, #-16777216	; 0xff000000
    2128:	mov	r4, #1
    212c:	mov	sl, #1
    2130:	mvn	r0, #0
    2134:	bl	0 <__aeabi_uidiv>
    2138:	str	r0, [sp, #4]
    213c:	str	sl, [sp]
    2140:	mov	r3, r4
    2144:	mov	r2, r7
    2148:	mov	r1, r9
    214c:	mov	r0, r5
    2150:	bl	13a8 <flatcc_verify_vector_field>
    2154:	cmp	r0, #0
    2158:	beq	21b0 <flatcc_verify_union_vector_field+0x148>
    215c:	mov	r0, #0
    2160:	cmp	r0, #0
    2164:	bne	2170 <flatcc_verify_union_vector_field+0x108>
    2168:	mov	r1, #1
    216c:	b	2174 <flatcc_verify_union_vector_field+0x10c>
    2170:	mov	r1, #1
    2174:	sub	r2, r8, #1
    2178:	bic	r6, r2, #16711680	; 0xff0000
    217c:	bic	r6, r6, #-16777216	; 0xff000000
    2180:	mov	r4, #1
    2184:	mov	r8, #1
    2188:	mvn	r0, #0
    218c:	bl	0 <__aeabi_uidiv>
    2190:	str	r0, [sp, #4]
    2194:	str	r8, [sp]
    2198:	mov	r3, r4
    219c:	mov	r2, r7
    21a0:	mov	r1, r6
    21a4:	mov	r0, r5
    21a8:	bl	13a8 <flatcc_verify_vector_field>
    21ac:	b	2270 <flatcc_verify_union_vector_field+0x208>
    21b0:	sub	r2, r8, #1
    21b4:	bic	r1, r2, #16711680	; 0xff0000
    21b8:	bic	r1, r1, #-16777216	; 0xff000000
    21bc:	mov	r0, r5
    21c0:	bl	684 <get_field_ptr>
    21c4:	mov	r4, r0
    21c8:	cmp	r0, #0
    21cc:	bne	21d8 <flatcc_verify_union_vector_field+0x170>
    21d0:	mov	r0, #0
    21d4:	b	2270 <flatcc_verify_union_vector_field+0x208>
    21d8:	mov	r1, #0
    21dc:	mov	r0, r4
    21e0:	bl	378 <read_uoffset>
    21e4:	add	r9, r4, r0
    21e8:	mov	r1, #0
    21ec:	mov	r0, r9
    21f0:	bl	378 <read_uoffset>
    21f4:	mov	r4, r0
    21f8:	add	r9, r9, #4
    21fc:	bic	r1, r8, #16711680	; 0xff0000
    2200:	bic	r1, r1, #-16777216	; 0xff000000
    2204:	add	r3, sp, #56	; 0x38
    2208:	mov	r2, r7
    220c:	mov	r0, r5
    2210:	bl	864 <get_offset_field>
    2214:	cmp	r0, #0
    2218:	bne	2230 <flatcc_verify_union_vector_field+0x1c8>
    221c:	ldr	ip, [sp, #56]	; 0x38
    2220:	cmp	ip, #0
    2224:	moveq	r1, #1
    2228:	movne	r1, #0
    222c:	b	2234 <flatcc_verify_union_vector_field+0x1cc>
    2230:	mov	r1, #1
    2234:	cmp	r1, #0
    2238:	bne	2270 <flatcc_verify_union_vector_field+0x208>
    223c:	ldr	r0, [r5]
    2240:	ldr	r1, [sp, #56]	; 0x38
    2244:	bl	378 <read_uoffset>
    2248:	mov	r3, r0
    224c:	ldr	r0, [r5]
    2250:	ldr	r1, [r5, #4]
    2254:	ldr	r2, [sp, #56]	; 0x38
    2258:	ldr	r5, [r5, #8]
    225c:	str	r6, [sp, #12]
    2260:	str	r5, [sp, #8]
    2264:	str	r9, [sp, #4]
    2268:	str	r4, [sp]
    226c:	bl	1050 <verify_union_vector>
    2270:	ldr	r4, [sp, #24]
    2274:	ldr	r5, [sp, #28]
    2278:	ldr	r6, [sp, #32]
    227c:	ldr	r7, [sp, #36]	; 0x24
    2280:	ldr	r8, [sp, #40]	; 0x28
    2284:	ldr	r9, [sp, #44]	; 0x2c
    2288:	ldr	sl, [sp, #48]	; 0x30
    228c:	ldr	lr, [sp, #20]
    2290:	add	sp, sp, #64	; 0x40
    2294:	bx	lr
