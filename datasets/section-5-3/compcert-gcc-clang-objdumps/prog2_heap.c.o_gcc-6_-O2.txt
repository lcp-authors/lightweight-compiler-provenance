
../compcert-repos/prog2/CMakeFiles/MT2E1-2.dir/Extras/Miniteste2-Exemplo1/prob2/heap.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <heap_nova>:
   0:	push	{r4, r5, r6, lr}
   4:	mov	r5, r0
   8:	mov	r0, #12
   c:	bl	0 <malloc>
  10:	subs	r4, r0, #0
  14:	beq	40 <heap_nova+0x40>
  18:	mov	r3, #0
  1c:	str	r5, [r4, #4]
  20:	mov	r0, r5
  24:	str	r3, [r4]
  28:	mov	r1, #4
  2c:	bl	0 <calloc>
  30:	cmp	r0, #0
  34:	mov	r5, r0
  38:	str	r0, [r4, #8]
  3c:	beq	48 <heap_nova+0x48>
  40:	mov	r0, r4
  44:	pop	{r4, r5, r6, pc}
  48:	mov	r0, r4
  4c:	bl	0 <free>
  50:	mov	r4, r5
  54:	b	40 <heap_nova+0x40>

00000058 <heap_apaga>:
  58:	push	{r4, r5, r6, lr}
  5c:	subs	r5, r0, #0
  60:	popeq	{r4, r5, r6, pc}
  64:	ldr	r3, [r5]
  68:	cmp	r3, #0
  6c:	ldrle	r0, [r5, #8]
  70:	ble	b0 <heap_apaga+0x58>
  74:	mov	r4, #0
  78:	ldr	r0, [r5, #8]
  7c:	mov	r6, r4
  80:	ldr	r3, [r0, r4, lsl #2]
  84:	ldr	r0, [r3, #4]
  88:	bl	0 <free>
  8c:	ldr	r3, [r5, #8]
  90:	ldr	r0, [r3, r4, lsl #2]
  94:	bl	0 <free>
  98:	ldr	r0, [r5, #8]
  9c:	ldr	r3, [r5]
  a0:	str	r6, [r0, r4, lsl #2]
  a4:	add	r4, r4, #1
  a8:	cmp	r3, r4
  ac:	bgt	80 <heap_apaga+0x28>
  b0:	bl	0 <free>
  b4:	mov	r0, r5
  b8:	pop	{r4, r5, r6, lr}
  bc:	b	0 <free>

000000c0 <elemento_cria>:
  c0:	push	{r4, r5, r6, r7, r8, lr}
  c4:	mov	r8, r0
  c8:	mov	r0, #8
  cc:	mov	r5, r1
  d0:	bl	0 <malloc>
  d4:	subs	r4, r0, #0
  d8:	beq	114 <elemento_cria+0x54>
  dc:	mov	r0, r5
  e0:	bl	0 <strlen>
  e4:	mov	r1, #1
  e8:	add	r7, r0, r1
  ec:	mov	r0, r7
  f0:	bl	0 <calloc>
  f4:	cmp	r0, #0
  f8:	mov	r6, r0
  fc:	str	r0, [r4, #4]
 100:	beq	11c <elemento_cria+0x5c>
 104:	mov	r2, r7
 108:	mov	r1, r5
 10c:	bl	0 <memcpy>
 110:	str	r8, [r4]
 114:	mov	r0, r4
 118:	pop	{r4, r5, r6, r7, r8, pc}
 11c:	mov	r0, r4
 120:	bl	0 <free>
 124:	mov	r4, r6
 128:	b	114 <elemento_cria+0x54>

0000012c <heap_insere>:
 12c:	ldr	ip, [r0]
 130:	ldr	r3, [r0, #4]
 134:	cmp	ip, r3
 138:	blt	144 <heap_insere+0x18>
 13c:	mov	r0, #0
 140:	bx	lr
 144:	push	{r4, r5, r6, lr}
 148:	mov	r5, r0
 14c:	mov	r0, r2
 150:	bl	c0 <elemento_cria>
 154:	subs	ip, r0, #0
 158:	beq	1f0 <heap_insere+0xc4>
 15c:	ldr	r3, [r5]
 160:	ldr	r1, [r5, #8]
 164:	add	r2, r3, #1
 168:	cmp	r3, #0
 16c:	str	ip, [r1, r3, lsl #2]
 170:	add	r4, r1, r3, lsl #2
 174:	str	r2, [r5]
 178:	beq	1e8 <heap_insere+0xbc>
 17c:	sub	r3, r3, #1
 180:	add	r3, r3, r3, lsr #31
 184:	asr	r3, r3, #1
 188:	ldr	lr, [r1, r3, lsl #2]
 18c:	lsl	r0, r3, #2
 190:	cmp	lr, #0
 194:	add	r5, r1, r0
 198:	beq	1e8 <heap_insere+0xbc>
 19c:	ldr	r6, [ip]
 1a0:	ldr	r2, [lr]
 1a4:	cmp	r6, r2
 1a8:	bge	1e8 <heap_insere+0xbc>
 1ac:	sub	r2, r3, #1
 1b0:	cmp	r3, #0
 1b4:	add	r2, r2, r2, lsr #31
 1b8:	str	ip, [r5]
 1bc:	asr	r3, r2, #1
 1c0:	str	lr, [r4]
 1c4:	add	r4, r1, r0
 1c8:	beq	1e8 <heap_insere+0xbc>
 1cc:	ldr	ip, [r1, r0]
 1d0:	ldr	lr, [r1, r3, lsl #2]
 1d4:	lsl	r0, r3, #2
 1d8:	cmp	lr, #0
 1dc:	cmpne	ip, #0
 1e0:	add	r5, r1, r0
 1e4:	bne	19c <heap_insere+0x70>
 1e8:	mov	r0, #1
 1ec:	pop	{r4, r5, r6, pc}
 1f0:	mov	r0, #0
 1f4:	pop	{r4, r5, r6, pc}

000001f8 <heap_remove>:
 1f8:	push	{r4, r5, r6, r7, r8, lr}
 1fc:	subs	r6, r0, #0
 200:	beq	2e8 <heap_remove+0xf0>
 204:	ldr	r3, [r6]
 208:	cmp	r3, #0
 20c:	ble	2e8 <heap_remove+0xf0>
 210:	ldr	r3, [r6, #8]
 214:	ldr	r3, [r3]
 218:	mov	r0, r3
 21c:	ldr	r4, [r3, #4]
 220:	bl	0 <free>
 224:	ldr	r5, [r6]
 228:	ldr	r1, [r6, #8]
 22c:	sub	r5, r5, #1
 230:	mov	r3, #0
 234:	ldr	r2, [r1, r5, lsl #2]
 238:	cmp	r5, #1
 23c:	str	r5, [r6]
 240:	str	r2, [r1]
 244:	str	r3, [r1, r5, lsl #2]
 248:	ble	2e0 <heap_remove+0xe8>
 24c:	mov	r0, #1
 250:	b	274 <heap_remove+0x7c>
 254:	ldr	r8, [ip]
 258:	ldr	r7, [lr]
 25c:	cmp	r8, r7
 260:	bge	2e0 <heap_remove+0xe8>
 264:	cmp	r5, r0
 268:	str	lr, [r1, r6]
 26c:	str	ip, [r1, r2]
 270:	ble	2e0 <heap_remove+0xe8>
 274:	add	ip, r3, #1
 278:	mov	r2, r3
 27c:	lsl	lr, ip, #1
 280:	cmp	r5, lr
 284:	add	r6, r1, ip, lsl #3
 288:	ble	2b8 <heap_remove+0xc0>
 28c:	ldr	r7, [r1, ip, lsl #3]
 290:	ldr	ip, [r6, #-4]
 294:	mov	r2, r3
 298:	cmp	r7, #0
 29c:	cmpne	ip, #0
 2a0:	beq	2b8 <heap_remove+0xc0>
 2a4:	ldr	r6, [r7]
 2a8:	ldr	ip, [ip]
 2ac:	cmp	r6, ip
 2b0:	movlt	r3, lr
 2b4:	blt	2bc <heap_remove+0xc4>
 2b8:	mov	r3, r0
 2bc:	ldr	lr, [r1, r2, lsl #2]
 2c0:	ldr	ip, [r1, r3, lsl #2]
 2c4:	lsl	r0, r3, #1
 2c8:	cmp	lr, #0
 2cc:	cmpne	ip, #0
 2d0:	add	r0, r0, #1
 2d4:	lsl	r2, r2, #2
 2d8:	lsl	r6, r3, #2
 2dc:	bne	254 <heap_remove+0x5c>
 2e0:	mov	r0, r4
 2e4:	pop	{r4, r5, r6, r7, r8, pc}
 2e8:	mov	r4, #0
 2ec:	mov	r0, r4
 2f0:	pop	{r4, r5, r6, r7, r8, pc}

000002f4 <mostraHeap>:
 2f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 2f8:	mov	r8, r0
 2fc:	ldr	r6, [pc, #196]	; 3c8 <mostraHeap+0xd4>
 300:	ldr	r9, [pc, #196]	; 3cc <mostraHeap+0xd8>
 304:	mov	r7, r1
 308:	ldr	r3, [r8]
 30c:	cmp	r3, r7
 310:	bgt	320 <mostraHeap+0x2c>
 314:	mov	r0, #10
 318:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 31c:	b	0 <putchar>
 320:	cmp	r7, #0
 324:	ble	38c <mostraHeap+0x98>
 328:	mov	r4, r7
 32c:	mov	r5, #0
 330:	sub	r4, r4, #1
 334:	add	r5, r5, #1
 338:	asrs	r4, r4, #1
 33c:	bne	330 <mostraHeap+0x3c>
 340:	lsl	r1, r7, #1
 344:	add	r1, r1, #1
 348:	mov	r0, r8
 34c:	bl	2f4 <mostraHeap>
 350:	add	r5, r5, r5, lsl #1
 354:	add	r4, r4, #1
 358:	mov	r0, r6
 35c:	bl	0 <printf>
 360:	cmp	r4, r5
 364:	bne	354 <mostraHeap+0x60>
 368:	ldr	r3, [r8, #8]
 36c:	mov	r0, r9
 370:	ldr	r3, [r3, r7, lsl #2]
 374:	add	r7, r7, #1
 378:	ldr	r2, [r3]
 37c:	ldr	r1, [r3, #4]
 380:	bl	0 <printf>
 384:	lsl	r7, r7, #1
 388:	b	308 <mostraHeap+0x14>
 38c:	lsl	r1, r7, #1
 390:	mov	r0, r8
 394:	add	r1, r1, #1
 398:	bl	2f4 <mostraHeap>
 39c:	ldr	r3, [r8, #8]
 3a0:	ldr	r0, [pc, #36]	; 3cc <mostraHeap+0xd8>
 3a4:	ldr	r3, [r3, r7, lsl #2]
 3a8:	ldr	r1, [r3, #4]
 3ac:	ldr	r2, [r3]
 3b0:	bl	0 <printf>
 3b4:	add	r1, r7, #1
 3b8:	mov	r0, r8
 3bc:	lsl	r1, r1, #1
 3c0:	bl	2f4 <mostraHeap>
 3c4:	b	314 <mostraHeap+0x20>
 3c8:	.word	0x00000000
 3cc:	.word	0x00000008

000003d0 <menor_que>:
 3d0:	cmp	r1, #0
 3d4:	cmpne	r0, #0
 3d8:	beq	3f4 <menor_que+0x24>
 3dc:	ldr	r0, [r0]
 3e0:	ldr	r3, [r1]
 3e4:	cmp	r0, r3
 3e8:	movge	r0, #0
 3ec:	movlt	r0, #1
 3f0:	bx	lr
 3f4:	mov	r0, #0
 3f8:	bx	lr
