
../repos/prog2/CMakeFiles/3.2.dir/Aula03_Vetores_e_algoritmos_de_pesquisa_e_ordenacao/02.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <comp_int_asc>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	ldr	r2, [r0]
  14:	ldr	r3, [r1]
  18:	cmp	r3, r2
  1c:	ble	28 <comp_int_asc+0x28>
  20:	mvn	r0, #0
  24:	b	3c <comp_int_asc+0x3c>
  28:	cmp	r2, r3
  2c:	ble	38 <comp_int_asc+0x38>
  30:	mov	r0, #1
  34:	b	3c <comp_int_asc+0x3c>
  38:	mov	r0, #0
  3c:	ldr	lr, [sp, #4]
  40:	add	sp, sp, #8
  44:	bx	lr

00000048 <get_elem>:
  48:	mov	ip, sp
  4c:	sub	sp, sp, #8
  50:	str	ip, [sp]
  54:	str	lr, [sp, #4]
  58:	mla	r0, r1, r2, r0
  5c:	ldr	lr, [sp, #4]
  60:	add	sp, sp, #8
  64:	bx	lr

00000068 <swap>:
  68:	mov	ip, sp
  6c:	sub	sp, sp, #16
  70:	str	ip, [sp]
  74:	str	lr, [sp, #4]
  78:	str	r4, [sp, #8]
  7c:	mov	ip, #0
  80:	cmp	ip, r2
  84:	bge	ac <swap+0x44>
  88:	ldrb	r3, [r0, ip]
  8c:	and	r4, r3, #255	; 0xff
  90:	ldrb	r3, [r1, ip]
  94:	and	r3, r3, #255	; 0xff
  98:	strb	r3, [r0, ip]
  9c:	and	r3, r4, #255	; 0xff
  a0:	strb	r3, [r1, ip]
  a4:	add	ip, ip, #1
  a8:	b	80 <swap+0x18>
  ac:	ldr	r4, [sp, #8]
  b0:	ldr	lr, [sp, #4]
  b4:	add	sp, sp, #16
  b8:	bx	lr

000000bc <sort>:
  bc:	mov	ip, sp
  c0:	sub	sp, sp, #48	; 0x30
  c4:	str	ip, [sp]
  c8:	str	lr, [sp, #4]
  cc:	str	r4, [sp, #12]
  d0:	str	r5, [sp, #16]
  d4:	str	r6, [sp, #20]
  d8:	str	r7, [sp, #24]
  dc:	str	r8, [sp, #28]
  e0:	str	r9, [sp, #32]
  e4:	str	sl, [sp, #36]	; 0x24
  e8:	str	fp, [sp, #40]	; 0x28
  ec:	mov	r7, r3
  f0:	mov	r6, r2
  f4:	mov	r5, r1
  f8:	str	r0, [sp, #8]
  fc:	mov	sl, #0
 100:	cmp	sl, r5
 104:	bge	178 <sort+0xbc>
 108:	mov	r2, r6
 10c:	mov	r1, sl
 110:	ldr	r0, [sp, #8]
 114:	bl	48 <get_elem>
 118:	mov	fp, r0
 11c:	mov	r4, fp
 120:	add	r8, sl, #1
 124:	cmp	r8, r5
 128:	bge	160 <sort+0xa4>
 12c:	mov	r2, r6
 130:	mov	r1, r8
 134:	ldr	r0, [sp, #8]
 138:	bl	48 <get_elem>
 13c:	mov	r9, r0
 140:	mov	r1, r4
 144:	mov	r0, r9
 148:	blx	r7
 14c:	cmp	r0, #0
 150:	bge	158 <sort+0x9c>
 154:	mov	r4, r9
 158:	add	r8, r8, #1
 15c:	b	124 <sort+0x68>
 160:	mov	r2, r6
 164:	mov	r1, fp
 168:	mov	r0, r4
 16c:	bl	68 <swap>
 170:	add	sl, sl, #1
 174:	b	100 <sort+0x44>
 178:	ldr	r4, [sp, #12]
 17c:	ldr	r5, [sp, #16]
 180:	ldr	r6, [sp, #20]
 184:	ldr	r7, [sp, #24]
 188:	ldr	r8, [sp, #28]
 18c:	ldr	r9, [sp, #32]
 190:	ldr	sl, [sp, #36]	; 0x24
 194:	ldr	fp, [sp, #40]	; 0x28
 198:	ldr	lr, [sp, #4]
 19c:	add	sp, sp, #48	; 0x30
 1a0:	bx	lr

000001a4 <linear_search>:
 1a4:	mov	ip, sp
 1a8:	sub	sp, sp, #32
 1ac:	str	ip, [sp]
 1b0:	str	lr, [sp, #4]
 1b4:	str	r4, [sp, #8]
 1b8:	str	r5, [sp, #12]
 1bc:	str	r6, [sp, #16]
 1c0:	str	r7, [sp, #20]
 1c4:	str	r8, [sp, #24]
 1c8:	str	r9, [sp, #28]
 1cc:	ldr	r9, [ip]
 1d0:	mov	r5, r3
 1d4:	mov	r8, r2
 1d8:	mov	r7, r1
 1dc:	mov	r4, r0
 1e0:	mov	r6, #0
 1e4:	cmp	r6, r8
 1e8:	bge	228 <linear_search+0x84>
 1ec:	mov	r2, r8
 1f0:	mov	r1, r6
 1f4:	mov	r0, r7
 1f8:	bl	48 <get_elem>
 1fc:	mov	r1, r4
 200:	blx	r9
 204:	cmp	r0, #0
 208:	bne	220 <linear_search+0x7c>
 20c:	mov	r2, r5
 210:	mov	r1, r6
 214:	mov	r0, r7
 218:	bl	48 <get_elem>
 21c:	b	22c <linear_search+0x88>
 220:	add	r6, r6, #1
 224:	b	1e4 <linear_search+0x40>
 228:	mov	r0, #0
 22c:	ldr	r4, [sp, #8]
 230:	ldr	r5, [sp, #12]
 234:	ldr	r6, [sp, #16]
 238:	ldr	r7, [sp, #20]
 23c:	ldr	r8, [sp, #24]
 240:	ldr	r9, [sp, #28]
 244:	ldr	lr, [sp, #4]
 248:	add	sp, sp, #32
 24c:	bx	lr

00000250 <binary_search>:
 250:	mov	ip, sp
 254:	sub	sp, sp, #40	; 0x28
 258:	str	ip, [sp]
 25c:	str	lr, [sp, #4]
 260:	str	r4, [sp, #8]
 264:	str	r5, [sp, #12]
 268:	str	r6, [sp, #16]
 26c:	str	r7, [sp, #20]
 270:	str	r8, [sp, #24]
 274:	str	r9, [sp, #28]
 278:	str	sl, [sp, #32]
 27c:	ldr	r8, [ip]
 280:	mov	r4, r3
 284:	mov	r6, r1
 288:	mov	r7, r0
 28c:	mov	r9, #0
 290:	sub	sl, r2, #1
 294:	cmp	r9, sl
 298:	bgt	318 <binary_search+0xc8>
 29c:	add	r3, r9, sl
 2a0:	asr	lr, r3, #31
 2a4:	add	lr, r3, lr, lsr #31
 2a8:	asr	r5, lr, #1
 2ac:	mov	r2, r4
 2b0:	mov	r1, r5
 2b4:	mov	r0, r6
 2b8:	bl	48 <get_elem>
 2bc:	mov	r1, r0
 2c0:	mov	r0, r7
 2c4:	blx	r8
 2c8:	cmp	r0, #0
 2cc:	bne	304 <binary_search+0xb4>
 2d0:	mov	r2, r4
 2d4:	mov	r1, r5
 2d8:	mov	r0, r6
 2dc:	bl	48 <get_elem>
 2e0:	mov	r1, r0
 2e4:	mov	r0, r7
 2e8:	blx	r8
 2ec:	cmn	r0, #1
 2f0:	beq	2fc <binary_search+0xac>
 2f4:	add	r9, r5, #1
 2f8:	b	294 <binary_search+0x44>
 2fc:	sub	sl, r5, #1
 300:	b	294 <binary_search+0x44>
 304:	mov	r2, r4
 308:	mov	r1, r5
 30c:	mov	r0, r6
 310:	bl	48 <get_elem>
 314:	b	31c <binary_search+0xcc>
 318:	mov	r0, #0
 31c:	ldr	r4, [sp, #8]
 320:	ldr	r5, [sp, #12]
 324:	ldr	r6, [sp, #16]
 328:	ldr	r7, [sp, #20]
 32c:	ldr	r8, [sp, #24]
 330:	ldr	r9, [sp, #28]
 334:	ldr	sl, [sp, #32]
 338:	ldr	lr, [sp, #4]
 33c:	add	sp, sp, #40	; 0x28
 340:	bx	lr

00000344 <insertion_sort>:
 344:	mov	ip, sp
 348:	sub	sp, sp, #40	; 0x28
 34c:	str	ip, [sp]
 350:	str	lr, [sp, #4]
 354:	str	r4, [sp, #8]
 358:	str	r5, [sp, #12]
 35c:	str	r6, [sp, #16]
 360:	str	r7, [sp, #20]
 364:	str	r8, [sp, #24]
 368:	str	r9, [sp, #28]
 36c:	str	sl, [sp, #32]
 370:	mov	r9, r3
 374:	mov	r5, r2
 378:	mov	sl, r1
 37c:	mov	r7, r0
 380:	mov	r8, #1
 384:	cmp	r8, sl
 388:	bge	428 <insertion_sort+0xe4>
 38c:	mov	r6, r8
 390:	cmp	r6, #0
 394:	ble	3d8 <insertion_sort+0x94>
 398:	mov	r2, r5
 39c:	mov	r1, r6
 3a0:	mov	r0, r7
 3a4:	bl	48 <get_elem>
 3a8:	mov	r4, r0
 3ac:	sub	r1, r6, #1
 3b0:	mov	r2, r5
 3b4:	mov	r0, r7
 3b8:	bl	48 <get_elem>
 3bc:	mov	r1, r0
 3c0:	mov	r0, r4
 3c4:	blx	r9
 3c8:	cmn	r0, #1
 3cc:	moveq	r1, #1
 3d0:	movne	r1, #0
 3d4:	b	3dc <insertion_sort+0x98>
 3d8:	mov	r1, #0
 3dc:	cmp	r1, #0
 3e0:	beq	420 <insertion_sort+0xdc>
 3e4:	mov	r2, r5
 3e8:	mov	r1, r6
 3ec:	mov	r0, r7
 3f0:	bl	48 <get_elem>
 3f4:	mov	r4, r0
 3f8:	sub	r1, r6, #1
 3fc:	mov	r2, r5
 400:	mov	r0, r7
 404:	bl	48 <get_elem>
 408:	mov	r2, r5
 40c:	mov	r1, r0
 410:	mov	r0, r4
 414:	bl	68 <swap>
 418:	sub	r6, r6, #1
 41c:	b	390 <insertion_sort+0x4c>
 420:	add	r8, r8, #1
 424:	b	384 <insertion_sort+0x40>
 428:	ldr	r4, [sp, #8]
 42c:	ldr	r5, [sp, #12]
 430:	ldr	r6, [sp, #16]
 434:	ldr	r7, [sp, #20]
 438:	ldr	r8, [sp, #24]
 43c:	ldr	r9, [sp, #28]
 440:	ldr	sl, [sp, #32]
 444:	ldr	lr, [sp, #4]
 448:	add	sp, sp, #40	; 0x28
 44c:	bx	lr

00000450 <comp_char_desc>:
 450:	mov	ip, sp
 454:	sub	sp, sp, #8
 458:	str	ip, [sp]
 45c:	str	lr, [sp, #4]
 460:	ldrb	r2, [r0]
 464:	and	r3, r2, #255	; 0xff
 468:	ldrb	r2, [r1]
 46c:	and	ip, r2, #255	; 0xff
 470:	cmp	r3, ip
 474:	bge	480 <comp_char_desc+0x30>
 478:	mov	r0, #1
 47c:	b	494 <comp_char_desc+0x44>
 480:	cmp	r3, ip
 484:	ble	490 <comp_char_desc+0x40>
 488:	mvn	r0, #0
 48c:	b	494 <comp_char_desc+0x44>
 490:	mov	r0, #0
 494:	ldr	lr, [sp, #4]
 498:	add	sp, sp, #8
 49c:	bx	lr

000004a0 <main>:
 4a0:	mov	ip, sp
 4a4:	sub	sp, sp, #88	; 0x58
 4a8:	str	ip, [sp, #4]
 4ac:	str	lr, [sp, #8]
 4b0:	str	r4, [sp, #16]
 4b4:	mov	r0, #3
 4b8:	str	r0, [sp, #40]	; 0x28
 4bc:	mvn	r0, #1
 4c0:	str	r0, [sp, #44]	; 0x2c
 4c4:	mov	r0, #4
 4c8:	str	r0, [sp, #48]	; 0x30
 4cc:	mov	r0, #5
 4d0:	str	r0, [sp, #52]	; 0x34
 4d4:	mov	r0, #9
 4d8:	str	r0, [sp, #56]	; 0x38
 4dc:	mov	r0, #1
 4e0:	str	r0, [sp, #60]	; 0x3c
 4e4:	add	r0, sp, #64	; 0x40
 4e8:	add	r1, sp, #40	; 0x28
 4ec:	mov	r2, #24
 4f0:	bl	0 <memcpy>
 4f4:	ldr	r0, [pc, #688]	; 7ac <main+0x30c>
 4f8:	bl	0 <puts>
 4fc:	ldr	r0, [pc, #668]	; 7a0 <main+0x300>
 500:	bl	0 <printf>
 504:	mov	r4, #0
 508:	cmp	r4, #6
 50c:	bge	528 <main+0x88>
 510:	ldr	r0, [pc, #656]	; 7a8 <main+0x308>
 514:	add	r3, sp, #64	; 0x40
 518:	ldr	r1, [r3, r4, lsl #2]
 51c:	bl	0 <printf>
 520:	add	r4, r4, #1
 524:	b	508 <main+0x68>
 528:	ldr	r0, [pc, #644]	; 7b4 <main+0x314>
 52c:	bl	0 <puts>
 530:	add	r0, sp, #64	; 0x40
 534:	mov	r1, #6
 538:	mov	r2, #4
 53c:	ldr	r3, [pc, #584]	; 78c <main+0x2ec>
 540:	bl	bc <sort>
 544:	ldr	r0, [pc, #572]	; 788 <main+0x2e8>
 548:	bl	0 <printf>
 54c:	mov	r4, #0
 550:	cmp	r4, #6
 554:	bge	570 <main+0xd0>
 558:	ldr	r0, [pc, #584]	; 7a8 <main+0x308>
 55c:	add	r3, sp, #64	; 0x40
 560:	ldr	r1, [r3, r4, lsl #2]
 564:	bl	0 <printf>
 568:	add	r4, r4, #1
 56c:	b	550 <main+0xb0>
 570:	ldr	r0, [pc, #572]	; 7b4 <main+0x314>
 574:	bl	0 <puts>
 578:	add	r0, sp, #64	; 0x40
 57c:	add	r1, sp, #40	; 0x28
 580:	mov	r2, #24
 584:	bl	0 <memcpy>
 588:	ldr	r0, [pc, #544]	; 7b0 <main+0x310>
 58c:	bl	0 <puts>
 590:	mov	r0, #4
 594:	str	r0, [sp, #24]
 598:	add	r0, sp, #24
 59c:	add	r1, sp, #64	; 0x40
 5a0:	mov	r2, #6
 5a4:	mov	r3, #4
 5a8:	ldr	ip, [pc, #476]	; 78c <main+0x2ec>
 5ac:	str	ip, [sp]
 5b0:	bl	1a4 <linear_search>
 5b4:	mov	r2, r0
 5b8:	cmp	r2, #0
 5bc:	beq	5e4 <main+0x144>
 5c0:	ldr	r0, [pc, #476]	; 7a4 <main+0x304>
 5c4:	ldr	r1, [sp, #24]
 5c8:	add	r3, sp, #64	; 0x40
 5cc:	sub	r2, r2, r3
 5d0:	asr	lr, r2, #31
 5d4:	add	lr, r2, lr, lsr #30
 5d8:	asr	r2, lr, #2
 5dc:	bl	0 <printf>
 5e0:	b	5f0 <main+0x150>
 5e4:	ldr	r0, [pc, #432]	; 79c <main+0x2fc>
 5e8:	ldr	r1, [sp, #24]
 5ec:	bl	0 <printf>
 5f0:	add	r0, sp, #64	; 0x40
 5f4:	add	r1, sp, #40	; 0x28
 5f8:	mov	r2, #24
 5fc:	bl	0 <memcpy>
 600:	add	r0, sp, #64	; 0x40
 604:	mov	r1, #6
 608:	mov	r2, #4
 60c:	ldr	r3, [pc, #376]	; 78c <main+0x2ec>
 610:	bl	bc <sort>
 614:	ldr	r0, [pc, #380]	; 798 <main+0x2f8>
 618:	bl	0 <puts>
 61c:	add	r0, sp, #24
 620:	add	r1, sp, #64	; 0x40
 624:	mov	r2, #6
 628:	mov	r3, #4
 62c:	ldr	ip, [pc, #344]	; 78c <main+0x2ec>
 630:	str	ip, [sp]
 634:	bl	250 <binary_search>
 638:	mov	r2, r0
 63c:	cmp	r2, #0
 640:	beq	668 <main+0x1c8>
 644:	ldr	r0, [pc, #344]	; 7a4 <main+0x304>
 648:	ldr	r1, [sp, #24]
 64c:	add	ip, sp, #64	; 0x40
 650:	sub	r2, r2, ip
 654:	asr	lr, r2, #31
 658:	add	lr, r2, lr, lsr #30
 65c:	asr	r2, lr, #2
 660:	bl	0 <printf>
 664:	b	674 <main+0x1d4>
 668:	ldr	r0, [pc, #300]	; 79c <main+0x2fc>
 66c:	ldr	r1, [sp, #24]
 670:	bl	0 <printf>
 674:	add	r0, sp, #64	; 0x40
 678:	add	r1, sp, #40	; 0x28
 67c:	mov	r2, #24
 680:	bl	0 <memcpy>
 684:	ldr	r0, [pc, #300]	; 7b8 <main+0x318>
 688:	bl	0 <puts>
 68c:	ldr	r0, [pc, #268]	; 7a0 <main+0x300>
 690:	bl	0 <printf>
 694:	mov	r4, #0
 698:	cmp	r4, #6
 69c:	bge	6b8 <main+0x218>
 6a0:	ldr	r0, [pc, #256]	; 7a8 <main+0x308>
 6a4:	add	r1, sp, #64	; 0x40
 6a8:	ldr	r1, [r1, r4, lsl #2]
 6ac:	bl	0 <printf>
 6b0:	add	r4, r4, #1
 6b4:	b	698 <main+0x1f8>
 6b8:	ldr	r0, [pc, #244]	; 7b4 <main+0x314>
 6bc:	bl	0 <puts>
 6c0:	add	r0, sp, #64	; 0x40
 6c4:	mov	r1, #6
 6c8:	mov	r2, #4
 6cc:	ldr	r3, [pc, #184]	; 78c <main+0x2ec>
 6d0:	bl	344 <insertion_sort>
 6d4:	ldr	r0, [pc, #172]	; 788 <main+0x2e8>
 6d8:	bl	0 <printf>
 6dc:	mov	r4, #0
 6e0:	cmp	r4, #6
 6e4:	bge	700 <main+0x260>
 6e8:	ldr	r0, [pc, #184]	; 7a8 <main+0x308>
 6ec:	add	r2, sp, #64	; 0x40
 6f0:	ldr	r1, [r2, r4, lsl #2]
 6f4:	bl	0 <printf>
 6f8:	add	r4, r4, #1
 6fc:	b	6e0 <main+0x240>
 700:	ldr	r0, [pc, #172]	; 7b4 <main+0x314>
 704:	bl	0 <puts>
 708:	ldr	r0, [pc, #128]	; 790 <main+0x2f0>
 70c:	bl	0 <puts>
 710:	mov	r0, #65	; 0x41
 714:	strb	r0, [sp, #28]
 718:	mov	r0, #98	; 0x62
 71c:	strb	r0, [sp, #29]
 720:	mov	r0, #90	; 0x5a
 724:	strb	r0, [sp, #30]
 728:	mov	r0, #97	; 0x61
 72c:	strb	r0, [sp, #31]
 730:	mov	r0, #0
 734:	strb	r0, [sp, #32]
 738:	ldr	r0, [pc, #96]	; 7a0 <main+0x300>
 73c:	bl	0 <printf>
 740:	add	r0, sp, #28
 744:	bl	0 <puts>
 748:	add	r0, sp, #28
 74c:	bl	0 <strlen>
 750:	mov	r1, r0
 754:	add	r0, sp, #28
 758:	mov	r2, #1
 75c:	ldr	r3, [pc, #48]	; 794 <main+0x2f4>
 760:	bl	bc <sort>
 764:	ldr	r0, [pc, #28]	; 788 <main+0x2e8>
 768:	bl	0 <printf>
 76c:	add	r0, sp, #28
 770:	bl	0 <puts>
 774:	mov	r0, #0
 778:	ldr	r4, [sp, #16]
 77c:	ldr	lr, [sp, #8]
 780:	add	sp, sp, #88	; 0x58
 784:	bx	lr
 788:	.word	0x0000000a
 78c:	.word	0x00000000
 790:	.word	0x00000012
 794:	.word	0x00000000
 798:	.word	0x0000008e
 79c:	.word	0x00000049
 7a0:	.word	0x0000006b
 7a4:	.word	0x0000001c
 7a8:	.word	0x00000072
 7ac:	.word	0x00000080
 7b0:	.word	0x00000000
 7b4:	.word	0x00000098
 7b8:	.word	0x00000076
