
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/zlib/inflate.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <updatewindow>:
       0:	strd	r4, [sp, #-32]!	; 0xffffffe0
       4:	ldr	r4, [r0, #28]
       8:	ldr	r3, [r4, #52]	; 0x34
       c:	strd	r6, [sp, #8]
      10:	mov	r6, r2
      14:	strd	r8, [sp, #16]
      18:	mov	r8, r1
      1c:	str	sl, [sp, #24]
      20:	str	lr, [sp, #28]
      24:	cmp	r3, #0
      28:	beq	130 <updatewindow+0x130>
      2c:	ldr	r5, [r4, #40]	; 0x28
      30:	cmp	r5, #0
      34:	beq	a8 <updatewindow+0xa8>
      38:	cmp	r6, r5
      3c:	bcs	cc <updatewindow+0xcc>
      40:	ldr	r7, [r4, #48]	; 0x30
      44:	sub	r1, r8, r6
      48:	sub	r9, r5, r7
      4c:	add	r0, r3, r7
      50:	cmp	r6, r9
      54:	bcc	f0 <updatewindow+0xf0>
      58:	mov	r2, r9
      5c:	add	r7, r7, r6
      60:	bl	0 <memcpy>
      64:	subs	r7, r7, r5
      68:	beq	164 <updatewindow+0x164>
      6c:	sub	r1, r9, r6
      70:	mov	r2, r7
      74:	ldr	r0, [r4, #52]	; 0x34
      78:	add	r1, r8, r1
      7c:	bl	0 <memcpy>
      80:	ldr	r3, [r4, #40]	; 0x28
      84:	mov	r0, #0
      88:	str	r3, [r4, #44]	; 0x2c
      8c:	str	r7, [r4, #48]	; 0x30
      90:	ldrd	r4, [sp]
      94:	ldrd	r6, [sp, #8]
      98:	ldrd	r8, [sp, #16]
      9c:	ldr	sl, [sp, #24]
      a0:	add	sp, sp, #28
      a4:	pop	{pc}		; (ldr pc, [sp], #4)
      a8:	ldr	r1, [r4, #36]	; 0x24
      ac:	mov	r5, #1
      b0:	mov	r2, #0
      b4:	str	r2, [r4, #44]	; 0x2c
      b8:	str	r2, [r4, #48]	; 0x30
      bc:	lsl	r5, r5, r1
      c0:	cmp	r6, r5
      c4:	str	r5, [r4, #40]	; 0x28
      c8:	bcc	40 <updatewindow+0x40>
      cc:	mov	r2, r5
      d0:	mov	r0, r3
      d4:	sub	r1, r8, r5
      d8:	bl	0 <memcpy>
      dc:	ldr	r2, [r4, #40]	; 0x28
      e0:	mov	r3, #0
      e4:	mov	r0, r3
      e8:	strd	r2, [r4, #44]	; 0x2c
      ec:	b	90 <updatewindow+0x90>
      f0:	mov	r2, r6
      f4:	bl	0 <memcpy>
      f8:	ldr	r2, [r4, #40]	; 0x28
      fc:	ldr	r3, [r4, #48]	; 0x30
     100:	ldr	r1, [r4, #44]	; 0x2c
     104:	add	r3, r6, r3
     108:	cmp	r3, r2
     10c:	str	r3, [r4, #48]	; 0x30
     110:	moveq	r3, #0
     114:	streq	r3, [r4, #48]	; 0x30
     118:	cmp	r2, r1
     11c:	addhi	r1, r1, r6
     120:	movhi	r0, #0
     124:	movls	r0, #0
     128:	strhi	r1, [r4, #44]	; 0x2c
     12c:	b	90 <updatewindow+0x90>
     130:	ldr	r1, [r4, #36]	; 0x24
     134:	mov	r5, #1
     138:	mov	r2, r5
     13c:	ldr	r3, [r0, #32]
     140:	ldr	r0, [r0, #40]	; 0x28
     144:	lsl	r1, r5, r1
     148:	blx	r3
     14c:	cmp	r0, #0
     150:	mov	r3, r0
     154:	str	r0, [r4, #52]	; 0x34
     158:	moveq	r0, r5
     15c:	bne	2c <updatewindow+0x2c>
     160:	b	90 <updatewindow+0x90>
     164:	mov	r6, r9
     168:	b	f8 <updatewindow+0xf8>

0000016c <coda_inflateResetKeep>:
     16c:	cmp	r0, #0
     170:	beq	200 <coda_inflateResetKeep+0x94>
     174:	ldr	r3, [r0, #28]
     178:	cmp	r3, #0
     17c:	beq	200 <coda_inflateResetKeep+0x94>
     180:	ldr	r1, [r3, #8]
     184:	mov	r2, #0
     188:	mvn	ip, #0
     18c:	str	r4, [sp, #-8]!
     190:	mov	r4, #32768	; 0x8000
     194:	str	lr, [sp, #4]
     198:	mov	lr, #1
     19c:	str	r2, [r3, #28]
     1a0:	str	r2, [r0, #8]
     1a4:	cmp	r1, r2
     1a8:	str	r2, [r0, #20]
     1ac:	andne	r1, r1, #1
     1b0:	str	r2, [r0, #24]
     1b4:	add	r2, r3, #1328	; 0x530
     1b8:	strne	r1, [r0, #48]	; 0x30
     1bc:	mov	r0, #0
     1c0:	add	r1, r3, #4096	; 0x1000
     1c4:	str	r4, [r3, #20]
     1c8:	ldr	r4, [sp]
     1cc:	add	sp, sp, #4
     1d0:	str	r0, [r3]
     1d4:	str	r0, [r3, #4]
     1d8:	str	r0, [r3, #12]
     1dc:	str	r0, [r3, #32]
     1e0:	str	r0, [r3, #56]	; 0x38
     1e4:	str	r0, [r3, #60]	; 0x3c
     1e8:	str	r2, [r3, #76]	; 0x4c
     1ec:	str	r2, [r3, #80]	; 0x50
     1f0:	str	r2, [r3, #108]	; 0x6c
     1f4:	str	lr, [r1, #3008]	; 0xbc0
     1f8:	str	ip, [r1, #3012]	; 0xbc4
     1fc:	pop	{pc}		; (ldr pc, [sp], #4)
     200:	mvn	r0, #1
     204:	bx	lr

00000208 <coda_inflateReset>:
     208:	subs	r3, r0, #0
     20c:	beq	230 <coda_inflateReset+0x28>
     210:	ldr	r3, [r3, #28]
     214:	cmp	r3, #0
     218:	beq	230 <coda_inflateReset+0x28>
     21c:	mov	r2, #0
     220:	str	r2, [r3, #40]	; 0x28
     224:	str	r2, [r3, #44]	; 0x2c
     228:	str	r2, [r3, #48]	; 0x30
     22c:	b	16c <coda_inflateResetKeep>
     230:	mvn	r0, #1
     234:	bx	lr

00000238 <coda_inflateReset2>:
     238:	strd	r4, [sp, #-24]!	; 0xffffffe8
     23c:	strd	r6, [sp, #8]
     240:	str	r8, [sp, #16]
     244:	subs	r8, r0, #0
     248:	str	lr, [sp, #20]
     24c:	beq	2e4 <coda_inflateReset2+0xac>
     250:	ldr	r5, [r8, #28]
     254:	cmp	r5, #0
     258:	beq	2e4 <coda_inflateReset2+0xac>
     25c:	cmp	r1, #0
     260:	mov	r4, r1
     264:	movlt	r7, #0
     268:	rsblt	r4, r1, #0
     26c:	blt	280 <coda_inflateReset2+0x48>
     270:	asr	r7, r4, #4
     274:	cmp	r4, #47	; 0x2f
     278:	andle	r4, r4, #15
     27c:	add	r7, r7, #1
     280:	sub	r3, r4, #8
     284:	cmp	r4, #0
     288:	cmpne	r3, #7
     28c:	movhi	r6, #1
     290:	movls	r6, #0
     294:	bhi	2e4 <coda_inflateReset2+0xac>
     298:	ldr	r1, [r5, #52]	; 0x34
     29c:	cmp	r1, #0
     2a0:	beq	2c0 <coda_inflateReset2+0x88>
     2a4:	ldr	r3, [r5, #36]	; 0x24
     2a8:	cmp	r4, r3
     2ac:	beq	2c0 <coda_inflateReset2+0x88>
     2b0:	ldr	r3, [r8, #36]	; 0x24
     2b4:	ldr	r0, [r8, #40]	; 0x28
     2b8:	blx	r3
     2bc:	str	r6, [r5, #52]	; 0x34
     2c0:	mov	r0, r8
     2c4:	ldr	r8, [sp, #16]
     2c8:	ldr	lr, [sp, #20]
     2cc:	str	r7, [r5, #8]
     2d0:	str	r4, [r5, #36]	; 0x24
     2d4:	ldrd	r4, [sp]
     2d8:	ldrd	r6, [sp, #8]
     2dc:	add	sp, sp, #24
     2e0:	b	208 <coda_inflateReset>
     2e4:	ldrd	r4, [sp]
     2e8:	mvn	r0, #1
     2ec:	ldrd	r6, [sp, #8]
     2f0:	ldr	r8, [sp, #16]
     2f4:	add	sp, sp, #20
     2f8:	pop	{pc}		; (ldr pc, [sp], #4)

000002fc <coda_inflateInit2_>:
     2fc:	cmp	r2, #0
     300:	strd	r4, [sp, #-24]!	; 0xffffffe8
     304:	strd	r6, [sp, #8]
     308:	str	r8, [sp, #16]
     30c:	str	lr, [sp, #20]
     310:	beq	3ec <coda_inflateInit2_+0xf0>
     314:	ldrb	r2, [r2]
     318:	cmp	r3, #56	; 0x38
     31c:	cmpeq	r2, #49	; 0x31
     320:	movne	r2, #1
     324:	moveq	r2, #0
     328:	bne	3ec <coda_inflateInit2_+0xf0>
     32c:	cmp	r0, #0
     330:	beq	3fc <coda_inflateInit2_+0x100>
     334:	ldr	r3, [r0, #32]
     338:	str	r2, [r0, #24]
     33c:	cmp	r3, #0
     340:	beq	3d0 <coda_inflateInit2_+0xd4>
     344:	ldr	r2, [r0, #40]	; 0x28
     348:	ldr	ip, [r0, #36]	; 0x24
     34c:	cmp	ip, #0
     350:	beq	3c0 <coda_inflateInit2_+0xc4>
     354:	mov	r5, r1
     358:	mov	r4, r0
     35c:	mov	r1, #1
     360:	mov	r0, r2
     364:	movw	r2, #7116	; 0x1bcc
     368:	blx	r3
     36c:	subs	r6, r0, #0
     370:	beq	3f4 <coda_inflateInit2_+0xf8>
     374:	mov	r7, #0
     378:	mov	r1, r5
     37c:	str	r6, [r4, #28]
     380:	mov	r0, r4
     384:	str	r7, [r6, #52]	; 0x34
     388:	bl	238 <coda_inflateReset2>
     38c:	subs	r5, r0, #0
     390:	beq	3a8 <coda_inflateInit2_+0xac>
     394:	mov	r1, r6
     398:	ldr	r3, [r4, #36]	; 0x24
     39c:	ldr	r0, [r4, #40]	; 0x28
     3a0:	blx	r3
     3a4:	str	r7, [r4, #28]
     3a8:	mov	r0, r5
     3ac:	ldrd	r4, [sp]
     3b0:	ldrd	r6, [sp, #8]
     3b4:	ldr	r8, [sp, #16]
     3b8:	add	sp, sp, #20
     3bc:	pop	{pc}		; (ldr pc, [sp], #4)
     3c0:	movw	ip, #0
     3c4:	movt	ip, #0
     3c8:	str	ip, [r0, #36]	; 0x24
     3cc:	b	354 <coda_inflateInit2_+0x58>
     3d0:	movw	ip, #0
     3d4:	movt	ip, #0
     3d8:	mov	r2, r3
     3dc:	str	ip, [r0, #32]
     3e0:	str	r3, [r0, #40]	; 0x28
     3e4:	mov	r3, ip
     3e8:	b	348 <coda_inflateInit2_+0x4c>
     3ec:	mvn	r5, #5
     3f0:	b	3a8 <coda_inflateInit2_+0xac>
     3f4:	mvn	r5, #3
     3f8:	b	3a8 <coda_inflateInit2_+0xac>
     3fc:	mvn	r5, #1
     400:	b	3a8 <coda_inflateInit2_+0xac>

00000404 <coda_inflateInit_>:
     404:	mov	r3, r2
     408:	mov	r2, r1
     40c:	mov	r1, #15
     410:	b	2fc <coda_inflateInit2_>

00000414 <coda_inflatePrime>:
     414:	cmp	r0, #0
     418:	beq	48c <coda_inflatePrime+0x78>
     41c:	ldr	r3, [r0, #28]
     420:	cmp	r3, #0
     424:	beq	48c <coda_inflatePrime+0x78>
     428:	cmp	r1, #0
     42c:	blt	478 <coda_inflatePrime+0x64>
     430:	cmp	r1, #16
     434:	bgt	48c <coda_inflatePrime+0x78>
     438:	str	r4, [sp, #-8]!
     43c:	str	lr, [sp, #4]
     440:	ldr	lr, [r3, #60]	; 0x3c
     444:	add	r0, r1, lr
     448:	cmp	r0, #32
     44c:	bhi	494 <coda_inflatePrime+0x80>
     450:	ldr	ip, [r3, #56]	; 0x38
     454:	mvn	r4, #0
     458:	bic	r1, r2, r4, lsl r1
     45c:	str	r0, [r3, #60]	; 0x3c
     460:	mov	r0, #0
     464:	add	r1, ip, r1, lsl lr
     468:	str	r1, [r3, #56]	; 0x38
     46c:	ldr	r4, [sp]
     470:	add	sp, sp, #4
     474:	pop	{pc}		; (ldr pc, [sp], #4)
     478:	mov	r2, #0
     47c:	mov	r0, r2
     480:	str	r2, [r3, #56]	; 0x38
     484:	str	r2, [r3, #60]	; 0x3c
     488:	bx	lr
     48c:	mvn	r0, #1
     490:	bx	lr
     494:	mvn	r0, #1
     498:	b	46c <coda_inflatePrime+0x58>

0000049c <coda_inflate>:
     49c:	strd	r4, [sp, #-36]!	; 0xffffffdc
     4a0:	strd	r6, [sp, #8]
     4a4:	strd	sl, [sp, #24]
     4a8:	subs	fp, r0, #0
     4ac:	strd	r8, [sp, #16]
     4b0:	str	lr, [sp, #32]
     4b4:	sub	sp, sp, #60	; 0x3c
     4b8:	beq	978 <coda_inflate+0x4dc>
     4bc:	ldr	r9, [fp, #28]
     4c0:	cmp	r9, #0
     4c4:	beq	978 <coda_inflate+0x4dc>
     4c8:	ldr	r3, [fp, #12]
     4cc:	cmp	r3, #0
     4d0:	str	r3, [sp, #20]
     4d4:	beq	978 <coda_inflate+0x4dc>
     4d8:	ldr	sl, [fp]
     4dc:	ldr	r3, [fp, #4]
     4e0:	cmp	sl, #0
     4e4:	str	r3, [sp, #16]
     4e8:	beq	970 <coda_inflate+0x4d4>
     4ec:	ldr	r3, [r9]
     4f0:	cmp	r3, #11
     4f4:	bne	504 <coda_inflate+0x68>
     4f8:	mov	r2, #12
     4fc:	mov	r3, r2
     500:	str	r2, [r9]
     504:	movw	r2, #35615	; 0x8b1f
     508:	movt	r2, #65535	; 0xffff
     50c:	str	r1, [sp, #24]
     510:	ldr	r1, [pc, #4056]	; 14f0 <coda_inflate+0x1054>
     514:	movw	r8, #4229	; 0x1085
     518:	movt	r8, #2114	; 0x842
     51c:	str	r2, [sp, #36]	; 0x24
     520:	ldr	r5, [sp, #16]
     524:	str	r8, [sp, #32]
     528:	ldr	r2, [fp, #16]
     52c:	sub	r1, r1, #128	; 0x80
     530:	ldr	r6, [r9, #56]	; 0x38
     534:	ldr	r4, [r9, #60]	; 0x3c
     538:	str	r2, [sp, #8]
     53c:	str	r2, [sp, #12]
     540:	str	r1, [sp, #28]
     544:	cmp	r3, #30
     548:	ldrls	pc, [pc, r3, lsl #2]
     54c:	b	978 <coda_inflate+0x4dc>
     550:	.word	0x0000106c
     554:	.word	0x0000077c
     558:	.word	0x00001150
     55c:	.word	0x00001180
     560:	.word	0x000011b0
     564:	.word	0x00001254
     568:	.word	0x00001260
     56c:	.word	0x00000dd8
     570:	.word	0x00000d48
     574:	.word	0x00000674
     578:	.word	0x000006b4
     57c:	.word	0x000006e0
     580:	.word	0x000006f0
     584:	.word	0x00000b94
     588:	.word	0x00001244
     58c:	.word	0x00000f0c
     590:	.word	0x000005e4
     594:	.word	0x00000f78
     598:	.word	0x000007ac
     59c:	.word	0x00000c10
     5a0:	.word	0x00000ac0
     5a4:	.word	0x00000c98
     5a8:	.word	0x00000cb8
     5ac:	.word	0x00000c1c
     5b0:	.word	0x00000c30
     5b4:	.word	0x00000a8c
     5b8:	.word	0x00000710
     5bc:	.word	0x00000dfc
     5c0:	.word	0x00000efc
     5c4:	.word	0x00000c88
     5c8:	.word	0x000015ec
     5cc:	cmp	r5, #0
     5d0:	beq	828 <coda_inflate+0x38c>
     5d4:	ldrb	r3, [sl], #1
     5d8:	sub	r5, r5, #1
     5dc:	add	r6, r6, r3, lsl r4
     5e0:	add	r4, r4, #8
     5e4:	cmp	r4, #13
     5e8:	bls	5cc <coda_inflate+0x130>
     5ec:	and	r3, r6, #31
     5f0:	ubfx	r2, r6, #5, #5
     5f4:	movw	r1, #286	; 0x11e
     5f8:	ubfx	r0, r6, #10, #4
     5fc:	add	r3, r3, #256	; 0x100
     600:	sub	r4, r4, #14
     604:	add	r3, r3, #1
     608:	add	r2, r2, #1
     60c:	lsr	r6, r6, #14
     610:	add	r0, r0, #4
     614:	cmp	r2, #30
     618:	cmpls	r3, r1
     61c:	movhi	r1, #1
     620:	movls	r1, #0
     624:	str	r0, [r9, #92]	; 0x5c
     628:	str	r3, [r9, #96]	; 0x60
     62c:	str	r2, [r9, #100]	; 0x64
     630:	bls	1964 <coda_inflate+0x14c8>
     634:	movw	r3, #0
     638:	movt	r3, #0
     63c:	mov	r2, #29
     640:	str	r3, [fp, #24]
     644:	str	r2, [r9]
     648:	b	c88 <coda_inflate+0x7ec>
     64c:	mov	r6, #0
     650:	mov	r3, #9
     654:	mov	r4, r6
     658:	str	r3, [r9]
     65c:	cmp	r5, #0
     660:	beq	828 <coda_inflate+0x38c>
     664:	ldrb	r3, [sl], #1
     668:	sub	r5, r5, #1
     66c:	add	r6, r6, r3, lsl r4
     670:	add	r4, r4, #8
     674:	cmp	r4, #31
     678:	bls	65c <coda_inflate+0x1c0>
     67c:	lsl	r3, r6, #24
     680:	mov	r1, #10
     684:	lsr	r0, r6, #8
     688:	add	r3, r3, r6, lsr #24
     68c:	lsl	r2, r6, #8
     690:	and	r0, r0, #65280	; 0xff00
     694:	mov	r6, #0
     698:	add	r3, r3, r0
     69c:	mov	r4, r6
     6a0:	and	r2, r2, #16711680	; 0xff0000
     6a4:	add	r3, r3, r2
     6a8:	str	r3, [r9, #24]
     6ac:	str	r3, [fp, #48]	; 0x30
     6b0:	str	r1, [r9]
     6b4:	ldr	r3, [r9, #12]
     6b8:	cmp	r3, #0
     6bc:	beq	1b94 <coda_inflate+0x16f8>
     6c0:	mov	r2, #0
     6c4:	mov	r1, r2
     6c8:	mov	r0, r2
     6cc:	bl	0 <coda_adler32>
     6d0:	mov	r3, #11
     6d4:	str	r0, [r9, #24]
     6d8:	str	r0, [fp, #48]	; 0x30
     6dc:	str	r3, [r9]
     6e0:	ldr	r3, [sp, #24]
     6e4:	sub	r3, r3, #5
     6e8:	cmp	r3, #1
     6ec:	bls	828 <coda_inflate+0x38c>
     6f0:	ldr	r0, [r9, #4]
     6f4:	cmp	r0, #0
     6f8:	beq	b40 <coda_inflate+0x6a4>
     6fc:	and	r2, r4, #7
     700:	mov	r3, #26
     704:	lsr	r6, r6, r2
     708:	bic	r4, r4, #7
     70c:	str	r3, [r9]
     710:	ldr	r3, [r9, #8]
     714:	cmp	r3, #0
     718:	bne	9d0 <coda_inflate+0x534>
     71c:	mov	r2, #27
     720:	str	r2, [r9]
     724:	b	e00 <coda_inflate+0x964>
     728:	mov	r2, #0
     72c:	mov	r4, r3
     730:	mov	r1, r2
     734:	mov	r0, r2
     738:	bl	0 <coda_crc32>
     73c:	ldr	r3, [sp, #36]	; 0x24
     740:	mov	r2, #2
     744:	add	r1, sp, #52	; 0x34
     748:	str	r0, [r9, #24]
     74c:	mov	r6, r4
     750:	strh	r3, [sp, #52]	; 0x34
     754:	bl	0 <coda_crc32>
     758:	mov	r3, #1
     75c:	str	r3, [r9]
     760:	str	r0, [r9, #24]
     764:	cmp	r5, #0
     768:	beq	828 <coda_inflate+0x38c>
     76c:	ldrb	r3, [sl], #1
     770:	sub	r5, r5, #1
     774:	add	r6, r6, r3, lsl r4
     778:	add	r4, r4, #8
     77c:	cmp	r4, #15
     780:	bls	764 <coda_inflate+0x2c8>
     784:	uxtb	r3, r6
     788:	str	r6, [r9, #16]
     78c:	cmp	r3, #8
     790:	beq	17dc <coda_inflate+0x1340>
     794:	movw	r3, #0
     798:	movt	r3, #0
     79c:	mov	r2, #29
     7a0:	str	r3, [fp, #24]
     7a4:	str	r2, [r9]
     7a8:	b	c88 <coda_inflate+0x7ec>
     7ac:	ldr	ip, [r9, #104]	; 0x68
     7b0:	add	r3, r9, #110	; 0x6e
     7b4:	mvn	r7, #0
     7b8:	ldr	r8, [r9, #96]	; 0x60
     7bc:	str	r3, [sp, #40]	; 0x28
     7c0:	ldr	lr, [r9, #100]	; 0x64
     7c4:	add	lr, r8, lr
     7c8:	cmp	lr, ip
     7cc:	bls	1b60 <coda_inflate+0x16c4>
     7d0:	ldr	r1, [r9, #76]	; 0x4c
     7d4:	ldr	r2, [r9, #84]	; 0x54
     7d8:	mvn	r2, r7, lsl r2
     7dc:	and	r3, r6, r2
     7e0:	add	r3, r1, r3, lsl #2
     7e4:	ldrb	r0, [r3, #1]
     7e8:	ldrh	r3, [r3, #2]
     7ec:	cmp	r4, r0
     7f0:	bcc	820 <coda_inflate+0x384>
     7f4:	b	14a4 <coda_inflate+0x1008>
     7f8:	ldrb	r3, [sl], #1
     7fc:	sub	r5, r5, #1
     800:	add	r6, r6, r3, lsl r4
     804:	add	r4, r4, #8
     808:	and	r3, r6, r2
     80c:	add	r3, r1, r3, lsl #2
     810:	ldrb	r0, [r3, #1]
     814:	ldrh	r3, [r3, #2]
     818:	cmp	r0, r4
     81c:	bls	14a4 <coda_inflate+0x1008>
     820:	cmp	r5, #0
     824:	bne	7f8 <coda_inflate+0x35c>
     828:	ldrd	r2, [sp, #8]
     82c:	mov	r7, #0
     830:	sub	r8, r3, r2
     834:	ldr	r2, [sp, #20]
     838:	ldr	r3, [r9, #40]	; 0x28
     83c:	str	sl, [fp]
     840:	str	r5, [fp, #4]
     844:	str	r2, [fp, #12]
     848:	ldr	r2, [sp, #8]
     84c:	cmp	r3, #0
     850:	str	r2, [fp, #16]
     854:	str	r6, [r9, #56]	; 0x38
     858:	str	r4, [r9, #60]	; 0x3c
     85c:	bne	940 <coda_inflate+0x4a4>
     860:	ldr	r3, [sp, #12]
     864:	cmp	r3, r2
     868:	beq	878 <coda_inflate+0x3dc>
     86c:	ldr	r3, [r9]
     870:	cmp	r3, #28
     874:	bls	920 <coda_inflate+0x484>
     878:	ldr	r3, [sp, #16]
     87c:	ldr	r1, [fp, #8]
     880:	ldr	r2, [fp, #20]
     884:	sub	r5, r3, r5
     888:	ldr	r0, [r9, #8]
     88c:	add	r1, r1, r5
     890:	ldr	r3, [r9, #28]
     894:	add	r2, r2, r8
     898:	str	r1, [fp, #8]
     89c:	cmp	r0, #0
     8a0:	cmpne	r8, #0
     8a4:	str	r2, [fp, #20]
     8a8:	add	r3, r3, r8
     8ac:	str	r3, [r9, #28]
     8b0:	bne	980 <coda_inflate+0x4e4>
     8b4:	ldr	r2, [r9, #4]
     8b8:	ldr	r3, [r9, #60]	; 0x3c
     8bc:	cmp	r2, #0
     8c0:	ldr	r2, [r9]
     8c4:	addne	r3, r3, #64	; 0x40
     8c8:	cmp	r2, #11
     8cc:	addeq	r3, r3, #128	; 0x80
     8d0:	beq	8e0 <coda_inflate+0x444>
     8d4:	cmp	r2, #14
     8d8:	cmpne	r2, #19
     8dc:	addeq	r3, r3, #256	; 0x100
     8e0:	str	r3, [fp, #44]	; 0x2c
     8e4:	orr	r5, r5, r8
     8e8:	ldr	r3, [sp, #24]
     8ec:	cmp	r5, #0
     8f0:	cmpne	r3, #4
     8f4:	bne	900 <coda_inflate+0x464>
     8f8:	cmp	r7, #0
     8fc:	mvneq	r7, #4
     900:	mov	r0, r7
     904:	add	sp, sp, #60	; 0x3c
     908:	ldrd	r4, [sp]
     90c:	ldrd	r6, [sp, #8]
     910:	ldrd	r8, [sp, #16]
     914:	ldrd	sl, [sp, #24]
     918:	add	sp, sp, #32
     91c:	pop	{pc}		; (ldr pc, [sp], #4)
     920:	ldr	r2, [sp, #24]
     924:	subs	r2, r2, #4
     928:	movne	r2, #1
     92c:	cmp	r3, #25
     930:	movhi	r3, r2
     934:	orrls	r3, r2, #1
     938:	cmp	r3, #0
     93c:	beq	878 <coda_inflate+0x3dc>
     940:	mov	r2, r8
     944:	mov	r0, fp
     948:	ldr	r1, [sp, #20]
     94c:	bl	0 <updatewindow>
     950:	cmp	r0, #0
     954:	bne	19d8 <coda_inflate+0x153c>
     958:	ldr	r2, [sp, #12]
     95c:	ldr	r5, [fp, #4]
     960:	ldr	r3, [fp, #16]
     964:	sub	r8, r2, r3
     968:	str	r3, [sp, #8]
     96c:	b	878 <coda_inflate+0x3dc>
     970:	cmp	r3, #0
     974:	beq	4ec <coda_inflate+0x50>
     978:	mvn	r7, #1
     97c:	b	900 <coda_inflate+0x464>
     980:	ldr	r3, [sp, #8]
     984:	ldr	r1, [sp, #12]
     988:	ldr	r2, [r9, #16]
     98c:	ldr	r0, [r9, #24]
     990:	sub	r1, r3, r1
     994:	ldr	r3, [fp, #12]
     998:	cmp	r2, #0
     99c:	mov	r2, r8
     9a0:	add	r1, r3, r1
     9a4:	bne	a84 <coda_inflate+0x5e8>
     9a8:	bl	0 <coda_adler32>
     9ac:	str	r0, [r9, #24]
     9b0:	str	r0, [fp, #48]	; 0x30
     9b4:	b	8b4 <coda_inflate+0x418>
     9b8:	cmp	r5, #0
     9bc:	beq	828 <coda_inflate+0x38c>
     9c0:	ldrb	r3, [sl], #1
     9c4:	sub	r5, r5, #1
     9c8:	add	r6, r6, r3, lsl r4
     9cc:	add	r4, r4, #8
     9d0:	cmp	r4, #31
     9d4:	bls	9b8 <coda_inflate+0x51c>
     9d8:	ldr	r7, [sp, #8]
     9dc:	ldr	lr, [sp, #12]
     9e0:	ldr	r1, [fp, #20]
     9e4:	ldr	ip, [r9, #16]
     9e8:	sub	r2, lr, r7
     9ec:	ldr	r3, [r9, #28]
     9f0:	cmp	r2, #0
     9f4:	add	r1, r1, r2
     9f8:	ldr	r0, [r9, #24]
     9fc:	str	r1, [fp, #20]
     a00:	add	r3, r3, r2
     a04:	str	r3, [r9, #28]
     a08:	beq	a30 <coda_inflate+0x594>
     a0c:	ldr	r3, [sp, #20]
     a10:	sub	r1, r7, lr
     a14:	cmp	ip, #0
     a18:	add	r1, r3, r1
     a1c:	beq	19e8 <coda_inflate+0x154c>
     a20:	bl	0 <coda_crc32>
     a24:	str	r0, [r9, #24]
     a28:	ldr	ip, [r9, #16]
     a2c:	str	r0, [fp, #48]	; 0x30
     a30:	cmp	ip, #0
     a34:	movne	r3, r6
     a38:	bne	a5c <coda_inflate+0x5c0>
     a3c:	lsl	r3, r6, #24
     a40:	lsr	r1, r6, #8
     a44:	add	r3, r3, r6, lsr #24
     a48:	lsl	r2, r6, #8
     a4c:	and	r1, r1, #65280	; 0xff00
     a50:	add	r3, r3, r1
     a54:	and	r2, r2, #16711680	; 0xff0000
     a58:	add	r3, r3, r2
     a5c:	cmp	r3, r0
     a60:	beq	1b08 <coda_inflate+0x166c>
     a64:	movw	r3, #0
     a68:	movt	r3, #0
     a6c:	mov	r2, #29
     a70:	str	r3, [fp, #24]
     a74:	ldr	r3, [sp, #8]
     a78:	str	r2, [r9]
     a7c:	str	r3, [sp, #12]
     a80:	b	c88 <coda_inflate+0x7ec>
     a84:	bl	0 <coda_crc32>
     a88:	b	9ac <coda_inflate+0x510>
     a8c:	ldr	r1, [sp, #20]
     a90:	ldr	r0, [sp, #8]
     a94:	cmp	r0, #0
     a98:	beq	19cc <coda_inflate+0x1530>
     a9c:	ldr	ip, [sp, #20]
     aa0:	mov	r3, #20
     aa4:	sub	r0, r0, #1
     aa8:	ldr	r2, [r9, #64]	; 0x40
     aac:	str	r0, [sp, #8]
     ab0:	add	ip, ip, #1
     ab4:	strb	r2, [r1]
     ab8:	str	r3, [r9]
     abc:	str	ip, [sp, #20]
     ac0:	ldr	r2, [sp, #8]
     ac4:	movw	r3, #257	; 0x101
     ac8:	cmp	r5, #5
     acc:	cmphi	r2, r3
     ad0:	movhi	r3, #1
     ad4:	movls	r3, #0
     ad8:	bls	1418 <coda_inflate+0xf7c>
     adc:	mov	r0, fp
     ae0:	str	sl, [fp]
     ae4:	ldr	r3, [sp, #20]
     ae8:	str	r5, [fp, #4]
     aec:	ldr	r1, [sp, #12]
     af0:	str	r3, [fp, #12]
     af4:	str	r2, [fp, #16]
     af8:	str	r6, [r9, #56]	; 0x38
     afc:	str	r4, [r9, #60]	; 0x3c
     b00:	bl	0 <coda_inflate_fast>
     b04:	ldr	r3, [r9]
     b08:	ldr	r2, [fp, #12]
     b0c:	ldr	sl, [fp]
     b10:	cmp	r3, #11
     b14:	addeq	r7, r9, #4096	; 0x1000
     b18:	mvneq	r3, #0
     b1c:	ldr	r5, [fp, #4]
     b20:	str	r2, [sp, #20]
     b24:	ldr	r2, [fp, #16]
     b28:	ldr	r6, [r9, #56]	; 0x38
     b2c:	ldr	r4, [r9, #60]	; 0x3c
     b30:	streq	r3, [r7, #3012]	; 0xbc4
     b34:	str	r2, [sp, #8]
     b38:	bne	544 <coda_inflate+0xa8>
     b3c:	b	6e0 <coda_inflate+0x244>
     b40:	cmp	r4, #2
     b44:	bhi	b60 <coda_inflate+0x6c4>
     b48:	cmp	r5, #0
     b4c:	beq	1988 <coda_inflate+0x14ec>
     b50:	ldrb	r3, [sl], #1
     b54:	sub	r5, r5, #1
     b58:	add	r6, r6, r3, lsl r4
     b5c:	add	r4, r4, #8
     b60:	ubfx	r3, r6, #1, #2
     b64:	and	r2, r6, #1
     b68:	cmp	r3, #2
     b6c:	str	r2, [r9, #4]
     b70:	beq	16d8 <coda_inflate+0x123c>
     b74:	cmp	r3, #3
     b78:	beq	18dc <coda_inflate+0x1440>
     b7c:	cmp	r3, #1
     b80:	beq	bd0 <coda_inflate+0x734>
     b84:	lsr	r6, r6, #3
     b88:	mov	r3, #13
     b8c:	sub	r4, r4, #3
     b90:	str	r3, [r9]
     b94:	and	r3, r4, #7
     b98:	bic	r4, r4, #7
     b9c:	cmp	r4, #31
     ba0:	lsr	r6, r6, r3
     ba4:	bls	bc4 <coda_inflate+0x728>
     ba8:	b	172c <coda_inflate+0x1290>
     bac:	ldrb	r3, [sl], #1
     bb0:	sub	r5, r5, #1
     bb4:	add	r6, r6, r3, lsl r4
     bb8:	add	r4, r4, #8
     bbc:	cmp	r4, #31
     bc0:	bhi	172c <coda_inflate+0x1290>
     bc4:	cmp	r5, #0
     bc8:	bne	bac <coda_inflate+0x710>
     bcc:	b	828 <coda_inflate+0x38c>
     bd0:	movw	r2, #0
     bd4:	movt	r2, #0
     bd8:	ldr	ip, [sp, #28]
     bdc:	mov	r1, #9
     be0:	mov	r3, #5
     be4:	str	r2, [r9, #76]	; 0x4c
     be8:	ldr	r2, [sp, #24]
     bec:	str	ip, [r9, #80]	; 0x50
     bf0:	str	r1, [r9, #84]	; 0x54
     bf4:	str	r3, [r9, #88]	; 0x58
     bf8:	cmp	r2, #6
     bfc:	mov	r2, #19
     c00:	str	r2, [r9]
     c04:	beq	1cbc <coda_inflate+0x1820>
     c08:	lsr	r6, r6, #3
     c0c:	sub	r4, r4, #3
     c10:	mov	r3, #20
     c14:	str	r3, [r9]
     c18:	b	ac0 <coda_inflate+0x624>
     c1c:	ldr	r1, [r9, #72]	; 0x48
     c20:	cmp	r1, #0
     c24:	bne	ec4 <coda_inflate+0xa28>
     c28:	mov	r3, #24
     c2c:	str	r3, [r9]
     c30:	ldr	r1, [sp, #8]
     c34:	cmp	r1, #0
     c38:	beq	19cc <coda_inflate+0x1530>
     c3c:	ldr	r0, [sp, #12]
     c40:	ldr	r3, [r9, #68]	; 0x44
     c44:	sub	r2, r0, r1
     c48:	cmp	r3, r2
     c4c:	bls	16ec <coda_inflate+0x1250>
     c50:	ldr	r2, [r9, #44]	; 0x2c
     c54:	add	r3, r3, r1
     c58:	sub	r0, r3, r0
     c5c:	cmp	r2, r0
     c60:	bcs	14f8 <coda_inflate+0x105c>
     c64:	add	r7, r9, #4096	; 0x1000
     c68:	ldr	r2, [r7, #3008]	; 0xbc0
     c6c:	cmp	r2, #0
     c70:	beq	14f8 <coda_inflate+0x105c>
     c74:	movw	r3, #0
     c78:	movt	r3, #0
     c7c:	mov	r2, #29
     c80:	str	r3, [fp, #24]
     c84:	str	r2, [r9]
     c88:	ldrd	r2, [sp, #8]
     c8c:	mvn	r7, #2
     c90:	sub	r8, r3, r2
     c94:	b	834 <coda_inflate+0x398>
     c98:	ldr	r1, [r9, #72]	; 0x48
     c9c:	cmp	r1, #0
     ca0:	bne	e74 <coda_inflate+0x9d8>
     ca4:	ldr	r3, [r9, #64]	; 0x40
     ca8:	add	r7, r9, #4096	; 0x1000
     cac:	mov	r2, #22
     cb0:	str	r3, [r7, #3016]	; 0xbc8
     cb4:	str	r2, [r9]
     cb8:	mvn	lr, #0
     cbc:	ldr	r2, [r9, #80]	; 0x50
     cc0:	ldr	r3, [r9, #88]	; 0x58
     cc4:	mvn	lr, lr, lsl r3
     cc8:	b	ce4 <coda_inflate+0x848>
     ccc:	cmp	r5, #0
     cd0:	beq	828 <coda_inflate+0x38c>
     cd4:	ldrb	r3, [sl], #1
     cd8:	sub	r5, r5, #1
     cdc:	add	r6, r6, r3, lsl r4
     ce0:	add	r4, r4, #8
     ce4:	and	r3, lr, r6
     ce8:	add	r0, r2, r3, lsl #2
     cec:	ldrb	r1, [r2, r3, lsl #2]
     cf0:	ldrb	r3, [r0, #1]
     cf4:	ldrh	r0, [r0, #2]
     cf8:	cmp	r3, r4
     cfc:	mov	ip, r3
     d00:	bhi	ccc <coda_inflate+0x830>
     d04:	tst	r1, #240	; 0xf0
     d08:	mov	lr, r3
     d0c:	beq	1638 <coda_inflate+0x119c>
     d10:	add	r7, r9, #4096	; 0x1000
     d14:	ldr	lr, [r7, #3012]	; 0xbc4
     d18:	add	lr, r3, lr
     d1c:	tst	r1, #64	; 0x40
     d20:	lsr	r6, r6, r3
     d24:	sub	r4, r4, r3
     d28:	str	lr, [r7, #3012]	; 0xbc4
     d2c:	beq	175c <coda_inflate+0x12c0>
     d30:	movw	r3, #0
     d34:	movt	r3, #0
     d38:	mov	r2, #29
     d3c:	str	r3, [fp, #24]
     d40:	str	r2, [r9]
     d44:	b	c88 <coda_inflate+0x7ec>
     d48:	ldr	r3, [r9, #16]
     d4c:	tst	r3, #512	; 0x200
     d50:	bne	dac <coda_inflate+0x910>
     d54:	ldr	r2, [r9, #32]
     d58:	cmp	r2, #0
     d5c:	beq	d70 <coda_inflate+0x8d4>
     d60:	ubfx	r3, r3, #9, #1
     d64:	mov	r1, #1
     d68:	str	r3, [r2, #44]	; 0x2c
     d6c:	str	r1, [r2, #48]	; 0x30
     d70:	mov	r2, #0
     d74:	mov	r1, r2
     d78:	mov	r0, r2
     d7c:	bl	0 <coda_crc32>
     d80:	mov	r3, #11
     d84:	str	r0, [r9, #24]
     d88:	str	r0, [fp, #48]	; 0x30
     d8c:	str	r3, [r9]
     d90:	b	6e0 <coda_inflate+0x244>
     d94:	cmp	r5, #0
     d98:	beq	828 <coda_inflate+0x38c>
     d9c:	ldrb	r2, [sl], #1
     da0:	sub	r5, r5, #1
     da4:	add	r6, r6, r2, lsl r4
     da8:	add	r4, r4, #8
     dac:	cmp	r4, #15
     db0:	bls	d94 <coda_inflate+0x8f8>
     db4:	ldrh	r2, [r9, #24]
     db8:	cmp	r2, r6
     dbc:	beq	162c <coda_inflate+0x1190>
     dc0:	movw	r3, #0
     dc4:	movt	r3, #0
     dc8:	mov	r2, #29
     dcc:	str	r3, [fp, #24]
     dd0:	str	r2, [r9]
     dd4:	b	c88 <coda_inflate+0x7ec>
     dd8:	ldr	r3, [r9, #16]
     ddc:	ands	r1, r3, #4096	; 0x1000
     de0:	bne	131c <coda_inflate+0xe80>
     de4:	ldr	r2, [r9, #32]
     de8:	cmp	r2, #0
     dec:	strne	r1, [r2, #36]	; 0x24
     df0:	mov	r2, #8
     df4:	str	r2, [r9]
     df8:	b	d4c <coda_inflate+0x8b0>
     dfc:	ldr	r3, [r9, #8]
     e00:	cmp	r3, #0
     e04:	beq	1948 <coda_inflate+0x14ac>
     e08:	ldr	r3, [r9, #16]
     e0c:	cmp	r3, #0
     e10:	bne	e30 <coda_inflate+0x994>
     e14:	b	1948 <coda_inflate+0x14ac>
     e18:	cmp	r5, #0
     e1c:	beq	828 <coda_inflate+0x38c>
     e20:	ldrb	r3, [sl], #1
     e24:	sub	r5, r5, #1
     e28:	add	r6, r6, r3, lsl r4
     e2c:	add	r4, r4, #8
     e30:	cmp	r4, #31
     e34:	bls	e18 <coda_inflate+0x97c>
     e38:	ldr	r3, [r9, #28]
     e3c:	cmp	r3, r6
     e40:	beq	1940 <coda_inflate+0x14a4>
     e44:	movw	r3, #0
     e48:	movt	r3, #0
     e4c:	mov	r2, #29
     e50:	str	r3, [fp, #24]
     e54:	str	r2, [r9]
     e58:	b	c88 <coda_inflate+0x7ec>
     e5c:	cmp	r5, #0
     e60:	beq	828 <coda_inflate+0x38c>
     e64:	ldrb	r3, [sl], #1
     e68:	sub	r5, r5, #1
     e6c:	add	r6, r6, r3, lsl r4
     e70:	add	r4, r4, #8
     e74:	cmp	r4, r1
     e78:	bcc	e5c <coda_inflate+0x9c0>
     e7c:	add	r7, r9, #4096	; 0x1000
     e80:	ldr	r0, [r9, #64]	; 0x40
     e84:	mvn	r3, #0
     e88:	bic	r3, r6, r3, lsl r1
     e8c:	sub	r4, r4, r1
     e90:	ldr	r2, [r7, #3012]	; 0xbc4
     e94:	lsr	r6, r6, r1
     e98:	add	r3, r3, r0
     e9c:	add	r1, r2, r1
     ea0:	str	r3, [r9, #64]	; 0x40
     ea4:	str	r1, [r7, #3012]	; 0xbc4
     ea8:	b	cac <coda_inflate+0x810>
     eac:	cmp	r5, #0
     eb0:	beq	828 <coda_inflate+0x38c>
     eb4:	ldrb	r3, [sl], #1
     eb8:	sub	r5, r5, #1
     ebc:	add	r6, r6, r3, lsl r4
     ec0:	add	r4, r4, #8
     ec4:	cmp	r4, r1
     ec8:	bcc	eac <coda_inflate+0xa10>
     ecc:	add	r7, r9, #4096	; 0x1000
     ed0:	ldr	r2, [r9, #68]	; 0x44
     ed4:	mvn	r0, #0
     ed8:	bic	r0, r6, r0, lsl r1
     edc:	sub	r4, r4, r1
     ee0:	ldr	r3, [r7, #3012]	; 0xbc4
     ee4:	lsr	r6, r6, r1
     ee8:	add	r2, r2, r0
     eec:	add	r1, r3, r1
     ef0:	str	r2, [r9, #68]	; 0x44
     ef4:	str	r1, [r7, #3012]	; 0xbc4
     ef8:	b	c28 <coda_inflate+0x78c>
     efc:	ldrd	r2, [sp, #8]
     f00:	mov	r7, #1
     f04:	sub	r8, r3, r2
     f08:	b	834 <coda_inflate+0x398>
     f0c:	ldr	r7, [r9, #64]	; 0x40
     f10:	cmp	r7, #0
     f14:	beq	1394 <coda_inflate+0xef8>
     f18:	ldr	r3, [sp, #8]
     f1c:	cmp	r5, r7
     f20:	movcc	r7, r5
     f24:	cmp	r7, r3
     f28:	movcs	r7, r3
     f2c:	cmp	r7, #0
     f30:	beq	198c <coda_inflate+0x14f0>
     f34:	ldr	r8, [sp, #20]
     f38:	mov	r2, r7
     f3c:	mov	r1, sl
     f40:	sub	r5, r5, r7
     f44:	add	sl, sl, r7
     f48:	mov	r0, r8
     f4c:	bl	0 <memcpy>
     f50:	ldr	r3, [sp, #8]
     f54:	ldr	r2, [r9, #64]	; 0x40
     f58:	sub	r3, r3, r7
     f5c:	str	r3, [sp, #8]
     f60:	add	r3, r8, r7
     f64:	sub	r7, r2, r7
     f68:	str	r3, [sp, #20]
     f6c:	str	r7, [r9, #64]	; 0x40
     f70:	ldr	r3, [r9]
     f74:	b	544 <coda_inflate+0xa8>
     f78:	ldr	r0, [r9, #92]	; 0x5c
     f7c:	ldr	r1, [r9, #104]	; 0x68
     f80:	cmp	r1, r0
     f84:	bcs	fe0 <coda_inflate+0xb44>
     f88:	ldr	r3, [pc, #1376]	; 14f0 <coda_inflate+0x1054>
     f8c:	add	ip, r3, r1, lsl #1
     f90:	cmp	r4, #2
     f94:	mov	r3, sl
     f98:	bhi	18b4 <coda_inflate+0x1418>
     f9c:	cmp	r5, #0
     fa0:	beq	828 <coda_inflate+0x38c>
     fa4:	ldrb	r2, [r3], #1
     fa8:	sub	r5, r5, #1
     fac:	add	r6, r6, r2, lsl r4
     fb0:	add	r4, r4, #8
     fb4:	ldrh	r2, [ip], #2
     fb8:	add	r1, r1, #1
     fbc:	and	lr, r6, #7
     fc0:	cmp	r0, r1
     fc4:	mov	sl, r3
     fc8:	lsr	r6, r6, #3
     fcc:	sub	r4, r4, #3
     fd0:	str	r1, [r9, #104]	; 0x68
     fd4:	add	r2, r9, r2, lsl #1
     fd8:	strh	lr, [r2, #112]	; 0x70
     fdc:	bhi	f90 <coda_inflate+0xaf4>
     fe0:	cmp	r1, #18
     fe4:	bhi	1018 <coda_inflate+0xb7c>
     fe8:	ldr	r3, [pc, #1280]	; 14f0 <coda_inflate+0x1054>
     fec:	mov	r2, #0
     ff0:	add	r1, r3, r1, lsl #1
     ff4:	ldrh	r3, [r1], #2
     ff8:	ldr	r0, [pc, #1268]	; 14f4 <coda_inflate+0x1058>
     ffc:	add	r3, r3, #56	; 0x38
    1000:	lsl	r3, r3, #1
    1004:	cmp	r0, r1
    1008:	strh	r2, [r9, r3]
    100c:	bne	ff4 <coda_inflate+0xb58>
    1010:	mov	r3, #19
    1014:	str	r3, [r9, #104]	; 0x68
    1018:	add	r1, r9, #1328	; 0x530
    101c:	mov	r2, #7
    1020:	add	ip, r9, #752	; 0x2f0
    1024:	add	r0, r9, #84	; 0x54
    1028:	add	r3, r9, #108	; 0x6c
    102c:	str	r1, [r9, #76]	; 0x4c
    1030:	str	r2, [r9, #84]	; 0x54
    1034:	mov	r2, #19
    1038:	str	r1, [r9, #108]	; 0x6c
    103c:	add	r1, r9, #112	; 0x70
    1040:	stm	sp, {r0, ip}
    1044:	mov	r0, #0
    1048:	bl	0 <coda_inflate_table>
    104c:	cmp	r0, #0
    1050:	beq	1b4c <coda_inflate+0x16b0>
    1054:	movw	r3, #0
    1058:	movt	r3, #0
    105c:	mov	r2, #29
    1060:	str	r3, [fp, #24]
    1064:	str	r2, [r9]
    1068:	b	c88 <coda_inflate+0x7ec>
    106c:	ldr	r1, [r9, #8]
    1070:	cmp	r1, #0
    1074:	moveq	r3, #12
    1078:	streq	r3, [r9]
    107c:	beq	6f0 <coda_inflate+0x254>
    1080:	b	109c <coda_inflate+0xc00>
    1084:	cmp	r5, #0
    1088:	beq	828 <coda_inflate+0x38c>
    108c:	ldrb	r2, [sl], #1
    1090:	sub	r5, r5, #1
    1094:	add	r6, r6, r2, lsl r4
    1098:	add	r4, r4, #8
    109c:	cmp	r4, #15
    10a0:	bls	1084 <coda_inflate+0xbe8>
    10a4:	movw	r2, #35615	; 0x8b1f
    10a8:	sub	r2, r6, r2
    10ac:	clz	r2, r2
    10b0:	lsr	r2, r2, #5
    10b4:	ands	r2, r2, r1, lsr #1
    10b8:	bne	728 <coda_inflate+0x28c>
    10bc:	ldr	r3, [r9, #32]
    10c0:	str	r2, [r9, #16]
    10c4:	cmp	r3, #0
    10c8:	mvnne	r2, #0
    10cc:	strne	r2, [r3, #48]	; 0x30
    10d0:	tst	r1, #1
    10d4:	beq	18fc <coda_inflate+0x1460>
    10d8:	lsl	r2, r6, #8
    10dc:	ldr	r3, [sp, #32]
    10e0:	uxth	r2, r2
    10e4:	add	r2, r2, r6, lsr #8
    10e8:	umull	r1, r3, r3, r2
    10ec:	sub	r1, r2, r3
    10f0:	add	r3, r3, r1, lsr #1
    10f4:	lsr	r3, r3, #4
    10f8:	rsb	r3, r3, r3, lsl #5
    10fc:	cmp	r2, r3
    1100:	bne	18fc <coda_inflate+0x1460>
    1104:	and	r3, r6, #15
    1108:	cmp	r3, #8
    110c:	bne	794 <coda_inflate+0x2f8>
    1110:	ldr	r2, [r9, #36]	; 0x24
    1114:	lsr	r6, r6, #4
    1118:	and	r3, r6, #15
    111c:	add	r3, r3, #8
    1120:	cmp	r2, #0
    1124:	streq	r3, [r9, #36]	; 0x24
    1128:	beq	1c6c <coda_inflate+0x17d0>
    112c:	cmp	r2, r3
    1130:	bcs	1c6c <coda_inflate+0x17d0>
    1134:	movw	r3, #0
    1138:	movt	r3, #0
    113c:	mov	r2, #29
    1140:	sub	r4, r4, #4
    1144:	str	r3, [fp, #24]
    1148:	str	r2, [r9]
    114c:	b	c88 <coda_inflate+0x7ec>
    1150:	cmp	r4, #31
    1154:	bls	1174 <coda_inflate+0xcd8>
    1158:	b	1700 <coda_inflate+0x1264>
    115c:	ldrb	r3, [sl], #1
    1160:	sub	r5, r5, #1
    1164:	add	r6, r6, r3, lsl r4
    1168:	add	r4, r4, #8
    116c:	cmp	r4, #31
    1170:	bhi	1700 <coda_inflate+0x1264>
    1174:	cmp	r5, #0
    1178:	bne	115c <coda_inflate+0xcc0>
    117c:	b	828 <coda_inflate+0x38c>
    1180:	cmp	r4, #15
    1184:	bls	11a4 <coda_inflate+0xd08>
    1188:	b	1268 <coda_inflate+0xdcc>
    118c:	ldrb	r3, [sl], #1
    1190:	sub	r5, r5, #1
    1194:	add	r6, r6, r3, lsl r4
    1198:	add	r4, r4, #8
    119c:	cmp	r4, #15
    11a0:	bhi	1268 <coda_inflate+0xdcc>
    11a4:	cmp	r5, #0
    11a8:	bne	118c <coda_inflate+0xcf0>
    11ac:	b	828 <coda_inflate+0x38c>
    11b0:	ldr	r2, [r9, #16]
    11b4:	tst	r2, #1024	; 0x400
    11b8:	mov	r3, r2
    11bc:	bne	12e8 <coda_inflate+0xe4c>
    11c0:	ldr	r1, [r9, #32]
    11c4:	cmp	r1, #0
    11c8:	movne	r0, #0
    11cc:	moveq	r2, r1
    11d0:	movne	r2, r0
    11d4:	strne	r0, [r1, #16]
    11d8:	mov	r1, #5
    11dc:	str	r1, [r9]
    11e0:	cmp	r2, #0
    11e4:	beq	120c <coda_inflate+0xd70>
    11e8:	ldr	r2, [r9, #64]	; 0x40
    11ec:	cmp	r5, r2
    11f0:	movcc	r7, r5
    11f4:	movcs	r7, r2
    11f8:	cmp	r7, #0
    11fc:	bne	1584 <coda_inflate+0x10e8>
    1200:	cmp	r2, #0
    1204:	bne	828 <coda_inflate+0x38c>
    1208:	ldr	r3, [r9, #16]
    120c:	mov	r2, #0
    1210:	mov	r1, #6
    1214:	str	r1, [r9]
    1218:	str	r2, [r9, #64]	; 0x40
    121c:	ands	r1, r3, #2048	; 0x800
    1220:	bne	13a0 <coda_inflate+0xf04>
    1224:	ldr	r2, [r9, #32]
    1228:	cmp	r2, #0
    122c:	strne	r1, [r2, #28]
    1230:	mov	r2, #0
    1234:	mov	r1, #7
    1238:	str	r1, [r9]
    123c:	str	r2, [r9, #64]	; 0x40
    1240:	b	ddc <coda_inflate+0x940>
    1244:	ldr	r7, [r9, #64]	; 0x40
    1248:	mov	r3, #15
    124c:	str	r3, [r9]
    1250:	b	f10 <coda_inflate+0xa74>
    1254:	ldr	r3, [r9, #16]
    1258:	and	r2, r3, #1024	; 0x400
    125c:	b	11e0 <coda_inflate+0xd44>
    1260:	ldr	r3, [r9, #16]
    1264:	b	121c <coda_inflate+0xd80>
    1268:	ldr	r3, [r9, #32]
    126c:	cmp	r3, #0
    1270:	beq	1284 <coda_inflate+0xde8>
    1274:	lsr	r2, r6, #8
    1278:	uxtb	r1, r6
    127c:	str	r1, [r3, #8]
    1280:	str	r2, [r3, #12]
    1284:	ldr	r2, [r9, #16]
    1288:	tst	r2, #512	; 0x200
    128c:	mov	r3, r2
    1290:	beq	12b4 <coda_inflate+0xe18>
    1294:	mov	r2, #2
    1298:	add	r1, sp, #52	; 0x34
    129c:	ldr	r0, [r9, #24]
    12a0:	strh	r6, [sp, #52]	; 0x34
    12a4:	bl	0 <coda_crc32>
    12a8:	ldr	r2, [r9, #16]
    12ac:	str	r0, [r9, #24]
    12b0:	mov	r3, r2
    12b4:	mov	r1, #4
    12b8:	ands	r4, r2, #1024	; 0x400
    12bc:	moveq	r6, r4
    12c0:	str	r1, [r9]
    12c4:	beq	11c0 <coda_inflate+0xd24>
    12c8:	mov	r4, #0
    12cc:	mov	r6, r4
    12d0:	cmp	r5, #0
    12d4:	beq	828 <coda_inflate+0x38c>
    12d8:	ldrb	r3, [sl], #1
    12dc:	sub	r5, r5, #1
    12e0:	add	r6, r6, r3, lsl r4
    12e4:	add	r4, r4, #8
    12e8:	cmp	r4, #15
    12ec:	bls	12d0 <coda_inflate+0xe34>
    12f0:	ldr	r3, [r9, #32]
    12f4:	str	r6, [r9, #64]	; 0x40
    12f8:	cmp	r3, #0
    12fc:	strne	r6, [r3, #20]
    1300:	ands	r1, r2, #512	; 0x200
    1304:	bne	1914 <coda_inflate+0x1478>
    1308:	mov	r3, r2
    130c:	mov	r6, r1
    1310:	and	r2, r2, #1024	; 0x400
    1314:	mov	r4, r1
    1318:	b	11d8 <coda_inflate+0xd3c>
    131c:	cmp	r5, #0
    1320:	beq	828 <coda_inflate+0x38c>
    1324:	sub	r2, sl, #1
    1328:	mov	r7, #0
    132c:	ldr	r3, [r9, #32]
    1330:	add	r7, r7, #1
    1334:	ldrb	r8, [r2, #1]!
    1338:	cmp	r3, #0
    133c:	beq	1364 <coda_inflate+0xec8>
    1340:	ldr	r1, [r3, #36]	; 0x24
    1344:	cmp	r1, #0
    1348:	beq	1364 <coda_inflate+0xec8>
    134c:	ldr	r0, [r3, #40]	; 0x28
    1350:	ldr	r3, [r9, #64]	; 0x40
    1354:	cmp	r3, r0
    1358:	add	ip, r3, #1
    135c:	strcc	ip, [r9, #64]	; 0x40
    1360:	strbcc	r8, [r1, r3]
    1364:	cmp	r8, #0
    1368:	cmpne	r5, r7
    136c:	bhi	132c <coda_inflate+0xe90>
    1370:	ldr	r3, [r9, #16]
    1374:	tst	r3, #512	; 0x200
    1378:	bne	1770 <coda_inflate+0x12d4>
    137c:	cmp	r8, #0
    1380:	add	sl, sl, r7
    1384:	sub	r5, r5, r7
    1388:	bne	828 <coda_inflate+0x38c>
    138c:	ldr	r3, [r9, #16]
    1390:	b	df0 <coda_inflate+0x954>
    1394:	mov	r3, #11
    1398:	str	r3, [r9]
    139c:	b	6e0 <coda_inflate+0x244>
    13a0:	cmp	r5, #0
    13a4:	beq	828 <coda_inflate+0x38c>
    13a8:	sub	r2, sl, #1
    13ac:	mov	r7, #0
    13b0:	ldr	r3, [r9, #32]
    13b4:	add	r7, r7, #1
    13b8:	ldrb	r8, [r2, #1]!
    13bc:	cmp	r3, #0
    13c0:	beq	13e8 <coda_inflate+0xf4c>
    13c4:	ldr	r1, [r3, #28]
    13c8:	cmp	r1, #0
    13cc:	beq	13e8 <coda_inflate+0xf4c>
    13d0:	ldr	r0, [r3, #32]
    13d4:	ldr	r3, [r9, #64]	; 0x40
    13d8:	cmp	r3, r0
    13dc:	add	ip, r3, #1
    13e0:	strcc	ip, [r9, #64]	; 0x40
    13e4:	strbcc	r8, [r1, r3]
    13e8:	cmp	r8, #0
    13ec:	cmpne	r5, r7
    13f0:	bhi	13b0 <coda_inflate+0xf14>
    13f4:	ldr	r3, [r9, #16]
    13f8:	tst	r3, #512	; 0x200
    13fc:	bne	1614 <coda_inflate+0x1178>
    1400:	cmp	r8, #0
    1404:	add	sl, sl, r7
    1408:	sub	r5, r5, r7
    140c:	bne	828 <coda_inflate+0x38c>
    1410:	ldr	r3, [r9, #16]
    1414:	b	1230 <coda_inflate+0xd94>
    1418:	add	r7, r9, #4096	; 0x1000
    141c:	mvn	ip, #0
    1420:	ldr	r2, [r9, #76]	; 0x4c
    1424:	ldr	r1, [r9, #84]	; 0x54
    1428:	str	r3, [r7, #3012]	; 0xbc4
    142c:	mvn	ip, ip, lsl r1
    1430:	b	144c <coda_inflate+0xfb0>
    1434:	cmp	r5, #0
    1438:	beq	828 <coda_inflate+0x38c>
    143c:	ldrb	r3, [sl], #1
    1440:	sub	r5, r5, #1
    1444:	add	r6, r6, r3, lsl r4
    1448:	add	r4, r4, #8
    144c:	and	r3, ip, r6
    1450:	add	r0, r2, r3, lsl #2
    1454:	ldrb	r1, [r2, r3, lsl #2]
    1458:	ldrb	r3, [r0, #1]
    145c:	ldrh	r0, [r0, #2]
    1460:	cmp	r3, r4
    1464:	bhi	1434 <coda_inflate+0xf98>
    1468:	cmp	r1, #0
    146c:	beq	17a0 <coda_inflate+0x1304>
    1470:	tst	r1, #240	; 0xf0
    1474:	beq	19f0 <coda_inflate+0x1554>
    1478:	lsr	r6, r6, r3
    147c:	sub	r4, r4, r3
    1480:	str	r3, [r7, #3012]	; 0xbc4
    1484:	str	r0, [r9, #64]	; 0x40
    1488:	tst	r1, #32
    148c:	beq	18bc <coda_inflate+0x1420>
    1490:	mvn	r2, #0
    1494:	mov	r3, #11
    1498:	str	r2, [r7, #3012]	; 0xbc4
    149c:	str	r3, [r9]
    14a0:	b	6e0 <coda_inflate+0x244>
    14a4:	cmp	r3, #15
    14a8:	bls	15f4 <coda_inflate+0x1158>
    14ac:	cmp	r3, #16
    14b0:	beq	1998 <coda_inflate+0x14fc>
    14b4:	cmp	r3, #17
    14b8:	beq	1880 <coda_inflate+0x13e4>
    14bc:	add	r2, r0, #7
    14c0:	cmp	r4, r2
    14c4:	bcc	14e4 <coda_inflate+0x1048>
    14c8:	b	1820 <coda_inflate+0x1384>
    14cc:	ldrb	r3, [sl], #1
    14d0:	sub	r5, r5, #1
    14d4:	add	r6, r6, r3, lsl r4
    14d8:	add	r4, r4, #8
    14dc:	cmp	r4, r2
    14e0:	bcs	1820 <coda_inflate+0x1384>
    14e4:	cmp	r5, #0
    14e8:	bne	14cc <coda_inflate+0x1030>
    14ec:	b	828 <coda_inflate+0x38c>
    14f0:	.word	0x00000880
    14f4:	.word	0x000008a6
    14f8:	ldr	r2, [r9, #48]	; 0x30
    14fc:	ldr	r1, [sp, #12]
    1500:	cmp	r2, r0
    1504:	ldrcc	ip, [r9, #40]	; 0x28
    1508:	subcc	r0, r0, r2
    150c:	sub	r3, r1, r3
    1510:	ldr	r1, [r9, #52]	; 0x34
    1514:	addcc	r2, r2, ip
    1518:	add	r3, r2, r3
    151c:	add	r3, r1, r3
    1520:	ldr	r1, [r9, #64]	; 0x40
    1524:	cmp	r1, r0
    1528:	movcc	r0, r1
    152c:	ldr	ip, [sp, #8]
    1530:	ldr	r2, [sp, #20]
    1534:	cmp	r0, ip
    1538:	movcs	r0, ip
    153c:	sub	ip, ip, r0
    1540:	sub	r1, r1, r0
    1544:	sub	r2, r2, #1
    1548:	str	ip, [sp, #8]
    154c:	add	ip, r3, r0
    1550:	str	r1, [r9, #64]	; 0x40
    1554:	ldrb	r1, [r3], #1
    1558:	cmp	ip, r3
    155c:	strb	r1, [r2, #1]!
    1560:	bne	1554 <coda_inflate+0x10b8>
    1564:	ldr	r2, [sp, #20]
    1568:	ldr	r3, [r9, #64]	; 0x40
    156c:	add	r2, r2, r0
    1570:	cmp	r3, #0
    1574:	str	r2, [sp, #20]
    1578:	beq	c10 <coda_inflate+0x774>
    157c:	ldr	r3, [r9]
    1580:	b	544 <coda_inflate+0xa8>
    1584:	ldr	r1, [r9, #32]
    1588:	cmp	r1, #0
    158c:	beq	15cc <coda_inflate+0x1130>
    1590:	ldr	r0, [r1, #16]
    1594:	cmp	r0, #0
    1598:	beq	15cc <coda_inflate+0x1130>
    159c:	ldr	ip, [r1, #20]
    15a0:	ldr	r3, [r1, #24]
    15a4:	sub	lr, ip, r2
    15a8:	add	r1, lr, r7
    15ac:	add	r0, r0, lr
    15b0:	cmp	r1, r3
    15b4:	mov	r1, sl
    15b8:	addhi	r2, r3, r2
    15bc:	movls	r2, r7
    15c0:	subhi	r2, r2, ip
    15c4:	bl	0 <memcpy>
    15c8:	ldr	r3, [r9, #16]
    15cc:	tst	r3, #512	; 0x200
    15d0:	bne	1788 <coda_inflate+0x12ec>
    15d4:	ldr	r2, [r9, #64]	; 0x40
    15d8:	sub	r5, r5, r7
    15dc:	add	sl, sl, r7
    15e0:	sub	r2, r2, r7
    15e4:	str	r2, [r9, #64]	; 0x40
    15e8:	b	1200 <coda_inflate+0xd64>
    15ec:	mvn	r7, #3
    15f0:	b	900 <coda_inflate+0x464>
    15f4:	add	r1, r9, ip, lsl #1
    15f8:	add	r2, ip, #1
    15fc:	sub	r4, r4, r0
    1600:	lsr	r6, r6, r0
    1604:	mov	ip, r2
    1608:	str	r2, [r9, #104]	; 0x68
    160c:	strh	r3, [r1, #112]	; 0x70
    1610:	b	7c8 <coda_inflate+0x32c>
    1614:	mov	r2, r7
    1618:	mov	r1, sl
    161c:	ldr	r0, [r9, #24]
    1620:	bl	0 <coda_crc32>
    1624:	str	r0, [r9, #24]
    1628:	b	1400 <coda_inflate+0xf64>
    162c:	mov	r4, #0
    1630:	mov	r6, r4
    1634:	b	d54 <coda_inflate+0x8b8>
    1638:	add	r1, r1, r3
    163c:	mvn	r8, #0
    1640:	str	r0, [sp, #40]	; 0x28
    1644:	mvn	r8, r8, lsl r1
    1648:	and	r1, r6, r8
    164c:	add	r3, r0, r1, lsr r3
    1650:	add	r0, r2, r3, lsl #2
    1654:	ldrb	r1, [r2, r3, lsl #2]
    1658:	ldrb	r3, [r0, #1]
    165c:	ldrh	r0, [r0, #2]
    1660:	add	r7, r3, ip
    1664:	cmp	r7, r4
    1668:	bls	16c0 <coda_inflate+0x1224>
    166c:	cmp	r5, #0
    1670:	beq	828 <coda_inflate+0x38c>
    1674:	str	ip, [sp, #44]	; 0x2c
    1678:	ldr	r7, [sp, #40]	; 0x28
    167c:	b	1688 <coda_inflate+0x11ec>
    1680:	cmp	r5, #0
    1684:	beq	828 <coda_inflate+0x38c>
    1688:	ldrb	r3, [sl], #1
    168c:	sub	r5, r5, #1
    1690:	add	r6, r6, r3, lsl r4
    1694:	add	r4, r4, #8
    1698:	and	r3, r8, r6
    169c:	add	r3, r7, r3, lsr lr
    16a0:	add	r0, r2, r3, lsl #2
    16a4:	ldrb	r1, [r2, r3, lsl #2]
    16a8:	ldrb	r3, [r0, #1]
    16ac:	ldrh	r0, [r0, #2]
    16b0:	add	ip, r3, lr
    16b4:	cmp	ip, r4
    16b8:	bhi	1680 <coda_inflate+0x11e4>
    16bc:	ldr	ip, [sp, #44]	; 0x2c
    16c0:	add	r7, r9, #4096	; 0x1000
    16c4:	lsr	r6, r6, lr
    16c8:	sub	r4, r4, ip
    16cc:	ldr	r2, [r7, #3012]	; 0xbc4
    16d0:	add	lr, lr, r2
    16d4:	b	d18 <coda_inflate+0x87c>
    16d8:	mov	r3, #16
    16dc:	lsr	r6, r6, #3
    16e0:	sub	r4, r4, #3
    16e4:	str	r3, [r9]
    16e8:	b	5e4 <coda_inflate+0x148>
    16ec:	ldr	r2, [sp, #20]
    16f0:	ldr	r0, [r9, #64]	; 0x40
    16f4:	sub	r3, r2, r3
    16f8:	mov	r1, r0
    16fc:	b	152c <coda_inflate+0x1090>
    1700:	ldr	r3, [r9, #32]
    1704:	cmp	r3, #0
    1708:	strne	r6, [r3, #4]
    170c:	ldr	r3, [r9, #16]
    1710:	tst	r3, #512	; 0x200
    1714:	bne	17c0 <coda_inflate+0x1324>
    1718:	mov	r3, #3
    171c:	mov	r6, #0
    1720:	mov	r4, r6
    1724:	str	r3, [r9]
    1728:	b	11a4 <coda_inflate+0xd08>
    172c:	lsr	r3, r6, #16
    1730:	uxth	r7, r6
    1734:	eor	r3, r3, #65280	; 0xff00
    1738:	eor	r3, r3, #255	; 0xff
    173c:	cmp	r7, r3
    1740:	beq	17fc <coda_inflate+0x1360>
    1744:	movw	r3, #0
    1748:	movt	r3, #0
    174c:	mov	r2, #29
    1750:	str	r3, [fp, #24]
    1754:	str	r2, [r9]
    1758:	b	c88 <coda_inflate+0x7ec>
    175c:	and	r1, r1, #15
    1760:	mov	r3, #23
    1764:	str	r3, [r9]
    1768:	strd	r0, [r9, #68]	; 0x44
    176c:	b	c20 <coda_inflate+0x784>
    1770:	mov	r2, r7
    1774:	mov	r1, sl
    1778:	ldr	r0, [r9, #24]
    177c:	bl	0 <coda_crc32>
    1780:	str	r0, [r9, #24]
    1784:	b	137c <coda_inflate+0xee0>
    1788:	mov	r2, r7
    178c:	mov	r1, sl
    1790:	ldr	r0, [r9, #24]
    1794:	bl	0 <coda_crc32>
    1798:	str	r0, [r9, #24]
    179c:	b	15d4 <coda_inflate+0x1138>
    17a0:	lsr	r6, r6, r3
    17a4:	sub	r4, r4, r3
    17a8:	str	r3, [r7, #3012]	; 0xbc4
    17ac:	str	r0, [r9, #64]	; 0x40
    17b0:	mov	r3, #25
    17b4:	ldr	r1, [sp, #20]
    17b8:	str	r3, [r9]
    17bc:	b	a90 <coda_inflate+0x5f4>
    17c0:	mov	r2, #4
    17c4:	add	r1, sp, #52	; 0x34
    17c8:	ldr	r0, [r9, #24]
    17cc:	str	r6, [sp, #52]	; 0x34
    17d0:	bl	0 <coda_crc32>
    17d4:	str	r0, [r9, #24]
    17d8:	b	1718 <coda_inflate+0x127c>
    17dc:	tst	r6, #57344	; 0xe000
    17e0:	beq	1adc <coda_inflate+0x1640>
    17e4:	movw	r3, #0
    17e8:	movt	r3, #0
    17ec:	mov	r2, #29
    17f0:	str	r3, [fp, #24]
    17f4:	str	r2, [r9]
    17f8:	b	c88 <coda_inflate+0x7ec>
    17fc:	ldr	r2, [sp, #24]
    1800:	mov	r3, #14
    1804:	mov	r4, #0
    1808:	str	r3, [r9]
    180c:	str	r7, [r9, #64]	; 0x40
    1810:	cmp	r2, #6
    1814:	beq	1ca8 <coda_inflate+0x180c>
    1818:	mov	r6, r4
    181c:	b	1248 <coda_inflate+0xdac>
    1820:	lsr	r6, r6, r0
    1824:	rsb	r0, r0, #-16777216	; 0xff000000
    1828:	mov	r2, #0
    182c:	add	r0, r0, #16711680	; 0xff0000
    1830:	add	r0, r0, #65280	; 0xff00
    1834:	and	r1, r6, #127	; 0x7f
    1838:	lsr	r6, r6, #7
    183c:	add	r0, r0, #249	; 0xf9
    1840:	add	r1, r1, #11
    1844:	add	r4, r4, r0
    1848:	add	r1, r1, ip
    184c:	cmp	r1, lr
    1850:	bhi	1c54 <coda_inflate+0x17b8>
    1854:	ldr	r0, [sp, #40]	; 0x28
    1858:	add	r3, r9, ip, lsl #1
    185c:	uxth	r2, r2
    1860:	add	r3, r3, #110	; 0x6e
    1864:	add	r0, r0, r1, lsl #1
    1868:	strh	r2, [r3, #2]!
    186c:	cmp	r0, r3
    1870:	bne	1868 <coda_inflate+0x13cc>
    1874:	mov	ip, r1
    1878:	str	r1, [r9, #104]	; 0x68
    187c:	b	7c8 <coda_inflate+0x32c>
    1880:	add	r2, r0, #3
    1884:	cmp	r4, r2
    1888:	bcc	18a8 <coda_inflate+0x140c>
    188c:	b	1a9c <coda_inflate+0x1600>
    1890:	ldrb	r3, [sl], #1
    1894:	sub	r5, r5, #1
    1898:	add	r6, r6, r3, lsl r4
    189c:	add	r4, r4, #8
    18a0:	cmp	r4, r2
    18a4:	bcs	1a9c <coda_inflate+0x1600>
    18a8:	cmp	r5, #0
    18ac:	bne	1890 <coda_inflate+0x13f4>
    18b0:	b	828 <coda_inflate+0x38c>
    18b4:	mov	r3, sl
    18b8:	b	fb4 <coda_inflate+0xb18>
    18bc:	tst	r1, #64	; 0x40
    18c0:	beq	1ac8 <coda_inflate+0x162c>
    18c4:	movw	r3, #0
    18c8:	movt	r3, #0
    18cc:	mov	r2, #29
    18d0:	str	r3, [fp, #24]
    18d4:	str	r2, [r9]
    18d8:	b	c88 <coda_inflate+0x7ec>
    18dc:	movw	r2, #0
    18e0:	movt	r2, #0
    18e4:	lsr	r6, r6, #3
    18e8:	mov	r1, #29
    18ec:	sub	r4, r4, #3
    18f0:	str	r2, [fp, #24]
    18f4:	str	r1, [r9]
    18f8:	b	c88 <coda_inflate+0x7ec>
    18fc:	movw	r3, #0
    1900:	movt	r3, #0
    1904:	mov	r2, #29
    1908:	str	r3, [fp, #24]
    190c:	str	r2, [r9]
    1910:	b	c88 <coda_inflate+0x7ec>
    1914:	mov	r2, #2
    1918:	add	r1, sp, #52	; 0x34
    191c:	ldr	r0, [r9, #24]
    1920:	strh	r6, [sp, #52]	; 0x34
    1924:	mov	r6, #0
    1928:	bl	0 <coda_crc32>
    192c:	ldr	r3, [r9, #16]
    1930:	mov	r4, r6
    1934:	str	r0, [r9, #24]
    1938:	and	r2, r3, #1024	; 0x400
    193c:	b	11d8 <coda_inflate+0xd3c>
    1940:	mov	r4, #0
    1944:	mov	r6, r4
    1948:	ldr	r1, [sp, #8]
    194c:	mov	r3, #28
    1950:	mov	r7, #1
    1954:	ldr	r2, [sp, #12]
    1958:	str	r3, [r9]
    195c:	sub	r8, r2, r1
    1960:	b	834 <coda_inflate+0x398>
    1964:	mov	r3, #17
    1968:	str	r3, [r9]
    196c:	str	r1, [r9, #104]	; 0x68
    1970:	b	f88 <coda_inflate+0xaec>
    1974:	ldr	r2, [sp, #24]
    1978:	mov	r3, #19
    197c:	str	r3, [r9]
    1980:	cmp	r2, #6
    1984:	bne	c10 <coda_inflate+0x774>
    1988:	mov	r7, r0
    198c:	ldrd	r2, [sp, #8]
    1990:	sub	r8, r3, r2
    1994:	b	834 <coda_inflate+0x398>
    1998:	add	r2, r0, #2
    199c:	cmp	r2, r4
    19a0:	bhi	19c0 <coda_inflate+0x1524>
    19a4:	b	1b20 <coda_inflate+0x1684>
    19a8:	ldrb	r3, [sl], #1
    19ac:	sub	r5, r5, #1
    19b0:	add	r6, r6, r3, lsl r4
    19b4:	add	r4, r4, #8
    19b8:	cmp	r4, r2
    19bc:	bcs	1b20 <coda_inflate+0x1684>
    19c0:	cmp	r5, #0
    19c4:	bne	19a8 <coda_inflate+0x150c>
    19c8:	b	828 <coda_inflate+0x38c>
    19cc:	ldr	r7, [sp, #8]
    19d0:	ldr	r8, [sp, #12]
    19d4:	b	834 <coda_inflate+0x398>
    19d8:	mov	r3, #30
    19dc:	mvn	r7, #3
    19e0:	str	r3, [r9]
    19e4:	b	900 <coda_inflate+0x464>
    19e8:	bl	0 <coda_adler32>
    19ec:	b	a24 <coda_inflate+0x588>
    19f0:	mvn	ip, #0
    19f4:	add	r1, r1, r3
    19f8:	mvn	r1, ip, lsl r1
    19fc:	str	r1, [sp, #44]	; 0x2c
    1a00:	and	r1, r6, r1
    1a04:	add	r1, r0, r1, lsr r3
    1a08:	add	lr, r2, r1, lsl #2
    1a0c:	ldrb	r1, [r2, r1, lsl #2]
    1a10:	ldrb	ip, [lr, #1]
    1a14:	ldrh	r8, [lr, #2]
    1a18:	add	lr, ip, r3
    1a1c:	cmp	lr, r4
    1a20:	bls	1a78 <coda_inflate+0x15dc>
    1a24:	cmp	r5, #0
    1a28:	beq	828 <coda_inflate+0x38c>
    1a2c:	str	r9, [sp, #40]	; 0x28
    1a30:	ldr	r9, [sp, #44]	; 0x2c
    1a34:	b	1a40 <coda_inflate+0x15a4>
    1a38:	cmp	r5, #0
    1a3c:	beq	1bbc <coda_inflate+0x1720>
    1a40:	ldrb	r1, [sl], #1
    1a44:	sub	r5, r5, #1
    1a48:	add	r6, r6, r1, lsl r4
    1a4c:	add	r4, r4, #8
    1a50:	and	r1, r6, r9
    1a54:	add	r1, r0, r1, lsr r3
    1a58:	add	lr, r2, r1, lsl #2
    1a5c:	ldrb	r1, [r2, r1, lsl #2]
    1a60:	ldrb	ip, [lr, #1]
    1a64:	ldrh	r8, [lr, #2]
    1a68:	add	lr, ip, r3
    1a6c:	cmp	lr, r4
    1a70:	bhi	1a38 <coda_inflate+0x159c>
    1a74:	ldr	r9, [sp, #40]	; 0x28
    1a78:	lsr	r6, r6, r3
    1a7c:	sub	r4, r4, r3
    1a80:	cmp	r1, #0
    1a84:	sub	r4, r4, ip
    1a88:	str	lr, [r7, #3012]	; 0xbc4
    1a8c:	lsr	r6, r6, ip
    1a90:	str	r8, [r9, #64]	; 0x40
    1a94:	bne	1488 <coda_inflate+0xfec>
    1a98:	b	17b0 <coda_inflate+0x1314>
    1a9c:	lsr	r6, r6, r0
    1aa0:	rsb	r0, r0, #-16777216	; 0xff000000
    1aa4:	mov	r2, #0
    1aa8:	add	r0, r0, #16711680	; 0xff0000
    1aac:	add	r0, r0, #65280	; 0xff00
    1ab0:	and	r1, r6, #7
    1ab4:	lsr	r6, r6, #3
    1ab8:	add	r0, r0, #253	; 0xfd
    1abc:	add	r1, r1, #3
    1ac0:	add	r4, r4, r0
    1ac4:	b	1848 <coda_inflate+0x13ac>
    1ac8:	and	r1, r1, #15
    1acc:	mov	r3, #21
    1ad0:	str	r3, [r9]
    1ad4:	str	r1, [r9, #72]	; 0x48
    1ad8:	b	c9c <coda_inflate+0x800>
    1adc:	ldr	r3, [r9, #32]
    1ae0:	cmp	r3, #0
    1ae4:	ubfxne	r2, r6, #8, #1
    1ae8:	strne	r2, [r3]
    1aec:	tst	r6, #512	; 0x200
    1af0:	bne	1bd0 <coda_inflate+0x1734>
    1af4:	mov	r3, #2
    1af8:	mov	r4, #0
    1afc:	mov	r6, r4
    1b00:	str	r3, [r9]
    1b04:	b	1174 <coda_inflate+0xcd8>
    1b08:	ldr	r3, [sp, #8]
    1b0c:	mov	r4, #0
    1b10:	mov	r6, r4
    1b14:	str	r3, [sp, #12]
    1b18:	ldr	r3, [r9, #8]
    1b1c:	b	71c <coda_inflate+0x280>
    1b20:	cmp	ip, #0
    1b24:	lsr	r6, r6, r0
    1b28:	sub	r4, r4, r0
    1b2c:	beq	1c54 <coda_inflate+0x17b8>
    1b30:	add	r3, r9, ip, lsl #1
    1b34:	and	r1, r6, #3
    1b38:	sub	r4, r4, #2
    1b3c:	add	r1, r1, #3
    1b40:	lsr	r6, r6, #2
    1b44:	ldrh	r2, [r3, #110]	; 0x6e
    1b48:	b	1848 <coda_inflate+0x13ac>
    1b4c:	mov	r3, #18
    1b50:	mov	ip, r0
    1b54:	str	r3, [r9]
    1b58:	str	r0, [r9, #104]	; 0x68
    1b5c:	b	7b0 <coda_inflate+0x314>
    1b60:	ldr	r3, [r9]
    1b64:	cmp	r3, #29
    1b68:	beq	c88 <coda_inflate+0x7ec>
    1b6c:	add	r3, r9, #624	; 0x270
    1b70:	ldrh	r3, [r3]
    1b74:	cmp	r3, #0
    1b78:	bne	1bec <coda_inflate+0x1750>
    1b7c:	movw	r3, #0
    1b80:	movt	r3, #0
    1b84:	mov	r2, #29
    1b88:	str	r3, [fp, #24]
    1b8c:	str	r2, [r9]
    1b90:	b	c88 <coda_inflate+0x7ec>
    1b94:	ldr	r3, [sp, #20]
    1b98:	mov	r7, #2
    1b9c:	str	sl, [fp]
    1ba0:	str	r5, [fp, #4]
    1ba4:	str	r3, [fp, #12]
    1ba8:	ldr	r3, [sp, #8]
    1bac:	str	r3, [fp, #16]
    1bb0:	str	r6, [r9, #56]	; 0x38
    1bb4:	str	r4, [r9, #60]	; 0x3c
    1bb8:	b	900 <coda_inflate+0x464>
    1bbc:	ldrd	r2, [sp, #8]
    1bc0:	mov	r7, r5
    1bc4:	ldr	r9, [sp, #40]	; 0x28
    1bc8:	sub	r8, r3, r2
    1bcc:	b	834 <coda_inflate+0x398>
    1bd0:	mov	r2, #2
    1bd4:	add	r1, sp, #52	; 0x34
    1bd8:	ldr	r0, [r9, #24]
    1bdc:	strh	r6, [sp, #52]	; 0x34
    1be0:	bl	0 <coda_crc32>
    1be4:	str	r0, [r9, #24]
    1be8:	b	1af4 <coda_inflate+0x1658>
    1bec:	add	r2, r9, #112	; 0x70
    1bf0:	add	r3, r9, #1328	; 0x530
    1bf4:	mov	r0, r2
    1bf8:	add	lr, r9, #752	; 0x2f0
    1bfc:	mov	r1, #9
    1c00:	add	ip, r9, #84	; 0x54
    1c04:	str	r3, [r9, #76]	; 0x4c
    1c08:	add	r7, r9, #108	; 0x6c
    1c0c:	mov	r2, r8
    1c10:	str	r0, [sp, #40]	; 0x28
    1c14:	str	r1, [r9, #84]	; 0x54
    1c18:	mov	r1, r0
    1c1c:	mov	r0, #1
    1c20:	str	r3, [r9, #108]	; 0x6c
    1c24:	mov	r3, r7
    1c28:	stm	sp, {ip, lr}
    1c2c:	str	lr, [sp, #44]	; 0x2c
    1c30:	bl	0 <coda_inflate_table>
    1c34:	cmp	r0, #0
    1c38:	beq	1cd4 <coda_inflate+0x1838>
    1c3c:	movw	r3, #0
    1c40:	movt	r3, #0
    1c44:	mov	r2, #29
    1c48:	str	r3, [fp, #24]
    1c4c:	str	r2, [r9]
    1c50:	b	c88 <coda_inflate+0x7ec>
    1c54:	movw	r3, #0
    1c58:	movt	r3, #0
    1c5c:	mov	r2, #29
    1c60:	str	r3, [fp, #24]
    1c64:	str	r2, [r9]
    1c68:	b	c88 <coda_inflate+0x7ec>
    1c6c:	mov	r1, #1
    1c70:	mov	r2, #0
    1c74:	lsl	r3, r1, r3
    1c78:	mov	r0, r2
    1c7c:	mov	r1, r2
    1c80:	str	r3, [r9, #20]
    1c84:	bl	0 <coda_adler32>
    1c88:	ands	r6, r6, #512	; 0x200
    1c8c:	str	r0, [r9, #24]
    1c90:	str	r0, [fp, #48]	; 0x30
    1c94:	bne	64c <coda_inflate+0x1b0>
    1c98:	mov	r3, #11
    1c9c:	mov	r4, r6
    1ca0:	str	r3, [r9]
    1ca4:	b	6e0 <coda_inflate+0x244>
    1ca8:	ldrd	r2, [sp, #8]
    1cac:	mov	r7, r4
    1cb0:	mov	r6, r4
    1cb4:	sub	r8, r3, r2
    1cb8:	b	834 <coda_inflate+0x398>
    1cbc:	ldrd	r2, [sp, #8]
    1cc0:	mov	r7, r0
    1cc4:	lsr	r6, r6, #3
    1cc8:	sub	r4, r4, #3
    1ccc:	sub	r8, r3, r2
    1cd0:	b	834 <coda_inflate+0x398>
    1cd4:	mov	r0, #6
    1cd8:	add	r2, r9, #88	; 0x58
    1cdc:	ldr	r1, [r9, #96]	; 0x60
    1ce0:	mov	r3, r7
    1ce4:	ldr	ip, [r9, #108]	; 0x6c
    1ce8:	str	ip, [r9, #80]	; 0x50
    1cec:	str	r0, [r9, #88]	; 0x58
    1cf0:	mov	r0, #2
    1cf4:	str	r2, [sp]
    1cf8:	ldr	r2, [sp, #40]	; 0x28
    1cfc:	add	r1, r2, r1, lsl #1
    1d00:	ldr	r2, [sp, #44]	; 0x2c
    1d04:	str	r2, [sp, #4]
    1d08:	ldr	r2, [r9, #100]	; 0x64
    1d0c:	bl	0 <coda_inflate_table>
    1d10:	cmp	r0, #0
    1d14:	beq	1974 <coda_inflate+0x14d8>
    1d18:	movw	r3, #0
    1d1c:	movt	r3, #0
    1d20:	mov	r2, #29
    1d24:	str	r3, [fp, #24]
    1d28:	str	r2, [r9]
    1d2c:	b	c88 <coda_inflate+0x7ec>

00001d30 <coda_inflateEnd>:
    1d30:	str	r4, [sp, #-8]!
    1d34:	subs	r4, r0, #0
    1d38:	str	lr, [sp, #4]
    1d3c:	beq	1d98 <coda_inflateEnd+0x68>
    1d40:	ldr	r1, [r4, #28]
    1d44:	cmp	r1, #0
    1d48:	beq	1d98 <coda_inflateEnd+0x68>
    1d4c:	ldr	r3, [r4, #36]	; 0x24
    1d50:	cmp	r3, #0
    1d54:	beq	1d98 <coda_inflateEnd+0x68>
    1d58:	ldr	r2, [r1, #52]	; 0x34
    1d5c:	ldr	r0, [r4, #40]	; 0x28
    1d60:	cmp	r2, #0
    1d64:	beq	1d7c <coda_inflateEnd+0x4c>
    1d68:	mov	r1, r2
    1d6c:	blx	r3
    1d70:	ldr	r1, [r4, #28]
    1d74:	ldr	r3, [r4, #36]	; 0x24
    1d78:	ldr	r0, [r4, #40]	; 0x28
    1d7c:	blx	r3
    1d80:	mov	r3, #0
    1d84:	mov	r0, r3
    1d88:	str	r3, [r4, #28]
    1d8c:	ldr	r4, [sp]
    1d90:	add	sp, sp, #4
    1d94:	pop	{pc}		; (ldr pc, [sp], #4)
    1d98:	mvn	r0, #1
    1d9c:	b	1d8c <coda_inflateEnd+0x5c>

00001da0 <coda_inflateGetDictionary>:
    1da0:	cmp	r0, #0
    1da4:	beq	1e3c <coda_inflateGetDictionary+0x9c>
    1da8:	strd	r4, [sp, #-16]!
    1dac:	ldr	r4, [r0, #28]
    1db0:	str	r6, [sp, #8]
    1db4:	str	lr, [sp, #12]
    1db8:	cmp	r4, #0
    1dbc:	beq	1e34 <coda_inflateGetDictionary+0x94>
    1dc0:	mov	r5, r2
    1dc4:	ldr	r2, [r4, #44]	; 0x2c
    1dc8:	cmp	r2, #0
    1dcc:	cmpne	r1, #0
    1dd0:	bne	1dfc <coda_inflateGetDictionary+0x5c>
    1dd4:	cmp	r5, #0
    1dd8:	moveq	r0, r5
    1ddc:	beq	1dec <coda_inflateGetDictionary+0x4c>
    1de0:	ldr	r3, [r4, #44]	; 0x2c
    1de4:	mov	r0, #0
    1de8:	str	r3, [r5]
    1dec:	ldrd	r4, [sp]
    1df0:	ldr	r6, [sp, #8]
    1df4:	add	sp, sp, #12
    1df8:	pop	{pc}		; (ldr pc, [sp], #4)
    1dfc:	mov	r0, r1
    1e00:	ldr	r1, [r4, #48]	; 0x30
    1e04:	ldr	ip, [r4, #52]	; 0x34
    1e08:	sub	r2, r2, r1
    1e0c:	add	r1, ip, r1
    1e10:	bl	0 <memcpy>
    1e14:	mov	r3, r0
    1e18:	ldr	r0, [r4, #44]	; 0x2c
    1e1c:	ldr	r2, [r4, #48]	; 0x30
    1e20:	ldr	r1, [r4, #52]	; 0x34
    1e24:	sub	r0, r0, r2
    1e28:	add	r0, r3, r0
    1e2c:	bl	0 <memcpy>
    1e30:	b	1dd4 <coda_inflateGetDictionary+0x34>
    1e34:	mvn	r0, #1
    1e38:	b	1dec <coda_inflateGetDictionary+0x4c>
    1e3c:	mvn	r0, #1
    1e40:	bx	lr

00001e44 <coda_inflateSetDictionary>:
    1e44:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1e48:	strd	r6, [sp, #8]
    1e4c:	subs	r6, r0, #0
    1e50:	str	r8, [sp, #16]
    1e54:	str	lr, [sp, #20]
    1e58:	beq	1ef4 <coda_inflateSetDictionary+0xb0>
    1e5c:	ldr	r4, [r6, #28]
    1e60:	cmp	r4, #0
    1e64:	beq	1ef4 <coda_inflateSetDictionary+0xb0>
    1e68:	mov	r5, r2
    1e6c:	mov	r7, r1
    1e70:	ldr	r3, [r4]
    1e74:	ldr	r2, [r4, #8]
    1e78:	cmp	r2, #0
    1e7c:	bne	1ebc <coda_inflateSetDictionary+0x78>
    1e80:	cmp	r3, #10
    1e84:	beq	1ec4 <coda_inflateSetDictionary+0x80>
    1e88:	add	r1, r7, r5
    1e8c:	mov	r2, r5
    1e90:	mov	r0, r6
    1e94:	bl	0 <updatewindow>
    1e98:	cmp	r0, #0
    1e9c:	moveq	r3, #1
    1ea0:	streq	r3, [r4, #12]
    1ea4:	bne	1efc <coda_inflateSetDictionary+0xb8>
    1ea8:	ldrd	r4, [sp]
    1eac:	ldrd	r6, [sp, #8]
    1eb0:	ldr	r8, [sp, #16]
    1eb4:	add	sp, sp, #20
    1eb8:	pop	{pc}		; (ldr pc, [sp], #4)
    1ebc:	cmp	r3, #10
    1ec0:	bne	1ef4 <coda_inflateSetDictionary+0xb0>
    1ec4:	mov	r2, #0
    1ec8:	mov	r1, r2
    1ecc:	mov	r0, r2
    1ed0:	bl	0 <coda_adler32>
    1ed4:	mov	r2, r5
    1ed8:	mov	r1, r7
    1edc:	bl	0 <coda_adler32>
    1ee0:	ldr	r3, [r4, #24]
    1ee4:	cmp	r3, r0
    1ee8:	beq	1e88 <coda_inflateSetDictionary+0x44>
    1eec:	mvn	r0, #2
    1ef0:	b	1ea8 <coda_inflateSetDictionary+0x64>
    1ef4:	mvn	r0, #1
    1ef8:	b	1ea8 <coda_inflateSetDictionary+0x64>
    1efc:	mov	r3, #30
    1f00:	mvn	r0, #3
    1f04:	str	r3, [r4]
    1f08:	b	1ea8 <coda_inflateSetDictionary+0x64>

00001f0c <coda_inflateGetHeader>:
    1f0c:	cmp	r0, #0
    1f10:	beq	1f40 <coda_inflateGetHeader+0x34>
    1f14:	ldr	r3, [r0, #28]
    1f18:	cmp	r3, #0
    1f1c:	beq	1f40 <coda_inflateGetHeader+0x34>
    1f20:	ldr	r2, [r3, #8]
    1f24:	tst	r2, #2
    1f28:	beq	1f40 <coda_inflateGetHeader+0x34>
    1f2c:	mov	r2, #0
    1f30:	str	r1, [r3, #32]
    1f34:	mov	r0, r2
    1f38:	str	r2, [r1, #48]	; 0x30
    1f3c:	bx	lr
    1f40:	mvn	r0, #1
    1f44:	bx	lr

00001f48 <coda_inflateSync>:
    1f48:	cmp	r0, #0
    1f4c:	beq	21b0 <coda_inflateSync+0x268>
    1f50:	strd	r4, [sp, #-20]!	; 0xffffffec
    1f54:	ldr	r5, [r0, #28]
    1f58:	strd	r6, [sp, #8]
    1f5c:	str	lr, [sp, #16]
    1f60:	sub	sp, sp, #12
    1f64:	cmp	r5, #0
    1f68:	beq	21b8 <coda_inflateSync+0x270>
    1f6c:	ldr	r7, [r0, #4]
    1f70:	cmp	r7, #0
    1f74:	bne	2058 <coda_inflateSync+0x110>
    1f78:	ldr	r3, [r5, #60]	; 0x3c
    1f7c:	cmp	r3, #7
    1f80:	bls	21a8 <coda_inflateSync+0x260>
    1f84:	ldr	r2, [r5]
    1f88:	ldr	r6, [r0]
    1f8c:	cmp	r2, #31
    1f90:	beq	2194 <coda_inflateSync+0x24c>
    1f94:	ldr	r2, [r5, #56]	; 0x38
    1f98:	and	r1, r3, #7
    1f9c:	mov	ip, #31
    1fa0:	bic	r3, r3, #7
    1fa4:	str	ip, [r5]
    1fa8:	lsl	r2, r2, r1
    1fac:	strd	r2, [r5, #56]	; 0x38
    1fb0:	sub	lr, r3, #8
    1fb4:	add	r4, sp, #4
    1fb8:	lsr	lr, lr, #3
    1fbc:	add	r1, sp, #5
    1fc0:	mov	r3, r4
    1fc4:	add	r1, r1, lr
    1fc8:	strb	r2, [r3], #1
    1fcc:	cmp	r3, r1
    1fd0:	lsr	r2, r2, #8
    1fd4:	bne	1fc8 <coda_inflateSync+0x80>
    1fd8:	mov	ip, #0
    1fdc:	add	lr, lr, #1
    1fe0:	str	r2, [r5, #56]	; 0x38
    1fe4:	mov	r3, ip
    1fe8:	mov	r1, ip
    1fec:	str	ip, [r5, #60]	; 0x3c
    1ff0:	b	202c <coda_inflateSync+0xe4>
    1ff4:	cmp	ip, #0
    1ff8:	rsb	r3, r3, #4
    1ffc:	mov	r2, #1
    2000:	movne	r3, #0
    2004:	bne	2014 <coda_inflateSync+0xcc>
    2008:	cmp	r3, #3
    200c:	movhi	r2, #0
    2010:	movls	r2, #1
    2014:	add	r1, r1, #1
    2018:	cmp	r1, lr
    201c:	movcs	ip, #0
    2020:	andcc	ip, r2, #1
    2024:	cmp	ip, #0
    2028:	beq	2094 <coda_inflateSync+0x14c>
    202c:	ldrb	ip, [r4], #1
    2030:	cmp	r3, #2
    2034:	movcc	r2, #0
    2038:	movcs	r2, #255	; 0xff
    203c:	cmp	ip, r2
    2040:	bne	1ff4 <coda_inflateSync+0xac>
    2044:	add	r3, r3, #1
    2048:	cmp	r3, #3
    204c:	movhi	r2, #0
    2050:	movls	r2, #1
    2054:	b	2014 <coda_inflateSync+0xcc>
    2058:	ldr	r3, [r5]
    205c:	ldr	r6, [r0]
    2060:	cmp	r3, #31
    2064:	beq	2180 <coda_inflateSync+0x238>
    2068:	ldrd	r2, [r5, #56]	; 0x38
    206c:	mov	r1, #31
    2070:	str	r1, [r5]
    2074:	and	r1, r3, #7
    2078:	bic	r3, r3, #7
    207c:	lsl	r2, r2, r1
    2080:	cmp	r3, #7
    2084:	strd	r2, [r5, #56]	; 0x38
    2088:	movls	r2, #1
    208c:	movls	r3, #0
    2090:	bhi	1fb0 <coda_inflateSync+0x68>
    2094:	str	r3, [r5, #104]	; 0x68
    2098:	ldr	r7, [r0, #4]
    209c:	cmp	r7, #0
    20a0:	movne	lr, r2
    20a4:	moveq	lr, #0
    20a8:	cmp	lr, #0
    20ac:	beq	21c0 <coda_inflateSync+0x278>
    20b0:	sub	r4, r6, #1
    20b4:	mov	r1, #0
    20b8:	b	20f4 <coda_inflateSync+0x1ac>
    20bc:	cmp	ip, #0
    20c0:	rsb	r3, r3, #4
    20c4:	mov	r2, lr
    20c8:	movne	r3, #0
    20cc:	bne	20dc <coda_inflateSync+0x194>
    20d0:	cmp	r3, #3
    20d4:	movhi	r2, #0
    20d8:	movls	r2, #1
    20dc:	add	r1, r1, #1
    20e0:	cmp	r1, r7
    20e4:	movcs	r2, #0
    20e8:	andcc	r2, r2, #1
    20ec:	cmp	r2, #0
    20f0:	beq	2120 <coda_inflateSync+0x1d8>
    20f4:	ldrb	ip, [r4, #1]!
    20f8:	cmp	r3, #2
    20fc:	movcc	r2, #0
    2100:	movcs	r2, #255	; 0xff
    2104:	cmp	ip, r2
    2108:	bne	20bc <coda_inflateSync+0x174>
    210c:	add	r3, r3, #1
    2110:	cmp	r3, #3
    2114:	movhi	r2, #0
    2118:	movls	r2, #1
    211c:	b	20dc <coda_inflateSync+0x194>
    2120:	add	r6, r6, r1
    2124:	cmp	r3, #4
    2128:	ldr	r4, [r0, #8]
    212c:	str	r3, [r5, #104]	; 0x68
    2130:	ldr	r3, [r0, #4]
    2134:	str	r6, [r0]
    2138:	add	r4, r1, r4
    213c:	sub	r3, r3, r1
    2140:	str	r3, [r0, #4]
    2144:	str	r4, [r0, #8]
    2148:	bne	21a0 <coda_inflateSync+0x258>
    214c:	ldr	r7, [r0, #20]
    2150:	mov	r6, r0
    2154:	bl	208 <coda_inflateReset>
    2158:	mov	r3, #11
    215c:	mov	r0, #0
    2160:	str	r4, [r6, #8]
    2164:	str	r7, [r6, #20]
    2168:	str	r3, [r5]
    216c:	add	sp, sp, #12
    2170:	ldrd	r4, [sp]
    2174:	ldrd	r6, [sp, #8]
    2178:	add	sp, sp, #16
    217c:	pop	{pc}		; (ldr pc, [sp], #4)
    2180:	ldr	r3, [r5, #104]	; 0x68
    2184:	cmp	r3, #3
    2188:	movhi	r2, #0
    218c:	movls	r2, #1
    2190:	b	209c <coda_inflateSync+0x154>
    2194:	mov	r1, r7
    2198:	ldr	r3, [r5, #104]	; 0x68
    219c:	b	2124 <coda_inflateSync+0x1dc>
    21a0:	mvn	r0, #2
    21a4:	b	216c <coda_inflateSync+0x224>
    21a8:	mvn	r0, #4
    21ac:	b	216c <coda_inflateSync+0x224>
    21b0:	mvn	r0, #1
    21b4:	bx	lr
    21b8:	mvn	r0, #1
    21bc:	b	216c <coda_inflateSync+0x224>
    21c0:	mov	r1, lr
    21c4:	b	2124 <coda_inflateSync+0x1dc>

000021c8 <coda_inflateSyncPoint>:
    21c8:	cmp	r0, #0
    21cc:	beq	2200 <coda_inflateSyncPoint+0x38>
    21d0:	ldr	r3, [r0, #28]
    21d4:	cmp	r3, #0
    21d8:	beq	2200 <coda_inflateSyncPoint+0x38>
    21dc:	ldr	r2, [r3]
    21e0:	cmp	r2, #13
    21e4:	beq	21f0 <coda_inflateSyncPoint+0x28>
    21e8:	mov	r0, #0
    21ec:	bx	lr
    21f0:	ldr	r0, [r3, #60]	; 0x3c
    21f4:	clz	r0, r0
    21f8:	lsr	r0, r0, #5
    21fc:	bx	lr
    2200:	mvn	r0, #1
    2204:	bx	lr

00002208 <coda_inflateCopy>:
    2208:	cmp	r1, #0
    220c:	cmpne	r0, #0
    2210:	beq	2420 <coda_inflateCopy+0x218>
    2214:	strd	r4, [sp, #-24]!	; 0xffffffe8
    2218:	ldr	r5, [r1, #28]
    221c:	strd	r6, [sp, #8]
    2220:	str	r8, [sp, #16]
    2224:	str	lr, [sp, #20]
    2228:	cmp	r5, #0
    222c:	beq	2418 <coda_inflateCopy+0x210>
    2230:	ldr	r3, [r1, #32]
    2234:	cmp	r3, #0
    2238:	beq	2418 <coda_inflateCopy+0x210>
    223c:	ldr	r2, [r1, #36]	; 0x24
    2240:	cmp	r2, #0
    2244:	beq	2418 <coda_inflateCopy+0x210>
    2248:	mov	r4, r1
    224c:	mov	r7, r0
    2250:	movw	r2, #7116	; 0x1bcc
    2254:	mov	r1, #1
    2258:	ldr	r0, [r4, #40]	; 0x28
    225c:	blx	r3
    2260:	subs	r6, r0, #0
    2264:	beq	2428 <coda_inflateCopy+0x220>
    2268:	ldr	r8, [r5, #52]	; 0x34
    226c:	cmp	r8, #0
    2270:	beq	2394 <coda_inflateCopy+0x18c>
    2274:	ldr	r1, [r5, #36]	; 0x24
    2278:	mov	r2, #1
    227c:	ldr	r3, [r4, #32]
    2280:	ldr	r0, [r4, #40]	; 0x28
    2284:	lsl	r1, r2, r1
    2288:	blx	r3
    228c:	subs	r8, r0, #0
    2290:	movne	r1, r4
    2294:	movne	r3, r7
    2298:	addne	r4, r1, #48	; 0x30
    229c:	beq	2430 <coda_inflateCopy+0x228>
    22a0:	ldr	lr, [r1]
    22a4:	add	r1, r1, #16
    22a8:	add	r3, r3, #16
    22ac:	ldr	ip, [r1, #-12]
    22b0:	ldr	r0, [r1, #-8]
    22b4:	ldr	r2, [r1, #-4]
    22b8:	cmp	r1, r4
    22bc:	str	lr, [r3, #-16]
    22c0:	str	ip, [r3, #-12]
    22c4:	str	r0, [r3, #-8]
    22c8:	str	r2, [r3, #-4]
    22cc:	bne	22a0 <coda_inflateCopy+0x98>
    22d0:	ldr	lr, [r1]
    22d4:	movw	r2, #7116	; 0x1bcc
    22d8:	mov	r0, r6
    22dc:	ldr	ip, [r1, #4]
    22e0:	mov	r1, r5
    22e4:	str	lr, [r3]
    22e8:	str	ip, [r3, #4]
    22ec:	bl	0 <memcpy>
    22f0:	ldr	r3, [r5, #76]	; 0x4c
    22f4:	add	r2, r5, #1328	; 0x530
    22f8:	add	r1, r6, #1328	; 0x530
    22fc:	cmp	r2, r3
    2300:	bhi	2368 <coda_inflateCopy+0x160>
    2304:	add	r0, r5, #7040	; 0x1b80
    2308:	add	r0, r0, #60	; 0x3c
    230c:	cmp	r3, r0
    2310:	bhi	2330 <coda_inflateCopy+0x128>
    2314:	ldr	r0, [r5, #80]	; 0x50
    2318:	sub	r3, r3, r2
    231c:	add	r3, r1, r3
    2320:	str	r3, [r6, #76]	; 0x4c
    2324:	sub	r3, r0, r2
    2328:	add	r3, r1, r3
    232c:	str	r3, [r6, #80]	; 0x50
    2330:	ldr	r3, [r5, #108]	; 0x6c
    2334:	cmp	r8, #0
    2338:	sub	r2, r3, r2
    233c:	add	r2, r1, r2
    2340:	str	r2, [r6, #108]	; 0x6c
    2344:	bne	2378 <coda_inflateCopy+0x170>
    2348:	mov	r0, #0
    234c:	str	r8, [r6, #52]	; 0x34
    2350:	str	r6, [r7, #28]
    2354:	ldrd	r4, [sp]
    2358:	ldrd	r6, [sp, #8]
    235c:	ldr	r8, [sp, #16]
    2360:	add	sp, sp, #20
    2364:	pop	{pc}		; (ldr pc, [sp], #4)
    2368:	ldr	r3, [r5, #108]	; 0x6c
    236c:	sub	r2, r3, r2
    2370:	add	r2, r1, r2
    2374:	str	r2, [r6, #108]	; 0x6c
    2378:	ldr	r3, [r5, #36]	; 0x24
    237c:	mov	r2, #1
    2380:	mov	r0, r8
    2384:	ldr	r1, [r5, #52]	; 0x34
    2388:	lsl	r2, r2, r3
    238c:	bl	0 <memcpy>
    2390:	b	2348 <coda_inflateCopy+0x140>
    2394:	mov	r1, r4
    2398:	mov	r3, r7
    239c:	add	r4, r4, #48	; 0x30
    23a0:	ldr	lr, [r1]
    23a4:	add	r1, r1, #16
    23a8:	add	r3, r3, #16
    23ac:	ldr	ip, [r1, #-12]
    23b0:	ldr	r0, [r1, #-8]
    23b4:	ldr	r2, [r1, #-4]
    23b8:	cmp	r1, r4
    23bc:	str	lr, [r3, #-16]
    23c0:	str	ip, [r3, #-12]
    23c4:	str	r0, [r3, #-8]
    23c8:	str	r2, [r3, #-4]
    23cc:	bne	23a0 <coda_inflateCopy+0x198>
    23d0:	ldr	lr, [r1]
    23d4:	movw	r2, #7116	; 0x1bcc
    23d8:	mov	r0, r6
    23dc:	ldr	ip, [r1, #4]
    23e0:	mov	r1, r5
    23e4:	str	lr, [r3]
    23e8:	str	ip, [r3, #4]
    23ec:	bl	0 <memcpy>
    23f0:	ldr	r3, [r5, #76]	; 0x4c
    23f4:	add	r2, r5, #1328	; 0x530
    23f8:	add	r1, r6, #1328	; 0x530
    23fc:	cmp	r3, r2
    2400:	bcs	2304 <coda_inflateCopy+0xfc>
    2404:	ldr	r3, [r5, #108]	; 0x6c
    2408:	sub	r2, r3, r2
    240c:	add	r2, r1, r2
    2410:	str	r2, [r6, #108]	; 0x6c
    2414:	b	2348 <coda_inflateCopy+0x140>
    2418:	mvn	r0, #1
    241c:	b	2354 <coda_inflateCopy+0x14c>
    2420:	mvn	r0, #1
    2424:	bx	lr
    2428:	mvn	r0, #3
    242c:	b	2354 <coda_inflateCopy+0x14c>
    2430:	mov	r1, r6
    2434:	ldr	r3, [r4, #36]	; 0x24
    2438:	ldr	r0, [r4, #40]	; 0x28
    243c:	blx	r3
    2440:	mvn	r0, #3
    2444:	b	2354 <coda_inflateCopy+0x14c>

00002448 <coda_inflateUndermine>:
    2448:	cmp	r0, #0
    244c:	beq	2470 <coda_inflateUndermine+0x28>
    2450:	ldr	r3, [r0, #28]
    2454:	cmp	r3, #0
    2458:	beq	2470 <coda_inflateUndermine+0x28>
    245c:	add	r3, r3, #4096	; 0x1000
    2460:	mov	r2, #1
    2464:	mvn	r0, #2
    2468:	str	r2, [r3, #3008]	; 0xbc0
    246c:	bx	lr
    2470:	mvn	r0, #1
    2474:	bx	lr

00002478 <coda_inflateMark>:
    2478:	cmp	r0, #0
    247c:	beq	24d0 <coda_inflateMark+0x58>
    2480:	ldr	r3, [r0, #28]
    2484:	cmp	r3, #0
    2488:	beq	24d0 <coda_inflateMark+0x58>
    248c:	add	r1, r3, #4096	; 0x1000
    2490:	ldr	r2, [r3]
    2494:	ldr	r0, [r1, #3012]	; 0xbc4
    2498:	cmp	r2, #15
    249c:	lsl	r0, r0, #16
    24a0:	beq	24c4 <coda_inflateMark+0x4c>
    24a4:	cmp	r2, #24
    24a8:	beq	24b0 <coda_inflateMark+0x38>
    24ac:	bx	lr
    24b0:	ldr	r2, [r3, #64]	; 0x40
    24b4:	ldr	r3, [r1, #3016]	; 0xbc8
    24b8:	sub	r3, r3, r2
    24bc:	add	r0, r3, r0
    24c0:	bx	lr
    24c4:	ldr	r3, [r3, #64]	; 0x40
    24c8:	add	r0, r0, r3
    24cc:	bx	lr
    24d0:	mov	r0, #0
    24d4:	movt	r0, #65535	; 0xffff
    24d8:	b	24ac <coda_inflateMark+0x34>
