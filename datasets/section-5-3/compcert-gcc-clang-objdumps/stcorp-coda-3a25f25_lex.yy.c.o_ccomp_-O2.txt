
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_lex>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #40	; 0x28
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	str	r6, [sp, #16]
      1c:	str	r7, [sp, #20]
      20:	str	r8, [sp, #24]
      24:	str	r9, [sp, #28]
      28:	str	sl, [sp, #32]
      2c:	str	fp, [sp, #36]	; 0x24
      30:	mov	r6, r1
      34:	str	r0, [r6, #92]	; 0x5c
      38:	ldr	r3, [r6, #40]	; 0x28
      3c:	cmp	r3, #0
      40:	bne	d8 <coda_expression_lex+0xd8>
      44:	mov	r3, #1
      48:	str	r3, [r6, #40]	; 0x28
      4c:	ldr	r2, [r6, #44]	; 0x2c
      50:	cmp	r2, #0
      54:	bne	60 <coda_expression_lex+0x60>
      58:	mov	r1, #1
      5c:	str	r1, [r6, #44]	; 0x2c
      60:	ldr	r3, [r6, #4]
      64:	cmp	r3, #0
      68:	bne	78 <coda_expression_lex+0x78>
      6c:	ldr	ip, [pc, #3076]	; c78 <coda_expression_lex+0xc78>
      70:	ldr	ip, [ip]
      74:	str	ip, [r6, #4]
      78:	ldr	r3, [r6, #8]
      7c:	cmp	r3, #0
      80:	bne	90 <coda_expression_lex+0x90>
      84:	ldr	r1, [pc, #3100]	; ca8 <coda_expression_lex+0xca8>
      88:	ldr	r1, [r1]
      8c:	str	r1, [r6, #8]
      90:	ldr	r3, [r6, #20]
      94:	cmp	r3, #0
      98:	beq	ac <coda_expression_lex+0xac>
      9c:	ldr	r1, [r6, #12]
      a0:	ldr	r1, [r3, r1, lsl #2]
      a4:	cmp	r1, #0
      a8:	bne	d0 <coda_expression_lex+0xd0>
      ac:	mov	r0, r6
      b0:	bl	1394 <coda_expression_ensure_buffer_stack>
      b4:	ldr	r0, [r6, #4]
      b8:	mov	r1, #16384	; 0x4000
      bc:	mov	r2, r6
      c0:	bl	f84 <coda_expression__create_buffer>
      c4:	ldr	r2, [r6, #20]
      c8:	ldr	r3, [r6, #12]
      cc:	str	r0, [r2, r3, lsl #2]
      d0:	mov	r0, r6
      d4:	bl	f1c <coda_expression__load_buffer_state>
      d8:	ldr	r4, [r6, #36]	; 0x24
      dc:	ldrb	ip, [r6, #24]
      e0:	strb	ip, [r4]
      e4:	mov	fp, r4
      e8:	ldr	r0, [r6, #44]	; 0x2c
      ec:	ldr	r1, [pc, #2972]	; c90 <coda_expression_lex+0xc90>
      f0:	ldrb	r2, [r4]
      f4:	and	r2, r2, #255	; 0xff
      f8:	ldrb	r1, [r1, r2]
      fc:	and	r5, r1, #255	; 0xff
     100:	ldr	ip, [pc, #2944]	; c88 <coda_expression_lex+0xc88>
     104:	add	r1, ip, r0, lsl #1
     108:	ldrsh	r1, [r1]
     10c:	cmp	r1, #0
     110:	beq	11c <coda_expression_lex+0x11c>
     114:	str	r0, [r6, #64]	; 0x40
     118:	str	r4, [r6, #68]	; 0x44
     11c:	ldr	ip, [pc, #2912]	; c84 <coda_expression_lex+0xc84>
     120:	ldr	r2, [pc, #2904]	; c80 <coda_expression_lex+0xc80>
     124:	add	r3, r2, r0, lsl #1
     128:	ldrsh	r3, [r3]
     12c:	add	r3, r3, r5
     130:	add	ip, ip, r3, lsl #1
     134:	ldrsh	ip, [ip]
     138:	cmp	ip, r0
     13c:	beq	168 <coda_expression_lex+0x168>
     140:	ldr	r1, [pc, #2904]	; ca0 <coda_expression_lex+0xca0>
     144:	add	r1, r1, r0, lsl #1
     148:	ldrsh	r0, [r1]
     14c:	movw	lr, #274	; 0x112
     150:	cmp	r0, lr
     154:	blt	11c <coda_expression_lex+0x11c>
     158:	ldr	r2, [pc, #2876]	; c9c <coda_expression_lex+0xc9c>
     15c:	ldrb	r1, [r2, r5]
     160:	and	r5, r1, #255	; 0xff
     164:	b	11c <coda_expression_lex+0x11c>
     168:	ldr	r0, [pc, #2876]	; cac <coda_expression_lex+0xcac>
     16c:	add	r1, r0, r3, lsl #1
     170:	ldrsh	r0, [r1]
     174:	add	r4, r4, #1
     178:	add	r3, r2, r0, lsl #1
     17c:	ldrsh	r3, [r3]
     180:	movw	lr, #307	; 0x133
     184:	cmp	r3, lr
     188:	bne	ec <coda_expression_lex+0xec>
     18c:	ldr	r3, [pc, #2804]	; c88 <coda_expression_lex+0xc88>
     190:	add	r0, r3, r0, lsl #1
     194:	ldrsh	r1, [r0]
     198:	cmp	r1, #0
     19c:	bne	1b0 <coda_expression_lex+0x1b0>
     1a0:	ldr	r4, [r6, #68]	; 0x44
     1a4:	ldr	ip, [r6, #64]	; 0x40
     1a8:	add	r0, r3, ip, lsl #1
     1ac:	ldrsh	r1, [r0]
     1b0:	str	fp, [r6, #80]	; 0x50
     1b4:	sub	r2, r4, fp
     1b8:	str	r2, [r6, #32]
     1bc:	ldrb	r2, [r4]
     1c0:	strb	r2, [r6, #24]
     1c4:	mov	ip, #0
     1c8:	strb	ip, [r4]
     1cc:	str	r4, [r6, #36]	; 0x24
     1d0:	cmp	r1, #77	; 0x4d
     1d4:	bcs	c68 <coda_expression_lex+0xc68>
     1d8:	add	pc, pc, r1, lsl #2
     1dc:	nop	{0}
     1e0:	b	314 <coda_expression_lex+0x314>
     1e4:	b	328 <coda_expression_lex+0x328>
     1e8:	b	37c <coda_expression_lex+0x37c>
     1ec:	b	384 <coda_expression_lex+0x384>
     1f0:	b	38c <coda_expression_lex+0x38c>
     1f4:	b	394 <coda_expression_lex+0x394>
     1f8:	b	39c <coda_expression_lex+0x39c>
     1fc:	b	3a4 <coda_expression_lex+0x3a4>
     200:	b	3ac <coda_expression_lex+0x3ac>
     204:	b	3b4 <coda_expression_lex+0x3b4>
     208:	b	3bc <coda_expression_lex+0x3bc>
     20c:	b	3c4 <coda_expression_lex+0x3c4>
     210:	b	3cc <coda_expression_lex+0x3cc>
     214:	b	3d4 <coda_expression_lex+0x3d4>
     218:	b	3dc <coda_expression_lex+0x3dc>
     21c:	b	3e4 <coda_expression_lex+0x3e4>
     220:	b	3ec <coda_expression_lex+0x3ec>
     224:	b	3f4 <coda_expression_lex+0x3f4>
     228:	b	3fc <coda_expression_lex+0x3fc>
     22c:	b	404 <coda_expression_lex+0x404>
     230:	b	40c <coda_expression_lex+0x40c>
     234:	b	414 <coda_expression_lex+0x414>
     238:	b	41c <coda_expression_lex+0x41c>
     23c:	b	424 <coda_expression_lex+0x424>
     240:	b	42c <coda_expression_lex+0x42c>
     244:	b	434 <coda_expression_lex+0x434>
     248:	b	43c <coda_expression_lex+0x43c>
     24c:	b	444 <coda_expression_lex+0x444>
     250:	b	44c <coda_expression_lex+0x44c>
     254:	b	454 <coda_expression_lex+0x454>
     258:	b	45c <coda_expression_lex+0x45c>
     25c:	b	464 <coda_expression_lex+0x464>
     260:	b	46c <coda_expression_lex+0x46c>
     264:	b	474 <coda_expression_lex+0x474>
     268:	b	47c <coda_expression_lex+0x47c>
     26c:	b	484 <coda_expression_lex+0x484>
     270:	b	48c <coda_expression_lex+0x48c>
     274:	b	494 <coda_expression_lex+0x494>
     278:	b	49c <coda_expression_lex+0x49c>
     27c:	b	4a4 <coda_expression_lex+0x4a4>
     280:	b	4ac <coda_expression_lex+0x4ac>
     284:	b	4b4 <coda_expression_lex+0x4b4>
     288:	b	4bc <coda_expression_lex+0x4bc>
     28c:	b	4c4 <coda_expression_lex+0x4c4>
     290:	b	4cc <coda_expression_lex+0x4cc>
     294:	b	4d4 <coda_expression_lex+0x4d4>
     298:	b	4dc <coda_expression_lex+0x4dc>
     29c:	b	4e4 <coda_expression_lex+0x4e4>
     2a0:	b	4ec <coda_expression_lex+0x4ec>
     2a4:	b	4f4 <coda_expression_lex+0x4f4>
     2a8:	b	4fc <coda_expression_lex+0x4fc>
     2ac:	b	504 <coda_expression_lex+0x504>
     2b0:	b	50c <coda_expression_lex+0x50c>
     2b4:	b	514 <coda_expression_lex+0x514>
     2b8:	b	51c <coda_expression_lex+0x51c>
     2bc:	b	524 <coda_expression_lex+0x524>
     2c0:	b	52c <coda_expression_lex+0x52c>
     2c4:	b	534 <coda_expression_lex+0x534>
     2c8:	b	53c <coda_expression_lex+0x53c>
     2cc:	b	544 <coda_expression_lex+0x544>
     2d0:	b	54c <coda_expression_lex+0x54c>
     2d4:	b	554 <coda_expression_lex+0x554>
     2d8:	b	55c <coda_expression_lex+0x55c>
     2dc:	b	564 <coda_expression_lex+0x564>
     2e0:	b	56c <coda_expression_lex+0x56c>
     2e4:	b	574 <coda_expression_lex+0x574>
     2e8:	b	57c <coda_expression_lex+0x57c>
     2ec:	b	584 <coda_expression_lex+0x584>
     2f0:	b	58c <coda_expression_lex+0x58c>
     2f4:	b	5a4 <coda_expression_lex+0x5a4>
     2f8:	b	5bc <coda_expression_lex+0x5bc>
     2fc:	b	5d4 <coda_expression_lex+0x5d4>
     300:	b	d8 <coda_expression_lex+0xd8>
     304:	b	5ec <coda_expression_lex+0x5ec>
     308:	b	5f8 <coda_expression_lex+0x5f8>
     30c:	b	640 <coda_expression_lex+0x640>
     310:	b	610 <coda_expression_lex+0x610>
     314:	ldrb	r3, [r6, #24]
     318:	strb	r3, [r4]
     31c:	ldr	r4, [r6, #68]	; 0x44
     320:	ldr	r0, [r6, #64]	; 0x40
     324:	b	18c <coda_expression_lex+0x18c>
     328:	ldr	r2, [r6, #32]
     32c:	sub	r0, r2, #1
     330:	bl	0 <malloc>
     334:	ldr	r3, [r6, #92]	; 0x5c
     338:	str	r0, [r3]
     33c:	ldr	r2, [r6, #92]	; 0x5c
     340:	ldr	r0, [r2]
     344:	ldr	r2, [r6, #80]	; 0x50
     348:	add	r1, r2, #1
     34c:	ldr	r2, [r6, #32]
     350:	sub	r2, r2, #2
     354:	bl	0 <memcpy>
     358:	ldr	ip, [r6, #92]	; 0x5c
     35c:	ldr	ip, [ip]
     360:	ldr	r3, [r6, #32]
     364:	add	r1, ip, r3
     368:	mov	ip, #0
     36c:	sub	lr, r1, #4096	; 0x1000
     370:	strb	ip, [lr, #4094]	; 0xffe
     374:	mov	r0, #260	; 0x104
     378:	b	614 <coda_expression_lex+0x614>
     37c:	movw	r0, #266	; 0x10a
     380:	b	614 <coda_expression_lex+0x614>
     384:	movw	r0, #267	; 0x10b
     388:	b	614 <coda_expression_lex+0x614>
     38c:	mov	r0, #268	; 0x10c
     390:	b	614 <coda_expression_lex+0x614>
     394:	movw	r0, #269	; 0x10d
     398:	b	614 <coda_expression_lex+0x614>
     39c:	movw	r0, #270	; 0x10e
     3a0:	b	614 <coda_expression_lex+0x614>
     3a4:	movw	r0, #271	; 0x10f
     3a8:	b	614 <coda_expression_lex+0x614>
     3ac:	movw	r0, #263	; 0x107
     3b0:	b	614 <coda_expression_lex+0x614>
     3b4:	mov	r0, #264	; 0x108
     3b8:	b	614 <coda_expression_lex+0x614>
     3bc:	movw	r0, #265	; 0x109
     3c0:	b	614 <coda_expression_lex+0x614>
     3c4:	movw	r0, #273	; 0x111
     3c8:	b	614 <coda_expression_lex+0x614>
     3cc:	movw	r0, #274	; 0x112
     3d0:	b	614 <coda_expression_lex+0x614>
     3d4:	movw	r0, #275	; 0x113
     3d8:	b	614 <coda_expression_lex+0x614>
     3dc:	mov	r0, #276	; 0x114
     3e0:	b	614 <coda_expression_lex+0x614>
     3e4:	movw	r0, #277	; 0x115
     3e8:	b	614 <coda_expression_lex+0x614>
     3ec:	movw	r0, #278	; 0x116
     3f0:	b	614 <coda_expression_lex+0x614>
     3f4:	movw	r0, #279	; 0x117
     3f8:	b	614 <coda_expression_lex+0x614>
     3fc:	mov	r0, #280	; 0x118
     400:	b	614 <coda_expression_lex+0x614>
     404:	movw	r0, #281	; 0x119
     408:	b	614 <coda_expression_lex+0x614>
     40c:	movw	r0, #282	; 0x11a
     410:	b	614 <coda_expression_lex+0x614>
     414:	movw	r0, #283	; 0x11b
     418:	b	614 <coda_expression_lex+0x614>
     41c:	mov	r0, #284	; 0x11c
     420:	b	614 <coda_expression_lex+0x614>
     424:	movw	r0, #285	; 0x11d
     428:	b	614 <coda_expression_lex+0x614>
     42c:	movw	r0, #286	; 0x11e
     430:	b	614 <coda_expression_lex+0x614>
     434:	movw	r0, #287	; 0x11f
     438:	b	614 <coda_expression_lex+0x614>
     43c:	mov	r0, #288	; 0x120
     440:	b	614 <coda_expression_lex+0x614>
     444:	movw	r0, #289	; 0x121
     448:	b	614 <coda_expression_lex+0x614>
     44c:	movw	r0, #290	; 0x122
     450:	b	614 <coda_expression_lex+0x614>
     454:	movw	r0, #291	; 0x123
     458:	b	614 <coda_expression_lex+0x614>
     45c:	mov	r0, #292	; 0x124
     460:	b	614 <coda_expression_lex+0x614>
     464:	movw	r0, #293	; 0x125
     468:	b	614 <coda_expression_lex+0x614>
     46c:	movw	r0, #294	; 0x126
     470:	b	614 <coda_expression_lex+0x614>
     474:	movw	r0, #295	; 0x127
     478:	b	614 <coda_expression_lex+0x614>
     47c:	mov	r0, #296	; 0x128
     480:	b	614 <coda_expression_lex+0x614>
     484:	movw	r0, #297	; 0x129
     488:	b	614 <coda_expression_lex+0x614>
     48c:	movw	r0, #298	; 0x12a
     490:	b	614 <coda_expression_lex+0x614>
     494:	movw	r0, #299	; 0x12b
     498:	b	614 <coda_expression_lex+0x614>
     49c:	mov	r0, #300	; 0x12c
     4a0:	b	614 <coda_expression_lex+0x614>
     4a4:	movw	r0, #301	; 0x12d
     4a8:	b	614 <coda_expression_lex+0x614>
     4ac:	movw	r0, #302	; 0x12e
     4b0:	b	614 <coda_expression_lex+0x614>
     4b4:	movw	r0, #303	; 0x12f
     4b8:	b	614 <coda_expression_lex+0x614>
     4bc:	mov	r0, #304	; 0x130
     4c0:	b	614 <coda_expression_lex+0x614>
     4c4:	movw	r0, #305	; 0x131
     4c8:	b	614 <coda_expression_lex+0x614>
     4cc:	movw	r0, #306	; 0x132
     4d0:	b	614 <coda_expression_lex+0x614>
     4d4:	movw	r0, #307	; 0x133
     4d8:	b	614 <coda_expression_lex+0x614>
     4dc:	mov	r0, #308	; 0x134
     4e0:	b	614 <coda_expression_lex+0x614>
     4e4:	movw	r0, #309	; 0x135
     4e8:	b	614 <coda_expression_lex+0x614>
     4ec:	movw	r0, #310	; 0x136
     4f0:	b	614 <coda_expression_lex+0x614>
     4f4:	movw	r0, #311	; 0x137
     4f8:	b	614 <coda_expression_lex+0x614>
     4fc:	mov	r0, #312	; 0x138
     500:	b	614 <coda_expression_lex+0x614>
     504:	movw	r0, #313	; 0x139
     508:	b	614 <coda_expression_lex+0x614>
     50c:	movw	r0, #314	; 0x13a
     510:	b	614 <coda_expression_lex+0x614>
     514:	movw	r0, #315	; 0x13b
     518:	b	614 <coda_expression_lex+0x614>
     51c:	mov	r0, #316	; 0x13c
     520:	b	614 <coda_expression_lex+0x614>
     524:	movw	r0, #317	; 0x13d
     528:	b	614 <coda_expression_lex+0x614>
     52c:	movw	r0, #318	; 0x13e
     530:	b	614 <coda_expression_lex+0x614>
     534:	movw	r0, #319	; 0x13f
     538:	b	614 <coda_expression_lex+0x614>
     53c:	mov	r0, #320	; 0x140
     540:	b	614 <coda_expression_lex+0x614>
     544:	movw	r0, #321	; 0x141
     548:	b	614 <coda_expression_lex+0x614>
     54c:	movw	r0, #322	; 0x142
     550:	b	614 <coda_expression_lex+0x614>
     554:	movw	r0, #323	; 0x143
     558:	b	614 <coda_expression_lex+0x614>
     55c:	mov	r0, #324	; 0x144
     560:	b	614 <coda_expression_lex+0x614>
     564:	movw	r0, #325	; 0x145
     568:	b	614 <coda_expression_lex+0x614>
     56c:	movw	r0, #326	; 0x146
     570:	b	614 <coda_expression_lex+0x614>
     574:	movw	r0, #327	; 0x147
     578:	b	614 <coda_expression_lex+0x614>
     57c:	mov	r0, #328	; 0x148
     580:	b	614 <coda_expression_lex+0x614>
     584:	movw	r0, #329	; 0x149
     588:	b	614 <coda_expression_lex+0x614>
     58c:	ldr	r0, [r6, #80]	; 0x50
     590:	bl	0 <strdup>
     594:	ldr	r3, [r6, #92]	; 0x5c
     598:	str	r0, [r3]
     59c:	movw	r0, #262	; 0x106
     5a0:	b	614 <coda_expression_lex+0x614>
     5a4:	ldr	r0, [r6, #80]	; 0x50
     5a8:	bl	0 <strdup>
     5ac:	ldr	r1, [r6, #92]	; 0x5c
     5b0:	str	r0, [r1]
     5b4:	movw	r0, #261	; 0x105
     5b8:	b	614 <coda_expression_lex+0x614>
     5bc:	ldr	r0, [r6, #80]	; 0x50
     5c0:	bl	0 <strdup>
     5c4:	ldr	r1, [r6, #92]	; 0x5c
     5c8:	str	r0, [r1]
     5cc:	movw	r0, #258	; 0x102
     5d0:	b	614 <coda_expression_lex+0x614>
     5d4:	ldr	r0, [r6, #80]	; 0x50
     5d8:	bl	0 <strdup>
     5dc:	ldr	r1, [r6, #92]	; 0x5c
     5e0:	str	r0, [r1]
     5e4:	movw	r0, #259	; 0x103
     5e8:	b	614 <coda_expression_lex+0x614>
     5ec:	ldr	r0, [r6, #80]	; 0x50
     5f0:	ldrb	r0, [r0]
     5f4:	b	614 <coda_expression_lex+0x614>
     5f8:	ldr	r0, [r6, #80]	; 0x50
     5fc:	ldr	r1, [r6, #32]
     600:	mov	r2, #1
     604:	ldr	r3, [r6, #8]
     608:	bl	0 <fwrite>
     60c:	b	d8 <coda_expression_lex+0xd8>
     610:	mov	r0, #0
     614:	ldr	r4, [sp, #8]
     618:	ldr	r5, [sp, #12]
     61c:	ldr	r6, [sp, #16]
     620:	ldr	r7, [sp, #20]
     624:	ldr	r8, [sp, #24]
     628:	ldr	r9, [sp, #28]
     62c:	ldr	sl, [sp, #32]
     630:	ldr	fp, [sp, #36]	; 0x24
     634:	ldr	lr, [sp, #4]
     638:	add	sp, sp, #40	; 0x28
     63c:	bx	lr
     640:	ldr	r2, [r6, #80]	; 0x50
     644:	sub	r0, r4, r2
     648:	sub	sl, r0, #1
     64c:	ldrb	r0, [r6, #24]
     650:	strb	r0, [r4]
     654:	ldr	r1, [r6, #20]
     658:	ldr	r0, [r6, #12]
     65c:	ldr	r3, [r1, r0, lsl #2]
     660:	ldr	ip, [r3, #44]	; 0x2c
     664:	cmp	ip, #0
     668:	bne	69c <coda_expression_lex+0x69c>
     66c:	ldr	r1, [r3, #16]
     670:	str	r1, [r6, #28]
     674:	ldr	ip, [r6, #20]
     678:	ldr	r0, [r6, #12]
     67c:	ldr	ip, [ip, r0, lsl #2]
     680:	ldr	r0, [r6, #4]
     684:	str	r0, [ip]
     688:	ldr	r3, [r6, #20]
     68c:	ldr	r2, [r6, #12]
     690:	ldr	r0, [r3, r2, lsl #2]
     694:	mov	r3, #1
     698:	str	r3, [r0, #44]	; 0x2c
     69c:	ldr	r1, [r6, #36]	; 0x24
     6a0:	ldr	r0, [r6, #20]
     6a4:	ldr	r3, [r6, #12]
     6a8:	ldr	ip, [r0, r3, lsl #2]
     6ac:	ldr	r3, [ip, #4]
     6b0:	ldr	r0, [r6, #28]
     6b4:	add	r2, r3, r0
     6b8:	cmp	r1, r2
     6bc:	bls	ba4 <coda_expression_lex+0xba4>
     6c0:	mov	r7, r6
     6c4:	ldr	ip, [r7, #20]
     6c8:	ldr	r3, [r7, #12]
     6cc:	ldr	r1, [ip, r3, lsl #2]
     6d0:	ldr	r8, [r1, #4]
     6d4:	ldr	r5, [r7, #80]	; 0x50
     6d8:	ldr	ip, [r7, #36]	; 0x24
     6dc:	ldr	r2, [r7, #28]
     6e0:	add	r0, r8, r2
     6e4:	add	r2, r0, #1
     6e8:	cmp	ip, r2
     6ec:	bls	6fc <coda_expression_lex+0x6fc>
     6f0:	ldr	r0, [pc, #1428]	; c8c <coda_expression_lex+0xc8c>
     6f4:	mov	r1, r7
     6f8:	bl	169c <yy_fatal_error>
     6fc:	ldr	r3, [r7, #20]
     700:	ldr	r0, [r7, #12]
     704:	ldr	ip, [r3, r0, lsl #2]
     708:	ldr	ip, [ip, #40]	; 0x28
     70c:	cmp	ip, #0
     710:	bne	738 <coda_expression_lex+0x738>
     714:	ldr	r1, [r7, #36]	; 0x24
     718:	ldr	r0, [r7, #80]	; 0x50
     71c:	sub	r1, r1, r0
     720:	cmp	r1, #1
     724:	beq	730 <coda_expression_lex+0x730>
     728:	mov	r1, #2
     72c:	b	b10 <coda_expression_lex+0xb10>
     730:	mov	r1, #1
     734:	b	b10 <coda_expression_lex+0xb10>
     738:	ldr	r1, [r7, #36]	; 0x24
     73c:	ldr	r0, [r7, #80]	; 0x50
     740:	sub	ip, r1, r0
     744:	sub	r9, ip, #1
     748:	mov	r3, #0
     74c:	cmp	r3, r9
     750:	bge	774 <coda_expression_lex+0x774>
     754:	mov	r0, r8
     758:	add	r8, r0, #1
     75c:	mov	ip, r5
     760:	add	r5, ip, #1
     764:	ldrb	ip, [ip]
     768:	strb	ip, [r0]
     76c:	add	r3, r3, #1
     770:	b	74c <coda_expression_lex+0x74c>
     774:	ldr	r1, [r7, #20]
     778:	ldr	r0, [r7, #12]
     77c:	ldr	r0, [r1, r0, lsl #2]
     780:	ldr	r1, [r0, #44]	; 0x2c
     784:	cmp	r1, #2
     788:	beq	9d8 <coda_expression_lex+0x9d8>
     78c:	ldr	r3, [r0, #12]
     790:	sub	r3, r3, r9
     794:	sub	r2, r3, #1
     798:	cmp	r2, #0
     79c:	bgt	854 <coda_expression_lex+0x854>
     7a0:	ldr	r1, [r7, #20]
     7a4:	ldr	r0, [r7, #12]
     7a8:	ldr	r8, [r1, r0, lsl #2]
     7ac:	ldr	r3, [r7, #36]	; 0x24
     7b0:	ldr	r2, [r8, #4]
     7b4:	sub	r5, r3, r2
     7b8:	ldr	ip, [r8, #20]
     7bc:	cmp	ip, #0
     7c0:	beq	80c <coda_expression_lex+0x80c>
     7c4:	ldr	r3, [r8, #12]
     7c8:	lsl	r2, r3, #1
     7cc:	cmp	r2, #0
     7d0:	bgt	7ec <coda_expression_lex+0x7ec>
     7d4:	asr	lr, r3, #31
     7d8:	add	lr, r3, lr, lsr #29
     7dc:	asr	r1, lr, #3
     7e0:	add	r2, r3, r1
     7e4:	str	r2, [r8, #12]
     7e8:	b	7f0 <coda_expression_lex+0x7f0>
     7ec:	str	r2, [r8, #12]
     7f0:	ldr	r0, [r8, #4]
     7f4:	ldr	r1, [r8, #12]
     7f8:	add	r1, r1, #2
     7fc:	mov	r2, r7
     800:	bl	1c3c <coda_expression_realloc>
     804:	str	r0, [r8, #4]
     808:	b	814 <coda_expression_lex+0x814>
     80c:	mov	r1, #0
     810:	str	r1, [r8, #4]
     814:	ldr	r3, [r8, #4]
     818:	cmp	r3, #0
     81c:	bne	82c <coda_expression_lex+0x82c>
     820:	ldr	r0, [pc, #1136]	; c98 <coda_expression_lex+0xc98>
     824:	mov	r1, r7
     828:	bl	169c <yy_fatal_error>
     82c:	ldr	r3, [r8, #4]
     830:	add	r2, r3, r5
     834:	str	r2, [r7, #36]	; 0x24
     838:	ldr	r3, [r7, #20]
     83c:	ldr	r1, [r7, #12]
     840:	ldr	ip, [r3, r1, lsl #2]
     844:	ldr	r3, [ip, #12]
     848:	sub	r3, r3, r9
     84c:	sub	r2, r3, #1
     850:	b	798 <coda_expression_lex+0x798>
     854:	mov	ip, #8192	; 0x2000
     858:	cmp	r2, #8192	; 0x2000
     85c:	movgt	r8, ip
     860:	movle	r8, r2
     864:	ldr	r0, [r7, #20]
     868:	ldr	r1, [r7, #12]
     86c:	ldr	r2, [r0, r1, lsl #2]
     870:	ldr	ip, [r2, #24]
     874:	cmp	ip, #0
     878:	bne	900 <coda_expression_lex+0x900>
     87c:	bl	0 <__errno_location>
     880:	mov	r1, #0
     884:	str	r1, [r0]
     888:	ldr	r2, [r7, #20]
     88c:	ldr	r1, [r7, #12]
     890:	ldr	r1, [r2, r1, lsl #2]
     894:	ldr	ip, [r1, #4]
     898:	add	r0, ip, r9
     89c:	mov	r1, #1
     8a0:	ldr	r3, [r7, #4]
     8a4:	mov	r2, r8
     8a8:	bl	0 <fread>
     8ac:	str	r0, [r7, #28]
     8b0:	cmp	r0, #0
     8b4:	bne	9c0 <coda_expression_lex+0x9c0>
     8b8:	ldr	r0, [r7, #4]
     8bc:	bl	0 <ferror>
     8c0:	cmp	r0, #0
     8c4:	beq	9c0 <coda_expression_lex+0x9c0>
     8c8:	bl	0 <__errno_location>
     8cc:	ldr	r2, [r0]
     8d0:	cmp	r2, #4
     8d4:	beq	8e8 <coda_expression_lex+0x8e8>
     8d8:	ldr	r0, [pc, #924]	; c7c <coda_expression_lex+0xc7c>
     8dc:	mov	r1, r7
     8e0:	bl	169c <yy_fatal_error>
     8e4:	b	9c0 <coda_expression_lex+0x9c0>
     8e8:	bl	0 <__errno_location>
     8ec:	mov	r1, #0
     8f0:	str	r1, [r0]
     8f4:	ldr	r0, [r7, #4]
     8f8:	bl	0 <clearerr>
     8fc:	b	888 <coda_expression_lex+0x888>
     900:	mov	r0, #42	; 0x2a
     904:	mov	r5, #0
     908:	cmp	r5, r8
     90c:	bge	928 <coda_expression_lex+0x928>
     910:	ldr	r0, [r7, #4]
     914:	bl	0 <getc>
     918:	cmn	r0, #1
     91c:	movne	ip, #1
     920:	moveq	ip, #0
     924:	b	92c <coda_expression_lex+0x92c>
     928:	mov	ip, #0
     92c:	cmp	r0, #10
     930:	movne	r2, #1
     934:	moveq	r2, #0
     938:	mov	r1, #0
     93c:	cmp	ip, #0
     940:	movne	r2, r2
     944:	moveq	r2, r1
     948:	cmp	r2, #0
     94c:	beq	970 <coda_expression_lex+0x970>
     950:	ldr	ip, [r7, #20]
     954:	ldr	r2, [r7, #12]
     958:	ldr	r1, [ip, r2, lsl #2]
     95c:	ldr	r3, [r1, #4]
     960:	add	ip, r3, r9
     964:	strb	r0, [ip, r5]
     968:	add	r5, r5, #1
     96c:	b	908 <coda_expression_lex+0x908>
     970:	cmp	r0, #10
     974:	bne	998 <coda_expression_lex+0x998>
     978:	mov	ip, r5
     97c:	add	r5, ip, #1
     980:	ldr	r2, [r7, #20]
     984:	ldr	r1, [r7, #12]
     988:	ldr	r2, [r2, r1, lsl #2]
     98c:	ldr	r1, [r2, #4]
     990:	add	r2, r1, r9
     994:	strb	r0, [r2, ip]
     998:	cmn	r0, #1
     99c:	bne	9bc <coda_expression_lex+0x9bc>
     9a0:	ldr	r0, [r7, #4]
     9a4:	bl	0 <ferror>
     9a8:	cmp	r0, #0
     9ac:	beq	9bc <coda_expression_lex+0x9bc>
     9b0:	ldr	r0, [pc, #708]	; c7c <coda_expression_lex+0xc7c>
     9b4:	mov	r1, r7
     9b8:	bl	169c <yy_fatal_error>
     9bc:	str	r5, [r7, #28]
     9c0:	ldr	r0, [r7, #20]
     9c4:	ldr	r1, [r7, #12]
     9c8:	ldr	r0, [r0, r1, lsl #2]
     9cc:	ldr	r3, [r7, #28]
     9d0:	str	r3, [r0, #16]
     9d4:	b	9f0 <coda_expression_lex+0x9f0>
     9d8:	mov	r0, #0
     9dc:	str	r0, [r7, #28]
     9e0:	ldr	r2, [r7, #20]
     9e4:	ldr	r1, [r7, #12]
     9e8:	ldr	r2, [r2, r1, lsl #2]
     9ec:	str	r0, [r2, #16]
     9f0:	ldr	r2, [r7, #28]
     9f4:	cmp	r2, #0
     9f8:	bne	a34 <coda_expression_lex+0xa34>
     9fc:	cmp	r9, #0
     a00:	bne	a18 <coda_expression_lex+0xa18>
     a04:	mov	r8, #1
     a08:	ldr	r0, [r7, #4]
     a0c:	mov	r1, r7
     a10:	bl	db0 <coda_expression_restart>
     a14:	b	a38 <coda_expression_lex+0xa38>
     a18:	mov	r8, #2
     a1c:	ldr	r1, [r7, #20]
     a20:	ldr	ip, [r7, #12]
     a24:	ldr	r1, [r1, ip, lsl #2]
     a28:	mov	r3, #2
     a2c:	str	r3, [r1, #44]	; 0x2c
     a30:	b	a38 <coda_expression_lex+0xa38>
     a34:	mov	r8, #0
     a38:	ldr	r1, [r7, #28]
     a3c:	add	r2, r1, r9
     a40:	ldr	ip, [r7, #20]
     a44:	ldr	r3, [r7, #12]
     a48:	ldr	r0, [ip, r3, lsl #2]
     a4c:	ldr	r3, [r0, #12]
     a50:	cmp	r2, r3
     a54:	ble	ab4 <coda_expression_lex+0xab4>
     a58:	add	r5, r2, r1, asr #1
     a5c:	ldr	r0, [r0, #4]
     a60:	mov	r2, r7
     a64:	mov	r1, r5
     a68:	bl	1c3c <coda_expression_realloc>
     a6c:	ldr	r2, [r7, #20]
     a70:	ldr	r1, [r7, #12]
     a74:	ldr	r1, [r2, r1, lsl #2]
     a78:	str	r0, [r1, #4]
     a7c:	ldr	r1, [r7, #20]
     a80:	ldr	r2, [r7, #12]
     a84:	ldr	r3, [r1, r2, lsl #2]
     a88:	ldr	r2, [r3, #4]
     a8c:	cmp	r2, #0
     a90:	bne	aa0 <coda_expression_lex+0xaa0>
     a94:	ldr	r0, [pc, #504]	; c94 <coda_expression_lex+0xc94>
     a98:	mov	r1, r7
     a9c:	bl	169c <yy_fatal_error>
     aa0:	ldr	ip, [r7, #20]
     aa4:	ldr	r3, [r7, #12]
     aa8:	ldr	r3, [ip, r3, lsl #2]
     aac:	sub	r0, r5, #2
     ab0:	str	r0, [r3, #12]
     ab4:	ldr	r0, [r7, #28]
     ab8:	add	r2, r0, r9
     abc:	str	r2, [r7, #28]
     ac0:	ldr	r3, [r7, #20]
     ac4:	ldr	ip, [r7, #12]
     ac8:	ldr	ip, [r3, ip, lsl #2]
     acc:	ldr	r1, [ip, #4]
     ad0:	mov	r3, #0
     ad4:	strb	r3, [r1, r2]
     ad8:	ldr	r2, [r7, #20]
     adc:	ldr	r3, [r7, #12]
     ae0:	ldr	r0, [r2, r3, lsl #2]
     ae4:	ldr	ip, [r0, #4]
     ae8:	ldr	r2, [r7, #28]
     aec:	add	r2, ip, r2
     af0:	mov	r3, #0
     af4:	strb	r3, [r2, #1]
     af8:	ldr	r3, [r7, #20]
     afc:	ldr	ip, [r7, #12]
     b00:	ldr	ip, [r3, ip, lsl #2]
     b04:	ldr	r0, [ip, #4]
     b08:	str	r0, [r7, #80]	; 0x50
     b0c:	mov	r1, r8
     b10:	cmp	r1, #0
     b14:	beq	b84 <coda_expression_lex+0xb84>
     b18:	cmp	r1, #1
     b1c:	beq	b58 <coda_expression_lex+0xb58>
     b20:	cmp	r1, #2
     b24:	bne	d8 <coda_expression_lex+0xd8>
     b28:	ldr	r3, [r6, #20]
     b2c:	ldr	ip, [r6, #12]
     b30:	ldr	r0, [r3, ip, lsl #2]
     b34:	ldr	r0, [r0, #4]
     b38:	ldr	ip, [r6, #28]
     b3c:	add	r2, r0, ip
     b40:	str	r2, [r6, #36]	; 0x24
     b44:	mov	r0, r6
     b48:	bl	cb0 <yy_get_previous_state>
     b4c:	ldr	r4, [r6, #36]	; 0x24
     b50:	ldr	fp, [r6, #80]	; 0x50
     b54:	b	18c <coda_expression_lex+0x18c>
     b58:	mov	r2, #0
     b5c:	str	r2, [r6, #48]	; 0x30
     b60:	ldr	r2, [r6, #80]	; 0x50
     b64:	str	r2, [r6, #36]	; 0x24
     b68:	ldr	r1, [r6, #44]	; 0x2c
     b6c:	sub	ip, r1, #1
     b70:	asr	lr, ip, #31
     b74:	add	lr, ip, lr, lsr #31
     b78:	asr	r0, lr, #1
     b7c:	add	r1, r0, #76	; 0x4c
     b80:	b	1d0 <coda_expression_lex+0x1d0>
     b84:	ldr	r2, [r6, #80]	; 0x50
     b88:	add	r1, r2, sl
     b8c:	str	r1, [r6, #36]	; 0x24
     b90:	mov	r0, r6
     b94:	bl	cb0 <yy_get_previous_state>
     b98:	ldr	r4, [r6, #36]	; 0x24
     b9c:	ldr	fp, [r6, #80]	; 0x50
     ba0:	b	ec <coda_expression_lex+0xec>
     ba4:	ldr	r0, [r6, #80]	; 0x50
     ba8:	add	r1, r0, sl
     bac:	str	r1, [r6, #36]	; 0x24
     bb0:	mov	r0, r6
     bb4:	bl	cb0 <yy_get_previous_state>
     bb8:	mov	r2, r6
     bbc:	mov	ip, r0
     bc0:	ldr	r4, [r2, #36]	; 0x24
     bc4:	ldr	r1, [pc, #188]	; c88 <coda_expression_lex+0xc88>
     bc8:	add	r3, r1, ip, lsl #1
     bcc:	ldrsh	r3, [r3]
     bd0:	cmp	r3, #0
     bd4:	beq	be0 <coda_expression_lex+0xbe0>
     bd8:	str	ip, [r2, #64]	; 0x40
     bdc:	str	r4, [r2, #68]	; 0x44
     be0:	ldr	r2, [pc, #156]	; c84 <coda_expression_lex+0xc84>
     be4:	ldr	r1, [pc, #148]	; c80 <coda_expression_lex+0xc80>
     be8:	add	r1, r1, ip, lsl #1
     bec:	ldrsh	r1, [r1]
     bf0:	add	r1, r1, #1
     bf4:	add	r2, r2, r1, lsl #1
     bf8:	ldrsh	r2, [r2]
     bfc:	cmp	r2, ip
     c00:	beq	c14 <coda_expression_lex+0xc14>
     c04:	ldr	r1, [pc, #148]	; ca0 <coda_expression_lex+0xca0>
     c08:	add	r3, r1, ip, lsl #1
     c0c:	ldrsh	ip, [r3]
     c10:	b	be0 <coda_expression_lex+0xbe0>
     c14:	ldr	r2, [pc, #144]	; cac <coda_expression_lex+0xcac>
     c18:	add	r3, r2, r1, lsl #1
     c1c:	ldrsh	r2, [r3]
     c20:	movw	lr, #273	; 0x111
     c24:	cmp	r2, lr
     c28:	moveq	ip, #1
     c2c:	movne	ip, #0
     c30:	mov	r1, #0
     c34:	cmp	ip, #0
     c38:	movne	r2, r1
     c3c:	moveq	r2, r2
     c40:	ldr	fp, [r6, #80]	; 0x50
     c44:	cmp	r2, #0
     c48:	beq	c60 <coda_expression_lex+0xc60>
     c4c:	ldr	ip, [r6, #36]	; 0x24
     c50:	add	r4, ip, #1
     c54:	str	r4, [r6, #36]	; 0x24
     c58:	mov	r0, r2
     c5c:	b	ec <coda_expression_lex+0xec>
     c60:	ldr	r4, [r6, #36]	; 0x24
     c64:	b	18c <coda_expression_lex+0x18c>
     c68:	ldr	r0, [pc, #52]	; ca4 <coda_expression_lex+0xca4>
     c6c:	mov	r1, r6
     c70:	bl	169c <yy_fatal_error>
     c74:	b	d8 <coda_expression_lex+0xd8>
     c78:	.word	0x00000000
     c7c:	.word	0x00000092
     c80:	.word	0x0000054a
     c84:	.word	0x00000c56
     c88:	.word	0x000001fa
     c8c:	.word	0x00000169
     c90:	.word	0x0000041e
     c94:	.word	0x00000046
     c98:	.word	0x000001ca
     c9c:	.word	0x0000051e
     ca0:	.word	0x00000772
     ca4:	.word	0x00000136
     ca8:	.word	0x00000000
     cac:	.word	0x0000099a

00000cb0 <yy_get_previous_state>:
     cb0:	mov	ip, sp
     cb4:	sub	sp, sp, #16
     cb8:	str	ip, [sp]
     cbc:	str	lr, [sp, #4]
     cc0:	str	r4, [sp, #8]
     cc4:	str	r5, [sp, #12]
     cc8:	mov	r1, r0
     ccc:	ldr	r0, [r1, #44]	; 0x2c
     cd0:	ldr	r4, [r1, #80]	; 0x50
     cd4:	ldr	r3, [r1, #36]	; 0x24
     cd8:	cmp	r4, r3
     cdc:	bcs	d80 <yy_get_previous_state+0xd0>
     ce0:	ldrb	r2, [r4]
     ce4:	cmp	r2, #0
     ce8:	beq	cfc <yy_get_previous_state+0x4c>
     cec:	ldr	r3, [pc, #172]	; da0 <yy_get_previous_state+0xf0>
     cf0:	and	r2, r2, #255	; 0xff
     cf4:	ldrb	r2, [r3, r2]
     cf8:	b	d00 <yy_get_previous_state+0x50>
     cfc:	mov	r2, #1
     d00:	and	r5, r2, #255	; 0xff
     d04:	ldr	r3, [pc, #144]	; d9c <yy_get_previous_state+0xec>
     d08:	add	r2, r3, r0, lsl #1
     d0c:	ldrsh	r2, [r2]
     d10:	cmp	r2, #0
     d14:	beq	d20 <yy_get_previous_state+0x70>
     d18:	str	r0, [r1, #64]	; 0x40
     d1c:	str	r4, [r1, #68]	; 0x44
     d20:	ldr	ip, [pc, #112]	; d98 <yy_get_previous_state+0xe8>
     d24:	ldr	r3, [pc, #104]	; d94 <yy_get_previous_state+0xe4>
     d28:	add	r2, r3, r0, lsl #1
     d2c:	ldrsh	r2, [r2]
     d30:	add	r2, r2, r5
     d34:	add	r3, ip, r2, lsl #1
     d38:	ldrsh	r3, [r3]
     d3c:	cmp	r3, r0
     d40:	beq	d6c <yy_get_previous_state+0xbc>
     d44:	ldr	r2, [pc, #92]	; da8 <yy_get_previous_state+0xf8>
     d48:	add	r0, r2, r0, lsl #1
     d4c:	ldrsh	r0, [r0]
     d50:	movw	lr, #274	; 0x112
     d54:	cmp	r0, lr
     d58:	blt	d20 <yy_get_previous_state+0x70>
     d5c:	ldr	ip, [pc, #64]	; da4 <yy_get_previous_state+0xf4>
     d60:	ldrb	r2, [ip, r5]
     d64:	and	r5, r2, #255	; 0xff
     d68:	b	d20 <yy_get_previous_state+0x70>
     d6c:	ldr	ip, [pc, #56]	; dac <yy_get_previous_state+0xfc>
     d70:	add	r2, ip, r2, lsl #1
     d74:	ldrsh	r0, [r2]
     d78:	add	r4, r4, #1
     d7c:	b	cd4 <yy_get_previous_state+0x24>
     d80:	ldr	r4, [sp, #8]
     d84:	ldr	r5, [sp, #12]
     d88:	ldr	lr, [sp, #4]
     d8c:	add	sp, sp, #16
     d90:	bx	lr
     d94:	.word	0x0000054a
     d98:	.word	0x00000c56
     d9c:	.word	0x000001fa
     da0:	.word	0x0000041e
     da4:	.word	0x0000051e
     da8:	.word	0x00000772
     dac:	.word	0x0000099a

00000db0 <coda_expression_restart>:
     db0:	mov	ip, sp
     db4:	sub	sp, sp, #16
     db8:	str	ip, [sp]
     dbc:	str	lr, [sp, #4]
     dc0:	str	r4, [sp, #8]
     dc4:	str	r5, [sp, #12]
     dc8:	mov	r4, r1
     dcc:	mov	r5, r0
     dd0:	ldr	r0, [r4, #20]
     dd4:	cmp	r0, #0
     dd8:	beq	dec <coda_expression_restart+0x3c>
     ddc:	ldr	ip, [r4, #12]
     de0:	ldr	r3, [r0, ip, lsl #2]
     de4:	cmp	r3, #0
     de8:	bne	e10 <coda_expression_restart+0x60>
     dec:	mov	r0, r4
     df0:	bl	1394 <coda_expression_ensure_buffer_stack>
     df4:	ldr	r0, [r4, #4]
     df8:	mov	r1, #16384	; 0x4000
     dfc:	mov	r2, r4
     e00:	bl	f84 <coda_expression__create_buffer>
     e04:	ldr	r1, [r4, #20]
     e08:	ldr	r3, [r4, #12]
     e0c:	str	r0, [r1, r3, lsl #2]
     e10:	ldr	r1, [r4, #20]
     e14:	cmp	r1, #0
     e18:	beq	e28 <coda_expression_restart+0x78>
     e1c:	ldr	r2, [r4, #12]
     e20:	ldr	r0, [r1, r2, lsl #2]
     e24:	b	e2c <coda_expression_restart+0x7c>
     e28:	mov	r0, #0
     e2c:	mov	r2, r4
     e30:	mov	r1, r5
     e34:	bl	10dc <coda_expression__init_buffer>
     e38:	mov	r0, r4
     e3c:	ldr	r4, [sp, #8]
     e40:	ldr	r5, [sp, #12]
     e44:	ldr	lr, [sp, #4]
     e48:	add	sp, sp, #16
     e4c:	b	f1c <coda_expression__load_buffer_state>

00000e50 <coda_expression__switch_to_buffer>:
     e50:	mov	ip, sp
     e54:	sub	sp, sp, #16
     e58:	str	ip, [sp]
     e5c:	str	lr, [sp, #4]
     e60:	str	r4, [sp, #8]
     e64:	str	r5, [sp, #12]
     e68:	mov	r4, r1
     e6c:	mov	r5, r0
     e70:	mov	r0, r4
     e74:	bl	1394 <coda_expression_ensure_buffer_stack>
     e78:	ldr	r2, [r4, #20]
     e7c:	cmp	r2, #0
     e80:	beq	e90 <coda_expression__switch_to_buffer+0x40>
     e84:	ldr	r3, [r4, #12]
     e88:	ldr	r0, [r2, r3, lsl #2]
     e8c:	b	e94 <coda_expression__switch_to_buffer+0x44>
     e90:	mov	r0, #0
     e94:	cmp	r0, r5
     e98:	beq	f08 <coda_expression__switch_to_buffer+0xb8>
     e9c:	ldr	r1, [r4, #20]
     ea0:	cmp	r1, #0
     ea4:	beq	eec <coda_expression__switch_to_buffer+0x9c>
     ea8:	ldr	r2, [r4, #12]
     eac:	ldr	r2, [r1, r2, lsl #2]
     eb0:	cmp	r2, #0
     eb4:	beq	eec <coda_expression__switch_to_buffer+0x9c>
     eb8:	ldr	ip, [r4, #36]	; 0x24
     ebc:	ldrb	r0, [r4, #24]
     ec0:	strb	r0, [ip]
     ec4:	ldr	r3, [r4, #20]
     ec8:	ldr	r0, [r4, #12]
     ecc:	ldr	r0, [r3, r0, lsl #2]
     ed0:	ldr	ip, [r4, #36]	; 0x24
     ed4:	str	ip, [r0, #8]
     ed8:	ldr	r2, [r4, #20]
     edc:	ldr	r1, [r4, #12]
     ee0:	ldr	ip, [r2, r1, lsl #2]
     ee4:	ldr	r3, [r4, #28]
     ee8:	str	r3, [ip, #16]
     eec:	ldr	r2, [r4, #20]
     ef0:	ldr	r3, [r4, #12]
     ef4:	str	r5, [r2, r3, lsl #2]
     ef8:	mov	r0, r4
     efc:	bl	f1c <coda_expression__load_buffer_state>
     f00:	mov	r0, #1
     f04:	str	r0, [r4, #48]	; 0x30
     f08:	ldr	r4, [sp, #8]
     f0c:	ldr	r5, [sp, #12]
     f10:	ldr	lr, [sp, #4]
     f14:	add	sp, sp, #16
     f18:	bx	lr

00000f1c <coda_expression__load_buffer_state>:
     f1c:	mov	ip, sp
     f20:	sub	sp, sp, #8
     f24:	str	ip, [sp]
     f28:	str	lr, [sp, #4]
     f2c:	ldr	r3, [r0, #20]
     f30:	ldr	r1, [r0, #12]
     f34:	ldr	r3, [r3, r1, lsl #2]
     f38:	ldr	r1, [r3, #16]
     f3c:	str	r1, [r0, #28]
     f40:	ldr	r2, [r0, #20]
     f44:	ldr	r1, [r0, #12]
     f48:	ldr	r2, [r2, r1, lsl #2]
     f4c:	ldr	r1, [r2, #8]
     f50:	str	r1, [r0, #36]	; 0x24
     f54:	str	r1, [r0, #80]	; 0x50
     f58:	ldr	r1, [r0, #20]
     f5c:	ldr	ip, [r0, #12]
     f60:	ldr	r1, [r1, ip, lsl #2]
     f64:	ldr	r3, [r1]
     f68:	str	r3, [r0, #4]
     f6c:	ldr	r2, [r0, #36]	; 0x24
     f70:	ldrb	r1, [r2]
     f74:	strb	r1, [r0, #24]
     f78:	ldr	lr, [sp, #4]
     f7c:	add	sp, sp, #8
     f80:	bx	lr

00000f84 <coda_expression__create_buffer>:
     f84:	mov	ip, sp
     f88:	sub	sp, sp, #24
     f8c:	str	ip, [sp]
     f90:	str	lr, [sp, #4]
     f94:	str	r4, [sp, #8]
     f98:	str	r5, [sp, #12]
     f9c:	str	r6, [sp, #16]
     fa0:	str	r7, [sp, #20]
     fa4:	mov	r5, r2
     fa8:	mov	r6, r1
     fac:	mov	r7, r0
     fb0:	mov	r0, #48	; 0x30
     fb4:	mov	r1, r5
     fb8:	bl	1c20 <coda_expression_alloc>
     fbc:	mov	r4, r0
     fc0:	cmp	r4, #0
     fc4:	bne	fd4 <coda_expression__create_buffer+0x50>
     fc8:	ldr	r0, [pc, #100]	; 1034 <coda_expression__create_buffer+0xb0>
     fcc:	mov	r1, r5
     fd0:	bl	169c <yy_fatal_error>
     fd4:	str	r6, [r4, #12]
     fd8:	add	r0, r6, #2
     fdc:	mov	r1, r5
     fe0:	bl	1c20 <coda_expression_alloc>
     fe4:	str	r0, [r4, #4]
     fe8:	cmp	r0, #0
     fec:	bne	ffc <coda_expression__create_buffer+0x78>
     ff0:	ldr	r0, [pc, #60]	; 1034 <coda_expression__create_buffer+0xb0>
     ff4:	mov	r1, r5
     ff8:	bl	169c <yy_fatal_error>
     ffc:	mov	r1, #1
    1000:	str	r1, [r4, #20]
    1004:	mov	r2, r5
    1008:	mov	r1, r7
    100c:	mov	r0, r4
    1010:	bl	10dc <coda_expression__init_buffer>
    1014:	mov	r0, r4
    1018:	ldr	r4, [sp, #8]
    101c:	ldr	r5, [sp, #12]
    1020:	ldr	r6, [sp, #16]
    1024:	ldr	r7, [sp, #20]
    1028:	ldr	lr, [sp, #4]
    102c:	add	sp, sp, #24
    1030:	bx	lr
    1034:	.word	0x000000af

00001038 <coda_expression__delete_buffer>:
    1038:	mov	ip, sp
    103c:	sub	sp, sp, #16
    1040:	str	ip, [sp]
    1044:	str	lr, [sp, #4]
    1048:	str	r4, [sp, #8]
    104c:	str	r5, [sp, #12]
    1050:	mov	r4, r1
    1054:	mov	r5, r0
    1058:	cmp	r5, #0
    105c:	beq	10c8 <coda_expression__delete_buffer+0x90>
    1060:	ldr	r0, [r4, #20]
    1064:	cmp	r0, #0
    1068:	beq	1078 <coda_expression__delete_buffer+0x40>
    106c:	ldr	r3, [r4, #12]
    1070:	ldr	r2, [r0, r3, lsl #2]
    1074:	b	107c <coda_expression__delete_buffer+0x44>
    1078:	mov	r2, #0
    107c:	cmp	r5, r2
    1080:	bne	1094 <coda_expression__delete_buffer+0x5c>
    1084:	ldr	r2, [r4, #20]
    1088:	ldr	ip, [r4, #12]
    108c:	mov	r0, #0
    1090:	str	r0, [r2, ip, lsl #2]
    1094:	ldr	r3, [r5, #20]
    1098:	cmp	r3, #0
    109c:	beq	10ac <coda_expression__delete_buffer+0x74>
    10a0:	ldr	r0, [r5, #4]
    10a4:	mov	r1, r4
    10a8:	bl	1c58 <coda_expression_free>
    10ac:	mov	r1, r4
    10b0:	mov	r0, r5
    10b4:	ldr	r4, [sp, #8]
    10b8:	ldr	r5, [sp, #12]
    10bc:	ldr	lr, [sp, #4]
    10c0:	add	sp, sp, #16
    10c4:	b	1c58 <coda_expression_free>
    10c8:	ldr	r4, [sp, #8]
    10cc:	ldr	r5, [sp, #12]
    10d0:	ldr	lr, [sp, #4]
    10d4:	add	sp, sp, #16
    10d8:	bx	lr

000010dc <coda_expression__init_buffer>:
    10dc:	mov	ip, sp
    10e0:	sub	sp, sp, #24
    10e4:	str	ip, [sp]
    10e8:	str	lr, [sp, #4]
    10ec:	str	r4, [sp, #8]
    10f0:	str	r5, [sp, #12]
    10f4:	str	r6, [sp, #16]
    10f8:	str	r7, [sp, #20]
    10fc:	mov	r4, r2
    1100:	mov	r5, r1
    1104:	mov	r6, r0
    1108:	bl	0 <__errno_location>
    110c:	ldr	r7, [r0]
    1110:	mov	r1, r4
    1114:	mov	r0, r6
    1118:	bl	1188 <coda_expression__flush_buffer>
    111c:	str	r5, [r6]
    1120:	mov	r2, #1
    1124:	str	r2, [r6, #40]	; 0x28
    1128:	ldr	r0, [r4, #20]
    112c:	cmp	r0, #0
    1130:	beq	1140 <coda_expression__init_buffer+0x64>
    1134:	ldr	r3, [r4, #12]
    1138:	ldr	r2, [r0, r3, lsl #2]
    113c:	b	1144 <coda_expression__init_buffer+0x68>
    1140:	mov	r2, #0
    1144:	cmp	r6, r2
    1148:	beq	115c <coda_expression__init_buffer+0x80>
    114c:	mov	r3, #1
    1150:	str	r3, [r6, #32]
    1154:	mov	r0, #0
    1158:	str	r0, [r6, #36]	; 0x24
    115c:	mov	ip, #1
    1160:	str	ip, [r6, #24]
    1164:	bl	0 <__errno_location>
    1168:	str	r7, [r0]
    116c:	ldr	r4, [sp, #8]
    1170:	ldr	r5, [sp, #12]
    1174:	ldr	r6, [sp, #16]
    1178:	ldr	r7, [sp, #20]
    117c:	ldr	lr, [sp, #4]
    1180:	add	sp, sp, #24
    1184:	bx	lr

00001188 <coda_expression__flush_buffer>:
    1188:	mov	ip, sp
    118c:	sub	sp, sp, #8
    1190:	str	ip, [sp]
    1194:	str	lr, [sp, #4]
    1198:	cmp	r0, #0
    119c:	beq	120c <coda_expression__flush_buffer+0x84>
    11a0:	mov	r2, #0
    11a4:	str	r2, [r0, #16]
    11a8:	ldr	r2, [r0, #4]
    11ac:	mov	ip, #0
    11b0:	strb	ip, [r2]
    11b4:	ldr	r3, [r0, #4]
    11b8:	mov	r2, #0
    11bc:	strb	r2, [r3, #1]
    11c0:	ldr	ip, [r0, #4]
    11c4:	str	ip, [r0, #8]
    11c8:	mov	r2, #1
    11cc:	str	r2, [r0, #28]
    11d0:	mov	r2, #0
    11d4:	str	r2, [r0, #44]	; 0x2c
    11d8:	ldr	r2, [r1, #20]
    11dc:	cmp	r2, #0
    11e0:	beq	11f0 <coda_expression__flush_buffer+0x68>
    11e4:	ldr	r3, [r1, #12]
    11e8:	ldr	r2, [r2, r3, lsl #2]
    11ec:	b	11f4 <coda_expression__flush_buffer+0x6c>
    11f0:	mov	r2, #0
    11f4:	cmp	r0, r2
    11f8:	bne	120c <coda_expression__flush_buffer+0x84>
    11fc:	mov	r0, r1
    1200:	ldr	lr, [sp, #4]
    1204:	add	sp, sp, #8
    1208:	b	f1c <coda_expression__load_buffer_state>
    120c:	ldr	lr, [sp, #4]
    1210:	add	sp, sp, #8
    1214:	bx	lr

00001218 <coda_expression_push_buffer_state>:
    1218:	mov	ip, sp
    121c:	sub	sp, sp, #16
    1220:	str	ip, [sp]
    1224:	str	lr, [sp, #4]
    1228:	str	r4, [sp, #8]
    122c:	str	r5, [sp, #12]
    1230:	mov	r4, r1
    1234:	mov	r5, r0
    1238:	cmp	r5, #0
    123c:	beq	12d8 <coda_expression_push_buffer_state+0xc0>
    1240:	mov	r0, r4
    1244:	bl	1394 <coda_expression_ensure_buffer_stack>
    1248:	ldr	r0, [r4, #20]
    124c:	cmp	r0, #0
    1250:	beq	1298 <coda_expression_push_buffer_state+0x80>
    1254:	ldr	r1, [r4, #12]
    1258:	ldr	ip, [r0, r1, lsl #2]
    125c:	cmp	ip, #0
    1260:	beq	1298 <coda_expression_push_buffer_state+0x80>
    1264:	ldr	ip, [r4, #36]	; 0x24
    1268:	ldrb	r1, [r4, #24]
    126c:	strb	r1, [ip]
    1270:	ldr	r1, [r4, #20]
    1274:	ldr	r0, [r4, #12]
    1278:	ldr	r1, [r1, r0, lsl #2]
    127c:	ldr	ip, [r4, #36]	; 0x24
    1280:	str	ip, [r1, #8]
    1284:	ldr	r2, [r4, #20]
    1288:	ldr	r3, [r4, #12]
    128c:	ldr	r3, [r2, r3, lsl #2]
    1290:	ldr	r2, [r4, #28]
    1294:	str	r2, [r3, #16]
    1298:	ldr	r3, [r4, #20]
    129c:	cmp	r3, #0
    12a0:	beq	12bc <coda_expression_push_buffer_state+0xa4>
    12a4:	ldr	r2, [r4, #12]
    12a8:	ldr	r0, [r3, r2, lsl #2]
    12ac:	cmp	r0, #0
    12b0:	beq	12bc <coda_expression_push_buffer_state+0xa4>
    12b4:	add	r3, r2, #1
    12b8:	str	r3, [r4, #12]
    12bc:	ldr	ip, [r4, #20]
    12c0:	ldr	r0, [r4, #12]
    12c4:	str	r5, [ip, r0, lsl #2]
    12c8:	mov	r0, r4
    12cc:	bl	f1c <coda_expression__load_buffer_state>
    12d0:	mov	r2, #1
    12d4:	str	r2, [r4, #48]	; 0x30
    12d8:	ldr	r4, [sp, #8]
    12dc:	ldr	r5, [sp, #12]
    12e0:	ldr	lr, [sp, #4]
    12e4:	add	sp, sp, #16
    12e8:	bx	lr

000012ec <coda_expression_pop_buffer_state>:
    12ec:	mov	ip, sp
    12f0:	sub	sp, sp, #16
    12f4:	str	ip, [sp]
    12f8:	str	lr, [sp, #4]
    12fc:	str	r4, [sp, #8]
    1300:	mov	r4, r0
    1304:	ldr	r1, [r4, #20]
    1308:	cmp	r1, #0
    130c:	beq	1384 <coda_expression_pop_buffer_state+0x98>
    1310:	ldr	r3, [r4, #12]
    1314:	ldr	r0, [r1, r3, lsl #2]
    1318:	cmp	r0, #0
    131c:	beq	1384 <coda_expression_pop_buffer_state+0x98>
    1320:	cmp	r1, #0
    1324:	bne	132c <coda_expression_pop_buffer_state+0x40>
    1328:	mov	r0, #0
    132c:	mov	r1, r4
    1330:	bl	1038 <coda_expression__delete_buffer>
    1334:	ldr	r1, [r4, #20]
    1338:	ldr	r2, [r4, #12]
    133c:	mov	r3, #0
    1340:	str	r3, [r1, r2, lsl #2]
    1344:	ldr	r2, [r4, #12]
    1348:	cmp	r2, #0
    134c:	bls	1358 <coda_expression_pop_buffer_state+0x6c>
    1350:	sub	ip, r2, #1
    1354:	str	ip, [r4, #12]
    1358:	ldr	r1, [r4, #20]
    135c:	cmp	r1, #0
    1360:	beq	1384 <coda_expression_pop_buffer_state+0x98>
    1364:	ldr	r0, [r4, #12]
    1368:	ldr	r0, [r1, r0, lsl #2]
    136c:	cmp	r0, #0
    1370:	beq	1384 <coda_expression_pop_buffer_state+0x98>
    1374:	mov	r0, r4
    1378:	bl	f1c <coda_expression__load_buffer_state>
    137c:	mov	ip, #1
    1380:	str	ip, [r4, #48]	; 0x30
    1384:	ldr	r4, [sp, #8]
    1388:	ldr	lr, [sp, #4]
    138c:	add	sp, sp, #16
    1390:	bx	lr

00001394 <coda_expression_ensure_buffer_stack>:
    1394:	mov	ip, sp
    1398:	sub	sp, sp, #16
    139c:	str	ip, [sp]
    13a0:	str	lr, [sp, #4]
    13a4:	str	r4, [sp, #8]
    13a8:	str	r5, [sp, #12]
    13ac:	mov	r4, r0
    13b0:	ldr	r0, [r4, #20]
    13b4:	cmp	r0, #0
    13b8:	bne	1404 <coda_expression_ensure_buffer_stack+0x70>
    13bc:	mov	r5, #1
    13c0:	mov	r0, #4
    13c4:	mov	r1, r4
    13c8:	bl	1c20 <coda_expression_alloc>
    13cc:	str	r0, [r4, #20]
    13d0:	cmp	r0, #0
    13d4:	bne	13e4 <coda_expression_ensure_buffer_stack+0x50>
    13d8:	ldr	r0, [pc, #144]	; 1470 <coda_expression_ensure_buffer_stack+0xdc>
    13dc:	mov	r1, r4
    13e0:	bl	169c <yy_fatal_error>
    13e4:	ldr	r0, [r4, #20]
    13e8:	mov	r1, #0
    13ec:	mov	r2, #4
    13f0:	bl	0 <memset>
    13f4:	str	r5, [r4, #16]
    13f8:	mov	r2, #0
    13fc:	str	r2, [r4, #12]
    1400:	b	145c <coda_expression_ensure_buffer_stack+0xc8>
    1404:	ldr	r2, [r4, #12]
    1408:	ldr	r1, [r4, #16]
    140c:	sub	r3, r1, #1
    1410:	cmp	r2, r3
    1414:	bcc	145c <coda_expression_ensure_buffer_stack+0xc8>
    1418:	add	r5, r1, #8
    141c:	lsl	r1, r5, #2
    1420:	mov	r2, r4
    1424:	bl	1c3c <coda_expression_realloc>
    1428:	str	r0, [r4, #20]
    142c:	cmp	r0, #0
    1430:	bne	1440 <coda_expression_ensure_buffer_stack+0xac>
    1434:	ldr	r0, [pc, #52]	; 1470 <coda_expression_ensure_buffer_stack+0xdc>
    1438:	mov	r1, r4
    143c:	bl	169c <yy_fatal_error>
    1440:	ldr	r3, [r4, #20]
    1444:	ldr	r1, [r4, #16]
    1448:	add	r0, r3, r1, lsl #2
    144c:	mov	r1, #0
    1450:	mov	r2, #32
    1454:	bl	0 <memset>
    1458:	str	r5, [r4, #16]
    145c:	ldr	r4, [sp, #8]
    1460:	ldr	r5, [sp, #12]
    1464:	ldr	lr, [sp, #4]
    1468:	add	sp, sp, #16
    146c:	bx	lr
    1470:	.word	0x000000db

00001474 <coda_expression__scan_buffer>:
    1474:	mov	ip, sp
    1478:	sub	sp, sp, #24
    147c:	str	ip, [sp]
    1480:	str	lr, [sp, #4]
    1484:	str	r4, [sp, #8]
    1488:	str	r5, [sp, #12]
    148c:	str	r6, [sp, #16]
    1490:	str	r7, [sp, #20]
    1494:	mov	r4, r2
    1498:	mov	r6, r1
    149c:	mov	r7, r0
    14a0:	cmp	r6, #2
    14a4:	bcc	1548 <coda_expression__scan_buffer+0xd4>
    14a8:	add	r0, r7, r6
    14ac:	sub	lr, r0, #4096	; 0x1000
    14b0:	ldrb	r3, [lr, #4094]	; 0xffe
    14b4:	cmp	r3, #0
    14b8:	bne	1548 <coda_expression__scan_buffer+0xd4>
    14bc:	sub	lr, r0, #4096	; 0x1000
    14c0:	ldrb	r3, [lr, #4095]	; 0xfff
    14c4:	cmp	r3, #0
    14c8:	bne	1548 <coda_expression__scan_buffer+0xd4>
    14cc:	mov	r0, #48	; 0x30
    14d0:	mov	r1, r4
    14d4:	bl	1c20 <coda_expression_alloc>
    14d8:	mov	r5, r0
    14dc:	cmp	r5, #0
    14e0:	bne	14f0 <coda_expression__scan_buffer+0x7c>
    14e4:	ldr	r0, [pc, #128]	; 156c <coda_expression__scan_buffer+0xf8>
    14e8:	mov	r1, r4
    14ec:	bl	169c <yy_fatal_error>
    14f0:	sub	r3, r6, #2
    14f4:	str	r3, [r5, #12]
    14f8:	str	r7, [r5, #4]
    14fc:	str	r7, [r5, #8]
    1500:	mov	r1, #0
    1504:	str	r1, [r5, #20]
    1508:	mov	r0, #0
    150c:	str	r0, [r5]
    1510:	ldr	r0, [r5, #12]
    1514:	str	r0, [r5, #16]
    1518:	mov	r2, #0
    151c:	str	r2, [r5, #24]
    1520:	mov	r1, #1
    1524:	str	r1, [r5, #28]
    1528:	mov	r2, #0
    152c:	str	r2, [r5, #40]	; 0x28
    1530:	mov	ip, #0
    1534:	str	ip, [r5, #44]	; 0x2c
    1538:	mov	r1, r4
    153c:	mov	r0, r5
    1540:	bl	e50 <coda_expression__switch_to_buffer>
    1544:	b	154c <coda_expression__scan_buffer+0xd8>
    1548:	mov	r5, #0
    154c:	mov	r0, r5
    1550:	ldr	r4, [sp, #8]
    1554:	ldr	r5, [sp, #12]
    1558:	ldr	r6, [sp, #16]
    155c:	ldr	r7, [sp, #20]
    1560:	ldr	lr, [sp, #4]
    1564:	add	sp, sp, #24
    1568:	bx	lr
    156c:	.word	0x0000010c

00001570 <coda_expression__scan_string>:
    1570:	mov	ip, sp
    1574:	sub	sp, sp, #16
    1578:	str	ip, [sp]
    157c:	str	lr, [sp, #4]
    1580:	str	r4, [sp, #8]
    1584:	str	r5, [sp, #12]
    1588:	mov	r5, r1
    158c:	mov	r4, r0
    1590:	mov	r0, r4
    1594:	bl	0 <strlen>
    1598:	mov	r1, r0
    159c:	mov	r2, r5
    15a0:	mov	r0, r4
    15a4:	ldr	r4, [sp, #8]
    15a8:	ldr	r5, [sp, #12]
    15ac:	ldr	lr, [sp, #4]
    15b0:	add	sp, sp, #16
    15b4:	b	15b8 <coda_expression__scan_bytes>

000015b8 <coda_expression__scan_bytes>:
    15b8:	mov	ip, sp
    15bc:	sub	sp, sp, #32
    15c0:	str	ip, [sp]
    15c4:	str	lr, [sp, #4]
    15c8:	str	r4, [sp, #8]
    15cc:	str	r5, [sp, #12]
    15d0:	str	r6, [sp, #16]
    15d4:	str	r7, [sp, #20]
    15d8:	str	r8, [sp, #24]
    15dc:	mov	r5, r2
    15e0:	mov	r4, r1
    15e4:	mov	r6, r0
    15e8:	add	r8, r4, #2
    15ec:	mov	r1, r5
    15f0:	mov	r0, r8
    15f4:	bl	1c20 <coda_expression_alloc>
    15f8:	mov	r7, r0
    15fc:	cmp	r7, #0
    1600:	bne	1610 <coda_expression__scan_bytes+0x58>
    1604:	ldr	r0, [pc, #140]	; 1698 <coda_expression__scan_bytes+0xe0>
    1608:	mov	r1, r5
    160c:	bl	169c <yy_fatal_error>
    1610:	mov	r2, #0
    1614:	cmp	r2, r4
    1618:	bge	162c <coda_expression__scan_bytes+0x74>
    161c:	ldrb	r0, [r6, r2]
    1620:	strb	r0, [r7, r2]
    1624:	add	r2, r2, #1
    1628:	b	1614 <coda_expression__scan_bytes+0x5c>
    162c:	add	ip, r7, r4
    1630:	mov	r2, #0
    1634:	strb	r2, [ip, #1]
    1638:	mov	r0, #0
    163c:	strb	r0, [r7, r4]
    1640:	mov	r2, r5
    1644:	mov	r1, r8
    1648:	mov	r0, r7
    164c:	bl	1474 <coda_expression__scan_buffer>
    1650:	mov	r4, r0
    1654:	cmp	r4, #0
    1658:	bne	1668 <coda_expression__scan_bytes+0xb0>
    165c:	ldr	r0, [pc, #48]	; 1694 <coda_expression__scan_bytes+0xdc>
    1660:	mov	r1, r5
    1664:	bl	169c <yy_fatal_error>
    1668:	mov	r1, #1
    166c:	str	r1, [r4, #20]
    1670:	mov	r0, r4
    1674:	ldr	r4, [sp, #8]
    1678:	ldr	r5, [sp, #12]
    167c:	ldr	r6, [sp, #16]
    1680:	ldr	r7, [sp, #20]
    1684:	ldr	r8, [sp, #24]
    1688:	ldr	lr, [sp, #4]
    168c:	add	sp, sp, #32
    1690:	bx	lr
    1694:	.word	0x00000074
    1698:	.word	0x000001a1

0000169c <yy_fatal_error>:
    169c:	mov	ip, sp
    16a0:	sub	sp, sp, #8
    16a4:	str	ip, [sp]
    16a8:	str	lr, [sp, #4]
    16ac:	mov	r2, r0
    16b0:	ldr	r1, [pc, #24]	; 16d0 <yy_fatal_error+0x34>
    16b4:	ldr	r0, [r1]
    16b8:	ldr	r1, [pc, #20]	; 16d4 <yy_fatal_error+0x38>
    16bc:	bl	0 <fprintf>
    16c0:	mov	r0, #2
    16c4:	ldr	lr, [sp, #4]
    16c8:	add	sp, sp, #8
    16cc:	b	0 <exit>
    16d0:	.word	0x00000000
    16d4:	.word	0x000001f6

000016d8 <coda_expression_get_extra>:
    16d8:	mov	ip, sp
    16dc:	sub	sp, sp, #8
    16e0:	str	ip, [sp]
    16e4:	str	lr, [sp, #4]
    16e8:	ldr	r0, [r0]
    16ec:	ldr	lr, [sp, #4]
    16f0:	add	sp, sp, #8
    16f4:	bx	lr

000016f8 <coda_expression_get_lineno>:
    16f8:	mov	ip, sp
    16fc:	sub	sp, sp, #8
    1700:	str	ip, [sp]
    1704:	str	lr, [sp, #4]
    1708:	ldr	r1, [r0, #20]
    170c:	cmp	r1, #0
    1710:	beq	172c <coda_expression_get_lineno+0x34>
    1714:	ldr	r2, [r0, #12]
    1718:	ldr	r0, [r1, r2, lsl #2]
    171c:	cmp	r0, #0
    1720:	beq	172c <coda_expression_get_lineno+0x34>
    1724:	ldr	r0, [r0, #32]
    1728:	b	1730 <coda_expression_get_lineno+0x38>
    172c:	mov	r0, #0
    1730:	ldr	lr, [sp, #4]
    1734:	add	sp, sp, #8
    1738:	bx	lr

0000173c <coda_expression_get_column>:
    173c:	mov	ip, sp
    1740:	sub	sp, sp, #8
    1744:	str	ip, [sp]
    1748:	str	lr, [sp, #4]
    174c:	ldr	r1, [r0, #20]
    1750:	cmp	r1, #0
    1754:	beq	1770 <coda_expression_get_column+0x34>
    1758:	ldr	r2, [r0, #12]
    175c:	ldr	r0, [r1, r2, lsl #2]
    1760:	cmp	r0, #0
    1764:	beq	1770 <coda_expression_get_column+0x34>
    1768:	ldr	r0, [r0, #36]	; 0x24
    176c:	b	1774 <coda_expression_get_column+0x38>
    1770:	mov	r0, #0
    1774:	ldr	lr, [sp, #4]
    1778:	add	sp, sp, #8
    177c:	bx	lr

00001780 <coda_expression_get_in>:
    1780:	mov	ip, sp
    1784:	sub	sp, sp, #8
    1788:	str	ip, [sp]
    178c:	str	lr, [sp, #4]
    1790:	ldr	r0, [r0, #4]
    1794:	ldr	lr, [sp, #4]
    1798:	add	sp, sp, #8
    179c:	bx	lr

000017a0 <coda_expression_get_out>:
    17a0:	mov	ip, sp
    17a4:	sub	sp, sp, #8
    17a8:	str	ip, [sp]
    17ac:	str	lr, [sp, #4]
    17b0:	ldr	r0, [r0, #8]
    17b4:	ldr	lr, [sp, #4]
    17b8:	add	sp, sp, #8
    17bc:	bx	lr

000017c0 <coda_expression_get_leng>:
    17c0:	mov	ip, sp
    17c4:	sub	sp, sp, #8
    17c8:	str	ip, [sp]
    17cc:	str	lr, [sp, #4]
    17d0:	ldr	r0, [r0, #32]
    17d4:	ldr	lr, [sp, #4]
    17d8:	add	sp, sp, #8
    17dc:	bx	lr

000017e0 <coda_expression_get_text>:
    17e0:	mov	ip, sp
    17e4:	sub	sp, sp, #8
    17e8:	str	ip, [sp]
    17ec:	str	lr, [sp, #4]
    17f0:	ldr	r0, [r0, #80]	; 0x50
    17f4:	ldr	lr, [sp, #4]
    17f8:	add	sp, sp, #8
    17fc:	bx	lr

00001800 <coda_expression_set_extra>:
    1800:	mov	ip, sp
    1804:	sub	sp, sp, #8
    1808:	str	ip, [sp]
    180c:	str	lr, [sp, #4]
    1810:	str	r0, [r1]
    1814:	ldr	lr, [sp, #4]
    1818:	add	sp, sp, #8
    181c:	bx	lr

00001820 <coda_expression_set_lineno>:
    1820:	mov	ip, sp
    1824:	sub	sp, sp, #16
    1828:	str	ip, [sp]
    182c:	str	lr, [sp, #4]
    1830:	str	r4, [sp, #8]
    1834:	str	r5, [sp, #12]
    1838:	mov	r4, r1
    183c:	mov	r5, r0
    1840:	ldr	r0, [r4, #20]
    1844:	cmp	r0, #0
    1848:	beq	185c <coda_expression_set_lineno+0x3c>
    184c:	ldr	r1, [r4, #12]
    1850:	ldr	r1, [r0, r1, lsl #2]
    1854:	cmp	r1, #0
    1858:	bne	1868 <coda_expression_set_lineno+0x48>
    185c:	ldr	r0, [pc, #40]	; 188c <coda_expression_set_lineno+0x6c>
    1860:	mov	r1, r4
    1864:	bl	169c <yy_fatal_error>
    1868:	ldr	r2, [r4, #20]
    186c:	ldr	r3, [r4, #12]
    1870:	ldr	ip, [r2, r3, lsl #2]
    1874:	str	r5, [ip, #32]
    1878:	ldr	r4, [sp, #8]
    187c:	ldr	r5, [sp, #12]
    1880:	ldr	lr, [sp, #4]
    1884:	add	sp, sp, #16
    1888:	bx	lr
    188c:	.word	0x00000023

00001890 <coda_expression_set_column>:
    1890:	mov	ip, sp
    1894:	sub	sp, sp, #16
    1898:	str	ip, [sp]
    189c:	str	lr, [sp, #4]
    18a0:	str	r4, [sp, #8]
    18a4:	str	r5, [sp, #12]
    18a8:	mov	r4, r1
    18ac:	mov	r5, r0
    18b0:	ldr	r0, [r4, #20]
    18b4:	cmp	r0, #0
    18b8:	beq	18cc <coda_expression_set_column+0x3c>
    18bc:	ldr	r1, [r4, #12]
    18c0:	ldr	r1, [r0, r1, lsl #2]
    18c4:	cmp	r1, #0
    18c8:	bne	18d8 <coda_expression_set_column+0x48>
    18cc:	ldr	r0, [pc, #40]	; 18fc <coda_expression_set_column+0x6c>
    18d0:	mov	r1, r4
    18d4:	bl	169c <yy_fatal_error>
    18d8:	ldr	r2, [r4, #20]
    18dc:	ldr	r3, [r4, #12]
    18e0:	ldr	ip, [r2, r3, lsl #2]
    18e4:	str	r5, [ip, #36]	; 0x24
    18e8:	ldr	r4, [sp, #8]
    18ec:	ldr	r5, [sp, #12]
    18f0:	ldr	lr, [sp, #4]
    18f4:	add	sp, sp, #16
    18f8:	bx	lr
    18fc:	.word	0x00000000

00001900 <coda_expression_set_in>:
    1900:	mov	ip, sp
    1904:	sub	sp, sp, #8
    1908:	str	ip, [sp]
    190c:	str	lr, [sp, #4]
    1910:	str	r0, [r1, #4]
    1914:	ldr	lr, [sp, #4]
    1918:	add	sp, sp, #8
    191c:	bx	lr

00001920 <coda_expression_set_out>:
    1920:	mov	ip, sp
    1924:	sub	sp, sp, #8
    1928:	str	ip, [sp]
    192c:	str	lr, [sp, #4]
    1930:	str	r0, [r1, #8]
    1934:	ldr	lr, [sp, #4]
    1938:	add	sp, sp, #8
    193c:	bx	lr

00001940 <coda_expression_get_debug>:
    1940:	mov	ip, sp
    1944:	sub	sp, sp, #8
    1948:	str	ip, [sp]
    194c:	str	lr, [sp, #4]
    1950:	ldr	r0, [r0, #76]	; 0x4c
    1954:	ldr	lr, [sp, #4]
    1958:	add	sp, sp, #8
    195c:	bx	lr

00001960 <coda_expression_set_debug>:
    1960:	mov	ip, sp
    1964:	sub	sp, sp, #8
    1968:	str	ip, [sp]
    196c:	str	lr, [sp, #4]
    1970:	str	r0, [r1, #76]	; 0x4c
    1974:	ldr	lr, [sp, #4]
    1978:	add	sp, sp, #8
    197c:	bx	lr

00001980 <coda_expression_get_lval>:
    1980:	mov	ip, sp
    1984:	sub	sp, sp, #8
    1988:	str	ip, [sp]
    198c:	str	lr, [sp, #4]
    1990:	ldr	r0, [r0, #92]	; 0x5c
    1994:	ldr	lr, [sp, #4]
    1998:	add	sp, sp, #8
    199c:	bx	lr

000019a0 <coda_expression_set_lval>:
    19a0:	mov	ip, sp
    19a4:	sub	sp, sp, #8
    19a8:	str	ip, [sp]
    19ac:	str	lr, [sp, #4]
    19b0:	str	r0, [r1, #92]	; 0x5c
    19b4:	ldr	lr, [sp, #4]
    19b8:	add	sp, sp, #8
    19bc:	bx	lr

000019c0 <coda_expression_lex_init>:
    19c0:	mov	ip, sp
    19c4:	sub	sp, sp, #16
    19c8:	str	ip, [sp]
    19cc:	str	lr, [sp, #4]
    19d0:	str	r4, [sp, #8]
    19d4:	mov	r4, r0
    19d8:	cmp	r4, #0
    19dc:	bne	19f4 <coda_expression_lex_init+0x34>
    19e0:	bl	0 <__errno_location>
    19e4:	mov	r2, #22
    19e8:	str	r2, [r0]
    19ec:	mov	r0, #1
    19f0:	b	1a1c <coda_expression_lex_init+0x5c>
    19f4:	mov	r0, #96	; 0x60
    19f8:	mov	r1, #0
    19fc:	bl	1c20 <coda_expression_alloc>
    1a00:	str	r0, [r4]
    1a04:	cmp	r0, #0
    1a08:	bne	1a2c <coda_expression_lex_init+0x6c>
    1a0c:	bl	0 <__errno_location>
    1a10:	mov	r1, #12
    1a14:	str	r1, [r0]
    1a18:	mov	r0, #1
    1a1c:	ldr	r4, [sp, #8]
    1a20:	ldr	lr, [sp, #4]
    1a24:	add	sp, sp, #16
    1a28:	bx	lr
    1a2c:	mov	r1, #0
    1a30:	mov	r2, #96	; 0x60
    1a34:	bl	0 <memset>
    1a38:	ldr	r0, [r4]
    1a3c:	ldr	r4, [sp, #8]
    1a40:	ldr	lr, [sp, #4]
    1a44:	add	sp, sp, #16
    1a48:	b	1af4 <yy_init_globals>

00001a4c <coda_expression_lex_init_extra>:
    1a4c:	mov	ip, sp
    1a50:	sub	sp, sp, #112	; 0x70
    1a54:	str	ip, [sp]
    1a58:	str	lr, [sp, #4]
    1a5c:	str	r4, [sp, #8]
    1a60:	str	r5, [sp, #12]
    1a64:	mov	r4, r1
    1a68:	mov	r5, r0
    1a6c:	add	r1, sp, #16
    1a70:	mov	r0, r5
    1a74:	bl	1800 <coda_expression_set_extra>
    1a78:	cmp	r4, #0
    1a7c:	bne	1a94 <coda_expression_lex_init_extra+0x48>
    1a80:	bl	0 <__errno_location>
    1a84:	mov	r1, #22
    1a88:	str	r1, [r0]
    1a8c:	mov	r0, #1
    1a90:	b	1ae0 <coda_expression_lex_init_extra+0x94>
    1a94:	mov	r0, #96	; 0x60
    1a98:	add	r1, sp, #16
    1a9c:	bl	1c20 <coda_expression_alloc>
    1aa0:	str	r0, [r4]
    1aa4:	cmp	r0, #0
    1aa8:	bne	1ac0 <coda_expression_lex_init_extra+0x74>
    1aac:	bl	0 <__errno_location>
    1ab0:	mov	ip, #12
    1ab4:	str	ip, [r0]
    1ab8:	mov	r0, #1
    1abc:	b	1ae0 <coda_expression_lex_init_extra+0x94>
    1ac0:	mov	r1, #0
    1ac4:	mov	r2, #96	; 0x60
    1ac8:	bl	0 <memset>
    1acc:	ldr	r1, [r4]
    1ad0:	mov	r0, r5
    1ad4:	bl	1800 <coda_expression_set_extra>
    1ad8:	ldr	r0, [r4]
    1adc:	bl	1af4 <yy_init_globals>
    1ae0:	ldr	r4, [sp, #8]
    1ae4:	ldr	r5, [sp, #12]
    1ae8:	ldr	lr, [sp, #4]
    1aec:	add	sp, sp, #112	; 0x70
    1af0:	bx	lr

00001af4 <yy_init_globals>:
    1af4:	mov	ip, sp
    1af8:	sub	sp, sp, #8
    1afc:	str	ip, [sp]
    1b00:	str	lr, [sp, #4]
    1b04:	mov	r1, #0
    1b08:	str	r1, [r0, #20]
    1b0c:	mov	r1, #0
    1b10:	str	r1, [r0, #12]
    1b14:	mov	r1, #0
    1b18:	str	r1, [r0, #16]
    1b1c:	mov	r2, #0
    1b20:	str	r2, [r0, #36]	; 0x24
    1b24:	mov	r3, #0
    1b28:	str	r3, [r0, #40]	; 0x28
    1b2c:	mov	r3, #0
    1b30:	str	r3, [r0, #44]	; 0x2c
    1b34:	mov	ip, #0
    1b38:	str	ip, [r0, #52]	; 0x34
    1b3c:	mov	ip, #0
    1b40:	str	ip, [r0, #56]	; 0x38
    1b44:	mov	r1, #0
    1b48:	str	r1, [r0, #60]	; 0x3c
    1b4c:	mov	r2, #0
    1b50:	str	r2, [r0, #4]
    1b54:	mov	r1, #0
    1b58:	str	r1, [r0, #8]
    1b5c:	mov	r0, #0
    1b60:	ldr	lr, [sp, #4]
    1b64:	add	sp, sp, #8
    1b68:	bx	lr

00001b6c <coda_expression_lex_destroy>:
    1b6c:	mov	ip, sp
    1b70:	sub	sp, sp, #16
    1b74:	str	ip, [sp]
    1b78:	str	lr, [sp, #4]
    1b7c:	str	r4, [sp, #8]
    1b80:	mov	r4, r0
    1b84:	ldr	r1, [r4, #20]
    1b88:	cmp	r1, #0
    1b8c:	beq	1bd0 <coda_expression_lex_destroy+0x64>
    1b90:	ldr	r3, [r4, #12]
    1b94:	ldr	r0, [r1, r3, lsl #2]
    1b98:	cmp	r0, #0
    1b9c:	beq	1bd0 <coda_expression_lex_destroy+0x64>
    1ba0:	cmp	r1, #0
    1ba4:	bne	1bac <coda_expression_lex_destroy+0x40>
    1ba8:	mov	r0, #0
    1bac:	mov	r1, r4
    1bb0:	bl	1038 <coda_expression__delete_buffer>
    1bb4:	ldr	r1, [r4, #20]
    1bb8:	ldr	r2, [r4, #12]
    1bbc:	mov	r3, #0
    1bc0:	str	r3, [r1, r2, lsl #2]
    1bc4:	mov	r0, r4
    1bc8:	bl	12ec <coda_expression_pop_buffer_state>
    1bcc:	b	1b84 <coda_expression_lex_destroy+0x18>
    1bd0:	ldr	r0, [r4, #20]
    1bd4:	mov	r1, r4
    1bd8:	bl	1c58 <coda_expression_free>
    1bdc:	mov	r1, #0
    1be0:	str	r1, [r4, #20]
    1be4:	ldr	r0, [r4, #60]	; 0x3c
    1be8:	mov	r1, r4
    1bec:	bl	1c58 <coda_expression_free>
    1bf0:	mov	ip, #0
    1bf4:	str	ip, [r4, #60]	; 0x3c
    1bf8:	mov	r0, r4
    1bfc:	bl	1af4 <yy_init_globals>
    1c00:	mov	r1, r4
    1c04:	mov	r0, r4
    1c08:	bl	1c58 <coda_expression_free>
    1c0c:	mov	r0, #0
    1c10:	ldr	r4, [sp, #8]
    1c14:	ldr	lr, [sp, #4]
    1c18:	add	sp, sp, #16
    1c1c:	bx	lr

00001c20 <coda_expression_alloc>:
    1c20:	mov	ip, sp
    1c24:	sub	sp, sp, #8
    1c28:	str	ip, [sp]
    1c2c:	str	lr, [sp, #4]
    1c30:	ldr	lr, [sp, #4]
    1c34:	add	sp, sp, #8
    1c38:	b	0 <malloc>

00001c3c <coda_expression_realloc>:
    1c3c:	mov	ip, sp
    1c40:	sub	sp, sp, #8
    1c44:	str	ip, [sp]
    1c48:	str	lr, [sp, #4]
    1c4c:	ldr	lr, [sp, #4]
    1c50:	add	sp, sp, #8
    1c54:	b	0 <realloc>

00001c58 <coda_expression_free>:
    1c58:	mov	ip, sp
    1c5c:	sub	sp, sp, #8
    1c60:	str	ip, [sp]
    1c64:	str	lr, [sp, #4]
    1c68:	ldr	lr, [sp, #4]
    1c6c:	add	sp, sp, #8
    1c70:	b	0 <free>
