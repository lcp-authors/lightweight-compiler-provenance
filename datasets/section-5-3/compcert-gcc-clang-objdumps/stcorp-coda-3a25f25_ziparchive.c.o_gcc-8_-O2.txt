
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/ziparchive.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <default_error_handler>:
   0:	push	{r0, r1, r2, r3}
   4:	mov	r2, #7
   8:	mov	r1, #1
   c:	movw	r0, #0
  10:	movt	r0, #0
  14:	str	r4, [sp, #-8]!
  18:	movw	r4, #0
  1c:	movt	r4, #0
  20:	str	lr, [sp, #4]
  24:	sub	sp, sp, #8
  28:	ldr	r3, [r4]
  2c:	bl	0 <fwrite>
  30:	add	r3, sp, #20
  34:	ldr	r0, [r4]
  38:	mov	r2, r3
  3c:	ldr	r1, [sp, #16]
  40:	str	r3, [sp, #4]
  44:	bl	0 <vfprintf>
  48:	ldr	r1, [r4]
  4c:	mov	r0, #10
  50:	bl	0 <fputc>
  54:	add	sp, sp, #8
  58:	ldr	r4, [sp]
  5c:	ldr	lr, [sp, #4]
  60:	add	sp, sp, #8
  64:	add	sp, sp, #16
  68:	bx	lr

0000006c <coda_za_get_num_entries>:
  6c:	ldr	r0, [r0, #4]
  70:	bx	lr

00000074 <coda_za_get_filename>:
  74:	ldr	r0, [r0, #8]
  78:	bx	lr

0000007c <coda_za_get_entry_by_index>:
  7c:	cmp	r1, #0
  80:	blt	a0 <coda_za_get_entry_by_index+0x24>
  84:	ldr	r3, [r0, #4]
  88:	cmp	r3, r1
  8c:	ble	a0 <coda_za_get_entry_by_index+0x24>
  90:	ldr	r0, [r0, #12]
  94:	mov	r3, #44	; 0x2c
  98:	mla	r0, r3, r1, r0
  9c:	bx	lr
  a0:	mov	r0, #0
  a4:	bx	lr

000000a8 <coda_za_get_entry_by_name>:
  a8:	str	r4, [sp, #-8]!
  ac:	mov	r4, r0
  b0:	ldr	r0, [r0, #16]
  b4:	str	lr, [sp, #4]
  b8:	bl	0 <coda_hashtable_get_index_from_name>
  bc:	cmp	r0, #0
  c0:	ldrge	r3, [r4, #12]
  c4:	movge	r2, #44	; 0x2c
  c8:	movlt	r0, #0
  cc:	ldr	r4, [sp]
  d0:	add	sp, sp, #4
  d4:	mlage	r0, r2, r0, r3
  d8:	pop	{pc}		; (ldr pc, [sp], #4)

000000dc <coda_za_get_entry_size>:
  dc:	ldr	r0, [r0, #24]
  e0:	bx	lr

000000e4 <coda_za_get_entry_name>:
  e4:	ldr	r0, [r0, #36]	; 0x24
  e8:	bx	lr

000000ec <coda_za_read_entry>:
  ec:	ldr	r3, [r0, #40]	; 0x28
  f0:	mov	r2, #0
  f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
  f8:	mov	r4, r0
  fc:	strd	r6, [sp, #8]
 100:	mov	r6, r1
 104:	str	r8, [sp, #16]
 108:	str	lr, [sp, #20]
 10c:	sub	sp, sp, #88	; 0x58
 110:	ldr	r1, [r0]
 114:	ldr	r0, [r3]
 118:	bl	0 <lseek>
 11c:	cmp	r0, #0
 120:	ldr	r3, [r4, #40]	; 0x28
 124:	blt	40c <coda_za_read_entry+0x320>
 128:	mov	r2, #30
 12c:	mov	r1, sp
 130:	ldr	r0, [r3]
 134:	bl	0 <read>
 138:	cmp	r0, #0
 13c:	blt	408 <coda_za_read_entry+0x31c>
 140:	ldr	r2, [sp]
 144:	movw	r3, #19280	; 0x4b50
 148:	movt	r3, #1027	; 0x403
 14c:	ldr	ip, [r4, #40]	; 0x28
 150:	cmp	r2, r3
 154:	bne	360 <coda_za_read_entry+0x274>
 158:	ldrh	r2, [r4, #4]
 15c:	ldrh	r3, [sp, #8]
 160:	cmp	r2, r3
 164:	bne	378 <coda_za_read_entry+0x28c>
 168:	ldrh	r2, [r4, #6]
 16c:	ldrh	r3, [sp, #10]
 170:	cmp	r2, r3
 174:	bne	390 <coda_za_read_entry+0x2a4>
 178:	ldrh	r2, [r4, #8]
 17c:	ldrh	r3, [sp, #12]
 180:	cmp	r2, r3
 184:	bne	3a8 <coda_za_read_entry+0x2bc>
 188:	ldr	r3, [sp, #14]
 18c:	ldr	r2, [r4, #16]
 190:	cmp	r2, r3
 194:	bne	3c0 <coda_za_read_entry+0x2d4>
 198:	ldr	r3, [sp, #18]
 19c:	ldr	r2, [r4, #20]
 1a0:	cmp	r2, r3
 1a4:	bne	3d8 <coda_za_read_entry+0x2ec>
 1a8:	ldr	r3, [sp, #22]
 1ac:	ldr	r2, [r4, #24]
 1b0:	cmp	r2, r3
 1b4:	bne	3f0 <coda_za_read_entry+0x304>
 1b8:	ldrh	r3, [sp, #26]
 1bc:	ldrh	r2, [r4, #28]
 1c0:	cmp	r2, r3
 1c4:	bne	348 <coda_za_read_entry+0x25c>
 1c8:	ldrh	r1, [sp, #28]
 1cc:	mov	r2, #1
 1d0:	ldr	r0, [ip]
 1d4:	add	r1, r1, r3
 1d8:	bl	0 <lseek>
 1dc:	cmp	r0, #0
 1e0:	blt	408 <coda_za_read_entry+0x31c>
 1e4:	ldrh	r5, [r4, #4]
 1e8:	ldr	r7, [r4, #40]	; 0x28
 1ec:	cmp	r5, #0
 1f0:	beq	2d8 <coda_za_read_entry+0x1ec>
 1f4:	ldr	r8, [r4, #20]
 1f8:	mov	r0, r8
 1fc:	bl	0 <malloc>
 200:	subs	r5, r0, #0
 204:	beq	448 <coda_za_read_entry+0x35c>
 208:	mov	r2, r8
 20c:	mov	r1, r5
 210:	ldr	r0, [r7]
 214:	bl	0 <read>
 218:	cmp	r0, #0
 21c:	blt	460 <coda_za_read_entry+0x374>
 220:	mov	ip, #0
 224:	add	r0, sp, #32
 228:	movw	r2, #0
 22c:	movt	r2, #0
 230:	mov	r3, #56	; 0x38
 234:	mvn	r1, #14
 238:	str	ip, [sp, #32]
 23c:	str	ip, [sp, #36]	; 0x24
 240:	str	ip, [sp, #56]	; 0x38
 244:	str	ip, [sp, #64]	; 0x40
 248:	str	ip, [sp, #68]	; 0x44
 24c:	str	ip, [sp, #72]	; 0x48
 250:	bl	0 <coda_inflateInit2_>
 254:	cmp	r0, #0
 258:	bne	424 <coda_za_read_entry+0x338>
 25c:	ldrd	r2, [r4, #20]
 260:	mov	r1, #4
 264:	add	r0, sp, #32
 268:	str	r5, [sp, #32]
 26c:	str	r2, [sp, #36]	; 0x24
 270:	str	r6, [sp, #44]	; 0x2c
 274:	str	r3, [sp, #48]	; 0x30
 278:	bl	0 <coda_inflate>
 27c:	cmn	r0, #2
 280:	beq	4a4 <coda_za_read_entry+0x3b8>
 284:	cmn	r0, #3
 288:	beq	338 <coda_za_read_entry+0x24c>
 28c:	cmp	r0, #2
 290:	beq	338 <coda_za_read_entry+0x24c>
 294:	cmn	r0, #4
 298:	beq	30c <coda_za_read_entry+0x220>
 29c:	mov	r0, r5
 2a0:	bl	0 <free>
 2a4:	add	r0, sp, #32
 2a8:	bl	0 <coda_inflateEnd>
 2ac:	cmp	r0, #0
 2b0:	beq	2f4 <coda_za_read_entry+0x208>
 2b4:	ldr	r1, [sp, #56]	; 0x38
 2b8:	ldr	r3, [r4, #40]	; 0x28
 2bc:	cmp	r1, #0
 2c0:	ldr	r3, [r3, #20]
 2c4:	beq	494 <coda_za_read_entry+0x3a8>
 2c8:	movw	r0, #0
 2cc:	movt	r0, #0
 2d0:	blx	r3
 2d4:	b	330 <coda_za_read_entry+0x244>
 2d8:	mov	r1, r6
 2dc:	ldr	r0, [r7]
 2e0:	ldr	r2, [r4, #24]
 2e4:	bl	0 <read>
 2e8:	cmp	r0, #0
 2ec:	movge	r0, r5
 2f0:	blt	408 <coda_za_read_entry+0x31c>
 2f4:	add	sp, sp, #88	; 0x58
 2f8:	ldrd	r4, [sp]
 2fc:	ldrd	r6, [sp, #8]
 300:	ldr	r8, [sp, #16]
 304:	add	sp, sp, #20
 308:	pop	{pc}		; (ldr pc, [sp], #4)
 30c:	ldr	r3, [r4, #40]	; 0x28
 310:	movw	r0, #0
 314:	movt	r0, #0
 318:	ldr	r3, [r3, #20]
 31c:	blx	r3
 320:	add	r0, sp, #32
 324:	bl	0 <coda_inflateEnd>
 328:	mov	r0, r5
 32c:	bl	0 <free>
 330:	mvn	r0, #0
 334:	b	2f4 <coda_za_read_entry+0x208>
 338:	movw	r0, #0
 33c:	movt	r0, #0
 340:	ldr	r3, [r4, #40]	; 0x28
 344:	b	318 <coda_za_read_entry+0x22c>
 348:	movw	r0, #0
 34c:	movt	r0, #0
 350:	ldr	r3, [ip, #20]
 354:	blx	r3
 358:	mvn	r0, #0
 35c:	b	2f4 <coda_za_read_entry+0x208>
 360:	movw	r0, #0
 364:	movt	r0, #0
 368:	ldr	r3, [ip, #20]
 36c:	blx	r3
 370:	mvn	r0, #0
 374:	b	2f4 <coda_za_read_entry+0x208>
 378:	movw	r0, #0
 37c:	movt	r0, #0
 380:	ldr	r3, [ip, #20]
 384:	blx	r3
 388:	mvn	r0, #0
 38c:	b	2f4 <coda_za_read_entry+0x208>
 390:	movw	r0, #0
 394:	movt	r0, #0
 398:	ldr	r3, [ip, #20]
 39c:	blx	r3
 3a0:	mvn	r0, #0
 3a4:	b	2f4 <coda_za_read_entry+0x208>
 3a8:	movw	r0, #0
 3ac:	movt	r0, #0
 3b0:	ldr	r3, [ip, #20]
 3b4:	blx	r3
 3b8:	mvn	r0, #0
 3bc:	b	2f4 <coda_za_read_entry+0x208>
 3c0:	movw	r0, #0
 3c4:	movt	r0, #0
 3c8:	ldr	r3, [ip, #20]
 3cc:	blx	r3
 3d0:	mvn	r0, #0
 3d4:	b	2f4 <coda_za_read_entry+0x208>
 3d8:	movw	r0, #0
 3dc:	movt	r0, #0
 3e0:	ldr	r3, [ip, #20]
 3e4:	blx	r3
 3e8:	mvn	r0, #0
 3ec:	b	2f4 <coda_za_read_entry+0x208>
 3f0:	movw	r0, #0
 3f4:	movt	r0, #0
 3f8:	ldr	r3, [ip, #20]
 3fc:	blx	r3
 400:	mvn	r0, #0
 404:	b	2f4 <coda_za_read_entry+0x208>
 408:	ldr	r3, [r4, #40]	; 0x28
 40c:	ldr	r4, [r3, #20]
 410:	bl	0 <__errno_location>
 414:	ldr	r0, [r0]
 418:	bl	0 <strerror>
 41c:	blx	r4
 420:	b	330 <coda_za_read_entry+0x244>
 424:	ldr	r1, [sp, #56]	; 0x38
 428:	ldr	r3, [r4, #40]	; 0x28
 42c:	cmp	r1, #0
 430:	ldr	r3, [r3, #20]
 434:	beq	484 <coda_za_read_entry+0x398>
 438:	movw	r0, #0
 43c:	movt	r0, #0
 440:	blx	r3
 444:	b	328 <coda_za_read_entry+0x23c>
 448:	mov	r1, r8
 44c:	movw	r0, #0
 450:	movt	r0, #0
 454:	ldr	r3, [r7, #20]
 458:	blx	r3
 45c:	b	330 <coda_za_read_entry+0x244>
 460:	ldr	r3, [r4, #40]	; 0x28
 464:	ldr	r4, [r3, #20]
 468:	bl	0 <__errno_location>
 46c:	ldr	r0, [r0]
 470:	bl	0 <strerror>
 474:	blx	r4
 478:	mov	r0, r5
 47c:	bl	0 <free>
 480:	b	330 <coda_za_read_entry+0x244>
 484:	movw	r0, #0
 488:	movt	r0, #0
 48c:	blx	r3
 490:	b	328 <coda_za_read_entry+0x23c>
 494:	movw	r0, #0
 498:	movt	r0, #0
 49c:	blx	r3
 4a0:	b	330 <coda_za_read_entry+0x244>
 4a4:	movw	r3, #0
 4a8:	movt	r3, #0
 4ac:	movw	r1, #0
 4b0:	movt	r1, #0
 4b4:	movw	r0, #0
 4b8:	movt	r0, #0
 4bc:	movw	r2, #633	; 0x279
 4c0:	bl	0 <__assert_fail>

000004c4 <coda_za_close>:
 4c4:	strd	r4, [sp, #-16]!
 4c8:	mov	r5, r0
 4cc:	ldr	r0, [r0]
 4d0:	str	r6, [sp, #8]
 4d4:	str	lr, [sp, #12]
 4d8:	bl	0 <close>
 4dc:	ldr	r2, [r5, #12]
 4e0:	cmp	r2, #0
 4e4:	beq	52c <coda_za_close+0x68>
 4e8:	ldr	r1, [r5, #4]
 4ec:	cmp	r1, #0
 4f0:	ble	524 <coda_za_close+0x60>
 4f4:	mov	r4, #0
 4f8:	mov	r6, #44	; 0x2c
 4fc:	mla	r3, r6, r4, r2
 500:	add	r4, r4, #1
 504:	ldr	r3, [r3, #36]	; 0x24
 508:	subs	r0, r3, #0
 50c:	beq	51c <coda_za_close+0x58>
 510:	bl	0 <free>
 514:	ldr	r1, [r5, #4]
 518:	ldr	r2, [r5, #12]
 51c:	cmp	r1, r4
 520:	bgt	4fc <coda_za_close+0x38>
 524:	mov	r0, r2
 528:	bl	0 <free>
 52c:	ldr	r0, [r5, #8]
 530:	cmp	r0, #0
 534:	beq	53c <coda_za_close+0x78>
 538:	bl	0 <free>
 53c:	ldr	r0, [r5, #16]
 540:	cmp	r0, #0
 544:	beq	54c <coda_za_close+0x88>
 548:	bl	0 <coda_hashtable_delete>
 54c:	mov	r0, r5
 550:	ldrd	r4, [sp]
 554:	ldr	r6, [sp, #8]
 558:	ldr	lr, [sp, #12]
 55c:	add	sp, sp, #16
 560:	b	0 <free>

00000564 <coda_za_open>:
 564:	strd	r4, [sp, #-36]!	; 0xffffffdc
 568:	mov	r4, r0
 56c:	strd	r6, [sp, #8]
 570:	mov	r7, r1
 574:	mov	r1, r0
 578:	strd	r8, [sp, #16]
 57c:	mov	r0, #3
 580:	strd	sl, [sp, #24]
 584:	str	lr, [sp, #32]
 588:	sub	sp, sp, #156	; 0x9c
 58c:	add	r2, sp, #64	; 0x40
 590:	bl	0 <__xstat>
 594:	subs	r6, r0, #0
 598:	bne	8a0 <coda_za_open+0x33c>
 59c:	ldr	r5, [sp, #80]	; 0x50
 5a0:	ands	r5, r5, #32768	; 0x8000
 5a4:	beq	8c8 <coda_za_open+0x364>
 5a8:	ldr	r3, [sp, #108]	; 0x6c
 5ac:	cmp	r3, #21
 5b0:	ble	84c <coda_za_open+0x2e8>
 5b4:	mov	r0, #24
 5b8:	bl	0 <malloc>
 5bc:	subs	r5, r0, #0
 5c0:	beq	8fc <coda_za_open+0x398>
 5c4:	mov	r0, r4
 5c8:	bl	0 <strdup>
 5cc:	cmp	r0, #0
 5d0:	mov	r8, r0
 5d4:	str	r0, [r5, #8]
 5d8:	beq	9fc <coda_za_open+0x498>
 5dc:	cmp	r7, #0
 5e0:	movw	r3, #0
 5e4:	movt	r3, #0
 5e8:	movne	r3, r7
 5ec:	str	r6, [r5, #4]
 5f0:	mov	r1, r6
 5f4:	mov	r0, r4
 5f8:	str	r6, [r5, #12]
 5fc:	str	r6, [r5, #16]
 600:	str	r3, [r5, #20]
 604:	bl	0 <open>
 608:	cmp	r0, #0
 60c:	str	r0, [r5]
 610:	blt	918 <coda_za_open+0x3b4>
 614:	mov	r2, #2
 618:	add	r1, sp, #12
 61c:	bl	0 <read>
 620:	cmp	r0, #0
 624:	blt	9d8 <coda_za_open+0x474>
 628:	ldrb	r3, [sp, #12]
 62c:	cmp	r3, #80	; 0x50
 630:	beq	640 <coda_za_open+0xdc>
 634:	ldrb	r3, [sp, #13]
 638:	cmp	r3, #75	; 0x4b
 63c:	bne	880 <coda_za_open+0x31c>
 640:	mov	r0, #1
 644:	bl	0 <coda_hashtable_new>
 648:	mov	r2, #2
 64c:	mvn	r1, #21
 650:	str	r0, [r5, #16]
 654:	ldr	r0, [r5]
 658:	bl	0 <lseek>
 65c:	cmp	r0, #0
 660:	blt	828 <coda_za_open+0x2c4>
 664:	mov	r2, #22
 668:	add	r1, sp, #16
 66c:	ldr	r0, [r5]
 670:	bl	0 <read>
 674:	cmp	r0, #0
 678:	blt	828 <coda_za_open+0x2c4>
 67c:	ldr	r2, [sp, #16]
 680:	movw	r3, #19280	; 0x4b50
 684:	movt	r3, #1541	; 0x605
 688:	cmp	r2, r3
 68c:	bne	a20 <coda_za_open+0x4bc>
 690:	ldrh	r8, [sp, #24]
 694:	mov	r2, #44	; 0x2c
 698:	ldr	r7, [sp, #32]
 69c:	mul	r4, r2, r8
 6a0:	str	r8, [r5, #4]
 6a4:	str	r8, [sp, #4]
 6a8:	mov	r0, r4
 6ac:	bl	0 <malloc>
 6b0:	cmp	r0, #0
 6b4:	mov	r3, r0
 6b8:	str	r0, [r5, #12]
 6bc:	beq	a38 <coda_za_open+0x4d4>
 6c0:	cmp	r8, #0
 6c4:	ldr	r0, [r5]
 6c8:	movne	r1, #0
 6cc:	addne	r2, r3, r4
 6d0:	beq	9c0 <coda_za_open+0x45c>
 6d4:	add	r3, r3, #44	; 0x2c
 6d8:	str	r1, [r3, #-8]
 6dc:	str	r5, [r3, #-4]
 6e0:	cmp	r3, r2
 6e4:	bne	6d4 <coda_za_open+0x170>
 6e8:	mov	r1, r7
 6ec:	mov	r2, #0
 6f0:	bl	0 <lseek>
 6f4:	cmp	r0, #0
 6f8:	blt	828 <coda_za_open+0x2c4>
 6fc:	movw	fp, #19280	; 0x4b50
 700:	movt	fp, #513	; 0x201
 704:	mov	r8, #0
 708:	b	800 <coda_za_open+0x29c>
 70c:	ldr	r3, [sp, #16]
 710:	cmp	r3, fp
 714:	bne	954 <coda_za_open+0x3f0>
 718:	ldrh	r3, [sp, #26]
 71c:	bic	r7, r3, #8
 720:	strh	r3, [r4, #4]
 724:	uxth	r7, r7
 728:	cmp	r7, #0
 72c:	bne	96c <coda_za_open+0x408>
 730:	ldrh	r0, [sp, #28]
 734:	ldrh	r1, [sp, #52]	; 0x34
 738:	ldrh	r2, [sp, #44]	; 0x2c
 73c:	ldrh	r3, [sp, #30]
 740:	and	r1, r1, #1
 744:	ldr	sl, [sp, #32]
 748:	add	r9, r2, #1
 74c:	str	r2, [sp]
 750:	ldr	lr, [sp, #36]	; 0x24
 754:	ldr	ip, [sp, #40]	; 0x28
 758:	strh	r0, [r4, #6]
 75c:	ldrh	r0, [sp, #46]	; 0x2e
 760:	strh	r3, [r4, #8]
 764:	str	sl, [r4, #16]
 768:	ldrh	sl, [sp, #48]	; 0x30
 76c:	str	lr, [r4, #20]
 770:	str	ip, [r4, #24]
 774:	strh	r2, [r4, #28]
 778:	strh	r0, [r4, #30]
 77c:	mov	r0, r9
 780:	str	r1, [r4, #32]
 784:	ldr	r1, [sp, #54]	; 0x36
 788:	str	r1, [r4, #12]
 78c:	ldr	r1, [sp, #58]	; 0x3a
 790:	str	r1, [r4]
 794:	bl	0 <malloc>
 798:	subs	r1, r0, #0
 79c:	str	r0, [r4, #36]	; 0x24
 7a0:	ldr	r2, [sp]
 7a4:	beq	984 <coda_za_open+0x420>
 7a8:	ldr	r0, [r5]
 7ac:	bl	0 <read>
 7b0:	cmp	r0, #0
 7b4:	blt	828 <coda_za_open+0x2c4>
 7b8:	ldrh	r3, [r4, #28]
 7bc:	ldr	r2, [r4, #36]	; 0x24
 7c0:	strb	r7, [r2, r3]
 7c4:	ldr	r0, [r5, #16]
 7c8:	ldr	r1, [r4, #36]	; 0x24
 7cc:	bl	0 <coda_hashtable_add_name>
 7d0:	cmp	r0, #0
 7d4:	mov	r2, #1
 7d8:	bne	9a4 <coda_za_open+0x440>
 7dc:	ldrh	r1, [r4, #30]
 7e0:	ldr	r0, [r5]
 7e4:	add	r1, r1, sl
 7e8:	bl	0 <lseek>
 7ec:	cmp	r0, #0
 7f0:	blt	828 <coda_za_open+0x2c4>
 7f4:	ldr	r3, [sp, #4]
 7f8:	cmp	r3, r6
 7fc:	beq	860 <coda_za_open+0x2fc>
 800:	mov	r2, #46	; 0x2e
 804:	add	r1, sp, #16
 808:	ldr	r0, [r5]
 80c:	add	r6, r6, #1
 810:	ldr	r4, [r5, #12]
 814:	bl	0 <read>
 818:	cmp	r0, #0
 81c:	add	r4, r4, r8
 820:	add	r8, r8, #44	; 0x2c
 824:	bge	70c <coda_za_open+0x1a8>
 828:	bl	0 <__errno_location>
 82c:	ldr	r0, [r0]
 830:	ldr	r4, [r5, #20]
 834:	bl	0 <strerror>
 838:	blx	r4
 83c:	mov	r0, r5
 840:	mov	r5, #0
 844:	bl	4c4 <coda_za_close>
 848:	b	860 <coda_za_open+0x2fc>
 84c:	movw	r0, #0
 850:	movt	r0, #0
 854:	mov	r1, r4
 858:	mov	r5, r6
 85c:	blx	r7
 860:	mov	r0, r5
 864:	add	sp, sp, #156	; 0x9c
 868:	ldrd	r4, [sp]
 86c:	ldrd	r6, [sp, #8]
 870:	ldrd	r8, [sp, #16]
 874:	ldrd	sl, [sp, #24]
 878:	add	sp, sp, #32
 87c:	pop	{pc}		; (ldr pc, [sp], #4)
 880:	mov	r1, r4
 884:	movw	r0, #0
 888:	movt	r0, #0
 88c:	blx	r7
 890:	mov	r0, r5
 894:	mov	r5, r6
 898:	bl	4c4 <coda_za_close>
 89c:	b	860 <coda_za_open+0x2fc>
 8a0:	bl	0 <__errno_location>
 8a4:	ldr	r0, [r0]
 8a8:	cmp	r0, #2
 8ac:	bne	8dc <coda_za_open+0x378>
 8b0:	mov	r1, r4
 8b4:	movw	r0, #0
 8b8:	movt	r0, #0
 8bc:	mov	r5, #0
 8c0:	blx	r7
 8c4:	b	860 <coda_za_open+0x2fc>
 8c8:	mov	r1, r4
 8cc:	movw	r0, #0
 8d0:	movt	r0, #0
 8d4:	blx	r7
 8d8:	b	860 <coda_za_open+0x2fc>
 8dc:	bl	0 <strerror>
 8e0:	mov	r2, r0
 8e4:	mov	r1, r4
 8e8:	movw	r0, #0
 8ec:	movt	r0, #0
 8f0:	mov	r5, #0
 8f4:	blx	r7
 8f8:	b	860 <coda_za_open+0x2fc>
 8fc:	cmp	r7, #0
 900:	beq	99c <coda_za_open+0x438>
 904:	movw	r0, #0
 908:	movt	r0, #0
 90c:	mov	r1, #24
 910:	blx	r7
 914:	b	860 <coda_za_open+0x2fc>
 918:	bl	0 <__errno_location>
 91c:	ldr	r0, [r0]
 920:	ldr	r7, [r5, #20]
 924:	bl	0 <strerror>
 928:	mov	r2, r0
 92c:	mov	r1, r4
 930:	movw	r0, #0
 934:	movt	r0, #0
 938:	blx	r7
 93c:	ldr	r0, [r5, #8]
 940:	bl	0 <free>
 944:	mov	r0, r5
 948:	mov	r5, r6
 94c:	bl	0 <free>
 950:	b	860 <coda_za_open+0x2fc>
 954:	movw	r0, #0
 958:	movt	r0, #0
 95c:	ldr	r1, [r5, #8]
 960:	ldr	r3, [r5, #20]
 964:	blx	r3
 968:	b	83c <coda_za_open+0x2d8>
 96c:	movw	r0, #0
 970:	movt	r0, #0
 974:	ldr	r1, [r5, #8]
 978:	ldr	r3, [r5, #20]
 97c:	blx	r3
 980:	b	83c <coda_za_open+0x2d8>
 984:	mov	r1, r9
 988:	movw	r0, #0
 98c:	movt	r0, #0
 990:	ldr	r3, [r5, #20]
 994:	blx	r3
 998:	b	83c <coda_za_open+0x2d8>
 99c:	mov	r5, #0
 9a0:	b	860 <coda_za_open+0x2fc>
 9a4:	movw	r0, #0
 9a8:	movt	r0, #0
 9ac:	ldr	r1, [r5, #8]
 9b0:	ldr	r3, [r5, #20]
 9b4:	ldr	r2, [r4, #36]	; 0x24
 9b8:	blx	r3
 9bc:	b	83c <coda_za_open+0x2d8>
 9c0:	mov	r1, r7
 9c4:	ldr	r2, [sp, #4]
 9c8:	bl	0 <lseek>
 9cc:	cmp	r0, #0
 9d0:	blt	828 <coda_za_open+0x2c4>
 9d4:	b	860 <coda_za_open+0x2fc>
 9d8:	bl	0 <__errno_location>
 9dc:	ldr	r0, [r0]
 9e0:	ldr	r4, [r5, #20]
 9e4:	bl	0 <strerror>
 9e8:	blx	r4
 9ec:	mov	r0, r5
 9f0:	mov	r5, r6
 9f4:	bl	4c4 <coda_za_close>
 9f8:	b	860 <coda_za_open+0x2fc>
 9fc:	mov	r0, r5
 a00:	bl	0 <free>
 a04:	cmp	r7, #0
 a08:	beq	99c <coda_za_open+0x438>
 a0c:	movw	r0, #0
 a10:	movt	r0, #0
 a14:	mov	r5, r8
 a18:	blx	r7
 a1c:	b	860 <coda_za_open+0x2fc>
 a20:	movw	r0, #0
 a24:	movt	r0, #0
 a28:	ldr	r1, [r5, #8]
 a2c:	ldr	r3, [r5, #20]
 a30:	blx	r3
 a34:	b	83c <coda_za_open+0x2d8>
 a38:	mov	r1, r4
 a3c:	movw	r0, #0
 a40:	movt	r0, #0
 a44:	ldr	r3, [r5, #20]
 a48:	blx	r3
 a4c:	b	83c <coda_za_open+0x2d8>
