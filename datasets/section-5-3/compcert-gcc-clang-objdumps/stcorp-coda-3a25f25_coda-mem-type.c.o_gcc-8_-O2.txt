
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_raw_new.part.2>:
       0:	movw	r3, #0
       4:	movt	r3, #0
       8:	str	r4, [sp, #-8]!
       c:	movw	r1, #0
      10:	movt	r1, #0
      14:	str	lr, [sp, #4]
      18:	movw	r0, #0
      1c:	movt	r0, #0
      20:	movw	r2, #943	; 0x3af
      24:	bl	0 <__assert_fail>

00000028 <coda_mem_type_delete>:
      28:	strd	r4, [sp, #-16]!
      2c:	subs	r4, r0, #0
      30:	str	r6, [sp, #8]
      34:	str	lr, [sp, #12]
      38:	beq	13c <coda_mem_type_delete+0x114>
      3c:	ldr	r3, [r4]
      40:	cmp	r3, #100	; 0x64
      44:	bne	158 <coda_mem_type_delete+0x130>
      48:	ldr	r5, [r4, #8]
      4c:	cmp	r5, #1
      50:	beq	f4 <coda_mem_type_delete+0xcc>
      54:	cmp	r5, #0
      58:	beq	b0 <coda_mem_type_delete+0x88>
      5c:	cmp	r5, #3
      60:	beq	9c <coda_mem_type_delete+0x74>
      64:	ldr	r0, [r4, #12]
      68:	cmp	r0, #0
      6c:	beq	74 <coda_mem_type_delete+0x4c>
      70:	bl	0 <coda_dynamic_type_delete>
      74:	ldr	r0, [r4, #4]
      78:	cmp	r0, #0
      7c:	beq	84 <coda_mem_type_delete+0x5c>
      80:	bl	0 <coda_type_release>
      84:	mov	r0, r4
      88:	ldrd	r4, [sp]
      8c:	ldr	r6, [sp, #8]
      90:	ldr	lr, [sp, #12]
      94:	add	sp, sp, #16
      98:	b	0 <free>
      9c:	ldr	r0, [r4, #16]
      a0:	cmp	r0, #0
      a4:	beq	64 <coda_mem_type_delete+0x3c>
      a8:	bl	0 <coda_dynamic_type_delete>
      ac:	b	64 <coda_mem_type_delete+0x3c>
      b0:	ldr	r3, [r4, #20]
      b4:	cmp	r3, #0
      b8:	beq	64 <coda_mem_type_delete+0x3c>
      bc:	ldr	r2, [r4, #16]
      c0:	cmp	r2, #0
      c4:	ble	e8 <coda_mem_type_delete+0xc0>
      c8:	ldr	r0, [r3, r5, lsl #2]
      cc:	cmp	r0, #0
      d0:	beq	dc <coda_mem_type_delete+0xb4>
      d4:	bl	0 <coda_dynamic_type_delete>
      d8:	ldrd	r2, [r4, #16]
      dc:	add	r5, r5, #1
      e0:	cmp	r2, r5
      e4:	bgt	c8 <coda_mem_type_delete+0xa0>
      e8:	mov	r0, r3
      ec:	bl	0 <free>
      f0:	b	64 <coda_mem_type_delete+0x3c>
      f4:	ldr	r3, [r4, #20]
      f8:	cmp	r3, #0
      fc:	beq	64 <coda_mem_type_delete+0x3c>
     100:	ldr	r2, [r4, #16]
     104:	cmp	r2, #0
     108:	ble	e8 <coda_mem_type_delete+0xc0>
     10c:	mov	r5, #0
     110:	ldr	r0, [r3, r5, lsl #2]
     114:	cmp	r0, #0
     118:	beq	124 <coda_mem_type_delete+0xfc>
     11c:	bl	0 <coda_dynamic_type_delete>
     120:	ldrd	r2, [r4, #16]
     124:	add	r5, r5, #1
     128:	cmp	r2, r5
     12c:	bgt	110 <coda_mem_type_delete+0xe8>
     130:	mov	r0, r3
     134:	bl	0 <free>
     138:	b	64 <coda_mem_type_delete+0x3c>
     13c:	movw	r1, #0
     140:	movt	r1, #0
     144:	ldr	r3, [pc, #40]	; 174 <coda_mem_type_delete+0x14c>
     148:	movw	r0, #0
     14c:	movt	r0, #0
     150:	mov	r2, #42	; 0x2a
     154:	bl	0 <__assert_fail>
     158:	movw	r1, #0
     15c:	movt	r1, #0
     160:	ldr	r3, [pc, #12]	; 174 <coda_mem_type_delete+0x14c>
     164:	movw	r0, #0
     168:	movt	r0, #0
     16c:	mov	r2, #43	; 0x2b
     170:	bl	0 <__assert_fail>
     174:	.word	0x00000014

00000178 <coda_mem_type_set_attributes>:
     178:	strd	r4, [sp, #-16]!
     17c:	subs	r5, r0, #0
     180:	str	r6, [sp, #8]
     184:	str	lr, [sp, #12]
     188:	beq	268 <coda_mem_type_set_attributes+0xf0>
     18c:	cmp	r1, #0
     190:	mov	r4, r1
     194:	beq	244 <coda_mem_type_set_attributes+0xcc>
     198:	ldr	r3, [r5, #12]
     19c:	cmp	r3, #0
     1a0:	bne	1fc <coda_mem_type_set_attributes+0x84>
     1a4:	cmp	r2, #0
     1a8:	ldr	r1, [r1, #4]
     1ac:	bne	1d8 <coda_mem_type_set_attributes+0x60>
     1b0:	ldr	r3, [r5, #4]
     1b4:	ldr	r3, [r3, #36]	; 0x24
     1b8:	cmp	r3, r1
     1bc:	bne	220 <coda_mem_type_set_attributes+0xa8>
     1c0:	mov	r0, #0
     1c4:	str	r4, [r5, #12]
     1c8:	ldrd	r4, [sp]
     1cc:	ldr	r6, [sp, #8]
     1d0:	add	sp, sp, #12
     1d4:	pop	{pc}		; (ldr pc, [sp], #4)
     1d8:	ldr	r3, [r1, #8]
     1dc:	cmp	r3, #0
     1e0:	bne	28c <coda_mem_type_set_attributes+0x114>
     1e4:	ldr	r0, [r5, #4]
     1e8:	bl	0 <coda_type_set_attributes>
     1ec:	cmp	r0, #0
     1f0:	beq	1c0 <coda_mem_type_set_attributes+0x48>
     1f4:	mvn	r0, #0
     1f8:	b	1c8 <coda_mem_type_set_attributes+0x50>
     1fc:	mvn	r0, #99	; 0x63
     200:	movw	r2, #0
     204:	movt	r2, #0
     208:	movw	r1, #0
     20c:	movt	r1, #0
     210:	mov	r3, #396	; 0x18c
     214:	bl	0 <coda_set_error>
     218:	mvn	r0, #0
     21c:	b	1c8 <coda_mem_type_set_attributes+0x50>
     220:	mvn	r0, #99	; 0x63
     224:	movw	r2, #0
     228:	movt	r2, #0
     22c:	movw	r1, #0
     230:	movt	r1, #0
     234:	mov	r3, #412	; 0x19c
     238:	bl	0 <coda_set_error>
     23c:	mvn	r0, #0
     240:	b	1c8 <coda_mem_type_set_attributes+0x50>
     244:	mvn	r0, #99	; 0x63
     248:	movw	r2, #0
     24c:	movt	r2, #0
     250:	movw	r1, #0
     254:	movt	r1, #0
     258:	movw	r3, #391	; 0x187
     25c:	bl	0 <coda_set_error>
     260:	mvn	r0, #0
     264:	b	1c8 <coda_mem_type_set_attributes+0x50>
     268:	mvn	r0, #99	; 0x63
     26c:	movw	r2, #0
     270:	movt	r2, #0
     274:	movw	r1, #0
     278:	movt	r1, #0
     27c:	movw	r3, #386	; 0x182
     280:	bl	0 <coda_set_error>
     284:	mvn	r0, #0
     288:	b	1c8 <coda_mem_type_set_attributes+0x50>
     28c:	movw	r1, #0
     290:	movt	r1, #0
     294:	ldr	r3, [pc, #12]	; 2a8 <coda_mem_type_set_attributes+0x130>
     298:	movw	r0, #0
     29c:	movt	r0, #0
     2a0:	movw	r2, #401	; 0x191
     2a4:	bl	0 <__assert_fail>
     2a8:	.word	0x0000002c

000002ac <coda_mem_record_new>:
     2ac:	strd	r4, [sp, #-20]!	; 0xffffffec
     2b0:	subs	r4, r0, #0
     2b4:	strd	r6, [sp, #8]
     2b8:	str	lr, [sp, #16]
     2bc:	sub	sp, sp, #12
     2c0:	beq	3c4 <coda_mem_record_new+0x118>
     2c4:	ldr	r3, [r4, #64]	; 0x40
     2c8:	mov	r6, r1
     2cc:	cmp	r3, #0
     2d0:	beq	2e0 <coda_mem_record_new+0x34>
     2d4:	ldr	r3, [r4, #68]	; 0x44
     2d8:	cmp	r3, #0
     2dc:	bne	3ac <coda_mem_record_new+0x100>
     2e0:	mov	r0, #24
     2e4:	bl	0 <malloc>
     2e8:	subs	r5, r0, #0
     2ec:	beq	3e8 <coda_mem_record_new+0x13c>
     2f0:	ldr	r3, [r4, #4]
     2f4:	mov	r2, #0
     2f8:	mov	r1, #100	; 0x64
     2fc:	cmp	r6, r2
     300:	stm	r5, {r1, r4}
     304:	str	r2, [r5, #8]
     308:	str	r6, [r5, #12]
     30c:	add	r3, r3, #1
     310:	str	r2, [r5, #16]
     314:	str	r2, [r5, #20]
     318:	str	r3, [r4, #4]
     31c:	beq	37c <coda_mem_record_new+0xd0>
     320:	ldr	r7, [r4, #48]	; 0x30
     324:	cmp	r7, #0
     328:	bgt	344 <coda_mem_record_new+0x98>
     32c:	mov	r0, r5
     330:	add	sp, sp, #12
     334:	ldrd	r4, [sp]
     338:	ldrd	r6, [sp, #8]
     33c:	add	sp, sp, #16
     340:	pop	{pc}		; (ldr pc, [sp], #4)
     344:	lsl	r6, r7, #2
     348:	mov	r0, r6
     34c:	bl	0 <malloc>
     350:	cmp	r0, #0
     354:	mov	r4, r0
     358:	str	r0, [r5, #20]
     35c:	movne	r3, #0
     360:	addne	r2, r0, r6
     364:	beq	410 <coda_mem_record_new+0x164>
     368:	str	r3, [r0], #4
     36c:	cmp	r2, r0
     370:	bne	368 <coda_mem_record_new+0xbc>
     374:	str	r7, [r5, #16]
     378:	b	32c <coda_mem_record_new+0x80>
     37c:	ldr	r0, [r4, #36]	; 0x24
     380:	cmp	r0, r2
     384:	beq	320 <coda_mem_record_new+0x74>
     388:	mov	r1, r6
     38c:	bl	2ac <coda_mem_record_new>
     390:	cmp	r0, #0
     394:	str	r0, [r5, #12]
     398:	bne	320 <coda_mem_record_new+0x74>
     39c:	mov	r0, r5
     3a0:	mov	r5, r6
     3a4:	bl	28 <coda_mem_type_delete>
     3a8:	b	32c <coda_mem_record_new+0x80>
     3ac:	movw	r1, #0
     3b0:	movt	r1, #0
     3b4:	mvn	r0, #99	; 0x63
     3b8:	mov	r5, #0
     3bc:	bl	0 <coda_set_error>
     3c0:	b	32c <coda_mem_record_new+0x80>
     3c4:	movw	r2, #0
     3c8:	movt	r2, #0
     3cc:	movw	r1, #0
     3d0:	movt	r1, #0
     3d4:	mov	r3, #428	; 0x1ac
     3d8:	mvn	r0, #99	; 0x63
     3dc:	mov	r5, r4
     3e0:	bl	0 <coda_set_error>
     3e4:	b	32c <coda_mem_record_new+0x80>
     3e8:	movw	r0, #442	; 0x1ba
     3ec:	movw	r3, #0
     3f0:	movt	r3, #0
     3f4:	movw	r1, #0
     3f8:	movt	r1, #0
     3fc:	mov	r2, #24
     400:	str	r0, [sp]
     404:	mvn	r0, #0
     408:	bl	0 <coda_set_error>
     40c:	b	32c <coda_mem_record_new+0x80>
     410:	movw	r0, #469	; 0x1d5
     414:	mov	r2, r6
     418:	movw	r3, #0
     41c:	movt	r3, #0
     420:	movw	r1, #0
     424:	movt	r1, #0
     428:	str	r0, [sp]
     42c:	mvn	r0, #0
     430:	bl	0 <coda_set_error>
     434:	mov	r0, r5
     438:	mov	r5, r4
     43c:	bl	28 <coda_mem_type_delete>
     440:	b	32c <coda_mem_record_new+0x80>

00000444 <coda_mem_type_add_attribute>:
     444:	strd	r4, [sp, #-24]!	; 0xffffffe8
     448:	subs	r5, r0, #0
     44c:	strd	r6, [sp, #8]
     450:	str	r8, [sp, #16]
     454:	str	lr, [sp, #20]
     458:	sub	sp, sp, #8
     45c:	beq	6e8 <coda_mem_type_add_attribute+0x2a4>
     460:	cmp	r1, #0
     464:	mov	r7, r1
     468:	beq	6c4 <coda_mem_type_add_attribute+0x280>
     46c:	cmp	r2, #0
     470:	mov	r6, r2
     474:	beq	6a0 <coda_mem_type_add_attribute+0x25c>
     478:	ldr	r4, [r5, #12]
     47c:	mov	r8, r3
     480:	cmp	r4, #0
     484:	beq	514 <coda_mem_type_add_attribute+0xd0>
     488:	ldr	r3, [r4]
     48c:	cmp	r3, #100	; 0x64
     490:	bne	628 <coda_mem_type_add_attribute+0x1e4>
     494:	ldr	r2, [r5, #4]
     498:	ldr	r3, [r4, #4]
     49c:	ldr	r2, [r2, #36]	; 0x24
     4a0:	cmp	r2, r3
     4a4:	bne	770 <coda_mem_type_add_attribute+0x32c>
     4a8:	ldr	r0, [r2, #44]	; 0x2c
     4ac:	bl	0 <coda_hashtable_get_index_from_name>
     4b0:	cmp	r8, #0
     4b4:	mov	r5, r0
     4b8:	bne	558 <coda_mem_type_add_attribute+0x114>
     4bc:	cmp	r0, #0
     4c0:	blt	70c <coda_mem_type_add_attribute+0x2c8>
     4c4:	ldr	r3, [r4, #20]
     4c8:	ldr	r2, [r3, r0, lsl #2]
     4cc:	add	r3, r3, r0, lsl #2
     4d0:	cmp	r2, #0
     4d4:	bne	64c <coda_mem_type_add_attribute+0x208>
     4d8:	ldr	r1, [r4, #4]
     4dc:	ldr	r2, [r6, #4]
     4e0:	ldr	r1, [r1, #52]	; 0x34
     4e4:	ldr	r1, [r1, r0, lsl #2]
     4e8:	ldr	r1, [r1, #8]
     4ec:	cmp	r1, r2
     4f0:	bne	678 <coda_mem_type_add_attribute+0x234>
     4f4:	mov	r0, #0
     4f8:	str	r6, [r3]
     4fc:	add	sp, sp, #8
     500:	ldrd	r4, [sp]
     504:	ldrd	r6, [sp, #8]
     508:	ldr	r8, [sp, #16]
     50c:	add	sp, sp, #20
     510:	pop	{pc}		; (ldr pc, [sp], #4)
     514:	cmp	r3, #0
     518:	beq	738 <coda_mem_type_add_attribute+0x2f4>
     51c:	ldr	r4, [r5, #4]
     520:	ldr	r0, [r4, #36]	; 0x24
     524:	cmp	r0, #0
     528:	beq	604 <coda_mem_type_add_attribute+0x1c0>
     52c:	mov	r1, #0
     530:	bl	2ac <coda_mem_record_new>
     534:	cmp	r0, #0
     538:	mov	r4, r0
     53c:	str	r0, [r5, #12]
     540:	beq	620 <coda_mem_type_add_attribute+0x1dc>
     544:	ldr	r3, [r0, #4]
     548:	mov	r1, r7
     54c:	ldr	r0, [r3, #44]	; 0x2c
     550:	bl	0 <coda_hashtable_get_index_from_name>
     554:	mov	r5, r0
     558:	cmp	r5, #0
     55c:	ldr	r0, [r4, #4]
     560:	blt	5dc <coda_mem_type_add_attribute+0x198>
     564:	ldrd	r2, [r4, #16]
     568:	cmp	r2, r5
     56c:	bgt	5d0 <coda_mem_type_add_attribute+0x18c>
     570:	ldr	r1, [r0, #48]	; 0x30
     574:	cmp	r2, r1
     578:	addge	r3, r3, r5, lsl #2
     57c:	bge	4f4 <coda_mem_type_add_attribute+0xb0>
     580:	lsl	r1, r1, #2
     584:	mov	r0, r3
     588:	bl	0 <realloc>
     58c:	cmp	r0, #0
     590:	ldr	r2, [r4, #4]
     594:	beq	740 <coda_mem_type_add_attribute+0x2fc>
     598:	ldr	r3, [r4, #16]
     59c:	ldr	ip, [r2, #48]	; 0x30
     5a0:	str	r0, [r4, #20]
     5a4:	cmp	r3, ip
     5a8:	bge	5c4 <coda_mem_type_add_attribute+0x180>
     5ac:	add	r3, r0, r3, lsl #2
     5b0:	mov	r1, #0
     5b4:	add	r2, r0, ip, lsl #2
     5b8:	str	r1, [r3], #4
     5bc:	cmp	r3, r2
     5c0:	bne	5b8 <coda_mem_type_add_attribute+0x174>
     5c4:	add	r3, r0, r5, lsl #2
     5c8:	str	ip, [r4, #16]
     5cc:	b	4f4 <coda_mem_type_add_attribute+0xb0>
     5d0:	ldr	r1, [r3, r5, lsl #2]
     5d4:	cmp	r1, #0
     5d8:	beq	570 <coda_mem_type_add_attribute+0x12c>
     5dc:	mov	r1, r7
     5e0:	ldr	r2, [r6, #4]
     5e4:	bl	0 <coda_type_record_create_field>
     5e8:	cmp	r0, #0
     5ec:	bne	620 <coda_mem_type_add_attribute+0x1dc>
     5f0:	ldr	r1, [r4, #4]
     5f4:	ldrd	r2, [r4, #16]
     5f8:	ldr	r1, [r1, #48]	; 0x30
     5fc:	sub	r5, r1, #1
     600:	b	574 <coda_mem_type_add_attribute+0x130>
     604:	ldr	r0, [r4]
     608:	bl	0 <coda_type_record_new>
     60c:	ldr	r3, [r5, #4]
     610:	str	r0, [r4, #36]	; 0x24
     614:	ldr	r0, [r3, #36]	; 0x24
     618:	cmp	r0, #0
     61c:	bne	52c <coda_mem_type_add_attribute+0xe8>
     620:	mvn	r0, #0
     624:	b	4fc <coda_mem_type_add_attribute+0xb8>
     628:	mvn	r0, #99	; 0x63
     62c:	movw	r2, #0
     630:	movt	r2, #0
     634:	movw	r1, #0
     638:	movt	r1, #0
     63c:	movw	r3, #315	; 0x13b
     640:	bl	0 <coda_set_error>
     644:	mvn	r0, #0
     648:	b	4fc <coda_mem_type_add_attribute+0xb8>
     64c:	movw	r0, #367	; 0x16f
     650:	mov	r2, r7
     654:	movw	r3, #0
     658:	movt	r3, #0
     65c:	movw	r1, #0
     660:	movt	r1, #0
     664:	str	r0, [sp]
     668:	mvn	r0, #99	; 0x63
     66c:	bl	0 <coda_set_error>
     670:	mvn	r0, #0
     674:	b	4fc <coda_mem_type_add_attribute+0xb8>
     678:	movw	r0, #373	; 0x175
     67c:	mov	r2, r7
     680:	movw	r3, #0
     684:	movt	r3, #0
     688:	movw	r1, #0
     68c:	movt	r1, #0
     690:	str	r0, [sp]
     694:	mvn	r0, #99	; 0x63
     698:	bl	0 <coda_set_error>
     69c:	b	620 <coda_mem_type_add_attribute+0x1dc>
     6a0:	mvn	r0, #99	; 0x63
     6a4:	movw	r2, #0
     6a8:	movt	r2, #0
     6ac:	movw	r1, #0
     6b0:	movt	r1, #0
     6b4:	movw	r3, #282	; 0x11a
     6b8:	bl	0 <coda_set_error>
     6bc:	mvn	r0, #0
     6c0:	b	4fc <coda_mem_type_add_attribute+0xb8>
     6c4:	mvn	r0, #99	; 0x63
     6c8:	movw	r2, #0
     6cc:	movt	r2, #0
     6d0:	movw	r1, #0
     6d4:	movt	r1, #0
     6d8:	movw	r3, #277	; 0x115
     6dc:	bl	0 <coda_set_error>
     6e0:	mvn	r0, #0
     6e4:	b	4fc <coda_mem_type_add_attribute+0xb8>
     6e8:	mvn	r0, #99	; 0x63
     6ec:	movw	r2, #0
     6f0:	movt	r2, #0
     6f4:	movw	r1, #0
     6f8:	movt	r1, #0
     6fc:	mov	r3, #272	; 0x110
     700:	bl	0 <coda_set_error>
     704:	mvn	r0, #0
     708:	b	4fc <coda_mem_type_add_attribute+0xb8>
     70c:	movw	r0, #361	; 0x169
     710:	mov	r2, r7
     714:	movw	r3, #0
     718:	movt	r3, #0
     71c:	movw	r1, #0
     720:	movt	r1, #0
     724:	str	r0, [sp]
     728:	mvn	r0, #101	; 0x65
     72c:	bl	0 <coda_set_error>
     730:	mvn	r0, #0
     734:	b	4fc <coda_mem_type_add_attribute+0xb8>
     738:	movw	r0, #307	; 0x133
     73c:	b	710 <coda_mem_type_add_attribute+0x2cc>
     740:	ldr	r2, [r2, #48]	; 0x30
     744:	mov	ip, #344	; 0x158
     748:	mvn	r0, #0
     74c:	movw	r3, #0
     750:	movt	r3, #0
     754:	movw	r1, #0
     758:	movt	r1, #0
     75c:	str	ip, [sp]
     760:	lsl	r2, r2, #2
     764:	bl	0 <coda_set_error>
     768:	mvn	r0, #0
     76c:	b	4fc <coda_mem_type_add_attribute+0xb8>
     770:	movw	r1, #0
     774:	movt	r1, #0
     778:	ldr	r3, [pc, #12]	; 78c <coda_mem_type_add_attribute+0x348>
     77c:	movw	r0, #0
     780:	movt	r0, #0
     784:	movw	r2, #318	; 0x13e
     788:	bl	0 <__assert_fail>
     78c:	.word	0x0000004c

00000790 <coda_mem_record_add_field>:
     790:	strd	r4, [sp, #-20]!	; 0xffffffec
     794:	subs	r4, r0, #0
     798:	strd	r6, [sp, #8]
     79c:	str	lr, [sp, #16]
     7a0:	sub	sp, sp, #12
     7a4:	beq	928 <coda_mem_record_add_field+0x198>
     7a8:	cmp	r2, #0
     7ac:	mov	r5, r2
     7b0:	beq	904 <coda_mem_record_add_field+0x174>
     7b4:	cmp	r3, #0
     7b8:	ldr	r0, [r4, #4]
     7bc:	bne	820 <coda_mem_record_add_field+0x90>
     7c0:	ldr	r0, [r0, #44]	; 0x2c
     7c4:	mov	r6, r1
     7c8:	bl	0 <coda_hashtable_get_index_from_name>
     7cc:	cmp	r0, #0
     7d0:	blt	94c <coda_mem_record_add_field+0x1bc>
     7d4:	ldr	r3, [r4, #20]
     7d8:	ldr	r2, [r3, r0, lsl #2]
     7dc:	add	r3, r3, r0, lsl #2
     7e0:	cmp	r2, #0
     7e4:	bne	8d0 <coda_mem_record_add_field+0x140>
     7e8:	ldr	r1, [r4, #4]
     7ec:	ldr	r2, [r5, #4]
     7f0:	ldr	r1, [r1, #52]	; 0x34
     7f4:	ldr	r1, [r1, r0, lsl #2]
     7f8:	ldr	r1, [r1, #8]
     7fc:	cmp	r1, r2
     800:	bne	8a4 <coda_mem_record_add_field+0x114>
     804:	mov	r0, #0
     808:	str	r5, [r3]
     80c:	add	sp, sp, #12
     810:	ldrd	r4, [sp]
     814:	ldrd	r6, [sp, #8]
     818:	add	sp, sp, #16
     81c:	pop	{pc}		; (ldr pc, [sp], #4)
     820:	ldr	r2, [r2, #4]
     824:	bl	0 <coda_type_record_create_field>
     828:	subs	r7, r0, #0
     82c:	bne	8fc <coda_mem_record_add_field+0x16c>
     830:	ldr	r2, [r4, #4]
     834:	ldr	r3, [r4, #16]
     838:	ldr	r0, [r4, #20]
     83c:	ldr	r1, [r2, #48]	; 0x30
     840:	cmp	r1, r3
     844:	sub	r3, r1, #1
     848:	addle	r3, r0, r3, lsl #2
     84c:	ble	804 <coda_mem_record_add_field+0x74>
     850:	lsl	r6, r1, #2
     854:	mov	r1, r6
     858:	bl	0 <realloc>
     85c:	cmp	r0, #0
     860:	beq	978 <coda_mem_record_add_field+0x1e8>
     864:	ldr	r3, [r4, #4]
     868:	ldr	r2, [r4, #16]
     86c:	ldr	ip, [r3, #48]	; 0x30
     870:	str	r0, [r4, #20]
     874:	cmp	r2, ip
     878:	bge	894 <coda_mem_record_add_field+0x104>
     87c:	add	r2, r0, r2, lsl #2
     880:	mov	r1, r7
     884:	add	r3, r0, ip, lsl #2
     888:	str	r1, [r2], #4
     88c:	cmp	r2, r3
     890:	bne	888 <coda_mem_record_add_field+0xf8>
     894:	sub	r3, r6, #4
     898:	str	ip, [r4, #16]
     89c:	add	r3, r0, r3
     8a0:	b	804 <coda_mem_record_add_field+0x74>
     8a4:	movw	r0, #546	; 0x222
     8a8:	mov	r2, r6
     8ac:	movw	r3, #0
     8b0:	movt	r3, #0
     8b4:	movw	r1, #0
     8b8:	movt	r1, #0
     8bc:	str	r0, [sp]
     8c0:	mvn	r0, #99	; 0x63
     8c4:	bl	0 <coda_set_error>
     8c8:	mvn	r0, #0
     8cc:	b	80c <coda_mem_record_add_field+0x7c>
     8d0:	mov	r0, #540	; 0x21c
     8d4:	mov	r2, r6
     8d8:	movw	r3, #0
     8dc:	movt	r3, #0
     8e0:	movw	r1, #0
     8e4:	movt	r1, #0
     8e8:	str	r0, [sp]
     8ec:	mvn	r0, #99	; 0x63
     8f0:	bl	0 <coda_set_error>
     8f4:	mvn	r0, #0
     8f8:	b	80c <coda_mem_record_add_field+0x7c>
     8fc:	mvn	r0, #0
     900:	b	80c <coda_mem_record_add_field+0x7c>
     904:	mvn	r0, #99	; 0x63
     908:	movw	r2, #0
     90c:	movt	r2, #0
     910:	movw	r1, #0
     914:	movt	r1, #0
     918:	mov	r3, #496	; 0x1f0
     91c:	bl	0 <coda_set_error>
     920:	mvn	r0, #0
     924:	b	80c <coda_mem_record_add_field+0x7c>
     928:	mvn	r0, #99	; 0x63
     92c:	movw	r2, #0
     930:	movt	r2, #0
     934:	movw	r1, #0
     938:	movt	r1, #0
     93c:	movw	r3, #491	; 0x1eb
     940:	bl	0 <coda_set_error>
     944:	mvn	r0, #0
     948:	b	80c <coda_mem_record_add_field+0x7c>
     94c:	movw	r0, #534	; 0x216
     950:	mov	r2, r6
     954:	movw	r3, #0
     958:	movt	r3, #0
     95c:	movw	r1, #0
     960:	movt	r1, #0
     964:	str	r0, [sp]
     968:	mvn	r0, #101	; 0x65
     96c:	bl	0 <coda_set_error>
     970:	mvn	r0, #0
     974:	b	80c <coda_mem_record_add_field+0x7c>
     978:	ldr	r2, [r4, #4]
     97c:	mov	ip, #516	; 0x204
     980:	mvn	r0, #0
     984:	movw	r3, #0
     988:	movt	r3, #0
     98c:	movw	r1, #0
     990:	movt	r1, #0
     994:	ldr	r2, [r2, #48]	; 0x30
     998:	str	ip, [sp]
     99c:	lsl	r2, r2, #2
     9a0:	bl	0 <coda_set_error>
     9a4:	mvn	r0, #0
     9a8:	b	80c <coda_mem_record_add_field+0x7c>

000009ac <coda_mem_record_validate>:
     9ac:	cmp	r0, #0
     9b0:	str	r4, [sp, #-8]!
     9b4:	str	lr, [sp, #4]
     9b8:	beq	a4c <coda_mem_record_validate+0xa0>
     9bc:	ldr	lr, [r0, #4]
     9c0:	ldr	ip, [r0, #16]
     9c4:	ldr	r3, [lr, #48]	; 0x30
     9c8:	cmp	ip, r3
     9cc:	bne	a70 <coda_mem_record_validate+0xc4>
     9d0:	cmp	ip, #0
     9d4:	ble	a3c <coda_mem_record_validate+0x90>
     9d8:	ldr	r2, [r0, #20]
     9dc:	mov	r3, #0
     9e0:	sub	r2, r2, #4
     9e4:	b	9f4 <coda_mem_record_validate+0x48>
     9e8:	add	r3, r3, #1
     9ec:	cmp	ip, r3
     9f0:	beq	a3c <coda_mem_record_validate+0x90>
     9f4:	ldr	r1, [r2, #4]!
     9f8:	cmp	r1, #0
     9fc:	bne	9e8 <coda_mem_record_validate+0x3c>
     a00:	ldr	r1, [lr, #52]	; 0x34
     a04:	ldr	r0, [r1, r3, lsl #2]
     a08:	ldrb	r1, [r0, #16]
     a0c:	cmp	r1, #0
     a10:	bne	9e8 <coda_mem_record_validate+0x3c>
     a14:	movw	r1, #0
     a18:	movt	r1, #0
     a1c:	ldr	r2, [r0]
     a20:	movw	r0, #65136	; 0xfe70
     a24:	movt	r0, #65535	; 0xffff
     a28:	bl	0 <coda_set_error>
     a2c:	ldr	r4, [sp]
     a30:	add	sp, sp, #4
     a34:	mvn	r0, #0
     a38:	pop	{pc}		; (ldr pc, [sp], #4)
     a3c:	mov	r0, #0
     a40:	ldr	r4, [sp]
     a44:	add	sp, sp, #4
     a48:	pop	{pc}		; (ldr pc, [sp], #4)
     a4c:	mvn	r0, #99	; 0x63
     a50:	movw	r2, #0
     a54:	movt	r2, #0
     a58:	movw	r1, #0
     a5c:	movt	r1, #0
     a60:	movw	r3, #561	; 0x231
     a64:	bl	0 <coda_set_error>
     a68:	mvn	r0, #0
     a6c:	b	a40 <coda_mem_record_validate+0x94>
     a70:	movw	r1, #0
     a74:	movt	r1, #0
     a78:	ldr	r3, [pc, #12]	; a8c <coda_mem_record_validate+0xe0>
     a7c:	movw	r0, #0
     a80:	movt	r0, #0
     a84:	mov	r2, #564	; 0x234
     a88:	bl	0 <__assert_fail>
     a8c:	.word	0x00000068

00000a90 <coda_mem_array_new>:
     a90:	strd	r4, [sp, #-20]!	; 0xffffffec
     a94:	subs	r4, r0, #0
     a98:	strd	r6, [sp, #8]
     a9c:	str	lr, [sp, #16]
     aa0:	sub	sp, sp, #12
     aa4:	beq	b78 <coda_mem_array_new+0xe8>
     aa8:	mov	r0, #24
     aac:	mov	r6, r1
     ab0:	bl	0 <malloc>
     ab4:	subs	r5, r0, #0
     ab8:	beq	b9c <coda_mem_array_new+0x10c>
     abc:	ldr	r3, [r4, #4]
     ac0:	mov	r1, #1
     ac4:	mov	r2, #0
     ac8:	mov	r0, #100	; 0x64
     acc:	cmp	r6, #0
     ad0:	stm	r5, {r0, r4}
     ad4:	str	r1, [r5, #8]
     ad8:	add	r3, r3, r1
     adc:	str	r6, [r5, #12]
     ae0:	str	r2, [r5, #16]
     ae4:	str	r3, [r4, #4]
     ae8:	str	r2, [r5, #20]
     aec:	beq	b4c <coda_mem_array_new+0xbc>
     af0:	ldr	r7, [r4, #44]	; 0x2c
     af4:	cmp	r7, #0
     af8:	bgt	b14 <coda_mem_array_new+0x84>
     afc:	mov	r0, r5
     b00:	add	sp, sp, #12
     b04:	ldrd	r4, [sp]
     b08:	ldrd	r6, [sp, #8]
     b0c:	add	sp, sp, #16
     b10:	pop	{pc}		; (ldr pc, [sp], #4)
     b14:	lsl	r6, r7, #2
     b18:	mov	r0, r6
     b1c:	bl	0 <malloc>
     b20:	cmp	r0, #0
     b24:	mov	r4, r0
     b28:	str	r0, [r5, #20]
     b2c:	movne	r3, #0
     b30:	addne	r2, r0, r6
     b34:	strne	r7, [r5, #16]
     b38:	beq	bc4 <coda_mem_array_new+0x134>
     b3c:	str	r3, [r0], #4
     b40:	cmp	r2, r0
     b44:	bne	b3c <coda_mem_array_new+0xac>
     b48:	b	afc <coda_mem_array_new+0x6c>
     b4c:	ldr	r0, [r4, #36]	; 0x24
     b50:	cmp	r0, r2
     b54:	beq	af0 <coda_mem_array_new+0x60>
     b58:	mov	r1, r6
     b5c:	bl	2ac <coda_mem_record_new>
     b60:	cmp	r0, #0
     b64:	mov	r3, r0
     b68:	str	r0, [r5, #12]
     b6c:	beq	bf8 <coda_mem_array_new+0x168>
     b70:	ldr	r4, [r5, #4]
     b74:	b	af0 <coda_mem_array_new+0x60>
     b78:	movw	r2, #0
     b7c:	movt	r2, #0
     b80:	movw	r1, #0
     b84:	movt	r1, #0
     b88:	movw	r3, #583	; 0x247
     b8c:	mvn	r0, #99	; 0x63
     b90:	mov	r5, r4
     b94:	bl	0 <coda_set_error>
     b98:	b	afc <coda_mem_array_new+0x6c>
     b9c:	movw	r0, #590	; 0x24e
     ba0:	movw	r3, #0
     ba4:	movt	r3, #0
     ba8:	movw	r1, #0
     bac:	movt	r1, #0
     bb0:	mov	r2, #24
     bb4:	str	r0, [sp]
     bb8:	mvn	r0, #0
     bbc:	bl	0 <coda_set_error>
     bc0:	b	afc <coda_mem_array_new+0x6c>
     bc4:	movw	r0, #617	; 0x269
     bc8:	mov	r2, r6
     bcc:	movw	r3, #0
     bd0:	movt	r3, #0
     bd4:	movw	r1, #0
     bd8:	movt	r1, #0
     bdc:	str	r0, [sp]
     be0:	mvn	r0, #0
     be4:	bl	0 <coda_set_error>
     be8:	mov	r0, r5
     bec:	mov	r5, r4
     bf0:	bl	28 <coda_mem_type_delete>
     bf4:	b	afc <coda_mem_array_new+0x6c>
     bf8:	mov	r0, r5
     bfc:	mov	r5, r3
     c00:	bl	28 <coda_mem_type_delete>
     c04:	b	afc <coda_mem_array_new+0x6c>

00000c08 <coda_mem_array_set_element>:
     c08:	subs	ip, r0, #0
     c0c:	str	r4, [sp, #-8]!
     c10:	str	lr, [sp, #4]
     c14:	sub	sp, sp, #8
     c18:	beq	d1c <coda_mem_array_set_element+0x114>
     c1c:	cmp	r1, #0
     c20:	ldr	r3, [ip, #16]
     c24:	blt	c70 <coda_mem_array_set_element+0x68>
     c28:	cmp	r1, r3
     c2c:	bge	c70 <coda_mem_array_set_element+0x68>
     c30:	cmp	r2, #0
     c34:	beq	cf8 <coda_mem_array_set_element+0xf0>
     c38:	ldr	lr, [ip, #20]
     c3c:	ldr	r0, [lr, r1, lsl #2]
     c40:	cmp	r0, #0
     c44:	bne	c9c <coda_mem_array_set_element+0x94>
     c48:	ldr	r4, [ip, #4]
     c4c:	ldr	ip, [r2, #4]
     c50:	ldr	r4, [r4, #40]	; 0x28
     c54:	cmp	r4, ip
     c58:	streq	r2, [lr, r1, lsl #2]
     c5c:	bne	cc8 <coda_mem_array_set_element+0xc0>
     c60:	add	sp, sp, #8
     c64:	ldr	r4, [sp]
     c68:	add	sp, sp, #4
     c6c:	pop	{pc}		; (ldr pc, [sp], #4)
     c70:	movw	ip, #641	; 0x281
     c74:	movw	r0, #0
     c78:	movt	r0, #0
     c7c:	mov	r2, r1
     c80:	movw	r1, #0
     c84:	movt	r1, #0
     c88:	stm	sp, {r0, ip}
     c8c:	mvn	r0, #100	; 0x64
     c90:	bl	0 <coda_set_error>
     c94:	mvn	r0, #0
     c98:	b	c60 <coda_mem_array_set_element+0x58>
     c9c:	mov	r0, #652	; 0x28c
     ca0:	mov	r2, r1
     ca4:	movw	r3, #0
     ca8:	movt	r3, #0
     cac:	movw	r1, #0
     cb0:	movt	r1, #0
     cb4:	str	r0, [sp]
     cb8:	mvn	r0, #99	; 0x63
     cbc:	bl	0 <coda_set_error>
     cc0:	mvn	r0, #0
     cc4:	b	c60 <coda_mem_array_set_element+0x58>
     cc8:	movw	r0, #658	; 0x292
     ccc:	mov	r2, r3
     cd0:	movw	r1, #0
     cd4:	movt	r1, #0
     cd8:	movw	r3, #0
     cdc:	movt	r3, #0
     ce0:	str	r0, [sp]
     ce4:	movw	r0, #65136	; 0xfe70
     ce8:	movt	r0, #65535	; 0xffff
     cec:	bl	0 <coda_set_error>
     cf0:	mvn	r0, #0
     cf4:	b	c60 <coda_mem_array_set_element+0x58>
     cf8:	mvn	r0, #99	; 0x63
     cfc:	movw	r2, #0
     d00:	movt	r2, #0
     d04:	movw	r1, #0
     d08:	movt	r1, #0
     d0c:	movw	r3, #646	; 0x286
     d10:	bl	0 <coda_set_error>
     d14:	mvn	r0, #0
     d18:	b	c60 <coda_mem_array_set_element+0x58>
     d1c:	mvn	r0, #99	; 0x63
     d20:	movw	r2, #0
     d24:	movt	r2, #0
     d28:	movw	r1, #0
     d2c:	movt	r1, #0
     d30:	movw	r3, #635	; 0x27b
     d34:	bl	0 <coda_set_error>
     d38:	mvn	r0, #0
     d3c:	b	c60 <coda_mem_array_set_element+0x58>

00000d40 <coda_mem_array_add_element>:
     d40:	strd	r4, [sp, #-12]!
     d44:	subs	r4, r0, #0
     d48:	str	lr, [sp, #8]
     d4c:	sub	sp, sp, #12
     d50:	beq	e94 <coda_mem_array_add_element+0x154>
     d54:	cmp	r1, #0
     d58:	mov	r5, r1
     d5c:	beq	eb8 <coda_mem_array_add_element+0x178>
     d60:	ldr	r2, [r4, #4]
     d64:	ldr	r1, [r1, #4]
     d68:	ldr	r3, [r4, #16]
     d6c:	ldr	r0, [r2, #40]	; 0x28
     d70:	cmp	r0, r1
     d74:	bne	e64 <coda_mem_array_add_element+0x124>
     d78:	ldr	r2, [r2, #44]	; 0x2c
     d7c:	cmp	r2, #0
     d80:	ble	e0c <coda_mem_array_add_element+0xcc>
     d84:	cmp	r3, #0
     d88:	ble	e5c <coda_mem_array_add_element+0x11c>
     d8c:	ldr	ip, [r4, #20]
     d90:	ldr	r2, [ip]
     d94:	cmp	r2, #0
     d98:	beq	df4 <coda_mem_array_add_element+0xb4>
     d9c:	add	r0, ip, #4
     da0:	mov	r1, #0
     da4:	b	db4 <coda_mem_array_add_element+0x74>
     da8:	ldr	lr, [ip]
     dac:	cmp	lr, #0
     db0:	beq	df4 <coda_mem_array_add_element+0xb4>
     db4:	add	r1, r1, #1
     db8:	mov	ip, r0
     dbc:	cmp	r1, r3
     dc0:	add	r0, r0, #4
     dc4:	bne	da8 <coda_mem_array_add_element+0x68>
     dc8:	mov	r2, r3
     dcc:	mov	ip, #696	; 0x2b8
     dd0:	movw	r0, #0
     dd4:	movt	r0, #0
     dd8:	movw	r1, #0
     ddc:	movt	r1, #0
     de0:	stm	sp, {r0, ip}
     de4:	mvn	r0, #100	; 0x64
     de8:	bl	0 <coda_set_error>
     dec:	mvn	r0, #0
     df0:	b	dfc <coda_mem_array_add_element+0xbc>
     df4:	mov	r0, #0
     df8:	str	r5, [ip]
     dfc:	add	sp, sp, #12
     e00:	ldrd	r4, [sp]
     e04:	add	sp, sp, #8
     e08:	pop	{pc}		; (ldr pc, [sp], #4)
     e0c:	tst	r3, #15
     e10:	ldr	r2, [r4, #20]
     e14:	beq	e38 <coda_mem_array_add_element+0xf8>
     e18:	add	r1, r3, #1
     e1c:	mov	r0, #0
     e20:	str	r1, [r4, #16]
     e24:	str	r5, [r2, r3, lsl #2]
     e28:	add	sp, sp, #12
     e2c:	ldrd	r4, [sp]
     e30:	add	sp, sp, #8
     e34:	pop	{pc}		; (ldr pc, [sp], #4)
     e38:	add	r3, r3, #16
     e3c:	mov	r0, r2
     e40:	lsl	r1, r3, #2
     e44:	bl	0 <realloc>
     e48:	subs	r2, r0, #0
     e4c:	beq	edc <coda_mem_array_add_element+0x19c>
     e50:	str	r2, [r4, #20]
     e54:	ldr	r3, [r4, #16]
     e58:	b	e18 <coda_mem_array_add_element+0xd8>
     e5c:	mov	r2, #0
     e60:	b	dcc <coda_mem_array_add_element+0x8c>
     e64:	movw	r0, #681	; 0x2a9
     e68:	mov	r2, r3
     e6c:	movw	r1, #0
     e70:	movt	r1, #0
     e74:	movw	r3, #0
     e78:	movt	r3, #0
     e7c:	str	r0, [sp]
     e80:	movw	r0, #65136	; 0xfe70
     e84:	movt	r0, #65535	; 0xffff
     e88:	bl	0 <coda_set_error>
     e8c:	mvn	r0, #0
     e90:	b	dfc <coda_mem_array_add_element+0xbc>
     e94:	mvn	r0, #99	; 0x63
     e98:	movw	r2, #0
     e9c:	movt	r2, #0
     ea0:	movw	r1, #0
     ea4:	movt	r1, #0
     ea8:	movw	r3, #670	; 0x29e
     eac:	bl	0 <coda_set_error>
     eb0:	mvn	r0, #0
     eb4:	b	dfc <coda_mem_array_add_element+0xbc>
     eb8:	mvn	r0, #99	; 0x63
     ebc:	movw	r2, #0
     ec0:	movt	r2, #0
     ec4:	movw	r1, #0
     ec8:	movt	r1, #0
     ecc:	movw	r3, #675	; 0x2a3
     ed0:	bl	0 <coda_set_error>
     ed4:	mvn	r0, #0
     ed8:	b	dfc <coda_mem_array_add_element+0xbc>
     edc:	ldr	r2, [r4, #16]
     ee0:	movw	ip, #711	; 0x2c7
     ee4:	mvn	r0, #0
     ee8:	movw	r3, #0
     eec:	movt	r3, #0
     ef0:	movw	r1, #0
     ef4:	movt	r1, #0
     ef8:	str	ip, [sp]
     efc:	add	r2, r2, #16
     f00:	lsl	r2, r2, #2
     f04:	bl	0 <coda_set_error>
     f08:	mvn	r0, #0
     f0c:	b	dfc <coda_mem_array_add_element+0xbc>

00000f10 <coda_mem_array_validate>:
     f10:	str	r4, [sp, #-8]!
     f14:	subs	r4, r0, #0
     f18:	str	lr, [sp, #4]
     f1c:	beq	fd0 <coda_mem_array_validate+0xc0>
     f20:	ldr	r3, [r4, #4]
     f24:	ldr	r0, [r4, #16]
     f28:	ldr	r3, [r3, #44]	; 0x2c
     f2c:	cmp	r3, #0
     f30:	blt	f3c <coda_mem_array_validate+0x2c>
     f34:	cmp	r3, r0
     f38:	bne	f88 <coda_mem_array_validate+0x78>
     f3c:	cmp	r0, #0
     f40:	ble	f78 <coda_mem_array_validate+0x68>
     f44:	ldr	r1, [r4, #20]
     f48:	ldr	r3, [r1]
     f4c:	cmp	r3, #0
     f50:	movne	r3, r1
     f54:	movne	r2, #0
     f58:	bne	f6c <coda_mem_array_validate+0x5c>
     f5c:	b	fa8 <coda_mem_array_validate+0x98>
     f60:	ldr	r1, [r3, #4]!
     f64:	cmp	r1, #0
     f68:	beq	fac <coda_mem_array_validate+0x9c>
     f6c:	add	r2, r2, #1
     f70:	cmp	r2, r0
     f74:	bne	f60 <coda_mem_array_validate+0x50>
     f78:	mov	r0, #0
     f7c:	ldr	r4, [sp]
     f80:	add	sp, sp, #4
     f84:	pop	{pc}		; (ldr pc, [sp], #4)
     f88:	mov	r2, r0
     f8c:	movw	r1, #0
     f90:	movt	r1, #0
     f94:	movw	r0, #65136	; 0xfe70
     f98:	movt	r0, #65535	; 0xffff
     f9c:	bl	0 <coda_set_error>
     fa0:	ldr	r0, [r4, #16]
     fa4:	b	f3c <coda_mem_array_validate+0x2c>
     fa8:	mov	r2, r3
     fac:	movw	r1, #0
     fb0:	movt	r1, #0
     fb4:	movw	r0, #65136	; 0xfe70
     fb8:	movt	r0, #65535	; 0xffff
     fbc:	bl	0 <coda_set_error>
     fc0:	ldr	r4, [sp]
     fc4:	add	sp, sp, #4
     fc8:	mvn	r0, #0
     fcc:	pop	{pc}		; (ldr pc, [sp], #4)
     fd0:	mvn	r0, #99	; 0x63
     fd4:	movw	r2, #0
     fd8:	movt	r2, #0
     fdc:	movw	r1, #0
     fe0:	movt	r1, #0
     fe4:	movw	r3, #729	; 0x2d9
     fe8:	bl	0 <coda_set_error>
     fec:	mvn	r0, #0
     ff0:	b	f7c <coda_mem_array_validate+0x6c>

00000ff4 <coda_mem_data_new>:
     ff4:	strd	r4, [sp, #-36]!	; 0xffffffdc
     ff8:	strd	r6, [sp, #8]
     ffc:	subs	r6, r0, #0
    1000:	strd	r8, [sp, #16]
    1004:	strd	sl, [sp, #24]
    1008:	str	lr, [sp, #32]
    100c:	sub	sp, sp, #20
    1010:	beq	1288 <coda_mem_data_new+0x294>
    1014:	cmp	r3, #0
    1018:	mov	fp, r3
    101c:	blt	1334 <coda_mem_data_new+0x340>
    1020:	ldr	r3, [sp, #56]	; 0x38
    1024:	movgt	r4, #1
    1028:	movle	r4, #0
    102c:	cmp	r3, #0
    1030:	movne	r4, #0
    1034:	cmp	r4, #0
    1038:	bne	1238 <coda_mem_data_new+0x244>
    103c:	mov	r8, r1
    1040:	ldrd	r0, [r6, #24]
    1044:	mov	r5, r2
    1048:	cmp	r0, #0
    104c:	sbcs	r3, r1, #0
    1050:	blt	1084 <coda_mem_data_new+0x90>
    1054:	mov	r3, r1
    1058:	mov	r2, r0
    105c:	lsr	r1, r0, #3
    1060:	strd	r2, [sp, #8]
    1064:	and	r2, r2, #7
    1068:	ldr	r3, [sp, #12]
    106c:	orr	r1, r1, r3, lsl #29
    1070:	cmp	r2, #0
    1074:	moveq	r3, r1
    1078:	addne	r3, r1, #1
    107c:	cmp	fp, r3
    1080:	bne	121c <coda_mem_data_new+0x228>
    1084:	ldr	r2, [r6, #12]
    1088:	cmp	fp, #1
    108c:	sub	r7, r2, #10
    1090:	clz	r7, r7
    1094:	lsr	r7, r7, #5
    1098:	moveq	r7, #0
    109c:	cmp	r7, #0
    10a0:	bne	125c <coda_mem_data_new+0x268>
    10a4:	mov	r0, #32
    10a8:	bl	0 <malloc>
    10ac:	subs	r4, r0, #0
    10b0:	beq	12ac <coda_mem_data_new+0x2b8>
    10b4:	ldr	r1, [r6, #4]
    10b8:	mov	r3, #100	; 0x64
    10bc:	mov	r0, #2
    10c0:	mov	r2, #0
    10c4:	cmp	fp, #0
    10c8:	stm	r4, {r3, r6}
    10cc:	mov	r3, #0
    10d0:	str	r0, [r4, #8]
    10d4:	str	r8, [r4, #12]
    10d8:	add	r1, r1, #1
    10dc:	str	fp, [r4, #16]
    10e0:	strd	r2, [r4, #24]
    10e4:	str	r1, [r6, #4]
    10e8:	beq	11c0 <coda_mem_data_new+0x1cc>
    10ec:	cmp	r5, #0
    10f0:	beq	12d4 <coda_mem_data_new+0x2e0>
    10f4:	ldrd	r8, [r5, #40]	; 0x28
    10f8:	orrs	r3, r8, r9
    10fc:	moveq	r2, r7
    1100:	beq	112c <coda_mem_data_new+0x138>
    1104:	subs	r1, r8, #1
    1108:	mov	r2, r7
    110c:	sbc	r7, r9, #0
    1110:	asr	r3, r7, #31
    1114:	ubfx	r3, r3, #0, #12
    1118:	adds	r3, r3, r1
    111c:	lsr	r3, r3, #12
    1120:	adc	r2, r2, r7
    1124:	orr	r3, r3, r2, lsl #20
    1128:	add	r2, r3, #1
    112c:	asr	r7, fp, #31
    1130:	adds	r3, r8, fp
    1134:	mov	r0, #0
    1138:	mov	r6, fp
    113c:	ldr	sl, [r5, #48]	; 0x30
    1140:	adc	r1, r9, r7
    1144:	subs	ip, r3, #1
    1148:	sbc	r1, r1, #0
    114c:	asr	r3, r1, #31
    1150:	ubfx	r3, r3, #0, #12
    1154:	adds	r3, r3, ip
    1158:	lsr	r3, r3, #12
    115c:	adc	r1, r0, r1
    1160:	orr	r3, r3, r1, lsl #20
    1164:	add	r3, r3, #1
    1168:	cmp	r2, r3
    116c:	bge	1190 <coda_mem_data_new+0x19c>
    1170:	lsl	r8, r3, #12
    1174:	mov	r0, sl
    1178:	mov	r1, r8
    117c:	bl	0 <realloc>
    1180:	subs	sl, r0, #0
    1184:	beq	1300 <coda_mem_data_new+0x30c>
    1188:	ldrd	r8, [r5, #40]	; 0x28
    118c:	str	sl, [r5, #48]	; 0x30
    1190:	mov	r2, fp
    1194:	add	r0, sl, r8
    1198:	strd	r8, [r4, #24]
    119c:	ldr	r1, [sp, #56]	; 0x38
    11a0:	bl	0 <memcpy>
    11a4:	ldr	r3, [r5, #40]	; 0x28
    11a8:	ldr	r2, [r5, #44]	; 0x2c
    11ac:	ldr	r8, [r4, #12]
    11b0:	adds	r3, r3, r6
    11b4:	adc	r2, r2, r7
    11b8:	str	r3, [r5, #40]	; 0x28
    11bc:	str	r2, [r5, #44]	; 0x2c
    11c0:	cmp	r8, #0
    11c4:	beq	11e8 <coda_mem_data_new+0x1f4>
    11c8:	mov	r0, r4
    11cc:	add	sp, sp, #20
    11d0:	ldrd	r4, [sp]
    11d4:	ldrd	r6, [sp, #8]
    11d8:	ldrd	r8, [sp, #16]
    11dc:	ldrd	sl, [sp, #24]
    11e0:	add	sp, sp, #32
    11e4:	pop	{pc}		; (ldr pc, [sp], #4)
    11e8:	ldr	r3, [r4, #4]
    11ec:	ldr	r0, [r3, #36]	; 0x24
    11f0:	cmp	r0, #0
    11f4:	beq	11c8 <coda_mem_data_new+0x1d4>
    11f8:	mov	r1, r8
    11fc:	bl	2ac <coda_mem_record_new>
    1200:	cmp	r0, #0
    1204:	str	r0, [r4, #12]
    1208:	bne	11c8 <coda_mem_data_new+0x1d4>
    120c:	mov	r0, r4
    1210:	mov	r4, r8
    1214:	bl	28 <coda_mem_type_delete>
    1218:	b	11c8 <coda_mem_data_new+0x1d4>
    121c:	mov	r2, fp
    1220:	movw	r1, #0
    1224:	movt	r1, #0
    1228:	movw	r0, #65236	; 0xfed4
    122c:	movt	r0, #65535	; 0xffff
    1230:	bl	0 <coda_set_error>
    1234:	b	11c8 <coda_mem_data_new+0x1d4>
    1238:	movw	r2, #0
    123c:	movt	r2, #0
    1240:	movw	r1, #0
    1244:	movt	r1, #0
    1248:	mov	r3, #764	; 0x2fc
    124c:	mvn	r0, #99	; 0x63
    1250:	bl	0 <coda_set_error>
    1254:	mov	r4, #0
    1258:	b	11c8 <coda_mem_data_new+0x1d4>
    125c:	movw	r0, #782	; 0x30e
    1260:	mov	r2, fp
    1264:	movw	r3, #0
    1268:	movt	r3, #0
    126c:	movw	r1, #0
    1270:	movt	r1, #0
    1274:	str	r0, [sp]
    1278:	mvn	r0, #99	; 0x63
    127c:	mov	r4, #0
    1280:	bl	0 <coda_set_error>
    1284:	b	11c8 <coda_mem_data_new+0x1d4>
    1288:	movw	r2, #0
    128c:	movt	r2, #0
    1290:	movw	r1, #0
    1294:	movt	r1, #0
    1298:	movw	r3, #758	; 0x2f6
    129c:	mvn	r0, #99	; 0x63
    12a0:	mov	r4, r6
    12a4:	bl	0 <coda_set_error>
    12a8:	b	11c8 <coda_mem_data_new+0x1d4>
    12ac:	movw	r0, #790	; 0x316
    12b0:	movw	r3, #0
    12b4:	movt	r3, #0
    12b8:	movw	r1, #0
    12bc:	movt	r1, #0
    12c0:	mov	r2, #32
    12c4:	str	r0, [sp]
    12c8:	mvn	r0, #0
    12cc:	bl	0 <coda_set_error>
    12d0:	b	11c8 <coda_mem_data_new+0x1d4>
    12d4:	movw	r3, #805	; 0x325
    12d8:	mvn	r0, #99	; 0x63
    12dc:	movw	r2, #0
    12e0:	movt	r2, #0
    12e4:	movw	r1, #0
    12e8:	movt	r1, #0
    12ec:	bl	0 <coda_set_error>
    12f0:	mov	r0, r4
    12f4:	mov	r4, r5
    12f8:	bl	28 <coda_mem_type_delete>
    12fc:	b	11c8 <coda_mem_data_new+0x1d4>
    1300:	movw	r0, #821	; 0x335
    1304:	mov	r2, r8
    1308:	movw	r3, #0
    130c:	movt	r3, #0
    1310:	movw	r1, #0
    1314:	movt	r1, #0
    1318:	str	r0, [sp]
    131c:	mvn	r0, #0
    1320:	bl	0 <coda_set_error>
    1324:	mov	r0, r4
    1328:	mov	r4, sl
    132c:	bl	28 <coda_mem_type_delete>
    1330:	b	11c8 <coda_mem_data_new+0x1d4>
    1334:	movw	r1, #0
    1338:	movt	r1, #0
    133c:	ldr	r3, [pc, #12]	; 1350 <coda_mem_data_new+0x35c>
    1340:	movw	r0, #0
    1344:	movt	r0, #0
    1348:	movw	r2, #761	; 0x2f9
    134c:	bl	0 <__assert_fail>
    1350:	.word	0x00000084

00001354 <coda_mem_int8_new>:
    1354:	strd	r4, [sp, #-12]!
    1358:	ldrd	r4, [r0, #24]
    135c:	str	lr, [sp, #8]
    1360:	sub	sp, sp, #20
    1364:	strb	r3, [sp, #15]
    1368:	cmp	r5, #0
    136c:	cmpeq	r4, #8
    1370:	bne	13a0 <coda_mem_int8_new+0x4c>
    1374:	ldr	r3, [r0, #12]
    1378:	cmp	r3, #0
    137c:	bne	13bc <coda_mem_int8_new+0x68>
    1380:	add	ip, sp, #15
    1384:	mov	r3, #1
    1388:	str	ip, [sp]
    138c:	bl	ff4 <coda_mem_data_new>
    1390:	add	sp, sp, #20
    1394:	ldrd	r4, [sp]
    1398:	add	sp, sp, #8
    139c:	pop	{pc}		; (ldr pc, [sp], #4)
    13a0:	movw	r1, #0
    13a4:	movt	r1, #0
    13a8:	ldr	r3, [pc, #40]	; 13d8 <coda_mem_int8_new+0x84>
    13ac:	movw	r0, #0
    13b0:	movt	r0, #0
    13b4:	movw	r2, #847	; 0x34f
    13b8:	bl	0 <__assert_fail>
    13bc:	movw	r1, #0
    13c0:	movt	r1, #0
    13c4:	ldr	r3, [pc, #12]	; 13d8 <coda_mem_int8_new+0x84>
    13c8:	movw	r0, #0
    13cc:	movt	r0, #0
    13d0:	mov	r2, #848	; 0x350
    13d4:	bl	0 <__assert_fail>
    13d8:	.word	0x00000098

000013dc <coda_mem_uint8_new>:
    13dc:	strd	r4, [sp, #-12]!
    13e0:	ldrd	r4, [r0, #24]
    13e4:	str	lr, [sp, #8]
    13e8:	sub	sp, sp, #20
    13ec:	strb	r3, [sp, #15]
    13f0:	cmp	r5, #0
    13f4:	cmpeq	r4, #8
    13f8:	bne	1424 <coda_mem_uint8_new+0x48>
    13fc:	ldr	r3, [r0, #12]
    1400:	cmp	r3, #1
    1404:	bne	1440 <coda_mem_uint8_new+0x64>
    1408:	add	ip, sp, #15
    140c:	str	ip, [sp]
    1410:	bl	ff4 <coda_mem_data_new>
    1414:	add	sp, sp, #20
    1418:	ldrd	r4, [sp]
    141c:	add	sp, sp, #8
    1420:	pop	{pc}		; (ldr pc, [sp], #4)
    1424:	movw	r1, #0
    1428:	movt	r1, #0
    142c:	ldr	r3, [pc, #40]	; 145c <coda_mem_uint8_new+0x80>
    1430:	movw	r0, #0
    1434:	movt	r0, #0
    1438:	movw	r2, #855	; 0x357
    143c:	bl	0 <__assert_fail>
    1440:	movw	r1, #0
    1444:	movt	r1, #0
    1448:	ldr	r3, [pc, #12]	; 145c <coda_mem_uint8_new+0x80>
    144c:	movw	r0, #0
    1450:	movt	r0, #0
    1454:	mov	r2, #856	; 0x358
    1458:	bl	0 <__assert_fail>
    145c:	.word	0x000000ac

00001460 <coda_mem_int16_new>:
    1460:	strd	r4, [sp, #-12]!
    1464:	ldrd	r4, [r0, #24]
    1468:	str	lr, [sp, #8]
    146c:	sub	sp, sp, #20
    1470:	strh	r3, [sp, #14]
    1474:	cmp	r5, #0
    1478:	cmpeq	r4, #16
    147c:	bne	14a8 <coda_mem_int16_new+0x48>
    1480:	ldr	r3, [r0, #12]
    1484:	cmp	r3, #2
    1488:	bne	14c4 <coda_mem_int16_new+0x64>
    148c:	add	ip, sp, #14
    1490:	str	ip, [sp]
    1494:	bl	ff4 <coda_mem_data_new>
    1498:	add	sp, sp, #20
    149c:	ldrd	r4, [sp]
    14a0:	add	sp, sp, #8
    14a4:	pop	{pc}		; (ldr pc, [sp], #4)
    14a8:	movw	r1, #0
    14ac:	movt	r1, #0
    14b0:	ldr	r3, [pc, #40]	; 14e0 <coda_mem_int16_new+0x80>
    14b4:	movw	r0, #0
    14b8:	movt	r0, #0
    14bc:	movw	r2, #863	; 0x35f
    14c0:	bl	0 <__assert_fail>
    14c4:	movw	r1, #0
    14c8:	movt	r1, #0
    14cc:	ldr	r3, [pc, #12]	; 14e0 <coda_mem_int16_new+0x80>
    14d0:	movw	r0, #0
    14d4:	movt	r0, #0
    14d8:	mov	r2, #864	; 0x360
    14dc:	bl	0 <__assert_fail>
    14e0:	.word	0x000000c0

000014e4 <coda_mem_uint16_new>:
    14e4:	strd	r4, [sp, #-12]!
    14e8:	ldrd	r4, [r0, #24]
    14ec:	str	lr, [sp, #8]
    14f0:	sub	sp, sp, #20
    14f4:	strh	r3, [sp, #14]
    14f8:	cmp	r5, #0
    14fc:	cmpeq	r4, #16
    1500:	bne	1530 <coda_mem_uint16_new+0x4c>
    1504:	ldr	r3, [r0, #12]
    1508:	cmp	r3, #3
    150c:	bne	154c <coda_mem_uint16_new+0x68>
    1510:	add	ip, sp, #14
    1514:	mov	r3, #2
    1518:	str	ip, [sp]
    151c:	bl	ff4 <coda_mem_data_new>
    1520:	add	sp, sp, #20
    1524:	ldrd	r4, [sp]
    1528:	add	sp, sp, #8
    152c:	pop	{pc}		; (ldr pc, [sp], #4)
    1530:	movw	r1, #0
    1534:	movt	r1, #0
    1538:	ldr	r3, [pc, #40]	; 1568 <coda_mem_uint16_new+0x84>
    153c:	movw	r0, #0
    1540:	movt	r0, #0
    1544:	movw	r2, #871	; 0x367
    1548:	bl	0 <__assert_fail>
    154c:	movw	r1, #0
    1550:	movt	r1, #0
    1554:	ldr	r3, [pc, #12]	; 1568 <coda_mem_uint16_new+0x84>
    1558:	movw	r0, #0
    155c:	movt	r0, #0
    1560:	mov	r2, #872	; 0x368
    1564:	bl	0 <__assert_fail>
    1568:	.word	0x000000d4

0000156c <coda_mem_int32_new>:
    156c:	strd	r4, [sp, #-12]!
    1570:	ldrd	r4, [r0, #24]
    1574:	str	lr, [sp, #8]
    1578:	sub	sp, sp, #20
    157c:	str	r3, [sp, #12]
    1580:	cmp	r5, #0
    1584:	cmpeq	r4, #32
    1588:	bne	15b4 <coda_mem_int32_new+0x48>
    158c:	ldr	r3, [r0, #12]
    1590:	cmp	r3, #4
    1594:	bne	15d0 <coda_mem_int32_new+0x64>
    1598:	add	ip, sp, #12
    159c:	str	ip, [sp]
    15a0:	bl	ff4 <coda_mem_data_new>
    15a4:	add	sp, sp, #20
    15a8:	ldrd	r4, [sp]
    15ac:	add	sp, sp, #8
    15b0:	pop	{pc}		; (ldr pc, [sp], #4)
    15b4:	movw	r1, #0
    15b8:	movt	r1, #0
    15bc:	ldr	r3, [pc, #40]	; 15ec <coda_mem_int32_new+0x80>
    15c0:	movw	r0, #0
    15c4:	movt	r0, #0
    15c8:	movw	r2, #879	; 0x36f
    15cc:	bl	0 <__assert_fail>
    15d0:	movw	r1, #0
    15d4:	movt	r1, #0
    15d8:	ldr	r3, [pc, #12]	; 15ec <coda_mem_int32_new+0x80>
    15dc:	movw	r0, #0
    15e0:	movt	r0, #0
    15e4:	mov	r2, #880	; 0x370
    15e8:	bl	0 <__assert_fail>
    15ec:	.word	0x000000e8

000015f0 <coda_mem_uint32_new>:
    15f0:	strd	r4, [sp, #-12]!
    15f4:	ldrd	r4, [r0, #24]
    15f8:	str	lr, [sp, #8]
    15fc:	sub	sp, sp, #20
    1600:	str	r3, [sp, #12]
    1604:	cmp	r5, #0
    1608:	cmpeq	r4, #32
    160c:	bne	163c <coda_mem_uint32_new+0x4c>
    1610:	ldr	r3, [r0, #12]
    1614:	cmp	r3, #5
    1618:	bne	1658 <coda_mem_uint32_new+0x68>
    161c:	add	ip, sp, #12
    1620:	mov	r3, #4
    1624:	str	ip, [sp]
    1628:	bl	ff4 <coda_mem_data_new>
    162c:	add	sp, sp, #20
    1630:	ldrd	r4, [sp]
    1634:	add	sp, sp, #8
    1638:	pop	{pc}		; (ldr pc, [sp], #4)
    163c:	movw	r1, #0
    1640:	movt	r1, #0
    1644:	ldr	r3, [pc, #40]	; 1674 <coda_mem_uint32_new+0x84>
    1648:	movw	r0, #0
    164c:	movt	r0, #0
    1650:	movw	r2, #887	; 0x377
    1654:	bl	0 <__assert_fail>
    1658:	movw	r1, #0
    165c:	movt	r1, #0
    1660:	ldr	r3, [pc, #12]	; 1674 <coda_mem_uint32_new+0x84>
    1664:	movw	r0, #0
    1668:	movt	r0, #0
    166c:	mov	r2, #888	; 0x378
    1670:	bl	0 <__assert_fail>
    1674:	.word	0x000000fc

00001678 <coda_mem_int64_new>:
    1678:	strd	r4, [sp, #-12]!
    167c:	ldrd	r4, [r0, #24]
    1680:	str	lr, [sp, #8]
    1684:	sub	sp, sp, #12
    1688:	cmp	r5, #0
    168c:	cmpeq	r4, #64	; 0x40
    1690:	bne	16c0 <coda_mem_int64_new+0x48>
    1694:	ldr	r3, [r0, #12]
    1698:	cmp	r3, #6
    169c:	bne	16dc <coda_mem_int64_new+0x64>
    16a0:	add	ip, sp, #24
    16a4:	mov	r3, #8
    16a8:	str	ip, [sp]
    16ac:	bl	ff4 <coda_mem_data_new>
    16b0:	add	sp, sp, #12
    16b4:	ldrd	r4, [sp]
    16b8:	add	sp, sp, #8
    16bc:	pop	{pc}		; (ldr pc, [sp], #4)
    16c0:	movw	r1, #0
    16c4:	movt	r1, #0
    16c8:	ldr	r3, [pc, #40]	; 16f8 <coda_mem_int64_new+0x80>
    16cc:	movw	r0, #0
    16d0:	movt	r0, #0
    16d4:	movw	r2, #895	; 0x37f
    16d8:	bl	0 <__assert_fail>
    16dc:	movw	r1, #0
    16e0:	movt	r1, #0
    16e4:	ldr	r3, [pc, #12]	; 16f8 <coda_mem_int64_new+0x80>
    16e8:	movw	r0, #0
    16ec:	movt	r0, #0
    16f0:	mov	r2, #896	; 0x380
    16f4:	bl	0 <__assert_fail>
    16f8:	.word	0x00000110

000016fc <coda_mem_uint64_new>:
    16fc:	strd	r4, [sp, #-12]!
    1700:	ldrd	r4, [r0, #24]
    1704:	str	lr, [sp, #8]
    1708:	sub	sp, sp, #12
    170c:	cmp	r5, #0
    1710:	cmpeq	r4, #64	; 0x40
    1714:	bne	1744 <coda_mem_uint64_new+0x48>
    1718:	ldr	r3, [r0, #12]
    171c:	cmp	r3, #7
    1720:	bne	1760 <coda_mem_uint64_new+0x64>
    1724:	add	ip, sp, #24
    1728:	mov	r3, #8
    172c:	str	ip, [sp]
    1730:	bl	ff4 <coda_mem_data_new>
    1734:	add	sp, sp, #12
    1738:	ldrd	r4, [sp]
    173c:	add	sp, sp, #8
    1740:	pop	{pc}		; (ldr pc, [sp], #4)
    1744:	movw	r1, #0
    1748:	movt	r1, #0
    174c:	ldr	r3, [pc, #40]	; 177c <coda_mem_uint64_new+0x80>
    1750:	movw	r0, #0
    1754:	movt	r0, #0
    1758:	movw	r2, #903	; 0x387
    175c:	bl	0 <__assert_fail>
    1760:	movw	r1, #0
    1764:	movt	r1, #0
    1768:	ldr	r3, [pc, #12]	; 177c <coda_mem_uint64_new+0x80>
    176c:	movw	r0, #0
    1770:	movt	r0, #0
    1774:	mov	r2, #904	; 0x388
    1778:	bl	0 <__assert_fail>
    177c:	.word	0x00000124

00001780 <coda_mem_float_new>:
    1780:	strd	r4, [sp, #-12]!
    1784:	ldrd	r4, [r0, #24]
    1788:	str	lr, [sp, #8]
    178c:	sub	sp, sp, #20
    1790:	vstr	s0, [sp, #12]
    1794:	cmp	r5, #0
    1798:	cmpeq	r4, #32
    179c:	bne	17cc <coda_mem_float_new+0x4c>
    17a0:	ldr	r3, [r0, #12]
    17a4:	cmp	r3, #8
    17a8:	bne	17e8 <coda_mem_float_new+0x68>
    17ac:	add	ip, sp, #12
    17b0:	mov	r3, #4
    17b4:	str	ip, [sp]
    17b8:	bl	ff4 <coda_mem_data_new>
    17bc:	add	sp, sp, #20
    17c0:	ldrd	r4, [sp]
    17c4:	add	sp, sp, #8
    17c8:	pop	{pc}		; (ldr pc, [sp], #4)
    17cc:	movw	r1, #0
    17d0:	movt	r1, #0
    17d4:	ldr	r3, [pc, #40]	; 1804 <coda_mem_float_new+0x84>
    17d8:	movw	r0, #0
    17dc:	movt	r0, #0
    17e0:	movw	r2, #911	; 0x38f
    17e4:	bl	0 <__assert_fail>
    17e8:	movw	r1, #0
    17ec:	movt	r1, #0
    17f0:	ldr	r3, [pc, #12]	; 1804 <coda_mem_float_new+0x84>
    17f4:	movw	r0, #0
    17f8:	movt	r0, #0
    17fc:	mov	r2, #912	; 0x390
    1800:	bl	0 <__assert_fail>
    1804:	.word	0x00000138

00001808 <coda_mem_double_new>:
    1808:	strd	r4, [sp, #-12]!
    180c:	ldrd	r4, [r0, #24]
    1810:	str	lr, [sp, #8]
    1814:	sub	sp, sp, #20
    1818:	vstr	d0, [sp, #8]
    181c:	cmp	r5, #0
    1820:	cmpeq	r4, #64	; 0x40
    1824:	bne	1854 <coda_mem_double_new+0x4c>
    1828:	ldr	r3, [r0, #12]
    182c:	cmp	r3, #9
    1830:	bne	1870 <coda_mem_double_new+0x68>
    1834:	add	ip, sp, #8
    1838:	mov	r3, #8
    183c:	str	ip, [sp]
    1840:	bl	ff4 <coda_mem_data_new>
    1844:	add	sp, sp, #20
    1848:	ldrd	r4, [sp]
    184c:	add	sp, sp, #8
    1850:	pop	{pc}		; (ldr pc, [sp], #4)
    1854:	movw	r1, #0
    1858:	movt	r1, #0
    185c:	ldr	r3, [pc, #40]	; 188c <coda_mem_double_new+0x84>
    1860:	movw	r0, #0
    1864:	movt	r0, #0
    1868:	movw	r2, #919	; 0x397
    186c:	bl	0 <__assert_fail>
    1870:	movw	r1, #0
    1874:	movt	r1, #0
    1878:	ldr	r3, [pc, #12]	; 188c <coda_mem_double_new+0x84>
    187c:	movw	r0, #0
    1880:	movt	r0, #0
    1884:	mov	r2, #920	; 0x398
    1888:	bl	0 <__assert_fail>
    188c:	.word	0x0000014c

00001890 <coda_mem_char_new>:
    1890:	strd	r4, [sp, #-12]!
    1894:	ldrd	r4, [r0, #24]
    1898:	str	lr, [sp, #8]
    189c:	sub	sp, sp, #20
    18a0:	strb	r3, [sp, #15]
    18a4:	cmp	r5, #0
    18a8:	cmpeq	r4, #8
    18ac:	bne	18dc <coda_mem_char_new+0x4c>
    18b0:	ldr	r3, [r0, #12]
    18b4:	cmp	r3, #10
    18b8:	bne	18f8 <coda_mem_char_new+0x68>
    18bc:	add	ip, sp, #15
    18c0:	mov	r3, #1
    18c4:	str	ip, [sp]
    18c8:	bl	ff4 <coda_mem_data_new>
    18cc:	add	sp, sp, #20
    18d0:	ldrd	r4, [sp]
    18d4:	add	sp, sp, #8
    18d8:	pop	{pc}		; (ldr pc, [sp], #4)
    18dc:	movw	r1, #0
    18e0:	movt	r1, #0
    18e4:	ldr	r3, [pc, #40]	; 1914 <coda_mem_char_new+0x84>
    18e8:	movw	r0, #0
    18ec:	movt	r0, #0
    18f0:	movw	r2, #927	; 0x39f
    18f4:	bl	0 <__assert_fail>
    18f8:	movw	r1, #0
    18fc:	movt	r1, #0
    1900:	ldr	r3, [pc, #12]	; 1914 <coda_mem_char_new+0x84>
    1904:	movw	r0, #0
    1908:	movt	r0, #0
    190c:	mov	r2, #928	; 0x3a0
    1910:	bl	0 <__assert_fail>
    1914:	.word	0x00000160

00001918 <coda_mem_string_new>:
    1918:	strd	r4, [sp, #-20]!	; 0xffffffec
    191c:	mov	r5, r0
    1920:	ldr	r0, [r0, #12]
    1924:	strd	r6, [sp, #8]
    1928:	str	lr, [sp, #16]
    192c:	sub	sp, sp, #12
    1930:	cmp	r0, #11
    1934:	bne	1980 <coda_mem_string_new+0x68>
    1938:	cmp	r3, #0
    193c:	mov	r6, r1
    1940:	mov	r7, r2
    1944:	mov	r4, r3
    1948:	beq	1958 <coda_mem_string_new+0x40>
    194c:	mov	r0, r4
    1950:	bl	0 <strlen>
    1954:	mov	r3, r0
    1958:	mov	r2, r7
    195c:	mov	r1, r6
    1960:	str	r4, [sp]
    1964:	mov	r0, r5
    1968:	bl	ff4 <coda_mem_data_new>
    196c:	add	sp, sp, #12
    1970:	ldrd	r4, [sp]
    1974:	ldrd	r6, [sp, #8]
    1978:	add	sp, sp, #16
    197c:	pop	{pc}		; (ldr pc, [sp], #4)
    1980:	movw	r1, #0
    1984:	movt	r1, #0
    1988:	ldr	r3, [pc, #12]	; 199c <coda_mem_string_new+0x84>
    198c:	movw	r0, #0
    1990:	movt	r0, #0
    1994:	movw	r2, #935	; 0x3a7
    1998:	bl	0 <__assert_fail>
    199c:	.word	0x00000174

000019a0 <coda_mem_type_update>:
    19a0:	strd	r4, [sp, #-20]!	; 0xffffffec
    19a4:	mov	r5, r1
    19a8:	ldr	r4, [r0]
    19ac:	ldr	r3, [r4]
    19b0:	strd	r6, [sp, #8]
    19b4:	str	lr, [sp, #16]
    19b8:	sub	sp, sp, #12
    19bc:	cmp	r3, #1
    19c0:	bls	1b44 <coda_mem_type_update+0x1a4>
    19c4:	cmp	r3, #100	; 0x64
    19c8:	bne	1c90 <coda_mem_type_update+0x2f0>
    19cc:	ldr	r3, [r4, #4]
    19d0:	cmp	r1, r3
    19d4:	beq	1ac4 <coda_mem_type_update+0x124>
    19d8:	mov	r6, r0
    19dc:	b	1a54 <coda_mem_type_update+0xb4>
    19e0:	cmp	r1, #1
    19e4:	beq	1b54 <coda_mem_type_update+0x1b4>
    19e8:	ldr	r3, [r5]
    19ec:	cmp	r3, #2
    19f0:	bne	1cac <coda_mem_type_update+0x30c>
    19f4:	mov	r1, #0
    19f8:	mov	r0, r5
    19fc:	bl	a90 <coda_mem_array_new>
    1a00:	subs	r4, r0, #0
    1a04:	beq	1b2c <coda_mem_type_update+0x18c>
    1a08:	mov	r0, r6
    1a0c:	ldr	r1, [r5, #40]	; 0x28
    1a10:	bl	19a0 <coda_mem_type_update>
    1a14:	cmp	r0, #0
    1a18:	mov	r0, r4
    1a1c:	bne	1b28 <coda_mem_type_update+0x188>
    1a20:	ldr	r1, [r6]
    1a24:	bl	d40 <coda_mem_array_add_element>
    1a28:	cmp	r0, #0
    1a2c:	bne	1b24 <coda_mem_type_update+0x184>
    1a30:	ldr	r3, [r4]
    1a34:	str	r4, [r6]
    1a38:	cmp	r3, #1
    1a3c:	bls	1b44 <coda_mem_type_update+0x1a4>
    1a40:	cmp	r3, #100	; 0x64
    1a44:	bne	1c90 <coda_mem_type_update+0x2f0>
    1a48:	ldr	r3, [r4, #4]
    1a4c:	cmp	r5, r3
    1a50:	beq	1ac4 <coda_mem_type_update+0x124>
    1a54:	ldr	r2, [r5, #8]
    1a58:	ldr	r1, [r3, #8]
    1a5c:	cmp	r2, #1
    1a60:	beq	19e0 <coda_mem_type_update+0x40>
    1a64:	cmp	r2, #4
    1a68:	cmpeq	r1, #0
    1a6c:	bne	1b54 <coda_mem_type_update+0x1b4>
    1a70:	ldr	r2, [r3]
    1a74:	cmp	r2, #2
    1a78:	bne	1d30 <coda_mem_type_update+0x390>
    1a7c:	ldr	r7, [r3, #48]	; 0x30
    1a80:	cmp	r7, #0
    1a84:	bne	1d14 <coda_mem_type_update+0x374>
    1a88:	mov	r3, r7
    1a8c:	mov	r2, r7
    1a90:	mov	r1, r7
    1a94:	mov	r0, r5
    1a98:	bl	1918 <coda_mem_string_new>
    1a9c:	ldr	r3, [r6]
    1aa0:	mov	r4, r0
    1aa4:	ldr	r3, [r3, #12]
    1aa8:	str	r3, [r0, #12]
    1aac:	ldr	r3, [r6]
    1ab0:	str	r7, [r3, #12]
    1ab4:	ldr	r0, [r6]
    1ab8:	bl	0 <coda_dynamic_type_delete>
    1abc:	str	r4, [r6]
    1ac0:	ldr	r3, [r4, #4]
    1ac4:	ldr	r5, [r4, #8]
    1ac8:	cmp	r5, #1
    1acc:	beq	1be4 <coda_mem_type_update+0x244>
    1ad0:	cmp	r5, #0
    1ad4:	beq	1b70 <coda_mem_type_update+0x1d0>
    1ad8:	cmp	r5, #3
    1adc:	bne	1af8 <coda_mem_type_update+0x158>
    1ae0:	add	r0, r4, #16
    1ae4:	ldr	r1, [r3, #44]	; 0x2c
    1ae8:	bl	19a0 <coda_mem_type_update>
    1aec:	cmp	r0, #0
    1af0:	bne	1b2c <coda_mem_type_update+0x18c>
    1af4:	ldr	r3, [r4, #4]
    1af8:	ldr	r1, [r4, #12]
    1afc:	ldr	r0, [r3, #36]	; 0x24
    1b00:	cmp	r1, #0
    1b04:	beq	1c24 <coda_mem_type_update+0x284>
    1b08:	mov	r1, r0
    1b0c:	add	r0, r4, #12
    1b10:	bl	19a0 <coda_mem_type_update>
    1b14:	adds	r0, r0, #0
    1b18:	movne	r0, #1
    1b1c:	rsb	r0, r0, #0
    1b20:	b	1b30 <coda_mem_type_update+0x190>
    1b24:	mov	r0, r4
    1b28:	bl	0 <coda_dynamic_type_delete>
    1b2c:	mvn	r0, #0
    1b30:	add	sp, sp, #12
    1b34:	ldrd	r4, [sp]
    1b38:	ldrd	r6, [sp, #8]
    1b3c:	add	sp, sp, #16
    1b40:	pop	{pc}		; (ldr pc, [sp], #4)
    1b44:	cmp	r5, r4
    1b48:	bne	1cf8 <coda_mem_type_update+0x358>
    1b4c:	mov	r0, #0
    1b50:	b	1b30 <coda_mem_type_update+0x190>
    1b54:	movw	r1, #0
    1b58:	movt	r1, #0
    1b5c:	ldr	r3, [pc, #488]	; 1d4c <coda_mem_type_update+0x3ac>
    1b60:	movw	r0, #0
    1b64:	movt	r0, #0
    1b68:	mov	r2, #153	; 0x99
    1b6c:	bl	0 <__assert_fail>
    1b70:	ldr	r2, [r4, #16]
    1b74:	ldr	r1, [r3, #48]	; 0x30
    1b78:	cmp	r2, r1
    1b7c:	blt	1c48 <coda_mem_type_update+0x2a8>
    1b80:	cmp	r1, #0
    1b84:	movgt	r5, #0
    1b88:	movgt	r6, #1
    1b8c:	bgt	1bb8 <coda_mem_type_update+0x218>
    1b90:	b	1af8 <coda_mem_type_update+0x158>
    1b94:	ldr	r1, [r3, #8]
    1b98:	bl	19a0 <coda_mem_type_update>
    1b9c:	cmp	r0, #0
    1ba0:	bne	1b2c <coda_mem_type_update+0x18c>
    1ba4:	ldr	r3, [r4, #4]
    1ba8:	add	r5, r5, #1
    1bac:	ldr	r2, [r3, #48]	; 0x30
    1bb0:	cmp	r2, r5
    1bb4:	ble	1af8 <coda_mem_type_update+0x158>
    1bb8:	ldr	r0, [r4, #20]
    1bbc:	ldr	r3, [r3, #52]	; 0x34
    1bc0:	ldr	r2, [r0, r5, lsl #2]
    1bc4:	add	r0, r0, r5, lsl #2
    1bc8:	ldr	r3, [r3, r5, lsl #2]
    1bcc:	cmp	r2, #0
    1bd0:	bne	1b94 <coda_mem_type_update+0x1f4>
    1bd4:	ldrb	r2, [r3, #16]
    1bd8:	cmp	r2, #0
    1bdc:	strbeq	r6, [r3, #16]
    1be0:	b	1ba4 <coda_mem_type_update+0x204>
    1be4:	ldr	r2, [r4, #16]
    1be8:	cmp	r2, #0
    1bec:	movgt	r5, #0
    1bf0:	ble	1af8 <coda_mem_type_update+0x158>
    1bf4:	ldr	r0, [r4, #20]
    1bf8:	ldr	r1, [r3, #40]	; 0x28
    1bfc:	add	r0, r0, r5, lsl #2
    1c00:	bl	19a0 <coda_mem_type_update>
    1c04:	cmp	r0, #0
    1c08:	bne	1b2c <coda_mem_type_update+0x18c>
    1c0c:	add	r5, r5, #1
    1c10:	ldr	r3, [r4, #4]
    1c14:	ldr	r2, [r4, #16]
    1c18:	cmp	r2, r5
    1c1c:	bgt	1bf4 <coda_mem_type_update+0x254>
    1c20:	b	1af8 <coda_mem_type_update+0x158>
    1c24:	cmp	r0, #0
    1c28:	beq	1b4c <coda_mem_type_update+0x1ac>
    1c2c:	bl	2ac <coda_mem_record_new>
    1c30:	cmp	r0, #0
    1c34:	str	r0, [r4, #12]
    1c38:	beq	1b2c <coda_mem_type_update+0x18c>
    1c3c:	ldr	r3, [r4, #4]
    1c40:	ldr	r0, [r3, #36]	; 0x24
    1c44:	b	1b08 <coda_mem_type_update+0x168>
    1c48:	lsl	r1, r1, #2
    1c4c:	ldr	r0, [r4, #20]
    1c50:	bl	0 <realloc>
    1c54:	cmp	r0, #0
    1c58:	beq	1cc8 <coda_mem_type_update+0x328>
    1c5c:	ldr	r3, [r4, #4]
    1c60:	ldr	r2, [r4, #16]
    1c64:	ldr	r1, [r3, #48]	; 0x30
    1c68:	str	r0, [r4, #20]
    1c6c:	cmp	r2, r1
    1c70:	addlt	r2, r0, r2, lsl #2
    1c74:	addlt	r0, r0, r1, lsl #2
    1c78:	bge	1c88 <coda_mem_type_update+0x2e8>
    1c7c:	str	r5, [r2], #4
    1c80:	cmp	r0, r2
    1c84:	bne	1c7c <coda_mem_type_update+0x2dc>
    1c88:	str	r1, [r4, #16]
    1c8c:	b	1b80 <coda_mem_type_update+0x1e0>
    1c90:	movw	r1, #0
    1c94:	movt	r1, #0
    1c98:	ldr	r3, [pc, #172]	; 1d4c <coda_mem_type_update+0x3ac>
    1c9c:	movw	r0, #0
    1ca0:	movt	r0, #0
    1ca4:	mov	r2, #108	; 0x6c
    1ca8:	bl	0 <__assert_fail>
    1cac:	movw	r1, #0
    1cb0:	movt	r1, #0
    1cb4:	ldr	r3, [pc, #144]	; 1d4c <coda_mem_type_update+0x3ac>
    1cb8:	movw	r0, #0
    1cbc:	movt	r0, #0
    1cc0:	mov	r2, #114	; 0x72
    1cc4:	bl	0 <__assert_fail>
    1cc8:	ldr	r2, [r4, #4]
    1ccc:	mov	ip, #177	; 0xb1
    1cd0:	movw	r3, #0
    1cd4:	movt	r3, #0
    1cd8:	movw	r1, #0
    1cdc:	movt	r1, #0
    1ce0:	mvn	r0, #0
    1ce4:	ldr	r2, [r2, #48]	; 0x30
    1ce8:	str	ip, [sp]
    1cec:	lsl	r2, r2, #2
    1cf0:	bl	0 <coda_set_error>
    1cf4:	b	1b2c <coda_mem_type_update+0x18c>
    1cf8:	movw	r1, #0
    1cfc:	movt	r1, #0
    1d00:	ldr	r3, [pc, #68]	; 1d4c <coda_mem_type_update+0x3ac>
    1d04:	movw	r0, #0
    1d08:	movt	r0, #0
    1d0c:	mov	r2, #104	; 0x68
    1d10:	bl	0 <__assert_fail>
    1d14:	movw	r1, #0
    1d18:	movt	r1, #0
    1d1c:	ldr	r3, [pc, #40]	; 1d4c <coda_mem_type_update+0x3ac>
    1d20:	movw	r0, #0
    1d24:	movt	r0, #0
    1d28:	mov	r2, #142	; 0x8e
    1d2c:	bl	0 <__assert_fail>
    1d30:	movw	r1, #0
    1d34:	movt	r1, #0
    1d38:	ldr	r3, [pc, #12]	; 1d4c <coda_mem_type_update+0x3ac>
    1d3c:	movw	r0, #0
    1d40:	movt	r0, #0
    1d44:	mov	r2, #141	; 0x8d
    1d48:	bl	0 <__assert_fail>
    1d4c:	.word	0x00000188

00001d50 <coda_mem_raw_new>:
    1d50:	ldr	ip, [r0, #8]
    1d54:	cmp	ip, #5
    1d58:	bne	1d60 <coda_mem_raw_new+0x10>
    1d5c:	b	ff4 <coda_mem_data_new>
    1d60:	str	r4, [sp, #-8]!
    1d64:	str	lr, [sp, #4]
    1d68:	bl	0 <coda_mem_raw_new.part.2>

00001d6c <coda_mem_time_new>:
    1d6c:	strd	r4, [sp, #-20]!	; 0xffffffec
    1d70:	subs	r4, r0, #0
    1d74:	strd	r6, [sp, #8]
    1d78:	str	lr, [sp, #16]
    1d7c:	sub	sp, sp, #12
    1d80:	beq	1ea8 <coda_mem_time_new+0x13c>
    1d84:	ldr	r3, [r4, #8]
    1d88:	cmp	r3, #6
    1d8c:	bne	1e2c <coda_mem_time_new+0xc0>
    1d90:	ldr	r3, [r4, #40]	; 0x28
    1d94:	cmp	r3, #2
    1d98:	bne	1e50 <coda_mem_time_new+0xe4>
    1d9c:	mov	r6, r2
    1da0:	ldr	r2, [r4, #44]	; 0x2c
    1da4:	ldr	r3, [r6, #4]
    1da8:	cmp	r2, r3
    1dac:	bne	1e08 <coda_mem_time_new+0x9c>
    1db0:	mov	r0, #20
    1db4:	mov	r7, r1
    1db8:	bl	0 <malloc>
    1dbc:	subs	r5, r0, #0
    1dc0:	beq	1ecc <coda_mem_time_new+0x160>
    1dc4:	ldr	r3, [r4, #4]
    1dc8:	mov	r1, #100	; 0x64
    1dcc:	mov	r2, #3
    1dd0:	cmp	r7, #0
    1dd4:	stm	r5, {r1, r4}
    1dd8:	str	r2, [r5, #8]
    1ddc:	str	r7, [r5, #12]
    1de0:	add	r3, r3, #1
    1de4:	str	r6, [r5, #16]
    1de8:	str	r3, [r4, #4]
    1dec:	beq	1e74 <coda_mem_time_new+0x108>
    1df0:	mov	r0, r5
    1df4:	add	sp, sp, #12
    1df8:	ldrd	r4, [sp]
    1dfc:	ldrd	r6, [sp, #8]
    1e00:	add	sp, sp, #16
    1e04:	pop	{pc}		; (ldr pc, [sp], #4)
    1e08:	movw	r2, #0
    1e0c:	movt	r2, #0
    1e10:	movw	r1, #0
    1e14:	movt	r1, #0
    1e18:	movw	r3, #970	; 0x3ca
    1e1c:	mvn	r0, #99	; 0x63
    1e20:	bl	0 <coda_set_error>
    1e24:	mov	r5, #0
    1e28:	b	1df0 <coda_mem_time_new+0x84>
    1e2c:	movw	r2, #0
    1e30:	movt	r2, #0
    1e34:	movw	r1, #0
    1e38:	movt	r1, #0
    1e3c:	movw	r3, #959	; 0x3bf
    1e40:	mvn	r0, #99	; 0x63
    1e44:	bl	0 <coda_set_error>
    1e48:	mov	r5, #0
    1e4c:	b	1df0 <coda_mem_time_new+0x84>
    1e50:	movw	r2, #0
    1e54:	movt	r2, #0
    1e58:	movw	r1, #0
    1e5c:	movt	r1, #0
    1e60:	mov	r3, #964	; 0x3c4
    1e64:	mvn	r0, #99	; 0x63
    1e68:	bl	0 <coda_set_error>
    1e6c:	mov	r5, #0
    1e70:	b	1df0 <coda_mem_time_new+0x84>
    1e74:	ldr	r0, [r4, #36]	; 0x24
    1e78:	cmp	r0, #0
    1e7c:	beq	1df0 <coda_mem_time_new+0x84>
    1e80:	mov	r1, r7
    1e84:	bl	2ac <coda_mem_record_new>
    1e88:	cmp	r0, #0
    1e8c:	mov	r3, r0
    1e90:	str	r0, [r5, #12]
    1e94:	bne	1df0 <coda_mem_time_new+0x84>
    1e98:	mov	r0, r5
    1e9c:	mov	r5, r3
    1ea0:	bl	28 <coda_mem_type_delete>
    1ea4:	b	1df0 <coda_mem_time_new+0x84>
    1ea8:	movw	r2, #0
    1eac:	movt	r2, #0
    1eb0:	movw	r1, #0
    1eb4:	movt	r1, #0
    1eb8:	movw	r3, #954	; 0x3ba
    1ebc:	mvn	r0, #99	; 0x63
    1ec0:	mov	r5, r4
    1ec4:	bl	0 <coda_set_error>
    1ec8:	b	1df0 <coda_mem_time_new+0x84>
    1ecc:	movw	r0, #978	; 0x3d2
    1ed0:	movw	r3, #0
    1ed4:	movt	r3, #0
    1ed8:	movw	r1, #0
    1edc:	movt	r1, #0
    1ee0:	mov	r2, #20
    1ee4:	str	r0, [sp]
    1ee8:	mvn	r0, #0
    1eec:	bl	0 <coda_set_error>
    1ef0:	b	1df0 <coda_mem_time_new+0x84>

00001ef4 <coda_mem_no_data_new>:
    1ef4:	strd	r4, [sp, #-16]!
    1ef8:	str	r6, [sp, #8]
    1efc:	mov	r6, r0
    1f00:	mov	r0, #20
    1f04:	str	lr, [sp, #12]
    1f08:	sub	sp, sp, #8
    1f0c:	bl	0 <malloc>
    1f10:	subs	r4, r0, #0
    1f14:	beq	1fdc <coda_mem_no_data_new+0xe8>
    1f18:	mov	r5, #0
    1f1c:	mov	r3, #3
    1f20:	mov	r2, #100	; 0x64
    1f24:	mov	r0, r6
    1f28:	stm	r4, {r2, r5}
    1f2c:	str	r3, [r4, #8]
    1f30:	str	r5, [r4, #12]
    1f34:	str	r5, [r4, #16]
    1f38:	bl	0 <coda_type_no_data_singleton>
    1f3c:	cmp	r0, r5
    1f40:	mov	r3, r0
    1f44:	str	r0, [r4, #4]
    1f48:	beq	1fcc <coda_mem_no_data_new+0xd8>
    1f4c:	ldr	r2, [r0, #4]
    1f50:	ldr	r0, [r0, #44]	; 0x2c
    1f54:	add	r2, r2, #1
    1f58:	ldr	r1, [r0, #8]
    1f5c:	str	r2, [r3, #4]
    1f60:	cmp	r1, #5
    1f64:	bne	2004 <coda_mem_no_data_new+0x110>
    1f68:	mov	r3, r5
    1f6c:	mov	r2, r5
    1f70:	str	r5, [sp]
    1f74:	mov	r1, r5
    1f78:	bl	ff4 <coda_mem_data_new>
    1f7c:	cmp	r0, #0
    1f80:	mov	r3, r0
    1f84:	str	r0, [r4, #16]
    1f88:	beq	1fcc <coda_mem_no_data_new+0xd8>
    1f8c:	ldr	r3, [r4, #4]
    1f90:	ldr	r0, [r3, #36]	; 0x24
    1f94:	cmp	r0, #0
    1f98:	beq	1fb4 <coda_mem_no_data_new+0xc0>
    1f9c:	mov	r1, r5
    1fa0:	bl	2ac <coda_mem_record_new>
    1fa4:	cmp	r0, #0
    1fa8:	mov	r3, r0
    1fac:	str	r0, [r4, #12]
    1fb0:	beq	1fcc <coda_mem_no_data_new+0xd8>
    1fb4:	mov	r0, r4
    1fb8:	add	sp, sp, #8
    1fbc:	ldrd	r4, [sp]
    1fc0:	ldr	r6, [sp, #8]
    1fc4:	add	sp, sp, #12
    1fc8:	pop	{pc}		; (ldr pc, [sp], #4)
    1fcc:	mov	r0, r4
    1fd0:	mov	r4, r3
    1fd4:	bl	28 <coda_mem_type_delete>
    1fd8:	b	1fb4 <coda_mem_no_data_new+0xc0>
    1fdc:	movw	r0, #1009	; 0x3f1
    1fe0:	movw	r3, #0
    1fe4:	movt	r3, #0
    1fe8:	movw	r1, #0
    1fec:	movt	r1, #0
    1ff0:	mov	r2, #20
    1ff4:	str	r0, [sp]
    1ff8:	mvn	r0, #0
    1ffc:	bl	0 <coda_set_error>
    2000:	b	1fb4 <coda_mem_no_data_new+0xc0>
    2004:	bl	0 <coda_mem_raw_new.part.2>
