
../compcert-repos/prog2/0.8:     file format elf32-littlearm


Disassembly of section .init:

00010610 <.init>:
   10610:	push	{r3, lr}
   10614:	bl	106c0 <_start@@Base+0x3c>
   10618:	pop	{r3, pc}

Disassembly of section .plt:

0001061c <printf@plt-0x14>:
   1061c:	push	{lr}		; (str lr, [sp, #-4]!)
   10620:	ldr	lr, [pc, #4]	; 1062c <printf@plt-0x4>
   10624:	add	lr, pc, lr
   10628:	ldr	pc, [lr, #8]!
   1062c:	ldrdeq	r0, [r1], -r4

00010630 <printf@plt>:
   10630:	add	ip, pc, #0, 12
   10634:	add	ip, ip, #16, 20	; 0x10000
   10638:	ldr	pc, [ip, #2516]!	; 0x9d4

0001063c <strcpy@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2508]!	; 0x9cc

00010648 <__libc_start_main@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2500]!	; 0x9c4

00010654 <__gmon_start__@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2492]!	; 0x9bc

00010660 <memset@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2484]!	; 0x9b4

0001066c <__isoc99_scanf@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2476]!	; 0x9ac

00010678 <abort@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2468]!	; 0x9a4

Disassembly of section .text:

00010684 <_start@@Base>:
   10684:	mov	fp, #0
   10688:	mov	lr, #0
   1068c:	pop	{r1}		; (ldr r1, [sp], #4)
   10690:	mov	r2, sp
   10694:	push	{r2}		; (str r2, [sp, #-4]!)
   10698:	push	{r0}		; (str r0, [sp, #-4]!)
   1069c:	ldr	ip, [pc, #16]	; 106b4 <_start@@Base+0x30>
   106a0:	push	{ip}		; (str ip, [sp, #-4]!)
   106a4:	ldr	r0, [pc, #12]	; 106b8 <_start@@Base+0x34>
   106a8:	ldr	r3, [pc, #12]	; 106bc <_start@@Base+0x38>
   106ac:	bl	10648 <__libc_start_main@plt>
   106b0:	bl	10678 <abort@plt>
   106b4:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   106b8:	andeq	r0, r1, r8, asr r9
   106bc:	andeq	r0, r1, r0, ror sl
   106c0:	ldr	r3, [pc, #20]	; 106dc <_start@@Base+0x58>
   106c4:	ldr	r2, [pc, #20]	; 106e0 <_start@@Base+0x5c>
   106c8:	add	r3, pc, r3
   106cc:	ldr	r2, [r3, r2]
   106d0:	cmp	r2, #0
   106d4:	bxeq	lr
   106d8:	b	10654 <__gmon_start__@plt>
   106dc:	andeq	r0, r1, r0, lsr r9
   106e0:	andeq	r0, r0, r8, lsr #32
   106e4:	ldr	r3, [pc, #28]	; 10708 <_start@@Base+0x84>
   106e8:	ldr	r0, [pc, #28]	; 1070c <_start@@Base+0x88>
   106ec:	sub	r3, r3, r0
   106f0:	cmp	r3, #6
   106f4:	bxls	lr
   106f8:	ldr	r3, [pc, #16]	; 10710 <_start@@Base+0x8c>
   106fc:	cmp	r3, #0
   10700:	bxeq	lr
   10704:	bx	r3
   10708:	andeq	r1, r2, r7, lsr r0
   1070c:	andeq	r1, r2, r4, lsr r0
   10710:	andeq	r0, r0, r0
   10714:	ldr	r1, [pc, #36]	; 10740 <_start@@Base+0xbc>
   10718:	ldr	r0, [pc, #36]	; 10744 <_start@@Base+0xc0>
   1071c:	sub	r1, r1, r0
   10720:	asr	r1, r1, #2
   10724:	add	r1, r1, r1, lsr #31
   10728:	asrs	r1, r1, #1
   1072c:	bxeq	lr
   10730:	ldr	r3, [pc, #16]	; 10748 <_start@@Base+0xc4>
   10734:	cmp	r3, #0
   10738:	bxeq	lr
   1073c:	bx	r3
   10740:	andeq	r1, r2, r4, lsr r0
   10744:	andeq	r1, r2, r4, lsr r0
   10748:	andeq	r0, r0, r0
   1074c:	push	{r4, lr}
   10750:	ldr	r4, [pc, #24]	; 10770 <_start@@Base+0xec>
   10754:	ldrb	r3, [r4]
   10758:	cmp	r3, #0
   1075c:	popne	{r4, pc}
   10760:	bl	106e4 <_start@@Base+0x60>
   10764:	mov	r3, #1
   10768:	strb	r3, [r4]
   1076c:	pop	{r4, pc}
   10770:	andeq	r1, r2, r4, lsr r0
   10774:	ldr	r0, [pc, #40]	; 107a4 <_start@@Base+0x120>
   10778:	ldr	r3, [r0]
   1077c:	cmp	r3, #0
   10780:	bne	10788 <_start@@Base+0x104>
   10784:	b	10714 <_start@@Base+0x90>
   10788:	ldr	r3, [pc, #24]	; 107a8 <_start@@Base+0x124>
   1078c:	cmp	r3, #0
   10790:	beq	10784 <_start@@Base+0x100>
   10794:	push	{r4, lr}
   10798:	blx	r3
   1079c:	pop	{r4, lr}
   107a0:	b	10714 <_start@@Base+0x90>
   107a4:	andeq	r0, r2, r4, lsl pc
   107a8:	andeq	r0, r0, r0

000107ac <lerpontuacoes@@Base>:
   107ac:	push	{fp, lr}
   107b0:	add	fp, sp, #4
   107b4:	sub	sp, sp, #16
   107b8:	str	r0, [fp, #-16]
   107bc:	str	r1, [fp, #-20]	; 0xffffffec
   107c0:	sub	r3, fp, #12
   107c4:	mov	r1, r3
   107c8:	ldr	r0, [pc, #104]	; 10838 <lerpontuacoes@@Base+0x8c>
   107cc:	bl	1066c <__isoc99_scanf@plt>
   107d0:	mov	r3, #0
   107d4:	str	r3, [fp, #-8]
   107d8:	b	10818 <lerpontuacoes@@Base+0x6c>
   107dc:	ldr	r3, [fp, #-8]
   107e0:	mov	r2, #50	; 0x32
   107e4:	mul	r3, r2, r3
   107e8:	ldr	r2, [fp, #-16]
   107ec:	add	r1, r2, r3
   107f0:	ldr	r3, [fp, #-8]
   107f4:	lsl	r3, r3, #2
   107f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   107fc:	add	r3, r2, r3
   10800:	mov	r2, r3
   10804:	ldr	r0, [pc, #48]	; 1083c <lerpontuacoes@@Base+0x90>
   10808:	bl	1066c <__isoc99_scanf@plt>
   1080c:	ldr	r3, [fp, #-8]
   10810:	add	r3, r3, #1
   10814:	str	r3, [fp, #-8]
   10818:	ldr	r3, [fp, #-12]
   1081c:	ldr	r2, [fp, #-8]
   10820:	cmp	r2, r3
   10824:	blt	107dc <lerpontuacoes@@Base+0x30>
   10828:	ldr	r3, [fp, #-12]
   1082c:	mov	r0, r3
   10830:	sub	sp, fp, #4
   10834:	pop	{fp, pc}
   10838:	andeq	r0, r1, r0, ror #21
   1083c:	andeq	r0, r1, r4, ror #21

00010840 <primeiroUltimo@@Base>:
   10840:	push	{fp, lr}
   10844:	add	fp, sp, #4
   10848:	sub	sp, sp, #32
   1084c:	str	r0, [fp, #-24]	; 0xffffffe8
   10850:	str	r1, [fp, #-28]	; 0xffffffe4
   10854:	str	r2, [fp, #-32]	; 0xffffffe0
   10858:	str	r3, [fp, #-36]	; 0xffffffdc
   1085c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   10860:	ldr	r3, [r3]
   10864:	str	r3, [fp, #-12]
   10868:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1086c:	ldr	r3, [r3]
   10870:	str	r3, [fp, #-16]
   10874:	mov	r3, #1
   10878:	str	r3, [fp, #-8]
   1087c:	b	1093c <primeiroUltimo@@Base+0xfc>
   10880:	ldr	r3, [fp, #-8]
   10884:	lsl	r3, r3, #2
   10888:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1088c:	add	r3, r2, r3
   10890:	ldr	r2, [r3]
   10894:	ldr	r3, [fp, #-12]
   10898:	cmp	r2, r3
   1089c:	ble	108d8 <primeiroUltimo@@Base+0x98>
   108a0:	ldr	r3, [fp, #-8]
   108a4:	lsl	r3, r3, #2
   108a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   108ac:	add	r3, r2, r3
   108b0:	ldr	r3, [r3]
   108b4:	str	r3, [fp, #-12]
   108b8:	ldr	r3, [fp, #-8]
   108bc:	mov	r2, #50	; 0x32
   108c0:	mul	r3, r2, r3
   108c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   108c8:	add	r3, r2, r3
   108cc:	mov	r1, r3
   108d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   108d4:	bl	1063c <strcpy@plt>
   108d8:	ldr	r3, [fp, #-8]
   108dc:	lsl	r3, r3, #2
   108e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   108e4:	add	r3, r2, r3
   108e8:	ldr	r2, [r3]
   108ec:	ldr	r3, [fp, #-16]
   108f0:	cmp	r2, r3
   108f4:	bge	10930 <primeiroUltimo@@Base+0xf0>
   108f8:	ldr	r3, [fp, #-8]
   108fc:	lsl	r3, r3, #2
   10900:	ldr	r2, [fp, #-28]	; 0xffffffe4
   10904:	add	r3, r2, r3
   10908:	ldr	r3, [r3]
   1090c:	str	r3, [fp, #-16]
   10910:	ldr	r3, [fp, #-8]
   10914:	mov	r2, #50	; 0x32
   10918:	mul	r3, r2, r3
   1091c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   10920:	add	r3, r2, r3
   10924:	mov	r1, r3
   10928:	ldr	r0, [fp, #4]
   1092c:	bl	1063c <strcpy@plt>
   10930:	ldr	r3, [fp, #-8]
   10934:	add	r3, r3, #1
   10938:	str	r3, [fp, #-8]
   1093c:	ldr	r2, [fp, #-8]
   10940:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10944:	cmp	r2, r3
   10948:	blt	10880 <primeiroUltimo@@Base+0x40>
   1094c:	nop			; (mov r0, r0)
   10950:	sub	sp, fp, #4
   10954:	pop	{fp, pc}

00010958 <main@@Base>:
   10958:	push	{fp, lr}
   1095c:	add	fp, sp, #4
   10960:	sub	sp, sp, #1200	; 0x4b0
   10964:	sub	r3, fp, #88	; 0x58
   10968:	mov	r2, #80	; 0x50
   1096c:	mov	r1, #0
   10970:	mov	r0, r3
   10974:	bl	10660 <memset@plt>
   10978:	sub	r3, fp, #1072	; 0x430
   1097c:	sub	r3, r3, #4
   10980:	sub	r3, r3, #12
   10984:	mov	r2, #1000	; 0x3e8
   10988:	mov	r1, #0
   1098c:	mov	r0, r3
   10990:	bl	10660 <memset@plt>
   10994:	sub	r3, fp, #1136	; 0x470
   10998:	sub	r3, r3, #4
   1099c:	mov	r2, #50	; 0x32
   109a0:	mov	r1, #0
   109a4:	mov	r0, r3
   109a8:	bl	10660 <memset@plt>
   109ac:	sub	r3, fp, #1184	; 0x4a0
   109b0:	sub	r3, r3, #4
   109b4:	sub	r3, r3, #4
   109b8:	mov	r2, #50	; 0x32
   109bc:	mov	r1, #0
   109c0:	mov	r0, r3
   109c4:	bl	10660 <memset@plt>
   109c8:	sub	r2, fp, #88	; 0x58
   109cc:	sub	r3, fp, #1072	; 0x430
   109d0:	sub	r3, r3, #4
   109d4:	sub	r3, r3, #12
   109d8:	mov	r1, r2
   109dc:	mov	r0, r3
   109e0:	bl	107ac <lerpontuacoes@@Base>
   109e4:	str	r0, [fp, #-8]
   109e8:	sub	r2, fp, #1136	; 0x470
   109ec:	sub	r2, r2, #4
   109f0:	sub	r1, fp, #88	; 0x58
   109f4:	sub	r0, fp, #1072	; 0x430
   109f8:	sub	r0, r0, #4
   109fc:	sub	r0, r0, #12
   10a00:	sub	r3, fp, #1184	; 0x4a0
   10a04:	sub	r3, r3, #4
   10a08:	sub	r3, r3, #4
   10a0c:	str	r3, [sp]
   10a10:	mov	r3, r2
   10a14:	ldr	r2, [fp, #-8]
   10a18:	bl	10840 <primeiroUltimo@@Base>
   10a1c:	ldr	r1, [fp, #-8]
   10a20:	ldr	r0, [pc, #60]	; 10a64 <main@@Base+0x10c>
   10a24:	bl	10630 <printf@plt>
   10a28:	sub	r3, fp, #1136	; 0x470
   10a2c:	sub	r3, r3, #4
   10a30:	mov	r1, r3
   10a34:	ldr	r0, [pc, #44]	; 10a68 <main@@Base+0x110>
   10a38:	bl	10630 <printf@plt>
   10a3c:	sub	r3, fp, #1184	; 0x4a0
   10a40:	sub	r3, r3, #4
   10a44:	sub	r3, r3, #4
   10a48:	mov	r1, r3
   10a4c:	ldr	r0, [pc, #24]	; 10a6c <main@@Base+0x114>
   10a50:	bl	10630 <printf@plt>
   10a54:	mov	r3, #0
   10a58:	mov	r0, r3
   10a5c:	sub	sp, fp, #4
   10a60:	pop	{fp, pc}
   10a64:	andeq	r0, r1, ip, ror #21
   10a68:	andeq	r0, r1, r8, lsl #22
   10a6c:	andeq	r0, r1, r8, lsl fp

00010a70 <__libc_csu_init@@Base>:
   10a70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a74:	mov	r7, r0
   10a78:	ldr	r6, [pc, #72]	; 10ac8 <__libc_csu_init@@Base+0x58>
   10a7c:	ldr	r5, [pc, #72]	; 10acc <__libc_csu_init@@Base+0x5c>
   10a80:	add	r6, pc, r6
   10a84:	add	r5, pc, r5
   10a88:	sub	r6, r6, r5
   10a8c:	mov	r8, r1
   10a90:	mov	r9, r2
   10a94:	bl	10610 <printf@plt-0x20>
   10a98:	asrs	r6, r6, #2
   10a9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aa0:	mov	r4, #0
   10aa4:	add	r4, r4, #1
   10aa8:	ldr	r3, [r5], #4
   10aac:	mov	r2, r9
   10ab0:	mov	r1, r8
   10ab4:	mov	r0, r7
   10ab8:	blx	r3
   10abc:	cmp	r6, r4
   10ac0:	bne	10aa4 <__libc_csu_init@@Base+0x34>
   10ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ac8:	andeq	r0, r1, r8, lsl #9
   10acc:	andeq	r0, r1, r0, lsl #9

00010ad0 <__libc_csu_fini@@Base>:
   10ad0:	bx	lr

Disassembly of section .fini:

00010ad4 <.fini>:
   10ad4:	push	{r3, lr}
   10ad8:	pop	{r3, pc}
