
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_lex>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #56	; 0x38
       c:	str	r0, [fp, #-8]
      10:	str	r1, [fp, #-12]
      14:	ldr	r0, [fp, #-12]
      18:	str	r0, [sp, #24]
      1c:	ldr	r0, [fp, #-8]
      20:	ldr	r1, [sp, #24]
      24:	str	r0, [r1, #92]	; 0x5c
      28:	ldr	r0, [sp, #24]
      2c:	ldr	r0, [r0, #40]	; 0x28
      30:	cmp	r0, #0
      34:	bne	124 <coda_expression_lex+0x124>
      38:	ldr	r0, [sp, #24]
      3c:	movw	r1, #1
      40:	str	r1, [r0, #40]	; 0x28
      44:	ldr	r0, [sp, #24]
      48:	ldr	r0, [r0, #44]	; 0x2c
      4c:	cmp	r0, #0
      50:	bne	60 <coda_expression_lex+0x60>
      54:	ldr	r0, [sp, #24]
      58:	movw	r1, #1
      5c:	str	r1, [r0, #44]	; 0x2c
      60:	ldr	r0, [sp, #24]
      64:	ldr	r0, [r0, #4]
      68:	movw	r1, #0
      6c:	cmp	r0, r1
      70:	bne	88 <coda_expression_lex+0x88>
      74:	movw	r0, #0
      78:	movt	r0, #0
      7c:	ldr	r0, [r0]
      80:	ldr	r1, [sp, #24]
      84:	str	r0, [r1, #4]
      88:	ldr	r0, [sp, #24]
      8c:	ldr	r0, [r0, #8]
      90:	movw	r1, #0
      94:	cmp	r0, r1
      98:	bne	b0 <coda_expression_lex+0xb0>
      9c:	movw	r0, #0
      a0:	movt	r0, #0
      a4:	ldr	r0, [r0]
      a8:	ldr	r1, [sp, #24]
      ac:	str	r0, [r1, #8]
      b0:	ldr	r0, [sp, #24]
      b4:	ldr	r0, [r0, #20]
      b8:	movw	r1, #0
      bc:	cmp	r0, r1
      c0:	beq	e8 <coda_expression_lex+0xe8>
      c4:	ldr	r0, [sp, #24]
      c8:	ldr	r1, [r0, #12]
      cc:	ldr	r0, [r0, #20]
      d0:	add	r0, r0, r1, lsl #2
      d4:	ldr	r0, [r0]
      d8:	movw	r1, #0
      dc:	cmp	r0, r1
      e0:	bne	11c <coda_expression_lex+0x11c>
      e4:	b	ec <coda_expression_lex+0xec>
      e8:	b	ec <coda_expression_lex+0xec>
      ec:	ldr	r0, [fp, #-12]
      f0:	bl	b94 <coda_expression_ensure_buffer_stack>
      f4:	ldr	r0, [sp, #24]
      f8:	ldr	r0, [r0, #4]
      fc:	ldr	r2, [fp, #-12]
     100:	mov	r1, #16384	; 0x4000
     104:	bl	cf0 <coda_expression__create_buffer>
     108:	ldr	r1, [sp, #24]
     10c:	ldr	r2, [r1, #12]
     110:	ldr	r1, [r1, #20]
     114:	add	r1, r1, r2, lsl #2
     118:	str	r0, [r1]
     11c:	ldr	r0, [fp, #-12]
     120:	bl	dac <coda_expression__load_buffer_state>
     124:	b	128 <coda_expression_lex+0x128>
     128:	ldr	r0, [sp, #24]
     12c:	ldr	r0, [r0, #36]	; 0x24
     130:	str	r0, [fp, #-20]	; 0xffffffec
     134:	ldr	r0, [sp, #24]
     138:	ldrb	r0, [r0, #24]
     13c:	ldr	r1, [fp, #-20]	; 0xffffffec
     140:	strb	r0, [r1]
     144:	ldr	r0, [fp, #-20]	; 0xffffffec
     148:	str	r0, [fp, #-24]	; 0xffffffe8
     14c:	ldr	r0, [sp, #24]
     150:	ldr	r0, [r0, #44]	; 0x2c
     154:	str	r0, [fp, #-16]
     158:	b	15c <coda_expression_lex+0x15c>
     15c:	ldr	r0, [fp, #-20]	; 0xffffffec
     160:	ldrb	r0, [r0]
     164:	movw	r1, #0
     168:	movt	r1, #0
     16c:	ldrb	r0, [r1, r0]
     170:	strb	r0, [sp, #23]
     174:	ldr	r0, [fp, #-16]
     178:	movw	r1, #0
     17c:	movt	r1, #0
     180:	add	r0, r1, r0, lsl #1
     184:	ldrsh	r0, [r0]
     188:	cmp	r0, #0
     18c:	beq	1a8 <coda_expression_lex+0x1a8>
     190:	ldr	r0, [fp, #-16]
     194:	ldr	r1, [sp, #24]
     198:	str	r0, [r1, #64]	; 0x40
     19c:	ldr	r0, [fp, #-20]	; 0xffffffec
     1a0:	ldr	r1, [sp, #24]
     1a4:	str	r0, [r1, #68]	; 0x44
     1a8:	b	1ac <coda_expression_lex+0x1ac>
     1ac:	ldr	r0, [fp, #-16]
     1b0:	movw	r1, #0
     1b4:	movt	r1, #0
     1b8:	add	r0, r1, r0, lsl #1
     1bc:	ldrsh	r0, [r0]
     1c0:	ldrb	r1, [sp, #23]
     1c4:	add	r0, r0, r1
     1c8:	movw	r1, #0
     1cc:	movt	r1, #0
     1d0:	add	r0, r1, r0, lsl #1
     1d4:	ldrsh	r0, [r0]
     1d8:	ldr	r1, [fp, #-16]
     1dc:	cmp	r0, r1
     1e0:	beq	228 <coda_expression_lex+0x228>
     1e4:	ldr	r0, [fp, #-16]
     1e8:	movw	r1, #0
     1ec:	movt	r1, #0
     1f0:	add	r0, r1, r0, lsl #1
     1f4:	ldrsh	r0, [r0]
     1f8:	str	r0, [fp, #-16]
     1fc:	ldr	r0, [fp, #-16]
     200:	movw	r1, #274	; 0x112
     204:	cmp	r0, r1
     208:	blt	224 <coda_expression_lex+0x224>
     20c:	ldrb	r0, [sp, #23]
     210:	movw	r1, #0
     214:	movt	r1, #0
     218:	add	r0, r1, r0
     21c:	ldrb	r0, [r0]
     220:	strb	r0, [sp, #23]
     224:	b	1ac <coda_expression_lex+0x1ac>
     228:	ldr	r0, [fp, #-16]
     22c:	movw	r1, #0
     230:	movt	r1, #0
     234:	add	r0, r1, r0, lsl #1
     238:	ldrsh	r0, [r0]
     23c:	ldrb	r1, [sp, #23]
     240:	add	r0, r0, r1
     244:	movw	r1, #0
     248:	movt	r1, #0
     24c:	add	r0, r1, r0, lsl #1
     250:	ldrsh	r0, [r0]
     254:	str	r0, [fp, #-16]
     258:	ldr	r0, [fp, #-20]	; 0xffffffec
     25c:	add	r0, r0, #1
     260:	str	r0, [fp, #-20]	; 0xffffffec
     264:	ldr	r0, [fp, #-16]
     268:	movw	r1, #0
     26c:	movt	r1, #0
     270:	add	r0, r1, r0, lsl #1
     274:	ldrsh	r0, [r0]
     278:	movw	r1, #307	; 0x133
     27c:	cmp	r0, r1
     280:	bne	15c <coda_expression_lex+0x15c>
     284:	b	288 <coda_expression_lex+0x288>
     288:	ldr	r0, [fp, #-16]
     28c:	movw	r1, #0
     290:	movt	r1, #0
     294:	add	r0, r1, r0, lsl #1
     298:	ldrsh	r0, [r0]
     29c:	str	r0, [sp, #28]
     2a0:	ldr	r0, [sp, #28]
     2a4:	cmp	r0, #0
     2a8:	bne	2dc <coda_expression_lex+0x2dc>
     2ac:	ldr	r0, [sp, #24]
     2b0:	ldr	r0, [r0, #68]	; 0x44
     2b4:	str	r0, [fp, #-20]	; 0xffffffec
     2b8:	ldr	r0, [sp, #24]
     2bc:	ldr	r0, [r0, #64]	; 0x40
     2c0:	str	r0, [fp, #-16]
     2c4:	ldr	r0, [fp, #-16]
     2c8:	movw	r1, #0
     2cc:	movt	r1, #0
     2d0:	add	r0, r1, r0, lsl #1
     2d4:	ldrsh	r0, [r0]
     2d8:	str	r0, [sp, #28]
     2dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     2e0:	ldr	r1, [sp, #24]
     2e4:	str	r0, [r1, #80]	; 0x50
     2e8:	ldr	r0, [fp, #-20]	; 0xffffffec
     2ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
     2f0:	sub	r0, r0, r1
     2f4:	ldr	r1, [sp, #24]
     2f8:	str	r0, [r1, #32]
     2fc:	ldr	r0, [fp, #-20]	; 0xffffffec
     300:	ldrb	r0, [r0]
     304:	ldr	r1, [sp, #24]
     308:	strb	r0, [r1, #24]
     30c:	ldr	r0, [fp, #-20]	; 0xffffffec
     310:	movw	r1, #0
     314:	strb	r1, [r0]
     318:	ldr	r0, [fp, #-20]	; 0xffffffec
     31c:	ldr	r1, [sp, #24]
     320:	str	r0, [r1, #36]	; 0x24
     324:	ldr	r0, [sp, #28]
     328:	cmp	r0, #76	; 0x4c
     32c:	str	r0, [sp, #8]
     330:	bhi	b74 <coda_expression_lex+0xb74>
     334:	add	r0, pc, #8
     338:	ldr	r1, [sp, #8]
     33c:	ldr	r0, [r0, r1, lsl #2]
     340:	mov	pc, r0
     344:	.word	0x00000478
     348:	.word	0x000004a4
     34c:	.word	0x00000518
     350:	.word	0x00000524
     354:	.word	0x00000530
     358:	.word	0x0000053c
     35c:	.word	0x00000548
     360:	.word	0x00000554
     364:	.word	0x00000560
     368:	.word	0x0000056c
     36c:	.word	0x00000578
     370:	.word	0x00000584
     374:	.word	0x00000590
     378:	.word	0x0000059c
     37c:	.word	0x000005a8
     380:	.word	0x000005b4
     384:	.word	0x000005c0
     388:	.word	0x000005cc
     38c:	.word	0x000005d8
     390:	.word	0x000005e4
     394:	.word	0x000005f0
     398:	.word	0x000005fc
     39c:	.word	0x00000608
     3a0:	.word	0x00000614
     3a4:	.word	0x00000620
     3a8:	.word	0x0000062c
     3ac:	.word	0x00000638
     3b0:	.word	0x00000644
     3b4:	.word	0x00000650
     3b8:	.word	0x0000065c
     3bc:	.word	0x00000668
     3c0:	.word	0x00000674
     3c4:	.word	0x00000680
     3c8:	.word	0x0000068c
     3cc:	.word	0x00000698
     3d0:	.word	0x000006a4
     3d4:	.word	0x000006b0
     3d8:	.word	0x000006bc
     3dc:	.word	0x000006c8
     3e0:	.word	0x000006d4
     3e4:	.word	0x000006e0
     3e8:	.word	0x000006ec
     3ec:	.word	0x000006f8
     3f0:	.word	0x00000704
     3f4:	.word	0x00000710
     3f8:	.word	0x0000071c
     3fc:	.word	0x00000728
     400:	.word	0x00000734
     404:	.word	0x00000740
     408:	.word	0x0000074c
     40c:	.word	0x00000758
     410:	.word	0x00000764
     414:	.word	0x00000770
     418:	.word	0x0000077c
     41c:	.word	0x00000788
     420:	.word	0x00000794
     424:	.word	0x000007a0
     428:	.word	0x000007ac
     42c:	.word	0x000007b8
     430:	.word	0x000007c4
     434:	.word	0x000007d0
     438:	.word	0x000007dc
     43c:	.word	0x000007e8
     440:	.word	0x000007f4
     444:	.word	0x00000800
     448:	.word	0x0000080c
     44c:	.word	0x00000818
     450:	.word	0x00000824
     454:	.word	0x00000830
     458:	.word	0x00000854
     45c:	.word	0x00000878
     460:	.word	0x0000089c
     464:	.word	0x000008c0
     468:	.word	0x000008c4
     46c:	.word	0x000008d8
     470:	.word	0x0000091c
     474:	.word	0x00000910
     478:	ldr	r0, [sp, #24]
     47c:	ldrb	r0, [r0, #24]
     480:	ldr	r1, [fp, #-20]	; 0xffffffec
     484:	strb	r0, [r1]
     488:	ldr	r0, [sp, #24]
     48c:	ldr	r0, [r0, #68]	; 0x44
     490:	str	r0, [fp, #-20]	; 0xffffffec
     494:	ldr	r0, [sp, #24]
     498:	ldr	r0, [r0, #64]	; 0x40
     49c:	str	r0, [fp, #-16]
     4a0:	b	288 <coda_expression_lex+0x288>
     4a4:	ldr	r0, [sp, #24]
     4a8:	ldr	r0, [r0, #32]
     4ac:	sub	r0, r0, #1
     4b0:	bl	0 <malloc>
     4b4:	ldr	lr, [sp, #24]
     4b8:	ldr	lr, [lr, #92]	; 0x5c
     4bc:	str	r0, [lr]
     4c0:	ldr	r0, [sp, #24]
     4c4:	ldr	r0, [r0, #92]	; 0x5c
     4c8:	ldr	r0, [r0]
     4cc:	ldr	lr, [sp, #24]
     4d0:	ldr	lr, [lr, #80]	; 0x50
     4d4:	add	r1, lr, #1
     4d8:	ldr	lr, [sp, #24]
     4dc:	ldr	lr, [lr, #32]
     4e0:	sub	r2, lr, #2
     4e4:	bl	0 <memcpy>
     4e8:	ldr	r0, [sp, #24]
     4ec:	ldr	r0, [r0, #92]	; 0x5c
     4f0:	ldr	r0, [r0]
     4f4:	ldr	r1, [sp, #24]
     4f8:	ldr	r1, [r1, #32]
     4fc:	sub	r1, r1, #2
     500:	add	r0, r0, r1
     504:	movw	r1, #0
     508:	strb	r1, [r0]
     50c:	movw	r0, #260	; 0x104
     510:	str	r0, [fp, #-4]
     514:	b	b88 <coda_expression_lex+0xb88>
     518:	movw	r0, #266	; 0x10a
     51c:	str	r0, [fp, #-4]
     520:	b	b88 <coda_expression_lex+0xb88>
     524:	movw	r0, #267	; 0x10b
     528:	str	r0, [fp, #-4]
     52c:	b	b88 <coda_expression_lex+0xb88>
     530:	movw	r0, #268	; 0x10c
     534:	str	r0, [fp, #-4]
     538:	b	b88 <coda_expression_lex+0xb88>
     53c:	movw	r0, #269	; 0x10d
     540:	str	r0, [fp, #-4]
     544:	b	b88 <coda_expression_lex+0xb88>
     548:	movw	r0, #270	; 0x10e
     54c:	str	r0, [fp, #-4]
     550:	b	b88 <coda_expression_lex+0xb88>
     554:	movw	r0, #271	; 0x10f
     558:	str	r0, [fp, #-4]
     55c:	b	b88 <coda_expression_lex+0xb88>
     560:	movw	r0, #263	; 0x107
     564:	str	r0, [fp, #-4]
     568:	b	b88 <coda_expression_lex+0xb88>
     56c:	movw	r0, #264	; 0x108
     570:	str	r0, [fp, #-4]
     574:	b	b88 <coda_expression_lex+0xb88>
     578:	movw	r0, #265	; 0x109
     57c:	str	r0, [fp, #-4]
     580:	b	b88 <coda_expression_lex+0xb88>
     584:	movw	r0, #273	; 0x111
     588:	str	r0, [fp, #-4]
     58c:	b	b88 <coda_expression_lex+0xb88>
     590:	movw	r0, #274	; 0x112
     594:	str	r0, [fp, #-4]
     598:	b	b88 <coda_expression_lex+0xb88>
     59c:	movw	r0, #275	; 0x113
     5a0:	str	r0, [fp, #-4]
     5a4:	b	b88 <coda_expression_lex+0xb88>
     5a8:	movw	r0, #276	; 0x114
     5ac:	str	r0, [fp, #-4]
     5b0:	b	b88 <coda_expression_lex+0xb88>
     5b4:	movw	r0, #277	; 0x115
     5b8:	str	r0, [fp, #-4]
     5bc:	b	b88 <coda_expression_lex+0xb88>
     5c0:	movw	r0, #278	; 0x116
     5c4:	str	r0, [fp, #-4]
     5c8:	b	b88 <coda_expression_lex+0xb88>
     5cc:	movw	r0, #279	; 0x117
     5d0:	str	r0, [fp, #-4]
     5d4:	b	b88 <coda_expression_lex+0xb88>
     5d8:	movw	r0, #280	; 0x118
     5dc:	str	r0, [fp, #-4]
     5e0:	b	b88 <coda_expression_lex+0xb88>
     5e4:	movw	r0, #281	; 0x119
     5e8:	str	r0, [fp, #-4]
     5ec:	b	b88 <coda_expression_lex+0xb88>
     5f0:	movw	r0, #282	; 0x11a
     5f4:	str	r0, [fp, #-4]
     5f8:	b	b88 <coda_expression_lex+0xb88>
     5fc:	movw	r0, #283	; 0x11b
     600:	str	r0, [fp, #-4]
     604:	b	b88 <coda_expression_lex+0xb88>
     608:	movw	r0, #284	; 0x11c
     60c:	str	r0, [fp, #-4]
     610:	b	b88 <coda_expression_lex+0xb88>
     614:	movw	r0, #285	; 0x11d
     618:	str	r0, [fp, #-4]
     61c:	b	b88 <coda_expression_lex+0xb88>
     620:	movw	r0, #286	; 0x11e
     624:	str	r0, [fp, #-4]
     628:	b	b88 <coda_expression_lex+0xb88>
     62c:	movw	r0, #287	; 0x11f
     630:	str	r0, [fp, #-4]
     634:	b	b88 <coda_expression_lex+0xb88>
     638:	movw	r0, #288	; 0x120
     63c:	str	r0, [fp, #-4]
     640:	b	b88 <coda_expression_lex+0xb88>
     644:	movw	r0, #289	; 0x121
     648:	str	r0, [fp, #-4]
     64c:	b	b88 <coda_expression_lex+0xb88>
     650:	movw	r0, #290	; 0x122
     654:	str	r0, [fp, #-4]
     658:	b	b88 <coda_expression_lex+0xb88>
     65c:	movw	r0, #291	; 0x123
     660:	str	r0, [fp, #-4]
     664:	b	b88 <coda_expression_lex+0xb88>
     668:	movw	r0, #292	; 0x124
     66c:	str	r0, [fp, #-4]
     670:	b	b88 <coda_expression_lex+0xb88>
     674:	movw	r0, #293	; 0x125
     678:	str	r0, [fp, #-4]
     67c:	b	b88 <coda_expression_lex+0xb88>
     680:	movw	r0, #294	; 0x126
     684:	str	r0, [fp, #-4]
     688:	b	b88 <coda_expression_lex+0xb88>
     68c:	movw	r0, #295	; 0x127
     690:	str	r0, [fp, #-4]
     694:	b	b88 <coda_expression_lex+0xb88>
     698:	movw	r0, #296	; 0x128
     69c:	str	r0, [fp, #-4]
     6a0:	b	b88 <coda_expression_lex+0xb88>
     6a4:	movw	r0, #297	; 0x129
     6a8:	str	r0, [fp, #-4]
     6ac:	b	b88 <coda_expression_lex+0xb88>
     6b0:	movw	r0, #298	; 0x12a
     6b4:	str	r0, [fp, #-4]
     6b8:	b	b88 <coda_expression_lex+0xb88>
     6bc:	movw	r0, #299	; 0x12b
     6c0:	str	r0, [fp, #-4]
     6c4:	b	b88 <coda_expression_lex+0xb88>
     6c8:	movw	r0, #300	; 0x12c
     6cc:	str	r0, [fp, #-4]
     6d0:	b	b88 <coda_expression_lex+0xb88>
     6d4:	movw	r0, #301	; 0x12d
     6d8:	str	r0, [fp, #-4]
     6dc:	b	b88 <coda_expression_lex+0xb88>
     6e0:	movw	r0, #302	; 0x12e
     6e4:	str	r0, [fp, #-4]
     6e8:	b	b88 <coda_expression_lex+0xb88>
     6ec:	movw	r0, #303	; 0x12f
     6f0:	str	r0, [fp, #-4]
     6f4:	b	b88 <coda_expression_lex+0xb88>
     6f8:	movw	r0, #304	; 0x130
     6fc:	str	r0, [fp, #-4]
     700:	b	b88 <coda_expression_lex+0xb88>
     704:	movw	r0, #305	; 0x131
     708:	str	r0, [fp, #-4]
     70c:	b	b88 <coda_expression_lex+0xb88>
     710:	movw	r0, #306	; 0x132
     714:	str	r0, [fp, #-4]
     718:	b	b88 <coda_expression_lex+0xb88>
     71c:	movw	r0, #307	; 0x133
     720:	str	r0, [fp, #-4]
     724:	b	b88 <coda_expression_lex+0xb88>
     728:	movw	r0, #308	; 0x134
     72c:	str	r0, [fp, #-4]
     730:	b	b88 <coda_expression_lex+0xb88>
     734:	movw	r0, #309	; 0x135
     738:	str	r0, [fp, #-4]
     73c:	b	b88 <coda_expression_lex+0xb88>
     740:	movw	r0, #310	; 0x136
     744:	str	r0, [fp, #-4]
     748:	b	b88 <coda_expression_lex+0xb88>
     74c:	movw	r0, #311	; 0x137
     750:	str	r0, [fp, #-4]
     754:	b	b88 <coda_expression_lex+0xb88>
     758:	movw	r0, #312	; 0x138
     75c:	str	r0, [fp, #-4]
     760:	b	b88 <coda_expression_lex+0xb88>
     764:	movw	r0, #313	; 0x139
     768:	str	r0, [fp, #-4]
     76c:	b	b88 <coda_expression_lex+0xb88>
     770:	movw	r0, #314	; 0x13a
     774:	str	r0, [fp, #-4]
     778:	b	b88 <coda_expression_lex+0xb88>
     77c:	movw	r0, #315	; 0x13b
     780:	str	r0, [fp, #-4]
     784:	b	b88 <coda_expression_lex+0xb88>
     788:	movw	r0, #316	; 0x13c
     78c:	str	r0, [fp, #-4]
     790:	b	b88 <coda_expression_lex+0xb88>
     794:	movw	r0, #317	; 0x13d
     798:	str	r0, [fp, #-4]
     79c:	b	b88 <coda_expression_lex+0xb88>
     7a0:	movw	r0, #318	; 0x13e
     7a4:	str	r0, [fp, #-4]
     7a8:	b	b88 <coda_expression_lex+0xb88>
     7ac:	movw	r0, #319	; 0x13f
     7b0:	str	r0, [fp, #-4]
     7b4:	b	b88 <coda_expression_lex+0xb88>
     7b8:	movw	r0, #320	; 0x140
     7bc:	str	r0, [fp, #-4]
     7c0:	b	b88 <coda_expression_lex+0xb88>
     7c4:	movw	r0, #321	; 0x141
     7c8:	str	r0, [fp, #-4]
     7cc:	b	b88 <coda_expression_lex+0xb88>
     7d0:	movw	r0, #322	; 0x142
     7d4:	str	r0, [fp, #-4]
     7d8:	b	b88 <coda_expression_lex+0xb88>
     7dc:	movw	r0, #323	; 0x143
     7e0:	str	r0, [fp, #-4]
     7e4:	b	b88 <coda_expression_lex+0xb88>
     7e8:	movw	r0, #324	; 0x144
     7ec:	str	r0, [fp, #-4]
     7f0:	b	b88 <coda_expression_lex+0xb88>
     7f4:	movw	r0, #325	; 0x145
     7f8:	str	r0, [fp, #-4]
     7fc:	b	b88 <coda_expression_lex+0xb88>
     800:	movw	r0, #326	; 0x146
     804:	str	r0, [fp, #-4]
     808:	b	b88 <coda_expression_lex+0xb88>
     80c:	movw	r0, #327	; 0x147
     810:	str	r0, [fp, #-4]
     814:	b	b88 <coda_expression_lex+0xb88>
     818:	movw	r0, #328	; 0x148
     81c:	str	r0, [fp, #-4]
     820:	b	b88 <coda_expression_lex+0xb88>
     824:	movw	r0, #329	; 0x149
     828:	str	r0, [fp, #-4]
     82c:	b	b88 <coda_expression_lex+0xb88>
     830:	ldr	r0, [sp, #24]
     834:	ldr	r0, [r0, #80]	; 0x50
     838:	bl	0 <strdup>
     83c:	ldr	lr, [sp, #24]
     840:	ldr	lr, [lr, #92]	; 0x5c
     844:	str	r0, [lr]
     848:	movw	r0, #262	; 0x106
     84c:	str	r0, [fp, #-4]
     850:	b	b88 <coda_expression_lex+0xb88>
     854:	ldr	r0, [sp, #24]
     858:	ldr	r0, [r0, #80]	; 0x50
     85c:	bl	0 <strdup>
     860:	ldr	lr, [sp, #24]
     864:	ldr	lr, [lr, #92]	; 0x5c
     868:	str	r0, [lr]
     86c:	movw	r0, #261	; 0x105
     870:	str	r0, [fp, #-4]
     874:	b	b88 <coda_expression_lex+0xb88>
     878:	ldr	r0, [sp, #24]
     87c:	ldr	r0, [r0, #80]	; 0x50
     880:	bl	0 <strdup>
     884:	ldr	lr, [sp, #24]
     888:	ldr	lr, [lr, #92]	; 0x5c
     88c:	str	r0, [lr]
     890:	movw	r0, #258	; 0x102
     894:	str	r0, [fp, #-4]
     898:	b	b88 <coda_expression_lex+0xb88>
     89c:	ldr	r0, [sp, #24]
     8a0:	ldr	r0, [r0, #80]	; 0x50
     8a4:	bl	0 <strdup>
     8a8:	ldr	lr, [sp, #24]
     8ac:	ldr	lr, [lr, #92]	; 0x5c
     8b0:	str	r0, [lr]
     8b4:	movw	r0, #259	; 0x103
     8b8:	str	r0, [fp, #-4]
     8bc:	b	b88 <coda_expression_lex+0xb88>
     8c0:	b	b84 <coda_expression_lex+0xb84>
     8c4:	ldr	r0, [sp, #24]
     8c8:	ldr	r0, [r0, #80]	; 0x50
     8cc:	ldrb	r0, [r0]
     8d0:	str	r0, [fp, #-4]
     8d4:	b	b88 <coda_expression_lex+0xb88>
     8d8:	b	8dc <coda_expression_lex+0x8dc>
     8dc:	ldr	r0, [sp, #24]
     8e0:	ldr	r0, [r0, #80]	; 0x50
     8e4:	ldr	r1, [sp, #24]
     8e8:	ldr	r1, [r1, #32]
     8ec:	ldr	r2, [sp, #24]
     8f0:	ldr	r3, [r2, #8]
     8f4:	movw	r2, #1
     8f8:	bl	0 <fwrite>
     8fc:	cmp	r0, #0
     900:	beq	908 <coda_expression_lex+0x908>
     904:	b	908 <coda_expression_lex+0x908>
     908:	b	90c <coda_expression_lex+0x90c>
     90c:	b	b84 <coda_expression_lex+0xb84>
     910:	movw	r0, #0
     914:	str	r0, [fp, #-4]
     918:	b	b88 <coda_expression_lex+0xb88>
     91c:	ldr	r0, [fp, #-20]	; 0xffffffec
     920:	ldr	r1, [sp, #24]
     924:	ldr	r1, [r1, #80]	; 0x50
     928:	sub	r0, r0, r1
     92c:	sub	r0, r0, #1
     930:	str	r0, [sp, #16]
     934:	ldr	r0, [sp, #24]
     938:	ldrb	r0, [r0, #24]
     93c:	ldr	r1, [fp, #-20]	; 0xffffffec
     940:	strb	r0, [r1]
     944:	ldr	r0, [sp, #24]
     948:	ldr	r1, [r0, #12]
     94c:	ldr	r0, [r0, #20]
     950:	add	r0, r0, r1, lsl #2
     954:	ldr	r0, [r0]
     958:	ldr	r0, [r0, #44]	; 0x2c
     95c:	cmp	r0, #0
     960:	bne	9b0 <coda_expression_lex+0x9b0>
     964:	ldr	r0, [sp, #24]
     968:	ldr	r1, [r0, #12]
     96c:	ldr	r2, [r0, #20]
     970:	ldr	r1, [r2, r1, lsl #2]
     974:	ldr	r1, [r1, #16]
     978:	str	r1, [r0, #28]
     97c:	ldr	r0, [sp, #24]
     980:	ldr	r1, [r0, #4]
     984:	ldr	r2, [r0, #12]
     988:	ldr	r0, [r0, #20]
     98c:	ldr	r0, [r0, r2, lsl #2]
     990:	str	r1, [r0]
     994:	ldr	r0, [sp, #24]
     998:	ldr	r1, [r0, #12]
     99c:	ldr	r0, [r0, #20]
     9a0:	add	r0, r0, r1, lsl #2
     9a4:	ldr	r0, [r0]
     9a8:	movw	r1, #1
     9ac:	str	r1, [r0, #44]	; 0x2c
     9b0:	ldr	r0, [sp, #24]
     9b4:	ldr	r1, [r0, #12]
     9b8:	ldr	r2, [r0, #20]
     9bc:	ldr	r0, [r0, #36]	; 0x24
     9c0:	add	r1, r2, r1, lsl #2
     9c4:	ldr	r1, [r1]
     9c8:	ldr	r1, [r1, #4]
     9cc:	ldr	r2, [sp, #24]
     9d0:	ldr	r2, [r2, #28]
     9d4:	add	r1, r1, r2
     9d8:	cmp	r0, r1
     9dc:	bhi	a5c <coda_expression_lex+0xa5c>
     9e0:	ldr	r0, [sp, #24]
     9e4:	ldr	r0, [r0, #80]	; 0x50
     9e8:	ldr	r1, [sp, #16]
     9ec:	add	r0, r0, r1
     9f0:	ldr	r1, [sp, #24]
     9f4:	str	r0, [r1, #36]	; 0x24
     9f8:	ldr	r0, [fp, #-12]
     9fc:	bl	e30 <yy_get_previous_state>
     a00:	str	r0, [fp, #-16]
     a04:	ldr	r0, [fp, #-16]
     a08:	ldr	r1, [fp, #-12]
     a0c:	bl	fb0 <yy_try_NUL_trans>
     a10:	str	r0, [sp, #12]
     a14:	ldr	r0, [sp, #24]
     a18:	ldr	r0, [r0, #80]	; 0x50
     a1c:	str	r0, [fp, #-24]	; 0xffffffe8
     a20:	ldr	r0, [sp, #12]
     a24:	cmp	r0, #0
     a28:	beq	a4c <coda_expression_lex+0xa4c>
     a2c:	ldr	r0, [sp, #24]
     a30:	ldr	r1, [r0, #36]	; 0x24
     a34:	add	r1, r1, #1
     a38:	str	r1, [r0, #36]	; 0x24
     a3c:	str	r1, [fp, #-20]	; 0xffffffec
     a40:	ldr	r0, [sp, #12]
     a44:	str	r0, [fp, #-16]
     a48:	b	158 <coda_expression_lex+0x158>
     a4c:	ldr	r0, [sp, #24]
     a50:	ldr	r0, [r0, #36]	; 0x24
     a54:	str	r0, [fp, #-20]	; 0xffffffec
     a58:	b	288 <coda_expression_lex+0x288>
     a5c:	ldr	r0, [fp, #-12]
     a60:	bl	1104 <yy_get_next_buffer>
     a64:	mov	lr, r0
     a68:	cmp	r0, #0
     a6c:	str	lr, [sp, #4]
     a70:	beq	ad8 <coda_expression_lex+0xad8>
     a74:	b	a78 <coda_expression_lex+0xa78>
     a78:	ldr	r0, [sp, #4]
     a7c:	cmp	r0, #1
     a80:	beq	a98 <coda_expression_lex+0xa98>
     a84:	b	a88 <coda_expression_lex+0xa88>
     a88:	ldr	r0, [sp, #4]
     a8c:	cmp	r0, #2
     a90:	beq	b18 <coda_expression_lex+0xb18>
     a94:	b	b6c <coda_expression_lex+0xb6c>
     a98:	ldr	r0, [sp, #24]
     a9c:	movw	r1, #0
     aa0:	str	r1, [r0, #48]	; 0x30
     aa4:	ldr	r0, [sp, #24]
     aa8:	ldr	r0, [r0, #80]	; 0x50
     aac:	ldr	r1, [sp, #24]
     ab0:	str	r0, [r1, #36]	; 0x24
     ab4:	ldr	r0, [sp, #24]
     ab8:	ldr	r0, [r0, #44]	; 0x2c
     abc:	sub	r0, r0, #1
     ac0:	movw	r1, #2
     ac4:	sdiv	r0, r0, r1
     ac8:	add	r0, r0, #75	; 0x4b
     acc:	add	r0, r0, #1
     ad0:	str	r0, [sp, #28]
     ad4:	b	324 <coda_expression_lex+0x324>
     ad8:	ldr	r0, [sp, #24]
     adc:	ldr	r0, [r0, #80]	; 0x50
     ae0:	ldr	r1, [sp, #16]
     ae4:	add	r0, r0, r1
     ae8:	ldr	r1, [sp, #24]
     aec:	str	r0, [r1, #36]	; 0x24
     af0:	ldr	r0, [fp, #-12]
     af4:	bl	e30 <yy_get_previous_state>
     af8:	str	r0, [fp, #-16]
     afc:	ldr	r0, [sp, #24]
     b00:	ldr	r0, [r0, #36]	; 0x24
     b04:	str	r0, [fp, #-20]	; 0xffffffec
     b08:	ldr	r0, [sp, #24]
     b0c:	ldr	r0, [r0, #80]	; 0x50
     b10:	str	r0, [fp, #-24]	; 0xffffffe8
     b14:	b	158 <coda_expression_lex+0x158>
     b18:	ldr	r0, [sp, #24]
     b1c:	ldr	r1, [r0, #12]
     b20:	ldr	r0, [r0, #20]
     b24:	add	r0, r0, r1, lsl #2
     b28:	ldr	r0, [r0]
     b2c:	ldr	r0, [r0, #4]
     b30:	ldr	r1, [sp, #24]
     b34:	ldr	r1, [r1, #28]
     b38:	add	r0, r0, r1
     b3c:	ldr	r1, [sp, #24]
     b40:	str	r0, [r1, #36]	; 0x24
     b44:	ldr	r0, [fp, #-12]
     b48:	bl	e30 <yy_get_previous_state>
     b4c:	str	r0, [fp, #-16]
     b50:	ldr	r0, [sp, #24]
     b54:	ldr	r0, [r0, #36]	; 0x24
     b58:	str	r0, [fp, #-20]	; 0xffffffec
     b5c:	ldr	r0, [sp, #24]
     b60:	ldr	r0, [r0, #80]	; 0x50
     b64:	str	r0, [fp, #-24]	; 0xffffffe8
     b68:	b	288 <coda_expression_lex+0x288>
     b6c:	b	b70 <coda_expression_lex+0xb70>
     b70:	b	b84 <coda_expression_lex+0xb84>
     b74:	ldr	r1, [fp, #-12]
     b78:	movw	r0, #0
     b7c:	movt	r0, #0
     b80:	bl	17e4 <yy_fatal_error>
     b84:	b	128 <coda_expression_lex+0x128>
     b88:	ldr	r0, [fp, #-4]
     b8c:	mov	sp, fp
     b90:	pop	{fp, pc}

00000b94 <coda_expression_ensure_buffer_stack>:
     b94:	push	{fp, lr}
     b98:	mov	fp, sp
     b9c:	sub	sp, sp, #16
     ba0:	str	r0, [fp, #-4]
     ba4:	ldr	r0, [fp, #-4]
     ba8:	str	r0, [sp, #4]
     bac:	ldr	r0, [sp, #4]
     bb0:	ldr	r0, [r0, #20]
     bb4:	movw	r1, #0
     bb8:	cmp	r0, r1
     bbc:	bne	c3c <coda_expression_ensure_buffer_stack+0xa8>
     bc0:	mov	r0, #1
     bc4:	str	r0, [sp, #8]
     bc8:	ldr	r0, [sp, #8]
     bcc:	lsl	r0, r0, #2
     bd0:	ldr	r1, [fp, #-4]
     bd4:	bl	1b1c <coda_expression_alloc>
     bd8:	ldr	r1, [sp, #4]
     bdc:	str	r0, [r1, #20]
     be0:	ldr	r0, [sp, #4]
     be4:	ldr	r0, [r0, #20]
     be8:	movw	r1, #0
     bec:	cmp	r0, r1
     bf0:	bne	c04 <coda_expression_ensure_buffer_stack+0x70>
     bf4:	ldr	r1, [fp, #-4]
     bf8:	movw	r0, #0
     bfc:	movt	r0, #0
     c00:	bl	17e4 <yy_fatal_error>
     c04:	ldr	r0, [sp, #4]
     c08:	ldr	r0, [r0, #20]
     c0c:	ldr	r1, [sp, #8]
     c10:	lsl	r2, r1, #2
     c14:	movw	r1, #0
     c18:	and	r1, r1, #255	; 0xff
     c1c:	bl	0 <memset>
     c20:	ldr	r0, [sp, #8]
     c24:	ldr	r1, [sp, #4]
     c28:	str	r0, [r1, #16]
     c2c:	ldr	r0, [sp, #4]
     c30:	movw	r1, #0
     c34:	str	r1, [r0, #12]
     c38:	b	ce8 <coda_expression_ensure_buffer_stack+0x154>
     c3c:	ldr	r0, [sp, #4]
     c40:	ldr	r0, [r0, #12]
     c44:	ldr	r1, [sp, #4]
     c48:	ldr	r1, [r1, #16]
     c4c:	sub	r1, r1, #1
     c50:	cmp	r0, r1
     c54:	bcc	ce8 <coda_expression_ensure_buffer_stack+0x154>
     c58:	mov	r0, #8
     c5c:	str	r0, [sp]
     c60:	ldr	r0, [sp, #4]
     c64:	ldr	r0, [r0, #16]
     c68:	ldr	r1, [sp]
     c6c:	add	r0, r0, r1
     c70:	str	r0, [sp, #8]
     c74:	ldr	r0, [sp, #4]
     c78:	ldr	r0, [r0, #20]
     c7c:	ldr	r1, [sp, #8]
     c80:	lsl	r1, r1, #2
     c84:	ldr	r2, [fp, #-4]
     c88:	bl	28fc <coda_expression_realloc>
     c8c:	ldr	r1, [sp, #4]
     c90:	str	r0, [r1, #20]
     c94:	ldr	r0, [sp, #4]
     c98:	ldr	r0, [r0, #20]
     c9c:	movw	r1, #0
     ca0:	cmp	r0, r1
     ca4:	bne	cb8 <coda_expression_ensure_buffer_stack+0x124>
     ca8:	ldr	r1, [fp, #-4]
     cac:	movw	r0, #0
     cb0:	movt	r0, #0
     cb4:	bl	17e4 <yy_fatal_error>
     cb8:	ldr	r0, [sp, #4]
     cbc:	ldr	r1, [r0, #16]
     cc0:	ldr	r0, [r0, #20]
     cc4:	add	r0, r0, r1, lsl #2
     cc8:	ldr	r1, [sp]
     ccc:	lsl	r2, r1, #2
     cd0:	movw	r1, #0
     cd4:	and	r1, r1, #255	; 0xff
     cd8:	bl	0 <memset>
     cdc:	ldr	r0, [sp, #8]
     ce0:	ldr	r1, [sp, #4]
     ce4:	str	r0, [r1, #16]
     ce8:	mov	sp, fp
     cec:	pop	{fp, pc}

00000cf0 <coda_expression__create_buffer>:
     cf0:	push	{fp, lr}
     cf4:	mov	fp, sp
     cf8:	sub	sp, sp, #16
     cfc:	str	r0, [fp, #-4]
     d00:	str	r1, [sp, #8]
     d04:	str	r2, [sp, #4]
     d08:	ldr	r1, [sp, #4]
     d0c:	movw	r0, #48	; 0x30
     d10:	bl	1b1c <coda_expression_alloc>
     d14:	str	r0, [sp]
     d18:	ldr	r0, [sp]
     d1c:	movw	r1, #0
     d20:	cmp	r0, r1
     d24:	bne	d38 <coda_expression__create_buffer+0x48>
     d28:	ldr	r1, [sp, #4]
     d2c:	movw	r0, #0
     d30:	movt	r0, #0
     d34:	bl	17e4 <yy_fatal_error>
     d38:	ldr	r0, [sp, #8]
     d3c:	ldr	r1, [sp]
     d40:	str	r0, [r1, #12]
     d44:	ldr	r0, [sp]
     d48:	ldr	r0, [r0, #12]
     d4c:	add	r0, r0, #2
     d50:	ldr	r1, [sp, #4]
     d54:	bl	1b1c <coda_expression_alloc>
     d58:	ldr	r1, [sp]
     d5c:	str	r0, [r1, #4]
     d60:	ldr	r0, [sp]
     d64:	ldr	r0, [r0, #4]
     d68:	movw	r1, #0
     d6c:	cmp	r0, r1
     d70:	bne	d84 <coda_expression__create_buffer+0x94>
     d74:	ldr	r1, [sp, #4]
     d78:	movw	r0, #0
     d7c:	movt	r0, #0
     d80:	bl	17e4 <yy_fatal_error>
     d84:	ldr	r0, [sp]
     d88:	movw	r1, #1
     d8c:	str	r1, [r0, #20]
     d90:	ldr	r0, [sp]
     d94:	ldr	r1, [fp, #-4]
     d98:	ldr	r2, [sp, #4]
     d9c:	bl	1910 <coda_expression__init_buffer>
     da0:	ldr	r0, [sp]
     da4:	mov	sp, fp
     da8:	pop	{fp, pc}

00000dac <coda_expression__load_buffer_state>:
     dac:	sub	sp, sp, #8
     db0:	str	r0, [sp, #4]
     db4:	ldr	r0, [sp, #4]
     db8:	str	r0, [sp]
     dbc:	ldr	r0, [sp]
     dc0:	ldr	r1, [r0, #12]
     dc4:	ldr	r2, [r0, #20]
     dc8:	ldr	r1, [r2, r1, lsl #2]
     dcc:	ldr	r1, [r1, #16]
     dd0:	str	r1, [r0, #28]
     dd4:	ldr	r0, [sp]
     dd8:	ldr	r1, [r0, #12]
     ddc:	ldr	r2, [r0, #20]
     de0:	ldr	r1, [r2, r1, lsl #2]
     de4:	ldr	r1, [r1, #8]
     de8:	str	r1, [r0, #36]	; 0x24
     dec:	ldr	r0, [sp]
     df0:	str	r1, [r0, #80]	; 0x50
     df4:	ldr	r0, [sp]
     df8:	ldr	r1, [r0, #12]
     dfc:	ldr	r0, [r0, #20]
     e00:	add	r0, r0, r1, lsl #2
     e04:	ldr	r0, [r0]
     e08:	ldr	r0, [r0]
     e0c:	ldr	r1, [sp]
     e10:	str	r0, [r1, #4]
     e14:	ldr	r0, [sp]
     e18:	ldr	r0, [r0, #36]	; 0x24
     e1c:	ldrb	r0, [r0]
     e20:	ldr	r1, [sp]
     e24:	strb	r0, [r1, #24]
     e28:	add	sp, sp, #8
     e2c:	bx	lr

00000e30 <yy_get_previous_state>:
     e30:	sub	sp, sp, #24
     e34:	str	r0, [sp, #20]
     e38:	ldr	r0, [sp, #20]
     e3c:	str	r0, [sp, #8]
     e40:	ldr	r0, [sp, #8]
     e44:	ldr	r0, [r0, #44]	; 0x2c
     e48:	str	r0, [sp, #16]
     e4c:	ldr	r0, [sp, #8]
     e50:	ldr	r0, [r0, #80]	; 0x50
     e54:	str	r0, [sp, #12]
     e58:	ldr	r0, [sp, #12]
     e5c:	ldr	r1, [sp, #8]
     e60:	ldr	r1, [r1, #36]	; 0x24
     e64:	cmp	r0, r1
     e68:	bcs	fa4 <yy_get_previous_state+0x174>
     e6c:	ldr	r0, [sp, #12]
     e70:	ldrb	r0, [r0]
     e74:	cmp	r0, #0
     e78:	beq	e9c <yy_get_previous_state+0x6c>
     e7c:	ldr	r0, [sp, #12]
     e80:	ldrb	r0, [r0]
     e84:	movw	r1, #0
     e88:	movt	r1, #0
     e8c:	add	r0, r1, r0
     e90:	ldrb	r0, [r0]
     e94:	str	r0, [sp]
     e98:	b	ea8 <yy_get_previous_state+0x78>
     e9c:	movw	r0, #1
     ea0:	str	r0, [sp]
     ea4:	b	ea8 <yy_get_previous_state+0x78>
     ea8:	ldr	r0, [sp]
     eac:	strb	r0, [sp, #7]
     eb0:	ldr	r0, [sp, #16]
     eb4:	movw	r1, #0
     eb8:	movt	r1, #0
     ebc:	add	r0, r1, r0, lsl #1
     ec0:	ldrsh	r0, [r0]
     ec4:	cmp	r0, #0
     ec8:	beq	ee4 <yy_get_previous_state+0xb4>
     ecc:	ldr	r0, [sp, #16]
     ed0:	ldr	r1, [sp, #8]
     ed4:	str	r0, [r1, #64]	; 0x40
     ed8:	ldr	r0, [sp, #12]
     edc:	ldr	r1, [sp, #8]
     ee0:	str	r0, [r1, #68]	; 0x44
     ee4:	b	ee8 <yy_get_previous_state+0xb8>
     ee8:	ldr	r0, [sp, #16]
     eec:	movw	r1, #0
     ef0:	movt	r1, #0
     ef4:	add	r0, r1, r0, lsl #1
     ef8:	ldrsh	r0, [r0]
     efc:	ldrb	r1, [sp, #7]
     f00:	add	r0, r0, r1
     f04:	movw	r1, #0
     f08:	movt	r1, #0
     f0c:	add	r0, r1, r0, lsl #1
     f10:	ldrsh	r0, [r0]
     f14:	ldr	r1, [sp, #16]
     f18:	cmp	r0, r1
     f1c:	beq	f64 <yy_get_previous_state+0x134>
     f20:	ldr	r0, [sp, #16]
     f24:	movw	r1, #0
     f28:	movt	r1, #0
     f2c:	add	r0, r1, r0, lsl #1
     f30:	ldrsh	r0, [r0]
     f34:	str	r0, [sp, #16]
     f38:	ldr	r0, [sp, #16]
     f3c:	movw	r1, #274	; 0x112
     f40:	cmp	r0, r1
     f44:	blt	f60 <yy_get_previous_state+0x130>
     f48:	ldrb	r0, [sp, #7]
     f4c:	movw	r1, #0
     f50:	movt	r1, #0
     f54:	add	r0, r1, r0
     f58:	ldrb	r0, [r0]
     f5c:	strb	r0, [sp, #7]
     f60:	b	ee8 <yy_get_previous_state+0xb8>
     f64:	ldr	r0, [sp, #16]
     f68:	movw	r1, #0
     f6c:	movt	r1, #0
     f70:	add	r0, r1, r0, lsl #1
     f74:	ldrsh	r0, [r0]
     f78:	ldrb	r1, [sp, #7]
     f7c:	add	r0, r0, r1
     f80:	movw	r1, #0
     f84:	movt	r1, #0
     f88:	add	r0, r1, r0, lsl #1
     f8c:	ldrsh	r0, [r0]
     f90:	str	r0, [sp, #16]
     f94:	ldr	r0, [sp, #12]
     f98:	add	r0, r0, #1
     f9c:	str	r0, [sp, #12]
     fa0:	b	e58 <yy_get_previous_state+0x28>
     fa4:	ldr	r0, [sp, #16]
     fa8:	add	sp, sp, #24
     fac:	bx	lr

00000fb0 <yy_try_NUL_trans>:
     fb0:	sub	sp, sp, #28
     fb4:	str	r0, [sp, #24]
     fb8:	str	r1, [sp, #20]
     fbc:	ldr	r0, [sp, #20]
     fc0:	str	r0, [sp, #12]
     fc4:	ldr	r0, [sp, #12]
     fc8:	ldr	r0, [r0, #36]	; 0x24
     fcc:	str	r0, [sp, #8]
     fd0:	mov	r0, #1
     fd4:	strb	r0, [sp, #7]
     fd8:	ldr	r0, [sp, #24]
     fdc:	movw	r1, #0
     fe0:	movt	r1, #0
     fe4:	add	r0, r1, r0, lsl #1
     fe8:	ldrsh	r0, [r0]
     fec:	cmp	r0, #0
     ff0:	beq	100c <yy_try_NUL_trans+0x5c>
     ff4:	ldr	r0, [sp, #24]
     ff8:	ldr	r1, [sp, #12]
     ffc:	str	r0, [r1, #64]	; 0x40
    1000:	ldr	r0, [sp, #8]
    1004:	ldr	r1, [sp, #12]
    1008:	str	r0, [r1, #68]	; 0x44
    100c:	b	1010 <yy_try_NUL_trans+0x60>
    1010:	ldr	r0, [sp, #24]
    1014:	movw	r1, #0
    1018:	movt	r1, #0
    101c:	add	r0, r1, r0, lsl #1
    1020:	ldrsh	r0, [r0]
    1024:	ldrb	r1, [sp, #7]
    1028:	add	r0, r0, r1
    102c:	movw	r1, #0
    1030:	movt	r1, #0
    1034:	add	r0, r1, r0, lsl #1
    1038:	ldrsh	r0, [r0]
    103c:	ldr	r1, [sp, #24]
    1040:	cmp	r0, r1
    1044:	beq	108c <yy_try_NUL_trans+0xdc>
    1048:	ldr	r0, [sp, #24]
    104c:	movw	r1, #0
    1050:	movt	r1, #0
    1054:	add	r0, r1, r0, lsl #1
    1058:	ldrsh	r0, [r0]
    105c:	str	r0, [sp, #24]
    1060:	ldr	r0, [sp, #24]
    1064:	movw	r1, #274	; 0x112
    1068:	cmp	r0, r1
    106c:	blt	1088 <yy_try_NUL_trans+0xd8>
    1070:	ldrb	r0, [sp, #7]
    1074:	movw	r1, #0
    1078:	movt	r1, #0
    107c:	add	r0, r1, r0
    1080:	ldrb	r0, [r0]
    1084:	strb	r0, [sp, #7]
    1088:	b	1010 <yy_try_NUL_trans+0x60>
    108c:	ldr	r0, [sp, #24]
    1090:	movw	r1, #0
    1094:	movt	r1, #0
    1098:	add	r0, r1, r0, lsl #1
    109c:	ldrsh	r0, [r0]
    10a0:	ldrb	r1, [sp, #7]
    10a4:	add	r0, r0, r1
    10a8:	movw	r1, #0
    10ac:	movt	r1, #0
    10b0:	add	r0, r1, r0, lsl #1
    10b4:	ldrsh	r0, [r0]
    10b8:	str	r0, [sp, #24]
    10bc:	ldr	r0, [sp, #24]
    10c0:	movw	r1, #273	; 0x111
    10c4:	cmp	r0, r1
    10c8:	movw	r0, #0
    10cc:	moveq	r0, #1
    10d0:	and	r0, r0, #1
    10d4:	str	r0, [sp, #16]
    10d8:	ldr	r0, [sp, #16]
    10dc:	cmp	r0, #0
    10e0:	beq	10f0 <yy_try_NUL_trans+0x140>
    10e4:	movw	r0, #0
    10e8:	str	r0, [sp]
    10ec:	b	10f8 <yy_try_NUL_trans+0x148>
    10f0:	ldr	r0, [sp, #24]
    10f4:	str	r0, [sp]
    10f8:	ldr	r0, [sp]
    10fc:	add	sp, sp, #28
    1100:	bx	lr

00001104 <yy_get_next_buffer>:
    1104:	push	{fp, lr}
    1108:	mov	fp, sp
    110c:	sub	sp, sp, #72	; 0x48
    1110:	str	r0, [fp, #-8]
    1114:	ldr	r0, [fp, #-8]
    1118:	str	r0, [fp, #-12]
    111c:	ldr	r0, [fp, #-12]
    1120:	ldr	r1, [r0, #12]
    1124:	ldr	r0, [r0, #20]
    1128:	ldr	r0, [r0, r1, lsl #2]
    112c:	ldr	r0, [r0, #4]
    1130:	str	r0, [fp, #-16]
    1134:	ldr	r0, [fp, #-12]
    1138:	ldr	r0, [r0, #80]	; 0x50
    113c:	str	r0, [fp, #-20]	; 0xffffffec
    1140:	ldr	r0, [fp, #-12]
    1144:	ldr	r1, [r0, #12]
    1148:	ldr	r2, [r0, #20]
    114c:	ldr	r0, [r0, #36]	; 0x24
    1150:	add	r1, r2, r1, lsl #2
    1154:	ldr	r1, [r1]
    1158:	ldr	r1, [r1, #4]
    115c:	ldr	r2, [fp, #-12]
    1160:	ldr	r2, [r2, #28]
    1164:	add	r2, r2, #1
    1168:	add	r1, r1, r2
    116c:	cmp	r0, r1
    1170:	bls	1184 <yy_get_next_buffer+0x80>
    1174:	ldr	r1, [fp, #-8]
    1178:	movw	r0, #0
    117c:	movt	r0, #0
    1180:	bl	17e4 <yy_fatal_error>
    1184:	ldr	r0, [fp, #-12]
    1188:	ldr	r1, [r0, #12]
    118c:	ldr	r0, [r0, #20]
    1190:	add	r0, r0, r1, lsl #2
    1194:	ldr	r0, [r0]
    1198:	ldr	r0, [r0, #40]	; 0x28
    119c:	cmp	r0, #0
    11a0:	bne	11dc <yy_get_next_buffer+0xd8>
    11a4:	ldr	r0, [fp, #-12]
    11a8:	ldr	r0, [r0, #36]	; 0x24
    11ac:	ldr	r1, [fp, #-12]
    11b0:	ldr	r1, [r1, #80]	; 0x50
    11b4:	sub	r0, r0, r1
    11b8:	sub	r0, r0, #0
    11bc:	cmp	r0, #1
    11c0:	bne	11d0 <yy_get_next_buffer+0xcc>
    11c4:	movw	r0, #1
    11c8:	str	r0, [fp, #-4]
    11cc:	b	17d8 <yy_get_next_buffer+0x6d4>
    11d0:	movw	r0, #2
    11d4:	str	r0, [fp, #-4]
    11d8:	b	17d8 <yy_get_next_buffer+0x6d4>
    11dc:	ldr	r0, [fp, #-12]
    11e0:	ldr	r0, [r0, #36]	; 0x24
    11e4:	ldr	r1, [fp, #-12]
    11e8:	ldr	r1, [r1, #80]	; 0x50
    11ec:	sub	r0, r0, r1
    11f0:	sub	r0, r0, #1
    11f4:	str	r0, [fp, #-24]	; 0xffffffe8
    11f8:	movw	r0, #0
    11fc:	str	r0, [fp, #-28]	; 0xffffffe4
    1200:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1204:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1208:	cmp	r0, r1
    120c:	bge	1240 <yy_get_next_buffer+0x13c>
    1210:	ldr	r0, [fp, #-20]	; 0xffffffec
    1214:	add	r1, r0, #1
    1218:	str	r1, [fp, #-20]	; 0xffffffec
    121c:	ldrb	r0, [r0]
    1220:	ldr	r1, [fp, #-16]
    1224:	add	r2, r1, #1
    1228:	str	r2, [fp, #-16]
    122c:	strb	r0, [r1]
    1230:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1234:	add	r0, r0, #1
    1238:	str	r0, [fp, #-28]	; 0xffffffe4
    123c:	b	1200 <yy_get_next_buffer+0xfc>
    1240:	ldr	r0, [fp, #-12]
    1244:	ldr	r1, [r0, #12]
    1248:	ldr	r0, [r0, #20]
    124c:	add	r0, r0, r1, lsl #2
    1250:	ldr	r0, [r0]
    1254:	ldr	r0, [r0, #44]	; 0x2c
    1258:	cmp	r0, #2
    125c:	bne	128c <yy_get_next_buffer+0x188>
    1260:	ldr	r0, [fp, #-12]
    1264:	mov	r1, #0
    1268:	str	r1, [r0, #28]
    126c:	ldr	r0, [fp, #-12]
    1270:	ldr	r1, [r0, #12]
    1274:	ldr	r0, [r0, #20]
    1278:	add	r0, r0, r1, lsl #2
    127c:	ldr	r0, [r0]
    1280:	movw	r1, #0
    1284:	str	r1, [r0, #16]
    1288:	b	1628 <yy_get_next_buffer+0x524>
    128c:	ldr	r0, [fp, #-12]
    1290:	ldr	r1, [r0, #12]
    1294:	ldr	r0, [r0, #20]
    1298:	add	r0, r0, r1, lsl #2
    129c:	ldr	r0, [r0]
    12a0:	ldr	r0, [r0, #12]
    12a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    12a8:	sub	r0, r0, r1
    12ac:	sub	r0, r0, #1
    12b0:	str	r0, [sp, #36]	; 0x24
    12b4:	ldr	r0, [sp, #36]	; 0x24
    12b8:	cmp	r0, #0
    12bc:	bgt	13ec <yy_get_next_buffer+0x2e8>
    12c0:	ldr	r0, [fp, #-12]
    12c4:	ldr	r1, [r0, #12]
    12c8:	ldr	r0, [r0, #20]
    12cc:	add	r0, r0, r1, lsl #2
    12d0:	ldr	r0, [r0]
    12d4:	str	r0, [sp, #32]
    12d8:	ldr	r0, [fp, #-12]
    12dc:	ldr	r0, [r0, #36]	; 0x24
    12e0:	ldr	r1, [sp, #32]
    12e4:	ldr	r1, [r1, #4]
    12e8:	sub	r0, r0, r1
    12ec:	str	r0, [sp, #28]
    12f0:	ldr	r0, [sp, #32]
    12f4:	ldr	r0, [r0, #20]
    12f8:	cmp	r0, #0
    12fc:	beq	1378 <yy_get_next_buffer+0x274>
    1300:	ldr	r0, [sp, #32]
    1304:	ldr	r0, [r0, #12]
    1308:	lsl	r0, r0, #1
    130c:	str	r0, [sp, #24]
    1310:	ldr	r0, [sp, #24]
    1314:	cmp	r0, #0
    1318:	bgt	1340 <yy_get_next_buffer+0x23c>
    131c:	ldr	r0, [sp, #32]
    1320:	ldr	r0, [r0, #12]
    1324:	movw	r1, #8
    1328:	sdiv	r0, r0, r1
    132c:	ldr	r1, [sp, #32]
    1330:	ldr	r2, [r1, #12]
    1334:	add	r0, r2, r0
    1338:	str	r0, [r1, #12]
    133c:	b	1350 <yy_get_next_buffer+0x24c>
    1340:	ldr	r0, [sp, #32]
    1344:	ldr	r1, [r0, #12]
    1348:	lsl	r1, r1, #1
    134c:	str	r1, [r0, #12]
    1350:	ldr	r0, [sp, #32]
    1354:	ldr	r0, [r0, #4]
    1358:	ldr	r1, [sp, #32]
    135c:	ldr	r1, [r1, #12]
    1360:	add	r1, r1, #2
    1364:	ldr	r2, [fp, #-8]
    1368:	bl	28fc <coda_expression_realloc>
    136c:	ldr	r1, [sp, #32]
    1370:	str	r0, [r1, #4]
    1374:	b	1384 <yy_get_next_buffer+0x280>
    1378:	ldr	r0, [sp, #32]
    137c:	movw	r1, #0
    1380:	str	r1, [r0, #4]
    1384:	ldr	r0, [sp, #32]
    1388:	ldr	r0, [r0, #4]
    138c:	movw	r1, #0
    1390:	cmp	r0, r1
    1394:	bne	13a8 <yy_get_next_buffer+0x2a4>
    1398:	ldr	r1, [fp, #-8]
    139c:	movw	r0, #0
    13a0:	movt	r0, #0
    13a4:	bl	17e4 <yy_fatal_error>
    13a8:	ldr	r0, [sp, #32]
    13ac:	ldr	r0, [r0, #4]
    13b0:	ldr	r1, [sp, #28]
    13b4:	add	r0, r0, r1
    13b8:	ldr	r1, [fp, #-12]
    13bc:	str	r0, [r1, #36]	; 0x24
    13c0:	ldr	r0, [fp, #-12]
    13c4:	ldr	r1, [r0, #12]
    13c8:	ldr	r0, [r0, #20]
    13cc:	add	r0, r0, r1, lsl #2
    13d0:	ldr	r0, [r0]
    13d4:	ldr	r0, [r0, #12]
    13d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    13dc:	sub	r0, r0, r1
    13e0:	sub	r0, r0, #1
    13e4:	str	r0, [sp, #36]	; 0x24
    13e8:	b	12b4 <yy_get_next_buffer+0x1b0>
    13ec:	ldr	r0, [sp, #36]	; 0x24
    13f0:	cmp	r0, #8192	; 0x2000
    13f4:	ble	1400 <yy_get_next_buffer+0x2fc>
    13f8:	movw	r0, #8192	; 0x2000
    13fc:	str	r0, [sp, #36]	; 0x24
    1400:	ldr	r0, [fp, #-12]
    1404:	ldr	r1, [r0, #12]
    1408:	ldr	r0, [r0, #20]
    140c:	add	r0, r0, r1, lsl #2
    1410:	ldr	r0, [r0]
    1414:	ldr	r0, [r0, #24]
    1418:	cmp	r0, #0
    141c:	beq	154c <yy_get_next_buffer+0x448>
    1420:	movw	r0, #42	; 0x2a
    1424:	str	r0, [sp, #20]
    1428:	movw	r0, #0
    142c:	str	r0, [sp, #16]
    1430:	ldr	r0, [sp, #16]
    1434:	ldr	r1, [sp, #36]	; 0x24
    1438:	cmp	r0, r1
    143c:	movw	r0, #0
    1440:	str	r0, [sp, #8]
    1444:	bge	147c <yy_get_next_buffer+0x378>
    1448:	ldr	r0, [fp, #-12]
    144c:	ldr	r0, [r0, #4]
    1450:	bl	0 <getc>
    1454:	str	r0, [sp, #20]
    1458:	cmn	r0, #1
    145c:	movw	r0, #0
    1460:	str	r0, [sp, #8]
    1464:	beq	147c <yy_get_next_buffer+0x378>
    1468:	ldr	r0, [sp, #20]
    146c:	cmp	r0, #10
    1470:	movw	r0, #0
    1474:	movne	r0, #1
    1478:	str	r0, [sp, #8]
    147c:	ldr	r0, [sp, #8]
    1480:	tst	r0, #1
    1484:	beq	14c8 <yy_get_next_buffer+0x3c4>
    1488:	ldr	r0, [sp, #20]
    148c:	ldr	r1, [fp, #-12]
    1490:	ldr	r2, [r1, #12]
    1494:	ldr	r1, [r1, #20]
    1498:	add	r1, r1, r2, lsl #2
    149c:	ldr	r1, [r1]
    14a0:	ldr	r1, [r1, #4]
    14a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14a8:	add	r1, r1, r2
    14ac:	ldr	r2, [sp, #16]
    14b0:	add	r1, r1, r2
    14b4:	strb	r0, [r1]
    14b8:	ldr	r0, [sp, #16]
    14bc:	add	r0, r0, #1
    14c0:	str	r0, [sp, #16]
    14c4:	b	1430 <yy_get_next_buffer+0x32c>
    14c8:	ldr	r0, [sp, #20]
    14cc:	cmp	r0, #10
    14d0:	bne	150c <yy_get_next_buffer+0x408>
    14d4:	ldr	r0, [sp, #20]
    14d8:	ldr	r1, [fp, #-12]
    14dc:	ldr	r2, [r1, #12]
    14e0:	ldr	r1, [r1, #20]
    14e4:	add	r1, r1, r2, lsl #2
    14e8:	ldr	r1, [r1]
    14ec:	ldr	r1, [r1, #4]
    14f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14f4:	add	r1, r1, r2
    14f8:	ldr	r2, [sp, #16]
    14fc:	add	r3, r2, #1
    1500:	str	r3, [sp, #16]
    1504:	add	r1, r1, r2
    1508:	strb	r0, [r1]
    150c:	ldr	r0, [sp, #20]
    1510:	cmn	r0, #1
    1514:	bne	153c <yy_get_next_buffer+0x438>
    1518:	ldr	r0, [fp, #-12]
    151c:	ldr	r0, [r0, #4]
    1520:	bl	0 <ferror>
    1524:	cmp	r0, #0
    1528:	beq	153c <yy_get_next_buffer+0x438>
    152c:	ldr	r1, [fp, #-8]
    1530:	movw	r0, #0
    1534:	movt	r0, #0
    1538:	bl	17e4 <yy_fatal_error>
    153c:	ldr	r0, [sp, #16]
    1540:	ldr	r1, [fp, #-12]
    1544:	str	r0, [r1, #28]
    1548:	b	160c <yy_get_next_buffer+0x508>
    154c:	bl	0 <__errno_location>
    1550:	movw	lr, #0
    1554:	str	lr, [r0]
    1558:	ldr	r0, [fp, #-12]
    155c:	ldr	r1, [r0, #12]
    1560:	ldr	r0, [r0, #20]
    1564:	add	r0, r0, r1, lsl #2
    1568:	ldr	r0, [r0]
    156c:	ldr	r0, [r0, #4]
    1570:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1574:	add	r0, r0, r1
    1578:	ldr	r2, [sp, #36]	; 0x24
    157c:	ldr	r1, [fp, #-12]
    1580:	ldr	r3, [r1, #4]
    1584:	movw	r1, #1
    1588:	bl	0 <fread>
    158c:	ldr	r1, [fp, #-12]
    1590:	str	r0, [r1, #28]
    1594:	cmp	r0, #0
    1598:	movw	r0, #0
    159c:	str	r0, [sp, #4]
    15a0:	bne	15c0 <yy_get_next_buffer+0x4bc>
    15a4:	ldr	r0, [fp, #-12]
    15a8:	ldr	r0, [r0, #4]
    15ac:	bl	0 <ferror>
    15b0:	cmp	r0, #0
    15b4:	movw	r0, #0
    15b8:	movne	r0, #1
    15bc:	str	r0, [sp, #4]
    15c0:	ldr	r0, [sp, #4]
    15c4:	tst	r0, #1
    15c8:	beq	1608 <yy_get_next_buffer+0x504>
    15cc:	bl	0 <__errno_location>
    15d0:	ldr	r0, [r0]
    15d4:	cmp	r0, #4
    15d8:	beq	15ec <yy_get_next_buffer+0x4e8>
    15dc:	ldr	r1, [fp, #-8]
    15e0:	movw	r0, #0
    15e4:	movt	r0, #0
    15e8:	bl	17e4 <yy_fatal_error>
    15ec:	bl	0 <__errno_location>
    15f0:	movw	lr, #0
    15f4:	str	lr, [r0]
    15f8:	ldr	r0, [fp, #-12]
    15fc:	ldr	r0, [r0, #4]
    1600:	bl	0 <clearerr>
    1604:	b	1558 <yy_get_next_buffer+0x454>
    1608:	b	160c <yy_get_next_buffer+0x508>
    160c:	ldr	r0, [fp, #-12]
    1610:	ldr	r1, [r0, #12]
    1614:	ldr	r2, [r0, #20]
    1618:	ldr	r0, [r0, #28]
    161c:	add	r1, r2, r1, lsl #2
    1620:	ldr	r1, [r1]
    1624:	str	r0, [r1, #16]
    1628:	ldr	r0, [fp, #-12]
    162c:	ldr	r0, [r0, #28]
    1630:	cmp	r0, #0
    1634:	bne	1688 <yy_get_next_buffer+0x584>
    1638:	ldr	r0, [fp, #-24]	; 0xffffffe8
    163c:	cmp	r0, #0
    1640:	bne	1660 <yy_get_next_buffer+0x55c>
    1644:	movw	r0, #1
    1648:	str	r0, [fp, #-32]	; 0xffffffe0
    164c:	ldr	r0, [fp, #-12]
    1650:	ldr	r0, [r0, #4]
    1654:	ldr	r1, [fp, #-8]
    1658:	bl	182c <coda_expression_restart>
    165c:	b	1684 <yy_get_next_buffer+0x580>
    1660:	mov	r0, #2
    1664:	str	r0, [fp, #-32]	; 0xffffffe0
    1668:	ldr	r0, [fp, #-12]
    166c:	ldr	r1, [r0, #12]
    1670:	ldr	r0, [r0, #20]
    1674:	add	r0, r0, r1, lsl #2
    1678:	ldr	r0, [r0]
    167c:	movw	r1, #2
    1680:	str	r1, [r0, #44]	; 0x2c
    1684:	b	1690 <yy_get_next_buffer+0x58c>
    1688:	movw	r0, #0
    168c:	str	r0, [fp, #-32]	; 0xffffffe0
    1690:	ldr	r0, [fp, #-12]
    1694:	ldr	r1, [r0, #12]
    1698:	ldr	r2, [r0, #20]
    169c:	ldr	r0, [r0, #28]
    16a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16a4:	add	r0, r0, r3
    16a8:	add	r1, r2, r1, lsl #2
    16ac:	ldr	r1, [r1]
    16b0:	ldr	r1, [r1, #12]
    16b4:	cmp	r0, r1
    16b8:	ble	175c <yy_get_next_buffer+0x658>
    16bc:	ldr	r0, [fp, #-12]
    16c0:	ldr	r0, [r0, #28]
    16c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    16c8:	add	r1, r0, r1
    16cc:	add	r0, r1, r0, asr #1
    16d0:	str	r0, [sp, #12]
    16d4:	ldr	r0, [fp, #-12]
    16d8:	ldr	r1, [r0, #12]
    16dc:	ldr	r0, [r0, #20]
    16e0:	ldr	r0, [r0, r1, lsl #2]
    16e4:	ldr	r0, [r0, #4]
    16e8:	ldr	r1, [sp, #12]
    16ec:	ldr	r2, [fp, #-8]
    16f0:	bl	28fc <coda_expression_realloc>
    16f4:	ldr	r1, [fp, #-12]
    16f8:	ldr	r2, [r1, #12]
    16fc:	ldr	r1, [r1, #20]
    1700:	ldr	r1, [r1, r2, lsl #2]
    1704:	str	r0, [r1, #4]
    1708:	ldr	r0, [fp, #-12]
    170c:	ldr	r1, [r0, #12]
    1710:	ldr	r0, [r0, #20]
    1714:	add	r0, r0, r1, lsl #2
    1718:	ldr	r0, [r0]
    171c:	ldr	r0, [r0, #4]
    1720:	movw	r1, #0
    1724:	cmp	r0, r1
    1728:	bne	173c <yy_get_next_buffer+0x638>
    172c:	ldr	r1, [fp, #-8]
    1730:	movw	r0, #0
    1734:	movt	r0, #0
    1738:	bl	17e4 <yy_fatal_error>
    173c:	ldr	r0, [sp, #12]
    1740:	sub	r0, r0, #2
    1744:	ldr	r1, [fp, #-12]
    1748:	ldr	r2, [r1, #12]
    174c:	ldr	r1, [r1, #20]
    1750:	add	r1, r1, r2, lsl #2
    1754:	ldr	r1, [r1]
    1758:	str	r0, [r1, #12]
    175c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1760:	ldr	r1, [fp, #-12]
    1764:	ldr	r2, [r1, #28]
    1768:	add	r0, r2, r0
    176c:	str	r0, [r1, #28]
    1770:	ldr	r0, [fp, #-12]
    1774:	ldr	r1, [r0, #12]
    1778:	ldr	r2, [r0, #20]
    177c:	ldr	r0, [r0, #28]
    1780:	ldr	r1, [r2, r1, lsl #2]
    1784:	ldr	r1, [r1, #4]
    1788:	mov	r2, #0
    178c:	strb	r2, [r1, r0]
    1790:	ldr	r0, [fp, #-12]
    1794:	ldr	r1, [r0, #12]
    1798:	ldr	r3, [r0, #20]
    179c:	ldr	r0, [r0, #28]
    17a0:	ldr	r1, [r3, r1, lsl #2]
    17a4:	ldr	r1, [r1, #4]
    17a8:	add	r0, r1, r0
    17ac:	strb	r2, [r0, #1]
    17b0:	ldr	r0, [fp, #-12]
    17b4:	ldr	r1, [r0, #12]
    17b8:	ldr	r0, [r0, #20]
    17bc:	add	r0, r0, r1, lsl #2
    17c0:	ldr	r0, [r0]
    17c4:	ldr	r0, [r0, #4]
    17c8:	ldr	r1, [fp, #-12]
    17cc:	str	r0, [r1, #80]	; 0x50
    17d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    17d4:	str	r0, [fp, #-4]
    17d8:	ldr	r0, [fp, #-4]
    17dc:	mov	sp, fp
    17e0:	pop	{fp, pc}

000017e4 <yy_fatal_error>:
    17e4:	push	{fp, lr}
    17e8:	mov	fp, sp
    17ec:	sub	sp, sp, #16
    17f0:	str	r0, [fp, #-4]
    17f4:	str	r1, [sp, #8]
    17f8:	ldr	r0, [sp, #8]
    17fc:	str	r0, [sp, #4]
    1800:	movw	r0, #0
    1804:	movt	r0, #0
    1808:	ldr	r0, [r0]
    180c:	ldr	r2, [fp, #-4]
    1810:	movw	r1, #0
    1814:	movt	r1, #0
    1818:	bl	0 <fprintf>
    181c:	movw	r1, #2
    1820:	str	r0, [sp]
    1824:	mov	r0, r1
    1828:	bl	0 <exit>

0000182c <coda_expression_restart>:
    182c:	push	{fp, lr}
    1830:	mov	fp, sp
    1834:	sub	sp, sp, #16
    1838:	str	r0, [fp, #-4]
    183c:	str	r1, [sp, #8]
    1840:	ldr	r0, [sp, #8]
    1844:	str	r0, [sp, #4]
    1848:	ldr	r0, [sp, #4]
    184c:	ldr	r0, [r0, #20]
    1850:	movw	r1, #0
    1854:	cmp	r0, r1
    1858:	beq	1880 <coda_expression_restart+0x54>
    185c:	ldr	r0, [sp, #4]
    1860:	ldr	r1, [r0, #12]
    1864:	ldr	r0, [r0, #20]
    1868:	add	r0, r0, r1, lsl #2
    186c:	ldr	r0, [r0]
    1870:	movw	r1, #0
    1874:	cmp	r0, r1
    1878:	bne	18b4 <coda_expression_restart+0x88>
    187c:	b	1884 <coda_expression_restart+0x58>
    1880:	b	1884 <coda_expression_restart+0x58>
    1884:	ldr	r0, [sp, #8]
    1888:	bl	b94 <coda_expression_ensure_buffer_stack>
    188c:	ldr	r0, [sp, #4]
    1890:	ldr	r0, [r0, #4]
    1894:	ldr	r2, [sp, #8]
    1898:	mov	r1, #16384	; 0x4000
    189c:	bl	cf0 <coda_expression__create_buffer>
    18a0:	ldr	r1, [sp, #4]
    18a4:	ldr	r2, [r1, #12]
    18a8:	ldr	r1, [r1, #20]
    18ac:	add	r1, r1, r2, lsl #2
    18b0:	str	r0, [r1]
    18b4:	ldr	r0, [sp, #4]
    18b8:	ldr	r0, [r0, #20]
    18bc:	movw	r1, #0
    18c0:	cmp	r0, r1
    18c4:	beq	18e4 <coda_expression_restart+0xb8>
    18c8:	ldr	r0, [sp, #4]
    18cc:	ldr	r1, [r0, #12]
    18d0:	ldr	r0, [r0, #20]
    18d4:	add	r0, r0, r1, lsl #2
    18d8:	ldr	r0, [r0]
    18dc:	str	r0, [sp]
    18e0:	b	18f0 <coda_expression_restart+0xc4>
    18e4:	movw	r0, #0
    18e8:	str	r0, [sp]
    18ec:	b	18f0 <coda_expression_restart+0xc4>
    18f0:	ldr	r0, [sp]
    18f4:	ldr	r1, [fp, #-4]
    18f8:	ldr	r2, [sp, #8]
    18fc:	bl	1910 <coda_expression__init_buffer>
    1900:	ldr	r0, [sp, #8]
    1904:	bl	dac <coda_expression__load_buffer_state>
    1908:	mov	sp, fp
    190c:	pop	{fp, pc}

00001910 <coda_expression__init_buffer>:
    1910:	push	{fp, lr}
    1914:	mov	fp, sp
    1918:	sub	sp, sp, #32
    191c:	str	r0, [fp, #-4]
    1920:	str	r1, [fp, #-8]
    1924:	str	r2, [fp, #-12]
    1928:	bl	0 <__errno_location>
    192c:	ldr	r0, [r0]
    1930:	str	r0, [sp, #16]
    1934:	ldr	r0, [fp, #-12]
    1938:	str	r0, [sp, #12]
    193c:	ldr	r0, [fp, #-4]
    1940:	ldr	r1, [fp, #-12]
    1944:	bl	1c44 <coda_expression__flush_buffer>
    1948:	ldr	r0, [fp, #-8]
    194c:	ldr	r1, [fp, #-4]
    1950:	str	r0, [r1]
    1954:	ldr	r0, [fp, #-4]
    1958:	movw	r1, #1
    195c:	str	r1, [r0, #40]	; 0x28
    1960:	ldr	r0, [fp, #-4]
    1964:	ldr	r1, [sp, #12]
    1968:	ldr	r1, [r1, #20]
    196c:	movw	r2, #0
    1970:	cmp	r1, r2
    1974:	str	r0, [sp, #8]
    1978:	beq	1998 <coda_expression__init_buffer+0x88>
    197c:	ldr	r0, [sp, #12]
    1980:	ldr	r1, [r0, #12]
    1984:	ldr	r0, [r0, #20]
    1988:	add	r0, r0, r1, lsl #2
    198c:	ldr	r0, [r0]
    1990:	str	r0, [sp, #4]
    1994:	b	19a4 <coda_expression__init_buffer+0x94>
    1998:	movw	r0, #0
    199c:	str	r0, [sp, #4]
    19a0:	b	19a4 <coda_expression__init_buffer+0x94>
    19a4:	ldr	r0, [sp, #4]
    19a8:	ldr	r1, [sp, #8]
    19ac:	cmp	r1, r0
    19b0:	beq	19cc <coda_expression__init_buffer+0xbc>
    19b4:	ldr	r0, [fp, #-4]
    19b8:	movw	r1, #1
    19bc:	str	r1, [r0, #32]
    19c0:	ldr	r0, [fp, #-4]
    19c4:	movw	r1, #0
    19c8:	str	r1, [r0, #36]	; 0x24
    19cc:	ldr	r0, [fp, #-4]
    19d0:	movw	r1, #1
    19d4:	str	r1, [r0, #24]
    19d8:	ldr	r0, [sp, #16]
    19dc:	str	r0, [sp]
    19e0:	bl	0 <__errno_location>
    19e4:	ldr	r1, [sp]
    19e8:	str	r1, [r0]
    19ec:	mov	sp, fp
    19f0:	pop	{fp, pc}

000019f4 <coda_expression__switch_to_buffer>:
    19f4:	push	{fp, lr}
    19f8:	mov	fp, sp
    19fc:	sub	sp, sp, #16
    1a00:	str	r0, [fp, #-4]
    1a04:	str	r1, [sp, #8]
    1a08:	ldr	r0, [sp, #8]
    1a0c:	str	r0, [sp, #4]
    1a10:	ldr	r0, [sp, #8]
    1a14:	bl	b94 <coda_expression_ensure_buffer_stack>
    1a18:	ldr	r0, [sp, #4]
    1a1c:	ldr	r0, [r0, #20]
    1a20:	movw	r1, #0
    1a24:	cmp	r0, r1
    1a28:	beq	1a48 <coda_expression__switch_to_buffer+0x54>
    1a2c:	ldr	r0, [sp, #4]
    1a30:	ldr	r1, [r0, #12]
    1a34:	ldr	r0, [r0, #20]
    1a38:	add	r0, r0, r1, lsl #2
    1a3c:	ldr	r0, [r0]
    1a40:	str	r0, [sp]
    1a44:	b	1a54 <coda_expression__switch_to_buffer+0x60>
    1a48:	movw	r0, #0
    1a4c:	str	r0, [sp]
    1a50:	b	1a54 <coda_expression__switch_to_buffer+0x60>
    1a54:	ldr	r0, [sp]
    1a58:	ldr	r1, [fp, #-4]
    1a5c:	cmp	r0, r1
    1a60:	bne	1a68 <coda_expression__switch_to_buffer+0x74>
    1a64:	b	1b14 <coda_expression__switch_to_buffer+0x120>
    1a68:	ldr	r0, [sp, #4]
    1a6c:	ldr	r0, [r0, #20]
    1a70:	movw	r1, #0
    1a74:	cmp	r0, r1
    1a78:	beq	1aa0 <coda_expression__switch_to_buffer+0xac>
    1a7c:	ldr	r0, [sp, #4]
    1a80:	ldr	r1, [r0, #12]
    1a84:	ldr	r0, [r0, #20]
    1a88:	add	r0, r0, r1, lsl #2
    1a8c:	ldr	r0, [r0]
    1a90:	movw	r1, #0
    1a94:	cmp	r0, r1
    1a98:	bne	1aa4 <coda_expression__switch_to_buffer+0xb0>
    1a9c:	b	1ae8 <coda_expression__switch_to_buffer+0xf4>
    1aa0:	b	1ae8 <coda_expression__switch_to_buffer+0xf4>
    1aa4:	ldr	r0, [sp, #4]
    1aa8:	ldrb	r1, [r0, #24]
    1aac:	ldr	r0, [r0, #36]	; 0x24
    1ab0:	strb	r1, [r0]
    1ab4:	ldr	r0, [sp, #4]
    1ab8:	ldr	r1, [r0, #12]
    1abc:	ldr	r2, [r0, #20]
    1ac0:	ldr	r0, [r0, #36]	; 0x24
    1ac4:	ldr	r1, [r2, r1, lsl #2]
    1ac8:	str	r0, [r1, #8]
    1acc:	ldr	r0, [sp, #4]
    1ad0:	ldr	r1, [r0, #12]
    1ad4:	ldr	r2, [r0, #20]
    1ad8:	ldr	r0, [r0, #28]
    1adc:	add	r1, r2, r1, lsl #2
    1ae0:	ldr	r1, [r1]
    1ae4:	str	r0, [r1, #16]
    1ae8:	ldr	r0, [fp, #-4]
    1aec:	ldr	r1, [sp, #4]
    1af0:	ldr	r2, [r1, #12]
    1af4:	ldr	r1, [r1, #20]
    1af8:	add	r1, r1, r2, lsl #2
    1afc:	str	r0, [r1]
    1b00:	ldr	r0, [sp, #8]
    1b04:	bl	dac <coda_expression__load_buffer_state>
    1b08:	ldr	r0, [sp, #4]
    1b0c:	movw	r1, #1
    1b10:	str	r1, [r0, #48]	; 0x30
    1b14:	mov	sp, fp
    1b18:	pop	{fp, pc}

00001b1c <coda_expression_alloc>:
    1b1c:	push	{fp, lr}
    1b20:	mov	fp, sp
    1b24:	sub	sp, sp, #16
    1b28:	str	r0, [fp, #-4]
    1b2c:	str	r1, [sp, #8]
    1b30:	ldr	r0, [sp, #8]
    1b34:	str	r0, [sp, #4]
    1b38:	ldr	r0, [fp, #-4]
    1b3c:	bl	0 <malloc>
    1b40:	mov	sp, fp
    1b44:	pop	{fp, pc}

00001b48 <coda_expression__delete_buffer>:
    1b48:	push	{fp, lr}
    1b4c:	mov	fp, sp
    1b50:	sub	sp, sp, #24
    1b54:	str	r0, [fp, #-4]
    1b58:	str	r1, [fp, #-8]
    1b5c:	ldr	r0, [fp, #-8]
    1b60:	str	r0, [sp, #12]
    1b64:	ldr	r0, [fp, #-4]
    1b68:	movw	r1, #0
    1b6c:	cmp	r0, r1
    1b70:	bne	1b78 <coda_expression__delete_buffer+0x30>
    1b74:	b	1c10 <coda_expression__delete_buffer+0xc8>
    1b78:	ldr	r0, [fp, #-4]
    1b7c:	ldr	r1, [sp, #12]
    1b80:	ldr	r1, [r1, #20]
    1b84:	movw	r2, #0
    1b88:	cmp	r1, r2
    1b8c:	str	r0, [sp, #8]
    1b90:	beq	1bb0 <coda_expression__delete_buffer+0x68>
    1b94:	ldr	r0, [sp, #12]
    1b98:	ldr	r1, [r0, #12]
    1b9c:	ldr	r0, [r0, #20]
    1ba0:	add	r0, r0, r1, lsl #2
    1ba4:	ldr	r0, [r0]
    1ba8:	str	r0, [sp, #4]
    1bac:	b	1bbc <coda_expression__delete_buffer+0x74>
    1bb0:	movw	r0, #0
    1bb4:	str	r0, [sp, #4]
    1bb8:	b	1bbc <coda_expression__delete_buffer+0x74>
    1bbc:	ldr	r0, [sp, #4]
    1bc0:	ldr	r1, [sp, #8]
    1bc4:	cmp	r1, r0
    1bc8:	bne	1be4 <coda_expression__delete_buffer+0x9c>
    1bcc:	ldr	r0, [sp, #12]
    1bd0:	ldr	r1, [r0, #12]
    1bd4:	ldr	r0, [r0, #20]
    1bd8:	add	r0, r0, r1, lsl #2
    1bdc:	movw	r1, #0
    1be0:	str	r1, [r0]
    1be4:	ldr	r0, [fp, #-4]
    1be8:	ldr	r0, [r0, #20]
    1bec:	cmp	r0, #0
    1bf0:	beq	1c04 <coda_expression__delete_buffer+0xbc>
    1bf4:	ldr	r0, [fp, #-4]
    1bf8:	ldr	r0, [r0, #4]
    1bfc:	ldr	r1, [fp, #-8]
    1c00:	bl	1c18 <coda_expression_free>
    1c04:	ldr	r0, [fp, #-4]
    1c08:	ldr	r1, [fp, #-8]
    1c0c:	bl	1c18 <coda_expression_free>
    1c10:	mov	sp, fp
    1c14:	pop	{fp, pc}

00001c18 <coda_expression_free>:
    1c18:	push	{fp, lr}
    1c1c:	mov	fp, sp
    1c20:	sub	sp, sp, #16
    1c24:	str	r0, [fp, #-4]
    1c28:	str	r1, [sp, #8]
    1c2c:	ldr	r0, [sp, #8]
    1c30:	str	r0, [sp, #4]
    1c34:	ldr	r0, [fp, #-4]
    1c38:	bl	0 <free>
    1c3c:	mov	sp, fp
    1c40:	pop	{fp, pc}

00001c44 <coda_expression__flush_buffer>:
    1c44:	push	{fp, lr}
    1c48:	mov	fp, sp
    1c4c:	sub	sp, sp, #24
    1c50:	str	r0, [fp, #-4]
    1c54:	str	r1, [fp, #-8]
    1c58:	ldr	r0, [fp, #-8]
    1c5c:	str	r0, [sp, #12]
    1c60:	ldr	r0, [fp, #-4]
    1c64:	movw	r1, #0
    1c68:	cmp	r0, r1
    1c6c:	bne	1c74 <coda_expression__flush_buffer+0x30>
    1c70:	b	1d18 <coda_expression__flush_buffer+0xd4>
    1c74:	ldr	r0, [fp, #-4]
    1c78:	movw	r1, #0
    1c7c:	str	r1, [r0, #16]
    1c80:	ldr	r0, [fp, #-4]
    1c84:	ldr	r0, [r0, #4]
    1c88:	movw	r2, #0
    1c8c:	strb	r2, [r0]
    1c90:	ldr	r0, [fp, #-4]
    1c94:	ldr	r0, [r0, #4]
    1c98:	strb	r2, [r0, #1]
    1c9c:	ldr	r0, [fp, #-4]
    1ca0:	ldr	r0, [r0, #4]
    1ca4:	ldr	r2, [fp, #-4]
    1ca8:	str	r0, [r2, #8]
    1cac:	ldr	r0, [fp, #-4]
    1cb0:	movw	r2, #1
    1cb4:	str	r2, [r0, #28]
    1cb8:	ldr	r0, [fp, #-4]
    1cbc:	str	r1, [r0, #44]	; 0x2c
    1cc0:	ldr	r0, [fp, #-4]
    1cc4:	ldr	r2, [sp, #12]
    1cc8:	ldr	r2, [r2, #20]
    1ccc:	cmp	r2, r1
    1cd0:	str	r0, [sp, #8]
    1cd4:	beq	1cf4 <coda_expression__flush_buffer+0xb0>
    1cd8:	ldr	r0, [sp, #12]
    1cdc:	ldr	r1, [r0, #12]
    1ce0:	ldr	r0, [r0, #20]
    1ce4:	add	r0, r0, r1, lsl #2
    1ce8:	ldr	r0, [r0]
    1cec:	str	r0, [sp, #4]
    1cf0:	b	1d00 <coda_expression__flush_buffer+0xbc>
    1cf4:	movw	r0, #0
    1cf8:	str	r0, [sp, #4]
    1cfc:	b	1d00 <coda_expression__flush_buffer+0xbc>
    1d00:	ldr	r0, [sp, #4]
    1d04:	ldr	r1, [sp, #8]
    1d08:	cmp	r1, r0
    1d0c:	bne	1d18 <coda_expression__flush_buffer+0xd4>
    1d10:	ldr	r0, [fp, #-8]
    1d14:	bl	dac <coda_expression__load_buffer_state>
    1d18:	mov	sp, fp
    1d1c:	pop	{fp, pc}

00001d20 <coda_expression_push_buffer_state>:
    1d20:	push	{fp, lr}
    1d24:	mov	fp, sp
    1d28:	sub	sp, sp, #16
    1d2c:	str	r0, [fp, #-4]
    1d30:	str	r1, [sp, #8]
    1d34:	ldr	r0, [sp, #8]
    1d38:	str	r0, [sp, #4]
    1d3c:	ldr	r0, [fp, #-4]
    1d40:	movw	r1, #0
    1d44:	cmp	r0, r1
    1d48:	bne	1d50 <coda_expression_push_buffer_state+0x30>
    1d4c:	b	1e50 <coda_expression_push_buffer_state+0x130>
    1d50:	ldr	r0, [sp, #8]
    1d54:	bl	b94 <coda_expression_ensure_buffer_stack>
    1d58:	ldr	r0, [sp, #4]
    1d5c:	ldr	r0, [r0, #20]
    1d60:	movw	lr, #0
    1d64:	cmp	r0, lr
    1d68:	beq	1d90 <coda_expression_push_buffer_state+0x70>
    1d6c:	ldr	r0, [sp, #4]
    1d70:	ldr	r1, [r0, #12]
    1d74:	ldr	r0, [r0, #20]
    1d78:	add	r0, r0, r1, lsl #2
    1d7c:	ldr	r0, [r0]
    1d80:	movw	r1, #0
    1d84:	cmp	r0, r1
    1d88:	bne	1d94 <coda_expression_push_buffer_state+0x74>
    1d8c:	b	1dd8 <coda_expression_push_buffer_state+0xb8>
    1d90:	b	1dd8 <coda_expression_push_buffer_state+0xb8>
    1d94:	ldr	r0, [sp, #4]
    1d98:	ldrb	r1, [r0, #24]
    1d9c:	ldr	r0, [r0, #36]	; 0x24
    1da0:	strb	r1, [r0]
    1da4:	ldr	r0, [sp, #4]
    1da8:	ldr	r1, [r0, #12]
    1dac:	ldr	r2, [r0, #20]
    1db0:	ldr	r0, [r0, #36]	; 0x24
    1db4:	ldr	r1, [r2, r1, lsl #2]
    1db8:	str	r0, [r1, #8]
    1dbc:	ldr	r0, [sp, #4]
    1dc0:	ldr	r1, [r0, #12]
    1dc4:	ldr	r2, [r0, #20]
    1dc8:	ldr	r0, [r0, #28]
    1dcc:	add	r1, r2, r1, lsl #2
    1dd0:	ldr	r1, [r1]
    1dd4:	str	r0, [r1, #16]
    1dd8:	ldr	r0, [sp, #4]
    1ddc:	ldr	r0, [r0, #20]
    1de0:	movw	r1, #0
    1de4:	cmp	r0, r1
    1de8:	beq	1e10 <coda_expression_push_buffer_state+0xf0>
    1dec:	ldr	r0, [sp, #4]
    1df0:	ldr	r1, [r0, #12]
    1df4:	ldr	r0, [r0, #20]
    1df8:	add	r0, r0, r1, lsl #2
    1dfc:	ldr	r0, [r0]
    1e00:	movw	r1, #0
    1e04:	cmp	r0, r1
    1e08:	bne	1e14 <coda_expression_push_buffer_state+0xf4>
    1e0c:	b	1e24 <coda_expression_push_buffer_state+0x104>
    1e10:	b	1e24 <coda_expression_push_buffer_state+0x104>
    1e14:	ldr	r0, [sp, #4]
    1e18:	ldr	r1, [r0, #12]
    1e1c:	add	r1, r1, #1
    1e20:	str	r1, [r0, #12]
    1e24:	ldr	r0, [fp, #-4]
    1e28:	ldr	r1, [sp, #4]
    1e2c:	ldr	r2, [r1, #12]
    1e30:	ldr	r1, [r1, #20]
    1e34:	add	r1, r1, r2, lsl #2
    1e38:	str	r0, [r1]
    1e3c:	ldr	r0, [sp, #8]
    1e40:	bl	dac <coda_expression__load_buffer_state>
    1e44:	ldr	r0, [sp, #4]
    1e48:	movw	r1, #1
    1e4c:	str	r1, [r0, #48]	; 0x30
    1e50:	mov	sp, fp
    1e54:	pop	{fp, pc}

00001e58 <coda_expression_pop_buffer_state>:
    1e58:	push	{fp, lr}
    1e5c:	mov	fp, sp
    1e60:	sub	sp, sp, #16
    1e64:	str	r0, [fp, #-4]
    1e68:	ldr	r0, [fp, #-4]
    1e6c:	str	r0, [sp, #8]
    1e70:	ldr	r0, [sp, #8]
    1e74:	ldr	r0, [r0, #20]
    1e78:	movw	r1, #0
    1e7c:	cmp	r0, r1
    1e80:	beq	1ea8 <coda_expression_pop_buffer_state+0x50>
    1e84:	ldr	r0, [sp, #8]
    1e88:	ldr	r1, [r0, #12]
    1e8c:	ldr	r0, [r0, #20]
    1e90:	add	r0, r0, r1, lsl #2
    1e94:	ldr	r0, [r0]
    1e98:	movw	r1, #0
    1e9c:	cmp	r0, r1
    1ea0:	bne	1eb0 <coda_expression_pop_buffer_state+0x58>
    1ea4:	b	1eac <coda_expression_pop_buffer_state+0x54>
    1ea8:	b	1eac <coda_expression_pop_buffer_state+0x54>
    1eac:	b	1f84 <coda_expression_pop_buffer_state+0x12c>
    1eb0:	ldr	r0, [sp, #8]
    1eb4:	ldr	r0, [r0, #20]
    1eb8:	movw	r1, #0
    1ebc:	cmp	r0, r1
    1ec0:	beq	1ee0 <coda_expression_pop_buffer_state+0x88>
    1ec4:	ldr	r0, [sp, #8]
    1ec8:	ldr	r1, [r0, #12]
    1ecc:	ldr	r0, [r0, #20]
    1ed0:	add	r0, r0, r1, lsl #2
    1ed4:	ldr	r0, [r0]
    1ed8:	str	r0, [sp, #4]
    1edc:	b	1eec <coda_expression_pop_buffer_state+0x94>
    1ee0:	movw	r0, #0
    1ee4:	str	r0, [sp, #4]
    1ee8:	b	1eec <coda_expression_pop_buffer_state+0x94>
    1eec:	ldr	r0, [sp, #4]
    1ef0:	ldr	r1, [fp, #-4]
    1ef4:	bl	1b48 <coda_expression__delete_buffer>
    1ef8:	ldr	r0, [sp, #8]
    1efc:	ldr	r1, [r0, #12]
    1f00:	ldr	r0, [r0, #20]
    1f04:	add	r0, r0, r1, lsl #2
    1f08:	movw	r1, #0
    1f0c:	str	r1, [r0]
    1f10:	ldr	r0, [sp, #8]
    1f14:	ldr	r0, [r0, #12]
    1f18:	cmp	r0, #0
    1f1c:	bls	1f34 <coda_expression_pop_buffer_state+0xdc>
    1f20:	ldr	r0, [sp, #8]
    1f24:	ldr	r1, [r0, #12]
    1f28:	mvn	r2, #0
    1f2c:	add	r1, r1, r2
    1f30:	str	r1, [r0, #12]
    1f34:	ldr	r0, [sp, #8]
    1f38:	ldr	r0, [r0, #20]
    1f3c:	movw	r1, #0
    1f40:	cmp	r0, r1
    1f44:	beq	1f6c <coda_expression_pop_buffer_state+0x114>
    1f48:	ldr	r0, [sp, #8]
    1f4c:	ldr	r1, [r0, #12]
    1f50:	ldr	r0, [r0, #20]
    1f54:	add	r0, r0, r1, lsl #2
    1f58:	ldr	r0, [r0]
    1f5c:	movw	r1, #0
    1f60:	cmp	r0, r1
    1f64:	bne	1f70 <coda_expression_pop_buffer_state+0x118>
    1f68:	b	1f84 <coda_expression_pop_buffer_state+0x12c>
    1f6c:	b	1f84 <coda_expression_pop_buffer_state+0x12c>
    1f70:	ldr	r0, [fp, #-4]
    1f74:	bl	dac <coda_expression__load_buffer_state>
    1f78:	ldr	r0, [sp, #8]
    1f7c:	movw	lr, #1
    1f80:	str	lr, [r0, #48]	; 0x30
    1f84:	mov	sp, fp
    1f88:	pop	{fp, pc}

00001f8c <coda_expression__scan_buffer>:
    1f8c:	push	{fp, lr}
    1f90:	mov	fp, sp
    1f94:	sub	sp, sp, #24
    1f98:	str	r0, [fp, #-8]
    1f9c:	str	r1, [sp, #12]
    1fa0:	str	r2, [sp, #8]
    1fa4:	ldr	r0, [sp, #12]
    1fa8:	cmp	r0, #2
    1fac:	bcc	1fe8 <coda_expression__scan_buffer+0x5c>
    1fb0:	ldr	r0, [fp, #-8]
    1fb4:	ldr	r1, [sp, #12]
    1fb8:	sub	r1, r1, #2
    1fbc:	add	r0, r0, r1
    1fc0:	ldrb	r0, [r0]
    1fc4:	cmp	r0, #0
    1fc8:	bne	1fe8 <coda_expression__scan_buffer+0x5c>
    1fcc:	ldr	r0, [fp, #-8]
    1fd0:	ldr	r1, [sp, #12]
    1fd4:	sub	r1, r1, #1
    1fd8:	add	r0, r0, r1
    1fdc:	ldrb	r0, [r0]
    1fe0:	cmp	r0, #0
    1fe4:	beq	1ff4 <coda_expression__scan_buffer+0x68>
    1fe8:	movw	r0, #0
    1fec:	str	r0, [fp, #-4]
    1ff0:	b	20a4 <coda_expression__scan_buffer+0x118>
    1ff4:	ldr	r1, [sp, #8]
    1ff8:	movw	r0, #48	; 0x30
    1ffc:	bl	1b1c <coda_expression_alloc>
    2000:	str	r0, [sp, #4]
    2004:	ldr	r0, [sp, #4]
    2008:	movw	r1, #0
    200c:	cmp	r0, r1
    2010:	bne	2024 <coda_expression__scan_buffer+0x98>
    2014:	ldr	r1, [sp, #8]
    2018:	movw	r0, #0
    201c:	movt	r0, #0
    2020:	bl	17e4 <yy_fatal_error>
    2024:	ldr	r0, [sp, #12]
    2028:	sub	r0, r0, #2
    202c:	ldr	r1, [sp, #4]
    2030:	str	r0, [r1, #12]
    2034:	ldr	r0, [fp, #-8]
    2038:	ldr	r1, [sp, #4]
    203c:	str	r0, [r1, #4]
    2040:	ldr	r1, [sp, #4]
    2044:	str	r0, [r1, #8]
    2048:	ldr	r0, [sp, #4]
    204c:	movw	r1, #0
    2050:	str	r1, [r0, #20]
    2054:	ldr	r0, [sp, #4]
    2058:	str	r1, [r0]
    205c:	ldr	r0, [sp, #4]
    2060:	ldr	r0, [r0, #12]
    2064:	ldr	r2, [sp, #4]
    2068:	str	r0, [r2, #16]
    206c:	ldr	r0, [sp, #4]
    2070:	str	r1, [r0, #24]
    2074:	ldr	r0, [sp, #4]
    2078:	movw	r2, #1
    207c:	str	r2, [r0, #28]
    2080:	ldr	r0, [sp, #4]
    2084:	str	r1, [r0, #40]	; 0x28
    2088:	ldr	r0, [sp, #4]
    208c:	str	r1, [r0, #44]	; 0x2c
    2090:	ldr	r0, [sp, #4]
    2094:	ldr	r1, [sp, #8]
    2098:	bl	19f4 <coda_expression__switch_to_buffer>
    209c:	ldr	r0, [sp, #4]
    20a0:	str	r0, [fp, #-4]
    20a4:	ldr	r0, [fp, #-4]
    20a8:	mov	sp, fp
    20ac:	pop	{fp, pc}

000020b0 <coda_expression__scan_string>:
    20b0:	push	{fp, lr}
    20b4:	mov	fp, sp
    20b8:	sub	sp, sp, #16
    20bc:	str	r0, [fp, #-4]
    20c0:	str	r1, [sp, #8]
    20c4:	ldr	r0, [fp, #-4]
    20c8:	ldr	r1, [fp, #-4]
    20cc:	str	r0, [sp, #4]
    20d0:	mov	r0, r1
    20d4:	bl	0 <strlen>
    20d8:	ldr	r2, [sp, #8]
    20dc:	ldr	r1, [sp, #4]
    20e0:	str	r0, [sp]
    20e4:	mov	r0, r1
    20e8:	ldr	r1, [sp]
    20ec:	bl	20f8 <coda_expression__scan_bytes>
    20f0:	mov	sp, fp
    20f4:	pop	{fp, pc}

000020f8 <coda_expression__scan_bytes>:
    20f8:	push	{fp, lr}
    20fc:	mov	fp, sp
    2100:	sub	sp, sp, #32
    2104:	str	r0, [fp, #-4]
    2108:	str	r1, [fp, #-8]
    210c:	str	r2, [fp, #-12]
    2110:	ldr	r0, [fp, #-8]
    2114:	add	r0, r0, #2
    2118:	str	r0, [sp, #8]
    211c:	ldr	r0, [sp, #8]
    2120:	ldr	r1, [fp, #-12]
    2124:	bl	1b1c <coda_expression_alloc>
    2128:	str	r0, [sp, #12]
    212c:	ldr	r0, [sp, #12]
    2130:	movw	r1, #0
    2134:	cmp	r0, r1
    2138:	bne	214c <coda_expression__scan_bytes+0x54>
    213c:	ldr	r1, [fp, #-12]
    2140:	movw	r0, #0
    2144:	movt	r0, #0
    2148:	bl	17e4 <yy_fatal_error>
    214c:	movw	r0, #0
    2150:	str	r0, [sp, #4]
    2154:	ldr	r0, [sp, #4]
    2158:	ldr	r1, [fp, #-8]
    215c:	cmp	r0, r1
    2160:	bge	2194 <coda_expression__scan_bytes+0x9c>
    2164:	ldr	r0, [fp, #-4]
    2168:	ldr	r1, [sp, #4]
    216c:	add	r0, r0, r1
    2170:	ldrb	r0, [r0]
    2174:	ldr	r1, [sp, #12]
    2178:	ldr	r2, [sp, #4]
    217c:	add	r1, r1, r2
    2180:	strb	r0, [r1]
    2184:	ldr	r0, [sp, #4]
    2188:	add	r0, r0, #1
    218c:	str	r0, [sp, #4]
    2190:	b	2154 <coda_expression__scan_bytes+0x5c>
    2194:	ldr	r0, [sp, #12]
    2198:	ldr	r1, [fp, #-8]
    219c:	add	r1, r1, #1
    21a0:	add	r0, r0, r1
    21a4:	movw	r1, #0
    21a8:	strb	r1, [r0]
    21ac:	ldr	r0, [sp, #12]
    21b0:	ldr	r2, [fp, #-8]
    21b4:	add	r0, r0, r2
    21b8:	strb	r1, [r0]
    21bc:	ldr	r0, [sp, #12]
    21c0:	ldr	r1, [sp, #8]
    21c4:	ldr	r2, [fp, #-12]
    21c8:	bl	1f8c <coda_expression__scan_buffer>
    21cc:	str	r0, [sp, #16]
    21d0:	ldr	r0, [sp, #16]
    21d4:	movw	r1, #0
    21d8:	cmp	r0, r1
    21dc:	bne	21f0 <coda_expression__scan_bytes+0xf8>
    21e0:	ldr	r1, [fp, #-12]
    21e4:	movw	r0, #0
    21e8:	movt	r0, #0
    21ec:	bl	17e4 <yy_fatal_error>
    21f0:	ldr	r0, [sp, #16]
    21f4:	movw	r1, #1
    21f8:	str	r1, [r0, #20]
    21fc:	ldr	r0, [sp, #16]
    2200:	mov	sp, fp
    2204:	pop	{fp, pc}

00002208 <coda_expression_get_extra>:
    2208:	sub	sp, sp, #8
    220c:	str	r0, [sp, #4]
    2210:	ldr	r0, [sp, #4]
    2214:	str	r0, [sp]
    2218:	ldr	r0, [sp]
    221c:	ldr	r0, [r0]
    2220:	add	sp, sp, #8
    2224:	bx	lr

00002228 <coda_expression_get_lineno>:
    2228:	sub	sp, sp, #12
    222c:	str	r0, [sp, #4]
    2230:	ldr	r0, [sp, #4]
    2234:	str	r0, [sp]
    2238:	ldr	r0, [sp]
    223c:	ldr	r0, [r0, #20]
    2240:	movw	r1, #0
    2244:	cmp	r0, r1
    2248:	beq	2270 <coda_expression_get_lineno+0x48>
    224c:	ldr	r0, [sp]
    2250:	ldr	r1, [r0, #12]
    2254:	ldr	r0, [r0, #20]
    2258:	add	r0, r0, r1, lsl #2
    225c:	ldr	r0, [r0]
    2260:	movw	r1, #0
    2264:	cmp	r0, r1
    2268:	bne	2280 <coda_expression_get_lineno+0x58>
    226c:	b	2274 <coda_expression_get_lineno+0x4c>
    2270:	b	2274 <coda_expression_get_lineno+0x4c>
    2274:	movw	r0, #0
    2278:	str	r0, [sp, #8]
    227c:	b	229c <coda_expression_get_lineno+0x74>
    2280:	ldr	r0, [sp]
    2284:	ldr	r1, [r0, #12]
    2288:	ldr	r0, [r0, #20]
    228c:	add	r0, r0, r1, lsl #2
    2290:	ldr	r0, [r0]
    2294:	ldr	r0, [r0, #32]
    2298:	str	r0, [sp, #8]
    229c:	ldr	r0, [sp, #8]
    22a0:	add	sp, sp, #12
    22a4:	bx	lr

000022a8 <coda_expression_get_column>:
    22a8:	sub	sp, sp, #12
    22ac:	str	r0, [sp, #4]
    22b0:	ldr	r0, [sp, #4]
    22b4:	str	r0, [sp]
    22b8:	ldr	r0, [sp]
    22bc:	ldr	r0, [r0, #20]
    22c0:	movw	r1, #0
    22c4:	cmp	r0, r1
    22c8:	beq	22f0 <coda_expression_get_column+0x48>
    22cc:	ldr	r0, [sp]
    22d0:	ldr	r1, [r0, #12]
    22d4:	ldr	r0, [r0, #20]
    22d8:	add	r0, r0, r1, lsl #2
    22dc:	ldr	r0, [r0]
    22e0:	movw	r1, #0
    22e4:	cmp	r0, r1
    22e8:	bne	2300 <coda_expression_get_column+0x58>
    22ec:	b	22f4 <coda_expression_get_column+0x4c>
    22f0:	b	22f4 <coda_expression_get_column+0x4c>
    22f4:	movw	r0, #0
    22f8:	str	r0, [sp, #8]
    22fc:	b	231c <coda_expression_get_column+0x74>
    2300:	ldr	r0, [sp]
    2304:	ldr	r1, [r0, #12]
    2308:	ldr	r0, [r0, #20]
    230c:	add	r0, r0, r1, lsl #2
    2310:	ldr	r0, [r0]
    2314:	ldr	r0, [r0, #36]	; 0x24
    2318:	str	r0, [sp, #8]
    231c:	ldr	r0, [sp, #8]
    2320:	add	sp, sp, #12
    2324:	bx	lr

00002328 <coda_expression_get_in>:
    2328:	sub	sp, sp, #8
    232c:	str	r0, [sp, #4]
    2330:	ldr	r0, [sp, #4]
    2334:	str	r0, [sp]
    2338:	ldr	r0, [sp]
    233c:	ldr	r0, [r0, #4]
    2340:	add	sp, sp, #8
    2344:	bx	lr

00002348 <coda_expression_get_out>:
    2348:	sub	sp, sp, #8
    234c:	str	r0, [sp, #4]
    2350:	ldr	r0, [sp, #4]
    2354:	str	r0, [sp]
    2358:	ldr	r0, [sp]
    235c:	ldr	r0, [r0, #8]
    2360:	add	sp, sp, #8
    2364:	bx	lr

00002368 <coda_expression_get_leng>:
    2368:	sub	sp, sp, #8
    236c:	str	r0, [sp, #4]
    2370:	ldr	r0, [sp, #4]
    2374:	str	r0, [sp]
    2378:	ldr	r0, [sp]
    237c:	ldr	r0, [r0, #32]
    2380:	add	sp, sp, #8
    2384:	bx	lr

00002388 <coda_expression_get_text>:
    2388:	sub	sp, sp, #8
    238c:	str	r0, [sp, #4]
    2390:	ldr	r0, [sp, #4]
    2394:	str	r0, [sp]
    2398:	ldr	r0, [sp]
    239c:	ldr	r0, [r0, #80]	; 0x50
    23a0:	add	sp, sp, #8
    23a4:	bx	lr

000023a8 <coda_expression_set_extra>:
    23a8:	sub	sp, sp, #12
    23ac:	str	r0, [sp, #8]
    23b0:	str	r1, [sp, #4]
    23b4:	ldr	r0, [sp, #4]
    23b8:	str	r0, [sp]
    23bc:	ldr	r0, [sp, #8]
    23c0:	ldr	r1, [sp]
    23c4:	str	r0, [r1]
    23c8:	add	sp, sp, #12
    23cc:	bx	lr

000023d0 <coda_expression_set_lineno>:
    23d0:	push	{fp, lr}
    23d4:	mov	fp, sp
    23d8:	sub	sp, sp, #16
    23dc:	str	r0, [fp, #-4]
    23e0:	str	r1, [sp, #8]
    23e4:	ldr	r0, [sp, #8]
    23e8:	str	r0, [sp, #4]
    23ec:	ldr	r0, [sp, #4]
    23f0:	ldr	r0, [r0, #20]
    23f4:	movw	r1, #0
    23f8:	cmp	r0, r1
    23fc:	beq	2424 <coda_expression_set_lineno+0x54>
    2400:	ldr	r0, [sp, #4]
    2404:	ldr	r1, [r0, #12]
    2408:	ldr	r0, [r0, #20]
    240c:	add	r0, r0, r1, lsl #2
    2410:	ldr	r0, [r0]
    2414:	movw	r1, #0
    2418:	cmp	r0, r1
    241c:	bne	2438 <coda_expression_set_lineno+0x68>
    2420:	b	2428 <coda_expression_set_lineno+0x58>
    2424:	b	2428 <coda_expression_set_lineno+0x58>
    2428:	ldr	r1, [sp, #8]
    242c:	movw	r0, #0
    2430:	movt	r0, #0
    2434:	bl	17e4 <yy_fatal_error>
    2438:	ldr	r0, [fp, #-4]
    243c:	ldr	r1, [sp, #4]
    2440:	ldr	r2, [r1, #12]
    2444:	ldr	r1, [r1, #20]
    2448:	add	r1, r1, r2, lsl #2
    244c:	ldr	r1, [r1]
    2450:	str	r0, [r1, #32]
    2454:	mov	sp, fp
    2458:	pop	{fp, pc}

0000245c <coda_expression_set_column>:
    245c:	push	{fp, lr}
    2460:	mov	fp, sp
    2464:	sub	sp, sp, #16
    2468:	str	r0, [fp, #-4]
    246c:	str	r1, [sp, #8]
    2470:	ldr	r0, [sp, #8]
    2474:	str	r0, [sp, #4]
    2478:	ldr	r0, [sp, #4]
    247c:	ldr	r0, [r0, #20]
    2480:	movw	r1, #0
    2484:	cmp	r0, r1
    2488:	beq	24b0 <coda_expression_set_column+0x54>
    248c:	ldr	r0, [sp, #4]
    2490:	ldr	r1, [r0, #12]
    2494:	ldr	r0, [r0, #20]
    2498:	add	r0, r0, r1, lsl #2
    249c:	ldr	r0, [r0]
    24a0:	movw	r1, #0
    24a4:	cmp	r0, r1
    24a8:	bne	24c4 <coda_expression_set_column+0x68>
    24ac:	b	24b4 <coda_expression_set_column+0x58>
    24b0:	b	24b4 <coda_expression_set_column+0x58>
    24b4:	ldr	r1, [sp, #8]
    24b8:	movw	r0, #0
    24bc:	movt	r0, #0
    24c0:	bl	17e4 <yy_fatal_error>
    24c4:	ldr	r0, [fp, #-4]
    24c8:	ldr	r1, [sp, #4]
    24cc:	ldr	r2, [r1, #12]
    24d0:	ldr	r1, [r1, #20]
    24d4:	add	r1, r1, r2, lsl #2
    24d8:	ldr	r1, [r1]
    24dc:	str	r0, [r1, #36]	; 0x24
    24e0:	mov	sp, fp
    24e4:	pop	{fp, pc}

000024e8 <coda_expression_set_in>:
    24e8:	sub	sp, sp, #12
    24ec:	str	r0, [sp, #8]
    24f0:	str	r1, [sp, #4]
    24f4:	ldr	r0, [sp, #4]
    24f8:	str	r0, [sp]
    24fc:	ldr	r0, [sp, #8]
    2500:	ldr	r1, [sp]
    2504:	str	r0, [r1, #4]
    2508:	add	sp, sp, #12
    250c:	bx	lr

00002510 <coda_expression_set_out>:
    2510:	sub	sp, sp, #12
    2514:	str	r0, [sp, #8]
    2518:	str	r1, [sp, #4]
    251c:	ldr	r0, [sp, #4]
    2520:	str	r0, [sp]
    2524:	ldr	r0, [sp, #8]
    2528:	ldr	r1, [sp]
    252c:	str	r0, [r1, #8]
    2530:	add	sp, sp, #12
    2534:	bx	lr

00002538 <coda_expression_get_debug>:
    2538:	sub	sp, sp, #8
    253c:	str	r0, [sp, #4]
    2540:	ldr	r0, [sp, #4]
    2544:	str	r0, [sp]
    2548:	ldr	r0, [sp]
    254c:	ldr	r0, [r0, #76]	; 0x4c
    2550:	add	sp, sp, #8
    2554:	bx	lr

00002558 <coda_expression_set_debug>:
    2558:	sub	sp, sp, #12
    255c:	str	r0, [sp, #8]
    2560:	str	r1, [sp, #4]
    2564:	ldr	r0, [sp, #4]
    2568:	str	r0, [sp]
    256c:	ldr	r0, [sp, #8]
    2570:	ldr	r1, [sp]
    2574:	str	r0, [r1, #76]	; 0x4c
    2578:	add	sp, sp, #12
    257c:	bx	lr

00002580 <coda_expression_get_lval>:
    2580:	sub	sp, sp, #8
    2584:	str	r0, [sp, #4]
    2588:	ldr	r0, [sp, #4]
    258c:	str	r0, [sp]
    2590:	ldr	r0, [sp]
    2594:	ldr	r0, [r0, #92]	; 0x5c
    2598:	add	sp, sp, #8
    259c:	bx	lr

000025a0 <coda_expression_set_lval>:
    25a0:	sub	sp, sp, #12
    25a4:	str	r0, [sp, #8]
    25a8:	str	r1, [sp, #4]
    25ac:	ldr	r0, [sp, #4]
    25b0:	str	r0, [sp]
    25b4:	ldr	r0, [sp, #8]
    25b8:	ldr	r1, [sp]
    25bc:	str	r0, [r1, #92]	; 0x5c
    25c0:	add	sp, sp, #12
    25c4:	bx	lr

000025c8 <coda_expression_lex_init>:
    25c8:	push	{fp, lr}
    25cc:	mov	fp, sp
    25d0:	sub	sp, sp, #8
    25d4:	str	r0, [sp]
    25d8:	ldr	r0, [sp]
    25dc:	movw	r1, #0
    25e0:	cmp	r0, r1
    25e4:	bne	2600 <coda_expression_lex_init+0x38>
    25e8:	bl	0 <__errno_location>
    25ec:	movw	lr, #22
    25f0:	str	lr, [r0]
    25f4:	movw	r0, #1
    25f8:	str	r0, [sp, #4]
    25fc:	b	2668 <coda_expression_lex_init+0xa0>
    2600:	movw	r0, #96	; 0x60
    2604:	movw	r1, #0
    2608:	bl	1b1c <coda_expression_alloc>
    260c:	ldr	r1, [sp]
    2610:	str	r0, [r1]
    2614:	ldr	r0, [sp]
    2618:	ldr	r0, [r0]
    261c:	movw	r1, #0
    2620:	cmp	r0, r1
    2624:	bne	2640 <coda_expression_lex_init+0x78>
    2628:	bl	0 <__errno_location>
    262c:	movw	lr, #12
    2630:	str	lr, [r0]
    2634:	movw	r0, #1
    2638:	str	r0, [sp, #4]
    263c:	b	2668 <coda_expression_lex_init+0xa0>
    2640:	ldr	r0, [sp]
    2644:	ldr	r0, [r0]
    2648:	movw	r1, #0
    264c:	and	r1, r1, #255	; 0xff
    2650:	movw	r2, #96	; 0x60
    2654:	bl	0 <memset>
    2658:	ldr	r0, [sp]
    265c:	ldr	r0, [r0]
    2660:	bl	2674 <yy_init_globals>
    2664:	str	r0, [sp, #4]
    2668:	ldr	r0, [sp, #4]
    266c:	mov	sp, fp
    2670:	pop	{fp, pc}

00002674 <yy_init_globals>:
    2674:	sub	sp, sp, #8
    2678:	str	r0, [sp, #4]
    267c:	ldr	r0, [sp, #4]
    2680:	str	r0, [sp]
    2684:	ldr	r0, [sp]
    2688:	movw	r1, #0
    268c:	str	r1, [r0, #20]
    2690:	ldr	r0, [sp]
    2694:	str	r1, [r0, #12]
    2698:	ldr	r0, [sp]
    269c:	str	r1, [r0, #16]
    26a0:	ldr	r0, [sp]
    26a4:	str	r1, [r0, #36]	; 0x24
    26a8:	ldr	r0, [sp]
    26ac:	str	r1, [r0, #40]	; 0x28
    26b0:	ldr	r0, [sp]
    26b4:	str	r1, [r0, #44]	; 0x2c
    26b8:	ldr	r0, [sp]
    26bc:	str	r1, [r0, #52]	; 0x34
    26c0:	ldr	r0, [sp]
    26c4:	str	r1, [r0, #56]	; 0x38
    26c8:	ldr	r0, [sp]
    26cc:	str	r1, [r0, #60]	; 0x3c
    26d0:	ldr	r0, [sp]
    26d4:	str	r1, [r0, #4]
    26d8:	ldr	r0, [sp]
    26dc:	str	r1, [r0, #8]
    26e0:	mov	r0, r1
    26e4:	add	sp, sp, #8
    26e8:	bx	lr

000026ec <coda_expression_lex_init_extra>:
    26ec:	push	{fp, lr}
    26f0:	mov	fp, sp
    26f4:	sub	sp, sp, #112	; 0x70
    26f8:	str	r0, [fp, #-8]
    26fc:	str	r1, [fp, #-12]
    2700:	ldr	r0, [fp, #-8]
    2704:	add	r1, sp, #4
    2708:	bl	23a8 <coda_expression_set_extra>
    270c:	ldr	r0, [fp, #-12]
    2710:	movw	r1, #0
    2714:	cmp	r0, r1
    2718:	bne	2734 <coda_expression_lex_init_extra+0x48>
    271c:	bl	0 <__errno_location>
    2720:	movw	lr, #22
    2724:	str	lr, [r0]
    2728:	movw	r0, #1
    272c:	str	r0, [fp, #-4]
    2730:	b	27b8 <coda_expression_lex_init_extra+0xcc>
    2734:	add	r0, sp, #4
    2738:	movw	r1, #96	; 0x60
    273c:	str	r0, [sp]
    2740:	mov	r0, r1
    2744:	ldr	r1, [sp]
    2748:	bl	1b1c <coda_expression_alloc>
    274c:	ldr	r1, [fp, #-12]
    2750:	str	r0, [r1]
    2754:	ldr	r0, [fp, #-12]
    2758:	ldr	r0, [r0]
    275c:	movw	r1, #0
    2760:	cmp	r0, r1
    2764:	bne	2780 <coda_expression_lex_init_extra+0x94>
    2768:	bl	0 <__errno_location>
    276c:	movw	lr, #12
    2770:	str	lr, [r0]
    2774:	movw	r0, #1
    2778:	str	r0, [fp, #-4]
    277c:	b	27b8 <coda_expression_lex_init_extra+0xcc>
    2780:	ldr	r0, [fp, #-12]
    2784:	ldr	r0, [r0]
    2788:	movw	r1, #0
    278c:	and	r1, r1, #255	; 0xff
    2790:	movw	r2, #96	; 0x60
    2794:	bl	0 <memset>
    2798:	ldr	r0, [fp, #-8]
    279c:	ldr	r1, [fp, #-12]
    27a0:	ldr	r1, [r1]
    27a4:	bl	23a8 <coda_expression_set_extra>
    27a8:	ldr	r0, [fp, #-12]
    27ac:	ldr	r0, [r0]
    27b0:	bl	2674 <yy_init_globals>
    27b4:	str	r0, [fp, #-4]
    27b8:	ldr	r0, [fp, #-4]
    27bc:	mov	sp, fp
    27c0:	pop	{fp, pc}

000027c4 <coda_expression_lex_destroy>:
    27c4:	push	{fp, lr}
    27c8:	mov	fp, sp
    27cc:	sub	sp, sp, #24
    27d0:	str	r0, [fp, #-4]
    27d4:	ldr	r0, [fp, #-4]
    27d8:	str	r0, [fp, #-8]
    27dc:	ldr	r0, [fp, #-8]
    27e0:	ldr	r0, [r0, #20]
    27e4:	movw	r1, #0
    27e8:	cmp	r0, r1
    27ec:	beq	280c <coda_expression_lex_destroy+0x48>
    27f0:	ldr	r0, [fp, #-8]
    27f4:	ldr	r1, [r0, #12]
    27f8:	ldr	r0, [r0, #20]
    27fc:	add	r0, r0, r1, lsl #2
    2800:	ldr	r0, [r0]
    2804:	str	r0, [sp, #12]
    2808:	b	2818 <coda_expression_lex_destroy+0x54>
    280c:	movw	r0, #0
    2810:	str	r0, [sp, #12]
    2814:	b	2818 <coda_expression_lex_destroy+0x54>
    2818:	ldr	r0, [sp, #12]
    281c:	movw	r1, #0
    2820:	cmp	r0, r1
    2824:	beq	2894 <coda_expression_lex_destroy+0xd0>
    2828:	ldr	r0, [fp, #-8]
    282c:	ldr	r0, [r0, #20]
    2830:	movw	r1, #0
    2834:	cmp	r0, r1
    2838:	beq	2858 <coda_expression_lex_destroy+0x94>
    283c:	ldr	r0, [fp, #-8]
    2840:	ldr	r1, [r0, #12]
    2844:	ldr	r0, [r0, #20]
    2848:	add	r0, r0, r1, lsl #2
    284c:	ldr	r0, [r0]
    2850:	str	r0, [sp, #8]
    2854:	b	2864 <coda_expression_lex_destroy+0xa0>
    2858:	movw	r0, #0
    285c:	str	r0, [sp, #8]
    2860:	b	2864 <coda_expression_lex_destroy+0xa0>
    2864:	ldr	r0, [sp, #8]
    2868:	ldr	r1, [fp, #-4]
    286c:	bl	1b48 <coda_expression__delete_buffer>
    2870:	ldr	r0, [fp, #-8]
    2874:	ldr	r1, [r0, #12]
    2878:	ldr	r0, [r0, #20]
    287c:	add	r0, r0, r1, lsl #2
    2880:	movw	r1, #0
    2884:	str	r1, [r0]
    2888:	ldr	r0, [fp, #-4]
    288c:	bl	1e58 <coda_expression_pop_buffer_state>
    2890:	b	27dc <coda_expression_lex_destroy+0x18>
    2894:	ldr	r0, [fp, #-8]
    2898:	ldr	r0, [r0, #20]
    289c:	ldr	r1, [fp, #-4]
    28a0:	bl	1c18 <coda_expression_free>
    28a4:	ldr	r0, [fp, #-8]
    28a8:	movw	r1, #0
    28ac:	str	r1, [r0, #20]
    28b0:	ldr	r0, [fp, #-8]
    28b4:	ldr	r0, [r0, #60]	; 0x3c
    28b8:	ldr	r1, [fp, #-4]
    28bc:	bl	1c18 <coda_expression_free>
    28c0:	ldr	r0, [fp, #-8]
    28c4:	movw	r1, #0
    28c8:	str	r1, [r0, #60]	; 0x3c
    28cc:	ldr	r0, [fp, #-4]
    28d0:	bl	2674 <yy_init_globals>
    28d4:	ldr	r1, [fp, #-4]
    28d8:	ldr	lr, [fp, #-4]
    28dc:	str	r0, [sp, #4]
    28e0:	mov	r0, r1
    28e4:	mov	r1, lr
    28e8:	bl	1c18 <coda_expression_free>
    28ec:	movw	r0, #0
    28f0:	str	r0, [fp, #-4]
    28f4:	mov	sp, fp
    28f8:	pop	{fp, pc}

000028fc <coda_expression_realloc>:
    28fc:	push	{fp, lr}
    2900:	mov	fp, sp
    2904:	sub	sp, sp, #16
    2908:	str	r0, [fp, #-4]
    290c:	str	r1, [sp, #8]
    2910:	str	r2, [sp, #4]
    2914:	ldr	r0, [sp, #4]
    2918:	str	r0, [sp]
    291c:	ldr	r0, [fp, #-4]
    2920:	ldr	r1, [sp, #8]
    2924:	bl	0 <realloc>
    2928:	mov	sp, fp
    292c:	pop	{fp, pc}
