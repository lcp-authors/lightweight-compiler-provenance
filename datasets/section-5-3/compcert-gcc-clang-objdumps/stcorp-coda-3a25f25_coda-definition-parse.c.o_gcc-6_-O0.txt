
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <xml_element_name>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #20
       c:	str	r0, [fp, #-16]
      10:	ldr	r3, [fp, #-16]
      14:	cmn	r3, #1
      18:	bne	24 <xml_element_name+0x24>
      1c:	ldr	r3, [pc, #80]	; 74 <xml_element_name+0x74>
      20:	b	64 <xml_element_name+0x64>
      24:	ldr	r2, [pc, #76]	; 78 <xml_element_name+0x78>
      28:	ldr	r3, [fp, #-16]
      2c:	ldr	r3, [r2, r3, lsl #2]
      30:	str	r3, [fp, #-8]
      34:	b	44 <xml_element_name+0x44>
      38:	ldr	r3, [fp, #-8]
      3c:	add	r3, r3, #1
      40:	str	r3, [fp, #-8]
      44:	ldr	r3, [fp, #-8]
      48:	ldrb	r3, [r3]
      4c:	cmp	r3, #32
      50:	bne	38 <xml_element_name+0x38>
      54:	ldr	r3, [fp, #-8]
      58:	add	r3, r3, #1
      5c:	str	r3, [fp, #-8]
      60:	ldr	r3, [fp, #-8]
      64:	mov	r0, r3
      68:	add	sp, fp, #0
      6c:	pop	{fp}		; (ldr fp, [sp], #4)
      70:	bx	lr
      74:	.word	0x00000984
      78:	.word	0x00000000

0000007c <handle_ziparchive_error>:
      7c:	push	{r0, r1, r2, r3}
      80:	push	{fp, lr}
      84:	add	fp, sp, #4
      88:	sub	sp, sp, #8
      8c:	ldr	r1, [pc, #44]	; c0 <handle_ziparchive_error+0x44>
      90:	ldr	r0, [pc, #44]	; c4 <handle_ziparchive_error+0x48>
      94:	bl	0 <coda_set_error>
      98:	add	r3, fp, #8
      9c:	str	r3, [fp, #-8]
      a0:	ldr	r1, [fp, #-8]
      a4:	ldr	r0, [fp, #4]
      a8:	bl	0 <coda_add_error_message_vargs>
      ac:	nop			; (mov r0, r0)
      b0:	sub	sp, fp, #4
      b4:	pop	{fp, lr}
      b8:	add	sp, sp, #16
      bc:	bx	lr
      c0:	.word	0x00000990
      c4:	.word	0xfffffe70

000000c8 <is_whitespace>:
      c8:	push	{fp, lr}
      cc:	add	fp, sp, #4
      d0:	sub	sp, sp, #16
      d4:	str	r0, [fp, #-16]
      d8:	str	r1, [fp, #-20]	; 0xffffffec
      dc:	ldr	r3, [fp, #-16]
      e0:	cmp	r3, #0
      e4:	bne	fc <is_whitespace+0x34>
      e8:	ldr	r3, [pc, #172]	; 19c <is_whitespace+0xd4>
      ec:	ldr	r2, [pc, #172]	; 1a0 <is_whitespace+0xd8>
      f0:	ldr	r1, [pc, #172]	; 1a4 <is_whitespace+0xdc>
      f4:	ldr	r0, [pc, #172]	; 1a8 <is_whitespace+0xe0>
      f8:	bl	0 <__assert_fail>
      fc:	mov	r3, #0
     100:	str	r3, [fp, #-8]
     104:	b	17c <is_whitespace+0xb4>
     108:	ldr	r3, [fp, #-8]
     10c:	ldr	r2, [fp, #-16]
     110:	add	r3, r2, r3
     114:	ldrb	r3, [r3]
     118:	cmp	r3, #32
     11c:	beq	170 <is_whitespace+0xa8>
     120:	ldr	r3, [fp, #-8]
     124:	ldr	r2, [fp, #-16]
     128:	add	r3, r2, r3
     12c:	ldrb	r3, [r3]
     130:	cmp	r3, #9
     134:	beq	170 <is_whitespace+0xa8>
     138:	ldr	r3, [fp, #-8]
     13c:	ldr	r2, [fp, #-16]
     140:	add	r3, r2, r3
     144:	ldrb	r3, [r3]
     148:	cmp	r3, #10
     14c:	beq	170 <is_whitespace+0xa8>
     150:	ldr	r3, [fp, #-8]
     154:	ldr	r2, [fp, #-16]
     158:	add	r3, r2, r3
     15c:	ldrb	r3, [r3]
     160:	cmp	r3, #13
     164:	beq	170 <is_whitespace+0xa8>
     168:	mov	r3, #0
     16c:	b	190 <is_whitespace+0xc8>
     170:	ldr	r3, [fp, #-8]
     174:	add	r3, r3, #1
     178:	str	r3, [fp, #-8]
     17c:	ldr	r2, [fp, #-8]
     180:	ldr	r3, [fp, #-20]	; 0xffffffec
     184:	cmp	r2, r3
     188:	blt	108 <is_whitespace+0x40>
     18c:	mov	r3, #1
     190:	mov	r0, r3
     194:	sub	sp, fp, #4
     198:	pop	{fp, pc}
     19c:	.word	0x000021e0
     1a0:	.word	0x00000122
     1a4:	.word	0x000009bc
     1a8:	.word	0x00000a10

000001ac <regexp_match_string>:
     1ac:	push	{fp, lr}
     1b0:	add	fp, sp, #4
     1b4:	sub	sp, sp, #40	; 0x28
     1b8:	str	r0, [fp, #-32]	; 0xffffffe0
     1bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
     1c0:	bl	0 <strlen>
     1c4:	mov	r3, r0
     1c8:	str	r3, [fp, #-20]	; 0xffffffec
     1cc:	mov	r3, #0
     1d0:	str	r3, [fp, #-8]
     1d4:	mov	r3, #0
     1d8:	str	r3, [fp, #-12]
     1dc:	b	38c <regexp_match_string+0x1e0>
     1e0:	ldr	r3, [fp, #-12]
     1e4:	ldr	r2, [fp, #-32]	; 0xffffffe0
     1e8:	add	r3, r2, r3
     1ec:	ldrb	r3, [r3]
     1f0:	sub	r3, r3, #36	; 0x24
     1f4:	cmp	r3, #88	; 0x58
     1f8:	ldrls	pc, [pc, r3, lsl #2]
     1fc:	b	370 <regexp_match_string+0x1c4>
     200:	.word	0x00000364
     204:	.word	0x00000370
     208:	.word	0x00000370
     20c:	.word	0x00000370
     210:	.word	0x00000364
     214:	.word	0x00000364
     218:	.word	0x00000364
     21c:	.word	0x00000364
     220:	.word	0x00000370
     224:	.word	0x00000370
     228:	.word	0x00000364
     22c:	.word	0x00000370
     230:	.word	0x00000370
     234:	.word	0x00000370
     238:	.word	0x00000370
     23c:	.word	0x00000370
     240:	.word	0x00000370
     244:	.word	0x00000370
     248:	.word	0x00000370
     24c:	.word	0x00000370
     250:	.word	0x00000370
     254:	.word	0x00000370
     258:	.word	0x00000370
     25c:	.word	0x00000370
     260:	.word	0x00000370
     264:	.word	0x00000370
     268:	.word	0x00000370
     26c:	.word	0x00000364
     270:	.word	0x00000370
     274:	.word	0x00000370
     278:	.word	0x00000370
     27c:	.word	0x00000370
     280:	.word	0x00000370
     284:	.word	0x00000370
     288:	.word	0x00000370
     28c:	.word	0x00000370
     290:	.word	0x00000370
     294:	.word	0x00000370
     298:	.word	0x00000370
     29c:	.word	0x00000370
     2a0:	.word	0x00000370
     2a4:	.word	0x00000370
     2a8:	.word	0x00000370
     2ac:	.word	0x00000370
     2b0:	.word	0x00000370
     2b4:	.word	0x00000370
     2b8:	.word	0x00000370
     2bc:	.word	0x00000370
     2c0:	.word	0x00000370
     2c4:	.word	0x00000370
     2c8:	.word	0x00000370
     2cc:	.word	0x00000370
     2d0:	.word	0x00000370
     2d4:	.word	0x00000370
     2d8:	.word	0x00000370
     2dc:	.word	0x00000364
     2e0:	.word	0x00000364
     2e4:	.word	0x00000370
     2e8:	.word	0x00000364
     2ec:	.word	0x00000370
     2f0:	.word	0x00000370
     2f4:	.word	0x00000370
     2f8:	.word	0x00000370
     2fc:	.word	0x00000370
     300:	.word	0x00000370
     304:	.word	0x00000370
     308:	.word	0x00000370
     30c:	.word	0x00000370
     310:	.word	0x00000370
     314:	.word	0x00000370
     318:	.word	0x00000370
     31c:	.word	0x00000370
     320:	.word	0x00000370
     324:	.word	0x00000370
     328:	.word	0x00000370
     32c:	.word	0x00000370
     330:	.word	0x00000370
     334:	.word	0x00000370
     338:	.word	0x00000370
     33c:	.word	0x00000370
     340:	.word	0x00000370
     344:	.word	0x00000370
     348:	.word	0x00000370
     34c:	.word	0x00000370
     350:	.word	0x00000370
     354:	.word	0x00000370
     358:	.word	0x00000370
     35c:	.word	0x00000364
     360:	.word	0x00000364
     364:	ldr	r3, [fp, #-8]
     368:	add	r3, r3, #1
     36c:	str	r3, [fp, #-8]
     370:	ldr	r3, [fp, #-8]
     374:	add	r3, r3, #1
     378:	str	r3, [fp, #-8]
     37c:	nop			; (mov r0, r0)
     380:	ldr	r3, [fp, #-12]
     384:	add	r3, r3, #1
     388:	str	r3, [fp, #-12]
     38c:	ldr	r2, [fp, #-12]
     390:	ldr	r3, [fp, #-20]	; 0xffffffec
     394:	cmp	r2, r3
     398:	blt	1e0 <regexp_match_string+0x34>
     39c:	ldr	r3, [fp, #-8]
     3a0:	add	r3, r3, #1
     3a4:	mov	r0, r3
     3a8:	bl	0 <malloc>
     3ac:	mov	r3, r0
     3b0:	str	r3, [fp, #-24]	; 0xffffffe8
     3b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     3b8:	cmp	r3, #0
     3bc:	bne	3e8 <regexp_match_string+0x23c>
     3c0:	ldr	r3, [fp, #-8]
     3c4:	add	r2, r3, #1
     3c8:	ldr	r3, [pc, #576]	; 610 <regexp_match_string+0x464>
     3cc:	str	r3, [sp]
     3d0:	ldr	r3, [pc, #572]	; 614 <regexp_match_string+0x468>
     3d4:	ldr	r1, [pc, #572]	; 618 <regexp_match_string+0x46c>
     3d8:	mvn	r0, #0
     3dc:	bl	0 <coda_set_error>
     3e0:	mov	r3, #0
     3e4:	b	604 <regexp_match_string+0x458>
     3e8:	mov	r3, #0
     3ec:	str	r3, [fp, #-16]
     3f0:	mov	r3, #0
     3f4:	str	r3, [fp, #-12]
     3f8:	b	5dc <regexp_match_string+0x430>
     3fc:	ldr	r3, [fp, #-12]
     400:	ldr	r2, [fp, #-32]	; 0xffffffe0
     404:	add	r3, r2, r3
     408:	ldrb	r3, [r3]
     40c:	sub	r3, r3, #36	; 0x24
     410:	cmp	r3, #88	; 0x58
     414:	ldrls	pc, [pc, r3, lsl #2]
     418:	b	5a0 <regexp_match_string+0x3f4>
     41c:	.word	0x00000580
     420:	.word	0x000005a0
     424:	.word	0x000005a0
     428:	.word	0x000005a0
     42c:	.word	0x00000580
     430:	.word	0x00000580
     434:	.word	0x00000580
     438:	.word	0x00000580
     43c:	.word	0x000005a0
     440:	.word	0x000005a0
     444:	.word	0x00000580
     448:	.word	0x000005a0
     44c:	.word	0x000005a0
     450:	.word	0x000005a0
     454:	.word	0x000005a0
     458:	.word	0x000005a0
     45c:	.word	0x000005a0
     460:	.word	0x000005a0
     464:	.word	0x000005a0
     468:	.word	0x000005a0
     46c:	.word	0x000005a0
     470:	.word	0x000005a0
     474:	.word	0x000005a0
     478:	.word	0x000005a0
     47c:	.word	0x000005a0
     480:	.word	0x000005a0
     484:	.word	0x000005a0
     488:	.word	0x00000580
     48c:	.word	0x000005a0
     490:	.word	0x000005a0
     494:	.word	0x000005a0
     498:	.word	0x000005a0
     49c:	.word	0x000005a0
     4a0:	.word	0x000005a0
     4a4:	.word	0x000005a0
     4a8:	.word	0x000005a0
     4ac:	.word	0x000005a0
     4b0:	.word	0x000005a0
     4b4:	.word	0x000005a0
     4b8:	.word	0x000005a0
     4bc:	.word	0x000005a0
     4c0:	.word	0x000005a0
     4c4:	.word	0x000005a0
     4c8:	.word	0x000005a0
     4cc:	.word	0x000005a0
     4d0:	.word	0x000005a0
     4d4:	.word	0x000005a0
     4d8:	.word	0x000005a0
     4dc:	.word	0x000005a0
     4e0:	.word	0x000005a0
     4e4:	.word	0x000005a0
     4e8:	.word	0x000005a0
     4ec:	.word	0x000005a0
     4f0:	.word	0x000005a0
     4f4:	.word	0x000005a0
     4f8:	.word	0x00000580
     4fc:	.word	0x00000580
     500:	.word	0x000005a0
     504:	.word	0x00000580
     508:	.word	0x000005a0
     50c:	.word	0x000005a0
     510:	.word	0x000005a0
     514:	.word	0x000005a0
     518:	.word	0x000005a0
     51c:	.word	0x000005a0
     520:	.word	0x000005a0
     524:	.word	0x000005a0
     528:	.word	0x000005a0
     52c:	.word	0x000005a0
     530:	.word	0x000005a0
     534:	.word	0x000005a0
     538:	.word	0x000005a0
     53c:	.word	0x000005a0
     540:	.word	0x000005a0
     544:	.word	0x000005a0
     548:	.word	0x000005a0
     54c:	.word	0x000005a0
     550:	.word	0x000005a0
     554:	.word	0x000005a0
     558:	.word	0x000005a0
     55c:	.word	0x000005a0
     560:	.word	0x000005a0
     564:	.word	0x000005a0
     568:	.word	0x000005a0
     56c:	.word	0x000005a0
     570:	.word	0x000005a0
     574:	.word	0x000005a0
     578:	.word	0x00000580
     57c:	.word	0x00000580
     580:	ldr	r3, [fp, #-16]
     584:	add	r2, r3, #1
     588:	str	r2, [fp, #-16]
     58c:	mov	r2, r3
     590:	ldr	r3, [fp, #-24]	; 0xffffffe8
     594:	add	r3, r3, r2
     598:	mov	r2, #92	; 0x5c
     59c:	strb	r2, [r3]
     5a0:	ldr	r3, [fp, #-16]
     5a4:	add	r2, r3, #1
     5a8:	str	r2, [fp, #-16]
     5ac:	mov	r2, r3
     5b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5b4:	add	r3, r3, r2
     5b8:	ldr	r2, [fp, #-12]
     5bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
     5c0:	add	r2, r1, r2
     5c4:	ldrb	r2, [r2]
     5c8:	strb	r2, [r3]
     5cc:	nop			; (mov r0, r0)
     5d0:	ldr	r3, [fp, #-12]
     5d4:	add	r3, r3, #1
     5d8:	str	r3, [fp, #-12]
     5dc:	ldr	r2, [fp, #-12]
     5e0:	ldr	r3, [fp, #-20]	; 0xffffffec
     5e4:	cmp	r2, r3
     5e8:	blt	3fc <regexp_match_string+0x250>
     5ec:	ldr	r3, [fp, #-16]
     5f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     5f4:	add	r3, r2, r3
     5f8:	mov	r2, #0
     5fc:	strb	r2, [r3]
     600:	ldr	r3, [fp, #-24]	; 0xffffffe8
     604:	mov	r0, r3
     608:	sub	sp, fp, #4
     60c:	pop	{fp, pc}
     610:	.word	0x00000153
     614:	.word	0x000009bc
     618:	.word	0x00000a1c

0000061c <escaped_string_length>:
     61c:	push	{fp}		; (str fp, [sp, #-4]!)
     620:	add	fp, sp, #0
     624:	sub	sp, sp, #20
     628:	str	r0, [fp, #-16]
     62c:	ldr	r3, [fp, #-16]
     630:	cmp	r3, #0
     634:	bne	640 <escaped_string_length+0x24>
     638:	mov	r3, #0
     63c:	b	818 <escaped_string_length+0x1fc>
     640:	mov	r3, #0
     644:	str	r3, [fp, #-8]
     648:	mov	r3, #0
     64c:	str	r3, [fp, #-12]
     650:	b	7fc <escaped_string_length+0x1e0>
     654:	ldr	r3, [fp, #-8]
     658:	ldr	r2, [fp, #-16]
     65c:	add	r3, r2, r3
     660:	ldrb	r3, [r3]
     664:	cmp	r3, #92	; 0x5c
     668:	bne	7e4 <escaped_string_length+0x1c8>
     66c:	ldr	r3, [fp, #-8]
     670:	add	r3, r3, #1
     674:	str	r3, [fp, #-8]
     678:	ldr	r3, [fp, #-8]
     67c:	ldr	r2, [fp, #-16]
     680:	add	r3, r2, r3
     684:	ldrb	r3, [r3]
     688:	sub	r3, r3, #92	; 0x5c
     68c:	cmp	r3, #26
     690:	ldrls	pc, [pc, r3, lsl #2]
     694:	b	714 <escaped_string_length+0xf8>
     698:	.word	0x00000704
     69c:	.word	0x00000714
     6a0:	.word	0x00000714
     6a4:	.word	0x00000714
     6a8:	.word	0x00000714
     6ac:	.word	0x00000704
     6b0:	.word	0x00000704
     6b4:	.word	0x00000714
     6b8:	.word	0x00000714
     6bc:	.word	0x00000704
     6c0:	.word	0x00000704
     6c4:	.word	0x00000714
     6c8:	.word	0x00000714
     6cc:	.word	0x00000714
     6d0:	.word	0x00000714
     6d4:	.word	0x00000714
     6d8:	.word	0x00000714
     6dc:	.word	0x00000714
     6e0:	.word	0x00000704
     6e4:	.word	0x00000714
     6e8:	.word	0x00000714
     6ec:	.word	0x00000714
     6f0:	.word	0x00000704
     6f4:	.word	0x00000714
     6f8:	.word	0x00000704
     6fc:	.word	0x00000714
     700:	.word	0x00000704
     704:	ldr	r3, [fp, #-12]
     708:	add	r3, r3, #1
     70c:	str	r3, [fp, #-12]
     710:	b	7f0 <escaped_string_length+0x1d4>
     714:	ldr	r3, [fp, #-8]
     718:	ldr	r2, [fp, #-16]
     71c:	add	r3, r2, r3
     720:	ldrb	r3, [r3]
     724:	cmp	r3, #47	; 0x2f
     728:	bls	744 <escaped_string_length+0x128>
     72c:	ldr	r3, [fp, #-8]
     730:	ldr	r2, [fp, #-16]
     734:	add	r3, r2, r3
     738:	ldrb	r3, [r3]
     73c:	cmp	r3, #57	; 0x39
     740:	bls	74c <escaped_string_length+0x130>
     744:	mvn	r3, #0
     748:	b	818 <escaped_string_length+0x1fc>
     74c:	ldr	r3, [fp, #-8]
     750:	add	r3, r3, #1
     754:	ldr	r2, [fp, #-16]
     758:	add	r3, r2, r3
     75c:	ldrb	r3, [r3]
     760:	cmp	r3, #47	; 0x2f
     764:	bls	7d4 <escaped_string_length+0x1b8>
     768:	ldr	r3, [fp, #-8]
     76c:	add	r3, r3, #1
     770:	ldr	r2, [fp, #-16]
     774:	add	r3, r2, r3
     778:	ldrb	r3, [r3]
     77c:	cmp	r3, #57	; 0x39
     780:	bhi	7d4 <escaped_string_length+0x1b8>
     784:	ldr	r3, [fp, #-8]
     788:	add	r3, r3, #1
     78c:	str	r3, [fp, #-8]
     790:	ldr	r3, [fp, #-8]
     794:	add	r3, r3, #1
     798:	ldr	r2, [fp, #-16]
     79c:	add	r3, r2, r3
     7a0:	ldrb	r3, [r3]
     7a4:	cmp	r3, #47	; 0x2f
     7a8:	bls	7d4 <escaped_string_length+0x1b8>
     7ac:	ldr	r3, [fp, #-8]
     7b0:	add	r3, r3, #1
     7b4:	ldr	r2, [fp, #-16]
     7b8:	add	r3, r2, r3
     7bc:	ldrb	r3, [r3]
     7c0:	cmp	r3, #57	; 0x39
     7c4:	bhi	7d4 <escaped_string_length+0x1b8>
     7c8:	ldr	r3, [fp, #-8]
     7cc:	add	r3, r3, #1
     7d0:	str	r3, [fp, #-8]
     7d4:	ldr	r3, [fp, #-12]
     7d8:	add	r3, r3, #1
     7dc:	str	r3, [fp, #-12]
     7e0:	b	7f0 <escaped_string_length+0x1d4>
     7e4:	ldr	r3, [fp, #-12]
     7e8:	add	r3, r3, #1
     7ec:	str	r3, [fp, #-12]
     7f0:	ldr	r3, [fp, #-8]
     7f4:	add	r3, r3, #1
     7f8:	str	r3, [fp, #-8]
     7fc:	ldr	r3, [fp, #-8]
     800:	ldr	r2, [fp, #-16]
     804:	add	r3, r2, r3
     808:	ldrb	r3, [r3]
     80c:	cmp	r3, #0
     810:	bne	654 <escaped_string_length+0x38>
     814:	ldr	r3, [fp, #-12]
     818:	mov	r0, r3
     81c:	add	sp, fp, #0
     820:	pop	{fp}		; (ldr fp, [sp], #4)
     824:	bx	lr

00000828 <decode_escaped_string>:
     828:	push	{fp}		; (str fp, [sp, #-4]!)
     82c:	add	fp, sp, #0
     830:	sub	sp, sp, #20
     834:	str	r0, [fp, #-16]
     838:	ldr	r3, [fp, #-16]
     83c:	cmp	r3, #0
     840:	bne	84c <decode_escaped_string+0x24>
     844:	mov	r3, #0
     848:	b	c44 <decode_escaped_string+0x41c>
     84c:	mov	r3, #0
     850:	str	r3, [fp, #-8]
     854:	mov	r3, #0
     858:	str	r3, [fp, #-12]
     85c:	b	c14 <decode_escaped_string+0x3ec>
     860:	ldr	r3, [fp, #-8]
     864:	ldr	r2, [fp, #-16]
     868:	add	r3, r2, r3
     86c:	ldrb	r3, [r3]
     870:	cmp	r3, #92	; 0x5c
     874:	bne	bdc <decode_escaped_string+0x3b4>
     878:	ldr	r3, [fp, #-8]
     87c:	add	r3, r3, #1
     880:	str	r3, [fp, #-8]
     884:	ldr	r3, [fp, #-8]
     888:	ldr	r2, [fp, #-16]
     88c:	add	r3, r2, r3
     890:	ldrb	r3, [r3]
     894:	sub	r3, r3, #92	; 0x5c
     898:	cmp	r3, #26
     89c:	ldrls	pc, [pc, r3, lsl #2]
     8a0:	b	a54 <decode_escaped_string+0x22c>
     8a4:	.word	0x00000a30
     8a8:	.word	0x00000a54
     8ac:	.word	0x00000a54
     8b0:	.word	0x00000a54
     8b4:	.word	0x00000a54
     8b8:	.word	0x00000934
     8bc:	.word	0x00000958
     8c0:	.word	0x00000a54
     8c4:	.word	0x00000a54
     8c8:	.word	0x00000910
     8cc:	.word	0x0000097c
     8d0:	.word	0x00000a54
     8d4:	.word	0x00000a54
     8d8:	.word	0x00000a54
     8dc:	.word	0x00000a54
     8e0:	.word	0x00000a54
     8e4:	.word	0x00000a54
     8e8:	.word	0x00000a54
     8ec:	.word	0x000009a0
     8f0:	.word	0x00000a54
     8f4:	.word	0x00000a54
     8f8:	.word	0x00000a54
     8fc:	.word	0x000009c4
     900:	.word	0x00000a54
     904:	.word	0x000009e8
     908:	.word	0x00000a54
     90c:	.word	0x00000a0c
     910:	ldr	r3, [fp, #-12]
     914:	add	r2, r3, #1
     918:	str	r2, [fp, #-12]
     91c:	mov	r2, r3
     920:	ldr	r3, [fp, #-16]
     924:	add	r3, r3, r2
     928:	mov	r2, #27
     92c:	strb	r2, [r3]
     930:	b	c08 <decode_escaped_string+0x3e0>
     934:	ldr	r3, [fp, #-12]
     938:	add	r2, r3, #1
     93c:	str	r2, [fp, #-12]
     940:	mov	r2, r3
     944:	ldr	r3, [fp, #-16]
     948:	add	r3, r3, r2
     94c:	mov	r2, #7
     950:	strb	r2, [r3]
     954:	b	c08 <decode_escaped_string+0x3e0>
     958:	ldr	r3, [fp, #-12]
     95c:	add	r2, r3, #1
     960:	str	r2, [fp, #-12]
     964:	mov	r2, r3
     968:	ldr	r3, [fp, #-16]
     96c:	add	r3, r3, r2
     970:	mov	r2, #8
     974:	strb	r2, [r3]
     978:	b	c08 <decode_escaped_string+0x3e0>
     97c:	ldr	r3, [fp, #-12]
     980:	add	r2, r3, #1
     984:	str	r2, [fp, #-12]
     988:	mov	r2, r3
     98c:	ldr	r3, [fp, #-16]
     990:	add	r3, r3, r2
     994:	mov	r2, #12
     998:	strb	r2, [r3]
     99c:	b	c08 <decode_escaped_string+0x3e0>
     9a0:	ldr	r3, [fp, #-12]
     9a4:	add	r2, r3, #1
     9a8:	str	r2, [fp, #-12]
     9ac:	mov	r2, r3
     9b0:	ldr	r3, [fp, #-16]
     9b4:	add	r3, r3, r2
     9b8:	mov	r2, #10
     9bc:	strb	r2, [r3]
     9c0:	b	c08 <decode_escaped_string+0x3e0>
     9c4:	ldr	r3, [fp, #-12]
     9c8:	add	r2, r3, #1
     9cc:	str	r2, [fp, #-12]
     9d0:	mov	r2, r3
     9d4:	ldr	r3, [fp, #-16]
     9d8:	add	r3, r3, r2
     9dc:	mov	r2, #13
     9e0:	strb	r2, [r3]
     9e4:	b	c08 <decode_escaped_string+0x3e0>
     9e8:	ldr	r3, [fp, #-12]
     9ec:	add	r2, r3, #1
     9f0:	str	r2, [fp, #-12]
     9f4:	mov	r2, r3
     9f8:	ldr	r3, [fp, #-16]
     9fc:	add	r3, r3, r2
     a00:	mov	r2, #9
     a04:	strb	r2, [r3]
     a08:	b	c08 <decode_escaped_string+0x3e0>
     a0c:	ldr	r3, [fp, #-12]
     a10:	add	r2, r3, #1
     a14:	str	r2, [fp, #-12]
     a18:	mov	r2, r3
     a1c:	ldr	r3, [fp, #-16]
     a20:	add	r3, r3, r2
     a24:	mov	r2, #11
     a28:	strb	r2, [r3]
     a2c:	b	c08 <decode_escaped_string+0x3e0>
     a30:	ldr	r3, [fp, #-12]
     a34:	add	r2, r3, #1
     a38:	str	r2, [fp, #-12]
     a3c:	mov	r2, r3
     a40:	ldr	r3, [fp, #-16]
     a44:	add	r3, r3, r2
     a48:	mov	r2, #92	; 0x5c
     a4c:	strb	r2, [r3]
     a50:	b	c08 <decode_escaped_string+0x3e0>
     a54:	ldr	r3, [fp, #-8]
     a58:	ldr	r2, [fp, #-16]
     a5c:	add	r3, r2, r3
     a60:	ldrb	r3, [r3]
     a64:	cmp	r3, #47	; 0x2f
     a68:	bls	a84 <decode_escaped_string+0x25c>
     a6c:	ldr	r3, [fp, #-8]
     a70:	ldr	r2, [fp, #-16]
     a74:	add	r3, r2, r3
     a78:	ldrb	r3, [r3]
     a7c:	cmp	r3, #57	; 0x39
     a80:	bls	a8c <decode_escaped_string+0x264>
     a84:	mvn	r3, #0
     a88:	b	c44 <decode_escaped_string+0x41c>
     a8c:	ldr	r3, [fp, #-12]
     a90:	ldr	r2, [fp, #-16]
     a94:	add	r3, r2, r3
     a98:	ldr	r2, [fp, #-8]
     a9c:	ldr	r1, [fp, #-16]
     aa0:	add	r2, r1, r2
     aa4:	ldrb	r2, [r2]
     aa8:	sub	r2, r2, #48	; 0x30
     aac:	uxtb	r2, r2
     ab0:	strb	r2, [r3]
     ab4:	ldr	r3, [fp, #-8]
     ab8:	add	r3, r3, #1
     abc:	ldr	r2, [fp, #-16]
     ac0:	add	r3, r2, r3
     ac4:	ldrb	r3, [r3]
     ac8:	cmp	r3, #47	; 0x2f
     acc:	bls	bcc <decode_escaped_string+0x3a4>
     ad0:	ldr	r3, [fp, #-8]
     ad4:	add	r3, r3, #1
     ad8:	ldr	r2, [fp, #-16]
     adc:	add	r3, r2, r3
     ae0:	ldrb	r3, [r3]
     ae4:	cmp	r3, #57	; 0x39
     ae8:	bhi	bcc <decode_escaped_string+0x3a4>
     aec:	ldr	r3, [fp, #-8]
     af0:	add	r3, r3, #1
     af4:	str	r3, [fp, #-8]
     af8:	ldr	r3, [fp, #-12]
     afc:	ldr	r2, [fp, #-16]
     b00:	add	r3, r2, r3
     b04:	ldr	r2, [fp, #-12]
     b08:	ldr	r1, [fp, #-16]
     b0c:	add	r2, r1, r2
     b10:	ldrb	r2, [r2]
     b14:	lsl	r2, r2, #3
     b18:	uxtb	r1, r2
     b1c:	ldr	r2, [fp, #-8]
     b20:	ldr	r0, [fp, #-16]
     b24:	add	r2, r0, r2
     b28:	ldrb	r2, [r2]
     b2c:	add	r2, r1, r2
     b30:	uxtb	r2, r2
     b34:	sub	r2, r2, #48	; 0x30
     b38:	uxtb	r2, r2
     b3c:	strb	r2, [r3]
     b40:	ldr	r3, [fp, #-8]
     b44:	add	r3, r3, #1
     b48:	ldr	r2, [fp, #-16]
     b4c:	add	r3, r2, r3
     b50:	ldrb	r3, [r3]
     b54:	cmp	r3, #47	; 0x2f
     b58:	bls	bcc <decode_escaped_string+0x3a4>
     b5c:	ldr	r3, [fp, #-8]
     b60:	add	r3, r3, #1
     b64:	ldr	r2, [fp, #-16]
     b68:	add	r3, r2, r3
     b6c:	ldrb	r3, [r3]
     b70:	cmp	r3, #57	; 0x39
     b74:	bhi	bcc <decode_escaped_string+0x3a4>
     b78:	ldr	r3, [fp, #-8]
     b7c:	add	r3, r3, #1
     b80:	str	r3, [fp, #-8]
     b84:	ldr	r3, [fp, #-12]
     b88:	ldr	r2, [fp, #-16]
     b8c:	add	r3, r2, r3
     b90:	ldr	r2, [fp, #-12]
     b94:	ldr	r1, [fp, #-16]
     b98:	add	r2, r1, r2
     b9c:	ldrb	r2, [r2]
     ba0:	lsl	r2, r2, #3
     ba4:	uxtb	r1, r2
     ba8:	ldr	r2, [fp, #-8]
     bac:	ldr	r0, [fp, #-16]
     bb0:	add	r2, r0, r2
     bb4:	ldrb	r2, [r2]
     bb8:	add	r2, r1, r2
     bbc:	uxtb	r2, r2
     bc0:	sub	r2, r2, #48	; 0x30
     bc4:	uxtb	r2, r2
     bc8:	strb	r2, [r3]
     bcc:	ldr	r3, [fp, #-12]
     bd0:	add	r3, r3, #1
     bd4:	str	r3, [fp, #-12]
     bd8:	b	c08 <decode_escaped_string+0x3e0>
     bdc:	ldr	r3, [fp, #-12]
     be0:	add	r2, r3, #1
     be4:	str	r2, [fp, #-12]
     be8:	mov	r2, r3
     bec:	ldr	r3, [fp, #-16]
     bf0:	add	r3, r3, r2
     bf4:	ldr	r2, [fp, #-8]
     bf8:	ldr	r1, [fp, #-16]
     bfc:	add	r2, r1, r2
     c00:	ldrb	r2, [r2]
     c04:	strb	r2, [r3]
     c08:	ldr	r3, [fp, #-8]
     c0c:	add	r3, r3, #1
     c10:	str	r3, [fp, #-8]
     c14:	ldr	r3, [fp, #-8]
     c18:	ldr	r2, [fp, #-16]
     c1c:	add	r3, r2, r3
     c20:	ldrb	r3, [r3]
     c24:	cmp	r3, #0
     c28:	bne	860 <decode_escaped_string+0x38>
     c2c:	ldr	r3, [fp, #-12]
     c30:	ldr	r2, [fp, #-16]
     c34:	add	r3, r2, r3
     c38:	mov	r2, #0
     c3c:	strb	r2, [r3]
     c40:	ldr	r3, [fp, #-12]
     c44:	mov	r0, r3
     c48:	add	sp, fp, #0
     c4c:	pop	{fp}		; (ldr fp, [sp], #4)
     c50:	bx	lr

00000c54 <decode_xml_string>:
     c54:	push	{fp, lr}
     c58:	add	fp, sp, #4
     c5c:	sub	sp, sp, #16
     c60:	str	r0, [fp, #-16]
     c64:	ldr	r3, [fp, #-16]
     c68:	cmp	r3, #0
     c6c:	bne	c78 <decode_xml_string+0x24>
     c70:	mov	r3, #0
     c74:	b	f14 <decode_xml_string+0x2c0>
     c78:	mov	r3, #0
     c7c:	str	r3, [fp, #-8]
     c80:	mov	r3, #0
     c84:	str	r3, [fp, #-12]
     c88:	b	ee4 <decode_xml_string+0x290>
     c8c:	ldr	r3, [fp, #-8]
     c90:	ldr	r2, [fp, #-16]
     c94:	add	r3, r2, r3
     c98:	ldrb	r3, [r3]
     c9c:	cmp	r3, #38	; 0x26
     ca0:	bne	eac <decode_xml_string+0x258>
     ca4:	ldr	r3, [fp, #-8]
     ca8:	add	r3, r3, #1
     cac:	ldr	r2, [fp, #-16]
     cb0:	add	r3, r2, r3
     cb4:	mov	r2, #4
     cb8:	ldr	r1, [pc, #608]	; f20 <decode_xml_string+0x2cc>
     cbc:	mov	r0, r3
     cc0:	bl	0 <strncmp>
     cc4:	mov	r3, r0
     cc8:	cmp	r3, #0
     ccc:	bne	d00 <decode_xml_string+0xac>
     cd0:	ldr	r3, [fp, #-12]
     cd4:	add	r2, r3, #1
     cd8:	str	r2, [fp, #-12]
     cdc:	mov	r2, r3
     ce0:	ldr	r3, [fp, #-16]
     ce4:	add	r3, r3, r2
     ce8:	mov	r2, #38	; 0x26
     cec:	strb	r2, [r3]
     cf0:	ldr	r3, [fp, #-8]
     cf4:	add	r3, r3, #5
     cf8:	str	r3, [fp, #-8]
     cfc:	b	ee4 <decode_xml_string+0x290>
     d00:	ldr	r3, [fp, #-8]
     d04:	add	r3, r3, #1
     d08:	ldr	r2, [fp, #-16]
     d0c:	add	r3, r2, r3
     d10:	mov	r2, #5
     d14:	ldr	r1, [pc, #520]	; f24 <decode_xml_string+0x2d0>
     d18:	mov	r0, r3
     d1c:	bl	0 <strncmp>
     d20:	mov	r3, r0
     d24:	cmp	r3, #0
     d28:	bne	d5c <decode_xml_string+0x108>
     d2c:	ldr	r3, [fp, #-12]
     d30:	add	r2, r3, #1
     d34:	str	r2, [fp, #-12]
     d38:	mov	r2, r3
     d3c:	ldr	r3, [fp, #-16]
     d40:	add	r3, r3, r2
     d44:	mov	r2, #39	; 0x27
     d48:	strb	r2, [r3]
     d4c:	ldr	r3, [fp, #-8]
     d50:	add	r3, r3, #6
     d54:	str	r3, [fp, #-8]
     d58:	b	ee4 <decode_xml_string+0x290>
     d5c:	ldr	r3, [fp, #-8]
     d60:	add	r3, r3, #1
     d64:	ldr	r2, [fp, #-16]
     d68:	add	r3, r2, r3
     d6c:	mov	r2, #3
     d70:	ldr	r1, [pc, #432]	; f28 <decode_xml_string+0x2d4>
     d74:	mov	r0, r3
     d78:	bl	0 <strncmp>
     d7c:	mov	r3, r0
     d80:	cmp	r3, #0
     d84:	bne	db8 <decode_xml_string+0x164>
     d88:	ldr	r3, [fp, #-12]
     d8c:	add	r2, r3, #1
     d90:	str	r2, [fp, #-12]
     d94:	mov	r2, r3
     d98:	ldr	r3, [fp, #-16]
     d9c:	add	r3, r3, r2
     da0:	mov	r2, #60	; 0x3c
     da4:	strb	r2, [r3]
     da8:	ldr	r3, [fp, #-8]
     dac:	add	r3, r3, #4
     db0:	str	r3, [fp, #-8]
     db4:	b	ee4 <decode_xml_string+0x290>
     db8:	ldr	r3, [fp, #-8]
     dbc:	add	r3, r3, #1
     dc0:	ldr	r2, [fp, #-16]
     dc4:	add	r3, r2, r3
     dc8:	mov	r2, #3
     dcc:	ldr	r1, [pc, #344]	; f2c <decode_xml_string+0x2d8>
     dd0:	mov	r0, r3
     dd4:	bl	0 <strncmp>
     dd8:	mov	r3, r0
     ddc:	cmp	r3, #0
     de0:	bne	e14 <decode_xml_string+0x1c0>
     de4:	ldr	r3, [fp, #-12]
     de8:	add	r2, r3, #1
     dec:	str	r2, [fp, #-12]
     df0:	mov	r2, r3
     df4:	ldr	r3, [fp, #-16]
     df8:	add	r3, r3, r2
     dfc:	mov	r2, #60	; 0x3c
     e00:	strb	r2, [r3]
     e04:	ldr	r3, [fp, #-8]
     e08:	add	r3, r3, #4
     e0c:	str	r3, [fp, #-8]
     e10:	b	ee4 <decode_xml_string+0x290>
     e14:	ldr	r3, [fp, #-8]
     e18:	add	r3, r3, #1
     e1c:	ldr	r2, [fp, #-16]
     e20:	add	r3, r2, r3
     e24:	mov	r2, #5
     e28:	ldr	r1, [pc, #256]	; f30 <decode_xml_string+0x2dc>
     e2c:	mov	r0, r3
     e30:	bl	0 <strncmp>
     e34:	mov	r3, r0
     e38:	cmp	r3, #0
     e3c:	bne	e70 <decode_xml_string+0x21c>
     e40:	ldr	r3, [fp, #-12]
     e44:	add	r2, r3, #1
     e48:	str	r2, [fp, #-12]
     e4c:	mov	r2, r3
     e50:	ldr	r3, [fp, #-16]
     e54:	add	r3, r3, r2
     e58:	mov	r2, #34	; 0x22
     e5c:	strb	r2, [r3]
     e60:	ldr	r3, [fp, #-8]
     e64:	add	r3, r3, #6
     e68:	str	r3, [fp, #-8]
     e6c:	b	ee4 <decode_xml_string+0x290>
     e70:	ldr	r3, [fp, #-12]
     e74:	add	r2, r3, #1
     e78:	str	r2, [fp, #-12]
     e7c:	mov	r2, r3
     e80:	ldr	r3, [fp, #-16]
     e84:	add	r3, r3, r2
     e88:	ldr	r2, [fp, #-8]
     e8c:	ldr	r1, [fp, #-16]
     e90:	add	r2, r1, r2
     e94:	ldrb	r2, [r2]
     e98:	strb	r2, [r3]
     e9c:	ldr	r3, [fp, #-8]
     ea0:	add	r3, r3, #1
     ea4:	str	r3, [fp, #-8]
     ea8:	b	ee4 <decode_xml_string+0x290>
     eac:	ldr	r3, [fp, #-12]
     eb0:	add	r2, r3, #1
     eb4:	str	r2, [fp, #-12]
     eb8:	mov	r2, r3
     ebc:	ldr	r3, [fp, #-16]
     ec0:	add	r3, r3, r2
     ec4:	ldr	r2, [fp, #-8]
     ec8:	ldr	r1, [fp, #-16]
     ecc:	add	r2, r1, r2
     ed0:	ldrb	r2, [r2]
     ed4:	strb	r2, [r3]
     ed8:	ldr	r3, [fp, #-8]
     edc:	add	r3, r3, #1
     ee0:	str	r3, [fp, #-8]
     ee4:	ldr	r3, [fp, #-8]
     ee8:	ldr	r2, [fp, #-16]
     eec:	add	r3, r2, r3
     ef0:	ldrb	r3, [r3]
     ef4:	cmp	r3, #0
     ef8:	bne	c8c <decode_xml_string+0x38>
     efc:	ldr	r3, [fp, #-12]
     f00:	ldr	r2, [fp, #-16]
     f04:	add	r3, r2, r3
     f08:	mov	r2, #0
     f0c:	strb	r2, [r3]
     f10:	ldr	r3, [fp, #-12]
     f14:	mov	r0, r3
     f18:	sub	sp, fp, #4
     f1c:	pop	{fp, pc}
     f20:	.word	0x00000a54
     f24:	.word	0x00000a5c
     f28:	.word	0x00000a64
     f2c:	.word	0x00000a68
     f30:	.word	0x00000a6c

00000f34 <get_attribute_value>:
     f34:	push	{fp, lr}
     f38:	add	fp, sp, #4
     f3c:	sub	sp, sp, #8
     f40:	str	r0, [fp, #-8]
     f44:	str	r1, [fp, #-12]
     f48:	b	f84 <get_attribute_value+0x50>
     f4c:	ldr	r3, [fp, #-8]
     f50:	ldr	r3, [r3]
     f54:	ldr	r1, [fp, #-12]
     f58:	mov	r0, r3
     f5c:	bl	0 <strcmp>
     f60:	mov	r3, r0
     f64:	cmp	r3, #0
     f68:	bne	f78 <get_attribute_value+0x44>
     f6c:	ldr	r3, [fp, #-8]
     f70:	ldr	r3, [r3, #4]
     f74:	b	f98 <get_attribute_value+0x64>
     f78:	ldr	r3, [fp, #-8]
     f7c:	add	r3, r3, #8
     f80:	str	r3, [fp, #-8]
     f84:	ldr	r3, [fp, #-8]
     f88:	ldr	r3, [r3]
     f8c:	cmp	r3, #0
     f90:	bne	f4c <get_attribute_value+0x18>
     f94:	mov	r3, #0
     f98:	mov	r0, r3
     f9c:	sub	sp, fp, #4
     fa0:	pop	{fp, pc}

00000fa4 <get_mandatory_attribute_value>:
     fa4:	push	{fp, lr}
     fa8:	add	fp, sp, #4
     fac:	sub	sp, sp, #24
     fb0:	str	r0, [fp, #-16]
     fb4:	str	r1, [fp, #-20]	; 0xffffffec
     fb8:	str	r2, [fp, #-24]	; 0xffffffe8
     fbc:	ldr	r1, [fp, #-20]	; 0xffffffec
     fc0:	ldr	r0, [fp, #-16]
     fc4:	bl	f34 <get_attribute_value>
     fc8:	str	r0, [fp, #-8]
     fcc:	ldr	r3, [fp, #-8]
     fd0:	cmp	r3, #0
     fd4:	bne	ff4 <get_mandatory_attribute_value+0x50>
     fd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     fdc:	bl	0 <xml_element_name>
     fe0:	mov	r3, r0
     fe4:	ldr	r2, [fp, #-20]	; 0xffffffec
     fe8:	ldr	r1, [pc, #20]	; 1004 <get_mandatory_attribute_value+0x60>
     fec:	ldr	r0, [pc, #20]	; 1008 <get_mandatory_attribute_value+0x64>
     ff0:	bl	0 <coda_set_error>
     ff4:	ldr	r3, [fp, #-8]
     ff8:	mov	r0, r3
     ffc:	sub	sp, fp, #4
    1000:	pop	{fp, pc}
    1004:	.word	0x00000a74
    1008:	.word	0xfffffe70

0000100c <handle_name_attribute_for_type>:
    100c:	push	{fp, lr}
    1010:	add	fp, sp, #4
    1014:	sub	sp, sp, #16
    1018:	str	r0, [fp, #-16]
    101c:	str	r1, [fp, #-20]	; 0xffffffec
    1020:	ldr	r3, [fp, #-16]
    1024:	ldr	r3, [r3]
    1028:	ldr	r3, [r3, #396]	; 0x18c
    102c:	ldr	r3, [r3, #396]	; 0x18c
    1030:	cmp	r3, #0
    1034:	bne	10d8 <handle_name_attribute_for_type+0xcc>
    1038:	ldr	r3, [fp, #-16]
    103c:	ldr	r3, [r3]
    1040:	ldr	r3, [r3]
    1044:	mov	r2, r3
    1048:	ldr	r1, [pc, #200]	; 1118 <handle_name_attribute_for_type+0x10c>
    104c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1050:	bl	fa4 <get_mandatory_attribute_value>
    1054:	str	r0, [fp, #-8]
    1058:	ldr	r3, [fp, #-8]
    105c:	cmp	r3, #0
    1060:	bne	106c <handle_name_attribute_for_type+0x60>
    1064:	mvn	r3, #0
    1068:	b	110c <handle_name_attribute_for_type+0x100>
    106c:	ldr	r3, [fp, #-16]
    1070:	ldr	r3, [r3, #20]
    1074:	mov	r1, r3
    1078:	ldr	r0, [fp, #-8]
    107c:	bl	0 <strcmp>
    1080:	mov	r3, r0
    1084:	cmp	r3, #0
    1088:	beq	10ac <handle_name_attribute_for_type+0xa0>
    108c:	ldr	r3, [fp, #-16]
    1090:	ldr	r3, [r3, #20]
    1094:	mov	r2, r3
    1098:	ldr	r1, [pc, #124]	; 111c <handle_name_attribute_for_type+0x110>
    109c:	ldr	r0, [pc, #124]	; 1120 <handle_name_attribute_for_type+0x114>
    10a0:	bl	0 <coda_set_error>
    10a4:	mvn	r3, #0
    10a8:	b	110c <handle_name_attribute_for_type+0x100>
    10ac:	ldr	r3, [fp, #-16]
    10b0:	ldr	r3, [r3]
    10b4:	ldr	r3, [r3, #8]
    10b8:	ldr	r1, [fp, #-8]
    10bc:	mov	r0, r3
    10c0:	bl	0 <coda_type_set_name>
    10c4:	mov	r3, r0
    10c8:	cmp	r3, #0
    10cc:	beq	1108 <handle_name_attribute_for_type+0xfc>
    10d0:	mvn	r3, #0
    10d4:	b	110c <handle_name_attribute_for_type+0x100>
    10d8:	ldr	r1, [pc, #56]	; 1118 <handle_name_attribute_for_type+0x10c>
    10dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    10e0:	bl	f34 <get_attribute_value>
    10e4:	str	r0, [fp, #-8]
    10e8:	ldr	r3, [fp, #-8]
    10ec:	cmp	r3, #0
    10f0:	beq	1108 <handle_name_attribute_for_type+0xfc>
    10f4:	ldr	r1, [pc, #40]	; 1124 <handle_name_attribute_for_type+0x118>
    10f8:	ldr	r0, [pc, #32]	; 1120 <handle_name_attribute_for_type+0x114>
    10fc:	bl	0 <coda_set_error>
    1100:	mvn	r3, #0
    1104:	b	110c <handle_name_attribute_for_type+0x100>
    1108:	mov	r3, #0
    110c:	mov	r0, r3
    1110:	sub	sp, fp, #4
    1114:	pop	{fp, pc}
    1118:	.word	0x00000aa8
    111c:	.word	0x00000ab0
    1120:	.word	0xfffffe70
    1124:	.word	0x00000af0

00001128 <handle_format_attribute_for_type>:
    1128:	push	{fp, lr}
    112c:	add	fp, sp, #4
    1130:	sub	sp, sp, #16
    1134:	str	r0, [fp, #-16]
    1138:	str	r1, [fp, #-20]	; 0xffffffec
    113c:	ldr	r3, [fp, #-16]
    1140:	ldr	r3, [r3]
    1144:	ldr	r3, [r3, #396]	; 0x18c
    1148:	ldr	r3, [r3, #48]	; 0x30
    114c:	cmp	r3, #0
    1150:	bne	11b4 <handle_format_attribute_for_type+0x8c>
    1154:	ldr	r3, [fp, #-16]
    1158:	ldr	r3, [r3]
    115c:	ldr	r3, [r3]
    1160:	mov	r2, r3
    1164:	ldr	r1, [pc, #208]	; 123c <handle_format_attribute_for_type+0x114>
    1168:	ldr	r0, [fp, #-20]	; 0xffffffec
    116c:	bl	fa4 <get_mandatory_attribute_value>
    1170:	str	r0, [fp, #-8]
    1174:	ldr	r3, [fp, #-8]
    1178:	cmp	r3, #0
    117c:	bne	1188 <handle_format_attribute_for_type+0x60>
    1180:	mvn	r3, #0
    1184:	b	1230 <handle_format_attribute_for_type+0x108>
    1188:	ldr	r3, [fp, #-16]
    118c:	ldr	r3, [r3]
    1190:	add	r3, r3, #44	; 0x2c
    1194:	mov	r1, r3
    1198:	ldr	r0, [fp, #-8]
    119c:	bl	0 <coda_format_from_string>
    11a0:	mov	r3, r0
    11a4:	cmp	r3, #0
    11a8:	beq	121c <handle_format_attribute_for_type+0xf4>
    11ac:	mvn	r3, #0
    11b0:	b	1230 <handle_format_attribute_for_type+0x108>
    11b4:	ldr	r1, [pc, #128]	; 123c <handle_format_attribute_for_type+0x114>
    11b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    11bc:	bl	f34 <get_attribute_value>
    11c0:	str	r0, [fp, #-8]
    11c4:	ldr	r3, [fp, #-8]
    11c8:	cmp	r3, #0
    11cc:	bne	11f0 <handle_format_attribute_for_type+0xc8>
    11d0:	ldr	r3, [fp, #-16]
    11d4:	ldr	r3, [r3]
    11d8:	ldr	r2, [fp, #-16]
    11dc:	ldr	r2, [r2]
    11e0:	ldr	r2, [r2, #396]	; 0x18c
    11e4:	ldr	r2, [r2, #44]	; 0x2c
    11e8:	str	r2, [r3, #44]	; 0x2c
    11ec:	b	121c <handle_format_attribute_for_type+0xf4>
    11f0:	ldr	r3, [fp, #-16]
    11f4:	ldr	r3, [r3]
    11f8:	add	r3, r3, #44	; 0x2c
    11fc:	mov	r1, r3
    1200:	ldr	r0, [fp, #-8]
    1204:	bl	0 <coda_format_from_string>
    1208:	mov	r3, r0
    120c:	cmp	r3, #0
    1210:	beq	121c <handle_format_attribute_for_type+0xf4>
    1214:	mvn	r3, #0
    1218:	b	1230 <handle_format_attribute_for_type+0x108>
    121c:	ldr	r3, [fp, #-16]
    1220:	ldr	r3, [r3]
    1224:	mov	r2, #1
    1228:	str	r2, [r3, #48]	; 0x30
    122c:	mov	r3, #0
    1230:	mov	r0, r3
    1234:	sub	sp, fp, #4
    1238:	pop	{fp, pc}
    123c:	.word	0x00000b38

00001240 <handle_xml_name>:
    1240:	push	{fp, lr}
    1244:	add	fp, sp, #4
    1248:	sub	sp, sp, #16
    124c:	str	r0, [fp, #-16]
    1250:	str	r1, [fp, #-20]	; 0xffffffec
    1254:	ldr	r3, [fp, #-16]
    1258:	ldr	r3, [r3]
    125c:	ldr	r3, [r3, #48]	; 0x30
    1260:	cmp	r3, #0
    1264:	bne	127c <handle_xml_name+0x3c>
    1268:	ldr	r3, [pc, #236]	; 135c <handle_xml_name+0x11c>
    126c:	mov	r2, #676	; 0x2a4
    1270:	ldr	r1, [pc, #232]	; 1360 <handle_xml_name+0x120>
    1274:	ldr	r0, [pc, #232]	; 1364 <handle_xml_name+0x124>
    1278:	bl	0 <__assert_fail>
    127c:	ldr	r3, [fp, #-16]
    1280:	ldr	r3, [r3]
    1284:	ldr	r3, [r3, #44]	; 0x2c
    1288:	cmp	r3, #2
    128c:	beq	1298 <handle_xml_name+0x58>
    1290:	mov	r3, #0
    1294:	b	1350 <handle_xml_name+0x110>
    1298:	ldr	r3, [fp, #-16]
    129c:	ldr	r3, [r3]
    12a0:	ldr	r3, [r3, #396]	; 0x18c
    12a4:	str	r3, [fp, #-8]
    12a8:	b	12d0 <handle_xml_name+0x90>
    12ac:	ldr	r3, [fp, #-8]
    12b0:	ldr	r3, [r3]
    12b4:	cmn	r3, #1
    12b8:	bne	12c4 <handle_xml_name+0x84>
    12bc:	mov	r3, #0
    12c0:	b	1350 <handle_xml_name+0x110>
    12c4:	ldr	r3, [fp, #-8]
    12c8:	ldr	r3, [r3, #396]	; 0x18c
    12cc:	str	r3, [fp, #-8]
    12d0:	ldr	r3, [fp, #-8]
    12d4:	ldr	r3, [r3]
    12d8:	cmp	r3, #14
    12dc:	bne	12ac <handle_xml_name+0x6c>
    12e0:	ldr	r1, [pc, #128]	; 1368 <handle_xml_name+0x128>
    12e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    12e8:	bl	f34 <get_attribute_value>
    12ec:	str	r0, [fp, #-12]
    12f0:	ldr	r3, [fp, #-12]
    12f4:	cmp	r3, #0
    12f8:	beq	134c <handle_xml_name+0x10c>
    12fc:	ldr	r3, [fp, #-8]
    1300:	ldr	r3, [r3, #8]
    1304:	ldr	r3, [r3, #4]
    1308:	cmp	r3, #0
    130c:	beq	1324 <handle_xml_name+0xe4>
    1310:	ldr	r1, [pc, #84]	; 136c <handle_xml_name+0x12c>
    1314:	ldr	r0, [pc, #84]	; 1370 <handle_xml_name+0x130>
    1318:	bl	0 <coda_set_error>
    131c:	mvn	r3, #0
    1320:	b	1350 <handle_xml_name+0x110>
    1324:	ldr	r3, [fp, #-8]
    1328:	ldr	r3, [r3, #8]
    132c:	ldr	r1, [fp, #-12]
    1330:	mov	r0, r3
    1334:	bl	0 <coda_type_record_field_set_real_name>
    1338:	mov	r3, r0
    133c:	cmp	r3, #0
    1340:	beq	134c <handle_xml_name+0x10c>
    1344:	mvn	r3, #0
    1348:	b	1350 <handle_xml_name+0x110>
    134c:	mov	r3, #0
    1350:	mov	r0, r3
    1354:	sub	sp, fp, #4
    1358:	pop	{fp, pc}
    135c:	.word	0x000021f0
    1360:	.word	0x000009bc
    1364:	.word	0x00000b40
    1368:	.word	0x00000b58
    136c:	.word	0x00000b60
    1370:	.word	0xfffffe70

00001374 <get_named_type>:
    1374:	push	{fp, lr}
    1378:	add	fp, sp, #4
    137c:	sub	sp, sp, #24
    1380:	str	r0, [fp, #-8]
    1384:	str	r1, [fp, #-12]
    1388:	str	r2, [fp, #-16]
    138c:	ldr	r3, [fp, #-8]
    1390:	ldr	r3, [r3, #24]
    1394:	cmp	r3, #0
    1398:	bne	13b0 <get_named_type+0x3c>
    139c:	ldr	r3, [pc, #188]	; 1460 <get_named_type+0xec>
    13a0:	ldr	r2, [pc, #188]	; 1464 <get_named_type+0xf0>
    13a4:	ldr	r1, [pc, #188]	; 1468 <get_named_type+0xf4>
    13a8:	ldr	r0, [pc, #188]	; 146c <get_named_type+0xf8>
    13ac:	bl	0 <__assert_fail>
    13b0:	ldr	r3, [fp, #-8]
    13b4:	ldr	r3, [r3, #24]
    13b8:	ldr	r1, [fp, #-12]
    13bc:	mov	r0, r3
    13c0:	bl	0 <coda_product_class_has_named_type>
    13c4:	mov	r3, r0
    13c8:	cmp	r3, #0
    13cc:	bne	141c <get_named_type+0xa8>
    13d0:	ldr	r3, [fp, #-8]
    13d4:	ldr	r0, [r3, #16]
    13d8:	ldr	r3, [fp, #-8]
    13dc:	ldr	r2, [r3, #24]
    13e0:	ldr	r3, [fp, #-8]
    13e4:	ldr	r3, [r3, #28]
    13e8:	str	r3, [sp]
    13ec:	mov	r3, r2
    13f0:	ldr	r2, [fp, #-12]
    13f4:	mov	r1, #1
    13f8:	bl	9d80 <parse_entry>
    13fc:	mov	r3, r0
    1400:	cmp	r3, #0
    1404:	beq	141c <get_named_type+0xa8>
    1408:	ldr	r3, [fp, #-8]
    140c:	mov	r2, #0
    1410:	str	r2, [r3, #44]	; 0x2c
    1414:	mvn	r3, #0
    1418:	b	1454 <get_named_type+0xe0>
    141c:	ldr	r3, [fp, #-8]
    1420:	ldr	r3, [r3, #24]
    1424:	ldr	r1, [fp, #-12]
    1428:	mov	r0, r3
    142c:	bl	0 <coda_product_class_get_named_type>
    1430:	mov	r2, r0
    1434:	ldr	r3, [fp, #-16]
    1438:	str	r2, [r3]
    143c:	ldr	r3, [fp, #-16]
    1440:	ldr	r3, [r3]
    1444:	ldr	r2, [r3, #4]
    1448:	add	r2, r2, #1
    144c:	str	r2, [r3, #4]
    1450:	mov	r3, #0
    1454:	mov	r0, r3
    1458:	sub	sp, fp, #4
    145c:	pop	{fp, pc}
    1460:	.word	0x00002200
    1464:	.word	0x000002c6
    1468:	.word	0x000009bc
    146c:	.word	0x00000ba8

00001470 <abort_parser>:
    1470:	push	{fp, lr}
    1474:	add	fp, sp, #4
    1478:	sub	sp, sp, #8
    147c:	str	r0, [fp, #-8]
    1480:	ldr	r3, [fp, #-8]
    1484:	ldr	r3, [r3, #4]
    1488:	mov	r1, #0
    148c:	mov	r0, r3
    1490:	bl	0 <coda_XML_StopParser>
    1494:	ldr	r3, [fp, #-8]
    1498:	mov	r2, #1
    149c:	str	r2, [r3, #36]	; 0x24
    14a0:	nop			; (mov r0, r0)
    14a4:	sub	sp, fp, #4
    14a8:	pop	{fp, pc}

000014ac <register_sub_element>:
    14ac:	push	{fp, lr}
    14b0:	add	fp, sp, #4
    14b4:	sub	sp, sp, #16
    14b8:	str	r0, [fp, #-8]
    14bc:	str	r1, [fp, #-12]
    14c0:	str	r2, [fp, #-16]
    14c4:	str	r3, [fp, #-20]	; 0xffffffec
    14c8:	ldr	r3, [fp, #-16]
    14cc:	cmp	r3, #0
    14d0:	bne	14e8 <register_sub_element+0x3c>
    14d4:	ldr	r3, [pc, #72]	; 1524 <register_sub_element+0x78>
    14d8:	ldr	r2, [pc, #72]	; 1528 <register_sub_element+0x7c>
    14dc:	ldr	r1, [pc, #72]	; 152c <register_sub_element+0x80>
    14e0:	ldr	r0, [pc, #72]	; 1530 <register_sub_element+0x84>
    14e4:	bl	0 <__assert_fail>
    14e8:	ldr	r2, [fp, #-8]
    14ec:	ldr	r3, [fp, #-12]
    14f0:	add	r3, r3, #12
    14f4:	lsl	r3, r3, #2
    14f8:	add	r3, r2, r3
    14fc:	ldr	r2, [fp, #-16]
    1500:	str	r2, [r3, #4]
    1504:	ldr	r3, [fp, #-8]
    1508:	ldr	r2, [fp, #-12]
    150c:	add	r2, r2, #56	; 0x38
    1510:	ldr	r1, [fp, #-20]	; 0xffffffec
    1514:	str	r1, [r3, r2, lsl #2]
    1518:	nop			; (mov r0, r0)
    151c:	sub	sp, fp, #4
    1520:	pop	{fp, pc}
    1524:	.word	0x00002210
    1528:	.word	0x000002df
    152c:	.word	0x000009bc
    1530:	.word	0x00000bc4

00001534 <register_type_elements>:
    1534:	push	{fp, lr}
    1538:	add	fp, sp, #4
    153c:	sub	sp, sp, #8
    1540:	str	r0, [fp, #-8]
    1544:	str	r1, [fp, #-12]
    1548:	ldr	r3, [fp, #-12]
    154c:	ldr	r2, [pc, #300]	; 1680 <register_type_elements+0x14c>
    1550:	mov	r1, #1
    1554:	ldr	r0, [fp, #-8]
    1558:	bl	14ac <register_sub_element>
    155c:	ldr	r3, [fp, #-12]
    1560:	ldr	r2, [pc, #284]	; 1684 <register_type_elements+0x150>
    1564:	mov	r1, #2
    1568:	ldr	r0, [fp, #-8]
    156c:	bl	14ac <register_sub_element>
    1570:	ldr	r3, [fp, #-12]
    1574:	ldr	r2, [pc, #268]	; 1688 <register_type_elements+0x154>
    1578:	mov	r1, #3
    157c:	ldr	r0, [fp, #-8]
    1580:	bl	14ac <register_sub_element>
    1584:	ldr	r3, [fp, #-12]
    1588:	ldr	r2, [pc, #252]	; 168c <register_type_elements+0x158>
    158c:	mov	r1, #0
    1590:	ldr	r0, [fp, #-8]
    1594:	bl	14ac <register_sub_element>
    1598:	ldr	r3, [fp, #-12]
    159c:	ldr	r2, [pc, #236]	; 1690 <register_type_elements+0x15c>
    15a0:	mov	r1, #9
    15a4:	ldr	r0, [fp, #-8]
    15a8:	bl	14ac <register_sub_element>
    15ac:	ldr	r3, [fp, #-12]
    15b0:	ldr	r2, [pc, #220]	; 1694 <register_type_elements+0x160>
    15b4:	mov	r1, #17
    15b8:	ldr	r0, [fp, #-8]
    15bc:	bl	14ac <register_sub_element>
    15c0:	ldr	r3, [fp, #-12]
    15c4:	ldr	r2, [pc, #204]	; 1698 <register_type_elements+0x164>
    15c8:	mov	r1, #20
    15cc:	ldr	r0, [fp, #-8]
    15d0:	bl	14ac <register_sub_element>
    15d4:	ldr	r3, [fp, #-12]
    15d8:	ldr	r2, [pc, #188]	; 169c <register_type_elements+0x168>
    15dc:	mov	r1, #27
    15e0:	ldr	r0, [fp, #-8]
    15e4:	bl	14ac <register_sub_element>
    15e8:	ldr	r3, [fp, #-12]
    15ec:	ldr	r2, [pc, #172]	; 16a0 <register_type_elements+0x16c>
    15f0:	mov	r1, #34	; 0x22
    15f4:	ldr	r0, [fp, #-8]
    15f8:	bl	14ac <register_sub_element>
    15fc:	ldr	r3, [fp, #-12]
    1600:	ldr	r2, [pc, #156]	; 16a4 <register_type_elements+0x170>
    1604:	mov	r1, #35	; 0x23
    1608:	ldr	r0, [fp, #-8]
    160c:	bl	14ac <register_sub_element>
    1610:	ldr	r3, [fp, #-12]
    1614:	ldr	r2, [pc, #140]	; 16a8 <register_type_elements+0x174>
    1618:	mov	r1, #37	; 0x25
    161c:	ldr	r0, [fp, #-8]
    1620:	bl	14ac <register_sub_element>
    1624:	ldr	r3, [fp, #-12]
    1628:	ldr	r2, [pc, #124]	; 16ac <register_type_elements+0x178>
    162c:	mov	r1, #38	; 0x26
    1630:	ldr	r0, [fp, #-8]
    1634:	bl	14ac <register_sub_element>
    1638:	ldr	r3, [fp, #-12]
    163c:	ldr	r2, [pc, #108]	; 16b0 <register_type_elements+0x17c>
    1640:	mov	r1, #39	; 0x27
    1644:	ldr	r0, [fp, #-8]
    1648:	bl	14ac <register_sub_element>
    164c:	ldr	r3, [fp, #-12]
    1650:	ldr	r2, [pc, #92]	; 16b4 <register_type_elements+0x180>
    1654:	mov	r1, #40	; 0x28
    1658:	ldr	r0, [fp, #-8]
    165c:	bl	14ac <register_sub_element>
    1660:	ldr	r3, [fp, #-12]
    1664:	ldr	r2, [pc, #76]	; 16b8 <register_type_elements+0x184>
    1668:	mov	r1, #42	; 0x2a
    166c:	ldr	r0, [fp, #-8]
    1670:	bl	14ac <register_sub_element>
    1674:	nop			; (mov r0, r0)
    1678:	sub	sp, fp, #4
    167c:	pop	{fp, pc}
	...

000016bc <data_dictionary_add_product_class>:
    16bc:	push	{fp, lr}
    16c0:	add	fp, sp, #4
    16c4:	sub	sp, sp, #8
    16c8:	str	r0, [fp, #-8]
    16cc:	ldr	r3, [fp, #-8]
    16d0:	ldr	r3, [r3]
    16d4:	ldr	r3, [r3, #8]
    16d8:	mov	r0, r3
    16dc:	bl	0 <coda_data_dictionary_add_product_class>
    16e0:	mov	r3, r0
    16e4:	cmp	r3, #0
    16e8:	beq	16f4 <data_dictionary_add_product_class+0x38>
    16ec:	mvn	r3, #0
    16f0:	b	1708 <data_dictionary_add_product_class+0x4c>
    16f4:	ldr	r3, [fp, #-8]
    16f8:	ldr	r3, [r3]
    16fc:	mov	r2, #0
    1700:	str	r2, [r3, #8]
    1704:	mov	r3, #0
    1708:	mov	r0, r3
    170c:	sub	sp, fp, #4
    1710:	pop	{fp, pc}

00001714 <dummy_free_handler>:
    1714:	push	{fp}		; (str fp, [sp, #-4]!)
    1718:	add	fp, sp, #0
    171c:	sub	sp, sp, #12
    1720:	str	r0, [fp, #-8]
    1724:	nop			; (mov r0, r0)
    1728:	add	sp, fp, #0
    172c:	pop	{fp}		; (ldr fp, [sp], #4)
    1730:	bx	lr

00001734 <dummy_init>:
    1734:	push	{fp}		; (str fp, [sp, #-4]!)
    1738:	add	fp, sp, #0
    173c:	sub	sp, sp, #12
    1740:	str	r0, [fp, #-8]
    1744:	str	r1, [fp, #-12]
    1748:	mov	r3, #0
    174c:	mov	r0, r3
    1750:	add	sp, fp, #0
    1754:	pop	{fp}		; (ldr fp, [sp], #4)
    1758:	bx	lr

0000175c <bool_expression_finalise>:
    175c:	push	{r4, fp, lr}
    1760:	add	fp, sp, #8
    1764:	sub	sp, sp, #20
    1768:	str	r0, [fp, #-24]	; 0xffffffe8
    176c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1770:	ldr	r3, [r3]
    1774:	ldr	r3, [r3, #12]
    1778:	cmp	r3, #0
    177c:	beq	17e0 <bool_expression_finalise+0x84>
    1780:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1784:	ldr	r3, [r3]
    1788:	ldr	r4, [r3, #12]
    178c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1790:	ldr	r3, [r3]
    1794:	ldr	r3, [r3, #12]
    1798:	mov	r0, r3
    179c:	bl	0 <strlen>
    17a0:	mov	r3, r0
    17a4:	mov	r1, r3
    17a8:	mov	r0, r4
    17ac:	bl	c8 <is_whitespace>
    17b0:	mov	r3, r0
    17b4:	cmp	r3, #0
    17b8:	beq	17e0 <bool_expression_finalise+0x84>
    17bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17c0:	ldr	r3, [r3]
    17c4:	ldr	r3, [r3, #12]
    17c8:	mov	r0, r3
    17cc:	bl	0 <free>
    17d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17d4:	ldr	r3, [r3]
    17d8:	mov	r2, #0
    17dc:	str	r2, [r3, #12]
    17e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17e4:	ldr	r3, [r3]
    17e8:	ldr	r3, [r3, #12]
    17ec:	cmp	r3, #0
    17f0:	bne	1808 <bool_expression_finalise+0xac>
    17f4:	ldr	r1, [pc, #200]	; 18c4 <bool_expression_finalise+0x168>
    17f8:	ldr	r0, [pc, #200]	; 18c8 <bool_expression_finalise+0x16c>
    17fc:	bl	0 <coda_set_error>
    1800:	mvn	r3, #0
    1804:	b	18b8 <bool_expression_finalise+0x15c>
    1808:	ldr	r3, [fp, #-24]	; 0xffffffe8
    180c:	ldr	r3, [r3]
    1810:	ldr	r3, [r3, #12]
    1814:	sub	r2, fp, #20
    1818:	mov	r1, r2
    181c:	mov	r0, r3
    1820:	bl	0 <coda_expression_from_string>
    1824:	mov	r3, r0
    1828:	cmp	r3, #0
    182c:	beq	1838 <bool_expression_finalise+0xdc>
    1830:	mvn	r3, #0
    1834:	b	18b8 <bool_expression_finalise+0x15c>
    1838:	ldr	r3, [fp, #-24]	; 0xffffffe8
    183c:	ldr	r3, [r3]
    1840:	ldr	r3, [r3, #12]
    1844:	mov	r0, r3
    1848:	bl	0 <free>
    184c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1850:	ldr	r3, [r3]
    1854:	mov	r2, #0
    1858:	str	r2, [r3, #12]
    185c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1860:	ldr	r3, [r3]
    1864:	ldr	r2, [fp, #-20]	; 0xffffffec
    1868:	str	r2, [r3, #8]
    186c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1870:	sub	r2, fp, #16
    1874:	mov	r1, r2
    1878:	mov	r0, r3
    187c:	bl	0 <coda_expression_get_type>
    1880:	mov	r3, r0
    1884:	cmp	r3, #0
    1888:	beq	1894 <bool_expression_finalise+0x138>
    188c:	mvn	r3, #0
    1890:	b	18b8 <bool_expression_finalise+0x15c>
    1894:	ldr	r3, [fp, #-16]
    1898:	cmp	r3, #0
    189c:	beq	18b4 <bool_expression_finalise+0x158>
    18a0:	ldr	r1, [pc, #36]	; 18cc <bool_expression_finalise+0x170>
    18a4:	ldr	r0, [pc, #28]	; 18c8 <bool_expression_finalise+0x16c>
    18a8:	bl	0 <coda_set_error>
    18ac:	mvn	r3, #0
    18b0:	b	18b8 <bool_expression_finalise+0x15c>
    18b4:	mov	r3, #0
    18b8:	mov	r0, r3
    18bc:	sub	sp, fp, #8
    18c0:	pop	{r4, fp, pc}
    18c4:	.word	0x00000be0
    18c8:	.word	0xfffffe70
    18cc:	.word	0x00000bfc

000018d0 <bool_expression_init>:
    18d0:	push	{fp}		; (str fp, [sp, #-4]!)
    18d4:	add	fp, sp, #0
    18d8:	sub	sp, sp, #12
    18dc:	str	r0, [fp, #-8]
    18e0:	str	r1, [fp, #-12]
    18e4:	ldr	r3, [fp, #-8]
    18e8:	ldr	r3, [r3]
    18ec:	mov	r2, #1
    18f0:	str	r2, [r3, #32]
    18f4:	ldr	r3, [fp, #-8]
    18f8:	ldr	r3, [r3]
    18fc:	ldr	r2, [pc, #36]	; 1928 <bool_expression_init+0x58>
    1900:	str	r2, [r3, #40]	; 0x28
    1904:	ldr	r3, [fp, #-8]
    1908:	ldr	r3, [r3]
    190c:	ldr	r2, [pc, #24]	; 192c <bool_expression_init+0x5c>
    1910:	str	r2, [r3, #36]	; 0x24
    1914:	mov	r3, #0
    1918:	mov	r0, r3
    191c:	add	sp, fp, #0
    1920:	pop	{fp}		; (ldr fp, [sp], #4)
    1924:	bx	lr
	...

00001930 <integer_expression_finalise>:
    1930:	push	{r4, fp, lr}
    1934:	add	fp, sp, #8
    1938:	sub	sp, sp, #20
    193c:	str	r0, [fp, #-24]	; 0xffffffe8
    1940:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1944:	ldr	r3, [r3]
    1948:	ldr	r3, [r3, #12]
    194c:	cmp	r3, #0
    1950:	beq	19b4 <integer_expression_finalise+0x84>
    1954:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1958:	ldr	r3, [r3]
    195c:	ldr	r4, [r3, #12]
    1960:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1964:	ldr	r3, [r3]
    1968:	ldr	r3, [r3, #12]
    196c:	mov	r0, r3
    1970:	bl	0 <strlen>
    1974:	mov	r3, r0
    1978:	mov	r1, r3
    197c:	mov	r0, r4
    1980:	bl	c8 <is_whitespace>
    1984:	mov	r3, r0
    1988:	cmp	r3, #0
    198c:	beq	19b4 <integer_expression_finalise+0x84>
    1990:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1994:	ldr	r3, [r3]
    1998:	ldr	r3, [r3, #12]
    199c:	mov	r0, r3
    19a0:	bl	0 <free>
    19a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19a8:	ldr	r3, [r3]
    19ac:	mov	r2, #0
    19b0:	str	r2, [r3, #12]
    19b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19b8:	ldr	r3, [r3]
    19bc:	ldr	r3, [r3, #12]
    19c0:	cmp	r3, #0
    19c4:	bne	19dc <integer_expression_finalise+0xac>
    19c8:	ldr	r1, [pc, #200]	; 1a98 <integer_expression_finalise+0x168>
    19cc:	ldr	r0, [pc, #200]	; 1a9c <integer_expression_finalise+0x16c>
    19d0:	bl	0 <coda_set_error>
    19d4:	mvn	r3, #0
    19d8:	b	1a8c <integer_expression_finalise+0x15c>
    19dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19e0:	ldr	r3, [r3]
    19e4:	ldr	r3, [r3, #12]
    19e8:	sub	r2, fp, #20
    19ec:	mov	r1, r2
    19f0:	mov	r0, r3
    19f4:	bl	0 <coda_expression_from_string>
    19f8:	mov	r3, r0
    19fc:	cmp	r3, #0
    1a00:	beq	1a0c <integer_expression_finalise+0xdc>
    1a04:	mvn	r3, #0
    1a08:	b	1a8c <integer_expression_finalise+0x15c>
    1a0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a10:	ldr	r3, [r3]
    1a14:	ldr	r3, [r3, #12]
    1a18:	mov	r0, r3
    1a1c:	bl	0 <free>
    1a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a24:	ldr	r3, [r3]
    1a28:	mov	r2, #0
    1a2c:	str	r2, [r3, #12]
    1a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a34:	ldr	r3, [r3]
    1a38:	ldr	r2, [fp, #-20]	; 0xffffffec
    1a3c:	str	r2, [r3, #8]
    1a40:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a44:	sub	r2, fp, #16
    1a48:	mov	r1, r2
    1a4c:	mov	r0, r3
    1a50:	bl	0 <coda_expression_get_type>
    1a54:	mov	r3, r0
    1a58:	cmp	r3, #0
    1a5c:	beq	1a68 <integer_expression_finalise+0x138>
    1a60:	mvn	r3, #0
    1a64:	b	1a8c <integer_expression_finalise+0x15c>
    1a68:	ldr	r3, [fp, #-16]
    1a6c:	cmp	r3, #1
    1a70:	beq	1a88 <integer_expression_finalise+0x158>
    1a74:	ldr	r1, [pc, #36]	; 1aa0 <integer_expression_finalise+0x170>
    1a78:	ldr	r0, [pc, #28]	; 1a9c <integer_expression_finalise+0x16c>
    1a7c:	bl	0 <coda_set_error>
    1a80:	mvn	r3, #0
    1a84:	b	1a8c <integer_expression_finalise+0x15c>
    1a88:	mov	r3, #0
    1a8c:	mov	r0, r3
    1a90:	sub	sp, fp, #8
    1a94:	pop	{r4, fp, pc}
    1a98:	.word	0x00000c18
    1a9c:	.word	0xfffffe70
    1aa0:	.word	0x00000c34

00001aa4 <integer_expression_init>:
    1aa4:	push	{fp}		; (str fp, [sp, #-4]!)
    1aa8:	add	fp, sp, #0
    1aac:	sub	sp, sp, #12
    1ab0:	str	r0, [fp, #-8]
    1ab4:	str	r1, [fp, #-12]
    1ab8:	ldr	r3, [fp, #-8]
    1abc:	ldr	r3, [r3]
    1ac0:	mov	r2, #1
    1ac4:	str	r2, [r3, #32]
    1ac8:	ldr	r3, [fp, #-8]
    1acc:	ldr	r3, [r3]
    1ad0:	ldr	r2, [pc, #36]	; 1afc <integer_expression_init+0x58>
    1ad4:	str	r2, [r3, #40]	; 0x28
    1ad8:	ldr	r3, [fp, #-8]
    1adc:	ldr	r3, [r3]
    1ae0:	ldr	r2, [pc, #24]	; 1b00 <integer_expression_init+0x5c>
    1ae4:	str	r2, [r3, #36]	; 0x24
    1ae8:	mov	r3, #0
    1aec:	mov	r0, r3
    1af0:	add	sp, fp, #0
    1af4:	pop	{fp}		; (ldr fp, [sp], #4)
    1af8:	bx	lr
	...

00001b04 <integer_constant_or_expression_finalise>:
    1b04:	push	{r4, fp, lr}
    1b08:	add	fp, sp, #8
    1b0c:	sub	sp, sp, #20
    1b10:	str	r0, [fp, #-24]	; 0xffffffe8
    1b14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b18:	ldr	r3, [r3]
    1b1c:	ldr	r3, [r3, #12]
    1b20:	cmp	r3, #0
    1b24:	beq	1b88 <integer_constant_or_expression_finalise+0x84>
    1b28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b2c:	ldr	r3, [r3]
    1b30:	ldr	r4, [r3, #12]
    1b34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b38:	ldr	r3, [r3]
    1b3c:	ldr	r3, [r3, #12]
    1b40:	mov	r0, r3
    1b44:	bl	0 <strlen>
    1b48:	mov	r3, r0
    1b4c:	mov	r1, r3
    1b50:	mov	r0, r4
    1b54:	bl	c8 <is_whitespace>
    1b58:	mov	r3, r0
    1b5c:	cmp	r3, #0
    1b60:	beq	1b88 <integer_constant_or_expression_finalise+0x84>
    1b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b68:	ldr	r3, [r3]
    1b6c:	ldr	r3, [r3, #12]
    1b70:	mov	r0, r3
    1b74:	bl	0 <free>
    1b78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b7c:	ldr	r3, [r3]
    1b80:	mov	r2, #0
    1b84:	str	r2, [r3, #12]
    1b88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b8c:	ldr	r3, [r3]
    1b90:	ldr	r3, [r3, #12]
    1b94:	cmp	r3, #0
    1b98:	bne	1bb0 <integer_constant_or_expression_finalise+0xac>
    1b9c:	ldr	r1, [pc, #312]	; 1cdc <integer_constant_or_expression_finalise+0x1d8>
    1ba0:	ldr	r0, [pc, #312]	; 1ce0 <integer_constant_or_expression_finalise+0x1dc>
    1ba4:	bl	0 <coda_set_error>
    1ba8:	mvn	r3, #0
    1bac:	b	1cd0 <integer_constant_or_expression_finalise+0x1cc>
    1bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1bb4:	ldr	r3, [r3]
    1bb8:	ldr	r3, [r3, #12]
    1bbc:	sub	r2, fp, #20
    1bc0:	mov	r1, r2
    1bc4:	mov	r0, r3
    1bc8:	bl	0 <coda_expression_from_string>
    1bcc:	mov	r3, r0
    1bd0:	cmp	r3, #0
    1bd4:	beq	1be0 <integer_constant_or_expression_finalise+0xdc>
    1bd8:	mvn	r3, #0
    1bdc:	b	1cd0 <integer_constant_or_expression_finalise+0x1cc>
    1be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1be4:	ldr	r3, [r3]
    1be8:	ldr	r3, [r3, #12]
    1bec:	mov	r0, r3
    1bf0:	bl	0 <free>
    1bf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1bf8:	ldr	r3, [r3]
    1bfc:	mov	r2, #0
    1c00:	str	r2, [r3, #12]
    1c04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c08:	ldr	r3, [r3]
    1c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1c10:	str	r2, [r3, #8]
    1c14:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c18:	sub	r2, fp, #16
    1c1c:	mov	r1, r2
    1c20:	mov	r0, r3
    1c24:	bl	0 <coda_expression_get_type>
    1c28:	mov	r3, r0
    1c2c:	cmp	r3, #0
    1c30:	beq	1c48 <integer_constant_or_expression_finalise+0x144>
    1c34:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c38:	mov	r0, r3
    1c3c:	bl	0 <coda_expression_delete>
    1c40:	mvn	r3, #0
    1c44:	b	1cd0 <integer_constant_or_expression_finalise+0x1cc>
    1c48:	ldr	r3, [fp, #-16]
    1c4c:	cmp	r3, #1
    1c50:	beq	1c68 <integer_constant_or_expression_finalise+0x164>
    1c54:	ldr	r1, [pc, #136]	; 1ce4 <integer_constant_or_expression_finalise+0x1e0>
    1c58:	ldr	r0, [pc, #128]	; 1ce0 <integer_constant_or_expression_finalise+0x1dc>
    1c5c:	bl	0 <coda_set_error>
    1c60:	mvn	r3, #0
    1c64:	b	1cd0 <integer_constant_or_expression_finalise+0x1cc>
    1c68:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c6c:	mov	r0, r3
    1c70:	bl	0 <coda_expression_is_constant>
    1c74:	mov	r3, r0
    1c78:	cmp	r3, #0
    1c7c:	beq	1ccc <integer_constant_or_expression_finalise+0x1c8>
    1c80:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c88:	ldr	r3, [r3]
    1c8c:	add	r3, r3, #16
    1c90:	mov	r2, r3
    1c94:	mov	r1, #0
    1c98:	bl	0 <coda_expression_eval_integer>
    1c9c:	mov	r3, r0
    1ca0:	cmp	r3, #0
    1ca4:	beq	1cb0 <integer_constant_or_expression_finalise+0x1ac>
    1ca8:	mvn	r3, #0
    1cac:	b	1cd0 <integer_constant_or_expression_finalise+0x1cc>
    1cb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1cb4:	ldr	r3, [r3]
    1cb8:	mov	r2, #0
    1cbc:	str	r2, [r3, #8]
    1cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1cc4:	mov	r0, r3
    1cc8:	bl	0 <coda_expression_delete>
    1ccc:	mov	r3, #0
    1cd0:	mov	r0, r3
    1cd4:	sub	sp, fp, #8
    1cd8:	pop	{r4, fp, pc}
    1cdc:	.word	0x00000c18
    1ce0:	.word	0xfffffe70
    1ce4:	.word	0x00000c34

00001ce8 <integer_constant_or_expression_init>:
    1ce8:	push	{fp}		; (str fp, [sp, #-4]!)
    1cec:	add	fp, sp, #0
    1cf0:	sub	sp, sp, #12
    1cf4:	str	r0, [fp, #-8]
    1cf8:	str	r1, [fp, #-12]
    1cfc:	ldr	r3, [fp, #-8]
    1d00:	ldr	r3, [r3]
    1d04:	mov	r2, #1
    1d08:	str	r2, [r3, #32]
    1d0c:	ldr	r3, [fp, #-8]
    1d10:	ldr	r3, [r3]
    1d14:	ldr	r2, [pc, #36]	; 1d40 <integer_constant_or_expression_init+0x58>
    1d18:	str	r2, [r3, #40]	; 0x28
    1d1c:	ldr	r3, [fp, #-8]
    1d20:	ldr	r3, [r3]
    1d24:	ldr	r2, [pc, #24]	; 1d44 <integer_constant_or_expression_init+0x5c>
    1d28:	str	r2, [r3, #36]	; 0x24
    1d2c:	mov	r3, #0
    1d30:	mov	r0, r3
    1d34:	add	sp, fp, #0
    1d38:	pop	{fp}		; (ldr fp, [sp], #4)
    1d3c:	bx	lr
	...

00001d48 <optional_integer_constant_or_expression_finalise>:
    1d48:	push	{r4, fp, lr}
    1d4c:	add	fp, sp, #8
    1d50:	sub	sp, sp, #20
    1d54:	str	r0, [fp, #-24]	; 0xffffffe8
    1d58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d5c:	ldr	r3, [r3]
    1d60:	ldr	r3, [r3, #12]
    1d64:	cmp	r3, #0
    1d68:	beq	1dcc <optional_integer_constant_or_expression_finalise+0x84>
    1d6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d70:	ldr	r3, [r3]
    1d74:	ldr	r4, [r3, #12]
    1d78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d7c:	ldr	r3, [r3]
    1d80:	ldr	r3, [r3, #12]
    1d84:	mov	r0, r3
    1d88:	bl	0 <strlen>
    1d8c:	mov	r3, r0
    1d90:	mov	r1, r3
    1d94:	mov	r0, r4
    1d98:	bl	c8 <is_whitespace>
    1d9c:	mov	r3, r0
    1da0:	cmp	r3, #0
    1da4:	beq	1dcc <optional_integer_constant_or_expression_finalise+0x84>
    1da8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1dac:	ldr	r3, [r3]
    1db0:	ldr	r3, [r3, #12]
    1db4:	mov	r0, r3
    1db8:	bl	0 <free>
    1dbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1dc0:	ldr	r3, [r3]
    1dc4:	mov	r2, #0
    1dc8:	str	r2, [r3, #12]
    1dcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1dd0:	ldr	r3, [r3]
    1dd4:	ldr	r3, [r3, #12]
    1dd8:	cmp	r3, #0
    1ddc:	bne	1df8 <optional_integer_constant_or_expression_finalise+0xb0>
    1de0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1de4:	ldr	r3, [r3]
    1de8:	mov	r2, #1
    1dec:	str	r2, [r3, #4]
    1df0:	mov	r3, #0
    1df4:	b	1f18 <optional_integer_constant_or_expression_finalise+0x1d0>
    1df8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1dfc:	ldr	r3, [r3]
    1e00:	ldr	r3, [r3, #12]
    1e04:	sub	r2, fp, #20
    1e08:	mov	r1, r2
    1e0c:	mov	r0, r3
    1e10:	bl	0 <coda_expression_from_string>
    1e14:	mov	r3, r0
    1e18:	cmp	r3, #0
    1e1c:	beq	1e28 <optional_integer_constant_or_expression_finalise+0xe0>
    1e20:	mvn	r3, #0
    1e24:	b	1f18 <optional_integer_constant_or_expression_finalise+0x1d0>
    1e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e2c:	ldr	r3, [r3]
    1e30:	ldr	r3, [r3, #12]
    1e34:	mov	r0, r3
    1e38:	bl	0 <free>
    1e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e40:	ldr	r3, [r3]
    1e44:	mov	r2, #0
    1e48:	str	r2, [r3, #12]
    1e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e50:	ldr	r3, [r3]
    1e54:	ldr	r2, [fp, #-20]	; 0xffffffec
    1e58:	str	r2, [r3, #8]
    1e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e60:	sub	r2, fp, #16
    1e64:	mov	r1, r2
    1e68:	mov	r0, r3
    1e6c:	bl	0 <coda_expression_get_type>
    1e70:	mov	r3, r0
    1e74:	cmp	r3, #0
    1e78:	beq	1e90 <optional_integer_constant_or_expression_finalise+0x148>
    1e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e80:	mov	r0, r3
    1e84:	bl	0 <coda_expression_delete>
    1e88:	mvn	r3, #0
    1e8c:	b	1f18 <optional_integer_constant_or_expression_finalise+0x1d0>
    1e90:	ldr	r3, [fp, #-16]
    1e94:	cmp	r3, #1
    1e98:	beq	1eb0 <optional_integer_constant_or_expression_finalise+0x168>
    1e9c:	ldr	r1, [pc, #128]	; 1f24 <optional_integer_constant_or_expression_finalise+0x1dc>
    1ea0:	ldr	r0, [pc, #128]	; 1f28 <optional_integer_constant_or_expression_finalise+0x1e0>
    1ea4:	bl	0 <coda_set_error>
    1ea8:	mvn	r3, #0
    1eac:	b	1f18 <optional_integer_constant_or_expression_finalise+0x1d0>
    1eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1eb4:	mov	r0, r3
    1eb8:	bl	0 <coda_expression_is_constant>
    1ebc:	mov	r3, r0
    1ec0:	cmp	r3, #0
    1ec4:	beq	1f14 <optional_integer_constant_or_expression_finalise+0x1cc>
    1ec8:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ecc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ed0:	ldr	r3, [r3]
    1ed4:	add	r3, r3, #16
    1ed8:	mov	r2, r3
    1edc:	mov	r1, #0
    1ee0:	bl	0 <coda_expression_eval_integer>
    1ee4:	mov	r3, r0
    1ee8:	cmp	r3, #0
    1eec:	beq	1ef8 <optional_integer_constant_or_expression_finalise+0x1b0>
    1ef0:	mvn	r3, #0
    1ef4:	b	1f18 <optional_integer_constant_or_expression_finalise+0x1d0>
    1ef8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1efc:	ldr	r3, [r3]
    1f00:	mov	r2, #0
    1f04:	str	r2, [r3, #8]
    1f08:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f0c:	mov	r0, r3
    1f10:	bl	0 <coda_expression_delete>
    1f14:	mov	r3, #0
    1f18:	mov	r0, r3
    1f1c:	sub	sp, fp, #8
    1f20:	pop	{r4, fp, pc}
    1f24:	.word	0x00000c34
    1f28:	.word	0xfffffe70

00001f2c <optional_integer_constant_or_expression_init>:
    1f2c:	push	{fp}		; (str fp, [sp, #-4]!)
    1f30:	add	fp, sp, #0
    1f34:	sub	sp, sp, #12
    1f38:	str	r0, [fp, #-8]
    1f3c:	str	r1, [fp, #-12]
    1f40:	ldr	r3, [fp, #-8]
    1f44:	ldr	r3, [r3]
    1f48:	mov	r2, #1
    1f4c:	str	r2, [r3, #32]
    1f50:	ldr	r3, [fp, #-8]
    1f54:	ldr	r3, [r3]
    1f58:	ldr	r2, [pc, #36]	; 1f84 <optional_integer_constant_or_expression_init+0x58>
    1f5c:	str	r2, [r3, #40]	; 0x28
    1f60:	ldr	r3, [fp, #-8]
    1f64:	ldr	r3, [r3]
    1f68:	ldr	r2, [pc, #24]	; 1f88 <optional_integer_constant_or_expression_init+0x5c>
    1f6c:	str	r2, [r3, #36]	; 0x24
    1f70:	mov	r3, #0
    1f74:	mov	r0, r3
    1f78:	add	sp, fp, #0
    1f7c:	pop	{fp}		; (ldr fp, [sp], #4)
    1f80:	bx	lr
	...

00001f8c <product_class_add_named_type>:
    1f8c:	push	{fp, lr}
    1f90:	add	fp, sp, #4
    1f94:	sub	sp, sp, #8
    1f98:	str	r0, [fp, #-8]
    1f9c:	ldr	r3, [fp, #-8]
    1fa0:	ldr	r3, [r3, #24]
    1fa4:	cmp	r3, #0
    1fa8:	bne	1fc0 <product_class_add_named_type+0x34>
    1fac:	ldr	r3, [pc, #80]	; 2004 <product_class_add_named_type+0x78>
    1fb0:	ldr	r2, [pc, #80]	; 2008 <product_class_add_named_type+0x7c>
    1fb4:	ldr	r1, [pc, #80]	; 200c <product_class_add_named_type+0x80>
    1fb8:	ldr	r0, [pc, #80]	; 2010 <product_class_add_named_type+0x84>
    1fbc:	bl	0 <__assert_fail>
    1fc0:	ldr	r3, [fp, #-8]
    1fc4:	ldr	r2, [r3, #24]
    1fc8:	ldr	r3, [fp, #-8]
    1fcc:	ldr	r3, [r3]
    1fd0:	ldr	r3, [r3, #8]
    1fd4:	mov	r1, r3
    1fd8:	mov	r0, r2
    1fdc:	bl	0 <coda_product_class_add_named_type>
    1fe0:	mov	r3, r0
    1fe4:	cmp	r3, #0
    1fe8:	beq	1ff4 <product_class_add_named_type+0x68>
    1fec:	mvn	r3, #0
    1ff0:	b	1ff8 <product_class_add_named_type+0x6c>
    1ff4:	mov	r3, #0
    1ff8:	mov	r0, r3
    1ffc:	sub	sp, fp, #4
    2000:	pop	{fp, pc}
    2004:	.word	0x00002228
    2008:	.word	0x000003ea
    200c:	.word	0x000009bc
    2010:	.word	0x00000ba8

00002014 <string_data_finalise>:
    2014:	push	{fp, lr}
    2018:	add	fp, sp, #4
    201c:	sub	sp, sp, #8
    2020:	str	r0, [fp, #-8]
    2024:	ldr	r3, [fp, #-8]
    2028:	ldr	r3, [r3]
    202c:	ldr	r3, [r3, #12]
    2030:	mov	r0, r3
    2034:	bl	c54 <decode_xml_string>
    2038:	mov	r3, #0
    203c:	mov	r0, r3
    2040:	sub	sp, fp, #4
    2044:	pop	{fp, pc}

00002048 <string_data_init>:
    2048:	push	{fp}		; (str fp, [sp, #-4]!)
    204c:	add	fp, sp, #0
    2050:	sub	sp, sp, #12
    2054:	str	r0, [fp, #-8]
    2058:	str	r1, [fp, #-12]
    205c:	ldr	r3, [fp, #-8]
    2060:	ldr	r3, [r3]
    2064:	mov	r2, #1
    2068:	str	r2, [r3, #32]
    206c:	ldr	r3, [fp, #-8]
    2070:	ldr	r3, [r3]
    2074:	ldr	r2, [pc, #20]	; 2090 <string_data_init+0x48>
    2078:	str	r2, [r3, #36]	; 0x24
    207c:	mov	r3, #0
    2080:	mov	r0, r3
    2084:	add	sp, fp, #0
    2088:	pop	{fp}		; (ldr fp, [sp], #4)
    208c:	bx	lr
    2090:	.word	0x00000000

00002094 <type_set_format>:
    2094:	push	{fp, lr}
    2098:	add	fp, sp, #4
    209c:	sub	sp, sp, #16
    20a0:	str	r0, [fp, #-16]
    20a4:	str	r1, [fp, #-20]	; 0xffffffec
    20a8:	ldr	r3, [fp, #-16]
    20ac:	ldr	r2, [fp, #-20]	; 0xffffffec
    20b0:	str	r2, [r3]
    20b4:	ldr	r3, [fp, #-16]
    20b8:	ldr	r3, [r3, #8]
    20bc:	cmp	r3, #1
    20c0:	beq	213c <type_set_format+0xa8>
    20c4:	cmp	r3, #1
    20c8:	bcc	20d8 <type_set_format+0x44>
    20cc:	cmp	r3, #6
    20d0:	beq	2154 <type_set_format+0xc0>
    20d4:	b	216c <type_set_format+0xd8>
    20d8:	sub	r3, fp, #12
    20dc:	mov	r1, r3
    20e0:	ldr	r0, [fp, #-16]
    20e4:	bl	0 <coda_type_get_num_record_fields>
    20e8:	mov	r3, #0
    20ec:	str	r3, [fp, #-8]
    20f0:	b	2128 <type_set_format+0x94>
    20f4:	ldr	r3, [fp, #-16]
    20f8:	ldr	r2, [r3, #52]	; 0x34
    20fc:	ldr	r3, [fp, #-8]
    2100:	lsl	r3, r3, #2
    2104:	add	r3, r2, r3
    2108:	ldr	r3, [r3]
    210c:	ldr	r3, [r3, #8]
    2110:	ldr	r1, [fp, #-20]	; 0xffffffec
    2114:	mov	r0, r3
    2118:	bl	2094 <type_set_format>
    211c:	ldr	r3, [fp, #-8]
    2120:	add	r3, r3, #1
    2124:	str	r3, [fp, #-8]
    2128:	ldr	r3, [fp, #-12]
    212c:	ldr	r2, [fp, #-8]
    2130:	cmp	r2, r3
    2134:	blt	20f4 <type_set_format+0x60>
    2138:	b	216c <type_set_format+0xd8>
    213c:	ldr	r3, [fp, #-16]
    2140:	ldr	r3, [r3, #40]	; 0x28
    2144:	ldr	r1, [fp, #-20]	; 0xffffffec
    2148:	mov	r0, r3
    214c:	bl	2094 <type_set_format>
    2150:	b	216c <type_set_format+0xd8>
    2154:	ldr	r3, [fp, #-16]
    2158:	ldr	r3, [r3, #44]	; 0x2c
    215c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2160:	mov	r0, r3
    2164:	bl	2094 <type_set_format>
    2168:	nop			; (mov r0, r0)
    216c:	ldr	r3, [fp, #-16]
    2170:	ldr	r3, [r3, #36]	; 0x24
    2174:	cmp	r3, #0
    2178:	beq	2190 <type_set_format+0xfc>
    217c:	ldr	r3, [fp, #-16]
    2180:	ldr	r3, [r3, #36]	; 0x24
    2184:	ldr	r1, [fp, #-20]	; 0xffffffec
    2188:	mov	r0, r3
    218c:	bl	2094 <type_set_format>
    2190:	mov	r3, #0
    2194:	mov	r0, r3
    2198:	sub	sp, fp, #4
    219c:	pop	{fp, pc}

000021a0 <type_set_description>:
    21a0:	push	{fp, lr}
    21a4:	add	fp, sp, #4
    21a8:	sub	sp, sp, #8
    21ac:	str	r0, [fp, #-8]
    21b0:	ldr	r3, [fp, #-8]
    21b4:	ldr	r3, [r3]
    21b8:	ldr	r3, [r3, #12]
    21bc:	cmp	r3, #0
    21c0:	bne	21e8 <type_set_description+0x48>
    21c4:	ldr	r3, [fp, #-8]
    21c8:	ldr	r3, [r3]
    21cc:	ldr	r3, [r3, #396]	; 0x18c
    21d0:	ldr	r3, [r3, #8]
    21d4:	ldr	r1, [pc, #68]	; 2220 <type_set_description+0x80>
    21d8:	mov	r0, r3
    21dc:	bl	0 <coda_type_set_description>
    21e0:	mov	r3, r0
    21e4:	b	2214 <type_set_description+0x74>
    21e8:	ldr	r3, [fp, #-8]
    21ec:	ldr	r3, [r3]
    21f0:	ldr	r3, [r3, #396]	; 0x18c
    21f4:	ldr	r2, [r3, #8]
    21f8:	ldr	r3, [fp, #-8]
    21fc:	ldr	r3, [r3]
    2200:	ldr	r3, [r3, #12]
    2204:	mov	r1, r3
    2208:	mov	r0, r2
    220c:	bl	0 <coda_type_set_description>
    2210:	mov	r3, r0
    2214:	mov	r0, r3
    2218:	sub	sp, fp, #4
    221c:	pop	{fp, pc}
    2220:	.word	0x00000c50

00002224 <type_set_bit_size>:
    2224:	push	{fp, lr}
    2228:	add	fp, sp, #4
    222c:	sub	sp, sp, #8
    2230:	str	r0, [fp, #-8]
    2234:	ldr	r3, [fp, #-8]
    2238:	ldr	r3, [r3]
    223c:	ldr	r3, [r3, #8]
    2240:	cmp	r3, #0
    2244:	beq	2298 <type_set_bit_size+0x74>
    2248:	ldr	r3, [fp, #-8]
    224c:	ldr	r3, [r3]
    2250:	ldr	r3, [r3, #396]	; 0x18c
    2254:	ldr	r2, [r3, #8]
    2258:	ldr	r3, [fp, #-8]
    225c:	ldr	r3, [r3]
    2260:	ldr	r3, [r3, #8]
    2264:	mov	r1, r3
    2268:	mov	r0, r2
    226c:	bl	0 <coda_type_set_bit_size_expression>
    2270:	mov	r3, r0
    2274:	cmp	r3, #0
    2278:	beq	2284 <type_set_bit_size+0x60>
    227c:	mvn	r3, #0
    2280:	b	22e0 <type_set_bit_size+0xbc>
    2284:	ldr	r3, [fp, #-8]
    2288:	ldr	r3, [r3]
    228c:	mov	r2, #0
    2290:	str	r2, [r3, #8]
    2294:	b	22dc <type_set_bit_size+0xb8>
    2298:	ldr	r3, [fp, #-8]
    229c:	ldr	r3, [r3]
    22a0:	ldr	r3, [r3, #396]	; 0x18c
    22a4:	ldr	r1, [r3, #8]
    22a8:	ldr	r3, [fp, #-8]
    22ac:	ldr	r3, [r3]
    22b0:	ldrd	r2, [r3, #16]
    22b4:	mov	r3, r2
    22b8:	mov	r2, r3
    22bc:	asr	r3, r2, #31
    22c0:	mov	r0, r1
    22c4:	bl	0 <coda_type_set_bit_size>
    22c8:	mov	r3, r0
    22cc:	cmp	r3, #0
    22d0:	beq	22dc <type_set_bit_size+0xb8>
    22d4:	mvn	r3, #0
    22d8:	b	22e0 <type_set_bit_size+0xbc>
    22dc:	mov	r3, #0
    22e0:	mov	r0, r3
    22e4:	sub	sp, fp, #4
    22e8:	pop	{fp, pc}

000022ec <type_set_byte_size>:
    22ec:	push	{fp, lr}
    22f0:	add	fp, sp, #4
    22f4:	sub	sp, sp, #8
    22f8:	str	r0, [fp, #-8]
    22fc:	ldr	r3, [fp, #-8]
    2300:	ldr	r3, [r3]
    2304:	ldr	r3, [r3, #8]
    2308:	cmp	r3, #0
    230c:	beq	2360 <type_set_byte_size+0x74>
    2310:	ldr	r3, [fp, #-8]
    2314:	ldr	r3, [r3]
    2318:	ldr	r3, [r3, #396]	; 0x18c
    231c:	ldr	r2, [r3, #8]
    2320:	ldr	r3, [fp, #-8]
    2324:	ldr	r3, [r3]
    2328:	ldr	r3, [r3, #8]
    232c:	mov	r1, r3
    2330:	mov	r0, r2
    2334:	bl	0 <coda_type_set_byte_size_expression>
    2338:	mov	r3, r0
    233c:	cmp	r3, #0
    2340:	beq	234c <type_set_byte_size+0x60>
    2344:	mvn	r3, #0
    2348:	b	23a8 <type_set_byte_size+0xbc>
    234c:	ldr	r3, [fp, #-8]
    2350:	ldr	r3, [r3]
    2354:	mov	r2, #0
    2358:	str	r2, [r3, #8]
    235c:	b	23a4 <type_set_byte_size+0xb8>
    2360:	ldr	r3, [fp, #-8]
    2364:	ldr	r3, [r3]
    2368:	ldr	r3, [r3, #396]	; 0x18c
    236c:	ldr	r1, [r3, #8]
    2370:	ldr	r3, [fp, #-8]
    2374:	ldr	r3, [r3]
    2378:	ldrd	r2, [r3, #16]
    237c:	mov	r3, r2
    2380:	mov	r2, r3
    2384:	asr	r3, r2, #31
    2388:	mov	r0, r1
    238c:	bl	0 <coda_type_set_byte_size>
    2390:	mov	r3, r0
    2394:	cmp	r3, #0
    2398:	beq	23a4 <type_set_byte_size+0xb8>
    239c:	mvn	r3, #0
    23a0:	b	23a8 <type_set_byte_size+0xbc>
    23a4:	mov	r3, #0
    23a8:	mov	r0, r3
    23ac:	sub	sp, fp, #4
    23b0:	pop	{fp, pc}

000023b4 <void_expression_finalise>:
    23b4:	push	{r4, fp, lr}
    23b8:	add	fp, sp, #8
    23bc:	sub	sp, sp, #20
    23c0:	str	r0, [fp, #-24]	; 0xffffffe8
    23c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    23c8:	ldr	r3, [r3]
    23cc:	ldr	r3, [r3, #12]
    23d0:	cmp	r3, #0
    23d4:	beq	2438 <void_expression_finalise+0x84>
    23d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    23dc:	ldr	r3, [r3]
    23e0:	ldr	r4, [r3, #12]
    23e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    23e8:	ldr	r3, [r3]
    23ec:	ldr	r3, [r3, #12]
    23f0:	mov	r0, r3
    23f4:	bl	0 <strlen>
    23f8:	mov	r3, r0
    23fc:	mov	r1, r3
    2400:	mov	r0, r4
    2404:	bl	c8 <is_whitespace>
    2408:	mov	r3, r0
    240c:	cmp	r3, #0
    2410:	beq	2438 <void_expression_finalise+0x84>
    2414:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2418:	ldr	r3, [r3]
    241c:	ldr	r3, [r3, #12]
    2420:	mov	r0, r3
    2424:	bl	0 <free>
    2428:	ldr	r3, [fp, #-24]	; 0xffffffe8
    242c:	ldr	r3, [r3]
    2430:	mov	r2, #0
    2434:	str	r2, [r3, #12]
    2438:	ldr	r3, [fp, #-24]	; 0xffffffe8
    243c:	ldr	r3, [r3]
    2440:	ldr	r3, [r3, #12]
    2444:	cmp	r3, #0
    2448:	bne	2460 <void_expression_finalise+0xac>
    244c:	ldr	r1, [pc, #200]	; 251c <void_expression_finalise+0x168>
    2450:	ldr	r0, [pc, #200]	; 2520 <void_expression_finalise+0x16c>
    2454:	bl	0 <coda_set_error>
    2458:	mvn	r3, #0
    245c:	b	2510 <void_expression_finalise+0x15c>
    2460:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2464:	ldr	r3, [r3]
    2468:	ldr	r3, [r3, #12]
    246c:	sub	r2, fp, #20
    2470:	mov	r1, r2
    2474:	mov	r0, r3
    2478:	bl	0 <coda_expression_from_string>
    247c:	mov	r3, r0
    2480:	cmp	r3, #0
    2484:	beq	2490 <void_expression_finalise+0xdc>
    2488:	mvn	r3, #0
    248c:	b	2510 <void_expression_finalise+0x15c>
    2490:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2494:	ldr	r3, [r3]
    2498:	ldr	r3, [r3, #12]
    249c:	mov	r0, r3
    24a0:	bl	0 <free>
    24a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    24a8:	ldr	r3, [r3]
    24ac:	mov	r2, #0
    24b0:	str	r2, [r3, #12]
    24b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    24b8:	ldr	r3, [r3]
    24bc:	ldr	r2, [fp, #-20]	; 0xffffffec
    24c0:	str	r2, [r3, #8]
    24c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    24c8:	sub	r2, fp, #16
    24cc:	mov	r1, r2
    24d0:	mov	r0, r3
    24d4:	bl	0 <coda_expression_get_type>
    24d8:	mov	r3, r0
    24dc:	cmp	r3, #0
    24e0:	beq	24ec <void_expression_finalise+0x138>
    24e4:	mvn	r3, #0
    24e8:	b	2510 <void_expression_finalise+0x15c>
    24ec:	ldr	r3, [fp, #-16]
    24f0:	cmp	r3, #5
    24f4:	beq	250c <void_expression_finalise+0x158>
    24f8:	ldr	r1, [pc, #36]	; 2524 <void_expression_finalise+0x170>
    24fc:	ldr	r0, [pc, #28]	; 2520 <void_expression_finalise+0x16c>
    2500:	bl	0 <coda_set_error>
    2504:	mvn	r3, #0
    2508:	b	2510 <void_expression_finalise+0x15c>
    250c:	mov	r3, #0
    2510:	mov	r0, r3
    2514:	sub	sp, fp, #8
    2518:	pop	{r4, fp, pc}
    251c:	.word	0x00000c54
    2520:	.word	0xfffffe70
    2524:	.word	0x00000c6c

00002528 <void_expression_init>:
    2528:	push	{fp}		; (str fp, [sp, #-4]!)
    252c:	add	fp, sp, #0
    2530:	sub	sp, sp, #12
    2534:	str	r0, [fp, #-8]
    2538:	str	r1, [fp, #-12]
    253c:	ldr	r3, [fp, #-8]
    2540:	ldr	r3, [r3]
    2544:	mov	r2, #1
    2548:	str	r2, [r3, #32]
    254c:	ldr	r3, [fp, #-8]
    2550:	ldr	r3, [r3]
    2554:	ldr	r2, [pc, #36]	; 2580 <void_expression_init+0x58>
    2558:	str	r2, [r3, #40]	; 0x28
    255c:	ldr	r3, [fp, #-8]
    2560:	ldr	r3, [r3]
    2564:	ldr	r2, [pc, #24]	; 2584 <void_expression_init+0x5c>
    2568:	str	r2, [r3, #36]	; 0x24
    256c:	mov	r3, #0
    2570:	mov	r0, r3
    2574:	add	sp, fp, #0
    2578:	pop	{fp}		; (ldr fp, [sp], #4)
    257c:	bx	lr
	...

00002588 <type_add_attribute>:
    2588:	push	{fp, lr}
    258c:	add	fp, sp, #4
    2590:	sub	sp, sp, #8
    2594:	str	r0, [fp, #-8]
    2598:	ldr	r3, [fp, #-8]
    259c:	ldr	r3, [r3]
    25a0:	ldr	r3, [r3, #396]	; 0x18c
    25a4:	ldr	r2, [r3, #8]
    25a8:	ldr	r3, [fp, #-8]
    25ac:	ldr	r3, [r3]
    25b0:	ldr	r3, [r3, #8]
    25b4:	mov	r1, r3
    25b8:	mov	r0, r2
    25bc:	bl	0 <coda_type_add_attribute>
    25c0:	mov	r3, r0
    25c4:	cmp	r3, #0
    25c8:	beq	25d4 <type_add_attribute+0x4c>
    25cc:	mvn	r3, #0
    25d0:	b	25e8 <type_add_attribute+0x60>
    25d4:	ldr	r3, [fp, #-8]
    25d8:	ldr	r3, [r3]
    25dc:	mov	r2, #0
    25e0:	str	r2, [r3, #8]
    25e4:	mov	r3, #0
    25e8:	mov	r0, r3
    25ec:	sub	sp, fp, #4
    25f0:	pop	{fp, pc}

000025f4 <xml_root_set_field>:
    25f4:	push	{fp, lr}
    25f8:	add	fp, sp, #4
    25fc:	sub	sp, sp, #8
    2600:	str	r0, [fp, #-8]
    2604:	ldr	r3, [fp, #-8]
    2608:	ldr	r3, [r3]
    260c:	ldr	r3, [r3, #396]	; 0x18c
    2610:	ldr	r2, [r3, #8]
    2614:	ldr	r3, [fp, #-8]
    2618:	ldr	r3, [r3]
    261c:	ldr	r3, [r3, #8]
    2620:	mov	r1, r3
    2624:	mov	r0, r2
    2628:	bl	0 <coda_type_record_add_field>
    262c:	mov	r3, r0
    2630:	cmp	r3, #0
    2634:	beq	2640 <xml_root_set_field+0x4c>
    2638:	mvn	r3, #0
    263c:	b	2654 <xml_root_set_field+0x60>
    2640:	ldr	r3, [fp, #-8]
    2644:	ldr	r3, [r3]
    2648:	mov	r2, #0
    264c:	str	r2, [r3, #8]
    2650:	mov	r3, #0
    2654:	mov	r0, r3
    2658:	sub	sp, fp, #4
    265c:	pop	{fp, pc}

00002660 <xml_root_init>:
    2660:	push	{r4, fp, lr}
    2664:	add	fp, sp, #8
    2668:	sub	sp, sp, #20
    266c:	str	r0, [fp, #-24]	; 0xffffffe8
    2670:	str	r1, [fp, #-28]	; 0xffffffe4
    2674:	mov	r3, #0
    2678:	str	r3, [fp, #-16]
    267c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2680:	ldr	r3, [r3, #28]
    2684:	cmp	r3, #0
    2688:	bne	26a0 <xml_root_init+0x40>
    268c:	ldr	r3, [pc, #352]	; 27f4 <xml_root_init+0x194>
    2690:	mov	r2, #1184	; 0x4a0
    2694:	ldr	r1, [pc, #348]	; 27f8 <xml_root_init+0x198>
    2698:	ldr	r0, [pc, #348]	; 27fc <xml_root_init+0x19c>
    269c:	bl	0 <__assert_fail>
    26a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    26a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    26a8:	bl	1128 <handle_format_attribute_for_type>
    26ac:	mov	r3, r0
    26b0:	cmp	r3, #0
    26b4:	beq	26c0 <xml_root_init+0x60>
    26b8:	mvn	r3, #0
    26bc:	b	27e8 <xml_root_init+0x188>
    26c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    26c4:	ldr	r3, [r3]
    26c8:	ldr	r3, [r3, #44]	; 0x2c
    26cc:	cmp	r3, #2
    26d0:	beq	270c <xml_root_init+0xac>
    26d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    26d8:	ldr	r3, [r3]
    26dc:	ldr	r3, [r3, #44]	; 0x2c
    26e0:	mov	r0, r3
    26e4:	bl	0 <coda_type_get_format_name>
    26e8:	mov	r2, r0
    26ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    26f0:	ldr	r3, [r3, #28]
    26f4:	ldr	r3, [r3, #8]
    26f8:	ldr	r1, [pc, #256]	; 2800 <xml_root_init+0x1a0>
    26fc:	ldr	r0, [pc, #256]	; 2804 <xml_root_init+0x1a4>
    2700:	bl	0 <coda_set_error>
    2704:	mvn	r3, #0
    2708:	b	27e8 <xml_root_init+0x188>
    270c:	ldr	r1, [pc, #244]	; 2808 <xml_root_init+0x1a8>
    2710:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2714:	bl	f34 <get_attribute_value>
    2718:	str	r0, [fp, #-16]
    271c:	ldr	r3, [fp, #-16]
    2720:	cmp	r3, #0
    2724:	beq	273c <xml_root_init+0xdc>
    2728:	ldr	r1, [pc, #220]	; 280c <xml_root_init+0x1ac>
    272c:	ldr	r0, [pc, #208]	; 2804 <xml_root_init+0x1a4>
    2730:	bl	0 <coda_set_error>
    2734:	mvn	r3, #0
    2738:	b	27e8 <xml_root_init+0x188>
    273c:	ldr	r1, [pc, #204]	; 2810 <xml_root_init+0x1b0>
    2740:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2744:	bl	f34 <get_attribute_value>
    2748:	str	r0, [fp, #-16]
    274c:	ldr	r3, [fp, #-16]
    2750:	cmp	r3, #0
    2754:	beq	276c <xml_root_init+0x10c>
    2758:	ldr	r1, [pc, #180]	; 2814 <xml_root_init+0x1b4>
    275c:	ldr	r0, [pc, #160]	; 2804 <xml_root_init+0x1a4>
    2760:	bl	0 <coda_set_error>
    2764:	mvn	r3, #0
    2768:	b	27e8 <xml_root_init+0x188>
    276c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2770:	ldr	r3, [r3]
    2774:	ldr	r2, [pc, #156]	; 2818 <xml_root_init+0x1b8>
    2778:	str	r2, [r3, #40]	; 0x28
    277c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2780:	ldr	r4, [r3]
    2784:	mov	r0, #2
    2788:	bl	0 <coda_type_record_new>
    278c:	mov	r3, r0
    2790:	str	r3, [r4, #8]
    2794:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2798:	ldr	r0, [fp, #-24]	; 0xffffffe8
    279c:	bl	100c <handle_name_attribute_for_type>
    27a0:	mov	r3, r0
    27a4:	cmp	r3, #0
    27a8:	beq	27b4 <xml_root_init+0x154>
    27ac:	mvn	r3, #0
    27b0:	b	27e8 <xml_root_init+0x188>
    27b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    27b8:	ldr	r0, [r3]
    27bc:	ldr	r3, [pc, #88]	; 281c <xml_root_init+0x1bc>
    27c0:	ldr	r2, [pc, #88]	; 2820 <xml_root_init+0x1c0>
    27c4:	mov	r1, #11
    27c8:	bl	14ac <register_sub_element>
    27cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    27d0:	ldr	r0, [r3]
    27d4:	ldr	r3, [pc, #72]	; 2824 <xml_root_init+0x1c4>
    27d8:	ldr	r2, [pc, #72]	; 2828 <xml_root_init+0x1c8>
    27dc:	mov	r1, #14
    27e0:	bl	14ac <register_sub_element>
    27e4:	mov	r3, #0
    27e8:	mov	r0, r3
    27ec:	sub	sp, fp, #8
    27f0:	pop	{r4, fp, pc}
    27f4:	.word	0x00002248
    27f8:	.word	0x000009bc
    27fc:	.word	0x00000c84
    2800:	.word	0x00000ca8
    2804:	.word	0xfffffe70
    2808:	.word	0x00000aa8
    280c:	.word	0x00000cdc
    2810:	.word	0x00000b58
    2814:	.word	0x00000d10
	...

0000282c <cd_array_set_type>:
    282c:	push	{fp, lr}
    2830:	add	fp, sp, #4
    2834:	sub	sp, sp, #8
    2838:	str	r0, [fp, #-8]
    283c:	ldr	r3, [fp, #-8]
    2840:	ldr	r3, [r3]
    2844:	ldr	r3, [r3, #396]	; 0x18c
    2848:	ldr	r2, [r3, #8]
    284c:	ldr	r3, [fp, #-8]
    2850:	ldr	r3, [r3]
    2854:	ldr	r3, [r3, #8]
    2858:	mov	r1, r3
    285c:	mov	r0, r2
    2860:	bl	0 <coda_type_array_set_base_type>
    2864:	mov	r3, r0
    2868:	mov	r0, r3
    286c:	sub	sp, fp, #4
    2870:	pop	{fp, pc}

00002874 <cd_array_add_dimension>:
    2874:	push	{fp, lr}
    2878:	add	fp, sp, #4
    287c:	sub	sp, sp, #8
    2880:	str	r0, [fp, #-8]
    2884:	ldr	r3, [fp, #-8]
    2888:	ldr	r3, [r3]
    288c:	ldr	r3, [r3, #8]
    2890:	cmp	r3, #0
    2894:	bne	28ac <cd_array_add_dimension+0x38>
    2898:	ldr	r3, [fp, #-8]
    289c:	ldr	r3, [r3]
    28a0:	ldr	r3, [r3, #4]
    28a4:	cmp	r3, #0
    28a8:	beq	28fc <cd_array_add_dimension+0x88>
    28ac:	ldr	r3, [fp, #-8]
    28b0:	ldr	r3, [r3]
    28b4:	ldr	r3, [r3, #396]	; 0x18c
    28b8:	ldr	r2, [r3, #8]
    28bc:	ldr	r3, [fp, #-8]
    28c0:	ldr	r3, [r3]
    28c4:	ldr	r3, [r3, #8]
    28c8:	mov	r1, r3
    28cc:	mov	r0, r2
    28d0:	bl	0 <coda_type_array_add_variable_dimension>
    28d4:	mov	r3, r0
    28d8:	cmp	r3, #0
    28dc:	beq	28e8 <cd_array_add_dimension+0x74>
    28e0:	mvn	r3, #0
    28e4:	b	293c <cd_array_add_dimension+0xc8>
    28e8:	ldr	r3, [fp, #-8]
    28ec:	ldr	r3, [r3]
    28f0:	mov	r2, #0
    28f4:	str	r2, [r3, #8]
    28f8:	b	2938 <cd_array_add_dimension+0xc4>
    28fc:	ldr	r3, [fp, #-8]
    2900:	ldr	r3, [r3]
    2904:	ldr	r3, [r3, #396]	; 0x18c
    2908:	ldr	r0, [r3, #8]
    290c:	ldr	r3, [fp, #-8]
    2910:	ldr	r3, [r3]
    2914:	ldrd	r2, [r3, #16]
    2918:	mov	r3, r2
    291c:	mov	r1, r3
    2920:	bl	0 <coda_type_array_add_fixed_dimension>
    2924:	mov	r3, r0
    2928:	cmp	r3, #0
    292c:	beq	2938 <cd_array_add_dimension+0xc4>
    2930:	mvn	r3, #0
    2934:	b	293c <cd_array_add_dimension+0xc8>
    2938:	mov	r3, #0
    293c:	mov	r0, r3
    2940:	sub	sp, fp, #4
    2944:	pop	{fp, pc}

00002948 <cd_array_finalise>:
    2948:	push	{fp, lr}
    294c:	add	fp, sp, #4
    2950:	sub	sp, sp, #8
    2954:	str	r0, [fp, #-8]
    2958:	ldr	r3, [fp, #-8]
    295c:	ldr	r3, [r3]
    2960:	ldr	r3, [r3, #8]
    2964:	mov	r0, r3
    2968:	bl	0 <coda_type_array_validate>
    296c:	mov	r3, r0
    2970:	mov	r0, r3
    2974:	sub	sp, fp, #4
    2978:	pop	{fp, pc}

0000297c <cd_array_init>:
    297c:	push	{r4, fp, lr}
    2980:	add	fp, sp, #8
    2984:	sub	sp, sp, #12
    2988:	str	r0, [fp, #-16]
    298c:	str	r1, [fp, #-20]	; 0xffffffec
    2990:	ldr	r1, [fp, #-20]	; 0xffffffec
    2994:	ldr	r0, [fp, #-16]
    2998:	bl	1128 <handle_format_attribute_for_type>
    299c:	mov	r3, r0
    29a0:	cmp	r3, #0
    29a4:	beq	29b0 <cd_array_init+0x34>
    29a8:	mvn	r3, #0
    29ac:	b	2a90 <cd_array_init+0x114>
    29b0:	ldr	r3, [fp, #-16]
    29b4:	ldr	r3, [r3]
    29b8:	ldr	r2, [pc, #220]	; 2a9c <cd_array_init+0x120>
    29bc:	str	r2, [r3, #40]	; 0x28
    29c0:	ldr	r3, [fp, #-16]
    29c4:	ldr	r4, [r3]
    29c8:	ldr	r3, [fp, #-16]
    29cc:	ldr	r3, [r3]
    29d0:	ldr	r3, [r3, #44]	; 0x2c
    29d4:	mov	r0, r3
    29d8:	bl	0 <coda_type_array_new>
    29dc:	mov	r3, r0
    29e0:	str	r3, [r4, #8]
    29e4:	ldr	r3, [fp, #-16]
    29e8:	ldr	r3, [r3]
    29ec:	ldr	r3, [r3, #8]
    29f0:	cmp	r3, #0
    29f4:	bne	2a00 <cd_array_init+0x84>
    29f8:	mvn	r3, #0
    29fc:	b	2a90 <cd_array_init+0x114>
    2a00:	ldr	r1, [fp, #-20]	; 0xffffffec
    2a04:	ldr	r0, [fp, #-16]
    2a08:	bl	100c <handle_name_attribute_for_type>
    2a0c:	mov	r3, r0
    2a10:	cmp	r3, #0
    2a14:	beq	2a20 <cd_array_init+0xa4>
    2a18:	mvn	r3, #0
    2a1c:	b	2a90 <cd_array_init+0x114>
    2a20:	ldr	r3, [fp, #-16]
    2a24:	ldr	r3, [r3]
    2a28:	ldr	r1, [pc, #112]	; 2aa0 <cd_array_init+0x124>
    2a2c:	mov	r0, r3
    2a30:	bl	1534 <register_type_elements>
    2a34:	ldr	r3, [fp, #-16]
    2a38:	ldr	r0, [r3]
    2a3c:	ldr	r3, [pc, #96]	; 2aa4 <cd_array_init+0x128>
    2a40:	ldr	r2, [pc, #96]	; 2aa8 <cd_array_init+0x12c>
    2a44:	mov	r1, #13
    2a48:	bl	14ac <register_sub_element>
    2a4c:	ldr	r3, [fp, #-16]
    2a50:	ldr	r0, [r3]
    2a54:	ldr	r3, [pc, #80]	; 2aac <cd_array_init+0x130>
    2a58:	ldr	r2, [pc, #80]	; 2ab0 <cd_array_init+0x134>
    2a5c:	mov	r1, #11
    2a60:	bl	14ac <register_sub_element>
    2a64:	ldr	r3, [fp, #-16]
    2a68:	ldr	r0, [r3]
    2a6c:	ldr	r3, [pc, #64]	; 2ab4 <cd_array_init+0x138>
    2a70:	ldr	r2, [pc, #64]	; 2ab8 <cd_array_init+0x13c>
    2a74:	mov	r1, #4
    2a78:	bl	14ac <register_sub_element>
    2a7c:	ldr	r3, [fp, #-16]
    2a80:	ldr	r3, [r3]
    2a84:	ldr	r2, [pc, #48]	; 2abc <cd_array_init+0x140>
    2a88:	str	r2, [r3, #36]	; 0x24
    2a8c:	mov	r3, #0
    2a90:	mov	r0, r3
    2a94:	sub	sp, fp, #8
    2a98:	pop	{r4, fp, pc}
	...

00002ac0 <cd_ascii_line_init>:
    2ac0:	push	{r4, fp, lr}
    2ac4:	add	fp, sp, #8
    2ac8:	sub	sp, sp, #12
    2acc:	str	r0, [fp, #-16]
    2ad0:	str	r1, [fp, #-20]	; 0xffffffec
    2ad4:	ldr	r1, [fp, #-20]	; 0xffffffec
    2ad8:	ldr	r0, [fp, #-16]
    2adc:	bl	1128 <handle_format_attribute_for_type>
    2ae0:	mov	r3, r0
    2ae4:	cmp	r3, #0
    2ae8:	beq	2af4 <cd_ascii_line_init+0x34>
    2aec:	mvn	r3, #0
    2af0:	b	2bac <cd_ascii_line_init+0xec>
    2af4:	ldr	r3, [fp, #-16]
    2af8:	ldr	r3, [r3]
    2afc:	ldr	r2, [pc, #180]	; 2bb8 <cd_ascii_line_init+0xf8>
    2b00:	str	r2, [r3, #40]	; 0x28
    2b04:	ldr	r3, [fp, #-16]
    2b08:	ldr	r4, [r3]
    2b0c:	ldr	r3, [fp, #-16]
    2b10:	ldr	r3, [r3]
    2b14:	ldr	r3, [r3, #44]	; 0x2c
    2b18:	mov	r0, r3
    2b1c:	bl	0 <coda_type_text_new>
    2b20:	mov	r3, r0
    2b24:	str	r3, [r4, #8]
    2b28:	ldr	r3, [fp, #-16]
    2b2c:	ldr	r3, [r3]
    2b30:	ldr	r3, [r3, #8]
    2b34:	cmp	r3, #0
    2b38:	bne	2b44 <cd_ascii_line_init+0x84>
    2b3c:	mvn	r3, #0
    2b40:	b	2bac <cd_ascii_line_init+0xec>
    2b44:	ldr	r3, [fp, #-16]
    2b48:	ldr	r3, [r3]
    2b4c:	ldr	r3, [r3, #8]
    2b50:	mov	r1, #3
    2b54:	mov	r0, r3
    2b58:	bl	0 <coda_type_text_set_special_text_type>
    2b5c:	mov	r3, r0
    2b60:	cmp	r3, #0
    2b64:	beq	2b70 <cd_ascii_line_init+0xb0>
    2b68:	mvn	r3, #0
    2b6c:	b	2bac <cd_ascii_line_init+0xec>
    2b70:	ldr	r1, [fp, #-20]	; 0xffffffec
    2b74:	ldr	r0, [fp, #-16]
    2b78:	bl	100c <handle_name_attribute_for_type>
    2b7c:	mov	r3, r0
    2b80:	cmp	r3, #0
    2b84:	beq	2b90 <cd_ascii_line_init+0xd0>
    2b88:	mvn	r3, #0
    2b8c:	b	2bac <cd_ascii_line_init+0xec>
    2b90:	ldr	r3, [fp, #-16]
    2b94:	ldr	r0, [r3]
    2b98:	ldr	r3, [pc, #28]	; 2bbc <cd_ascii_line_init+0xfc>
    2b9c:	ldr	r2, [pc, #28]	; 2bc0 <cd_ascii_line_init+0x100>
    2ba0:	mov	r1, #11
    2ba4:	bl	14ac <register_sub_element>
    2ba8:	mov	r3, #0
    2bac:	mov	r0, r3
    2bb0:	sub	sp, fp, #8
    2bb4:	pop	{r4, fp, pc}
	...

00002bc4 <cd_ascii_line_separator_init>:
    2bc4:	push	{r4, fp, lr}
    2bc8:	add	fp, sp, #8
    2bcc:	sub	sp, sp, #12
    2bd0:	str	r0, [fp, #-16]
    2bd4:	str	r1, [fp, #-20]	; 0xffffffec
    2bd8:	ldr	r1, [fp, #-20]	; 0xffffffec
    2bdc:	ldr	r0, [fp, #-16]
    2be0:	bl	1128 <handle_format_attribute_for_type>
    2be4:	mov	r3, r0
    2be8:	cmp	r3, #0
    2bec:	beq	2bf8 <cd_ascii_line_separator_init+0x34>
    2bf0:	mvn	r3, #0
    2bf4:	b	2cb0 <cd_ascii_line_separator_init+0xec>
    2bf8:	ldr	r3, [fp, #-16]
    2bfc:	ldr	r3, [r3]
    2c00:	ldr	r2, [pc, #180]	; 2cbc <cd_ascii_line_separator_init+0xf8>
    2c04:	str	r2, [r3, #40]	; 0x28
    2c08:	ldr	r3, [fp, #-16]
    2c0c:	ldr	r4, [r3]
    2c10:	ldr	r3, [fp, #-16]
    2c14:	ldr	r3, [r3]
    2c18:	ldr	r3, [r3, #44]	; 0x2c
    2c1c:	mov	r0, r3
    2c20:	bl	0 <coda_type_text_new>
    2c24:	mov	r3, r0
    2c28:	str	r3, [r4, #8]
    2c2c:	ldr	r3, [fp, #-16]
    2c30:	ldr	r3, [r3]
    2c34:	ldr	r3, [r3, #8]
    2c38:	cmp	r3, #0
    2c3c:	bne	2c48 <cd_ascii_line_separator_init+0x84>
    2c40:	mvn	r3, #0
    2c44:	b	2cb0 <cd_ascii_line_separator_init+0xec>
    2c48:	ldr	r3, [fp, #-16]
    2c4c:	ldr	r3, [r3]
    2c50:	ldr	r3, [r3, #8]
    2c54:	mov	r1, #1
    2c58:	mov	r0, r3
    2c5c:	bl	0 <coda_type_text_set_special_text_type>
    2c60:	mov	r3, r0
    2c64:	cmp	r3, #0
    2c68:	beq	2c74 <cd_ascii_line_separator_init+0xb0>
    2c6c:	mvn	r3, #0
    2c70:	b	2cb0 <cd_ascii_line_separator_init+0xec>
    2c74:	ldr	r1, [fp, #-20]	; 0xffffffec
    2c78:	ldr	r0, [fp, #-16]
    2c7c:	bl	100c <handle_name_attribute_for_type>
    2c80:	mov	r3, r0
    2c84:	cmp	r3, #0
    2c88:	beq	2c94 <cd_ascii_line_separator_init+0xd0>
    2c8c:	mvn	r3, #0
    2c90:	b	2cb0 <cd_ascii_line_separator_init+0xec>
    2c94:	ldr	r3, [fp, #-16]
    2c98:	ldr	r0, [r3]
    2c9c:	ldr	r3, [pc, #28]	; 2cc0 <cd_ascii_line_separator_init+0xfc>
    2ca0:	ldr	r2, [pc, #28]	; 2cc4 <cd_ascii_line_separator_init+0x100>
    2ca4:	mov	r1, #11
    2ca8:	bl	14ac <register_sub_element>
    2cac:	mov	r3, #0
    2cb0:	mov	r0, r3
    2cb4:	sub	sp, fp, #8
    2cb8:	pop	{r4, fp, pc}
	...

00002cc8 <cd_ascii_white_space_init>:
    2cc8:	push	{r4, fp, lr}
    2ccc:	add	fp, sp, #8
    2cd0:	sub	sp, sp, #12
    2cd4:	str	r0, [fp, #-16]
    2cd8:	str	r1, [fp, #-20]	; 0xffffffec
    2cdc:	ldr	r1, [fp, #-20]	; 0xffffffec
    2ce0:	ldr	r0, [fp, #-16]
    2ce4:	bl	1128 <handle_format_attribute_for_type>
    2ce8:	mov	r3, r0
    2cec:	cmp	r3, #0
    2cf0:	beq	2cfc <cd_ascii_white_space_init+0x34>
    2cf4:	mvn	r3, #0
    2cf8:	b	2db4 <cd_ascii_white_space_init+0xec>
    2cfc:	ldr	r3, [fp, #-16]
    2d00:	ldr	r3, [r3]
    2d04:	ldr	r2, [pc, #180]	; 2dc0 <cd_ascii_white_space_init+0xf8>
    2d08:	str	r2, [r3, #40]	; 0x28
    2d0c:	ldr	r3, [fp, #-16]
    2d10:	ldr	r4, [r3]
    2d14:	ldr	r3, [fp, #-16]
    2d18:	ldr	r3, [r3]
    2d1c:	ldr	r3, [r3, #44]	; 0x2c
    2d20:	mov	r0, r3
    2d24:	bl	0 <coda_type_text_new>
    2d28:	mov	r3, r0
    2d2c:	str	r3, [r4, #8]
    2d30:	ldr	r3, [fp, #-16]
    2d34:	ldr	r3, [r3]
    2d38:	ldr	r3, [r3, #8]
    2d3c:	cmp	r3, #0
    2d40:	bne	2d4c <cd_ascii_white_space_init+0x84>
    2d44:	mvn	r3, #0
    2d48:	b	2db4 <cd_ascii_white_space_init+0xec>
    2d4c:	ldr	r3, [fp, #-16]
    2d50:	ldr	r3, [r3]
    2d54:	ldr	r3, [r3, #8]
    2d58:	mov	r1, #4
    2d5c:	mov	r0, r3
    2d60:	bl	0 <coda_type_text_set_special_text_type>
    2d64:	mov	r3, r0
    2d68:	cmp	r3, #0
    2d6c:	beq	2d78 <cd_ascii_white_space_init+0xb0>
    2d70:	mvn	r3, #0
    2d74:	b	2db4 <cd_ascii_white_space_init+0xec>
    2d78:	ldr	r1, [fp, #-20]	; 0xffffffec
    2d7c:	ldr	r0, [fp, #-16]
    2d80:	bl	100c <handle_name_attribute_for_type>
    2d84:	mov	r3, r0
    2d88:	cmp	r3, #0
    2d8c:	beq	2d98 <cd_ascii_white_space_init+0xd0>
    2d90:	mvn	r3, #0
    2d94:	b	2db4 <cd_ascii_white_space_init+0xec>
    2d98:	ldr	r3, [fp, #-16]
    2d9c:	ldr	r0, [r3]
    2da0:	ldr	r3, [pc, #28]	; 2dc4 <cd_ascii_white_space_init+0xfc>
    2da4:	ldr	r2, [pc, #28]	; 2dc8 <cd_ascii_white_space_init+0x100>
    2da8:	mov	r1, #11
    2dac:	bl	14ac <register_sub_element>
    2db0:	mov	r3, #0
    2db4:	mov	r0, r3
    2db8:	sub	sp, fp, #8
    2dbc:	pop	{r4, fp, pc}
	...

00002dcc <cd_attribute_set_fixed_value>:
    2dcc:	push	{r4, fp, lr}
    2dd0:	add	fp, sp, #8
    2dd4:	sub	sp, sp, #20
    2dd8:	str	r0, [fp, #-24]	; 0xffffffe8
    2ddc:	mov	r3, #0
    2de0:	str	r3, [fp, #-16]
    2de4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2de8:	ldr	r3, [r3]
    2dec:	ldr	r3, [r3, #12]
    2df0:	mov	r0, r3
    2df4:	bl	828 <decode_escaped_string>
    2df8:	mov	r3, r0
    2dfc:	cmp	r3, #0
    2e00:	bge	2e18 <cd_attribute_set_fixed_value+0x4c>
    2e04:	ldr	r1, [pc, #352]	; 2f6c <cd_attribute_set_fixed_value+0x1a0>
    2e08:	ldr	r0, [pc, #352]	; 2f70 <cd_attribute_set_fixed_value+0x1a4>
    2e0c:	bl	0 <coda_set_error>
    2e10:	mvn	r3, #0
    2e14:	b	2f60 <cd_attribute_set_fixed_value+0x194>
    2e18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e1c:	ldr	r3, [r3]
    2e20:	ldr	r3, [r3, #396]	; 0x18c
    2e24:	ldr	r3, [r3, #8]
    2e28:	sub	r2, fp, #16
    2e2c:	mov	r1, r2
    2e30:	mov	r0, r3
    2e34:	bl	0 <coda_type_record_field_get_type>
    2e38:	mov	r3, r0
    2e3c:	cmp	r3, #0
    2e40:	beq	2e4c <cd_attribute_set_fixed_value+0x80>
    2e44:	mvn	r3, #0
    2e48:	b	2f60 <cd_attribute_set_fixed_value+0x194>
    2e4c:	ldr	r3, [fp, #-16]
    2e50:	cmp	r3, #0
    2e54:	beq	2e6c <cd_attribute_set_fixed_value+0xa0>
    2e58:	ldr	r1, [pc, #276]	; 2f74 <cd_attribute_set_fixed_value+0x1a8>
    2e5c:	ldr	r0, [pc, #268]	; 2f70 <cd_attribute_set_fixed_value+0x1a4>
    2e60:	bl	0 <coda_set_error>
    2e64:	mvn	r3, #0
    2e68:	b	2f60 <cd_attribute_set_fixed_value+0x194>
    2e6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e70:	ldr	r3, [r3]
    2e74:	ldr	r3, [r3, #396]	; 0x18c
    2e78:	ldr	r3, [r3, #44]	; 0x2c
    2e7c:	mov	r0, r3
    2e80:	bl	0 <coda_type_text_new>
    2e84:	mov	r3, r0
    2e88:	str	r3, [fp, #-16]
    2e8c:	ldr	r3, [fp, #-16]
    2e90:	cmp	r3, #0
    2e94:	bne	2ea0 <cd_attribute_set_fixed_value+0xd4>
    2e98:	mvn	r3, #0
    2e9c:	b	2f60 <cd_attribute_set_fixed_value+0x194>
    2ea0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2ea4:	ldr	r3, [r3]
    2ea8:	ldr	r3, [r3, #396]	; 0x18c
    2eac:	ldr	r3, [r3, #8]
    2eb0:	ldr	r2, [fp, #-16]
    2eb4:	mov	r1, r2
    2eb8:	mov	r0, r3
    2ebc:	bl	0 <coda_type_record_field_set_type>
    2ec0:	mov	r3, r0
    2ec4:	cmp	r3, #0
    2ec8:	beq	2ee0 <cd_attribute_set_fixed_value+0x114>
    2ecc:	ldr	r3, [fp, #-16]
    2ed0:	mov	r0, r3
    2ed4:	bl	0 <coda_type_release>
    2ed8:	mvn	r3, #0
    2edc:	b	2f60 <cd_attribute_set_fixed_value+0x194>
    2ee0:	ldr	r3, [fp, #-16]
    2ee4:	mov	r0, r3
    2ee8:	bl	0 <coda_type_release>
    2eec:	ldr	r2, [fp, #-16]
    2ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2ef4:	ldr	r3, [r3]
    2ef8:	ldr	r3, [r3, #12]
    2efc:	mov	r1, r3
    2f00:	mov	r0, r2
    2f04:	bl	0 <coda_type_text_set_fixed_value>
    2f08:	mov	r3, r0
    2f0c:	cmp	r3, #0
    2f10:	beq	2f1c <cd_attribute_set_fixed_value+0x150>
    2f14:	mvn	r3, #0
    2f18:	b	2f60 <cd_attribute_set_fixed_value+0x194>
    2f1c:	ldr	r4, [fp, #-16]
    2f20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f24:	ldr	r3, [r3]
    2f28:	ldr	r3, [r3, #12]
    2f2c:	mov	r0, r3
    2f30:	bl	0 <strlen>
    2f34:	mov	r3, r0
    2f38:	mov	r2, r3
    2f3c:	mov	r3, #0
    2f40:	mov	r0, r4
    2f44:	bl	0 <coda_type_set_byte_size>
    2f48:	mov	r3, r0
    2f4c:	cmp	r3, #0
    2f50:	beq	2f5c <cd_attribute_set_fixed_value+0x190>
    2f54:	mvn	r3, #0
    2f58:	b	2f60 <cd_attribute_set_fixed_value+0x194>
    2f5c:	mov	r3, #0
    2f60:	mov	r0, r3
    2f64:	sub	sp, fp, #8
    2f68:	pop	{r4, fp, pc}
    2f6c:	.word	0x00000d44
    2f70:	.word	0xfffffe70
    2f74:	.word	0x00000d68

00002f78 <cd_attribute_finalise>:
    2f78:	push	{fp, lr}
    2f7c:	add	fp, sp, #4
    2f80:	sub	sp, sp, #16
    2f84:	str	r0, [fp, #-16]
    2f88:	mov	r3, #0
    2f8c:	str	r3, [fp, #-8]
    2f90:	ldr	r3, [fp, #-16]
    2f94:	ldr	r3, [r3]
    2f98:	ldr	r3, [r3, #8]
    2f9c:	sub	r2, fp, #8
    2fa0:	mov	r1, r2
    2fa4:	mov	r0, r3
    2fa8:	bl	0 <coda_type_record_field_get_type>
    2fac:	mov	r3, r0
    2fb0:	cmp	r3, #0
    2fb4:	beq	2fc0 <cd_attribute_finalise+0x48>
    2fb8:	mvn	r3, #0
    2fbc:	b	305c <cd_attribute_finalise+0xe4>
    2fc0:	ldr	r3, [fp, #-8]
    2fc4:	cmp	r3, #0
    2fc8:	bne	3044 <cd_attribute_finalise+0xcc>
    2fcc:	ldr	r3, [fp, #-16]
    2fd0:	ldr	r3, [r3]
    2fd4:	ldr	r3, [r3, #44]	; 0x2c
    2fd8:	mov	r0, r3
    2fdc:	bl	0 <coda_type_text_new>
    2fe0:	mov	r3, r0
    2fe4:	str	r3, [fp, #-8]
    2fe8:	ldr	r3, [fp, #-8]
    2fec:	cmp	r3, #0
    2ff0:	bne	2ffc <cd_attribute_finalise+0x84>
    2ff4:	mvn	r3, #0
    2ff8:	b	305c <cd_attribute_finalise+0xe4>
    2ffc:	ldr	r3, [fp, #-16]
    3000:	ldr	r3, [r3]
    3004:	ldr	r3, [r3, #8]
    3008:	ldr	r2, [fp, #-8]
    300c:	mov	r1, r2
    3010:	mov	r0, r3
    3014:	bl	0 <coda_type_record_field_set_type>
    3018:	mov	r3, r0
    301c:	cmp	r3, #0
    3020:	beq	3038 <cd_attribute_finalise+0xc0>
    3024:	ldr	r3, [fp, #-8]
    3028:	mov	r0, r3
    302c:	bl	0 <coda_type_release>
    3030:	mvn	r3, #0
    3034:	b	305c <cd_attribute_finalise+0xe4>
    3038:	ldr	r3, [fp, #-8]
    303c:	mov	r0, r3
    3040:	bl	0 <coda_type_release>
    3044:	ldr	r3, [fp, #-16]
    3048:	ldr	r3, [r3]
    304c:	ldr	r3, [r3, #8]
    3050:	mov	r0, r3
    3054:	bl	0 <coda_type_record_field_validate>
    3058:	mov	r3, r0
    305c:	mov	r0, r3
    3060:	sub	sp, fp, #4
    3064:	pop	{fp, pc}

00003068 <cd_attribute_init>:
    3068:	push	{r4, fp, lr}
    306c:	add	fp, sp, #8
    3070:	sub	sp, sp, #28
    3074:	str	r0, [fp, #-32]	; 0xffffffe0
    3078:	str	r1, [fp, #-36]	; 0xffffffdc
    307c:	mov	r3, #0
    3080:	str	r3, [fp, #-20]	; 0xffffffec
    3084:	mov	r3, #0
    3088:	str	r3, [fp, #-24]	; 0xffffffe8
    308c:	mov	r3, #0
    3090:	str	r3, [fp, #-16]
    3094:	ldr	r1, [pc, #636]	; 3318 <cd_attribute_init+0x2b0>
    3098:	ldr	r0, [fp, #-36]	; 0xffffffdc
    309c:	bl	f34 <get_attribute_value>
    30a0:	str	r0, [fp, #-20]	; 0xffffffec
    30a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    30a8:	cmp	r3, #0
    30ac:	beq	30c4 <cd_attribute_init+0x5c>
    30b0:	ldr	r1, [pc, #612]	; 331c <cd_attribute_init+0x2b4>
    30b4:	ldr	r0, [pc, #612]	; 3320 <cd_attribute_init+0x2b8>
    30b8:	bl	0 <coda_set_error>
    30bc:	mvn	r3, #0
    30c0:	b	330c <cd_attribute_init+0x2a4>
    30c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    30c8:	ldr	r3, [r3]
    30cc:	ldr	r3, [r3, #396]	; 0x18c
    30d0:	ldr	r3, [r3, #48]	; 0x30
    30d4:	cmp	r3, #0
    30d8:	bne	30f0 <cd_attribute_init+0x88>
    30dc:	ldr	r3, [pc, #576]	; 3324 <cd_attribute_init+0x2bc>
    30e0:	ldr	r2, [pc, #576]	; 3328 <cd_attribute_init+0x2c0>
    30e4:	ldr	r1, [pc, #576]	; 332c <cd_attribute_init+0x2c4>
    30e8:	ldr	r0, [pc, #576]	; 3330 <cd_attribute_init+0x2c8>
    30ec:	bl	0 <__assert_fail>
    30f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    30f4:	ldr	r3, [r3]
    30f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    30fc:	ldr	r2, [r2]
    3100:	ldr	r2, [r2, #396]	; 0x18c
    3104:	ldr	r2, [r2, #44]	; 0x2c
    3108:	str	r2, [r3, #44]	; 0x2c
    310c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3110:	ldr	r3, [r3]
    3114:	mov	r2, #1
    3118:	str	r2, [r3, #48]	; 0x30
    311c:	ldr	r1, [pc, #528]	; 3334 <cd_attribute_init+0x2cc>
    3120:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3124:	bl	f34 <get_attribute_value>
    3128:	mov	r3, r0
    312c:	cmp	r3, #0
    3130:	beq	3148 <cd_attribute_init+0xe0>
    3134:	ldr	r1, [pc, #508]	; 3338 <cd_attribute_init+0x2d0>
    3138:	ldr	r0, [pc, #480]	; 3320 <cd_attribute_init+0x2b8>
    313c:	bl	0 <coda_set_error>
    3140:	mvn	r3, #0
    3144:	b	330c <cd_attribute_init+0x2a4>
    3148:	ldr	r3, [fp, #-32]	; 0xffffffe0
    314c:	ldr	r3, [r3]
    3150:	ldr	r3, [r3]
    3154:	mov	r2, r3
    3158:	ldr	r1, [pc, #476]	; 333c <cd_attribute_init+0x2d4>
    315c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3160:	bl	fa4 <get_mandatory_attribute_value>
    3164:	str	r0, [fp, #-24]	; 0xffffffe8
    3168:	ldr	r3, [fp, #-24]	; 0xffffffe8
    316c:	cmp	r3, #0
    3170:	bne	317c <cd_attribute_init+0x114>
    3174:	mvn	r3, #0
    3178:	b	330c <cd_attribute_init+0x2a4>
    317c:	ldr	r1, [pc, #444]	; 3340 <cd_attribute_init+0x2d8>
    3180:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3184:	bl	f34 <get_attribute_value>
    3188:	str	r0, [fp, #-16]
    318c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3190:	ldr	r3, [r3]
    3194:	ldr	r2, [pc, #424]	; 3344 <cd_attribute_init+0x2dc>
    3198:	str	r2, [r3, #40]	; 0x28
    319c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    31a0:	ldr	r3, [r3]
    31a4:	ldr	r3, [r3, #44]	; 0x2c
    31a8:	cmp	r3, #2
    31ac:	bne	3218 <cd_attribute_init+0x1b0>
    31b0:	ldr	r3, [fp, #-16]
    31b4:	cmp	r3, #0
    31b8:	bne	3218 <cd_attribute_init+0x1b0>
    31bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    31c0:	str	r3, [fp, #-16]
    31c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    31c8:	bl	0 <coda_element_name_from_xml_name>
    31cc:	mov	r3, r0
    31d0:	mov	r1, #0
    31d4:	mov	r0, r3
    31d8:	bl	0 <coda_identifier_from_name>
    31dc:	str	r0, [fp, #-28]	; 0xffffffe4
    31e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    31e4:	cmp	r3, #0
    31e8:	bne	31f4 <cd_attribute_init+0x18c>
    31ec:	mvn	r3, #0
    31f0:	b	330c <cd_attribute_init+0x2a4>
    31f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    31f8:	ldr	r4, [r3]
    31fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3200:	bl	0 <coda_type_record_field_new>
    3204:	mov	r3, r0
    3208:	str	r3, [r4, #8]
    320c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3210:	bl	0 <free>
    3214:	b	3230 <cd_attribute_init+0x1c8>
    3218:	ldr	r3, [fp, #-32]	; 0xffffffe0
    321c:	ldr	r4, [r3]
    3220:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3224:	bl	0 <coda_type_record_field_new>
    3228:	mov	r3, r0
    322c:	str	r3, [r4, #8]
    3230:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3234:	ldr	r3, [r3]
    3238:	ldr	r3, [r3, #8]
    323c:	cmp	r3, #0
    3240:	bne	324c <cd_attribute_init+0x1e4>
    3244:	mvn	r3, #0
    3248:	b	330c <cd_attribute_init+0x2a4>
    324c:	ldr	r3, [fp, #-16]
    3250:	cmp	r3, #0
    3254:	beq	3284 <cd_attribute_init+0x21c>
    3258:	ldr	r3, [fp, #-32]	; 0xffffffe0
    325c:	ldr	r3, [r3]
    3260:	ldr	r3, [r3, #8]
    3264:	ldr	r1, [fp, #-16]
    3268:	mov	r0, r3
    326c:	bl	0 <coda_type_record_field_set_real_name>
    3270:	mov	r3, r0
    3274:	cmp	r3, #0
    3278:	beq	3284 <cd_attribute_init+0x21c>
    327c:	mvn	r3, #0
    3280:	b	330c <cd_attribute_init+0x2a4>
    3284:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3288:	ldr	r3, [r3]
    328c:	ldr	r1, [pc, #180]	; 3348 <cd_attribute_init+0x2e0>
    3290:	mov	r0, r3
    3294:	bl	1534 <register_type_elements>
    3298:	ldr	r3, [fp, #-32]	; 0xffffffe0
    329c:	ldr	r0, [r3]
    32a0:	ldr	r3, [pc, #164]	; 334c <cd_attribute_init+0x2e4>
    32a4:	ldr	r2, [pc, #164]	; 3350 <cd_attribute_init+0x2e8>
    32a8:	mov	r1, #18
    32ac:	bl	14ac <register_sub_element>
    32b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    32b4:	ldr	r0, [r3]
    32b8:	ldr	r3, [pc, #148]	; 3354 <cd_attribute_init+0x2ec>
    32bc:	ldr	r2, [pc, #140]	; 3350 <cd_attribute_init+0x2e8>
    32c0:	mov	r1, #29
    32c4:	bl	14ac <register_sub_element>
    32c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    32cc:	ldr	r0, [r3]
    32d0:	ldr	r3, [pc, #128]	; 3358 <cd_attribute_init+0x2f0>
    32d4:	ldr	r2, [pc, #128]	; 335c <cd_attribute_init+0x2f4>
    32d8:	mov	r1, #5
    32dc:	bl	14ac <register_sub_element>
    32e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    32e4:	ldr	r0, [r3]
    32e8:	ldr	r3, [pc, #112]	; 3360 <cd_attribute_init+0x2f8>
    32ec:	ldr	r2, [pc, #112]	; 3364 <cd_attribute_init+0x2fc>
    32f0:	mov	r1, #16
    32f4:	bl	14ac <register_sub_element>
    32f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    32fc:	ldr	r3, [r3]
    3300:	ldr	r2, [pc, #96]	; 3368 <cd_attribute_init+0x300>
    3304:	str	r2, [r3, #36]	; 0x24
    3308:	mov	r3, #0
    330c:	mov	r0, r3
    3310:	sub	sp, fp, #8
    3314:	pop	{r4, fp, pc}
    3318:	.word	0x00000b38
    331c:	.word	0x00000d98
    3320:	.word	0xfffffe70
    3324:	.word	0x00002258
    3328:	.word	0x0000059f
    332c:	.word	0x000009bc
    3330:	.word	0x00000dc8
    3334:	.word	0x00000b58
    3338:	.word	0x00000de8
    333c:	.word	0x00000aa8
    3340:	.word	0x00000e18
	...

0000336c <cd_complex_set_type>:
    336c:	push	{fp, lr}
    3370:	add	fp, sp, #4
    3374:	sub	sp, sp, #8
    3378:	str	r0, [fp, #-8]
    337c:	ldr	r3, [fp, #-8]
    3380:	ldr	r3, [r3]
    3384:	ldr	r3, [r3, #396]	; 0x18c
    3388:	ldr	r2, [r3, #8]
    338c:	ldr	r3, [fp, #-8]
    3390:	ldr	r3, [r3]
    3394:	ldr	r3, [r3, #8]
    3398:	mov	r1, r3
    339c:	mov	r0, r2
    33a0:	bl	0 <coda_type_complex_set_type>
    33a4:	mov	r3, r0
    33a8:	mov	r0, r3
    33ac:	sub	sp, fp, #4
    33b0:	pop	{fp, pc}

000033b4 <cd_complex_finalise>:
    33b4:	push	{fp, lr}
    33b8:	add	fp, sp, #4
    33bc:	sub	sp, sp, #8
    33c0:	str	r0, [fp, #-8]
    33c4:	ldr	r3, [fp, #-8]
    33c8:	ldr	r3, [r3]
    33cc:	ldr	r3, [r3, #8]
    33d0:	mov	r0, r3
    33d4:	bl	0 <coda_type_complex_validate>
    33d8:	mov	r3, r0
    33dc:	mov	r0, r3
    33e0:	sub	sp, fp, #4
    33e4:	pop	{fp, pc}

000033e8 <cd_complex_init>:
    33e8:	push	{r4, fp, lr}
    33ec:	add	fp, sp, #8
    33f0:	sub	sp, sp, #12
    33f4:	str	r0, [fp, #-16]
    33f8:	str	r1, [fp, #-20]	; 0xffffffec
    33fc:	ldr	r1, [fp, #-20]	; 0xffffffec
    3400:	ldr	r0, [fp, #-16]
    3404:	bl	1128 <handle_format_attribute_for_type>
    3408:	mov	r3, r0
    340c:	cmp	r3, #0
    3410:	beq	341c <cd_complex_init+0x34>
    3414:	mvn	r3, #0
    3418:	b	34e8 <cd_complex_init+0x100>
    341c:	ldr	r3, [fp, #-16]
    3420:	ldr	r3, [r3]
    3424:	ldr	r2, [pc, #200]	; 34f4 <cd_complex_init+0x10c>
    3428:	str	r2, [r3, #40]	; 0x28
    342c:	ldr	r3, [fp, #-16]
    3430:	ldr	r4, [r3]
    3434:	ldr	r3, [fp, #-16]
    3438:	ldr	r3, [r3]
    343c:	ldr	r3, [r3, #44]	; 0x2c
    3440:	mov	r0, r3
    3444:	bl	0 <coda_type_complex_new>
    3448:	mov	r3, r0
    344c:	str	r3, [r4, #8]
    3450:	ldr	r3, [fp, #-16]
    3454:	ldr	r3, [r3]
    3458:	ldr	r3, [r3, #8]
    345c:	cmp	r3, #0
    3460:	bne	346c <cd_complex_init+0x84>
    3464:	mvn	r3, #0
    3468:	b	34e8 <cd_complex_init+0x100>
    346c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3470:	ldr	r0, [fp, #-16]
    3474:	bl	100c <handle_name_attribute_for_type>
    3478:	mov	r3, r0
    347c:	cmp	r3, #0
    3480:	beq	348c <cd_complex_init+0xa4>
    3484:	mvn	r3, #0
    3488:	b	34e8 <cd_complex_init+0x100>
    348c:	ldr	r3, [fp, #-16]
    3490:	ldr	r0, [r3]
    3494:	ldr	r3, [pc, #92]	; 34f8 <cd_complex_init+0x110>
    3498:	ldr	r2, [pc, #92]	; 34fc <cd_complex_init+0x114>
    349c:	mov	r1, #11
    34a0:	bl	14ac <register_sub_element>
    34a4:	ldr	r3, [fp, #-16]
    34a8:	ldr	r0, [r3]
    34ac:	ldr	r3, [pc, #76]	; 3500 <cd_complex_init+0x118>
    34b0:	ldr	r2, [pc, #76]	; 3504 <cd_complex_init+0x11c>
    34b4:	mov	r1, #17
    34b8:	bl	14ac <register_sub_element>
    34bc:	ldr	r3, [fp, #-16]
    34c0:	ldr	r0, [r3]
    34c4:	ldr	r3, [pc, #52]	; 3500 <cd_complex_init+0x118>
    34c8:	ldr	r2, [pc, #56]	; 3508 <cd_complex_init+0x120>
    34cc:	mov	r1, #20
    34d0:	bl	14ac <register_sub_element>
    34d4:	ldr	r3, [fp, #-16]
    34d8:	ldr	r3, [r3]
    34dc:	ldr	r2, [pc, #40]	; 350c <cd_complex_init+0x124>
    34e0:	str	r2, [r3, #36]	; 0x24
    34e4:	mov	r3, #0
    34e8:	mov	r0, r3
    34ec:	sub	sp, fp, #8
    34f0:	pop	{r4, fp, pc}
	...

00003510 <cd_conversion_set_unit>:
    3510:	push	{fp, lr}
    3514:	add	fp, sp, #4
    3518:	sub	sp, sp, #8
    351c:	str	r0, [fp, #-8]
    3520:	ldr	r3, [fp, #-8]
    3524:	ldr	r3, [r3]
    3528:	ldr	r3, [r3, #12]
    352c:	cmp	r3, #0
    3530:	bne	3558 <cd_conversion_set_unit+0x48>
    3534:	ldr	r3, [fp, #-8]
    3538:	ldr	r3, [r3]
    353c:	ldr	r3, [r3, #396]	; 0x18c
    3540:	ldr	r3, [r3, #8]
    3544:	ldr	r1, [pc, #68]	; 3590 <cd_conversion_set_unit+0x80>
    3548:	mov	r0, r3
    354c:	bl	0 <coda_conversion_set_unit>
    3550:	mov	r3, r0
    3554:	b	3584 <cd_conversion_set_unit+0x74>
    3558:	ldr	r3, [fp, #-8]
    355c:	ldr	r3, [r3]
    3560:	ldr	r3, [r3, #396]	; 0x18c
    3564:	ldr	r2, [r3, #8]
    3568:	ldr	r3, [fp, #-8]
    356c:	ldr	r3, [r3]
    3570:	ldr	r3, [r3, #12]
    3574:	mov	r1, r3
    3578:	mov	r0, r2
    357c:	bl	0 <coda_conversion_set_unit>
    3580:	mov	r3, r0
    3584:	mov	r0, r3
    3588:	sub	sp, fp, #4
    358c:	pop	{fp, pc}
    3590:	.word	0x00000c50

00003594 <cd_conversion_init>:
    3594:	push	{r4, fp, lr}
    3598:	add	fp, sp, #8
    359c:	sub	sp, sp, #60	; 0x3c
    35a0:	str	r0, [fp, #-64]	; 0xffffffc0
    35a4:	str	r1, [fp, #-68]	; 0xffffffbc
    35a8:	mov	r2, #0
    35ac:	mov	r3, #0
    35b0:	strd	r2, [fp, #-52]	; 0xffffffcc
    35b4:	bl	0 <coda_NaN>
    35b8:	vmov.f64	d7, d0
    35bc:	vstr	d7, [fp, #-60]	; 0xffffffc4
    35c0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    35c4:	ldr	r3, [r3]
    35c8:	ldr	r3, [r3]
    35cc:	mov	r2, r3
    35d0:	ldr	r1, [pc, #516]	; 37dc <cd_conversion_init+0x248>
    35d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
    35d8:	bl	fa4 <get_mandatory_attribute_value>
    35dc:	str	r0, [fp, #-16]
    35e0:	ldr	r3, [fp, #-16]
    35e4:	cmp	r3, #0
    35e8:	bne	35f4 <cd_conversion_init+0x60>
    35ec:	mvn	r3, #0
    35f0:	b	37d0 <cd_conversion_init+0x23c>
    35f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    35f8:	ldr	r3, [r3]
    35fc:	ldr	r3, [r3]
    3600:	mov	r2, r3
    3604:	ldr	r1, [pc, #468]	; 37e0 <cd_conversion_init+0x24c>
    3608:	ldr	r0, [fp, #-68]	; 0xffffffbc
    360c:	bl	fa4 <get_mandatory_attribute_value>
    3610:	str	r0, [fp, #-20]	; 0xffffffec
    3614:	ldr	r3, [fp, #-20]	; 0xffffffec
    3618:	cmp	r3, #0
    361c:	bne	3628 <cd_conversion_init+0x94>
    3620:	mvn	r3, #0
    3624:	b	37d0 <cd_conversion_init+0x23c>
    3628:	ldr	r0, [fp, #-16]
    362c:	bl	0 <strlen>
    3630:	mov	r3, r0
    3634:	mov	r1, r3
    3638:	sub	r2, fp, #36	; 0x24
    363c:	mov	r3, #1
    3640:	ldr	r0, [fp, #-16]
    3644:	bl	0 <coda_ascii_parse_double>
    3648:	mov	r3, r0
    364c:	cmp	r3, #0
    3650:	bge	366c <cd_conversion_init+0xd8>
    3654:	ldr	r2, [fp, #-16]
    3658:	ldr	r1, [pc, #388]	; 37e4 <cd_conversion_init+0x250>
    365c:	ldr	r0, [pc, #388]	; 37e8 <cd_conversion_init+0x254>
    3660:	bl	0 <coda_set_error>
    3664:	mvn	r3, #0
    3668:	b	37d0 <cd_conversion_init+0x23c>
    366c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3670:	bl	0 <strlen>
    3674:	mov	r3, r0
    3678:	mov	r1, r3
    367c:	sub	r2, fp, #44	; 0x2c
    3680:	mov	r3, #1
    3684:	ldr	r0, [fp, #-20]	; 0xffffffec
    3688:	bl	0 <coda_ascii_parse_double>
    368c:	mov	r3, r0
    3690:	cmp	r3, #0
    3694:	bge	36b0 <cd_conversion_init+0x11c>
    3698:	ldr	r2, [fp, #-20]	; 0xffffffec
    369c:	ldr	r1, [pc, #328]	; 37ec <cd_conversion_init+0x258>
    36a0:	ldr	r0, [pc, #320]	; 37e8 <cd_conversion_init+0x254>
    36a4:	bl	0 <coda_set_error>
    36a8:	mvn	r3, #0
    36ac:	b	37d0 <cd_conversion_init+0x23c>
    36b0:	ldr	r1, [pc, #312]	; 37f0 <cd_conversion_init+0x25c>
    36b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
    36b8:	bl	f34 <get_attribute_value>
    36bc:	str	r0, [fp, #-24]	; 0xffffffe8
    36c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    36c4:	cmp	r3, #0
    36c8:	beq	3710 <cd_conversion_init+0x17c>
    36cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    36d0:	bl	0 <strlen>
    36d4:	mov	r3, r0
    36d8:	mov	r1, r3
    36dc:	sub	r2, fp, #52	; 0x34
    36e0:	mov	r3, #1
    36e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    36e8:	bl	0 <coda_ascii_parse_double>
    36ec:	mov	r3, r0
    36f0:	cmp	r3, #0
    36f4:	bge	3710 <cd_conversion_init+0x17c>
    36f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    36fc:	ldr	r1, [pc, #240]	; 37f4 <cd_conversion_init+0x260>
    3700:	ldr	r0, [pc, #224]	; 37e8 <cd_conversion_init+0x254>
    3704:	bl	0 <coda_set_error>
    3708:	mvn	r3, #0
    370c:	b	37d0 <cd_conversion_init+0x23c>
    3710:	ldr	r1, [pc, #224]	; 37f8 <cd_conversion_init+0x264>
    3714:	ldr	r0, [fp, #-68]	; 0xffffffbc
    3718:	bl	f34 <get_attribute_value>
    371c:	str	r0, [fp, #-28]	; 0xffffffe4
    3720:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3724:	cmp	r3, #0
    3728:	beq	3770 <cd_conversion_init+0x1dc>
    372c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3730:	bl	0 <strlen>
    3734:	mov	r3, r0
    3738:	mov	r1, r3
    373c:	sub	r2, fp, #60	; 0x3c
    3740:	mov	r3, #1
    3744:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3748:	bl	0 <coda_ascii_parse_double>
    374c:	mov	r3, r0
    3750:	cmp	r3, #0
    3754:	bge	3770 <cd_conversion_init+0x1dc>
    3758:	ldr	r2, [fp, #-28]	; 0xffffffe4
    375c:	ldr	r1, [pc, #152]	; 37fc <cd_conversion_init+0x268>
    3760:	ldr	r0, [pc, #128]	; 37e8 <cd_conversion_init+0x254>
    3764:	bl	0 <coda_set_error>
    3768:	mvn	r3, #0
    376c:	b	37d0 <cd_conversion_init+0x23c>
    3770:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3774:	ldr	r3, [r3]
    3778:	ldr	r2, [pc, #128]	; 3800 <cd_conversion_init+0x26c>
    377c:	str	r2, [r3, #40]	; 0x28
    3780:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3784:	ldr	r4, [r3]
    3788:	vldr	d7, [fp, #-36]	; 0xffffffdc
    378c:	vldr	d6, [fp, #-44]	; 0xffffffd4
    3790:	vldr	d5, [fp, #-52]	; 0xffffffcc
    3794:	vldr	d4, [fp, #-60]	; 0xffffffc4
    3798:	vmov.f64	d3, d4
    379c:	vmov.f64	d2, d5
    37a0:	vmov.f64	d1, d6
    37a4:	vmov.f64	d0, d7
    37a8:	bl	0 <coda_conversion_new>
    37ac:	mov	r3, r0
    37b0:	str	r3, [r4, #8]
    37b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    37b8:	ldr	r0, [r3]
    37bc:	ldr	r3, [pc, #64]	; 3804 <cd_conversion_init+0x270>
    37c0:	ldr	r2, [pc, #64]	; 3808 <cd_conversion_init+0x274>
    37c4:	mov	r1, #41	; 0x29
    37c8:	bl	14ac <register_sub_element>
    37cc:	mov	r3, #0
    37d0:	mov	r0, r3
    37d4:	sub	sp, fp, #8
    37d8:	pop	{r4, fp, pc}
    37dc:	.word	0x00000e24
    37e0:	.word	0x00000e30
    37e4:	.word	0x00000e3c
    37e8:	.word	0xfffffe70
    37ec:	.word	0x00000e6c
    37f0:	.word	0x00000e9c
    37f4:	.word	0x00000ea4
    37f8:	.word	0x00000ed0
    37fc:	.word	0x00000ed8
	...

0000380c <cd_detection_rule_add_entry>:
    380c:	push	{fp, lr}
    3810:	add	fp, sp, #4
    3814:	sub	sp, sp, #8
    3818:	str	r0, [fp, #-8]
    381c:	ldr	r3, [fp, #-8]
    3820:	ldr	r3, [r3]
    3824:	ldr	r3, [r3, #8]
    3828:	cmp	r3, #0
    382c:	beq	387c <cd_detection_rule_add_entry+0x70>
    3830:	ldr	r3, [fp, #-8]
    3834:	ldr	r3, [r3]
    3838:	ldr	r3, [r3, #396]	; 0x18c
    383c:	ldr	r2, [r3, #8]
    3840:	ldr	r3, [fp, #-8]
    3844:	ldr	r3, [r3]
    3848:	ldr	r3, [r3, #8]
    384c:	mov	r1, r3
    3850:	mov	r0, r2
    3854:	bl	0 <coda_detection_rule_add_entry>
    3858:	mov	r3, r0
    385c:	cmp	r3, #0
    3860:	beq	386c <cd_detection_rule_add_entry+0x60>
    3864:	mvn	r3, #0
    3868:	b	3880 <cd_detection_rule_add_entry+0x74>
    386c:	ldr	r3, [fp, #-8]
    3870:	ldr	r3, [r3]
    3874:	mov	r2, #0
    3878:	str	r2, [r3, #8]
    387c:	mov	r3, #0
    3880:	mov	r0, r3
    3884:	sub	sp, fp, #4
    3888:	pop	{fp, pc}

0000388c <cd_detection_rule_init>:
    388c:	push	{r4, fp, lr}
    3890:	add	fp, sp, #8
    3894:	sub	sp, sp, #12
    3898:	str	r0, [fp, #-16]
    389c:	str	r1, [fp, #-20]	; 0xffffffec
    38a0:	ldr	r3, [fp, #-16]
    38a4:	ldr	r3, [r3]
    38a8:	ldr	r2, [pc, #160]	; 3950 <cd_detection_rule_init+0xc4>
    38ac:	str	r2, [r3, #40]	; 0x28
    38b0:	ldr	r3, [fp, #-16]
    38b4:	ldr	r4, [r3]
    38b8:	bl	0 <coda_detection_rule_new>
    38bc:	mov	r3, r0
    38c0:	str	r3, [r4, #8]
    38c4:	ldr	r3, [fp, #-16]
    38c8:	ldr	r3, [r3]
    38cc:	ldr	r3, [r3, #8]
    38d0:	cmp	r3, #0
    38d4:	bne	38e0 <cd_detection_rule_init+0x54>
    38d8:	mvn	r3, #0
    38dc:	b	3944 <cd_detection_rule_init+0xb8>
    38e0:	ldr	r3, [fp, #-16]
    38e4:	ldr	r0, [r3]
    38e8:	ldr	r3, [pc, #100]	; 3954 <cd_detection_rule_init+0xc8>
    38ec:	ldr	r2, [pc, #100]	; 3958 <cd_detection_rule_init+0xcc>
    38f0:	mov	r1, #23
    38f4:	bl	14ac <register_sub_element>
    38f8:	ldr	r3, [fp, #-16]
    38fc:	ldr	r0, [r3]
    3900:	ldr	r3, [pc, #76]	; 3954 <cd_detection_rule_init+0xc8>
    3904:	ldr	r2, [pc, #80]	; 395c <cd_detection_rule_init+0xd0>
    3908:	mov	r1, #24
    390c:	bl	14ac <register_sub_element>
    3910:	ldr	r3, [fp, #-16]
    3914:	ldr	r0, [r3]
    3918:	ldr	r3, [pc, #52]	; 3954 <cd_detection_rule_init+0xc8>
    391c:	ldr	r2, [pc, #60]	; 3960 <cd_detection_rule_init+0xd4>
    3920:	mov	r1, #25
    3924:	bl	14ac <register_sub_element>
    3928:	ldr	r3, [fp, #-16]
    392c:	ldr	r0, [r3]
    3930:	ldr	r3, [pc, #28]	; 3954 <cd_detection_rule_init+0xc8>
    3934:	ldr	r2, [pc, #40]	; 3964 <cd_detection_rule_init+0xd8>
    3938:	mov	r1, #26
    393c:	bl	14ac <register_sub_element>
    3940:	mov	r3, #0
    3944:	mov	r0, r3
    3948:	sub	sp, fp, #8
    394c:	pop	{r4, fp, pc}
	...

00003968 <cd_field_set_type>:
    3968:	push	{fp, lr}
    396c:	add	fp, sp, #4
    3970:	sub	sp, sp, #8
    3974:	str	r0, [fp, #-8]
    3978:	ldr	r3, [fp, #-8]
    397c:	ldr	r3, [r3]
    3980:	ldr	r3, [r3, #396]	; 0x18c
    3984:	ldr	r2, [r3, #8]
    3988:	ldr	r3, [fp, #-8]
    398c:	ldr	r3, [r3]
    3990:	ldr	r3, [r3, #8]
    3994:	mov	r1, r3
    3998:	mov	r0, r2
    399c:	bl	0 <coda_type_record_field_set_type>
    39a0:	mov	r3, r0
    39a4:	mov	r0, r3
    39a8:	sub	sp, fp, #4
    39ac:	pop	{fp, pc}

000039b0 <cd_field_set_hidden>:
    39b0:	push	{fp, lr}
    39b4:	add	fp, sp, #4
    39b8:	sub	sp, sp, #8
    39bc:	str	r0, [fp, #-8]
    39c0:	ldr	r3, [fp, #-8]
    39c4:	ldr	r3, [r3]
    39c8:	ldr	r3, [r3, #396]	; 0x18c
    39cc:	ldr	r3, [r3, #8]
    39d0:	mov	r0, r3
    39d4:	bl	0 <coda_type_record_field_set_hidden>
    39d8:	mov	r3, r0
    39dc:	mov	r0, r3
    39e0:	sub	sp, fp, #4
    39e4:	pop	{fp, pc}

000039e8 <cd_field_set_optional>:
    39e8:	push	{fp, lr}
    39ec:	add	fp, sp, #4
    39f0:	sub	sp, sp, #8
    39f4:	str	r0, [fp, #-8]
    39f8:	ldr	r3, [fp, #-8]
    39fc:	ldr	r3, [r3]
    3a00:	ldr	r3, [r3, #396]	; 0x18c
    3a04:	ldr	r3, [r3, #8]
    3a08:	mov	r0, r3
    3a0c:	bl	0 <coda_type_record_field_set_optional>
    3a10:	mov	r3, r0
    3a14:	mov	r0, r3
    3a18:	sub	sp, fp, #4
    3a1c:	pop	{fp, pc}

00003a20 <cd_field_set_available>:
    3a20:	push	{fp, lr}
    3a24:	add	fp, sp, #4
    3a28:	sub	sp, sp, #8
    3a2c:	str	r0, [fp, #-8]
    3a30:	ldr	r3, [fp, #-8]
    3a34:	ldr	r3, [r3]
    3a38:	ldr	r3, [r3, #396]	; 0x18c
    3a3c:	ldr	r2, [r3, #8]
    3a40:	ldr	r3, [fp, #-8]
    3a44:	ldr	r3, [r3]
    3a48:	ldr	r3, [r3, #8]
    3a4c:	mov	r1, r3
    3a50:	mov	r0, r2
    3a54:	bl	0 <coda_type_record_field_set_available_expression>
    3a58:	mov	r3, r0
    3a5c:	cmp	r3, #0
    3a60:	beq	3a6c <cd_field_set_available+0x4c>
    3a64:	mvn	r3, #0
    3a68:	b	3a80 <cd_field_set_available+0x60>
    3a6c:	ldr	r3, [fp, #-8]
    3a70:	ldr	r3, [r3]
    3a74:	mov	r2, #0
    3a78:	str	r2, [r3, #8]
    3a7c:	mov	r3, #0
    3a80:	mov	r0, r3
    3a84:	sub	sp, fp, #4
    3a88:	pop	{fp, pc}

00003a8c <cd_field_set_bit_offset>:
    3a8c:	push	{fp, lr}
    3a90:	add	fp, sp, #4
    3a94:	sub	sp, sp, #8
    3a98:	str	r0, [fp, #-8]
    3a9c:	ldr	r3, [fp, #-8]
    3aa0:	ldr	r3, [r3]
    3aa4:	ldr	r3, [r3, #396]	; 0x18c
    3aa8:	ldr	r2, [r3, #8]
    3aac:	ldr	r3, [fp, #-8]
    3ab0:	ldr	r3, [r3]
    3ab4:	ldr	r3, [r3, #8]
    3ab8:	mov	r1, r3
    3abc:	mov	r0, r2
    3ac0:	bl	0 <coda_type_record_field_set_bit_offset_expression>
    3ac4:	mov	r3, r0
    3ac8:	cmp	r3, #0
    3acc:	beq	3ad8 <cd_field_set_bit_offset+0x4c>
    3ad0:	mvn	r3, #0
    3ad4:	b	3aec <cd_field_set_bit_offset+0x60>
    3ad8:	ldr	r3, [fp, #-8]
    3adc:	ldr	r3, [r3]
    3ae0:	mov	r2, #0
    3ae4:	str	r2, [r3, #8]
    3ae8:	mov	r3, #0
    3aec:	mov	r0, r3
    3af0:	sub	sp, fp, #4
    3af4:	pop	{fp, pc}

00003af8 <cd_field_finalise>:
    3af8:	push	{fp, lr}
    3afc:	add	fp, sp, #4
    3b00:	sub	sp, sp, #8
    3b04:	str	r0, [fp, #-8]
    3b08:	ldr	r3, [fp, #-8]
    3b0c:	ldr	r3, [r3]
    3b10:	ldr	r3, [r3, #8]
    3b14:	mov	r0, r3
    3b18:	bl	0 <coda_type_record_field_validate>
    3b1c:	mov	r3, r0
    3b20:	mov	r0, r3
    3b24:	sub	sp, fp, #4
    3b28:	pop	{fp, pc}

00003b2c <cd_field_init>:
    3b2c:	push	{r4, fp, lr}
    3b30:	add	fp, sp, #8
    3b34:	sub	sp, sp, #28
    3b38:	str	r0, [fp, #-32]	; 0xffffffe0
    3b3c:	str	r1, [fp, #-36]	; 0xffffffdc
    3b40:	mov	r3, #0
    3b44:	str	r3, [fp, #-16]
    3b48:	mov	r3, #0
    3b4c:	str	r3, [fp, #-20]	; 0xffffffec
    3b50:	mov	r3, #0
    3b54:	str	r3, [fp, #-24]	; 0xffffffe8
    3b58:	ldr	r1, [pc, #512]	; 3d60 <cd_field_init+0x234>
    3b5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3b60:	bl	f34 <get_attribute_value>
    3b64:	str	r0, [fp, #-16]
    3b68:	ldr	r3, [fp, #-16]
    3b6c:	cmp	r3, #0
    3b70:	beq	3b88 <cd_field_init+0x5c>
    3b74:	ldr	r1, [pc, #488]	; 3d64 <cd_field_init+0x238>
    3b78:	ldr	r0, [pc, #488]	; 3d68 <cd_field_init+0x23c>
    3b7c:	bl	0 <coda_set_error>
    3b80:	mvn	r3, #0
    3b84:	b	3d54 <cd_field_init+0x228>
    3b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3b8c:	ldr	r3, [r3]
    3b90:	ldr	r3, [r3, #396]	; 0x18c
    3b94:	ldr	r3, [r3, #48]	; 0x30
    3b98:	cmp	r3, #0
    3b9c:	bne	3bb4 <cd_field_init+0x88>
    3ba0:	ldr	r3, [pc, #452]	; 3d6c <cd_field_init+0x240>
    3ba4:	ldr	r2, [pc, #452]	; 3d70 <cd_field_init+0x244>
    3ba8:	ldr	r1, [pc, #452]	; 3d74 <cd_field_init+0x248>
    3bac:	ldr	r0, [pc, #452]	; 3d78 <cd_field_init+0x24c>
    3bb0:	bl	0 <__assert_fail>
    3bb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3bb8:	ldr	r3, [r3]
    3bbc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3bc0:	ldr	r2, [r2]
    3bc4:	ldr	r2, [r2, #396]	; 0x18c
    3bc8:	ldr	r2, [r2, #44]	; 0x2c
    3bcc:	str	r2, [r3, #44]	; 0x2c
    3bd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3bd4:	ldr	r3, [r3]
    3bd8:	mov	r2, #1
    3bdc:	str	r2, [r3, #48]	; 0x30
    3be0:	ldr	r1, [pc, #404]	; 3d7c <cd_field_init+0x250>
    3be4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3be8:	bl	f34 <get_attribute_value>
    3bec:	mov	r3, r0
    3bf0:	cmp	r3, #0
    3bf4:	beq	3c0c <cd_field_init+0xe0>
    3bf8:	ldr	r1, [pc, #384]	; 3d80 <cd_field_init+0x254>
    3bfc:	ldr	r0, [pc, #356]	; 3d68 <cd_field_init+0x23c>
    3c00:	bl	0 <coda_set_error>
    3c04:	mvn	r3, #0
    3c08:	b	3d54 <cd_field_init+0x228>
    3c0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3c10:	ldr	r3, [r3]
    3c14:	ldr	r3, [r3]
    3c18:	mov	r2, r3
    3c1c:	ldr	r1, [pc, #352]	; 3d84 <cd_field_init+0x258>
    3c20:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3c24:	bl	fa4 <get_mandatory_attribute_value>
    3c28:	str	r0, [fp, #-20]	; 0xffffffec
    3c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c30:	cmp	r3, #0
    3c34:	bne	3c40 <cd_field_init+0x114>
    3c38:	mvn	r3, #0
    3c3c:	b	3d54 <cd_field_init+0x228>
    3c40:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3c44:	ldr	r3, [r3]
    3c48:	ldr	r2, [pc, #312]	; 3d88 <cd_field_init+0x25c>
    3c4c:	str	r2, [r3, #40]	; 0x28
    3c50:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3c54:	ldr	r4, [r3]
    3c58:	ldr	r0, [fp, #-20]	; 0xffffffec
    3c5c:	bl	0 <coda_type_record_field_new>
    3c60:	mov	r3, r0
    3c64:	str	r3, [r4, #8]
    3c68:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3c6c:	ldr	r3, [r3]
    3c70:	ldr	r3, [r3, #8]
    3c74:	cmp	r3, #0
    3c78:	bne	3c84 <cd_field_init+0x158>
    3c7c:	mvn	r3, #0
    3c80:	b	3d54 <cd_field_init+0x228>
    3c84:	ldr	r1, [pc, #256]	; 3d8c <cd_field_init+0x260>
    3c88:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3c8c:	bl	f34 <get_attribute_value>
    3c90:	str	r0, [fp, #-24]	; 0xffffffe8
    3c94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c98:	cmp	r3, #0
    3c9c:	beq	3ccc <cd_field_init+0x1a0>
    3ca0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3ca4:	ldr	r3, [r3]
    3ca8:	ldr	r3, [r3, #8]
    3cac:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3cb0:	mov	r0, r3
    3cb4:	bl	0 <coda_type_record_field_set_real_name>
    3cb8:	mov	r3, r0
    3cbc:	cmp	r3, #0
    3cc0:	beq	3ccc <cd_field_init+0x1a0>
    3cc4:	mvn	r3, #0
    3cc8:	b	3d54 <cd_field_init+0x228>
    3ccc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3cd0:	ldr	r3, [r3]
    3cd4:	ldr	r1, [pc, #180]	; 3d90 <cd_field_init+0x264>
    3cd8:	mov	r0, r3
    3cdc:	bl	1534 <register_type_elements>
    3ce0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3ce4:	ldr	r0, [r3]
    3ce8:	ldr	r3, [pc, #164]	; 3d94 <cd_field_init+0x268>
    3cec:	ldr	r2, [pc, #164]	; 3d98 <cd_field_init+0x26c>
    3cf0:	mov	r1, #18
    3cf4:	bl	14ac <register_sub_element>
    3cf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3cfc:	ldr	r0, [r3]
    3d00:	ldr	r3, [pc, #148]	; 3d9c <cd_field_init+0x270>
    3d04:	ldr	r2, [pc, #140]	; 3d98 <cd_field_init+0x26c>
    3d08:	mov	r1, #29
    3d0c:	bl	14ac <register_sub_element>
    3d10:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3d14:	ldr	r0, [r3]
    3d18:	ldr	r3, [pc, #128]	; 3da0 <cd_field_init+0x274>
    3d1c:	ldr	r2, [pc, #128]	; 3da4 <cd_field_init+0x278>
    3d20:	mov	r1, #5
    3d24:	bl	14ac <register_sub_element>
    3d28:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3d2c:	ldr	r0, [r3]
    3d30:	ldr	r3, [pc, #112]	; 3da8 <cd_field_init+0x27c>
    3d34:	ldr	r2, [pc, #112]	; 3dac <cd_field_init+0x280>
    3d38:	mov	r1, #6
    3d3c:	bl	14ac <register_sub_element>
    3d40:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3d44:	ldr	r3, [r3]
    3d48:	ldr	r2, [pc, #96]	; 3db0 <cd_field_init+0x284>
    3d4c:	str	r2, [r3, #36]	; 0x24
    3d50:	mov	r3, #0
    3d54:	mov	r0, r3
    3d58:	sub	sp, fp, #8
    3d5c:	pop	{r4, fp, pc}
    3d60:	.word	0x00000b38
    3d64:	.word	0x00000f04
    3d68:	.word	0xfffffe70
    3d6c:	.word	0x0000226c
    3d70:	.word	0x00000695
    3d74:	.word	0x000009bc
    3d78:	.word	0x00000dc8
    3d7c:	.word	0x00000b58
    3d80:	.word	0x00000f30
    3d84:	.word	0x00000aa8
    3d88:	.word	0x00000000
    3d8c:	.word	0x00000e18
	...

00003db4 <cd_float_set_unit>:
    3db4:	push	{fp, lr}
    3db8:	add	fp, sp, #4
    3dbc:	sub	sp, sp, #8
    3dc0:	str	r0, [fp, #-8]
    3dc4:	ldr	r3, [fp, #-8]
    3dc8:	ldr	r3, [r3]
    3dcc:	ldr	r3, [r3, #12]
    3dd0:	cmp	r3, #0
    3dd4:	bne	3dfc <cd_float_set_unit+0x48>
    3dd8:	ldr	r3, [fp, #-8]
    3ddc:	ldr	r3, [r3]
    3de0:	ldr	r3, [r3, #396]	; 0x18c
    3de4:	ldr	r3, [r3, #8]
    3de8:	ldr	r1, [pc, #68]	; 3e34 <cd_float_set_unit+0x80>
    3dec:	mov	r0, r3
    3df0:	bl	0 <coda_type_number_set_unit>
    3df4:	mov	r3, r0
    3df8:	b	3e28 <cd_float_set_unit+0x74>
    3dfc:	ldr	r3, [fp, #-8]
    3e00:	ldr	r3, [r3]
    3e04:	ldr	r3, [r3, #396]	; 0x18c
    3e08:	ldr	r2, [r3, #8]
    3e0c:	ldr	r3, [fp, #-8]
    3e10:	ldr	r3, [r3]
    3e14:	ldr	r3, [r3, #12]
    3e18:	mov	r1, r3
    3e1c:	mov	r0, r2
    3e20:	bl	0 <coda_type_number_set_unit>
    3e24:	mov	r3, r0
    3e28:	mov	r0, r3
    3e2c:	sub	sp, fp, #4
    3e30:	pop	{fp, pc}
    3e34:	.word	0x00000c50

00003e38 <cd_float_set_read_type>:
    3e38:	push	{fp, lr}
    3e3c:	add	fp, sp, #4
    3e40:	sub	sp, sp, #8
    3e44:	str	r0, [fp, #-8]
    3e48:	ldr	r3, [fp, #-8]
    3e4c:	ldr	r3, [r3]
    3e50:	ldr	r3, [r3, #396]	; 0x18c
    3e54:	ldr	r0, [r3, #8]
    3e58:	ldr	r3, [fp, #-8]
    3e5c:	ldr	r3, [r3]
    3e60:	ldrd	r2, [r3, #16]
    3e64:	mov	r3, r2
    3e68:	mov	r1, r3
    3e6c:	bl	0 <coda_type_set_read_type>
    3e70:	mov	r3, r0
    3e74:	mov	r0, r3
    3e78:	sub	sp, fp, #4
    3e7c:	pop	{fp, pc}

00003e80 <cd_float_set_conversion>:
    3e80:	push	{fp, lr}
    3e84:	add	fp, sp, #4
    3e88:	sub	sp, sp, #8
    3e8c:	str	r0, [fp, #-8]
    3e90:	ldr	r3, [fp, #-8]
    3e94:	ldr	r3, [r3]
    3e98:	ldr	r3, [r3, #396]	; 0x18c
    3e9c:	ldr	r2, [r3, #8]
    3ea0:	ldr	r3, [fp, #-8]
    3ea4:	ldr	r3, [r3]
    3ea8:	ldr	r3, [r3, #8]
    3eac:	mov	r1, r3
    3eb0:	mov	r0, r2
    3eb4:	bl	0 <coda_type_number_set_conversion>
    3eb8:	mov	r3, r0
    3ebc:	cmp	r3, #0
    3ec0:	beq	3ecc <cd_float_set_conversion+0x4c>
    3ec4:	mvn	r3, #0
    3ec8:	b	3ee0 <cd_float_set_conversion+0x60>
    3ecc:	ldr	r3, [fp, #-8]
    3ed0:	ldr	r3, [r3]
    3ed4:	mov	r2, #0
    3ed8:	str	r2, [r3, #8]
    3edc:	mov	r3, #0
    3ee0:	mov	r0, r3
    3ee4:	sub	sp, fp, #4
    3ee8:	pop	{fp, pc}

00003eec <cd_float_set_little_endian>:
    3eec:	push	{fp, lr}
    3ef0:	add	fp, sp, #4
    3ef4:	sub	sp, sp, #8
    3ef8:	str	r0, [fp, #-8]
    3efc:	ldr	r3, [fp, #-8]
    3f00:	ldr	r3, [r3]
    3f04:	ldr	r3, [r3, #396]	; 0x18c
    3f08:	ldr	r3, [r3, #8]
    3f0c:	mov	r1, #1
    3f10:	mov	r0, r3
    3f14:	bl	0 <coda_type_number_set_endianness>
    3f18:	mov	r3, r0
    3f1c:	mov	r0, r3
    3f20:	sub	sp, fp, #4
    3f24:	pop	{fp, pc}

00003f28 <cd_float_add_mapping>:
    3f28:	push	{fp, lr}
    3f2c:	add	fp, sp, #4
    3f30:	sub	sp, sp, #8
    3f34:	str	r0, [fp, #-8]
    3f38:	ldr	r3, [fp, #-8]
    3f3c:	ldr	r3, [r3]
    3f40:	ldr	r3, [r3, #396]	; 0x18c
    3f44:	ldr	r2, [r3, #8]
    3f48:	ldr	r3, [fp, #-8]
    3f4c:	ldr	r3, [r3]
    3f50:	ldr	r3, [r3, #8]
    3f54:	mov	r1, r3
    3f58:	mov	r0, r2
    3f5c:	bl	0 <coda_type_number_add_ascii_float_mapping>
    3f60:	mov	r3, r0
    3f64:	cmp	r3, #0
    3f68:	beq	3f74 <cd_float_add_mapping+0x4c>
    3f6c:	mvn	r3, #0
    3f70:	b	3f88 <cd_float_add_mapping+0x60>
    3f74:	ldr	r3, [fp, #-8]
    3f78:	ldr	r3, [r3]
    3f7c:	mov	r2, #0
    3f80:	str	r2, [r3, #8]
    3f84:	mov	r3, #0
    3f88:	mov	r0, r3
    3f8c:	sub	sp, fp, #4
    3f90:	pop	{fp, pc}

00003f94 <cd_float_finalise>:
    3f94:	push	{fp, lr}
    3f98:	add	fp, sp, #4
    3f9c:	sub	sp, sp, #8
    3fa0:	str	r0, [fp, #-8]
    3fa4:	ldr	r3, [fp, #-8]
    3fa8:	ldr	r3, [r3]
    3fac:	ldr	r3, [r3, #8]
    3fb0:	mov	r0, r3
    3fb4:	bl	0 <coda_type_number_validate>
    3fb8:	mov	r3, r0
    3fbc:	mov	r0, r3
    3fc0:	sub	sp, fp, #4
    3fc4:	pop	{fp, pc}

00003fc8 <cd_float_init>:
    3fc8:	push	{r4, fp, lr}
    3fcc:	add	fp, sp, #8
    3fd0:	sub	sp, sp, #12
    3fd4:	str	r0, [fp, #-16]
    3fd8:	str	r1, [fp, #-20]	; 0xffffffec
    3fdc:	ldr	r1, [fp, #-20]	; 0xffffffec
    3fe0:	ldr	r0, [fp, #-16]
    3fe4:	bl	1128 <handle_format_attribute_for_type>
    3fe8:	mov	r3, r0
    3fec:	cmp	r3, #0
    3ff0:	beq	3ffc <cd_float_init+0x34>
    3ff4:	mvn	r3, #0
    3ff8:	b	415c <cd_float_init+0x194>
    3ffc:	ldr	r3, [fp, #-16]
    4000:	ldr	r3, [r3]
    4004:	ldr	r2, [pc, #348]	; 4168 <cd_float_init+0x1a0>
    4008:	str	r2, [r3, #40]	; 0x28
    400c:	ldr	r3, [fp, #-16]
    4010:	ldr	r4, [r3]
    4014:	ldr	r3, [fp, #-16]
    4018:	ldr	r3, [r3]
    401c:	ldr	r3, [r3, #44]	; 0x2c
    4020:	mov	r1, #3
    4024:	mov	r0, r3
    4028:	bl	0 <coda_type_number_new>
    402c:	mov	r3, r0
    4030:	str	r3, [r4, #8]
    4034:	ldr	r3, [fp, #-16]
    4038:	ldr	r3, [r3]
    403c:	ldr	r3, [r3, #8]
    4040:	cmp	r3, #0
    4044:	bne	4050 <cd_float_init+0x88>
    4048:	mvn	r3, #0
    404c:	b	415c <cd_float_init+0x194>
    4050:	ldr	r1, [fp, #-20]	; 0xffffffec
    4054:	ldr	r0, [fp, #-16]
    4058:	bl	100c <handle_name_attribute_for_type>
    405c:	mov	r3, r0
    4060:	cmp	r3, #0
    4064:	beq	4070 <cd_float_init+0xa8>
    4068:	mvn	r3, #0
    406c:	b	415c <cd_float_init+0x194>
    4070:	ldr	r3, [fp, #-16]
    4074:	ldr	r0, [r3]
    4078:	ldr	r3, [pc, #236]	; 416c <cd_float_init+0x1a4>
    407c:	ldr	r2, [pc, #236]	; 4170 <cd_float_init+0x1a8>
    4080:	mov	r1, #41	; 0x29
    4084:	bl	14ac <register_sub_element>
    4088:	ldr	r3, [fp, #-16]
    408c:	ldr	r0, [r3]
    4090:	ldr	r3, [pc, #220]	; 4174 <cd_float_init+0x1ac>
    4094:	ldr	r2, [pc, #220]	; 4178 <cd_float_init+0x1b0>
    4098:	mov	r1, #28
    409c:	bl	14ac <register_sub_element>
    40a0:	ldr	r3, [fp, #-16]
    40a4:	ldr	r0, [r3]
    40a8:	ldr	r3, [pc, #204]	; 417c <cd_float_init+0x1b4>
    40ac:	ldr	r2, [pc, #204]	; 4180 <cd_float_init+0x1b8>
    40b0:	mov	r1, #10
    40b4:	bl	14ac <register_sub_element>
    40b8:	ldr	r3, [fp, #-16]
    40bc:	ldr	r0, [r3]
    40c0:	ldr	r3, [pc, #188]	; 4184 <cd_float_init+0x1bc>
    40c4:	ldr	r2, [pc, #188]	; 4188 <cd_float_init+0x1c0>
    40c8:	mov	r1, #7
    40cc:	bl	14ac <register_sub_element>
    40d0:	ldr	r3, [fp, #-16]
    40d4:	ldr	r0, [r3]
    40d8:	ldr	r3, [pc, #172]	; 418c <cd_float_init+0x1c4>
    40dc:	ldr	r2, [pc, #164]	; 4188 <cd_float_init+0x1c0>
    40e0:	mov	r1, #8
    40e4:	bl	14ac <register_sub_element>
    40e8:	ldr	r3, [fp, #-16]
    40ec:	ldr	r0, [r3]
    40f0:	ldr	r3, [pc, #152]	; 4190 <cd_float_init+0x1c8>
    40f4:	ldr	r2, [pc, #152]	; 4194 <cd_float_init+0x1cc>
    40f8:	mov	r1, #21
    40fc:	bl	14ac <register_sub_element>
    4100:	ldr	r3, [fp, #-16]
    4104:	ldr	r0, [r3]
    4108:	ldr	r3, [pc, #136]	; 4198 <cd_float_init+0x1d0>
    410c:	ldr	r2, [pc, #136]	; 419c <cd_float_init+0x1d4>
    4110:	mov	r1, #22
    4114:	bl	14ac <register_sub_element>
    4118:	ldr	r3, [fp, #-16]
    411c:	ldr	r0, [r3]
    4120:	ldr	r3, [pc, #120]	; 41a0 <cd_float_init+0x1d8>
    4124:	ldr	r2, [pc, #68]	; 4170 <cd_float_init+0x1a8>
    4128:	mov	r1, #11
    412c:	bl	14ac <register_sub_element>
    4130:	ldr	r3, [fp, #-16]
    4134:	ldr	r0, [r3]
    4138:	ldr	r3, [pc, #100]	; 41a4 <cd_float_init+0x1dc>
    413c:	ldr	r2, [pc, #100]	; 41a8 <cd_float_init+0x1e0>
    4140:	mov	r1, #4
    4144:	bl	14ac <register_sub_element>
    4148:	ldr	r3, [fp, #-16]
    414c:	ldr	r3, [r3]
    4150:	ldr	r2, [pc, #84]	; 41ac <cd_float_init+0x1e4>
    4154:	str	r2, [r3, #36]	; 0x24
    4158:	mov	r3, #0
    415c:	mov	r0, r3
    4160:	sub	sp, fp, #8
    4164:	pop	{r4, fp, pc}
	...

000041b0 <cd_integer_set_unit>:
    41b0:	push	{fp, lr}
    41b4:	add	fp, sp, #4
    41b8:	sub	sp, sp, #8
    41bc:	str	r0, [fp, #-8]
    41c0:	ldr	r3, [fp, #-8]
    41c4:	ldr	r3, [r3]
    41c8:	ldr	r3, [r3, #12]
    41cc:	cmp	r3, #0
    41d0:	bne	41f8 <cd_integer_set_unit+0x48>
    41d4:	ldr	r3, [fp, #-8]
    41d8:	ldr	r3, [r3]
    41dc:	ldr	r3, [r3, #396]	; 0x18c
    41e0:	ldr	r3, [r3, #8]
    41e4:	ldr	r1, [pc, #68]	; 4230 <cd_integer_set_unit+0x80>
    41e8:	mov	r0, r3
    41ec:	bl	0 <coda_type_number_set_unit>
    41f0:	mov	r3, r0
    41f4:	b	4224 <cd_integer_set_unit+0x74>
    41f8:	ldr	r3, [fp, #-8]
    41fc:	ldr	r3, [r3]
    4200:	ldr	r3, [r3, #396]	; 0x18c
    4204:	ldr	r2, [r3, #8]
    4208:	ldr	r3, [fp, #-8]
    420c:	ldr	r3, [r3]
    4210:	ldr	r3, [r3, #12]
    4214:	mov	r1, r3
    4218:	mov	r0, r2
    421c:	bl	0 <coda_type_number_set_unit>
    4220:	mov	r3, r0
    4224:	mov	r0, r3
    4228:	sub	sp, fp, #4
    422c:	pop	{fp, pc}
    4230:	.word	0x00000c50

00004234 <cd_integer_set_read_type>:
    4234:	push	{fp, lr}
    4238:	add	fp, sp, #4
    423c:	sub	sp, sp, #8
    4240:	str	r0, [fp, #-8]
    4244:	ldr	r3, [fp, #-8]
    4248:	ldr	r3, [r3]
    424c:	ldr	r3, [r3, #396]	; 0x18c
    4250:	ldr	r0, [r3, #8]
    4254:	ldr	r3, [fp, #-8]
    4258:	ldr	r3, [r3]
    425c:	ldrd	r2, [r3, #16]
    4260:	mov	r3, r2
    4264:	mov	r1, r3
    4268:	bl	0 <coda_type_set_read_type>
    426c:	mov	r3, r0
    4270:	mov	r0, r3
    4274:	sub	sp, fp, #4
    4278:	pop	{fp, pc}

0000427c <cd_integer_set_conversion>:
    427c:	push	{fp, lr}
    4280:	add	fp, sp, #4
    4284:	sub	sp, sp, #8
    4288:	str	r0, [fp, #-8]
    428c:	ldr	r3, [fp, #-8]
    4290:	ldr	r3, [r3]
    4294:	ldr	r3, [r3, #396]	; 0x18c
    4298:	ldr	r2, [r3, #8]
    429c:	ldr	r3, [fp, #-8]
    42a0:	ldr	r3, [r3]
    42a4:	ldr	r3, [r3, #8]
    42a8:	mov	r1, r3
    42ac:	mov	r0, r2
    42b0:	bl	0 <coda_type_number_set_conversion>
    42b4:	mov	r3, r0
    42b8:	cmp	r3, #0
    42bc:	beq	42c8 <cd_integer_set_conversion+0x4c>
    42c0:	mvn	r3, #0
    42c4:	b	42dc <cd_integer_set_conversion+0x60>
    42c8:	ldr	r3, [fp, #-8]
    42cc:	ldr	r3, [r3]
    42d0:	mov	r2, #0
    42d4:	str	r2, [r3, #8]
    42d8:	mov	r3, #0
    42dc:	mov	r0, r3
    42e0:	sub	sp, fp, #4
    42e4:	pop	{fp, pc}

000042e8 <cd_integer_set_little_endian>:
    42e8:	push	{fp, lr}
    42ec:	add	fp, sp, #4
    42f0:	sub	sp, sp, #8
    42f4:	str	r0, [fp, #-8]
    42f8:	ldr	r3, [fp, #-8]
    42fc:	ldr	r3, [r3]
    4300:	ldr	r3, [r3, #396]	; 0x18c
    4304:	ldr	r3, [r3, #8]
    4308:	mov	r1, #1
    430c:	mov	r0, r3
    4310:	bl	0 <coda_type_number_set_endianness>
    4314:	mov	r3, r0
    4318:	mov	r0, r3
    431c:	sub	sp, fp, #4
    4320:	pop	{fp, pc}

00004324 <cd_integer_add_mapping>:
    4324:	push	{fp, lr}
    4328:	add	fp, sp, #4
    432c:	sub	sp, sp, #8
    4330:	str	r0, [fp, #-8]
    4334:	ldr	r3, [fp, #-8]
    4338:	ldr	r3, [r3]
    433c:	ldr	r3, [r3, #396]	; 0x18c
    4340:	ldr	r2, [r3, #8]
    4344:	ldr	r3, [fp, #-8]
    4348:	ldr	r3, [r3]
    434c:	ldr	r3, [r3, #8]
    4350:	mov	r1, r3
    4354:	mov	r0, r2
    4358:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    435c:	mov	r3, r0
    4360:	cmp	r3, #0
    4364:	beq	4370 <cd_integer_add_mapping+0x4c>
    4368:	mvn	r3, #0
    436c:	b	4384 <cd_integer_add_mapping+0x60>
    4370:	ldr	r3, [fp, #-8]
    4374:	ldr	r3, [r3]
    4378:	mov	r2, #0
    437c:	str	r2, [r3, #8]
    4380:	mov	r3, #0
    4384:	mov	r0, r3
    4388:	sub	sp, fp, #4
    438c:	pop	{fp, pc}

00004390 <cd_integer_finalise>:
    4390:	push	{fp, lr}
    4394:	add	fp, sp, #4
    4398:	sub	sp, sp, #8
    439c:	str	r0, [fp, #-8]
    43a0:	ldr	r3, [fp, #-8]
    43a4:	ldr	r3, [r3]
    43a8:	ldr	r3, [r3, #8]
    43ac:	mov	r0, r3
    43b0:	bl	0 <coda_type_number_validate>
    43b4:	mov	r3, r0
    43b8:	mov	r0, r3
    43bc:	sub	sp, fp, #4
    43c0:	pop	{fp, pc}

000043c4 <cd_integer_init>:
    43c4:	push	{r4, fp, lr}
    43c8:	add	fp, sp, #8
    43cc:	sub	sp, sp, #12
    43d0:	str	r0, [fp, #-16]
    43d4:	str	r1, [fp, #-20]	; 0xffffffec
    43d8:	ldr	r1, [fp, #-20]	; 0xffffffec
    43dc:	ldr	r0, [fp, #-16]
    43e0:	bl	1128 <handle_format_attribute_for_type>
    43e4:	mov	r3, r0
    43e8:	cmp	r3, #0
    43ec:	beq	43f8 <cd_integer_init+0x34>
    43f0:	mvn	r3, #0
    43f4:	b	4558 <cd_integer_init+0x194>
    43f8:	ldr	r3, [fp, #-16]
    43fc:	ldr	r3, [r3]
    4400:	ldr	r2, [pc, #348]	; 4564 <cd_integer_init+0x1a0>
    4404:	str	r2, [r3, #40]	; 0x28
    4408:	ldr	r3, [fp, #-16]
    440c:	ldr	r4, [r3]
    4410:	ldr	r3, [fp, #-16]
    4414:	ldr	r3, [r3]
    4418:	ldr	r3, [r3, #44]	; 0x2c
    441c:	mov	r1, #2
    4420:	mov	r0, r3
    4424:	bl	0 <coda_type_number_new>
    4428:	mov	r3, r0
    442c:	str	r3, [r4, #8]
    4430:	ldr	r3, [fp, #-16]
    4434:	ldr	r3, [r3]
    4438:	ldr	r3, [r3, #8]
    443c:	cmp	r3, #0
    4440:	bne	444c <cd_integer_init+0x88>
    4444:	mvn	r3, #0
    4448:	b	4558 <cd_integer_init+0x194>
    444c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4450:	ldr	r0, [fp, #-16]
    4454:	bl	100c <handle_name_attribute_for_type>
    4458:	mov	r3, r0
    445c:	cmp	r3, #0
    4460:	beq	446c <cd_integer_init+0xa8>
    4464:	mvn	r3, #0
    4468:	b	4558 <cd_integer_init+0x194>
    446c:	ldr	r3, [fp, #-16]
    4470:	ldr	r0, [r3]
    4474:	ldr	r3, [pc, #236]	; 4568 <cd_integer_init+0x1a4>
    4478:	ldr	r2, [pc, #236]	; 456c <cd_integer_init+0x1a8>
    447c:	mov	r1, #11
    4480:	bl	14ac <register_sub_element>
    4484:	ldr	r3, [fp, #-16]
    4488:	ldr	r0, [r3]
    448c:	ldr	r3, [pc, #220]	; 4570 <cd_integer_init+0x1ac>
    4490:	ldr	r2, [pc, #212]	; 456c <cd_integer_init+0x1a8>
    4494:	mov	r1, #41	; 0x29
    4498:	bl	14ac <register_sub_element>
    449c:	ldr	r3, [fp, #-16]
    44a0:	ldr	r0, [r3]
    44a4:	ldr	r3, [pc, #200]	; 4574 <cd_integer_init+0x1b0>
    44a8:	ldr	r2, [pc, #200]	; 4578 <cd_integer_init+0x1b4>
    44ac:	mov	r1, #8
    44b0:	bl	14ac <register_sub_element>
    44b4:	ldr	r3, [fp, #-16]
    44b8:	ldr	r0, [r3]
    44bc:	ldr	r3, [pc, #184]	; 457c <cd_integer_init+0x1b8>
    44c0:	ldr	r2, [pc, #176]	; 4578 <cd_integer_init+0x1b4>
    44c4:	mov	r1, #7
    44c8:	bl	14ac <register_sub_element>
    44cc:	ldr	r3, [fp, #-16]
    44d0:	ldr	r0, [r3]
    44d4:	ldr	r3, [pc, #164]	; 4580 <cd_integer_init+0x1bc>
    44d8:	ldr	r2, [pc, #164]	; 4584 <cd_integer_init+0x1c0>
    44dc:	mov	r1, #21
    44e0:	bl	14ac <register_sub_element>
    44e4:	ldr	r3, [fp, #-16]
    44e8:	ldr	r0, [r3]
    44ec:	ldr	r3, [pc, #148]	; 4588 <cd_integer_init+0x1c4>
    44f0:	ldr	r2, [pc, #148]	; 458c <cd_integer_init+0x1c8>
    44f4:	mov	r1, #28
    44f8:	bl	14ac <register_sub_element>
    44fc:	ldr	r3, [fp, #-16]
    4500:	ldr	r0, [r3]
    4504:	ldr	r3, [pc, #132]	; 4590 <cd_integer_init+0x1cc>
    4508:	ldr	r2, [pc, #132]	; 4594 <cd_integer_init+0x1d0>
    450c:	mov	r1, #10
    4510:	bl	14ac <register_sub_element>
    4514:	ldr	r3, [fp, #-16]
    4518:	ldr	r0, [r3]
    451c:	ldr	r3, [pc, #116]	; 4598 <cd_integer_init+0x1d4>
    4520:	ldr	r2, [pc, #116]	; 459c <cd_integer_init+0x1d8>
    4524:	mov	r1, #22
    4528:	bl	14ac <register_sub_element>
    452c:	ldr	r3, [fp, #-16]
    4530:	ldr	r0, [r3]
    4534:	ldr	r3, [pc, #100]	; 45a0 <cd_integer_init+0x1dc>
    4538:	ldr	r2, [pc, #100]	; 45a4 <cd_integer_init+0x1e0>
    453c:	mov	r1, #4
    4540:	bl	14ac <register_sub_element>
    4544:	ldr	r3, [fp, #-16]
    4548:	ldr	r3, [r3]
    454c:	ldr	r2, [pc, #84]	; 45a8 <cd_integer_init+0x1e4>
    4550:	str	r2, [r3, #36]	; 0x24
    4554:	mov	r3, #0
    4558:	mov	r0, r3
    455c:	sub	sp, fp, #8
    4560:	pop	{r4, fp, pc}
	...

000045ac <cd_named_type_init>:
    45ac:	push	{fp, lr}
    45b0:	add	fp, sp, #4
    45b4:	sub	sp, sp, #16
    45b8:	str	r0, [fp, #-16]
    45bc:	str	r1, [fp, #-20]	; 0xffffffec
    45c0:	ldr	r3, [fp, #-16]
    45c4:	ldr	r3, [r3]
    45c8:	ldr	r3, [r3]
    45cc:	mov	r2, r3
    45d0:	ldr	r1, [pc, #188]	; 4694 <cd_named_type_init+0xe8>
    45d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    45d8:	bl	fa4 <get_mandatory_attribute_value>
    45dc:	str	r0, [fp, #-8]
    45e0:	ldr	r3, [fp, #-8]
    45e4:	cmp	r3, #0
    45e8:	bne	45f4 <cd_named_type_init+0x48>
    45ec:	mvn	r3, #0
    45f0:	b	4688 <cd_named_type_init+0xdc>
    45f4:	ldr	r3, [fp, #-16]
    45f8:	ldr	r3, [r3]
    45fc:	ldr	r2, [pc, #148]	; 4698 <cd_named_type_init+0xec>
    4600:	str	r2, [r3, #40]	; 0x28
    4604:	ldr	r3, [fp, #-16]
    4608:	ldr	r3, [r3, #24]
    460c:	cmp	r3, #0
    4610:	bne	4628 <cd_named_type_init+0x7c>
    4614:	ldr	r3, [pc, #128]	; 469c <cd_named_type_init+0xf0>
    4618:	ldr	r2, [pc, #128]	; 46a0 <cd_named_type_init+0xf4>
    461c:	ldr	r1, [pc, #128]	; 46a4 <cd_named_type_init+0xf8>
    4620:	ldr	r0, [pc, #128]	; 46a8 <cd_named_type_init+0xfc>
    4624:	bl	0 <__assert_fail>
    4628:	sub	r3, fp, #12
    462c:	mov	r2, r3
    4630:	ldr	r1, [fp, #-8]
    4634:	ldr	r0, [fp, #-16]
    4638:	bl	1374 <get_named_type>
    463c:	mov	r3, r0
    4640:	cmp	r3, #0
    4644:	beq	4650 <cd_named_type_init+0xa4>
    4648:	mvn	r3, #0
    464c:	b	4688 <cd_named_type_init+0xdc>
    4650:	ldr	r3, [fp, #-16]
    4654:	ldr	r3, [r3]
    4658:	ldr	r2, [fp, #-12]
    465c:	ldr	r2, [r2]
    4660:	str	r2, [r3, #44]	; 0x2c
    4664:	ldr	r3, [fp, #-16]
    4668:	ldr	r3, [r3]
    466c:	mov	r2, #1
    4670:	str	r2, [r3, #48]	; 0x30
    4674:	ldr	r3, [fp, #-16]
    4678:	ldr	r3, [r3]
    467c:	ldr	r2, [fp, #-12]
    4680:	str	r2, [r3, #8]
    4684:	mov	r3, #0
    4688:	mov	r0, r3
    468c:	sub	sp, fp, #4
    4690:	pop	{fp, pc}
    4694:	.word	0x00000f5c
    4698:	.word	0x00000000
    469c:	.word	0x0000227c
    46a0:	.word	0x00000761
    46a4:	.word	0x000009bc
    46a8:	.word	0x00000ba8

000046ac <cd_native_type_finalise>:
    46ac:	push	{fp, lr}
    46b0:	add	fp, sp, #4
    46b4:	sub	sp, sp, #8
    46b8:	str	r0, [fp, #-8]
    46bc:	ldr	r3, [fp, #-8]
    46c0:	ldr	r3, [r3]
    46c4:	ldr	r3, [r3, #12]
    46c8:	cmp	r3, #0
    46cc:	bne	46e4 <cd_native_type_finalise+0x38>
    46d0:	ldr	r1, [pc, #828]	; 4a14 <cd_native_type_finalise+0x368>
    46d4:	ldr	r0, [pc, #828]	; 4a18 <cd_native_type_finalise+0x36c>
    46d8:	bl	0 <coda_set_error>
    46dc:	mvn	r3, #0
    46e0:	b	4a08 <cd_native_type_finalise+0x35c>
    46e4:	ldr	r3, [fp, #-8]
    46e8:	ldr	r3, [r3]
    46ec:	ldr	r3, [r3, #12]
    46f0:	ldr	r1, [pc, #804]	; 4a1c <cd_native_type_finalise+0x370>
    46f4:	mov	r0, r3
    46f8:	bl	0 <strcmp>
    46fc:	mov	r3, r0
    4700:	cmp	r3, #0
    4704:	bne	4720 <cd_native_type_finalise+0x74>
    4708:	ldr	r3, [fp, #-8]
    470c:	ldr	r1, [r3]
    4710:	mov	r2, #0
    4714:	mov	r3, #0
    4718:	strd	r2, [r1, #16]
    471c:	b	4a04 <cd_native_type_finalise+0x358>
    4720:	ldr	r3, [fp, #-8]
    4724:	ldr	r3, [r3]
    4728:	ldr	r3, [r3, #12]
    472c:	ldr	r1, [pc, #748]	; 4a20 <cd_native_type_finalise+0x374>
    4730:	mov	r0, r3
    4734:	bl	0 <strcmp>
    4738:	mov	r3, r0
    473c:	cmp	r3, #0
    4740:	bne	475c <cd_native_type_finalise+0xb0>
    4744:	ldr	r3, [fp, #-8]
    4748:	ldr	r1, [r3]
    474c:	mov	r2, #2
    4750:	mov	r3, #0
    4754:	strd	r2, [r1, #16]
    4758:	b	4a04 <cd_native_type_finalise+0x358>
    475c:	ldr	r3, [fp, #-8]
    4760:	ldr	r3, [r3]
    4764:	ldr	r3, [r3, #12]
    4768:	ldr	r1, [pc, #692]	; 4a24 <cd_native_type_finalise+0x378>
    476c:	mov	r0, r3
    4770:	bl	0 <strcmp>
    4774:	mov	r3, r0
    4778:	cmp	r3, #0
    477c:	bne	4798 <cd_native_type_finalise+0xec>
    4780:	ldr	r3, [fp, #-8]
    4784:	ldr	r1, [r3]
    4788:	mov	r2, #4
    478c:	mov	r3, #0
    4790:	strd	r2, [r1, #16]
    4794:	b	4a04 <cd_native_type_finalise+0x358>
    4798:	ldr	r3, [fp, #-8]
    479c:	ldr	r3, [r3]
    47a0:	ldr	r3, [r3, #12]
    47a4:	ldr	r1, [pc, #636]	; 4a28 <cd_native_type_finalise+0x37c>
    47a8:	mov	r0, r3
    47ac:	bl	0 <strcmp>
    47b0:	mov	r3, r0
    47b4:	cmp	r3, #0
    47b8:	bne	47d4 <cd_native_type_finalise+0x128>
    47bc:	ldr	r3, [fp, #-8]
    47c0:	ldr	r1, [r3]
    47c4:	mov	r2, #6
    47c8:	mov	r3, #0
    47cc:	strd	r2, [r1, #16]
    47d0:	b	4a04 <cd_native_type_finalise+0x358>
    47d4:	ldr	r3, [fp, #-8]
    47d8:	ldr	r3, [r3]
    47dc:	ldr	r3, [r3, #12]
    47e0:	ldr	r1, [pc, #580]	; 4a2c <cd_native_type_finalise+0x380>
    47e4:	mov	r0, r3
    47e8:	bl	0 <strcmp>
    47ec:	mov	r3, r0
    47f0:	cmp	r3, #0
    47f4:	bne	4810 <cd_native_type_finalise+0x164>
    47f8:	ldr	r3, [fp, #-8]
    47fc:	ldr	r1, [r3]
    4800:	mov	r2, #1
    4804:	mov	r3, #0
    4808:	strd	r2, [r1, #16]
    480c:	b	4a04 <cd_native_type_finalise+0x358>
    4810:	ldr	r3, [fp, #-8]
    4814:	ldr	r3, [r3]
    4818:	ldr	r3, [r3, #12]
    481c:	ldr	r1, [pc, #524]	; 4a30 <cd_native_type_finalise+0x384>
    4820:	mov	r0, r3
    4824:	bl	0 <strcmp>
    4828:	mov	r3, r0
    482c:	cmp	r3, #0
    4830:	bne	484c <cd_native_type_finalise+0x1a0>
    4834:	ldr	r3, [fp, #-8]
    4838:	ldr	r1, [r3]
    483c:	mov	r2, #3
    4840:	mov	r3, #0
    4844:	strd	r2, [r1, #16]
    4848:	b	4a04 <cd_native_type_finalise+0x358>
    484c:	ldr	r3, [fp, #-8]
    4850:	ldr	r3, [r3]
    4854:	ldr	r3, [r3, #12]
    4858:	ldr	r1, [pc, #468]	; 4a34 <cd_native_type_finalise+0x388>
    485c:	mov	r0, r3
    4860:	bl	0 <strcmp>
    4864:	mov	r3, r0
    4868:	cmp	r3, #0
    486c:	bne	4888 <cd_native_type_finalise+0x1dc>
    4870:	ldr	r3, [fp, #-8]
    4874:	ldr	r1, [r3]
    4878:	mov	r2, #5
    487c:	mov	r3, #0
    4880:	strd	r2, [r1, #16]
    4884:	b	4a04 <cd_native_type_finalise+0x358>
    4888:	ldr	r3, [fp, #-8]
    488c:	ldr	r3, [r3]
    4890:	ldr	r3, [r3, #12]
    4894:	ldr	r1, [pc, #412]	; 4a38 <cd_native_type_finalise+0x38c>
    4898:	mov	r0, r3
    489c:	bl	0 <strcmp>
    48a0:	mov	r3, r0
    48a4:	cmp	r3, #0
    48a8:	bne	48c4 <cd_native_type_finalise+0x218>
    48ac:	ldr	r3, [fp, #-8]
    48b0:	ldr	r1, [r3]
    48b4:	mov	r2, #7
    48b8:	mov	r3, #0
    48bc:	strd	r2, [r1, #16]
    48c0:	b	4a04 <cd_native_type_finalise+0x358>
    48c4:	ldr	r3, [fp, #-8]
    48c8:	ldr	r3, [r3]
    48cc:	ldr	r3, [r3, #12]
    48d0:	ldr	r1, [pc, #356]	; 4a3c <cd_native_type_finalise+0x390>
    48d4:	mov	r0, r3
    48d8:	bl	0 <strcmp>
    48dc:	mov	r3, r0
    48e0:	cmp	r3, #0
    48e4:	bne	4900 <cd_native_type_finalise+0x254>
    48e8:	ldr	r3, [fp, #-8]
    48ec:	ldr	r1, [r3]
    48f0:	mov	r2, #8
    48f4:	mov	r3, #0
    48f8:	strd	r2, [r1, #16]
    48fc:	b	4a04 <cd_native_type_finalise+0x358>
    4900:	ldr	r3, [fp, #-8]
    4904:	ldr	r3, [r3]
    4908:	ldr	r3, [r3, #12]
    490c:	ldr	r1, [pc, #300]	; 4a40 <cd_native_type_finalise+0x394>
    4910:	mov	r0, r3
    4914:	bl	0 <strcmp>
    4918:	mov	r3, r0
    491c:	cmp	r3, #0
    4920:	bne	493c <cd_native_type_finalise+0x290>
    4924:	ldr	r3, [fp, #-8]
    4928:	ldr	r1, [r3]
    492c:	mov	r2, #9
    4930:	mov	r3, #0
    4934:	strd	r2, [r1, #16]
    4938:	b	4a04 <cd_native_type_finalise+0x358>
    493c:	ldr	r3, [fp, #-8]
    4940:	ldr	r3, [r3]
    4944:	ldr	r3, [r3, #12]
    4948:	ldr	r1, [pc, #244]	; 4a44 <cd_native_type_finalise+0x398>
    494c:	mov	r0, r3
    4950:	bl	0 <strcmp>
    4954:	mov	r3, r0
    4958:	cmp	r3, #0
    495c:	bne	4978 <cd_native_type_finalise+0x2cc>
    4960:	ldr	r3, [fp, #-8]
    4964:	ldr	r1, [r3]
    4968:	mov	r2, #10
    496c:	mov	r3, #0
    4970:	strd	r2, [r1, #16]
    4974:	b	4a04 <cd_native_type_finalise+0x358>
    4978:	ldr	r3, [fp, #-8]
    497c:	ldr	r3, [r3]
    4980:	ldr	r3, [r3, #12]
    4984:	ldr	r1, [pc, #188]	; 4a48 <cd_native_type_finalise+0x39c>
    4988:	mov	r0, r3
    498c:	bl	0 <strcmp>
    4990:	mov	r3, r0
    4994:	cmp	r3, #0
    4998:	bne	49b4 <cd_native_type_finalise+0x308>
    499c:	ldr	r3, [fp, #-8]
    49a0:	ldr	r1, [r3]
    49a4:	mov	r2, #11
    49a8:	mov	r3, #0
    49ac:	strd	r2, [r1, #16]
    49b0:	b	4a04 <cd_native_type_finalise+0x358>
    49b4:	ldr	r3, [fp, #-8]
    49b8:	ldr	r3, [r3]
    49bc:	ldr	r3, [r3, #12]
    49c0:	ldr	r1, [pc, #132]	; 4a4c <cd_native_type_finalise+0x3a0>
    49c4:	mov	r0, r3
    49c8:	bl	0 <strcmp>
    49cc:	mov	r3, r0
    49d0:	cmp	r3, #0
    49d4:	bne	49f0 <cd_native_type_finalise+0x344>
    49d8:	ldr	r3, [fp, #-8]
    49dc:	ldr	r1, [r3]
    49e0:	mov	r2, #12
    49e4:	mov	r3, #0
    49e8:	strd	r2, [r1, #16]
    49ec:	b	4a04 <cd_native_type_finalise+0x358>
    49f0:	ldr	r1, [pc, #28]	; 4a14 <cd_native_type_finalise+0x368>
    49f4:	ldr	r0, [pc, #28]	; 4a18 <cd_native_type_finalise+0x36c>
    49f8:	bl	0 <coda_set_error>
    49fc:	mvn	r3, #0
    4a00:	b	4a08 <cd_native_type_finalise+0x35c>
    4a04:	mov	r3, #0
    4a08:	mov	r0, r3
    4a0c:	sub	sp, fp, #4
    4a10:	pop	{fp, pc}
    4a14:	.word	0x00000f60
    4a18:	.word	0xfffffe70
    4a1c:	.word	0x00000f74
    4a20:	.word	0x00000f7c
    4a24:	.word	0x00000f84
    4a28:	.word	0x00000f8c
    4a2c:	.word	0x00000f94
    4a30:	.word	0x00000f9c
    4a34:	.word	0x00000fa4
    4a38:	.word	0x00000fac
    4a3c:	.word	0x00000fb4
    4a40:	.word	0x00000fbc
    4a44:	.word	0x00000fc4
    4a48:	.word	0x00000fcc
    4a4c:	.word	0x00000fd4

00004a50 <cd_native_type_init>:
    4a50:	push	{fp}		; (str fp, [sp, #-4]!)
    4a54:	add	fp, sp, #0
    4a58:	sub	sp, sp, #12
    4a5c:	str	r0, [fp, #-8]
    4a60:	str	r1, [fp, #-12]
    4a64:	ldr	r3, [fp, #-8]
    4a68:	ldr	r3, [r3]
    4a6c:	mov	r2, #1
    4a70:	str	r2, [r3, #32]
    4a74:	ldr	r3, [fp, #-8]
    4a78:	ldr	r3, [r3]
    4a7c:	ldr	r2, [pc, #20]	; 4a98 <cd_native_type_init+0x48>
    4a80:	str	r2, [r3, #36]	; 0x24
    4a84:	mov	r3, #0
    4a88:	mov	r0, r3
    4a8c:	add	sp, fp, #0
    4a90:	pop	{fp}		; (ldr fp, [sp], #4)
    4a94:	bx	lr
    4a98:	.word	0x00000000

00004a9c <cd_mapping_init>:
    4a9c:	push	{r4, fp, lr}
    4aa0:	add	fp, sp, #8
    4aa4:	sub	sp, sp, #36	; 0x24
    4aa8:	str	r0, [fp, #-40]	; 0xffffffd8
    4aac:	str	r1, [fp, #-44]	; 0xffffffd4
    4ab0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ab4:	ldr	r3, [r3]
    4ab8:	ldr	r3, [r3]
    4abc:	mov	r2, r3
    4ac0:	ldr	r1, [pc, #608]	; 4d28 <cd_mapping_init+0x28c>
    4ac4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4ac8:	bl	fa4 <get_mandatory_attribute_value>
    4acc:	str	r0, [fp, #-16]
    4ad0:	ldr	r3, [fp, #-16]
    4ad4:	cmp	r3, #0
    4ad8:	bne	4ae4 <cd_mapping_init+0x48>
    4adc:	mvn	r3, #0
    4ae0:	b	4d1c <cd_mapping_init+0x280>
    4ae4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ae8:	ldr	r3, [r3]
    4aec:	ldr	r3, [r3]
    4af0:	mov	r2, r3
    4af4:	ldr	r1, [pc, #560]	; 4d2c <cd_mapping_init+0x290>
    4af8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4afc:	bl	fa4 <get_mandatory_attribute_value>
    4b00:	str	r0, [fp, #-20]	; 0xffffffec
    4b04:	ldr	r3, [fp, #-20]	; 0xffffffec
    4b08:	cmp	r3, #0
    4b0c:	bne	4b18 <cd_mapping_init+0x7c>
    4b10:	mvn	r3, #0
    4b14:	b	4d1c <cd_mapping_init+0x280>
    4b18:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4b1c:	ldr	r3, [r3]
    4b20:	ldr	r3, [r3, #396]	; 0x18c
    4b24:	ldr	r3, [r3]
    4b28:	cmp	r3, #20
    4b2c:	bne	4bbc <cd_mapping_init+0x120>
    4b30:	ldr	r0, [fp, #-20]	; 0xffffffec
    4b34:	bl	0 <strlen>
    4b38:	mov	r3, r0
    4b3c:	mov	r1, r3
    4b40:	sub	r2, fp, #28
    4b44:	mov	r3, #0
    4b48:	ldr	r0, [fp, #-20]	; 0xffffffec
    4b4c:	bl	0 <coda_ascii_parse_int64>
    4b50:	mov	r3, r0
    4b54:	cmp	r3, #0
    4b58:	bge	4b74 <cd_mapping_init+0xd8>
    4b5c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4b60:	ldr	r1, [pc, #456]	; 4d30 <cd_mapping_init+0x294>
    4b64:	ldr	r0, [pc, #456]	; 4d34 <cd_mapping_init+0x298>
    4b68:	bl	0 <coda_set_error>
    4b6c:	mvn	r3, #0
    4b70:	b	4d1c <cd_mapping_init+0x280>
    4b74:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4b78:	ldr	r3, [r3]
    4b7c:	ldr	r2, [pc, #436]	; 4d38 <cd_mapping_init+0x29c>
    4b80:	str	r2, [r3, #40]	; 0x28
    4b84:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4b88:	ldr	r4, [r3]
    4b8c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    4b90:	ldr	r0, [fp, #-16]
    4b94:	bl	0 <coda_ascii_integer_mapping_new>
    4b98:	mov	r3, r0
    4b9c:	str	r3, [r4, #8]
    4ba0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ba4:	ldr	r3, [r3]
    4ba8:	ldr	r3, [r3, #8]
    4bac:	cmp	r3, #0
    4bb0:	bne	4d18 <cd_mapping_init+0x27c>
    4bb4:	mvn	r3, #0
    4bb8:	b	4d1c <cd_mapping_init+0x280>
    4bbc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4bc0:	ldr	r3, [r3]
    4bc4:	ldr	r3, [r3, #396]	; 0x18c
    4bc8:	ldr	r3, [r3]
    4bcc:	cmp	r3, #17
    4bd0:	beq	4bec <cd_mapping_init+0x150>
    4bd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4bd8:	ldr	r3, [r3]
    4bdc:	ldr	r3, [r3, #396]	; 0x18c
    4be0:	ldr	r3, [r3]
    4be4:	cmp	r3, #38	; 0x26
    4be8:	bne	4d00 <cd_mapping_init+0x264>
    4bec:	ldr	r1, [pc, #328]	; 4d3c <cd_mapping_init+0x2a0>
    4bf0:	ldr	r0, [fp, #-20]	; 0xffffffec
    4bf4:	bl	0 <strcasecmp>
    4bf8:	mov	r3, r0
    4bfc:	cmp	r3, #0
    4c00:	bne	4c14 <cd_mapping_init+0x178>
    4c04:	bl	0 <coda_NaN>
    4c08:	vmov.f64	d7, d0
    4c0c:	vstr	d7, [fp, #-36]	; 0xffffffdc
    4c10:	b	4cb4 <cd_mapping_init+0x218>
    4c14:	ldr	r1, [pc, #292]	; 4d40 <cd_mapping_init+0x2a4>
    4c18:	ldr	r0, [fp, #-20]	; 0xffffffec
    4c1c:	bl	0 <strcasecmp>
    4c20:	mov	r3, r0
    4c24:	cmp	r3, #0
    4c28:	beq	4c44 <cd_mapping_init+0x1a8>
    4c2c:	ldr	r1, [pc, #272]	; 4d44 <cd_mapping_init+0x2a8>
    4c30:	ldr	r0, [fp, #-20]	; 0xffffffec
    4c34:	bl	0 <strcasecmp>
    4c38:	mov	r3, r0
    4c3c:	cmp	r3, #0
    4c40:	bne	4c54 <cd_mapping_init+0x1b8>
    4c44:	bl	0 <coda_PlusInf>
    4c48:	vmov.f64	d7, d0
    4c4c:	vstr	d7, [fp, #-36]	; 0xffffffdc
    4c50:	b	4cb4 <cd_mapping_init+0x218>
    4c54:	ldr	r1, [pc, #236]	; 4d48 <cd_mapping_init+0x2ac>
    4c58:	ldr	r0, [fp, #-20]	; 0xffffffec
    4c5c:	bl	0 <strcasecmp>
    4c60:	mov	r3, r0
    4c64:	cmp	r3, #0
    4c68:	bne	4c7c <cd_mapping_init+0x1e0>
    4c6c:	bl	0 <coda_MinInf>
    4c70:	vmov.f64	d7, d0
    4c74:	vstr	d7, [fp, #-36]	; 0xffffffdc
    4c78:	b	4cb4 <cd_mapping_init+0x218>
    4c7c:	sub	r3, fp, #36	; 0x24
    4c80:	mov	r2, r3
    4c84:	ldr	r1, [pc, #192]	; 4d4c <cd_mapping_init+0x2b0>
    4c88:	ldr	r0, [fp, #-20]	; 0xffffffec
    4c8c:	bl	0 <__isoc99_sscanf>
    4c90:	mov	r3, r0
    4c94:	cmp	r3, #1
    4c98:	beq	4cb4 <cd_mapping_init+0x218>
    4c9c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4ca0:	ldr	r1, [pc, #168]	; 4d50 <cd_mapping_init+0x2b4>
    4ca4:	ldr	r0, [pc, #136]	; 4d34 <cd_mapping_init+0x298>
    4ca8:	bl	0 <coda_set_error>
    4cac:	mvn	r3, #0
    4cb0:	b	4d1c <cd_mapping_init+0x280>
    4cb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4cb8:	ldr	r3, [r3]
    4cbc:	ldr	r2, [pc, #144]	; 4d54 <cd_mapping_init+0x2b8>
    4cc0:	str	r2, [r3, #40]	; 0x28
    4cc4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4cc8:	ldr	r4, [r3]
    4ccc:	vldr	d7, [fp, #-36]	; 0xffffffdc
    4cd0:	vmov.f64	d0, d7
    4cd4:	ldr	r0, [fp, #-16]
    4cd8:	bl	0 <coda_ascii_float_mapping_new>
    4cdc:	mov	r3, r0
    4ce0:	str	r3, [r4, #8]
    4ce4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ce8:	ldr	r3, [r3]
    4cec:	ldr	r3, [r3, #8]
    4cf0:	cmp	r3, #0
    4cf4:	bne	4d14 <cd_mapping_init+0x278>
    4cf8:	mvn	r3, #0
    4cfc:	b	4d1c <cd_mapping_init+0x280>
    4d00:	ldr	r3, [pc, #80]	; 4d58 <cd_mapping_init+0x2bc>
    4d04:	ldr	r2, [pc, #80]	; 4d5c <cd_mapping_init+0x2c0>
    4d08:	ldr	r1, [pc, #80]	; 4d60 <cd_mapping_init+0x2c4>
    4d0c:	ldr	r0, [pc, #80]	; 4d64 <cd_mapping_init+0x2c8>
    4d10:	bl	0 <__assert_fail>
    4d14:	nop			; (mov r0, r0)
    4d18:	mov	r3, #0
    4d1c:	mov	r0, r3
    4d20:	sub	sp, fp, #8
    4d24:	pop	{r4, fp, pc}
    4d28:	.word	0x00000fcc
    4d2c:	.word	0x00000fdc
    4d30:	.word	0x00000fe4
    4d34:	.word	0xfffffe70
    4d38:	.word	0x00000000
    4d3c:	.word	0x00001014
    4d40:	.word	0x00001018
    4d44:	.word	0x0000101c
    4d48:	.word	0x00001024
    4d4c:	.word	0x0000102c
    4d50:	.word	0x00001030
    4d54:	.word	0x00000000
    4d58:	.word	0x00002290
    4d5c:	.word	0x000007f8
    4d60:	.word	0x000009bc
    4d64:	.word	0x0000105c

00004d68 <cd_match_data_finalise>:
    4d68:	push	{fp, lr}
    4d6c:	add	fp, sp, #4
    4d70:	sub	sp, sp, #88	; 0x58
    4d74:	str	r0, [fp, #-80]	; 0xffffffb0
    4d78:	ldr	r3, [fp, #-80]	; 0xffffffb0
    4d7c:	ldr	r3, [r3]
    4d80:	ldr	r3, [r3, #8]
    4d84:	str	r3, [fp, #-8]
    4d88:	ldr	r3, [fp, #-80]	; 0xffffffb0
    4d8c:	ldr	r3, [r3]
    4d90:	ldr	r3, [r3, #12]
    4d94:	mov	r0, r3
    4d98:	bl	61c <escaped_string_length>
    4d9c:	str	r0, [fp, #-12]
    4da0:	ldr	r3, [fp, #-12]
    4da4:	cmp	r3, #0
    4da8:	bge	4dc0 <cd_match_data_finalise+0x58>
    4dac:	ldr	r1, [pc, #1464]	; 536c <cd_match_data_finalise+0x604>
    4db0:	ldr	r0, [pc, #1464]	; 5370 <cd_match_data_finalise+0x608>
    4db4:	bl	0 <coda_set_error>
    4db8:	mvn	r3, #0
    4dbc:	b	5360 <cd_match_data_finalise+0x5f8>
    4dc0:	ldr	r3, [fp, #-8]
    4dc4:	ldr	r3, [r3, #4]
    4dc8:	cmp	r3, #0
    4dcc:	bne	5124 <cd_match_data_finalise+0x3bc>
    4dd0:	ldr	r3, [fp, #-8]
    4dd4:	ldr	r3, [r3]
    4dd8:	cmp	r3, #0
    4ddc:	beq	4f60 <cd_match_data_finalise+0x1f8>
    4de0:	ldr	r3, [fp, #-12]
    4de4:	cmp	r3, #0
    4de8:	bne	4df4 <cd_match_data_finalise+0x8c>
    4dec:	mov	r3, #0
    4df0:	b	5360 <cd_match_data_finalise+0x5f8>
    4df4:	mov	r3, #0
    4df8:	str	r3, [sp, #4]
    4dfc:	mov	r3, #0
    4e00:	str	r3, [sp]
    4e04:	mov	r3, #0
    4e08:	mov	r2, #0
    4e0c:	mov	r1, #0
    4e10:	mov	r0, #36	; 0x24
    4e14:	bl	0 <coda_expression_new>
    4e18:	str	r0, [fp, #-16]
    4e1c:	ldr	r3, [fp, #-16]
    4e20:	cmp	r3, #0
    4e24:	bne	4e30 <cd_match_data_finalise+0xc8>
    4e28:	mvn	r3, #0
    4e2c:	b	5360 <cd_match_data_finalise+0x5f8>
    4e30:	mov	r3, #0
    4e34:	str	r3, [sp, #4]
    4e38:	mov	r3, #0
    4e3c:	str	r3, [sp]
    4e40:	mov	r3, #0
    4e44:	ldr	r2, [fp, #-16]
    4e48:	mov	r1, #0
    4e4c:	mov	r0, #75	; 0x4b
    4e50:	bl	0 <coda_expression_new>
    4e54:	str	r0, [fp, #-20]	; 0xffffffec
    4e58:	ldr	r3, [fp, #-20]	; 0xffffffec
    4e5c:	cmp	r3, #0
    4e60:	bne	4e6c <cd_match_data_finalise+0x104>
    4e64:	mvn	r3, #0
    4e68:	b	5360 <cd_match_data_finalise+0x5f8>
    4e6c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    4e70:	ldr	r3, [r3]
    4e74:	ldr	r3, [r3, #12]
    4e78:	mov	r0, r3
    4e7c:	bl	0 <strdup>
    4e80:	mov	r3, r0
    4e84:	str	r3, [fp, #-24]	; 0xffffffe8
    4e88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4e8c:	cmp	r3, #0
    4e90:	bne	4eb8 <cd_match_data_finalise+0x150>
    4e94:	ldr	r3, [pc, #1240]	; 5374 <cd_match_data_finalise+0x60c>
    4e98:	ldr	r2, [pc, #1240]	; 5378 <cd_match_data_finalise+0x610>
    4e9c:	ldr	r1, [pc, #1240]	; 537c <cd_match_data_finalise+0x614>
    4ea0:	mvn	r0, #0
    4ea4:	bl	0 <coda_set_error>
    4ea8:	ldr	r0, [fp, #-20]	; 0xffffffec
    4eac:	bl	0 <coda_expression_delete>
    4eb0:	mvn	r3, #0
    4eb4:	b	5360 <cd_match_data_finalise+0x5f8>
    4eb8:	mov	r3, #0
    4ebc:	str	r3, [sp, #4]
    4ec0:	mov	r3, #0
    4ec4:	str	r3, [sp]
    4ec8:	mov	r3, #0
    4ecc:	mov	r2, #0
    4ed0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4ed4:	mov	r0, #22
    4ed8:	bl	0 <coda_expression_new>
    4edc:	str	r0, [fp, #-28]	; 0xffffffe4
    4ee0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4ee4:	cmp	r3, #0
    4ee8:	bne	4efc <cd_match_data_finalise+0x194>
    4eec:	ldr	r0, [fp, #-20]	; 0xffffffec
    4ef0:	bl	0 <coda_expression_delete>
    4ef4:	mvn	r3, #0
    4ef8:	b	5360 <cd_match_data_finalise+0x5f8>
    4efc:	mov	r3, #0
    4f00:	str	r3, [sp, #4]
    4f04:	mov	r3, #0
    4f08:	str	r3, [sp]
    4f0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4f10:	ldr	r2, [fp, #-20]	; 0xffffffec
    4f14:	mov	r1, #0
    4f18:	mov	r0, #25
    4f1c:	bl	0 <coda_expression_new>
    4f20:	str	r0, [fp, #-32]	; 0xffffffe0
    4f24:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4f28:	cmp	r3, #0
    4f2c:	bne	4f38 <cd_match_data_finalise+0x1d0>
    4f30:	mvn	r3, #0
    4f34:	b	5360 <cd_match_data_finalise+0x5f8>
    4f38:	ldr	r1, [fp, #-32]	; 0xffffffe0
    4f3c:	ldr	r0, [fp, #-8]
    4f40:	bl	0 <coda_detection_rule_entry_set_expression>
    4f44:	mov	r3, r0
    4f48:	cmp	r3, #0
    4f4c:	beq	535c <cd_match_data_finalise+0x5f4>
    4f50:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4f54:	bl	0 <coda_expression_delete>
    4f58:	mvn	r3, #0
    4f5c:	b	5360 <cd_match_data_finalise+0x5f8>
    4f60:	ldr	r3, [fp, #-12]
    4f64:	cmp	r3, #0
    4f68:	bne	4f80 <cd_match_data_finalise+0x218>
    4f6c:	ldr	r1, [pc, #1036]	; 5380 <cd_match_data_finalise+0x618>
    4f70:	ldr	r0, [pc, #1016]	; 5370 <cd_match_data_finalise+0x608>
    4f74:	bl	0 <coda_set_error>
    4f78:	mvn	r3, #0
    4f7c:	b	5360 <cd_match_data_finalise+0x5f8>
    4f80:	mov	r3, #0
    4f84:	str	r3, [sp, #4]
    4f88:	mov	r3, #0
    4f8c:	str	r3, [sp]
    4f90:	mov	r3, #0
    4f94:	mov	r2, #0
    4f98:	mov	r1, #0
    4f9c:	mov	r0, #38	; 0x26
    4fa0:	bl	0 <coda_expression_new>
    4fa4:	str	r0, [fp, #-36]	; 0xffffffdc
    4fa8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    4fac:	cmp	r3, #0
    4fb0:	bne	4fbc <cd_match_data_finalise+0x254>
    4fb4:	mvn	r3, #0
    4fb8:	b	5360 <cd_match_data_finalise+0x5f8>
    4fbc:	ldr	r0, [pc, #960]	; 5384 <cd_match_data_finalise+0x61c>
    4fc0:	bl	0 <strdup>
    4fc4:	mov	r3, r0
    4fc8:	mov	r1, r3
    4fcc:	mov	r3, #0
    4fd0:	str	r3, [sp, #4]
    4fd4:	mov	r3, #0
    4fd8:	str	r3, [sp]
    4fdc:	mov	r3, #0
    4fe0:	mov	r2, #0
    4fe4:	mov	r0, #20
    4fe8:	bl	0 <coda_expression_new>
    4fec:	str	r0, [fp, #-40]	; 0xffffffd8
    4ff0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ff4:	cmp	r3, #0
    4ff8:	bne	500c <cd_match_data_finalise+0x2a4>
    4ffc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5000:	bl	0 <coda_expression_delete>
    5004:	mvn	r3, #0
    5008:	b	5360 <cd_match_data_finalise+0x5f8>
    500c:	mov	r3, #0
    5010:	str	r3, [sp, #4]
    5014:	mov	r3, #0
    5018:	str	r3, [sp]
    501c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5020:	ldr	r2, [fp, #-36]	; 0xffffffdc
    5024:	mov	r1, #0
    5028:	mov	r0, #16
    502c:	bl	0 <coda_expression_new>
    5030:	str	r0, [fp, #-28]	; 0xffffffe4
    5034:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5038:	cmp	r3, #0
    503c:	bne	5048 <cd_match_data_finalise+0x2e0>
    5040:	mvn	r3, #0
    5044:	b	5360 <cd_match_data_finalise+0x5f8>
    5048:	ldr	r3, [fp, #-80]	; 0xffffffb0
    504c:	ldr	r3, [r3]
    5050:	ldr	r3, [r3, #12]
    5054:	mov	r0, r3
    5058:	bl	1ac <regexp_match_string>
    505c:	str	r0, [fp, #-24]	; 0xffffffe8
    5060:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5064:	cmp	r3, #0
    5068:	bne	507c <cd_match_data_finalise+0x314>
    506c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5070:	bl	0 <coda_expression_delete>
    5074:	mvn	r3, #0
    5078:	b	5360 <cd_match_data_finalise+0x5f8>
    507c:	mov	r3, #0
    5080:	str	r3, [sp, #4]
    5084:	mov	r3, #0
    5088:	str	r3, [sp]
    508c:	mov	r3, #0
    5090:	mov	r2, #0
    5094:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5098:	mov	r0, #21
    509c:	bl	0 <coda_expression_new>
    50a0:	str	r0, [fp, #-20]	; 0xffffffec
    50a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    50a8:	cmp	r3, #0
    50ac:	bne	50c0 <cd_match_data_finalise+0x358>
    50b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    50b4:	bl	0 <coda_expression_delete>
    50b8:	mvn	r3, #0
    50bc:	b	5360 <cd_match_data_finalise+0x5f8>
    50c0:	mov	r3, #0
    50c4:	str	r3, [sp, #4]
    50c8:	mov	r3, #0
    50cc:	str	r3, [sp]
    50d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    50d4:	ldr	r2, [fp, #-20]	; 0xffffffec
    50d8:	mov	r1, #0
    50dc:	mov	r0, #71	; 0x47
    50e0:	bl	0 <coda_expression_new>
    50e4:	str	r0, [fp, #-32]	; 0xffffffe0
    50e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    50ec:	cmp	r3, #0
    50f0:	bne	50fc <cd_match_data_finalise+0x394>
    50f4:	mvn	r3, #0
    50f8:	b	5360 <cd_match_data_finalise+0x5f8>
    50fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    5100:	ldr	r0, [fp, #-8]
    5104:	bl	0 <coda_detection_rule_entry_set_expression>
    5108:	mov	r3, r0
    510c:	cmp	r3, #0
    5110:	beq	535c <cd_match_data_finalise+0x5f4>
    5114:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5118:	bl	0 <coda_expression_delete>
    511c:	mvn	r3, #0
    5120:	b	5360 <cd_match_data_finalise+0x5f8>
    5124:	ldr	r3, [fp, #-8]
    5128:	ldr	r3, [r3, #4]
    512c:	ldr	r3, [r3]
    5130:	cmp	r3, #20
    5134:	bne	535c <cd_match_data_finalise+0x5f4>
    5138:	ldr	r3, [fp, #-12]
    513c:	cmp	r3, #0
    5140:	bne	5158 <cd_match_data_finalise+0x3f0>
    5144:	ldr	r1, [pc, #564]	; 5380 <cd_match_data_finalise+0x618>
    5148:	ldr	r0, [pc, #544]	; 5370 <cd_match_data_finalise+0x608>
    514c:	bl	0 <coda_set_error>
    5150:	mvn	r3, #0
    5154:	b	5360 <cd_match_data_finalise+0x5f8>
    5158:	mov	r3, #0
    515c:	str	r3, [sp, #4]
    5160:	mov	r3, #0
    5164:	str	r3, [sp]
    5168:	mov	r3, #0
    516c:	mov	r2, #0
    5170:	mov	r1, #0
    5174:	mov	r0, #38	; 0x26
    5178:	bl	0 <coda_expression_new>
    517c:	str	r0, [fp, #-44]	; 0xffffffd4
    5180:	ldr	r3, [fp, #-44]	; 0xffffffd4
    5184:	cmp	r3, #0
    5188:	bne	5194 <cd_match_data_finalise+0x42c>
    518c:	mvn	r3, #0
    5190:	b	5360 <cd_match_data_finalise+0x5f8>
    5194:	ldr	r3, [fp, #-12]
    5198:	mov	r0, r3
    519c:	asr	r1, r0, #31
    51a0:	sub	r3, fp, #76	; 0x4c
    51a4:	mov	r2, r3
    51a8:	bl	0 <coda_str64>
    51ac:	sub	r3, fp, #76	; 0x4c
    51b0:	mov	r0, r3
    51b4:	bl	0 <strdup>
    51b8:	mov	r3, r0
    51bc:	str	r3, [fp, #-24]	; 0xffffffe8
    51c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    51c4:	cmp	r3, #0
    51c8:	bne	51f0 <cd_match_data_finalise+0x488>
    51cc:	ldr	r3, [pc, #436]	; 5388 <cd_match_data_finalise+0x620>
    51d0:	ldr	r2, [pc, #416]	; 5378 <cd_match_data_finalise+0x610>
    51d4:	ldr	r1, [pc, #416]	; 537c <cd_match_data_finalise+0x614>
    51d8:	mvn	r0, #0
    51dc:	bl	0 <coda_set_error>
    51e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    51e4:	bl	0 <coda_expression_delete>
    51e8:	mvn	r3, #0
    51ec:	b	5360 <cd_match_data_finalise+0x5f8>
    51f0:	mov	r3, #0
    51f4:	str	r3, [sp, #4]
    51f8:	mov	r3, #0
    51fc:	str	r3, [sp]
    5200:	mov	r3, #0
    5204:	mov	r2, #0
    5208:	ldr	r1, [fp, #-24]	; 0xffffffe8
    520c:	mov	r0, #20
    5210:	bl	0 <coda_expression_new>
    5214:	str	r0, [fp, #-48]	; 0xffffffd0
    5218:	ldr	r3, [fp, #-48]	; 0xffffffd0
    521c:	cmp	r3, #0
    5220:	bne	5234 <cd_match_data_finalise+0x4cc>
    5224:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5228:	bl	0 <coda_expression_delete>
    522c:	mvn	r3, #0
    5230:	b	5360 <cd_match_data_finalise+0x5f8>
    5234:	ldr	r3, [fp, #-8]
    5238:	ldr	r2, [r3, #4]
    523c:	mov	r3, #0
    5240:	str	r3, [sp, #4]
    5244:	ldr	r3, [fp, #-48]	; 0xffffffd0
    5248:	str	r3, [sp]
    524c:	mov	r3, r2
    5250:	ldr	r2, [fp, #-44]	; 0xffffffd4
    5254:	mov	r1, #0
    5258:	mov	r0, #16
    525c:	bl	0 <coda_expression_new>
    5260:	str	r0, [fp, #-20]	; 0xffffffec
    5264:	ldr	r3, [fp, #-8]
    5268:	mov	r2, #0
    526c:	str	r2, [r3, #4]
    5270:	ldr	r3, [fp, #-20]	; 0xffffffec
    5274:	cmp	r3, #0
    5278:	bne	5284 <cd_match_data_finalise+0x51c>
    527c:	mvn	r3, #0
    5280:	b	5360 <cd_match_data_finalise+0x5f8>
    5284:	ldr	r3, [fp, #-80]	; 0xffffffb0
    5288:	ldr	r3, [r3]
    528c:	ldr	r3, [r3, #12]
    5290:	mov	r0, r3
    5294:	bl	0 <strdup>
    5298:	mov	r3, r0
    529c:	str	r3, [fp, #-24]	; 0xffffffe8
    52a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    52a4:	cmp	r3, #0
    52a8:	bne	52d0 <cd_match_data_finalise+0x568>
    52ac:	ldr	r3, [pc, #216]	; 538c <cd_match_data_finalise+0x624>
    52b0:	ldr	r2, [pc, #192]	; 5378 <cd_match_data_finalise+0x610>
    52b4:	ldr	r1, [pc, #192]	; 537c <cd_match_data_finalise+0x614>
    52b8:	mvn	r0, #0
    52bc:	bl	0 <coda_set_error>
    52c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    52c4:	bl	0 <coda_expression_delete>
    52c8:	mvn	r3, #0
    52cc:	b	5360 <cd_match_data_finalise+0x5f8>
    52d0:	mov	r3, #0
    52d4:	str	r3, [sp, #4]
    52d8:	mov	r3, #0
    52dc:	str	r3, [sp]
    52e0:	mov	r3, #0
    52e4:	mov	r2, #0
    52e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    52ec:	mov	r0, #22
    52f0:	bl	0 <coda_expression_new>
    52f4:	str	r0, [fp, #-28]	; 0xffffffe4
    52f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    52fc:	cmp	r3, #0
    5300:	bne	5314 <cd_match_data_finalise+0x5ac>
    5304:	ldr	r0, [fp, #-20]	; 0xffffffec
    5308:	bl	0 <coda_expression_delete>
    530c:	mvn	r3, #0
    5310:	b	5360 <cd_match_data_finalise+0x5f8>
    5314:	mov	r3, #0
    5318:	str	r3, [sp, #4]
    531c:	mov	r3, #0
    5320:	str	r3, [sp]
    5324:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5328:	ldr	r2, [fp, #-20]	; 0xffffffec
    532c:	mov	r1, #0
    5330:	mov	r0, #25
    5334:	bl	0 <coda_expression_new>
    5338:	mov	r2, r0
    533c:	ldr	r3, [fp, #-8]
    5340:	str	r2, [r3, #4]
    5344:	ldr	r3, [fp, #-8]
    5348:	ldr	r3, [r3, #4]
    534c:	cmp	r3, #0
    5350:	bne	535c <cd_match_data_finalise+0x5f4>
    5354:	mvn	r3, #0
    5358:	b	5360 <cd_match_data_finalise+0x5f8>
    535c:	mov	r3, #0
    5360:	mov	r0, r3
    5364:	sub	sp, fp, #4
    5368:	pop	{fp, pc}
    536c:	.word	0x00000d44
    5370:	.word	0xfffffe70
    5374:	.word	0x0000082a
    5378:	.word	0x000009bc
    537c:	.word	0x00001060
    5380:	.word	0x00001094
    5384:	.word	0x000010c4
    5388:	.word	0x00000888
    538c:	.word	0x0000089c

00005390 <add_detection_rule_entry_for_path>:
    5390:	push	{fp, lr}
    5394:	add	fp, sp, #4
    5398:	sub	sp, sp, #96	; 0x60
    539c:	str	r0, [fp, #-80]	; 0xffffffb0
    53a0:	str	r1, [fp, #-84]	; 0xffffffac
    53a4:	str	r2, [fp, #-88]	; 0xffffffa8
    53a8:	mov	r3, #1
    53ac:	str	r3, [fp, #-12]
    53b0:	mov	r3, #0
    53b4:	str	r3, [fp, #-16]
    53b8:	mov	r3, #0
    53bc:	str	r3, [fp, #-20]	; 0xffffffec
    53c0:	ldr	r3, [fp, #-84]	; 0xffffffac
    53c4:	cmp	r3, #0
    53c8:	bne	53e0 <add_detection_rule_entry_for_path+0x50>
    53cc:	ldr	r3, [pc, #1544]	; 59dc <add_detection_rule_entry_for_path+0x64c>
    53d0:	ldr	r2, [pc, #1544]	; 59e0 <add_detection_rule_entry_for_path+0x650>
    53d4:	ldr	r1, [pc, #1544]	; 59e4 <add_detection_rule_entry_for_path+0x654>
    53d8:	ldr	r0, [pc, #1544]	; 59e8 <add_detection_rule_entry_for_path+0x658>
    53dc:	bl	0 <__assert_fail>
    53e0:	ldr	r3, [fp, #-88]	; 0xffffffa8
    53e4:	mov	r2, #0
    53e8:	str	r2, [r3]
    53ec:	ldr	r0, [fp, #-84]	; 0xffffffac
    53f0:	bl	0 <strdup>
    53f4:	mov	r3, r0
    53f8:	str	r3, [fp, #-32]	; 0xffffffe0
    53fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5400:	cmp	r3, #0
    5404:	bne	5424 <add_detection_rule_entry_for_path+0x94>
    5408:	ldr	r3, [pc, #1500]	; 59ec <add_detection_rule_entry_for_path+0x65c>
    540c:	ldr	r2, [pc, #1488]	; 59e4 <add_detection_rule_entry_for_path+0x654>
    5410:	ldr	r1, [pc, #1496]	; 59f0 <add_detection_rule_entry_for_path+0x660>
    5414:	mvn	r0, #0
    5418:	bl	0 <coda_set_error>
    541c:	mvn	r3, #0
    5420:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    5424:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5428:	str	r3, [fp, #-24]	; 0xffffffe8
    542c:	ldr	r0, [fp, #-84]	; 0xffffffac
    5430:	bl	0 <strlen>
    5434:	mov	r3, r0
    5438:	add	r3, r3, #6
    543c:	mov	r0, r3
    5440:	bl	0 <malloc>
    5444:	mov	r3, r0
    5448:	str	r3, [fp, #-36]	; 0xffffffdc
    544c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    5450:	cmp	r3, #0
    5454:	bne	5474 <add_detection_rule_entry_for_path+0xe4>
    5458:	ldr	r3, [pc, #1428]	; 59f4 <add_detection_rule_entry_for_path+0x664>
    545c:	ldr	r2, [pc, #1408]	; 59e4 <add_detection_rule_entry_for_path+0x654>
    5460:	ldr	r1, [pc, #1416]	; 59f0 <add_detection_rule_entry_for_path+0x660>
    5464:	mvn	r0, #0
    5468:	bl	0 <coda_set_error>
    546c:	mvn	r3, #0
    5470:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    5474:	ldr	r3, [fp, #-36]	; 0xffffffdc
    5478:	mov	r2, #0
    547c:	strb	r2, [r3]
    5480:	ldr	r3, [fp, #-36]	; 0xffffffdc
    5484:	str	r3, [fp, #-28]	; 0xffffffe4
    5488:	ldr	r3, [fp, #-24]	; 0xffffffe8
    548c:	ldrb	r3, [r3]
    5490:	cmp	r3, #47	; 0x2f
    5494:	bne	54c0 <add_detection_rule_entry_for_path+0x130>
    5498:	ldr	r3, [fp, #-24]	; 0xffffffe8
    549c:	ldrb	r2, [r3]
    54a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    54a4:	strb	r2, [r3]
    54a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    54ac:	add	r3, r3, #1
    54b0:	str	r3, [fp, #-28]	; 0xffffffe4
    54b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    54b8:	add	r3, r3, #1
    54bc:	str	r3, [fp, #-24]	; 0xffffffe8
    54c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    54c4:	ldrb	r3, [r3]
    54c8:	cmp	r3, #64	; 0x40
    54cc:	bne	59ac <add_detection_rule_entry_for_path+0x61c>
    54d0:	mov	r3, #1
    54d4:	str	r3, [fp, #-20]	; 0xffffffec
    54d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    54dc:	ldrb	r2, [r3]
    54e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    54e4:	strb	r2, [r3]
    54e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    54ec:	add	r3, r3, #1
    54f0:	str	r3, [fp, #-28]	; 0xffffffe4
    54f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    54f8:	add	r3, r3, #1
    54fc:	str	r3, [fp, #-24]	; 0xffffffe8
    5500:	b	59ac <add_detection_rule_entry_for_path+0x61c>
    5504:	ldr	r3, [fp, #-20]	; 0xffffffec
    5508:	str	r3, [fp, #-40]	; 0xffffffd8
    550c:	ldr	r3, [fp, #-12]
    5510:	cmp	r3, #0
    5514:	bne	5548 <add_detection_rule_entry_for_path+0x1b8>
    5518:	ldr	r3, [fp, #-40]	; 0xffffffd8
    551c:	cmp	r3, #0
    5520:	beq	552c <add_detection_rule_entry_for_path+0x19c>
    5524:	mov	r2, #64	; 0x40
    5528:	b	5530 <add_detection_rule_entry_for_path+0x1a0>
    552c:	mov	r2, #47	; 0x2f
    5530:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5534:	strb	r2, [r3]
    5538:	ldr	r3, [fp, #-28]	; 0xffffffe4
    553c:	add	r3, r3, #1
    5540:	str	r3, [fp, #-28]	; 0xffffffe4
    5544:	b	5550 <add_detection_rule_entry_for_path+0x1c0>
    5548:	mov	r3, #0
    554c:	str	r3, [fp, #-12]
    5550:	mov	r3, #0
    5554:	str	r3, [fp, #-8]
    5558:	ldr	r3, [fp, #-24]	; 0xffffffe8
    555c:	ldrb	r3, [r3]
    5560:	cmp	r3, #123	; 0x7b
    5564:	bne	55f8 <add_detection_rule_entry_for_path+0x268>
    5568:	ldr	r3, [fp, #-24]	; 0xffffffe8
    556c:	add	r3, r3, #1
    5570:	str	r3, [fp, #-24]	; 0xffffffe8
    5574:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5578:	str	r3, [fp, #-8]
    557c:	b	55d0 <add_detection_rule_entry_for_path+0x240>
    5580:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5584:	ldrb	r3, [r3]
    5588:	cmp	r3, #0
    558c:	bne	55c4 <add_detection_rule_entry_for_path+0x234>
    5590:	ldr	r3, [fp, #-80]	; 0xffffffb0
    5594:	ldr	r3, [r3, #8]
    5598:	ldr	r3, [r3, #8]
    559c:	mov	r2, r3
    55a0:	ldr	r1, [pc, #1104]	; 59f8 <add_detection_rule_entry_for_path+0x668>
    55a4:	mvn	r0, #99	; 0x63
    55a8:	bl	0 <coda_set_error>
    55ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
    55b0:	bl	0 <free>
    55b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    55b8:	bl	0 <free>
    55bc:	mvn	r3, #0
    55c0:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    55c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    55c8:	add	r3, r3, #1
    55cc:	str	r3, [fp, #-24]	; 0xffffffe8
    55d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    55d4:	ldrb	r3, [r3]
    55d8:	cmp	r3, #125	; 0x7d
    55dc:	bne	5580 <add_detection_rule_entry_for_path+0x1f0>
    55e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    55e4:	mov	r2, #0
    55e8:	strb	r2, [r3]
    55ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    55f0:	add	r3, r3, #1
    55f4:	str	r3, [fp, #-24]	; 0xffffffe8
    55f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    55fc:	str	r3, [fp, #-44]	; 0xffffffd4
    5600:	b	5610 <add_detection_rule_entry_for_path+0x280>
    5604:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5608:	add	r3, r3, #1
    560c:	str	r3, [fp, #-24]	; 0xffffffe8
    5610:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5614:	ldrb	r3, [r3]
    5618:	cmp	r3, #47	; 0x2f
    561c:	beq	5640 <add_detection_rule_entry_for_path+0x2b0>
    5620:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5624:	ldrb	r3, [r3]
    5628:	cmp	r3, #64	; 0x40
    562c:	beq	5640 <add_detection_rule_entry_for_path+0x2b0>
    5630:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5634:	ldrb	r3, [r3]
    5638:	cmp	r3, #0
    563c:	bne	5604 <add_detection_rule_entry_for_path+0x274>
    5640:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5644:	ldrb	r3, [r3]
    5648:	cmp	r3, #64	; 0x40
    564c:	moveq	r3, #1
    5650:	movne	r3, #0
    5654:	uxtb	r3, r3
    5658:	str	r3, [fp, #-20]	; 0xffffffec
    565c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5660:	ldrb	r3, [r3]
    5664:	cmp	r3, #0
    5668:	moveq	r3, #1
    566c:	movne	r3, #0
    5670:	uxtb	r3, r3
    5674:	str	r3, [fp, #-16]
    5678:	ldr	r3, [fp, #-24]	; 0xffffffe8
    567c:	mov	r2, #0
    5680:	strb	r2, [r3]
    5684:	mov	r1, #0
    5688:	ldr	r0, [fp, #-44]	; 0xffffffd4
    568c:	bl	0 <coda_identifier_from_name>
    5690:	str	r0, [fp, #-48]	; 0xffffffd0
    5694:	ldr	r3, [fp, #-48]	; 0xffffffd0
    5698:	cmp	r3, #0
    569c:	bne	56b8 <add_detection_rule_entry_for_path+0x328>
    56a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    56a4:	bl	0 <free>
    56a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    56ac:	bl	0 <free>
    56b0:	mvn	r3, #0
    56b4:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    56b8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    56bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    56c0:	bl	0 <strcpy>
    56c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    56c8:	bl	0 <strlen>
    56cc:	mov	r2, r0
    56d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    56d4:	add	r3, r3, r2
    56d8:	str	r3, [fp, #-28]	; 0xffffffe4
    56dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    56e0:	bl	0 <free>
    56e4:	ldr	r3, [fp, #-8]
    56e8:	cmp	r3, #0
    56ec:	beq	5954 <add_detection_rule_entry_for_path+0x5c4>
    56f0:	mov	r3, #0
    56f4:	str	r3, [sp, #4]
    56f8:	mov	r3, #0
    56fc:	str	r3, [sp]
    5700:	mov	r3, #0
    5704:	mov	r2, #0
    5708:	mov	r1, #0
    570c:	mov	r0, #36	; 0x24
    5710:	bl	0 <coda_expression_new>
    5714:	str	r0, [fp, #-52]	; 0xffffffcc
    5718:	ldr	r3, [fp, #-52]	; 0xffffffcc
    571c:	cmp	r3, #0
    5720:	bne	573c <add_detection_rule_entry_for_path+0x3ac>
    5724:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5728:	bl	0 <free>
    572c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5730:	bl	0 <free>
    5734:	mvn	r3, #0
    5738:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    573c:	mov	r3, #0
    5740:	str	r3, [sp, #4]
    5744:	mov	r3, #0
    5748:	str	r3, [sp]
    574c:	mov	r3, #0
    5750:	ldr	r2, [fp, #-52]	; 0xffffffcc
    5754:	mov	r1, #0
    5758:	mov	r0, #75	; 0x4b
    575c:	bl	0 <coda_expression_new>
    5760:	str	r0, [fp, #-56]	; 0xffffffc8
    5764:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5768:	cmp	r3, #0
    576c:	bne	5788 <add_detection_rule_entry_for_path+0x3f8>
    5770:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5774:	bl	0 <free>
    5778:	ldr	r0, [fp, #-32]	; 0xffffffe0
    577c:	bl	0 <free>
    5780:	mvn	r3, #0
    5784:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    5788:	ldr	r0, [fp, #-8]
    578c:	bl	0 <strdup>
    5790:	mov	r3, r0
    5794:	str	r3, [fp, #-60]	; 0xffffffc4
    5798:	ldr	r3, [fp, #-60]	; 0xffffffc4
    579c:	cmp	r3, #0
    57a0:	bne	57d8 <add_detection_rule_entry_for_path+0x448>
    57a4:	ldr	r3, [pc, #592]	; 59fc <add_detection_rule_entry_for_path+0x66c>
    57a8:	ldr	r2, [pc, #564]	; 59e4 <add_detection_rule_entry_for_path+0x654>
    57ac:	ldr	r1, [pc, #572]	; 59f0 <add_detection_rule_entry_for_path+0x660>
    57b0:	mvn	r0, #0
    57b4:	bl	0 <coda_set_error>
    57b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    57bc:	bl	0 <coda_expression_delete>
    57c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    57c4:	bl	0 <free>
    57c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    57cc:	bl	0 <free>
    57d0:	mvn	r3, #0
    57d4:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    57d8:	mov	r3, #0
    57dc:	str	r3, [sp, #4]
    57e0:	mov	r3, #0
    57e4:	str	r3, [sp]
    57e8:	mov	r3, #0
    57ec:	mov	r2, #0
    57f0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    57f4:	mov	r0, #22
    57f8:	bl	0 <coda_expression_new>
    57fc:	str	r0, [fp, #-64]	; 0xffffffc0
    5800:	ldr	r3, [fp, #-64]	; 0xffffffc0
    5804:	cmp	r3, #0
    5808:	bne	582c <add_detection_rule_entry_for_path+0x49c>
    580c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5810:	bl	0 <coda_expression_delete>
    5814:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5818:	bl	0 <free>
    581c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5820:	bl	0 <free>
    5824:	mvn	r3, #0
    5828:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    582c:	mov	r3, #0
    5830:	str	r3, [sp, #4]
    5834:	mov	r3, #0
    5838:	str	r3, [sp]
    583c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    5840:	ldr	r2, [fp, #-56]	; 0xffffffc8
    5844:	mov	r1, #0
    5848:	mov	r0, #25
    584c:	bl	0 <coda_expression_new>
    5850:	str	r0, [fp, #-68]	; 0xffffffbc
    5854:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5858:	cmp	r3, #0
    585c:	bne	5878 <add_detection_rule_entry_for_path+0x4e8>
    5860:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5864:	bl	0 <free>
    5868:	ldr	r0, [fp, #-32]	; 0xffffffe0
    586c:	bl	0 <free>
    5870:	mvn	r3, #0
    5874:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    5878:	ldr	r3, [fp, #-28]	; 0xffffffe4
    587c:	ldr	r2, [pc, #380]	; 5a00 <add_detection_rule_entry_for_path+0x670>
    5880:	ldr	r0, [r2]
    5884:	str	r0, [r3]
    5888:	ldrh	r1, [r2, #4]
    588c:	ldrb	r2, [r2, #6]
    5890:	strh	r1, [r3, #4]
    5894:	strb	r2, [r3, #6]
    5898:	ldr	r0, [fp, #-36]	; 0xffffffdc
    589c:	bl	0 <coda_detection_rule_entry_new>
    58a0:	str	r0, [fp, #-72]	; 0xffffffb8
    58a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    58a8:	mov	r2, #0
    58ac:	strb	r2, [r3]
    58b0:	ldr	r3, [fp, #-72]	; 0xffffffb8
    58b4:	cmp	r3, #0
    58b8:	bne	58dc <add_detection_rule_entry_for_path+0x54c>
    58bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
    58c0:	bl	0 <coda_expression_delete>
    58c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    58c8:	bl	0 <free>
    58cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    58d0:	bl	0 <free>
    58d4:	mvn	r3, #0
    58d8:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    58dc:	ldr	r1, [fp, #-68]	; 0xffffffbc
    58e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
    58e4:	bl	0 <coda_detection_rule_entry_set_expression>
    58e8:	mov	r3, r0
    58ec:	cmp	r3, #0
    58f0:	beq	591c <add_detection_rule_entry_for_path+0x58c>
    58f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
    58f8:	bl	0 <coda_detection_rule_entry_delete>
    58fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
    5900:	bl	0 <coda_expression_delete>
    5904:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5908:	bl	0 <free>
    590c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5910:	bl	0 <free>
    5914:	mvn	r3, #0
    5918:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    591c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    5920:	ldr	r0, [fp, #-80]	; 0xffffffb0
    5924:	bl	0 <coda_detection_rule_add_entry>
    5928:	mov	r3, r0
    592c:	cmp	r3, #0
    5930:	beq	5954 <add_detection_rule_entry_for_path+0x5c4>
    5934:	ldr	r0, [fp, #-72]	; 0xffffffb8
    5938:	bl	0 <coda_detection_rule_entry_delete>
    593c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5940:	bl	0 <free>
    5944:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5948:	bl	0 <free>
    594c:	mvn	r3, #0
    5950:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    5954:	ldr	r3, [fp, #-16]
    5958:	cmp	r3, #0
    595c:	bne	59ac <add_detection_rule_entry_for_path+0x61c>
    5960:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5964:	cmp	r3, #0
    5968:	beq	59a0 <add_detection_rule_entry_for_path+0x610>
    596c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    5970:	ldr	r3, [r3, #8]
    5974:	ldr	r3, [r3, #8]
    5978:	mov	r2, r3
    597c:	ldr	r1, [pc, #128]	; 5a04 <add_detection_rule_entry_for_path+0x674>
    5980:	mvn	r0, #99	; 0x63
    5984:	bl	0 <coda_set_error>
    5988:	ldr	r0, [fp, #-36]	; 0xffffffdc
    598c:	bl	0 <free>
    5990:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5994:	bl	0 <free>
    5998:	mvn	r3, #0
    599c:	b	59d0 <add_detection_rule_entry_for_path+0x640>
    59a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    59a4:	add	r3, r3, #1
    59a8:	str	r3, [fp, #-24]	; 0xffffffe8
    59ac:	ldr	r3, [fp, #-16]
    59b0:	cmp	r3, #0
    59b4:	beq	5504 <add_detection_rule_entry_for_path+0x174>
    59b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    59bc:	bl	0 <free>
    59c0:	ldr	r3, [fp, #-88]	; 0xffffffa8
    59c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    59c8:	str	r2, [r3]
    59cc:	mov	r3, #0
    59d0:	mov	r0, r3
    59d4:	sub	sp, fp, #4
    59d8:	pop	{fp, pc}
    59dc:	.word	0x000022a0
    59e0:	.word	0x000008bc
    59e4:	.word	0x000009bc
    59e8:	.word	0x000010cc
    59ec:	.word	0x000008c5
    59f0:	.word	0x00001060
    59f4:	.word	0x000008d1
    59f8:	.word	0x000010e0
    59fc:	.word	0x00000937
    5a00:	.word	0x00001114
    5a04:	.word	0x0000111c

00005a08 <cd_match_data_init>:
    5a08:	push	{r4, fp, lr}
    5a0c:	add	fp, sp, #8
    5a10:	sub	sp, sp, #36	; 0x24
    5a14:	str	r0, [fp, #-32]	; 0xffffffe0
    5a18:	str	r1, [fp, #-36]	; 0xffffffdc
    5a1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5a20:	ldr	r3, [r3]
    5a24:	ldr	r2, [pc, #504]	; 5c24 <cd_match_data_init+0x21c>
    5a28:	str	r2, [r3, #40]	; 0x28
    5a2c:	ldr	r1, [pc, #500]	; 5c28 <cd_match_data_init+0x220>
    5a30:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5a34:	bl	f34 <get_attribute_value>
    5a38:	str	r0, [fp, #-16]
    5a3c:	ldr	r1, [pc, #488]	; 5c2c <cd_match_data_init+0x224>
    5a40:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5a44:	bl	f34 <get_attribute_value>
    5a48:	str	r0, [fp, #-20]	; 0xffffffec
    5a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
    5a50:	cmp	r3, #0
    5a54:	bne	5a8c <cd_match_data_init+0x84>
    5a58:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5a5c:	ldr	r4, [r3]
    5a60:	mov	r0, #0
    5a64:	bl	0 <coda_detection_rule_entry_new>
    5a68:	mov	r3, r0
    5a6c:	str	r3, [r4, #8]
    5a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5a74:	ldr	r3, [r3]
    5a78:	ldr	r3, [r3, #8]
    5a7c:	cmp	r3, #0
    5a80:	bne	5a8c <cd_match_data_init+0x84>
    5a84:	mvn	r3, #0
    5a88:	b	5c18 <cd_match_data_init+0x210>
    5a8c:	ldr	r3, [fp, #-16]
    5a90:	cmp	r3, #0
    5a94:	beq	5b70 <cd_match_data_init+0x168>
    5a98:	ldr	r3, [fp, #-20]	; 0xffffffec
    5a9c:	cmp	r3, #0
    5aa0:	beq	5ab8 <cd_match_data_init+0xb0>
    5aa4:	ldr	r1, [pc, #388]	; 5c30 <cd_match_data_init+0x228>
    5aa8:	ldr	r0, [pc, #388]	; 5c34 <cd_match_data_init+0x22c>
    5aac:	bl	0 <coda_set_error>
    5ab0:	mvn	r3, #0
    5ab4:	b	5c18 <cd_match_data_init+0x210>
    5ab8:	ldr	r0, [fp, #-16]
    5abc:	bl	0 <strdup>
    5ac0:	mov	r3, r0
    5ac4:	str	r3, [fp, #-28]	; 0xffffffe4
    5ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5acc:	cmp	r3, #0
    5ad0:	bne	5af0 <cd_match_data_init+0xe8>
    5ad4:	ldr	r3, [pc, #348]	; 5c38 <cd_match_data_init+0x230>
    5ad8:	ldr	r2, [pc, #348]	; 5c3c <cd_match_data_init+0x234>
    5adc:	ldr	r1, [pc, #348]	; 5c40 <cd_match_data_init+0x238>
    5ae0:	mvn	r0, #0
    5ae4:	bl	0 <coda_set_error>
    5ae8:	mvn	r3, #0
    5aec:	b	5c18 <cd_match_data_init+0x210>
    5af0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5af4:	mov	r3, #0
    5af8:	str	r3, [sp, #4]
    5afc:	mov	r3, #0
    5b00:	str	r3, [sp]
    5b04:	mov	r3, #0
    5b08:	mov	r2, #0
    5b0c:	mov	r0, #20
    5b10:	bl	0 <coda_expression_new>
    5b14:	str	r0, [fp, #-24]	; 0xffffffe8
    5b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5b1c:	cmp	r3, #0
    5b20:	bne	5b3c <cd_match_data_init+0x134>
    5b24:	ldr	r2, [fp, #-16]
    5b28:	ldr	r1, [pc, #276]	; 5c44 <cd_match_data_init+0x23c>
    5b2c:	ldr	r0, [pc, #256]	; 5c34 <cd_match_data_init+0x22c>
    5b30:	bl	0 <coda_set_error>
    5b34:	mvn	r3, #0
    5b38:	b	5c18 <cd_match_data_init+0x210>
    5b3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5b40:	ldr	r3, [r3]
    5b44:	ldr	r3, [r3, #8]
    5b48:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5b4c:	mov	r0, r3
    5b50:	bl	0 <coda_detection_rule_entry_set_expression>
    5b54:	mov	r3, r0
    5b58:	cmp	r3, #0
    5b5c:	beq	5bf4 <cd_match_data_init+0x1ec>
    5b60:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5b64:	bl	0 <coda_expression_delete>
    5b68:	mvn	r3, #0
    5b6c:	b	5c18 <cd_match_data_init+0x210>
    5b70:	ldr	r3, [fp, #-20]	; 0xffffffec
    5b74:	cmp	r3, #0
    5b78:	beq	5bf4 <cd_match_data_init+0x1ec>
    5b7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5b80:	ldr	r3, [r3]
    5b84:	ldr	r3, [r3, #396]	; 0x18c
    5b88:	ldr	r3, [r3, #8]
    5b8c:	sub	r2, fp, #28
    5b90:	ldr	r1, [fp, #-20]	; 0xffffffec
    5b94:	mov	r0, r3
    5b98:	bl	5390 <add_detection_rule_entry_for_path>
    5b9c:	mov	r3, r0
    5ba0:	cmp	r3, #0
    5ba4:	beq	5bb0 <cd_match_data_init+0x1a8>
    5ba8:	mvn	r3, #0
    5bac:	b	5c18 <cd_match_data_init+0x210>
    5bb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5bb4:	ldr	r4, [r3]
    5bb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5bbc:	mov	r0, r3
    5bc0:	bl	0 <coda_detection_rule_entry_new>
    5bc4:	mov	r3, r0
    5bc8:	str	r3, [r4, #8]
    5bcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5bd0:	mov	r0, r3
    5bd4:	bl	0 <free>
    5bd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5bdc:	ldr	r3, [r3]
    5be0:	ldr	r3, [r3, #8]
    5be4:	cmp	r3, #0
    5be8:	bne	5bf4 <cd_match_data_init+0x1ec>
    5bec:	mvn	r3, #0
    5bf0:	b	5c18 <cd_match_data_init+0x210>
    5bf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5bf8:	ldr	r3, [r3]
    5bfc:	mov	r2, #1
    5c00:	str	r2, [r3, #32]
    5c04:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5c08:	ldr	r3, [r3]
    5c0c:	ldr	r2, [pc, #52]	; 5c48 <cd_match_data_init+0x240>
    5c10:	str	r2, [r3, #36]	; 0x24
    5c14:	mov	r3, #0
    5c18:	mov	r0, r3
    5c1c:	sub	sp, fp, #8
    5c20:	pop	{r4, fp, pc}
    5c24:	.word	0x00000000
    5c28:	.word	0x00000e9c
    5c2c:	.word	0x00001174
    5c30:	.word	0x0000117c
    5c34:	.word	0xfffffe70
    5c38:	.word	0x0000099b
    5c3c:	.word	0x000009bc
    5c40:	.word	0x00001060
    5c44:	.word	0x000011bc
    5c48:	.word	0x00000000

00005c4c <cd_match_expression_finalise>:
    5c4c:	push	{r4, fp, lr}
    5c50:	add	fp, sp, #8
    5c54:	sub	sp, sp, #20
    5c58:	str	r0, [fp, #-24]	; 0xffffffe8
    5c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5c60:	ldr	r3, [r3]
    5c64:	ldr	r3, [r3, #12]
    5c68:	cmp	r3, #0
    5c6c:	beq	5cd0 <cd_match_expression_finalise+0x84>
    5c70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5c74:	ldr	r3, [r3]
    5c78:	ldr	r4, [r3, #12]
    5c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5c80:	ldr	r3, [r3]
    5c84:	ldr	r3, [r3, #12]
    5c88:	mov	r0, r3
    5c8c:	bl	0 <strlen>
    5c90:	mov	r3, r0
    5c94:	mov	r1, r3
    5c98:	mov	r0, r4
    5c9c:	bl	c8 <is_whitespace>
    5ca0:	mov	r3, r0
    5ca4:	cmp	r3, #0
    5ca8:	beq	5cd0 <cd_match_expression_finalise+0x84>
    5cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5cb0:	ldr	r3, [r3]
    5cb4:	ldr	r3, [r3, #12]
    5cb8:	mov	r0, r3
    5cbc:	bl	0 <free>
    5cc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5cc4:	ldr	r3, [r3]
    5cc8:	mov	r2, #0
    5ccc:	str	r2, [r3, #12]
    5cd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5cd4:	ldr	r3, [r3]
    5cd8:	ldr	r3, [r3, #12]
    5cdc:	cmp	r3, #0
    5ce0:	bne	5cf8 <cd_match_expression_finalise+0xac>
    5ce4:	ldr	r1, [pc, #204]	; 5db8 <cd_match_expression_finalise+0x16c>
    5ce8:	ldr	r0, [pc, #204]	; 5dbc <cd_match_expression_finalise+0x170>
    5cec:	bl	0 <coda_set_error>
    5cf0:	mvn	r3, #0
    5cf4:	b	5dac <cd_match_expression_finalise+0x160>
    5cf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5cfc:	ldr	r3, [r3]
    5d00:	ldr	r3, [r3, #12]
    5d04:	sub	r2, fp, #20
    5d08:	mov	r1, r2
    5d0c:	mov	r0, r3
    5d10:	bl	0 <coda_expression_from_string>
    5d14:	mov	r3, r0
    5d18:	cmp	r3, #0
    5d1c:	beq	5d28 <cd_match_expression_finalise+0xdc>
    5d20:	mvn	r3, #0
    5d24:	b	5dac <cd_match_expression_finalise+0x160>
    5d28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5d2c:	ldr	r3, [r3]
    5d30:	ldr	r3, [r3, #12]
    5d34:	mov	r0, r3
    5d38:	bl	0 <free>
    5d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5d40:	ldr	r3, [r3]
    5d44:	mov	r2, #0
    5d48:	str	r2, [r3, #12]
    5d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5d50:	ldr	r3, [r3]
    5d54:	ldr	r3, [r3, #8]
    5d58:	ldr	r2, [fp, #-20]	; 0xffffffec
    5d5c:	str	r2, [r3, #4]
    5d60:	ldr	r3, [fp, #-20]	; 0xffffffec
    5d64:	sub	r2, fp, #16
    5d68:	mov	r1, r2
    5d6c:	mov	r0, r3
    5d70:	bl	0 <coda_expression_get_type>
    5d74:	mov	r3, r0
    5d78:	cmp	r3, #0
    5d7c:	beq	5d88 <cd_match_expression_finalise+0x13c>
    5d80:	mvn	r3, #0
    5d84:	b	5dac <cd_match_expression_finalise+0x160>
    5d88:	ldr	r3, [fp, #-16]
    5d8c:	cmp	r3, #0
    5d90:	beq	5da8 <cd_match_expression_finalise+0x15c>
    5d94:	ldr	r1, [pc, #36]	; 5dc0 <cd_match_expression_finalise+0x174>
    5d98:	ldr	r0, [pc, #28]	; 5dbc <cd_match_expression_finalise+0x170>
    5d9c:	bl	0 <coda_set_error>
    5da0:	mvn	r3, #0
    5da4:	b	5dac <cd_match_expression_finalise+0x160>
    5da8:	mov	r3, #0
    5dac:	mov	r0, r3
    5db0:	sub	sp, fp, #8
    5db4:	pop	{r4, fp, pc}
    5db8:	.word	0x000011e4
    5dbc:	.word	0xfffffe70
    5dc0:	.word	0x00000bfc

00005dc4 <cd_match_expression_init>:
    5dc4:	push	{r4, fp, lr}
    5dc8:	add	fp, sp, #8
    5dcc:	sub	sp, sp, #20
    5dd0:	str	r0, [fp, #-24]	; 0xffffffe8
    5dd4:	str	r1, [fp, #-28]	; 0xffffffe4
    5dd8:	ldr	r1, [pc, #124]	; 5e5c <cd_match_expression_init+0x98>
    5ddc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5de0:	bl	f34 <get_attribute_value>
    5de4:	str	r0, [fp, #-16]
    5de8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5dec:	ldr	r3, [r3]
    5df0:	ldr	r2, [pc, #104]	; 5e60 <cd_match_expression_init+0x9c>
    5df4:	str	r2, [r3, #40]	; 0x28
    5df8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5dfc:	ldr	r4, [r3]
    5e00:	ldr	r0, [fp, #-16]
    5e04:	bl	0 <coda_detection_rule_entry_new>
    5e08:	mov	r3, r0
    5e0c:	str	r3, [r4, #8]
    5e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5e14:	ldr	r3, [r3]
    5e18:	ldr	r3, [r3, #8]
    5e1c:	cmp	r3, #0
    5e20:	bne	5e2c <cd_match_expression_init+0x68>
    5e24:	mvn	r3, #0
    5e28:	b	5e50 <cd_match_expression_init+0x8c>
    5e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5e30:	ldr	r3, [r3]
    5e34:	mov	r2, #1
    5e38:	str	r2, [r3, #32]
    5e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5e40:	ldr	r3, [r3]
    5e44:	ldr	r2, [pc, #24]	; 5e64 <cd_match_expression_init+0xa0>
    5e48:	str	r2, [r3, #36]	; 0x24
    5e4c:	mov	r3, #0
    5e50:	mov	r0, r3
    5e54:	sub	sp, fp, #8
    5e58:	pop	{r4, fp, pc}
    5e5c:	.word	0x00001174
	...

00005e68 <cd_match_filename_finalise>:
    5e68:	push	{fp, lr}
    5e6c:	add	fp, sp, #4
    5e70:	sub	sp, sp, #72	; 0x48
    5e74:	str	r0, [fp, #-64]	; 0xffffffc0
    5e78:	ldr	r3, [fp, #-64]	; 0xffffffc0
    5e7c:	ldr	r3, [r3]
    5e80:	ldr	r3, [r3, #8]
    5e84:	str	r3, [fp, #-8]
    5e88:	ldr	r3, [fp, #-64]	; 0xffffffc0
    5e8c:	ldr	r3, [r3]
    5e90:	ldr	r3, [r3, #12]
    5e94:	mov	r0, r3
    5e98:	bl	61c <escaped_string_length>
    5e9c:	str	r0, [fp, #-12]
    5ea0:	ldr	r3, [fp, #-12]
    5ea4:	cmp	r3, #0
    5ea8:	bge	5ec0 <cd_match_filename_finalise+0x58>
    5eac:	ldr	r1, [pc, #564]	; 60e8 <cd_match_filename_finalise+0x280>
    5eb0:	ldr	r0, [pc, #564]	; 60ec <cd_match_filename_finalise+0x284>
    5eb4:	bl	0 <coda_set_error>
    5eb8:	mvn	r3, #0
    5ebc:	b	60dc <cd_match_filename_finalise+0x274>
    5ec0:	ldr	r3, [fp, #-12]
    5ec4:	cmp	r3, #0
    5ec8:	bne	5ee0 <cd_match_filename_finalise+0x78>
    5ecc:	ldr	r1, [pc, #540]	; 60f0 <cd_match_filename_finalise+0x288>
    5ed0:	ldr	r0, [pc, #532]	; 60ec <cd_match_filename_finalise+0x284>
    5ed4:	bl	0 <coda_set_error>
    5ed8:	mvn	r3, #0
    5edc:	b	60dc <cd_match_filename_finalise+0x274>
    5ee0:	mov	r3, #0
    5ee4:	str	r3, [sp, #4]
    5ee8:	mov	r3, #0
    5eec:	str	r3, [sp]
    5ef0:	mov	r3, #0
    5ef4:	mov	r2, #0
    5ef8:	mov	r1, #0
    5efc:	mov	r0, #28
    5f00:	bl	0 <coda_expression_new>
    5f04:	str	r0, [fp, #-16]
    5f08:	ldr	r3, [fp, #-16]
    5f0c:	cmp	r3, #0
    5f10:	bne	5f1c <cd_match_filename_finalise+0xb4>
    5f14:	mvn	r3, #0
    5f18:	b	60dc <cd_match_filename_finalise+0x274>
    5f1c:	ldr	r3, [fp, #-12]
    5f20:	mov	r0, r3
    5f24:	asr	r1, r0, #31
    5f28:	sub	r3, fp, #60	; 0x3c
    5f2c:	mov	r2, r3
    5f30:	bl	0 <coda_str64>
    5f34:	sub	r3, fp, #60	; 0x3c
    5f38:	mov	r0, r3
    5f3c:	bl	0 <strdup>
    5f40:	mov	r3, r0
    5f44:	str	r3, [fp, #-20]	; 0xffffffec
    5f48:	ldr	r3, [fp, #-20]	; 0xffffffec
    5f4c:	cmp	r3, #0
    5f50:	bne	5f70 <cd_match_filename_finalise+0x108>
    5f54:	ldr	r3, [pc, #408]	; 60f4 <cd_match_filename_finalise+0x28c>
    5f58:	ldr	r2, [pc, #408]	; 60f8 <cd_match_filename_finalise+0x290>
    5f5c:	ldr	r1, [pc, #408]	; 60fc <cd_match_filename_finalise+0x294>
    5f60:	mvn	r0, #0
    5f64:	bl	0 <coda_set_error>
    5f68:	mvn	r3, #0
    5f6c:	b	60dc <cd_match_filename_finalise+0x274>
    5f70:	mov	r3, #0
    5f74:	str	r3, [sp, #4]
    5f78:	mov	r3, #0
    5f7c:	str	r3, [sp]
    5f80:	mov	r3, #0
    5f84:	mov	r2, #0
    5f88:	ldr	r1, [fp, #-20]	; 0xffffffec
    5f8c:	mov	r0, #20
    5f90:	bl	0 <coda_expression_new>
    5f94:	str	r0, [fp, #-24]	; 0xffffffe8
    5f98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f9c:	cmp	r3, #0
    5fa0:	bne	5fb4 <cd_match_filename_finalise+0x14c>
    5fa4:	ldr	r0, [fp, #-16]
    5fa8:	bl	0 <coda_expression_delete>
    5fac:	mvn	r3, #0
    5fb0:	b	60dc <cd_match_filename_finalise+0x274>
    5fb4:	ldr	r3, [fp, #-8]
    5fb8:	ldr	r2, [r3, #4]
    5fbc:	mov	r3, #0
    5fc0:	str	r3, [sp, #4]
    5fc4:	ldr	r3, [fp, #-16]
    5fc8:	str	r3, [sp]
    5fcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5fd0:	mov	r1, #0
    5fd4:	mov	r0, #77	; 0x4d
    5fd8:	bl	0 <coda_expression_new>
    5fdc:	str	r0, [fp, #-28]	; 0xffffffe4
    5fe0:	ldr	r3, [fp, #-8]
    5fe4:	mov	r2, #0
    5fe8:	str	r2, [r3, #4]
    5fec:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5ff0:	cmp	r3, #0
    5ff4:	bne	6000 <cd_match_filename_finalise+0x198>
    5ff8:	mvn	r3, #0
    5ffc:	b	60dc <cd_match_filename_finalise+0x274>
    6000:	ldr	r3, [fp, #-64]	; 0xffffffc0
    6004:	ldr	r3, [r3]
    6008:	ldr	r3, [r3, #12]
    600c:	mov	r0, r3
    6010:	bl	0 <strdup>
    6014:	mov	r3, r0
    6018:	str	r3, [fp, #-20]	; 0xffffffec
    601c:	ldr	r3, [fp, #-20]	; 0xffffffec
    6020:	cmp	r3, #0
    6024:	bne	604c <cd_match_filename_finalise+0x1e4>
    6028:	ldr	r3, [pc, #208]	; 6100 <cd_match_filename_finalise+0x298>
    602c:	ldr	r2, [pc, #196]	; 60f8 <cd_match_filename_finalise+0x290>
    6030:	ldr	r1, [pc, #196]	; 60fc <cd_match_filename_finalise+0x294>
    6034:	mvn	r0, #0
    6038:	bl	0 <coda_set_error>
    603c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6040:	bl	0 <coda_expression_delete>
    6044:	mvn	r3, #0
    6048:	b	60dc <cd_match_filename_finalise+0x274>
    604c:	mov	r3, #0
    6050:	str	r3, [sp, #4]
    6054:	mov	r3, #0
    6058:	str	r3, [sp]
    605c:	mov	r3, #0
    6060:	mov	r2, #0
    6064:	ldr	r1, [fp, #-20]	; 0xffffffec
    6068:	mov	r0, #22
    606c:	bl	0 <coda_expression_new>
    6070:	str	r0, [fp, #-32]	; 0xffffffe0
    6074:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6078:	cmp	r3, #0
    607c:	bne	6090 <cd_match_filename_finalise+0x228>
    6080:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6084:	bl	0 <coda_expression_delete>
    6088:	mvn	r3, #0
    608c:	b	60dc <cd_match_filename_finalise+0x274>
    6090:	mov	r3, #0
    6094:	str	r3, [sp, #4]
    6098:	mov	r3, #0
    609c:	str	r3, [sp]
    60a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    60a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    60a8:	mov	r1, #0
    60ac:	mov	r0, #25
    60b0:	bl	0 <coda_expression_new>
    60b4:	mov	r2, r0
    60b8:	ldr	r3, [fp, #-8]
    60bc:	str	r2, [r3, #4]
    60c0:	ldr	r3, [fp, #-8]
    60c4:	ldr	r3, [r3, #4]
    60c8:	cmp	r3, #0
    60cc:	bne	60d8 <cd_match_filename_finalise+0x270>
    60d0:	mvn	r3, #0
    60d4:	b	60dc <cd_match_filename_finalise+0x274>
    60d8:	mov	r3, #0
    60dc:	mov	r0, r3
    60e0:	sub	sp, fp, #4
    60e4:	pop	{fp, pc}
    60e8:	.word	0x00000d44
    60ec:	.word	0xfffffe70
    60f0:	.word	0x00001200
    60f4:	.word	0x00000a1c
    60f8:	.word	0x000009bc
    60fc:	.word	0x00001060
    6100:	.word	0x00000a2f

00006104 <cd_match_filename_init>:
    6104:	push	{r4, fp, lr}
    6108:	add	fp, sp, #8
    610c:	sub	sp, sp, #36	; 0x24
    6110:	str	r0, [fp, #-32]	; 0xffffffe0
    6114:	str	r1, [fp, #-36]	; 0xffffffdc
    6118:	ldr	r3, [fp, #-32]	; 0xffffffe0
    611c:	ldr	r3, [r3]
    6120:	ldr	r3, [r3]
    6124:	mov	r2, r3
    6128:	ldr	r1, [pc, #328]	; 6278 <cd_match_filename_init+0x174>
    612c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6130:	bl	fa4 <get_mandatory_attribute_value>
    6134:	str	r0, [fp, #-16]
    6138:	ldr	r3, [fp, #-16]
    613c:	cmp	r3, #0
    6140:	bne	614c <cd_match_filename_init+0x48>
    6144:	mvn	r3, #0
    6148:	b	626c <cd_match_filename_init+0x168>
    614c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6150:	ldr	r3, [r3]
    6154:	ldr	r2, [pc, #288]	; 627c <cd_match_filename_init+0x178>
    6158:	str	r2, [r3, #40]	; 0x28
    615c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6160:	ldr	r4, [r3]
    6164:	mov	r0, #0
    6168:	bl	0 <coda_detection_rule_entry_new>
    616c:	mov	r3, r0
    6170:	str	r3, [r4, #8]
    6174:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6178:	ldr	r3, [r3]
    617c:	ldr	r3, [r3, #8]
    6180:	cmp	r3, #0
    6184:	bne	6190 <cd_match_filename_init+0x8c>
    6188:	mvn	r3, #0
    618c:	b	626c <cd_match_filename_init+0x168>
    6190:	ldr	r0, [fp, #-16]
    6194:	bl	0 <strdup>
    6198:	mov	r3, r0
    619c:	str	r3, [fp, #-20]	; 0xffffffec
    61a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    61a4:	cmp	r3, #0
    61a8:	bne	61c8 <cd_match_filename_init+0xc4>
    61ac:	ldr	r3, [pc, #204]	; 6280 <cd_match_filename_init+0x17c>
    61b0:	ldr	r2, [pc, #204]	; 6284 <cd_match_filename_init+0x180>
    61b4:	ldr	r1, [pc, #204]	; 6288 <cd_match_filename_init+0x184>
    61b8:	mvn	r0, #0
    61bc:	bl	0 <coda_set_error>
    61c0:	mvn	r3, #0
    61c4:	b	626c <cd_match_filename_init+0x168>
    61c8:	mov	r3, #0
    61cc:	str	r3, [sp, #4]
    61d0:	mov	r3, #0
    61d4:	str	r3, [sp]
    61d8:	mov	r3, #0
    61dc:	mov	r2, #0
    61e0:	ldr	r1, [fp, #-20]	; 0xffffffec
    61e4:	mov	r0, #20
    61e8:	bl	0 <coda_expression_new>
    61ec:	str	r0, [fp, #-24]	; 0xffffffe8
    61f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    61f4:	cmp	r3, #0
    61f8:	bne	6214 <cd_match_filename_init+0x110>
    61fc:	ldr	r2, [fp, #-16]
    6200:	ldr	r1, [pc, #132]	; 628c <cd_match_filename_init+0x188>
    6204:	ldr	r0, [pc, #132]	; 6290 <cd_match_filename_init+0x18c>
    6208:	bl	0 <coda_set_error>
    620c:	mvn	r3, #0
    6210:	b	626c <cd_match_filename_init+0x168>
    6214:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6218:	ldr	r3, [r3]
    621c:	ldr	r3, [r3, #8]
    6220:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6224:	mov	r0, r3
    6228:	bl	0 <coda_detection_rule_entry_set_expression>
    622c:	mov	r3, r0
    6230:	cmp	r3, #0
    6234:	beq	6248 <cd_match_filename_init+0x144>
    6238:	ldr	r0, [fp, #-24]	; 0xffffffe8
    623c:	bl	0 <coda_expression_delete>
    6240:	mvn	r3, #0
    6244:	b	626c <cd_match_filename_init+0x168>
    6248:	ldr	r3, [fp, #-32]	; 0xffffffe0
    624c:	ldr	r3, [r3]
    6250:	mov	r2, #1
    6254:	str	r2, [r3, #32]
    6258:	ldr	r3, [fp, #-32]	; 0xffffffe0
    625c:	ldr	r3, [r3]
    6260:	ldr	r2, [pc, #44]	; 6294 <cd_match_filename_init+0x190>
    6264:	str	r2, [r3, #36]	; 0x24
    6268:	mov	r3, #0
    626c:	mov	r0, r3
    6270:	sub	sp, fp, #8
    6274:	pop	{r4, fp, pc}
    6278:	.word	0x00000e9c
    627c:	.word	0x00000000
    6280:	.word	0x00000a59
    6284:	.word	0x000009bc
    6288:	.word	0x00001060
    628c:	.word	0x000011bc
    6290:	.word	0xfffffe70
    6294:	.word	0x00000000

00006298 <cd_match_size_init>:
    6298:	push	{r4, fp, lr}
    629c:	add	fp, sp, #8
    62a0:	sub	sp, sp, #44	; 0x2c
    62a4:	str	r0, [fp, #-40]	; 0xffffffd8
    62a8:	str	r1, [fp, #-44]	; 0xffffffd4
    62ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
    62b0:	ldr	r3, [r3]
    62b4:	ldr	r2, [pc, #432]	; 646c <cd_match_size_init+0x1d4>
    62b8:	str	r2, [r3, #40]	; 0x28
    62bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    62c0:	ldr	r4, [r3]
    62c4:	mov	r0, #0
    62c8:	bl	0 <coda_detection_rule_entry_new>
    62cc:	mov	r3, r0
    62d0:	str	r3, [r4, #8]
    62d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    62d8:	ldr	r3, [r3]
    62dc:	ldr	r3, [r3, #8]
    62e0:	cmp	r3, #0
    62e4:	bne	62f0 <cd_match_size_init+0x58>
    62e8:	mvn	r3, #0
    62ec:	b	6460 <cd_match_size_init+0x1c8>
    62f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    62f4:	ldr	r3, [r3]
    62f8:	ldr	r3, [r3]
    62fc:	mov	r2, r3
    6300:	ldr	r1, [pc, #360]	; 6470 <cd_match_size_init+0x1d8>
    6304:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6308:	bl	fa4 <get_mandatory_attribute_value>
    630c:	str	r0, [fp, #-16]
    6310:	ldr	r3, [fp, #-16]
    6314:	cmp	r3, #0
    6318:	bne	6324 <cd_match_size_init+0x8c>
    631c:	mvn	r3, #0
    6320:	b	6460 <cd_match_size_init+0x1c8>
    6324:	ldr	r0, [fp, #-16]
    6328:	bl	0 <strdup>
    632c:	mov	r3, r0
    6330:	str	r3, [fp, #-20]	; 0xffffffec
    6334:	ldr	r3, [fp, #-20]	; 0xffffffec
    6338:	cmp	r3, #0
    633c:	bne	635c <cd_match_size_init+0xc4>
    6340:	ldr	r3, [pc, #300]	; 6474 <cd_match_size_init+0x1dc>
    6344:	ldr	r2, [pc, #300]	; 6478 <cd_match_size_init+0x1e0>
    6348:	ldr	r1, [pc, #300]	; 647c <cd_match_size_init+0x1e4>
    634c:	mvn	r0, #0
    6350:	bl	0 <coda_set_error>
    6354:	mvn	r3, #0
    6358:	b	6460 <cd_match_size_init+0x1c8>
    635c:	mov	r3, #0
    6360:	str	r3, [sp, #4]
    6364:	mov	r3, #0
    6368:	str	r3, [sp]
    636c:	mov	r3, #0
    6370:	mov	r2, #0
    6374:	ldr	r1, [fp, #-20]	; 0xffffffec
    6378:	mov	r0, #20
    637c:	bl	0 <coda_expression_new>
    6380:	str	r0, [fp, #-24]	; 0xffffffe8
    6384:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6388:	cmp	r3, #0
    638c:	bne	63a8 <cd_match_size_init+0x110>
    6390:	ldr	r2, [fp, #-16]
    6394:	ldr	r1, [pc, #228]	; 6480 <cd_match_size_init+0x1e8>
    6398:	ldr	r0, [pc, #228]	; 6484 <cd_match_size_init+0x1ec>
    639c:	bl	0 <coda_set_error>
    63a0:	mvn	r3, #0
    63a4:	b	6460 <cd_match_size_init+0x1c8>
    63a8:	mov	r3, #0
    63ac:	str	r3, [sp, #4]
    63b0:	mov	r3, #0
    63b4:	str	r3, [sp]
    63b8:	mov	r3, #0
    63bc:	mov	r2, #0
    63c0:	mov	r1, #0
    63c4:	mov	r0, #27
    63c8:	bl	0 <coda_expression_new>
    63cc:	str	r0, [fp, #-28]	; 0xffffffe4
    63d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    63d4:	cmp	r3, #0
    63d8:	bne	63ec <cd_match_size_init+0x154>
    63dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    63e0:	bl	0 <coda_expression_delete>
    63e4:	mvn	r3, #0
    63e8:	b	6460 <cd_match_size_init+0x1c8>
    63ec:	mov	r3, #0
    63f0:	str	r3, [sp, #4]
    63f4:	mov	r3, #0
    63f8:	str	r3, [sp]
    63fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6400:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6404:	mov	r1, #0
    6408:	mov	r0, #25
    640c:	bl	0 <coda_expression_new>
    6410:	str	r0, [fp, #-32]	; 0xffffffe0
    6414:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6418:	cmp	r3, #0
    641c:	bne	6428 <cd_match_size_init+0x190>
    6420:	mvn	r3, #0
    6424:	b	6460 <cd_match_size_init+0x1c8>
    6428:	ldr	r3, [fp, #-40]	; 0xffffffd8
    642c:	ldr	r3, [r3]
    6430:	ldr	r3, [r3, #8]
    6434:	ldr	r1, [fp, #-32]	; 0xffffffe0
    6438:	mov	r0, r3
    643c:	bl	0 <coda_detection_rule_entry_set_expression>
    6440:	mov	r3, r0
    6444:	cmp	r3, #0
    6448:	beq	645c <cd_match_size_init+0x1c4>
    644c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6450:	bl	0 <coda_expression_delete>
    6454:	mvn	r3, #0
    6458:	b	6460 <cd_match_size_init+0x1c8>
    645c:	mov	r3, #0
    6460:	mov	r0, r3
    6464:	sub	sp, fp, #8
    6468:	pop	{r4, fp, pc}
    646c:	.word	0x00000000
    6470:	.word	0x00001234
    6474:	.word	0x00000a86
    6478:	.word	0x000009bc
    647c:	.word	0x00001060
    6480:	.word	0x0000123c
    6484:	.word	0xfffffe70

00006488 <cd_product_class_set_description>:
    6488:	push	{fp, lr}
    648c:	add	fp, sp, #4
    6490:	sub	sp, sp, #8
    6494:	str	r0, [fp, #-8]
    6498:	ldr	r3, [fp, #-8]
    649c:	ldr	r3, [r3]
    64a0:	ldr	r3, [r3, #12]
    64a4:	cmp	r3, #0
    64a8:	bne	64d0 <cd_product_class_set_description+0x48>
    64ac:	ldr	r3, [fp, #-8]
    64b0:	ldr	r3, [r3]
    64b4:	ldr	r3, [r3, #396]	; 0x18c
    64b8:	ldr	r3, [r3, #8]
    64bc:	ldr	r1, [pc, #68]	; 6508 <cd_product_class_set_description+0x80>
    64c0:	mov	r0, r3
    64c4:	bl	0 <coda_product_class_set_description>
    64c8:	mov	r3, r0
    64cc:	b	64fc <cd_product_class_set_description+0x74>
    64d0:	ldr	r3, [fp, #-8]
    64d4:	ldr	r3, [r3]
    64d8:	ldr	r3, [r3, #396]	; 0x18c
    64dc:	ldr	r2, [r3, #8]
    64e0:	ldr	r3, [fp, #-8]
    64e4:	ldr	r3, [r3]
    64e8:	ldr	r3, [r3, #12]
    64ec:	mov	r1, r3
    64f0:	mov	r0, r2
    64f4:	bl	0 <coda_product_class_set_description>
    64f8:	mov	r3, r0
    64fc:	mov	r0, r3
    6500:	sub	sp, fp, #4
    6504:	pop	{fp, pc}
    6508:	.word	0x00000c50

0000650c <cd_product_class_add_product_type>:
    650c:	push	{fp, lr}
    6510:	add	fp, sp, #4
    6514:	sub	sp, sp, #8
    6518:	str	r0, [fp, #-8]
    651c:	ldr	r3, [fp, #-8]
    6520:	ldr	r3, [r3]
    6524:	ldr	r3, [r3, #396]	; 0x18c
    6528:	ldr	r2, [r3, #8]
    652c:	ldr	r3, [fp, #-8]
    6530:	ldr	r3, [r3]
    6534:	ldr	r3, [r3, #8]
    6538:	mov	r1, r3
    653c:	mov	r0, r2
    6540:	bl	0 <coda_product_class_add_product_type>
    6544:	mov	r3, r0
    6548:	cmp	r3, #0
    654c:	beq	6558 <cd_product_class_add_product_type+0x4c>
    6550:	mvn	r3, #0
    6554:	b	656c <cd_product_class_add_product_type+0x60>
    6558:	ldr	r3, [fp, #-8]
    655c:	ldr	r3, [r3]
    6560:	mov	r2, #0
    6564:	str	r2, [r3, #8]
    6568:	mov	r3, #0
    656c:	mov	r0, r3
    6570:	sub	sp, fp, #4
    6574:	pop	{fp, pc}

00006578 <cd_product_class_finalise>:
    6578:	push	{fp}		; (str fp, [sp, #-4]!)
    657c:	add	fp, sp, #0
    6580:	sub	sp, sp, #12
    6584:	str	r0, [fp, #-8]
    6588:	ldr	r3, [fp, #-8]
    658c:	mov	r2, #0
    6590:	str	r2, [r3, #24]
    6594:	mov	r3, #0
    6598:	mov	r0, r3
    659c:	add	sp, fp, #0
    65a0:	pop	{fp}		; (ldr fp, [sp], #4)
    65a4:	bx	lr

000065a8 <get_product_class_revision>:
    65a8:	push	{fp, lr}
    65ac:	add	fp, sp, #4
    65b0:	sub	sp, sp, #40	; 0x28
    65b4:	str	r0, [fp, #-32]	; 0xffffffe0
    65b8:	str	r1, [fp, #-36]	; 0xffffffdc
    65bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    65c0:	ldr	r3, [r3, #16]
    65c4:	ldr	r1, [pc, #316]	; 6708 <get_product_class_revision+0x160>
    65c8:	mov	r0, r3
    65cc:	bl	0 <coda_za_get_entry_by_name>
    65d0:	str	r0, [fp, #-8]
    65d4:	ldr	r3, [fp, #-8]
    65d8:	cmp	r3, #0
    65dc:	bne	65f4 <get_product_class_revision+0x4c>
    65e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    65e4:	mov	r2, #0
    65e8:	str	r2, [r3]
    65ec:	mov	r3, #0
    65f0:	b	66fc <get_product_class_revision+0x154>
    65f4:	ldr	r0, [fp, #-8]
    65f8:	bl	0 <coda_za_get_entry_size>
    65fc:	str	r0, [fp, #-12]
    6600:	ldr	r3, [fp, #-12]
    6604:	cmp	r3, #0
    6608:	bne	6620 <get_product_class_revision+0x78>
    660c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6610:	mov	r2, #0
    6614:	str	r2, [r3]
    6618:	mov	r3, #0
    661c:	b	66fc <get_product_class_revision+0x154>
    6620:	ldr	r3, [fp, #-12]
    6624:	add	r3, r3, #1
    6628:	mov	r0, r3
    662c:	bl	0 <malloc>
    6630:	mov	r3, r0
    6634:	str	r3, [fp, #-16]
    6638:	ldr	r3, [fp, #-16]
    663c:	cmp	r3, #0
    6640:	bne	666c <get_product_class_revision+0xc4>
    6644:	ldr	r3, [fp, #-12]
    6648:	add	r2, r3, #1
    664c:	ldr	r3, [pc, #184]	; 670c <get_product_class_revision+0x164>
    6650:	str	r3, [sp]
    6654:	ldr	r3, [pc, #180]	; 6710 <get_product_class_revision+0x168>
    6658:	ldr	r1, [pc, #180]	; 6714 <get_product_class_revision+0x16c>
    665c:	mvn	r0, #0
    6660:	bl	0 <coda_set_error>
    6664:	mvn	r3, #0
    6668:	b	66fc <get_product_class_revision+0x154>
    666c:	ldr	r1, [fp, #-16]
    6670:	ldr	r0, [fp, #-8]
    6674:	bl	0 <coda_za_read_entry>
    6678:	mov	r3, r0
    667c:	cmp	r3, #0
    6680:	beq	6694 <get_product_class_revision+0xec>
    6684:	ldr	r0, [fp, #-16]
    6688:	bl	0 <free>
    668c:	mvn	r3, #0
    6690:	b	66fc <get_product_class_revision+0x154>
    6694:	ldr	r3, [fp, #-12]
    6698:	ldr	r2, [fp, #-16]
    669c:	add	r3, r2, r3
    66a0:	mov	r2, #0
    66a4:	strb	r2, [r3]
    66a8:	sub	r2, fp, #28
    66ac:	mov	r3, #1
    66b0:	ldr	r1, [fp, #-12]
    66b4:	ldr	r0, [fp, #-16]
    66b8:	bl	0 <coda_ascii_parse_int64>
    66bc:	mov	r3, r0
    66c0:	cmp	r3, #0
    66c4:	bge	66e4 <get_product_class_revision+0x13c>
    66c8:	ldr	r0, [fp, #-16]
    66cc:	bl	0 <free>
    66d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    66d4:	mov	r2, #0
    66d8:	str	r2, [r3]
    66dc:	mov	r3, #0
    66e0:	b	66fc <get_product_class_revision+0x154>
    66e4:	ldr	r0, [fp, #-16]
    66e8:	bl	0 <free>
    66ec:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    66f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    66f4:	str	r2, [r3]
    66f8:	mov	r3, #0
    66fc:	mov	r0, r3
    6700:	sub	sp, fp, #4
    6704:	pop	{fp, pc}
    6708:	.word	0x00001260
    670c:	.word	0x00000ad6
    6710:	.word	0x000009bc
    6714:	.word	0x00000a1c

00006718 <cd_product_class_init>:
    6718:	push	{r4, fp, lr}
    671c:	add	fp, sp, #8
    6720:	sub	sp, sp, #28
    6724:	str	r0, [fp, #-32]	; 0xffffffe0
    6728:	str	r1, [fp, #-36]	; 0xffffffdc
    672c:	mov	r3, #0
    6730:	str	r3, [fp, #-24]	; 0xffffffe8
    6734:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6738:	ldr	r3, [r3]
    673c:	ldr	r3, [r3]
    6740:	mov	r2, r3
    6744:	ldr	r1, [pc, #516]	; 6950 <cd_product_class_init+0x238>
    6748:	ldr	r0, [fp, #-36]	; 0xffffffdc
    674c:	bl	fa4 <get_mandatory_attribute_value>
    6750:	str	r0, [fp, #-16]
    6754:	ldr	r3, [fp, #-16]
    6758:	cmp	r3, #0
    675c:	bne	6768 <cd_product_class_init+0x50>
    6760:	mvn	r3, #0
    6764:	b	6944 <cd_product_class_init+0x22c>
    6768:	sub	r3, fp, #24
    676c:	mov	r1, r3
    6770:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6774:	bl	65a8 <get_product_class_revision>
    6778:	mov	r3, r0
    677c:	cmp	r3, #0
    6780:	beq	678c <cd_product_class_init+0x74>
    6784:	mvn	r3, #0
    6788:	b	6944 <cd_product_class_init+0x22c>
    678c:	ldr	r0, [fp, #-16]
    6790:	bl	0 <coda_data_dictionary_has_product_class>
    6794:	mov	r3, r0
    6798:	cmp	r3, #0
    679c:	beq	6810 <cd_product_class_init+0xf8>
    67a0:	ldr	r0, [fp, #-16]
    67a4:	bl	0 <coda_data_dictionary_get_product_class>
    67a8:	str	r0, [fp, #-20]	; 0xffffffec
    67ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    67b0:	cmp	r3, #0
    67b4:	bne	67c0 <cd_product_class_init+0xa8>
    67b8:	mvn	r3, #0
    67bc:	b	6944 <cd_product_class_init+0x22c>
    67c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    67c4:	bl	0 <coda_product_class_get_revision>
    67c8:	mov	r2, r0
    67cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    67d0:	cmp	r2, r3
    67d4:	blt	67f4 <cd_product_class_init+0xdc>
    67d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    67dc:	mov	r2, #1
    67e0:	str	r2, [r3, #40]	; 0x28
    67e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    67e8:	bl	1470 <abort_parser>
    67ec:	mov	r3, #0
    67f0:	b	6944 <cd_product_class_init+0x22c>
    67f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    67f8:	bl	0 <coda_data_dictionary_remove_product_class>
    67fc:	mov	r3, r0
    6800:	cmp	r3, #0
    6804:	beq	6810 <cd_product_class_init+0xf8>
    6808:	mvn	r3, #0
    680c:	b	6944 <cd_product_class_init+0x22c>
    6810:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6814:	ldr	r3, [r3]
    6818:	ldr	r2, [pc, #308]	; 6954 <cd_product_class_init+0x23c>
    681c:	str	r2, [r3, #40]	; 0x28
    6820:	ldr	r0, [fp, #-16]
    6824:	bl	0 <coda_product_class_new>
    6828:	mov	r2, r0
    682c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6830:	str	r2, [r3, #24]
    6834:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6838:	ldr	r3, [r3, #24]
    683c:	cmp	r3, #0
    6840:	bne	684c <cd_product_class_init+0x134>
    6844:	mvn	r3, #0
    6848:	b	6944 <cd_product_class_init+0x22c>
    684c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6850:	ldr	r4, [r3, #24]
    6854:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6858:	ldr	r3, [r3, #16]
    685c:	mov	r0, r3
    6860:	bl	0 <coda_za_get_filename>
    6864:	mov	r3, r0
    6868:	mov	r1, r3
    686c:	mov	r0, r4
    6870:	bl	0 <coda_product_class_set_definition_file>
    6874:	mov	r3, r0
    6878:	cmp	r3, #0
    687c:	beq	68a4 <cd_product_class_init+0x18c>
    6880:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6884:	ldr	r3, [r3, #24]
    6888:	mov	r0, r3
    688c:	bl	0 <coda_product_class_delete>
    6890:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6894:	mov	r2, #0
    6898:	str	r2, [r3, #24]
    689c:	mvn	r3, #0
    68a0:	b	6944 <cd_product_class_init+0x22c>
    68a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    68a8:	ldr	r3, [r3, #24]
    68ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    68b0:	mov	r1, r2
    68b4:	mov	r0, r3
    68b8:	bl	0 <coda_product_class_set_revision>
    68bc:	mov	r3, r0
    68c0:	cmp	r3, #0
    68c4:	beq	68ec <cd_product_class_init+0x1d4>
    68c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    68cc:	ldr	r3, [r3, #24]
    68d0:	mov	r0, r3
    68d4:	bl	0 <coda_product_class_delete>
    68d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    68dc:	mov	r2, #0
    68e0:	str	r2, [r3, #24]
    68e4:	mvn	r3, #0
    68e8:	b	6944 <cd_product_class_init+0x22c>
    68ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
    68f0:	ldr	r3, [r3]
    68f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    68f8:	ldr	r2, [r2, #24]
    68fc:	str	r2, [r3, #8]
    6900:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6904:	ldr	r0, [r3]
    6908:	ldr	r3, [pc, #72]	; 6958 <cd_product_class_init+0x240>
    690c:	ldr	r2, [pc, #72]	; 695c <cd_product_class_init+0x244>
    6910:	mov	r1, #11
    6914:	bl	14ac <register_sub_element>
    6918:	ldr	r3, [fp, #-32]	; 0xffffffe0
    691c:	ldr	r0, [r3]
    6920:	ldr	r3, [pc, #56]	; 6960 <cd_product_class_init+0x248>
    6924:	ldr	r2, [pc, #56]	; 6964 <cd_product_class_init+0x24c>
    6928:	mov	r1, #32
    692c:	bl	14ac <register_sub_element>
    6930:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6934:	ldr	r3, [r3]
    6938:	ldr	r2, [pc, #40]	; 6968 <cd_product_class_init+0x250>
    693c:	str	r2, [r3, #36]	; 0x24
    6940:	mov	r3, #0
    6944:	mov	r0, r3
    6948:	sub	sp, fp, #8
    694c:	pop	{r4, fp, pc}
    6950:	.word	0x00000aa8
	...

0000696c <cd_product_definition_set_description>:
    696c:	push	{fp, lr}
    6970:	add	fp, sp, #4
    6974:	sub	sp, sp, #8
    6978:	str	r0, [fp, #-8]
    697c:	ldr	r3, [fp, #-8]
    6980:	ldr	r3, [r3]
    6984:	ldr	r3, [r3, #12]
    6988:	cmp	r3, #0
    698c:	bne	69b4 <cd_product_definition_set_description+0x48>
    6990:	ldr	r3, [fp, #-8]
    6994:	ldr	r3, [r3]
    6998:	ldr	r3, [r3, #396]	; 0x18c
    699c:	ldr	r3, [r3, #8]
    69a0:	ldr	r1, [pc, #68]	; 69ec <cd_product_definition_set_description+0x80>
    69a4:	mov	r0, r3
    69a8:	bl	0 <coda_product_definition_set_description>
    69ac:	mov	r3, r0
    69b0:	b	69e0 <cd_product_definition_set_description+0x74>
    69b4:	ldr	r3, [fp, #-8]
    69b8:	ldr	r3, [r3]
    69bc:	ldr	r3, [r3, #396]	; 0x18c
    69c0:	ldr	r2, [r3, #8]
    69c4:	ldr	r3, [fp, #-8]
    69c8:	ldr	r3, [r3]
    69cc:	ldr	r3, [r3, #12]
    69d0:	mov	r1, r3
    69d4:	mov	r0, r2
    69d8:	bl	0 <coda_product_definition_set_description>
    69dc:	mov	r3, r0
    69e0:	mov	r0, r3
    69e4:	sub	sp, fp, #4
    69e8:	pop	{fp, pc}
    69ec:	.word	0x00000c50

000069f0 <cd_product_definition_add_detection_rule>:
    69f0:	push	{fp, lr}
    69f4:	add	fp, sp, #4
    69f8:	sub	sp, sp, #8
    69fc:	str	r0, [fp, #-8]
    6a00:	ldr	r3, [fp, #-8]
    6a04:	ldr	r3, [r3]
    6a08:	ldr	r3, [r3, #396]	; 0x18c
    6a0c:	ldr	r2, [r3, #8]
    6a10:	ldr	r3, [fp, #-8]
    6a14:	ldr	r3, [r3]
    6a18:	ldr	r3, [r3, #8]
    6a1c:	mov	r1, r3
    6a20:	mov	r0, r2
    6a24:	bl	0 <coda_product_definition_add_detection_rule>
    6a28:	mov	r3, r0
    6a2c:	cmp	r3, #0
    6a30:	beq	6a3c <cd_product_definition_add_detection_rule+0x4c>
    6a34:	mvn	r3, #0
    6a38:	b	6a50 <cd_product_definition_add_detection_rule+0x60>
    6a3c:	ldr	r3, [fp, #-8]
    6a40:	ldr	r3, [r3]
    6a44:	mov	r2, #0
    6a48:	str	r2, [r3, #8]
    6a4c:	mov	r3, #0
    6a50:	mov	r0, r3
    6a54:	sub	sp, fp, #4
    6a58:	pop	{fp, pc}

00006a5c <cd_product_definition_set_root_type>:
    6a5c:	push	{fp, lr}
    6a60:	add	fp, sp, #4
    6a64:	sub	sp, sp, #8
    6a68:	str	r0, [fp, #-8]
    6a6c:	ldr	r3, [fp, #-8]
    6a70:	ldr	r3, [r3]
    6a74:	ldr	r3, [r3, #396]	; 0x18c
    6a78:	ldr	r2, [r3, #8]
    6a7c:	ldr	r3, [fp, #-8]
    6a80:	ldr	r3, [r3]
    6a84:	ldr	r3, [r3, #8]
    6a88:	mov	r1, r3
    6a8c:	mov	r0, r2
    6a90:	bl	0 <coda_product_definition_set_root_type>
    6a94:	mov	r3, r0
    6a98:	cmp	r3, #0
    6a9c:	beq	6aa8 <cd_product_definition_set_root_type+0x4c>
    6aa0:	mvn	r3, #0
    6aa4:	b	6aac <cd_product_definition_set_root_type+0x50>
    6aa8:	mov	r3, #0
    6aac:	mov	r0, r3
    6ab0:	sub	sp, fp, #4
    6ab4:	pop	{fp, pc}

00006ab8 <cd_product_definition_add_product_variable>:
    6ab8:	push	{fp, lr}
    6abc:	add	fp, sp, #4
    6ac0:	sub	sp, sp, #8
    6ac4:	str	r0, [fp, #-8]
    6ac8:	ldr	r3, [fp, #-8]
    6acc:	ldr	r3, [r3]
    6ad0:	ldr	r3, [r3, #396]	; 0x18c
    6ad4:	ldr	r2, [r3, #8]
    6ad8:	ldr	r3, [fp, #-8]
    6adc:	ldr	r3, [r3]
    6ae0:	ldr	r3, [r3, #8]
    6ae4:	mov	r1, r3
    6ae8:	mov	r0, r2
    6aec:	bl	0 <coda_product_definition_add_product_variable>
    6af0:	mov	r3, r0
    6af4:	cmp	r3, #0
    6af8:	beq	6b04 <cd_product_definition_add_product_variable+0x4c>
    6afc:	mvn	r3, #0
    6b00:	b	6b18 <cd_product_definition_add_product_variable+0x60>
    6b04:	ldr	r3, [fp, #-8]
    6b08:	ldr	r3, [r3]
    6b0c:	mov	r2, #0
    6b10:	str	r2, [r3, #8]
    6b14:	mov	r3, #0
    6b18:	mov	r0, r3
    6b1c:	sub	sp, fp, #4
    6b20:	pop	{fp, pc}

00006b24 <cd_product_definition_finalise>:
    6b24:	push	{fp, lr}
    6b28:	add	fp, sp, #4
    6b2c:	sub	sp, sp, #8
    6b30:	str	r0, [fp, #-8]
    6b34:	ldr	r3, [fp, #-8]
    6b38:	ldr	r3, [r3]
    6b3c:	ldr	r3, [r3, #8]
    6b40:	mov	r0, r3
    6b44:	bl	0 <coda_product_definition_validate>
    6b48:	mov	r3, r0
    6b4c:	mov	r0, r3
    6b50:	sub	sp, fp, #4
    6b54:	pop	{fp, pc}

00006b58 <cd_product_definition_init>:
    6b58:	push	{fp, lr}
    6b5c:	add	fp, sp, #4
    6b60:	sub	sp, sp, #32
    6b64:	str	r0, [fp, #-24]	; 0xffffffe8
    6b68:	str	r1, [fp, #-28]	; 0xffffffe4
    6b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6b70:	ldr	r3, [r3]
    6b74:	ldr	r3, [r3]
    6b78:	mov	r2, r3
    6b7c:	ldr	r1, [pc, #544]	; 6da4 <cd_product_definition_init+0x24c>
    6b80:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6b84:	bl	fa4 <get_mandatory_attribute_value>
    6b88:	str	r0, [fp, #-8]
    6b8c:	ldr	r3, [fp, #-8]
    6b90:	cmp	r3, #0
    6b94:	bne	6ba0 <cd_product_definition_init+0x48>
    6b98:	mvn	r3, #0
    6b9c:	b	6d98 <cd_product_definition_init+0x240>
    6ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6ba4:	ldr	r3, [r3]
    6ba8:	ldr	r3, [r3]
    6bac:	mov	r2, r3
    6bb0:	ldr	r1, [pc, #496]	; 6da8 <cd_product_definition_init+0x250>
    6bb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6bb8:	bl	fa4 <get_mandatory_attribute_value>
    6bbc:	str	r0, [fp, #-12]
    6bc0:	ldr	r3, [fp, #-12]
    6bc4:	cmp	r3, #0
    6bc8:	bne	6bd4 <cd_product_definition_init+0x7c>
    6bcc:	mvn	r3, #0
    6bd0:	b	6d98 <cd_product_definition_init+0x240>
    6bd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6bd8:	ldr	r3, [r3]
    6bdc:	add	r3, r3, #44	; 0x2c
    6be0:	mov	r1, r3
    6be4:	ldr	r0, [fp, #-12]
    6be8:	bl	0 <coda_format_from_string>
    6bec:	mov	r3, r0
    6bf0:	cmp	r3, #0
    6bf4:	beq	6c00 <cd_product_definition_init+0xa8>
    6bf8:	mvn	r3, #0
    6bfc:	b	6d98 <cd_product_definition_init+0x240>
    6c00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6c04:	ldr	r3, [r3]
    6c08:	mov	r2, #1
    6c0c:	str	r2, [r3, #48]	; 0x30
    6c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6c14:	ldr	r3, [r3]
    6c18:	ldr	r3, [r3]
    6c1c:	mov	r2, r3
    6c20:	ldr	r1, [pc, #388]	; 6dac <cd_product_definition_init+0x254>
    6c24:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6c28:	bl	fa4 <get_mandatory_attribute_value>
    6c2c:	str	r0, [fp, #-16]
    6c30:	ldr	r3, [fp, #-16]
    6c34:	cmp	r3, #0
    6c38:	bne	6c44 <cd_product_definition_init+0xec>
    6c3c:	mvn	r3, #0
    6c40:	b	6d98 <cd_product_definition_init+0x240>
    6c44:	sub	r3, fp, #20
    6c48:	mov	r2, r3
    6c4c:	ldr	r1, [pc, #348]	; 6db0 <cd_product_definition_init+0x258>
    6c50:	ldr	r0, [fp, #-16]
    6c54:	bl	0 <__isoc99_sscanf>
    6c58:	mov	r3, r0
    6c5c:	cmp	r3, #1
    6c60:	beq	6c7c <cd_product_definition_init+0x124>
    6c64:	ldr	r2, [fp, #-16]
    6c68:	ldr	r1, [pc, #324]	; 6db4 <cd_product_definition_init+0x25c>
    6c6c:	ldr	r0, [pc, #324]	; 6db8 <cd_product_definition_init+0x260>
    6c70:	bl	0 <coda_set_error>
    6c74:	mvn	r3, #0
    6c78:	b	6d98 <cd_product_definition_init+0x240>
    6c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6c80:	ldr	r3, [r3]
    6c84:	ldr	r2, [pc, #304]	; 6dbc <cd_product_definition_init+0x264>
    6c88:	str	r2, [r3, #40]	; 0x28
    6c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6c90:	ldr	r3, [r3]
    6c94:	ldr	r3, [r3, #44]	; 0x2c
    6c98:	ldr	r2, [fp, #-20]	; 0xffffffec
    6c9c:	mov	r1, r3
    6ca0:	ldr	r0, [fp, #-8]
    6ca4:	bl	0 <coda_product_definition_new>
    6ca8:	mov	r2, r0
    6cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cb0:	str	r2, [r3, #28]
    6cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cb8:	ldr	r3, [r3, #28]
    6cbc:	cmp	r3, #0
    6cc0:	bne	6ccc <cd_product_definition_init+0x174>
    6cc4:	mvn	r3, #0
    6cc8:	b	6d98 <cd_product_definition_init+0x240>
    6ccc:	ldr	r3, [pc, #236]	; 6dc0 <cd_product_definition_init+0x268>
    6cd0:	ldr	r3, [pc, r3]
    6cd4:	bl	0 <__aeabi_read_tp>
    6cd8:	mov	r2, r0
    6cdc:	ldr	r3, [r2, r3]
    6ce0:	cmp	r3, #0
    6ce4:	beq	6d50 <cd_product_definition_init+0x1f8>
    6ce8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cec:	ldr	r0, [r3, #16]
    6cf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cf4:	ldr	r2, [r3, #24]
    6cf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cfc:	ldr	r3, [r3, #28]
    6d00:	str	r3, [sp]
    6d04:	mov	r3, r2
    6d08:	ldr	r2, [fp, #-8]
    6d0c:	mov	r1, #2
    6d10:	bl	9d80 <parse_entry>
    6d14:	mov	r3, r0
    6d18:	cmp	r3, #0
    6d1c:	beq	6d50 <cd_product_definition_init+0x1f8>
    6d20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d24:	ldr	r3, [r3, #28]
    6d28:	mov	r0, r3
    6d2c:	bl	0 <coda_product_definition_delete>
    6d30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d34:	mov	r2, #0
    6d38:	str	r2, [r3, #28]
    6d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d40:	mov	r2, #0
    6d44:	str	r2, [r3, #44]	; 0x2c
    6d48:	mvn	r3, #0
    6d4c:	b	6d98 <cd_product_definition_init+0x240>
    6d50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d54:	ldr	r3, [r3]
    6d58:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6d5c:	ldr	r2, [r2, #28]
    6d60:	str	r2, [r3, #8]
    6d64:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d68:	ldr	r0, [r3]
    6d6c:	ldr	r3, [pc, #80]	; 6dc4 <cd_product_definition_init+0x26c>
    6d70:	ldr	r2, [pc, #80]	; 6dc8 <cd_product_definition_init+0x270>
    6d74:	mov	r1, #11
    6d78:	bl	14ac <register_sub_element>
    6d7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d80:	ldr	r0, [r3]
    6d84:	ldr	r3, [pc, #64]	; 6dcc <cd_product_definition_init+0x274>
    6d88:	ldr	r2, [pc, #64]	; 6dd0 <cd_product_definition_init+0x278>
    6d8c:	mov	r1, #12
    6d90:	bl	14ac <register_sub_element>
    6d94:	mov	r3, #0
    6d98:	mov	r0, r3
    6d9c:	sub	sp, fp, #4
    6da0:	pop	{fp, pc}
    6da4:	.word	0x00000f5c
    6da8:	.word	0x00000b38
    6dac:	.word	0x00001268
    6db0:	.word	0x00001270
    6db4:	.word	0x00001274
    6db8:	.word	0xfffffe70
    6dbc:	.word	0x00000000
    6dc0:	.word	0x000000e8
	...

00006dd4 <cd_product_definition_sub_init>:
    6dd4:	push	{fp, lr}
    6dd8:	add	fp, sp, #4
    6ddc:	sub	sp, sp, #16
    6de0:	str	r0, [fp, #-16]
    6de4:	str	r1, [fp, #-20]	; 0xffffffec
    6de8:	ldr	r3, [fp, #-16]
    6dec:	ldr	r3, [r3, #28]
    6df0:	cmp	r3, #0
    6df4:	bne	6e0c <cd_product_definition_sub_init+0x38>
    6df8:	ldr	r3, [pc, #476]	; 6fdc <cd_product_definition_sub_init+0x208>
    6dfc:	ldr	r2, [pc, #476]	; 6fe0 <cd_product_definition_sub_init+0x20c>
    6e00:	ldr	r1, [pc, #476]	; 6fe4 <cd_product_definition_sub_init+0x210>
    6e04:	ldr	r0, [pc, #476]	; 6fe8 <cd_product_definition_sub_init+0x214>
    6e08:	bl	0 <__assert_fail>
    6e0c:	ldr	r3, [fp, #-16]
    6e10:	ldr	r3, [r3]
    6e14:	ldr	r2, [pc, #464]	; 6fec <cd_product_definition_sub_init+0x218>
    6e18:	str	r2, [r3, #40]	; 0x28
    6e1c:	ldr	r3, [fp, #-16]
    6e20:	ldr	r3, [r3]
    6e24:	ldr	r2, [fp, #-16]
    6e28:	ldr	r2, [r2, #28]
    6e2c:	str	r2, [r3, #8]
    6e30:	ldr	r3, [fp, #-16]
    6e34:	ldr	r3, [r3]
    6e38:	ldr	r3, [r3]
    6e3c:	mov	r2, r3
    6e40:	ldr	r1, [pc, #424]	; 6ff0 <cd_product_definition_sub_init+0x21c>
    6e44:	ldr	r0, [fp, #-20]	; 0xffffffec
    6e48:	bl	fa4 <get_mandatory_attribute_value>
    6e4c:	str	r0, [fp, #-8]
    6e50:	ldr	r3, [fp, #-8]
    6e54:	cmp	r3, #0
    6e58:	bne	6e64 <cd_product_definition_sub_init+0x90>
    6e5c:	mvn	r3, #0
    6e60:	b	6fd0 <cd_product_definition_sub_init+0x1fc>
    6e64:	ldr	r3, [fp, #-16]
    6e68:	ldr	r3, [r3, #28]
    6e6c:	ldr	r3, [r3, #8]
    6e70:	ldr	r1, [fp, #-8]
    6e74:	mov	r0, r3
    6e78:	bl	0 <strcmp>
    6e7c:	mov	r3, r0
    6e80:	cmp	r3, #0
    6e84:	beq	6eac <cd_product_definition_sub_init+0xd8>
    6e88:	ldr	r3, [fp, #-16]
    6e8c:	ldr	r3, [r3, #28]
    6e90:	ldr	r3, [r3, #8]
    6e94:	ldr	r2, [fp, #-8]
    6e98:	ldr	r1, [pc, #340]	; 6ff4 <cd_product_definition_sub_init+0x220>
    6e9c:	ldr	r0, [pc, #340]	; 6ff8 <cd_product_definition_sub_init+0x224>
    6ea0:	bl	0 <coda_set_error>
    6ea4:	mvn	r3, #0
    6ea8:	b	6fd0 <cd_product_definition_sub_init+0x1fc>
    6eac:	ldr	r3, [fp, #-16]
    6eb0:	ldr	r3, [r3]
    6eb4:	ldr	r3, [r3]
    6eb8:	mov	r2, r3
    6ebc:	ldr	r1, [pc, #312]	; 6ffc <cd_product_definition_sub_init+0x228>
    6ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
    6ec4:	bl	fa4 <get_mandatory_attribute_value>
    6ec8:	str	r0, [fp, #-12]
    6ecc:	ldr	r3, [fp, #-12]
    6ed0:	cmp	r3, #0
    6ed4:	bne	6ee0 <cd_product_definition_sub_init+0x10c>
    6ed8:	mvn	r3, #0
    6edc:	b	6fd0 <cd_product_definition_sub_init+0x1fc>
    6ee0:	ldr	r3, [fp, #-16]
    6ee4:	ldr	r3, [r3]
    6ee8:	add	r3, r3, #44	; 0x2c
    6eec:	mov	r1, r3
    6ef0:	ldr	r0, [fp, #-12]
    6ef4:	bl	0 <coda_format_from_string>
    6ef8:	mov	r3, r0
    6efc:	cmp	r3, #0
    6f00:	beq	6f0c <cd_product_definition_sub_init+0x138>
    6f04:	mvn	r3, #0
    6f08:	b	6fd0 <cd_product_definition_sub_init+0x1fc>
    6f0c:	ldr	r3, [fp, #-16]
    6f10:	ldr	r3, [r3]
    6f14:	mov	r2, #1
    6f18:	str	r2, [r3, #48]	; 0x30
    6f1c:	ldr	r3, [fp, #-16]
    6f20:	ldr	r3, [r3, #28]
    6f24:	ldr	r2, [r3]
    6f28:	ldr	r3, [fp, #-16]
    6f2c:	ldr	r3, [r3]
    6f30:	ldr	r3, [r3, #44]	; 0x2c
    6f34:	cmp	r2, r3
    6f38:	beq	6f60 <cd_product_definition_sub_init+0x18c>
    6f3c:	ldr	r3, [fp, #-16]
    6f40:	ldr	r3, [r3, #28]
    6f44:	ldr	r3, [r3, #8]
    6f48:	mov	r2, r3
    6f4c:	ldr	r1, [pc, #172]	; 7000 <cd_product_definition_sub_init+0x22c>
    6f50:	ldr	r0, [pc, #160]	; 6ff8 <cd_product_definition_sub_init+0x224>
    6f54:	bl	0 <coda_set_error>
    6f58:	mvn	r3, #0
    6f5c:	b	6fd0 <cd_product_definition_sub_init+0x1fc>
    6f60:	ldr	r3, [fp, #-16]
    6f64:	ldr	r3, [r3, #28]
    6f68:	ldr	r3, [r3]
    6f6c:	cmp	r3, #2
    6f70:	bne	6f90 <cd_product_definition_sub_init+0x1bc>
    6f74:	ldr	r3, [fp, #-16]
    6f78:	ldr	r0, [r3]
    6f7c:	ldr	r3, [pc, #128]	; 7004 <cd_product_definition_sub_init+0x230>
    6f80:	ldr	r2, [pc, #128]	; 7008 <cd_product_definition_sub_init+0x234>
    6f84:	mov	r1, #35	; 0x23
    6f88:	bl	14ac <register_sub_element>
    6f8c:	b	6fa4 <cd_product_definition_sub_init+0x1d0>
    6f90:	ldr	r3, [fp, #-16]
    6f94:	ldr	r3, [r3]
    6f98:	ldr	r1, [pc, #100]	; 7004 <cd_product_definition_sub_init+0x230>
    6f9c:	mov	r0, r3
    6fa0:	bl	1534 <register_type_elements>
    6fa4:	ldr	r3, [fp, #-16]
    6fa8:	ldr	r0, [r3]
    6fac:	ldr	r3, [pc, #88]	; 700c <cd_product_definition_sub_init+0x238>
    6fb0:	ldr	r2, [pc, #88]	; 7010 <cd_product_definition_sub_init+0x23c>
    6fb4:	mov	r1, #33	; 0x21
    6fb8:	bl	14ac <register_sub_element>
    6fbc:	ldr	r3, [fp, #-16]
    6fc0:	ldr	r3, [r3]
    6fc4:	ldr	r2, [pc, #72]	; 7014 <cd_product_definition_sub_init+0x240>
    6fc8:	str	r2, [r3, #36]	; 0x24
    6fcc:	mov	r3, #0
    6fd0:	mov	r0, r3
    6fd4:	sub	sp, fp, #4
    6fd8:	pop	{fp, pc}
    6fdc:	.word	0x000022c4
    6fe0:	.word	0x00000b9e
    6fe4:	.word	0x000009bc
    6fe8:	.word	0x00000c84
    6fec:	.word	0x00000000
    6ff0:	.word	0x00000f5c
    6ff4:	.word	0x0000129c
    6ff8:	.word	0xfffffe70
    6ffc:	.word	0x00000b38
    7000:	.word	0x000012d8
	...

00007018 <cd_product_type_set_description>:
    7018:	push	{fp, lr}
    701c:	add	fp, sp, #4
    7020:	sub	sp, sp, #8
    7024:	str	r0, [fp, #-8]
    7028:	ldr	r3, [fp, #-8]
    702c:	ldr	r3, [r3]
    7030:	ldr	r3, [r3, #12]
    7034:	cmp	r3, #0
    7038:	bne	7060 <cd_product_type_set_description+0x48>
    703c:	ldr	r3, [fp, #-8]
    7040:	ldr	r3, [r3]
    7044:	ldr	r3, [r3, #396]	; 0x18c
    7048:	ldr	r3, [r3, #8]
    704c:	ldr	r1, [pc, #68]	; 7098 <cd_product_type_set_description+0x80>
    7050:	mov	r0, r3
    7054:	bl	0 <coda_product_type_set_description>
    7058:	mov	r3, r0
    705c:	b	708c <cd_product_type_set_description+0x74>
    7060:	ldr	r3, [fp, #-8]
    7064:	ldr	r3, [r3]
    7068:	ldr	r3, [r3, #396]	; 0x18c
    706c:	ldr	r2, [r3, #8]
    7070:	ldr	r3, [fp, #-8]
    7074:	ldr	r3, [r3]
    7078:	ldr	r3, [r3, #12]
    707c:	mov	r1, r3
    7080:	mov	r0, r2
    7084:	bl	0 <coda_product_type_set_description>
    7088:	mov	r3, r0
    708c:	mov	r0, r3
    7090:	sub	sp, fp, #4
    7094:	pop	{fp, pc}
    7098:	.word	0x00000c50

0000709c <cd_product_type_add_product_definition>:
    709c:	push	{fp, lr}
    70a0:	add	fp, sp, #4
    70a4:	sub	sp, sp, #8
    70a8:	str	r0, [fp, #-8]
    70ac:	ldr	r3, [fp, #-8]
    70b0:	ldr	r3, [r3]
    70b4:	ldr	r3, [r3, #396]	; 0x18c
    70b8:	ldr	r2, [r3, #8]
    70bc:	ldr	r3, [fp, #-8]
    70c0:	ldr	r3, [r3]
    70c4:	ldr	r3, [r3, #8]
    70c8:	mov	r1, r3
    70cc:	mov	r0, r2
    70d0:	bl	0 <coda_product_type_add_product_definition>
    70d4:	mov	r3, r0
    70d8:	cmp	r3, #0
    70dc:	beq	70e8 <cd_product_type_add_product_definition+0x4c>
    70e0:	mvn	r3, #0
    70e4:	b	70fc <cd_product_type_add_product_definition+0x60>
    70e8:	ldr	r3, [fp, #-8]
    70ec:	ldr	r3, [r3]
    70f0:	mov	r2, #0
    70f4:	str	r2, [r3, #8]
    70f8:	mov	r3, #0
    70fc:	mov	r0, r3
    7100:	sub	sp, fp, #4
    7104:	pop	{fp, pc}

00007108 <cd_product_type_init>:
    7108:	push	{r4, fp, lr}
    710c:	add	fp, sp, #8
    7110:	sub	sp, sp, #20
    7114:	str	r0, [fp, #-24]	; 0xffffffe8
    7118:	str	r1, [fp, #-28]	; 0xffffffe4
    711c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7120:	ldr	r3, [r3]
    7124:	ldr	r3, [r3]
    7128:	mov	r2, r3
    712c:	ldr	r1, [pc, #160]	; 71d4 <cd_product_type_init+0xcc>
    7130:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7134:	bl	fa4 <get_mandatory_attribute_value>
    7138:	str	r0, [fp, #-16]
    713c:	ldr	r3, [fp, #-16]
    7140:	cmp	r3, #0
    7144:	bne	7150 <cd_product_type_init+0x48>
    7148:	mvn	r3, #0
    714c:	b	71c8 <cd_product_type_init+0xc0>
    7150:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7154:	ldr	r3, [r3]
    7158:	ldr	r2, [pc, #120]	; 71d8 <cd_product_type_init+0xd0>
    715c:	str	r2, [r3, #40]	; 0x28
    7160:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7164:	ldr	r4, [r3]
    7168:	ldr	r0, [fp, #-16]
    716c:	bl	0 <coda_product_type_new>
    7170:	mov	r3, r0
    7174:	str	r3, [r4, #8]
    7178:	ldr	r3, [fp, #-24]	; 0xffffffe8
    717c:	ldr	r3, [r3]
    7180:	ldr	r3, [r3, #8]
    7184:	cmp	r3, #0
    7188:	bne	7194 <cd_product_type_init+0x8c>
    718c:	mvn	r3, #0
    7190:	b	71c8 <cd_product_type_init+0xc0>
    7194:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7198:	ldr	r0, [r3]
    719c:	ldr	r3, [pc, #56]	; 71dc <cd_product_type_init+0xd4>
    71a0:	ldr	r2, [pc, #56]	; 71e0 <cd_product_type_init+0xd8>
    71a4:	mov	r1, #11
    71a8:	bl	14ac <register_sub_element>
    71ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    71b0:	ldr	r0, [r3]
    71b4:	ldr	r3, [pc, #40]	; 71e4 <cd_product_type_init+0xdc>
    71b8:	ldr	r2, [pc, #40]	; 71e8 <cd_product_type_init+0xe0>
    71bc:	mov	r1, #31
    71c0:	bl	14ac <register_sub_element>
    71c4:	mov	r3, #0
    71c8:	mov	r0, r3
    71cc:	sub	sp, fp, #8
    71d0:	pop	{r4, fp, pc}
    71d4:	.word	0x00000aa8
	...

000071ec <cd_product_variable_set_size_expression>:
    71ec:	push	{fp, lr}
    71f0:	add	fp, sp, #4
    71f4:	sub	sp, sp, #8
    71f8:	str	r0, [fp, #-8]
    71fc:	ldr	r3, [fp, #-8]
    7200:	ldr	r3, [r3]
    7204:	ldr	r3, [r3, #396]	; 0x18c
    7208:	ldr	r2, [r3, #8]
    720c:	ldr	r3, [fp, #-8]
    7210:	ldr	r3, [r3]
    7214:	ldr	r3, [r3, #8]
    7218:	mov	r1, r3
    721c:	mov	r0, r2
    7220:	bl	0 <coda_product_variable_set_size_expression>
    7224:	mov	r3, r0
    7228:	cmp	r3, #0
    722c:	beq	7238 <cd_product_variable_set_size_expression+0x4c>
    7230:	mvn	r3, #0
    7234:	b	724c <cd_product_variable_set_size_expression+0x60>
    7238:	ldr	r3, [fp, #-8]
    723c:	ldr	r3, [r3]
    7240:	mov	r2, #0
    7244:	str	r2, [r3, #8]
    7248:	mov	r3, #0
    724c:	mov	r0, r3
    7250:	sub	sp, fp, #4
    7254:	pop	{fp, pc}

00007258 <cd_product_variable_set_init_expression>:
    7258:	push	{fp, lr}
    725c:	add	fp, sp, #4
    7260:	sub	sp, sp, #8
    7264:	str	r0, [fp, #-8]
    7268:	ldr	r3, [fp, #-8]
    726c:	ldr	r3, [r3]
    7270:	ldr	r3, [r3, #396]	; 0x18c
    7274:	ldr	r2, [r3, #8]
    7278:	ldr	r3, [fp, #-8]
    727c:	ldr	r3, [r3]
    7280:	ldr	r3, [r3, #8]
    7284:	mov	r1, r3
    7288:	mov	r0, r2
    728c:	bl	0 <coda_product_variable_set_init_expression>
    7290:	mov	r3, r0
    7294:	cmp	r3, #0
    7298:	beq	72a4 <cd_product_variable_set_init_expression+0x4c>
    729c:	mvn	r3, #0
    72a0:	b	72b8 <cd_product_variable_set_init_expression+0x60>
    72a4:	ldr	r3, [fp, #-8]
    72a8:	ldr	r3, [r3]
    72ac:	mov	r2, #0
    72b0:	str	r2, [r3, #8]
    72b4:	mov	r3, #0
    72b8:	mov	r0, r3
    72bc:	sub	sp, fp, #4
    72c0:	pop	{fp, pc}

000072c4 <cd_product_variable_finalise>:
    72c4:	push	{fp, lr}
    72c8:	add	fp, sp, #4
    72cc:	sub	sp, sp, #8
    72d0:	str	r0, [fp, #-8]
    72d4:	ldr	r3, [fp, #-8]
    72d8:	ldr	r3, [r3]
    72dc:	ldr	r3, [r3, #8]
    72e0:	mov	r0, r3
    72e4:	bl	0 <coda_product_variable_validate>
    72e8:	mov	r3, r0
    72ec:	mov	r0, r3
    72f0:	sub	sp, fp, #4
    72f4:	pop	{fp, pc}

000072f8 <cd_product_variable_init>:
    72f8:	push	{r4, fp, lr}
    72fc:	add	fp, sp, #8
    7300:	sub	sp, sp, #20
    7304:	str	r0, [fp, #-24]	; 0xffffffe8
    7308:	str	r1, [fp, #-28]	; 0xffffffe4
    730c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7310:	ldr	r3, [r3]
    7314:	ldr	r3, [r3]
    7318:	mov	r2, r3
    731c:	ldr	r1, [pc, #176]	; 73d4 <cd_product_variable_init+0xdc>
    7320:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7324:	bl	fa4 <get_mandatory_attribute_value>
    7328:	str	r0, [fp, #-16]
    732c:	ldr	r3, [fp, #-16]
    7330:	cmp	r3, #0
    7334:	bne	7340 <cd_product_variable_init+0x48>
    7338:	mvn	r3, #0
    733c:	b	73c8 <cd_product_variable_init+0xd0>
    7340:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7344:	ldr	r3, [r3]
    7348:	ldr	r2, [pc, #136]	; 73d8 <cd_product_variable_init+0xe0>
    734c:	str	r2, [r3, #40]	; 0x28
    7350:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7354:	ldr	r4, [r3]
    7358:	ldr	r0, [fp, #-16]
    735c:	bl	0 <coda_product_variable_new>
    7360:	mov	r3, r0
    7364:	str	r3, [r4, #8]
    7368:	ldr	r3, [fp, #-24]	; 0xffffffe8
    736c:	ldr	r3, [r3]
    7370:	ldr	r3, [r3, #8]
    7374:	cmp	r3, #0
    7378:	bne	7384 <cd_product_variable_init+0x8c>
    737c:	mvn	r3, #0
    7380:	b	73c8 <cd_product_variable_init+0xd0>
    7384:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7388:	ldr	r0, [r3]
    738c:	ldr	r3, [pc, #72]	; 73dc <cd_product_variable_init+0xe4>
    7390:	ldr	r2, [pc, #72]	; 73e0 <cd_product_variable_init+0xe8>
    7394:	mov	r1, #13
    7398:	bl	14ac <register_sub_element>
    739c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    73a0:	ldr	r0, [r3]
    73a4:	ldr	r3, [pc, #56]	; 73e4 <cd_product_variable_init+0xec>
    73a8:	ldr	r2, [pc, #56]	; 73e8 <cd_product_variable_init+0xf0>
    73ac:	mov	r1, #19
    73b0:	bl	14ac <register_sub_element>
    73b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    73b8:	ldr	r3, [r3]
    73bc:	ldr	r2, [pc, #40]	; 73ec <cd_product_variable_init+0xf4>
    73c0:	str	r2, [r3, #36]	; 0x24
    73c4:	mov	r3, #0
    73c8:	mov	r0, r3
    73cc:	sub	sp, fp, #8
    73d0:	pop	{r4, fp, pc}
    73d4:	.word	0x00000aa8
	...

000073f0 <cd_raw_set_fixed_value>:
    73f0:	push	{fp, lr}
    73f4:	add	fp, sp, #4
    73f8:	sub	sp, sp, #16
    73fc:	str	r0, [fp, #-16]
    7400:	ldr	r3, [fp, #-16]
    7404:	ldr	r3, [r3]
    7408:	ldr	r3, [r3, #12]
    740c:	mov	r0, r3
    7410:	bl	828 <decode_escaped_string>
    7414:	str	r0, [fp, #-8]
    7418:	ldr	r3, [fp, #-8]
    741c:	cmp	r3, #0
    7420:	bge	7438 <cd_raw_set_fixed_value+0x48>
    7424:	ldr	r1, [pc, #100]	; 7490 <cd_raw_set_fixed_value+0xa0>
    7428:	ldr	r0, [pc, #100]	; 7494 <cd_raw_set_fixed_value+0xa4>
    742c:	bl	0 <coda_set_error>
    7430:	mvn	r3, #0
    7434:	b	7484 <cd_raw_set_fixed_value+0x94>
    7438:	ldr	r3, [fp, #-8]
    743c:	cmp	r3, #0
    7440:	ble	7480 <cd_raw_set_fixed_value+0x90>
    7444:	ldr	r3, [fp, #-16]
    7448:	ldr	r3, [r3]
    744c:	ldr	r3, [r3, #396]	; 0x18c
    7450:	ldr	r0, [r3, #8]
    7454:	ldr	r3, [fp, #-16]
    7458:	ldr	r3, [r3]
    745c:	ldr	r3, [r3, #12]
    7460:	mov	r2, r3
    7464:	ldr	r1, [fp, #-8]
    7468:	bl	0 <coda_type_raw_set_fixed_value>
    746c:	mov	r3, r0
    7470:	cmp	r3, #0
    7474:	beq	7480 <cd_raw_set_fixed_value+0x90>
    7478:	mvn	r3, #0
    747c:	b	7484 <cd_raw_set_fixed_value+0x94>
    7480:	mov	r3, #0
    7484:	mov	r0, r3
    7488:	sub	sp, fp, #4
    748c:	pop	{fp, pc}
    7490:	.word	0x00000d44
    7494:	.word	0xfffffe70

00007498 <cd_raw_finalise>:
    7498:	push	{fp, lr}
    749c:	add	fp, sp, #4
    74a0:	sub	sp, sp, #8
    74a4:	str	r0, [fp, #-8]
    74a8:	ldr	r3, [fp, #-8]
    74ac:	ldr	r3, [r3]
    74b0:	ldr	r3, [r3, #8]
    74b4:	mov	r0, r3
    74b8:	bl	0 <coda_type_raw_validate>
    74bc:	mov	r3, r0
    74c0:	mov	r0, r3
    74c4:	sub	sp, fp, #4
    74c8:	pop	{fp, pc}

000074cc <cd_raw_init>:
    74cc:	push	{r4, fp, lr}
    74d0:	add	fp, sp, #8
    74d4:	sub	sp, sp, #12
    74d8:	str	r0, [fp, #-16]
    74dc:	str	r1, [fp, #-20]	; 0xffffffec
    74e0:	ldr	r1, [fp, #-20]	; 0xffffffec
    74e4:	ldr	r0, [fp, #-16]
    74e8:	bl	1128 <handle_format_attribute_for_type>
    74ec:	mov	r3, r0
    74f0:	cmp	r3, #0
    74f4:	beq	7500 <cd_raw_init+0x34>
    74f8:	mvn	r3, #0
    74fc:	b	75cc <cd_raw_init+0x100>
    7500:	ldr	r3, [fp, #-16]
    7504:	ldr	r3, [r3]
    7508:	ldr	r2, [pc, #200]	; 75d8 <cd_raw_init+0x10c>
    750c:	str	r2, [r3, #40]	; 0x28
    7510:	ldr	r3, [fp, #-16]
    7514:	ldr	r4, [r3]
    7518:	ldr	r3, [fp, #-16]
    751c:	ldr	r3, [r3]
    7520:	ldr	r3, [r3, #44]	; 0x2c
    7524:	mov	r0, r3
    7528:	bl	0 <coda_type_raw_new>
    752c:	mov	r3, r0
    7530:	str	r3, [r4, #8]
    7534:	ldr	r3, [fp, #-16]
    7538:	ldr	r3, [r3]
    753c:	ldr	r3, [r3, #8]
    7540:	cmp	r3, #0
    7544:	bne	7550 <cd_raw_init+0x84>
    7548:	mvn	r3, #0
    754c:	b	75cc <cd_raw_init+0x100>
    7550:	ldr	r1, [fp, #-20]	; 0xffffffec
    7554:	ldr	r0, [fp, #-16]
    7558:	bl	100c <handle_name_attribute_for_type>
    755c:	mov	r3, r0
    7560:	cmp	r3, #0
    7564:	beq	7570 <cd_raw_init+0xa4>
    7568:	mvn	r3, #0
    756c:	b	75cc <cd_raw_init+0x100>
    7570:	ldr	r3, [fp, #-16]
    7574:	ldr	r0, [r3]
    7578:	ldr	r3, [pc, #92]	; 75dc <cd_raw_init+0x110>
    757c:	ldr	r2, [pc, #92]	; 75e0 <cd_raw_init+0x114>
    7580:	mov	r1, #11
    7584:	bl	14ac <register_sub_element>
    7588:	ldr	r3, [fp, #-16]
    758c:	ldr	r0, [r3]
    7590:	ldr	r3, [pc, #76]	; 75e4 <cd_raw_init+0x118>
    7594:	ldr	r2, [pc, #76]	; 75e8 <cd_raw_init+0x11c>
    7598:	mov	r1, #7
    759c:	bl	14ac <register_sub_element>
    75a0:	ldr	r3, [fp, #-16]
    75a4:	ldr	r0, [r3]
    75a8:	ldr	r3, [pc, #60]	; 75ec <cd_raw_init+0x120>
    75ac:	ldr	r2, [pc, #44]	; 75e0 <cd_raw_init+0x114>
    75b0:	mov	r1, #16
    75b4:	bl	14ac <register_sub_element>
    75b8:	ldr	r3, [fp, #-16]
    75bc:	ldr	r3, [r3]
    75c0:	ldr	r2, [pc, #40]	; 75f0 <cd_raw_init+0x124>
    75c4:	str	r2, [r3, #36]	; 0x24
    75c8:	mov	r3, #0
    75cc:	mov	r0, r3
    75d0:	sub	sp, fp, #8
    75d4:	pop	{r4, fp, pc}
	...

000075f4 <cd_record_add_field>:
    75f4:	push	{fp, lr}
    75f8:	add	fp, sp, #4
    75fc:	sub	sp, sp, #8
    7600:	str	r0, [fp, #-8]
    7604:	ldr	r3, [fp, #-8]
    7608:	ldr	r3, [r3]
    760c:	ldr	r3, [r3, #396]	; 0x18c
    7610:	ldr	r2, [r3, #8]
    7614:	ldr	r3, [fp, #-8]
    7618:	ldr	r3, [r3]
    761c:	ldr	r3, [r3, #8]
    7620:	mov	r1, r3
    7624:	mov	r0, r2
    7628:	bl	0 <coda_type_record_add_field>
    762c:	mov	r3, r0
    7630:	cmp	r3, #0
    7634:	beq	7640 <cd_record_add_field+0x4c>
    7638:	mvn	r3, #0
    763c:	b	7654 <cd_record_add_field+0x60>
    7640:	ldr	r3, [fp, #-8]
    7644:	ldr	r3, [r3]
    7648:	mov	r2, #0
    764c:	str	r2, [r3, #8]
    7650:	mov	r3, #0
    7654:	mov	r0, r3
    7658:	sub	sp, fp, #4
    765c:	pop	{fp, pc}

00007660 <cd_record_finalise>:
    7660:	push	{fp, lr}
    7664:	add	fp, sp, #4
    7668:	sub	sp, sp, #8
    766c:	str	r0, [fp, #-8]
    7670:	ldr	r3, [fp, #-8]
    7674:	ldr	r3, [r3]
    7678:	ldr	r3, [r3, #8]
    767c:	mov	r0, r3
    7680:	bl	0 <coda_type_record_validate>
    7684:	mov	r3, r0
    7688:	mov	r0, r3
    768c:	sub	sp, fp, #4
    7690:	pop	{fp, pc}

00007694 <cd_record_init>:
    7694:	push	{r4, fp, lr}
    7698:	add	fp, sp, #8
    769c:	sub	sp, sp, #12
    76a0:	str	r0, [fp, #-16]
    76a4:	str	r1, [fp, #-20]	; 0xffffffec
    76a8:	ldr	r1, [fp, #-20]	; 0xffffffec
    76ac:	ldr	r0, [fp, #-16]
    76b0:	bl	1128 <handle_format_attribute_for_type>
    76b4:	mov	r3, r0
    76b8:	cmp	r3, #0
    76bc:	beq	76c8 <cd_record_init+0x34>
    76c0:	mvn	r3, #0
    76c4:	b	77cc <cd_record_init+0x138>
    76c8:	ldr	r3, [fp, #-16]
    76cc:	ldr	r3, [r3]
    76d0:	ldr	r2, [pc, #256]	; 77d8 <cd_record_init+0x144>
    76d4:	str	r2, [r3, #40]	; 0x28
    76d8:	ldr	r3, [fp, #-16]
    76dc:	ldr	r4, [r3]
    76e0:	ldr	r3, [fp, #-16]
    76e4:	ldr	r3, [r3]
    76e8:	ldr	r3, [r3, #44]	; 0x2c
    76ec:	mov	r0, r3
    76f0:	bl	0 <coda_type_record_new>
    76f4:	mov	r3, r0
    76f8:	str	r3, [r4, #8]
    76fc:	ldr	r3, [fp, #-16]
    7700:	ldr	r3, [r3]
    7704:	ldr	r3, [r3, #8]
    7708:	cmp	r3, #0
    770c:	bne	7718 <cd_record_init+0x84>
    7710:	mvn	r3, #0
    7714:	b	77cc <cd_record_init+0x138>
    7718:	ldr	r1, [fp, #-20]	; 0xffffffec
    771c:	ldr	r0, [fp, #-16]
    7720:	bl	100c <handle_name_attribute_for_type>
    7724:	mov	r3, r0
    7728:	cmp	r3, #0
    772c:	beq	7738 <cd_record_init+0xa4>
    7730:	mvn	r3, #0
    7734:	b	77cc <cd_record_init+0x138>
    7738:	ldr	r3, [fp, #-16]
    773c:	ldr	r0, [r3]
    7740:	ldr	r3, [pc, #148]	; 77dc <cd_record_init+0x148>
    7744:	ldr	r2, [pc, #148]	; 77e0 <cd_record_init+0x14c>
    7748:	mov	r1, #11
    774c:	bl	14ac <register_sub_element>
    7750:	ldr	r3, [fp, #-16]
    7754:	ldr	r0, [r3]
    7758:	ldr	r3, [pc, #132]	; 77e4 <cd_record_init+0x150>
    775c:	ldr	r2, [pc, #132]	; 77e8 <cd_record_init+0x154>
    7760:	mov	r1, #7
    7764:	bl	14ac <register_sub_element>
    7768:	ldr	r3, [fp, #-16]
    776c:	ldr	r0, [r3]
    7770:	ldr	r3, [pc, #116]	; 77ec <cd_record_init+0x158>
    7774:	ldr	r2, [pc, #116]	; 77f0 <cd_record_init+0x15c>
    7778:	mov	r1, #14
    777c:	bl	14ac <register_sub_element>
    7780:	ldr	r3, [fp, #-16]
    7784:	ldr	r0, [r3]
    7788:	ldr	r3, [pc, #100]	; 77f4 <cd_record_init+0x160>
    778c:	ldr	r2, [pc, #100]	; 77f8 <cd_record_init+0x164>
    7790:	mov	r1, #4
    7794:	bl	14ac <register_sub_element>
    7798:	ldr	r3, [fp, #-16]
    779c:	ldr	r3, [r3]
    77a0:	ldr	r2, [pc, #84]	; 77fc <cd_record_init+0x168>
    77a4:	str	r2, [r3, #36]	; 0x24
    77a8:	ldr	r1, [fp, #-20]	; 0xffffffec
    77ac:	ldr	r0, [fp, #-16]
    77b0:	bl	1240 <handle_xml_name>
    77b4:	mov	r3, r0
    77b8:	cmp	r3, #0
    77bc:	beq	77c8 <cd_record_init+0x134>
    77c0:	mvn	r3, #0
    77c4:	b	77cc <cd_record_init+0x138>
    77c8:	mov	r3, #0
    77cc:	mov	r0, r3
    77d0:	sub	sp, fp, #8
    77d4:	pop	{r4, fp, pc}
	...

00007800 <cd_scale_factor_set_type>:
    7800:	push	{fp}		; (str fp, [sp, #-4]!)
    7804:	add	fp, sp, #0
    7808:	sub	sp, sp, #12
    780c:	str	r0, [fp, #-8]
    7810:	ldr	r3, [fp, #-8]
    7814:	ldr	r3, [r3]
    7818:	ldr	r3, [r3, #396]	; 0x18c
    781c:	ldr	r2, [fp, #-8]
    7820:	ldr	r2, [r2]
    7824:	ldr	r2, [r2, #8]
    7828:	str	r2, [r3, #8]
    782c:	ldr	r3, [fp, #-8]
    7830:	ldr	r3, [r3]
    7834:	mov	r2, #0
    7838:	str	r2, [r3, #8]
    783c:	mov	r3, #0
    7840:	mov	r0, r3
    7844:	add	sp, fp, #0
    7848:	pop	{fp}		; (ldr fp, [sp], #4)
    784c:	bx	lr

00007850 <cd_scale_factor_finalise>:
    7850:	push	{fp, lr}
    7854:	add	fp, sp, #4
    7858:	sub	sp, sp, #8
    785c:	str	r0, [fp, #-8]
    7860:	ldr	r3, [fp, #-8]
    7864:	ldr	r3, [r3]
    7868:	ldr	r3, [r3, #8]
    786c:	cmp	r3, #0
    7870:	bne	7888 <cd_scale_factor_finalise+0x38>
    7874:	ldr	r1, [pc, #28]	; 7898 <cd_scale_factor_finalise+0x48>
    7878:	ldr	r0, [pc, #28]	; 789c <cd_scale_factor_finalise+0x4c>
    787c:	bl	0 <coda_set_error>
    7880:	mvn	r3, #0
    7884:	b	788c <cd_scale_factor_finalise+0x3c>
    7888:	mov	r3, #0
    788c:	mov	r0, r3
    7890:	sub	sp, fp, #4
    7894:	pop	{fp, pc}
    7898:	.word	0x00001320
    789c:	.word	0xfffffe70

000078a0 <cd_scale_factor_init>:
    78a0:	push	{fp, lr}
    78a4:	add	fp, sp, #4
    78a8:	sub	sp, sp, #8
    78ac:	str	r0, [fp, #-8]
    78b0:	str	r1, [fp, #-12]
    78b4:	ldr	r1, [pc, #304]	; 79ec <cd_scale_factor_init+0x14c>
    78b8:	ldr	r0, [fp, #-12]
    78bc:	bl	f34 <get_attribute_value>
    78c0:	mov	r3, r0
    78c4:	cmp	r3, #0
    78c8:	beq	78e0 <cd_scale_factor_init+0x40>
    78cc:	ldr	r1, [pc, #284]	; 79f0 <cd_scale_factor_init+0x150>
    78d0:	ldr	r0, [pc, #284]	; 79f4 <cd_scale_factor_init+0x154>
    78d4:	bl	0 <coda_set_error>
    78d8:	mvn	r3, #0
    78dc:	b	79e0 <cd_scale_factor_init+0x140>
    78e0:	ldr	r3, [fp, #-8]
    78e4:	ldr	r3, [r3]
    78e8:	ldr	r3, [r3, #396]	; 0x18c
    78ec:	ldr	r3, [r3, #48]	; 0x30
    78f0:	cmp	r3, #0
    78f4:	bne	790c <cd_scale_factor_init+0x6c>
    78f8:	ldr	r3, [pc, #248]	; 79f8 <cd_scale_factor_init+0x158>
    78fc:	ldr	r2, [pc, #248]	; 79fc <cd_scale_factor_init+0x15c>
    7900:	ldr	r1, [pc, #248]	; 7a00 <cd_scale_factor_init+0x160>
    7904:	ldr	r0, [pc, #248]	; 7a04 <cd_scale_factor_init+0x164>
    7908:	bl	0 <__assert_fail>
    790c:	ldr	r3, [fp, #-8]
    7910:	ldr	r3, [r3]
    7914:	ldr	r2, [fp, #-8]
    7918:	ldr	r2, [r2]
    791c:	ldr	r2, [r2, #396]	; 0x18c
    7920:	ldr	r2, [r2, #44]	; 0x2c
    7924:	str	r2, [r3, #44]	; 0x2c
    7928:	ldr	r3, [fp, #-8]
    792c:	ldr	r3, [r3]
    7930:	mov	r2, #1
    7934:	str	r2, [r3, #48]	; 0x30
    7938:	ldr	r1, [pc, #200]	; 7a08 <cd_scale_factor_init+0x168>
    793c:	ldr	r0, [fp, #-12]
    7940:	bl	f34 <get_attribute_value>
    7944:	mov	r3, r0
    7948:	cmp	r3, #0
    794c:	beq	7964 <cd_scale_factor_init+0xc4>
    7950:	ldr	r1, [pc, #180]	; 7a0c <cd_scale_factor_init+0x16c>
    7954:	ldr	r0, [pc, #152]	; 79f4 <cd_scale_factor_init+0x154>
    7958:	bl	0 <coda_set_error>
    795c:	mvn	r3, #0
    7960:	b	79e0 <cd_scale_factor_init+0x140>
    7964:	ldr	r1, [pc, #164]	; 7a10 <cd_scale_factor_init+0x170>
    7968:	ldr	r0, [fp, #-12]
    796c:	bl	f34 <get_attribute_value>
    7970:	mov	r3, r0
    7974:	cmp	r3, #0
    7978:	beq	7990 <cd_scale_factor_init+0xf0>
    797c:	ldr	r1, [pc, #144]	; 7a14 <cd_scale_factor_init+0x174>
    7980:	ldr	r0, [pc, #108]	; 79f4 <cd_scale_factor_init+0x154>
    7984:	bl	0 <coda_set_error>
    7988:	mvn	r3, #0
    798c:	b	79e0 <cd_scale_factor_init+0x140>
    7990:	ldr	r3, [fp, #-8]
    7994:	ldr	r3, [r3]
    7998:	ldr	r2, [pc, #120]	; 7a18 <cd_scale_factor_init+0x178>
    799c:	str	r2, [r3, #40]	; 0x28
    79a0:	ldr	r3, [fp, #-8]
    79a4:	ldr	r3, [r3]
    79a8:	ldr	r1, [pc, #108]	; 7a1c <cd_scale_factor_init+0x17c>
    79ac:	mov	r0, r3
    79b0:	bl	1534 <register_type_elements>
    79b4:	ldr	r3, [fp, #-8]
    79b8:	ldr	r3, [r3]
    79bc:	ldr	r2, [pc, #92]	; 7a20 <cd_scale_factor_init+0x180>
    79c0:	str	r2, [r3, #36]	; 0x24
    79c4:	ldr	r3, [fp, #-8]
    79c8:	ldr	r0, [r3]
    79cc:	ldr	r3, [pc, #80]	; 7a24 <cd_scale_factor_init+0x184>
    79d0:	ldr	r2, [pc, #80]	; 7a28 <cd_scale_factor_init+0x188>
    79d4:	mov	r1, #11
    79d8:	bl	14ac <register_sub_element>
    79dc:	mov	r3, #0
    79e0:	mov	r0, r3
    79e4:	sub	sp, fp, #4
    79e8:	pop	{fp, pc}
    79ec:	.word	0x00000b38
    79f0:	.word	0x00001340
    79f4:	.word	0xfffffe70
    79f8:	.word	0x000022e4
    79fc:	.word	0x00000caa
    7a00:	.word	0x000009bc
    7a04:	.word	0x00000dc8
    7a08:	.word	0x00000aa8
    7a0c:	.word	0x00001370
    7a10:	.word	0x00000b58
    7a14:	.word	0x000013a0
	...

00007a2c <cd_text_set_fixed_value>:
    7a2c:	push	{fp, lr}
    7a30:	add	fp, sp, #4
    7a34:	sub	sp, sp, #8
    7a38:	str	r0, [fp, #-8]
    7a3c:	ldr	r3, [fp, #-8]
    7a40:	ldr	r3, [r3]
    7a44:	ldr	r3, [r3, #12]
    7a48:	mov	r0, r3
    7a4c:	bl	828 <decode_escaped_string>
    7a50:	mov	r3, r0
    7a54:	cmp	r3, #0
    7a58:	bge	7a70 <cd_text_set_fixed_value+0x44>
    7a5c:	ldr	r1, [pc, #68]	; 7aa8 <cd_text_set_fixed_value+0x7c>
    7a60:	ldr	r0, [pc, #68]	; 7aac <cd_text_set_fixed_value+0x80>
    7a64:	bl	0 <coda_set_error>
    7a68:	mvn	r3, #0
    7a6c:	b	7a9c <cd_text_set_fixed_value+0x70>
    7a70:	ldr	r3, [fp, #-8]
    7a74:	ldr	r3, [r3]
    7a78:	ldr	r3, [r3, #396]	; 0x18c
    7a7c:	ldr	r2, [r3, #8]
    7a80:	ldr	r3, [fp, #-8]
    7a84:	ldr	r3, [r3]
    7a88:	ldr	r3, [r3, #12]
    7a8c:	mov	r1, r3
    7a90:	mov	r0, r2
    7a94:	bl	0 <coda_type_text_set_fixed_value>
    7a98:	mov	r3, r0
    7a9c:	mov	r0, r3
    7aa0:	sub	sp, fp, #4
    7aa4:	pop	{fp, pc}
    7aa8:	.word	0x00000d44
    7aac:	.word	0xfffffe70

00007ab0 <cd_text_set_read_type>:
    7ab0:	push	{fp, lr}
    7ab4:	add	fp, sp, #4
    7ab8:	sub	sp, sp, #8
    7abc:	str	r0, [fp, #-8]
    7ac0:	ldr	r3, [fp, #-8]
    7ac4:	ldr	r3, [r3]
    7ac8:	ldr	r3, [r3, #396]	; 0x18c
    7acc:	ldr	r0, [r3, #8]
    7ad0:	ldr	r3, [fp, #-8]
    7ad4:	ldr	r3, [r3]
    7ad8:	ldrd	r2, [r3, #16]
    7adc:	mov	r3, r2
    7ae0:	mov	r1, r3
    7ae4:	bl	0 <coda_type_set_read_type>
    7ae8:	mov	r3, r0
    7aec:	mov	r0, r3
    7af0:	sub	sp, fp, #4
    7af4:	pop	{fp, pc}

00007af8 <cd_text_finalise>:
    7af8:	push	{fp, lr}
    7afc:	add	fp, sp, #4
    7b00:	sub	sp, sp, #8
    7b04:	str	r0, [fp, #-8]
    7b08:	ldr	r3, [fp, #-8]
    7b0c:	ldr	r3, [r3]
    7b10:	ldr	r3, [r3, #8]
    7b14:	mov	r0, r3
    7b18:	bl	0 <coda_type_text_validate>
    7b1c:	mov	r3, r0
    7b20:	mov	r0, r3
    7b24:	sub	sp, fp, #4
    7b28:	pop	{fp, pc}

00007b2c <cd_text_init>:
    7b2c:	push	{r4, fp, lr}
    7b30:	add	fp, sp, #8
    7b34:	sub	sp, sp, #12
    7b38:	str	r0, [fp, #-16]
    7b3c:	str	r1, [fp, #-20]	; 0xffffffec
    7b40:	ldr	r1, [fp, #-20]	; 0xffffffec
    7b44:	ldr	r0, [fp, #-16]
    7b48:	bl	1128 <handle_format_attribute_for_type>
    7b4c:	mov	r3, r0
    7b50:	cmp	r3, #0
    7b54:	beq	7b60 <cd_text_init+0x34>
    7b58:	mvn	r3, #0
    7b5c:	b	7c7c <cd_text_init+0x150>
    7b60:	ldr	r3, [fp, #-16]
    7b64:	ldr	r3, [r3]
    7b68:	ldr	r2, [pc, #280]	; 7c88 <cd_text_init+0x15c>
    7b6c:	str	r2, [r3, #40]	; 0x28
    7b70:	ldr	r3, [fp, #-16]
    7b74:	ldr	r4, [r3]
    7b78:	ldr	r3, [fp, #-16]
    7b7c:	ldr	r3, [r3]
    7b80:	ldr	r3, [r3, #44]	; 0x2c
    7b84:	mov	r0, r3
    7b88:	bl	0 <coda_type_text_new>
    7b8c:	mov	r3, r0
    7b90:	str	r3, [r4, #8]
    7b94:	ldr	r3, [fp, #-16]
    7b98:	ldr	r3, [r3]
    7b9c:	ldr	r3, [r3, #8]
    7ba0:	cmp	r3, #0
    7ba4:	bne	7bb0 <cd_text_init+0x84>
    7ba8:	mvn	r3, #0
    7bac:	b	7c7c <cd_text_init+0x150>
    7bb0:	ldr	r1, [fp, #-20]	; 0xffffffec
    7bb4:	ldr	r0, [fp, #-16]
    7bb8:	bl	100c <handle_name_attribute_for_type>
    7bbc:	mov	r3, r0
    7bc0:	cmp	r3, #0
    7bc4:	beq	7bd0 <cd_text_init+0xa4>
    7bc8:	mvn	r3, #0
    7bcc:	b	7c7c <cd_text_init+0x150>
    7bd0:	ldr	r3, [fp, #-16]
    7bd4:	ldr	r0, [r3]
    7bd8:	ldr	r3, [pc, #172]	; 7c8c <cd_text_init+0x160>
    7bdc:	ldr	r2, [pc, #172]	; 7c90 <cd_text_init+0x164>
    7be0:	mov	r1, #11
    7be4:	bl	14ac <register_sub_element>
    7be8:	ldr	r3, [fp, #-16]
    7bec:	ldr	r0, [r3]
    7bf0:	ldr	r3, [pc, #156]	; 7c94 <cd_text_init+0x168>
    7bf4:	ldr	r2, [pc, #156]	; 7c98 <cd_text_init+0x16c>
    7bf8:	mov	r1, #8
    7bfc:	bl	14ac <register_sub_element>
    7c00:	ldr	r3, [fp, #-16]
    7c04:	ldr	r0, [r3]
    7c08:	ldr	r3, [pc, #140]	; 7c9c <cd_text_init+0x170>
    7c0c:	ldr	r2, [pc, #124]	; 7c90 <cd_text_init+0x164>
    7c10:	mov	r1, #16
    7c14:	bl	14ac <register_sub_element>
    7c18:	ldr	r3, [fp, #-16]
    7c1c:	ldr	r0, [r3]
    7c20:	ldr	r3, [pc, #120]	; 7ca0 <cd_text_init+0x174>
    7c24:	ldr	r2, [pc, #120]	; 7ca4 <cd_text_init+0x178>
    7c28:	mov	r1, #28
    7c2c:	bl	14ac <register_sub_element>
    7c30:	ldr	r3, [fp, #-16]
    7c34:	ldr	r0, [r3]
    7c38:	ldr	r3, [pc, #104]	; 7ca8 <cd_text_init+0x17c>
    7c3c:	ldr	r2, [pc, #104]	; 7cac <cd_text_init+0x180>
    7c40:	mov	r1, #4
    7c44:	bl	14ac <register_sub_element>
    7c48:	ldr	r3, [fp, #-16]
    7c4c:	ldr	r3, [r3]
    7c50:	ldr	r2, [pc, #88]	; 7cb0 <cd_text_init+0x184>
    7c54:	str	r2, [r3, #36]	; 0x24
    7c58:	ldr	r1, [fp, #-20]	; 0xffffffec
    7c5c:	ldr	r0, [fp, #-16]
    7c60:	bl	1240 <handle_xml_name>
    7c64:	mov	r3, r0
    7c68:	cmp	r3, #0
    7c6c:	beq	7c78 <cd_text_init+0x14c>
    7c70:	mvn	r3, #0
    7c74:	b	7c7c <cd_text_init+0x150>
    7c78:	mov	r3, #0
    7c7c:	mov	r0, r3
    7c80:	sub	sp, fp, #8
    7c84:	pop	{r4, fp, pc}
	...

00007cb4 <cd_time_set_type>:
    7cb4:	push	{fp, lr}
    7cb8:	add	fp, sp, #4
    7cbc:	sub	sp, sp, #8
    7cc0:	str	r0, [fp, #-8]
    7cc4:	ldr	r3, [fp, #-8]
    7cc8:	ldr	r3, [r3]
    7ccc:	ldr	r3, [r3, #396]	; 0x18c
    7cd0:	ldr	r2, [r3, #8]
    7cd4:	ldr	r3, [fp, #-8]
    7cd8:	ldr	r3, [r3]
    7cdc:	ldr	r3, [r3, #8]
    7ce0:	mov	r1, r3
    7ce4:	mov	r0, r2
    7ce8:	bl	0 <coda_type_time_set_base_type>
    7cec:	mov	r3, r0
    7cf0:	mov	r0, r3
    7cf4:	sub	sp, fp, #4
    7cf8:	pop	{fp, pc}

00007cfc <cd_time_add_mapping>:
    7cfc:	push	{fp, lr}
    7d00:	add	fp, sp, #4
    7d04:	sub	sp, sp, #8
    7d08:	str	r0, [fp, #-8]
    7d0c:	ldr	r3, [fp, #-8]
    7d10:	ldr	r3, [r3]
    7d14:	ldr	r3, [r3, #396]	; 0x18c
    7d18:	ldr	r2, [r3, #8]
    7d1c:	ldr	r3, [fp, #-8]
    7d20:	ldr	r3, [r3]
    7d24:	ldr	r3, [r3, #8]
    7d28:	mov	r1, r3
    7d2c:	mov	r0, r2
    7d30:	bl	0 <coda_type_time_add_ascii_float_mapping>
    7d34:	mov	r3, r0
    7d38:	cmp	r3, #0
    7d3c:	beq	7d48 <cd_time_add_mapping+0x4c>
    7d40:	mvn	r3, #0
    7d44:	b	7d5c <cd_time_add_mapping+0x60>
    7d48:	ldr	r3, [fp, #-8]
    7d4c:	ldr	r3, [r3]
    7d50:	mov	r2, #0
    7d54:	str	r2, [r3, #8]
    7d58:	mov	r3, #0
    7d5c:	mov	r0, r3
    7d60:	sub	sp, fp, #4
    7d64:	pop	{fp, pc}

00007d68 <cd_time_finalise>:
    7d68:	push	{fp, lr}
    7d6c:	add	fp, sp, #4
    7d70:	sub	sp, sp, #8
    7d74:	str	r0, [fp, #-8]
    7d78:	ldr	r3, [fp, #-8]
    7d7c:	ldr	r3, [r3]
    7d80:	ldr	r3, [r3, #8]
    7d84:	mov	r0, r3
    7d88:	bl	0 <coda_type_time_validate>
    7d8c:	mov	r3, r0
    7d90:	mov	r0, r3
    7d94:	sub	sp, fp, #4
    7d98:	pop	{fp, pc}

00007d9c <cd_time_init>:
    7d9c:	push	{r4, fp, lr}
    7da0:	add	fp, sp, #8
    7da4:	sub	sp, sp, #44	; 0x2c
    7da8:	str	r0, [fp, #-48]	; 0xffffffd0
    7dac:	str	r1, [fp, #-52]	; 0xffffffcc
    7db0:	mov	r3, #0
    7db4:	str	r3, [fp, #-20]	; 0xffffffec
    7db8:	ldr	r1, [fp, #-52]	; 0xffffffcc
    7dbc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7dc0:	bl	1128 <handle_format_attribute_for_type>
    7dc4:	mov	r3, r0
    7dc8:	cmp	r3, #0
    7dcc:	beq	7dd8 <cd_time_init+0x3c>
    7dd0:	mvn	r3, #0
    7dd4:	b	8a38 <cd_time_init+0xc9c>
    7dd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    7ddc:	ldr	r3, [r3]
    7de0:	ldr	r3, [r3]
    7de4:	mov	r2, r3
    7de8:	ldr	r1, [pc, #3156]	; 8a44 <cd_time_init+0xca8>
    7dec:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7df0:	bl	fa4 <get_mandatory_attribute_value>
    7df4:	str	r0, [fp, #-16]
    7df8:	ldr	r3, [fp, #-16]
    7dfc:	cmp	r3, #0
    7e00:	bne	7e0c <cd_time_init+0x70>
    7e04:	mvn	r3, #0
    7e08:	b	8a38 <cd_time_init+0xc9c>
    7e0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    7e10:	ldr	r3, [r3]
    7e14:	ldr	r3, [r3, #44]	; 0x2c
    7e18:	cmp	r3, #0
    7e1c:	bne	8208 <cd_time_init+0x46c>
    7e20:	ldr	r1, [pc, #3104]	; 8a48 <cd_time_init+0xcac>
    7e24:	ldr	r0, [fp, #-16]
    7e28:	bl	0 <strcmp>
    7e2c:	mov	r3, r0
    7e30:	cmp	r3, #0
    7e34:	bne	7e84 <cd_time_init+0xe8>
    7e38:	ldr	r3, [pc, #3084]	; 8a4c <cd_time_init+0xcb0>
    7e3c:	str	r3, [fp, #-16]
    7e40:	ldr	r3, [fp, #-48]	; 0xffffffd0
    7e44:	ldr	r3, [r3]
    7e48:	ldr	r3, [r3, #44]	; 0x2c
    7e4c:	mov	r0, r3
    7e50:	bl	0 <coda_type_text_new>
    7e54:	str	r0, [fp, #-20]	; 0xffffffec
    7e58:	mov	r1, #11
    7e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
    7e60:	bl	0 <coda_type_set_read_type>
    7e64:	ldr	r1, [pc, #3044]	; 8a50 <cd_time_init+0xcb4>
    7e68:	ldr	r0, [fp, #-20]	; 0xffffffec
    7e6c:	bl	0 <coda_type_set_description>
    7e70:	mov	r2, #27
    7e74:	mov	r3, #0
    7e78:	ldr	r0, [fp, #-20]	; 0xffffffec
    7e7c:	bl	0 <coda_type_set_byte_size>
    7e80:	b	8830 <cd_time_init+0xa94>
    7e84:	ldr	r1, [pc, #3016]	; 8a54 <cd_time_init+0xcb8>
    7e88:	ldr	r0, [fp, #-16]
    7e8c:	bl	0 <strcmp>
    7e90:	mov	r3, r0
    7e94:	cmp	r3, #0
    7e98:	bne	7ee8 <cd_time_init+0x14c>
    7e9c:	ldr	r3, [pc, #2996]	; 8a58 <cd_time_init+0xcbc>
    7ea0:	str	r3, [fp, #-16]
    7ea4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    7ea8:	ldr	r3, [r3]
    7eac:	ldr	r3, [r3, #44]	; 0x2c
    7eb0:	mov	r0, r3
    7eb4:	bl	0 <coda_type_text_new>
    7eb8:	str	r0, [fp, #-20]	; 0xffffffec
    7ebc:	mov	r1, #11
    7ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
    7ec4:	bl	0 <coda_type_set_read_type>
    7ec8:	ldr	r1, [pc, #2956]	; 8a5c <cd_time_init+0xcc0>
    7ecc:	ldr	r0, [fp, #-20]	; 0xffffffec
    7ed0:	bl	0 <coda_type_set_description>
    7ed4:	mov	r2, #24
    7ed8:	mov	r3, #0
    7edc:	ldr	r0, [fp, #-20]	; 0xffffffec
    7ee0:	bl	0 <coda_type_set_byte_size>
    7ee4:	b	8830 <cd_time_init+0xa94>
    7ee8:	ldr	r1, [pc, #2928]	; 8a60 <cd_time_init+0xcc4>
    7eec:	ldr	r0, [fp, #-16]
    7ef0:	bl	0 <strcmp>
    7ef4:	mov	r3, r0
    7ef8:	cmp	r3, #0
    7efc:	bne	7f4c <cd_time_init+0x1b0>
    7f00:	ldr	r3, [pc, #2908]	; 8a64 <cd_time_init+0xcc8>
    7f04:	str	r3, [fp, #-16]
    7f08:	ldr	r3, [fp, #-48]	; 0xffffffd0
    7f0c:	ldr	r3, [r3]
    7f10:	ldr	r3, [r3, #44]	; 0x2c
    7f14:	mov	r0, r3
    7f18:	bl	0 <coda_type_text_new>
    7f1c:	str	r0, [fp, #-20]	; 0xffffffec
    7f20:	mov	r1, #11
    7f24:	ldr	r0, [fp, #-20]	; 0xffffffec
    7f28:	bl	0 <coda_type_set_read_type>
    7f2c:	ldr	r1, [pc, #2868]	; 8a68 <cd_time_init+0xccc>
    7f30:	ldr	r0, [fp, #-20]	; 0xffffffec
    7f34:	bl	0 <coda_type_set_description>
    7f38:	mov	r2, #15
    7f3c:	mov	r3, #0
    7f40:	ldr	r0, [fp, #-20]	; 0xffffffec
    7f44:	bl	0 <coda_type_set_byte_size>
    7f48:	b	8830 <cd_time_init+0xa94>
    7f4c:	ldr	r1, [pc, #2840]	; 8a6c <cd_time_init+0xcd0>
    7f50:	ldr	r0, [fp, #-16]
    7f54:	bl	0 <strcmp>
    7f58:	mov	r3, r0
    7f5c:	cmp	r3, #0
    7f60:	bne	7fb0 <cd_time_init+0x214>
    7f64:	ldr	r3, [pc, #2820]	; 8a70 <cd_time_init+0xcd4>
    7f68:	str	r3, [fp, #-16]
    7f6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    7f70:	ldr	r3, [r3]
    7f74:	ldr	r3, [r3, #44]	; 0x2c
    7f78:	mov	r0, r3
    7f7c:	bl	0 <coda_type_text_new>
    7f80:	str	r0, [fp, #-20]	; 0xffffffec
    7f84:	mov	r1, #11
    7f88:	ldr	r0, [fp, #-20]	; 0xffffffec
    7f8c:	bl	0 <coda_type_set_read_type>
    7f90:	ldr	r1, [pc, #2780]	; 8a74 <cd_time_init+0xcd8>
    7f94:	ldr	r0, [fp, #-20]	; 0xffffffec
    7f98:	bl	0 <coda_type_set_description>
    7f9c:	mov	r2, #18
    7fa0:	mov	r3, #0
    7fa4:	ldr	r0, [fp, #-20]	; 0xffffffec
    7fa8:	bl	0 <coda_type_set_byte_size>
    7fac:	b	8830 <cd_time_init+0xa94>
    7fb0:	ldr	r1, [pc, #2752]	; 8a78 <cd_time_init+0xcdc>
    7fb4:	ldr	r0, [fp, #-16]
    7fb8:	bl	0 <strcmp>
    7fbc:	mov	r3, r0
    7fc0:	cmp	r3, #0
    7fc4:	bne	8014 <cd_time_init+0x278>
    7fc8:	ldr	r3, [pc, #2732]	; 8a7c <cd_time_init+0xce0>
    7fcc:	str	r3, [fp, #-16]
    7fd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    7fd4:	ldr	r3, [r3]
    7fd8:	ldr	r3, [r3, #44]	; 0x2c
    7fdc:	mov	r0, r3
    7fe0:	bl	0 <coda_type_text_new>
    7fe4:	str	r0, [fp, #-20]	; 0xffffffec
    7fe8:	mov	r1, #11
    7fec:	ldr	r0, [fp, #-20]	; 0xffffffec
    7ff0:	bl	0 <coda_type_set_read_type>
    7ff4:	ldr	r1, [pc, #2692]	; 8a80 <cd_time_init+0xce4>
    7ff8:	ldr	r0, [fp, #-20]	; 0xffffffec
    7ffc:	bl	0 <coda_type_set_description>
    8000:	mov	r2, #19
    8004:	mov	r3, #0
    8008:	ldr	r0, [fp, #-20]	; 0xffffffec
    800c:	bl	0 <coda_type_set_byte_size>
    8010:	b	8830 <cd_time_init+0xa94>
    8014:	ldr	r1, [pc, #2664]	; 8a84 <cd_time_init+0xce8>
    8018:	ldr	r0, [fp, #-16]
    801c:	bl	0 <strcmp>
    8020:	mov	r3, r0
    8024:	cmp	r3, #0
    8028:	bne	8078 <cd_time_init+0x2dc>
    802c:	ldr	r3, [pc, #2644]	; 8a88 <cd_time_init+0xcec>
    8030:	str	r3, [fp, #-16]
    8034:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8038:	ldr	r3, [r3]
    803c:	ldr	r3, [r3, #44]	; 0x2c
    8040:	mov	r0, r3
    8044:	bl	0 <coda_type_text_new>
    8048:	str	r0, [fp, #-20]	; 0xffffffec
    804c:	mov	r1, #11
    8050:	ldr	r0, [fp, #-20]	; 0xffffffec
    8054:	bl	0 <coda_type_set_read_type>
    8058:	ldr	r1, [pc, #2604]	; 8a8c <cd_time_init+0xcf0>
    805c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8060:	bl	0 <coda_type_set_description>
    8064:	mov	r2, #23
    8068:	mov	r3, #0
    806c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8070:	bl	0 <coda_type_set_byte_size>
    8074:	b	8830 <cd_time_init+0xa94>
    8078:	ldr	r1, [pc, #2576]	; 8a90 <cd_time_init+0xcf4>
    807c:	ldr	r0, [fp, #-16]
    8080:	bl	0 <strcmp>
    8084:	mov	r3, r0
    8088:	cmp	r3, #0
    808c:	bne	80dc <cd_time_init+0x340>
    8090:	ldr	r3, [pc, #2556]	; 8a94 <cd_time_init+0xcf8>
    8094:	str	r3, [fp, #-16]
    8098:	ldr	r3, [fp, #-48]	; 0xffffffd0
    809c:	ldr	r3, [r3]
    80a0:	ldr	r3, [r3, #44]	; 0x2c
    80a4:	mov	r0, r3
    80a8:	bl	0 <coda_type_text_new>
    80ac:	str	r0, [fp, #-20]	; 0xffffffec
    80b0:	mov	r1, #11
    80b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    80b8:	bl	0 <coda_type_set_read_type>
    80bc:	ldr	r1, [pc, #2516]	; 8a98 <cd_time_init+0xcfc>
    80c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    80c4:	bl	0 <coda_type_set_description>
    80c8:	mov	r2, #26
    80cc:	mov	r3, #0
    80d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    80d4:	bl	0 <coda_type_set_byte_size>
    80d8:	b	8830 <cd_time_init+0xa94>
    80dc:	ldr	r1, [pc, #2488]	; 8a9c <cd_time_init+0xd00>
    80e0:	ldr	r0, [fp, #-16]
    80e4:	bl	0 <strcmp>
    80e8:	mov	r3, r0
    80ec:	cmp	r3, #0
    80f0:	bne	8140 <cd_time_init+0x3a4>
    80f4:	ldr	r3, [pc, #2468]	; 8aa0 <cd_time_init+0xd04>
    80f8:	str	r3, [fp, #-16]
    80fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8100:	ldr	r3, [r3]
    8104:	ldr	r3, [r3, #44]	; 0x2c
    8108:	mov	r0, r3
    810c:	bl	0 <coda_type_text_new>
    8110:	str	r0, [fp, #-20]	; 0xffffffec
    8114:	mov	r1, #11
    8118:	ldr	r0, [fp, #-20]	; 0xffffffec
    811c:	bl	0 <coda_type_set_read_type>
    8120:	ldr	r1, [pc, #2428]	; 8aa4 <cd_time_init+0xd08>
    8124:	ldr	r0, [fp, #-20]	; 0xffffffec
    8128:	bl	0 <coda_type_set_description>
    812c:	mov	r2, #30
    8130:	mov	r3, #0
    8134:	ldr	r0, [fp, #-20]	; 0xffffffec
    8138:	bl	0 <coda_type_set_byte_size>
    813c:	b	8830 <cd_time_init+0xa94>
    8140:	ldr	r1, [pc, #2400]	; 8aa8 <cd_time_init+0xd0c>
    8144:	ldr	r0, [fp, #-16]
    8148:	bl	0 <strcmp>
    814c:	mov	r3, r0
    8150:	cmp	r3, #0
    8154:	bne	81a4 <cd_time_init+0x408>
    8158:	ldr	r3, [pc, #2380]	; 8aac <cd_time_init+0xd10>
    815c:	str	r3, [fp, #-16]
    8160:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8164:	ldr	r3, [r3]
    8168:	ldr	r3, [r3, #44]	; 0x2c
    816c:	mov	r0, r3
    8170:	bl	0 <coda_type_text_new>
    8174:	str	r0, [fp, #-20]	; 0xffffffec
    8178:	mov	r1, #11
    817c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8180:	bl	0 <coda_type_set_read_type>
    8184:	ldr	r1, [pc, #2340]	; 8ab0 <cd_time_init+0xd14>
    8188:	ldr	r0, [fp, #-20]	; 0xffffffec
    818c:	bl	0 <coda_type_set_description>
    8190:	mov	r2, #17
    8194:	mov	r3, #0
    8198:	ldr	r0, [fp, #-20]	; 0xffffffec
    819c:	bl	0 <coda_type_set_byte_size>
    81a0:	b	8830 <cd_time_init+0xa94>
    81a4:	ldr	r1, [pc, #2312]	; 8ab4 <cd_time_init+0xd18>
    81a8:	ldr	r0, [fp, #-16]
    81ac:	bl	0 <strcmp>
    81b0:	mov	r3, r0
    81b4:	cmp	r3, #0
    81b8:	bne	8830 <cd_time_init+0xa94>
    81bc:	ldr	r3, [pc, #2292]	; 8ab8 <cd_time_init+0xd1c>
    81c0:	str	r3, [fp, #-16]
    81c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    81c8:	ldr	r3, [r3]
    81cc:	ldr	r3, [r3, #44]	; 0x2c
    81d0:	mov	r0, r3
    81d4:	bl	0 <coda_type_text_new>
    81d8:	str	r0, [fp, #-20]	; 0xffffffec
    81dc:	mov	r1, #11
    81e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    81e4:	bl	0 <coda_type_set_read_type>
    81e8:	ldr	r1, [pc, #2252]	; 8abc <cd_time_init+0xd20>
    81ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    81f0:	bl	0 <coda_type_set_description>
    81f4:	mov	r2, #24
    81f8:	mov	r3, #0
    81fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    8200:	bl	0 <coda_type_set_byte_size>
    8204:	b	8830 <cd_time_init+0xa94>
    8208:	ldr	r3, [fp, #-48]	; 0xffffffd0
    820c:	ldr	r3, [r3]
    8210:	ldr	r3, [r3, #44]	; 0x2c
    8214:	cmp	r3, #1
    8218:	bne	8830 <cd_time_init+0xa94>
    821c:	ldr	r1, [pc, #2204]	; 8ac0 <cd_time_init+0xd24>
    8220:	ldr	r0, [fp, #-16]
    8224:	bl	0 <strcmp>
    8228:	mov	r3, r0
    822c:	cmp	r3, #0
    8230:	bne	83e0 <cd_time_init+0x644>
    8234:	ldr	r3, [pc, #2184]	; 8ac4 <cd_time_init+0xd28>
    8238:	str	r3, [fp, #-16]
    823c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8240:	ldr	r3, [r3]
    8244:	ldr	r3, [r3, #44]	; 0x2c
    8248:	mov	r0, r3
    824c:	bl	0 <coda_type_record_new>
    8250:	str	r0, [fp, #-24]	; 0xffffffe8
    8254:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8258:	str	r3, [fp, #-20]	; 0xffffffec
    825c:	ldr	r1, [pc, #2148]	; 8ac8 <cd_time_init+0xd2c>
    8260:	ldr	r0, [fp, #-20]	; 0xffffffec
    8264:	bl	0 <coda_type_set_description>
    8268:	ldr	r3, [fp, #-48]	; 0xffffffd0
    826c:	ldr	r3, [r3]
    8270:	ldr	r3, [r3, #44]	; 0x2c
    8274:	mov	r1, #2
    8278:	mov	r0, r3
    827c:	bl	0 <coda_type_number_new>
    8280:	str	r0, [fp, #-28]	; 0xffffffe4
    8284:	ldr	r1, [pc, #2112]	; 8acc <cd_time_init+0xd30>
    8288:	ldr	r0, [fp, #-28]	; 0xffffffe4
    828c:	bl	0 <coda_type_set_description>
    8290:	mov	r1, #4
    8294:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8298:	bl	0 <coda_type_set_read_type>
    829c:	mov	r2, #32
    82a0:	mov	r3, #0
    82a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    82a8:	bl	0 <coda_type_set_bit_size>
    82ac:	ldr	r1, [pc, #2076]	; 8ad0 <cd_time_init+0xd34>
    82b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    82b4:	bl	0 <coda_type_number_set_unit>
    82b8:	ldr	r0, [pc, #2068]	; 8ad4 <cd_time_init+0xd38>
    82bc:	bl	0 <coda_type_record_field_new>
    82c0:	str	r0, [fp, #-32]	; 0xffffffe0
    82c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    82c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    82cc:	bl	0 <coda_type_record_field_set_type>
    82d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    82d4:	bl	0 <coda_type_release>
    82d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    82dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    82e0:	bl	0 <coda_type_record_add_field>
    82e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    82e8:	ldr	r3, [r3]
    82ec:	ldr	r3, [r3, #44]	; 0x2c
    82f0:	mov	r1, #2
    82f4:	mov	r0, r3
    82f8:	bl	0 <coda_type_number_new>
    82fc:	str	r0, [fp, #-28]	; 0xffffffe4
    8300:	ldr	r1, [pc, #2000]	; 8ad8 <cd_time_init+0xd3c>
    8304:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8308:	bl	0 <coda_type_set_description>
    830c:	mov	r1, #5
    8310:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8314:	bl	0 <coda_type_set_read_type>
    8318:	mov	r2, #32
    831c:	mov	r3, #0
    8320:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8324:	bl	0 <coda_type_set_bit_size>
    8328:	ldr	r1, [pc, #1964]	; 8adc <cd_time_init+0xd40>
    832c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8330:	bl	0 <coda_type_number_set_unit>
    8334:	ldr	r0, [pc, #1956]	; 8ae0 <cd_time_init+0xd44>
    8338:	bl	0 <coda_type_record_field_new>
    833c:	str	r0, [fp, #-32]	; 0xffffffe0
    8340:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8344:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8348:	bl	0 <coda_type_record_field_set_type>
    834c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8350:	bl	0 <coda_type_release>
    8354:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8358:	ldr	r0, [fp, #-24]	; 0xffffffe8
    835c:	bl	0 <coda_type_record_add_field>
    8360:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8364:	ldr	r3, [r3]
    8368:	ldr	r3, [r3, #44]	; 0x2c
    836c:	mov	r1, #2
    8370:	mov	r0, r3
    8374:	bl	0 <coda_type_number_new>
    8378:	str	r0, [fp, #-28]	; 0xffffffe4
    837c:	ldr	r1, [pc, #1888]	; 8ae4 <cd_time_init+0xd48>
    8380:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8384:	bl	0 <coda_type_set_description>
    8388:	mov	r1, #5
    838c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8390:	bl	0 <coda_type_set_read_type>
    8394:	mov	r2, #32
    8398:	mov	r3, #0
    839c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    83a0:	bl	0 <coda_type_set_bit_size>
    83a4:	ldr	r1, [pc, #1852]	; 8ae8 <cd_time_init+0xd4c>
    83a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    83ac:	bl	0 <coda_type_number_set_unit>
    83b0:	ldr	r0, [pc, #1844]	; 8aec <cd_time_init+0xd50>
    83b4:	bl	0 <coda_type_record_field_new>
    83b8:	str	r0, [fp, #-32]	; 0xffffffe0
    83bc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    83c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    83c4:	bl	0 <coda_type_record_field_set_type>
    83c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    83cc:	bl	0 <coda_type_release>
    83d0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    83d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    83d8:	bl	0 <coda_type_record_add_field>
    83dc:	b	8830 <cd_time_init+0xa94>
    83e0:	ldr	r1, [pc, #1800]	; 8af0 <cd_time_init+0xd54>
    83e4:	ldr	r0, [fp, #-16]
    83e8:	bl	0 <strcmp>
    83ec:	mov	r3, r0
    83f0:	cmp	r3, #0
    83f4:	bne	8528 <cd_time_init+0x78c>
    83f8:	ldr	r3, [pc, #1780]	; 8af4 <cd_time_init+0xd58>
    83fc:	str	r3, [fp, #-16]
    8400:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8404:	ldr	r3, [r3]
    8408:	ldr	r3, [r3, #44]	; 0x2c
    840c:	mov	r0, r3
    8410:	bl	0 <coda_type_record_new>
    8414:	str	r0, [fp, #-24]	; 0xffffffe8
    8418:	ldr	r3, [fp, #-24]	; 0xffffffe8
    841c:	str	r3, [fp, #-20]	; 0xffffffec
    8420:	ldr	r1, [pc, #1744]	; 8af8 <cd_time_init+0xd5c>
    8424:	ldr	r0, [fp, #-20]	; 0xffffffec
    8428:	bl	0 <coda_type_set_description>
    842c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8430:	ldr	r3, [r3]
    8434:	ldr	r3, [r3, #44]	; 0x2c
    8438:	mov	r1, #2
    843c:	mov	r0, r3
    8440:	bl	0 <coda_type_number_new>
    8444:	str	r0, [fp, #-28]	; 0xffffffe4
    8448:	ldr	r1, [pc, #1708]	; 8afc <cd_time_init+0xd60>
    844c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8450:	bl	0 <coda_type_set_description>
    8454:	mov	r1, #4
    8458:	ldr	r0, [fp, #-28]	; 0xffffffe4
    845c:	bl	0 <coda_type_set_read_type>
    8460:	mov	r2, #32
    8464:	mov	r3, #0
    8468:	ldr	r0, [fp, #-28]	; 0xffffffe4
    846c:	bl	0 <coda_type_set_bit_size>
    8470:	ldr	r1, [pc, #1672]	; 8b00 <cd_time_init+0xd64>
    8474:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8478:	bl	0 <coda_type_number_set_unit>
    847c:	ldr	r0, [pc, #1616]	; 8ad4 <cd_time_init+0xd38>
    8480:	bl	0 <coda_type_record_field_new>
    8484:	str	r0, [fp, #-32]	; 0xffffffe0
    8488:	ldr	r1, [fp, #-28]	; 0xffffffe4
    848c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8490:	bl	0 <coda_type_record_field_set_type>
    8494:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8498:	bl	0 <coda_type_release>
    849c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    84a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    84a4:	bl	0 <coda_type_record_add_field>
    84a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    84ac:	ldr	r3, [r3]
    84b0:	ldr	r3, [r3, #44]	; 0x2c
    84b4:	mov	r1, #2
    84b8:	mov	r0, r3
    84bc:	bl	0 <coda_type_number_new>
    84c0:	str	r0, [fp, #-28]	; 0xffffffe4
    84c4:	ldr	r1, [pc, #1592]	; 8b04 <cd_time_init+0xd68>
    84c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    84cc:	bl	0 <coda_type_set_description>
    84d0:	mov	r1, #5
    84d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    84d8:	bl	0 <coda_type_set_read_type>
    84dc:	mov	r2, #32
    84e0:	mov	r3, #0
    84e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    84e8:	bl	0 <coda_type_set_bit_size>
    84ec:	ldr	r1, [pc, #1556]	; 8b08 <cd_time_init+0xd6c>
    84f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    84f4:	bl	0 <coda_type_number_set_unit>
    84f8:	ldr	r0, [pc, #1548]	; 8b0c <cd_time_init+0xd70>
    84fc:	bl	0 <coda_type_record_field_new>
    8500:	str	r0, [fp, #-32]	; 0xffffffe0
    8504:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8508:	ldr	r0, [fp, #-32]	; 0xffffffe0
    850c:	bl	0 <coda_type_record_field_set_type>
    8510:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8514:	bl	0 <coda_type_release>
    8518:	ldr	r1, [fp, #-32]	; 0xffffffe0
    851c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8520:	bl	0 <coda_type_record_add_field>
    8524:	b	8830 <cd_time_init+0xa94>
    8528:	ldr	r1, [pc, #1504]	; 8b10 <cd_time_init+0xd74>
    852c:	ldr	r0, [fp, #-16]
    8530:	bl	0 <strcmp>
    8534:	mov	r3, r0
    8538:	cmp	r3, #0
    853c:	bne	8670 <cd_time_init+0x8d4>
    8540:	ldr	r3, [pc, #1484]	; 8b14 <cd_time_init+0xd78>
    8544:	str	r3, [fp, #-16]
    8548:	ldr	r3, [fp, #-48]	; 0xffffffd0
    854c:	ldr	r3, [r3]
    8550:	ldr	r3, [r3, #44]	; 0x2c
    8554:	mov	r0, r3
    8558:	bl	0 <coda_type_record_new>
    855c:	str	r0, [fp, #-24]	; 0xffffffe8
    8560:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8564:	str	r3, [fp, #-20]	; 0xffffffec
    8568:	ldr	r1, [pc, #1448]	; 8b18 <cd_time_init+0xd7c>
    856c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8570:	bl	0 <coda_type_set_description>
    8574:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8578:	ldr	r3, [r3]
    857c:	ldr	r3, [r3, #44]	; 0x2c
    8580:	mov	r1, #2
    8584:	mov	r0, r3
    8588:	bl	0 <coda_type_number_new>
    858c:	str	r0, [fp, #-28]	; 0xffffffe4
    8590:	ldr	r1, [pc, #1412]	; 8b1c <cd_time_init+0xd80>
    8594:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8598:	bl	0 <coda_type_set_description>
    859c:	mov	r1, #3
    85a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    85a4:	bl	0 <coda_type_set_read_type>
    85a8:	mov	r2, #16
    85ac:	mov	r3, #0
    85b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    85b4:	bl	0 <coda_type_set_bit_size>
    85b8:	ldr	r1, [pc, #1296]	; 8ad0 <cd_time_init+0xd34>
    85bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    85c0:	bl	0 <coda_type_number_set_unit>
    85c4:	ldr	r0, [pc, #1288]	; 8ad4 <cd_time_init+0xd38>
    85c8:	bl	0 <coda_type_record_field_new>
    85cc:	str	r0, [fp, #-32]	; 0xffffffe0
    85d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    85d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    85d8:	bl	0 <coda_type_record_field_set_type>
    85dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    85e0:	bl	0 <coda_type_release>
    85e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    85e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    85ec:	bl	0 <coda_type_record_add_field>
    85f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    85f4:	ldr	r3, [r3]
    85f8:	ldr	r3, [r3, #44]	; 0x2c
    85fc:	mov	r1, #2
    8600:	mov	r0, r3
    8604:	bl	0 <coda_type_number_new>
    8608:	str	r0, [fp, #-28]	; 0xffffffe4
    860c:	ldr	r1, [pc, #1264]	; 8b04 <cd_time_init+0xd68>
    8610:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8614:	bl	0 <coda_type_set_description>
    8618:	mov	r1, #5
    861c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8620:	bl	0 <coda_type_set_read_type>
    8624:	mov	r2, #32
    8628:	mov	r3, #0
    862c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8630:	bl	0 <coda_type_set_bit_size>
    8634:	ldr	r1, [pc, #1228]	; 8b08 <cd_time_init+0xd6c>
    8638:	ldr	r0, [fp, #-28]	; 0xffffffe4
    863c:	bl	0 <coda_type_number_set_unit>
    8640:	ldr	r0, [pc, #1220]	; 8b0c <cd_time_init+0xd70>
    8644:	bl	0 <coda_type_record_field_new>
    8648:	str	r0, [fp, #-32]	; 0xffffffe0
    864c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8650:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8654:	bl	0 <coda_type_record_field_set_type>
    8658:	ldr	r0, [fp, #-28]	; 0xffffffe4
    865c:	bl	0 <coda_type_release>
    8660:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8664:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8668:	bl	0 <coda_type_record_add_field>
    866c:	b	8830 <cd_time_init+0xa94>
    8670:	ldr	r1, [pc, #1192]	; 8b20 <cd_time_init+0xd84>
    8674:	ldr	r0, [fp, #-16]
    8678:	bl	0 <strcmp>
    867c:	mov	r3, r0
    8680:	cmp	r3, #0
    8684:	bne	8830 <cd_time_init+0xa94>
    8688:	ldr	r3, [pc, #1172]	; 8b24 <cd_time_init+0xd88>
    868c:	str	r3, [fp, #-16]
    8690:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8694:	ldr	r3, [r3]
    8698:	ldr	r3, [r3, #44]	; 0x2c
    869c:	mov	r0, r3
    86a0:	bl	0 <coda_type_record_new>
    86a4:	str	r0, [fp, #-24]	; 0xffffffe8
    86a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    86ac:	str	r3, [fp, #-20]	; 0xffffffec
    86b0:	ldr	r1, [pc, #1136]	; 8b28 <cd_time_init+0xd8c>
    86b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    86b8:	bl	0 <coda_type_set_description>
    86bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    86c0:	ldr	r3, [r3]
    86c4:	ldr	r3, [r3, #44]	; 0x2c
    86c8:	mov	r1, #2
    86cc:	mov	r0, r3
    86d0:	bl	0 <coda_type_number_new>
    86d4:	str	r0, [fp, #-28]	; 0xffffffe4
    86d8:	ldr	r1, [pc, #1084]	; 8b1c <cd_time_init+0xd80>
    86dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    86e0:	bl	0 <coda_type_set_description>
    86e4:	mov	r1, #3
    86e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    86ec:	bl	0 <coda_type_set_read_type>
    86f0:	mov	r2, #16
    86f4:	mov	r3, #0
    86f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    86fc:	bl	0 <coda_type_set_bit_size>
    8700:	ldr	r1, [pc, #968]	; 8ad0 <cd_time_init+0xd34>
    8704:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8708:	bl	0 <coda_type_number_set_unit>
    870c:	ldr	r0, [pc, #960]	; 8ad4 <cd_time_init+0xd38>
    8710:	bl	0 <coda_type_record_field_new>
    8714:	str	r0, [fp, #-32]	; 0xffffffe0
    8718:	ldr	r1, [fp, #-28]	; 0xffffffe4
    871c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8720:	bl	0 <coda_type_record_field_set_type>
    8724:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8728:	bl	0 <coda_type_release>
    872c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8730:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8734:	bl	0 <coda_type_record_add_field>
    8738:	ldr	r3, [fp, #-48]	; 0xffffffd0
    873c:	ldr	r3, [r3]
    8740:	ldr	r3, [r3, #44]	; 0x2c
    8744:	mov	r1, #2
    8748:	mov	r0, r3
    874c:	bl	0 <coda_type_number_new>
    8750:	str	r0, [fp, #-28]	; 0xffffffe4
    8754:	ldr	r1, [pc, #936]	; 8b04 <cd_time_init+0xd68>
    8758:	ldr	r0, [fp, #-28]	; 0xffffffe4
    875c:	bl	0 <coda_type_set_description>
    8760:	mov	r1, #5
    8764:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8768:	bl	0 <coda_type_set_read_type>
    876c:	mov	r2, #32
    8770:	mov	r3, #0
    8774:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8778:	bl	0 <coda_type_set_bit_size>
    877c:	ldr	r1, [pc, #900]	; 8b08 <cd_time_init+0xd6c>
    8780:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8784:	bl	0 <coda_type_number_set_unit>
    8788:	ldr	r0, [pc, #892]	; 8b0c <cd_time_init+0xd70>
    878c:	bl	0 <coda_type_record_field_new>
    8790:	str	r0, [fp, #-32]	; 0xffffffe0
    8794:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8798:	ldr	r0, [fp, #-32]	; 0xffffffe0
    879c:	bl	0 <coda_type_record_field_set_type>
    87a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    87a4:	bl	0 <coda_type_release>
    87a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    87ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    87b0:	bl	0 <coda_type_record_add_field>
    87b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    87b8:	ldr	r3, [r3]
    87bc:	ldr	r3, [r3, #44]	; 0x2c
    87c0:	mov	r1, #2
    87c4:	mov	r0, r3
    87c8:	bl	0 <coda_type_number_new>
    87cc:	str	r0, [fp, #-28]	; 0xffffffe4
    87d0:	ldr	r1, [pc, #852]	; 8b2c <cd_time_init+0xd90>
    87d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    87d8:	bl	0 <coda_type_set_description>
    87dc:	mov	r1, #3
    87e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    87e4:	bl	0 <coda_type_set_read_type>
    87e8:	mov	r2, #16
    87ec:	mov	r3, #0
    87f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    87f4:	bl	0 <coda_type_set_bit_size>
    87f8:	ldr	r1, [pc, #744]	; 8ae8 <cd_time_init+0xd4c>
    87fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8800:	bl	0 <coda_type_number_set_unit>
    8804:	ldr	r0, [pc, #736]	; 8aec <cd_time_init+0xd50>
    8808:	bl	0 <coda_type_record_field_new>
    880c:	str	r0, [fp, #-32]	; 0xffffffe0
    8810:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8814:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8818:	bl	0 <coda_type_record_field_set_type>
    881c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8820:	bl	0 <coda_type_release>
    8824:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8828:	ldr	r0, [fp, #-24]	; 0xffffffe8
    882c:	bl	0 <coda_type_record_add_field>
    8830:	sub	r3, fp, #40	; 0x28
    8834:	mov	r1, r3
    8838:	ldr	r0, [fp, #-16]
    883c:	bl	0 <coda_expression_from_string>
    8840:	mov	r3, r0
    8844:	cmp	r3, #0
    8848:	beq	885c <cd_time_init+0xac0>
    884c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8850:	bl	0 <coda_type_release>
    8854:	mvn	r3, #0
    8858:	b	8a38 <cd_time_init+0xc9c>
    885c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8860:	sub	r2, fp, #36	; 0x24
    8864:	mov	r1, r2
    8868:	mov	r0, r3
    886c:	bl	0 <coda_expression_get_type>
    8870:	mov	r3, r0
    8874:	cmp	r3, #0
    8878:	beq	8898 <cd_time_init+0xafc>
    887c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8880:	bl	0 <coda_type_release>
    8884:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8888:	mov	r0, r3
    888c:	bl	0 <coda_expression_delete>
    8890:	mvn	r3, #0
    8894:	b	8a38 <cd_time_init+0xc9c>
    8898:	ldr	r3, [fp, #-36]	; 0xffffffdc
    889c:	cmp	r3, #2
    88a0:	beq	88cc <cd_time_init+0xb30>
    88a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    88a8:	bl	0 <coda_type_release>
    88ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
    88b0:	mov	r0, r3
    88b4:	bl	0 <coda_expression_delete>
    88b8:	ldr	r1, [pc, #624]	; 8b30 <cd_time_init+0xd94>
    88bc:	ldr	r0, [pc, #624]	; 8b34 <cd_time_init+0xd98>
    88c0:	bl	0 <coda_set_error>
    88c4:	mvn	r3, #0
    88c8:	b	8a38 <cd_time_init+0xc9c>
    88cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    88d0:	ldr	r3, [r3]
    88d4:	ldr	r2, [pc, #604]	; 8b38 <cd_time_init+0xd9c>
    88d8:	str	r2, [r3, #40]	; 0x28
    88dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    88e0:	ldr	r4, [r3]
    88e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    88e8:	ldr	r3, [r3]
    88ec:	ldr	r3, [r3, #44]	; 0x2c
    88f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    88f4:	mov	r1, r2
    88f8:	mov	r0, r3
    88fc:	bl	0 <coda_type_time_new>
    8900:	mov	r3, r0
    8904:	str	r3, [r4, #8]
    8908:	ldr	r3, [fp, #-48]	; 0xffffffd0
    890c:	ldr	r3, [r3]
    8910:	ldr	r3, [r3, #8]
    8914:	cmp	r3, #0
    8918:	bne	8938 <cd_time_init+0xb9c>
    891c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8920:	bl	0 <coda_type_release>
    8924:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8928:	mov	r0, r3
    892c:	bl	0 <coda_expression_delete>
    8930:	mvn	r3, #0
    8934:	b	8a38 <cd_time_init+0xc9c>
    8938:	ldr	r3, [fp, #-20]	; 0xffffffec
    893c:	cmp	r3, #0
    8940:	beq	8980 <cd_time_init+0xbe4>
    8944:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8948:	ldr	r3, [r3]
    894c:	ldr	r3, [r3, #8]
    8950:	ldr	r1, [fp, #-20]	; 0xffffffec
    8954:	mov	r0, r3
    8958:	bl	0 <coda_type_time_set_base_type>
    895c:	mov	r3, r0
    8960:	cmp	r3, #0
    8964:	beq	8978 <cd_time_init+0xbdc>
    8968:	ldr	r0, [fp, #-20]	; 0xffffffec
    896c:	bl	0 <coda_type_release>
    8970:	mvn	r3, #0
    8974:	b	8a38 <cd_time_init+0xc9c>
    8978:	ldr	r0, [fp, #-20]	; 0xffffffec
    897c:	bl	0 <coda_type_release>
    8980:	ldr	r1, [fp, #-52]	; 0xffffffcc
    8984:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8988:	bl	100c <handle_name_attribute_for_type>
    898c:	mov	r3, r0
    8990:	cmp	r3, #0
    8994:	beq	89a0 <cd_time_init+0xc04>
    8998:	mvn	r3, #0
    899c:	b	8a38 <cd_time_init+0xc9c>
    89a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    89a4:	ldr	r3, [r3]
    89a8:	ldr	r1, [pc, #396]	; 8b3c <cd_time_init+0xda0>
    89ac:	mov	r0, r3
    89b0:	bl	1534 <register_type_elements>
    89b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    89b8:	ldr	r0, [r3]
    89bc:	ldr	r3, [pc, #380]	; 8b40 <cd_time_init+0xda4>
    89c0:	ldr	r2, [pc, #380]	; 8b44 <cd_time_init+0xda8>
    89c4:	mov	r1, #11
    89c8:	bl	14ac <register_sub_element>
    89cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    89d0:	ldr	r0, [r3]
    89d4:	ldr	r3, [pc, #364]	; 8b48 <cd_time_init+0xdac>
    89d8:	ldr	r2, [pc, #364]	; 8b4c <cd_time_init+0xdb0>
    89dc:	mov	r1, #22
    89e0:	bl	14ac <register_sub_element>
    89e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    89e8:	ldr	r3, [r3]
    89ec:	ldr	r3, [r3, #44]	; 0x2c
    89f0:	cmp	r3, #0
    89f4:	beq	8a24 <cd_time_init+0xc88>
    89f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    89fc:	ldr	r3, [r3]
    8a00:	ldr	r3, [r3, #44]	; 0x2c
    8a04:	cmp	r3, #1
    8a08:	beq	8a24 <cd_time_init+0xc88>
    8a0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8a10:	ldr	r0, [r3]
    8a14:	ldr	r3, [pc, #308]	; 8b50 <cd_time_init+0xdb4>
    8a18:	ldr	r2, [pc, #308]	; 8b54 <cd_time_init+0xdb8>
    8a1c:	mov	r1, #4
    8a20:	bl	14ac <register_sub_element>
    8a24:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8a28:	ldr	r3, [r3]
    8a2c:	ldr	r2, [pc, #292]	; 8b58 <cd_time_init+0xdbc>
    8a30:	str	r2, [r3, #36]	; 0x24
    8a34:	mov	r3, #0
    8a38:	mov	r0, r3
    8a3c:	sub	sp, fp, #8
    8a40:	pop	{r4, fp, pc}
    8a44:	.word	0x000013d0
    8a48:	.word	0x000013dc
    8a4c:	.word	0x000013f4
    8a50:	.word	0x00001420
    8a54:	.word	0x00001458
    8a58:	.word	0x0000146c
    8a5c:	.word	0x00001494
    8a60:	.word	0x000014c4
    8a64:	.word	0x000014d8
    8a68:	.word	0x000014fc
    8a6c:	.word	0x00001524
    8a70:	.word	0x0000153c
    8a74:	.word	0x00001560
    8a78:	.word	0x00001590
    8a7c:	.word	0x000015ac
    8a80:	.word	0x000015d4
    8a84:	.word	0x00001600
    8a88:	.word	0x00001624
    8a8c:	.word	0x000016a4
    8a90:	.word	0x00001728
    8a94:	.word	0x00001744
    8a98:	.word	0x00001770
    8a9c:	.word	0x000017a4
    8aa0:	.word	0x000017c8
    8aa4:	.word	0x00001864
    8aa8:	.word	0x000018f0
    8aac:	.word	0x0000190c
    8ab0:	.word	0x00001930
    8ab4:	.word	0x0000195c
    8ab8:	.word	0x00001978
    8abc:	.word	0x00001a2c
    8ac0:	.word	0x00001abc
    8ac4:	.word	0x00001ad4
    8ac8:	.word	0x00001b20
    8acc:	.word	0x00001b38
    8ad0:	.word	0x00001b68
    8ad4:	.word	0x00001b80
    8ad8:	.word	0x00001b88
    8adc:	.word	0x00001ba4
    8ae0:	.word	0x00001ba8
    8ae4:	.word	0x00001bb0
    8ae8:	.word	0x00001bd4
    8aec:	.word	0x00001bdc
    8af0:	.word	0x00001bec
    8af4:	.word	0x00001c04
    8af8:	.word	0x00001c44
    8afc:	.word	0x00001c5c
    8b00:	.word	0x00001c8c
    8b04:	.word	0x00001ca4
    8b08:	.word	0x00001cc4
    8b0c:	.word	0x00001ccc
    8b10:	.word	0x00001cdc
    8b14:	.word	0x00001cf0
    8b18:	.word	0x00001d28
    8b1c:	.word	0x00001d38
    8b20:	.word	0x00001d68
    8b24:	.word	0x00001d84
    8b28:	.word	0x00001dd8
    8b2c:	.word	0x00001de8
    8b30:	.word	0x00001e10
    8b34:	.word	0xfffffe70
	...

00008b5c <cd_type_set_type>:
    8b5c:	push	{fp, lr}
    8b60:	add	fp, sp, #4
    8b64:	sub	sp, sp, #16
    8b68:	str	r0, [fp, #-16]
    8b6c:	ldr	r3, [fp, #-16]
    8b70:	ldr	r3, [r3]
    8b74:	ldr	r3, [r3, #396]	; 0x18c
    8b78:	ldr	r3, [r3, #8]
    8b7c:	str	r3, [fp, #-8]
    8b80:	ldr	r3, [fp, #-8]
    8b84:	ldr	r3, [r3, #20]
    8b88:	cmp	r3, #0
    8b8c:	beq	8bb0 <cd_type_set_type+0x54>
    8b90:	ldr	r3, [fp, #-16]
    8b94:	ldr	r3, [r3]
    8b98:	ldr	r2, [r3, #8]
    8b9c:	ldr	r3, [fp, #-8]
    8ba0:	ldr	r3, [r3, #20]
    8ba4:	mov	r1, r3
    8ba8:	mov	r0, r2
    8bac:	bl	0 <coda_type_set_description>
    8bb0:	ldr	r3, [fp, #-8]
    8bb4:	ldr	r3, [r3, #36]	; 0x24
    8bb8:	cmp	r3, #0
    8bbc:	beq	8c34 <cd_type_set_type+0xd8>
    8bc0:	ldr	r3, [fp, #-16]
    8bc4:	ldr	r3, [r3]
    8bc8:	ldr	r3, [r3, #8]
    8bcc:	ldr	r3, [r3, #36]	; 0x24
    8bd0:	cmp	r3, #0
    8bd4:	beq	8bec <cd_type_set_type+0x90>
    8bd8:	ldr	r3, [pc, #152]	; 8c78 <cd_type_set_type+0x11c>
    8bdc:	ldr	r2, [pc, #152]	; 8c7c <cd_type_set_type+0x120>
    8be0:	ldr	r1, [pc, #152]	; 8c80 <cd_type_set_type+0x124>
    8be4:	ldr	r0, [pc, #152]	; 8c84 <cd_type_set_type+0x128>
    8be8:	bl	0 <__assert_fail>
    8bec:	ldr	r3, [fp, #-16]
    8bf0:	ldr	r3, [r3]
    8bf4:	ldr	r3, [r3, #8]
    8bf8:	ldr	r2, [fp, #-8]
    8bfc:	ldr	r2, [r2, #36]	; 0x24
    8c00:	str	r2, [r3, #36]	; 0x24
    8c04:	ldr	r3, [fp, #-8]
    8c08:	ldr	r2, [r3, #36]	; 0x24
    8c0c:	ldr	r3, [fp, #-16]
    8c10:	ldr	r3, [r3]
    8c14:	ldr	r3, [r3, #8]
    8c18:	ldr	r3, [r3]
    8c1c:	mov	r1, r3
    8c20:	mov	r0, r2
    8c24:	bl	2094 <type_set_format>
    8c28:	ldr	r3, [fp, #-8]
    8c2c:	mov	r2, #0
    8c30:	str	r2, [r3, #36]	; 0x24
    8c34:	ldr	r0, [fp, #-8]
    8c38:	bl	0 <coda_type_release>
    8c3c:	ldr	r3, [fp, #-16]
    8c40:	ldr	r3, [r3]
    8c44:	ldr	r3, [r3, #396]	; 0x18c
    8c48:	ldr	r2, [fp, #-16]
    8c4c:	ldr	r2, [r2]
    8c50:	ldr	r2, [r2, #8]
    8c54:	str	r2, [r3, #8]
    8c58:	ldr	r3, [fp, #-16]
    8c5c:	ldr	r3, [r3]
    8c60:	mov	r2, #0
    8c64:	str	r2, [r3, #8]
    8c68:	mov	r3, #0
    8c6c:	mov	r0, r3
    8c70:	sub	sp, fp, #4
    8c74:	pop	{fp, pc}
    8c78:	.word	0x000022fc
    8c7c:	.word	0x00000e45
    8c80:	.word	0x000009bc
    8c84:	.word	0x00001e3c

00008c88 <cd_type_init>:
    8c88:	push	{r4, fp, lr}
    8c8c:	add	fp, sp, #8
    8c90:	sub	sp, sp, #12
    8c94:	str	r0, [fp, #-16]
    8c98:	str	r1, [fp, #-20]	; 0xffffffec
    8c9c:	ldr	r1, [pc, #264]	; 8dac <cd_type_init+0x124>
    8ca0:	ldr	r0, [fp, #-20]	; 0xffffffec
    8ca4:	bl	f34 <get_attribute_value>
    8ca8:	mov	r3, r0
    8cac:	cmp	r3, #0
    8cb0:	beq	8cc8 <cd_type_init+0x40>
    8cb4:	ldr	r1, [pc, #244]	; 8db0 <cd_type_init+0x128>
    8cb8:	ldr	r0, [pc, #244]	; 8db4 <cd_type_init+0x12c>
    8cbc:	bl	0 <coda_set_error>
    8cc0:	mvn	r3, #0
    8cc4:	b	8da0 <cd_type_init+0x118>
    8cc8:	ldr	r1, [fp, #-20]	; 0xffffffec
    8ccc:	ldr	r0, [fp, #-16]
    8cd0:	bl	1128 <handle_format_attribute_for_type>
    8cd4:	mov	r3, r0
    8cd8:	cmp	r3, #0
    8cdc:	beq	8ce8 <cd_type_init+0x60>
    8ce0:	mvn	r3, #0
    8ce4:	b	8da0 <cd_type_init+0x118>
    8ce8:	ldr	r3, [fp, #-16]
    8cec:	ldr	r3, [r3]
    8cf0:	ldr	r2, [pc, #192]	; 8db8 <cd_type_init+0x130>
    8cf4:	str	r2, [r3, #40]	; 0x28
    8cf8:	ldr	r3, [fp, #-16]
    8cfc:	ldr	r4, [r3]
    8d00:	ldr	r3, [fp, #-16]
    8d04:	ldr	r3, [r3]
    8d08:	ldr	r3, [r3, #44]	; 0x2c
    8d0c:	mov	r0, r3
    8d10:	bl	0 <coda_type_text_new>
    8d14:	mov	r3, r0
    8d18:	str	r3, [r4, #8]
    8d1c:	ldr	r3, [fp, #-16]
    8d20:	ldr	r3, [r3]
    8d24:	ldr	r3, [r3, #8]
    8d28:	cmp	r3, #0
    8d2c:	bne	8d38 <cd_type_init+0xb0>
    8d30:	mvn	r3, #0
    8d34:	b	8da0 <cd_type_init+0x118>
    8d38:	ldr	r3, [fp, #-16]
    8d3c:	ldr	r3, [r3]
    8d40:	ldr	r1, [pc, #116]	; 8dbc <cd_type_init+0x134>
    8d44:	mov	r0, r3
    8d48:	bl	1534 <register_type_elements>
    8d4c:	ldr	r3, [fp, #-16]
    8d50:	ldr	r0, [r3]
    8d54:	ldr	r3, [pc, #100]	; 8dc0 <cd_type_init+0x138>
    8d58:	ldr	r2, [pc, #100]	; 8dc4 <cd_type_init+0x13c>
    8d5c:	mov	r1, #11
    8d60:	bl	14ac <register_sub_element>
    8d64:	ldr	r3, [fp, #-16]
    8d68:	ldr	r0, [r3]
    8d6c:	ldr	r3, [pc, #84]	; 8dc8 <cd_type_init+0x140>
    8d70:	ldr	r2, [pc, #84]	; 8dcc <cd_type_init+0x144>
    8d74:	mov	r1, #4
    8d78:	bl	14ac <register_sub_element>
    8d7c:	ldr	r1, [fp, #-20]	; 0xffffffec
    8d80:	ldr	r0, [fp, #-16]
    8d84:	bl	1240 <handle_xml_name>
    8d88:	mov	r3, r0
    8d8c:	cmp	r3, #0
    8d90:	beq	8d9c <cd_type_init+0x114>
    8d94:	mvn	r3, #0
    8d98:	b	8da0 <cd_type_init+0x118>
    8d9c:	mov	r3, #0
    8da0:	mov	r0, r3
    8da4:	sub	sp, fp, #8
    8da8:	pop	{r4, fp, pc}
    8dac:	.word	0x00000aa8
    8db0:	.word	0x00001e70
    8db4:	.word	0xfffffe70
	...

00008dd0 <cd_union_set_field_expression>:
    8dd0:	push	{fp, lr}
    8dd4:	add	fp, sp, #4
    8dd8:	sub	sp, sp, #8
    8ddc:	str	r0, [fp, #-8]
    8de0:	ldr	r3, [fp, #-8]
    8de4:	ldr	r3, [r3]
    8de8:	ldr	r3, [r3, #396]	; 0x18c
    8dec:	ldr	r2, [r3, #8]
    8df0:	ldr	r3, [fp, #-8]
    8df4:	ldr	r3, [r3]
    8df8:	ldr	r3, [r3, #8]
    8dfc:	mov	r1, r3
    8e00:	mov	r0, r2
    8e04:	bl	0 <coda_type_union_set_field_expression>
    8e08:	mov	r3, r0
    8e0c:	cmp	r3, #0
    8e10:	beq	8e1c <cd_union_set_field_expression+0x4c>
    8e14:	mvn	r3, #0
    8e18:	b	8e30 <cd_union_set_field_expression+0x60>
    8e1c:	ldr	r3, [fp, #-8]
    8e20:	ldr	r3, [r3]
    8e24:	mov	r2, #0
    8e28:	str	r2, [r3, #8]
    8e2c:	mov	r3, #0
    8e30:	mov	r0, r3
    8e34:	sub	sp, fp, #4
    8e38:	pop	{fp, pc}

00008e3c <cd_union_add_field>:
    8e3c:	push	{fp, lr}
    8e40:	add	fp, sp, #4
    8e44:	sub	sp, sp, #8
    8e48:	str	r0, [fp, #-8]
    8e4c:	ldr	r3, [fp, #-8]
    8e50:	ldr	r3, [r3]
    8e54:	ldr	r3, [r3, #8]
    8e58:	mov	r0, r3
    8e5c:	bl	0 <coda_type_record_field_set_optional>
    8e60:	ldr	r3, [fp, #-8]
    8e64:	ldr	r3, [r3]
    8e68:	ldr	r3, [r3, #396]	; 0x18c
    8e6c:	ldr	r2, [r3, #8]
    8e70:	ldr	r3, [fp, #-8]
    8e74:	ldr	r3, [r3]
    8e78:	ldr	r3, [r3, #8]
    8e7c:	mov	r1, r3
    8e80:	mov	r0, r2
    8e84:	bl	0 <coda_type_record_add_field>
    8e88:	mov	r3, r0
    8e8c:	cmp	r3, #0
    8e90:	beq	8e9c <cd_union_add_field+0x60>
    8e94:	mvn	r3, #0
    8e98:	b	8eb0 <cd_union_add_field+0x74>
    8e9c:	ldr	r3, [fp, #-8]
    8ea0:	ldr	r3, [r3]
    8ea4:	mov	r2, #0
    8ea8:	str	r2, [r3, #8]
    8eac:	mov	r3, #0
    8eb0:	mov	r0, r3
    8eb4:	sub	sp, fp, #4
    8eb8:	pop	{fp, pc}

00008ebc <cd_union_finalise>:
    8ebc:	push	{fp, lr}
    8ec0:	add	fp, sp, #4
    8ec4:	sub	sp, sp, #8
    8ec8:	str	r0, [fp, #-8]
    8ecc:	ldr	r3, [fp, #-8]
    8ed0:	ldr	r3, [r3]
    8ed4:	ldr	r3, [r3, #8]
    8ed8:	mov	r0, r3
    8edc:	bl	0 <coda_type_record_validate>
    8ee0:	mov	r3, r0
    8ee4:	mov	r0, r3
    8ee8:	sub	sp, fp, #4
    8eec:	pop	{fp, pc}

00008ef0 <cd_union_init>:
    8ef0:	push	{r4, fp, lr}
    8ef4:	add	fp, sp, #8
    8ef8:	sub	sp, sp, #12
    8efc:	str	r0, [fp, #-16]
    8f00:	str	r1, [fp, #-20]	; 0xffffffec
    8f04:	ldr	r1, [fp, #-20]	; 0xffffffec
    8f08:	ldr	r0, [fp, #-16]
    8f0c:	bl	1128 <handle_format_attribute_for_type>
    8f10:	mov	r3, r0
    8f14:	cmp	r3, #0
    8f18:	beq	8f24 <cd_union_init+0x34>
    8f1c:	mvn	r3, #0
    8f20:	b	9040 <cd_union_init+0x150>
    8f24:	ldr	r3, [fp, #-16]
    8f28:	ldr	r3, [r3]
    8f2c:	ldr	r2, [pc, #280]	; 904c <cd_union_init+0x15c>
    8f30:	str	r2, [r3, #40]	; 0x28
    8f34:	ldr	r3, [fp, #-16]
    8f38:	ldr	r4, [r3]
    8f3c:	ldr	r3, [fp, #-16]
    8f40:	ldr	r3, [r3]
    8f44:	ldr	r3, [r3, #44]	; 0x2c
    8f48:	mov	r0, r3
    8f4c:	bl	0 <coda_type_union_new>
    8f50:	mov	r3, r0
    8f54:	str	r3, [r4, #8]
    8f58:	ldr	r3, [fp, #-16]
    8f5c:	ldr	r3, [r3]
    8f60:	ldr	r3, [r3, #8]
    8f64:	cmp	r3, #0
    8f68:	bne	8f74 <cd_union_init+0x84>
    8f6c:	mvn	r3, #0
    8f70:	b	9040 <cd_union_init+0x150>
    8f74:	ldr	r1, [fp, #-20]	; 0xffffffec
    8f78:	ldr	r0, [fp, #-16]
    8f7c:	bl	100c <handle_name_attribute_for_type>
    8f80:	mov	r3, r0
    8f84:	cmp	r3, #0
    8f88:	beq	8f94 <cd_union_init+0xa4>
    8f8c:	mvn	r3, #0
    8f90:	b	9040 <cd_union_init+0x150>
    8f94:	ldr	r3, [fp, #-16]
    8f98:	ldr	r0, [r3]
    8f9c:	ldr	r3, [pc, #172]	; 9050 <cd_union_init+0x160>
    8fa0:	ldr	r2, [pc, #172]	; 9054 <cd_union_init+0x164>
    8fa4:	mov	r1, #11
    8fa8:	bl	14ac <register_sub_element>
    8fac:	ldr	r3, [fp, #-16]
    8fb0:	ldr	r0, [r3]
    8fb4:	ldr	r3, [pc, #156]	; 9058 <cd_union_init+0x168>
    8fb8:	ldr	r2, [pc, #156]	; 905c <cd_union_init+0x16c>
    8fbc:	mov	r1, #7
    8fc0:	bl	14ac <register_sub_element>
    8fc4:	ldr	r3, [fp, #-16]
    8fc8:	ldr	r0, [r3]
    8fcc:	ldr	r3, [pc, #140]	; 9060 <cd_union_init+0x170>
    8fd0:	ldr	r2, [pc, #132]	; 905c <cd_union_init+0x16c>
    8fd4:	mov	r1, #15
    8fd8:	bl	14ac <register_sub_element>
    8fdc:	ldr	r3, [fp, #-16]
    8fe0:	ldr	r0, [r3]
    8fe4:	ldr	r3, [pc, #120]	; 9064 <cd_union_init+0x174>
    8fe8:	ldr	r2, [pc, #120]	; 9068 <cd_union_init+0x178>
    8fec:	mov	r1, #14
    8ff0:	bl	14ac <register_sub_element>
    8ff4:	ldr	r3, [fp, #-16]
    8ff8:	ldr	r0, [r3]
    8ffc:	ldr	r3, [pc, #104]	; 906c <cd_union_init+0x17c>
    9000:	ldr	r2, [pc, #104]	; 9070 <cd_union_init+0x180>
    9004:	mov	r1, #4
    9008:	bl	14ac <register_sub_element>
    900c:	ldr	r3, [fp, #-16]
    9010:	ldr	r3, [r3]
    9014:	ldr	r2, [pc, #88]	; 9074 <cd_union_init+0x184>
    9018:	str	r2, [r3, #36]	; 0x24
    901c:	ldr	r1, [fp, #-20]	; 0xffffffec
    9020:	ldr	r0, [fp, #-16]
    9024:	bl	1240 <handle_xml_name>
    9028:	mov	r3, r0
    902c:	cmp	r3, #0
    9030:	beq	903c <cd_union_init+0x14c>
    9034:	mvn	r3, #0
    9038:	b	9040 <cd_union_init+0x150>
    903c:	mov	r3, #0
    9040:	mov	r0, r3
    9044:	sub	sp, fp, #8
    9048:	pop	{r4, fp, pc}
	...

00009078 <cd_vsf_integer_set_type>:
    9078:	push	{fp, lr}
    907c:	add	fp, sp, #4
    9080:	sub	sp, sp, #8
    9084:	str	r0, [fp, #-8]
    9088:	ldr	r3, [fp, #-8]
    908c:	ldr	r3, [r3]
    9090:	ldr	r3, [r3, #396]	; 0x18c
    9094:	ldr	r2, [r3, #8]
    9098:	ldr	r3, [fp, #-8]
    909c:	ldr	r3, [r3]
    90a0:	ldr	r3, [r3, #8]
    90a4:	mov	r1, r3
    90a8:	mov	r0, r2
    90ac:	bl	0 <coda_type_vsf_integer_set_type>
    90b0:	mov	r3, r0
    90b4:	mov	r0, r3
    90b8:	sub	sp, fp, #4
    90bc:	pop	{fp, pc}

000090c0 <cd_vsf_integer_set_scale_factor>:
    90c0:	push	{fp, lr}
    90c4:	add	fp, sp, #4
    90c8:	sub	sp, sp, #8
    90cc:	str	r0, [fp, #-8]
    90d0:	ldr	r3, [fp, #-8]
    90d4:	ldr	r3, [r3]
    90d8:	ldr	r3, [r3, #396]	; 0x18c
    90dc:	ldr	r2, [r3, #8]
    90e0:	ldr	r3, [fp, #-8]
    90e4:	ldr	r3, [r3]
    90e8:	ldr	r3, [r3, #8]
    90ec:	mov	r1, r3
    90f0:	mov	r0, r2
    90f4:	bl	0 <coda_type_vsf_integer_set_scale_factor>
    90f8:	mov	r3, r0
    90fc:	mov	r0, r3
    9100:	sub	sp, fp, #4
    9104:	pop	{fp, pc}

00009108 <cd_vsf_integer_set_unit>:
    9108:	push	{fp, lr}
    910c:	add	fp, sp, #4
    9110:	sub	sp, sp, #8
    9114:	str	r0, [fp, #-8]
    9118:	ldr	r3, [fp, #-8]
    911c:	ldr	r3, [r3]
    9120:	ldr	r3, [r3, #12]
    9124:	cmp	r3, #0
    9128:	bne	9150 <cd_vsf_integer_set_unit+0x48>
    912c:	ldr	r3, [fp, #-8]
    9130:	ldr	r3, [r3]
    9134:	ldr	r3, [r3, #396]	; 0x18c
    9138:	ldr	r3, [r3, #8]
    913c:	ldr	r1, [pc, #68]	; 9188 <cd_vsf_integer_set_unit+0x80>
    9140:	mov	r0, r3
    9144:	bl	0 <coda_type_vsf_integer_set_unit>
    9148:	mov	r3, r0
    914c:	b	917c <cd_vsf_integer_set_unit+0x74>
    9150:	ldr	r3, [fp, #-8]
    9154:	ldr	r3, [r3]
    9158:	ldr	r3, [r3, #396]	; 0x18c
    915c:	ldr	r2, [r3, #8]
    9160:	ldr	r3, [fp, #-8]
    9164:	ldr	r3, [r3]
    9168:	ldr	r3, [r3, #12]
    916c:	mov	r1, r3
    9170:	mov	r0, r2
    9174:	bl	0 <coda_type_vsf_integer_set_unit>
    9178:	mov	r3, r0
    917c:	mov	r0, r3
    9180:	sub	sp, fp, #4
    9184:	pop	{fp, pc}
    9188:	.word	0x00000c50

0000918c <cd_vsf_integer_finalise>:
    918c:	push	{fp, lr}
    9190:	add	fp, sp, #4
    9194:	sub	sp, sp, #8
    9198:	str	r0, [fp, #-8]
    919c:	ldr	r3, [fp, #-8]
    91a0:	ldr	r3, [r3]
    91a4:	ldr	r3, [r3, #8]
    91a8:	mov	r0, r3
    91ac:	bl	0 <coda_type_vsf_integer_validate>
    91b0:	mov	r3, r0
    91b4:	mov	r0, r3
    91b8:	sub	sp, fp, #4
    91bc:	pop	{fp, pc}

000091c0 <cd_vsf_integer_init>:
    91c0:	push	{r4, fp, lr}
    91c4:	add	fp, sp, #8
    91c8:	sub	sp, sp, #12
    91cc:	str	r0, [fp, #-16]
    91d0:	str	r1, [fp, #-20]	; 0xffffffec
    91d4:	ldr	r1, [fp, #-20]	; 0xffffffec
    91d8:	ldr	r0, [fp, #-16]
    91dc:	bl	1128 <handle_format_attribute_for_type>
    91e0:	mov	r3, r0
    91e4:	cmp	r3, #0
    91e8:	beq	91f4 <cd_vsf_integer_init+0x34>
    91ec:	mvn	r3, #0
    91f0:	b	92d4 <cd_vsf_integer_init+0x114>
    91f4:	ldr	r3, [fp, #-16]
    91f8:	ldr	r3, [r3]
    91fc:	ldr	r2, [pc, #220]	; 92e0 <cd_vsf_integer_init+0x120>
    9200:	str	r2, [r3, #40]	; 0x28
    9204:	ldr	r3, [fp, #-16]
    9208:	ldr	r4, [r3]
    920c:	ldr	r3, [fp, #-16]
    9210:	ldr	r3, [r3]
    9214:	ldr	r3, [r3, #44]	; 0x2c
    9218:	mov	r0, r3
    921c:	bl	0 <coda_type_vsf_integer_new>
    9220:	mov	r3, r0
    9224:	str	r3, [r4, #8]
    9228:	ldr	r3, [fp, #-16]
    922c:	ldr	r3, [r3]
    9230:	ldr	r3, [r3, #8]
    9234:	cmp	r3, #0
    9238:	bne	9244 <cd_vsf_integer_init+0x84>
    923c:	mvn	r3, #0
    9240:	b	92d4 <cd_vsf_integer_init+0x114>
    9244:	ldr	r1, [fp, #-20]	; 0xffffffec
    9248:	ldr	r0, [fp, #-16]
    924c:	bl	100c <handle_name_attribute_for_type>
    9250:	mov	r3, r0
    9254:	cmp	r3, #0
    9258:	beq	9264 <cd_vsf_integer_init+0xa4>
    925c:	mvn	r3, #0
    9260:	b	92d4 <cd_vsf_integer_init+0x114>
    9264:	ldr	r3, [fp, #-16]
    9268:	ldr	r0, [r3]
    926c:	ldr	r3, [pc, #112]	; 92e4 <cd_vsf_integer_init+0x124>
    9270:	ldr	r2, [pc, #112]	; 92e8 <cd_vsf_integer_init+0x128>
    9274:	mov	r1, #11
    9278:	bl	14ac <register_sub_element>
    927c:	ldr	r3, [fp, #-16]
    9280:	ldr	r3, [r3]
    9284:	ldr	r1, [pc, #96]	; 92ec <cd_vsf_integer_init+0x12c>
    9288:	mov	r0, r3
    928c:	bl	1534 <register_type_elements>
    9290:	ldr	r3, [fp, #-16]
    9294:	ldr	r0, [r3]
    9298:	ldr	r3, [pc, #80]	; 92f0 <cd_vsf_integer_init+0x130>
    929c:	ldr	r2, [pc, #80]	; 92f4 <cd_vsf_integer_init+0x134>
    92a0:	mov	r1, #36	; 0x24
    92a4:	bl	14ac <register_sub_element>
    92a8:	ldr	r3, [fp, #-16]
    92ac:	ldr	r0, [r3]
    92b0:	ldr	r3, [pc, #64]	; 92f8 <cd_vsf_integer_init+0x138>
    92b4:	ldr	r2, [pc, #44]	; 92e8 <cd_vsf_integer_init+0x128>
    92b8:	mov	r1, #41	; 0x29
    92bc:	bl	14ac <register_sub_element>
    92c0:	ldr	r3, [fp, #-16]
    92c4:	ldr	r3, [r3]
    92c8:	ldr	r2, [pc, #44]	; 92fc <cd_vsf_integer_init+0x13c>
    92cc:	str	r2, [r3, #36]	; 0x24
    92d0:	mov	r3, #0
    92d4:	mov	r0, r3
    92d8:	sub	sp, fp, #8
    92dc:	pop	{r4, fp, pc}
	...

00009300 <whitespace_handler>:
    9300:	push	{fp, lr}
    9304:	add	fp, sp, #4
    9308:	sub	sp, sp, #24
    930c:	str	r0, [fp, #-16]
    9310:	str	r1, [fp, #-20]	; 0xffffffec
    9314:	str	r2, [fp, #-24]	; 0xffffffe8
    9318:	ldr	r3, [fp, #-16]
    931c:	str	r3, [fp, #-8]
    9320:	ldr	r3, [fp, #-8]
    9324:	ldr	r3, [r3, #48]	; 0x30
    9328:	cmp	r3, #0
    932c:	bgt	9360 <whitespace_handler+0x60>
    9330:	ldr	r1, [fp, #-24]	; 0xffffffe8
    9334:	ldr	r0, [fp, #-20]	; 0xffffffec
    9338:	bl	c8 <is_whitespace>
    933c:	mov	r3, r0
    9340:	cmp	r3, #0
    9344:	bne	9364 <whitespace_handler+0x64>
    9348:	ldr	r1, [pc, #28]	; 936c <whitespace_handler+0x6c>
    934c:	ldr	r0, [pc, #28]	; 9370 <whitespace_handler+0x70>
    9350:	bl	0 <coda_set_error>
    9354:	ldr	r0, [fp, #-8]
    9358:	bl	1470 <abort_parser>
    935c:	b	9364 <whitespace_handler+0x64>
    9360:	nop			; (mov r0, r0)
    9364:	sub	sp, fp, #4
    9368:	pop	{fp, pc}
    936c:	.word	0x00001e98
    9370:	.word	0xfffffe70

00009374 <string_handler>:
    9374:	push	{r4, fp, lr}
    9378:	add	fp, sp, #8
    937c:	sub	sp, sp, #44	; 0x2c
    9380:	str	r0, [fp, #-32]	; 0xffffffe0
    9384:	str	r1, [fp, #-36]	; 0xffffffdc
    9388:	str	r2, [fp, #-40]	; 0xffffffd8
    938c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9390:	str	r3, [fp, #-16]
    9394:	ldr	r3, [fp, #-16]
    9398:	ldr	r3, [r3, #48]	; 0x30
    939c:	cmp	r3, #0
    93a0:	bgt	9550 <string_handler+0x1dc>
    93a4:	ldr	r3, [fp, #-16]
    93a8:	ldr	r3, [r3]
    93ac:	ldr	r3, [r3, #12]
    93b0:	cmp	r3, #0
    93b4:	bne	9454 <string_handler+0xe0>
    93b8:	ldr	r3, [fp, #-16]
    93bc:	ldr	r4, [r3]
    93c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    93c4:	add	r3, r3, #1
    93c8:	mov	r0, r3
    93cc:	bl	0 <malloc>
    93d0:	mov	r3, r0
    93d4:	str	r3, [r4, #12]
    93d8:	ldr	r3, [fp, #-16]
    93dc:	ldr	r3, [r3]
    93e0:	ldr	r3, [r3, #12]
    93e4:	cmp	r3, #0
    93e8:	bne	9418 <string_handler+0xa4>
    93ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
    93f0:	add	r2, r3, #1
    93f4:	ldr	r3, [pc, #352]	; 955c <string_handler+0x1e8>
    93f8:	str	r3, [sp]
    93fc:	ldr	r3, [pc, #348]	; 9560 <string_handler+0x1ec>
    9400:	ldr	r1, [pc, #348]	; 9564 <string_handler+0x1f0>
    9404:	mvn	r0, #0
    9408:	bl	0 <coda_set_error>
    940c:	ldr	r0, [fp, #-16]
    9410:	bl	1470 <abort_parser>
    9414:	b	9554 <string_handler+0x1e0>
    9418:	ldr	r3, [fp, #-16]
    941c:	ldr	r3, [r3]
    9420:	ldr	r3, [r3, #12]
    9424:	ldr	r2, [fp, #-40]	; 0xffffffd8
    9428:	ldr	r1, [fp, #-36]	; 0xffffffdc
    942c:	mov	r0, r3
    9430:	bl	0 <memcpy>
    9434:	ldr	r3, [fp, #-16]
    9438:	ldr	r3, [r3]
    943c:	ldr	r2, [r3, #12]
    9440:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9444:	add	r3, r2, r3
    9448:	mov	r2, #0
    944c:	strb	r2, [r3]
    9450:	b	9554 <string_handler+0x1e0>
    9454:	ldr	r3, [fp, #-16]
    9458:	ldr	r3, [r3]
    945c:	ldr	r3, [r3, #12]
    9460:	mov	r0, r3
    9464:	bl	0 <strlen>
    9468:	mov	r3, r0
    946c:	str	r3, [fp, #-20]	; 0xffffffec
    9470:	ldr	r2, [fp, #-20]	; 0xffffffec
    9474:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9478:	add	r3, r2, r3
    947c:	add	r3, r3, #1
    9480:	mov	r0, r3
    9484:	bl	0 <malloc>
    9488:	mov	r3, r0
    948c:	str	r3, [fp, #-24]	; 0xffffffe8
    9490:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9494:	cmp	r3, #0
    9498:	bne	94d0 <string_handler+0x15c>
    949c:	ldr	r2, [fp, #-20]	; 0xffffffec
    94a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    94a4:	add	r3, r2, r3
    94a8:	add	r2, r3, #1
    94ac:	ldr	r3, [pc, #180]	; 9568 <string_handler+0x1f4>
    94b0:	str	r3, [sp]
    94b4:	ldr	r3, [pc, #164]	; 9560 <string_handler+0x1ec>
    94b8:	ldr	r1, [pc, #164]	; 9564 <string_handler+0x1f0>
    94bc:	mvn	r0, #0
    94c0:	bl	0 <coda_set_error>
    94c4:	ldr	r0, [fp, #-16]
    94c8:	bl	1470 <abort_parser>
    94cc:	b	9554 <string_handler+0x1e0>
    94d0:	ldr	r3, [fp, #-16]
    94d4:	ldr	r3, [r3]
    94d8:	ldr	r3, [r3, #12]
    94dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    94e0:	mov	r1, r3
    94e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    94e8:	bl	0 <memcpy>
    94ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    94f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    94f4:	add	r3, r2, r3
    94f8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    94fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    9500:	mov	r0, r3
    9504:	bl	0 <memcpy>
    9508:	ldr	r2, [fp, #-20]	; 0xffffffec
    950c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9510:	add	r3, r2, r3
    9514:	mov	r2, r3
    9518:	ldr	r3, [fp, #-24]	; 0xffffffe8
    951c:	add	r3, r3, r2
    9520:	mov	r2, #0
    9524:	strb	r2, [r3]
    9528:	ldr	r3, [fp, #-16]
    952c:	ldr	r3, [r3]
    9530:	ldr	r3, [r3, #12]
    9534:	mov	r0, r3
    9538:	bl	0 <free>
    953c:	ldr	r3, [fp, #-16]
    9540:	ldr	r3, [r3]
    9544:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9548:	str	r2, [r3, #12]
    954c:	b	9554 <string_handler+0x1e0>
    9550:	nop			; (mov r0, r0)
    9554:	sub	sp, fp, #8
    9558:	pop	{r4, fp, pc}
    955c:	.word	0x00000f01
    9560:	.word	0x000009bc
    9564:	.word	0x00000a1c
    9568:	.word	0x00000f11

0000956c <push_node>:
    956c:	push	{fp, lr}
    9570:	add	fp, sp, #4
    9574:	sub	sp, sp, #24
    9578:	str	r0, [fp, #-16]
    957c:	str	r1, [fp, #-20]	; 0xffffffec
    9580:	str	r2, [fp, #-24]	; 0xffffffe8
    9584:	mov	r0, #400	; 0x190
    9588:	bl	0 <malloc>
    958c:	mov	r3, r0
    9590:	str	r3, [fp, #-8]
    9594:	ldr	r3, [fp, #-8]
    9598:	cmp	r3, #0
    959c:	bne	95b4 <push_node+0x48>
    95a0:	ldr	r3, [pc, #404]	; 973c <push_node+0x1d0>
    95a4:	ldr	r2, [pc, #404]	; 9740 <push_node+0x1d4>
    95a8:	ldr	r1, [pc, #404]	; 9744 <push_node+0x1d8>
    95ac:	ldr	r0, [pc, #404]	; 9748 <push_node+0x1dc>
    95b0:	bl	0 <__assert_fail>
    95b4:	ldr	r3, [fp, #-8]
    95b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    95bc:	str	r2, [r3]
    95c0:	ldr	r3, [fp, #-8]
    95c4:	mov	r2, #0
    95c8:	str	r2, [r3, #4]
    95cc:	ldr	r3, [fp, #-8]
    95d0:	mov	r2, #0
    95d4:	str	r2, [r3, #8]
    95d8:	ldr	r3, [fp, #-8]
    95dc:	mov	r2, #0
    95e0:	str	r2, [r3, #12]
    95e4:	ldr	r1, [fp, #-8]
    95e8:	mvn	r2, #0
    95ec:	mvn	r3, #0
    95f0:	strd	r2, [r1, #16]
    95f4:	bl	0 <coda_NaN>
    95f8:	vmov.f64	d7, d0
    95fc:	ldr	r3, [fp, #-8]
    9600:	vstr	d7, [r3, #24]
    9604:	ldr	r3, [fp, #-8]
    9608:	mov	r2, #0
    960c:	str	r2, [r3, #32]
    9610:	ldr	r3, [fp, #-8]
    9614:	mov	r2, #0
    9618:	str	r2, [r3, #36]	; 0x24
    961c:	ldr	r3, [fp, #-8]
    9620:	mov	r2, #0
    9624:	str	r2, [r3, #40]	; 0x28
    9628:	ldr	r3, [fp, #-8]
    962c:	mov	r2, #0
    9630:	str	r2, [r3, #48]	; 0x30
    9634:	ldr	r3, [fp, #-8]
    9638:	add	r3, r3, #52	; 0x34
    963c:	mov	r2, #172	; 0xac
    9640:	mov	r1, #0
    9644:	mov	r0, r3
    9648:	bl	0 <memset>
    964c:	ldr	r3, [fp, #-8]
    9650:	add	r3, r3, #224	; 0xe0
    9654:	mov	r2, #172	; 0xac
    9658:	mov	r1, #0
    965c:	mov	r0, r3
    9660:	bl	0 <memset>
    9664:	ldr	r3, [fp, #-16]
    9668:	ldr	r2, [r3]
    966c:	ldr	r3, [fp, #-8]
    9670:	str	r2, [r3, #396]	; 0x18c
    9674:	ldr	r3, [fp, #-16]
    9678:	ldr	r2, [fp, #-8]
    967c:	str	r2, [r3]
    9680:	ldr	r3, [fp, #-8]
    9684:	ldr	r3, [r3, #396]	; 0x18c
    9688:	cmp	r3, #0
    968c:	beq	96f0 <push_node+0x184>
    9690:	ldr	r3, [fp, #-8]
    9694:	ldr	r2, [r3, #396]	; 0x18c
    9698:	ldr	r3, [fp, #-20]	; 0xffffffec
    969c:	add	r3, r3, #12
    96a0:	lsl	r3, r3, #2
    96a4:	add	r3, r2, r3
    96a8:	ldr	r3, [r3, #4]
    96ac:	cmp	r3, #0
    96b0:	beq	96f0 <push_node+0x184>
    96b4:	ldr	r3, [fp, #-8]
    96b8:	ldr	r2, [r3, #396]	; 0x18c
    96bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    96c0:	add	r3, r3, #12
    96c4:	lsl	r3, r3, #2
    96c8:	add	r3, r2, r3
    96cc:	ldr	r3, [r3, #4]
    96d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    96d4:	ldr	r0, [fp, #-16]
    96d8:	blx	r3
    96dc:	mov	r3, r0
    96e0:	cmp	r3, #0
    96e4:	beq	96f0 <push_node+0x184>
    96e8:	mvn	r3, #0
    96ec:	b	9730 <push_node+0x1c4>
    96f0:	ldr	r3, [fp, #-8]
    96f4:	ldr	r3, [r3, #32]
    96f8:	cmp	r3, #0
    96fc:	beq	9718 <push_node+0x1ac>
    9700:	ldr	r3, [fp, #-16]
    9704:	ldr	r3, [r3, #4]
    9708:	ldr	r1, [pc, #60]	; 974c <push_node+0x1e0>
    970c:	mov	r0, r3
    9710:	bl	0 <coda_XML_SetCharacterDataHandler>
    9714:	b	972c <push_node+0x1c0>
    9718:	ldr	r3, [fp, #-16]
    971c:	ldr	r3, [r3, #4]
    9720:	ldr	r1, [pc, #40]	; 9750 <push_node+0x1e4>
    9724:	mov	r0, r3
    9728:	bl	0 <coda_XML_SetCharacterDataHandler>
    972c:	mov	r3, #0
    9730:	mov	r0, r3
    9734:	sub	sp, fp, #4
    9738:	pop	{fp, pc}
    973c:	.word	0x00002310
    9740:	.word	0x00000f25
    9744:	.word	0x000009bc
    9748:	.word	0x00001ec8
	...

00009754 <pop_node>:
    9754:	push	{fp, lr}
    9758:	add	fp, sp, #4
    975c:	sub	sp, sp, #16
    9760:	str	r0, [fp, #-16]
    9764:	ldr	r3, [fp, #-16]
    9768:	ldr	r3, [r3]
    976c:	str	r3, [fp, #-8]
    9770:	ldr	r3, [fp, #-8]
    9774:	cmp	r3, #0
    9778:	bne	9790 <pop_node+0x3c>
    977c:	ldr	r3, [pc, #392]	; 990c <pop_node+0x1b8>
    9780:	ldr	r2, [pc, #392]	; 9910 <pop_node+0x1bc>
    9784:	ldr	r1, [pc, #392]	; 9914 <pop_node+0x1c0>
    9788:	ldr	r0, [pc, #392]	; 9918 <pop_node+0x1c4>
    978c:	bl	0 <__assert_fail>
    9790:	ldr	r3, [fp, #-8]
    9794:	ldr	r3, [r3, #36]	; 0x24
    9798:	cmp	r3, #0
    979c:	beq	97c4 <pop_node+0x70>
    97a0:	ldr	r3, [fp, #-8]
    97a4:	ldr	r3, [r3, #36]	; 0x24
    97a8:	ldr	r0, [fp, #-16]
    97ac:	blx	r3
    97b0:	mov	r3, r0
    97b4:	cmp	r3, #0
    97b8:	beq	97c4 <pop_node+0x70>
    97bc:	mvn	r3, #0
    97c0:	b	9900 <pop_node+0x1ac>
    97c4:	ldr	r3, [fp, #-8]
    97c8:	ldr	r3, [r3, #396]	; 0x18c
    97cc:	cmp	r3, #0
    97d0:	beq	9828 <pop_node+0xd4>
    97d4:	ldr	r3, [fp, #-8]
    97d8:	ldr	r3, [r3, #396]	; 0x18c
    97dc:	ldr	r2, [fp, #-8]
    97e0:	ldr	r2, [r2]
    97e4:	add	r2, r2, #56	; 0x38
    97e8:	ldr	r3, [r3, r2, lsl #2]
    97ec:	cmp	r3, #0
    97f0:	beq	9828 <pop_node+0xd4>
    97f4:	ldr	r3, [fp, #-8]
    97f8:	ldr	r3, [r3, #396]	; 0x18c
    97fc:	ldr	r2, [fp, #-8]
    9800:	ldr	r2, [r2]
    9804:	add	r2, r2, #56	; 0x38
    9808:	ldr	r3, [r3, r2, lsl #2]
    980c:	ldr	r0, [fp, #-16]
    9810:	blx	r3
    9814:	mov	r3, r0
    9818:	cmp	r3, #0
    981c:	beq	9828 <pop_node+0xd4>
    9820:	mvn	r3, #0
    9824:	b	9900 <pop_node+0x1ac>
    9828:	ldr	r3, [fp, #-8]
    982c:	ldr	r3, [r3, #8]
    9830:	cmp	r3, #0
    9834:	beq	9874 <pop_node+0x120>
    9838:	ldr	r3, [fp, #-8]
    983c:	ldr	r3, [r3, #40]	; 0x28
    9840:	cmp	r3, #0
    9844:	bne	985c <pop_node+0x108>
    9848:	ldr	r3, [pc, #188]	; 990c <pop_node+0x1b8>
    984c:	ldr	r2, [pc, #200]	; 991c <pop_node+0x1c8>
    9850:	ldr	r1, [pc, #188]	; 9914 <pop_node+0x1c0>
    9854:	ldr	r0, [pc, #196]	; 9920 <pop_node+0x1cc>
    9858:	bl	0 <__assert_fail>
    985c:	ldr	r3, [fp, #-8]
    9860:	ldr	r3, [r3, #40]	; 0x28
    9864:	ldr	r2, [fp, #-8]
    9868:	ldr	r2, [r2, #8]
    986c:	mov	r0, r2
    9870:	blx	r3
    9874:	ldr	r3, [fp, #-8]
    9878:	ldr	r3, [r3, #12]
    987c:	cmp	r3, #0
    9880:	beq	9894 <pop_node+0x140>
    9884:	ldr	r3, [fp, #-8]
    9888:	ldr	r3, [r3, #12]
    988c:	mov	r0, r3
    9890:	bl	0 <free>
    9894:	ldr	r3, [fp, #-8]
    9898:	ldr	r2, [r3, #396]	; 0x18c
    989c:	ldr	r3, [fp, #-16]
    98a0:	str	r2, [r3]
    98a4:	ldr	r0, [fp, #-8]
    98a8:	bl	0 <free>
    98ac:	ldr	r3, [fp, #-16]
    98b0:	ldr	r3, [r3]
    98b4:	cmp	r3, #0
    98b8:	beq	98e8 <pop_node+0x194>
    98bc:	ldr	r3, [fp, #-16]
    98c0:	ldr	r3, [r3]
    98c4:	ldr	r3, [r3, #32]
    98c8:	cmp	r3, #0
    98cc:	beq	98e8 <pop_node+0x194>
    98d0:	ldr	r3, [fp, #-16]
    98d4:	ldr	r3, [r3, #4]
    98d8:	ldr	r1, [pc, #68]	; 9924 <pop_node+0x1d0>
    98dc:	mov	r0, r3
    98e0:	bl	0 <coda_XML_SetCharacterDataHandler>
    98e4:	b	98fc <pop_node+0x1a8>
    98e8:	ldr	r3, [fp, #-16]
    98ec:	ldr	r3, [r3, #4]
    98f0:	ldr	r1, [pc, #48]	; 9928 <pop_node+0x1d4>
    98f4:	mov	r0, r3
    98f8:	bl	0 <coda_XML_SetCharacterDataHandler>
    98fc:	mov	r3, #0
    9900:	mov	r0, r3
    9904:	sub	sp, fp, #4
    9908:	pop	{fp, pc}
    990c:	.word	0x0000231c
    9910:	.word	0x00000f4d
    9914:	.word	0x000009bc
    9918:	.word	0x00001ec8
    991c:	.word	0x00000f61
    9920:	.word	0x00001ed8
	...

0000992c <start_element_handler>:
    992c:	push	{r4, r5, fp, lr}
    9930:	add	fp, sp, #12
    9934:	sub	sp, sp, #32
    9938:	str	r0, [fp, #-24]	; 0xffffffe8
    993c:	str	r1, [fp, #-28]	; 0xffffffe4
    9940:	str	r2, [fp, #-32]	; 0xffffffe0
    9944:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9948:	str	r3, [fp, #-16]
    994c:	ldr	r3, [fp, #-16]
    9950:	ldr	r3, [r3, #48]	; 0x30
    9954:	cmp	r3, #0
    9958:	ble	9974 <start_element_handler+0x48>
    995c:	ldr	r3, [fp, #-16]
    9960:	ldr	r3, [r3, #48]	; 0x30
    9964:	add	r2, r3, #1
    9968:	ldr	r3, [fp, #-16]
    996c:	str	r2, [r3, #48]	; 0x30
    9970:	b	9af8 <start_element_handler+0x1cc>
    9974:	ldr	r3, [fp, #-16]
    9978:	ldr	r3, [r3, #8]
    997c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9980:	mov	r0, r3
    9984:	bl	0 <coda_hashtable_get_index_from_name>
    9988:	str	r0, [fp, #-20]	; 0xffffffec
    998c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9990:	cmp	r3, #0
    9994:	bge	99c4 <start_element_handler+0x98>
    9998:	mov	r2, #44	; 0x2c
    999c:	ldr	r1, [pc, #348]	; 9b00 <start_element_handler+0x1d4>
    99a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    99a4:	bl	0 <strncmp>
    99a8:	mov	r3, r0
    99ac:	cmp	r3, #0
    99b0:	beq	99c4 <start_element_handler+0x98>
    99b4:	ldr	r3, [fp, #-16]
    99b8:	mov	r2, #1
    99bc:	str	r2, [r3, #48]	; 0x30
    99c0:	b	9af8 <start_element_handler+0x1cc>
    99c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    99c8:	cmp	r3, #0
    99cc:	blt	99f4 <start_element_handler+0xc8>
    99d0:	ldr	r3, [fp, #-16]
    99d4:	ldr	r2, [r3]
    99d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    99dc:	add	r3, r3, #12
    99e0:	lsl	r3, r3, #2
    99e4:	add	r3, r2, r3
    99e8:	ldr	r3, [r3, #4]
    99ec:	cmp	r3, #0
    99f0:	bne	9ad4 <start_element_handler+0x1a8>
    99f4:	ldr	r3, [fp, #-16]
    99f8:	ldr	r3, [r3]
    99fc:	ldr	r3, [r3]
    9a00:	cmn	r3, #1
    9a04:	bne	9a28 <start_element_handler+0xfc>
    9a08:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9a0c:	bl	0 <coda_element_name_from_xml_name>
    9a10:	mov	r3, r0
    9a14:	mov	r2, r3
    9a18:	ldr	r1, [pc, #228]	; 9b04 <start_element_handler+0x1d8>
    9a1c:	ldr	r0, [pc, #228]	; 9b08 <start_element_handler+0x1dc>
    9a20:	bl	0 <coda_set_error>
    9a24:	b	9ac8 <start_element_handler+0x19c>
    9a28:	ldr	r3, [fp, #-16]
    9a2c:	ldr	r3, [r3]
    9a30:	ldr	r3, [r3, #48]	; 0x30
    9a34:	cmp	r3, #0
    9a38:	beq	9a94 <start_element_handler+0x168>
    9a3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9a40:	bl	0 <coda_element_name_from_xml_name>
    9a44:	mov	r4, r0
    9a48:	ldr	r3, [fp, #-16]
    9a4c:	ldr	r3, [r3]
    9a50:	ldr	r3, [r3]
    9a54:	mov	r0, r3
    9a58:	bl	0 <xml_element_name>
    9a5c:	mov	r5, r0
    9a60:	ldr	r3, [fp, #-16]
    9a64:	ldr	r3, [r3]
    9a68:	ldr	r3, [r3, #44]	; 0x2c
    9a6c:	mov	r0, r3
    9a70:	bl	0 <coda_type_get_format_name>
    9a74:	mov	r3, r0
    9a78:	str	r3, [sp]
    9a7c:	mov	r3, r5
    9a80:	mov	r2, r4
    9a84:	ldr	r1, [pc, #128]	; 9b0c <start_element_handler+0x1e0>
    9a88:	ldr	r0, [pc, #120]	; 9b08 <start_element_handler+0x1dc>
    9a8c:	bl	0 <coda_set_error>
    9a90:	b	9ac8 <start_element_handler+0x19c>
    9a94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9a98:	bl	0 <coda_element_name_from_xml_name>
    9a9c:	mov	r4, r0
    9aa0:	ldr	r3, [fp, #-16]
    9aa4:	ldr	r3, [r3]
    9aa8:	ldr	r3, [r3]
    9aac:	mov	r0, r3
    9ab0:	bl	0 <xml_element_name>
    9ab4:	mov	r3, r0
    9ab8:	mov	r2, r4
    9abc:	ldr	r1, [pc, #76]	; 9b10 <start_element_handler+0x1e4>
    9ac0:	ldr	r0, [pc, #64]	; 9b08 <start_element_handler+0x1dc>
    9ac4:	bl	0 <coda_set_error>
    9ac8:	ldr	r0, [fp, #-16]
    9acc:	bl	1470 <abort_parser>
    9ad0:	b	9af8 <start_element_handler+0x1cc>
    9ad4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9ad8:	ldr	r1, [fp, #-20]	; 0xffffffec
    9adc:	ldr	r0, [fp, #-16]
    9ae0:	bl	956c <push_node>
    9ae4:	mov	r3, r0
    9ae8:	cmp	r3, #0
    9aec:	beq	9af8 <start_element_handler+0x1cc>
    9af0:	ldr	r0, [fp, #-16]
    9af4:	bl	1470 <abort_parser>
    9af8:	sub	sp, fp, #12
    9afc:	pop	{r4, r5, fp, pc}
    9b00:	.word	0x00001ef0
    9b04:	.word	0x00001f20
    9b08:	.word	0xfffffe70
    9b0c:	.word	0x00001f50
    9b10:	.word	0x00001f88

00009b14 <end_element_handler>:
    9b14:	push	{fp, lr}
    9b18:	add	fp, sp, #4
    9b1c:	sub	sp, sp, #16
    9b20:	str	r0, [fp, #-16]
    9b24:	str	r1, [fp, #-20]	; 0xffffffec
    9b28:	ldr	r3, [fp, #-16]
    9b2c:	str	r3, [fp, #-8]
    9b30:	ldr	r3, [fp, #-8]
    9b34:	ldr	r3, [r3, #36]	; 0x24
    9b38:	cmp	r3, #0
    9b3c:	bne	9b88 <end_element_handler+0x74>
    9b40:	ldr	r3, [fp, #-8]
    9b44:	ldr	r3, [r3, #48]	; 0x30
    9b48:	cmp	r3, #0
    9b4c:	ble	9b68 <end_element_handler+0x54>
    9b50:	ldr	r3, [fp, #-8]
    9b54:	ldr	r3, [r3, #48]	; 0x30
    9b58:	sub	r2, r3, #1
    9b5c:	ldr	r3, [fp, #-8]
    9b60:	str	r2, [r3, #48]	; 0x30
    9b64:	b	9b8c <end_element_handler+0x78>
    9b68:	ldr	r0, [fp, #-8]
    9b6c:	bl	9754 <pop_node>
    9b70:	mov	r3, r0
    9b74:	cmp	r3, #0
    9b78:	beq	9b8c <end_element_handler+0x78>
    9b7c:	ldr	r0, [fp, #-8]
    9b80:	bl	1470 <abort_parser>
    9b84:	b	9b8c <end_element_handler+0x78>
    9b88:	nop			; (mov r0, r0)
    9b8c:	sub	sp, fp, #4
    9b90:	pop	{fp, pc}

00009b94 <parser_info_init>:
    9b94:	push	{fp}		; (str fp, [sp, #-4]!)
    9b98:	add	fp, sp, #0
    9b9c:	sub	sp, sp, #12
    9ba0:	str	r0, [fp, #-8]
    9ba4:	ldr	r3, [fp, #-8]
    9ba8:	mov	r2, #0
    9bac:	str	r2, [r3]
    9bb0:	ldr	r3, [fp, #-8]
    9bb4:	mov	r2, #0
    9bb8:	str	r2, [r3, #4]
    9bbc:	ldr	r3, [fp, #-8]
    9bc0:	mov	r2, #0
    9bc4:	str	r2, [r3, #8]
    9bc8:	ldr	r3, [fp, #-8]
    9bcc:	mov	r2, #0
    9bd0:	str	r2, [r3, #12]
    9bd4:	ldr	r3, [fp, #-8]
    9bd8:	mov	r2, #0
    9bdc:	str	r2, [r3, #16]
    9be0:	ldr	r3, [fp, #-8]
    9be4:	mov	r2, #0
    9be8:	str	r2, [r3, #24]
    9bec:	ldr	r3, [fp, #-8]
    9bf0:	mov	r2, #0
    9bf4:	str	r2, [r3, #28]
    9bf8:	ldr	r3, [fp, #-8]
    9bfc:	mov	r2, #0
    9c00:	str	r2, [r3, #32]
    9c04:	ldr	r3, [fp, #-8]
    9c08:	mov	r2, #0
    9c0c:	str	r2, [r3, #36]	; 0x24
    9c10:	ldr	r3, [fp, #-8]
    9c14:	mov	r2, #0
    9c18:	str	r2, [r3, #40]	; 0x28
    9c1c:	ldr	r3, [fp, #-8]
    9c20:	mov	r2, #1
    9c24:	str	r2, [r3, #44]	; 0x2c
    9c28:	ldr	r3, [fp, #-8]
    9c2c:	mov	r2, #0
    9c30:	str	r2, [r3, #48]	; 0x30
    9c34:	nop			; (mov r0, r0)
    9c38:	add	sp, fp, #0
    9c3c:	pop	{fp}		; (ldr fp, [sp], #4)
    9c40:	bx	lr

00009c44 <parser_info_delete>:
    9c44:	push	{fp, lr}
    9c48:	add	fp, sp, #4
    9c4c:	sub	sp, sp, #16
    9c50:	str	r0, [fp, #-16]
    9c54:	b	9ce8 <parser_info_delete+0xa4>
    9c58:	ldr	r3, [fp, #-16]
    9c5c:	ldr	r3, [r3]
    9c60:	str	r3, [fp, #-8]
    9c64:	ldr	r3, [fp, #-8]
    9c68:	ldr	r3, [r3, #8]
    9c6c:	cmp	r3, #0
    9c70:	beq	9cb0 <parser_info_delete+0x6c>
    9c74:	ldr	r3, [fp, #-8]
    9c78:	ldr	r3, [r3, #40]	; 0x28
    9c7c:	cmp	r3, #0
    9c80:	bne	9c98 <parser_info_delete+0x54>
    9c84:	ldr	r3, [pc, #228]	; 9d70 <parser_info_delete+0x12c>
    9c88:	ldr	r2, [pc, #228]	; 9d74 <parser_info_delete+0x130>
    9c8c:	ldr	r1, [pc, #228]	; 9d78 <parser_info_delete+0x134>
    9c90:	ldr	r0, [pc, #228]	; 9d7c <parser_info_delete+0x138>
    9c94:	bl	0 <__assert_fail>
    9c98:	ldr	r3, [fp, #-8]
    9c9c:	ldr	r3, [r3, #40]	; 0x28
    9ca0:	ldr	r2, [fp, #-8]
    9ca4:	ldr	r2, [r2, #8]
    9ca8:	mov	r0, r2
    9cac:	blx	r3
    9cb0:	ldr	r3, [fp, #-8]
    9cb4:	ldr	r3, [r3, #12]
    9cb8:	cmp	r3, #0
    9cbc:	beq	9cd0 <parser_info_delete+0x8c>
    9cc0:	ldr	r3, [fp, #-8]
    9cc4:	ldr	r3, [r3, #12]
    9cc8:	mov	r0, r3
    9ccc:	bl	0 <free>
    9cd0:	ldr	r3, [fp, #-8]
    9cd4:	ldr	r2, [r3, #396]	; 0x18c
    9cd8:	ldr	r3, [fp, #-16]
    9cdc:	str	r2, [r3]
    9ce0:	ldr	r0, [fp, #-8]
    9ce4:	bl	0 <free>
    9ce8:	ldr	r3, [fp, #-16]
    9cec:	ldr	r3, [r3]
    9cf0:	cmp	r3, #0
    9cf4:	bne	9c58 <parser_info_delete+0x14>
    9cf8:	ldr	r3, [fp, #-16]
    9cfc:	ldr	r3, [r3, #4]
    9d00:	cmp	r3, #0
    9d04:	beq	9d18 <parser_info_delete+0xd4>
    9d08:	ldr	r3, [fp, #-16]
    9d0c:	ldr	r3, [r3, #4]
    9d10:	mov	r0, r3
    9d14:	bl	0 <coda_XML_ParserFree>
    9d18:	ldr	r3, [fp, #-16]
    9d1c:	ldr	r3, [r3, #8]
    9d20:	cmp	r3, #0
    9d24:	beq	9d38 <parser_info_delete+0xf4>
    9d28:	ldr	r3, [fp, #-16]
    9d2c:	ldr	r3, [r3, #8]
    9d30:	mov	r0, r3
    9d34:	bl	0 <coda_hashtable_delete>
    9d38:	ldr	r3, [fp, #-16]
    9d3c:	ldr	r3, [r3, #12]
    9d40:	cmp	r3, #0
    9d44:	beq	9d58 <parser_info_delete+0x114>
    9d48:	ldr	r3, [fp, #-16]
    9d4c:	ldr	r3, [r3, #12]
    9d50:	mov	r0, r3
    9d54:	bl	0 <free>
    9d58:	ldr	r3, [fp, #-16]
    9d5c:	mov	r2, #0
    9d60:	str	r2, [r3, #16]
    9d64:	nop			; (mov r0, r0)
    9d68:	sub	sp, fp, #4
    9d6c:	pop	{fp, pc}
    9d70:	.word	0x00002328
    9d74:	.word	0x00000fd7
    9d78:	.word	0x000009bc
    9d7c:	.word	0x00001ed8

00009d80 <parse_entry>:
    9d80:	push	{r4, fp, lr}
    9d84:	add	fp, sp, #8
    9d88:	sub	sp, sp, #100	; 0x64
    9d8c:	str	r0, [fp, #-88]	; 0xffffffa8
    9d90:	str	r1, [fp, #-92]	; 0xffffffa4
    9d94:	str	r2, [fp, #-96]	; 0xffffffa0
    9d98:	str	r3, [fp, #-100]	; 0xffffff9c
    9d9c:	mov	r3, #0
    9da0:	str	r3, [fp, #-16]
    9da4:	ldr	r3, [fp, #-92]	; 0xffffffa4
    9da8:	cmp	r3, #1
    9dac:	beq	9df8 <parse_entry+0x78>
    9db0:	cmp	r3, #1
    9db4:	bcc	9dc4 <parse_entry+0x44>
    9db8:	cmp	r3, #2
    9dbc:	beq	9e80 <parse_entry+0x100>
    9dc0:	b	9f0c <parse_entry+0x18c>
    9dc4:	ldr	r0, [pc, #1544]	; a3d4 <parse_entry+0x654>
    9dc8:	bl	0 <strdup>
    9dcc:	mov	r3, r0
    9dd0:	str	r3, [fp, #-16]
    9dd4:	ldr	r3, [fp, #-16]
    9dd8:	cmp	r3, #0
    9ddc:	bne	9f08 <parse_entry+0x188>
    9de0:	ldr	r3, [pc, #1520]	; a3d8 <parse_entry+0x658>
    9de4:	ldr	r2, [pc, #1520]	; a3dc <parse_entry+0x65c>
    9de8:	ldr	r1, [pc, #1520]	; a3e0 <parse_entry+0x660>
    9dec:	mvn	r0, #0
    9df0:	bl	0 <coda_set_error>
    9df4:	b	9f08 <parse_entry+0x188>
    9df8:	ldr	r3, [fp, #-96]	; 0xffffffa0
    9dfc:	cmp	r3, #0
    9e00:	bne	9e18 <parse_entry+0x98>
    9e04:	ldr	r3, [pc, #1496]	; a3e4 <parse_entry+0x664>
    9e08:	ldr	r2, [pc, #1496]	; a3e8 <parse_entry+0x668>
    9e0c:	ldr	r1, [pc, #1480]	; a3dc <parse_entry+0x65c>
    9e10:	ldr	r0, [pc, #1492]	; a3ec <parse_entry+0x66c>
    9e14:	bl	0 <__assert_fail>
    9e18:	ldr	r0, [fp, #-96]	; 0xffffffa0
    9e1c:	bl	0 <strlen>
    9e20:	mov	r3, r0
    9e24:	add	r3, r3, #11
    9e28:	mov	r0, r3
    9e2c:	bl	0 <malloc>
    9e30:	mov	r3, r0
    9e34:	str	r3, [fp, #-16]
    9e38:	ldr	r3, [fp, #-16]
    9e3c:	cmp	r3, #0
    9e40:	bne	9e6c <parse_entry+0xec>
    9e44:	ldr	r0, [fp, #-96]	; 0xffffffa0
    9e48:	bl	0 <strlen>
    9e4c:	mov	r3, r0
    9e50:	add	r2, r3, #11
    9e54:	ldr	r3, [pc, #1428]	; a3f0 <parse_entry+0x670>
    9e58:	str	r3, [sp]
    9e5c:	ldr	r3, [pc, #1400]	; a3dc <parse_entry+0x65c>
    9e60:	ldr	r1, [pc, #1420]	; a3f4 <parse_entry+0x674>
    9e64:	mvn	r0, #0
    9e68:	bl	0 <coda_set_error>
    9e6c:	ldr	r2, [fp, #-96]	; 0xffffffa0
    9e70:	ldr	r1, [pc, #1408]	; a3f8 <parse_entry+0x678>
    9e74:	ldr	r0, [fp, #-16]
    9e78:	bl	0 <sprintf>
    9e7c:	b	9f0c <parse_entry+0x18c>
    9e80:	ldr	r3, [fp, #-96]	; 0xffffffa0
    9e84:	cmp	r3, #0
    9e88:	bne	9ea0 <parse_entry+0x120>
    9e8c:	ldr	r3, [pc, #1360]	; a3e4 <parse_entry+0x664>
    9e90:	ldr	r2, [pc, #1380]	; a3fc <parse_entry+0x67c>
    9e94:	ldr	r1, [pc, #1344]	; a3dc <parse_entry+0x65c>
    9e98:	ldr	r0, [pc, #1356]	; a3ec <parse_entry+0x66c>
    9e9c:	bl	0 <__assert_fail>
    9ea0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    9ea4:	bl	0 <strlen>
    9ea8:	mov	r3, r0
    9eac:	add	r3, r3, #14
    9eb0:	mov	r0, r3
    9eb4:	bl	0 <malloc>
    9eb8:	mov	r3, r0
    9ebc:	str	r3, [fp, #-16]
    9ec0:	ldr	r3, [fp, #-16]
    9ec4:	cmp	r3, #0
    9ec8:	bne	9ef4 <parse_entry+0x174>
    9ecc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    9ed0:	bl	0 <strlen>
    9ed4:	mov	r3, r0
    9ed8:	add	r2, r3, #14
    9edc:	ldr	r3, [pc, #1308]	; a400 <parse_entry+0x680>
    9ee0:	str	r3, [sp]
    9ee4:	ldr	r3, [pc, #1264]	; a3dc <parse_entry+0x65c>
    9ee8:	ldr	r1, [pc, #1284]	; a3f4 <parse_entry+0x674>
    9eec:	mvn	r0, #0
    9ef0:	bl	0 <coda_set_error>
    9ef4:	ldr	r2, [fp, #-96]	; 0xffffffa0
    9ef8:	ldr	r1, [pc, #1284]	; a404 <parse_entry+0x684>
    9efc:	ldr	r0, [fp, #-16]
    9f00:	bl	0 <sprintf>
    9f04:	b	9f0c <parse_entry+0x18c>
    9f08:	nop			; (mov r0, r0)
    9f0c:	ldr	r1, [fp, #-16]
    9f10:	ldr	r0, [fp, #-88]	; 0xffffffa8
    9f14:	bl	0 <coda_za_get_entry_by_name>
    9f18:	str	r0, [fp, #-24]	; 0xffffffe8
    9f1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9f20:	cmp	r3, #0
    9f24:	bne	9fb8 <parse_entry+0x238>
    9f28:	ldr	r3, [fp, #-92]	; 0xffffffa4
    9f2c:	cmp	r3, #1
    9f30:	beq	9f68 <parse_entry+0x1e8>
    9f34:	cmp	r3, #1
    9f38:	bcc	9f48 <parse_entry+0x1c8>
    9f3c:	cmp	r3, #2
    9f40:	beq	9f88 <parse_entry+0x208>
    9f44:	b	9fa8 <parse_entry+0x228>
    9f48:	ldr	r0, [fp, #-88]	; 0xffffffa8
    9f4c:	bl	0 <coda_za_get_filename>
    9f50:	mov	r3, r0
    9f54:	mov	r2, r3
    9f58:	ldr	r1, [pc, #1192]	; a408 <parse_entry+0x688>
    9f5c:	ldr	r0, [pc, #1192]	; a40c <parse_entry+0x68c>
    9f60:	bl	0 <coda_set_error>
    9f64:	b	9fa8 <parse_entry+0x228>
    9f68:	ldr	r0, [fp, #-88]	; 0xffffffa8
    9f6c:	bl	0 <coda_za_get_filename>
    9f70:	mov	r2, r0
    9f74:	ldr	r3, [fp, #-96]	; 0xffffffa0
    9f78:	ldr	r1, [pc, #1168]	; a410 <parse_entry+0x690>
    9f7c:	ldr	r0, [pc, #1160]	; a40c <parse_entry+0x68c>
    9f80:	bl	0 <coda_set_error>
    9f84:	b	9fa8 <parse_entry+0x228>
    9f88:	ldr	r0, [fp, #-88]	; 0xffffffa8
    9f8c:	bl	0 <coda_za_get_filename>
    9f90:	mov	r2, r0
    9f94:	ldr	r3, [fp, #-96]	; 0xffffffa0
    9f98:	ldr	r1, [pc, #1140]	; a414 <parse_entry+0x694>
    9f9c:	ldr	r0, [pc, #1128]	; a40c <parse_entry+0x68c>
    9fa0:	bl	0 <coda_set_error>
    9fa4:	nop			; (mov r0, r0)
    9fa8:	ldr	r0, [fp, #-16]
    9fac:	bl	0 <free>
    9fb0:	mvn	r3, #0
    9fb4:	b	a3c8 <parse_entry+0x648>
    9fb8:	ldr	r0, [fp, #-16]
    9fbc:	bl	0 <free>
    9fc0:	sub	r3, fp, #84	; 0x54
    9fc4:	mov	r0, r3
    9fc8:	bl	9b94 <parser_info_init>
    9fcc:	ldr	r3, [fp, #-88]	; 0xffffffa8
    9fd0:	str	r3, [fp, #-68]	; 0xffffffbc
    9fd4:	ldr	r3, [fp, #-96]	; 0xffffffa0
    9fd8:	str	r3, [fp, #-64]	; 0xffffffc0
    9fdc:	ldr	r3, [fp, #-100]	; 0xffffff9c
    9fe0:	str	r3, [fp, #-60]	; 0xffffffc4
    9fe4:	ldr	r3, [fp, #4]
    9fe8:	str	r3, [fp, #-56]	; 0xffffffc8
    9fec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9ff0:	bl	0 <coda_za_get_entry_size>
    9ff4:	str	r0, [fp, #-28]	; 0xffffffe4
    9ff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9ffc:	mov	r0, r3
    a000:	bl	0 <malloc>
    a004:	mov	r3, r0
    a008:	str	r3, [fp, #-72]	; 0xffffffb8
    a00c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    a010:	cmp	r3, #0
    a014:	bne	a048 <parse_entry+0x2c8>
    a018:	ldr	r3, [pc, #1016]	; a418 <parse_entry+0x698>
    a01c:	str	r3, [sp]
    a020:	ldr	r3, [pc, #948]	; a3dc <parse_entry+0x65c>
    a024:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a028:	ldr	r1, [pc, #964]	; a3f4 <parse_entry+0x674>
    a02c:	mvn	r0, #0
    a030:	bl	0 <coda_set_error>
    a034:	sub	r3, fp, #84	; 0x54
    a038:	mov	r0, r3
    a03c:	bl	9c44 <parser_info_delete>
    a040:	mvn	r3, #0
    a044:	b	a3c8 <parse_entry+0x648>
    a048:	ldr	r3, [fp, #-72]	; 0xffffffb8
    a04c:	mov	r1, r3
    a050:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a054:	bl	0 <coda_za_read_entry>
    a058:	mov	r3, r0
    a05c:	cmp	r3, #0
    a060:	beq	a078 <parse_entry+0x2f8>
    a064:	sub	r3, fp, #84	; 0x54
    a068:	mov	r0, r3
    a06c:	bl	9c44 <parser_info_delete>
    a070:	mvn	r3, #0
    a074:	b	a3c8 <parse_entry+0x648>
    a078:	mov	r0, #1
    a07c:	bl	0 <coda_hashtable_new>
    a080:	mov	r3, r0
    a084:	str	r3, [fp, #-76]	; 0xffffffb4
    a088:	ldr	r3, [fp, #-76]	; 0xffffffb4
    a08c:	cmp	r3, #0
    a090:	bne	a0bc <parse_entry+0x33c>
    a094:	ldr	r3, [pc, #896]	; a41c <parse_entry+0x69c>
    a098:	ldr	r2, [pc, #828]	; a3dc <parse_entry+0x65c>
    a09c:	ldr	r1, [pc, #892]	; a420 <parse_entry+0x6a0>
    a0a0:	mvn	r0, #0
    a0a4:	bl	0 <coda_set_error>
    a0a8:	sub	r3, fp, #84	; 0x54
    a0ac:	mov	r0, r3
    a0b0:	bl	9c44 <parser_info_delete>
    a0b4:	mvn	r3, #0
    a0b8:	b	a3c8 <parse_entry+0x648>
    a0bc:	mov	r3, #0
    a0c0:	str	r3, [fp, #-20]	; 0xffffffec
    a0c4:	b	a10c <parse_entry+0x38c>
    a0c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
    a0cc:	ldr	r2, [pc, #848]	; a424 <parse_entry+0x6a4>
    a0d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    a0d4:	ldr	r3, [r2, r3, lsl #2]
    a0d8:	mov	r1, r3
    a0dc:	bl	0 <coda_hashtable_add_name>
    a0e0:	mov	r3, r0
    a0e4:	cmp	r3, #0
    a0e8:	beq	a100 <parse_entry+0x380>
    a0ec:	ldr	r3, [pc, #752]	; a3e4 <parse_entry+0x664>
    a0f0:	ldr	r2, [pc, #816]	; a428 <parse_entry+0x6a8>
    a0f4:	ldr	r1, [pc, #736]	; a3dc <parse_entry+0x65c>
    a0f8:	ldr	r0, [pc, #812]	; a42c <parse_entry+0x6ac>
    a0fc:	bl	0 <__assert_fail>
    a100:	ldr	r3, [fp, #-20]	; 0xffffffec
    a104:	add	r3, r3, #1
    a108:	str	r3, [fp, #-20]	; 0xffffffec
    a10c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a110:	cmp	r3, #42	; 0x2a
    a114:	ble	a0c8 <parse_entry+0x348>
    a118:	mov	r1, #32
    a11c:	mov	r0, #0
    a120:	bl	0 <coda_XML_ParserCreateNS>
    a124:	mov	r3, r0
    a128:	str	r3, [fp, #-80]	; 0xffffffb0
    a12c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a130:	cmp	r3, #0
    a134:	bne	a158 <parse_entry+0x3d8>
    a138:	ldr	r1, [pc, #752]	; a430 <parse_entry+0x6b0>
    a13c:	mvn	r0, #13
    a140:	bl	0 <coda_set_error>
    a144:	sub	r3, fp, #84	; 0x54
    a148:	mov	r0, r3
    a14c:	bl	9c44 <parser_info_delete>
    a150:	mvn	r3, #0
    a154:	b	a3c8 <parse_entry+0x648>
    a158:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a15c:	sub	r2, fp, #84	; 0x54
    a160:	mov	r1, r2
    a164:	mov	r0, r3
    a168:	bl	0 <coda_XML_SetUserData>
    a16c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a170:	ldr	r2, [pc, #700]	; a434 <parse_entry+0x6b4>
    a174:	ldr	r1, [pc, #700]	; a438 <parse_entry+0x6b8>
    a178:	mov	r0, r3
    a17c:	bl	0 <coda_XML_SetElementHandler>
    a180:	sub	r3, fp, #84	; 0x54
    a184:	mov	r2, #0
    a188:	mvn	r1, #0
    a18c:	mov	r0, r3
    a190:	bl	956c <push_node>
    a194:	ldr	r3, [fp, #-84]	; 0xffffffac
    a198:	mov	r2, #0
    a19c:	str	r2, [r3, #48]	; 0x30
    a1a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a1a4:	cmp	r3, #1
    a1a8:	beq	a1d8 <parse_entry+0x458>
    a1ac:	cmp	r3, #1
    a1b0:	bcc	a1c0 <parse_entry+0x440>
    a1b4:	cmp	r3, #2
    a1b8:	beq	a1ec <parse_entry+0x46c>
    a1bc:	b	a204 <parse_entry+0x484>
    a1c0:	ldr	r0, [fp, #-84]	; 0xffffffac
    a1c4:	ldr	r3, [pc, #624]	; a43c <parse_entry+0x6bc>
    a1c8:	ldr	r2, [pc, #624]	; a440 <parse_entry+0x6c0>
    a1cc:	mov	r1, #30
    a1d0:	bl	14ac <register_sub_element>
    a1d4:	b	a204 <parse_entry+0x484>
    a1d8:	ldr	r3, [fp, #-84]	; 0xffffffac
    a1dc:	ldr	r1, [pc, #608]	; a444 <parse_entry+0x6c4>
    a1e0:	mov	r0, r3
    a1e4:	bl	1534 <register_type_elements>
    a1e8:	b	a204 <parse_entry+0x484>
    a1ec:	ldr	r0, [fp, #-84]	; 0xffffffac
    a1f0:	mov	r3, #0
    a1f4:	ldr	r2, [pc, #588]	; a448 <parse_entry+0x6c8>
    a1f8:	mov	r1, #31
    a1fc:	bl	14ac <register_sub_element>
    a200:	nop			; (mov r0, r0)
    a204:	ldr	r3, [pc, #576]	; a44c <parse_entry+0x6cc>
    a208:	ldr	r3, [pc, r3]
    a20c:	bl	0 <__aeabi_read_tp>
    a210:	mov	r1, r0
    a214:	mov	r2, #0
    a218:	str	r2, [r1, r3]
    a21c:	ldr	r0, [fp, #-80]	; 0xffffffb0
    a220:	ldr	r1, [fp, #-72]	; 0xffffffb8
    a224:	mov	r3, #1
    a228:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a22c:	bl	0 <coda_XML_Parse>
    a230:	mov	r3, r0
    a234:	str	r3, [fp, #-32]	; 0xffffffe0
    a238:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a23c:	cmp	r3, #0
    a240:	beq	a260 <parse_entry+0x4e0>
    a244:	ldr	r3, [pc, #516]	; a450 <parse_entry+0x6d0>
    a248:	ldr	r3, [pc, r3]
    a24c:	bl	0 <__aeabi_read_tp>
    a250:	mov	r2, r0
    a254:	ldr	r3, [r2, r3]
    a258:	cmp	r3, #0
    a25c:	beq	a3b8 <parse_entry+0x638>
    a260:	ldr	r3, [fp, #-44]	; 0xffffffd4
    a264:	cmp	r3, #0
    a268:	bne	a3b8 <parse_entry+0x638>
    a26c:	ldr	r3, [pc, #480]	; a454 <parse_entry+0x6d4>
    a270:	ldr	r3, [pc, r3]
    a274:	bl	0 <__aeabi_read_tp>
    a278:	mov	r2, r0
    a27c:	ldr	r3, [r2, r3]
    a280:	cmp	r3, #0
    a284:	bne	a2b4 <parse_entry+0x534>
    a288:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a28c:	mov	r0, r3
    a290:	bl	0 <coda_XML_GetErrorCode>
    a294:	mov	r3, r0
    a298:	mov	r0, r3
    a29c:	bl	0 <coda_XML_ErrorString>
    a2a0:	mov	r3, r0
    a2a4:	mov	r2, r3
    a2a8:	ldr	r1, [pc, #424]	; a458 <parse_entry+0x6d8>
    a2ac:	ldr	r0, [pc, #344]	; a40c <parse_entry+0x68c>
    a2b0:	bl	0 <coda_set_error>
    a2b4:	ldr	r3, [pc, #416]	; a45c <parse_entry+0x6dc>
    a2b8:	ldr	r3, [pc, r3]
    a2bc:	bl	0 <__aeabi_read_tp>
    a2c0:	mov	r2, r0
    a2c4:	ldr	r3, [r2, r3]
    a2c8:	cmn	r3, #400	; 0x190
    a2cc:	beq	a2f0 <parse_entry+0x570>
    a2d0:	ldr	r3, [pc, #392]	; a460 <parse_entry+0x6e0>
    a2d4:	ldr	r3, [pc, r3]
    a2d8:	bl	0 <__aeabi_read_tp>
    a2dc:	mov	r2, r0
    a2e0:	ldr	r3, [r2, r3]
    a2e4:	mvn	r2, #400	; 0x190
    a2e8:	cmp	r3, r2
    a2ec:	bne	a3a4 <parse_entry+0x624>
    a2f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    a2f4:	cmp	r3, #0
    a2f8:	beq	a3a4 <parse_entry+0x624>
    a2fc:	ldr	r0, [fp, #-88]	; 0xffffffa8
    a300:	bl	0 <coda_za_get_filename>
    a304:	mov	r3, r0
    a308:	mov	r1, r3
    a30c:	ldr	r0, [pc, #336]	; a464 <parse_entry+0x6e4>
    a310:	bl	0 <coda_add_error_message>
    a314:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a318:	cmp	r3, #1
    a31c:	beq	a344 <parse_entry+0x5c4>
    a320:	cmp	r3, #1
    a324:	bcc	a334 <parse_entry+0x5b4>
    a328:	cmp	r3, #2
    a32c:	beq	a354 <parse_entry+0x5d4>
    a330:	b	a364 <parse_entry+0x5e4>
    a334:	mov	r1, #0
    a338:	ldr	r0, [pc, #296]	; a468 <parse_entry+0x6e8>
    a33c:	bl	0 <coda_add_error_message>
    a340:	b	a364 <parse_entry+0x5e4>
    a344:	ldr	r1, [fp, #-96]	; 0xffffffa0
    a348:	ldr	r0, [pc, #284]	; a46c <parse_entry+0x6ec>
    a34c:	bl	0 <coda_add_error_message>
    a350:	b	a364 <parse_entry+0x5e4>
    a354:	ldr	r1, [fp, #-96]	; 0xffffffa0
    a358:	ldr	r0, [pc, #272]	; a470 <parse_entry+0x6f0>
    a35c:	bl	0 <coda_add_error_message>
    a360:	nop			; (mov r0, r0)
    a364:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a368:	mov	r0, r3
    a36c:	bl	0 <coda_XML_GetCurrentLineNumber>
    a370:	mov	r2, r0
    a374:	mov	r3, r1
    a378:	mov	r4, r2
    a37c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a380:	mov	r0, r3
    a384:	bl	0 <coda_XML_GetCurrentByteIndex>
    a388:	mov	r2, r0
    a38c:	mov	r3, r1
    a390:	mov	r3, r2
    a394:	mov	r2, r3
    a398:	mov	r1, r4
    a39c:	ldr	r0, [pc, #208]	; a474 <parse_entry+0x6f4>
    a3a0:	bl	0 <coda_add_error_message>
    a3a4:	sub	r3, fp, #84	; 0x54
    a3a8:	mov	r0, r3
    a3ac:	bl	9c44 <parser_info_delete>
    a3b0:	mvn	r3, #0
    a3b4:	b	a3c8 <parse_entry+0x648>
    a3b8:	sub	r3, fp, #84	; 0x54
    a3bc:	mov	r0, r3
    a3c0:	bl	9c44 <parser_info_delete>
    a3c4:	mov	r3, #0
    a3c8:	mov	r0, r3
    a3cc:	sub	sp, fp, #8
    a3d0:	pop	{r4, fp, pc}
    a3d4:	.word	0x00001fbc
    a3d8:	.word	0x00001001
    a3dc:	.word	0x000009bc
    a3e0:	.word	0x00001060
    a3e4:	.word	0x0000233c
    a3e8:	.word	0x00001005
    a3ec:	.word	0x00001fc8
    a3f0:	.word	0x0000100a
    a3f4:	.word	0x00000a1c
    a3f8:	.word	0x00001fd8
    a3fc:	.word	0x0000100f
    a400:	.word	0x00001014
    a404:	.word	0x00001fe8
    a408:	.word	0x00001ff8
    a40c:	.word	0xfffffe70
    a410:	.word	0x00002028
    a414:	.word	0x00002068
    a418:	.word	0x0000103c
    a41c:	.word	0x0000104a
    a420:	.word	0x000020ac
    a424:	.word	0x00000000
    a428:	.word	0x00001052
    a42c:	.word	0x0000105c
    a430:	.word	0x000020e4
	...
    a44c:	.word	0x0000023c
    a450:	.word	0x00000200
    a454:	.word	0x000001dc
    a458:	.word	0x00002100
    a45c:	.word	0x0000019c
    a460:	.word	0x00000184
    a464:	.word	0x00002114
    a468:	.word	0x00002120
    a46c:	.word	0x00002128
    a470:	.word	0x00002134
    a474:	.word	0x00002140

0000a478 <read_definition_file>:
    a478:	push	{fp, lr}
    a47c:	add	fp, sp, #4
    a480:	sub	sp, sp, #24
    a484:	str	r0, [fp, #-16]
    a488:	ldr	r1, [pc, #108]	; a4fc <read_definition_file+0x84>
    a48c:	ldr	r0, [fp, #-16]
    a490:	bl	0 <coda_za_open>
    a494:	str	r0, [fp, #-8]
    a498:	ldr	r3, [fp, #-8]
    a49c:	cmp	r3, #0
    a4a0:	bne	a4ac <read_definition_file+0x34>
    a4a4:	mvn	r3, #0
    a4a8:	b	a4f0 <read_definition_file+0x78>
    a4ac:	mov	r3, #0
    a4b0:	str	r3, [sp]
    a4b4:	mov	r3, #0
    a4b8:	mov	r2, #0
    a4bc:	mov	r1, #0
    a4c0:	ldr	r0, [fp, #-8]
    a4c4:	bl	9d80 <parse_entry>
    a4c8:	mov	r3, r0
    a4cc:	cmp	r3, #0
    a4d0:	beq	a4e4 <read_definition_file+0x6c>
    a4d4:	ldr	r0, [fp, #-8]
    a4d8:	bl	0 <coda_za_close>
    a4dc:	mvn	r3, #0
    a4e0:	b	a4f0 <read_definition_file+0x78>
    a4e4:	ldr	r0, [fp, #-8]
    a4e8:	bl	0 <coda_za_close>
    a4ec:	mov	r3, #0
    a4f0:	mov	r0, r3
    a4f4:	sub	sp, fp, #4
    a4f8:	pop	{fp, pc}
    a4fc:	.word	0x00000000

0000a500 <coda_read_product_definition>:
    a500:	push	{fp, lr}
    a504:	add	fp, sp, #4
    a508:	sub	sp, sp, #24
    a50c:	str	r0, [fp, #-16]
    a510:	ldr	r3, [fp, #-16]
    a514:	ldr	r3, [r3, #24]
    a518:	cmp	r3, #0
    a51c:	beq	a534 <coda_read_product_definition+0x34>
    a520:	ldr	r3, [pc, #156]	; a5c4 <coda_read_product_definition+0xc4>
    a524:	ldr	r2, [pc, #156]	; a5c8 <coda_read_product_definition+0xc8>
    a528:	ldr	r1, [pc, #156]	; a5cc <coda_read_product_definition+0xcc>
    a52c:	ldr	r0, [pc, #156]	; a5d0 <coda_read_product_definition+0xd0>
    a530:	bl	0 <__assert_fail>
    a534:	ldr	r3, [fp, #-16]
    a538:	ldr	r3, [r3, #44]	; 0x2c
    a53c:	ldr	r3, [r3, #20]
    a540:	str	r3, [fp, #-8]
    a544:	ldr	r3, [fp, #-8]
    a548:	ldr	r3, [r3, #8]
    a54c:	ldr	r1, [pc, #128]	; a5d4 <coda_read_product_definition+0xd4>
    a550:	mov	r0, r3
    a554:	bl	0 <coda_za_open>
    a558:	str	r0, [fp, #-12]
    a55c:	ldr	r3, [fp, #-12]
    a560:	cmp	r3, #0
    a564:	bne	a570 <coda_read_product_definition+0x70>
    a568:	mvn	r3, #0
    a56c:	b	a5b8 <coda_read_product_definition+0xb8>
    a570:	ldr	r3, [fp, #-16]
    a574:	ldr	r2, [r3, #8]
    a578:	ldr	r3, [fp, #-16]
    a57c:	str	r3, [sp]
    a580:	ldr	r3, [fp, #-8]
    a584:	mov	r1, #2
    a588:	ldr	r0, [fp, #-12]
    a58c:	bl	9d80 <parse_entry>
    a590:	mov	r3, r0
    a594:	cmp	r3, #0
    a598:	beq	a5ac <coda_read_product_definition+0xac>
    a59c:	ldr	r0, [fp, #-12]
    a5a0:	bl	0 <coda_za_close>
    a5a4:	mvn	r3, #0
    a5a8:	b	a5b8 <coda_read_product_definition+0xb8>
    a5ac:	ldr	r0, [fp, #-12]
    a5b0:	bl	0 <coda_za_close>
    a5b4:	mov	r3, #0
    a5b8:	mov	r0, r3
    a5bc:	sub	sp, fp, #4
    a5c0:	pop	{fp, pc}
    a5c4:	.word	0x00002348
    a5c8:	.word	0x000010ad
    a5cc:	.word	0x000009bc
    a5d0:	.word	0x00002160
    a5d4:	.word	0x00000000

0000a5d8 <coda_read_definitions>:
    a5d8:	push	{fp, lr}
    a5dc:	add	fp, sp, #4
    a5e0:	sub	sp, sp, #136	; 0x88
    a5e4:	str	r0, [fp, #-128]	; 0xffffff80
    a5e8:	mov	r3, #58	; 0x3a
    a5ec:	strb	r3, [fp, #-13]
    a5f0:	ldr	r0, [fp, #-128]	; 0xffffff80
    a5f4:	bl	0 <strdup>
    a5f8:	mov	r3, r0
    a5fc:	str	r3, [fp, #-20]	; 0xffffffec
    a600:	ldr	r3, [fp, #-20]	; 0xffffffec
    a604:	cmp	r3, #0
    a608:	bne	a628 <coda_read_definitions+0x50>
    a60c:	ldr	r3, [pc, #804]	; a938 <coda_read_definitions+0x360>
    a610:	ldr	r2, [pc, #804]	; a93c <coda_read_definitions+0x364>
    a614:	ldr	r1, [pc, #804]	; a940 <coda_read_definitions+0x368>
    a618:	mvn	r0, #0
    a61c:	bl	0 <coda_set_error>
    a620:	mvn	r3, #0
    a624:	b	a92c <coda_read_definitions+0x354>
    a628:	ldr	r3, [fp, #-20]	; 0xffffffec
    a62c:	str	r3, [fp, #-8]
    a630:	b	a910 <coda_read_definitions+0x338>
    a634:	ldr	r3, [fp, #-8]
    a638:	str	r3, [fp, #-12]
    a63c:	b	a64c <coda_read_definitions+0x74>
    a640:	ldr	r3, [fp, #-12]
    a644:	add	r3, r3, #1
    a648:	str	r3, [fp, #-12]
    a64c:	ldr	r3, [fp, #-12]
    a650:	ldrb	r3, [r3]
    a654:	cmp	r3, #0
    a658:	beq	a670 <coda_read_definitions+0x98>
    a65c:	ldr	r3, [fp, #-12]
    a660:	ldrb	r3, [r3]
    a664:	ldrb	r2, [fp, #-13]
    a668:	cmp	r2, r3
    a66c:	bne	a640 <coda_read_definitions+0x68>
    a670:	ldr	r3, [fp, #-12]
    a674:	ldrb	r3, [r3]
    a678:	cmp	r3, #0
    a67c:	beq	a698 <coda_read_definitions+0xc0>
    a680:	ldr	r3, [fp, #-12]
    a684:	mov	r2, #0
    a688:	strb	r2, [r3]
    a68c:	ldr	r3, [fp, #-12]
    a690:	add	r3, r3, #1
    a694:	str	r3, [fp, #-12]
    a698:	sub	r3, fp, #124	; 0x7c
    a69c:	mov	r1, r3
    a6a0:	ldr	r0, [fp, #-8]
    a6a4:	bl	0 <stat>
    a6a8:	mov	r3, r0
    a6ac:	cmp	r3, #0
    a6b0:	bne	a908 <coda_read_definitions+0x330>
    a6b4:	ldr	r3, [fp, #-108]	; 0xffffff94
    a6b8:	and	r3, r3, #16384	; 0x4000
    a6bc:	cmp	r3, #0
    a6c0:	beq	a8d4 <coda_read_definitions+0x2fc>
    a6c4:	ldr	r0, [fp, #-8]
    a6c8:	bl	0 <opendir>
    a6cc:	str	r0, [fp, #-24]	; 0xffffffe8
    a6d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a6d4:	cmp	r3, #0
    a6d8:	bne	a8b0 <coda_read_definitions+0x2d8>
    a6dc:	bl	0 <__errno_location>
    a6e0:	mov	r3, r0
    a6e4:	ldr	r3, [r3]
    a6e8:	mov	r0, r3
    a6ec:	bl	0 <strerror>
    a6f0:	mov	r3, r0
    a6f4:	ldr	r2, [fp, #-8]
    a6f8:	ldr	r1, [pc, #580]	; a944 <coda_read_definitions+0x36c>
    a6fc:	ldr	r0, [pc, #580]	; a948 <coda_read_definitions+0x370>
    a700:	bl	0 <coda_set_error>
    a704:	ldr	r0, [fp, #-20]	; 0xffffffec
    a708:	bl	0 <free>
    a70c:	mvn	r3, #0
    a710:	b	a92c <coda_read_definitions+0x354>
    a714:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a718:	add	r3, r3, #11
    a71c:	mov	r0, r3
    a720:	bl	0 <strlen>
    a724:	mov	r3, r0
    a728:	str	r3, [fp, #-32]	; 0xffffffe0
    a72c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a730:	cmp	r3, #8
    a734:	ble	a8b0 <coda_read_definitions+0x2d8>
    a738:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a73c:	sub	r3, r3, #8
    a740:	add	r3, r3, #8
    a744:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a748:	add	r3, r2, r3
    a74c:	add	r3, r3, #3
    a750:	ldr	r1, [pc, #500]	; a94c <coda_read_definitions+0x374>
    a754:	mov	r0, r3
    a758:	bl	0 <strcmp>
    a75c:	mov	r3, r0
    a760:	cmp	r3, #0
    a764:	bne	a8b0 <coda_read_definitions+0x2d8>
    a768:	ldr	r0, [fp, #-8]
    a76c:	bl	0 <strlen>
    a770:	mov	r2, r0
    a774:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a778:	add	r3, r2, r3
    a77c:	add	r3, r3, #2
    a780:	mov	r0, r3
    a784:	bl	0 <malloc>
    a788:	mov	r3, r0
    a78c:	str	r3, [fp, #-36]	; 0xffffffdc
    a790:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a794:	cmp	r3, #0
    a798:	bne	a7e8 <coda_read_definitions+0x210>
    a79c:	ldr	r0, [fp, #-8]
    a7a0:	bl	0 <strlen>
    a7a4:	mov	r3, r0
    a7a8:	add	r2, r3, #1
    a7ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a7b0:	add	r3, r2, r3
    a7b4:	add	r2, r3, #1
    a7b8:	ldr	r3, [pc, #400]	; a950 <coda_read_definitions+0x378>
    a7bc:	str	r3, [sp]
    a7c0:	ldr	r3, [pc, #372]	; a93c <coda_read_definitions+0x364>
    a7c4:	ldr	r1, [pc, #392]	; a954 <coda_read_definitions+0x37c>
    a7c8:	mvn	r0, #0
    a7cc:	bl	0 <coda_set_error>
    a7d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a7d4:	bl	0 <closedir>
    a7d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    a7dc:	bl	0 <free>
    a7e0:	mvn	r3, #0
    a7e4:	b	a92c <coda_read_definitions+0x354>
    a7e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a7ec:	add	r3, r3, #11
    a7f0:	ldr	r2, [fp, #-8]
    a7f4:	ldr	r1, [pc, #348]	; a958 <coda_read_definitions+0x380>
    a7f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a7fc:	bl	0 <sprintf>
    a800:	sub	r3, fp, #124	; 0x7c
    a804:	mov	r1, r3
    a808:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a80c:	bl	0 <stat>
    a810:	mov	r3, r0
    a814:	cmp	r3, #0
    a818:	beq	a864 <coda_read_definitions+0x28c>
    a81c:	bl	0 <__errno_location>
    a820:	mov	r3, r0
    a824:	ldr	r3, [r3]
    a828:	mov	r0, r3
    a82c:	bl	0 <strerror>
    a830:	mov	r3, r0
    a834:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a838:	ldr	r1, [pc, #284]	; a95c <coda_read_definitions+0x384>
    a83c:	ldr	r0, [pc, #260]	; a948 <coda_read_definitions+0x370>
    a840:	bl	0 <coda_set_error>
    a844:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a848:	bl	0 <free>
    a84c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a850:	bl	0 <closedir>
    a854:	ldr	r0, [fp, #-20]	; 0xffffffec
    a858:	bl	0 <free>
    a85c:	mvn	r3, #0
    a860:	b	a92c <coda_read_definitions+0x354>
    a864:	ldr	r3, [fp, #-108]	; 0xffffff94
    a868:	and	r3, r3, #32768	; 0x8000
    a86c:	cmp	r3, #0
    a870:	beq	a8a8 <coda_read_definitions+0x2d0>
    a874:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a878:	bl	a478 <read_definition_file>
    a87c:	mov	r3, r0
    a880:	cmp	r3, #0
    a884:	beq	a8a8 <coda_read_definitions+0x2d0>
    a888:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a88c:	bl	0 <free>
    a890:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a894:	bl	0 <closedir>
    a898:	ldr	r0, [fp, #-20]	; 0xffffffec
    a89c:	bl	0 <free>
    a8a0:	mvn	r3, #0
    a8a4:	b	a92c <coda_read_definitions+0x354>
    a8a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a8ac:	bl	0 <free>
    a8b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a8b4:	bl	0 <readdir>
    a8b8:	str	r0, [fp, #-28]	; 0xffffffe4
    a8bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a8c0:	cmp	r3, #0
    a8c4:	bne	a714 <coda_read_definitions+0x13c>
    a8c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a8cc:	bl	0 <closedir>
    a8d0:	b	a908 <coda_read_definitions+0x330>
    a8d4:	ldr	r3, [fp, #-108]	; 0xffffff94
    a8d8:	and	r3, r3, #32768	; 0x8000
    a8dc:	cmp	r3, #0
    a8e0:	beq	a908 <coda_read_definitions+0x330>
    a8e4:	ldr	r0, [fp, #-8]
    a8e8:	bl	a478 <read_definition_file>
    a8ec:	mov	r3, r0
    a8f0:	cmp	r3, #0
    a8f4:	beq	a908 <coda_read_definitions+0x330>
    a8f8:	ldr	r0, [fp, #-20]	; 0xffffffec
    a8fc:	bl	0 <free>
    a900:	mvn	r3, #0
    a904:	b	a92c <coda_read_definitions+0x354>
    a908:	ldr	r3, [fp, #-12]
    a90c:	str	r3, [fp, #-8]
    a910:	ldr	r3, [fp, #-8]
    a914:	ldrb	r3, [r3]
    a918:	cmp	r3, #0
    a91c:	bne	a634 <coda_read_definitions+0x5c>
    a920:	ldr	r0, [fp, #-20]	; 0xffffffec
    a924:	bl	0 <free>
    a928:	mov	r3, #0
    a92c:	mov	r0, r3
    a930:	sub	sp, fp, #4
    a934:	pop	{fp, pc}
    a938:	.word	0x000010ce
    a93c:	.word	0x000009bc
    a940:	.word	0x00001060
    a944:	.word	0x00002184
    a948:	.word	0xfffffe70
    a94c:	.word	0x000021ac
    a950:	.word	0x0000114b
    a954:	.word	0x00000a1c
    a958:	.word	0x000021b8
    a95c:	.word	0x000021c0
