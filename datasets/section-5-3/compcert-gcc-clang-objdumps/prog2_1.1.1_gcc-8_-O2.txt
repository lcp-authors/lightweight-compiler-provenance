
../compcert-repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010624 <.init>:
   10624:	push	{r3, lr}
   10628:	bl	10980 <_start@@Base+0x3c>
   1062c:	pop	{r3, pc}

Disassembly of section .plt:

00010630 <printf@plt-0x14>:
   10630:	push	{lr}		; (str lr, [sp, #-4]!)
   10634:	ldr	lr, [pc, #4]	; 10640 <printf@plt-0x4>
   10638:	add	lr, pc, lr
   1063c:	ldr	pc, [lr, #8]!
   10640:	andeq	r0, r1, r0, asr #19

00010644 <printf@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2496]!	; 0x9c0

00010650 <fopen@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2488]!	; 0x9b8

0001065c <puts@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2480]!	; 0x9b0

00010668 <__libc_start_main@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2472]!	; 0x9a8

00010674 <__ctype_tolower_loc@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2464]!	; 0x9a0

00010680 <__gmon_start__@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2456]!	; 0x998

0001068c <memset@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2448]!	; 0x990

00010698 <fclose@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2440]!	; 0x988

000106a4 <abort@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2432]!	; 0x980

000106b0 <getc@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2424]!	; 0x978

Disassembly of section .text:

000106bc <main@@Base>:
   106bc:	movw	ip, #2792	; 0xae8
   106c0:	movt	ip, #1
   106c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   106c8:	strd	r6, [sp, #8]
   106cc:	movw	r1, #2864	; 0xb30
   106d0:	movt	r1, #1
   106d4:	ldrd	r4, [ip]
   106d8:	movw	r0, #2868	; 0xb34
   106dc:	movt	r0, #1
   106e0:	str	r8, [sp, #16]
   106e4:	ldrd	r2, [ip, #56]	; 0x38
   106e8:	str	lr, [sp, #20]
   106ec:	ldrd	r6, [ip, #64]	; 0x40
   106f0:	vpush	{d8}
   106f4:	sub	sp, sp, #176	; 0xb0
   106f8:	add	r8, sp, #40	; 0x28
   106fc:	strd	r2, [sp, #24]
   10700:	ldrd	r2, [ip, #16]
   10704:	strd	r6, [sp, #32]
   10708:	strd	r4, [sp, #40]	; 0x28
   1070c:	ldrd	r4, [ip, #8]
   10710:	ldrd	r6, [ip, #24]
   10714:	strd	r4, [r8, #8]
   10718:	strd	r2, [r8, #16]
   1071c:	strd	r6, [r8, #24]
   10720:	ldrd	r4, [ip, #32]
   10724:	ldrd	r2, [ip, #40]	; 0x28
   10728:	ldrd	r6, [ip, #48]	; 0x30
   1072c:	strd	r4, [sp]
   10730:	add	r4, sp, #72	; 0x48
   10734:	mov	r5, #0
   10738:	strd	r2, [sp, #8]
   1073c:	strd	r6, [sp, #16]
   10740:	bl	10650 <fopen@plt>
   10744:	mov	r6, r0
   10748:	mov	r2, #104	; 0x68
   1074c:	mov	r0, r4
   10750:	mov	r1, r5
   10754:	bl	1068c <memset@plt>
   10758:	mov	r0, r6
   1075c:	bl	106b0 <getc@plt>
   10760:	cmn	r0, #1
   10764:	beq	10854 <main@@Base+0x198>
   10768:	add	r3, sp, #36	; 0x24
   1076c:	ldr	r2, [r3, #4]!
   10770:	cmp	r0, r2
   10774:	beq	108ec <main@@Base+0x230>
   10778:	cmp	r3, r4
   1077c:	bne	1076c <main@@Base+0xb0>
   10780:	ldr	r3, [sp]
   10784:	cmp	r0, r3
   10788:	beq	1090c <main@@Base+0x250>
   1078c:	ldr	r3, [sp, #4]
   10790:	cmp	r0, r3
   10794:	beq	1090c <main@@Base+0x250>
   10798:	ldr	r3, [sp, #8]
   1079c:	cmp	r0, r3
   107a0:	beq	1090c <main@@Base+0x250>
   107a4:	ldr	r3, [sp, #12]
   107a8:	cmp	r0, r3
   107ac:	beq	1090c <main@@Base+0x250>
   107b0:	ldr	r3, [sp, #16]
   107b4:	cmp	r0, r3
   107b8:	beq	1090c <main@@Base+0x250>
   107bc:	cmp	r0, #205	; 0xcd
   107c0:	beq	10928 <main@@Base+0x26c>
   107c4:	cmp	r0, #237	; 0xed
   107c8:	beq	10920 <main@@Base+0x264>
   107cc:	cmp	r0, #0
   107d0:	beq	10920 <main@@Base+0x264>
   107d4:	add	r3, sp, #12
   107d8:	ldr	r2, [r3, #4]!
   107dc:	cmp	r0, r2
   107e0:	beq	10914 <main@@Base+0x258>
   107e4:	cmp	r3, r8
   107e8:	bne	107d8 <main@@Base+0x11c>
   107ec:	bic	r3, r0, #32
   107f0:	cmp	r3, #218	; 0xda
   107f4:	beq	10938 <main@@Base+0x27c>
   107f8:	cmp	r0, #0
   107fc:	beq	10938 <main@@Base+0x27c>
   10800:	cmp	r3, #199	; 0xc7
   10804:	beq	10930 <main@@Base+0x274>
   10808:	cmp	r0, #0
   1080c:	beq	10930 <main@@Base+0x274>
   10810:	add	r3, r0, #128	; 0x80
   10814:	mov	r7, r0
   10818:	cmp	r3, #384	; 0x180
   1081c:	bcc	10918 <main@@Base+0x25c>
   10820:	sub	r0, r0, #97	; 0x61
   10824:	cmp	r0, #25
   10828:	bhi	10758 <main@@Base+0x9c>
   1082c:	add	r3, sp, #176	; 0xb0
   10830:	add	r5, r5, #1
   10834:	add	r0, r3, r0, lsl #2
   10838:	ldr	r3, [r0, #-104]	; 0xffffff98
   1083c:	add	r3, r3, #1
   10840:	str	r3, [r0, #-104]	; 0xffffff98
   10844:	mov	r0, r6
   10848:	bl	106b0 <getc@plt>
   1084c:	cmn	r0, #1
   10850:	bne	10768 <main@@Base+0xac>
   10854:	mov	r0, r6
   10858:	vldr	s17, [pc, #224]	; 10940 <main@@Base+0x284>
   1085c:	movw	r7, #2924	; 0xb6c
   10860:	movt	r7, #1
   10864:	add	r6, sp, #68	; 0x44
   10868:	bl	10698 <fclose@plt>
   1086c:	movw	r0, #2944	; 0xb80
   10870:	movt	r0, #1
   10874:	bl	1065c <puts@plt>
   10878:	mov	r1, r5
   1087c:	movw	r0, #2892	; 0xb4c
   10880:	movt	r0, #1
   10884:	add	r8, sp, #172	; 0xac
   10888:	bl	10644 <printf@plt>
   1088c:	vmov	s15, r5
   10890:	mov	r4, #97	; 0x61
   10894:	vcvt.f32.s32	s16, s15
   10898:	ldr	r3, [r6, #4]!
   1089c:	mov	r1, r4
   108a0:	mov	r0, r7
   108a4:	add	r4, r4, #1
   108a8:	vmov	s14, r3
   108ac:	vcvt.f32.s32	s14, s14
   108b0:	vdiv.f32	s15, s14, s16
   108b4:	vmul.f32	s15, s15, s17
   108b8:	vcvt.f64.f32	d7, s15
   108bc:	vmov	r2, r3, d7
   108c0:	bl	10644 <printf@plt>
   108c4:	cmp	r8, r6
   108c8:	bne	10898 <main@@Base+0x1dc>
   108cc:	mov	r0, #0
   108d0:	add	sp, sp, #176	; 0xb0
   108d4:	vpop	{d8}
   108d8:	ldrd	r4, [sp]
   108dc:	ldrd	r6, [sp, #8]
   108e0:	ldr	r8, [sp, #16]
   108e4:	add	sp, sp, #20
   108e8:	pop	{pc}		; (ldr pc, [sp], #4)
   108ec:	mov	r7, #388	; 0x184
   108f0:	bl	10674 <__ctype_tolower_loc@plt>
   108f4:	ldr	r3, [r0]
   108f8:	ldr	r0, [r3, r7]
   108fc:	sub	r0, r0, #97	; 0x61
   10900:	cmp	r0, #25
   10904:	bhi	10758 <main@@Base+0x9c>
   10908:	b	1082c <main@@Base+0x170>
   1090c:	mov	r7, #404	; 0x194
   10910:	b	108f0 <main@@Base+0x234>
   10914:	mov	r7, #111	; 0x6f
   10918:	lsl	r7, r7, #2
   1091c:	b	108f0 <main@@Base+0x234>
   10920:	mov	r7, #105	; 0x69
   10924:	b	10918 <main@@Base+0x25c>
   10928:	mov	r7, #420	; 0x1a4
   1092c:	b	108f0 <main@@Base+0x234>
   10930:	mov	r7, #99	; 0x63
   10934:	b	10918 <main@@Base+0x25c>
   10938:	mov	r7, #117	; 0x75
   1093c:	b	10918 <main@@Base+0x25c>
   10940:	sbcmi	r0, r8, #0

00010944 <_start@@Base>:
   10944:	mov	fp, #0
   10948:	mov	lr, #0
   1094c:	pop	{r1}		; (ldr r1, [sp], #4)
   10950:	mov	r2, sp
   10954:	push	{r2}		; (str r2, [sp, #-4]!)
   10958:	push	{r0}		; (str r0, [sp, #-4]!)
   1095c:	ldr	ip, [pc, #16]	; 10974 <_start@@Base+0x30>
   10960:	push	{ip}		; (str ip, [sp, #-4]!)
   10964:	ldr	r0, [pc, #12]	; 10978 <_start@@Base+0x34>
   10968:	ldr	r3, [pc, #12]	; 1097c <_start@@Base+0x38>
   1096c:	bl	10668 <__libc_start_main@plt>
   10970:	bl	106a4 <abort@plt>
   10974:	ldrdeq	r0, [r1], -r8
   10978:			; <UNDEFINED> instruction: 0x000106bc
   1097c:	andeq	r0, r1, r8, ror sl
   10980:	ldr	r3, [pc, #20]	; 1099c <_start@@Base+0x58>
   10984:	ldr	r2, [pc, #20]	; 109a0 <_start@@Base+0x5c>
   10988:	add	r3, pc, r3
   1098c:	ldr	r2, [r3, r2]
   10990:	cmp	r2, #0
   10994:	bxeq	lr
   10998:	b	10680 <__gmon_start__@plt>
   1099c:	andeq	r0, r1, r0, ror r6
   109a0:	andeq	r0, r0, r4, lsr r0
   109a4:	ldr	r0, [pc, #24]	; 109c4 <_start@@Base+0x80>
   109a8:	ldr	r3, [pc, #24]	; 109c8 <_start@@Base+0x84>
   109ac:	cmp	r3, r0
   109b0:	bxeq	lr
   109b4:	ldr	r3, [pc, #16]	; 109cc <_start@@Base+0x88>
   109b8:	cmp	r3, #0
   109bc:	bxeq	lr
   109c0:	bx	r3
   109c4:	andeq	r1, r2, r0, asr #32
   109c8:	andeq	r1, r2, r0, asr #32
   109cc:	andeq	r0, r0, r0
   109d0:	ldr	r0, [pc, #36]	; 109fc <_start@@Base+0xb8>
   109d4:	ldr	r1, [pc, #36]	; 10a00 <_start@@Base+0xbc>
   109d8:	sub	r1, r1, r0
   109dc:	asr	r1, r1, #2
   109e0:	add	r1, r1, r1, lsr #31
   109e4:	asrs	r1, r1, #1
   109e8:	bxeq	lr
   109ec:	ldr	r3, [pc, #16]	; 10a04 <_start@@Base+0xc0>
   109f0:	cmp	r3, #0
   109f4:	bxeq	lr
   109f8:	bx	r3
   109fc:	andeq	r1, r2, r0, asr #32
   10a00:	andeq	r1, r2, r0, asr #32
   10a04:	andeq	r0, r0, r0
   10a08:	push	{r4, lr}
   10a0c:	ldr	r4, [pc, #24]	; 10a2c <_start@@Base+0xe8>
   10a10:	ldrb	r3, [r4]
   10a14:	cmp	r3, #0
   10a18:	popne	{r4, pc}
   10a1c:	bl	109a4 <_start@@Base+0x60>
   10a20:	mov	r3, #1
   10a24:	strb	r3, [r4]
   10a28:	pop	{r4, pc}
   10a2c:	andeq	r1, r2, r0, asr #32
   10a30:	b	109d0 <_start@@Base+0x8c>

00010a34 <in_array@@Base>:
   10a34:	cmp	r2, #0
   10a38:	blt	10a68 <in_array@@Base+0x34>
   10a3c:	ldr	r3, [r1]
   10a40:	cmp	r0, r3
   10a44:	beq	10a70 <in_array@@Base+0x3c>
   10a48:	mov	r3, #0
   10a4c:	b	10a5c <in_array@@Base+0x28>
   10a50:	ldr	ip, [r1, #4]!
   10a54:	cmp	ip, r0
   10a58:	beq	10a70 <in_array@@Base+0x3c>
   10a5c:	add	r3, r3, #1
   10a60:	cmp	r2, r3
   10a64:	bge	10a50 <in_array@@Base+0x1c>
   10a68:	mov	r0, #0
   10a6c:	bx	lr
   10a70:	mov	r0, #1
   10a74:	bx	lr

00010a78 <__libc_csu_init@@Base>:
   10a78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a7c:	mov	r7, r0
   10a80:	ldr	r6, [pc, #72]	; 10ad0 <__libc_csu_init@@Base+0x58>
   10a84:	ldr	r5, [pc, #72]	; 10ad4 <__libc_csu_init@@Base+0x5c>
   10a88:	add	r6, pc, r6
   10a8c:	add	r5, pc, r5
   10a90:	sub	r6, r6, r5
   10a94:	mov	r8, r1
   10a98:	mov	r9, r2
   10a9c:	bl	10624 <printf@plt-0x20>
   10aa0:	asrs	r6, r6, #2
   10aa4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aa8:	mov	r4, #0
   10aac:	add	r4, r4, #1
   10ab0:	ldr	r3, [r5], #4
   10ab4:	mov	r2, r9
   10ab8:	mov	r1, r8
   10abc:	mov	r0, r7
   10ac0:	blx	r3
   10ac4:	cmp	r6, r4
   10ac8:	bne	10aac <__libc_csu_init@@Base+0x34>
   10acc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ad0:	andeq	r0, r1, r4, lsl #9
   10ad4:	andeq	r0, r1, ip, ror r4

00010ad8 <__libc_csu_fini@@Base>:
   10ad8:	bx	lr

Disassembly of section .fini:

00010adc <.fini>:
   10adc:	push	{r3, lr}
   10ae0:	pop	{r3, pc}
