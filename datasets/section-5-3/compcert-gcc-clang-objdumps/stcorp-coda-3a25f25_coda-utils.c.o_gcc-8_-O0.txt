
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-utils.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_format_from_string>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #8
      10:	str	r0, [fp, #-8]
      14:	str	r1, [fp, #-12]
      18:	movw	r1, #0
      1c:	movt	r1, #0
      20:	ldr	r0, [fp, #-8]
      24:	bl	0 <strcmp>
      28:	mov	r3, r0
      2c:	cmp	r3, #0
      30:	bne	44 <coda_format_from_string+0x44>
      34:	ldr	r3, [fp, #-12]
      38:	mov	r2, #0
      3c:	str	r2, [r3]
      40:	b	1f0 <coda_format_from_string+0x1f0>
      44:	movw	r1, #0
      48:	movt	r1, #0
      4c:	ldr	r0, [fp, #-8]
      50:	bl	0 <strcmp>
      54:	mov	r3, r0
      58:	cmp	r3, #0
      5c:	bne	70 <coda_format_from_string+0x70>
      60:	ldr	r3, [fp, #-12]
      64:	mov	r2, #1
      68:	str	r2, [r3]
      6c:	b	1f0 <coda_format_from_string+0x1f0>
      70:	movw	r1, #0
      74:	movt	r1, #0
      78:	ldr	r0, [fp, #-8]
      7c:	bl	0 <strcmp>
      80:	mov	r3, r0
      84:	cmp	r3, #0
      88:	bne	9c <coda_format_from_string+0x9c>
      8c:	ldr	r3, [fp, #-12]
      90:	mov	r2, #2
      94:	str	r2, [r3]
      98:	b	1f0 <coda_format_from_string+0x1f0>
      9c:	movw	r1, #0
      a0:	movt	r1, #0
      a4:	ldr	r0, [fp, #-8]
      a8:	bl	0 <strcmp>
      ac:	mov	r3, r0
      b0:	cmp	r3, #0
      b4:	bne	c8 <coda_format_from_string+0xc8>
      b8:	ldr	r3, [fp, #-12]
      bc:	mov	r2, #3
      c0:	str	r2, [r3]
      c4:	b	1f0 <coda_format_from_string+0x1f0>
      c8:	movw	r1, #0
      cc:	movt	r1, #0
      d0:	ldr	r0, [fp, #-8]
      d4:	bl	0 <strcmp>
      d8:	mov	r3, r0
      dc:	cmp	r3, #0
      e0:	bne	f4 <coda_format_from_string+0xf4>
      e4:	ldr	r3, [fp, #-12]
      e8:	mov	r2, #4
      ec:	str	r2, [r3]
      f0:	b	1f0 <coda_format_from_string+0x1f0>
      f4:	movw	r1, #0
      f8:	movt	r1, #0
      fc:	ldr	r0, [fp, #-8]
     100:	bl	0 <strcmp>
     104:	mov	r3, r0
     108:	cmp	r3, #0
     10c:	bne	120 <coda_format_from_string+0x120>
     110:	ldr	r3, [fp, #-12]
     114:	mov	r2, #5
     118:	str	r2, [r3]
     11c:	b	1f0 <coda_format_from_string+0x1f0>
     120:	movw	r1, #0
     124:	movt	r1, #0
     128:	ldr	r0, [fp, #-8]
     12c:	bl	0 <strcmp>
     130:	mov	r3, r0
     134:	cmp	r3, #0
     138:	bne	14c <coda_format_from_string+0x14c>
     13c:	ldr	r3, [fp, #-12]
     140:	mov	r2, #6
     144:	str	r2, [r3]
     148:	b	1f0 <coda_format_from_string+0x1f0>
     14c:	movw	r1, #0
     150:	movt	r1, #0
     154:	ldr	r0, [fp, #-8]
     158:	bl	0 <strcmp>
     15c:	mov	r3, r0
     160:	cmp	r3, #0
     164:	bne	178 <coda_format_from_string+0x178>
     168:	ldr	r3, [fp, #-12]
     16c:	mov	r2, #7
     170:	str	r2, [r3]
     174:	b	1f0 <coda_format_from_string+0x1f0>
     178:	movw	r1, #0
     17c:	movt	r1, #0
     180:	ldr	r0, [fp, #-8]
     184:	bl	0 <strcmp>
     188:	mov	r3, r0
     18c:	cmp	r3, #0
     190:	bne	1a4 <coda_format_from_string+0x1a4>
     194:	ldr	r3, [fp, #-12]
     198:	mov	r2, #8
     19c:	str	r2, [r3]
     1a0:	b	1f0 <coda_format_from_string+0x1f0>
     1a4:	movw	r1, #0
     1a8:	movt	r1, #0
     1ac:	ldr	r0, [fp, #-8]
     1b0:	bl	0 <strcmp>
     1b4:	mov	r3, r0
     1b8:	cmp	r3, #0
     1bc:	bne	1d0 <coda_format_from_string+0x1d0>
     1c0:	ldr	r3, [fp, #-12]
     1c4:	mov	r2, #9
     1c8:	str	r2, [r3]
     1cc:	b	1f0 <coda_format_from_string+0x1f0>
     1d0:	ldr	r2, [fp, #-8]
     1d4:	movw	r1, #0
     1d8:	movt	r1, #0
     1dc:	movw	r0, #65136	; 0xfe70
     1e0:	movt	r0, #65535	; 0xffff
     1e4:	bl	0 <coda_set_error>
     1e8:	mvn	r3, #0
     1ec:	b	1f4 <coda_format_from_string+0x1f4>
     1f0:	mov	r3, #0
     1f4:	mov	r0, r3
     1f8:	sub	sp, fp, #4
     1fc:	ldr	fp, [sp]
     200:	add	sp, sp, #4
     204:	pop	{pc}		; (ldr pc, [sp], #4)

00000208 <coda_element_name_from_xml_name>:
     208:	push	{fp}		; (str fp, [sp, #-4]!)
     20c:	add	fp, sp, #0
     210:	sub	sp, sp, #20
     214:	str	r0, [fp, #-16]
     218:	ldr	r3, [fp, #-16]
     21c:	str	r3, [fp, #-8]
     220:	b	230 <coda_element_name_from_xml_name+0x28>
     224:	ldr	r3, [fp, #-8]
     228:	add	r3, r3, #1
     22c:	str	r3, [fp, #-8]
     230:	ldr	r3, [fp, #-8]
     234:	ldrb	r3, [r3]
     238:	cmp	r3, #32
     23c:	beq	250 <coda_element_name_from_xml_name+0x48>
     240:	ldr	r3, [fp, #-8]
     244:	ldrb	r3, [r3]
     248:	cmp	r3, #0
     24c:	bne	224 <coda_element_name_from_xml_name+0x1c>
     250:	ldr	r3, [fp, #-8]
     254:	ldrb	r3, [r3]
     258:	cmp	r3, #0
     25c:	bne	268 <coda_element_name_from_xml_name+0x60>
     260:	ldr	r3, [fp, #-16]
     264:	b	278 <coda_element_name_from_xml_name+0x70>
     268:	ldr	r3, [fp, #-8]
     26c:	add	r3, r3, #1
     270:	str	r3, [fp, #-8]
     274:	ldr	r3, [fp, #-8]
     278:	mov	r0, r3
     27c:	add	sp, fp, #0
     280:	pop	{fp}		; (ldr fp, [sp], #4)
     284:	bx	lr

00000288 <coda_is_identifier>:
     288:	str	fp, [sp, #-8]!
     28c:	str	lr, [sp, #4]
     290:	add	fp, sp, #4
     294:	sub	sp, sp, #16
     298:	str	r0, [fp, #-16]
     29c:	ldr	r3, [fp, #-16]
     2a0:	cmp	r3, #0
     2a4:	bne	2b0 <coda_is_identifier+0x28>
     2a8:	mov	r3, #0
     2ac:	b	36c <coda_is_identifier+0xe4>
     2b0:	bl	0 <__ctype_b_loc>
     2b4:	mov	r3, r0
     2b8:	ldr	r2, [r3]
     2bc:	ldr	r3, [fp, #-16]
     2c0:	ldrb	r3, [r3]
     2c4:	lsl	r3, r3, #1
     2c8:	add	r3, r2, r3
     2cc:	ldrh	r3, [r3]
     2d0:	and	r3, r3, #1024	; 0x400
     2d4:	cmp	r3, #0
     2d8:	bne	2e4 <coda_is_identifier+0x5c>
     2dc:	mov	r3, #0
     2e0:	b	36c <coda_is_identifier+0xe4>
     2e4:	mov	r3, #1
     2e8:	str	r3, [fp, #-8]
     2ec:	b	350 <coda_is_identifier+0xc8>
     2f0:	bl	0 <__ctype_b_loc>
     2f4:	mov	r3, r0
     2f8:	ldr	r2, [r3]
     2fc:	ldr	r3, [fp, #-8]
     300:	ldr	r1, [fp, #-16]
     304:	add	r3, r1, r3
     308:	ldrb	r3, [r3]
     30c:	lsl	r3, r3, #1
     310:	add	r3, r2, r3
     314:	ldrh	r3, [r3]
     318:	and	r3, r3, #8
     31c:	cmp	r3, #0
     320:	bne	344 <coda_is_identifier+0xbc>
     324:	ldr	r3, [fp, #-8]
     328:	ldr	r2, [fp, #-16]
     32c:	add	r3, r2, r3
     330:	ldrb	r3, [r3]
     334:	cmp	r3, #95	; 0x5f
     338:	beq	344 <coda_is_identifier+0xbc>
     33c:	mov	r3, #0
     340:	b	36c <coda_is_identifier+0xe4>
     344:	ldr	r3, [fp, #-8]
     348:	add	r3, r3, #1
     34c:	str	r3, [fp, #-8]
     350:	ldr	r3, [fp, #-8]
     354:	ldr	r2, [fp, #-16]
     358:	add	r3, r2, r3
     35c:	ldrb	r3, [r3]
     360:	cmp	r3, #0
     364:	bne	2f0 <coda_is_identifier+0x68>
     368:	mov	r3, #1
     36c:	mov	r0, r3
     370:	sub	sp, fp, #4
     374:	ldr	fp, [sp]
     378:	add	sp, sp, #4
     37c:	pop	{pc}		; (ldr pc, [sp], #4)

00000380 <coda_identifier_from_name>:
     380:	str	fp, [sp, #-8]!
     384:	str	lr, [sp, #4]
     388:	add	fp, sp, #4
     38c:	sub	sp, sp, #40	; 0x28
     390:	str	r0, [fp, #-32]	; 0xffffffe0
     394:	str	r1, [fp, #-36]	; 0xffffffdc
     398:	mov	r3, #4
     39c:	str	r3, [fp, #-16]
     3a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3a4:	cmp	r3, #0
     3a8:	bne	3c8 <coda_identifier_from_name+0x48>
     3ac:	movw	r3, #0
     3b0:	movt	r3, #0
     3b4:	str	r3, [fp, #-32]	; 0xffffffe0
     3b8:	b	420 <coda_identifier_from_name+0xa0>
     3bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3c0:	add	r3, r3, #1
     3c4:	str	r3, [fp, #-32]	; 0xffffffe0
     3c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3cc:	ldrb	r3, [r3]
     3d0:	cmp	r3, #0
     3d4:	beq	404 <coda_identifier_from_name+0x84>
     3d8:	bl	0 <__ctype_b_loc>
     3dc:	mov	r3, r0
     3e0:	ldr	r2, [r3]
     3e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3e8:	ldrb	r3, [r3]
     3ec:	lsl	r3, r3, #1
     3f0:	add	r3, r2, r3
     3f4:	ldrh	r3, [r3]
     3f8:	and	r3, r3, #1024	; 0x400
     3fc:	cmp	r3, #0
     400:	beq	3bc <coda_identifier_from_name+0x3c>
     404:	ldr	r3, [fp, #-32]	; 0xffffffe0
     408:	ldrb	r3, [r3]
     40c:	cmp	r3, #0
     410:	bne	420 <coda_identifier_from_name+0xa0>
     414:	movw	r3, #0
     418:	movt	r3, #0
     41c:	str	r3, [fp, #-32]	; 0xffffffe0
     420:	ldr	r0, [fp, #-32]	; 0xffffffe0
     424:	bl	0 <strlen>
     428:	mov	r3, r0
     42c:	str	r3, [fp, #-20]	; 0xffffffec
     430:	ldr	r2, [fp, #-20]	; 0xffffffec
     434:	ldr	r3, [fp, #-16]
     438:	add	r3, r2, r3
     43c:	add	r3, r3, #1
     440:	mov	r0, r3
     444:	bl	0 <malloc>
     448:	mov	r3, r0
     44c:	str	r3, [fp, #-24]	; 0xffffffe8
     450:	ldr	r3, [fp, #-24]	; 0xffffffe8
     454:	cmp	r3, #0
     458:	bne	490 <coda_identifier_from_name+0x110>
     45c:	ldr	r2, [fp, #-20]	; 0xffffffec
     460:	ldr	r3, [fp, #-16]
     464:	add	r2, r2, r3
     468:	mov	r3, #172	; 0xac
     46c:	str	r3, [sp]
     470:	movw	r3, #0
     474:	movt	r3, #0
     478:	movw	r1, #0
     47c:	movt	r1, #0
     480:	mvn	r0, #0
     484:	bl	0 <coda_set_error>
     488:	mov	r3, #0
     48c:	b	5d4 <coda_identifier_from_name+0x254>
     490:	ldr	r3, [fp, #-32]	; 0xffffffe0
     494:	ldrb	r2, [r3]
     498:	ldr	r3, [fp, #-24]	; 0xffffffe8
     49c:	strb	r2, [r3]
     4a0:	mov	r3, #1
     4a4:	str	r3, [fp, #-8]
     4a8:	b	524 <coda_identifier_from_name+0x1a4>
     4ac:	bl	0 <__ctype_b_loc>
     4b0:	mov	r3, r0
     4b4:	ldr	r2, [r3]
     4b8:	ldr	r3, [fp, #-8]
     4bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
     4c0:	add	r3, r1, r3
     4c4:	ldrb	r3, [r3]
     4c8:	lsl	r3, r3, #1
     4cc:	add	r3, r2, r3
     4d0:	ldrh	r3, [r3]
     4d4:	and	r3, r3, #8
     4d8:	cmp	r3, #0
     4dc:	beq	504 <coda_identifier_from_name+0x184>
     4e0:	ldr	r3, [fp, #-8]
     4e4:	ldr	r2, [fp, #-32]	; 0xffffffe0
     4e8:	add	r2, r2, r3
     4ec:	ldr	r3, [fp, #-8]
     4f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
     4f4:	add	r3, r1, r3
     4f8:	ldrb	r2, [r2]
     4fc:	strb	r2, [r3]
     500:	b	518 <coda_identifier_from_name+0x198>
     504:	ldr	r3, [fp, #-8]
     508:	ldr	r2, [fp, #-24]	; 0xffffffe8
     50c:	add	r3, r2, r3
     510:	mov	r2, #95	; 0x5f
     514:	strb	r2, [r3]
     518:	ldr	r3, [fp, #-8]
     51c:	add	r3, r3, #1
     520:	str	r3, [fp, #-8]
     524:	ldr	r2, [fp, #-8]
     528:	ldr	r3, [fp, #-20]	; 0xffffffec
     52c:	cmp	r2, r3
     530:	blt	4ac <coda_identifier_from_name+0x12c>
     534:	ldr	r3, [fp, #-20]	; 0xffffffec
     538:	ldr	r2, [fp, #-24]	; 0xffffffe8
     53c:	add	r3, r2, r3
     540:	mov	r2, #0
     544:	strb	r2, [r3]
     548:	ldr	r3, [fp, #-36]	; 0xffffffdc
     54c:	cmp	r3, #0
     550:	beq	5d0 <coda_identifier_from_name+0x250>
     554:	mov	r3, #0
     558:	str	r3, [fp, #-12]
     55c:	b	5b8 <coda_identifier_from_name+0x238>
     560:	ldr	r3, [fp, #-12]
     564:	add	r3, r3, #1
     568:	str	r3, [fp, #-12]
     56c:	ldr	r3, [fp, #-12]
     570:	cmp	r3, #1000	; 0x3e8
     574:	blt	598 <coda_identifier_from_name+0x218>
     578:	movw	r3, #0
     57c:	movt	r3, #0
     580:	mov	r2, #203	; 0xcb
     584:	movw	r1, #0
     588:	movt	r1, #0
     58c:	movw	r0, #0
     590:	movt	r0, #0
     594:	bl	0 <__assert_fail>
     598:	ldr	r3, [fp, #-20]	; 0xffffffec
     59c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     5a0:	add	r3, r2, r3
     5a4:	ldr	r2, [fp, #-12]
     5a8:	movw	r1, #0
     5ac:	movt	r1, #0
     5b0:	mov	r0, r3
     5b4:	bl	0 <sprintf>
     5b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     5bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
     5c0:	bl	0 <coda_hashtable_get_index_from_name>
     5c4:	mov	r3, r0
     5c8:	cmp	r3, #0
     5cc:	bge	560 <coda_identifier_from_name+0x1e0>
     5d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5d4:	mov	r0, r3
     5d8:	sub	sp, fp, #4
     5dc:	ldr	fp, [sp]
     5e0:	add	sp, sp, #4
     5e4:	pop	{pc}		; (ldr pc, [sp], #4)

000005e8 <coda_c_index_to_fortran_index>:
     5e8:	str	fp, [sp, #-8]!
     5ec:	str	lr, [sp, #4]
     5f0:	add	fp, sp, #4
     5f4:	sub	sp, sp, #64	; 0x40
     5f8:	str	r0, [fp, #-56]	; 0xffffffc8
     5fc:	str	r1, [fp, #-60]	; 0xffffffc4
     600:	str	r2, [fp, #-64]	; 0xffffffc0
     604:	ldr	r3, [fp, #-56]	; 0xffffffc8
     608:	cmp	r3, #8
     60c:	ble	630 <coda_c_index_to_fortran_index+0x48>
     610:	mov	r3, #8
     614:	ldr	r2, [fp, #-56]	; 0xffffffc8
     618:	movw	r1, #0
     61c:	movt	r1, #0
     620:	mvn	r0, #99	; 0x63
     624:	bl	0 <coda_set_error>
     628:	mvn	r3, #0
     62c:	b	734 <coda_c_index_to_fortran_index+0x14c>
     630:	ldr	r3, [fp, #-56]	; 0xffffffc8
     634:	sub	r3, r3, #1
     638:	str	r3, [fp, #-8]
     63c:	b	6a4 <coda_c_index_to_fortran_index+0xbc>
     640:	ldr	r3, [fp, #-8]
     644:	lsl	r3, r3, #2
     648:	ldr	r2, [fp, #-60]	; 0xffffffc4
     64c:	add	r3, r2, r3
     650:	ldr	r2, [r3]
     654:	ldr	r3, [fp, #-64]	; 0xffffffc0
     658:	sdiv	r1, r3, r2
     65c:	mul	r2, r2, r1
     660:	sub	r2, r3, r2
     664:	ldr	r3, [fp, #-8]
     668:	lsl	r3, r3, #2
     66c:	sub	r1, fp, #4
     670:	add	r3, r1, r3
     674:	str	r2, [r3, #-44]	; 0xffffffd4
     678:	ldr	r3, [fp, #-8]
     67c:	lsl	r3, r3, #2
     680:	ldr	r2, [fp, #-60]	; 0xffffffc4
     684:	add	r3, r2, r3
     688:	ldr	r3, [r3]
     68c:	ldr	r2, [fp, #-64]	; 0xffffffc0
     690:	sdiv	r3, r2, r3
     694:	str	r3, [fp, #-64]	; 0xffffffc0
     698:	ldr	r3, [fp, #-8]
     69c:	sub	r3, r3, #1
     6a0:	str	r3, [fp, #-8]
     6a4:	ldr	r3, [fp, #-8]
     6a8:	cmp	r3, #0
     6ac:	bge	640 <coda_c_index_to_fortran_index+0x58>
     6b0:	mov	r3, #0
     6b4:	str	r3, [fp, #-12]
     6b8:	mov	r3, #1
     6bc:	str	r3, [fp, #-16]
     6c0:	mov	r3, #0
     6c4:	str	r3, [fp, #-8]
     6c8:	b	720 <coda_c_index_to_fortran_index+0x138>
     6cc:	ldr	r3, [fp, #-8]
     6d0:	lsl	r3, r3, #2
     6d4:	sub	r2, fp, #4
     6d8:	add	r3, r2, r3
     6dc:	ldr	r3, [r3, #-44]	; 0xffffffd4
     6e0:	ldr	r2, [fp, #-16]
     6e4:	mul	r3, r2, r3
     6e8:	ldr	r2, [fp, #-12]
     6ec:	add	r3, r2, r3
     6f0:	str	r3, [fp, #-12]
     6f4:	ldr	r3, [fp, #-8]
     6f8:	lsl	r3, r3, #2
     6fc:	ldr	r2, [fp, #-60]	; 0xffffffc4
     700:	add	r3, r2, r3
     704:	ldr	r2, [r3]
     708:	ldr	r3, [fp, #-16]
     70c:	mul	r3, r2, r3
     710:	str	r3, [fp, #-16]
     714:	ldr	r3, [fp, #-8]
     718:	add	r3, r3, #1
     71c:	str	r3, [fp, #-8]
     720:	ldr	r2, [fp, #-8]
     724:	ldr	r3, [fp, #-56]	; 0xffffffc8
     728:	cmp	r2, r3
     72c:	blt	6cc <coda_c_index_to_fortran_index+0xe4>
     730:	ldr	r3, [fp, #-12]
     734:	mov	r0, r3
     738:	sub	sp, fp, #4
     73c:	ldr	fp, [sp]
     740:	add	sp, sp, #4
     744:	pop	{pc}		; (ldr pc, [sp], #4)

00000748 <clean_path>:
     748:	push	{fp}		; (str fp, [sp, #-4]!)
     74c:	add	fp, sp, #0
     750:	sub	sp, sp, #28
     754:	str	r0, [fp, #-24]	; 0xffffffe8
     758:	ldr	r3, [fp, #-24]	; 0xffffffe8
     75c:	cmp	r3, #0
     760:	beq	acc <clean_path+0x384>
     764:	ldr	r3, [fp, #-24]	; 0xffffffe8
     768:	ldrb	r3, [r3]
     76c:	cmp	r3, #0
     770:	beq	acc <clean_path+0x384>
     774:	mov	r3, #0
     778:	str	r3, [fp, #-8]
     77c:	mov	r3, #0
     780:	str	r3, [fp, #-12]
     784:	b	794 <clean_path+0x4c>
     788:	ldr	r3, [fp, #-8]
     78c:	add	r3, r3, #2
     790:	str	r3, [fp, #-8]
     794:	ldr	r3, [fp, #-8]
     798:	ldr	r2, [fp, #-24]	; 0xffffffe8
     79c:	add	r3, r2, r3
     7a0:	ldrb	r3, [r3]
     7a4:	cmp	r3, #46	; 0x2e
     7a8:	bne	a70 <clean_path+0x328>
     7ac:	ldr	r3, [fp, #-8]
     7b0:	add	r3, r3, #1
     7b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7b8:	add	r3, r2, r3
     7bc:	ldrb	r3, [r3]
     7c0:	cmp	r3, #47	; 0x2f
     7c4:	beq	788 <clean_path+0x40>
     7c8:	b	a70 <clean_path+0x328>
     7cc:	ldr	r3, [fp, #-8]
     7d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7d4:	add	r3, r2, r3
     7d8:	ldrb	r3, [r3]
     7dc:	cmp	r3, #47	; 0x2f
     7e0:	beq	7fc <clean_path+0xb4>
     7e4:	ldr	r3, [fp, #-8]
     7e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7ec:	add	r3, r2, r3
     7f0:	ldrb	r3, [r3]
     7f4:	cmp	r3, #92	; 0x5c
     7f8:	bne	a38 <clean_path+0x2f0>
     7fc:	ldr	r3, [fp, #-8]
     800:	add	r3, r3, #1
     804:	ldr	r2, [fp, #-24]	; 0xffffffe8
     808:	add	r3, r2, r3
     80c:	ldrb	r3, [r3]
     810:	cmp	r3, #47	; 0x2f
     814:	beq	834 <clean_path+0xec>
     818:	ldr	r3, [fp, #-8]
     81c:	add	r3, r3, #1
     820:	ldr	r2, [fp, #-24]	; 0xffffffe8
     824:	add	r3, r2, r3
     828:	ldrb	r3, [r3]
     82c:	cmp	r3, #92	; 0x5c
     830:	bne	844 <clean_path+0xfc>
     834:	ldr	r3, [fp, #-8]
     838:	add	r3, r3, #1
     83c:	str	r3, [fp, #-8]
     840:	b	a70 <clean_path+0x328>
     844:	ldr	r3, [fp, #-8]
     848:	add	r3, r3, #1
     84c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     850:	add	r3, r2, r3
     854:	ldrb	r3, [r3]
     858:	cmp	r3, #46	; 0x2e
     85c:	bne	a38 <clean_path+0x2f0>
     860:	ldr	r3, [fp, #-8]
     864:	add	r3, r3, #2
     868:	ldr	r2, [fp, #-24]	; 0xffffffe8
     86c:	add	r3, r2, r3
     870:	ldrb	r3, [r3]
     874:	cmp	r3, #0
     878:	beq	8b4 <clean_path+0x16c>
     87c:	ldr	r3, [fp, #-8]
     880:	add	r3, r3, #2
     884:	ldr	r2, [fp, #-24]	; 0xffffffe8
     888:	add	r3, r2, r3
     88c:	ldrb	r3, [r3]
     890:	cmp	r3, #47	; 0x2f
     894:	beq	8b4 <clean_path+0x16c>
     898:	ldr	r3, [fp, #-8]
     89c:	add	r3, r3, #2
     8a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     8a4:	add	r3, r2, r3
     8a8:	ldrb	r3, [r3]
     8ac:	cmp	r3, #92	; 0x5c
     8b0:	bne	8c4 <clean_path+0x17c>
     8b4:	ldr	r3, [fp, #-8]
     8b8:	add	r3, r3, #2
     8bc:	str	r3, [fp, #-8]
     8c0:	b	a70 <clean_path+0x328>
     8c4:	ldr	r3, [fp, #-8]
     8c8:	add	r3, r3, #2
     8cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     8d0:	add	r3, r2, r3
     8d4:	ldrb	r3, [r3]
     8d8:	cmp	r3, #46	; 0x2e
     8dc:	bne	a38 <clean_path+0x2f0>
     8e0:	ldr	r3, [fp, #-8]
     8e4:	add	r3, r3, #3
     8e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     8ec:	add	r3, r2, r3
     8f0:	ldrb	r3, [r3]
     8f4:	cmp	r3, #0
     8f8:	beq	934 <clean_path+0x1ec>
     8fc:	ldr	r3, [fp, #-8]
     900:	add	r3, r3, #3
     904:	ldr	r2, [fp, #-24]	; 0xffffffe8
     908:	add	r3, r2, r3
     90c:	ldrb	r3, [r3]
     910:	cmp	r3, #47	; 0x2f
     914:	beq	934 <clean_path+0x1ec>
     918:	ldr	r3, [fp, #-8]
     91c:	add	r3, r3, #3
     920:	ldr	r2, [fp, #-24]	; 0xffffffe8
     924:	add	r3, r2, r3
     928:	ldrb	r3, [r3]
     92c:	cmp	r3, #92	; 0x5c
     930:	bne	a38 <clean_path+0x2f0>
     934:	ldr	r3, [fp, #-12]
     938:	cmp	r3, #1
     93c:	ble	9bc <clean_path+0x274>
     940:	ldr	r3, [fp, #-12]
     944:	sub	r3, r3, #1
     948:	ldr	r2, [fp, #-24]	; 0xffffffe8
     94c:	add	r3, r2, r3
     950:	ldrb	r3, [r3]
     954:	cmp	r3, #46	; 0x2e
     958:	bne	9bc <clean_path+0x274>
     95c:	ldr	r3, [fp, #-12]
     960:	sub	r3, r3, #2
     964:	ldr	r2, [fp, #-24]	; 0xffffffe8
     968:	add	r3, r2, r3
     96c:	ldrb	r3, [r3]
     970:	cmp	r3, #46	; 0x2e
     974:	bne	9bc <clean_path+0x274>
     978:	ldr	r3, [fp, #-12]
     97c:	cmp	r3, #2
     980:	beq	a38 <clean_path+0x2f0>
     984:	ldr	r3, [fp, #-12]
     988:	sub	r3, r3, #3
     98c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     990:	add	r3, r2, r3
     994:	ldrb	r3, [r3]
     998:	cmp	r3, #47	; 0x2f
     99c:	beq	a38 <clean_path+0x2f0>
     9a0:	ldr	r3, [fp, #-12]
     9a4:	sub	r3, r3, #3
     9a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     9ac:	add	r3, r2, r3
     9b0:	ldrb	r3, [r3]
     9b4:	cmp	r3, #92	; 0x5c
     9b8:	beq	a38 <clean_path+0x2f0>
     9bc:	ldr	r3, [fp, #-12]
     9c0:	sub	r3, r3, #1
     9c4:	str	r3, [fp, #-16]
     9c8:	b	9d8 <clean_path+0x290>
     9cc:	ldr	r3, [fp, #-16]
     9d0:	sub	r3, r3, #1
     9d4:	str	r3, [fp, #-16]
     9d8:	ldr	r3, [fp, #-16]
     9dc:	cmp	r3, #0
     9e0:	blt	a14 <clean_path+0x2cc>
     9e4:	ldr	r3, [fp, #-16]
     9e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     9ec:	add	r3, r2, r3
     9f0:	ldrb	r3, [r3]
     9f4:	cmp	r3, #47	; 0x2f
     9f8:	beq	a14 <clean_path+0x2cc>
     9fc:	ldr	r3, [fp, #-16]
     a00:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a04:	add	r3, r2, r3
     a08:	ldrb	r3, [r3]
     a0c:	cmp	r3, #92	; 0x5c
     a10:	bne	9cc <clean_path+0x284>
     a14:	ldr	r3, [fp, #-16]
     a18:	cmp	r3, #0
     a1c:	blt	a38 <clean_path+0x2f0>
     a20:	ldr	r3, [fp, #-16]
     a24:	str	r3, [fp, #-12]
     a28:	ldr	r3, [fp, #-8]
     a2c:	add	r3, r3, #3
     a30:	str	r3, [fp, #-8]
     a34:	b	a70 <clean_path+0x328>
     a38:	ldr	r3, [fp, #-8]
     a3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a40:	add	r2, r2, r3
     a44:	ldr	r3, [fp, #-12]
     a48:	ldr	r1, [fp, #-24]	; 0xffffffe8
     a4c:	add	r3, r1, r3
     a50:	ldrb	r2, [r2]
     a54:	strb	r2, [r3]
     a58:	ldr	r3, [fp, #-8]
     a5c:	add	r3, r3, #1
     a60:	str	r3, [fp, #-8]
     a64:	ldr	r3, [fp, #-12]
     a68:	add	r3, r3, #1
     a6c:	str	r3, [fp, #-12]
     a70:	ldr	r3, [fp, #-8]
     a74:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a78:	add	r3, r2, r3
     a7c:	ldrb	r3, [r3]
     a80:	cmp	r3, #0
     a84:	bne	7cc <clean_path+0x84>
     a88:	ldr	r3, [fp, #-12]
     a8c:	cmp	r3, #0
     a90:	bne	ab4 <clean_path+0x36c>
     a94:	ldr	r3, [fp, #-12]
     a98:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a9c:	add	r3, r2, r3
     aa0:	mov	r2, #46	; 0x2e
     aa4:	strb	r2, [r3]
     aa8:	ldr	r3, [fp, #-12]
     aac:	add	r3, r3, #1
     ab0:	str	r3, [fp, #-12]
     ab4:	ldr	r3, [fp, #-12]
     ab8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     abc:	add	r3, r2, r3
     ac0:	mov	r2, #0
     ac4:	strb	r2, [r3]
     ac8:	b	ad0 <clean_path+0x388>
     acc:	nop	{0}
     ad0:	add	sp, fp, #0
     ad4:	pop	{fp}		; (ldr fp, [sp], #4)
     ad8:	bx	lr

00000adc <coda_path_find_file>:
     adc:	str	fp, [sp, #-8]!
     ae0:	str	lr, [sp, #4]
     ae4:	add	fp, sp, #4
     ae8:	sub	sp, sp, #144	; 0x90
     aec:	str	r0, [fp, #-136]	; 0xffffff78
     af0:	str	r1, [fp, #-140]	; 0xffffff74
     af4:	str	r2, [fp, #-144]	; 0xffffff70
     af8:	mov	r3, #58	; 0x3a
     afc:	strb	r3, [fp, #-21]	; 0xffffffeb
     b00:	mov	r3, #0
     b04:	str	r3, [fp, #-12]
     b08:	mov	r3, #0
     b0c:	str	r3, [fp, #-16]
     b10:	ldr	r0, [fp, #-140]	; 0xffffff74
     b14:	bl	0 <strlen>
     b18:	mov	r3, r0
     b1c:	str	r3, [fp, #-28]	; 0xffffffe4
     b20:	ldr	r3, [fp, #-136]	; 0xffffff78
     b24:	cmp	r3, #0
     b28:	beq	b3c <coda_path_find_file+0x60>
     b2c:	ldr	r3, [fp, #-136]	; 0xffffff78
     b30:	ldrb	r3, [r3]
     b34:	cmp	r3, #0
     b38:	bne	b50 <coda_path_find_file+0x74>
     b3c:	ldr	r3, [fp, #-144]	; 0xffffff70
     b40:	mov	r2, #0
     b44:	str	r2, [r3]
     b48:	mov	r3, #0
     b4c:	b	d4c <coda_path_find_file+0x270>
     b50:	ldr	r0, [fp, #-136]	; 0xffffff78
     b54:	bl	0 <strdup>
     b58:	mov	r3, r0
     b5c:	str	r3, [fp, #-32]	; 0xffffffe0
     b60:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b64:	cmp	r3, #0
     b68:	bne	b90 <coda_path_find_file+0xb4>
     b6c:	movw	r3, #391	; 0x187
     b70:	movw	r2, #0
     b74:	movt	r2, #0
     b78:	movw	r1, #0
     b7c:	movt	r1, #0
     b80:	mvn	r0, #0
     b84:	bl	0 <coda_set_error>
     b88:	mvn	r3, #0
     b8c:	b	d4c <coda_path_find_file+0x270>
     b90:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b94:	str	r3, [fp, #-8]
     b98:	b	d10 <coda_path_find_file+0x234>
     b9c:	ldr	r3, [fp, #-8]
     ba0:	str	r3, [fp, #-20]	; 0xffffffec
     ba4:	b	bb4 <coda_path_find_file+0xd8>
     ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
     bac:	add	r3, r3, #1
     bb0:	str	r3, [fp, #-20]	; 0xffffffec
     bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
     bb8:	ldrb	r3, [r3]
     bbc:	cmp	r3, #0
     bc0:	beq	bd8 <coda_path_find_file+0xfc>
     bc4:	ldr	r3, [fp, #-20]	; 0xffffffec
     bc8:	ldrb	r3, [r3]
     bcc:	ldrb	r2, [fp, #-21]	; 0xffffffeb
     bd0:	cmp	r2, r3
     bd4:	bne	ba8 <coda_path_find_file+0xcc>
     bd8:	ldr	r3, [fp, #-20]	; 0xffffffec
     bdc:	ldrb	r3, [r3]
     be0:	cmp	r3, #0
     be4:	beq	c00 <coda_path_find_file+0x124>
     be8:	ldr	r3, [fp, #-20]	; 0xffffffec
     bec:	mov	r2, #0
     bf0:	strb	r2, [r3]
     bf4:	ldr	r3, [fp, #-20]	; 0xffffffec
     bf8:	add	r3, r3, #1
     bfc:	str	r3, [fp, #-20]	; 0xffffffec
     c00:	ldr	r0, [fp, #-8]
     c04:	bl	0 <strlen>
     c08:	mov	r3, r0
     c0c:	str	r3, [fp, #-36]	; 0xffffffdc
     c10:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c14:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c18:	add	r3, r2, r3
     c1c:	ldr	r2, [fp, #-16]
     c20:	cmp	r2, r3
     c24:	bgt	ca8 <coda_path_find_file+0x1cc>
     c28:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c30:	add	r3, r2, r3
     c34:	add	r3, r3, #2
     c38:	mov	r1, r3
     c3c:	ldr	r0, [fp, #-12]
     c40:	bl	0 <realloc>
     c44:	str	r0, [fp, #-40]	; 0xffffffd8
     c48:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c4c:	cmp	r3, #0
     c50:	bne	c8c <coda_path_find_file+0x1b0>
     c54:	movw	r3, #421	; 0x1a5
     c58:	movw	r2, #0
     c5c:	movt	r2, #0
     c60:	movw	r1, #0
     c64:	movt	r1, #0
     c68:	mvn	r0, #0
     c6c:	bl	0 <coda_set_error>
     c70:	ldr	r3, [fp, #-12]
     c74:	cmp	r3, #0
     c78:	beq	c84 <coda_path_find_file+0x1a8>
     c7c:	ldr	r0, [fp, #-12]
     c80:	bl	0 <free>
     c84:	mvn	r3, #0
     c88:	b	d4c <coda_path_find_file+0x270>
     c8c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c90:	str	r3, [fp, #-12]
     c94:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c98:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c9c:	add	r3, r2, r3
     ca0:	add	r3, r3, #1
     ca4:	str	r3, [fp, #-16]
     ca8:	ldr	r3, [fp, #-140]	; 0xffffff74
     cac:	ldr	r2, [fp, #-8]
     cb0:	movw	r1, #0
     cb4:	movt	r1, #0
     cb8:	ldr	r0, [fp, #-12]
     cbc:	bl	0 <sprintf>
     cc0:	sub	r3, fp, #132	; 0x84
     cc4:	mov	r1, r3
     cc8:	ldr	r0, [fp, #-12]
     ccc:	bl	0 <stat>
     cd0:	mov	r3, r0
     cd4:	cmp	r3, #0
     cd8:	bne	d08 <coda_path_find_file+0x22c>
     cdc:	ldr	r3, [fp, #-116]	; 0xffffff8c
     ce0:	and	r3, r3, #32768	; 0x8000
     ce4:	cmp	r3, #0
     ce8:	beq	d08 <coda_path_find_file+0x22c>
     cec:	ldr	r3, [fp, #-144]	; 0xffffff70
     cf0:	ldr	r2, [fp, #-12]
     cf4:	str	r2, [r3]
     cf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     cfc:	bl	0 <free>
     d00:	mov	r3, #0
     d04:	b	d4c <coda_path_find_file+0x270>
     d08:	ldr	r3, [fp, #-20]	; 0xffffffec
     d0c:	str	r3, [fp, #-8]
     d10:	ldr	r3, [fp, #-8]
     d14:	ldrb	r3, [r3]
     d18:	cmp	r3, #0
     d1c:	bne	b9c <coda_path_find_file+0xc0>
     d20:	ldr	r3, [fp, #-12]
     d24:	cmp	r3, #0
     d28:	beq	d34 <coda_path_find_file+0x258>
     d2c:	ldr	r0, [fp, #-12]
     d30:	bl	0 <free>
     d34:	ldr	r0, [fp, #-32]	; 0xffffffe0
     d38:	bl	0 <free>
     d3c:	ldr	r3, [fp, #-144]	; 0xffffff70
     d40:	mov	r2, #0
     d44:	str	r2, [r3]
     d48:	mov	r3, #0
     d4c:	mov	r0, r3
     d50:	sub	sp, fp, #4
     d54:	ldr	fp, [sp]
     d58:	add	sp, sp, #4
     d5c:	pop	{pc}		; (ldr pc, [sp], #4)

00000d60 <coda_path_from_path>:
     d60:	str	fp, [sp, #-8]!
     d64:	str	lr, [sp, #4]
     d68:	add	fp, sp, #4
     d6c:	sub	sp, sp, #32
     d70:	str	r0, [fp, #-24]	; 0xffffffe8
     d74:	str	r1, [fp, #-28]	; 0xffffffe4
     d78:	str	r2, [fp, #-32]	; 0xffffffe0
     d7c:	str	r3, [fp, #-36]	; 0xffffffdc
     d80:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d84:	bl	0 <strlen>
     d88:	mov	r3, r0
     d8c:	str	r3, [fp, #-12]
     d90:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d94:	cmp	r3, #0
     d98:	beq	dac <coda_path_from_path+0x4c>
     d9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     da0:	bl	0 <strlen>
     da4:	mov	r3, r0
     da8:	b	db0 <coda_path_from_path+0x50>
     dac:	mov	r3, #0
     db0:	str	r3, [fp, #-16]
     db4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     db8:	cmp	r3, #0
     dbc:	beq	e20 <coda_path_from_path+0xc0>
     dc0:	ldr	r3, [fp, #-12]
     dc4:	cmp	r3, #0
     dc8:	ble	e20 <coda_path_from_path+0xc0>
     dcc:	b	ddc <coda_path_from_path+0x7c>
     dd0:	ldr	r3, [fp, #-12]
     dd4:	sub	r3, r3, #1
     dd8:	str	r3, [fp, #-12]
     ddc:	ldr	r3, [fp, #-12]
     de0:	cmp	r3, #0
     de4:	ble	e20 <coda_path_from_path+0xc0>
     de8:	ldr	r3, [fp, #-12]
     dec:	sub	r3, r3, #1
     df0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     df4:	add	r3, r2, r3
     df8:	ldrb	r3, [r3]
     dfc:	cmp	r3, #47	; 0x2f
     e00:	beq	e20 <coda_path_from_path+0xc0>
     e04:	ldr	r3, [fp, #-12]
     e08:	sub	r3, r3, #1
     e0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e10:	add	r3, r2, r3
     e14:	ldrb	r3, [r3]
     e18:	cmp	r3, #92	; 0x5c
     e1c:	bne	dd0 <coda_path_from_path+0x70>
     e20:	ldr	r3, [fp, #-12]
     e24:	add	r2, r3, #1
     e28:	ldr	r3, [fp, #-16]
     e2c:	add	r3, r2, r3
     e30:	add	r3, r3, #1
     e34:	mov	r0, r3
     e38:	bl	0 <malloc>
     e3c:	mov	r3, r0
     e40:	mov	r2, r3
     e44:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e48:	str	r2, [r3]
     e4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e50:	ldr	r3, [r3]
     e54:	cmp	r3, #0
     e58:	bne	e80 <coda_path_from_path+0x120>
     e5c:	movw	r3, #481	; 0x1e1
     e60:	movw	r2, #0
     e64:	movt	r2, #0
     e68:	movw	r1, #0
     e6c:	movt	r1, #0
     e70:	mvn	r0, #0
     e74:	bl	0 <coda_set_error>
     e78:	mvn	r3, #0
     e7c:	b	f30 <coda_path_from_path+0x1d0>
     e80:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e84:	ldr	r3, [r3]
     e88:	str	r3, [fp, #-8]
     e8c:	ldr	r3, [fp, #-12]
     e90:	cmp	r3, #0
     e94:	ble	ee0 <coda_path_from_path+0x180>
     e98:	ldr	r3, [fp, #-12]
     e9c:	mov	r2, r3
     ea0:	ldr	r1, [fp, #-24]	; 0xffffffe8
     ea4:	ldr	r0, [fp, #-8]
     ea8:	bl	0 <memcpy>
     eac:	ldr	r3, [fp, #-12]
     eb0:	ldr	r2, [fp, #-8]
     eb4:	add	r3, r2, r3
     eb8:	str	r3, [fp, #-8]
     ebc:	ldr	r3, [fp, #-16]
     ec0:	cmp	r3, #0
     ec4:	ble	ee0 <coda_path_from_path+0x180>
     ec8:	ldr	r3, [fp, #-8]
     ecc:	mov	r2, #47	; 0x2f
     ed0:	strb	r2, [r3]
     ed4:	ldr	r3, [fp, #-8]
     ed8:	add	r3, r3, #1
     edc:	str	r3, [fp, #-8]
     ee0:	ldr	r3, [fp, #-16]
     ee4:	cmp	r3, #0
     ee8:	ble	f10 <coda_path_from_path+0x1b0>
     eec:	ldr	r3, [fp, #-16]
     ef0:	mov	r2, r3
     ef4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     ef8:	ldr	r0, [fp, #-8]
     efc:	bl	0 <memcpy>
     f00:	ldr	r3, [fp, #-16]
     f04:	ldr	r2, [fp, #-8]
     f08:	add	r3, r2, r3
     f0c:	str	r3, [fp, #-8]
     f10:	ldr	r3, [fp, #-8]
     f14:	mov	r2, #0
     f18:	strb	r2, [r3]
     f1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f20:	ldr	r3, [r3]
     f24:	mov	r0, r3
     f28:	bl	748 <clean_path>
     f2c:	mov	r3, #0
     f30:	mov	r0, r3
     f34:	sub	sp, fp, #4
     f38:	ldr	fp, [sp]
     f3c:	add	sp, sp, #4
     f40:	pop	{pc}		; (ldr pc, [sp], #4)

00000f44 <coda_path_for_program>:
     f44:	str	fp, [sp, #-8]!
     f48:	str	lr, [sp, #4]
     f4c:	add	fp, sp, #4
     f50:	sub	sp, sp, #1040	; 0x410
     f54:	sub	sp, sp, #8
     f58:	str	r0, [fp, #-1048]	; 0xfffffbe8
     f5c:	str	r1, [fp, #-1052]	; 0xfffffbe4
     f60:	mov	r3, #0
     f64:	str	r3, [fp, #-12]
     f68:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
     f6c:	mov	r2, #0
     f70:	str	r2, [r3]
     f74:	ldr	r3, [fp, #-1048]	; 0xfffffbe8
     f78:	cmp	r3, #0
     f7c:	bne	f88 <coda_path_for_program+0x44>
     f80:	mov	r3, #0
     f84:	b	1188 <coda_path_for_program+0x244>
     f88:	ldr	r3, [fp, #-1048]	; 0xfffffbe8
     f8c:	str	r3, [fp, #-8]
     f90:	b	fcc <coda_path_for_program+0x88>
     f94:	ldr	r3, [fp, #-8]
     f98:	ldrb	r3, [r3]
     f9c:	cmp	r3, #47	; 0x2f
     fa0:	beq	fb4 <coda_path_for_program+0x70>
     fa4:	ldr	r3, [fp, #-8]
     fa8:	ldrb	r3, [r3]
     fac:	cmp	r3, #92	; 0x5c
     fb0:	bne	fc0 <coda_path_for_program+0x7c>
     fb4:	mov	r3, #1
     fb8:	str	r3, [fp, #-12]
     fbc:	b	fdc <coda_path_for_program+0x98>
     fc0:	ldr	r3, [fp, #-8]
     fc4:	add	r3, r3, #1
     fc8:	str	r3, [fp, #-8]
     fcc:	ldr	r3, [fp, #-8]
     fd0:	ldrb	r3, [r3]
     fd4:	cmp	r3, #0
     fd8:	bne	f94 <coda_path_for_program+0x50>
     fdc:	ldr	r3, [fp, #-12]
     fe0:	cmp	r3, #0
     fe4:	beq	1034 <coda_path_for_program+0xf0>
     fe8:	ldr	r0, [fp, #-1048]	; 0xfffffbe8
     fec:	bl	0 <strdup>
     ff0:	mov	r3, r0
     ff4:	mov	r2, r3
     ff8:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
     ffc:	str	r2, [r3]
    1000:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1004:	ldr	r3, [r3]
    1008:	cmp	r3, #0
    100c:	bne	108c <coda_path_for_program+0x148>
    1010:	movw	r3, #537	; 0x219
    1014:	movw	r2, #0
    1018:	movt	r2, #0
    101c:	movw	r1, #0
    1020:	movt	r1, #0
    1024:	mvn	r0, #0
    1028:	bl	0 <coda_set_error>
    102c:	mvn	r3, #0
    1030:	b	1188 <coda_path_for_program+0x244>
    1034:	movw	r0, #0
    1038:	movt	r0, #0
    103c:	bl	0 <getenv>
    1040:	mov	r3, r0
    1044:	cmp	r3, #0
    1048:	beq	1080 <coda_path_for_program+0x13c>
    104c:	movw	r0, #0
    1050:	movt	r0, #0
    1054:	bl	0 <getenv>
    1058:	mov	r3, r0
    105c:	ldr	r2, [fp, #-1052]	; 0xfffffbe4
    1060:	ldr	r1, [fp, #-1048]	; 0xfffffbe8
    1064:	mov	r0, r3
    1068:	bl	adc <coda_path_find_file>
    106c:	mov	r3, r0
    1070:	cmp	r3, #0
    1074:	beq	108c <coda_path_for_program+0x148>
    1078:	mvn	r3, #0
    107c:	b	1188 <coda_path_for_program+0x244>
    1080:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1084:	mov	r2, #0
    1088:	str	r2, [r3]
    108c:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1090:	ldr	r3, [r3]
    1094:	cmp	r3, #0
    1098:	beq	1184 <coda_path_for_program+0x240>
    109c:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    10a0:	ldr	r3, [r3]
    10a4:	ldrb	r3, [r3]
    10a8:	cmp	r3, #47	; 0x2f
    10ac:	beq	1184 <coda_path_for_program+0x240>
    10b0:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    10b4:	ldr	r3, [r3]
    10b8:	ldrb	r3, [r3]
    10bc:	cmp	r3, #92	; 0x5c
    10c0:	beq	1184 <coda_path_for_program+0x240>
    10c4:	bl	0 <__ctype_b_loc>
    10c8:	mov	r3, r0
    10cc:	ldr	r2, [r3]
    10d0:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    10d4:	ldr	r3, [r3]
    10d8:	ldrb	r3, [r3]
    10dc:	lsl	r3, r3, #1
    10e0:	add	r3, r2, r3
    10e4:	ldrh	r3, [r3]
    10e8:	and	r3, r3, #1024	; 0x400
    10ec:	cmp	r3, #0
    10f0:	beq	110c <coda_path_for_program+0x1c8>
    10f4:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    10f8:	ldr	r3, [r3]
    10fc:	add	r3, r3, #1
    1100:	ldrb	r3, [r3]
    1104:	cmp	r3, #58	; 0x3a
    1108:	beq	1184 <coda_path_for_program+0x240>
    110c:	sub	r3, fp, #1040	; 0x410
    1110:	sub	r3, r3, #4
    1114:	mov	r1, #1024	; 0x400
    1118:	mov	r0, r3
    111c:	bl	0 <getcwd>
    1120:	mov	r3, r0
    1124:	cmp	r3, #0
    1128:	bne	1134 <coda_path_for_program+0x1f0>
    112c:	mov	r3, #0
    1130:	b	1188 <coda_path_for_program+0x244>
    1134:	mov	r3, #0
    1138:	strb	r3, [fp, #-20]	; 0xffffffec
    113c:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1140:	ldr	r3, [r3]
    1144:	str	r3, [fp, #-16]
    1148:	sub	r0, fp, #1040	; 0x410
    114c:	sub	r0, r0, #4
    1150:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1154:	ldr	r2, [fp, #-16]
    1158:	mov	r1, #0
    115c:	bl	d60 <coda_path_from_path>
    1160:	mov	r3, r0
    1164:	cmp	r3, #0
    1168:	beq	117c <coda_path_for_program+0x238>
    116c:	ldr	r0, [fp, #-16]
    1170:	bl	0 <free>
    1174:	mvn	r3, #0
    1178:	b	1188 <coda_path_for_program+0x244>
    117c:	ldr	r0, [fp, #-16]
    1180:	bl	0 <free>
    1184:	mov	r3, #0
    1188:	mov	r0, r3
    118c:	sub	sp, fp, #4
    1190:	ldr	fp, [sp]
    1194:	add	sp, sp, #4
    1198:	pop	{pc}		; (ldr pc, [sp], #4)

0000119c <coda_isNaN>:
    119c:	strd	r4, [sp, #-28]!	; 0xffffffe4
    11a0:	strd	r6, [sp, #8]
    11a4:	strd	r8, [sp, #16]
    11a8:	str	fp, [sp, #24]
    11ac:	add	fp, sp, #24
    11b0:	sub	sp, sp, #36	; 0x24
    11b4:	vstr	d0, [fp, #-60]	; 0xffffffc4
    11b8:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    11bc:	strd	r0, [fp, #-52]	; 0xffffffcc
    11c0:	movw	r0, #32752	; 0x7ff0
    11c4:	mov	r1, #0
    11c8:	strd	r0, [fp, #-36]	; 0xffffffdc
    11cc:	ldrd	r8, [fp, #-36]	; 0xffffffdc
    11d0:	mov	r0, #0
    11d4:	mov	r1, #0
    11d8:	lsl	r1, r8, #16
    11dc:	mov	r0, #0
    11e0:	strd	r0, [fp, #-36]	; 0xffffffdc
    11e4:	ldrd	r8, [fp, #-52]	; 0xffffffcc
    11e8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    11ec:	and	r6, r8, r0
    11f0:	and	r7, r9, r1
    11f4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    11f8:	cmp	r1, r7
    11fc:	cmpeq	r0, r6
    1200:	beq	120c <coda_isNaN+0x70>
    1204:	mov	r3, #0
    1208:	b	1264 <coda_isNaN+0xc8>
    120c:	mov	r0, #1
    1210:	mov	r1, #0
    1214:	strd	r0, [fp, #-44]	; 0xffffffd4
    1218:	ldrd	r6, [fp, #-44]	; 0xffffffd4
    121c:	mov	r0, #0
    1220:	mov	r1, #0
    1224:	lsl	r1, r6, #20
    1228:	mov	r0, #0
    122c:	strd	r0, [fp, #-44]	; 0xffffffd4
    1230:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    1234:	subs	r4, r0, #1
    1238:	sbc	r5, r1, #0
    123c:	strd	r4, [fp, #-44]	; 0xffffffd4
    1240:	ldrd	r4, [fp, #-52]	; 0xffffffcc
    1244:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    1248:	and	r2, r4, r0
    124c:	and	r3, r5, r1
    1250:	orr	r3, r2, r3
    1254:	cmp	r3, #0
    1258:	movne	r3, #1
    125c:	moveq	r3, #0
    1260:	uxtb	r3, r3
    1264:	mov	r0, r3
    1268:	sub	sp, fp, #24
    126c:	ldrd	r4, [sp]
    1270:	ldrd	r6, [sp, #8]
    1274:	ldrd	r8, [sp, #16]
    1278:	ldr	fp, [sp, #24]
    127c:	add	sp, sp, #28
    1280:	bx	lr

00001284 <coda_NaN>:
    1284:	push	{fp}		; (str fp, [sp, #-4]!)
    1288:	add	fp, sp, #0
    128c:	sub	sp, sp, #12
    1290:	movw	r2, #32760	; 0x7ff8
    1294:	mov	r3, #0
    1298:	strd	r2, [fp, #-12]
    129c:	ldrd	r0, [fp, #-12]
    12a0:	mov	r2, #0
    12a4:	mov	r3, #0
    12a8:	lsl	r3, r0, #16
    12ac:	mov	r2, #0
    12b0:	strd	r2, [fp, #-12]
    12b4:	ldrd	r2, [fp, #-12]
    12b8:	vmov	d7, r2, r3
    12bc:	vmov.f64	d0, d7
    12c0:	add	sp, fp, #0
    12c4:	pop	{fp}		; (ldr fp, [sp], #4)
    12c8:	bx	lr

000012cc <coda_isInf>:
    12cc:	str	fp, [sp, #-8]!
    12d0:	str	lr, [sp, #4]
    12d4:	add	fp, sp, #4
    12d8:	sub	sp, sp, #8
    12dc:	vstr	d0, [fp, #-12]
    12e0:	vldr	d0, [fp, #-12]
    12e4:	bl	1328 <coda_isPlusInf>
    12e8:	mov	r3, r0
    12ec:	cmp	r3, #0
    12f0:	bne	1308 <coda_isInf+0x3c>
    12f4:	vldr	d0, [fp, #-12]
    12f8:	bl	1390 <coda_isMinInf>
    12fc:	mov	r3, r0
    1300:	cmp	r3, #0
    1304:	beq	1310 <coda_isInf+0x44>
    1308:	mov	r3, #1
    130c:	b	1314 <coda_isInf+0x48>
    1310:	mov	r3, #0
    1314:	mov	r0, r3
    1318:	sub	sp, fp, #4
    131c:	ldr	fp, [sp]
    1320:	add	sp, sp, #4
    1324:	pop	{pc}		; (ldr pc, [sp], #4)

00001328 <coda_isPlusInf>:
    1328:	push	{fp}		; (str fp, [sp, #-4]!)
    132c:	add	fp, sp, #0
    1330:	sub	sp, sp, #28
    1334:	vstr	d0, [fp, #-28]	; 0xffffffe4
    1338:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    133c:	strd	r2, [fp, #-20]	; 0xffffffec
    1340:	movw	r2, #32752	; 0x7ff0
    1344:	mov	r3, #0
    1348:	strd	r2, [fp, #-12]
    134c:	ldrd	r0, [fp, #-12]
    1350:	mov	r2, #0
    1354:	mov	r3, #0
    1358:	lsl	r3, r0, #16
    135c:	mov	r2, #0
    1360:	strd	r2, [fp, #-12]
    1364:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1368:	ldrd	r0, [fp, #-12]
    136c:	cmp	r1, r3
    1370:	cmpeq	r0, r2
    1374:	moveq	r3, #1
    1378:	movne	r3, #0
    137c:	uxtb	r3, r3
    1380:	mov	r0, r3
    1384:	add	sp, fp, #0
    1388:	pop	{fp}		; (ldr fp, [sp], #4)
    138c:	bx	lr

00001390 <coda_isMinInf>:
    1390:	push	{fp}		; (str fp, [sp, #-4]!)
    1394:	add	fp, sp, #0
    1398:	sub	sp, sp, #28
    139c:	vstr	d0, [fp, #-28]	; 0xffffffe4
    13a0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    13a4:	strd	r2, [fp, #-20]	; 0xffffffec
    13a8:	movw	r2, #65520	; 0xfff0
    13ac:	mov	r3, #0
    13b0:	strd	r2, [fp, #-12]
    13b4:	ldrd	r0, [fp, #-12]
    13b8:	mov	r2, #0
    13bc:	mov	r3, #0
    13c0:	lsl	r3, r0, #16
    13c4:	mov	r2, #0
    13c8:	strd	r2, [fp, #-12]
    13cc:	ldrd	r2, [fp, #-20]	; 0xffffffec
    13d0:	ldrd	r0, [fp, #-12]
    13d4:	cmp	r1, r3
    13d8:	cmpeq	r0, r2
    13dc:	moveq	r3, #1
    13e0:	movne	r3, #0
    13e4:	uxtb	r3, r3
    13e8:	mov	r0, r3
    13ec:	add	sp, fp, #0
    13f0:	pop	{fp}		; (ldr fp, [sp], #4)
    13f4:	bx	lr

000013f8 <coda_PlusInf>:
    13f8:	push	{fp}		; (str fp, [sp, #-4]!)
    13fc:	add	fp, sp, #0
    1400:	sub	sp, sp, #12
    1404:	movw	r2, #32752	; 0x7ff0
    1408:	mov	r3, #0
    140c:	strd	r2, [fp, #-12]
    1410:	ldrd	r0, [fp, #-12]
    1414:	mov	r2, #0
    1418:	mov	r3, #0
    141c:	lsl	r3, r0, #16
    1420:	mov	r2, #0
    1424:	strd	r2, [fp, #-12]
    1428:	ldrd	r2, [fp, #-12]
    142c:	vmov	d7, r2, r3
    1430:	vmov.f64	d0, d7
    1434:	add	sp, fp, #0
    1438:	pop	{fp}		; (ldr fp, [sp], #4)
    143c:	bx	lr

00001440 <coda_MinInf>:
    1440:	push	{fp}		; (str fp, [sp, #-4]!)
    1444:	add	fp, sp, #0
    1448:	sub	sp, sp, #12
    144c:	movw	r2, #65520	; 0xfff0
    1450:	mov	r3, #0
    1454:	strd	r2, [fp, #-12]
    1458:	ldrd	r0, [fp, #-12]
    145c:	mov	r2, #0
    1460:	mov	r3, #0
    1464:	lsl	r3, r0, #16
    1468:	mov	r2, #0
    146c:	strd	r2, [fp, #-12]
    1470:	ldrd	r2, [fp, #-12]
    1474:	vmov	d7, r2, r3
    1478:	vmov.f64	d0, d7
    147c:	add	sp, fp, #0
    1480:	pop	{fp}		; (ldr fp, [sp], #4)
    1484:	bx	lr

00001488 <coda_str64>:
    1488:	str	fp, [sp, #-8]!
    148c:	str	lr, [sp, #4]
    1490:	add	fp, sp, #4
    1494:	sub	sp, sp, #16
    1498:	strd	r0, [fp, #-12]
    149c:	str	r2, [fp, #-16]
    14a0:	ldrd	r2, [fp, #-12]
    14a4:	cmp	r2, #0
    14a8:	sbcs	r3, r3, #0
    14ac:	bge	14e4 <coda_str64+0x5c>
    14b0:	ldr	r3, [fp, #-16]
    14b4:	mov	r2, #45	; 0x2d
    14b8:	strb	r2, [r3]
    14bc:	ldrd	r2, [fp, #-12]
    14c0:	rsbs	r2, r2, #0
    14c4:	rsc	r3, r3, #0
    14c8:	mov	r0, r2
    14cc:	mov	r1, r3
    14d0:	ldr	r3, [fp, #-16]
    14d4:	add	r3, r3, #1
    14d8:	mov	r2, r3
    14dc:	bl	1504 <coda_str64u>
    14e0:	b	14f0 <coda_str64+0x68>
    14e4:	ldrd	r0, [fp, #-12]
    14e8:	ldr	r2, [fp, #-16]
    14ec:	bl	1504 <coda_str64u>
    14f0:	nop	{0}
    14f4:	sub	sp, fp, #4
    14f8:	ldr	fp, [sp]
    14fc:	add	sp, sp, #4
    1500:	pop	{pc}		; (ldr pc, [sp], #4)

00001504 <coda_str64u>:
    1504:	str	fp, [sp, #-8]!
    1508:	str	lr, [sp, #4]
    150c:	add	fp, sp, #4
    1510:	sub	sp, sp, #32
    1514:	strd	r0, [fp, #-20]	; 0xffffffec
    1518:	str	r2, [fp, #-24]	; 0xffffffe8
    151c:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1520:	mvn	r0, #0
    1524:	mov	r1, #0
    1528:	cmp	r3, r1
    152c:	cmpeq	r2, r0
    1530:	bhi	1550 <coda_str64u+0x4c>
    1534:	ldr	r3, [fp, #-20]	; 0xffffffec
    1538:	mov	r2, r3
    153c:	movw	r1, #0
    1540:	movt	r1, #0
    1544:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1548:	bl	0 <sprintf>
    154c:	b	1600 <coda_str64u+0xfc>
    1550:	ldrd	r0, [fp, #-20]	; 0xffffffec
    1554:	add	r3, pc, #188	; 0xbc
    1558:	ldrd	r2, [r3]
    155c:	bl	0 <__aeabi_uldivmod>
    1560:	mov	r3, r2
    1564:	str	r3, [fp, #-8]
    1568:	ldrd	r0, [fp, #-20]	; 0xffffffec
    156c:	add	r3, pc, #164	; 0xa4
    1570:	ldrd	r2, [r3]
    1574:	bl	0 <__aeabi_uldivmod>
    1578:	mov	r2, r0
    157c:	mov	r3, r1
    1580:	strd	r2, [fp, #-20]	; 0xffffffec
    1584:	ldrd	r0, [fp, #-20]	; 0xffffffec
    1588:	add	r3, pc, #136	; 0x88
    158c:	ldrd	r2, [r3]
    1590:	bl	0 <__aeabi_uldivmod>
    1594:	mov	r3, r2
    1598:	str	r3, [fp, #-12]
    159c:	ldrd	r0, [fp, #-20]	; 0xffffffec
    15a0:	add	r3, pc, #112	; 0x70
    15a4:	ldrd	r2, [r3]
    15a8:	bl	0 <__aeabi_uldivmod>
    15ac:	mov	r2, r0
    15b0:	mov	r3, r1
    15b4:	strd	r2, [fp, #-20]	; 0xffffffec
    15b8:	ldrd	r2, [fp, #-20]	; 0xffffffec
    15bc:	orrs	r3, r2, r3
    15c0:	beq	15e8 <coda_str64u+0xe4>
    15c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    15c8:	ldr	r3, [fp, #-8]
    15cc:	str	r3, [sp]
    15d0:	ldr	r3, [fp, #-12]
    15d4:	movw	r1, #0
    15d8:	movt	r1, #0
    15dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    15e0:	bl	0 <sprintf>
    15e4:	b	1600 <coda_str64u+0xfc>
    15e8:	ldr	r3, [fp, #-8]
    15ec:	ldr	r2, [fp, #-12]
    15f0:	movw	r1, #0
    15f4:	movt	r1, #0
    15f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    15fc:	bl	0 <sprintf>
    1600:	nop	{0}
    1604:	sub	sp, fp, #4
    1608:	ldr	fp, [sp]
    160c:	add	sp, sp, #4
    1610:	pop	{pc}		; (ldr pc, [sp], #4)
    1614:	nop	{0}
    1618:	.word	0x05f5e100
    161c:	.word	0x00000000

00001620 <coda_strfl>:
    1620:	str	fp, [sp, #-8]!
    1624:	str	lr, [sp, #4]
    1628:	add	fp, sp, #4
    162c:	sub	sp, sp, #16
    1630:	vstr	d0, [fp, #-12]
    1634:	str	r0, [fp, #-16]
    1638:	vldr	d0, [fp, #-12]
    163c:	bl	119c <coda_isNaN>
    1640:	mov	r3, r0
    1644:	cmp	r3, #0
    1648:	beq	1664 <coda_strfl+0x44>
    164c:	ldr	r2, [fp, #-16]
    1650:	movw	r3, #0
    1654:	movt	r3, #0
    1658:	ldr	r3, [r3]
    165c:	str	r3, [r2]
    1660:	b	16e0 <coda_strfl+0xc0>
    1664:	vldr	d0, [fp, #-12]
    1668:	bl	1328 <coda_isPlusInf>
    166c:	mov	r3, r0
    1670:	cmp	r3, #0
    1674:	beq	1698 <coda_strfl+0x78>
    1678:	ldr	r2, [fp, #-16]
    167c:	movw	r3, #0
    1680:	movt	r3, #0
    1684:	ldr	r1, [r3]
    1688:	str	r1, [r2]
    168c:	ldrb	r3, [r3, #4]
    1690:	strb	r3, [r2, #4]
    1694:	b	16e0 <coda_strfl+0xc0>
    1698:	vldr	d0, [fp, #-12]
    169c:	bl	1390 <coda_isMinInf>
    16a0:	mov	r3, r0
    16a4:	cmp	r3, #0
    16a8:	beq	16cc <coda_strfl+0xac>
    16ac:	ldr	r2, [fp, #-16]
    16b0:	movw	r3, #0
    16b4:	movt	r3, #0
    16b8:	ldr	r1, [r3]
    16bc:	str	r1, [r2]
    16c0:	ldrb	r3, [r3, #4]
    16c4:	strb	r3, [r2, #4]
    16c8:	b	16e0 <coda_strfl+0xc0>
    16cc:	ldrd	r2, [fp, #-12]
    16d0:	movw	r1, #0
    16d4:	movt	r1, #0
    16d8:	ldr	r0, [fp, #-16]
    16dc:	bl	0 <sprintf>
    16e0:	nop	{0}
    16e4:	sub	sp, fp, #4
    16e8:	ldr	fp, [sp]
    16ec:	add	sp, sp, #4
    16f0:	pop	{pc}		; (ldr pc, [sp], #4)
