
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacmp.dir/tools/codacmp/codacmp.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_version>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	bl	0 <coda_get_libcoda_version>
      10:	mov	r3, r0
      14:	mov	r1, r3
      18:	movw	r0, #0
      1c:	movt	r0, #0
      20:	bl	0 <printf>
      24:	movw	r0, #0
      28:	movt	r0, #0
      2c:	bl	0 <puts>
      30:	mov	r0, #10
      34:	bl	0 <putchar>
      38:	nop	{0}
      3c:	sub	sp, fp, #4
      40:	ldr	fp, [sp]
      44:	add	sp, sp, #4
      48:	pop	{pc}		; (ldr pc, [sp], #4)

0000004c <print_help>:
      4c:	str	fp, [sp, #-8]!
      50:	str	lr, [sp, #4]
      54:	add	fp, sp, #4
      58:	movw	r0, #0
      5c:	movt	r0, #0
      60:	bl	0 <puts>
      64:	movw	r0, #0
      68:	movt	r0, #0
      6c:	bl	0 <puts>
      70:	movw	r0, #0
      74:	movt	r0, #0
      78:	bl	0 <puts>
      7c:	movw	r0, #0
      80:	movt	r0, #0
      84:	bl	0 <puts>
      88:	movw	r0, #0
      8c:	movt	r0, #0
      90:	bl	0 <puts>
      94:	movw	r0, #0
      98:	movt	r0, #0
      9c:	bl	0 <puts>
      a0:	movw	r0, #0
      a4:	movt	r0, #0
      a8:	bl	0 <puts>
      ac:	movw	r0, #0
      b0:	movt	r0, #0
      b4:	bl	0 <puts>
      b8:	movw	r0, #0
      bc:	movt	r0, #0
      c0:	bl	0 <puts>
      c4:	movw	r0, #0
      c8:	movt	r0, #0
      cc:	bl	0 <puts>
      d0:	movw	r0, #0
      d4:	movt	r0, #0
      d8:	bl	0 <puts>
      dc:	movw	r0, #0
      e0:	movt	r0, #0
      e4:	bl	0 <puts>
      e8:	movw	r0, #0
      ec:	movt	r0, #0
      f0:	bl	0 <puts>
      f4:	movw	r0, #0
      f8:	movt	r0, #0
      fc:	bl	0 <puts>
     100:	movw	r0, #0
     104:	movt	r0, #0
     108:	bl	0 <puts>
     10c:	movw	r0, #0
     110:	movt	r0, #0
     114:	bl	0 <puts>
     118:	movw	r0, #0
     11c:	movt	r0, #0
     120:	bl	0 <puts>
     124:	movw	r0, #0
     128:	movt	r0, #0
     12c:	bl	0 <puts>
     130:	movw	r0, #0
     134:	movt	r0, #0
     138:	bl	0 <puts>
     13c:	movw	r0, #0
     140:	movt	r0, #0
     144:	bl	0 <puts>
     148:	mov	r0, #10
     14c:	bl	0 <putchar>
     150:	movw	r0, #0
     154:	movt	r0, #0
     158:	bl	0 <puts>
     15c:	movw	r0, #0
     160:	movt	r0, #0
     164:	bl	0 <puts>
     168:	mov	r0, #10
     16c:	bl	0 <putchar>
     170:	movw	r0, #0
     174:	movt	r0, #0
     178:	bl	0 <puts>
     17c:	movw	r0, #0
     180:	movt	r0, #0
     184:	bl	0 <puts>
     188:	mov	r0, #10
     18c:	bl	0 <putchar>
     190:	movw	r0, #0
     194:	movt	r0, #0
     198:	bl	0 <puts>
     19c:	movw	r0, #0
     1a0:	movt	r0, #0
     1a4:	bl	0 <puts>
     1a8:	movw	r0, #0
     1ac:	movt	r0, #0
     1b0:	bl	0 <puts>
     1b4:	movw	r0, #0
     1b8:	movt	r0, #0
     1bc:	bl	0 <puts>
     1c0:	movw	r0, #0
     1c4:	movt	r0, #0
     1c8:	bl	0 <puts>
     1cc:	movw	r0, #0
     1d0:	movt	r0, #0
     1d4:	bl	0 <puts>
     1d8:	movw	r0, #0
     1dc:	movt	r0, #0
     1e0:	bl	0 <puts>
     1e4:	mov	r0, #10
     1e8:	bl	0 <putchar>
     1ec:	nop	{0}
     1f0:	sub	sp, fp, #4
     1f4:	ldr	fp, [sp]
     1f8:	add	sp, sp, #4
     1fc:	pop	{pc}		; (ldr pc, [sp], #4)

00000200 <print_escaped>:
     200:	str	fp, [sp, #-8]!
     204:	str	lr, [sp, #4]
     208:	add	fp, sp, #4
     20c:	sub	sp, sp, #16
     210:	str	r0, [fp, #-16]
     214:	str	r1, [fp, #-20]	; 0xffffffec
     218:	mov	r3, #0
     21c:	str	r3, [fp, #-8]
     220:	b	354 <print_escaped+0x154>
     224:	ldr	r3, [fp, #-8]
     228:	ldr	r2, [fp, #-16]
     22c:	add	r3, r2, r3
     230:	ldrb	r3, [r3]
     234:	strb	r3, [fp, #-9]
     238:	ldrb	r3, [fp, #-9]
     23c:	cmp	r3, #10
     240:	beq	2bc <print_escaped+0xbc>
     244:	cmp	r3, #10
     248:	bgt	268 <print_escaped+0x68>
     24c:	cmp	r3, #8
     250:	beq	29c <print_escaped+0x9c>
     254:	cmp	r3, #8
     258:	bgt	2ac <print_escaped+0xac>
     25c:	cmp	r3, #7
     260:	beq	28c <print_escaped+0x8c>
     264:	b	30c <print_escaped+0x10c>
     268:	cmp	r3, #12
     26c:	beq	2dc <print_escaped+0xdc>
     270:	cmp	r3, #12
     274:	blt	2cc <print_escaped+0xcc>
     278:	cmp	r3, #13
     27c:	beq	2ec <print_escaped+0xec>
     280:	cmp	r3, #92	; 0x5c
     284:	beq	2fc <print_escaped+0xfc>
     288:	b	30c <print_escaped+0x10c>
     28c:	movw	r0, #0
     290:	movt	r0, #0
     294:	bl	0 <printf>
     298:	b	348 <print_escaped+0x148>
     29c:	movw	r0, #0
     2a0:	movt	r0, #0
     2a4:	bl	0 <printf>
     2a8:	b	348 <print_escaped+0x148>
     2ac:	movw	r0, #0
     2b0:	movt	r0, #0
     2b4:	bl	0 <printf>
     2b8:	b	348 <print_escaped+0x148>
     2bc:	movw	r0, #0
     2c0:	movt	r0, #0
     2c4:	bl	0 <printf>
     2c8:	b	348 <print_escaped+0x148>
     2cc:	movw	r0, #0
     2d0:	movt	r0, #0
     2d4:	bl	0 <printf>
     2d8:	b	348 <print_escaped+0x148>
     2dc:	movw	r0, #0
     2e0:	movt	r0, #0
     2e4:	bl	0 <printf>
     2e8:	b	348 <print_escaped+0x148>
     2ec:	movw	r0, #0
     2f0:	movt	r0, #0
     2f4:	bl	0 <printf>
     2f8:	b	348 <print_escaped+0x148>
     2fc:	movw	r0, #0
     300:	movt	r0, #0
     304:	bl	0 <printf>
     308:	b	348 <print_escaped+0x148>
     30c:	ldrb	r3, [fp, #-9]
     310:	cmp	r3, #31
     314:	bls	334 <print_escaped+0x134>
     318:	ldrb	r3, [fp, #-9]
     31c:	cmp	r3, #126	; 0x7e
     320:	bhi	334 <print_escaped+0x134>
     324:	ldrb	r3, [fp, #-9]
     328:	mov	r0, r3
     32c:	bl	0 <putchar>
     330:	b	348 <print_escaped+0x148>
     334:	ldrb	r3, [fp, #-9]
     338:	mov	r1, r3
     33c:	movw	r0, #0
     340:	movt	r0, #0
     344:	bl	0 <printf>
     348:	ldr	r3, [fp, #-8]
     34c:	add	r3, r3, #1
     350:	str	r3, [fp, #-8]
     354:	ldr	r2, [fp, #-8]
     358:	ldr	r3, [fp, #-20]	; 0xffffffec
     35c:	cmp	r2, r3
     360:	blt	224 <print_escaped+0x24>
     364:	nop	{0}
     368:	sub	sp, fp, #4
     36c:	ldr	fp, [sp]
     370:	add	sp, sp, #4
     374:	pop	{pc}		; (ldr pc, [sp], #4)

00000378 <print_error_with_cursor>:
     378:	strd	r4, [sp, #-16]!
     37c:	str	fp, [sp, #8]
     380:	str	lr, [sp, #12]
     384:	add	fp, sp, #12
     388:	sub	sp, sp, #8
     38c:	str	r0, [fp, #-16]
     390:	str	r1, [fp, #-20]	; 0xffffffec
     394:	ldr	r0, [fp, #-16]
     398:	bl	0 <coda_cursor_add_to_error_message>
     39c:	movw	r3, #0
     3a0:	movt	r3, #0
     3a4:	ldr	r4, [r3]
     3a8:	ldr	r3, [fp, #-20]	; 0xffffffec
     3ac:	sub	r2, r3, #1
     3b0:	movw	r3, #0
     3b4:	movt	r3, #0
     3b8:	ldr	r5, [r3, r2, lsl #2]
     3bc:	bl	0 <coda_get_errno>
     3c0:	mov	r3, r0
     3c4:	ldr	r3, [r3]
     3c8:	mov	r0, r3
     3cc:	bl	0 <coda_errno_to_string>
     3d0:	mov	r3, r0
     3d4:	mov	r2, r5
     3d8:	movw	r1, #0
     3dc:	movt	r1, #0
     3e0:	mov	r0, r4
     3e4:	bl	0 <fprintf>
     3e8:	nop	{0}
     3ec:	sub	sp, fp, #12
     3f0:	ldrd	r4, [sp]
     3f4:	ldr	fp, [sp, #8]
     3f8:	add	sp, sp, #12
     3fc:	pop	{pc}		; (ldr pc, [sp], #4)

00000400 <array_key_info_init>:
     400:	push	{fp}		; (str fp, [sp, #-4]!)
     404:	add	fp, sp, #0
     408:	movw	r3, #0
     40c:	movt	r3, #0
     410:	mov	r2, #0
     414:	str	r2, [r3]
     418:	movw	r3, #0
     41c:	movt	r3, #0
     420:	mov	r2, #0
     424:	str	r2, [r3, #4]
     428:	movw	r3, #0
     42c:	movt	r3, #0
     430:	mov	r2, #0
     434:	str	r2, [r3, #8]
     438:	movw	r3, #0
     43c:	movt	r3, #0
     440:	mov	r2, #0
     444:	str	r2, [r3, #12]
     448:	nop	{0}
     44c:	add	sp, fp, #0
     450:	pop	{fp}		; (ldr fp, [sp], #4)
     454:	bx	lr

00000458 <array_key_info_done>:
     458:	str	fp, [sp, #-8]!
     45c:	str	lr, [sp, #4]
     460:	add	fp, sp, #4
     464:	movw	r3, #0
     468:	movt	r3, #0
     46c:	ldr	r3, [r3, #4]
     470:	cmp	r3, #0
     474:	beq	48c <array_key_info_done+0x34>
     478:	movw	r3, #0
     47c:	movt	r3, #0
     480:	ldr	r3, [r3, #4]
     484:	mov	r0, r3
     488:	bl	0 <free>
     48c:	movw	r3, #0
     490:	movt	r3, #0
     494:	ldr	r3, [r3, #8]
     498:	cmp	r3, #0
     49c:	beq	4b4 <array_key_info_done+0x5c>
     4a0:	movw	r3, #0
     4a4:	movt	r3, #0
     4a8:	ldr	r3, [r3, #8]
     4ac:	mov	r0, r3
     4b0:	bl	0 <free>
     4b4:	movw	r3, #0
     4b8:	movt	r3, #0
     4bc:	ldr	r3, [r3, #12]
     4c0:	cmp	r3, #0
     4c4:	beq	4e0 <array_key_info_done+0x88>
     4c8:	movw	r3, #0
     4cc:	movt	r3, #0
     4d0:	ldr	r3, [r3, #12]
     4d4:	mov	r1, #0
     4d8:	mov	r0, r3
     4dc:	bl	0 <coda_tree_node_delete>
     4e0:	nop	{0}
     4e4:	sub	sp, fp, #4
     4e8:	ldr	fp, [sp]
     4ec:	add	sp, sp, #4
     4f0:	pop	{pc}		; (ldr pc, [sp], #4)

000004f4 <array_key_info_add_key>:
     4f4:	str	fp, [sp, #-8]!
     4f8:	str	lr, [sp, #4]
     4fc:	add	fp, sp, #4
     500:	sub	sp, sp, #24
     504:	str	r0, [fp, #-16]
     508:	str	r1, [fp, #-20]	; 0xffffffec
     50c:	movw	r3, #0
     510:	movt	r3, #0
     514:	ldr	r3, [r3]
     518:	and	r3, r3, #15
     51c:	cmp	r3, #0
     520:	bne	634 <array_key_info_add_key+0x140>
     524:	movw	r3, #0
     528:	movt	r3, #0
     52c:	ldr	r2, [r3, #4]
     530:	movw	r3, #0
     534:	movt	r3, #0
     538:	ldr	r3, [r3]
     53c:	add	r3, r3, #16
     540:	lsl	r3, r3, #2
     544:	mov	r1, r3
     548:	mov	r0, r2
     54c:	bl	0 <realloc>
     550:	str	r0, [fp, #-8]
     554:	ldr	r3, [fp, #-8]
     558:	cmp	r3, #0
     55c:	bne	59c <array_key_info_add_key+0xa8>
     560:	movw	r3, #0
     564:	movt	r3, #0
     568:	ldr	r3, [r3]
     56c:	add	r3, r3, #16
     570:	lsl	r2, r3, #2
     574:	mov	r3, #198	; 0xc6
     578:	str	r3, [sp]
     57c:	movw	r3, #0
     580:	movt	r3, #0
     584:	movw	r1, #0
     588:	movt	r1, #0
     58c:	mvn	r0, #0
     590:	bl	0 <coda_set_error>
     594:	mvn	r3, #0
     598:	b	6a4 <array_key_info_add_key+0x1b0>
     59c:	movw	r3, #0
     5a0:	movt	r3, #0
     5a4:	ldr	r2, [fp, #-8]
     5a8:	str	r2, [r3, #4]
     5ac:	movw	r3, #0
     5b0:	movt	r3, #0
     5b4:	ldr	r2, [r3, #8]
     5b8:	movw	r3, #0
     5bc:	movt	r3, #0
     5c0:	ldr	r3, [r3]
     5c4:	add	r3, r3, #16
     5c8:	lsl	r3, r3, #2
     5cc:	mov	r1, r3
     5d0:	mov	r0, r2
     5d4:	bl	0 <realloc>
     5d8:	str	r0, [fp, #-12]
     5dc:	ldr	r3, [fp, #-12]
     5e0:	cmp	r3, #0
     5e4:	bne	624 <array_key_info_add_key+0x130>
     5e8:	movw	r3, #0
     5ec:	movt	r3, #0
     5f0:	ldr	r3, [r3]
     5f4:	add	r3, r3, #16
     5f8:	lsl	r2, r3, #2
     5fc:	mov	r3, #207	; 0xcf
     600:	str	r3, [sp]
     604:	movw	r3, #0
     608:	movt	r3, #0
     60c:	movw	r1, #0
     610:	movt	r1, #0
     614:	mvn	r0, #0
     618:	bl	0 <coda_set_error>
     61c:	mvn	r3, #0
     620:	b	6a4 <array_key_info_add_key+0x1b0>
     624:	movw	r3, #0
     628:	movt	r3, #0
     62c:	ldr	r2, [fp, #-12]
     630:	str	r2, [r3, #8]
     634:	movw	r3, #0
     638:	movt	r3, #0
     63c:	ldr	r2, [r3, #4]
     640:	movw	r3, #0
     644:	movt	r3, #0
     648:	ldr	r3, [r3]
     64c:	lsl	r3, r3, #2
     650:	add	r3, r2, r3
     654:	ldr	r2, [fp, #-16]
     658:	str	r2, [r3]
     65c:	movw	r3, #0
     660:	movt	r3, #0
     664:	ldr	r2, [r3, #8]
     668:	movw	r3, #0
     66c:	movt	r3, #0
     670:	ldr	r3, [r3]
     674:	lsl	r3, r3, #2
     678:	add	r3, r2, r3
     67c:	ldr	r2, [fp, #-20]	; 0xffffffec
     680:	str	r2, [r3]
     684:	movw	r3, #0
     688:	movt	r3, #0
     68c:	ldr	r3, [r3]
     690:	add	r2, r3, #1
     694:	movw	r3, #0
     698:	movt	r3, #0
     69c:	str	r2, [r3]
     6a0:	mov	r3, #0
     6a4:	mov	r0, r3
     6a8:	sub	sp, fp, #4
     6ac:	ldr	fp, [sp]
     6b0:	add	sp, sp, #4
     6b4:	pop	{pc}		; (ldr pc, [sp], #4)

000006b8 <array_key_info_set_product>:
     6b8:	str	fp, [sp, #-8]!
     6bc:	str	lr, [sp, #4]
     6c0:	add	fp, sp, #4
     6c4:	sub	sp, sp, #16
     6c8:	str	r0, [fp, #-16]
     6cc:	movw	r3, #0
     6d0:	movt	r3, #0
     6d4:	ldr	r3, [r3]
     6d8:	cmp	r3, #0
     6dc:	bne	6e8 <array_key_info_set_product+0x30>
     6e0:	mov	r3, #0
     6e4:	b	7d8 <array_key_info_set_product+0x120>
     6e8:	sub	r3, fp, #12
     6ec:	mov	r1, r3
     6f0:	ldr	r0, [fp, #-16]
     6f4:	bl	0 <coda_get_product_root_type>
     6f8:	mov	r3, r0
     6fc:	cmp	r3, #0
     700:	beq	70c <array_key_info_set_product+0x54>
     704:	mvn	r3, #0
     708:	b	7d8 <array_key_info_set_product+0x120>
     70c:	ldr	r3, [fp, #-12]
     710:	mov	r0, r3
     714:	bl	0 <coda_tree_node_new>
     718:	mov	r2, r0
     71c:	movw	r3, #0
     720:	movt	r3, #0
     724:	str	r2, [r3, #12]
     728:	movw	r3, #0
     72c:	movt	r3, #0
     730:	ldr	r3, [r3, #12]
     734:	cmp	r3, #0
     738:	bne	744 <array_key_info_set_product+0x8c>
     73c:	mvn	r3, #0
     740:	b	7d8 <array_key_info_set_product+0x120>
     744:	mov	r3, #0
     748:	str	r3, [fp, #-8]
     74c:	b	7bc <array_key_info_set_product+0x104>
     750:	movw	r3, #0
     754:	movt	r3, #0
     758:	ldr	r0, [r3, #12]
     75c:	movw	r3, #0
     760:	movt	r3, #0
     764:	ldr	r2, [r3, #4]
     768:	ldr	r3, [fp, #-8]
     76c:	lsl	r3, r3, #2
     770:	add	r3, r2, r3
     774:	ldr	r1, [r3]
     778:	movw	r3, #0
     77c:	movt	r3, #0
     780:	ldr	r2, [r3, #8]
     784:	ldr	r3, [fp, #-8]
     788:	lsl	r3, r3, #2
     78c:	add	r3, r2, r3
     790:	ldr	r2, [r3]
     794:	mov	r3, #0
     798:	bl	0 <coda_tree_node_add_item_for_path>
     79c:	mov	r3, r0
     7a0:	cmp	r3, #0
     7a4:	beq	7b0 <array_key_info_set_product+0xf8>
     7a8:	mvn	r3, #0
     7ac:	b	7d8 <array_key_info_set_product+0x120>
     7b0:	ldr	r3, [fp, #-8]
     7b4:	add	r3, r3, #1
     7b8:	str	r3, [fp, #-8]
     7bc:	movw	r3, #0
     7c0:	movt	r3, #0
     7c4:	ldr	r3, [r3]
     7c8:	ldr	r2, [fp, #-8]
     7cc:	cmp	r2, r3
     7d0:	blt	750 <array_key_info_set_product+0x98>
     7d4:	mov	r3, #0
     7d8:	mov	r0, r3
     7dc:	sub	sp, fp, #4
     7e0:	ldr	fp, [sp]
     7e4:	add	sp, sp, #4
     7e8:	pop	{pc}		; (ldr pc, [sp], #4)

000007ec <compare_arrays_as_records_sub>:
     7ec:	strd	r4, [sp, #-16]!
     7f0:	str	fp, [sp, #8]
     7f4:	str	lr, [sp, #12]
     7f8:	add	fp, sp, #12
     7fc:	sub	sp, sp, #40	; 0x28
     800:	str	r0, [fp, #-40]	; 0xffffffd8
     804:	str	r1, [fp, #-44]	; 0xffffffd4
     808:	str	r2, [fp, #-48]	; 0xffffffd0
     80c:	str	r3, [fp, #-52]	; 0xffffffcc
     810:	ldr	r3, [fp, #-52]	; 0xffffffcc
     814:	cmp	r3, #0
     818:	ble	9c8 <compare_arrays_as_records_sub+0x1dc>
     81c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     820:	bl	0 <coda_cursor_goto_first_array_element>
     824:	mov	r3, r0
     828:	cmp	r3, #0
     82c:	beq	844 <compare_arrays_as_records_sub+0x58>
     830:	mov	r1, #1
     834:	ldr	r0, [fp, #-40]	; 0xffffffd8
     838:	bl	378 <print_error_with_cursor>
     83c:	mvn	r3, #0
     840:	b	ef0 <compare_arrays_as_records_sub+0x704>
     844:	mov	r3, #0
     848:	str	r3, [fp, #-20]	; 0xffffffec
     84c:	b	9b0 <compare_arrays_as_records_sub+0x1c4>
     850:	ldr	r3, [fp, #-20]	; 0xffffffec
     854:	lsl	r3, r3, #2
     858:	ldr	r2, [fp, #8]
     85c:	add	r2, r2, r3
     860:	sub	r3, fp, #28
     864:	ldr	r1, [fp, #-40]	; 0xffffffd8
     868:	ldr	r0, [fp, #-48]	; 0xffffffd0
     86c:	bl	0 <coda_expression_eval_string>
     870:	mov	r3, r0
     874:	cmp	r3, #0
     878:	beq	8c8 <compare_arrays_as_records_sub+0xdc>
     87c:	movw	r3, #0
     880:	movt	r3, #0
     884:	ldr	r4, [r3]
     888:	movw	r3, #0
     88c:	movt	r3, #0
     890:	ldr	r5, [r3]
     894:	bl	0 <coda_get_errno>
     898:	mov	r3, r0
     89c:	ldr	r3, [r3]
     8a0:	mov	r0, r3
     8a4:	bl	0 <coda_errno_to_string>
     8a8:	mov	r3, r0
     8ac:	mov	r2, r5
     8b0:	movw	r1, #0
     8b4:	movt	r1, #0
     8b8:	mov	r0, r4
     8bc:	bl	0 <fprintf>
     8c0:	mvn	r3, #0
     8c4:	b	ef0 <compare_arrays_as_records_sub+0x704>
     8c8:	ldr	r3, [fp, #-20]	; 0xffffffec
     8cc:	lsl	r3, r3, #2
     8d0:	ldr	r2, [fp, #8]
     8d4:	add	r3, r2, r3
     8d8:	ldr	r3, [r3]
     8dc:	mov	r1, r3
     8e0:	ldr	r0, [fp, #16]
     8e4:	bl	0 <coda_hashtable_add_name>
     8e8:	mov	r3, r0
     8ec:	cmp	r3, #0
     8f0:	beq	968 <compare_arrays_as_records_sub+0x17c>
     8f4:	ldr	r3, [fp, #-20]	; 0xffffffec
     8f8:	lsl	r3, r3, #2
     8fc:	ldr	r2, [fp, #8]
     900:	add	r3, r2, r3
     904:	ldr	r3, [r3]
     908:	mov	r2, r3
     90c:	movw	r1, #0
     910:	movt	r1, #0
     914:	mvn	r0, #99	; 0x63
     918:	bl	0 <coda_set_error>
     91c:	movw	r3, #0
     920:	movt	r3, #0
     924:	ldr	r4, [r3]
     928:	movw	r3, #0
     92c:	movt	r3, #0
     930:	ldr	r5, [r3]
     934:	bl	0 <coda_get_errno>
     938:	mov	r3, r0
     93c:	ldr	r3, [r3]
     940:	mov	r0, r3
     944:	bl	0 <coda_errno_to_string>
     948:	mov	r3, r0
     94c:	mov	r2, r5
     950:	movw	r1, #0
     954:	movt	r1, #0
     958:	mov	r0, r4
     95c:	bl	0 <fprintf>
     960:	mvn	r3, #0
     964:	b	ef0 <compare_arrays_as_records_sub+0x704>
     968:	ldr	r3, [fp, #-52]	; 0xffffffcc
     96c:	sub	r3, r3, #1
     970:	ldr	r2, [fp, #-20]	; 0xffffffec
     974:	cmp	r2, r3
     978:	bge	9a4 <compare_arrays_as_records_sub+0x1b8>
     97c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     980:	bl	0 <coda_cursor_goto_next_array_element>
     984:	mov	r3, r0
     988:	cmp	r3, #0
     98c:	beq	9a4 <compare_arrays_as_records_sub+0x1b8>
     990:	mov	r1, #1
     994:	ldr	r0, [fp, #-40]	; 0xffffffd8
     998:	bl	378 <print_error_with_cursor>
     99c:	mvn	r3, #0
     9a0:	b	ef0 <compare_arrays_as_records_sub+0x704>
     9a4:	ldr	r3, [fp, #-20]	; 0xffffffec
     9a8:	add	r3, r3, #1
     9ac:	str	r3, [fp, #-20]	; 0xffffffec
     9b0:	ldr	r2, [fp, #-20]	; 0xffffffec
     9b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     9b8:	cmp	r2, r3
     9bc:	blt	850 <compare_arrays_as_records_sub+0x64>
     9c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     9c4:	bl	0 <coda_cursor_goto_parent>
     9c8:	ldr	r3, [fp, #4]
     9cc:	cmp	r3, #0
     9d0:	ble	b80 <compare_arrays_as_records_sub+0x394>
     9d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
     9d8:	bl	0 <coda_cursor_goto_first_array_element>
     9dc:	mov	r3, r0
     9e0:	cmp	r3, #0
     9e4:	beq	9fc <compare_arrays_as_records_sub+0x210>
     9e8:	mov	r1, #2
     9ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
     9f0:	bl	378 <print_error_with_cursor>
     9f4:	mvn	r3, #0
     9f8:	b	ef0 <compare_arrays_as_records_sub+0x704>
     9fc:	mov	r3, #0
     a00:	str	r3, [fp, #-24]	; 0xffffffe8
     a04:	b	b68 <compare_arrays_as_records_sub+0x37c>
     a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a0c:	lsl	r3, r3, #2
     a10:	ldr	r2, [fp, #12]
     a14:	add	r2, r2, r3
     a18:	sub	r3, fp, #32
     a1c:	ldr	r1, [fp, #-44]	; 0xffffffd4
     a20:	ldr	r0, [fp, #-48]	; 0xffffffd0
     a24:	bl	0 <coda_expression_eval_string>
     a28:	mov	r3, r0
     a2c:	cmp	r3, #0
     a30:	beq	a80 <compare_arrays_as_records_sub+0x294>
     a34:	movw	r3, #0
     a38:	movt	r3, #0
     a3c:	ldr	r4, [r3]
     a40:	movw	r3, #0
     a44:	movt	r3, #0
     a48:	ldr	r5, [r3, #4]
     a4c:	bl	0 <coda_get_errno>
     a50:	mov	r3, r0
     a54:	ldr	r3, [r3]
     a58:	mov	r0, r3
     a5c:	bl	0 <coda_errno_to_string>
     a60:	mov	r3, r0
     a64:	mov	r2, r5
     a68:	movw	r1, #0
     a6c:	movt	r1, #0
     a70:	mov	r0, r4
     a74:	bl	0 <fprintf>
     a78:	mvn	r3, #0
     a7c:	b	ef0 <compare_arrays_as_records_sub+0x704>
     a80:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a84:	lsl	r3, r3, #2
     a88:	ldr	r2, [fp, #12]
     a8c:	add	r3, r2, r3
     a90:	ldr	r3, [r3]
     a94:	mov	r1, r3
     a98:	ldr	r0, [fp, #20]
     a9c:	bl	0 <coda_hashtable_add_name>
     aa0:	mov	r3, r0
     aa4:	cmp	r3, #0
     aa8:	beq	b20 <compare_arrays_as_records_sub+0x334>
     aac:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ab0:	lsl	r3, r3, #2
     ab4:	ldr	r2, [fp, #12]
     ab8:	add	r3, r2, r3
     abc:	ldr	r3, [r3]
     ac0:	mov	r2, r3
     ac4:	movw	r1, #0
     ac8:	movt	r1, #0
     acc:	mvn	r0, #99	; 0x63
     ad0:	bl	0 <coda_set_error>
     ad4:	movw	r3, #0
     ad8:	movt	r3, #0
     adc:	ldr	r4, [r3]
     ae0:	movw	r3, #0
     ae4:	movt	r3, #0
     ae8:	ldr	r5, [r3, #4]
     aec:	bl	0 <coda_get_errno>
     af0:	mov	r3, r0
     af4:	ldr	r3, [r3]
     af8:	mov	r0, r3
     afc:	bl	0 <coda_errno_to_string>
     b00:	mov	r3, r0
     b04:	mov	r2, r5
     b08:	movw	r1, #0
     b0c:	movt	r1, #0
     b10:	mov	r0, r4
     b14:	bl	0 <fprintf>
     b18:	mvn	r3, #0
     b1c:	b	ef0 <compare_arrays_as_records_sub+0x704>
     b20:	ldr	r3, [fp, #4]
     b24:	sub	r3, r3, #1
     b28:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b2c:	cmp	r2, r3
     b30:	bge	b5c <compare_arrays_as_records_sub+0x370>
     b34:	ldr	r0, [fp, #-44]	; 0xffffffd4
     b38:	bl	0 <coda_cursor_goto_next_array_element>
     b3c:	mov	r3, r0
     b40:	cmp	r3, #0
     b44:	beq	b5c <compare_arrays_as_records_sub+0x370>
     b48:	mov	r1, #2
     b4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     b50:	bl	378 <print_error_with_cursor>
     b54:	mvn	r3, #0
     b58:	b	ef0 <compare_arrays_as_records_sub+0x704>
     b5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b60:	add	r3, r3, #1
     b64:	str	r3, [fp, #-24]	; 0xffffffe8
     b68:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b6c:	ldr	r3, [fp, #4]
     b70:	cmp	r2, r3
     b74:	blt	a08 <compare_arrays_as_records_sub+0x21c>
     b78:	ldr	r0, [fp, #-44]	; 0xffffffd4
     b7c:	bl	0 <coda_cursor_goto_parent>
     b80:	ldr	r2, [fp, #-52]	; 0xffffffcc
     b84:	ldr	r3, [fp, #4]
     b88:	cmp	r2, r3
     b8c:	beq	c08 <compare_arrays_as_records_sub+0x41c>
     b90:	movw	r0, #0
     b94:	movt	r0, #0
     b98:	bl	0 <printf>
     b9c:	movw	r1, #0
     ba0:	movt	r1, #0
     ba4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     ba8:	bl	0 <coda_cursor_print_path>
     bac:	mov	r0, #10
     bb0:	bl	0 <putchar>
     bb4:	movw	r3, #0
     bb8:	movt	r3, #0
     bbc:	ldr	r3, [r3]
     bc0:	cmp	r3, #0
     bc4:	beq	c08 <compare_arrays_as_records_sub+0x41c>
     bc8:	movw	r3, #0
     bcc:	movt	r3, #0
     bd0:	ldr	r3, [r3]
     bd4:	ldr	r2, [fp, #-52]	; 0xffffffcc
     bd8:	mov	r1, r3
     bdc:	movw	r0, #0
     be0:	movt	r0, #0
     be4:	bl	0 <printf>
     be8:	movw	r3, #0
     bec:	movt	r3, #0
     bf0:	ldr	r3, [r3, #4]
     bf4:	ldr	r2, [fp, #4]
     bf8:	mov	r1, r3
     bfc:	movw	r0, #0
     c00:	movt	r0, #0
     c04:	bl	0 <printf>
     c08:	mov	r3, #1
     c0c:	str	r3, [fp, #-16]
     c10:	ldr	r3, [fp, #-52]	; 0xffffffcc
     c14:	cmp	r3, #0
     c18:	ble	cec <compare_arrays_as_records_sub+0x500>
     c1c:	mov	r3, #0
     c20:	str	r3, [fp, #-20]	; 0xffffffec
     c24:	b	cdc <compare_arrays_as_records_sub+0x4f0>
     c28:	ldr	r3, [fp, #-20]	; 0xffffffec
     c2c:	lsl	r3, r3, #2
     c30:	ldr	r2, [fp, #8]
     c34:	add	r3, r2, r3
     c38:	ldr	r3, [r3]
     c3c:	mov	r1, r3
     c40:	ldr	r0, [fp, #20]
     c44:	bl	0 <coda_hashtable_get_index_from_name>
     c48:	mov	r3, r0
     c4c:	cmp	r3, #0
     c50:	bge	cd0 <compare_arrays_as_records_sub+0x4e4>
     c54:	ldr	r3, [fp, #-16]
     c58:	cmp	r3, #0
     c5c:	beq	c8c <compare_arrays_as_records_sub+0x4a0>
     c60:	movw	r0, #0
     c64:	movt	r0, #0
     c68:	bl	0 <printf>
     c6c:	movw	r1, #0
     c70:	movt	r1, #0
     c74:	ldr	r0, [fp, #-40]	; 0xffffffd8
     c78:	bl	0 <coda_cursor_print_path>
     c7c:	mov	r0, #10
     c80:	bl	0 <putchar>
     c84:	mov	r3, #0
     c88:	str	r3, [fp, #-16]
     c8c:	movw	r3, #0
     c90:	movt	r3, #0
     c94:	ldr	r3, [r3]
     c98:	cmp	r3, #0
     c9c:	beq	cd0 <compare_arrays_as_records_sub+0x4e4>
     ca0:	movw	r3, #0
     ca4:	movt	r3, #0
     ca8:	ldr	r1, [r3]
     cac:	ldr	r3, [fp, #-20]	; 0xffffffec
     cb0:	lsl	r3, r3, #2
     cb4:	ldr	r2, [fp, #8]
     cb8:	add	r3, r2, r3
     cbc:	ldr	r3, [r3]
     cc0:	mov	r2, r3
     cc4:	movw	r0, #0
     cc8:	movt	r0, #0
     ccc:	bl	0 <printf>
     cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
     cd4:	add	r3, r3, #1
     cd8:	str	r3, [fp, #-20]	; 0xffffffec
     cdc:	ldr	r2, [fp, #-20]	; 0xffffffec
     ce0:	ldr	r3, [fp, #-52]	; 0xffffffcc
     ce4:	cmp	r2, r3
     ce8:	blt	c28 <compare_arrays_as_records_sub+0x43c>
     cec:	ldr	r3, [fp, #4]
     cf0:	cmp	r3, #0
     cf4:	ble	dc8 <compare_arrays_as_records_sub+0x5dc>
     cf8:	mov	r3, #0
     cfc:	str	r3, [fp, #-24]	; 0xffffffe8
     d00:	b	db8 <compare_arrays_as_records_sub+0x5cc>
     d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d08:	lsl	r3, r3, #2
     d0c:	ldr	r2, [fp, #12]
     d10:	add	r3, r2, r3
     d14:	ldr	r3, [r3]
     d18:	mov	r1, r3
     d1c:	ldr	r0, [fp, #16]
     d20:	bl	0 <coda_hashtable_get_index_from_name>
     d24:	mov	r3, r0
     d28:	cmp	r3, #0
     d2c:	bge	dac <compare_arrays_as_records_sub+0x5c0>
     d30:	ldr	r3, [fp, #-16]
     d34:	cmp	r3, #0
     d38:	beq	d68 <compare_arrays_as_records_sub+0x57c>
     d3c:	movw	r0, #0
     d40:	movt	r0, #0
     d44:	bl	0 <printf>
     d48:	movw	r1, #0
     d4c:	movt	r1, #0
     d50:	ldr	r0, [fp, #-40]	; 0xffffffd8
     d54:	bl	0 <coda_cursor_print_path>
     d58:	mov	r0, #10
     d5c:	bl	0 <putchar>
     d60:	mov	r3, #0
     d64:	str	r3, [fp, #-16]
     d68:	movw	r3, #0
     d6c:	movt	r3, #0
     d70:	ldr	r3, [r3]
     d74:	cmp	r3, #0
     d78:	beq	dac <compare_arrays_as_records_sub+0x5c0>
     d7c:	movw	r3, #0
     d80:	movt	r3, #0
     d84:	ldr	r1, [r3, #4]
     d88:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d8c:	lsl	r3, r3, #2
     d90:	ldr	r2, [fp, #12]
     d94:	add	r3, r2, r3
     d98:	ldr	r3, [r3]
     d9c:	mov	r2, r3
     da0:	movw	r0, #0
     da4:	movt	r0, #0
     da8:	bl	0 <printf>
     dac:	ldr	r3, [fp, #-24]	; 0xffffffe8
     db0:	add	r3, r3, #1
     db4:	str	r3, [fp, #-24]	; 0xffffffe8
     db8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     dbc:	ldr	r3, [fp, #4]
     dc0:	cmp	r2, r3
     dc4:	blt	d04 <compare_arrays_as_records_sub+0x518>
     dc8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     dcc:	cmp	r3, #0
     dd0:	ble	eec <compare_arrays_as_records_sub+0x700>
     dd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     dd8:	bl	0 <coda_cursor_goto_first_array_element>
     ddc:	mov	r3, r0
     de0:	cmp	r3, #0
     de4:	beq	dfc <compare_arrays_as_records_sub+0x610>
     de8:	mov	r1, #1
     dec:	ldr	r0, [fp, #-40]	; 0xffffffd8
     df0:	bl	378 <print_error_with_cursor>
     df4:	mvn	r3, #0
     df8:	b	ef0 <compare_arrays_as_records_sub+0x704>
     dfc:	mov	r3, #0
     e00:	str	r3, [fp, #-20]	; 0xffffffec
     e04:	b	ed4 <compare_arrays_as_records_sub+0x6e8>
     e08:	ldr	r3, [fp, #-20]	; 0xffffffec
     e0c:	lsl	r3, r3, #2
     e10:	ldr	r2, [fp, #8]
     e14:	add	r3, r2, r3
     e18:	ldr	r3, [r3]
     e1c:	mov	r1, r3
     e20:	ldr	r0, [fp, #20]
     e24:	bl	0 <coda_hashtable_get_index_from_name>
     e28:	str	r0, [fp, #-24]	; 0xffffffe8
     e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e30:	cmp	r3, #0
     e34:	blt	e8c <compare_arrays_as_records_sub+0x6a0>
     e38:	ldr	r1, [fp, #-24]	; 0xffffffe8
     e3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     e40:	bl	0 <coda_cursor_goto_array_element_by_index>
     e44:	mov	r3, r0
     e48:	cmp	r3, #0
     e4c:	beq	e64 <compare_arrays_as_records_sub+0x678>
     e50:	mov	r1, #2
     e54:	ldr	r0, [fp, #-44]	; 0xffffffd4
     e58:	bl	378 <print_error_with_cursor>
     e5c:	mvn	r3, #0
     e60:	b	ef0 <compare_arrays_as_records_sub+0x704>
     e64:	ldr	r1, [fp, #-44]	; 0xffffffd4
     e68:	ldr	r0, [fp, #-40]	; 0xffffffd8
     e6c:	bl	2ab4 <compare_data>
     e70:	mov	r3, r0
     e74:	cmp	r3, #0
     e78:	beq	e84 <compare_arrays_as_records_sub+0x698>
     e7c:	mvn	r3, #0
     e80:	b	ef0 <compare_arrays_as_records_sub+0x704>
     e84:	ldr	r0, [fp, #-44]	; 0xffffffd4
     e88:	bl	0 <coda_cursor_goto_parent>
     e8c:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e90:	sub	r3, r3, #1
     e94:	ldr	r2, [fp, #-20]	; 0xffffffec
     e98:	cmp	r2, r3
     e9c:	bge	ec8 <compare_arrays_as_records_sub+0x6dc>
     ea0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     ea4:	bl	0 <coda_cursor_goto_next_array_element>
     ea8:	mov	r3, r0
     eac:	cmp	r3, #0
     eb0:	beq	ec8 <compare_arrays_as_records_sub+0x6dc>
     eb4:	mov	r1, #1
     eb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
     ebc:	bl	378 <print_error_with_cursor>
     ec0:	mvn	r3, #0
     ec4:	b	ef0 <compare_arrays_as_records_sub+0x704>
     ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
     ecc:	add	r3, r3, #1
     ed0:	str	r3, [fp, #-20]	; 0xffffffec
     ed4:	ldr	r2, [fp, #-20]	; 0xffffffec
     ed8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     edc:	cmp	r2, r3
     ee0:	blt	e08 <compare_arrays_as_records_sub+0x61c>
     ee4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     ee8:	bl	0 <coda_cursor_goto_parent>
     eec:	mov	r3, #0
     ef0:	mov	r0, r3
     ef4:	sub	sp, fp, #12
     ef8:	ldrd	r4, [sp]
     efc:	ldr	fp, [sp, #8]
     f00:	add	sp, sp, #12
     f04:	pop	{pc}		; (ldr pc, [sp], #4)

00000f08 <compare_arrays_as_records>:
     f08:	str	r4, [sp, #-12]!
     f0c:	str	fp, [sp, #4]
     f10:	str	lr, [sp, #8]
     f14:	add	fp, sp, #8
     f18:	sub	sp, sp, #84	; 0x54
     f1c:	str	r0, [fp, #-56]	; 0xffffffc8
     f20:	str	r1, [fp, #-60]	; 0xffffffc4
     f24:	str	r2, [fp, #-64]	; 0xffffffc0
     f28:	mov	r3, #0
     f2c:	str	r3, [fp, #-40]	; 0xffffffd8
     f30:	mov	r3, #0
     f34:	str	r3, [fp, #-20]	; 0xffffffec
     f38:	mov	r3, #0
     f3c:	str	r3, [fp, #-24]	; 0xffffffe8
     f40:	mov	r3, #0
     f44:	str	r3, [fp, #-28]	; 0xffffffe4
     f48:	mov	r3, #0
     f4c:	str	r3, [fp, #-32]	; 0xffffffe0
     f50:	sub	r3, fp, #44	; 0x2c
     f54:	mov	r1, r3
     f58:	ldr	r0, [fp, #-56]	; 0xffffffc8
     f5c:	bl	0 <coda_cursor_get_num_elements>
     f60:	mov	r3, r0
     f64:	cmp	r3, #0
     f68:	beq	f80 <compare_arrays_as_records+0x78>
     f6c:	mov	r1, #1
     f70:	ldr	r0, [fp, #-56]	; 0xffffffc8
     f74:	bl	378 <print_error_with_cursor>
     f78:	mvn	r3, #0
     f7c:	b	1374 <compare_arrays_as_records+0x46c>
     f80:	sub	r3, fp, #48	; 0x30
     f84:	mov	r1, r3
     f88:	ldr	r0, [fp, #-60]	; 0xffffffc4
     f8c:	bl	0 <coda_cursor_get_num_elements>
     f90:	mov	r3, r0
     f94:	cmp	r3, #0
     f98:	beq	fb0 <compare_arrays_as_records+0xa8>
     f9c:	mov	r1, #2
     fa0:	ldr	r0, [fp, #-60]	; 0xffffffc4
     fa4:	bl	378 <print_error_with_cursor>
     fa8:	mvn	r3, #0
     fac:	b	1374 <compare_arrays_as_records+0x46c>
     fb0:	sub	r3, fp, #40	; 0x28
     fb4:	mov	r1, r3
     fb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
     fbc:	bl	0 <coda_expression_from_string>
     fc0:	mov	r3, r0
     fc4:	cmp	r3, #0
     fc8:	beq	100c <compare_arrays_as_records+0x104>
     fcc:	movw	r3, #0
     fd0:	movt	r3, #0
     fd4:	ldr	r4, [r3]
     fd8:	bl	0 <coda_get_errno>
     fdc:	mov	r3, r0
     fe0:	ldr	r3, [r3]
     fe4:	mov	r0, r3
     fe8:	bl	0 <coda_errno_to_string>
     fec:	mov	r3, r0
     ff0:	mov	r2, r3
     ff4:	movw	r1, #0
     ff8:	movt	r1, #0
     ffc:	mov	r0, r4
    1000:	bl	0 <fprintf>
    1004:	mvn	r3, #0
    1008:	b	1374 <compare_arrays_as_records+0x46c>
    100c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1010:	lsl	r3, r3, #2
    1014:	mov	r0, r3
    1018:	bl	0 <malloc>
    101c:	mov	r3, r0
    1020:	str	r3, [fp, #-28]	; 0xffffffe4
    1024:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1028:	cmp	r3, #0
    102c:	bne	1078 <compare_arrays_as_records+0x170>
    1030:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1034:	lsl	r2, r3, #2
    1038:	movw	r3, #461	; 0x1cd
    103c:	str	r3, [sp]
    1040:	movw	r3, #0
    1044:	movt	r3, #0
    1048:	movw	r1, #0
    104c:	movt	r1, #0
    1050:	mvn	r0, #0
    1054:	bl	0 <coda_set_error>
    1058:	mov	r1, #1
    105c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    1060:	bl	378 <print_error_with_cursor>
    1064:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1068:	mov	r0, r3
    106c:	bl	0 <coda_expression_delete>
    1070:	mvn	r3, #0
    1074:	b	1374 <compare_arrays_as_records+0x46c>
    1078:	mov	r3, #0
    107c:	str	r3, [fp, #-16]
    1080:	b	10a8 <compare_arrays_as_records+0x1a0>
    1084:	ldr	r3, [fp, #-16]
    1088:	lsl	r3, r3, #2
    108c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1090:	add	r3, r2, r3
    1094:	mov	r2, #0
    1098:	str	r2, [r3]
    109c:	ldr	r3, [fp, #-16]
    10a0:	add	r3, r3, #1
    10a4:	str	r3, [fp, #-16]
    10a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10ac:	ldr	r2, [fp, #-16]
    10b0:	cmp	r2, r3
    10b4:	blt	1084 <compare_arrays_as_records+0x17c>
    10b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    10bc:	lsl	r3, r3, #2
    10c0:	mov	r0, r3
    10c4:	bl	0 <malloc>
    10c8:	mov	r3, r0
    10cc:	str	r3, [fp, #-32]	; 0xffffffe0
    10d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    10d4:	cmp	r3, #0
    10d8:	bne	112c <compare_arrays_as_records+0x224>
    10dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    10e0:	lsl	r2, r3, #2
    10e4:	movw	r3, #475	; 0x1db
    10e8:	str	r3, [sp]
    10ec:	movw	r3, #0
    10f0:	movt	r3, #0
    10f4:	movw	r1, #0
    10f8:	movt	r1, #0
    10fc:	mvn	r0, #0
    1100:	bl	0 <coda_set_error>
    1104:	mov	r1, #2
    1108:	ldr	r0, [fp, #-60]	; 0xffffffc4
    110c:	bl	378 <print_error_with_cursor>
    1110:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1114:	mov	r0, r3
    1118:	bl	0 <coda_expression_delete>
    111c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1120:	bl	0 <free>
    1124:	mvn	r3, #0
    1128:	b	1374 <compare_arrays_as_records+0x46c>
    112c:	mov	r3, #0
    1130:	str	r3, [fp, #-16]
    1134:	b	115c <compare_arrays_as_records+0x254>
    1138:	ldr	r3, [fp, #-16]
    113c:	lsl	r3, r3, #2
    1140:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1144:	add	r3, r2, r3
    1148:	mov	r2, #0
    114c:	str	r2, [r3]
    1150:	ldr	r3, [fp, #-16]
    1154:	add	r3, r3, #1
    1158:	str	r3, [fp, #-16]
    115c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1160:	ldr	r2, [fp, #-16]
    1164:	cmp	r2, r3
    1168:	blt	1138 <compare_arrays_as_records+0x230>
    116c:	mov	r0, #1
    1170:	bl	0 <coda_hashtable_new>
    1174:	str	r0, [fp, #-20]	; 0xffffffec
    1178:	ldr	r3, [fp, #-20]	; 0xffffffec
    117c:	cmp	r3, #0
    1180:	bne	11d0 <compare_arrays_as_records+0x2c8>
    1184:	movw	r3, #489	; 0x1e9
    1188:	movw	r2, #0
    118c:	movt	r2, #0
    1190:	movw	r1, #0
    1194:	movt	r1, #0
    1198:	mvn	r0, #0
    119c:	bl	0 <coda_set_error>
    11a0:	mov	r1, #1
    11a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    11a8:	bl	378 <print_error_with_cursor>
    11ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
    11b0:	mov	r0, r3
    11b4:	bl	0 <coda_expression_delete>
    11b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    11bc:	bl	0 <free>
    11c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    11c4:	bl	0 <free>
    11c8:	mvn	r3, #0
    11cc:	b	1374 <compare_arrays_as_records+0x46c>
    11d0:	mov	r0, #1
    11d4:	bl	0 <coda_hashtable_new>
    11d8:	str	r0, [fp, #-24]	; 0xffffffe8
    11dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11e0:	cmp	r3, #0
    11e4:	bne	123c <compare_arrays_as_records+0x334>
    11e8:	mov	r3, #500	; 0x1f4
    11ec:	movw	r2, #0
    11f0:	movt	r2, #0
    11f4:	movw	r1, #0
    11f8:	movt	r1, #0
    11fc:	mvn	r0, #0
    1200:	bl	0 <coda_set_error>
    1204:	mov	r1, #2
    1208:	ldr	r0, [fp, #-60]	; 0xffffffc4
    120c:	bl	378 <print_error_with_cursor>
    1210:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1214:	mov	r0, r3
    1218:	bl	0 <coda_expression_delete>
    121c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1220:	bl	0 <coda_hashtable_delete>
    1224:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1228:	bl	0 <free>
    122c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1230:	bl	0 <free>
    1234:	mvn	r3, #0
    1238:	b	1374 <compare_arrays_as_records+0x46c>
    123c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1240:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1244:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1248:	ldr	r2, [fp, #-24]	; 0xffffffe8
    124c:	str	r2, [sp, #16]
    1250:	ldr	r2, [fp, #-20]	; 0xffffffec
    1254:	str	r2, [sp, #12]
    1258:	ldr	r2, [fp, #-32]	; 0xffffffe0
    125c:	str	r2, [sp, #8]
    1260:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1264:	str	r2, [sp, #4]
    1268:	str	r3, [sp]
    126c:	mov	r3, r0
    1270:	mov	r2, r1
    1274:	ldr	r1, [fp, #-60]	; 0xffffffc4
    1278:	ldr	r0, [fp, #-56]	; 0xffffffc8
    127c:	bl	7ec <compare_arrays_as_records_sub>
    1280:	str	r0, [fp, #-36]	; 0xffffffdc
    1284:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1288:	mov	r0, r3
    128c:	bl	0 <coda_expression_delete>
    1290:	ldr	r0, [fp, #-20]	; 0xffffffec
    1294:	bl	0 <coda_hashtable_delete>
    1298:	ldr	r0, [fp, #-24]	; 0xffffffe8
    129c:	bl	0 <coda_hashtable_delete>
    12a0:	mov	r3, #0
    12a4:	str	r3, [fp, #-16]
    12a8:	b	12f0 <compare_arrays_as_records+0x3e8>
    12ac:	ldr	r3, [fp, #-16]
    12b0:	lsl	r3, r3, #2
    12b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    12b8:	add	r3, r2, r3
    12bc:	ldr	r3, [r3]
    12c0:	cmp	r3, #0
    12c4:	beq	12e4 <compare_arrays_as_records+0x3dc>
    12c8:	ldr	r3, [fp, #-16]
    12cc:	lsl	r3, r3, #2
    12d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    12d4:	add	r3, r2, r3
    12d8:	ldr	r3, [r3]
    12dc:	mov	r0, r3
    12e0:	bl	0 <coda_free>
    12e4:	ldr	r3, [fp, #-16]
    12e8:	add	r3, r3, #1
    12ec:	str	r3, [fp, #-16]
    12f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12f4:	ldr	r2, [fp, #-16]
    12f8:	cmp	r2, r3
    12fc:	blt	12ac <compare_arrays_as_records+0x3a4>
    1300:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1304:	bl	0 <free>
    1308:	mov	r3, #0
    130c:	str	r3, [fp, #-16]
    1310:	b	1358 <compare_arrays_as_records+0x450>
    1314:	ldr	r3, [fp, #-16]
    1318:	lsl	r3, r3, #2
    131c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1320:	add	r3, r2, r3
    1324:	ldr	r3, [r3]
    1328:	cmp	r3, #0
    132c:	beq	134c <compare_arrays_as_records+0x444>
    1330:	ldr	r3, [fp, #-16]
    1334:	lsl	r3, r3, #2
    1338:	ldr	r2, [fp, #-32]	; 0xffffffe0
    133c:	add	r3, r2, r3
    1340:	ldr	r3, [r3]
    1344:	mov	r0, r3
    1348:	bl	0 <coda_free>
    134c:	ldr	r3, [fp, #-16]
    1350:	add	r3, r3, #1
    1354:	str	r3, [fp, #-16]
    1358:	ldr	r3, [fp, #-48]	; 0xffffffd0
    135c:	ldr	r2, [fp, #-16]
    1360:	cmp	r2, r3
    1364:	blt	1314 <compare_arrays_as_records+0x40c>
    1368:	ldr	r0, [fp, #-32]	; 0xffffffe0
    136c:	bl	0 <free>
    1370:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1374:	mov	r0, r3
    1378:	sub	sp, fp, #8
    137c:	ldr	r4, [sp]
    1380:	ldr	fp, [sp, #4]
    1384:	add	sp, sp, #8
    1388:	pop	{pc}		; (ldr pc, [sp], #4)

0000138c <compare_arrays>:
    138c:	str	fp, [sp, #-8]!
    1390:	str	lr, [sp, #4]
    1394:	add	fp, sp, #4
    1398:	sub	sp, sp, #24
    139c:	str	r0, [fp, #-24]	; 0xffffffe8
    13a0:	str	r1, [fp, #-28]	; 0xffffffe4
    13a4:	movw	r3, #0
    13a8:	movt	r3, #0
    13ac:	ldr	r3, [r3, #12]
    13b0:	sub	r2, fp, #12
    13b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    13b8:	mov	r0, r3
    13bc:	bl	0 <coda_tree_node_get_item_for_cursor>
    13c0:	mov	r3, r0
    13c4:	cmp	r3, #0
    13c8:	beq	13e0 <compare_arrays+0x54>
    13cc:	mov	r1, #1
    13d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    13d4:	bl	378 <print_error_with_cursor>
    13d8:	mvn	r3, #0
    13dc:	b	1614 <compare_arrays+0x288>
    13e0:	ldr	r3, [fp, #-12]
    13e4:	cmp	r3, #0
    13e8:	beq	1408 <compare_arrays+0x7c>
    13ec:	ldr	r3, [fp, #-12]
    13f0:	mov	r2, r3
    13f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    13f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    13fc:	bl	f08 <compare_arrays_as_records>
    1400:	mov	r3, r0
    1404:	b	1614 <compare_arrays+0x288>
    1408:	sub	r3, fp, #16
    140c:	mov	r1, r3
    1410:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1414:	bl	0 <coda_cursor_get_num_elements>
    1418:	mov	r3, r0
    141c:	cmp	r3, #0
    1420:	beq	1438 <compare_arrays+0xac>
    1424:	mov	r1, #1
    1428:	ldr	r0, [fp, #-24]	; 0xffffffe8
    142c:	bl	378 <print_error_with_cursor>
    1430:	mvn	r3, #0
    1434:	b	1614 <compare_arrays+0x288>
    1438:	sub	r3, fp, #20
    143c:	mov	r1, r3
    1440:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1444:	bl	0 <coda_cursor_get_num_elements>
    1448:	mov	r3, r0
    144c:	cmp	r3, #0
    1450:	beq	1468 <compare_arrays+0xdc>
    1454:	mov	r1, #2
    1458:	ldr	r0, [fp, #-28]	; 0xffffffe4
    145c:	bl	378 <print_error_with_cursor>
    1460:	mvn	r3, #0
    1464:	b	1614 <compare_arrays+0x288>
    1468:	ldr	r2, [fp, #-16]
    146c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1470:	cmp	r2, r3
    1474:	beq	14f8 <compare_arrays+0x16c>
    1478:	movw	r0, #0
    147c:	movt	r0, #0
    1480:	bl	0 <printf>
    1484:	movw	r1, #0
    1488:	movt	r1, #0
    148c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1490:	bl	0 <coda_cursor_print_path>
    1494:	mov	r0, #10
    1498:	bl	0 <putchar>
    149c:	movw	r3, #0
    14a0:	movt	r3, #0
    14a4:	ldr	r3, [r3]
    14a8:	cmp	r3, #0
    14ac:	beq	14f0 <compare_arrays+0x164>
    14b0:	movw	r3, #0
    14b4:	movt	r3, #0
    14b8:	ldr	r3, [r3]
    14bc:	ldr	r2, [fp, #-16]
    14c0:	mov	r1, r3
    14c4:	movw	r0, #0
    14c8:	movt	r0, #0
    14cc:	bl	0 <printf>
    14d0:	movw	r3, #0
    14d4:	movt	r3, #0
    14d8:	ldr	r3, [r3, #4]
    14dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    14e0:	mov	r1, r3
    14e4:	movw	r0, #0
    14e8:	movt	r0, #0
    14ec:	bl	0 <printf>
    14f0:	mov	r3, #0
    14f4:	b	1614 <compare_arrays+0x288>
    14f8:	ldr	r3, [fp, #-16]
    14fc:	cmp	r3, #0
    1500:	ble	1610 <compare_arrays+0x284>
    1504:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1508:	bl	0 <coda_cursor_goto_first_array_element>
    150c:	mov	r3, r0
    1510:	cmp	r3, #0
    1514:	beq	152c <compare_arrays+0x1a0>
    1518:	mov	r1, #1
    151c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1520:	bl	378 <print_error_with_cursor>
    1524:	mvn	r3, #0
    1528:	b	1614 <compare_arrays+0x288>
    152c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1530:	bl	0 <coda_cursor_goto_first_array_element>
    1534:	mov	r3, r0
    1538:	cmp	r3, #0
    153c:	beq	1554 <compare_arrays+0x1c8>
    1540:	mov	r1, #1
    1544:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1548:	bl	378 <print_error_with_cursor>
    154c:	mvn	r3, #0
    1550:	b	1614 <compare_arrays+0x288>
    1554:	mov	r3, #0
    1558:	str	r3, [fp, #-8]
    155c:	b	15f0 <compare_arrays+0x264>
    1560:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1564:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1568:	bl	2ab4 <compare_data>
    156c:	mov	r3, r0
    1570:	cmp	r3, #0
    1574:	beq	1580 <compare_arrays+0x1f4>
    1578:	mvn	r3, #0
    157c:	b	1614 <compare_arrays+0x288>
    1580:	ldr	r3, [fp, #-16]
    1584:	sub	r3, r3, #1
    1588:	ldr	r2, [fp, #-8]
    158c:	cmp	r2, r3
    1590:	bge	15e4 <compare_arrays+0x258>
    1594:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1598:	bl	0 <coda_cursor_goto_next_array_element>
    159c:	mov	r3, r0
    15a0:	cmp	r3, #0
    15a4:	beq	15bc <compare_arrays+0x230>
    15a8:	mov	r1, #1
    15ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    15b0:	bl	378 <print_error_with_cursor>
    15b4:	mvn	r3, #0
    15b8:	b	1614 <compare_arrays+0x288>
    15bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    15c0:	bl	0 <coda_cursor_goto_next_array_element>
    15c4:	mov	r3, r0
    15c8:	cmp	r3, #0
    15cc:	beq	15e4 <compare_arrays+0x258>
    15d0:	mov	r1, #2
    15d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    15d8:	bl	378 <print_error_with_cursor>
    15dc:	mvn	r3, #0
    15e0:	b	1614 <compare_arrays+0x288>
    15e4:	ldr	r3, [fp, #-8]
    15e8:	add	r3, r3, #1
    15ec:	str	r3, [fp, #-8]
    15f0:	ldr	r3, [fp, #-16]
    15f4:	ldr	r2, [fp, #-8]
    15f8:	cmp	r2, r3
    15fc:	blt	1560 <compare_arrays+0x1d4>
    1600:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1604:	bl	0 <coda_cursor_goto_parent>
    1608:	ldr	r0, [fp, #-28]	; 0xffffffe4
    160c:	bl	0 <coda_cursor_goto_parent>
    1610:	mov	r3, #0
    1614:	mov	r0, r3
    1618:	sub	sp, fp, #4
    161c:	ldr	fp, [sp]
    1620:	add	sp, sp, #4
    1624:	pop	{pc}		; (ldr pc, [sp], #4)

00001628 <compare_records>:
    1628:	str	fp, [sp, #-8]!
    162c:	str	lr, [sp, #4]
    1630:	add	fp, sp, #4
    1634:	sub	sp, sp, #576	; 0x240
    1638:	str	r0, [fp, #-576]	; 0xfffffdc0
    163c:	str	r1, [fp, #-580]	; 0xfffffdbc
    1640:	sub	r3, fp, #12
    1644:	mov	r1, r3
    1648:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    164c:	bl	0 <coda_cursor_get_type>
    1650:	mov	r3, r0
    1654:	cmp	r3, #0
    1658:	beq	1670 <compare_records+0x48>
    165c:	mov	r1, #1
    1660:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1664:	bl	378 <print_error_with_cursor>
    1668:	mvn	r3, #0
    166c:	b	1be4 <compare_records+0x5bc>
    1670:	sub	r3, fp, #16
    1674:	mov	r1, r3
    1678:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    167c:	bl	0 <coda_cursor_get_type>
    1680:	mov	r3, r0
    1684:	cmp	r3, #0
    1688:	beq	16a0 <compare_records+0x78>
    168c:	mov	r1, #2
    1690:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    1694:	bl	378 <print_error_with_cursor>
    1698:	mvn	r3, #0
    169c:	b	1be4 <compare_records+0x5bc>
    16a0:	sub	r3, fp, #20
    16a4:	mov	r1, r3
    16a8:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    16ac:	bl	0 <coda_cursor_get_num_elements>
    16b0:	mov	r3, r0
    16b4:	cmp	r3, #0
    16b8:	beq	16d0 <compare_records+0xa8>
    16bc:	mov	r1, #1
    16c0:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    16c4:	bl	378 <print_error_with_cursor>
    16c8:	mvn	r3, #0
    16cc:	b	1be4 <compare_records+0x5bc>
    16d0:	sub	r3, fp, #24
    16d4:	mov	r1, r3
    16d8:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    16dc:	bl	0 <coda_cursor_get_num_elements>
    16e0:	mov	r3, r0
    16e4:	cmp	r3, #0
    16e8:	beq	1700 <compare_records+0xd8>
    16ec:	mov	r1, #2
    16f0:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    16f4:	bl	378 <print_error_with_cursor>
    16f8:	mvn	r3, #0
    16fc:	b	1be4 <compare_records+0x5bc>
    1700:	mov	r3, #1
    1704:	str	r3, [fp, #-8]
    1708:	ldr	r3, [fp, #-20]	; 0xffffffec
    170c:	cmp	r3, #0
    1710:	ble	17fc <compare_records+0x1d4>
    1714:	mov	r3, #0
    1718:	str	r3, [fp, #-28]	; 0xffffffe4
    171c:	b	17ec <compare_records+0x1c4>
    1720:	ldr	r3, [fp, #-12]
    1724:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1728:	sub	r2, fp, #36	; 0x24
    172c:	mov	r0, r3
    1730:	bl	0 <coda_type_get_record_field_name>
    1734:	mov	r3, r0
    1738:	cmp	r3, #0
    173c:	beq	1754 <compare_records+0x12c>
    1740:	mov	r1, #1
    1744:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1748:	bl	378 <print_error_with_cursor>
    174c:	mvn	r3, #0
    1750:	b	1be4 <compare_records+0x5bc>
    1754:	ldr	r3, [fp, #-16]
    1758:	ldr	r1, [fp, #-36]	; 0xffffffdc
    175c:	sub	r2, fp, #32
    1760:	mov	r0, r3
    1764:	bl	0 <coda_type_get_record_field_index_from_name>
    1768:	mov	r3, r0
    176c:	cmp	r3, #0
    1770:	beq	17e0 <compare_records+0x1b8>
    1774:	ldr	r3, [fp, #-8]
    1778:	cmp	r3, #0
    177c:	beq	17ac <compare_records+0x184>
    1780:	movw	r0, #0
    1784:	movt	r0, #0
    1788:	bl	0 <printf>
    178c:	movw	r1, #0
    1790:	movt	r1, #0
    1794:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1798:	bl	0 <coda_cursor_print_path>
    179c:	mov	r0, #10
    17a0:	bl	0 <putchar>
    17a4:	mov	r3, #0
    17a8:	str	r3, [fp, #-8]
    17ac:	movw	r3, #0
    17b0:	movt	r3, #0
    17b4:	ldr	r3, [r3]
    17b8:	cmp	r3, #0
    17bc:	beq	17e0 <compare_records+0x1b8>
    17c0:	movw	r3, #0
    17c4:	movt	r3, #0
    17c8:	ldr	r3, [r3]
    17cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    17d0:	mov	r1, r3
    17d4:	movw	r0, #0
    17d8:	movt	r0, #0
    17dc:	bl	0 <printf>
    17e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    17e4:	add	r3, r3, #1
    17e8:	str	r3, [fp, #-28]	; 0xffffffe4
    17ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
    17f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    17f4:	cmp	r2, r3
    17f8:	blt	1720 <compare_records+0xf8>
    17fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1800:	cmp	r3, #0
    1804:	ble	18f0 <compare_records+0x2c8>
    1808:	mov	r3, #0
    180c:	str	r3, [fp, #-32]	; 0xffffffe0
    1810:	b	18e0 <compare_records+0x2b8>
    1814:	ldr	r3, [fp, #-16]
    1818:	ldr	r1, [fp, #-32]	; 0xffffffe0
    181c:	sub	r2, fp, #40	; 0x28
    1820:	mov	r0, r3
    1824:	bl	0 <coda_type_get_record_field_name>
    1828:	mov	r3, r0
    182c:	cmp	r3, #0
    1830:	beq	1848 <compare_records+0x220>
    1834:	mov	r1, #2
    1838:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    183c:	bl	378 <print_error_with_cursor>
    1840:	mvn	r3, #0
    1844:	b	1be4 <compare_records+0x5bc>
    1848:	ldr	r3, [fp, #-12]
    184c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1850:	sub	r2, fp, #28
    1854:	mov	r0, r3
    1858:	bl	0 <coda_type_get_record_field_index_from_name>
    185c:	mov	r3, r0
    1860:	cmp	r3, #0
    1864:	beq	18d4 <compare_records+0x2ac>
    1868:	ldr	r3, [fp, #-8]
    186c:	cmp	r3, #0
    1870:	beq	18a0 <compare_records+0x278>
    1874:	movw	r0, #0
    1878:	movt	r0, #0
    187c:	bl	0 <printf>
    1880:	movw	r1, #0
    1884:	movt	r1, #0
    1888:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    188c:	bl	0 <coda_cursor_print_path>
    1890:	mov	r0, #10
    1894:	bl	0 <putchar>
    1898:	mov	r3, #0
    189c:	str	r3, [fp, #-8]
    18a0:	movw	r3, #0
    18a4:	movt	r3, #0
    18a8:	ldr	r3, [r3]
    18ac:	cmp	r3, #0
    18b0:	beq	18d4 <compare_records+0x2ac>
    18b4:	movw	r3, #0
    18b8:	movt	r3, #0
    18bc:	ldr	r3, [r3, #4]
    18c0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    18c4:	mov	r1, r3
    18c8:	movw	r0, #0
    18cc:	movt	r0, #0
    18d0:	bl	0 <printf>
    18d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    18d8:	add	r3, r3, #1
    18dc:	str	r3, [fp, #-32]	; 0xffffffe0
    18e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    18e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18e8:	cmp	r2, r3
    18ec:	blt	1814 <compare_records+0x1ec>
    18f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    18f4:	cmp	r3, #0
    18f8:	ble	1be0 <compare_records+0x5b8>
    18fc:	ldr	r2, [fp, #-576]	; 0xfffffdc0
    1900:	sub	r3, fp, #572	; 0x23c
    1904:	mov	r1, r2
    1908:	mov	r2, #520	; 0x208
    190c:	mov	r0, r3
    1910:	bl	0 <memcpy>
    1914:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1918:	bl	0 <coda_cursor_goto_first_record_field>
    191c:	mov	r3, r0
    1920:	cmp	r3, #0
    1924:	beq	193c <compare_records+0x314>
    1928:	mov	r1, #1
    192c:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1930:	bl	378 <print_error_with_cursor>
    1934:	mvn	r3, #0
    1938:	b	1be4 <compare_records+0x5bc>
    193c:	mov	r3, #0
    1940:	str	r3, [fp, #-28]	; 0xffffffe4
    1944:	b	1bc8 <compare_records+0x5a0>
    1948:	ldr	r1, [fp, #-28]	; 0xffffffe4
    194c:	sub	r2, fp, #48	; 0x30
    1950:	sub	r3, fp, #572	; 0x23c
    1954:	mov	r0, r3
    1958:	bl	0 <coda_cursor_get_record_field_available_status>
    195c:	mov	r3, r0
    1960:	cmp	r3, #0
    1964:	beq	1980 <compare_records+0x358>
    1968:	sub	r3, fp, #572	; 0x23c
    196c:	mov	r1, #1
    1970:	mov	r0, r3
    1974:	bl	378 <print_error_with_cursor>
    1978:	mvn	r3, #0
    197c:	b	1be4 <compare_records+0x5bc>
    1980:	ldr	r3, [fp, #-12]
    1984:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1988:	sub	r2, fp, #44	; 0x2c
    198c:	mov	r0, r3
    1990:	bl	0 <coda_type_get_record_field_name>
    1994:	mov	r3, r0
    1998:	cmp	r3, #0
    199c:	beq	19b4 <compare_records+0x38c>
    19a0:	mov	r1, #1
    19a4:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    19a8:	bl	378 <print_error_with_cursor>
    19ac:	mvn	r3, #0
    19b0:	b	1bc4 <compare_records+0x59c>
    19b4:	ldr	r3, [fp, #-16]
    19b8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    19bc:	sub	r2, fp, #32
    19c0:	mov	r0, r3
    19c4:	bl	0 <coda_type_get_record_field_index_from_name>
    19c8:	mov	r3, r0
    19cc:	cmp	r3, #0
    19d0:	bne	1b78 <compare_records+0x550>
    19d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    19d8:	sub	r2, fp, #52	; 0x34
    19dc:	mov	r1, r3
    19e0:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    19e4:	bl	0 <coda_cursor_get_record_field_available_status>
    19e8:	mov	r3, r0
    19ec:	cmp	r3, #0
    19f0:	beq	1a08 <compare_records+0x3e0>
    19f4:	mov	r1, #2
    19f8:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    19fc:	bl	378 <print_error_with_cursor>
    1a00:	mvn	r3, #0
    1a04:	b	1bc4 <compare_records+0x59c>
    1a08:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1a0c:	cmp	r3, #0
    1a10:	beq	1af0 <compare_records+0x4c8>
    1a14:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1a18:	cmp	r3, #0
    1a1c:	beq	1a7c <compare_records+0x454>
    1a20:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1a24:	mov	r1, r3
    1a28:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    1a2c:	bl	0 <coda_cursor_goto_record_field_by_index>
    1a30:	mov	r3, r0
    1a34:	cmp	r3, #0
    1a38:	beq	1a50 <compare_records+0x428>
    1a3c:	mov	r1, #2
    1a40:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    1a44:	bl	378 <print_error_with_cursor>
    1a48:	mvn	r3, #0
    1a4c:	b	1b70 <compare_records+0x548>
    1a50:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    1a54:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1a58:	bl	2ab4 <compare_data>
    1a5c:	mov	r3, r0
    1a60:	cmp	r3, #0
    1a64:	beq	1a70 <compare_records+0x448>
    1a68:	mvn	r3, #0
    1a6c:	b	1b70 <compare_records+0x548>
    1a70:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    1a74:	bl	0 <coda_cursor_goto_parent>
    1a78:	b	1b78 <compare_records+0x550>
    1a7c:	movw	r0, #0
    1a80:	movt	r0, #0
    1a84:	bl	0 <printf>
    1a88:	movw	r1, #0
    1a8c:	movt	r1, #0
    1a90:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1a94:	bl	0 <coda_cursor_print_path>
    1a98:	mov	r0, #10
    1a9c:	bl	0 <putchar>
    1aa0:	movw	r3, #0
    1aa4:	movt	r3, #0
    1aa8:	ldr	r3, [r3]
    1aac:	cmp	r3, #0
    1ab0:	beq	1b78 <compare_records+0x550>
    1ab4:	movw	r3, #0
    1ab8:	movt	r3, #0
    1abc:	ldr	r3, [r3]
    1ac0:	mov	r1, r3
    1ac4:	movw	r0, #0
    1ac8:	movt	r0, #0
    1acc:	bl	0 <printf>
    1ad0:	movw	r3, #0
    1ad4:	movt	r3, #0
    1ad8:	ldr	r3, [r3, #4]
    1adc:	mov	r1, r3
    1ae0:	movw	r0, #0
    1ae4:	movt	r0, #0
    1ae8:	bl	0 <printf>
    1aec:	b	1b78 <compare_records+0x550>
    1af0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1af4:	cmp	r3, #0
    1af8:	beq	1b78 <compare_records+0x550>
    1afc:	movw	r0, #0
    1b00:	movt	r0, #0
    1b04:	bl	0 <printf>
    1b08:	movw	r1, #0
    1b0c:	movt	r1, #0
    1b10:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1b14:	bl	0 <coda_cursor_print_path>
    1b18:	mov	r0, #10
    1b1c:	bl	0 <putchar>
    1b20:	movw	r3, #0
    1b24:	movt	r3, #0
    1b28:	ldr	r3, [r3]
    1b2c:	cmp	r3, #0
    1b30:	beq	1b78 <compare_records+0x550>
    1b34:	movw	r3, #0
    1b38:	movt	r3, #0
    1b3c:	ldr	r3, [r3]
    1b40:	mov	r1, r3
    1b44:	movw	r0, #0
    1b48:	movt	r0, #0
    1b4c:	bl	0 <printf>
    1b50:	movw	r3, #0
    1b54:	movt	r3, #0
    1b58:	ldr	r3, [r3, #4]
    1b5c:	mov	r1, r3
    1b60:	movw	r0, #0
    1b64:	movt	r0, #0
    1b68:	bl	0 <printf>
    1b6c:	b	1b78 <compare_records+0x550>
    1b70:	nop	{0}
    1b74:	b	1be4 <compare_records+0x5bc>
    1b78:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b7c:	sub	r2, r3, #1
    1b80:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1b84:	cmp	r2, r3
    1b88:	ble	1bb4 <compare_records+0x58c>
    1b8c:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1b90:	bl	0 <coda_cursor_goto_next_record_field>
    1b94:	mov	r3, r0
    1b98:	cmp	r3, #0
    1b9c:	beq	1bb4 <compare_records+0x58c>
    1ba0:	mov	r1, #1
    1ba4:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1ba8:	bl	378 <print_error_with_cursor>
    1bac:	mvn	r3, #0
    1bb0:	b	1bc4 <compare_records+0x59c>
    1bb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1bb8:	add	r3, r3, #1
    1bbc:	str	r3, [fp, #-28]	; 0xffffffe4
    1bc0:	b	1bc8 <compare_records+0x5a0>
    1bc4:	b	1be4 <compare_records+0x5bc>
    1bc8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1bd0:	cmp	r2, r3
    1bd4:	blt	1948 <compare_records+0x320>
    1bd8:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    1bdc:	bl	0 <coda_cursor_goto_parent>
    1be0:	mov	r3, #0
    1be4:	mov	r0, r3
    1be8:	sub	sp, fp, #4
    1bec:	ldr	fp, [sp]
    1bf0:	add	sp, sp, #4
    1bf4:	pop	{pc}		; (ldr pc, [sp], #4)

00001bf8 <compare_numbers>:
    1bf8:	str	r4, [sp, #-12]!
    1bfc:	str	fp, [sp, #4]
    1c00:	str	lr, [sp, #8]
    1c04:	add	fp, sp, #8
    1c08:	sub	sp, sp, #116	; 0x74
    1c0c:	str	r0, [fp, #-120]	; 0xffffff88
    1c10:	str	r1, [fp, #-124]	; 0xffffff84
    1c14:	sub	r3, fp, #16
    1c18:	mov	r1, r3
    1c1c:	ldr	r0, [fp, #-120]	; 0xffffff88
    1c20:	bl	0 <coda_cursor_get_read_type>
    1c24:	mov	r3, r0
    1c28:	cmp	r3, #0
    1c2c:	beq	1c44 <compare_numbers+0x4c>
    1c30:	mov	r1, #1
    1c34:	ldr	r0, [fp, #-120]	; 0xffffff88
    1c38:	bl	378 <print_error_with_cursor>
    1c3c:	mvn	r3, #0
    1c40:	b	21c8 <compare_numbers+0x5d0>
    1c44:	sub	r3, fp, #20
    1c48:	mov	r1, r3
    1c4c:	ldr	r0, [fp, #-124]	; 0xffffff84
    1c50:	bl	0 <coda_cursor_get_read_type>
    1c54:	mov	r3, r0
    1c58:	cmp	r3, #0
    1c5c:	beq	1c74 <compare_numbers+0x7c>
    1c60:	mov	r1, #2
    1c64:	ldr	r0, [fp, #-124]	; 0xffffff84
    1c68:	bl	378 <print_error_with_cursor>
    1c6c:	mvn	r3, #0
    1c70:	b	21c8 <compare_numbers+0x5d0>
    1c74:	ldr	r2, [fp, #-16]
    1c78:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c7c:	cmp	r2, r3
    1c80:	beq	1d24 <compare_numbers+0x12c>
    1c84:	movw	r0, #0
    1c88:	movt	r0, #0
    1c8c:	bl	0 <printf>
    1c90:	movw	r1, #0
    1c94:	movt	r1, #0
    1c98:	ldr	r0, [fp, #-120]	; 0xffffff88
    1c9c:	bl	0 <coda_cursor_print_path>
    1ca0:	mov	r0, #10
    1ca4:	bl	0 <putchar>
    1ca8:	movw	r3, #0
    1cac:	movt	r3, #0
    1cb0:	ldr	r3, [r3]
    1cb4:	cmp	r3, #0
    1cb8:	beq	1d1c <compare_numbers+0x124>
    1cbc:	movw	r3, #0
    1cc0:	movt	r3, #0
    1cc4:	ldr	r4, [r3]
    1cc8:	ldr	r3, [fp, #-16]
    1ccc:	mov	r0, r3
    1cd0:	bl	0 <coda_type_get_native_type_name>
    1cd4:	mov	r3, r0
    1cd8:	mov	r2, r3
    1cdc:	mov	r1, r4
    1ce0:	movw	r0, #0
    1ce4:	movt	r0, #0
    1ce8:	bl	0 <printf>
    1cec:	movw	r3, #0
    1cf0:	movt	r3, #0
    1cf4:	ldr	r4, [r3, #4]
    1cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
    1cfc:	mov	r0, r3
    1d00:	bl	0 <coda_type_get_native_type_name>
    1d04:	mov	r3, r0
    1d08:	mov	r2, r3
    1d0c:	mov	r1, r4
    1d10:	movw	r0, #0
    1d14:	movt	r0, #0
    1d18:	bl	0 <printf>
    1d1c:	mov	r3, #0
    1d20:	b	21c8 <compare_numbers+0x5d0>
    1d24:	ldr	r3, [fp, #-16]
    1d28:	cmp	r3, #9
    1d2c:	ldrls	pc, [pc, r3, lsl #2]
    1d30:	b	2190 <compare_numbers+0x598>
    1d34:	.word	0x00001d5c
    1d38:	.word	0x00001ec0
    1d3c:	.word	0x00001d5c
    1d40:	.word	0x00001ec0
    1d44:	.word	0x00001d5c
    1d48:	.word	0x00001ec0
    1d4c:	.word	0x00001d5c
    1d50:	.word	0x00001ec0
    1d54:	.word	0x00002024
    1d58:	.word	0x00002024
    1d5c:	sub	r3, fp, #28
    1d60:	mov	r1, r3
    1d64:	ldr	r0, [fp, #-120]	; 0xffffff88
    1d68:	bl	0 <coda_cursor_read_int64>
    1d6c:	mov	r3, r0
    1d70:	cmp	r3, #0
    1d74:	beq	1db4 <compare_numbers+0x1bc>
    1d78:	mov	r1, #1
    1d7c:	ldr	r0, [fp, #-120]	; 0xffffff88
    1d80:	bl	378 <print_error_with_cursor>
    1d84:	bl	0 <coda_get_errno>
    1d88:	mov	r3, r0
    1d8c:	ldr	r3, [r3]
    1d90:	cmn	r3, #300	; 0x12c
    1d94:	beq	21b0 <compare_numbers+0x5b8>
    1d98:	bl	0 <coda_get_errno>
    1d9c:	mov	r3, r0
    1da0:	ldr	r3, [r3]
    1da4:	cmn	r3, #103	; 0x67
    1da8:	beq	21b0 <compare_numbers+0x5b8>
    1dac:	mvn	r3, #0
    1db0:	b	21c8 <compare_numbers+0x5d0>
    1db4:	sub	r3, fp, #36	; 0x24
    1db8:	mov	r1, r3
    1dbc:	ldr	r0, [fp, #-124]	; 0xffffff84
    1dc0:	bl	0 <coda_cursor_read_int64>
    1dc4:	mov	r3, r0
    1dc8:	cmp	r3, #0
    1dcc:	beq	1e0c <compare_numbers+0x214>
    1dd0:	mov	r1, #2
    1dd4:	ldr	r0, [fp, #-124]	; 0xffffff84
    1dd8:	bl	378 <print_error_with_cursor>
    1ddc:	bl	0 <coda_get_errno>
    1de0:	mov	r3, r0
    1de4:	ldr	r3, [r3]
    1de8:	cmn	r3, #300	; 0x12c
    1dec:	beq	21b0 <compare_numbers+0x5b8>
    1df0:	bl	0 <coda_get_errno>
    1df4:	mov	r3, r0
    1df8:	ldr	r3, [r3]
    1dfc:	cmn	r3, #103	; 0x67
    1e00:	beq	21b0 <compare_numbers+0x5b8>
    1e04:	mvn	r3, #0
    1e08:	b	21c8 <compare_numbers+0x5d0>
    1e0c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    1e10:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1e14:	cmp	r1, r3
    1e18:	cmpeq	r0, r2
    1e1c:	beq	21b0 <compare_numbers+0x5b8>
    1e20:	movw	r0, #0
    1e24:	movt	r0, #0
    1e28:	bl	0 <printf>
    1e2c:	movw	r1, #0
    1e30:	movt	r1, #0
    1e34:	ldr	r0, [fp, #-120]	; 0xffffff88
    1e38:	bl	0 <coda_cursor_print_path>
    1e3c:	mov	r0, #10
    1e40:	bl	0 <putchar>
    1e44:	movw	r3, #0
    1e48:	movt	r3, #0
    1e4c:	ldr	r3, [r3]
    1e50:	cmp	r3, #0
    1e54:	beq	1eb8 <compare_numbers+0x2c0>
    1e58:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    1e5c:	sub	r3, fp, #60	; 0x3c
    1e60:	mov	r2, r3
    1e64:	bl	0 <coda_str64>
    1e68:	movw	r3, #0
    1e6c:	movt	r3, #0
    1e70:	ldr	r3, [r3]
    1e74:	sub	r2, fp, #60	; 0x3c
    1e78:	mov	r1, r3
    1e7c:	movw	r0, #0
    1e80:	movt	r0, #0
    1e84:	bl	0 <printf>
    1e88:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1e8c:	sub	r3, fp, #60	; 0x3c
    1e90:	mov	r2, r3
    1e94:	bl	0 <coda_str64>
    1e98:	movw	r3, #0
    1e9c:	movt	r3, #0
    1ea0:	ldr	r3, [r3, #4]
    1ea4:	sub	r2, fp, #60	; 0x3c
    1ea8:	mov	r1, r3
    1eac:	movw	r0, #0
    1eb0:	movt	r0, #0
    1eb4:	bl	0 <printf>
    1eb8:	mov	r3, #0
    1ebc:	b	21c8 <compare_numbers+0x5d0>
    1ec0:	sub	r3, fp, #68	; 0x44
    1ec4:	mov	r1, r3
    1ec8:	ldr	r0, [fp, #-120]	; 0xffffff88
    1ecc:	bl	0 <coda_cursor_read_uint64>
    1ed0:	mov	r3, r0
    1ed4:	cmp	r3, #0
    1ed8:	beq	1f18 <compare_numbers+0x320>
    1edc:	mov	r1, #1
    1ee0:	ldr	r0, [fp, #-120]	; 0xffffff88
    1ee4:	bl	378 <print_error_with_cursor>
    1ee8:	bl	0 <coda_get_errno>
    1eec:	mov	r3, r0
    1ef0:	ldr	r3, [r3]
    1ef4:	cmn	r3, #300	; 0x12c
    1ef8:	beq	21b8 <compare_numbers+0x5c0>
    1efc:	bl	0 <coda_get_errno>
    1f00:	mov	r3, r0
    1f04:	ldr	r3, [r3]
    1f08:	cmn	r3, #103	; 0x67
    1f0c:	beq	21b8 <compare_numbers+0x5c0>
    1f10:	mvn	r3, #0
    1f14:	b	21c8 <compare_numbers+0x5d0>
    1f18:	sub	r3, fp, #76	; 0x4c
    1f1c:	mov	r1, r3
    1f20:	ldr	r0, [fp, #-124]	; 0xffffff84
    1f24:	bl	0 <coda_cursor_read_uint64>
    1f28:	mov	r3, r0
    1f2c:	cmp	r3, #0
    1f30:	beq	1f70 <compare_numbers+0x378>
    1f34:	mov	r1, #2
    1f38:	ldr	r0, [fp, #-124]	; 0xffffff84
    1f3c:	bl	378 <print_error_with_cursor>
    1f40:	bl	0 <coda_get_errno>
    1f44:	mov	r3, r0
    1f48:	ldr	r3, [r3]
    1f4c:	cmn	r3, #300	; 0x12c
    1f50:	beq	21b8 <compare_numbers+0x5c0>
    1f54:	bl	0 <coda_get_errno>
    1f58:	mov	r3, r0
    1f5c:	ldr	r3, [r3]
    1f60:	cmn	r3, #103	; 0x67
    1f64:	beq	21b8 <compare_numbers+0x5c0>
    1f68:	mvn	r3, #0
    1f6c:	b	21c8 <compare_numbers+0x5d0>
    1f70:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    1f74:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    1f78:	cmp	r1, r3
    1f7c:	cmpeq	r0, r2
    1f80:	beq	21b8 <compare_numbers+0x5c0>
    1f84:	movw	r0, #0
    1f88:	movt	r0, #0
    1f8c:	bl	0 <printf>
    1f90:	movw	r1, #0
    1f94:	movt	r1, #0
    1f98:	ldr	r0, [fp, #-120]	; 0xffffff88
    1f9c:	bl	0 <coda_cursor_print_path>
    1fa0:	mov	r0, #10
    1fa4:	bl	0 <putchar>
    1fa8:	movw	r3, #0
    1fac:	movt	r3, #0
    1fb0:	ldr	r3, [r3]
    1fb4:	cmp	r3, #0
    1fb8:	beq	201c <compare_numbers+0x424>
    1fbc:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    1fc0:	sub	r3, fp, #100	; 0x64
    1fc4:	mov	r2, r3
    1fc8:	bl	0 <coda_str64u>
    1fcc:	movw	r3, #0
    1fd0:	movt	r3, #0
    1fd4:	ldr	r3, [r3]
    1fd8:	sub	r2, fp, #100	; 0x64
    1fdc:	mov	r1, r3
    1fe0:	movw	r0, #0
    1fe4:	movt	r0, #0
    1fe8:	bl	0 <printf>
    1fec:	ldrd	r0, [fp, #-76]	; 0xffffffb4
    1ff0:	sub	r3, fp, #100	; 0x64
    1ff4:	mov	r2, r3
    1ff8:	bl	0 <coda_str64u>
    1ffc:	movw	r3, #0
    2000:	movt	r3, #0
    2004:	ldr	r3, [r3, #4]
    2008:	sub	r2, fp, #100	; 0x64
    200c:	mov	r1, r3
    2010:	movw	r0, #0
    2014:	movt	r0, #0
    2018:	bl	0 <printf>
    201c:	mov	r3, #0
    2020:	b	21c8 <compare_numbers+0x5d0>
    2024:	sub	r3, fp, #108	; 0x6c
    2028:	mov	r1, r3
    202c:	ldr	r0, [fp, #-120]	; 0xffffff88
    2030:	bl	0 <coda_cursor_read_double>
    2034:	mov	r3, r0
    2038:	cmp	r3, #0
    203c:	beq	207c <compare_numbers+0x484>
    2040:	mov	r1, #1
    2044:	ldr	r0, [fp, #-120]	; 0xffffff88
    2048:	bl	378 <print_error_with_cursor>
    204c:	bl	0 <coda_get_errno>
    2050:	mov	r3, r0
    2054:	ldr	r3, [r3]
    2058:	cmn	r3, #300	; 0x12c
    205c:	beq	21c0 <compare_numbers+0x5c8>
    2060:	bl	0 <coda_get_errno>
    2064:	mov	r3, r0
    2068:	ldr	r3, [r3]
    206c:	cmn	r3, #103	; 0x67
    2070:	beq	21c0 <compare_numbers+0x5c8>
    2074:	mvn	r3, #0
    2078:	b	21c8 <compare_numbers+0x5d0>
    207c:	sub	r3, fp, #116	; 0x74
    2080:	mov	r1, r3
    2084:	ldr	r0, [fp, #-124]	; 0xffffff84
    2088:	bl	0 <coda_cursor_read_double>
    208c:	mov	r3, r0
    2090:	cmp	r3, #0
    2094:	beq	20d4 <compare_numbers+0x4dc>
    2098:	mov	r1, #2
    209c:	ldr	r0, [fp, #-124]	; 0xffffff84
    20a0:	bl	378 <print_error_with_cursor>
    20a4:	bl	0 <coda_get_errno>
    20a8:	mov	r3, r0
    20ac:	ldr	r3, [r3]
    20b0:	cmn	r3, #300	; 0x12c
    20b4:	beq	21c0 <compare_numbers+0x5c8>
    20b8:	bl	0 <coda_get_errno>
    20bc:	mov	r3, r0
    20c0:	ldr	r3, [r3]
    20c4:	cmn	r3, #103	; 0x67
    20c8:	beq	21c0 <compare_numbers+0x5c8>
    20cc:	mvn	r3, #0
    20d0:	b	21c8 <compare_numbers+0x5d0>
    20d4:	vldr	d6, [fp, #-108]	; 0xffffff94
    20d8:	vldr	d7, [fp, #-116]	; 0xffffff8c
    20dc:	vcmp.f64	d6, d7
    20e0:	vmrs	APSR_nzcv, fpscr
    20e4:	beq	21c0 <compare_numbers+0x5c8>
    20e8:	vldr	d7, [fp, #-108]	; 0xffffff94
    20ec:	vmov.f64	d0, d7
    20f0:	bl	0 <coda_isNaN>
    20f4:	mov	r3, r0
    20f8:	cmp	r3, #0
    20fc:	beq	2118 <compare_numbers+0x520>
    2100:	vldr	d7, [fp, #-116]	; 0xffffff8c
    2104:	vmov.f64	d0, d7
    2108:	bl	0 <coda_isNaN>
    210c:	mov	r3, r0
    2110:	cmp	r3, #0
    2114:	bne	21c0 <compare_numbers+0x5c8>
    2118:	movw	r0, #0
    211c:	movt	r0, #0
    2120:	bl	0 <printf>
    2124:	movw	r1, #0
    2128:	movt	r1, #0
    212c:	ldr	r0, [fp, #-120]	; 0xffffff88
    2130:	bl	0 <coda_cursor_print_path>
    2134:	mov	r0, #10
    2138:	bl	0 <putchar>
    213c:	movw	r3, #0
    2140:	movt	r3, #0
    2144:	ldr	r3, [r3]
    2148:	cmp	r3, #0
    214c:	beq	2188 <compare_numbers+0x590>
    2150:	movw	r3, #0
    2154:	movt	r3, #0
    2158:	ldr	r1, [r3]
    215c:	ldrd	r2, [fp, #-108]	; 0xffffff94
    2160:	movw	r0, #0
    2164:	movt	r0, #0
    2168:	bl	0 <printf>
    216c:	movw	r3, #0
    2170:	movt	r3, #0
    2174:	ldr	r1, [r3, #4]
    2178:	ldrd	r2, [fp, #-116]	; 0xffffff8c
    217c:	movw	r0, #0
    2180:	movt	r0, #0
    2184:	bl	0 <printf>
    2188:	mov	r3, #0
    218c:	b	21c8 <compare_numbers+0x5d0>
    2190:	movw	r3, #0
    2194:	movt	r3, #0
    2198:	movw	r2, #950	; 0x3b6
    219c:	movw	r1, #0
    21a0:	movt	r1, #0
    21a4:	movw	r0, #0
    21a8:	movt	r0, #0
    21ac:	bl	0 <__assert_fail>
    21b0:	nop	{0}
    21b4:	b	21c4 <compare_numbers+0x5cc>
    21b8:	nop	{0}
    21bc:	b	21c4 <compare_numbers+0x5cc>
    21c0:	nop	{0}
    21c4:	mov	r3, #0
    21c8:	mov	r0, r3
    21cc:	sub	sp, fp, #8
    21d0:	ldr	r4, [sp]
    21d4:	ldr	fp, [sp, #4]
    21d8:	add	sp, sp, #8
    21dc:	pop	{pc}		; (ldr pc, [sp], #4)

000021e0 <compare_strings>:
    21e0:	str	fp, [sp, #-8]!
    21e4:	str	lr, [sp, #4]
    21e8:	add	fp, sp, #4
    21ec:	sub	sp, sp, #32
    21f0:	str	r0, [fp, #-24]	; 0xffffffe8
    21f4:	str	r1, [fp, #-28]	; 0xffffffe4
    21f8:	sub	r3, fp, #16
    21fc:	mov	r1, r3
    2200:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2204:	bl	0 <coda_cursor_get_string_length>
    2208:	mov	r3, r0
    220c:	cmp	r3, #0
    2210:	beq	2228 <compare_strings+0x48>
    2214:	mov	r1, #1
    2218:	ldr	r0, [fp, #-24]	; 0xffffffe8
    221c:	bl	378 <print_error_with_cursor>
    2220:	mvn	r3, #0
    2224:	b	24b4 <compare_strings+0x2d4>
    2228:	sub	r3, fp, #20
    222c:	mov	r1, r3
    2230:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2234:	bl	0 <coda_cursor_get_string_length>
    2238:	mov	r3, r0
    223c:	cmp	r3, #0
    2240:	beq	2258 <compare_strings+0x78>
    2244:	mov	r1, #2
    2248:	ldr	r0, [fp, #-28]	; 0xffffffe4
    224c:	bl	378 <print_error_with_cursor>
    2250:	mvn	r3, #0
    2254:	b	24b4 <compare_strings+0x2d4>
    2258:	ldr	r3, [fp, #-16]
    225c:	add	r3, r3, #1
    2260:	mov	r0, r3
    2264:	bl	0 <malloc>
    2268:	mov	r3, r0
    226c:	str	r3, [fp, #-8]
    2270:	ldr	r3, [fp, #-8]
    2274:	cmp	r3, #0
    2278:	bne	22b4 <compare_strings+0xd4>
    227c:	ldr	r2, [fp, #-16]
    2280:	movw	r3, #978	; 0x3d2
    2284:	str	r3, [sp]
    2288:	movw	r3, #0
    228c:	movt	r3, #0
    2290:	movw	r1, #0
    2294:	movt	r1, #0
    2298:	mvn	r0, #0
    229c:	bl	0 <coda_set_error>
    22a0:	mov	r1, #1
    22a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    22a8:	bl	378 <print_error_with_cursor>
    22ac:	mvn	r3, #0
    22b0:	b	24b4 <compare_strings+0x2d4>
    22b4:	ldr	r3, [fp, #-20]	; 0xffffffec
    22b8:	add	r3, r3, #1
    22bc:	mov	r0, r3
    22c0:	bl	0 <malloc>
    22c4:	mov	r3, r0
    22c8:	str	r3, [fp, #-12]
    22cc:	ldr	r3, [fp, #-12]
    22d0:	cmp	r3, #0
    22d4:	bne	2318 <compare_strings+0x138>
    22d8:	ldr	r2, [fp, #-20]	; 0xffffffec
    22dc:	movw	r3, #986	; 0x3da
    22e0:	str	r3, [sp]
    22e4:	movw	r3, #0
    22e8:	movt	r3, #0
    22ec:	movw	r1, #0
    22f0:	movt	r1, #0
    22f4:	mvn	r0, #0
    22f8:	bl	0 <coda_set_error>
    22fc:	mov	r1, #2
    2300:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2304:	bl	378 <print_error_with_cursor>
    2308:	ldr	r0, [fp, #-8]
    230c:	bl	0 <free>
    2310:	mvn	r3, #0
    2314:	b	24b4 <compare_strings+0x2d4>
    2318:	ldr	r3, [fp, #-16]
    231c:	add	r3, r3, #1
    2320:	mov	r2, r3
    2324:	ldr	r1, [fp, #-8]
    2328:	ldr	r0, [fp, #-24]	; 0xffffffe8
    232c:	bl	0 <coda_cursor_read_string>
    2330:	mov	r3, r0
    2334:	cmp	r3, #0
    2338:	beq	2388 <compare_strings+0x1a8>
    233c:	mov	r1, #1
    2340:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2344:	bl	378 <print_error_with_cursor>
    2348:	bl	0 <coda_get_errno>
    234c:	mov	r3, r0
    2350:	ldr	r3, [r3]
    2354:	cmn	r3, #300	; 0x12c
    2358:	beq	24a0 <compare_strings+0x2c0>
    235c:	bl	0 <coda_get_errno>
    2360:	mov	r3, r0
    2364:	ldr	r3, [r3]
    2368:	cmn	r3, #103	; 0x67
    236c:	beq	24a0 <compare_strings+0x2c0>
    2370:	ldr	r0, [fp, #-8]
    2374:	bl	0 <free>
    2378:	ldr	r0, [fp, #-12]
    237c:	bl	0 <free>
    2380:	mvn	r3, #0
    2384:	b	24b4 <compare_strings+0x2d4>
    2388:	ldr	r3, [fp, #-20]	; 0xffffffec
    238c:	add	r3, r3, #1
    2390:	mov	r2, r3
    2394:	ldr	r1, [fp, #-12]
    2398:	ldr	r0, [fp, #-28]	; 0xffffffe4
    239c:	bl	0 <coda_cursor_read_string>
    23a0:	mov	r3, r0
    23a4:	cmp	r3, #0
    23a8:	beq	23f8 <compare_strings+0x218>
    23ac:	mov	r1, #2
    23b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    23b4:	bl	378 <print_error_with_cursor>
    23b8:	bl	0 <coda_get_errno>
    23bc:	mov	r3, r0
    23c0:	ldr	r3, [r3]
    23c4:	cmn	r3, #300	; 0x12c
    23c8:	beq	24a0 <compare_strings+0x2c0>
    23cc:	bl	0 <coda_get_errno>
    23d0:	mov	r3, r0
    23d4:	ldr	r3, [r3]
    23d8:	cmn	r3, #103	; 0x67
    23dc:	beq	24a0 <compare_strings+0x2c0>
    23e0:	ldr	r0, [fp, #-8]
    23e4:	bl	0 <free>
    23e8:	ldr	r0, [fp, #-12]
    23ec:	bl	0 <free>
    23f0:	mvn	r3, #0
    23f4:	b	24b4 <compare_strings+0x2d4>
    23f8:	ldr	r2, [fp, #-16]
    23fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    2400:	cmp	r2, r3
    2404:	bne	2428 <compare_strings+0x248>
    2408:	ldr	r3, [fp, #-16]
    240c:	mov	r2, r3
    2410:	ldr	r1, [fp, #-12]
    2414:	ldr	r0, [fp, #-8]
    2418:	bl	0 <memcmp>
    241c:	mov	r3, r0
    2420:	cmp	r3, #0
    2424:	beq	24a0 <compare_strings+0x2c0>
    2428:	movw	r0, #0
    242c:	movt	r0, #0
    2430:	bl	0 <printf>
    2434:	movw	r1, #0
    2438:	movt	r1, #0
    243c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2440:	bl	0 <coda_cursor_print_path>
    2444:	mov	r0, #10
    2448:	bl	0 <putchar>
    244c:	movw	r3, #0
    2450:	movt	r3, #0
    2454:	ldr	r3, [r3]
    2458:	cmp	r3, #0
    245c:	beq	24a0 <compare_strings+0x2c0>
    2460:	movw	r3, #0
    2464:	movt	r3, #0
    2468:	ldr	r3, [r3]
    246c:	ldr	r2, [fp, #-8]
    2470:	mov	r1, r3
    2474:	movw	r0, #0
    2478:	movt	r0, #0
    247c:	bl	0 <printf>
    2480:	movw	r3, #0
    2484:	movt	r3, #0
    2488:	ldr	r3, [r3, #4]
    248c:	ldr	r2, [fp, #-12]
    2490:	mov	r1, r3
    2494:	movw	r0, #0
    2498:	movt	r0, #0
    249c:	bl	0 <printf>
    24a0:	ldr	r0, [fp, #-8]
    24a4:	bl	0 <free>
    24a8:	ldr	r0, [fp, #-12]
    24ac:	bl	0 <free>
    24b0:	mov	r3, #0
    24b4:	mov	r0, r3
    24b8:	sub	sp, fp, #4
    24bc:	ldr	fp, [sp]
    24c0:	add	sp, sp, #4
    24c4:	pop	{pc}		; (ldr pc, [sp], #4)

000024c8 <compare_bytes>:
    24c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
    24cc:	strd	r6, [sp, #8]
    24d0:	strd	r8, [sp, #16]
    24d4:	str	fp, [sp, #24]
    24d8:	str	lr, [sp, #28]
    24dc:	add	fp, sp, #28
    24e0:	sub	sp, sp, #104	; 0x68
    24e4:	str	r0, [fp, #-96]	; 0xffffffa0
    24e8:	str	r1, [fp, #-100]	; 0xffffff9c
    24ec:	sub	r3, fp, #60	; 0x3c
    24f0:	mov	r1, r3
    24f4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    24f8:	bl	0 <coda_cursor_get_bit_size>
    24fc:	mov	r3, r0
    2500:	cmp	r3, #0
    2504:	beq	251c <compare_bytes+0x54>
    2508:	mov	r1, #1
    250c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    2510:	bl	378 <print_error_with_cursor>
    2514:	mvn	r3, #0
    2518:	b	296c <compare_bytes+0x4a4>
    251c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    2520:	mov	r2, #0
    2524:	mov	r3, #0
    2528:	lsr	r2, r0, #3
    252c:	orr	r2, r2, r1, lsl #29
    2530:	asr	r3, r1, #3
    2534:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    2538:	strd	r0, [fp, #-108]	; 0xffffff94
    253c:	mov	r0, #7
    2540:	mov	r1, #0
    2544:	strd	r0, [fp, #-124]	; 0xffffff84
    2548:	mov	r1, r0
    254c:	ldr	ip, [fp, #-108]	; 0xffffff94
    2550:	and	r1, r1, ip
    2554:	str	r1, [fp, #-116]	; 0xffffff8c
    2558:	ldr	r1, [fp, #-120]	; 0xffffff88
    255c:	ldr	r0, [fp, #-104]	; 0xffffff98
    2560:	and	r0, r0, r1
    2564:	mov	r1, r0
    2568:	str	r1, [fp, #-112]	; 0xffffff90
    256c:	ldrd	r0, [fp, #-116]	; 0xffffff8c
    2570:	orrs	r1, r0, r1
    2574:	beq	2584 <compare_bytes+0xbc>
    2578:	mov	r0, #1
    257c:	mov	r1, #0
    2580:	b	258c <compare_bytes+0xc4>
    2584:	mov	r0, #0
    2588:	mov	r1, #0
    258c:	adds	r4, r0, r2
    2590:	adc	r5, r1, r3
    2594:	strd	r4, [fp, #-36]	; 0xffffffdc
    2598:	sub	r3, fp, #68	; 0x44
    259c:	mov	r1, r3
    25a0:	ldr	r0, [fp, #-100]	; 0xffffff9c
    25a4:	bl	0 <coda_cursor_get_bit_size>
    25a8:	mov	r3, r0
    25ac:	cmp	r3, #0
    25b0:	beq	25c8 <compare_bytes+0x100>
    25b4:	mov	r1, #2
    25b8:	ldr	r0, [fp, #-100]	; 0xffffff9c
    25bc:	bl	378 <print_error_with_cursor>
    25c0:	mvn	r3, #0
    25c4:	b	296c <compare_bytes+0x4a4>
    25c8:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    25cc:	mov	r2, #0
    25d0:	mov	r3, #0
    25d4:	lsr	r2, r0, #3
    25d8:	orr	r2, r2, r1, lsl #29
    25dc:	asr	r3, r1, #3
    25e0:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    25e4:	mov	r4, #7
    25e8:	mov	r5, #0
    25ec:	and	r8, r0, r4
    25f0:	and	r9, r1, r5
    25f4:	orrs	r1, r8, r9
    25f8:	beq	2608 <compare_bytes+0x140>
    25fc:	mov	r0, #1
    2600:	mov	r1, #0
    2604:	b	2610 <compare_bytes+0x148>
    2608:	mov	r0, #0
    260c:	mov	r1, #0
    2610:	adds	r6, r0, r2
    2614:	adc	r7, r1, r3
    2618:	strd	r6, [fp, #-44]	; 0xffffffd4
    261c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    2620:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2624:	cmp	r1, r3
    2628:	cmpeq	r0, r2
    262c:	beq	26d0 <compare_bytes+0x208>
    2630:	movw	r0, #0
    2634:	movt	r0, #0
    2638:	bl	0 <printf>
    263c:	movw	r1, #0
    2640:	movt	r1, #0
    2644:	ldr	r0, [fp, #-96]	; 0xffffffa0
    2648:	bl	0 <coda_cursor_print_path>
    264c:	mov	r0, #10
    2650:	bl	0 <putchar>
    2654:	movw	r3, #0
    2658:	movt	r3, #0
    265c:	ldr	r3, [r3]
    2660:	cmp	r3, #0
    2664:	beq	26c8 <compare_bytes+0x200>
    2668:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    266c:	sub	r3, fp, #92	; 0x5c
    2670:	mov	r2, r3
    2674:	bl	0 <coda_str64>
    2678:	movw	r3, #0
    267c:	movt	r3, #0
    2680:	ldr	r3, [r3]
    2684:	sub	r2, fp, #92	; 0x5c
    2688:	mov	r1, r3
    268c:	movw	r0, #0
    2690:	movt	r0, #0
    2694:	bl	0 <printf>
    2698:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    269c:	sub	r3, fp, #92	; 0x5c
    26a0:	mov	r2, r3
    26a4:	bl	0 <coda_str64>
    26a8:	movw	r3, #0
    26ac:	movt	r3, #0
    26b0:	ldr	r3, [r3, #4]
    26b4:	sub	r2, fp, #92	; 0x5c
    26b8:	mov	r1, r3
    26bc:	movw	r0, #0
    26c0:	movt	r0, #0
    26c4:	bl	0 <printf>
    26c8:	mov	r3, #0
    26cc:	b	296c <compare_bytes+0x4a4>
    26d0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    26d4:	cmp	r2, #1
    26d8:	sbcs	r3, r3, #0
    26dc:	blt	2968 <compare_bytes+0x4a0>
    26e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    26e4:	mov	r0, r3
    26e8:	bl	0 <malloc>
    26ec:	mov	r3, r0
    26f0:	str	r3, [fp, #-48]	; 0xffffffd0
    26f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    26f8:	cmp	r3, #0
    26fc:	bne	2738 <compare_bytes+0x270>
    2700:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2704:	mov	r3, #1072	; 0x430
    2708:	str	r3, [sp]
    270c:	movw	r3, #0
    2710:	movt	r3, #0
    2714:	movw	r1, #0
    2718:	movt	r1, #0
    271c:	mvn	r0, #0
    2720:	bl	0 <coda_set_error>
    2724:	mov	r1, #1
    2728:	ldr	r0, [fp, #-96]	; 0xffffffa0
    272c:	bl	378 <print_error_with_cursor>
    2730:	mvn	r3, #0
    2734:	b	296c <compare_bytes+0x4a4>
    2738:	ldr	r3, [fp, #-44]	; 0xffffffd4
    273c:	mov	r0, r3
    2740:	bl	0 <malloc>
    2744:	mov	r3, r0
    2748:	str	r3, [fp, #-52]	; 0xffffffcc
    274c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2750:	cmp	r3, #0
    2754:	bne	2798 <compare_bytes+0x2d0>
    2758:	ldr	r2, [fp, #-44]	; 0xffffffd4
    275c:	movw	r3, #1080	; 0x438
    2760:	str	r3, [sp]
    2764:	movw	r3, #0
    2768:	movt	r3, #0
    276c:	movw	r1, #0
    2770:	movt	r1, #0
    2774:	mvn	r0, #0
    2778:	bl	0 <coda_set_error>
    277c:	mov	r1, #2
    2780:	ldr	r0, [fp, #-100]	; 0xffffff9c
    2784:	bl	378 <print_error_with_cursor>
    2788:	ldr	r0, [fp, #-48]	; 0xffffffd0
    278c:	bl	0 <free>
    2790:	mvn	r3, #0
    2794:	b	296c <compare_bytes+0x4a4>
    2798:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    279c:	strd	r2, [sp]
    27a0:	mov	r2, #0
    27a4:	mov	r3, #0
    27a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    27ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
    27b0:	bl	0 <coda_cursor_read_bits>
    27b4:	mov	r3, r0
    27b8:	cmp	r3, #0
    27bc:	beq	280c <compare_bytes+0x344>
    27c0:	mov	r1, #1
    27c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    27c8:	bl	378 <print_error_with_cursor>
    27cc:	bl	0 <coda_get_errno>
    27d0:	mov	r3, r0
    27d4:	ldr	r3, [r3]
    27d8:	cmn	r3, #300	; 0x12c
    27dc:	beq	2958 <compare_bytes+0x490>
    27e0:	bl	0 <coda_get_errno>
    27e4:	mov	r3, r0
    27e8:	ldr	r3, [r3]
    27ec:	cmn	r3, #103	; 0x67
    27f0:	beq	2958 <compare_bytes+0x490>
    27f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    27f8:	bl	0 <free>
    27fc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2800:	bl	0 <free>
    2804:	mvn	r3, #0
    2808:	b	296c <compare_bytes+0x4a4>
    280c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2810:	strd	r2, [sp]
    2814:	mov	r2, #0
    2818:	mov	r3, #0
    281c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    2820:	ldr	r0, [fp, #-100]	; 0xffffff9c
    2824:	bl	0 <coda_cursor_read_bits>
    2828:	mov	r3, r0
    282c:	cmp	r3, #0
    2830:	beq	2880 <compare_bytes+0x3b8>
    2834:	mov	r1, #2
    2838:	ldr	r0, [fp, #-100]	; 0xffffff9c
    283c:	bl	378 <print_error_with_cursor>
    2840:	bl	0 <coda_get_errno>
    2844:	mov	r3, r0
    2848:	ldr	r3, [r3]
    284c:	cmn	r3, #300	; 0x12c
    2850:	beq	2958 <compare_bytes+0x490>
    2854:	bl	0 <coda_get_errno>
    2858:	mov	r3, r0
    285c:	ldr	r3, [r3]
    2860:	cmn	r3, #103	; 0x67
    2864:	beq	2958 <compare_bytes+0x490>
    2868:	ldr	r0, [fp, #-48]	; 0xffffffd0
    286c:	bl	0 <free>
    2870:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2874:	bl	0 <free>
    2878:	mvn	r3, #0
    287c:	b	296c <compare_bytes+0x4a4>
    2880:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2884:	mov	r2, r3
    2888:	ldr	r1, [fp, #-52]	; 0xffffffcc
    288c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2890:	bl	0 <memcmp>
    2894:	mov	r3, r0
    2898:	cmp	r3, #0
    289c:	beq	2958 <compare_bytes+0x490>
    28a0:	movw	r0, #0
    28a4:	movt	r0, #0
    28a8:	bl	0 <printf>
    28ac:	movw	r1, #0
    28b0:	movt	r1, #0
    28b4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    28b8:	bl	0 <coda_cursor_print_path>
    28bc:	mov	r0, #10
    28c0:	bl	0 <putchar>
    28c4:	movw	r3, #0
    28c8:	movt	r3, #0
    28cc:	ldr	r3, [r3]
    28d0:	cmp	r3, #0
    28d4:	beq	2958 <compare_bytes+0x490>
    28d8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    28dc:	mov	r0, #256	; 0x100
    28e0:	mov	r1, #0
    28e4:	cmp	r0, r2
    28e8:	sbcs	r3, r1, r3
    28ec:	blt	2958 <compare_bytes+0x490>
    28f0:	movw	r3, #0
    28f4:	movt	r3, #0
    28f8:	ldr	r3, [r3]
    28fc:	mov	r1, r3
    2900:	movw	r0, #0
    2904:	movt	r0, #0
    2908:	bl	0 <printf>
    290c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2910:	mov	r1, r3
    2914:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2918:	bl	200 <print_escaped>
    291c:	mov	r0, #10
    2920:	bl	0 <putchar>
    2924:	movw	r3, #0
    2928:	movt	r3, #0
    292c:	ldr	r3, [r3, #4]
    2930:	mov	r1, r3
    2934:	movw	r0, #0
    2938:	movt	r0, #0
    293c:	bl	0 <printf>
    2940:	ldr	r3, [fp, #-44]	; 0xffffffd4
    2944:	mov	r1, r3
    2948:	ldr	r0, [fp, #-52]	; 0xffffffcc
    294c:	bl	200 <print_escaped>
    2950:	mov	r0, #10
    2954:	bl	0 <putchar>
    2958:	ldr	r0, [fp, #-48]	; 0xffffffd0
    295c:	bl	0 <free>
    2960:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2964:	bl	0 <free>
    2968:	mov	r3, #0
    296c:	mov	r0, r3
    2970:	sub	sp, fp, #28
    2974:	ldrd	r4, [sp]
    2978:	ldrd	r6, [sp, #8]
    297c:	ldrd	r8, [sp, #16]
    2980:	ldr	fp, [sp, #24]
    2984:	add	sp, sp, #28
    2988:	pop	{pc}		; (ldr pc, [sp], #4)

0000298c <compare_attributes>:
    298c:	str	fp, [sp, #-8]!
    2990:	str	lr, [sp, #4]
    2994:	add	fp, sp, #4
    2998:	sub	sp, sp, #16
    299c:	str	r0, [fp, #-16]
    29a0:	str	r1, [fp, #-20]	; 0xffffffec
    29a4:	sub	r3, fp, #8
    29a8:	mov	r1, r3
    29ac:	ldr	r0, [fp, #-16]
    29b0:	bl	0 <coda_cursor_has_attributes>
    29b4:	mov	r3, r0
    29b8:	cmp	r3, #0
    29bc:	beq	29d4 <compare_attributes+0x48>
    29c0:	mov	r1, #1
    29c4:	ldr	r0, [fp, #-16]
    29c8:	bl	378 <print_error_with_cursor>
    29cc:	mvn	r3, #0
    29d0:	b	2aa0 <compare_attributes+0x114>
    29d4:	sub	r3, fp, #12
    29d8:	mov	r1, r3
    29dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    29e0:	bl	0 <coda_cursor_has_attributes>
    29e4:	mov	r3, r0
    29e8:	cmp	r3, #0
    29ec:	beq	2a04 <compare_attributes+0x78>
    29f0:	mov	r1, #2
    29f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    29f8:	bl	378 <print_error_with_cursor>
    29fc:	mvn	r3, #0
    2a00:	b	2aa0 <compare_attributes+0x114>
    2a04:	ldr	r3, [fp, #-8]
    2a08:	cmp	r3, #0
    2a0c:	bne	2a1c <compare_attributes+0x90>
    2a10:	ldr	r3, [fp, #-12]
    2a14:	cmp	r3, #0
    2a18:	beq	2a9c <compare_attributes+0x110>
    2a1c:	ldr	r0, [fp, #-16]
    2a20:	bl	0 <coda_cursor_goto_attributes>
    2a24:	mov	r3, r0
    2a28:	cmp	r3, #0
    2a2c:	beq	2a44 <compare_attributes+0xb8>
    2a30:	mov	r1, #1
    2a34:	ldr	r0, [fp, #-16]
    2a38:	bl	378 <print_error_with_cursor>
    2a3c:	mvn	r3, #0
    2a40:	b	2aa0 <compare_attributes+0x114>
    2a44:	ldr	r0, [fp, #-20]	; 0xffffffec
    2a48:	bl	0 <coda_cursor_goto_attributes>
    2a4c:	mov	r3, r0
    2a50:	cmp	r3, #0
    2a54:	beq	2a6c <compare_attributes+0xe0>
    2a58:	mov	r1, #2
    2a5c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2a60:	bl	378 <print_error_with_cursor>
    2a64:	mvn	r3, #0
    2a68:	b	2aa0 <compare_attributes+0x114>
    2a6c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2a70:	ldr	r0, [fp, #-16]
    2a74:	bl	2ab4 <compare_data>
    2a78:	mov	r3, r0
    2a7c:	cmp	r3, #0
    2a80:	beq	2a8c <compare_attributes+0x100>
    2a84:	mvn	r3, #0
    2a88:	b	2aa0 <compare_attributes+0x114>
    2a8c:	ldr	r0, [fp, #-16]
    2a90:	bl	0 <coda_cursor_goto_parent>
    2a94:	ldr	r0, [fp, #-20]	; 0xffffffec
    2a98:	bl	0 <coda_cursor_goto_parent>
    2a9c:	mov	r3, #0
    2aa0:	mov	r0, r3
    2aa4:	sub	sp, fp, #4
    2aa8:	ldr	fp, [sp]
    2aac:	add	sp, sp, #4
    2ab0:	pop	{pc}		; (ldr pc, [sp], #4)

00002ab4 <compare_data>:
    2ab4:	str	r4, [sp, #-12]!
    2ab8:	str	fp, [sp, #4]
    2abc:	str	lr, [sp, #8]
    2ac0:	add	fp, sp, #8
    2ac4:	sub	sp, sp, #28
    2ac8:	str	r0, [fp, #-32]	; 0xffffffe0
    2acc:	str	r1, [fp, #-36]	; 0xffffffdc
    2ad0:	sub	r3, fp, #16
    2ad4:	mov	r1, r3
    2ad8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2adc:	bl	0 <coda_cursor_get_type_class>
    2ae0:	mov	r3, r0
    2ae4:	cmp	r3, #0
    2ae8:	beq	2b00 <compare_data+0x4c>
    2aec:	mov	r1, #1
    2af0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2af4:	bl	378 <print_error_with_cursor>
    2af8:	mvn	r3, #0
    2afc:	b	2e7c <compare_data+0x3c8>
    2b00:	sub	r3, fp, #20
    2b04:	mov	r1, r3
    2b08:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2b0c:	bl	0 <coda_cursor_get_type_class>
    2b10:	mov	r3, r0
    2b14:	cmp	r3, #0
    2b18:	beq	2b30 <compare_data+0x7c>
    2b1c:	mov	r1, #2
    2b20:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2b24:	bl	378 <print_error_with_cursor>
    2b28:	mvn	r3, #0
    2b2c:	b	2e7c <compare_data+0x3c8>
    2b30:	ldr	r2, [fp, #-16]
    2b34:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b38:	cmp	r2, r3
    2b3c:	beq	2be0 <compare_data+0x12c>
    2b40:	movw	r0, #0
    2b44:	movt	r0, #0
    2b48:	bl	0 <printf>
    2b4c:	movw	r1, #0
    2b50:	movt	r1, #0
    2b54:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2b58:	bl	0 <coda_cursor_print_path>
    2b5c:	mov	r0, #10
    2b60:	bl	0 <putchar>
    2b64:	movw	r3, #0
    2b68:	movt	r3, #0
    2b6c:	ldr	r3, [r3]
    2b70:	cmp	r3, #0
    2b74:	beq	2bd8 <compare_data+0x124>
    2b78:	movw	r3, #0
    2b7c:	movt	r3, #0
    2b80:	ldr	r4, [r3]
    2b84:	ldr	r3, [fp, #-16]
    2b88:	mov	r0, r3
    2b8c:	bl	0 <coda_type_get_class_name>
    2b90:	mov	r3, r0
    2b94:	mov	r2, r3
    2b98:	mov	r1, r4
    2b9c:	movw	r0, #0
    2ba0:	movt	r0, #0
    2ba4:	bl	0 <printf>
    2ba8:	movw	r3, #0
    2bac:	movt	r3, #0
    2bb0:	ldr	r4, [r3, #4]
    2bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
    2bb8:	mov	r0, r3
    2bbc:	bl	0 <coda_type_get_class_name>
    2bc0:	mov	r3, r0
    2bc4:	mov	r2, r3
    2bc8:	mov	r1, r4
    2bcc:	movw	r0, #0
    2bd0:	movt	r0, #0
    2bd4:	bl	0 <printf>
    2bd8:	mov	r3, #0
    2bdc:	b	2e7c <compare_data+0x3c8>
    2be0:	ldr	r3, [fp, #-16]
    2be4:	cmp	r3, #6
    2be8:	ldrls	pc, [pc, r3, lsl #2]
    2bec:	b	2e58 <compare_data+0x3a4>
    2bf0:	.word	0x00002c2c
    2bf4:	.word	0x00002c0c
    2bf8:	.word	0x00002c4c
    2bfc:	.word	0x00002c4c
    2c00:	.word	0x00002c6c
    2c04:	.word	0x00002c8c
    2c08:	.word	0x00002cac
    2c0c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2c10:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2c14:	bl	138c <compare_arrays>
    2c18:	mov	r3, r0
    2c1c:	cmp	r3, #0
    2c20:	beq	2e2c <compare_data+0x378>
    2c24:	mvn	r3, #0
    2c28:	b	2e7c <compare_data+0x3c8>
    2c2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2c30:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2c34:	bl	1628 <compare_records>
    2c38:	mov	r3, r0
    2c3c:	cmp	r3, #0
    2c40:	beq	2e34 <compare_data+0x380>
    2c44:	mvn	r3, #0
    2c48:	b	2e7c <compare_data+0x3c8>
    2c4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2c50:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2c54:	bl	1bf8 <compare_numbers>
    2c58:	mov	r3, r0
    2c5c:	cmp	r3, #0
    2c60:	beq	2e3c <compare_data+0x388>
    2c64:	mvn	r3, #0
    2c68:	b	2e7c <compare_data+0x3c8>
    2c6c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2c70:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2c74:	bl	21e0 <compare_strings>
    2c78:	mov	r3, r0
    2c7c:	cmp	r3, #0
    2c80:	beq	2e44 <compare_data+0x390>
    2c84:	mvn	r3, #0
    2c88:	b	2e7c <compare_data+0x3c8>
    2c8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2c90:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2c94:	bl	24c8 <compare_bytes>
    2c98:	mov	r3, r0
    2c9c:	cmp	r3, #0
    2ca0:	beq	2e4c <compare_data+0x398>
    2ca4:	mvn	r3, #0
    2ca8:	b	2e7c <compare_data+0x3c8>
    2cac:	sub	r3, fp, #24
    2cb0:	mov	r1, r3
    2cb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2cb8:	bl	0 <coda_cursor_get_special_type>
    2cbc:	mov	r3, r0
    2cc0:	cmp	r3, #0
    2cc4:	beq	2cdc <compare_data+0x228>
    2cc8:	mov	r1, #1
    2ccc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2cd0:	bl	378 <print_error_with_cursor>
    2cd4:	mvn	r3, #0
    2cd8:	b	2e7c <compare_data+0x3c8>
    2cdc:	sub	r3, fp, #28
    2ce0:	mov	r1, r3
    2ce4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2ce8:	bl	0 <coda_cursor_get_special_type>
    2cec:	mov	r3, r0
    2cf0:	cmp	r3, #0
    2cf4:	beq	2d0c <compare_data+0x258>
    2cf8:	mov	r1, #2
    2cfc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2d00:	bl	378 <print_error_with_cursor>
    2d04:	mvn	r3, #0
    2d08:	b	2e7c <compare_data+0x3c8>
    2d0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2d10:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2d14:	cmp	r2, r3
    2d18:	beq	2dbc <compare_data+0x308>
    2d1c:	movw	r0, #0
    2d20:	movt	r0, #0
    2d24:	bl	0 <printf>
    2d28:	movw	r1, #0
    2d2c:	movt	r1, #0
    2d30:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2d34:	bl	0 <coda_cursor_print_path>
    2d38:	mov	r0, #10
    2d3c:	bl	0 <putchar>
    2d40:	movw	r3, #0
    2d44:	movt	r3, #0
    2d48:	ldr	r3, [r3]
    2d4c:	cmp	r3, #0
    2d50:	beq	2db4 <compare_data+0x300>
    2d54:	movw	r3, #0
    2d58:	movt	r3, #0
    2d5c:	ldr	r4, [r3]
    2d60:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d64:	mov	r0, r3
    2d68:	bl	0 <coda_type_get_special_type_name>
    2d6c:	mov	r3, r0
    2d70:	mov	r2, r3
    2d74:	mov	r1, r4
    2d78:	movw	r0, #0
    2d7c:	movt	r0, #0
    2d80:	bl	0 <printf>
    2d84:	movw	r3, #0
    2d88:	movt	r3, #0
    2d8c:	ldr	r4, [r3, #4]
    2d90:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2d94:	mov	r0, r3
    2d98:	bl	0 <coda_type_get_special_type_name>
    2d9c:	mov	r3, r0
    2da0:	mov	r2, r3
    2da4:	mov	r1, r4
    2da8:	movw	r0, #0
    2dac:	movt	r0, #0
    2db0:	bl	0 <printf>
    2db4:	mov	r3, #0
    2db8:	b	2e7c <compare_data+0x3c8>
    2dbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2dc0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2dc4:	mov	r3, r0
    2dc8:	cmp	r3, #0
    2dcc:	beq	2de4 <compare_data+0x330>
    2dd0:	mov	r1, #1
    2dd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2dd8:	bl	378 <print_error_with_cursor>
    2ddc:	mvn	r3, #0
    2de0:	b	2e7c <compare_data+0x3c8>
    2de4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2de8:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2dec:	mov	r3, r0
    2df0:	cmp	r3, #0
    2df4:	beq	2e0c <compare_data+0x358>
    2df8:	mov	r1, #2
    2dfc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2e00:	bl	378 <print_error_with_cursor>
    2e04:	mvn	r3, #0
    2e08:	b	2e7c <compare_data+0x3c8>
    2e0c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2e10:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2e14:	bl	2ab4 <compare_data>
    2e18:	mov	r3, r0
    2e1c:	cmp	r3, #0
    2e20:	beq	2e54 <compare_data+0x3a0>
    2e24:	mvn	r3, #0
    2e28:	b	2e7c <compare_data+0x3c8>
    2e2c:	nop	{0}
    2e30:	b	2e58 <compare_data+0x3a4>
    2e34:	nop	{0}
    2e38:	b	2e58 <compare_data+0x3a4>
    2e3c:	nop	{0}
    2e40:	b	2e58 <compare_data+0x3a4>
    2e44:	nop	{0}
    2e48:	b	2e58 <compare_data+0x3a4>
    2e4c:	nop	{0}
    2e50:	b	2e58 <compare_data+0x3a4>
    2e54:	nop	{0}
    2e58:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2e5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2e60:	bl	298c <compare_attributes>
    2e64:	mov	r3, r0
    2e68:	cmp	r3, #0
    2e6c:	beq	2e78 <compare_data+0x3c4>
    2e70:	mvn	r3, #0
    2e74:	b	2e7c <compare_data+0x3c8>
    2e78:	mov	r3, #0
    2e7c:	mov	r0, r3
    2e80:	sub	sp, fp, #8
    2e84:	ldr	r4, [sp]
    2e88:	ldr	fp, [sp, #4]
    2e8c:	add	sp, sp, #8
    2e90:	pop	{pc}		; (ldr pc, [sp], #4)

00002e94 <compare_files>:
    2e94:	strd	r4, [sp, #-16]!
    2e98:	str	fp, [sp, #8]
    2e9c:	str	lr, [sp, #12]
    2ea0:	add	fp, sp, #12
    2ea4:	sub	sp, sp, #1072	; 0x430
    2ea8:	str	r0, [fp, #-1072]	; 0xfffffbd0
    2eac:	str	r1, [fp, #-1076]	; 0xfffffbcc
    2eb0:	str	r2, [fp, #-1080]	; 0xfffffbc8
    2eb4:	sub	r3, fp, #20
    2eb8:	mov	r1, r3
    2ebc:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
    2ec0:	bl	0 <coda_open>
    2ec4:	str	r0, [fp, #-16]
    2ec8:	ldr	r3, [fp, #-16]
    2ecc:	cmp	r3, #0
    2ed0:	beq	2f0c <compare_files+0x78>
    2ed4:	bl	0 <coda_get_errno>
    2ed8:	mov	r3, r0
    2edc:	ldr	r3, [r3]
    2ee0:	cmn	r3, #21
    2ee4:	bne	2f0c <compare_files+0x78>
    2ee8:	mov	r0, #0
    2eec:	bl	0 <coda_set_option_use_mmap>
    2ef0:	sub	r3, fp, #20
    2ef4:	mov	r1, r3
    2ef8:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
    2efc:	bl	0 <coda_open>
    2f00:	str	r0, [fp, #-16]
    2f04:	mov	r0, #1
    2f08:	bl	0 <coda_set_option_use_mmap>
    2f0c:	ldr	r3, [fp, #-16]
    2f10:	cmp	r3, #0
    2f14:	beq	2f64 <compare_files+0xd0>
    2f18:	movw	r3, #0
    2f1c:	movt	r3, #0
    2f20:	ldr	r4, [r3]
    2f24:	movw	r3, #0
    2f28:	movt	r3, #0
    2f2c:	ldr	r5, [r3]
    2f30:	bl	0 <coda_get_errno>
    2f34:	mov	r3, r0
    2f38:	ldr	r3, [r3]
    2f3c:	mov	r0, r3
    2f40:	bl	0 <coda_errno_to_string>
    2f44:	mov	r3, r0
    2f48:	mov	r2, r5
    2f4c:	movw	r1, #0
    2f50:	movt	r1, #0
    2f54:	mov	r0, r4
    2f58:	bl	0 <fprintf>
    2f5c:	mvn	r3, #0
    2f60:	b	32d8 <compare_files+0x444>
    2f64:	ldr	r3, [fp, #-20]	; 0xffffffec
    2f68:	mov	r0, r3
    2f6c:	bl	6b8 <array_key_info_set_product>
    2f70:	mov	r3, r0
    2f74:	cmp	r3, #0
    2f78:	beq	2fc8 <compare_files+0x134>
    2f7c:	movw	r3, #0
    2f80:	movt	r3, #0
    2f84:	ldr	r4, [r3]
    2f88:	movw	r3, #0
    2f8c:	movt	r3, #0
    2f90:	ldr	r5, [r3]
    2f94:	bl	0 <coda_get_errno>
    2f98:	mov	r3, r0
    2f9c:	ldr	r3, [r3]
    2fa0:	mov	r0, r3
    2fa4:	bl	0 <coda_errno_to_string>
    2fa8:	mov	r3, r0
    2fac:	mov	r2, r5
    2fb0:	movw	r1, #0
    2fb4:	movt	r1, #0
    2fb8:	mov	r0, r4
    2fbc:	bl	0 <fprintf>
    2fc0:	mvn	r3, #0
    2fc4:	b	32d8 <compare_files+0x444>
    2fc8:	sub	r3, fp, #24
    2fcc:	mov	r1, r3
    2fd0:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
    2fd4:	bl	0 <coda_open>
    2fd8:	str	r0, [fp, #-16]
    2fdc:	ldr	r3, [fp, #-16]
    2fe0:	cmp	r3, #0
    2fe4:	beq	3020 <compare_files+0x18c>
    2fe8:	bl	0 <coda_get_errno>
    2fec:	mov	r3, r0
    2ff0:	ldr	r3, [r3]
    2ff4:	cmn	r3, #21
    2ff8:	bne	3020 <compare_files+0x18c>
    2ffc:	mov	r0, #0
    3000:	bl	0 <coda_set_option_use_mmap>
    3004:	sub	r3, fp, #24
    3008:	mov	r1, r3
    300c:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
    3010:	bl	0 <coda_open>
    3014:	str	r0, [fp, #-16]
    3018:	mov	r0, #1
    301c:	bl	0 <coda_set_option_use_mmap>
    3020:	ldr	r3, [fp, #-16]
    3024:	cmp	r3, #0
    3028:	beq	3084 <compare_files+0x1f0>
    302c:	movw	r3, #0
    3030:	movt	r3, #0
    3034:	ldr	r4, [r3]
    3038:	movw	r3, #0
    303c:	movt	r3, #0
    3040:	ldr	r5, [r3, #4]
    3044:	bl	0 <coda_get_errno>
    3048:	mov	r3, r0
    304c:	ldr	r3, [r3]
    3050:	mov	r0, r3
    3054:	bl	0 <coda_errno_to_string>
    3058:	mov	r3, r0
    305c:	mov	r2, r5
    3060:	movw	r1, #0
    3064:	movt	r1, #0
    3068:	mov	r0, r4
    306c:	bl	0 <fprintf>
    3070:	ldr	r3, [fp, #-20]	; 0xffffffec
    3074:	mov	r0, r3
    3078:	bl	0 <coda_close>
    307c:	mvn	r3, #0
    3080:	b	32d8 <compare_files+0x444>
    3084:	ldr	r2, [fp, #-20]	; 0xffffffec
    3088:	sub	r3, fp, #548	; 0x224
    308c:	mov	r1, r2
    3090:	mov	r0, r3
    3094:	bl	0 <coda_cursor_set_product>
    3098:	mov	r3, r0
    309c:	cmp	r3, #0
    30a0:	beq	3108 <compare_files+0x274>
    30a4:	movw	r3, #0
    30a8:	movt	r3, #0
    30ac:	ldr	r4, [r3]
    30b0:	movw	r3, #0
    30b4:	movt	r3, #0
    30b8:	ldr	r5, [r3]
    30bc:	bl	0 <coda_get_errno>
    30c0:	mov	r3, r0
    30c4:	ldr	r3, [r3]
    30c8:	mov	r0, r3
    30cc:	bl	0 <coda_errno_to_string>
    30d0:	mov	r3, r0
    30d4:	mov	r2, r5
    30d8:	movw	r1, #0
    30dc:	movt	r1, #0
    30e0:	mov	r0, r4
    30e4:	bl	0 <fprintf>
    30e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    30ec:	mov	r0, r3
    30f0:	bl	0 <coda_close>
    30f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    30f8:	mov	r0, r3
    30fc:	bl	0 <coda_close>
    3100:	mvn	r3, #0
    3104:	b	32d8 <compare_files+0x444>
    3108:	ldr	r2, [fp, #-24]	; 0xffffffe8
    310c:	sub	r3, fp, #1056	; 0x420
    3110:	sub	r3, r3, #12
    3114:	mov	r1, r2
    3118:	mov	r0, r3
    311c:	bl	0 <coda_cursor_set_product>
    3120:	mov	r3, r0
    3124:	cmp	r3, #0
    3128:	beq	3190 <compare_files+0x2fc>
    312c:	movw	r3, #0
    3130:	movt	r3, #0
    3134:	ldr	r4, [r3]
    3138:	movw	r3, #0
    313c:	movt	r3, #0
    3140:	ldr	r5, [r3, #4]
    3144:	bl	0 <coda_get_errno>
    3148:	mov	r3, r0
    314c:	ldr	r3, [r3]
    3150:	mov	r0, r3
    3154:	bl	0 <coda_errno_to_string>
    3158:	mov	r3, r0
    315c:	mov	r2, r5
    3160:	movw	r1, #0
    3164:	movt	r1, #0
    3168:	mov	r0, r4
    316c:	bl	0 <fprintf>
    3170:	ldr	r3, [fp, #-20]	; 0xffffffec
    3174:	mov	r0, r3
    3178:	bl	0 <coda_close>
    317c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3180:	mov	r0, r3
    3184:	bl	0 <coda_close>
    3188:	mvn	r3, #0
    318c:	b	32d8 <compare_files+0x444>
    3190:	ldr	r3, [fp, #-1080]	; 0xfffffbc8
    3194:	cmp	r3, #0
    3198:	beq	32a0 <compare_files+0x40c>
    319c:	sub	r3, fp, #548	; 0x224
    31a0:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
    31a4:	mov	r0, r3
    31a8:	bl	0 <coda_cursor_goto>
    31ac:	mov	r3, r0
    31b0:	cmp	r3, #0
    31b4:	beq	321c <compare_files+0x388>
    31b8:	movw	r3, #0
    31bc:	movt	r3, #0
    31c0:	ldr	r4, [r3]
    31c4:	movw	r3, #0
    31c8:	movt	r3, #0
    31cc:	ldr	r5, [r3]
    31d0:	bl	0 <coda_get_errno>
    31d4:	mov	r3, r0
    31d8:	ldr	r3, [r3]
    31dc:	mov	r0, r3
    31e0:	bl	0 <coda_errno_to_string>
    31e4:	mov	r3, r0
    31e8:	mov	r2, r5
    31ec:	movw	r1, #0
    31f0:	movt	r1, #0
    31f4:	mov	r0, r4
    31f8:	bl	0 <fprintf>
    31fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3200:	mov	r0, r3
    3204:	bl	0 <coda_close>
    3208:	ldr	r3, [fp, #-24]	; 0xffffffe8
    320c:	mov	r0, r3
    3210:	bl	0 <coda_close>
    3214:	mvn	r3, #0
    3218:	b	32d8 <compare_files+0x444>
    321c:	sub	r3, fp, #1056	; 0x420
    3220:	sub	r3, r3, #12
    3224:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
    3228:	mov	r0, r3
    322c:	bl	0 <coda_cursor_goto>
    3230:	mov	r3, r0
    3234:	cmp	r3, #0
    3238:	beq	32a0 <compare_files+0x40c>
    323c:	movw	r3, #0
    3240:	movt	r3, #0
    3244:	ldr	r4, [r3]
    3248:	movw	r3, #0
    324c:	movt	r3, #0
    3250:	ldr	r5, [r3, #4]
    3254:	bl	0 <coda_get_errno>
    3258:	mov	r3, r0
    325c:	ldr	r3, [r3]
    3260:	mov	r0, r3
    3264:	bl	0 <coda_errno_to_string>
    3268:	mov	r3, r0
    326c:	mov	r2, r5
    3270:	movw	r1, #0
    3274:	movt	r1, #0
    3278:	mov	r0, r4
    327c:	bl	0 <fprintf>
    3280:	ldr	r3, [fp, #-20]	; 0xffffffec
    3284:	mov	r0, r3
    3288:	bl	0 <coda_close>
    328c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3290:	mov	r0, r3
    3294:	bl	0 <coda_close>
    3298:	mvn	r3, #0
    329c:	b	32d8 <compare_files+0x444>
    32a0:	sub	r2, fp, #1056	; 0x420
    32a4:	sub	r2, r2, #12
    32a8:	sub	r3, fp, #548	; 0x224
    32ac:	mov	r1, r2
    32b0:	mov	r0, r3
    32b4:	bl	2ab4 <compare_data>
    32b8:	str	r0, [fp, #-16]
    32bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    32c0:	mov	r0, r3
    32c4:	bl	0 <coda_close>
    32c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    32cc:	mov	r0, r3
    32d0:	bl	0 <coda_close>
    32d4:	ldr	r3, [fp, #-16]
    32d8:	mov	r0, r3
    32dc:	sub	sp, fp, #12
    32e0:	ldrd	r4, [sp]
    32e4:	ldr	fp, [sp, #8]
    32e8:	add	sp, sp, #12
    32ec:	pop	{pc}		; (ldr pc, [sp], #4)

000032f0 <main>:
    32f0:	str	r4, [sp, #-12]!
    32f4:	str	fp, [sp, #4]
    32f8:	str	lr, [sp, #8]
    32fc:	add	fp, sp, #8
    3300:	sub	sp, sp, #36	; 0x24
    3304:	str	r0, [fp, #-40]	; 0xffffffd8
    3308:	str	r1, [fp, #-44]	; 0xffffffd4
    330c:	movw	r3, #0
    3310:	movt	r3, #0
    3314:	mov	r2, #0
    3318:	str	r2, [r3]
    331c:	mov	r3, #1
    3320:	str	r3, [fp, #-16]
    3324:	mov	r3, #0
    3328:	str	r3, [fp, #-20]	; 0xffffffec
    332c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3330:	cmp	r3, #1
    3334:	beq	3388 <main+0x98>
    3338:	ldr	r3, [fp, #-44]	; 0xffffffd4
    333c:	add	r3, r3, #4
    3340:	ldr	r3, [r3]
    3344:	movw	r1, #0
    3348:	movt	r1, #0
    334c:	mov	r0, r3
    3350:	bl	0 <strcmp>
    3354:	mov	r3, r0
    3358:	cmp	r3, #0
    335c:	beq	3388 <main+0x98>
    3360:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3364:	add	r3, r3, #4
    3368:	ldr	r3, [r3]
    336c:	movw	r1, #0
    3370:	movt	r1, #0
    3374:	mov	r0, r3
    3378:	bl	0 <strcmp>
    337c:	mov	r3, r0
    3380:	cmp	r3, #0
    3384:	bne	3394 <main+0xa4>
    3388:	bl	4c <print_help>
    338c:	mov	r0, #0
    3390:	bl	0 <exit>
    3394:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3398:	add	r3, r3, #4
    339c:	ldr	r3, [r3]
    33a0:	movw	r1, #0
    33a4:	movt	r1, #0
    33a8:	mov	r0, r3
    33ac:	bl	0 <strcmp>
    33b0:	mov	r3, r0
    33b4:	cmp	r3, #0
    33b8:	beq	33e4 <main+0xf4>
    33bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
    33c0:	add	r3, r3, #4
    33c4:	ldr	r3, [r3]
    33c8:	movw	r1, #0
    33cc:	movt	r1, #0
    33d0:	mov	r0, r3
    33d4:	bl	0 <strcmp>
    33d8:	mov	r3, r0
    33dc:	cmp	r3, #0
    33e0:	bne	33f0 <main+0x100>
    33e4:	bl	0 <print_version>
    33e8:	mov	r0, #0
    33ec:	bl	0 <exit>
    33f0:	bl	400 <array_key_info_init>
    33f4:	mov	r3, #1
    33f8:	str	r3, [fp, #-24]	; 0xffffffe8
    33fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3400:	add	r3, r3, #1
    3404:	ldr	r2, [fp, #-40]	; 0xffffffd8
    3408:	cmp	r2, r3
    340c:	ble	3470 <main+0x180>
    3410:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3414:	lsl	r3, r3, #2
    3418:	ldr	r2, [fp, #-44]	; 0xffffffd4
    341c:	add	r3, r2, r3
    3420:	ldr	r3, [r3]
    3424:	movw	r1, #0
    3428:	movt	r1, #0
    342c:	mov	r0, r3
    3430:	bl	0 <strcmp>
    3434:	mov	r3, r0
    3438:	cmp	r3, #0
    343c:	bne	3470 <main+0x180>
    3440:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3444:	add	r3, r3, #1
    3448:	lsl	r3, r3, #2
    344c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3450:	add	r3, r2, r3
    3454:	ldr	r3, [r3]
    3458:	mov	r0, r3
    345c:	bl	0 <coda_set_definition_path>
    3460:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3464:	add	r3, r3, #2
    3468:	str	r3, [fp, #-24]	; 0xffffffe8
    346c:	b	34e0 <main+0x1f0>
    3470:	movw	r3, #0
    3474:	movt	r3, #0
    3478:	str	r3, [fp, #-28]	; 0xffffffe4
    347c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3480:	ldr	r3, [r3]
    3484:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3488:	mov	r1, #0
    348c:	mov	r0, r3
    3490:	bl	0 <coda_set_definition_path_conditional>
    3494:	mov	r3, r0
    3498:	cmp	r3, #0
    349c:	beq	37b0 <main+0x4c0>
    34a0:	movw	r3, #0
    34a4:	movt	r3, #0
    34a8:	ldr	r4, [r3]
    34ac:	bl	0 <coda_get_errno>
    34b0:	mov	r3, r0
    34b4:	ldr	r3, [r3]
    34b8:	mov	r0, r3
    34bc:	bl	0 <coda_errno_to_string>
    34c0:	mov	r3, r0
    34c4:	mov	r2, r3
    34c8:	movw	r1, #0
    34cc:	movt	r1, #0
    34d0:	mov	r0, r4
    34d4:	bl	0 <fprintf>
    34d8:	mov	r0, #1
    34dc:	bl	0 <exit>
    34e0:	b	37b0 <main+0x4c0>
    34e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    34e8:	lsl	r3, r3, #2
    34ec:	ldr	r2, [fp, #-44]	; 0xffffffd4
    34f0:	add	r3, r2, r3
    34f4:	ldr	r3, [r3]
    34f8:	movw	r1, #0
    34fc:	movt	r1, #0
    3500:	mov	r0, r3
    3504:	bl	0 <strcmp>
    3508:	mov	r3, r0
    350c:	cmp	r3, #0
    3510:	beq	3544 <main+0x254>
    3514:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3518:	lsl	r3, r3, #2
    351c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3520:	add	r3, r2, r3
    3524:	ldr	r3, [r3]
    3528:	movw	r1, #0
    352c:	movt	r1, #0
    3530:	mov	r0, r3
    3534:	bl	0 <strcmp>
    3538:	mov	r3, r0
    353c:	cmp	r3, #0
    3540:	bne	3558 <main+0x268>
    3544:	movw	r3, #0
    3548:	movt	r3, #0
    354c:	mov	r2, #1
    3550:	str	r2, [r3]
    3554:	b	37a4 <main+0x4b4>
    3558:	ldr	r3, [fp, #-24]	; 0xffffffe8
    355c:	lsl	r3, r3, #2
    3560:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3564:	add	r3, r2, r3
    3568:	ldr	r3, [r3]
    356c:	movw	r1, #0
    3570:	movt	r1, #0
    3574:	mov	r0, r3
    3578:	bl	0 <strcmp>
    357c:	mov	r3, r0
    3580:	cmp	r3, #0
    3584:	beq	35b8 <main+0x2c8>
    3588:	ldr	r3, [fp, #-24]	; 0xffffffe8
    358c:	lsl	r3, r3, #2
    3590:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3594:	add	r3, r2, r3
    3598:	ldr	r3, [r3]
    359c:	movw	r1, #0
    35a0:	movt	r1, #0
    35a4:	mov	r0, r3
    35a8:	bl	0 <strcmp>
    35ac:	mov	r3, r0
    35b0:	cmp	r3, #0
    35b4:	bne	35c4 <main+0x2d4>
    35b8:	mov	r3, #0
    35bc:	str	r3, [fp, #-16]
    35c0:	b	37a4 <main+0x4b4>
    35c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    35c8:	lsl	r3, r3, #2
    35cc:	ldr	r2, [fp, #-44]	; 0xffffffd4
    35d0:	add	r3, r2, r3
    35d4:	ldr	r3, [r3]
    35d8:	movw	r1, #0
    35dc:	movt	r1, #0
    35e0:	mov	r0, r3
    35e4:	bl	0 <strcmp>
    35e8:	mov	r3, r0
    35ec:	cmp	r3, #0
    35f0:	beq	3624 <main+0x334>
    35f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    35f8:	lsl	r3, r3, #2
    35fc:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3600:	add	r3, r2, r3
    3604:	ldr	r3, [r3]
    3608:	movw	r1, #0
    360c:	movt	r1, #0
    3610:	mov	r0, r3
    3614:	bl	0 <strcmp>
    3618:	mov	r3, r0
    361c:	cmp	r3, #0
    3620:	bne	3688 <main+0x398>
    3624:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3628:	add	r3, r3, #1
    362c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    3630:	cmp	r2, r3
    3634:	ble	3688 <main+0x398>
    3638:	ldr	r3, [fp, #-24]	; 0xffffffe8
    363c:	add	r3, r3, #1
    3640:	lsl	r3, r3, #2
    3644:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3648:	add	r3, r2, r3
    364c:	ldr	r3, [r3]
    3650:	ldrb	r3, [r3]
    3654:	cmp	r3, #45	; 0x2d
    3658:	beq	3688 <main+0x398>
    365c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3660:	add	r3, r3, #1
    3664:	lsl	r3, r3, #2
    3668:	ldr	r2, [fp, #-44]	; 0xffffffd4
    366c:	add	r3, r2, r3
    3670:	ldr	r3, [r3]
    3674:	str	r3, [fp, #-20]	; 0xffffffec
    3678:	ldr	r3, [fp, #-24]	; 0xffffffe8
    367c:	add	r3, r3, #1
    3680:	str	r3, [fp, #-24]	; 0xffffffe8
    3684:	b	37a4 <main+0x4b4>
    3688:	ldr	r3, [fp, #-24]	; 0xffffffe8
    368c:	lsl	r3, r3, #2
    3690:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3694:	add	r3, r2, r3
    3698:	ldr	r3, [r3]
    369c:	movw	r1, #0
    36a0:	movt	r1, #0
    36a4:	mov	r0, r3
    36a8:	bl	0 <strcmp>
    36ac:	mov	r3, r0
    36b0:	cmp	r3, #0
    36b4:	beq	36e8 <main+0x3f8>
    36b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    36bc:	lsl	r3, r3, #2
    36c0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    36c4:	add	r3, r2, r3
    36c8:	ldr	r3, [r3]
    36cc:	movw	r1, #0
    36d0:	movt	r1, #0
    36d4:	mov	r0, r3
    36d8:	bl	0 <strcmp>
    36dc:	mov	r3, r0
    36e0:	cmp	r3, #0
    36e4:	bne	3758 <main+0x468>
    36e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    36ec:	add	r3, r3, #2
    36f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    36f4:	cmp	r2, r3
    36f8:	ble	3758 <main+0x468>
    36fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3700:	add	r3, r3, #1
    3704:	lsl	r3, r3, #2
    3708:	ldr	r2, [fp, #-44]	; 0xffffffd4
    370c:	add	r3, r2, r3
    3710:	ldr	r0, [r3]
    3714:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3718:	add	r3, r3, #2
    371c:	lsl	r3, r3, #2
    3720:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3724:	add	r3, r2, r3
    3728:	ldr	r3, [r3]
    372c:	mov	r1, r3
    3730:	bl	4f4 <array_key_info_add_key>
    3734:	mov	r3, r0
    3738:	cmp	r3, #0
    373c:	beq	3748 <main+0x458>
    3740:	mvn	r3, #0
    3744:	b	38c8 <main+0x5d8>
    3748:	ldr	r3, [fp, #-24]	; 0xffffffe8
    374c:	add	r3, r3, #2
    3750:	str	r3, [fp, #-24]	; 0xffffffe8
    3754:	b	37a4 <main+0x4b4>
    3758:	ldr	r3, [fp, #-24]	; 0xffffffe8
    375c:	lsl	r3, r3, #2
    3760:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3764:	add	r3, r2, r3
    3768:	ldr	r3, [r3]
    376c:	ldrb	r3, [r3]
    3770:	cmp	r3, #45	; 0x2d
    3774:	bne	37c4 <main+0x4d4>
    3778:	movw	r3, #0
    377c:	movt	r3, #0
    3780:	ldr	r3, [r3]
    3784:	mov	r2, #25
    3788:	mov	r1, #1
    378c:	movw	r0, #0
    3790:	movt	r0, #0
    3794:	bl	0 <fwrite>
    3798:	bl	4c <print_help>
    379c:	mov	r0, #1
    37a0:	bl	0 <exit>
    37a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37a8:	add	r3, r3, #1
    37ac:	str	r3, [fp, #-24]	; 0xffffffe8
    37b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    37b4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    37b8:	cmp	r2, r3
    37bc:	blt	34e4 <main+0x1f4>
    37c0:	b	37c8 <main+0x4d8>
    37c4:	nop	{0}
    37c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    37cc:	sub	r3, r3, #2
    37d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    37d4:	cmp	r2, r3
    37d8:	beq	3808 <main+0x518>
    37dc:	movw	r3, #0
    37e0:	movt	r3, #0
    37e4:	ldr	r3, [r3]
    37e8:	mov	r2, #25
    37ec:	mov	r1, #1
    37f0:	movw	r0, #0
    37f4:	movt	r0, #0
    37f8:	bl	0 <fwrite>
    37fc:	bl	4c <print_help>
    3800:	mov	r0, #1
    3804:	bl	0 <exit>
    3808:	bl	0 <coda_init>
    380c:	mov	r3, r0
    3810:	cmp	r3, #0
    3814:	beq	3858 <main+0x568>
    3818:	movw	r3, #0
    381c:	movt	r3, #0
    3820:	ldr	r4, [r3]
    3824:	bl	0 <coda_get_errno>
    3828:	mov	r3, r0
    382c:	ldr	r3, [r3]
    3830:	mov	r0, r3
    3834:	bl	0 <coda_errno_to_string>
    3838:	mov	r3, r0
    383c:	mov	r2, r3
    3840:	movw	r1, #0
    3844:	movt	r1, #0
    3848:	mov	r0, r4
    384c:	bl	0 <fprintf>
    3850:	mov	r0, #1
    3854:	bl	0 <exit>
    3858:	mov	r0, #0
    385c:	bl	0 <coda_set_option_perform_boundary_checks>
    3860:	ldr	r0, [fp, #-16]
    3864:	bl	0 <coda_set_option_perform_conversions>
    3868:	ldr	r3, [fp, #-40]	; 0xffffffd8
    386c:	sub	r3, r3, #-1073741822	; 0xc0000002
    3870:	lsl	r3, r3, #2
    3874:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3878:	add	r3, r2, r3
    387c:	ldr	r0, [r3]
    3880:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3884:	sub	r3, r3, #-1073741823	; 0xc0000001
    3888:	lsl	r3, r3, #2
    388c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3890:	add	r3, r2, r3
    3894:	ldr	r3, [r3]
    3898:	ldr	r2, [fp, #-20]	; 0xffffffec
    389c:	mov	r1, r3
    38a0:	bl	2e94 <compare_files>
    38a4:	str	r0, [fp, #-32]	; 0xffffffe0
    38a8:	bl	0 <coda_done>
    38ac:	bl	458 <array_key_info_done>
    38b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    38b4:	cmp	r3, #0
    38b8:	beq	38c4 <main+0x5d4>
    38bc:	mov	r0, #1
    38c0:	bl	0 <exit>
    38c4:	mov	r3, #0
    38c8:	mov	r0, r3
    38cc:	sub	sp, fp, #8
    38d0:	ldr	r4, [sp]
    38d4:	ldr	fp, [sp, #4]
    38d8:	add	sp, sp, #8
    38dc:	pop	{pc}		; (ldr pc, [sp], #4)
