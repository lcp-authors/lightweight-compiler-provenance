
../repos/prog2/2.1:     file format elf32-littlearm


Disassembly of section .init:

0001037c <.init>:
   1037c:	push	{r3, lr}
   10380:	bl	1042c <abort@plt+0x3c>
   10384:	pop	{r3, pc}

Disassembly of section .plt:

00010388 <printf@plt-0x14>:
   10388:	push	{lr}		; (str lr, [sp, #-4]!)
   1038c:	ldr	lr, [pc, #4]	; 10398 <printf@plt-0x4>
   10390:	add	lr, pc, lr
   10394:	ldr	pc, [lr, #8]!
   10398:	andeq	r0, r1, r8, ror #24

0001039c <printf@plt>:
   1039c:	add	ip, pc, #0, 12
   103a0:	add	ip, ip, #16, 20	; 0x10000
   103a4:	ldr	pc, [ip, #3176]!	; 0xc68

000103a8 <free@plt>:
   103a8:	add	ip, pc, #0, 12
   103ac:	add	ip, ip, #16, 20	; 0x10000
   103b0:	ldr	pc, [ip, #3168]!	; 0xc60

000103b4 <realloc@plt>:
   103b4:	add	ip, pc, #0, 12
   103b8:	add	ip, ip, #16, 20	; 0x10000
   103bc:	ldr	pc, [ip, #3160]!	; 0xc58

000103c0 <malloc@plt>:
   103c0:	add	ip, pc, #0, 12
   103c4:	add	ip, ip, #16, 20	; 0x10000
   103c8:	ldr	pc, [ip, #3152]!	; 0xc50

000103cc <__libc_start_main@plt>:
   103cc:	add	ip, pc, #0, 12
   103d0:	add	ip, ip, #16, 20	; 0x10000
   103d4:	ldr	pc, [ip, #3144]!	; 0xc48

000103d8 <scanf@plt>:
   103d8:	add	ip, pc, #0, 12
   103dc:	add	ip, ip, #16, 20	; 0x10000
   103e0:	ldr	pc, [ip, #3136]!	; 0xc40

000103e4 <__gmon_start__@plt>:
   103e4:	add	ip, pc, #0, 12
   103e8:	add	ip, ip, #16, 20	; 0x10000
   103ec:	ldr	pc, [ip, #3128]!	; 0xc38

000103f0 <abort@plt>:
   103f0:	add	ip, pc, #0, 12
   103f4:	add	ip, ip, #16, 20	; 0x10000
   103f8:	ldr	pc, [ip, #3120]!	; 0xc30

Disassembly of section .text:

000103fc <.text>:
   103fc:	bleq	4c540 <abort@plt+0x3c150>
   10400:	cdpeq	0, 0, cr15, cr0, cr15, {2}
   10404:	strbtmi	fp, [sl], -r2, lsl #24
   10408:	strlt	fp, [r1], #-1028	; 0xfffffbfc
   1040c:			; <UNDEFINED> instruction: 0xc010f8df
   10410:	stcgt	8, cr15, [r4, #-308]	; 0xfffffecc
   10414:	blmi	122428 <abort@plt+0x112038>
   10418:	svc	0x00d8f7ff
   1041c:	svc	0x00e8f7ff
   10420:	andeq	r0, r1, r1, lsl #14
   10424:			; <UNDEFINED> instruction: 0x000104bc
   10428:	andeq	r0, r1, r1, asr #13
   1042c:	ldr	r3, [pc, #20]	; 10448 <abort@plt+0x58>
   10430:	ldr	r2, [pc, #20]	; 1044c <abort@plt+0x5c>
   10434:	add	r3, pc, r3
   10438:	ldr	r2, [r3, r2]
   1043c:	cmp	r2, #0
   10440:	bxeq	lr
   10444:	b	103e4 <__gmon_start__@plt>
   10448:	andeq	r0, r1, r4, asr #23
   1044c:	andeq	r0, r0, ip, lsr #32
   10450:	eorseq	pc, r8, r1, asr #4
   10454:	andeq	pc, r2, r0, asr #5
   10458:	teqeq	r8, #268435460	; 0x10000004	; <UNPREDICTABLE>
   1045c:	movweq	pc, #8896	; 0x22c0	; <UNPREDICTABLE>
   10460:	andle	r4, r5, r3, lsl #5
   10464:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10468:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   1046c:	ldrmi	fp, [r8, -r3, lsl #2]
   10470:	svclt	0x00004770
   10474:	eorseq	pc, r8, r1, asr #4
   10478:	andeq	pc, r2, r0, asr #5
   1047c:	teqeq	r8, r1, asr #4	; <UNPREDICTABLE>
   10480:	smlabteq	r2, r0, r2, pc	; <UNPREDICTABLE>
   10484:	svceq	0x00d91a0b
   10488:			; <UNDEFINED> instruction: 0x01a3eb01
   1048c:	andle	r1, r5, r9, asr #32
   10490:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10494:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   10498:	ldrmi	fp, [r8, -r3, lsl #2]
   1049c:	svclt	0x00004770
   104a0:	vqrshl.s8	d27, d0, d1
   104a4:	vmvn.i32	d16, #524288	; 0x00080000
   104a8:	stmdavc	r3!, {r1, sl}
   104ac:			; <UNDEFINED> instruction: 0xf7ffb91b
   104b0:	movwcs	pc, #8143	; 0x1fcf	; <UNPREDICTABLE>
   104b4:	ldclt	0, cr7, [r0, #-140]	; 0xffffff74
   104b8:	svclt	0x0000e7dc
   104bc:	mov	ip, sp
   104c0:	sub	sp, sp, #40	; 0x28
   104c4:	str	ip, [sp]
   104c8:	str	lr, [sp, #4]
   104cc:	str	r4, [sp, #8]
   104d0:	str	r5, [sp, #12]
   104d4:	str	r6, [sp, #16]
   104d8:	str	r7, [sp, #20]
   104dc:	str	r8, [sp, #24]
   104e0:	str	r9, [sp, #28]
   104e4:	mov	r8, #0
   104e8:	mov	r7, #0
   104ec:	ldr	r0, [pc, #316]	; 10630 <abort@plt+0x240>
   104f0:	bl	1039c <printf@plt>
   104f4:	ldr	r0, [pc, #324]	; 10640 <abort@plt+0x250>
   104f8:	add	r1, sp, #32
   104fc:	bl	103d8 <scanf@plt>
   10500:	ldr	r2, [sp, #32]
   10504:	lsl	r0, r2, #2
   10508:	bl	103c0 <malloc@plt>
   1050c:	mov	r6, r0
   10510:	ldr	r3, [sp, #32]
   10514:	lsl	r0, r3, #2
   10518:	bl	103c0 <malloc@plt>
   1051c:	mov	r4, r0
   10520:	ldr	r3, [sp, #32]
   10524:	lsl	r0, r3, #2
   10528:	bl	103c0 <malloc@plt>
   1052c:	mov	r9, r0
   10530:	mov	r5, #0
   10534:	ldr	ip, [sp, #32]
   10538:	cmp	r5, ip
   1053c:	bge	10594 <abort@plt+0x1a4>
   10540:	ldr	r0, [pc, #252]	; 10644 <abort@plt+0x254>
   10544:	add	r1, r5, #1
   10548:	bl	1039c <printf@plt>
   1054c:	ldr	r0, [pc, #236]	; 10640 <abort@plt+0x250>
   10550:	add	r1, r6, r5, lsl #2
   10554:	bl	103d8 <scanf@plt>
   10558:	ldr	r0, [r6, r5, lsl #2]
   1055c:	asr	lr, r0, #31
   10560:	add	lr, r0, lr, lsr #31
   10564:	asr	r2, lr, #1
   10568:	lsl	ip, r2, #1
   1056c:	sub	r1, r0, ip
   10570:	cmp	r1, #0
   10574:	bne	10584 <abort@plt+0x194>
   10578:	str	r0, [r4, r8, lsl #2]
   1057c:	add	r8, r8, #1
   10580:	b	1058c <abort@plt+0x19c>
   10584:	str	r0, [r9, r7, lsl #2]
   10588:	add	r7, r7, #1
   1058c:	add	r5, r5, #1
   10590:	b	10534 <abort@plt+0x144>
   10594:	lsl	r1, r8, #2
   10598:	mov	r0, r4
   1059c:	bl	103b4 <realloc@plt>
   105a0:	mov	r5, r0
   105a4:	lsl	r1, r7, #2
   105a8:	mov	r0, r9
   105ac:	bl	103b4 <realloc@plt>
   105b0:	mov	r4, r0
   105b4:	ldr	r0, [pc, #128]	; 1063c <abort@plt+0x24c>
   105b8:	bl	1039c <printf@plt>
   105bc:	ldr	r1, [sp, #32]
   105c0:	mov	r0, r6
   105c4:	bl	10648 <abort@plt+0x258>
   105c8:	ldr	r0, [pc, #100]	; 10634 <abort@plt+0x244>
   105cc:	bl	1039c <printf@plt>
   105d0:	mov	r1, r8
   105d4:	mov	r0, r5
   105d8:	bl	10648 <abort@plt+0x258>
   105dc:	ldr	r0, [pc, #84]	; 10638 <abort@plt+0x248>
   105e0:	bl	1039c <printf@plt>
   105e4:	mov	r1, r7
   105e8:	mov	r0, r4
   105ec:	bl	10648 <abort@plt+0x258>
   105f0:	mov	r0, r6
   105f4:	bl	103a8 <free@plt>
   105f8:	mov	r0, r5
   105fc:	bl	103a8 <free@plt>
   10600:	mov	r0, r4
   10604:	bl	103a8 <free@plt>
   10608:	mov	r0, #0
   1060c:	ldr	r4, [sp, #8]
   10610:	ldr	r5, [sp, #12]
   10614:	ldr	r6, [sp, #16]
   10618:	ldr	r7, [sp, #20]
   1061c:	ldr	r8, [sp, #24]
   10620:	ldr	r9, [sp, #28]
   10624:	ldr	lr, [sp, #4]
   10628:	add	sp, sp, #40	; 0x28
   1062c:	bx	lr
   10630:	ldrdeq	r0, [r1], -r7
   10634:	andeq	r0, r1, sp, ror #15
   10638:	andeq	r0, r1, r0, lsr #15
   1063c:	andeq	r0, r1, r1, lsl #16
   10640:			; <UNDEFINED> instruction: 0x000107b2
   10644:			; <UNDEFINED> instruction: 0x000107b5
   10648:	mov	ip, sp
   1064c:	sub	sp, sp, #24
   10650:	str	ip, [sp]
   10654:	str	lr, [sp, #4]
   10658:	str	r4, [sp, #8]
   1065c:	str	r5, [sp, #12]
   10660:	str	r6, [sp, #16]
   10664:	mov	r4, r1
   10668:	mov	r5, r0
   1066c:	ldr	r0, [pc, #68]	; 106b8 <abort@plt+0x2c8>
   10670:	bl	1039c <printf@plt>
   10674:	mov	r6, #0
   10678:	cmp	r6, r4
   1067c:	bge	10694 <abort@plt+0x2a4>
   10680:	ldr	r0, [pc, #52]	; 106bc <abort@plt+0x2cc>
   10684:	ldr	r1, [r5, r6, lsl #2]
   10688:	bl	1039c <printf@plt>
   1068c:	add	r6, r6, #1
   10690:	b	10678 <abort@plt+0x288>
   10694:	ldr	r0, [pc, #24]	; 106b4 <abort@plt+0x2c4>
   10698:	bl	1039c <printf@plt>
   1069c:	ldr	r4, [sp, #8]
   106a0:	ldr	r5, [sp, #12]
   106a4:	ldr	r6, [sp, #16]
   106a8:	ldr	lr, [sp, #4]
   106ac:	add	sp, sp, #24
   106b0:	bx	lr
   106b4:	strdeq	r0, [r1], -sp
   106b8:	ldrdeq	r0, [r1], -r5
   106bc:	ldrdeq	r0, [r1], -r1
   106c0:	mvnsmi	lr, #737280	; 0xb4000
   106c4:	cfmadd32mi	mvax0, mvfx4, mvfx12, mvfx7
   106c8:	strmi	r4, [r8], ip, lsl #26
   106cc:			; <UNDEFINED> instruction: 0x4691447e
   106d0:			; <UNDEFINED> instruction: 0xf7ff447d
   106d4:	blne	1dcc02c <abort@plt+0x1dbbc3c>
   106d8:	strhle	r1, [sl], -r6
   106dc:	strcs	r3, [r0], #-3332	; 0xfffff2fc
   106e0:	svccc	0x0004f855
   106e4:	strbmi	r4, [r1], -sl, asr #12
   106e8:	strcc	r4, [r1], #-1592	; 0xfffff9c8
   106ec:	adcmi	r4, r6, #152, 14	; 0x2600000
   106f0:	pop	{r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
   106f4:	svclt	0x000083f8
   106f8:	andeq	r0, r1, r4, asr #16
   106fc:	andeq	r0, r1, ip, lsr r8
   10700:	svclt	0x00004770

Disassembly of section .fini:

00010704 <.fini>:
   10704:	push	{r3, lr}
   10708:	pop	{r3, pc}
