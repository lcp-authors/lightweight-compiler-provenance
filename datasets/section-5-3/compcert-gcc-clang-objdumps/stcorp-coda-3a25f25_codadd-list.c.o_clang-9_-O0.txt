
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-list.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_list>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #16
   c:	str	r0, [fp, #-4]
  10:	str	r1, [sp, #8]
  14:	str	r2, [sp, #4]
  18:	ldr	r0, [sp, #4]
  1c:	cmp	r0, #0
  20:	bge	34 <generate_list+0x34>
  24:	ldr	r0, [fp, #-4]
  28:	ldr	r1, [sp, #8]
  2c:	bl	4c <generate_product_list>
  30:	b	44 <generate_list+0x44>
  34:	ldr	r0, [fp, #-4]
  38:	ldr	r1, [sp, #8]
  3c:	ldr	r2, [sp, #4]
  40:	bl	31c <generate_field_list>
  44:	mov	sp, fp
  48:	pop	{fp, pc}

0000004c <generate_product_list>:
  4c:	push	{fp, lr}
  50:	mov	fp, sp
  54:	sub	sp, sp, #64	; 0x40
  58:	str	r0, [fp, #-4]
  5c:	str	r1, [fp, #-8]
  60:	movw	r0, #0
  64:	str	r0, [fp, #-12]
  68:	ldr	r0, [fp, #-12]
  6c:	ldr	r1, [pc, #672]	; 314 <generate_product_list+0x2c8>
  70:	ldr	r1, [pc, r1]
  74:	str	r0, [sp, #28]
  78:	str	r1, [sp, #24]
  7c:	bl	0 <__aeabi_read_tp>
  80:	ldr	r1, [sp, #24]
  84:	ldr	r0, [r0, r1]
  88:	ldr	r0, [r0]
  8c:	ldr	r1, [sp, #28]
  90:	cmp	r1, r0
  94:	bge	30c <generate_product_list+0x2c0>
  98:	ldr	r0, [pc, #632]	; 318 <generate_product_list+0x2cc>
  9c:	ldr	r0, [pc, r0]
  a0:	str	r0, [sp, #20]
  a4:	bl	0 <__aeabi_read_tp>
  a8:	ldr	r1, [sp, #20]
  ac:	ldr	r0, [r0, r1]
  b0:	ldr	r0, [r0, #4]
  b4:	ldr	r1, [fp, #-12]
  b8:	add	r0, r0, r1, lsl #2
  bc:	ldr	r0, [r0]
  c0:	str	r0, [fp, #-16]
  c4:	ldr	r0, [fp, #-4]
  c8:	movw	r1, #0
  cc:	cmp	r0, r1
  d0:	beq	f0 <generate_product_list+0xa4>
  d4:	ldr	r0, [fp, #-16]
  d8:	ldr	r0, [r0]
  dc:	ldr	r1, [fp, #-4]
  e0:	bl	0 <strcmp>
  e4:	cmp	r0, #0
  e8:	beq	f0 <generate_product_list+0xa4>
  ec:	b	2fc <generate_product_list+0x2b0>
  f0:	movw	r0, #0
  f4:	str	r0, [fp, #-20]	; 0xffffffec
  f8:	ldr	r0, [fp, #-20]	; 0xffffffec
  fc:	ldr	r1, [fp, #-16]
 100:	ldr	r1, [r1, #28]
 104:	cmp	r0, r1
 108:	bge	2f8 <generate_product_list+0x2ac>
 10c:	ldr	r0, [fp, #-16]
 110:	ldr	r0, [r0, #32]
 114:	ldr	r1, [fp, #-20]	; 0xffffffec
 118:	add	r0, r0, r1, lsl #2
 11c:	ldr	r0, [r0]
 120:	str	r0, [fp, #-24]	; 0xffffffe8
 124:	ldr	r0, [fp, #-8]
 128:	movw	r1, #0
 12c:	cmp	r0, r1
 130:	beq	150 <generate_product_list+0x104>
 134:	ldr	r0, [fp, #-24]	; 0xffffffe8
 138:	ldr	r0, [r0]
 13c:	ldr	r1, [fp, #-8]
 140:	bl	0 <strcmp>
 144:	cmp	r0, #0
 148:	beq	150 <generate_product_list+0x104>
 14c:	b	2e8 <generate_product_list+0x29c>
 150:	ldr	r0, [fp, #-24]	; 0xffffffe8
 154:	ldr	r0, [r0, #8]
 158:	cmp	r0, #0
 15c:	ble	2e4 <generate_product_list+0x298>
 160:	movw	r0, #0
 164:	str	r0, [fp, #-28]	; 0xffffffe4
 168:	ldr	r0, [fp, #-28]	; 0xffffffe4
 16c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 170:	ldr	r1, [r1, #8]
 174:	cmp	r0, r1
 178:	bge	2e0 <generate_product_list+0x294>
 17c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 180:	ldr	r0, [r0, #12]
 184:	ldr	r1, [fp, #-28]	; 0xffffffe4
 188:	add	r0, r0, r1, lsl #2
 18c:	ldr	r0, [r0]
 190:	str	r0, [sp, #32]
 194:	ldr	r0, [fp, #-16]
 198:	ldr	r1, [r0]
 19c:	movw	r0, #0
 1a0:	movt	r0, #0
 1a4:	ldr	r2, [r0]
 1a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1ac:	ldr	r3, [r3]
 1b0:	ldr	r0, [r0]
 1b4:	ldr	ip, [sp, #32]
 1b8:	ldr	ip, [ip, #4]
 1bc:	movw	lr, #0
 1c0:	movt	lr, #0
 1c4:	str	r0, [sp, #16]
 1c8:	mov	r0, lr
 1cc:	ldr	lr, [sp, #16]
 1d0:	str	lr, [sp]
 1d4:	str	ip, [sp, #4]
 1d8:	bl	0 <printf>
 1dc:	movw	r1, #0
 1e0:	movt	r1, #0
 1e4:	ldr	r1, [r1]
 1e8:	cmp	r1, #0
 1ec:	beq	228 <generate_product_list+0x1dc>
 1f0:	movw	r0, #0
 1f4:	movt	r0, #0
 1f8:	ldr	r1, [r0]
 1fc:	ldr	r0, [sp, #32]
 200:	ldr	r0, [r0]
 204:	str	r1, [sp, #12]
 208:	bl	0 <coda_type_get_format_name>
 20c:	movw	r1, #0
 210:	movt	r1, #0
 214:	str	r0, [sp, #8]
 218:	mov	r0, r1
 21c:	ldr	r1, [sp, #12]
 220:	ldr	r2, [sp, #8]
 224:	bl	0 <printf>
 228:	movw	r0, #0
 22c:	movt	r0, #0
 230:	ldr	r0, [r0]
 234:	cmp	r0, #0
 238:	beq	2c4 <generate_product_list+0x278>
 23c:	movw	r0, #0
 240:	movt	r0, #0
 244:	ldr	r1, [r0]
 248:	movw	r0, #0
 24c:	movt	r0, #0
 250:	bl	0 <printf>
 254:	ldr	r1, [sp, #32]
 258:	ldr	r1, [r1, #12]
 25c:	movw	r2, #0
 260:	cmp	r1, r2
 264:	beq	2c0 <generate_product_list+0x274>
 268:	movw	r0, #0
 26c:	movt	r0, #0
 270:	ldr	r0, [r0]
 274:	cmp	r0, #0
 278:	beq	288 <generate_product_list+0x23c>
 27c:	movw	r0, #0
 280:	movt	r0, #0
 284:	bl	0 <printf>
 288:	ldr	r0, [sp, #32]
 28c:	ldr	r1, [r0, #12]
 290:	movw	r0, #0
 294:	movt	r0, #0
 298:	bl	0 <printf>
 29c:	movw	r1, #0
 2a0:	movt	r1, #0
 2a4:	ldr	r1, [r1]
 2a8:	cmp	r1, #0
 2ac:	beq	2bc <generate_product_list+0x270>
 2b0:	movw	r0, #0
 2b4:	movt	r0, #0
 2b8:	bl	0 <printf>
 2bc:	b	2c0 <generate_product_list+0x274>
 2c0:	b	2c4 <generate_product_list+0x278>
 2c4:	movw	r0, #0
 2c8:	movt	r0, #0
 2cc:	bl	0 <printf>
 2d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
 2d4:	add	r0, r0, #1
 2d8:	str	r0, [fp, #-28]	; 0xffffffe4
 2dc:	b	168 <generate_product_list+0x11c>
 2e0:	b	2e4 <generate_product_list+0x298>
 2e4:	b	2e8 <generate_product_list+0x29c>
 2e8:	ldr	r0, [fp, #-20]	; 0xffffffec
 2ec:	add	r0, r0, #1
 2f0:	str	r0, [fp, #-20]	; 0xffffffec
 2f4:	b	f8 <generate_product_list+0xac>
 2f8:	b	2fc <generate_product_list+0x2b0>
 2fc:	ldr	r0, [fp, #-12]
 300:	add	r0, r0, #1
 304:	str	r0, [fp, #-12]
 308:	b	68 <generate_product_list+0x1c>
 30c:	mov	sp, fp
 310:	pop	{fp, pc}
 314:	.word	0x0000029c
 318:	.word	0x00000274

0000031c <generate_field_list>:
 31c:	push	{fp, lr}
 320:	mov	fp, sp
 324:	sub	sp, sp, #72	; 0x48
 328:	str	r0, [fp, #-4]
 32c:	str	r1, [fp, #-8]
 330:	str	r2, [fp, #-12]
 334:	ldr	r0, [fp, #-4]
 338:	bl	0 <coda_data_dictionary_get_product_class>
 33c:	str	r0, [fp, #-16]
 340:	ldr	r0, [fp, #-16]
 344:	movw	r1, #0
 348:	cmp	r0, r1
 34c:	bne	3a8 <generate_field_list+0x8c>
 350:	movw	r0, #0
 354:	movt	r0, #0
 358:	ldr	r0, [r0]
 35c:	ldr	r1, [pc, #360]	; 4cc <generate_field_list+0x1b0>
 360:	ldr	r1, [pc, r1]
 364:	str	r0, [fp, #-28]	; 0xffffffe4
 368:	str	r1, [fp, #-32]	; 0xffffffe0
 36c:	bl	0 <__aeabi_read_tp>
 370:	ldr	r1, [fp, #-32]	; 0xffffffe0
 374:	ldr	r0, [r0, r1]
 378:	bl	0 <coda_errno_to_string>
 37c:	ldr	r1, [fp, #-28]	; 0xffffffe4
 380:	str	r0, [sp, #36]	; 0x24
 384:	mov	r0, r1
 388:	movw	r1, #0
 38c:	movt	r1, #0
 390:	ldr	r2, [sp, #36]	; 0x24
 394:	bl	0 <fprintf>
 398:	movw	r1, #1
 39c:	str	r0, [sp, #32]
 3a0:	mov	r0, r1
 3a4:	bl	0 <exit>
 3a8:	ldr	r0, [fp, #-16]
 3ac:	ldr	r1, [fp, #-8]
 3b0:	bl	0 <coda_product_class_get_product_type>
 3b4:	str	r0, [fp, #-20]	; 0xffffffec
 3b8:	ldr	r0, [fp, #-20]	; 0xffffffec
 3bc:	movw	r1, #0
 3c0:	cmp	r0, r1
 3c4:	bne	420 <generate_field_list+0x104>
 3c8:	movw	r0, #0
 3cc:	movt	r0, #0
 3d0:	ldr	r0, [r0]
 3d4:	ldr	r1, [pc, #236]	; 4c8 <generate_field_list+0x1ac>
 3d8:	ldr	r1, [pc, r1]
 3dc:	str	r0, [sp, #28]
 3e0:	str	r1, [sp, #24]
 3e4:	bl	0 <__aeabi_read_tp>
 3e8:	ldr	r1, [sp, #24]
 3ec:	ldr	r0, [r0, r1]
 3f0:	bl	0 <coda_errno_to_string>
 3f4:	ldr	r1, [sp, #28]
 3f8:	str	r0, [sp, #20]
 3fc:	mov	r0, r1
 400:	movw	r1, #0
 404:	movt	r1, #0
 408:	ldr	r2, [sp, #20]
 40c:	bl	0 <fprintf>
 410:	movw	r1, #1
 414:	str	r0, [sp, #16]
 418:	mov	r0, r1
 41c:	bl	0 <exit>
 420:	ldr	r0, [fp, #-20]	; 0xffffffec
 424:	ldr	r1, [fp, #-12]
 428:	bl	0 <coda_product_type_get_product_definition_by_version>
 42c:	str	r0, [fp, #-24]	; 0xffffffe8
 430:	ldr	r0, [fp, #-24]	; 0xffffffe8
 434:	movw	r1, #0
 438:	cmp	r0, r1
 43c:	bne	498 <generate_field_list+0x17c>
 440:	movw	r0, #0
 444:	movt	r0, #0
 448:	ldr	r0, [r0]
 44c:	ldr	r1, [pc, #112]	; 4c4 <generate_field_list+0x1a8>
 450:	ldr	r1, [pc, r1]
 454:	str	r0, [sp, #12]
 458:	str	r1, [sp, #8]
 45c:	bl	0 <__aeabi_read_tp>
 460:	ldr	r1, [sp, #8]
 464:	ldr	r0, [r0, r1]
 468:	bl	0 <coda_errno_to_string>
 46c:	ldr	r1, [sp, #12]
 470:	str	r0, [sp, #4]
 474:	mov	r0, r1
 478:	movw	r1, #0
 47c:	movt	r1, #0
 480:	ldr	r2, [sp, #4]
 484:	bl	0 <fprintf>
 488:	movw	r1, #1
 48c:	str	r0, [sp]
 490:	mov	r0, r1
 494:	bl	0 <exit>
 498:	ldr	r0, [fp, #-24]	; 0xffffffe8
 49c:	ldr	r0, [r0, #28]
 4a0:	movw	r1, #0
 4a4:	cmp	r0, r1
 4a8:	beq	4bc <generate_field_list+0x1a0>
 4ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
 4b0:	ldr	r0, [r0, #28]
 4b4:	movw	r1, #0
 4b8:	bl	4d0 <print_type>
 4bc:	mov	sp, fp
 4c0:	pop	{fp, pc}
 4c4:	.word	0x0000006c
 4c8:	.word	0x000000e8
 4cc:	.word	0x00000164

000004d0 <print_type>:
 4d0:	push	{fp, lr}
 4d4:	mov	fp, sp
 4d8:	sub	sp, sp, #120	; 0x78
 4dc:	str	r0, [fp, #-4]
 4e0:	str	r1, [fp, #-8]
 4e4:	movw	r0, #0
 4e8:	str	r0, [fp, #-16]
 4ec:	ldr	r0, [fp, #-8]
 4f0:	cmp	r0, #32
 4f4:	blt	53c <print_type+0x6c>
 4f8:	movw	r0, #0
 4fc:	movt	r0, #0
 500:	bl	0 <printf>
 504:	movw	r1, #0
 508:	movt	r1, #0
 50c:	ldr	r1, [r1]
 510:	ldr	r2, [fp, #-8]
 514:	str	r0, [sp, #52]	; 0x34
 518:	mov	r0, r1
 51c:	movw	r1, #0
 520:	movt	r1, #0
 524:	movw	r3, #32
 528:	bl	0 <fprintf>
 52c:	movw	r1, #1
 530:	str	r0, [sp, #48]	; 0x30
 534:	mov	r0, r1
 538:	bl	0 <exit>
 53c:	ldr	r0, [fp, #-4]
 540:	ldr	r1, [fp, #-8]
 544:	movw	r2, #0
 548:	movt	r2, #0
 54c:	add	r1, r2, r1, lsl #2
 550:	str	r0, [r1]
 554:	ldr	r0, [fp, #-4]
 558:	sub	r1, fp, #12
 55c:	bl	0 <coda_type_get_class>
 560:	ldr	r1, [fp, #-12]
 564:	cmp	r1, #0
 568:	beq	578 <print_type+0xa8>
 56c:	ldr	r0, [fp, #-12]
 570:	cmp	r0, #1
 574:	bne	58c <print_type+0xbc>
 578:	movw	r0, #0
 57c:	movt	r0, #0
 580:	ldr	r0, [r0]
 584:	str	r0, [fp, #-16]
 588:	b	5b8 <print_type+0xe8>
 58c:	ldr	r0, [fp, #-12]
 590:	cmp	r0, #6
 594:	bne	5ac <print_type+0xdc>
 598:	movw	r0, #0
 59c:	movt	r0, #0
 5a0:	ldr	r0, [r0]
 5a4:	str	r0, [fp, #-16]
 5a8:	b	5b4 <print_type+0xe4>
 5ac:	movw	r0, #1
 5b0:	str	r0, [fp, #-16]
 5b4:	b	5b8 <print_type+0xe8>
 5b8:	ldr	r0, [fp, #-16]
 5bc:	cmp	r0, #0
 5c0:	beq	7e0 <print_type+0x310>
 5c4:	ldr	r0, [fp, #-8]
 5c8:	bl	9c8 <print_path>
 5cc:	movw	r0, #0
 5d0:	movt	r0, #0
 5d4:	ldr	r0, [r0]
 5d8:	cmp	r0, #0
 5dc:	beq	628 <print_type+0x158>
 5e0:	ldr	r0, [fp, #-4]
 5e4:	sub	r1, fp, #20
 5e8:	bl	0 <coda_type_get_read_type>
 5ec:	movw	r1, #0
 5f0:	movt	r1, #0
 5f4:	ldr	r1, [r1]
 5f8:	ldr	r2, [fp, #-20]	; 0xffffffec
 5fc:	str	r0, [sp, #44]	; 0x2c
 600:	mov	r0, r2
 604:	str	r1, [sp, #40]	; 0x28
 608:	bl	0 <coda_type_get_native_type_name>
 60c:	movw	r1, #0
 610:	movt	r1, #0
 614:	str	r0, [sp, #36]	; 0x24
 618:	mov	r0, r1
 61c:	ldr	r1, [sp, #40]	; 0x28
 620:	ldr	r2, [sp, #36]	; 0x24
 624:	bl	0 <printf>
 628:	movw	r0, #0
 62c:	movt	r0, #0
 630:	ldr	r0, [r0]
 634:	cmp	r0, #0
 638:	beq	684 <print_type+0x1b4>
 63c:	ldr	r0, [fp, #-4]
 640:	sub	r1, fp, #24
 644:	bl	0 <coda_type_get_format>
 648:	movw	r1, #0
 64c:	movt	r1, #0
 650:	ldr	r1, [r1]
 654:	ldr	r2, [fp, #-24]	; 0xffffffe8
 658:	str	r0, [sp, #32]
 65c:	mov	r0, r2
 660:	str	r1, [sp, #28]
 664:	bl	0 <coda_type_get_format_name>
 668:	movw	r1, #0
 66c:	movt	r1, #0
 670:	str	r0, [sp, #24]
 674:	mov	r0, r1
 678:	ldr	r1, [sp, #28]
 67c:	ldr	r2, [sp, #24]
 680:	bl	0 <printf>
 684:	movw	r0, #0
 688:	movt	r0, #0
 68c:	ldr	r0, [r0]
 690:	cmp	r0, #0
 694:	beq	72c <print_type+0x25c>
 698:	movw	r0, #0
 69c:	movt	r0, #0
 6a0:	ldr	r1, [r0]
 6a4:	movw	r0, #0
 6a8:	movt	r0, #0
 6ac:	bl	0 <printf>
 6b0:	ldr	r1, [fp, #-4]
 6b4:	str	r0, [sp, #20]
 6b8:	mov	r0, r1
 6bc:	sub	r1, fp, #28
 6c0:	bl	0 <coda_type_get_unit>
 6c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
 6c8:	movw	r2, #0
 6cc:	cmp	r1, r2
 6d0:	beq	728 <print_type+0x258>
 6d4:	movw	r0, #0
 6d8:	movt	r0, #0
 6dc:	ldr	r0, [r0]
 6e0:	cmp	r0, #0
 6e4:	beq	6f4 <print_type+0x224>
 6e8:	movw	r0, #0
 6ec:	movt	r0, #0
 6f0:	bl	0 <printf>
 6f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
 6f8:	movw	r0, #0
 6fc:	movt	r0, #0
 700:	bl	0 <printf>
 704:	movw	r1, #0
 708:	movt	r1, #0
 70c:	ldr	r1, [r1]
 710:	cmp	r1, #0
 714:	beq	724 <print_type+0x254>
 718:	movw	r0, #0
 71c:	movt	r0, #0
 720:	bl	0 <printf>
 724:	b	728 <print_type+0x258>
 728:	b	72c <print_type+0x25c>
 72c:	movw	r0, #0
 730:	movt	r0, #0
 734:	ldr	r0, [r0]
 738:	cmp	r0, #0
 73c:	beq	7d4 <print_type+0x304>
 740:	movw	r0, #0
 744:	movt	r0, #0
 748:	ldr	r1, [r0]
 74c:	movw	r0, #0
 750:	movt	r0, #0
 754:	bl	0 <printf>
 758:	ldr	r1, [fp, #-4]
 75c:	str	r0, [sp, #16]
 760:	mov	r0, r1
 764:	sub	r1, fp, #32
 768:	bl	0 <coda_type_get_description>
 76c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 770:	movw	r2, #0
 774:	cmp	r1, r2
 778:	beq	7d0 <print_type+0x300>
 77c:	movw	r0, #0
 780:	movt	r0, #0
 784:	ldr	r0, [r0]
 788:	cmp	r0, #0
 78c:	beq	79c <print_type+0x2cc>
 790:	movw	r0, #0
 794:	movt	r0, #0
 798:	bl	0 <printf>
 79c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 7a0:	movw	r0, #0
 7a4:	movt	r0, #0
 7a8:	bl	0 <printf>
 7ac:	movw	r1, #0
 7b0:	movt	r1, #0
 7b4:	ldr	r1, [r1]
 7b8:	cmp	r1, #0
 7bc:	beq	7cc <print_type+0x2fc>
 7c0:	movw	r0, #0
 7c4:	movt	r0, #0
 7c8:	bl	0 <printf>
 7cc:	b	7d0 <print_type+0x300>
 7d0:	b	7d4 <print_type+0x304>
 7d4:	movw	r0, #0
 7d8:	movt	r0, #0
 7dc:	bl	0 <printf>
 7e0:	movw	r0, #0
 7e4:	movt	r0, #0
 7e8:	ldr	r0, [r0]
 7ec:	cmp	r0, #0
 7f0:	beq	854 <print_type+0x384>
 7f4:	ldr	r0, [fp, #-4]
 7f8:	sub	r1, fp, #36	; 0x24
 7fc:	bl	0 <coda_type_has_attributes>
 800:	ldr	r1, [fp, #-36]	; 0xffffffdc
 804:	cmp	r1, #0
 808:	beq	850 <print_type+0x380>
 80c:	ldr	r0, [fp, #-4]
 810:	sub	r1, fp, #40	; 0x28
 814:	bl	0 <coda_type_get_attributes>
 818:	ldr	r1, [fp, #-8]
 81c:	add	r1, r1, #1
 820:	movw	r2, #0
 824:	movt	r2, #0
 828:	add	r1, r2, r1, lsl #2
 82c:	mvn	r2, #0
 830:	str	r2, [r1]
 834:	ldr	r1, [fp, #-40]	; 0xffffffd8
 838:	ldr	r2, [fp, #-8]
 83c:	add	r2, r2, #1
 840:	str	r0, [sp, #12]
 844:	mov	r0, r1
 848:	mov	r1, r2
 84c:	bl	4d0 <print_type>
 850:	b	854 <print_type+0x384>
 854:	ldr	r0, [fp, #-12]
 858:	cmp	r0, #0
 85c:	str	r0, [sp, #8]
 860:	beq	888 <print_type+0x3b8>
 864:	b	868 <print_type+0x398>
 868:	ldr	r0, [sp, #8]
 86c:	cmp	r0, #1
 870:	beq	934 <print_type+0x464>
 874:	b	878 <print_type+0x3a8>
 878:	ldr	r0, [sp, #8]
 87c:	cmp	r0, #6
 880:	beq	97c <print_type+0x4ac>
 884:	b	9bc <print_type+0x4ec>
 888:	ldr	r0, [fp, #-4]
 88c:	sub	r1, fp, #44	; 0x2c
 890:	bl	0 <coda_type_get_num_record_fields>
 894:	movw	r1, #0
 898:	str	r1, [fp, #-48]	; 0xffffffd0
 89c:	ldr	r0, [fp, #-48]	; 0xffffffd0
 8a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
 8a4:	cmp	r0, r1
 8a8:	bge	930 <print_type+0x460>
 8ac:	ldr	r0, [fp, #-4]
 8b0:	ldr	r1, [fp, #-48]	; 0xffffffd0
 8b4:	sub	r2, fp, #52	; 0x34
 8b8:	bl	0 <coda_type_get_record_field_type>
 8bc:	movw	r1, #0
 8c0:	movt	r1, #0
 8c4:	ldr	r1, [r1]
 8c8:	cmp	r1, #0
 8cc:	bne	8f4 <print_type+0x424>
 8d0:	ldr	r0, [fp, #-4]
 8d4:	ldr	r1, [fp, #-48]	; 0xffffffd0
 8d8:	sub	r2, fp, #56	; 0x38
 8dc:	bl	0 <coda_type_get_record_field_hidden_status>
 8e0:	ldr	r1, [fp, #-56]	; 0xffffffc8
 8e4:	cmp	r1, #0
 8e8:	beq	8f0 <print_type+0x420>
 8ec:	b	920 <print_type+0x450>
 8f0:	b	8f4 <print_type+0x424>
 8f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
 8f8:	ldr	r1, [fp, #-8]
 8fc:	add	r1, r1, #1
 900:	movw	r2, #0
 904:	movt	r2, #0
 908:	add	r1, r2, r1, lsl #2
 90c:	str	r0, [r1]
 910:	ldr	r0, [fp, #-52]	; 0xffffffcc
 914:	ldr	r1, [fp, #-8]
 918:	add	r1, r1, #1
 91c:	bl	4d0 <print_type>
 920:	ldr	r0, [fp, #-48]	; 0xffffffd0
 924:	add	r0, r0, #1
 928:	str	r0, [fp, #-48]	; 0xffffffd0
 92c:	b	89c <print_type+0x3cc>
 930:	b	9c0 <print_type+0x4f0>
 934:	ldr	r0, [fp, #-4]
 938:	add	r1, sp, #60	; 0x3c
 93c:	bl	0 <coda_type_get_array_base_type>
 940:	ldr	r1, [fp, #-8]
 944:	add	r1, r1, #1
 948:	movw	r2, #0
 94c:	movt	r2, #0
 950:	add	r1, r2, r1, lsl #2
 954:	movw	r2, #0
 958:	str	r2, [r1]
 95c:	ldr	r1, [sp, #60]	; 0x3c
 960:	ldr	r2, [fp, #-8]
 964:	add	r2, r2, #1
 968:	str	r0, [sp, #4]
 96c:	mov	r0, r1
 970:	mov	r1, r2
 974:	bl	4d0 <print_type>
 978:	b	9c0 <print_type+0x4f0>
 97c:	movw	r0, #0
 980:	movt	r0, #0
 984:	ldr	r0, [r0]
 988:	cmp	r0, #0
 98c:	bne	9b8 <print_type+0x4e8>
 990:	ldr	r0, [fp, #-4]
 994:	add	r1, sp, #56	; 0x38
 998:	bl	0 <coda_type_get_special_base_type>
 99c:	ldr	r1, [sp, #56]	; 0x38
 9a0:	ldr	r2, [fp, #-8]
 9a4:	str	r0, [sp]
 9a8:	mov	r0, r1
 9ac:	mov	r1, r2
 9b0:	bl	4d0 <print_type>
 9b4:	b	9c0 <print_type+0x4f0>
 9b8:	b	9bc <print_type+0x4ec>
 9bc:	b	9c0 <print_type+0x4f0>
 9c0:	mov	sp, fp
 9c4:	pop	{fp, pc}

000009c8 <print_path>:
 9c8:	push	{fp, lr}
 9cc:	mov	fp, sp
 9d0:	sub	sp, sp, #64	; 0x40
 9d4:	str	r0, [fp, #-4]
 9d8:	movw	r0, #0
 9dc:	movt	r0, #0
 9e0:	bl	0 <printf>
 9e4:	movw	r1, #0
 9e8:	str	r1, [fp, #-8]
 9ec:	ldr	r0, [fp, #-8]
 9f0:	ldr	r1, [fp, #-4]
 9f4:	cmp	r0, r1
 9f8:	bge	c20 <print_path+0x258>
 9fc:	ldr	r0, [fp, #-8]
 a00:	add	r0, r0, #1
 a04:	movw	r1, #0
 a08:	movt	r1, #0
 a0c:	add	r0, r1, r0, lsl #2
 a10:	ldr	r0, [r0]
 a14:	cmn	r0, #1
 a18:	bne	a2c <print_path+0x64>
 a1c:	movw	r0, #0
 a20:	movt	r0, #0
 a24:	bl	0 <printf>
 a28:	b	c0c <print_path+0x244>
 a2c:	ldr	r0, [fp, #-8]
 a30:	movw	r1, #0
 a34:	movt	r1, #0
 a38:	ldr	r0, [r1, r0, lsl #2]
 a3c:	str	r0, [fp, #-12]
 a40:	ldr	r0, [fp, #-12]
 a44:	ldr	r0, [r0, #8]
 a48:	cmp	r0, #0
 a4c:	str	r0, [sp, #4]
 a50:	beq	a68 <print_path+0xa0>
 a54:	b	a58 <print_path+0x90>
 a58:	ldr	r0, [sp, #4]
 a5c:	cmp	r0, #1
 a60:	beq	ad4 <print_path+0x10c>
 a64:	b	be8 <print_path+0x220>
 a68:	ldr	r0, [fp, #-12]
 a6c:	ldr	r1, [fp, #-8]
 a70:	add	r1, r1, #1
 a74:	movw	r2, #0
 a78:	movt	r2, #0
 a7c:	add	r1, r2, r1, lsl #2
 a80:	ldr	r1, [r1]
 a84:	sub	r2, fp, #16
 a88:	bl	0 <coda_type_get_record_field_name>
 a8c:	ldr	r1, [fp, #-8]
 a90:	cmp	r1, #0
 a94:	ble	ac0 <print_path+0xf8>
 a98:	ldr	r0, [fp, #-8]
 a9c:	movw	r1, #0
 aa0:	movt	r1, #0
 aa4:	add	r0, r1, r0, lsl #2
 aa8:	ldr	r0, [r0]
 aac:	cmn	r0, #1
 ab0:	beq	ac0 <print_path+0xf8>
 ab4:	movw	r0, #0
 ab8:	movt	r0, #0
 abc:	bl	0 <printf>
 ac0:	ldr	r1, [fp, #-16]
 ac4:	movw	r0, #0
 ac8:	movt	r0, #0
 acc:	bl	0 <printf>
 ad0:	b	c08 <print_path+0x240>
 ad4:	add	r2, sp, #16
 ad8:	ldr	r0, [fp, #-12]
 adc:	add	r1, sp, #12
 ae0:	bl	0 <coda_type_get_array_dim>
 ae4:	movw	r1, #0
 ae8:	movt	r1, #0
 aec:	str	r0, [sp]
 af0:	mov	r0, r1
 af4:	bl	0 <printf>
 af8:	movw	r1, #0
 afc:	str	r1, [sp, #8]
 b00:	ldr	r0, [sp, #8]
 b04:	ldr	r1, [sp, #12]
 b08:	cmp	r0, r1
 b0c:	bge	bd8 <print_path+0x210>
 b10:	ldr	r0, [sp, #8]
 b14:	cmp	r0, #0
 b18:	ble	b28 <print_path+0x160>
 b1c:	movw	r0, #0
 b20:	movt	r0, #0
 b24:	bl	0 <printf>
 b28:	ldr	r0, [sp, #8]
 b2c:	add	r1, sp, #16
 b30:	add	r0, r1, r0, lsl #2
 b34:	ldr	r0, [r0]
 b38:	cmp	r0, #0
 b3c:	bge	ba8 <print_path+0x1e0>
 b40:	movw	r0, #0
 b44:	movt	r0, #0
 b48:	ldr	r0, [r0]
 b4c:	cmp	r0, #0
 b50:	beq	b98 <print_path+0x1d0>
 b54:	ldr	r0, [fp, #-12]
 b58:	add	r0, r0, #84	; 0x54
 b5c:	ldr	r1, [sp, #8]
 b60:	add	r0, r0, r1, lsl #2
 b64:	ldr	r0, [r0]
 b68:	movw	r1, #0
 b6c:	cmp	r0, r1
 b70:	beq	b98 <print_path+0x1d0>
 b74:	ldr	r0, [fp, #-12]
 b78:	add	r0, r0, #84	; 0x54
 b7c:	ldr	r1, [sp, #8]
 b80:	add	r0, r0, r1, lsl #2
 b84:	ldr	r0, [r0]
 b88:	movw	r1, #0
 b8c:	movt	r1, #0
 b90:	bl	0 <coda_expression_print>
 b94:	b	ba4 <print_path+0x1dc>
 b98:	movw	r0, #0
 b9c:	movt	r0, #0
 ba0:	bl	0 <printf>
 ba4:	b	bc4 <print_path+0x1fc>
 ba8:	ldr	r0, [sp, #8]
 bac:	add	r1, sp, #16
 bb0:	add	r0, r1, r0, lsl #2
 bb4:	ldr	r1, [r0]
 bb8:	movw	r0, #0
 bbc:	movt	r0, #0
 bc0:	bl	0 <printf>
 bc4:	b	bc8 <print_path+0x200>
 bc8:	ldr	r0, [sp, #8]
 bcc:	add	r0, r0, #1
 bd0:	str	r0, [sp, #8]
 bd4:	b	b00 <print_path+0x138>
 bd8:	movw	r0, #0
 bdc:	movt	r0, #0
 be0:	bl	0 <printf>
 be4:	b	c08 <print_path+0x240>
 be8:	movw	r0, #0
 bec:	movt	r0, #0
 bf0:	movw	r1, #0
 bf4:	movt	r1, #0
 bf8:	movw	r2, #125	; 0x7d
 bfc:	movw	r3, #0
 c00:	movt	r3, #0
 c04:	bl	0 <__assert_fail>
 c08:	b	c0c <print_path+0x244>
 c0c:	b	c10 <print_path+0x248>
 c10:	ldr	r0, [fp, #-8]
 c14:	add	r0, r0, #1
 c18:	str	r0, [fp, #-8]
 c1c:	b	9ec <print_path+0x24>
 c20:	mov	sp, fp
 c24:	pop	{fp, pc}
