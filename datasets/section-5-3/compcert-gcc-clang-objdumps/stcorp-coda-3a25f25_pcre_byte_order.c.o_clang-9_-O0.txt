
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/pcre/pcre_byte_order.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_pcre_pattern_to_host_byte_order>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #24
   c:	str	r0, [fp, #-8]
  10:	str	r1, [sp, #12]
  14:	str	r2, [sp, #8]
  18:	ldr	r0, [fp, #-8]
  1c:	str	r0, [sp, #4]
  20:	ldr	r0, [sp, #4]
  24:	movw	r1, #0
  28:	cmp	r0, r1
  2c:	bne	3c <coda_pcre_pattern_to_host_byte_order+0x3c>
  30:	mvn	r0, #1
  34:	str	r0, [fp, #-4]
  38:	b	270 <coda_pcre_pattern_to_host_byte_order+0x270>
  3c:	ldr	r0, [pc, #568]	; 27c <coda_pcre_pattern_to_host_byte_order+0x27c>
  40:	ldr	r1, [sp, #4]
  44:	ldr	r1, [r1]
  48:	cmp	r1, r0
  4c:	bne	88 <coda_pcre_pattern_to_host_byte_order+0x88>
  50:	ldr	r0, [sp, #4]
  54:	ldr	r0, [r0, #12]
  58:	and	r0, r0, #1
  5c:	cmp	r0, #0
  60:	bne	70 <coda_pcre_pattern_to_host_byte_order+0x70>
  64:	mvn	r0, #27
  68:	str	r0, [fp, #-4]
  6c:	b	270 <coda_pcre_pattern_to_host_byte_order+0x270>
  70:	ldr	r0, [sp, #8]
  74:	ldr	r1, [sp, #4]
  78:	str	r0, [r1, #48]	; 0x30
  7c:	movw	r0, #0
  80:	str	r0, [fp, #-4]
  84:	b	270 <coda_pcre_pattern_to_host_byte_order+0x270>
  88:	ldr	r0, [pc, #496]	; 280 <coda_pcre_pattern_to_host_byte_order+0x280>
  8c:	ldr	r1, [sp, #4]
  90:	ldr	r1, [r1]
  94:	cmp	r1, r0
  98:	beq	a8 <coda_pcre_pattern_to_host_byte_order+0xa8>
  9c:	mvn	r0, #3
  a0:	str	r0, [fp, #-4]
  a4:	b	270 <coda_pcre_pattern_to_host_byte_order+0x270>
  a8:	ldr	r0, [sp, #4]
  ac:	ldr	r0, [r0, #12]
  b0:	bl	284 <swap_uint32>
  b4:	and	r0, r0, #1
  b8:	cmp	r0, #0
  bc:	bne	cc <coda_pcre_pattern_to_host_byte_order+0xcc>
  c0:	mvn	r0, #27
  c4:	str	r0, [fp, #-4]
  c8:	b	270 <coda_pcre_pattern_to_host_byte_order+0x270>
  cc:	ldr	r0, [pc, #424]	; 27c <coda_pcre_pattern_to_host_byte_order+0x27c>
  d0:	ldr	r1, [sp, #4]
  d4:	str	r0, [r1]
  d8:	ldr	r0, [sp, #4]
  dc:	ldr	r0, [r0, #4]
  e0:	bl	284 <swap_uint32>
  e4:	ldr	r1, [sp, #4]
  e8:	str	r0, [r1, #4]
  ec:	ldr	r0, [sp, #4]
  f0:	ldr	r0, [r0, #8]
  f4:	bl	284 <swap_uint32>
  f8:	ldr	r1, [sp, #4]
  fc:	str	r0, [r1, #8]
 100:	ldr	r0, [sp, #4]
 104:	ldr	r0, [r0, #12]
 108:	bl	284 <swap_uint32>
 10c:	ldr	r1, [sp, #4]
 110:	str	r0, [r1, #12]
 114:	ldr	r0, [sp, #4]
 118:	ldr	r0, [r0, #16]
 11c:	bl	284 <swap_uint32>
 120:	ldr	r1, [sp, #4]
 124:	str	r0, [r1, #16]
 128:	ldr	r0, [sp, #4]
 12c:	ldr	r0, [r0, #20]
 130:	bl	284 <swap_uint32>
 134:	ldr	r1, [sp, #4]
 138:	str	r0, [r1, #20]
 13c:	ldr	r0, [sp, #4]
 140:	ldrh	r0, [r0, #24]
 144:	bl	2cc <swap_uint16>
 148:	ldr	r1, [sp, #4]
 14c:	strh	r0, [r1, #24]
 150:	ldr	r0, [sp, #4]
 154:	ldrh	r0, [r0, #26]
 158:	bl	2cc <swap_uint16>
 15c:	ldr	r1, [sp, #4]
 160:	strh	r0, [r1, #26]
 164:	ldr	r0, [sp, #4]
 168:	ldrh	r0, [r0, #28]
 16c:	bl	2cc <swap_uint16>
 170:	ldr	r1, [sp, #4]
 174:	strh	r0, [r1, #28]
 178:	ldr	r0, [sp, #4]
 17c:	ldrh	r0, [r0, #30]
 180:	bl	2cc <swap_uint16>
 184:	ldr	r1, [sp, #4]
 188:	strh	r0, [r1, #30]
 18c:	ldr	r0, [sp, #4]
 190:	ldrh	r0, [r0, #32]
 194:	bl	2cc <swap_uint16>
 198:	ldr	r1, [sp, #4]
 19c:	strh	r0, [r1, #32]
 1a0:	ldr	r0, [sp, #4]
 1a4:	ldrh	r0, [r0, #34]	; 0x22
 1a8:	bl	2cc <swap_uint16>
 1ac:	ldr	r1, [sp, #4]
 1b0:	strh	r0, [r1, #34]	; 0x22
 1b4:	ldr	r0, [sp, #4]
 1b8:	ldrh	r0, [r0, #36]	; 0x24
 1bc:	bl	2cc <swap_uint16>
 1c0:	ldr	r1, [sp, #4]
 1c4:	strh	r0, [r1, #36]	; 0x24
 1c8:	ldr	r0, [sp, #4]
 1cc:	ldrh	r0, [r0, #38]	; 0x26
 1d0:	bl	2cc <swap_uint16>
 1d4:	ldr	r1, [sp, #4]
 1d8:	strh	r0, [r1, #38]	; 0x26
 1dc:	ldr	r0, [sp, #4]
 1e0:	ldrh	r0, [r0, #40]	; 0x28
 1e4:	bl	2cc <swap_uint16>
 1e8:	ldr	r1, [sp, #4]
 1ec:	strh	r0, [r1, #40]	; 0x28
 1f0:	ldr	r0, [sp, #8]
 1f4:	ldr	r1, [sp, #4]
 1f8:	str	r0, [r1, #48]	; 0x30
 1fc:	ldr	r0, [sp, #12]
 200:	movw	r1, #0
 204:	cmp	r0, r1
 208:	beq	268 <coda_pcre_pattern_to_host_byte_order+0x268>
 20c:	ldr	r0, [sp, #12]
 210:	ldr	r0, [r0]
 214:	and	r0, r0, #1
 218:	cmp	r0, #0
 21c:	beq	268 <coda_pcre_pattern_to_host_byte_order+0x268>
 220:	ldr	r0, [sp, #12]
 224:	ldr	r0, [r0, #4]
 228:	str	r0, [sp]
 22c:	ldr	r0, [sp]
 230:	ldr	r0, [r0]
 234:	bl	284 <swap_uint32>
 238:	ldr	r1, [sp]
 23c:	str	r0, [r1]
 240:	ldr	r0, [sp]
 244:	ldr	r0, [r0, #4]
 248:	bl	284 <swap_uint32>
 24c:	ldr	r1, [sp]
 250:	str	r0, [r1, #4]
 254:	ldr	r0, [sp]
 258:	ldr	r0, [r0, #40]	; 0x28
 25c:	bl	284 <swap_uint32>
 260:	ldr	r1, [sp]
 264:	str	r0, [r1, #40]	; 0x28
 268:	movw	r0, #0
 26c:	str	r0, [fp, #-4]
 270:	ldr	r0, [fp, #-4]
 274:	mov	sp, fp
 278:	pop	{fp, pc}
 27c:	.word	0x50435245
 280:	.word	0x45524350

00000284 <swap_uint32>:
 284:	sub	sp, sp, #4
 288:	str	r0, [sp]
 28c:	ldr	r0, [sp]
 290:	and	r0, r0, #255	; 0xff
 294:	lsl	r0, r0, #24
 298:	ldr	r1, [sp]
 29c:	and	r1, r1, #65280	; 0xff00
 2a0:	lsl	r1, r1, #8
 2a4:	orr	r0, r0, r1
 2a8:	ldr	r1, [sp]
 2ac:	and	r1, r1, #16711680	; 0xff0000
 2b0:	lsr	r1, r1, #8
 2b4:	orr	r0, r0, r1
 2b8:	ldr	r1, [sp]
 2bc:	lsr	r1, r1, #24
 2c0:	orr	r0, r0, r1
 2c4:	add	sp, sp, #4
 2c8:	bx	lr

000002cc <swap_uint16>:
 2cc:	sub	sp, sp, #4
 2d0:	strh	r0, [sp, #2]
 2d4:	ldrh	r0, [sp, #2]
 2d8:	asr	r0, r0, #8
 2dc:	ldrh	r1, [sp, #2]
 2e0:	lsl	r1, r1, #8
 2e4:	orr	r0, r0, r1
 2e8:	uxth	r0, r0
 2ec:	add	sp, sp, #4
 2f0:	bx	lr
