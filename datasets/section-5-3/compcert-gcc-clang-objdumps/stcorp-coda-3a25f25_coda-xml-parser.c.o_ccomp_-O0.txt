
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-xml-parser.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <is_whitespace>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #16
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	mov	r4, r1
      1c:	mov	r5, r0
      20:	cmp	r5, #0
      24:	bne	3c <is_whitespace+0x3c>
      28:	ldr	r0, [pc, #176]	; e0 <is_whitespace+0xe0>
      2c:	ldr	r1, [pc, #176]	; e4 <is_whitespace+0xe4>
      30:	mov	r2, #53	; 0x35
      34:	ldr	r3, [pc, #160]	; dc <is_whitespace+0xdc>
      38:	bl	0 <__assert_fail>
      3c:	mov	r3, #0
      40:	cmp	r3, r4
      44:	bge	c4 <is_whitespace+0xc4>
      48:	ldrb	r0, [r5, r3]
      4c:	cmp	r0, #32
      50:	beq	68 <is_whitespace+0x68>
      54:	ldrb	r2, [r5, r3]
      58:	cmp	r2, #9
      5c:	movne	ip, #1
      60:	moveq	ip, #0
      64:	b	6c <is_whitespace+0x6c>
      68:	mov	ip, #0
      6c:	cmp	ip, #0
      70:	beq	88 <is_whitespace+0x88>
      74:	ldrb	ip, [r5, r3]
      78:	cmp	ip, #10
      7c:	movne	r0, #1
      80:	moveq	r0, #0
      84:	b	8c <is_whitespace+0x8c>
      88:	mov	r0, #0
      8c:	cmp	r0, #0
      90:	beq	a8 <is_whitespace+0xa8>
      94:	ldrb	r1, [r5, r3]
      98:	cmp	r1, #13
      9c:	movne	ip, #1
      a0:	moveq	ip, #0
      a4:	b	ac <is_whitespace+0xac>
      a8:	mov	ip, #0
      ac:	cmp	ip, #0
      b0:	beq	bc <is_whitespace+0xbc>
      b4:	mov	r0, #0
      b8:	b	c8 <is_whitespace+0xc8>
      bc:	add	r3, r3, #1
      c0:	b	40 <is_whitespace+0x40>
      c4:	mov	r0, #1
      c8:	ldr	r4, [sp, #8]
      cc:	ldr	r5, [sp, #12]
      d0:	ldr	lr, [sp, #4]
      d4:	add	sp, sp, #16
      d8:	bx	lr
      dc:	.word	0x000004e8
      e0:	.word	0x0000032d
      e4:	.word	0x0000018d

000000e8 <convert_to_text>:
      e8:	mov	ip, sp
      ec:	sub	sp, sp, #16
      f0:	str	ip, [sp]
      f4:	str	lr, [sp, #4]
      f8:	str	r4, [sp, #8]
      fc:	str	r5, [sp, #12]
     100:	mov	r5, r0
     104:	ldr	r1, [r5]
     108:	ldr	r2, [r1, #8]
     10c:	cmp	r2, #0
     110:	bne	12c <convert_to_text+0x44>
     114:	ldr	ip, [r5]
     118:	ldr	r0, [ip]
     11c:	cmp	r0, #2
     120:	moveq	ip, #1
     124:	movne	ip, #0
     128:	b	130 <convert_to_text+0x48>
     12c:	mov	ip, #0
     130:	cmp	ip, #0
     134:	bne	14c <convert_to_text+0x64>
     138:	ldr	r0, [pc, #132]	; 1c4 <convert_to_text+0xdc>
     13c:	ldr	r1, [pc, #124]	; 1c0 <convert_to_text+0xd8>
     140:	mov	r2, #70	; 0x46
     144:	ldr	r3, [pc, #112]	; 1bc <convert_to_text+0xd4>
     148:	bl	0 <__assert_fail>
     14c:	mov	r0, #2
     150:	bl	0 <coda_type_text_new>
     154:	mov	r4, r0
     158:	cmp	r4, #0
     15c:	bne	168 <convert_to_text+0x80>
     160:	mvn	r0, #0
     164:	b	1a8 <convert_to_text+0xc0>
     168:	ldr	r3, [r5]
     16c:	ldr	r1, [r3, #36]	; 0x24
     170:	cmp	r1, #0
     174:	beq	198 <convert_to_text+0xb0>
     178:	ldr	r3, [r5]
     17c:	ldr	r0, [r3, #36]	; 0x24
     180:	str	r0, [r4, #36]	; 0x24
     184:	ldr	r0, [r4, #36]	; 0x24
     188:	ldr	r2, [r4, #36]	; 0x24
     18c:	ldr	r2, [r2, #4]
     190:	add	r1, r2, #1
     194:	str	r1, [r0, #4]
     198:	ldr	r0, [r5]
     19c:	bl	0 <coda_type_release>
     1a0:	str	r4, [r5]
     1a4:	mov	r0, #0
     1a8:	ldr	r4, [sp, #8]
     1ac:	ldr	r5, [sp, #12]
     1b0:	ldr	lr, [sp, #4]
     1b4:	add	sp, sp, #16
     1b8:	bx	lr
     1bc:	.word	0x000004f6
     1c0:	.word	0x0000018d
     1c4:	.word	0x0000034b

000001c8 <attribute_record_new>:
     1c8:	mov	ip, sp
     1cc:	sub	sp, sp, #64	; 0x40
     1d0:	str	ip, [sp, #4]
     1d4:	str	lr, [sp, #8]
     1d8:	str	r4, [sp, #24]
     1dc:	str	r5, [sp, #28]
     1e0:	str	r6, [sp, #32]
     1e4:	str	r7, [sp, #36]	; 0x24
     1e8:	str	r8, [sp, #40]	; 0x28
     1ec:	str	r9, [sp, #44]	; 0x2c
     1f0:	str	sl, [sp, #48]	; 0x30
     1f4:	str	fp, [sp, #52]	; 0x34
     1f8:	ldr	r6, [ip]
     1fc:	mov	r5, r3
     200:	mov	r7, r2
     204:	str	r1, [sp, #16]
     208:	mov	r4, r0
     20c:	mov	r9, r6
     210:	cmp	r4, #0
     214:	bne	22c <attribute_record_new+0x64>
     218:	ldr	r0, [pc, #1124]	; 684 <attribute_record_new+0x4bc>
     21c:	ldr	r1, [pc, #1116]	; 680 <attribute_record_new+0x4b8>
     220:	mov	r2, #97	; 0x61
     224:	ldr	r3, [pc, #1088]	; 66c <attribute_record_new+0x4a4>
     228:	bl	0 <__assert_fail>
     22c:	mov	r1, #0
     230:	mov	r0, r4
     234:	bl	0 <coda_mem_record_new>
     238:	mov	r8, r0
     23c:	mov	r0, r7
     240:	bl	0 <coda_element_name_from_xml_name>
     244:	cmp	r7, r0
     248:	beq	3f4 <attribute_record_new+0x22c>
     24c:	ldr	r0, [r4, #44]	; 0x2c
     250:	ldr	r1, [pc, #1052]	; 674 <attribute_record_new+0x4ac>
     254:	bl	0 <coda_hashtable_get_index_from_name>
     258:	mov	sl, r0
     25c:	cmp	r6, #0
     260:	beq	36c <attribute_record_new+0x1a4>
     264:	cmp	sl, #0
     268:	blt	2cc <attribute_record_new+0x104>
     26c:	ldr	r3, [r8, #20]
     270:	ldr	ip, [r3, sl, lsl #2]
     274:	cmp	ip, #0
     278:	beq	290 <attribute_record_new+0xc8>
     27c:	ldr	r0, [pc, #1016]	; 67c <attribute_record_new+0x4b4>
     280:	ldr	r1, [pc, #1016]	; 680 <attribute_record_new+0x4b8>
     284:	mov	r2, #123	; 0x7b
     288:	ldr	r3, [pc, #988]	; 66c <attribute_record_new+0x4a4>
     28c:	bl	0 <__assert_fail>
     290:	mov	r0, r7
     294:	bl	0 <coda_element_name_from_xml_name>
     298:	mov	r2, r0
     29c:	ldr	r3, [r4, #52]	; 0x34
     2a0:	ldr	r0, [r3, sl, lsl #2]
     2a4:	ldr	r0, [r0, #8]
     2a8:	mov	r1, #0
     2ac:	sub	ip, r2, r7
     2b0:	sub	r3, ip, #1
     2b4:	str	r7, [sp]
     2b8:	ldr	r2, [sp, #16]
     2bc:	bl	0 <coda_mem_data_new>
     2c0:	mov	r7, r0
     2c4:	mov	r9, #0
     2c8:	b	320 <attribute_record_new+0x158>
     2cc:	mov	r0, #2
     2d0:	bl	0 <coda_type_text_new>
     2d4:	mov	sl, r0
     2d8:	cmp	sl, #0
     2dc:	bne	2f0 <attribute_record_new+0x128>
     2e0:	mov	r0, r8
     2e4:	bl	0 <coda_dynamic_type_delete>
     2e8:	mov	r0, #0
     2ec:	b	640 <attribute_record_new+0x478>
     2f0:	mov	r0, r7
     2f4:	bl	0 <coda_element_name_from_xml_name>
     2f8:	mov	r1, #0
     2fc:	sub	r2, r0, r7
     300:	sub	r3, r2, #1
     304:	str	r7, [sp]
     308:	ldr	r2, [sp, #16]
     30c:	mov	r0, sl
     310:	bl	0 <coda_mem_data_new>
     314:	mov	r7, r0
     318:	mov	r0, sl
     31c:	bl	0 <coda_type_release>
     320:	cmp	r7, #0
     324:	bne	338 <attribute_record_new+0x170>
     328:	mov	r0, r8
     32c:	bl	0 <coda_dynamic_type_delete>
     330:	mov	r0, #0
     334:	b	640 <attribute_record_new+0x478>
     338:	ldr	r1, [pc, #820]	; 674 <attribute_record_new+0x4ac>
     33c:	mov	r3, r9
     340:	mov	r2, r7
     344:	mov	r0, r8
     348:	bl	0 <coda_mem_record_add_field>
     34c:	cmp	r0, #0
     350:	beq	3f4 <attribute_record_new+0x22c>
     354:	mov	r0, r7
     358:	bl	0 <coda_dynamic_type_delete>
     35c:	mov	r0, r8
     360:	bl	0 <coda_dynamic_type_delete>
     364:	mov	r0, #0
     368:	b	640 <attribute_record_new+0x478>
     36c:	cmp	sl, #0
     370:	blt	3f4 <attribute_record_new+0x22c>
     374:	mov	r0, r7
     378:	bl	0 <coda_element_name_from_xml_name>
     37c:	ldr	ip, [r4, #52]	; 0x34
     380:	ldr	r2, [ip, sl, lsl #2]
     384:	ldr	r2, [r2, #8]
     388:	mov	r1, #0
     38c:	sub	r3, r0, r7
     390:	sub	r3, r3, #1
     394:	str	r7, [sp]
     398:	mov	r0, r2
     39c:	ldr	r2, [sp, #16]
     3a0:	bl	0 <coda_mem_data_new>
     3a4:	mov	r7, r0
     3a8:	cmp	r7, #0
     3ac:	bne	3c0 <attribute_record_new+0x1f8>
     3b0:	mov	r0, r8
     3b4:	bl	0 <coda_dynamic_type_delete>
     3b8:	mov	r0, #0
     3bc:	b	640 <attribute_record_new+0x478>
     3c0:	ldr	r1, [pc, #684]	; 674 <attribute_record_new+0x4ac>
     3c4:	mov	r3, r9
     3c8:	mov	r2, r7
     3cc:	mov	r0, r8
     3d0:	bl	0 <coda_mem_record_add_field>
     3d4:	cmp	r0, #0
     3d8:	beq	3f4 <attribute_record_new+0x22c>
     3dc:	mov	r0, r7
     3e0:	bl	0 <coda_dynamic_type_delete>
     3e4:	mov	r0, r8
     3e8:	bl	0 <coda_dynamic_type_delete>
     3ec:	mov	r0, #0
     3f0:	b	640 <attribute_record_new+0x478>
     3f4:	mov	sl, #0
     3f8:	ldr	r3, [r5, sl, lsl #3]
     3fc:	cmp	r3, #0
     400:	beq	5a4 <attribute_record_new+0x3dc>
     404:	ldr	r7, [r5, sl, lsl #3]
     408:	str	r6, [sp, #20]
     40c:	ldr	r0, [r4, #44]	; 0x2c
     410:	mov	r1, r7
     414:	bl	0 <coda_hashtable_get_index_from_name>
     418:	mov	r9, r0
     41c:	cmp	r9, #0
     420:	bge	458 <attribute_record_new+0x290>
     424:	mov	r0, r7
     428:	bl	0 <coda_element_name_from_xml_name>
     42c:	ldr	r1, [r4, #44]	; 0x2c
     430:	mov	r2, r0
     434:	mov	r0, r1
     438:	mov	r1, r2
     43c:	bl	0 <coda_hashtable_get_index_from_name>
     440:	mov	r9, r0
     444:	cmp	r9, #0
     448:	blt	458 <attribute_record_new+0x290>
     44c:	mov	r0, r7
     450:	bl	0 <coda_element_name_from_xml_name>
     454:	mov	r7, r0
     458:	cmp	r6, #0
     45c:	bne	4b8 <attribute_record_new+0x2f0>
     460:	cmn	r9, #1
     464:	bne	48c <attribute_record_new+0x2c4>
     468:	movw	r0, #65236	; 0xfed4
     46c:	movt	r0, #65535	; 0xffff
     470:	ldr	r1, [pc, #504]	; 670 <attribute_record_new+0x4a8>
     474:	ldr	r2, [r5, sl, lsl #3]
     478:	bl	0 <coda_set_error>
     47c:	mov	r0, r8
     480:	bl	0 <coda_dynamic_type_delete>
     484:	mov	r0, #0
     488:	b	640 <attribute_record_new+0x478>
     48c:	ldr	r2, [r4, #52]	; 0x34
     490:	ldr	r0, [r2, r9, lsl #2]
     494:	ldr	r0, [r0, #8]
     498:	mov	r1, #0
     49c:	lsl	r3, sl, #3
     4a0:	add	r2, r5, r3
     4a4:	ldr	r3, [r2, #4]
     4a8:	ldr	r2, [sp, #16]
     4ac:	bl	0 <coda_mem_string_new>
     4b0:	mov	r9, r0
     4b4:	b	550 <attribute_record_new+0x388>
     4b8:	cmp	r9, #0
     4bc:	bge	510 <attribute_record_new+0x348>
     4c0:	mov	r0, #2
     4c4:	bl	0 <coda_type_text_new>
     4c8:	mov	fp, r0
     4cc:	cmp	fp, #0
     4d0:	bne	4e4 <attribute_record_new+0x31c>
     4d4:	mov	r0, r8
     4d8:	bl	0 <coda_dynamic_type_delete>
     4dc:	mov	r0, #0
     4e0:	b	640 <attribute_record_new+0x478>
     4e4:	mov	r1, #0
     4e8:	lsl	r3, sl, #3
     4ec:	add	ip, r5, r3
     4f0:	ldr	r3, [ip, #4]
     4f4:	ldr	r2, [sp, #16]
     4f8:	mov	r0, fp
     4fc:	bl	0 <coda_mem_string_new>
     500:	mov	r9, r0
     504:	mov	r0, fp
     508:	bl	0 <coda_type_release>
     50c:	b	550 <attribute_record_new+0x388>
     510:	ldr	r1, [r8, #20]
     514:	ldr	r0, [r1, r9, lsl #2]
     518:	cmp	r0, #0
     51c:	bne	59c <attribute_record_new+0x3d4>
     520:	ldr	r3, [r4, #52]	; 0x34
     524:	ldr	ip, [r3, r9, lsl #2]
     528:	ldr	r0, [ip, #8]
     52c:	mov	r1, #0
     530:	lsl	r2, sl, #3
     534:	add	r2, r5, r2
     538:	ldr	r3, [r2, #4]
     53c:	ldr	r2, [sp, #16]
     540:	bl	0 <coda_mem_string_new>
     544:	mov	r9, r0
     548:	mov	r2, #0
     54c:	str	r2, [sp, #20]
     550:	cmp	r9, #0
     554:	bne	568 <attribute_record_new+0x3a0>
     558:	mov	r0, r8
     55c:	bl	0 <coda_dynamic_type_delete>
     560:	mov	r0, #0
     564:	b	640 <attribute_record_new+0x478>
     568:	ldr	r3, [sp, #20]
     56c:	mov	r2, r9
     570:	mov	r1, r7
     574:	mov	r0, r8
     578:	bl	0 <coda_mem_record_add_field>
     57c:	cmp	r0, #0
     580:	beq	59c <attribute_record_new+0x3d4>
     584:	mov	r0, r9
     588:	bl	0 <coda_dynamic_type_delete>
     58c:	mov	r0, r8
     590:	bl	0 <coda_dynamic_type_delete>
     594:	mov	r0, #0
     598:	b	640 <attribute_record_new+0x478>
     59c:	add	sl, sl, #1
     5a0:	b	3f8 <attribute_record_new+0x230>
     5a4:	mov	r1, #0
     5a8:	ldr	r0, [r4, #48]	; 0x30
     5ac:	cmp	r1, r0
     5b0:	bge	63c <attribute_record_new+0x474>
     5b4:	ldr	r0, [r4, #52]	; 0x34
     5b8:	ldr	r2, [r0, r1, lsl #2]
     5bc:	ldrb	r3, [r2, #16]
     5c0:	cmp	r3, #0
     5c4:	bne	5e0 <attribute_record_new+0x418>
     5c8:	ldr	r2, [r8, #20]
     5cc:	ldr	ip, [r2, r1, lsl #2]
     5d0:	cmp	ip, #0
     5d4:	moveq	r2, #1
     5d8:	movne	r2, #0
     5dc:	b	5e4 <attribute_record_new+0x41c>
     5e0:	mov	r2, #0
     5e4:	cmp	r2, #0
     5e8:	beq	634 <attribute_record_new+0x46c>
     5ec:	cmp	r6, #0
     5f0:	bne	624 <attribute_record_new+0x45c>
     5f4:	add	r2, sp, #56	; 0x38
     5f8:	mov	r0, r4
     5fc:	bl	0 <coda_type_get_record_field_real_name>
     600:	movw	r0, #65236	; 0xfed4
     604:	movt	r0, #65535	; 0xffff
     608:	ldr	r1, [pc, #104]	; 678 <attribute_record_new+0x4b0>
     60c:	ldr	r2, [sp, #56]	; 0x38
     610:	bl	0 <coda_set_error>
     614:	mov	r0, r8
     618:	bl	0 <coda_dynamic_type_delete>
     61c:	mov	r0, #0
     620:	b	640 <attribute_record_new+0x478>
     624:	ldr	r2, [r4, #52]	; 0x34
     628:	ldr	ip, [r2, r1, lsl #2]
     62c:	mov	r2, #1
     630:	strb	r2, [ip, #16]
     634:	add	r1, r1, #1
     638:	b	5a8 <attribute_record_new+0x3e0>
     63c:	mov	r0, r8
     640:	ldr	r4, [sp, #24]
     644:	ldr	r5, [sp, #28]
     648:	ldr	r6, [sp, #32]
     64c:	ldr	r7, [sp, #36]	; 0x24
     650:	ldr	r8, [sp, #40]	; 0x28
     654:	ldr	r9, [sp, #44]	; 0x2c
     658:	ldr	sl, [sp, #48]	; 0x30
     65c:	ldr	fp, [sp, #52]	; 0x34
     660:	ldr	lr, [sp, #8]
     664:	add	sp, sp, #64	; 0x40
     668:	bx	lr
     66c:	.word	0x00000506
     670:	.word	0x00000030
     674:	.word	0x00000421
     678:	.word	0x0000009a
     67c:	.word	0x00000000
     680:	.word	0x0000018d
     684:	.word	0x0000011e

00000688 <parser_info_cleanup>:
     688:	mov	ip, sp
     68c:	sub	sp, sp, #16
     690:	str	ip, [sp]
     694:	str	lr, [sp, #4]
     698:	str	r4, [sp, #8]
     69c:	str	r5, [sp, #12]
     6a0:	mov	r4, r0
     6a4:	ldr	ip, [r4]
     6a8:	cmp	ip, #0
     6ac:	beq	6b8 <parser_info_cleanup+0x30>
     6b0:	ldr	r0, [r4]
     6b4:	bl	0 <coda_XML_ParserFree>
     6b8:	mov	r5, #0
     6bc:	ldr	r2, [r4, #12]
     6c0:	cmp	r5, r2
     6c4:	bgt	6f4 <parser_info_cleanup+0x6c>
     6c8:	lsl	r3, r5, #2
     6cc:	add	r2, r4, r3
     6d0:	ldr	r1, [r2, #144]	; 0x90
     6d4:	cmp	r1, #0
     6d8:	beq	6ec <parser_info_cleanup+0x64>
     6dc:	lsl	r1, r5, #2
     6e0:	add	r0, r4, r1
     6e4:	ldr	r0, [r0, #144]	; 0x90
     6e8:	bl	0 <coda_dynamic_type_delete>
     6ec:	add	r5, r5, #1
     6f0:	b	6bc <parser_info_cleanup+0x34>
     6f4:	ldr	r3, [r4, #528]	; 0x210
     6f8:	cmp	r3, #0
     6fc:	beq	708 <parser_info_cleanup+0x80>
     700:	ldr	r0, [r4, #528]	; 0x210
     704:	bl	0 <coda_dynamic_type_delete>
     708:	ldr	r0, [r4, #544]	; 0x220
     70c:	cmp	r0, #0
     710:	beq	71c <parser_info_cleanup+0x94>
     714:	ldr	r0, [r4, #544]	; 0x220
     718:	bl	0 <free>
     71c:	ldr	r4, [sp, #8]
     720:	ldr	r5, [sp, #12]
     724:	ldr	lr, [sp, #4]
     728:	add	sp, sp, #16
     72c:	bx	lr

00000730 <parser_info_init>:
     730:	mov	ip, sp
     734:	sub	sp, sp, #8
     738:	str	ip, [sp]
     73c:	str	lr, [sp, #4]
     740:	mov	r1, #0
     744:	str	r1, [r0]
     748:	mov	r1, #0
     74c:	str	r1, [r0, #4]
     750:	mov	r2, #0
     754:	str	r2, [r0, #8]
     758:	mvn	r3, #0
     75c:	str	r3, [r0, #12]
     760:	mov	r1, #0
     764:	str	r1, [r0, #528]	; 0x210
     768:	mov	r2, #0
     76c:	str	r2, [r0, #532]	; 0x214
     770:	mov	ip, #0
     774:	str	ip, [r0, #536]	; 0x218
     778:	mov	r1, #0
     77c:	str	r1, [r0, #540]	; 0x21c
     780:	mov	r3, #0
     784:	str	r3, [r0, #544]	; 0x220
     788:	ldr	lr, [sp, #4]
     78c:	add	sp, sp, #8
     790:	bx	lr

00000794 <abort_parser>:
     794:	mov	ip, sp
     798:	sub	sp, sp, #16
     79c:	str	ip, [sp]
     7a0:	str	lr, [sp, #4]
     7a4:	str	r4, [sp, #8]
     7a8:	mov	r4, r0
     7ac:	ldr	r0, [r4]
     7b0:	mov	r1, #0
     7b4:	bl	0 <coda_XML_StopParser>
     7b8:	mov	r1, #1
     7bc:	str	r1, [r4, #4]
     7c0:	ldr	r4, [sp, #8]
     7c4:	ldr	lr, [sp, #4]
     7c8:	add	sp, sp, #16
     7cc:	bx	lr

000007d0 <not_standalone_handler>:
     7d0:	mov	ip, sp
     7d4:	sub	sp, sp, #8
     7d8:	str	ip, [sp]
     7dc:	str	lr, [sp, #4]
     7e0:	mov	r0, #0
     7e4:	ldr	lr, [sp, #4]
     7e8:	add	sp, sp, #8
     7ec:	bx	lr

000007f0 <start_element_handler>:
     7f0:	mov	ip, sp
     7f4:	sub	sp, sp, #48	; 0x30
     7f8:	str	ip, [sp, #4]
     7fc:	str	lr, [sp, #8]
     800:	str	r4, [sp, #16]
     804:	str	r5, [sp, #20]
     808:	str	r6, [sp, #24]
     80c:	str	r7, [sp, #28]
     810:	str	r8, [sp, #32]
     814:	str	r9, [sp, #36]	; 0x24
     818:	mov	r8, r2
     81c:	mov	r5, r1
     820:	mov	r6, r0
     824:	ldr	r2, [r6, #12]
     828:	lsl	r0, r2, #2
     82c:	add	ip, r6, r0
     830:	ldr	r1, [ip, #144]	; 0x90
     834:	cmp	r1, #0
     838:	beq	f50 <start_element_handler+0x760>
     83c:	ldr	r3, [r6, #12]
     840:	lsl	ip, r3, #2
     844:	add	r1, r6, ip
     848:	ldr	r0, [r1, #144]	; 0x90
     84c:	ldr	ip, [r0, #4]
     850:	ldr	ip, [ip]
     854:	cmp	ip, #2
     858:	beq	8a8 <start_element_handler+0xb8>
     85c:	ldr	r0, [r6, #12]
     860:	lsl	r2, r0, #2
     864:	add	r3, r6, r2
     868:	ldr	ip, [r3, #144]	; 0x90
     86c:	ldr	r2, [ip, #4]
     870:	ldr	r0, [r2]
     874:	bl	0 <coda_type_get_format_name>
     878:	mov	r3, r0
     87c:	movw	r0, #65236	; 0xfed4
     880:	movt	r0, #65535	; 0xffff
     884:	ldr	r1, [pc, #1848]	; fc4 <start_element_handler+0x7d4>
     888:	ldr	ip, [r6, #12]
     88c:	lsl	ip, ip, #2
     890:	add	r2, r6, ip
     894:	ldr	r2, [r2, #400]	; 0x190
     898:	bl	0 <coda_set_error>
     89c:	mov	r0, r6
     8a0:	bl	794 <abort_parser>
     8a4:	b	f78 <start_element_handler+0x788>
     8a8:	mov	ip, #0
     8ac:	str	ip, [r6, #536]	; 0x218
     8b0:	ldr	r3, [r6, #12]
     8b4:	add	r3, r3, #1
     8b8:	str	r3, [r6, #12]
     8bc:	ldr	r2, [r6, #12]
     8c0:	cmp	r2, #32
     8c4:	blt	8e8 <start_element_handler+0xf8>
     8c8:	movw	r0, #65236	; 0xfed4
     8cc:	movt	r0, #65535	; 0xffff
     8d0:	ldr	r1, [pc, #1764]	; fbc <start_element_handler+0x7cc>
     8d4:	mov	r2, #32
     8d8:	bl	0 <coda_set_error>
     8dc:	mov	r0, r6
     8e0:	bl	794 <abort_parser>
     8e4:	b	f78 <start_element_handler+0x788>
     8e8:	ldr	r0, [r6, #12]
     8ec:	lsl	r2, r0, #2
     8f0:	add	r0, r6, r2
     8f4:	mov	ip, #0
     8f8:	str	ip, [r0, #144]	; 0x90
     8fc:	ldr	r3, [r6, #12]
     900:	lsl	r0, r3, #2
     904:	add	r1, r6, r0
     908:	ldr	r2, [r1, #140]	; 0x8c
     90c:	str	r2, [sp, #40]	; 0x28
     910:	ldr	r1, [sp, #40]	; 0x28
     914:	ldr	r3, [r1, #4]
     918:	ldr	r0, [r3, #44]	; 0x2c
     91c:	mov	r1, r5
     920:	bl	0 <coda_hashtable_get_index_from_name>
     924:	mov	r4, r0
     928:	cmp	r4, #0
     92c:	bge	958 <start_element_handler+0x168>
     930:	mov	r0, r5
     934:	bl	0 <coda_element_name_from_xml_name>
     938:	ldr	r1, [sp, #40]	; 0x28
     93c:	ldr	r1, [r1, #4]
     940:	ldr	r1, [r1, #44]	; 0x2c
     944:	mov	r3, r0
     948:	mov	r0, r1
     94c:	mov	r1, r3
     950:	bl	0 <coda_hashtable_get_index_from_name>
     954:	mov	r4, r0
     958:	cmp	r4, #0
     95c:	bge	aa4 <start_element_handler+0x2b4>
     960:	ldr	r0, [r6, #532]	; 0x214
     964:	cmp	r0, #0
     968:	beq	a50 <start_element_handler+0x260>
     96c:	mov	r0, #2
     970:	bl	0 <coda_type_record_new>
     974:	mov	r4, r0
     978:	cmp	r4, #0
     97c:	bne	98c <start_element_handler+0x19c>
     980:	mov	r0, r6
     984:	bl	794 <abort_parser>
     988:	b	f78 <start_element_handler+0x788>
     98c:	ldr	r2, [sp, #40]	; 0x28
     990:	ldr	r0, [r2, #4]
     994:	mov	r2, r4
     998:	mov	r1, r5
     99c:	bl	0 <coda_type_record_create_field>
     9a0:	cmp	r0, #0
     9a4:	beq	9bc <start_element_handler+0x1cc>
     9a8:	mov	r0, r4
     9ac:	bl	0 <coda_type_release>
     9b0:	mov	r0, r6
     9b4:	bl	794 <abort_parser>
     9b8:	b	f78 <start_element_handler+0x788>
     9bc:	mov	r0, r4
     9c0:	bl	0 <coda_type_release>
     9c4:	add	r0, sp, #40	; 0x28
     9c8:	ldr	r3, [sp, #40]	; 0x28
     9cc:	ldr	r1, [r3, #4]
     9d0:	bl	0 <coda_mem_type_update>
     9d4:	cmp	r0, #0
     9d8:	beq	9e8 <start_element_handler+0x1f8>
     9dc:	mov	r0, r6
     9e0:	bl	794 <abort_parser>
     9e4:	b	f78 <start_element_handler+0x788>
     9e8:	ldr	r0, [sp, #40]	; 0x28
     9ec:	ldr	r1, [r6, #12]
     9f0:	lsl	r1, r1, #2
     9f4:	add	r2, r6, r1
     9f8:	ldr	r3, [r2, #140]	; 0x8c
     9fc:	cmp	r0, r3
     a00:	beq	a18 <start_element_handler+0x228>
     a04:	ldr	r0, [pc, #1452]	; fb8 <start_element_handler+0x7c8>
     a08:	ldr	r1, [pc, #1440]	; fb0 <start_element_handler+0x7c0>
     a0c:	movw	r2, #394	; 0x18a
     a10:	ldr	r3, [pc, #1428]	; fac <start_element_handler+0x7bc>
     a14:	bl	0 <__assert_fail>
     a18:	ldr	ip, [sp, #40]	; 0x28
     a1c:	ldr	ip, [ip, #4]
     a20:	ldr	r0, [ip, #44]	; 0x2c
     a24:	mov	r1, r5
     a28:	bl	0 <coda_hashtable_get_index_from_name>
     a2c:	mov	r4, r0
     a30:	cmp	r4, #0
     a34:	bge	aa4 <start_element_handler+0x2b4>
     a38:	ldr	r0, [pc, #1380]	; fa4 <start_element_handler+0x7b4>
     a3c:	ldr	r1, [pc, #1388]	; fb0 <start_element_handler+0x7c0>
     a40:	mov	r2, #396	; 0x18c
     a44:	ldr	r3, [pc, #1376]	; fac <start_element_handler+0x7bc>
     a48:	bl	0 <__assert_fail>
     a4c:	b	aa4 <start_element_handler+0x2b4>
     a50:	ldr	r1, [r6, #12]
     a54:	cmp	r1, #1
     a58:	beq	a84 <start_element_handler+0x294>
     a5c:	movw	r0, #65236	; 0xfed4
     a60:	movt	r0, #65535	; 0xffff
     a64:	ldr	r1, [pc, #1364]	; fc0 <start_element_handler+0x7d0>
     a68:	ldr	r2, [r6, #12]
     a6c:	lsl	ip, r2, #2
     a70:	add	r2, r6, ip
     a74:	ldr	r3, [r2, #396]	; 0x18c
     a78:	mov	r2, r5
     a7c:	bl	0 <coda_set_error>
     a80:	b	a98 <start_element_handler+0x2a8>
     a84:	movw	r0, #65236	; 0xfed4
     a88:	movt	r0, #65535	; 0xffff
     a8c:	ldr	r1, [pc, #1292]	; fa0 <start_element_handler+0x7b0>
     a90:	mov	r2, r5
     a94:	bl	0 <coda_set_error>
     a98:	mov	r0, r6
     a9c:	bl	794 <abort_parser>
     aa0:	b	f78 <start_element_handler+0x788>
     aa4:	ldr	r1, [r6, #12]
     aa8:	lsl	r2, r1, #2
     aac:	add	r1, r6, r2
     ab0:	str	r4, [r1, #272]	; 0x110
     ab4:	ldr	r0, [r6, #12]
     ab8:	lsl	r1, r0, #2
     abc:	add	r1, r6, r1
     ac0:	ldr	r2, [sp, #40]	; 0x28
     ac4:	ldr	r2, [r2, #4]
     ac8:	ldr	r3, [r2, #52]	; 0x34
     acc:	ldr	r2, [r3, r4, lsl #2]
     ad0:	add	r3, r2, #8
     ad4:	str	r3, [r1, #16]
     ad8:	ldr	r1, [sp, #40]	; 0x28
     adc:	ldr	r0, [r1, #4]
     ae0:	ldr	r1, [r6, #12]
     ae4:	lsl	r1, r1, #2
     ae8:	add	r2, r6, r1
     aec:	add	r2, r2, #400	; 0x190
     af0:	mov	r1, r4
     af4:	bl	0 <coda_type_get_record_field_real_name>
     af8:	cmp	r0, #0
     afc:	beq	b0c <start_element_handler+0x31c>
     b00:	mov	r0, r6
     b04:	bl	794 <abort_parser>
     b08:	b	f78 <start_element_handler+0x788>
     b0c:	ldr	r0, [r6, #12]
     b10:	lsl	r3, r0, #2
     b14:	add	r0, r6, r3
     b18:	ldr	r2, [r0, #16]
     b1c:	ldr	r7, [r2]
     b20:	ldr	r2, [r7, #8]
     b24:	cmp	r2, #1
     b28:	beq	c84 <start_element_handler+0x494>
     b2c:	ldr	r3, [sp, #40]	; 0x28
     b30:	ldr	r0, [r3, #20]
     b34:	ldr	r3, [r0, r4, lsl #2]
     b38:	cmp	r3, #0
     b3c:	beq	d04 <start_element_handler+0x514>
     b40:	ldr	ip, [r6, #532]	; 0x214
     b44:	cmp	ip, #0
     b48:	beq	c54 <start_element_handler+0x464>
     b4c:	mov	r0, #2
     b50:	bl	0 <coda_type_array_new>
     b54:	mov	r9, r0
     b58:	cmp	r9, #0
     b5c:	bne	b6c <start_element_handler+0x37c>
     b60:	mov	r0, r6
     b64:	bl	794 <abort_parser>
     b68:	b	f78 <start_element_handler+0x788>
     b6c:	mov	r1, r7
     b70:	mov	r0, r9
     b74:	bl	0 <coda_type_array_set_base_type>
     b78:	cmp	r0, #0
     b7c:	beq	b94 <start_element_handler+0x3a4>
     b80:	mov	r0, r9
     b84:	bl	0 <coda_type_release>
     b88:	mov	r0, r6
     b8c:	bl	794 <abort_parser>
     b90:	b	f78 <start_element_handler+0x788>
     b94:	ldr	r0, [r6, #12]
     b98:	lsl	r1, r0, #2
     b9c:	add	ip, r6, r1
     ba0:	ldr	ip, [ip, #16]
     ba4:	str	r9, [ip]
     ba8:	mov	r0, r7
     bac:	bl	0 <coda_type_release>
     bb0:	mov	r1, #0
     bb4:	mov	r0, r9
     bb8:	bl	0 <coda_type_array_add_variable_dimension>
     bbc:	cmp	r0, #0
     bc0:	beq	bd0 <start_element_handler+0x3e0>
     bc4:	mov	r0, r6
     bc8:	bl	794 <abort_parser>
     bcc:	b	f78 <start_element_handler+0x788>
     bd0:	mov	r1, #0
     bd4:	mov	r0, r9
     bd8:	bl	0 <coda_mem_array_new>
     bdc:	mov	r7, r0
     be0:	cmp	r7, #0
     be4:	bne	bf4 <start_element_handler+0x404>
     be8:	mov	r0, r6
     bec:	bl	794 <abort_parser>
     bf0:	b	f78 <start_element_handler+0x788>
     bf4:	ldr	r2, [sp, #40]	; 0x28
     bf8:	ldr	r1, [r2, #20]
     bfc:	ldr	r1, [r1, r4, lsl #2]
     c00:	mov	r0, r7
     c04:	bl	0 <coda_mem_array_add_element>
     c08:	cmp	r0, #0
     c0c:	beq	c1c <start_element_handler+0x42c>
     c10:	mov	r0, r6
     c14:	bl	794 <abort_parser>
     c18:	b	f78 <start_element_handler+0x788>
     c1c:	ldr	r3, [sp, #40]	; 0x28
     c20:	ldr	r1, [r3, #20]
     c24:	str	r7, [r1, r4, lsl #2]
     c28:	ldr	ip, [r6, #12]
     c2c:	lsl	ip, ip, #2
     c30:	add	r0, r6, ip
     c34:	add	r1, r9, #40	; 0x28
     c38:	str	r1, [r0, #16]
     c3c:	ldr	r0, [r6, #12]
     c40:	lsl	r3, r0, #2
     c44:	add	r1, r6, r3
     c48:	ldr	r2, [r1, #16]
     c4c:	ldr	r7, [r2]
     c50:	b	d04 <start_element_handler+0x514>
     c54:	movw	r0, #65236	; 0xfed4
     c58:	movt	r0, #65535	; 0xffff
     c5c:	ldr	r1, [pc, #836]	; fa8 <start_element_handler+0x7b8>
     c60:	ldr	r3, [r6, #12]
     c64:	lsl	r2, r3, #2
     c68:	add	r3, r6, r2
     c6c:	ldr	r3, [r3, #396]	; 0x18c
     c70:	mov	r2, r5
     c74:	bl	0 <coda_set_error>
     c78:	mov	r0, r6
     c7c:	bl	794 <abort_parser>
     c80:	b	f78 <start_element_handler+0x788>
     c84:	ldr	ip, [r7]
     c88:	cmp	ip, #2
     c8c:	bne	d04 <start_element_handler+0x514>
     c90:	ldr	ip, [sp, #40]	; 0x28
     c94:	ldr	r0, [ip, #20]
     c98:	ldr	r2, [r0, r4, lsl #2]
     c9c:	cmp	r2, #0
     ca0:	bne	cdc <start_element_handler+0x4ec>
     ca4:	mov	r1, #0
     ca8:	mov	r0, r7
     cac:	bl	0 <coda_mem_array_new>
     cb0:	ldr	ip, [sp, #40]	; 0x28
     cb4:	ldr	r3, [ip, #20]
     cb8:	str	r0, [r3, r4, lsl #2]
     cbc:	ldr	ip, [sp, #40]	; 0x28
     cc0:	ldr	r1, [ip, #20]
     cc4:	ldr	r0, [r1, r4, lsl #2]
     cc8:	cmp	r0, #0
     ccc:	bne	cdc <start_element_handler+0x4ec>
     cd0:	mov	r0, r6
     cd4:	bl	794 <abort_parser>
     cd8:	b	f78 <start_element_handler+0x788>
     cdc:	ldr	ip, [r6, #12]
     ce0:	lsl	r3, ip, #2
     ce4:	add	r0, r6, r3
     ce8:	add	r1, r7, #40	; 0x28
     cec:	str	r1, [r0, #16]
     cf0:	ldr	r1, [r6, #12]
     cf4:	lsl	r3, r1, #2
     cf8:	add	r0, r6, r3
     cfc:	ldr	r1, [r0, #16]
     d00:	ldr	r7, [r1]
     d04:	ldr	r0, [r7, #36]	; 0x24
     d08:	cmp	r0, #0
     d0c:	bne	ddc <start_element_handler+0x5ec>
     d10:	mov	r3, #0
     d14:	str	r3, [r6, #528]	; 0x210
     d18:	ldr	ip, [r6, #532]	; 0x214
     d1c:	cmp	ip, #0
     d20:	beq	db0 <start_element_handler+0x5c0>
     d24:	ldr	ip, [r8]
     d28:	cmp	ip, #0
     d2c:	bne	d48 <start_element_handler+0x558>
     d30:	mov	r0, r5
     d34:	bl	0 <coda_element_name_from_xml_name>
     d38:	cmp	r5, r0
     d3c:	movne	r0, #1
     d40:	moveq	r0, #0
     d44:	b	d4c <start_element_handler+0x55c>
     d48:	mov	r0, #1
     d4c:	cmp	r0, #0
     d50:	beq	e14 <start_element_handler+0x624>
     d54:	mov	r0, #2
     d58:	bl	0 <coda_type_record_new>
     d5c:	str	r0, [r7, #36]	; 0x24
     d60:	ldr	r3, [r7, #36]	; 0x24
     d64:	cmp	r3, #0
     d68:	bne	d78 <start_element_handler+0x588>
     d6c:	mov	r0, r6
     d70:	bl	794 <abort_parser>
     d74:	b	f78 <start_element_handler+0x788>
     d78:	ldr	r0, [r7, #36]	; 0x24
     d7c:	ldr	r1, [r6, #8]
     d80:	ldr	r2, [r6, #532]	; 0x214
     d84:	str	r2, [sp]
     d88:	mov	r3, r8
     d8c:	mov	r2, r5
     d90:	bl	1c8 <attribute_record_new>
     d94:	str	r0, [r6, #528]	; 0x210
     d98:	ldr	r2, [r6, #528]	; 0x210
     d9c:	cmp	r2, #0
     da0:	bne	e14 <start_element_handler+0x624>
     da4:	mov	r0, r6
     da8:	bl	794 <abort_parser>
     dac:	b	f78 <start_element_handler+0x788>
     db0:	ldr	ip, [r8]
     db4:	cmp	ip, #0
     db8:	beq	e14 <start_element_handler+0x624>
     dbc:	movw	r0, #65236	; 0xfed4
     dc0:	movt	r0, #65535	; 0xffff
     dc4:	ldr	r1, [pc, #464]	; f9c <start_element_handler+0x7ac>
     dc8:	ldr	r2, [r8]
     dcc:	bl	0 <coda_set_error>
     dd0:	mov	r0, r6
     dd4:	bl	794 <abort_parser>
     dd8:	b	f78 <start_element_handler+0x788>
     ddc:	ldr	r0, [r7, #36]	; 0x24
     de0:	ldr	r1, [r6, #8]
     de4:	ldr	r2, [r6, #532]	; 0x214
     de8:	str	r2, [sp]
     dec:	mov	r3, r8
     df0:	mov	r2, r5
     df4:	bl	1c8 <attribute_record_new>
     df8:	str	r0, [r6, #528]	; 0x210
     dfc:	ldr	r1, [r6, #528]	; 0x210
     e00:	cmp	r1, #0
     e04:	bne	e14 <start_element_handler+0x624>
     e08:	mov	r0, r6
     e0c:	bl	794 <abort_parser>
     e10:	b	f78 <start_element_handler+0x788>
     e14:	ldr	r3, [r7]
     e18:	cmp	r3, #2
     e1c:	bne	e34 <start_element_handler+0x644>
     e20:	ldr	r2, [r7, #8]
     e24:	cmp	r2, #0
     e28:	moveq	ip, #1
     e2c:	movne	ip, #0
     e30:	b	e38 <start_element_handler+0x648>
     e34:	mov	ip, #0
     e38:	cmp	ip, #0
     e3c:	beq	f78 <start_element_handler+0x788>
     e40:	ldr	r1, [r6, #528]	; 0x210
     e44:	mov	r0, r7
     e48:	bl	0 <coda_mem_record_new>
     e4c:	ldr	ip, [r6, #12]
     e50:	lsl	r3, ip, #2
     e54:	add	ip, r6, r3
     e58:	str	r0, [ip, #144]	; 0x90
     e5c:	ldr	r0, [r6, #12]
     e60:	lsl	r0, r0, #2
     e64:	add	r1, r6, r0
     e68:	ldr	r2, [r1, #144]	; 0x90
     e6c:	cmp	r2, #0
     e70:	bne	e80 <start_element_handler+0x690>
     e74:	mov	r0, r6
     e78:	bl	794 <abort_parser>
     e7c:	b	f78 <start_element_handler+0x788>
     e80:	mov	r4, #0
     e84:	ldr	r3, [r6, #12]
     e88:	lsl	r2, r3, #2
     e8c:	add	r2, r6, r2
     e90:	ldr	r3, [r2, #144]	; 0x90
     e94:	ldr	ip, [r3, #16]
     e98:	cmp	r4, ip
     e9c:	bge	f44 <start_element_handler+0x754>
     ea0:	ldr	r2, [r7, #52]	; 0x34
     ea4:	ldr	r0, [r2, r4, lsl #2]
     ea8:	ldr	r1, [r0, #8]
     eac:	ldr	ip, [r1, #8]
     eb0:	cmp	ip, #1
     eb4:	bne	ed8 <start_element_handler+0x6e8>
     eb8:	ldr	r3, [r7, #52]	; 0x34
     ebc:	ldr	r0, [r3, r4, lsl #2]
     ec0:	ldr	r3, [r0, #8]
     ec4:	ldr	ip, [r3]
     ec8:	cmp	ip, #2
     ecc:	moveq	r1, #1
     ed0:	movne	r1, #0
     ed4:	b	edc <start_element_handler+0x6ec>
     ed8:	mov	r1, #0
     edc:	cmp	r1, #0
     ee0:	beq	f3c <start_element_handler+0x74c>
     ee4:	ldr	r1, [r7, #52]	; 0x34
     ee8:	ldr	r2, [r1, r4, lsl #2]
     eec:	ldr	r0, [r2, #8]
     ef0:	mov	r1, #0
     ef4:	bl	0 <coda_mem_array_new>
     ef8:	ldr	r1, [r6, #12]
     efc:	lsl	r1, r1, #2
     f00:	add	ip, r6, r1
     f04:	ldr	ip, [ip, #144]	; 0x90
     f08:	ldr	r2, [ip, #20]
     f0c:	str	r0, [r2, r4, lsl #2]
     f10:	ldr	r1, [r6, #12]
     f14:	lsl	r0, r1, #2
     f18:	add	r0, r6, r0
     f1c:	ldr	r2, [r0, #144]	; 0x90
     f20:	ldr	ip, [r2, #20]
     f24:	ldr	r3, [ip, r4, lsl #2]
     f28:	cmp	r3, #0
     f2c:	bne	f3c <start_element_handler+0x74c>
     f30:	mov	r0, r6
     f34:	bl	794 <abort_parser>
     f38:	b	f78 <start_element_handler+0x788>
     f3c:	add	r4, r4, #1
     f40:	b	e84 <start_element_handler+0x694>
     f44:	mov	r0, #0
     f48:	str	r0, [r6, #528]	; 0x210
     f4c:	b	f78 <start_element_handler+0x788>
     f50:	movw	r0, #65236	; 0xfed4
     f54:	movt	r0, #65535	; 0xffff
     f58:	ldr	r1, [pc, #84]	; fb4 <start_element_handler+0x7c4>
     f5c:	ldr	ip, [r6, #12]
     f60:	lsl	r2, ip, #2
     f64:	add	r2, r6, r2
     f68:	ldr	r2, [r2, #400]	; 0x190
     f6c:	bl	0 <coda_set_error>
     f70:	mov	r0, r6
     f74:	bl	794 <abort_parser>
     f78:	ldr	r4, [sp, #16]
     f7c:	ldr	r5, [sp, #20]
     f80:	ldr	r6, [sp, #24]
     f84:	ldr	r7, [sp, #28]
     f88:	ldr	r8, [sp, #32]
     f8c:	ldr	r9, [sp, #36]	; 0x24
     f90:	ldr	lr, [sp, #8]
     f94:	add	sp, sp, #48	; 0x30
     f98:	bx	lr
     f9c:	.word	0x00000030
     fa0:	.word	0x0000015d
     fa4:	.word	0x000001ec
     fa8:	.word	0x000000c2
     fac:	.word	0x0000051b
     fb0:	.word	0x0000018d
     fb4:	.word	0x0000044f
     fb8:	.word	0x00000427
     fbc:	.word	0x000003a6
     fc0:	.word	0x000004b4
     fc4:	.word	0x00000131

00000fc8 <end_element_handler>:
     fc8:	mov	ip, sp
     fcc:	sub	sp, sp, #32
     fd0:	str	ip, [sp, #4]
     fd4:	str	lr, [sp, #8]
     fd8:	str	r4, [sp, #16]
     fdc:	str	r5, [sp, #20]
     fe0:	str	r6, [sp, #24]
     fe4:	str	r7, [sp, #28]
     fe8:	mov	r6, r0
     fec:	ldr	ip, [r6, #4]
     ff0:	cmp	ip, #0
     ff4:	bne	141c <end_element_handler+0x454>
     ff8:	ldr	r2, [r6, #12]
     ffc:	lsl	r0, r2, #2
    1000:	add	ip, r6, r0
    1004:	ldr	r2, [ip, #144]	; 0x90
    1008:	cmp	r2, #0
    100c:	beq	1024 <end_element_handler+0x5c>
    1010:	ldr	r1, [r6, #536]	; 0x218
    1014:	cmp	r1, #0
    1018:	movgt	r3, #1
    101c:	movle	r3, #0
    1020:	b	1028 <end_element_handler+0x60>
    1024:	mov	r3, #0
    1028:	cmp	r3, #0
    102c:	beq	104c <end_element_handler+0x84>
    1030:	ldr	r0, [r6, #544]	; 0x220
    1034:	ldr	r1, [r6, #536]	; 0x218
    1038:	bl	0 <is_whitespace>
    103c:	cmp	r0, #0
    1040:	moveq	r3, #1
    1044:	movne	r3, #0
    1048:	b	1050 <end_element_handler+0x88>
    104c:	mov	r3, #0
    1050:	cmp	r3, #0
    1054:	beq	1144 <end_element_handler+0x17c>
    1058:	ldr	r0, [r6, #532]	; 0x214
    105c:	cmp	r0, #0
    1060:	bne	1078 <end_element_handler+0xb0>
    1064:	ldr	r0, [pc, #972]	; 1438 <end_element_handler+0x470>
    1068:	ldr	r1, [pc, #972]	; 143c <end_element_handler+0x474>
    106c:	movw	r2, #590	; 0x24e
    1070:	ldr	r3, [pc, #980]	; 144c <end_element_handler+0x484>
    1074:	bl	0 <__assert_fail>
    1078:	ldr	r1, [r6, #12]
    107c:	lsl	ip, r1, #2
    1080:	add	r0, r6, ip
    1084:	ldr	ip, [r0, #144]	; 0x90
    1088:	ldr	r1, [ip, #4]
    108c:	ldr	r3, [r1, #48]	; 0x30
    1090:	cmp	r3, #0
    1094:	ble	10c4 <end_element_handler+0xfc>
    1098:	movw	r0, #65236	; 0xfed4
    109c:	movt	r0, #65535	; 0xffff
    10a0:	ldr	r1, [pc, #924]	; 1444 <end_element_handler+0x47c>
    10a4:	ldr	r3, [r6, #12]
    10a8:	lsl	r3, r3, #2
    10ac:	add	r3, r6, r3
    10b0:	ldr	r2, [r3, #400]	; 0x190
    10b4:	bl	0 <coda_set_error>
    10b8:	mov	r0, r6
    10bc:	bl	794 <abort_parser>
    10c0:	b	141c <end_element_handler+0x454>
    10c4:	ldr	r0, [r6, #12]
    10c8:	lsl	r0, r0, #2
    10cc:	add	r2, r6, r0
    10d0:	ldr	r1, [r2, #144]	; 0x90
    10d4:	ldr	r3, [r1, #12]
    10d8:	str	r3, [r6, #528]	; 0x210
    10dc:	ldr	r3, [r6, #12]
    10e0:	lsl	r3, r3, #2
    10e4:	add	r0, r6, r3
    10e8:	ldr	r0, [r0, #144]	; 0x90
    10ec:	mov	r1, #0
    10f0:	str	r1, [r0, #12]
    10f4:	ldr	ip, [r6, #12]
    10f8:	lsl	r0, ip, #2
    10fc:	add	ip, r6, r0
    1100:	ldr	r0, [ip, #16]
    1104:	bl	e8 <convert_to_text>
    1108:	cmp	r0, #0
    110c:	beq	111c <end_element_handler+0x154>
    1110:	mov	r0, r6
    1114:	bl	794 <abort_parser>
    1118:	b	141c <end_element_handler+0x454>
    111c:	ldr	r3, [r6, #12]
    1120:	lsl	r0, r3, #2
    1124:	add	r3, r6, r0
    1128:	ldr	r0, [r3, #144]	; 0x90
    112c:	bl	0 <coda_dynamic_type_delete>
    1130:	ldr	r1, [r6, #12]
    1134:	lsl	r2, r1, #2
    1138:	add	ip, r6, r2
    113c:	mov	r1, #0
    1140:	str	r1, [ip, #144]	; 0x90
    1144:	ldr	ip, [r6, #12]
    1148:	lsl	r1, ip, #2
    114c:	add	ip, r6, r1
    1150:	ldr	r0, [ip, #144]	; 0x90
    1154:	cmp	r0, #0
    1158:	beq	124c <end_element_handler+0x284>
    115c:	ldr	r0, [r6, #532]	; 0x214
    1160:	cmp	r0, #0
    1164:	bne	1224 <end_element_handler+0x25c>
    1168:	ldr	r0, [r6, #12]
    116c:	lsl	r2, r0, #2
    1170:	add	r0, r6, r2
    1174:	ldr	r0, [r0, #144]	; 0x90
    1178:	bl	0 <coda_mem_record_validate>
    117c:	cmp	r0, #0
    1180:	beq	1190 <end_element_handler+0x1c8>
    1184:	mov	r0, r6
    1188:	bl	794 <abort_parser>
    118c:	b	141c <end_element_handler+0x454>
    1190:	mov	r4, #0
    1194:	ldr	r2, [r6, #12]
    1198:	lsl	r2, r2, #2
    119c:	add	ip, r6, r2
    11a0:	ldr	r3, [ip, #144]	; 0x90
    11a4:	ldr	r3, [r3, #16]
    11a8:	cmp	r4, r3
    11ac:	bge	1224 <end_element_handler+0x25c>
    11b0:	ldr	ip, [r6, #12]
    11b4:	lsl	r3, ip, #2
    11b8:	add	r1, r6, r3
    11bc:	ldr	r0, [r1, #144]	; 0x90
    11c0:	ldr	r1, [r0, #20]
    11c4:	ldr	r0, [r1, r4, lsl #2]
    11c8:	cmp	r0, #0
    11cc:	beq	121c <end_element_handler+0x254>
    11d0:	ldr	r1, [r0, #4]
    11d4:	ldr	r1, [r1, #8]
    11d8:	cmp	r1, #1
    11dc:	bne	11f8 <end_element_handler+0x230>
    11e0:	ldr	r2, [r0, #4]
    11e4:	ldr	r2, [r2]
    11e8:	cmp	r2, #2
    11ec:	moveq	r2, #1
    11f0:	movne	r2, #0
    11f4:	b	11fc <end_element_handler+0x234>
    11f8:	mov	r2, #0
    11fc:	cmp	r2, #0
    1200:	beq	121c <end_element_handler+0x254>
    1204:	bl	0 <coda_mem_array_validate>
    1208:	cmp	r0, #0
    120c:	beq	121c <end_element_handler+0x254>
    1210:	mov	r0, r6
    1214:	bl	794 <abort_parser>
    1218:	b	141c <end_element_handler+0x454>
    121c:	add	r4, r4, #1
    1220:	b	1194 <end_element_handler+0x1cc>
    1224:	ldr	r1, [r6, #12]
    1228:	lsl	r2, r1, #2
    122c:	add	r2, r6, r2
    1230:	ldr	r4, [r2, #144]	; 0x90
    1234:	ldr	ip, [r6, #12]
    1238:	lsl	r3, ip, #2
    123c:	add	r2, r6, r3
    1240:	mov	r1, #0
    1244:	str	r1, [r2, #144]	; 0x90
    1248:	b	132c <end_element_handler+0x364>
    124c:	ldr	r2, [r6, #12]
    1250:	lsl	r2, r2, #2
    1254:	add	ip, r6, r2
    1258:	ldr	r2, [ip, #16]
    125c:	ldr	r4, [r2]
    1260:	ldr	r0, [r4, #8]
    1264:	cmp	r0, #6
    1268:	bne	12f0 <end_element_handler+0x328>
    126c:	ldr	r2, [r6, #532]	; 0x214
    1270:	cmp	r2, #0
    1274:	beq	128c <end_element_handler+0x2c4>
    1278:	ldr	r0, [pc, #456]	; 1448 <end_element_handler+0x480>
    127c:	ldr	r1, [pc, #440]	; 143c <end_element_handler+0x474>
    1280:	movw	r2, #619	; 0x26b
    1284:	ldr	r3, [pc, #448]	; 144c <end_element_handler+0x484>
    1288:	bl	0 <__assert_fail>
    128c:	ldr	r0, [r4, #44]	; 0x2c
    1290:	mov	r1, #0
    1294:	ldr	r2, [r6, #8]
    1298:	ldr	r3, [r6, #536]	; 0x218
    129c:	ldr	ip, [r6, #544]	; 0x220
    12a0:	str	ip, [sp]
    12a4:	bl	0 <coda_mem_data_new>
    12a8:	mov	r5, r0
    12ac:	cmp	r5, #0
    12b0:	bne	12c0 <end_element_handler+0x2f8>
    12b4:	mov	r0, r6
    12b8:	bl	794 <abort_parser>
    12bc:	b	141c <end_element_handler+0x454>
    12c0:	ldr	r1, [r6, #528]	; 0x210
    12c4:	mov	r2, r5
    12c8:	mov	r0, r4
    12cc:	bl	0 <coda_mem_time_new>
    12d0:	mov	r4, r0
    12d4:	cmp	r4, #0
    12d8:	bne	1324 <end_element_handler+0x35c>
    12dc:	mov	r0, r5
    12e0:	bl	0 <coda_dynamic_type_delete>
    12e4:	mov	r0, r6
    12e8:	bl	794 <abort_parser>
    12ec:	b	141c <end_element_handler+0x454>
    12f0:	ldr	r1, [r6, #528]	; 0x210
    12f4:	ldr	r2, [r6, #8]
    12f8:	ldr	r3, [r6, #536]	; 0x218
    12fc:	ldr	r0, [r6, #544]	; 0x220
    1300:	str	r0, [sp]
    1304:	mov	r0, r4
    1308:	bl	0 <coda_mem_data_new>
    130c:	mov	r4, r0
    1310:	cmp	r4, #0
    1314:	bne	1324 <end_element_handler+0x35c>
    1318:	mov	r0, r6
    131c:	bl	794 <abort_parser>
    1320:	b	141c <end_element_handler+0x454>
    1324:	mov	ip, #0
    1328:	str	ip, [r6, #528]	; 0x210
    132c:	ldr	r3, [r6, #528]	; 0x210
    1330:	cmp	r3, #0
    1334:	beq	134c <end_element_handler+0x384>
    1338:	ldr	r0, [pc, #272]	; 1450 <end_element_handler+0x488>
    133c:	ldr	r1, [pc, #248]	; 143c <end_element_handler+0x474>
    1340:	movw	r2, #685	; 0x2ad
    1344:	ldr	r3, [pc, #256]	; 144c <end_element_handler+0x484>
    1348:	bl	0 <__assert_fail>
    134c:	ldr	r1, [r6, #12]
    1350:	lsl	r1, r1, #2
    1354:	add	ip, r6, r1
    1358:	ldr	r5, [ip, #140]	; 0x8c
    135c:	ldr	r0, [r6, #12]
    1360:	lsl	r2, r0, #2
    1364:	add	r1, r6, r2
    1368:	ldr	r7, [r1, #272]	; 0x110
    136c:	ldr	ip, [r5, #20]
    1370:	ldr	ip, [ip, r7, lsl #2]
    1374:	cmp	ip, #0
    1378:	beq	1400 <end_element_handler+0x438>
    137c:	ldr	r0, [r5, #20]
    1380:	ldr	r1, [r0, r7, lsl #2]
    1384:	ldr	r0, [r1, #4]
    1388:	ldr	r1, [r0, #8]
    138c:	cmp	r1, #1
    1390:	bne	13b4 <end_element_handler+0x3ec>
    1394:	ldr	r3, [r5, #20]
    1398:	ldr	r1, [r3, r7, lsl #2]
    139c:	ldr	ip, [r1, #4]
    13a0:	ldr	ip, [ip]
    13a4:	cmp	ip, #2
    13a8:	moveq	r3, #1
    13ac:	movne	r3, #0
    13b0:	b	13b8 <end_element_handler+0x3f0>
    13b4:	mov	r3, #0
    13b8:	cmp	r3, #0
    13bc:	bne	13d4 <end_element_handler+0x40c>
    13c0:	ldr	r0, [pc, #120]	; 1440 <end_element_handler+0x478>
    13c4:	ldr	r1, [pc, #112]	; 143c <end_element_handler+0x474>
    13c8:	mov	r2, #692	; 0x2b4
    13cc:	ldr	r3, [pc, #120]	; 144c <end_element_handler+0x484>
    13d0:	bl	0 <__assert_fail>
    13d4:	ldr	r3, [r5, #20]
    13d8:	ldr	r0, [r3, r7, lsl #2]
    13dc:	mov	r1, r4
    13e0:	bl	0 <coda_mem_array_add_element>
    13e4:	cmp	r0, #0
    13e8:	beq	1408 <end_element_handler+0x440>
    13ec:	mov	r0, r4
    13f0:	bl	0 <coda_dynamic_type_delete>
    13f4:	mov	r0, r6
    13f8:	bl	794 <abort_parser>
    13fc:	b	141c <end_element_handler+0x454>
    1400:	ldr	r1, [r5, #20]
    1404:	str	r4, [r1, r7, lsl #2]
    1408:	ldr	ip, [r6, #12]
    140c:	sub	r3, ip, #1
    1410:	str	r3, [r6, #12]
    1414:	mov	r2, #0
    1418:	str	r2, [r6, #536]	; 0x218
    141c:	ldr	r4, [sp, #16]
    1420:	ldr	r5, [sp, #20]
    1424:	ldr	r6, [sp, #24]
    1428:	ldr	r7, [sp, #28]
    142c:	ldr	lr, [sp, #8]
    1430:	add	sp, sp, #32
    1434:	bx	lr
    1438:	.word	0x000003e1
    143c:	.word	0x0000018d
    1440:	.word	0x00000213
    1444:	.word	0x0000044f
    1448:	.word	0x00000105
    144c:	.word	0x00000531
    1450:	.word	0x00000314

00001454 <character_data_handler>:
    1454:	mov	ip, sp
    1458:	sub	sp, sp, #32
    145c:	str	ip, [sp, #4]
    1460:	str	lr, [sp, #8]
    1464:	str	r4, [sp, #16]
    1468:	str	r5, [sp, #20]
    146c:	str	r6, [sp, #24]
    1470:	mov	r5, r2
    1474:	mov	r6, r1
    1478:	mov	r4, r0
    147c:	ldr	r2, [r4, #532]	; 0x214
    1480:	cmp	r2, #0
    1484:	bne	14a8 <character_data_handler+0x54>
    1488:	ldr	ip, [r4, #12]
    148c:	lsl	r3, ip, #2
    1490:	add	ip, r4, r3
    1494:	ldr	r3, [ip, #144]	; 0x90
    1498:	cmp	r3, #0
    149c:	movne	r1, #1
    14a0:	moveq	r1, #0
    14a4:	b	14ac <character_data_handler+0x58>
    14a8:	mov	r1, #0
    14ac:	cmp	r1, #0
    14b0:	beq	14d0 <character_data_handler+0x7c>
    14b4:	mov	r1, r5
    14b8:	mov	r0, r6
    14bc:	bl	0 <is_whitespace>
    14c0:	cmp	r0, #0
    14c4:	moveq	r0, #1
    14c8:	movne	r0, #0
    14cc:	b	14d4 <character_data_handler+0x80>
    14d0:	mov	r0, #0
    14d4:	cmp	r0, #0
    14d8:	beq	1508 <character_data_handler+0xb4>
    14dc:	movw	r0, #65236	; 0xfed4
    14e0:	movt	r0, #65535	; 0xffff
    14e4:	ldr	r1, [pc, #192]	; 15ac <character_data_handler+0x158>
    14e8:	ldr	r2, [r4, #12]
    14ec:	lsl	r2, r2, #2
    14f0:	add	ip, r4, r2
    14f4:	ldr	r2, [ip, #400]	; 0x190
    14f8:	bl	0 <coda_set_error>
    14fc:	mov	r0, r4
    1500:	bl	794 <abort_parser>
    1504:	b	1594 <character_data_handler+0x140>
    1508:	ldr	r2, [r4, #536]	; 0x218
    150c:	add	r1, r2, r5
    1510:	ldr	r0, [r4, #540]	; 0x21c
    1514:	cmp	r1, r0
    1518:	ble	1570 <character_data_handler+0x11c>
    151c:	ldr	r0, [r4, #544]	; 0x220
    1520:	ldr	r1, [r4, #536]	; 0x218
    1524:	add	r1, r1, r5
    1528:	bl	0 <realloc>
    152c:	cmp	r0, #0
    1530:	bne	1560 <character_data_handler+0x10c>
    1534:	mvn	r0, #0
    1538:	ldr	r1, [pc, #112]	; 15b0 <character_data_handler+0x15c>
    153c:	ldr	r2, [r4, #536]	; 0x218
    1540:	add	r2, r2, r5
    1544:	ldr	r3, [pc, #104]	; 15b4 <character_data_handler+0x160>
    1548:	movw	ip, #731	; 0x2db
    154c:	str	ip, [sp]
    1550:	bl	0 <coda_set_error>
    1554:	mov	r0, r4
    1558:	bl	794 <abort_parser>
    155c:	b	1594 <character_data_handler+0x140>
    1560:	str	r0, [r4, #544]	; 0x220
    1564:	ldr	r1, [r4, #536]	; 0x218
    1568:	add	r1, r1, r5
    156c:	str	r1, [r4, #540]	; 0x21c
    1570:	ldr	r0, [r4, #544]	; 0x220
    1574:	ldr	ip, [r4, #536]	; 0x218
    1578:	add	r0, r0, ip
    157c:	mov	r2, r5
    1580:	mov	r1, r6
    1584:	bl	0 <memcpy>
    1588:	ldr	r3, [r4, #536]	; 0x218
    158c:	add	r2, r3, r5
    1590:	str	r2, [r4, #536]	; 0x218
    1594:	ldr	r4, [sp, #16]
    1598:	ldr	r5, [sp, #20]
    159c:	ldr	r6, [sp, #24]
    15a0:	ldr	lr, [sp, #8]
    15a4:	add	sp, sp, #32
    15a8:	bx	lr
    15ac:	.word	0x000002bb
    15b0:	.word	0x0000047f
    15b4:	.word	0x0000018d

000015b8 <coda_xml_parse>:
    15b8:	mov	ip, sp
    15bc:	sub	sp, sp, #624	; 0x270
    15c0:	sub	sp, sp, #8192	; 0x2000
    15c4:	str	ip, [sp]
    15c8:	str	lr, [sp, #4]
    15cc:	str	r4, [sp, #8]
    15d0:	str	r5, [sp, #12]
    15d4:	str	r6, [sp, #16]
    15d8:	mov	r4, r0
    15dc:	add	r0, sp, #72	; 0x48
    15e0:	bl	730 <parser_info_init>
    15e4:	mov	r0, #0
    15e8:	mov	r1, #32
    15ec:	bl	0 <coda_XML_ParserCreateNS>
    15f0:	str	r0, [sp, #72]	; 0x48
    15f4:	ldr	ip, [sp, #72]	; 0x48
    15f8:	cmp	ip, #0
    15fc:	bne	1614 <coda_xml_parse+0x5c>
    1600:	mvn	r0, #13
    1604:	ldr	r1, [pc, #1036]	; 1a18 <coda_xml_parse+0x460>
    1608:	bl	0 <coda_set_error>
    160c:	mvn	r0, #0
    1610:	b	19dc <coda_xml_parse+0x424>
    1614:	str	r4, [sp, #80]	; 0x50
    1618:	ldr	r3, [r4, #24]
    161c:	cmp	r3, #0
    1620:	beq	163c <coda_xml_parse+0x84>
    1624:	ldr	r1, [r4, #24]
    1628:	ldr	r0, [r1, #28]
    162c:	cmp	r0, #0
    1630:	moveq	r3, #1
    1634:	movne	r3, #0
    1638:	b	1640 <coda_xml_parse+0x88>
    163c:	mov	r3, #1
    1640:	str	r3, [sp, #604]	; 0x25c
    1644:	ldr	r3, [sp, #604]	; 0x25c
    1648:	cmp	r3, #0
    164c:	beq	1690 <coda_xml_parse+0xd8>
    1650:	mov	r0, #2
    1654:	bl	0 <coda_type_record_new>
    1658:	mov	r5, r0
    165c:	cmp	r5, #0
    1660:	bne	1674 <coda_xml_parse+0xbc>
    1664:	ldr	r0, [sp, #72]	; 0x48
    1668:	bl	0 <coda_XML_ParserFree>
    166c:	mvn	r0, #0
    1670:	b	19dc <coda_xml_parse+0x424>
    1674:	mov	r1, #0
    1678:	mov	r0, r5
    167c:	bl	0 <coda_mem_record_new>
    1680:	str	r0, [sp, #216]	; 0xd8
    1684:	mov	r0, r5
    1688:	bl	0 <coda_type_release>
    168c:	b	16cc <coda_xml_parse+0x114>
    1690:	ldr	r1, [r4, #24]
    1694:	ldr	r2, [r1, #28]
    1698:	ldr	ip, [r2, #8]
    169c:	cmp	ip, #0
    16a0:	beq	16b8 <coda_xml_parse+0x100>
    16a4:	ldr	r0, [pc, #884]	; 1a20 <coda_xml_parse+0x468>
    16a8:	ldr	r1, [pc, #856]	; 1a08 <coda_xml_parse+0x450>
    16ac:	movw	r2, #774	; 0x306
    16b0:	ldr	r3, [pc, #852]	; 1a0c <coda_xml_parse+0x454>
    16b4:	bl	0 <__assert_fail>
    16b8:	ldr	ip, [r4, #24]
    16bc:	ldr	r0, [ip, #28]
    16c0:	mov	r1, #0
    16c4:	bl	0 <coda_mem_record_new>
    16c8:	str	r0, [sp, #216]	; 0xd8
    16cc:	ldr	ip, [sp, #216]	; 0xd8
    16d0:	cmp	ip, #0
    16d4:	bne	16e8 <coda_xml_parse+0x130>
    16d8:	add	r0, sp, #72	; 0x48
    16dc:	bl	688 <parser_info_cleanup>
    16e0:	mvn	r0, #0
    16e4:	b	19dc <coda_xml_parse+0x424>
    16e8:	ldr	r3, [sp, #216]	; 0xd8
    16ec:	add	r0, r3, #4
    16f0:	str	r0, [sp, #88]	; 0x58
    16f4:	mvn	r2, #0
    16f8:	str	r2, [sp, #344]	; 0x158
    16fc:	mov	r0, #0
    1700:	str	r0, [sp, #472]	; 0x1d8
    1704:	mov	ip, #0
    1708:	str	ip, [sp, #84]	; 0x54
    170c:	ldr	r0, [sp, #72]	; 0x48
    1710:	add	r1, sp, #72	; 0x48
    1714:	bl	0 <coda_XML_SetUserData>
    1718:	ldr	r0, [sp, #72]	; 0x48
    171c:	mov	r1, #2
    1720:	bl	0 <coda_XML_SetParamEntityParsing>
    1724:	ldr	r0, [sp, #72]	; 0x48
    1728:	ldr	r1, [pc, #720]	; 1a00 <coda_xml_parse+0x448>
    172c:	ldr	r2, [pc, #720]	; 1a04 <coda_xml_parse+0x44c>
    1730:	bl	0 <coda_XML_SetElementHandler>
    1734:	ldr	r0, [sp, #72]	; 0x48
    1738:	ldr	r1, [pc, #732]	; 1a1c <coda_xml_parse+0x464>
    173c:	bl	0 <coda_XML_SetCharacterDataHandler>
    1740:	ldr	r0, [sp, #72]	; 0x48
    1744:	ldr	r1, [pc, #728]	; 1a24 <coda_xml_parse+0x46c>
    1748:	bl	0 <coda_XML_SetNotStandaloneHandler>
    174c:	ldr	r2, [r4, #52]	; 0x34
    1750:	ldr	ip, [r2, #8]
    1754:	ldr	r1, [r2, #12]
    1758:	mov	r3, #0
    175c:	asr	r2, r1, #31
    1760:	lsr	r2, r2, #19
    1764:	adds	lr, ip, r2
    1768:	adc	r0, r1, r3
    176c:	mov	r1, lr
    1770:	lsr	r3, r1, #13
    1774:	orr	r5, r3, r0, lsl #19
    1778:	ldr	r1, [r4, #52]	; 0x34
    177c:	ldr	r2, [r1, #8]
    1780:	ldr	r0, [r1, #12]
    1784:	lsl	r1, r5, #13
    1788:	asr	ip, r1, #31
    178c:	cmp	r0, ip
    1790:	bne	17a0 <coda_xml_parse+0x1e8>
    1794:	cmp	r2, r1
    1798:	bhi	17a8 <coda_xml_parse+0x1f0>
    179c:	b	17ac <coda_xml_parse+0x1f4>
    17a0:	cmp	r0, ip
    17a4:	ble	17ac <coda_xml_parse+0x1f4>
    17a8:	add	r5, r5, #1
    17ac:	mov	r6, #0
    17b0:	cmp	r6, r5
    17b4:	bge	197c <coda_xml_parse+0x3c4>
    17b8:	ldr	r3, [r4, #52]	; 0x34
    17bc:	ldr	r1, [r3, #52]	; 0x34
    17c0:	cmp	r1, #0
    17c4:	bne	1878 <coda_xml_parse+0x2c0>
    17c8:	ldr	r1, [r4, #52]	; 0x34
    17cc:	ldr	r0, [r1, #56]	; 0x38
    17d0:	lsl	r1, r6, #13
    17d4:	mov	r2, #0
    17d8:	bl	0 <lseek>
    17dc:	cmp	r0, #0
    17e0:	bge	1824 <coda_xml_parse+0x26c>
    17e4:	lsl	r0, r6, #13
    17e8:	asr	r1, r0, #31
    17ec:	add	r2, sp, #24
    17f0:	bl	0 <coda_str64>
    17f4:	bl	0 <__errno_location>
    17f8:	ldr	r0, [r0]
    17fc:	bl	0 <strerror>
    1800:	mov	r3, r0
    1804:	mvn	r0, #21
    1808:	ldr	r1, [pc, #484]	; 19f4 <coda_xml_parse+0x43c>
    180c:	add	r2, sp, #24
    1810:	bl	0 <coda_set_error>
    1814:	add	r0, sp, #72	; 0x48
    1818:	bl	688 <parser_info_cleanup>
    181c:	mvn	r0, #0
    1820:	b	19dc <coda_xml_parse+0x424>
    1824:	ldr	r0, [r4, #52]	; 0x34
    1828:	ldr	r0, [r0, #56]	; 0x38
    182c:	add	r1, sp, #624	; 0x270
    1830:	mov	r2, #8192	; 0x2000
    1834:	bl	0 <read>
    1838:	mov	r2, r0
    183c:	cmp	r2, #0
    1840:	bge	1870 <coda_xml_parse+0x2b8>
    1844:	bl	0 <__errno_location>
    1848:	ldr	r0, [r0]
    184c:	bl	0 <strerror>
    1850:	mov	r2, r0
    1854:	mvn	r0, #21
    1858:	ldr	r1, [pc, #436]	; 1a14 <coda_xml_parse+0x45c>
    185c:	bl	0 <coda_set_error>
    1860:	add	r0, sp, #72	; 0x48
    1864:	bl	688 <parser_info_cleanup>
    1868:	mvn	r0, #0
    186c:	b	19dc <coda_xml_parse+0x424>
    1870:	add	r1, sp, #624	; 0x270
    1874:	b	18bc <coda_xml_parse+0x304>
    1878:	sub	r2, r5, #1
    187c:	cmp	r6, r2
    1880:	blt	18ac <coda_xml_parse+0x2f4>
    1884:	ldr	r3, [r4, #52]	; 0x34
    1888:	ldr	r1, [r3, #8]
    188c:	ldr	r2, [r3, #12]
    1890:	lsl	r0, r5, #13
    1894:	sub	r3, r0, #8192	; 0x2000
    1898:	asr	ip, r3, #31
    189c:	subs	lr, r1, r3
    18a0:	sbc	r0, r2, ip
    18a4:	mov	r2, lr
    18a8:	b	18b0 <coda_xml_parse+0x2f8>
    18ac:	mov	r2, #8192	; 0x2000
    18b0:	ldr	r3, [r4, #52]	; 0x34
    18b4:	ldr	r3, [r3, #48]	; 0x30
    18b8:	add	r1, r3, r6, lsl #13
    18bc:	ldr	r0, [pc, #332]	; 1a10 <coda_xml_parse+0x458>
    18c0:	mov	r3, #0
    18c4:	str	r3, [r0]
    18c8:	ldr	r0, [sp, #72]	; 0x48
    18cc:	sub	r3, r5, #1
    18d0:	cmp	r6, r3
    18d4:	moveq	r3, #1
    18d8:	movne	r3, #0
    18dc:	bl	0 <coda_XML_Parse>
    18e0:	cmp	r0, #0
    18e4:	beq	1900 <coda_xml_parse+0x348>
    18e8:	ldr	r3, [pc, #288]	; 1a10 <coda_xml_parse+0x458>
    18ec:	ldr	r1, [r3]
    18f0:	cmp	r1, #0
    18f4:	movne	r2, #1
    18f8:	moveq	r2, #0
    18fc:	b	1904 <coda_xml_parse+0x34c>
    1900:	mov	r2, #1
    1904:	cmp	r2, #0
    1908:	beq	1974 <coda_xml_parse+0x3bc>
    190c:	ldr	r0, [pc, #252]	; 1a10 <coda_xml_parse+0x458>
    1910:	ldr	r0, [r0]
    1914:	cmp	r0, #0
    1918:	bne	193c <coda_xml_parse+0x384>
    191c:	ldr	r0, [sp, #72]	; 0x48
    1920:	bl	0 <coda_XML_GetErrorCode>
    1924:	bl	0 <coda_XML_ErrorString>
    1928:	mvn	r3, #13
    192c:	ldr	r1, [pc, #196]	; 19f8 <coda_xml_parse+0x440>
    1930:	mov	r2, r0
    1934:	mov	r0, r3
    1938:	bl	0 <coda_set_error>
    193c:	ldr	r0, [sp, #72]	; 0x48
    1940:	bl	0 <coda_XML_GetCurrentByteIndex>
    1944:	add	r2, sp, #48	; 0x30
    1948:	bl	0 <coda_str64>
    194c:	ldr	r0, [sp, #72]	; 0x48
    1950:	bl	0 <coda_XML_GetCurrentLineNumber>
    1954:	mov	r1, r0
    1958:	ldr	r0, [pc, #156]	; 19fc <coda_xml_parse+0x444>
    195c:	add	r2, sp, #48	; 0x30
    1960:	bl	0 <coda_add_error_message>
    1964:	add	r0, sp, #72	; 0x48
    1968:	bl	688 <parser_info_cleanup>
    196c:	mvn	r0, #0
    1970:	b	19dc <coda_xml_parse+0x424>
    1974:	add	r6, r6, #1
    1978:	b	17b0 <coda_xml_parse+0x1f8>
    197c:	ldr	r0, [sp, #72]	; 0x48
    1980:	bl	0 <coda_XML_ParserFree>
    1984:	mov	r0, #0
    1988:	str	r0, [sp, #72]	; 0x48
    198c:	ldr	r3, [sp, #604]	; 0x25c
    1990:	cmp	r3, #0
    1994:	beq	19c0 <coda_xml_parse+0x408>
    1998:	add	r0, sp, #216	; 0xd8
    199c:	ldr	r3, [sp, #216]	; 0xd8
    19a0:	ldr	r1, [r3, #4]
    19a4:	bl	0 <coda_mem_type_update>
    19a8:	cmp	r0, #0
    19ac:	beq	19c0 <coda_xml_parse+0x408>
    19b0:	add	r0, sp, #72	; 0x48
    19b4:	bl	688 <parser_info_cleanup>
    19b8:	mvn	r0, #0
    19bc:	b	19dc <coda_xml_parse+0x424>
    19c0:	ldr	r1, [sp, #216]	; 0xd8
    19c4:	str	r1, [r4, #20]
    19c8:	mvn	r0, #0
    19cc:	str	r0, [sp, #84]	; 0x54
    19d0:	add	r0, sp, #72	; 0x48
    19d4:	bl	688 <parser_info_cleanup>
    19d8:	mov	r0, #0
    19dc:	ldr	r4, [sp, #8]
    19e0:	ldr	r5, [sp, #12]
    19e4:	ldr	r6, [sp, #16]
    19e8:	ldr	lr, [sp, #4]
    19ec:	ldr	sp, [sp]
    19f0:	bx	lr
    19f4:	.word	0x000003f9
    19f8:	.word	0x00000337
    19fc:	.word	0x000002f6
	...
    1a08:	.word	0x0000018d
    1a0c:	.word	0x00000545
    1a10:	.word	0x00000000
    1a14:	.word	0x0000029d
    1a18:	.word	0x000001f7
    1a1c:	.word	0x00000000
    1a20:	.word	0x00000052
    1a24:	.word	0x00000000
