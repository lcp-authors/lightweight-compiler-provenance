
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/CMakeFiles/flatc_compat.dir/flatc_compat.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__portable_aligned_alloc>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #16
      10:	str	r0, [fp, #-16]
      14:	str	r1, [fp, #-20]	; 0xffffffec
      18:	mov	r3, #0
      1c:	str	r3, [fp, #-12]
      20:	ldr	r3, [fp, #-16]
      24:	cmp	r3, #3
      28:	bhi	34 <__portable_aligned_alloc+0x34>
      2c:	mov	r3, #4
      30:	str	r3, [fp, #-16]
      34:	sub	r3, fp, #12
      38:	ldr	r2, [fp, #-20]	; 0xffffffec
      3c:	ldr	r1, [fp, #-16]
      40:	mov	r0, r3
      44:	bl	0 <posix_memalign>
      48:	str	r0, [fp, #-8]
      4c:	ldr	r3, [fp, #-8]
      50:	cmp	r3, #0
      54:	beq	78 <__portable_aligned_alloc+0x78>
      58:	ldr	r3, [fp, #-12]
      5c:	cmp	r3, #0
      60:	beq	78 <__portable_aligned_alloc+0x78>
      64:	ldr	r3, [fp, #-12]
      68:	mov	r0, r3
      6c:	bl	0 <free>
      70:	mov	r3, #0
      74:	str	r3, [fp, #-12]
      78:	ldr	r3, [fp, #-12]
      7c:	mov	r0, r3
      80:	sub	sp, fp, #4
      84:	ldr	fp, [sp]
      88:	add	sp, sp, #4
      8c:	pop	{pc}		; (ldr pc, [sp], #4)

00000090 <flatbuffers_uint8_cast_from_pe>:
      90:	push	{fp}		; (str fp, [sp, #-4]!)
      94:	add	fp, sp, #0
      98:	sub	sp, sp, #12
      9c:	mov	r3, r0
      a0:	strb	r3, [fp, #-5]
      a4:	ldrb	r3, [fp, #-5]
      a8:	mov	r0, r3
      ac:	add	sp, fp, #0
      b0:	pop	{fp}		; (ldr fp, [sp], #4)
      b4:	bx	lr

000000b8 <flatbuffers_uint8_read_from_pe>:
      b8:	str	fp, [sp, #-8]!
      bc:	str	lr, [sp, #4]
      c0:	add	fp, sp, #4
      c4:	sub	sp, sp, #8
      c8:	str	r0, [fp, #-8]
      cc:	ldr	r3, [fp, #-8]
      d0:	ldrb	r3, [r3]
      d4:	mov	r0, r3
      d8:	bl	90 <flatbuffers_uint8_cast_from_pe>
      dc:	mov	r3, r0
      e0:	mov	r0, r3
      e4:	sub	sp, fp, #4
      e8:	ldr	fp, [sp]
      ec:	add	sp, sp, #4
      f0:	pop	{pc}		; (ldr pc, [sp], #4)

000000f4 <flatbuffers_uint32_cast_from_pe>:
      f4:	push	{fp}		; (str fp, [sp, #-4]!)
      f8:	add	fp, sp, #0
      fc:	sub	sp, sp, #12
     100:	str	r0, [fp, #-8]
     104:	ldr	r3, [fp, #-8]
     108:	mov	r0, r3
     10c:	add	sp, fp, #0
     110:	pop	{fp}		; (ldr fp, [sp], #4)
     114:	bx	lr

00000118 <flatbuffers_uint32_read_from_pe>:
     118:	str	fp, [sp, #-8]!
     11c:	str	lr, [sp, #4]
     120:	add	fp, sp, #4
     124:	sub	sp, sp, #8
     128:	str	r0, [fp, #-8]
     12c:	ldr	r3, [fp, #-8]
     130:	ldr	r3, [r3]
     134:	mov	r0, r3
     138:	bl	f4 <flatbuffers_uint32_cast_from_pe>
     13c:	mov	r3, r0
     140:	mov	r0, r3
     144:	sub	sp, fp, #4
     148:	ldr	fp, [sp]
     14c:	add	sp, sp, #4
     150:	pop	{pc}		; (ldr pc, [sp], #4)

00000154 <flatbuffers_uint64_cast_from_pe>:
     154:	push	{fp}		; (str fp, [sp, #-4]!)
     158:	add	fp, sp, #0
     15c:	sub	sp, sp, #12
     160:	strd	r0, [fp, #-12]
     164:	ldrd	r2, [fp, #-12]
     168:	mov	r0, r2
     16c:	mov	r1, r3
     170:	add	sp, fp, #0
     174:	pop	{fp}		; (ldr fp, [sp], #4)
     178:	bx	lr

0000017c <flatbuffers_uint64_read_from_pe>:
     17c:	str	fp, [sp, #-8]!
     180:	str	lr, [sp, #4]
     184:	add	fp, sp, #4
     188:	sub	sp, sp, #8
     18c:	str	r0, [fp, #-8]
     190:	ldr	r3, [fp, #-8]
     194:	ldrd	r2, [r3]
     198:	mov	r0, r2
     19c:	mov	r1, r3
     1a0:	bl	154 <flatbuffers_uint64_cast_from_pe>
     1a4:	mov	r2, r0
     1a8:	mov	r3, r1
     1ac:	mov	r0, r2
     1b0:	mov	r1, r3
     1b4:	sub	sp, fp, #4
     1b8:	ldr	fp, [sp]
     1bc:	add	sp, sp, #4
     1c0:	pop	{pc}		; (ldr pc, [sp], #4)

000001c4 <flatbuffers_int8_cast_from_pe>:
     1c4:	push	{fp}		; (str fp, [sp, #-4]!)
     1c8:	add	fp, sp, #0
     1cc:	sub	sp, sp, #12
     1d0:	mov	r3, r0
     1d4:	strb	r3, [fp, #-5]
     1d8:	ldrsb	r3, [fp, #-5]
     1dc:	mov	r0, r3
     1e0:	add	sp, fp, #0
     1e4:	pop	{fp}		; (ldr fp, [sp], #4)
     1e8:	bx	lr

000001ec <flatbuffers_int8_read_from_pe>:
     1ec:	str	fp, [sp, #-8]!
     1f0:	str	lr, [sp, #4]
     1f4:	add	fp, sp, #4
     1f8:	sub	sp, sp, #8
     1fc:	str	r0, [fp, #-8]
     200:	ldr	r3, [fp, #-8]
     204:	ldrsb	r3, [r3]
     208:	mov	r0, r3
     20c:	bl	1c4 <flatbuffers_int8_cast_from_pe>
     210:	mov	r3, r0
     214:	mov	r0, r3
     218:	sub	sp, fp, #4
     21c:	ldr	fp, [sp]
     220:	add	sp, sp, #4
     224:	pop	{pc}		; (ldr pc, [sp], #4)

00000228 <flatbuffers_int16_cast_from_pe>:
     228:	push	{fp}		; (str fp, [sp, #-4]!)
     22c:	add	fp, sp, #0
     230:	sub	sp, sp, #12
     234:	mov	r3, r0
     238:	strh	r3, [fp, #-6]
     23c:	ldrsh	r3, [fp, #-6]
     240:	mov	r0, r3
     244:	add	sp, fp, #0
     248:	pop	{fp}		; (ldr fp, [sp], #4)
     24c:	bx	lr

00000250 <flatbuffers_int16_read_from_pe>:
     250:	str	fp, [sp, #-8]!
     254:	str	lr, [sp, #4]
     258:	add	fp, sp, #4
     25c:	sub	sp, sp, #8
     260:	str	r0, [fp, #-8]
     264:	ldr	r3, [fp, #-8]
     268:	ldrsh	r3, [r3]
     26c:	mov	r0, r3
     270:	bl	228 <flatbuffers_int16_cast_from_pe>
     274:	mov	r3, r0
     278:	mov	r0, r3
     27c:	sub	sp, fp, #4
     280:	ldr	fp, [sp]
     284:	add	sp, sp, #4
     288:	pop	{pc}		; (ldr pc, [sp], #4)

0000028c <flatbuffers_int32_cast_from_pe>:
     28c:	push	{fp}		; (str fp, [sp, #-4]!)
     290:	add	fp, sp, #0
     294:	sub	sp, sp, #12
     298:	str	r0, [fp, #-8]
     29c:	ldr	r3, [fp, #-8]
     2a0:	mov	r0, r3
     2a4:	add	sp, fp, #0
     2a8:	pop	{fp}		; (ldr fp, [sp], #4)
     2ac:	bx	lr

000002b0 <flatbuffers_int32_read_from_pe>:
     2b0:	str	fp, [sp, #-8]!
     2b4:	str	lr, [sp, #4]
     2b8:	add	fp, sp, #4
     2bc:	sub	sp, sp, #8
     2c0:	str	r0, [fp, #-8]
     2c4:	ldr	r3, [fp, #-8]
     2c8:	ldr	r3, [r3]
     2cc:	mov	r0, r3
     2d0:	bl	28c <flatbuffers_int32_cast_from_pe>
     2d4:	mov	r3, r0
     2d8:	mov	r0, r3
     2dc:	sub	sp, fp, #4
     2e0:	ldr	fp, [sp]
     2e4:	add	sp, sp, #4
     2e8:	pop	{pc}		; (ldr pc, [sp], #4)

000002ec <flatbuffers_int64_cast_from_pe>:
     2ec:	push	{fp}		; (str fp, [sp, #-4]!)
     2f0:	add	fp, sp, #0
     2f4:	sub	sp, sp, #12
     2f8:	strd	r0, [fp, #-12]
     2fc:	ldrd	r2, [fp, #-12]
     300:	mov	r0, r2
     304:	mov	r1, r3
     308:	add	sp, fp, #0
     30c:	pop	{fp}		; (ldr fp, [sp], #4)
     310:	bx	lr

00000314 <flatbuffers_int64_read_from_pe>:
     314:	str	fp, [sp, #-8]!
     318:	str	lr, [sp, #4]
     31c:	add	fp, sp, #4
     320:	sub	sp, sp, #8
     324:	str	r0, [fp, #-8]
     328:	ldr	r3, [fp, #-8]
     32c:	ldrd	r2, [r3]
     330:	mov	r0, r2
     334:	mov	r1, r3
     338:	bl	2ec <flatbuffers_int64_cast_from_pe>
     33c:	mov	r2, r0
     340:	mov	r3, r1
     344:	mov	r0, r2
     348:	mov	r1, r3
     34c:	sub	sp, fp, #4
     350:	ldr	fp, [sp]
     354:	add	sp, sp, #4
     358:	pop	{pc}		; (ldr pc, [sp], #4)

0000035c <flatbuffers_float_cast_from_pe>:
     35c:	push	{fp}		; (str fp, [sp, #-4]!)
     360:	add	fp, sp, #0
     364:	sub	sp, sp, #20
     368:	vstr	s0, [fp, #-16]
     36c:	ldr	r3, [fp, #-16]
     370:	str	r3, [fp, #-8]
     374:	ldr	r3, [fp, #-8]
     378:	str	r3, [fp, #-8]
     37c:	ldr	r3, [fp, #-8]
     380:	vmov	s15, r3
     384:	vmov.f32	s0, s15
     388:	add	sp, fp, #0
     38c:	pop	{fp}		; (ldr fp, [sp], #4)
     390:	bx	lr

00000394 <flatbuffers_float_read_from_pe>:
     394:	str	fp, [sp, #-8]!
     398:	str	lr, [sp, #4]
     39c:	add	fp, sp, #4
     3a0:	sub	sp, sp, #8
     3a4:	str	r0, [fp, #-8]
     3a8:	ldr	r3, [fp, #-8]
     3ac:	vldr	s15, [r3]
     3b0:	vmov.f32	s0, s15
     3b4:	bl	35c <flatbuffers_float_cast_from_pe>
     3b8:	vmov.f32	s15, s0
     3bc:	vmov.f32	s0, s15
     3c0:	sub	sp, fp, #4
     3c4:	ldr	fp, [sp]
     3c8:	add	sp, sp, #4
     3cc:	pop	{pc}		; (ldr pc, [sp], #4)

000003d0 <flatbuffers_double_cast_from_pe>:
     3d0:	push	{fp}		; (str fp, [sp, #-4]!)
     3d4:	add	fp, sp, #0
     3d8:	sub	sp, sp, #20
     3dc:	vstr	d0, [fp, #-20]	; 0xffffffec
     3e0:	ldrd	r2, [fp, #-20]	; 0xffffffec
     3e4:	strd	r2, [fp, #-12]
     3e8:	ldrd	r2, [fp, #-12]
     3ec:	strd	r2, [fp, #-12]
     3f0:	ldrd	r2, [fp, #-12]
     3f4:	vmov	d7, r2, r3
     3f8:	vmov.f64	d0, d7
     3fc:	add	sp, fp, #0
     400:	pop	{fp}		; (ldr fp, [sp], #4)
     404:	bx	lr

00000408 <flatbuffers_double_read_from_pe>:
     408:	str	fp, [sp, #-8]!
     40c:	str	lr, [sp, #4]
     410:	add	fp, sp, #4
     414:	sub	sp, sp, #8
     418:	str	r0, [fp, #-8]
     41c:	ldr	r3, [fp, #-8]
     420:	vldr	d7, [r3]
     424:	vmov.f64	d0, d7
     428:	bl	3d0 <flatbuffers_double_cast_from_pe>
     42c:	vmov.f64	d7, d0
     430:	vmov.f64	d0, d7
     434:	sub	sp, fp, #4
     438:	ldr	fp, [sp]
     43c:	add	sp, sp, #4
     440:	pop	{pc}		; (ldr pc, [sp], #4)

00000444 <__flatbuffers_uoffset_cast_from_pe>:
     444:	push	{fp}		; (str fp, [sp, #-4]!)
     448:	add	fp, sp, #0
     44c:	sub	sp, sp, #12
     450:	str	r0, [fp, #-8]
     454:	ldr	r3, [fp, #-8]
     458:	mov	r0, r3
     45c:	add	sp, fp, #0
     460:	pop	{fp}		; (ldr fp, [sp], #4)
     464:	bx	lr

00000468 <__flatbuffers_uoffset_read_from_pe>:
     468:	str	fp, [sp, #-8]!
     46c:	str	lr, [sp, #4]
     470:	add	fp, sp, #4
     474:	sub	sp, sp, #8
     478:	str	r0, [fp, #-8]
     47c:	ldr	r3, [fp, #-8]
     480:	ldr	r3, [r3]
     484:	mov	r0, r3
     488:	bl	444 <__flatbuffers_uoffset_cast_from_pe>
     48c:	mov	r3, r0
     490:	mov	r0, r3
     494:	sub	sp, fp, #4
     498:	ldr	fp, [sp]
     49c:	add	sp, sp, #4
     4a0:	pop	{pc}		; (ldr pc, [sp], #4)

000004a4 <__flatbuffers_soffset_cast_from_pe>:
     4a4:	push	{fp}		; (str fp, [sp, #-4]!)
     4a8:	add	fp, sp, #0
     4ac:	sub	sp, sp, #12
     4b0:	str	r0, [fp, #-8]
     4b4:	ldr	r3, [fp, #-8]
     4b8:	mov	r0, r3
     4bc:	add	sp, fp, #0
     4c0:	pop	{fp}		; (ldr fp, [sp], #4)
     4c4:	bx	lr

000004c8 <__flatbuffers_soffset_read_from_pe>:
     4c8:	str	fp, [sp, #-8]!
     4cc:	str	lr, [sp, #4]
     4d0:	add	fp, sp, #4
     4d4:	sub	sp, sp, #8
     4d8:	str	r0, [fp, #-8]
     4dc:	ldr	r3, [fp, #-8]
     4e0:	ldr	r3, [r3]
     4e4:	mov	r0, r3
     4e8:	bl	4a4 <__flatbuffers_soffset_cast_from_pe>
     4ec:	mov	r3, r0
     4f0:	mov	r0, r3
     4f4:	sub	sp, fp, #4
     4f8:	ldr	fp, [sp]
     4fc:	add	sp, sp, #4
     500:	pop	{pc}		; (ldr pc, [sp], #4)

00000504 <__flatbuffers_voffset_cast_from_pe>:
     504:	push	{fp}		; (str fp, [sp, #-4]!)
     508:	add	fp, sp, #0
     50c:	sub	sp, sp, #12
     510:	mov	r3, r0
     514:	strh	r3, [fp, #-6]
     518:	ldrh	r3, [fp, #-6]
     51c:	mov	r0, r3
     520:	add	sp, fp, #0
     524:	pop	{fp}		; (ldr fp, [sp], #4)
     528:	bx	lr

0000052c <__flatbuffers_voffset_read_from_pe>:
     52c:	str	fp, [sp, #-8]!
     530:	str	lr, [sp, #4]
     534:	add	fp, sp, #4
     538:	sub	sp, sp, #8
     53c:	str	r0, [fp, #-8]
     540:	ldr	r3, [fp, #-8]
     544:	ldrh	r3, [r3]
     548:	mov	r0, r3
     54c:	bl	504 <__flatbuffers_voffset_cast_from_pe>
     550:	mov	r3, r0
     554:	mov	r0, r3
     558:	sub	sp, fp, #4
     55c:	ldr	fp, [sp]
     560:	add	sp, sp, #4
     564:	pop	{pc}		; (ldr pc, [sp], #4)

00000568 <__flatbuffers_utype_cast_from_pe>:
     568:	push	{fp}		; (str fp, [sp, #-4]!)
     56c:	add	fp, sp, #0
     570:	sub	sp, sp, #12
     574:	mov	r3, r0
     578:	strb	r3, [fp, #-5]
     57c:	ldrb	r3, [fp, #-5]
     580:	mov	r0, r3
     584:	add	sp, fp, #0
     588:	pop	{fp}		; (ldr fp, [sp], #4)
     58c:	bx	lr

00000590 <__flatbuffers_utype_read_from_pe>:
     590:	str	fp, [sp, #-8]!
     594:	str	lr, [sp, #4]
     598:	add	fp, sp, #4
     59c:	sub	sp, sp, #8
     5a0:	str	r0, [fp, #-8]
     5a4:	ldr	r3, [fp, #-8]
     5a8:	ldrb	r3, [r3]
     5ac:	mov	r0, r3
     5b0:	bl	568 <__flatbuffers_utype_cast_from_pe>
     5b4:	mov	r3, r0
     5b8:	mov	r0, r3
     5bc:	sub	sp, fp, #4
     5c0:	ldr	fp, [sp]
     5c4:	add	sp, sp, #4
     5c8:	pop	{pc}		; (ldr pc, [sp], #4)

000005cc <__flatbuffers_thash_cast_from_pe>:
     5cc:	push	{fp}		; (str fp, [sp, #-4]!)
     5d0:	add	fp, sp, #0
     5d4:	sub	sp, sp, #12
     5d8:	str	r0, [fp, #-8]
     5dc:	ldr	r3, [fp, #-8]
     5e0:	mov	r0, r3
     5e4:	add	sp, fp, #0
     5e8:	pop	{fp}		; (ldr fp, [sp], #4)
     5ec:	bx	lr

000005f0 <__flatbuffers_thash_cast_from_le>:
     5f0:	push	{fp}		; (str fp, [sp, #-4]!)
     5f4:	add	fp, sp, #0
     5f8:	sub	sp, sp, #12
     5fc:	str	r0, [fp, #-8]
     600:	ldr	r3, [fp, #-8]
     604:	mov	r0, r3
     608:	add	sp, fp, #0
     60c:	pop	{fp}		; (ldr fp, [sp], #4)
     610:	bx	lr

00000614 <__flatbuffers_thash_read_from_pe>:
     614:	str	fp, [sp, #-8]!
     618:	str	lr, [sp, #4]
     61c:	add	fp, sp, #4
     620:	sub	sp, sp, #8
     624:	str	r0, [fp, #-8]
     628:	ldr	r3, [fp, #-8]
     62c:	ldr	r3, [r3]
     630:	mov	r0, r3
     634:	bl	5cc <__flatbuffers_thash_cast_from_pe>
     638:	mov	r3, r0
     63c:	mov	r0, r3
     640:	sub	sp, fp, #4
     644:	ldr	fp, [sp]
     648:	add	sp, sp, #4
     64c:	pop	{pc}		; (ldr pc, [sp], #4)

00000650 <flatbuffers_vec_len>:
     650:	str	fp, [sp, #-8]!
     654:	str	lr, [sp, #4]
     658:	add	fp, sp, #4
     65c:	sub	sp, sp, #8
     660:	str	r0, [fp, #-8]
     664:	ldr	r3, [fp, #-8]
     668:	cmp	r3, #0
     66c:	beq	688 <flatbuffers_vec_len+0x38>
     670:	ldr	r3, [fp, #-8]
     674:	sub	r3, r3, #4
     678:	mov	r0, r3
     67c:	bl	468 <__flatbuffers_uoffset_read_from_pe>
     680:	mov	r3, r0
     684:	b	68c <flatbuffers_vec_len+0x3c>
     688:	mov	r3, #0
     68c:	mov	r0, r3
     690:	sub	sp, fp, #4
     694:	ldr	fp, [sp]
     698:	add	sp, sp, #4
     69c:	pop	{pc}		; (ldr pc, [sp], #4)

000006a0 <flatbuffers_string_len>:
     6a0:	str	fp, [sp, #-8]!
     6a4:	str	lr, [sp, #4]
     6a8:	add	fp, sp, #4
     6ac:	sub	sp, sp, #8
     6b0:	str	r0, [fp, #-8]
     6b4:	ldr	r3, [fp, #-8]
     6b8:	cmp	r3, #0
     6bc:	beq	6d8 <flatbuffers_string_len+0x38>
     6c0:	ldr	r3, [fp, #-8]
     6c4:	sub	r3, r3, #4
     6c8:	mov	r0, r3
     6cc:	bl	468 <__flatbuffers_uoffset_read_from_pe>
     6d0:	mov	r3, r0
     6d4:	b	6dc <flatbuffers_string_len+0x3c>
     6d8:	mov	r3, #0
     6dc:	mov	r0, r3
     6e0:	sub	sp, fp, #4
     6e4:	ldr	fp, [sp]
     6e8:	add	sp, sp, #4
     6ec:	pop	{pc}		; (ldr pc, [sp], #4)

000006f0 <flatbuffers_string_vec_len>:
     6f0:	str	fp, [sp, #-8]!
     6f4:	str	lr, [sp, #4]
     6f8:	add	fp, sp, #4
     6fc:	sub	sp, sp, #8
     700:	str	r0, [fp, #-8]
     704:	ldr	r3, [fp, #-8]
     708:	cmp	r3, #0
     70c:	beq	728 <flatbuffers_string_vec_len+0x38>
     710:	ldr	r3, [fp, #-8]
     714:	sub	r3, r3, #4
     718:	mov	r0, r3
     71c:	bl	468 <__flatbuffers_uoffset_read_from_pe>
     720:	mov	r3, r0
     724:	b	72c <flatbuffers_string_vec_len+0x3c>
     728:	mov	r3, #0
     72c:	mov	r0, r3
     730:	sub	sp, fp, #4
     734:	ldr	fp, [sp]
     738:	add	sp, sp, #4
     73c:	pop	{pc}		; (ldr pc, [sp], #4)

00000740 <flatbuffers_string_vec_at>:
     740:	str	fp, [sp, #-8]!
     744:	str	lr, [sp, #4]
     748:	add	fp, sp, #4
     74c:	sub	sp, sp, #16
     750:	str	r0, [fp, #-16]
     754:	str	r1, [fp, #-20]	; 0xffffffec
     758:	ldr	r3, [fp, #-20]	; 0xffffffec
     75c:	lsl	r3, r3, #2
     760:	ldr	r2, [fp, #-16]
     764:	add	r3, r2, r3
     768:	str	r3, [fp, #-8]
     76c:	ldr	r0, [fp, #-16]
     770:	bl	650 <flatbuffers_vec_len>
     774:	mov	r2, r0
     778:	ldr	r3, [fp, #-20]	; 0xffffffec
     77c:	cmp	r3, r2
     780:	bcc	7a4 <flatbuffers_string_vec_at+0x64>
     784:	movw	r3, #0
     788:	movt	r3, #0
     78c:	mov	r2, #108	; 0x6c
     790:	movw	r1, #0
     794:	movt	r1, #0
     798:	movw	r0, #0
     79c:	movt	r0, #0
     7a0:	bl	0 <__assert_fail>
     7a4:	ldr	r0, [fp, #-8]
     7a8:	bl	468 <__flatbuffers_uoffset_read_from_pe>
     7ac:	mov	r3, r0
     7b0:	add	r3, r3, #4
     7b4:	ldr	r2, [fp, #-8]
     7b8:	add	r3, r2, r3
     7bc:	mov	r0, r3
     7c0:	sub	sp, fp, #4
     7c4:	ldr	fp, [sp]
     7c8:	add	sp, sp, #4
     7cc:	pop	{pc}		; (ldr pc, [sp], #4)

000007d0 <flatbuffers_uint8_vec_len>:
     7d0:	str	fp, [sp, #-8]!
     7d4:	str	lr, [sp, #4]
     7d8:	add	fp, sp, #4
     7dc:	sub	sp, sp, #8
     7e0:	str	r0, [fp, #-8]
     7e4:	ldr	r0, [fp, #-8]
     7e8:	bl	650 <flatbuffers_vec_len>
     7ec:	mov	r3, r0
     7f0:	mov	r0, r3
     7f4:	sub	sp, fp, #4
     7f8:	ldr	fp, [sp]
     7fc:	add	sp, sp, #4
     800:	pop	{pc}		; (ldr pc, [sp], #4)

00000804 <flatbuffers_uint8_vec_at>:
     804:	str	fp, [sp, #-8]!
     808:	str	lr, [sp, #4]
     80c:	add	fp, sp, #4
     810:	sub	sp, sp, #8
     814:	str	r0, [fp, #-8]
     818:	str	r1, [fp, #-12]
     81c:	ldr	r0, [fp, #-8]
     820:	bl	650 <flatbuffers_vec_len>
     824:	mov	r2, r0
     828:	ldr	r3, [fp, #-12]
     82c:	cmp	r3, r2
     830:	bcc	854 <flatbuffers_uint8_vec_at+0x50>
     834:	movw	r3, #0
     838:	movt	r3, #0
     83c:	movw	r2, #395	; 0x18b
     840:	movw	r1, #0
     844:	movt	r1, #0
     848:	movw	r0, #0
     84c:	movt	r0, #0
     850:	bl	0 <__assert_fail>
     854:	ldr	r2, [fp, #-8]
     858:	ldr	r3, [fp, #-12]
     85c:	add	r3, r2, r3
     860:	mov	r0, r3
     864:	bl	b8 <flatbuffers_uint8_read_from_pe>
     868:	mov	r3, r0
     86c:	mov	r0, r3
     870:	sub	sp, fp, #4
     874:	ldr	fp, [sp]
     878:	add	sp, sp, #4
     87c:	pop	{pc}		; (ldr pc, [sp], #4)

00000880 <flatbuffers_has_identifier>:
     880:	str	fp, [sp, #-8]!
     884:	str	lr, [sp, #4]
     888:	add	fp, sp, #4
     88c:	sub	sp, sp, #16
     890:	str	r0, [fp, #-16]
     894:	str	r1, [fp, #-20]	; 0xffffffec
     898:	mov	r3, #0
     89c:	str	r3, [fp, #-12]
     8a0:	ldr	r3, [fp, #-20]	; 0xffffffec
     8a4:	cmp	r3, #0
     8a8:	bne	8b4 <flatbuffers_has_identifier+0x34>
     8ac:	mov	r3, #1
     8b0:	b	918 <flatbuffers_has_identifier+0x98>
     8b4:	sub	r3, fp, #12
     8b8:	mov	r2, #4
     8bc:	ldr	r1, [fp, #-20]	; 0xffffffec
     8c0:	mov	r0, r3
     8c4:	bl	0 <strncpy>
     8c8:	ldr	r3, [fp, #-12]
     8cc:	mov	r0, r3
     8d0:	bl	5f0 <__flatbuffers_thash_cast_from_le>
     8d4:	mov	r3, r0
     8d8:	str	r3, [fp, #-12]
     8dc:	ldr	r3, [fp, #-16]
     8e0:	add	r3, r3, #4
     8e4:	mov	r0, r3
     8e8:	bl	614 <__flatbuffers_thash_read_from_pe>
     8ec:	str	r0, [fp, #-8]
     8f0:	ldr	r3, [fp, #-12]
     8f4:	cmp	r3, #0
     8f8:	beq	90c <flatbuffers_has_identifier+0x8c>
     8fc:	ldr	r3, [fp, #-12]
     900:	ldr	r2, [fp, #-8]
     904:	cmp	r2, r3
     908:	bne	914 <flatbuffers_has_identifier+0x94>
     90c:	mov	r3, #1
     910:	b	918 <flatbuffers_has_identifier+0x98>
     914:	mov	r3, #0
     918:	mov	r0, r3
     91c:	sub	sp, fp, #4
     920:	ldr	fp, [sp]
     924:	add	sp, sp, #4
     928:	pop	{pc}		; (ldr pc, [sp], #4)

0000092c <MyGame_Example_Color_cast_from_pe>:
     92c:	push	{fp}		; (str fp, [sp, #-4]!)
     930:	add	fp, sp, #0
     934:	sub	sp, sp, #12
     938:	mov	r3, r0
     93c:	strb	r3, [fp, #-5]
     940:	ldrsb	r3, [fp, #-5]
     944:	mov	r0, r3
     948:	add	sp, fp, #0
     94c:	pop	{fp}		; (ldr fp, [sp], #4)
     950:	bx	lr

00000954 <MyGame_Example_Color_read_from_pe>:
     954:	str	fp, [sp, #-8]!
     958:	str	lr, [sp, #4]
     95c:	add	fp, sp, #4
     960:	sub	sp, sp, #8
     964:	str	r0, [fp, #-8]
     968:	ldr	r3, [fp, #-8]
     96c:	ldrsb	r3, [r3]
     970:	mov	r0, r3
     974:	bl	92c <MyGame_Example_Color_cast_from_pe>
     978:	mov	r3, r0
     97c:	mov	r0, r3
     980:	sub	sp, fp, #4
     984:	ldr	fp, [sp]
     988:	add	sp, sp, #4
     98c:	pop	{pc}		; (ldr pc, [sp], #4)

00000990 <MyGame_Example_Test_vec_at>:
     990:	str	fp, [sp, #-8]!
     994:	str	lr, [sp, #4]
     998:	add	fp, sp, #4
     99c:	sub	sp, sp, #8
     9a0:	str	r0, [fp, #-8]
     9a4:	str	r1, [fp, #-12]
     9a8:	ldr	r0, [fp, #-8]
     9ac:	bl	650 <flatbuffers_vec_len>
     9b0:	mov	r2, r0
     9b4:	ldr	r3, [fp, #-12]
     9b8:	cmp	r3, r2
     9bc:	bcc	9e0 <MyGame_Example_Test_vec_at+0x50>
     9c0:	movw	r3, #0
     9c4:	movt	r3, #0
     9c8:	mov	r2, #380	; 0x17c
     9cc:	movw	r1, #0
     9d0:	movt	r1, #0
     9d4:	movw	r0, #0
     9d8:	movt	r0, #0
     9dc:	bl	0 <__assert_fail>
     9e0:	ldr	r3, [fp, #-12]
     9e4:	lsl	r3, r3, #2
     9e8:	ldr	r2, [fp, #-8]
     9ec:	add	r3, r2, r3
     9f0:	mov	r0, r3
     9f4:	sub	sp, fp, #4
     9f8:	ldr	fp, [sp]
     9fc:	add	sp, sp, #4
     a00:	pop	{pc}		; (ldr pc, [sp], #4)

00000a04 <MyGame_Example_Test_vec_len>:
     a04:	str	fp, [sp, #-8]!
     a08:	str	lr, [sp, #4]
     a0c:	add	fp, sp, #4
     a10:	sub	sp, sp, #8
     a14:	str	r0, [fp, #-8]
     a18:	ldr	r3, [fp, #-8]
     a1c:	cmp	r3, #0
     a20:	beq	a3c <MyGame_Example_Test_vec_len+0x38>
     a24:	ldr	r3, [fp, #-8]
     a28:	sub	r3, r3, #4
     a2c:	mov	r0, r3
     a30:	bl	468 <__flatbuffers_uoffset_read_from_pe>
     a34:	mov	r3, r0
     a38:	b	a40 <MyGame_Example_Test_vec_len+0x3c>
     a3c:	mov	r3, #0
     a40:	mov	r0, r3
     a44:	sub	sp, fp, #4
     a48:	ldr	fp, [sp]
     a4c:	add	sp, sp, #4
     a50:	pop	{pc}		; (ldr pc, [sp], #4)

00000a54 <MyGame_Example_Test_a>:
     a54:	str	fp, [sp, #-8]!
     a58:	str	lr, [sp, #4]
     a5c:	add	fp, sp, #4
     a60:	sub	sp, sp, #8
     a64:	str	r0, [fp, #-8]
     a68:	ldr	r3, [fp, #-8]
     a6c:	cmp	r3, #0
     a70:	beq	a88 <MyGame_Example_Test_a+0x34>
     a74:	ldr	r3, [fp, #-8]
     a78:	mov	r0, r3
     a7c:	bl	250 <flatbuffers_int16_read_from_pe>
     a80:	mov	r3, r0
     a84:	b	a8c <MyGame_Example_Test_a+0x38>
     a88:	mov	r3, #0
     a8c:	mov	r0, r3
     a90:	sub	sp, fp, #4
     a94:	ldr	fp, [sp]
     a98:	add	sp, sp, #4
     a9c:	pop	{pc}		; (ldr pc, [sp], #4)

00000aa0 <MyGame_Example_Test_b>:
     aa0:	str	fp, [sp, #-8]!
     aa4:	str	lr, [sp, #4]
     aa8:	add	fp, sp, #4
     aac:	sub	sp, sp, #8
     ab0:	str	r0, [fp, #-8]
     ab4:	ldr	r3, [fp, #-8]
     ab8:	cmp	r3, #0
     abc:	beq	ad8 <MyGame_Example_Test_b+0x38>
     ac0:	ldr	r3, [fp, #-8]
     ac4:	add	r3, r3, #2
     ac8:	mov	r0, r3
     acc:	bl	1ec <flatbuffers_int8_read_from_pe>
     ad0:	mov	r3, r0
     ad4:	b	adc <MyGame_Example_Test_b+0x3c>
     ad8:	mov	r3, #0
     adc:	mov	r0, r3
     ae0:	sub	sp, fp, #4
     ae4:	ldr	fp, [sp]
     ae8:	add	sp, sp, #4
     aec:	pop	{pc}		; (ldr pc, [sp], #4)

00000af0 <MyGame_Example_Vec3_x>:
     af0:	str	fp, [sp, #-8]!
     af4:	str	lr, [sp, #4]
     af8:	add	fp, sp, #4
     afc:	sub	sp, sp, #8
     b00:	str	r0, [fp, #-8]
     b04:	ldr	r3, [fp, #-8]
     b08:	cmp	r3, #0
     b0c:	beq	b24 <MyGame_Example_Vec3_x+0x34>
     b10:	ldr	r3, [fp, #-8]
     b14:	mov	r0, r3
     b18:	bl	394 <flatbuffers_float_read_from_pe>
     b1c:	vmov.f32	s15, s0
     b20:	b	b28 <MyGame_Example_Vec3_x+0x38>
     b24:	vldr	s15, [pc, #16]	; b3c <MyGame_Example_Vec3_x+0x4c>
     b28:	vmov.f32	s0, s15
     b2c:	sub	sp, fp, #4
     b30:	ldr	fp, [sp]
     b34:	add	sp, sp, #4
     b38:	pop	{pc}		; (ldr pc, [sp], #4)
     b3c:	.word	0x00000000

00000b40 <MyGame_Example_Vec3_y>:
     b40:	str	fp, [sp, #-8]!
     b44:	str	lr, [sp, #4]
     b48:	add	fp, sp, #4
     b4c:	sub	sp, sp, #8
     b50:	str	r0, [fp, #-8]
     b54:	ldr	r3, [fp, #-8]
     b58:	cmp	r3, #0
     b5c:	beq	b78 <MyGame_Example_Vec3_y+0x38>
     b60:	ldr	r3, [fp, #-8]
     b64:	add	r3, r3, #4
     b68:	mov	r0, r3
     b6c:	bl	394 <flatbuffers_float_read_from_pe>
     b70:	vmov.f32	s15, s0
     b74:	b	b7c <MyGame_Example_Vec3_y+0x3c>
     b78:	vldr	s15, [pc, #16]	; b90 <MyGame_Example_Vec3_y+0x50>
     b7c:	vmov.f32	s0, s15
     b80:	sub	sp, fp, #4
     b84:	ldr	fp, [sp]
     b88:	add	sp, sp, #4
     b8c:	pop	{pc}		; (ldr pc, [sp], #4)
     b90:	.word	0x00000000

00000b94 <MyGame_Example_Vec3_z>:
     b94:	str	fp, [sp, #-8]!
     b98:	str	lr, [sp, #4]
     b9c:	add	fp, sp, #4
     ba0:	sub	sp, sp, #8
     ba4:	str	r0, [fp, #-8]
     ba8:	ldr	r3, [fp, #-8]
     bac:	cmp	r3, #0
     bb0:	beq	bcc <MyGame_Example_Vec3_z+0x38>
     bb4:	ldr	r3, [fp, #-8]
     bb8:	add	r3, r3, #8
     bbc:	mov	r0, r3
     bc0:	bl	394 <flatbuffers_float_read_from_pe>
     bc4:	vmov.f32	s15, s0
     bc8:	b	bd0 <MyGame_Example_Vec3_z+0x3c>
     bcc:	vldr	s15, [pc, #16]	; be4 <MyGame_Example_Vec3_z+0x50>
     bd0:	vmov.f32	s0, s15
     bd4:	sub	sp, fp, #4
     bd8:	ldr	fp, [sp]
     bdc:	add	sp, sp, #4
     be0:	pop	{pc}		; (ldr pc, [sp], #4)
     be4:	.word	0x00000000

00000be8 <MyGame_Example_Vec3_test1>:
     be8:	str	fp, [sp, #-8]!
     bec:	str	lr, [sp, #4]
     bf0:	add	fp, sp, #4
     bf4:	sub	sp, sp, #8
     bf8:	str	r0, [fp, #-8]
     bfc:	ldr	r3, [fp, #-8]
     c00:	cmp	r3, #0
     c04:	beq	c20 <MyGame_Example_Vec3_test1+0x38>
     c08:	ldr	r3, [fp, #-8]
     c0c:	add	r3, r3, #16
     c10:	mov	r0, r3
     c14:	bl	408 <flatbuffers_double_read_from_pe>
     c18:	vmov.f64	d7, d0
     c1c:	b	c24 <MyGame_Example_Vec3_test1+0x3c>
     c20:	vldr	d7, [pc, #16]	; c38 <MyGame_Example_Vec3_test1+0x50>
     c24:	vmov.f64	d0, d7
     c28:	sub	sp, fp, #4
     c2c:	ldr	fp, [sp]
     c30:	add	sp, sp, #4
     c34:	pop	{pc}		; (ldr pc, [sp], #4)
	...

00000c40 <MyGame_Example_Vec3_test2>:
     c40:	str	fp, [sp, #-8]!
     c44:	str	lr, [sp, #4]
     c48:	add	fp, sp, #4
     c4c:	sub	sp, sp, #8
     c50:	str	r0, [fp, #-8]
     c54:	ldr	r3, [fp, #-8]
     c58:	cmp	r3, #0
     c5c:	beq	c78 <MyGame_Example_Vec3_test2+0x38>
     c60:	ldr	r3, [fp, #-8]
     c64:	add	r3, r3, #24
     c68:	mov	r0, r3
     c6c:	bl	954 <MyGame_Example_Color_read_from_pe>
     c70:	mov	r3, r0
     c74:	b	c7c <MyGame_Example_Vec3_test2+0x3c>
     c78:	mov	r3, #0
     c7c:	mov	r0, r3
     c80:	sub	sp, fp, #4
     c84:	ldr	fp, [sp]
     c88:	add	sp, sp, #4
     c8c:	pop	{pc}		; (ldr pc, [sp], #4)

00000c90 <MyGame_Example_Vec3_test3>:
     c90:	push	{fp}		; (str fp, [sp, #-4]!)
     c94:	add	fp, sp, #0
     c98:	sub	sp, sp, #12
     c9c:	str	r0, [fp, #-8]
     ca0:	ldr	r3, [fp, #-8]
     ca4:	cmp	r3, #0
     ca8:	beq	cb8 <MyGame_Example_Vec3_test3+0x28>
     cac:	ldr	r3, [fp, #-8]
     cb0:	add	r3, r3, #26
     cb4:	b	cbc <MyGame_Example_Vec3_test3+0x2c>
     cb8:	mov	r3, #0
     cbc:	mov	r0, r3
     cc0:	add	sp, fp, #0
     cc4:	pop	{fp}		; (ldr fp, [sp], #4)
     cc8:	bx	lr

00000ccc <MyGame_Example_Monster_as_root>:
     ccc:	str	fp, [sp, #-8]!
     cd0:	str	lr, [sp, #4]
     cd4:	add	fp, sp, #4
     cd8:	sub	sp, sp, #16
     cdc:	str	r0, [fp, #-16]
     ce0:	movw	r3, #0
     ce4:	movt	r3, #0
     ce8:	str	r3, [fp, #-8]
     cec:	ldr	r3, [fp, #-16]
     cf0:	cmp	r3, #0
     cf4:	beq	d28 <MyGame_Example_Monster_as_root+0x5c>
     cf8:	ldr	r1, [fp, #-8]
     cfc:	ldr	r0, [fp, #-16]
     d00:	bl	880 <flatbuffers_has_identifier>
     d04:	mov	r3, r0
     d08:	cmp	r3, #0
     d0c:	beq	d28 <MyGame_Example_Monster_as_root+0x5c>
     d10:	ldr	r0, [fp, #-16]
     d14:	bl	468 <__flatbuffers_uoffset_read_from_pe>
     d18:	mov	r2, r0
     d1c:	ldr	r3, [fp, #-16]
     d20:	add	r3, r3, r2
     d24:	b	d2c <MyGame_Example_Monster_as_root+0x60>
     d28:	mov	r3, #0
     d2c:	mov	r0, r3
     d30:	sub	sp, fp, #4
     d34:	ldr	fp, [sp]
     d38:	add	sp, sp, #4
     d3c:	pop	{pc}		; (ldr pc, [sp], #4)

00000d40 <MyGame_Example_Monster_pos>:
     d40:	str	fp, [sp, #-8]!
     d44:	str	lr, [sp, #4]
     d48:	add	fp, sp, #4
     d4c:	sub	sp, sp, #16
     d50:	str	r0, [fp, #-16]
     d54:	mov	r3, #0
     d58:	strh	r3, [fp, #-6]
     d5c:	ldr	r3, [fp, #-16]
     d60:	cmp	r3, #0
     d64:	bne	d88 <MyGame_Example_Monster_pos+0x48>
     d68:	movw	r3, #0
     d6c:	movt	r3, #0
     d70:	mov	r2, #696	; 0x2b8
     d74:	movw	r1, #0
     d78:	movt	r1, #0
     d7c:	movw	r0, #0
     d80:	movt	r0, #0
     d84:	bl	0 <__assert_fail>
     d88:	mov	r3, #0
     d8c:	strh	r3, [fp, #-8]
     d90:	ldr	r0, [fp, #-16]
     d94:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
     d98:	mov	r3, r0
     d9c:	rsb	r3, r3, #0
     da0:	ldr	r2, [fp, #-16]
     da4:	add	r3, r2, r3
     da8:	str	r3, [fp, #-12]
     dac:	ldr	r0, [fp, #-12]
     db0:	bl	52c <__flatbuffers_voffset_read_from_pe>
     db4:	mov	r3, r0
     db8:	mov	r2, r3
     dbc:	ldrh	r3, [fp, #-8]
     dc0:	add	r3, r3, #3
     dc4:	lsl	r3, r3, #1
     dc8:	cmp	r2, r3
     dcc:	bcc	df4 <MyGame_Example_Monster_pos+0xb4>
     dd0:	ldrh	r3, [fp, #-8]
     dd4:	add	r3, r3, #2
     dd8:	lsl	r3, r3, #1
     ddc:	ldr	r2, [fp, #-12]
     de0:	add	r3, r2, r3
     de4:	mov	r0, r3
     de8:	bl	52c <__flatbuffers_voffset_read_from_pe>
     dec:	mov	r3, r0
     df0:	strh	r3, [fp, #-6]
     df4:	ldrh	r3, [fp, #-6]
     df8:	cmp	r3, #0
     dfc:	beq	e10 <MyGame_Example_Monster_pos+0xd0>
     e00:	ldrh	r3, [fp, #-6]
     e04:	ldr	r2, [fp, #-16]
     e08:	add	r3, r2, r3
     e0c:	b	e14 <MyGame_Example_Monster_pos+0xd4>
     e10:	mov	r3, #0
     e14:	mov	r0, r3
     e18:	sub	sp, fp, #4
     e1c:	ldr	fp, [sp]
     e20:	add	sp, sp, #4
     e24:	pop	{pc}		; (ldr pc, [sp], #4)

00000e28 <MyGame_Example_Monster_hp>:
     e28:	str	fp, [sp, #-8]!
     e2c:	str	lr, [sp, #4]
     e30:	add	fp, sp, #4
     e34:	sub	sp, sp, #16
     e38:	str	r0, [fp, #-16]
     e3c:	mov	r3, #0
     e40:	strh	r3, [fp, #-6]
     e44:	ldr	r3, [fp, #-16]
     e48:	cmp	r3, #0
     e4c:	bne	e70 <MyGame_Example_Monster_hp+0x48>
     e50:	movw	r3, #0
     e54:	movt	r3, #0
     e58:	movw	r2, #697	; 0x2b9
     e5c:	movw	r1, #0
     e60:	movt	r1, #0
     e64:	movw	r0, #0
     e68:	movt	r0, #0
     e6c:	bl	0 <__assert_fail>
     e70:	mov	r3, #2
     e74:	strh	r3, [fp, #-8]
     e78:	ldr	r0, [fp, #-16]
     e7c:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
     e80:	mov	r3, r0
     e84:	rsb	r3, r3, #0
     e88:	ldr	r2, [fp, #-16]
     e8c:	add	r3, r2, r3
     e90:	str	r3, [fp, #-12]
     e94:	ldr	r0, [fp, #-12]
     e98:	bl	52c <__flatbuffers_voffset_read_from_pe>
     e9c:	mov	r3, r0
     ea0:	mov	r2, r3
     ea4:	ldrh	r3, [fp, #-8]
     ea8:	add	r3, r3, #3
     eac:	lsl	r3, r3, #1
     eb0:	cmp	r2, r3
     eb4:	bcc	edc <MyGame_Example_Monster_hp+0xb4>
     eb8:	ldrh	r3, [fp, #-8]
     ebc:	add	r3, r3, #2
     ec0:	lsl	r3, r3, #1
     ec4:	ldr	r2, [fp, #-12]
     ec8:	add	r3, r2, r3
     ecc:	mov	r0, r3
     ed0:	bl	52c <__flatbuffers_voffset_read_from_pe>
     ed4:	mov	r3, r0
     ed8:	strh	r3, [fp, #-6]
     edc:	ldrh	r3, [fp, #-6]
     ee0:	cmp	r3, #0
     ee4:	beq	f04 <MyGame_Example_Monster_hp+0xdc>
     ee8:	ldrh	r3, [fp, #-6]
     eec:	ldr	r2, [fp, #-16]
     ef0:	add	r3, r2, r3
     ef4:	mov	r0, r3
     ef8:	bl	250 <flatbuffers_int16_read_from_pe>
     efc:	mov	r3, r0
     f00:	b	f08 <MyGame_Example_Monster_hp+0xe0>
     f04:	mov	r3, #100	; 0x64
     f08:	mov	r0, r3
     f0c:	sub	sp, fp, #4
     f10:	ldr	fp, [sp]
     f14:	add	sp, sp, #4
     f18:	pop	{pc}		; (ldr pc, [sp], #4)

00000f1c <MyGame_Example_Monster_name>:
     f1c:	str	fp, [sp, #-8]!
     f20:	str	lr, [sp, #4]
     f24:	add	fp, sp, #4
     f28:	sub	sp, sp, #24
     f2c:	str	r0, [fp, #-24]	; 0xffffffe8
     f30:	mov	r3, #0
     f34:	strh	r3, [fp, #-6]
     f38:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f3c:	cmp	r3, #0
     f40:	bne	f64 <MyGame_Example_Monster_name+0x48>
     f44:	movw	r3, #0
     f48:	movt	r3, #0
     f4c:	movw	r2, #699	; 0x2bb
     f50:	movw	r1, #0
     f54:	movt	r1, #0
     f58:	movw	r0, #0
     f5c:	movt	r0, #0
     f60:	bl	0 <__assert_fail>
     f64:	mov	r3, #3
     f68:	strh	r3, [fp, #-8]
     f6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f70:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
     f74:	mov	r3, r0
     f78:	rsb	r3, r3, #0
     f7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     f80:	add	r3, r2, r3
     f84:	str	r3, [fp, #-12]
     f88:	ldr	r0, [fp, #-12]
     f8c:	bl	52c <__flatbuffers_voffset_read_from_pe>
     f90:	mov	r3, r0
     f94:	mov	r2, r3
     f98:	ldrh	r3, [fp, #-8]
     f9c:	add	r3, r3, #3
     fa0:	lsl	r3, r3, #1
     fa4:	cmp	r2, r3
     fa8:	bcc	fd0 <MyGame_Example_Monster_name+0xb4>
     fac:	ldrh	r3, [fp, #-8]
     fb0:	add	r3, r3, #2
     fb4:	lsl	r3, r3, #1
     fb8:	ldr	r2, [fp, #-12]
     fbc:	add	r3, r2, r3
     fc0:	mov	r0, r3
     fc4:	bl	52c <__flatbuffers_voffset_read_from_pe>
     fc8:	mov	r3, r0
     fcc:	strh	r3, [fp, #-6]
     fd0:	ldrh	r3, [fp, #-6]
     fd4:	cmp	r3, #0
     fd8:	beq	1008 <MyGame_Example_Monster_name+0xec>
     fdc:	ldrh	r3, [fp, #-6]
     fe0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fe4:	add	r3, r2, r3
     fe8:	str	r3, [fp, #-16]
     fec:	ldr	r0, [fp, #-16]
     ff0:	bl	468 <__flatbuffers_uoffset_read_from_pe>
     ff4:	mov	r3, r0
     ff8:	add	r3, r3, #4
     ffc:	ldr	r2, [fp, #-16]
    1000:	add	r3, r2, r3
    1004:	b	1028 <MyGame_Example_Monster_name+0x10c>
    1008:	movw	r3, #0
    100c:	movt	r3, #0
    1010:	movw	r2, #699	; 0x2bb
    1014:	movw	r1, #0
    1018:	movt	r1, #0
    101c:	movw	r0, #0
    1020:	movt	r0, #0
    1024:	bl	0 <__assert_fail>
    1028:	mov	r0, r3
    102c:	sub	sp, fp, #4
    1030:	ldr	fp, [sp]
    1034:	add	sp, sp, #4
    1038:	pop	{pc}		; (ldr pc, [sp], #4)

0000103c <MyGame_Example_Monster_inventory>:
    103c:	str	fp, [sp, #-8]!
    1040:	str	lr, [sp, #4]
    1044:	add	fp, sp, #4
    1048:	sub	sp, sp, #24
    104c:	str	r0, [fp, #-24]	; 0xffffffe8
    1050:	mov	r3, #0
    1054:	strh	r3, [fp, #-6]
    1058:	ldr	r3, [fp, #-24]	; 0xffffffe8
    105c:	cmp	r3, #0
    1060:	bne	1084 <MyGame_Example_Monster_inventory+0x48>
    1064:	movw	r3, #0
    1068:	movt	r3, #0
    106c:	movw	r2, #706	; 0x2c2
    1070:	movw	r1, #0
    1074:	movt	r1, #0
    1078:	movw	r0, #0
    107c:	movt	r0, #0
    1080:	bl	0 <__assert_fail>
    1084:	mov	r3, #5
    1088:	strh	r3, [fp, #-8]
    108c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1090:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1094:	mov	r3, r0
    1098:	rsb	r3, r3, #0
    109c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    10a0:	add	r3, r2, r3
    10a4:	str	r3, [fp, #-12]
    10a8:	ldr	r0, [fp, #-12]
    10ac:	bl	52c <__flatbuffers_voffset_read_from_pe>
    10b0:	mov	r3, r0
    10b4:	mov	r2, r3
    10b8:	ldrh	r3, [fp, #-8]
    10bc:	add	r3, r3, #3
    10c0:	lsl	r3, r3, #1
    10c4:	cmp	r2, r3
    10c8:	bcc	10f0 <MyGame_Example_Monster_inventory+0xb4>
    10cc:	ldrh	r3, [fp, #-8]
    10d0:	add	r3, r3, #2
    10d4:	lsl	r3, r3, #1
    10d8:	ldr	r2, [fp, #-12]
    10dc:	add	r3, r2, r3
    10e0:	mov	r0, r3
    10e4:	bl	52c <__flatbuffers_voffset_read_from_pe>
    10e8:	mov	r3, r0
    10ec:	strh	r3, [fp, #-6]
    10f0:	ldrh	r3, [fp, #-6]
    10f4:	cmp	r3, #0
    10f8:	beq	1128 <MyGame_Example_Monster_inventory+0xec>
    10fc:	ldrh	r3, [fp, #-6]
    1100:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1104:	add	r3, r2, r3
    1108:	str	r3, [fp, #-16]
    110c:	ldr	r0, [fp, #-16]
    1110:	bl	468 <__flatbuffers_uoffset_read_from_pe>
    1114:	mov	r3, r0
    1118:	add	r3, r3, #4
    111c:	ldr	r2, [fp, #-16]
    1120:	add	r3, r2, r3
    1124:	b	112c <MyGame_Example_Monster_inventory+0xf0>
    1128:	mov	r3, #0
    112c:	mov	r0, r3
    1130:	sub	sp, fp, #4
    1134:	ldr	fp, [sp]
    1138:	add	sp, sp, #4
    113c:	pop	{pc}		; (ldr pc, [sp], #4)

00001140 <MyGame_Example_Monster_testarrayofstring>:
    1140:	str	fp, [sp, #-8]!
    1144:	str	lr, [sp, #4]
    1148:	add	fp, sp, #4
    114c:	sub	sp, sp, #24
    1150:	str	r0, [fp, #-24]	; 0xffffffe8
    1154:	mov	r3, #0
    1158:	strh	r3, [fp, #-6]
    115c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1160:	cmp	r3, #0
    1164:	bne	1188 <MyGame_Example_Monster_testarrayofstring+0x48>
    1168:	movw	r3, #0
    116c:	movt	r3, #0
    1170:	mov	r2, #712	; 0x2c8
    1174:	movw	r1, #0
    1178:	movt	r1, #0
    117c:	movw	r0, #0
    1180:	movt	r0, #0
    1184:	bl	0 <__assert_fail>
    1188:	mov	r3, #10
    118c:	strh	r3, [fp, #-8]
    1190:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1194:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1198:	mov	r3, r0
    119c:	rsb	r3, r3, #0
    11a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    11a4:	add	r3, r2, r3
    11a8:	str	r3, [fp, #-12]
    11ac:	ldr	r0, [fp, #-12]
    11b0:	bl	52c <__flatbuffers_voffset_read_from_pe>
    11b4:	mov	r3, r0
    11b8:	mov	r2, r3
    11bc:	ldrh	r3, [fp, #-8]
    11c0:	add	r3, r3, #3
    11c4:	lsl	r3, r3, #1
    11c8:	cmp	r2, r3
    11cc:	bcc	11f4 <MyGame_Example_Monster_testarrayofstring+0xb4>
    11d0:	ldrh	r3, [fp, #-8]
    11d4:	add	r3, r3, #2
    11d8:	lsl	r3, r3, #1
    11dc:	ldr	r2, [fp, #-12]
    11e0:	add	r3, r2, r3
    11e4:	mov	r0, r3
    11e8:	bl	52c <__flatbuffers_voffset_read_from_pe>
    11ec:	mov	r3, r0
    11f0:	strh	r3, [fp, #-6]
    11f4:	ldrh	r3, [fp, #-6]
    11f8:	cmp	r3, #0
    11fc:	beq	122c <MyGame_Example_Monster_testarrayofstring+0xec>
    1200:	ldrh	r3, [fp, #-6]
    1204:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1208:	add	r3, r2, r3
    120c:	str	r3, [fp, #-16]
    1210:	ldr	r0, [fp, #-16]
    1214:	bl	468 <__flatbuffers_uoffset_read_from_pe>
    1218:	mov	r3, r0
    121c:	add	r3, r3, #4
    1220:	ldr	r2, [fp, #-16]
    1224:	add	r3, r2, r3
    1228:	b	1230 <MyGame_Example_Monster_testarrayofstring+0xf0>
    122c:	mov	r3, #0
    1230:	mov	r0, r3
    1234:	sub	sp, fp, #4
    1238:	ldr	fp, [sp]
    123c:	add	sp, sp, #4
    1240:	pop	{pc}		; (ldr pc, [sp], #4)

00001244 <MyGame_Example_Monster_test_type>:
    1244:	str	fp, [sp, #-8]!
    1248:	str	lr, [sp, #4]
    124c:	add	fp, sp, #4
    1250:	sub	sp, sp, #16
    1254:	str	r0, [fp, #-16]
    1258:	mov	r3, #0
    125c:	strh	r3, [fp, #-6]
    1260:	ldr	r3, [fp, #-16]
    1264:	cmp	r3, #0
    1268:	bne	128c <MyGame_Example_Monster_test_type+0x48>
    126c:	movw	r3, #0
    1270:	movt	r3, #0
    1274:	movw	r2, #717	; 0x2cd
    1278:	movw	r1, #0
    127c:	movt	r1, #0
    1280:	movw	r0, #0
    1284:	movt	r0, #0
    1288:	bl	0 <__assert_fail>
    128c:	mov	r3, #7
    1290:	strh	r3, [fp, #-8]
    1294:	ldr	r0, [fp, #-16]
    1298:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    129c:	mov	r3, r0
    12a0:	rsb	r3, r3, #0
    12a4:	ldr	r2, [fp, #-16]
    12a8:	add	r3, r2, r3
    12ac:	str	r3, [fp, #-12]
    12b0:	ldr	r0, [fp, #-12]
    12b4:	bl	52c <__flatbuffers_voffset_read_from_pe>
    12b8:	mov	r3, r0
    12bc:	mov	r2, r3
    12c0:	ldrh	r3, [fp, #-8]
    12c4:	add	r3, r3, #3
    12c8:	lsl	r3, r3, #1
    12cc:	cmp	r2, r3
    12d0:	bcc	12f8 <MyGame_Example_Monster_test_type+0xb4>
    12d4:	ldrh	r3, [fp, #-8]
    12d8:	add	r3, r3, #2
    12dc:	lsl	r3, r3, #1
    12e0:	ldr	r2, [fp, #-12]
    12e4:	add	r3, r2, r3
    12e8:	mov	r0, r3
    12ec:	bl	52c <__flatbuffers_voffset_read_from_pe>
    12f0:	mov	r3, r0
    12f4:	strh	r3, [fp, #-6]
    12f8:	ldrh	r3, [fp, #-6]
    12fc:	cmp	r3, #0
    1300:	beq	1320 <MyGame_Example_Monster_test_type+0xdc>
    1304:	ldrh	r3, [fp, #-6]
    1308:	ldr	r2, [fp, #-16]
    130c:	add	r3, r2, r3
    1310:	mov	r0, r3
    1314:	bl	590 <__flatbuffers_utype_read_from_pe>
    1318:	mov	r3, r0
    131c:	b	1324 <MyGame_Example_Monster_test_type+0xe0>
    1320:	mov	r3, #0
    1324:	mov	r0, r3
    1328:	sub	sp, fp, #4
    132c:	ldr	fp, [sp]
    1330:	add	sp, sp, #4
    1334:	pop	{pc}		; (ldr pc, [sp], #4)

00001338 <MyGame_Example_Monster_test>:
    1338:	str	fp, [sp, #-8]!
    133c:	str	lr, [sp, #4]
    1340:	add	fp, sp, #4
    1344:	sub	sp, sp, #24
    1348:	str	r0, [fp, #-24]	; 0xffffffe8
    134c:	mov	r3, #0
    1350:	strh	r3, [fp, #-6]
    1354:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1358:	cmp	r3, #0
    135c:	bne	1380 <MyGame_Example_Monster_test+0x48>
    1360:	movw	r3, #0
    1364:	movt	r3, #0
    1368:	movw	r2, #717	; 0x2cd
    136c:	movw	r1, #0
    1370:	movt	r1, #0
    1374:	movw	r0, #0
    1378:	movt	r0, #0
    137c:	bl	0 <__assert_fail>
    1380:	mov	r3, #8
    1384:	strh	r3, [fp, #-8]
    1388:	ldr	r0, [fp, #-24]	; 0xffffffe8
    138c:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1390:	mov	r3, r0
    1394:	rsb	r3, r3, #0
    1398:	ldr	r2, [fp, #-24]	; 0xffffffe8
    139c:	add	r3, r2, r3
    13a0:	str	r3, [fp, #-12]
    13a4:	ldr	r0, [fp, #-12]
    13a8:	bl	52c <__flatbuffers_voffset_read_from_pe>
    13ac:	mov	r3, r0
    13b0:	mov	r2, r3
    13b4:	ldrh	r3, [fp, #-8]
    13b8:	add	r3, r3, #3
    13bc:	lsl	r3, r3, #1
    13c0:	cmp	r2, r3
    13c4:	bcc	13ec <MyGame_Example_Monster_test+0xb4>
    13c8:	ldrh	r3, [fp, #-8]
    13cc:	add	r3, r3, #2
    13d0:	lsl	r3, r3, #1
    13d4:	ldr	r2, [fp, #-12]
    13d8:	add	r3, r2, r3
    13dc:	mov	r0, r3
    13e0:	bl	52c <__flatbuffers_voffset_read_from_pe>
    13e4:	mov	r3, r0
    13e8:	strh	r3, [fp, #-6]
    13ec:	ldrh	r3, [fp, #-6]
    13f0:	cmp	r3, #0
    13f4:	beq	1420 <MyGame_Example_Monster_test+0xe8>
    13f8:	ldrh	r3, [fp, #-6]
    13fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1400:	add	r3, r2, r3
    1404:	str	r3, [fp, #-16]
    1408:	ldr	r0, [fp, #-16]
    140c:	bl	468 <__flatbuffers_uoffset_read_from_pe>
    1410:	mov	r2, r0
    1414:	ldr	r3, [fp, #-16]
    1418:	add	r3, r3, r2
    141c:	b	1424 <MyGame_Example_Monster_test+0xec>
    1420:	mov	r3, #0
    1424:	mov	r0, r3
    1428:	sub	sp, fp, #4
    142c:	ldr	fp, [sp]
    1430:	add	sp, sp, #4
    1434:	pop	{pc}		; (ldr pc, [sp], #4)

00001438 <MyGame_Example_Monster_test4>:
    1438:	str	fp, [sp, #-8]!
    143c:	str	lr, [sp, #4]
    1440:	add	fp, sp, #4
    1444:	sub	sp, sp, #24
    1448:	str	r0, [fp, #-24]	; 0xffffffe8
    144c:	mov	r3, #0
    1450:	strh	r3, [fp, #-6]
    1454:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1458:	cmp	r3, #0
    145c:	bne	1480 <MyGame_Example_Monster_test4+0x48>
    1460:	movw	r3, #0
    1464:	movt	r3, #0
    1468:	movw	r2, #718	; 0x2ce
    146c:	movw	r1, #0
    1470:	movt	r1, #0
    1474:	movw	r0, #0
    1478:	movt	r0, #0
    147c:	bl	0 <__assert_fail>
    1480:	mov	r3, #9
    1484:	strh	r3, [fp, #-8]
    1488:	ldr	r0, [fp, #-24]	; 0xffffffe8
    148c:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1490:	mov	r3, r0
    1494:	rsb	r3, r3, #0
    1498:	ldr	r2, [fp, #-24]	; 0xffffffe8
    149c:	add	r3, r2, r3
    14a0:	str	r3, [fp, #-12]
    14a4:	ldr	r0, [fp, #-12]
    14a8:	bl	52c <__flatbuffers_voffset_read_from_pe>
    14ac:	mov	r3, r0
    14b0:	mov	r2, r3
    14b4:	ldrh	r3, [fp, #-8]
    14b8:	add	r3, r3, #3
    14bc:	lsl	r3, r3, #1
    14c0:	cmp	r2, r3
    14c4:	bcc	14ec <MyGame_Example_Monster_test4+0xb4>
    14c8:	ldrh	r3, [fp, #-8]
    14cc:	add	r3, r3, #2
    14d0:	lsl	r3, r3, #1
    14d4:	ldr	r2, [fp, #-12]
    14d8:	add	r3, r2, r3
    14dc:	mov	r0, r3
    14e0:	bl	52c <__flatbuffers_voffset_read_from_pe>
    14e4:	mov	r3, r0
    14e8:	strh	r3, [fp, #-6]
    14ec:	ldrh	r3, [fp, #-6]
    14f0:	cmp	r3, #0
    14f4:	beq	1524 <MyGame_Example_Monster_test4+0xec>
    14f8:	ldrh	r3, [fp, #-6]
    14fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1500:	add	r3, r2, r3
    1504:	str	r3, [fp, #-16]
    1508:	ldr	r0, [fp, #-16]
    150c:	bl	468 <__flatbuffers_uoffset_read_from_pe>
    1510:	mov	r3, r0
    1514:	add	r3, r3, #4
    1518:	ldr	r2, [fp, #-16]
    151c:	add	r3, r2, r3
    1520:	b	1528 <MyGame_Example_Monster_test4+0xf0>
    1524:	mov	r3, #0
    1528:	mov	r0, r3
    152c:	sub	sp, fp, #4
    1530:	ldr	fp, [sp]
    1534:	add	sp, sp, #4
    1538:	pop	{pc}		; (ldr pc, [sp], #4)

0000153c <MyGame_Example_Monster_testhashs32_fnv1>:
    153c:	str	fp, [sp, #-8]!
    1540:	str	lr, [sp, #4]
    1544:	add	fp, sp, #4
    1548:	sub	sp, sp, #16
    154c:	str	r0, [fp, #-16]
    1550:	mov	r3, #0
    1554:	strh	r3, [fp, #-6]
    1558:	ldr	r3, [fp, #-16]
    155c:	cmp	r3, #0
    1560:	bne	1584 <MyGame_Example_Monster_testhashs32_fnv1+0x48>
    1564:	movw	r3, #0
    1568:	movt	r3, #0
    156c:	mov	r2, #724	; 0x2d4
    1570:	movw	r1, #0
    1574:	movt	r1, #0
    1578:	movw	r0, #0
    157c:	movt	r0, #0
    1580:	bl	0 <__assert_fail>
    1584:	mov	r3, #16
    1588:	strh	r3, [fp, #-8]
    158c:	ldr	r0, [fp, #-16]
    1590:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1594:	mov	r3, r0
    1598:	rsb	r3, r3, #0
    159c:	ldr	r2, [fp, #-16]
    15a0:	add	r3, r2, r3
    15a4:	str	r3, [fp, #-12]
    15a8:	ldr	r0, [fp, #-12]
    15ac:	bl	52c <__flatbuffers_voffset_read_from_pe>
    15b0:	mov	r3, r0
    15b4:	mov	r2, r3
    15b8:	ldrh	r3, [fp, #-8]
    15bc:	add	r3, r3, #3
    15c0:	lsl	r3, r3, #1
    15c4:	cmp	r2, r3
    15c8:	bcc	15f0 <MyGame_Example_Monster_testhashs32_fnv1+0xb4>
    15cc:	ldrh	r3, [fp, #-8]
    15d0:	add	r3, r3, #2
    15d4:	lsl	r3, r3, #1
    15d8:	ldr	r2, [fp, #-12]
    15dc:	add	r3, r2, r3
    15e0:	mov	r0, r3
    15e4:	bl	52c <__flatbuffers_voffset_read_from_pe>
    15e8:	mov	r3, r0
    15ec:	strh	r3, [fp, #-6]
    15f0:	ldrh	r3, [fp, #-6]
    15f4:	cmp	r3, #0
    15f8:	beq	1618 <MyGame_Example_Monster_testhashs32_fnv1+0xdc>
    15fc:	ldrh	r3, [fp, #-6]
    1600:	ldr	r2, [fp, #-16]
    1604:	add	r3, r2, r3
    1608:	mov	r0, r3
    160c:	bl	2b0 <flatbuffers_int32_read_from_pe>
    1610:	mov	r3, r0
    1614:	b	161c <MyGame_Example_Monster_testhashs32_fnv1+0xe0>
    1618:	mov	r3, #0
    161c:	mov	r0, r3
    1620:	sub	sp, fp, #4
    1624:	ldr	fp, [sp]
    1628:	add	sp, sp, #4
    162c:	pop	{pc}		; (ldr pc, [sp], #4)

00001630 <MyGame_Example_Monster_testhashu32_fnv1>:
    1630:	str	fp, [sp, #-8]!
    1634:	str	lr, [sp, #4]
    1638:	add	fp, sp, #4
    163c:	sub	sp, sp, #16
    1640:	str	r0, [fp, #-16]
    1644:	mov	r3, #0
    1648:	strh	r3, [fp, #-6]
    164c:	ldr	r3, [fp, #-16]
    1650:	cmp	r3, #0
    1654:	bne	1678 <MyGame_Example_Monster_testhashu32_fnv1+0x48>
    1658:	movw	r3, #0
    165c:	movt	r3, #0
    1660:	movw	r2, #725	; 0x2d5
    1664:	movw	r1, #0
    1668:	movt	r1, #0
    166c:	movw	r0, #0
    1670:	movt	r0, #0
    1674:	bl	0 <__assert_fail>
    1678:	mov	r3, #17
    167c:	strh	r3, [fp, #-8]
    1680:	ldr	r0, [fp, #-16]
    1684:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1688:	mov	r3, r0
    168c:	rsb	r3, r3, #0
    1690:	ldr	r2, [fp, #-16]
    1694:	add	r3, r2, r3
    1698:	str	r3, [fp, #-12]
    169c:	ldr	r0, [fp, #-12]
    16a0:	bl	52c <__flatbuffers_voffset_read_from_pe>
    16a4:	mov	r3, r0
    16a8:	mov	r2, r3
    16ac:	ldrh	r3, [fp, #-8]
    16b0:	add	r3, r3, #3
    16b4:	lsl	r3, r3, #1
    16b8:	cmp	r2, r3
    16bc:	bcc	16e4 <MyGame_Example_Monster_testhashu32_fnv1+0xb4>
    16c0:	ldrh	r3, [fp, #-8]
    16c4:	add	r3, r3, #2
    16c8:	lsl	r3, r3, #1
    16cc:	ldr	r2, [fp, #-12]
    16d0:	add	r3, r2, r3
    16d4:	mov	r0, r3
    16d8:	bl	52c <__flatbuffers_voffset_read_from_pe>
    16dc:	mov	r3, r0
    16e0:	strh	r3, [fp, #-6]
    16e4:	ldrh	r3, [fp, #-6]
    16e8:	cmp	r3, #0
    16ec:	beq	170c <MyGame_Example_Monster_testhashu32_fnv1+0xdc>
    16f0:	ldrh	r3, [fp, #-6]
    16f4:	ldr	r2, [fp, #-16]
    16f8:	add	r3, r2, r3
    16fc:	mov	r0, r3
    1700:	bl	118 <flatbuffers_uint32_read_from_pe>
    1704:	mov	r3, r0
    1708:	b	1710 <MyGame_Example_Monster_testhashu32_fnv1+0xe0>
    170c:	mov	r3, #0
    1710:	mov	r0, r3
    1714:	sub	sp, fp, #4
    1718:	ldr	fp, [sp]
    171c:	add	sp, sp, #4
    1720:	pop	{pc}		; (ldr pc, [sp], #4)

00001724 <MyGame_Example_Monster_testhashs64_fnv1>:
    1724:	str	fp, [sp, #-8]!
    1728:	str	lr, [sp, #4]
    172c:	add	fp, sp, #4
    1730:	sub	sp, sp, #16
    1734:	str	r0, [fp, #-16]
    1738:	mov	r3, #0
    173c:	strh	r3, [fp, #-6]
    1740:	ldr	r3, [fp, #-16]
    1744:	cmp	r3, #0
    1748:	bne	176c <MyGame_Example_Monster_testhashs64_fnv1+0x48>
    174c:	movw	r3, #0
    1750:	movt	r3, #0
    1754:	movw	r2, #726	; 0x2d6
    1758:	movw	r1, #0
    175c:	movt	r1, #0
    1760:	movw	r0, #0
    1764:	movt	r0, #0
    1768:	bl	0 <__assert_fail>
    176c:	mov	r3, #18
    1770:	strh	r3, [fp, #-8]
    1774:	ldr	r0, [fp, #-16]
    1778:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    177c:	mov	r3, r0
    1780:	rsb	r3, r3, #0
    1784:	ldr	r2, [fp, #-16]
    1788:	add	r3, r2, r3
    178c:	str	r3, [fp, #-12]
    1790:	ldr	r0, [fp, #-12]
    1794:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1798:	mov	r3, r0
    179c:	mov	r2, r3
    17a0:	ldrh	r3, [fp, #-8]
    17a4:	add	r3, r3, #3
    17a8:	lsl	r3, r3, #1
    17ac:	cmp	r2, r3
    17b0:	bcc	17d8 <MyGame_Example_Monster_testhashs64_fnv1+0xb4>
    17b4:	ldrh	r3, [fp, #-8]
    17b8:	add	r3, r3, #2
    17bc:	lsl	r3, r3, #1
    17c0:	ldr	r2, [fp, #-12]
    17c4:	add	r3, r2, r3
    17c8:	mov	r0, r3
    17cc:	bl	52c <__flatbuffers_voffset_read_from_pe>
    17d0:	mov	r3, r0
    17d4:	strh	r3, [fp, #-6]
    17d8:	ldrh	r3, [fp, #-6]
    17dc:	cmp	r3, #0
    17e0:	beq	1804 <MyGame_Example_Monster_testhashs64_fnv1+0xe0>
    17e4:	ldrh	r3, [fp, #-6]
    17e8:	ldr	r2, [fp, #-16]
    17ec:	add	r3, r2, r3
    17f0:	mov	r0, r3
    17f4:	bl	314 <flatbuffers_int64_read_from_pe>
    17f8:	mov	r2, r0
    17fc:	mov	r3, r1
    1800:	b	180c <MyGame_Example_Monster_testhashs64_fnv1+0xe8>
    1804:	mov	r2, #0
    1808:	mov	r3, #0
    180c:	mov	r0, r2
    1810:	mov	r1, r3
    1814:	sub	sp, fp, #4
    1818:	ldr	fp, [sp]
    181c:	add	sp, sp, #4
    1820:	pop	{pc}		; (ldr pc, [sp], #4)

00001824 <MyGame_Example_Monster_testhashu64_fnv1>:
    1824:	str	fp, [sp, #-8]!
    1828:	str	lr, [sp, #4]
    182c:	add	fp, sp, #4
    1830:	sub	sp, sp, #16
    1834:	str	r0, [fp, #-16]
    1838:	mov	r3, #0
    183c:	strh	r3, [fp, #-6]
    1840:	ldr	r3, [fp, #-16]
    1844:	cmp	r3, #0
    1848:	bne	186c <MyGame_Example_Monster_testhashu64_fnv1+0x48>
    184c:	movw	r3, #0
    1850:	movt	r3, #0
    1854:	movw	r2, #727	; 0x2d7
    1858:	movw	r1, #0
    185c:	movt	r1, #0
    1860:	movw	r0, #0
    1864:	movt	r0, #0
    1868:	bl	0 <__assert_fail>
    186c:	mov	r3, #19
    1870:	strh	r3, [fp, #-8]
    1874:	ldr	r0, [fp, #-16]
    1878:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    187c:	mov	r3, r0
    1880:	rsb	r3, r3, #0
    1884:	ldr	r2, [fp, #-16]
    1888:	add	r3, r2, r3
    188c:	str	r3, [fp, #-12]
    1890:	ldr	r0, [fp, #-12]
    1894:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1898:	mov	r3, r0
    189c:	mov	r2, r3
    18a0:	ldrh	r3, [fp, #-8]
    18a4:	add	r3, r3, #3
    18a8:	lsl	r3, r3, #1
    18ac:	cmp	r2, r3
    18b0:	bcc	18d8 <MyGame_Example_Monster_testhashu64_fnv1+0xb4>
    18b4:	ldrh	r3, [fp, #-8]
    18b8:	add	r3, r3, #2
    18bc:	lsl	r3, r3, #1
    18c0:	ldr	r2, [fp, #-12]
    18c4:	add	r3, r2, r3
    18c8:	mov	r0, r3
    18cc:	bl	52c <__flatbuffers_voffset_read_from_pe>
    18d0:	mov	r3, r0
    18d4:	strh	r3, [fp, #-6]
    18d8:	ldrh	r3, [fp, #-6]
    18dc:	cmp	r3, #0
    18e0:	beq	1904 <MyGame_Example_Monster_testhashu64_fnv1+0xe0>
    18e4:	ldrh	r3, [fp, #-6]
    18e8:	ldr	r2, [fp, #-16]
    18ec:	add	r3, r2, r3
    18f0:	mov	r0, r3
    18f4:	bl	17c <flatbuffers_uint64_read_from_pe>
    18f8:	mov	r2, r0
    18fc:	mov	r3, r1
    1900:	b	190c <MyGame_Example_Monster_testhashu64_fnv1+0xe8>
    1904:	mov	r2, #0
    1908:	mov	r3, #0
    190c:	mov	r0, r2
    1910:	mov	r1, r3
    1914:	sub	sp, fp, #4
    1918:	ldr	fp, [sp]
    191c:	add	sp, sp, #4
    1920:	pop	{pc}		; (ldr pc, [sp], #4)

00001924 <MyGame_Example_Monster_testhashs32_fnv1a>:
    1924:	str	fp, [sp, #-8]!
    1928:	str	lr, [sp, #4]
    192c:	add	fp, sp, #4
    1930:	sub	sp, sp, #16
    1934:	str	r0, [fp, #-16]
    1938:	mov	r3, #0
    193c:	strh	r3, [fp, #-6]
    1940:	ldr	r3, [fp, #-16]
    1944:	cmp	r3, #0
    1948:	bne	196c <MyGame_Example_Monster_testhashs32_fnv1a+0x48>
    194c:	movw	r3, #0
    1950:	movt	r3, #0
    1954:	mov	r2, #728	; 0x2d8
    1958:	movw	r1, #0
    195c:	movt	r1, #0
    1960:	movw	r0, #0
    1964:	movt	r0, #0
    1968:	bl	0 <__assert_fail>
    196c:	mov	r3, #20
    1970:	strh	r3, [fp, #-8]
    1974:	ldr	r0, [fp, #-16]
    1978:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    197c:	mov	r3, r0
    1980:	rsb	r3, r3, #0
    1984:	ldr	r2, [fp, #-16]
    1988:	add	r3, r2, r3
    198c:	str	r3, [fp, #-12]
    1990:	ldr	r0, [fp, #-12]
    1994:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1998:	mov	r3, r0
    199c:	mov	r2, r3
    19a0:	ldrh	r3, [fp, #-8]
    19a4:	add	r3, r3, #3
    19a8:	lsl	r3, r3, #1
    19ac:	cmp	r2, r3
    19b0:	bcc	19d8 <MyGame_Example_Monster_testhashs32_fnv1a+0xb4>
    19b4:	ldrh	r3, [fp, #-8]
    19b8:	add	r3, r3, #2
    19bc:	lsl	r3, r3, #1
    19c0:	ldr	r2, [fp, #-12]
    19c4:	add	r3, r2, r3
    19c8:	mov	r0, r3
    19cc:	bl	52c <__flatbuffers_voffset_read_from_pe>
    19d0:	mov	r3, r0
    19d4:	strh	r3, [fp, #-6]
    19d8:	ldrh	r3, [fp, #-6]
    19dc:	cmp	r3, #0
    19e0:	beq	1a00 <MyGame_Example_Monster_testhashs32_fnv1a+0xdc>
    19e4:	ldrh	r3, [fp, #-6]
    19e8:	ldr	r2, [fp, #-16]
    19ec:	add	r3, r2, r3
    19f0:	mov	r0, r3
    19f4:	bl	2b0 <flatbuffers_int32_read_from_pe>
    19f8:	mov	r3, r0
    19fc:	b	1a04 <MyGame_Example_Monster_testhashs32_fnv1a+0xe0>
    1a00:	mov	r3, #0
    1a04:	mov	r0, r3
    1a08:	sub	sp, fp, #4
    1a0c:	ldr	fp, [sp]
    1a10:	add	sp, sp, #4
    1a14:	pop	{pc}		; (ldr pc, [sp], #4)

00001a18 <MyGame_Example_Monster_testhashu32_fnv1a>:
    1a18:	str	fp, [sp, #-8]!
    1a1c:	str	lr, [sp, #4]
    1a20:	add	fp, sp, #4
    1a24:	sub	sp, sp, #16
    1a28:	str	r0, [fp, #-16]
    1a2c:	mov	r3, #0
    1a30:	strh	r3, [fp, #-6]
    1a34:	ldr	r3, [fp, #-16]
    1a38:	cmp	r3, #0
    1a3c:	bne	1a60 <MyGame_Example_Monster_testhashu32_fnv1a+0x48>
    1a40:	movw	r3, #0
    1a44:	movt	r3, #0
    1a48:	movw	r2, #729	; 0x2d9
    1a4c:	movw	r1, #0
    1a50:	movt	r1, #0
    1a54:	movw	r0, #0
    1a58:	movt	r0, #0
    1a5c:	bl	0 <__assert_fail>
    1a60:	mov	r3, #21
    1a64:	strh	r3, [fp, #-8]
    1a68:	ldr	r0, [fp, #-16]
    1a6c:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1a70:	mov	r3, r0
    1a74:	rsb	r3, r3, #0
    1a78:	ldr	r2, [fp, #-16]
    1a7c:	add	r3, r2, r3
    1a80:	str	r3, [fp, #-12]
    1a84:	ldr	r0, [fp, #-12]
    1a88:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1a8c:	mov	r3, r0
    1a90:	mov	r2, r3
    1a94:	ldrh	r3, [fp, #-8]
    1a98:	add	r3, r3, #3
    1a9c:	lsl	r3, r3, #1
    1aa0:	cmp	r2, r3
    1aa4:	bcc	1acc <MyGame_Example_Monster_testhashu32_fnv1a+0xb4>
    1aa8:	ldrh	r3, [fp, #-8]
    1aac:	add	r3, r3, #2
    1ab0:	lsl	r3, r3, #1
    1ab4:	ldr	r2, [fp, #-12]
    1ab8:	add	r3, r2, r3
    1abc:	mov	r0, r3
    1ac0:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1ac4:	mov	r3, r0
    1ac8:	strh	r3, [fp, #-6]
    1acc:	ldrh	r3, [fp, #-6]
    1ad0:	cmp	r3, #0
    1ad4:	beq	1af4 <MyGame_Example_Monster_testhashu32_fnv1a+0xdc>
    1ad8:	ldrh	r3, [fp, #-6]
    1adc:	ldr	r2, [fp, #-16]
    1ae0:	add	r3, r2, r3
    1ae4:	mov	r0, r3
    1ae8:	bl	118 <flatbuffers_uint32_read_from_pe>
    1aec:	mov	r3, r0
    1af0:	b	1af8 <MyGame_Example_Monster_testhashu32_fnv1a+0xe0>
    1af4:	mov	r3, #0
    1af8:	mov	r0, r3
    1afc:	sub	sp, fp, #4
    1b00:	ldr	fp, [sp]
    1b04:	add	sp, sp, #4
    1b08:	pop	{pc}		; (ldr pc, [sp], #4)

00001b0c <MyGame_Example_Monster_testhashs64_fnv1a>:
    1b0c:	str	fp, [sp, #-8]!
    1b10:	str	lr, [sp, #4]
    1b14:	add	fp, sp, #4
    1b18:	sub	sp, sp, #16
    1b1c:	str	r0, [fp, #-16]
    1b20:	mov	r3, #0
    1b24:	strh	r3, [fp, #-6]
    1b28:	ldr	r3, [fp, #-16]
    1b2c:	cmp	r3, #0
    1b30:	bne	1b54 <MyGame_Example_Monster_testhashs64_fnv1a+0x48>
    1b34:	movw	r3, #0
    1b38:	movt	r3, #0
    1b3c:	movw	r2, #730	; 0x2da
    1b40:	movw	r1, #0
    1b44:	movt	r1, #0
    1b48:	movw	r0, #0
    1b4c:	movt	r0, #0
    1b50:	bl	0 <__assert_fail>
    1b54:	mov	r3, #22
    1b58:	strh	r3, [fp, #-8]
    1b5c:	ldr	r0, [fp, #-16]
    1b60:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1b64:	mov	r3, r0
    1b68:	rsb	r3, r3, #0
    1b6c:	ldr	r2, [fp, #-16]
    1b70:	add	r3, r2, r3
    1b74:	str	r3, [fp, #-12]
    1b78:	ldr	r0, [fp, #-12]
    1b7c:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1b80:	mov	r3, r0
    1b84:	mov	r2, r3
    1b88:	ldrh	r3, [fp, #-8]
    1b8c:	add	r3, r3, #3
    1b90:	lsl	r3, r3, #1
    1b94:	cmp	r2, r3
    1b98:	bcc	1bc0 <MyGame_Example_Monster_testhashs64_fnv1a+0xb4>
    1b9c:	ldrh	r3, [fp, #-8]
    1ba0:	add	r3, r3, #2
    1ba4:	lsl	r3, r3, #1
    1ba8:	ldr	r2, [fp, #-12]
    1bac:	add	r3, r2, r3
    1bb0:	mov	r0, r3
    1bb4:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1bb8:	mov	r3, r0
    1bbc:	strh	r3, [fp, #-6]
    1bc0:	ldrh	r3, [fp, #-6]
    1bc4:	cmp	r3, #0
    1bc8:	beq	1bec <MyGame_Example_Monster_testhashs64_fnv1a+0xe0>
    1bcc:	ldrh	r3, [fp, #-6]
    1bd0:	ldr	r2, [fp, #-16]
    1bd4:	add	r3, r2, r3
    1bd8:	mov	r0, r3
    1bdc:	bl	314 <flatbuffers_int64_read_from_pe>
    1be0:	mov	r2, r0
    1be4:	mov	r3, r1
    1be8:	b	1bf4 <MyGame_Example_Monster_testhashs64_fnv1a+0xe8>
    1bec:	mov	r2, #0
    1bf0:	mov	r3, #0
    1bf4:	mov	r0, r2
    1bf8:	mov	r1, r3
    1bfc:	sub	sp, fp, #4
    1c00:	ldr	fp, [sp]
    1c04:	add	sp, sp, #4
    1c08:	pop	{pc}		; (ldr pc, [sp], #4)

00001c0c <MyGame_Example_Monster_testhashu64_fnv1a>:
    1c0c:	str	fp, [sp, #-8]!
    1c10:	str	lr, [sp, #4]
    1c14:	add	fp, sp, #4
    1c18:	sub	sp, sp, #16
    1c1c:	str	r0, [fp, #-16]
    1c20:	mov	r3, #0
    1c24:	strh	r3, [fp, #-6]
    1c28:	ldr	r3, [fp, #-16]
    1c2c:	cmp	r3, #0
    1c30:	bne	1c54 <MyGame_Example_Monster_testhashu64_fnv1a+0x48>
    1c34:	movw	r3, #0
    1c38:	movt	r3, #0
    1c3c:	movw	r2, #731	; 0x2db
    1c40:	movw	r1, #0
    1c44:	movt	r1, #0
    1c48:	movw	r0, #0
    1c4c:	movt	r0, #0
    1c50:	bl	0 <__assert_fail>
    1c54:	mov	r3, #23
    1c58:	strh	r3, [fp, #-8]
    1c5c:	ldr	r0, [fp, #-16]
    1c60:	bl	4c8 <__flatbuffers_soffset_read_from_pe>
    1c64:	mov	r3, r0
    1c68:	rsb	r3, r3, #0
    1c6c:	ldr	r2, [fp, #-16]
    1c70:	add	r3, r2, r3
    1c74:	str	r3, [fp, #-12]
    1c78:	ldr	r0, [fp, #-12]
    1c7c:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1c80:	mov	r3, r0
    1c84:	mov	r2, r3
    1c88:	ldrh	r3, [fp, #-8]
    1c8c:	add	r3, r3, #3
    1c90:	lsl	r3, r3, #1
    1c94:	cmp	r2, r3
    1c98:	bcc	1cc0 <MyGame_Example_Monster_testhashu64_fnv1a+0xb4>
    1c9c:	ldrh	r3, [fp, #-8]
    1ca0:	add	r3, r3, #2
    1ca4:	lsl	r3, r3, #1
    1ca8:	ldr	r2, [fp, #-12]
    1cac:	add	r3, r2, r3
    1cb0:	mov	r0, r3
    1cb4:	bl	52c <__flatbuffers_voffset_read_from_pe>
    1cb8:	mov	r3, r0
    1cbc:	strh	r3, [fp, #-6]
    1cc0:	ldrh	r3, [fp, #-6]
    1cc4:	cmp	r3, #0
    1cc8:	beq	1cec <MyGame_Example_Monster_testhashu64_fnv1a+0xe0>
    1ccc:	ldrh	r3, [fp, #-6]
    1cd0:	ldr	r2, [fp, #-16]
    1cd4:	add	r3, r2, r3
    1cd8:	mov	r0, r3
    1cdc:	bl	17c <flatbuffers_uint64_read_from_pe>
    1ce0:	mov	r2, r0
    1ce4:	mov	r3, r1
    1ce8:	b	1cf4 <MyGame_Example_Monster_testhashu64_fnv1a+0xe8>
    1cec:	mov	r2, #0
    1cf0:	mov	r3, #0
    1cf4:	mov	r0, r2
    1cf8:	mov	r1, r3
    1cfc:	sub	sp, fp, #4
    1d00:	ldr	fp, [sp]
    1d04:	add	sp, sp, #4
    1d08:	pop	{pc}		; (ldr pc, [sp], #4)

00001d0c <MyGame_Example_Foo_union_verifier>:
    1d0c:	str	fp, [sp, #-8]!
    1d10:	str	lr, [sp, #4]
    1d14:	add	fp, sp, #4
    1d18:	sub	sp, sp, #8
    1d1c:	str	r0, [fp, #-8]
    1d20:	ldr	r3, [fp, #-8]
    1d24:	ldrb	r3, [r3, #12]
    1d28:	cmp	r3, #1
    1d2c:	bne	1d48 <MyGame_Example_Foo_union_verifier+0x3c>
    1d30:	movw	r1, #0
    1d34:	movt	r1, #0
    1d38:	ldr	r0, [fp, #-8]
    1d3c:	bl	0 <flatcc_verify_union_table>
    1d40:	mov	r3, r0
    1d44:	b	1d4c <MyGame_Example_Foo_union_verifier+0x40>
    1d48:	mov	r3, #0
    1d4c:	mov	r0, r3
    1d50:	sub	sp, fp, #4
    1d54:	ldr	fp, [sp]
    1d58:	add	sp, sp, #4
    1d5c:	pop	{pc}		; (ldr pc, [sp], #4)

00001d60 <MyGame_Example_Any_union_verifier>:
    1d60:	str	fp, [sp, #-8]!
    1d64:	str	lr, [sp, #4]
    1d68:	add	fp, sp, #4
    1d6c:	sub	sp, sp, #8
    1d70:	str	r0, [fp, #-8]
    1d74:	ldr	r3, [fp, #-8]
    1d78:	ldrb	r3, [r3, #12]
    1d7c:	sub	r3, r3, #1
    1d80:	cmp	r3, #3
    1d84:	ldrls	pc, [pc, r3, lsl #2]
    1d88:	b	1dfc <MyGame_Example_Any_union_verifier+0x9c>
    1d8c:	.word	0x00001d9c
    1d90:	.word	0x00001db4
    1d94:	.word	0x00001dcc
    1d98:	.word	0x00001de4
    1d9c:	movw	r1, #0
    1da0:	movt	r1, #0
    1da4:	ldr	r0, [fp, #-8]
    1da8:	bl	0 <flatcc_verify_union_table>
    1dac:	mov	r3, r0
    1db0:	b	1e00 <MyGame_Example_Any_union_verifier+0xa0>
    1db4:	movw	r1, #0
    1db8:	movt	r1, #0
    1dbc:	ldr	r0, [fp, #-8]
    1dc0:	bl	0 <flatcc_verify_union_table>
    1dc4:	mov	r3, r0
    1dc8:	b	1e00 <MyGame_Example_Any_union_verifier+0xa0>
    1dcc:	movw	r1, #0
    1dd0:	movt	r1, #0
    1dd4:	ldr	r0, [fp, #-8]
    1dd8:	bl	0 <flatcc_verify_union_table>
    1ddc:	mov	r3, r0
    1de0:	b	1e00 <MyGame_Example_Any_union_verifier+0xa0>
    1de4:	movw	r1, #0
    1de8:	movt	r1, #0
    1dec:	ldr	r0, [fp, #-8]
    1df0:	bl	0 <flatcc_verify_union_table>
    1df4:	mov	r3, r0
    1df8:	b	1e00 <MyGame_Example_Any_union_verifier+0xa0>
    1dfc:	mov	r3, #0
    1e00:	mov	r0, r3
    1e04:	sub	sp, fp, #4
    1e08:	ldr	fp, [sp]
    1e0c:	add	sp, sp, #4
    1e10:	pop	{pc}		; (ldr pc, [sp], #4)

00001e14 <Fantasy_Character_union_verifier>:
    1e14:	str	fp, [sp, #-8]!
    1e18:	str	lr, [sp, #4]
    1e1c:	add	fp, sp, #4
    1e20:	sub	sp, sp, #8
    1e24:	str	r0, [fp, #-8]
    1e28:	ldr	r3, [fp, #-8]
    1e2c:	ldrb	r3, [r3, #12]
    1e30:	cmp	r3, #9
    1e34:	beq	1ea0 <Fantasy_Character_union_verifier+0x8c>
    1e38:	cmp	r3, #9
    1e3c:	bgt	1e54 <Fantasy_Character_union_verifier+0x40>
    1e40:	cmp	r3, #2
    1e44:	beq	1e70 <Fantasy_Character_union_verifier+0x5c>
    1e48:	cmp	r3, #8
    1e4c:	beq	1e88 <Fantasy_Character_union_verifier+0x74>
    1e50:	b	1ef0 <Fantasy_Character_union_verifier+0xdc>
    1e54:	cmp	r3, #11
    1e58:	beq	1ed0 <Fantasy_Character_union_verifier+0xbc>
    1e5c:	cmp	r3, #11
    1e60:	blt	1eb8 <Fantasy_Character_union_verifier+0xa4>
    1e64:	cmp	r3, #255	; 0xff
    1e68:	beq	1ee0 <Fantasy_Character_union_verifier+0xcc>
    1e6c:	b	1ef0 <Fantasy_Character_union_verifier+0xdc>
    1e70:	movw	r1, #0
    1e74:	movt	r1, #0
    1e78:	ldr	r0, [fp, #-8]
    1e7c:	bl	0 <flatcc_verify_union_table>
    1e80:	mov	r3, r0
    1e84:	b	1ef4 <Fantasy_Character_union_verifier+0xe0>
    1e88:	mov	r2, #2
    1e8c:	mov	r1, #2
    1e90:	ldr	r0, [fp, #-8]
    1e94:	bl	0 <flatcc_verify_union_struct>
    1e98:	mov	r3, r0
    1e9c:	b	1ef4 <Fantasy_Character_union_verifier+0xe0>
    1ea0:	mov	r2, #4
    1ea4:	mov	r1, #4
    1ea8:	ldr	r0, [fp, #-8]
    1eac:	bl	0 <flatcc_verify_union_struct>
    1eb0:	mov	r3, r0
    1eb4:	b	1ef4 <Fantasy_Character_union_verifier+0xe0>
    1eb8:	mov	r2, #4
    1ebc:	mov	r1, #4
    1ec0:	ldr	r0, [fp, #-8]
    1ec4:	bl	0 <flatcc_verify_union_struct>
    1ec8:	mov	r3, r0
    1ecc:	b	1ef4 <Fantasy_Character_union_verifier+0xe0>
    1ed0:	ldr	r0, [fp, #-8]
    1ed4:	bl	0 <flatcc_verify_union_string>
    1ed8:	mov	r3, r0
    1edc:	b	1ef4 <Fantasy_Character_union_verifier+0xe0>
    1ee0:	ldr	r0, [fp, #-8]
    1ee4:	bl	0 <flatcc_verify_union_string>
    1ee8:	mov	r3, r0
    1eec:	b	1ef4 <Fantasy_Character_union_verifier+0xe0>
    1ef0:	mov	r3, #0
    1ef4:	mov	r0, r3
    1ef8:	sub	sp, fp, #4
    1efc:	ldr	fp, [sp]
    1f00:	add	sp, sp, #4
    1f04:	pop	{pc}		; (ldr pc, [sp], #4)

00001f08 <MyGame_InParentNamespace_verify_table>:
    1f08:	push	{fp}		; (str fp, [sp, #-4]!)
    1f0c:	add	fp, sp, #0
    1f10:	sub	sp, sp, #12
    1f14:	str	r0, [fp, #-8]
    1f18:	mov	r3, #0
    1f1c:	mov	r0, r3
    1f20:	add	sp, fp, #0
    1f24:	pop	{fp}		; (ldr fp, [sp], #4)
    1f28:	bx	lr

00001f2c <MyGame_Example2_Monster_verify_table>:
    1f2c:	push	{fp}		; (str fp, [sp, #-4]!)
    1f30:	add	fp, sp, #0
    1f34:	sub	sp, sp, #12
    1f38:	str	r0, [fp, #-8]
    1f3c:	mov	r3, #0
    1f40:	mov	r0, r3
    1f44:	add	sp, fp, #0
    1f48:	pop	{fp}		; (ldr fp, [sp], #4)
    1f4c:	bx	lr

00001f50 <MyGame_Example_emptytable_verify_table>:
    1f50:	push	{fp}		; (str fp, [sp, #-4]!)
    1f54:	add	fp, sp, #0
    1f58:	sub	sp, sp, #12
    1f5c:	str	r0, [fp, #-8]
    1f60:	mov	r3, #0
    1f64:	mov	r0, r3
    1f68:	add	sp, fp, #0
    1f6c:	pop	{fp}		; (ldr fp, [sp], #4)
    1f70:	bx	lr

00001f74 <MyGame_Example_with_emptystruct_verify_table>:
    1f74:	str	fp, [sp, #-8]!
    1f78:	str	lr, [sp, #4]
    1f7c:	add	fp, sp, #4
    1f80:	sub	sp, sp, #16
    1f84:	str	r0, [fp, #-16]
    1f88:	mov	r3, #1
    1f8c:	mov	r2, #0
    1f90:	mov	r1, #0
    1f94:	ldr	r0, [fp, #-16]
    1f98:	bl	0 <flatcc_verify_field>
    1f9c:	str	r0, [fp, #-8]
    1fa0:	ldr	r3, [fp, #-8]
    1fa4:	cmp	r3, #0
    1fa8:	beq	1fb4 <MyGame_Example_with_emptystruct_verify_table+0x40>
    1fac:	ldr	r3, [fp, #-8]
    1fb0:	b	1fb8 <MyGame_Example_with_emptystruct_verify_table+0x44>
    1fb4:	mov	r3, #0
    1fb8:	mov	r0, r3
    1fbc:	sub	sp, fp, #4
    1fc0:	ldr	fp, [sp]
    1fc4:	add	sp, sp, #4
    1fc8:	pop	{pc}		; (ldr pc, [sp], #4)

00001fcc <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
    1fcc:	str	fp, [sp, #-8]!
    1fd0:	str	lr, [sp, #4]
    1fd4:	add	fp, sp, #4
    1fd8:	sub	sp, sp, #16
    1fdc:	str	r0, [fp, #-16]
    1fe0:	mov	r3, #1
    1fe4:	mov	r2, #1
    1fe8:	mov	r1, #0
    1fec:	ldr	r0, [fp, #-16]
    1ff0:	bl	0 <flatcc_verify_field>
    1ff4:	str	r0, [fp, #-8]
    1ff8:	ldr	r3, [fp, #-8]
    1ffc:	cmp	r3, #0
    2000:	beq	200c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x40>
    2004:	ldr	r3, [fp, #-8]
    2008:	b	2094 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc8>
    200c:	mov	r3, #1
    2010:	mov	r2, #1
    2014:	mov	r1, #1
    2018:	ldr	r0, [fp, #-16]
    201c:	bl	0 <flatcc_verify_field>
    2020:	str	r0, [fp, #-8]
    2024:	ldr	r3, [fp, #-8]
    2028:	cmp	r3, #0
    202c:	beq	2038 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x6c>
    2030:	ldr	r3, [fp, #-8]
    2034:	b	2094 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc8>
    2038:	mov	r3, #1
    203c:	mov	r2, #1
    2040:	mov	r1, #2
    2044:	ldr	r0, [fp, #-16]
    2048:	bl	0 <flatcc_verify_field>
    204c:	str	r0, [fp, #-8]
    2050:	ldr	r3, [fp, #-8]
    2054:	cmp	r3, #0
    2058:	beq	2064 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x98>
    205c:	ldr	r3, [fp, #-8]
    2060:	b	2094 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc8>
    2064:	mov	r3, #1
    2068:	mov	r2, #1
    206c:	mov	r1, #3
    2070:	ldr	r0, [fp, #-16]
    2074:	bl	0 <flatcc_verify_field>
    2078:	str	r0, [fp, #-8]
    207c:	ldr	r3, [fp, #-8]
    2080:	cmp	r3, #0
    2084:	beq	2090 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    2088:	ldr	r3, [fp, #-8]
    208c:	b	2094 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc8>
    2090:	mov	r3, #0
    2094:	mov	r0, r3
    2098:	sub	sp, fp, #4
    209c:	ldr	fp, [sp]
    20a0:	add	sp, sp, #4
    20a4:	pop	{pc}		; (ldr pc, [sp], #4)

000020a8 <MyGame_Example_TestInclude_verify_table>:
    20a8:	str	fp, [sp, #-8]!
    20ac:	str	lr, [sp, #4]
    20b0:	add	fp, sp, #4
    20b4:	sub	sp, sp, #16
    20b8:	str	r0, [fp, #-16]
    20bc:	mov	r3, #1
    20c0:	mov	r2, #0
    20c4:	mov	r1, #0
    20c8:	ldr	r0, [fp, #-16]
    20cc:	bl	0 <flatcc_verify_field>
    20d0:	str	r0, [fp, #-8]
    20d4:	ldr	r3, [fp, #-8]
    20d8:	cmp	r3, #0
    20dc:	beq	20e8 <MyGame_Example_TestInclude_verify_table+0x40>
    20e0:	ldr	r3, [fp, #-8]
    20e4:	b	21c8 <MyGame_Example_TestInclude_verify_table+0x120>
    20e8:	mov	r3, #8
    20ec:	mov	r2, #8
    20f0:	mov	r1, #1
    20f4:	ldr	r0, [fp, #-16]
    20f8:	bl	0 <flatcc_verify_field>
    20fc:	str	r0, [fp, #-8]
    2100:	ldr	r3, [fp, #-8]
    2104:	cmp	r3, #0
    2108:	beq	2114 <MyGame_Example_TestInclude_verify_table+0x6c>
    210c:	ldr	r3, [fp, #-8]
    2110:	b	21c8 <MyGame_Example_TestInclude_verify_table+0x120>
    2114:	mov	r3, #8
    2118:	mov	r2, #8
    211c:	mov	r1, #2
    2120:	ldr	r0, [fp, #-16]
    2124:	bl	0 <flatcc_verify_field>
    2128:	str	r0, [fp, #-8]
    212c:	ldr	r3, [fp, #-8]
    2130:	cmp	r3, #0
    2134:	beq	2140 <MyGame_Example_TestInclude_verify_table+0x98>
    2138:	ldr	r3, [fp, #-8]
    213c:	b	21c8 <MyGame_Example_TestInclude_verify_table+0x120>
    2140:	mov	r3, #4
    2144:	mov	r2, #4
    2148:	mov	r1, #3
    214c:	ldr	r0, [fp, #-16]
    2150:	bl	0 <flatcc_verify_field>
    2154:	str	r0, [fp, #-8]
    2158:	ldr	r3, [fp, #-8]
    215c:	cmp	r3, #0
    2160:	beq	216c <MyGame_Example_TestInclude_verify_table+0xc4>
    2164:	ldr	r3, [fp, #-8]
    2168:	b	21c8 <MyGame_Example_TestInclude_verify_table+0x120>
    216c:	mov	r3, #8
    2170:	mov	r2, #8
    2174:	mov	r1, #4
    2178:	ldr	r0, [fp, #-16]
    217c:	bl	0 <flatcc_verify_field>
    2180:	str	r0, [fp, #-8]
    2184:	ldr	r3, [fp, #-8]
    2188:	cmp	r3, #0
    218c:	beq	2198 <MyGame_Example_TestInclude_verify_table+0xf0>
    2190:	ldr	r3, [fp, #-8]
    2194:	b	21c8 <MyGame_Example_TestInclude_verify_table+0x120>
    2198:	mov	r3, #8
    219c:	mov	r2, #8
    21a0:	mov	r1, #5
    21a4:	ldr	r0, [fp, #-16]
    21a8:	bl	0 <flatcc_verify_field>
    21ac:	str	r0, [fp, #-8]
    21b0:	ldr	r3, [fp, #-8]
    21b4:	cmp	r3, #0
    21b8:	beq	21c4 <MyGame_Example_TestInclude_verify_table+0x11c>
    21bc:	ldr	r3, [fp, #-8]
    21c0:	b	21c8 <MyGame_Example_TestInclude_verify_table+0x120>
    21c4:	mov	r3, #0
    21c8:	mov	r0, r3
    21cc:	sub	sp, fp, #4
    21d0:	ldr	fp, [sp]
    21d4:	add	sp, sp, #4
    21d8:	pop	{pc}		; (ldr pc, [sp], #4)

000021dc <MyGame_Example_Stat_verify_table>:
    21dc:	str	fp, [sp, #-8]!
    21e0:	str	lr, [sp, #4]
    21e4:	add	fp, sp, #4
    21e8:	sub	sp, sp, #16
    21ec:	str	r0, [fp, #-16]
    21f0:	mov	r2, #0
    21f4:	mov	r1, #0
    21f8:	ldr	r0, [fp, #-16]
    21fc:	bl	0 <flatcc_verify_string_field>
    2200:	str	r0, [fp, #-8]
    2204:	ldr	r3, [fp, #-8]
    2208:	cmp	r3, #0
    220c:	beq	2218 <MyGame_Example_Stat_verify_table+0x3c>
    2210:	ldr	r3, [fp, #-8]
    2214:	b	2274 <MyGame_Example_Stat_verify_table+0x98>
    2218:	mov	r3, #8
    221c:	mov	r2, #8
    2220:	mov	r1, #1
    2224:	ldr	r0, [fp, #-16]
    2228:	bl	0 <flatcc_verify_field>
    222c:	str	r0, [fp, #-8]
    2230:	ldr	r3, [fp, #-8]
    2234:	cmp	r3, #0
    2238:	beq	2244 <MyGame_Example_Stat_verify_table+0x68>
    223c:	ldr	r3, [fp, #-8]
    2240:	b	2274 <MyGame_Example_Stat_verify_table+0x98>
    2244:	mov	r3, #2
    2248:	mov	r2, #2
    224c:	mov	r1, #2
    2250:	ldr	r0, [fp, #-16]
    2254:	bl	0 <flatcc_verify_field>
    2258:	str	r0, [fp, #-8]
    225c:	ldr	r3, [fp, #-8]
    2260:	cmp	r3, #0
    2264:	beq	2270 <MyGame_Example_Stat_verify_table+0x94>
    2268:	ldr	r3, [fp, #-8]
    226c:	b	2274 <MyGame_Example_Stat_verify_table+0x98>
    2270:	mov	r3, #0
    2274:	mov	r0, r3
    2278:	sub	sp, fp, #4
    227c:	ldr	fp, [sp]
    2280:	add	sp, sp, #4
    2284:	pop	{pc}		; (ldr pc, [sp], #4)

00002288 <MyGame_Example_Alt_verify_table>:
    2288:	str	fp, [sp, #-8]!
    228c:	str	lr, [sp, #4]
    2290:	add	fp, sp, #4
    2294:	sub	sp, sp, #16
    2298:	str	r0, [fp, #-16]
    229c:	movw	r3, #0
    22a0:	movt	r3, #0
    22a4:	mov	r2, #0
    22a8:	mov	r1, #0
    22ac:	ldr	r0, [fp, #-16]
    22b0:	bl	0 <flatcc_verify_table_field>
    22b4:	str	r0, [fp, #-8]
    22b8:	ldr	r3, [fp, #-8]
    22bc:	cmp	r3, #0
    22c0:	beq	22cc <MyGame_Example_Alt_verify_table+0x44>
    22c4:	ldr	r3, [fp, #-8]
    22c8:	b	2330 <MyGame_Example_Alt_verify_table+0xa8>
    22cc:	movw	r3, #0
    22d0:	movt	r3, #0
    22d4:	mov	r2, #0
    22d8:	mov	r1, #1
    22dc:	ldr	r0, [fp, #-16]
    22e0:	bl	0 <flatcc_verify_table_field>
    22e4:	str	r0, [fp, #-8]
    22e8:	ldr	r3, [fp, #-8]
    22ec:	cmp	r3, #0
    22f0:	beq	22fc <MyGame_Example_Alt_verify_table+0x74>
    22f4:	ldr	r3, [fp, #-8]
    22f8:	b	2330 <MyGame_Example_Alt_verify_table+0xa8>
    22fc:	movw	r3, #0
    2300:	movt	r3, #0
    2304:	mov	r2, #0
    2308:	mov	r1, #3
    230c:	ldr	r0, [fp, #-16]
    2310:	bl	0 <flatcc_verify_union_vector_field>
    2314:	str	r0, [fp, #-8]
    2318:	ldr	r3, [fp, #-8]
    231c:	cmp	r3, #0
    2320:	beq	232c <MyGame_Example_Alt_verify_table+0xa4>
    2324:	ldr	r3, [fp, #-8]
    2328:	b	2330 <MyGame_Example_Alt_verify_table+0xa8>
    232c:	mov	r3, #0
    2330:	mov	r0, r3
    2334:	sub	sp, fp, #4
    2338:	ldr	fp, [sp]
    233c:	add	sp, sp, #4
    2340:	pop	{pc}		; (ldr pc, [sp], #4)

00002344 <MyGame_Example_TestJSONPrefix_verify_table>:
    2344:	str	fp, [sp, #-8]!
    2348:	str	lr, [sp, #4]
    234c:	add	fp, sp, #4
    2350:	sub	sp, sp, #16
    2354:	str	r0, [fp, #-16]
    2358:	movw	r3, #0
    235c:	movt	r3, #0
    2360:	mov	r2, #0
    2364:	mov	r1, #0
    2368:	ldr	r0, [fp, #-16]
    236c:	bl	0 <flatcc_verify_table_field>
    2370:	str	r0, [fp, #-8]
    2374:	ldr	r3, [fp, #-8]
    2378:	cmp	r3, #0
    237c:	beq	2388 <MyGame_Example_TestJSONPrefix_verify_table+0x44>
    2380:	ldr	r3, [fp, #-8]
    2384:	b	23ec <MyGame_Example_TestJSONPrefix_verify_table+0xa8>
    2388:	movw	r3, #0
    238c:	movt	r3, #0
    2390:	mov	r2, #0
    2394:	mov	r1, #1
    2398:	ldr	r0, [fp, #-16]
    239c:	bl	0 <flatcc_verify_table_field>
    23a0:	str	r0, [fp, #-8]
    23a4:	ldr	r3, [fp, #-8]
    23a8:	cmp	r3, #0
    23ac:	beq	23b8 <MyGame_Example_TestJSONPrefix_verify_table+0x74>
    23b0:	ldr	r3, [fp, #-8]
    23b4:	b	23ec <MyGame_Example_TestJSONPrefix_verify_table+0xa8>
    23b8:	movw	r3, #0
    23bc:	movt	r3, #0
    23c0:	mov	r2, #0
    23c4:	mov	r1, #2
    23c8:	ldr	r0, [fp, #-16]
    23cc:	bl	0 <flatcc_verify_table_field>
    23d0:	str	r0, [fp, #-8]
    23d4:	ldr	r3, [fp, #-8]
    23d8:	cmp	r3, #0
    23dc:	beq	23e8 <MyGame_Example_TestJSONPrefix_verify_table+0xa4>
    23e0:	ldr	r3, [fp, #-8]
    23e4:	b	23ec <MyGame_Example_TestJSONPrefix_verify_table+0xa8>
    23e8:	mov	r3, #0
    23ec:	mov	r0, r3
    23f0:	sub	sp, fp, #4
    23f4:	ldr	fp, [sp]
    23f8:	add	sp, sp, #4
    23fc:	pop	{pc}		; (ldr pc, [sp], #4)

00002400 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    2400:	str	fp, [sp, #-8]!
    2404:	str	lr, [sp, #4]
    2408:	add	fp, sp, #4
    240c:	sub	sp, sp, #16
    2410:	str	r0, [fp, #-16]
    2414:	mov	r2, #0
    2418:	mov	r1, #0
    241c:	ldr	r0, [fp, #-16]
    2420:	bl	0 <flatcc_verify_string_field>
    2424:	str	r0, [fp, #-8]
    2428:	ldr	r3, [fp, #-8]
    242c:	cmp	r3, #0
    2430:	beq	243c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x3c>
    2434:	ldr	r3, [fp, #-8]
    2438:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    243c:	mov	r3, #4
    2440:	mov	r2, #4
    2444:	mov	r1, #1
    2448:	ldr	r0, [fp, #-16]
    244c:	bl	0 <flatcc_verify_field>
    2450:	str	r0, [fp, #-8]
    2454:	ldr	r3, [fp, #-8]
    2458:	cmp	r3, #0
    245c:	beq	2468 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x68>
    2460:	ldr	r3, [fp, #-8]
    2464:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    2468:	mov	r2, #0
    246c:	mov	r1, #2
    2470:	ldr	r0, [fp, #-16]
    2474:	bl	0 <flatcc_verify_string_field>
    2478:	str	r0, [fp, #-8]
    247c:	ldr	r3, [fp, #-8]
    2480:	cmp	r3, #0
    2484:	beq	2490 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x90>
    2488:	ldr	r3, [fp, #-8]
    248c:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    2490:	mov	r3, #8
    2494:	mov	r2, #8
    2498:	mov	r1, #3
    249c:	ldr	r0, [fp, #-16]
    24a0:	bl	0 <flatcc_verify_field>
    24a4:	str	r0, [fp, #-8]
    24a8:	ldr	r3, [fp, #-8]
    24ac:	cmp	r3, #0
    24b0:	beq	24bc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xbc>
    24b4:	ldr	r3, [fp, #-8]
    24b8:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    24bc:	mov	r2, #0
    24c0:	mov	r1, #4
    24c4:	ldr	r0, [fp, #-16]
    24c8:	bl	0 <flatcc_verify_string_field>
    24cc:	str	r0, [fp, #-8]
    24d0:	ldr	r3, [fp, #-8]
    24d4:	cmp	r3, #0
    24d8:	beq	24e4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xe4>
    24dc:	ldr	r3, [fp, #-8]
    24e0:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    24e4:	mov	r3, #8
    24e8:	mov	r2, #8
    24ec:	mov	r1, #5
    24f0:	ldr	r0, [fp, #-16]
    24f4:	bl	0 <flatcc_verify_field>
    24f8:	str	r0, [fp, #-8]
    24fc:	ldr	r3, [fp, #-8]
    2500:	cmp	r3, #0
    2504:	beq	2510 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x110>
    2508:	ldr	r3, [fp, #-8]
    250c:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    2510:	mov	r3, #4
    2514:	mov	r2, #4
    2518:	mov	r1, #6
    251c:	ldr	r0, [fp, #-16]
    2520:	bl	0 <flatcc_verify_field>
    2524:	str	r0, [fp, #-8]
    2528:	ldr	r3, [fp, #-8]
    252c:	cmp	r3, #0
    2530:	beq	253c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x13c>
    2534:	ldr	r3, [fp, #-8]
    2538:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    253c:	mov	r3, #8
    2540:	mov	r2, #8
    2544:	mov	r1, #7
    2548:	ldr	r0, [fp, #-16]
    254c:	bl	0 <flatcc_verify_field>
    2550:	str	r0, [fp, #-8]
    2554:	ldr	r3, [fp, #-8]
    2558:	cmp	r3, #0
    255c:	beq	2568 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x168>
    2560:	ldr	r3, [fp, #-8]
    2564:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    2568:	mov	r3, #4
    256c:	mov	r2, #4
    2570:	mov	r1, #8
    2574:	ldr	r0, [fp, #-16]
    2578:	bl	0 <flatcc_verify_field>
    257c:	str	r0, [fp, #-8]
    2580:	ldr	r3, [fp, #-8]
    2584:	cmp	r3, #0
    2588:	beq	2594 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    258c:	ldr	r3, [fp, #-8]
    2590:	b	2598 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    2594:	mov	r3, #0
    2598:	mov	r0, r3
    259c:	sub	sp, fp, #4
    25a0:	ldr	fp, [sp]
    25a4:	add	sp, sp, #4
    25a8:	pop	{pc}		; (ldr pc, [sp], #4)

000025ac <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    25ac:	str	fp, [sp, #-8]!
    25b0:	str	lr, [sp, #4]
    25b4:	add	fp, sp, #4
    25b8:	sub	sp, sp, #16
    25bc:	str	r0, [fp, #-16]
    25c0:	mov	r3, #8
    25c4:	mov	r2, #8
    25c8:	mov	r1, #0
    25cc:	ldr	r0, [fp, #-16]
    25d0:	bl	0 <flatcc_verify_field>
    25d4:	str	r0, [fp, #-8]
    25d8:	ldr	r3, [fp, #-8]
    25dc:	cmp	r3, #0
    25e0:	beq	25ec <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x40>
    25e4:	ldr	r3, [fp, #-8]
    25e8:	b	261c <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x70>
    25ec:	mov	r3, #4
    25f0:	mov	r2, #4
    25f4:	mov	r1, #1
    25f8:	ldr	r0, [fp, #-16]
    25fc:	bl	0 <flatcc_verify_field>
    2600:	str	r0, [fp, #-8]
    2604:	ldr	r3, [fp, #-8]
    2608:	cmp	r3, #0
    260c:	beq	2618 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x6c>
    2610:	ldr	r3, [fp, #-8]
    2614:	b	261c <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x70>
    2618:	mov	r3, #0
    261c:	mov	r0, r3
    2620:	sub	sp, fp, #4
    2624:	ldr	fp, [sp]
    2628:	add	sp, sp, #4
    262c:	pop	{pc}		; (ldr pc, [sp], #4)

00002630 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    2630:	str	fp, [sp, #-8]!
    2634:	str	lr, [sp, #4]
    2638:	add	fp, sp, #4
    263c:	sub	sp, sp, #16
    2640:	str	r0, [fp, #-16]
    2644:	mov	r3, #8
    2648:	mov	r2, #8
    264c:	mov	r1, #0
    2650:	ldr	r0, [fp, #-16]
    2654:	bl	0 <flatcc_verify_field>
    2658:	str	r0, [fp, #-8]
    265c:	ldr	r3, [fp, #-8]
    2660:	cmp	r3, #0
    2664:	beq	2670 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x40>
    2668:	ldr	r3, [fp, #-8]
    266c:	b	26a0 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x70>
    2670:	mov	r3, #4
    2674:	mov	r2, #4
    2678:	mov	r1, #1
    267c:	ldr	r0, [fp, #-16]
    2680:	bl	0 <flatcc_verify_field>
    2684:	str	r0, [fp, #-8]
    2688:	ldr	r3, [fp, #-8]
    268c:	cmp	r3, #0
    2690:	beq	269c <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x6c>
    2694:	ldr	r3, [fp, #-8]
    2698:	b	26a0 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x70>
    269c:	mov	r3, #0
    26a0:	mov	r0, r3
    26a4:	sub	sp, fp, #4
    26a8:	ldr	fp, [sp]
    26ac:	add	sp, sp, #4
    26b0:	pop	{pc}		; (ldr pc, [sp], #4)

000026b4 <MyGame_Example_TestBase64_verify_table>:
    26b4:	str	fp, [sp, #-8]!
    26b8:	str	lr, [sp, #4]
    26bc:	add	fp, sp, #4
    26c0:	sub	sp, sp, #24
    26c4:	str	r0, [fp, #-16]
    26c8:	mvn	r3, #0
    26cc:	str	r3, [sp, #4]
    26d0:	mov	r3, #1
    26d4:	str	r3, [sp]
    26d8:	mov	r3, #1
    26dc:	mov	r2, #0
    26e0:	mov	r1, #0
    26e4:	ldr	r0, [fp, #-16]
    26e8:	bl	0 <flatcc_verify_vector_field>
    26ec:	str	r0, [fp, #-8]
    26f0:	ldr	r3, [fp, #-8]
    26f4:	cmp	r3, #0
    26f8:	beq	2704 <MyGame_Example_TestBase64_verify_table+0x50>
    26fc:	ldr	r3, [fp, #-8]
    2700:	b	2784 <MyGame_Example_TestBase64_verify_table+0xd0>
    2704:	mvn	r3, #0
    2708:	str	r3, [sp, #4]
    270c:	mov	r3, #1
    2710:	str	r3, [sp]
    2714:	mov	r3, #1
    2718:	mov	r2, #0
    271c:	mov	r1, #1
    2720:	ldr	r0, [fp, #-16]
    2724:	bl	0 <flatcc_verify_vector_field>
    2728:	str	r0, [fp, #-8]
    272c:	ldr	r3, [fp, #-8]
    2730:	cmp	r3, #0
    2734:	beq	2740 <MyGame_Example_TestBase64_verify_table+0x8c>
    2738:	ldr	r3, [fp, #-8]
    273c:	b	2784 <MyGame_Example_TestBase64_verify_table+0xd0>
    2740:	movw	r3, #0
    2744:	movt	r3, #0
    2748:	str	r3, [sp, #4]
    274c:	mov	r3, #1
    2750:	str	r3, [sp]
    2754:	mov	r3, #0
    2758:	mov	r2, #0
    275c:	mov	r1, #2
    2760:	ldr	r0, [fp, #-16]
    2764:	bl	0 <flatcc_verify_table_as_nested_root>
    2768:	str	r0, [fp, #-8]
    276c:	ldr	r3, [fp, #-8]
    2770:	cmp	r3, #0
    2774:	beq	2780 <MyGame_Example_TestBase64_verify_table+0xcc>
    2778:	ldr	r3, [fp, #-8]
    277c:	b	2784 <MyGame_Example_TestBase64_verify_table+0xd0>
    2780:	mov	r3, #0
    2784:	mov	r0, r3
    2788:	sub	sp, fp, #4
    278c:	ldr	fp, [sp]
    2790:	add	sp, sp, #4
    2794:	pop	{pc}		; (ldr pc, [sp], #4)

00002798 <MyGame_Example_Monster_verify_table>:
    2798:	str	fp, [sp, #-8]!
    279c:	str	lr, [sp, #4]
    27a0:	add	fp, sp, #4
    27a4:	sub	sp, sp, #24
    27a8:	str	r0, [fp, #-16]
    27ac:	mov	r3, #16
    27b0:	mov	r2, #32
    27b4:	mov	r1, #0
    27b8:	ldr	r0, [fp, #-16]
    27bc:	bl	0 <flatcc_verify_field>
    27c0:	str	r0, [fp, #-8]
    27c4:	ldr	r3, [fp, #-8]
    27c8:	cmp	r3, #0
    27cc:	beq	27d8 <MyGame_Example_Monster_verify_table+0x40>
    27d0:	ldr	r3, [fp, #-8]
    27d4:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    27d8:	mov	r3, #2
    27dc:	mov	r2, #2
    27e0:	mov	r1, #2
    27e4:	ldr	r0, [fp, #-16]
    27e8:	bl	0 <flatcc_verify_field>
    27ec:	str	r0, [fp, #-8]
    27f0:	ldr	r3, [fp, #-8]
    27f4:	cmp	r3, #0
    27f8:	beq	2804 <MyGame_Example_Monster_verify_table+0x6c>
    27fc:	ldr	r3, [fp, #-8]
    2800:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2804:	mov	r3, #2
    2808:	mov	r2, #2
    280c:	mov	r1, #1
    2810:	ldr	r0, [fp, #-16]
    2814:	bl	0 <flatcc_verify_field>
    2818:	str	r0, [fp, #-8]
    281c:	ldr	r3, [fp, #-8]
    2820:	cmp	r3, #0
    2824:	beq	2830 <MyGame_Example_Monster_verify_table+0x98>
    2828:	ldr	r3, [fp, #-8]
    282c:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2830:	mov	r2, #1
    2834:	mov	r1, #3
    2838:	ldr	r0, [fp, #-16]
    283c:	bl	0 <flatcc_verify_string_field>
    2840:	str	r0, [fp, #-8]
    2844:	ldr	r3, [fp, #-8]
    2848:	cmp	r3, #0
    284c:	beq	2858 <MyGame_Example_Monster_verify_table+0xc0>
    2850:	ldr	r3, [fp, #-8]
    2854:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2858:	mov	r3, #1
    285c:	mov	r2, #1
    2860:	mov	r1, #6
    2864:	ldr	r0, [fp, #-16]
    2868:	bl	0 <flatcc_verify_field>
    286c:	str	r0, [fp, #-8]
    2870:	ldr	r3, [fp, #-8]
    2874:	cmp	r3, #0
    2878:	beq	2884 <MyGame_Example_Monster_verify_table+0xec>
    287c:	ldr	r3, [fp, #-8]
    2880:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2884:	mvn	r3, #0
    2888:	str	r3, [sp, #4]
    288c:	mov	r3, #1
    2890:	str	r3, [sp]
    2894:	mov	r3, #1
    2898:	mov	r2, #0
    289c:	mov	r1, #5
    28a0:	ldr	r0, [fp, #-16]
    28a4:	bl	0 <flatcc_verify_vector_field>
    28a8:	str	r0, [fp, #-8]
    28ac:	ldr	r3, [fp, #-8]
    28b0:	cmp	r3, #0
    28b4:	beq	28c0 <MyGame_Example_Monster_verify_table+0x128>
    28b8:	ldr	r3, [fp, #-8]
    28bc:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    28c0:	movw	r3, #0
    28c4:	movt	r3, #0
    28c8:	mov	r2, #0
    28cc:	mov	r1, #11
    28d0:	ldr	r0, [fp, #-16]
    28d4:	bl	0 <flatcc_verify_table_vector_field>
    28d8:	str	r0, [fp, #-8]
    28dc:	ldr	r3, [fp, #-8]
    28e0:	cmp	r3, #0
    28e4:	beq	28f0 <MyGame_Example_Monster_verify_table+0x158>
    28e8:	ldr	r3, [fp, #-8]
    28ec:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    28f0:	mov	r2, #0
    28f4:	mov	r1, #10
    28f8:	ldr	r0, [fp, #-16]
    28fc:	bl	0 <flatcc_verify_string_vector_field>
    2900:	str	r0, [fp, #-8]
    2904:	ldr	r3, [fp, #-8]
    2908:	cmp	r3, #0
    290c:	beq	2918 <MyGame_Example_Monster_verify_table+0x180>
    2910:	ldr	r3, [fp, #-8]
    2914:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2918:	mov	r2, #0
    291c:	mov	r1, #28
    2920:	ldr	r0, [fp, #-16]
    2924:	bl	0 <flatcc_verify_string_vector_field>
    2928:	str	r0, [fp, #-8]
    292c:	ldr	r3, [fp, #-8]
    2930:	cmp	r3, #0
    2934:	beq	2940 <MyGame_Example_Monster_verify_table+0x1a8>
    2938:	ldr	r3, [fp, #-8]
    293c:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2940:	mvn	r3, #0
    2944:	str	r3, [sp, #4]
    2948:	mov	r3, #1
    294c:	str	r3, [sp]
    2950:	mov	r3, #1
    2954:	mov	r2, #0
    2958:	mov	r1, #24
    295c:	ldr	r0, [fp, #-16]
    2960:	bl	0 <flatcc_verify_vector_field>
    2964:	str	r0, [fp, #-8]
    2968:	ldr	r3, [fp, #-8]
    296c:	cmp	r3, #0
    2970:	beq	297c <MyGame_Example_Monster_verify_table+0x1e4>
    2974:	ldr	r3, [fp, #-8]
    2978:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    297c:	mvn	r3, #-536870912	; 0xe0000000
    2980:	str	r3, [sp, #4]
    2984:	mov	r3, #4
    2988:	str	r3, [sp]
    298c:	mov	r3, #8
    2990:	mov	r2, #0
    2994:	mov	r1, #29
    2998:	ldr	r0, [fp, #-16]
    299c:	bl	0 <flatcc_verify_vector_field>
    29a0:	str	r0, [fp, #-8]
    29a4:	ldr	r3, [fp, #-8]
    29a8:	cmp	r3, #0
    29ac:	beq	29b8 <MyGame_Example_Monster_verify_table+0x220>
    29b0:	ldr	r3, [fp, #-8]
    29b4:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    29b8:	movw	r3, #0
    29bc:	movt	r3, #0
    29c0:	mov	r2, #0
    29c4:	mov	r1, #12
    29c8:	ldr	r0, [fp, #-16]
    29cc:	bl	0 <flatcc_verify_table_field>
    29d0:	str	r0, [fp, #-8]
    29d4:	ldr	r3, [fp, #-8]
    29d8:	cmp	r3, #0
    29dc:	beq	29e8 <MyGame_Example_Monster_verify_table+0x250>
    29e0:	ldr	r3, [fp, #-8]
    29e4:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    29e8:	movw	r3, #0
    29ec:	movt	r3, #0
    29f0:	mov	r2, #0
    29f4:	mov	r1, #8
    29f8:	ldr	r0, [fp, #-16]
    29fc:	bl	0 <flatcc_verify_union_field>
    2a00:	str	r0, [fp, #-8]
    2a04:	ldr	r3, [fp, #-8]
    2a08:	cmp	r3, #0
    2a0c:	beq	2a18 <MyGame_Example_Monster_verify_table+0x280>
    2a10:	ldr	r3, [fp, #-8]
    2a14:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2a18:	mvn	r3, #-1073741824	; 0xc0000000
    2a1c:	str	r3, [sp, #4]
    2a20:	mov	r3, #2
    2a24:	str	r3, [sp]
    2a28:	mov	r3, #4
    2a2c:	mov	r2, #0
    2a30:	mov	r1, #9
    2a34:	ldr	r0, [fp, #-16]
    2a38:	bl	0 <flatcc_verify_vector_field>
    2a3c:	str	r0, [fp, #-8]
    2a40:	ldr	r3, [fp, #-8]
    2a44:	cmp	r3, #0
    2a48:	beq	2a54 <MyGame_Example_Monster_verify_table+0x2bc>
    2a4c:	ldr	r3, [fp, #-8]
    2a50:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2a54:	mvn	r3, #-1073741824	; 0xc0000000
    2a58:	str	r3, [sp, #4]
    2a5c:	mov	r3, #2
    2a60:	str	r3, [sp]
    2a64:	mov	r3, #4
    2a68:	mov	r2, #0
    2a6c:	mov	r1, #31
    2a70:	ldr	r0, [fp, #-16]
    2a74:	bl	0 <flatcc_verify_vector_field>
    2a78:	str	r0, [fp, #-8]
    2a7c:	ldr	r3, [fp, #-8]
    2a80:	cmp	r3, #0
    2a84:	beq	2a90 <MyGame_Example_Monster_verify_table+0x2f8>
    2a88:	ldr	r3, [fp, #-8]
    2a8c:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2a90:	movw	r3, #0
    2a94:	movt	r3, #0
    2a98:	str	r3, [sp, #4]
    2a9c:	mov	r3, #1
    2aa0:	str	r3, [sp]
    2aa4:	mov	r3, #0
    2aa8:	mov	r2, #0
    2aac:	mov	r1, #13
    2ab0:	ldr	r0, [fp, #-16]
    2ab4:	bl	0 <flatcc_verify_table_as_nested_root>
    2ab8:	str	r0, [fp, #-8]
    2abc:	ldr	r3, [fp, #-8]
    2ac0:	cmp	r3, #0
    2ac4:	beq	2ad0 <MyGame_Example_Monster_verify_table+0x338>
    2ac8:	ldr	r3, [fp, #-8]
    2acc:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2ad0:	movw	r3, #0
    2ad4:	movt	r3, #0
    2ad8:	mov	r2, #0
    2adc:	mov	r1, #14
    2ae0:	ldr	r0, [fp, #-16]
    2ae4:	bl	0 <flatcc_verify_table_field>
    2ae8:	str	r0, [fp, #-8]
    2aec:	ldr	r3, [fp, #-8]
    2af0:	cmp	r3, #0
    2af4:	beq	2b00 <MyGame_Example_Monster_verify_table+0x368>
    2af8:	ldr	r3, [fp, #-8]
    2afc:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2b00:	mov	r3, #1
    2b04:	mov	r2, #1
    2b08:	mov	r1, #15
    2b0c:	ldr	r0, [fp, #-16]
    2b10:	bl	0 <flatcc_verify_field>
    2b14:	str	r0, [fp, #-8]
    2b18:	ldr	r3, [fp, #-8]
    2b1c:	cmp	r3, #0
    2b20:	beq	2b2c <MyGame_Example_Monster_verify_table+0x394>
    2b24:	ldr	r3, [fp, #-8]
    2b28:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2b2c:	mov	r3, #4
    2b30:	mov	r2, #4
    2b34:	mov	r1, #16
    2b38:	ldr	r0, [fp, #-16]
    2b3c:	bl	0 <flatcc_verify_field>
    2b40:	str	r0, [fp, #-8]
    2b44:	ldr	r3, [fp, #-8]
    2b48:	cmp	r3, #0
    2b4c:	beq	2b58 <MyGame_Example_Monster_verify_table+0x3c0>
    2b50:	ldr	r3, [fp, #-8]
    2b54:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2b58:	mov	r3, #4
    2b5c:	mov	r2, #4
    2b60:	mov	r1, #17
    2b64:	ldr	r0, [fp, #-16]
    2b68:	bl	0 <flatcc_verify_field>
    2b6c:	str	r0, [fp, #-8]
    2b70:	ldr	r3, [fp, #-8]
    2b74:	cmp	r3, #0
    2b78:	beq	2b84 <MyGame_Example_Monster_verify_table+0x3ec>
    2b7c:	ldr	r3, [fp, #-8]
    2b80:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2b84:	mov	r3, #8
    2b88:	mov	r2, #8
    2b8c:	mov	r1, #18
    2b90:	ldr	r0, [fp, #-16]
    2b94:	bl	0 <flatcc_verify_field>
    2b98:	str	r0, [fp, #-8]
    2b9c:	ldr	r3, [fp, #-8]
    2ba0:	cmp	r3, #0
    2ba4:	beq	2bb0 <MyGame_Example_Monster_verify_table+0x418>
    2ba8:	ldr	r3, [fp, #-8]
    2bac:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2bb0:	mov	r3, #8
    2bb4:	mov	r2, #8
    2bb8:	mov	r1, #19
    2bbc:	ldr	r0, [fp, #-16]
    2bc0:	bl	0 <flatcc_verify_field>
    2bc4:	str	r0, [fp, #-8]
    2bc8:	ldr	r3, [fp, #-8]
    2bcc:	cmp	r3, #0
    2bd0:	beq	2bdc <MyGame_Example_Monster_verify_table+0x444>
    2bd4:	ldr	r3, [fp, #-8]
    2bd8:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2bdc:	mov	r3, #4
    2be0:	mov	r2, #4
    2be4:	mov	r1, #20
    2be8:	ldr	r0, [fp, #-16]
    2bec:	bl	0 <flatcc_verify_field>
    2bf0:	str	r0, [fp, #-8]
    2bf4:	ldr	r3, [fp, #-8]
    2bf8:	cmp	r3, #0
    2bfc:	beq	2c08 <MyGame_Example_Monster_verify_table+0x470>
    2c00:	ldr	r3, [fp, #-8]
    2c04:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2c08:	mov	r3, #4
    2c0c:	mov	r2, #4
    2c10:	mov	r1, #21
    2c14:	ldr	r0, [fp, #-16]
    2c18:	bl	0 <flatcc_verify_field>
    2c1c:	str	r0, [fp, #-8]
    2c20:	ldr	r3, [fp, #-8]
    2c24:	cmp	r3, #0
    2c28:	beq	2c34 <MyGame_Example_Monster_verify_table+0x49c>
    2c2c:	ldr	r3, [fp, #-8]
    2c30:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2c34:	mov	r3, #8
    2c38:	mov	r2, #8
    2c3c:	mov	r1, #22
    2c40:	ldr	r0, [fp, #-16]
    2c44:	bl	0 <flatcc_verify_field>
    2c48:	str	r0, [fp, #-8]
    2c4c:	ldr	r3, [fp, #-8]
    2c50:	cmp	r3, #0
    2c54:	beq	2c60 <MyGame_Example_Monster_verify_table+0x4c8>
    2c58:	ldr	r3, [fp, #-8]
    2c5c:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2c60:	mov	r3, #8
    2c64:	mov	r2, #8
    2c68:	mov	r1, #23
    2c6c:	ldr	r0, [fp, #-16]
    2c70:	bl	0 <flatcc_verify_field>
    2c74:	str	r0, [fp, #-8]
    2c78:	ldr	r3, [fp, #-8]
    2c7c:	cmp	r3, #0
    2c80:	beq	2c8c <MyGame_Example_Monster_verify_table+0x4f4>
    2c84:	ldr	r3, [fp, #-8]
    2c88:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2c8c:	mov	r3, #4
    2c90:	mov	r2, #4
    2c94:	mov	r1, #25
    2c98:	ldr	r0, [fp, #-16]
    2c9c:	bl	0 <flatcc_verify_field>
    2ca0:	str	r0, [fp, #-8]
    2ca4:	ldr	r3, [fp, #-8]
    2ca8:	cmp	r3, #0
    2cac:	beq	2cb8 <MyGame_Example_Monster_verify_table+0x520>
    2cb0:	ldr	r3, [fp, #-8]
    2cb4:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2cb8:	mov	r3, #4
    2cbc:	mov	r2, #4
    2cc0:	mov	r1, #26
    2cc4:	ldr	r0, [fp, #-16]
    2cc8:	bl	0 <flatcc_verify_field>
    2ccc:	str	r0, [fp, #-8]
    2cd0:	ldr	r3, [fp, #-8]
    2cd4:	cmp	r3, #0
    2cd8:	beq	2ce4 <MyGame_Example_Monster_verify_table+0x54c>
    2cdc:	ldr	r3, [fp, #-8]
    2ce0:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2ce4:	mov	r3, #4
    2ce8:	mov	r2, #4
    2cec:	mov	r1, #27
    2cf0:	ldr	r0, [fp, #-16]
    2cf4:	bl	0 <flatcc_verify_field>
    2cf8:	str	r0, [fp, #-8]
    2cfc:	ldr	r3, [fp, #-8]
    2d00:	cmp	r3, #0
    2d04:	beq	2d10 <MyGame_Example_Monster_verify_table+0x578>
    2d08:	ldr	r3, [fp, #-8]
    2d0c:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2d10:	mvn	r3, #0
    2d14:	str	r3, [sp, #4]
    2d18:	mov	r3, #1
    2d1c:	str	r3, [sp]
    2d20:	mov	r3, #1
    2d24:	mov	r2, #0
    2d28:	mov	r1, #30
    2d2c:	ldr	r0, [fp, #-16]
    2d30:	bl	0 <flatcc_verify_vector_field>
    2d34:	str	r0, [fp, #-8]
    2d38:	ldr	r3, [fp, #-8]
    2d3c:	cmp	r3, #0
    2d40:	beq	2d4c <MyGame_Example_Monster_verify_table+0x5b4>
    2d44:	ldr	r3, [fp, #-8]
    2d48:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2d4c:	mvn	r3, #-536870912	; 0xe0000000
    2d50:	str	r3, [sp, #4]
    2d54:	mov	r3, #8
    2d58:	str	r3, [sp]
    2d5c:	mov	r3, #8
    2d60:	mov	r2, #0
    2d64:	mov	r1, #32
    2d68:	ldr	r0, [fp, #-16]
    2d6c:	bl	0 <flatcc_verify_vector_field>
    2d70:	str	r0, [fp, #-8]
    2d74:	ldr	r3, [fp, #-8]
    2d78:	cmp	r3, #0
    2d7c:	beq	2d88 <MyGame_Example_Monster_verify_table+0x5f0>
    2d80:	ldr	r3, [fp, #-8]
    2d84:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2d88:	mvn	r3, #-536870912	; 0xe0000000
    2d8c:	str	r3, [sp, #4]
    2d90:	mov	r3, #8
    2d94:	str	r3, [sp]
    2d98:	mov	r3, #8
    2d9c:	mov	r2, #0
    2da0:	mov	r1, #33	; 0x21
    2da4:	ldr	r0, [fp, #-16]
    2da8:	bl	0 <flatcc_verify_vector_field>
    2dac:	str	r0, [fp, #-8]
    2db0:	ldr	r3, [fp, #-8]
    2db4:	cmp	r3, #0
    2db8:	beq	2dc4 <MyGame_Example_Monster_verify_table+0x62c>
    2dbc:	ldr	r3, [fp, #-8]
    2dc0:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2dc4:	movw	r3, #0
    2dc8:	movt	r3, #0
    2dcc:	mov	r2, #0
    2dd0:	mov	r1, #34	; 0x22
    2dd4:	ldr	r0, [fp, #-16]
    2dd8:	bl	0 <flatcc_verify_table_field>
    2ddc:	str	r0, [fp, #-8]
    2de0:	ldr	r3, [fp, #-8]
    2de4:	cmp	r3, #0
    2de8:	beq	2df4 <MyGame_Example_Monster_verify_table+0x65c>
    2dec:	ldr	r3, [fp, #-8]
    2df0:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2df4:	movw	r3, #0
    2df8:	movt	r3, #0
    2dfc:	mov	r2, #0
    2e00:	mov	r1, #35	; 0x23
    2e04:	ldr	r0, [fp, #-16]
    2e08:	bl	0 <flatcc_verify_table_field>
    2e0c:	str	r0, [fp, #-8]
    2e10:	ldr	r3, [fp, #-8]
    2e14:	cmp	r3, #0
    2e18:	beq	2e24 <MyGame_Example_Monster_verify_table+0x68c>
    2e1c:	ldr	r3, [fp, #-8]
    2e20:	b	2e28 <MyGame_Example_Monster_verify_table+0x690>
    2e24:	mov	r3, #0
    2e28:	mov	r0, r3
    2e2c:	sub	sp, fp, #4
    2e30:	ldr	fp, [sp]
    2e34:	add	sp, sp, #4
    2e38:	pop	{pc}		; (ldr pc, [sp], #4)

00002e3c <MyGame_Example_Monster_verify_as_root>:
    2e3c:	str	fp, [sp, #-8]!
    2e40:	str	lr, [sp, #4]
    2e44:	add	fp, sp, #4
    2e48:	sub	sp, sp, #8
    2e4c:	str	r0, [fp, #-8]
    2e50:	str	r1, [fp, #-12]
    2e54:	movw	r3, #0
    2e58:	movt	r3, #0
    2e5c:	movw	r2, #0
    2e60:	movt	r2, #0
    2e64:	ldr	r1, [fp, #-12]
    2e68:	ldr	r0, [fp, #-8]
    2e6c:	bl	0 <flatcc_verify_table_as_root>
    2e70:	mov	r3, r0
    2e74:	mov	r0, r3
    2e78:	sub	sp, fp, #4
    2e7c:	ldr	fp, [sp]
    2e80:	add	sp, sp, #4
    2e84:	pop	{pc}		; (ldr pc, [sp], #4)

00002e88 <MyGame_Example_Monster_verify_as_root_with_identifier>:
    2e88:	str	fp, [sp, #-8]!
    2e8c:	str	lr, [sp, #4]
    2e90:	add	fp, sp, #4
    2e94:	sub	sp, sp, #16
    2e98:	str	r0, [fp, #-8]
    2e9c:	str	r1, [fp, #-12]
    2ea0:	str	r2, [fp, #-16]
    2ea4:	movw	r3, #0
    2ea8:	movt	r3, #0
    2eac:	ldr	r2, [fp, #-16]
    2eb0:	ldr	r1, [fp, #-12]
    2eb4:	ldr	r0, [fp, #-8]
    2eb8:	bl	0 <flatcc_verify_table_as_root>
    2ebc:	mov	r3, r0
    2ec0:	mov	r0, r3
    2ec4:	sub	sp, fp, #4
    2ec8:	ldr	fp, [sp]
    2ecc:	add	sp, sp, #4
    2ed0:	pop	{pc}		; (ldr pc, [sp], #4)

00002ed4 <MyGame_Example_TypeAliases_verify_table>:
    2ed4:	str	fp, [sp, #-8]!
    2ed8:	str	lr, [sp, #4]
    2edc:	add	fp, sp, #4
    2ee0:	sub	sp, sp, #24
    2ee4:	str	r0, [fp, #-16]
    2ee8:	mov	r3, #1
    2eec:	mov	r2, #1
    2ef0:	mov	r1, #0
    2ef4:	ldr	r0, [fp, #-16]
    2ef8:	bl	0 <flatcc_verify_field>
    2efc:	str	r0, [fp, #-8]
    2f00:	ldr	r3, [fp, #-8]
    2f04:	cmp	r3, #0
    2f08:	beq	2f14 <MyGame_Example_TypeAliases_verify_table+0x40>
    2f0c:	ldr	r3, [fp, #-8]
    2f10:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    2f14:	mov	r3, #1
    2f18:	mov	r2, #1
    2f1c:	mov	r1, #1
    2f20:	ldr	r0, [fp, #-16]
    2f24:	bl	0 <flatcc_verify_field>
    2f28:	str	r0, [fp, #-8]
    2f2c:	ldr	r3, [fp, #-8]
    2f30:	cmp	r3, #0
    2f34:	beq	2f40 <MyGame_Example_TypeAliases_verify_table+0x6c>
    2f38:	ldr	r3, [fp, #-8]
    2f3c:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    2f40:	mov	r3, #2
    2f44:	mov	r2, #2
    2f48:	mov	r1, #2
    2f4c:	ldr	r0, [fp, #-16]
    2f50:	bl	0 <flatcc_verify_field>
    2f54:	str	r0, [fp, #-8]
    2f58:	ldr	r3, [fp, #-8]
    2f5c:	cmp	r3, #0
    2f60:	beq	2f6c <MyGame_Example_TypeAliases_verify_table+0x98>
    2f64:	ldr	r3, [fp, #-8]
    2f68:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    2f6c:	mov	r3, #2
    2f70:	mov	r2, #2
    2f74:	mov	r1, #3
    2f78:	ldr	r0, [fp, #-16]
    2f7c:	bl	0 <flatcc_verify_field>
    2f80:	str	r0, [fp, #-8]
    2f84:	ldr	r3, [fp, #-8]
    2f88:	cmp	r3, #0
    2f8c:	beq	2f98 <MyGame_Example_TypeAliases_verify_table+0xc4>
    2f90:	ldr	r3, [fp, #-8]
    2f94:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    2f98:	mov	r3, #4
    2f9c:	mov	r2, #4
    2fa0:	mov	r1, #4
    2fa4:	ldr	r0, [fp, #-16]
    2fa8:	bl	0 <flatcc_verify_field>
    2fac:	str	r0, [fp, #-8]
    2fb0:	ldr	r3, [fp, #-8]
    2fb4:	cmp	r3, #0
    2fb8:	beq	2fc4 <MyGame_Example_TypeAliases_verify_table+0xf0>
    2fbc:	ldr	r3, [fp, #-8]
    2fc0:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    2fc4:	mov	r3, #4
    2fc8:	mov	r2, #4
    2fcc:	mov	r1, #5
    2fd0:	ldr	r0, [fp, #-16]
    2fd4:	bl	0 <flatcc_verify_field>
    2fd8:	str	r0, [fp, #-8]
    2fdc:	ldr	r3, [fp, #-8]
    2fe0:	cmp	r3, #0
    2fe4:	beq	2ff0 <MyGame_Example_TypeAliases_verify_table+0x11c>
    2fe8:	ldr	r3, [fp, #-8]
    2fec:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    2ff0:	mov	r3, #8
    2ff4:	mov	r2, #8
    2ff8:	mov	r1, #6
    2ffc:	ldr	r0, [fp, #-16]
    3000:	bl	0 <flatcc_verify_field>
    3004:	str	r0, [fp, #-8]
    3008:	ldr	r3, [fp, #-8]
    300c:	cmp	r3, #0
    3010:	beq	301c <MyGame_Example_TypeAliases_verify_table+0x148>
    3014:	ldr	r3, [fp, #-8]
    3018:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    301c:	mov	r3, #8
    3020:	mov	r2, #8
    3024:	mov	r1, #7
    3028:	ldr	r0, [fp, #-16]
    302c:	bl	0 <flatcc_verify_field>
    3030:	str	r0, [fp, #-8]
    3034:	ldr	r3, [fp, #-8]
    3038:	cmp	r3, #0
    303c:	beq	3048 <MyGame_Example_TypeAliases_verify_table+0x174>
    3040:	ldr	r3, [fp, #-8]
    3044:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    3048:	mov	r3, #4
    304c:	mov	r2, #4
    3050:	mov	r1, #8
    3054:	ldr	r0, [fp, #-16]
    3058:	bl	0 <flatcc_verify_field>
    305c:	str	r0, [fp, #-8]
    3060:	ldr	r3, [fp, #-8]
    3064:	cmp	r3, #0
    3068:	beq	3074 <MyGame_Example_TypeAliases_verify_table+0x1a0>
    306c:	ldr	r3, [fp, #-8]
    3070:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    3074:	mov	r3, #8
    3078:	mov	r2, #8
    307c:	mov	r1, #9
    3080:	ldr	r0, [fp, #-16]
    3084:	bl	0 <flatcc_verify_field>
    3088:	str	r0, [fp, #-8]
    308c:	ldr	r3, [fp, #-8]
    3090:	cmp	r3, #0
    3094:	beq	30a0 <MyGame_Example_TypeAliases_verify_table+0x1cc>
    3098:	ldr	r3, [fp, #-8]
    309c:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    30a0:	mvn	r3, #0
    30a4:	str	r3, [sp, #4]
    30a8:	mov	r3, #1
    30ac:	str	r3, [sp]
    30b0:	mov	r3, #1
    30b4:	mov	r2, #0
    30b8:	mov	r1, #10
    30bc:	ldr	r0, [fp, #-16]
    30c0:	bl	0 <flatcc_verify_vector_field>
    30c4:	str	r0, [fp, #-8]
    30c8:	ldr	r3, [fp, #-8]
    30cc:	cmp	r3, #0
    30d0:	beq	30dc <MyGame_Example_TypeAliases_verify_table+0x208>
    30d4:	ldr	r3, [fp, #-8]
    30d8:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    30dc:	mvn	r3, #-536870912	; 0xe0000000
    30e0:	str	r3, [sp, #4]
    30e4:	mov	r3, #8
    30e8:	str	r3, [sp]
    30ec:	mov	r3, #8
    30f0:	mov	r2, #0
    30f4:	mov	r1, #11
    30f8:	ldr	r0, [fp, #-16]
    30fc:	bl	0 <flatcc_verify_vector_field>
    3100:	str	r0, [fp, #-8]
    3104:	ldr	r3, [fp, #-8]
    3108:	cmp	r3, #0
    310c:	beq	3118 <MyGame_Example_TypeAliases_verify_table+0x244>
    3110:	ldr	r3, [fp, #-8]
    3114:	b	311c <MyGame_Example_TypeAliases_verify_table+0x248>
    3118:	mov	r3, #0
    311c:	mov	r0, r3
    3120:	sub	sp, fp, #4
    3124:	ldr	fp, [sp]
    3128:	add	sp, sp, #4
    312c:	pop	{pc}		; (ldr pc, [sp], #4)

00003130 <Fantasy_Attacker_verify_table>:
    3130:	str	fp, [sp, #-8]!
    3134:	str	lr, [sp, #4]
    3138:	add	fp, sp, #4
    313c:	sub	sp, sp, #16
    3140:	str	r0, [fp, #-16]
    3144:	mov	r3, #4
    3148:	mov	r2, #4
    314c:	mov	r1, #0
    3150:	ldr	r0, [fp, #-16]
    3154:	bl	0 <flatcc_verify_field>
    3158:	str	r0, [fp, #-8]
    315c:	ldr	r3, [fp, #-8]
    3160:	cmp	r3, #0
    3164:	beq	3170 <Fantasy_Attacker_verify_table+0x40>
    3168:	ldr	r3, [fp, #-8]
    316c:	b	3174 <Fantasy_Attacker_verify_table+0x44>
    3170:	mov	r3, #0
    3174:	mov	r0, r3
    3178:	sub	sp, fp, #4
    317c:	ldr	fp, [sp]
    3180:	add	sp, sp, #4
    3184:	pop	{pc}		; (ldr pc, [sp], #4)

00003188 <Fantasy_Movie_verify_table>:
    3188:	str	fp, [sp, #-8]!
    318c:	str	lr, [sp, #4]
    3190:	add	fp, sp, #4
    3194:	sub	sp, sp, #16
    3198:	str	r0, [fp, #-16]
    319c:	movw	r3, #0
    31a0:	movt	r3, #0
    31a4:	mov	r2, #0
    31a8:	mov	r1, #1
    31ac:	ldr	r0, [fp, #-16]
    31b0:	bl	0 <flatcc_verify_union_field>
    31b4:	str	r0, [fp, #-8]
    31b8:	ldr	r3, [fp, #-8]
    31bc:	cmp	r3, #0
    31c0:	beq	31cc <Fantasy_Movie_verify_table+0x44>
    31c4:	ldr	r3, [fp, #-8]
    31c8:	b	3290 <Fantasy_Movie_verify_table+0x108>
    31cc:	movw	r3, #0
    31d0:	movt	r3, #0
    31d4:	mov	r2, #0
    31d8:	mov	r1, #3
    31dc:	ldr	r0, [fp, #-16]
    31e0:	bl	0 <flatcc_verify_union_field>
    31e4:	str	r0, [fp, #-8]
    31e8:	ldr	r3, [fp, #-8]
    31ec:	cmp	r3, #0
    31f0:	beq	31fc <Fantasy_Movie_verify_table+0x74>
    31f4:	ldr	r3, [fp, #-8]
    31f8:	b	3290 <Fantasy_Movie_verify_table+0x108>
    31fc:	movw	r3, #0
    3200:	movt	r3, #0
    3204:	mov	r2, #0
    3208:	mov	r1, #5
    320c:	ldr	r0, [fp, #-16]
    3210:	bl	0 <flatcc_verify_union_field>
    3214:	str	r0, [fp, #-8]
    3218:	ldr	r3, [fp, #-8]
    321c:	cmp	r3, #0
    3220:	beq	322c <Fantasy_Movie_verify_table+0xa4>
    3224:	ldr	r3, [fp, #-8]
    3228:	b	3290 <Fantasy_Movie_verify_table+0x108>
    322c:	movw	r3, #0
    3230:	movt	r3, #0
    3234:	mov	r2, #0
    3238:	mov	r1, #7
    323c:	ldr	r0, [fp, #-16]
    3240:	bl	0 <flatcc_verify_union_field>
    3244:	str	r0, [fp, #-8]
    3248:	ldr	r3, [fp, #-8]
    324c:	cmp	r3, #0
    3250:	beq	325c <Fantasy_Movie_verify_table+0xd4>
    3254:	ldr	r3, [fp, #-8]
    3258:	b	3290 <Fantasy_Movie_verify_table+0x108>
    325c:	movw	r3, #0
    3260:	movt	r3, #0
    3264:	mov	r2, #0
    3268:	mov	r1, #9
    326c:	ldr	r0, [fp, #-16]
    3270:	bl	0 <flatcc_verify_union_vector_field>
    3274:	str	r0, [fp, #-8]
    3278:	ldr	r3, [fp, #-8]
    327c:	cmp	r3, #0
    3280:	beq	328c <Fantasy_Movie_verify_table+0x104>
    3284:	ldr	r3, [fp, #-8]
    3288:	b	3290 <Fantasy_Movie_verify_table+0x108>
    328c:	mov	r3, #0
    3290:	mov	r0, r3
    3294:	sub	sp, fp, #4
    3298:	ldr	fp, [sp]
    329c:	add	sp, sp, #4
    32a0:	pop	{pc}		; (ldr pc, [sp], #4)

000032a4 <readfile>:
    32a4:	str	fp, [sp, #-8]!
    32a8:	str	lr, [sp, #4]
    32ac:	add	fp, sp, #4
    32b0:	sub	sp, sp, #40	; 0x28
    32b4:	str	r0, [fp, #-32]	; 0xffffffe0
    32b8:	str	r1, [fp, #-36]	; 0xffffffdc
    32bc:	str	r2, [fp, #-40]	; 0xffffffd8
    32c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    32c4:	cmp	r3, #0
    32c8:	bne	32d4 <readfile+0x30>
    32cc:	sub	r3, fp, #28
    32d0:	b	32d8 <readfile+0x34>
    32d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    32d8:	str	r3, [fp, #-40]	; 0xffffffd8
    32dc:	movw	r1, #0
    32e0:	movt	r1, #0
    32e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    32e8:	bl	0 <fopen>
    32ec:	str	r0, [fp, #-20]	; 0xffffffec
    32f0:	mov	r3, #0
    32f4:	str	r3, [fp, #-8]
    32f8:	mov	r3, #0
    32fc:	str	r3, [fp, #-16]
    3300:	ldr	r3, [fp, #-20]	; 0xffffffec
    3304:	cmp	r3, #0
    3308:	beq	340c <readfile+0x168>
    330c:	mov	r2, #2
    3310:	mov	r1, #0
    3314:	ldr	r0, [fp, #-20]	; 0xffffffec
    3318:	bl	0 <fseek>
    331c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3320:	bl	0 <ftell>
    3324:	mov	r3, r0
    3328:	str	r3, [fp, #-8]
    332c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3330:	ldr	r2, [fp, #-8]
    3334:	str	r2, [r3]
    3338:	ldr	r3, [fp, #-36]	; 0xffffffdc
    333c:	cmp	r3, #0
    3340:	beq	3354 <readfile+0xb0>
    3344:	ldr	r2, [fp, #-8]
    3348:	ldr	r3, [fp, #-36]	; 0xffffffdc
    334c:	cmp	r2, r3
    3350:	bhi	3414 <readfile+0x170>
    3354:	ldr	r0, [fp, #-20]	; 0xffffffec
    3358:	bl	0 <rewind>
    335c:	ldr	r3, [fp, #-8]
    3360:	cmp	r3, #0
    3364:	beq	3370 <readfile+0xcc>
    3368:	ldr	r3, [fp, #-8]
    336c:	b	3374 <readfile+0xd0>
    3370:	mov	r3, #1
    3374:	mov	r0, r3
    3378:	bl	0 <malloc>
    337c:	mov	r3, r0
    3380:	str	r3, [fp, #-16]
    3384:	ldr	r3, [fp, #-16]
    3388:	cmp	r3, #0
    338c:	beq	341c <readfile+0x178>
    3390:	mov	r3, #0
    3394:	str	r3, [fp, #-12]
    3398:	b	33ac <readfile+0x108>
    339c:	ldr	r2, [fp, #-12]
    33a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    33a4:	add	r3, r2, r3
    33a8:	str	r3, [fp, #-12]
    33ac:	ldr	r2, [fp, #-16]
    33b0:	ldr	r3, [fp, #-12]
    33b4:	add	r0, r2, r3
    33b8:	ldr	r2, [fp, #-8]
    33bc:	ldr	r3, [fp, #-12]
    33c0:	sub	r2, r2, r3
    33c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    33c8:	mov	r1, #1
    33cc:	bl	0 <fread>
    33d0:	str	r0, [fp, #-24]	; 0xffffffe8
    33d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    33d8:	cmp	r3, #0
    33dc:	bne	339c <readfile+0xf8>
    33e0:	ldr	r2, [fp, #-12]
    33e4:	ldr	r3, [fp, #-8]
    33e8:	cmp	r2, r3
    33ec:	bne	3424 <readfile+0x180>
    33f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    33f4:	bl	0 <fclose>
    33f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    33fc:	ldr	r2, [fp, #-8]
    3400:	str	r2, [r3]
    3404:	ldr	r3, [fp, #-16]
    3408:	b	3460 <readfile+0x1bc>
    340c:	nop	{0}
    3410:	b	3428 <readfile+0x184>
    3414:	nop	{0}
    3418:	b	3428 <readfile+0x184>
    341c:	nop	{0}
    3420:	b	3428 <readfile+0x184>
    3424:	nop	{0}
    3428:	ldr	r3, [fp, #-20]	; 0xffffffec
    342c:	cmp	r3, #0
    3430:	beq	343c <readfile+0x198>
    3434:	ldr	r0, [fp, #-20]	; 0xffffffec
    3438:	bl	0 <fclose>
    343c:	ldr	r3, [fp, #-16]
    3440:	cmp	r3, #0
    3444:	beq	3450 <readfile+0x1ac>
    3448:	ldr	r0, [fp, #-16]
    344c:	bl	0 <free>
    3450:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3454:	ldr	r2, [fp, #-8]
    3458:	str	r2, [r3]
    345c:	mov	r3, #0
    3460:	mov	r0, r3
    3464:	sub	sp, fp, #4
    3468:	ldr	fp, [sp]
    346c:	add	sp, sp, #4
    3470:	pop	{pc}		; (ldr pc, [sp], #4)

00003474 <hexdump>:
    3474:	str	fp, [sp, #-8]!
    3478:	str	lr, [sp, #4]
    347c:	add	fp, sp, #4
    3480:	sub	sp, sp, #48	; 0x30
    3484:	str	r0, [fp, #-40]	; 0xffffffd8
    3488:	str	r1, [fp, #-44]	; 0xffffffd4
    348c:	str	r2, [fp, #-48]	; 0xffffffd0
    3490:	str	r3, [fp, #-52]	; 0xffffffcc
    3494:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3498:	str	r3, [fp, #-12]
    349c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    34a0:	cmp	r3, #0
    34a4:	beq	34bc <hexdump+0x48>
    34a8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    34ac:	movw	r1, #0
    34b0:	movt	r1, #0
    34b4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    34b8:	bl	0 <fprintf>
    34bc:	mov	r3, #0
    34c0:	str	r3, [fp, #-8]
    34c4:	b	35ec <hexdump+0x178>
    34c8:	ldr	r3, [fp, #-8]
    34cc:	and	r3, r3, #15
    34d0:	cmp	r3, #0
    34d4:	bne	3514 <hexdump+0xa0>
    34d8:	ldr	r3, [fp, #-8]
    34dc:	cmp	r3, #0
    34e0:	beq	34fc <hexdump+0x88>
    34e4:	sub	r3, fp, #32
    34e8:	mov	r2, r3
    34ec:	movw	r1, #0
    34f0:	movt	r1, #0
    34f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    34f8:	bl	0 <fprintf>
    34fc:	ldr	r2, [fp, #-8]
    3500:	movw	r1, #0
    3504:	movt	r1, #0
    3508:	ldr	r0, [fp, #-52]	; 0xffffffcc
    350c:	bl	0 <fprintf>
    3510:	b	3530 <hexdump+0xbc>
    3514:	ldr	r3, [fp, #-8]
    3518:	and	r3, r3, #7
    351c:	cmp	r3, #0
    3520:	bne	3530 <hexdump+0xbc>
    3524:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3528:	mov	r0, #32
    352c:	bl	0 <fputc>
    3530:	ldr	r2, [fp, #-12]
    3534:	ldr	r3, [fp, #-8]
    3538:	add	r3, r2, r3
    353c:	ldrb	r3, [r3]
    3540:	mov	r2, r3
    3544:	movw	r1, #0
    3548:	movt	r1, #0
    354c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3550:	bl	0 <fprintf>
    3554:	ldr	r2, [fp, #-12]
    3558:	ldr	r3, [fp, #-8]
    355c:	add	r3, r2, r3
    3560:	ldrb	r3, [r3]
    3564:	cmp	r3, #31
    3568:	bls	3584 <hexdump+0x110>
    356c:	ldr	r2, [fp, #-12]
    3570:	ldr	r3, [fp, #-8]
    3574:	add	r3, r2, r3
    3578:	ldrb	r3, [r3]
    357c:	cmp	r3, #126	; 0x7e
    3580:	bls	35a0 <hexdump+0x12c>
    3584:	ldr	r3, [fp, #-8]
    3588:	and	r3, r3, #15
    358c:	sub	r2, fp, #4
    3590:	add	r3, r2, r3
    3594:	mov	r2, #46	; 0x2e
    3598:	strb	r2, [r3, #-28]	; 0xffffffe4
    359c:	b	35c4 <hexdump+0x150>
    35a0:	ldr	r2, [fp, #-12]
    35a4:	ldr	r3, [fp, #-8]
    35a8:	add	r2, r2, r3
    35ac:	ldr	r3, [fp, #-8]
    35b0:	and	r3, r3, #15
    35b4:	ldrb	r2, [r2]
    35b8:	sub	r1, fp, #4
    35bc:	add	r3, r1, r3
    35c0:	strb	r2, [r3, #-28]	; 0xffffffe4
    35c4:	ldr	r3, [fp, #-8]
    35c8:	and	r3, r3, #15
    35cc:	add	r3, r3, #1
    35d0:	sub	r2, fp, #4
    35d4:	add	r3, r2, r3
    35d8:	mov	r2, #0
    35dc:	strb	r2, [r3, #-28]	; 0xffffffe4
    35e0:	ldr	r3, [fp, #-8]
    35e4:	add	r3, r3, #1
    35e8:	str	r3, [fp, #-8]
    35ec:	ldr	r2, [fp, #-8]
    35f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    35f4:	cmp	r2, r3
    35f8:	bcc	34c8 <hexdump+0x54>
    35fc:	b	3624 <hexdump+0x1b0>
    3600:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3604:	mov	r2, #3
    3608:	mov	r1, #1
    360c:	movw	r0, #0
    3610:	movt	r0, #0
    3614:	bl	0 <fwrite>
    3618:	ldr	r3, [fp, #-8]
    361c:	add	r3, r3, #1
    3620:	str	r3, [fp, #-8]
    3624:	ldr	r3, [fp, #-8]
    3628:	and	r3, r3, #15
    362c:	cmp	r3, #0
    3630:	bne	3600 <hexdump+0x18c>
    3634:	sub	r3, fp, #32
    3638:	mov	r2, r3
    363c:	movw	r1, #0
    3640:	movt	r1, #0
    3644:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3648:	bl	0 <fprintf>
    364c:	nop	{0}
    3650:	sub	sp, fp, #4
    3654:	ldr	fp, [sp]
    3658:	add	sp, sp, #4
    365c:	pop	{pc}		; (ldr pc, [sp], #4)

00003660 <verify_monster>:
    3660:	str	fp, [sp, #-8]!
    3664:	str	lr, [sp, #4]
    3668:	add	fp, sp, #4
    366c:	sub	sp, sp, #56	; 0x38
    3670:	str	r0, [fp, #-56]	; 0xffffffc8
    3674:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3678:	bl	ccc <MyGame_Example_Monster_as_root>
    367c:	str	r0, [fp, #-12]
    3680:	ldr	r3, [fp, #-12]
    3684:	cmp	r3, #0
    3688:	bne	36a0 <verify_monster+0x40>
    368c:	movw	r0, #0
    3690:	movt	r0, #0
    3694:	bl	0 <puts>
    3698:	mvn	r3, #0
    369c:	b	3db8 <verify_monster+0x758>
    36a0:	ldr	r0, [fp, #-12]
    36a4:	bl	e28 <MyGame_Example_Monster_hp>
    36a8:	mov	r3, r0
    36ac:	cmp	r3, #80	; 0x50
    36b0:	beq	36c8 <verify_monster+0x68>
    36b4:	movw	r0, #0
    36b8:	movt	r0, #0
    36bc:	bl	0 <puts>
    36c0:	mvn	r3, #0
    36c4:	b	3db8 <verify_monster+0x758>
    36c8:	ldr	r0, [fp, #-12]
    36cc:	bl	d40 <MyGame_Example_Monster_pos>
    36d0:	str	r0, [fp, #-16]
    36d4:	ldr	r3, [fp, #-16]
    36d8:	cmp	r3, #0
    36dc:	bne	36f4 <verify_monster+0x94>
    36e0:	movw	r0, #0
    36e4:	movt	r0, #0
    36e8:	bl	0 <puts>
    36ec:	mvn	r3, #0
    36f0:	b	3db8 <verify_monster+0x758>
    36f4:	ldr	r2, [fp, #-16]
    36f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    36fc:	sub	r3, r2, r3
    3700:	str	r3, [fp, #-20]	; 0xffffffec
    3704:	ldr	r3, [fp, #-20]	; 0xffffffec
    3708:	and	r3, r3, #15
    370c:	cmp	r3, #0
    3710:	beq	3728 <verify_monster+0xc8>
    3714:	movw	r0, #0
    3718:	movt	r0, #0
    371c:	bl	0 <puts>
    3720:	mvn	r3, #0
    3724:	b	3db8 <verify_monster+0x758>
    3728:	ldr	r0, [fp, #-16]
    372c:	bl	af0 <MyGame_Example_Vec3_x>
    3730:	vmov.f32	s14, s0
    3734:	vldr	s15, [pc, #972]	; 3b08 <verify_monster+0x4a8>
    3738:	vcmp.f32	s14, s15
    373c:	vmrs	APSR_nzcv, fpscr
    3740:	beq	3758 <verify_monster+0xf8>
    3744:	movw	r0, #0
    3748:	movt	r0, #0
    374c:	bl	0 <puts>
    3750:	mvn	r3, #0
    3754:	b	3db8 <verify_monster+0x758>
    3758:	ldr	r0, [fp, #-16]
    375c:	bl	b40 <MyGame_Example_Vec3_y>
    3760:	vmov.f32	s14, s0
    3764:	vldr	s15, [pc, #928]	; 3b0c <verify_monster+0x4ac>
    3768:	vcmp.f32	s14, s15
    376c:	vmrs	APSR_nzcv, fpscr
    3770:	beq	3788 <verify_monster+0x128>
    3774:	movw	r0, #0
    3778:	movt	r0, #0
    377c:	bl	0 <puts>
    3780:	mvn	r3, #0
    3784:	b	3db8 <verify_monster+0x758>
    3788:	ldr	r0, [fp, #-16]
    378c:	bl	b94 <MyGame_Example_Vec3_z>
    3790:	vmov.f32	s14, s0
    3794:	vldr	s15, [pc, #884]	; 3b10 <verify_monster+0x4b0>
    3798:	vcmp.f32	s14, s15
    379c:	vmrs	APSR_nzcv, fpscr
    37a0:	beq	37b8 <verify_monster+0x158>
    37a4:	movw	r0, #0
    37a8:	movt	r0, #0
    37ac:	bl	0 <puts>
    37b0:	mvn	r3, #0
    37b4:	b	3db8 <verify_monster+0x758>
    37b8:	ldr	r0, [fp, #-16]
    37bc:	bl	be8 <MyGame_Example_Vec3_test1>
    37c0:	vmov.f64	d6, d0
    37c4:	vldr	d7, [pc, #820]	; 3b00 <verify_monster+0x4a0>
    37c8:	vcmp.f64	d6, d7
    37cc:	vmrs	APSR_nzcv, fpscr
    37d0:	beq	37e8 <verify_monster+0x188>
    37d4:	movw	r0, #0
    37d8:	movt	r0, #0
    37dc:	bl	0 <puts>
    37e0:	mvn	r3, #0
    37e4:	b	3db8 <verify_monster+0x758>
    37e8:	ldr	r0, [fp, #-16]
    37ec:	bl	c40 <MyGame_Example_Vec3_test2>
    37f0:	mov	r3, r0
    37f4:	cmp	r3, #2
    37f8:	beq	3810 <verify_monster+0x1b0>
    37fc:	movw	r0, #0
    3800:	movt	r0, #0
    3804:	bl	0 <puts>
    3808:	mvn	r3, #0
    380c:	b	3db8 <verify_monster+0x758>
    3810:	ldr	r0, [fp, #-16]
    3814:	bl	c90 <MyGame_Example_Vec3_test3>
    3818:	str	r0, [fp, #-24]	; 0xffffffe8
    381c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3820:	bl	a54 <MyGame_Example_Test_a>
    3824:	mov	r3, r0
    3828:	cmp	r3, #5
    382c:	bne	3844 <verify_monster+0x1e4>
    3830:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3834:	bl	aa0 <MyGame_Example_Test_b>
    3838:	mov	r3, r0
    383c:	cmp	r3, #6
    3840:	beq	3858 <verify_monster+0x1f8>
    3844:	movw	r0, #0
    3848:	movt	r0, #0
    384c:	bl	0 <puts>
    3850:	mvn	r3, #0
    3854:	b	3db8 <verify_monster+0x758>
    3858:	ldr	r0, [fp, #-12]
    385c:	bl	f1c <MyGame_Example_Monster_name>
    3860:	str	r0, [fp, #-28]	; 0xffffffe4
    3864:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3868:	bl	6a0 <flatbuffers_string_len>
    386c:	mov	r3, r0
    3870:	cmp	r3, #9
    3874:	beq	388c <verify_monster+0x22c>
    3878:	movw	r0, #0
    387c:	movt	r0, #0
    3880:	bl	0 <puts>
    3884:	mvn	r3, #0
    3888:	b	3db8 <verify_monster+0x758>
    388c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3890:	cmp	r3, #0
    3894:	beq	38b4 <verify_monster+0x254>
    3898:	movw	r1, #0
    389c:	movt	r1, #0
    38a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    38a4:	bl	0 <strcmp>
    38a8:	mov	r3, r0
    38ac:	cmp	r3, #0
    38b0:	beq	38c8 <verify_monster+0x268>
    38b4:	movw	r0, #0
    38b8:	movt	r0, #0
    38bc:	bl	0 <puts>
    38c0:	mvn	r3, #0
    38c4:	b	3db8 <verify_monster+0x758>
    38c8:	ldr	r0, [fp, #-12]
    38cc:	bl	103c <MyGame_Example_Monster_inventory>
    38d0:	str	r0, [fp, #-32]	; 0xffffffe0
    38d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    38d8:	bl	7d0 <flatbuffers_uint8_vec_len>
    38dc:	mov	r3, r0
    38e0:	cmp	r3, #5
    38e4:	beq	38fc <verify_monster+0x29c>
    38e8:	movw	r0, #0
    38ec:	movt	r0, #0
    38f0:	bl	0 <puts>
    38f4:	mvn	r3, #0
    38f8:	b	3db8 <verify_monster+0x758>
    38fc:	mov	r3, #0
    3900:	str	r3, [fp, #-8]
    3904:	b	3950 <verify_monster+0x2f0>
    3908:	ldr	r3, [fp, #-8]
    390c:	mov	r1, r3
    3910:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3914:	bl	804 <flatbuffers_uint8_vec_at>
    3918:	mov	r3, r0
    391c:	mov	r2, r3
    3920:	ldr	r3, [fp, #-8]
    3924:	cmp	r3, r2
    3928:	beq	3944 <verify_monster+0x2e4>
    392c:	ldr	r1, [fp, #-8]
    3930:	movw	r0, #0
    3934:	movt	r0, #0
    3938:	bl	0 <printf>
    393c:	mvn	r3, #0
    3940:	b	3db8 <verify_monster+0x758>
    3944:	ldr	r3, [fp, #-8]
    3948:	add	r3, r3, #1
    394c:	str	r3, [fp, #-8]
    3950:	ldr	r3, [fp, #-8]
    3954:	cmp	r3, #4
    3958:	ble	3908 <verify_monster+0x2a8>
    395c:	ldr	r0, [fp, #-12]
    3960:	bl	1140 <MyGame_Example_Monster_testarrayofstring>
    3964:	str	r0, [fp, #-36]	; 0xffffffdc
    3968:	ldr	r3, [fp, #-36]	; 0xffffffdc
    396c:	cmp	r3, #0
    3970:	bne	3988 <verify_monster+0x328>
    3974:	movw	r0, #0
    3978:	movt	r0, #0
    397c:	bl	0 <puts>
    3980:	mvn	r3, #0
    3984:	b	3db8 <verify_monster+0x758>
    3988:	ldr	r0, [fp, #-36]	; 0xffffffdc
    398c:	bl	6f0 <flatbuffers_string_vec_len>
    3990:	mov	r3, r0
    3994:	cmp	r3, #2
    3998:	beq	39b0 <verify_monster+0x350>
    399c:	movw	r0, #0
    39a0:	movt	r0, #0
    39a4:	bl	0 <puts>
    39a8:	mvn	r3, #0
    39ac:	b	3db8 <verify_monster+0x758>
    39b0:	mov	r1, #0
    39b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    39b8:	bl	740 <flatbuffers_string_vec_at>
    39bc:	str	r0, [fp, #-40]	; 0xffffffd8
    39c0:	movw	r1, #0
    39c4:	movt	r1, #0
    39c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    39cc:	bl	0 <strcmp>
    39d0:	mov	r3, r0
    39d4:	cmp	r3, #0
    39d8:	beq	39f0 <verify_monster+0x390>
    39dc:	movw	r0, #0
    39e0:	movt	r0, #0
    39e4:	bl	0 <puts>
    39e8:	mvn	r3, #0
    39ec:	b	3db8 <verify_monster+0x758>
    39f0:	mov	r1, #1
    39f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    39f8:	bl	740 <flatbuffers_string_vec_at>
    39fc:	str	r0, [fp, #-40]	; 0xffffffd8
    3a00:	movw	r1, #0
    3a04:	movt	r1, #0
    3a08:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3a0c:	bl	0 <strcmp>
    3a10:	mov	r3, r0
    3a14:	cmp	r3, #0
    3a18:	beq	3a30 <verify_monster+0x3d0>
    3a1c:	movw	r0, #0
    3a20:	movt	r0, #0
    3a24:	bl	0 <puts>
    3a28:	mvn	r3, #0
    3a2c:	b	3db8 <verify_monster+0x758>
    3a30:	ldr	r0, [fp, #-12]
    3a34:	bl	1244 <MyGame_Example_Monster_test_type>
    3a38:	mov	r3, r0
    3a3c:	strb	r3, [fp, #-41]	; 0xffffffd7
    3a40:	ldrb	r3, [fp, #-41]	; 0xffffffd7
    3a44:	cmp	r3, #1
    3a48:	beq	3a60 <verify_monster+0x400>
    3a4c:	movw	r0, #0
    3a50:	movt	r0, #0
    3a54:	bl	0 <puts>
    3a58:	mvn	r3, #0
    3a5c:	b	3db8 <verify_monster+0x758>
    3a60:	ldr	r0, [fp, #-12]
    3a64:	bl	1338 <MyGame_Example_Monster_test>
    3a68:	str	r0, [fp, #-48]	; 0xffffffd0
    3a6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3a70:	cmp	r3, #0
    3a74:	bne	3a8c <verify_monster+0x42c>
    3a78:	movw	r0, #0
    3a7c:	movt	r0, #0
    3a80:	bl	0 <puts>
    3a84:	mvn	r3, #0
    3a88:	b	3db8 <verify_monster+0x758>
    3a8c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3a90:	bl	f1c <MyGame_Example_Monster_name>
    3a94:	mov	r3, r0
    3a98:	movw	r1, #0
    3a9c:	movt	r1, #0
    3aa0:	mov	r0, r3
    3aa4:	bl	0 <strcmp>
    3aa8:	mov	r3, r0
    3aac:	cmp	r3, #0
    3ab0:	beq	3ac8 <verify_monster+0x468>
    3ab4:	movw	r0, #0
    3ab8:	movt	r0, #0
    3abc:	bl	0 <puts>
    3ac0:	mvn	r3, #0
    3ac4:	b	3db8 <verify_monster+0x758>
    3ac8:	ldr	r0, [fp, #-12]
    3acc:	bl	1438 <MyGame_Example_Monster_test4>
    3ad0:	str	r0, [fp, #-52]	; 0xffffffcc
    3ad4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3ad8:	bl	a04 <MyGame_Example_Test_vec_len>
    3adc:	mov	r3, r0
    3ae0:	cmp	r3, #2
    3ae4:	beq	3b14 <verify_monster+0x4b4>
    3ae8:	movw	r0, #0
    3aec:	movt	r0, #0
    3af0:	bl	0 <puts>
    3af4:	mvn	r3, #0
    3af8:	b	3db8 <verify_monster+0x758>
    3afc:	nop	{0}
    3b00:	.word	0x00000000
    3b04:	.word	0x40080000
    3b08:	.word	0x3f800000
    3b0c:	.word	0x40000000
    3b10:	.word	0x40400000
    3b14:	mov	r1, #0
    3b18:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3b1c:	bl	990 <MyGame_Example_Test_vec_at>
    3b20:	str	r0, [fp, #-24]	; 0xffffffe8
    3b24:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3b28:	bl	a54 <MyGame_Example_Test_a>
    3b2c:	mov	r3, r0
    3b30:	cmp	r3, #10
    3b34:	beq	3b4c <verify_monster+0x4ec>
    3b38:	movw	r0, #0
    3b3c:	movt	r0, #0
    3b40:	bl	0 <puts>
    3b44:	mvn	r3, #0
    3b48:	b	3db8 <verify_monster+0x758>
    3b4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3b50:	bl	aa0 <MyGame_Example_Test_b>
    3b54:	mov	r3, r0
    3b58:	cmp	r3, #20
    3b5c:	beq	3b74 <verify_monster+0x514>
    3b60:	movw	r0, #0
    3b64:	movt	r0, #0
    3b68:	bl	0 <puts>
    3b6c:	mvn	r3, #0
    3b70:	b	3db8 <verify_monster+0x758>
    3b74:	mov	r1, #1
    3b78:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3b7c:	bl	990 <MyGame_Example_Test_vec_at>
    3b80:	str	r0, [fp, #-24]	; 0xffffffe8
    3b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3b88:	bl	a54 <MyGame_Example_Test_a>
    3b8c:	mov	r3, r0
    3b90:	cmp	r3, #30
    3b94:	beq	3bac <verify_monster+0x54c>
    3b98:	movw	r0, #0
    3b9c:	movt	r0, #0
    3ba0:	bl	0 <puts>
    3ba4:	mvn	r3, #0
    3ba8:	b	3db8 <verify_monster+0x758>
    3bac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3bb0:	bl	aa0 <MyGame_Example_Test_b>
    3bb4:	mov	r3, r0
    3bb8:	cmp	r3, #40	; 0x28
    3bbc:	beq	3bd4 <verify_monster+0x574>
    3bc0:	movw	r0, #0
    3bc4:	movt	r0, #0
    3bc8:	bl	0 <puts>
    3bcc:	mvn	r3, #0
    3bd0:	b	3db8 <verify_monster+0x758>
    3bd4:	ldr	r0, [fp, #-12]
    3bd8:	bl	153c <MyGame_Example_Monster_testhashs32_fnv1>
    3bdc:	mov	r2, r0
    3be0:	movw	r3, #51521	; 0xc941
    3be4:	movt	r3, #56697	; 0xdd79
    3be8:	cmp	r2, r3
    3bec:	beq	3c10 <verify_monster+0x5b0>
    3bf0:	movw	r3, #0
    3bf4:	movt	r3, #0
    3bf8:	mov	r2, #148	; 0x94
    3bfc:	movw	r1, #0
    3c00:	movt	r1, #0
    3c04:	movw	r0, #0
    3c08:	movt	r0, #0
    3c0c:	bl	0 <__assert_fail>
    3c10:	ldr	r0, [fp, #-12]
    3c14:	bl	1630 <MyGame_Example_Monster_testhashu32_fnv1>
    3c18:	mov	r2, r0
    3c1c:	movw	r3, #51521	; 0xc941
    3c20:	movt	r3, #56697	; 0xdd79
    3c24:	cmp	r2, r3
    3c28:	beq	3c4c <verify_monster+0x5ec>
    3c2c:	movw	r3, #0
    3c30:	movt	r3, #0
    3c34:	mov	r2, #149	; 0x95
    3c38:	movw	r1, #0
    3c3c:	movt	r1, #0
    3c40:	movw	r0, #0
    3c44:	movt	r0, #0
    3c48:	bl	0 <__assert_fail>
    3c4c:	ldr	r0, [fp, #-12]
    3c50:	bl	1724 <MyGame_Example_Monster_testhashs64_fnv1>
    3c54:	add	r3, pc, #372	; 0x174
    3c58:	ldrd	r2, [r3]
    3c5c:	cmp	r1, r3
    3c60:	cmpeq	r0, r2
    3c64:	beq	3c88 <verify_monster+0x628>
    3c68:	movw	r3, #0
    3c6c:	movt	r3, #0
    3c70:	mov	r2, #150	; 0x96
    3c74:	movw	r1, #0
    3c78:	movt	r1, #0
    3c7c:	movw	r0, #0
    3c80:	movt	r0, #0
    3c84:	bl	0 <__assert_fail>
    3c88:	ldr	r0, [fp, #-12]
    3c8c:	bl	1824 <MyGame_Example_Monster_testhashu64_fnv1>
    3c90:	add	r3, pc, #312	; 0x138
    3c94:	ldrd	r2, [r3]
    3c98:	cmp	r1, r3
    3c9c:	cmpeq	r0, r2
    3ca0:	beq	3cc4 <verify_monster+0x664>
    3ca4:	movw	r3, #0
    3ca8:	movt	r3, #0
    3cac:	mov	r2, #151	; 0x97
    3cb0:	movw	r1, #0
    3cb4:	movt	r1, #0
    3cb8:	movw	r0, #0
    3cbc:	movt	r0, #0
    3cc0:	bl	0 <__assert_fail>
    3cc4:	ldr	r0, [fp, #-12]
    3cc8:	bl	1924 <MyGame_Example_Monster_testhashs32_fnv1a>
    3ccc:	mov	r2, r0
    3cd0:	movw	r3, #42097	; 0xa471
    3cd4:	movt	r3, #36481	; 0x8e81
    3cd8:	cmp	r2, r3
    3cdc:	beq	3d00 <verify_monster+0x6a0>
    3ce0:	movw	r3, #0
    3ce4:	movt	r3, #0
    3ce8:	mov	r2, #152	; 0x98
    3cec:	movw	r1, #0
    3cf0:	movt	r1, #0
    3cf4:	movw	r0, #0
    3cf8:	movt	r0, #0
    3cfc:	bl	0 <__assert_fail>
    3d00:	ldr	r0, [fp, #-12]
    3d04:	bl	1a18 <MyGame_Example_Monster_testhashu32_fnv1a>
    3d08:	mov	r2, r0
    3d0c:	movw	r3, #42097	; 0xa471
    3d10:	movt	r3, #36481	; 0x8e81
    3d14:	cmp	r2, r3
    3d18:	beq	3d3c <verify_monster+0x6dc>
    3d1c:	movw	r3, #0
    3d20:	movt	r3, #0
    3d24:	mov	r2, #153	; 0x99
    3d28:	movw	r1, #0
    3d2c:	movt	r1, #0
    3d30:	movw	r0, #0
    3d34:	movt	r0, #0
    3d38:	bl	0 <__assert_fail>
    3d3c:	ldr	r0, [fp, #-12]
    3d40:	bl	1b0c <MyGame_Example_Monster_testhashs64_fnv1a>
    3d44:	add	r3, pc, #140	; 0x8c
    3d48:	ldrd	r2, [r3]
    3d4c:	cmp	r1, r3
    3d50:	cmpeq	r0, r2
    3d54:	beq	3d78 <verify_monster+0x718>
    3d58:	movw	r3, #0
    3d5c:	movt	r3, #0
    3d60:	mov	r2, #154	; 0x9a
    3d64:	movw	r1, #0
    3d68:	movt	r1, #0
    3d6c:	movw	r0, #0
    3d70:	movt	r0, #0
    3d74:	bl	0 <__assert_fail>
    3d78:	ldr	r0, [fp, #-12]
    3d7c:	bl	1c0c <MyGame_Example_Monster_testhashu64_fnv1a>
    3d80:	add	r3, pc, #80	; 0x50
    3d84:	ldrd	r2, [r3]
    3d88:	cmp	r1, r3
    3d8c:	cmpeq	r0, r2
    3d90:	beq	3db4 <verify_monster+0x754>
    3d94:	movw	r3, #0
    3d98:	movt	r3, #0
    3d9c:	mov	r2, #155	; 0x9b
    3da0:	movw	r1, #0
    3da4:	movt	r1, #0
    3da8:	movw	r0, #0
    3dac:	movt	r0, #0
    3db0:	bl	0 <__assert_fail>
    3db4:	mov	r3, #0
    3db8:	mov	r0, r3
    3dbc:	sub	sp, fp, #4
    3dc0:	ldr	fp, [sp]
    3dc4:	add	sp, sp, #4
    3dc8:	pop	{pc}		; (ldr pc, [sp], #4)
    3dcc:	nop	{0}
    3dd0:	.word	0xf27b9181
    3dd4:	.word	0x6e0f80cd
    3dd8:	.word	0xc767ddf1
    3ddc:	.word	0x43f948dc

00003de0 <main>:
    3de0:	str	fp, [sp, #-8]!
    3de4:	str	lr, [sp, #4]
    3de8:	add	fp, sp, #4
    3dec:	sub	sp, sp, #24
    3df0:	str	r0, [fp, #-24]	; 0xffffffe8
    3df4:	str	r1, [fp, #-28]	; 0xffffffe4
    3df8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3dfc:	cmp	r3, #1
    3e00:	beq	3e38 <main+0x58>
    3e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e08:	cmp	r3, #2
    3e0c:	beq	3e38 <main+0x58>
    3e10:	movw	r3, #0
    3e14:	movt	r3, #0
    3e18:	ldr	r3, [r3]
    3e1c:	mov	r2, #63	; 0x3f
    3e20:	mov	r1, #1
    3e24:	movw	r0, #0
    3e28:	movt	r0, #0
    3e2c:	bl	0 <fwrite>
    3e30:	mov	r0, #1
    3e34:	bl	0 <exit>
    3e38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e3c:	cmp	r3, #2
    3e40:	bne	3e58 <main+0x78>
    3e44:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3e48:	ldr	r2, [r3, #4]
    3e4c:	movw	r3, #0
    3e50:	movt	r3, #0
    3e54:	str	r2, [r3]
    3e58:	movw	r3, #0
    3e5c:	movt	r3, #0
    3e60:	ldr	r3, [r3]
    3e64:	sub	r2, fp, #20
    3e68:	mov	r1, #1024	; 0x400
    3e6c:	mov	r0, r3
    3e70:	bl	32a4 <readfile>
    3e74:	str	r0, [fp, #-12]
    3e78:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e7c:	add	r3, r3, #255	; 0xff
    3e80:	bic	r3, r3, #255	; 0xff
    3e84:	mov	r1, r3
    3e88:	mov	r0, #256	; 0x100
    3e8c:	bl	0 <__portable_aligned_alloc>
    3e90:	str	r0, [fp, #-16]
    3e94:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e98:	mov	r2, r3
    3e9c:	ldr	r1, [fp, #-12]
    3ea0:	ldr	r0, [fp, #-16]
    3ea4:	bl	0 <memcpy>
    3ea8:	ldr	r0, [fp, #-12]
    3eac:	bl	0 <free>
    3eb0:	ldr	r3, [fp, #-16]
    3eb4:	cmp	r3, #0
    3eb8:	bne	3eec <main+0x10c>
    3ebc:	movw	r3, #0
    3ec0:	movt	r3, #0
    3ec4:	ldr	r0, [r3]
    3ec8:	movw	r3, #0
    3ecc:	movt	r3, #0
    3ed0:	ldr	r3, [r3]
    3ed4:	mov	r2, r3
    3ed8:	movw	r1, #0
    3edc:	movt	r1, #0
    3ee0:	bl	0 <fprintf>
    3ee4:	mvn	r3, #0
    3ee8:	b	3fbc <main+0x1dc>
    3eec:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ef0:	movw	r3, #0
    3ef4:	movt	r3, #0
    3ef8:	ldr	r3, [r3]
    3efc:	ldr	r1, [fp, #-16]
    3f00:	movw	r0, #0
    3f04:	movt	r0, #0
    3f08:	bl	3474 <hexdump>
    3f0c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3f10:	movw	r2, #0
    3f14:	movt	r2, #0
    3f18:	mov	r1, r3
    3f1c:	ldr	r0, [fp, #-16]
    3f20:	bl	2e88 <MyGame_Example_Monster_verify_as_root_with_identifier>
    3f24:	mov	r3, r0
    3f28:	cmp	r3, #0
    3f2c:	beq	3f5c <main+0x17c>
    3f30:	movw	r3, #0
    3f34:	movt	r3, #0
    3f38:	ldr	r3, [r3]
    3f3c:	mov	r2, #38	; 0x26
    3f40:	mov	r1, #1
    3f44:	movw	r0, #0
    3f48:	movt	r0, #0
    3f4c:	bl	0 <fwrite>
    3f50:	mvn	r3, #0
    3f54:	str	r3, [fp, #-8]
    3f58:	b	3fb0 <main+0x1d0>
    3f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3f60:	mov	r1, r3
    3f64:	ldr	r0, [fp, #-16]
    3f68:	bl	2e3c <MyGame_Example_Monster_verify_as_root>
    3f6c:	mov	r3, r0
    3f70:	cmp	r3, #0
    3f74:	beq	3fa4 <main+0x1c4>
    3f78:	movw	r3, #0
    3f7c:	movt	r3, #0
    3f80:	ldr	r3, [r3]
    3f84:	mov	r2, #62	; 0x3e
    3f88:	mov	r1, #1
    3f8c:	movw	r0, #0
    3f90:	movt	r0, #0
    3f94:	bl	0 <fwrite>
    3f98:	mvn	r3, #0
    3f9c:	str	r3, [fp, #-8]
    3fa0:	b	3fb0 <main+0x1d0>
    3fa4:	ldr	r0, [fp, #-16]
    3fa8:	bl	3660 <verify_monster>
    3fac:	str	r0, [fp, #-8]
    3fb0:	ldr	r0, [fp, #-16]
    3fb4:	bl	0 <free>
    3fb8:	ldr	r3, [fp, #-8]
    3fbc:	mov	r0, r3
    3fc0:	sub	sp, fp, #4
    3fc4:	ldr	fp, [sp]
    3fc8:	add	sp, sp, #4
    3fcc:	pop	{pc}		; (ldr pc, [sp], #4)
