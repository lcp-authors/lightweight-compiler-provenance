
../compcert-repos/prog2/CMakeFiles/0.6.dir/Aula00_Conceitos_base/06.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #72	; 0x48
   c:	movw	r0, #0
  10:	str	r0, [fp, #-4]
  14:	str	r0, [fp, #-20]	; 0xffffffec
  18:	str	r0, [fp, #-24]	; 0xffffffe8
  1c:	str	r0, [fp, #-28]	; 0xffffffe4
  20:	movw	r0, #0
  24:	movt	r0, #0
  28:	bl	0 <printf>
  2c:	movw	lr, #1
  30:	str	r0, [fp, #-32]	; 0xffffffe0
  34:	mov	r0, lr
  38:	bl	0 <malloc>
  3c:	str	r0, [fp, #-12]
  40:	movw	r0, #1
  44:	bl	0 <malloc>
  48:	str	r0, [fp, #-16]
  4c:	movw	r0, #0
  50:	movt	r0, #0
  54:	sub	r1, fp, #5
  58:	bl	0 <__isoc99_scanf>
  5c:	cmp	r0, #1
  60:	bne	15c <main+0x15c>
  64:	ldrb	r0, [fp, #-5]
  68:	cmp	r0, #32
  6c:	beq	7c <main+0x7c>
  70:	ldrb	r0, [fp, #-5]
  74:	cmp	r0, #10
  78:	bne	110 <main+0x110>
  7c:	ldr	r0, [fp, #-16]
  80:	bl	0 <strlen>
  84:	ldr	lr, [fp, #-12]
  88:	str	r0, [sp, #36]	; 0x24
  8c:	mov	r0, lr
  90:	bl	0 <strlen>
  94:	ldr	lr, [sp, #36]	; 0x24
  98:	cmp	lr, r0
  9c:	bls	e8 <main+0xe8>
  a0:	ldr	r0, [fp, #-12]
  a4:	ldr	r1, [fp, #-16]
  a8:	str	r0, [sp, #32]
  ac:	mov	r0, r1
  b0:	bl	0 <strlen>
  b4:	mov	r1, r0
  b8:	ldr	lr, [sp, #32]
  bc:	str	r0, [sp, #28]
  c0:	mov	r0, lr
  c4:	ldr	r2, [sp, #28]
  c8:	str	r1, [sp, #24]
  cc:	mov	r1, r2
  d0:	bl	0 <realloc>
  d4:	str	r0, [fp, #-12]
  d8:	ldr	r0, [fp, #-12]
  dc:	ldr	r1, [fp, #-16]
  e0:	bl	0 <strcpy>
  e4:	str	r0, [sp, #20]
  e8:	ldr	r0, [fp, #-20]	; 0xffffffec
  ec:	add	r0, r0, #1
  f0:	str	r0, [fp, #-20]	; 0xffffffec
  f4:	movw	r0, #0
  f8:	str	r0, [fp, #-28]	; 0xffffffe4
  fc:	ldrb	r0, [fp, #-5]
 100:	cmp	r0, #10
 104:	bne	10c <main+0x10c>
 108:	b	15c <main+0x15c>
 10c:	b	158 <main+0x158>
 110:	ldr	r0, [fp, #-16]
 114:	ldr	r1, [fp, #-28]	; 0xffffffe4
 118:	add	r1, r1, #1
 11c:	mov	r2, r1
 120:	str	r2, [sp, #16]
 124:	bl	0 <realloc>
 128:	str	r0, [fp, #-16]
 12c:	ldrb	r0, [fp, #-5]
 130:	ldr	r1, [fp, #-16]
 134:	ldr	r2, [fp, #-28]	; 0xffffffe4
 138:	add	r1, r1, r2
 13c:	strb	r0, [r1]
 140:	ldr	r0, [fp, #-24]	; 0xffffffe8
 144:	add	r0, r0, #1
 148:	str	r0, [fp, #-24]	; 0xffffffe8
 14c:	ldr	r0, [fp, #-28]	; 0xffffffe4
 150:	add	r0, r0, #1
 154:	str	r0, [fp, #-28]	; 0xffffffe4
 158:	b	4c <main+0x4c>
 15c:	ldr	r1, [fp, #-20]	; 0xffffffec
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	bl	0 <printf>
 16c:	ldr	r1, [fp, #-12]
 170:	movw	lr, #0
 174:	movt	lr, #0
 178:	str	r0, [sp, #12]
 17c:	mov	r0, lr
 180:	bl	0 <printf>
 184:	ldr	r1, [fp, #-24]	; 0xffffffe8
 188:	vmov	s0, r1
 18c:	vcvt.f32.s32	s0, s0
 190:	ldr	r1, [fp, #-20]	; 0xffffffec
 194:	vmov	s2, r1
 198:	vcvt.f32.s32	s2, s2
 19c:	vdiv.f32	s0, s0, s2
 1a0:	vcvt.f64.f32	d16, s0
 1a4:	movw	r1, #0
 1a8:	movt	r1, #0
 1ac:	str	r0, [sp, #8]
 1b0:	mov	r0, r1
 1b4:	vmov	r2, r3, d16
 1b8:	bl	0 <printf>
 1bc:	movw	r1, #0
 1c0:	str	r0, [sp, #4]
 1c4:	mov	r0, r1
 1c8:	mov	sp, fp
 1cc:	pop	{fp, pc}
