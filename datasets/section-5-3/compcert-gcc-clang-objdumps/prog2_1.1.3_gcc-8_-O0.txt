
../compcert-repos/prog2/1.1.3:     file format elf32-littlearm


Disassembly of section .init:

00010598 <.init>:
   10598:	push	{r3, lr}
   1059c:	bl	10648 <_start@@Base+0x3c>
   105a0:	pop	{r3, pc}

Disassembly of section .plt:

000105a4 <printf@plt-0x14>:
   105a4:	push	{lr}		; (str lr, [sp, #-4]!)
   105a8:	ldr	lr, [pc, #4]	; 105b4 <printf@plt-0x4>
   105ac:	add	lr, pc, lr
   105b0:	ldr	pc, [lr, #8]!
   105b4:	andeq	r0, r1, ip, asr #20

000105b8 <printf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000105c4 <fopen@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2628]!	; 0xa44

000105d0 <__libc_start_main@plt>:
   105d0:	add	ip, pc, #0, 12
   105d4:	add	ip, ip, #16, 20	; 0x10000
   105d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000105dc <__gmon_start__@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2612]!	; 0xa34

000105e8 <fclose@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2604]!	; 0xa2c

000105f4 <abort@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2596]!	; 0xa24

00010600 <getc@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2588]!	; 0xa1c

Disassembly of section .text:

0001060c <_start@@Base>:
   1060c:	mov	fp, #0
   10610:	mov	lr, #0
   10614:	pop	{r1}		; (ldr r1, [sp], #4)
   10618:	mov	r2, sp
   1061c:	push	{r2}		; (str r2, [sp, #-4]!)
   10620:	push	{r0}		; (str r0, [sp, #-4]!)
   10624:	ldr	ip, [pc, #16]	; 1063c <_start@@Base+0x30>
   10628:	push	{ip}		; (str ip, [sp, #-4]!)
   1062c:	ldr	r0, [pc, #12]	; 10640 <_start@@Base+0x34>
   10630:	ldr	r3, [pc, #12]	; 10644 <_start@@Base+0x38>
   10634:	bl	105d0 <__libc_start_main@plt>
   10638:	bl	105f4 <abort@plt>
   1063c:	andeq	r0, r1, ip, ror #19
   10640:	andeq	r0, r1, r0, lsl #15
   10644:	andeq	r0, r1, ip, lsl #19
   10648:	ldr	r3, [pc, #20]	; 10664 <_start@@Base+0x58>
   1064c:	ldr	r2, [pc, #20]	; 10668 <_start@@Base+0x5c>
   10650:	add	r3, pc, r3
   10654:	ldr	r2, [r3, r2]
   10658:	cmp	r2, #0
   1065c:	bxeq	lr
   10660:	b	105dc <__gmon_start__@plt>
   10664:	andeq	r0, r1, r8, lsr #19
   10668:	andeq	r0, r0, r8, lsr #32
   1066c:	ldr	r0, [pc, #24]	; 1068c <_start@@Base+0x80>
   10670:	ldr	r3, [pc, #24]	; 10690 <_start@@Base+0x84>
   10674:	cmp	r3, r0
   10678:	bxeq	lr
   1067c:	ldr	r3, [pc, #16]	; 10694 <_start@@Base+0x88>
   10680:	cmp	r3, #0
   10684:	bxeq	lr
   10688:	bx	r3
   1068c:	andeq	r1, r2, r4, lsr r0
   10690:	andeq	r1, r2, r4, lsr r0
   10694:	andeq	r0, r0, r0
   10698:	ldr	r0, [pc, #36]	; 106c4 <_start@@Base+0xb8>
   1069c:	ldr	r1, [pc, #36]	; 106c8 <_start@@Base+0xbc>
   106a0:	sub	r1, r1, r0
   106a4:	asr	r1, r1, #2
   106a8:	add	r1, r1, r1, lsr #31
   106ac:	asrs	r1, r1, #1
   106b0:	bxeq	lr
   106b4:	ldr	r3, [pc, #16]	; 106cc <_start@@Base+0xc0>
   106b8:	cmp	r3, #0
   106bc:	bxeq	lr
   106c0:	bx	r3
   106c4:	andeq	r1, r2, r4, lsr r0
   106c8:	andeq	r1, r2, r4, lsr r0
   106cc:	andeq	r0, r0, r0
   106d0:	push	{r4, lr}
   106d4:	ldr	r4, [pc, #24]	; 106f4 <_start@@Base+0xe8>
   106d8:	ldrb	r3, [r4]
   106dc:	cmp	r3, #0
   106e0:	popne	{r4, pc}
   106e4:	bl	1066c <_start@@Base+0x60>
   106e8:	mov	r3, #1
   106ec:	strb	r3, [r4]
   106f0:	pop	{r4, pc}
   106f4:	andeq	r1, r2, r4, lsr r0
   106f8:	b	10698 <_start@@Base+0x8c>

000106fc <in_array@@Base>:
   106fc:	push	{fp}		; (str fp, [sp, #-4]!)
   10700:	add	fp, sp, #0
   10704:	sub	sp, sp, #28
   10708:	str	r0, [fp, #-16]
   1070c:	str	r1, [fp, #-20]	; 0xffffffec
   10710:	str	r2, [fp, #-24]	; 0xffffffe8
   10714:	mov	r3, #0
   10718:	str	r3, [fp, #-8]
   1071c:	mov	r3, #0
   10720:	str	r3, [fp, #-8]
   10724:	b	1075c <in_array@@Base+0x60>
   10728:	ldr	r3, [fp, #-8]
   1072c:	lsl	r3, r3, #2
   10730:	ldr	r2, [fp, #-20]	; 0xffffffec
   10734:	add	r3, r2, r3
   10738:	ldr	r3, [r3]
   1073c:	ldr	r2, [fp, #-16]
   10740:	cmp	r2, r3
   10744:	bne	10750 <in_array@@Base+0x54>
   10748:	mov	r3, #1
   1074c:	b	10770 <in_array@@Base+0x74>
   10750:	ldr	r3, [fp, #-8]
   10754:	add	r3, r3, #1
   10758:	str	r3, [fp, #-8]
   1075c:	ldr	r2, [fp, #-8]
   10760:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10764:	cmp	r2, r3
   10768:	ble	10728 <in_array@@Base+0x2c>
   1076c:	mov	r3, #0
   10770:	mov	r0, r3
   10774:	add	sp, fp, #0
   10778:	pop	{fp}		; (ldr fp, [sp], #4)
   1077c:	bx	lr

00010780 <main@@Base>:
   10780:	str	fp, [sp, #-8]!
   10784:	str	lr, [sp, #4]
   10788:	add	fp, sp, #4
   1078c:	sub	sp, sp, #56	; 0x38
   10790:	movw	r3, #2640	; 0xa50
   10794:	movt	r3, #1
   10798:	sub	r1, fp, #28
   1079c:	ldrd	r2, [r3]
   107a0:	strd	r2, [r1]
   107a4:	movw	r3, #2648	; 0xa58
   107a8:	movt	r3, #1
   107ac:	sub	r1, fp, #36	; 0x24
   107b0:	ldrd	r2, [r3]
   107b4:	strd	r2, [r1]
   107b8:	movw	r3, #2656	; 0xa60
   107bc:	movt	r3, #1
   107c0:	sub	r1, fp, #44	; 0x2c
   107c4:	ldrd	r2, [r3]
   107c8:	strd	r2, [r1]
   107cc:	movw	r1, #2556	; 0x9fc
   107d0:	movt	r1, #1
   107d4:	movw	r0, #2560	; 0xa00
   107d8:	movt	r0, #1
   107dc:	bl	105c4 <fopen@plt>
   107e0:	str	r0, [fp, #-16]
   107e4:	mov	r3, #0
   107e8:	str	r3, [fp, #-8]
   107ec:	sub	r1, fp, #56	; 0x38
   107f0:	mov	r2, #0
   107f4:	mov	r3, #0
   107f8:	strd	r2, [r1]
   107fc:	mov	r3, r2
   10800:	str	r3, [r1, #8]
   10804:	movw	r3, #2664	; 0xa68
   10808:	movt	r3, #1
   1080c:	sub	r2, fp, #60	; 0x3c
   10810:	ldrh	r1, [r3]
   10814:	strh	r1, [r2]
   10818:	ldrb	r3, [r3, #2]
   1081c:	strb	r3, [r2, #2]
   10820:	b	108d4 <main@@Base+0x154>
   10824:	ldr	r0, [fp, #-16]
   10828:	bl	10600 <getc@plt>
   1082c:	str	r0, [fp, #-8]
   10830:	ldr	r3, [fp, #-8]
   10834:	cmp	r3, #195	; 0xc3
   10838:	bne	108d4 <main@@Base+0x154>
   1083c:	ldr	r0, [fp, #-16]
   10840:	bl	10600 <getc@plt>
   10844:	str	r0, [fp, #-8]
   10848:	sub	r3, fp, #28
   1084c:	mov	r2, #2
   10850:	mov	r1, r3
   10854:	ldr	r0, [fp, #-8]
   10858:	bl	106fc <in_array@@Base>
   1085c:	mov	r3, r0
   10860:	cmp	r3, #0
   10864:	beq	10878 <main@@Base+0xf8>
   10868:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1086c:	add	r3, r3, #1
   10870:	str	r3, [fp, #-56]	; 0xffffffc8
   10874:	b	108d4 <main@@Base+0x154>
   10878:	sub	r3, fp, #36	; 0x24
   1087c:	mov	r2, #2
   10880:	mov	r1, r3
   10884:	ldr	r0, [fp, #-8]
   10888:	bl	106fc <in_array@@Base>
   1088c:	mov	r3, r0
   10890:	cmp	r3, #0
   10894:	beq	108a8 <main@@Base+0x128>
   10898:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1089c:	add	r3, r3, #1
   108a0:	str	r3, [fp, #-52]	; 0xffffffcc
   108a4:	b	108d4 <main@@Base+0x154>
   108a8:	sub	r3, fp, #44	; 0x2c
   108ac:	mov	r2, #2
   108b0:	mov	r1, r3
   108b4:	ldr	r0, [fp, #-8]
   108b8:	bl	106fc <in_array@@Base>
   108bc:	mov	r3, r0
   108c0:	cmp	r3, #0
   108c4:	beq	108d4 <main@@Base+0x154>
   108c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   108cc:	add	r3, r3, #1
   108d0:	str	r3, [fp, #-48]	; 0xffffffd0
   108d4:	ldr	r3, [fp, #-8]
   108d8:	cmn	r3, #1
   108dc:	bne	10824 <main@@Base+0xa4>
   108e0:	ldr	r3, [fp, #-12]
   108e4:	str	r3, [fp, #-20]	; 0xffffffec
   108e8:	ldr	r0, [fp, #-16]
   108ec:	bl	105e8 <fclose@plt>
   108f0:	mov	r3, #0
   108f4:	str	r3, [fp, #-12]
   108f8:	b	10940 <main@@Base+0x1c0>
   108fc:	sub	r2, fp, #60	; 0x3c
   10900:	ldr	r3, [fp, #-12]
   10904:	add	r3, r2, r3
   10908:	ldrb	r3, [r3]
   1090c:	mov	r1, r3
   10910:	ldr	r3, [fp, #-12]
   10914:	lsl	r3, r3, #2
   10918:	sub	r2, fp, #4
   1091c:	add	r3, r2, r3
   10920:	ldr	r3, [r3, #-52]	; 0xffffffcc
   10924:	mov	r2, r3
   10928:	movw	r0, #2588	; 0xa1c
   1092c:	movt	r0, #1
   10930:	bl	105b8 <printf@plt>
   10934:	ldr	r3, [fp, #-12]
   10938:	add	r3, r3, #1
   1093c:	str	r3, [fp, #-12]
   10940:	ldr	r3, [fp, #-12]
   10944:	cmp	r3, #1
   10948:	ble	108fc <main@@Base+0x17c>
   1094c:	sub	r2, fp, #60	; 0x3c
   10950:	ldr	r3, [fp, #-12]
   10954:	add	r3, r2, r3
   10958:	ldrb	r3, [r3]
   1095c:	mov	r1, r3
   10960:	ldr	r3, [fp, #-48]	; 0xffffffd0
   10964:	mov	r2, r3
   10968:	movw	r0, #2612	; 0xa34
   1096c:	movt	r0, #1
   10970:	bl	105b8 <printf@plt>
   10974:	mov	r3, #0
   10978:	mov	r0, r3
   1097c:	sub	sp, fp, #4
   10980:	ldr	fp, [sp]
   10984:	add	sp, sp, #4
   10988:	pop	{pc}		; (ldr pc, [sp], #4)

0001098c <__libc_csu_init@@Base>:
   1098c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10990:	mov	r7, r0
   10994:	ldr	r6, [pc, #72]	; 109e4 <__libc_csu_init@@Base+0x58>
   10998:	ldr	r5, [pc, #72]	; 109e8 <__libc_csu_init@@Base+0x5c>
   1099c:	add	r6, pc, r6
   109a0:	add	r5, pc, r5
   109a4:	sub	r6, r6, r5
   109a8:	mov	r8, r1
   109ac:	mov	r9, r2
   109b0:	bl	10598 <printf@plt-0x20>
   109b4:	asrs	r6, r6, #2
   109b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109bc:	mov	r4, #0
   109c0:	add	r4, r4, #1
   109c4:	ldr	r3, [r5], #4
   109c8:	mov	r2, r9
   109cc:	mov	r1, r8
   109d0:	mov	r0, r7
   109d4:	blx	r3
   109d8:	cmp	r6, r4
   109dc:	bne	109c0 <__libc_csu_init@@Base+0x34>
   109e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109e4:	andeq	r0, r1, r0, ror r5
   109e8:	andeq	r0, r1, r8, ror #10

000109ec <__libc_csu_fini@@Base>:
   109ec:	bx	lr

Disassembly of section .fini:

000109f0 <.fini>:
   109f0:	push	{r3, lr}
   109f4:	pop	{r3, pc}
