
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #632	; 0x278
       c:	str	r0, [fp, #-624]	; 0xfffffd90
      10:	str	r1, [fp, #-628]	; 0xfffffd8c
      14:	str	r2, [fp, #-632]	; 0xfffffd88
      18:	str	r3, [fp, #-636]	; 0xfffffd84
      1c:	sub	r2, fp, #580	; 0x244
      20:	sub	r3, fp, #584	; 0x248
      24:	mov	r1, r3
      28:	ldr	r0, [fp, #-624]	; 0xfffffd90
      2c:	bl	0 <coda_cursor_get_array_dim>
      30:	mov	r3, r0
      34:	cmp	r3, #0
      38:	beq	44 <read_array+0x44>
      3c:	mvn	r3, #0
      40:	b	3f0 <read_array+0x3f0>
      44:	ldr	r2, [fp, #-624]	; 0xfffffd90
      48:	sub	r3, fp, #548	; 0x224
      4c:	mov	r1, r2
      50:	mov	r2, #520	; 0x208
      54:	mov	r0, r3
      58:	bl	0 <memcpy>
      5c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
      60:	cmp	r3, #1
      64:	ble	74 <read_array+0x74>
      68:	ldr	r3, [fp, #4]
      6c:	cmp	r3, #1
      70:	beq	190 <read_array+0x190>
      74:	mov	r3, #1
      78:	str	r3, [fp, #-8]
      7c:	mov	r3, #0
      80:	str	r3, [fp, #-12]
      84:	b	b4 <read_array+0xb4>
      88:	ldr	r3, [fp, #-12]
      8c:	lsl	r3, r3, #2
      90:	sub	r2, fp, #4
      94:	add	r3, r2, r3
      98:	ldr	r2, [r3, #-576]	; 0xfffffdc0
      9c:	ldr	r3, [fp, #-8]
      a0:	mul	r3, r2, r3
      a4:	str	r3, [fp, #-8]
      a8:	ldr	r3, [fp, #-12]
      ac:	add	r3, r3, #1
      b0:	str	r3, [fp, #-12]
      b4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
      b8:	ldr	r2, [fp, #-12]
      bc:	cmp	r2, r3
      c0:	blt	88 <read_array+0x88>
      c4:	ldr	r3, [fp, #-8]
      c8:	cmp	r3, #0
      cc:	ble	3ec <read_array+0x3ec>
      d0:	sub	r3, fp, #548	; 0x224
      d4:	mov	r1, #0
      d8:	mov	r0, r3
      dc:	bl	0 <coda_cursor_goto_array_element_by_index>
      e0:	mov	r3, r0
      e4:	cmp	r3, #0
      e8:	beq	f4 <read_array+0xf4>
      ec:	mvn	r3, #0
      f0:	b	3f0 <read_array+0x3f0>
      f4:	mov	r3, #0
      f8:	str	r3, [fp, #-12]
      fc:	b	17c <read_array+0x17c>
     100:	ldr	r3, [fp, #-12]
     104:	ldr	r2, [fp, #-636]	; 0xfffffd84
     108:	mul	r3, r2, r3
     10c:	mov	r2, r3
     110:	ldr	r3, [fp, #-632]	; 0xfffffd88
     114:	add	r1, r3, r2
     118:	sub	r2, fp, #548	; 0x224
     11c:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     120:	mov	r0, r2
     124:	blx	r3
     128:	mov	r3, r0
     12c:	cmp	r3, #0
     130:	beq	13c <read_array+0x13c>
     134:	mvn	r3, #0
     138:	b	3f0 <read_array+0x3f0>
     13c:	ldr	r3, [fp, #-8]
     140:	sub	r2, r3, #1
     144:	ldr	r3, [fp, #-12]
     148:	cmp	r2, r3
     14c:	ble	170 <read_array+0x170>
     150:	sub	r3, fp, #548	; 0x224
     154:	mov	r0, r3
     158:	bl	0 <coda_cursor_goto_next_array_element>
     15c:	mov	r3, r0
     160:	cmp	r3, #0
     164:	beq	170 <read_array+0x170>
     168:	mvn	r3, #0
     16c:	b	3f0 <read_array+0x3f0>
     170:	ldr	r3, [fp, #-12]
     174:	add	r3, r3, #1
     178:	str	r3, [fp, #-12]
     17c:	ldr	r2, [fp, #-12]
     180:	ldr	r3, [fp, #-8]
     184:	cmp	r2, r3
     188:	blt	100 <read_array+0x100>
     18c:	b	3ec <read_array+0x3ec>
     190:	mov	r3, #1
     194:	str	r3, [fp, #-620]	; 0xfffffd94
     198:	mov	r3, #0
     19c:	str	r3, [fp, #-12]
     1a0:	b	1f4 <read_array+0x1f4>
     1a4:	ldr	r3, [fp, #-12]
     1a8:	add	r1, r3, #1
     1ac:	ldr	r3, [fp, #-12]
     1b0:	lsl	r3, r3, #2
     1b4:	sub	r2, fp, #4
     1b8:	add	r3, r2, r3
     1bc:	ldr	r2, [r3, #-616]	; 0xfffffd98
     1c0:	ldr	r3, [fp, #-12]
     1c4:	lsl	r3, r3, #2
     1c8:	sub	r0, fp, #4
     1cc:	add	r3, r0, r3
     1d0:	ldr	r3, [r3, #-576]	; 0xfffffdc0
     1d4:	mul	r2, r3, r2
     1d8:	lsl	r3, r1, #2
     1dc:	sub	r1, fp, #4
     1e0:	add	r3, r1, r3
     1e4:	str	r2, [r3, #-616]	; 0xfffffd98
     1e8:	ldr	r3, [fp, #-12]
     1ec:	add	r3, r3, #1
     1f0:	str	r3, [fp, #-12]
     1f4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     1f8:	ldr	r2, [fp, #-12]
     1fc:	cmp	r2, r3
     200:	blt	1a4 <read_array+0x1a4>
     204:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     208:	sub	r3, r3, #1
     20c:	lsl	r3, r3, #2
     210:	sub	r2, fp, #4
     214:	add	r3, r2, r3
     218:	ldr	r3, [r3, #-616]	; 0xfffffd98
     21c:	str	r3, [fp, #-24]	; 0xffffffe8
     220:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     224:	lsl	r3, r3, #2
     228:	sub	r2, fp, #4
     22c:	add	r3, r2, r3
     230:	ldr	r3, [r3, #-616]	; 0xfffffd98
     234:	str	r3, [fp, #-8]
     238:	ldr	r3, [fp, #-8]
     23c:	cmp	r3, #0
     240:	ble	3ec <read_array+0x3ec>
     244:	mov	r3, #0
     248:	str	r3, [fp, #-16]
     24c:	mov	r3, #0
     250:	str	r3, [fp, #-20]	; 0xffffffec
     254:	sub	r3, fp, #548	; 0x224
     258:	mov	r1, #0
     25c:	mov	r0, r3
     260:	bl	0 <coda_cursor_goto_array_element_by_index>
     264:	mov	r3, r0
     268:	cmp	r3, #0
     26c:	beq	278 <read_array+0x278>
     270:	mvn	r3, #0
     274:	b	3f0 <read_array+0x3f0>
     278:	ldr	r3, [fp, #-20]	; 0xffffffec
     27c:	ldr	r2, [fp, #-636]	; 0xfffffd84
     280:	mul	r3, r2, r3
     284:	mov	r2, r3
     288:	ldr	r3, [fp, #-632]	; 0xfffffd88
     28c:	add	r1, r3, r2
     290:	sub	r2, fp, #548	; 0x224
     294:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     298:	mov	r0, r2
     29c:	blx	r3
     2a0:	mov	r3, r0
     2a4:	cmp	r3, #0
     2a8:	beq	2b4 <read_array+0x2b4>
     2ac:	mvn	r3, #0
     2b0:	b	3f0 <read_array+0x3f0>
     2b4:	ldr	r3, [fp, #-16]
     2b8:	add	r3, r3, #1
     2bc:	str	r3, [fp, #-16]
     2c0:	ldr	r2, [fp, #-16]
     2c4:	ldr	r3, [fp, #-8]
     2c8:	cmp	r2, r3
     2cc:	bge	2f0 <read_array+0x2f0>
     2d0:	sub	r3, fp, #548	; 0x224
     2d4:	mov	r0, r3
     2d8:	bl	0 <coda_cursor_goto_next_array_element>
     2dc:	mov	r3, r0
     2e0:	cmp	r3, #0
     2e4:	beq	2f0 <read_array+0x2f0>
     2e8:	mvn	r3, #0
     2ec:	b	3f0 <read_array+0x3f0>
     2f0:	ldr	r2, [fp, #-20]	; 0xffffffec
     2f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     2f8:	add	r3, r2, r3
     2fc:	str	r3, [fp, #-20]	; 0xffffffec
     300:	ldr	r2, [fp, #-20]	; 0xffffffec
     304:	ldr	r3, [fp, #-8]
     308:	cmp	r2, r3
     30c:	blt	278 <read_array+0x278>
     310:	ldr	r2, [fp, #-16]
     314:	ldr	r3, [fp, #-8]
     318:	cmp	r2, r3
     31c:	beq	3e8 <read_array+0x3e8>
     320:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     324:	sub	r3, r3, #2
     328:	lsl	r3, r3, #2
     32c:	sub	r2, fp, #4
     330:	add	r3, r2, r3
     334:	ldr	r2, [r3, #-616]	; 0xfffffd98
     338:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     33c:	lsl	r3, r3, #2
     340:	sub	r1, fp, #4
     344:	add	r3, r1, r3
     348:	ldr	r3, [r3, #-616]	; 0xfffffd98
     34c:	sub	r3, r2, r3
     350:	ldr	r2, [fp, #-20]	; 0xffffffec
     354:	add	r3, r2, r3
     358:	str	r3, [fp, #-20]	; 0xffffffec
     35c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     360:	sub	r3, r3, #3
     364:	str	r3, [fp, #-12]
     368:	b	3b4 <read_array+0x3b4>
     36c:	ldr	r3, [fp, #-12]
     370:	lsl	r3, r3, #2
     374:	sub	r2, fp, #4
     378:	add	r3, r2, r3
     37c:	ldr	r2, [r3, #-616]	; 0xfffffd98
     380:	ldr	r3, [fp, #-12]
     384:	add	r3, r3, #2
     388:	lsl	r3, r3, #2
     38c:	sub	r1, fp, #4
     390:	add	r3, r1, r3
     394:	ldr	r3, [r3, #-616]	; 0xfffffd98
     398:	sub	r3, r2, r3
     39c:	ldr	r2, [fp, #-20]	; 0xffffffec
     3a0:	add	r3, r2, r3
     3a4:	str	r3, [fp, #-20]	; 0xffffffec
     3a8:	ldr	r3, [fp, #-12]
     3ac:	sub	r3, r3, #1
     3b0:	str	r3, [fp, #-12]
     3b4:	ldr	r3, [fp, #-12]
     3b8:	cmp	r3, #0
     3bc:	blt	278 <read_array+0x278>
     3c0:	ldr	r3, [fp, #-12]
     3c4:	add	r3, r3, #2
     3c8:	lsl	r3, r3, #2
     3cc:	sub	r2, fp, #4
     3d0:	add	r3, r2, r3
     3d4:	ldr	r2, [r3, #-616]	; 0xfffffd98
     3d8:	ldr	r3, [fp, #-20]	; 0xffffffec
     3dc:	cmp	r2, r3
     3e0:	ble	36c <read_array+0x36c>
     3e4:	b	278 <read_array+0x278>
     3e8:	nop			; (mov r0, r0)
     3ec:	mov	r3, #0
     3f0:	mov	r0, r3
     3f4:	sub	sp, fp, #4
     3f8:	pop	{fp, pc}

000003fc <read_partial_array>:
     3fc:	push	{fp, lr}
     400:	add	fp, sp, #4
     404:	sub	sp, sp, #544	; 0x220
     408:	str	r0, [fp, #-536]	; 0xfffffde8
     40c:	str	r1, [fp, #-540]	; 0xfffffde4
     410:	str	r2, [fp, #-544]	; 0xfffffde0
     414:	str	r3, [fp, #-548]	; 0xfffffddc
     418:	ldr	r2, [fp, #-536]	; 0xfffffde8
     41c:	sub	r3, fp, #532	; 0x214
     420:	mov	r1, r2
     424:	mov	r2, #520	; 0x208
     428:	mov	r0, r3
     42c:	bl	0 <memcpy>
     430:	ldr	r3, [fp, #-548]	; 0xfffffddc
     434:	cmp	r3, #0
     438:	ble	4f8 <read_partial_array+0xfc>
     43c:	sub	r3, fp, #532	; 0x214
     440:	ldr	r1, [fp, #-544]	; 0xfffffde0
     444:	mov	r0, r3
     448:	bl	0 <coda_cursor_goto_array_element_by_index>
     44c:	mov	r3, r0
     450:	cmp	r3, #0
     454:	beq	460 <read_partial_array+0x64>
     458:	mvn	r3, #0
     45c:	b	4fc <read_partial_array+0x100>
     460:	mov	r3, #0
     464:	str	r3, [fp, #-8]
     468:	b	4e8 <read_partial_array+0xec>
     46c:	ldr	r3, [fp, #-8]
     470:	ldr	r2, [fp, #8]
     474:	mul	r3, r2, r3
     478:	mov	r2, r3
     47c:	ldr	r3, [fp, #4]
     480:	add	r1, r3, r2
     484:	sub	r2, fp, #532	; 0x214
     488:	ldr	r3, [fp, #-540]	; 0xfffffde4
     48c:	mov	r0, r2
     490:	blx	r3
     494:	mov	r3, r0
     498:	cmp	r3, #0
     49c:	beq	4a8 <read_partial_array+0xac>
     4a0:	mvn	r3, #0
     4a4:	b	4fc <read_partial_array+0x100>
     4a8:	ldr	r3, [fp, #-548]	; 0xfffffddc
     4ac:	sub	r2, r3, #1
     4b0:	ldr	r3, [fp, #-8]
     4b4:	cmp	r2, r3
     4b8:	ble	4dc <read_partial_array+0xe0>
     4bc:	sub	r3, fp, #532	; 0x214
     4c0:	mov	r0, r3
     4c4:	bl	0 <coda_cursor_goto_next_array_element>
     4c8:	mov	r3, r0
     4cc:	cmp	r3, #0
     4d0:	beq	4dc <read_partial_array+0xe0>
     4d4:	mvn	r3, #0
     4d8:	b	4fc <read_partial_array+0x100>
     4dc:	ldr	r3, [fp, #-8]
     4e0:	add	r3, r3, #1
     4e4:	str	r3, [fp, #-8]
     4e8:	ldr	r2, [fp, #-8]
     4ec:	ldr	r3, [fp, #-548]	; 0xfffffddc
     4f0:	cmp	r2, r3
     4f4:	blt	46c <read_partial_array+0x70>
     4f8:	mov	r3, #0
     4fc:	mov	r0, r3
     500:	sub	sp, fp, #4
     504:	pop	{fp, pc}

00000508 <transpose_array>:
     508:	push	{fp, lr}
     50c:	add	fp, sp, #4
     510:	sub	sp, sp, #208	; 0xd0
     514:	str	r0, [fp, #-192]	; 0xffffff40
     518:	str	r1, [fp, #-196]	; 0xffffff3c
     51c:	str	r2, [fp, #-200]	; 0xffffff38
     520:	mov	r3, #0
     524:	str	r3, [fp, #-12]
     528:	sub	r2, fp, #72	; 0x48
     52c:	sub	r3, fp, #76	; 0x4c
     530:	mov	r1, r3
     534:	ldr	r0, [fp, #-192]	; 0xffffff40
     538:	bl	0 <coda_cursor_get_array_dim>
     53c:	mov	r3, r0
     540:	cmp	r3, #0
     544:	beq	550 <transpose_array+0x48>
     548:	mvn	r3, #0
     54c:	b	db0 <transpose_array+0x8a8>
     550:	ldr	r3, [fp, #-76]	; 0xffffffb4
     554:	cmp	r3, #1
     558:	bgt	564 <transpose_array+0x5c>
     55c:	mov	r3, #0
     560:	b	db0 <transpose_array+0x8a8>
     564:	ldr	r3, [fp, #-196]	; 0xffffff3c
     568:	str	r3, [fp, #-36]	; 0xffffffdc
     56c:	mov	r3, #1
     570:	str	r3, [fp, #-8]
     574:	mov	r3, #0
     578:	str	r3, [fp, #-16]
     57c:	b	5f8 <transpose_array+0xf0>
     580:	ldr	r3, [fp, #-16]
     584:	lsl	r3, r3, #2
     588:	sub	r2, fp, #4
     58c:	add	r3, r2, r3
     590:	ldr	r2, [r3, #-68]	; 0xffffffbc
     594:	ldr	r3, [fp, #-8]
     598:	mul	r3, r2, r3
     59c:	str	r3, [fp, #-8]
     5a0:	ldr	r3, [fp, #-16]
     5a4:	lsl	r3, r3, #2
     5a8:	sub	r2, fp, #4
     5ac:	add	r3, r2, r3
     5b0:	mov	r2, #0
     5b4:	str	r2, [r3, #-144]	; 0xffffff70
     5b8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     5bc:	sub	r2, r3, #1
     5c0:	ldr	r3, [fp, #-16]
     5c4:	sub	r3, r2, r3
     5c8:	lsl	r3, r3, #2
     5cc:	sub	r2, fp, #4
     5d0:	add	r3, r2, r3
     5d4:	ldr	r2, [r3, #-68]	; 0xffffffbc
     5d8:	ldr	r3, [fp, #-16]
     5dc:	lsl	r3, r3, #2
     5e0:	sub	r1, fp, #4
     5e4:	add	r3, r1, r3
     5e8:	str	r2, [r3, #-180]	; 0xffffff4c
     5ec:	ldr	r3, [fp, #-16]
     5f0:	add	r3, r3, #1
     5f4:	str	r3, [fp, #-16]
     5f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     5fc:	ldr	r2, [fp, #-16]
     600:	cmp	r2, r3
     604:	blt	580 <transpose_array+0x78>
     608:	ldr	r3, [fp, #-8]
     60c:	cmp	r3, #1
     610:	bgt	61c <transpose_array+0x114>
     614:	mov	r3, #0
     618:	b	db0 <transpose_array+0x8a8>
     61c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     620:	lsl	r3, r3, #2
     624:	sub	r2, fp, #4
     628:	add	r3, r2, r3
     62c:	mov	r2, #1
     630:	str	r2, [r3, #-108]	; 0xffffff94
     634:	ldr	r3, [fp, #-76]	; 0xffffffb4
     638:	lsl	r3, r3, #2
     63c:	sub	r2, fp, #4
     640:	add	r3, r2, r3
     644:	mov	r2, #1
     648:	str	r2, [r3, #-180]	; 0xffffff4c
     64c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     650:	str	r3, [fp, #-16]
     654:	b	6a8 <transpose_array+0x1a0>
     658:	ldr	r3, [fp, #-16]
     65c:	sub	r1, r3, #1
     660:	ldr	r3, [fp, #-16]
     664:	lsl	r3, r3, #2
     668:	sub	r2, fp, #4
     66c:	add	r3, r2, r3
     670:	ldr	r2, [r3, #-108]	; 0xffffff94
     674:	ldr	r3, [fp, #-16]
     678:	lsl	r3, r3, #2
     67c:	sub	r0, fp, #4
     680:	add	r3, r0, r3
     684:	ldr	r3, [r3, #-180]	; 0xffffff4c
     688:	mul	r2, r3, r2
     68c:	lsl	r3, r1, #2
     690:	sub	r1, fp, #4
     694:	add	r3, r1, r3
     698:	str	r2, [r3, #-108]	; 0xffffff94
     69c:	ldr	r3, [fp, #-16]
     6a0:	sub	r3, r3, #1
     6a4:	str	r3, [fp, #-16]
     6a8:	ldr	r3, [fp, #-16]
     6ac:	cmp	r3, #0
     6b0:	bgt	658 <transpose_array+0x150>
     6b4:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6b8:	lsl	r3, r3, #2
     6bc:	sub	r2, fp, #4
     6c0:	add	r3, r2, r3
     6c4:	mov	r2, #0
     6c8:	str	r2, [r3, #-180]	; 0xffffff4c
     6cc:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6d0:	lsl	r3, r3, #2
     6d4:	sub	r2, fp, #4
     6d8:	add	r3, r2, r3
     6dc:	mov	r2, #0
     6e0:	str	r2, [r3, #-144]	; 0xffffff70
     6e4:	ldr	r3, [fp, #-8]
     6e8:	ldr	r2, [fp, #-200]	; 0xffffff38
     6ec:	mul	r3, r2, r3
     6f0:	mov	r0, r3
     6f4:	bl	0 <malloc>
     6f8:	mov	r3, r0
     6fc:	str	r3, [fp, #-40]	; 0xffffffd8
     700:	ldr	r3, [fp, #-40]	; 0xffffffd8
     704:	cmp	r3, #0
     708:	bne	738 <transpose_array+0x230>
     70c:	ldr	r3, [fp, #-8]
     710:	ldr	r2, [fp, #-200]	; 0xffffff38
     714:	mul	r2, r2, r3
     718:	mov	r3, #93	; 0x5d
     71c:	str	r3, [sp]
     720:	ldr	r3, [pc, #1684]	; dbc <transpose_array+0x8b4>
     724:	ldr	r1, [pc, #1684]	; dc0 <transpose_array+0x8b8>
     728:	mvn	r0, #0
     72c:	bl	0 <coda_set_error>
     730:	mvn	r3, #0
     734:	b	db0 <transpose_array+0x8a8>
     738:	ldr	r3, [fp, #-200]	; 0xffffff38
     73c:	sub	r3, r3, #1
     740:	cmp	r3, #7
     744:	ldrls	pc, [pc, r3, lsl #2]
     748:	b	d74 <transpose_array+0x86c>
     74c:	.word	0x0000076c
     750:	.word	0x000008e8
     754:	.word	0x00000d74
     758:	.word	0x00000a6c
     75c:	.word	0x00000d74
     760:	.word	0x00000d74
     764:	.word	0x00000d74
     768:	.word	0x00000bf0
     76c:	mov	r3, #0
     770:	str	r3, [fp, #-16]
     774:	b	8d4 <transpose_array+0x3cc>
     778:	mov	r3, #0
     77c:	str	r3, [fp, #-20]	; 0xffffffec
     780:	ldr	r3, [fp, #-12]
     784:	ldr	r2, [fp, #-40]	; 0xffffffd8
     788:	add	r3, r2, r3
     78c:	ldr	r2, [fp, #-16]
     790:	ldr	r1, [fp, #-36]	; 0xffffffdc
     794:	add	r2, r1, r2
     798:	ldrb	r2, [r2]
     79c:	strb	r2, [r3]
     7a0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7a4:	lsl	r3, r3, #2
     7a8:	sub	r2, fp, #4
     7ac:	add	r3, r2, r3
     7b0:	ldr	r3, [r3, #-108]	; 0xffffff94
     7b4:	ldr	r2, [fp, #-12]
     7b8:	add	r3, r2, r3
     7bc:	str	r3, [fp, #-12]
     7c0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7c4:	lsl	r3, r3, #2
     7c8:	sub	r2, fp, #4
     7cc:	add	r3, r2, r3
     7d0:	ldr	r3, [r3, #-144]	; 0xffffff70
     7d4:	add	r2, r3, #1
     7d8:	ldr	r3, [fp, #-20]	; 0xffffffec
     7dc:	lsl	r3, r3, #2
     7e0:	sub	r1, fp, #4
     7e4:	add	r3, r1, r3
     7e8:	str	r2, [r3, #-144]	; 0xffffff70
     7ec:	b	898 <transpose_array+0x390>
     7f0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7f4:	lsl	r3, r3, #2
     7f8:	sub	r2, fp, #4
     7fc:	add	r3, r2, r3
     800:	mov	r2, #0
     804:	str	r2, [r3, #-144]	; 0xffffff70
     808:	ldr	r3, [fp, #-20]	; 0xffffffec
     80c:	lsl	r3, r3, #2
     810:	sub	r2, fp, #4
     814:	add	r3, r2, r3
     818:	ldr	r2, [r3, #-108]	; 0xffffff94
     81c:	ldr	r3, [fp, #-20]	; 0xffffffec
     820:	lsl	r3, r3, #2
     824:	sub	r1, fp, #4
     828:	add	r3, r1, r3
     82c:	ldr	r3, [r3, #-180]	; 0xffffff4c
     830:	mul	r3, r3, r2
     834:	ldr	r2, [fp, #-12]
     838:	sub	r3, r2, r3
     83c:	str	r3, [fp, #-12]
     840:	ldr	r3, [fp, #-20]	; 0xffffffec
     844:	add	r3, r3, #1
     848:	str	r3, [fp, #-20]	; 0xffffffec
     84c:	ldr	r3, [fp, #-20]	; 0xffffffec
     850:	lsl	r3, r3, #2
     854:	sub	r2, fp, #4
     858:	add	r3, r2, r3
     85c:	ldr	r3, [r3, #-108]	; 0xffffff94
     860:	ldr	r2, [fp, #-12]
     864:	add	r3, r2, r3
     868:	str	r3, [fp, #-12]
     86c:	ldr	r3, [fp, #-20]	; 0xffffffec
     870:	lsl	r3, r3, #2
     874:	sub	r2, fp, #4
     878:	add	r3, r2, r3
     87c:	ldr	r3, [r3, #-144]	; 0xffffff70
     880:	add	r2, r3, #1
     884:	ldr	r3, [fp, #-20]	; 0xffffffec
     888:	lsl	r3, r3, #2
     88c:	sub	r1, fp, #4
     890:	add	r3, r1, r3
     894:	str	r2, [r3, #-144]	; 0xffffff70
     898:	ldr	r3, [fp, #-20]	; 0xffffffec
     89c:	lsl	r3, r3, #2
     8a0:	sub	r2, fp, #4
     8a4:	add	r3, r2, r3
     8a8:	ldr	r2, [r3, #-144]	; 0xffffff70
     8ac:	ldr	r3, [fp, #-20]	; 0xffffffec
     8b0:	lsl	r3, r3, #2
     8b4:	sub	r1, fp, #4
     8b8:	add	r3, r1, r3
     8bc:	ldr	r3, [r3, #-180]	; 0xffffff4c
     8c0:	cmp	r2, r3
     8c4:	beq	7f0 <transpose_array+0x2e8>
     8c8:	ldr	r3, [fp, #-16]
     8cc:	add	r3, r3, #1
     8d0:	str	r3, [fp, #-16]
     8d4:	ldr	r2, [fp, #-16]
     8d8:	ldr	r3, [fp, #-8]
     8dc:	cmp	r2, r3
     8e0:	blt	778 <transpose_array+0x270>
     8e4:	b	d88 <transpose_array+0x880>
     8e8:	mov	r3, #0
     8ec:	str	r3, [fp, #-16]
     8f0:	b	a58 <transpose_array+0x550>
     8f4:	mov	r3, #0
     8f8:	str	r3, [fp, #-24]	; 0xffffffe8
     8fc:	ldr	r3, [fp, #-12]
     900:	lsl	r3, r3, #1
     904:	ldr	r2, [fp, #-40]	; 0xffffffd8
     908:	add	r3, r2, r3
     90c:	ldr	r2, [fp, #-16]
     910:	lsl	r2, r2, #1
     914:	ldr	r1, [fp, #-36]	; 0xffffffdc
     918:	add	r2, r1, r2
     91c:	ldrh	r2, [r2]
     920:	strh	r2, [r3]
     924:	ldr	r3, [fp, #-24]	; 0xffffffe8
     928:	lsl	r3, r3, #2
     92c:	sub	r2, fp, #4
     930:	add	r3, r2, r3
     934:	ldr	r3, [r3, #-108]	; 0xffffff94
     938:	ldr	r2, [fp, #-12]
     93c:	add	r3, r2, r3
     940:	str	r3, [fp, #-12]
     944:	ldr	r3, [fp, #-24]	; 0xffffffe8
     948:	lsl	r3, r3, #2
     94c:	sub	r2, fp, #4
     950:	add	r3, r2, r3
     954:	ldr	r3, [r3, #-144]	; 0xffffff70
     958:	add	r2, r3, #1
     95c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     960:	lsl	r3, r3, #2
     964:	sub	r1, fp, #4
     968:	add	r3, r1, r3
     96c:	str	r2, [r3, #-144]	; 0xffffff70
     970:	b	a1c <transpose_array+0x514>
     974:	ldr	r3, [fp, #-24]	; 0xffffffe8
     978:	lsl	r3, r3, #2
     97c:	sub	r2, fp, #4
     980:	add	r3, r2, r3
     984:	mov	r2, #0
     988:	str	r2, [r3, #-144]	; 0xffffff70
     98c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     990:	lsl	r3, r3, #2
     994:	sub	r2, fp, #4
     998:	add	r3, r2, r3
     99c:	ldr	r2, [r3, #-108]	; 0xffffff94
     9a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9a4:	lsl	r3, r3, #2
     9a8:	sub	r1, fp, #4
     9ac:	add	r3, r1, r3
     9b0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     9b4:	mul	r3, r3, r2
     9b8:	ldr	r2, [fp, #-12]
     9bc:	sub	r3, r2, r3
     9c0:	str	r3, [fp, #-12]
     9c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9c8:	add	r3, r3, #1
     9cc:	str	r3, [fp, #-24]	; 0xffffffe8
     9d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9d4:	lsl	r3, r3, #2
     9d8:	sub	r2, fp, #4
     9dc:	add	r3, r2, r3
     9e0:	ldr	r3, [r3, #-108]	; 0xffffff94
     9e4:	ldr	r2, [fp, #-12]
     9e8:	add	r3, r2, r3
     9ec:	str	r3, [fp, #-12]
     9f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9f4:	lsl	r3, r3, #2
     9f8:	sub	r2, fp, #4
     9fc:	add	r3, r2, r3
     a00:	ldr	r3, [r3, #-144]	; 0xffffff70
     a04:	add	r2, r3, #1
     a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a0c:	lsl	r3, r3, #2
     a10:	sub	r1, fp, #4
     a14:	add	r3, r1, r3
     a18:	str	r2, [r3, #-144]	; 0xffffff70
     a1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a20:	lsl	r3, r3, #2
     a24:	sub	r2, fp, #4
     a28:	add	r3, r2, r3
     a2c:	ldr	r2, [r3, #-144]	; 0xffffff70
     a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a34:	lsl	r3, r3, #2
     a38:	sub	r1, fp, #4
     a3c:	add	r3, r1, r3
     a40:	ldr	r3, [r3, #-180]	; 0xffffff4c
     a44:	cmp	r2, r3
     a48:	beq	974 <transpose_array+0x46c>
     a4c:	ldr	r3, [fp, #-16]
     a50:	add	r3, r3, #1
     a54:	str	r3, [fp, #-16]
     a58:	ldr	r2, [fp, #-16]
     a5c:	ldr	r3, [fp, #-8]
     a60:	cmp	r2, r3
     a64:	blt	8f4 <transpose_array+0x3ec>
     a68:	b	d88 <transpose_array+0x880>
     a6c:	mov	r3, #0
     a70:	str	r3, [fp, #-16]
     a74:	b	bdc <transpose_array+0x6d4>
     a78:	mov	r3, #0
     a7c:	str	r3, [fp, #-28]	; 0xffffffe4
     a80:	ldr	r3, [fp, #-12]
     a84:	lsl	r3, r3, #2
     a88:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a8c:	add	r3, r2, r3
     a90:	ldr	r2, [fp, #-16]
     a94:	lsl	r2, r2, #2
     a98:	ldr	r1, [fp, #-36]	; 0xffffffdc
     a9c:	add	r2, r1, r2
     aa0:	ldr	r2, [r2]
     aa4:	str	r2, [r3]
     aa8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     aac:	lsl	r3, r3, #2
     ab0:	sub	r2, fp, #4
     ab4:	add	r3, r2, r3
     ab8:	ldr	r3, [r3, #-108]	; 0xffffff94
     abc:	ldr	r2, [fp, #-12]
     ac0:	add	r3, r2, r3
     ac4:	str	r3, [fp, #-12]
     ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     acc:	lsl	r3, r3, #2
     ad0:	sub	r2, fp, #4
     ad4:	add	r3, r2, r3
     ad8:	ldr	r3, [r3, #-144]	; 0xffffff70
     adc:	add	r2, r3, #1
     ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ae4:	lsl	r3, r3, #2
     ae8:	sub	r1, fp, #4
     aec:	add	r3, r1, r3
     af0:	str	r2, [r3, #-144]	; 0xffffff70
     af4:	b	ba0 <transpose_array+0x698>
     af8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     afc:	lsl	r3, r3, #2
     b00:	sub	r2, fp, #4
     b04:	add	r3, r2, r3
     b08:	mov	r2, #0
     b0c:	str	r2, [r3, #-144]	; 0xffffff70
     b10:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b14:	lsl	r3, r3, #2
     b18:	sub	r2, fp, #4
     b1c:	add	r3, r2, r3
     b20:	ldr	r2, [r3, #-108]	; 0xffffff94
     b24:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b28:	lsl	r3, r3, #2
     b2c:	sub	r1, fp, #4
     b30:	add	r3, r1, r3
     b34:	ldr	r3, [r3, #-180]	; 0xffffff4c
     b38:	mul	r3, r3, r2
     b3c:	ldr	r2, [fp, #-12]
     b40:	sub	r3, r2, r3
     b44:	str	r3, [fp, #-12]
     b48:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b4c:	add	r3, r3, #1
     b50:	str	r3, [fp, #-28]	; 0xffffffe4
     b54:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b58:	lsl	r3, r3, #2
     b5c:	sub	r2, fp, #4
     b60:	add	r3, r2, r3
     b64:	ldr	r3, [r3, #-108]	; 0xffffff94
     b68:	ldr	r2, [fp, #-12]
     b6c:	add	r3, r2, r3
     b70:	str	r3, [fp, #-12]
     b74:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b78:	lsl	r3, r3, #2
     b7c:	sub	r2, fp, #4
     b80:	add	r3, r2, r3
     b84:	ldr	r3, [r3, #-144]	; 0xffffff70
     b88:	add	r2, r3, #1
     b8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b90:	lsl	r3, r3, #2
     b94:	sub	r1, fp, #4
     b98:	add	r3, r1, r3
     b9c:	str	r2, [r3, #-144]	; 0xffffff70
     ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ba4:	lsl	r3, r3, #2
     ba8:	sub	r2, fp, #4
     bac:	add	r3, r2, r3
     bb0:	ldr	r2, [r3, #-144]	; 0xffffff70
     bb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     bb8:	lsl	r3, r3, #2
     bbc:	sub	r1, fp, #4
     bc0:	add	r3, r1, r3
     bc4:	ldr	r3, [r3, #-180]	; 0xffffff4c
     bc8:	cmp	r2, r3
     bcc:	beq	af8 <transpose_array+0x5f0>
     bd0:	ldr	r3, [fp, #-16]
     bd4:	add	r3, r3, #1
     bd8:	str	r3, [fp, #-16]
     bdc:	ldr	r2, [fp, #-16]
     be0:	ldr	r3, [fp, #-8]
     be4:	cmp	r2, r3
     be8:	blt	a78 <transpose_array+0x570>
     bec:	b	d88 <transpose_array+0x880>
     bf0:	mov	r3, #0
     bf4:	str	r3, [fp, #-16]
     bf8:	b	d60 <transpose_array+0x858>
     bfc:	mov	r3, #0
     c00:	str	r3, [fp, #-32]	; 0xffffffe0
     c04:	ldr	r3, [fp, #-12]
     c08:	lsl	r3, r3, #3
     c0c:	ldr	r2, [fp, #-40]	; 0xffffffd8
     c10:	add	r1, r2, r3
     c14:	ldr	r3, [fp, #-16]
     c18:	lsl	r3, r3, #3
     c1c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c20:	add	r3, r2, r3
     c24:	ldrd	r2, [r3]
     c28:	strd	r2, [r1]
     c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c30:	lsl	r3, r3, #2
     c34:	sub	r2, fp, #4
     c38:	add	r3, r2, r3
     c3c:	ldr	r3, [r3, #-108]	; 0xffffff94
     c40:	ldr	r2, [fp, #-12]
     c44:	add	r3, r2, r3
     c48:	str	r3, [fp, #-12]
     c4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c50:	lsl	r3, r3, #2
     c54:	sub	r2, fp, #4
     c58:	add	r3, r2, r3
     c5c:	ldr	r3, [r3, #-144]	; 0xffffff70
     c60:	add	r2, r3, #1
     c64:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c68:	lsl	r3, r3, #2
     c6c:	sub	r1, fp, #4
     c70:	add	r3, r1, r3
     c74:	str	r2, [r3, #-144]	; 0xffffff70
     c78:	b	d24 <transpose_array+0x81c>
     c7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c80:	lsl	r3, r3, #2
     c84:	sub	r2, fp, #4
     c88:	add	r3, r2, r3
     c8c:	mov	r2, #0
     c90:	str	r2, [r3, #-144]	; 0xffffff70
     c94:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c98:	lsl	r3, r3, #2
     c9c:	sub	r2, fp, #4
     ca0:	add	r3, r2, r3
     ca4:	ldr	r2, [r3, #-108]	; 0xffffff94
     ca8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cac:	lsl	r3, r3, #2
     cb0:	sub	r1, fp, #4
     cb4:	add	r3, r1, r3
     cb8:	ldr	r3, [r3, #-180]	; 0xffffff4c
     cbc:	mul	r3, r3, r2
     cc0:	ldr	r2, [fp, #-12]
     cc4:	sub	r3, r2, r3
     cc8:	str	r3, [fp, #-12]
     ccc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cd0:	add	r3, r3, #1
     cd4:	str	r3, [fp, #-32]	; 0xffffffe0
     cd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cdc:	lsl	r3, r3, #2
     ce0:	sub	r2, fp, #4
     ce4:	add	r3, r2, r3
     ce8:	ldr	r3, [r3, #-108]	; 0xffffff94
     cec:	ldr	r2, [fp, #-12]
     cf0:	add	r3, r2, r3
     cf4:	str	r3, [fp, #-12]
     cf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cfc:	lsl	r3, r3, #2
     d00:	sub	r2, fp, #4
     d04:	add	r3, r2, r3
     d08:	ldr	r3, [r3, #-144]	; 0xffffff70
     d0c:	add	r2, r3, #1
     d10:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d14:	lsl	r3, r3, #2
     d18:	sub	r1, fp, #4
     d1c:	add	r3, r1, r3
     d20:	str	r2, [r3, #-144]	; 0xffffff70
     d24:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d28:	lsl	r3, r3, #2
     d2c:	sub	r2, fp, #4
     d30:	add	r3, r2, r3
     d34:	ldr	r2, [r3, #-144]	; 0xffffff70
     d38:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d3c:	lsl	r3, r3, #2
     d40:	sub	r1, fp, #4
     d44:	add	r3, r1, r3
     d48:	ldr	r3, [r3, #-180]	; 0xffffff4c
     d4c:	cmp	r2, r3
     d50:	beq	c7c <transpose_array+0x774>
     d54:	ldr	r3, [fp, #-16]
     d58:	add	r3, r3, #1
     d5c:	str	r3, [fp, #-16]
     d60:	ldr	r2, [fp, #-16]
     d64:	ldr	r3, [fp, #-8]
     d68:	cmp	r2, r3
     d6c:	blt	bfc <transpose_array+0x6f4>
     d70:	b	d88 <transpose_array+0x880>
     d74:	ldr	r3, [pc, #72]	; dc4 <transpose_array+0x8bc>
     d78:	mov	r2, #172	; 0xac
     d7c:	ldr	r1, [pc, #56]	; dbc <transpose_array+0x8b4>
     d80:	ldr	r0, [pc, #64]	; dc8 <transpose_array+0x8c0>
     d84:	bl	0 <__assert_fail>
     d88:	ldr	r3, [fp, #-8]
     d8c:	ldr	r2, [fp, #-200]	; 0xffffff38
     d90:	mul	r3, r2, r3
     d94:	mov	r2, r3
     d98:	ldr	r1, [fp, #-40]	; 0xffffffd8
     d9c:	ldr	r0, [fp, #-196]	; 0xffffff3c
     da0:	bl	0 <memcpy>
     da4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     da8:	bl	0 <free>
     dac:	mov	r3, #0
     db0:	mov	r0, r3
     db4:	sub	sp, fp, #4
     db8:	pop	{fp, pc}
     dbc:	.word	0x00000000
     dc0:	.word	0x00000054
     dc4:	.word	0x000002fc
     dc8:	.word	0x0000008c

00000dcc <coda_mem_cursor_update_offset>:
     dcc:	push	{fp}		; (str fp, [sp, #-4]!)
     dd0:	add	fp, sp, #0
     dd4:	sub	sp, sp, #12
     dd8:	str	r0, [fp, #-8]
     ddc:	ldr	r1, [fp, #-8]
     de0:	ldr	r1, [r1, #4]
     de4:	sub	r1, r1, #1
     de8:	ldr	r0, [fp, #-8]
     dec:	lsl	r1, r1, #4
     df0:	add	r1, r0, r1
     df4:	ldr	r1, [r1, #8]
     df8:	ldr	r1, [r1, #8]
     dfc:	cmp	r1, #2
     e00:	bne	e50 <coda_mem_cursor_update_offset+0x84>
     e04:	ldr	r1, [fp, #-8]
     e08:	ldr	r1, [r1, #4]
     e0c:	sub	ip, r1, #1
     e10:	ldr	r1, [fp, #-8]
     e14:	ldr	r1, [r1, #4]
     e18:	sub	r1, r1, #1
     e1c:	ldr	r0, [fp, #-8]
     e20:	lsl	r1, r1, #4
     e24:	add	r1, r0, r1
     e28:	ldr	r1, [r1, #8]
     e2c:	ldrd	r0, [r1, #24]
     e30:	lsl	r3, r1, #3
     e34:	orr	r3, r3, r0, lsr #29
     e38:	lsl	r2, r0, #3
     e3c:	ldr	r0, [fp, #-8]
     e40:	add	r1, ip, #1
     e44:	lsl	r1, r1, #4
     e48:	add	r1, r0, r1
     e4c:	strd	r2, [r1]
     e50:	nop			; (mov r0, r0)
     e54:	add	sp, fp, #0
     e58:	pop	{fp}		; (ldr fp, [sp], #4)
     e5c:	bx	lr

00000e60 <coda_mem_cursor_goto_record_field_by_index>:
     e60:	push	{r4, fp, lr}
     e64:	add	fp, sp, #8
     e68:	sub	sp, sp, #20
     e6c:	str	r0, [fp, #-24]	; 0xffffffe8
     e70:	str	r1, [fp, #-28]	; 0xffffffe4
     e74:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e78:	ldr	r3, [r3, #4]
     e7c:	sub	r3, r3, #1
     e80:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e84:	lsl	r3, r3, #4
     e88:	add	r3, r2, r3
     e8c:	ldr	r3, [r3, #8]
     e90:	str	r3, [fp, #-16]
     e94:	ldr	r3, [fp, #-16]
     e98:	ldr	r3, [r3, #8]
     e9c:	cmp	r3, #0
     ea0:	bne	fd4 <coda_mem_cursor_goto_record_field_by_index+0x174>
     ea4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ea8:	cmp	r3, #0
     eac:	blt	ec4 <coda_mem_cursor_goto_record_field_by_index+0x64>
     eb0:	ldr	r3, [fp, #-16]
     eb4:	ldr	r2, [r3, #16]
     eb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ebc:	cmp	r2, r3
     ec0:	bgt	ee4 <coda_mem_cursor_goto_record_field_by_index+0x84>
     ec4:	ldr	r3, [fp, #-16]
     ec8:	ldr	r3, [r3, #16]
     ecc:	ldr	r2, [fp, #-28]	; 0xffffffe4
     ed0:	ldr	r1, [pc, #316]	; 1014 <coda_mem_cursor_goto_record_field_by_index+0x1b4>
     ed4:	mvn	r0, #100	; 0x64
     ed8:	bl	0 <coda_set_error>
     edc:	mvn	r3, #0
     ee0:	b	1008 <coda_mem_cursor_goto_record_field_by_index+0x1a8>
     ee4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ee8:	ldr	r3, [r3, #4]
     eec:	add	r2, r3, #1
     ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ef4:	str	r2, [r3, #4]
     ef8:	ldr	r3, [fp, #-16]
     efc:	ldr	r2, [r3, #20]
     f00:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f04:	lsl	r3, r3, #2
     f08:	add	r3, r2, r3
     f0c:	ldr	r3, [r3]
     f10:	cmp	r3, #0
     f14:	beq	f50 <coda_mem_cursor_goto_record_field_by_index+0xf0>
     f18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f1c:	ldr	r3, [r3, #4]
     f20:	sub	r3, r3, #1
     f24:	ldr	r2, [fp, #-16]
     f28:	ldr	r1, [r2, #20]
     f2c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     f30:	lsl	r2, r2, #2
     f34:	add	r2, r1, r2
     f38:	ldr	r2, [r2]
     f3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     f40:	lsl	r3, r3, #4
     f44:	add	r3, r1, r3
     f48:	str	r2, [r3, #8]
     f4c:	b	f84 <coda_mem_cursor_goto_record_field_by_index+0x124>
     f50:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f54:	ldr	r3, [r3, #4]
     f58:	sub	r4, r3, #1
     f5c:	ldr	r3, [fp, #-16]
     f60:	ldr	r3, [r3, #4]
     f64:	ldr	r3, [r3]
     f68:	mov	r0, r3
     f6c:	bl	0 <coda_no_data_singleton>
     f70:	mov	r1, r0
     f74:	ldr	r2, [fp, #-24]	; 0xffffffe8
     f78:	lsl	r3, r4, #4
     f7c:	add	r3, r2, r3
     f80:	str	r1, [r3, #8]
     f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f88:	ldr	r3, [r3, #4]
     f8c:	sub	r3, r3, #1
     f90:	ldr	r2, [fp, #-24]	; 0xffffffe8
     f94:	lsl	r3, r3, #4
     f98:	add	r3, r2, r3
     f9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     fa0:	str	r2, [r3, #12]
     fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fa8:	ldr	r3, [r3, #4]
     fac:	sub	r3, r3, #1
     fb0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fb4:	add	r3, r3, #1
     fb8:	lsl	r3, r3, #4
     fbc:	add	r1, r2, r3
     fc0:	mvn	r2, #0
     fc4:	mvn	r3, #0
     fc8:	strd	r2, [r1]
     fcc:	mov	r3, #0
     fd0:	b	1008 <coda_mem_cursor_goto_record_field_by_index+0x1a8>
     fd4:	ldr	r3, [fp, #-16]
     fd8:	ldr	r3, [r3, #8]
     fdc:	cmp	r3, #2
     fe0:	beq	ff8 <coda_mem_cursor_goto_record_field_by_index+0x198>
     fe4:	ldr	r3, [pc, #44]	; 1018 <coda_mem_cursor_goto_record_field_by_index+0x1b8>
     fe8:	mov	r2, #79	; 0x4f
     fec:	ldr	r1, [pc, #40]	; 101c <coda_mem_cursor_goto_record_field_by_index+0x1bc>
     ff0:	ldr	r0, [pc, #40]	; 1020 <coda_mem_cursor_goto_record_field_by_index+0x1c0>
     ff4:	bl	0 <__assert_fail>
     ff8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     ffc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1000:	bl	0 <coda_ascbin_cursor_goto_record_field_by_index>
    1004:	mov	r3, r0
    1008:	mov	r0, r3
    100c:	sub	sp, fp, #8
    1010:	pop	{r4, fp, pc}
    1014:	.word	0x00000090
    1018:	.word	0x0000030c
    101c:	.word	0x000000c0
    1020:	.word	0x00000110

00001024 <coda_mem_cursor_goto_next_record_field>:
    1024:	push	{r4, fp, lr}
    1028:	add	fp, sp, #8
    102c:	sub	sp, sp, #20
    1030:	str	r0, [fp, #-24]	; 0xffffffe8
    1034:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1038:	ldr	r3, [r3, #4]
    103c:	sub	r3, r3, #2
    1040:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1044:	lsl	r3, r3, #4
    1048:	add	r3, r2, r3
    104c:	ldr	r3, [r3, #8]
    1050:	str	r3, [fp, #-16]
    1054:	ldr	r3, [fp, #-16]
    1058:	ldr	r3, [r3, #8]
    105c:	cmp	r3, #0
    1060:	bne	11a4 <coda_mem_cursor_goto_next_record_field+0x180>
    1064:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1068:	ldr	r3, [r3, #4]
    106c:	sub	r3, r3, #1
    1070:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1074:	lsl	r3, r3, #4
    1078:	add	r3, r2, r3
    107c:	ldr	r3, [r3, #12]
    1080:	add	r3, r3, #1
    1084:	str	r3, [fp, #-20]	; 0xffffffec
    1088:	ldr	r3, [fp, #-20]	; 0xffffffec
    108c:	cmp	r3, #0
    1090:	blt	10a8 <coda_mem_cursor_goto_next_record_field+0x84>
    1094:	ldr	r3, [fp, #-16]
    1098:	ldr	r2, [r3, #16]
    109c:	ldr	r3, [fp, #-20]	; 0xffffffec
    10a0:	cmp	r2, r3
    10a4:	bgt	10c8 <coda_mem_cursor_goto_next_record_field+0xa4>
    10a8:	ldr	r3, [fp, #-16]
    10ac:	ldr	r3, [r3, #16]
    10b0:	ldr	r2, [fp, #-20]	; 0xffffffec
    10b4:	ldr	r1, [pc, #292]	; 11e0 <coda_mem_cursor_goto_next_record_field+0x1bc>
    10b8:	mvn	r0, #100	; 0x64
    10bc:	bl	0 <coda_set_error>
    10c0:	mvn	r3, #0
    10c4:	b	11d4 <coda_mem_cursor_goto_next_record_field+0x1b0>
    10c8:	ldr	r3, [fp, #-16]
    10cc:	ldr	r2, [r3, #20]
    10d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    10d4:	lsl	r3, r3, #2
    10d8:	add	r3, r2, r3
    10dc:	ldr	r3, [r3]
    10e0:	cmp	r3, #0
    10e4:	beq	1120 <coda_mem_cursor_goto_next_record_field+0xfc>
    10e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10ec:	ldr	r3, [r3, #4]
    10f0:	sub	r3, r3, #1
    10f4:	ldr	r2, [fp, #-16]
    10f8:	ldr	r1, [r2, #20]
    10fc:	ldr	r2, [fp, #-20]	; 0xffffffec
    1100:	lsl	r2, r2, #2
    1104:	add	r2, r1, r2
    1108:	ldr	r2, [r2]
    110c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1110:	lsl	r3, r3, #4
    1114:	add	r3, r1, r3
    1118:	str	r2, [r3, #8]
    111c:	b	1154 <coda_mem_cursor_goto_next_record_field+0x130>
    1120:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1124:	ldr	r3, [r3, #4]
    1128:	sub	r4, r3, #1
    112c:	ldr	r3, [fp, #-16]
    1130:	ldr	r3, [r3, #4]
    1134:	ldr	r3, [r3]
    1138:	mov	r0, r3
    113c:	bl	0 <coda_no_data_singleton>
    1140:	mov	r1, r0
    1144:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1148:	lsl	r3, r4, #4
    114c:	add	r3, r2, r3
    1150:	str	r1, [r3, #8]
    1154:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1158:	ldr	r3, [r3, #4]
    115c:	sub	r3, r3, #1
    1160:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1164:	lsl	r3, r3, #4
    1168:	add	r3, r2, r3
    116c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1170:	str	r2, [r3, #12]
    1174:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1178:	ldr	r3, [r3, #4]
    117c:	sub	r3, r3, #1
    1180:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1184:	add	r3, r3, #1
    1188:	lsl	r3, r3, #4
    118c:	add	r1, r2, r3
    1190:	mvn	r2, #0
    1194:	mvn	r3, #0
    1198:	strd	r2, [r1]
    119c:	mov	r3, #0
    11a0:	b	11d4 <coda_mem_cursor_goto_next_record_field+0x1b0>
    11a4:	ldr	r3, [fp, #-16]
    11a8:	ldr	r3, [r3, #8]
    11ac:	cmp	r3, #2
    11b0:	beq	11c8 <coda_mem_cursor_goto_next_record_field+0x1a4>
    11b4:	ldr	r3, [pc, #40]	; 11e4 <coda_mem_cursor_goto_next_record_field+0x1c0>
    11b8:	mov	r2, #111	; 0x6f
    11bc:	ldr	r1, [pc, #36]	; 11e8 <coda_mem_cursor_goto_next_record_field+0x1c4>
    11c0:	ldr	r0, [pc, #36]	; 11ec <coda_mem_cursor_goto_next_record_field+0x1c8>
    11c4:	bl	0 <__assert_fail>
    11c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11cc:	bl	0 <coda_ascbin_cursor_goto_next_record_field>
    11d0:	mov	r3, r0
    11d4:	mov	r0, r3
    11d8:	sub	sp, fp, #8
    11dc:	pop	{r4, fp, pc}
    11e0:	.word	0x00000090
    11e4:	.word	0x00000338
    11e8:	.word	0x000000c0
    11ec:	.word	0x00000110

000011f0 <coda_mem_cursor_goto_available_union_field>:
    11f0:	push	{fp, lr}
    11f4:	add	fp, sp, #4
    11f8:	sub	sp, sp, #16
    11fc:	str	r0, [fp, #-16]
    1200:	ldr	r3, [fp, #-16]
    1204:	ldr	r3, [r3, #4]
    1208:	sub	r3, r3, #1
    120c:	ldr	r2, [fp, #-16]
    1210:	lsl	r3, r3, #4
    1214:	add	r3, r2, r3
    1218:	ldr	r3, [r3, #8]
    121c:	str	r3, [fp, #-8]
    1220:	ldr	r3, [fp, #-8]
    1224:	ldr	r3, [r3, #8]
    1228:	cmp	r3, #0
    122c:	bne	12d8 <coda_mem_cursor_goto_available_union_field+0xe8>
    1230:	sub	r3, fp, #12
    1234:	mov	r1, r3
    1238:	ldr	r0, [fp, #-16]
    123c:	bl	1e5c <coda_mem_cursor_get_available_union_field_index>
    1240:	mov	r3, r0
    1244:	cmp	r3, #0
    1248:	beq	1254 <coda_mem_cursor_goto_available_union_field+0x64>
    124c:	mvn	r3, #0
    1250:	b	1308 <coda_mem_cursor_goto_available_union_field+0x118>
    1254:	ldr	r3, [fp, #-16]
    1258:	ldr	r3, [r3, #4]
    125c:	sub	r3, r3, #1
    1260:	ldr	r2, [fp, #-8]
    1264:	ldr	r1, [r2, #20]
    1268:	ldr	r2, [fp, #-12]
    126c:	lsl	r2, r2, #2
    1270:	add	r2, r1, r2
    1274:	ldr	r2, [r2]
    1278:	ldr	r1, [fp, #-16]
    127c:	lsl	r3, r3, #4
    1280:	add	r3, r1, r3
    1284:	str	r2, [r3, #8]
    1288:	ldr	r3, [fp, #-16]
    128c:	ldr	r3, [r3, #4]
    1290:	sub	r3, r3, #1
    1294:	ldr	r2, [fp, #-12]
    1298:	ldr	r1, [fp, #-16]
    129c:	lsl	r3, r3, #4
    12a0:	add	r3, r1, r3
    12a4:	str	r2, [r3, #12]
    12a8:	ldr	r3, [fp, #-16]
    12ac:	ldr	r3, [r3, #4]
    12b0:	sub	r3, r3, #1
    12b4:	ldr	r2, [fp, #-16]
    12b8:	add	r3, r3, #1
    12bc:	lsl	r3, r3, #4
    12c0:	add	r1, r2, r3
    12c4:	mvn	r2, #0
    12c8:	mvn	r3, #0
    12cc:	strd	r2, [r1]
    12d0:	mov	r3, #0
    12d4:	b	1308 <coda_mem_cursor_goto_available_union_field+0x118>
    12d8:	ldr	r3, [fp, #-8]
    12dc:	ldr	r3, [r3, #8]
    12e0:	cmp	r3, #2
    12e4:	beq	12fc <coda_mem_cursor_goto_available_union_field+0x10c>
    12e8:	ldr	r3, [pc, #36]	; 1314 <coda_mem_cursor_goto_available_union_field+0x124>
    12ec:	mov	r2, #134	; 0x86
    12f0:	ldr	r1, [pc, #32]	; 1318 <coda_mem_cursor_goto_available_union_field+0x128>
    12f4:	ldr	r0, [pc, #32]	; 131c <coda_mem_cursor_goto_available_union_field+0x12c>
    12f8:	bl	0 <__assert_fail>
    12fc:	ldr	r0, [fp, #-16]
    1300:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
    1304:	mov	r3, r0
    1308:	mov	r0, r3
    130c:	sub	sp, fp, #4
    1310:	pop	{fp, pc}
    1314:	.word	0x00000360
    1318:	.word	0x000000c0
    131c:	.word	0x00000110

00001320 <coda_mem_cursor_goto_array_element>:
    1320:	push	{fp, lr}
    1324:	add	fp, sp, #4
    1328:	sub	sp, sp, #24
    132c:	str	r0, [fp, #-16]
    1330:	str	r1, [fp, #-20]	; 0xffffffec
    1334:	str	r2, [fp, #-24]	; 0xffffffe8
    1338:	ldr	r3, [fp, #-16]
    133c:	ldr	r3, [r3, #4]
    1340:	sub	r3, r3, #1
    1344:	ldr	r2, [fp, #-16]
    1348:	lsl	r3, r3, #4
    134c:	add	r3, r2, r3
    1350:	ldr	r3, [r3, #8]
    1354:	str	r3, [fp, #-8]
    1358:	ldr	r3, [fp, #-8]
    135c:	ldr	r3, [r3, #8]
    1360:	cmp	r3, #1
    1364:	bne	1494 <coda_mem_cursor_goto_array_element+0x174>
    1368:	ldr	r3, [fp, #-20]	; 0xffffffec
    136c:	cmp	r3, #1
    1370:	beq	138c <coda_mem_cursor_goto_array_element+0x6c>
    1374:	ldr	r2, [fp, #-20]	; 0xffffffec
    1378:	ldr	r1, [pc, #344]	; 14d8 <coda_mem_cursor_goto_array_element+0x1b8>
    137c:	mvn	r0, #105	; 0x69
    1380:	bl	0 <coda_set_error>
    1384:	mvn	r3, #0
    1388:	b	14cc <coda_mem_cursor_goto_array_element+0x1ac>
    138c:	ldr	r3, [pc, #328]	; 14dc <coda_mem_cursor_goto_array_element+0x1bc>
    1390:	ldr	r3, [pc, r3]
    1394:	bl	0 <__aeabi_read_tp>
    1398:	mov	r2, r0
    139c:	ldr	r3, [r2, r3]
    13a0:	cmp	r3, #0
    13a4:	beq	13f4 <coda_mem_cursor_goto_array_element+0xd4>
    13a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13ac:	ldr	r3, [r3]
    13b0:	cmp	r3, #0
    13b4:	blt	13d0 <coda_mem_cursor_goto_array_element+0xb0>
    13b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13bc:	ldr	r2, [r3]
    13c0:	ldr	r3, [fp, #-8]
    13c4:	ldr	r3, [r3, #16]
    13c8:	cmp	r2, r3
    13cc:	blt	13f4 <coda_mem_cursor_goto_array_element+0xd4>
    13d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13d4:	ldr	r2, [r3]
    13d8:	ldr	r3, [fp, #-8]
    13dc:	ldr	r3, [r3, #16]
    13e0:	ldr	r1, [pc, #248]	; 14e0 <coda_mem_cursor_goto_array_element+0x1c0>
    13e4:	mvn	r0, #106	; 0x6a
    13e8:	bl	0 <coda_set_error>
    13ec:	mvn	r3, #0
    13f0:	b	14cc <coda_mem_cursor_goto_array_element+0x1ac>
    13f4:	ldr	r3, [fp, #-16]
    13f8:	ldr	r3, [r3, #4]
    13fc:	add	r2, r3, #1
    1400:	ldr	r3, [fp, #-16]
    1404:	str	r2, [r3, #4]
    1408:	ldr	r3, [fp, #-16]
    140c:	ldr	r3, [r3, #4]
    1410:	sub	r3, r3, #1
    1414:	ldr	r2, [fp, #-8]
    1418:	ldr	r1, [r2, #20]
    141c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1420:	ldr	r2, [r2]
    1424:	lsl	r2, r2, #2
    1428:	add	r2, r1, r2
    142c:	ldr	r2, [r2]
    1430:	ldr	r1, [fp, #-16]
    1434:	lsl	r3, r3, #4
    1438:	add	r3, r1, r3
    143c:	str	r2, [r3, #8]
    1440:	ldr	r3, [fp, #-16]
    1444:	ldr	r3, [r3, #4]
    1448:	sub	r3, r3, #1
    144c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1450:	ldr	r2, [r2]
    1454:	ldr	r1, [fp, #-16]
    1458:	lsl	r3, r3, #4
    145c:	add	r3, r1, r3
    1460:	str	r2, [r3, #12]
    1464:	ldr	r3, [fp, #-16]
    1468:	ldr	r3, [r3, #4]
    146c:	sub	r3, r3, #1
    1470:	ldr	r2, [fp, #-16]
    1474:	add	r3, r3, #1
    1478:	lsl	r3, r3, #4
    147c:	add	r1, r2, r3
    1480:	mvn	r2, #0
    1484:	mvn	r3, #0
    1488:	strd	r2, [r1]
    148c:	mov	r3, #0
    1490:	b	14cc <coda_mem_cursor_goto_array_element+0x1ac>
    1494:	ldr	r3, [fp, #-8]
    1498:	ldr	r3, [r3, #8]
    149c:	cmp	r3, #2
    14a0:	beq	14b8 <coda_mem_cursor_goto_array_element+0x198>
    14a4:	ldr	r3, [pc, #56]	; 14e4 <coda_mem_cursor_goto_array_element+0x1c4>
    14a8:	mov	r2, #169	; 0xa9
    14ac:	ldr	r1, [pc, #52]	; 14e8 <coda_mem_cursor_goto_array_element+0x1c8>
    14b0:	ldr	r0, [pc, #52]	; 14ec <coda_mem_cursor_goto_array_element+0x1cc>
    14b4:	bl	0 <__assert_fail>
    14b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14bc:	ldr	r1, [fp, #-20]	; 0xffffffec
    14c0:	ldr	r0, [fp, #-16]
    14c4:	bl	0 <coda_ascbin_cursor_goto_array_element>
    14c8:	mov	r3, r0
    14cc:	mov	r0, r3
    14d0:	sub	sp, fp, #4
    14d4:	pop	{fp, pc}
    14d8:	.word	0x0000012c
    14dc:	.word	0x00000144
    14e0:	.word	0x00000170
    14e4:	.word	0x0000038c
    14e8:	.word	0x000000c0
    14ec:	.word	0x00000110

000014f0 <coda_mem_cursor_goto_array_element_by_index>:
    14f0:	push	{fp, lr}
    14f4:	add	fp, sp, #4
    14f8:	sub	sp, sp, #16
    14fc:	str	r0, [fp, #-16]
    1500:	str	r1, [fp, #-20]	; 0xffffffec
    1504:	ldr	r3, [fp, #-16]
    1508:	ldr	r3, [r3, #4]
    150c:	sub	r3, r3, #1
    1510:	ldr	r2, [fp, #-16]
    1514:	lsl	r3, r3, #4
    1518:	add	r3, r2, r3
    151c:	ldr	r3, [r3, #8]
    1520:	str	r3, [fp, #-8]
    1524:	ldr	r3, [fp, #-8]
    1528:	ldr	r3, [r3, #8]
    152c:	cmp	r3, #1
    1530:	bne	1628 <coda_mem_cursor_goto_array_element_by_index+0x138>
    1534:	ldr	r3, [pc, #300]	; 1668 <coda_mem_cursor_goto_array_element_by_index+0x178>
    1538:	ldr	r3, [pc, r3]
    153c:	bl	0 <__aeabi_read_tp>
    1540:	mov	r2, r0
    1544:	ldr	r3, [r2, r3]
    1548:	cmp	r3, #0
    154c:	beq	1590 <coda_mem_cursor_goto_array_element_by_index+0xa0>
    1550:	ldr	r3, [fp, #-20]	; 0xffffffec
    1554:	cmp	r3, #0
    1558:	blt	1570 <coda_mem_cursor_goto_array_element_by_index+0x80>
    155c:	ldr	r3, [fp, #-8]
    1560:	ldr	r2, [r3, #16]
    1564:	ldr	r3, [fp, #-20]	; 0xffffffec
    1568:	cmp	r2, r3
    156c:	bgt	1590 <coda_mem_cursor_goto_array_element_by_index+0xa0>
    1570:	ldr	r3, [fp, #-8]
    1574:	ldr	r3, [r3, #16]
    1578:	ldr	r2, [fp, #-20]	; 0xffffffec
    157c:	ldr	r1, [pc, #232]	; 166c <coda_mem_cursor_goto_array_element_by_index+0x17c>
    1580:	mvn	r0, #106	; 0x6a
    1584:	bl	0 <coda_set_error>
    1588:	mvn	r3, #0
    158c:	b	165c <coda_mem_cursor_goto_array_element_by_index+0x16c>
    1590:	ldr	r3, [fp, #-16]
    1594:	ldr	r3, [r3, #4]
    1598:	add	r2, r3, #1
    159c:	ldr	r3, [fp, #-16]
    15a0:	str	r2, [r3, #4]
    15a4:	ldr	r3, [fp, #-16]
    15a8:	ldr	r3, [r3, #4]
    15ac:	sub	r3, r3, #1
    15b0:	ldr	r2, [fp, #-8]
    15b4:	ldr	r1, [r2, #20]
    15b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    15bc:	lsl	r2, r2, #2
    15c0:	add	r2, r1, r2
    15c4:	ldr	r2, [r2]
    15c8:	ldr	r1, [fp, #-16]
    15cc:	lsl	r3, r3, #4
    15d0:	add	r3, r1, r3
    15d4:	str	r2, [r3, #8]
    15d8:	ldr	r3, [fp, #-16]
    15dc:	ldr	r3, [r3, #4]
    15e0:	sub	r3, r3, #1
    15e4:	ldr	r2, [fp, #-16]
    15e8:	lsl	r3, r3, #4
    15ec:	add	r3, r2, r3
    15f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    15f4:	str	r2, [r3, #12]
    15f8:	ldr	r3, [fp, #-16]
    15fc:	ldr	r3, [r3, #4]
    1600:	sub	r3, r3, #1
    1604:	ldr	r2, [fp, #-16]
    1608:	add	r3, r3, #1
    160c:	lsl	r3, r3, #4
    1610:	add	r1, r2, r3
    1614:	mvn	r2, #0
    1618:	mvn	r3, #0
    161c:	strd	r2, [r1]
    1620:	mov	r3, #0
    1624:	b	165c <coda_mem_cursor_goto_array_element_by_index+0x16c>
    1628:	ldr	r3, [fp, #-8]
    162c:	ldr	r3, [r3, #8]
    1630:	cmp	r3, #2
    1634:	beq	164c <coda_mem_cursor_goto_array_element_by_index+0x15c>
    1638:	ldr	r3, [pc, #48]	; 1670 <coda_mem_cursor_goto_array_element_by_index+0x180>
    163c:	mov	r2, #197	; 0xc5
    1640:	ldr	r1, [pc, #44]	; 1674 <coda_mem_cursor_goto_array_element_by_index+0x184>
    1644:	ldr	r0, [pc, #44]	; 1678 <coda_mem_cursor_goto_array_element_by_index+0x188>
    1648:	bl	0 <__assert_fail>
    164c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1650:	ldr	r0, [fp, #-16]
    1654:	bl	0 <coda_ascbin_cursor_goto_array_element_by_index>
    1658:	mov	r3, r0
    165c:	mov	r0, r3
    1660:	sub	sp, fp, #4
    1664:	pop	{fp, pc}
    1668:	.word	0x00000128
    166c:	.word	0x00000170
    1670:	.word	0x000003b0
    1674:	.word	0x000000c0
    1678:	.word	0x00000110

0000167c <coda_mem_cursor_goto_next_array_element>:
    167c:	push	{r4, fp, lr}
    1680:	add	fp, sp, #8
    1684:	sub	sp, sp, #20
    1688:	str	r0, [fp, #-24]	; 0xffffffe8
    168c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1690:	ldr	r3, [r3, #4]
    1694:	sub	r3, r3, #2
    1698:	ldr	r2, [fp, #-24]	; 0xffffffe8
    169c:	lsl	r3, r3, #4
    16a0:	add	r3, r2, r3
    16a4:	ldr	r3, [r3, #8]
    16a8:	str	r3, [fp, #-16]
    16ac:	ldr	r3, [fp, #-16]
    16b0:	ldr	r3, [r3, #8]
    16b4:	cmp	r3, #1
    16b8:	bne	17fc <coda_mem_cursor_goto_next_array_element+0x180>
    16bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16c0:	ldr	r3, [r3, #4]
    16c4:	sub	r3, r3, #1
    16c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    16cc:	lsl	r3, r3, #4
    16d0:	add	r3, r2, r3
    16d4:	ldr	r3, [r3, #12]
    16d8:	add	r3, r3, #1
    16dc:	str	r3, [fp, #-20]	; 0xffffffec
    16e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    16e4:	cmp	r3, #0
    16e8:	blt	1700 <coda_mem_cursor_goto_next_array_element+0x84>
    16ec:	ldr	r3, [fp, #-16]
    16f0:	ldr	r2, [r3, #16]
    16f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    16f8:	cmp	r2, r3
    16fc:	bgt	1720 <coda_mem_cursor_goto_next_array_element+0xa4>
    1700:	ldr	r3, [fp, #-16]
    1704:	ldr	r3, [r3, #16]
    1708:	ldr	r2, [fp, #-20]	; 0xffffffec
    170c:	ldr	r1, [pc, #292]	; 1838 <coda_mem_cursor_goto_next_array_element+0x1bc>
    1710:	mvn	r0, #106	; 0x6a
    1714:	bl	0 <coda_set_error>
    1718:	mvn	r3, #0
    171c:	b	182c <coda_mem_cursor_goto_next_array_element+0x1b0>
    1720:	ldr	r3, [fp, #-16]
    1724:	ldr	r2, [r3, #20]
    1728:	ldr	r3, [fp, #-20]	; 0xffffffec
    172c:	lsl	r3, r3, #2
    1730:	add	r3, r2, r3
    1734:	ldr	r3, [r3]
    1738:	cmp	r3, #0
    173c:	beq	1778 <coda_mem_cursor_goto_next_array_element+0xfc>
    1740:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1744:	ldr	r3, [r3, #4]
    1748:	sub	r3, r3, #1
    174c:	ldr	r2, [fp, #-16]
    1750:	ldr	r1, [r2, #20]
    1754:	ldr	r2, [fp, #-20]	; 0xffffffec
    1758:	lsl	r2, r2, #2
    175c:	add	r2, r1, r2
    1760:	ldr	r2, [r2]
    1764:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1768:	lsl	r3, r3, #4
    176c:	add	r3, r1, r3
    1770:	str	r2, [r3, #8]
    1774:	b	17ac <coda_mem_cursor_goto_next_array_element+0x130>
    1778:	ldr	r3, [fp, #-24]	; 0xffffffe8
    177c:	ldr	r3, [r3, #4]
    1780:	sub	r4, r3, #1
    1784:	ldr	r3, [fp, #-16]
    1788:	ldr	r3, [r3, #4]
    178c:	ldr	r3, [r3]
    1790:	mov	r0, r3
    1794:	bl	0 <coda_no_data_singleton>
    1798:	mov	r1, r0
    179c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    17a0:	lsl	r3, r4, #4
    17a4:	add	r3, r2, r3
    17a8:	str	r1, [r3, #8]
    17ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17b0:	ldr	r3, [r3, #4]
    17b4:	sub	r3, r3, #1
    17b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    17bc:	lsl	r3, r3, #4
    17c0:	add	r3, r2, r3
    17c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    17c8:	str	r2, [r3, #12]
    17cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17d0:	ldr	r3, [r3, #4]
    17d4:	sub	r3, r3, #1
    17d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    17dc:	add	r3, r3, #1
    17e0:	lsl	r3, r3, #4
    17e4:	add	r1, r2, r3
    17e8:	mvn	r2, #0
    17ec:	mvn	r3, #0
    17f0:	strd	r2, [r1]
    17f4:	mov	r3, #0
    17f8:	b	182c <coda_mem_cursor_goto_next_array_element+0x1b0>
    17fc:	ldr	r3, [fp, #-16]
    1800:	ldr	r3, [r3, #8]
    1804:	cmp	r3, #2
    1808:	beq	1820 <coda_mem_cursor_goto_next_array_element+0x1a4>
    180c:	ldr	r3, [pc, #40]	; 183c <coda_mem_cursor_goto_next_array_element+0x1c0>
    1810:	mov	r2, #229	; 0xe5
    1814:	ldr	r1, [pc, #36]	; 1840 <coda_mem_cursor_goto_next_array_element+0x1c4>
    1818:	ldr	r0, [pc, #36]	; 1844 <coda_mem_cursor_goto_next_array_element+0x1c8>
    181c:	bl	0 <__assert_fail>
    1820:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1824:	bl	0 <coda_ascbin_cursor_goto_next_array_element>
    1828:	mov	r3, r0
    182c:	mov	r0, r3
    1830:	sub	sp, fp, #8
    1834:	pop	{r4, fp, pc}
    1838:	.word	0x00000170
    183c:	.word	0x000003dc
    1840:	.word	0x000000c0
    1844:	.word	0x00000110

00001848 <coda_mem_cursor_goto_attributes>:
    1848:	push	{r4, fp, lr}
    184c:	add	fp, sp, #8
    1850:	sub	sp, sp, #12
    1854:	str	r0, [fp, #-16]
    1858:	ldr	r3, [fp, #-16]
    185c:	ldr	r3, [r3, #4]
    1860:	add	r2, r3, #1
    1864:	ldr	r3, [fp, #-16]
    1868:	str	r2, [r3, #4]
    186c:	ldr	r3, [fp, #-16]
    1870:	ldr	r3, [r3, #4]
    1874:	sub	r3, r3, #2
    1878:	ldr	r2, [fp, #-16]
    187c:	lsl	r3, r3, #4
    1880:	add	r3, r2, r3
    1884:	ldr	r3, [r3, #8]
    1888:	ldr	r3, [r3, #12]
    188c:	cmp	r3, #0
    1890:	beq	18d4 <coda_mem_cursor_goto_attributes+0x8c>
    1894:	ldr	r3, [fp, #-16]
    1898:	ldr	r3, [r3, #4]
    189c:	sub	r0, r3, #1
    18a0:	ldr	r3, [fp, #-16]
    18a4:	ldr	r3, [r3, #4]
    18a8:	sub	r3, r3, #2
    18ac:	ldr	r2, [fp, #-16]
    18b0:	lsl	r3, r3, #4
    18b4:	add	r3, r2, r3
    18b8:	ldr	r3, [r3, #8]
    18bc:	ldr	r2, [r3, #12]
    18c0:	ldr	r1, [fp, #-16]
    18c4:	lsl	r3, r0, #4
    18c8:	add	r3, r1, r3
    18cc:	str	r2, [r3, #8]
    18d0:	b	1920 <coda_mem_cursor_goto_attributes+0xd8>
    18d4:	ldr	r3, [fp, #-16]
    18d8:	ldr	r3, [r3, #4]
    18dc:	sub	r4, r3, #1
    18e0:	ldr	r3, [fp, #-16]
    18e4:	ldr	r3, [r3, #4]
    18e8:	sub	r3, r3, #2
    18ec:	ldr	r2, [fp, #-16]
    18f0:	lsl	r3, r3, #4
    18f4:	add	r3, r2, r3
    18f8:	ldr	r3, [r3, #8]
    18fc:	ldr	r3, [r3, #4]
    1900:	ldr	r3, [r3]
    1904:	mov	r0, r3
    1908:	bl	0 <coda_mem_empty_record>
    190c:	mov	r1, r0
    1910:	ldr	r2, [fp, #-16]
    1914:	lsl	r3, r4, #4
    1918:	add	r3, r2, r3
    191c:	str	r1, [r3, #8]
    1920:	ldr	r3, [fp, #-16]
    1924:	ldr	r3, [r3, #4]
    1928:	sub	r3, r3, #1
    192c:	ldr	r2, [fp, #-16]
    1930:	lsl	r3, r3, #4
    1934:	add	r3, r2, r3
    1938:	mvn	r2, #0
    193c:	str	r2, [r3, #12]
    1940:	ldr	r3, [fp, #-16]
    1944:	ldr	r3, [r3, #4]
    1948:	sub	r3, r3, #1
    194c:	ldr	r2, [fp, #-16]
    1950:	add	r3, r3, #1
    1954:	lsl	r3, r3, #4
    1958:	add	r1, r2, r3
    195c:	mvn	r2, #0
    1960:	mvn	r3, #0
    1964:	strd	r2, [r1]
    1968:	mov	r3, #0
    196c:	mov	r0, r3
    1970:	sub	sp, fp, #8
    1974:	pop	{r4, fp, pc}

00001978 <coda_mem_cursor_use_base_type_of_special_type>:
    1978:	push	{fp, lr}
    197c:	add	fp, sp, #4
    1980:	sub	sp, sp, #16
    1984:	str	r0, [fp, #-16]
    1988:	ldr	r3, [fp, #-16]
    198c:	ldr	r3, [r3, #4]
    1990:	sub	r3, r3, #1
    1994:	ldr	r2, [fp, #-16]
    1998:	lsl	r3, r3, #4
    199c:	add	r3, r2, r3
    19a0:	ldr	r3, [r3, #8]
    19a4:	str	r3, [fp, #-8]
    19a8:	ldr	r3, [fp, #-8]
    19ac:	ldr	r3, [r3, #8]
    19b0:	cmp	r3, #3
    19b4:	bne	19fc <coda_mem_cursor_use_base_type_of_special_type+0x84>
    19b8:	ldr	r3, [fp, #-16]
    19bc:	ldr	r3, [r3, #4]
    19c0:	sub	r0, r3, #1
    19c4:	ldr	r3, [fp, #-16]
    19c8:	ldr	r3, [r3, #4]
    19cc:	sub	r3, r3, #1
    19d0:	ldr	r2, [fp, #-16]
    19d4:	lsl	r3, r3, #4
    19d8:	add	r3, r2, r3
    19dc:	ldr	r3, [r3, #8]
    19e0:	ldr	r2, [r3, #16]
    19e4:	ldr	r1, [fp, #-16]
    19e8:	lsl	r3, r0, #4
    19ec:	add	r3, r1, r3
    19f0:	str	r2, [r3, #8]
    19f4:	mov	r3, #0
    19f8:	b	1a4c <coda_mem_cursor_use_base_type_of_special_type+0xd4>
    19fc:	ldr	r3, [fp, #-8]
    1a00:	ldr	r3, [r3, #8]
    1a04:	cmp	r3, #2
    1a08:	beq	1a20 <coda_mem_cursor_use_base_type_of_special_type+0xa8>
    1a0c:	ldr	r3, [pc, #68]	; 1a58 <coda_mem_cursor_use_base_type_of_special_type+0xe0>
    1a10:	ldr	r2, [pc, #68]	; 1a5c <coda_mem_cursor_use_base_type_of_special_type+0xe4>
    1a14:	ldr	r1, [pc, #68]	; 1a60 <coda_mem_cursor_use_base_type_of_special_type+0xe8>
    1a18:	ldr	r0, [pc, #68]	; 1a64 <coda_mem_cursor_use_base_type_of_special_type+0xec>
    1a1c:	bl	0 <__assert_fail>
    1a20:	ldr	r3, [fp, #-16]
    1a24:	ldr	r3, [r3, #4]
    1a28:	sub	r3, r3, #1
    1a2c:	ldr	r2, [fp, #-8]
    1a30:	ldr	r2, [r2, #4]
    1a34:	ldr	r2, [r2, #44]	; 0x2c
    1a38:	ldr	r1, [fp, #-16]
    1a3c:	lsl	r3, r3, #4
    1a40:	add	r3, r1, r3
    1a44:	str	r2, [r3, #8]
    1a48:	mov	r3, #0
    1a4c:	mov	r0, r3
    1a50:	sub	sp, fp, #4
    1a54:	pop	{fp, pc}
    1a58:	.word	0x00000404
    1a5c:	.word	0x00000107
    1a60:	.word	0x000000c0
    1a64:	.word	0x00000110

00001a68 <coda_mem_cursor_get_string_length>:
    1a68:	push	{r4, r5, fp, lr}
    1a6c:	add	fp, sp, #12
    1a70:	sub	sp, sp, #16
    1a74:	str	r0, [fp, #-24]	; 0xffffffe8
    1a78:	str	r1, [fp, #-28]	; 0xffffffe4
    1a7c:	sub	r3, fp, #20
    1a80:	mov	r1, r3
    1a84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1a88:	bl	1aec <coda_mem_cursor_get_bit_size>
    1a8c:	mov	r3, r0
    1a90:	cmp	r3, #0
    1a94:	beq	1aa0 <coda_mem_cursor_get_string_length+0x38>
    1a98:	mvn	r3, #0
    1a9c:	b	1ae0 <coda_mem_cursor_get_string_length+0x78>
    1aa0:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1aa4:	cmp	r2, #0
    1aa8:	sbcs	r3, r3, #0
    1aac:	bge	1ac0 <coda_mem_cursor_get_string_length+0x58>
    1ab0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1ab4:	mvn	r2, #0
    1ab8:	str	r2, [r3]
    1abc:	b	1adc <coda_mem_cursor_get_string_length+0x74>
    1ac0:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1ac4:	lsr	r4, r2, #3
    1ac8:	orr	r4, r4, r3, lsl #29
    1acc:	asr	r5, r3, #3
    1ad0:	mov	r2, r4
    1ad4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1ad8:	str	r2, [r3]
    1adc:	mov	r3, #0
    1ae0:	mov	r0, r3
    1ae4:	sub	sp, fp, #12
    1ae8:	pop	{r4, r5, fp, pc}

00001aec <coda_mem_cursor_get_bit_size>:
    1aec:	push	{fp, lr}
    1af0:	add	fp, sp, #4
    1af4:	sub	sp, sp, #536	; 0x218
    1af8:	str	r0, [fp, #-536]	; 0xfffffde8
    1afc:	str	r1, [fp, #-540]	; 0xfffffde4
    1b00:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1b04:	ldr	r3, [r3, #4]
    1b08:	sub	r3, r3, #1
    1b0c:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1b10:	lsl	r3, r3, #4
    1b14:	add	r3, r2, r3
    1b18:	ldr	r3, [r3, #8]
    1b1c:	str	r3, [fp, #-8]
    1b20:	ldr	r3, [fp, #-8]
    1b24:	ldr	r3, [r3, #8]
    1b28:	cmp	r3, #3
    1b2c:	bne	1b80 <coda_mem_cursor_get_bit_size+0x94>
    1b30:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1b34:	sub	r3, fp, #532	; 0x214
    1b38:	mov	r1, r2
    1b3c:	mov	r2, #520	; 0x208
    1b40:	mov	r0, r3
    1b44:	bl	0 <memcpy>
    1b48:	sub	r3, fp, #532	; 0x214
    1b4c:	mov	r0, r3
    1b50:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1b54:	mov	r3, r0
    1b58:	cmp	r3, #0
    1b5c:	beq	1b68 <coda_mem_cursor_get_bit_size+0x7c>
    1b60:	mvn	r3, #0
    1b64:	b	1c2c <coda_mem_cursor_get_bit_size+0x140>
    1b68:	sub	r3, fp, #532	; 0x214
    1b6c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1b70:	mov	r0, r3
    1b74:	bl	0 <coda_cursor_get_bit_size>
    1b78:	mov	r3, r0
    1b7c:	b	1c2c <coda_mem_cursor_get_bit_size+0x140>
    1b80:	ldr	r3, [fp, #-8]
    1b84:	ldr	r3, [r3, #8]
    1b88:	cmp	r3, #2
    1b8c:	bne	1c18 <coda_mem_cursor_get_bit_size+0x12c>
    1b90:	ldr	r3, [fp, #-8]
    1b94:	ldr	r3, [r3, #4]
    1b98:	ldr	r3, [r3]
    1b9c:	cmp	r3, #0
    1ba0:	bne	1bc4 <coda_mem_cursor_get_bit_size+0xd8>
    1ba4:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1ba8:	ldr	r0, [fp, #-536]	; 0xfffffde8
    1bac:	bl	0 <coda_ascii_cursor_get_bit_size>
    1bb0:	mov	r3, r0
    1bb4:	cmp	r3, #0
    1bb8:	beq	1be4 <coda_mem_cursor_get_bit_size+0xf8>
    1bbc:	mvn	r3, #0
    1bc0:	b	1c2c <coda_mem_cursor_get_bit_size+0x140>
    1bc4:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1bc8:	ldr	r0, [fp, #-536]	; 0xfffffde8
    1bcc:	bl	0 <coda_bin_cursor_get_bit_size>
    1bd0:	mov	r3, r0
    1bd4:	cmp	r3, #0
    1bd8:	beq	1be4 <coda_mem_cursor_get_bit_size+0xf8>
    1bdc:	mvn	r3, #0
    1be0:	b	1c2c <coda_mem_cursor_get_bit_size+0x140>
    1be4:	ldr	r3, [fp, #-540]	; 0xfffffde4
    1be8:	ldrd	r2, [r3]
    1bec:	cmp	r2, #0
    1bf0:	sbcs	r3, r3, #0
    1bf4:	bge	1c28 <coda_mem_cursor_get_bit_size+0x13c>
    1bf8:	ldr	r3, [fp, #-8]
    1bfc:	ldr	r3, [r3, #16]
    1c00:	lsl	r3, r3, #3
    1c04:	mov	r2, r3
    1c08:	asr	r3, r2, #31
    1c0c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1c10:	strd	r2, [r1]
    1c14:	b	1c28 <coda_mem_cursor_get_bit_size+0x13c>
    1c18:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1c1c:	mvn	r2, #0
    1c20:	mvn	r3, #0
    1c24:	strd	r2, [r1]
    1c28:	mov	r3, #0
    1c2c:	mov	r0, r3
    1c30:	sub	sp, fp, #4
    1c34:	pop	{fp, pc}

00001c38 <coda_mem_cursor_get_num_elements>:
    1c38:	push	{fp, lr}
    1c3c:	add	fp, sp, #4
    1c40:	sub	sp, sp, #16
    1c44:	str	r0, [fp, #-16]
    1c48:	str	r1, [fp, #-20]	; 0xffffffec
    1c4c:	ldr	r3, [fp, #-16]
    1c50:	ldr	r3, [r3, #4]
    1c54:	sub	r3, r3, #1
    1c58:	ldr	r2, [fp, #-16]
    1c5c:	lsl	r3, r3, #4
    1c60:	add	r3, r2, r3
    1c64:	ldr	r3, [r3, #8]
    1c68:	str	r3, [fp, #-8]
    1c6c:	ldr	r3, [fp, #-8]
    1c70:	ldr	r3, [r3, #8]
    1c74:	cmp	r3, #3
    1c78:	ldrls	pc, [pc, r3, lsl #2]
    1c7c:	b	1d34 <coda_mem_cursor_get_num_elements+0xfc>
    1c80:	.word	0x00001c90
    1c84:	.word	0x00001cbc
    1c88:	.word	0x00001ce8
    1c8c:	.word	0x00001d24
    1c90:	ldr	r3, [fp, #-16]
    1c94:	ldr	r3, [r3, #4]
    1c98:	sub	r3, r3, #1
    1c9c:	ldr	r2, [fp, #-16]
    1ca0:	lsl	r3, r3, #4
    1ca4:	add	r3, r2, r3
    1ca8:	ldr	r3, [r3, #8]
    1cac:	ldr	r2, [r3, #16]
    1cb0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1cb4:	str	r2, [r3]
    1cb8:	b	1d34 <coda_mem_cursor_get_num_elements+0xfc>
    1cbc:	ldr	r3, [fp, #-16]
    1cc0:	ldr	r3, [r3, #4]
    1cc4:	sub	r3, r3, #1
    1cc8:	ldr	r2, [fp, #-16]
    1ccc:	lsl	r3, r3, #4
    1cd0:	add	r3, r2, r3
    1cd4:	ldr	r3, [r3, #8]
    1cd8:	ldr	r2, [r3, #16]
    1cdc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ce0:	str	r2, [r3]
    1ce4:	b	1d34 <coda_mem_cursor_get_num_elements+0xfc>
    1ce8:	ldr	r3, [fp, #-8]
    1cec:	ldr	r3, [r3, #4]
    1cf0:	ldr	r3, [r3]
    1cf4:	cmp	r3, #0
    1cf8:	bne	1d10 <coda_mem_cursor_get_num_elements+0xd8>
    1cfc:	ldr	r1, [fp, #-20]	; 0xffffffec
    1d00:	ldr	r0, [fp, #-16]
    1d04:	bl	0 <coda_ascii_cursor_get_num_elements>
    1d08:	mov	r3, r0
    1d0c:	b	1d38 <coda_mem_cursor_get_num_elements+0x100>
    1d10:	ldr	r1, [fp, #-20]	; 0xffffffec
    1d14:	ldr	r0, [fp, #-16]
    1d18:	bl	0 <coda_bin_cursor_get_num_elements>
    1d1c:	mov	r3, r0
    1d20:	b	1d38 <coda_mem_cursor_get_num_elements+0x100>
    1d24:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d28:	mov	r2, #1
    1d2c:	str	r2, [r3]
    1d30:	nop			; (mov r0, r0)
    1d34:	mov	r3, #0
    1d38:	mov	r0, r3
    1d3c:	sub	sp, fp, #4
    1d40:	pop	{fp, pc}

00001d44 <coda_mem_cursor_get_record_field_available_status>:
    1d44:	push	{fp, lr}
    1d48:	add	fp, sp, #4
    1d4c:	sub	sp, sp, #24
    1d50:	str	r0, [fp, #-16]
    1d54:	str	r1, [fp, #-20]	; 0xffffffec
    1d58:	str	r2, [fp, #-24]	; 0xffffffe8
    1d5c:	ldr	r3, [fp, #-16]
    1d60:	ldr	r3, [r3, #4]
    1d64:	sub	r3, r3, #1
    1d68:	ldr	r2, [fp, #-16]
    1d6c:	lsl	r3, r3, #4
    1d70:	add	r3, r2, r3
    1d74:	ldr	r3, [r3, #8]
    1d78:	str	r3, [fp, #-8]
    1d7c:	ldr	r3, [fp, #-8]
    1d80:	ldr	r3, [r3, #8]
    1d84:	cmp	r3, #2
    1d88:	bne	1da4 <coda_mem_cursor_get_record_field_available_status+0x60>
    1d8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1d90:	ldr	r1, [fp, #-20]	; 0xffffffec
    1d94:	ldr	r0, [fp, #-16]
    1d98:	bl	0 <coda_ascbin_cursor_get_record_field_available_status>
    1d9c:	mov	r3, r0
    1da0:	b	1e40 <coda_mem_cursor_get_record_field_available_status+0xfc>
    1da4:	ldr	r3, [fp, #-8]
    1da8:	ldr	r3, [r3, #8]
    1dac:	cmp	r3, #0
    1db0:	beq	1dc8 <coda_mem_cursor_get_record_field_available_status+0x84>
    1db4:	ldr	r3, [pc, #144]	; 1e4c <coda_mem_cursor_get_record_field_available_status+0x108>
    1db8:	mov	r2, #364	; 0x16c
    1dbc:	ldr	r1, [pc, #140]	; 1e50 <coda_mem_cursor_get_record_field_available_status+0x10c>
    1dc0:	ldr	r0, [pc, #140]	; 1e54 <coda_mem_cursor_get_record_field_available_status+0x110>
    1dc4:	bl	0 <__assert_fail>
    1dc8:	ldr	r3, [fp, #-20]	; 0xffffffec
    1dcc:	cmp	r3, #0
    1dd0:	blt	1de8 <coda_mem_cursor_get_record_field_available_status+0xa4>
    1dd4:	ldr	r3, [fp, #-8]
    1dd8:	ldr	r2, [r3, #16]
    1ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1de0:	cmp	r2, r3
    1de4:	bgt	1e08 <coda_mem_cursor_get_record_field_available_status+0xc4>
    1de8:	ldr	r3, [fp, #-8]
    1dec:	ldr	r3, [r3, #16]
    1df0:	ldr	r2, [fp, #-20]	; 0xffffffec
    1df4:	ldr	r1, [pc, #92]	; 1e58 <coda_mem_cursor_get_record_field_available_status+0x114>
    1df8:	mvn	r0, #100	; 0x64
    1dfc:	bl	0 <coda_set_error>
    1e00:	mvn	r3, #0
    1e04:	b	1e40 <coda_mem_cursor_get_record_field_available_status+0xfc>
    1e08:	ldr	r3, [fp, #-8]
    1e0c:	ldr	r2, [r3, #20]
    1e10:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e14:	lsl	r3, r3, #2
    1e18:	add	r3, r2, r3
    1e1c:	ldr	r3, [r3]
    1e20:	cmp	r3, #0
    1e24:	movne	r3, #1
    1e28:	moveq	r3, #0
    1e2c:	uxtb	r3, r3
    1e30:	mov	r2, r3
    1e34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e38:	str	r2, [r3]
    1e3c:	mov	r3, #0
    1e40:	mov	r0, r3
    1e44:	sub	sp, fp, #4
    1e48:	pop	{fp, pc}
    1e4c:	.word	0x00000434
    1e50:	.word	0x000000c0
    1e54:	.word	0x000001a0
    1e58:	.word	0x00000090

00001e5c <coda_mem_cursor_get_available_union_field_index>:
    1e5c:	push	{fp, lr}
    1e60:	add	fp, sp, #4
    1e64:	sub	sp, sp, #16
    1e68:	str	r0, [fp, #-16]
    1e6c:	str	r1, [fp, #-20]	; 0xffffffec
    1e70:	ldr	r3, [fp, #-16]
    1e74:	ldr	r3, [r3, #4]
    1e78:	sub	r3, r3, #1
    1e7c:	ldr	r2, [fp, #-16]
    1e80:	lsl	r3, r3, #4
    1e84:	add	r3, r2, r3
    1e88:	ldr	r3, [r3, #8]
    1e8c:	str	r3, [fp, #-12]
    1e90:	ldr	r3, [fp, #-12]
    1e94:	ldr	r3, [r3, #8]
    1e98:	cmp	r3, #0
    1e9c:	bne	1f14 <coda_mem_cursor_get_available_union_field_index+0xb8>
    1ea0:	mov	r3, #0
    1ea4:	str	r3, [fp, #-8]
    1ea8:	b	1eec <coda_mem_cursor_get_available_union_field_index+0x90>
    1eac:	ldr	r3, [fp, #-12]
    1eb0:	ldr	r2, [r3, #20]
    1eb4:	ldr	r3, [fp, #-8]
    1eb8:	lsl	r3, r3, #2
    1ebc:	add	r3, r2, r3
    1ec0:	ldr	r3, [r3]
    1ec4:	cmp	r3, #0
    1ec8:	beq	1ee0 <coda_mem_cursor_get_available_union_field_index+0x84>
    1ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ed0:	ldr	r2, [fp, #-8]
    1ed4:	str	r2, [r3]
    1ed8:	mov	r3, #0
    1edc:	b	1f60 <coda_mem_cursor_get_available_union_field_index+0x104>
    1ee0:	ldr	r3, [fp, #-8]
    1ee4:	add	r3, r3, #1
    1ee8:	str	r3, [fp, #-8]
    1eec:	ldr	r3, [fp, #-12]
    1ef0:	ldr	r2, [r3, #16]
    1ef4:	ldr	r3, [fp, #-8]
    1ef8:	cmp	r2, r3
    1efc:	bgt	1eac <coda_mem_cursor_get_available_union_field_index+0x50>
    1f00:	ldr	r1, [pc, #100]	; 1f6c <coda_mem_cursor_get_available_union_field_index+0x110>
    1f04:	ldr	r0, [pc, #100]	; 1f70 <coda_mem_cursor_get_available_union_field_index+0x114>
    1f08:	bl	0 <coda_set_error>
    1f0c:	mvn	r3, #0
    1f10:	b	1f60 <coda_mem_cursor_get_available_union_field_index+0x104>
    1f14:	ldr	r3, [fp, #-16]
    1f18:	ldr	r3, [r3, #4]
    1f1c:	sub	r3, r3, #1
    1f20:	ldr	r2, [fp, #-16]
    1f24:	lsl	r3, r3, #4
    1f28:	add	r3, r2, r3
    1f2c:	ldr	r3, [r3, #8]
    1f30:	ldr	r3, [r3, #8]
    1f34:	cmp	r3, #2
    1f38:	beq	1f50 <coda_mem_cursor_get_available_union_field_index+0xf4>
    1f3c:	ldr	r3, [pc, #48]	; 1f74 <coda_mem_cursor_get_available_union_field_index+0x118>
    1f40:	ldr	r2, [pc, #48]	; 1f78 <coda_mem_cursor_get_available_union_field_index+0x11c>
    1f44:	ldr	r1, [pc, #48]	; 1f7c <coda_mem_cursor_get_available_union_field_index+0x120>
    1f48:	ldr	r0, [pc, #48]	; 1f80 <coda_mem_cursor_get_available_union_field_index+0x124>
    1f4c:	bl	0 <__assert_fail>
    1f50:	ldr	r1, [fp, #-20]	; 0xffffffec
    1f54:	ldr	r0, [fp, #-16]
    1f58:	bl	0 <coda_ascbin_cursor_get_available_union_field_index>
    1f5c:	mov	r3, r0
    1f60:	mov	r0, r3
    1f64:	sub	sp, fp, #4
    1f68:	pop	{fp, pc}
    1f6c:	.word	0x000001bc
    1f70:	.word	0xfffffed4
    1f74:	.word	0x00000468
    1f78:	.word	0x0000018f
    1f7c:	.word	0x000000c0
    1f80:	.word	0x000001dc

00001f84 <coda_mem_cursor_get_array_dim>:
    1f84:	push	{fp, lr}
    1f88:	add	fp, sp, #4
    1f8c:	sub	sp, sp, #32
    1f90:	str	r0, [fp, #-24]	; 0xffffffe8
    1f94:	str	r1, [fp, #-28]	; 0xffffffe4
    1f98:	str	r2, [fp, #-32]	; 0xffffffe0
    1f9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1fa0:	ldr	r3, [r3, #4]
    1fa4:	sub	r3, r3, #1
    1fa8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1fac:	lsl	r3, r3, #4
    1fb0:	add	r3, r2, r3
    1fb4:	ldr	r3, [r3, #8]
    1fb8:	str	r3, [fp, #-12]
    1fbc:	ldr	r3, [fp, #-12]
    1fc0:	ldr	r3, [r3, #8]
    1fc4:	cmp	r3, #2
    1fc8:	bne	1fe4 <coda_mem_cursor_get_array_dim+0x60>
    1fcc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1fd0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1fd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1fd8:	bl	0 <coda_ascbin_cursor_get_array_dim>
    1fdc:	mov	r3, r0
    1fe0:	b	20d4 <coda_mem_cursor_get_array_dim+0x150>
    1fe4:	ldr	r3, [fp, #-12]
    1fe8:	ldr	r3, [r3, #8]
    1fec:	cmp	r3, #1
    1ff0:	beq	2008 <coda_mem_cursor_get_array_dim+0x84>
    1ff4:	ldr	r3, [pc, #228]	; 20e0 <coda_mem_cursor_get_array_dim+0x15c>
    1ff8:	ldr	r2, [pc, #228]	; 20e4 <coda_mem_cursor_get_array_dim+0x160>
    1ffc:	ldr	r1, [pc, #228]	; 20e8 <coda_mem_cursor_get_array_dim+0x164>
    2000:	ldr	r0, [pc, #228]	; 20ec <coda_mem_cursor_get_array_dim+0x168>
    2004:	bl	0 <__assert_fail>
    2008:	ldr	r3, [fp, #-24]	; 0xffffffe8
    200c:	ldr	r3, [r3, #4]
    2010:	sub	r3, r3, #1
    2014:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2018:	lsl	r3, r3, #4
    201c:	add	r3, r2, r3
    2020:	ldr	r3, [r3, #8]
    2024:	str	r3, [fp, #-16]
    2028:	ldr	r3, [fp, #-16]
    202c:	ldr	r3, [r3, #4]
    2030:	ldr	r3, [r3, #44]	; 0x2c
    2034:	cmp	r3, #0
    2038:	blt	20b4 <coda_mem_cursor_get_array_dim+0x130>
    203c:	ldr	r3, [fp, #-16]
    2040:	ldr	r3, [r3, #4]
    2044:	ldr	r2, [r3, #48]	; 0x30
    2048:	ldr	r3, [fp, #-28]	; 0xffffffe4
    204c:	str	r2, [r3]
    2050:	mov	r3, #0
    2054:	str	r3, [fp, #-8]
    2058:	b	2098 <coda_mem_cursor_get_array_dim+0x114>
    205c:	ldr	r3, [fp, #-8]
    2060:	lsl	r3, r3, #2
    2064:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2068:	add	r2, r2, r3
    206c:	ldr	r3, [fp, #-16]
    2070:	ldr	r1, [r3, #4]
    2074:	ldr	r3, [fp, #-8]
    2078:	add	r3, r3, #12
    207c:	lsl	r3, r3, #2
    2080:	add	r3, r1, r3
    2084:	ldr	r3, [r3, #4]
    2088:	str	r3, [r2]
    208c:	ldr	r3, [fp, #-8]
    2090:	add	r3, r3, #1
    2094:	str	r3, [fp, #-8]
    2098:	ldr	r3, [fp, #-16]
    209c:	ldr	r3, [r3, #4]
    20a0:	ldr	r2, [r3, #48]	; 0x30
    20a4:	ldr	r3, [fp, #-8]
    20a8:	cmp	r2, r3
    20ac:	bgt	205c <coda_mem_cursor_get_array_dim+0xd8>
    20b0:	b	20d0 <coda_mem_cursor_get_array_dim+0x14c>
    20b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    20b8:	mov	r2, #1
    20bc:	str	r2, [r3]
    20c0:	ldr	r3, [fp, #-16]
    20c4:	ldr	r2, [r3, #16]
    20c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    20cc:	str	r2, [r3]
    20d0:	mov	r3, #0
    20d4:	mov	r0, r3
    20d8:	sub	sp, fp, #4
    20dc:	pop	{fp, pc}
    20e0:	.word	0x00000498
    20e4:	.word	0x0000019d
    20e8:	.word	0x000000c0
    20ec:	.word	0x00000228

000020f0 <coda_mem_cursor_read_int8>:
    20f0:	push	{fp, lr}
    20f4:	add	fp, sp, #4
    20f8:	sub	sp, sp, #16
    20fc:	str	r0, [fp, #-16]
    2100:	str	r1, [fp, #-20]	; 0xffffffec
    2104:	ldr	r3, [fp, #-16]
    2108:	ldr	r3, [r3, #4]
    210c:	sub	r3, r3, #1
    2110:	ldr	r2, [fp, #-16]
    2114:	lsl	r3, r3, #4
    2118:	add	r3, r2, r3
    211c:	ldr	r3, [r3, #8]
    2120:	str	r3, [fp, #-8]
    2124:	ldr	r3, [fp, #-8]
    2128:	ldr	r3, [r3, #8]
    212c:	cmp	r3, #2
    2130:	beq	2148 <coda_mem_cursor_read_int8+0x58>
    2134:	ldr	r3, [pc, #80]	; 218c <coda_mem_cursor_read_int8+0x9c>
    2138:	ldr	r2, [pc, #80]	; 2190 <coda_mem_cursor_read_int8+0xa0>
    213c:	ldr	r1, [pc, #80]	; 2194 <coda_mem_cursor_read_int8+0xa4>
    2140:	ldr	r0, [pc, #80]	; 2198 <coda_mem_cursor_read_int8+0xa8>
    2144:	bl	0 <__assert_fail>
    2148:	ldr	r3, [fp, #-8]
    214c:	ldr	r3, [r3, #4]
    2150:	ldr	r3, [r3]
    2154:	cmp	r3, #0
    2158:	bne	2170 <coda_mem_cursor_read_int8+0x80>
    215c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2160:	ldr	r0, [fp, #-16]
    2164:	bl	0 <coda_ascii_cursor_read_int8>
    2168:	mov	r3, r0
    216c:	b	2180 <coda_mem_cursor_read_int8+0x90>
    2170:	ldr	r1, [fp, #-20]	; 0xffffffec
    2174:	ldr	r0, [fp, #-16]
    2178:	bl	0 <coda_bin_cursor_read_int8>
    217c:	mov	r3, r0
    2180:	mov	r0, r3
    2184:	sub	sp, fp, #4
    2188:	pop	{fp, pc}
    218c:	.word	0x000004b8
    2190:	.word	0x000001b7
    2194:	.word	0x000000c0
    2198:	.word	0x00000110

0000219c <coda_mem_cursor_read_uint8>:
    219c:	push	{fp, lr}
    21a0:	add	fp, sp, #4
    21a4:	sub	sp, sp, #16
    21a8:	str	r0, [fp, #-16]
    21ac:	str	r1, [fp, #-20]	; 0xffffffec
    21b0:	ldr	r3, [fp, #-16]
    21b4:	ldr	r3, [r3, #4]
    21b8:	sub	r3, r3, #1
    21bc:	ldr	r2, [fp, #-16]
    21c0:	lsl	r3, r3, #4
    21c4:	add	r3, r2, r3
    21c8:	ldr	r3, [r3, #8]
    21cc:	str	r3, [fp, #-8]
    21d0:	ldr	r3, [fp, #-8]
    21d4:	ldr	r3, [r3, #8]
    21d8:	cmp	r3, #2
    21dc:	beq	21f4 <coda_mem_cursor_read_uint8+0x58>
    21e0:	ldr	r3, [pc, #80]	; 2238 <coda_mem_cursor_read_uint8+0x9c>
    21e4:	ldr	r2, [pc, #80]	; 223c <coda_mem_cursor_read_uint8+0xa0>
    21e8:	ldr	r1, [pc, #80]	; 2240 <coda_mem_cursor_read_uint8+0xa4>
    21ec:	ldr	r0, [pc, #80]	; 2244 <coda_mem_cursor_read_uint8+0xa8>
    21f0:	bl	0 <__assert_fail>
    21f4:	ldr	r3, [fp, #-8]
    21f8:	ldr	r3, [r3, #4]
    21fc:	ldr	r3, [r3]
    2200:	cmp	r3, #0
    2204:	bne	221c <coda_mem_cursor_read_uint8+0x80>
    2208:	ldr	r1, [fp, #-20]	; 0xffffffec
    220c:	ldr	r0, [fp, #-16]
    2210:	bl	0 <coda_ascii_cursor_read_uint8>
    2214:	mov	r3, r0
    2218:	b	222c <coda_mem_cursor_read_uint8+0x90>
    221c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2220:	ldr	r0, [fp, #-16]
    2224:	bl	0 <coda_bin_cursor_read_uint8>
    2228:	mov	r3, r0
    222c:	mov	r0, r3
    2230:	sub	sp, fp, #4
    2234:	pop	{fp, pc}
    2238:	.word	0x000004d4
    223c:	.word	0x000001c3
    2240:	.word	0x000000c0
    2244:	.word	0x00000110

00002248 <coda_mem_cursor_read_int16>:
    2248:	push	{fp, lr}
    224c:	add	fp, sp, #4
    2250:	sub	sp, sp, #16
    2254:	str	r0, [fp, #-16]
    2258:	str	r1, [fp, #-20]	; 0xffffffec
    225c:	ldr	r3, [fp, #-16]
    2260:	ldr	r3, [r3, #4]
    2264:	sub	r3, r3, #1
    2268:	ldr	r2, [fp, #-16]
    226c:	lsl	r3, r3, #4
    2270:	add	r3, r2, r3
    2274:	ldr	r3, [r3, #8]
    2278:	str	r3, [fp, #-8]
    227c:	ldr	r3, [fp, #-8]
    2280:	ldr	r3, [r3, #8]
    2284:	cmp	r3, #2
    2288:	beq	22a0 <coda_mem_cursor_read_int16+0x58>
    228c:	ldr	r3, [pc, #80]	; 22e4 <coda_mem_cursor_read_int16+0x9c>
    2290:	ldr	r2, [pc, #80]	; 22e8 <coda_mem_cursor_read_int16+0xa0>
    2294:	ldr	r1, [pc, #80]	; 22ec <coda_mem_cursor_read_int16+0xa4>
    2298:	ldr	r0, [pc, #80]	; 22f0 <coda_mem_cursor_read_int16+0xa8>
    229c:	bl	0 <__assert_fail>
    22a0:	ldr	r3, [fp, #-8]
    22a4:	ldr	r3, [r3, #4]
    22a8:	ldr	r3, [r3]
    22ac:	cmp	r3, #0
    22b0:	bne	22c8 <coda_mem_cursor_read_int16+0x80>
    22b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    22b8:	ldr	r0, [fp, #-16]
    22bc:	bl	0 <coda_ascii_cursor_read_int16>
    22c0:	mov	r3, r0
    22c4:	b	22d8 <coda_mem_cursor_read_int16+0x90>
    22c8:	ldr	r1, [fp, #-20]	; 0xffffffec
    22cc:	ldr	r0, [fp, #-16]
    22d0:	bl	0 <coda_bin_cursor_read_int16>
    22d4:	mov	r3, r0
    22d8:	mov	r0, r3
    22dc:	sub	sp, fp, #4
    22e0:	pop	{fp, pc}
    22e4:	.word	0x000004f0
    22e8:	.word	0x000001cf
    22ec:	.word	0x000000c0
    22f0:	.word	0x00000110

000022f4 <coda_mem_cursor_read_uint16>:
    22f4:	push	{fp, lr}
    22f8:	add	fp, sp, #4
    22fc:	sub	sp, sp, #16
    2300:	str	r0, [fp, #-16]
    2304:	str	r1, [fp, #-20]	; 0xffffffec
    2308:	ldr	r3, [fp, #-16]
    230c:	ldr	r3, [r3, #4]
    2310:	sub	r3, r3, #1
    2314:	ldr	r2, [fp, #-16]
    2318:	lsl	r3, r3, #4
    231c:	add	r3, r2, r3
    2320:	ldr	r3, [r3, #8]
    2324:	str	r3, [fp, #-8]
    2328:	ldr	r3, [fp, #-8]
    232c:	ldr	r3, [r3, #8]
    2330:	cmp	r3, #2
    2334:	beq	234c <coda_mem_cursor_read_uint16+0x58>
    2338:	ldr	r3, [pc, #80]	; 2390 <coda_mem_cursor_read_uint16+0x9c>
    233c:	ldr	r2, [pc, #80]	; 2394 <coda_mem_cursor_read_uint16+0xa0>
    2340:	ldr	r1, [pc, #80]	; 2398 <coda_mem_cursor_read_uint16+0xa4>
    2344:	ldr	r0, [pc, #80]	; 239c <coda_mem_cursor_read_uint16+0xa8>
    2348:	bl	0 <__assert_fail>
    234c:	ldr	r3, [fp, #-8]
    2350:	ldr	r3, [r3, #4]
    2354:	ldr	r3, [r3]
    2358:	cmp	r3, #0
    235c:	bne	2374 <coda_mem_cursor_read_uint16+0x80>
    2360:	ldr	r1, [fp, #-20]	; 0xffffffec
    2364:	ldr	r0, [fp, #-16]
    2368:	bl	0 <coda_ascii_cursor_read_uint16>
    236c:	mov	r3, r0
    2370:	b	2384 <coda_mem_cursor_read_uint16+0x90>
    2374:	ldr	r1, [fp, #-20]	; 0xffffffec
    2378:	ldr	r0, [fp, #-16]
    237c:	bl	0 <coda_bin_cursor_read_uint16>
    2380:	mov	r3, r0
    2384:	mov	r0, r3
    2388:	sub	sp, fp, #4
    238c:	pop	{fp, pc}
    2390:	.word	0x0000050c
    2394:	.word	0x000001db
    2398:	.word	0x000000c0
    239c:	.word	0x00000110

000023a0 <coda_mem_cursor_read_int32>:
    23a0:	push	{fp, lr}
    23a4:	add	fp, sp, #4
    23a8:	sub	sp, sp, #16
    23ac:	str	r0, [fp, #-16]
    23b0:	str	r1, [fp, #-20]	; 0xffffffec
    23b4:	ldr	r3, [fp, #-16]
    23b8:	ldr	r3, [r3, #4]
    23bc:	sub	r3, r3, #1
    23c0:	ldr	r2, [fp, #-16]
    23c4:	lsl	r3, r3, #4
    23c8:	add	r3, r2, r3
    23cc:	ldr	r3, [r3, #8]
    23d0:	str	r3, [fp, #-8]
    23d4:	ldr	r3, [fp, #-8]
    23d8:	ldr	r3, [r3, #8]
    23dc:	cmp	r3, #2
    23e0:	beq	23f8 <coda_mem_cursor_read_int32+0x58>
    23e4:	ldr	r3, [pc, #80]	; 243c <coda_mem_cursor_read_int32+0x9c>
    23e8:	ldr	r2, [pc, #80]	; 2440 <coda_mem_cursor_read_int32+0xa0>
    23ec:	ldr	r1, [pc, #80]	; 2444 <coda_mem_cursor_read_int32+0xa4>
    23f0:	ldr	r0, [pc, #80]	; 2448 <coda_mem_cursor_read_int32+0xa8>
    23f4:	bl	0 <__assert_fail>
    23f8:	ldr	r3, [fp, #-8]
    23fc:	ldr	r3, [r3, #4]
    2400:	ldr	r3, [r3]
    2404:	cmp	r3, #0
    2408:	bne	2420 <coda_mem_cursor_read_int32+0x80>
    240c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2410:	ldr	r0, [fp, #-16]
    2414:	bl	0 <coda_ascii_cursor_read_int32>
    2418:	mov	r3, r0
    241c:	b	2430 <coda_mem_cursor_read_int32+0x90>
    2420:	ldr	r1, [fp, #-20]	; 0xffffffec
    2424:	ldr	r0, [fp, #-16]
    2428:	bl	0 <coda_bin_cursor_read_int32>
    242c:	mov	r3, r0
    2430:	mov	r0, r3
    2434:	sub	sp, fp, #4
    2438:	pop	{fp, pc}
    243c:	.word	0x00000528
    2440:	.word	0x000001e7
    2444:	.word	0x000000c0
    2448:	.word	0x00000110

0000244c <coda_mem_cursor_read_uint32>:
    244c:	push	{fp, lr}
    2450:	add	fp, sp, #4
    2454:	sub	sp, sp, #16
    2458:	str	r0, [fp, #-16]
    245c:	str	r1, [fp, #-20]	; 0xffffffec
    2460:	ldr	r3, [fp, #-16]
    2464:	ldr	r3, [r3, #4]
    2468:	sub	r3, r3, #1
    246c:	ldr	r2, [fp, #-16]
    2470:	lsl	r3, r3, #4
    2474:	add	r3, r2, r3
    2478:	ldr	r3, [r3, #8]
    247c:	str	r3, [fp, #-8]
    2480:	ldr	r3, [fp, #-8]
    2484:	ldr	r3, [r3, #8]
    2488:	cmp	r3, #2
    248c:	beq	24a4 <coda_mem_cursor_read_uint32+0x58>
    2490:	ldr	r3, [pc, #80]	; 24e8 <coda_mem_cursor_read_uint32+0x9c>
    2494:	ldr	r2, [pc, #80]	; 24ec <coda_mem_cursor_read_uint32+0xa0>
    2498:	ldr	r1, [pc, #80]	; 24f0 <coda_mem_cursor_read_uint32+0xa4>
    249c:	ldr	r0, [pc, #80]	; 24f4 <coda_mem_cursor_read_uint32+0xa8>
    24a0:	bl	0 <__assert_fail>
    24a4:	ldr	r3, [fp, #-8]
    24a8:	ldr	r3, [r3, #4]
    24ac:	ldr	r3, [r3]
    24b0:	cmp	r3, #0
    24b4:	bne	24cc <coda_mem_cursor_read_uint32+0x80>
    24b8:	ldr	r1, [fp, #-20]	; 0xffffffec
    24bc:	ldr	r0, [fp, #-16]
    24c0:	bl	0 <coda_ascii_cursor_read_uint32>
    24c4:	mov	r3, r0
    24c8:	b	24dc <coda_mem_cursor_read_uint32+0x90>
    24cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    24d0:	ldr	r0, [fp, #-16]
    24d4:	bl	0 <coda_bin_cursor_read_uint32>
    24d8:	mov	r3, r0
    24dc:	mov	r0, r3
    24e0:	sub	sp, fp, #4
    24e4:	pop	{fp, pc}
    24e8:	.word	0x00000544
    24ec:	.word	0x000001f3
    24f0:	.word	0x000000c0
    24f4:	.word	0x00000110

000024f8 <coda_mem_cursor_read_int64>:
    24f8:	push	{fp, lr}
    24fc:	add	fp, sp, #4
    2500:	sub	sp, sp, #16
    2504:	str	r0, [fp, #-16]
    2508:	str	r1, [fp, #-20]	; 0xffffffec
    250c:	ldr	r3, [fp, #-16]
    2510:	ldr	r3, [r3, #4]
    2514:	sub	r3, r3, #1
    2518:	ldr	r2, [fp, #-16]
    251c:	lsl	r3, r3, #4
    2520:	add	r3, r2, r3
    2524:	ldr	r3, [r3, #8]
    2528:	str	r3, [fp, #-8]
    252c:	ldr	r3, [fp, #-8]
    2530:	ldr	r3, [r3, #8]
    2534:	cmp	r3, #2
    2538:	beq	2550 <coda_mem_cursor_read_int64+0x58>
    253c:	ldr	r3, [pc, #80]	; 2594 <coda_mem_cursor_read_int64+0x9c>
    2540:	ldr	r2, [pc, #80]	; 2598 <coda_mem_cursor_read_int64+0xa0>
    2544:	ldr	r1, [pc, #80]	; 259c <coda_mem_cursor_read_int64+0xa4>
    2548:	ldr	r0, [pc, #80]	; 25a0 <coda_mem_cursor_read_int64+0xa8>
    254c:	bl	0 <__assert_fail>
    2550:	ldr	r3, [fp, #-8]
    2554:	ldr	r3, [r3, #4]
    2558:	ldr	r3, [r3]
    255c:	cmp	r3, #0
    2560:	bne	2578 <coda_mem_cursor_read_int64+0x80>
    2564:	ldr	r1, [fp, #-20]	; 0xffffffec
    2568:	ldr	r0, [fp, #-16]
    256c:	bl	0 <coda_ascii_cursor_read_int64>
    2570:	mov	r3, r0
    2574:	b	2588 <coda_mem_cursor_read_int64+0x90>
    2578:	ldr	r1, [fp, #-20]	; 0xffffffec
    257c:	ldr	r0, [fp, #-16]
    2580:	bl	0 <coda_bin_cursor_read_int64>
    2584:	mov	r3, r0
    2588:	mov	r0, r3
    258c:	sub	sp, fp, #4
    2590:	pop	{fp, pc}
    2594:	.word	0x00000560
    2598:	.word	0x000001ff
    259c:	.word	0x000000c0
    25a0:	.word	0x00000110

000025a4 <coda_mem_cursor_read_uint64>:
    25a4:	push	{fp, lr}
    25a8:	add	fp, sp, #4
    25ac:	sub	sp, sp, #16
    25b0:	str	r0, [fp, #-16]
    25b4:	str	r1, [fp, #-20]	; 0xffffffec
    25b8:	ldr	r3, [fp, #-16]
    25bc:	ldr	r3, [r3, #4]
    25c0:	sub	r3, r3, #1
    25c4:	ldr	r2, [fp, #-16]
    25c8:	lsl	r3, r3, #4
    25cc:	add	r3, r2, r3
    25d0:	ldr	r3, [r3, #8]
    25d4:	str	r3, [fp, #-8]
    25d8:	ldr	r3, [fp, #-8]
    25dc:	ldr	r3, [r3, #8]
    25e0:	cmp	r3, #2
    25e4:	beq	25fc <coda_mem_cursor_read_uint64+0x58>
    25e8:	ldr	r3, [pc, #80]	; 2640 <coda_mem_cursor_read_uint64+0x9c>
    25ec:	ldr	r2, [pc, #80]	; 2644 <coda_mem_cursor_read_uint64+0xa0>
    25f0:	ldr	r1, [pc, #80]	; 2648 <coda_mem_cursor_read_uint64+0xa4>
    25f4:	ldr	r0, [pc, #80]	; 264c <coda_mem_cursor_read_uint64+0xa8>
    25f8:	bl	0 <__assert_fail>
    25fc:	ldr	r3, [fp, #-8]
    2600:	ldr	r3, [r3, #4]
    2604:	ldr	r3, [r3]
    2608:	cmp	r3, #0
    260c:	bne	2624 <coda_mem_cursor_read_uint64+0x80>
    2610:	ldr	r1, [fp, #-20]	; 0xffffffec
    2614:	ldr	r0, [fp, #-16]
    2618:	bl	0 <coda_ascii_cursor_read_uint64>
    261c:	mov	r3, r0
    2620:	b	2634 <coda_mem_cursor_read_uint64+0x90>
    2624:	ldr	r1, [fp, #-20]	; 0xffffffec
    2628:	ldr	r0, [fp, #-16]
    262c:	bl	0 <coda_bin_cursor_read_uint64>
    2630:	mov	r3, r0
    2634:	mov	r0, r3
    2638:	sub	sp, fp, #4
    263c:	pop	{fp, pc}
    2640:	.word	0x0000057c
    2644:	.word	0x0000020b
    2648:	.word	0x000000c0
    264c:	.word	0x00000110

00002650 <coda_mem_cursor_read_float>:
    2650:	push	{fp, lr}
    2654:	add	fp, sp, #4
    2658:	sub	sp, sp, #16
    265c:	str	r0, [fp, #-16]
    2660:	str	r1, [fp, #-20]	; 0xffffffec
    2664:	ldr	r3, [fp, #-16]
    2668:	ldr	r3, [r3, #4]
    266c:	sub	r3, r3, #1
    2670:	ldr	r2, [fp, #-16]
    2674:	lsl	r3, r3, #4
    2678:	add	r3, r2, r3
    267c:	ldr	r3, [r3, #8]
    2680:	str	r3, [fp, #-8]
    2684:	ldr	r3, [fp, #-8]
    2688:	ldr	r3, [r3, #8]
    268c:	cmp	r3, #2
    2690:	beq	26a8 <coda_mem_cursor_read_float+0x58>
    2694:	ldr	r3, [pc, #80]	; 26ec <coda_mem_cursor_read_float+0x9c>
    2698:	ldr	r2, [pc, #80]	; 26f0 <coda_mem_cursor_read_float+0xa0>
    269c:	ldr	r1, [pc, #80]	; 26f4 <coda_mem_cursor_read_float+0xa4>
    26a0:	ldr	r0, [pc, #80]	; 26f8 <coda_mem_cursor_read_float+0xa8>
    26a4:	bl	0 <__assert_fail>
    26a8:	ldr	r3, [fp, #-8]
    26ac:	ldr	r3, [r3, #4]
    26b0:	ldr	r3, [r3]
    26b4:	cmp	r3, #0
    26b8:	bne	26d0 <coda_mem_cursor_read_float+0x80>
    26bc:	ldr	r1, [fp, #-20]	; 0xffffffec
    26c0:	ldr	r0, [fp, #-16]
    26c4:	bl	0 <coda_ascii_cursor_read_float>
    26c8:	mov	r3, r0
    26cc:	b	26e0 <coda_mem_cursor_read_float+0x90>
    26d0:	ldr	r1, [fp, #-20]	; 0xffffffec
    26d4:	ldr	r0, [fp, #-16]
    26d8:	bl	0 <coda_bin_cursor_read_float>
    26dc:	mov	r3, r0
    26e0:	mov	r0, r3
    26e4:	sub	sp, fp, #4
    26e8:	pop	{fp, pc}
    26ec:	.word	0x00000598
    26f0:	.word	0x00000217
    26f4:	.word	0x000000c0
    26f8:	.word	0x00000110

000026fc <coda_mem_cursor_read_double>:
    26fc:	push	{fp, lr}
    2700:	add	fp, sp, #4
    2704:	sub	sp, sp, #16
    2708:	str	r0, [fp, #-16]
    270c:	str	r1, [fp, #-20]	; 0xffffffec
    2710:	ldr	r3, [fp, #-16]
    2714:	ldr	r3, [r3, #4]
    2718:	sub	r3, r3, #1
    271c:	ldr	r2, [fp, #-16]
    2720:	lsl	r3, r3, #4
    2724:	add	r3, r2, r3
    2728:	ldr	r3, [r3, #8]
    272c:	str	r3, [fp, #-8]
    2730:	ldr	r3, [fp, #-8]
    2734:	ldr	r3, [r3, #8]
    2738:	cmp	r3, #2
    273c:	beq	2754 <coda_mem_cursor_read_double+0x58>
    2740:	ldr	r3, [pc, #80]	; 2798 <coda_mem_cursor_read_double+0x9c>
    2744:	ldr	r2, [pc, #80]	; 279c <coda_mem_cursor_read_double+0xa0>
    2748:	ldr	r1, [pc, #80]	; 27a0 <coda_mem_cursor_read_double+0xa4>
    274c:	ldr	r0, [pc, #80]	; 27a4 <coda_mem_cursor_read_double+0xa8>
    2750:	bl	0 <__assert_fail>
    2754:	ldr	r3, [fp, #-8]
    2758:	ldr	r3, [r3, #4]
    275c:	ldr	r3, [r3]
    2760:	cmp	r3, #0
    2764:	bne	277c <coda_mem_cursor_read_double+0x80>
    2768:	ldr	r1, [fp, #-20]	; 0xffffffec
    276c:	ldr	r0, [fp, #-16]
    2770:	bl	0 <coda_ascii_cursor_read_double>
    2774:	mov	r3, r0
    2778:	b	278c <coda_mem_cursor_read_double+0x90>
    277c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2780:	ldr	r0, [fp, #-16]
    2784:	bl	0 <coda_bin_cursor_read_double>
    2788:	mov	r3, r0
    278c:	mov	r0, r3
    2790:	sub	sp, fp, #4
    2794:	pop	{fp, pc}
    2798:	.word	0x000005b4
    279c:	.word	0x00000223
    27a0:	.word	0x000000c0
    27a4:	.word	0x00000110

000027a8 <coda_mem_cursor_read_char>:
    27a8:	push	{fp, lr}
    27ac:	add	fp, sp, #4
    27b0:	sub	sp, sp, #16
    27b4:	str	r0, [fp, #-16]
    27b8:	str	r1, [fp, #-20]	; 0xffffffec
    27bc:	ldr	r3, [fp, #-16]
    27c0:	ldr	r3, [r3, #4]
    27c4:	sub	r3, r3, #1
    27c8:	ldr	r2, [fp, #-16]
    27cc:	lsl	r3, r3, #4
    27d0:	add	r3, r2, r3
    27d4:	ldr	r3, [r3, #8]
    27d8:	str	r3, [fp, #-8]
    27dc:	ldr	r3, [fp, #-8]
    27e0:	ldr	r3, [r3, #8]
    27e4:	cmp	r3, #2
    27e8:	beq	2800 <coda_mem_cursor_read_char+0x58>
    27ec:	ldr	r3, [pc, #100]	; 2858 <coda_mem_cursor_read_char+0xb0>
    27f0:	ldr	r2, [pc, #100]	; 285c <coda_mem_cursor_read_char+0xb4>
    27f4:	ldr	r1, [pc, #100]	; 2860 <coda_mem_cursor_read_char+0xb8>
    27f8:	ldr	r0, [pc, #100]	; 2864 <coda_mem_cursor_read_char+0xbc>
    27fc:	bl	0 <__assert_fail>
    2800:	ldr	r3, [fp, #-8]
    2804:	ldr	r3, [r3, #4]
    2808:	ldr	r3, [r3]
    280c:	cmp	r3, #0
    2810:	beq	2828 <coda_mem_cursor_read_char+0x80>
    2814:	ldr	r3, [fp, #-8]
    2818:	ldr	r3, [r3, #4]
    281c:	ldr	r3, [r3]
    2820:	cmp	r3, #2
    2824:	bne	283c <coda_mem_cursor_read_char+0x94>
    2828:	ldr	r1, [fp, #-20]	; 0xffffffec
    282c:	ldr	r0, [fp, #-16]
    2830:	bl	0 <coda_ascii_cursor_read_char>
    2834:	mov	r3, r0
    2838:	b	284c <coda_mem_cursor_read_char+0xa4>
    283c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2840:	ldr	r0, [fp, #-16]
    2844:	bl	0 <coda_bin_cursor_read_char>
    2848:	mov	r3, r0
    284c:	mov	r0, r3
    2850:	sub	sp, fp, #4
    2854:	pop	{fp, pc}
    2858:	.word	0x000005d0
    285c:	.word	0x0000022f
    2860:	.word	0x000000c0
    2864:	.word	0x00000110

00002868 <coda_mem_cursor_read_string>:
    2868:	push	{fp, lr}
    286c:	add	fp, sp, #4
    2870:	sub	sp, sp, #544	; 0x220
    2874:	str	r0, [fp, #-536]	; 0xfffffde8
    2878:	str	r1, [fp, #-540]	; 0xfffffde4
    287c:	str	r2, [fp, #-544]	; 0xfffffde0
    2880:	ldr	r3, [fp, #-536]	; 0xfffffde8
    2884:	ldr	r3, [r3, #4]
    2888:	sub	r3, r3, #1
    288c:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2890:	lsl	r3, r3, #4
    2894:	add	r3, r2, r3
    2898:	ldr	r3, [r3, #8]
    289c:	str	r3, [fp, #-8]
    28a0:	ldr	r3, [fp, #-8]
    28a4:	ldr	r3, [r3, #8]
    28a8:	cmp	r3, #3
    28ac:	bne	2904 <coda_mem_cursor_read_string+0x9c>
    28b0:	ldr	r2, [fp, #-536]	; 0xfffffde8
    28b4:	sub	r3, fp, #532	; 0x214
    28b8:	mov	r1, r2
    28bc:	mov	r2, #520	; 0x208
    28c0:	mov	r0, r3
    28c4:	bl	0 <memcpy>
    28c8:	sub	r3, fp, #532	; 0x214
    28cc:	mov	r0, r3
    28d0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    28d4:	mov	r3, r0
    28d8:	cmp	r3, #0
    28dc:	beq	28e8 <coda_mem_cursor_read_string+0x80>
    28e0:	mvn	r3, #0
    28e4:	b	293c <coda_mem_cursor_read_string+0xd4>
    28e8:	sub	r3, fp, #532	; 0x214
    28ec:	ldr	r2, [fp, #-544]	; 0xfffffde0
    28f0:	ldr	r1, [fp, #-540]	; 0xfffffde4
    28f4:	mov	r0, r3
    28f8:	bl	0 <coda_cursor_read_string>
    28fc:	mov	r3, r0
    2900:	b	293c <coda_mem_cursor_read_string+0xd4>
    2904:	ldr	r3, [fp, #-8]
    2908:	ldr	r3, [r3, #8]
    290c:	cmp	r3, #2
    2910:	beq	2928 <coda_mem_cursor_read_string+0xc0>
    2914:	ldr	r3, [pc, #44]	; 2948 <coda_mem_cursor_read_string+0xe0>
    2918:	ldr	r2, [pc, #44]	; 294c <coda_mem_cursor_read_string+0xe4>
    291c:	ldr	r1, [pc, #44]	; 2950 <coda_mem_cursor_read_string+0xe8>
    2920:	ldr	r0, [pc, #44]	; 2954 <coda_mem_cursor_read_string+0xec>
    2924:	bl	0 <__assert_fail>
    2928:	ldr	r2, [fp, #-544]	; 0xfffffde0
    292c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2930:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2934:	bl	0 <coda_ascii_cursor_read_string>
    2938:	mov	r3, r0
    293c:	mov	r0, r3
    2940:	sub	sp, fp, #4
    2944:	pop	{fp, pc}
    2948:	.word	0x000005ec
    294c:	.word	0x00000246
    2950:	.word	0x000000c0
    2954:	.word	0x00000110

00002958 <coda_mem_cursor_read_bits>:
    2958:	push	{fp, lr}
    295c:	add	fp, sp, #4
    2960:	sub	sp, sp, #552	; 0x228
    2964:	str	r0, [fp, #-536]	; 0xfffffde8
    2968:	str	r1, [fp, #-540]	; 0xfffffde4
    296c:	sub	r1, fp, #548	; 0x224
    2970:	strd	r2, [r1]
    2974:	ldr	r3, [fp, #-536]	; 0xfffffde8
    2978:	ldr	r3, [r3, #4]
    297c:	sub	r3, r3, #1
    2980:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2984:	lsl	r3, r3, #4
    2988:	add	r3, r2, r3
    298c:	ldr	r3, [r3, #8]
    2990:	str	r3, [fp, #-8]
    2994:	ldr	r3, [fp, #-8]
    2998:	ldr	r3, [r3, #8]
    299c:	cmp	r3, #3
    29a0:	bne	2a04 <coda_mem_cursor_read_bits+0xac>
    29a4:	ldr	r2, [fp, #-536]	; 0xfffffde8
    29a8:	sub	r3, fp, #532	; 0x214
    29ac:	mov	r1, r2
    29b0:	mov	r2, #520	; 0x208
    29b4:	mov	r0, r3
    29b8:	bl	0 <memcpy>
    29bc:	sub	r3, fp, #532	; 0x214
    29c0:	mov	r0, r3
    29c4:	bl	0 <coda_cursor_use_base_type_of_special_type>
    29c8:	mov	r3, r0
    29cc:	cmp	r3, #0
    29d0:	beq	29dc <coda_mem_cursor_read_bits+0x84>
    29d4:	mvn	r3, #0
    29d8:	b	2a88 <coda_mem_cursor_read_bits+0x130>
    29dc:	sub	r3, fp, #548	; 0x224
    29e0:	mov	r1, r3
    29e4:	sub	r0, fp, #532	; 0x214
    29e8:	ldrd	r2, [fp, #4]
    29ec:	strd	r2, [sp]
    29f0:	ldrd	r2, [r1]
    29f4:	ldr	r1, [fp, #-540]	; 0xfffffde4
    29f8:	bl	0 <coda_cursor_read_bits>
    29fc:	mov	r3, r0
    2a00:	b	2a88 <coda_mem_cursor_read_bits+0x130>
    2a04:	ldr	r3, [fp, #-8]
    2a08:	ldr	r3, [r3, #8]
    2a0c:	cmp	r3, #2
    2a10:	bne	2a78 <coda_mem_cursor_read_bits+0x120>
    2a14:	ldr	r3, [fp, #-8]
    2a18:	ldr	r3, [r3, #4]
    2a1c:	ldr	r3, [r3]
    2a20:	cmp	r3, #0
    2a24:	bne	2a50 <coda_mem_cursor_read_bits+0xf8>
    2a28:	sub	r3, fp, #548	; 0x224
    2a2c:	mov	r1, r3
    2a30:	ldrd	r2, [fp, #4]
    2a34:	strd	r2, [sp]
    2a38:	ldrd	r2, [r1]
    2a3c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2a40:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2a44:	bl	0 <coda_ascii_cursor_read_bits>
    2a48:	mov	r3, r0
    2a4c:	b	2a88 <coda_mem_cursor_read_bits+0x130>
    2a50:	sub	r3, fp, #548	; 0x224
    2a54:	mov	r1, r3
    2a58:	ldrd	r2, [fp, #4]
    2a5c:	strd	r2, [sp]
    2a60:	ldrd	r2, [r1]
    2a64:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2a68:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2a6c:	bl	0 <coda_bin_cursor_read_bits>
    2a70:	mov	r3, r0
    2a74:	b	2a88 <coda_mem_cursor_read_bits+0x130>
    2a78:	ldr	r1, [pc, #20]	; 2a94 <coda_mem_cursor_read_bits+0x13c>
    2a7c:	mvn	r0, #104	; 0x68
    2a80:	bl	0 <coda_set_error>
    2a84:	mvn	r3, #0
    2a88:	mov	r0, r3
    2a8c:	sub	sp, fp, #4
    2a90:	pop	{fp, pc}
    2a94:	.word	0x00000244

00002a98 <coda_mem_cursor_read_bytes>:
    2a98:	push	{fp, lr}
    2a9c:	add	fp, sp, #4
    2aa0:	sub	sp, sp, #552	; 0x228
    2aa4:	str	r0, [fp, #-536]	; 0xfffffde8
    2aa8:	str	r1, [fp, #-540]	; 0xfffffde4
    2aac:	sub	r1, fp, #548	; 0x224
    2ab0:	strd	r2, [r1]
    2ab4:	ldr	r3, [fp, #-536]	; 0xfffffde8
    2ab8:	ldr	r3, [r3, #4]
    2abc:	sub	r3, r3, #1
    2ac0:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2ac4:	lsl	r3, r3, #4
    2ac8:	add	r3, r2, r3
    2acc:	ldr	r3, [r3, #8]
    2ad0:	str	r3, [fp, #-8]
    2ad4:	ldr	r3, [fp, #-8]
    2ad8:	ldr	r3, [r3, #8]
    2adc:	cmp	r3, #3
    2ae0:	bne	2b44 <coda_mem_cursor_read_bytes+0xac>
    2ae4:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2ae8:	sub	r3, fp, #532	; 0x214
    2aec:	mov	r1, r2
    2af0:	mov	r2, #520	; 0x208
    2af4:	mov	r0, r3
    2af8:	bl	0 <memcpy>
    2afc:	sub	r3, fp, #532	; 0x214
    2b00:	mov	r0, r3
    2b04:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2b08:	mov	r3, r0
    2b0c:	cmp	r3, #0
    2b10:	beq	2b1c <coda_mem_cursor_read_bytes+0x84>
    2b14:	mvn	r3, #0
    2b18:	b	2bdc <coda_mem_cursor_read_bytes+0x144>
    2b1c:	sub	r3, fp, #548	; 0x224
    2b20:	mov	r1, r3
    2b24:	sub	r0, fp, #532	; 0x214
    2b28:	ldrd	r2, [fp, #4]
    2b2c:	strd	r2, [sp]
    2b30:	ldrd	r2, [r1]
    2b34:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2b38:	bl	0 <coda_cursor_read_bytes>
    2b3c:	mov	r3, r0
    2b40:	b	2bdc <coda_mem_cursor_read_bytes+0x144>
    2b44:	ldr	r3, [fp, #-8]
    2b48:	ldr	r3, [r3, #8]
    2b4c:	cmp	r3, #2
    2b50:	bne	2bcc <coda_mem_cursor_read_bytes+0x134>
    2b54:	ldr	r3, [fp, #-8]
    2b58:	ldr	r3, [r3, #4]
    2b5c:	ldr	r3, [r3]
    2b60:	cmp	r3, #0
    2b64:	beq	2b7c <coda_mem_cursor_read_bytes+0xe4>
    2b68:	ldr	r3, [fp, #-8]
    2b6c:	ldr	r3, [r3, #4]
    2b70:	ldr	r3, [r3]
    2b74:	cmp	r3, #2
    2b78:	bne	2ba4 <coda_mem_cursor_read_bytes+0x10c>
    2b7c:	sub	r3, fp, #548	; 0x224
    2b80:	mov	r1, r3
    2b84:	ldrd	r2, [fp, #4]
    2b88:	strd	r2, [sp]
    2b8c:	ldrd	r2, [r1]
    2b90:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2b94:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2b98:	bl	0 <coda_ascii_cursor_read_bytes>
    2b9c:	mov	r3, r0
    2ba0:	b	2bdc <coda_mem_cursor_read_bytes+0x144>
    2ba4:	sub	r3, fp, #548	; 0x224
    2ba8:	mov	r1, r3
    2bac:	ldrd	r2, [fp, #4]
    2bb0:	strd	r2, [sp]
    2bb4:	ldrd	r2, [r1]
    2bb8:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2bbc:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2bc0:	bl	0 <coda_bin_cursor_read_bytes>
    2bc4:	mov	r3, r0
    2bc8:	b	2bdc <coda_mem_cursor_read_bytes+0x144>
    2bcc:	ldr	r1, [pc, #20]	; 2be8 <coda_mem_cursor_read_bytes+0x150>
    2bd0:	mvn	r0, #104	; 0x68
    2bd4:	bl	0 <coda_set_error>
    2bd8:	mvn	r3, #0
    2bdc:	mov	r0, r3
    2be0:	sub	sp, fp, #4
    2be4:	pop	{fp, pc}
    2be8:	.word	0x00000278

00002bec <coda_mem_cursor_read_int8_array>:
    2bec:	push	{fp, lr}
    2bf0:	add	fp, sp, #4
    2bf4:	sub	sp, sp, #32
    2bf8:	str	r0, [fp, #-16]
    2bfc:	str	r1, [fp, #-20]	; 0xffffffec
    2c00:	str	r2, [fp, #-24]	; 0xffffffe8
    2c04:	ldr	r3, [fp, #-16]
    2c08:	ldr	r3, [r3, #4]
    2c0c:	sub	r3, r3, #1
    2c10:	ldr	r2, [fp, #-16]
    2c14:	lsl	r3, r3, #4
    2c18:	add	r3, r2, r3
    2c1c:	ldr	r3, [r3, #8]
    2c20:	str	r3, [fp, #-8]
    2c24:	ldr	r3, [fp, #-8]
    2c28:	ldr	r3, [r3, #8]
    2c2c:	cmp	r3, #1
    2c30:	bne	2c58 <coda_mem_cursor_read_int8_array+0x6c>
    2c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c38:	str	r3, [sp]
    2c3c:	mov	r3, #1
    2c40:	ldr	r2, [fp, #-20]	; 0xffffffec
    2c44:	ldr	r1, [pc, #264]	; 2d54 <coda_mem_cursor_read_int8_array+0x168>
    2c48:	ldr	r0, [fp, #-16]
    2c4c:	bl	0 <read_array>
    2c50:	mov	r3, r0
    2c54:	b	2d48 <coda_mem_cursor_read_int8_array+0x15c>
    2c58:	ldr	r3, [fp, #-8]
    2c5c:	ldr	r3, [r3, #8]
    2c60:	cmp	r3, #2
    2c64:	beq	2c7c <coda_mem_cursor_read_int8_array+0x90>
    2c68:	ldr	r3, [pc, #232]	; 2d58 <coda_mem_cursor_read_int8_array+0x16c>
    2c6c:	ldr	r2, [pc, #232]	; 2d5c <coda_mem_cursor_read_int8_array+0x170>
    2c70:	ldr	r1, [pc, #232]	; 2d60 <coda_mem_cursor_read_int8_array+0x174>
    2c74:	ldr	r0, [pc, #232]	; 2d64 <coda_mem_cursor_read_int8_array+0x178>
    2c78:	bl	0 <__assert_fail>
    2c7c:	ldr	r3, [fp, #-8]
    2c80:	ldr	r3, [r3, #4]
    2c84:	ldr	r3, [r3, #40]	; 0x28
    2c88:	ldr	r3, [r3]
    2c8c:	cmp	r3, #1
    2c90:	bne	2cb8 <coda_mem_cursor_read_int8_array+0xcc>
    2c94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c98:	str	r3, [sp]
    2c9c:	mov	r3, #1
    2ca0:	ldr	r2, [fp, #-20]	; 0xffffffec
    2ca4:	ldr	r1, [pc, #188]	; 2d68 <coda_mem_cursor_read_int8_array+0x17c>
    2ca8:	ldr	r0, [fp, #-16]
    2cac:	bl	0 <read_array>
    2cb0:	mov	r3, r0
    2cb4:	b	2d48 <coda_mem_cursor_read_int8_array+0x15c>
    2cb8:	ldr	r3, [fp, #-8]
    2cbc:	ldr	r3, [r3, #4]
    2cc0:	ldr	r3, [r3, #40]	; 0x28
    2cc4:	ldr	r3, [r3]
    2cc8:	cmp	r3, #0
    2ccc:	beq	2ce4 <coda_mem_cursor_read_int8_array+0xf8>
    2cd0:	ldr	r3, [pc, #128]	; 2d58 <coda_mem_cursor_read_int8_array+0x16c>
    2cd4:	ldr	r2, [pc, #144]	; 2d6c <coda_mem_cursor_read_int8_array+0x180>
    2cd8:	ldr	r1, [pc, #128]	; 2d60 <coda_mem_cursor_read_int8_array+0x174>
    2cdc:	ldr	r0, [pc, #140]	; 2d70 <coda_mem_cursor_read_int8_array+0x184>
    2ce0:	bl	0 <__assert_fail>
    2ce4:	mov	r3, #0
    2ce8:	str	r3, [sp]
    2cec:	mov	r3, #1
    2cf0:	ldr	r2, [fp, #-20]	; 0xffffffec
    2cf4:	ldr	r1, [pc, #120]	; 2d74 <coda_mem_cursor_read_int8_array+0x188>
    2cf8:	ldr	r0, [fp, #-16]
    2cfc:	bl	0 <read_array>
    2d00:	mov	r3, r0
    2d04:	cmp	r3, #0
    2d08:	beq	2d14 <coda_mem_cursor_read_int8_array+0x128>
    2d0c:	mvn	r3, #0
    2d10:	b	2d48 <coda_mem_cursor_read_int8_array+0x15c>
    2d14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d18:	cmp	r3, #0
    2d1c:	beq	2d44 <coda_mem_cursor_read_int8_array+0x158>
    2d20:	mov	r2, #1
    2d24:	ldr	r1, [fp, #-20]	; 0xffffffec
    2d28:	ldr	r0, [fp, #-16]
    2d2c:	bl	508 <transpose_array>
    2d30:	mov	r3, r0
    2d34:	cmp	r3, #0
    2d38:	beq	2d44 <coda_mem_cursor_read_int8_array+0x158>
    2d3c:	mvn	r3, #0
    2d40:	b	2d48 <coda_mem_cursor_read_int8_array+0x15c>
    2d44:	mov	r3, #0
    2d48:	mov	r0, r3
    2d4c:	sub	sp, fp, #4
    2d50:	pop	{fp, pc}
    2d54:	.word	0x00000000
    2d58:	.word	0x00000608
    2d5c:	.word	0x0000028b
    2d60:	.word	0x000000c0
    2d64:	.word	0x00000110
    2d68:	.word	0x00000000
    2d6c:	.word	0x00000291
    2d70:	.word	0x000002ac
    2d74:	.word	0x00000000

00002d78 <coda_mem_cursor_read_uint8_array>:
    2d78:	push	{fp, lr}
    2d7c:	add	fp, sp, #4
    2d80:	sub	sp, sp, #32
    2d84:	str	r0, [fp, #-16]
    2d88:	str	r1, [fp, #-20]	; 0xffffffec
    2d8c:	str	r2, [fp, #-24]	; 0xffffffe8
    2d90:	ldr	r3, [fp, #-16]
    2d94:	ldr	r3, [r3, #4]
    2d98:	sub	r3, r3, #1
    2d9c:	ldr	r2, [fp, #-16]
    2da0:	lsl	r3, r3, #4
    2da4:	add	r3, r2, r3
    2da8:	ldr	r3, [r3, #8]
    2dac:	str	r3, [fp, #-8]
    2db0:	ldr	r3, [fp, #-8]
    2db4:	ldr	r3, [r3, #8]
    2db8:	cmp	r3, #1
    2dbc:	bne	2de4 <coda_mem_cursor_read_uint8_array+0x6c>
    2dc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2dc4:	str	r3, [sp]
    2dc8:	mov	r3, #1
    2dcc:	ldr	r2, [fp, #-20]	; 0xffffffec
    2dd0:	ldr	r1, [pc, #264]	; 2ee0 <coda_mem_cursor_read_uint8_array+0x168>
    2dd4:	ldr	r0, [fp, #-16]
    2dd8:	bl	0 <read_array>
    2ddc:	mov	r3, r0
    2de0:	b	2ed4 <coda_mem_cursor_read_uint8_array+0x15c>
    2de4:	ldr	r3, [fp, #-8]
    2de8:	ldr	r3, [r3, #8]
    2dec:	cmp	r3, #2
    2df0:	beq	2e08 <coda_mem_cursor_read_uint8_array+0x90>
    2df4:	ldr	r3, [pc, #232]	; 2ee4 <coda_mem_cursor_read_uint8_array+0x16c>
    2df8:	ldr	r2, [pc, #232]	; 2ee8 <coda_mem_cursor_read_uint8_array+0x170>
    2dfc:	ldr	r1, [pc, #232]	; 2eec <coda_mem_cursor_read_uint8_array+0x174>
    2e00:	ldr	r0, [pc, #232]	; 2ef0 <coda_mem_cursor_read_uint8_array+0x178>
    2e04:	bl	0 <__assert_fail>
    2e08:	ldr	r3, [fp, #-8]
    2e0c:	ldr	r3, [r3, #4]
    2e10:	ldr	r3, [r3, #40]	; 0x28
    2e14:	ldr	r3, [r3]
    2e18:	cmp	r3, #1
    2e1c:	bne	2e44 <coda_mem_cursor_read_uint8_array+0xcc>
    2e20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e24:	str	r3, [sp]
    2e28:	mov	r3, #1
    2e2c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2e30:	ldr	r1, [pc, #188]	; 2ef4 <coda_mem_cursor_read_uint8_array+0x17c>
    2e34:	ldr	r0, [fp, #-16]
    2e38:	bl	0 <read_array>
    2e3c:	mov	r3, r0
    2e40:	b	2ed4 <coda_mem_cursor_read_uint8_array+0x15c>
    2e44:	ldr	r3, [fp, #-8]
    2e48:	ldr	r3, [r3, #4]
    2e4c:	ldr	r3, [r3, #40]	; 0x28
    2e50:	ldr	r3, [r3]
    2e54:	cmp	r3, #0
    2e58:	beq	2e70 <coda_mem_cursor_read_uint8_array+0xf8>
    2e5c:	ldr	r3, [pc, #128]	; 2ee4 <coda_mem_cursor_read_uint8_array+0x16c>
    2e60:	mov	r2, #688	; 0x2b0
    2e64:	ldr	r1, [pc, #128]	; 2eec <coda_mem_cursor_read_uint8_array+0x174>
    2e68:	ldr	r0, [pc, #136]	; 2ef8 <coda_mem_cursor_read_uint8_array+0x180>
    2e6c:	bl	0 <__assert_fail>
    2e70:	mov	r3, #0
    2e74:	str	r3, [sp]
    2e78:	mov	r3, #1
    2e7c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2e80:	ldr	r1, [pc, #116]	; 2efc <coda_mem_cursor_read_uint8_array+0x184>
    2e84:	ldr	r0, [fp, #-16]
    2e88:	bl	0 <read_array>
    2e8c:	mov	r3, r0
    2e90:	cmp	r3, #0
    2e94:	beq	2ea0 <coda_mem_cursor_read_uint8_array+0x128>
    2e98:	mvn	r3, #0
    2e9c:	b	2ed4 <coda_mem_cursor_read_uint8_array+0x15c>
    2ea0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2ea4:	cmp	r3, #0
    2ea8:	beq	2ed0 <coda_mem_cursor_read_uint8_array+0x158>
    2eac:	mov	r2, #1
    2eb0:	ldr	r1, [fp, #-20]	; 0xffffffec
    2eb4:	ldr	r0, [fp, #-16]
    2eb8:	bl	508 <transpose_array>
    2ebc:	mov	r3, r0
    2ec0:	cmp	r3, #0
    2ec4:	beq	2ed0 <coda_mem_cursor_read_uint8_array+0x158>
    2ec8:	mvn	r3, #0
    2ecc:	b	2ed4 <coda_mem_cursor_read_uint8_array+0x15c>
    2ed0:	mov	r3, #0
    2ed4:	mov	r0, r3
    2ed8:	sub	sp, fp, #4
    2edc:	pop	{fp, pc}
    2ee0:	.word	0x00000000
    2ee4:	.word	0x00000628
    2ee8:	.word	0x000002aa
    2eec:	.word	0x000000c0
    2ef0:	.word	0x00000110
    2ef4:	.word	0x00000000
    2ef8:	.word	0x000002ac
    2efc:	.word	0x00000000

00002f00 <coda_mem_cursor_read_int16_array>:
    2f00:	push	{fp, lr}
    2f04:	add	fp, sp, #4
    2f08:	sub	sp, sp, #32
    2f0c:	str	r0, [fp, #-16]
    2f10:	str	r1, [fp, #-20]	; 0xffffffec
    2f14:	str	r2, [fp, #-24]	; 0xffffffe8
    2f18:	ldr	r3, [fp, #-16]
    2f1c:	ldr	r3, [r3, #4]
    2f20:	sub	r3, r3, #1
    2f24:	ldr	r2, [fp, #-16]
    2f28:	lsl	r3, r3, #4
    2f2c:	add	r3, r2, r3
    2f30:	ldr	r3, [r3, #8]
    2f34:	str	r3, [fp, #-8]
    2f38:	ldr	r3, [fp, #-8]
    2f3c:	ldr	r3, [r3, #8]
    2f40:	cmp	r3, #1
    2f44:	bne	2f6c <coda_mem_cursor_read_int16_array+0x6c>
    2f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f4c:	str	r3, [sp]
    2f50:	mov	r3, #2
    2f54:	ldr	r2, [fp, #-20]	; 0xffffffec
    2f58:	ldr	r1, [pc, #264]	; 3068 <coda_mem_cursor_read_int16_array+0x168>
    2f5c:	ldr	r0, [fp, #-16]
    2f60:	bl	0 <read_array>
    2f64:	mov	r3, r0
    2f68:	b	305c <coda_mem_cursor_read_int16_array+0x15c>
    2f6c:	ldr	r3, [fp, #-8]
    2f70:	ldr	r3, [r3, #8]
    2f74:	cmp	r3, #2
    2f78:	beq	2f90 <coda_mem_cursor_read_int16_array+0x90>
    2f7c:	ldr	r3, [pc, #232]	; 306c <coda_mem_cursor_read_int16_array+0x16c>
    2f80:	ldr	r2, [pc, #232]	; 3070 <coda_mem_cursor_read_int16_array+0x170>
    2f84:	ldr	r1, [pc, #232]	; 3074 <coda_mem_cursor_read_int16_array+0x174>
    2f88:	ldr	r0, [pc, #232]	; 3078 <coda_mem_cursor_read_int16_array+0x178>
    2f8c:	bl	0 <__assert_fail>
    2f90:	ldr	r3, [fp, #-8]
    2f94:	ldr	r3, [r3, #4]
    2f98:	ldr	r3, [r3, #40]	; 0x28
    2f9c:	ldr	r3, [r3]
    2fa0:	cmp	r3, #1
    2fa4:	bne	2fcc <coda_mem_cursor_read_int16_array+0xcc>
    2fa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fac:	str	r3, [sp]
    2fb0:	mov	r3, #2
    2fb4:	ldr	r2, [fp, #-20]	; 0xffffffec
    2fb8:	ldr	r1, [pc, #188]	; 307c <coda_mem_cursor_read_int16_array+0x17c>
    2fbc:	ldr	r0, [fp, #-16]
    2fc0:	bl	0 <read_array>
    2fc4:	mov	r3, r0
    2fc8:	b	305c <coda_mem_cursor_read_int16_array+0x15c>
    2fcc:	ldr	r3, [fp, #-8]
    2fd0:	ldr	r3, [r3, #4]
    2fd4:	ldr	r3, [r3, #40]	; 0x28
    2fd8:	ldr	r3, [r3]
    2fdc:	cmp	r3, #0
    2fe0:	beq	2ff8 <coda_mem_cursor_read_int16_array+0xf8>
    2fe4:	ldr	r3, [pc, #128]	; 306c <coda_mem_cursor_read_int16_array+0x16c>
    2fe8:	ldr	r2, [pc, #144]	; 3080 <coda_mem_cursor_read_int16_array+0x180>
    2fec:	ldr	r1, [pc, #128]	; 3074 <coda_mem_cursor_read_int16_array+0x174>
    2ff0:	ldr	r0, [pc, #140]	; 3084 <coda_mem_cursor_read_int16_array+0x184>
    2ff4:	bl	0 <__assert_fail>
    2ff8:	mov	r3, #0
    2ffc:	str	r3, [sp]
    3000:	mov	r3, #2
    3004:	ldr	r2, [fp, #-20]	; 0xffffffec
    3008:	ldr	r1, [pc, #120]	; 3088 <coda_mem_cursor_read_int16_array+0x188>
    300c:	ldr	r0, [fp, #-16]
    3010:	bl	0 <read_array>
    3014:	mov	r3, r0
    3018:	cmp	r3, #0
    301c:	beq	3028 <coda_mem_cursor_read_int16_array+0x128>
    3020:	mvn	r3, #0
    3024:	b	305c <coda_mem_cursor_read_int16_array+0x15c>
    3028:	ldr	r3, [fp, #-24]	; 0xffffffe8
    302c:	cmp	r3, #0
    3030:	beq	3058 <coda_mem_cursor_read_int16_array+0x158>
    3034:	mov	r2, #2
    3038:	ldr	r1, [fp, #-20]	; 0xffffffec
    303c:	ldr	r0, [fp, #-16]
    3040:	bl	508 <transpose_array>
    3044:	mov	r3, r0
    3048:	cmp	r3, #0
    304c:	beq	3058 <coda_mem_cursor_read_int16_array+0x158>
    3050:	mvn	r3, #0
    3054:	b	305c <coda_mem_cursor_read_int16_array+0x15c>
    3058:	mov	r3, #0
    305c:	mov	r0, r3
    3060:	sub	sp, fp, #4
    3064:	pop	{fp, pc}
    3068:	.word	0x00000000
    306c:	.word	0x0000064c
    3070:	.word	0x000002c9
    3074:	.word	0x000000c0
    3078:	.word	0x00000110
    307c:	.word	0x00000000
    3080:	.word	0x000002cf
    3084:	.word	0x000002ac
    3088:	.word	0x00000000

0000308c <coda_mem_cursor_read_uint16_array>:
    308c:	push	{fp, lr}
    3090:	add	fp, sp, #4
    3094:	sub	sp, sp, #32
    3098:	str	r0, [fp, #-16]
    309c:	str	r1, [fp, #-20]	; 0xffffffec
    30a0:	str	r2, [fp, #-24]	; 0xffffffe8
    30a4:	ldr	r3, [fp, #-16]
    30a8:	ldr	r3, [r3, #4]
    30ac:	sub	r3, r3, #1
    30b0:	ldr	r2, [fp, #-16]
    30b4:	lsl	r3, r3, #4
    30b8:	add	r3, r2, r3
    30bc:	ldr	r3, [r3, #8]
    30c0:	str	r3, [fp, #-8]
    30c4:	ldr	r3, [fp, #-8]
    30c8:	ldr	r3, [r3, #8]
    30cc:	cmp	r3, #1
    30d0:	bne	30f8 <coda_mem_cursor_read_uint16_array+0x6c>
    30d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    30d8:	str	r3, [sp]
    30dc:	mov	r3, #2
    30e0:	ldr	r2, [fp, #-20]	; 0xffffffec
    30e4:	ldr	r1, [pc, #264]	; 31f4 <coda_mem_cursor_read_uint16_array+0x168>
    30e8:	ldr	r0, [fp, #-16]
    30ec:	bl	0 <read_array>
    30f0:	mov	r3, r0
    30f4:	b	31e8 <coda_mem_cursor_read_uint16_array+0x15c>
    30f8:	ldr	r3, [fp, #-8]
    30fc:	ldr	r3, [r3, #8]
    3100:	cmp	r3, #2
    3104:	beq	311c <coda_mem_cursor_read_uint16_array+0x90>
    3108:	ldr	r3, [pc, #232]	; 31f8 <coda_mem_cursor_read_uint16_array+0x16c>
    310c:	mov	r2, #744	; 0x2e8
    3110:	ldr	r1, [pc, #228]	; 31fc <coda_mem_cursor_read_uint16_array+0x170>
    3114:	ldr	r0, [pc, #228]	; 3200 <coda_mem_cursor_read_uint16_array+0x174>
    3118:	bl	0 <__assert_fail>
    311c:	ldr	r3, [fp, #-8]
    3120:	ldr	r3, [r3, #4]
    3124:	ldr	r3, [r3, #40]	; 0x28
    3128:	ldr	r3, [r3]
    312c:	cmp	r3, #1
    3130:	bne	3158 <coda_mem_cursor_read_uint16_array+0xcc>
    3134:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3138:	str	r3, [sp]
    313c:	mov	r3, #2
    3140:	ldr	r2, [fp, #-20]	; 0xffffffec
    3144:	ldr	r1, [pc, #184]	; 3204 <coda_mem_cursor_read_uint16_array+0x178>
    3148:	ldr	r0, [fp, #-16]
    314c:	bl	0 <read_array>
    3150:	mov	r3, r0
    3154:	b	31e8 <coda_mem_cursor_read_uint16_array+0x15c>
    3158:	ldr	r3, [fp, #-8]
    315c:	ldr	r3, [r3, #4]
    3160:	ldr	r3, [r3, #40]	; 0x28
    3164:	ldr	r3, [r3]
    3168:	cmp	r3, #0
    316c:	beq	3184 <coda_mem_cursor_read_uint16_array+0xf8>
    3170:	ldr	r3, [pc, #128]	; 31f8 <coda_mem_cursor_read_uint16_array+0x16c>
    3174:	ldr	r2, [pc, #140]	; 3208 <coda_mem_cursor_read_uint16_array+0x17c>
    3178:	ldr	r1, [pc, #124]	; 31fc <coda_mem_cursor_read_uint16_array+0x170>
    317c:	ldr	r0, [pc, #136]	; 320c <coda_mem_cursor_read_uint16_array+0x180>
    3180:	bl	0 <__assert_fail>
    3184:	mov	r3, #0
    3188:	str	r3, [sp]
    318c:	mov	r3, #2
    3190:	ldr	r2, [fp, #-20]	; 0xffffffec
    3194:	ldr	r1, [pc, #116]	; 3210 <coda_mem_cursor_read_uint16_array+0x184>
    3198:	ldr	r0, [fp, #-16]
    319c:	bl	0 <read_array>
    31a0:	mov	r3, r0
    31a4:	cmp	r3, #0
    31a8:	beq	31b4 <coda_mem_cursor_read_uint16_array+0x128>
    31ac:	mvn	r3, #0
    31b0:	b	31e8 <coda_mem_cursor_read_uint16_array+0x15c>
    31b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    31b8:	cmp	r3, #0
    31bc:	beq	31e4 <coda_mem_cursor_read_uint16_array+0x158>
    31c0:	mov	r2, #2
    31c4:	ldr	r1, [fp, #-20]	; 0xffffffec
    31c8:	ldr	r0, [fp, #-16]
    31cc:	bl	508 <transpose_array>
    31d0:	mov	r3, r0
    31d4:	cmp	r3, #0
    31d8:	beq	31e4 <coda_mem_cursor_read_uint16_array+0x158>
    31dc:	mvn	r3, #0
    31e0:	b	31e8 <coda_mem_cursor_read_uint16_array+0x15c>
    31e4:	mov	r3, #0
    31e8:	mov	r0, r3
    31ec:	sub	sp, fp, #4
    31f0:	pop	{fp, pc}
    31f4:	.word	0x00000000
    31f8:	.word	0x00000670
    31fc:	.word	0x000000c0
    3200:	.word	0x00000110
    3204:	.word	0x00000000
    3208:	.word	0x000002ee
    320c:	.word	0x000002ac
    3210:	.word	0x00000000

00003214 <coda_mem_cursor_read_int32_array>:
    3214:	push	{fp, lr}
    3218:	add	fp, sp, #4
    321c:	sub	sp, sp, #32
    3220:	str	r0, [fp, #-16]
    3224:	str	r1, [fp, #-20]	; 0xffffffec
    3228:	str	r2, [fp, #-24]	; 0xffffffe8
    322c:	ldr	r3, [fp, #-16]
    3230:	ldr	r3, [r3, #4]
    3234:	sub	r3, r3, #1
    3238:	ldr	r2, [fp, #-16]
    323c:	lsl	r3, r3, #4
    3240:	add	r3, r2, r3
    3244:	ldr	r3, [r3, #8]
    3248:	str	r3, [fp, #-8]
    324c:	ldr	r3, [fp, #-8]
    3250:	ldr	r3, [r3, #8]
    3254:	cmp	r3, #1
    3258:	bne	3280 <coda_mem_cursor_read_int32_array+0x6c>
    325c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3260:	str	r3, [sp]
    3264:	mov	r3, #4
    3268:	ldr	r2, [fp, #-20]	; 0xffffffec
    326c:	ldr	r1, [pc, #264]	; 337c <coda_mem_cursor_read_int32_array+0x168>
    3270:	ldr	r0, [fp, #-16]
    3274:	bl	0 <read_array>
    3278:	mov	r3, r0
    327c:	b	3370 <coda_mem_cursor_read_int32_array+0x15c>
    3280:	ldr	r3, [fp, #-8]
    3284:	ldr	r3, [r3, #8]
    3288:	cmp	r3, #2
    328c:	beq	32a4 <coda_mem_cursor_read_int32_array+0x90>
    3290:	ldr	r3, [pc, #232]	; 3380 <coda_mem_cursor_read_int32_array+0x16c>
    3294:	ldr	r2, [pc, #232]	; 3384 <coda_mem_cursor_read_int32_array+0x170>
    3298:	ldr	r1, [pc, #232]	; 3388 <coda_mem_cursor_read_int32_array+0x174>
    329c:	ldr	r0, [pc, #232]	; 338c <coda_mem_cursor_read_int32_array+0x178>
    32a0:	bl	0 <__assert_fail>
    32a4:	ldr	r3, [fp, #-8]
    32a8:	ldr	r3, [r3, #4]
    32ac:	ldr	r3, [r3, #40]	; 0x28
    32b0:	ldr	r3, [r3]
    32b4:	cmp	r3, #1
    32b8:	bne	32e0 <coda_mem_cursor_read_int32_array+0xcc>
    32bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    32c0:	str	r3, [sp]
    32c4:	mov	r3, #4
    32c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    32cc:	ldr	r1, [pc, #188]	; 3390 <coda_mem_cursor_read_int32_array+0x17c>
    32d0:	ldr	r0, [fp, #-16]
    32d4:	bl	0 <read_array>
    32d8:	mov	r3, r0
    32dc:	b	3370 <coda_mem_cursor_read_int32_array+0x15c>
    32e0:	ldr	r3, [fp, #-8]
    32e4:	ldr	r3, [r3, #4]
    32e8:	ldr	r3, [r3, #40]	; 0x28
    32ec:	ldr	r3, [r3]
    32f0:	cmp	r3, #0
    32f4:	beq	330c <coda_mem_cursor_read_int32_array+0xf8>
    32f8:	ldr	r3, [pc, #128]	; 3380 <coda_mem_cursor_read_int32_array+0x16c>
    32fc:	ldr	r2, [pc, #144]	; 3394 <coda_mem_cursor_read_int32_array+0x180>
    3300:	ldr	r1, [pc, #128]	; 3388 <coda_mem_cursor_read_int32_array+0x174>
    3304:	ldr	r0, [pc, #140]	; 3398 <coda_mem_cursor_read_int32_array+0x184>
    3308:	bl	0 <__assert_fail>
    330c:	mov	r3, #0
    3310:	str	r3, [sp]
    3314:	mov	r3, #4
    3318:	ldr	r2, [fp, #-20]	; 0xffffffec
    331c:	ldr	r1, [pc, #120]	; 339c <coda_mem_cursor_read_int32_array+0x188>
    3320:	ldr	r0, [fp, #-16]
    3324:	bl	0 <read_array>
    3328:	mov	r3, r0
    332c:	cmp	r3, #0
    3330:	beq	333c <coda_mem_cursor_read_int32_array+0x128>
    3334:	mvn	r3, #0
    3338:	b	3370 <coda_mem_cursor_read_int32_array+0x15c>
    333c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3340:	cmp	r3, #0
    3344:	beq	336c <coda_mem_cursor_read_int32_array+0x158>
    3348:	mov	r2, #4
    334c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3350:	ldr	r0, [fp, #-16]
    3354:	bl	508 <transpose_array>
    3358:	mov	r3, r0
    335c:	cmp	r3, #0
    3360:	beq	336c <coda_mem_cursor_read_int32_array+0x158>
    3364:	mvn	r3, #0
    3368:	b	3370 <coda_mem_cursor_read_int32_array+0x15c>
    336c:	mov	r3, #0
    3370:	mov	r0, r3
    3374:	sub	sp, fp, #4
    3378:	pop	{fp, pc}
    337c:	.word	0x00000000
    3380:	.word	0x00000694
    3384:	.word	0x00000307
    3388:	.word	0x000000c0
    338c:	.word	0x00000110
    3390:	.word	0x00000000
    3394:	.word	0x0000030d
    3398:	.word	0x000002ac
    339c:	.word	0x00000000

000033a0 <coda_mem_cursor_read_uint32_array>:
    33a0:	push	{fp, lr}
    33a4:	add	fp, sp, #4
    33a8:	sub	sp, sp, #32
    33ac:	str	r0, [fp, #-16]
    33b0:	str	r1, [fp, #-20]	; 0xffffffec
    33b4:	str	r2, [fp, #-24]	; 0xffffffe8
    33b8:	ldr	r3, [fp, #-16]
    33bc:	ldr	r3, [r3, #4]
    33c0:	sub	r3, r3, #1
    33c4:	ldr	r2, [fp, #-16]
    33c8:	lsl	r3, r3, #4
    33cc:	add	r3, r2, r3
    33d0:	ldr	r3, [r3, #8]
    33d4:	str	r3, [fp, #-8]
    33d8:	ldr	r3, [fp, #-8]
    33dc:	ldr	r3, [r3, #8]
    33e0:	cmp	r3, #1
    33e4:	bne	340c <coda_mem_cursor_read_uint32_array+0x6c>
    33e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    33ec:	str	r3, [sp]
    33f0:	mov	r3, #4
    33f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    33f8:	ldr	r1, [pc, #264]	; 3508 <coda_mem_cursor_read_uint32_array+0x168>
    33fc:	ldr	r0, [fp, #-16]
    3400:	bl	0 <read_array>
    3404:	mov	r3, r0
    3408:	b	34fc <coda_mem_cursor_read_uint32_array+0x15c>
    340c:	ldr	r3, [fp, #-8]
    3410:	ldr	r3, [r3, #8]
    3414:	cmp	r3, #2
    3418:	beq	3430 <coda_mem_cursor_read_uint32_array+0x90>
    341c:	ldr	r3, [pc, #232]	; 350c <coda_mem_cursor_read_uint32_array+0x16c>
    3420:	ldr	r2, [pc, #232]	; 3510 <coda_mem_cursor_read_uint32_array+0x170>
    3424:	ldr	r1, [pc, #232]	; 3514 <coda_mem_cursor_read_uint32_array+0x174>
    3428:	ldr	r0, [pc, #232]	; 3518 <coda_mem_cursor_read_uint32_array+0x178>
    342c:	bl	0 <__assert_fail>
    3430:	ldr	r3, [fp, #-8]
    3434:	ldr	r3, [r3, #4]
    3438:	ldr	r3, [r3, #40]	; 0x28
    343c:	ldr	r3, [r3]
    3440:	cmp	r3, #1
    3444:	bne	346c <coda_mem_cursor_read_uint32_array+0xcc>
    3448:	ldr	r3, [fp, #-24]	; 0xffffffe8
    344c:	str	r3, [sp]
    3450:	mov	r3, #4
    3454:	ldr	r2, [fp, #-20]	; 0xffffffec
    3458:	ldr	r1, [pc, #188]	; 351c <coda_mem_cursor_read_uint32_array+0x17c>
    345c:	ldr	r0, [fp, #-16]
    3460:	bl	0 <read_array>
    3464:	mov	r3, r0
    3468:	b	34fc <coda_mem_cursor_read_uint32_array+0x15c>
    346c:	ldr	r3, [fp, #-8]
    3470:	ldr	r3, [r3, #4]
    3474:	ldr	r3, [r3, #40]	; 0x28
    3478:	ldr	r3, [r3]
    347c:	cmp	r3, #0
    3480:	beq	3498 <coda_mem_cursor_read_uint32_array+0xf8>
    3484:	ldr	r3, [pc, #128]	; 350c <coda_mem_cursor_read_uint32_array+0x16c>
    3488:	mov	r2, #812	; 0x32c
    348c:	ldr	r1, [pc, #128]	; 3514 <coda_mem_cursor_read_uint32_array+0x174>
    3490:	ldr	r0, [pc, #136]	; 3520 <coda_mem_cursor_read_uint32_array+0x180>
    3494:	bl	0 <__assert_fail>
    3498:	mov	r3, #0
    349c:	str	r3, [sp]
    34a0:	mov	r3, #4
    34a4:	ldr	r2, [fp, #-20]	; 0xffffffec
    34a8:	ldr	r1, [pc, #116]	; 3524 <coda_mem_cursor_read_uint32_array+0x184>
    34ac:	ldr	r0, [fp, #-16]
    34b0:	bl	0 <read_array>
    34b4:	mov	r3, r0
    34b8:	cmp	r3, #0
    34bc:	beq	34c8 <coda_mem_cursor_read_uint32_array+0x128>
    34c0:	mvn	r3, #0
    34c4:	b	34fc <coda_mem_cursor_read_uint32_array+0x15c>
    34c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    34cc:	cmp	r3, #0
    34d0:	beq	34f8 <coda_mem_cursor_read_uint32_array+0x158>
    34d4:	mov	r2, #4
    34d8:	ldr	r1, [fp, #-20]	; 0xffffffec
    34dc:	ldr	r0, [fp, #-16]
    34e0:	bl	508 <transpose_array>
    34e4:	mov	r3, r0
    34e8:	cmp	r3, #0
    34ec:	beq	34f8 <coda_mem_cursor_read_uint32_array+0x158>
    34f0:	mvn	r3, #0
    34f4:	b	34fc <coda_mem_cursor_read_uint32_array+0x15c>
    34f8:	mov	r3, #0
    34fc:	mov	r0, r3
    3500:	sub	sp, fp, #4
    3504:	pop	{fp, pc}
    3508:	.word	0x00000000
    350c:	.word	0x000006b8
    3510:	.word	0x00000326
    3514:	.word	0x000000c0
    3518:	.word	0x00000110
    351c:	.word	0x00000000
    3520:	.word	0x000002ac
    3524:	.word	0x00000000

00003528 <coda_mem_cursor_read_int64_array>:
    3528:	push	{fp, lr}
    352c:	add	fp, sp, #4
    3530:	sub	sp, sp, #32
    3534:	str	r0, [fp, #-16]
    3538:	str	r1, [fp, #-20]	; 0xffffffec
    353c:	str	r2, [fp, #-24]	; 0xffffffe8
    3540:	ldr	r3, [fp, #-16]
    3544:	ldr	r3, [r3, #4]
    3548:	sub	r3, r3, #1
    354c:	ldr	r2, [fp, #-16]
    3550:	lsl	r3, r3, #4
    3554:	add	r3, r2, r3
    3558:	ldr	r3, [r3, #8]
    355c:	str	r3, [fp, #-8]
    3560:	ldr	r3, [fp, #-8]
    3564:	ldr	r3, [r3, #8]
    3568:	cmp	r3, #1
    356c:	bne	3594 <coda_mem_cursor_read_int64_array+0x6c>
    3570:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3574:	str	r3, [sp]
    3578:	mov	r3, #8
    357c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3580:	ldr	r1, [pc, #264]	; 3690 <coda_mem_cursor_read_int64_array+0x168>
    3584:	ldr	r0, [fp, #-16]
    3588:	bl	0 <read_array>
    358c:	mov	r3, r0
    3590:	b	3684 <coda_mem_cursor_read_int64_array+0x15c>
    3594:	ldr	r3, [fp, #-8]
    3598:	ldr	r3, [r3, #8]
    359c:	cmp	r3, #2
    35a0:	beq	35b8 <coda_mem_cursor_read_int64_array+0x90>
    35a4:	ldr	r3, [pc, #232]	; 3694 <coda_mem_cursor_read_int64_array+0x16c>
    35a8:	ldr	r2, [pc, #232]	; 3698 <coda_mem_cursor_read_int64_array+0x170>
    35ac:	ldr	r1, [pc, #232]	; 369c <coda_mem_cursor_read_int64_array+0x174>
    35b0:	ldr	r0, [pc, #232]	; 36a0 <coda_mem_cursor_read_int64_array+0x178>
    35b4:	bl	0 <__assert_fail>
    35b8:	ldr	r3, [fp, #-8]
    35bc:	ldr	r3, [r3, #4]
    35c0:	ldr	r3, [r3, #40]	; 0x28
    35c4:	ldr	r3, [r3]
    35c8:	cmp	r3, #1
    35cc:	bne	35f4 <coda_mem_cursor_read_int64_array+0xcc>
    35d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    35d4:	str	r3, [sp]
    35d8:	mov	r3, #8
    35dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    35e0:	ldr	r1, [pc, #188]	; 36a4 <coda_mem_cursor_read_int64_array+0x17c>
    35e4:	ldr	r0, [fp, #-16]
    35e8:	bl	0 <read_array>
    35ec:	mov	r3, r0
    35f0:	b	3684 <coda_mem_cursor_read_int64_array+0x15c>
    35f4:	ldr	r3, [fp, #-8]
    35f8:	ldr	r3, [r3, #4]
    35fc:	ldr	r3, [r3, #40]	; 0x28
    3600:	ldr	r3, [r3]
    3604:	cmp	r3, #0
    3608:	beq	3620 <coda_mem_cursor_read_int64_array+0xf8>
    360c:	ldr	r3, [pc, #128]	; 3694 <coda_mem_cursor_read_int64_array+0x16c>
    3610:	ldr	r2, [pc, #144]	; 36a8 <coda_mem_cursor_read_int64_array+0x180>
    3614:	ldr	r1, [pc, #128]	; 369c <coda_mem_cursor_read_int64_array+0x174>
    3618:	ldr	r0, [pc, #140]	; 36ac <coda_mem_cursor_read_int64_array+0x184>
    361c:	bl	0 <__assert_fail>
    3620:	mov	r3, #0
    3624:	str	r3, [sp]
    3628:	mov	r3, #8
    362c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3630:	ldr	r1, [pc, #120]	; 36b0 <coda_mem_cursor_read_int64_array+0x188>
    3634:	ldr	r0, [fp, #-16]
    3638:	bl	0 <read_array>
    363c:	mov	r3, r0
    3640:	cmp	r3, #0
    3644:	beq	3650 <coda_mem_cursor_read_int64_array+0x128>
    3648:	mvn	r3, #0
    364c:	b	3684 <coda_mem_cursor_read_int64_array+0x15c>
    3650:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3654:	cmp	r3, #0
    3658:	beq	3680 <coda_mem_cursor_read_int64_array+0x158>
    365c:	mov	r2, #8
    3660:	ldr	r1, [fp, #-20]	; 0xffffffec
    3664:	ldr	r0, [fp, #-16]
    3668:	bl	508 <transpose_array>
    366c:	mov	r3, r0
    3670:	cmp	r3, #0
    3674:	beq	3680 <coda_mem_cursor_read_int64_array+0x158>
    3678:	mvn	r3, #0
    367c:	b	3684 <coda_mem_cursor_read_int64_array+0x15c>
    3680:	mov	r3, #0
    3684:	mov	r0, r3
    3688:	sub	sp, fp, #4
    368c:	pop	{fp, pc}
    3690:	.word	0x00000000
    3694:	.word	0x000006dc
    3698:	.word	0x00000345
    369c:	.word	0x000000c0
    36a0:	.word	0x00000110
    36a4:	.word	0x00000000
    36a8:	.word	0x0000034b
    36ac:	.word	0x000002ac
    36b0:	.word	0x00000000

000036b4 <coda_mem_cursor_read_uint64_array>:
    36b4:	push	{fp, lr}
    36b8:	add	fp, sp, #4
    36bc:	sub	sp, sp, #32
    36c0:	str	r0, [fp, #-16]
    36c4:	str	r1, [fp, #-20]	; 0xffffffec
    36c8:	str	r2, [fp, #-24]	; 0xffffffe8
    36cc:	ldr	r3, [fp, #-16]
    36d0:	ldr	r3, [r3, #4]
    36d4:	sub	r3, r3, #1
    36d8:	ldr	r2, [fp, #-16]
    36dc:	lsl	r3, r3, #4
    36e0:	add	r3, r2, r3
    36e4:	ldr	r3, [r3, #8]
    36e8:	str	r3, [fp, #-8]
    36ec:	ldr	r3, [fp, #-8]
    36f0:	ldr	r3, [r3, #8]
    36f4:	cmp	r3, #1
    36f8:	bne	3720 <coda_mem_cursor_read_uint64_array+0x6c>
    36fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3700:	str	r3, [sp]
    3704:	mov	r3, #8
    3708:	ldr	r2, [fp, #-20]	; 0xffffffec
    370c:	ldr	r1, [pc, #264]	; 381c <coda_mem_cursor_read_uint64_array+0x168>
    3710:	ldr	r0, [fp, #-16]
    3714:	bl	0 <read_array>
    3718:	mov	r3, r0
    371c:	b	3810 <coda_mem_cursor_read_uint64_array+0x15c>
    3720:	ldr	r3, [fp, #-8]
    3724:	ldr	r3, [r3, #8]
    3728:	cmp	r3, #2
    372c:	beq	3744 <coda_mem_cursor_read_uint64_array+0x90>
    3730:	ldr	r3, [pc, #232]	; 3820 <coda_mem_cursor_read_uint64_array+0x16c>
    3734:	mov	r2, #868	; 0x364
    3738:	ldr	r1, [pc, #228]	; 3824 <coda_mem_cursor_read_uint64_array+0x170>
    373c:	ldr	r0, [pc, #228]	; 3828 <coda_mem_cursor_read_uint64_array+0x174>
    3740:	bl	0 <__assert_fail>
    3744:	ldr	r3, [fp, #-8]
    3748:	ldr	r3, [r3, #4]
    374c:	ldr	r3, [r3, #40]	; 0x28
    3750:	ldr	r3, [r3]
    3754:	cmp	r3, #1
    3758:	bne	3780 <coda_mem_cursor_read_uint64_array+0xcc>
    375c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3760:	str	r3, [sp]
    3764:	mov	r3, #8
    3768:	ldr	r2, [fp, #-20]	; 0xffffffec
    376c:	ldr	r1, [pc, #184]	; 382c <coda_mem_cursor_read_uint64_array+0x178>
    3770:	ldr	r0, [fp, #-16]
    3774:	bl	0 <read_array>
    3778:	mov	r3, r0
    377c:	b	3810 <coda_mem_cursor_read_uint64_array+0x15c>
    3780:	ldr	r3, [fp, #-8]
    3784:	ldr	r3, [r3, #4]
    3788:	ldr	r3, [r3, #40]	; 0x28
    378c:	ldr	r3, [r3]
    3790:	cmp	r3, #0
    3794:	beq	37ac <coda_mem_cursor_read_uint64_array+0xf8>
    3798:	ldr	r3, [pc, #128]	; 3820 <coda_mem_cursor_read_uint64_array+0x16c>
    379c:	ldr	r2, [pc, #140]	; 3830 <coda_mem_cursor_read_uint64_array+0x17c>
    37a0:	ldr	r1, [pc, #124]	; 3824 <coda_mem_cursor_read_uint64_array+0x170>
    37a4:	ldr	r0, [pc, #136]	; 3834 <coda_mem_cursor_read_uint64_array+0x180>
    37a8:	bl	0 <__assert_fail>
    37ac:	mov	r3, #0
    37b0:	str	r3, [sp]
    37b4:	mov	r3, #8
    37b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    37bc:	ldr	r1, [pc, #116]	; 3838 <coda_mem_cursor_read_uint64_array+0x184>
    37c0:	ldr	r0, [fp, #-16]
    37c4:	bl	0 <read_array>
    37c8:	mov	r3, r0
    37cc:	cmp	r3, #0
    37d0:	beq	37dc <coda_mem_cursor_read_uint64_array+0x128>
    37d4:	mvn	r3, #0
    37d8:	b	3810 <coda_mem_cursor_read_uint64_array+0x15c>
    37dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37e0:	cmp	r3, #0
    37e4:	beq	380c <coda_mem_cursor_read_uint64_array+0x158>
    37e8:	mov	r2, #8
    37ec:	ldr	r1, [fp, #-20]	; 0xffffffec
    37f0:	ldr	r0, [fp, #-16]
    37f4:	bl	508 <transpose_array>
    37f8:	mov	r3, r0
    37fc:	cmp	r3, #0
    3800:	beq	380c <coda_mem_cursor_read_uint64_array+0x158>
    3804:	mvn	r3, #0
    3808:	b	3810 <coda_mem_cursor_read_uint64_array+0x15c>
    380c:	mov	r3, #0
    3810:	mov	r0, r3
    3814:	sub	sp, fp, #4
    3818:	pop	{fp, pc}
    381c:	.word	0x00000000
    3820:	.word	0x00000700
    3824:	.word	0x000000c0
    3828:	.word	0x00000110
    382c:	.word	0x00000000
    3830:	.word	0x0000036a
    3834:	.word	0x000002ac
    3838:	.word	0x00000000

0000383c <coda_mem_cursor_read_float_array>:
    383c:	push	{fp, lr}
    3840:	add	fp, sp, #4
    3844:	sub	sp, sp, #32
    3848:	str	r0, [fp, #-16]
    384c:	str	r1, [fp, #-20]	; 0xffffffec
    3850:	str	r2, [fp, #-24]	; 0xffffffe8
    3854:	ldr	r3, [fp, #-16]
    3858:	ldr	r3, [r3, #4]
    385c:	sub	r3, r3, #1
    3860:	ldr	r2, [fp, #-16]
    3864:	lsl	r3, r3, #4
    3868:	add	r3, r2, r3
    386c:	ldr	r3, [r3, #8]
    3870:	str	r3, [fp, #-8]
    3874:	ldr	r3, [fp, #-8]
    3878:	ldr	r3, [r3, #8]
    387c:	cmp	r3, #1
    3880:	bne	38a8 <coda_mem_cursor_read_float_array+0x6c>
    3884:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3888:	str	r3, [sp]
    388c:	mov	r3, #4
    3890:	ldr	r2, [fp, #-20]	; 0xffffffec
    3894:	ldr	r1, [pc, #264]	; 39a4 <coda_mem_cursor_read_float_array+0x168>
    3898:	ldr	r0, [fp, #-16]
    389c:	bl	0 <read_array>
    38a0:	mov	r3, r0
    38a4:	b	3998 <coda_mem_cursor_read_float_array+0x15c>
    38a8:	ldr	r3, [fp, #-8]
    38ac:	ldr	r3, [r3, #8]
    38b0:	cmp	r3, #2
    38b4:	beq	38cc <coda_mem_cursor_read_float_array+0x90>
    38b8:	ldr	r3, [pc, #232]	; 39a8 <coda_mem_cursor_read_float_array+0x16c>
    38bc:	ldr	r2, [pc, #232]	; 39ac <coda_mem_cursor_read_float_array+0x170>
    38c0:	ldr	r1, [pc, #232]	; 39b0 <coda_mem_cursor_read_float_array+0x174>
    38c4:	ldr	r0, [pc, #232]	; 39b4 <coda_mem_cursor_read_float_array+0x178>
    38c8:	bl	0 <__assert_fail>
    38cc:	ldr	r3, [fp, #-8]
    38d0:	ldr	r3, [r3, #4]
    38d4:	ldr	r3, [r3, #40]	; 0x28
    38d8:	ldr	r3, [r3]
    38dc:	cmp	r3, #1
    38e0:	bne	3908 <coda_mem_cursor_read_float_array+0xcc>
    38e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    38e8:	str	r3, [sp]
    38ec:	mov	r3, #4
    38f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    38f4:	ldr	r1, [pc, #188]	; 39b8 <coda_mem_cursor_read_float_array+0x17c>
    38f8:	ldr	r0, [fp, #-16]
    38fc:	bl	0 <read_array>
    3900:	mov	r3, r0
    3904:	b	3998 <coda_mem_cursor_read_float_array+0x15c>
    3908:	ldr	r3, [fp, #-8]
    390c:	ldr	r3, [r3, #4]
    3910:	ldr	r3, [r3, #40]	; 0x28
    3914:	ldr	r3, [r3]
    3918:	cmp	r3, #0
    391c:	beq	3934 <coda_mem_cursor_read_float_array+0xf8>
    3920:	ldr	r3, [pc, #128]	; 39a8 <coda_mem_cursor_read_float_array+0x16c>
    3924:	ldr	r2, [pc, #144]	; 39bc <coda_mem_cursor_read_float_array+0x180>
    3928:	ldr	r1, [pc, #128]	; 39b0 <coda_mem_cursor_read_float_array+0x174>
    392c:	ldr	r0, [pc, #140]	; 39c0 <coda_mem_cursor_read_float_array+0x184>
    3930:	bl	0 <__assert_fail>
    3934:	mov	r3, #0
    3938:	str	r3, [sp]
    393c:	mov	r3, #4
    3940:	ldr	r2, [fp, #-20]	; 0xffffffec
    3944:	ldr	r1, [pc, #120]	; 39c4 <coda_mem_cursor_read_float_array+0x188>
    3948:	ldr	r0, [fp, #-16]
    394c:	bl	0 <read_array>
    3950:	mov	r3, r0
    3954:	cmp	r3, #0
    3958:	beq	3964 <coda_mem_cursor_read_float_array+0x128>
    395c:	mvn	r3, #0
    3960:	b	3998 <coda_mem_cursor_read_float_array+0x15c>
    3964:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3968:	cmp	r3, #0
    396c:	beq	3994 <coda_mem_cursor_read_float_array+0x158>
    3970:	mov	r2, #4
    3974:	ldr	r1, [fp, #-20]	; 0xffffffec
    3978:	ldr	r0, [fp, #-16]
    397c:	bl	508 <transpose_array>
    3980:	mov	r3, r0
    3984:	cmp	r3, #0
    3988:	beq	3994 <coda_mem_cursor_read_float_array+0x158>
    398c:	mvn	r3, #0
    3990:	b	3998 <coda_mem_cursor_read_float_array+0x15c>
    3994:	mov	r3, #0
    3998:	mov	r0, r3
    399c:	sub	sp, fp, #4
    39a0:	pop	{fp, pc}
    39a4:	.word	0x00000000
    39a8:	.word	0x00000724
    39ac:	.word	0x00000383
    39b0:	.word	0x000000c0
    39b4:	.word	0x00000110
    39b8:	.word	0x00000000
    39bc:	.word	0x00000389
    39c0:	.word	0x000002ac
    39c4:	.word	0x00000000

000039c8 <coda_mem_cursor_read_double_array>:
    39c8:	push	{fp, lr}
    39cc:	add	fp, sp, #4
    39d0:	sub	sp, sp, #32
    39d4:	str	r0, [fp, #-16]
    39d8:	str	r1, [fp, #-20]	; 0xffffffec
    39dc:	str	r2, [fp, #-24]	; 0xffffffe8
    39e0:	ldr	r3, [fp, #-16]
    39e4:	ldr	r3, [r3, #4]
    39e8:	sub	r3, r3, #1
    39ec:	ldr	r2, [fp, #-16]
    39f0:	lsl	r3, r3, #4
    39f4:	add	r3, r2, r3
    39f8:	ldr	r3, [r3, #8]
    39fc:	str	r3, [fp, #-8]
    3a00:	ldr	r3, [fp, #-8]
    3a04:	ldr	r3, [r3, #8]
    3a08:	cmp	r3, #1
    3a0c:	bne	3a34 <coda_mem_cursor_read_double_array+0x6c>
    3a10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a14:	str	r3, [sp]
    3a18:	mov	r3, #8
    3a1c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3a20:	ldr	r1, [pc, #264]	; 3b30 <coda_mem_cursor_read_double_array+0x168>
    3a24:	ldr	r0, [fp, #-16]
    3a28:	bl	0 <read_array>
    3a2c:	mov	r3, r0
    3a30:	b	3b24 <coda_mem_cursor_read_double_array+0x15c>
    3a34:	ldr	r3, [fp, #-8]
    3a38:	ldr	r3, [r3, #8]
    3a3c:	cmp	r3, #2
    3a40:	beq	3a58 <coda_mem_cursor_read_double_array+0x90>
    3a44:	ldr	r3, [pc, #232]	; 3b34 <coda_mem_cursor_read_double_array+0x16c>
    3a48:	ldr	r2, [pc, #232]	; 3b38 <coda_mem_cursor_read_double_array+0x170>
    3a4c:	ldr	r1, [pc, #232]	; 3b3c <coda_mem_cursor_read_double_array+0x174>
    3a50:	ldr	r0, [pc, #232]	; 3b40 <coda_mem_cursor_read_double_array+0x178>
    3a54:	bl	0 <__assert_fail>
    3a58:	ldr	r3, [fp, #-8]
    3a5c:	ldr	r3, [r3, #4]
    3a60:	ldr	r3, [r3, #40]	; 0x28
    3a64:	ldr	r3, [r3]
    3a68:	cmp	r3, #1
    3a6c:	bne	3a94 <coda_mem_cursor_read_double_array+0xcc>
    3a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a74:	str	r3, [sp]
    3a78:	mov	r3, #8
    3a7c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3a80:	ldr	r1, [pc, #188]	; 3b44 <coda_mem_cursor_read_double_array+0x17c>
    3a84:	ldr	r0, [fp, #-16]
    3a88:	bl	0 <read_array>
    3a8c:	mov	r3, r0
    3a90:	b	3b24 <coda_mem_cursor_read_double_array+0x15c>
    3a94:	ldr	r3, [fp, #-8]
    3a98:	ldr	r3, [r3, #4]
    3a9c:	ldr	r3, [r3, #40]	; 0x28
    3aa0:	ldr	r3, [r3]
    3aa4:	cmp	r3, #0
    3aa8:	beq	3ac0 <coda_mem_cursor_read_double_array+0xf8>
    3aac:	ldr	r3, [pc, #128]	; 3b34 <coda_mem_cursor_read_double_array+0x16c>
    3ab0:	mov	r2, #936	; 0x3a8
    3ab4:	ldr	r1, [pc, #128]	; 3b3c <coda_mem_cursor_read_double_array+0x174>
    3ab8:	ldr	r0, [pc, #136]	; 3b48 <coda_mem_cursor_read_double_array+0x180>
    3abc:	bl	0 <__assert_fail>
    3ac0:	mov	r3, #0
    3ac4:	str	r3, [sp]
    3ac8:	mov	r3, #8
    3acc:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ad0:	ldr	r1, [pc, #116]	; 3b4c <coda_mem_cursor_read_double_array+0x184>
    3ad4:	ldr	r0, [fp, #-16]
    3ad8:	bl	0 <read_array>
    3adc:	mov	r3, r0
    3ae0:	cmp	r3, #0
    3ae4:	beq	3af0 <coda_mem_cursor_read_double_array+0x128>
    3ae8:	mvn	r3, #0
    3aec:	b	3b24 <coda_mem_cursor_read_double_array+0x15c>
    3af0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3af4:	cmp	r3, #0
    3af8:	beq	3b20 <coda_mem_cursor_read_double_array+0x158>
    3afc:	mov	r2, #8
    3b00:	ldr	r1, [fp, #-20]	; 0xffffffec
    3b04:	ldr	r0, [fp, #-16]
    3b08:	bl	508 <transpose_array>
    3b0c:	mov	r3, r0
    3b10:	cmp	r3, #0
    3b14:	beq	3b20 <coda_mem_cursor_read_double_array+0x158>
    3b18:	mvn	r3, #0
    3b1c:	b	3b24 <coda_mem_cursor_read_double_array+0x15c>
    3b20:	mov	r3, #0
    3b24:	mov	r0, r3
    3b28:	sub	sp, fp, #4
    3b2c:	pop	{fp, pc}
    3b30:	.word	0x00000000
    3b34:	.word	0x00000748
    3b38:	.word	0x000003a2
    3b3c:	.word	0x000000c0
    3b40:	.word	0x00000110
    3b44:	.word	0x00000000
    3b48:	.word	0x000002ac
    3b4c:	.word	0x00000000

00003b50 <coda_mem_cursor_read_char_array>:
    3b50:	push	{fp, lr}
    3b54:	add	fp, sp, #4
    3b58:	sub	sp, sp, #32
    3b5c:	str	r0, [fp, #-16]
    3b60:	str	r1, [fp, #-20]	; 0xffffffec
    3b64:	str	r2, [fp, #-24]	; 0xffffffe8
    3b68:	ldr	r3, [fp, #-16]
    3b6c:	ldr	r3, [r3, #4]
    3b70:	sub	r3, r3, #1
    3b74:	ldr	r2, [fp, #-16]
    3b78:	lsl	r3, r3, #4
    3b7c:	add	r3, r2, r3
    3b80:	ldr	r3, [r3, #8]
    3b84:	str	r3, [fp, #-8]
    3b88:	ldr	r3, [fp, #-8]
    3b8c:	ldr	r3, [r3, #8]
    3b90:	cmp	r3, #1
    3b94:	bne	3bbc <coda_mem_cursor_read_char_array+0x6c>
    3b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3b9c:	str	r3, [sp]
    3ba0:	mov	r3, #1
    3ba4:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ba8:	ldr	r1, [pc, #264]	; 3cb8 <coda_mem_cursor_read_char_array+0x168>
    3bac:	ldr	r0, [fp, #-16]
    3bb0:	bl	0 <read_array>
    3bb4:	mov	r3, r0
    3bb8:	b	3cac <coda_mem_cursor_read_char_array+0x15c>
    3bbc:	ldr	r3, [fp, #-8]
    3bc0:	ldr	r3, [r3, #8]
    3bc4:	cmp	r3, #2
    3bc8:	beq	3be0 <coda_mem_cursor_read_char_array+0x90>
    3bcc:	ldr	r3, [pc, #232]	; 3cbc <coda_mem_cursor_read_char_array+0x16c>
    3bd0:	mov	r2, #960	; 0x3c0
    3bd4:	ldr	r1, [pc, #228]	; 3cc0 <coda_mem_cursor_read_char_array+0x170>
    3bd8:	ldr	r0, [pc, #228]	; 3cc4 <coda_mem_cursor_read_char_array+0x174>
    3bdc:	bl	0 <__assert_fail>
    3be0:	ldr	r3, [fp, #-8]
    3be4:	ldr	r3, [r3, #4]
    3be8:	ldr	r3, [r3, #40]	; 0x28
    3bec:	ldr	r3, [r3]
    3bf0:	cmp	r3, #1
    3bf4:	bne	3c1c <coda_mem_cursor_read_char_array+0xcc>
    3bf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3bfc:	str	r3, [sp]
    3c00:	mov	r3, #1
    3c04:	ldr	r2, [fp, #-20]	; 0xffffffec
    3c08:	ldr	r1, [pc, #184]	; 3cc8 <coda_mem_cursor_read_char_array+0x178>
    3c0c:	ldr	r0, [fp, #-16]
    3c10:	bl	0 <read_array>
    3c14:	mov	r3, r0
    3c18:	b	3cac <coda_mem_cursor_read_char_array+0x15c>
    3c1c:	ldr	r3, [fp, #-8]
    3c20:	ldr	r3, [r3, #4]
    3c24:	ldr	r3, [r3, #40]	; 0x28
    3c28:	ldr	r3, [r3]
    3c2c:	cmp	r3, #0
    3c30:	beq	3c48 <coda_mem_cursor_read_char_array+0xf8>
    3c34:	ldr	r3, [pc, #128]	; 3cbc <coda_mem_cursor_read_char_array+0x16c>
    3c38:	ldr	r2, [pc, #140]	; 3ccc <coda_mem_cursor_read_char_array+0x17c>
    3c3c:	ldr	r1, [pc, #124]	; 3cc0 <coda_mem_cursor_read_char_array+0x170>
    3c40:	ldr	r0, [pc, #136]	; 3cd0 <coda_mem_cursor_read_char_array+0x180>
    3c44:	bl	0 <__assert_fail>
    3c48:	mov	r3, #0
    3c4c:	str	r3, [sp]
    3c50:	mov	r3, #1
    3c54:	ldr	r2, [fp, #-20]	; 0xffffffec
    3c58:	ldr	r1, [pc, #116]	; 3cd4 <coda_mem_cursor_read_char_array+0x184>
    3c5c:	ldr	r0, [fp, #-16]
    3c60:	bl	0 <read_array>
    3c64:	mov	r3, r0
    3c68:	cmp	r3, #0
    3c6c:	beq	3c78 <coda_mem_cursor_read_char_array+0x128>
    3c70:	mvn	r3, #0
    3c74:	b	3cac <coda_mem_cursor_read_char_array+0x15c>
    3c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c7c:	cmp	r3, #0
    3c80:	beq	3ca8 <coda_mem_cursor_read_char_array+0x158>
    3c84:	mov	r2, #1
    3c88:	ldr	r1, [fp, #-20]	; 0xffffffec
    3c8c:	ldr	r0, [fp, #-16]
    3c90:	bl	508 <transpose_array>
    3c94:	mov	r3, r0
    3c98:	cmp	r3, #0
    3c9c:	beq	3ca8 <coda_mem_cursor_read_char_array+0x158>
    3ca0:	mvn	r3, #0
    3ca4:	b	3cac <coda_mem_cursor_read_char_array+0x15c>
    3ca8:	mov	r3, #0
    3cac:	mov	r0, r3
    3cb0:	sub	sp, fp, #4
    3cb4:	pop	{fp, pc}
    3cb8:	.word	0x00000000
    3cbc:	.word	0x0000076c
    3cc0:	.word	0x000000c0
    3cc4:	.word	0x00000110
    3cc8:	.word	0x00000000
    3ccc:	.word	0x000003c6
    3cd0:	.word	0x000002ac
    3cd4:	.word	0x00000000

00003cd8 <coda_mem_cursor_read_int8_partial_array>:
    3cd8:	push	{fp, lr}
    3cdc:	add	fp, sp, #4
    3ce0:	sub	sp, sp, #32
    3ce4:	str	r0, [fp, #-16]
    3ce8:	str	r1, [fp, #-20]	; 0xffffffec
    3cec:	str	r2, [fp, #-24]	; 0xffffffe8
    3cf0:	str	r3, [fp, #-28]	; 0xffffffe4
    3cf4:	ldr	r3, [fp, #-16]
    3cf8:	ldr	r3, [r3, #4]
    3cfc:	sub	r3, r3, #1
    3d00:	ldr	r2, [fp, #-16]
    3d04:	lsl	r3, r3, #4
    3d08:	add	r3, r2, r3
    3d0c:	ldr	r3, [r3, #8]
    3d10:	str	r3, [fp, #-8]
    3d14:	ldr	r3, [fp, #-8]
    3d18:	ldr	r3, [r3, #8]
    3d1c:	cmp	r3, #1
    3d20:	bne	3d50 <coda_mem_cursor_read_int8_partial_array+0x78>
    3d24:	mov	r3, #1
    3d28:	str	r3, [sp, #4]
    3d2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3d30:	str	r3, [sp]
    3d34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d38:	ldr	r2, [fp, #-20]	; 0xffffffec
    3d3c:	ldr	r1, [pc, #212]	; 3e18 <coda_mem_cursor_read_int8_partial_array+0x140>
    3d40:	ldr	r0, [fp, #-16]
    3d44:	bl	3fc <read_partial_array>
    3d48:	mov	r3, r0
    3d4c:	b	3e0c <coda_mem_cursor_read_int8_partial_array+0x134>
    3d50:	ldr	r3, [fp, #-8]
    3d54:	ldr	r3, [r3, #8]
    3d58:	cmp	r3, #2
    3d5c:	beq	3d74 <coda_mem_cursor_read_int8_partial_array+0x9c>
    3d60:	ldr	r3, [pc, #180]	; 3e1c <coda_mem_cursor_read_int8_partial_array+0x144>
    3d64:	ldr	r2, [pc, #180]	; 3e20 <coda_mem_cursor_read_int8_partial_array+0x148>
    3d68:	ldr	r1, [pc, #180]	; 3e24 <coda_mem_cursor_read_int8_partial_array+0x14c>
    3d6c:	ldr	r0, [pc, #180]	; 3e28 <coda_mem_cursor_read_int8_partial_array+0x150>
    3d70:	bl	0 <__assert_fail>
    3d74:	ldr	r3, [fp, #-8]
    3d78:	ldr	r3, [r3, #4]
    3d7c:	ldr	r3, [r3, #40]	; 0x28
    3d80:	ldr	r3, [r3]
    3d84:	cmp	r3, #1
    3d88:	bne	3db8 <coda_mem_cursor_read_int8_partial_array+0xe0>
    3d8c:	mov	r3, #1
    3d90:	str	r3, [sp, #4]
    3d94:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3d98:	str	r3, [sp]
    3d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3da0:	ldr	r2, [fp, #-20]	; 0xffffffec
    3da4:	ldr	r1, [pc, #128]	; 3e2c <coda_mem_cursor_read_int8_partial_array+0x154>
    3da8:	ldr	r0, [fp, #-16]
    3dac:	bl	3fc <read_partial_array>
    3db0:	mov	r3, r0
    3db4:	b	3e0c <coda_mem_cursor_read_int8_partial_array+0x134>
    3db8:	ldr	r3, [fp, #-8]
    3dbc:	ldr	r3, [r3, #4]
    3dc0:	ldr	r3, [r3, #40]	; 0x28
    3dc4:	ldr	r3, [r3]
    3dc8:	cmp	r3, #0
    3dcc:	beq	3de4 <coda_mem_cursor_read_int8_partial_array+0x10c>
    3dd0:	ldr	r3, [pc, #68]	; 3e1c <coda_mem_cursor_read_int8_partial_array+0x144>
    3dd4:	ldr	r2, [pc, #84]	; 3e30 <coda_mem_cursor_read_int8_partial_array+0x158>
    3dd8:	ldr	r1, [pc, #68]	; 3e24 <coda_mem_cursor_read_int8_partial_array+0x14c>
    3ddc:	ldr	r0, [pc, #80]	; 3e34 <coda_mem_cursor_read_int8_partial_array+0x15c>
    3de0:	bl	0 <__assert_fail>
    3de4:	mov	r3, #1
    3de8:	str	r3, [sp, #4]
    3dec:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3df0:	str	r3, [sp]
    3df4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3df8:	ldr	r2, [fp, #-20]	; 0xffffffec
    3dfc:	ldr	r1, [pc, #52]	; 3e38 <coda_mem_cursor_read_int8_partial_array+0x160>
    3e00:	ldr	r0, [fp, #-16]
    3e04:	bl	3fc <read_partial_array>
    3e08:	mov	r3, r0
    3e0c:	mov	r0, r3
    3e10:	sub	sp, fp, #4
    3e14:	pop	{fp, pc}
    3e18:	.word	0x00000000
    3e1c:	.word	0x0000078c
    3e20:	.word	0x000003df
    3e24:	.word	0x000000c0
    3e28:	.word	0x00000110
    3e2c:	.word	0x00000000
    3e30:	.word	0x000003e5
    3e34:	.word	0x000002ac
    3e38:	.word	0x00000000

00003e3c <coda_mem_cursor_read_uint8_partial_array>:
    3e3c:	push	{fp, lr}
    3e40:	add	fp, sp, #4
    3e44:	sub	sp, sp, #32
    3e48:	str	r0, [fp, #-16]
    3e4c:	str	r1, [fp, #-20]	; 0xffffffec
    3e50:	str	r2, [fp, #-24]	; 0xffffffe8
    3e54:	str	r3, [fp, #-28]	; 0xffffffe4
    3e58:	ldr	r3, [fp, #-16]
    3e5c:	ldr	r3, [r3, #4]
    3e60:	sub	r3, r3, #1
    3e64:	ldr	r2, [fp, #-16]
    3e68:	lsl	r3, r3, #4
    3e6c:	add	r3, r2, r3
    3e70:	ldr	r3, [r3, #8]
    3e74:	str	r3, [fp, #-8]
    3e78:	ldr	r3, [fp, #-8]
    3e7c:	ldr	r3, [r3, #8]
    3e80:	cmp	r3, #1
    3e84:	bne	3eb4 <coda_mem_cursor_read_uint8_partial_array+0x78>
    3e88:	mov	r3, #1
    3e8c:	str	r3, [sp, #4]
    3e90:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3e94:	str	r3, [sp]
    3e98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e9c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ea0:	ldr	r1, [pc, #212]	; 3f7c <coda_mem_cursor_read_uint8_partial_array+0x140>
    3ea4:	ldr	r0, [fp, #-16]
    3ea8:	bl	3fc <read_partial_array>
    3eac:	mov	r3, r0
    3eb0:	b	3f70 <coda_mem_cursor_read_uint8_partial_array+0x134>
    3eb4:	ldr	r3, [fp, #-8]
    3eb8:	ldr	r3, [r3, #8]
    3ebc:	cmp	r3, #2
    3ec0:	beq	3ed8 <coda_mem_cursor_read_uint8_partial_array+0x9c>
    3ec4:	ldr	r3, [pc, #180]	; 3f80 <coda_mem_cursor_read_uint8_partial_array+0x144>
    3ec8:	ldr	r2, [pc, #180]	; 3f84 <coda_mem_cursor_read_uint8_partial_array+0x148>
    3ecc:	ldr	r1, [pc, #180]	; 3f88 <coda_mem_cursor_read_uint8_partial_array+0x14c>
    3ed0:	ldr	r0, [pc, #180]	; 3f8c <coda_mem_cursor_read_uint8_partial_array+0x150>
    3ed4:	bl	0 <__assert_fail>
    3ed8:	ldr	r3, [fp, #-8]
    3edc:	ldr	r3, [r3, #4]
    3ee0:	ldr	r3, [r3, #40]	; 0x28
    3ee4:	ldr	r3, [r3]
    3ee8:	cmp	r3, #1
    3eec:	bne	3f1c <coda_mem_cursor_read_uint8_partial_array+0xe0>
    3ef0:	mov	r3, #1
    3ef4:	str	r3, [sp, #4]
    3ef8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3efc:	str	r3, [sp]
    3f00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f04:	ldr	r2, [fp, #-20]	; 0xffffffec
    3f08:	ldr	r1, [pc, #128]	; 3f90 <coda_mem_cursor_read_uint8_partial_array+0x154>
    3f0c:	ldr	r0, [fp, #-16]
    3f10:	bl	3fc <read_partial_array>
    3f14:	mov	r3, r0
    3f18:	b	3f70 <coda_mem_cursor_read_uint8_partial_array+0x134>
    3f1c:	ldr	r3, [fp, #-8]
    3f20:	ldr	r3, [r3, #4]
    3f24:	ldr	r3, [r3, #40]	; 0x28
    3f28:	ldr	r3, [r3]
    3f2c:	cmp	r3, #0
    3f30:	beq	3f48 <coda_mem_cursor_read_uint8_partial_array+0x10c>
    3f34:	ldr	r3, [pc, #68]	; 3f80 <coda_mem_cursor_read_uint8_partial_array+0x144>
    3f38:	ldr	r2, [pc, #84]	; 3f94 <coda_mem_cursor_read_uint8_partial_array+0x158>
    3f3c:	ldr	r1, [pc, #68]	; 3f88 <coda_mem_cursor_read_uint8_partial_array+0x14c>
    3f40:	ldr	r0, [pc, #80]	; 3f98 <coda_mem_cursor_read_uint8_partial_array+0x15c>
    3f44:	bl	0 <__assert_fail>
    3f48:	mov	r3, #1
    3f4c:	str	r3, [sp, #4]
    3f50:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3f54:	str	r3, [sp]
    3f58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f5c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3f60:	ldr	r1, [pc, #52]	; 3f9c <coda_mem_cursor_read_uint8_partial_array+0x160>
    3f64:	ldr	r0, [fp, #-16]
    3f68:	bl	3fc <read_partial_array>
    3f6c:	mov	r3, r0
    3f70:	mov	r0, r3
    3f74:	sub	sp, fp, #4
    3f78:	pop	{fp, pc}
    3f7c:	.word	0x00000000
    3f80:	.word	0x000007b4
    3f84:	.word	0x000003f3
    3f88:	.word	0x000000c0
    3f8c:	.word	0x00000110
    3f90:	.word	0x00000000
    3f94:	.word	0x000003f9
    3f98:	.word	0x000002ac
    3f9c:	.word	0x00000000

00003fa0 <coda_mem_cursor_read_int16_partial_array>:
    3fa0:	push	{fp, lr}
    3fa4:	add	fp, sp, #4
    3fa8:	sub	sp, sp, #32
    3fac:	str	r0, [fp, #-16]
    3fb0:	str	r1, [fp, #-20]	; 0xffffffec
    3fb4:	str	r2, [fp, #-24]	; 0xffffffe8
    3fb8:	str	r3, [fp, #-28]	; 0xffffffe4
    3fbc:	ldr	r3, [fp, #-16]
    3fc0:	ldr	r3, [r3, #4]
    3fc4:	sub	r3, r3, #1
    3fc8:	ldr	r2, [fp, #-16]
    3fcc:	lsl	r3, r3, #4
    3fd0:	add	r3, r2, r3
    3fd4:	ldr	r3, [r3, #8]
    3fd8:	str	r3, [fp, #-8]
    3fdc:	ldr	r3, [fp, #-8]
    3fe0:	ldr	r3, [r3, #8]
    3fe4:	cmp	r3, #1
    3fe8:	bne	4018 <coda_mem_cursor_read_int16_partial_array+0x78>
    3fec:	mov	r3, #2
    3ff0:	str	r3, [sp, #4]
    3ff4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3ff8:	str	r3, [sp]
    3ffc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4000:	ldr	r2, [fp, #-20]	; 0xffffffec
    4004:	ldr	r1, [pc, #212]	; 40e0 <coda_mem_cursor_read_int16_partial_array+0x140>
    4008:	ldr	r0, [fp, #-16]
    400c:	bl	3fc <read_partial_array>
    4010:	mov	r3, r0
    4014:	b	40d4 <coda_mem_cursor_read_int16_partial_array+0x134>
    4018:	ldr	r3, [fp, #-8]
    401c:	ldr	r3, [r3, #8]
    4020:	cmp	r3, #2
    4024:	beq	403c <coda_mem_cursor_read_int16_partial_array+0x9c>
    4028:	ldr	r3, [pc, #180]	; 40e4 <coda_mem_cursor_read_int16_partial_array+0x144>
    402c:	ldr	r2, [pc, #180]	; 40e8 <coda_mem_cursor_read_int16_partial_array+0x148>
    4030:	ldr	r1, [pc, #180]	; 40ec <coda_mem_cursor_read_int16_partial_array+0x14c>
    4034:	ldr	r0, [pc, #180]	; 40f0 <coda_mem_cursor_read_int16_partial_array+0x150>
    4038:	bl	0 <__assert_fail>
    403c:	ldr	r3, [fp, #-8]
    4040:	ldr	r3, [r3, #4]
    4044:	ldr	r3, [r3, #40]	; 0x28
    4048:	ldr	r3, [r3]
    404c:	cmp	r3, #1
    4050:	bne	4080 <coda_mem_cursor_read_int16_partial_array+0xe0>
    4054:	mov	r3, #2
    4058:	str	r3, [sp, #4]
    405c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4060:	str	r3, [sp]
    4064:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4068:	ldr	r2, [fp, #-20]	; 0xffffffec
    406c:	ldr	r1, [pc, #128]	; 40f4 <coda_mem_cursor_read_int16_partial_array+0x154>
    4070:	ldr	r0, [fp, #-16]
    4074:	bl	3fc <read_partial_array>
    4078:	mov	r3, r0
    407c:	b	40d4 <coda_mem_cursor_read_int16_partial_array+0x134>
    4080:	ldr	r3, [fp, #-8]
    4084:	ldr	r3, [r3, #4]
    4088:	ldr	r3, [r3, #40]	; 0x28
    408c:	ldr	r3, [r3]
    4090:	cmp	r3, #0
    4094:	beq	40ac <coda_mem_cursor_read_int16_partial_array+0x10c>
    4098:	ldr	r3, [pc, #68]	; 40e4 <coda_mem_cursor_read_int16_partial_array+0x144>
    409c:	ldr	r2, [pc, #84]	; 40f8 <coda_mem_cursor_read_int16_partial_array+0x158>
    40a0:	ldr	r1, [pc, #68]	; 40ec <coda_mem_cursor_read_int16_partial_array+0x14c>
    40a4:	ldr	r0, [pc, #80]	; 40fc <coda_mem_cursor_read_int16_partial_array+0x15c>
    40a8:	bl	0 <__assert_fail>
    40ac:	mov	r3, #2
    40b0:	str	r3, [sp, #4]
    40b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    40b8:	str	r3, [sp]
    40bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    40c0:	ldr	r2, [fp, #-20]	; 0xffffffec
    40c4:	ldr	r1, [pc, #52]	; 4100 <coda_mem_cursor_read_int16_partial_array+0x160>
    40c8:	ldr	r0, [fp, #-16]
    40cc:	bl	3fc <read_partial_array>
    40d0:	mov	r3, r0
    40d4:	mov	r0, r3
    40d8:	sub	sp, fp, #4
    40dc:	pop	{fp, pc}
    40e0:	.word	0x00000000
    40e4:	.word	0x000007e0
    40e8:	.word	0x00000407
    40ec:	.word	0x000000c0
    40f0:	.word	0x00000110
    40f4:	.word	0x00000000
    40f8:	.word	0x0000040d
    40fc:	.word	0x000002ac
    4100:	.word	0x00000000

00004104 <coda_mem_cursor_read_uint16_partial_array>:
    4104:	push	{fp, lr}
    4108:	add	fp, sp, #4
    410c:	sub	sp, sp, #32
    4110:	str	r0, [fp, #-16]
    4114:	str	r1, [fp, #-20]	; 0xffffffec
    4118:	str	r2, [fp, #-24]	; 0xffffffe8
    411c:	str	r3, [fp, #-28]	; 0xffffffe4
    4120:	ldr	r3, [fp, #-16]
    4124:	ldr	r3, [r3, #4]
    4128:	sub	r3, r3, #1
    412c:	ldr	r2, [fp, #-16]
    4130:	lsl	r3, r3, #4
    4134:	add	r3, r2, r3
    4138:	ldr	r3, [r3, #8]
    413c:	str	r3, [fp, #-8]
    4140:	ldr	r3, [fp, #-8]
    4144:	ldr	r3, [r3, #8]
    4148:	cmp	r3, #1
    414c:	bne	417c <coda_mem_cursor_read_uint16_partial_array+0x78>
    4150:	mov	r3, #2
    4154:	str	r3, [sp, #4]
    4158:	ldr	r3, [fp, #-28]	; 0xffffffe4
    415c:	str	r3, [sp]
    4160:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4164:	ldr	r2, [fp, #-20]	; 0xffffffec
    4168:	ldr	r1, [pc, #212]	; 4244 <coda_mem_cursor_read_uint16_partial_array+0x140>
    416c:	ldr	r0, [fp, #-16]
    4170:	bl	3fc <read_partial_array>
    4174:	mov	r3, r0
    4178:	b	4238 <coda_mem_cursor_read_uint16_partial_array+0x134>
    417c:	ldr	r3, [fp, #-8]
    4180:	ldr	r3, [r3, #8]
    4184:	cmp	r3, #2
    4188:	beq	41a0 <coda_mem_cursor_read_uint16_partial_array+0x9c>
    418c:	ldr	r3, [pc, #180]	; 4248 <coda_mem_cursor_read_uint16_partial_array+0x144>
    4190:	ldr	r2, [pc, #180]	; 424c <coda_mem_cursor_read_uint16_partial_array+0x148>
    4194:	ldr	r1, [pc, #180]	; 4250 <coda_mem_cursor_read_uint16_partial_array+0x14c>
    4198:	ldr	r0, [pc, #180]	; 4254 <coda_mem_cursor_read_uint16_partial_array+0x150>
    419c:	bl	0 <__assert_fail>
    41a0:	ldr	r3, [fp, #-8]
    41a4:	ldr	r3, [r3, #4]
    41a8:	ldr	r3, [r3, #40]	; 0x28
    41ac:	ldr	r3, [r3]
    41b0:	cmp	r3, #1
    41b4:	bne	41e4 <coda_mem_cursor_read_uint16_partial_array+0xe0>
    41b8:	mov	r3, #2
    41bc:	str	r3, [sp, #4]
    41c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    41c4:	str	r3, [sp]
    41c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    41cc:	ldr	r2, [fp, #-20]	; 0xffffffec
    41d0:	ldr	r1, [pc, #128]	; 4258 <coda_mem_cursor_read_uint16_partial_array+0x154>
    41d4:	ldr	r0, [fp, #-16]
    41d8:	bl	3fc <read_partial_array>
    41dc:	mov	r3, r0
    41e0:	b	4238 <coda_mem_cursor_read_uint16_partial_array+0x134>
    41e4:	ldr	r3, [fp, #-8]
    41e8:	ldr	r3, [r3, #4]
    41ec:	ldr	r3, [r3, #40]	; 0x28
    41f0:	ldr	r3, [r3]
    41f4:	cmp	r3, #0
    41f8:	beq	4210 <coda_mem_cursor_read_uint16_partial_array+0x10c>
    41fc:	ldr	r3, [pc, #68]	; 4248 <coda_mem_cursor_read_uint16_partial_array+0x144>
    4200:	ldr	r2, [pc, #84]	; 425c <coda_mem_cursor_read_uint16_partial_array+0x158>
    4204:	ldr	r1, [pc, #68]	; 4250 <coda_mem_cursor_read_uint16_partial_array+0x14c>
    4208:	ldr	r0, [pc, #80]	; 4260 <coda_mem_cursor_read_uint16_partial_array+0x15c>
    420c:	bl	0 <__assert_fail>
    4210:	mov	r3, #2
    4214:	str	r3, [sp, #4]
    4218:	ldr	r3, [fp, #-28]	; 0xffffffe4
    421c:	str	r3, [sp]
    4220:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4224:	ldr	r2, [fp, #-20]	; 0xffffffec
    4228:	ldr	r1, [pc, #52]	; 4264 <coda_mem_cursor_read_uint16_partial_array+0x160>
    422c:	ldr	r0, [fp, #-16]
    4230:	bl	3fc <read_partial_array>
    4234:	mov	r3, r0
    4238:	mov	r0, r3
    423c:	sub	sp, fp, #4
    4240:	pop	{fp, pc}
    4244:	.word	0x00000000
    4248:	.word	0x0000080c
    424c:	.word	0x0000041b
    4250:	.word	0x000000c0
    4254:	.word	0x00000110
    4258:	.word	0x00000000
    425c:	.word	0x00000421
    4260:	.word	0x000002ac
    4264:	.word	0x00000000

00004268 <coda_mem_cursor_read_int32_partial_array>:
    4268:	push	{fp, lr}
    426c:	add	fp, sp, #4
    4270:	sub	sp, sp, #32
    4274:	str	r0, [fp, #-16]
    4278:	str	r1, [fp, #-20]	; 0xffffffec
    427c:	str	r2, [fp, #-24]	; 0xffffffe8
    4280:	str	r3, [fp, #-28]	; 0xffffffe4
    4284:	ldr	r3, [fp, #-16]
    4288:	ldr	r3, [r3, #4]
    428c:	sub	r3, r3, #1
    4290:	ldr	r2, [fp, #-16]
    4294:	lsl	r3, r3, #4
    4298:	add	r3, r2, r3
    429c:	ldr	r3, [r3, #8]
    42a0:	str	r3, [fp, #-8]
    42a4:	ldr	r3, [fp, #-8]
    42a8:	ldr	r3, [r3, #8]
    42ac:	cmp	r3, #1
    42b0:	bne	42e0 <coda_mem_cursor_read_int32_partial_array+0x78>
    42b4:	mov	r3, #4
    42b8:	str	r3, [sp, #4]
    42bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    42c0:	str	r3, [sp]
    42c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    42c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    42cc:	ldr	r1, [pc, #212]	; 43a8 <coda_mem_cursor_read_int32_partial_array+0x140>
    42d0:	ldr	r0, [fp, #-16]
    42d4:	bl	3fc <read_partial_array>
    42d8:	mov	r3, r0
    42dc:	b	439c <coda_mem_cursor_read_int32_partial_array+0x134>
    42e0:	ldr	r3, [fp, #-8]
    42e4:	ldr	r3, [r3, #8]
    42e8:	cmp	r3, #2
    42ec:	beq	4304 <coda_mem_cursor_read_int32_partial_array+0x9c>
    42f0:	ldr	r3, [pc, #180]	; 43ac <coda_mem_cursor_read_int32_partial_array+0x144>
    42f4:	ldr	r2, [pc, #180]	; 43b0 <coda_mem_cursor_read_int32_partial_array+0x148>
    42f8:	ldr	r1, [pc, #180]	; 43b4 <coda_mem_cursor_read_int32_partial_array+0x14c>
    42fc:	ldr	r0, [pc, #180]	; 43b8 <coda_mem_cursor_read_int32_partial_array+0x150>
    4300:	bl	0 <__assert_fail>
    4304:	ldr	r3, [fp, #-8]
    4308:	ldr	r3, [r3, #4]
    430c:	ldr	r3, [r3, #40]	; 0x28
    4310:	ldr	r3, [r3]
    4314:	cmp	r3, #1
    4318:	bne	4348 <coda_mem_cursor_read_int32_partial_array+0xe0>
    431c:	mov	r3, #4
    4320:	str	r3, [sp, #4]
    4324:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4328:	str	r3, [sp]
    432c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4330:	ldr	r2, [fp, #-20]	; 0xffffffec
    4334:	ldr	r1, [pc, #128]	; 43bc <coda_mem_cursor_read_int32_partial_array+0x154>
    4338:	ldr	r0, [fp, #-16]
    433c:	bl	3fc <read_partial_array>
    4340:	mov	r3, r0
    4344:	b	439c <coda_mem_cursor_read_int32_partial_array+0x134>
    4348:	ldr	r3, [fp, #-8]
    434c:	ldr	r3, [r3, #4]
    4350:	ldr	r3, [r3, #40]	; 0x28
    4354:	ldr	r3, [r3]
    4358:	cmp	r3, #0
    435c:	beq	4374 <coda_mem_cursor_read_int32_partial_array+0x10c>
    4360:	ldr	r3, [pc, #68]	; 43ac <coda_mem_cursor_read_int32_partial_array+0x144>
    4364:	ldr	r2, [pc, #84]	; 43c0 <coda_mem_cursor_read_int32_partial_array+0x158>
    4368:	ldr	r1, [pc, #68]	; 43b4 <coda_mem_cursor_read_int32_partial_array+0x14c>
    436c:	ldr	r0, [pc, #80]	; 43c4 <coda_mem_cursor_read_int32_partial_array+0x15c>
    4370:	bl	0 <__assert_fail>
    4374:	mov	r3, #4
    4378:	str	r3, [sp, #4]
    437c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4380:	str	r3, [sp]
    4384:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4388:	ldr	r2, [fp, #-20]	; 0xffffffec
    438c:	ldr	r1, [pc, #52]	; 43c8 <coda_mem_cursor_read_int32_partial_array+0x160>
    4390:	ldr	r0, [fp, #-16]
    4394:	bl	3fc <read_partial_array>
    4398:	mov	r3, r0
    439c:	mov	r0, r3
    43a0:	sub	sp, fp, #4
    43a4:	pop	{fp, pc}
    43a8:	.word	0x00000000
    43ac:	.word	0x00000838
    43b0:	.word	0x0000042f
    43b4:	.word	0x000000c0
    43b8:	.word	0x00000110
    43bc:	.word	0x00000000
    43c0:	.word	0x00000435
    43c4:	.word	0x000002ac
    43c8:	.word	0x00000000

000043cc <coda_mem_cursor_read_uint32_partial_array>:
    43cc:	push	{fp, lr}
    43d0:	add	fp, sp, #4
    43d4:	sub	sp, sp, #32
    43d8:	str	r0, [fp, #-16]
    43dc:	str	r1, [fp, #-20]	; 0xffffffec
    43e0:	str	r2, [fp, #-24]	; 0xffffffe8
    43e4:	str	r3, [fp, #-28]	; 0xffffffe4
    43e8:	ldr	r3, [fp, #-16]
    43ec:	ldr	r3, [r3, #4]
    43f0:	sub	r3, r3, #1
    43f4:	ldr	r2, [fp, #-16]
    43f8:	lsl	r3, r3, #4
    43fc:	add	r3, r2, r3
    4400:	ldr	r3, [r3, #8]
    4404:	str	r3, [fp, #-8]
    4408:	ldr	r3, [fp, #-8]
    440c:	ldr	r3, [r3, #8]
    4410:	cmp	r3, #1
    4414:	bne	4444 <coda_mem_cursor_read_uint32_partial_array+0x78>
    4418:	mov	r3, #4
    441c:	str	r3, [sp, #4]
    4420:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4424:	str	r3, [sp]
    4428:	ldr	r3, [fp, #-24]	; 0xffffffe8
    442c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4430:	ldr	r1, [pc, #212]	; 450c <coda_mem_cursor_read_uint32_partial_array+0x140>
    4434:	ldr	r0, [fp, #-16]
    4438:	bl	3fc <read_partial_array>
    443c:	mov	r3, r0
    4440:	b	4500 <coda_mem_cursor_read_uint32_partial_array+0x134>
    4444:	ldr	r3, [fp, #-8]
    4448:	ldr	r3, [r3, #8]
    444c:	cmp	r3, #2
    4450:	beq	4468 <coda_mem_cursor_read_uint32_partial_array+0x9c>
    4454:	ldr	r3, [pc, #180]	; 4510 <coda_mem_cursor_read_uint32_partial_array+0x144>
    4458:	ldr	r2, [pc, #180]	; 4514 <coda_mem_cursor_read_uint32_partial_array+0x148>
    445c:	ldr	r1, [pc, #180]	; 4518 <coda_mem_cursor_read_uint32_partial_array+0x14c>
    4460:	ldr	r0, [pc, #180]	; 451c <coda_mem_cursor_read_uint32_partial_array+0x150>
    4464:	bl	0 <__assert_fail>
    4468:	ldr	r3, [fp, #-8]
    446c:	ldr	r3, [r3, #4]
    4470:	ldr	r3, [r3, #40]	; 0x28
    4474:	ldr	r3, [r3]
    4478:	cmp	r3, #1
    447c:	bne	44ac <coda_mem_cursor_read_uint32_partial_array+0xe0>
    4480:	mov	r3, #4
    4484:	str	r3, [sp, #4]
    4488:	ldr	r3, [fp, #-28]	; 0xffffffe4
    448c:	str	r3, [sp]
    4490:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4494:	ldr	r2, [fp, #-20]	; 0xffffffec
    4498:	ldr	r1, [pc, #128]	; 4520 <coda_mem_cursor_read_uint32_partial_array+0x154>
    449c:	ldr	r0, [fp, #-16]
    44a0:	bl	3fc <read_partial_array>
    44a4:	mov	r3, r0
    44a8:	b	4500 <coda_mem_cursor_read_uint32_partial_array+0x134>
    44ac:	ldr	r3, [fp, #-8]
    44b0:	ldr	r3, [r3, #4]
    44b4:	ldr	r3, [r3, #40]	; 0x28
    44b8:	ldr	r3, [r3]
    44bc:	cmp	r3, #0
    44c0:	beq	44d8 <coda_mem_cursor_read_uint32_partial_array+0x10c>
    44c4:	ldr	r3, [pc, #68]	; 4510 <coda_mem_cursor_read_uint32_partial_array+0x144>
    44c8:	ldr	r2, [pc, #84]	; 4524 <coda_mem_cursor_read_uint32_partial_array+0x158>
    44cc:	ldr	r1, [pc, #68]	; 4518 <coda_mem_cursor_read_uint32_partial_array+0x14c>
    44d0:	ldr	r0, [pc, #80]	; 4528 <coda_mem_cursor_read_uint32_partial_array+0x15c>
    44d4:	bl	0 <__assert_fail>
    44d8:	mov	r3, #4
    44dc:	str	r3, [sp, #4]
    44e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    44e4:	str	r3, [sp]
    44e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    44ec:	ldr	r2, [fp, #-20]	; 0xffffffec
    44f0:	ldr	r1, [pc, #52]	; 452c <coda_mem_cursor_read_uint32_partial_array+0x160>
    44f4:	ldr	r0, [fp, #-16]
    44f8:	bl	3fc <read_partial_array>
    44fc:	mov	r3, r0
    4500:	mov	r0, r3
    4504:	sub	sp, fp, #4
    4508:	pop	{fp, pc}
    450c:	.word	0x00000000
    4510:	.word	0x00000864
    4514:	.word	0x00000443
    4518:	.word	0x000000c0
    451c:	.word	0x00000110
    4520:	.word	0x00000000
    4524:	.word	0x00000449
    4528:	.word	0x000002ac
    452c:	.word	0x00000000

00004530 <coda_mem_cursor_read_int64_partial_array>:
    4530:	push	{fp, lr}
    4534:	add	fp, sp, #4
    4538:	sub	sp, sp, #32
    453c:	str	r0, [fp, #-16]
    4540:	str	r1, [fp, #-20]	; 0xffffffec
    4544:	str	r2, [fp, #-24]	; 0xffffffe8
    4548:	str	r3, [fp, #-28]	; 0xffffffe4
    454c:	ldr	r3, [fp, #-16]
    4550:	ldr	r3, [r3, #4]
    4554:	sub	r3, r3, #1
    4558:	ldr	r2, [fp, #-16]
    455c:	lsl	r3, r3, #4
    4560:	add	r3, r2, r3
    4564:	ldr	r3, [r3, #8]
    4568:	str	r3, [fp, #-8]
    456c:	ldr	r3, [fp, #-8]
    4570:	ldr	r3, [r3, #8]
    4574:	cmp	r3, #1
    4578:	bne	45a8 <coda_mem_cursor_read_int64_partial_array+0x78>
    457c:	mov	r3, #8
    4580:	str	r3, [sp, #4]
    4584:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4588:	str	r3, [sp]
    458c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4590:	ldr	r2, [fp, #-20]	; 0xffffffec
    4594:	ldr	r1, [pc, #212]	; 4670 <coda_mem_cursor_read_int64_partial_array+0x140>
    4598:	ldr	r0, [fp, #-16]
    459c:	bl	3fc <read_partial_array>
    45a0:	mov	r3, r0
    45a4:	b	4664 <coda_mem_cursor_read_int64_partial_array+0x134>
    45a8:	ldr	r3, [fp, #-8]
    45ac:	ldr	r3, [r3, #8]
    45b0:	cmp	r3, #2
    45b4:	beq	45cc <coda_mem_cursor_read_int64_partial_array+0x9c>
    45b8:	ldr	r3, [pc, #180]	; 4674 <coda_mem_cursor_read_int64_partial_array+0x144>
    45bc:	ldr	r2, [pc, #180]	; 4678 <coda_mem_cursor_read_int64_partial_array+0x148>
    45c0:	ldr	r1, [pc, #180]	; 467c <coda_mem_cursor_read_int64_partial_array+0x14c>
    45c4:	ldr	r0, [pc, #180]	; 4680 <coda_mem_cursor_read_int64_partial_array+0x150>
    45c8:	bl	0 <__assert_fail>
    45cc:	ldr	r3, [fp, #-8]
    45d0:	ldr	r3, [r3, #4]
    45d4:	ldr	r3, [r3, #40]	; 0x28
    45d8:	ldr	r3, [r3]
    45dc:	cmp	r3, #1
    45e0:	bne	4610 <coda_mem_cursor_read_int64_partial_array+0xe0>
    45e4:	mov	r3, #8
    45e8:	str	r3, [sp, #4]
    45ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
    45f0:	str	r3, [sp]
    45f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    45f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    45fc:	ldr	r1, [pc, #128]	; 4684 <coda_mem_cursor_read_int64_partial_array+0x154>
    4600:	ldr	r0, [fp, #-16]
    4604:	bl	3fc <read_partial_array>
    4608:	mov	r3, r0
    460c:	b	4664 <coda_mem_cursor_read_int64_partial_array+0x134>
    4610:	ldr	r3, [fp, #-8]
    4614:	ldr	r3, [r3, #4]
    4618:	ldr	r3, [r3, #40]	; 0x28
    461c:	ldr	r3, [r3]
    4620:	cmp	r3, #0
    4624:	beq	463c <coda_mem_cursor_read_int64_partial_array+0x10c>
    4628:	ldr	r3, [pc, #68]	; 4674 <coda_mem_cursor_read_int64_partial_array+0x144>
    462c:	ldr	r2, [pc, #84]	; 4688 <coda_mem_cursor_read_int64_partial_array+0x158>
    4630:	ldr	r1, [pc, #68]	; 467c <coda_mem_cursor_read_int64_partial_array+0x14c>
    4634:	ldr	r0, [pc, #80]	; 468c <coda_mem_cursor_read_int64_partial_array+0x15c>
    4638:	bl	0 <__assert_fail>
    463c:	mov	r3, #8
    4640:	str	r3, [sp, #4]
    4644:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4648:	str	r3, [sp]
    464c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4650:	ldr	r2, [fp, #-20]	; 0xffffffec
    4654:	ldr	r1, [pc, #52]	; 4690 <coda_mem_cursor_read_int64_partial_array+0x160>
    4658:	ldr	r0, [fp, #-16]
    465c:	bl	3fc <read_partial_array>
    4660:	mov	r3, r0
    4664:	mov	r0, r3
    4668:	sub	sp, fp, #4
    466c:	pop	{fp, pc}
    4670:	.word	0x00000000
    4674:	.word	0x00000890
    4678:	.word	0x00000457
    467c:	.word	0x000000c0
    4680:	.word	0x00000110
    4684:	.word	0x00000000
    4688:	.word	0x0000045d
    468c:	.word	0x000002ac
    4690:	.word	0x00000000

00004694 <coda_mem_cursor_read_uint64_partial_array>:
    4694:	push	{fp, lr}
    4698:	add	fp, sp, #4
    469c:	sub	sp, sp, #32
    46a0:	str	r0, [fp, #-16]
    46a4:	str	r1, [fp, #-20]	; 0xffffffec
    46a8:	str	r2, [fp, #-24]	; 0xffffffe8
    46ac:	str	r3, [fp, #-28]	; 0xffffffe4
    46b0:	ldr	r3, [fp, #-16]
    46b4:	ldr	r3, [r3, #4]
    46b8:	sub	r3, r3, #1
    46bc:	ldr	r2, [fp, #-16]
    46c0:	lsl	r3, r3, #4
    46c4:	add	r3, r2, r3
    46c8:	ldr	r3, [r3, #8]
    46cc:	str	r3, [fp, #-8]
    46d0:	ldr	r3, [fp, #-8]
    46d4:	ldr	r3, [r3, #8]
    46d8:	cmp	r3, #1
    46dc:	bne	470c <coda_mem_cursor_read_uint64_partial_array+0x78>
    46e0:	mov	r3, #8
    46e4:	str	r3, [sp, #4]
    46e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    46ec:	str	r3, [sp]
    46f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    46f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    46f8:	ldr	r1, [pc, #212]	; 47d4 <coda_mem_cursor_read_uint64_partial_array+0x140>
    46fc:	ldr	r0, [fp, #-16]
    4700:	bl	3fc <read_partial_array>
    4704:	mov	r3, r0
    4708:	b	47c8 <coda_mem_cursor_read_uint64_partial_array+0x134>
    470c:	ldr	r3, [fp, #-8]
    4710:	ldr	r3, [r3, #8]
    4714:	cmp	r3, #2
    4718:	beq	4730 <coda_mem_cursor_read_uint64_partial_array+0x9c>
    471c:	ldr	r3, [pc, #180]	; 47d8 <coda_mem_cursor_read_uint64_partial_array+0x144>
    4720:	ldr	r2, [pc, #180]	; 47dc <coda_mem_cursor_read_uint64_partial_array+0x148>
    4724:	ldr	r1, [pc, #180]	; 47e0 <coda_mem_cursor_read_uint64_partial_array+0x14c>
    4728:	ldr	r0, [pc, #180]	; 47e4 <coda_mem_cursor_read_uint64_partial_array+0x150>
    472c:	bl	0 <__assert_fail>
    4730:	ldr	r3, [fp, #-8]
    4734:	ldr	r3, [r3, #4]
    4738:	ldr	r3, [r3, #40]	; 0x28
    473c:	ldr	r3, [r3]
    4740:	cmp	r3, #1
    4744:	bne	4774 <coda_mem_cursor_read_uint64_partial_array+0xe0>
    4748:	mov	r3, #8
    474c:	str	r3, [sp, #4]
    4750:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4754:	str	r3, [sp]
    4758:	ldr	r3, [fp, #-24]	; 0xffffffe8
    475c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4760:	ldr	r1, [pc, #128]	; 47e8 <coda_mem_cursor_read_uint64_partial_array+0x154>
    4764:	ldr	r0, [fp, #-16]
    4768:	bl	3fc <read_partial_array>
    476c:	mov	r3, r0
    4770:	b	47c8 <coda_mem_cursor_read_uint64_partial_array+0x134>
    4774:	ldr	r3, [fp, #-8]
    4778:	ldr	r3, [r3, #4]
    477c:	ldr	r3, [r3, #40]	; 0x28
    4780:	ldr	r3, [r3]
    4784:	cmp	r3, #0
    4788:	beq	47a0 <coda_mem_cursor_read_uint64_partial_array+0x10c>
    478c:	ldr	r3, [pc, #68]	; 47d8 <coda_mem_cursor_read_uint64_partial_array+0x144>
    4790:	ldr	r2, [pc, #84]	; 47ec <coda_mem_cursor_read_uint64_partial_array+0x158>
    4794:	ldr	r1, [pc, #68]	; 47e0 <coda_mem_cursor_read_uint64_partial_array+0x14c>
    4798:	ldr	r0, [pc, #80]	; 47f0 <coda_mem_cursor_read_uint64_partial_array+0x15c>
    479c:	bl	0 <__assert_fail>
    47a0:	mov	r3, #8
    47a4:	str	r3, [sp, #4]
    47a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    47ac:	str	r3, [sp]
    47b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    47b4:	ldr	r2, [fp, #-20]	; 0xffffffec
    47b8:	ldr	r1, [pc, #52]	; 47f4 <coda_mem_cursor_read_uint64_partial_array+0x160>
    47bc:	ldr	r0, [fp, #-16]
    47c0:	bl	3fc <read_partial_array>
    47c4:	mov	r3, r0
    47c8:	mov	r0, r3
    47cc:	sub	sp, fp, #4
    47d0:	pop	{fp, pc}
    47d4:	.word	0x00000000
    47d8:	.word	0x000008bc
    47dc:	.word	0x0000046b
    47e0:	.word	0x000000c0
    47e4:	.word	0x00000110
    47e8:	.word	0x00000000
    47ec:	.word	0x00000471
    47f0:	.word	0x000002ac
    47f4:	.word	0x00000000

000047f8 <coda_mem_cursor_read_float_partial_array>:
    47f8:	push	{fp, lr}
    47fc:	add	fp, sp, #4
    4800:	sub	sp, sp, #32
    4804:	str	r0, [fp, #-16]
    4808:	str	r1, [fp, #-20]	; 0xffffffec
    480c:	str	r2, [fp, #-24]	; 0xffffffe8
    4810:	str	r3, [fp, #-28]	; 0xffffffe4
    4814:	ldr	r3, [fp, #-16]
    4818:	ldr	r3, [r3, #4]
    481c:	sub	r3, r3, #1
    4820:	ldr	r2, [fp, #-16]
    4824:	lsl	r3, r3, #4
    4828:	add	r3, r2, r3
    482c:	ldr	r3, [r3, #8]
    4830:	str	r3, [fp, #-8]
    4834:	ldr	r3, [fp, #-8]
    4838:	ldr	r3, [r3, #8]
    483c:	cmp	r3, #1
    4840:	bne	4870 <coda_mem_cursor_read_float_partial_array+0x78>
    4844:	mov	r3, #4
    4848:	str	r3, [sp, #4]
    484c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4850:	str	r3, [sp]
    4854:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4858:	ldr	r2, [fp, #-20]	; 0xffffffec
    485c:	ldr	r1, [pc, #212]	; 4938 <coda_mem_cursor_read_float_partial_array+0x140>
    4860:	ldr	r0, [fp, #-16]
    4864:	bl	3fc <read_partial_array>
    4868:	mov	r3, r0
    486c:	b	492c <coda_mem_cursor_read_float_partial_array+0x134>
    4870:	ldr	r3, [fp, #-8]
    4874:	ldr	r3, [r3, #8]
    4878:	cmp	r3, #2
    487c:	beq	4894 <coda_mem_cursor_read_float_partial_array+0x9c>
    4880:	ldr	r3, [pc, #180]	; 493c <coda_mem_cursor_read_float_partial_array+0x144>
    4884:	ldr	r2, [pc, #180]	; 4940 <coda_mem_cursor_read_float_partial_array+0x148>
    4888:	ldr	r1, [pc, #180]	; 4944 <coda_mem_cursor_read_float_partial_array+0x14c>
    488c:	ldr	r0, [pc, #180]	; 4948 <coda_mem_cursor_read_float_partial_array+0x150>
    4890:	bl	0 <__assert_fail>
    4894:	ldr	r3, [fp, #-8]
    4898:	ldr	r3, [r3, #4]
    489c:	ldr	r3, [r3, #40]	; 0x28
    48a0:	ldr	r3, [r3]
    48a4:	cmp	r3, #1
    48a8:	bne	48d8 <coda_mem_cursor_read_float_partial_array+0xe0>
    48ac:	mov	r3, #4
    48b0:	str	r3, [sp, #4]
    48b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    48b8:	str	r3, [sp]
    48bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    48c0:	ldr	r2, [fp, #-20]	; 0xffffffec
    48c4:	ldr	r1, [pc, #128]	; 494c <coda_mem_cursor_read_float_partial_array+0x154>
    48c8:	ldr	r0, [fp, #-16]
    48cc:	bl	3fc <read_partial_array>
    48d0:	mov	r3, r0
    48d4:	b	492c <coda_mem_cursor_read_float_partial_array+0x134>
    48d8:	ldr	r3, [fp, #-8]
    48dc:	ldr	r3, [r3, #4]
    48e0:	ldr	r3, [r3, #40]	; 0x28
    48e4:	ldr	r3, [r3]
    48e8:	cmp	r3, #0
    48ec:	beq	4904 <coda_mem_cursor_read_float_partial_array+0x10c>
    48f0:	ldr	r3, [pc, #68]	; 493c <coda_mem_cursor_read_float_partial_array+0x144>
    48f4:	ldr	r2, [pc, #84]	; 4950 <coda_mem_cursor_read_float_partial_array+0x158>
    48f8:	ldr	r1, [pc, #68]	; 4944 <coda_mem_cursor_read_float_partial_array+0x14c>
    48fc:	ldr	r0, [pc, #80]	; 4954 <coda_mem_cursor_read_float_partial_array+0x15c>
    4900:	bl	0 <__assert_fail>
    4904:	mov	r3, #4
    4908:	str	r3, [sp, #4]
    490c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4910:	str	r3, [sp]
    4914:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4918:	ldr	r2, [fp, #-20]	; 0xffffffec
    491c:	ldr	r1, [pc, #52]	; 4958 <coda_mem_cursor_read_float_partial_array+0x160>
    4920:	ldr	r0, [fp, #-16]
    4924:	bl	3fc <read_partial_array>
    4928:	mov	r3, r0
    492c:	mov	r0, r3
    4930:	sub	sp, fp, #4
    4934:	pop	{fp, pc}
    4938:	.word	0x00000000
    493c:	.word	0x000008e8
    4940:	.word	0x0000047f
    4944:	.word	0x000000c0
    4948:	.word	0x00000110
    494c:	.word	0x00000000
    4950:	.word	0x00000485
    4954:	.word	0x000002ac
    4958:	.word	0x00000000

0000495c <coda_mem_cursor_read_double_partial_array>:
    495c:	push	{fp, lr}
    4960:	add	fp, sp, #4
    4964:	sub	sp, sp, #32
    4968:	str	r0, [fp, #-16]
    496c:	str	r1, [fp, #-20]	; 0xffffffec
    4970:	str	r2, [fp, #-24]	; 0xffffffe8
    4974:	str	r3, [fp, #-28]	; 0xffffffe4
    4978:	ldr	r3, [fp, #-16]
    497c:	ldr	r3, [r3, #4]
    4980:	sub	r3, r3, #1
    4984:	ldr	r2, [fp, #-16]
    4988:	lsl	r3, r3, #4
    498c:	add	r3, r2, r3
    4990:	ldr	r3, [r3, #8]
    4994:	str	r3, [fp, #-8]
    4998:	ldr	r3, [fp, #-8]
    499c:	ldr	r3, [r3, #8]
    49a0:	cmp	r3, #1
    49a4:	bne	49d4 <coda_mem_cursor_read_double_partial_array+0x78>
    49a8:	mov	r3, #8
    49ac:	str	r3, [sp, #4]
    49b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    49b4:	str	r3, [sp]
    49b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    49bc:	ldr	r2, [fp, #-20]	; 0xffffffec
    49c0:	ldr	r1, [pc, #212]	; 4a9c <coda_mem_cursor_read_double_partial_array+0x140>
    49c4:	ldr	r0, [fp, #-16]
    49c8:	bl	3fc <read_partial_array>
    49cc:	mov	r3, r0
    49d0:	b	4a90 <coda_mem_cursor_read_double_partial_array+0x134>
    49d4:	ldr	r3, [fp, #-8]
    49d8:	ldr	r3, [r3, #8]
    49dc:	cmp	r3, #2
    49e0:	beq	49f8 <coda_mem_cursor_read_double_partial_array+0x9c>
    49e4:	ldr	r3, [pc, #180]	; 4aa0 <coda_mem_cursor_read_double_partial_array+0x144>
    49e8:	ldr	r2, [pc, #180]	; 4aa4 <coda_mem_cursor_read_double_partial_array+0x148>
    49ec:	ldr	r1, [pc, #180]	; 4aa8 <coda_mem_cursor_read_double_partial_array+0x14c>
    49f0:	ldr	r0, [pc, #180]	; 4aac <coda_mem_cursor_read_double_partial_array+0x150>
    49f4:	bl	0 <__assert_fail>
    49f8:	ldr	r3, [fp, #-8]
    49fc:	ldr	r3, [r3, #4]
    4a00:	ldr	r3, [r3, #40]	; 0x28
    4a04:	ldr	r3, [r3]
    4a08:	cmp	r3, #1
    4a0c:	bne	4a3c <coda_mem_cursor_read_double_partial_array+0xe0>
    4a10:	mov	r3, #8
    4a14:	str	r3, [sp, #4]
    4a18:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4a1c:	str	r3, [sp]
    4a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4a24:	ldr	r2, [fp, #-20]	; 0xffffffec
    4a28:	ldr	r1, [pc, #128]	; 4ab0 <coda_mem_cursor_read_double_partial_array+0x154>
    4a2c:	ldr	r0, [fp, #-16]
    4a30:	bl	3fc <read_partial_array>
    4a34:	mov	r3, r0
    4a38:	b	4a90 <coda_mem_cursor_read_double_partial_array+0x134>
    4a3c:	ldr	r3, [fp, #-8]
    4a40:	ldr	r3, [r3, #4]
    4a44:	ldr	r3, [r3, #40]	; 0x28
    4a48:	ldr	r3, [r3]
    4a4c:	cmp	r3, #0
    4a50:	beq	4a68 <coda_mem_cursor_read_double_partial_array+0x10c>
    4a54:	ldr	r3, [pc, #68]	; 4aa0 <coda_mem_cursor_read_double_partial_array+0x144>
    4a58:	ldr	r2, [pc, #84]	; 4ab4 <coda_mem_cursor_read_double_partial_array+0x158>
    4a5c:	ldr	r1, [pc, #68]	; 4aa8 <coda_mem_cursor_read_double_partial_array+0x14c>
    4a60:	ldr	r0, [pc, #80]	; 4ab8 <coda_mem_cursor_read_double_partial_array+0x15c>
    4a64:	bl	0 <__assert_fail>
    4a68:	mov	r3, #8
    4a6c:	str	r3, [sp, #4]
    4a70:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4a74:	str	r3, [sp]
    4a78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4a7c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4a80:	ldr	r1, [pc, #52]	; 4abc <coda_mem_cursor_read_double_partial_array+0x160>
    4a84:	ldr	r0, [fp, #-16]
    4a88:	bl	3fc <read_partial_array>
    4a8c:	mov	r3, r0
    4a90:	mov	r0, r3
    4a94:	sub	sp, fp, #4
    4a98:	pop	{fp, pc}
    4a9c:	.word	0x00000000
    4aa0:	.word	0x00000914
    4aa4:	.word	0x00000493
    4aa8:	.word	0x000000c0
    4aac:	.word	0x00000110
    4ab0:	.word	0x00000000
    4ab4:	.word	0x00000499
    4ab8:	.word	0x000002ac
    4abc:	.word	0x00000000

00004ac0 <coda_mem_cursor_read_char_partial_array>:
    4ac0:	push	{fp, lr}
    4ac4:	add	fp, sp, #4
    4ac8:	sub	sp, sp, #32
    4acc:	str	r0, [fp, #-16]
    4ad0:	str	r1, [fp, #-20]	; 0xffffffec
    4ad4:	str	r2, [fp, #-24]	; 0xffffffe8
    4ad8:	str	r3, [fp, #-28]	; 0xffffffe4
    4adc:	ldr	r3, [fp, #-16]
    4ae0:	ldr	r3, [r3, #4]
    4ae4:	sub	r3, r3, #1
    4ae8:	ldr	r2, [fp, #-16]
    4aec:	lsl	r3, r3, #4
    4af0:	add	r3, r2, r3
    4af4:	ldr	r3, [r3, #8]
    4af8:	str	r3, [fp, #-8]
    4afc:	ldr	r3, [fp, #-8]
    4b00:	ldr	r3, [r3, #8]
    4b04:	cmp	r3, #1
    4b08:	bne	4b38 <coda_mem_cursor_read_char_partial_array+0x78>
    4b0c:	mov	r3, #1
    4b10:	str	r3, [sp, #4]
    4b14:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4b18:	str	r3, [sp]
    4b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4b20:	ldr	r2, [fp, #-20]	; 0xffffffec
    4b24:	ldr	r1, [pc, #212]	; 4c00 <coda_mem_cursor_read_char_partial_array+0x140>
    4b28:	ldr	r0, [fp, #-16]
    4b2c:	bl	3fc <read_partial_array>
    4b30:	mov	r3, r0
    4b34:	b	4bf4 <coda_mem_cursor_read_char_partial_array+0x134>
    4b38:	ldr	r3, [fp, #-8]
    4b3c:	ldr	r3, [r3, #8]
    4b40:	cmp	r3, #2
    4b44:	beq	4b5c <coda_mem_cursor_read_char_partial_array+0x9c>
    4b48:	ldr	r3, [pc, #180]	; 4c04 <coda_mem_cursor_read_char_partial_array+0x144>
    4b4c:	ldr	r2, [pc, #180]	; 4c08 <coda_mem_cursor_read_char_partial_array+0x148>
    4b50:	ldr	r1, [pc, #180]	; 4c0c <coda_mem_cursor_read_char_partial_array+0x14c>
    4b54:	ldr	r0, [pc, #180]	; 4c10 <coda_mem_cursor_read_char_partial_array+0x150>
    4b58:	bl	0 <__assert_fail>
    4b5c:	ldr	r3, [fp, #-8]
    4b60:	ldr	r3, [r3, #4]
    4b64:	ldr	r3, [r3, #40]	; 0x28
    4b68:	ldr	r3, [r3]
    4b6c:	cmp	r3, #1
    4b70:	bne	4ba0 <coda_mem_cursor_read_char_partial_array+0xe0>
    4b74:	mov	r3, #1
    4b78:	str	r3, [sp, #4]
    4b7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4b80:	str	r3, [sp]
    4b84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4b88:	ldr	r2, [fp, #-20]	; 0xffffffec
    4b8c:	ldr	r1, [pc, #128]	; 4c14 <coda_mem_cursor_read_char_partial_array+0x154>
    4b90:	ldr	r0, [fp, #-16]
    4b94:	bl	3fc <read_partial_array>
    4b98:	mov	r3, r0
    4b9c:	b	4bf4 <coda_mem_cursor_read_char_partial_array+0x134>
    4ba0:	ldr	r3, [fp, #-8]
    4ba4:	ldr	r3, [r3, #4]
    4ba8:	ldr	r3, [r3, #40]	; 0x28
    4bac:	ldr	r3, [r3]
    4bb0:	cmp	r3, #0
    4bb4:	beq	4bcc <coda_mem_cursor_read_char_partial_array+0x10c>
    4bb8:	ldr	r3, [pc, #68]	; 4c04 <coda_mem_cursor_read_char_partial_array+0x144>
    4bbc:	ldr	r2, [pc, #84]	; 4c18 <coda_mem_cursor_read_char_partial_array+0x158>
    4bc0:	ldr	r1, [pc, #68]	; 4c0c <coda_mem_cursor_read_char_partial_array+0x14c>
    4bc4:	ldr	r0, [pc, #80]	; 4c1c <coda_mem_cursor_read_char_partial_array+0x15c>
    4bc8:	bl	0 <__assert_fail>
    4bcc:	mov	r3, #1
    4bd0:	str	r3, [sp, #4]
    4bd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4bd8:	str	r3, [sp]
    4bdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4be0:	ldr	r2, [fp, #-20]	; 0xffffffec
    4be4:	ldr	r1, [pc, #52]	; 4c20 <coda_mem_cursor_read_char_partial_array+0x160>
    4be8:	ldr	r0, [fp, #-16]
    4bec:	bl	3fc <read_partial_array>
    4bf0:	mov	r3, r0
    4bf4:	mov	r0, r3
    4bf8:	sub	sp, fp, #4
    4bfc:	pop	{fp, pc}
    4c00:	.word	0x00000000
    4c04:	.word	0x00000940
    4c08:	.word	0x000004a7
    4c0c:	.word	0x000000c0
    4c10:	.word	0x00000110
    4c14:	.word	0x00000000
    4c18:	.word	0x000004ad
    4c1c:	.word	0x000002ac
    4c20:	.word	0x00000000
