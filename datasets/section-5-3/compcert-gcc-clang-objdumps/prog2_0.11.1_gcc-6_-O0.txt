
../compcert-repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

00010598 <.init>:
   10598:	push	{r3, lr}
   1059c:	bl	10630 <_start@@Base+0x3c>
   105a0:	pop	{r3, pc}

Disassembly of section .plt:

000105a4 <printf@plt-0x14>:
   105a4:	push	{lr}		; (str lr, [sp, #-4]!)
   105a8:	ldr	lr, [pc, #4]	; 105b4 <printf@plt-0x4>
   105ac:	add	lr, pc, lr
   105b0:	ldr	pc, [lr, #8]!
   105b4:	andeq	r0, r1, ip, asr #20

000105b8 <printf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000105c4 <__libc_start_main@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2628]!	; 0xa44

000105d0 <__gmon_start__@plt>:
   105d0:	add	ip, pc, #0, 12
   105d4:	add	ip, ip, #16, 20	; 0x10000
   105d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000105dc <__isoc99_scanf@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2612]!	; 0xa34

000105e8 <abort@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2604]!	; 0xa2c

Disassembly of section .text:

000105f4 <_start@@Base>:
   105f4:	mov	fp, #0
   105f8:	mov	lr, #0
   105fc:	pop	{r1}		; (ldr r1, [sp], #4)
   10600:	mov	r2, sp
   10604:	push	{r2}		; (str r2, [sp, #-4]!)
   10608:	push	{r0}		; (str r0, [sp, #-4]!)
   1060c:	ldr	ip, [pc, #16]	; 10624 <_start@@Base+0x30>
   10610:	push	{ip}		; (str ip, [sp, #-4]!)
   10614:	ldr	r0, [pc, #12]	; 10628 <_start@@Base+0x34>
   10618:	ldr	r3, [pc, #12]	; 1062c <_start@@Base+0x38>
   1061c:	bl	105c4 <__libc_start_main@plt>
   10620:	bl	105e8 <abort@plt>
   10624:	ldrdeq	r0, [r1], -r8
   10628:	andeq	r0, r1, r8, asr #15
   1062c:	andeq	r0, r1, r8, ror r8
   10630:	ldr	r3, [pc, #20]	; 1064c <_start@@Base+0x58>
   10634:	ldr	r2, [pc, #20]	; 10650 <_start@@Base+0x5c>
   10638:	add	r3, pc, r3
   1063c:	ldr	r2, [r3, r2]
   10640:	cmp	r2, #0
   10644:	bxeq	lr
   10648:	b	105d0 <__gmon_start__@plt>
   1064c:	andeq	r0, r1, r0, asr #19
   10650:	andeq	r0, r0, r0, lsr #32
   10654:	ldr	r3, [pc, #28]	; 10678 <_start@@Base+0x84>
   10658:	ldr	r0, [pc, #28]	; 1067c <_start@@Base+0x88>
   1065c:	sub	r3, r3, r0
   10660:	cmp	r3, #6
   10664:	bxls	lr
   10668:	ldr	r3, [pc, #16]	; 10680 <_start@@Base+0x8c>
   1066c:	cmp	r3, #0
   10670:	bxeq	lr
   10674:	bx	r3
   10678:	andeq	r1, r2, pc, lsr #32
   1067c:	andeq	r1, r2, ip, lsr #32
   10680:	andeq	r0, r0, r0
   10684:	ldr	r1, [pc, #36]	; 106b0 <_start@@Base+0xbc>
   10688:	ldr	r0, [pc, #36]	; 106b4 <_start@@Base+0xc0>
   1068c:	sub	r1, r1, r0
   10690:	asr	r1, r1, #2
   10694:	add	r1, r1, r1, lsr #31
   10698:	asrs	r1, r1, #1
   1069c:	bxeq	lr
   106a0:	ldr	r3, [pc, #16]	; 106b8 <_start@@Base+0xc4>
   106a4:	cmp	r3, #0
   106a8:	bxeq	lr
   106ac:	bx	r3
   106b0:	andeq	r1, r2, ip, lsr #32
   106b4:	andeq	r1, r2, ip, lsr #32
   106b8:	andeq	r0, r0, r0
   106bc:	push	{r4, lr}
   106c0:	ldr	r4, [pc, #24]	; 106e0 <_start@@Base+0xec>
   106c4:	ldrb	r3, [r4]
   106c8:	cmp	r3, #0
   106cc:	popne	{r4, pc}
   106d0:	bl	10654 <_start@@Base+0x60>
   106d4:	mov	r3, #1
   106d8:	strb	r3, [r4]
   106dc:	pop	{r4, pc}
   106e0:	andeq	r1, r2, ip, lsr #32
   106e4:	ldr	r0, [pc, #40]	; 10714 <_start@@Base+0x120>
   106e8:	ldr	r3, [r0]
   106ec:	cmp	r3, #0
   106f0:	bne	106f8 <_start@@Base+0x104>
   106f4:	b	10684 <_start@@Base+0x90>
   106f8:	ldr	r3, [pc, #24]	; 10718 <_start@@Base+0x124>
   106fc:	cmp	r3, #0
   10700:	beq	106f4 <_start@@Base+0x100>
   10704:	push	{r4, lr}
   10708:	blx	r3
   1070c:	pop	{r4, lr}
   10710:	b	10684 <_start@@Base+0x90>
   10714:	andeq	r0, r2, r4, lsl pc
   10718:	andeq	r0, r0, r0

0001071c <invert@@Base>:
   1071c:	push	{fp}		; (str fp, [sp, #-4]!)
   10720:	add	fp, sp, #0
   10724:	sub	sp, sp, #20
   10728:	str	r0, [fp, #-16]
   1072c:	mov	r3, #0
   10730:	str	r3, [fp, #-8]
   10734:	b	107a4 <invert@@Base+0x88>
   10738:	ldr	r2, [fp, #-8]
   1073c:	mov	r3, r2
   10740:	lsl	r3, r3, #2
   10744:	add	r3, r3, r2
   10748:	lsl	r3, r3, #1
   1074c:	str	r3, [fp, #-8]
   10750:	ldr	r1, [fp, #-16]
   10754:	ldr	r3, [pc, #104]	; 107c4 <invert@@Base+0xa8>
   10758:	smull	r2, r3, r3, r1
   1075c:	asr	r2, r3, #2
   10760:	asr	r3, r1, #31
   10764:	sub	r2, r2, r3
   10768:	mov	r3, r2
   1076c:	lsl	r3, r3, #2
   10770:	add	r3, r3, r2
   10774:	lsl	r3, r3, #1
   10778:	sub	r2, r1, r3
   1077c:	ldr	r3, [fp, #-8]
   10780:	add	r3, r3, r2
   10784:	str	r3, [fp, #-8]
   10788:	ldr	r3, [fp, #-16]
   1078c:	ldr	r2, [pc, #48]	; 107c4 <invert@@Base+0xa8>
   10790:	smull	r1, r2, r2, r3
   10794:	asr	r2, r2, #2
   10798:	asr	r3, r3, #31
   1079c:	sub	r3, r2, r3
   107a0:	str	r3, [fp, #-16]
   107a4:	ldr	r3, [fp, #-16]
   107a8:	cmp	r3, #0
   107ac:	bne	10738 <invert@@Base+0x1c>
   107b0:	ldr	r3, [fp, #-8]
   107b4:	mov	r0, r3
   107b8:	add	sp, fp, #0
   107bc:	pop	{fp}		; (ldr fp, [sp], #4)
   107c0:	bx	lr
   107c4:	strbtvs	r6, [r6], -r7, ror #12

000107c8 <main@@Base>:
   107c8:	push	{r4, fp, lr}
   107cc:	add	fp, sp, #8
   107d0:	sub	sp, sp, #20
   107d4:	sub	r3, fp, #20
   107d8:	mov	r1, r3
   107dc:	ldr	r0, [pc, #136]	; 1086c <main@@Base+0xa4>
   107e0:	bl	105dc <__isoc99_scanf@plt>
   107e4:	mov	r3, #0
   107e8:	str	r3, [fp, #-16]
   107ec:	b	1084c <main@@Base+0x84>
   107f0:	sub	r2, fp, #28
   107f4:	sub	r3, fp, #24
   107f8:	mov	r1, r3
   107fc:	ldr	r0, [pc, #108]	; 10870 <main@@Base+0xa8>
   10800:	bl	105dc <__isoc99_scanf@plt>
   10804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10808:	mov	r0, r3
   1080c:	bl	1071c <invert@@Base>
   10810:	mov	r4, r0
   10814:	ldr	r3, [fp, #-28]	; 0xffffffe4
   10818:	mov	r0, r3
   1081c:	bl	1071c <invert@@Base>
   10820:	mov	r3, r0
   10824:	add	r3, r4, r3
   10828:	mov	r0, r3
   1082c:	bl	1071c <invert@@Base>
   10830:	mov	r3, r0
   10834:	mov	r1, r3
   10838:	ldr	r0, [pc, #52]	; 10874 <main@@Base+0xac>
   1083c:	bl	105b8 <printf@plt>
   10840:	ldr	r3, [fp, #-16]
   10844:	add	r3, r3, #1
   10848:	str	r3, [fp, #-16]
   1084c:	ldr	r3, [fp, #-20]	; 0xffffffec
   10850:	ldr	r2, [fp, #-16]
   10854:	cmp	r2, r3
   10858:	blt	107f0 <main@@Base+0x28>
   1085c:	mov	r3, #0
   10860:	mov	r0, r3
   10864:	sub	sp, fp, #8
   10868:	pop	{r4, fp, pc}
   1086c:	andeq	r0, r1, r8, ror #17
   10870:	andeq	r0, r1, ip, ror #17
   10874:	strdeq	r0, [r1], -r4

00010878 <__libc_csu_init@@Base>:
   10878:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1087c:	mov	r7, r0
   10880:	ldr	r6, [pc, #72]	; 108d0 <__libc_csu_init@@Base+0x58>
   10884:	ldr	r5, [pc, #72]	; 108d4 <__libc_csu_init@@Base+0x5c>
   10888:	add	r6, pc, r6
   1088c:	add	r5, pc, r5
   10890:	sub	r6, r6, r5
   10894:	mov	r8, r1
   10898:	mov	r9, r2
   1089c:	bl	10598 <printf@plt-0x20>
   108a0:	asrs	r6, r6, #2
   108a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108a8:	mov	r4, #0
   108ac:	add	r4, r4, #1
   108b0:	ldr	r3, [r5], #4
   108b4:	mov	r2, r9
   108b8:	mov	r1, r8
   108bc:	mov	r0, r7
   108c0:	blx	r3
   108c4:	cmp	r6, r4
   108c8:	bne	108ac <__libc_csu_init@@Base+0x34>
   108cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108d0:	andeq	r0, r1, r0, lsl #13
   108d4:	andeq	r0, r1, r8, ror r6

000108d8 <__libc_csu_fini@@Base>:
   108d8:	bx	lr

Disassembly of section .fini:

000108dc <.fini>:
   108dc:	push	{r3, lr}
   108e0:	pop	{r3, pc}
