
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <mapping_delete>:
       0:	str	r4, [sp, #-8]!
       4:	subs	r4, r0, #0
       8:	str	lr, [sp, #4]
       c:	beq	34 <mapping_delete+0x34>
      10:	ldr	r0, [r4, #4]
      14:	cmp	r0, #0
      18:	beq	20 <mapping_delete+0x20>
      1c:	bl	0 <free>
      20:	mov	r0, r4
      24:	ldr	r4, [sp]
      28:	ldr	lr, [sp, #4]
      2c:	add	sp, sp, #8
      30:	b	0 <free>
      34:	ldr	r4, [sp]
      38:	add	sp, sp, #4
      3c:	pop	{pc}		; (ldr pc, [sp], #4)

00000040 <mapping_type_add_mapping.isra.1>:
      40:	strd	r4, [sp, #-20]!	; 0xffffffec
      44:	strd	r6, [sp, #8]
      48:	subs	r7, r2, #0
      4c:	str	lr, [sp, #16]
      50:	sub	sp, sp, #12
      54:	beq	164 <mapping_type_add_mapping.isra.1+0x124>
      58:	ldr	r4, [r1]
      5c:	mov	r6, r0
      60:	mov	r5, r1
      64:	cmp	r4, #0
      68:	beq	f8 <mapping_type_add_mapping.isra.1+0xb8>
      6c:	ldr	r1, [r4, #8]
      70:	ldr	r0, [r4, #12]
      74:	tst	r1, #15
      78:	beq	154 <mapping_type_add_mapping.isra.1+0x114>
      7c:	ldrd	r2, [r6]
      80:	add	ip, r1, #1
      84:	str	r7, [r0, r1, lsl #2]
      88:	str	ip, [r4, #8]
      8c:	cmp	r2, #0
      90:	sbcs	r3, r3, #0
      94:	blt	f0 <mapping_type_add_mapping.isra.1+0xb0>
      98:	ldrd	r2, [r4]
      9c:	mov	r0, #0
      a0:	cmp	r2, #0
      a4:	sbcs	r1, r3, #0
      a8:	blt	dc <mapping_type_add_mapping.isra.1+0x9c>
      ac:	ldr	ip, [r7]
      b0:	lsr	r0, r2, #3
      b4:	asr	r1, r3, #3
      b8:	orr	r0, r0, r3, lsl #29
      bc:	asr	r3, ip, #31
      c0:	cmp	r3, r1
      c4:	cmpeq	ip, r0
      c8:	beq	f0 <mapping_type_add_mapping.isra.1+0xb0>
      cc:	mvn	r2, #0
      d0:	mvn	r3, #0
      d4:	mov	r0, #0
      d8:	strd	r2, [r6]
      dc:	add	sp, sp, #12
      e0:	ldrd	r4, [sp]
      e4:	ldrd	r6, [sp, #8]
      e8:	add	sp, sp, #16
      ec:	pop	{pc}		; (ldr pc, [sp], #4)
      f0:	mov	r0, #0
      f4:	b	dc <mapping_type_add_mapping.isra.1+0x9c>
      f8:	mov	r0, #16
      fc:	bl	0 <malloc>
     100:	cmp	r0, #0
     104:	str	r0, [r5]
     108:	beq	1c0 <mapping_type_add_mapping.isra.1+0x180>
     10c:	ldrd	r2, [r6]
     110:	mov	ip, #0
     114:	str	ip, [r0, #8]
     118:	str	ip, [r0, #12]
     11c:	cmp	r2, #0
     120:	sbcs	r1, r3, #0
     124:	mov	r1, #64	; 0x40
     128:	mvnlt	r2, #0
     12c:	mvnlt	r3, #0
     130:	strd	r2, [r0]
     134:	mov	r0, r4
     138:	bl	0 <realloc>
     13c:	cmp	r0, #0
     140:	beq	188 <mapping_type_add_mapping.isra.1+0x148>
     144:	ldr	r4, [r5]
     148:	str	r0, [r4, #12]
     14c:	ldr	r1, [r4, #8]
     150:	b	7c <mapping_type_add_mapping.isra.1+0x3c>
     154:	add	r1, r1, #16
     158:	mov	r4, r0
     15c:	lsl	r1, r1, #2
     160:	b	134 <mapping_type_add_mapping.isra.1+0xf4>
     164:	mvn	r0, #99	; 0x63
     168:	movw	r2, #0
     16c:	movt	r2, #0
     170:	movw	r1, #0
     174:	movt	r1, #0
     178:	mov	r3, #348	; 0x15c
     17c:	bl	0 <coda_set_error>
     180:	mvn	r0, #0
     184:	b	dc <mapping_type_add_mapping.isra.1+0x9c>
     188:	ldr	r2, [r5]
     18c:	mov	ip, #380	; 0x17c
     190:	mvn	r0, #0
     194:	movw	r3, #0
     198:	movt	r3, #0
     19c:	movw	r1, #0
     1a0:	movt	r1, #0
     1a4:	ldr	r2, [r2, #8]
     1a8:	str	ip, [sp]
     1ac:	add	r2, r2, #16
     1b0:	lsl	r2, r2, #2
     1b4:	bl	0 <coda_set_error>
     1b8:	mvn	r0, #0
     1bc:	b	dc <mapping_type_add_mapping.isra.1+0x9c>
     1c0:	movw	r0, #363	; 0x16b
     1c4:	movw	r3, #0
     1c8:	movt	r3, #0
     1cc:	movw	r1, #0
     1d0:	movt	r1, #0
     1d4:	mov	r2, #16
     1d8:	str	r0, [sp]
     1dc:	mvn	r0, #0
     1e0:	bl	0 <coda_set_error>
     1e4:	mvn	r0, #0
     1e8:	b	dc <mapping_type_add_mapping.isra.1+0x9c>

000001ec <coda_conversion_new>:
     1ec:	vcmp.f64	d1, #0.0
     1f0:	str	r4, [sp, #-8]!
     1f4:	str	lr, [sp, #4]
     1f8:	vpush	{d8-d11}
     1fc:	sub	sp, sp, #8
     200:	vmrs	APSR_nzcv, fpscr
     204:	beq	258 <coda_conversion_new+0x6c>
     208:	mov	r0, #40	; 0x28
     20c:	vmov.f64	d8, d1
     210:	vmov.f64	d11, d0
     214:	vmov.f64	d10, d2
     218:	vmov.f64	d9, d3
     21c:	bl	0 <malloc>
     220:	subs	r4, r0, #0
     224:	beq	274 <coda_conversion_new+0x88>
     228:	mov	r3, #0
     22c:	vstr	d11, [r4]
     230:	vstr	d8, [r4, #8]
     234:	vstr	d10, [r4, #16]
     238:	vstr	d9, [r4, #24]
     23c:	str	r3, [r4, #32]
     240:	mov	r0, r4
     244:	add	sp, sp, #8
     248:	vpop	{d8-d11}
     24c:	ldr	r4, [sp]
     250:	add	sp, sp, #4
     254:	pop	{pc}		; (ldr pc, [sp], #4)
     258:	movw	r1, #0
     25c:	movt	r1, #0
     260:	movw	r0, #65136	; 0xfe70
     264:	movt	r0, #65535	; 0xffff
     268:	bl	0 <coda_set_error>
     26c:	mov	r4, #0
     270:	b	240 <coda_conversion_new+0x54>
     274:	mov	r0, #171	; 0xab
     278:	movw	r3, #0
     27c:	movt	r3, #0
     280:	movw	r1, #0
     284:	movt	r1, #0
     288:	mov	r2, #40	; 0x28
     28c:	str	r0, [sp]
     290:	mvn	r0, #0
     294:	bl	0 <coda_set_error>
     298:	b	240 <coda_conversion_new+0x54>

0000029c <coda_conversion_set_unit>:
     29c:	ldr	r3, [r0, #32]
     2a0:	str	r4, [sp, #-8]!
     2a4:	str	lr, [sp, #4]
     2a8:	cmp	r3, #0
     2ac:	bne	2e0 <coda_conversion_set_unit+0x44>
     2b0:	cmp	r1, #0
     2b4:	mov	r4, r0
     2b8:	beq	2cc <coda_conversion_set_unit+0x30>
     2bc:	mov	r0, r1
     2c0:	bl	0 <strdup>
     2c4:	subs	r1, r0, #0
     2c8:	beq	2fc <coda_conversion_set_unit+0x60>
     2cc:	mov	r0, #0
     2d0:	str	r1, [r4, #32]
     2d4:	ldr	r4, [sp]
     2d8:	add	sp, sp, #4
     2dc:	pop	{pc}		; (ldr pc, [sp], #4)
     2e0:	movw	r1, #0
     2e4:	movt	r1, #0
     2e8:	movw	r0, #65136	; 0xfe70
     2ec:	movt	r0, #65535	; 0xffff
     2f0:	bl	0 <coda_set_error>
     2f4:	mvn	r0, #0
     2f8:	b	2d4 <coda_conversion_set_unit+0x38>
     2fc:	mvn	r0, #0
     300:	movw	r2, #0
     304:	movt	r2, #0
     308:	movw	r1, #0
     30c:	movt	r1, #0
     310:	mov	r3, #198	; 0xc6
     314:	bl	0 <coda_set_error>
     318:	mvn	r0, #0
     31c:	b	2d4 <coda_conversion_set_unit+0x38>

00000320 <coda_conversion_delete>:
     320:	str	r4, [sp, #-8]!
     324:	subs	r4, r0, #0
     328:	str	lr, [sp, #4]
     32c:	beq	354 <coda_conversion_delete+0x34>
     330:	ldr	r0, [r4, #32]
     334:	cmp	r0, #0
     338:	beq	340 <coda_conversion_delete+0x20>
     33c:	bl	0 <free>
     340:	mov	r0, r4
     344:	ldr	r4, [sp]
     348:	ldr	lr, [sp, #4]
     34c:	add	sp, sp, #8
     350:	b	0 <free>
     354:	ldr	r4, [sp]
     358:	add	sp, sp, #4
     35c:	pop	{pc}		; (ldr pc, [sp], #4)

00000360 <coda_ascii_integer_mapping_new>:
     360:	strd	r4, [sp, #-24]!	; 0xffffffe8
     364:	str	r6, [sp, #8]
     368:	subs	r6, r0, #0
     36c:	strd	r8, [sp, #12]
     370:	str	lr, [sp, #20]
     374:	sub	sp, sp, #8
     378:	beq	430 <coda_ascii_integer_mapping_new+0xd0>
     37c:	mov	r8, r2
     380:	mov	r9, r3
     384:	bl	0 <strlen>
     388:	cmp	r0, #64	; 0x40
     38c:	mov	r5, r0
     390:	bhi	3e8 <coda_ascii_integer_mapping_new+0x88>
     394:	mov	r0, #16
     398:	bl	0 <malloc>
     39c:	subs	r4, r0, #0
     3a0:	beq	408 <coda_ascii_integer_mapping_new+0xa8>
     3a4:	mov	r3, #0
     3a8:	mov	r0, r6
     3ac:	str	r3, [r4]
     3b0:	strd	r8, [r4, #8]
     3b4:	bl	0 <strdup>
     3b8:	cmp	r0, #0
     3bc:	mov	r6, r0
     3c0:	str	r0, [r4, #4]
     3c4:	strne	r5, [r4]
     3c8:	beq	454 <coda_ascii_integer_mapping_new+0xf4>
     3cc:	mov	r0, r4
     3d0:	add	sp, sp, #8
     3d4:	ldrd	r4, [sp]
     3d8:	ldr	r6, [sp, #8]
     3dc:	ldrd	r8, [sp, #12]
     3e0:	add	sp, sp, #20
     3e4:	pop	{pc}		; (ldr pc, [sp], #4)
     3e8:	mov	r2, r0
     3ec:	movw	r1, #0
     3f0:	movt	r1, #0
     3f4:	movw	r0, #65136	; 0xfe70
     3f8:	movt	r0, #65535	; 0xffff
     3fc:	mov	r4, #0
     400:	bl	0 <coda_set_error>
     404:	b	3cc <coda_ascii_integer_mapping_new+0x6c>
     408:	movw	r0, #275	; 0x113
     40c:	movw	r3, #0
     410:	movt	r3, #0
     414:	movw	r1, #0
     418:	movt	r1, #0
     41c:	mov	r2, #16
     420:	str	r0, [sp]
     424:	mvn	r0, #0
     428:	bl	0 <coda_set_error>
     42c:	b	3cc <coda_ascii_integer_mapping_new+0x6c>
     430:	movw	r2, #0
     434:	movt	r2, #0
     438:	movw	r1, #0
     43c:	movt	r1, #0
     440:	movw	r3, #261	; 0x105
     444:	mvn	r0, #99	; 0x63
     448:	mov	r4, r6
     44c:	bl	0 <coda_set_error>
     450:	b	3cc <coda_ascii_integer_mapping_new+0x6c>
     454:	movw	r3, #286	; 0x11e
     458:	mvn	r0, #0
     45c:	movw	r2, #0
     460:	movt	r2, #0
     464:	movw	r1, #0
     468:	movt	r1, #0
     46c:	bl	0 <coda_set_error>
     470:	mov	r0, r4
     474:	mov	r4, r6
     478:	bl	0 <free>
     47c:	b	3cc <coda_ascii_integer_mapping_new+0x6c>

00000480 <coda_ascii_integer_mapping_delete>:
     480:	b	0 <mapping_delete>

00000484 <coda_ascii_float_mapping_new>:
     484:	strd	r4, [sp, #-16]!
     488:	str	r6, [sp, #8]
     48c:	subs	r6, r0, #0
     490:	str	lr, [sp, #12]
     494:	vpush	{d8}
     498:	sub	sp, sp, #8
     49c:	beq	550 <coda_ascii_float_mapping_new+0xcc>
     4a0:	vmov.f64	d8, d0
     4a4:	bl	0 <strlen>
     4a8:	cmp	r0, #64	; 0x40
     4ac:	mov	r5, r0
     4b0:	bhi	508 <coda_ascii_float_mapping_new+0x84>
     4b4:	mov	r0, #16
     4b8:	bl	0 <malloc>
     4bc:	subs	r4, r0, #0
     4c0:	beq	528 <coda_ascii_float_mapping_new+0xa4>
     4c4:	mov	r3, #0
     4c8:	mov	r0, r6
     4cc:	str	r3, [r4]
     4d0:	vstr	d8, [r4, #8]
     4d4:	bl	0 <strdup>
     4d8:	cmp	r0, #0
     4dc:	mov	r6, r0
     4e0:	str	r0, [r4, #4]
     4e4:	strne	r5, [r4]
     4e8:	beq	574 <coda_ascii_float_mapping_new+0xf0>
     4ec:	mov	r0, r4
     4f0:	add	sp, sp, #8
     4f4:	vpop	{d8}
     4f8:	ldrd	r4, [sp]
     4fc:	ldr	r6, [sp, #8]
     500:	add	sp, sp, #12
     504:	pop	{pc}		; (ldr pc, [sp], #4)
     508:	mov	r2, r0
     50c:	movw	r1, #0
     510:	movt	r1, #0
     514:	movw	r0, #65136	; 0xfe70
     518:	movt	r0, #65535	; 0xffff
     51c:	mov	r4, #0
     520:	bl	0 <coda_set_error>
     524:	b	4ec <coda_ascii_float_mapping_new+0x68>
     528:	movw	r0, #319	; 0x13f
     52c:	movw	r3, #0
     530:	movt	r3, #0
     534:	movw	r1, #0
     538:	movt	r1, #0
     53c:	mov	r2, #16
     540:	str	r0, [sp]
     544:	mvn	r0, #0
     548:	bl	0 <coda_set_error>
     54c:	b	4ec <coda_ascii_float_mapping_new+0x68>
     550:	movw	r2, #0
     554:	movt	r2, #0
     558:	movw	r1, #0
     55c:	movt	r1, #0
     560:	movw	r3, #306	; 0x132
     564:	mvn	r0, #99	; 0x63
     568:	mov	r4, r6
     56c:	bl	0 <coda_set_error>
     570:	b	4ec <coda_ascii_float_mapping_new+0x68>
     574:	movw	r3, #330	; 0x14a
     578:	mvn	r0, #0
     57c:	movw	r2, #0
     580:	movt	r2, #0
     584:	movw	r1, #0
     588:	movt	r1, #0
     58c:	bl	0 <coda_set_error>
     590:	mov	r0, r4
     594:	mov	r4, r6
     598:	bl	0 <free>
     59c:	b	4ec <coda_ascii_float_mapping_new+0x68>

000005a0 <coda_ascii_float_mapping_delete>:
     5a0:	b	0 <mapping_delete>

000005a4 <coda_type_record_field_delete>:
     5a4:	str	r4, [sp, #-8]!
     5a8:	subs	r4, r0, #0
     5ac:	str	lr, [sp, #4]
     5b0:	beq	62c <coda_type_record_field_delete+0x88>
     5b4:	ldr	r0, [r4]
     5b8:	cmp	r0, #0
     5bc:	beq	5c4 <coda_type_record_field_delete+0x20>
     5c0:	bl	0 <free>
     5c4:	ldr	r0, [r4, #4]
     5c8:	cmp	r0, #0
     5cc:	beq	5d4 <coda_type_record_field_delete+0x30>
     5d0:	bl	0 <free>
     5d4:	ldr	r0, [r4, #8]
     5d8:	cmp	r0, #0
     5dc:	beq	5f8 <coda_type_record_field_delete+0x54>
     5e0:	ldr	r3, [r0, #4]
     5e4:	cmp	r3, #0
     5e8:	subgt	r3, r3, #1
     5ec:	strgt	r3, [r0, #4]
     5f0:	bgt	5f8 <coda_type_record_field_delete+0x54>
     5f4:	bl	72c <coda_type_release.part.2>
     5f8:	ldr	r0, [r4, #20]
     5fc:	cmp	r0, #0
     600:	beq	608 <coda_type_record_field_delete+0x64>
     604:	bl	0 <coda_expression_delete>
     608:	ldr	r0, [r4, #32]
     60c:	cmp	r0, #0
     610:	beq	618 <coda_type_record_field_delete+0x74>
     614:	bl	0 <coda_expression_delete>
     618:	mov	r0, r4
     61c:	ldr	r4, [sp]
     620:	ldr	lr, [sp, #4]
     624:	add	sp, sp, #8
     628:	b	0 <free>
     62c:	ldr	r4, [sp]
     630:	add	sp, sp, #4
     634:	pop	{pc}		; (ldr pc, [sp], #4)

00000638 <record_delete>:
     638:	strd	r4, [sp, #-16]!
     63c:	subs	r4, r0, #0
     640:	str	r6, [sp, #8]
     644:	str	lr, [sp, #12]
     648:	beq	71c <record_delete+0xe4>
     64c:	ldr	r0, [r4, #16]
     650:	cmp	r0, #0
     654:	beq	65c <record_delete+0x24>
     658:	bl	0 <free>
     65c:	ldr	r0, [r4, #20]
     660:	cmp	r0, #0
     664:	beq	66c <record_delete+0x34>
     668:	bl	0 <free>
     66c:	ldr	r0, [r4, #32]
     670:	cmp	r0, #0
     674:	beq	67c <record_delete+0x44>
     678:	bl	0 <coda_expression_delete>
     67c:	ldr	r0, [r4, #36]	; 0x24
     680:	cmp	r0, #0
     684:	beq	6a0 <record_delete+0x68>
     688:	ldr	r3, [r0, #4]
     68c:	cmp	r3, #0
     690:	subgt	r3, r3, #1
     694:	strgt	r3, [r0, #4]
     698:	bgt	6a0 <record_delete+0x68>
     69c:	bl	72c <coda_type_release.part.2>
     6a0:	ldr	r0, [r4, #40]	; 0x28
     6a4:	cmp	r0, #0
     6a8:	beq	6b0 <record_delete+0x78>
     6ac:	bl	0 <coda_hashtable_delete>
     6b0:	ldr	r0, [r4, #44]	; 0x2c
     6b4:	cmp	r0, #0
     6b8:	beq	6c0 <record_delete+0x88>
     6bc:	bl	0 <coda_hashtable_delete>
     6c0:	ldr	r3, [r4, #48]	; 0x30
     6c4:	cmp	r3, #0
     6c8:	ble	6f4 <record_delete+0xbc>
     6cc:	mov	r5, #0
     6d0:	ldr	r3, [r4, #52]	; 0x34
     6d4:	ldr	r0, [r3, r5, lsl #2]
     6d8:	add	r5, r5, #1
     6dc:	bl	5a4 <coda_type_record_field_delete>
     6e0:	ldr	r3, [r4, #48]	; 0x30
     6e4:	cmp	r3, r5
     6e8:	bgt	6d0 <record_delete+0x98>
     6ec:	ldr	r0, [r4, #52]	; 0x34
     6f0:	bl	0 <free>
     6f4:	ldr	r0, [r4, #68]	; 0x44
     6f8:	cmp	r0, #0
     6fc:	beq	704 <record_delete+0xcc>
     700:	bl	0 <coda_expression_delete>
     704:	mov	r0, r4
     708:	ldrd	r4, [sp]
     70c:	ldr	r6, [sp, #8]
     710:	ldr	lr, [sp, #12]
     714:	add	sp, sp, #16
     718:	b	0 <free>
     71c:	ldrd	r4, [sp]
     720:	ldr	r6, [sp, #8]
     724:	add	sp, sp, #12
     728:	pop	{pc}		; (ldr pc, [sp], #4)

0000072c <coda_type_release.part.2>:
     72c:	ldr	r3, [r0, #8]
     730:	strd	r4, [sp, #-16]!
     734:	mov	r4, r0
     738:	str	r6, [sp, #8]
     73c:	str	lr, [sp, #12]
     740:	cmp	r3, #6
     744:	ldrls	pc, [pc, r3, lsl #2]
     748:	b	9a8 <coda_type_release.part.2+0x27c>
     74c:	.word	0x0000077c
     750:	.word	0x000007a4
     754:	.word	0x0000084c
     758:	.word	0x0000084c
     75c:	.word	0x00000920
     760:	.word	0x00000790
     764:	.word	0x00000768
     768:	ldrd	r4, [sp]
     76c:	ldr	r6, [sp, #8]
     770:	ldr	lr, [sp, #12]
     774:	add	sp, sp, #16
     778:	b	a4c <special_delete>
     77c:	ldrd	r4, [sp]
     780:	ldr	r6, [sp, #8]
     784:	ldr	lr, [sp, #12]
     788:	add	sp, sp, #16
     78c:	b	638 <record_delete>
     790:	ldrd	r4, [sp]
     794:	ldr	r6, [sp, #8]
     798:	ldr	lr, [sp, #12]
     79c:	add	sp, sp, #16
     7a0:	b	9b8 <raw_delete>
     7a4:	ldr	r0, [r0, #16]
     7a8:	cmp	r0, #0
     7ac:	beq	7b4 <coda_type_release.part.2+0x88>
     7b0:	bl	0 <free>
     7b4:	ldr	r0, [r4, #20]
     7b8:	cmp	r0, #0
     7bc:	beq	7c4 <coda_type_release.part.2+0x98>
     7c0:	bl	0 <free>
     7c4:	ldr	r0, [r4, #32]
     7c8:	cmp	r0, #0
     7cc:	beq	7d4 <coda_type_release.part.2+0xa8>
     7d0:	bl	0 <coda_expression_delete>
     7d4:	ldr	r0, [r4, #36]	; 0x24
     7d8:	cmp	r0, #0
     7dc:	beq	7f8 <coda_type_release.part.2+0xcc>
     7e0:	ldr	r3, [r0, #4]
     7e4:	cmp	r3, #0
     7e8:	subgt	r3, r3, #1
     7ec:	strgt	r3, [r0, #4]
     7f0:	bgt	7f8 <coda_type_release.part.2+0xcc>
     7f4:	bl	72c <coda_type_release.part.2>
     7f8:	ldr	r0, [r4, #40]	; 0x28
     7fc:	cmp	r0, #0
     800:	beq	814 <coda_type_release.part.2+0xe8>
     804:	ldr	r3, [r0, #4]
     808:	cmp	r3, #0
     80c:	bgt	99c <coda_type_release.part.2+0x270>
     810:	bl	72c <coda_type_release.part.2>
     814:	ldr	r2, [r4, #48]	; 0x30
     818:	cmp	r2, #0
     81c:	addgt	r6, r4, #80	; 0x50
     820:	movgt	r5, #0
     824:	ble	984 <coda_type_release.part.2+0x258>
     828:	ldr	r3, [r6, #4]!
     82c:	add	r5, r5, #1
     830:	subs	r0, r3, #0
     834:	beq	840 <coda_type_release.part.2+0x114>
     838:	bl	0 <coda_expression_delete>
     83c:	ldr	r2, [r4, #48]	; 0x30
     840:	cmp	r5, r2
     844:	blt	828 <coda_type_release.part.2+0xfc>
     848:	b	984 <coda_type_release.part.2+0x258>
     84c:	ldr	r0, [r0, #16]
     850:	cmp	r0, #0
     854:	beq	85c <coda_type_release.part.2+0x130>
     858:	bl	0 <free>
     85c:	ldr	r0, [r4, #20]
     860:	cmp	r0, #0
     864:	beq	86c <coda_type_release.part.2+0x140>
     868:	bl	0 <free>
     86c:	ldr	r0, [r4, #32]
     870:	cmp	r0, #0
     874:	beq	87c <coda_type_release.part.2+0x150>
     878:	bl	0 <coda_expression_delete>
     87c:	ldr	r0, [r4, #36]	; 0x24
     880:	cmp	r0, #0
     884:	beq	8a0 <coda_type_release.part.2+0x174>
     888:	ldr	r3, [r0, #4]
     88c:	cmp	r3, #0
     890:	subgt	r3, r3, #1
     894:	strgt	r3, [r0, #4]
     898:	bgt	8a0 <coda_type_release.part.2+0x174>
     89c:	bl	72c <coda_type_release.part.2>
     8a0:	ldr	r0, [r4, #40]	; 0x28
     8a4:	cmp	r0, #0
     8a8:	beq	8b0 <coda_type_release.part.2+0x184>
     8ac:	bl	0 <free>
     8b0:	ldr	r0, [r4, #48]	; 0x30
     8b4:	cmp	r0, #0
     8b8:	beq	8c0 <coda_type_release.part.2+0x194>
     8bc:	bl	320 <coda_conversion_delete>
     8c0:	ldr	r6, [r4, #52]	; 0x34
     8c4:	cmp	r6, #0
     8c8:	beq	984 <coda_type_release.part.2+0x258>
     8cc:	ldr	r2, [r6, #12]
     8d0:	cmp	r2, #0
     8d4:	beq	914 <coda_type_release.part.2+0x1e8>
     8d8:	ldr	r1, [r6, #8]
     8dc:	cmp	r1, #0
     8e0:	ble	90c <coda_type_release.part.2+0x1e0>
     8e4:	mov	r5, #0
     8e8:	ldr	r3, [r2, r5, lsl #2]
     8ec:	add	r5, r5, #1
     8f0:	subs	r0, r3, #0
     8f4:	beq	904 <coda_type_release.part.2+0x1d8>
     8f8:	bl	0 <mapping_delete>
     8fc:	ldr	r1, [r6, #8]
     900:	ldr	r2, [r6, #12]
     904:	cmp	r5, r1
     908:	blt	8e8 <coda_type_release.part.2+0x1bc>
     90c:	mov	r0, r2
     910:	bl	0 <free>
     914:	mov	r0, r6
     918:	bl	0 <free>
     91c:	b	984 <coda_type_release.part.2+0x258>
     920:	ldr	r0, [r0, #16]
     924:	cmp	r0, #0
     928:	beq	930 <coda_type_release.part.2+0x204>
     92c:	bl	0 <free>
     930:	ldr	r0, [r4, #20]
     934:	cmp	r0, #0
     938:	beq	940 <coda_type_release.part.2+0x214>
     93c:	bl	0 <free>
     940:	ldr	r0, [r4, #32]
     944:	cmp	r0, #0
     948:	beq	950 <coda_type_release.part.2+0x224>
     94c:	bl	0 <coda_expression_delete>
     950:	ldr	r0, [r4, #36]	; 0x24
     954:	cmp	r0, #0
     958:	beq	974 <coda_type_release.part.2+0x248>
     95c:	ldr	r3, [r0, #4]
     960:	cmp	r3, #0
     964:	subgt	r3, r3, #1
     968:	strgt	r3, [r0, #4]
     96c:	bgt	974 <coda_type_release.part.2+0x248>
     970:	bl	72c <coda_type_release.part.2>
     974:	ldr	r0, [r4, #40]	; 0x28
     978:	cmp	r0, #0
     97c:	beq	984 <coda_type_release.part.2+0x258>
     980:	bl	0 <free>
     984:	mov	r0, r4
     988:	ldrd	r4, [sp]
     98c:	ldr	r6, [sp, #8]
     990:	ldr	lr, [sp, #12]
     994:	add	sp, sp, #16
     998:	b	0 <free>
     99c:	sub	r3, r3, #1
     9a0:	str	r3, [r0, #4]
     9a4:	b	814 <coda_type_release.part.2+0xe8>
     9a8:	ldrd	r4, [sp]
     9ac:	ldr	r6, [sp, #8]
     9b0:	add	sp, sp, #12
     9b4:	pop	{pc}		; (ldr pc, [sp], #4)

000009b8 <raw_delete>:
     9b8:	str	r4, [sp, #-8]!
     9bc:	subs	r4, r0, #0
     9c0:	str	lr, [sp, #4]
     9c4:	beq	a40 <raw_delete+0x88>
     9c8:	ldr	r0, [r4, #16]
     9cc:	cmp	r0, #0
     9d0:	beq	9d8 <raw_delete+0x20>
     9d4:	bl	0 <free>
     9d8:	ldr	r0, [r4, #20]
     9dc:	cmp	r0, #0
     9e0:	beq	9e8 <raw_delete+0x30>
     9e4:	bl	0 <free>
     9e8:	ldr	r0, [r4, #32]
     9ec:	cmp	r0, #0
     9f0:	beq	9f8 <raw_delete+0x40>
     9f4:	bl	0 <coda_expression_delete>
     9f8:	ldr	r0, [r4, #36]	; 0x24
     9fc:	cmp	r0, #0
     a00:	beq	a1c <raw_delete+0x64>
     a04:	ldr	r3, [r0, #4]
     a08:	cmp	r3, #0
     a0c:	subgt	r3, r3, #1
     a10:	strgt	r3, [r0, #4]
     a14:	bgt	a1c <raw_delete+0x64>
     a18:	bl	72c <coda_type_release.part.2>
     a1c:	ldr	r0, [r4, #44]	; 0x2c
     a20:	cmp	r0, #0
     a24:	beq	a2c <raw_delete+0x74>
     a28:	bl	0 <free>
     a2c:	mov	r0, r4
     a30:	ldr	r4, [sp]
     a34:	ldr	lr, [sp, #4]
     a38:	add	sp, sp, #8
     a3c:	b	0 <free>
     a40:	ldr	r4, [sp]
     a44:	add	sp, sp, #4
     a48:	pop	{pc}		; (ldr pc, [sp], #4)

00000a4c <special_delete>:
     a4c:	str	r4, [sp, #-8]!
     a50:	subs	r4, r0, #0
     a54:	str	lr, [sp, #4]
     a58:	beq	b08 <special_delete+0xbc>
     a5c:	ldr	r0, [r4, #16]
     a60:	cmp	r0, #0
     a64:	beq	a6c <special_delete+0x20>
     a68:	bl	0 <free>
     a6c:	ldr	r0, [r4, #20]
     a70:	cmp	r0, #0
     a74:	beq	a7c <special_delete+0x30>
     a78:	bl	0 <free>
     a7c:	ldr	r0, [r4, #32]
     a80:	cmp	r0, #0
     a84:	beq	a8c <special_delete+0x40>
     a88:	bl	0 <coda_expression_delete>
     a8c:	ldr	r0, [r4, #36]	; 0x24
     a90:	cmp	r0, #0
     a94:	beq	ab0 <special_delete+0x64>
     a98:	ldr	r3, [r0, #4]
     a9c:	cmp	r3, #0
     aa0:	subgt	r3, r3, #1
     aa4:	strgt	r3, [r0, #4]
     aa8:	bgt	ab0 <special_delete+0x64>
     aac:	bl	72c <coda_type_release.part.2>
     ab0:	ldr	r0, [r4, #44]	; 0x2c
     ab4:	cmp	r0, #0
     ab8:	beq	ad4 <special_delete+0x88>
     abc:	ldr	r3, [r0, #4]
     ac0:	cmp	r3, #0
     ac4:	subgt	r3, r3, #1
     ac8:	strgt	r3, [r0, #4]
     acc:	bgt	ad4 <special_delete+0x88>
     ad0:	bl	72c <coda_type_release.part.2>
     ad4:	ldr	r0, [r4, #48]	; 0x30
     ad8:	cmp	r0, #0
     adc:	beq	ae4 <special_delete+0x98>
     ae0:	bl	0 <free>
     ae4:	ldr	r0, [r4, #52]	; 0x34
     ae8:	cmp	r0, #0
     aec:	beq	af4 <special_delete+0xa8>
     af0:	bl	0 <coda_expression_delete>
     af4:	mov	r0, r4
     af8:	ldr	r4, [sp]
     afc:	ldr	lr, [sp, #4]
     b00:	add	sp, sp, #8
     b04:	b	0 <free>
     b08:	ldr	r4, [sp]
     b0c:	add	sp, sp, #4
     b10:	pop	{pc}		; (ldr pc, [sp], #4)

00000b14 <coda_type_release>:
     b14:	subs	r2, r0, #0
     b18:	beq	b2c <coda_type_release+0x18>
     b1c:	ldr	r3, [r2, #4]
     b20:	cmp	r3, #0
     b24:	bgt	b30 <coda_type_release+0x1c>
     b28:	b	72c <coda_type_release.part.2>
     b2c:	bx	lr
     b30:	sub	r3, r3, #1
     b34:	str	r3, [r2, #4]
     b38:	bx	lr

00000b3c <coda_type_set_read_type>:
     b3c:	subs	r2, r0, #0
     b40:	str	r4, [sp, #-8]!
     b44:	str	lr, [sp, #4]
     b48:	beq	c54 <coda_type_set_read_type+0x118>
     b4c:	ldr	r3, [r2, #8]
     b50:	cmp	r3, #6
     b54:	ldrls	pc, [pc, r3, lsl #2]
     b58:	b	c24 <coda_type_set_read_type+0xe8>
     b5c:	.word	0x00000b98
     b60:	.word	0x00000b98
     b64:	.word	0x00000bc8
     b68:	.word	0x00000c14
     b6c:	.word	0x00000b78
     b70:	.word	0x00000b98
     b74:	.word	0x00000b98
     b78:	sub	r0, r1, #10
     b7c:	cmp	r0, #1
     b80:	bhi	bd0 <coda_type_set_read_type+0x94>
     b84:	mov	r0, #0
     b88:	str	r1, [r2, #12]
     b8c:	ldr	r4, [sp]
     b90:	add	sp, sp, #4
     b94:	pop	{pc}		; (ldr pc, [sp], #4)
     b98:	movw	r2, #0
     b9c:	movt	r2, #0
     ba0:	movw	r1, #0
     ba4:	movt	r1, #0
     ba8:	ldr	r2, [r2, r3, lsl #2]
     bac:	movw	r0, #65136	; 0xfe70
     bb0:	movt	r0, #65535	; 0xffff
     bb4:	bl	0 <coda_set_error>
     bb8:	ldr	r4, [sp]
     bbc:	add	sp, sp, #4
     bc0:	mvn	r0, #0
     bc4:	pop	{pc}		; (ldr pc, [sp], #4)
     bc8:	cmp	r1, #7
     bcc:	bls	b84 <coda_type_set_read_type+0x48>
     bd0:	add	r1, r1, #1
     bd4:	cmp	r1, #13
     bd8:	bls	c30 <coda_type_set_read_type+0xf4>
     bdc:	movw	r2, #0
     be0:	movt	r2, #0
     be4:	movw	r0, #0
     be8:	movt	r0, #0
     bec:	ldr	r3, [r0, r3, lsl #2]
     bf0:	movw	r1, #0
     bf4:	movt	r1, #0
     bf8:	movw	r0, #65136	; 0xfe70
     bfc:	movt	r0, #65535	; 0xffff
     c00:	bl	0 <coda_set_error>
     c04:	ldr	r4, [sp]
     c08:	add	sp, sp, #4
     c0c:	mvn	r0, #0
     c10:	pop	{pc}		; (ldr pc, [sp], #4)
     c14:	sub	r0, r1, #8
     c18:	cmp	r0, #1
     c1c:	bls	b84 <coda_type_set_read_type+0x48>
     c20:	b	bd0 <coda_type_set_read_type+0x94>
     c24:	add	r1, r1, #1
     c28:	cmp	r1, #13
     c2c:	bhi	c78 <coda_type_set_read_type+0x13c>
     c30:	movw	r0, #0
     c34:	movt	r0, #0
     c38:	add	r1, r0, r1, lsl #2
     c3c:	cmp	r3, #6
     c40:	ldr	r2, [r1, #28]
     c44:	bls	bec <coda_type_set_read_type+0xb0>
     c48:	movw	r3, #0
     c4c:	movt	r3, #0
     c50:	b	bf0 <coda_type_set_read_type+0xb4>
     c54:	mvn	r0, #99	; 0x63
     c58:	movw	r2, #0
     c5c:	movt	r2, #0
     c60:	movw	r1, #0
     c64:	movt	r1, #0
     c68:	movw	r3, #710	; 0x2c6
     c6c:	bl	0 <coda_set_error>
     c70:	mvn	r0, #0
     c74:	b	b8c <coda_type_set_read_type+0x50>
     c78:	movw	r2, #0
     c7c:	movt	r2, #0
     c80:	mov	r3, r2
     c84:	b	bf0 <coda_type_set_read_type+0xb4>

00000c88 <coda_type_set_name>:
     c88:	strd	r4, [sp, #-16]!
     c8c:	str	r6, [sp, #8]
     c90:	subs	r6, r0, #0
     c94:	str	lr, [sp, #12]
     c98:	beq	d4c <coda_type_set_name+0xc4>
     c9c:	cmp	r1, #0
     ca0:	mov	r5, r1
     ca4:	beq	d28 <coda_type_set_name+0xa0>
     ca8:	ldr	r4, [r6, #16]
     cac:	cmp	r4, #0
     cb0:	bne	cec <coda_type_set_name+0x64>
     cb4:	mov	r0, r1
     cb8:	bl	0 <coda_is_identifier>
     cbc:	cmp	r0, #0
     cc0:	beq	d08 <coda_type_set_name+0x80>
     cc4:	mov	r0, r5
     cc8:	bl	0 <strdup>
     ccc:	subs	r3, r0, #0
     cd0:	movne	r0, r4
     cd4:	strne	r3, [r6, #16]
     cd8:	beq	d70 <coda_type_set_name+0xe8>
     cdc:	ldrd	r4, [sp]
     ce0:	ldr	r6, [sp, #8]
     ce4:	add	sp, sp, #12
     ce8:	pop	{pc}		; (ldr pc, [sp], #4)
     cec:	movw	r1, #0
     cf0:	movt	r1, #0
     cf4:	movw	r0, #65136	; 0xfe70
     cf8:	movt	r0, #65535	; 0xffff
     cfc:	bl	0 <coda_set_error>
     d00:	mvn	r0, #0
     d04:	b	cdc <coda_type_set_name+0x54>
     d08:	mov	r2, r5
     d0c:	movw	r1, #0
     d10:	movt	r1, #0
     d14:	movw	r0, #65136	; 0xfe70
     d18:	movt	r0, #65535	; 0xffff
     d1c:	bl	0 <coda_set_error>
     d20:	mvn	r0, #0
     d24:	b	cdc <coda_type_set_name+0x54>
     d28:	mvn	r0, #99	; 0x63
     d2c:	movw	r2, #0
     d30:	movt	r2, #0
     d34:	movw	r1, #0
     d38:	movt	r1, #0
     d3c:	mov	r3, #764	; 0x2fc
     d40:	bl	0 <coda_set_error>
     d44:	mvn	r0, #0
     d48:	b	cdc <coda_type_set_name+0x54>
     d4c:	mvn	r0, #99	; 0x63
     d50:	movw	r2, #0
     d54:	movt	r2, #0
     d58:	movw	r1, #0
     d5c:	movt	r1, #0
     d60:	movw	r3, #759	; 0x2f7
     d64:	bl	0 <coda_set_error>
     d68:	mvn	r0, #0
     d6c:	b	cdc <coda_type_set_name+0x54>
     d70:	mvn	r0, #0
     d74:	movw	r2, #0
     d78:	movt	r2, #0
     d7c:	movw	r1, #0
     d80:	movt	r1, #0
     d84:	movw	r3, #781	; 0x30d
     d88:	bl	0 <coda_set_error>
     d8c:	mvn	r0, #0
     d90:	b	cdc <coda_type_set_name+0x54>

00000d94 <coda_type_set_description>:
     d94:	strd	r4, [sp, #-16]!
     d98:	subs	r5, r0, #0
     d9c:	str	r6, [sp, #8]
     da0:	str	lr, [sp, #12]
     da4:	beq	e24 <coda_type_set_description+0x90>
     da8:	cmp	r1, #0
     dac:	beq	e00 <coda_type_set_description+0x6c>
     db0:	ldr	r4, [r5, #20]
     db4:	cmp	r4, #0
     db8:	bne	de4 <coda_type_set_description+0x50>
     dbc:	mov	r0, r1
     dc0:	bl	0 <strdup>
     dc4:	subs	r3, r0, #0
     dc8:	movne	r0, r4
     dcc:	strne	r3, [r5, #20]
     dd0:	beq	e48 <coda_type_set_description+0xb4>
     dd4:	ldrd	r4, [sp]
     dd8:	ldr	r6, [sp, #8]
     ddc:	add	sp, sp, #12
     de0:	pop	{pc}		; (ldr pc, [sp], #4)
     de4:	movw	r1, #0
     de8:	movt	r1, #0
     dec:	movw	r0, #65136	; 0xfe70
     df0:	movt	r0, #65535	; 0xffff
     df4:	bl	0 <coda_set_error>
     df8:	mvn	r0, #0
     dfc:	b	dd4 <coda_type_set_description+0x40>
     e00:	mvn	r0, #99	; 0x63
     e04:	movw	r2, #0
     e08:	movt	r2, #0
     e0c:	movw	r1, #0
     e10:	movt	r1, #0
     e14:	mov	r3, #800	; 0x320
     e18:	bl	0 <coda_set_error>
     e1c:	mvn	r0, #0
     e20:	b	dd4 <coda_type_set_description+0x40>
     e24:	mvn	r0, #99	; 0x63
     e28:	movw	r2, #0
     e2c:	movt	r2, #0
     e30:	movw	r1, #0
     e34:	movt	r1, #0
     e38:	movw	r3, #795	; 0x31b
     e3c:	bl	0 <coda_set_error>
     e40:	mvn	r0, #0
     e44:	b	dd4 <coda_type_set_description+0x40>
     e48:	mvn	r0, #0
     e4c:	movw	r2, #0
     e50:	movt	r2, #0
     e54:	movw	r1, #0
     e58:	movt	r1, #0
     e5c:	movw	r3, #814	; 0x32e
     e60:	bl	0 <coda_set_error>
     e64:	mvn	r0, #0
     e68:	b	dd4 <coda_type_set_description+0x40>

00000e6c <coda_type_set_bit_size>:
     e6c:	subs	r1, r0, #0
     e70:	strd	r4, [sp, #-20]!	; 0xffffffec
     e74:	strd	r6, [sp, #8]
     e78:	str	lr, [sp, #16]
     e7c:	sub	sp, sp, #28
     e80:	beq	1034 <coda_type_set_bit_size+0x1c8>
     e84:	ldrd	r4, [r1, #24]
     e88:	mov	r7, r3
     e8c:	cmp	r4, #0
     e90:	sbcs	r3, r5, #0
     e94:	bge	fe8 <coda_type_set_bit_size+0x17c>
     e98:	ldr	r0, [r1, #32]
     e9c:	cmp	r0, #0
     ea0:	bne	fcc <coda_type_set_bit_size+0x160>
     ea4:	cmp	r2, #0
     ea8:	mov	r6, r2
     eac:	sbcs	r3, r7, #0
     eb0:	blt	1004 <coda_type_set_bit_size+0x198>
     eb4:	ldr	r0, [r1]
     eb8:	cmp	r0, #0
     ebc:	beq	eec <coda_type_set_bit_size+0x80>
     ec0:	ldr	r0, [r1, #8]
     ec4:	sub	r0, r0, #2
     ec8:	cmp	r0, #1
     ecc:	bls	f2c <coda_type_set_bit_size+0xc0>
     ed0:	mov	r0, #0
     ed4:	strd	r6, [r1, #24]
     ed8:	add	sp, sp, #28
     edc:	ldrd	r4, [sp]
     ee0:	ldrd	r6, [sp, #8]
     ee4:	add	sp, sp, #16
     ee8:	pop	{pc}		; (ldr pc, [sp], #4)
     eec:	and	r4, r2, #7
     ef0:	mov	r5, r0
     ef4:	orrs	r3, r4, r5
     ef8:	beq	ec0 <coda_type_set_bit_size+0x54>
     efc:	mov	r0, r2
     f00:	mov	r1, r7
     f04:	mov	r2, sp
     f08:	bl	0 <coda_str64>
     f0c:	mov	r2, sp
     f10:	movw	r1, #0
     f14:	movt	r1, #0
     f18:	movw	r0, #65136	; 0xfe70
     f1c:	movt	r0, #65535	; 0xffff
     f20:	bl	0 <coda_set_error>
     f24:	mvn	r0, #0
     f28:	b	ed8 <coda_type_set_bit_size+0x6c>
     f2c:	ldr	r0, [r1, #52]	; 0x34
     f30:	cmp	r0, #0
     f34:	beq	ed0 <coda_type_set_bit_size+0x64>
     f38:	ldrd	r4, [r0]
     f3c:	cmp	r4, #0
     f40:	sbcs	r3, r5, #0
     f44:	bge	1058 <coda_type_set_bit_size+0x1ec>
     f48:	ldr	lr, [r0, #8]
     f4c:	strd	r6, [r0]
     f50:	strd	r6, [r1, #24]
     f54:	cmp	lr, #0
     f58:	ble	fb0 <coda_type_set_bit_size+0x144>
     f5c:	ldr	ip, [r0, #12]
     f60:	lsr	r4, r6, #3
     f64:	asr	r5, r7, #3
     f68:	orr	r4, r4, r7, lsl #29
     f6c:	ldr	r2, [ip]
     f70:	ldr	r2, [r2]
     f74:	asr	r3, r2, #31
     f78:	cmp	r3, r5
     f7c:	cmpeq	r2, r4
     f80:	moveq	r0, #0
     f84:	beq	fa4 <coda_type_set_bit_size+0x138>
     f88:	b	fb8 <coda_type_set_bit_size+0x14c>
     f8c:	ldr	r3, [ip, #4]!
     f90:	ldr	r2, [r3]
     f94:	asr	r3, r2, #31
     f98:	cmp	r3, r5
     f9c:	cmpeq	r2, r4
     fa0:	bne	fb8 <coda_type_set_bit_size+0x14c>
     fa4:	add	r0, r0, #1
     fa8:	cmp	r0, lr
     fac:	bne	f8c <coda_type_set_bit_size+0x120>
     fb0:	mov	r0, #0
     fb4:	b	ed8 <coda_type_set_bit_size+0x6c>
     fb8:	mvn	r2, #0
     fbc:	mvn	r3, #0
     fc0:	mov	r0, #0
     fc4:	strd	r2, [r1, #24]
     fc8:	b	ed8 <coda_type_set_bit_size+0x6c>
     fcc:	movw	r1, #0
     fd0:	movt	r1, #0
     fd4:	movw	r0, #65136	; 0xfe70
     fd8:	movt	r0, #65535	; 0xffff
     fdc:	bl	0 <coda_set_error>
     fe0:	mvn	r0, #0
     fe4:	b	ed8 <coda_type_set_bit_size+0x6c>
     fe8:	movw	r1, #0
     fec:	movt	r1, #0
     ff0:	movw	r0, #65136	; 0xfe70
     ff4:	movt	r0, #65535	; 0xffff
     ff8:	bl	0 <coda_set_error>
     ffc:	mvn	r0, #0
    1000:	b	ed8 <coda_type_set_bit_size+0x6c>
    1004:	mov	r0, r2
    1008:	mov	r1, r7
    100c:	mov	r2, sp
    1010:	bl	0 <coda_str64>
    1014:	mov	r2, sp
    1018:	movw	r1, #0
    101c:	movt	r1, #0
    1020:	movw	r0, #65136	; 0xfe70
    1024:	movt	r0, #65535	; 0xffff
    1028:	bl	0 <coda_set_error>
    102c:	mvn	r0, #0
    1030:	b	ed8 <coda_type_set_bit_size+0x6c>
    1034:	mvn	r0, #99	; 0x63
    1038:	movw	r2, #0
    103c:	movt	r2, #0
    1040:	movw	r1, #0
    1044:	movt	r1, #0
    1048:	movw	r3, #827	; 0x33b
    104c:	bl	0 <coda_set_error>
    1050:	mvn	r0, #0
    1054:	b	ed8 <coda_type_set_bit_size+0x6c>
    1058:	movw	r1, #0
    105c:	movt	r1, #0
    1060:	movw	r0, #65136	; 0xfe70
    1064:	movt	r0, #65535	; 0xffff
    1068:	bl	0 <coda_set_error>
    106c:	mvn	r0, #0
    1070:	b	ed8 <coda_type_set_bit_size+0x6c>

00001074 <coda_type_set_byte_size>:
    1074:	lsl	r3, r3, #3
    1078:	mov	r1, r2
    107c:	lsl	r2, r2, #3
    1080:	orr	r3, r3, r1, lsr #29
    1084:	b	e6c <coda_type_set_bit_size>

00001088 <coda_type_set_bit_size_expression>:
    1088:	subs	r3, r0, #0
    108c:	strd	r4, [sp, #-16]!
    1090:	str	r6, [sp, #8]
    1094:	str	lr, [sp, #12]
    1098:	beq	1134 <coda_type_set_bit_size_expression+0xac>
    109c:	cmp	r1, #0
    10a0:	beq	1158 <coda_type_set_bit_size_expression+0xd0>
    10a4:	ldr	r2, [r3, #32]
    10a8:	cmp	r2, #0
    10ac:	bne	1118 <coda_type_set_bit_size_expression+0x90>
    10b0:	ldr	r2, [r3, #8]
    10b4:	ldrd	r4, [r3, #24]
    10b8:	cmp	r2, #1
    10bc:	bls	10f0 <coda_type_set_bit_size_expression+0x68>
    10c0:	cmp	r4, #0
    10c4:	sbcs	r2, r5, #0
    10c8:	bge	10fc <coda_type_set_bit_size_expression+0x74>
    10cc:	mvn	r4, #0
    10d0:	mvn	r5, #0
    10d4:	mov	r0, #0
    10d8:	strd	r4, [r3, #24]
    10dc:	str	r1, [r3, #32]
    10e0:	ldrd	r4, [sp]
    10e4:	ldr	r6, [sp, #8]
    10e8:	add	sp, sp, #12
    10ec:	pop	{pc}		; (ldr pc, [sp], #4)
    10f0:	cmp	r4, #1
    10f4:	sbcs	r2, r5, #0
    10f8:	blt	10cc <coda_type_set_bit_size_expression+0x44>
    10fc:	movw	r1, #0
    1100:	movt	r1, #0
    1104:	movw	r0, #65136	; 0xfe70
    1108:	movt	r0, #65535	; 0xffff
    110c:	bl	0 <coda_set_error>
    1110:	mvn	r0, #0
    1114:	b	10e0 <coda_type_set_bit_size_expression+0x58>
    1118:	movw	r1, #0
    111c:	movt	r1, #0
    1120:	movw	r0, #65136	; 0xfe70
    1124:	movt	r0, #65535	; 0xffff
    1128:	bl	0 <coda_set_error>
    112c:	mvn	r0, #0
    1130:	b	10e0 <coda_type_set_bit_size_expression+0x58>
    1134:	mvn	r0, #99	; 0x63
    1138:	movw	r2, #0
    113c:	movt	r2, #0
    1140:	movw	r1, #0
    1144:	movt	r1, #0
    1148:	mov	r3, #892	; 0x37c
    114c:	bl	0 <coda_set_error>
    1150:	mvn	r0, #0
    1154:	b	10e0 <coda_type_set_bit_size_expression+0x58>
    1158:	mvn	r0, #99	; 0x63
    115c:	movw	r2, #0
    1160:	movt	r2, #0
    1164:	movw	r1, #0
    1168:	movt	r1, #0
    116c:	movw	r3, #897	; 0x381
    1170:	bl	0 <coda_set_error>
    1174:	mvn	r0, #0
    1178:	b	10e0 <coda_type_set_bit_size_expression+0x58>

0000117c <coda_type_set_byte_size_expression>:
    117c:	subs	r3, r0, #0
    1180:	strd	r4, [sp, #-16]!
    1184:	str	r6, [sp, #8]
    1188:	str	lr, [sp, #12]
    118c:	beq	1228 <coda_type_set_byte_size_expression+0xac>
    1190:	cmp	r1, #0
    1194:	beq	124c <coda_type_set_byte_size_expression+0xd0>
    1198:	ldr	r2, [r3, #32]
    119c:	cmp	r2, #0
    11a0:	bne	120c <coda_type_set_byte_size_expression+0x90>
    11a4:	ldr	r2, [r3, #8]
    11a8:	ldrd	r4, [r3, #24]
    11ac:	cmp	r2, #1
    11b0:	bls	11e4 <coda_type_set_byte_size_expression+0x68>
    11b4:	cmp	r4, #0
    11b8:	sbcs	r2, r5, #0
    11bc:	bge	11f0 <coda_type_set_byte_size_expression+0x74>
    11c0:	mvn	r4, #7
    11c4:	mvn	r5, #0
    11c8:	mov	r0, #0
    11cc:	strd	r4, [r3, #24]
    11d0:	str	r1, [r3, #32]
    11d4:	ldrd	r4, [sp]
    11d8:	ldr	r6, [sp, #8]
    11dc:	add	sp, sp, #12
    11e0:	pop	{pc}		; (ldr pc, [sp], #4)
    11e4:	cmp	r4, #1
    11e8:	sbcs	r2, r5, #0
    11ec:	blt	11c0 <coda_type_set_byte_size_expression+0x44>
    11f0:	movw	r1, #0
    11f4:	movt	r1, #0
    11f8:	movw	r0, #65136	; 0xfe70
    11fc:	movt	r0, #65535	; 0xffff
    1200:	bl	0 <coda_set_error>
    1204:	mvn	r0, #0
    1208:	b	11d4 <coda_type_set_byte_size_expression+0x58>
    120c:	movw	r1, #0
    1210:	movt	r1, #0
    1214:	movw	r0, #65136	; 0xfe70
    1218:	movt	r0, #65535	; 0xffff
    121c:	bl	0 <coda_set_error>
    1220:	mvn	r0, #0
    1224:	b	11d4 <coda_type_set_byte_size_expression+0x58>
    1228:	mvn	r0, #99	; 0x63
    122c:	movw	r2, #0
    1230:	movt	r2, #0
    1234:	movw	r1, #0
    1238:	movt	r1, #0
    123c:	movw	r3, #931	; 0x3a3
    1240:	bl	0 <coda_set_error>
    1244:	mvn	r0, #0
    1248:	b	11d4 <coda_type_set_byte_size_expression+0x58>
    124c:	mvn	r0, #99	; 0x63
    1250:	movw	r2, #0
    1254:	movt	r2, #0
    1258:	movw	r1, #0
    125c:	movt	r1, #0
    1260:	mov	r3, #936	; 0x3a8
    1264:	bl	0 <coda_set_error>
    1268:	mvn	r0, #0
    126c:	b	11d4 <coda_type_set_byte_size_expression+0x58>

00001270 <coda_type_set_attributes>:
    1270:	subs	r2, r0, #0
    1274:	str	r4, [sp, #-8]!
    1278:	str	lr, [sp, #4]
    127c:	beq	12f8 <coda_type_set_attributes+0x88>
    1280:	cmp	r1, #0
    1284:	beq	12d4 <coda_type_set_attributes+0x64>
    1288:	ldr	r0, [r2, #36]	; 0x24
    128c:	cmp	r0, #0
    1290:	bne	12b0 <coda_type_set_attributes+0x40>
    1294:	ldr	r3, [r1, #4]
    1298:	str	r1, [r2, #36]	; 0x24
    129c:	add	r3, r3, #1
    12a0:	str	r3, [r1, #4]
    12a4:	ldr	r4, [sp]
    12a8:	add	sp, sp, #4
    12ac:	pop	{pc}		; (ldr pc, [sp], #4)
    12b0:	mvn	r0, #99	; 0x63
    12b4:	movw	r2, #0
    12b8:	movt	r2, #0
    12bc:	movw	r1, #0
    12c0:	movt	r1, #0
    12c4:	movw	r3, #1003	; 0x3eb
    12c8:	bl	0 <coda_set_error>
    12cc:	mvn	r0, #0
    12d0:	b	12a4 <coda_type_set_attributes+0x34>
    12d4:	mvn	r0, #99	; 0x63
    12d8:	movw	r2, #0
    12dc:	movt	r2, #0
    12e0:	movw	r1, #0
    12e4:	movt	r1, #0
    12e8:	movw	r3, #998	; 0x3e6
    12ec:	bl	0 <coda_set_error>
    12f0:	mvn	r0, #0
    12f4:	b	12a4 <coda_type_set_attributes+0x34>
    12f8:	mvn	r0, #99	; 0x63
    12fc:	movw	r2, #0
    1300:	movt	r2, #0
    1304:	movw	r1, #0
    1308:	movt	r1, #0
    130c:	movw	r3, #993	; 0x3e1
    1310:	bl	0 <coda_set_error>
    1314:	mvn	r0, #0
    1318:	b	12a4 <coda_type_set_attributes+0x34>

0000131c <coda_type_record_field_new>:
    131c:	strd	r4, [sp, #-20]!	; 0xffffffec
    1320:	subs	r5, r0, #0
    1324:	strd	r6, [sp, #8]
    1328:	str	lr, [sp, #16]
    132c:	sub	sp, sp, #12
    1330:	beq	13c4 <coda_type_record_field_new+0xa8>
    1334:	bl	0 <coda_is_identifier>
    1338:	subs	r4, r0, #0
    133c:	beq	13a8 <coda_type_record_field_new+0x8c>
    1340:	mov	r0, #40	; 0x28
    1344:	bl	0 <malloc>
    1348:	subs	r4, r0, #0
    134c:	beq	13e8 <coda_type_record_field_new+0xcc>
    1350:	mov	r3, #0
    1354:	mvn	r6, #0
    1358:	mvn	r7, #0
    135c:	mov	r0, r5
    1360:	str	r3, [r4, #4]
    1364:	str	r3, [r4, #8]
    1368:	str	r3, [r4, #12]
    136c:	strb	r3, [r4, #16]
    1370:	str	r3, [r4, #20]
    1374:	strd	r6, [r4, #24]
    1378:	str	r3, [r4, #32]
    137c:	bl	0 <strdup>
    1380:	cmp	r0, #0
    1384:	mov	r5, r0
    1388:	str	r0, [r4]
    138c:	beq	1410 <coda_type_record_field_new+0xf4>
    1390:	mov	r0, r4
    1394:	add	sp, sp, #12
    1398:	ldrd	r4, [sp]
    139c:	ldrd	r6, [sp, #8]
    13a0:	add	sp, sp, #16
    13a4:	pop	{pc}		; (ldr pc, [sp], #4)
    13a8:	mov	r2, r5
    13ac:	movw	r1, #0
    13b0:	movt	r1, #0
    13b4:	movw	r0, #65136	; 0xfe70
    13b8:	movt	r0, #65535	; 0xffff
    13bc:	bl	0 <coda_set_error>
    13c0:	b	1390 <coda_type_record_field_new+0x74>
    13c4:	movw	r2, #0
    13c8:	movt	r2, #0
    13cc:	movw	r1, #0
    13d0:	movt	r1, #0
    13d4:	movw	r3, #1017	; 0x3f9
    13d8:	mvn	r0, #99	; 0x63
    13dc:	mov	r4, r5
    13e0:	bl	0 <coda_set_error>
    13e4:	b	1390 <coda_type_record_field_new+0x74>
    13e8:	movw	r0, #1031	; 0x407
    13ec:	movw	r3, #0
    13f0:	movt	r3, #0
    13f4:	movw	r1, #0
    13f8:	movt	r1, #0
    13fc:	mov	r2, #40	; 0x28
    1400:	str	r0, [sp]
    1404:	mvn	r0, #0
    1408:	bl	0 <coda_set_error>
    140c:	b	1390 <coda_type_record_field_new+0x74>
    1410:	movw	r3, #1047	; 0x417
    1414:	mvn	r0, #0
    1418:	movw	r2, #0
    141c:	movt	r2, #0
    1420:	movw	r1, #0
    1424:	movt	r1, #0
    1428:	bl	0 <coda_set_error>
    142c:	mov	r0, r4
    1430:	mov	r4, r5
    1434:	bl	5a4 <coda_type_record_field_delete>
    1438:	b	1390 <coda_type_record_field_new+0x74>

0000143c <coda_type_record_field_set_real_name>:
    143c:	strd	r4, [sp, #-16]!
    1440:	subs	r5, r0, #0
    1444:	str	r6, [sp, #8]
    1448:	str	lr, [sp, #12]
    144c:	beq	14cc <coda_type_record_field_set_real_name+0x90>
    1450:	cmp	r1, #0
    1454:	beq	14a8 <coda_type_record_field_set_real_name+0x6c>
    1458:	ldr	r4, [r5, #4]
    145c:	cmp	r4, #0
    1460:	bne	148c <coda_type_record_field_set_real_name+0x50>
    1464:	mov	r0, r1
    1468:	bl	0 <strdup>
    146c:	cmp	r0, #0
    1470:	str	r0, [r5, #4]
    1474:	movne	r0, r4
    1478:	beq	14f0 <coda_type_record_field_set_real_name+0xb4>
    147c:	ldrd	r4, [sp]
    1480:	ldr	r6, [sp, #8]
    1484:	add	sp, sp, #12
    1488:	pop	{pc}		; (ldr pc, [sp], #4)
    148c:	movw	r1, #0
    1490:	movt	r1, #0
    1494:	movw	r0, #65136	; 0xfe70
    1498:	movt	r0, #65535	; 0xffff
    149c:	bl	0 <coda_set_error>
    14a0:	mvn	r0, #0
    14a4:	b	147c <coda_type_record_field_set_real_name+0x40>
    14a8:	mvn	r0, #99	; 0x63
    14ac:	movw	r2, #0
    14b0:	movt	r2, #0
    14b4:	movw	r1, #0
    14b8:	movt	r1, #0
    14bc:	movw	r3, #1064	; 0x428
    14c0:	bl	0 <coda_set_error>
    14c4:	mvn	r0, #0
    14c8:	b	147c <coda_type_record_field_set_real_name+0x40>
    14cc:	mvn	r0, #99	; 0x63
    14d0:	movw	r2, #0
    14d4:	movt	r2, #0
    14d8:	movw	r1, #0
    14dc:	movt	r1, #0
    14e0:	movw	r3, #1059	; 0x423
    14e4:	bl	0 <coda_set_error>
    14e8:	mvn	r0, #0
    14ec:	b	147c <coda_type_record_field_set_real_name+0x40>
    14f0:	mvn	r0, #0
    14f4:	movw	r2, #0
    14f8:	movt	r2, #0
    14fc:	movw	r1, #0
    1500:	movt	r1, #0
    1504:	movw	r3, #1076	; 0x434
    1508:	bl	0 <coda_set_error>
    150c:	mvn	r0, #0
    1510:	b	147c <coda_type_record_field_set_real_name+0x40>

00001514 <coda_type_record_field_set_type>:
    1514:	subs	r2, r0, #0
    1518:	str	r4, [sp, #-8]!
    151c:	str	lr, [sp, #4]
    1520:	beq	1594 <coda_type_record_field_set_type+0x80>
    1524:	cmp	r1, #0
    1528:	beq	1570 <coda_type_record_field_set_type+0x5c>
    152c:	ldr	r0, [r2, #8]
    1530:	cmp	r0, #0
    1534:	bne	1554 <coda_type_record_field_set_type+0x40>
    1538:	ldr	r3, [r1, #4]
    153c:	str	r1, [r2, #8]
    1540:	add	r3, r3, #1
    1544:	str	r3, [r1, #4]
    1548:	ldr	r4, [sp]
    154c:	add	sp, sp, #4
    1550:	pop	{pc}		; (ldr pc, [sp], #4)
    1554:	movw	r1, #0
    1558:	movt	r1, #0
    155c:	movw	r0, #65136	; 0xfe70
    1560:	movt	r0, #65535	; 0xffff
    1564:	bl	0 <coda_set_error>
    1568:	mvn	r0, #0
    156c:	b	1548 <coda_type_record_field_set_type+0x34>
    1570:	mvn	r0, #99	; 0x63
    1574:	movw	r2, #0
    1578:	movt	r2, #0
    157c:	movw	r1, #0
    1580:	movt	r1, #0
    1584:	movw	r3, #1092	; 0x444
    1588:	bl	0 <coda_set_error>
    158c:	mvn	r0, #0
    1590:	b	1548 <coda_type_record_field_set_type+0x34>
    1594:	mvn	r0, #99	; 0x63
    1598:	movw	r2, #0
    159c:	movt	r2, #0
    15a0:	movw	r1, #0
    15a4:	movt	r1, #0
    15a8:	movw	r3, #1087	; 0x43f
    15ac:	bl	0 <coda_set_error>
    15b0:	mvn	r0, #0
    15b4:	b	1548 <coda_type_record_field_set_type+0x34>

000015b8 <coda_type_record_field_set_hidden>:
    15b8:	subs	r3, r0, #0
    15bc:	beq	15d0 <coda_type_record_field_set_hidden+0x18>
    15c0:	mov	r2, #1
    15c4:	mov	r0, #0
    15c8:	str	r2, [r3, #12]
    15cc:	bx	lr
    15d0:	mvn	r0, #99	; 0x63
    15d4:	movw	r2, #0
    15d8:	movt	r2, #0
    15dc:	movw	r1, #0
    15e0:	movt	r1, #0
    15e4:	movw	r3, #1109	; 0x455
    15e8:	str	r4, [sp, #-8]!
    15ec:	str	lr, [sp, #4]
    15f0:	bl	0 <coda_set_error>
    15f4:	ldr	r4, [sp]
    15f8:	add	sp, sp, #4
    15fc:	mvn	r0, #0
    1600:	pop	{pc}		; (ldr pc, [sp], #4)

00001604 <coda_type_record_field_set_optional>:
    1604:	subs	r3, r0, #0
    1608:	beq	161c <coda_type_record_field_set_optional+0x18>
    160c:	mov	r2, #1
    1610:	mov	r0, #0
    1614:	strb	r2, [r3, #16]
    1618:	bx	lr
    161c:	mvn	r0, #99	; 0x63
    1620:	movw	r2, #0
    1624:	movt	r2, #0
    1628:	movw	r1, #0
    162c:	movt	r1, #0
    1630:	mov	r3, #1120	; 0x460
    1634:	str	r4, [sp, #-8]!
    1638:	str	lr, [sp, #4]
    163c:	bl	0 <coda_set_error>
    1640:	ldr	r4, [sp]
    1644:	add	sp, sp, #4
    1648:	mvn	r0, #0
    164c:	pop	{pc}		; (ldr pc, [sp], #4)

00001650 <coda_type_record_field_set_available_expression>:
    1650:	subs	r3, r0, #0
    1654:	str	r4, [sp, #-8]!
    1658:	str	lr, [sp, #4]
    165c:	beq	16cc <coda_type_record_field_set_available_expression+0x7c>
    1660:	cmp	r1, #0
    1664:	beq	16a8 <coda_type_record_field_set_available_expression+0x58>
    1668:	ldr	r0, [r3, #20]
    166c:	cmp	r0, #0
    1670:	moveq	r2, #1
    1674:	streq	r1, [r3, #20]
    1678:	strbeq	r2, [r3, #16]
    167c:	bne	168c <coda_type_record_field_set_available_expression+0x3c>
    1680:	ldr	r4, [sp]
    1684:	add	sp, sp, #4
    1688:	pop	{pc}		; (ldr pc, [sp], #4)
    168c:	movw	r1, #0
    1690:	movt	r1, #0
    1694:	movw	r0, #65136	; 0xfe70
    1698:	movt	r0, #65535	; 0xffff
    169c:	bl	0 <coda_set_error>
    16a0:	mvn	r0, #0
    16a4:	b	1680 <coda_type_record_field_set_available_expression+0x30>
    16a8:	mvn	r0, #99	; 0x63
    16ac:	movw	r2, #0
    16b0:	movt	r2, #0
    16b4:	movw	r1, #0
    16b8:	movt	r1, #0
    16bc:	mov	r3, #1136	; 0x470
    16c0:	bl	0 <coda_set_error>
    16c4:	mvn	r0, #0
    16c8:	b	1680 <coda_type_record_field_set_available_expression+0x30>
    16cc:	mvn	r0, #99	; 0x63
    16d0:	movw	r2, #0
    16d4:	movt	r2, #0
    16d8:	movw	r1, #0
    16dc:	movt	r1, #0
    16e0:	movw	r3, #1131	; 0x46b
    16e4:	bl	0 <coda_set_error>
    16e8:	mvn	r0, #0
    16ec:	b	1680 <coda_type_record_field_set_available_expression+0x30>

000016f0 <coda_type_record_field_set_bit_offset_expression>:
    16f0:	subs	r3, r0, #0
    16f4:	str	r4, [sp, #-8]!
    16f8:	str	lr, [sp, #4]
    16fc:	beq	17b0 <coda_type_record_field_set_bit_offset_expression+0xc0>
    1700:	cmp	r1, #0
    1704:	beq	178c <coda_type_record_field_set_bit_offset_expression+0x9c>
    1708:	ldr	r0, [r3, #32]
    170c:	cmp	r0, #0
    1710:	bne	1770 <coda_type_record_field_set_bit_offset_expression+0x80>
    1714:	ldr	r2, [r3, #8]
    1718:	ldr	r2, [r2]
    171c:	cmp	r2, #1
    1720:	strls	r1, [r3, #32]
    1724:	bhi	1734 <coda_type_record_field_set_bit_offset_expression+0x44>
    1728:	ldr	r4, [sp]
    172c:	add	sp, sp, #4
    1730:	pop	{pc}		; (ldr pc, [sp], #4)
    1734:	cmp	r2, #9
    1738:	movwhi	r2, #0
    173c:	movthi	r2, #0
    1740:	bhi	1754 <coda_type_record_field_set_bit_offset_expression+0x64>
    1744:	movw	r3, #0
    1748:	movt	r3, #0
    174c:	add	r3, r3, r2, lsl #2
    1750:	ldr	r2, [r3, #84]	; 0x54
    1754:	movw	r1, #0
    1758:	movt	r1, #0
    175c:	movw	r0, #65136	; 0xfe70
    1760:	movt	r0, #65535	; 0xffff
    1764:	bl	0 <coda_set_error>
    1768:	mvn	r0, #0
    176c:	b	1728 <coda_type_record_field_set_bit_offset_expression+0x38>
    1770:	movw	r1, #0
    1774:	movt	r1, #0
    1778:	movw	r0, #65136	; 0xfe70
    177c:	movt	r0, #65535	; 0xffff
    1780:	bl	0 <coda_set_error>
    1784:	mvn	r0, #0
    1788:	b	1728 <coda_type_record_field_set_bit_offset_expression+0x38>
    178c:	mvn	r0, #99	; 0x63
    1790:	movw	r2, #0
    1794:	movt	r2, #0
    1798:	movw	r1, #0
    179c:	movt	r1, #0
    17a0:	movw	r3, #1158	; 0x486
    17a4:	bl	0 <coda_set_error>
    17a8:	mvn	r0, #0
    17ac:	b	1728 <coda_type_record_field_set_bit_offset_expression+0x38>
    17b0:	mvn	r0, #99	; 0x63
    17b4:	movw	r2, #0
    17b8:	movt	r2, #0
    17bc:	movw	r1, #0
    17c0:	movt	r1, #0
    17c4:	movw	r3, #1153	; 0x481
    17c8:	bl	0 <coda_set_error>
    17cc:	mvn	r0, #0
    17d0:	b	1728 <coda_type_record_field_set_bit_offset_expression+0x38>

000017d4 <coda_type_record_field_validate>:
    17d4:	cmp	r0, #0
    17d8:	str	r4, [sp, #-8]!
    17dc:	str	lr, [sp, #4]
    17e0:	beq	1800 <coda_type_record_field_validate+0x2c>
    17e4:	ldr	r3, [r0, #8]
    17e8:	cmp	r3, #0
    17ec:	movne	r0, #0
    17f0:	beq	1824 <coda_type_record_field_validate+0x50>
    17f4:	ldr	r4, [sp]
    17f8:	add	sp, sp, #4
    17fc:	pop	{pc}		; (ldr pc, [sp], #4)
    1800:	mvn	r0, #99	; 0x63
    1804:	movw	r2, #0
    1808:	movt	r2, #0
    180c:	movw	r1, #0
    1810:	movt	r1, #0
    1814:	movw	r3, #1180	; 0x49c
    1818:	bl	0 <coda_set_error>
    181c:	mvn	r0, #0
    1820:	b	17f4 <coda_type_record_field_validate+0x20>
    1824:	movw	r1, #0
    1828:	movt	r1, #0
    182c:	movw	r0, #65136	; 0xfe70
    1830:	movt	r0, #65535	; 0xffff
    1834:	bl	0 <coda_set_error>
    1838:	mvn	r0, #0
    183c:	b	17f4 <coda_type_record_field_validate+0x20>

00001840 <coda_type_record_field_get_type>:
    1840:	ldr	r3, [r0, #8]
    1844:	mov	r0, #0
    1848:	str	r3, [r1]
    184c:	bx	lr

00001850 <coda_type_record_new>:
    1850:	strd	r4, [sp, #-12]!
    1854:	mov	r5, r0
    1858:	mov	r0, #72	; 0x48
    185c:	str	lr, [sp, #8]
    1860:	sub	sp, sp, #12
    1864:	bl	0 <malloc>
    1868:	subs	r4, r0, #0
    186c:	beq	194c <coda_type_record_new+0xfc>
    1870:	mov	r3, #0
    1874:	mvn	r2, #0
    1878:	str	r5, [r4]
    187c:	mvn	r0, #0
    1880:	mvn	r1, #0
    1884:	cmp	r5, #1
    1888:	str	r3, [r4, #4]
    188c:	str	r3, [r4, #8]
    1890:	strd	r2, [r4, #12]
    1894:	str	r3, [r4, #20]
    1898:	strd	r0, [r4, #24]
    189c:	str	r3, [r4, #32]
    18a0:	str	r3, [r4, #36]	; 0x24
    18a4:	str	r3, [r4, #40]	; 0x28
    18a8:	str	r3, [r4, #44]	; 0x2c
    18ac:	str	r3, [r4, #48]	; 0x30
    18b0:	str	r3, [r4, #52]	; 0x34
    18b4:	str	r3, [r4, #56]	; 0x38
    18b8:	str	r3, [r4, #60]	; 0x3c
    18bc:	str	r3, [r4, #64]	; 0x40
    18c0:	str	r3, [r4, #68]	; 0x44
    18c4:	bhi	18dc <coda_type_record_new+0x8c>
    18c8:	mov	r1, #12
    18cc:	mov	r2, #0
    18d0:	mov	r3, #0
    18d4:	str	r1, [r4, #12]
    18d8:	strd	r2, [r4, #24]
    18dc:	mov	r0, #0
    18e0:	bl	0 <coda_hashtable_new>
    18e4:	cmp	r0, #0
    18e8:	mov	r5, r0
    18ec:	str	r0, [r4, #40]	; 0x28
    18f0:	beq	1920 <coda_type_record_new+0xd0>
    18f4:	mov	r0, #1
    18f8:	bl	0 <coda_hashtable_new>
    18fc:	cmp	r0, #0
    1900:	mov	r5, r0
    1904:	str	r0, [r4, #44]	; 0x2c
    1908:	beq	1974 <coda_type_record_new+0x124>
    190c:	mov	r0, r4
    1910:	add	sp, sp, #12
    1914:	ldrd	r4, [sp]
    1918:	add	sp, sp, #8
    191c:	pop	{pc}		; (ldr pc, [sp], #4)
    1920:	movw	r2, #0
    1924:	movt	r2, #0
    1928:	movw	r1, #0
    192c:	movt	r1, #0
    1930:	movw	r3, #1236	; 0x4d4
    1934:	mvn	r0, #0
    1938:	bl	0 <coda_set_error>
    193c:	mov	r0, r4
    1940:	mov	r4, r5
    1944:	bl	638 <record_delete>
    1948:	b	190c <coda_type_record_new+0xbc>
    194c:	movw	r0, #1205	; 0x4b5
    1950:	movw	r3, #0
    1954:	movt	r3, #0
    1958:	movw	r1, #0
    195c:	movt	r1, #0
    1960:	mov	r2, #72	; 0x48
    1964:	str	r0, [sp]
    1968:	mvn	r0, #0
    196c:	bl	0 <coda_set_error>
    1970:	b	190c <coda_type_record_new+0xbc>
    1974:	movw	r2, #0
    1978:	movt	r2, #0
    197c:	movw	r1, #0
    1980:	movt	r1, #0
    1984:	movw	r3, #1245	; 0x4dd
    1988:	b	1934 <coda_type_record_new+0xe4>

0000198c <coda_type_union_new>:
    198c:	str	r4, [sp, #-8]!
    1990:	str	lr, [sp, #4]
    1994:	bl	1850 <coda_type_record_new>
    1998:	cmp	r0, #0
    199c:	ldr	r4, [sp]
    19a0:	add	sp, sp, #4
    19a4:	movne	r3, #1
    19a8:	strne	r3, [r0, #64]	; 0x40
    19ac:	pop	{pc}		; (ldr pc, [sp], #4)

000019b0 <coda_type_empty_record>:
    19b0:	cmp	r0, #10
    19b4:	strd	r4, [sp, #-16]!
    19b8:	str	r6, [sp, #8]
    19bc:	str	lr, [sp, #12]
    19c0:	bhi	1a24 <coda_type_empty_record+0x74>
    19c4:	ldr	r3, [pc, #116]	; 1a40 <coda_type_empty_record+0x90>
    19c8:	mrc	15, 0, r4, cr13, cr0, {3}
    19cc:	mov	r5, r0
    19d0:	add	r4, r4, r3
    19d4:	ldr	r3, [r4, r0, lsl #2]
    19d8:	cmp	r3, #0
    19dc:	beq	19f4 <coda_type_empty_record+0x44>
    19e0:	ldrd	r4, [sp]
    19e4:	mov	r0, r3
    19e8:	ldr	r6, [sp, #8]
    19ec:	add	sp, sp, #12
    19f0:	pop	{pc}		; (ldr pc, [sp], #4)
    19f4:	bl	1850 <coda_type_record_new>
    19f8:	cmp	r0, #0
    19fc:	mov	r3, r0
    1a00:	str	r0, [r4, r5, lsl #2]
    1a04:	bne	19e0 <coda_type_empty_record+0x30>
    1a08:	movw	r1, #0
    1a0c:	movt	r1, #0
    1a10:	ldr	r3, [pc, #44]	; 1a44 <coda_type_empty_record+0x94>
    1a14:	movw	r0, #0
    1a18:	movt	r0, #0
    1a1c:	movw	r2, #1272	; 0x4f8
    1a20:	bl	0 <__assert_fail>
    1a24:	movw	r1, #0
    1a28:	movt	r1, #0
    1a2c:	ldr	r3, [pc, #16]	; 1a44 <coda_type_empty_record+0x94>
    1a30:	movw	r0, #0
    1a34:	movt	r0, #0
    1a38:	movw	r2, #1268	; 0x4f4
    1a3c:	bl	0 <__assert_fail>
    1a40:	.word	0x00000000
    1a44:	.word	0x0000007c

00001a48 <coda_type_record_insert_field>:
    1a48:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1a4c:	subs	r4, r0, #0
    1a50:	strd	r6, [sp, #8]
    1a54:	strd	r8, [sp, #16]
    1a58:	strd	sl, [sp, #24]
    1a5c:	str	lr, [sp, #32]
    1a60:	sub	sp, sp, #20
    1a64:	beq	1df8 <coda_type_record_insert_field+0x3b0>
    1a68:	cmp	r2, #0
    1a6c:	mov	r5, r2
    1a70:	beq	1e40 <coda_type_record_insert_field+0x3f8>
    1a74:	ldr	r3, [r2, #8]
    1a78:	cmp	r3, #0
    1a7c:	beq	1e1c <coda_type_record_insert_field+0x3d4>
    1a80:	ldr	r2, [r4, #64]	; 0x40
    1a84:	mov	r6, r1
    1a88:	cmp	r2, #0
    1a8c:	bne	1b5c <coda_type_record_insert_field+0x114>
    1a90:	ldr	r2, [r3]
    1a94:	ldr	r3, [r4]
    1a98:	cmp	r3, r2
    1a9c:	beq	1ab4 <coda_type_record_insert_field+0x6c>
    1aa0:	cmp	r2, #0
    1aa4:	bne	1d60 <coda_type_record_insert_field+0x318>
    1aa8:	sub	r1, r3, #1
    1aac:	cmp	r1, #1
    1ab0:	bhi	1d70 <coda_type_record_insert_field+0x328>
    1ab4:	ldr	r1, [r4, #48]	; 0x30
    1ab8:	tst	r1, #15
    1abc:	beq	1b84 <coda_type_record_insert_field+0x13c>
    1ac0:	mov	r1, r6
    1ac4:	ldr	r2, [r5]
    1ac8:	ldr	r0, [r4, #40]	; 0x28
    1acc:	bl	0 <coda_hashtable_insert_name>
    1ad0:	subs	r7, r0, #0
    1ad4:	bne	1dbc <coda_type_record_insert_field+0x374>
    1ad8:	ldr	r8, [r5, #4]
    1adc:	ldr	r0, [r4, #44]	; 0x2c
    1ae0:	cmp	r8, #0
    1ae4:	ldreq	r8, [r5]
    1ae8:	mov	r1, r8
    1aec:	bl	0 <coda_hashtable_get_index_from_name>
    1af0:	cmp	r0, #0
    1af4:	blt	1c2c <coda_type_record_insert_field+0x1e4>
    1af8:	ldrd	r2, [r4, #48]	; 0x30
    1afc:	lsl	ip, r6, #2
    1b00:	cmp	r2, r6
    1b04:	ble	1b20 <coda_type_record_insert_field+0xd8>
    1b08:	add	r1, r3, r2, lsl #2
    1b0c:	add	lr, r3, ip
    1b10:	ldr	r0, [r1, #-4]
    1b14:	str	r0, [r1], #-4
    1b18:	cmp	lr, r1
    1b1c:	bne	1b10 <coda_type_record_insert_field+0xc8>
    1b20:	ldr	r0, [r4]
    1b24:	add	r1, r2, #1
    1b28:	add	ip, r3, ip
    1b2c:	str	r1, [r4, #48]	; 0x30
    1b30:	str	r5, [r3, r6, lsl #2]
    1b34:	cmp	r0, #1
    1b38:	bls	1bd4 <coda_type_record_insert_field+0x18c>
    1b3c:	mov	r0, r7
    1b40:	add	sp, sp, #20
    1b44:	ldrd	r4, [sp]
    1b48:	ldrd	r6, [sp, #8]
    1b4c:	ldrd	r8, [sp, #16]
    1b50:	ldrd	sl, [sp, #24]
    1b54:	add	sp, sp, #32
    1b58:	pop	{pc}		; (ldr pc, [sp], #4)
    1b5c:	ldrb	r2, [r5, #16]
    1b60:	cmp	r2, #0
    1b64:	bne	1a90 <coda_type_record_insert_field+0x48>
    1b68:	movw	r1, #0
    1b6c:	movt	r1, #0
    1b70:	movw	r0, #65136	; 0xfe70
    1b74:	movt	r0, #65535	; 0xffff
    1b78:	bl	0 <coda_set_error>
    1b7c:	mvn	r7, #0
    1b80:	b	1b3c <coda_type_record_insert_field+0xf4>
    1b84:	add	r1, r1, #16
    1b88:	ldr	r0, [r4, #52]	; 0x34
    1b8c:	lsl	r1, r1, #2
    1b90:	bl	0 <realloc>
    1b94:	cmp	r0, #0
    1b98:	strne	r0, [r4, #52]	; 0x34
    1b9c:	bne	1ac0 <coda_type_record_insert_field+0x78>
    1ba0:	ldr	r2, [r4, #48]	; 0x30
    1ba4:	movw	ip, #1326	; 0x52e
    1ba8:	mvn	r0, #0
    1bac:	movw	r3, #0
    1bb0:	movt	r3, #0
    1bb4:	movw	r1, #0
    1bb8:	movt	r1, #0
    1bbc:	str	ip, [sp]
    1bc0:	mov	r7, r0
    1bc4:	add	r2, r2, #16
    1bc8:	lsl	r2, r2, #2
    1bcc:	bl	0 <coda_set_error>
    1bd0:	b	1b3c <coda_type_record_insert_field+0xf4>
    1bd4:	ldr	lr, [r4, #64]	; 0x40
    1bd8:	ldr	r0, [r5, #32]
    1bdc:	cmp	lr, #0
    1be0:	beq	1c40 <coda_type_record_insert_field+0x1f8>
    1be4:	cmp	r0, #0
    1be8:	bne	1ddc <coda_type_record_insert_field+0x394>
    1bec:	ldr	r3, [r5, #8]
    1bf0:	cmp	r1, #1
    1bf4:	mov	r8, #0
    1bf8:	mov	r9, #0
    1bfc:	ldrd	r0, [r3, #24]
    1c00:	strd	r8, [r5, #24]
    1c04:	strdeq	r0, [r4, #24]
    1c08:	beq	1b3c <coda_type_record_insert_field+0xf4>
    1c0c:	ldrd	r2, [r4, #24]
    1c10:	cmp	r3, r1
    1c14:	cmpeq	r2, r0
    1c18:	beq	1b3c <coda_type_record_insert_field+0xf4>
    1c1c:	mvn	r2, #0
    1c20:	mvn	r3, #0
    1c24:	strd	r2, [r4, #24]
    1c28:	b	1b3c <coda_type_record_insert_field+0xf4>
    1c2c:	mov	r2, r8
    1c30:	mov	r1, r6
    1c34:	ldr	r0, [r4, #44]	; 0x2c
    1c38:	bl	0 <coda_hashtable_insert_name>
    1c3c:	b	1af8 <coda_type_record_insert_field+0xb0>
    1c40:	cmp	r0, #0
    1c44:	beq	1d04 <coda_type_record_insert_field+0x2bc>
    1c48:	cmp	r2, r6
    1c4c:	addgt	r6, r3, r2, lsl #2
    1c50:	bgt	1c60 <coda_type_record_insert_field+0x218>
    1c54:	b	1cbc <coda_type_record_insert_field+0x274>
    1c58:	cmp	ip, r6
    1c5c:	beq	1cbc <coda_type_record_insert_field+0x274>
    1c60:	ldr	lr, [ip, #4]!
    1c64:	ldr	r1, [lr, #32]
    1c68:	cmp	r1, #0
    1c6c:	bne	1c58 <coda_type_record_insert_field+0x210>
    1c70:	ldr	sl, [ip, #-4]
    1c74:	ldrd	r0, [sl, #24]
    1c78:	cmp	r0, #0
    1c7c:	strd	r0, [sp, #8]
    1c80:	sbcs	r1, r1, #0
    1c84:	blt	1c58 <coda_type_record_insert_field+0x210>
    1c88:	ldr	r8, [sl, #8]
    1c8c:	ldrd	r8, [r8, #24]
    1c90:	cmp	r8, #0
    1c94:	sbcs	r1, r9, #0
    1c98:	blt	1c58 <coda_type_record_insert_field+0x210>
    1c9c:	ldrb	sl, [sl, #16]
    1ca0:	cmp	sl, #0
    1ca4:	bne	1c58 <coda_type_record_insert_field+0x210>
    1ca8:	ldrd	sl, [sp, #8]
    1cac:	adds	r0, sl, r8
    1cb0:	adc	r1, fp, r9
    1cb4:	strd	r0, [lr, #24]
    1cb8:	b	1c58 <coda_type_record_insert_field+0x210>
    1cbc:	ldrd	r0, [r4, #24]
    1cc0:	cmp	r0, #0
    1cc4:	sbcs	ip, r1, #0
    1cc8:	blt	1b3c <coda_type_record_insert_field+0xf4>
    1ccc:	ldr	ip, [r5, #8]
    1cd0:	ldrd	r8, [ip, #24]
    1cd4:	cmp	r8, #0
    1cd8:	sbcs	ip, r9, #0
    1cdc:	blt	1c1c <coda_type_record_insert_field+0x1d4>
    1ce0:	ldr	r3, [r3, r2, lsl #2]
    1ce4:	ldrb	r3, [r3, #16]
    1ce8:	cmp	r3, #0
    1cec:	bne	1c1c <coda_type_record_insert_field+0x1d4>
    1cf0:	adds	r2, r0, r8
    1cf4:	mov	r7, r3
    1cf8:	adc	r3, r1, r9
    1cfc:	strd	r2, [r4, #24]
    1d00:	b	1b3c <coda_type_record_insert_field+0xf4>
    1d04:	cmp	r6, #0
    1d08:	beq	1d50 <coda_type_record_insert_field+0x308>
    1d0c:	ldr	lr, [ip, #-4]
    1d10:	ldrd	sl, [lr, #24]
    1d14:	cmp	sl, #0
    1d18:	sbcs	r1, fp, #0
    1d1c:	blt	1c48 <coda_type_record_insert_field+0x200>
    1d20:	ldr	r8, [lr, #8]
    1d24:	ldrd	r8, [r8, #24]
    1d28:	cmp	r8, #0
    1d2c:	sbcs	r1, r9, #0
    1d30:	blt	1c48 <coda_type_record_insert_field+0x200>
    1d34:	ldrb	lr, [lr, #16]
    1d38:	cmp	lr, #0
    1d3c:	bne	1c48 <coda_type_record_insert_field+0x200>
    1d40:	adds	r0, sl, r8
    1d44:	adc	r1, fp, r9
    1d48:	strd	r0, [r5, #24]
    1d4c:	b	1c48 <coda_type_record_insert_field+0x200>
    1d50:	mov	r0, #0
    1d54:	mov	r1, #0
    1d58:	strd	r0, [r5, #24]
    1d5c:	b	1c48 <coda_type_record_insert_field+0x200>
    1d60:	cmp	r2, #9
    1d64:	movwhi	r2, #0
    1d68:	movthi	r2, #0
    1d6c:	bhi	1d80 <coda_type_record_insert_field+0x338>
    1d70:	movw	r1, #0
    1d74:	movt	r1, #0
    1d78:	add	r2, r1, r2, lsl #2
    1d7c:	ldr	r2, [r2, #84]	; 0x54
    1d80:	cmp	r3, #9
    1d84:	movwhi	r3, #0
    1d88:	movthi	r3, #0
    1d8c:	bhi	1da0 <coda_type_record_insert_field+0x358>
    1d90:	movw	r1, #0
    1d94:	movt	r1, #0
    1d98:	add	r3, r1, r3, lsl #2
    1d9c:	ldr	r3, [r3, #84]	; 0x54
    1da0:	movw	r1, #0
    1da4:	movt	r1, #0
    1da8:	movw	r0, #65136	; 0xfe70
    1dac:	movt	r0, #65535	; 0xffff
    1db0:	bl	0 <coda_set_error>
    1db4:	mvn	r7, #0
    1db8:	b	1b3c <coda_type_record_insert_field+0xf4>
    1dbc:	movw	r1, #0
    1dc0:	movt	r1, #0
    1dc4:	ldr	r2, [r5]
    1dc8:	movw	r0, #65136	; 0xfe70
    1dcc:	movt	r0, #65535	; 0xffff
    1dd0:	mvn	r7, #0
    1dd4:	bl	0 <coda_set_error>
    1dd8:	b	1b3c <coda_type_record_insert_field+0xf4>
    1ddc:	movw	r1, #0
    1de0:	movt	r1, #0
    1de4:	movw	r0, #65136	; 0xfe70
    1de8:	movt	r0, #65535	; 0xffff
    1dec:	bl	0 <coda_set_error>
    1df0:	mvn	r7, #0
    1df4:	b	1b3c <coda_type_record_insert_field+0xf4>
    1df8:	movw	r2, #0
    1dfc:	movt	r2, #0
    1e00:	movw	r1, #0
    1e04:	movt	r1, #0
    1e08:	movw	r3, #1285	; 0x505
    1e0c:	mvn	r0, #99	; 0x63
    1e10:	bl	0 <coda_set_error>
    1e14:	mvn	r7, #0
    1e18:	b	1b3c <coda_type_record_insert_field+0xf4>
    1e1c:	movw	r2, #0
    1e20:	movt	r2, #0
    1e24:	movw	r1, #0
    1e28:	movt	r1, #0
    1e2c:	movw	r3, #1295	; 0x50f
    1e30:	mvn	r0, #99	; 0x63
    1e34:	bl	0 <coda_set_error>
    1e38:	mvn	r7, #0
    1e3c:	b	1b3c <coda_type_record_insert_field+0xf4>
    1e40:	movw	r2, #0
    1e44:	movt	r2, #0
    1e48:	movw	r1, #0
    1e4c:	movt	r1, #0
    1e50:	movw	r3, #1290	; 0x50a
    1e54:	mvn	r0, #99	; 0x63
    1e58:	bl	0 <coda_set_error>
    1e5c:	mvn	r7, #0
    1e60:	b	1b3c <coda_type_record_insert_field+0xf4>

00001e64 <coda_type_record_add_field>:
    1e64:	subs	r3, r0, #0
    1e68:	beq	1e78 <coda_type_record_add_field+0x14>
    1e6c:	mov	r2, r1
    1e70:	ldr	r1, [r3, #48]	; 0x30
    1e74:	b	1a48 <coda_type_record_insert_field>
    1e78:	mvn	r0, #99	; 0x63
    1e7c:	movw	r2, #0
    1e80:	movt	r2, #0
    1e84:	movw	r1, #0
    1e88:	movt	r1, #0
    1e8c:	mov	r3, #1424	; 0x590
    1e90:	str	r4, [sp, #-8]!
    1e94:	str	lr, [sp, #4]
    1e98:	bl	0 <coda_set_error>
    1e9c:	ldr	r4, [sp]
    1ea0:	add	sp, sp, #4
    1ea4:	mvn	r0, #0
    1ea8:	pop	{pc}		; (ldr pc, [sp], #4)

00001eac <coda_type_add_attribute>:
    1eac:	str	r4, [sp, #-8]!
    1eb0:	subs	r4, r0, #0
    1eb4:	str	lr, [sp, #4]
    1eb8:	sub	sp, sp, #8
    1ebc:	beq	1f38 <coda_type_add_attribute+0x8c>
    1ec0:	cmp	r1, #0
    1ec4:	beq	1f18 <coda_type_add_attribute+0x6c>
    1ec8:	ldr	r0, [r4, #36]	; 0x24
    1ecc:	cmp	r0, #0
    1ed0:	beq	1ee8 <coda_type_add_attribute+0x3c>
    1ed4:	add	sp, sp, #8
    1ed8:	ldr	r4, [sp]
    1edc:	ldr	lr, [sp, #4]
    1ee0:	add	sp, sp, #8
    1ee4:	b	1e64 <coda_type_record_add_field>
    1ee8:	ldr	r0, [r4]
    1eec:	str	r1, [sp, #4]
    1ef0:	bl	1850 <coda_type_record_new>
    1ef4:	cmp	r0, #0
    1ef8:	str	r0, [r4, #36]	; 0x24
    1efc:	ldr	r1, [sp, #4]
    1f00:	bne	1ed4 <coda_type_add_attribute+0x28>
    1f04:	mvn	r0, #0
    1f08:	add	sp, sp, #8
    1f0c:	ldr	r4, [sp]
    1f10:	add	sp, sp, #4
    1f14:	pop	{pc}		; (ldr pc, [sp], #4)
    1f18:	movw	r2, #0
    1f1c:	movt	r2, #0
    1f20:	movw	r1, #0
    1f24:	movt	r1, #0
    1f28:	movw	r3, #975	; 0x3cf
    1f2c:	mvn	r0, #99	; 0x63
    1f30:	bl	0 <coda_set_error>
    1f34:	b	1f04 <coda_type_add_attribute+0x58>
    1f38:	movw	r2, #0
    1f3c:	movt	r2, #0
    1f40:	movw	r1, #0
    1f44:	movt	r1, #0
    1f48:	movw	r3, #970	; 0x3ca
    1f4c:	mvn	r0, #99	; 0x63
    1f50:	bl	0 <coda_set_error>
    1f54:	b	1f04 <coda_type_add_attribute+0x58>

00001f58 <coda_type_union_set_field_expression>:
    1f58:	cmp	r0, #0
    1f5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1f60:	strd	r6, [sp, #8]
    1f64:	strd	r8, [sp, #16]
    1f68:	strd	sl, [sp, #24]
    1f6c:	str	lr, [sp, #32]
    1f70:	sub	sp, sp, #4
    1f74:	beq	20a0 <coda_type_union_set_field_expression+0x148>
    1f78:	cmp	r1, #0
    1f7c:	beq	207c <coda_type_union_set_field_expression+0x124>
    1f80:	ldr	r3, [r0, #64]	; 0x40
    1f84:	cmp	r3, #0
    1f88:	beq	2060 <coda_type_union_set_field_expression+0x108>
    1f8c:	ldr	r3, [r0, #68]	; 0x44
    1f90:	cmp	r3, #0
    1f94:	bne	2044 <coda_type_union_set_field_expression+0xec>
    1f98:	ldr	lr, [r0, #48]	; 0x30
    1f9c:	str	r1, [r0, #68]	; 0x44
    1fa0:	cmp	lr, #0
    1fa4:	ble	2004 <coda_type_union_set_field_expression+0xac>
    1fa8:	ldr	r1, [r0, #52]	; 0x34
    1fac:	mov	r6, #0
    1fb0:	mov	r7, #0
    1fb4:	mvn	r8, #0
    1fb8:	mvn	r9, #0
    1fbc:	sub	r1, r1, #4
    1fc0:	ldr	r2, [r1, #4]!
    1fc4:	ldr	ip, [r2, #32]
    1fc8:	cmp	ip, #0
    1fcc:	bne	2024 <coda_type_union_set_field_expression+0xcc>
    1fd0:	ldr	ip, [r2, #8]
    1fd4:	cmp	r3, #0
    1fd8:	ldrd	sl, [ip, #24]
    1fdc:	strd	r6, [r2, #24]
    1fe0:	strdeq	sl, [r0, #24]
    1fe4:	beq	1ff8 <coda_type_union_set_field_expression+0xa0>
    1fe8:	ldrd	r4, [r0, #24]
    1fec:	cmp	r5, fp
    1ff0:	cmpeq	r4, sl
    1ff4:	strdne	r8, [r0, #24]
    1ff8:	add	r3, r3, #1
    1ffc:	cmp	lr, r3
    2000:	bne	1fc0 <coda_type_union_set_field_expression+0x68>
    2004:	mov	r0, #0
    2008:	add	sp, sp, #4
    200c:	ldrd	r4, [sp]
    2010:	ldrd	r6, [sp, #8]
    2014:	ldrd	r8, [sp, #16]
    2018:	ldrd	sl, [sp, #24]
    201c:	add	sp, sp, #32
    2020:	pop	{pc}		; (ldr pc, [sp], #4)
    2024:	movw	r1, #0
    2028:	movt	r1, #0
    202c:	ldr	r2, [r2]
    2030:	movw	r0, #65136	; 0xfe70
    2034:	movt	r0, #65535	; 0xffff
    2038:	bl	0 <coda_set_error>
    203c:	mvn	r0, #0
    2040:	b	2008 <coda_type_union_set_field_expression+0xb0>
    2044:	movw	r1, #0
    2048:	movt	r1, #0
    204c:	movw	r0, #65136	; 0xfe70
    2050:	movt	r0, #65535	; 0xffff
    2054:	bl	0 <coda_set_error>
    2058:	mvn	r0, #0
    205c:	b	2008 <coda_type_union_set_field_expression+0xb0>
    2060:	movw	r1, #0
    2064:	movt	r1, #0
    2068:	movw	r0, #65136	; 0xfe70
    206c:	movt	r0, #65535	; 0xffff
    2070:	bl	0 <coda_set_error>
    2074:	mvn	r0, #0
    2078:	b	2008 <coda_type_union_set_field_expression+0xb0>
    207c:	mvn	r0, #99	; 0x63
    2080:	movw	r2, #0
    2084:	movt	r2, #0
    2088:	movw	r1, #0
    208c:	movt	r1, #0
    2090:	movw	r3, #1495	; 0x5d7
    2094:	bl	0 <coda_set_error>
    2098:	mvn	r0, #0
    209c:	b	2008 <coda_type_union_set_field_expression+0xb0>
    20a0:	mvn	r0, #99	; 0x63
    20a4:	movw	r2, #0
    20a8:	movt	r2, #0
    20ac:	movw	r1, #0
    20b0:	movt	r1, #0
    20b4:	movw	r3, #1490	; 0x5d2
    20b8:	bl	0 <coda_set_error>
    20bc:	mvn	r0, #0
    20c0:	b	2008 <coda_type_union_set_field_expression+0xb0>

000020c4 <coda_type_record_validate>:
    20c4:	subs	r3, r0, #0
    20c8:	str	r4, [sp, #-8]!
    20cc:	str	lr, [sp, #4]
    20d0:	beq	214c <coda_type_record_validate+0x88>
    20d4:	ldr	r0, [r3, #64]	; 0x40
    20d8:	cmp	r0, #0
    20dc:	beq	20fc <coda_type_record_validate+0x38>
    20e0:	ldr	r2, [r3, #48]	; 0x30
    20e4:	cmp	r2, #0
    20e8:	beq	2130 <coda_type_record_validate+0x6c>
    20ec:	ldr	r2, [r3]
    20f0:	cmp	r2, #1
    20f4:	bls	2108 <coda_type_record_validate+0x44>
    20f8:	mov	r0, #0
    20fc:	ldr	r4, [sp]
    2100:	add	sp, sp, #4
    2104:	pop	{pc}		; (ldr pc, [sp], #4)
    2108:	ldr	r3, [r3, #68]	; 0x44
    210c:	cmp	r3, #0
    2110:	bne	20f8 <coda_type_record_validate+0x34>
    2114:	movw	r1, #0
    2118:	movt	r1, #0
    211c:	movw	r0, #65136	; 0xfe70
    2120:	movt	r0, #65535	; 0xffff
    2124:	bl	0 <coda_set_error>
    2128:	mvn	r0, #0
    212c:	b	20fc <coda_type_record_validate+0x38>
    2130:	movw	r1, #0
    2134:	movt	r1, #0
    2138:	movw	r0, #65136	; 0xfe70
    213c:	movt	r0, #65535	; 0xffff
    2140:	bl	0 <coda_set_error>
    2144:	mvn	r0, #0
    2148:	b	20fc <coda_type_record_validate+0x38>
    214c:	mvn	r0, #99	; 0x63
    2150:	movw	r2, #0
    2154:	movt	r2, #0
    2158:	movw	r1, #0
    215c:	movt	r1, #0
    2160:	movw	r3, #1542	; 0x606
    2164:	bl	0 <coda_set_error>
    2168:	mvn	r0, #0
    216c:	b	20fc <coda_type_record_validate+0x38>

00002170 <coda_type_record_get_unique_field_name>:
    2170:	str	r4, [sp, #-8]!
    2174:	mov	r4, r0
    2178:	mov	r0, r1
    217c:	ldr	r3, [r4]
    2180:	str	lr, [sp, #4]
    2184:	cmp	r3, #2
    2188:	beq	21a0 <coda_type_record_get_unique_field_name+0x30>
    218c:	ldr	lr, [sp, #4]
    2190:	ldr	r1, [r4, #40]	; 0x28
    2194:	ldr	r4, [sp]
    2198:	add	sp, sp, #8
    219c:	b	0 <coda_identifier_from_name>
    21a0:	bl	0 <coda_element_name_from_xml_name>
    21a4:	b	218c <coda_type_record_get_unique_field_name+0x1c>

000021a8 <coda_type_record_create_field>:
    21a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    21ac:	strd	r6, [sp, #8]
    21b0:	str	r8, [sp, #16]
    21b4:	subs	r8, r0, #0
    21b8:	str	lr, [sp, #20]
    21bc:	beq	22b0 <coda_type_record_create_field+0x108>
    21c0:	cmp	r1, #0
    21c4:	mov	r4, r1
    21c8:	beq	22d4 <coda_type_record_create_field+0x12c>
    21cc:	cmp	r2, #0
    21d0:	mov	r6, r2
    21d4:	beq	228c <coda_type_record_create_field+0xe4>
    21d8:	bl	2170 <coda_type_record_get_unique_field_name>
    21dc:	subs	r7, r0, #0
    21e0:	beq	2284 <coda_type_record_create_field+0xdc>
    21e4:	bl	131c <coda_type_record_field_new>
    21e8:	subs	r5, r0, #0
    21ec:	beq	2264 <coda_type_record_create_field+0xbc>
    21f0:	mov	r1, r4
    21f4:	mov	r0, r7
    21f8:	bl	0 <strcmp>
    21fc:	cmp	r0, #0
    2200:	bne	2248 <coda_type_record_create_field+0xa0>
    2204:	mov	r0, r7
    2208:	bl	0 <free>
    220c:	mov	r1, r6
    2210:	mov	r0, r5
    2214:	bl	1514 <coda_type_record_field_set_type>
    2218:	cmp	r0, #0
    221c:	bne	2274 <coda_type_record_create_field+0xcc>
    2220:	mov	r0, r8
    2224:	mov	r1, r5
    2228:	bl	1e64 <coda_type_record_add_field>
    222c:	cmp	r0, #0
    2230:	bne	2274 <coda_type_record_create_field+0xcc>
    2234:	ldrd	r4, [sp]
    2238:	ldrd	r6, [sp, #8]
    223c:	ldr	r8, [sp, #16]
    2240:	add	sp, sp, #20
    2244:	pop	{pc}		; (ldr pc, [sp], #4)
    2248:	mov	r1, r4
    224c:	mov	r0, r5
    2250:	bl	143c <coda_type_record_field_set_real_name>
    2254:	cmp	r0, #0
    2258:	beq	2204 <coda_type_record_create_field+0x5c>
    225c:	mov	r0, r5
    2260:	bl	5a4 <coda_type_record_field_delete>
    2264:	mov	r0, r7
    2268:	bl	0 <free>
    226c:	mvn	r0, #0
    2270:	b	2234 <coda_type_record_create_field+0x8c>
    2274:	mov	r0, r5
    2278:	bl	5a4 <coda_type_record_field_delete>
    227c:	mvn	r0, #0
    2280:	b	2234 <coda_type_record_create_field+0x8c>
    2284:	mvn	r0, #0
    2288:	b	2234 <coda_type_record_create_field+0x8c>
    228c:	mvn	r0, #99	; 0x63
    2290:	movw	r2, #0
    2294:	movt	r2, #0
    2298:	movw	r1, #0
    229c:	movt	r1, #0
    22a0:	movw	r3, #1447	; 0x5a7
    22a4:	bl	0 <coda_set_error>
    22a8:	mvn	r0, #0
    22ac:	b	2234 <coda_type_record_create_field+0x8c>
    22b0:	mvn	r0, #99	; 0x63
    22b4:	movw	r2, #0
    22b8:	movt	r2, #0
    22bc:	movw	r1, #0
    22c0:	movt	r1, #0
    22c4:	movw	r3, #1437	; 0x59d
    22c8:	bl	0 <coda_set_error>
    22cc:	mvn	r0, #0
    22d0:	b	2234 <coda_type_record_create_field+0x8c>
    22d4:	mvn	r0, #99	; 0x63
    22d8:	movw	r2, #0
    22dc:	movt	r2, #0
    22e0:	movw	r1, #0
    22e4:	movt	r1, #0
    22e8:	movw	r3, #1442	; 0x5a2
    22ec:	bl	0 <coda_set_error>
    22f0:	mvn	r0, #0
    22f4:	b	2234 <coda_type_record_create_field+0x8c>

000022f8 <coda_type_array_new>:
    22f8:	strd	r4, [sp, #-12]!
    22fc:	mov	r5, r0
    2300:	mov	r0, #120	; 0x78
    2304:	str	lr, [sp, #8]
    2308:	sub	sp, sp, #12
    230c:	bl	0 <malloc>
    2310:	subs	r4, r0, #0
    2314:	beq	2374 <coda_type_array_new+0x7c>
    2318:	cmp	r5, #2
    231c:	mov	r3, #0
    2320:	str	r5, [r4]
    2324:	mov	r2, #1
    2328:	movcc	ip, #12
    232c:	mvncs	ip, #0
    2330:	mvn	r0, #0
    2334:	str	r3, [r4, #4]
    2338:	mvn	r1, #0
    233c:	str	r2, [r4, #8]
    2340:	str	ip, [r4, #12]
    2344:	str	r3, [r4, #16]
    2348:	str	r3, [r4, #20]
    234c:	strd	r0, [r4, #24]
    2350:	str	r3, [r4, #32]
    2354:	str	r3, [r4, #36]	; 0x24
    2358:	str	r3, [r4, #40]	; 0x28
    235c:	strd	r2, [r4, #44]	; 0x2c
    2360:	mov	r0, r4
    2364:	add	sp, sp, #12
    2368:	ldrd	r4, [sp]
    236c:	add	sp, sp, #8
    2370:	pop	{pc}		; (ldr pc, [sp], #4)
    2374:	movw	r0, #1581	; 0x62d
    2378:	movw	r3, #0
    237c:	movt	r3, #0
    2380:	movw	r1, #0
    2384:	movt	r1, #0
    2388:	mov	r2, #120	; 0x78
    238c:	str	r0, [sp]
    2390:	mvn	r0, #0
    2394:	bl	0 <coda_set_error>
    2398:	b	2360 <coda_type_array_new+0x68>

0000239c <coda_type_array_set_base_type>:
    239c:	subs	r3, r0, #0
    23a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
    23a4:	strd	r6, [sp, #8]
    23a8:	str	r8, [sp, #16]
    23ac:	str	lr, [sp, #20]
    23b0:	beq	2520 <coda_type_array_set_base_type+0x184>
    23b4:	ldr	r2, [r3, #40]	; 0x28
    23b8:	cmp	r2, #0
    23bc:	bne	24a4 <coda_type_array_set_base_type+0x108>
    23c0:	ldr	r2, [r1]
    23c4:	ldr	r0, [r3]
    23c8:	cmp	r0, r2
    23cc:	beq	245c <coda_type_array_set_base_type+0xc0>
    23d0:	cmp	r2, #0
    23d4:	bne	24c0 <coda_type_array_set_base_type+0x124>
    23d8:	sub	ip, r0, #1
    23dc:	cmp	ip, #1
    23e0:	bhi	250c <coda_type_array_set_base_type+0x170>
    23e4:	cmp	r0, #2
    23e8:	beq	2470 <coda_type_array_set_base_type+0xd4>
    23ec:	ldr	r2, [r1, #4]
    23f0:	cmp	r0, #1
    23f4:	str	r1, [r3, #40]	; 0x28
    23f8:	add	r2, r2, #1
    23fc:	str	r2, [r1, #4]
    2400:	bhi	2440 <coda_type_array_set_base_type+0xa4>
    2404:	ldr	r4, [r3, #44]	; 0x2c
    2408:	cmp	r4, #0
    240c:	blt	2440 <coda_type_array_set_base_type+0xa4>
    2410:	ldrd	r6, [r1, #24]
    2414:	cmp	r6, #0
    2418:	sbcs	r2, r7, #0
    241c:	blt	2440 <coda_type_array_set_base_type+0xa4>
    2420:	mul	r2, r4, r7
    2424:	mov	ip, #0
    2428:	asr	r1, r4, #31
    242c:	umull	r4, r5, r4, r6
    2430:	mla	r6, r6, r1, r2
    2434:	add	r5, r6, r5
    2438:	strd	r4, [r3, #24]
    243c:	b	2444 <coda_type_array_set_base_type+0xa8>
    2440:	mov	ip, #0
    2444:	ldrd	r4, [sp]
    2448:	mov	r0, ip
    244c:	ldrd	r6, [sp, #8]
    2450:	ldr	r8, [sp, #16]
    2454:	add	sp, sp, #20
    2458:	pop	{pc}		; (ldr pc, [sp], #4)
    245c:	cmp	r0, #2
    2460:	bne	23ec <coda_type_array_set_base_type+0x50>
    2464:	ldr	r2, [r1, #8]
    2468:	cmp	r2, #1
    246c:	beq	2488 <coda_type_array_set_base_type+0xec>
    2470:	ldr	r2, [r1, #4]
    2474:	mov	ip, #0
    2478:	str	r1, [r3, #40]	; 0x28
    247c:	add	r2, r2, #1
    2480:	str	r2, [r1, #4]
    2484:	b	2444 <coda_type_array_set_base_type+0xa8>
    2488:	movw	r1, #0
    248c:	movt	r1, #0
    2490:	movw	r0, #65136	; 0xfe70
    2494:	movt	r0, #65535	; 0xffff
    2498:	bl	0 <coda_set_error>
    249c:	mvn	ip, #0
    24a0:	b	2444 <coda_type_array_set_base_type+0xa8>
    24a4:	movw	r1, #0
    24a8:	movt	r1, #0
    24ac:	movw	r0, #65136	; 0xfe70
    24b0:	movt	r0, #65535	; 0xffff
    24b4:	bl	0 <coda_set_error>
    24b8:	mvn	ip, #0
    24bc:	b	2444 <coda_type_array_set_base_type+0xa8>
    24c0:	cmp	r2, #9
    24c4:	movwhi	r2, #0
    24c8:	movthi	r2, #0
    24cc:	bls	250c <coda_type_array_set_base_type+0x170>
    24d0:	cmp	r0, #9
    24d4:	movwhi	r3, #0
    24d8:	movthi	r3, #0
    24dc:	bhi	24f0 <coda_type_array_set_base_type+0x154>
    24e0:	movw	r3, #0
    24e4:	movt	r3, #0
    24e8:	add	r3, r3, r0, lsl #2
    24ec:	ldr	r3, [r3, #84]	; 0x54
    24f0:	movw	r1, #0
    24f4:	movt	r1, #0
    24f8:	movw	r0, #65136	; 0xfe70
    24fc:	movt	r0, #65535	; 0xffff
    2500:	bl	0 <coda_set_error>
    2504:	mvn	ip, #0
    2508:	b	2444 <coda_type_array_set_base_type+0xa8>
    250c:	movw	r3, #0
    2510:	movt	r3, #0
    2514:	add	r3, r3, r2, lsl #2
    2518:	ldr	r2, [r3, #84]	; 0x54
    251c:	b	24d0 <coda_type_array_set_base_type+0x134>
    2520:	movw	r2, #0
    2524:	movt	r2, #0
    2528:	movw	r1, #0
    252c:	movt	r1, #0
    2530:	movw	r3, #1611	; 0x64b
    2534:	mvn	r0, #99	; 0x63
    2538:	bl	0 <coda_set_error>
    253c:	mvn	ip, #0
    2540:	b	2444 <coda_type_array_set_base_type+0xa8>

00002544 <coda_type_array_add_fixed_dimension>:
    2544:	subs	r3, r0, #0
    2548:	strd	r4, [sp, #-32]!	; 0xffffffe0
    254c:	strd	r6, [sp, #8]
    2550:	strd	r8, [sp, #16]
    2554:	str	sl, [sp, #24]
    2558:	str	lr, [sp, #28]
    255c:	beq	2648 <coda_type_array_add_fixed_dimension+0x104>
    2560:	cmp	r1, #0
    2564:	blt	2608 <coda_type_array_add_fixed_dimension+0xc4>
    2568:	ldr	r0, [r3, #48]	; 0x30
    256c:	cmp	r0, #8
    2570:	beq	2628 <coda_type_array_add_fixed_dimension+0xe4>
    2574:	add	ip, r3, r0, lsl #2
    2578:	mov	lr, #0
    257c:	add	r0, r0, #1
    2580:	str	r1, [ip, #52]	; 0x34
    2584:	str	lr, [ip, #84]	; 0x54
    2588:	ldr	ip, [r3, #44]	; 0x2c
    258c:	str	r0, [r3, #48]	; 0x30
    2590:	cmn	ip, #1
    2594:	beq	25b0 <coda_type_array_add_fixed_dimension+0x6c>
    2598:	cmp	r0, #1
    259c:	ldr	r0, [r3]
    25a0:	mulne	r1, ip, r1
    25a4:	cmp	r0, #1
    25a8:	str	r1, [r3, #44]	; 0x2c
    25ac:	bls	25cc <coda_type_array_add_fixed_dimension+0x88>
    25b0:	mov	r0, #0
    25b4:	ldrd	r4, [sp]
    25b8:	ldrd	r6, [sp, #8]
    25bc:	ldrd	r8, [sp, #16]
    25c0:	ldr	sl, [sp, #24]
    25c4:	add	sp, sp, #28
    25c8:	pop	{pc}		; (ldr pc, [sp], #4)
    25cc:	ldr	r0, [r3, #40]	; 0x28
    25d0:	cmp	r0, #0
    25d4:	beq	25b0 <coda_type_array_add_fixed_dimension+0x6c>
    25d8:	ldrd	r4, [r0, #24]
    25dc:	cmp	r4, #0
    25e0:	sbcs	r2, r5, #0
    25e4:	blt	25b0 <coda_type_array_add_fixed_dimension+0x6c>
    25e8:	mul	r2, r1, r5
    25ec:	mov	r0, #0
    25f0:	asr	r9, r1, #31
    25f4:	umull	r6, r7, r1, r4
    25f8:	mla	r4, r4, r9, r2
    25fc:	add	r7, r4, r7
    2600:	strd	r6, [r3, #24]
    2604:	b	25b4 <coda_type_array_add_fixed_dimension+0x70>
    2608:	mov	r2, r1
    260c:	movw	r0, #65136	; 0xfe70
    2610:	movt	r0, #65535	; 0xffff
    2614:	movw	r1, #0
    2618:	movt	r1, #0
    261c:	bl	0 <coda_set_error>
    2620:	mvn	r0, #0
    2624:	b	25b4 <coda_type_array_add_fixed_dimension+0x70>
    2628:	mov	r2, r0
    262c:	movw	r1, #0
    2630:	movt	r1, #0
    2634:	movw	r0, #65136	; 0xfe70
    2638:	movt	r0, #65535	; 0xffff
    263c:	bl	0 <coda_set_error>
    2640:	mvn	r0, #0
    2644:	b	25b4 <coda_type_array_add_fixed_dimension+0x70>
    2648:	mvn	r0, #99	; 0x63
    264c:	movw	r2, #0
    2650:	movt	r2, #0
    2654:	movw	r1, #0
    2658:	movt	r1, #0
    265c:	movw	r3, #1658	; 0x67a
    2660:	bl	0 <coda_set_error>
    2664:	mvn	r0, #0
    2668:	b	25b4 <coda_type_array_add_fixed_dimension+0x70>

0000266c <coda_type_array_add_variable_dimension>:
    266c:	subs	r3, r0, #0
    2670:	strd	r4, [sp, #-16]!
    2674:	str	r6, [sp, #8]
    2678:	str	lr, [sp, #12]
    267c:	beq	273c <coda_type_array_add_variable_dimension+0xd0>
    2680:	ldr	r2, [r3, #48]	; 0x30
    2684:	cmp	r2, #8
    2688:	beq	2720 <coda_type_array_add_variable_dimension+0xb4>
    268c:	ldr	r0, [r3]
    2690:	cmp	r0, #1
    2694:	bls	26c8 <coda_type_array_add_variable_dimension+0x5c>
    2698:	add	lr, r3, r2, lsl #2
    269c:	mvn	ip, #0
    26a0:	add	r2, r2, #1
    26a4:	mov	r0, #0
    26a8:	str	ip, [lr, #52]	; 0x34
    26ac:	str	r1, [lr, #84]	; 0x54
    26b0:	str	ip, [r3, #44]	; 0x2c
    26b4:	str	r2, [r3, #48]	; 0x30
    26b8:	ldrd	r4, [sp]
    26bc:	ldr	r6, [sp, #8]
    26c0:	add	sp, sp, #12
    26c4:	pop	{pc}		; (ldr pc, [sp], #4)
    26c8:	cmp	r1, #0
    26cc:	beq	2760 <coda_type_array_add_variable_dimension+0xf4>
    26d0:	add	r0, r3, r2, lsl #2
    26d4:	mvn	ip, #0
    26d8:	add	r2, r2, #1
    26dc:	str	ip, [r0, #52]	; 0x34
    26e0:	str	r1, [r0, #84]	; 0x54
    26e4:	ldrd	r0, [r3, #24]
    26e8:	str	ip, [r3, #44]	; 0x2c
    26ec:	str	r2, [r3, #48]	; 0x30
    26f0:	cmp	r0, #0
    26f4:	sbcs	r2, r1, #0
    26f8:	movlt	r0, #0
    26fc:	blt	26b8 <coda_type_array_add_variable_dimension+0x4c>
    2700:	mvn	r4, #0
    2704:	mvn	r5, #0
    2708:	ldr	r6, [sp, #8]
    270c:	mov	r0, #0
    2710:	strd	r4, [r3, #24]
    2714:	ldrd	r4, [sp]
    2718:	add	sp, sp, #12
    271c:	pop	{pc}		; (ldr pc, [sp], #4)
    2720:	movw	r1, #0
    2724:	movt	r1, #0
    2728:	movw	r0, #65136	; 0xfe70
    272c:	movt	r0, #65535	; 0xffff
    2730:	bl	0 <coda_set_error>
    2734:	mvn	r0, #0
    2738:	b	26b8 <coda_type_array_add_variable_dimension+0x4c>
    273c:	mvn	r0, #99	; 0x63
    2740:	movw	r2, #0
    2744:	movt	r2, #0
    2748:	movw	r1, #0
    274c:	movt	r1, #0
    2750:	movw	r3, #1705	; 0x6a9
    2754:	bl	0 <coda_set_error>
    2758:	mvn	r0, #0
    275c:	b	26b8 <coda_type_array_add_variable_dimension+0x4c>
    2760:	movw	r3, #0
    2764:	movt	r3, #0
    2768:	add	r3, r3, r0, lsl #2
    276c:	movw	r1, #0
    2770:	movt	r1, #0
    2774:	movw	r0, #65136	; 0xfe70
    2778:	movt	r0, #65535	; 0xffff
    277c:	ldr	r2, [r3, #84]	; 0x54
    2780:	bl	0 <coda_set_error>
    2784:	mvn	r0, #0
    2788:	b	26b8 <coda_type_array_add_variable_dimension+0x4c>

0000278c <coda_type_array_validate>:
    278c:	cmp	r0, #0
    2790:	str	r4, [sp, #-8]!
    2794:	str	lr, [sp, #4]
    2798:	beq	27d4 <coda_type_array_validate+0x48>
    279c:	ldr	r3, [r0, #48]	; 0x30
    27a0:	cmp	r3, #0
    27a4:	movne	r0, #0
    27a8:	beq	27b8 <coda_type_array_validate+0x2c>
    27ac:	ldr	r4, [sp]
    27b0:	add	sp, sp, #4
    27b4:	pop	{pc}		; (ldr pc, [sp], #4)
    27b8:	movw	r1, #0
    27bc:	movt	r1, #0
    27c0:	movw	r0, #65136	; 0xfe70
    27c4:	movt	r0, #65535	; 0xffff
    27c8:	bl	0 <coda_set_error>
    27cc:	mvn	r0, #0
    27d0:	b	27ac <coda_type_array_validate+0x20>
    27d4:	mvn	r0, #99	; 0x63
    27d8:	movw	r2, #0
    27dc:	movt	r2, #0
    27e0:	movw	r1, #0
    27e4:	movt	r1, #0
    27e8:	movw	r3, #1742	; 0x6ce
    27ec:	bl	0 <coda_set_error>
    27f0:	mvn	r0, #0
    27f4:	b	27ac <coda_type_array_validate+0x20>

000027f8 <coda_type_number_new>:
    27f8:	sub	r3, r1, #2
    27fc:	strd	r4, [sp, #-16]!
    2800:	mov	r5, r1
    2804:	cmp	r3, #1
    2808:	str	r6, [sp, #8]
    280c:	str	lr, [sp, #12]
    2810:	sub	sp, sp, #8
    2814:	bhi	2888 <coda_type_number_new+0x90>
    2818:	mov	r6, r0
    281c:	mov	r0, #56	; 0x38
    2820:	bl	0 <malloc>
    2824:	subs	r4, r0, #0
    2828:	beq	28c4 <coda_type_number_new+0xcc>
    282c:	cmp	r5, #2
    2830:	mov	r3, #0
    2834:	str	r6, [r4]
    2838:	moveq	r2, #6
    283c:	movne	r2, #9
    2840:	mvn	r0, #0
    2844:	mvn	r1, #0
    2848:	stmib	r4, {r3, r5}
    284c:	strd	r2, [r4, #12]
    2850:	str	r3, [r4, #20]
    2854:	strd	r0, [r4, #24]
    2858:	str	r3, [r4, #32]
    285c:	str	r3, [r4, #36]	; 0x24
    2860:	str	r3, [r4, #40]	; 0x28
    2864:	str	r3, [r4, #44]	; 0x2c
    2868:	str	r3, [r4, #48]	; 0x30
    286c:	str	r3, [r4, #52]	; 0x34
    2870:	mov	r0, r4
    2874:	add	sp, sp, #8
    2878:	ldrd	r4, [sp]
    287c:	ldr	r6, [sp, #8]
    2880:	add	sp, sp, #12
    2884:	pop	{pc}		; (ldr pc, [sp], #4)
    2888:	cmp	r1, #6
    288c:	movwhi	r2, #0
    2890:	movthi	r2, #0
    2894:	bls	28b4 <coda_type_number_new+0xbc>
    2898:	movw	r1, #0
    289c:	movt	r1, #0
    28a0:	movw	r0, #65136	; 0xfe70
    28a4:	movt	r0, #65535	; 0xffff
    28a8:	mov	r4, #0
    28ac:	bl	0 <coda_set_error>
    28b0:	b	2870 <coda_type_number_new+0x78>
    28b4:	movw	r3, #0
    28b8:	movt	r3, #0
    28bc:	ldr	r2, [r3, r1, lsl #2]
    28c0:	b	2898 <coda_type_number_new+0xa0>
    28c4:	movw	r0, #1769	; 0x6e9
    28c8:	movw	r3, #0
    28cc:	movt	r3, #0
    28d0:	movw	r1, #0
    28d4:	movt	r1, #0
    28d8:	mov	r2, #56	; 0x38
    28dc:	str	r0, [sp]
    28e0:	mvn	r0, #0
    28e4:	bl	0 <coda_set_error>
    28e8:	b	2870 <coda_type_number_new+0x78>

000028ec <coda_type_number_set_unit>:
    28ec:	cmp	r1, #0
    28f0:	strd	r4, [sp, #-16]!
    28f4:	str	r6, [sp, #8]
    28f8:	str	lr, [sp, #12]
    28fc:	beq	2954 <coda_type_number_set_unit+0x68>
    2900:	ldr	r4, [r0, #40]	; 0x28
    2904:	mov	r5, r0
    2908:	cmp	r4, #0
    290c:	bne	2938 <coda_type_number_set_unit+0x4c>
    2910:	mov	r0, r1
    2914:	bl	0 <strdup>
    2918:	cmp	r0, #0
    291c:	str	r0, [r5, #40]	; 0x28
    2920:	movne	r0, r4
    2924:	beq	2978 <coda_type_number_set_unit+0x8c>
    2928:	ldrd	r4, [sp]
    292c:	ldr	r6, [sp, #8]
    2930:	add	sp, sp, #12
    2934:	pop	{pc}		; (ldr pc, [sp], #4)
    2938:	movw	r1, #0
    293c:	movt	r1, #0
    2940:	movw	r0, #65136	; 0xfe70
    2944:	movt	r0, #65535	; 0xffff
    2948:	bl	0 <coda_set_error>
    294c:	mvn	r0, #0
    2950:	b	2928 <coda_type_number_set_unit+0x3c>
    2954:	mvn	r0, #99	; 0x63
    2958:	movw	r2, #0
    295c:	movt	r2, #0
    2960:	movw	r1, #0
    2964:	movt	r1, #0
    2968:	movw	r3, #1793	; 0x701
    296c:	bl	0 <coda_set_error>
    2970:	mvn	r0, #0
    2974:	b	2928 <coda_type_number_set_unit+0x3c>
    2978:	mvn	r0, #0
    297c:	movw	r2, #0
    2980:	movt	r2, #0
    2984:	movw	r1, #0
    2988:	movt	r1, #0
    298c:	movw	r3, #1805	; 0x70d
    2990:	bl	0 <coda_set_error>
    2994:	mvn	r0, #0
    2998:	b	2928 <coda_type_number_set_unit+0x3c>

0000299c <coda_type_number_set_endianness>:
    299c:	subs	r3, r0, #0
    29a0:	beq	29b0 <coda_type_number_set_endianness+0x14>
    29a4:	mov	r0, #0
    29a8:	str	r1, [r3, #44]	; 0x2c
    29ac:	bx	lr
    29b0:	mvn	r0, #99	; 0x63
    29b4:	movw	r2, #0
    29b8:	movt	r2, #0
    29bc:	movw	r1, #0
    29c0:	movt	r1, #0
    29c4:	movw	r3, #1816	; 0x718
    29c8:	str	r4, [sp, #-8]!
    29cc:	str	lr, [sp, #4]
    29d0:	bl	0 <coda_set_error>
    29d4:	ldr	r4, [sp]
    29d8:	add	sp, sp, #4
    29dc:	mvn	r0, #0
    29e0:	pop	{pc}		; (ldr pc, [sp], #4)

000029e4 <coda_type_number_set_conversion>:
    29e4:	subs	r3, r0, #0
    29e8:	str	r4, [sp, #-8]!
    29ec:	str	lr, [sp, #4]
    29f0:	beq	2a2c <coda_type_number_set_conversion+0x48>
    29f4:	ldr	r0, [r3, #48]	; 0x30
    29f8:	cmp	r0, #0
    29fc:	streq	r1, [r3, #48]	; 0x30
    2a00:	bne	2a10 <coda_type_number_set_conversion+0x2c>
    2a04:	ldr	r4, [sp]
    2a08:	add	sp, sp, #4
    2a0c:	pop	{pc}		; (ldr pc, [sp], #4)
    2a10:	movw	r1, #0
    2a14:	movt	r1, #0
    2a18:	movw	r0, #65136	; 0xfe70
    2a1c:	movt	r0, #65535	; 0xffff
    2a20:	bl	0 <coda_set_error>
    2a24:	mvn	r0, #0
    2a28:	b	2a04 <coda_type_number_set_conversion+0x20>
    2a2c:	mvn	r0, #99	; 0x63
    2a30:	movw	r2, #0
    2a34:	movt	r2, #0
    2a38:	movw	r1, #0
    2a3c:	movt	r1, #0
    2a40:	movw	r3, #1827	; 0x723
    2a44:	bl	0 <coda_set_error>
    2a48:	mvn	r0, #0
    2a4c:	b	2a04 <coda_type_number_set_conversion+0x20>

00002a50 <coda_type_number_add_ascii_float_mapping>:
    2a50:	cmp	r0, #0
    2a54:	str	r4, [sp, #-8]!
    2a58:	str	lr, [sp, #4]
    2a5c:	beq	2ad4 <coda_type_number_add_ascii_float_mapping+0x84>
    2a60:	cmp	r1, #0
    2a64:	beq	2ab4 <coda_type_number_add_ascii_float_mapping+0x64>
    2a68:	ldr	r3, [r0, #8]
    2a6c:	cmp	r3, #3
    2a70:	bne	2a90 <coda_type_number_add_ascii_float_mapping+0x40>
    2a74:	mov	r2, r1
    2a78:	add	r1, r0, #52	; 0x34
    2a7c:	ldr	r4, [sp]
    2a80:	add	r0, r0, #24
    2a84:	ldr	lr, [sp, #4]
    2a88:	add	sp, sp, #8
    2a8c:	b	40 <mapping_type_add_mapping.isra.1>
    2a90:	movw	r1, #0
    2a94:	movt	r1, #0
    2a98:	movw	r0, #65136	; 0xfe70
    2a9c:	movt	r0, #65535	; 0xffff
    2aa0:	bl	0 <coda_set_error>
    2aa4:	ldr	r4, [sp]
    2aa8:	add	sp, sp, #4
    2aac:	mvn	r0, #0
    2ab0:	pop	{pc}		; (ldr pc, [sp], #4)
    2ab4:	movw	r2, #0
    2ab8:	movt	r2, #0
    2abc:	movw	r1, #0
    2ac0:	movt	r1, #0
    2ac4:	movw	r3, #1848	; 0x738
    2ac8:	mvn	r0, #99	; 0x63
    2acc:	bl	0 <coda_set_error>
    2ad0:	b	2aa4 <coda_type_number_add_ascii_float_mapping+0x54>
    2ad4:	movw	r2, #0
    2ad8:	movt	r2, #0
    2adc:	movw	r1, #0
    2ae0:	movt	r1, #0
    2ae4:	movw	r3, #1843	; 0x733
    2ae8:	mvn	r0, #99	; 0x63
    2aec:	bl	0 <coda_set_error>
    2af0:	b	2aa4 <coda_type_number_add_ascii_float_mapping+0x54>

00002af4 <coda_type_number_add_ascii_integer_mapping>:
    2af4:	cmp	r0, #0
    2af8:	str	r4, [sp, #-8]!
    2afc:	str	lr, [sp, #4]
    2b00:	beq	2b78 <coda_type_number_add_ascii_integer_mapping+0x84>
    2b04:	cmp	r1, #0
    2b08:	beq	2b58 <coda_type_number_add_ascii_integer_mapping+0x64>
    2b0c:	ldr	r3, [r0, #8]
    2b10:	cmp	r3, #2
    2b14:	bne	2b34 <coda_type_number_add_ascii_integer_mapping+0x40>
    2b18:	mov	r2, r1
    2b1c:	add	r1, r0, #52	; 0x34
    2b20:	ldr	r4, [sp]
    2b24:	add	r0, r0, #24
    2b28:	ldr	lr, [sp, #4]
    2b2c:	add	sp, sp, #8
    2b30:	b	40 <mapping_type_add_mapping.isra.1>
    2b34:	movw	r1, #0
    2b38:	movt	r1, #0
    2b3c:	movw	r0, #65136	; 0xfe70
    2b40:	movt	r0, #65535	; 0xffff
    2b44:	bl	0 <coda_set_error>
    2b48:	ldr	r4, [sp]
    2b4c:	add	sp, sp, #4
    2b50:	mvn	r0, #0
    2b54:	pop	{pc}		; (ldr pc, [sp], #4)
    2b58:	movw	r2, #0
    2b5c:	movt	r2, #0
    2b60:	movw	r1, #0
    2b64:	movt	r1, #0
    2b68:	movw	r3, #1868	; 0x74c
    2b6c:	mvn	r0, #99	; 0x63
    2b70:	bl	0 <coda_set_error>
    2b74:	b	2b48 <coda_type_number_add_ascii_integer_mapping+0x54>
    2b78:	movw	r2, #0
    2b7c:	movt	r2, #0
    2b80:	movw	r1, #0
    2b84:	movt	r1, #0
    2b88:	movw	r3, #1863	; 0x747
    2b8c:	mvn	r0, #99	; 0x63
    2b90:	bl	0 <coda_set_error>
    2b94:	b	2b48 <coda_type_number_add_ascii_integer_mapping+0x54>

00002b98 <coda_type_number_validate>:
    2b98:	cmp	r0, #0
    2b9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    2ba0:	strd	r6, [sp, #8]
    2ba4:	str	r8, [sp, #16]
    2ba8:	str	lr, [sp, #20]
    2bac:	beq	2d84 <coda_type_number_validate+0x1ec>
    2bb0:	ldr	r3, [r0]
    2bb4:	cmp	r3, #1
    2bb8:	beq	2bd4 <coda_type_number_validate+0x3c>
    2bbc:	mov	r0, #0
    2bc0:	ldrd	r4, [sp]
    2bc4:	ldrd	r6, [sp, #8]
    2bc8:	ldr	r8, [sp, #16]
    2bcc:	add	sp, sp, #20
    2bd0:	pop	{pc}		; (ldr pc, [sp], #4)
    2bd4:	ldrd	r6, [r0, #24]
    2bd8:	cmp	r6, #0
    2bdc:	sbcs	r3, r7, #0
    2be0:	blt	2c1c <coda_type_number_validate+0x84>
    2be4:	ldr	r1, [r0, #12]
    2be8:	cmp	r1, #9
    2bec:	ldrls	pc, [pc, r1, lsl #2]
    2bf0:	b	2dc4 <coda_type_number_validate+0x22c>
    2bf4:	.word	0x00002c78
    2bf8:	.word	0x00002c78
    2bfc:	.word	0x00002cc4
    2c00:	.word	0x00002cc4
    2c04:	.word	0x00002d5c
    2c08:	.word	0x00002d5c
    2c0c:	.word	0x00002d00
    2c10:	.word	0x00002d00
    2c14:	.word	0x00002d28
    2c18:	.word	0x00002c44
    2c1c:	ldr	r3, [r0, #32]
    2c20:	cmp	r3, #0
    2c24:	bne	2bbc <coda_type_number_validate+0x24>
    2c28:	movw	r1, #0
    2c2c:	movt	r1, #0
    2c30:	movw	r0, #65136	; 0xfe70
    2c34:	movt	r0, #65535	; 0xffff
    2c38:	bl	0 <coda_set_error>
    2c3c:	mvn	r0, #0
    2c40:	b	2bc0 <coda_type_number_validate+0x28>
    2c44:	cmp	r7, #0
    2c48:	cmpeq	r6, #64	; 0x40
    2c4c:	beq	2bbc <coda_type_number_validate+0x24>
    2c50:	mov	r2, r6
    2c54:	movw	r3, #0
    2c58:	movt	r3, #0
    2c5c:	movw	r1, #0
    2c60:	movt	r1, #0
    2c64:	movw	r0, #65136	; 0xfe70
    2c68:	movt	r0, #65535	; 0xffff
    2c6c:	bl	0 <coda_set_error>
    2c70:	mvn	r0, #0
    2c74:	b	2bc0 <coda_type_number_validate+0x28>
    2c78:	cmp	r6, #9
    2c7c:	sbcs	r3, r7, #0
    2c80:	bge	2da8 <coda_type_number_validate+0x210>
    2c84:	ldr	r1, [r0, #44]	; 0x2c
    2c88:	cmp	r1, #1
    2c8c:	bne	2bbc <coda_type_number_validate+0x24>
    2c90:	mov	r0, #0
    2c94:	and	r4, r6, #7
    2c98:	mov	r5, r0
    2c9c:	orrs	r3, r4, r5
    2ca0:	beq	2bc0 <coda_type_number_validate+0x28>
    2ca4:	mov	r2, r6
    2ca8:	movw	r1, #0
    2cac:	movt	r1, #0
    2cb0:	movw	r0, #65136	; 0xfe70
    2cb4:	movt	r0, #65535	; 0xffff
    2cb8:	bl	0 <coda_set_error>
    2cbc:	mvn	r0, #0
    2cc0:	b	2bc0 <coda_type_number_validate+0x28>
    2cc4:	cmp	r6, #17
    2cc8:	sbcs	r3, r7, #0
    2ccc:	blt	2c84 <coda_type_number_validate+0xec>
    2cd0:	movw	r3, #0
    2cd4:	movt	r3, #0
    2cd8:	add	r3, r3, r1, lsl #2
    2cdc:	mov	r2, r6
    2ce0:	movw	r1, #0
    2ce4:	movt	r1, #0
    2ce8:	movw	r0, #65136	; 0xfe70
    2cec:	movt	r0, #65535	; 0xffff
    2cf0:	ldr	r3, [r3, #32]
    2cf4:	bl	0 <coda_set_error>
    2cf8:	mvn	r0, #0
    2cfc:	b	2bc0 <coda_type_number_validate+0x28>
    2d00:	cmp	r6, #65	; 0x41
    2d04:	sbcs	r3, r7, #0
    2d08:	blt	2c84 <coda_type_number_validate+0xec>
    2d0c:	movw	r3, #0
    2d10:	movt	r3, #0
    2d14:	add	r3, r3, r1, lsl #2
    2d18:	mov	r2, r6
    2d1c:	movw	r1, #0
    2d20:	movt	r1, #0
    2d24:	b	2ce8 <coda_type_number_validate+0x150>
    2d28:	cmp	r7, #0
    2d2c:	cmpeq	r6, #32
    2d30:	beq	2bbc <coda_type_number_validate+0x24>
    2d34:	mov	r2, r6
    2d38:	movw	r3, #0
    2d3c:	movt	r3, #0
    2d40:	movw	r1, #0
    2d44:	movt	r1, #0
    2d48:	movw	r0, #65136	; 0xfe70
    2d4c:	movt	r0, #65535	; 0xffff
    2d50:	bl	0 <coda_set_error>
    2d54:	mvn	r0, #0
    2d58:	b	2bc0 <coda_type_number_validate+0x28>
    2d5c:	cmp	r6, #33	; 0x21
    2d60:	sbcs	r3, r7, #0
    2d64:	blt	2c84 <coda_type_number_validate+0xec>
    2d68:	movw	r3, #0
    2d6c:	movt	r3, #0
    2d70:	add	r3, r3, r1, lsl #2
    2d74:	mov	r2, r6
    2d78:	movw	r1, #0
    2d7c:	movt	r1, #0
    2d80:	b	2ce8 <coda_type_number_validate+0x150>
    2d84:	mvn	r0, #99	; 0x63
    2d88:	movw	r2, #0
    2d8c:	movt	r2, #0
    2d90:	movw	r1, #0
    2d94:	movt	r1, #0
    2d98:	movw	r3, #1883	; 0x75b
    2d9c:	bl	0 <coda_set_error>
    2da0:	mvn	r0, #0
    2da4:	b	2bc0 <coda_type_number_validate+0x28>
    2da8:	movw	r3, #0
    2dac:	movt	r3, #0
    2db0:	add	r3, r3, r1, lsl #2
    2db4:	mov	r2, r6
    2db8:	movw	r1, #0
    2dbc:	movt	r1, #0
    2dc0:	b	2ce8 <coda_type_number_validate+0x150>
    2dc4:	movw	r1, #0
    2dc8:	movt	r1, #0
    2dcc:	ldr	r3, [pc, #12]	; 2de0 <coda_type_number_validate+0x248>
    2dd0:	movw	r0, #0
    2dd4:	movt	r0, #0
    2dd8:	movw	r2, #1951	; 0x79f
    2ddc:	bl	0 <__assert_fail>
    2de0:	.word	0x00000094

00002de4 <coda_type_text_new>:
    2de4:	strd	r4, [sp, #-12]!
    2de8:	mov	r5, r0
    2dec:	mov	r0, #48	; 0x30
    2df0:	str	lr, [sp, #8]
    2df4:	sub	sp, sp, #12
    2df8:	bl	0 <malloc>
    2dfc:	subs	r4, r0, #0
    2e00:	beq	2e50 <coda_type_text_new+0x6c>
    2e04:	mov	r3, #0
    2e08:	mov	ip, #4
    2e0c:	str	r5, [r4]
    2e10:	mov	r2, #11
    2e14:	mvn	r0, #0
    2e18:	mvn	r1, #0
    2e1c:	stmib	r4, {r3, ip}
    2e20:	strd	r2, [r4, #12]
    2e24:	str	r3, [r4, #20]
    2e28:	strd	r0, [r4, #24]
    2e2c:	str	r3, [r4, #32]
    2e30:	str	r3, [r4, #36]	; 0x24
    2e34:	str	r3, [r4, #40]	; 0x28
    2e38:	str	r3, [r4, #44]	; 0x2c
    2e3c:	mov	r0, r4
    2e40:	add	sp, sp, #12
    2e44:	ldrd	r4, [sp]
    2e48:	add	sp, sp, #8
    2e4c:	pop	{pc}		; (ldr pc, [sp], #4)
    2e50:	movw	r0, #1980	; 0x7bc
    2e54:	movw	r3, #0
    2e58:	movt	r3, #0
    2e5c:	movw	r1, #0
    2e60:	movt	r1, #0
    2e64:	mov	r2, #48	; 0x30
    2e68:	str	r0, [sp]
    2e6c:	mvn	r0, #0
    2e70:	bl	0 <coda_set_error>
    2e74:	b	2e3c <coda_type_text_new+0x58>

00002e78 <coda_type_text_set_fixed_value>:
    2e78:	strd	r4, [sp, #-16]!
    2e7c:	subs	r5, r0, #0
    2e80:	str	r6, [sp, #8]
    2e84:	str	lr, [sp, #12]
    2e88:	beq	2f08 <coda_type_text_set_fixed_value+0x90>
    2e8c:	cmp	r1, #0
    2e90:	beq	2ee4 <coda_type_text_set_fixed_value+0x6c>
    2e94:	ldr	r4, [r5, #40]	; 0x28
    2e98:	cmp	r4, #0
    2e9c:	bne	2ec8 <coda_type_text_set_fixed_value+0x50>
    2ea0:	mov	r0, r1
    2ea4:	bl	0 <strdup>
    2ea8:	cmp	r0, #0
    2eac:	str	r0, [r5, #40]	; 0x28
    2eb0:	movne	r0, r4
    2eb4:	beq	2f2c <coda_type_text_set_fixed_value+0xb4>
    2eb8:	ldrd	r4, [sp]
    2ebc:	ldr	r6, [sp, #8]
    2ec0:	add	sp, sp, #12
    2ec4:	pop	{pc}		; (ldr pc, [sp], #4)
    2ec8:	movw	r1, #0
    2ecc:	movt	r1, #0
    2ed0:	movw	r0, #65136	; 0xfe70
    2ed4:	movt	r0, #65535	; 0xffff
    2ed8:	bl	0 <coda_set_error>
    2edc:	mvn	r0, #0
    2ee0:	b	2eb8 <coda_type_text_set_fixed_value+0x40>
    2ee4:	mvn	r0, #99	; 0x63
    2ee8:	movw	r2, #0
    2eec:	movt	r2, #0
    2ef0:	movw	r1, #0
    2ef4:	movt	r1, #0
    2ef8:	movw	r3, #2007	; 0x7d7
    2efc:	bl	0 <coda_set_error>
    2f00:	mvn	r0, #0
    2f04:	b	2eb8 <coda_type_text_set_fixed_value+0x40>
    2f08:	mvn	r0, #99	; 0x63
    2f0c:	movw	r2, #0
    2f10:	movt	r2, #0
    2f14:	movw	r1, #0
    2f18:	movt	r1, #0
    2f1c:	movw	r3, #2002	; 0x7d2
    2f20:	bl	0 <coda_set_error>
    2f24:	mvn	r0, #0
    2f28:	b	2eb8 <coda_type_text_set_fixed_value+0x40>
    2f2c:	mvn	r0, #0
    2f30:	movw	r2, #0
    2f34:	movt	r2, #0
    2f38:	movw	r1, #0
    2f3c:	movt	r1, #0
    2f40:	movw	r3, #2019	; 0x7e3
    2f44:	bl	0 <coda_set_error>
    2f48:	mvn	r0, #0
    2f4c:	b	2eb8 <coda_type_text_set_fixed_value+0x40>

00002f50 <coda_type_text_set_special_text_type>:
    2f50:	subs	r3, r0, #0
    2f54:	str	r4, [sp, #-8]!
    2f58:	str	lr, [sp, #4]
    2f5c:	beq	2fe0 <coda_type_text_set_special_text_type+0x90>
    2f60:	ldr	r2, [r3]
    2f64:	cmp	r2, #0
    2f68:	bne	2f88 <coda_type_text_set_special_text_type+0x38>
    2f6c:	ldr	r0, [r3, #44]	; 0x2c
    2f70:	cmp	r0, #0
    2f74:	streq	r1, [r3, #44]	; 0x2c
    2f78:	bne	2fc4 <coda_type_text_set_special_text_type+0x74>
    2f7c:	ldr	r4, [sp]
    2f80:	add	sp, sp, #4
    2f84:	pop	{pc}		; (ldr pc, [sp], #4)
    2f88:	cmp	r2, #9
    2f8c:	movwhi	r2, #0
    2f90:	movthi	r2, #0
    2f94:	bhi	2fa8 <coda_type_text_set_special_text_type+0x58>
    2f98:	movw	r3, #0
    2f9c:	movt	r3, #0
    2fa0:	add	r3, r3, r2, lsl #2
    2fa4:	ldr	r2, [r3, #84]	; 0x54
    2fa8:	movw	r1, #0
    2fac:	movt	r1, #0
    2fb0:	movw	r0, #65136	; 0xfe70
    2fb4:	movt	r0, #65535	; 0xffff
    2fb8:	bl	0 <coda_set_error>
    2fbc:	mvn	r0, #0
    2fc0:	b	2f7c <coda_type_text_set_special_text_type+0x2c>
    2fc4:	movw	r1, #0
    2fc8:	movt	r1, #0
    2fcc:	movw	r0, #65136	; 0xfe70
    2fd0:	movt	r0, #65535	; 0xffff
    2fd4:	bl	0 <coda_set_error>
    2fd8:	mvn	r0, #0
    2fdc:	b	2f7c <coda_type_text_set_special_text_type+0x2c>
    2fe0:	mvn	r0, #99	; 0x63
    2fe4:	movw	r2, #0
    2fe8:	movt	r2, #0
    2fec:	movw	r1, #0
    2ff0:	movt	r1, #0
    2ff4:	movw	r3, #2030	; 0x7ee
    2ff8:	bl	0 <coda_set_error>
    2ffc:	mvn	r0, #0
    3000:	b	2f7c <coda_type_text_set_special_text_type+0x2c>

00003004 <coda_type_text_validate>:
    3004:	str	r4, [sp, #-16]!
    3008:	subs	r4, r0, #0
    300c:	strd	r6, [sp, #4]
    3010:	str	lr, [sp, #12]
    3014:	sub	sp, sp, #24
    3018:	beq	318c <coda_type_text_validate+0x188>
    301c:	ldr	r3, [r4]
    3020:	cmp	r3, #1
    3024:	bls	3088 <coda_type_text_validate+0x84>
    3028:	ldr	r3, [r4, #12]
    302c:	cmp	r3, #10
    3030:	beq	30d0 <coda_type_text_validate+0xcc>
    3034:	ldr	r0, [r4, #40]	; 0x28
    3038:	cmp	r0, #0
    303c:	beq	3074 <coda_type_text_validate+0x70>
    3040:	ldrd	r2, [r4, #24]
    3044:	cmp	r2, #0
    3048:	sbcs	r1, r3, #0
    304c:	blt	3170 <coda_type_text_validate+0x16c>
    3050:	lsr	r6, r2, #3
    3054:	asr	r7, r3, #3
    3058:	orr	r6, r6, r3, lsl #29
    305c:	bl	0 <strlen>
    3060:	mov	r1, #0
    3064:	cmp	r7, r1
    3068:	cmpeq	r6, r0
    306c:	moveq	r0, #0
    3070:	bne	3118 <coda_type_text_validate+0x114>
    3074:	add	sp, sp, #24
    3078:	ldr	r4, [sp]
    307c:	ldrd	r6, [sp, #4]
    3080:	add	sp, sp, #12
    3084:	pop	{pc}		; (ldr pc, [sp], #4)
    3088:	ldrd	r2, [r4, #24]
    308c:	ldr	r1, [r4, #32]
    3090:	cmp	r1, #0
    3094:	beq	30f0 <coda_type_text_validate+0xec>
    3098:	cmp	r2, #0
    309c:	sbcs	r1, r3, #0
    30a0:	blt	3028 <coda_type_text_validate+0x24>
    30a4:	and	r0, r2, #7
    30a8:	mov	r1, #0
    30ac:	orrs	r1, r0, r1
    30b0:	beq	3028 <coda_type_text_validate+0x24>
    30b4:	movw	r1, #0
    30b8:	movt	r1, #0
    30bc:	movw	r0, #65136	; 0xfe70
    30c0:	movt	r0, #65535	; 0xffff
    30c4:	bl	0 <coda_set_error>
    30c8:	mvn	r0, #0
    30cc:	b	3074 <coda_type_text_validate+0x70>
    30d0:	ldrd	r2, [r4, #24]
    30d4:	cmp	r3, #0
    30d8:	cmpeq	r2, #8
    30dc:	bne	3154 <coda_type_text_validate+0x150>
    30e0:	ldr	r0, [r4, #40]	; 0x28
    30e4:	cmp	r0, #0
    30e8:	bne	3050 <coda_type_text_validate+0x4c>
    30ec:	b	3074 <coda_type_text_validate+0x70>
    30f0:	cmp	r2, #0
    30f4:	sbcs	r1, r3, #0
    30f8:	bge	30a4 <coda_type_text_validate+0xa0>
    30fc:	movw	r1, #0
    3100:	movt	r1, #0
    3104:	movw	r0, #65136	; 0xfe70
    3108:	movt	r0, #65535	; 0xffff
    310c:	bl	0 <coda_set_error>
    3110:	mvn	r0, #0
    3114:	b	3074 <coda_type_text_validate+0x70>
    3118:	mov	r1, r7
    311c:	mov	r2, sp
    3120:	mov	r0, r6
    3124:	bl	0 <coda_str64>
    3128:	ldr	r0, [r4, #40]	; 0x28
    312c:	bl	0 <strlen>
    3130:	mov	r2, r0
    3134:	mov	r3, sp
    3138:	movw	r1, #0
    313c:	movt	r1, #0
    3140:	movw	r0, #65136	; 0xfe70
    3144:	movt	r0, #65535	; 0xffff
    3148:	bl	0 <coda_set_error>
    314c:	mvn	r0, #0
    3150:	b	3074 <coda_type_text_validate+0x70>
    3154:	movw	r1, #0
    3158:	movt	r1, #0
    315c:	movw	r0, #65136	; 0xfe70
    3160:	movt	r0, #65535	; 0xffff
    3164:	bl	0 <coda_set_error>
    3168:	mvn	r0, #0
    316c:	b	3074 <coda_type_text_validate+0x70>
    3170:	movw	r1, #0
    3174:	movt	r1, #0
    3178:	movw	r0, #65136	; 0xfe70
    317c:	movt	r0, #65535	; 0xffff
    3180:	bl	0 <coda_set_error>
    3184:	mvn	r0, #0
    3188:	b	3074 <coda_type_text_validate+0x70>
    318c:	mvn	r0, #99	; 0x63
    3190:	movw	r2, #0
    3194:	movt	r2, #0
    3198:	movw	r1, #0
    319c:	movt	r1, #0
    31a0:	movw	r3, #2052	; 0x804
    31a4:	bl	0 <coda_set_error>
    31a8:	mvn	r0, #0
    31ac:	b	3074 <coda_type_text_validate+0x70>

000031b0 <coda_type_raw_new>:
    31b0:	strd	r4, [sp, #-12]!
    31b4:	mov	r5, r0
    31b8:	mov	r0, #48	; 0x30
    31bc:	str	lr, [sp, #8]
    31c0:	sub	sp, sp, #12
    31c4:	bl	0 <malloc>
    31c8:	subs	r4, r0, #0
    31cc:	beq	3220 <coda_type_raw_new+0x70>
    31d0:	mov	r3, #0
    31d4:	mov	lr, #5
    31d8:	str	r5, [r4]
    31dc:	mov	ip, #12
    31e0:	mvn	r2, #0
    31e4:	mvn	r0, #0
    31e8:	mvn	r1, #0
    31ec:	stmib	r4, {r3, lr}
    31f0:	str	ip, [r4, #12]
    31f4:	str	r3, [r4, #16]
    31f8:	str	r3, [r4, #20]
    31fc:	strd	r0, [r4, #24]
    3200:	str	r3, [r4, #32]
    3204:	str	r3, [r4, #36]	; 0x24
    3208:	strd	r2, [r4, #40]	; 0x28
    320c:	mov	r0, r4
    3210:	add	sp, sp, #12
    3214:	ldrd	r4, [sp]
    3218:	add	sp, sp, #8
    321c:	pop	{pc}		; (ldr pc, [sp], #4)
    3220:	movw	r0, #2106	; 0x83a
    3224:	movw	r3, #0
    3228:	movt	r3, #0
    322c:	movw	r1, #0
    3230:	movt	r1, #0
    3234:	mov	r2, #48	; 0x30
    3238:	str	r0, [sp]
    323c:	mvn	r0, #0
    3240:	bl	0 <coda_set_error>
    3244:	b	320c <coda_type_raw_new+0x5c>

00003248 <coda_type_raw_set_fixed_value>:
    3248:	strd	r4, [sp, #-24]!	; 0xffffffe8
    324c:	subs	r4, r0, #0
    3250:	strd	r6, [sp, #8]
    3254:	str	r8, [sp, #16]
    3258:	str	lr, [sp, #20]
    325c:	beq	332c <coda_type_raw_set_fixed_value+0xe4>
    3260:	cmp	r1, #0
    3264:	mov	r5, r1
    3268:	movle	r3, #0
    326c:	movgt	r3, #1
    3270:	cmp	r2, #0
    3274:	mov	r7, r2
    3278:	movne	r3, #0
    327c:	cmp	r3, #0
    3280:	bne	3308 <coda_type_raw_set_fixed_value+0xc0>
    3284:	ldr	r6, [r4, #44]	; 0x2c
    3288:	cmp	r6, #0
    328c:	bne	32ec <coda_type_raw_set_fixed_value+0xa4>
    3290:	ldr	r3, [r4, #40]	; 0x28
    3294:	cmp	r3, #0
    3298:	bge	32ec <coda_type_raw_set_fixed_value+0xa4>
    329c:	cmp	r1, #0
    32a0:	movle	r0, r6
    32a4:	strle	r6, [r4, #40]	; 0x28
    32a8:	bgt	32c0 <coda_type_raw_set_fixed_value+0x78>
    32ac:	ldrd	r4, [sp]
    32b0:	ldrd	r6, [sp, #8]
    32b4:	ldr	r8, [sp, #16]
    32b8:	add	sp, sp, #20
    32bc:	pop	{pc}		; (ldr pc, [sp], #4)
    32c0:	mov	r0, r1
    32c4:	bl	0 <malloc>
    32c8:	cmp	r0, #0
    32cc:	str	r0, [r4, #44]	; 0x2c
    32d0:	beq	3350 <coda_type_raw_set_fixed_value+0x108>
    32d4:	mov	r1, r7
    32d8:	mov	r2, r5
    32dc:	bl	0 <memcpy>
    32e0:	mov	r0, r6
    32e4:	str	r5, [r4, #40]	; 0x28
    32e8:	b	32ac <coda_type_raw_set_fixed_value+0x64>
    32ec:	movw	r1, #0
    32f0:	movt	r1, #0
    32f4:	movw	r0, #65136	; 0xfe70
    32f8:	movt	r0, #65535	; 0xffff
    32fc:	bl	0 <coda_set_error>
    3300:	mvn	r0, #0
    3304:	b	32ac <coda_type_raw_set_fixed_value+0x64>
    3308:	mvn	r0, #99	; 0x63
    330c:	movw	r2, #0
    3310:	movt	r2, #0
    3314:	movw	r1, #0
    3318:	movt	r1, #0
    331c:	movw	r3, #2133	; 0x855
    3320:	bl	0 <coda_set_error>
    3324:	mvn	r0, #0
    3328:	b	32ac <coda_type_raw_set_fixed_value+0x64>
    332c:	mvn	r0, #99	; 0x63
    3330:	movw	r2, #0
    3334:	movt	r2, #0
    3338:	movw	r1, #0
    333c:	movt	r1, #0
    3340:	mov	r3, #2128	; 0x850
    3344:	bl	0 <coda_set_error>
    3348:	mvn	r0, #0
    334c:	b	32ac <coda_type_raw_set_fixed_value+0x64>
    3350:	mvn	r0, #0
    3354:	movw	r2, #0
    3358:	movt	r2, #0
    335c:	movw	r1, #0
    3360:	movt	r1, #0
    3364:	movw	r3, #2147	; 0x863
    3368:	bl	0 <coda_set_error>
    336c:	mvn	r0, #0
    3370:	b	32ac <coda_type_raw_set_fixed_value+0x64>

00003374 <coda_type_raw_validate>:
    3374:	str	r4, [sp, #-16]!
    3378:	subs	r4, r0, #0
    337c:	strd	r6, [sp, #4]
    3380:	str	lr, [sp, #12]
    3384:	sub	sp, sp, #24
    3388:	beq	3474 <coda_type_raw_validate+0x100>
    338c:	ldr	r3, [r4]
    3390:	cmp	r3, #1
    3394:	bls	3400 <coda_type_raw_validate+0x8c>
    3398:	ldr	r0, [r4, #44]	; 0x2c
    339c:	cmp	r0, #0
    33a0:	beq	33ec <coda_type_raw_validate+0x78>
    33a4:	ldrd	r2, [r4, #24]
    33a8:	cmp	r2, #0
    33ac:	sbcs	r1, r3, #0
    33b0:	blt	3458 <coda_type_raw_validate+0xe4>
    33b4:	ldr	ip, [r4, #40]	; 0x28
    33b8:	lsr	r6, r2, #3
    33bc:	and	lr, r2, #7
    33c0:	adds	lr, lr, #0
    33c4:	asr	r7, r3, #3
    33c8:	orr	r6, r6, r3, lsl #29
    33cc:	movne	lr, #1
    33d0:	adds	r0, r6, lr
    33d4:	asr	r3, ip, #31
    33d8:	adc	r1, r7, #0
    33dc:	cmp	r3, r1
    33e0:	cmpeq	ip, r0
    33e4:	moveq	r0, #0
    33e8:	bne	342c <coda_type_raw_validate+0xb8>
    33ec:	add	sp, sp, #24
    33f0:	ldr	r4, [sp]
    33f4:	ldrd	r6, [sp, #4]
    33f8:	add	sp, sp, #12
    33fc:	pop	{pc}		; (ldr pc, [sp], #4)
    3400:	ldr	r3, [r4, #32]
    3404:	cmp	r3, #0
    3408:	bne	3398 <coda_type_raw_validate+0x24>
    340c:	ldrd	r2, [r4, #24]
    3410:	cmp	r2, #0
    3414:	sbcs	r1, r3, #0
    3418:	blt	3498 <coda_type_raw_validate+0x124>
    341c:	ldr	r0, [r4, #44]	; 0x2c
    3420:	cmp	r0, #0
    3424:	bne	33b4 <coda_type_raw_validate+0x40>
    3428:	b	33ec <coda_type_raw_validate+0x78>
    342c:	mov	r2, sp
    3430:	bl	0 <coda_str64>
    3434:	mov	r3, sp
    3438:	movw	r1, #0
    343c:	movt	r1, #0
    3440:	movw	r0, #65136	; 0xfe70
    3444:	movt	r0, #65535	; 0xffff
    3448:	ldr	r2, [r4, #40]	; 0x28
    344c:	bl	0 <coda_set_error>
    3450:	mvn	r0, #0
    3454:	b	33ec <coda_type_raw_validate+0x78>
    3458:	movw	r1, #0
    345c:	movt	r1, #0
    3460:	movw	r0, #65136	; 0xfe70
    3464:	movt	r0, #65535	; 0xffff
    3468:	bl	0 <coda_set_error>
    346c:	mvn	r0, #0
    3470:	b	33ec <coda_type_raw_validate+0x78>
    3474:	mvn	r0, #99	; 0x63
    3478:	movw	r2, #0
    347c:	movt	r2, #0
    3480:	movw	r1, #0
    3484:	movt	r1, #0
    3488:	movw	r3, #2165	; 0x875
    348c:	bl	0 <coda_set_error>
    3490:	mvn	r0, #0
    3494:	b	33ec <coda_type_raw_validate+0x78>
    3498:	movw	r1, #0
    349c:	movt	r1, #0
    34a0:	movw	r0, #65136	; 0xfe70
    34a4:	movt	r0, #65535	; 0xffff
    34a8:	bl	0 <coda_set_error>
    34ac:	mvn	r0, #0
    34b0:	b	33ec <coda_type_raw_validate+0x78>

000034b4 <coda_type_raw_file_singleton>:
    34b4:	strd	r4, [sp, #-20]!	; 0xffffffec
    34b8:	ldr	r5, [pc, #156]	; 355c <coda_type_raw_file_singleton+0xa8>
    34bc:	strd	r6, [sp, #8]
    34c0:	mrc	15, 0, r6, cr13, cr0, {3}
    34c4:	str	lr, [sp, #16]
    34c8:	sub	sp, sp, #12
    34cc:	add	r3, r5, r6
    34d0:	ldr	r4, [r3, #44]	; 0x2c
    34d4:	cmp	r4, #0
    34d8:	beq	34f4 <coda_type_raw_file_singleton+0x40>
    34dc:	mov	r0, r4
    34e0:	add	sp, sp, #12
    34e4:	ldrd	r4, [sp]
    34e8:	ldrd	r6, [sp, #8]
    34ec:	add	sp, sp, #16
    34f0:	pop	{pc}		; (ldr pc, [sp], #4)
    34f4:	mov	r0, #1
    34f8:	bl	31b0 <coda_type_raw_new>
    34fc:	subs	r7, r0, #0
    3500:	beq	34dc <coda_type_raw_file_singleton+0x28>
    3504:	movw	r0, #0
    3508:	movt	r0, #0
    350c:	add	r1, sp, #4
    3510:	bl	0 <coda_expression_from_string>
    3514:	cmp	r0, #0
    3518:	bne	3550 <coda_type_raw_file_singleton+0x9c>
    351c:	mov	r0, r7
    3520:	ldr	r1, [sp, #4]
    3524:	bl	117c <coda_type_set_byte_size_expression>
    3528:	cmp	r0, #0
    352c:	addeq	r5, r5, r6
    3530:	moveq	r4, r7
    3534:	streq	r7, [r5, #44]	; 0x2c
    3538:	beq	34dc <coda_type_raw_file_singleton+0x28>
    353c:	ldr	r0, [sp, #4]
    3540:	bl	0 <coda_expression_delete>
    3544:	mov	r0, r7
    3548:	bl	9b8 <raw_delete>
    354c:	b	34dc <coda_type_raw_file_singleton+0x28>
    3550:	mov	r0, r7
    3554:	bl	9b8 <raw_delete>
    3558:	b	351c <coda_type_raw_file_singleton+0x68>
    355c:	.word	0x00000000

00003560 <coda_type_no_data_singleton>:
    3560:	cmp	r0, #10
    3564:	strd	r4, [sp, #-28]!	; 0xffffffe4
    3568:	strd	r6, [sp, #8]
    356c:	strd	r8, [sp, #16]
    3570:	str	lr, [sp, #24]
    3574:	sub	sp, sp, #12
    3578:	bhi	366c <coda_type_no_data_singleton+0x10c>
    357c:	ldr	r3, [pc, #260]	; 3688 <coda_type_no_data_singleton+0x128>
    3580:	mrc	15, 0, r4, cr13, cr0, {3}
    3584:	mov	r6, r0
    3588:	add	r4, r4, r3
    358c:	add	r4, r4, r0, lsl #2
    3590:	ldr	r5, [r4, #48]	; 0x30
    3594:	cmp	r5, #0
    3598:	beq	35b8 <coda_type_no_data_singleton+0x58>
    359c:	mov	r0, r5
    35a0:	add	sp, sp, #12
    35a4:	ldrd	r4, [sp]
    35a8:	ldrd	r6, [sp, #8]
    35ac:	ldrd	r8, [sp, #16]
    35b0:	add	sp, sp, #24
    35b4:	pop	{pc}		; (ldr pc, [sp], #4)
    35b8:	mov	r0, #56	; 0x38
    35bc:	bl	0 <malloc>
    35c0:	subs	r7, r0, #0
    35c4:	beq	3644 <coda_type_no_data_singleton+0xe4>
    35c8:	mov	r2, #6
    35cc:	mvn	r3, #0
    35d0:	str	r6, [r7]
    35d4:	mov	r8, #0
    35d8:	mov	r9, #0
    35dc:	str	r5, [r7, #4]
    35e0:	mov	r0, r6
    35e4:	strd	r2, [r7, #8]
    35e8:	str	r5, [r7, #16]
    35ec:	str	r5, [r7, #20]
    35f0:	strd	r8, [r7, #24]
    35f4:	str	r5, [r7, #32]
    35f8:	str	r5, [r7, #36]	; 0x24
    35fc:	str	r5, [r7, #40]	; 0x28
    3600:	str	r5, [r7, #44]	; 0x2c
    3604:	str	r5, [r7, #48]	; 0x30
    3608:	str	r5, [r7, #52]	; 0x34
    360c:	bl	31b0 <coda_type_raw_new>
    3610:	cmp	r0, #0
    3614:	str	r0, [r7, #44]	; 0x2c
    3618:	beq	3638 <coda_type_no_data_singleton+0xd8>
    361c:	mov	r2, r8
    3620:	mov	r3, r9
    3624:	bl	e6c <coda_type_set_bit_size>
    3628:	cmp	r0, #0
    362c:	moveq	r5, r7
    3630:	streq	r7, [r4, #48]	; 0x30
    3634:	beq	359c <coda_type_no_data_singleton+0x3c>
    3638:	mov	r0, r7
    363c:	bl	a4c <special_delete>
    3640:	b	359c <coda_type_no_data_singleton+0x3c>
    3644:	movw	r0, #2245	; 0x8c5
    3648:	movw	r3, #0
    364c:	movt	r3, #0
    3650:	movw	r1, #0
    3654:	movt	r1, #0
    3658:	mov	r2, #56	; 0x38
    365c:	str	r0, [sp]
    3660:	mvn	r0, #0
    3664:	bl	0 <coda_set_error>
    3668:	b	359c <coda_type_no_data_singleton+0x3c>
    366c:	movw	r1, #0
    3670:	movt	r1, #0
    3674:	ldr	r3, [pc, #16]	; 368c <coda_type_no_data_singleton+0x12c>
    3678:	movw	r0, #0
    367c:	movt	r0, #0
    3680:	movw	r2, #2235	; 0x8bb
    3684:	bl	0 <__assert_fail>
    3688:	.word	0x00000000
    368c:	.word	0x000000b0

00003690 <coda_type_vsf_integer_new>:
    3690:	strd	r4, [sp, #-20]!	; 0xffffffec
    3694:	mov	r5, r0
    3698:	mov	r0, #56	; 0x38
    369c:	strd	r6, [sp, #8]
    36a0:	str	lr, [sp, #16]
    36a4:	sub	sp, sp, #12
    36a8:	bl	0 <malloc>
    36ac:	subs	r4, r0, #0
    36b0:	beq	3730 <coda_type_vsf_integer_new+0xa0>
    36b4:	mov	r2, #6
    36b8:	mov	r3, #0
    36bc:	str	r5, [r4]
    36c0:	mov	r1, #9
    36c4:	mvn	r6, #0
    36c8:	mvn	r7, #0
    36cc:	mov	r0, r5
    36d0:	str	r3, [r4, #4]
    36d4:	str	r2, [r4, #8]
    36d8:	mov	r2, #1
    36dc:	str	r1, [r4, #12]
    36e0:	str	r3, [r4, #16]
    36e4:	str	r3, [r4, #20]
    36e8:	strd	r6, [r4, #24]
    36ec:	str	r3, [r4, #32]
    36f0:	str	r3, [r4, #36]	; 0x24
    36f4:	str	r2, [r4, #40]	; 0x28
    36f8:	str	r3, [r4, #44]	; 0x2c
    36fc:	str	r3, [r4, #48]	; 0x30
    3700:	str	r3, [r4, #52]	; 0x34
    3704:	bl	1850 <coda_type_record_new>
    3708:	movw	r1, #0
    370c:	movt	r1, #0
    3710:	str	r0, [r4, #44]	; 0x2c
    3714:	bl	d94 <coda_type_set_description>
    3718:	mov	r0, r4
    371c:	add	sp, sp, #12
    3720:	ldrd	r4, [sp]
    3724:	ldrd	r6, [sp, #8]
    3728:	add	sp, sp, #16
    372c:	pop	{pc}		; (ldr pc, [sp], #4)
    3730:	mov	r0, #2288	; 0x8f0
    3734:	movw	r3, #0
    3738:	movt	r3, #0
    373c:	movw	r1, #0
    3740:	movt	r1, #0
    3744:	mov	r2, #56	; 0x38
    3748:	str	r0, [sp]
    374c:	mvn	r0, #0
    3750:	bl	0 <coda_set_error>
    3754:	b	3718 <coda_type_vsf_integer_new+0x88>

00003758 <coda_type_vsf_integer_set_type>:
    3758:	ldr	r3, [r0]
    375c:	strd	r4, [sp, #-16]!
    3760:	ldr	r2, [r1]
    3764:	str	r6, [sp, #8]
    3768:	str	lr, [sp, #12]
    376c:	cmp	r3, r2
    3770:	bne	37e0 <coda_type_vsf_integer_set_type+0x88>
    3774:	ldr	r3, [r0, #44]	; 0x2c
    3778:	mov	r4, r0
    377c:	ldr	r3, [r3, #48]	; 0x30
    3780:	cmp	r3, #1
    3784:	bne	383c <coda_type_vsf_integer_set_type+0xe4>
    3788:	movw	r0, #0
    378c:	movt	r0, #0
    3790:	mov	r5, r1
    3794:	bl	131c <coda_type_record_field_new>
    3798:	subs	r6, r0, #0
    379c:	beq	3868 <coda_type_vsf_integer_set_type+0x110>
    37a0:	mov	r1, r5
    37a4:	bl	1514 <coda_type_record_field_set_type>
    37a8:	cmp	r0, #0
    37ac:	bne	3858 <coda_type_vsf_integer_set_type+0x100>
    37b0:	mov	r1, r6
    37b4:	ldr	r0, [r4, #44]	; 0x2c
    37b8:	bl	1e64 <coda_type_record_add_field>
    37bc:	cmp	r0, #0
    37c0:	bne	3858 <coda_type_vsf_integer_set_type+0x100>
    37c4:	ldr	r3, [r4, #44]	; 0x2c
    37c8:	ldrd	r2, [r3, #24]
    37cc:	strd	r2, [r4, #24]
    37d0:	ldrd	r4, [sp]
    37d4:	ldr	r6, [sp, #8]
    37d8:	add	sp, sp, #12
    37dc:	pop	{pc}		; (ldr pc, [sp], #4)
    37e0:	cmp	r2, #9
    37e4:	movwhi	r2, #0
    37e8:	movthi	r2, #0
    37ec:	bhi	3800 <coda_type_vsf_integer_set_type+0xa8>
    37f0:	movw	r1, #0
    37f4:	movt	r1, #0
    37f8:	add	r2, r1, r2, lsl #2
    37fc:	ldr	r2, [r2, #84]	; 0x54
    3800:	cmp	r3, #9
    3804:	movwhi	r3, #0
    3808:	movthi	r3, #0
    380c:	bhi	3820 <coda_type_vsf_integer_set_type+0xc8>
    3810:	movw	r1, #0
    3814:	movt	r1, #0
    3818:	add	r3, r1, r3, lsl #2
    381c:	ldr	r3, [r3, #84]	; 0x54
    3820:	movw	r1, #0
    3824:	movt	r1, #0
    3828:	movw	r0, #65136	; 0xfe70
    382c:	movt	r0, #65535	; 0xffff
    3830:	bl	0 <coda_set_error>
    3834:	mvn	r0, #0
    3838:	b	37d0 <coda_type_vsf_integer_set_type+0x78>
    383c:	movw	r1, #0
    3840:	movt	r1, #0
    3844:	movw	r0, #65136	; 0xfe70
    3848:	movt	r0, #65535	; 0xffff
    384c:	bl	0 <coda_set_error>
    3850:	mvn	r0, #0
    3854:	b	37d0 <coda_type_vsf_integer_set_type+0x78>
    3858:	mov	r0, r6
    385c:	bl	5a4 <coda_type_record_field_delete>
    3860:	mvn	r0, #0
    3864:	b	37d0 <coda_type_vsf_integer_set_type+0x78>
    3868:	mvn	r0, #0
    386c:	b	37d0 <coda_type_vsf_integer_set_type+0x78>

00003870 <coda_type_vsf_integer_set_unit>:
    3870:	cmp	r1, #0
    3874:	strd	r4, [sp, #-16]!
    3878:	str	r6, [sp, #8]
    387c:	str	lr, [sp, #12]
    3880:	beq	38d8 <coda_type_vsf_integer_set_unit+0x68>
    3884:	ldr	r4, [r0, #48]	; 0x30
    3888:	mov	r5, r0
    388c:	cmp	r4, #0
    3890:	bne	38bc <coda_type_vsf_integer_set_unit+0x4c>
    3894:	mov	r0, r1
    3898:	bl	0 <strdup>
    389c:	cmp	r0, #0
    38a0:	str	r0, [r5, #48]	; 0x30
    38a4:	movne	r0, r4
    38a8:	beq	38fc <coda_type_vsf_integer_set_unit+0x8c>
    38ac:	ldrd	r4, [sp]
    38b0:	ldr	r6, [sp, #8]
    38b4:	add	sp, sp, #12
    38b8:	pop	{pc}		; (ldr pc, [sp], #4)
    38bc:	movw	r1, #0
    38c0:	movt	r1, #0
    38c4:	movw	r0, #65136	; 0xfe70
    38c8:	movt	r0, #65535	; 0xffff
    38cc:	bl	0 <coda_set_error>
    38d0:	mvn	r0, #0
    38d4:	b	38ac <coda_type_vsf_integer_set_unit+0x3c>
    38d8:	mvn	r0, #99	; 0x63
    38dc:	movw	r2, #0
    38e0:	movt	r2, #0
    38e4:	movw	r1, #0
    38e8:	movt	r1, #0
    38ec:	movw	r3, #2412	; 0x96c
    38f0:	bl	0 <coda_set_error>
    38f4:	mvn	r0, #0
    38f8:	b	38ac <coda_type_vsf_integer_set_unit+0x3c>
    38fc:	mvn	r0, #0
    3900:	movw	r2, #0
    3904:	movt	r2, #0
    3908:	movw	r1, #0
    390c:	movt	r1, #0
    3910:	movw	r3, #2424	; 0x978
    3914:	bl	0 <coda_set_error>
    3918:	mvn	r0, #0
    391c:	b	38ac <coda_type_vsf_integer_set_unit+0x3c>

00003920 <coda_type_vsf_integer_validate>:
    3920:	ldr	r3, [r0, #44]	; 0x2c
    3924:	ldr	r3, [r3, #48]	; 0x30
    3928:	cmp	r3, #2
    392c:	bne	3938 <coda_type_vsf_integer_validate+0x18>
    3930:	mov	r0, #0
    3934:	bx	lr
    3938:	movw	r1, #0
    393c:	movt	r1, #0
    3940:	str	r4, [sp, #-8]!
    3944:	movw	r0, #65136	; 0xfe70
    3948:	movt	r0, #65535	; 0xffff
    394c:	str	lr, [sp, #4]
    3950:	bl	0 <coda_set_error>
    3954:	ldr	r4, [sp]
    3958:	add	sp, sp, #4
    395c:	mvn	r0, #0
    3960:	pop	{pc}		; (ldr pc, [sp], #4)

00003964 <coda_type_time_new>:
    3964:	strd	r4, [sp, #-20]!	; 0xffffffec
    3968:	subs	r5, r1, #0
    396c:	strd	r6, [sp, #8]
    3970:	str	lr, [sp, #16]
    3974:	sub	sp, sp, #12
    3978:	beq	3a04 <coda_type_time_new+0xa0>
    397c:	mov	r6, r0
    3980:	mov	r0, #56	; 0x38
    3984:	bl	0 <malloc>
    3988:	subs	r4, r0, #0
    398c:	beq	3a28 <coda_type_time_new+0xc4>
    3990:	mov	r3, #0
    3994:	mov	r0, #6
    3998:	str	r6, [r4]
    399c:	mov	r1, #9
    39a0:	mov	r2, #2
    39a4:	mvn	r7, #0
    39a8:	mvn	r6, #0
    39ac:	str	r3, [r4, #4]
    39b0:	strd	r0, [r4, #8]
    39b4:	movw	r0, #0
    39b8:	movt	r0, #0
    39bc:	str	r3, [r4, #16]
    39c0:	str	r3, [r4, #20]
    39c4:	strd	r6, [r4, #24]
    39c8:	str	r3, [r4, #32]
    39cc:	str	r3, [r4, #36]	; 0x24
    39d0:	strd	r2, [r4, #40]	; 0x28
    39d4:	str	r5, [r4, #52]	; 0x34
    39d8:	bl	0 <strdup>
    39dc:	cmp	r0, #0
    39e0:	mov	r5, r0
    39e4:	str	r0, [r4, #48]	; 0x30
    39e8:	beq	3a50 <coda_type_time_new+0xec>
    39ec:	mov	r0, r4
    39f0:	add	sp, sp, #12
    39f4:	ldrd	r4, [sp]
    39f8:	ldrd	r6, [sp, #8]
    39fc:	add	sp, sp, #16
    3a00:	pop	{pc}		; (ldr pc, [sp], #4)
    3a04:	movw	r2, #0
    3a08:	movt	r2, #0
    3a0c:	movw	r1, #0
    3a10:	movt	r1, #0
    3a14:	movw	r3, #2447	; 0x98f
    3a18:	mvn	r0, #99	; 0x63
    3a1c:	mov	r4, r5
    3a20:	bl	0 <coda_set_error>
    3a24:	b	39ec <coda_type_time_new+0x88>
    3a28:	movw	r0, #2455	; 0x997
    3a2c:	movw	r3, #0
    3a30:	movt	r3, #0
    3a34:	movw	r1, #0
    3a38:	movt	r1, #0
    3a3c:	mov	r2, #56	; 0x38
    3a40:	str	r0, [sp]
    3a44:	mvn	r0, #0
    3a48:	bl	0 <coda_set_error>
    3a4c:	b	39ec <coda_type_time_new+0x88>
    3a50:	movw	r3, #2476	; 0x9ac
    3a54:	mvn	r0, #0
    3a58:	movw	r2, #0
    3a5c:	movt	r2, #0
    3a60:	movw	r1, #0
    3a64:	movt	r1, #0
    3a68:	bl	0 <coda_set_error>
    3a6c:	mov	r0, r4
    3a70:	mov	r4, r5
    3a74:	bl	a4c <special_delete>
    3a78:	b	39ec <coda_type_time_new+0x88>

00003a7c <coda_type_time_add_ascii_float_mapping>:
    3a7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    3a80:	strd	r6, [sp, #8]
    3a84:	subs	r7, r0, #0
    3a88:	str	r8, [sp, #16]
    3a8c:	str	lr, [sp, #20]
    3a90:	sub	sp, sp, #72	; 0x48
    3a94:	beq	3ce4 <coda_type_time_add_ascii_float_mapping+0x268>
    3a98:	cmp	r1, #0
    3a9c:	mov	r5, r1
    3aa0:	beq	3cc0 <coda_type_time_add_ascii_float_mapping+0x244>
    3aa4:	ldr	r3, [r7, #40]	; 0x28
    3aa8:	cmp	r3, #2
    3aac:	bne	3c84 <coda_type_time_add_ascii_float_mapping+0x208>
    3ab0:	ldr	r3, [r7, #44]	; 0x2c
    3ab4:	cmp	r3, #0
    3ab8:	beq	3d08 <coda_type_time_add_ascii_float_mapping+0x28c>
    3abc:	ldr	r3, [r3, #8]
    3ac0:	cmp	r3, #4
    3ac4:	bne	3c4c <coda_type_time_add_ascii_float_mapping+0x1d0>
    3ac8:	movw	r1, #0
    3acc:	movt	r1, #0
    3ad0:	ldr	r2, [r5]
    3ad4:	add	r0, sp, #8
    3ad8:	mov	r4, #0
    3adc:	bl	0 <sprintf>
    3ae0:	add	r0, sp, #8
    3ae4:	bl	0 <strdup>
    3ae8:	mov	r1, r0
    3aec:	mov	r3, r4
    3af0:	str	r4, [sp]
    3af4:	mov	r2, r4
    3af8:	mov	r0, #20
    3afc:	str	r4, [sp, #4]
    3b00:	bl	0 <coda_expression_new>
    3b04:	ldr	r6, [r5]
    3b08:	mov	r8, r0
    3b0c:	cmp	r6, r4
    3b10:	beq	3c10 <coda_type_time_add_ascii_float_mapping+0x194>
    3b14:	mov	r3, r4
    3b18:	mov	r2, r4
    3b1c:	str	r4, [sp]
    3b20:	mov	r1, r4
    3b24:	mov	r0, #36	; 0x24
    3b28:	str	r4, [sp, #4]
    3b2c:	bl	0 <coda_expression_new>
    3b30:	mov	r2, r0
    3b34:	mov	r3, r8
    3b38:	str	r4, [sp]
    3b3c:	mov	r1, r4
    3b40:	mov	r0, #75	; 0x4b
    3b44:	str	r4, [sp, #4]
    3b48:	bl	0 <coda_expression_new>
    3b4c:	mov	r6, r0
    3b50:	ldr	r0, [r5, #4]
    3b54:	bl	0 <strdup>
    3b58:	mov	r3, r4
    3b5c:	mov	r1, r0
    3b60:	mov	r2, r4
    3b64:	mov	r0, #22
    3b68:	stm	sp, {r3, r4}
    3b6c:	bl	0 <coda_expression_new>
    3b70:	mov	r8, r0
    3b74:	mov	r4, #0
    3b78:	mov	r2, r6
    3b7c:	mov	r3, r8
    3b80:	mov	r1, r4
    3b84:	mov	r0, #25
    3b88:	str	r4, [sp]
    3b8c:	str	r4, [sp, #4]
    3b90:	bl	0 <coda_expression_new>
    3b94:	mov	r6, r0
    3b98:	add	r0, sp, #8
    3b9c:	vldr	d0, [r5, #8]
    3ba0:	bl	0 <coda_strfl>
    3ba4:	add	r0, sp, #8
    3ba8:	bl	0 <strdup>
    3bac:	mov	r1, r0
    3bb0:	mov	r3, r4
    3bb4:	str	r4, [sp]
    3bb8:	mov	r2, r4
    3bbc:	mov	r0, #19
    3bc0:	str	r4, [sp, #4]
    3bc4:	bl	0 <coda_expression_new>
    3bc8:	str	r4, [sp, #4]
    3bcc:	mov	r3, r0
    3bd0:	mov	r2, r6
    3bd4:	ldr	ip, [r7, #52]	; 0x34
    3bd8:	mov	r1, r4
    3bdc:	mov	r0, #42	; 0x2a
    3be0:	str	ip, [sp]
    3be4:	bl	0 <coda_expression_new>
    3be8:	str	r0, [r7, #52]	; 0x34
    3bec:	mov	r0, r5
    3bf0:	bl	0 <mapping_delete>
    3bf4:	mov	r0, r4
    3bf8:	add	sp, sp, #72	; 0x48
    3bfc:	ldrd	r4, [sp]
    3c00:	ldrd	r6, [sp, #8]
    3c04:	ldr	r8, [sp, #16]
    3c08:	add	sp, sp, #20
    3c0c:	pop	{pc}		; (ldr pc, [sp], #4)
    3c10:	mov	r3, r6
    3c14:	mov	r2, r6
    3c18:	str	r6, [sp]
    3c1c:	mov	r1, r6
    3c20:	mov	r0, #36	; 0x24
    3c24:	str	r6, [sp, #4]
    3c28:	bl	0 <coda_expression_new>
    3c2c:	mov	r3, r6
    3c30:	mov	r2, r0
    3c34:	mov	r1, r6
    3c38:	mov	r0, #50	; 0x32
    3c3c:	stm	sp, {r3, r6}
    3c40:	bl	0 <coda_expression_new>
    3c44:	mov	r6, r0
    3c48:	b	3b74 <coda_type_time_add_ascii_float_mapping+0xf8>
    3c4c:	cmp	r3, #6
    3c50:	movwhi	r2, #0
    3c54:	movthi	r2, #0
    3c58:	bhi	3c68 <coda_type_time_add_ascii_float_mapping+0x1ec>
    3c5c:	movw	r2, #0
    3c60:	movt	r2, #0
    3c64:	ldr	r2, [r2, r3, lsl #2]
    3c68:	movw	r1, #0
    3c6c:	movt	r1, #0
    3c70:	movw	r0, #65136	; 0xfe70
    3c74:	movt	r0, #65535	; 0xffff
    3c78:	bl	0 <coda_set_error>
    3c7c:	mvn	r0, #0
    3c80:	b	3bf8 <coda_type_time_add_ascii_float_mapping+0x17c>
    3c84:	cmp	r3, #3
    3c88:	movwhi	r2, #0
    3c8c:	movthi	r2, #0
    3c90:	bhi	3ca4 <coda_type_time_add_ascii_float_mapping+0x228>
    3c94:	movw	r2, #0
    3c98:	movt	r2, #0
    3c9c:	add	r3, r2, r3, lsl #2
    3ca0:	ldr	r2, [r3, #204]	; 0xcc
    3ca4:	movw	r1, #0
    3ca8:	movt	r1, #0
    3cac:	movw	r0, #65136	; 0xfe70
    3cb0:	movt	r0, #65535	; 0xffff
    3cb4:	bl	0 <coda_set_error>
    3cb8:	mvn	r0, #0
    3cbc:	b	3bf8 <coda_type_time_add_ascii_float_mapping+0x17c>
    3cc0:	mvn	r0, #99	; 0x63
    3cc4:	movw	r2, #0
    3cc8:	movt	r2, #0
    3ccc:	movw	r1, #0
    3cd0:	movt	r1, #0
    3cd4:	movw	r3, #2498	; 0x9c2
    3cd8:	bl	0 <coda_set_error>
    3cdc:	mvn	r0, #0
    3ce0:	b	3bf8 <coda_type_time_add_ascii_float_mapping+0x17c>
    3ce4:	mvn	r0, #99	; 0x63
    3ce8:	movw	r2, #0
    3cec:	movt	r2, #0
    3cf0:	movw	r1, #0
    3cf4:	movt	r1, #0
    3cf8:	movw	r3, #2493	; 0x9bd
    3cfc:	bl	0 <coda_set_error>
    3d00:	mvn	r0, #0
    3d04:	b	3bf8 <coda_type_time_add_ascii_float_mapping+0x17c>
    3d08:	movw	r1, #0
    3d0c:	movt	r1, #0
    3d10:	movw	r0, #65136	; 0xfe70
    3d14:	movt	r0, #65535	; 0xffff
    3d18:	bl	0 <coda_set_error>
    3d1c:	mvn	r0, #0
    3d20:	b	3bf8 <coda_type_time_add_ascii_float_mapping+0x17c>

00003d24 <coda_type_time_set_base_type>:
    3d24:	subs	r3, r0, #0
    3d28:	strd	r4, [sp, #-16]!
    3d2c:	str	r6, [sp, #8]
    3d30:	str	lr, [sp, #12]
    3d34:	beq	3dfc <coda_type_time_set_base_type+0xd8>
    3d38:	cmp	r1, #0
    3d3c:	beq	3dd8 <coda_type_time_set_base_type+0xb4>
    3d40:	ldr	r2, [r3, #40]	; 0x28
    3d44:	cmp	r2, #2
    3d48:	bne	3d80 <coda_type_time_set_base_type+0x5c>
    3d4c:	ldr	r0, [r3, #44]	; 0x2c
    3d50:	cmp	r0, #0
    3d54:	bne	3dbc <coda_type_time_set_base_type+0x98>
    3d58:	ldr	r2, [r1, #4]
    3d5c:	ldrd	r4, [r1, #24]
    3d60:	str	r1, [r3, #44]	; 0x2c
    3d64:	add	r2, r2, #1
    3d68:	str	r2, [r1, #4]
    3d6c:	strd	r4, [r3, #24]
    3d70:	ldrd	r4, [sp]
    3d74:	ldr	r6, [sp, #8]
    3d78:	add	sp, sp, #12
    3d7c:	pop	{pc}		; (ldr pc, [sp], #4)
    3d80:	cmp	r2, #3
    3d84:	movwhi	r2, #0
    3d88:	movthi	r2, #0
    3d8c:	bhi	3da0 <coda_type_time_set_base_type+0x7c>
    3d90:	movw	r3, #0
    3d94:	movt	r3, #0
    3d98:	add	r3, r3, r2, lsl #2
    3d9c:	ldr	r2, [r3, #204]	; 0xcc
    3da0:	movw	r1, #0
    3da4:	movt	r1, #0
    3da8:	movw	r0, #65136	; 0xfe70
    3dac:	movt	r0, #65535	; 0xffff
    3db0:	bl	0 <coda_set_error>
    3db4:	mvn	r0, #0
    3db8:	b	3d70 <coda_type_time_set_base_type+0x4c>
    3dbc:	movw	r1, #0
    3dc0:	movt	r1, #0
    3dc4:	movw	r0, #65136	; 0xfe70
    3dc8:	movt	r0, #65535	; 0xffff
    3dcc:	bl	0 <coda_set_error>
    3dd0:	mvn	r0, #0
    3dd4:	b	3d70 <coda_type_time_set_base_type+0x4c>
    3dd8:	mvn	r0, #99	; 0x63
    3ddc:	movw	r2, #0
    3de0:	movt	r2, #0
    3de4:	movw	r1, #0
    3de8:	movt	r1, #0
    3dec:	movw	r3, #2553	; 0x9f9
    3df0:	bl	0 <coda_set_error>
    3df4:	mvn	r0, #0
    3df8:	b	3d70 <coda_type_time_set_base_type+0x4c>
    3dfc:	mvn	r0, #99	; 0x63
    3e00:	movw	r2, #0
    3e04:	movt	r2, #0
    3e08:	movw	r1, #0
    3e0c:	movt	r1, #0
    3e10:	movw	r3, #2548	; 0x9f4
    3e14:	bl	0 <coda_set_error>
    3e18:	mvn	r0, #0
    3e1c:	b	3d70 <coda_type_time_set_base_type+0x4c>

00003e20 <coda_type_time_validate>:
    3e20:	ldr	r3, [r0, #44]	; 0x2c
    3e24:	cmp	r3, #0
    3e28:	beq	3e34 <coda_type_time_validate+0x14>
    3e2c:	mov	r0, #0
    3e30:	bx	lr
    3e34:	movw	r1, #0
    3e38:	movt	r1, #0
    3e3c:	str	r4, [sp, #-8]!
    3e40:	movw	r0, #65136	; 0xfe70
    3e44:	movt	r0, #65535	; 0xffff
    3e48:	str	lr, [sp, #4]
    3e4c:	bl	0 <coda_set_error>
    3e50:	ldr	r4, [sp]
    3e54:	add	sp, sp, #4
    3e58:	mvn	r0, #0
    3e5c:	pop	{pc}		; (ldr pc, [sp], #4)

00003e60 <coda_type_complex_new>:
    3e60:	strd	r4, [sp, #-12]!
    3e64:	mov	r5, r0
    3e68:	mov	r0, #56	; 0x38
    3e6c:	str	lr, [sp, #8]
    3e70:	sub	sp, sp, #12
    3e74:	bl	0 <malloc>
    3e78:	subs	r4, r0, #0
    3e7c:	beq	3ed8 <coda_type_complex_new+0x78>
    3e80:	mov	r3, #0
    3e84:	mov	lr, #6
    3e88:	str	r5, [r4]
    3e8c:	mvn	ip, #0
    3e90:	mov	r2, #3
    3e94:	mvn	r0, #0
    3e98:	mvn	r1, #0
    3e9c:	stmib	r4, {r3, lr}
    3ea0:	str	ip, [r4, #12]
    3ea4:	str	r3, [r4, #16]
    3ea8:	str	r3, [r4, #20]
    3eac:	strd	r0, [r4, #24]
    3eb0:	str	r3, [r4, #32]
    3eb4:	str	r3, [r4, #36]	; 0x24
    3eb8:	strd	r2, [r4, #40]	; 0x28
    3ebc:	str	r3, [r4, #48]	; 0x30
    3ec0:	str	r3, [r4, #52]	; 0x34
    3ec4:	mov	r0, r4
    3ec8:	add	sp, sp, #12
    3ecc:	ldrd	r4, [sp]
    3ed0:	add	sp, sp, #8
    3ed4:	pop	{pc}		; (ldr pc, [sp], #4)
    3ed8:	movw	r0, #2595	; 0xa23
    3edc:	movw	r3, #0
    3ee0:	movt	r3, #0
    3ee4:	movw	r1, #0
    3ee8:	movt	r1, #0
    3eec:	mov	r2, #56	; 0x38
    3ef0:	str	r0, [sp]
    3ef4:	mvn	r0, #0
    3ef8:	bl	0 <coda_set_error>
    3efc:	b	3ec4 <coda_type_complex_new+0x64>

00003f00 <coda_type_complex_set_type>:
    3f00:	strd	r4, [sp, #-24]!	; 0xffffffe8
    3f04:	ldr	r5, [r0, #44]	; 0x2c
    3f08:	strd	r6, [sp, #8]
    3f0c:	str	r8, [sp, #16]
    3f10:	str	lr, [sp, #20]
    3f14:	cmp	r5, #0
    3f18:	bne	4050 <coda_type_complex_set_type+0x150>
    3f1c:	ldr	r3, [r1, #8]
    3f20:	mov	r4, r0
    3f24:	mov	r6, r1
    3f28:	sub	r3, r3, #2
    3f2c:	cmp	r3, #1
    3f30:	bhi	4014 <coda_type_complex_set_type+0x114>
    3f34:	ldr	r0, [r0]
    3f38:	ldr	r3, [r1]
    3f3c:	cmp	r0, r3
    3f40:	bne	3fb8 <coda_type_complex_set_type+0xb8>
    3f44:	bl	1850 <coda_type_record_new>
    3f48:	str	r0, [r4, #44]	; 0x2c
    3f4c:	movw	r0, #0
    3f50:	movt	r0, #0
    3f54:	bl	131c <coda_type_record_field_new>
    3f58:	mov	r7, r0
    3f5c:	mov	r1, r6
    3f60:	bl	1514 <coda_type_record_field_set_type>
    3f64:	mov	r1, r7
    3f68:	ldr	r0, [r4, #44]	; 0x2c
    3f6c:	bl	1e64 <coda_type_record_add_field>
    3f70:	movw	r0, #0
    3f74:	movt	r0, #0
    3f78:	bl	131c <coda_type_record_field_new>
    3f7c:	mov	r7, r0
    3f80:	mov	r1, r6
    3f84:	bl	1514 <coda_type_record_field_set_type>
    3f88:	mov	r1, r7
    3f8c:	ldr	r0, [r4, #44]	; 0x2c
    3f90:	bl	1e64 <coda_type_record_add_field>
    3f94:	ldr	r3, [r4, #44]	; 0x2c
    3f98:	mov	r0, r5
    3f9c:	ldrd	r2, [r3, #24]
    3fa0:	strd	r2, [r4, #24]
    3fa4:	ldrd	r4, [sp]
    3fa8:	ldrd	r6, [sp, #8]
    3fac:	ldr	r8, [sp, #16]
    3fb0:	add	sp, sp, #20
    3fb4:	pop	{pc}		; (ldr pc, [sp], #4)
    3fb8:	cmp	r3, #9
    3fbc:	movwhi	r2, #0
    3fc0:	movthi	r2, #0
    3fc4:	bhi	3fd8 <coda_type_complex_set_type+0xd8>
    3fc8:	movw	r2, #0
    3fcc:	movt	r2, #0
    3fd0:	add	r3, r2, r3, lsl #2
    3fd4:	ldr	r2, [r3, #84]	; 0x54
    3fd8:	cmp	r0, #9
    3fdc:	movwhi	r3, #0
    3fe0:	movthi	r3, #0
    3fe4:	bhi	3ff8 <coda_type_complex_set_type+0xf8>
    3fe8:	movw	r3, #0
    3fec:	movt	r3, #0
    3ff0:	add	r0, r3, r0, lsl #2
    3ff4:	ldr	r3, [r0, #84]	; 0x54
    3ff8:	movw	r1, #0
    3ffc:	movt	r1, #0
    4000:	movw	r0, #65136	; 0xfe70
    4004:	movt	r0, #65535	; 0xffff
    4008:	bl	0 <coda_set_error>
    400c:	mvn	r0, #0
    4010:	b	3fa4 <coda_type_complex_set_type+0xa4>
    4014:	ldr	r3, [r0, #8]
    4018:	cmp	r3, #6
    401c:	movwhi	r2, #0
    4020:	movthi	r2, #0
    4024:	bhi	4034 <coda_type_complex_set_type+0x134>
    4028:	movw	r2, #0
    402c:	movt	r2, #0
    4030:	ldr	r2, [r2, r3, lsl #2]
    4034:	movw	r1, #0
    4038:	movt	r1, #0
    403c:	movw	r0, #65136	; 0xfe70
    4040:	movt	r0, #65535	; 0xffff
    4044:	bl	0 <coda_set_error>
    4048:	mvn	r0, #0
    404c:	b	3fa4 <coda_type_complex_set_type+0xa4>
    4050:	movw	r1, #0
    4054:	movt	r1, #0
    4058:	movw	r0, #65136	; 0xfe70
    405c:	movt	r0, #65535	; 0xffff
    4060:	bl	0 <coda_set_error>
    4064:	mvn	r0, #0
    4068:	b	3fa4 <coda_type_complex_set_type+0xa4>

0000406c <coda_type_complex_validate>:
    406c:	ldr	r3, [r0, #44]	; 0x2c
    4070:	cmp	r3, #0
    4074:	beq	4080 <coda_type_complex_validate+0x14>
    4078:	mov	r0, #0
    407c:	bx	lr
    4080:	movw	r1, #0
    4084:	movt	r1, #0
    4088:	str	r4, [sp, #-8]!
    408c:	movw	r0, #65136	; 0xfe70
    4090:	movt	r0, #65535	; 0xffff
    4094:	str	lr, [sp, #4]
    4098:	bl	0 <coda_set_error>
    409c:	ldr	r4, [sp]
    40a0:	add	sp, sp, #4
    40a4:	mvn	r0, #0
    40a8:	pop	{pc}		; (ldr pc, [sp], #4)

000040ac <coda_type_done>:
    40ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
    40b0:	ldr	r5, [pc, #156]	; 4154 <coda_type_done+0xa8>
    40b4:	strd	r6, [sp, #8]
    40b8:	mov	r7, #0
    40bc:	str	r8, [sp, #16]
    40c0:	mrc	15, 0, r8, cr13, cr0, {3}
    40c4:	str	lr, [sp, #20]
    40c8:	add	r4, r5, r8
    40cc:	add	r6, r4, #44	; 0x2c
    40d0:	ldr	r3, [r4], #4
    40d4:	subs	r0, r3, #0
    40d8:	beq	40f4 <coda_type_done+0x48>
    40dc:	ldr	r2, [r3, #4]
    40e0:	sub	r1, r2, #1
    40e4:	cmp	r2, #0
    40e8:	strgt	r1, [r3, #4]
    40ec:	bgt	40f4 <coda_type_done+0x48>
    40f0:	bl	72c <coda_type_release.part.2>
    40f4:	cmp	r4, r6
    40f8:	str	r7, [r4, #-4]
    40fc:	bne	40d0 <coda_type_done+0x24>
    4100:	add	r5, r5, r8
    4104:	mov	r6, #0
    4108:	add	r4, r5, #48	; 0x30
    410c:	add	r5, r5, #92	; 0x5c
    4110:	ldr	r3, [r4], #4
    4114:	subs	r0, r3, #0
    4118:	beq	4134 <coda_type_done+0x88>
    411c:	ldr	r2, [r3, #4]
    4120:	sub	r1, r2, #1
    4124:	cmp	r2, #0
    4128:	strgt	r1, [r3, #4]
    412c:	bgt	4134 <coda_type_done+0x88>
    4130:	bl	72c <coda_type_release.part.2>
    4134:	cmp	r4, r5
    4138:	str	r6, [r4, #-4]
    413c:	bne	4110 <coda_type_done+0x64>
    4140:	ldrd	r4, [sp]
    4144:	ldrd	r6, [sp, #8]
    4148:	ldr	r8, [sp, #16]
    414c:	add	sp, sp, #20
    4150:	pop	{pc}		; (ldr pc, [sp], #4)
    4154:	.word	0x00000000

00004158 <coda_type_get_format_name>:
    4158:	cmp	r0, #9
    415c:	bhi	4174 <coda_type_get_format_name+0x1c>
    4160:	movw	r3, #0
    4164:	movt	r3, #0
    4168:	add	r3, r3, r0, lsl #2
    416c:	ldr	r0, [r3, #84]	; 0x54
    4170:	bx	lr
    4174:	movw	r0, #0
    4178:	movt	r0, #0
    417c:	bx	lr

00004180 <coda_type_get_class_name>:
    4180:	cmp	r0, #6
    4184:	bhi	4198 <coda_type_get_class_name+0x18>
    4188:	movw	r3, #0
    418c:	movt	r3, #0
    4190:	ldr	r0, [r3, r0, lsl #2]
    4194:	bx	lr
    4198:	movw	r0, #0
    419c:	movt	r0, #0
    41a0:	bx	lr

000041a4 <coda_type_get_native_type_name>:
    41a4:	add	r0, r0, #1
    41a8:	cmp	r0, #13
    41ac:	bhi	41c4 <coda_type_get_native_type_name+0x20>
    41b0:	movw	r3, #0
    41b4:	movt	r3, #0
    41b8:	add	r3, r3, r0, lsl #2
    41bc:	ldr	r0, [r3, #28]
    41c0:	bx	lr
    41c4:	movw	r0, #0
    41c8:	movt	r0, #0
    41cc:	bx	lr

000041d0 <coda_type_get_special_type_name>:
    41d0:	cmp	r0, #3
    41d4:	bhi	41ec <coda_type_get_special_type_name+0x1c>
    41d8:	movw	r3, #0
    41dc:	movt	r3, #0
    41e0:	add	r3, r3, r0, lsl #2
    41e4:	ldr	r0, [r3, #204]	; 0xcc
    41e8:	bx	lr
    41ec:	movw	r0, #0
    41f0:	movt	r0, #0
    41f4:	bx	lr

000041f8 <coda_type_has_attributes>:
    41f8:	cmp	r0, #0
    41fc:	str	r4, [sp, #-8]!
    4200:	str	lr, [sp, #4]
    4204:	beq	4230 <coda_type_has_attributes+0x38>
    4208:	cmp	r1, #0
    420c:	beq	4254 <coda_type_has_attributes+0x5c>
    4210:	ldr	r3, [r0, #36]	; 0x24
    4214:	mov	r0, #0
    4218:	subs	r3, r3, r0
    421c:	movne	r3, #1
    4220:	str	r3, [r1]
    4224:	ldr	r4, [sp]
    4228:	add	sp, sp, #4
    422c:	pop	{pc}		; (ldr pc, [sp], #4)
    4230:	mvn	r0, #99	; 0x63
    4234:	movw	r2, #0
    4238:	movt	r2, #0
    423c:	movw	r1, #0
    4240:	movt	r1, #0
    4244:	movw	r3, #2829	; 0xb0d
    4248:	bl	0 <coda_set_error>
    424c:	mvn	r0, #0
    4250:	b	4224 <coda_type_has_attributes+0x2c>
    4254:	mvn	r0, #99	; 0x63
    4258:	movw	r2, #0
    425c:	movt	r2, #0
    4260:	movw	r1, #0
    4264:	movt	r1, #0
    4268:	movw	r3, #2834	; 0xb12
    426c:	bl	0 <coda_set_error>
    4270:	mvn	r0, #0
    4274:	b	4224 <coda_type_has_attributes+0x2c>

00004278 <coda_type_get_format>:
    4278:	cmp	r0, #0
    427c:	str	r4, [sp, #-8]!
    4280:	str	lr, [sp, #4]
    4284:	beq	42a8 <coda_type_get_format+0x30>
    4288:	cmp	r1, #0
    428c:	beq	42cc <coda_type_get_format+0x54>
    4290:	ldr	r3, [r0]
    4294:	mov	r0, #0
    4298:	str	r3, [r1]
    429c:	ldr	r4, [sp]
    42a0:	add	sp, sp, #4
    42a4:	pop	{pc}		; (ldr pc, [sp], #4)
    42a8:	mvn	r0, #99	; 0x63
    42ac:	movw	r2, #0
    42b0:	movt	r2, #0
    42b4:	movw	r1, #0
    42b8:	movt	r1, #0
    42bc:	movw	r3, #2853	; 0xb25
    42c0:	bl	0 <coda_set_error>
    42c4:	mvn	r0, #0
    42c8:	b	429c <coda_type_get_format+0x24>
    42cc:	mvn	r0, #99	; 0x63
    42d0:	movw	r2, #0
    42d4:	movt	r2, #0
    42d8:	movw	r1, #0
    42dc:	movt	r1, #0
    42e0:	movw	r3, #2858	; 0xb2a
    42e4:	bl	0 <coda_set_error>
    42e8:	mvn	r0, #0
    42ec:	b	429c <coda_type_get_format+0x24>

000042f0 <coda_type_get_class>:
    42f0:	cmp	r0, #0
    42f4:	str	r4, [sp, #-8]!
    42f8:	str	lr, [sp, #4]
    42fc:	beq	4320 <coda_type_get_class+0x30>
    4300:	cmp	r1, #0
    4304:	beq	4344 <coda_type_get_class+0x54>
    4308:	ldr	r3, [r0, #8]
    430c:	mov	r0, #0
    4310:	str	r3, [r1]
    4314:	ldr	r4, [sp]
    4318:	add	sp, sp, #4
    431c:	pop	{pc}		; (ldr pc, [sp], #4)
    4320:	mvn	r0, #99	; 0x63
    4324:	movw	r2, #0
    4328:	movt	r2, #0
    432c:	movw	r1, #0
    4330:	movt	r1, #0
    4334:	movw	r3, #2877	; 0xb3d
    4338:	bl	0 <coda_set_error>
    433c:	mvn	r0, #0
    4340:	b	4314 <coda_type_get_class+0x24>
    4344:	mvn	r0, #99	; 0x63
    4348:	movw	r2, #0
    434c:	movt	r2, #0
    4350:	movw	r1, #0
    4354:	movt	r1, #0
    4358:	movw	r3, #2882	; 0xb42
    435c:	bl	0 <coda_set_error>
    4360:	mvn	r0, #0
    4364:	b	4314 <coda_type_get_class+0x24>

00004368 <coda_type_get_read_type>:
    4368:	cmp	r0, #0
    436c:	str	r4, [sp, #-8]!
    4370:	str	lr, [sp, #4]
    4374:	beq	43e4 <coda_type_get_read_type+0x7c>
    4378:	cmp	r1, #0
    437c:	beq	4408 <coda_type_get_read_type+0xa0>
    4380:	ldr	r3, [r0, #8]
    4384:	sub	r3, r3, #2
    4388:	cmp	r3, #1
    438c:	bls	43a8 <coda_type_get_read_type+0x40>
    4390:	ldr	r3, [r0, #12]
    4394:	mov	r0, #0
    4398:	str	r3, [r1]
    439c:	ldr	r4, [sp]
    43a0:	add	sp, sp, #4
    43a4:	pop	{pc}		; (ldr pc, [sp], #4)
    43a8:	ldr	r3, [pc, #124]	; 442c <coda_type_get_read_type+0xc4>
    43ac:	mrc	15, 0, r2, cr13, cr0, {3}
    43b0:	ldr	r3, [pc, r3]
    43b4:	ldr	r3, [r2, r3]
    43b8:	cmp	r3, #0
    43bc:	beq	4390 <coda_type_get_read_type+0x28>
    43c0:	ldr	r3, [r0, #48]	; 0x30
    43c4:	cmp	r3, #0
    43c8:	beq	4390 <coda_type_get_read_type+0x28>
    43cc:	mov	r3, #9
    43d0:	ldr	r4, [sp]
    43d4:	add	sp, sp, #4
    43d8:	mov	r0, #0
    43dc:	str	r3, [r1]
    43e0:	pop	{pc}		; (ldr pc, [sp], #4)
    43e4:	mvn	r0, #99	; 0x63
    43e8:	movw	r2, #0
    43ec:	movt	r2, #0
    43f0:	movw	r1, #0
    43f4:	movt	r1, #0
    43f8:	movw	r3, #2908	; 0xb5c
    43fc:	bl	0 <coda_set_error>
    4400:	mvn	r0, #0
    4404:	b	439c <coda_type_get_read_type+0x34>
    4408:	mvn	r0, #99	; 0x63
    440c:	movw	r2, #0
    4410:	movt	r2, #0
    4414:	movw	r1, #0
    4418:	movt	r1, #0
    441c:	movw	r3, #2913	; 0xb61
    4420:	bl	0 <coda_set_error>
    4424:	mvn	r0, #0
    4428:	b	439c <coda_type_get_read_type+0x34>
    442c:	.word	0x00000074

00004430 <coda_type_vsf_integer_set_scale_factor>:
    4430:	ldr	r3, [r0]
    4434:	strd	r4, [sp, #-16]!
    4438:	ldr	r2, [r1]
    443c:	str	r6, [sp, #8]
    4440:	str	lr, [sp, #12]
    4444:	sub	sp, sp, #8
    4448:	cmp	r3, r2
    444c:	bne	4530 <coda_type_vsf_integer_set_scale_factor+0x100>
    4450:	ldr	r3, [r0, #44]	; 0x2c
    4454:	mov	r4, r0
    4458:	ldr	r3, [r3, #48]	; 0x30
    445c:	cmp	r3, #0
    4460:	bne	458c <coda_type_vsf_integer_set_scale_factor+0x15c>
    4464:	mov	r5, r1
    4468:	add	r1, sp, #4
    446c:	mov	r0, r5
    4470:	bl	4368 <coda_type_get_read_type>
    4474:	cmp	r0, #0
    4478:	bne	4528 <coda_type_vsf_integer_set_scale_factor+0xf8>
    447c:	ldr	r3, [sp, #4]
    4480:	cmp	r3, #4
    4484:	bhi	44e0 <coda_type_vsf_integer_set_scale_factor+0xb0>
    4488:	movw	r0, #0
    448c:	movt	r0, #0
    4490:	bl	131c <coda_type_record_field_new>
    4494:	subs	r6, r0, #0
    4498:	beq	4528 <coda_type_vsf_integer_set_scale_factor+0xf8>
    449c:	mov	r1, r5
    44a0:	bl	1514 <coda_type_record_field_set_type>
    44a4:	cmp	r0, #0
    44a8:	bne	4520 <coda_type_vsf_integer_set_scale_factor+0xf0>
    44ac:	mov	r1, r6
    44b0:	ldr	r0, [r4, #44]	; 0x2c
    44b4:	bl	1e64 <coda_type_record_add_field>
    44b8:	cmp	r0, #0
    44bc:	bne	4520 <coda_type_vsf_integer_set_scale_factor+0xf0>
    44c0:	ldr	r3, [r4, #44]	; 0x2c
    44c4:	ldrd	r2, [r3, #24]
    44c8:	strd	r2, [r4, #24]
    44cc:	add	sp, sp, #8
    44d0:	ldrd	r4, [sp]
    44d4:	ldr	r6, [sp, #8]
    44d8:	add	sp, sp, #12
    44dc:	pop	{pc}		; (ldr pc, [sp], #4)
    44e0:	add	r3, r3, #1
    44e4:	cmp	r3, #13
    44e8:	movwhi	r2, #0
    44ec:	movthi	r2, #0
    44f0:	bhi	4504 <coda_type_vsf_integer_set_scale_factor+0xd4>
    44f4:	movw	r2, #0
    44f8:	movt	r2, #0
    44fc:	add	r3, r2, r3, lsl #2
    4500:	ldr	r2, [r3, #28]
    4504:	movw	r1, #0
    4508:	movt	r1, #0
    450c:	movw	r0, #65136	; 0xfe70
    4510:	movt	r0, #65535	; 0xffff
    4514:	bl	0 <coda_set_error>
    4518:	mvn	r0, #0
    451c:	b	44cc <coda_type_vsf_integer_set_scale_factor+0x9c>
    4520:	mov	r0, r6
    4524:	bl	5a4 <coda_type_record_field_delete>
    4528:	mvn	r0, #0
    452c:	b	44cc <coda_type_vsf_integer_set_scale_factor+0x9c>
    4530:	cmp	r2, #9
    4534:	movwhi	r2, #0
    4538:	movthi	r2, #0
    453c:	bhi	4550 <coda_type_vsf_integer_set_scale_factor+0x120>
    4540:	movw	r1, #0
    4544:	movt	r1, #0
    4548:	add	r2, r1, r2, lsl #2
    454c:	ldr	r2, [r2, #84]	; 0x54
    4550:	cmp	r3, #9
    4554:	movwhi	r3, #0
    4558:	movthi	r3, #0
    455c:	bhi	4570 <coda_type_vsf_integer_set_scale_factor+0x140>
    4560:	movw	r1, #0
    4564:	movt	r1, #0
    4568:	add	r3, r1, r3, lsl #2
    456c:	ldr	r3, [r3, #84]	; 0x54
    4570:	movw	r1, #0
    4574:	movt	r1, #0
    4578:	movw	r0, #65136	; 0xfe70
    457c:	movt	r0, #65535	; 0xffff
    4580:	bl	0 <coda_set_error>
    4584:	mvn	r0, #0
    4588:	b	44cc <coda_type_vsf_integer_set_scale_factor+0x9c>
    458c:	movw	r1, #0
    4590:	movt	r1, #0
    4594:	movw	r0, #65136	; 0xfe70
    4598:	movt	r0, #65535	; 0xffff
    459c:	bl	0 <coda_set_error>
    45a0:	mvn	r0, #0
    45a4:	b	44cc <coda_type_vsf_integer_set_scale_factor+0x9c>

000045a8 <coda_type_get_string_length>:
    45a8:	cmp	r0, #0
    45ac:	str	r4, [sp, #-8]!
    45b0:	str	lr, [sp, #4]
    45b4:	beq	4630 <coda_type_get_string_length+0x88>
    45b8:	ldr	r3, [r0, #8]
    45bc:	cmp	r3, #4
    45c0:	bne	45fc <coda_type_get_string_length+0x54>
    45c4:	cmp	r1, #0
    45c8:	mov	r2, r1
    45cc:	beq	4654 <coda_type_get_string_length+0xac>
    45d0:	ldrd	r0, [r0, #24]
    45d4:	cmp	r0, #0
    45d8:	sbcs	r3, r1, #0
    45dc:	lsrge	r3, r0, #3
    45e0:	mvnlt	r3, #0
    45e4:	mov	r0, #0
    45e8:	orrge	r3, r3, r1, lsl #29
    45ec:	str	r3, [r2]
    45f0:	ldr	r4, [sp]
    45f4:	add	sp, sp, #4
    45f8:	pop	{pc}		; (ldr pc, [sp], #4)
    45fc:	cmp	r3, #6
    4600:	movwhi	r2, #0
    4604:	movthi	r2, #0
    4608:	bhi	4618 <coda_type_get_string_length+0x70>
    460c:	movw	r2, #0
    4610:	movt	r2, #0
    4614:	ldr	r2, [r2, r3, lsl #2]
    4618:	mvn	r0, #104	; 0x68
    461c:	movw	r1, #0
    4620:	movt	r1, #0
    4624:	bl	0 <coda_set_error>
    4628:	mvn	r0, #0
    462c:	b	45f0 <coda_type_get_string_length+0x48>
    4630:	mvn	r0, #99	; 0x63
    4634:	movw	r2, #0
    4638:	movt	r2, #0
    463c:	movw	r1, #0
    4640:	movt	r1, #0
    4644:	movw	r3, #2942	; 0xb7e
    4648:	bl	0 <coda_set_error>
    464c:	mvn	r0, #0
    4650:	b	45f0 <coda_type_get_string_length+0x48>
    4654:	mvn	r0, #99	; 0x63
    4658:	movw	r2, #0
    465c:	movt	r2, #0
    4660:	movw	r1, #0
    4664:	movt	r1, #0
    4668:	movw	r3, #2953	; 0xb89
    466c:	bl	0 <coda_set_error>
    4670:	mvn	r0, #0
    4674:	b	45f0 <coda_type_get_string_length+0x48>

00004678 <coda_type_get_bit_size>:
    4678:	cmp	r0, #0
    467c:	str	r4, [sp, #-8]!
    4680:	str	lr, [sp, #4]
    4684:	beq	46b8 <coda_type_get_bit_size+0x40>
    4688:	cmp	r1, #0
    468c:	beq	46dc <coda_type_get_bit_size+0x64>
    4690:	ldrd	r2, [r0, #24]
    4694:	cmp	r2, #0
    4698:	sbcs	r0, r3, #0
    469c:	mov	r0, #0
    46a0:	mvnlt	r2, #0
    46a4:	mvnlt	r3, #0
    46a8:	strd	r2, [r1]
    46ac:	ldr	r4, [sp]
    46b0:	add	sp, sp, #4
    46b4:	pop	{pc}		; (ldr pc, [sp], #4)
    46b8:	mvn	r0, #99	; 0x63
    46bc:	movw	r2, #0
    46c0:	movt	r2, #0
    46c4:	movw	r1, #0
    46c8:	movt	r1, #0
    46cc:	movw	r3, #2980	; 0xba4
    46d0:	bl	0 <coda_set_error>
    46d4:	mvn	r0, #0
    46d8:	b	46ac <coda_type_get_bit_size+0x34>
    46dc:	mvn	r0, #99	; 0x63
    46e0:	movw	r2, #0
    46e4:	movt	r2, #0
    46e8:	movw	r1, #0
    46ec:	movt	r1, #0
    46f0:	movw	r3, #2985	; 0xba9
    46f4:	bl	0 <coda_set_error>
    46f8:	mvn	r0, #0
    46fc:	b	46ac <coda_type_get_bit_size+0x34>

00004700 <coda_type_get_name>:
    4700:	cmp	r0, #0
    4704:	str	r4, [sp, #-8]!
    4708:	str	lr, [sp, #4]
    470c:	beq	4730 <coda_type_get_name+0x30>
    4710:	cmp	r1, #0
    4714:	beq	4754 <coda_type_get_name+0x54>
    4718:	ldr	r3, [r0, #16]
    471c:	mov	r0, #0
    4720:	str	r3, [r1]
    4724:	ldr	r4, [sp]
    4728:	add	sp, sp, #4
    472c:	pop	{pc}		; (ldr pc, [sp], #4)
    4730:	mvn	r0, #99	; 0x63
    4734:	movw	r2, #0
    4738:	movt	r2, #0
    473c:	movw	r1, #0
    4740:	movt	r1, #0
    4744:	movw	r3, #3012	; 0xbc4
    4748:	bl	0 <coda_set_error>
    474c:	mvn	r0, #0
    4750:	b	4724 <coda_type_get_name+0x24>
    4754:	mvn	r0, #99	; 0x63
    4758:	movw	r2, #0
    475c:	movt	r2, #0
    4760:	movw	r1, #0
    4764:	movt	r1, #0
    4768:	movw	r3, #3017	; 0xbc9
    476c:	bl	0 <coda_set_error>
    4770:	mvn	r0, #0
    4774:	b	4724 <coda_type_get_name+0x24>

00004778 <coda_type_get_description>:
    4778:	cmp	r0, #0
    477c:	str	r4, [sp, #-8]!
    4780:	str	lr, [sp, #4]
    4784:	beq	47a8 <coda_type_get_description+0x30>
    4788:	cmp	r1, #0
    478c:	beq	47cc <coda_type_get_description+0x54>
    4790:	ldr	r3, [r0, #20]
    4794:	mov	r0, #0
    4798:	str	r3, [r1]
    479c:	ldr	r4, [sp]
    47a0:	add	sp, sp, #4
    47a4:	pop	{pc}		; (ldr pc, [sp], #4)
    47a8:	mvn	r0, #99	; 0x63
    47ac:	movw	r2, #0
    47b0:	movt	r2, #0
    47b4:	movw	r1, #0
    47b8:	movt	r1, #0
    47bc:	movw	r3, #3038	; 0xbde
    47c0:	bl	0 <coda_set_error>
    47c4:	mvn	r0, #0
    47c8:	b	479c <coda_type_get_description+0x24>
    47cc:	mvn	r0, #99	; 0x63
    47d0:	movw	r2, #0
    47d4:	movt	r2, #0
    47d8:	movw	r1, #0
    47dc:	movt	r1, #0
    47e0:	movw	r3, #3043	; 0xbe3
    47e4:	bl	0 <coda_set_error>
    47e8:	mvn	r0, #0
    47ec:	b	479c <coda_type_get_description+0x24>

000047f0 <coda_type_get_fixed_value>:
    47f0:	cmp	r0, #0
    47f4:	push	{lr}		; (str lr, [sp, #-4]!)
    47f8:	sub	sp, sp, #12
    47fc:	beq	4894 <coda_type_get_fixed_value+0xa4>
    4800:	cmp	r1, #0
    4804:	beq	48b8 <coda_type_get_fixed_value+0xc8>
    4808:	ldr	r3, [r0, #8]
    480c:	cmp	r3, #4
    4810:	beq	4858 <coda_type_get_fixed_value+0x68>
    4814:	cmp	r3, #5
    4818:	bne	4844 <coda_type_get_fixed_value+0x54>
    481c:	ldr	r3, [r0, #44]	; 0x2c
    4820:	cmp	r2, #0
    4824:	str	r3, [r1]
    4828:	beq	4888 <coda_type_get_fixed_value+0x98>
    482c:	cmp	r3, #0
    4830:	ldrne	r3, [r0, #40]	; 0x28
    4834:	mov	r0, #0
    4838:	str	r3, [r2]
    483c:	add	sp, sp, #12
    4840:	pop	{pc}		; (ldr pc, [sp], #4)
    4844:	mov	r3, #0
    4848:	mov	r0, r3
    484c:	str	r3, [r1]
    4850:	add	sp, sp, #12
    4854:	pop	{pc}		; (ldr pc, [sp], #4)
    4858:	ldr	r0, [r0, #40]	; 0x28
    485c:	cmp	r2, #0
    4860:	str	r0, [r1]
    4864:	beq	4888 <coda_type_get_fixed_value+0x98>
    4868:	cmp	r0, #0
    486c:	moveq	r3, r0
    4870:	beq	4834 <coda_type_get_fixed_value+0x44>
    4874:	str	r2, [sp, #4]
    4878:	bl	0 <strlen>
    487c:	mov	r3, r0
    4880:	ldr	r2, [sp, #4]
    4884:	b	4834 <coda_type_get_fixed_value+0x44>
    4888:	mov	r0, #0
    488c:	add	sp, sp, #12
    4890:	pop	{pc}		; (ldr pc, [sp], #4)
    4894:	mvn	r0, #99	; 0x63
    4898:	movw	r2, #0
    489c:	movt	r2, #0
    48a0:	movw	r1, #0
    48a4:	movt	r1, #0
    48a8:	movw	r3, #3133	; 0xc3d
    48ac:	bl	0 <coda_set_error>
    48b0:	mvn	r0, #0
    48b4:	b	483c <coda_type_get_fixed_value+0x4c>
    48b8:	mvn	r0, #99	; 0x63
    48bc:	movw	r2, #0
    48c0:	movt	r2, #0
    48c4:	movw	r1, #0
    48c8:	movt	r1, #0
    48cc:	movw	r3, #3138	; 0xc42
    48d0:	bl	0 <coda_set_error>
    48d4:	mvn	r0, #0
    48d8:	b	483c <coda_type_get_fixed_value+0x4c>

000048dc <coda_type_get_attributes>:
    48dc:	cmp	r0, #0
    48e0:	str	r4, [sp, #-8]!
    48e4:	str	lr, [sp, #4]
    48e8:	sub	sp, sp, #8
    48ec:	beq	493c <coda_type_get_attributes+0x60>
    48f0:	cmp	r1, #0
    48f4:	beq	4960 <coda_type_get_attributes+0x84>
    48f8:	ldr	r4, [r0, #36]	; 0x24
    48fc:	cmp	r4, #0
    4900:	movne	r3, #0
    4904:	strne	r4, [r1]
    4908:	beq	4920 <coda_type_get_attributes+0x44>
    490c:	mov	r0, r3
    4910:	add	sp, sp, #8
    4914:	ldr	r4, [sp]
    4918:	add	sp, sp, #4
    491c:	pop	{pc}		; (ldr pc, [sp], #4)
    4920:	ldr	r0, [r0]
    4924:	str	r1, [sp, #4]
    4928:	bl	19b0 <coda_type_empty_record>
    492c:	ldr	r1, [sp, #4]
    4930:	mov	r3, r4
    4934:	str	r0, [r1]
    4938:	b	490c <coda_type_get_attributes+0x30>
    493c:	movw	r3, #3178	; 0xc6a
    4940:	movw	r2, #0
    4944:	movt	r2, #0
    4948:	movw	r1, #0
    494c:	movt	r1, #0
    4950:	mvn	r0, #99	; 0x63
    4954:	bl	0 <coda_set_error>
    4958:	mvn	r3, #0
    495c:	b	490c <coda_type_get_attributes+0x30>
    4960:	movw	r3, #3183	; 0xc6f
    4964:	movw	r2, #0
    4968:	movt	r2, #0
    496c:	movw	r1, #0
    4970:	movt	r1, #0
    4974:	mvn	r0, #99	; 0x63
    4978:	bl	0 <coda_set_error>
    497c:	mvn	r3, #0
    4980:	b	490c <coda_type_get_attributes+0x30>

00004984 <coda_type_get_num_record_fields>:
    4984:	subs	r3, r0, #0
    4988:	str	r4, [sp, #-8]!
    498c:	str	lr, [sp, #4]
    4990:	beq	49f0 <coda_type_get_num_record_fields+0x6c>
    4994:	ldr	r0, [r3, #8]
    4998:	cmp	r0, #0
    499c:	bne	49bc <coda_type_get_num_record_fields+0x38>
    49a0:	cmp	r1, #0
    49a4:	beq	4a14 <coda_type_get_num_record_fields+0x90>
    49a8:	ldr	r3, [r3, #48]	; 0x30
    49ac:	str	r3, [r1]
    49b0:	ldr	r4, [sp]
    49b4:	add	sp, sp, #4
    49b8:	pop	{pc}		; (ldr pc, [sp], #4)
    49bc:	cmp	r0, #6
    49c0:	movwhi	r2, #0
    49c4:	movthi	r2, #0
    49c8:	bhi	49d8 <coda_type_get_num_record_fields+0x54>
    49cc:	movw	r3, #0
    49d0:	movt	r3, #0
    49d4:	ldr	r2, [r3, r0, lsl #2]
    49d8:	mvn	r0, #104	; 0x68
    49dc:	movw	r1, #0
    49e0:	movt	r1, #0
    49e4:	bl	0 <coda_set_error>
    49e8:	mvn	r0, #0
    49ec:	b	49b0 <coda_type_get_num_record_fields+0x2c>
    49f0:	mvn	r0, #99	; 0x63
    49f4:	movw	r2, #0
    49f8:	movt	r2, #0
    49fc:	movw	r1, #0
    4a00:	movt	r1, #0
    4a04:	movw	r3, #3209	; 0xc89
    4a08:	bl	0 <coda_set_error>
    4a0c:	mvn	r0, #0
    4a10:	b	49b0 <coda_type_get_num_record_fields+0x2c>
    4a14:	mvn	r0, #99	; 0x63
    4a18:	movw	r2, #0
    4a1c:	movt	r2, #0
    4a20:	movw	r1, #0
    4a24:	movt	r1, #0
    4a28:	movw	r3, #3220	; 0xc94
    4a2c:	bl	0 <coda_set_error>
    4a30:	mvn	r0, #0
    4a34:	b	49b0 <coda_type_get_num_record_fields+0x2c>

00004a38 <coda_type_get_record_field_index_from_name>:
    4a38:	cmp	r0, #0
    4a3c:	strd	r4, [sp, #-16]!
    4a40:	str	r6, [sp, #8]
    4a44:	str	lr, [sp, #12]
    4a48:	beq	4b30 <coda_type_get_record_field_index_from_name+0xf8>
    4a4c:	ldr	r4, [r0, #8]
    4a50:	cmp	r4, #0
    4a54:	bne	4a98 <coda_type_get_record_field_index_from_name+0x60>
    4a58:	cmp	r1, #0
    4a5c:	mov	r6, r1
    4a60:	beq	4b0c <coda_type_get_record_field_index_from_name+0xd4>
    4a64:	cmp	r2, #0
    4a68:	mov	r5, r2
    4a6c:	beq	4acc <coda_type_get_record_field_index_from_name+0x94>
    4a70:	ldr	r0, [r0, #40]	; 0x28
    4a74:	bl	0 <coda_hashtable_get_index_from_name>
    4a78:	subs	r3, r0, #0
    4a7c:	movge	r0, r4
    4a80:	strge	r3, [r5]
    4a84:	blt	4af0 <coda_type_get_record_field_index_from_name+0xb8>
    4a88:	ldrd	r4, [sp]
    4a8c:	ldr	r6, [sp, #8]
    4a90:	add	sp, sp, #12
    4a94:	pop	{pc}		; (ldr pc, [sp], #4)
    4a98:	cmp	r4, #6
    4a9c:	movwhi	r2, #0
    4aa0:	movthi	r2, #0
    4aa4:	bhi	4ab4 <coda_type_get_record_field_index_from_name+0x7c>
    4aa8:	movw	r3, #0
    4aac:	movt	r3, #0
    4ab0:	ldr	r2, [r3, r4, lsl #2]
    4ab4:	mvn	r0, #104	; 0x68
    4ab8:	movw	r1, #0
    4abc:	movt	r1, #0
    4ac0:	bl	0 <coda_set_error>
    4ac4:	mvn	r0, #0
    4ac8:	b	4a88 <coda_type_get_record_field_index_from_name+0x50>
    4acc:	mvn	r0, #99	; 0x63
    4ad0:	movw	r2, #0
    4ad4:	movt	r2, #0
    4ad8:	movw	r1, #0
    4adc:	movt	r1, #0
    4ae0:	movw	r3, #3260	; 0xcbc
    4ae4:	bl	0 <coda_set_error>
    4ae8:	mvn	r0, #0
    4aec:	b	4a88 <coda_type_get_record_field_index_from_name+0x50>
    4af0:	mvn	r0, #101	; 0x65
    4af4:	mov	r2, r6
    4af8:	movw	r1, #0
    4afc:	movt	r1, #0
    4b00:	bl	0 <coda_set_error>
    4b04:	mvn	r0, #0
    4b08:	b	4a88 <coda_type_get_record_field_index_from_name+0x50>
    4b0c:	mvn	r0, #99	; 0x63
    4b10:	movw	r2, #0
    4b14:	movt	r2, #0
    4b18:	movw	r1, #0
    4b1c:	movt	r1, #0
    4b20:	movw	r3, #3255	; 0xcb7
    4b24:	bl	0 <coda_set_error>
    4b28:	mvn	r0, #0
    4b2c:	b	4a88 <coda_type_get_record_field_index_from_name+0x50>
    4b30:	mvn	r0, #99	; 0x63
    4b34:	movw	r2, #0
    4b38:	movt	r2, #0
    4b3c:	movw	r1, #0
    4b40:	movt	r1, #0
    4b44:	movw	r3, #3244	; 0xcac
    4b48:	bl	0 <coda_set_error>
    4b4c:	mvn	r0, #0
    4b50:	b	4a88 <coda_type_get_record_field_index_from_name+0x50>

00004b54 <coda_type_get_record_field_index_from_name_n>:
    4b54:	cmp	r0, #0
    4b58:	strd	r4, [sp, #-24]!	; 0xffffffe8
    4b5c:	strd	r6, [sp, #8]
    4b60:	str	r8, [sp, #16]
    4b64:	str	lr, [sp, #20]
    4b68:	beq	4c5c <coda_type_get_record_field_index_from_name_n+0x108>
    4b6c:	ldr	r4, [r0, #8]
    4b70:	cmp	r4, #0
    4b74:	bne	4bc0 <coda_type_get_record_field_index_from_name_n+0x6c>
    4b78:	cmp	r1, #0
    4b7c:	mov	r6, r1
    4b80:	beq	4c38 <coda_type_get_record_field_index_from_name_n+0xe4>
    4b84:	cmp	r3, #0
    4b88:	mov	r5, r3
    4b8c:	beq	4bf4 <coda_type_get_record_field_index_from_name_n+0xa0>
    4b90:	ldr	r0, [r0, #40]	; 0x28
    4b94:	mov	r7, r2
    4b98:	bl	0 <coda_hashtable_get_index_from_name_n>
    4b9c:	subs	r3, r0, #0
    4ba0:	movge	r0, r4
    4ba4:	strge	r3, [r5]
    4ba8:	blt	4c18 <coda_type_get_record_field_index_from_name_n+0xc4>
    4bac:	ldrd	r4, [sp]
    4bb0:	ldrd	r6, [sp, #8]
    4bb4:	ldr	r8, [sp, #16]
    4bb8:	add	sp, sp, #20
    4bbc:	pop	{pc}		; (ldr pc, [sp], #4)
    4bc0:	cmp	r4, #6
    4bc4:	movwhi	r2, #0
    4bc8:	movthi	r2, #0
    4bcc:	bhi	4bdc <coda_type_get_record_field_index_from_name_n+0x88>
    4bd0:	movw	r3, #0
    4bd4:	movt	r3, #0
    4bd8:	ldr	r2, [r3, r4, lsl #2]
    4bdc:	mvn	r0, #104	; 0x68
    4be0:	movw	r1, #0
    4be4:	movt	r1, #0
    4be8:	bl	0 <coda_set_error>
    4bec:	mvn	r0, #0
    4bf0:	b	4bac <coda_type_get_record_field_index_from_name_n+0x58>
    4bf4:	mvn	r0, #99	; 0x63
    4bf8:	movw	r2, #0
    4bfc:	movt	r2, #0
    4c00:	movw	r1, #0
    4c04:	movt	r1, #0
    4c08:	movw	r3, #3307	; 0xceb
    4c0c:	bl	0 <coda_set_error>
    4c10:	mvn	r0, #0
    4c14:	b	4bac <coda_type_get_record_field_index_from_name_n+0x58>
    4c18:	mvn	r0, #101	; 0x65
    4c1c:	mov	r3, r6
    4c20:	mov	r2, r7
    4c24:	movw	r1, #0
    4c28:	movt	r1, #0
    4c2c:	bl	0 <coda_set_error>
    4c30:	mvn	r0, #0
    4c34:	b	4bac <coda_type_get_record_field_index_from_name_n+0x58>
    4c38:	mvn	r0, #99	; 0x63
    4c3c:	movw	r2, #0
    4c40:	movt	r2, #0
    4c44:	movw	r1, #0
    4c48:	movt	r1, #0
    4c4c:	movw	r3, #3302	; 0xce6
    4c50:	bl	0 <coda_set_error>
    4c54:	mvn	r0, #0
    4c58:	b	4bac <coda_type_get_record_field_index_from_name_n+0x58>
    4c5c:	mvn	r0, #99	; 0x63
    4c60:	movw	r2, #0
    4c64:	movt	r2, #0
    4c68:	movw	r1, #0
    4c6c:	movt	r1, #0
    4c70:	movw	r3, #3291	; 0xcdb
    4c74:	bl	0 <coda_set_error>
    4c78:	mvn	r0, #0
    4c7c:	b	4bac <coda_type_get_record_field_index_from_name_n+0x58>

00004c80 <coda_type_get_record_field_index_from_real_name>:
    4c80:	cmp	r0, #0
    4c84:	strd	r4, [sp, #-16]!
    4c88:	str	r6, [sp, #8]
    4c8c:	str	lr, [sp, #12]
    4c90:	beq	4d78 <coda_type_get_record_field_index_from_real_name+0xf8>
    4c94:	ldr	r4, [r0, #8]
    4c98:	cmp	r4, #0
    4c9c:	bne	4ce0 <coda_type_get_record_field_index_from_real_name+0x60>
    4ca0:	cmp	r1, #0
    4ca4:	mov	r6, r1
    4ca8:	beq	4d54 <coda_type_get_record_field_index_from_real_name+0xd4>
    4cac:	cmp	r2, #0
    4cb0:	mov	r5, r2
    4cb4:	beq	4d14 <coda_type_get_record_field_index_from_real_name+0x94>
    4cb8:	ldr	r0, [r0, #44]	; 0x2c
    4cbc:	bl	0 <coda_hashtable_get_index_from_name>
    4cc0:	subs	r3, r0, #0
    4cc4:	movge	r0, r4
    4cc8:	strge	r3, [r5]
    4ccc:	blt	4d38 <coda_type_get_record_field_index_from_real_name+0xb8>
    4cd0:	ldrd	r4, [sp]
    4cd4:	ldr	r6, [sp, #8]
    4cd8:	add	sp, sp, #12
    4cdc:	pop	{pc}		; (ldr pc, [sp], #4)
    4ce0:	cmp	r4, #6
    4ce4:	movwhi	r2, #0
    4ce8:	movthi	r2, #0
    4cec:	bhi	4cfc <coda_type_get_record_field_index_from_real_name+0x7c>
    4cf0:	movw	r3, #0
    4cf4:	movt	r3, #0
    4cf8:	ldr	r2, [r3, r4, lsl #2]
    4cfc:	mvn	r0, #104	; 0x68
    4d00:	movw	r1, #0
    4d04:	movt	r1, #0
    4d08:	bl	0 <coda_set_error>
    4d0c:	mvn	r0, #0
    4d10:	b	4cd0 <coda_type_get_record_field_index_from_real_name+0x50>
    4d14:	mvn	r0, #99	; 0x63
    4d18:	movw	r2, #0
    4d1c:	movt	r2, #0
    4d20:	movw	r1, #0
    4d24:	movt	r1, #0
    4d28:	movw	r3, #3354	; 0xd1a
    4d2c:	bl	0 <coda_set_error>
    4d30:	mvn	r0, #0
    4d34:	b	4cd0 <coda_type_get_record_field_index_from_real_name+0x50>
    4d38:	mvn	r0, #101	; 0x65
    4d3c:	mov	r2, r6
    4d40:	movw	r1, #0
    4d44:	movt	r1, #0
    4d48:	bl	0 <coda_set_error>
    4d4c:	mvn	r0, #0
    4d50:	b	4cd0 <coda_type_get_record_field_index_from_real_name+0x50>
    4d54:	mvn	r0, #99	; 0x63
    4d58:	movw	r2, #0
    4d5c:	movt	r2, #0
    4d60:	movw	r1, #0
    4d64:	movt	r1, #0
    4d68:	movw	r3, #3349	; 0xd15
    4d6c:	bl	0 <coda_set_error>
    4d70:	mvn	r0, #0
    4d74:	b	4cd0 <coda_type_get_record_field_index_from_real_name+0x50>
    4d78:	mvn	r0, #99	; 0x63
    4d7c:	movw	r2, #0
    4d80:	movt	r2, #0
    4d84:	movw	r1, #0
    4d88:	movt	r1, #0
    4d8c:	movw	r3, #3338	; 0xd0a
    4d90:	bl	0 <coda_set_error>
    4d94:	mvn	r0, #0
    4d98:	b	4cd0 <coda_type_get_record_field_index_from_real_name+0x50>

00004d9c <coda_type_get_record_field_type>:
    4d9c:	subs	ip, r0, #0
    4da0:	push	{lr}		; (str lr, [sp, #-4]!)
    4da4:	sub	sp, sp, #12
    4da8:	beq	4e70 <coda_type_get_record_field_type+0xd4>
    4dac:	ldr	r0, [ip, #8]
    4db0:	cmp	r0, #0
    4db4:	bne	4e18 <coda_type_get_record_field_type+0x7c>
    4db8:	cmp	r2, #0
    4dbc:	beq	4e4c <coda_type_get_record_field_type+0xb0>
    4dc0:	cmp	r1, #0
    4dc4:	ldr	r3, [ip, #48]	; 0x30
    4dc8:	blt	4dec <coda_type_get_record_field_type+0x50>
    4dcc:	cmp	r1, r3
    4dd0:	bge	4dec <coda_type_get_record_field_type+0x50>
    4dd4:	ldr	r3, [ip, #52]	; 0x34
    4dd8:	ldr	r3, [r3, r1, lsl #2]
    4ddc:	ldr	r3, [r3, #8]
    4de0:	str	r3, [r2]
    4de4:	add	sp, sp, #12
    4de8:	pop	{pc}		; (ldr pc, [sp], #4)
    4dec:	movw	ip, #3399	; 0xd47
    4df0:	movw	r0, #0
    4df4:	movt	r0, #0
    4df8:	mov	r2, r1
    4dfc:	movw	r1, #0
    4e00:	movt	r1, #0
    4e04:	stm	sp, {r0, ip}
    4e08:	mvn	r0, #100	; 0x64
    4e0c:	bl	0 <coda_set_error>
    4e10:	mvn	r0, #0
    4e14:	b	4de4 <coda_type_get_record_field_type+0x48>
    4e18:	cmp	r0, #6
    4e1c:	movwhi	r2, #0
    4e20:	movthi	r2, #0
    4e24:	bhi	4e34 <coda_type_get_record_field_type+0x98>
    4e28:	movw	r3, #0
    4e2c:	movt	r3, #0
    4e30:	ldr	r2, [r3, r0, lsl #2]
    4e34:	mvn	r0, #104	; 0x68
    4e38:	movw	r1, #0
    4e3c:	movt	r1, #0
    4e40:	bl	0 <coda_set_error>
    4e44:	mvn	r0, #0
    4e48:	b	4de4 <coda_type_get_record_field_type+0x48>
    4e4c:	mvn	r0, #99	; 0x63
    4e50:	movw	r2, #0
    4e54:	movt	r2, #0
    4e58:	movw	r1, #0
    4e5c:	movt	r1, #0
    4e60:	mov	r3, #3392	; 0xd40
    4e64:	bl	0 <coda_set_error>
    4e68:	mvn	r0, #0
    4e6c:	b	4de4 <coda_type_get_record_field_type+0x48>
    4e70:	mvn	r0, #99	; 0x63
    4e74:	movw	r2, #0
    4e78:	movt	r2, #0
    4e7c:	movw	r1, #0
    4e80:	movt	r1, #0
    4e84:	movw	r3, #3381	; 0xd35
    4e88:	bl	0 <coda_set_error>
    4e8c:	mvn	r0, #0
    4e90:	b	4de4 <coda_type_get_record_field_type+0x48>

00004e94 <coda_type_get_record_field_name>:
    4e94:	subs	ip, r0, #0
    4e98:	push	{lr}		; (str lr, [sp, #-4]!)
    4e9c:	sub	sp, sp, #12
    4ea0:	beq	4f68 <coda_type_get_record_field_name+0xd4>
    4ea4:	ldr	r0, [ip, #8]
    4ea8:	cmp	r0, #0
    4eac:	bne	4f10 <coda_type_get_record_field_name+0x7c>
    4eb0:	cmp	r2, #0
    4eb4:	beq	4f44 <coda_type_get_record_field_name+0xb0>
    4eb8:	cmp	r1, #0
    4ebc:	ldr	r3, [ip, #48]	; 0x30
    4ec0:	blt	4ee4 <coda_type_get_record_field_name+0x50>
    4ec4:	cmp	r1, r3
    4ec8:	bge	4ee4 <coda_type_get_record_field_name+0x50>
    4ecc:	ldr	r3, [ip, #52]	; 0x34
    4ed0:	ldr	r3, [r3, r1, lsl #2]
    4ed4:	ldr	r3, [r3]
    4ed8:	str	r3, [r2]
    4edc:	add	sp, sp, #12
    4ee0:	pop	{pc}		; (ldr pc, [sp], #4)
    4ee4:	movw	ip, #3438	; 0xd6e
    4ee8:	movw	r0, #0
    4eec:	movt	r0, #0
    4ef0:	mov	r2, r1
    4ef4:	movw	r1, #0
    4ef8:	movt	r1, #0
    4efc:	stm	sp, {r0, ip}
    4f00:	mvn	r0, #100	; 0x64
    4f04:	bl	0 <coda_set_error>
    4f08:	mvn	r0, #0
    4f0c:	b	4edc <coda_type_get_record_field_name+0x48>
    4f10:	cmp	r0, #6
    4f14:	movwhi	r2, #0
    4f18:	movthi	r2, #0
    4f1c:	bhi	4f2c <coda_type_get_record_field_name+0x98>
    4f20:	movw	r3, #0
    4f24:	movt	r3, #0
    4f28:	ldr	r2, [r3, r0, lsl #2]
    4f2c:	mvn	r0, #104	; 0x68
    4f30:	movw	r1, #0
    4f34:	movt	r1, #0
    4f38:	bl	0 <coda_set_error>
    4f3c:	mvn	r0, #0
    4f40:	b	4edc <coda_type_get_record_field_name+0x48>
    4f44:	mvn	r0, #99	; 0x63
    4f48:	movw	r2, #0
    4f4c:	movt	r2, #0
    4f50:	movw	r1, #0
    4f54:	movt	r1, #0
    4f58:	movw	r3, #3431	; 0xd67
    4f5c:	bl	0 <coda_set_error>
    4f60:	mvn	r0, #0
    4f64:	b	4edc <coda_type_get_record_field_name+0x48>
    4f68:	mvn	r0, #99	; 0x63
    4f6c:	movw	r2, #0
    4f70:	movt	r2, #0
    4f74:	movw	r1, #0
    4f78:	movt	r1, #0
    4f7c:	movw	r3, #3420	; 0xd5c
    4f80:	bl	0 <coda_set_error>
    4f84:	mvn	r0, #0
    4f88:	b	4edc <coda_type_get_record_field_name+0x48>

00004f8c <coda_type_get_record_field_real_name>:
    4f8c:	subs	ip, r0, #0
    4f90:	str	r4, [sp, #-8]!
    4f94:	str	lr, [sp, #4]
    4f98:	sub	sp, sp, #16
    4f9c:	beq	5084 <coda_type_get_record_field_real_name+0xf8>
    4fa0:	ldr	r4, [ip, #8]
    4fa4:	cmp	r4, #0
    4fa8:	bne	5050 <coda_type_get_record_field_real_name+0xc4>
    4fac:	cmp	r2, #0
    4fb0:	beq	50a8 <coda_type_get_record_field_real_name+0x11c>
    4fb4:	cmp	r1, #0
    4fb8:	ldr	r3, [ip, #48]	; 0x30
    4fbc:	blt	5024 <coda_type_get_record_field_real_name+0x98>
    4fc0:	cmp	r1, r3
    4fc4:	bge	5024 <coda_type_get_record_field_real_name+0x98>
    4fc8:	ldr	r3, [ip, #52]	; 0x34
    4fcc:	ldr	r3, [r3, r1, lsl #2]
    4fd0:	ldr	r0, [r3, #4]
    4fd4:	cmp	r0, #0
    4fd8:	beq	5000 <coda_type_get_record_field_real_name+0x74>
    4fdc:	ldr	r3, [ip]
    4fe0:	cmp	r3, #2
    4fe4:	strne	r0, [r2]
    4fe8:	beq	5010 <coda_type_get_record_field_real_name+0x84>
    4fec:	mov	r0, r4
    4ff0:	add	sp, sp, #16
    4ff4:	ldr	r4, [sp]
    4ff8:	add	sp, sp, #4
    4ffc:	pop	{pc}		; (ldr pc, [sp], #4)
    5000:	ldr	r3, [r3]
    5004:	mov	r4, r0
    5008:	str	r3, [r2]
    500c:	b	4fec <coda_type_get_record_field_real_name+0x60>
    5010:	str	r2, [sp, #12]
    5014:	bl	0 <coda_element_name_from_xml_name>
    5018:	ldr	r2, [sp, #12]
    501c:	str	r0, [r2]
    5020:	b	4fec <coda_type_get_record_field_real_name+0x60>
    5024:	movw	ip, #3486	; 0xd9e
    5028:	movw	r0, #0
    502c:	movt	r0, #0
    5030:	mov	r2, r1
    5034:	movw	r1, #0
    5038:	movt	r1, #0
    503c:	stm	sp, {r0, ip}
    5040:	mvn	r0, #100	; 0x64
    5044:	mvn	r4, #0
    5048:	bl	0 <coda_set_error>
    504c:	b	4fec <coda_type_get_record_field_real_name+0x60>
    5050:	cmp	r4, #6
    5054:	movwhi	r2, #0
    5058:	movthi	r2, #0
    505c:	bhi	506c <coda_type_get_record_field_real_name+0xe0>
    5060:	movw	r3, #0
    5064:	movt	r3, #0
    5068:	ldr	r2, [r3, r4, lsl #2]
    506c:	movw	r1, #0
    5070:	movt	r1, #0
    5074:	mvn	r0, #104	; 0x68
    5078:	mvn	r4, #0
    507c:	bl	0 <coda_set_error>
    5080:	b	4fec <coda_type_get_record_field_real_name+0x60>
    5084:	movw	r2, #0
    5088:	movt	r2, #0
    508c:	movw	r1, #0
    5090:	movt	r1, #0
    5094:	movw	r3, #3468	; 0xd8c
    5098:	mvn	r0, #99	; 0x63
    509c:	bl	0 <coda_set_error>
    50a0:	mvn	r4, #0
    50a4:	b	4fec <coda_type_get_record_field_real_name+0x60>
    50a8:	movw	r2, #0
    50ac:	movt	r2, #0
    50b0:	movw	r1, #0
    50b4:	movt	r1, #0
    50b8:	movw	r3, #3479	; 0xd97
    50bc:	mvn	r0, #99	; 0x63
    50c0:	bl	0 <coda_set_error>
    50c4:	mvn	r4, #0
    50c8:	b	4fec <coda_type_get_record_field_real_name+0x60>

000050cc <coda_type_get_record_field_hidden_status>:
    50cc:	subs	ip, r0, #0
    50d0:	push	{lr}		; (str lr, [sp, #-4]!)
    50d4:	sub	sp, sp, #12
    50d8:	beq	51a0 <coda_type_get_record_field_hidden_status+0xd4>
    50dc:	ldr	r0, [ip, #8]
    50e0:	cmp	r0, #0
    50e4:	bne	5148 <coda_type_get_record_field_hidden_status+0x7c>
    50e8:	cmp	r2, #0
    50ec:	beq	517c <coda_type_get_record_field_hidden_status+0xb0>
    50f0:	cmp	r1, #0
    50f4:	ldr	r3, [ip, #48]	; 0x30
    50f8:	blt	511c <coda_type_get_record_field_hidden_status+0x50>
    50fc:	cmp	r1, r3
    5100:	bge	511c <coda_type_get_record_field_hidden_status+0x50>
    5104:	ldr	r3, [ip, #52]	; 0x34
    5108:	ldr	r3, [r3, r1, lsl #2]
    510c:	ldr	r3, [r3, #12]
    5110:	str	r3, [r2]
    5114:	add	sp, sp, #12
    5118:	pop	{pc}		; (ldr pc, [sp], #4)
    511c:	movw	ip, #3542	; 0xdd6
    5120:	movw	r0, #0
    5124:	movt	r0, #0
    5128:	mov	r2, r1
    512c:	movw	r1, #0
    5130:	movt	r1, #0
    5134:	stm	sp, {r0, ip}
    5138:	mvn	r0, #100	; 0x64
    513c:	bl	0 <coda_set_error>
    5140:	mvn	r0, #0
    5144:	b	5114 <coda_type_get_record_field_hidden_status+0x48>
    5148:	cmp	r0, #6
    514c:	movwhi	r2, #0
    5150:	movthi	r2, #0
    5154:	bhi	5164 <coda_type_get_record_field_hidden_status+0x98>
    5158:	movw	r3, #0
    515c:	movt	r3, #0
    5160:	ldr	r2, [r3, r0, lsl #2]
    5164:	mvn	r0, #104	; 0x68
    5168:	movw	r1, #0
    516c:	movt	r1, #0
    5170:	bl	0 <coda_set_error>
    5174:	mvn	r0, #0
    5178:	b	5114 <coda_type_get_record_field_hidden_status+0x48>
    517c:	mvn	r0, #99	; 0x63
    5180:	movw	r2, #0
    5184:	movt	r2, #0
    5188:	movw	r1, #0
    518c:	movt	r1, #0
    5190:	movw	r3, #3535	; 0xdcf
    5194:	bl	0 <coda_set_error>
    5198:	mvn	r0, #0
    519c:	b	5114 <coda_type_get_record_field_hidden_status+0x48>
    51a0:	mvn	r0, #99	; 0x63
    51a4:	movw	r2, #0
    51a8:	movt	r2, #0
    51ac:	movw	r1, #0
    51b0:	movt	r1, #0
    51b4:	movw	r3, #3524	; 0xdc4
    51b8:	bl	0 <coda_set_error>
    51bc:	mvn	r0, #0
    51c0:	b	5114 <coda_type_get_record_field_hidden_status+0x48>

000051c4 <coda_type_get_record_field_available_status>:
    51c4:	subs	ip, r0, #0
    51c8:	push	{lr}		; (str lr, [sp, #-4]!)
    51cc:	sub	sp, sp, #12
    51d0:	beq	52a4 <coda_type_get_record_field_available_status+0xe0>
    51d4:	ldr	r0, [ip, #8]
    51d8:	cmp	r0, #0
    51dc:	bne	524c <coda_type_get_record_field_available_status+0x88>
    51e0:	cmp	r2, #0
    51e4:	beq	5280 <coda_type_get_record_field_available_status+0xbc>
    51e8:	cmp	r1, #0
    51ec:	ldr	r3, [ip, #48]	; 0x30
    51f0:	blt	5220 <coda_type_get_record_field_available_status+0x5c>
    51f4:	cmp	r1, r3
    51f8:	bge	5220 <coda_type_get_record_field_available_status+0x5c>
    51fc:	ldr	r3, [ip, #52]	; 0x34
    5200:	ldr	r3, [r3, r1, lsl #2]
    5204:	ldrb	r3, [r3, #16]
    5208:	cmp	r3, #0
    520c:	mvnne	r3, #0
    5210:	moveq	r3, #1
    5214:	str	r3, [r2]
    5218:	add	sp, sp, #12
    521c:	pop	{pc}		; (ldr pc, [sp], #4)
    5220:	movw	ip, #3586	; 0xe02
    5224:	movw	r0, #0
    5228:	movt	r0, #0
    522c:	mov	r2, r1
    5230:	movw	r1, #0
    5234:	movt	r1, #0
    5238:	stm	sp, {r0, ip}
    523c:	mvn	r0, #100	; 0x64
    5240:	bl	0 <coda_set_error>
    5244:	mvn	r0, #0
    5248:	b	5218 <coda_type_get_record_field_available_status+0x54>
    524c:	cmp	r0, #6
    5250:	movwhi	r2, #0
    5254:	movthi	r2, #0
    5258:	bhi	5268 <coda_type_get_record_field_available_status+0xa4>
    525c:	movw	r3, #0
    5260:	movt	r3, #0
    5264:	ldr	r2, [r3, r0, lsl #2]
    5268:	mvn	r0, #104	; 0x68
    526c:	movw	r1, #0
    5270:	movt	r1, #0
    5274:	bl	0 <coda_set_error>
    5278:	mvn	r0, #0
    527c:	b	5218 <coda_type_get_record_field_available_status+0x54>
    5280:	mvn	r0, #99	; 0x63
    5284:	movw	r2, #0
    5288:	movt	r2, #0
    528c:	movw	r1, #0
    5290:	movt	r1, #0
    5294:	movw	r3, #3579	; 0xdfb
    5298:	bl	0 <coda_set_error>
    529c:	mvn	r0, #0
    52a0:	b	5218 <coda_type_get_record_field_available_status+0x54>
    52a4:	mvn	r0, #99	; 0x63
    52a8:	movw	r2, #0
    52ac:	movt	r2, #0
    52b0:	movw	r1, #0
    52b4:	movt	r1, #0
    52b8:	mov	r3, #3568	; 0xdf0
    52bc:	bl	0 <coda_set_error>
    52c0:	mvn	r0, #0
    52c4:	b	5218 <coda_type_get_record_field_available_status+0x54>

000052c8 <coda_type_get_record_union_status>:
    52c8:	subs	r3, r0, #0
    52cc:	str	r4, [sp, #-8]!
    52d0:	str	lr, [sp, #4]
    52d4:	beq	5334 <coda_type_get_record_union_status+0x6c>
    52d8:	ldr	r0, [r3, #8]
    52dc:	cmp	r0, #0
    52e0:	bne	5300 <coda_type_get_record_union_status+0x38>
    52e4:	cmp	r1, #0
    52e8:	beq	5358 <coda_type_get_record_union_status+0x90>
    52ec:	ldr	r3, [r3, #64]	; 0x40
    52f0:	str	r3, [r1]
    52f4:	ldr	r4, [sp]
    52f8:	add	sp, sp, #4
    52fc:	pop	{pc}		; (ldr pc, [sp], #4)
    5300:	cmp	r0, #6
    5304:	movwhi	r2, #0
    5308:	movthi	r2, #0
    530c:	bhi	531c <coda_type_get_record_union_status+0x54>
    5310:	movw	r3, #0
    5314:	movt	r3, #0
    5318:	ldr	r2, [r3, r0, lsl #2]
    531c:	mvn	r0, #104	; 0x68
    5320:	movw	r1, #0
    5324:	movt	r1, #0
    5328:	bl	0 <coda_set_error>
    532c:	mvn	r0, #0
    5330:	b	52f4 <coda_type_get_record_union_status+0x2c>
    5334:	mvn	r0, #99	; 0x63
    5338:	movw	r2, #0
    533c:	movt	r2, #0
    5340:	movw	r1, #0
    5344:	movt	r1, #0
    5348:	movw	r3, #3607	; 0xe17
    534c:	bl	0 <coda_set_error>
    5350:	mvn	r0, #0
    5354:	b	52f4 <coda_type_get_record_union_status+0x2c>
    5358:	mvn	r0, #99	; 0x63
    535c:	movw	r2, #0
    5360:	movt	r2, #0
    5364:	movw	r1, #0
    5368:	movt	r1, #0
    536c:	movw	r3, #3618	; 0xe22
    5370:	bl	0 <coda_set_error>
    5374:	mvn	r0, #0
    5378:	b	52f4 <coda_type_get_record_union_status+0x2c>

0000537c <coda_type_get_array_num_dims>:
    537c:	cmp	r0, #0
    5380:	str	r4, [sp, #-8]!
    5384:	str	lr, [sp, #4]
    5388:	beq	53ec <coda_type_get_array_num_dims+0x70>
    538c:	ldr	r3, [r0, #8]
    5390:	cmp	r3, #1
    5394:	bne	53b8 <coda_type_get_array_num_dims+0x3c>
    5398:	cmp	r1, #0
    539c:	beq	5410 <coda_type_get_array_num_dims+0x94>
    53a0:	ldr	r3, [r0, #48]	; 0x30
    53a4:	mov	r0, #0
    53a8:	str	r3, [r1]
    53ac:	ldr	r4, [sp]
    53b0:	add	sp, sp, #4
    53b4:	pop	{pc}		; (ldr pc, [sp], #4)
    53b8:	cmp	r3, #6
    53bc:	movwhi	r2, #0
    53c0:	movthi	r2, #0
    53c4:	bhi	53d4 <coda_type_get_array_num_dims+0x58>
    53c8:	movw	r2, #0
    53cc:	movt	r2, #0
    53d0:	ldr	r2, [r2, r3, lsl #2]
    53d4:	mvn	r0, #104	; 0x68
    53d8:	movw	r1, #0
    53dc:	movt	r1, #0
    53e0:	bl	0 <coda_set_error>
    53e4:	mvn	r0, #0
    53e8:	b	53ac <coda_type_get_array_num_dims+0x30>
    53ec:	mvn	r0, #99	; 0x63
    53f0:	movw	r2, #0
    53f4:	movt	r2, #0
    53f8:	movw	r1, #0
    53fc:	movt	r1, #0
    5400:	movw	r3, #3638	; 0xe36
    5404:	bl	0 <coda_set_error>
    5408:	mvn	r0, #0
    540c:	b	53ac <coda_type_get_array_num_dims+0x30>
    5410:	mvn	r0, #99	; 0x63
    5414:	movw	r2, #0
    5418:	movt	r2, #0
    541c:	movw	r1, #0
    5420:	movt	r1, #0
    5424:	movw	r3, #3649	; 0xe41
    5428:	bl	0 <coda_set_error>
    542c:	mvn	r0, #0
    5430:	b	53ac <coda_type_get_array_num_dims+0x30>

00005434 <coda_type_get_array_dim>:
    5434:	cmp	r0, #0
    5438:	str	r4, [sp, #-8]!
    543c:	str	lr, [sp, #4]
    5440:	beq	54d0 <coda_type_get_array_dim+0x9c>
    5444:	ldr	r3, [r0, #8]
    5448:	cmp	r3, #1
    544c:	bne	549c <coda_type_get_array_dim+0x68>
    5450:	cmp	r1, #0
    5454:	beq	5518 <coda_type_get_array_dim+0xe4>
    5458:	cmp	r2, #0
    545c:	beq	54f4 <coda_type_get_array_dim+0xc0>
    5460:	ldr	r3, [r0, #48]	; 0x30
    5464:	cmp	r3, #0
    5468:	str	r3, [r1]
    546c:	ble	548c <coda_type_get_array_dim+0x58>
    5470:	add	r0, r0, #52	; 0x34
    5474:	sub	r2, r2, #4
    5478:	add	r1, r0, r3, lsl #2
    547c:	ldr	r3, [r0], #4
    5480:	cmp	r0, r1
    5484:	str	r3, [r2, #4]!
    5488:	bne	547c <coda_type_get_array_dim+0x48>
    548c:	mov	r0, #0
    5490:	ldr	r4, [sp]
    5494:	add	sp, sp, #4
    5498:	pop	{pc}		; (ldr pc, [sp], #4)
    549c:	cmp	r3, #6
    54a0:	movwhi	r2, #0
    54a4:	movthi	r2, #0
    54a8:	bhi	54b8 <coda_type_get_array_dim+0x84>
    54ac:	movw	r2, #0
    54b0:	movt	r2, #0
    54b4:	ldr	r2, [r2, r3, lsl #2]
    54b8:	mvn	r0, #104	; 0x68
    54bc:	movw	r1, #0
    54c0:	movt	r1, #0
    54c4:	bl	0 <coda_set_error>
    54c8:	mvn	r0, #0
    54cc:	b	5490 <coda_type_get_array_dim+0x5c>
    54d0:	mvn	r0, #99	; 0x63
    54d4:	movw	r2, #0
    54d8:	movt	r2, #0
    54dc:	movw	r1, #0
    54e0:	movt	r1, #0
    54e4:	mov	r3, #3680	; 0xe60
    54e8:	bl	0 <coda_set_error>
    54ec:	mvn	r0, #0
    54f0:	b	5490 <coda_type_get_array_dim+0x5c>
    54f4:	mvn	r0, #99	; 0x63
    54f8:	movw	r2, #0
    54fc:	movt	r2, #0
    5500:	movw	r1, #0
    5504:	movt	r1, #0
    5508:	mov	r3, #3696	; 0xe70
    550c:	bl	0 <coda_set_error>
    5510:	mvn	r0, #0
    5514:	b	5490 <coda_type_get_array_dim+0x5c>
    5518:	mvn	r0, #99	; 0x63
    551c:	movw	r2, #0
    5520:	movt	r2, #0
    5524:	movw	r1, #0
    5528:	movt	r1, #0
    552c:	movw	r3, #3691	; 0xe6b
    5530:	bl	0 <coda_set_error>
    5534:	mvn	r0, #0
    5538:	b	5490 <coda_type_get_array_dim+0x5c>

0000553c <coda_type_get_array_base_type>:
    553c:	cmp	r0, #0
    5540:	str	r4, [sp, #-8]!
    5544:	str	lr, [sp, #4]
    5548:	beq	55ac <coda_type_get_array_base_type+0x70>
    554c:	ldr	r3, [r0, #8]
    5550:	cmp	r3, #1
    5554:	bne	5578 <coda_type_get_array_base_type+0x3c>
    5558:	cmp	r1, #0
    555c:	beq	55d0 <coda_type_get_array_base_type+0x94>
    5560:	ldr	r3, [r0, #40]	; 0x28
    5564:	mov	r0, #0
    5568:	str	r3, [r1]
    556c:	ldr	r4, [sp]
    5570:	add	sp, sp, #4
    5574:	pop	{pc}		; (ldr pc, [sp], #4)
    5578:	cmp	r3, #6
    557c:	movwhi	r2, #0
    5580:	movthi	r2, #0
    5584:	bhi	5594 <coda_type_get_array_base_type+0x58>
    5588:	movw	r2, #0
    558c:	movt	r2, #0
    5590:	ldr	r2, [r2, r3, lsl #2]
    5594:	mvn	r0, #104	; 0x68
    5598:	movw	r1, #0
    559c:	movt	r1, #0
    55a0:	bl	0 <coda_set_error>
    55a4:	mvn	r0, #0
    55a8:	b	556c <coda_type_get_array_base_type+0x30>
    55ac:	mvn	r0, #99	; 0x63
    55b0:	movw	r2, #0
    55b4:	movt	r2, #0
    55b8:	movw	r1, #0
    55bc:	movt	r1, #0
    55c0:	movw	r3, #3720	; 0xe88
    55c4:	bl	0 <coda_set_error>
    55c8:	mvn	r0, #0
    55cc:	b	556c <coda_type_get_array_base_type+0x30>
    55d0:	mvn	r0, #99	; 0x63
    55d4:	movw	r2, #0
    55d8:	movt	r2, #0
    55dc:	movw	r1, #0
    55e0:	movt	r1, #0
    55e4:	movw	r3, #3731	; 0xe93
    55e8:	bl	0 <coda_set_error>
    55ec:	mvn	r0, #0
    55f0:	b	556c <coda_type_get_array_base_type+0x30>

000055f4 <coda_type_get_unit>:
    55f4:	cmp	r0, #0
    55f8:	str	r4, [sp, #-8]!
    55fc:	str	lr, [sp, #4]
    5600:	sub	sp, sp, #8
    5604:	beq	56f8 <coda_type_get_unit+0x104>
    5608:	cmp	r1, #0
    560c:	mov	r4, r1
    5610:	beq	571c <coda_type_get_unit+0x128>
    5614:	ldr	r3, [r0, #8]
    5618:	sub	r3, r3, #1
    561c:	cmp	r3, #5
    5620:	ldrls	pc, [pc, r3, lsl #2]
    5624:	b	56c0 <coda_type_get_unit+0xcc>
    5628:	.word	0x00005690
    562c:	.word	0x0000565c
    5630:	.word	0x0000565c
    5634:	.word	0x000056c0
    5638:	.word	0x000056c0
    563c:	.word	0x00005640
    5640:	ldr	r3, [r0, #48]	; 0x30
    5644:	mov	r0, #0
    5648:	str	r3, [r1]
    564c:	add	sp, sp, #8
    5650:	ldr	r4, [sp]
    5654:	add	sp, sp, #4
    5658:	pop	{pc}		; (ldr pc, [sp], #4)
    565c:	ldr	r3, [pc, #220]	; 5740 <coda_type_get_unit+0x14c>
    5660:	mrc	15, 0, r2, cr13, cr0, {3}
    5664:	ldr	r3, [pc, r3]
    5668:	ldr	r3, [r2, r3]
    566c:	cmp	r3, #0
    5670:	beq	56dc <coda_type_get_unit+0xe8>
    5674:	ldr	r3, [r0, #48]	; 0x30
    5678:	cmp	r3, #0
    567c:	beq	56dc <coda_type_get_unit+0xe8>
    5680:	ldr	r3, [r3, #32]
    5684:	mov	r0, #0
    5688:	str	r3, [r1]
    568c:	b	564c <coda_type_get_unit+0x58>
    5690:	add	r1, sp, #4
    5694:	bl	553c <coda_type_get_array_base_type>
    5698:	cmp	r0, #0
    569c:	mvnne	r0, #0
    56a0:	bne	564c <coda_type_get_unit+0x58>
    56a4:	mov	r1, r4
    56a8:	ldr	r0, [sp, #4]
    56ac:	bl	55f4 <coda_type_get_unit>
    56b0:	add	sp, sp, #8
    56b4:	ldr	r4, [sp]
    56b8:	add	sp, sp, #4
    56bc:	pop	{pc}		; (ldr pc, [sp], #4)
    56c0:	mov	r3, #0
    56c4:	mov	r0, r3
    56c8:	str	r3, [r1]
    56cc:	add	sp, sp, #8
    56d0:	ldr	r4, [sp]
    56d4:	add	sp, sp, #4
    56d8:	pop	{pc}		; (ldr pc, [sp], #4)
    56dc:	ldr	r3, [r0, #40]	; 0x28
    56e0:	mov	r0, #0
    56e4:	str	r3, [r4]
    56e8:	add	sp, sp, #8
    56ec:	ldr	r4, [sp]
    56f0:	add	sp, sp, #4
    56f4:	pop	{pc}		; (ldr pc, [sp], #4)
    56f8:	mvn	r0, #99	; 0x63
    56fc:	movw	r2, #0
    5700:	movt	r2, #0
    5704:	movw	r1, #0
    5708:	movt	r1, #0
    570c:	movw	r3, #3068	; 0xbfc
    5710:	bl	0 <coda_set_error>
    5714:	mvn	r0, #0
    5718:	b	564c <coda_type_get_unit+0x58>
    571c:	mvn	r0, #99	; 0x63
    5720:	movw	r2, #0
    5724:	movt	r2, #0
    5728:	movw	r1, #0
    572c:	movt	r1, #0
    5730:	movw	r3, #3074	; 0xc02
    5734:	bl	0 <coda_set_error>
    5738:	mvn	r0, #0
    573c:	b	564c <coda_type_get_unit+0x58>
    5740:	.word	0x000000d4

00005744 <coda_type_get_special_type>:
    5744:	cmp	r0, #0
    5748:	str	r4, [sp, #-8]!
    574c:	str	lr, [sp, #4]
    5750:	beq	57b0 <coda_type_get_special_type+0x6c>
    5754:	ldr	r3, [r0, #8]
    5758:	cmp	r3, #6
    575c:	bne	5780 <coda_type_get_special_type+0x3c>
    5760:	cmp	r1, #0
    5764:	beq	57d4 <coda_type_get_special_type+0x90>
    5768:	ldr	r3, [r0, #40]	; 0x28
    576c:	mov	r0, #0
    5770:	str	r3, [r1]
    5774:	ldr	r4, [sp]
    5778:	add	sp, sp, #4
    577c:	pop	{pc}		; (ldr pc, [sp], #4)
    5780:	movwhi	r2, #0
    5784:	movthi	r2, #0
    5788:	bhi	5798 <coda_type_get_special_type+0x54>
    578c:	movw	r2, #0
    5790:	movt	r2, #0
    5794:	ldr	r2, [r2, r3, lsl #2]
    5798:	mvn	r0, #104	; 0x68
    579c:	movw	r1, #0
    57a0:	movt	r1, #0
    57a4:	bl	0 <coda_set_error>
    57a8:	mvn	r0, #0
    57ac:	b	5774 <coda_type_get_special_type+0x30>
    57b0:	mvn	r0, #99	; 0x63
    57b4:	movw	r2, #0
    57b8:	movt	r2, #0
    57bc:	movw	r1, #0
    57c0:	movt	r1, #0
    57c4:	movw	r3, #3752	; 0xea8
    57c8:	bl	0 <coda_set_error>
    57cc:	mvn	r0, #0
    57d0:	b	5774 <coda_type_get_special_type+0x30>
    57d4:	mvn	r0, #99	; 0x63
    57d8:	movw	r2, #0
    57dc:	movt	r2, #0
    57e0:	movw	r1, #0
    57e4:	movt	r1, #0
    57e8:	movw	r3, #3763	; 0xeb3
    57ec:	bl	0 <coda_set_error>
    57f0:	mvn	r0, #0
    57f4:	b	5774 <coda_type_get_special_type+0x30>

000057f8 <coda_type_get_special_base_type>:
    57f8:	cmp	r0, #0
    57fc:	str	r4, [sp, #-8]!
    5800:	str	lr, [sp, #4]
    5804:	beq	5864 <coda_type_get_special_base_type+0x6c>
    5808:	ldr	r3, [r0, #8]
    580c:	cmp	r3, #6
    5810:	bne	5834 <coda_type_get_special_base_type+0x3c>
    5814:	cmp	r1, #0
    5818:	beq	5888 <coda_type_get_special_base_type+0x90>
    581c:	ldr	r3, [r0, #44]	; 0x2c
    5820:	mov	r0, #0
    5824:	str	r3, [r1]
    5828:	ldr	r4, [sp]
    582c:	add	sp, sp, #4
    5830:	pop	{pc}		; (ldr pc, [sp], #4)
    5834:	movwhi	r2, #0
    5838:	movthi	r2, #0
    583c:	bhi	584c <coda_type_get_special_base_type+0x54>
    5840:	movw	r2, #0
    5844:	movt	r2, #0
    5848:	ldr	r2, [r2, r3, lsl #2]
    584c:	mvn	r0, #104	; 0x68
    5850:	movw	r1, #0
    5854:	movt	r1, #0
    5858:	bl	0 <coda_set_error>
    585c:	mvn	r0, #0
    5860:	b	5828 <coda_type_get_special_base_type+0x30>
    5864:	mvn	r0, #99	; 0x63
    5868:	movw	r2, #0
    586c:	movt	r2, #0
    5870:	movw	r1, #0
    5874:	movt	r1, #0
    5878:	movw	r3, #3783	; 0xec7
    587c:	bl	0 <coda_set_error>
    5880:	mvn	r0, #0
    5884:	b	5828 <coda_type_get_special_base_type+0x30>
    5888:	mvn	r0, #99	; 0x63
    588c:	movw	r2, #0
    5890:	movt	r2, #0
    5894:	movw	r1, #0
    5898:	movt	r1, #0
    589c:	movw	r3, #3794	; 0xed2
    58a0:	bl	0 <coda_set_error>
    58a4:	mvn	r0, #0
    58a8:	b	5828 <coda_type_get_special_base_type+0x30>
