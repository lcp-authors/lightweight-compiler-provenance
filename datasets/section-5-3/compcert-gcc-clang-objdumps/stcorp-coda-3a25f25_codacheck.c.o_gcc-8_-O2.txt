
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacheck.dir/tools/codacheck/codacheck.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_help>:
   0:	movw	r0, #0
   4:	movt	r0, #0
   8:	str	r4, [sp, #-8]!
   c:	str	lr, [sp, #4]
  10:	bl	0 <puts>
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	bl	0 <puts>
  20:	movw	r0, #0
  24:	movt	r0, #0
  28:	bl	0 <puts>
  2c:	movw	r0, #0
  30:	movt	r0, #0
  34:	bl	0 <puts>
  38:	movw	r0, #0
  3c:	movt	r0, #0
  40:	bl	0 <puts>
  44:	movw	r0, #0
  48:	movt	r0, #0
  4c:	bl	0 <puts>
  50:	movw	r0, #0
  54:	movt	r0, #0
  58:	bl	0 <puts>
  5c:	movw	r0, #0
  60:	movt	r0, #0
  64:	bl	0 <puts>
  68:	movw	r0, #0
  6c:	movt	r0, #0
  70:	bl	0 <puts>
  74:	movw	r0, #0
  78:	movt	r0, #0
  7c:	bl	0 <puts>
  80:	movw	r0, #0
  84:	movt	r0, #0
  88:	bl	0 <puts>
  8c:	movw	r0, #0
  90:	movt	r0, #0
  94:	bl	0 <puts>
  98:	movw	r0, #0
  9c:	movt	r0, #0
  a0:	bl	0 <puts>
  a4:	movw	r0, #0
  a8:	movt	r0, #0
  ac:	bl	0 <puts>
  b0:	movw	r0, #0
  b4:	movt	r0, #0
  b8:	bl	0 <puts>
  bc:	mov	r0, #10
  c0:	bl	0 <putchar>
  c4:	movw	r0, #0
  c8:	movt	r0, #0
  cc:	bl	0 <puts>
  d0:	movw	r0, #0
  d4:	movt	r0, #0
  d8:	bl	0 <puts>
  dc:	mov	r0, #10
  e0:	bl	0 <putchar>
  e4:	movw	r0, #0
  e8:	movt	r0, #0
  ec:	bl	0 <puts>
  f0:	movw	r0, #0
  f4:	movt	r0, #0
  f8:	bl	0 <puts>
  fc:	mov	r0, #10
 100:	bl	0 <putchar>
 104:	movw	r0, #0
 108:	movt	r0, #0
 10c:	bl	0 <puts>
 110:	movw	r0, #0
 114:	movt	r0, #0
 118:	bl	0 <puts>
 11c:	mov	r0, #10
 120:	bl	0 <putchar>
 124:	movw	r0, #0
 128:	movt	r0, #0
 12c:	bl	0 <puts>
 130:	movw	r0, #0
 134:	movt	r0, #0
 138:	bl	0 <puts>
 13c:	movw	r0, #0
 140:	movt	r0, #0
 144:	bl	0 <puts>
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	bl	0 <puts>
 154:	movw	r0, #0
 158:	movt	r0, #0
 15c:	bl	0 <puts>
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	bl	0 <puts>
 16c:	movw	r0, #0
 170:	movt	r0, #0
 174:	bl	0 <puts>
 178:	mov	r0, #10
 17c:	ldr	r4, [sp]
 180:	ldr	lr, [sp, #4]
 184:	add	sp, sp, #8
 188:	b	0 <putchar>

0000018c <check_file>:
 18c:	str	r4, [sp, #-8]!
 190:	mov	r4, r0
 194:	str	lr, [sp, #4]
 198:	sub	sp, sp, #40	; 0x28
 19c:	bl	0 <puts>
 1a0:	add	ip, sp, #28
 1a4:	add	r2, sp, #24
 1a8:	mov	r0, r4
 1ac:	add	r3, sp, #20
 1b0:	add	r1, sp, #32
 1b4:	stm	sp, {r2, ip}
 1b8:	add	r2, sp, #16
 1bc:	bl	0 <coda_recognize_file>
 1c0:	cmp	r0, #0
 1c4:	bne	30c <check_file+0x180>
 1c8:	movw	r3, #0
 1cc:	movt	r3, #0
 1d0:	ldr	r3, [r3]
 1d4:	cmp	r3, #0
 1d8:	beq	1f4 <check_file+0x68>
 1dc:	ldr	r3, [sp, #20]
 1e0:	cmp	r3, #0
 1e4:	beq	370 <check_file+0x1e4>
 1e8:	ldr	r3, [sp, #24]
 1ec:	cmp	r3, #0
 1f0:	beq	370 <check_file+0x1e4>
 1f4:	movw	r3, #0
 1f8:	movt	r3, #0
 1fc:	ldr	r3, [r3]
 200:	cmp	r3, #0
 204:	bne	2c0 <check_file+0x134>
 208:	mov	r0, r4
 20c:	add	r1, sp, #12
 210:	bl	0 <coda_open>
 214:	cmp	r0, #0
 218:	bne	274 <check_file+0xe8>
 21c:	movw	r3, #0
 220:	movt	r3, #0
 224:	ldr	r0, [sp, #12]
 228:	movw	r2, #0
 22c:	movt	r2, #0
 230:	ldr	r1, [r3]
 234:	mov	r3, #0
 238:	clz	r1, r1
 23c:	lsr	r1, r1, #5
 240:	bl	0 <coda_product_check>
 244:	cmp	r0, #0
 248:	bne	3c8 <check_file+0x23c>
 24c:	ldr	r0, [sp, #12]
 250:	bl	0 <coda_close>
 254:	cmp	r0, #0
 258:	bne	354 <check_file+0x1c8>
 25c:	mov	r0, #10
 260:	bl	0 <putchar>
 264:	add	sp, sp, #40	; 0x28
 268:	ldr	r4, [sp]
 26c:	add	sp, sp, #4
 270:	pop	{pc}		; (ldr pc, [sp], #4)
 274:	bl	0 <coda_get_errno>
 278:	ldr	r3, [r0]
 27c:	cmn	r3, #21
 280:	beq	39c <check_file+0x210>
 284:	bl	0 <coda_get_errno>
 288:	ldr	r0, [r0]
 28c:	bl	0 <coda_errno_to_string>
 290:	mov	r1, r0
 294:	movw	r0, #0
 298:	movt	r0, #0
 29c:	bl	0 <printf>
 2a0:	mov	r2, #1
 2a4:	movw	r3, #0
 2a8:	movt	r3, #0
 2ac:	str	r2, [r3]
 2b0:	add	sp, sp, #40	; 0x28
 2b4:	ldr	r4, [sp]
 2b8:	add	sp, sp, #4
 2bc:	pop	{pc}		; (ldr pc, [sp], #4)
 2c0:	ldr	r0, [sp, #16]
 2c4:	bl	0 <coda_type_get_format_name>
 2c8:	mov	r1, r0
 2cc:	movw	r0, #0
 2d0:	movt	r0, #0
 2d4:	bl	0 <printf>
 2d8:	ldr	r1, [sp, #20]
 2dc:	cmp	r1, #0
 2e0:	beq	300 <check_file+0x174>
 2e4:	ldr	r2, [sp, #24]
 2e8:	cmp	r2, #0
 2ec:	beq	300 <check_file+0x174>
 2f0:	movw	r0, #0
 2f4:	movt	r0, #0
 2f8:	ldr	r3, [sp, #28]
 2fc:	bl	0 <printf>
 300:	mov	r0, #10
 304:	bl	0 <putchar>
 308:	b	208 <check_file+0x7c>
 30c:	bl	0 <coda_get_errno>
 310:	ldr	r0, [r0]
 314:	bl	0 <coda_errno_to_string>
 318:	mov	r1, r0
 31c:	movw	r0, #0
 320:	movt	r0, #0
 324:	bl	0 <printf>
 328:	mov	r1, #0
 32c:	mov	r0, r1
 330:	bl	0 <coda_set_error>
 334:	mov	r2, #1
 338:	movw	r3, #0
 33c:	movt	r3, #0
 340:	str	r2, [r3]
 344:	add	sp, sp, #40	; 0x28
 348:	ldr	r4, [sp]
 34c:	add	sp, sp, #4
 350:	pop	{pc}		; (ldr pc, [sp], #4)
 354:	bl	0 <coda_get_errno>
 358:	ldr	r0, [r0]
 35c:	bl	0 <coda_errno_to_string>
 360:	mov	r1, r0
 364:	movw	r0, #0
 368:	movt	r0, #0
 36c:	b	29c <check_file+0x110>
 370:	movw	r0, #0
 374:	movt	r0, #0
 378:	bl	0 <puts>
 37c:	mov	r2, #1
 380:	movw	r3, #0
 384:	movt	r3, #0
 388:	str	r2, [r3]
 38c:	add	sp, sp, #40	; 0x28
 390:	ldr	r4, [sp]
 394:	add	sp, sp, #4
 398:	pop	{pc}		; (ldr pc, [sp], #4)
 39c:	mov	r0, #0
 3a0:	bl	0 <coda_set_option_use_mmap>
 3a4:	add	r1, sp, #12
 3a8:	mov	r0, r4
 3ac:	bl	0 <coda_open>
 3b0:	mov	r4, r0
 3b4:	mov	r0, #1
 3b8:	bl	0 <coda_set_option_use_mmap>
 3bc:	cmp	r4, #0
 3c0:	bne	284 <check_file+0xf8>
 3c4:	b	21c <check_file+0x90>
 3c8:	bl	0 <coda_get_errno>
 3cc:	ldr	r0, [r0]
 3d0:	bl	0 <coda_errno_to_string>
 3d4:	mov	r1, r0
 3d8:	movw	r0, #0
 3dc:	movt	r0, #0
 3e0:	bl	0 <printf>
 3e4:	mov	r2, #1
 3e8:	movw	r3, #0
 3ec:	movt	r3, #0
 3f0:	ldr	r0, [sp, #12]
 3f4:	str	r2, [r3]
 3f8:	bl	0 <coda_close>
 3fc:	add	sp, sp, #40	; 0x28
 400:	ldr	r4, [sp]
 404:	add	sp, sp, #4
 408:	pop	{pc}		; (ldr pc, [sp], #4)

0000040c <print_error>:
 40c:	str	r4, [sp, #-8]!
 410:	mov	r4, r0
 414:	movw	r0, #0
 418:	movt	r0, #0
 41c:	str	lr, [sp, #4]
 420:	bl	0 <printf>
 424:	cmp	r4, #0
 428:	beq	448 <print_error+0x3c>
 42c:	movw	r0, #0
 430:	movt	r0, #0
 434:	bl	0 <printf>
 438:	movw	r1, #0
 43c:	movt	r1, #0
 440:	mov	r0, r4
 444:	bl	0 <coda_cursor_print_path>
 448:	mov	r0, #10
 44c:	bl	0 <putchar>
 450:	movw	r3, #0
 454:	movt	r3, #0
 458:	ldr	r4, [sp]
 45c:	mov	r2, #1
 460:	add	sp, sp, #4
 464:	str	r2, [r3]
 468:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text.startup:

00000000 <main>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	mov	r4, #0
   8:	movw	r5, #0
   c:	movt	r5, #0
  10:	strd	r6, [sp, #8]
  14:	movw	r6, #0
  18:	movt	r6, #0
  1c:	movw	r7, #0
  20:	movt	r7, #0
  24:	cmp	r0, #1
  28:	strd	r8, [sp, #16]
  2c:	strd	sl, [sp, #24]
  30:	str	lr, [sp, #32]
  34:	sub	sp, sp, #1024	; 0x400
  38:	sub	sp, sp, #12
  3c:	str	r4, [r5]
  40:	str	r4, [r6]
  44:	str	r4, [r7]
  48:	beq	70 <main+0x70>
  4c:	mov	sl, r1
  50:	mov	r8, r0
  54:	ldr	r9, [sl, #4]
  58:	movw	r1, #0
  5c:	movt	r1, #0
  60:	mov	r0, r9
  64:	bl	0 <strcmp>
  68:	cmp	r0, r4
  6c:	bne	7c <main+0x7c>
  70:	bl	0 <main>
  74:	mov	r0, #0
  78:	bl	0 <exit>
  7c:	movw	r1, #0
  80:	movt	r1, #0
  84:	mov	r0, r9
  88:	bl	0 <strcmp>
  8c:	cmp	r0, r4
  90:	beq	70 <main+0x70>
  94:	movw	r1, #0
  98:	movt	r1, #0
  9c:	mov	r0, r9
  a0:	bl	0 <strcmp>
  a4:	cmp	r0, #0
  a8:	beq	21c <main+0x21c>
  ac:	movw	r1, #0
  b0:	movt	r1, #0
  b4:	mov	r0, r9
  b8:	bl	0 <strcmp>
  bc:	cmp	r0, #0
  c0:	beq	21c <main+0x21c>
  c4:	cmp	r8, #2
  c8:	ble	24c <main+0x24c>
  cc:	mov	r0, r9
  d0:	movw	r1, #0
  d4:	movt	r1, #0
  d8:	bl	0 <strcmp>
  dc:	cmp	r0, #0
  e0:	beq	318 <main+0x318>
  e4:	mov	r1, r4
  e8:	movw	r2, #0
  ec:	movt	r2, #0
  f0:	ldr	r0, [sl]
  f4:	bl	0 <coda_set_definition_path_conditional>
  f8:	cmp	r0, #0
  fc:	bne	394 <main+0x394>
 100:	mov	r4, #1
 104:	movw	r1, #0
 108:	movt	r1, #0
 10c:	add	fp, sl, r4, lsl #2
 110:	mov	r3, #1
 114:	movw	r2, #0
 118:	movt	r2, #0
 11c:	str	r1, [sp]
 120:	movw	r1, #0
 124:	movt	r1, #0
 128:	str	r1, [sp, #4]
 12c:	movw	r1, #0
 130:	movt	r1, #0
 134:	str	r3, [sp, #8]
 138:	movw	r3, #0
 13c:	movt	r3, #0
 140:	str	r1, [sp, #12]
 144:	movw	r1, #0
 148:	movt	r1, #0
 14c:	str	sl, [sp, #16]
 150:	mov	sl, r2
 154:	str	r7, [sp, #20]
 158:	mov	r7, r3
 15c:	str	r1, [sp, #24]
 160:	movw	r1, #0
 164:	movt	r1, #0
 168:	str	r1, [sp, #28]
 16c:	b	1f8 <main+0x1f8>
 170:	mov	r1, sl
 174:	mov	r0, r9
 178:	bl	0 <strcmp>
 17c:	cmp	r0, #0
 180:	beq	210 <main+0x210>
 184:	mov	r0, r9
 188:	ldr	r1, [sp]
 18c:	bl	0 <strcmp>
 190:	cmp	r0, #0
 194:	beq	2f4 <main+0x2f4>
 198:	mov	r0, r9
 19c:	ldr	r1, [sp, #4]
 1a0:	bl	0 <strcmp>
 1a4:	cmp	r0, #0
 1a8:	beq	2f4 <main+0x2f4>
 1ac:	mov	r0, r9
 1b0:	ldr	r1, [sp, #12]
 1b4:	bl	0 <strcmp>
 1b8:	cmp	r0, #0
 1bc:	beq	308 <main+0x308>
 1c0:	mov	r0, r9
 1c4:	ldr	r1, [sp, #24]
 1c8:	bl	0 <strcmp>
 1cc:	cmp	r0, #0
 1d0:	beq	308 <main+0x308>
 1d4:	mov	r0, r9
 1d8:	ldr	r1, [sp, #28]
 1dc:	bl	0 <strcmp>
 1e0:	cmp	r0, #0
 1e4:	bne	328 <main+0x328>
 1e8:	str	r0, [sp, #8]
 1ec:	add	r4, r4, #1
 1f0:	cmp	r8, r4
 1f4:	ble	300 <main+0x300>
 1f8:	ldr	r9, [fp], #4
 1fc:	mov	r1, r7
 200:	mov	r0, r9
 204:	bl	0 <strcmp>
 208:	cmp	r0, #0
 20c:	bne	170 <main+0x170>
 210:	mov	r3, #1
 214:	str	r3, [r5]
 218:	b	1ec <main+0x1ec>
 21c:	bl	0 <coda_get_libcoda_version>
 220:	mov	r1, r0
 224:	movw	r0, #0
 228:	movt	r0, #0
 22c:	bl	0 <printf>
 230:	movw	r0, #0
 234:	movt	r0, #0
 238:	bl	0 <puts>
 23c:	mov	r0, #10
 240:	bl	0 <putchar>
 244:	mov	r0, #0
 248:	bl	0 <exit>
 24c:	mov	r1, r4
 250:	movw	r2, #0
 254:	movt	r2, #0
 258:	ldr	r0, [sl]
 25c:	bl	0 <coda_set_definition_path_conditional>
 260:	cmp	r0, #0
 264:	moveq	r4, #1
 268:	bne	394 <main+0x394>
 26c:	cmp	r8, r4
 270:	movle	r3, #1
 274:	strle	r3, [sp, #8]
 278:	bgt	104 <main+0x104>
 27c:	bl	0 <coda_init>
 280:	subs	r5, r0, #0
 284:	bne	394 <main+0x394>
 288:	bl	0 <coda_set_option_perform_boundary_checks>
 28c:	mov	r0, r5
 290:	bl	0 <coda_set_option_perform_conversions>
 294:	ldr	r0, [sp, #8]
 298:	bl	0 <coda_set_option_use_mmap>
 29c:	b	2b4 <main+0x2b4>
 2a0:	ldr	r0, [sl, r4, lsl #2]
 2a4:	add	r4, r4, #1
 2a8:	bl	18c <main+0x18c>
 2ac:	mov	r0, #0
 2b0:	bl	0 <fflush>
 2b4:	cmp	r4, r8
 2b8:	blt	2a0 <main+0x2a0>
 2bc:	bl	0 <coda_done>
 2c0:	movw	r3, #0
 2c4:	movt	r3, #0
 2c8:	ldr	r0, [r3]
 2cc:	cmp	r0, #0
 2d0:	bne	3c8 <main+0x3c8>
 2d4:	add	sp, sp, #1024	; 0x400
 2d8:	add	sp, sp, #12
 2dc:	ldrd	r4, [sp]
 2e0:	ldrd	r6, [sp, #8]
 2e4:	ldrd	r8, [sp, #16]
 2e8:	ldrd	sl, [sp, #24]
 2ec:	add	sp, sp, #32
 2f0:	pop	{pc}		; (ldr pc, [sp], #4)
 2f4:	mov	r3, #1
 2f8:	str	r3, [r6]
 2fc:	b	1ec <main+0x1ec>
 300:	ldr	sl, [sp, #16]
 304:	b	27c <main+0x27c>
 308:	ldr	r3, [sp, #20]
 30c:	mov	r2, #1
 310:	str	r2, [r3]
 314:	b	1ec <main+0x1ec>
 318:	ldr	r0, [sl, #8]
 31c:	mov	r4, #3
 320:	bl	0 <coda_set_definition_path>
 324:	b	26c <main+0x26c>
 328:	movw	r1, #0
 32c:	movt	r1, #0
 330:	mov	r0, r9
 334:	bl	0 <strcmp>
 338:	cmp	r0, #0
 33c:	ldr	sl, [sp, #16]
 340:	bne	350 <main+0x350>
 344:	sub	r3, r8, #1
 348:	cmp	r3, r4
 34c:	beq	388 <main+0x388>
 350:	ldrb	r3, [r9]
 354:	cmp	r3, #45	; 0x2d
 358:	bne	27c <main+0x27c>
 35c:	movw	r3, #0
 360:	movt	r3, #0
 364:	mov	r2, #25
 368:	mov	r1, #1
 36c:	ldr	r3, [r3]
 370:	movw	r0, #0
 374:	movt	r0, #0
 378:	bl	0 <fwrite>
 37c:	bl	0 <main>
 380:	mov	r0, #1
 384:	bl	0 <exit>
 388:	bl	0 <coda_init>
 38c:	cmp	r0, #0
 390:	beq	3d0 <main+0x3d0>
 394:	movw	r3, #0
 398:	movt	r3, #0
 39c:	ldr	r4, [r3]
 3a0:	bl	0 <coda_get_errno>
 3a4:	ldr	r0, [r0]
 3a8:	bl	0 <coda_errno_to_string>
 3ac:	mov	r2, r0
 3b0:	movw	r1, #0
 3b4:	movt	r1, #0
 3b8:	mov	r0, r4
 3bc:	bl	0 <fprintf>
 3c0:	mov	r0, #1
 3c4:	bl	0 <exit>
 3c8:	mov	r0, #1
 3cc:	bl	0 <exit>
 3d0:	mov	r0, #0
 3d4:	movw	r5, #0
 3d8:	movt	r5, #0
 3dc:	bl	0 <coda_set_option_perform_boundary_checks>
 3e0:	mov	r0, #0
 3e4:	mov	r6, r0
 3e8:	bl	0 <coda_set_option_perform_conversions>
 3ec:	ldr	r0, [sp, #8]
 3f0:	bl	0 <coda_set_option_use_mmap>
 3f4:	mov	r4, #0
 3f8:	b	418 <main+0x418>
 3fc:	cmp	r0, #10
 400:	beq	448 <main+0x448>
 404:	add	r3, sp, #32
 408:	strb	r0, [r3, r4]
 40c:	add	r4, r4, #1
 410:	cmp	r4, #1000	; 0x3e8
 414:	beq	474 <main+0x474>
 418:	ldr	r0, [r5]
 41c:	bl	0 <getc>
 420:	uxtb	r0, r0
 424:	cmp	r0, #13
 428:	bne	3fc <main+0x3fc>
 42c:	ldr	r0, [r5]
 430:	bl	0 <getc>
 434:	uxtb	r0, r0
 438:	cmp	r0, #10
 43c:	beq	448 <main+0x448>
 440:	ldr	r1, [r5]
 444:	bl	0 <ungetc>
 448:	add	r3, sp, #1024	; 0x400
 44c:	cmp	r4, #0
 450:	add	r3, r3, #8
 454:	add	r3, r3, r4
 458:	strb	r6, [r3, #-1000]	; 0xfffffc18
 45c:	beq	3f4 <main+0x3f4>
 460:	add	r0, sp, #32
 464:	bl	18c <main+0x18c>
 468:	mov	r0, #0
 46c:	bl	0 <fflush>
 470:	b	3f4 <main+0x3f4>
 474:	movw	r3, #0
 478:	movt	r3, #0
 47c:	movw	r1, #0
 480:	movt	r1, #0
 484:	movw	r0, #0
 488:	movt	r0, #0
 48c:	mov	r2, #316	; 0x13c
 490:	bl	0 <__assert_fail>
