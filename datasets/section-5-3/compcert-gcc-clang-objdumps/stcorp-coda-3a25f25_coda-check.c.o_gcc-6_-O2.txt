
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-check.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <check_data>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	sub	sp, sp, #924	; 0x39c
       8:	mov	fp, r1
       c:	ldr	r1, [sp, #960]	; 0x3c0
      10:	str	r2, [sp, #16]
      14:	cmp	r1, #0
      18:	beq	1670 <check_data+0x1670>
      1c:	add	r1, sp, #56	; 0x38
      20:	mov	r9, r3
      24:	mov	r7, r0
      28:	bl	0 <coda_cursor_get_type>
      2c:	cmp	r0, #0
      30:	bne	47c <check_data+0x47c>
      34:	add	r1, sp, #48	; 0x30
      38:	ldr	r0, [sp, #56]	; 0x38
      3c:	bl	0 <coda_type_get_class>
      40:	subs	r3, r0, #0
      44:	mov	r5, r3
      48:	str	r3, [sp, #28]
      4c:	bne	47c <check_data+0x47c>
      50:	ldr	r3, [fp]
      54:	cmp	r3, #0
      58:	beq	11c <check_data+0x11c>
      5c:	add	r1, sp, #64	; 0x40
      60:	mov	r0, r7
      64:	bl	0 <coda_cursor_get_type_class>
      68:	cmp	r0, #0
      6c:	bne	47c <check_data+0x47c>
      70:	add	r1, sp, #60	; 0x3c
      74:	ldr	r0, [fp]
      78:	bl	0 <coda_type_get_class>
      7c:	cmp	r0, #0
      80:	bne	47c <check_data+0x47c>
      84:	ldr	r0, [sp, #64]	; 0x40
      88:	ldr	r3, [sp, #60]	; 0x3c
      8c:	cmp	r0, r3
      90:	bne	bc <check_data+0xbc>
      94:	cmp	r0, #6
      98:	ldrls	pc, [pc, r0, lsl #2]
      9c:	b	11c <check_data+0x11c>
      a0:	.word	0x000009ac
      a4:	.word	0x000008a4
      a8:	.word	0x00000818
      ac:	.word	0x00000818
      b0:	.word	0x0000011c
      b4:	.word	0x0000011c
      b8:	.word	0x00000778
      bc:	bl	0 <coda_type_get_class_name>
      c0:	mov	r4, r0
      c4:	ldr	r0, [sp, #60]	; 0x3c
      c8:	bl	0 <coda_type_get_class_name>
      cc:	mov	r2, r4
      d0:	ldr	r1, [pc, #3948]	; 1044 <check_data+0x1044>
      d4:	mov	r3, r0
      d8:	ldr	r0, [pc, #3944]	; 1048 <check_data+0x1048>
      dc:	bl	0 <coda_set_error>
      e0:	ldr	r3, [pc, #3940]	; 104c <check_data+0x104c>
      e4:	bl	0 <__aeabi_read_tp>
      e8:	mov	r4, r0
      ec:	ldr	r3, [pc, r3]
      f0:	ldr	r0, [r0, r3]
      f4:	bl	0 <coda_errno_to_string>
      f8:	ldr	r3, [sp, #964]	; 0x3c4
      fc:	ldr	r2, [sp, #968]	; 0x3c8
     100:	mov	r1, r0
     104:	mov	r0, r7
     108:	blx	r3
     10c:	ldr	r3, [pc, #3900]	; 1050 <check_data+0x1050>
     110:	ldr	r3, [pc, r3]
     114:	str	r5, [r4, r3]
     118:	str	r5, [fp]
     11c:	cmp	r9, #0
     120:	bne	48c <check_data+0x48c>
     124:	ldr	r3, [sp, #16]
     128:	cmp	r3, #0
     12c:	beq	4c8 <check_data+0x4c8>
     130:	ldr	r3, [sp, #48]	; 0x30
     134:	sub	r3, r3, #2
     138:	cmp	r3, #4
     13c:	ldrls	pc, [pc, r3, lsl #2]
     140:	b	220 <check_data+0x220>
     144:	.word	0x00000530
     148:	.word	0x00000530
     14c:	.word	0x00000580
     150:	.word	0x000005d8
     154:	.word	0x000004d4
     158:	ldr	r3, [sp, #112]	; 0x70
     15c:	cmp	r3, #0
     160:	blt	f94 <check_data+0xf94>
     164:	ldr	r0, [fp]
     168:	add	r2, sp, #400	; 0x190
     16c:	cmp	r0, #0
     170:	add	r1, sp, #144	; 0x90
     174:	ldreq	r0, [sp, #56]	; 0x38
     178:	bl	0 <coda_type_get_fixed_value>
     17c:	subs	r3, r0, #0
     180:	str	r3, [sp, #28]
     184:	bne	47c <check_data+0x47c>
     188:	ldr	r0, [sp, #112]	; 0x70
     18c:	cmp	r0, #0
     190:	ble	120c <check_data+0x120c>
     194:	add	r0, r0, #1
     198:	bl	0 <malloc>
     19c:	ldr	r2, [sp, #112]	; 0x70
     1a0:	cmp	r0, #0
     1a4:	mov	r5, r0
     1a8:	mov	r4, r0
     1ac:	ldreq	r3, [pc, #3744]	; 1054 <check_data+0x1054>
     1b0:	addeq	r2, r2, #1
     1b4:	beq	468 <check_data+0x468>
     1b8:	mov	r1, r0
     1bc:	add	r2, r2, #1
     1c0:	mov	r0, r7
     1c4:	bl	0 <coda_cursor_read_string>
     1c8:	cmp	r0, #0
     1cc:	bne	1684 <check_data+0x1684>
     1d0:	ldr	r1, [sp, #144]	; 0x90
     1d4:	cmp	r1, #0
     1d8:	beq	200 <check_data+0x200>
     1dc:	ldr	r2, [sp, #112]	; 0x70
     1e0:	ldr	r3, [sp, #400]	; 0x190
     1e4:	cmp	r2, r3
     1e8:	beq	125c <check_data+0x125c>
     1ec:	ldr	r2, [sp, #968]	; 0x3c8
     1f0:	ldr	r1, [pc, #3680]	; 1058 <check_data+0x1058>
     1f4:	mov	r0, r7
     1f8:	ldr	r3, [sp, #964]	; 0x3c4
     1fc:	blx	r3
     200:	ldr	r3, [sp, #56]	; 0x38
     204:	ldr	r3, [r3, #44]	; 0x2c
     208:	cmp	r3, #1
     20c:	beq	12a8 <check_data+0x12a8>
     210:	cmp	r4, #0
     214:	beq	220 <check_data+0x220>
     218:	mov	r0, r4
     21c:	bl	0 <free>
     220:	add	r1, sp, #52	; 0x34
     224:	mov	r0, r7
     228:	bl	0 <coda_cursor_has_attributes>
     22c:	subs	r6, r0, #0
     230:	bne	47c <check_data+0x47c>
     234:	ldr	r3, [sp, #52]	; 0x34
     238:	ldr	r0, [fp]
     23c:	cmp	r3, #0
     240:	beq	2c4 <check_data+0x2c4>
     244:	cmp	r0, #0
     248:	str	r6, [sp, #144]	; 0x90
     24c:	beq	260 <check_data+0x260>
     250:	add	r1, sp, #144	; 0x90
     254:	bl	0 <coda_type_get_attributes>
     258:	cmp	r0, #0
     25c:	bne	47c <check_data+0x47c>
     260:	mov	r0, r7
     264:	bl	0 <coda_cursor_goto_attributes>
     268:	subs	r3, r0, #0
     26c:	bne	47c <check_data+0x47c>
     270:	ldr	r1, [sp, #968]	; 0x3c8
     274:	add	r2, sp, #400	; 0x190
     278:	str	r1, [sp, #8]
     27c:	ldr	r1, [sp, #964]	; 0x3c4
     280:	str	r2, [sp]
     284:	str	r1, [sp, #4]
     288:	ldr	r2, [sp, #16]
     28c:	add	r1, sp, #144	; 0x90
     290:	mov	r0, r7
     294:	bl	0 <check_data>
     298:	cmp	r0, #0
     29c:	bne	47c <check_data+0x47c>
     2a0:	mov	r0, r7
     2a4:	bl	0 <coda_cursor_goto_parent>
     2a8:	ldr	r0, [fp]
     2ac:	cmp	r0, #0
     2b0:	beq	b44 <check_data+0xb44>
     2b4:	ldr	r3, [sp, #144]	; 0x90
     2b8:	cmp	r3, #0
     2bc:	streq	r3, [fp]
     2c0:	beq	b44 <check_data+0xb44>
     2c4:	cmp	r0, #0
     2c8:	beq	b44 <check_data+0xb44>
     2cc:	ldr	r3, [sp, #48]	; 0x30
     2d0:	cmp	r3, #1
     2d4:	beq	678 <check_data+0x678>
     2d8:	bcc	c38 <check_data+0xc38>
     2dc:	cmp	r3, #6
     2e0:	bne	36c <check_data+0x36c>
     2e4:	mov	r3, #0
     2e8:	add	r1, sp, #144	; 0x90
     2ec:	mov	r0, r7
     2f0:	str	r3, [sp, #400]	; 0x190
     2f4:	bl	0 <coda_cursor_get_special_type>
     2f8:	cmp	r0, #0
     2fc:	bne	47c <check_data+0x47c>
     300:	ldr	r3, [sp, #144]	; 0x90
     304:	cmp	r3, #0
     308:	beq	16ac <check_data+0x16ac>
     30c:	ldr	r0, [fp]
     310:	cmp	r0, #0
     314:	beq	328 <check_data+0x328>
     318:	add	r1, sp, #400	; 0x190
     31c:	bl	0 <coda_type_get_special_base_type>
     320:	cmp	r0, #0
     324:	bne	47c <check_data+0x47c>
     328:	mov	r0, r7
     32c:	bl	0 <coda_cursor_use_base_type_of_special_type>
     330:	cmp	r0, #0
     334:	bne	47c <check_data+0x47c>
     338:	ldr	r3, [sp, #968]	; 0x3c8
     33c:	ldr	r2, [sp, #16]
     340:	str	r3, [sp, #8]
     344:	ldr	r3, [sp, #964]	; 0x3c4
     348:	add	r1, sp, #400	; 0x190
     34c:	str	r3, [sp, #4]
     350:	ldr	r3, [sp, #960]	; 0x3c0
     354:	mov	r0, r7
     358:	str	r3, [sp]
     35c:	mov	r3, r9
     360:	bl	0 <check_data>
     364:	cmp	r0, #0
     368:	bne	47c <check_data+0x47c>
     36c:	ldr	r3, [sp, #28]
     370:	eor	r4, r3, #1
     374:	cmp	r9, #0
     378:	moveq	r4, #0
     37c:	andne	r4, r4, #1
     380:	cmp	r4, #0
     384:	beq	480 <check_data+0x480>
     388:	ldr	r3, [r7, #4]
     38c:	add	r3, r7, r3, lsl #4
     390:	ldr	ip, [r3, #-8]
     394:	ldr	r3, [ip]
     398:	cmp	r3, #100	; 0x64
     39c:	bne	480 <check_data+0x480>
     3a0:	ldr	r3, [ip, #8]
     3a4:	cmp	r3, #2
     3a8:	bne	480 <check_data+0x480>
     3ac:	ldr	r3, [sp, #960]	; 0x3c0
     3b0:	ldr	sl, [r7]
     3b4:	ldr	r0, [ip, #16]
     3b8:	ldrd	r2, [r3]
     3bc:	asr	r1, r0, #31
     3c0:	mov	r9, r3
     3c4:	mov	r8, r2
     3c8:	ldr	r3, [sl, #16]
     3cc:	lsr	r4, r8, #3
     3d0:	cmp	r3, #2
     3d4:	orr	r4, r4, r9, lsl #29
     3d8:	beq	1388 <check_data+0x1388>
     3dc:	ands	r3, r8, #7
     3e0:	movne	ip, #1
     3e4:	moveq	ip, #0
     3e8:	asr	r5, r9, #3
     3ec:	adds	r2, r4, ip
     3f0:	str	r3, [sp, #16]
     3f4:	adc	r3, r5, #0
     3f8:	cmp	r1, r3
     3fc:	cmpeq	r0, r2
     400:	beq	480 <check_data+0x480>
     404:	add	fp, sp, #112	; 0x70
     408:	mov	r2, fp
     40c:	add	sl, sp, #144	; 0x90
     410:	bl	0 <coda_str64>
     414:	and	r8, r8, #7
     418:	mov	r0, r4
     41c:	mov	r1, r5
     420:	mov	r2, sl
     424:	mov	r9, #0
     428:	bl	0 <coda_str64>
     42c:	orrs	r3, r8, r9
     430:	bne	1548 <check_data+0x1548>
     434:	mov	r3, sl
     438:	mov	r2, fp
     43c:	add	r0, sp, #400	; 0x190
     440:	ldr	r1, [pc, #3092]	; 105c <check_data+0x105c>
     444:	bl	0 <sprintf>
     448:	ldr	r2, [sp, #968]	; 0x3c8
     44c:	add	r1, sp, #400	; 0x190
     450:	mov	r0, r7
     454:	ldr	r3, [sp, #964]	; 0x3c4
     458:	blx	r3
     45c:	b	480 <check_data+0x480>
     460:	mov	r3, #524	; 0x20c
     464:	mov	r2, r4
     468:	str	r3, [sp]
     46c:	ldr	r1, [pc, #3316]	; 1168 <check_data+0x1168>
     470:	ldr	r3, [pc, #3304]	; 1160 <check_data+0x1160>
     474:	mvn	r0, #0
     478:	bl	0 <coda_set_error>
     47c:	mvn	r6, #0
     480:	mov	r0, r6
     484:	add	sp, sp, #924	; 0x39c
     488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     48c:	ldr	r3, [sp, #48]	; 0x30
     490:	cmp	r3, #6
     494:	bhi	124 <check_data+0x124>
     498:	mov	r2, #1
     49c:	lsl	r3, r2, r3
     4a0:	tst	r3, #67	; 0x43
     4a4:	bne	e10 <check_data+0xe10>
     4a8:	tst	r3, #60	; 0x3c
     4ac:	beq	124 <check_data+0x124>
     4b0:	ldr	r1, [sp, #960]	; 0x3c0
     4b4:	mov	r0, r7
     4b8:	bl	0 <coda_cursor_get_bit_size>
     4bc:	cmp	r0, #0
     4c0:	beq	124 <check_data+0x124>
     4c4:	b	47c <check_data+0x47c>
     4c8:	ldr	r3, [sp, #16]
     4cc:	str	r3, [sp, #28]
     4d0:	b	220 <check_data+0x220>
     4d4:	add	r1, sp, #144	; 0x90
     4d8:	mov	r0, r7
     4dc:	bl	0 <coda_cursor_get_special_type>
     4e0:	subs	r3, r0, #0
     4e4:	str	r3, [sp, #28]
     4e8:	bne	47c <check_data+0x47c>
     4ec:	ldr	r3, [sp, #144]	; 0x90
     4f0:	cmp	r3, #2
     4f4:	bne	220 <check_data+0x220>
     4f8:	add	r1, sp, #400	; 0x190
     4fc:	mov	r0, r7
     500:	bl	0 <coda_cursor_read_double>
     504:	cmp	r0, #0
     508:	beq	220 <check_data+0x220>
     50c:	ldr	r3, [pc, #2892]	; 1060 <check_data+0x1060>
     510:	bl	0 <__aeabi_read_tp>
     514:	ldr	r3, [pc, r3]
     518:	ldr	r0, [r0, r3]
     51c:	add	r3, r0, #104	; 0x68
     520:	cmn	r0, #300	; 0x12c
     524:	cmpne	r3, #1
     528:	bls	564 <check_data+0x564>
     52c:	b	47c <check_data+0x47c>
     530:	add	r1, sp, #400	; 0x190
     534:	mov	r0, r7
     538:	bl	0 <coda_cursor_read_double>
     53c:	cmp	r0, #0
     540:	beq	220 <check_data+0x220>
     544:	ldr	r3, [pc, #2840]	; 1064 <check_data+0x1064>
     548:	bl	0 <__aeabi_read_tp>
     54c:	ldr	r3, [pc, r3]
     550:	ldr	r0, [r0, r3]
     554:	add	r3, r0, #104	; 0x68
     558:	cmn	r0, #300	; 0x12c
     55c:	cmpne	r3, #1
     560:	bhi	47c <check_data+0x47c>
     564:	bl	0 <coda_errno_to_string>
     568:	ldr	r2, [sp, #968]	; 0x3c8
     56c:	ldr	r3, [sp, #964]	; 0x3c4
     570:	mov	r1, r0
     574:	mov	r0, r7
     578:	blx	r3
     57c:	b	220 <check_data+0x220>
     580:	add	r1, sp, #112	; 0x70
     584:	mov	r0, r7
     588:	bl	0 <coda_cursor_get_string_length>
     58c:	cmp	r0, #0
     590:	beq	158 <check_data+0x158>
     594:	ldr	r3, [pc, #2764]	; 1068 <check_data+0x1068>
     598:	bl	0 <__aeabi_read_tp>
     59c:	ldr	r3, [pc, r3]
     5a0:	ldr	r0, [r0, r3]
     5a4:	add	r3, r0, #104	; 0x68
     5a8:	cmn	r0, #300	; 0x12c
     5ac:	cmpne	r3, #1
     5b0:	bhi	47c <check_data+0x47c>
     5b4:	bl	0 <coda_errno_to_string>
     5b8:	ldr	r2, [sp, #968]	; 0x3c8
     5bc:	ldr	r3, [sp, #964]	; 0x3c4
     5c0:	mov	r1, r0
     5c4:	mov	r0, r7
     5c8:	blx	r3
     5cc:	mov	r3, #1
     5d0:	str	r3, [sp, #28]
     5d4:	b	220 <check_data+0x220>
     5d8:	cmp	r9, #0
     5dc:	beq	fac <check_data+0xfac>
     5e0:	ldr	r3, [sp, #960]	; 0x3c0
     5e4:	ldrd	r4, [r3]
     5e8:	cmp	r4, #0
     5ec:	sbcs	r3, r5, #0
     5f0:	blt	1370 <check_data+0x1370>
     5f4:	mov	r1, #0
     5f8:	and	r0, r4, #7
     5fc:	orrs	r1, r0, r1
     600:	lsr	r2, r4, #3
     604:	orr	r2, r2, r5, lsl #29
     608:	ldr	r0, [fp]
     60c:	movne	r1, #1
     610:	moveq	r1, #0
     614:	adds	r4, r2, r1
     618:	asr	r3, r5, #3
     61c:	adc	r5, r3, #0
     620:	cmp	r0, #0
     624:	add	r2, sp, #400	; 0x190
     628:	ldreq	r0, [sp, #56]	; 0x38
     62c:	add	r1, sp, #144	; 0x90
     630:	bl	0 <coda_type_get_fixed_value>
     634:	subs	r3, r0, #0
     638:	str	r3, [sp, #28]
     63c:	bne	47c <check_data+0x47c>
     640:	ldr	r3, [sp, #144]	; 0x90
     644:	cmp	r3, #0
     648:	beq	220 <check_data+0x220>
     64c:	ldr	r3, [sp, #400]	; 0x190
     650:	asr	r1, r3, #31
     654:	cmp	r5, r1
     658:	cmpeq	r4, r3
     65c:	beq	f30 <check_data+0xf30>
     660:	ldr	r2, [sp, #968]	; 0x3c8
     664:	ldr	r1, [pc, #2560]	; 106c <check_data+0x106c>
     668:	mov	r0, r7
     66c:	ldr	r3, [sp, #964]	; 0x3c4
     670:	blx	r3
     674:	b	220 <check_data+0x220>
     678:	add	sl, sp, #920	; 0x398
     67c:	mov	r3, #0
     680:	str	r3, [sl, #-776]!	; 0xfffffcf8
     684:	mov	r1, sl
     688:	bl	0 <coda_type_get_array_base_type>
     68c:	cmp	r0, #0
     690:	bne	47c <check_data+0x47c>
     694:	add	r1, sp, #400	; 0x190
     698:	mov	r0, r7
     69c:	bl	0 <coda_cursor_get_num_elements>
     6a0:	cmp	r0, #0
     6a4:	bne	47c <check_data+0x47c>
     6a8:	ldr	r3, [sp, #400]	; 0x190
     6ac:	cmp	r3, #0
     6b0:	ble	36c <check_data+0x36c>
     6b4:	mov	r0, r7
     6b8:	bl	0 <coda_cursor_goto_first_array_element>
     6bc:	subs	r8, r0, #0
     6c0:	bne	47c <check_data+0x47c>
     6c4:	ldr	r3, [sp, #400]	; 0x190
     6c8:	cmp	r3, #0
     6cc:	ble	fec <check_data+0xfec>
     6d0:	str	r6, [sp, #32]
     6d4:	str	fp, [sp, #36]	; 0x24
     6d8:	add	sl, sp, #144	; 0x90
     6dc:	ldr	r6, [sp, #16]
     6e0:	ldr	fp, [sp, #968]	; 0x3c8
     6e4:	b	6f4 <check_data+0x6f4>
     6e8:	add	r8, r8, #1
     6ec:	cmp	r8, r3
     6f0:	bge	fe4 <check_data+0xfe4>
     6f4:	ldr	r3, [sp, #964]	; 0x3c4
     6f8:	str	fp, [sp, #8]
     6fc:	str	r3, [sp, #4]
     700:	add	r3, sp, #64	; 0x40
     704:	str	r3, [sp]
     708:	mov	r2, r6
     70c:	mov	r3, r9
     710:	mov	r1, sl
     714:	mov	r0, r7
     718:	bl	0 <check_data>
     71c:	cmp	r0, #0
     720:	bne	47c <check_data+0x47c>
     724:	cmp	r9, #0
     728:	beq	750 <check_data+0x750>
     72c:	ldr	r3, [sp, #960]	; 0x3c0
     730:	ldrd	r0, [sp, #64]	; 0x40
     734:	ldrd	r2, [r3]
     738:	adds	r4, r2, r0
     73c:	adc	r5, r3, r1
     740:	ldr	r1, [sp, #960]	; 0x3c0
     744:	mov	r2, r4
     748:	mov	r3, r5
     74c:	strd	r2, [r1]
     750:	ldr	r3, [sp, #400]	; 0x190
     754:	sub	r2, r3, #1
     758:	cmp	r2, r8
     75c:	ble	6e8 <check_data+0x6e8>
     760:	mov	r0, r7
     764:	bl	0 <coda_cursor_goto_next_array_element>
     768:	cmp	r0, #0
     76c:	bne	47c <check_data+0x47c>
     770:	ldr	r3, [sp, #400]	; 0x190
     774:	b	6e8 <check_data+0x6e8>
     778:	add	r1, sp, #144	; 0x90
     77c:	mov	r0, r7
     780:	bl	0 <coda_cursor_get_special_type>
     784:	cmp	r0, #0
     788:	bne	47c <check_data+0x47c>
     78c:	add	r1, sp, #400	; 0x190
     790:	ldr	r0, [fp]
     794:	bl	0 <coda_type_get_special_type>
     798:	subs	r4, r0, #0
     79c:	bne	47c <check_data+0x47c>
     7a0:	ldr	r0, [sp, #144]	; 0x90
     7a4:	ldr	r3, [sp, #400]	; 0x190
     7a8:	cmp	r0, r3
     7ac:	beq	80c <check_data+0x80c>
     7b0:	bl	0 <coda_type_get_special_type_name>
     7b4:	mov	r5, r0
     7b8:	ldr	r0, [sp, #400]	; 0x190
     7bc:	bl	0 <coda_type_get_special_type_name>
     7c0:	mov	r2, r5
     7c4:	ldr	r1, [pc, #2212]	; 1070 <check_data+0x1070>
     7c8:	mov	r3, r0
     7cc:	ldr	r0, [pc, #2164]	; 1048 <check_data+0x1048>
     7d0:	bl	0 <coda_set_error>
     7d4:	ldr	r3, [pc, #2200]	; 1074 <check_data+0x1074>
     7d8:	bl	0 <__aeabi_read_tp>
     7dc:	mov	r5, r0
     7e0:	ldr	r3, [pc, r3]
     7e4:	ldr	r0, [r0, r3]
     7e8:	bl	0 <coda_errno_to_string>
     7ec:	ldr	r3, [sp, #964]	; 0x3c4
     7f0:	ldr	r2, [sp, #968]	; 0x3c8
     7f4:	mov	r1, r0
     7f8:	mov	r0, r7
     7fc:	blx	r3
     800:	ldr	r3, [pc, #2160]	; 1078 <check_data+0x1078>
     804:	ldr	r3, [pc, r3]
     808:	str	r4, [r5, r3]
     80c:	mov	r3, #0
     810:	str	r3, [fp]
     814:	b	11c <check_data+0x11c>
     818:	add	r1, sp, #400	; 0x190
     81c:	mov	r0, r7
     820:	bl	0 <coda_cursor_get_read_type>
     824:	subs	r4, r0, #0
     828:	bne	47c <check_data+0x47c>
     82c:	ldr	r3, [fp]
     830:	ldr	r0, [sp, #400]	; 0x190
     834:	ldr	r3, [r3, #12]
     838:	cmp	r3, r0
     83c:	beq	11c <check_data+0x11c>
     840:	bl	0 <coda_type_get_native_type_name>
     844:	ldr	r3, [fp]
     848:	mov	r5, r0
     84c:	ldr	r0, [r3, #12]
     850:	bl	0 <coda_type_get_native_type_name>
     854:	mov	r2, r5
     858:	ldr	r1, [pc, #2076]	; 107c <check_data+0x107c>
     85c:	mov	r3, r0
     860:	ldr	r0, [pc, #2016]	; 1048 <check_data+0x1048>
     864:	bl	0 <coda_set_error>
     868:	ldr	r3, [pc, #2064]	; 1080 <check_data+0x1080>
     86c:	bl	0 <__aeabi_read_tp>
     870:	mov	r5, r0
     874:	ldr	r3, [pc, r3]
     878:	ldr	r0, [r0, r3]
     87c:	bl	0 <coda_errno_to_string>
     880:	ldr	r3, [sp, #964]	; 0x3c4
     884:	ldr	r2, [sp, #968]	; 0x3c8
     888:	mov	r1, r0
     88c:	mov	r0, r7
     890:	blx	r3
     894:	ldr	r3, [pc, #2024]	; 1084 <check_data+0x1084>
     898:	ldr	r3, [pc, r3]
     89c:	str	r4, [r5, r3]
     8a0:	b	11c <check_data+0x11c>
     8a4:	add	sl, sp, #400	; 0x190
     8a8:	mov	r2, sl
     8ac:	add	r1, sp, #112	; 0x70
     8b0:	mov	r0, r7
     8b4:	ldr	r6, [fp]
     8b8:	bl	0 <coda_cursor_get_array_dim>
     8bc:	subs	r4, r0, #0
     8c0:	bne	47c <check_data+0x47c>
     8c4:	ldr	r3, [r6, #48]	; 0x30
     8c8:	ldr	r2, [sp, #112]	; 0x70
     8cc:	cmp	r3, r2
     8d0:	bne	1214 <check_data+0x1214>
     8d4:	cmp	r2, #0
     8d8:	ble	11c <check_data+0x11c>
     8dc:	str	fp, [sp, #32]
     8e0:	str	r9, [sp, #36]	; 0x24
     8e4:	ldr	r8, [pc, #1948]	; 1088 <check_data+0x1088>
     8e8:	add	r6, r6, #52	; 0x34
     8ec:	ldr	r9, [sp, #964]	; 0x3c4
     8f0:	ldr	fp, [sp, #968]	; 0x3c8
     8f4:	b	960 <check_data+0x960>
     8f8:	ldr	r3, [sl, r4, lsl #2]
     8fc:	cmp	r1, r3
     900:	beq	954 <check_data+0x954>
     904:	mov	r2, r4
     908:	str	r1, [sp]
     90c:	ldr	r0, [pc, #1844]	; 1048 <check_data+0x1048>
     910:	mov	r1, r8
     914:	bl	0 <coda_set_error>
     918:	ldr	r3, [pc, #1900]	; 108c <check_data+0x108c>
     91c:	bl	0 <__aeabi_read_tp>
     920:	mov	r5, r0
     924:	ldr	r3, [pc, r3]
     928:	ldr	r0, [r0, r3]
     92c:	bl	0 <coda_errno_to_string>
     930:	mov	r2, fp
     934:	mov	r1, r0
     938:	mov	r0, r7
     93c:	blx	r9
     940:	ldr	r3, [pc, #1864]	; 1090 <check_data+0x1090>
     944:	ldr	r2, [sp, #112]	; 0x70
     948:	mov	r1, #0
     94c:	ldr	r3, [pc, r3]
     950:	str	r1, [r5, r3]
     954:	add	r4, r4, #1
     958:	cmp	r4, r2
     95c:	bge	128c <check_data+0x128c>
     960:	ldr	r1, [r6], #4
     964:	cmp	r1, #0
     968:	bge	8f8 <check_data+0x8f8>
     96c:	ldr	r0, [r6, #28]
     970:	cmp	r0, #0
     974:	beq	954 <check_data+0x954>
     978:	add	r2, sp, #144	; 0x90
     97c:	mov	r1, r7
     980:	bl	0 <coda_expression_eval_integer>
     984:	subs	r5, r0, #0
     988:	bne	14fc <check_data+0x14fc>
     98c:	ldr	ip, [sl, r4, lsl #2]
     990:	ldrd	r2, [sp, #144]	; 0x90
     994:	asr	r1, ip, #31
     998:	cmp	r1, r3
     99c:	cmpeq	ip, r2
     9a0:	bne	1470 <check_data+0x1470>
     9a4:	ldr	r2, [sp, #112]	; 0x70
     9a8:	b	954 <check_data+0x954>
     9ac:	add	r1, sp, #72	; 0x48
     9b0:	mov	r0, r7
     9b4:	ldr	r5, [fp]
     9b8:	bl	0 <coda_cursor_get_type>
     9bc:	subs	r4, r0, #0
     9c0:	bne	47c <check_data+0x47c>
     9c4:	ldr	r3, [r5, #48]	; 0x30
     9c8:	cmp	r3, #0
     9cc:	ble	1018 <check_data+0x1018>
     9d0:	str	fp, [sp, #40]	; 0x28
     9d4:	ldr	r8, [pc, #1720]	; 1094 <check_data+0x1094>
     9d8:	add	sl, sp, #144	; 0x90
     9dc:	str	r9, [sp, #44]	; 0x2c
     9e0:	ldr	fp, [sp, #968]	; 0x3c8
     9e4:	b	af8 <check_data+0xaf8>
     9e8:	ldr	r3, [pc, #1704]	; 1098 <check_data+0x1098>
     9ec:	bl	0 <__aeabi_read_tp>
     9f0:	ldr	r3, [pc, r3]
     9f4:	ldr	r3, [r0, r3]
     9f8:	cmn	r3, #102	; 0x66
     9fc:	bne	47c <check_data+0x47c>
     a00:	ldr	r3, [pc, #1684]	; 109c <check_data+0x109c>
     a04:	mov	r2, #0
     a08:	ldr	r3, [pc, r3]
     a0c:	str	r2, [sp, #112]	; 0x70
     a10:	str	r2, [r0, r3]
     a14:	ldr	r3, [r5, #52]	; 0x34
     a18:	ldr	r3, [r3, r6]
     a1c:	ldrb	r2, [r3, #16]
     a20:	cmp	r2, #0
     a24:	beq	a48 <check_data+0xa48>
     a28:	ldr	r0, [r3, #20]
     a2c:	cmp	r0, #0
     a30:	beq	b6c <check_data+0xb6c>
     a34:	add	r2, sp, #80	; 0x50
     a38:	mov	r1, r7
     a3c:	bl	0 <coda_expression_eval_bool>
     a40:	cmp	r0, #0
     a44:	bne	dbc <check_data+0xdbc>
     a48:	ldr	r3, [sp, #80]	; 0x50
     a4c:	cmn	r3, #1
     a50:	beq	c28 <check_data+0xc28>
     a54:	ldr	r2, [sp, #112]	; 0x70
     a58:	cmp	r3, r2
     a5c:	beq	ad4 <check_data+0xad4>
     a60:	ldr	r1, [r5, #52]	; 0x34
     a64:	cmp	r3, #0
     a68:	ldr	ip, [pc, #1584]	; 10a0 <check_data+0x10a0>
     a6c:	movne	ip, r8
     a70:	cmp	r2, #0
     a74:	ldr	r2, [r1, r6]
     a78:	ldr	r3, [pc, #1568]	; 10a0 <check_data+0x10a0>
     a7c:	ldr	r1, [pc, #1568]	; 10a4 <check_data+0x10a4>
     a80:	movne	r3, r8
     a84:	ldr	r2, [r2]
     a88:	ldr	r0, [pc, #1464]	; 1048 <check_data+0x1048>
     a8c:	str	ip, [sp]
     a90:	bl	0 <coda_set_error>
     a94:	ldr	r2, [pc, #1548]	; 10a8 <check_data+0x10a8>
     a98:	bl	0 <__aeabi_read_tp>
     a9c:	mov	r9, r0
     aa0:	ldr	r2, [pc, r2]
     aa4:	ldr	r0, [r0, r2]
     aa8:	bl	0 <coda_errno_to_string>
     aac:	mov	r2, fp
     ab0:	ldr	r3, [sp, #964]	; 0x3c4
     ab4:	mov	r1, r0
     ab8:	mov	r0, r7
     abc:	blx	r3
     ac0:	ldr	r1, [pc, #1508]	; 10ac <check_data+0x10ac>
     ac4:	ldr	r2, [sp, #112]	; 0x70
     ac8:	mov	r0, #0
     acc:	ldr	r1, [pc, r1]
     ad0:	str	r0, [r9, r1]
     ad4:	cmp	r2, #0
     ad8:	beq	ae8 <check_data+0xae8>
     adc:	ldr	r3, [sp, #80]	; 0x50
     ae0:	cmp	r3, #0
     ae4:	bne	b80 <check_data+0xb80>
     ae8:	ldr	r3, [r5, #48]	; 0x30
     aec:	add	r4, r4, #1
     af0:	cmp	r4, r3
     af4:	bge	1010 <check_data+0x1010>
     af8:	ldr	r1, [r5, #52]	; 0x34
     afc:	mov	r3, #1
     b00:	mov	r2, sl
     b04:	ldr	r1, [r1, r4, lsl #2]
     b08:	mov	r0, r7
     b0c:	str	r3, [sp, #80]	; 0x50
     b10:	ldr	r1, [r1]
     b14:	str	r3, [sp, #112]	; 0x70
     b18:	bl	0 <coda_cursor_get_record_field_index_from_name>
     b1c:	lsl	r6, r4, #2
     b20:	cmp	r0, #0
     b24:	bne	9e8 <check_data+0x9e8>
     b28:	add	r2, sp, #112	; 0x70
     b2c:	ldr	r1, [sp, #144]	; 0x90
     b30:	mov	r0, r7
     b34:	bl	0 <coda_cursor_get_record_field_available_status>
     b38:	cmp	r0, #0
     b3c:	beq	a14 <check_data+0xa14>
     b40:	b	47c <check_data+0x47c>
     b44:	ldr	r3, [sp, #16]
     b48:	orrs	r3, r9, r3
     b4c:	moveq	r6, r3
     b50:	beq	480 <check_data+0x480>
     b54:	ldr	r3, [sp, #48]	; 0x30
     b58:	cmp	r3, #1
     b5c:	bne	2d8 <check_data+0x2d8>
     b60:	mov	r3, #0
     b64:	str	r3, [sp, #144]	; 0x90
     b68:	b	694 <check_data+0x694>
     b6c:	ldr	r2, [sp, #112]	; 0x70
     b70:	mvn	r3, #0
     b74:	cmp	r2, #0
     b78:	str	r3, [sp, #80]	; 0x50
     b7c:	beq	ae8 <check_data+0xae8>
     b80:	add	r2, sp, #400	; 0x190
     b84:	ldr	r1, [sp, #144]	; 0x90
     b88:	ldr	r0, [sp, #72]	; 0x48
     b8c:	bl	0 <coda_type_get_record_field_real_name>
     b90:	cmp	r0, #0
     b94:	bne	47c <check_data+0x47c>
     b98:	ldr	r3, [r5, #52]	; 0x34
     b9c:	ldr	r2, [r3, r6]
     ba0:	ldr	r3, [sp, #400]	; 0x190
     ba4:	str	r2, [sp, #36]	; 0x24
     ba8:	ldr	r6, [r2, #4]
     bac:	mov	r0, r3
     bb0:	cmp	r6, #0
     bb4:	str	r3, [sp, #32]
     bb8:	ldreq	r6, [r2]
     bbc:	mov	r1, r6
     bc0:	bl	0 <strcmp>
     bc4:	ldr	r3, [sp, #32]
     bc8:	ldr	r2, [sp, #36]	; 0x24
     bcc:	cmp	r0, #0
     bd0:	beq	ae8 <check_data+0xae8>
     bd4:	ldr	r2, [r2]
     bd8:	ldr	r1, [pc, #1232]	; 10b0 <check_data+0x10b0>
     bdc:	str	r6, [sp]
     be0:	ldr	r0, [pc, #1120]	; 1048 <check_data+0x1048>
     be4:	bl	0 <coda_set_error>
     be8:	ldr	r3, [pc, #1220]	; 10b4 <check_data+0x10b4>
     bec:	bl	0 <__aeabi_read_tp>
     bf0:	mov	r6, r0
     bf4:	ldr	r3, [pc, r3]
     bf8:	ldr	r0, [r0, r3]
     bfc:	bl	0 <coda_errno_to_string>
     c00:	mov	r2, fp
     c04:	ldr	r3, [sp, #964]	; 0x3c4
     c08:	mov	r1, r0
     c0c:	mov	r0, r7
     c10:	blx	r3
     c14:	ldr	r3, [pc, #1180]	; 10b8 <check_data+0x10b8>
     c18:	mov	r2, #0
     c1c:	ldr	r3, [pc, r3]
     c20:	str	r2, [r6, r3]
     c24:	b	ae8 <check_data+0xae8>
     c28:	ldr	r3, [sp, #112]	; 0x70
     c2c:	cmp	r3, #0
     c30:	bne	b80 <check_data+0xb80>
     c34:	b	ae8 <check_data+0xae8>
     c38:	add	sl, sp, #400	; 0x190
     c3c:	mov	r2, #520	; 0x208
     c40:	mov	r1, r7
     c44:	mov	r0, sl
     c48:	bl	0 <memcpy>
     c4c:	mov	r0, sl
     c50:	add	r1, sp, #60	; 0x3c
     c54:	bl	0 <coda_cursor_get_num_elements>
     c58:	cmp	r0, #0
     c5c:	bne	47c <check_data+0x47c>
     c60:	ldr	r3, [sp, #60]	; 0x3c
     c64:	cmp	r3, #0
     c68:	ble	e34 <check_data+0xe34>
     c6c:	mov	r0, r7
     c70:	bl	0 <coda_cursor_goto_first_record_field>
     c74:	subs	r8, r0, #0
     c78:	bne	47c <check_data+0x47c>
     c7c:	ldr	r3, [sp, #60]	; 0x3c
     c80:	cmp	r3, #0
     c84:	ble	e2c <check_data+0xe2c>
     c88:	add	r5, sp, #80	; 0x50
     c8c:	str	r6, [sp, #36]	; 0x24
     c90:	str	r7, [sp, #32]
     c94:	ldr	r4, [sp, #960]	; 0x3c0
     c98:	b	ca8 <check_data+0xca8>
     c9c:	add	r8, r8, #1
     ca0:	cmp	r8, r3
     ca4:	bge	e24 <check_data+0xe24>
     ca8:	mov	r3, #0
     cac:	mov	r2, r5
     cb0:	mov	r1, r8
     cb4:	mov	r0, sl
     cb8:	str	r3, [sp, #72]	; 0x48
     cbc:	bl	0 <coda_cursor_get_record_field_available_status>
     cc0:	cmp	r0, #0
     cc4:	bne	47c <check_data+0x47c>
     cc8:	ldr	r3, [sp, #80]	; 0x50
     ccc:	cmp	r3, #0
     cd0:	beq	d78 <check_data+0xd78>
     cd4:	ldr	r3, [fp]
     cd8:	cmp	r3, #0
     cdc:	beq	d20 <check_data+0xd20>
     ce0:	add	r2, sp, #112	; 0x70
     ce4:	mov	r1, r8
     ce8:	ldr	r0, [sp, #56]	; 0x38
     cec:	bl	0 <coda_type_get_record_field_name>
     cf0:	subs	r6, r0, #0
     cf4:	bne	47c <check_data+0x47c>
     cf8:	add	r2, sp, #144	; 0x90
     cfc:	ldr	r1, [sp, #112]	; 0x70
     d00:	ldr	r0, [fp]
     d04:	bl	0 <coda_type_get_record_field_index_from_name>
     d08:	cmp	r0, #0
     d0c:	beq	da0 <check_data+0xda0>
     d10:	ldr	r3, [pc, #932]	; 10bc <check_data+0x10bc>
     d14:	bl	0 <__aeabi_read_tp>
     d18:	ldr	r3, [pc, r3]
     d1c:	str	r6, [r0, r3]
     d20:	ldr	r3, [sp, #968]	; 0x3c8
     d24:	ldr	r2, [sp, #16]
     d28:	str	r3, [sp, #8]
     d2c:	ldr	r3, [sp, #964]	; 0x3c4
     d30:	add	r1, sp, #72	; 0x48
     d34:	str	r3, [sp, #4]
     d38:	add	r3, sp, #64	; 0x40
     d3c:	str	r3, [sp]
     d40:	ldr	r0, [sp, #32]
     d44:	mov	r3, r9
     d48:	bl	0 <check_data>
     d4c:	cmp	r0, #0
     d50:	bne	47c <check_data+0x47c>
     d54:	cmp	r9, #0
     d58:	beq	d78 <check_data+0xd78>
     d5c:	ldrd	r2, [r4]
     d60:	ldrd	r0, [sp, #64]	; 0x40
     d64:	adds	r6, r2, r0
     d68:	adc	r7, r3, r1
     d6c:	mov	r2, r6
     d70:	mov	r3, r7
     d74:	strd	r2, [r4]
     d78:	ldr	r3, [sp, #60]	; 0x3c
     d7c:	sub	r2, r3, #1
     d80:	cmp	r2, r8
     d84:	ble	c9c <check_data+0xc9c>
     d88:	ldr	r0, [sp, #32]
     d8c:	bl	0 <coda_cursor_goto_next_record_field>
     d90:	cmp	r0, #0
     d94:	bne	47c <check_data+0x47c>
     d98:	ldr	r3, [sp, #60]	; 0x3c
     d9c:	b	c9c <check_data+0xc9c>
     da0:	add	r2, sp, #72	; 0x48
     da4:	ldr	r1, [sp, #144]	; 0x90
     da8:	ldr	r0, [fp]
     dac:	bl	0 <coda_type_get_record_field_type>
     db0:	cmp	r0, #0
     db4:	beq	d20 <check_data+0xd20>
     db8:	b	47c <check_data+0x47c>
     dbc:	ldr	r3, [r5, #52]	; 0x34
     dc0:	ldr	r0, [pc, #760]	; 10c0 <check_data+0x10c0>
     dc4:	ldr	r3, [r3, r6]
     dc8:	ldr	r1, [r3]
     dcc:	bl	0 <coda_add_error_message>
     dd0:	ldr	r2, [pc, #748]	; 10c4 <check_data+0x10c4>
     dd4:	bl	0 <__aeabi_read_tp>
     dd8:	mov	r9, r0
     ddc:	ldr	r2, [pc, r2]
     de0:	ldr	r0, [r0, r2]
     de4:	bl	0 <coda_errno_to_string>
     de8:	mov	r2, fp
     dec:	ldr	r3, [sp, #964]	; 0x3c4
     df0:	mov	r1, r0
     df4:	mov	r0, r7
     df8:	blx	r3
     dfc:	ldr	r2, [pc, #708]	; 10c8 <check_data+0x10c8>
     e00:	mov	r1, #0
     e04:	ldr	r2, [pc, r2]
     e08:	str	r1, [r9, r2]
     e0c:	b	a48 <check_data+0xa48>
     e10:	ldr	r1, [sp, #960]	; 0x3c0
     e14:	mov	r2, #0
     e18:	mov	r3, #0
     e1c:	strd	r2, [r1]
     e20:	b	124 <check_data+0x124>
     e24:	ldr	r6, [sp, #36]	; 0x24
     e28:	ldr	r7, [sp, #32]
     e2c:	mov	r0, r7
     e30:	bl	0 <coda_cursor_goto_parent>
     e34:	cmp	r9, #0
     e38:	beq	480 <check_data+0x480>
     e3c:	ldr	r3, [sp, #56]	; 0x38
     e40:	ldr	r3, [r3, #32]
     e44:	cmp	r3, #0
     e48:	beq	1298 <check_data+0x1298>
     e4c:	bl	0 <coda_get_option_use_fast_size_expressions>
     e50:	mov	r8, r0
     e54:	mov	r0, #1
     e58:	bl	0 <coda_set_option_use_fast_size_expressions>
     e5c:	add	r1, sp, #72	; 0x48
     e60:	mov	r0, r7
     e64:	bl	0 <coda_cursor_get_bit_size>
     e68:	cmp	r0, #0
     e6c:	bne	14cc <check_data+0x14cc>
     e70:	ldr	r3, [sp, #960]	; 0x3c0
     e74:	ldrd	sl, [r3]
     e78:	ldrd	r2, [sp, #72]	; 0x48
     e7c:	cmp	fp, r3
     e80:	cmpeq	sl, r2
     e84:	beq	f18 <check_data+0xf18>
     e88:	lsr	r0, sl, #3
     e8c:	add	r5, sp, #80	; 0x50
     e90:	mov	r2, r5
     e94:	orr	r0, r0, fp, lsl #29
     e98:	asr	r1, fp, #3
     e9c:	bl	0 <coda_str64>
     ea0:	ldr	r3, [sp, #960]	; 0x3c0
     ea4:	ldrd	sl, [r3]
     ea8:	mov	r3, #0
     eac:	and	r2, sl, #7
     eb0:	orrs	r3, r2, r3
     eb4:	bne	1654 <check_data+0x1654>
     eb8:	ldr	r0, [sp, #72]	; 0x48
     ebc:	ldr	r1, [sp, #76]	; 0x4c
     ec0:	add	fp, sp, #112	; 0x70
     ec4:	lsr	r0, r0, #3
     ec8:	orr	r0, r0, r1, lsl #29
     ecc:	mov	r2, fp
     ed0:	asr	r1, r1, #3
     ed4:	bl	0 <coda_str64>
     ed8:	ldrd	r2, [sp, #72]	; 0x48
     edc:	strd	r2, [sp, #16]
     ee0:	and	r2, r2, #7
     ee4:	mov	r3, #0
     ee8:	orrs	r3, r2, r3
     eec:	bne	1634 <check_data+0x1634>
     ef0:	mov	r3, fp
     ef4:	mov	r2, r5
     ef8:	ldr	r1, [pc, #460]	; 10cc <check_data+0x10cc>
     efc:	add	r0, sp, #144	; 0x90
     f00:	bl	0 <sprintf>
     f04:	ldr	r2, [sp, #968]	; 0x3c8
     f08:	add	r1, sp, #144	; 0x90
     f0c:	mov	r0, r7
     f10:	ldr	r3, [sp, #964]	; 0x3c4
     f14:	blx	r3
     f18:	ldr	r3, [sp, #28]
     f1c:	eor	r4, r3, #1
     f20:	and	r4, r4, #1
     f24:	mov	r0, r8
     f28:	bl	0 <coda_set_option_use_fast_size_expressions>
     f2c:	b	380 <check_data+0x380>
     f30:	cmp	r3, #0
     f34:	ble	220 <check_data+0x220>
     f38:	mov	r0, r4
     f3c:	bl	0 <malloc>
     f40:	subs	r6, r0, #0
     f44:	beq	460 <check_data+0x460>
     f48:	ldr	r3, [sp, #960]	; 0x3c0
     f4c:	mov	r2, #0
     f50:	mov	r1, r6
     f54:	ldrd	r4, [r3]
     f58:	mov	r0, r7
     f5c:	mov	r3, #0
     f60:	strd	r4, [sp]
     f64:	bl	0 <coda_cursor_read_bits>
     f68:	cmp	r0, #0
     f6c:	bne	16a0 <check_data+0x16a0>
     f70:	ldr	r2, [sp, #400]	; 0x190
     f74:	ldr	r1, [sp, #144]	; 0x90
     f78:	mov	r0, r6
     f7c:	bl	0 <memcmp>
     f80:	cmp	r0, #0
     f84:	bne	1564 <check_data+0x1564>
     f88:	mov	r0, r6
     f8c:	bl	0 <free>
     f90:	b	220 <check_data+0x220>
     f94:	ldr	r2, [sp, #968]	; 0x3c8
     f98:	ldr	r1, [pc, #304]	; 10d0 <check_data+0x10d0>
     f9c:	mov	r0, r7
     fa0:	ldr	r3, [sp, #964]	; 0x3c4
     fa4:	blx	r3
     fa8:	b	5cc <check_data+0x5cc>
     fac:	ldr	r1, [sp, #960]	; 0x3c0
     fb0:	mov	r0, r7
     fb4:	bl	0 <coda_cursor_get_bit_size>
     fb8:	cmp	r0, #0
     fbc:	beq	5e0 <check_data+0x5e0>
     fc0:	ldr	r3, [pc, #268]	; 10d4 <check_data+0x10d4>
     fc4:	bl	0 <__aeabi_read_tp>
     fc8:	ldr	r3, [pc, r3]
     fcc:	ldr	r0, [r0, r3]
     fd0:	add	r3, r0, #104	; 0x68
     fd4:	cmn	r0, #300	; 0x12c
     fd8:	cmpne	r3, #1
     fdc:	bls	5b4 <check_data+0x5b4>
     fe0:	b	47c <check_data+0x47c>
     fe4:	ldr	r6, [sp, #32]
     fe8:	ldr	fp, [sp, #36]	; 0x24
     fec:	mov	r0, r7
     ff0:	bl	0 <coda_cursor_goto_parent>
     ff4:	ldr	r3, [fp]
     ff8:	cmp	r3, #0
     ffc:	beq	36c <check_data+0x36c>
    1000:	ldr	r3, [sp, #144]	; 0x90
    1004:	cmp	r3, #0
    1008:	streq	r3, [fp]
    100c:	b	36c <check_data+0x36c>
    1010:	ldr	fp, [sp, #40]	; 0x28
    1014:	ldr	r9, [sp, #44]	; 0x2c
    1018:	add	r1, sp, #112	; 0x70
    101c:	mov	r0, r7
    1020:	bl	0 <coda_cursor_get_num_elements>
    1024:	subs	r4, r0, #0
    1028:	bne	47c <check_data+0x47c>
    102c:	ldr	r3, [sp, #112]	; 0x70
    1030:	cmp	r3, #0
    1034:	ble	11c <check_data+0x11c>
    1038:	ldr	r8, [pc, #8]	; 1048 <check_data+0x1048>
    103c:	add	sl, sp, #144	; 0x90
    1040:	b	117c <check_data+0x117c>
    1044:	.word	0x00000078
    1048:	.word	0xfffffed4
    104c:	.word	0x00000f58
    1050:	.word	0x00000f38
    1054:	.word	0x0000019b
    1058:	.word	0x0000031c
    105c:	.word	0x00000654
    1060:	.word	0x00000b44
    1064:	.word	0x00000b10
    1068:	.word	0x00000ac4
    106c:	.word	0x0000044c
    1070:	.word	0x00000294
    1074:	.word	0x0000088c
    1078:	.word	0x0000086c
    107c:	.word	0x00000264
    1080:	.word	0x00000804
    1084:	.word	0x000007e4
    1088:	.word	0x000000e0
    108c:	.word	0x00000760
    1090:	.word	0x0000073c
    1094:	.word	0x00000000
    1098:	.word	0x000006a0
    109c:	.word	0x0000068c
    10a0:	.word	0x0000000c
    10a4:	.word	0x0000019c
    10a8:	.word	0x00000600
    10ac:	.word	0x000005d8
    10b0:	.word	0x000001d8
    10b4:	.word	0x000004b8
    10b8:	.word	0x00000494
    10bc:	.word	0x0000039c
    10c0:	.word	0x00000154
    10c4:	.word	0x000002e0
    10c8:	.word	0x000002bc
    10cc:	.word	0x000004b4
    10d0:	.word	0x000002c8
    10d4:	.word	0x00000104
    10d8:	.word	0xffffff18
    10dc:	.word	0x00000218
    10e0:	.word	0xfffffefc
    10e4:	.word	0xfffffedc
    10e8:	.word	0x000000a4
    10ec:	.word	0xfffffeb8
    10f0:	.word	0xfffffe98
    10f4:	.word	0x00000354
    10f8:	.word	0x000003e4
    10fc:	.word	0x000003ac
    1100:	.word	0x0000037c
    1104:	.word	0x000001ce
    1108:	.word	0x00000430
    110c:	.word	0x00000434
    1110:	.word	0x00000544
    1114:	.word	0xfffffed4
    1118:	.word	0xfffffc7c
    111c:	.word	0xfffffc54
    1120:	.word	0xfffffc40
    1124:	.word	0x00000118
    1128:	.word	0xfffffc0c
    112c:	.word	0xfffffbe8
    1130:	.word	0x00000480
    1134:	.word	0x00000620
    1138:	.word	0x00800013
    113c:	.word	0x000004b0
    1140:	.word	0x00000132
    1144:	.word	0x00000064
    1148:	.word	0x00000000
    114c:	.word	0x0000030a
    1150:	.word	0x0000051c
    1154:	.word	0x0000000c
    1158:	.word	0x00000580
    115c:	.word	0x000005d0
    1160:	.word	0x00000018
    1164:	.word	0x0000033f
    1168:	.word	0x000002e4
    116c:	ldr	r3, [sp, #112]	; 0x70
    1170:	add	r4, r4, #1
    1174:	cmp	r4, r3
    1178:	bge	11c <check_data+0x11c>
    117c:	mov	r2, sl
    1180:	mov	r1, r4
    1184:	ldr	r0, [sp, #72]	; 0x48
    1188:	bl	0 <coda_type_get_record_field_name>
    118c:	subs	r5, r0, #0
    1190:	bne	47c <check_data+0x47c>
    1194:	add	r2, sp, #400	; 0x190
    1198:	ldr	r1, [sp, #144]	; 0x90
    119c:	ldr	r0, [fp]
    11a0:	bl	0 <coda_type_get_record_field_index_from_name>
    11a4:	cmp	r0, #0
    11a8:	beq	116c <check_data+0x116c>
    11ac:	ldr	r3, [pc, #-220]	; 10d8 <check_data+0x10d8>
    11b0:	bl	0 <__aeabi_read_tp>
    11b4:	mov	r6, r0
    11b8:	ldr	r3, [pc, r3]
    11bc:	ldr	r3, [r0, r3]
    11c0:	cmn	r3, #102	; 0x66
    11c4:	bne	116c <check_data+0x116c>
    11c8:	ldr	r2, [sp, #144]	; 0x90
    11cc:	ldr	r1, [pc, #-248]	; 10dc <check_data+0x10dc>
    11d0:	mov	r0, r8
    11d4:	bl	0 <coda_set_error>
    11d8:	ldr	r3, [pc, #-256]	; 10e0 <check_data+0x10e0>
    11dc:	ldr	r3, [pc, r3]
    11e0:	ldr	r0, [r6, r3]
    11e4:	bl	0 <coda_errno_to_string>
    11e8:	ldr	r3, [sp, #964]	; 0x3c4
    11ec:	ldr	r2, [sp, #968]	; 0x3c8
    11f0:	mov	r1, r0
    11f4:	mov	r0, r7
    11f8:	blx	r3
    11fc:	ldr	r3, [pc, #-288]	; 10e4 <check_data+0x10e4>
    1200:	ldr	r3, [pc, r3]
    1204:	str	r5, [r6, r3]
    1208:	b	116c <check_data+0x116c>
    120c:	ldr	r4, [sp, #28]
    1210:	b	1d0 <check_data+0x1d0>
    1214:	ldr	r1, [pc, #-308]	; 10e8 <check_data+0x10e8>
    1218:	ldr	r0, [pc, #-268]	; 1114 <check_data+0x1114>
    121c:	bl	0 <coda_set_error>
    1220:	ldr	r3, [pc, #-316]	; 10ec <check_data+0x10ec>
    1224:	bl	0 <__aeabi_read_tp>
    1228:	mov	r5, r0
    122c:	ldr	r3, [pc, r3]
    1230:	ldr	r0, [r0, r3]
    1234:	bl	0 <coda_errno_to_string>
    1238:	ldr	r3, [sp, #964]	; 0x3c4
    123c:	ldr	r2, [sp, #968]	; 0x3c8
    1240:	mov	r1, r0
    1244:	mov	r0, r7
    1248:	blx	r3
    124c:	ldr	r3, [pc, #-356]	; 10f0 <check_data+0x10f0>
    1250:	ldr	r3, [pc, r3]
    1254:	str	r4, [r5, r3]
    1258:	b	11c <check_data+0x11c>
    125c:	cmp	r2, #0
    1260:	ble	200 <check_data+0x200>
    1264:	mov	r0, r4
    1268:	bl	0 <memcmp>
    126c:	cmp	r0, #0
    1270:	beq	200 <check_data+0x200>
    1274:	ldr	r2, [sp, #968]	; 0x3c8
    1278:	ldr	r1, [pc, #-396]	; 10f4 <check_data+0x10f4>
    127c:	mov	r0, r7
    1280:	ldr	r3, [sp, #964]	; 0x3c4
    1284:	blx	r3
    1288:	b	200 <check_data+0x200>
    128c:	ldr	fp, [sp, #32]
    1290:	ldr	r9, [sp, #36]	; 0x24
    1294:	b	11c <check_data+0x11c>
    1298:	ldr	r3, [sp, #28]
    129c:	eor	r4, r3, #1
    12a0:	and	r4, r4, #1
    12a4:	b	380 <check_data+0x380>
    12a8:	ldr	r3, [r7]
    12ac:	ldr	r3, [r3, #60]	; 0x3c
    12b0:	cmp	r3, #3
    12b4:	ldrls	pc, [pc, r3, lsl #2]
    12b8:	b	210 <check_data+0x210>
    12bc:	.word	0x0000135c
    12c0:	.word	0x0000132c
    12c4:	.word	0x000012fc
    12c8:	.word	0x000012cc
    12cc:	ldr	r3, [sp, #112]	; 0x70
    12d0:	cmp	r3, #2
    12d4:	bne	12e4 <check_data+0x12e4>
    12d8:	ldrb	r3, [r4]
    12dc:	cmp	r3, #13
    12e0:	beq	1690 <check_data+0x1690>
    12e4:	ldr	r2, [sp, #968]	; 0x3c8
    12e8:	ldr	r1, [pc, #-504]	; 10f8 <check_data+0x10f8>
    12ec:	mov	r0, r7
    12f0:	ldr	r3, [sp, #964]	; 0x3c4
    12f4:	blx	r3
    12f8:	b	210 <check_data+0x210>
    12fc:	ldr	r3, [sp, #112]	; 0x70
    1300:	cmp	r3, #1
    1304:	bne	1314 <check_data+0x1314>
    1308:	ldrb	r3, [r4]
    130c:	cmp	r3, #13
    1310:	beq	218 <check_data+0x218>
    1314:	ldr	r2, [sp, #968]	; 0x3c8
    1318:	ldr	r1, [pc, #-548]	; 10fc <check_data+0x10fc>
    131c:	mov	r0, r7
    1320:	ldr	r3, [sp, #964]	; 0x3c4
    1324:	blx	r3
    1328:	b	210 <check_data+0x210>
    132c:	ldr	r3, [sp, #112]	; 0x70
    1330:	cmp	r3, #1
    1334:	bne	1344 <check_data+0x1344>
    1338:	ldrb	r3, [r4]
    133c:	cmp	r3, #10
    1340:	beq	218 <check_data+0x218>
    1344:	ldr	r2, [sp, #968]	; 0x3c8
    1348:	ldr	r1, [pc, #-592]	; 1100 <check_data+0x1100>
    134c:	mov	r0, r7
    1350:	ldr	r3, [sp, #964]	; 0x3c4
    1354:	blx	r3
    1358:	b	210 <check_data+0x210>
    135c:	ldr	r3, [pc, #-540]	; 1148 <check_data+0x1148>
    1360:	ldr	r2, [pc, #-612]	; 1104 <check_data+0x1104>
    1364:	ldr	r1, [pc, #-524]	; 1160 <check_data+0x1160>
    1368:	ldr	r0, [pc, #-616]	; 1108 <check_data+0x1108>
    136c:	bl	0 <__assert_fail>
    1370:	ldr	r2, [sp, #968]	; 0x3c8
    1374:	ldr	r1, [pc, #-624]	; 110c <check_data+0x110c>
    1378:	mov	r0, r7
    137c:	ldr	r3, [sp, #964]	; 0x3c4
    1380:	blx	r3
    1384:	b	5cc <check_data+0x5cc>
    1388:	ands	r3, r8, #7
    138c:	movne	lr, #1
    1390:	moveq	lr, #0
    1394:	adds	r2, r4, lr
    1398:	asr	r5, r9, #3
    139c:	str	r3, [sp, #16]
    13a0:	adc	r3, r5, #0
    13a4:	cmp	r2, r0
    13a8:	sbcs	lr, r3, r1
    13ac:	bge	3f8 <check_data+0x3f8>
    13b0:	subs	r0, r0, r4
    13b4:	sbc	r1, r1, r5
    13b8:	strd	r0, [sp, #16]
    13bc:	ldr	r3, [sp, #16]
    13c0:	add	r0, r3, #1
    13c4:	ldr	r3, [ip, #24]
    13c8:	str	r3, [sp, #32]
    13cc:	bl	0 <malloc>
    13d0:	ldr	r3, [sp, #16]
    13d4:	str	r3, [sp, #28]
    13d8:	ldr	r3, [sp, #32]
    13dc:	subs	fp, r0, #0
    13e0:	beq	16d4 <check_data+0x16d4>
    13e4:	ldr	r1, [sl, #48]	; 0x30
    13e8:	adds	r8, r4, r3
    13ec:	adc	r9, r5, r3, asr #31
    13f0:	cmp	r1, #0
    13f4:	beq	16c0 <check_data+0x16c0>
    13f8:	ldrd	r4, [sp, #16]
    13fc:	adds	r4, r4, r8
    1400:	adc	r5, r5, r9
    1404:	mov	r2, r4
    1408:	mov	r3, r5
    140c:	ldrd	r4, [sl, #40]	; 0x28
    1410:	cmp	r3, r5
    1414:	cmpeq	r2, r4
    1418:	bls	157c <check_data+0x157c>
    141c:	ldrd	r0, [sp, #16]
    1420:	add	r2, sp, #112	; 0x70
    1424:	bl	0 <coda_str64>
    1428:	add	r6, sp, #400	; 0x190
    142c:	mov	r0, r8
    1430:	mov	r1, r9
    1434:	add	r2, sp, #144	; 0x90
    1438:	bl	0 <coda_str64>
    143c:	mov	r2, r6
    1440:	ldrd	r0, [sl, #40]	; 0x28
    1444:	bl	0 <coda_str64>
    1448:	str	r6, [sp]
    144c:	add	r3, sp, #144	; 0x90
    1450:	add	r2, sp, #112	; 0x70
    1454:	ldr	r1, [pc, #-844]	; 1110 <check_data+0x1110>
    1458:	mvn	r0, #300	; 0x12c
    145c:	bl	0 <coda_set_error>
    1460:	mov	r0, fp
    1464:	bl	0 <free>
    1468:	mvn	r6, #0
    146c:	b	480 <check_data+0x480>
    1470:	mov	r3, ip
    1474:	mov	r1, r8
    1478:	str	r2, [sp]
    147c:	ldr	r0, [pc, #-880]	; 1114 <check_data+0x1114>
    1480:	mov	r2, r4
    1484:	bl	0 <coda_set_error>
    1488:	ldr	r2, [pc, #-888]	; 1118 <check_data+0x1118>
    148c:	bl	0 <__aeabi_read_tp>
    1490:	mov	r3, r0
    1494:	ldr	r2, [pc, r2]
    1498:	str	r3, [sp, #40]	; 0x28
    149c:	ldr	r0, [r0, r2]
    14a0:	bl	0 <coda_errno_to_string>
    14a4:	mov	r2, fp
    14a8:	mov	r1, r0
    14ac:	mov	r0, r7
    14b0:	blx	r9
    14b4:	ldr	r1, [pc, #-928]	; 111c <check_data+0x111c>
    14b8:	ldr	r3, [sp, #40]	; 0x28
    14bc:	ldr	r2, [sp, #112]	; 0x70
    14c0:	ldr	r1, [pc, r1]
    14c4:	str	r5, [r3, r1]
    14c8:	b	954 <check_data+0x954>
    14cc:	ldr	r3, [pc, #-948]	; 1120 <check_data+0x1120>
    14d0:	bl	0 <__aeabi_read_tp>
    14d4:	mov	r4, #0
    14d8:	ldr	r3, [pc, r3]
    14dc:	ldr	r0, [r0, r3]
    14e0:	bl	0 <coda_errno_to_string>
    14e4:	ldr	r2, [sp, #968]	; 0x3c8
    14e8:	ldr	r3, [sp, #964]	; 0x3c4
    14ec:	mov	r1, r0
    14f0:	mov	r0, r7
    14f4:	blx	r3
    14f8:	b	f24 <check_data+0xf24>
    14fc:	mov	r1, r4
    1500:	ldr	r0, [pc, #-996]	; 1124 <check_data+0x1124>
    1504:	bl	0 <coda_add_error_message>
    1508:	ldr	r3, [pc, #-1000]	; 1128 <check_data+0x1128>
    150c:	bl	0 <__aeabi_read_tp>
    1510:	mov	r5, r0
    1514:	ldr	r3, [pc, r3]
    1518:	ldr	r0, [r0, r3]
    151c:	bl	0 <coda_errno_to_string>
    1520:	mov	r2, fp
    1524:	mov	r1, r0
    1528:	mov	r0, r7
    152c:	blx	r9
    1530:	ldr	r3, [pc, #-1036]	; 112c <check_data+0x112c>
    1534:	mov	r1, #0
    1538:	ldr	r2, [sp, #112]	; 0x70
    153c:	ldr	r3, [pc, r3]
    1540:	str	r1, [r5, r3]
    1544:	b	954 <check_data+0x954>
    1548:	mov	r0, sl
    154c:	bl	0 <strlen>
    1550:	ldr	r2, [sp, #16]
    1554:	ldr	r1, [pc, #-1056]	; 113c <check_data+0x113c>
    1558:	add	r0, sl, r0
    155c:	bl	0 <sprintf>
    1560:	b	434 <check_data+0x434>
    1564:	ldr	r2, [sp, #968]	; 0x3c8
    1568:	ldr	r1, [pc, #-1088]	; 1130 <check_data+0x1130>
    156c:	mov	r0, r7
    1570:	ldr	r3, [sp, #964]	; 0x3c4
    1574:	blx	r3
    1578:	b	f88 <check_data+0xf88>
    157c:	ldr	r2, [sp, #16]
    1580:	add	r1, r1, r8
    1584:	bl	0 <memcpy>
    1588:	ldrd	r2, [sp, #16]
    158c:	cmp	r2, #1
    1590:	ldr	r2, [sp, #28]
    1594:	sbcs	r3, r3, #0
    1598:	mov	r3, #0
    159c:	strb	r3, [fp, r2]
    15a0:	blt	15cc <check_data+0x15cc>
    15a4:	ldrb	r3, [fp]
    15a8:	sub	r3, r3, #9
    15ac:	uxtb	r3, r3
    15b0:	cmp	r3, #23
    15b4:	bls	15d8 <check_data+0x15d8>
    15b8:	ldr	r2, [sp, #968]	; 0x3c8
    15bc:	mov	r0, r7
    15c0:	ldr	r1, [pc, #-1172]	; 1134 <check_data+0x1134>
    15c4:	ldr	r3, [sp, #964]	; 0x3c4
    15c8:	blx	r3
    15cc:	mov	r0, fp
    15d0:	bl	0 <free>
    15d4:	b	480 <check_data+0x480>
    15d8:	ldr	ip, [pc, #-1192]	; 1138 <check_data+0x1138>
    15dc:	mvn	r3, ip, lsr r3
    15e0:	tst	r3, #1
    15e4:	bne	15b8 <check_data+0x15b8>
    15e8:	mov	r2, fp
    15ec:	mov	r0, #1
    15f0:	mov	r1, #0
    15f4:	ldrd	r8, [sp, #16]
    15f8:	b	1610 <check_data+0x1610>
    15fc:	mvn	r3, ip, lsr r3
    1600:	adds	r0, r0, #1
    1604:	adc	r1, r1, #0
    1608:	tst	r3, #1
    160c:	bne	15b8 <check_data+0x15b8>
    1610:	cmp	r1, r9
    1614:	cmpeq	r0, r8
    1618:	beq	15cc <check_data+0x15cc>
    161c:	ldrb	r3, [r2, #1]!
    1620:	sub	r3, r3, #9
    1624:	uxtb	r3, r3
    1628:	cmp	r3, #23
    162c:	bhi	15b8 <check_data+0x15b8>
    1630:	b	15fc <check_data+0x15fc>
    1634:	mov	r0, fp
    1638:	bl	0 <strlen>
    163c:	ldr	r3, [sp, #16]
    1640:	ldr	r1, [pc, #-1292]	; 113c <check_data+0x113c>
    1644:	and	r2, r3, #7
    1648:	add	r0, fp, r0
    164c:	bl	0 <sprintf>
    1650:	b	ef0 <check_data+0xef0>
    1654:	mov	r0, r5
    1658:	bl	0 <strlen>
    165c:	and	r2, sl, #7
    1660:	ldr	r1, [pc, #-1324]	; 113c <check_data+0x113c>
    1664:	add	r0, r5, r0
    1668:	bl	0 <sprintf>
    166c:	b	eb8 <check_data+0xeb8>
    1670:	ldr	r3, [pc, #-1328]	; 1148 <check_data+0x1148>
    1674:	ldr	r2, [pc, #-1340]	; 1140 <check_data+0x1140>
    1678:	ldr	r1, [pc, #-1312]	; 1160 <check_data+0x1160>
    167c:	ldr	r0, [pc, #-1344]	; 1144 <check_data+0x1144>
    1680:	bl	0 <__assert_fail>
    1684:	mov	r0, r5
    1688:	bl	0 <free>
    168c:	b	47c <check_data+0x47c>
    1690:	ldrb	r3, [r4, #1]
    1694:	cmp	r3, #10
    1698:	bne	12e4 <check_data+0x12e4>
    169c:	b	218 <check_data+0x218>
    16a0:	mov	r0, r6
    16a4:	bl	0 <free>
    16a8:	b	47c <check_data+0x47c>
    16ac:	ldr	r3, [pc, #-1388]	; 1148 <check_data+0x1148>
    16b0:	ldr	r2, [pc, #-1388]	; 114c <check_data+0x114c>
    16b4:	ldr	r1, [pc, #-1372]	; 1160 <check_data+0x1160>
    16b8:	ldr	r0, [pc, #-1392]	; 1150 <check_data+0x1150>
    16bc:	bl	0 <__assert_fail>
    16c0:	ldr	r3, [pc, #-1396]	; 1154 <check_data+0x1154>
    16c4:	mov	r2, #83	; 0x53
    16c8:	ldr	r1, [pc, #-1400]	; 1158 <check_data+0x1158>
    16cc:	ldr	r0, [pc, #-1400]	; 115c <check_data+0x115c>
    16d0:	bl	0 <__assert_fail>
    16d4:	ldr	r3, [pc, #-1400]	; 1164 <check_data+0x1164>
    16d8:	ldr	r2, [sp, #16]
    16dc:	str	r3, [sp]
    16e0:	ldr	r1, [pc, #-1408]	; 1168 <check_data+0x1168>
    16e4:	ldr	r3, [pc, #-1420]	; 1160 <check_data+0x1160>
    16e8:	mvn	r0, #0
    16ec:	bl	0 <coda_set_error>
    16f0:	mvn	r6, #0
    16f4:	b	480 <check_data+0x480>

000016f8 <coda_product_check>:
    16f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    16fc:	mov	r6, #0
    1700:	sub	sp, sp, #864	; 0x360
    1704:	mov	r7, #0
    1708:	mov	r4, r0
    170c:	mov	sl, r1
    1710:	mov	r9, r3
    1714:	mov	r1, r0
    1718:	mov	r3, #0
    171c:	add	r0, sp, #344	; 0x158
    1720:	mov	r8, r2
    1724:	strd	r6, [sp, #24]
    1728:	strd	r6, [sp, #32]
    172c:	str	r3, [sp, #16]
    1730:	bl	0 <coda_cursor_set_product>
    1734:	cmp	r0, #0
    1738:	bne	1874 <coda_product_check+0x17c>
    173c:	add	r1, sp, #20
    1740:	mov	r0, r4
    1744:	bl	0 <coda_get_product_format>
    1748:	subs	r5, r0, #0
    174c:	bne	1874 <coda_product_check+0x17c>
    1750:	ldr	r6, [sp, #20]
    1754:	cmp	r6, #2
    1758:	bls	1838 <coda_product_check+0x140>
    175c:	ldr	r3, [r4, #24]
    1760:	cmp	r3, #0
    1764:	beq	1774 <coda_product_check+0x7c>
    1768:	ldr	r3, [r3, #28]
    176c:	cmp	r3, #0
    1770:	strne	r3, [sp, #16]
    1774:	mov	r3, r5
    1778:	add	r2, sp, #32
    177c:	str	r2, [sp]
    1780:	stmib	sp, {r8, r9}
    1784:	mov	r2, sl
    1788:	add	r0, sp, #344	; 0x158
    178c:	add	r1, sp, #16
    1790:	bl	0 <check_data>
    1794:	cmp	r0, #0
    1798:	bne	1874 <coda_product_check+0x17c>
    179c:	cmp	r6, #1
    17a0:	bhi	1864 <coda_product_check+0x16c>
    17a4:	ldrd	r6, [sp, #24]
    17a8:	ldrd	r2, [sp, #32]
    17ac:	cmp	r7, r3
    17b0:	cmpeq	r6, r2
    17b4:	beq	1864 <coda_product_check+0x16c>
    17b8:	lsr	r0, r6, #3
    17bc:	add	r2, sp, #40	; 0x28
    17c0:	orr	r0, r0, r7, lsl #29
    17c4:	asr	r1, r7, #3
    17c8:	bl	0 <coda_str64>
    17cc:	ldr	r0, [sp, #32]
    17d0:	ldr	r1, [sp, #36]	; 0x24
    17d4:	add	r2, sp, #64	; 0x40
    17d8:	lsr	r0, r0, #3
    17dc:	orr	r0, r0, r1, lsl #29
    17e0:	asr	r1, r1, #3
    17e4:	bl	0 <coda_str64>
    17e8:	ldrd	r2, [sp, #32]
    17ec:	mov	r1, #0
    17f0:	and	r0, r2, #7
    17f4:	orrs	r1, r0, r1
    17f8:	beq	18ec <coda_product_check+0x1f4>
    17fc:	and	r2, r2, #7
    1800:	add	r4, sp, #88	; 0x58
    1804:	str	r2, [sp]
    1808:	add	r3, sp, #64	; 0x40
    180c:	add	r2, sp, #40	; 0x28
    1810:	mov	r0, r4
    1814:	ldr	r1, [pc, #244]	; 1910 <coda_product_check+0x218>
    1818:	bl	0 <sprintf>
    181c:	mov	r2, r9
    1820:	mov	r1, r4
    1824:	mov	r0, #0
    1828:	blx	r8
    182c:	mov	r0, r5
    1830:	add	sp, sp, #864	; 0x360
    1834:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1838:	bne	1884 <coda_product_check+0x18c>
    183c:	add	r3, sp, #32
    1840:	str	r3, [sp]
    1844:	stmib	sp, {r8, r9}
    1848:	mov	r2, sl
    184c:	add	r0, sp, #344	; 0x158
    1850:	mov	r3, r5
    1854:	add	r1, sp, #16
    1858:	bl	0 <check_data>
    185c:	cmp	r0, #0
    1860:	bne	1874 <coda_product_check+0x17c>
    1864:	mov	r0, r5
    1868:	add	sp, sp, #864	; 0x360
    186c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1870:	bl	0 <coda_set_option_use_fast_size_expressions>
    1874:	mvn	r5, #0
    1878:	mov	r0, r5
    187c:	add	sp, sp, #864	; 0x360
    1880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1884:	mov	r0, r4
    1888:	add	r1, sp, #24
    188c:	bl	0 <coda_get_product_file_size>
    1890:	cmp	r0, #0
    1894:	bne	1874 <coda_product_check+0x17c>
    1898:	ldr	r3, [sp, #28]
    189c:	ldr	r2, [sp, #24]
    18a0:	cmp	sl, #0
    18a4:	lsl	r3, r3, #3
    18a8:	orr	r3, r3, r2, lsr #29
    18ac:	lsl	r2, r2, #3
    18b0:	str	r3, [sp, #28]
    18b4:	str	r2, [sp, #24]
    18b8:	bne	1908 <coda_product_check+0x210>
    18bc:	bl	0 <coda_get_option_use_fast_size_expressions>
    18c0:	mov	r4, r0
    18c4:	mov	r0, r5
    18c8:	bl	0 <coda_set_option_use_fast_size_expressions>
    18cc:	add	r1, sp, #32
    18d0:	add	r0, sp, #344	; 0x158
    18d4:	bl	0 <coda_cursor_get_bit_size>
    18d8:	cmp	r0, #0
    18dc:	mov	r0, r4
    18e0:	bne	1870 <coda_product_check+0x178>
    18e4:	bl	0 <coda_set_option_use_fast_size_expressions>
    18e8:	b	17a4 <coda_product_check+0xac>
    18ec:	add	r4, sp, #88	; 0x58
    18f0:	add	r3, sp, #64	; 0x40
    18f4:	add	r2, sp, #40	; 0x28
    18f8:	mov	r0, r4
    18fc:	ldr	r1, [pc, #16]	; 1914 <coda_product_check+0x21c>
    1900:	bl	0 <sprintf>
    1904:	b	181c <coda_product_check+0x124>
    1908:	mov	r3, #1
    190c:	b	1778 <coda_product_check+0x80>
    1910:	.word	0x0000069c
    1914:	.word	0x000006ec
