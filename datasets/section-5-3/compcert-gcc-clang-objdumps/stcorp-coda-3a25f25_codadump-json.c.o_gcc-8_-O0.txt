
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
   0:	push	{r0, r1, r2, r3}
   4:	str	fp, [sp, #-8]!
   8:	str	lr, [sp, #4]
   c:	add	fp, sp, #4
  10:	sub	sp, sp, #8
  14:	add	r3, fp, #8
  18:	str	r3, [fp, #-12]
  1c:	movw	r3, #0
  20:	movt	r3, #0
  24:	ldr	r3, [r3]
  28:	ldr	r2, [fp, #-12]
  2c:	ldr	r1, [fp, #4]
  30:	mov	r0, r3
  34:	bl	0 <vfprintf>
  38:	str	r0, [fp, #-8]
  3c:	ldr	r3, [fp, #-8]
  40:	mov	r0, r3
  44:	sub	sp, fp, #4
  48:	ldr	fp, [sp]
  4c:	ldr	lr, [sp, #4]
  50:	add	sp, sp, #8
  54:	add	sp, sp, #16
  58:	bx	lr

0000005c <print_escaped>:
  5c:	str	fp, [sp, #-8]!
  60:	str	lr, [sp, #4]
  64:	add	fp, sp, #4
  68:	sub	sp, sp, #16
  6c:	str	r0, [fp, #-16]
  70:	str	r1, [fp, #-20]	; 0xffffffec
  74:	mov	r3, #0
  78:	str	r3, [fp, #-8]
  7c:	b	1a0 <print_escaped+0x144>
  80:	ldr	r3, [fp, #-8]
  84:	ldr	r2, [fp, #-16]
  88:	add	r3, r2, r3
  8c:	ldrb	r3, [r3]
  90:	strb	r3, [fp, #-9]
  94:	ldrb	r3, [fp, #-9]
  98:	cmp	r3, #12
  9c:	beq	f0 <print_escaped+0x94>
  a0:	cmp	r3, #12
  a4:	bgt	c4 <print_escaped+0x68>
  a8:	cmp	r3, #9
  ac:	beq	120 <print_escaped+0xc4>
  b0:	cmp	r3, #10
  b4:	beq	100 <print_escaped+0xa4>
  b8:	cmp	r3, #8
  bc:	beq	e0 <print_escaped+0x84>
  c0:	b	150 <print_escaped+0xf4>
  c4:	cmp	r3, #34	; 0x22
  c8:	beq	130 <print_escaped+0xd4>
  cc:	cmp	r3, #92	; 0x5c
  d0:	beq	140 <print_escaped+0xe4>
  d4:	cmp	r3, #13
  d8:	beq	110 <print_escaped+0xb4>
  dc:	b	150 <print_escaped+0xf4>
  e0:	movw	r0, #0
  e4:	movt	r0, #0
  e8:	bl	0 <ff_printf>
  ec:	b	194 <print_escaped+0x138>
  f0:	movw	r0, #0
  f4:	movt	r0, #0
  f8:	bl	0 <ff_printf>
  fc:	b	194 <print_escaped+0x138>
 100:	movw	r0, #0
 104:	movt	r0, #0
 108:	bl	0 <ff_printf>
 10c:	b	194 <print_escaped+0x138>
 110:	movw	r0, #0
 114:	movt	r0, #0
 118:	bl	0 <ff_printf>
 11c:	b	194 <print_escaped+0x138>
 120:	movw	r0, #0
 124:	movt	r0, #0
 128:	bl	0 <ff_printf>
 12c:	b	194 <print_escaped+0x138>
 130:	movw	r0, #0
 134:	movt	r0, #0
 138:	bl	0 <ff_printf>
 13c:	b	194 <print_escaped+0x138>
 140:	movw	r0, #0
 144:	movt	r0, #0
 148:	bl	0 <ff_printf>
 14c:	b	194 <print_escaped+0x138>
 150:	ldrb	r3, [fp, #-9]
 154:	cmp	r3, #31
 158:	bls	180 <print_escaped+0x124>
 15c:	ldrb	r3, [fp, #-9]
 160:	cmp	r3, #126	; 0x7e
 164:	bhi	180 <print_escaped+0x124>
 168:	ldrb	r3, [fp, #-9]
 16c:	mov	r1, r3
 170:	movw	r0, #0
 174:	movt	r0, #0
 178:	bl	0 <ff_printf>
 17c:	b	194 <print_escaped+0x138>
 180:	ldrb	r3, [fp, #-9]
 184:	mov	r1, r3
 188:	movw	r0, #0
 18c:	movt	r0, #0
 190:	bl	0 <ff_printf>
 194:	ldr	r3, [fp, #-8]
 198:	add	r3, r3, #1
 19c:	str	r3, [fp, #-8]
 1a0:	ldr	r2, [fp, #-8]
 1a4:	ldr	r3, [fp, #-20]	; 0xffffffec
 1a8:	cmp	r2, r3
 1ac:	blt	80 <print_escaped+0x24>
 1b0:	nop	{0}
 1b4:	sub	sp, fp, #4
 1b8:	ldr	fp, [sp]
 1bc:	add	sp, sp, #4
 1c0:	pop	{pc}		; (ldr pc, [sp], #4)

000001c4 <print_data>:
 1c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
 1c8:	strd	r6, [sp, #8]
 1cc:	strd	r8, [sp, #16]
 1d0:	str	fp, [sp, #24]
 1d4:	str	lr, [sp, #28]
 1d8:	add	fp, sp, #28
 1dc:	sub	sp, sp, #288	; 0x120
 1e0:	str	r0, [fp, #-304]	; 0xfffffed0
 1e4:	mov	r3, #0
 1e8:	str	r3, [fp, #-64]	; 0xffffffc0
 1ec:	movw	r3, #0
 1f0:	movt	r3, #0
 1f4:	ldr	r3, [r3]
 1f8:	cmp	r3, #0
 1fc:	beq	26c <print_data+0xa8>
 200:	sub	r3, fp, #64	; 0x40
 204:	mov	r1, r3
 208:	ldr	r0, [fp, #-304]	; 0xfffffed0
 20c:	bl	0 <coda_cursor_has_attributes>
 210:	mov	r3, r0
 214:	cmp	r3, #0
 218:	beq	220 <print_data+0x5c>
 21c:	bl	0 <handle_coda_error>
 220:	ldr	r3, [fp, #-64]	; 0xffffffc0
 224:	cmp	r3, #0
 228:	beq	26c <print_data+0xa8>
 22c:	movw	r0, #0
 230:	movt	r0, #0
 234:	bl	0 <ff_printf>
 238:	ldr	r0, [fp, #-304]	; 0xfffffed0
 23c:	bl	0 <coda_cursor_goto_attributes>
 240:	mov	r3, r0
 244:	cmp	r3, #0
 248:	beq	250 <print_data+0x8c>
 24c:	bl	0 <handle_coda_error>
 250:	ldr	r0, [fp, #-304]	; 0xfffffed0
 254:	bl	1c4 <print_data>
 258:	ldr	r0, [fp, #-304]	; 0xfffffed0
 25c:	bl	0 <coda_cursor_goto_parent>
 260:	movw	r0, #0
 264:	movt	r0, #0
 268:	bl	0 <ff_printf>
 26c:	sub	r3, fp, #60	; 0x3c
 270:	mov	r1, r3
 274:	ldr	r0, [fp, #-304]	; 0xfffffed0
 278:	bl	0 <coda_cursor_get_type_class>
 27c:	mov	r3, r0
 280:	cmp	r3, #0
 284:	beq	28c <print_data+0xc8>
 288:	bl	0 <handle_coda_error>
 28c:	ldr	r3, [fp, #-60]	; 0xffffffc4
 290:	cmp	r3, #6
 294:	ldrls	pc, [pc, r3, lsl #2]
 298:	b	bc4 <print_data+0xa00>
 29c:	.word	0x000002b8
 2a0:	.word	0x000004ec
 2a4:	.word	0x0000061c
 2a8:	.word	0x0000061c
 2ac:	.word	0x0000061c
 2b0:	.word	0x0000061c
 2b4:	.word	0x00000a2c
 2b8:	movw	r0, #0
 2bc:	movt	r0, #0
 2c0:	bl	0 <ff_printf>
 2c4:	sub	r3, fp, #68	; 0x44
 2c8:	mov	r1, r3
 2cc:	ldr	r0, [fp, #-304]	; 0xfffffed0
 2d0:	bl	0 <coda_cursor_get_num_elements>
 2d4:	mov	r3, r0
 2d8:	cmp	r3, #0
 2dc:	beq	2e4 <print_data+0x120>
 2e0:	bl	0 <handle_coda_error>
 2e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
 2e8:	cmp	r3, #0
 2ec:	ble	4dc <print_data+0x318>
 2f0:	sub	r3, fp, #72	; 0x48
 2f4:	mov	r1, r3
 2f8:	ldr	r0, [fp, #-304]	; 0xfffffed0
 2fc:	bl	0 <coda_cursor_get_type>
 300:	mov	r3, r0
 304:	cmp	r3, #0
 308:	beq	310 <print_data+0x14c>
 30c:	bl	0 <handle_coda_error>
 310:	ldr	r3, [fp, #-72]	; 0xffffffb8
 314:	sub	r2, fp, #76	; 0x4c
 318:	mov	r1, r2
 31c:	mov	r0, r3
 320:	bl	0 <coda_type_get_record_union_status>
 324:	mov	r3, r0
 328:	cmp	r3, #0
 32c:	beq	334 <print_data+0x170>
 330:	bl	0 <handle_coda_error>
 334:	ldr	r3, [fp, #-76]	; 0xffffffb4
 338:	cmp	r3, #0
 33c:	beq	3cc <print_data+0x208>
 340:	sub	r3, fp, #80	; 0x50
 344:	mov	r1, r3
 348:	ldr	r0, [fp, #-304]	; 0xfffffed0
 34c:	bl	0 <coda_cursor_get_available_union_field_index>
 350:	mov	r3, r0
 354:	cmp	r3, #0
 358:	beq	360 <print_data+0x19c>
 35c:	bl	0 <handle_coda_error>
 360:	ldr	r3, [fp, #-72]	; 0xffffffb8
 364:	ldr	r1, [fp, #-80]	; 0xffffffb0
 368:	sub	r2, fp, #84	; 0x54
 36c:	mov	r0, r3
 370:	bl	0 <coda_type_get_record_field_name>
 374:	mov	r3, r0
 378:	cmp	r3, #0
 37c:	beq	384 <print_data+0x1c0>
 380:	bl	0 <handle_coda_error>
 384:	ldr	r3, [fp, #-80]	; 0xffffffb0
 388:	mov	r1, r3
 38c:	ldr	r0, [fp, #-304]	; 0xfffffed0
 390:	bl	0 <coda_cursor_goto_record_field_by_index>
 394:	mov	r3, r0
 398:	cmp	r3, #0
 39c:	beq	3a4 <print_data+0x1e0>
 3a0:	bl	0 <handle_coda_error>
 3a4:	ldr	r3, [fp, #-84]	; 0xffffffac
 3a8:	mov	r1, r3
 3ac:	movw	r0, #0
 3b0:	movt	r0, #0
 3b4:	bl	0 <ff_printf>
 3b8:	ldr	r0, [fp, #-304]	; 0xfffffed0
 3bc:	bl	1c4 <print_data>
 3c0:	ldr	r0, [fp, #-304]	; 0xfffffed0
 3c4:	bl	0 <coda_cursor_goto_parent>
 3c8:	b	4dc <print_data+0x318>
 3cc:	mov	r3, #1
 3d0:	str	r3, [fp, #-32]	; 0xffffffe0
 3d4:	ldr	r0, [fp, #-304]	; 0xfffffed0
 3d8:	bl	0 <coda_cursor_goto_first_record_field>
 3dc:	mov	r3, r0
 3e0:	cmp	r3, #0
 3e4:	beq	3ec <print_data+0x228>
 3e8:	bl	0 <handle_coda_error>
 3ec:	mov	r3, #0
 3f0:	str	r3, [fp, #-80]	; 0xffffffb0
 3f4:	b	4c4 <print_data+0x300>
 3f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
 3fc:	ldr	r1, [fp, #-80]	; 0xffffffb0
 400:	sub	r2, fp, #92	; 0x5c
 404:	mov	r0, r3
 408:	bl	0 <coda_type_get_record_field_hidden_status>
 40c:	mov	r3, r0
 410:	cmp	r3, #0
 414:	beq	41c <print_data+0x258>
 418:	bl	0 <handle_coda_error>
 41c:	ldr	r3, [fp, #-92]	; 0xffffffa4
 420:	cmp	r3, #0
 424:	bne	48c <print_data+0x2c8>
 428:	ldr	r3, [fp, #-32]	; 0xffffffe0
 42c:	cmp	r3, #0
 430:	bne	444 <print_data+0x280>
 434:	movw	r0, #0
 438:	movt	r0, #0
 43c:	bl	0 <ff_printf>
 440:	b	44c <print_data+0x288>
 444:	mov	r3, #0
 448:	str	r3, [fp, #-32]	; 0xffffffe0
 44c:	ldr	r3, [fp, #-72]	; 0xffffffb8
 450:	ldr	r1, [fp, #-80]	; 0xffffffb0
 454:	sub	r2, fp, #88	; 0x58
 458:	mov	r0, r3
 45c:	bl	0 <coda_type_get_record_field_name>
 460:	mov	r3, r0
 464:	cmp	r3, #0
 468:	beq	470 <print_data+0x2ac>
 46c:	bl	0 <handle_coda_error>
 470:	ldr	r3, [fp, #-88]	; 0xffffffa8
 474:	mov	r1, r3
 478:	movw	r0, #0
 47c:	movt	r0, #0
 480:	bl	0 <ff_printf>
 484:	ldr	r0, [fp, #-304]	; 0xfffffed0
 488:	bl	1c4 <print_data>
 48c:	ldr	r3, [fp, #-68]	; 0xffffffbc
 490:	sub	r2, r3, #1
 494:	ldr	r3, [fp, #-80]	; 0xffffffb0
 498:	cmp	r2, r3
 49c:	ble	4b8 <print_data+0x2f4>
 4a0:	ldr	r0, [fp, #-304]	; 0xfffffed0
 4a4:	bl	0 <coda_cursor_goto_next_record_field>
 4a8:	mov	r3, r0
 4ac:	cmp	r3, #0
 4b0:	beq	4b8 <print_data+0x2f4>
 4b4:	bl	0 <handle_coda_error>
 4b8:	ldr	r3, [fp, #-80]	; 0xffffffb0
 4bc:	add	r3, r3, #1
 4c0:	str	r3, [fp, #-80]	; 0xffffffb0
 4c4:	ldr	r2, [fp, #-80]	; 0xffffffb0
 4c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
 4cc:	cmp	r2, r3
 4d0:	blt	3f8 <print_data+0x234>
 4d4:	ldr	r0, [fp, #-304]	; 0xfffffed0
 4d8:	bl	0 <coda_cursor_goto_parent>
 4dc:	movw	r0, #0
 4e0:	movt	r0, #0
 4e4:	bl	0 <ff_printf>
 4e8:	b	bc4 <print_data+0xa00>
 4ec:	movw	r0, #0
 4f0:	movt	r0, #0
 4f4:	bl	0 <ff_printf>
 4f8:	sub	r2, fp, #300	; 0x12c
 4fc:	sub	r3, fp, #96	; 0x60
 500:	mov	r1, r3
 504:	ldr	r0, [fp, #-304]	; 0xfffffed0
 508:	bl	0 <coda_cursor_get_array_dim>
 50c:	mov	r3, r0
 510:	cmp	r3, #0
 514:	beq	51c <print_data+0x358>
 518:	bl	0 <handle_coda_error>
 51c:	ldr	r3, [fp, #-96]	; 0xffffffa0
 520:	cmp	r3, #0
 524:	blt	60c <print_data+0x448>
 528:	mov	r3, #1
 52c:	str	r3, [fp, #-36]	; 0xffffffdc
 530:	mov	r3, #0
 534:	str	r3, [fp, #-40]	; 0xffffffd8
 538:	b	568 <print_data+0x3a4>
 53c:	ldr	r3, [fp, #-40]	; 0xffffffd8
 540:	lsl	r3, r3, #2
 544:	sub	r2, fp, #28
 548:	add	r3, r2, r3
 54c:	ldr	r2, [r3, #-272]	; 0xfffffef0
 550:	ldr	r3, [fp, #-36]	; 0xffffffdc
 554:	mul	r3, r2, r3
 558:	str	r3, [fp, #-36]	; 0xffffffdc
 55c:	ldr	r3, [fp, #-40]	; 0xffffffd8
 560:	add	r3, r3, #1
 564:	str	r3, [fp, #-40]	; 0xffffffd8
 568:	ldr	r3, [fp, #-96]	; 0xffffffa0
 56c:	ldr	r2, [fp, #-40]	; 0xffffffd8
 570:	cmp	r2, r3
 574:	blt	53c <print_data+0x378>
 578:	ldr	r3, [fp, #-36]	; 0xffffffdc
 57c:	cmp	r3, #0
 580:	ble	60c <print_data+0x448>
 584:	ldr	r0, [fp, #-304]	; 0xfffffed0
 588:	bl	0 <coda_cursor_goto_first_array_element>
 58c:	mov	r3, r0
 590:	cmp	r3, #0
 594:	beq	59c <print_data+0x3d8>
 598:	bl	0 <handle_coda_error>
 59c:	mov	r3, #0
 5a0:	str	r3, [fp, #-40]	; 0xffffffd8
 5a4:	b	5f4 <print_data+0x430>
 5a8:	ldr	r0, [fp, #-304]	; 0xfffffed0
 5ac:	bl	1c4 <print_data>
 5b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 5b4:	sub	r3, r3, #1
 5b8:	ldr	r2, [fp, #-40]	; 0xffffffd8
 5bc:	cmp	r2, r3
 5c0:	bge	5e8 <print_data+0x424>
 5c4:	movw	r0, #0
 5c8:	movt	r0, #0
 5cc:	bl	0 <ff_printf>
 5d0:	ldr	r0, [fp, #-304]	; 0xfffffed0
 5d4:	bl	0 <coda_cursor_goto_next_array_element>
 5d8:	mov	r3, r0
 5dc:	cmp	r3, #0
 5e0:	beq	5e8 <print_data+0x424>
 5e4:	bl	0 <handle_coda_error>
 5e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
 5ec:	add	r3, r3, #1
 5f0:	str	r3, [fp, #-40]	; 0xffffffd8
 5f4:	ldr	r2, [fp, #-40]	; 0xffffffd8
 5f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 5fc:	cmp	r2, r3
 600:	blt	5a8 <print_data+0x3e4>
 604:	ldr	r0, [fp, #-304]	; 0xfffffed0
 608:	bl	0 <coda_cursor_goto_parent>
 60c:	movw	r0, #0
 610:	movt	r0, #0
 614:	bl	0 <ff_printf>
 618:	b	bc4 <print_data+0xa00>
 61c:	sub	r3, fp, #100	; 0x64
 620:	mov	r1, r3
 624:	ldr	r0, [fp, #-304]	; 0xfffffed0
 628:	bl	0 <coda_cursor_get_read_type>
 62c:	mov	r3, r0
 630:	cmp	r3, #0
 634:	beq	63c <print_data+0x478>
 638:	bl	0 <handle_coda_error>
 63c:	ldr	r3, [fp, #-100]	; 0xffffff9c
 640:	add	r3, r3, #1
 644:	cmp	r3, #13
 648:	ldrls	pc, [pc, r3, lsl #2]
 64c:	b	bb8 <print_data+0x9f4>
 650:	.word	0x00000a18
 654:	.word	0x000008c4
 658:	.word	0x000008fc
 65c:	.word	0x000008c4
 660:	.word	0x000008fc
 664:	.word	0x000008c4
 668:	.word	0x000008fc
 66c:	.word	0x00000934
 670:	.word	0x0000097c
 674:	.word	0x000009c4
 678:	.word	0x000009c4
 67c:	.word	0x00000688
 680:	.word	0x000006d4
 684:	.word	0x000007a8
 688:	sub	r3, fp, #101	; 0x65
 68c:	mov	r1, r3
 690:	ldr	r0, [fp, #-304]	; 0xfffffed0
 694:	bl	0 <coda_cursor_read_char>
 698:	mov	r3, r0
 69c:	cmp	r3, #0
 6a0:	beq	6a8 <print_data+0x4e4>
 6a4:	bl	0 <handle_coda_error>
 6a8:	movw	r0, #0
 6ac:	movt	r0, #0
 6b0:	bl	0 <ff_printf>
 6b4:	sub	r3, fp, #101	; 0x65
 6b8:	mov	r1, #1
 6bc:	mov	r0, r3
 6c0:	bl	5c <print_escaped>
 6c4:	movw	r0, #0
 6c8:	movt	r0, #0
 6cc:	bl	0 <ff_printf>
 6d0:	b	a28 <print_data+0x864>
 6d4:	sub	r3, fp, #108	; 0x6c
 6d8:	mov	r1, r3
 6dc:	ldr	r0, [fp, #-304]	; 0xfffffed0
 6e0:	bl	0 <coda_cursor_get_string_length>
 6e4:	mov	r3, r0
 6e8:	cmp	r3, #0
 6ec:	beq	6f4 <print_data+0x530>
 6f0:	bl	0 <handle_coda_error>
 6f4:	ldr	r3, [fp, #-108]	; 0xffffff94
 6f8:	add	r3, r3, #1
 6fc:	mov	r0, r3
 700:	bl	0 <malloc>
 704:	mov	r3, r0
 708:	str	r3, [fp, #-44]	; 0xffffffd4
 70c:	ldr	r3, [fp, #-44]	; 0xffffffd4
 710:	cmp	r3, #0
 714:	bne	744 <print_data+0x580>
 718:	ldr	r3, [fp, #-108]	; 0xffffff94
 71c:	add	r2, r3, #1
 720:	movw	r3, #303	; 0x12f
 724:	str	r3, [sp]
 728:	movw	r3, #0
 72c:	movt	r3, #0
 730:	movw	r1, #0
 734:	movt	r1, #0
 738:	mvn	r0, #0
 73c:	bl	0 <coda_set_error>
 740:	bl	0 <handle_coda_error>
 744:	ldr	r3, [fp, #-108]	; 0xffffff94
 748:	add	r3, r3, #1
 74c:	mov	r2, r3
 750:	ldr	r1, [fp, #-44]	; 0xffffffd4
 754:	ldr	r0, [fp, #-304]	; 0xfffffed0
 758:	bl	0 <coda_cursor_read_string>
 75c:	mov	r3, r0
 760:	cmp	r3, #0
 764:	beq	76c <print_data+0x5a8>
 768:	bl	0 <handle_coda_error>
 76c:	movw	r0, #0
 770:	movt	r0, #0
 774:	bl	0 <ff_printf>
 778:	ldr	r3, [fp, #-108]	; 0xffffff94
 77c:	mov	r1, r3
 780:	ldr	r0, [fp, #-44]	; 0xffffffd4
 784:	bl	5c <print_escaped>
 788:	ldr	r3, [fp, #-108]	; 0xffffff94
 78c:	mov	r1, r3
 790:	movw	r0, #0
 794:	movt	r0, #0
 798:	bl	0 <ff_printf>
 79c:	ldr	r0, [fp, #-44]	; 0xffffffd4
 7a0:	bl	0 <free>
 7a4:	b	a28 <print_data+0x864>
 7a8:	sub	r3, fp, #116	; 0x74
 7ac:	mov	r1, r3
 7b0:	ldr	r0, [fp, #-304]	; 0xfffffed0
 7b4:	bl	0 <coda_cursor_get_bit_size>
 7b8:	mov	r3, r0
 7bc:	cmp	r3, #0
 7c0:	beq	7c8 <print_data+0x604>
 7c4:	bl	0 <handle_coda_error>
 7c8:	ldrd	r0, [fp, #-116]	; 0xffffff8c
 7cc:	mov	r2, #0
 7d0:	mov	r3, #0
 7d4:	lsr	r2, r0, #3
 7d8:	orr	r2, r2, r1, lsl #29
 7dc:	asr	r3, r1, #3
 7e0:	ldrd	r0, [fp, #-116]	; 0xffffff8c
 7e4:	mov	r8, #7
 7e8:	mov	r9, #0
 7ec:	and	r6, r0, r8
 7f0:	and	r7, r1, r9
 7f4:	orrs	r1, r6, r7
 7f8:	beq	808 <print_data+0x644>
 7fc:	mov	r0, #1
 800:	mov	r1, #0
 804:	b	810 <print_data+0x64c>
 808:	mov	r0, #0
 80c:	mov	r1, #0
 810:	adds	r4, r0, r2
 814:	adc	r5, r1, r3
 818:	strd	r4, [fp, #-52]	; 0xffffffcc
 81c:	ldr	r3, [fp, #-52]	; 0xffffffcc
 820:	mov	r0, r3
 824:	bl	0 <malloc>
 828:	mov	r3, r0
 82c:	str	r3, [fp, #-56]	; 0xffffffc8
 830:	ldr	r3, [fp, #-56]	; 0xffffffc8
 834:	cmp	r3, #0
 838:	bne	864 <print_data+0x6a0>
 83c:	ldr	r2, [fp, #-52]	; 0xffffffcc
 840:	movw	r3, #334	; 0x14e
 844:	str	r3, [sp]
 848:	movw	r3, #0
 84c:	movt	r3, #0
 850:	movw	r1, #0
 854:	movt	r1, #0
 858:	mvn	r0, #0
 85c:	bl	0 <coda_set_error>
 860:	bl	0 <handle_coda_error>
 864:	ldrd	r2, [fp, #-116]	; 0xffffff8c
 868:	strd	r2, [sp]
 86c:	mov	r2, #0
 870:	mov	r3, #0
 874:	ldr	r1, [fp, #-56]	; 0xffffffc8
 878:	ldr	r0, [fp, #-304]	; 0xfffffed0
 87c:	bl	0 <coda_cursor_read_bits>
 880:	mov	r3, r0
 884:	cmp	r3, #0
 888:	beq	890 <print_data+0x6cc>
 88c:	bl	0 <handle_coda_error>
 890:	movw	r0, #0
 894:	movt	r0, #0
 898:	bl	0 <ff_printf>
 89c:	ldr	r3, [fp, #-52]	; 0xffffffcc
 8a0:	mov	r1, r3
 8a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
 8a8:	bl	5c <print_escaped>
 8ac:	movw	r0, #0
 8b0:	movt	r0, #0
 8b4:	bl	0 <ff_printf>
 8b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
 8bc:	bl	0 <free>
 8c0:	b	a28 <print_data+0x864>
 8c4:	sub	r3, fp, #120	; 0x78
 8c8:	mov	r1, r3
 8cc:	ldr	r0, [fp, #-304]	; 0xfffffed0
 8d0:	bl	0 <coda_cursor_read_int32>
 8d4:	mov	r3, r0
 8d8:	cmp	r3, #0
 8dc:	beq	8e4 <print_data+0x720>
 8e0:	bl	0 <handle_coda_error>
 8e4:	ldr	r3, [fp, #-120]	; 0xffffff88
 8e8:	mov	r1, r3
 8ec:	movw	r0, #0
 8f0:	movt	r0, #0
 8f4:	bl	0 <ff_printf>
 8f8:	b	a28 <print_data+0x864>
 8fc:	sub	r3, fp, #124	; 0x7c
 900:	mov	r1, r3
 904:	ldr	r0, [fp, #-304]	; 0xfffffed0
 908:	bl	0 <coda_cursor_read_uint32>
 90c:	mov	r3, r0
 910:	cmp	r3, #0
 914:	beq	91c <print_data+0x758>
 918:	bl	0 <handle_coda_error>
 91c:	ldr	r3, [fp, #-124]	; 0xffffff84
 920:	mov	r1, r3
 924:	movw	r0, #0
 928:	movt	r0, #0
 92c:	bl	0 <ff_printf>
 930:	b	a28 <print_data+0x864>
 934:	sub	r3, fp, #132	; 0x84
 938:	mov	r1, r3
 93c:	ldr	r0, [fp, #-304]	; 0xfffffed0
 940:	bl	0 <coda_cursor_read_int64>
 944:	mov	r3, r0
 948:	cmp	r3, #0
 94c:	beq	954 <print_data+0x790>
 950:	bl	0 <handle_coda_error>
 954:	ldrd	r0, [fp, #-132]	; 0xffffff7c
 958:	sub	r3, fp, #156	; 0x9c
 95c:	mov	r2, r3
 960:	bl	0 <coda_str64>
 964:	sub	r3, fp, #156	; 0x9c
 968:	mov	r1, r3
 96c:	movw	r0, #0
 970:	movt	r0, #0
 974:	bl	0 <ff_printf>
 978:	b	a28 <print_data+0x864>
 97c:	sub	r3, fp, #164	; 0xa4
 980:	mov	r1, r3
 984:	ldr	r0, [fp, #-304]	; 0xfffffed0
 988:	bl	0 <coda_cursor_read_uint64>
 98c:	mov	r3, r0
 990:	cmp	r3, #0
 994:	beq	99c <print_data+0x7d8>
 998:	bl	0 <handle_coda_error>
 99c:	ldrd	r0, [fp, #-164]	; 0xffffff5c
 9a0:	sub	r3, fp, #188	; 0xbc
 9a4:	mov	r2, r3
 9a8:	bl	0 <coda_str64u>
 9ac:	sub	r3, fp, #188	; 0xbc
 9b0:	mov	r1, r3
 9b4:	movw	r0, #0
 9b8:	movt	r0, #0
 9bc:	bl	0 <ff_printf>
 9c0:	b	a28 <print_data+0x864>
 9c4:	sub	r3, fp, #196	; 0xc4
 9c8:	mov	r1, r3
 9cc:	ldr	r0, [fp, #-304]	; 0xfffffed0
 9d0:	bl	0 <coda_cursor_read_double>
 9d4:	mov	r3, r0
 9d8:	cmp	r3, #0
 9dc:	beq	9e4 <print_data+0x820>
 9e0:	bl	0 <handle_coda_error>
 9e4:	ldr	r3, [fp, #-100]	; 0xffffff9c
 9e8:	cmp	r3, #8
 9ec:	bne	a04 <print_data+0x840>
 9f0:	ldrd	r2, [fp, #-196]	; 0xffffff3c
 9f4:	movw	r0, #0
 9f8:	movt	r0, #0
 9fc:	bl	0 <ff_printf>
 a00:	b	a28 <print_data+0x864>
 a04:	ldrd	r2, [fp, #-196]	; 0xffffff3c
 a08:	movw	r0, #0
 a0c:	movt	r0, #0
 a10:	bl	0 <ff_printf>
 a14:	b	a28 <print_data+0x864>
 a18:	movw	r0, #0
 a1c:	movt	r0, #0
 a20:	bl	0 <ff_printf>
 a24:	nop	{0}
 a28:	b	bb8 <print_data+0x9f4>
 a2c:	sub	r3, fp, #200	; 0xc8
 a30:	mov	r1, r3
 a34:	ldr	r0, [fp, #-304]	; 0xfffffed0
 a38:	bl	0 <coda_cursor_get_special_type>
 a3c:	mov	r3, r0
 a40:	cmp	r3, #0
 a44:	beq	a4c <print_data+0x888>
 a48:	bl	0 <handle_coda_error>
 a4c:	ldr	r3, [fp, #-200]	; 0xffffff38
 a50:	cmp	r3, #3
 a54:	ldrls	pc, [pc, r3, lsl #2]
 a58:	b	bc0 <print_data+0x9fc>
 a5c:	.word	0x00000a6c
 a60:	.word	0x00000a7c
 a64:	.word	0x00000ab0
 a68:	.word	0x00000b64
 a6c:	movw	r0, #0
 a70:	movt	r0, #0
 a74:	bl	0 <ff_printf>
 a78:	b	bb4 <print_data+0x9f0>
 a7c:	sub	r3, fp, #212	; 0xd4
 a80:	mov	r1, r3
 a84:	ldr	r0, [fp, #-304]	; 0xfffffed0
 a88:	bl	0 <coda_cursor_read_double>
 a8c:	mov	r3, r0
 a90:	cmp	r3, #0
 a94:	beq	a9c <print_data+0x8d8>
 a98:	bl	0 <handle_coda_error>
 a9c:	ldrd	r2, [fp, #-212]	; 0xffffff2c
 aa0:	movw	r0, #0
 aa4:	movt	r0, #0
 aa8:	bl	0 <ff_printf>
 aac:	b	bb4 <print_data+0x9f0>
 ab0:	sub	r3, fp, #220	; 0xdc
 ab4:	mov	r1, r3
 ab8:	ldr	r0, [fp, #-304]	; 0xfffffed0
 abc:	bl	0 <coda_cursor_read_double>
 ac0:	mov	r3, r0
 ac4:	cmp	r3, #0
 ac8:	beq	ad0 <print_data+0x90c>
 acc:	bl	0 <handle_coda_error>
 ad0:	vldr	d7, [fp, #-220]	; 0xffffff24
 ad4:	vmov.f64	d0, d7
 ad8:	bl	0 <coda_isNaN>
 adc:	mov	r3, r0
 ae0:	cmp	r3, #0
 ae4:	bne	b00 <print_data+0x93c>
 ae8:	vldr	d7, [fp, #-220]	; 0xffffff24
 aec:	vmov.f64	d0, d7
 af0:	bl	0 <coda_isInf>
 af4:	mov	r3, r0
 af8:	cmp	r3, #0
 afc:	beq	b14 <print_data+0x950>
 b00:	ldrd	r2, [fp, #-220]	; 0xffffff24
 b04:	movw	r0, #0
 b08:	movt	r0, #0
 b0c:	bl	0 <ff_printf>
 b10:	b	bb4 <print_data+0x9f0>
 b14:	vldr	d7, [fp, #-220]	; 0xffffff24
 b18:	sub	r3, fp, #248	; 0xf8
 b1c:	mov	r1, r3
 b20:	movw	r0, #0
 b24:	movt	r0, #0
 b28:	vmov.f64	d0, d7
 b2c:	bl	0 <coda_time_double_to_string>
 b30:	mov	r3, r0
 b34:	cmp	r3, #0
 b38:	beq	b4c <print_data+0x988>
 b3c:	movw	r0, #0
 b40:	movt	r0, #0
 b44:	bl	0 <ff_printf>
 b48:	b	bb4 <print_data+0x9f0>
 b4c:	sub	r3, fp, #248	; 0xf8
 b50:	mov	r1, r3
 b54:	movw	r0, #0
 b58:	movt	r0, #0
 b5c:	bl	0 <ff_printf>
 b60:	b	bb4 <print_data+0x9f0>
 b64:	sub	r2, fp, #268	; 0x10c
 b68:	sub	r3, fp, #260	; 0x104
 b6c:	mov	r1, r3
 b70:	ldr	r0, [fp, #-304]	; 0xfffffed0
 b74:	bl	0 <coda_cursor_read_complex_double_split>
 b78:	mov	r3, r0
 b7c:	cmp	r3, #0
 b80:	beq	b88 <print_data+0x9c4>
 b84:	bl	0 <handle_coda_error>
 b88:	sub	r1, fp, #260	; 0x104
 b8c:	ldrd	r0, [r1]
 b90:	sub	r3, fp, #268	; 0x10c
 b94:	ldrd	r2, [r3]
 b98:	strd	r2, [sp]
 b9c:	mov	r2, r0
 ba0:	mov	r3, r1
 ba4:	movw	r0, #0
 ba8:	movt	r0, #0
 bac:	bl	0 <ff_printf>
 bb0:	nop	{0}
 bb4:	b	bc0 <print_data+0x9fc>
 bb8:	nop	{0}
 bbc:	b	bc4 <print_data+0xa00>
 bc0:	nop	{0}
 bc4:	ldr	r3, [fp, #-64]	; 0xffffffc0
 bc8:	cmp	r3, #0
 bcc:	beq	bdc <print_data+0xa18>
 bd0:	movw	r0, #0
 bd4:	movt	r0, #0
 bd8:	bl	0 <ff_printf>
 bdc:	nop	{0}
 be0:	sub	sp, fp, #28
 be4:	ldrd	r4, [sp]
 be8:	ldrd	r6, [sp, #8]
 bec:	ldrd	r8, [sp, #16]
 bf0:	ldr	fp, [sp, #24]
 bf4:	add	sp, sp, #28
 bf8:	pop	{pc}		; (ldr pc, [sp], #4)

00000bfc <print_json_data>:
 bfc:	str	fp, [sp, #-8]!
 c00:	str	lr, [sp, #4]
 c04:	add	fp, sp, #4
 c08:	sub	sp, sp, #536	; 0x218
 c0c:	str	r0, [fp, #-536]	; 0xfffffde8
 c10:	movw	r3, #0
 c14:	movt	r3, #0
 c18:	ldr	r2, [fp, #-536]	; 0xfffffde8
 c1c:	str	r2, [r3]
 c20:	movw	r3, #0
 c24:	movt	r3, #0
 c28:	ldr	r3, [r3]
 c2c:	sub	r2, fp, #12
 c30:	mov	r1, r2
 c34:	mov	r0, r3
 c38:	bl	0 <coda_open>
 c3c:	str	r0, [fp, #-8]
 c40:	ldr	r3, [fp, #-8]
 c44:	cmp	r3, #0
 c48:	beq	c90 <print_json_data+0x94>
 c4c:	bl	0 <coda_get_errno>
 c50:	mov	r3, r0
 c54:	ldr	r3, [r3]
 c58:	cmn	r3, #21
 c5c:	bne	c90 <print_json_data+0x94>
 c60:	mov	r0, #0
 c64:	bl	0 <coda_set_option_use_mmap>
 c68:	movw	r3, #0
 c6c:	movt	r3, #0
 c70:	ldr	r3, [r3]
 c74:	sub	r2, fp, #12
 c78:	mov	r1, r2
 c7c:	mov	r0, r3
 c80:	bl	0 <coda_open>
 c84:	str	r0, [fp, #-8]
 c88:	mov	r0, #1
 c8c:	bl	0 <coda_set_option_use_mmap>
 c90:	ldr	r3, [fp, #-8]
 c94:	cmp	r3, #0
 c98:	beq	ca0 <print_json_data+0xa4>
 c9c:	bl	0 <handle_coda_error>
 ca0:	ldr	r2, [fp, #-12]
 ca4:	sub	r3, fp, #532	; 0x214
 ca8:	mov	r1, r2
 cac:	mov	r0, r3
 cb0:	bl	0 <coda_cursor_set_product>
 cb4:	mov	r3, r0
 cb8:	cmp	r3, #0
 cbc:	beq	cc4 <print_json_data+0xc8>
 cc0:	bl	0 <handle_coda_error>
 cc4:	movw	r3, #0
 cc8:	movt	r3, #0
 ccc:	ldr	r3, [r3]
 cd0:	cmp	r3, #0
 cd4:	beq	d08 <print_json_data+0x10c>
 cd8:	movw	r3, #0
 cdc:	movt	r3, #0
 ce0:	ldr	r2, [r3]
 ce4:	sub	r3, fp, #532	; 0x214
 ce8:	mov	r1, r2
 cec:	mov	r0, r3
 cf0:	bl	0 <coda_cursor_goto>
 cf4:	str	r0, [fp, #-8]
 cf8:	ldr	r3, [fp, #-8]
 cfc:	cmp	r3, #0
 d00:	beq	d08 <print_json_data+0x10c>
 d04:	bl	0 <handle_coda_error>
 d08:	mov	r0, #0
 d0c:	bl	0 <coda_set_option_perform_boundary_checks>
 d10:	sub	r3, fp, #532	; 0x214
 d14:	mov	r0, r3
 d18:	bl	1c4 <print_data>
 d1c:	movw	r0, #0
 d20:	movt	r0, #0
 d24:	bl	0 <ff_printf>
 d28:	ldr	r3, [fp, #-12]
 d2c:	mov	r0, r3
 d30:	bl	0 <coda_close>
 d34:	nop	{0}
 d38:	sub	sp, fp, #4
 d3c:	ldr	fp, [sp]
 d40:	add	sp, sp, #4
 d44:	pop	{pc}		; (ldr pc, [sp], #4)
