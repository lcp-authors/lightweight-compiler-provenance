
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-check.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_product_check>:
       0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
       4:	add	fp, sp, #24
       8:	sub	sp, sp, #864	; 0x360
       c:	mov	r4, r0
      10:	mov	r0, #0
      14:	mov	r6, r1
      18:	mov	r5, r3
      1c:	mov	r8, r2
      20:	str	r0, [fp, #-28]	; 0xffffffe4
      24:	str	r0, [sp, #324]	; 0x144
      28:	str	r0, [sp, #320]	; 0x140
      2c:	str	r0, [sp, #316]	; 0x13c
      30:	str	r0, [sp, #312]	; 0x138
      34:	add	r0, sp, #336	; 0x150
      38:	mov	r1, r4
      3c:	bl	0 <coda_cursor_set_product>
      40:	mvn	r7, #0
      44:	cmp	r0, #0
      48:	bne	d4 <coda_product_check+0xd4>
      4c:	add	r1, sp, #332	; 0x14c
      50:	mov	r0, r4
      54:	bl	0 <coda_get_product_format>
      58:	cmp	r0, #0
      5c:	bne	d4 <coda_product_check+0xd4>
      60:	ldr	r0, [sp, #332]	; 0x14c
      64:	cmp	r0, #3
      68:	bcc	90 <coda_product_check+0x90>
      6c:	ldr	r0, [r4, #24]
      70:	mov	r3, #0
      74:	mov	r4, #1
      78:	cmp	r0, #0
      7c:	beq	a0 <coda_product_check+0xa0>
      80:	ldr	r0, [r0, #28]
      84:	cmp	r0, #0
      88:	strne	r0, [fp, #-28]	; 0xffffffe4
      8c:	b	a0 <coda_product_check+0xa0>
      90:	cmp	r0, #2
      94:	bne	e0 <coda_product_check+0xe0>
      98:	mov	r3, #0
      9c:	mov	r4, #1
      a0:	add	r0, sp, #312	; 0x138
      a4:	sub	r1, fp, #28
      a8:	mov	r2, r6
      ac:	stm	sp, {r0, r8}
      b0:	add	r0, sp, #336	; 0x150
      b4:	str	r5, [sp, #8]
      b8:	bl	1f8 <check_data>
      bc:	cmp	r0, #0
      c0:	mov	r7, r0
      c4:	mvnne	r7, #0
      c8:	cmp	r4, #0
      cc:	cmpeq	r0, #0
      d0:	beq	154 <coda_product_check+0x154>
      d4:	mov	r0, r7
      d8:	sub	sp, fp, #24
      dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
      e0:	add	r1, sp, #320	; 0x140
      e4:	mov	r0, r4
      e8:	bl	0 <coda_get_product_file_size>
      ec:	cmp	r0, #0
      f0:	bne	d4 <coda_product_check+0xd4>
      f4:	ldr	r1, [sp, #324]	; 0x144
      f8:	ldr	r0, [sp, #320]	; 0x140
      fc:	cmp	r6, #0
     100:	lsl	r1, r1, #3
     104:	lsl	r2, r0, #3
     108:	orr	r0, r1, r0, lsr #29
     10c:	str	r2, [sp, #320]	; 0x140
     110:	str	r0, [sp, #324]	; 0x144
     114:	beq	124 <coda_product_check+0x124>
     118:	mov	r3, #1
     11c:	mov	r4, #0
     120:	b	a0 <coda_product_check+0xa0>
     124:	bl	0 <coda_get_option_use_fast_size_expressions>
     128:	mov	r4, r0
     12c:	mov	r0, #0
     130:	bl	0 <coda_set_option_use_fast_size_expressions>
     134:	add	r0, sp, #336	; 0x150
     138:	add	r1, sp, #312	; 0x138
     13c:	bl	0 <coda_cursor_get_bit_size>
     140:	mov	r6, r0
     144:	mov	r0, r4
     148:	bl	0 <coda_set_option_use_fast_size_expressions>
     14c:	cmp	r6, #0
     150:	bne	d4 <coda_product_check+0xd4>
     154:	ldr	r2, [sp, #312]	; 0x138
     158:	ldr	r0, [sp, #320]	; 0x140
     15c:	ldr	r3, [sp, #316]	; 0x13c
     160:	ldr	r1, [sp, #324]	; 0x144
     164:	mov	r7, #0
     168:	eor	r3, r1, r3
     16c:	eor	r2, r0, r2
     170:	orrs	r2, r2, r3
     174:	beq	d4 <coda_product_check+0xd4>
     178:	lsr	r0, r0, #3
     17c:	add	r2, sp, #35	; 0x23
     180:	orr	r0, r0, r1, lsl #29
     184:	asr	r1, r1, #3
     188:	bl	0 <coda_str64>
     18c:	ldr	r0, [sp, #312]	; 0x138
     190:	ldr	r1, [sp, #316]	; 0x13c
     194:	add	r2, sp, #14
     198:	lsr	r0, r0, #3
     19c:	orr	r0, r0, r1, lsl #29
     1a0:	asr	r1, r1, #3
     1a4:	bl	0 <coda_str64>
     1a8:	ldr	r0, [sp, #312]	; 0x138
     1ac:	ands	r0, r0, #7
     1b0:	beq	1c8 <coda_product_check+0x1c8>
     1b4:	movw	r1, #0
     1b8:	str	r0, [sp]
     1bc:	add	r0, sp, #56	; 0x38
     1c0:	movt	r1, #0
     1c4:	b	1d4 <coda_product_check+0x1d4>
     1c8:	movw	r1, #0
     1cc:	add	r0, sp, #56	; 0x38
     1d0:	movt	r1, #0
     1d4:	add	r2, sp, #35	; 0x23
     1d8:	add	r3, sp, #14
     1dc:	bl	0 <sprintf>
     1e0:	add	r1, sp, #56	; 0x38
     1e4:	mov	r0, #0
     1e8:	mov	r2, r5
     1ec:	mov	r7, #0
     1f0:	blx	r8
     1f4:	b	d4 <coda_product_check+0xd4>

000001f8 <check_data>:
     1f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1fc:	add	fp, sp, #28
     200:	sub	sp, sp, #924	; 0x39c
     204:	ldr	r9, [fp, #8]
     208:	cmp	r9, #0
     20c:	beq	177c <check_data+0x1584>
     210:	mov	r6, r1
     214:	sub	r1, fp, #48	; 0x30
     218:	mov	sl, r3
     21c:	mov	r7, r2
     220:	mov	r5, r0
     224:	bl	0 <coda_cursor_get_type>
     228:	mvn	r4, #0
     22c:	cmp	r0, #0
     230:	bne	248 <check_data+0x50>
     234:	ldr	r0, [fp, #-48]	; 0xffffffd0
     238:	sub	r1, fp, #44	; 0x2c
     23c:	bl	0 <coda_type_get_class>
     240:	cmp	r0, #0
     244:	beq	254 <check_data+0x5c>
     248:	mov	r0, r4
     24c:	sub	sp, fp, #28
     250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     254:	ldr	r0, [r6]
     258:	ldr	r8, [fp, #12]
     25c:	cmp	r0, #0
     260:	beq	39c <check_data+0x1a4>
     264:	add	r1, sp, #48	; 0x30
     268:	mov	r0, r5
     26c:	bl	0 <coda_cursor_get_type_class>
     270:	cmp	r0, #0
     274:	bne	248 <check_data+0x50>
     278:	ldr	r0, [r6]
     27c:	add	r1, sp, #80	; 0x50
     280:	bl	0 <coda_type_get_class>
     284:	cmp	r0, #0
     288:	bne	248 <check_data+0x50>
     28c:	ldr	r0, [sp, #48]	; 0x30
     290:	ldr	r1, [sp, #80]	; 0x50
     294:	cmp	r0, r1
     298:	bne	32c <check_data+0x134>
     29c:	cmp	r0, #6
     2a0:	bhi	39c <check_data+0x1a4>
     2a4:	add	r1, pc, #0
     2a8:	ldr	pc, [r1, r0, lsl #2]
     2ac:	.word	0x000006fc
     2b0:	.word	0x00000820
     2b4:	.word	0x000002c8
     2b8:	.word	0x000002c8
     2bc:	.word	0x0000039c
     2c0:	.word	0x0000039c
     2c4:	.word	0x00000768
     2c8:	add	r1, sp, #376	; 0x178
     2cc:	mov	r0, r5
     2d0:	bl	0 <coda_cursor_get_read_type>
     2d4:	cmp	r0, #0
     2d8:	bne	248 <check_data+0x50>
     2dc:	ldr	r0, [r6]
     2e0:	ldr	r1, [r0, #12]
     2e4:	ldr	r0, [sp, #376]	; 0x178
     2e8:	cmp	r0, r1
     2ec:	beq	39c <check_data+0x1a4>
     2f0:	bl	0 <coda_type_get_native_type_name>
     2f4:	mov	r8, r0
     2f8:	ldr	r0, [r6]
     2fc:	ldr	r0, [r0, #12]
     300:	bl	0 <coda_type_get_native_type_name>
     304:	movw	r1, #0
     308:	mov	r3, r0
     30c:	movw	r0, #65236	; 0xfed4
     310:	mov	r2, r8
     314:	movt	r0, #65535	; 0xffff
     318:	movt	r1, #0
     31c:	bl	0 <coda_set_error>
     320:	ldr	r0, [pc, #3980]	; 12b4 <check_data+0x10bc>
     324:	ldr	r1, [pc, r0]
     328:	b	d9c <check_data+0xba4>
     32c:	bl	0 <coda_type_get_class_name>
     330:	mov	r8, r0
     334:	ldr	r0, [sp, #80]	; 0x50
     338:	bl	0 <coda_type_get_class_name>
     33c:	movw	r1, #0
     340:	mov	r3, r0
     344:	movw	r0, #65236	; 0xfed4
     348:	mov	r2, r8
     34c:	movt	r0, #65535	; 0xffff
     350:	movt	r1, #0
     354:	bl	0 <coda_set_error>
     358:	ldr	r0, [pc, #4060]	; 133c <check_data+0x1144>
     35c:	ldr	r1, [pc, r0]
     360:	str	r1, [sp, #44]	; 0x2c
     364:	bl	0 <__aeabi_read_tp>
     368:	mov	r8, r0
     36c:	ldr	r0, [r0, r1]
     370:	bl	0 <coda_errno_to_string>
     374:	ldr	r2, [fp, #16]
     378:	ldr	r3, [fp, #12]
     37c:	mov	r1, r0
     380:	mov	r0, r5
     384:	blx	r3
     388:	ldr	r1, [sp, #44]	; 0x2c
     38c:	mov	r0, #0
     390:	str	r0, [r8, r1]
     394:	ldr	r8, [fp, #12]
     398:	str	r0, [r6]
     39c:	cmp	sl, #0
     3a0:	beq	3e4 <check_data+0x1ec>
     3a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
     3a8:	cmp	r0, #6
     3ac:	bhi	3e4 <check_data+0x1ec>
     3b0:	mov	r1, #1
     3b4:	mov	r2, #60	; 0x3c
     3b8:	tst	r2, r1, lsl r0
     3bc:	beq	3d8 <check_data+0x1e0>
     3c0:	mov	r0, r5
     3c4:	mov	r1, r9
     3c8:	bl	0 <coda_cursor_get_bit_size>
     3cc:	cmp	r0, #0
     3d0:	bne	248 <check_data+0x50>
     3d4:	b	3e4 <check_data+0x1ec>
     3d8:	mov	r0, #0
     3dc:	str	r0, [r9]
     3e0:	str	r0, [r9, #4]
     3e4:	cmp	r7, #0
     3e8:	beq	f58 <check_data+0xd60>
     3ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
     3f0:	sub	r0, r0, #2
     3f4:	cmp	r0, #4
     3f8:	bhi	f58 <check_data+0xd60>
     3fc:	add	r1, pc, #0
     400:	ldr	pc, [r1, r0, lsl #2]
     404:	.word	0x00000418
     408:	.word	0x00000418
     40c:	.word	0x000004b8
     410:	.word	0x000004fc
     414:	.word	0x00000470
     418:	mov	r0, #0
     41c:	add	r1, sp, #376	; 0x178
     420:	str	r0, [sp, #44]	; 0x2c
     424:	mov	r0, r5
     428:	bl	0 <coda_cursor_read_double>
     42c:	cmp	r0, #0
     430:	beq	f60 <check_data+0xd68>
     434:	ldr	r0, [pc, #4004]	; 13e0 <check_data+0x11e8>
     438:	ldr	r1, [pc, r0]
     43c:	bl	0 <__aeabi_read_tp>
     440:	ldr	r0, [r0, r1]
     444:	add	r1, r0, #104	; 0x68
     448:	cmp	r1, #2
     44c:	bcc	458 <check_data+0x260>
     450:	cmn	r0, #300	; 0x12c
     454:	bne	248 <check_data+0x50>
     458:	bl	0 <coda_errno_to_string>
     45c:	ldr	r2, [fp, #16]
     460:	mov	r1, r0
     464:	mov	r0, r5
     468:	blx	r8
     46c:	b	f60 <check_data+0xd68>
     470:	mov	r0, #0
     474:	add	r1, sp, #112	; 0x70
     478:	str	r0, [sp, #44]	; 0x2c
     47c:	mov	r0, r5
     480:	bl	0 <coda_cursor_get_special_type>
     484:	cmp	r0, #0
     488:	bne	248 <check_data+0x50>
     48c:	ldr	r0, [sp, #112]	; 0x70
     490:	cmp	r0, #2
     494:	bne	f60 <check_data+0xd68>
     498:	add	r1, sp, #376	; 0x178
     49c:	mov	r0, r5
     4a0:	bl	0 <coda_cursor_read_double>
     4a4:	cmp	r0, #0
     4a8:	beq	f60 <check_data+0xd68>
     4ac:	ldr	r0, [pc, #3888]	; 13e4 <check_data+0x11ec>
     4b0:	ldr	r1, [pc, r0]
     4b4:	b	43c <check_data+0x244>
     4b8:	add	r1, sp, #376	; 0x178
     4bc:	mov	r0, r5
     4c0:	bl	0 <coda_cursor_get_string_length>
     4c4:	cmp	r0, #0
     4c8:	beq	620 <check_data+0x428>
     4cc:	ldr	r0, [pc, #3860]	; 13e8 <check_data+0x11f0>
     4d0:	ldr	r1, [pc, r0]
     4d4:	bl	0 <__aeabi_read_tp>
     4d8:	ldr	r0, [r0, r1]
     4dc:	add	r1, r0, #104	; 0x68
     4e0:	cmp	r1, #2
     4e4:	bcc	4f0 <check_data+0x2f8>
     4e8:	cmn	r0, #300	; 0x12c
     4ec:	bne	248 <check_data+0x50>
     4f0:	bl	0 <coda_errno_to_string>
     4f4:	mov	r1, r0
     4f8:	b	b18 <check_data+0x920>
     4fc:	cmp	sl, #0
     500:	beq	698 <check_data+0x4a0>
     504:	ldr	r0, [r9, #4]
     508:	cmn	r0, #1
     50c:	ble	6dc <check_data+0x4e4>
     510:	ldr	r1, [r9]
     514:	lsr	r2, r1, #3
     518:	orr	r2, r2, r0, lsl #29
     51c:	lsr	r0, r0, #3
     520:	adds	r3, r2, #1
     524:	adc	r8, r0, #0
     528:	ands	r1, r1, #7
     52c:	ldr	r1, [r6]
     530:	moveq	r3, r2
     534:	moveq	r8, r0
     538:	ldr	r0, [fp, #-48]	; 0xffffffd0
     53c:	add	r2, sp, #112	; 0x70
     540:	str	r3, [sp, #44]	; 0x2c
     544:	cmp	r1, #0
     548:	movne	r0, r1
     54c:	add	r1, sp, #376	; 0x178
     550:	bl	0 <coda_type_get_fixed_value>
     554:	cmp	r0, #0
     558:	bne	248 <check_data+0x50>
     55c:	ldr	r0, [sp, #376]	; 0x178
     560:	mov	r1, r8
     564:	ldr	r8, [sp, #44]	; 0x2c
     568:	mov	r3, #0
     56c:	cmp	r0, #0
     570:	beq	614 <check_data+0x41c>
     574:	ldr	ip, [sp, #112]	; 0x70
     578:	eor	r1, r1, ip, asr #31
     57c:	eor	r2, r8, ip
     580:	orrs	r1, r2, r1
     584:	bne	c6c <check_data+0xa74>
     588:	mov	r0, r8
     58c:	ldr	r8, [fp, #12]
     590:	cmp	ip, #1
     594:	blt	618 <check_data+0x420>
     598:	mov	r8, r0
     59c:	bl	0 <malloc>
     5a0:	cmp	r0, #0
     5a4:	beq	df0 <check_data+0xbf8>
     5a8:	mov	r2, r0
     5ac:	ldrd	r0, [r9]
     5b0:	mov	r3, #0
     5b4:	mov	r8, r2
     5b8:	stm	sp, {r0, r1}
     5bc:	mov	r1, r2
     5c0:	mov	r0, r5
     5c4:	mov	r2, #0
     5c8:	bl	0 <coda_cursor_read_bits>
     5cc:	cmp	r0, #0
     5d0:	bne	68c <check_data+0x494>
     5d4:	ldr	r2, [sp, #112]	; 0x70
     5d8:	ldr	r1, [sp, #376]	; 0x178
     5dc:	mov	r0, r8
     5e0:	str	r8, [sp, #44]	; 0x2c
     5e4:	bl	0 <bcmp>
     5e8:	cmp	r0, #0
     5ec:	beq	608 <check_data+0x410>
     5f0:	ldr	r2, [fp, #16]
     5f4:	ldr	r3, [fp, #12]
     5f8:	movw	r1, #0
     5fc:	mov	r0, r5
     600:	movt	r1, #0
     604:	blx	r3
     608:	ldr	r0, [sp, #44]	; 0x2c
     60c:	bl	0 <free>
     610:	mov	r3, #0
     614:	ldr	r8, [fp, #12]
     618:	str	r3, [sp, #44]	; 0x2c
     61c:	b	f60 <check_data+0xd68>
     620:	ldr	r0, [sp, #376]	; 0x178
     624:	cmn	r0, #1
     628:	ble	b10 <check_data+0x918>
     62c:	ldr	r1, [r6]
     630:	ldr	r0, [fp, #-48]	; 0xffffffd0
     634:	add	r2, sp, #80	; 0x50
     638:	cmp	r1, #0
     63c:	movne	r0, r1
     640:	add	r1, sp, #112	; 0x70
     644:	bl	0 <coda_type_get_fixed_value>
     648:	cmp	r0, #0
     64c:	bne	248 <check_data+0x50>
     650:	ldr	r0, [sp, #376]	; 0x178
     654:	cmp	r0, #1
     658:	blt	de0 <check_data+0xbe8>
     65c:	add	r8, r0, #1
     660:	mov	r0, r8
     664:	bl	0 <malloc>
     668:	cmp	r0, #0
     66c:	beq	de8 <check_data+0xbf0>
     670:	mov	r1, r0
     674:	mov	r2, r8
     678:	mov	r0, r5
     67c:	mov	r8, r1
     680:	bl	0 <coda_cursor_read_string>
     684:	cmp	r0, #0
     688:	beq	e14 <check_data+0xc1c>
     68c:	mov	r0, r8
     690:	bl	0 <free>
     694:	b	248 <check_data+0x50>
     698:	mov	r0, r5
     69c:	mov	r1, r9
     6a0:	bl	0 <coda_cursor_get_bit_size>
     6a4:	cmp	r0, #0
     6a8:	beq	504 <check_data+0x30c>
     6ac:	ldr	r0, [pc, #4084]	; 16a8 <check_data+0x14b0>
     6b0:	ldr	r1, [pc, r0]
     6b4:	bl	0 <__aeabi_read_tp>
     6b8:	ldr	r0, [r0, r1]
     6bc:	add	r1, r0, #104	; 0x68
     6c0:	cmp	r1, #2
     6c4:	bcc	6d0 <check_data+0x4d8>
     6c8:	cmn	r0, #300	; 0x12c
     6cc:	bne	248 <check_data+0x50>
     6d0:	bl	0 <coda_errno_to_string>
     6d4:	mov	r1, r0
     6d8:	b	6e4 <check_data+0x4ec>
     6dc:	movw	r1, #0
     6e0:	movt	r1, #0
     6e4:	ldr	r2, [fp, #16]
     6e8:	mov	r0, r5
     6ec:	blx	r8
     6f0:	mov	r3, #1
     6f4:	str	r3, [sp, #44]	; 0x2c
     6f8:	b	f60 <check_data+0xd68>
     6fc:	ldr	r8, [r6]
     700:	add	r1, sp, #376	; 0x178
     704:	mov	r0, r5
     708:	bl	0 <coda_cursor_get_type>
     70c:	cmp	r0, #0
     710:	bne	248 <check_data+0x50>
     714:	ldr	r0, [r8, #48]	; 0x30
     718:	cmp	r0, #1
     71c:	blt	c90 <check_data+0xa98>
     720:	ldr	r0, [pc, #4016]	; 16d8 <check_data+0x14e0>
     724:	mov	r1, #0
     728:	str	r8, [sp, #40]	; 0x28
     72c:	ldr	r0, [pc, r0]
     730:	str	r0, [sp, #12]
     734:	ldr	r0, [pc, #4000]	; 16dc <check_data+0x14e4>
     738:	ldr	r0, [pc, r0]
     73c:	str	r0, [sp, #20]
     740:	ldr	r0, [pc, #3992]	; 16e0 <check_data+0x14e8>
     744:	ldr	r0, [pc, r0]
     748:	str	r0, [sp, #16]
     74c:	ldr	r0, [pc, #4092]	; 1750 <check_data+0x1558>
     750:	ldr	r0, [pc, r0]
     754:	str	r0, [sp, #28]
     758:	ldr	r0, [pc, #4084]	; 1754 <check_data+0x155c>
     75c:	ldr	r0, [pc, r0]
     760:	str	r0, [sp, #24]
     764:	b	8a8 <check_data+0x6b0>
     768:	add	r1, sp, #376	; 0x178
     76c:	mov	r0, r5
     770:	bl	0 <coda_cursor_get_special_type>
     774:	cmp	r0, #0
     778:	bne	248 <check_data+0x50>
     77c:	ldr	r0, [r6]
     780:	add	r1, sp, #112	; 0x70
     784:	bl	0 <coda_type_get_special_type>
     788:	cmp	r0, #0
     78c:	bne	248 <check_data+0x50>
     790:	ldr	r0, [sp, #376]	; 0x178
     794:	ldr	r1, [sp, #112]	; 0x70
     798:	cmp	r0, r1
     79c:	beq	80c <check_data+0x614>
     7a0:	bl	0 <coda_type_get_special_type_name>
     7a4:	mov	r8, r0
     7a8:	ldr	r0, [sp, #112]	; 0x70
     7ac:	bl	0 <coda_type_get_special_type_name>
     7b0:	movw	r1, #0
     7b4:	mov	r3, r0
     7b8:	movw	r0, #65236	; 0xfed4
     7bc:	mov	r2, r8
     7c0:	movt	r0, #65535	; 0xffff
     7c4:	movt	r1, #0
     7c8:	bl	0 <coda_set_error>
     7cc:	ldr	r0, [pc, #4088]	; 17cc <check_data+0x15d4>
     7d0:	ldr	r1, [pc, r0]
     7d4:	str	r1, [sp, #44]	; 0x2c
     7d8:	bl	0 <__aeabi_read_tp>
     7dc:	mov	r8, r0
     7e0:	ldr	r0, [r0, r1]
     7e4:	bl	0 <coda_errno_to_string>
     7e8:	ldr	r2, [fp, #16]
     7ec:	ldr	r3, [fp, #12]
     7f0:	mov	r1, r0
     7f4:	mov	r0, r5
     7f8:	blx	r3
     7fc:	ldr	r1, [sp, #44]	; 0x2c
     800:	mov	r0, #0
     804:	str	r0, [r8, r1]
     808:	ldr	r8, [fp, #12]
     80c:	mov	r0, #0
     810:	str	r0, [r6]
     814:	cmp	sl, #0
     818:	bne	3a4 <check_data+0x1ac>
     81c:	b	3e4 <check_data+0x1ec>
     820:	ldr	r8, [r6]
     824:	sub	r1, fp, #56	; 0x38
     828:	add	r2, sp, #376	; 0x178
     82c:	mov	r0, r5
     830:	bl	0 <coda_cursor_get_array_dim>
     834:	cmp	r0, #0
     838:	bne	248 <check_data+0x50>
     83c:	ldr	r3, [r8, #48]	; 0x30
     840:	ldr	r2, [fp, #-56]	; 0xffffffc8
     844:	cmp	r2, r3
     848:	bne	d80 <check_data+0xb88>
     84c:	cmp	r2, #1
     850:	add	lr, sp, #376	; 0x178
     854:	blt	dd0 <check_data+0xbd8>
     858:	ldr	r0, [pc, #4000]	; 1800 <check_data+0x1608>
     85c:	mov	ip, r8
     860:	mov	r8, #0
     864:	str	ip, [sp, #36]	; 0x24
     868:	ldr	r0, [pc, r0]
     86c:	str	r0, [sp, #44]	; 0x2c
     870:	ldr	r0, [pc, #3972]	; 17fc <check_data+0x1604>
     874:	ldr	r0, [pc, r0]
     878:	str	r0, [sp, #32]
     87c:	b	b90 <check_data+0x998>
     880:	mvn	r0, #0
     884:	cmp	r0, #0
     888:	ldrne	r0, [sp, #368]	; 0x170
     88c:	cmpne	r0, #0
     890:	bne	a58 <check_data+0x860>
     894:	ldr	r1, [sp, #44]	; 0x2c
     898:	ldr	r0, [r8, #48]	; 0x30
     89c:	add	r1, r1, #1
     8a0:	cmp	r1, r0
     8a4:	bge	c90 <check_data+0xa98>
     8a8:	mov	r0, #1
     8ac:	str	r1, [sp, #44]	; 0x2c
     8b0:	sub	r2, fp, #36	; 0x24
     8b4:	str	r0, [fp, #-56]	; 0xffffffc8
     8b8:	str	r0, [sp, #368]	; 0x170
     8bc:	ldr	r0, [r8, #52]	; 0x34
     8c0:	ldr	r0, [r0, r1, lsl #2]
     8c4:	ldr	r1, [r0]
     8c8:	mov	r0, r5
     8cc:	bl	0 <coda_cursor_get_record_field_index_from_name>
     8d0:	cmp	r0, #0
     8d4:	beq	904 <check_data+0x70c>
     8d8:	bl	0 <__aeabi_read_tp>
     8dc:	ldr	r1, [sp, #28]
     8e0:	ldr	r0, [r0, r1]
     8e4:	cmn	r0, #102	; 0x66
     8e8:	bne	248 <check_data+0x50>
     8ec:	bl	0 <__aeabi_read_tp>
     8f0:	ldr	r2, [sp, #24]
     8f4:	mov	r1, #0
     8f8:	str	r1, [sp, #368]	; 0x170
     8fc:	str	r1, [r0, r2]
     900:	b	91c <check_data+0x724>
     904:	ldr	r1, [fp, #-36]	; 0xffffffdc
     908:	mov	r0, r5
     90c:	add	r2, sp, #368	; 0x170
     910:	bl	0 <coda_cursor_get_record_field_available_status>
     914:	cmp	r0, #0
     918:	bne	248 <check_data+0x50>
     91c:	ldr	r0, [r8, #52]	; 0x34
     920:	ldr	r1, [sp, #44]	; 0x2c
     924:	ldr	r0, [r0, r1, lsl #2]
     928:	ldrb	r1, [r0, #16]
     92c:	cmp	r1, #0
     930:	beq	9a8 <check_data+0x7b0>
     934:	ldr	r0, [r0, #20]
     938:	cmp	r0, #0
     93c:	beq	b04 <check_data+0x90c>
     940:	mov	r1, r5
     944:	sub	r2, fp, #56	; 0x38
     948:	bl	0 <coda_expression_eval_bool>
     94c:	cmp	r0, #0
     950:	beq	9a8 <check_data+0x7b0>
     954:	ldr	r0, [r8, #52]	; 0x34
     958:	ldr	r1, [sp, #44]	; 0x2c
     95c:	ldr	r0, [r0, r1, lsl #2]
     960:	ldr	r1, [r0]
     964:	movw	r0, #0
     968:	movt	r0, #0
     96c:	bl	0 <coda_add_error_message>
     970:	bl	0 <__aeabi_read_tp>
     974:	ldr	r8, [sp, #16]
     978:	str	r0, [sp, #36]	; 0x24
     97c:	ldr	r0, [r0, r8]
     980:	bl	0 <coda_errno_to_string>
     984:	ldr	r2, [fp, #16]
     988:	ldr	r3, [fp, #12]
     98c:	mov	r1, r0
     990:	mov	r0, r5
     994:	blx	r3
     998:	ldr	r1, [sp, #36]	; 0x24
     99c:	mov	r0, #0
     9a0:	str	r0, [r1, r8]
     9a4:	ldr	r8, [sp, #40]	; 0x28
     9a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
     9ac:	cmn	r0, #1
     9b0:	beq	880 <check_data+0x688>
     9b4:	ldr	r1, [sp, #368]	; 0x170
     9b8:	cmp	r1, r0
     9bc:	beq	884 <check_data+0x68c>
     9c0:	movw	r3, #0
     9c4:	movw	r2, #0
     9c8:	cmp	r0, #0
     9cc:	movt	r3, #0
     9d0:	movt	r2, #0
     9d4:	mov	r0, r3
     9d8:	mov	lr, r3
     9dc:	moveq	r0, r2
     9e0:	mov	ip, r2
     9e4:	ldr	r2, [r8, #52]	; 0x34
     9e8:	ldr	r3, [sp, #44]	; 0x2c
     9ec:	cmp	r1, #0
     9f0:	movw	r1, #0
     9f4:	movt	r1, #0
     9f8:	ldr	r2, [r2, r3, lsl #2]
     9fc:	mov	r3, lr
     a00:	moveq	r3, ip
     a04:	ldr	r2, [r2]
     a08:	str	r0, [sp]
     a0c:	movw	r0, #65236	; 0xfed4
     a10:	movt	r0, #65535	; 0xffff
     a14:	bl	0 <coda_set_error>
     a18:	bl	0 <__aeabi_read_tp>
     a1c:	ldr	r8, [sp, #12]
     a20:	str	r0, [sp, #36]	; 0x24
     a24:	ldr	r0, [r0, r8]
     a28:	bl	0 <coda_errno_to_string>
     a2c:	ldr	r2, [fp, #16]
     a30:	ldr	r3, [fp, #12]
     a34:	mov	r1, r0
     a38:	mov	r0, r5
     a3c:	blx	r3
     a40:	ldr	r1, [sp, #36]	; 0x24
     a44:	mov	r0, #0
     a48:	str	r0, [r1, r8]
     a4c:	ldr	r8, [sp, #40]	; 0x28
     a50:	ldr	r0, [fp, #-56]	; 0xffffffc8
     a54:	b	884 <check_data+0x68c>
     a58:	ldr	r0, [sp, #376]	; 0x178
     a5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     a60:	sub	r2, fp, #40	; 0x28
     a64:	bl	0 <coda_type_get_record_field_real_name>
     a68:	cmp	r0, #0
     a6c:	bne	248 <check_data+0x50>
     a70:	ldr	r0, [r8, #52]	; 0x34
     a74:	ldr	r1, [sp, #44]	; 0x2c
     a78:	ldr	r0, [r0, r1, lsl #2]
     a7c:	ldr	r8, [r0, #4]
     a80:	str	r0, [sp, #36]	; 0x24
     a84:	cmp	r8, #0
     a88:	ldreq	r8, [r0]
     a8c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     a90:	mov	r1, r8
     a94:	str	r0, [sp, #32]
     a98:	bl	0 <strcmp>
     a9c:	cmp	r0, #0
     aa0:	beq	afc <check_data+0x904>
     aa4:	ldr	r0, [sp, #36]	; 0x24
     aa8:	ldr	r3, [sp, #32]
     aac:	movw	r1, #0
     ab0:	movt	r1, #0
     ab4:	ldr	r2, [r0]
     ab8:	movw	r0, #65236	; 0xfed4
     abc:	str	r8, [sp]
     ac0:	movt	r0, #65535	; 0xffff
     ac4:	bl	0 <coda_set_error>
     ac8:	bl	0 <__aeabi_read_tp>
     acc:	ldr	r8, [sp, #20]
     ad0:	str	r0, [sp, #36]	; 0x24
     ad4:	ldr	r0, [r0, r8]
     ad8:	bl	0 <coda_errno_to_string>
     adc:	ldr	r2, [fp, #16]
     ae0:	ldr	r3, [fp, #12]
     ae4:	mov	r1, r0
     ae8:	mov	r0, r5
     aec:	blx	r3
     af0:	ldr	r1, [sp, #36]	; 0x24
     af4:	mov	r0, #0
     af8:	str	r0, [r1, r8]
     afc:	ldr	r8, [sp, #40]	; 0x28
     b00:	b	894 <check_data+0x69c>
     b04:	mvn	r0, #0
     b08:	str	r0, [fp, #-56]	; 0xffffffc8
     b0c:	b	884 <check_data+0x68c>
     b10:	movw	r1, #0
     b14:	movt	r1, #0
     b18:	ldr	r2, [fp, #16]
     b1c:	mov	r0, r5
     b20:	blx	r8
     b24:	mov	r0, #1
     b28:	b	f5c <check_data+0xd64>
     b2c:	movw	r0, #0
     b30:	mov	r1, r8
     b34:	movt	r0, #0
     b38:	bl	0 <coda_add_error_message>
     b3c:	bl	0 <__aeabi_read_tp>
     b40:	mov	r1, r0
     b44:	str	r0, [sp, #40]	; 0x28
     b48:	ldr	r0, [sp, #32]
     b4c:	ldr	r0, [r1, r0]
     b50:	bl	0 <coda_errno_to_string>
     b54:	ldr	r2, [fp, #16]
     b58:	ldr	r3, [fp, #12]
     b5c:	mov	r1, r0
     b60:	mov	r0, r5
     b64:	blx	r3
     b68:	ldr	r1, [sp, #32]
     b6c:	ldr	r2, [sp, #40]	; 0x28
     b70:	mov	r0, #0
     b74:	add	lr, sp, #376	; 0x178
     b78:	str	r0, [r2, r1]
     b7c:	ldr	ip, [sp, #36]	; 0x24
     b80:	ldr	r0, [fp, #-56]	; 0xffffffc8
     b84:	add	r8, r8, #1
     b88:	cmp	r8, r0
     b8c:	bge	dd0 <check_data+0xbd8>
     b90:	add	r1, ip, r8, lsl #2
     b94:	ldr	r0, [r1, #52]	; 0x34
     b98:	cmp	r0, #0
     b9c:	bmi	c0c <check_data+0xa14>
     ba0:	ldr	r3, [lr, r8, lsl #2]
     ba4:	cmp	r3, r0
     ba8:	beq	b80 <check_data+0x988>
     bac:	movw	r1, #0
     bb0:	str	r0, [sp]
     bb4:	movw	r0, #65236	; 0xfed4
     bb8:	mov	r2, r8
     bbc:	movt	r0, #65535	; 0xffff
     bc0:	movt	r1, #0
     bc4:	bl	0 <coda_set_error>
     bc8:	bl	0 <__aeabi_read_tp>
     bcc:	ldr	r1, [sp, #44]	; 0x2c
     bd0:	str	r0, [sp, #40]	; 0x28
     bd4:	ldr	r0, [r0, r1]
     bd8:	bl	0 <coda_errno_to_string>
     bdc:	ldr	r2, [fp, #16]
     be0:	ldr	r3, [fp, #12]
     be4:	mov	r1, r0
     be8:	mov	r0, r5
     bec:	blx	r3
     bf0:	ldr	r1, [sp, #40]	; 0x28
     bf4:	ldr	r2, [sp, #44]	; 0x2c
     bf8:	ldr	ip, [sp, #36]	; 0x24
     bfc:	mov	r0, #0
     c00:	add	lr, sp, #376	; 0x178
     c04:	str	r0, [r1, r2]
     c08:	b	b80 <check_data+0x988>
     c0c:	ldr	r0, [r1, #84]	; 0x54
     c10:	cmp	r0, #0
     c14:	beq	b80 <check_data+0x988>
     c18:	mov	r1, r5
     c1c:	add	r2, sp, #112	; 0x70
     c20:	bl	0 <coda_expression_eval_integer>
     c24:	cmp	r0, #0
     c28:	bne	b2c <check_data+0x934>
     c2c:	add	lr, sp, #376	; 0x178
     c30:	ldr	r1, [sp, #116]	; 0x74
     c34:	ldr	r0, [sp, #112]	; 0x70
     c38:	ldr	r3, [lr, r8, lsl #2]
     c3c:	eor	r1, r1, r3, asr #31
     c40:	eor	r2, r0, r3
     c44:	orrs	r1, r2, r1
     c48:	beq	b7c <check_data+0x984>
     c4c:	movw	r1, #0
     c50:	str	r0, [sp]
     c54:	movw	r0, #65236	; 0xfed4
     c58:	mov	r2, r8
     c5c:	movt	r0, #65535	; 0xffff
     c60:	movt	r1, #0
     c64:	bl	0 <coda_set_error>
     c68:	b	b3c <check_data+0x944>
     c6c:	ldr	r2, [fp, #16]
     c70:	ldr	r8, [fp, #12]
     c74:	movw	r1, #0
     c78:	mov	r0, r5
     c7c:	movt	r1, #0
     c80:	blx	r8
     c84:	mov	r3, #0
     c88:	str	r3, [sp, #44]	; 0x2c
     c8c:	b	f60 <check_data+0xd68>
     c90:	add	r1, sp, #112	; 0x70
     c94:	mov	r0, r5
     c98:	bl	0 <coda_cursor_get_num_elements>
     c9c:	cmp	r0, #0
     ca0:	bne	248 <check_data+0x50>
     ca4:	ldr	r0, [sp, #112]	; 0x70
     ca8:	cmp	r0, #1
     cac:	blt	dd0 <check_data+0xbd8>
     cb0:	ldr	r0, [pc, #2872]	; 17f0 <check_data+0x15f8>
     cb4:	mov	r8, #0
     cb8:	ldr	r0, [pc, r0]
     cbc:	str	r0, [sp, #36]	; 0x24
     cc0:	ldr	r0, [pc, #2860]	; 17f4 <check_data+0x15fc>
     cc4:	ldr	r0, [pc, r0]
     cc8:	str	r0, [sp, #44]	; 0x2c
     ccc:	b	ce0 <check_data+0xae8>
     cd0:	ldr	r0, [sp, #112]	; 0x70
     cd4:	add	r8, r8, #1
     cd8:	cmp	r8, r0
     cdc:	bge	dd0 <check_data+0xbd8>
     ce0:	ldr	r0, [sp, #376]	; 0x178
     ce4:	mov	r1, r8
     ce8:	sub	r2, fp, #56	; 0x38
     cec:	bl	0 <coda_type_get_record_field_name>
     cf0:	cmp	r0, #0
     cf4:	bne	248 <check_data+0x50>
     cf8:	ldr	r0, [r6]
     cfc:	ldr	r1, [fp, #-56]	; 0xffffffc8
     d00:	add	r2, sp, #368	; 0x170
     d04:	bl	0 <coda_type_get_record_field_index_from_name>
     d08:	mov	r1, r0
     d0c:	bl	0 <__aeabi_read_tp>
     d10:	cmp	r1, #0
     d14:	beq	cd0 <check_data+0xad8>
     d18:	ldr	r1, [sp, #36]	; 0x24
     d1c:	ldr	r0, [r0, r1]
     d20:	cmn	r0, #102	; 0x66
     d24:	bne	cd0 <check_data+0xad8>
     d28:	ldr	r2, [fp, #-56]	; 0xffffffc8
     d2c:	movw	r0, #65236	; 0xfed4
     d30:	movw	r1, #0
     d34:	movt	r0, #65535	; 0xffff
     d38:	movt	r1, #0
     d3c:	bl	0 <coda_set_error>
     d40:	bl	0 <__aeabi_read_tp>
     d44:	mov	r1, r0
     d48:	str	r0, [sp, #40]	; 0x28
     d4c:	ldr	r0, [sp, #44]	; 0x2c
     d50:	ldr	r0, [r1, r0]
     d54:	bl	0 <coda_errno_to_string>
     d58:	ldr	r2, [fp, #16]
     d5c:	ldr	r3, [fp, #12]
     d60:	mov	r1, r0
     d64:	mov	r0, r5
     d68:	blx	r3
     d6c:	ldr	r1, [sp, #44]	; 0x2c
     d70:	ldr	r2, [sp, #40]	; 0x28
     d74:	mov	r0, #0
     d78:	str	r0, [r2, r1]
     d7c:	b	cd0 <check_data+0xad8>
     d80:	movw	r0, #65236	; 0xfed4
     d84:	movw	r1, #0
     d88:	movt	r0, #65535	; 0xffff
     d8c:	movt	r1, #0
     d90:	bl	0 <coda_set_error>
     d94:	ldr	r0, [pc, #2652]	; 17f8 <check_data+0x1600>
     d98:	ldr	r1, [pc, r0]
     d9c:	str	r1, [sp, #44]	; 0x2c
     da0:	bl	0 <__aeabi_read_tp>
     da4:	mov	r8, r0
     da8:	ldr	r0, [r0, r1]
     dac:	bl	0 <coda_errno_to_string>
     db0:	ldr	r2, [fp, #16]
     db4:	ldr	r3, [fp, #12]
     db8:	mov	r1, r0
     dbc:	mov	r0, r5
     dc0:	blx	r3
     dc4:	ldr	r1, [sp, #44]	; 0x2c
     dc8:	mov	r0, #0
     dcc:	str	r0, [r8, r1]
     dd0:	ldr	r8, [fp, #12]
     dd4:	cmp	sl, #0
     dd8:	bne	3a4 <check_data+0x1ac>
     ddc:	b	3e4 <check_data+0x1ec>
     de0:	mov	r3, #0
     de4:	b	e1c <check_data+0xc24>
     de8:	movw	r0, #411	; 0x19b
     dec:	b	df4 <check_data+0xbfc>
     df0:	mov	r0, #524	; 0x20c
     df4:	movw	r1, #0
     df8:	movw	r3, #0
     dfc:	str	r0, [sp]
     e00:	mvn	r0, #0
     e04:	mov	r2, r8
     e08:	movt	r1, #0
     e0c:	movt	r3, #0
     e10:	b	16d0 <check_data+0x14d8>
     e14:	mov	r3, r8
     e18:	ldr	r8, [fp, #12]
     e1c:	ldr	r1, [sp, #112]	; 0x70
     e20:	cmp	r1, #0
     e24:	beq	e88 <check_data+0xc90>
     e28:	ldr	r2, [sp, #376]	; 0x178
     e2c:	ldr	r0, [sp, #80]	; 0x50
     e30:	cmp	r2, r0
     e34:	bne	e6c <check_data+0xc74>
     e38:	cmp	r2, #1
     e3c:	blt	e88 <check_data+0xc90>
     e40:	mov	r0, r3
     e44:	str	r3, [sp, #44]	; 0x2c
     e48:	bl	0 <bcmp>
     e4c:	ldr	r3, [sp, #44]	; 0x2c
     e50:	cmp	r0, #0
     e54:	beq	e88 <check_data+0xc90>
     e58:	ldr	r2, [fp, #16]
     e5c:	movw	r1, #0
     e60:	mov	r0, r5
     e64:	movt	r1, #0
     e68:	b	e80 <check_data+0xc88>
     e6c:	ldr	r2, [fp, #16]
     e70:	movw	r1, #0
     e74:	mov	r0, r5
     e78:	str	r3, [sp, #44]	; 0x2c
     e7c:	movt	r1, #0
     e80:	blx	r8
     e84:	ldr	r3, [sp, #44]	; 0x2c
     e88:	ldr	r0, [fp, #-48]	; 0xffffffd0
     e8c:	ldr	r0, [r0, #44]	; 0x2c
     e90:	cmp	r0, #1
     e94:	bne	f48 <check_data+0xd50>
     e98:	ldr	r0, [r5]
     e9c:	ldr	r0, [r0, #60]	; 0x3c
     ea0:	cmp	r0, #3
     ea4:	bhi	f48 <check_data+0xd50>
     ea8:	add	r1, pc, #0
     eac:	ldr	pc, [r1, r0, lsl #2]
     eb0:	.word	0x000017b4
     eb4:	.word	0x00000ec0
     eb8:	.word	0x00000ee4
     ebc:	.word	0x00000f08
     ec0:	ldr	r0, [sp, #376]	; 0x178
     ec4:	cmp	r0, #1
     ec8:	bne	ed8 <check_data+0xce0>
     ecc:	ldrb	r0, [r3]
     ed0:	cmp	r0, #10
     ed4:	beq	f50 <check_data+0xd58>
     ed8:	movw	r1, #0
     edc:	movt	r1, #0
     ee0:	b	f34 <check_data+0xd3c>
     ee4:	ldr	r0, [sp, #376]	; 0x178
     ee8:	cmp	r0, #1
     eec:	bne	efc <check_data+0xd04>
     ef0:	ldrb	r0, [r3]
     ef4:	cmp	r0, #13
     ef8:	beq	f50 <check_data+0xd58>
     efc:	movw	r1, #0
     f00:	movt	r1, #0
     f04:	b	f34 <check_data+0xd3c>
     f08:	ldr	r0, [sp, #376]	; 0x178
     f0c:	cmp	r0, #2
     f10:	bne	f2c <check_data+0xd34>
     f14:	ldrb	r0, [r3]
     f18:	cmp	r0, #13
     f1c:	bne	f2c <check_data+0xd34>
     f20:	ldrb	r0, [r3, #1]
     f24:	cmp	r0, #10
     f28:	beq	f50 <check_data+0xd58>
     f2c:	movw	r1, #0
     f30:	movt	r1, #0
     f34:	ldr	r2, [fp, #16]
     f38:	mov	r0, r5
     f3c:	str	r3, [sp, #44]	; 0x2c
     f40:	blx	r8
     f44:	ldr	r3, [sp, #44]	; 0x2c
     f48:	cmp	r3, #0
     f4c:	beq	f58 <check_data+0xd60>
     f50:	mov	r0, r3
     f54:	bl	0 <free>
     f58:	mov	r0, #0
     f5c:	str	r0, [sp, #44]	; 0x2c
     f60:	sub	r1, fp, #36	; 0x24
     f64:	mov	r0, r5
     f68:	bl	0 <coda_cursor_has_attributes>
     f6c:	cmp	r0, #0
     f70:	bne	248 <check_data+0x50>
     f74:	ldr	r0, [fp, #-36]	; 0xffffffdc
     f78:	cmp	r0, #0
     f7c:	beq	100c <check_data+0xe14>
     f80:	mov	r0, #0
     f84:	str	r0, [sp, #112]	; 0x70
     f88:	ldr	r0, [r6]
     f8c:	cmp	r0, #0
     f90:	beq	fa4 <check_data+0xdac>
     f94:	add	r1, sp, #112	; 0x70
     f98:	bl	0 <coda_type_get_attributes>
     f9c:	cmp	r0, #0
     fa0:	bne	248 <check_data+0x50>
     fa4:	mov	r0, r5
     fa8:	bl	0 <coda_cursor_goto_attributes>
     fac:	cmp	r0, #0
     fb0:	bne	248 <check_data+0x50>
     fb4:	add	r0, sp, #376	; 0x178
     fb8:	add	r1, sp, #112	; 0x70
     fbc:	mov	r2, r7
     fc0:	mov	r3, #0
     fc4:	stm	sp, {r0, r8}
     fc8:	ldr	r0, [fp, #16]
     fcc:	str	r0, [sp, #8]
     fd0:	mov	r0, r5
     fd4:	bl	1f8 <check_data>
     fd8:	cmp	r0, #0
     fdc:	bne	248 <check_data+0x50>
     fe0:	mov	r0, r5
     fe4:	bl	0 <coda_cursor_goto_parent>
     fe8:	ldr	r0, [r6]
     fec:	cmp	r0, #0
     ff0:	beq	1010 <check_data+0xe18>
     ff4:	ldr	r1, [sp, #112]	; 0x70
     ff8:	ldr	r2, [sp, #44]	; 0x2c
     ffc:	cmp	r1, #0
    1000:	moveq	r0, #0
    1004:	streq	r0, [r6]
    1008:	b	1014 <check_data+0xe1c>
    100c:	ldr	r0, [r6]
    1010:	ldr	r2, [sp, #44]	; 0x2c
    1014:	orrs	r1, sl, r7
    1018:	cmpeq	r0, #0
    101c:	beq	14cc <check_data+0x12d4>
    1020:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1024:	cmp	r1, #0
    1028:	beq	1128 <check_data+0xf30>
    102c:	cmp	r1, #6
    1030:	beq	10a4 <check_data+0xeac>
    1034:	cmp	r1, #1
    1038:	bne	14cc <check_data+0x12d4>
    103c:	mov	r1, #0
    1040:	cmp	r0, #0
    1044:	str	r1, [sp, #376]	; 0x178
    1048:	beq	105c <check_data+0xe64>
    104c:	add	r1, sp, #376	; 0x178
    1050:	bl	0 <coda_type_get_array_base_type>
    1054:	cmp	r0, #0
    1058:	bne	248 <check_data+0x50>
    105c:	add	r1, sp, #112	; 0x70
    1060:	mov	r0, r5
    1064:	bl	0 <coda_cursor_get_num_elements>
    1068:	cmp	r0, #0
    106c:	bne	248 <check_data+0x50>
    1070:	ldr	r0, [sp, #112]	; 0x70
    1074:	cmp	r0, #1
    1078:	blt	14c8 <check_data+0x12d0>
    107c:	mov	r0, r5
    1080:	bl	0 <coda_cursor_goto_first_array_element>
    1084:	cmp	r0, #0
    1088:	bne	248 <check_data+0x50>
    108c:	ldr	r0, [sp, #112]	; 0x70
    1090:	ldr	r1, [fp, #16]
    1094:	cmp	r0, #1
    1098:	blt	13b8 <check_data+0x11c0>
    109c:	mov	r8, #0
    10a0:	b	12cc <check_data+0x10d4>
    10a4:	mov	r0, #0
    10a8:	add	r1, sp, #376	; 0x178
    10ac:	str	r0, [sp, #112]	; 0x70
    10b0:	mov	r0, r5
    10b4:	bl	0 <coda_cursor_get_special_type>
    10b8:	cmp	r0, #0
    10bc:	bne	248 <check_data+0x50>
    10c0:	ldr	r0, [sp, #376]	; 0x178
    10c4:	cmp	r0, #0
    10c8:	beq	179c <check_data+0x15a4>
    10cc:	ldr	r0, [r6]
    10d0:	cmp	r0, #0
    10d4:	beq	10e8 <check_data+0xef0>
    10d8:	add	r1, sp, #112	; 0x70
    10dc:	bl	0 <coda_type_get_special_base_type>
    10e0:	cmp	r0, #0
    10e4:	bne	248 <check_data+0x50>
    10e8:	mov	r0, r5
    10ec:	bl	0 <coda_cursor_use_base_type_of_special_type>
    10f0:	cmp	r0, #0
    10f4:	bne	248 <check_data+0x50>
    10f8:	ldr	r0, [fp, #16]
    10fc:	add	r1, sp, #112	; 0x70
    1100:	mov	r2, r7
    1104:	mov	r3, sl
    1108:	str	r9, [sp]
    110c:	str	r8, [sp, #4]
    1110:	str	r0, [sp, #8]
    1114:	mov	r0, r5
    1118:	bl	1f8 <check_data>
    111c:	cmp	r0, #0
    1120:	bne	248 <check_data+0x50>
    1124:	b	14c8 <check_data+0x12d0>
    1128:	add	r8, sp, #376	; 0x178
    112c:	mov	r1, r5
    1130:	mov	r2, #520	; 0x208
    1134:	mov	r0, r8
    1138:	bl	0 <memcpy>
    113c:	sub	r1, fp, #40	; 0x28
    1140:	mov	r0, r8
    1144:	bl	0 <coda_cursor_get_num_elements>
    1148:	cmp	r0, #0
    114c:	bne	248 <check_data+0x50>
    1150:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1154:	cmp	r0, #1
    1158:	blt	1348 <check_data+0x1150>
    115c:	mov	r0, r5
    1160:	bl	0 <coda_cursor_goto_first_record_field>
    1164:	cmp	r0, #0
    1168:	bne	248 <check_data+0x50>
    116c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1170:	cmp	r0, #1
    1174:	blt	1340 <check_data+0x1148>
    1178:	ldr	r0, [pc, #1668]	; 1804 <check_data+0x160c>
    117c:	mov	r1, #0
    1180:	ldr	r0, [pc, r0]
    1184:	str	r0, [sp, #40]	; 0x28
    1188:	b	11a0 <check_data+0xfa8>
    118c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1190:	mov	r1, r8
    1194:	add	r1, r1, #1
    1198:	cmp	r1, r0
    119c:	bge	1340 <check_data+0x1148>
    11a0:	mov	r0, #0
    11a4:	add	r2, sp, #80	; 0x50
    11a8:	mov	r8, r1
    11ac:	str	r0, [sp, #112]	; 0x70
    11b0:	add	r0, sp, #376	; 0x178
    11b4:	bl	0 <coda_cursor_get_record_field_available_status>
    11b8:	cmp	r0, #0
    11bc:	bne	248 <check_data+0x50>
    11c0:	ldr	r0, [sp, #80]	; 0x50
    11c4:	cmp	r0, #0
    11c8:	beq	1288 <check_data+0x1090>
    11cc:	ldr	r0, [r6]
    11d0:	cmp	r0, #0
    11d4:	beq	1234 <check_data+0x103c>
    11d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    11dc:	mov	r1, r8
    11e0:	add	r2, sp, #48	; 0x30
    11e4:	bl	0 <coda_type_get_record_field_name>
    11e8:	cmp	r0, #0
    11ec:	bne	248 <check_data+0x50>
    11f0:	ldr	r0, [r6]
    11f4:	ldr	r1, [sp, #48]	; 0x30
    11f8:	add	r2, sp, #368	; 0x170
    11fc:	bl	0 <coda_type_get_record_field_index_from_name>
    1200:	cmp	r0, #0
    1204:	beq	121c <check_data+0x1024>
    1208:	bl	0 <__aeabi_read_tp>
    120c:	ldr	r1, [sp, #40]	; 0x28
    1210:	mov	r2, #0
    1214:	str	r2, [r0, r1]
    1218:	b	1234 <check_data+0x103c>
    121c:	ldr	r0, [r6]
    1220:	ldr	r1, [sp, #368]	; 0x170
    1224:	add	r2, sp, #112	; 0x70
    1228:	bl	0 <coda_type_get_record_field_type>
    122c:	cmp	r0, #0
    1230:	bne	248 <check_data+0x50>
    1234:	sub	r0, fp, #56	; 0x38
    1238:	add	r1, sp, #112	; 0x70
    123c:	mov	r2, r7
    1240:	mov	r3, sl
    1244:	str	r0, [sp]
    1248:	ldr	r0, [fp, #12]
    124c:	str	r0, [sp, #4]
    1250:	ldr	r0, [fp, #16]
    1254:	str	r0, [sp, #8]
    1258:	mov	r0, r5
    125c:	bl	1f8 <check_data>
    1260:	cmp	r0, #0
    1264:	bne	248 <check_data+0x50>
    1268:	cmp	sl, #0
    126c:	beq	1288 <check_data+0x1090>
    1270:	ldrd	r0, [r9]
    1274:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1278:	ldr	r3, [fp, #-52]	; 0xffffffcc
    127c:	adds	r0, r0, r2
    1280:	adc	r1, r1, r3
    1284:	strd	r0, [r9]
    1288:	ldr	r0, [fp, #-40]	; 0xffffffd8
    128c:	mov	r2, r8
    1290:	sub	r1, r0, #1
    1294:	cmp	r8, r1
    1298:	mov	r1, r8
    129c:	bge	1194 <check_data+0xf9c>
    12a0:	mov	r0, r5
    12a4:	bl	0 <coda_cursor_goto_next_record_field>
    12a8:	cmp	r0, #0
    12ac:	beq	118c <check_data+0xf94>
    12b0:	b	248 <check_data+0x50>
    12b4:	.word	0x00000f88
    12b8:	ldr	r0, [sp, #112]	; 0x70
    12bc:	ldr	r1, [fp, #16]
    12c0:	add	r8, r8, #1
    12c4:	cmp	r8, r0
    12c8:	bge	13b8 <check_data+0x11c0>
    12cc:	sub	r0, fp, #56	; 0x38
    12d0:	mov	r2, r7
    12d4:	mov	r3, sl
    12d8:	str	r0, [sp]
    12dc:	ldr	r0, [fp, #12]
    12e0:	stmib	sp, {r0, r1}
    12e4:	mov	r0, r5
    12e8:	add	r1, sp, #376	; 0x178
    12ec:	bl	1f8 <check_data>
    12f0:	cmp	r0, #0
    12f4:	bne	248 <check_data+0x50>
    12f8:	cmp	sl, #0
    12fc:	beq	1318 <check_data+0x1120>
    1300:	ldrd	r0, [r9]
    1304:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1308:	ldr	r3, [fp, #-52]	; 0xffffffcc
    130c:	adds	r0, r0, r2
    1310:	adc	r1, r1, r3
    1314:	strd	r0, [r9]
    1318:	ldr	r0, [sp, #112]	; 0x70
    131c:	sub	r1, r0, #1
    1320:	cmp	r8, r1
    1324:	bge	12bc <check_data+0x10c4>
    1328:	mov	r0, r5
    132c:	bl	0 <coda_cursor_goto_next_array_element>
    1330:	cmp	r0, #0
    1334:	beq	12b8 <check_data+0x10c0>
    1338:	b	248 <check_data+0x50>
    133c:	.word	0x00000fd8
    1340:	mov	r0, r5
    1344:	bl	0 <coda_cursor_goto_parent>
    1348:	cmp	sl, #0
    134c:	beq	14c8 <check_data+0x12d0>
    1350:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1354:	ldr	r0, [r0, #32]
    1358:	cmp	r0, #0
    135c:	beq	14c8 <check_data+0x12d0>
    1360:	bl	0 <coda_get_option_use_fast_size_expressions>
    1364:	mov	r6, r0
    1368:	mov	r0, #1
    136c:	bl	0 <coda_set_option_use_fast_size_expressions>
    1370:	add	r1, sp, #368	; 0x170
    1374:	mov	r0, r5
    1378:	bl	0 <coda_cursor_get_bit_size>
    137c:	cmp	r0, #0
    1380:	beq	13ec <check_data+0x11f4>
    1384:	ldr	r0, [pc, #1148]	; 1808 <check_data+0x1610>
    1388:	ldr	r1, [pc, r0]
    138c:	bl	0 <__aeabi_read_tp>
    1390:	ldr	r0, [r0, r1]
    1394:	bl	0 <coda_errno_to_string>
    1398:	ldr	r2, [fp, #16]
    139c:	ldr	r3, [fp, #12]
    13a0:	mov	r1, r0
    13a4:	mov	r0, r5
    13a8:	blx	r3
    13ac:	mov	r0, #1
    13b0:	str	r0, [sp, #44]	; 0x2c
    13b4:	b	14c0 <check_data+0x12c8>
    13b8:	mov	r0, r5
    13bc:	bl	0 <coda_cursor_goto_parent>
    13c0:	ldr	r0, [r6]
    13c4:	cmp	r0, #0
    13c8:	beq	14c8 <check_data+0x12d0>
    13cc:	ldr	r0, [sp, #376]	; 0x178
    13d0:	cmp	r0, #0
    13d4:	moveq	r0, #0
    13d8:	streq	r0, [r6]
    13dc:	b	14c8 <check_data+0x12d0>
    13e0:	.word	0x00000fa0
    13e4:	.word	0x00000f2c
    13e8:	.word	0x00000f10
    13ec:	ldrd	r0, [r9]
    13f0:	ldr	r2, [sp, #368]	; 0x170
    13f4:	ldr	r3, [sp, #372]	; 0x174
    13f8:	eor	r3, r1, r3
    13fc:	eor	r2, r0, r2
    1400:	orrs	r2, r2, r3
    1404:	beq	14c0 <check_data+0x12c8>
    1408:	lsr	r0, r0, #3
    140c:	add	r8, sp, #80	; 0x50
    1410:	orr	r0, r0, r1, lsl #29
    1414:	asr	r1, r1, #3
    1418:	mov	r2, r8
    141c:	bl	0 <coda_str64>
    1420:	ldr	r0, [r9]
    1424:	ands	r7, r0, #7
    1428:	beq	1448 <check_data+0x1250>
    142c:	mov	r0, r8
    1430:	bl	0 <strlen>
    1434:	movw	r1, #0
    1438:	add	r0, r8, r0
    143c:	mov	r2, r7
    1440:	movt	r1, #0
    1444:	bl	0 <sprintf>
    1448:	ldr	r0, [sp, #368]	; 0x170
    144c:	ldr	r1, [sp, #372]	; 0x174
    1450:	add	r8, sp, #48	; 0x30
    1454:	mov	r2, r8
    1458:	lsr	r0, r0, #3
    145c:	orr	r0, r0, r1, lsl #29
    1460:	asr	r1, r1, #3
    1464:	bl	0 <coda_str64>
    1468:	ldr	r0, [sp, #368]	; 0x170
    146c:	ands	r7, r0, #7
    1470:	beq	1490 <check_data+0x1298>
    1474:	mov	r0, r8
    1478:	bl	0 <strlen>
    147c:	movw	r1, #0
    1480:	add	r0, r8, r0
    1484:	mov	r2, r7
    1488:	movt	r1, #0
    148c:	bl	0 <sprintf>
    1490:	movw	r1, #0
    1494:	add	r7, sp, #112	; 0x70
    1498:	add	r2, sp, #80	; 0x50
    149c:	add	r3, sp, #48	; 0x30
    14a0:	movt	r1, #0
    14a4:	mov	r0, r7
    14a8:	bl	0 <sprintf>
    14ac:	ldr	r2, [fp, #16]
    14b0:	ldr	r3, [fp, #12]
    14b4:	mov	r0, r5
    14b8:	mov	r1, r7
    14bc:	blx	r3
    14c0:	mov	r0, r6
    14c4:	bl	0 <coda_set_option_use_fast_size_expressions>
    14c8:	ldr	r2, [sp, #44]	; 0x2c
    14cc:	cmp	sl, #0
    14d0:	beq	16a0 <check_data+0x14a8>
    14d4:	cmp	r2, #0
    14d8:	bne	16a0 <check_data+0x14a8>
    14dc:	ldr	r0, [r5, #4]
    14e0:	add	r0, r5, r0, lsl #4
    14e4:	ldr	r1, [r0, #-8]
    14e8:	ldr	r0, [r1]
    14ec:	cmp	r0, #100	; 0x64
    14f0:	bne	16a0 <check_data+0x14a8>
    14f4:	ldr	r0, [r1, #8]
    14f8:	cmp	r0, #2
    14fc:	bne	16a0 <check_data+0x14a8>
    1500:	ldr	sl, [r5]
    1504:	ldm	r9, {r0, r3}
    1508:	ldr	r7, [r1, #16]
    150c:	asr	r9, r3, #3
    1510:	lsr	r2, r0, #3
    1514:	and	r8, r0, #7
    1518:	ldr	r0, [sl, #16]
    151c:	orr	r6, r2, r3, lsl #29
    1520:	cmp	r0, #2
    1524:	bne	1604 <check_data+0x140c>
    1528:	adds	r0, r6, #1
    152c:	adc	r2, r9, #0
    1530:	cmp	r8, #0
    1534:	moveq	r0, r6
    1538:	moveq	r2, r9
    153c:	subs	r0, r0, r7
    1540:	sbcs	r0, r2, r7, asr #31
    1544:	bge	1604 <check_data+0x140c>
    1548:	subs	r0, r7, r6
    154c:	ldr	r8, [r1, #24]
    1550:	rsc	r2, r9, r7, asr #31
    1554:	str	r0, [sp, #44]	; 0x2c
    1558:	add	r0, r0, #1
    155c:	str	r2, [sp, #36]	; 0x24
    1560:	bl	0 <malloc>
    1564:	cmp	r0, #0
    1568:	str	r0, [sp, #40]	; 0x28
    156c:	beq	16ac <check_data+0x14b4>
    1570:	ldr	r0, [sl, #48]	; 0x30
    1574:	asr	r1, r8, #31
    1578:	adds	r6, r8, r6
    157c:	adc	r9, r1, r9
    1580:	cmp	r0, #0
    1584:	beq	17d0 <check_data+0x15d8>
    1588:	adds	r2, r8, r7
    158c:	ldr	r3, [sl, #40]!	; 0x28
    1590:	adc	r1, r1, r7, asr #31
    1594:	ldr	r7, [sl, #4]
    1598:	subs	r2, r3, r2
    159c:	sbcs	r1, r7, r1
    15a0:	bcs	16e4 <check_data+0x14ec>
    15a4:	ldr	r0, [sp, #44]	; 0x2c
    15a8:	ldr	r1, [sp, #36]	; 0x24
    15ac:	add	r5, sp, #376	; 0x178
    15b0:	mov	r2, r5
    15b4:	bl	0 <coda_str64>
    15b8:	add	r7, sp, #112	; 0x70
    15bc:	mov	r0, r6
    15c0:	mov	r1, r9
    15c4:	mov	r2, r7
    15c8:	bl	0 <coda_str64>
    15cc:	ldrd	r0, [sl]
    15d0:	add	r6, sp, #80	; 0x50
    15d4:	mov	r2, r6
    15d8:	bl	0 <coda_str64>
    15dc:	movw	r1, #0
    15e0:	mvn	r0, #300	; 0x12c
    15e4:	mov	r2, r5
    15e8:	mov	r3, r7
    15ec:	str	r6, [sp]
    15f0:	movt	r1, #0
    15f4:	bl	0 <coda_set_error>
    15f8:	ldr	r0, [sp, #40]	; 0x28
    15fc:	bl	0 <free>
    1600:	b	248 <check_data+0x50>
    1604:	adds	r0, r6, #1
    1608:	adc	r1, r9, #0
    160c:	cmp	r8, #0
    1610:	moveq	r1, r9
    1614:	moveq	r0, r6
    1618:	eor	r1, r1, r7, asr #31
    161c:	eor	r0, r0, r7
    1620:	orrs	r0, r0, r1
    1624:	beq	16a0 <check_data+0x14a8>
    1628:	asr	r1, r7, #31
    162c:	add	r2, sp, #112	; 0x70
    1630:	mov	r0, r7
    1634:	bl	0 <coda_str64>
    1638:	add	r4, sp, #80	; 0x50
    163c:	mov	r0, r6
    1640:	mov	r1, r9
    1644:	mov	r2, r4
    1648:	bl	0 <coda_str64>
    164c:	cmp	r8, #0
    1650:	beq	1670 <check_data+0x1478>
    1654:	mov	r0, r4
    1658:	bl	0 <strlen>
    165c:	movw	r1, #0
    1660:	add	r0, r4, r0
    1664:	mov	r2, r8
    1668:	movt	r1, #0
    166c:	bl	0 <sprintf>
    1670:	movw	r1, #0
    1674:	add	r4, sp, #376	; 0x178
    1678:	add	r2, sp, #112	; 0x70
    167c:	add	r3, sp, #80	; 0x50
    1680:	movt	r1, #0
    1684:	mov	r0, r4
    1688:	bl	0 <sprintf>
    168c:	ldr	r2, [fp, #16]
    1690:	ldr	r3, [fp, #12]
    1694:	mov	r0, r5
    1698:	mov	r1, r4
    169c:	blx	r3
    16a0:	mov	r4, #0
    16a4:	b	248 <check_data+0x50>
    16a8:	.word	0x00000ff0
    16ac:	ldr	r2, [sp, #44]	; 0x2c
    16b0:	movw	r1, #0
    16b4:	movw	r3, #0
    16b8:	movw	r0, #831	; 0x33f
    16bc:	mvn	r4, #0
    16c0:	movt	r1, #0
    16c4:	movt	r3, #0
    16c8:	str	r0, [sp]
    16cc:	mvn	r0, #0
    16d0:	bl	0 <coda_set_error>
    16d4:	b	248 <check_data+0x50>
    16d8:	.word	0x00000fa4
    16dc:	.word	0x00000f9c
    16e0:	.word	0x00000f94
    16e4:	add	r1, r0, r6
    16e8:	ldr	r6, [sp, #40]	; 0x28
    16ec:	ldr	r7, [sp, #44]	; 0x2c
    16f0:	mov	r0, r6
    16f4:	mov	r2, r7
    16f8:	bl	0 <memcpy>
    16fc:	ldr	r1, [sp, #36]	; 0x24
    1700:	subs	r0, r7, #1
    1704:	mov	r4, #0
    1708:	strb	r4, [r6, r7]
    170c:	sbcs	r0, r1, #0
    1710:	blt	1770 <check_data+0x1578>
    1714:	movw	r2, #19
    1718:	mov	r0, #0
    171c:	mov	ip, #1
    1720:	movt	r2, #128	; 0x80
    1724:	ldrb	r3, [r6, r0]
    1728:	sub	r3, r3, #9
    172c:	cmp	r3, #23
    1730:	bhi	1758 <check_data+0x1560>
    1734:	tst	r2, ip, lsl r3
    1738:	beq	1758 <check_data+0x1560>
    173c:	add	r0, r0, #1
    1740:	subs	r3, r0, r7
    1744:	rscs	r3, r1, #0
    1748:	blt	1724 <check_data+0x152c>
    174c:	b	1770 <check_data+0x1578>
    1750:	.word	0x00000ff8
    1754:	.word	0x00000ff0
    1758:	ldr	r2, [fp, #16]
    175c:	ldr	r3, [fp, #12]
    1760:	movw	r1, #0
    1764:	mov	r0, r5
    1768:	movt	r1, #0
    176c:	blx	r3
    1770:	mov	r0, r6
    1774:	bl	0 <free>
    1778:	b	248 <check_data+0x50>
    177c:	movw	r0, #0
    1780:	movw	r1, #0
    1784:	movw	r3, #0
    1788:	movw	r2, #306	; 0x132
    178c:	movt	r0, #0
    1790:	movt	r1, #0
    1794:	movt	r3, #0
    1798:	bl	0 <__assert_fail>
    179c:	movw	r0, #0
    17a0:	movw	r1, #0
    17a4:	movw	r3, #0
    17a8:	movw	r2, #778	; 0x30a
    17ac:	movt	r0, #0
    17b0:	b	1790 <check_data+0x1598>
    17b4:	movw	r0, #0
    17b8:	movw	r1, #0
    17bc:	movw	r3, #0
    17c0:	movw	r2, #462	; 0x1ce
    17c4:	movt	r0, #0
    17c8:	b	1790 <check_data+0x1598>
    17cc:	.word	0x00000ff4
    17d0:	movw	r0, #0
    17d4:	movw	r1, #0
    17d8:	movw	r3, #0
    17dc:	mov	r2, #83	; 0x53
    17e0:	movt	r0, #0
    17e4:	movt	r1, #0
    17e8:	movt	r3, #0
    17ec:	bl	0 <__assert_fail>
    17f0:	.word	0x00000b30
    17f4:	.word	0x00000b28
    17f8:	.word	0x00000a58
    17fc:	.word	0x00000f80
    1800:	.word	0x00000f90
    1804:	.word	0x0000067c
    1808:	.word	0x00000478
