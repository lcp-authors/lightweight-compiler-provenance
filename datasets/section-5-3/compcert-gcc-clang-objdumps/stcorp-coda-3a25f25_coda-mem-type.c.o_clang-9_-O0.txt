
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_type_delete>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #16
       c:	str	r0, [fp, #-4]
      10:	ldr	r0, [fp, #-4]
      14:	movw	r1, #0
      18:	cmp	r0, r1
      1c:	beq	24 <coda_mem_type_delete+0x24>
      20:	b	44 <coda_mem_type_delete+0x44>
      24:	movw	r0, #0
      28:	movt	r0, #0
      2c:	movw	r1, #0
      30:	movt	r1, #0
      34:	movw	r2, #42	; 0x2a
      38:	movw	r3, #0
      3c:	movt	r3, #0
      40:	bl	0 <__assert_fail>
      44:	ldr	r0, [fp, #-4]
      48:	ldr	r0, [r0]
      4c:	cmp	r0, #100	; 0x64
      50:	bne	58 <coda_mem_type_delete+0x58>
      54:	b	78 <coda_mem_type_delete+0x78>
      58:	movw	r0, #0
      5c:	movt	r0, #0
      60:	movw	r1, #0
      64:	movt	r1, #0
      68:	movw	r2, #43	; 0x2b
      6c:	movw	r3, #0
      70:	movt	r3, #0
      74:	bl	0 <__assert_fail>
      78:	ldr	r0, [fp, #-4]
      7c:	ldr	r0, [r0, #8]
      80:	cmp	r0, #3
      84:	str	r0, [sp, #4]
      88:	bhi	1ec <coda_mem_type_delete+0x1ec>
      8c:	add	r0, pc, #8
      90:	ldr	r1, [sp, #4]
      94:	ldr	r0, [r0, r1, lsl #2]
      98:	mov	pc, r0
      9c:	.word	0x000000ac
      a0:	.word	0x00000138
      a4:	.word	0x000001c4
      a8:	.word	0x000001c8
      ac:	ldr	r0, [fp, #-4]
      b0:	ldr	r0, [r0, #20]
      b4:	movw	r1, #0
      b8:	cmp	r0, r1
      bc:	beq	134 <coda_mem_type_delete+0x134>
      c0:	movw	r0, #0
      c4:	str	r0, [sp, #8]
      c8:	ldr	r0, [sp, #8]
      cc:	ldr	r1, [fp, #-4]
      d0:	ldr	r1, [r1, #16]
      d4:	cmp	r0, r1
      d8:	bge	128 <coda_mem_type_delete+0x128>
      dc:	ldr	r0, [fp, #-4]
      e0:	ldr	r0, [r0, #20]
      e4:	ldr	r1, [sp, #8]
      e8:	add	r0, r0, r1, lsl #2
      ec:	ldr	r0, [r0]
      f0:	movw	r1, #0
      f4:	cmp	r0, r1
      f8:	beq	114 <coda_mem_type_delete+0x114>
      fc:	ldr	r0, [fp, #-4]
     100:	ldr	r0, [r0, #20]
     104:	ldr	r1, [sp, #8]
     108:	add	r0, r0, r1, lsl #2
     10c:	ldr	r0, [r0]
     110:	bl	0 <coda_dynamic_type_delete>
     114:	b	118 <coda_mem_type_delete+0x118>
     118:	ldr	r0, [sp, #8]
     11c:	add	r0, r0, #1
     120:	str	r0, [sp, #8]
     124:	b	c8 <coda_mem_type_delete+0xc8>
     128:	ldr	r0, [fp, #-4]
     12c:	ldr	r0, [r0, #20]
     130:	bl	0 <free>
     134:	b	1ec <coda_mem_type_delete+0x1ec>
     138:	ldr	r0, [fp, #-4]
     13c:	ldr	r0, [r0, #20]
     140:	movw	r1, #0
     144:	cmp	r0, r1
     148:	beq	1c0 <coda_mem_type_delete+0x1c0>
     14c:	movw	r0, #0
     150:	str	r0, [sp, #8]
     154:	ldr	r0, [sp, #8]
     158:	ldr	r1, [fp, #-4]
     15c:	ldr	r1, [r1, #16]
     160:	cmp	r0, r1
     164:	bge	1b4 <coda_mem_type_delete+0x1b4>
     168:	ldr	r0, [fp, #-4]
     16c:	ldr	r0, [r0, #20]
     170:	ldr	r1, [sp, #8]
     174:	add	r0, r0, r1, lsl #2
     178:	ldr	r0, [r0]
     17c:	movw	r1, #0
     180:	cmp	r0, r1
     184:	beq	1a0 <coda_mem_type_delete+0x1a0>
     188:	ldr	r0, [fp, #-4]
     18c:	ldr	r0, [r0, #20]
     190:	ldr	r1, [sp, #8]
     194:	add	r0, r0, r1, lsl #2
     198:	ldr	r0, [r0]
     19c:	bl	0 <coda_dynamic_type_delete>
     1a0:	b	1a4 <coda_mem_type_delete+0x1a4>
     1a4:	ldr	r0, [sp, #8]
     1a8:	add	r0, r0, #1
     1ac:	str	r0, [sp, #8]
     1b0:	b	154 <coda_mem_type_delete+0x154>
     1b4:	ldr	r0, [fp, #-4]
     1b8:	ldr	r0, [r0, #20]
     1bc:	bl	0 <free>
     1c0:	b	1ec <coda_mem_type_delete+0x1ec>
     1c4:	b	1ec <coda_mem_type_delete+0x1ec>
     1c8:	ldr	r0, [fp, #-4]
     1cc:	ldr	r0, [r0, #16]
     1d0:	movw	r1, #0
     1d4:	cmp	r0, r1
     1d8:	beq	1e8 <coda_mem_type_delete+0x1e8>
     1dc:	ldr	r0, [fp, #-4]
     1e0:	ldr	r0, [r0, #16]
     1e4:	bl	0 <coda_dynamic_type_delete>
     1e8:	b	1ec <coda_mem_type_delete+0x1ec>
     1ec:	ldr	r0, [fp, #-4]
     1f0:	ldr	r0, [r0, #12]
     1f4:	movw	r1, #0
     1f8:	cmp	r0, r1
     1fc:	beq	20c <coda_mem_type_delete+0x20c>
     200:	ldr	r0, [fp, #-4]
     204:	ldr	r0, [r0, #12]
     208:	bl	0 <coda_dynamic_type_delete>
     20c:	ldr	r0, [fp, #-4]
     210:	ldr	r0, [r0, #4]
     214:	movw	r1, #0
     218:	cmp	r0, r1
     21c:	beq	22c <coda_mem_type_delete+0x22c>
     220:	ldr	r0, [fp, #-4]
     224:	ldr	r0, [r0, #4]
     228:	bl	0 <coda_type_release>
     22c:	ldr	r0, [fp, #-4]
     230:	bl	0 <free>
     234:	mov	sp, fp
     238:	pop	{fp, pc}

0000023c <coda_mem_type_update>:
     23c:	push	{fp, lr}
     240:	mov	fp, sp
     244:	sub	sp, sp, #48	; 0x30
     248:	str	r0, [fp, #-8]
     24c:	str	r1, [fp, #-12]
     250:	ldr	r0, [fp, #-8]
     254:	ldr	r0, [r0]
     258:	ldr	r0, [r0]
     25c:	cmp	r0, #0
     260:	beq	278 <coda_mem_type_update+0x3c>
     264:	ldr	r0, [fp, #-8]
     268:	ldr	r0, [r0]
     26c:	ldr	r0, [r0]
     270:	cmp	r0, #1
     274:	bne	2ec <coda_mem_type_update+0xb0>
     278:	ldr	r0, [fp, #-8]
     27c:	ldr	r0, [r0]
     280:	ldr	r0, [r0]
     284:	cmp	r0, #100	; 0x64
     288:	bcs	29c <coda_mem_type_update+0x60>
     28c:	ldr	r0, [fp, #-8]
     290:	ldr	r0, [r0]
     294:	str	r0, [sp, #16]
     298:	b	2ac <coda_mem_type_update+0x70>
     29c:	ldr	r0, [fp, #-8]
     2a0:	ldr	r0, [r0]
     2a4:	ldr	r0, [r0, #4]
     2a8:	str	r0, [sp, #16]
     2ac:	ldr	r0, [sp, #16]
     2b0:	ldr	r1, [fp, #-12]
     2b4:	cmp	r0, r1
     2b8:	bne	2c0 <coda_mem_type_update+0x84>
     2bc:	b	2e0 <coda_mem_type_update+0xa4>
     2c0:	movw	r0, #0
     2c4:	movt	r0, #0
     2c8:	movw	r1, #0
     2cc:	movt	r1, #0
     2d0:	movw	r2, #104	; 0x68
     2d4:	movw	r3, #0
     2d8:	movt	r3, #0
     2dc:	bl	0 <__assert_fail>
     2e0:	movw	r0, #0
     2e4:	str	r0, [fp, #-4]
     2e8:	b	8c8 <coda_mem_type_update+0x68c>
     2ec:	ldr	r0, [fp, #-8]
     2f0:	ldr	r0, [r0]
     2f4:	ldr	r0, [r0]
     2f8:	cmp	r0, #100	; 0x64
     2fc:	bne	304 <coda_mem_type_update+0xc8>
     300:	b	324 <coda_mem_type_update+0xe8>
     304:	movw	r0, #0
     308:	movt	r0, #0
     30c:	movw	r1, #0
     310:	movt	r1, #0
     314:	movw	r2, #108	; 0x6c
     318:	movw	r3, #0
     31c:	movt	r3, #0
     320:	bl	0 <__assert_fail>
     324:	ldr	r0, [fp, #-8]
     328:	ldr	r0, [r0]
     32c:	ldr	r0, [r0, #4]
     330:	ldr	r1, [fp, #-12]
     334:	cmp	r0, r1
     338:	beq	55c <coda_mem_type_update+0x320>
     33c:	ldr	r0, [fp, #-12]
     340:	ldr	r0, [r0, #8]
     344:	cmp	r0, #1
     348:	bne	43c <coda_mem_type_update+0x200>
     34c:	ldr	r0, [fp, #-8]
     350:	ldr	r0, [r0]
     354:	ldr	r0, [r0, #4]
     358:	ldr	r0, [r0, #8]
     35c:	cmp	r0, #1
     360:	beq	43c <coda_mem_type_update+0x200>
     364:	ldr	r0, [fp, #-12]
     368:	ldr	r0, [r0]
     36c:	cmp	r0, #2
     370:	bne	378 <coda_mem_type_update+0x13c>
     374:	b	398 <coda_mem_type_update+0x15c>
     378:	movw	r0, #0
     37c:	movt	r0, #0
     380:	movw	r1, #0
     384:	movt	r1, #0
     388:	movw	r2, #114	; 0x72
     38c:	movw	r3, #0
     390:	movt	r3, #0
     394:	bl	0 <__assert_fail>
     398:	ldr	r0, [fp, #-12]
     39c:	movw	r1, #0
     3a0:	bl	8d4 <coda_mem_array_new>
     3a4:	str	r0, [fp, #-16]
     3a8:	ldr	r0, [fp, #-16]
     3ac:	movw	r1, #0
     3b0:	cmp	r0, r1
     3b4:	bne	3c4 <coda_mem_type_update+0x188>
     3b8:	mvn	r0, #0
     3bc:	str	r0, [fp, #-4]
     3c0:	b	8c8 <coda_mem_type_update+0x68c>
     3c4:	ldr	r0, [fp, #-8]
     3c8:	ldr	r1, [fp, #-12]
     3cc:	ldr	r1, [r1, #40]	; 0x28
     3d0:	bl	23c <coda_mem_type_update>
     3d4:	cmp	r0, #0
     3d8:	beq	3f0 <coda_mem_type_update+0x1b4>
     3dc:	ldr	r0, [fp, #-16]
     3e0:	bl	0 <coda_dynamic_type_delete>
     3e4:	mvn	r0, #0
     3e8:	str	r0, [fp, #-4]
     3ec:	b	8c8 <coda_mem_type_update+0x68c>
     3f0:	ldr	r0, [fp, #-16]
     3f4:	ldr	r1, [fp, #-8]
     3f8:	ldr	r1, [r1]
     3fc:	bl	aec <coda_mem_array_add_element>
     400:	cmp	r0, #0
     404:	beq	41c <coda_mem_type_update+0x1e0>
     408:	ldr	r0, [fp, #-16]
     40c:	bl	0 <coda_dynamic_type_delete>
     410:	mvn	r0, #0
     414:	str	r0, [fp, #-4]
     418:	b	8c8 <coda_mem_type_update+0x68c>
     41c:	ldr	r0, [fp, #-16]
     420:	ldr	r1, [fp, #-8]
     424:	str	r0, [r1]
     428:	ldr	r0, [fp, #-8]
     42c:	ldr	r1, [fp, #-12]
     430:	bl	23c <coda_mem_type_update>
     434:	str	r0, [fp, #-4]
     438:	b	8c8 <coda_mem_type_update+0x68c>
     43c:	ldr	r0, [fp, #-8]
     440:	ldr	r0, [r0]
     444:	ldr	r0, [r0, #4]
     448:	ldr	r0, [r0, #8]
     44c:	cmp	r0, #0
     450:	bne	538 <coda_mem_type_update+0x2fc>
     454:	ldr	r0, [fp, #-12]
     458:	ldr	r0, [r0, #8]
     45c:	cmp	r0, #4
     460:	bne	538 <coda_mem_type_update+0x2fc>
     464:	ldr	r0, [fp, #-8]
     468:	ldr	r0, [r0]
     46c:	ldr	r0, [r0, #4]
     470:	ldr	r0, [r0]
     474:	cmp	r0, #2
     478:	bne	480 <coda_mem_type_update+0x244>
     47c:	b	4a0 <coda_mem_type_update+0x264>
     480:	movw	r0, #0
     484:	movt	r0, #0
     488:	movw	r1, #0
     48c:	movt	r1, #0
     490:	movw	r2, #141	; 0x8d
     494:	movw	r3, #0
     498:	movt	r3, #0
     49c:	bl	0 <__assert_fail>
     4a0:	ldr	r0, [fp, #-8]
     4a4:	ldr	r0, [r0]
     4a8:	ldr	r0, [r0, #4]
     4ac:	ldr	r0, [r0, #48]	; 0x30
     4b0:	cmp	r0, #0
     4b4:	bne	4bc <coda_mem_type_update+0x280>
     4b8:	b	4dc <coda_mem_type_update+0x2a0>
     4bc:	movw	r0, #0
     4c0:	movt	r0, #0
     4c4:	movw	r1, #0
     4c8:	movt	r1, #0
     4cc:	movw	r2, #142	; 0x8e
     4d0:	movw	r3, #0
     4d4:	movt	r3, #0
     4d8:	bl	0 <__assert_fail>
     4dc:	ldr	r0, [fp, #-12]
     4e0:	movw	r1, #0
     4e4:	str	r1, [sp, #12]
     4e8:	ldr	r2, [sp, #12]
     4ec:	ldr	r3, [sp, #12]
     4f0:	bl	d80 <coda_mem_string_new>
     4f4:	str	r0, [fp, #-16]
     4f8:	ldr	r0, [fp, #-8]
     4fc:	ldr	r0, [r0]
     500:	ldr	r0, [r0, #12]
     504:	ldr	r1, [fp, #-16]
     508:	str	r0, [r1, #12]
     50c:	ldr	r0, [fp, #-8]
     510:	ldr	r0, [r0]
     514:	movw	r1, #0
     518:	str	r1, [r0, #12]
     51c:	ldr	r0, [fp, #-8]
     520:	ldr	r0, [r0]
     524:	bl	0 <coda_dynamic_type_delete>
     528:	ldr	r0, [fp, #-16]
     52c:	ldr	r1, [fp, #-8]
     530:	str	r0, [r1]
     534:	b	558 <coda_mem_type_update+0x31c>
     538:	movw	r0, #0
     53c:	movt	r0, #0
     540:	movw	r1, #0
     544:	movt	r1, #0
     548:	movw	r2, #153	; 0x99
     54c:	movw	r3, #0
     550:	movt	r3, #0
     554:	bl	0 <__assert_fail>
     558:	b	55c <coda_mem_type_update+0x320>
     55c:	ldr	r0, [fp, #-8]
     560:	ldr	r0, [r0]
     564:	str	r0, [fp, #-16]
     568:	ldr	r0, [fp, #-16]
     56c:	ldr	r0, [r0, #8]
     570:	cmp	r0, #3
     574:	str	r0, [sp, #8]
     578:	bhi	810 <coda_mem_type_update+0x5d4>
     57c:	add	r0, pc, #8
     580:	ldr	r1, [sp, #8]
     584:	ldr	r0, [r0, r1, lsl #2]
     588:	mov	pc, r0
     58c:	.word	0x0000059c
     590:	.word	0x00000774
     594:	.word	0x000007dc
     598:	.word	0x000007e0
     59c:	ldr	r0, [fp, #-16]
     5a0:	str	r0, [sp, #24]
     5a4:	ldr	r0, [sp, #24]
     5a8:	ldr	r0, [r0, #16]
     5ac:	ldr	r1, [sp, #24]
     5b0:	ldr	r1, [r1, #4]
     5b4:	ldr	r1, [r1, #48]	; 0x30
     5b8:	cmp	r0, r1
     5bc:	bge	694 <coda_mem_type_update+0x458>
     5c0:	ldr	r0, [sp, #24]
     5c4:	ldr	r1, [r0, #4]
     5c8:	ldr	r0, [r0, #20]
     5cc:	ldr	r1, [r1, #48]	; 0x30
     5d0:	lsl	r1, r1, #2
     5d4:	bl	0 <realloc>
     5d8:	str	r0, [sp, #20]
     5dc:	ldr	r0, [sp, #20]
     5e0:	movw	r1, #0
     5e4:	cmp	r0, r1
     5e8:	bne	628 <coda_mem_type_update+0x3ec>
     5ec:	ldr	r0, [sp, #24]
     5f0:	ldr	r0, [r0, #4]
     5f4:	ldr	r0, [r0, #48]	; 0x30
     5f8:	lsl	r2, r0, #2
     5fc:	mvn	r0, #0
     600:	movw	r1, #0
     604:	movt	r1, #0
     608:	movw	r3, #0
     60c:	movt	r3, #0
     610:	movw	ip, #177	; 0xb1
     614:	str	ip, [sp]
     618:	bl	0 <coda_set_error>
     61c:	mvn	r0, #0
     620:	str	r0, [fp, #-4]
     624:	b	8c8 <coda_mem_type_update+0x68c>
     628:	ldr	r0, [sp, #20]
     62c:	ldr	r1, [sp, #24]
     630:	str	r0, [r1, #20]
     634:	ldr	r0, [sp, #24]
     638:	ldr	r0, [r0, #16]
     63c:	str	r0, [fp, #-20]	; 0xffffffec
     640:	ldr	r0, [fp, #-20]	; 0xffffffec
     644:	ldr	r1, [sp, #24]
     648:	ldr	r1, [r1, #4]
     64c:	ldr	r1, [r1, #48]	; 0x30
     650:	cmp	r0, r1
     654:	bge	680 <coda_mem_type_update+0x444>
     658:	ldr	r0, [sp, #24]
     65c:	ldr	r0, [r0, #20]
     660:	ldr	r1, [fp, #-20]	; 0xffffffec
     664:	add	r0, r0, r1, lsl #2
     668:	movw	r1, #0
     66c:	str	r1, [r0]
     670:	ldr	r0, [fp, #-20]	; 0xffffffec
     674:	add	r0, r0, #1
     678:	str	r0, [fp, #-20]	; 0xffffffec
     67c:	b	640 <coda_mem_type_update+0x404>
     680:	ldr	r0, [sp, #24]
     684:	ldr	r0, [r0, #4]
     688:	ldr	r0, [r0, #48]	; 0x30
     68c:	ldr	r1, [sp, #24]
     690:	str	r0, [r1, #16]
     694:	movw	r0, #0
     698:	str	r0, [fp, #-20]	; 0xffffffec
     69c:	ldr	r0, [fp, #-20]	; 0xffffffec
     6a0:	ldr	r1, [sp, #24]
     6a4:	ldr	r1, [r1, #4]
     6a8:	ldr	r1, [r1, #48]	; 0x30
     6ac:	cmp	r0, r1
     6b0:	bge	770 <coda_mem_type_update+0x534>
     6b4:	ldr	r0, [sp, #24]
     6b8:	ldr	r0, [r0, #20]
     6bc:	ldr	r1, [fp, #-20]	; 0xffffffec
     6c0:	add	r0, r0, r1, lsl #2
     6c4:	ldr	r0, [r0]
     6c8:	movw	r1, #0
     6cc:	cmp	r0, r1
     6d0:	bne	71c <coda_mem_type_update+0x4e0>
     6d4:	ldr	r0, [sp, #24]
     6d8:	ldr	r0, [r0, #4]
     6dc:	ldr	r0, [r0, #52]	; 0x34
     6e0:	ldr	r1, [fp, #-20]	; 0xffffffec
     6e4:	add	r0, r0, r1, lsl #2
     6e8:	ldr	r0, [r0]
     6ec:	ldrsb	r0, [r0, #16]
     6f0:	cmp	r0, #0
     6f4:	bne	718 <coda_mem_type_update+0x4dc>
     6f8:	ldr	r0, [sp, #24]
     6fc:	ldr	r0, [r0, #4]
     700:	ldr	r0, [r0, #52]	; 0x34
     704:	ldr	r1, [fp, #-20]	; 0xffffffec
     708:	add	r0, r0, r1, lsl #2
     70c:	ldr	r0, [r0]
     710:	movw	r1, #1
     714:	strb	r1, [r0, #16]
     718:	b	75c <coda_mem_type_update+0x520>
     71c:	ldr	r0, [sp, #24]
     720:	ldr	r1, [r0, #4]
     724:	ldr	r0, [r0, #20]
     728:	ldr	r2, [fp, #-20]	; 0xffffffec
     72c:	add	r0, r0, r2, lsl #2
     730:	ldr	r1, [r1, #52]	; 0x34
     734:	add	r1, r1, r2, lsl #2
     738:	ldr	r1, [r1]
     73c:	ldr	r1, [r1, #8]
     740:	bl	23c <coda_mem_type_update>
     744:	cmp	r0, #0
     748:	beq	758 <coda_mem_type_update+0x51c>
     74c:	mvn	r0, #0
     750:	str	r0, [fp, #-4]
     754:	b	8c8 <coda_mem_type_update+0x68c>
     758:	b	75c <coda_mem_type_update+0x520>
     75c:	b	760 <coda_mem_type_update+0x524>
     760:	ldr	r0, [fp, #-20]	; 0xffffffec
     764:	add	r0, r0, #1
     768:	str	r0, [fp, #-20]	; 0xffffffec
     76c:	b	69c <coda_mem_type_update+0x460>
     770:	b	810 <coda_mem_type_update+0x5d4>
     774:	movw	r0, #0
     778:	str	r0, [fp, #-20]	; 0xffffffec
     77c:	ldr	r0, [fp, #-20]	; 0xffffffec
     780:	ldr	r1, [fp, #-16]
     784:	ldr	r1, [r1, #16]
     788:	cmp	r0, r1
     78c:	bge	7d8 <coda_mem_type_update+0x59c>
     790:	ldr	r0, [fp, #-16]
     794:	ldr	r0, [r0, #20]
     798:	ldr	r1, [fp, #-20]	; 0xffffffec
     79c:	add	r0, r0, r1, lsl #2
     7a0:	ldr	r1, [fp, #-16]
     7a4:	ldr	r1, [r1, #4]
     7a8:	ldr	r1, [r1, #40]	; 0x28
     7ac:	bl	23c <coda_mem_type_update>
     7b0:	cmp	r0, #0
     7b4:	beq	7c4 <coda_mem_type_update+0x588>
     7b8:	mvn	r0, #0
     7bc:	str	r0, [fp, #-4]
     7c0:	b	8c8 <coda_mem_type_update+0x68c>
     7c4:	b	7c8 <coda_mem_type_update+0x58c>
     7c8:	ldr	r0, [fp, #-20]	; 0xffffffec
     7cc:	add	r0, r0, #1
     7d0:	str	r0, [fp, #-20]	; 0xffffffec
     7d4:	b	77c <coda_mem_type_update+0x540>
     7d8:	b	810 <coda_mem_type_update+0x5d4>
     7dc:	b	810 <coda_mem_type_update+0x5d4>
     7e0:	ldr	r0, [fp, #-16]
     7e4:	add	r0, r0, #16
     7e8:	ldr	r1, [fp, #-16]
     7ec:	ldr	r1, [r1, #4]
     7f0:	ldr	r1, [r1, #44]	; 0x2c
     7f4:	bl	23c <coda_mem_type_update>
     7f8:	cmp	r0, #0
     7fc:	beq	80c <coda_mem_type_update+0x5d0>
     800:	mvn	r0, #0
     804:	str	r0, [fp, #-4]
     808:	b	8c8 <coda_mem_type_update+0x68c>
     80c:	b	810 <coda_mem_type_update+0x5d4>
     810:	ldr	r0, [fp, #-16]
     814:	ldr	r0, [r0, #12]
     818:	movw	r1, #0
     81c:	cmp	r0, r1
     820:	bne	87c <coda_mem_type_update+0x640>
     824:	ldr	r0, [fp, #-16]
     828:	ldr	r0, [r0, #4]
     82c:	ldr	r0, [r0, #36]	; 0x24
     830:	movw	r1, #0
     834:	cmp	r0, r1
     838:	beq	87c <coda_mem_type_update+0x640>
     83c:	ldr	r0, [fp, #-16]
     840:	ldr	r0, [r0, #4]
     844:	ldr	r0, [r0, #36]	; 0x24
     848:	movw	r1, #0
     84c:	bl	e4c <coda_mem_record_new>
     850:	ldr	r1, [fp, #-16]
     854:	str	r0, [r1, #12]
     858:	ldr	r0, [fp, #-16]
     85c:	ldr	r0, [r0, #12]
     860:	movw	r1, #0
     864:	cmp	r0, r1
     868:	bne	878 <coda_mem_type_update+0x63c>
     86c:	mvn	r0, #0
     870:	str	r0, [fp, #-4]
     874:	b	8c8 <coda_mem_type_update+0x68c>
     878:	b	87c <coda_mem_type_update+0x640>
     87c:	ldr	r0, [fp, #-16]
     880:	ldr	r0, [r0, #12]
     884:	movw	r1, #0
     888:	cmp	r0, r1
     88c:	beq	8c0 <coda_mem_type_update+0x684>
     890:	ldr	r0, [fp, #-16]
     894:	add	r0, r0, #12
     898:	ldr	r1, [fp, #-16]
     89c:	ldr	r1, [r1, #4]
     8a0:	ldr	r1, [r1, #36]	; 0x24
     8a4:	bl	23c <coda_mem_type_update>
     8a8:	cmp	r0, #0
     8ac:	beq	8bc <coda_mem_type_update+0x680>
     8b0:	mvn	r0, #0
     8b4:	str	r0, [fp, #-4]
     8b8:	b	8c8 <coda_mem_type_update+0x68c>
     8bc:	b	8c0 <coda_mem_type_update+0x684>
     8c0:	movw	r0, #0
     8c4:	str	r0, [fp, #-4]
     8c8:	ldr	r0, [fp, #-4]
     8cc:	mov	sp, fp
     8d0:	pop	{fp, pc}

000008d4 <coda_mem_array_new>:
     8d4:	push	{fp, lr}
     8d8:	mov	fp, sp
     8dc:	sub	sp, sp, #24
     8e0:	str	r0, [fp, #-8]
     8e4:	str	r1, [sp, #12]
     8e8:	ldr	r0, [fp, #-8]
     8ec:	movw	r1, #0
     8f0:	cmp	r0, r1
     8f4:	bne	920 <coda_mem_array_new+0x4c>
     8f8:	mvn	r0, #99	; 0x63
     8fc:	movw	r1, #0
     900:	movt	r1, #0
     904:	movw	r2, #0
     908:	movt	r2, #0
     90c:	movw	r3, #583	; 0x247
     910:	bl	0 <coda_set_error>
     914:	movw	r0, #0
     918:	str	r0, [fp, #-4]
     91c:	b	ae0 <coda_mem_array_new+0x20c>
     920:	movw	r0, #24
     924:	bl	0 <malloc>
     928:	str	r0, [sp, #8]
     92c:	ldr	r0, [sp, #8]
     930:	movw	r1, #0
     934:	cmp	r0, r1
     938:	bne	96c <coda_mem_array_new+0x98>
     93c:	mvn	r0, #0
     940:	movw	r1, #0
     944:	movt	r1, #0
     948:	movw	r2, #24
     94c:	movw	r3, #0
     950:	movt	r3, #0
     954:	movw	ip, #590	; 0x24e
     958:	str	ip, [sp]
     95c:	bl	0 <coda_set_error>
     960:	movw	r0, #0
     964:	str	r0, [fp, #-4]
     968:	b	ae0 <coda_mem_array_new+0x20c>
     96c:	ldr	r0, [sp, #8]
     970:	movw	r1, #100	; 0x64
     974:	str	r1, [r0]
     978:	ldr	r0, [fp, #-8]
     97c:	ldr	r1, [sp, #8]
     980:	str	r0, [r1, #4]
     984:	ldr	r0, [fp, #-8]
     988:	ldr	r1, [r0, #4]
     98c:	add	r1, r1, #1
     990:	str	r1, [r0, #4]
     994:	ldr	r0, [sp, #8]
     998:	movw	r1, #1
     99c:	str	r1, [r0, #8]
     9a0:	ldr	r0, [sp, #12]
     9a4:	ldr	r1, [sp, #8]
     9a8:	str	r0, [r1, #12]
     9ac:	ldr	r0, [sp, #8]
     9b0:	movw	r1, #0
     9b4:	str	r1, [r0, #16]
     9b8:	ldr	r0, [sp, #8]
     9bc:	str	r1, [r0, #20]
     9c0:	ldr	r0, [sp, #12]
     9c4:	cmp	r0, r1
     9c8:	bne	9f4 <coda_mem_array_new+0x120>
     9cc:	ldr	r0, [sp, #8]
     9d0:	bl	1728 <create_attributes_record>
     9d4:	cmp	r0, #0
     9d8:	beq	9f0 <coda_mem_array_new+0x11c>
     9dc:	ldr	r0, [sp, #8]
     9e0:	bl	0 <coda_mem_type_delete>
     9e4:	movw	r0, #0
     9e8:	str	r0, [fp, #-4]
     9ec:	b	ae0 <coda_mem_array_new+0x20c>
     9f0:	b	9f4 <coda_mem_array_new+0x120>
     9f4:	ldr	r0, [sp, #8]
     9f8:	ldr	r0, [r0, #4]
     9fc:	ldr	r0, [r0, #44]	; 0x2c
     a00:	cmp	r0, #0
     a04:	ble	ad8 <coda_mem_array_new+0x204>
     a08:	ldr	r0, [sp, #8]
     a0c:	ldr	r0, [r0, #4]
     a10:	ldr	r0, [r0, #44]	; 0x2c
     a14:	lsl	r0, r0, #2
     a18:	bl	0 <malloc>
     a1c:	ldr	r1, [sp, #8]
     a20:	str	r0, [r1, #20]
     a24:	ldr	r0, [sp, #8]
     a28:	ldr	r0, [r0, #20]
     a2c:	movw	r1, #0
     a30:	cmp	r0, r1
     a34:	bne	a7c <coda_mem_array_new+0x1a8>
     a38:	ldr	r0, [sp, #8]
     a3c:	ldr	r0, [r0, #4]
     a40:	ldr	r0, [r0, #44]	; 0x2c
     a44:	lsl	r2, r0, #2
     a48:	mvn	r0, #0
     a4c:	movw	r1, #0
     a50:	movt	r1, #0
     a54:	movw	r3, #0
     a58:	movt	r3, #0
     a5c:	movw	ip, #617	; 0x269
     a60:	str	ip, [sp]
     a64:	bl	0 <coda_set_error>
     a68:	ldr	r0, [sp, #8]
     a6c:	bl	0 <coda_mem_type_delete>
     a70:	movw	r0, #0
     a74:	str	r0, [fp, #-4]
     a78:	b	ae0 <coda_mem_array_new+0x20c>
     a7c:	ldr	r0, [sp, #8]
     a80:	ldr	r0, [r0, #4]
     a84:	ldr	r0, [r0, #44]	; 0x2c
     a88:	ldr	r1, [sp, #8]
     a8c:	str	r0, [r1, #16]
     a90:	movw	r0, #0
     a94:	str	r0, [sp, #4]
     a98:	ldr	r0, [sp, #4]
     a9c:	ldr	r1, [sp, #8]
     aa0:	ldr	r1, [r1, #16]
     aa4:	cmp	r0, r1
     aa8:	bge	ad4 <coda_mem_array_new+0x200>
     aac:	ldr	r0, [sp, #8]
     ab0:	ldr	r0, [r0, #20]
     ab4:	ldr	r1, [sp, #4]
     ab8:	add	r0, r0, r1, lsl #2
     abc:	movw	r1, #0
     ac0:	str	r1, [r0]
     ac4:	ldr	r0, [sp, #4]
     ac8:	add	r0, r0, #1
     acc:	str	r0, [sp, #4]
     ad0:	b	a98 <coda_mem_array_new+0x1c4>
     ad4:	b	ad8 <coda_mem_array_new+0x204>
     ad8:	ldr	r0, [sp, #8]
     adc:	str	r0, [fp, #-4]
     ae0:	ldr	r0, [fp, #-4]
     ae4:	mov	sp, fp
     ae8:	pop	{fp, pc}

00000aec <coda_mem_array_add_element>:
     aec:	push	{fp, lr}
     af0:	mov	fp, sp
     af4:	sub	sp, sp, #32
     af8:	str	r0, [fp, #-8]
     afc:	str	r1, [fp, #-12]
     b00:	ldr	r0, [fp, #-8]
     b04:	movw	r1, #0
     b08:	cmp	r0, r1
     b0c:	bne	b38 <coda_mem_array_add_element+0x4c>
     b10:	mvn	r0, #99	; 0x63
     b14:	movw	r1, #0
     b18:	movt	r1, #0
     b1c:	movw	r2, #0
     b20:	movt	r2, #0
     b24:	movw	r3, #670	; 0x29e
     b28:	bl	0 <coda_set_error>
     b2c:	mvn	r0, #0
     b30:	str	r0, [fp, #-4]
     b34:	b	d70 <coda_mem_array_add_element+0x284>
     b38:	ldr	r0, [fp, #-12]
     b3c:	movw	r1, #0
     b40:	cmp	r0, r1
     b44:	bne	b70 <coda_mem_array_add_element+0x84>
     b48:	mvn	r0, #99	; 0x63
     b4c:	movw	r1, #0
     b50:	movt	r1, #0
     b54:	movw	r2, #0
     b58:	movt	r2, #0
     b5c:	movw	r3, #675	; 0x2a3
     b60:	bl	0 <coda_set_error>
     b64:	mvn	r0, #0
     b68:	str	r0, [fp, #-4]
     b6c:	b	d70 <coda_mem_array_add_element+0x284>
     b70:	ldr	r0, [fp, #-8]
     b74:	ldr	r0, [r0, #4]
     b78:	ldr	r0, [r0, #40]	; 0x28
     b7c:	ldr	r1, [fp, #-12]
     b80:	ldr	r1, [r1, #4]
     b84:	cmp	r0, r1
     b88:	beq	bc0 <coda_mem_array_add_element+0xd4>
     b8c:	ldr	r0, [pc, #488]	; d7c <coda_mem_array_add_element+0x290>
     b90:	ldr	r1, [fp, #-8]
     b94:	ldr	r2, [r1, #16]
     b98:	movw	r1, #0
     b9c:	movt	r1, #0
     ba0:	movw	r3, #0
     ba4:	movt	r3, #0
     ba8:	movw	ip, #681	; 0x2a9
     bac:	str	ip, [sp]
     bb0:	bl	0 <coda_set_error>
     bb4:	mvn	r0, #0
     bb8:	str	r0, [fp, #-4]
     bbc:	b	d70 <coda_mem_array_add_element+0x284>
     bc0:	ldr	r0, [fp, #-8]
     bc4:	ldr	r0, [r0, #4]
     bc8:	ldr	r0, [r0, #44]	; 0x2c
     bcc:	cmp	r0, #0
     bd0:	ble	ca8 <coda_mem_array_add_element+0x1bc>
     bd4:	movw	r0, #0
     bd8:	str	r0, [sp, #16]
     bdc:	ldr	r0, [sp, #16]
     be0:	ldr	r1, [fp, #-8]
     be4:	ldr	r1, [r1, #16]
     be8:	cmp	r0, r1
     bec:	movw	r0, #0
     bf0:	str	r0, [sp, #8]
     bf4:	bge	c20 <coda_mem_array_add_element+0x134>
     bf8:	ldr	r0, [fp, #-8]
     bfc:	ldr	r0, [r0, #20]
     c00:	ldr	r1, [sp, #16]
     c04:	add	r0, r0, r1, lsl #2
     c08:	ldr	r0, [r0]
     c0c:	movw	r1, #0
     c10:	cmp	r0, r1
     c14:	movw	r0, #0
     c18:	movne	r0, #1
     c1c:	str	r0, [sp, #8]
     c20:	ldr	r0, [sp, #8]
     c24:	tst	r0, #1
     c28:	beq	c3c <coda_mem_array_add_element+0x150>
     c2c:	ldr	r0, [sp, #16]
     c30:	add	r0, r0, #1
     c34:	str	r0, [sp, #16]
     c38:	b	bdc <coda_mem_array_add_element+0xf0>
     c3c:	ldr	r0, [sp, #16]
     c40:	ldr	r1, [fp, #-8]
     c44:	ldr	r1, [r1, #16]
     c48:	cmp	r0, r1
     c4c:	blt	c8c <coda_mem_array_add_element+0x1a0>
     c50:	ldr	r2, [sp, #16]
     c54:	ldr	r0, [fp, #-8]
     c58:	ldr	r3, [r0, #16]
     c5c:	mvn	r0, #100	; 0x64
     c60:	movw	r1, #0
     c64:	movt	r1, #0
     c68:	movw	ip, #0
     c6c:	movt	ip, #0
     c70:	str	ip, [sp]
     c74:	movw	ip, #696	; 0x2b8
     c78:	str	ip, [sp, #4]
     c7c:	bl	0 <coda_set_error>
     c80:	mvn	r0, #0
     c84:	str	r0, [fp, #-4]
     c88:	b	d70 <coda_mem_array_add_element+0x284>
     c8c:	ldr	r0, [fp, #-12]
     c90:	ldr	r1, [fp, #-8]
     c94:	ldr	r1, [r1, #20]
     c98:	ldr	r2, [sp, #16]
     c9c:	add	r1, r1, r2, lsl #2
     ca0:	str	r0, [r1]
     ca4:	b	d68 <coda_mem_array_add_element+0x27c>
     ca8:	ldr	r0, [fp, #-8]
     cac:	ldr	r0, [r0, #16]
     cb0:	asr	r1, r0, #31
     cb4:	add	r1, r0, r1, lsr #28
     cb8:	bic	r1, r1, #15
     cbc:	sub	r0, r0, r1
     cc0:	cmp	r0, #0
     cc4:	bne	d3c <coda_mem_array_add_element+0x250>
     cc8:	ldr	r0, [fp, #-8]
     ccc:	ldr	r1, [r0, #16]
     cd0:	ldr	r0, [r0, #20]
     cd4:	add	r1, r1, #16
     cd8:	lsl	r1, r1, #2
     cdc:	bl	0 <realloc>
     ce0:	str	r0, [sp, #12]
     ce4:	ldr	r0, [sp, #12]
     ce8:	movw	r1, #0
     cec:	cmp	r0, r1
     cf0:	bne	d30 <coda_mem_array_add_element+0x244>
     cf4:	ldr	r0, [fp, #-8]
     cf8:	ldr	r0, [r0, #16]
     cfc:	add	r0, r0, #16
     d00:	lsl	r2, r0, #2
     d04:	mvn	r0, #0
     d08:	movw	r1, #0
     d0c:	movt	r1, #0
     d10:	movw	r3, #0
     d14:	movt	r3, #0
     d18:	movw	ip, #711	; 0x2c7
     d1c:	str	ip, [sp]
     d20:	bl	0 <coda_set_error>
     d24:	mvn	r0, #0
     d28:	str	r0, [fp, #-4]
     d2c:	b	d70 <coda_mem_array_add_element+0x284>
     d30:	ldr	r0, [sp, #12]
     d34:	ldr	r1, [fp, #-8]
     d38:	str	r0, [r1, #20]
     d3c:	ldr	r0, [fp, #-8]
     d40:	ldr	r1, [r0, #16]
     d44:	add	r1, r1, #1
     d48:	str	r1, [r0, #16]
     d4c:	ldr	r0, [fp, #-12]
     d50:	ldr	r1, [fp, #-8]
     d54:	ldr	r2, [r1, #16]
     d58:	ldr	r1, [r1, #20]
     d5c:	sub	r2, r2, #1
     d60:	add	r1, r1, r2, lsl #2
     d64:	str	r0, [r1]
     d68:	movw	r0, #0
     d6c:	str	r0, [fp, #-4]
     d70:	ldr	r0, [fp, #-4]
     d74:	mov	sp, fp
     d78:	pop	{fp, pc}
     d7c:	.word	0xfffffe70

00000d80 <coda_mem_string_new>:
     d80:	push	{fp, lr}
     d84:	mov	fp, sp
     d88:	sub	sp, sp, #48	; 0x30
     d8c:	str	r0, [fp, #-4]
     d90:	str	r1, [fp, #-8]
     d94:	str	r2, [fp, #-12]
     d98:	str	r3, [fp, #-16]
     d9c:	ldr	r0, [fp, #-4]
     da0:	ldr	r0, [r0, #12]
     da4:	cmp	r0, #11
     da8:	bne	db0 <coda_mem_string_new+0x30>
     dac:	b	dd0 <coda_mem_string_new+0x50>
     db0:	movw	r0, #0
     db4:	movt	r0, #0
     db8:	movw	r1, #0
     dbc:	movt	r1, #0
     dc0:	movw	r2, #935	; 0x3a7
     dc4:	movw	r3, #0
     dc8:	movt	r3, #0
     dcc:	bl	0 <__assert_fail>
     dd0:	ldr	r0, [fp, #-4]
     dd4:	ldr	r1, [fp, #-8]
     dd8:	ldr	r2, [fp, #-12]
     ddc:	ldr	r3, [fp, #-16]
     de0:	movw	ip, #0
     de4:	cmp	r3, ip
     de8:	str	r0, [fp, #-20]	; 0xffffffec
     dec:	str	r1, [sp, #24]
     df0:	str	r2, [sp, #20]
     df4:	bne	e04 <coda_mem_string_new+0x84>
     df8:	movw	r0, #0
     dfc:	str	r0, [sp, #16]
     e00:	b	e10 <coda_mem_string_new+0x90>
     e04:	ldr	r0, [fp, #-16]
     e08:	bl	0 <strlen>
     e0c:	str	r0, [sp, #16]
     e10:	ldr	r0, [sp, #16]
     e14:	ldr	r1, [fp, #-16]
     e18:	ldr	r2, [fp, #-20]	; 0xffffffec
     e1c:	str	r0, [sp, #12]
     e20:	mov	r0, r2
     e24:	ldr	r3, [sp, #24]
     e28:	str	r1, [sp, #8]
     e2c:	mov	r1, r3
     e30:	ldr	r2, [sp, #20]
     e34:	ldr	r3, [sp, #12]
     e38:	ldr	ip, [sp, #8]
     e3c:	str	ip, [sp]
     e40:	bl	1ecc <coda_mem_data_new>
     e44:	mov	sp, fp
     e48:	pop	{fp, pc}

00000e4c <coda_mem_record_new>:
     e4c:	push	{fp, lr}
     e50:	mov	fp, sp
     e54:	sub	sp, sp, #24
     e58:	str	r0, [fp, #-8]
     e5c:	str	r1, [sp, #12]
     e60:	ldr	r0, [fp, #-8]
     e64:	movw	r1, #0
     e68:	cmp	r0, r1
     e6c:	bne	e98 <coda_mem_record_new+0x4c>
     e70:	mvn	r0, #99	; 0x63
     e74:	movw	r1, #0
     e78:	movt	r1, #0
     e7c:	movw	r2, #0
     e80:	movt	r2, #0
     e84:	movw	r3, #428	; 0x1ac
     e88:	bl	0 <coda_set_error>
     e8c:	movw	r0, #0
     e90:	str	r0, [fp, #-4]
     e94:	b	1084 <coda_mem_record_new+0x238>
     e98:	ldr	r0, [fp, #-8]
     e9c:	ldr	r0, [r0, #64]	; 0x40
     ea0:	cmp	r0, #0
     ea4:	beq	ed8 <coda_mem_record_new+0x8c>
     ea8:	ldr	r0, [fp, #-8]
     eac:	ldr	r0, [r0, #68]	; 0x44
     eb0:	movw	r1, #0
     eb4:	cmp	r0, r1
     eb8:	beq	ed8 <coda_mem_record_new+0x8c>
     ebc:	mvn	r0, #99	; 0x63
     ec0:	movw	r1, #0
     ec4:	movt	r1, #0
     ec8:	bl	0 <coda_set_error>
     ecc:	movw	r0, #0
     ed0:	str	r0, [fp, #-4]
     ed4:	b	1084 <coda_mem_record_new+0x238>
     ed8:	movw	r0, #24
     edc:	bl	0 <malloc>
     ee0:	str	r0, [sp, #8]
     ee4:	ldr	r0, [sp, #8]
     ee8:	movw	r1, #0
     eec:	cmp	r0, r1
     ef0:	bne	f24 <coda_mem_record_new+0xd8>
     ef4:	mvn	r0, #0
     ef8:	movw	r1, #0
     efc:	movt	r1, #0
     f00:	movw	r2, #24
     f04:	movw	r3, #0
     f08:	movt	r3, #0
     f0c:	movw	ip, #442	; 0x1ba
     f10:	str	ip, [sp]
     f14:	bl	0 <coda_set_error>
     f18:	movw	r0, #0
     f1c:	str	r0, [fp, #-4]
     f20:	b	1084 <coda_mem_record_new+0x238>
     f24:	ldr	r0, [sp, #8]
     f28:	movw	r1, #100	; 0x64
     f2c:	str	r1, [r0]
     f30:	ldr	r0, [fp, #-8]
     f34:	ldr	r1, [sp, #8]
     f38:	str	r0, [r1, #4]
     f3c:	ldr	r0, [fp, #-8]
     f40:	ldr	r1, [r0, #4]
     f44:	add	r1, r1, #1
     f48:	str	r1, [r0, #4]
     f4c:	ldr	r0, [sp, #8]
     f50:	movw	r1, #0
     f54:	str	r1, [r0, #8]
     f58:	ldr	r0, [sp, #12]
     f5c:	ldr	r2, [sp, #8]
     f60:	str	r0, [r2, #12]
     f64:	ldr	r0, [sp, #8]
     f68:	str	r1, [r0, #16]
     f6c:	ldr	r0, [sp, #8]
     f70:	str	r1, [r0, #20]
     f74:	ldr	r0, [sp, #8]
     f78:	ldr	r0, [r0, #12]
     f7c:	cmp	r0, r1
     f80:	bne	fac <coda_mem_record_new+0x160>
     f84:	ldr	r0, [sp, #8]
     f88:	bl	1728 <create_attributes_record>
     f8c:	cmp	r0, #0
     f90:	beq	fa8 <coda_mem_record_new+0x15c>
     f94:	ldr	r0, [sp, #8]
     f98:	bl	0 <coda_mem_type_delete>
     f9c:	movw	r0, #0
     fa0:	str	r0, [fp, #-4]
     fa4:	b	1084 <coda_mem_record_new+0x238>
     fa8:	b	fac <coda_mem_record_new+0x160>
     fac:	ldr	r0, [fp, #-8]
     fb0:	ldr	r0, [r0, #48]	; 0x30
     fb4:	cmp	r0, #0
     fb8:	ble	107c <coda_mem_record_new+0x230>
     fbc:	ldr	r0, [fp, #-8]
     fc0:	ldr	r0, [r0, #48]	; 0x30
     fc4:	lsl	r0, r0, #2
     fc8:	bl	0 <malloc>
     fcc:	ldr	r1, [sp, #8]
     fd0:	str	r0, [r1, #20]
     fd4:	ldr	r0, [sp, #8]
     fd8:	ldr	r0, [r0, #20]
     fdc:	movw	r1, #0
     fe0:	cmp	r0, r1
     fe4:	bne	1028 <coda_mem_record_new+0x1dc>
     fe8:	ldr	r0, [fp, #-8]
     fec:	ldr	r0, [r0, #48]	; 0x30
     ff0:	lsl	r2, r0, #2
     ff4:	mvn	r0, #0
     ff8:	movw	r1, #0
     ffc:	movt	r1, #0
    1000:	movw	r3, #0
    1004:	movt	r3, #0
    1008:	movw	ip, #469	; 0x1d5
    100c:	str	ip, [sp]
    1010:	bl	0 <coda_set_error>
    1014:	ldr	r0, [sp, #8]
    1018:	bl	0 <coda_mem_type_delete>
    101c:	movw	r0, #0
    1020:	str	r0, [fp, #-4]
    1024:	b	1084 <coda_mem_record_new+0x238>
    1028:	movw	r0, #0
    102c:	str	r0, [sp, #4]
    1030:	ldr	r0, [sp, #4]
    1034:	ldr	r1, [fp, #-8]
    1038:	ldr	r1, [r1, #48]	; 0x30
    103c:	cmp	r0, r1
    1040:	bge	106c <coda_mem_record_new+0x220>
    1044:	ldr	r0, [sp, #8]
    1048:	ldr	r0, [r0, #20]
    104c:	ldr	r1, [sp, #4]
    1050:	add	r0, r0, r1, lsl #2
    1054:	movw	r1, #0
    1058:	str	r1, [r0]
    105c:	ldr	r0, [sp, #4]
    1060:	add	r0, r0, #1
    1064:	str	r0, [sp, #4]
    1068:	b	1030 <coda_mem_record_new+0x1e4>
    106c:	ldr	r0, [fp, #-8]
    1070:	ldr	r0, [r0, #48]	; 0x30
    1074:	ldr	r1, [sp, #8]
    1078:	str	r0, [r1, #16]
    107c:	ldr	r0, [sp, #8]
    1080:	str	r0, [fp, #-4]
    1084:	ldr	r0, [fp, #-4]
    1088:	mov	sp, fp
    108c:	pop	{fp, pc}

00001090 <coda_mem_type_add_attribute>:
    1090:	push	{fp, lr}
    1094:	mov	fp, sp
    1098:	sub	sp, sp, #40	; 0x28
    109c:	str	r0, [fp, #-8]
    10a0:	str	r1, [fp, #-12]
    10a4:	str	r2, [fp, #-16]
    10a8:	str	r3, [sp, #20]
    10ac:	mvn	r0, #0
    10b0:	str	r0, [sp, #12]
    10b4:	ldr	r0, [fp, #-8]
    10b8:	movw	r1, #0
    10bc:	cmp	r0, r1
    10c0:	bne	10ec <coda_mem_type_add_attribute+0x5c>
    10c4:	mvn	r0, #99	; 0x63
    10c8:	movw	r1, #0
    10cc:	movt	r1, #0
    10d0:	movw	r2, #0
    10d4:	movt	r2, #0
    10d8:	movw	r3, #272	; 0x110
    10dc:	bl	0 <coda_set_error>
    10e0:	mvn	r0, #0
    10e4:	str	r0, [fp, #-4]
    10e8:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    10ec:	ldr	r0, [fp, #-12]
    10f0:	movw	r1, #0
    10f4:	cmp	r0, r1
    10f8:	bne	1124 <coda_mem_type_add_attribute+0x94>
    10fc:	mvn	r0, #99	; 0x63
    1100:	movw	r1, #0
    1104:	movt	r1, #0
    1108:	movw	r2, #0
    110c:	movt	r2, #0
    1110:	movw	r3, #277	; 0x115
    1114:	bl	0 <coda_set_error>
    1118:	mvn	r0, #0
    111c:	str	r0, [fp, #-4]
    1120:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    1124:	ldr	r0, [fp, #-16]
    1128:	movw	r1, #0
    112c:	cmp	r0, r1
    1130:	bne	115c <coda_mem_type_add_attribute+0xcc>
    1134:	mvn	r0, #99	; 0x63
    1138:	movw	r1, #0
    113c:	movt	r1, #0
    1140:	movw	r2, #0
    1144:	movt	r2, #0
    1148:	movw	r3, #282	; 0x11a
    114c:	bl	0 <coda_set_error>
    1150:	mvn	r0, #0
    1154:	str	r0, [fp, #-4]
    1158:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    115c:	ldr	r0, [fp, #-8]
    1160:	ldr	r0, [r0, #12]
    1164:	movw	r1, #0
    1168:	cmp	r0, r1
    116c:	bne	124c <coda_mem_type_add_attribute+0x1bc>
    1170:	ldr	r0, [sp, #20]
    1174:	cmp	r0, #0
    1178:	beq	1218 <coda_mem_type_add_attribute+0x188>
    117c:	ldr	r0, [fp, #-8]
    1180:	ldr	r0, [r0, #4]
    1184:	ldr	r0, [r0, #36]	; 0x24
    1188:	movw	r1, #0
    118c:	cmp	r0, r1
    1190:	bne	11d8 <coda_mem_type_add_attribute+0x148>
    1194:	ldr	r0, [fp, #-8]
    1198:	ldr	r0, [r0, #4]
    119c:	ldr	r0, [r0]
    11a0:	bl	0 <coda_type_record_new>
    11a4:	ldr	r1, [fp, #-8]
    11a8:	ldr	r1, [r1, #4]
    11ac:	str	r0, [r1, #36]	; 0x24
    11b0:	ldr	r0, [fp, #-8]
    11b4:	ldr	r0, [r0, #4]
    11b8:	ldr	r0, [r0, #36]	; 0x24
    11bc:	movw	r1, #0
    11c0:	cmp	r0, r1
    11c4:	bne	11d4 <coda_mem_type_add_attribute+0x144>
    11c8:	mvn	r0, #0
    11cc:	str	r0, [fp, #-4]
    11d0:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    11d4:	b	11d8 <coda_mem_type_add_attribute+0x148>
    11d8:	ldr	r0, [fp, #-8]
    11dc:	ldr	r0, [r0, #4]
    11e0:	ldr	r0, [r0, #36]	; 0x24
    11e4:	movw	r1, #0
    11e8:	bl	e4c <coda_mem_record_new>
    11ec:	ldr	r1, [fp, #-8]
    11f0:	str	r0, [r1, #12]
    11f4:	ldr	r0, [fp, #-8]
    11f8:	ldr	r0, [r0, #12]
    11fc:	movw	r1, #0
    1200:	cmp	r0, r1
    1204:	bne	1214 <coda_mem_type_add_attribute+0x184>
    1208:	mvn	r0, #0
    120c:	str	r0, [fp, #-4]
    1210:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    1214:	b	1248 <coda_mem_type_add_attribute+0x1b8>
    1218:	ldr	r2, [fp, #-12]
    121c:	mvn	r0, #101	; 0x65
    1220:	movw	r1, #0
    1224:	movt	r1, #0
    1228:	movw	r3, #0
    122c:	movt	r3, #0
    1230:	movw	ip, #307	; 0x133
    1234:	str	ip, [sp]
    1238:	bl	0 <coda_set_error>
    123c:	mvn	r0, #0
    1240:	str	r0, [fp, #-4]
    1244:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    1248:	b	12d0 <coda_mem_type_add_attribute+0x240>
    124c:	ldr	r0, [fp, #-8]
    1250:	ldr	r0, [r0, #12]
    1254:	ldr	r0, [r0]
    1258:	cmp	r0, #100	; 0x64
    125c:	beq	1288 <coda_mem_type_add_attribute+0x1f8>
    1260:	mvn	r0, #99	; 0x63
    1264:	movw	r1, #0
    1268:	movt	r1, #0
    126c:	movw	r2, #0
    1270:	movt	r2, #0
    1274:	movw	r3, #315	; 0x13b
    1278:	bl	0 <coda_set_error>
    127c:	mvn	r0, #0
    1280:	str	r0, [fp, #-4]
    1284:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    1288:	ldr	r0, [fp, #-8]
    128c:	ldr	r0, [r0, #4]
    1290:	ldr	r0, [r0, #36]	; 0x24
    1294:	ldr	r1, [fp, #-8]
    1298:	ldr	r1, [r1, #12]
    129c:	ldr	r1, [r1, #4]
    12a0:	cmp	r0, r1
    12a4:	bne	12ac <coda_mem_type_add_attribute+0x21c>
    12a8:	b	12cc <coda_mem_type_add_attribute+0x23c>
    12ac:	movw	r0, #0
    12b0:	movt	r0, #0
    12b4:	movw	r1, #0
    12b8:	movt	r1, #0
    12bc:	movw	r2, #318	; 0x13e
    12c0:	movw	r3, #0
    12c4:	movt	r3, #0
    12c8:	bl	0 <__assert_fail>
    12cc:	b	12d0 <coda_mem_type_add_attribute+0x240>
    12d0:	ldr	r0, [fp, #-8]
    12d4:	ldr	r0, [r0, #12]
    12d8:	str	r0, [sp, #16]
    12dc:	ldr	r0, [sp, #16]
    12e0:	ldr	r0, [r0, #4]
    12e4:	ldr	r0, [r0, #44]	; 0x2c
    12e8:	ldr	r1, [fp, #-12]
    12ec:	bl	0 <coda_hashtable_get_index_from_name>
    12f0:	str	r0, [sp, #12]
    12f4:	ldr	r0, [sp, #20]
    12f8:	cmp	r0, #0
    12fc:	beq	1474 <coda_mem_type_add_attribute+0x3e4>
    1300:	ldr	r0, [sp, #12]
    1304:	cmp	r0, #0
    1308:	blt	1340 <coda_mem_type_add_attribute+0x2b0>
    130c:	ldr	r0, [sp, #12]
    1310:	ldr	r1, [sp, #16]
    1314:	ldr	r1, [r1, #16]
    1318:	cmp	r0, r1
    131c:	bge	1380 <coda_mem_type_add_attribute+0x2f0>
    1320:	ldr	r0, [sp, #16]
    1324:	ldr	r0, [r0, #20]
    1328:	ldr	r1, [sp, #12]
    132c:	add	r0, r0, r1, lsl #2
    1330:	ldr	r0, [r0]
    1334:	movw	r1, #0
    1338:	cmp	r0, r1
    133c:	beq	1380 <coda_mem_type_add_attribute+0x2f0>
    1340:	ldr	r0, [sp, #16]
    1344:	ldr	r0, [r0, #4]
    1348:	ldr	r1, [fp, #-12]
    134c:	ldr	r2, [fp, #-16]
    1350:	ldr	r2, [r2, #4]
    1354:	bl	0 <coda_type_record_create_field>
    1358:	cmp	r0, #0
    135c:	beq	136c <coda_mem_type_add_attribute+0x2dc>
    1360:	mvn	r0, #0
    1364:	str	r0, [fp, #-4]
    1368:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    136c:	ldr	r0, [sp, #16]
    1370:	ldr	r0, [r0, #4]
    1374:	ldr	r0, [r0, #48]	; 0x30
    1378:	sub	r0, r0, #1
    137c:	str	r0, [sp, #12]
    1380:	ldr	r0, [sp, #16]
    1384:	ldr	r0, [r0, #16]
    1388:	ldr	r1, [sp, #16]
    138c:	ldr	r1, [r1, #4]
    1390:	ldr	r1, [r1, #48]	; 0x30
    1394:	cmp	r0, r1
    1398:	bge	1470 <coda_mem_type_add_attribute+0x3e0>
    139c:	ldr	r0, [sp, #16]
    13a0:	ldr	r1, [r0, #4]
    13a4:	ldr	r0, [r0, #20]
    13a8:	ldr	r1, [r1, #48]	; 0x30
    13ac:	lsl	r1, r1, #2
    13b0:	bl	0 <realloc>
    13b4:	str	r0, [sp, #8]
    13b8:	ldr	r0, [sp, #8]
    13bc:	movw	r1, #0
    13c0:	cmp	r0, r1
    13c4:	bne	1404 <coda_mem_type_add_attribute+0x374>
    13c8:	ldr	r0, [sp, #16]
    13cc:	ldr	r0, [r0, #4]
    13d0:	ldr	r0, [r0, #48]	; 0x30
    13d4:	lsl	r2, r0, #2
    13d8:	mvn	r0, #0
    13dc:	movw	r1, #0
    13e0:	movt	r1, #0
    13e4:	movw	r3, #0
    13e8:	movt	r3, #0
    13ec:	movw	ip, #344	; 0x158
    13f0:	str	ip, [sp]
    13f4:	bl	0 <coda_set_error>
    13f8:	mvn	r0, #0
    13fc:	str	r0, [fp, #-4]
    1400:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    1404:	ldr	r0, [sp, #8]
    1408:	ldr	r1, [sp, #16]
    140c:	str	r0, [r1, #20]
    1410:	ldr	r0, [sp, #16]
    1414:	ldr	r0, [r0, #16]
    1418:	str	r0, [sp, #4]
    141c:	ldr	r0, [sp, #4]
    1420:	ldr	r1, [sp, #16]
    1424:	ldr	r1, [r1, #4]
    1428:	ldr	r1, [r1, #48]	; 0x30
    142c:	cmp	r0, r1
    1430:	bge	145c <coda_mem_type_add_attribute+0x3cc>
    1434:	ldr	r0, [sp, #16]
    1438:	ldr	r0, [r0, #20]
    143c:	ldr	r1, [sp, #4]
    1440:	add	r0, r0, r1, lsl #2
    1444:	movw	r1, #0
    1448:	str	r1, [r0]
    144c:	ldr	r0, [sp, #4]
    1450:	add	r0, r0, #1
    1454:	str	r0, [sp, #4]
    1458:	b	141c <coda_mem_type_add_attribute+0x38c>
    145c:	ldr	r0, [sp, #16]
    1460:	ldr	r0, [r0, #4]
    1464:	ldr	r0, [r0, #48]	; 0x30
    1468:	ldr	r1, [sp, #16]
    146c:	str	r0, [r1, #16]
    1470:	b	1560 <coda_mem_type_add_attribute+0x4d0>
    1474:	ldr	r0, [sp, #12]
    1478:	cmp	r0, #0
    147c:	bge	14b0 <coda_mem_type_add_attribute+0x420>
    1480:	ldr	r2, [fp, #-12]
    1484:	mvn	r0, #101	; 0x65
    1488:	movw	r1, #0
    148c:	movt	r1, #0
    1490:	movw	r3, #0
    1494:	movt	r3, #0
    1498:	movw	ip, #361	; 0x169
    149c:	str	ip, [sp]
    14a0:	bl	0 <coda_set_error>
    14a4:	mvn	r0, #0
    14a8:	str	r0, [fp, #-4]
    14ac:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    14b0:	ldr	r0, [sp, #16]
    14b4:	ldr	r0, [r0, #20]
    14b8:	ldr	r1, [sp, #12]
    14bc:	add	r0, r0, r1, lsl #2
    14c0:	ldr	r0, [r0]
    14c4:	movw	r1, #0
    14c8:	cmp	r0, r1
    14cc:	beq	1500 <coda_mem_type_add_attribute+0x470>
    14d0:	ldr	r2, [fp, #-12]
    14d4:	mvn	r0, #99	; 0x63
    14d8:	movw	r1, #0
    14dc:	movt	r1, #0
    14e0:	movw	r3, #0
    14e4:	movt	r3, #0
    14e8:	movw	ip, #367	; 0x16f
    14ec:	str	ip, [sp]
    14f0:	bl	0 <coda_set_error>
    14f4:	mvn	r0, #0
    14f8:	str	r0, [fp, #-4]
    14fc:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    1500:	ldr	r0, [sp, #16]
    1504:	ldr	r0, [r0, #4]
    1508:	ldr	r0, [r0, #52]	; 0x34
    150c:	ldr	r1, [sp, #12]
    1510:	add	r0, r0, r1, lsl #2
    1514:	ldr	r0, [r0]
    1518:	ldr	r0, [r0, #8]
    151c:	ldr	r1, [fp, #-16]
    1520:	ldr	r1, [r1, #4]
    1524:	cmp	r0, r1
    1528:	beq	155c <coda_mem_type_add_attribute+0x4cc>
    152c:	ldr	r2, [fp, #-12]
    1530:	mvn	r0, #99	; 0x63
    1534:	movw	r1, #0
    1538:	movt	r1, #0
    153c:	movw	r3, #0
    1540:	movt	r3, #0
    1544:	movw	ip, #373	; 0x175
    1548:	str	ip, [sp]
    154c:	bl	0 <coda_set_error>
    1550:	mvn	r0, #0
    1554:	str	r0, [fp, #-4]
    1558:	b	1580 <coda_mem_type_add_attribute+0x4f0>
    155c:	b	1560 <coda_mem_type_add_attribute+0x4d0>
    1560:	ldr	r0, [fp, #-16]
    1564:	ldr	r1, [sp, #16]
    1568:	ldr	r1, [r1, #20]
    156c:	ldr	r2, [sp, #12]
    1570:	add	r1, r1, r2, lsl #2
    1574:	str	r0, [r1]
    1578:	movw	r0, #0
    157c:	str	r0, [fp, #-4]
    1580:	ldr	r0, [fp, #-4]
    1584:	mov	sp, fp
    1588:	pop	{fp, pc}

0000158c <coda_mem_type_set_attributes>:
    158c:	push	{fp, lr}
    1590:	mov	fp, sp
    1594:	sub	sp, sp, #16
    1598:	str	r0, [sp, #8]
    159c:	str	r1, [sp, #4]
    15a0:	str	r2, [sp]
    15a4:	ldr	r0, [sp, #8]
    15a8:	movw	r1, #0
    15ac:	cmp	r0, r1
    15b0:	bne	15dc <coda_mem_type_set_attributes+0x50>
    15b4:	mvn	r0, #99	; 0x63
    15b8:	movw	r1, #0
    15bc:	movt	r1, #0
    15c0:	movw	r2, #0
    15c4:	movt	r2, #0
    15c8:	movw	r3, #386	; 0x182
    15cc:	bl	0 <coda_set_error>
    15d0:	mvn	r0, #0
    15d4:	str	r0, [fp, #-4]
    15d8:	b	171c <coda_mem_type_set_attributes+0x190>
    15dc:	ldr	r0, [sp, #4]
    15e0:	movw	r1, #0
    15e4:	cmp	r0, r1
    15e8:	bne	1614 <coda_mem_type_set_attributes+0x88>
    15ec:	mvn	r0, #99	; 0x63
    15f0:	movw	r1, #0
    15f4:	movt	r1, #0
    15f8:	movw	r2, #0
    15fc:	movt	r2, #0
    1600:	movw	r3, #391	; 0x187
    1604:	bl	0 <coda_set_error>
    1608:	mvn	r0, #0
    160c:	str	r0, [fp, #-4]
    1610:	b	171c <coda_mem_type_set_attributes+0x190>
    1614:	ldr	r0, [sp, #8]
    1618:	ldr	r0, [r0, #12]
    161c:	movw	r1, #0
    1620:	cmp	r0, r1
    1624:	beq	1650 <coda_mem_type_set_attributes+0xc4>
    1628:	mvn	r0, #99	; 0x63
    162c:	movw	r1, #0
    1630:	movt	r1, #0
    1634:	movw	r2, #0
    1638:	movt	r2, #0
    163c:	movw	r3, #396	; 0x18c
    1640:	bl	0 <coda_set_error>
    1644:	mvn	r0, #0
    1648:	str	r0, [fp, #-4]
    164c:	b	171c <coda_mem_type_set_attributes+0x190>
    1650:	ldr	r0, [sp]
    1654:	cmp	r0, #0
    1658:	beq	16c0 <coda_mem_type_set_attributes+0x134>
    165c:	ldr	r0, [sp, #4]
    1660:	ldr	r0, [r0, #4]
    1664:	ldr	r0, [r0, #8]
    1668:	cmp	r0, #0
    166c:	bne	1674 <coda_mem_type_set_attributes+0xe8>
    1670:	b	1694 <coda_mem_type_set_attributes+0x108>
    1674:	movw	r0, #0
    1678:	movt	r0, #0
    167c:	movw	r1, #0
    1680:	movt	r1, #0
    1684:	movw	r2, #401	; 0x191
    1688:	movw	r3, #0
    168c:	movt	r3, #0
    1690:	bl	0 <__assert_fail>
    1694:	ldr	r0, [sp, #8]
    1698:	ldr	r0, [r0, #4]
    169c:	ldr	r1, [sp, #4]
    16a0:	ldr	r1, [r1, #4]
    16a4:	bl	0 <coda_type_set_attributes>
    16a8:	cmp	r0, #0
    16ac:	beq	16bc <coda_mem_type_set_attributes+0x130>
    16b0:	mvn	r0, #0
    16b4:	str	r0, [fp, #-4]
    16b8:	b	171c <coda_mem_type_set_attributes+0x190>
    16bc:	b	1708 <coda_mem_type_set_attributes+0x17c>
    16c0:	ldr	r0, [sp, #8]
    16c4:	ldr	r0, [r0, #4]
    16c8:	ldr	r0, [r0, #36]	; 0x24
    16cc:	ldr	r1, [sp, #4]
    16d0:	ldr	r1, [r1, #4]
    16d4:	cmp	r0, r1
    16d8:	beq	1704 <coda_mem_type_set_attributes+0x178>
    16dc:	mvn	r0, #99	; 0x63
    16e0:	movw	r1, #0
    16e4:	movt	r1, #0
    16e8:	movw	r2, #0
    16ec:	movt	r2, #0
    16f0:	movw	r3, #412	; 0x19c
    16f4:	bl	0 <coda_set_error>
    16f8:	mvn	r0, #0
    16fc:	str	r0, [fp, #-4]
    1700:	b	171c <coda_mem_type_set_attributes+0x190>
    1704:	b	1708 <coda_mem_type_set_attributes+0x17c>
    1708:	ldr	r0, [sp, #4]
    170c:	ldr	r1, [sp, #8]
    1710:	str	r0, [r1, #12]
    1714:	movw	r0, #0
    1718:	str	r0, [fp, #-4]
    171c:	ldr	r0, [fp, #-4]
    1720:	mov	sp, fp
    1724:	pop	{fp, pc}

00001728 <create_attributes_record>:
    1728:	push	{fp, lr}
    172c:	mov	fp, sp
    1730:	sub	sp, sp, #8
    1734:	str	r0, [sp]
    1738:	ldr	r0, [sp]
    173c:	ldr	r0, [r0, #4]
    1740:	ldr	r0, [r0, #36]	; 0x24
    1744:	movw	r1, #0
    1748:	cmp	r0, r1
    174c:	beq	1790 <create_attributes_record+0x68>
    1750:	ldr	r0, [sp]
    1754:	ldr	r0, [r0, #4]
    1758:	ldr	r0, [r0, #36]	; 0x24
    175c:	movw	r1, #0
    1760:	bl	e4c <coda_mem_record_new>
    1764:	ldr	r1, [sp]
    1768:	str	r0, [r1, #12]
    176c:	ldr	r0, [sp]
    1770:	ldr	r0, [r0, #12]
    1774:	movw	r1, #0
    1778:	cmp	r0, r1
    177c:	bne	178c <create_attributes_record+0x64>
    1780:	mvn	r0, #0
    1784:	str	r0, [sp, #4]
    1788:	b	1798 <create_attributes_record+0x70>
    178c:	b	1790 <create_attributes_record+0x68>
    1790:	movw	r0, #0
    1794:	str	r0, [sp, #4]
    1798:	ldr	r0, [sp, #4]
    179c:	mov	sp, fp
    17a0:	pop	{fp, pc}

000017a4 <coda_mem_record_add_field>:
    17a4:	push	{fp, lr}
    17a8:	mov	fp, sp
    17ac:	sub	sp, sp, #40	; 0x28
    17b0:	str	r0, [fp, #-8]
    17b4:	str	r1, [fp, #-12]
    17b8:	str	r2, [fp, #-16]
    17bc:	str	r3, [sp, #20]
    17c0:	mvn	r0, #0
    17c4:	str	r0, [sp, #16]
    17c8:	ldr	r0, [fp, #-8]
    17cc:	movw	r1, #0
    17d0:	cmp	r0, r1
    17d4:	bne	1800 <coda_mem_record_add_field+0x5c>
    17d8:	mvn	r0, #99	; 0x63
    17dc:	movw	r1, #0
    17e0:	movt	r1, #0
    17e4:	movw	r2, #0
    17e8:	movt	r2, #0
    17ec:	movw	r3, #491	; 0x1eb
    17f0:	bl	0 <coda_set_error>
    17f4:	mvn	r0, #0
    17f8:	str	r0, [fp, #-4]
    17fc:	b	1a9c <coda_mem_record_add_field+0x2f8>
    1800:	ldr	r0, [fp, #-16]
    1804:	movw	r1, #0
    1808:	cmp	r0, r1
    180c:	bne	1838 <coda_mem_record_add_field+0x94>
    1810:	mvn	r0, #99	; 0x63
    1814:	movw	r1, #0
    1818:	movt	r1, #0
    181c:	movw	r2, #0
    1820:	movt	r2, #0
    1824:	movw	r3, #496	; 0x1f0
    1828:	bl	0 <coda_set_error>
    182c:	mvn	r0, #0
    1830:	str	r0, [fp, #-4]
    1834:	b	1a9c <coda_mem_record_add_field+0x2f8>
    1838:	ldr	r0, [sp, #20]
    183c:	cmp	r0, #0
    1840:	beq	1978 <coda_mem_record_add_field+0x1d4>
    1844:	ldr	r0, [fp, #-8]
    1848:	ldr	r0, [r0, #4]
    184c:	ldr	r1, [fp, #-12]
    1850:	ldr	r2, [fp, #-16]
    1854:	ldr	r2, [r2, #4]
    1858:	bl	0 <coda_type_record_create_field>
    185c:	cmp	r0, #0
    1860:	beq	1870 <coda_mem_record_add_field+0xcc>
    1864:	mvn	r0, #0
    1868:	str	r0, [fp, #-4]
    186c:	b	1a9c <coda_mem_record_add_field+0x2f8>
    1870:	ldr	r0, [fp, #-8]
    1874:	ldr	r0, [r0, #4]
    1878:	ldr	r0, [r0, #48]	; 0x30
    187c:	sub	r0, r0, #1
    1880:	str	r0, [sp, #16]
    1884:	ldr	r0, [fp, #-8]
    1888:	ldr	r0, [r0, #16]
    188c:	ldr	r1, [fp, #-8]
    1890:	ldr	r1, [r1, #4]
    1894:	ldr	r1, [r1, #48]	; 0x30
    1898:	cmp	r0, r1
    189c:	bge	1974 <coda_mem_record_add_field+0x1d0>
    18a0:	ldr	r0, [fp, #-8]
    18a4:	ldr	r1, [r0, #4]
    18a8:	ldr	r0, [r0, #20]
    18ac:	ldr	r1, [r1, #48]	; 0x30
    18b0:	lsl	r1, r1, #2
    18b4:	bl	0 <realloc>
    18b8:	str	r0, [sp, #12]
    18bc:	ldr	r0, [sp, #12]
    18c0:	movw	r1, #0
    18c4:	cmp	r0, r1
    18c8:	bne	1908 <coda_mem_record_add_field+0x164>
    18cc:	ldr	r0, [fp, #-8]
    18d0:	ldr	r0, [r0, #4]
    18d4:	ldr	r0, [r0, #48]	; 0x30
    18d8:	lsl	r2, r0, #2
    18dc:	mvn	r0, #0
    18e0:	movw	r1, #0
    18e4:	movt	r1, #0
    18e8:	movw	r3, #0
    18ec:	movt	r3, #0
    18f0:	movw	ip, #516	; 0x204
    18f4:	str	ip, [sp]
    18f8:	bl	0 <coda_set_error>
    18fc:	mvn	r0, #0
    1900:	str	r0, [fp, #-4]
    1904:	b	1a9c <coda_mem_record_add_field+0x2f8>
    1908:	ldr	r0, [sp, #12]
    190c:	ldr	r1, [fp, #-8]
    1910:	str	r0, [r1, #20]
    1914:	ldr	r0, [fp, #-8]
    1918:	ldr	r0, [r0, #16]
    191c:	str	r0, [sp, #8]
    1920:	ldr	r0, [sp, #8]
    1924:	ldr	r1, [fp, #-8]
    1928:	ldr	r1, [r1, #4]
    192c:	ldr	r1, [r1, #48]	; 0x30
    1930:	cmp	r0, r1
    1934:	bge	1960 <coda_mem_record_add_field+0x1bc>
    1938:	ldr	r0, [fp, #-8]
    193c:	ldr	r0, [r0, #20]
    1940:	ldr	r1, [sp, #8]
    1944:	add	r0, r0, r1, lsl #2
    1948:	movw	r1, #0
    194c:	str	r1, [r0]
    1950:	ldr	r0, [sp, #8]
    1954:	add	r0, r0, #1
    1958:	str	r0, [sp, #8]
    195c:	b	1920 <coda_mem_record_add_field+0x17c>
    1960:	ldr	r0, [fp, #-8]
    1964:	ldr	r0, [r0, #4]
    1968:	ldr	r0, [r0, #48]	; 0x30
    196c:	ldr	r1, [fp, #-8]
    1970:	str	r0, [r1, #16]
    1974:	b	1a7c <coda_mem_record_add_field+0x2d8>
    1978:	ldr	r0, [fp, #-8]
    197c:	ldr	r0, [r0, #4]
    1980:	ldr	r0, [r0, #44]	; 0x2c
    1984:	ldr	r1, [fp, #-12]
    1988:	bl	0 <coda_hashtable_get_index_from_name>
    198c:	str	r0, [sp, #16]
    1990:	ldr	r0, [sp, #16]
    1994:	cmp	r0, #0
    1998:	bge	19cc <coda_mem_record_add_field+0x228>
    199c:	ldr	r2, [fp, #-12]
    19a0:	mvn	r0, #101	; 0x65
    19a4:	movw	r1, #0
    19a8:	movt	r1, #0
    19ac:	movw	r3, #0
    19b0:	movt	r3, #0
    19b4:	movw	ip, #534	; 0x216
    19b8:	str	ip, [sp]
    19bc:	bl	0 <coda_set_error>
    19c0:	mvn	r0, #0
    19c4:	str	r0, [fp, #-4]
    19c8:	b	1a9c <coda_mem_record_add_field+0x2f8>
    19cc:	ldr	r0, [fp, #-8]
    19d0:	ldr	r0, [r0, #20]
    19d4:	ldr	r1, [sp, #16]
    19d8:	add	r0, r0, r1, lsl #2
    19dc:	ldr	r0, [r0]
    19e0:	movw	r1, #0
    19e4:	cmp	r0, r1
    19e8:	beq	1a1c <coda_mem_record_add_field+0x278>
    19ec:	ldr	r2, [fp, #-12]
    19f0:	mvn	r0, #99	; 0x63
    19f4:	movw	r1, #0
    19f8:	movt	r1, #0
    19fc:	movw	r3, #0
    1a00:	movt	r3, #0
    1a04:	movw	ip, #540	; 0x21c
    1a08:	str	ip, [sp]
    1a0c:	bl	0 <coda_set_error>
    1a10:	mvn	r0, #0
    1a14:	str	r0, [fp, #-4]
    1a18:	b	1a9c <coda_mem_record_add_field+0x2f8>
    1a1c:	ldr	r0, [fp, #-8]
    1a20:	ldr	r0, [r0, #4]
    1a24:	ldr	r0, [r0, #52]	; 0x34
    1a28:	ldr	r1, [sp, #16]
    1a2c:	add	r0, r0, r1, lsl #2
    1a30:	ldr	r0, [r0]
    1a34:	ldr	r0, [r0, #8]
    1a38:	ldr	r1, [fp, #-16]
    1a3c:	ldr	r1, [r1, #4]
    1a40:	cmp	r0, r1
    1a44:	beq	1a78 <coda_mem_record_add_field+0x2d4>
    1a48:	ldr	r2, [fp, #-12]
    1a4c:	mvn	r0, #99	; 0x63
    1a50:	movw	r1, #0
    1a54:	movt	r1, #0
    1a58:	movw	r3, #0
    1a5c:	movt	r3, #0
    1a60:	movw	ip, #546	; 0x222
    1a64:	str	ip, [sp]
    1a68:	bl	0 <coda_set_error>
    1a6c:	mvn	r0, #0
    1a70:	str	r0, [fp, #-4]
    1a74:	b	1a9c <coda_mem_record_add_field+0x2f8>
    1a78:	b	1a7c <coda_mem_record_add_field+0x2d8>
    1a7c:	ldr	r0, [fp, #-16]
    1a80:	ldr	r1, [fp, #-8]
    1a84:	ldr	r1, [r1, #20]
    1a88:	ldr	r2, [sp, #16]
    1a8c:	add	r1, r1, r2, lsl #2
    1a90:	str	r0, [r1]
    1a94:	movw	r0, #0
    1a98:	str	r0, [fp, #-4]
    1a9c:	ldr	r0, [fp, #-4]
    1aa0:	mov	sp, fp
    1aa4:	pop	{fp, pc}

00001aa8 <coda_mem_record_validate>:
    1aa8:	push	{fp, lr}
    1aac:	mov	fp, sp
    1ab0:	sub	sp, sp, #16
    1ab4:	str	r0, [sp, #8]
    1ab8:	ldr	r0, [sp, #8]
    1abc:	movw	r1, #0
    1ac0:	cmp	r0, r1
    1ac4:	bne	1af0 <coda_mem_record_validate+0x48>
    1ac8:	mvn	r0, #99	; 0x63
    1acc:	movw	r1, #0
    1ad0:	movt	r1, #0
    1ad4:	movw	r2, #0
    1ad8:	movt	r2, #0
    1adc:	movw	r3, #561	; 0x231
    1ae0:	bl	0 <coda_set_error>
    1ae4:	mvn	r0, #0
    1ae8:	str	r0, [fp, #-4]
    1aec:	b	1be4 <coda_mem_record_validate+0x13c>
    1af0:	ldr	r0, [sp, #8]
    1af4:	ldr	r0, [r0, #16]
    1af8:	ldr	r1, [sp, #8]
    1afc:	ldr	r1, [r1, #4]
    1b00:	ldr	r1, [r1, #48]	; 0x30
    1b04:	cmp	r0, r1
    1b08:	bne	1b10 <coda_mem_record_validate+0x68>
    1b0c:	b	1b30 <coda_mem_record_validate+0x88>
    1b10:	movw	r0, #0
    1b14:	movt	r0, #0
    1b18:	movw	r1, #0
    1b1c:	movt	r1, #0
    1b20:	movw	r2, #564	; 0x234
    1b24:	movw	r3, #0
    1b28:	movt	r3, #0
    1b2c:	bl	0 <__assert_fail>
    1b30:	movw	r0, #0
    1b34:	str	r0, [sp, #4]
    1b38:	ldr	r0, [sp, #4]
    1b3c:	ldr	r1, [sp, #8]
    1b40:	ldr	r1, [r1, #16]
    1b44:	cmp	r0, r1
    1b48:	bge	1bdc <coda_mem_record_validate+0x134>
    1b4c:	ldr	r0, [sp, #8]
    1b50:	ldr	r0, [r0, #20]
    1b54:	ldr	r1, [sp, #4]
    1b58:	add	r0, r0, r1, lsl #2
    1b5c:	ldr	r0, [r0]
    1b60:	movw	r1, #0
    1b64:	cmp	r0, r1
    1b68:	bne	1bc8 <coda_mem_record_validate+0x120>
    1b6c:	ldr	r0, [sp, #8]
    1b70:	ldr	r0, [r0, #4]
    1b74:	ldr	r0, [r0, #52]	; 0x34
    1b78:	ldr	r1, [sp, #4]
    1b7c:	add	r0, r0, r1, lsl #2
    1b80:	ldr	r0, [r0]
    1b84:	ldrsb	r0, [r0, #16]
    1b88:	cmp	r0, #0
    1b8c:	bne	1bc8 <coda_mem_record_validate+0x120>
    1b90:	ldr	r0, [pc, #88]	; 1bf0 <coda_mem_record_validate+0x148>
    1b94:	ldr	r1, [sp, #8]
    1b98:	ldr	r1, [r1, #4]
    1b9c:	ldr	r1, [r1, #52]	; 0x34
    1ba0:	ldr	r2, [sp, #4]
    1ba4:	add	r1, r1, r2, lsl #2
    1ba8:	ldr	r1, [r1]
    1bac:	ldr	r2, [r1]
    1bb0:	movw	r1, #0
    1bb4:	movt	r1, #0
    1bb8:	bl	0 <coda_set_error>
    1bbc:	mvn	r0, #0
    1bc0:	str	r0, [fp, #-4]
    1bc4:	b	1be4 <coda_mem_record_validate+0x13c>
    1bc8:	b	1bcc <coda_mem_record_validate+0x124>
    1bcc:	ldr	r0, [sp, #4]
    1bd0:	add	r0, r0, #1
    1bd4:	str	r0, [sp, #4]
    1bd8:	b	1b38 <coda_mem_record_validate+0x90>
    1bdc:	movw	r0, #0
    1be0:	str	r0, [fp, #-4]
    1be4:	ldr	r0, [fp, #-4]
    1be8:	mov	sp, fp
    1bec:	pop	{fp, pc}
    1bf0:	.word	0xfffffe70

00001bf4 <coda_mem_array_set_element>:
    1bf4:	push	{fp, lr}
    1bf8:	mov	fp, sp
    1bfc:	sub	sp, sp, #24
    1c00:	str	r0, [fp, #-8]
    1c04:	str	r1, [sp, #12]
    1c08:	str	r2, [sp, #8]
    1c0c:	ldr	r0, [fp, #-8]
    1c10:	movw	r1, #0
    1c14:	cmp	r0, r1
    1c18:	bne	1c44 <coda_mem_array_set_element+0x50>
    1c1c:	mvn	r0, #99	; 0x63
    1c20:	movw	r1, #0
    1c24:	movt	r1, #0
    1c28:	movw	r2, #0
    1c2c:	movt	r2, #0
    1c30:	movw	r3, #635	; 0x27b
    1c34:	bl	0 <coda_set_error>
    1c38:	mvn	r0, #0
    1c3c:	str	r0, [fp, #-4]
    1c40:	b	1d98 <coda_mem_array_set_element+0x1a4>
    1c44:	ldr	r0, [sp, #12]
    1c48:	cmp	r0, #0
    1c4c:	blt	1c64 <coda_mem_array_set_element+0x70>
    1c50:	ldr	r0, [sp, #12]
    1c54:	ldr	r1, [fp, #-8]
    1c58:	ldr	r1, [r1, #16]
    1c5c:	cmp	r0, r1
    1c60:	blt	1ca0 <coda_mem_array_set_element+0xac>
    1c64:	ldr	r2, [sp, #12]
    1c68:	ldr	r0, [fp, #-8]
    1c6c:	ldr	r3, [r0, #16]
    1c70:	mvn	r0, #100	; 0x64
    1c74:	movw	r1, #0
    1c78:	movt	r1, #0
    1c7c:	movw	ip, #0
    1c80:	movt	ip, #0
    1c84:	str	ip, [sp]
    1c88:	movw	ip, #641	; 0x281
    1c8c:	str	ip, [sp, #4]
    1c90:	bl	0 <coda_set_error>
    1c94:	mvn	r0, #0
    1c98:	str	r0, [fp, #-4]
    1c9c:	b	1d98 <coda_mem_array_set_element+0x1a4>
    1ca0:	ldr	r0, [sp, #8]
    1ca4:	movw	r1, #0
    1ca8:	cmp	r0, r1
    1cac:	bne	1cd8 <coda_mem_array_set_element+0xe4>
    1cb0:	mvn	r0, #99	; 0x63
    1cb4:	movw	r1, #0
    1cb8:	movt	r1, #0
    1cbc:	movw	r2, #0
    1cc0:	movt	r2, #0
    1cc4:	movw	r3, #646	; 0x286
    1cc8:	bl	0 <coda_set_error>
    1ccc:	mvn	r0, #0
    1cd0:	str	r0, [fp, #-4]
    1cd4:	b	1d98 <coda_mem_array_set_element+0x1a4>
    1cd8:	ldr	r0, [fp, #-8]
    1cdc:	ldr	r0, [r0, #20]
    1ce0:	ldr	r1, [sp, #12]
    1ce4:	add	r0, r0, r1, lsl #2
    1ce8:	ldr	r0, [r0]
    1cec:	movw	r1, #0
    1cf0:	cmp	r0, r1
    1cf4:	beq	1d28 <coda_mem_array_set_element+0x134>
    1cf8:	ldr	r2, [sp, #12]
    1cfc:	mvn	r0, #99	; 0x63
    1d00:	movw	r1, #0
    1d04:	movt	r1, #0
    1d08:	movw	r3, #0
    1d0c:	movt	r3, #0
    1d10:	movw	ip, #652	; 0x28c
    1d14:	str	ip, [sp]
    1d18:	bl	0 <coda_set_error>
    1d1c:	mvn	r0, #0
    1d20:	str	r0, [fp, #-4]
    1d24:	b	1d98 <coda_mem_array_set_element+0x1a4>
    1d28:	ldr	r0, [fp, #-8]
    1d2c:	ldr	r0, [r0, #4]
    1d30:	ldr	r0, [r0, #40]	; 0x28
    1d34:	ldr	r1, [sp, #8]
    1d38:	ldr	r1, [r1, #4]
    1d3c:	cmp	r0, r1
    1d40:	beq	1d78 <coda_mem_array_set_element+0x184>
    1d44:	ldr	r0, [pc, #88]	; 1da4 <coda_mem_array_set_element+0x1b0>
    1d48:	ldr	r1, [fp, #-8]
    1d4c:	ldr	r2, [r1, #16]
    1d50:	movw	r1, #0
    1d54:	movt	r1, #0
    1d58:	movw	r3, #0
    1d5c:	movt	r3, #0
    1d60:	movw	ip, #658	; 0x292
    1d64:	str	ip, [sp]
    1d68:	bl	0 <coda_set_error>
    1d6c:	mvn	r0, #0
    1d70:	str	r0, [fp, #-4]
    1d74:	b	1d98 <coda_mem_array_set_element+0x1a4>
    1d78:	ldr	r0, [sp, #8]
    1d7c:	ldr	r1, [fp, #-8]
    1d80:	ldr	r1, [r1, #20]
    1d84:	ldr	r2, [sp, #12]
    1d88:	add	r1, r1, r2, lsl #2
    1d8c:	str	r0, [r1]
    1d90:	movw	r0, #0
    1d94:	str	r0, [fp, #-4]
    1d98:	ldr	r0, [fp, #-4]
    1d9c:	mov	sp, fp
    1da0:	pop	{fp, pc}
    1da4:	.word	0xfffffe70

00001da8 <coda_mem_array_validate>:
    1da8:	push	{fp, lr}
    1dac:	mov	fp, sp
    1db0:	sub	sp, sp, #16
    1db4:	str	r0, [sp, #8]
    1db8:	ldr	r0, [sp, #8]
    1dbc:	movw	r1, #0
    1dc0:	cmp	r0, r1
    1dc4:	bne	1df0 <coda_mem_array_validate+0x48>
    1dc8:	mvn	r0, #99	; 0x63
    1dcc:	movw	r1, #0
    1dd0:	movt	r1, #0
    1dd4:	movw	r2, #0
    1dd8:	movt	r2, #0
    1ddc:	movw	r3, #729	; 0x2d9
    1de0:	bl	0 <coda_set_error>
    1de4:	mvn	r0, #0
    1de8:	str	r0, [fp, #-4]
    1dec:	b	1ebc <coda_mem_array_validate+0x114>
    1df0:	ldr	r0, [sp, #8]
    1df4:	ldr	r0, [r0, #4]
    1df8:	ldr	r0, [r0, #44]	; 0x2c
    1dfc:	cmp	r0, #0
    1e00:	blt	1e44 <coda_mem_array_validate+0x9c>
    1e04:	ldr	r0, [sp, #8]
    1e08:	ldr	r0, [r0, #16]
    1e0c:	ldr	r1, [sp, #8]
    1e10:	ldr	r1, [r1, #4]
    1e14:	ldr	r1, [r1, #44]	; 0x2c
    1e18:	cmp	r0, r1
    1e1c:	beq	1e44 <coda_mem_array_validate+0x9c>
    1e20:	ldr	r0, [pc, #160]	; 1ec8 <coda_mem_array_validate+0x120>
    1e24:	ldr	r1, [sp, #8]
    1e28:	ldr	r2, [r1, #16]
    1e2c:	ldr	r1, [sp, #8]
    1e30:	ldr	r1, [r1, #4]
    1e34:	ldr	r3, [r1, #44]	; 0x2c
    1e38:	movw	r1, #0
    1e3c:	movt	r1, #0
    1e40:	bl	0 <coda_set_error>
    1e44:	movw	r0, #0
    1e48:	str	r0, [sp, #4]
    1e4c:	ldr	r0, [sp, #4]
    1e50:	ldr	r1, [sp, #8]
    1e54:	ldr	r1, [r1, #16]
    1e58:	cmp	r0, r1
    1e5c:	bge	1eb4 <coda_mem_array_validate+0x10c>
    1e60:	ldr	r0, [sp, #8]
    1e64:	ldr	r0, [r0, #20]
    1e68:	ldr	r1, [sp, #4]
    1e6c:	add	r0, r0, r1, lsl #2
    1e70:	ldr	r0, [r0]
    1e74:	movw	r1, #0
    1e78:	cmp	r0, r1
    1e7c:	bne	1ea0 <coda_mem_array_validate+0xf8>
    1e80:	ldr	r0, [pc, #64]	; 1ec8 <coda_mem_array_validate+0x120>
    1e84:	ldr	r2, [sp, #4]
    1e88:	movw	r1, #0
    1e8c:	movt	r1, #0
    1e90:	bl	0 <coda_set_error>
    1e94:	mvn	r0, #0
    1e98:	str	r0, [fp, #-4]
    1e9c:	b	1ebc <coda_mem_array_validate+0x114>
    1ea0:	b	1ea4 <coda_mem_array_validate+0xfc>
    1ea4:	ldr	r0, [sp, #4]
    1ea8:	add	r0, r0, #1
    1eac:	str	r0, [sp, #4]
    1eb0:	b	1e4c <coda_mem_array_validate+0xa4>
    1eb4:	movw	r0, #0
    1eb8:	str	r0, [fp, #-4]
    1ebc:	ldr	r0, [fp, #-4]
    1ec0:	mov	sp, fp
    1ec4:	pop	{fp, pc}
    1ec8:	.word	0xfffffe70

00001ecc <coda_mem_data_new>:
    1ecc:	push	{fp, lr}
    1ed0:	mov	fp, sp
    1ed4:	sub	sp, sp, #64	; 0x40
    1ed8:	ldr	ip, [fp, #8]
    1edc:	str	r0, [fp, #-8]
    1ee0:	str	r1, [fp, #-12]
    1ee4:	str	r2, [fp, #-16]
    1ee8:	str	r3, [fp, #-20]	; 0xffffffec
    1eec:	ldr	r0, [fp, #-8]
    1ef0:	movw	r1, #0
    1ef4:	cmp	r0, r1
    1ef8:	bne	1f24 <coda_mem_data_new+0x58>
    1efc:	mvn	r0, #99	; 0x63
    1f00:	movw	r1, #0
    1f04:	movt	r1, #0
    1f08:	movw	r2, #0
    1f0c:	movt	r2, #0
    1f10:	movw	r3, #758	; 0x2f6
    1f14:	bl	0 <coda_set_error>
    1f18:	movw	r0, #0
    1f1c:	str	r0, [fp, #-4]
    1f20:	b	2364 <coda_mem_data_new+0x498>
    1f24:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f28:	cmp	r0, #0
    1f2c:	blt	1f34 <coda_mem_data_new+0x68>
    1f30:	b	1f54 <coda_mem_data_new+0x88>
    1f34:	movw	r0, #0
    1f38:	movt	r0, #0
    1f3c:	movw	r1, #0
    1f40:	movt	r1, #0
    1f44:	movw	r2, #761	; 0x2f9
    1f48:	movw	r3, #0
    1f4c:	movt	r3, #0
    1f50:	bl	0 <__assert_fail>
    1f54:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f58:	cmp	r0, #0
    1f5c:	ble	1f98 <coda_mem_data_new+0xcc>
    1f60:	ldr	r0, [fp, #8]
    1f64:	movw	r1, #0
    1f68:	cmp	r0, r1
    1f6c:	bne	1f98 <coda_mem_data_new+0xcc>
    1f70:	mvn	r0, #99	; 0x63
    1f74:	movw	r1, #0
    1f78:	movt	r1, #0
    1f7c:	movw	r2, #0
    1f80:	movt	r2, #0
    1f84:	movw	r3, #764	; 0x2fc
    1f88:	bl	0 <coda_set_error>
    1f8c:	movw	r0, #0
    1f90:	str	r0, [fp, #-4]
    1f94:	b	2364 <coda_mem_data_new+0x498>
    1f98:	ldr	r0, [fp, #-8]
    1f9c:	ldr	r0, [r0, #28]
    1fa0:	cmp	r0, #0
    1fa4:	bmi	2018 <coda_mem_data_new+0x14c>
    1fa8:	b	1fac <coda_mem_data_new+0xe0>
    1fac:	ldr	r0, [fp, #-8]
    1fb0:	ldr	r1, [r0, #24]
    1fb4:	ldr	r0, [r0, #28]
    1fb8:	lsr	r2, r1, #3
    1fbc:	orr	r0, r2, r0, lsl #29
    1fc0:	and	r1, r1, #7
    1fc4:	cmp	r1, #0
    1fc8:	movwne	r1, #1
    1fcc:	tst	r1, #1
    1fd0:	movw	r1, #1
    1fd4:	moveq	r1, #0
    1fd8:	add	r0, r0, r1
    1fdc:	str	r0, [sp, #28]
    1fe0:	ldr	r0, [sp, #28]
    1fe4:	ldr	r1, [fp, #-20]	; 0xffffffec
    1fe8:	cmp	r0, r1
    1fec:	beq	2014 <coda_mem_data_new+0x148>
    1ff0:	ldr	r0, [pc, #888]	; 2370 <coda_mem_data_new+0x4a4>
    1ff4:	ldr	r2, [fp, #-20]	; 0xffffffec
    1ff8:	ldr	r3, [sp, #28]
    1ffc:	movw	r1, #0
    2000:	movt	r1, #0
    2004:	bl	0 <coda_set_error>
    2008:	movw	r0, #0
    200c:	str	r0, [fp, #-4]
    2010:	b	2364 <coda_mem_data_new+0x498>
    2014:	b	2018 <coda_mem_data_new+0x14c>
    2018:	ldr	r0, [fp, #-8]
    201c:	ldr	r0, [r0, #12]
    2020:	cmp	r0, #10
    2024:	bne	2064 <coda_mem_data_new+0x198>
    2028:	ldr	r0, [fp, #-20]	; 0xffffffec
    202c:	cmp	r0, #1
    2030:	beq	2064 <coda_mem_data_new+0x198>
    2034:	ldr	r2, [fp, #-20]	; 0xffffffec
    2038:	mvn	r0, #99	; 0x63
    203c:	movw	r1, #0
    2040:	movt	r1, #0
    2044:	movw	r3, #0
    2048:	movt	r3, #0
    204c:	movw	ip, #782	; 0x30e
    2050:	str	ip, [sp]
    2054:	bl	0 <coda_set_error>
    2058:	movw	r0, #0
    205c:	str	r0, [fp, #-4]
    2060:	b	2364 <coda_mem_data_new+0x498>
    2064:	movw	r0, #32
    2068:	bl	0 <malloc>
    206c:	str	r0, [fp, #-24]	; 0xffffffe8
    2070:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2074:	movw	r1, #0
    2078:	cmp	r0, r1
    207c:	bne	20b0 <coda_mem_data_new+0x1e4>
    2080:	mvn	r0, #0
    2084:	movw	r1, #0
    2088:	movt	r1, #0
    208c:	movw	r2, #32
    2090:	movw	r3, #0
    2094:	movt	r3, #0
    2098:	movw	ip, #790	; 0x316
    209c:	str	ip, [sp]
    20a0:	bl	0 <coda_set_error>
    20a4:	movw	r0, #0
    20a8:	str	r0, [fp, #-4]
    20ac:	b	2364 <coda_mem_data_new+0x498>
    20b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    20b4:	mov	r1, #100	; 0x64
    20b8:	str	r1, [r0]
    20bc:	ldr	r0, [fp, #-8]
    20c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    20c4:	str	r0, [r1, #4]
    20c8:	ldr	r0, [fp, #-8]
    20cc:	ldr	r1, [r0, #4]
    20d0:	add	r1, r1, #1
    20d4:	str	r1, [r0, #4]
    20d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    20dc:	mov	r1, #2
    20e0:	str	r1, [r0, #8]
    20e4:	ldr	r0, [fp, #-12]
    20e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    20ec:	str	r0, [r1, #12]
    20f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    20f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    20f8:	str	r0, [r1, #16]
    20fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2100:	mov	r1, #0
    2104:	str	r1, [r0, #28]
    2108:	str	r1, [r0, #24]
    210c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2110:	cmp	r0, #0
    2114:	ble	2320 <coda_mem_data_new+0x454>
    2118:	ldr	r0, [fp, #-16]
    211c:	movw	r1, #0
    2120:	cmp	r0, r1
    2124:	bne	2158 <coda_mem_data_new+0x28c>
    2128:	mvn	r0, #99	; 0x63
    212c:	movw	r1, #0
    2130:	movt	r1, #0
    2134:	movw	r2, #0
    2138:	movt	r2, #0
    213c:	movw	r3, #805	; 0x325
    2140:	bl	0 <coda_set_error>
    2144:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2148:	bl	0 <coda_mem_type_delete>
    214c:	movw	r0, #0
    2150:	str	r0, [fp, #-4]
    2154:	b	2364 <coda_mem_data_new+0x498>
    2158:	ldr	r0, [fp, #-16]
    215c:	ldr	r1, [r0, #40]	; 0x28
    2160:	ldr	r0, [r0, #44]	; 0x2c
    2164:	orr	r0, r1, r0
    2168:	cmp	r0, #0
    216c:	bne	2188 <coda_mem_data_new+0x2bc>
    2170:	b	2174 <coda_mem_data_new+0x2a8>
    2174:	mov	r0, #0
    2178:	mov	r1, r0
    217c:	str	r1, [sp, #20]
    2180:	str	r0, [sp, #16]
    2184:	b	21c8 <coda_mem_data_new+0x2fc>
    2188:	ldr	r0, [fp, #-16]
    218c:	ldr	r1, [r0, #40]	; 0x28
    2190:	ldr	r0, [r0, #44]	; 0x2c
    2194:	subs	r1, r1, #1
    2198:	sbc	r0, r0, #0
    219c:	asr	r2, r0, #31
    21a0:	adds	r1, r1, r2, lsr #20
    21a4:	adc	r0, r0, #0
    21a8:	asr	r2, r0, #12
    21ac:	lsr	r1, r1, #12
    21b0:	orr	r0, r1, r0, lsl #20
    21b4:	adds	r0, r0, #1
    21b8:	adc	r1, r2, #0
    21bc:	str	r0, [sp, #20]
    21c0:	str	r1, [sp, #16]
    21c4:	b	21c8 <coda_mem_data_new+0x2fc>
    21c8:	ldr	r0, [sp, #16]
    21cc:	ldr	r1, [sp, #20]
    21d0:	str	r1, [fp, #-28]	; 0xffffffe4
    21d4:	ldr	r1, [fp, #-20]	; 0xffffffec
    21d8:	cmp	r1, #0
    21dc:	bne	21f4 <coda_mem_data_new+0x328>
    21e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    21e4:	asr	r1, r0, #31
    21e8:	str	r0, [sp, #12]
    21ec:	str	r1, [sp, #8]
    21f0:	b	2240 <coda_mem_data_new+0x374>
    21f4:	ldr	r0, [fp, #-16]
    21f8:	ldr	r1, [r0, #40]	; 0x28
    21fc:	ldr	r0, [r0, #44]	; 0x2c
    2200:	ldr	r2, [fp, #-20]	; 0xffffffec
    2204:	adds	r1, r1, r2
    2208:	adc	r0, r0, r2, asr #31
    220c:	subs	r1, r1, #1
    2210:	sbc	r0, r0, #0
    2214:	asr	r2, r0, #31
    2218:	adds	r1, r1, r2, lsr #20
    221c:	adc	r0, r0, #0
    2220:	asr	r2, r0, #12
    2224:	lsr	r1, r1, #12
    2228:	orr	r0, r1, r0, lsl #20
    222c:	adds	r0, r0, #1
    2230:	adc	r1, r2, #0
    2234:	str	r0, [sp, #12]
    2238:	str	r1, [sp, #8]
    223c:	b	2240 <coda_mem_data_new+0x374>
    2240:	ldr	r0, [sp, #8]
    2244:	ldr	r1, [sp, #12]
    2248:	str	r1, [sp, #32]
    224c:	ldr	r1, [sp, #32]
    2250:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2254:	cmp	r1, r2
    2258:	ble	22cc <coda_mem_data_new+0x400>
    225c:	ldr	r0, [fp, #-16]
    2260:	ldr	r0, [r0, #48]	; 0x30
    2264:	ldr	r1, [sp, #32]
    2268:	lsl	r1, r1, #12
    226c:	bl	0 <realloc>
    2270:	str	r0, [sp, #24]
    2274:	ldr	r0, [sp, #24]
    2278:	movw	r1, #0
    227c:	cmp	r0, r1
    2280:	bne	22c0 <coda_mem_data_new+0x3f4>
    2284:	ldr	r0, [sp, #32]
    2288:	lsl	r2, r0, #12
    228c:	mvn	r0, #0
    2290:	movw	r1, #0
    2294:	movt	r1, #0
    2298:	movw	r3, #0
    229c:	movt	r3, #0
    22a0:	movw	ip, #821	; 0x335
    22a4:	str	ip, [sp]
    22a8:	bl	0 <coda_set_error>
    22ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    22b0:	bl	0 <coda_mem_type_delete>
    22b4:	movw	r0, #0
    22b8:	str	r0, [fp, #-4]
    22bc:	b	2364 <coda_mem_data_new+0x498>
    22c0:	ldr	r0, [sp, #24]
    22c4:	ldr	r1, [fp, #-16]
    22c8:	str	r0, [r1, #48]	; 0x30
    22cc:	ldr	r0, [fp, #-16]
    22d0:	ldr	r1, [r0, #40]	; 0x28
    22d4:	ldr	r0, [r0, #44]	; 0x2c
    22d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    22dc:	str	r0, [r2, #28]
    22e0:	str	r1, [r2, #24]
    22e4:	ldr	r0, [fp, #-16]
    22e8:	ldr	r1, [r0, #40]	; 0x28
    22ec:	ldr	r0, [r0, #48]	; 0x30
    22f0:	add	r0, r0, r1
    22f4:	ldr	r1, [fp, #8]
    22f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    22fc:	bl	0 <memcpy>
    2300:	ldr	r1, [fp, #-20]	; 0xffffffec
    2304:	ldr	r2, [fp, #-16]
    2308:	ldr	r3, [r2, #40]	; 0x28
    230c:	ldr	ip, [r2, #44]	; 0x2c
    2310:	adds	r3, r3, r1
    2314:	adc	r1, ip, r1, asr #31
    2318:	str	r3, [r2, #40]	; 0x28
    231c:	str	r1, [r2, #44]	; 0x2c
    2320:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2324:	ldr	r0, [r0, #12]
    2328:	movw	r1, #0
    232c:	cmp	r0, r1
    2330:	bne	235c <coda_mem_data_new+0x490>
    2334:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2338:	bl	1728 <create_attributes_record>
    233c:	cmp	r0, #0
    2340:	beq	2358 <coda_mem_data_new+0x48c>
    2344:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2348:	bl	0 <coda_mem_type_delete>
    234c:	movw	r0, #0
    2350:	str	r0, [fp, #-4]
    2354:	b	2364 <coda_mem_data_new+0x498>
    2358:	b	235c <coda_mem_data_new+0x490>
    235c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2360:	str	r0, [fp, #-4]
    2364:	ldr	r0, [fp, #-4]
    2368:	mov	sp, fp
    236c:	pop	{fp, pc}
    2370:	.word	0xfffffed4

00002374 <coda_mem_int8_new>:
    2374:	push	{fp, lr}
    2378:	mov	fp, sp
    237c:	sub	sp, sp, #24
    2380:	str	r0, [fp, #-4]
    2384:	str	r1, [fp, #-8]
    2388:	str	r2, [sp, #12]
    238c:	strb	r3, [sp, #11]
    2390:	ldr	r0, [fp, #-4]
    2394:	ldr	r1, [r0, #24]
    2398:	ldr	r0, [r0, #28]
    239c:	eor	r1, r1, #8
    23a0:	orr	r0, r1, r0
    23a4:	cmp	r0, #0
    23a8:	bne	23b4 <coda_mem_int8_new+0x40>
    23ac:	b	23b0 <coda_mem_int8_new+0x3c>
    23b0:	b	23d4 <coda_mem_int8_new+0x60>
    23b4:	movw	r0, #0
    23b8:	movt	r0, #0
    23bc:	movw	r1, #0
    23c0:	movt	r1, #0
    23c4:	movw	r2, #847	; 0x34f
    23c8:	movw	r3, #0
    23cc:	movt	r3, #0
    23d0:	bl	0 <__assert_fail>
    23d4:	ldr	r0, [fp, #-4]
    23d8:	ldr	r0, [r0, #12]
    23dc:	cmp	r0, #0
    23e0:	bne	23e8 <coda_mem_int8_new+0x74>
    23e4:	b	2408 <coda_mem_int8_new+0x94>
    23e8:	movw	r0, #0
    23ec:	movt	r0, #0
    23f0:	movw	r1, #0
    23f4:	movt	r1, #0
    23f8:	movw	r2, #848	; 0x350
    23fc:	movw	r3, #0
    2400:	movt	r3, #0
    2404:	bl	0 <__assert_fail>
    2408:	ldr	r0, [fp, #-4]
    240c:	ldr	r1, [fp, #-8]
    2410:	ldr	r2, [sp, #12]
    2414:	movw	r3, #1
    2418:	add	ip, sp, #11
    241c:	str	ip, [sp]
    2420:	bl	1ecc <coda_mem_data_new>
    2424:	mov	sp, fp
    2428:	pop	{fp, pc}

0000242c <coda_mem_uint8_new>:
    242c:	push	{fp, lr}
    2430:	mov	fp, sp
    2434:	sub	sp, sp, #24
    2438:	str	r0, [fp, #-4]
    243c:	str	r1, [fp, #-8]
    2440:	str	r2, [sp, #12]
    2444:	strb	r3, [sp, #11]
    2448:	ldr	r0, [fp, #-4]
    244c:	ldr	r1, [r0, #24]
    2450:	ldr	r0, [r0, #28]
    2454:	eor	r1, r1, #8
    2458:	orr	r0, r1, r0
    245c:	cmp	r0, #0
    2460:	bne	246c <coda_mem_uint8_new+0x40>
    2464:	b	2468 <coda_mem_uint8_new+0x3c>
    2468:	b	248c <coda_mem_uint8_new+0x60>
    246c:	movw	r0, #0
    2470:	movt	r0, #0
    2474:	movw	r1, #0
    2478:	movt	r1, #0
    247c:	movw	r2, #855	; 0x357
    2480:	movw	r3, #0
    2484:	movt	r3, #0
    2488:	bl	0 <__assert_fail>
    248c:	ldr	r0, [fp, #-4]
    2490:	ldr	r0, [r0, #12]
    2494:	cmp	r0, #1
    2498:	bne	24a0 <coda_mem_uint8_new+0x74>
    249c:	b	24c0 <coda_mem_uint8_new+0x94>
    24a0:	movw	r0, #0
    24a4:	movt	r0, #0
    24a8:	movw	r1, #0
    24ac:	movt	r1, #0
    24b0:	movw	r2, #856	; 0x358
    24b4:	movw	r3, #0
    24b8:	movt	r3, #0
    24bc:	bl	0 <__assert_fail>
    24c0:	ldr	r0, [fp, #-4]
    24c4:	ldr	r1, [fp, #-8]
    24c8:	ldr	r2, [sp, #12]
    24cc:	movw	r3, #1
    24d0:	add	ip, sp, #11
    24d4:	str	ip, [sp]
    24d8:	bl	1ecc <coda_mem_data_new>
    24dc:	mov	sp, fp
    24e0:	pop	{fp, pc}

000024e4 <coda_mem_int16_new>:
    24e4:	push	{fp, lr}
    24e8:	mov	fp, sp
    24ec:	sub	sp, sp, #24
    24f0:	str	r0, [fp, #-4]
    24f4:	str	r1, [fp, #-8]
    24f8:	str	r2, [sp, #12]
    24fc:	strh	r3, [sp, #10]
    2500:	ldr	r0, [fp, #-4]
    2504:	ldr	r1, [r0, #24]
    2508:	ldr	r0, [r0, #28]
    250c:	eor	r1, r1, #16
    2510:	orr	r0, r1, r0
    2514:	cmp	r0, #0
    2518:	bne	2524 <coda_mem_int16_new+0x40>
    251c:	b	2520 <coda_mem_int16_new+0x3c>
    2520:	b	2544 <coda_mem_int16_new+0x60>
    2524:	movw	r0, #0
    2528:	movt	r0, #0
    252c:	movw	r1, #0
    2530:	movt	r1, #0
    2534:	movw	r2, #863	; 0x35f
    2538:	movw	r3, #0
    253c:	movt	r3, #0
    2540:	bl	0 <__assert_fail>
    2544:	ldr	r0, [fp, #-4]
    2548:	ldr	r0, [r0, #12]
    254c:	cmp	r0, #2
    2550:	bne	2558 <coda_mem_int16_new+0x74>
    2554:	b	2578 <coda_mem_int16_new+0x94>
    2558:	movw	r0, #0
    255c:	movt	r0, #0
    2560:	movw	r1, #0
    2564:	movt	r1, #0
    2568:	movw	r2, #864	; 0x360
    256c:	movw	r3, #0
    2570:	movt	r3, #0
    2574:	bl	0 <__assert_fail>
    2578:	ldr	r0, [fp, #-4]
    257c:	ldr	r1, [fp, #-8]
    2580:	ldr	r2, [sp, #12]
    2584:	add	r3, sp, #10
    2588:	movw	ip, #2
    258c:	str	r3, [sp, #4]
    2590:	mov	r3, ip
    2594:	ldr	ip, [sp, #4]
    2598:	str	ip, [sp]
    259c:	bl	1ecc <coda_mem_data_new>
    25a0:	mov	sp, fp
    25a4:	pop	{fp, pc}

000025a8 <coda_mem_uint16_new>:
    25a8:	push	{fp, lr}
    25ac:	mov	fp, sp
    25b0:	sub	sp, sp, #24
    25b4:	str	r0, [fp, #-4]
    25b8:	str	r1, [fp, #-8]
    25bc:	str	r2, [sp, #12]
    25c0:	strh	r3, [sp, #10]
    25c4:	ldr	r0, [fp, #-4]
    25c8:	ldr	r1, [r0, #24]
    25cc:	ldr	r0, [r0, #28]
    25d0:	eor	r1, r1, #16
    25d4:	orr	r0, r1, r0
    25d8:	cmp	r0, #0
    25dc:	bne	25e8 <coda_mem_uint16_new+0x40>
    25e0:	b	25e4 <coda_mem_uint16_new+0x3c>
    25e4:	b	2608 <coda_mem_uint16_new+0x60>
    25e8:	movw	r0, #0
    25ec:	movt	r0, #0
    25f0:	movw	r1, #0
    25f4:	movt	r1, #0
    25f8:	movw	r2, #871	; 0x367
    25fc:	movw	r3, #0
    2600:	movt	r3, #0
    2604:	bl	0 <__assert_fail>
    2608:	ldr	r0, [fp, #-4]
    260c:	ldr	r0, [r0, #12]
    2610:	cmp	r0, #3
    2614:	bne	261c <coda_mem_uint16_new+0x74>
    2618:	b	263c <coda_mem_uint16_new+0x94>
    261c:	movw	r0, #0
    2620:	movt	r0, #0
    2624:	movw	r1, #0
    2628:	movt	r1, #0
    262c:	movw	r2, #872	; 0x368
    2630:	movw	r3, #0
    2634:	movt	r3, #0
    2638:	bl	0 <__assert_fail>
    263c:	ldr	r0, [fp, #-4]
    2640:	ldr	r1, [fp, #-8]
    2644:	ldr	r2, [sp, #12]
    2648:	add	r3, sp, #10
    264c:	movw	ip, #2
    2650:	str	r3, [sp, #4]
    2654:	mov	r3, ip
    2658:	ldr	ip, [sp, #4]
    265c:	str	ip, [sp]
    2660:	bl	1ecc <coda_mem_data_new>
    2664:	mov	sp, fp
    2668:	pop	{fp, pc}

0000266c <coda_mem_int32_new>:
    266c:	push	{fp, lr}
    2670:	mov	fp, sp
    2674:	sub	sp, sp, #24
    2678:	str	r0, [fp, #-4]
    267c:	str	r1, [fp, #-8]
    2680:	str	r2, [sp, #12]
    2684:	str	r3, [sp, #8]
    2688:	ldr	r0, [fp, #-4]
    268c:	ldr	r1, [r0, #24]
    2690:	ldr	r0, [r0, #28]
    2694:	eor	r1, r1, #32
    2698:	orr	r0, r1, r0
    269c:	cmp	r0, #0
    26a0:	bne	26ac <coda_mem_int32_new+0x40>
    26a4:	b	26a8 <coda_mem_int32_new+0x3c>
    26a8:	b	26cc <coda_mem_int32_new+0x60>
    26ac:	movw	r0, #0
    26b0:	movt	r0, #0
    26b4:	movw	r1, #0
    26b8:	movt	r1, #0
    26bc:	movw	r2, #879	; 0x36f
    26c0:	movw	r3, #0
    26c4:	movt	r3, #0
    26c8:	bl	0 <__assert_fail>
    26cc:	ldr	r0, [fp, #-4]
    26d0:	ldr	r0, [r0, #12]
    26d4:	cmp	r0, #4
    26d8:	bne	26e0 <coda_mem_int32_new+0x74>
    26dc:	b	2700 <coda_mem_int32_new+0x94>
    26e0:	movw	r0, #0
    26e4:	movt	r0, #0
    26e8:	movw	r1, #0
    26ec:	movt	r1, #0
    26f0:	movw	r2, #880	; 0x370
    26f4:	movw	r3, #0
    26f8:	movt	r3, #0
    26fc:	bl	0 <__assert_fail>
    2700:	ldr	r0, [fp, #-4]
    2704:	ldr	r1, [fp, #-8]
    2708:	ldr	r2, [sp, #12]
    270c:	add	r3, sp, #8
    2710:	movw	ip, #4
    2714:	str	r3, [sp, #4]
    2718:	mov	r3, ip
    271c:	ldr	ip, [sp, #4]
    2720:	str	ip, [sp]
    2724:	bl	1ecc <coda_mem_data_new>
    2728:	mov	sp, fp
    272c:	pop	{fp, pc}

00002730 <coda_mem_uint32_new>:
    2730:	push	{fp, lr}
    2734:	mov	fp, sp
    2738:	sub	sp, sp, #24
    273c:	str	r0, [fp, #-4]
    2740:	str	r1, [fp, #-8]
    2744:	str	r2, [sp, #12]
    2748:	str	r3, [sp, #8]
    274c:	ldr	r0, [fp, #-4]
    2750:	ldr	r1, [r0, #24]
    2754:	ldr	r0, [r0, #28]
    2758:	eor	r1, r1, #32
    275c:	orr	r0, r1, r0
    2760:	cmp	r0, #0
    2764:	bne	2770 <coda_mem_uint32_new+0x40>
    2768:	b	276c <coda_mem_uint32_new+0x3c>
    276c:	b	2790 <coda_mem_uint32_new+0x60>
    2770:	movw	r0, #0
    2774:	movt	r0, #0
    2778:	movw	r1, #0
    277c:	movt	r1, #0
    2780:	movw	r2, #887	; 0x377
    2784:	movw	r3, #0
    2788:	movt	r3, #0
    278c:	bl	0 <__assert_fail>
    2790:	ldr	r0, [fp, #-4]
    2794:	ldr	r0, [r0, #12]
    2798:	cmp	r0, #5
    279c:	bne	27a4 <coda_mem_uint32_new+0x74>
    27a0:	b	27c4 <coda_mem_uint32_new+0x94>
    27a4:	movw	r0, #0
    27a8:	movt	r0, #0
    27ac:	movw	r1, #0
    27b0:	movt	r1, #0
    27b4:	movw	r2, #888	; 0x378
    27b8:	movw	r3, #0
    27bc:	movt	r3, #0
    27c0:	bl	0 <__assert_fail>
    27c4:	ldr	r0, [fp, #-4]
    27c8:	ldr	r1, [fp, #-8]
    27cc:	ldr	r2, [sp, #12]
    27d0:	add	r3, sp, #8
    27d4:	movw	ip, #4
    27d8:	str	r3, [sp, #4]
    27dc:	mov	r3, ip
    27e0:	ldr	ip, [sp, #4]
    27e4:	str	ip, [sp]
    27e8:	bl	1ecc <coda_mem_data_new>
    27ec:	mov	sp, fp
    27f0:	pop	{fp, pc}

000027f4 <coda_mem_int64_new>:
    27f4:	push	{fp, lr}
    27f8:	mov	fp, sp
    27fc:	sub	sp, sp, #32
    2800:	ldr	r3, [fp, #12]
    2804:	ldr	ip, [fp, #8]
    2808:	str	r0, [fp, #-4]
    280c:	str	r1, [fp, #-8]
    2810:	str	r2, [fp, #-12]
    2814:	str	r3, [sp, #12]
    2818:	str	ip, [sp, #8]
    281c:	ldr	r0, [fp, #-4]
    2820:	ldr	r1, [r0, #24]
    2824:	ldr	r0, [r0, #28]
    2828:	eor	r1, r1, #64	; 0x40
    282c:	orr	r0, r1, r0
    2830:	cmp	r0, #0
    2834:	bne	2840 <coda_mem_int64_new+0x4c>
    2838:	b	283c <coda_mem_int64_new+0x48>
    283c:	b	2860 <coda_mem_int64_new+0x6c>
    2840:	movw	r0, #0
    2844:	movt	r0, #0
    2848:	movw	r1, #0
    284c:	movt	r1, #0
    2850:	movw	r2, #895	; 0x37f
    2854:	movw	r3, #0
    2858:	movt	r3, #0
    285c:	bl	0 <__assert_fail>
    2860:	ldr	r0, [fp, #-4]
    2864:	ldr	r0, [r0, #12]
    2868:	cmp	r0, #6
    286c:	bne	2874 <coda_mem_int64_new+0x80>
    2870:	b	2894 <coda_mem_int64_new+0xa0>
    2874:	movw	r0, #0
    2878:	movt	r0, #0
    287c:	movw	r1, #0
    2880:	movt	r1, #0
    2884:	movw	r2, #896	; 0x380
    2888:	movw	r3, #0
    288c:	movt	r3, #0
    2890:	bl	0 <__assert_fail>
    2894:	ldr	r0, [fp, #-4]
    2898:	ldr	r1, [fp, #-8]
    289c:	ldr	r2, [fp, #-12]
    28a0:	add	r3, sp, #8
    28a4:	movw	ip, #8
    28a8:	str	r3, [sp, #4]
    28ac:	mov	r3, ip
    28b0:	ldr	ip, [sp, #4]
    28b4:	str	ip, [sp]
    28b8:	bl	1ecc <coda_mem_data_new>
    28bc:	mov	sp, fp
    28c0:	pop	{fp, pc}

000028c4 <coda_mem_uint64_new>:
    28c4:	push	{fp, lr}
    28c8:	mov	fp, sp
    28cc:	sub	sp, sp, #32
    28d0:	ldr	r3, [fp, #12]
    28d4:	ldr	ip, [fp, #8]
    28d8:	str	r0, [fp, #-4]
    28dc:	str	r1, [fp, #-8]
    28e0:	str	r2, [fp, #-12]
    28e4:	str	r3, [sp, #12]
    28e8:	str	ip, [sp, #8]
    28ec:	ldr	r0, [fp, #-4]
    28f0:	ldr	r1, [r0, #24]
    28f4:	ldr	r0, [r0, #28]
    28f8:	eor	r1, r1, #64	; 0x40
    28fc:	orr	r0, r1, r0
    2900:	cmp	r0, #0
    2904:	bne	2910 <coda_mem_uint64_new+0x4c>
    2908:	b	290c <coda_mem_uint64_new+0x48>
    290c:	b	2930 <coda_mem_uint64_new+0x6c>
    2910:	movw	r0, #0
    2914:	movt	r0, #0
    2918:	movw	r1, #0
    291c:	movt	r1, #0
    2920:	movw	r2, #903	; 0x387
    2924:	movw	r3, #0
    2928:	movt	r3, #0
    292c:	bl	0 <__assert_fail>
    2930:	ldr	r0, [fp, #-4]
    2934:	ldr	r0, [r0, #12]
    2938:	cmp	r0, #7
    293c:	bne	2944 <coda_mem_uint64_new+0x80>
    2940:	b	2964 <coda_mem_uint64_new+0xa0>
    2944:	movw	r0, #0
    2948:	movt	r0, #0
    294c:	movw	r1, #0
    2950:	movt	r1, #0
    2954:	movw	r2, #904	; 0x388
    2958:	movw	r3, #0
    295c:	movt	r3, #0
    2960:	bl	0 <__assert_fail>
    2964:	ldr	r0, [fp, #-4]
    2968:	ldr	r1, [fp, #-8]
    296c:	ldr	r2, [fp, #-12]
    2970:	add	r3, sp, #8
    2974:	movw	ip, #8
    2978:	str	r3, [sp, #4]
    297c:	mov	r3, ip
    2980:	ldr	ip, [sp, #4]
    2984:	str	ip, [sp]
    2988:	bl	1ecc <coda_mem_data_new>
    298c:	mov	sp, fp
    2990:	pop	{fp, pc}

00002994 <coda_mem_float_new>:
    2994:	push	{fp, lr}
    2998:	mov	fp, sp
    299c:	sub	sp, sp, #24
    29a0:	str	r0, [fp, #-4]
    29a4:	str	r1, [fp, #-8]
    29a8:	str	r2, [sp, #12]
    29ac:	vstr	s0, [sp, #8]
    29b0:	ldr	r0, [fp, #-4]
    29b4:	ldr	r1, [r0, #24]
    29b8:	ldr	r0, [r0, #28]
    29bc:	eor	r1, r1, #32
    29c0:	orr	r0, r1, r0
    29c4:	cmp	r0, #0
    29c8:	bne	29d4 <coda_mem_float_new+0x40>
    29cc:	b	29d0 <coda_mem_float_new+0x3c>
    29d0:	b	29f4 <coda_mem_float_new+0x60>
    29d4:	movw	r0, #0
    29d8:	movt	r0, #0
    29dc:	movw	r1, #0
    29e0:	movt	r1, #0
    29e4:	movw	r2, #911	; 0x38f
    29e8:	movw	r3, #0
    29ec:	movt	r3, #0
    29f0:	bl	0 <__assert_fail>
    29f4:	ldr	r0, [fp, #-4]
    29f8:	ldr	r0, [r0, #12]
    29fc:	cmp	r0, #8
    2a00:	bne	2a08 <coda_mem_float_new+0x74>
    2a04:	b	2a28 <coda_mem_float_new+0x94>
    2a08:	movw	r0, #0
    2a0c:	movt	r0, #0
    2a10:	movw	r1, #0
    2a14:	movt	r1, #0
    2a18:	movw	r2, #912	; 0x390
    2a1c:	movw	r3, #0
    2a20:	movt	r3, #0
    2a24:	bl	0 <__assert_fail>
    2a28:	ldr	r0, [fp, #-4]
    2a2c:	ldr	r1, [fp, #-8]
    2a30:	ldr	r2, [sp, #12]
    2a34:	add	r3, sp, #8
    2a38:	movw	ip, #4
    2a3c:	str	r3, [sp, #4]
    2a40:	mov	r3, ip
    2a44:	ldr	ip, [sp, #4]
    2a48:	str	ip, [sp]
    2a4c:	bl	1ecc <coda_mem_data_new>
    2a50:	mov	sp, fp
    2a54:	pop	{fp, pc}

00002a58 <coda_mem_double_new>:
    2a58:	push	{fp, lr}
    2a5c:	mov	fp, sp
    2a60:	sub	sp, sp, #32
    2a64:	str	r0, [fp, #-4]
    2a68:	str	r1, [fp, #-8]
    2a6c:	str	r2, [fp, #-12]
    2a70:	vstr	d0, [sp, #8]
    2a74:	ldr	r0, [fp, #-4]
    2a78:	ldr	r1, [r0, #24]
    2a7c:	ldr	r0, [r0, #28]
    2a80:	eor	r1, r1, #64	; 0x40
    2a84:	orr	r0, r1, r0
    2a88:	cmp	r0, #0
    2a8c:	bne	2a98 <coda_mem_double_new+0x40>
    2a90:	b	2a94 <coda_mem_double_new+0x3c>
    2a94:	b	2ab8 <coda_mem_double_new+0x60>
    2a98:	movw	r0, #0
    2a9c:	movt	r0, #0
    2aa0:	movw	r1, #0
    2aa4:	movt	r1, #0
    2aa8:	movw	r2, #919	; 0x397
    2aac:	movw	r3, #0
    2ab0:	movt	r3, #0
    2ab4:	bl	0 <__assert_fail>
    2ab8:	ldr	r0, [fp, #-4]
    2abc:	ldr	r0, [r0, #12]
    2ac0:	cmp	r0, #9
    2ac4:	bne	2acc <coda_mem_double_new+0x74>
    2ac8:	b	2aec <coda_mem_double_new+0x94>
    2acc:	movw	r0, #0
    2ad0:	movt	r0, #0
    2ad4:	movw	r1, #0
    2ad8:	movt	r1, #0
    2adc:	movw	r2, #920	; 0x398
    2ae0:	movw	r3, #0
    2ae4:	movt	r3, #0
    2ae8:	bl	0 <__assert_fail>
    2aec:	ldr	r0, [fp, #-4]
    2af0:	ldr	r1, [fp, #-8]
    2af4:	ldr	r2, [fp, #-12]
    2af8:	add	r3, sp, #8
    2afc:	movw	ip, #8
    2b00:	str	r3, [sp, #4]
    2b04:	mov	r3, ip
    2b08:	ldr	ip, [sp, #4]
    2b0c:	str	ip, [sp]
    2b10:	bl	1ecc <coda_mem_data_new>
    2b14:	mov	sp, fp
    2b18:	pop	{fp, pc}

00002b1c <coda_mem_char_new>:
    2b1c:	push	{fp, lr}
    2b20:	mov	fp, sp
    2b24:	sub	sp, sp, #24
    2b28:	str	r0, [fp, #-4]
    2b2c:	str	r1, [fp, #-8]
    2b30:	str	r2, [sp, #12]
    2b34:	strb	r3, [sp, #11]
    2b38:	ldr	r0, [fp, #-4]
    2b3c:	ldr	r1, [r0, #24]
    2b40:	ldr	r0, [r0, #28]
    2b44:	eor	r1, r1, #8
    2b48:	orr	r0, r1, r0
    2b4c:	cmp	r0, #0
    2b50:	bne	2b5c <coda_mem_char_new+0x40>
    2b54:	b	2b58 <coda_mem_char_new+0x3c>
    2b58:	b	2b7c <coda_mem_char_new+0x60>
    2b5c:	movw	r0, #0
    2b60:	movt	r0, #0
    2b64:	movw	r1, #0
    2b68:	movt	r1, #0
    2b6c:	movw	r2, #927	; 0x39f
    2b70:	movw	r3, #0
    2b74:	movt	r3, #0
    2b78:	bl	0 <__assert_fail>
    2b7c:	ldr	r0, [fp, #-4]
    2b80:	ldr	r0, [r0, #12]
    2b84:	cmp	r0, #10
    2b88:	bne	2b90 <coda_mem_char_new+0x74>
    2b8c:	b	2bb0 <coda_mem_char_new+0x94>
    2b90:	movw	r0, #0
    2b94:	movt	r0, #0
    2b98:	movw	r1, #0
    2b9c:	movt	r1, #0
    2ba0:	movw	r2, #928	; 0x3a0
    2ba4:	movw	r3, #0
    2ba8:	movt	r3, #0
    2bac:	bl	0 <__assert_fail>
    2bb0:	ldr	r0, [fp, #-4]
    2bb4:	ldr	r1, [fp, #-8]
    2bb8:	ldr	r2, [sp, #12]
    2bbc:	movw	r3, #1
    2bc0:	add	ip, sp, #11
    2bc4:	str	ip, [sp]
    2bc8:	bl	1ecc <coda_mem_data_new>
    2bcc:	mov	sp, fp
    2bd0:	pop	{fp, pc}

00002bd4 <coda_mem_raw_new>:
    2bd4:	push	{fp, lr}
    2bd8:	mov	fp, sp
    2bdc:	sub	sp, sp, #24
    2be0:	ldr	ip, [fp, #8]
    2be4:	str	r0, [fp, #-4]
    2be8:	str	r1, [fp, #-8]
    2bec:	str	r2, [sp, #12]
    2bf0:	str	r3, [sp, #8]
    2bf4:	ldr	r0, [fp, #-4]
    2bf8:	ldr	r0, [r0, #8]
    2bfc:	cmp	r0, #5
    2c00:	bne	2c08 <coda_mem_raw_new+0x34>
    2c04:	b	2c28 <coda_mem_raw_new+0x54>
    2c08:	movw	r0, #0
    2c0c:	movt	r0, #0
    2c10:	movw	r1, #0
    2c14:	movt	r1, #0
    2c18:	movw	r2, #943	; 0x3af
    2c1c:	movw	r3, #0
    2c20:	movt	r3, #0
    2c24:	bl	0 <__assert_fail>
    2c28:	ldr	r0, [fp, #-4]
    2c2c:	ldr	r1, [fp, #-8]
    2c30:	ldr	r2, [sp, #12]
    2c34:	ldr	r3, [sp, #8]
    2c38:	ldr	ip, [fp, #8]
    2c3c:	str	ip, [sp]
    2c40:	bl	1ecc <coda_mem_data_new>
    2c44:	mov	sp, fp
    2c48:	pop	{fp, pc}

00002c4c <coda_mem_time_new>:
    2c4c:	push	{fp, lr}
    2c50:	mov	fp, sp
    2c54:	sub	sp, sp, #24
    2c58:	str	r0, [fp, #-8]
    2c5c:	str	r1, [sp, #12]
    2c60:	str	r2, [sp, #8]
    2c64:	ldr	r0, [fp, #-8]
    2c68:	movw	r1, #0
    2c6c:	cmp	r0, r1
    2c70:	bne	2c9c <coda_mem_time_new+0x50>
    2c74:	mvn	r0, #99	; 0x63
    2c78:	movw	r1, #0
    2c7c:	movt	r1, #0
    2c80:	movw	r2, #0
    2c84:	movt	r2, #0
    2c88:	movw	r3, #954	; 0x3ba
    2c8c:	bl	0 <coda_set_error>
    2c90:	movw	r0, #0
    2c94:	str	r0, [fp, #-4]
    2c98:	b	2e28 <coda_mem_time_new+0x1dc>
    2c9c:	ldr	r0, [fp, #-8]
    2ca0:	ldr	r0, [r0, #8]
    2ca4:	cmp	r0, #6
    2ca8:	beq	2cd4 <coda_mem_time_new+0x88>
    2cac:	mvn	r0, #99	; 0x63
    2cb0:	movw	r1, #0
    2cb4:	movt	r1, #0
    2cb8:	movw	r2, #0
    2cbc:	movt	r2, #0
    2cc0:	movw	r3, #959	; 0x3bf
    2cc4:	bl	0 <coda_set_error>
    2cc8:	movw	r0, #0
    2ccc:	str	r0, [fp, #-4]
    2cd0:	b	2e28 <coda_mem_time_new+0x1dc>
    2cd4:	ldr	r0, [fp, #-8]
    2cd8:	ldr	r0, [r0, #40]	; 0x28
    2cdc:	cmp	r0, #2
    2ce0:	beq	2d0c <coda_mem_time_new+0xc0>
    2ce4:	mvn	r0, #99	; 0x63
    2ce8:	movw	r1, #0
    2cec:	movt	r1, #0
    2cf0:	movw	r2, #0
    2cf4:	movt	r2, #0
    2cf8:	movw	r3, #964	; 0x3c4
    2cfc:	bl	0 <coda_set_error>
    2d00:	movw	r0, #0
    2d04:	str	r0, [fp, #-4]
    2d08:	b	2e28 <coda_mem_time_new+0x1dc>
    2d0c:	ldr	r0, [fp, #-8]
    2d10:	ldr	r0, [r0, #44]	; 0x2c
    2d14:	ldr	r1, [sp, #8]
    2d18:	ldr	r1, [r1, #4]
    2d1c:	cmp	r0, r1
    2d20:	beq	2d4c <coda_mem_time_new+0x100>
    2d24:	mvn	r0, #99	; 0x63
    2d28:	movw	r1, #0
    2d2c:	movt	r1, #0
    2d30:	movw	r2, #0
    2d34:	movt	r2, #0
    2d38:	movw	r3, #970	; 0x3ca
    2d3c:	bl	0 <coda_set_error>
    2d40:	movw	r0, #0
    2d44:	str	r0, [fp, #-4]
    2d48:	b	2e28 <coda_mem_time_new+0x1dc>
    2d4c:	movw	r0, #20
    2d50:	bl	0 <malloc>
    2d54:	str	r0, [sp, #4]
    2d58:	ldr	r0, [sp, #4]
    2d5c:	movw	r1, #0
    2d60:	cmp	r0, r1
    2d64:	bne	2d98 <coda_mem_time_new+0x14c>
    2d68:	mvn	r0, #0
    2d6c:	movw	r1, #0
    2d70:	movt	r1, #0
    2d74:	movw	r2, #20
    2d78:	movw	r3, #0
    2d7c:	movt	r3, #0
    2d80:	movw	ip, #978	; 0x3d2
    2d84:	str	ip, [sp]
    2d88:	bl	0 <coda_set_error>
    2d8c:	movw	r0, #0
    2d90:	str	r0, [fp, #-4]
    2d94:	b	2e28 <coda_mem_time_new+0x1dc>
    2d98:	ldr	r0, [sp, #4]
    2d9c:	movw	r1, #100	; 0x64
    2da0:	str	r1, [r0]
    2da4:	ldr	r0, [fp, #-8]
    2da8:	ldr	r1, [sp, #4]
    2dac:	str	r0, [r1, #4]
    2db0:	ldr	r0, [fp, #-8]
    2db4:	ldr	r1, [r0, #4]
    2db8:	add	r1, r1, #1
    2dbc:	str	r1, [r0, #4]
    2dc0:	ldr	r0, [sp, #4]
    2dc4:	movw	r1, #3
    2dc8:	str	r1, [r0, #8]
    2dcc:	ldr	r0, [sp, #12]
    2dd0:	ldr	r1, [sp, #4]
    2dd4:	str	r0, [r1, #12]
    2dd8:	ldr	r0, [sp, #8]
    2ddc:	ldr	r1, [sp, #4]
    2de0:	str	r0, [r1, #16]
    2de4:	ldr	r0, [sp, #4]
    2de8:	ldr	r0, [r0, #12]
    2dec:	movw	r1, #0
    2df0:	cmp	r0, r1
    2df4:	bne	2e20 <coda_mem_time_new+0x1d4>
    2df8:	ldr	r0, [sp, #4]
    2dfc:	bl	1728 <create_attributes_record>
    2e00:	cmp	r0, #0
    2e04:	beq	2e1c <coda_mem_time_new+0x1d0>
    2e08:	ldr	r0, [sp, #4]
    2e0c:	bl	0 <coda_mem_type_delete>
    2e10:	movw	r0, #0
    2e14:	str	r0, [fp, #-4]
    2e18:	b	2e28 <coda_mem_time_new+0x1dc>
    2e1c:	b	2e20 <coda_mem_time_new+0x1d4>
    2e20:	ldr	r0, [sp, #4]
    2e24:	str	r0, [fp, #-4]
    2e28:	ldr	r0, [fp, #-4]
    2e2c:	mov	sp, fp
    2e30:	pop	{fp, pc}

00002e34 <coda_mem_no_data_new>:
    2e34:	push	{fp, lr}
    2e38:	mov	fp, sp
    2e3c:	sub	sp, sp, #24
    2e40:	str	r0, [fp, #-8]
    2e44:	movw	r0, #20
    2e48:	bl	0 <malloc>
    2e4c:	str	r0, [sp, #12]
    2e50:	ldr	r0, [sp, #12]
    2e54:	movw	r1, #0
    2e58:	cmp	r0, r1
    2e5c:	bne	2e90 <coda_mem_no_data_new+0x5c>
    2e60:	mvn	r0, #0
    2e64:	movw	r1, #0
    2e68:	movt	r1, #0
    2e6c:	movw	r2, #20
    2e70:	movw	r3, #0
    2e74:	movt	r3, #0
    2e78:	movw	ip, #1009	; 0x3f1
    2e7c:	str	ip, [sp]
    2e80:	bl	0 <coda_set_error>
    2e84:	movw	r0, #0
    2e88:	str	r0, [fp, #-4]
    2e8c:	b	2f9c <coda_mem_no_data_new+0x168>
    2e90:	ldr	r0, [sp, #12]
    2e94:	movw	r1, #100	; 0x64
    2e98:	str	r1, [r0]
    2e9c:	ldr	r0, [sp, #12]
    2ea0:	movw	r1, #0
    2ea4:	str	r1, [r0, #4]
    2ea8:	ldr	r0, [sp, #12]
    2eac:	movw	r2, #3
    2eb0:	str	r2, [r0, #8]
    2eb4:	ldr	r0, [sp, #12]
    2eb8:	str	r1, [r0, #12]
    2ebc:	ldr	r0, [sp, #12]
    2ec0:	str	r1, [r0, #16]
    2ec4:	ldr	r0, [fp, #-8]
    2ec8:	bl	0 <coda_type_no_data_singleton>
    2ecc:	ldr	r1, [sp, #12]
    2ed0:	str	r0, [r1, #4]
    2ed4:	ldr	r0, [sp, #12]
    2ed8:	ldr	r0, [r0, #4]
    2edc:	movw	r1, #0
    2ee0:	cmp	r0, r1
    2ee4:	bne	2efc <coda_mem_no_data_new+0xc8>
    2ee8:	ldr	r0, [sp, #12]
    2eec:	bl	0 <coda_mem_type_delete>
    2ef0:	movw	r0, #0
    2ef4:	str	r0, [fp, #-4]
    2ef8:	b	2f9c <coda_mem_no_data_new+0x168>
    2efc:	ldr	r0, [sp, #12]
    2f00:	ldr	r0, [r0, #4]
    2f04:	ldr	r1, [r0, #4]
    2f08:	add	r1, r1, #1
    2f0c:	str	r1, [r0, #4]
    2f10:	ldr	r0, [sp, #12]
    2f14:	ldr	r0, [r0, #4]
    2f18:	ldr	r0, [r0, #44]	; 0x2c
    2f1c:	str	r0, [sp, #8]
    2f20:	ldr	r0, [sp, #8]
    2f24:	movw	r1, #0
    2f28:	str	r1, [sp, #4]
    2f2c:	ldr	r2, [sp, #4]
    2f30:	ldr	r3, [sp, #4]
    2f34:	ldr	ip, [sp, #4]
    2f38:	str	ip, [sp]
    2f3c:	bl	2bd4 <coda_mem_raw_new>
    2f40:	ldr	r1, [sp, #12]
    2f44:	str	r0, [r1, #16]
    2f48:	ldr	r0, [sp, #12]
    2f4c:	ldr	r0, [r0, #16]
    2f50:	movw	r1, #0
    2f54:	cmp	r0, r1
    2f58:	bne	2f70 <coda_mem_no_data_new+0x13c>
    2f5c:	ldr	r0, [sp, #12]
    2f60:	bl	0 <coda_mem_type_delete>
    2f64:	movw	r0, #0
    2f68:	str	r0, [fp, #-4]
    2f6c:	b	2f9c <coda_mem_no_data_new+0x168>
    2f70:	ldr	r0, [sp, #12]
    2f74:	bl	1728 <create_attributes_record>
    2f78:	cmp	r0, #0
    2f7c:	beq	2f94 <coda_mem_no_data_new+0x160>
    2f80:	ldr	r0, [sp, #12]
    2f84:	bl	0 <coda_mem_type_delete>
    2f88:	movw	r0, #0
    2f8c:	str	r0, [fp, #-4]
    2f90:	b	2f9c <coda_mem_no_data_new+0x168>
    2f94:	ldr	r0, [sp, #12]
    2f98:	str	r0, [fp, #-4]
    2f9c:	ldr	r0, [fp, #-4]
    2fa0:	mov	sp, fp
    2fa4:	pop	{fp, pc}
