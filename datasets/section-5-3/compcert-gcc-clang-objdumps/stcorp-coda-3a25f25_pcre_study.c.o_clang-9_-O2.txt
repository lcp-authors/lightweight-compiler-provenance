
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/pcre/pcre_study.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_pcre_study>:
       0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
       4:	add	fp, sp, #24
       8:	sub	sp, sp, #200	; 0xc8
       c:	mov	r7, #0
      10:	mov	r4, r2
      14:	cmp	r0, #0
      18:	str	r7, [fp, #-28]	; 0xffffffe4
      1c:	str	r7, [r2]
      20:	beq	58 <coda_pcre_study+0x58>
      24:	mov	r6, r0
      28:	ldr	r0, [r0]
      2c:	mov	r5, r1
      30:	movw	r1, #21061	; 0x5245
      34:	movt	r1, #20547	; 0x5043
      38:	cmp	r0, r1
      3c:	bne	58 <coda_pcre_study+0x58>
      40:	ldr	r0, [r6, #12]
      44:	tst	r0, #1
      48:	bne	68 <coda_pcre_study+0x68>
      4c:	movw	r0, #0
      50:	movt	r0, #0
      54:	b	16c <coda_pcre_study+0x16c>
      58:	movw	r0, #0
      5c:	movt	r0, #0
      60:	str	r0, [r4]
      64:	b	174 <coda_pcre_study+0x174>
      68:	cmp	r5, #16
      6c:	bcc	7c <coda_pcre_study+0x7c>
      70:	movw	r0, #0
      74:	movt	r0, #0
      78:	b	16c <coda_pcre_study+0x16c>
      7c:	ldrh	r1, [r6, #34]	; 0x22
      80:	ldrh	r2, [r6, #38]	; 0x26
      84:	ldrh	r3, [r6, #36]	; 0x24
      88:	and	r0, r0, #272	; 0x110
      8c:	mov	r8, #0
      90:	mov	r9, #0
      94:	add	r1, r6, r1
      98:	mla	r7, r3, r2, r1
      9c:	ldr	r3, [r6, #8]
      a0:	and	r1, r3, #16
      a4:	orrs	r0, r1, r0
      a8:	bne	128 <coda_pcre_study+0x128>
      ac:	ldr	r0, [r6, #48]	; 0x30
      b0:	cmp	r0, #0
      b4:	str	r0, [fp, #-68]	; 0xffffffbc
      b8:	bne	d4 <coda_pcre_study+0xd4>
      bc:	sub	r3, fp, #68	; 0x44
      c0:	mov	r0, r6
      c4:	mov	r1, #0
      c8:	mov	r2, #11
      cc:	bl	0 <coda_pcre_fullinfo>
      d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
      d4:	vmov.i32	q8, #0	; 0x00000000
      d8:	sub	r1, fp, #64	; 0x40
      dc:	str	r0, [sp, #12]
      e0:	mov	r2, r1
      e4:	vst1.64	{d16-d17}, [r2]!
      e8:	vst1.64	{d16-d17}, [r2]
      ec:	add	r2, r0, #832	; 0x340
      f0:	str	r2, [sp, #24]
      f4:	add	r2, r0, #512	; 0x200
      f8:	add	r0, r0, #256	; 0x100
      fc:	str	r2, [sp, #20]
     100:	str	r0, [sp, #16]
     104:	add	r2, sp, #12
     108:	mov	r0, r7
     10c:	bl	248 <set_start_bits>
     110:	cmp	r0, #3
     114:	beq	164 <coda_pcre_study+0x164>
     118:	ldr	r3, [r6, #8]
     11c:	sub	r0, r0, #1
     120:	clz	r0, r0
     124:	lsr	r9, r0, #5
     128:	sub	r0, fp, #28
     12c:	mov	r1, r7
     130:	mov	r2, r7
     134:	str	r8, [sp]
     138:	str	r0, [sp, #4]
     13c:	mov	r0, r6
     140:	bl	cfc <find_minlength>
     144:	cmn	r0, #3
     148:	beq	164 <coda_pcre_study+0x164>
     14c:	mov	r6, r0
     150:	cmn	r0, #2
     154:	bne	180 <coda_pcre_study+0x180>
     158:	movw	r0, #0
     15c:	movt	r0, #0
     160:	b	16c <coda_pcre_study+0x16c>
     164:	movw	r0, #0
     168:	movt	r0, #0
     16c:	str	r0, [r4]
     170:	mov	r7, #0
     174:	mov	r0, r7
     178:	sub	sp, fp, #24
     17c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     180:	tst	r5, #8
     184:	mov	r7, #0
     188:	cmpeq	r9, #0
     18c:	beq	1f8 <coda_pcre_study+0x1f8>
     190:	movw	r0, #0
     194:	movt	r0, #0
     198:	ldr	r1, [r0]
     19c:	mov	r0, #76	; 0x4c
     1a0:	blx	r1
     1a4:	cmp	r0, #0
     1a8:	beq	204 <coda_pcre_study+0x204>
     1ac:	mov	r1, #0
     1b0:	mov	r2, #44	; 0x2c
     1b4:	mov	r3, r0
     1b8:	cmp	r9, #0
     1bc:	str	r1, [r0, #36]	; 0x24
     1c0:	mov	r1, #1
     1c4:	str	r2, [r3, #32]!
     1c8:	stm	r0, {r1, r3}
     1cc:	beq	214 <coda_pcre_study+0x214>
     1d0:	str	r1, [r0, #36]	; 0x24
     1d4:	sub	r1, fp, #64	; 0x40
     1d8:	add	r2, r0, #40	; 0x28
     1dc:	vld1.64	{d16-d17}, [r1]!
     1e0:	vld1.64	{d18-d19}, [r1]
     1e4:	add	r1, r0, #56	; 0x38
     1e8:	vst1.32	{d16-d17}, [r2]
     1ec:	vst1.32	{d18-d19}, [r1]
     1f0:	mov	r1, #3
     1f4:	b	22c <coda_pcre_study+0x22c>
     1f8:	cmp	r6, #1
     1fc:	blt	174 <coda_pcre_study+0x174>
     200:	b	190 <coda_pcre_study+0x190>
     204:	movw	r0, #0
     208:	movt	r0, #0
     20c:	str	r0, [r4]
     210:	b	174 <coda_pcre_study+0x174>
     214:	vmov.i32	q8, #0	; 0x00000000
     218:	add	r1, r0, #56	; 0x38
     21c:	vst1.32	{d16-d17}, [r1]
     220:	add	r1, r0, #40	; 0x28
     224:	vst1.32	{d16-d17}, [r1]
     228:	mov	r1, #2
     22c:	cmp	r6, #1
     230:	mov	r7, r0
     234:	movlt	r1, #0
     238:	strlt	r1, [r0, #72]	; 0x48
     23c:	strge	r6, [r0, #72]	; 0x48
     240:	strge	r1, [r0, #36]	; 0x24
     244:	b	174 <coda_pcre_study+0x174>

00000248 <set_start_bits>:
     248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     24c:	add	fp, sp, #28
     250:	sub	sp, sp, #20
     254:	mov	r8, r0
     258:	mov	r4, r2
     25c:	add	r0, r1, #16
     260:	mov	r9, r1
     264:	add	sl, r1, #1
     268:	mov	r5, #1
     26c:	ldrb	r2, [r8]
     270:	str	r0, [sp, #8]
     274:	add	r0, r1, #32
     278:	str	r0, [sp, #16]
     27c:	add	r0, r1, #31
     280:	mov	r1, #1
     284:	str	r0, [sp, #4]
     288:	mvn	r0, #132	; 0x84
     28c:	add	r7, r8, #3
     290:	str	r1, [sp, #12]
     294:	uxtab	r0, r0, r2
     298:	cmp	r0, #6
     29c:	bhi	2b4 <set_start_bits+0x6c>
     2a0:	mov	r1, #99	; 0x63
     2a4:	tst	r1, r5, lsl r0
     2a8:	addne	r7, r8, #5
     2ac:	b	2b4 <set_start_bits+0x6c>
     2b0:	add	r7, r7, #2
     2b4:	mov	r2, r7
     2b8:	mov	r0, #3
     2bc:	ldrb	r3, [r2], #1
     2c0:	cmp	r3, #161	; 0xa1
     2c4:	bhi	cf4 <set_start_bits+0xaac>
     2c8:	add	r6, pc, #4
     2cc:	mov	r1, #2
     2d0:	ldr	pc, [r6, r3, lsl #2]
     2d4:	.word	0x00000ce4
     2d8:	.word	0x00000ce4
     2dc:	.word	0x00000ce4
     2e0:	.word	0x00000ce4
     2e4:	.word	0x00000758
     2e8:	.word	0x00000758
     2ec:	.word	0x00000a3c
     2f0:	.word	0x00000a6c
     2f4:	.word	0x00000ab4
     2f8:	.word	0x00000b00
     2fc:	.word	0x00000b44
     300:	.word	0x00000b74
     304:	.word	0x00000ce4
     308:	.word	0x00000ce4
     30c:	.word	0x00000ce4
     310:	.word	0x00000ce4
     314:	.word	0x00000bbc
     318:	.word	0x00000a14
     31c:	.word	0x00000ce4
     320:	.word	0x00000c34
     324:	.word	0x00000ce4
     328:	.word	0x00000a14
     32c:	.word	0x00000ce4
     330:	.word	0x00000ce4
     334:	.word	0x00000ce4
     338:	.word	0x00000ce4
     33c:	.word	0x00000ce4
     340:	.word	0x00000ce4
     344:	.word	0x00000ce4
     348:	.word	0x00000c60
     34c:	.word	0x00000c7c
     350:	.word	0x00000ce4
     354:	.word	0x00000ce4
     358:	.word	0x000005c4
     35c:	.word	0x000005c4
     360:	.word	0x00000c60
     364:	.word	0x00000c60
     368:	.word	0x000005c4
     36c:	.word	0x000005c4
     370:	.word	0x00000628
     374:	.word	0x00000628
     378:	.word	0x00000c5c
     37c:	.word	0x000005c4
     380:	.word	0x00000c60
     384:	.word	0x000005c4
     388:	.word	0x00000628
     38c:	.word	0x000005e4
     390:	.word	0x000005e4
     394:	.word	0x00000c7c
     398:	.word	0x00000c7c
     39c:	.word	0x000005e4
     3a0:	.word	0x000005e4
     3a4:	.word	0x00000648
     3a8:	.word	0x00000648
     3ac:	.word	0x00000c78
     3b0:	.word	0x000005e4
     3b4:	.word	0x00000c7c
     3b8:	.word	0x000005e4
     3bc:	.word	0x00000648
     3c0:	.word	0x00000ce4
     3c4:	.word	0x00000ce4
     3c8:	.word	0x00000ce4
     3cc:	.word	0x00000ce4
     3d0:	.word	0x00000ce4
     3d4:	.word	0x00000ce4
     3d8:	.word	0x00000ce4
     3dc:	.word	0x00000ce4
     3e0:	.word	0x00000ce4
     3e4:	.word	0x00000ce4
     3e8:	.word	0x00000ce4
     3ec:	.word	0x00000ce4
     3f0:	.word	0x00000ce4
     3f4:	.word	0x00000ce4
     3f8:	.word	0x00000ce4
     3fc:	.word	0x00000ce4
     400:	.word	0x00000ce4
     404:	.word	0x00000ce4
     408:	.word	0x00000ce4
     40c:	.word	0x00000ce4
     410:	.word	0x00000ce4
     414:	.word	0x00000ce4
     418:	.word	0x00000ce4
     41c:	.word	0x00000ce4
     420:	.word	0x00000ce4
     424:	.word	0x00000ce4
     428:	.word	0x0000069c
     42c:	.word	0x0000069c
     430:	.word	0x00000690
     434:	.word	0x00000690
     438:	.word	0x0000069c
     43c:	.word	0x0000069c
     440:	.word	0x00000698
     444:	.word	0x00000698
     448:	.word	0x000007b4
     44c:	.word	0x0000069c
     450:	.word	0x00000690
     454:	.word	0x0000069c
     458:	.word	0x00000698
     45c:	.word	0x00000cf4
     460:	.word	0x00000cf4
     464:	.word	0x00000cf4
     468:	.word	0x00000cf4
     46c:	.word	0x00000cf4
     470:	.word	0x00000cf4
     474:	.word	0x00000cf4
     478:	.word	0x00000cf4
     47c:	.word	0x00000cf4
     480:	.word	0x00000cf4
     484:	.word	0x00000cf4
     488:	.word	0x00000cf4
     48c:	.word	0x00000760
     490:	.word	0x00000760
     494:	.word	0x00000cf4
     498:	.word	0x00000ce4
     49c:	.word	0x00000ce4
     4a0:	.word	0x00000ce4
     4a4:	.word	0x00000ce4
     4a8:	.word	0x00000ce4
     4ac:	.word	0x000007bc
     4b0:	.word	0x00000cc0
     4b4:	.word	0x00000cf0
     4b8:	.word	0x00000cf0
     4bc:	.word	0x00000cf0
     4c0:	.word	0x00000cf0
     4c4:	.word	0x00000ce4
     4c8:	.word	0x0000055c
     4cc:	.word	0x000005a4
     4d0:	.word	0x000005a4
     4d4:	.word	0x000005a4
     4d8:	.word	0x0000055c
     4dc:	.word	0x0000055c
     4e0:	.word	0x0000055c
     4e4:	.word	0x0000055c
     4e8:	.word	0x0000055c
     4ec:	.word	0x0000055c
     4f0:	.word	0x00000ce4
     4f4:	.word	0x0000055c
     4f8:	.word	0x0000055c
     4fc:	.word	0x0000055c
     500:	.word	0x0000055c
     504:	.word	0x00000ce4
     508:	.word	0x00000ce4
     50c:	.word	0x00000ce4
     510:	.word	0x00000ce4
     514:	.word	0x00000ce4
     518:	.word	0x00000ce4
     51c:	.word	0x00000718
     520:	.word	0x00000718
     524:	.word	0x00000718
     528:	.word	0x00000ce4
     52c:	.word	0x00000ce4
     530:	.word	0x00000ce4
     534:	.word	0x00000ce4
     538:	.word	0x00000ce4
     53c:	.word	0x00000ce4
     540:	.word	0x00000ce4
     544:	.word	0x00000ce4
     548:	.word	0x00000ce4
     54c:	.word	0x00000ce4
     550:	.word	0x00000ce4
     554:	.word	0x00000ce4
     558:	.word	0x000007c4
     55c:	mov	r0, r7
     560:	mov	r1, r9
     564:	mov	r2, r4
     568:	bl	248 <set_start_bits>
     56c:	cmp	r0, #0
     570:	beq	cf4 <set_start_bits+0xaac>
     574:	cmp	r0, #1
     578:	beq	cbc <set_start_bits+0xa74>
     57c:	cmp	r0, #3
     580:	beq	cf4 <set_start_bits+0xaac>
     584:	ldrb	r0, [r7, #1]
     588:	ldrb	r1, [r7, #2]
     58c:	orr	r0, r1, r0, lsl #8
     590:	ldrb	r0, [r7, r0]!
     594:	cmp	r0, #119	; 0x77
     598:	beq	584 <set_start_bits+0x33c>
     59c:	add	r7, r7, #3
     5a0:	b	2b4 <set_start_bits+0x6c>
     5a4:	ldrb	r0, [r7, #1]
     5a8:	ldrb	r1, [r7, #2]
     5ac:	orr	r0, r1, r0, lsl #8
     5b0:	ldrb	r0, [r7, r0]!
     5b4:	cmp	r0, #119	; 0x77
     5b8:	beq	5a4 <set_start_bits+0x35c>
     5bc:	add	r7, r7, #3
     5c0:	b	2b4 <set_start_bits+0x6c>
     5c4:	ldrb	r0, [r7, #1]
     5c8:	mov	r3, #1
     5cc:	add	r7, r7, #2
     5d0:	ldrb	r1, [r9, r0, lsr #3]
     5d4:	and	r2, r0, #7
     5d8:	orr	r1, r1, r3, lsl r2
     5dc:	strb	r1, [r9, r0, lsr #3]
     5e0:	b	2b4 <set_start_bits+0x6c>
     5e4:	ldrb	r0, [r7, #1]
     5e8:	mov	r1, #1
     5ec:	ldrb	r2, [r9, r0, lsr #3]
     5f0:	and	r3, r0, #7
     5f4:	orr	r2, r2, r1, lsl r3
     5f8:	strb	r2, [r9, r0, lsr #3]
     5fc:	ldr	r2, [r4, #12]
     600:	ldrb	r2, [r2, r0]
     604:	tst	r2, #2
     608:	beq	2b0 <set_start_bits+0x68>
     60c:	ldr	r2, [r4, #4]
     610:	ldrb	r0, [r2, r0]
     614:	ldrb	r2, [r9, r0, lsr #3]
     618:	and	r3, r0, #7
     61c:	orr	r1, r2, r1, lsl r3
     620:	strb	r1, [r9, r0, lsr #3]
     624:	b	2b0 <set_start_bits+0x68>
     628:	ldrb	r0, [r7, #3]
     62c:	mov	r3, #1
     630:	add	r7, r7, #4
     634:	ldrb	r1, [r9, r0, lsr #3]
     638:	and	r2, r0, #7
     63c:	orr	r1, r1, r3, lsl r2
     640:	strb	r1, [r9, r0, lsr #3]
     644:	b	2b4 <set_start_bits+0x6c>
     648:	ldrb	r0, [r7, #3]
     64c:	mov	r1, #1
     650:	ldrb	r2, [r9, r0, lsr #3]
     654:	and	r3, r0, #7
     658:	orr	r2, r2, r1, lsl r3
     65c:	strb	r2, [r9, r0, lsr #3]
     660:	ldr	r2, [r4, #12]
     664:	ldrb	r2, [r2, r0]
     668:	tst	r2, #2
     66c:	beq	688 <set_start_bits+0x440>
     670:	ldr	r2, [r4, #4]
     674:	ldrb	r0, [r2, r0]
     678:	ldrb	r2, [r9, r0, lsr #3]
     67c:	and	r3, r0, #7
     680:	orr	r1, r2, r1, lsl r3
     684:	strb	r1, [r9, r0, lsr #3]
     688:	add	r7, r7, #4
     68c:	b	2b4 <set_start_bits+0x6c>
     690:	add	r7, r7, #1
     694:	b	2b4 <set_start_bits+0x6c>
     698:	add	r7, r7, #2
     69c:	ldrb	r0, [r7, #1]
     6a0:	sub	r1, r0, #6
     6a4:	mov	r0, #0
     6a8:	cmp	r1, #15
     6ac:	bhi	cf4 <set_start_bits+0xaac>
     6b0:	add	r2, pc, #0
     6b4:	ldr	pc, [r2, r1, lsl #2]
     6b8:	.word	0x00000838
     6bc:	.word	0x00000868
     6c0:	.word	0x000008b0
     6c4:	.word	0x000008fc
     6c8:	.word	0x00000940
     6cc:	.word	0x00000970
     6d0:	.word	0x00000cf4
     6d4:	.word	0x00000cf4
     6d8:	.word	0x00000cf4
     6dc:	.word	0x00000cf4
     6e0:	.word	0x00000cf4
     6e4:	.word	0x000006f8
     6e8:	.word	0x00000cf4
     6ec:	.word	0x000009bc
     6f0:	.word	0x00000cf4
     6f4:	.word	0x000006f8
     6f8:	ldrb	r0, [r9, #1]
     6fc:	ldrb	r1, [r9, #16]
     700:	add	r7, r7, #2
     704:	orr	r0, r0, #60	; 0x3c
     708:	strb	r0, [r9, #1]
     70c:	orr	r0, r1, #32
     710:	strb	r0, [r9, #16]
     714:	b	2b4 <set_start_bits+0x6c>
     718:	add	r7, r7, #1
     71c:	mov	r1, r9
     720:	mov	r2, r4
     724:	mov	r0, r7
     728:	bl	248 <set_start_bits>
     72c:	cmp	r0, #0
     730:	cmpne	r0, #3
     734:	beq	cf4 <set_start_bits+0xaac>
     738:	ldrb	r0, [r7, #1]
     73c:	ldrb	r1, [r7, #2]
     740:	orr	r0, r1, r0, lsl #8
     744:	ldrb	r0, [r7, r0]!
     748:	cmp	r0, #119	; 0x77
     74c:	beq	738 <set_start_bits+0x4f0>
     750:	add	r7, r7, #3
     754:	b	2b4 <set_start_bits+0x6c>
     758:	add	r7, r7, #1
     75c:	b	2b4 <set_start_bits+0x6c>
     760:	add	r0, r7, #33	; 0x21
     764:	cmp	r0, r9
     768:	bls	7e8 <set_start_bits+0x5a0>
     76c:	ldr	r0, [sp, #16]
     770:	cmp	r2, r0
     774:	bcs	7e8 <set_start_bits+0x5a0>
     778:	mov	r0, #0
     77c:	mov	r3, sl
     780:	add	r1, r7, r0
     784:	ldrb	r6, [r3, r0]!
     788:	ldrb	r2, [r1, #1]
     78c:	add	r0, r0, #2
     790:	cmp	r0, #32
     794:	ldrb	r5, [r3, #-1]
     798:	orr	r2, r5, r2
     79c:	strb	r2, [r3, #-1]
     7a0:	ldrb	r1, [r1, #2]
     7a4:	orr	r1, r6, r1
     7a8:	strb	r1, [r3]
     7ac:	bne	77c <set_start_bits+0x534>
     7b0:	b	80c <set_start_bits+0x5c4>
     7b4:	add	r7, r7, #3
     7b8:	b	2b4 <set_start_bits+0x6c>
     7bc:	add	r7, r7, #6
     7c0:	b	2b4 <set_start_bits+0x6c>
     7c4:	add	r0, r7, #1
     7c8:	ldrb	r1, [r0, #1]
     7cc:	ldrb	r2, [r0, #2]
     7d0:	orr	r1, r2, r1, lsl #8
     7d4:	ldrb	r1, [r0, r1]!
     7d8:	cmp	r1, #119	; 0x77
     7dc:	beq	7c8 <set_start_bits+0x580>
     7e0:	add	r7, r0, #3
     7e4:	b	2b4 <set_start_bits+0x6c>
     7e8:	vld1.8	{d16-d17}, [r2]!
     7ec:	vld1.8	{d18-d19}, [r9]
     7f0:	ldr	r0, [sp, #8]
     7f4:	vorr	q8, q9, q8
     7f8:	vst1.8	{d16-d17}, [r9]
     7fc:	vld1.8	{d16-d17}, [r2]
     800:	vld1.8	{d18-d19}, [r0]
     804:	vorr	q8, q9, q8
     808:	vst1.8	{d16-d17}, [r0]
     80c:	ldrb	r0, [r7, #33]	; 0x21
     810:	sub	r0, r0, #98	; 0x62
     814:	cmp	r0, #11
     818:	bhi	a30 <set_start_bits+0x7e8>
     81c:	mov	r1, #1
     820:	movw	r2, #1331	; 0x533
     824:	mov	r5, #1
     828:	tst	r2, r1, lsl r0
     82c:	beq	9e8 <set_start_bits+0x7a0>
     830:	add	r7, r7, #34	; 0x22
     834:	b	2b4 <set_start_bits+0x6c>
     838:	mov	r0, #0
     83c:	ldr	r2, [r4, #8]
     840:	ldrb	r1, [r9, r0]
     844:	add	r2, r2, r0
     848:	ldrb	r2, [r2, #64]	; 0x40
     84c:	mvn	r2, r2
     850:	orr	r1, r1, r2
     854:	strb	r1, [r9, r0]
     858:	add	r0, r0, #1
     85c:	cmp	r0, #32
     860:	bne	83c <set_start_bits+0x5f4>
     864:	b	9b4 <set_start_bits+0x76c>
     868:	mov	r0, #0
     86c:	ldr	r3, [r4, #8]
     870:	mov	r1, r9
     874:	ldrb	r2, [r1, r0]!
     878:	add	r3, r3, r0
     87c:	ldrb	r3, [r3, #64]	; 0x40
     880:	orr	r2, r2, r3
     884:	strb	r2, [r1]
     888:	ldr	r3, [r4, #8]
     88c:	ldrb	r2, [r1, #1]
     890:	add	r3, r3, r0
     894:	add	r0, r0, #2
     898:	ldrb	r3, [r3, #65]	; 0x41
     89c:	cmp	r0, #32
     8a0:	orr	r2, r2, r3
     8a4:	strb	r2, [r1, #1]
     8a8:	bne	86c <set_start_bits+0x624>
     8ac:	b	9b4 <set_start_bits+0x76c>
     8b0:	mov	r0, #0
     8b4:	ldr	r3, [r4, #8]
     8b8:	mov	r1, r9
     8bc:	ldrb	r2, [r1, r0]!
     8c0:	ldrb	r3, [r3, r0]
     8c4:	mvn	r3, r3
     8c8:	orr	r2, r2, r3
     8cc:	strb	r2, [r1]
     8d0:	ldr	r3, [r4, #8]
     8d4:	ldrb	r2, [r1, #1]
     8d8:	add	r3, r3, r0
     8dc:	add	r0, r0, #2
     8e0:	ldrb	r3, [r3, #1]
     8e4:	cmp	r0, #32
     8e8:	mvn	r3, r3
     8ec:	orr	r2, r2, r3
     8f0:	strb	r2, [r1, #1]
     8f4:	bne	8b4 <set_start_bits+0x66c>
     8f8:	b	9b4 <set_start_bits+0x76c>
     8fc:	mov	r0, #0
     900:	ldr	r3, [r4, #8]
     904:	mov	r1, r9
     908:	ldrb	r2, [r1, r0]!
     90c:	ldrb	r3, [r3, r0]
     910:	orr	r2, r2, r3
     914:	strb	r2, [r1]
     918:	ldr	r3, [r4, #8]
     91c:	ldrb	r2, [r1, #1]
     920:	add	r3, r3, r0
     924:	add	r0, r0, #2
     928:	ldrb	r3, [r3, #1]
     92c:	cmp	r0, #32
     930:	orr	r2, r2, r3
     934:	strb	r2, [r1, #1]
     938:	bne	900 <set_start_bits+0x6b8>
     93c:	b	9b4 <set_start_bits+0x76c>
     940:	mov	r0, #0
     944:	ldr	r2, [r4, #8]
     948:	ldrb	r1, [r9, r0]
     94c:	add	r2, r2, r0
     950:	ldrb	r2, [r2, #160]	; 0xa0
     954:	mvn	r2, r2
     958:	orr	r1, r1, r2
     95c:	strb	r1, [r9, r0]
     960:	add	r0, r0, #1
     964:	cmp	r0, #32
     968:	bne	944 <set_start_bits+0x6fc>
     96c:	b	9b4 <set_start_bits+0x76c>
     970:	mov	r0, #0
     974:	ldr	r3, [r4, #8]
     978:	mov	r1, r9
     97c:	ldrb	r2, [r1, r0]!
     980:	add	r3, r3, r0
     984:	ldrb	r3, [r3, #160]	; 0xa0
     988:	orr	r2, r2, r3
     98c:	strb	r2, [r1]
     990:	ldr	r3, [r4, #8]
     994:	ldrb	r2, [r1, #1]
     998:	add	r3, r3, r0
     99c:	add	r0, r0, #2
     9a0:	ldrb	r3, [r3, #161]	; 0xa1
     9a4:	cmp	r0, #32
     9a8:	orr	r2, r2, r3
     9ac:	strb	r2, [r1, #1]
     9b0:	bne	974 <set_start_bits+0x72c>
     9b4:	add	r7, r7, #2
     9b8:	b	2b4 <set_start_bits+0x6c>
     9bc:	ldrb	r0, [r9, #1]
     9c0:	ldrb	r1, [r9, #4]
     9c4:	ldrb	r2, [r9, #20]
     9c8:	add	r7, r7, #2
     9cc:	orr	r0, r0, #2
     9d0:	strb	r0, [r9, #1]
     9d4:	orr	r0, r1, #1
     9d8:	strb	r0, [r9, #4]
     9dc:	orr	r0, r2, #1
     9e0:	strb	r0, [r9, #20]
     9e4:	b	2b4 <set_start_bits+0x6c>
     9e8:	mov	r2, #2240	; 0x8c0
     9ec:	tst	r2, r1, lsl r0
     9f0:	beq	cbc <set_start_bits+0xa74>
     9f4:	ldrb	r1, [r7, #34]	; 0x22
     9f8:	ldrb	r2, [r7, #35]	; 0x23
     9fc:	add	r0, r7, #38	; 0x26
     a00:	mov	r7, r0
     a04:	orr	r1, r2, r1, lsl #8
     a08:	cmp	r1, #0
     a0c:	beq	2b4 <set_start_bits+0x6c>
     a10:	b	cbc <set_start_bits+0xa74>
     a14:	ldrb	r0, [r9, #1]
     a18:	ldrb	r1, [r9, #16]
     a1c:	orr	r0, r0, #60	; 0x3c
     a20:	strb	r0, [r9, #1]
     a24:	orr	r0, r1, #32
     a28:	strb	r0, [r9, #16]
     a2c:	b	cbc <set_start_bits+0xa74>
     a30:	ldr	r1, [sp, #12]
     a34:	mov	r5, #1
     a38:	b	cc0 <set_start_bits+0xa78>
     a3c:	mov	r0, #0
     a40:	ldr	r2, [r4, #8]
     a44:	ldrb	r1, [r9, r0]
     a48:	add	r2, r2, r0
     a4c:	ldrb	r2, [r2, #64]	; 0x40
     a50:	mvn	r2, r2
     a54:	orr	r1, r1, r2
     a58:	strb	r1, [r9, r0]
     a5c:	add	r0, r0, #1
     a60:	cmp	r0, #32
     a64:	bne	a40 <set_start_bits+0x7f8>
     a68:	b	cbc <set_start_bits+0xa74>
     a6c:	mov	r0, #0
     a70:	ldr	r3, [r4, #8]
     a74:	mov	r1, r9
     a78:	ldrb	r2, [r1, r0]!
     a7c:	add	r3, r3, r0
     a80:	ldrb	r3, [r3, #64]	; 0x40
     a84:	orr	r2, r2, r3
     a88:	strb	r2, [r1]
     a8c:	ldr	r3, [r4, #8]
     a90:	ldrb	r2, [r1, #1]
     a94:	add	r3, r3, r0
     a98:	add	r0, r0, #2
     a9c:	ldrb	r3, [r3, #65]	; 0x41
     aa0:	cmp	r0, #32
     aa4:	orr	r2, r2, r3
     aa8:	strb	r2, [r1, #1]
     aac:	bne	a70 <set_start_bits+0x828>
     ab0:	b	cbc <set_start_bits+0xa74>
     ab4:	mov	r0, #0
     ab8:	ldr	r3, [r4, #8]
     abc:	mov	r1, r9
     ac0:	ldrb	r2, [r1, r0]!
     ac4:	ldrb	r3, [r3, r0]
     ac8:	mvn	r3, r3
     acc:	orr	r2, r2, r3
     ad0:	strb	r2, [r1]
     ad4:	ldr	r3, [r4, #8]
     ad8:	ldrb	r2, [r1, #1]
     adc:	add	r3, r3, r0
     ae0:	add	r0, r0, #2
     ae4:	ldrb	r3, [r3, #1]
     ae8:	cmp	r0, #32
     aec:	mvn	r3, r3
     af0:	orr	r2, r2, r3
     af4:	strb	r2, [r1, #1]
     af8:	bne	ab8 <set_start_bits+0x870>
     afc:	b	cbc <set_start_bits+0xa74>
     b00:	mov	r0, #0
     b04:	ldr	r3, [r4, #8]
     b08:	mov	r1, r9
     b0c:	ldrb	r2, [r1, r0]!
     b10:	ldrb	r3, [r3, r0]
     b14:	orr	r2, r2, r3
     b18:	strb	r2, [r1]
     b1c:	ldr	r3, [r4, #8]
     b20:	ldrb	r2, [r1, #1]
     b24:	add	r3, r3, r0
     b28:	add	r0, r0, #2
     b2c:	ldrb	r3, [r3, #1]
     b30:	cmp	r0, #32
     b34:	orr	r2, r2, r3
     b38:	strb	r2, [r1, #1]
     b3c:	bne	b04 <set_start_bits+0x8bc>
     b40:	b	cbc <set_start_bits+0xa74>
     b44:	mov	r0, #0
     b48:	ldr	r2, [r4, #8]
     b4c:	ldrb	r1, [r9, r0]
     b50:	add	r2, r2, r0
     b54:	ldrb	r2, [r2, #160]	; 0xa0
     b58:	mvn	r2, r2
     b5c:	orr	r1, r1, r2
     b60:	strb	r1, [r9, r0]
     b64:	add	r0, r0, #1
     b68:	cmp	r0, #32
     b6c:	bne	b48 <set_start_bits+0x900>
     b70:	b	cbc <set_start_bits+0xa74>
     b74:	mov	r0, #0
     b78:	ldr	r3, [r4, #8]
     b7c:	mov	r1, r9
     b80:	ldrb	r2, [r1, r0]!
     b84:	add	r3, r3, r0
     b88:	ldrb	r3, [r3, #160]	; 0xa0
     b8c:	orr	r2, r2, r3
     b90:	strb	r2, [r1]
     b94:	ldr	r3, [r4, #8]
     b98:	ldrb	r2, [r1, #1]
     b9c:	add	r3, r3, r0
     ba0:	add	r0, r0, #2
     ba4:	ldrb	r3, [r3, #161]	; 0xa1
     ba8:	cmp	r0, #32
     bac:	orr	r2, r2, r3
     bb0:	strb	r2, [r1, #1]
     bb4:	bne	b78 <set_start_bits+0x930>
     bb8:	b	cbc <set_start_bits+0xa74>
     bbc:	ldrb	r0, [r7, #1]
     bc0:	cmp	r0, #9
     bc4:	bne	ce4 <set_start_bits+0xa9c>
     bc8:	ldrb	r0, [r7, #2]
     bcc:	movw	r2, #0
     bd0:	movt	r2, #0
     bd4:	ldr	r1, [r2, r0, lsl #2]
     bd8:	cmn	r1, #1
     bdc:	beq	cbc <set_start_bits+0xa74>
     be0:	ldr	r6, [sp, #4]
     be4:	add	r0, r2, r0, lsl #2
     be8:	add	r0, r0, #4
     bec:	cmp	r1, #256	; 0x100
     bf0:	bcs	c20 <set_start_bits+0x9d8>
     bf4:	mov	r2, r9
     bf8:	mov	r7, #1
     bfc:	ldrb	r3, [r2, r1, lsr #3]!
     c00:	and	r1, r1, #7
     c04:	orr	r1, r3, r7, lsl r1
     c08:	strb	r1, [r2]
     c0c:	ldr	r1, [r0], #4
     c10:	cmn	r1, #1
     c14:	beq	cbc <set_start_bits+0xa74>
     c18:	cmp	r1, #256	; 0x100
     c1c:	bcc	bf4 <set_start_bits+0x9ac>
     c20:	ldrb	r1, [r6]
     c24:	mvn	r2, #127	; 0x7f
     c28:	orr	r1, r1, r2
     c2c:	mov	r2, r6
     c30:	b	c08 <set_start_bits+0x9c0>
     c34:	ldrb	r0, [r9, #1]
     c38:	ldrb	r1, [r9, #4]
     c3c:	ldrb	r2, [r9, #20]
     c40:	orr	r0, r0, #2
     c44:	strb	r0, [r9, #1]
     c48:	orr	r0, r1, #1
     c4c:	strb	r0, [r9, #4]
     c50:	orr	r0, r2, #1
     c54:	strb	r0, [r9, #20]
     c58:	b	cbc <set_start_bits+0xa74>
     c5c:	add	r7, r7, #2
     c60:	ldrb	r0, [r7, #1]
     c64:	mov	r3, #1
     c68:	ldrb	r1, [r9, r0, lsr #3]
     c6c:	and	r2, r0, #7
     c70:	orr	r1, r1, r3, lsl r2
     c74:	b	cb8 <set_start_bits+0xa70>
     c78:	add	r7, r7, #2
     c7c:	ldrb	r0, [r7, #1]
     c80:	mov	r1, #1
     c84:	ldrb	r2, [r9, r0, lsr #3]
     c88:	and	r3, r0, #7
     c8c:	orr	r2, r2, r1, lsl r3
     c90:	strb	r2, [r9, r0, lsr #3]
     c94:	ldr	r2, [r4, #12]
     c98:	ldrb	r2, [r2, r0]
     c9c:	tst	r2, #2
     ca0:	beq	cbc <set_start_bits+0xa74>
     ca4:	ldr	r2, [r4, #4]
     ca8:	ldrb	r0, [r2, r0]
     cac:	ldrb	r2, [r9, r0, lsr #3]
     cb0:	and	r3, r0, #7
     cb4:	orr	r1, r2, r1, lsl r3
     cb8:	strb	r1, [r9, r0, lsr #3]
     cbc:	ldr	r1, [sp, #12]
     cc0:	ldrb	r0, [r8, #1]
     cc4:	ldrb	r2, [r8, #2]
     cc8:	orr	r0, r2, r0, lsl #8
     ccc:	mov	r2, #119	; 0x77
     cd0:	ldrb	r0, [r8, r0]!
     cd4:	cmp	r0, #119	; 0x77
     cd8:	mov	r0, r1
     cdc:	beq	288 <set_start_bits+0x40>
     ce0:	b	cf4 <set_start_bits+0xaac>
     ce4:	mov	r0, #0
     ce8:	sub	sp, fp, #28
     cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cf0:	mov	r0, #2
     cf4:	sub	sp, fp, #28
     cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000cfc <find_minlength>:
     cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d00:	add	fp, sp, #28
     d04:	sub	sp, sp, #44	; 0x2c
     d08:	ldr	r4, [fp, #12]
     d0c:	mov	r5, r2
     d10:	mov	r6, r0
     d14:	ldr	r2, [r4]
     d18:	add	r0, r2, #1
     d1c:	cmp	r2, #1000	; 0x3e8
     d20:	str	r0, [r4]
     d24:	ubfx	r9, r3, #11, #1
     d28:	mvn	r0, #0
     d2c:	bgt	15bc <find_minlength+0x8c0>
     d30:	mov	r7, r1
     d34:	mov	sl, r3
     d38:	ldrb	r0, [r7], #3
     d3c:	sub	r0, r0, #133	; 0x85
     d40:	cmp	r0, #6
     d44:	bhi	d58 <find_minlength+0x5c>
     d48:	mov	r2, #1
     d4c:	mov	r3, #99	; 0x63
     d50:	tst	r3, r2, lsl r0
     d54:	addne	r7, r1, #5
     d58:	and	r0, sl, #33554432	; 0x2000000
     d5c:	mov	r8, #0
     d60:	str	r0, [sp, #24]
     d64:	mvn	r0, #0
     d68:	str	r0, [sp, #32]
     d6c:	mov	r0, #0
     d70:	str	r0, [sp, #28]
     d74:	b	d9c <find_minlength+0xa0>
     d78:	ldrb	r0, [r7, #1]
     d7c:	sub	r0, r0, #15
     d80:	uxtb	r0, r0
     d84:	cmp	r0, #2
     d88:	addcc	r7, r7, #2
     d8c:	movw	r0, #0
     d90:	movt	r0, #0
     d94:	ldrb	r0, [r0, r1]
     d98:	add	r7, r7, r0
     d9c:	ldrb	r1, [r7]
     da0:	cmp	r1, #161	; 0xa1
     da4:	bhi	15b8 <find_minlength+0x8bc>
     da8:	add	r2, pc, #4
     dac:	mvn	r0, #0
     db0:	ldr	pc, [r2, r1, lsl #2]
     db4:	.word	0x00001064
     db8:	.word	0x00000d8c
     dbc:	.word	0x00000d8c
     dc0:	.word	0x00000d8c
     dc4:	.word	0x00000d8c
     dc8:	.word	0x00000d8c
     dcc:	.word	0x00001140
     dd0:	.word	0x00001140
     dd4:	.word	0x00001140
     dd8:	.word	0x00001140
     ddc:	.word	0x00001140
     de0:	.word	0x00001140
     de4:	.word	0x00001140
     de8:	.word	0x00001140
     dec:	.word	0x00001140
     df0:	.word	0x0000113c
     df4:	.word	0x0000113c
     df8:	.word	0x00001140
     dfc:	.word	0x00001140
     e00:	.word	0x00001140
     e04:	.word	0x00001140
     e08:	.word	0x00001140
     e0c:	.word	0x00001140
     e10:	.word	0x00000d8c
     e14:	.word	0x00000d8c
     e18:	.word	0x00000d8c
     e1c:	.word	0x00000d8c
     e20:	.word	0x00000d8c
     e24:	.word	0x00000d8c
     e28:	.word	0x0000103c
     e2c:	.word	0x0000103c
     e30:	.word	0x0000103c
     e34:	.word	0x0000103c
     e38:	.word	0x00000d8c
     e3c:	.word	0x00000d8c
     e40:	.word	0x0000103c
     e44:	.word	0x0000103c
     e48:	.word	0x00000d8c
     e4c:	.word	0x00000d8c
     e50:	.word	0x00000d8c
     e54:	.word	0x00000d8c
     e58:	.word	0x00001088
     e5c:	.word	0x00000d8c
     e60:	.word	0x0000103c
     e64:	.word	0x00000d8c
     e68:	.word	0x00000d8c
     e6c:	.word	0x00000d8c
     e70:	.word	0x00000d8c
     e74:	.word	0x0000103c
     e78:	.word	0x0000103c
     e7c:	.word	0x00000d8c
     e80:	.word	0x00000d8c
     e84:	.word	0x00000d8c
     e88:	.word	0x00000d8c
     e8c:	.word	0x00001088
     e90:	.word	0x00000d8c
     e94:	.word	0x0000103c
     e98:	.word	0x00000d8c
     e9c:	.word	0x00000d8c
     ea0:	.word	0x00000d8c
     ea4:	.word	0x00000d8c
     ea8:	.word	0x0000103c
     eac:	.word	0x0000103c
     eb0:	.word	0x00000d8c
     eb4:	.word	0x00000d8c
     eb8:	.word	0x00000d8c
     ebc:	.word	0x00000d8c
     ec0:	.word	0x00001088
     ec4:	.word	0x00000d8c
     ec8:	.word	0x0000103c
     ecc:	.word	0x00000d8c
     ed0:	.word	0x00000d8c
     ed4:	.word	0x00000d8c
     ed8:	.word	0x00000d8c
     edc:	.word	0x0000103c
     ee0:	.word	0x0000103c
     ee4:	.word	0x00000d8c
     ee8:	.word	0x00000d8c
     eec:	.word	0x00000d8c
     ef0:	.word	0x00000d8c
     ef4:	.word	0x00001088
     ef8:	.word	0x00000d8c
     efc:	.word	0x0000103c
     f00:	.word	0x00000d8c
     f04:	.word	0x00000d8c
     f08:	.word	0x00000d78
     f0c:	.word	0x00000d78
     f10:	.word	0x000010ec
     f14:	.word	0x000010ec
     f18:	.word	0x00000d78
     f1c:	.word	0x00000d78
     f20:	.word	0x00001110
     f24:	.word	0x00001110
     f28:	.word	0x00001398
     f2c:	.word	0x00000d78
     f30:	.word	0x000010ec
     f34:	.word	0x00000d78
     f38:	.word	0x00001110
     f3c:	.word	0x000015b8
     f40:	.word	0x000015b8
     f44:	.word	0x000015b8
     f48:	.word	0x000015b8
     f4c:	.word	0x000015b8
     f50:	.word	0x000015b8
     f54:	.word	0x000015b8
     f58:	.word	0x000015b8
     f5c:	.word	0x000015b8
     f60:	.word	0x000015b8
     f64:	.word	0x000015b8
     f68:	.word	0x000015b8
     f6c:	.word	0x0000114c
     f70:	.word	0x0000114c
     f74:	.word	0x000015b8
     f78:	.word	0x00001190
     f7c:	.word	0x00001190
     f80:	.word	0x000011fc
     f84:	.word	0x000011fc
     f88:	.word	0x000013c8
     f8c:	.word	0x00000d8c
     f90:	.word	0x00001064
     f94:	.word	0x00001064
     f98:	.word	0x00001064
     f9c:	.word	0x00001064
     fa0:	.word	0x00001064
     fa4:	.word	0x00000d8c
     fa8:	.word	0x00001048
     fac:	.word	0x00001048
     fb0:	.word	0x00001048
     fb4:	.word	0x00001048
     fb8:	.word	0x00001278
     fbc:	.word	0x00001278
     fc0:	.word	0x00001278
     fc4:	.word	0x00001278
     fc8:	.word	0x00001278
     fcc:	.word	0x00001278
     fd0:	.word	0x0000125c
     fd4:	.word	0x00001278
     fd8:	.word	0x00001278
     fdc:	.word	0x00001278
     fe0:	.word	0x00001278
     fe4:	.word	0x0000125c
     fe8:	.word	0x00000d8c
     fec:	.word	0x00000d8c
     ff0:	.word	0x00000d8c
     ff4:	.word	0x00000d8c
     ff8:	.word	0x00000d8c
     ffc:	.word	0x000010a0
    1000:	.word	0x000010a0
    1004:	.word	0x000010a0
    1008:	.word	0x000010d0
    100c:	.word	0x00000d8c
    1010:	.word	0x000010d0
    1014:	.word	0x00000d8c
    1018:	.word	0x000010d0
    101c:	.word	0x00000d8c
    1020:	.word	0x000010d0
    1024:	.word	0x00000d8c
    1028:	.word	0x00000d8c
    102c:	.word	0x000015bc
    1030:	.word	0x000015bc
    1034:	.word	0x00000d8c
    1038:	.word	0x000010a0
    103c:	add	r7, r7, #2
    1040:	add	r8, r8, #1
    1044:	b	d9c <find_minlength+0xa0>
    1048:	ldrb	r0, [r7, #1]
    104c:	ldrb	r1, [r7, #2]
    1050:	orr	r0, r1, r0, lsl #8
    1054:	ldrb	r1, [r7, r0]!
    1058:	cmp	r1, #119	; 0x77
    105c:	beq	1048 <find_minlength+0x34c>
    1060:	b	d8c <find_minlength+0x90>
    1064:	ldr	r0, [sp, #32]
    1068:	cmp	r0, #0
    106c:	bmi	1118 <find_minlength+0x41c>
    1070:	ldr	r2, [sp, #28]
    1074:	cmp	r2, #0
    1078:	bne	111c <find_minlength+0x420>
    107c:	cmp	r8, r0
    1080:	movlt	r0, r8
    1084:	b	111c <find_minlength+0x420>
    1088:	ldrb	r0, [r7, #1]
    108c:	ldrb	r1, [r7, #2]
    1090:	add	r7, r7, #4
    1094:	orr	r0, r1, r0, lsl #8
    1098:	add	r8, r0, r8
    109c:	b	d9c <find_minlength+0xa0>
    10a0:	movw	r0, #0
    10a4:	movt	r0, #0
    10a8:	ldrb	r0, [r0, r1]
    10ac:	add	r0, r7, r0
    10b0:	ldrb	r1, [r0, #1]
    10b4:	ldrb	r2, [r0, #2]
    10b8:	orr	r1, r2, r1, lsl #8
    10bc:	ldrb	r1, [r0, r1]!
    10c0:	cmp	r1, #119	; 0x77
    10c4:	beq	10b0 <find_minlength+0x3b4>
    10c8:	add	r7, r0, #3
    10cc:	b	d9c <find_minlength+0xa0>
    10d0:	movw	r0, #0
    10d4:	movt	r0, #0
    10d8:	ldrb	r0, [r0, r1]
    10dc:	ldrb	r1, [r7, #1]
    10e0:	add	r0, r1, r0
    10e4:	add	r7, r7, r0
    10e8:	b	d9c <find_minlength+0xa0>
    10ec:	ldrb	r0, [r7, #1]
    10f0:	mov	r1, #2
    10f4:	add	r8, r8, #1
    10f8:	sub	r0, r0, #15
    10fc:	uxtb	r0, r0
    1100:	cmp	r0, #2
    1104:	movwcc	r1, #4
    1108:	add	r7, r7, r1
    110c:	b	d9c <find_minlength+0xa0>
    1110:	ldrb	r0, [r7, #3]
    1114:	b	d7c <find_minlength+0x80>
    1118:	mov	r0, r8
    111c:	cmp	r1, #119	; 0x77
    1120:	mov	r1, #0
    1124:	add	r7, r7, #3
    1128:	mov	r8, #0
    112c:	str	r0, [sp, #32]
    1130:	str	r1, [sp, #28]
    1134:	beq	d9c <find_minlength+0xa0>
    1138:	b	15bc <find_minlength+0x8c0>
    113c:	add	r7, r7, #2
    1140:	add	r7, r7, #1
    1144:	add	r8, r8, #1
    1148:	b	d9c <find_minlength+0xa0>
    114c:	movw	r0, #0
    1150:	movt	r0, #0
    1154:	ldrb	r0, [r0, #110]	; 0x6e
    1158:	ldrb	r0, [r7, r0]!
    115c:	sub	r0, r0, #98	; 0x62
    1160:	cmp	r0, #11
    1164:	bhi	1508 <find_minlength+0x80c>
    1168:	mov	r1, #1
    116c:	movw	r2, #1331	; 0x533
    1170:	tst	r2, r1, lsl r0
    1174:	bne	1188 <find_minlength+0x48c>
    1178:	mov	r2, #524	; 0x20c
    117c:	tst	r2, r1, lsl r0
    1180:	beq	14e8 <find_minlength+0x7ec>
    1184:	add	r8, r8, #1
    1188:	add	r7, r7, #1
    118c:	b	d9c <find_minlength+0xa0>
    1190:	ldr	r0, [sp, #24]
    1194:	mov	r3, #0
    1198:	mov	r2, #3
    119c:	cmp	r0, #0
    11a0:	bne	151c <find_minlength+0x820>
    11a4:	ldrb	r0, [r7, #1]
    11a8:	ldrb	r1, [r7, #2]
    11ac:	orr	r2, r1, r0, lsl #8
    11b0:	mov	r0, r5
    11b4:	mov	r1, r9
    11b8:	bl	0 <coda__pcre_find_bracket>
    11bc:	cmp	r0, #0
    11c0:	beq	15c4 <find_minlength+0x8c8>
    11c4:	mov	r1, r0
    11c8:	ldrb	r2, [r0, #1]
    11cc:	ldrb	r3, [r0, #2]
    11d0:	orr	r2, r3, r2, lsl #8
    11d4:	ldrb	r2, [r0, r2]!
    11d8:	cmp	r2, #119	; 0x77
    11dc:	beq	11c8 <find_minlength+0x4cc>
    11e0:	cmp	r7, r1
    11e4:	bls	1490 <find_minlength+0x794>
    11e8:	cmp	r7, r0
    11ec:	bcs	1490 <find_minlength+0x794>
    11f0:	mov	r0, #1
    11f4:	mov	r3, #0
    11f8:	b	1514 <find_minlength+0x818>
    11fc:	ldr	r0, [sp, #24]
    1200:	mov	r3, #0
    1204:	mov	r2, #5
    1208:	cmp	r0, #0
    120c:	bne	151c <find_minlength+0x820>
    1210:	ldrb	r0, [r7, #3]
    1214:	ldrb	r1, [r7, #4]
    1218:	orr	r0, r1, r0, lsl #8
    121c:	cmp	r0, #0
    1220:	beq	1500 <find_minlength+0x804>
    1224:	ldrb	r2, [r7, #1]
    1228:	ldrb	r3, [r7, #2]
    122c:	mov	ip, r0
    1230:	ldrh	r0, [r6, #34]	; 0x22
    1234:	ldrh	r1, [r6, #36]	; 0x24
    1238:	str	r9, [sp, #20]
    123c:	str	r6, [sp, #16]
    1240:	str	sl, [sp, #12]
    1244:	mov	r4, ip
    1248:	orr	r2, r3, r2, lsl #8
    124c:	add	r0, r6, r0
    1250:	mvn	r6, #-2147483648	; 0x80000000
    1254:	mla	r9, r2, r1, r0
    1258:	b	1314 <find_minlength+0x618>
    125c:	ldrb	r0, [r7, #1]
    1260:	ldrb	r1, [r7, #2]
    1264:	orr	r1, r1, r0, lsl #8
    1268:	mov	r0, r7
    126c:	ldrb	r1, [r0, r1]!
    1270:	cmp	r1, #119	; 0x77
    1274:	bne	1454 <find_minlength+0x758>
    1278:	ldr	r0, [fp, #8]
    127c:	mov	r1, r7
    1280:	mov	r2, r5
    1284:	mov	r3, sl
    1288:	stm	sp, {r0, r4}
    128c:	mov	r0, r6
    1290:	bl	cfc <find_minlength>
    1294:	cmp	r0, #0
    1298:	bmi	15bc <find_minlength+0x8c0>
    129c:	ldrb	r1, [r7, #1]
    12a0:	ldrb	r2, [r7, #2]
    12a4:	orr	r1, r2, r1, lsl #8
    12a8:	ldrb	r1, [r7, r1]!
    12ac:	cmp	r1, #119	; 0x77
    12b0:	beq	129c <find_minlength+0x5a0>
    12b4:	add	r8, r0, r8
    12b8:	add	r7, r7, #3
    12bc:	b	d9c <find_minlength+0xa0>
    12c0:	ldr	r0, [fp, #8]
    12c4:	str	r1, [sp, #40]	; 0x28
    12c8:	mov	r5, sl
    12cc:	mov	r2, sl
    12d0:	ldr	sl, [sp, #12]
    12d4:	str	r0, [sp, #36]	; 0x24
    12d8:	add	r0, sp, #36	; 0x24
    12dc:	mov	r3, sl
    12e0:	str	r0, [sp]
    12e4:	ldr	r0, [fp, #12]
    12e8:	stmib	sp, {r0, r4}
    12ec:	ldr	r4, [sp, #16]
    12f0:	mov	r0, r4
    12f4:	bl	cfc <find_minlength>
    12f8:	cmp	r0, r6
    12fc:	movlt	r6, r0
    1300:	ldrh	r0, [r4, #36]	; 0x24
    1304:	ldr	r4, [sp, #8]
    1308:	add	r9, r9, r0
    130c:	cmp	r4, #0
    1310:	ble	15ac <find_minlength+0x8b0>
    1314:	ldrb	r0, [r9]
    1318:	ldrb	r1, [r9, #1]
    131c:	mov	sl, r5
    1320:	orr	r2, r1, r0, lsl #8
    1324:	ldr	r1, [sp, #20]
    1328:	mov	r0, r5
    132c:	bl	0 <coda__pcre_find_bracket>
    1330:	cmp	r0, #0
    1334:	beq	15c4 <find_minlength+0x8c8>
    1338:	mov	r1, r0
    133c:	sub	r4, r4, #1
    1340:	ldrb	r2, [r0, #1]
    1344:	ldrb	r3, [r0, #2]
    1348:	orr	r2, r3, r2, lsl #8
    134c:	ldrb	r2, [r0, r2]!
    1350:	cmp	r2, #119	; 0x77
    1354:	beq	1340 <find_minlength+0x644>
    1358:	cmp	r7, r1
    135c:	bls	1368 <find_minlength+0x66c>
    1360:	cmp	r7, r0
    1364:	bcc	1584 <find_minlength+0x888>
    1368:	ldr	r0, [fp, #8]
    136c:	mov	r3, #0
    1370:	cmp	r0, #0
    1374:	beq	12c0 <find_minlength+0x5c4>
    1378:	ldr	r0, [fp, #8]
    137c:	ldr	r2, [r0, #4]
    1380:	cmp	r2, r1
    1384:	beq	146c <find_minlength+0x770>
    1388:	ldr	r0, [r0]
    138c:	cmp	r0, #0
    1390:	bne	137c <find_minlength+0x680>
    1394:	b	12c0 <find_minlength+0x5c4>
    1398:	ldrb	r0, [r7, #1]
    139c:	ldrb	r1, [r7, #2]
    13a0:	ldrb	r2, [r7, #3]
    13a4:	orr	r0, r1, r0, lsl #8
    13a8:	mov	r1, #4
    13ac:	add	r8, r0, r8
    13b0:	sub	r0, r2, #15
    13b4:	uxtb	r0, r0
    13b8:	cmp	r0, #2
    13bc:	movwcc	r1, #6
    13c0:	add	r7, r7, r1
    13c4:	b	d9c <find_minlength+0xa0>
    13c8:	ldrb	r0, [r7, #1]
    13cc:	ldrb	r1, [r7, #2]
    13d0:	orr	r0, r1, r0, lsl #8
    13d4:	add	r1, r5, r0
    13d8:	mov	r0, r1
    13dc:	ldrb	r2, [r0, #1]
    13e0:	ldrb	r3, [r0, #2]
    13e4:	orr	r2, r3, r2, lsl #8
    13e8:	ldrb	r2, [r0, r2]!
    13ec:	cmp	r2, #119	; 0x77
    13f0:	beq	13dc <find_minlength+0x6e0>
    13f4:	cmp	r7, r1
    13f8:	bls	1404 <find_minlength+0x708>
    13fc:	cmp	r7, r0
    1400:	bcc	145c <find_minlength+0x760>
    1404:	ldr	r0, [fp, #8]
    1408:	cmp	r0, #0
    140c:	beq	142c <find_minlength+0x730>
    1410:	ldr	r0, [fp, #8]
    1414:	ldr	r2, [r0, #4]
    1418:	cmp	r2, r1
    141c:	beq	145c <find_minlength+0x760>
    1420:	ldr	r0, [r0]
    1424:	cmp	r0, #0
    1428:	bne	1414 <find_minlength+0x718>
    142c:	ldr	r0, [fp, #8]
    1430:	str	r1, [sp, #40]	; 0x28
    1434:	mov	r2, r5
    1438:	mov	r3, sl
    143c:	str	r0, [sp, #36]	; 0x24
    1440:	add	r0, sp, #36	; 0x24
    1444:	stm	sp, {r0, r4}
    1448:	mov	r0, r6
    144c:	bl	cfc <find_minlength>
    1450:	b	12b4 <find_minlength+0x5b8>
    1454:	add	r7, r0, #3
    1458:	b	d9c <find_minlength+0xa0>
    145c:	mov	r0, #1
    1460:	add	r7, r7, #3
    1464:	str	r0, [sp, #28]
    1468:	b	d9c <find_minlength+0xa0>
    146c:	mov	r5, sl
    1470:	ldr	r6, [sp, #16]
    1474:	ldr	sl, [sp, #12]
    1478:	mov	r0, #1
    147c:	str	r0, [sp, #28]
    1480:	ldr	r4, [fp, #12]
    1484:	ldr	r9, [sp, #20]
    1488:	mov	r2, #5
    148c:	b	151c <find_minlength+0x820>
    1490:	ldr	r0, [fp, #8]
    1494:	mov	r3, #0
    1498:	cmp	r0, #0
    149c:	beq	14bc <find_minlength+0x7c0>
    14a0:	ldr	r0, [fp, #8]
    14a4:	ldr	r2, [r0, #4]
    14a8:	cmp	r2, r1
    14ac:	beq	1510 <find_minlength+0x814>
    14b0:	ldr	r0, [r0]
    14b4:	cmp	r0, #0
    14b8:	bne	14a4 <find_minlength+0x7a8>
    14bc:	ldr	r0, [fp, #8]
    14c0:	str	r1, [sp, #40]	; 0x28
    14c4:	mov	r2, r5
    14c8:	mov	r3, sl
    14cc:	str	r0, [sp, #36]	; 0x24
    14d0:	add	r0, sp, #36	; 0x24
    14d4:	stm	sp, {r0, r4}
    14d8:	mov	r0, r6
    14dc:	bl	cfc <find_minlength>
    14e0:	mov	r3, r0
    14e4:	b	1518 <find_minlength+0x81c>
    14e8:	ldrb	r0, [r7, #1]
    14ec:	ldrb	r1, [r7, #2]
    14f0:	add	r7, r7, #5
    14f4:	orr	r0, r1, r0, lsl #8
    14f8:	add	r8, r0, r8
    14fc:	b	d9c <find_minlength+0xa0>
    1500:	mvn	r3, #-2147483648	; 0x80000000
    1504:	b	151c <find_minlength+0x820>
    1508:	add	r8, r8, #1
    150c:	b	d9c <find_minlength+0xa0>
    1510:	mov	r0, #1
    1514:	str	r0, [sp, #28]
    1518:	mov	r2, #3
    151c:	ldrb	r0, [r7, r2]!
    1520:	sub	r0, r0, #98	; 0x62
    1524:	cmp	r0, #11
    1528:	bhi	155c <find_minlength+0x860>
    152c:	mov	r1, #1
    1530:	movw	r2, #1331	; 0x533
    1534:	tst	r2, r1, lsl r0
    1538:	beq	154c <find_minlength+0x850>
    153c:	mov	r0, #0
    1540:	add	r7, r7, #1
    1544:	mla	r8, r0, r3, r8
    1548:	b	d9c <find_minlength+0xa0>
    154c:	mov	r2, #524	; 0x20c
    1550:	tst	r2, r1, lsl r0
    1554:	beq	1568 <find_minlength+0x86c>
    1558:	add	r7, r7, #1
    155c:	mov	r0, #1
    1560:	mla	r8, r0, r3, r8
    1564:	b	d9c <find_minlength+0xa0>
    1568:	ldrb	r0, [r7, #1]
    156c:	ldrb	r2, [r7, #2]
    1570:	add	r1, r7, #5
    1574:	mov	r7, r1
    1578:	orr	r0, r2, r0, lsl #8
    157c:	mla	r8, r0, r3, r8
    1580:	b	d9c <find_minlength+0xa0>
    1584:	mov	r5, sl
    1588:	ldr	r6, [sp, #16]
    158c:	ldr	sl, [sp, #12]
    1590:	ldr	r4, [fp, #12]
    1594:	ldr	r9, [sp, #20]
    1598:	mov	r0, #1
    159c:	mov	r3, #0
    15a0:	mov	r2, #5
    15a4:	str	r0, [sp, #28]
    15a8:	b	151c <find_minlength+0x820>
    15ac:	mov	r3, r6
    15b0:	ldr	r6, [sp, #16]
    15b4:	b	1480 <find_minlength+0x784>
    15b8:	mvn	r0, #2
    15bc:	sub	sp, fp, #28
    15c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15c4:	mvn	r0, #1
    15c8:	sub	sp, fp, #28
    15cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000015d0 <coda_pcre_free_study>:
    15d0:	cmp	r0, #0
    15d4:	bxeq	lr
    15d8:	movw	r1, #0
    15dc:	movt	r1, #0
    15e0:	ldr	r1, [r1]
    15e4:	bx	r1
