
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/flatcc.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <visit_dep>:
   0:	add	r0, r0, #172	; 0xac
   4:	mov	r2, #1
   8:	b	0 <ptr_set_insert_item>

0000000c <checkmem.part.0>:
   c:	movw	r3, #0
  10:	movt	r3, #0
  14:	str	r4, [sp, #-8]!
  18:	movw	r0, #0
  1c:	movt	r0, #0
  20:	ldr	r3, [r3]
  24:	mov	r2, #34	; 0x22
  28:	mov	r1, #1
  2c:	str	lr, [sp, #4]
  30:	bl	0 <fwrite>
  34:	mov	r0, #1
  38:	bl	0 <exit>

0000003c <flatcc_init_options>:
  3c:	mov	r2, #212	; 0xd4
  40:	mov	r1, #0
  44:	str	r4, [sp, #-16]!
  48:	mov	r4, r0
  4c:	add	r0, r0, #12
  50:	strd	r6, [sp, #4]
  54:	str	lr, [sp, #12]
  58:	movw	r6, #65534	; 0xfffe
  5c:	mov	r7, #0
  60:	bl	0 <memset>
  64:	mov	r2, #65536	; 0x10000
  68:	mov	r3, #2
  6c:	mov	ip, #100	; 0x64
  70:	movw	r0, #0
  74:	movt	r0, #0
  78:	movw	r1, #0
  7c:	movt	r1, #0
  80:	stm	r4, {r2, ip}
  84:	movw	r2, #0
  88:	movt	r2, #0
  8c:	str	ip, [r4, #8]
  90:	str	r3, [r4, #68]	; 0x44
  94:	mov	r3, #1
  98:	strd	r6, [r4, #88]	; 0x58
  9c:	strd	r0, [r4, #96]	; 0x60
  a0:	mov	r0, #4
  a4:	ldrd	r6, [sp, #4]
  a8:	str	r3, [r4, #16]
  ac:	str	r3, [r4, #20]
  b0:	str	r3, [r4, #24]
  b4:	str	r3, [r4, #28]
  b8:	str	r3, [r4, #32]
  bc:	str	r3, [r4, #36]	; 0x24
  c0:	str	r3, [r4, #40]	; 0x28
  c4:	str	r3, [r4, #44]	; 0x2c
  c8:	str	r3, [r4, #48]	; 0x30
  cc:	str	r3, [r4, #52]	; 0x34
  d0:	str	r0, [r4, #64]	; 0x40
  d4:	str	r3, [r4, #72]	; 0x48
  d8:	str	r3, [r4, #76]	; 0x4c
  dc:	str	r3, [r4, #84]	; 0x54
  e0:	str	r2, [r4, #104]	; 0x68
  e4:	str	r3, [r4, #136]	; 0x88
  e8:	str	r3, [r4, #140]	; 0x8c
  ec:	str	r0, [r4, #176]	; 0xb0
  f0:	str	r3, [r4, #184]	; 0xb8
  f4:	ldr	r4, [sp]
  f8:	add	sp, sp, #12
  fc:	pop	{pc}		; (ldr pc, [sp], #4)

00000100 <flatcc_create_context>:
 100:	strd	r4, [sp, #-28]!	; 0xffffffe4
 104:	mov	r5, r0
 108:	mov	r0, #560	; 0x230
 10c:	strd	r6, [sp, #8]
 110:	mov	r6, r1
 114:	mov	r7, r3
 118:	strd	r8, [sp, #16]
 11c:	mov	r8, r2
 120:	str	lr, [sp, #24]
 124:	sub	sp, sp, #12
 128:	bl	0 <malloc>
 12c:	subs	r4, r0, #0
 130:	beq	154 <flatcc_create_context+0x54>
 134:	mov	r9, #0
 138:	mov	r3, r8
 13c:	mov	r2, r6
 140:	mov	r1, r5
 144:	stm	sp, {r7, r9}
 148:	bl	0 <__flatcc_fb_init_parser>
 14c:	cmp	r0, r9
 150:	bne	170 <flatcc_create_context+0x70>
 154:	mov	r0, r4
 158:	add	sp, sp, #12
 15c:	ldrd	r4, [sp]
 160:	ldrd	r6, [sp, #8]
 164:	ldrd	r8, [sp, #16]
 168:	add	sp, sp, #24
 16c:	pop	{pc}		; (ldr pc, [sp], #4)
 170:	mov	r0, r4
 174:	mov	r4, r9
 178:	bl	0 <free>
 17c:	b	154 <flatcc_create_context+0x54>

00000180 <flatcc_parse_buffer>:
 180:	ldr	r3, [r0, #128]	; 0x80
 184:	strd	r4, [sp, #-24]!	; 0xffffffe8
 188:	strd	r6, [sp, #8]
 18c:	mov	r6, r2
 190:	mov	r2, #1
 194:	str	r8, [sp, #16]
 198:	str	lr, [sp, #20]
 19c:	cmp	r3, #0
 1a0:	cmpne	r3, r6
 1a4:	str	r2, [r0, #140]	; 0x8c
 1a8:	movcc	r4, #1
 1ac:	movcs	r4, #0
 1b0:	bcc	214 <flatcc_parse_buffer+0x94>
 1b4:	mov	r5, r0
 1b8:	mov	r7, r1
 1bc:	add	r1, r0, #352	; 0x160
 1c0:	add	r0, r0, #524	; 0x20c
 1c4:	bl	0 <ptr_set_insert_item>
 1c8:	mov	r3, r4
 1cc:	mov	r2, r6
 1d0:	mov	r1, r7
 1d4:	mov	r0, r5
 1d8:	bl	0 <__flatcc_fb_parse>
 1dc:	cmp	r0, #0
 1e0:	bne	20c <flatcc_parse_buffer+0x8c>
 1e4:	mov	r0, r5
 1e8:	bl	0 <__flatcc_fb_build_schema>
 1ec:	adds	r0, r0, #0
 1f0:	movne	r0, #1
 1f4:	rsb	r0, r0, #0
 1f8:	ldrd	r4, [sp]
 1fc:	ldrd	r6, [sp, #8]
 200:	ldr	r8, [sp, #16]
 204:	add	sp, sp, #20
 208:	pop	{pc}		; (ldr pc, [sp], #4)
 20c:	mvn	r0, #0
 210:	b	1f8 <flatcc_parse_buffer+0x78>
 214:	movw	r1, #0
 218:	movt	r1, #0
 21c:	bl	0 <__flatcc_fb_print_error>
 220:	mvn	r0, #0
 224:	b	1f8 <flatcc_parse_buffer+0x78>

00000228 <flatcc_generate_binary_schema_to_buffer>:
 228:	push	{lr}		; (str lr, [sp, #-4]!)
 22c:	sub	sp, sp, #12
 230:	mov	ip, r0
 234:	add	r3, sp, #4
 238:	add	r0, r0, #128	; 0x80
 23c:	str	r2, [sp, #4]
 240:	mov	r2, r1
 244:	add	r1, ip, #352	; 0x160
 248:	bl	0 <__flatcc_fb_codegen_bfbs_to_buffer>
 24c:	cmp	r0, #0
 250:	ldrne	r0, [sp, #4]
 254:	mvneq	r0, #0
 258:	add	sp, sp, #12
 25c:	pop	{pc}		; (ldr pc, [sp], #4)

00000260 <flatcc_generate_binary_schema>:
 260:	mov	r3, r0
 264:	mov	r2, r1
 268:	add	r0, r0, #128	; 0x80
 26c:	add	r1, r3, #352	; 0x160
 270:	b	0 <__flatcc_fb_codegen_bfbs_alloc_buffer>

00000274 <flatcc_generate_files>:
 274:	strd	r4, [sp, #-16]!
 278:	subs	r5, r0, #0
 27c:	str	r6, [sp, #8]
 280:	str	lr, [sp, #12]
 284:	sub	sp, sp, #232	; 0xe8
 288:	beq	378 <flatcc_generate_files+0x104>
 28c:	ldr	r2, [r5, #108]	; 0x6c
 290:	cmp	r2, #0
 294:	bne	378 <flatcc_generate_files+0x104>
 298:	mov	r4, r5
 29c:	b	2a4 <flatcc_generate_files+0x30>
 2a0:	mov	r4, r3
 2a4:	ldr	r3, [r4]
 2a8:	str	r2, [r4, #4]
 2ac:	mov	r2, r4
 2b0:	cmp	r3, #0
 2b4:	bne	2a0 <flatcc_generate_files+0x2c>
 2b8:	ldr	r3, [r5, #308]	; 0x134
 2bc:	add	r6, r5, #128	; 0x80
 2c0:	cmp	r3, #0
 2c4:	bne	364 <flatcc_generate_files+0xf0>
 2c8:	mov	r1, r6
 2cc:	mov	r0, sp
 2d0:	bl	0 <__flatcc_fb_init_output_c>
 2d4:	cmp	r0, #0
 2d8:	bne	378 <flatcc_generate_files+0x104>
 2dc:	ldr	r3, [r5, #256]	; 0x100
 2e0:	cmp	r3, #0
 2e4:	beq	380 <flatcc_generate_files+0x10c>
 2e8:	ldr	r6, [r5, #120]	; 0x78
 2ec:	cmp	r6, #0
 2f0:	beq	310 <flatcc_generate_files+0x9c>
 2f4:	ldr	r3, [r5, #300]	; 0x12c
 2f8:	cmp	r3, #0
 2fc:	beq	394 <flatcc_generate_files+0x120>
 300:	ldr	r3, [r4, #108]	; 0x6c
 304:	cmp	r3, #0
 308:	beq	330 <flatcc_generate_files+0xbc>
 30c:	mov	r6, #1
 310:	mov	r0, sp
 314:	bl	0 <__flatcc_fb_end_output_c>
 318:	mov	r0, r6
 31c:	add	sp, sp, #232	; 0xe8
 320:	ldrd	r4, [sp]
 324:	ldr	r6, [sp, #8]
 328:	add	sp, sp, #12
 32c:	pop	{pc}		; (ldr pc, [sp], #4)
 330:	add	r1, r4, #352	; 0x160
 334:	mov	r0, sp
 338:	bl	0 <__flatcc_fb_codegen_c>
 33c:	ldr	r4, [r4, #4]
 340:	clz	r3, r0
 344:	lsr	r3, r3, #5
 348:	cmp	r4, #0
 34c:	moveq	r3, #0
 350:	cmp	r3, #0
 354:	bne	300 <flatcc_generate_files+0x8c>
 358:	adds	r6, r0, #0
 35c:	movne	r6, #1
 360:	b	310 <flatcc_generate_files+0x9c>
 364:	add	r1, r5, #352	; 0x160
 368:	mov	r0, r6
 36c:	bl	0 <__flatcc_fb_codegen_bfbs_to_file>
 370:	cmp	r0, #0
 374:	beq	2c8 <flatcc_generate_files+0x54>
 378:	mvn	r6, #0
 37c:	b	318 <flatcc_generate_files+0xa4>
 380:	mov	r0, sp
 384:	bl	0 <__flatcc_fb_codegen_common_c>
 388:	subs	r6, r0, #0
 38c:	beq	2e8 <flatcc_generate_files+0x74>
 390:	b	310 <flatcc_generate_files+0x9c>
 394:	add	r1, r5, #352	; 0x160
 398:	mov	r0, sp
 39c:	bl	0 <__flatcc_fb_codegen_c>
 3a0:	mov	r6, r0
 3a4:	b	310 <flatcc_generate_files+0x9c>

000003a8 <flatcc_destroy_context>:
 3a8:	strd	r4, [sp, #-16]!
 3ac:	subs	r4, r0, #0
 3b0:	str	r6, [sp, #8]
 3b4:	str	lr, [sp, #12]
 3b8:	beq	3d8 <flatcc_destroy_context+0x30>
 3bc:	ldr	r5, [r4]
 3c0:	mov	r0, r4
 3c4:	bl	0 <__flatcc_fb_clear_parser>
 3c8:	mov	r0, r4
 3cc:	bl	0 <free>
 3d0:	subs	r4, r5, #0
 3d4:	bne	3bc <flatcc_destroy_context+0x14>
 3d8:	ldrd	r4, [sp]
 3dc:	ldr	r6, [sp, #8]
 3e0:	add	sp, sp, #12
 3e4:	pop	{pc}		; (ldr pc, [sp], #4)

000003e8 <flatcc_parse_file>:
 3e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
 3ec:	mov	r4, r0
 3f0:	mov	r0, r1
 3f4:	strd	r6, [sp, #8]
 3f8:	mov	r6, r1
 3fc:	strd	r8, [sp, #16]
 400:	strd	sl, [sp, #24]
 404:	add	fp, r4, #352	; 0x160
 408:	str	lr, [sp, #32]
 40c:	sub	sp, sp, #28
 410:	bl	0 <strlen>
 414:	mov	r9, r0
 418:	ldr	r0, [r4, #412]	; 0x19c
 41c:	mov	r1, fp
 420:	mov	r2, #1
 424:	add	r0, r0, #32
 428:	bl	0 <fb_schema_table_insert_item>
 42c:	cmp	r0, #0
 430:	beq	458 <flatcc_parse_file+0x70>
 434:	mov	sl, #0
 438:	mov	r0, sl
 43c:	add	sp, sp, #28
 440:	ldrd	r4, [sp]
 444:	ldrd	r6, [sp, #8]
 448:	ldrd	r8, [sp, #16]
 44c:	ldrd	sl, [sp, #24]
 450:	add	sp, sp, #32
 454:	pop	{pc}		; (ldr pc, [sp], #4)
 458:	ldr	r3, [r4, #552]	; 0x228
 45c:	cmp	r3, #0
 460:	str	r3, [sp, #8]
 464:	str	r3, [sp, #12]
 468:	beq	6ec <flatcc_parse_file+0x304>
 46c:	ldr	r3, [r4, #336]	; 0x150
 470:	cmp	r3, #0
 474:	movwle	r8, #0
 478:	movtle	r8, #0
 47c:	ble	668 <flatcc_parse_file+0x280>
 480:	movw	r8, #0
 484:	movt	r8, #0
 488:	mov	r5, #0
 48c:	mov	sl, #1
 490:	ldr	r3, [r4, #328]	; 0x148
 494:	ldr	r7, [r3, r5, lsl #2]
 498:	mov	r0, r7
 49c:	bl	0 <strlen>
 4a0:	mov	r1, r0
 4a4:	mov	r3, r9
 4a8:	stm	sp, {r8, sl}
 4ac:	mov	r0, r7
 4b0:	mov	r2, r6
 4b4:	bl	0 <__flatcc_fb_create_join_path_n>
 4b8:	subs	r7, r0, #0
 4bc:	beq	91c <flatcc_parse_file+0x534>
 4c0:	add	r2, sp, #20
 4c4:	ldr	r1, [r4, #128]	; 0x80
 4c8:	bl	0 <__flatcc_fb_read_file>
 4cc:	cmp	r0, #0
 4d0:	beq	628 <flatcc_parse_file+0x240>
 4d4:	mov	r1, r0
 4d8:	ldr	lr, [r4, #412]	; 0x19c
 4dc:	mov	r3, #1
 4e0:	mov	r0, r4
 4e4:	ldr	r5, [sp, #20]
 4e8:	ldr	ip, [lr, #56]	; 0x38
 4ec:	mov	r2, r5
 4f0:	add	ip, ip, r5
 4f4:	str	ip, [lr, #56]	; 0x38
 4f8:	str	r7, [r4, #548]	; 0x224
 4fc:	bl	0 <__flatcc_fb_parse>
 500:	subs	sl, r0, #0
 504:	bne	434 <flatcc_parse_file+0x4c>
 508:	ldr	r6, [r4, #352]	; 0x160
 50c:	cmp	r6, #0
 510:	beq	76c <flatcc_parse_file+0x384>
 514:	add	r3, r4, #128	; 0x80
 518:	movw	r9, #0
 51c:	movt	r9, #0
 520:	str	sl, [sp, #8]
 524:	mov	sl, r3
 528:	b	558 <flatcc_parse_file+0x170>
 52c:	add	r0, r0, #172	; 0xac
 530:	mov	r2, fp
 534:	mov	r1, r9
 538:	bl	0 <ptr_set_visit>
 53c:	mov	r0, r7
 540:	bl	3a8 <flatcc_destroy_context>
 544:	mov	r0, r8
 548:	bl	0 <free>
 54c:	ldr	r6, [r6]
 550:	cmp	r6, #0
 554:	beq	76c <flatcc_parse_file+0x384>
 558:	ldrd	r0, [r6, #8]
 55c:	bl	0 <__flatcc_fb_copy_path_n>
 560:	subs	r8, r0, #0
 564:	beq	8e8 <flatcc_parse_file+0x500>
 568:	ldr	r3, [r4, #132]	; 0x84
 56c:	ldr	r5, [r4, #412]	; 0x19c
 570:	ldr	r2, [r5, #52]	; 0x34
 574:	cmp	r2, r3
 578:	cmpge	r3, #0
 57c:	bgt	904 <flatcc_parse_file+0x51c>
 580:	ldr	r2, [r5, #48]	; 0x30
 584:	ldr	r3, [r4, #136]	; 0x88
 588:	cmp	r2, r3
 58c:	cmpge	r3, #0
 590:	bgt	8ec <flatcc_parse_file+0x504>
 594:	mov	r0, #560	; 0x230
 598:	bl	0 <malloc>
 59c:	subs	r7, r0, #0
 5a0:	beq	74c <flatcc_parse_file+0x364>
 5a4:	ldr	ip, [r4, #12]
 5a8:	mov	r2, r8
 5ac:	mov	r1, sl
 5b0:	str	r5, [sp, #4]
 5b4:	ldr	r3, [r4, #8]
 5b8:	str	ip, [sp]
 5bc:	bl	0 <__flatcc_fb_init_parser>
 5c0:	cmp	r0, #0
 5c4:	bne	75c <flatcc_parse_file+0x374>
 5c8:	add	r1, r7, #352	; 0x160
 5cc:	add	r0, r5, #32
 5d0:	bl	0 <fb_schema_table_find_item>
 5d4:	cmp	r0, #0
 5d8:	bne	52c <flatcc_parse_file+0x144>
 5dc:	ldrd	r2, [r5, #48]	; 0x30
 5e0:	mov	r1, r8
 5e4:	ldr	r0, [r4]
 5e8:	str	r7, [r4]
 5ec:	ldr	ip, [r4, #548]	; 0x224
 5f0:	add	r3, r3, #1
 5f4:	add	r2, r2, #1
 5f8:	str	r0, [r7]
 5fc:	mov	r0, r7
 600:	str	ip, [r7, #552]	; 0x228
 604:	strd	r2, [r5, #48]	; 0x30
 608:	bl	3e8 <flatcc_parse_file>
 60c:	cmp	r0, #0
 610:	bne	74c <flatcc_parse_file+0x364>
 614:	add	r0, r7, #524	; 0x20c
 618:	mov	r2, fp
 61c:	mov	r1, r9
 620:	bl	0 <ptr_set_visit>
 624:	b	544 <flatcc_parse_file+0x15c>
 628:	mov	r0, r7
 62c:	bl	0 <free>
 630:	ldr	r2, [sp, #20]
 634:	ldr	r3, [r4, #128]	; 0x80
 638:	cmp	r3, #0
 63c:	cmpne	r3, r2
 640:	bcc	6d4 <flatcc_parse_file+0x2ec>
 644:	ldr	r3, [r4, #336]	; 0x150
 648:	add	r5, r5, #1
 64c:	cmp	r3, r5
 650:	bgt	490 <flatcc_parse_file+0xa8>
 654:	ldr	r3, [sp, #8]
 658:	cmp	r3, #0
 65c:	beq	730 <flatcc_parse_file+0x348>
 660:	ldr	r3, [r4, #552]	; 0x228
 664:	str	r3, [sp, #8]
 668:	ldr	r5, [sp, #8]
 66c:	mov	r0, r5
 670:	bl	0 <strlen>
 674:	mov	r1, r0
 678:	mov	r0, r5
 67c:	bl	0 <__flatcc_fb_find_basename>
 680:	mov	ip, #1
 684:	mov	r1, r0
 688:	mov	r3, r9
 68c:	mov	r0, r5
 690:	mov	r2, r6
 694:	stm	sp, {r8, ip}
 698:	bl	0 <__flatcc_fb_create_join_path_n>
 69c:	subs	r7, r0, #0
 6a0:	beq	8e8 <flatcc_parse_file+0x500>
 6a4:	add	r2, sp, #20
 6a8:	ldr	r1, [r4, #128]	; 0x80
 6ac:	bl	0 <__flatcc_fb_read_file>
 6b0:	subs	r1, r0, #0
 6b4:	bne	4d8 <flatcc_parse_file+0xf0>
 6b8:	mov	r0, r7
 6bc:	bl	0 <free>
 6c0:	ldr	r2, [sp, #20]
 6c4:	ldr	r3, [r4, #128]	; 0x80
 6c8:	cmp	r3, #0
 6cc:	cmpne	r3, r2
 6d0:	bcs	730 <flatcc_parse_file+0x348>
 6d4:	mov	r0, r4
 6d8:	movw	r1, #0
 6dc:	movt	r1, #0
 6e0:	mvn	sl, #0
 6e4:	bl	0 <__flatcc_fb_print_error>
 6e8:	b	438 <flatcc_parse_file+0x50>
 6ec:	add	r2, sp, #20
 6f0:	mov	r0, r6
 6f4:	ldr	r1, [r4, #128]	; 0x80
 6f8:	bl	0 <__flatcc_fb_read_file>
 6fc:	subs	r1, r0, #0
 700:	bne	8d0 <flatcc_parse_file+0x4e8>
 704:	ldr	r1, [sp, #20]
 708:	ldr	r3, [r4, #412]	; 0x19c
 70c:	ldr	r2, [r4, #128]	; 0x80
 710:	ldr	r3, [r3, #56]	; 0x38
 714:	add	r3, r3, r1
 718:	cmp	r2, #0
 71c:	cmpne	r3, r2
 720:	bhi	6d4 <flatcc_parse_file+0x2ec>
 724:	ldr	r3, [r4, #336]	; 0x150
 728:	cmp	r3, #0
 72c:	bgt	480 <flatcc_parse_file+0x98>
 730:	mov	r2, r6
 734:	mov	r0, r4
 738:	movw	r1, #0
 73c:	movt	r1, #0
 740:	bl	0 <__flatcc_fb_print_error>
 744:	mvn	sl, #0
 748:	b	438 <flatcc_parse_file+0x50>
 74c:	ldr	sl, [sp, #8]
 750:	mov	r0, r8
 754:	bl	0 <free>
 758:	b	438 <flatcc_parse_file+0x50>
 75c:	mov	r0, r7
 760:	ldr	sl, [sp, #8]
 764:	bl	0 <free>
 768:	b	750 <flatcc_parse_file+0x368>
 76c:	mov	r1, fp
 770:	mov	r2, #1
 774:	add	r0, r4, #524	; 0x20c
 778:	bl	0 <ptr_set_insert_item>
 77c:	mov	r0, r4
 780:	bl	0 <__flatcc_fb_build_schema>
 784:	subs	sl, r0, #0
 788:	bne	434 <flatcc_parse_file+0x4c>
 78c:	ldr	r3, [sp, #12]
 790:	ldr	r2, [r4, #240]	; 0xf0
 794:	clz	r3, r3
 798:	lsr	r3, r3, #5
 79c:	cmp	r2, #0
 7a0:	moveq	r3, #0
 7a4:	cmp	r3, #0
 7a8:	beq	434 <flatcc_parse_file+0x4c>
 7ac:	ldr	r3, [r4, #552]	; 0x228
 7b0:	cmp	r3, #0
 7b4:	bne	9a8 <flatcc_parse_file+0x5c0>
 7b8:	ldr	r1, [r4, #244]	; 0xf4
 7bc:	movw	r2, #0
 7c0:	movt	r2, #0
 7c4:	ldr	r5, [r4, #344]	; 0x158
 7c8:	ldr	r6, [r4, #248]	; 0xf8
 7cc:	ldr	lr, [r4, #512]	; 0x200
 7d0:	cmp	r5, #0
 7d4:	moveq	r5, r2
 7d8:	cmp	r1, #0
 7dc:	movne	r0, r2
 7e0:	beq	994 <flatcc_parse_file+0x5ac>
 7e4:	cmp	r6, #0
 7e8:	movwne	r5, #0
 7ec:	movtne	r5, #0
 7f0:	movne	r7, r5
 7f4:	beq	96c <flatcc_parse_file+0x584>
 7f8:	mov	r3, #1
 7fc:	bl	0 <__flatcc_fb_create_join_path>
 800:	subs	r8, r0, #0
 804:	beq	8e8 <flatcc_parse_file+0x500>
 808:	mov	r0, r5
 80c:	mov	r2, r7
 810:	mov	r1, r6
 814:	mov	r3, #1
 818:	bl	0 <__flatcc_fb_create_join_path>
 81c:	subs	r5, r0, #0
 820:	beq	8e8 <flatcc_parse_file+0x500>
 824:	bl	0 <__flatcc_fb_create_make_path>
 828:	subs	r9, r0, #0
 82c:	beq	8e8 <flatcc_parse_file+0x500>
 830:	mov	r0, r5
 834:	bl	0 <free>
 838:	movw	r1, #0
 83c:	movt	r1, #0
 840:	mov	r0, r8
 844:	bl	0 <fopen>
 848:	subs	r6, r0, #0
 84c:	beq	944 <flatcc_parse_file+0x55c>
 850:	movw	r1, #0
 854:	movt	r1, #0
 858:	mov	r2, r9
 85c:	bl	0 <fprintf>
 860:	ldr	r4, [r4]
 864:	cmp	r4, #0
 868:	beq	8a8 <flatcc_parse_file+0x4c0>
 86c:	movw	r7, #0
 870:	movt	r7, #0
 874:	ldr	r0, [r4, #548]	; 0x224
 878:	bl	0 <__flatcc_fb_create_make_path>
 87c:	subs	r5, r0, #0
 880:	beq	8e8 <flatcc_parse_file+0x500>
 884:	mov	r2, r5
 888:	mov	r1, r7
 88c:	mov	r0, r6
 890:	bl	0 <fprintf>
 894:	ldr	r4, [r4]
 898:	mov	r0, r5
 89c:	bl	0 <free>
 8a0:	cmp	r4, #0
 8a4:	bne	874 <flatcc_parse_file+0x48c>
 8a8:	mov	r1, r6
 8ac:	mov	r0, #10
 8b0:	bl	0 <fputc>
 8b4:	mov	r0, r8
 8b8:	bl	0 <free>
 8bc:	mov	r0, r9
 8c0:	bl	0 <free>
 8c4:	mov	r0, r6
 8c8:	bl	0 <fclose>
 8cc:	b	438 <flatcc_parse_file+0x50>
 8d0:	mov	r0, r6
 8d4:	str	r1, [sp, #8]
 8d8:	bl	0 <__flatcc_fb_copy_path>
 8dc:	subs	r7, r0, #0
 8e0:	ldr	r1, [sp, #8]
 8e4:	bne	4d8 <flatcc_parse_file+0xf0>
 8e8:	bl	c <checkmem.part.0>
 8ec:	mov	r0, r4
 8f0:	movw	r1, #0
 8f4:	movt	r1, #0
 8f8:	ldr	sl, [sp, #8]
 8fc:	bl	0 <__flatcc_fb_print_error>
 900:	b	750 <flatcc_parse_file+0x368>
 904:	mov	r0, r4
 908:	movw	r1, #0
 90c:	movt	r1, #0
 910:	ldr	sl, [sp, #8]
 914:	bl	0 <__flatcc_fb_print_error>
 918:	b	750 <flatcc_parse_file+0x368>
 91c:	movw	r3, #0
 920:	movt	r3, #0
 924:	movw	r0, #0
 928:	movt	r0, #0
 92c:	ldr	r3, [r3]
 930:	mov	r2, #34	; 0x22
 934:	mov	r1, #1
 938:	bl	0 <fwrite>
 93c:	mov	r0, #1
 940:	bl	0 <exit>
 944:	mov	r2, r8
 948:	mov	r0, r4
 94c:	movw	r1, #0
 950:	movt	r1, #0
 954:	bl	0 <__flatcc_fb_print_error>
 958:	mov	r0, r8
 95c:	bl	0 <free>
 960:	mov	r0, r9
 964:	bl	0 <free>
 968:	b	438 <flatcc_parse_file+0x50>
 96c:	ldr	r7, [r4, #308]	; 0x134
 970:	movw	ip, #0
 974:	movt	ip, #0
 978:	movw	r3, #0
 97c:	movt	r3, #0
 980:	mov	r6, lr
 984:	cmp	r7, #0
 988:	movne	r7, ip
 98c:	moveq	r7, r3
 990:	b	7f8 <flatcc_parse_file+0x410>
 994:	movw	r2, #0
 998:	movt	r2, #0
 99c:	mov	r0, r5
 9a0:	mov	r1, lr
 9a4:	b	7e4 <flatcc_parse_file+0x3fc>
 9a8:	movw	r3, #0
 9ac:	movt	r3, #0
 9b0:	movw	r1, #0
 9b4:	movt	r1, #0
 9b8:	movw	r0, #0
 9bc:	movt	r0, #0
 9c0:	mov	r2, #220	; 0xdc
 9c4:	bl	0 <__assert_fail>
