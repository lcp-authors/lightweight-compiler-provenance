
../compcert-repos/prog2/CMakeFiles/2.3.2.dir/Aula02_Alocacao_dinamica_de_memoria_e_vetores/03.2_.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <imprime>:
   0:	mov	r1, #0
   4:	strd	r4, [sp, #-16]!
   8:	movw	r5, #0
   c:	movt	r5, #0
  10:	str	r6, [sp, #8]
  14:	mov	r6, r0
  18:	str	lr, [sp, #12]
  1c:	mov	r0, r6
  20:	add	r4, r1, #1
  24:	bl	0 <vetor_elemento>
  28:	mov	r2, r0
  2c:	mov	r1, r4
  30:	mov	r0, r5
  34:	bl	0 <printf>
  38:	cmp	r4, #5
  3c:	mov	r1, r4
  40:	bne	1c <imprime+0x1c>
  44:	ldrd	r4, [sp]
  48:	ldr	r6, [sp, #8]
  4c:	add	sp, sp, #12
  50:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text.startup:

00000000 <main>:
   0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   4:	mov	r4, #0
   8:	strd	r6, [sp, #8]
   c:	movw	r7, #0
  10:	movt	r7, #0
  14:	strd	r8, [sp, #16]
  18:	movw	r8, #0
  1c:	movt	r8, #0
  20:	str	lr, [sp, #24]
  24:	sub	sp, sp, #108	; 0x6c
  28:	mov	r9, r4
  2c:	bl	0 <vetor_novo>
  30:	mov	r6, r0
  34:	add	r5, r4, #1
  38:	mov	r0, r7
  3c:	mov	r1, r5
  40:	bl	0 <printf>
  44:	mov	r1, #100	; 0x64
  48:	add	r0, sp, #4
  4c:	ldr	r2, [r8]
  50:	bl	0 <fgets>
  54:	add	r0, sp, #4
  58:	bl	0 <strlen>
  5c:	add	r3, sp, #104	; 0x68
  60:	mov	r2, r4
  64:	add	r3, r3, r0
  68:	add	r1, sp, #4
  6c:	mov	r0, r6
  70:	mov	r4, r5
  74:	strb	r9, [r3, #-101]	; 0xffffff9b
  78:	bl	0 <vetor_insere>
  7c:	cmp	r5, #5
  80:	bne	34 <main+0x34>
  84:	mov	r0, r6
  88:	bl	0 <main>
  8c:	movw	r0, #0
  90:	movt	r0, #0
  94:	bl	0 <printf>
  98:	add	r1, sp, #4
  9c:	movw	r0, #0
  a0:	movt	r0, #0
  a4:	bl	0 <__isoc99_scanf>
  a8:	add	r1, sp, #4
  ac:	mov	r0, r6
  b0:	bl	0 <vetor_pesquisa>
  b4:	mov	r1, r0
  b8:	mov	r0, r6
  bc:	bl	0 <vetor_remove>
  c0:	cmp	r0, #0
  c4:	bne	118 <main+0x118>
  c8:	mov	r0, r6
  cc:	bl	0 <main>
  d0:	mov	r0, r6
  d4:	bl	0 <vetor_ordena>
  d8:	cmp	r0, #0
  dc:	bne	128 <main+0x128>
  e0:	movw	r0, #0
  e4:	movt	r0, #0
  e8:	bl	0 <puts>
  ec:	mov	r0, r6
  f0:	bl	0 <main>
  f4:	mov	r0, r6
  f8:	bl	0 <vetor_apaga>
  fc:	mov	r0, #0
 100:	add	sp, sp, #108	; 0x6c
 104:	ldrd	r4, [sp]
 108:	ldrd	r6, [sp, #8]
 10c:	ldrd	r8, [sp, #16]
 110:	add	sp, sp, #24
 114:	pop	{pc}		; (ldr pc, [sp], #4)
 118:	movw	r0, #0
 11c:	movt	r0, #0
 120:	bl	0 <puts>
 124:	b	d0 <main+0xd0>
 128:	movw	r0, #0
 12c:	movt	r0, #0
 130:	bl	0 <printf>
 134:	b	e0 <main+0xe0>
