
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_type_delete>:
       0:	push	{r4, r5, r6, lr}
       4:	subs	r4, r0, #0
       8:	beq	104 <coda_mem_type_delete+0x104>
       c:	ldr	r3, [r4]
      10:	cmp	r3, #100	; 0x64
      14:	bne	118 <coda_mem_type_delete+0x118>
      18:	ldr	r3, [r4, #8]
      1c:	cmp	r3, #1
      20:	beq	b8 <coda_mem_type_delete+0xb8>
      24:	bcc	6c <coda_mem_type_delete+0x6c>
      28:	cmp	r3, #3
      2c:	bne	40 <coda_mem_type_delete+0x40>
      30:	ldr	r0, [r4, #16]
      34:	cmp	r0, #0
      38:	beq	40 <coda_mem_type_delete+0x40>
      3c:	bl	0 <coda_dynamic_type_delete>
      40:	ldr	r0, [r4, #12]
      44:	cmp	r0, #0
      48:	beq	50 <coda_mem_type_delete+0x50>
      4c:	bl	0 <coda_dynamic_type_delete>
      50:	ldr	r0, [r4, #4]
      54:	cmp	r0, #0
      58:	beq	60 <coda_mem_type_delete+0x60>
      5c:	bl	0 <coda_type_release>
      60:	mov	r0, r4
      64:	pop	{r4, r5, r6, lr}
      68:	b	0 <free>
      6c:	ldr	r3, [r4, #20]
      70:	cmp	r3, #0
      74:	beq	40 <coda_mem_type_delete+0x40>
      78:	ldr	r2, [r4, #16]
      7c:	cmp	r2, #0
      80:	ble	ac <coda_mem_type_delete+0xac>
      84:	mov	r5, #0
      88:	ldr	r0, [r3, r5, lsl #2]
      8c:	cmp	r0, #0
      90:	beq	a0 <coda_mem_type_delete+0xa0>
      94:	bl	0 <coda_dynamic_type_delete>
      98:	ldr	r3, [r4, #20]
      9c:	ldr	r2, [r4, #16]
      a0:	add	r5, r5, #1
      a4:	cmp	r2, r5
      a8:	bgt	88 <coda_mem_type_delete+0x88>
      ac:	mov	r0, r3
      b0:	bl	0 <free>
      b4:	b	40 <coda_mem_type_delete+0x40>
      b8:	ldr	r3, [r4, #20]
      bc:	cmp	r3, #0
      c0:	beq	40 <coda_mem_type_delete+0x40>
      c4:	ldr	r2, [r4, #16]
      c8:	cmp	r2, #0
      cc:	ble	ac <coda_mem_type_delete+0xac>
      d0:	mov	r5, #0
      d4:	ldr	r0, [r3, r5, lsl #2]
      d8:	cmp	r0, #0
      dc:	beq	ec <coda_mem_type_delete+0xec>
      e0:	bl	0 <coda_dynamic_type_delete>
      e4:	ldr	r3, [r4, #20]
      e8:	ldr	r2, [r4, #16]
      ec:	add	r5, r5, #1
      f0:	cmp	r2, r5
      f4:	bgt	d4 <coda_mem_type_delete+0xd4>
      f8:	mov	r0, r3
      fc:	bl	0 <free>
     100:	b	40 <coda_mem_type_delete+0x40>
     104:	ldr	r3, [pc, #32]	; 12c <coda_mem_type_delete+0x12c>
     108:	mov	r2, #42	; 0x2a
     10c:	ldr	r1, [pc, #28]	; 130 <coda_mem_type_delete+0x130>
     110:	ldr	r0, [pc, #28]	; 134 <coda_mem_type_delete+0x134>
     114:	bl	0 <__assert_fail>
     118:	ldr	r3, [pc, #12]	; 12c <coda_mem_type_delete+0x12c>
     11c:	mov	r2, #43	; 0x2b
     120:	ldr	r1, [pc, #8]	; 130 <coda_mem_type_delete+0x130>
     124:	ldr	r0, [pc, #12]	; 138 <coda_mem_type_delete+0x138>
     128:	bl	0 <__assert_fail>
     12c:	.word	0x00000014
     130:	.word	0x00000000
     134:	.word	0x00000078
     138:	.word	0x00000088

0000013c <coda_mem_type_set_attributes>:
     13c:	push	{r4, r5, r6, lr}
     140:	subs	r5, r0, #0
     144:	beq	1e8 <coda_mem_type_set_attributes+0xac>
     148:	cmp	r1, #0
     14c:	mov	r4, r1
     150:	beq	204 <coda_mem_type_set_attributes+0xc8>
     154:	ldr	r3, [r5, #12]
     158:	cmp	r3, #0
     15c:	bne	1b0 <coda_mem_type_set_attributes+0x74>
     160:	cmp	r2, #0
     164:	beq	190 <coda_mem_type_set_attributes+0x54>
     168:	ldr	r1, [r1, #4]
     16c:	ldr	r3, [r1, #8]
     170:	cmp	r3, #0
     174:	bne	220 <coda_mem_type_set_attributes+0xe4>
     178:	ldr	r0, [r5, #4]
     17c:	bl	0 <coda_type_set_attributes>
     180:	cmp	r0, #0
     184:	beq	1a4 <coda_mem_type_set_attributes+0x68>
     188:	mvn	r0, #0
     18c:	pop	{r4, r5, r6, pc}
     190:	ldr	r2, [r5, #4]
     194:	ldr	r3, [r1, #4]
     198:	ldr	r2, [r2, #36]	; 0x24
     19c:	cmp	r2, r3
     1a0:	bne	1cc <coda_mem_type_set_attributes+0x90>
     1a4:	str	r4, [r5, #12]
     1a8:	mov	r0, #0
     1ac:	pop	{r4, r5, r6, pc}
     1b0:	mov	r3, #396	; 0x18c
     1b4:	ldr	r2, [pc, #120]	; 234 <coda_mem_type_set_attributes+0xf8>
     1b8:	ldr	r1, [pc, #120]	; 238 <coda_mem_type_set_attributes+0xfc>
     1bc:	mvn	r0, #99	; 0x63
     1c0:	bl	0 <coda_set_error>
     1c4:	mvn	r0, #0
     1c8:	pop	{r4, r5, r6, pc}
     1cc:	mov	r3, #412	; 0x19c
     1d0:	ldr	r2, [pc, #92]	; 234 <coda_mem_type_set_attributes+0xf8>
     1d4:	ldr	r1, [pc, #96]	; 23c <coda_mem_type_set_attributes+0x100>
     1d8:	mvn	r0, #99	; 0x63
     1dc:	bl	0 <coda_set_error>
     1e0:	mvn	r0, #0
     1e4:	pop	{r4, r5, r6, pc}
     1e8:	ldr	r3, [pc, #80]	; 240 <coda_mem_type_set_attributes+0x104>
     1ec:	ldr	r2, [pc, #64]	; 234 <coda_mem_type_set_attributes+0xf8>
     1f0:	ldr	r1, [pc, #76]	; 244 <coda_mem_type_set_attributes+0x108>
     1f4:	mvn	r0, #99	; 0x63
     1f8:	bl	0 <coda_set_error>
     1fc:	mvn	r0, #0
     200:	pop	{r4, r5, r6, pc}
     204:	ldr	r3, [pc, #60]	; 248 <coda_mem_type_set_attributes+0x10c>
     208:	ldr	r2, [pc, #36]	; 234 <coda_mem_type_set_attributes+0xf8>
     20c:	ldr	r1, [pc, #56]	; 24c <coda_mem_type_set_attributes+0x110>
     210:	mvn	r0, #99	; 0x63
     214:	bl	0 <coda_set_error>
     218:	mvn	r0, #0
     21c:	pop	{r4, r5, r6, pc}
     220:	ldr	r3, [pc, #40]	; 250 <coda_mem_type_set_attributes+0x114>
     224:	ldr	r2, [pc, #40]	; 254 <coda_mem_type_set_attributes+0x118>
     228:	ldr	r1, [pc, #4]	; 234 <coda_mem_type_set_attributes+0xf8>
     22c:	ldr	r0, [pc, #36]	; 258 <coda_mem_type_set_attributes+0x11c>
     230:	bl	0 <__assert_fail>
     234:	.word	0x00000000
     238:	.word	0x000000f4
     23c:	.word	0x00000150
     240:	.word	0x00000182
     244:	.word	0x000000b0
     248:	.word	0x00000187
     24c:	.word	0x000000d0
     250:	.word	0x0000002c
     254:	.word	0x00000191
     258:	.word	0x00000118

0000025c <coda_mem_record_new>:
     25c:	push	{r4, r5, r6, r7, lr}
     260:	subs	r4, r0, #0
     264:	sub	sp, sp, #12
     268:	beq	364 <coda_mem_record_new+0x108>
     26c:	ldr	r3, [r4, #64]	; 0x40
     270:	mov	r6, r1
     274:	cmp	r3, #0
     278:	beq	288 <coda_mem_record_new+0x2c>
     27c:	ldr	r3, [r4, #68]	; 0x44
     280:	cmp	r3, #0
     284:	bne	318 <coda_mem_record_new+0xbc>
     288:	mov	r0, #24
     28c:	bl	0 <malloc>
     290:	subs	r5, r0, #0
     294:	beq	380 <coda_mem_record_new+0x124>
     298:	ldr	r2, [r4, #4]
     29c:	mov	r3, #0
     2a0:	add	r2, r2, #1
     2a4:	mov	r1, #100	; 0x64
     2a8:	cmp	r6, #0
     2ac:	str	r4, [r5, #4]
     2b0:	str	r6, [r5, #12]
     2b4:	str	r2, [r4, #4]
     2b8:	str	r1, [r5]
     2bc:	str	r3, [r5, #8]
     2c0:	str	r3, [r5, #16]
     2c4:	str	r3, [r5, #20]
     2c8:	beq	334 <coda_mem_record_new+0xd8>
     2cc:	ldr	r7, [r4, #48]	; 0x30
     2d0:	cmp	r7, #0
     2d4:	ble	30c <coda_mem_record_new+0xb0>
     2d8:	lsl	r6, r7, #2
     2dc:	mov	r0, r6
     2e0:	bl	0 <malloc>
     2e4:	cmp	r0, #0
     2e8:	mov	r4, r0
     2ec:	str	r0, [r5, #20]
     2f0:	addne	r2, r0, r6
     2f4:	movne	r3, #0
     2f8:	beq	3a0 <coda_mem_record_new+0x144>
     2fc:	str	r3, [r0], #4
     300:	cmp	r2, r0
     304:	bne	2fc <coda_mem_record_new+0xa0>
     308:	str	r7, [r5, #16]
     30c:	mov	r0, r5
     310:	add	sp, sp, #12
     314:	pop	{r4, r5, r6, r7, pc}
     318:	ldr	r1, [pc, #172]	; 3cc <coda_mem_record_new+0x170>
     31c:	mvn	r0, #99	; 0x63
     320:	bl	0 <coda_set_error>
     324:	mov	r5, #0
     328:	mov	r0, r5
     32c:	add	sp, sp, #12
     330:	pop	{r4, r5, r6, r7, pc}
     334:	ldr	r0, [r4, #36]	; 0x24
     338:	cmp	r0, #0
     33c:	beq	2cc <coda_mem_record_new+0x70>
     340:	mov	r1, r6
     344:	bl	25c <coda_mem_record_new>
     348:	cmp	r0, #0
     34c:	str	r0, [r5, #12]
     350:	bne	2cc <coda_mem_record_new+0x70>
     354:	mov	r0, r5
     358:	bl	0 <coda_mem_type_delete>
     35c:	mov	r5, r6
     360:	b	30c <coda_mem_record_new+0xb0>
     364:	mov	r3, #428	; 0x1ac
     368:	ldr	r2, [pc, #96]	; 3d0 <coda_mem_record_new+0x174>
     36c:	ldr	r1, [pc, #96]	; 3d4 <coda_mem_record_new+0x178>
     370:	mvn	r0, #99	; 0x63
     374:	mov	r5, r4
     378:	bl	0 <coda_set_error>
     37c:	b	30c <coda_mem_record_new+0xb0>
     380:	ldr	r2, [pc, #80]	; 3d8 <coda_mem_record_new+0x17c>
     384:	ldr	r3, [pc, #68]	; 3d0 <coda_mem_record_new+0x174>
     388:	str	r2, [sp]
     38c:	ldr	r1, [pc, #72]	; 3dc <coda_mem_record_new+0x180>
     390:	mov	r2, #24
     394:	mvn	r0, #0
     398:	bl	0 <coda_set_error>
     39c:	b	30c <coda_mem_record_new+0xb0>
     3a0:	ldr	r3, [pc, #56]	; 3e0 <coda_mem_record_new+0x184>
     3a4:	mov	r2, r6
     3a8:	str	r3, [sp]
     3ac:	ldr	r1, [pc, #40]	; 3dc <coda_mem_record_new+0x180>
     3b0:	ldr	r3, [pc, #24]	; 3d0 <coda_mem_record_new+0x174>
     3b4:	mvn	r0, #0
     3b8:	bl	0 <coda_set_error>
     3bc:	mov	r0, r5
     3c0:	bl	0 <coda_mem_type_delete>
     3c4:	mov	r5, r4
     3c8:	b	30c <coda_mem_record_new+0xb0>
     3cc:	.word	0x000001ac
     3d0:	.word	0x00000000
     3d4:	.word	0x00000188
     3d8:	.word	0x000001ba
     3dc:	.word	0x000001f8
     3e0:	.word	0x000001d5

000003e4 <coda_mem_type_add_attribute>:
     3e4:	push	{r4, r5, r6, r7, r8, lr}
     3e8:	subs	r6, r0, #0
     3ec:	sub	sp, sp, #8
     3f0:	beq	624 <coda_mem_type_add_attribute+0x240>
     3f4:	cmp	r1, #0
     3f8:	mov	r7, r1
     3fc:	beq	680 <coda_mem_type_add_attribute+0x29c>
     400:	cmp	r2, #0
     404:	mov	r5, r2
     408:	beq	664 <coda_mem_type_add_attribute+0x280>
     40c:	ldr	r4, [r6, #12]
     410:	mov	r8, r3
     414:	cmp	r4, #0
     418:	beq	498 <coda_mem_type_add_attribute+0xb4>
     41c:	ldr	r3, [r4]
     420:	cmp	r3, #100	; 0x64
     424:	bne	5e8 <coda_mem_type_add_attribute+0x204>
     428:	ldr	r2, [r6, #4]
     42c:	ldr	r3, [r4, #4]
     430:	ldr	r2, [r2, #36]	; 0x24
     434:	cmp	r2, r3
     438:	bne	6cc <coda_mem_type_add_attribute+0x2e8>
     43c:	ldr	r0, [r2, #44]	; 0x2c
     440:	bl	0 <coda_hashtable_get_index_from_name>
     444:	cmp	r8, #0
     448:	mov	r6, r0
     44c:	bne	4dc <coda_mem_type_add_attribute+0xf8>
     450:	cmp	r0, #0
     454:	blt	640 <coda_mem_type_add_attribute+0x25c>
     458:	ldr	r3, [r4, #20]
     45c:	add	r0, r3, r0, lsl #2
     460:	ldr	r3, [r3, r6, lsl #2]
     464:	cmp	r3, #0
     468:	bne	5c4 <coda_mem_type_add_attribute+0x1e0>
     46c:	ldr	r2, [r4, #4]
     470:	ldr	r3, [r5, #4]
     474:	ldr	r2, [r2, #52]	; 0x34
     478:	ldr	r2, [r2, r6, lsl #2]
     47c:	ldr	r2, [r2, #8]
     480:	cmp	r2, r3
     484:	bne	5a0 <coda_mem_type_add_attribute+0x1bc>
     488:	str	r5, [r0]
     48c:	mov	r0, #0
     490:	add	sp, sp, #8
     494:	pop	{r4, r5, r6, r7, r8, pc}
     498:	cmp	r3, #0
     49c:	beq	69c <coda_mem_type_add_attribute+0x2b8>
     4a0:	ldr	r4, [r6, #4]
     4a4:	ldr	r0, [r4, #36]	; 0x24
     4a8:	cmp	r0, #0
     4ac:	beq	604 <coda_mem_type_add_attribute+0x220>
     4b0:	mov	r1, #0
     4b4:	bl	25c <coda_mem_record_new>
     4b8:	cmp	r0, #0
     4bc:	mov	r4, r0
     4c0:	str	r0, [r6, #12]
     4c4:	beq	5bc <coda_mem_type_add_attribute+0x1d8>
     4c8:	ldr	r3, [r0, #4]
     4cc:	mov	r1, r7
     4d0:	ldr	r0, [r3, #44]	; 0x2c
     4d4:	bl	0 <coda_hashtable_get_index_from_name>
     4d8:	mov	r6, r0
     4dc:	cmp	r6, #0
     4e0:	blt	564 <coda_mem_type_add_attribute+0x180>
     4e4:	ldr	r3, [r4, #16]
     4e8:	cmp	r3, r6
     4ec:	bgt	554 <coda_mem_type_add_attribute+0x170>
     4f0:	ldr	r2, [r4, #4]
     4f4:	ldr	r0, [r4, #20]
     4f8:	ldr	r1, [r2, #48]	; 0x30
     4fc:	cmp	r3, r1
     500:	addge	r0, r0, r6, lsl #2
     504:	bge	488 <coda_mem_type_add_attribute+0xa4>
     508:	lsl	r1, r1, #2
     50c:	bl	0 <realloc>
     510:	ldr	r2, [r4, #4]
     514:	cmp	r0, #0
     518:	beq	6a4 <coda_mem_type_add_attribute+0x2c0>
     51c:	ldr	ip, [r2, #48]	; 0x30
     520:	ldr	r3, [r4, #16]
     524:	str	r0, [r4, #20]
     528:	cmp	r3, ip
     52c:	addlt	r3, r0, r3, lsl #2
     530:	addlt	r1, r0, ip, lsl #2
     534:	movlt	r2, #0
     538:	bge	548 <coda_mem_type_add_attribute+0x164>
     53c:	str	r2, [r3], #4
     540:	cmp	r1, r3
     544:	bne	53c <coda_mem_type_add_attribute+0x158>
     548:	str	ip, [r4, #16]
     54c:	add	r0, r0, r6, lsl #2
     550:	b	488 <coda_mem_type_add_attribute+0xa4>
     554:	ldr	r0, [r4, #20]
     558:	ldr	r2, [r0, r6, lsl #2]
     55c:	cmp	r2, #0
     560:	beq	594 <coda_mem_type_add_attribute+0x1b0>
     564:	mov	r1, r7
     568:	ldr	r2, [r5, #4]
     56c:	ldr	r0, [r4, #4]
     570:	bl	0 <coda_type_record_create_field>
     574:	cmp	r0, #0
     578:	bne	5bc <coda_mem_type_add_attribute+0x1d8>
     57c:	ldr	r2, [r4, #4]
     580:	ldr	r3, [r4, #16]
     584:	ldr	r0, [r4, #20]
     588:	ldr	r1, [r2, #48]	; 0x30
     58c:	sub	r6, r1, #1
     590:	b	4fc <coda_mem_type_add_attribute+0x118>
     594:	ldr	r2, [r4, #4]
     598:	ldr	r1, [r2, #48]	; 0x30
     59c:	b	4fc <coda_mem_type_add_attribute+0x118>
     5a0:	ldr	r3, [pc, #312]	; 6e0 <coda_mem_type_add_attribute+0x2fc>
     5a4:	mov	r2, r7
     5a8:	str	r3, [sp]
     5ac:	ldr	r1, [pc, #304]	; 6e4 <coda_mem_type_add_attribute+0x300>
     5b0:	ldr	r3, [pc, #304]	; 6e8 <coda_mem_type_add_attribute+0x304>
     5b4:	mvn	r0, #99	; 0x63
     5b8:	bl	0 <coda_set_error>
     5bc:	mvn	r0, #0
     5c0:	b	490 <coda_mem_type_add_attribute+0xac>
     5c4:	ldr	r3, [pc, #288]	; 6ec <coda_mem_type_add_attribute+0x308>
     5c8:	mvn	r0, #99	; 0x63
     5cc:	str	r3, [sp]
     5d0:	mov	r2, r7
     5d4:	ldr	r3, [pc, #268]	; 6e8 <coda_mem_type_add_attribute+0x304>
     5d8:	ldr	r1, [pc, #272]	; 6f0 <coda_mem_type_add_attribute+0x30c>
     5dc:	bl	0 <coda_set_error>
     5e0:	mvn	r0, #0
     5e4:	b	490 <coda_mem_type_add_attribute+0xac>
     5e8:	mvn	r0, #99	; 0x63
     5ec:	ldr	r3, [pc, #256]	; 6f4 <coda_mem_type_add_attribute+0x310>
     5f0:	ldr	r2, [pc, #240]	; 6e8 <coda_mem_type_add_attribute+0x304>
     5f4:	ldr	r1, [pc, #252]	; 6f8 <coda_mem_type_add_attribute+0x314>
     5f8:	bl	0 <coda_set_error>
     5fc:	mvn	r0, #0
     600:	b	490 <coda_mem_type_add_attribute+0xac>
     604:	ldr	r0, [r4]
     608:	bl	0 <coda_type_record_new>
     60c:	ldr	r3, [r6, #4]
     610:	str	r0, [r4, #36]	; 0x24
     614:	ldr	r0, [r3, #36]	; 0x24
     618:	cmp	r0, #0
     61c:	bne	4b0 <coda_mem_type_add_attribute+0xcc>
     620:	b	5bc <coda_mem_type_add_attribute+0x1d8>
     624:	mvn	r0, #99	; 0x63
     628:	mov	r3, #272	; 0x110
     62c:	ldr	r2, [pc, #180]	; 6e8 <coda_mem_type_add_attribute+0x304>
     630:	ldr	r1, [pc, #196]	; 6fc <coda_mem_type_add_attribute+0x318>
     634:	bl	0 <coda_set_error>
     638:	mvn	r0, #0
     63c:	b	490 <coda_mem_type_add_attribute+0xac>
     640:	ldr	r3, [pc, #184]	; 700 <coda_mem_type_add_attribute+0x31c>
     644:	str	r3, [sp]
     648:	mvn	r0, #101	; 0x65
     64c:	mov	r2, r7
     650:	ldr	r3, [pc, #144]	; 6e8 <coda_mem_type_add_attribute+0x304>
     654:	ldr	r1, [pc, #168]	; 704 <coda_mem_type_add_attribute+0x320>
     658:	bl	0 <coda_set_error>
     65c:	mvn	r0, #0
     660:	b	490 <coda_mem_type_add_attribute+0xac>
     664:	mvn	r0, #99	; 0x63
     668:	ldr	r3, [pc, #152]	; 708 <coda_mem_type_add_attribute+0x324>
     66c:	ldr	r2, [pc, #116]	; 6e8 <coda_mem_type_add_attribute+0x304>
     670:	ldr	r1, [pc, #148]	; 70c <coda_mem_type_add_attribute+0x328>
     674:	bl	0 <coda_set_error>
     678:	mvn	r0, #0
     67c:	b	490 <coda_mem_type_add_attribute+0xac>
     680:	mvn	r0, #99	; 0x63
     684:	ldr	r3, [pc, #132]	; 710 <coda_mem_type_add_attribute+0x32c>
     688:	ldr	r2, [pc, #88]	; 6e8 <coda_mem_type_add_attribute+0x304>
     68c:	ldr	r1, [pc, #128]	; 714 <coda_mem_type_add_attribute+0x330>
     690:	bl	0 <coda_set_error>
     694:	mvn	r0, #0
     698:	b	490 <coda_mem_type_add_attribute+0xac>
     69c:	ldr	r3, [pc, #116]	; 718 <coda_mem_type_add_attribute+0x334>
     6a0:	b	644 <coda_mem_type_add_attribute+0x260>
     6a4:	ldr	r2, [r2, #48]	; 0x30
     6a8:	mov	r0, #344	; 0x158
     6ac:	str	r0, [sp]
     6b0:	ldr	r3, [pc, #48]	; 6e8 <coda_mem_type_add_attribute+0x304>
     6b4:	mvn	r0, #0
     6b8:	ldr	r1, [pc, #92]	; 71c <coda_mem_type_add_attribute+0x338>
     6bc:	lsl	r2, r2, #2
     6c0:	bl	0 <coda_set_error>
     6c4:	mvn	r0, #0
     6c8:	b	490 <coda_mem_type_add_attribute+0xac>
     6cc:	ldr	r3, [pc, #76]	; 720 <coda_mem_type_add_attribute+0x33c>
     6d0:	ldr	r2, [pc, #76]	; 724 <coda_mem_type_add_attribute+0x340>
     6d4:	ldr	r1, [pc, #12]	; 6e8 <coda_mem_type_add_attribute+0x304>
     6d8:	ldr	r0, [pc, #72]	; 728 <coda_mem_type_add_attribute+0x344>
     6dc:	bl	0 <__assert_fail>
     6e0:	.word	0x00000175
     6e4:	.word	0x00000348
     6e8:	.word	0x00000000
     6ec:	.word	0x0000016f
     6f0:	.word	0x00000320
     6f4:	.word	0x0000013b
     6f8:	.word	0x000002b4
     6fc:	.word	0x000000b0
     700:	.word	0x00000169
     704:	.word	0x0000027c
     708:	.word	0x0000011a
     70c:	.word	0x00000254
     710:	.word	0x00000115
     714:	.word	0x00000230
     718:	.word	0x00000133
     71c:	.word	0x000001f8
     720:	.word	0x0000004c
     724:	.word	0x0000013e
     728:	.word	0x000002d4

0000072c <coda_mem_record_add_field>:
     72c:	push	{r4, r5, r6, r7, lr}
     730:	subs	r4, r0, #0
     734:	sub	sp, sp, #12
     738:	beq	8a0 <coda_mem_record_add_field+0x174>
     73c:	cmp	r2, #0
     740:	mov	r5, r2
     744:	beq	884 <coda_mem_record_add_field+0x158>
     748:	cmp	r3, #0
     74c:	bne	7a8 <coda_mem_record_add_field+0x7c>
     750:	ldr	r3, [r4, #4]
     754:	mov	r6, r1
     758:	ldr	r0, [r3, #44]	; 0x2c
     75c:	bl	0 <coda_hashtable_get_index_from_name>
     760:	cmp	r0, #0
     764:	blt	8bc <coda_mem_record_add_field+0x190>
     768:	ldr	r1, [r4, #20]
     76c:	add	r3, r1, r0, lsl #2
     770:	ldr	r2, [r1, r0, lsl #2]
     774:	cmp	r2, #0
     778:	bne	834 <coda_mem_record_add_field+0x108>
     77c:	ldr	r1, [r4, #4]
     780:	ldr	r2, [r5, #4]
     784:	ldr	r1, [r1, #52]	; 0x34
     788:	ldr	r1, [r1, r0, lsl #2]
     78c:	ldr	r1, [r1, #8]
     790:	cmp	r1, r2
     794:	bne	858 <coda_mem_record_add_field+0x12c>
     798:	mov	r0, #0
     79c:	str	r5, [r3]
     7a0:	add	sp, sp, #12
     7a4:	pop	{r4, r5, r6, r7, pc}
     7a8:	ldr	r2, [r2, #4]
     7ac:	ldr	r0, [r4, #4]
     7b0:	bl	0 <coda_type_record_create_field>
     7b4:	subs	r7, r0, #0
     7b8:	bne	87c <coda_mem_record_add_field+0x150>
     7bc:	ldr	r2, [r4, #4]
     7c0:	ldr	r3, [r4, #16]
     7c4:	ldr	r1, [r2, #48]	; 0x30
     7c8:	cmp	r1, r3
     7cc:	sub	r0, r1, #1
     7d0:	ldrle	r3, [r4, #20]
     7d4:	addle	r3, r3, r0, lsl #2
     7d8:	ble	798 <coda_mem_record_add_field+0x6c>
     7dc:	lsl	r6, r1, #2
     7e0:	mov	r1, r6
     7e4:	ldr	r0, [r4, #20]
     7e8:	bl	0 <realloc>
     7ec:	ldr	r2, [r4, #4]
     7f0:	cmp	r0, #0
     7f4:	beq	8e0 <coda_mem_record_add_field+0x1b4>
     7f8:	ldr	ip, [r2, #48]	; 0x30
     7fc:	ldr	r3, [r4, #16]
     800:	str	r0, [r4, #20]
     804:	cmp	r3, ip
     808:	addlt	r3, r0, r3, lsl #2
     80c:	movlt	r2, r7
     810:	addlt	r1, r0, ip, lsl #2
     814:	bge	824 <coda_mem_record_add_field+0xf8>
     818:	str	r2, [r3], #4
     81c:	cmp	r1, r3
     820:	bne	818 <coda_mem_record_add_field+0xec>
     824:	sub	r3, r6, #4
     828:	add	r3, r0, r3
     82c:	str	ip, [r4, #16]
     830:	b	798 <coda_mem_record_add_field+0x6c>
     834:	mov	r3, #540	; 0x21c
     838:	str	r3, [sp]
     83c:	mvn	r0, #99	; 0x63
     840:	mov	r2, r6
     844:	ldr	r3, [pc, #188]	; 908 <coda_mem_record_add_field+0x1dc>
     848:	ldr	r1, [pc, #188]	; 90c <coda_mem_record_add_field+0x1e0>
     84c:	bl	0 <coda_set_error>
     850:	mvn	r0, #0
     854:	b	7a0 <coda_mem_record_add_field+0x74>
     858:	ldr	r3, [pc, #176]	; 910 <coda_mem_record_add_field+0x1e4>
     85c:	mvn	r0, #99	; 0x63
     860:	str	r3, [sp]
     864:	mov	r2, r6
     868:	ldr	r3, [pc, #152]	; 908 <coda_mem_record_add_field+0x1dc>
     86c:	ldr	r1, [pc, #160]	; 914 <coda_mem_record_add_field+0x1e8>
     870:	bl	0 <coda_set_error>
     874:	mvn	r0, #0
     878:	b	7a0 <coda_mem_record_add_field+0x74>
     87c:	mvn	r0, #0
     880:	b	7a0 <coda_mem_record_add_field+0x74>
     884:	mvn	r0, #99	; 0x63
     888:	mov	r3, #496	; 0x1f0
     88c:	ldr	r2, [pc, #116]	; 908 <coda_mem_record_add_field+0x1dc>
     890:	ldr	r1, [pc, #128]	; 918 <coda_mem_record_add_field+0x1ec>
     894:	bl	0 <coda_set_error>
     898:	mvn	r0, #0
     89c:	b	7a0 <coda_mem_record_add_field+0x74>
     8a0:	mvn	r0, #99	; 0x63
     8a4:	ldr	r3, [pc, #112]	; 91c <coda_mem_record_add_field+0x1f0>
     8a8:	ldr	r2, [pc, #88]	; 908 <coda_mem_record_add_field+0x1dc>
     8ac:	ldr	r1, [pc, #108]	; 920 <coda_mem_record_add_field+0x1f4>
     8b0:	bl	0 <coda_set_error>
     8b4:	mvn	r0, #0
     8b8:	b	7a0 <coda_mem_record_add_field+0x74>
     8bc:	ldr	r3, [pc, #96]	; 924 <coda_mem_record_add_field+0x1f8>
     8c0:	mvn	r0, #101	; 0x65
     8c4:	str	r3, [sp]
     8c8:	mov	r2, r6
     8cc:	ldr	r3, [pc, #52]	; 908 <coda_mem_record_add_field+0x1dc>
     8d0:	ldr	r1, [pc, #80]	; 928 <coda_mem_record_add_field+0x1fc>
     8d4:	bl	0 <coda_set_error>
     8d8:	mvn	r0, #0
     8dc:	b	7a0 <coda_mem_record_add_field+0x74>
     8e0:	ldr	r2, [r2, #48]	; 0x30
     8e4:	mov	r0, #516	; 0x204
     8e8:	str	r0, [sp]
     8ec:	ldr	r3, [pc, #20]	; 908 <coda_mem_record_add_field+0x1dc>
     8f0:	mvn	r0, #0
     8f4:	ldr	r1, [pc, #48]	; 92c <coda_mem_record_add_field+0x200>
     8f8:	lsl	r2, r2, #2
     8fc:	bl	0 <coda_set_error>
     900:	mvn	r0, #0
     904:	b	7a0 <coda_mem_record_add_field+0x74>
     908:	.word	0x00000000
     90c:	.word	0x000003dc
     910:	.word	0x00000222
     914:	.word	0x00000400
     918:	.word	0x00000384
     91c:	.word	0x000001eb
     920:	.word	0x000000b0
     924:	.word	0x00000216
     928:	.word	0x000003a8
     92c:	.word	0x000001f8

00000930 <coda_mem_record_validate>:
     930:	cmp	r0, #0
     934:	push	{r4, lr}
     938:	beq	9b4 <coda_mem_record_validate+0x84>
     93c:	ldr	lr, [r0, #4]
     940:	ldr	ip, [r0, #16]
     944:	ldr	r3, [lr, #48]	; 0x30
     948:	cmp	ip, r3
     94c:	bne	9d0 <coda_mem_record_validate+0xa0>
     950:	cmp	ip, #0
     954:	ble	9ac <coda_mem_record_validate+0x7c>
     958:	ldr	r2, [r0, #20]
     95c:	mov	r3, #0
     960:	sub	r2, r2, #4
     964:	b	974 <coda_mem_record_validate+0x44>
     968:	add	r3, r3, #1
     96c:	cmp	ip, r3
     970:	beq	9ac <coda_mem_record_validate+0x7c>
     974:	ldr	r1, [r2, #4]!
     978:	cmp	r1, #0
     97c:	bne	968 <coda_mem_record_validate+0x38>
     980:	ldr	r1, [lr, #52]	; 0x34
     984:	ldr	r1, [r1, r3, lsl #2]
     988:	ldrb	r0, [r1, #16]
     98c:	cmp	r0, #0
     990:	bne	968 <coda_mem_record_validate+0x38>
     994:	ldr	r2, [r1]
     998:	sub	r0, r0, #400	; 0x190
     99c:	ldr	r1, [pc, #64]	; 9e4 <coda_mem_record_validate+0xb4>
     9a0:	bl	0 <coda_set_error>
     9a4:	mvn	r0, #0
     9a8:	pop	{r4, pc}
     9ac:	mov	r0, #0
     9b0:	pop	{r4, pc}
     9b4:	ldr	r3, [pc, #44]	; 9e8 <coda_mem_record_validate+0xb8>
     9b8:	ldr	r2, [pc, #44]	; 9ec <coda_mem_record_validate+0xbc>
     9bc:	ldr	r1, [pc, #44]	; 9f0 <coda_mem_record_validate+0xc0>
     9c0:	mvn	r0, #99	; 0x63
     9c4:	bl	0 <coda_set_error>
     9c8:	mvn	r0, #0
     9cc:	pop	{r4, pc}
     9d0:	ldr	r3, [pc, #28]	; 9f4 <coda_mem_record_validate+0xc4>
     9d4:	mov	r2, #564	; 0x234
     9d8:	ldr	r1, [pc, #12]	; 9ec <coda_mem_record_validate+0xbc>
     9dc:	ldr	r0, [pc, #20]	; 9f8 <coda_mem_record_validate+0xc8>
     9e0:	bl	0 <__assert_fail>
     9e4:	.word	0x0000046c
     9e8:	.word	0x00000231
     9ec:	.word	0x00000000
     9f0:	.word	0x000000b0
     9f4:	.word	0x00000068
     9f8:	.word	0x00000438

000009fc <coda_mem_array_new>:
     9fc:	push	{r4, r5, r6, r7, lr}
     a00:	subs	r4, r0, #0
     a04:	sub	sp, sp, #12
     a08:	beq	ad0 <coda_mem_array_new+0xd4>
     a0c:	mov	r0, #24
     a10:	mov	r6, r1
     a14:	bl	0 <malloc>
     a18:	subs	r5, r0, #0
     a1c:	beq	afc <coda_mem_array_new+0x100>
     a20:	ldr	r3, [r4, #4]
     a24:	mov	r2, #0
     a28:	add	r3, r3, #1
     a2c:	mov	r0, #100	; 0x64
     a30:	mov	r1, #1
     a34:	cmp	r6, #0
     a38:	str	r4, [r5, #4]
     a3c:	str	r6, [r5, #12]
     a40:	str	r3, [r4, #4]
     a44:	str	r0, [r5]
     a48:	str	r1, [r5, #8]
     a4c:	str	r2, [r5, #16]
     a50:	str	r2, [r5, #20]
     a54:	beq	aa4 <coda_mem_array_new+0xa8>
     a58:	ldr	r7, [r4, #44]	; 0x2c
     a5c:	cmp	r7, #0
     a60:	ble	a98 <coda_mem_array_new+0x9c>
     a64:	lsl	r6, r7, #2
     a68:	mov	r0, r6
     a6c:	bl	0 <malloc>
     a70:	cmp	r0, #0
     a74:	mov	r4, r0
     a78:	str	r0, [r5, #20]
     a7c:	addne	r2, r0, r6
     a80:	movne	r3, #0
     a84:	strne	r7, [r5, #16]
     a88:	beq	b1c <coda_mem_array_new+0x120>
     a8c:	str	r3, [r0], #4
     a90:	cmp	r2, r0
     a94:	bne	a8c <coda_mem_array_new+0x90>
     a98:	mov	r0, r5
     a9c:	add	sp, sp, #12
     aa0:	pop	{r4, r5, r6, r7, pc}
     aa4:	ldr	r0, [r4, #36]	; 0x24
     aa8:	cmp	r0, r2
     aac:	beq	a58 <coda_mem_array_new+0x5c>
     ab0:	mov	r1, r6
     ab4:	bl	25c <coda_mem_record_new>
     ab8:	cmp	r0, #0
     abc:	mov	r4, r0
     ac0:	str	r0, [r5, #12]
     ac4:	beq	aec <coda_mem_array_new+0xf0>
     ac8:	ldr	r4, [r5, #4]
     acc:	b	a58 <coda_mem_array_new+0x5c>
     ad0:	ldr	r3, [pc, #112]	; b48 <coda_mem_array_new+0x14c>
     ad4:	ldr	r2, [pc, #112]	; b4c <coda_mem_array_new+0x150>
     ad8:	ldr	r1, [pc, #112]	; b50 <coda_mem_array_new+0x154>
     adc:	mvn	r0, #99	; 0x63
     ae0:	mov	r5, r4
     ae4:	bl	0 <coda_set_error>
     ae8:	b	a98 <coda_mem_array_new+0x9c>
     aec:	mov	r0, r5
     af0:	bl	0 <coda_mem_type_delete>
     af4:	mov	r5, r4
     af8:	b	a98 <coda_mem_array_new+0x9c>
     afc:	ldr	r2, [pc, #80]	; b54 <coda_mem_array_new+0x158>
     b00:	ldr	r3, [pc, #68]	; b4c <coda_mem_array_new+0x150>
     b04:	str	r2, [sp]
     b08:	ldr	r1, [pc, #72]	; b58 <coda_mem_array_new+0x15c>
     b0c:	mov	r2, #24
     b10:	mvn	r0, #0
     b14:	bl	0 <coda_set_error>
     b18:	b	a98 <coda_mem_array_new+0x9c>
     b1c:	ldr	r3, [pc, #56]	; b5c <coda_mem_array_new+0x160>
     b20:	mov	r2, r6
     b24:	str	r3, [sp]
     b28:	ldr	r1, [pc, #40]	; b58 <coda_mem_array_new+0x15c>
     b2c:	ldr	r3, [pc, #24]	; b4c <coda_mem_array_new+0x150>
     b30:	mvn	r0, #0
     b34:	bl	0 <coda_set_error>
     b38:	mov	r0, r5
     b3c:	bl	0 <coda_mem_type_delete>
     b40:	mov	r5, r4
     b44:	b	a98 <coda_mem_array_new+0x9c>
     b48:	.word	0x00000247
     b4c:	.word	0x00000000
     b50:	.word	0x00000188
     b54:	.word	0x0000024e
     b58:	.word	0x000001f8
     b5c:	.word	0x00000269

00000b60 <coda_mem_array_set_element>:
     b60:	subs	ip, r0, #0
     b64:	push	{r4, lr}
     b68:	sub	sp, sp, #8
     b6c:	beq	c28 <coda_mem_array_set_element+0xc8>
     b70:	cmp	r1, #0
     b74:	ldr	r3, [ip, #16]
     b78:	blt	c04 <coda_mem_array_set_element+0xa4>
     b7c:	cmp	r1, r3
     b80:	bge	c04 <coda_mem_array_set_element+0xa4>
     b84:	cmp	r2, #0
     b88:	beq	c44 <coda_mem_array_set_element+0xe4>
     b8c:	ldr	lr, [ip, #20]
     b90:	ldr	r0, [lr, r1, lsl #2]
     b94:	cmp	r0, #0
     b98:	bne	bbc <coda_mem_array_set_element+0x5c>
     b9c:	ldr	r4, [ip, #4]
     ba0:	ldr	ip, [r2, #4]
     ba4:	ldr	r4, [r4, #40]	; 0x28
     ba8:	cmp	r4, ip
     bac:	streq	r2, [lr, r1, lsl #2]
     bb0:	bne	be0 <coda_mem_array_set_element+0x80>
     bb4:	add	sp, sp, #8
     bb8:	pop	{r4, pc}
     bbc:	mov	r3, #652	; 0x28c
     bc0:	mov	r2, r1
     bc4:	str	r3, [sp]
     bc8:	mvn	r0, #99	; 0x63
     bcc:	ldr	r3, [pc, #140]	; c60 <coda_mem_array_set_element+0x100>
     bd0:	ldr	r1, [pc, #140]	; c64 <coda_mem_array_set_element+0x104>
     bd4:	bl	0 <coda_set_error>
     bd8:	mvn	r0, #0
     bdc:	b	bb4 <coda_mem_array_set_element+0x54>
     be0:	ldr	r1, [pc, #128]	; c68 <coda_mem_array_set_element+0x108>
     be4:	mov	r2, r3
     be8:	str	r1, [sp]
     bec:	ldr	r0, [pc, #120]	; c6c <coda_mem_array_set_element+0x10c>
     bf0:	ldr	r3, [pc, #104]	; c60 <coda_mem_array_set_element+0x100>
     bf4:	ldr	r1, [pc, #116]	; c70 <coda_mem_array_set_element+0x110>
     bf8:	bl	0 <coda_set_error>
     bfc:	mvn	r0, #0
     c00:	b	bb4 <coda_mem_array_set_element+0x54>
     c04:	ldr	ip, [pc, #104]	; c74 <coda_mem_array_set_element+0x114>
     c08:	ldr	r0, [pc, #80]	; c60 <coda_mem_array_set_element+0x100>
     c0c:	mov	r2, r1
     c10:	ldr	r1, [pc, #96]	; c78 <coda_mem_array_set_element+0x118>
     c14:	stm	sp, {r0, ip}
     c18:	mvn	r0, #100	; 0x64
     c1c:	bl	0 <coda_set_error>
     c20:	mvn	r0, #0
     c24:	b	bb4 <coda_mem_array_set_element+0x54>
     c28:	mvn	r0, #99	; 0x63
     c2c:	ldr	r3, [pc, #72]	; c7c <coda_mem_array_set_element+0x11c>
     c30:	ldr	r2, [pc, #40]	; c60 <coda_mem_array_set_element+0x100>
     c34:	ldr	r1, [pc, #68]	; c80 <coda_mem_array_set_element+0x120>
     c38:	bl	0 <coda_set_error>
     c3c:	mvn	r0, #0
     c40:	b	bb4 <coda_mem_array_set_element+0x54>
     c44:	mvn	r0, #99	; 0x63
     c48:	ldr	r3, [pc, #52]	; c84 <coda_mem_array_set_element+0x124>
     c4c:	ldr	r2, [pc, #12]	; c60 <coda_mem_array_set_element+0x100>
     c50:	ldr	r1, [pc, #48]	; c88 <coda_mem_array_set_element+0x128>
     c54:	bl	0 <coda_set_error>
     c58:	mvn	r0, #0
     c5c:	b	bb4 <coda_mem_array_set_element+0x54>
     c60:	.word	0x00000000
     c64:	.word	0x000004e8
     c68:	.word	0x00000292
     c6c:	.word	0xfffffe70
     c70:	.word	0x00000514
     c74:	.word	0x00000281
     c78:	.word	0x0000048c
     c7c:	.word	0x0000027b
     c80:	.word	0x000000b0
     c84:	.word	0x00000286
     c88:	.word	0x000004c4

00000c8c <coda_mem_array_add_element>:
     c8c:	push	{r4, r5, lr}
     c90:	subs	r4, r0, #0
     c94:	sub	sp, sp, #12
     c98:	beq	dfc <coda_mem_array_add_element+0x170>
     c9c:	cmp	r1, #0
     ca0:	mov	r5, r1
     ca4:	beq	de0 <coda_mem_array_add_element+0x154>
     ca8:	ldr	r3, [r4, #4]
     cac:	ldr	r2, [r1, #4]
     cb0:	ldr	r1, [r3, #40]	; 0x28
     cb4:	cmp	r1, r2
     cb8:	bne	db4 <coda_mem_array_add_element+0x128>
     cbc:	ldr	r3, [r3, #44]	; 0x2c
     cc0:	cmp	r3, #0
     cc4:	ldr	r3, [r4, #16]
     cc8:	ble	d44 <coda_mem_array_add_element+0xb8>
     ccc:	cmp	r3, #0
     cd0:	ble	dd8 <coda_mem_array_add_element+0x14c>
     cd4:	ldr	r0, [r4, #20]
     cd8:	ldr	r2, [r0]
     cdc:	cmp	r2, #0
     ce0:	beq	d34 <coda_mem_array_add_element+0xa8>
     ce4:	add	r1, r0, #4
     ce8:	mov	r2, #0
     cec:	b	d00 <coda_mem_array_add_element+0x74>
     cf0:	ldr	ip, [r1]
     cf4:	add	r1, r1, #4
     cf8:	cmp	ip, #0
     cfc:	beq	d34 <coda_mem_array_add_element+0xa8>
     d00:	add	r2, r2, #1
     d04:	cmp	r2, r3
     d08:	mov	r0, r1
     d0c:	bne	cf0 <coda_mem_array_add_element+0x64>
     d10:	ldr	r0, [pc, #256]	; e18 <coda_mem_array_add_element+0x18c>
     d14:	mov	r1, #696	; 0x2b8
     d18:	stm	sp, {r0, r1}
     d1c:	ldr	r1, [pc, #248]	; e1c <coda_mem_array_add_element+0x190>
     d20:	mvn	r0, #100	; 0x64
     d24:	bl	0 <coda_set_error>
     d28:	mvn	r0, #0
     d2c:	add	sp, sp, #12
     d30:	pop	{r4, r5, pc}
     d34:	str	r5, [r0]
     d38:	mov	r0, #0
     d3c:	add	sp, sp, #12
     d40:	pop	{r4, r5, pc}
     d44:	tst	r3, #15
     d48:	beq	d68 <coda_mem_array_add_element+0xdc>
     d4c:	ldr	r2, [r4, #20]
     d50:	add	r1, r3, #1
     d54:	str	r1, [r4, #16]
     d58:	mov	r0, #0
     d5c:	str	r5, [r2, r3, lsl #2]
     d60:	add	sp, sp, #12
     d64:	pop	{r4, r5, pc}
     d68:	add	r3, r3, #16
     d6c:	ldr	r0, [r4, #20]
     d70:	lsl	r1, r3, #2
     d74:	bl	0 <realloc>
     d78:	subs	r2, r0, #0
     d7c:	strne	r2, [r4, #20]
     d80:	ldrne	r3, [r4, #16]
     d84:	bne	d50 <coda_mem_array_add_element+0xc4>
     d88:	ldr	r2, [r4, #16]
     d8c:	ldr	r3, [pc, #140]	; e20 <coda_mem_array_add_element+0x194>
     d90:	add	r2, r2, #16
     d94:	str	r3, [sp]
     d98:	mvn	r0, #0
     d9c:	lsl	r2, r2, #2
     da0:	ldr	r3, [pc, #112]	; e18 <coda_mem_array_add_element+0x18c>
     da4:	ldr	r1, [pc, #120]	; e24 <coda_mem_array_add_element+0x198>
     da8:	bl	0 <coda_set_error>
     dac:	mvn	r0, #0
     db0:	b	d3c <coda_mem_array_add_element+0xb0>
     db4:	ldr	r3, [pc, #108]	; e28 <coda_mem_array_add_element+0x19c>
     db8:	ldr	r2, [r4, #16]
     dbc:	ldr	r0, [pc, #104]	; e2c <coda_mem_array_add_element+0x1a0>
     dc0:	str	r3, [sp]
     dc4:	ldr	r1, [pc, #100]	; e30 <coda_mem_array_add_element+0x1a4>
     dc8:	ldr	r3, [pc, #72]	; e18 <coda_mem_array_add_element+0x18c>
     dcc:	bl	0 <coda_set_error>
     dd0:	mvn	r0, #0
     dd4:	b	d3c <coda_mem_array_add_element+0xb0>
     dd8:	mov	r2, #0
     ddc:	b	d10 <coda_mem_array_add_element+0x84>
     de0:	mvn	r0, #99	; 0x63
     de4:	ldr	r3, [pc, #72]	; e34 <coda_mem_array_add_element+0x1a8>
     de8:	ldr	r2, [pc, #40]	; e18 <coda_mem_array_add_element+0x18c>
     dec:	ldr	r1, [pc, #68]	; e38 <coda_mem_array_add_element+0x1ac>
     df0:	bl	0 <coda_set_error>
     df4:	mvn	r0, #0
     df8:	b	d3c <coda_mem_array_add_element+0xb0>
     dfc:	mvn	r0, #99	; 0x63
     e00:	ldr	r3, [pc, #52]	; e3c <coda_mem_array_add_element+0x1b0>
     e04:	ldr	r2, [pc, #12]	; e18 <coda_mem_array_add_element+0x18c>
     e08:	ldr	r1, [pc, #48]	; e40 <coda_mem_array_add_element+0x1b4>
     e0c:	bl	0 <coda_set_error>
     e10:	mvn	r0, #0
     e14:	b	d3c <coda_mem_array_add_element+0xb0>
     e18:	.word	0x00000000
     e1c:	.word	0x0000048c
     e20:	.word	0x000002c7
     e24:	.word	0x000001f8
     e28:	.word	0x000002a9
     e2c:	.word	0xfffffe70
     e30:	.word	0x00000554
     e34:	.word	0x000002a3
     e38:	.word	0x000004c4
     e3c:	.word	0x0000029e
     e40:	.word	0x000000b0

00000e44 <coda_mem_array_validate>:
     e44:	push	{r4, lr}
     e48:	subs	r4, r0, #0
     e4c:	beq	edc <coda_mem_array_validate+0x98>
     e50:	ldr	r3, [r4, #4]
     e54:	ldr	r0, [r4, #16]
     e58:	ldr	r3, [r3, #44]	; 0x2c
     e5c:	cmp	r3, #0
     e60:	blt	e80 <coda_mem_array_validate+0x3c>
     e64:	cmp	r3, r0
     e68:	beq	e80 <coda_mem_array_validate+0x3c>
     e6c:	mov	r2, r0
     e70:	ldr	r1, [pc, #128]	; ef8 <coda_mem_array_validate+0xb4>
     e74:	ldr	r0, [pc, #128]	; efc <coda_mem_array_validate+0xb8>
     e78:	bl	0 <coda_set_error>
     e7c:	ldr	r0, [r4, #16]
     e80:	cmp	r0, #0
     e84:	ble	ebc <coda_mem_array_validate+0x78>
     e88:	ldr	r1, [r4, #20]
     e8c:	ldr	r3, [r1]
     e90:	cmp	r3, #0
     e94:	movne	r3, r1
     e98:	movne	r2, #0
     e9c:	bne	eb0 <coda_mem_array_validate+0x6c>
     ea0:	b	ec4 <coda_mem_array_validate+0x80>
     ea4:	ldr	r1, [r3, #4]!
     ea8:	cmp	r1, #0
     eac:	beq	ec8 <coda_mem_array_validate+0x84>
     eb0:	add	r2, r2, #1
     eb4:	cmp	r2, r0
     eb8:	bne	ea4 <coda_mem_array_validate+0x60>
     ebc:	mov	r0, #0
     ec0:	pop	{r4, pc}
     ec4:	mov	r2, r3
     ec8:	ldr	r1, [pc, #48]	; f00 <coda_mem_array_validate+0xbc>
     ecc:	ldr	r0, [pc, #40]	; efc <coda_mem_array_validate+0xb8>
     ed0:	bl	0 <coda_set_error>
     ed4:	mvn	r0, #0
     ed8:	pop	{r4, pc}
     edc:	ldr	r3, [pc, #32]	; f04 <coda_mem_array_validate+0xc0>
     ee0:	ldr	r2, [pc, #32]	; f08 <coda_mem_array_validate+0xc4>
     ee4:	ldr	r1, [pc, #32]	; f0c <coda_mem_array_validate+0xc8>
     ee8:	mvn	r0, #99	; 0x63
     eec:	bl	0 <coda_set_error>
     ef0:	mvn	r0, #0
     ef4:	pop	{r4, pc}
     ef8:	.word	0x00000594
     efc:	.word	0xfffffe70
     f00:	.word	0x000005f4
     f04:	.word	0x000002d9
     f08:	.word	0x00000000
     f0c:	.word	0x000000b0

00000f10 <coda_mem_data_new>:
     f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f14:	sub	sp, sp, #20
     f18:	subs	r6, r0, #0
     f1c:	ldr	fp, [sp, #56]	; 0x38
     f20:	beq	1190 <coda_mem_data_new+0x280>
     f24:	cmp	r3, #0
     f28:	mov	sl, r3
     f2c:	blt	121c <coda_mem_data_new+0x30c>
     f30:	movgt	r4, #1
     f34:	movle	r4, #0
     f38:	cmp	fp, #0
     f3c:	movne	r4, #0
     f40:	andeq	r4, r4, #1
     f44:	cmp	r4, #0
     f48:	bne	1174 <coda_mem_data_new+0x264>
     f4c:	mov	r5, r2
     f50:	ldrd	r2, [r6, #24]
     f54:	mov	r7, r1
     f58:	cmp	r2, #0
     f5c:	sbcs	r1, r3, #0
     f60:	blt	f8c <coda_mem_data_new+0x7c>
     f64:	and	r0, r2, #7
     f68:	mov	r1, #0
     f6c:	lsr	r2, r2, #3
     f70:	orr	r0, r0, r1
     f74:	orr	r2, r2, r3, lsl #29
     f78:	cmp	r0, #0
     f7c:	moveq	r3, r2
     f80:	addne	r3, r2, #1
     f84:	cmp	sl, r3
     f88:	bne	113c <coda_mem_data_new+0x22c>
     f8c:	ldr	ip, [r6, #12]
     f90:	cmp	sl, #1
     f94:	sub	r8, ip, #10
     f98:	clz	r8, r8
     f9c:	lsr	r8, r8, #5
     fa0:	moveq	r8, #0
     fa4:	cmp	r8, #0
     fa8:	bne	1150 <coda_mem_data_new+0x240>
     fac:	mov	r0, #32
     fb0:	bl	0 <malloc>
     fb4:	subs	r4, r0, #0
     fb8:	beq	11ac <coda_mem_data_new+0x29c>
     fbc:	ldr	r1, [r6, #4]
     fc0:	mov	r3, #0
     fc4:	mov	r2, #0
     fc8:	add	r1, r1, #1
     fcc:	str	r1, [r6, #4]
     fd0:	strd	r2, [r4, #24]
     fd4:	mov	r1, #100	; 0x64
     fd8:	mov	r3, #2
     fdc:	cmp	sl, #0
     fe0:	str	r6, [r4, #4]
     fe4:	str	r7, [r4, #12]
     fe8:	str	sl, [r4, #16]
     fec:	str	r1, [r4]
     ff0:	str	r3, [r4, #8]
     ff4:	beq	10f4 <coda_mem_data_new+0x1e4>
     ff8:	cmp	r5, #0
     ffc:	beq	11cc <coda_mem_data_new+0x2bc>
    1000:	ldrd	r2, [r5, #40]	; 0x28
    1004:	orrs	r1, r2, r3
    1008:	strd	r2, [sp, #8]
    100c:	moveq	ip, r8
    1010:	beq	1048 <coda_mem_data_new+0x138>
    1014:	subs	r6, r2, #1
    1018:	sbc	r7, r3, #0
    101c:	ldr	r8, [pc, #524]	; 1230 <coda_mem_data_new+0x320>
    1020:	asr	r0, r7, #31
    1024:	mov	r9, #0
    1028:	asr	r1, r0, #31
    102c:	and	r0, r0, r8
    1030:	adds	r0, r0, r6
    1034:	and	r1, r1, r9
    1038:	adc	r1, r1, r7
    103c:	lsr	ip, r0, #12
    1040:	orr	ip, ip, r1, lsl #20
    1044:	add	ip, ip, #1
    1048:	ldrd	r0, [sp, #8]
    104c:	asr	r9, sl, #31
    1050:	ldr	r6, [pc, #472]	; 1230 <coda_mem_data_new+0x320>
    1054:	adds	r0, r0, sl
    1058:	adc	r1, r1, r9
    105c:	subs	r0, r0, #1
    1060:	sbc	r1, r1, #0
    1064:	mov	r7, #0
    1068:	asr	r2, r1, #31
    106c:	mov	r8, sl
    1070:	asr	r3, r2, #31
    1074:	and	r2, r2, r6
    1078:	adds	r2, r2, r0
    107c:	and	r3, r3, r7
    1080:	adc	r3, r3, r1
    1084:	lsr	r2, r2, #12
    1088:	orr	r2, r2, r3, lsl #20
    108c:	add	r2, r2, #1
    1090:	cmp	r2, ip
    1094:	ble	10c0 <coda_mem_data_new+0x1b0>
    1098:	lsl	r7, r2, #12
    109c:	mov	r1, r7
    10a0:	ldr	r0, [r5, #48]	; 0x30
    10a4:	bl	0 <realloc>
    10a8:	subs	r6, r0, #0
    10ac:	beq	11f0 <coda_mem_data_new+0x2e0>
    10b0:	ldrd	r2, [r5, #40]	; 0x28
    10b4:	str	r6, [r5, #48]	; 0x30
    10b8:	strd	r2, [sp, #8]
    10bc:	b	10c4 <coda_mem_data_new+0x1b4>
    10c0:	ldr	r6, [r5, #48]	; 0x30
    10c4:	ldrd	r2, [sp, #8]
    10c8:	mov	r1, fp
    10cc:	strd	r2, [r4, #24]
    10d0:	ldr	r3, [sp, #8]
    10d4:	mov	r2, sl
    10d8:	add	r0, r6, r3
    10dc:	bl	0 <memcpy>
    10e0:	ldrd	r2, [r5, #40]	; 0x28
    10e4:	ldr	r7, [r4, #12]
    10e8:	adds	r8, r8, r2
    10ec:	adc	r9, r9, r3
    10f0:	strd	r8, [r5, #40]	; 0x28
    10f4:	cmp	r7, #0
    10f8:	beq	1108 <coda_mem_data_new+0x1f8>
    10fc:	mov	r0, r4
    1100:	add	sp, sp, #20
    1104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1108:	ldr	r3, [r4, #4]
    110c:	ldr	r0, [r3, #36]	; 0x24
    1110:	cmp	r0, #0
    1114:	beq	10fc <coda_mem_data_new+0x1ec>
    1118:	mov	r1, r7
    111c:	bl	25c <coda_mem_record_new>
    1120:	cmp	r0, #0
    1124:	str	r0, [r4, #12]
    1128:	bne	10fc <coda_mem_data_new+0x1ec>
    112c:	mov	r0, r4
    1130:	bl	0 <coda_mem_type_delete>
    1134:	mov	r4, r7
    1138:	b	10fc <coda_mem_data_new+0x1ec>
    113c:	mov	r2, sl
    1140:	ldr	r1, [pc, #236]	; 1234 <coda_mem_data_new+0x324>
    1144:	ldr	r0, [pc, #236]	; 1238 <coda_mem_data_new+0x328>
    1148:	bl	0 <coda_set_error>
    114c:	b	10fc <coda_mem_data_new+0x1ec>
    1150:	ldr	r3, [pc, #228]	; 123c <coda_mem_data_new+0x32c>
    1154:	mov	r2, sl
    1158:	str	r3, [sp]
    115c:	ldr	r1, [pc, #220]	; 1240 <coda_mem_data_new+0x330>
    1160:	ldr	r3, [pc, #220]	; 1244 <coda_mem_data_new+0x334>
    1164:	mvn	r0, #99	; 0x63
    1168:	bl	0 <coda_set_error>
    116c:	mov	r4, #0
    1170:	b	10fc <coda_mem_data_new+0x1ec>
    1174:	mov	r3, #764	; 0x2fc
    1178:	ldr	r2, [pc, #196]	; 1244 <coda_mem_data_new+0x334>
    117c:	ldr	r1, [pc, #196]	; 1248 <coda_mem_data_new+0x338>
    1180:	mvn	r0, #99	; 0x63
    1184:	bl	0 <coda_set_error>
    1188:	mov	r4, #0
    118c:	b	10fc <coda_mem_data_new+0x1ec>
    1190:	ldr	r3, [pc, #180]	; 124c <coda_mem_data_new+0x33c>
    1194:	ldr	r2, [pc, #168]	; 1244 <coda_mem_data_new+0x334>
    1198:	ldr	r1, [pc, #176]	; 1250 <coda_mem_data_new+0x340>
    119c:	mvn	r0, #99	; 0x63
    11a0:	mov	r4, r6
    11a4:	bl	0 <coda_set_error>
    11a8:	b	10fc <coda_mem_data_new+0x1ec>
    11ac:	ldr	r2, [pc, #160]	; 1254 <coda_mem_data_new+0x344>
    11b0:	ldr	r3, [pc, #140]	; 1244 <coda_mem_data_new+0x334>
    11b4:	str	r2, [sp]
    11b8:	ldr	r1, [pc, #152]	; 1258 <coda_mem_data_new+0x348>
    11bc:	mov	r2, #32
    11c0:	mvn	r0, #0
    11c4:	bl	0 <coda_set_error>
    11c8:	b	10fc <coda_mem_data_new+0x1ec>
    11cc:	ldr	r3, [pc, #136]	; 125c <coda_mem_data_new+0x34c>
    11d0:	ldr	r2, [pc, #108]	; 1244 <coda_mem_data_new+0x334>
    11d4:	ldr	r1, [pc, #132]	; 1260 <coda_mem_data_new+0x350>
    11d8:	mvn	r0, #99	; 0x63
    11dc:	bl	0 <coda_set_error>
    11e0:	mov	r0, r4
    11e4:	bl	0 <coda_mem_type_delete>
    11e8:	mov	r4, r5
    11ec:	b	10fc <coda_mem_data_new+0x1ec>
    11f0:	ldr	r3, [pc, #108]	; 1264 <coda_mem_data_new+0x354>
    11f4:	mov	r2, r7
    11f8:	str	r3, [sp]
    11fc:	ldr	r1, [pc, #100]	; 1268 <coda_mem_data_new+0x358>
    1200:	ldr	r3, [pc, #60]	; 1244 <coda_mem_data_new+0x334>
    1204:	mvn	r0, #0
    1208:	bl	0 <coda_set_error>
    120c:	mov	r0, r4
    1210:	bl	0 <coda_mem_type_delete>
    1214:	mov	r4, r6
    1218:	b	10fc <coda_mem_data_new+0x1ec>
    121c:	ldr	r3, [pc, #72]	; 126c <coda_mem_data_new+0x35c>
    1220:	ldr	r2, [pc, #72]	; 1270 <coda_mem_data_new+0x360>
    1224:	ldr	r1, [pc, #24]	; 1244 <coda_mem_data_new+0x334>
    1228:	ldr	r0, [pc, #68]	; 1274 <coda_mem_data_new+0x364>
    122c:	bl	0 <__assert_fail>
    1230:	.word	0x00000fff
    1234:	.word	0x00000640
    1238:	.word	0xfffffed4
    123c:	.word	0x0000030e
    1240:	.word	0x00000680
    1244:	.word	0x00000000
    1248:	.word	0x00000620
    124c:	.word	0x000002f6
    1250:	.word	0x00000188
    1254:	.word	0x00000316
    1258:	.word	0x000001f8
    125c:	.word	0x00000325
    1260:	.word	0x000006bc
    1264:	.word	0x00000335
    1268:	.word	0x000006e0
    126c:	.word	0x00000084
    1270:	.word	0x000002f9
    1274:	.word	0x00000614

00001278 <coda_mem_int8_new>:
    1278:	push	{r4, r5, lr}
    127c:	sub	sp, sp, #20
    1280:	ldrd	r4, [r0, #24]
    1284:	strb	r3, [sp, #15]
    1288:	cmp	r5, #0
    128c:	cmpeq	r4, #8
    1290:	bne	12b8 <coda_mem_int8_new+0x40>
    1294:	ldr	r3, [r0, #12]
    1298:	cmp	r3, #0
    129c:	bne	12cc <coda_mem_int8_new+0x54>
    12a0:	add	r3, sp, #15
    12a4:	str	r3, [sp]
    12a8:	mov	r3, #1
    12ac:	bl	f10 <coda_mem_data_new>
    12b0:	add	sp, sp, #20
    12b4:	pop	{r4, r5, pc}
    12b8:	ldr	r3, [pc, #32]	; 12e0 <coda_mem_int8_new+0x68>
    12bc:	ldr	r2, [pc, #32]	; 12e4 <coda_mem_int8_new+0x6c>
    12c0:	ldr	r1, [pc, #32]	; 12e8 <coda_mem_int8_new+0x70>
    12c4:	ldr	r0, [pc, #32]	; 12ec <coda_mem_int8_new+0x74>
    12c8:	bl	0 <__assert_fail>
    12cc:	ldr	r3, [pc, #12]	; 12e0 <coda_mem_int8_new+0x68>
    12d0:	mov	r2, #848	; 0x350
    12d4:	ldr	r1, [pc, #12]	; 12e8 <coda_mem_int8_new+0x70>
    12d8:	ldr	r0, [pc, #16]	; 12f0 <coda_mem_int8_new+0x78>
    12dc:	bl	0 <__assert_fail>
    12e0:	.word	0x00000098
    12e4:	.word	0x0000034f
    12e8:	.word	0x00000000
    12ec:	.word	0x00000718
    12f0:	.word	0x00000734

000012f4 <coda_mem_uint8_new>:
    12f4:	push	{r4, r5, lr}
    12f8:	sub	sp, sp, #20
    12fc:	ldrd	r4, [r0, #24]
    1300:	strb	r3, [sp, #15]
    1304:	cmp	r5, #0
    1308:	cmpeq	r4, #8
    130c:	bne	1330 <coda_mem_uint8_new+0x3c>
    1310:	ldr	r3, [r0, #12]
    1314:	cmp	r3, #1
    1318:	bne	1344 <coda_mem_uint8_new+0x50>
    131c:	add	ip, sp, #15
    1320:	str	ip, [sp]
    1324:	bl	f10 <coda_mem_data_new>
    1328:	add	sp, sp, #20
    132c:	pop	{r4, r5, pc}
    1330:	ldr	r3, [pc, #32]	; 1358 <coda_mem_uint8_new+0x64>
    1334:	ldr	r2, [pc, #32]	; 135c <coda_mem_uint8_new+0x68>
    1338:	ldr	r1, [pc, #32]	; 1360 <coda_mem_uint8_new+0x6c>
    133c:	ldr	r0, [pc, #32]	; 1364 <coda_mem_uint8_new+0x70>
    1340:	bl	0 <__assert_fail>
    1344:	ldr	r3, [pc, #12]	; 1358 <coda_mem_uint8_new+0x64>
    1348:	mov	r2, #856	; 0x358
    134c:	ldr	r1, [pc, #12]	; 1360 <coda_mem_uint8_new+0x6c>
    1350:	ldr	r0, [pc, #16]	; 1368 <coda_mem_uint8_new+0x74>
    1354:	bl	0 <__assert_fail>
    1358:	.word	0x000000ac
    135c:	.word	0x00000357
    1360:	.word	0x00000000
    1364:	.word	0x00000718
    1368:	.word	0x00000764

0000136c <coda_mem_int16_new>:
    136c:	push	{r4, r5, lr}
    1370:	sub	sp, sp, #20
    1374:	ldrd	r4, [r0, #24]
    1378:	strh	r3, [sp, #14]
    137c:	cmp	r5, #0
    1380:	cmpeq	r4, #16
    1384:	bne	13a8 <coda_mem_int16_new+0x3c>
    1388:	ldr	r3, [r0, #12]
    138c:	cmp	r3, #2
    1390:	bne	13bc <coda_mem_int16_new+0x50>
    1394:	add	ip, sp, #14
    1398:	str	ip, [sp]
    139c:	bl	f10 <coda_mem_data_new>
    13a0:	add	sp, sp, #20
    13a4:	pop	{r4, r5, pc}
    13a8:	ldr	r3, [pc, #32]	; 13d0 <coda_mem_int16_new+0x64>
    13ac:	ldr	r2, [pc, #32]	; 13d4 <coda_mem_int16_new+0x68>
    13b0:	ldr	r1, [pc, #32]	; 13d8 <coda_mem_int16_new+0x6c>
    13b4:	ldr	r0, [pc, #32]	; 13dc <coda_mem_int16_new+0x70>
    13b8:	bl	0 <__assert_fail>
    13bc:	ldr	r3, [pc, #12]	; 13d0 <coda_mem_int16_new+0x64>
    13c0:	mov	r2, #864	; 0x360
    13c4:	ldr	r1, [pc, #12]	; 13d8 <coda_mem_int16_new+0x6c>
    13c8:	ldr	r0, [pc, #16]	; 13e0 <coda_mem_int16_new+0x74>
    13cc:	bl	0 <__assert_fail>
    13d0:	.word	0x000000c0
    13d4:	.word	0x0000035f
    13d8:	.word	0x00000000
    13dc:	.word	0x00000794
    13e0:	.word	0x000007b0

000013e4 <coda_mem_uint16_new>:
    13e4:	push	{r4, r5, lr}
    13e8:	sub	sp, sp, #20
    13ec:	ldrd	r4, [r0, #24]
    13f0:	strh	r3, [sp, #14]
    13f4:	cmp	r5, #0
    13f8:	cmpeq	r4, #16
    13fc:	bne	1424 <coda_mem_uint16_new+0x40>
    1400:	ldr	r3, [r0, #12]
    1404:	cmp	r3, #3
    1408:	bne	1438 <coda_mem_uint16_new+0x54>
    140c:	add	r3, sp, #14
    1410:	str	r3, [sp]
    1414:	mov	r3, #2
    1418:	bl	f10 <coda_mem_data_new>
    141c:	add	sp, sp, #20
    1420:	pop	{r4, r5, pc}
    1424:	ldr	r3, [pc, #32]	; 144c <coda_mem_uint16_new+0x68>
    1428:	ldr	r2, [pc, #32]	; 1450 <coda_mem_uint16_new+0x6c>
    142c:	ldr	r1, [pc, #32]	; 1454 <coda_mem_uint16_new+0x70>
    1430:	ldr	r0, [pc, #32]	; 1458 <coda_mem_uint16_new+0x74>
    1434:	bl	0 <__assert_fail>
    1438:	ldr	r3, [pc, #12]	; 144c <coda_mem_uint16_new+0x68>
    143c:	mov	r2, #872	; 0x368
    1440:	ldr	r1, [pc, #12]	; 1454 <coda_mem_uint16_new+0x70>
    1444:	ldr	r0, [pc, #16]	; 145c <coda_mem_uint16_new+0x78>
    1448:	bl	0 <__assert_fail>
    144c:	.word	0x000000d4
    1450:	.word	0x00000367
    1454:	.word	0x00000000
    1458:	.word	0x00000794
    145c:	.word	0x000007e0

00001460 <coda_mem_int32_new>:
    1460:	push	{r4, r5, lr}
    1464:	sub	sp, sp, #20
    1468:	ldrd	r4, [r0, #24]
    146c:	str	r3, [sp, #12]
    1470:	cmp	r5, #0
    1474:	cmpeq	r4, #32
    1478:	bne	149c <coda_mem_int32_new+0x3c>
    147c:	ldr	r3, [r0, #12]
    1480:	cmp	r3, #4
    1484:	bne	14b0 <coda_mem_int32_new+0x50>
    1488:	add	ip, sp, #12
    148c:	str	ip, [sp]
    1490:	bl	f10 <coda_mem_data_new>
    1494:	add	sp, sp, #20
    1498:	pop	{r4, r5, pc}
    149c:	ldr	r3, [pc, #32]	; 14c4 <coda_mem_int32_new+0x64>
    14a0:	ldr	r2, [pc, #32]	; 14c8 <coda_mem_int32_new+0x68>
    14a4:	ldr	r1, [pc, #32]	; 14cc <coda_mem_int32_new+0x6c>
    14a8:	ldr	r0, [pc, #32]	; 14d0 <coda_mem_int32_new+0x70>
    14ac:	bl	0 <__assert_fail>
    14b0:	ldr	r3, [pc, #12]	; 14c4 <coda_mem_int32_new+0x64>
    14b4:	mov	r2, #880	; 0x370
    14b8:	ldr	r1, [pc, #12]	; 14cc <coda_mem_int32_new+0x6c>
    14bc:	ldr	r0, [pc, #16]	; 14d4 <coda_mem_int32_new+0x74>
    14c0:	bl	0 <__assert_fail>
    14c4:	.word	0x000000e8
    14c8:	.word	0x0000036f
    14cc:	.word	0x00000000
    14d0:	.word	0x00000814
    14d4:	.word	0x00000830

000014d8 <coda_mem_uint32_new>:
    14d8:	push	{r4, r5, lr}
    14dc:	sub	sp, sp, #20
    14e0:	ldrd	r4, [r0, #24]
    14e4:	str	r3, [sp, #12]
    14e8:	cmp	r5, #0
    14ec:	cmpeq	r4, #32
    14f0:	bne	1518 <coda_mem_uint32_new+0x40>
    14f4:	ldr	r3, [r0, #12]
    14f8:	cmp	r3, #5
    14fc:	bne	152c <coda_mem_uint32_new+0x54>
    1500:	add	r3, sp, #12
    1504:	str	r3, [sp]
    1508:	mov	r3, #4
    150c:	bl	f10 <coda_mem_data_new>
    1510:	add	sp, sp, #20
    1514:	pop	{r4, r5, pc}
    1518:	ldr	r3, [pc, #32]	; 1540 <coda_mem_uint32_new+0x68>
    151c:	ldr	r2, [pc, #32]	; 1544 <coda_mem_uint32_new+0x6c>
    1520:	ldr	r1, [pc, #32]	; 1548 <coda_mem_uint32_new+0x70>
    1524:	ldr	r0, [pc, #32]	; 154c <coda_mem_uint32_new+0x74>
    1528:	bl	0 <__assert_fail>
    152c:	ldr	r3, [pc, #12]	; 1540 <coda_mem_uint32_new+0x68>
    1530:	mov	r2, #888	; 0x378
    1534:	ldr	r1, [pc, #12]	; 1548 <coda_mem_uint32_new+0x70>
    1538:	ldr	r0, [pc, #16]	; 1550 <coda_mem_uint32_new+0x78>
    153c:	bl	0 <__assert_fail>
    1540:	.word	0x000000fc
    1544:	.word	0x00000377
    1548:	.word	0x00000000
    154c:	.word	0x00000814
    1550:	.word	0x00000860

00001554 <coda_mem_int64_new>:
    1554:	push	{r4, r5, lr}
    1558:	sub	sp, sp, #12
    155c:	ldrd	r4, [r0, #24]
    1560:	cmp	r5, #0
    1564:	cmpeq	r4, #64	; 0x40
    1568:	bne	1590 <coda_mem_int64_new+0x3c>
    156c:	ldr	r3, [r0, #12]
    1570:	cmp	r3, #6
    1574:	bne	15a4 <coda_mem_int64_new+0x50>
    1578:	add	r3, sp, #24
    157c:	str	r3, [sp]
    1580:	mov	r3, #8
    1584:	bl	f10 <coda_mem_data_new>
    1588:	add	sp, sp, #12
    158c:	pop	{r4, r5, pc}
    1590:	ldr	r3, [pc, #32]	; 15b8 <coda_mem_int64_new+0x64>
    1594:	ldr	r2, [pc, #32]	; 15bc <coda_mem_int64_new+0x68>
    1598:	ldr	r1, [pc, #32]	; 15c0 <coda_mem_int64_new+0x6c>
    159c:	ldr	r0, [pc, #32]	; 15c4 <coda_mem_int64_new+0x70>
    15a0:	bl	0 <__assert_fail>
    15a4:	ldr	r3, [pc, #12]	; 15b8 <coda_mem_int64_new+0x64>
    15a8:	mov	r2, #896	; 0x380
    15ac:	ldr	r1, [pc, #12]	; 15c0 <coda_mem_int64_new+0x6c>
    15b0:	ldr	r0, [pc, #16]	; 15c8 <coda_mem_int64_new+0x74>
    15b4:	bl	0 <__assert_fail>
    15b8:	.word	0x00000110
    15bc:	.word	0x0000037f
    15c0:	.word	0x00000000
    15c4:	.word	0x00000894
    15c8:	.word	0x000008b0

000015cc <coda_mem_uint64_new>:
    15cc:	push	{r4, r5, lr}
    15d0:	sub	sp, sp, #12
    15d4:	ldrd	r4, [r0, #24]
    15d8:	cmp	r5, #0
    15dc:	cmpeq	r4, #64	; 0x40
    15e0:	bne	1608 <coda_mem_uint64_new+0x3c>
    15e4:	ldr	r3, [r0, #12]
    15e8:	cmp	r3, #7
    15ec:	bne	161c <coda_mem_uint64_new+0x50>
    15f0:	add	r3, sp, #24
    15f4:	str	r3, [sp]
    15f8:	mov	r3, #8
    15fc:	bl	f10 <coda_mem_data_new>
    1600:	add	sp, sp, #12
    1604:	pop	{r4, r5, pc}
    1608:	ldr	r3, [pc, #32]	; 1630 <coda_mem_uint64_new+0x64>
    160c:	ldr	r2, [pc, #32]	; 1634 <coda_mem_uint64_new+0x68>
    1610:	ldr	r1, [pc, #32]	; 1638 <coda_mem_uint64_new+0x6c>
    1614:	ldr	r0, [pc, #32]	; 163c <coda_mem_uint64_new+0x70>
    1618:	bl	0 <__assert_fail>
    161c:	ldr	r3, [pc, #12]	; 1630 <coda_mem_uint64_new+0x64>
    1620:	mov	r2, #904	; 0x388
    1624:	ldr	r1, [pc, #12]	; 1638 <coda_mem_uint64_new+0x6c>
    1628:	ldr	r0, [pc, #16]	; 1640 <coda_mem_uint64_new+0x74>
    162c:	bl	0 <__assert_fail>
    1630:	.word	0x00000124
    1634:	.word	0x00000387
    1638:	.word	0x00000000
    163c:	.word	0x00000894
    1640:	.word	0x000008e0

00001644 <coda_mem_float_new>:
    1644:	push	{r4, r5, lr}
    1648:	sub	sp, sp, #20
    164c:	ldrd	r4, [r0, #24]
    1650:	vstr	s0, [sp, #12]
    1654:	cmp	r5, #0
    1658:	cmpeq	r4, #32
    165c:	bne	1684 <coda_mem_float_new+0x40>
    1660:	ldr	r3, [r0, #12]
    1664:	cmp	r3, #8
    1668:	bne	1698 <coda_mem_float_new+0x54>
    166c:	add	r3, sp, #12
    1670:	str	r3, [sp]
    1674:	mov	r3, #4
    1678:	bl	f10 <coda_mem_data_new>
    167c:	add	sp, sp, #20
    1680:	pop	{r4, r5, pc}
    1684:	ldr	r3, [pc, #32]	; 16ac <coda_mem_float_new+0x68>
    1688:	ldr	r2, [pc, #32]	; 16b0 <coda_mem_float_new+0x6c>
    168c:	ldr	r1, [pc, #32]	; 16b4 <coda_mem_float_new+0x70>
    1690:	ldr	r0, [pc, #32]	; 16b8 <coda_mem_float_new+0x74>
    1694:	bl	0 <__assert_fail>
    1698:	ldr	r3, [pc, #12]	; 16ac <coda_mem_float_new+0x68>
    169c:	mov	r2, #912	; 0x390
    16a0:	ldr	r1, [pc, #12]	; 16b4 <coda_mem_float_new+0x70>
    16a4:	ldr	r0, [pc, #16]	; 16bc <coda_mem_float_new+0x78>
    16a8:	bl	0 <__assert_fail>
    16ac:	.word	0x00000138
    16b0:	.word	0x0000038f
    16b4:	.word	0x00000000
    16b8:	.word	0x00000814
    16bc:	.word	0x00000914

000016c0 <coda_mem_double_new>:
    16c0:	push	{r4, r5, lr}
    16c4:	sub	sp, sp, #20
    16c8:	ldrd	r4, [r0, #24]
    16cc:	vstr	d0, [sp, #8]
    16d0:	cmp	r5, #0
    16d4:	cmpeq	r4, #64	; 0x40
    16d8:	bne	1700 <coda_mem_double_new+0x40>
    16dc:	ldr	r3, [r0, #12]
    16e0:	cmp	r3, #9
    16e4:	bne	1714 <coda_mem_double_new+0x54>
    16e8:	add	r3, sp, #8
    16ec:	str	r3, [sp]
    16f0:	mov	r3, #8
    16f4:	bl	f10 <coda_mem_data_new>
    16f8:	add	sp, sp, #20
    16fc:	pop	{r4, r5, pc}
    1700:	ldr	r3, [pc, #32]	; 1728 <coda_mem_double_new+0x68>
    1704:	ldr	r2, [pc, #32]	; 172c <coda_mem_double_new+0x6c>
    1708:	ldr	r1, [pc, #32]	; 1730 <coda_mem_double_new+0x70>
    170c:	ldr	r0, [pc, #32]	; 1734 <coda_mem_double_new+0x74>
    1710:	bl	0 <__assert_fail>
    1714:	ldr	r3, [pc, #12]	; 1728 <coda_mem_double_new+0x68>
    1718:	mov	r2, #920	; 0x398
    171c:	ldr	r1, [pc, #12]	; 1730 <coda_mem_double_new+0x70>
    1720:	ldr	r0, [pc, #16]	; 1738 <coda_mem_double_new+0x78>
    1724:	bl	0 <__assert_fail>
    1728:	.word	0x0000014c
    172c:	.word	0x00000397
    1730:	.word	0x00000000
    1734:	.word	0x00000894
    1738:	.word	0x00000944

0000173c <coda_mem_char_new>:
    173c:	push	{r4, r5, lr}
    1740:	sub	sp, sp, #20
    1744:	ldrd	r4, [r0, #24]
    1748:	strb	r3, [sp, #15]
    174c:	cmp	r5, #0
    1750:	cmpeq	r4, #8
    1754:	bne	177c <coda_mem_char_new+0x40>
    1758:	ldr	r3, [r0, #12]
    175c:	cmp	r3, #10
    1760:	bne	1790 <coda_mem_char_new+0x54>
    1764:	add	r3, sp, #15
    1768:	str	r3, [sp]
    176c:	mov	r3, #1
    1770:	bl	f10 <coda_mem_data_new>
    1774:	add	sp, sp, #20
    1778:	pop	{r4, r5, pc}
    177c:	ldr	r3, [pc, #32]	; 17a4 <coda_mem_char_new+0x68>
    1780:	ldr	r2, [pc, #32]	; 17a8 <coda_mem_char_new+0x6c>
    1784:	ldr	r1, [pc, #32]	; 17ac <coda_mem_char_new+0x70>
    1788:	ldr	r0, [pc, #32]	; 17b0 <coda_mem_char_new+0x74>
    178c:	bl	0 <__assert_fail>
    1790:	ldr	r3, [pc, #12]	; 17a4 <coda_mem_char_new+0x68>
    1794:	mov	r2, #928	; 0x3a0
    1798:	ldr	r1, [pc, #12]	; 17ac <coda_mem_char_new+0x70>
    179c:	ldr	r0, [pc, #16]	; 17b4 <coda_mem_char_new+0x78>
    17a0:	bl	0 <__assert_fail>
    17a4:	.word	0x00000160
    17a8:	.word	0x0000039f
    17ac:	.word	0x00000000
    17b0:	.word	0x00000718
    17b4:	.word	0x00000978

000017b8 <coda_mem_string_new>:
    17b8:	push	{r4, r5, r6, r7, lr}
    17bc:	mov	r5, r0
    17c0:	ldr	r0, [r0, #12]
    17c4:	sub	sp, sp, #12
    17c8:	cmp	r0, #11
    17cc:	bne	1810 <coda_mem_string_new+0x58>
    17d0:	cmp	r3, #0
    17d4:	mov	r6, r1
    17d8:	mov	r7, r2
    17dc:	mov	r4, r3
    17e0:	beq	180c <coda_mem_string_new+0x54>
    17e4:	mov	r0, r3
    17e8:	bl	0 <strlen>
    17ec:	mov	r3, r0
    17f0:	str	r4, [sp]
    17f4:	mov	r2, r7
    17f8:	mov	r1, r6
    17fc:	mov	r0, r5
    1800:	bl	f10 <coda_mem_data_new>
    1804:	add	sp, sp, #12
    1808:	pop	{r4, r5, r6, r7, pc}
    180c:	b	17f0 <coda_mem_string_new+0x38>
    1810:	ldr	r3, [pc, #12]	; 1824 <coda_mem_string_new+0x6c>
    1814:	ldr	r2, [pc, #12]	; 1828 <coda_mem_string_new+0x70>
    1818:	ldr	r1, [pc, #12]	; 182c <coda_mem_string_new+0x74>
    181c:	ldr	r0, [pc, #12]	; 1830 <coda_mem_string_new+0x78>
    1820:	bl	0 <__assert_fail>
    1824:	.word	0x00000174
    1828:	.word	0x000003a7
    182c:	.word	0x00000000
    1830:	.word	0x000009a8

00001834 <coda_mem_type_update>:
    1834:	push	{r4, r5, r6, r7, lr}
    1838:	mov	r5, r1
    183c:	ldr	r4, [r0]
    1840:	sub	sp, sp, #12
    1844:	ldr	r3, [r4]
    1848:	cmp	r3, #1
    184c:	bls	19f0 <coda_mem_type_update+0x1bc>
    1850:	cmp	r3, #100	; 0x64
    1854:	bne	1b54 <coda_mem_type_update+0x320>
    1858:	ldr	r3, [r4, #4]
    185c:	cmp	r1, r3
    1860:	beq	198c <coda_mem_type_update+0x158>
    1864:	ldr	r2, [r1, #8]
    1868:	mov	r6, r0
    186c:	cmp	r2, #1
    1870:	bne	1924 <coda_mem_type_update+0xf0>
    1874:	ldr	r3, [r3, #8]
    1878:	cmp	r3, #1
    187c:	beq	1a04 <coda_mem_type_update+0x1d0>
    1880:	ldr	r3, [r1]
    1884:	cmp	r3, #2
    1888:	bne	1b40 <coda_mem_type_update+0x30c>
    188c:	mov	r7, #0
    1890:	b	1904 <coda_mem_type_update+0xd0>
    1894:	ldr	r1, [r5, #40]	; 0x28
    1898:	mov	r0, r6
    189c:	bl	1834 <coda_mem_type_update>
    18a0:	cmp	r0, #0
    18a4:	bne	19e4 <coda_mem_type_update+0x1b0>
    18a8:	ldr	r1, [r6]
    18ac:	mov	r0, r4
    18b0:	bl	c8c <coda_mem_array_add_element>
    18b4:	cmp	r0, #0
    18b8:	bne	19e4 <coda_mem_type_update+0x1b0>
    18bc:	ldr	r3, [r4]
    18c0:	str	r4, [r6]
    18c4:	cmp	r3, #1
    18c8:	bls	19f0 <coda_mem_type_update+0x1bc>
    18cc:	cmp	r3, #100	; 0x64
    18d0:	bne	1b54 <coda_mem_type_update+0x320>
    18d4:	ldr	r3, [r4, #4]
    18d8:	cmp	r5, r3
    18dc:	beq	198c <coda_mem_type_update+0x158>
    18e0:	ldr	r2, [r5, #8]
    18e4:	cmp	r2, #1
    18e8:	bne	1924 <coda_mem_type_update+0xf0>
    18ec:	ldr	r3, [r3, #8]
    18f0:	cmp	r3, #1
    18f4:	beq	1a04 <coda_mem_type_update+0x1d0>
    18f8:	ldr	r3, [r5]
    18fc:	cmp	r3, #2
    1900:	bne	1b40 <coda_mem_type_update+0x30c>
    1904:	mov	r1, r7
    1908:	mov	r0, r5
    190c:	bl	9fc <coda_mem_array_new>
    1910:	subs	r4, r0, #0
    1914:	bne	1894 <coda_mem_type_update+0x60>
    1918:	mvn	r0, #0
    191c:	add	sp, sp, #12
    1920:	pop	{r4, r5, r6, r7, pc}
    1924:	ldr	r1, [r3, #8]
    1928:	cmp	r1, #0
    192c:	cmpeq	r2, #4
    1930:	bne	1a04 <coda_mem_type_update+0x1d0>
    1934:	ldr	r2, [r3]
    1938:	cmp	r2, #2
    193c:	bne	1ba8 <coda_mem_type_update+0x374>
    1940:	ldr	r7, [r3, #48]	; 0x30
    1944:	cmp	r7, #0
    1948:	bne	1b94 <coda_mem_type_update+0x360>
    194c:	mov	r0, r5
    1950:	mov	r3, r7
    1954:	mov	r2, r7
    1958:	mov	r1, r7
    195c:	bl	17b8 <coda_mem_string_new>
    1960:	ldr	r3, [r6]
    1964:	ldr	r3, [r3, #12]
    1968:	str	r3, [r0, #12]
    196c:	ldr	r3, [r6]
    1970:	mov	r5, r0
    1974:	mov	r4, r0
    1978:	str	r7, [r3, #12]
    197c:	ldr	r0, [r6]
    1980:	bl	0 <coda_dynamic_type_delete>
    1984:	str	r5, [r6]
    1988:	ldr	r5, [r5, #4]
    198c:	ldr	r3, [r4, #8]
    1990:	cmp	r3, #1
    1994:	beq	1a8c <coda_mem_type_update+0x258>
    1998:	bcc	1a18 <coda_mem_type_update+0x1e4>
    199c:	cmp	r3, #3
    19a0:	bne	19bc <coda_mem_type_update+0x188>
    19a4:	ldr	r1, [r5, #44]	; 0x2c
    19a8:	add	r0, r4, #16
    19ac:	bl	1834 <coda_mem_type_update>
    19b0:	cmp	r0, #0
    19b4:	bne	1918 <coda_mem_type_update+0xe4>
    19b8:	ldr	r5, [r4, #4]
    19bc:	ldr	r1, [r4, #12]
    19c0:	cmp	r1, #0
    19c4:	beq	1ad0 <coda_mem_type_update+0x29c>
    19c8:	ldr	r1, [r5, #36]	; 0x24
    19cc:	add	r0, r4, #12
    19d0:	bl	1834 <coda_mem_type_update>
    19d4:	adds	r0, r0, #0
    19d8:	mvnne	r0, #0
    19dc:	add	sp, sp, #12
    19e0:	pop	{r4, r5, r6, r7, pc}
    19e4:	mov	r0, r4
    19e8:	bl	0 <coda_dynamic_type_delete>
    19ec:	b	1918 <coda_mem_type_update+0xe4>
    19f0:	cmp	r5, r4
    19f4:	bne	1bbc <coda_mem_type_update+0x388>
    19f8:	mov	r0, #0
    19fc:	add	sp, sp, #12
    1a00:	pop	{r4, r5, r6, r7, pc}
    1a04:	ldr	r3, [pc, #452]	; 1bd0 <coda_mem_type_update+0x39c>
    1a08:	mov	r2, #153	; 0x99
    1a0c:	ldr	r1, [pc, #448]	; 1bd4 <coda_mem_type_update+0x3a0>
    1a10:	ldr	r0, [pc, #448]	; 1bd8 <coda_mem_type_update+0x3a4>
    1a14:	bl	0 <__assert_fail>
    1a18:	ldr	r1, [r5, #48]	; 0x30
    1a1c:	ldr	r3, [r4, #16]
    1a20:	cmp	r3, r1
    1a24:	blt	1af4 <coda_mem_type_update+0x2c0>
    1a28:	cmp	r1, #0
    1a2c:	ble	19bc <coda_mem_type_update+0x188>
    1a30:	mov	r6, #0
    1a34:	mov	r7, #1
    1a38:	b	1a60 <coda_mem_type_update+0x22c>
    1a3c:	ldr	r1, [r3, #8]
    1a40:	bl	1834 <coda_mem_type_update>
    1a44:	cmp	r0, #0
    1a48:	bne	1918 <coda_mem_type_update+0xe4>
    1a4c:	ldr	r5, [r4, #4]
    1a50:	add	r6, r6, #1
    1a54:	ldr	r3, [r5, #48]	; 0x30
    1a58:	cmp	r3, r6
    1a5c:	ble	19bc <coda_mem_type_update+0x188>
    1a60:	ldr	r3, [r4, #20]
    1a64:	add	r0, r3, r6, lsl #2
    1a68:	ldr	r3, [r3, r6, lsl #2]
    1a6c:	cmp	r3, #0
    1a70:	ldr	r3, [r5, #52]	; 0x34
    1a74:	ldr	r3, [r3, r6, lsl #2]
    1a78:	bne	1a3c <coda_mem_type_update+0x208>
    1a7c:	ldrb	r2, [r3, #16]
    1a80:	cmp	r2, #0
    1a84:	strbeq	r7, [r3, #16]
    1a88:	b	1a4c <coda_mem_type_update+0x218>
    1a8c:	ldr	r3, [r4, #16]
    1a90:	cmp	r3, #0
    1a94:	ble	19bc <coda_mem_type_update+0x188>
    1a98:	mov	r6, #0
    1a9c:	b	1ab4 <coda_mem_type_update+0x280>
    1aa0:	ldr	r3, [r4, #16]
    1aa4:	add	r6, r6, #1
    1aa8:	cmp	r3, r6
    1aac:	ldr	r5, [r4, #4]
    1ab0:	ble	19bc <coda_mem_type_update+0x188>
    1ab4:	ldr	r0, [r4, #20]
    1ab8:	ldr	r1, [r5, #40]	; 0x28
    1abc:	add	r0, r0, r6, lsl #2
    1ac0:	bl	1834 <coda_mem_type_update>
    1ac4:	cmp	r0, #0
    1ac8:	beq	1aa0 <coda_mem_type_update+0x26c>
    1acc:	b	1918 <coda_mem_type_update+0xe4>
    1ad0:	ldr	r0, [r5, #36]	; 0x24
    1ad4:	cmp	r0, #0
    1ad8:	beq	19f8 <coda_mem_type_update+0x1c4>
    1adc:	bl	25c <coda_mem_record_new>
    1ae0:	cmp	r0, #0
    1ae4:	str	r0, [r4, #12]
    1ae8:	beq	1918 <coda_mem_type_update+0xe4>
    1aec:	ldr	r5, [r4, #4]
    1af0:	b	19c8 <coda_mem_type_update+0x194>
    1af4:	lsl	r1, r1, #2
    1af8:	ldr	r0, [r4, #20]
    1afc:	bl	0 <realloc>
    1b00:	subs	r2, r0, #0
    1b04:	beq	1b68 <coda_mem_type_update+0x334>
    1b08:	ldr	r5, [r4, #4]
    1b0c:	ldr	r3, [r4, #16]
    1b10:	str	r2, [r4, #20]
    1b14:	ldr	r1, [r5, #48]	; 0x30
    1b18:	cmp	r3, r1
    1b1c:	addlt	r3, r2, r3, lsl #2
    1b20:	movlt	r0, #0
    1b24:	addlt	r2, r2, r1, lsl #2
    1b28:	bge	1b38 <coda_mem_type_update+0x304>
    1b2c:	str	r0, [r3], #4
    1b30:	cmp	r2, r3
    1b34:	bne	1b2c <coda_mem_type_update+0x2f8>
    1b38:	str	r1, [r4, #16]
    1b3c:	b	1a28 <coda_mem_type_update+0x1f4>
    1b40:	ldr	r3, [pc, #136]	; 1bd0 <coda_mem_type_update+0x39c>
    1b44:	mov	r2, #114	; 0x72
    1b48:	ldr	r1, [pc, #132]	; 1bd4 <coda_mem_type_update+0x3a0>
    1b4c:	ldr	r0, [pc, #136]	; 1bdc <coda_mem_type_update+0x3a8>
    1b50:	bl	0 <__assert_fail>
    1b54:	ldr	r3, [pc, #116]	; 1bd0 <coda_mem_type_update+0x39c>
    1b58:	mov	r2, #108	; 0x6c
    1b5c:	ldr	r1, [pc, #112]	; 1bd4 <coda_mem_type_update+0x3a0>
    1b60:	ldr	r0, [pc, #120]	; 1be0 <coda_mem_type_update+0x3ac>
    1b64:	bl	0 <__assert_fail>
    1b68:	ldr	r2, [r4, #4]
    1b6c:	mov	r0, #177	; 0xb1
    1b70:	ldr	r3, [pc, #92]	; 1bd4 <coda_mem_type_update+0x3a0>
    1b74:	ldr	r2, [r2, #48]	; 0x30
    1b78:	ldr	r1, [pc, #100]	; 1be4 <coda_mem_type_update+0x3b0>
    1b7c:	str	r0, [sp]
    1b80:	lsl	r2, r2, #2
    1b84:	mvn	r0, #0
    1b88:	bl	0 <coda_set_error>
    1b8c:	mvn	r0, #0
    1b90:	b	191c <coda_mem_type_update+0xe8>
    1b94:	ldr	r3, [pc, #52]	; 1bd0 <coda_mem_type_update+0x39c>
    1b98:	mov	r2, #142	; 0x8e
    1b9c:	ldr	r1, [pc, #48]	; 1bd4 <coda_mem_type_update+0x3a0>
    1ba0:	ldr	r0, [pc, #64]	; 1be8 <coda_mem_type_update+0x3b4>
    1ba4:	bl	0 <__assert_fail>
    1ba8:	ldr	r3, [pc, #32]	; 1bd0 <coda_mem_type_update+0x39c>
    1bac:	mov	r2, #141	; 0x8d
    1bb0:	ldr	r1, [pc, #28]	; 1bd4 <coda_mem_type_update+0x3a0>
    1bb4:	ldr	r0, [pc, #48]	; 1bec <coda_mem_type_update+0x3b8>
    1bb8:	bl	0 <__assert_fail>
    1bbc:	ldr	r3, [pc, #12]	; 1bd0 <coda_mem_type_update+0x39c>
    1bc0:	mov	r2, #104	; 0x68
    1bc4:	ldr	r1, [pc, #8]	; 1bd4 <coda_mem_type_update+0x3a0>
    1bc8:	ldr	r0, [pc, #32]	; 1bf0 <coda_mem_type_update+0x3bc>
    1bcc:	bl	0 <__assert_fail>
    1bd0:	.word	0x00000188
    1bd4:	.word	0x00000000
    1bd8:	.word	0x00000acc
    1bdc:	.word	0x00000a04
    1be0:	.word	0x000009dc
    1be4:	.word	0x000001f8
    1be8:	.word	0x00000a90
    1bec:	.word	0x00000a60
    1bf0:	.word	0x00000a2c

00001bf4 <coda_mem_raw_new>:
    1bf4:	ldr	ip, [r0, #8]
    1bf8:	push	{r4, lr}
    1bfc:	cmp	ip, #5
    1c00:	ldr	lr, [sp, #8]
    1c04:	bne	1c14 <coda_mem_raw_new+0x20>
    1c08:	str	lr, [sp, #8]
    1c0c:	pop	{r4, lr}
    1c10:	b	f10 <coda_mem_data_new>
    1c14:	bl	0 <coda_mem_type_delete>

00001c18 <coda_mem_time_new>:
    1c18:	push	{r4, r5, r6, r7, lr}
    1c1c:	subs	r4, r0, #0
    1c20:	sub	sp, sp, #12
    1c24:	beq	1d3c <coda_mem_time_new+0x124>
    1c28:	ldr	r3, [r4, #8]
    1c2c:	cmp	r3, #6
    1c30:	bne	1cfc <coda_mem_time_new+0xe4>
    1c34:	ldr	r3, [r4, #40]	; 0x28
    1c38:	cmp	r3, #2
    1c3c:	bne	1d20 <coda_mem_time_new+0x108>
    1c40:	mov	r6, r2
    1c44:	ldr	r2, [r4, #44]	; 0x2c
    1c48:	ldr	r3, [r6, #4]
    1c4c:	cmp	r2, r3
    1c50:	bne	1ca4 <coda_mem_time_new+0x8c>
    1c54:	mov	r0, #20
    1c58:	mov	r7, r1
    1c5c:	bl	0 <malloc>
    1c60:	subs	r5, r0, #0
    1c64:	beq	1d58 <coda_mem_time_new+0x140>
    1c68:	ldr	r3, [r4, #4]
    1c6c:	mov	r1, #100	; 0x64
    1c70:	add	r3, r3, #1
    1c74:	mov	r2, #3
    1c78:	cmp	r7, #0
    1c7c:	str	r4, [r5, #4]
    1c80:	str	r7, [r5, #12]
    1c84:	str	r6, [r5, #16]
    1c88:	str	r3, [r4, #4]
    1c8c:	str	r1, [r5]
    1c90:	str	r2, [r5, #8]
    1c94:	beq	1cc8 <coda_mem_time_new+0xb0>
    1c98:	mov	r0, r5
    1c9c:	add	sp, sp, #12
    1ca0:	pop	{r4, r5, r6, r7, pc}
    1ca4:	ldr	r3, [pc, #204]	; 1d78 <coda_mem_time_new+0x160>
    1ca8:	ldr	r2, [pc, #204]	; 1d7c <coda_mem_time_new+0x164>
    1cac:	ldr	r1, [pc, #204]	; 1d80 <coda_mem_time_new+0x168>
    1cb0:	mvn	r0, #99	; 0x63
    1cb4:	bl	0 <coda_set_error>
    1cb8:	mov	r5, #0
    1cbc:	mov	r0, r5
    1cc0:	add	sp, sp, #12
    1cc4:	pop	{r4, r5, r6, r7, pc}
    1cc8:	ldr	r0, [r4, #36]	; 0x24
    1ccc:	cmp	r0, #0
    1cd0:	beq	1c98 <coda_mem_time_new+0x80>
    1cd4:	mov	r1, r7
    1cd8:	bl	25c <coda_mem_record_new>
    1cdc:	cmp	r0, #0
    1ce0:	mov	r4, r0
    1ce4:	str	r0, [r5, #12]
    1ce8:	bne	1c98 <coda_mem_time_new+0x80>
    1cec:	mov	r0, r5
    1cf0:	bl	0 <coda_mem_type_delete>
    1cf4:	mov	r5, r4
    1cf8:	b	1c98 <coda_mem_time_new+0x80>
    1cfc:	ldr	r3, [pc, #128]	; 1d84 <coda_mem_time_new+0x16c>
    1d00:	ldr	r2, [pc, #116]	; 1d7c <coda_mem_time_new+0x164>
    1d04:	ldr	r1, [pc, #124]	; 1d88 <coda_mem_time_new+0x170>
    1d08:	mvn	r0, #99	; 0x63
    1d0c:	bl	0 <coda_set_error>
    1d10:	mov	r5, #0
    1d14:	mov	r0, r5
    1d18:	add	sp, sp, #12
    1d1c:	pop	{r4, r5, r6, r7, pc}
    1d20:	mov	r3, #964	; 0x3c4
    1d24:	ldr	r2, [pc, #80]	; 1d7c <coda_mem_time_new+0x164>
    1d28:	ldr	r1, [pc, #92]	; 1d8c <coda_mem_time_new+0x174>
    1d2c:	mvn	r0, #99	; 0x63
    1d30:	bl	0 <coda_set_error>
    1d34:	mov	r5, #0
    1d38:	b	1c98 <coda_mem_time_new+0x80>
    1d3c:	ldr	r3, [pc, #76]	; 1d90 <coda_mem_time_new+0x178>
    1d40:	ldr	r2, [pc, #52]	; 1d7c <coda_mem_time_new+0x164>
    1d44:	ldr	r1, [pc, #72]	; 1d94 <coda_mem_time_new+0x17c>
    1d48:	mvn	r0, #99	; 0x63
    1d4c:	mov	r5, r4
    1d50:	bl	0 <coda_set_error>
    1d54:	b	1c98 <coda_mem_time_new+0x80>
    1d58:	ldr	r2, [pc, #56]	; 1d98 <coda_mem_time_new+0x180>
    1d5c:	ldr	r3, [pc, #24]	; 1d7c <coda_mem_time_new+0x164>
    1d60:	str	r2, [sp]
    1d64:	ldr	r1, [pc, #48]	; 1d9c <coda_mem_time_new+0x184>
    1d68:	mov	r2, #20
    1d6c:	mvn	r0, #0
    1d70:	bl	0 <coda_set_error>
    1d74:	b	1c98 <coda_mem_time_new+0x80>
    1d78:	.word	0x000003ca
    1d7c:	.word	0x00000000
    1d80:	.word	0x00000b24
    1d84:	.word	0x000003bf
    1d88:	.word	0x00000ad0
    1d8c:	.word	0x00000afc
    1d90:	.word	0x000003ba
    1d94:	.word	0x00000188
    1d98:	.word	0x000003d2
    1d9c:	.word	0x000001f8

00001da0 <coda_mem_no_data_new>:
    1da0:	push	{r4, r5, r6, lr}
    1da4:	mov	r6, r0
    1da8:	sub	sp, sp, #8
    1dac:	mov	r0, #20
    1db0:	bl	0 <malloc>
    1db4:	subs	r4, r0, #0
    1db8:	beq	1e7c <coda_mem_no_data_new+0xdc>
    1dbc:	mov	r5, #0
    1dc0:	mov	r2, #100	; 0x64
    1dc4:	mov	r3, #3
    1dc8:	mov	r0, r6
    1dcc:	stm	r4, {r2, r5}
    1dd0:	str	r5, [r4, #12]
    1dd4:	str	r5, [r4, #16]
    1dd8:	str	r3, [r4, #8]
    1ddc:	bl	0 <coda_type_no_data_singleton>
    1de0:	cmp	r0, r5
    1de4:	mov	r6, r0
    1de8:	str	r0, [r4, #4]
    1dec:	beq	1e9c <coda_mem_no_data_new+0xfc>
    1df0:	ldr	r0, [r0, #44]	; 0x2c
    1df4:	ldr	r3, [r6, #4]
    1df8:	ldr	r2, [r0, #8]
    1dfc:	add	r3, r3, #1
    1e00:	cmp	r2, #5
    1e04:	str	r3, [r6, #4]
    1e08:	bne	1eac <coda_mem_no_data_new+0x10c>
    1e0c:	str	r5, [sp]
    1e10:	mov	r3, r5
    1e14:	mov	r2, r5
    1e18:	mov	r1, r5
    1e1c:	bl	f10 <coda_mem_data_new>
    1e20:	cmp	r0, #0
    1e24:	mov	r6, r0
    1e28:	str	r0, [r4, #16]
    1e2c:	beq	1e9c <coda_mem_no_data_new+0xfc>
    1e30:	ldr	r3, [r4, #4]
    1e34:	ldr	r0, [r3, #36]	; 0x24
    1e38:	cmp	r0, #0
    1e3c:	beq	1e58 <coda_mem_no_data_new+0xb8>
    1e40:	mov	r1, r5
    1e44:	bl	25c <coda_mem_record_new>
    1e48:	cmp	r0, #0
    1e4c:	mov	r5, r0
    1e50:	str	r0, [r4, #12]
    1e54:	beq	1e64 <coda_mem_no_data_new+0xc4>
    1e58:	mov	r0, r4
    1e5c:	add	sp, sp, #8
    1e60:	pop	{r4, r5, r6, pc}
    1e64:	mov	r0, r4
    1e68:	bl	0 <coda_mem_type_delete>
    1e6c:	mov	r4, r5
    1e70:	mov	r0, r4
    1e74:	add	sp, sp, #8
    1e78:	pop	{r4, r5, r6, pc}
    1e7c:	ldr	r2, [pc, #44]	; 1eb0 <coda_mem_no_data_new+0x110>
    1e80:	ldr	r3, [pc, #44]	; 1eb4 <coda_mem_no_data_new+0x114>
    1e84:	str	r2, [sp]
    1e88:	ldr	r1, [pc, #40]	; 1eb8 <coda_mem_no_data_new+0x118>
    1e8c:	mov	r2, #20
    1e90:	mvn	r0, #0
    1e94:	bl	0 <coda_set_error>
    1e98:	b	1e58 <coda_mem_no_data_new+0xb8>
    1e9c:	mov	r0, r4
    1ea0:	bl	0 <coda_mem_type_delete>
    1ea4:	mov	r4, r6
    1ea8:	b	1e58 <coda_mem_no_data_new+0xb8>
    1eac:	bl	0 <coda_mem_type_delete>
    1eb0:	.word	0x000003f1
    1eb4:	.word	0x00000000
    1eb8:	.word	0x000001f8

Disassembly of section .text.unlikely:

00000000 <coda_mem_raw_new.part.2>:
   0:	push	{r4, lr}
   4:	ldr	r3, [pc, #12]	; 18 <coda_mem_raw_new.part.2+0x18>
   8:	ldr	r2, [pc, #12]	; 1c <coda_mem_raw_new.part.2+0x1c>
   c:	ldr	r1, [pc, #12]	; 20 <coda_mem_raw_new.part.2+0x20>
  10:	ldr	r0, [pc, #12]	; 24 <coda_mem_raw_new.part.2+0x24>
  14:	bl	0 <__assert_fail>
  18:	.word	0x00000000
  1c:	.word	0x000003af
  20:	.word	0x00000000
  24:	.word	0x0000004c
