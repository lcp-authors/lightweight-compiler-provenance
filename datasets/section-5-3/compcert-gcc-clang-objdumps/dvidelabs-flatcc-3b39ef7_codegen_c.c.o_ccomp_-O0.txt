
../repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_c.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <checkmem>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	cmp	r0, #0
  14:	bne	30 <checkmem+0x30>
  18:	ldr	r0, [pc, #28]	; 3c <checkmem+0x3c>
  1c:	ldr	r0, [r0]
  20:	ldr	r1, [pc, #24]	; 40 <checkmem+0x40>
  24:	bl	0 <fprintf>
  28:	mov	r0, #1
  2c:	bl	0 <exit>
  30:	ldr	lr, [sp, #4]
  34:	add	sp, sp, #8
  38:	bx	lr
  3c:	.word	0x00000000
  40:	.word	0x0000001d

00000044 <pstrcpyupper>:
  44:	mov	ip, sp
  48:	sub	sp, sp, #24
  4c:	str	ip, [sp]
  50:	str	lr, [sp, #4]
  54:	str	r4, [sp, #8]
  58:	str	r5, [sp, #12]
  5c:	str	r6, [sp, #16]
  60:	str	r7, [sp, #20]
  64:	mov	r5, r1
  68:	mov	r4, r0
  6c:	mov	r6, r4
  70:	ldrb	r3, [r5]
  74:	cmp	r3, #0
  78:	beq	a0 <pstrcpyupper+0x5c>
  7c:	mov	r7, r6
  80:	add	r6, r7, #1
  84:	mov	r0, r5
  88:	add	r5, r0, #1
  8c:	ldrb	r0, [r0]
  90:	bl	0 <toupper>
  94:	and	r2, r0, #255	; 0xff
  98:	strb	r2, [r7]
  9c:	b	70 <pstrcpyupper+0x2c>
  a0:	mov	ip, #0
  a4:	strb	ip, [r6]
  a8:	mov	r0, r4
  ac:	ldr	r4, [sp, #8]
  b0:	ldr	r5, [sp, #12]
  b4:	ldr	r6, [sp, #16]
  b8:	ldr	r7, [sp, #20]
  bc:	ldr	lr, [sp, #4]
  c0:	add	sp, sp, #24
  c4:	bx	lr

000000c8 <__flatcc_fb_open_output_file>:
  c8:	mov	ip, sp
  cc:	sub	sp, sp, #40	; 0x28
  d0:	str	ip, [sp, #8]
  d4:	str	lr, [sp, #12]
  d8:	str	r4, [sp, #16]
  dc:	str	r5, [sp, #20]
  e0:	str	r6, [sp, #24]
  e4:	str	r7, [sp, #28]
  e8:	str	r8, [sp, #32]
  ec:	mov	r4, r3
  f0:	mov	r5, r2
  f4:	mov	r6, r1
  f8:	mov	r7, r0
  fc:	ldr	r1, [r7, #212]	; 0xd4
 100:	ldr	r0, [r1, #216]	; 0xd8
 104:	cmp	r0, #0
 108:	beq	118 <__flatcc_fb_open_output_file+0x50>
 10c:	ldr	r2, [r7, #212]	; 0xd4
 110:	ldr	r8, [r2, #216]	; 0xd8
 114:	b	11c <__flatcc_fb_open_output_file+0x54>
 118:	ldr	r8, [pc, #168]	; 1c8 <__flatcc_fb_open_output_file+0x100>
 11c:	mov	r0, r8
 120:	bl	0 <strlen>
 124:	mov	r1, r0
 128:	ldr	r0, [r7, #204]	; 0xcc
 12c:	cmp	r0, #0
 130:	beq	13c <__flatcc_fb_open_output_file+0x74>
 134:	mov	r0, #0
 138:	b	1a4 <__flatcc_fb_open_output_file+0xdc>
 13c:	mov	r0, #1
 140:	str	r0, [sp, #4]
 144:	str	r4, [sp]
 148:	mov	r3, r5
 14c:	mov	r2, r6
 150:	mov	r0, r8
 154:	bl	0 <__flatcc_fb_create_join_path_n>
 158:	mov	r4, r0
 15c:	bl	0 <checkmem>
 160:	ldr	r1, [pc, #104]	; 1d0 <__flatcc_fb_open_output_file+0x108>
 164:	mov	r0, r4
 168:	bl	0 <fopen>
 16c:	str	r0, [r7, #204]	; 0xcc
 170:	mov	r5, #0
 174:	ldr	r3, [r7, #204]	; 0xcc
 178:	cmp	r3, #0
 17c:	bne	198 <__flatcc_fb_open_output_file+0xd0>
 180:	ldr	r2, [pc, #68]	; 1cc <__flatcc_fb_open_output_file+0x104>
 184:	ldr	r0, [r2]
 188:	ldr	r1, [pc, #52]	; 1c4 <__flatcc_fb_open_output_file+0xfc>
 18c:	mov	r2, r4
 190:	bl	0 <fprintf>
 194:	mvn	r5, #0
 198:	mov	r0, r4
 19c:	bl	0 <free>
 1a0:	mov	r0, r5
 1a4:	ldr	r4, [sp, #16]
 1a8:	ldr	r5, [sp, #20]
 1ac:	ldr	r6, [sp, #24]
 1b0:	ldr	r7, [sp, #28]
 1b4:	ldr	r8, [sp, #32]
 1b8:	ldr	lr, [sp, #12]
 1bc:	add	sp, sp, #40	; 0x28
 1c0:	bx	lr
 1c4:	.word	0x000000ff
 1c8:	.word	0x00000159
 1cc:	.word	0x00000000
 1d0:	.word	0x0000007a

000001d4 <__flatcc_fb_close_output_file>:
 1d4:	mov	ip, sp
 1d8:	sub	sp, sp, #16
 1dc:	str	ip, [sp]
 1e0:	str	lr, [sp, #4]
 1e4:	str	r4, [sp, #8]
 1e8:	mov	r4, r0
 1ec:	ldr	r0, [r4, #212]	; 0xd4
 1f0:	ldr	r1, [r0, #124]	; 0x7c
 1f4:	cmp	r1, #0
 1f8:	bne	214 <__flatcc_fb_close_output_file+0x40>
 1fc:	ldr	r2, [r4, #212]	; 0xd4
 200:	ldr	r1, [r2, #108]	; 0x6c
 204:	cmp	r1, #0
 208:	moveq	r3, #1
 20c:	movne	r3, #0
 210:	b	218 <__flatcc_fb_close_output_file+0x44>
 214:	mov	r3, #0
 218:	cmp	r3, #0
 21c:	beq	234 <__flatcc_fb_close_output_file+0x60>
 220:	ldr	r0, [r4, #204]	; 0xcc
 224:	cmp	r0, #0
 228:	movne	r2, #1
 22c:	moveq	r2, #0
 230:	b	238 <__flatcc_fb_close_output_file+0x64>
 234:	mov	r2, #0
 238:	cmp	r2, #0
 23c:	beq	250 <__flatcc_fb_close_output_file+0x7c>
 240:	ldr	r0, [r4, #204]	; 0xcc
 244:	bl	0 <fclose>
 248:	mov	ip, #0
 24c:	str	ip, [r4, #204]	; 0xcc
 250:	ldr	r4, [sp, #8]
 254:	ldr	lr, [sp, #4]
 258:	add	sp, sp, #16
 25c:	bx	lr

00000260 <__flatcc_fb_end_output_c>:
 260:	mov	ip, sp
 264:	sub	sp, sp, #16
 268:	str	ip, [sp]
 26c:	str	lr, [sp, #4]
 270:	str	r4, [sp, #8]
 274:	mov	r4, r0
 278:	ldr	r1, [r4, #204]	; 0xcc
 27c:	ldr	r3, [pc, #72]	; 2cc <__flatcc_fb_end_output_c+0x6c>
 280:	ldr	r2, [r3]
 284:	cmp	r1, r2
 288:	beq	2a0 <__flatcc_fb_end_output_c+0x40>
 28c:	ldr	r0, [r4, #204]	; 0xcc
 290:	cmp	r0, #0
 294:	movne	r0, #1
 298:	moveq	r0, #0
 29c:	b	2a4 <__flatcc_fb_end_output_c+0x44>
 2a0:	mov	r0, #0
 2a4:	cmp	r0, #0
 2a8:	beq	2b4 <__flatcc_fb_end_output_c+0x54>
 2ac:	ldr	r0, [r4, #204]	; 0xcc
 2b0:	bl	0 <fclose>
 2b4:	mov	ip, #0
 2b8:	str	ip, [r4, #204]	; 0xcc
 2bc:	ldr	r4, [sp, #8]
 2c0:	ldr	lr, [sp, #4]
 2c4:	add	sp, sp, #16
 2c8:	bx	lr
 2cc:	.word	0x00000000

000002d0 <__flatcc_fb_init_output_c>:
 2d0:	mov	ip, sp
 2d4:	sub	sp, sp, #32
 2d8:	str	ip, [sp]
 2dc:	str	lr, [sp, #4]
 2e0:	str	r4, [sp, #8]
 2e4:	str	r5, [sp, #12]
 2e8:	str	r6, [sp, #16]
 2ec:	str	r7, [sp, #20]
 2f0:	str	r8, [sp, #24]
 2f4:	str	r9, [sp, #28]
 2f8:	mov	r7, r1
 2fc:	mov	r8, r0
 300:	ldr	r2, [r7, #128]	; 0x80
 304:	cmp	r2, #0
 308:	bne	314 <__flatcc_fb_init_output_c+0x44>
 30c:	ldr	r6, [pc, #444]	; 4d0 <__flatcc_fb_init_output_c+0x200>
 310:	b	318 <__flatcc_fb_init_output_c+0x48>
 314:	ldr	r6, [pc, #412]	; 4b8 <__flatcc_fb_init_output_c+0x1e8>
 318:	ldr	r3, [r7, #216]	; 0xd8
 31c:	cmp	r3, #0
 320:	bne	32c <__flatcc_fb_init_output_c+0x5c>
 324:	ldr	r9, [pc, #404]	; 4c0 <__flatcc_fb_init_output_c+0x1f0>
 328:	b	330 <__flatcc_fb_init_output_c+0x60>
 32c:	ldr	r9, [r7, #216]	; 0xd8
 330:	mov	r1, #0
 334:	mov	r2, #232	; 0xe8
 338:	mov	r0, r8
 33c:	bl	0 <memset>
 340:	str	r7, [r8, #212]	; 0xd4
 344:	ldr	r5, [r7, #196]	; 0xc4
 348:	cmp	r5, #0
 34c:	beq	380 <__flatcc_fb_init_output_c+0xb0>
 350:	ldr	r0, [r7, #196]	; 0xc4
 354:	bl	0 <strlen>
 358:	mov	r4, r0
 35c:	cmp	r4, #100	; 0x64
 360:	bls	390 <__flatcc_fb_init_output_c+0xc0>
 364:	ldr	r0, [pc, #348]	; 4c8 <__flatcc_fb_init_output_c+0x1f8>
 368:	ldr	r0, [r0]
 36c:	ldr	r1, [pc, #336]	; 4c4 <__flatcc_fb_init_output_c+0x1f4>
 370:	mov	r2, #100	; 0x64
 374:	bl	0 <fprintf>
 378:	mvn	r0, #0
 37c:	b	490 <__flatcc_fb_init_output_c+0x1c0>
 380:	ldr	r5, [pc, #308]	; 4bc <__flatcc_fb_init_output_c+0x1ec>
 384:	mov	r0, r5
 388:	bl	0 <strlen>
 38c:	mov	r4, r0
 390:	mov	r2, #100	; 0x64
 394:	mov	r1, r5
 398:	mov	r0, r8
 39c:	bl	0 <strncpy>
 3a0:	mov	r1, #0
 3a4:	strb	r1, [r8, #100]	; 0x64
 3a8:	cmp	r4, #0
 3ac:	beq	3c4 <__flatcc_fb_init_output_c+0xf4>
 3b0:	mov	r2, #95	; 0x5f
 3b4:	strb	r2, [r8, r4]
 3b8:	add	r3, r8, r4
 3bc:	mov	r0, #0
 3c0:	strb	r0, [r3, #1]
 3c4:	add	r0, r8, #102	; 0x66
 3c8:	mov	r1, r8
 3cc:	bl	44 <pstrcpyupper>
 3d0:	add	r0, r8, r4
 3d4:	mov	ip, #0
 3d8:	strb	ip, [r0, #102]	; 0x66
 3dc:	ldr	r2, [r7, #176]	; 0xb0
 3e0:	str	r2, [r8, #224]	; 0xe0
 3e4:	ldr	r1, [r7, #108]	; 0x6c
 3e8:	cmp	r1, #0
 3ec:	beq	404 <__flatcc_fb_init_output_c+0x134>
 3f0:	ldr	r0, [pc, #212]	; 4cc <__flatcc_fb_init_output_c+0x1fc>
 3f4:	ldr	ip, [r0]
 3f8:	str	ip, [r8, #204]	; 0xcc
 3fc:	mov	r0, #0
 400:	b	490 <__flatcc_fb_init_output_c+0x1c0>
 404:	ldr	r1, [r8, #212]	; 0xd4
 408:	ldr	r1, [r1, #124]	; 0x7c
 40c:	cmp	r1, #0
 410:	bne	41c <__flatcc_fb_init_output_c+0x14c>
 414:	mov	r0, #0
 418:	b	490 <__flatcc_fb_init_output_c+0x1c0>
 41c:	ldr	r1, [r8, #212]	; 0xd4
 420:	ldr	r1, [r1, #124]	; 0x7c
 424:	ldr	r2, [pc, #148]	; 4c0 <__flatcc_fb_init_output_c+0x1f0>
 428:	mov	r3, #1
 42c:	mov	r0, r9
 430:	bl	0 <__flatcc_fb_create_join_path>
 434:	mov	r4, r0
 438:	mov	r0, r4
 43c:	bl	0 <checkmem>
 440:	mov	r1, r6
 444:	mov	r0, r4
 448:	bl	0 <fopen>
 44c:	str	r0, [r8, #204]	; 0xcc
 450:	ldr	ip, [r8, #204]	; 0xcc
 454:	cmp	ip, #0
 458:	bne	478 <__flatcc_fb_init_output_c+0x1a8>
 45c:	ldr	r0, [pc, #100]	; 4c8 <__flatcc_fb_init_output_c+0x1f8>
 460:	ldr	r0, [r0]
 464:	ldr	r1, [pc, #72]	; 4b4 <__flatcc_fb_init_output_c+0x1e4>
 468:	mov	r2, r4
 46c:	bl	0 <fprintf>
 470:	mvn	r5, #0
 474:	b	47c <__flatcc_fb_init_output_c+0x1ac>
 478:	mov	r5, #0
 47c:	cmp	r4, #0
 480:	beq	48c <__flatcc_fb_init_output_c+0x1bc>
 484:	mov	r0, r4
 488:	bl	0 <free>
 48c:	mov	r0, r5
 490:	ldr	r4, [sp, #8]
 494:	ldr	r5, [sp, #12]
 498:	ldr	r6, [sp, #16]
 49c:	ldr	r7, [sp, #20]
 4a0:	ldr	r8, [sp, #24]
 4a4:	ldr	r9, [sp, #28]
 4a8:	ldr	lr, [sp, #4]
 4ac:	add	sp, sp, #32
 4b0:	bx	lr
 4b4:	.word	0x000000ff
 4b8:	.word	0x00000040
 4bc:	.word	0x0000012c
 4c0:	.word	0x00000159
 4c4:	.word	0x00000043
	...
 4d0:	.word	0x0000007a

000004d4 <_str_set_destructor>:
 4d4:	mov	ip, sp
 4d8:	sub	sp, sp, #8
 4dc:	str	ip, [sp]
 4e0:	str	lr, [sp, #4]
 4e4:	mov	r0, r1
 4e8:	bl	0 <free>
 4ec:	ldr	lr, [sp, #4]
 4f0:	add	sp, sp, #8
 4f4:	bx	lr

000004f8 <__flatcc_fb_gen_c_includes>:
 4f8:	mov	ip, sp
 4fc:	sub	sp, sp, #64	; 0x40
 500:	str	ip, [sp, #8]
 504:	str	lr, [sp, #12]
 508:	str	r4, [sp, #16]
 50c:	str	r5, [sp, #20]
 510:	str	r6, [sp, #24]
 514:	str	r7, [sp, #28]
 518:	str	r8, [sp, #32]
 51c:	str	r9, [sp, #36]	; 0x24
 520:	str	sl, [sp, #40]	; 0x28
 524:	mov	r5, r2
 528:	mov	r6, r1
 52c:	mov	r7, r0
 530:	ldr	ip, [r7, #208]	; 0xd0
 534:	ldr	r8, [ip]
 538:	add	r0, sp, #48	; 0x30
 53c:	mov	r1, #0
 540:	mov	r2, #16
 544:	bl	0 <memset>
 548:	ldr	r0, [r7, #208]	; 0xd0
 54c:	ldr	r0, [r0, #164]	; 0xa4
 550:	bl	0 <__flatcc_fb_copy_path>
 554:	add	r1, sp, #48	; 0x30
 558:	mov	r2, #1
 55c:	mov	r3, r0
 560:	mov	r0, r1
 564:	mov	r1, r3
 568:	bl	0 <str_set_insert_item>
 56c:	cmp	r8, #0
 570:	beq	624 <__flatcc_fb_gen_c_includes+0x12c>
 574:	ldr	r0, [r8, #8]
 578:	ldr	r1, [r8, #12]
 57c:	ldr	r2, [r7, #212]	; 0xd4
 580:	ldr	r2, [r2, #96]	; 0x60
 584:	bl	0 <__flatcc_fb_create_basename>
 588:	mov	r4, r0
 58c:	mov	r0, r4
 590:	bl	0 <checkmem>
 594:	ldr	r8, [r8]
 598:	mov	r0, r4
 59c:	bl	0 <__flatcc_fb_copy_path>
 5a0:	mov	r9, r0
 5a4:	bl	0 <checkmem>
 5a8:	mov	sl, r9
 5ac:	ldrb	ip, [sl]
 5b0:	cmp	ip, #0
 5b4:	beq	5d0 <__flatcc_fb_gen_c_includes+0xd8>
 5b8:	ldrb	r0, [sl]
 5bc:	bl	0 <toupper>
 5c0:	and	r2, r0, #255	; 0xff
 5c4:	strb	r2, [sl]
 5c8:	add	sl, sl, #1
 5cc:	b	5ac <__flatcc_fb_gen_c_includes+0xb4>
 5d0:	add	r0, sp, #48	; 0x30
 5d4:	mov	r2, #1
 5d8:	mov	r1, r9
 5dc:	bl	0 <str_set_insert_item>
 5e0:	cmp	r0, #0
 5e4:	beq	5fc <__flatcc_fb_gen_c_includes+0x104>
 5e8:	mov	r0, r9
 5ec:	bl	0 <free>
 5f0:	mov	r0, r4
 5f4:	bl	0 <free>
 5f8:	b	56c <__flatcc_fb_gen_c_includes+0x74>
 5fc:	ldr	r0, [r7, #204]	; 0xcc
 600:	ldr	r1, [pc, #84]	; 65c <__flatcc_fb_gen_c_includes+0x164>
 604:	str	r6, [sp, #4]
 608:	str	r4, [sp]
 60c:	mov	r3, r5
 610:	mov	r2, r9
 614:	bl	0 <fprintf>
 618:	mov	r0, r4
 61c:	bl	0 <free>
 620:	b	56c <__flatcc_fb_gen_c_includes+0x74>
 624:	add	r0, sp, #48	; 0x30
 628:	ldr	r1, [pc, #48]	; 660 <__flatcc_fb_gen_c_includes+0x168>
 62c:	mov	r2, #0
 630:	bl	0 <str_set_destroy>
 634:	ldr	r4, [sp, #16]
 638:	ldr	r5, [sp, #20]
 63c:	ldr	r6, [sp, #24]
 640:	ldr	r7, [sp, #28]
 644:	ldr	r8, [sp, #32]
 648:	ldr	r9, [sp, #36]	; 0x24
 64c:	ldr	sl, [sp, #40]	; 0x28
 650:	ldr	lr, [sp, #12]
 654:	add	sp, sp, #64	; 0x40
 658:	bx	lr
 65c:	.word	0x00000098
 660:	.word	0x00000000

00000664 <__flatcc_fb_copy_scope>:
 664:	mov	ip, sp
 668:	sub	sp, sp, #24
 66c:	str	ip, [sp]
 670:	str	lr, [sp, #4]
 674:	str	r4, [sp, #8]
 678:	str	r5, [sp, #12]
 67c:	str	r6, [sp, #16]
 680:	str	r7, [sp, #20]
 684:	mov	r6, r1
 688:	mov	r4, r0
 68c:	ldr	r1, [r4, #24]
 690:	ldr	ip, [r4]
 694:	cmp	ip, #0
 698:	beq	6b4 <__flatcc_fb_copy_scope+0x50>
 69c:	ldr	r3, [ip, #4]
 6a0:	ldr	r2, [r3, #4]
 6a4:	add	r0, r1, r2
 6a8:	add	r1, r0, #1
 6ac:	ldr	ip, [ip]
 6b0:	b	694 <__flatcc_fb_copy_scope+0x30>
 6b4:	cmp	r1, #101	; 0x65
 6b8:	bls	6cc <__flatcc_fb_copy_scope+0x68>
 6bc:	mov	ip, #0
 6c0:	strb	ip, [r6]
 6c4:	mvn	r0, #0
 6c8:	b	734 <__flatcc_fb_copy_scope+0xd0>
 6cc:	ldr	r5, [r4, #24]
 6d0:	ldr	r1, [r4, #20]
 6d4:	mov	r2, r5
 6d8:	mov	r0, r6
 6dc:	bl	0 <memcpy>
 6e0:	ldr	r7, [r4]
 6e4:	cmp	r7, #0
 6e8:	beq	728 <__flatcc_fb_copy_scope+0xc4>
 6ec:	ldr	r3, [r7, #4]
 6f0:	ldr	r4, [r3, #4]
 6f4:	add	r0, r6, r5
 6f8:	ldr	r2, [r7, #4]
 6fc:	ldr	r1, [r2]
 700:	mov	r2, r4
 704:	bl	0 <memcpy>
 708:	add	r1, r5, r4
 70c:	add	r5, r1, #1
 710:	add	r1, r6, r5
 714:	mov	r0, #95	; 0x5f
 718:	sub	lr, r1, #4096	; 0x1000
 71c:	strb	r0, [lr, #4095]	; 0xfff
 720:	ldr	r7, [r7]
 724:	b	6e4 <__flatcc_fb_copy_scope+0x80>
 728:	mov	r2, #0
 72c:	strb	r2, [r6, r5]
 730:	mov	r0, r5
 734:	ldr	r4, [sp, #8]
 738:	ldr	r5, [sp, #12]
 73c:	ldr	r6, [sp, #16]
 740:	ldr	r7, [sp, #20]
 744:	ldr	lr, [sp, #4]
 748:	add	sp, sp, #24
 74c:	bx	lr

00000750 <__flatcc_fb_scoped_symbol_name>:
 750:	mov	ip, sp
 754:	sub	sp, sp, #16
 758:	str	ip, [sp]
 75c:	str	lr, [sp, #4]
 760:	str	r4, [sp, #8]
 764:	str	r5, [sp, #12]
 768:	mov	r5, r2
 76c:	ldr	r4, [r1, #4]
 770:	ldr	ip, [r5, #204]	; 0xcc
 774:	cmp	ip, r0
 778:	beq	7a8 <__flatcc_fb_scoped_symbol_name+0x58>
 77c:	mov	r1, r5
 780:	bl	664 <__flatcc_fb_copy_scope>
 784:	str	r0, [r5, #208]	; 0xd0
 788:	cmp	r0, #0
 78c:	bge	7a8 <__flatcc_fb_scoped_symbol_name+0x58>
 790:	mov	r3, #0
 794:	str	r3, [r5, #208]	; 0xd0
 798:	ldr	ip, [pc, #160]	; 840 <__flatcc_fb_scoped_symbol_name+0xf0>
 79c:	ldr	r0, [ip]
 7a0:	ldr	r1, [pc, #144]	; 838 <__flatcc_fb_scoped_symbol_name+0xe8>
 7a4:	bl	0 <fprintf>
 7a8:	ldr	r2, [r4, #4]
 7ac:	str	r2, [r5, #212]	; 0xd4
 7b0:	ldr	r3, [r5, #208]	; 0xd0
 7b4:	ldr	ip, [r5, #212]	; 0xd4
 7b8:	add	r0, r3, ip
 7bc:	str	r0, [r5, #216]	; 0xd8
 7c0:	ldr	r1, [r5, #216]	; 0xd8
 7c4:	cmp	r1, #203	; 0xcb
 7c8:	ble	804 <__flatcc_fb_scoped_symbol_name+0xb4>
 7cc:	ldr	r2, [pc, #108]	; 840 <__flatcc_fb_scoped_symbol_name+0xf0>
 7d0:	ldr	r0, [r2]
 7d4:	ldr	r1, [pc, #96]	; 83c <__flatcc_fb_scoped_symbol_name+0xec>
 7d8:	ldr	r2, [r5, #212]	; 0xd4
 7dc:	ldr	r3, [r4]
 7e0:	bl	0 <fprintf>
 7e4:	ldr	r0, [r5, #208]	; 0xd0
 7e8:	rsb	r1, r0, #204	; 0xcc
 7ec:	sub	r3, r1, #1
 7f0:	str	r3, [r5, #212]	; 0xd4
 7f4:	ldr	r1, [r5, #208]	; 0xd0
 7f8:	ldr	r2, [r5, #212]	; 0xd4
 7fc:	add	r1, r1, r2
 800:	str	r1, [r5, #216]	; 0xd8
 804:	ldr	r2, [r5, #208]	; 0xd0
 808:	add	r0, r5, r2
 80c:	ldr	r1, [r4]
 810:	ldr	r2, [r5, #212]	; 0xd4
 814:	bl	0 <memcpy>
 818:	ldr	r3, [r5, #216]	; 0xd8
 81c:	mov	r0, #0
 820:	strb	r0, [r5, r3]
 824:	ldr	r4, [sp, #8]
 828:	ldr	r5, [sp, #12]
 82c:	ldr	lr, [sp, #4]
 830:	add	sp, sp, #16
 834:	bx	lr
 838:	.word	0x00000000
 83c:	.word	0x000000cf
 840:	.word	0x00000000

00000844 <__flatcc_fb_codegen_common_c>:
 844:	mov	ip, sp
 848:	sub	sp, sp, #24
 84c:	str	ip, [sp]
 850:	str	lr, [sp, #4]
 854:	str	r4, [sp, #8]
 858:	str	r5, [sp, #12]
 85c:	str	r6, [sp, #16]
 860:	mov	r5, r0
 864:	mov	r0, r5
 868:	bl	0 <strlen>
 86c:	sub	r6, r0, #1
 870:	mov	r4, #0
 874:	ldr	r0, [r5, #212]	; 0xd4
 878:	ldr	ip, [r0, #144]	; 0x90
 87c:	cmp	ip, #0
 880:	beq	8bc <__flatcc_fb_codegen_common_c+0x78>
 884:	ldr	r3, [pc, #176]	; 93c <__flatcc_fb_codegen_common_c+0xf8>
 888:	mov	r2, r6
 88c:	mov	r1, r5
 890:	mov	r0, r5
 894:	bl	c8 <__flatcc_fb_open_output_file>
 898:	cmp	r0, #0
 89c:	beq	8a8 <__flatcc_fb_codegen_common_c+0x64>
 8a0:	mvn	r0, #0
 8a4:	b	920 <__flatcc_fb_codegen_common_c+0xdc>
 8a8:	mov	r0, r5
 8ac:	bl	0 <__flatcc_fb_gen_common_c_header>
 8b0:	mov	r4, r0
 8b4:	mov	r0, r5
 8b8:	bl	1d4 <__flatcc_fb_close_output_file>
 8bc:	cmp	r4, #0
 8c0:	bne	8dc <__flatcc_fb_codegen_common_c+0x98>
 8c4:	ldr	r2, [r5, #212]	; 0xd4
 8c8:	ldr	r1, [r2, #148]	; 0x94
 8cc:	cmp	r1, #0
 8d0:	movne	r0, #1
 8d4:	moveq	r0, #0
 8d8:	b	8e0 <__flatcc_fb_codegen_common_c+0x9c>
 8dc:	mov	r0, #0
 8e0:	cmp	r0, #0
 8e4:	beq	91c <__flatcc_fb_codegen_common_c+0xd8>
 8e8:	ldr	r3, [pc, #72]	; 938 <__flatcc_fb_codegen_common_c+0xf4>
 8ec:	mov	r2, r6
 8f0:	mov	r1, r5
 8f4:	mov	r0, r5
 8f8:	bl	c8 <__flatcc_fb_open_output_file>
 8fc:	cmp	r0, #0
 900:	beq	90c <__flatcc_fb_codegen_common_c+0xc8>
 904:	mvn	r0, #0
 908:	b	920 <__flatcc_fb_codegen_common_c+0xdc>
 90c:	mov	r0, r5
 910:	bl	0 <__flatcc_fb_gen_common_c_builder_header>
 914:	mov	r0, r5
 918:	bl	1d4 <__flatcc_fb_close_output_file>
 91c:	mov	r0, r4
 920:	ldr	r4, [sp, #8]
 924:	ldr	r5, [sp, #12]
 928:	ldr	r6, [sp, #16]
 92c:	ldr	lr, [sp, #4]
 930:	add	sp, sp, #24
 934:	bx	lr
 938:	.word	0x000000bd
 93c:	.word	0x00000148

00000940 <__flatcc_fb_codegen_c>:
 940:	mov	ip, sp
 944:	sub	sp, sp, #24
 948:	str	ip, [sp]
 94c:	str	lr, [sp, #4]
 950:	str	r4, [sp, #8]
 954:	str	r5, [sp, #12]
 958:	str	r6, [sp, #16]
 95c:	mov	r5, r0
 960:	mov	r4, #0
 964:	str	r1, [r5, #208]	; 0xd0
 968:	ldr	r0, [r1, #60]	; 0x3c
 96c:	mov	r1, #0
 970:	mov	r2, #0
 974:	bl	0 <fb_scope_table_find>
 978:	str	r0, [r5, #216]	; 0xd8
 97c:	ldr	ip, [r5, #208]	; 0xd0
 980:	ldr	r0, [ip, #160]	; 0xa0
 984:	bl	0 <strlen>
 988:	mov	r6, r0
 98c:	ldr	r0, [r5, #212]	; 0xd4
 990:	ldr	r1, [r0, #152]	; 0x98
 994:	cmp	r1, #0
 998:	beq	9e0 <__flatcc_fb_codegen_c+0xa0>
 99c:	ldr	r3, [r5, #208]	; 0xd0
 9a0:	ldr	r1, [r3, #160]	; 0xa0
 9a4:	ldr	r3, [pc, #432]	; b5c <__flatcc_fb_codegen_c+0x21c>
 9a8:	mov	r2, r6
 9ac:	mov	r0, r5
 9b0:	bl	c8 <__flatcc_fb_open_output_file>
 9b4:	cmp	r0, #0
 9b8:	beq	9c4 <__flatcc_fb_codegen_c+0x84>
 9bc:	mvn	r4, #0
 9c0:	b	b30 <__flatcc_fb_codegen_c+0x1f0>
 9c4:	mov	r0, r5
 9c8:	bl	0 <__flatcc_fb_gen_c_reader>
 9cc:	mov	r4, r0
 9d0:	cmp	r4, #0
 9d4:	bne	b30 <__flatcc_fb_codegen_c+0x1f0>
 9d8:	mov	r0, r5
 9dc:	bl	1d4 <__flatcc_fb_close_output_file>
 9e0:	ldr	ip, [r5, #212]	; 0xd4
 9e4:	ldr	r2, [ip, #156]	; 0x9c
 9e8:	cmp	r2, #0
 9ec:	beq	a34 <__flatcc_fb_codegen_c+0xf4>
 9f0:	ldr	ip, [r5, #208]	; 0xd0
 9f4:	ldr	r1, [ip, #160]	; 0xa0
 9f8:	ldr	r3, [pc, #332]	; b4c <__flatcc_fb_codegen_c+0x20c>
 9fc:	mov	r2, r6
 a00:	mov	r0, r5
 a04:	bl	c8 <__flatcc_fb_open_output_file>
 a08:	cmp	r0, #0
 a0c:	beq	a18 <__flatcc_fb_codegen_c+0xd8>
 a10:	mvn	r4, #0
 a14:	b	b30 <__flatcc_fb_codegen_c+0x1f0>
 a18:	mov	r0, r5
 a1c:	bl	0 <__flatcc_fb_gen_c_builder>
 a20:	mov	r4, r0
 a24:	cmp	r0, #0
 a28:	bne	b30 <__flatcc_fb_codegen_c+0x1f0>
 a2c:	mov	r0, r5
 a30:	bl	1d4 <__flatcc_fb_close_output_file>
 a34:	ldr	r2, [r5, #212]	; 0xd4
 a38:	ldr	r3, [r2, #160]	; 0xa0
 a3c:	cmp	r3, #0
 a40:	beq	a88 <__flatcc_fb_codegen_c+0x148>
 a44:	ldr	r2, [r5, #208]	; 0xd0
 a48:	ldr	r1, [r2, #160]	; 0xa0
 a4c:	ldr	r3, [pc, #256]	; b54 <__flatcc_fb_codegen_c+0x214>
 a50:	mov	r2, r6
 a54:	mov	r0, r5
 a58:	bl	c8 <__flatcc_fb_open_output_file>
 a5c:	cmp	r0, #0
 a60:	beq	a6c <__flatcc_fb_codegen_c+0x12c>
 a64:	mvn	r4, #0
 a68:	b	b30 <__flatcc_fb_codegen_c+0x1f0>
 a6c:	mov	r0, r5
 a70:	bl	0 <__flatcc_fb_gen_c_verifier>
 a74:	mov	r4, r0
 a78:	cmp	r4, #0
 a7c:	bne	b30 <__flatcc_fb_codegen_c+0x1f0>
 a80:	mov	r0, r5
 a84:	bl	1d4 <__flatcc_fb_close_output_file>
 a88:	ldr	ip, [r5, #212]	; 0xd4
 a8c:	ldr	r3, [ip, #164]	; 0xa4
 a90:	cmp	r3, #0
 a94:	beq	adc <__flatcc_fb_codegen_c+0x19c>
 a98:	ldr	r0, [r5, #208]	; 0xd0
 a9c:	ldr	r1, [r0, #160]	; 0xa0
 aa0:	ldr	r3, [pc, #176]	; b58 <__flatcc_fb_codegen_c+0x218>
 aa4:	mov	r2, r6
 aa8:	mov	r0, r5
 aac:	bl	c8 <__flatcc_fb_open_output_file>
 ab0:	cmp	r0, #0
 ab4:	beq	ac0 <__flatcc_fb_codegen_c+0x180>
 ab8:	mvn	r4, #0
 abc:	b	b30 <__flatcc_fb_codegen_c+0x1f0>
 ac0:	mov	r0, r5
 ac4:	bl	0 <__flatcc_fb_gen_c_json_parser>
 ac8:	mov	r4, r0
 acc:	cmp	r0, #0
 ad0:	bne	b30 <__flatcc_fb_codegen_c+0x1f0>
 ad4:	mov	r0, r5
 ad8:	bl	1d4 <__flatcc_fb_close_output_file>
 adc:	ldr	r3, [r5, #212]	; 0xd4
 ae0:	ldr	r2, [r3, #168]	; 0xa8
 ae4:	cmp	r2, #0
 ae8:	beq	b30 <__flatcc_fb_codegen_c+0x1f0>
 aec:	ldr	r1, [r5, #208]	; 0xd0
 af0:	ldr	r1, [r1, #160]	; 0xa0
 af4:	ldr	r3, [pc, #84]	; b50 <__flatcc_fb_codegen_c+0x210>
 af8:	mov	r2, r6
 afc:	mov	r0, r5
 b00:	bl	c8 <__flatcc_fb_open_output_file>
 b04:	cmp	r0, #0
 b08:	beq	b14 <__flatcc_fb_codegen_c+0x1d4>
 b0c:	mvn	r4, #0
 b10:	b	b30 <__flatcc_fb_codegen_c+0x1f0>
 b14:	mov	r0, r5
 b18:	bl	0 <__flatcc_fb_gen_c_json_printer>
 b1c:	mov	r4, r0
 b20:	cmp	r4, #0
 b24:	bne	b30 <__flatcc_fb_codegen_c+0x1f0>
 b28:	mov	r0, r5
 b2c:	bl	1d4 <__flatcc_fb_close_output_file>
 b30:	mov	r0, r4
 b34:	ldr	r4, [sp, #8]
 b38:	ldr	r5, [sp, #12]
 b3c:	ldr	r6, [sp, #16]
 b40:	ldr	lr, [sp, #4]
 b44:	add	sp, sp, #24
 b48:	bx	lr
 b4c:	.word	0x00000121
 b50:	.word	0x00000138
 b54:	.word	0x0000007d
 b58:	.word	0x00000089
 b5c:	.word	0x000000f5
