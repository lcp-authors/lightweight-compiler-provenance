
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-detect.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_detection_tree>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #8
   c:	str	r0, [sp, #4]
  10:	ldr	r0, [sp, #4]
  14:	bl	0 <coda_data_dictionary_get_detection_tree>
  18:	movw	r1, #0
  1c:	bl	28 <generate_detection_tree_sub>
  20:	mov	sp, fp
  24:	pop	{fp, pc}

00000028 <generate_detection_tree_sub>:
  28:	push	{fp, lr}
  2c:	mov	fp, sp
  30:	sub	sp, sp, #16
  34:	str	r0, [fp, #-4]
  38:	str	r1, [sp, #8]
  3c:	ldr	r0, [fp, #-4]
  40:	movw	r1, #0
  44:	cmp	r0, r1
  48:	bne	50 <generate_detection_tree_sub+0x28>
  4c:	b	1e8 <generate_detection_tree_sub+0x1c0>
  50:	ldr	r0, [fp, #-4]
  54:	ldr	r0, [r0]
  58:	movw	r1, #0
  5c:	cmp	r0, r1
  60:	bne	78 <generate_detection_tree_sub+0x50>
  64:	ldr	r0, [fp, #-4]
  68:	ldr	r0, [r0, #4]
  6c:	movw	r1, #0
  70:	cmp	r0, r1
  74:	beq	16c <generate_detection_tree_sub+0x144>
  78:	ldr	r0, [fp, #-4]
  7c:	ldr	r0, [r0]
  80:	movw	r1, #0
  84:	cmp	r0, r1
  88:	beq	a8 <generate_detection_tree_sub+0x80>
  8c:	bl	1f0 <indent>
  90:	ldr	r0, [fp, #-4]
  94:	ldr	r1, [r0]
  98:	movw	r0, #0
  9c:	movt	r0, #0
  a0:	bl	0 <printf>
  a4:	b	cc <generate_detection_tree_sub+0xa4>
  a8:	ldr	r0, [sp, #8]
  ac:	add	r0, r0, #1
  b0:	str	r0, [sp, #8]
  b4:	bl	1f0 <indent>
  b8:	ldr	r0, [fp, #-4]
  bc:	ldr	r0, [r0, #4]
  c0:	movw	r1, #0
  c4:	movt	r1, #0
  c8:	bl	0 <coda_expression_print>
  cc:	ldr	r0, [fp, #-4]
  d0:	ldr	r0, [r0, #8]
  d4:	movw	r1, #0
  d8:	cmp	r0, r1
  dc:	beq	160 <generate_detection_tree_sub+0x138>
  e0:	ldr	r0, [fp, #-4]
  e4:	ldr	r0, [r0, #8]
  e8:	ldr	r0, [r0, #8]
  ec:	str	r0, [sp]
  f0:	ldr	r0, [sp]
  f4:	ldr	r0, [r0, #44]	; 0x2c
  f8:	ldr	r0, [r0, #20]
  fc:	ldr	r1, [r0]
 100:	ldr	r0, [sp]
 104:	ldr	r0, [r0, #44]	; 0x2c
 108:	ldr	r2, [r0]
 10c:	ldr	r0, [sp]
 110:	ldr	r3, [r0, #4]
 114:	movw	r0, #0
 118:	movt	r0, #0
 11c:	bl	0 <printf>
 120:	ldr	r1, [fp, #-4]
 124:	ldr	r1, [r1, #12]
 128:	cmp	r1, #0
 12c:	ble	14c <generate_detection_tree_sub+0x124>
 130:	ldr	r1, [sp, #8]
 134:	ldr	r0, [fp, #-4]
 138:	ldr	r2, [r0, #12]
 13c:	movw	r0, #0
 140:	movt	r0, #0
 144:	bl	0 <printf>
 148:	b	15c <generate_detection_tree_sub+0x134>
 14c:	ldr	r1, [sp, #8]
 150:	movw	r0, #0
 154:	movt	r0, #0
 158:	bl	0 <printf>
 15c:	b	160 <generate_detection_tree_sub+0x138>
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	bl	0 <printf>
 16c:	movw	r0, #0
 170:	str	r0, [sp, #4]
 174:	ldr	r0, [sp, #4]
 178:	ldr	r1, [fp, #-4]
 17c:	ldr	r1, [r1, #12]
 180:	cmp	r0, r1
 184:	bge	1e8 <generate_detection_tree_sub+0x1c0>
 188:	movw	r0, #0
 18c:	movt	r0, #0
 190:	ldr	r1, [r0]
 194:	add	r1, r1, #1
 198:	str	r1, [r0]
 19c:	ldr	r0, [fp, #-4]
 1a0:	ldr	r0, [r0, #16]
 1a4:	ldr	r1, [sp, #4]
 1a8:	add	r0, r0, r1, lsl #2
 1ac:	ldr	r0, [r0]
 1b0:	ldr	r1, [sp, #8]
 1b4:	ldr	r2, [sp, #4]
 1b8:	add	r1, r1, r2
 1bc:	bl	28 <generate_detection_tree_sub>
 1c0:	movw	r0, #0
 1c4:	movt	r0, #0
 1c8:	ldr	r1, [r0]
 1cc:	mvn	r2, #0
 1d0:	add	r1, r1, r2
 1d4:	str	r1, [r0]
 1d8:	ldr	r0, [sp, #4]
 1dc:	add	r0, r0, #1
 1e0:	str	r0, [sp, #4]
 1e4:	b	174 <generate_detection_tree_sub+0x14c>
 1e8:	mov	sp, fp
 1ec:	pop	{fp, pc}

000001f0 <indent>:
 1f0:	push	{fp, lr}
 1f4:	mov	fp, sp
 1f8:	sub	sp, sp, #8
 1fc:	movw	r0, #0
 200:	movt	r0, #0
 204:	ldr	r0, [r0]
 208:	cmp	r0, #0
 20c:	blt	214 <indent+0x24>
 210:	b	234 <indent+0x44>
 214:	movw	r0, #0
 218:	movt	r0, #0
 21c:	movw	r1, #0
 220:	movt	r1, #0
 224:	movw	r2, #52	; 0x34
 228:	movw	r3, #0
 22c:	movt	r3, #0
 230:	bl	0 <__assert_fail>
 234:	movw	r0, #0
 238:	movt	r0, #0
 23c:	ldr	r0, [r0]
 240:	str	r0, [sp, #4]
 244:	ldr	r0, [sp, #4]
 248:	cmp	r0, #0
 24c:	beq	270 <indent+0x80>
 250:	movw	r0, #0
 254:	movt	r0, #0
 258:	bl	0 <printf>
 25c:	ldr	r0, [sp, #4]
 260:	mvn	r1, #0
 264:	add	r0, r0, r1
 268:	str	r0, [sp, #4]
 26c:	b	244 <indent+0x54>
 270:	mov	sp, fp
 274:	pop	{fp, pc}
