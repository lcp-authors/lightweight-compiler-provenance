
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-time.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <parse_integer>:
       0:	cmp	r2, #0
       4:	beq	a4 <parse_integer+0xa4>
       8:	cmp	r1, #1
       c:	ble	a4 <parse_integer+0xa4>
      10:	ldrb	r2, [r0]
      14:	cmp	r2, #32
      18:	bne	44 <parse_integer+0x44>
      1c:	add	r2, r0, #1
      20:	b	34 <parse_integer+0x34>
      24:	ldrb	ip, [r2]
      28:	add	r2, r2, #1
      2c:	cmp	ip, #32
      30:	bne	44 <parse_integer+0x44>
      34:	sub	r1, r1, #1
      38:	cmp	r1, #1
      3c:	mov	r0, r2
      40:	bne	24 <parse_integer+0x24>
      44:	mov	r2, #0
      48:	str	r2, [r3]
      4c:	ldrb	ip, [r0]
      50:	sub	ip, ip, #48	; 0x30
      54:	uxtb	r2, ip
      58:	cmp	r2, #9
      5c:	bhi	c4 <parse_integer+0xc4>
      60:	add	r1, r0, r1
      64:	push	{lr}		; (str lr, [sp, #-4]!)
      68:	add	r0, r0, #1
      6c:	mov	r2, #0
      70:	b	88 <parse_integer+0x88>
      74:	ldrb	ip, [r0], #1
      78:	sub	ip, ip, #48	; 0x30
      7c:	uxtb	lr, ip
      80:	cmp	lr, #9
      84:	bhi	bc <parse_integer+0xbc>
      88:	add	r2, r2, r2, lsl #2
      8c:	cmp	r1, r0
      90:	add	r2, ip, r2, lsl #1
      94:	str	r2, [r3]
      98:	bne	74 <parse_integer+0x74>
      9c:	mov	r0, #0
      a0:	pop	{pc}		; (ldr pc, [sp], #4)
      a4:	mov	r2, #0
      a8:	cmp	r1, #0
      ac:	str	r2, [r3]
      b0:	bgt	4c <parse_integer+0x4c>
      b4:	mov	r0, #0
      b8:	bx	lr
      bc:	mvn	r0, #0
      c0:	pop	{pc}		; (ldr pc, [sp], #4)
      c4:	mvn	r0, #0
      c8:	bx	lr

000000cc <dmy_to_mjd2000_julian>:
      cc:	push	{r4, r5, r6, r7, r8, r9, lr}
      d0:	mov	r6, r1
      d4:	ldr	lr, [pc, #308]	; 210 <dmy_to_mjd2000_julian+0x144>
      d8:	mov	r9, r2
      dc:	mov	r7, r0
      e0:	mov	r4, r3
      e4:	ldm	lr!, {r0, r1, r2, r3}
      e8:	sub	sp, sp, #68	; 0x44
      ec:	add	ip, sp, #12
      f0:	clz	r5, r9
      f4:	stmia	ip!, {r0, r1, r2, r3}
      f8:	lsr	r5, r5, #5
      fc:	ldm	lr!, {r0, r1, r2, r3}
     100:	sub	r8, r6, #1
     104:	cmp	r8, #11
     108:	orrhi	r5, r5, #1
     10c:	cmp	r5, #0
     110:	stmia	ip!, {r0, r1, r2, r3}
     114:	ldm	lr!, {r0, r1, r2, r3}
     118:	ldr	lr, [lr]
     11c:	stmia	ip!, {r0, r1, r2, r3}
     120:	str	lr, [ip]
     124:	bne	1f0 <dmy_to_mjd2000_julian+0x124>
     128:	cmp	r7, #0
     12c:	ble	1f0 <dmy_to_mjd2000_julian+0x124>
     130:	add	r3, sp, #64	; 0x40
     134:	add	r8, r3, r8, lsl #2
     138:	add	r3, r3, r6, lsl #2
     13c:	ldr	r0, [r8, #-52]	; 0xffffffcc
     140:	ldr	r3, [r3, #-52]	; 0xffffffcc
     144:	cmp	r6, #2
     148:	sub	r3, r3, r0
     14c:	movne	r2, r5
     150:	beq	1dc <dmy_to_mjd2000_julian+0x110>
     154:	add	r3, r2, r3
     158:	cmp	r7, r3
     15c:	bgt	1f0 <dmy_to_mjd2000_julian+0x124>
     160:	add	r2, r9, r9, lsr #31
     164:	cmp	r2, #0
     168:	asr	r1, r2, #31
     16c:	add	r3, r2, #3
     170:	lsr	r1, r1, #30
     174:	movlt	ip, r3
     178:	add	r3, r2, r1
     17c:	and	r3, r3, #3
     180:	sub	r3, r3, r1
     184:	add	r1, r2, r2, lsl #3
     188:	movge	ip, r2
     18c:	add	r1, r2, r1, lsl #3
     190:	lsr	r3, r3, #31
     194:	add	r1, r1, r1, lsl #2
     198:	rsb	r3, r3, ip, asr #2
     19c:	add	r7, r1, r7
     1a0:	add	r3, r3, r7
     1a4:	cmp	r6, #2
     1a8:	add	r3, r3, r0
     1ac:	ble	1cc <dmy_to_mjd2000_julian+0x100>
     1b0:	ldr	r2, [pc, #92]	; 214 <dmy_to_mjd2000_julian+0x148>
     1b4:	sub	r3, r3, r5
     1b8:	mov	r0, #0
     1bc:	add	r2, r3, r2
     1c0:	str	r2, [r4]
     1c4:	add	sp, sp, #68	; 0x44
     1c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
     1cc:	tst	r2, #3
     1d0:	moveq	r5, #1
     1d4:	movne	r5, #0
     1d8:	b	1b0 <dmy_to_mjd2000_julian+0xe4>
     1dc:	add	r2, r9, r9, lsr #31
     1e0:	tst	r2, #3
     1e4:	moveq	r2, #1
     1e8:	movne	r2, #0
     1ec:	b	154 <dmy_to_mjd2000_julian+0x88>
     1f0:	mvn	r0, #103	; 0x67
     1f4:	mov	r3, r6
     1f8:	mov	r2, r7
     1fc:	str	r9, [sp]
     200:	ldr	r1, [pc, #16]	; 218 <dmy_to_mjd2000_julian+0x14c>
     204:	bl	0 <coda_set_error>
     208:	mvn	r0, #0
     20c:	b	1c4 <dmy_to_mjd2000_julian+0xf8>
     210:	.word	0x00000000
     214:	.word	0x001a42e2
     218:	.word	0x00000000

0000021c <dmy_to_mjd2000>:
     21c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     220:	sub	sp, sp, #92	; 0x5c
     224:	mov	r7, r3
     228:	add	r3, sp, #32
     22c:	mov	r6, r0
     230:	mov	r4, r1
     234:	mov	r5, r2
     238:	bl	cc <dmy_to_mjd2000_julian>
     23c:	cmp	r0, #0
     240:	bne	43c <dmy_to_mjd2000+0x220>
     244:	add	r3, sp, #28
     248:	ldr	r2, [pc, #580]	; 494 <dmy_to_mjd2000+0x278>
     24c:	mov	r1, #9
     250:	mov	r0, #2
     254:	bl	cc <dmy_to_mjd2000_julian>
     258:	subs	lr, r0, #0
     25c:	bne	43c <dmy_to_mjd2000+0x220>
     260:	ldr	r3, [sp, #32]
     264:	ldr	r8, [sp, #28]
     268:	cmp	r3, r8
     26c:	bgt	288 <dmy_to_mjd2000+0x6c>
     270:	ldr	r2, [pc, #544]	; 498 <dmy_to_mjd2000+0x27c>
     274:	mov	r0, lr
     278:	add	r2, r3, r2
     27c:	str	r2, [r7]
     280:	add	sp, sp, #92	; 0x5c
     284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     288:	ldr	sl, [pc, #524]	; 49c <dmy_to_mjd2000+0x280>
     28c:	add	r9, sp, #36	; 0x24
     290:	clz	ip, r5
     294:	ldm	sl!, {r0, r1, r2, r3}
     298:	lsr	ip, ip, #5
     29c:	sub	fp, r4, #1
     2a0:	cmp	fp, #11
     2a4:	orrhi	ip, ip, #1
     2a8:	stmia	r9!, {r0, r1, r2, r3}
     2ac:	cmp	ip, #0
     2b0:	ldm	sl!, {r0, r1, r2, r3}
     2b4:	str	ip, [sp, #12]
     2b8:	stmia	r9!, {r0, r1, r2, r3}
     2bc:	ldm	sl!, {r0, r1, r2, r3}
     2c0:	ldr	sl, [sl]
     2c4:	stmia	r9!, {r0, r1, r2, r3}
     2c8:	str	sl, [r9]
     2cc:	bne	424 <dmy_to_mjd2000+0x208>
     2d0:	cmp	r6, #0
     2d4:	ble	424 <dmy_to_mjd2000+0x208>
     2d8:	add	r3, sp, #88	; 0x58
     2dc:	add	r3, r3, fp, lsl #2
     2e0:	cmp	r4, #2
     2e4:	ldr	r9, [r3, #-52]	; 0xffffffcc
     2e8:	add	r3, sp, #88	; 0x58
     2ec:	add	r3, r3, r4, lsl #2
     2f0:	ldr	r3, [r3, #-52]	; 0xffffffcc
     2f4:	sub	r2, r3, r9
     2f8:	ldrne	r3, [sp, #12]
     2fc:	beq	44c <dmy_to_mjd2000+0x230>
     300:	add	r3, r3, r2
     304:	cmp	r6, r3
     308:	bgt	424 <dmy_to_mjd2000+0x208>
     30c:	ldr	r2, [pc, #396]	; 4a0 <dmy_to_mjd2000+0x284>
     310:	add	r3, r5, r5, lsr #31
     314:	mov	r1, #100	; 0x64
     318:	smull	r0, r2, r2, r3
     31c:	asr	r0, r3, #31
     320:	asr	sl, r2, #5
     324:	mov	fp, sl
     328:	str	fp, [sp, #16]
     32c:	sub	fp, fp, r0
     330:	lsr	sl, r0, #30
     334:	asr	r2, r2, #7
     338:	mul	fp, r1, fp
     33c:	add	r1, r3, sl
     340:	mov	ip, r2
     344:	and	r1, r1, #3
     348:	sub	r1, r1, sl
     34c:	str	ip, [sp, #20]
     350:	sub	sl, ip, r0
     354:	mov	ip, #400	; 0x190
     358:	add	r2, r3, r3, lsl #3
     35c:	mul	sl, ip, sl
     360:	cmp	r3, #0
     364:	add	r2, r3, r2, lsl #3
     368:	mov	ip, sl
     36c:	add	sl, r3, #3
     370:	movge	sl, r3
     374:	add	r2, r2, r2, lsl #2
     378:	add	r9, r6, r9
     37c:	lsr	r1, r1, #31
     380:	rsb	r1, r1, sl, asr #2
     384:	add	r9, r9, r2
     388:	ldr	r2, [sp, #16]
     38c:	add	r9, r1, r9
     390:	sub	fp, r3, fp
     394:	ldr	r1, [sp, #20]
     398:	sub	r2, r2, r0
     39c:	sub	sl, r3, ip
     3a0:	sub	r2, r2, fp, lsr #31
     3a4:	sub	r0, r1, r0
     3a8:	sub	r9, r9, r2
     3ac:	sub	r0, r0, sl, lsr #31
     3b0:	cmp	r4, #2
     3b4:	add	r0, r9, r0
     3b8:	ble	3f8 <dmy_to_mjd2000+0x1dc>
     3bc:	ldr	r1, [sp, #12]
     3c0:	ldr	r3, [pc, #220]	; 4a4 <dmy_to_mjd2000+0x288>
     3c4:	ldr	r2, [pc, #220]	; 4a8 <dmy_to_mjd2000+0x28c>
     3c8:	sub	ip, r0, r1
     3cc:	add	r3, ip, r3
     3d0:	add	r2, r8, r2
     3d4:	cmp	r2, r3
     3d8:	str	r3, [sp, #32]
     3dc:	bgt	424 <dmy_to_mjd2000+0x208>
     3e0:	ldr	r3, [pc, #196]	; 4ac <dmy_to_mjd2000+0x290>
     3e4:	mov	r0, lr
     3e8:	add	r3, ip, r3
     3ec:	str	r3, [r7]
     3f0:	add	sp, sp, #92	; 0x5c
     3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3f8:	tst	r3, #3
     3fc:	moveq	ip, #1
     400:	movne	ip, #0
     404:	cmp	fp, #0
     408:	subeq	ip, ip, #1
     40c:	cmp	sl, #0
     410:	addeq	ip, ip, #1
     414:	adds	r3, ip, #0
     418:	movne	r3, #1
     41c:	str	r3, [sp, #12]
     420:	b	3bc <dmy_to_mjd2000+0x1a0>
     424:	str	r5, [sp]
     428:	mov	r3, r4
     42c:	mov	r2, r6
     430:	ldr	r1, [pc, #120]	; 4b0 <dmy_to_mjd2000+0x294>
     434:	mvn	r0, #103	; 0x67
     438:	bl	0 <coda_set_error>
     43c:	mvn	lr, #0
     440:	mov	r0, lr
     444:	add	sp, sp, #92	; 0x5c
     448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     44c:	ldr	r0, [pc, #76]	; 4a0 <dmy_to_mjd2000+0x284>
     450:	add	r1, r5, r5, lsr #31
     454:	mov	fp, #100	; 0x64
     458:	smull	r3, r0, r0, r1
     45c:	asr	r3, r1, #31
     460:	rsb	sl, r3, r0, asr #5
     464:	rsb	r0, r3, r0, asr #7
     468:	mov	r3, #400	; 0x190
     46c:	mul	sl, fp, sl
     470:	tst	r1, #3
     474:	mul	r0, r3, r0
     478:	moveq	r3, #1
     47c:	movne	r3, #0
     480:	cmp	r1, sl
     484:	eoreq	r3, r3, #1
     488:	cmp	r1, r0
     48c:	eoreq	r3, r3, #1
     490:	b	300 <dmy_to_mjd2000+0xe4>
     494:	.word	0x000006d8
     498:	.word	0xffda97a7
     49c:	.word	0x00000000
     4a0:	.word	0x51eb851f
     4a4:	.word	0xfff72821
     4a8:	.word	0xffdce53e
     4ac:	.word	0xfff4da8b
     4b0:	.word	0x00000000

000004b4 <register_leap_second>:
     4b4:	push	{r4, r5, r6, r7, lr}
     4b8:	vpush	{d8}
     4bc:	ldr	r6, [pc, #244]	; 5b8 <register_leap_second+0x104>
     4c0:	bl	0 <__aeabi_read_tp>
     4c4:	vmov.f64	d8, d0
     4c8:	ldr	r4, [r6, r0]
     4cc:	sub	sp, sp, #12
     4d0:	tst	r4, #15
     4d4:	add	r5, r6, r0
     4d8:	beq	560 <register_leap_second+0xac>
     4dc:	ldr	r0, [r5, #4]
     4e0:	cmp	r4, #0
     4e4:	ble	538 <register_leap_second+0x84>
     4e8:	add	r3, r0, r4, lsl #3
     4ec:	vldr	d7, [r3, #-8]
     4f0:	vcmpe.f64	d8, d7
     4f4:	vmrs	APSR_nzcv, fpscr
     4f8:	bhi	538 <register_leap_second+0x84>
     4fc:	mov	r3, r0
     500:	mov	r2, #0
     504:	vldr	d7, [r3]
     508:	add	r2, r2, #1
     50c:	vcmpe.f64	d7, d8
     510:	vmrs	APSR_nzcv, fpscr
     514:	blt	52c <register_leap_second+0x78>
     518:	vcmp.f64	d7, d8
     51c:	vmrs	APSR_nzcv, fpscr
     520:	beq	5a4 <register_leap_second+0xf0>
     524:	vstr	d8, [r3]
     528:	vmov.f64	d8, d7
     52c:	cmp	r4, r2
     530:	add	r3, r3, #8
     534:	bne	504 <register_leap_second+0x50>
     538:	add	r0, r0, r4, lsl #3
     53c:	mov	r3, #0
     540:	add	r4, r4, #1
     544:	vstr	d8, [r0]
     548:	bl	0 <__aeabi_read_tp>
     54c:	str	r4, [r6, r0]
     550:	mov	r0, r3
     554:	add	sp, sp, #12
     558:	vpop	{d8}
     55c:	pop	{r4, r5, r6, r7, pc}
     560:	add	r7, r4, #16
     564:	ldr	r0, [r5, #4]
     568:	lsl	r7, r7, #3
     56c:	mov	r1, r7
     570:	bl	0 <realloc>
     574:	cmp	r0, #0
     578:	strne	r0, [r5, #4]
     57c:	bne	4e0 <register_leap_second+0x2c>
     580:	ldr	r3, [pc, #52]	; 5bc <register_leap_second+0x108>
     584:	mov	r2, r7
     588:	str	r3, [sp]
     58c:	ldr	r1, [pc, #44]	; 5c0 <register_leap_second+0x10c>
     590:	ldr	r3, [pc, #44]	; 5c4 <register_leap_second+0x110>
     594:	mvn	r0, #0
     598:	bl	0 <coda_set_error>
     59c:	mvn	r3, #0
     5a0:	b	550 <register_leap_second+0x9c>
     5a4:	mov	r3, #0
     5a8:	mov	r0, r3
     5ac:	add	sp, sp, #12
     5b0:	vpop	{d8}
     5b4:	pop	{r4, r5, r6, r7, pc}
     5b8:	.word	0x00000000
     5bc:	.word	0x00000261
     5c0:	.word	0x00000074
     5c4:	.word	0x0000002c

000005c8 <hms_to_daytime>:
     5c8:	cmp	r0, #23
     5cc:	push	{lr}		; (str lr, [sp, #-4]!)
     5d0:	sub	sp, sp, #12
     5d4:	bhi	64c <hms_to_daytime+0x84>
     5d8:	cmp	r1, #59	; 0x3b
     5dc:	bhi	64c <hms_to_daytime+0x84>
     5e0:	ldr	ip, [pc, #168]	; 690 <hms_to_daytime+0xc8>
     5e4:	cmp	r3, ip
     5e8:	cmpls	r2, #60	; 0x3c
     5ec:	movhi	ip, #1
     5f0:	movls	ip, #0
     5f4:	bhi	64c <hms_to_daytime+0x84>
     5f8:	vmov	s15, r3
     5fc:	vldr	d0, [pc, #116]	; 678 <hms_to_daytime+0xb0>
     600:	vldr	d1, [pc, #120]	; 680 <hms_to_daytime+0xb8>
     604:	vmov	s13, r0
     608:	vcvt.f64.s32	d5, s15
     60c:	vmov	s15, r1
     610:	vldr	d2, [pc, #112]	; 688 <hms_to_daytime+0xc0>
     614:	vcvt.f64.s32	d4, s13
     618:	vmov	s13, r2
     61c:	vcvt.f64.s32	d7, s15
     620:	ldr	r3, [sp, #16]
     624:	mov	r0, ip
     628:	vdiv.f64	d3, d5, d0
     62c:	vcvt.f64.s32	d6, s13
     630:	vmul.f64	d7, d7, d1
     634:	vmla.f64	d7, d4, d2
     638:	vadd.f64	d7, d7, d6
     63c:	vadd.f64	d7, d7, d3
     640:	vstr	d7, [r3]
     644:	add	sp, sp, #12
     648:	pop	{pc}		; (ldr pc, [sp], #4)
     64c:	mov	lr, r3
     650:	mov	ip, r2
     654:	mov	r3, r1
     658:	mov	r2, r0
     65c:	stm	sp, {ip, lr}
     660:	ldr	r1, [pc, #44]	; 694 <hms_to_daytime+0xcc>
     664:	mvn	r0, #103	; 0x67
     668:	bl	0 <coda_set_error>
     66c:	mvn	r0, #0
     670:	add	sp, sp, #12
     674:	pop	{pc}		; (ldr pc, [sp], #4)
     678:	.word	0x00000000
     67c:	.word	0x412e8480
     680:	.word	0x00000000
     684:	.word	0x404e0000
     688:	.word	0x00000000
     68c:	.word	0x40ac2000
     690:	.word	0x000f423f
     694:	.word	0x000000ac

00000698 <getday_leapyear>:
     698:	ldr	ip, [pc, #192]	; 760 <getday_leapyear+0xc8>
     69c:	push	{r4, r5, r6, r7, lr}
     6a0:	mov	r4, r0
     6a4:	mov	r5, r1
     6a8:	mov	r6, r2
     6ac:	ldm	ip!, {r0, r1, r2, r3}
     6b0:	sub	sp, sp, #60	; 0x3c
     6b4:	add	lr, sp, #4
     6b8:	cmp	r4, #0
     6bc:	stmia	lr!, {r0, r1, r2, r3}
     6c0:	ldm	ip!, {r0, r1, r2, r3}
     6c4:	stmia	lr!, {r0, r1, r2, r3}
     6c8:	ldm	ip!, {r0, r1, r2, r3}
     6cc:	ldr	r7, [ip]
     6d0:	stmia	lr!, {r0, r1, r2, r3}
     6d4:	str	r7, [lr]
     6d8:	blt	74c <getday_leapyear+0xb4>
     6dc:	ldr	r3, [pc, #128]	; 764 <getday_leapyear+0xcc>
     6e0:	cmp	r4, r3
     6e4:	addle	r2, sp, #4
     6e8:	movle	r3, #1
     6ec:	bgt	738 <getday_leapyear+0xa0>
     6f0:	ldr	r1, [r2, #4]!
     6f4:	cmp	r4, r1
     6f8:	blt	730 <getday_leapyear+0x98>
     6fc:	add	r3, r3, #1
     700:	cmp	r3, #13
     704:	bne	6f0 <getday_leapyear+0x58>
     708:	mov	r2, #12
     70c:	add	r1, sp, #56	; 0x38
     710:	add	r2, r1, r2, lsl #2
     714:	add	r4, r4, #1
     718:	ldr	r2, [r2, #-52]	; 0xffffffcc
     71c:	str	r3, [r6]
     720:	sub	r4, r4, r2
     724:	str	r4, [r5]
     728:	add	sp, sp, #60	; 0x3c
     72c:	pop	{r4, r5, r6, r7, pc}
     730:	sub	r2, r3, #1
     734:	b	70c <getday_leapyear+0x74>
     738:	add	r3, ip, #4
     73c:	ldr	r2, [pc, #36]	; 768 <getday_leapyear+0xd0>
     740:	ldr	r1, [pc, #36]	; 76c <getday_leapyear+0xd4>
     744:	ldr	r0, [pc, #36]	; 770 <getday_leapyear+0xd8>
     748:	bl	0 <__assert_fail>
     74c:	add	r3, ip, #4
     750:	ldr	r2, [pc, #28]	; 774 <getday_leapyear+0xdc>
     754:	ldr	r1, [pc, #16]	; 76c <getday_leapyear+0xd4>
     758:	ldr	r0, [pc, #24]	; 778 <getday_leapyear+0xe0>
     75c:	bl	0 <__assert_fail>
     760:	.word	0x00000034
     764:	.word	0x0000016d
     768:	.word	0x00000167
     76c:	.word	0x0000002c
     770:	.word	0x000000f0
     774:	.word	0x00000166
     778:	.word	0x000000e4

0000077c <getday_nonleapyear>:
     77c:	ldr	ip, [pc, #188]	; 840 <getday_nonleapyear+0xc4>
     780:	push	{r4, r5, r6, r7, lr}
     784:	mov	r4, r0
     788:	mov	r5, r1
     78c:	mov	r6, r2
     790:	ldm	ip!, {r0, r1, r2, r3}
     794:	sub	sp, sp, #60	; 0x3c
     798:	add	lr, sp, #4
     79c:	cmp	r4, #0
     7a0:	stmia	lr!, {r0, r1, r2, r3}
     7a4:	ldm	ip!, {r0, r1, r2, r3}
     7a8:	stmia	lr!, {r0, r1, r2, r3}
     7ac:	ldm	ip!, {r0, r1, r2, r3}
     7b0:	ldr	r7, [ip]
     7b4:	stmia	lr!, {r0, r1, r2, r3}
     7b8:	str	r7, [lr]
     7bc:	blt	82c <getday_nonleapyear+0xb0>
     7c0:	cmp	r4, #364	; 0x16c
     7c4:	addle	r2, sp, #4
     7c8:	movle	r3, #1
     7cc:	bgt	818 <getday_nonleapyear+0x9c>
     7d0:	ldr	r1, [r2, #4]!
     7d4:	cmp	r4, r1
     7d8:	blt	810 <getday_nonleapyear+0x94>
     7dc:	add	r3, r3, #1
     7e0:	cmp	r3, #13
     7e4:	bne	7d0 <getday_nonleapyear+0x54>
     7e8:	mov	r2, #12
     7ec:	add	r1, sp, #56	; 0x38
     7f0:	add	r2, r1, r2, lsl #2
     7f4:	add	r4, r4, #1
     7f8:	ldr	r2, [r2, #-52]	; 0xffffffcc
     7fc:	str	r3, [r6]
     800:	sub	r4, r4, r2
     804:	str	r4, [r5]
     808:	add	sp, sp, #60	; 0x3c
     80c:	pop	{r4, r5, r6, r7, pc}
     810:	sub	r2, r3, #1
     814:	b	7ec <getday_nonleapyear+0x70>
     818:	add	r3, ip, #72	; 0x48
     81c:	ldr	r2, [pc, #32]	; 844 <getday_nonleapyear+0xc8>
     820:	ldr	r1, [pc, #32]	; 848 <getday_nonleapyear+0xcc>
     824:	ldr	r0, [pc, #32]	; 84c <getday_nonleapyear+0xd0>
     828:	bl	0 <__assert_fail>
     82c:	add	r3, ip, #72	; 0x48
     830:	ldr	r2, [pc, #24]	; 850 <getday_nonleapyear+0xd4>
     834:	ldr	r1, [pc, #12]	; 848 <getday_nonleapyear+0xcc>
     838:	ldr	r0, [pc, #20]	; 854 <getday_nonleapyear+0xd8>
     83c:	bl	0 <__assert_fail>
     840:	.word	0x00000000
     844:	.word	0x0000017a
     848:	.word	0x0000002c
     84c:	.word	0x000000fc
     850:	.word	0x00000179
     854:	.word	0x000000e4

00000858 <mjd2000_to_dmy>:
     858:	push	{r4, r5, r6, r7, r8, lr}
     85c:	sub	sp, sp, #8
     860:	mov	r8, r0
     864:	mov	r5, r1
     868:	mov	r6, r2
     86c:	mov	r4, r3
     870:	ldr	r2, [pc, #724]	; b4c <mjd2000_to_dmy+0x2f4>
     874:	add	r3, sp, #4
     878:	mov	r1, #9
     87c:	mov	r0, #2
     880:	bl	21c <dmy_to_mjd2000>
     884:	subs	r7, r0, #0
     888:	bne	b44 <mjd2000_to_dmy+0x2ec>
     88c:	ldr	r3, [sp, #4]
     890:	cmp	r3, r8
     894:	bge	a40 <mjd2000_to_dmy+0x1e8>
     898:	ldr	r3, [pc, #688]	; b50 <mjd2000_to_dmy+0x2f8>
     89c:	asr	r2, r8, #31
     8a0:	mov	ip, #400	; 0x190
     8a4:	smull	r1, r3, r3, r8
     8a8:	ldr	r1, [pc, #676]	; b54 <mjd2000_to_dmy+0x2fc>
     8ac:	rsb	r2, r2, r3, asr #15
     8b0:	mov	lr, r2
     8b4:	add	r3, r2, r2, lsl #3
     8b8:	add	r3, r2, r3, lsl #4
     8bc:	rsb	r3, r2, r3, lsl #4
     8c0:	rsb	r3, r3, r3, lsl #6
     8c4:	sub	r2, r8, r3
     8c8:	lsr	r3, r2, #31
     8cc:	sub	lr, lr, r3
     8d0:	lsl	r0, r3, #3
     8d4:	add	r0, r0, r3
     8d8:	mul	ip, ip, lr
     8dc:	add	r0, r3, r0, lsl #4
     8e0:	add	lr, ip, #2000	; 0x7d0
     8e4:	rsb	r3, r3, r0, lsl #4
     8e8:	str	lr, [r4]
     8ec:	rsb	r3, r3, r3, lsl #6
     8f0:	add	r3, r3, r2
     8f4:	cmp	r3, r1
     8f8:	ble	9b4 <mjd2000_to_dmy+0x15c>
     8fc:	sub	r3, r3, #36352	; 0x8e00
     900:	ldr	r2, [pc, #592]	; b58 <mjd2000_to_dmy+0x300>
     904:	sub	r3, r3, #173	; 0xad
     908:	add	ip, ip, #2096	; 0x830
     90c:	smull	r0, r2, r2, r3
     910:	ldr	lr, [pc, #580]	; b5c <mjd2000_to_dmy+0x304>
     914:	add	r2, r2, r3
     918:	asr	r8, r3, #31
     91c:	asr	r2, r2, #15
     920:	sub	r0, r2, r8
     924:	mov	r2, r0
     928:	mul	r1, r1, r0
     92c:	mov	r0, #100	; 0x64
     930:	add	ip, ip, #4
     934:	mla	ip, r0, r2, ip
     938:	sub	r0, r3, r1
     93c:	cmp	r0, lr
     940:	str	ip, [r4]
     944:	ble	b08 <mjd2000_to_dmy+0x2b0>
     948:	sub	r3, r0, #1456	; 0x5b0
     94c:	ldr	r0, [pc, #524]	; b60 <mjd2000_to_dmy+0x308>
     950:	sub	r3, r3, #4
     954:	add	ip, ip, #4
     958:	smull	r2, r0, r0, r3
     95c:	ldr	r2, [pc, #512]	; b64 <mjd2000_to_dmy+0x30c>
     960:	asr	lr, r3, #31
     964:	asr	r1, r0, #7
     968:	sub	r0, r1, lr
     96c:	mov	r1, r0
     970:	mul	r0, r2, r0
     974:	ldr	r2, [pc, #492]	; b68 <mjd2000_to_dmy+0x310>
     978:	sub	r0, r3, r0
     97c:	add	r1, ip, r1, lsl #2
     980:	cmp	r0, r2
     984:	str	r1, [r4]
     988:	bgt	ad4 <mjd2000_to_dmy+0x27c>
     98c:	mov	r2, r6
     990:	mov	r1, r5
     994:	bl	698 <getday_leapyear>
     998:	ldr	r3, [r4]
     99c:	cmp	r3, #0
     9a0:	suble	r3, r3, #1
     9a4:	strle	r3, [r4]
     9a8:	mov	r0, r7
     9ac:	add	sp, sp, #8
     9b0:	pop	{r4, r5, r6, r7, r8, pc}
     9b4:	ldr	r2, [pc, #420]	; b60 <mjd2000_to_dmy+0x308>
     9b8:	asr	r0, r3, #31
     9bc:	ldr	ip, [pc, #416]	; b64 <mjd2000_to_dmy+0x30c>
     9c0:	smull	r1, r2, r2, r3
     9c4:	ldr	r1, [pc, #412]	; b68 <mjd2000_to_dmy+0x310>
     9c8:	asr	r2, r2, #7
     9cc:	sub	r8, r2, r0
     9d0:	mov	r2, r8
     9d4:	mul	r0, ip, r8
     9d8:	sub	r8, r3, r0
     9dc:	lsr	r0, r8, #31
     9e0:	sub	r2, r2, r0
     9e4:	mla	r0, ip, r0, r8
     9e8:	add	r2, lr, r2, lsl #2
     9ec:	cmp	r0, r1
     9f0:	str	r2, [r4]
     9f4:	ble	98c <mjd2000_to_dmy+0x134>
     9f8:	sub	r0, r0, #364	; 0x16c
     9fc:	ldr	r3, [pc, #360]	; b6c <mjd2000_to_dmy+0x314>
     a00:	sub	r0, r0, #2
     a04:	add	r2, r2, #1
     a08:	smull	r1, r3, r3, r0
     a0c:	add	r1, r3, r0
     a10:	asr	r3, r0, #31
     a14:	rsb	r3, r3, r1, asr #8
     a18:	add	lr, r2, r3
     a1c:	add	r1, r3, r3, lsl #3
     a20:	mov	r2, r6
     a24:	add	r3, r3, r1, lsl #3
     a28:	str	lr, [r4]
     a2c:	add	r3, r3, r3, lsl #2
     a30:	mov	r1, r5
     a34:	sub	r0, r0, r3
     a38:	bl	77c <getday_nonleapyear>
     a3c:	b	998 <mjd2000_to_dmy+0x140>
     a40:	ldr	r3, [pc, #280]	; b60 <mjd2000_to_dmy+0x308>
     a44:	sub	r8, r8, #13
     a48:	ldr	r1, [pc, #276]	; b64 <mjd2000_to_dmy+0x30c>
     a4c:	smull	r2, r3, r3, r8
     a50:	ldr	ip, [pc, #272]	; b68 <mjd2000_to_dmy+0x310>
     a54:	asr	r0, r8, #31
     a58:	asr	r3, r3, #7
     a5c:	sub	r2, r3, r0
     a60:	mov	r3, r2
     a64:	mul	r0, r1, r2
     a68:	sub	r2, r8, r0
     a6c:	lsr	r0, r2, #31
     a70:	sub	r3, r3, r0
     a74:	mla	r0, r1, r0, r2
     a78:	lsl	r3, r3, #2
     a7c:	add	r3, r3, #2000	; 0x7d0
     a80:	cmp	r0, ip
     a84:	str	r3, [r4]
     a88:	ble	98c <mjd2000_to_dmy+0x134>
     a8c:	sub	r0, r0, #364	; 0x16c
     a90:	ldr	r1, [pc, #212]	; b6c <mjd2000_to_dmy+0x314>
     a94:	sub	r0, r0, #2
     a98:	add	r3, r3, #1
     a9c:	smull	r2, r1, r1, r0
     aa0:	add	r2, r1, r0
     aa4:	asr	r1, r0, #31
     aa8:	rsb	r1, r1, r2, asr #8
     aac:	add	r3, r3, r1
     ab0:	add	ip, r1, r1, lsl #3
     ab4:	mov	r2, r6
     ab8:	add	ip, r1, ip, lsl #3
     abc:	add	ip, ip, ip, lsl #2
     ac0:	mov	r1, r5
     ac4:	str	r3, [r4]
     ac8:	sub	r0, r0, ip
     acc:	bl	77c <getday_nonleapyear>
     ad0:	b	998 <mjd2000_to_dmy+0x140>
     ad4:	sub	r0, r0, #364	; 0x16c
     ad8:	ldr	ip, [pc, #140]	; b6c <mjd2000_to_dmy+0x314>
     adc:	sub	r0, r0, #2
     ae0:	add	r1, r1, #1
     ae4:	smull	r3, ip, ip, r0
     ae8:	add	r3, ip, r0
     aec:	asr	ip, r0, #31
     af0:	rsb	ip, ip, r3, asr #8
     af4:	add	r3, r1, ip
     af8:	add	r1, ip, ip, lsl #3
     afc:	mov	r2, r6
     b00:	add	ip, ip, r1, lsl #3
     b04:	b	abc <mjd2000_to_dmy+0x264>
     b08:	ldr	lr, [pc, #92]	; b6c <mjd2000_to_dmy+0x314>
     b0c:	asr	r3, r0, #31
     b10:	mov	r2, r6
     b14:	smull	r1, lr, lr, r0
     b18:	add	lr, lr, r0
     b1c:	mov	r1, r5
     b20:	rsb	r3, r3, lr, asr #8
     b24:	add	ip, r3, ip
     b28:	add	lr, r3, r3, lsl #3
     b2c:	str	ip, [r4]
     b30:	add	r3, r3, lr, lsl #3
     b34:	add	r3, r3, r3, lsl #2
     b38:	sub	r0, r0, r3
     b3c:	bl	77c <getday_nonleapyear>
     b40:	b	998 <mjd2000_to_dmy+0x140>
     b44:	mvn	r7, #0
     b48:	b	9a8 <mjd2000_to_dmy+0x150>
     b4c:	.word	0x000006d8
     b50:	.word	0x396b06bd
     b54:	.word	0x00008eac
     b58:	.word	0xe5ac81fb
     b5c:	.word	0x000005b3
     b60:	.word	0x166db073
     b64:	.word	0x000005b5
     b68:	.word	0x0000016d
     b6c:	.word	0xb38cf9b1

00000b70 <coda_month_to_integer>:
     b70:	push	{r4, lr}
     b74:	sub	sp, sp, #8
     b78:	ldrb	lr, [r0, #1]
     b7c:	ldrb	ip, [r0, #2]
     b80:	ldrb	r4, [r0]
     b84:	mov	r3, #0
     b88:	add	r0, sp, #4
     b8c:	mov	r2, #3
     b90:	ldr	r1, [pc, #368]	; d08 <coda_month_to_integer+0x198>
     b94:	strb	r4, [sp, #4]
     b98:	strb	lr, [sp, #5]
     b9c:	strb	ip, [sp, #6]
     ba0:	strb	r3, [sp, #7]
     ba4:	bl	0 <strncasecmp>
     ba8:	cmp	r0, #0
     bac:	moveq	r0, #1
     bb0:	beq	bd0 <coda_month_to_integer+0x60>
     bb4:	mov	r2, #3
     bb8:	ldr	r1, [pc, #332]	; d0c <coda_month_to_integer+0x19c>
     bbc:	add	r0, sp, #4
     bc0:	bl	0 <strncasecmp>
     bc4:	cmp	r0, #0
     bc8:	moveq	r0, #2
     bcc:	bne	bd8 <coda_month_to_integer+0x68>
     bd0:	add	sp, sp, #8
     bd4:	pop	{r4, pc}
     bd8:	mov	r2, #3
     bdc:	ldr	r1, [pc, #300]	; d10 <coda_month_to_integer+0x1a0>
     be0:	add	r0, sp, #4
     be4:	bl	0 <strncasecmp>
     be8:	cmp	r0, #0
     bec:	moveq	r0, #3
     bf0:	beq	bd0 <coda_month_to_integer+0x60>
     bf4:	mov	r2, #3
     bf8:	ldr	r1, [pc, #276]	; d14 <coda_month_to_integer+0x1a4>
     bfc:	add	r0, sp, #4
     c00:	bl	0 <strncasecmp>
     c04:	cmp	r0, #0
     c08:	moveq	r0, #4
     c0c:	beq	bd0 <coda_month_to_integer+0x60>
     c10:	mov	r2, #3
     c14:	ldr	r1, [pc, #252]	; d18 <coda_month_to_integer+0x1a8>
     c18:	add	r0, sp, #4
     c1c:	bl	0 <strncasecmp>
     c20:	cmp	r0, #0
     c24:	moveq	r0, #5
     c28:	beq	bd0 <coda_month_to_integer+0x60>
     c2c:	mov	r2, #3
     c30:	ldr	r1, [pc, #228]	; d1c <coda_month_to_integer+0x1ac>
     c34:	add	r0, sp, #4
     c38:	bl	0 <strncasecmp>
     c3c:	cmp	r0, #0
     c40:	moveq	r0, #6
     c44:	beq	bd0 <coda_month_to_integer+0x60>
     c48:	mov	r2, #3
     c4c:	ldr	r1, [pc, #204]	; d20 <coda_month_to_integer+0x1b0>
     c50:	add	r0, sp, #4
     c54:	bl	0 <strncasecmp>
     c58:	cmp	r0, #0
     c5c:	moveq	r0, #7
     c60:	beq	bd0 <coda_month_to_integer+0x60>
     c64:	mov	r2, #3
     c68:	ldr	r1, [pc, #180]	; d24 <coda_month_to_integer+0x1b4>
     c6c:	add	r0, sp, #4
     c70:	bl	0 <strncasecmp>
     c74:	cmp	r0, #0
     c78:	moveq	r0, #8
     c7c:	beq	bd0 <coda_month_to_integer+0x60>
     c80:	mov	r2, #3
     c84:	ldr	r1, [pc, #156]	; d28 <coda_month_to_integer+0x1b8>
     c88:	add	r0, sp, #4
     c8c:	bl	0 <strncasecmp>
     c90:	cmp	r0, #0
     c94:	moveq	r0, #9
     c98:	beq	bd0 <coda_month_to_integer+0x60>
     c9c:	mov	r2, #3
     ca0:	ldr	r1, [pc, #132]	; d2c <coda_month_to_integer+0x1bc>
     ca4:	add	r0, sp, #4
     ca8:	bl	0 <strncasecmp>
     cac:	cmp	r0, #0
     cb0:	moveq	r0, #10
     cb4:	beq	bd0 <coda_month_to_integer+0x60>
     cb8:	mov	r2, #3
     cbc:	ldr	r1, [pc, #108]	; d30 <coda_month_to_integer+0x1c0>
     cc0:	add	r0, sp, #4
     cc4:	bl	0 <strncasecmp>
     cc8:	cmp	r0, #0
     ccc:	moveq	r0, #11
     cd0:	beq	bd0 <coda_month_to_integer+0x60>
     cd4:	mov	r2, #3
     cd8:	ldr	r1, [pc, #84]	; d34 <coda_month_to_integer+0x1c4>
     cdc:	add	r0, sp, #4
     ce0:	bl	0 <strncasecmp>
     ce4:	cmp	r0, #0
     ce8:	moveq	r0, #12
     cec:	beq	bd0 <coda_month_to_integer+0x60>
     cf0:	mvn	r0, #99	; 0x63
     cf4:	add	r2, sp, #4
     cf8:	ldr	r1, [pc, #56]	; d38 <coda_month_to_integer+0x1c8>
     cfc:	bl	0 <coda_set_error>
     d00:	mvn	r0, #0
     d04:	b	bd0 <coda_month_to_integer+0x60>
     d08:	.word	0x00000108
     d0c:	.word	0x0000010c
     d10:	.word	0x00000110
     d14:	.word	0x00000114
     d18:	.word	0x00000118
     d1c:	.word	0x0000011c
     d20:	.word	0x00000120
     d24:	.word	0x00000124
     d28:	.word	0x00000128
     d2c:	.word	0x0000012c
     d30:	.word	0x00000130
     d34:	.word	0x00000134
     d38:	.word	0x00000138

00000d3c <coda_dayofyear_to_month_day>:
     d3c:	push	{r4, r5, r6, lr}
     d40:	sub	sp, sp, #16
     d44:	cmp	r3, #0
     d48:	cmpne	r2, #0
     d4c:	str	r0, [sp, #4]
     d50:	beq	ddc <coda_dayofyear_to_month_day+0xa0>
     d54:	mov	r5, r3
     d58:	ldr	r3, [pc, #152]	; df8 <coda_dayofyear_to_month_day+0xbc>
     d5c:	mov	r4, r1
     d60:	cmp	r1, r3
     d64:	bhi	dc4 <coda_dayofyear_to_month_day+0x88>
     d68:	mov	r1, #1
     d6c:	mov	r6, r2
     d70:	add	r3, sp, #12
     d74:	mov	r2, r0
     d78:	mov	r0, r1
     d7c:	bl	21c <dmy_to_mjd2000>
     d80:	cmp	r0, #0
     d84:	bne	dbc <coda_dayofyear_to_month_day+0x80>
     d88:	ldr	r3, [sp, #12]
     d8c:	sub	r4, r4, #1
     d90:	add	r4, r4, r3
     d94:	mov	r2, r6
     d98:	mov	r1, r5
     d9c:	mov	r0, r4
     da0:	add	r3, sp, #4
     da4:	str	r4, [sp, #12]
     da8:	bl	858 <mjd2000_to_dmy>
     dac:	adds	r0, r0, #0
     db0:	mvnne	r0, #0
     db4:	add	sp, sp, #16
     db8:	pop	{r4, r5, r6, pc}
     dbc:	mvn	r0, #0
     dc0:	b	db4 <coda_dayofyear_to_month_day+0x78>
     dc4:	mov	r2, r1
     dc8:	mvn	r0, #103	; 0x67
     dcc:	ldr	r1, [pc, #40]	; dfc <coda_dayofyear_to_month_day+0xc0>
     dd0:	bl	0 <coda_set_error>
     dd4:	mvn	r0, #0
     dd8:	b	db4 <coda_dayofyear_to_month_day+0x78>
     ddc:	mvn	r0, #99	; 0x63
     de0:	ldr	r3, [pc, #24]	; e00 <coda_dayofyear_to_month_day+0xc4>
     de4:	ldr	r2, [pc, #24]	; e04 <coda_dayofyear_to_month_day+0xc8>
     de8:	ldr	r1, [pc, #24]	; e08 <coda_dayofyear_to_month_day+0xcc>
     dec:	bl	0 <coda_set_error>
     df0:	mvn	r0, #0
     df4:	b	db4 <coda_dayofyear_to_month_day+0x78>
     df8:	.word	0x0000016e
     dfc:	.word	0x0000017c
     e00:	.word	0x00000225
     e04:	.word	0x0000002c
     e08:	.word	0x00000154

00000e0c <string_to_parts>:
     e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e10:	sub	sp, sp, #20
     e14:	mov	r7, r1
     e18:	ldr	r1, [sp, #56]	; 0x38
     e1c:	mov	lr, r2
     e20:	mov	sl, r3
     e24:	mov	r5, r0
     e28:	mov	ip, #2000	; 0x7d0
     e2c:	mov	r0, #1
     e30:	str	ip, [lr]
     e34:	str	r0, [sl]
     e38:	str	r0, [r1]
     e3c:	ldr	r1, [sp, #60]	; 0x3c
     e40:	str	r2, [sp, #4]
     e44:	mov	r2, #0
     e48:	str	r2, [r1]
     e4c:	ldr	r1, [sp, #64]	; 0x40
     e50:	ldr	r9, [sp, #72]	; 0x48
     e54:	mov	r3, r2
     e58:	str	r2, [r1]
     e5c:	ldr	r1, [sp, #68]	; 0x44
     e60:	mov	r6, r2
     e64:	mov	r4, r2
     e68:	str	r2, [r1]
     e6c:	mov	fp, r2
     e70:	str	r2, [r9]
     e74:	ldrb	r2, [r5]
     e78:	cmp	r2, #0
     e7c:	beq	1194 <string_to_parts+0x388>
     e80:	cmp	r3, #0
     e84:	bne	e94 <string_to_parts+0x88>
     e88:	cmp	r2, #124	; 0x7c
     e8c:	mov	r3, #0
     e90:	beq	f44 <string_to_parts+0x138>
     e94:	add	r1, r7, r6
     e98:	cmp	r2, #39	; 0x27
     e9c:	add	r8, r5, r4
     ea0:	sub	r6, r1, r7
     ea4:	ldrbne	r2, [r5, r4]
     ea8:	beq	f58 <string_to_parts+0x14c>
     eac:	cmp	r3, #0
     eb0:	beq	eec <string_to_parts+0xe0>
     eb4:	ldrb	r0, [r1], #1
     eb8:	add	r4, r4, #1
     ebc:	cmp	r0, r2
     ec0:	bne	112c <string_to_parts+0x320>
     ec4:	ldrb	r2, [r5, r4]
     ec8:	cmp	r2, #0
     ecc:	bne	e98 <string_to_parts+0x8c>
     ed0:	mov	r2, r5
     ed4:	ldr	r1, [pc, #1356]	; 1428 <string_to_parts+0x61c>
     ed8:	mvn	r0, #102	; 0x66
     edc:	bl	0 <coda_set_error>
     ee0:	mvn	r0, #0
     ee4:	add	sp, sp, #20
     ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eec:	cmp	r2, #121	; 0x79
     ef0:	beq	f74 <string_to_parts+0x168>
     ef4:	cmp	r2, #77	; 0x4d
     ef8:	beq	fe8 <string_to_parts+0x1dc>
     efc:	cmp	r2, #100	; 0x64
     f00:	bne	1050 <string_to_parts+0x244>
     f04:	ldrb	r3, [r8, #1]
     f08:	cmp	r3, #100	; 0x64
     f0c:	beq	10e4 <string_to_parts+0x2d8>
     f10:	bic	r3, r2, #32
     f14:	sub	r3, r3, #65	; 0x41
     f18:	cmp	r2, #42	; 0x2a
     f1c:	cmpne	r3, #25
     f20:	bls	1178 <string_to_parts+0x36c>
     f24:	ldrb	r3, [r7, r6]
     f28:	cmp	r3, r2
     f2c:	bne	112c <string_to_parts+0x320>
     f30:	add	r4, r4, #1
     f34:	add	r6, r6, #1
     f38:	ldrb	r2, [r5, r4]
     f3c:	cmp	r2, #0
     f40:	bne	e88 <string_to_parts+0x7c>
     f44:	ldrb	r0, [r7, r6]
     f48:	cmp	r0, #0
     f4c:	bne	11bc <string_to_parts+0x3b0>
     f50:	add	sp, sp, #20
     f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f58:	add	r4, r4, #1
     f5c:	add	r8, r5, r4
     f60:	ldrb	r2, [r5, r4]
     f64:	cmp	r2, #39	; 0x27
     f68:	beq	eac <string_to_parts+0xa0>
     f6c:	eor	r3, r3, #1
     f70:	b	e78 <string_to_parts+0x6c>
     f74:	ldrb	r3, [r8, #1]
     f78:	cmp	r3, #121	; 0x79
     f7c:	bne	f10 <string_to_parts+0x104>
     f80:	ldrb	r3, [r8, #2]
     f84:	cmp	r3, #121	; 0x79
     f88:	bne	f10 <string_to_parts+0x104>
     f8c:	ldrb	r3, [r8, #3]
     f90:	cmp	r3, #121	; 0x79
     f94:	bne	f10 <string_to_parts+0x104>
     f98:	ldrb	r2, [r8, #4]
     f9c:	ldr	r3, [sp, #4]
     fa0:	mov	r1, #4
     fa4:	sub	r2, r2, #42	; 0x2a
     fa8:	add	r0, r7, r6
     fac:	clz	r2, r2
     fb0:	lsr	r2, r2, #5
     fb4:	bl	0 <parse_integer>
     fb8:	cmp	r0, #0
     fbc:	bne	1208 <string_to_parts+0x3fc>
     fc0:	ldrb	r3, [r8]
     fc4:	add	r6, r6, #4
     fc8:	cmp	r3, #42	; 0x2a
     fcc:	movne	r3, #4
     fd0:	moveq	r3, #5
     fd4:	add	r4, r4, r3
     fd8:	ldrb	r2, [r5, r4]
     fdc:	cmp	r2, #0
     fe0:	bne	e88 <string_to_parts+0x7c>
     fe4:	b	f44 <string_to_parts+0x138>
     fe8:	ldrb	r3, [r8, #1]
     fec:	cmp	r3, #77	; 0x4d
     ff0:	bne	f10 <string_to_parts+0x104>
     ff4:	add	r8, r4, #2
     ff8:	ldrb	r2, [r5, r8]
     ffc:	cmp	r2, #77	; 0x4d
    1000:	beq	114c <string_to_parts+0x340>
    1004:	sub	r2, r2, #42	; 0x2a
    1008:	mov	r3, sl
    100c:	clz	r2, r2
    1010:	mov	r1, #2
    1014:	lsr	r2, r2, #5
    1018:	add	r0, r7, r6
    101c:	bl	0 <parse_integer>
    1020:	cmp	r0, #0
    1024:	bne	11a0 <string_to_parts+0x394>
    1028:	ldrb	r3, [r5, r8]
    102c:	add	r6, r6, #2
    1030:	cmp	r3, #42	; 0x2a
    1034:	movne	r3, #2
    1038:	moveq	r3, #3
    103c:	add	r4, r4, r3
    1040:	ldrb	r2, [r5, r4]
    1044:	cmp	r2, #0
    1048:	bne	e88 <string_to_parts+0x7c>
    104c:	b	f44 <string_to_parts+0x138>
    1050:	cmp	r2, #68	; 0x44
    1054:	bne	1224 <string_to_parts+0x418>
    1058:	ldrb	r3, [r8, #1]
    105c:	cmp	r3, #68	; 0x44
    1060:	bne	f10 <string_to_parts+0x104>
    1064:	ldrb	r3, [r8, #2]
    1068:	cmp	r3, #68	; 0x44
    106c:	bne	f10 <string_to_parts+0x104>
    1070:	add	r8, r4, #3
    1074:	add	r3, sp, #12
    1078:	ldrb	r2, [r5, r8]
    107c:	mov	r1, #3
    1080:	add	r0, r7, r6
    1084:	sub	r2, r2, #42	; 0x2a
    1088:	clz	r2, r2
    108c:	lsr	r2, r2, #5
    1090:	bl	0 <parse_integer>
    1094:	cmp	r0, #0
    1098:	bne	11f0 <string_to_parts+0x3e4>
    109c:	ldr	r0, [sp, #4]
    10a0:	ldr	r3, [sp, #56]	; 0x38
    10a4:	mov	r2, sl
    10a8:	ldr	r1, [sp, #12]
    10ac:	ldr	r0, [r0]
    10b0:	bl	d3c <coda_dayofyear_to_month_day>
    10b4:	cmp	r0, #0
    10b8:	bne	11d8 <string_to_parts+0x3cc>
    10bc:	ldrb	r3, [r5, r8]
    10c0:	add	r6, r6, #3
    10c4:	cmp	r3, #42	; 0x2a
    10c8:	movne	r3, #3
    10cc:	moveq	r3, #4
    10d0:	add	r4, r4, r3
    10d4:	ldrb	r2, [r5, r4]
    10d8:	cmp	r2, #0
    10dc:	bne	e88 <string_to_parts+0x7c>
    10e0:	b	f44 <string_to_parts+0x138>
    10e4:	add	r8, r4, #2
    10e8:	ldr	r3, [sp, #56]	; 0x38
    10ec:	ldrb	r2, [r5, r8]
    10f0:	mov	r1, #2
    10f4:	add	r0, r7, r6
    10f8:	sub	r2, r2, #42	; 0x2a
    10fc:	clz	r2, r2
    1100:	lsr	r2, r2, #5
    1104:	bl	0 <parse_integer>
    1108:	cmp	r0, #0
    110c:	beq	1028 <string_to_parts+0x21c>
    1110:	mvn	r0, #103	; 0x67
    1114:	mov	r3, r5
    1118:	mov	r2, r7
    111c:	ldr	r1, [pc, #776]	; 142c <string_to_parts+0x620>
    1120:	bl	0 <coda_set_error>
    1124:	mvn	r0, #0
    1128:	b	f50 <string_to_parts+0x144>
    112c:	mov	r3, r5
    1130:	mov	r2, r7
    1134:	ldr	r1, [pc, #756]	; 1430 <string_to_parts+0x624>
    1138:	mvn	r0, #103	; 0x67
    113c:	bl	0 <coda_set_error>
    1140:	mvn	r0, #0
    1144:	add	sp, sp, #20
    1148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    114c:	add	r0, r7, r6
    1150:	bl	b70 <coda_month_to_integer>
    1154:	cmn	r0, #1
    1158:	str	r0, [sl]
    115c:	beq	11a0 <string_to_parts+0x394>
    1160:	add	r4, r4, #3
    1164:	add	r6, r6, #3
    1168:	ldrb	r2, [r5, r4]
    116c:	cmp	r2, #0
    1170:	bne	e88 <string_to_parts+0x7c>
    1174:	b	f44 <string_to_parts+0x138>
    1178:	mov	r2, r5
    117c:	ldr	r1, [pc, #688]	; 1434 <string_to_parts+0x628>
    1180:	mvn	r0, #102	; 0x66
    1184:	bl	0 <coda_set_error>
    1188:	mvn	r0, #0
    118c:	add	sp, sp, #20
    1190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1194:	cmp	r3, #0
    1198:	beq	f44 <string_to_parts+0x138>
    119c:	b	ed0 <string_to_parts+0xc4>
    11a0:	mvn	r0, #103	; 0x67
    11a4:	mov	r3, r5
    11a8:	mov	r2, r7
    11ac:	ldr	r1, [pc, #644]	; 1438 <string_to_parts+0x62c>
    11b0:	bl	0 <coda_set_error>
    11b4:	mvn	r0, #0
    11b8:	b	f50 <string_to_parts+0x144>
    11bc:	mov	r3, r5
    11c0:	mov	r2, r7
    11c4:	ldr	r1, [pc, #624]	; 143c <string_to_parts+0x630>
    11c8:	mvn	r0, #103	; 0x67
    11cc:	bl	0 <coda_set_error>
    11d0:	mvn	r0, #0
    11d4:	b	f50 <string_to_parts+0x144>
    11d8:	mov	r3, r5
    11dc:	mov	r2, r7
    11e0:	ldr	r1, [pc, #600]	; 1440 <string_to_parts+0x634>
    11e4:	mvn	r0, #103	; 0x67
    11e8:	bl	0 <coda_set_error>
    11ec:	b	11d0 <string_to_parts+0x3c4>
    11f0:	mov	r3, r5
    11f4:	mov	r2, r7
    11f8:	ldr	r1, [pc, #556]	; 142c <string_to_parts+0x620>
    11fc:	mvn	r0, #103	; 0x67
    1200:	bl	0 <coda_set_error>
    1204:	b	11d0 <string_to_parts+0x3c4>
    1208:	mvn	r0, #103	; 0x67
    120c:	mov	r3, r5
    1210:	mov	r2, r7
    1214:	ldr	r1, [pc, #552]	; 1444 <string_to_parts+0x638>
    1218:	bl	0 <coda_set_error>
    121c:	mvn	r0, #0
    1220:	b	f50 <string_to_parts+0x144>
    1224:	cmp	r2, #72	; 0x48
    1228:	bne	1280 <string_to_parts+0x474>
    122c:	ldrb	r3, [r8, #1]
    1230:	cmp	r3, #72	; 0x48
    1234:	bne	f10 <string_to_parts+0x104>
    1238:	add	r8, r4, #2
    123c:	ldr	r3, [sp, #60]	; 0x3c
    1240:	ldrb	r2, [r5, r8]
    1244:	mov	r1, #2
    1248:	add	r0, r7, r6
    124c:	sub	r2, r2, #42	; 0x2a
    1250:	clz	r2, r2
    1254:	lsr	r2, r2, #5
    1258:	bl	0 <parse_integer>
    125c:	cmp	r0, #0
    1260:	beq	1028 <string_to_parts+0x21c>
    1264:	mvn	r0, #103	; 0x67
    1268:	mov	r3, r5
    126c:	mov	r2, r7
    1270:	ldr	r1, [pc, #464]	; 1448 <string_to_parts+0x63c>
    1274:	bl	0 <coda_set_error>
    1278:	mvn	r0, #0
    127c:	b	f50 <string_to_parts+0x144>
    1280:	cmp	r2, #109	; 0x6d
    1284:	bne	12dc <string_to_parts+0x4d0>
    1288:	ldrb	r3, [r8, #1]
    128c:	cmp	r3, #109	; 0x6d
    1290:	bne	f10 <string_to_parts+0x104>
    1294:	add	r8, r4, #2
    1298:	ldr	r3, [sp, #64]	; 0x40
    129c:	ldrb	r2, [r5, r8]
    12a0:	mov	r1, #2
    12a4:	add	r0, r7, r6
    12a8:	sub	r2, r2, #42	; 0x2a
    12ac:	clz	r2, r2
    12b0:	lsr	r2, r2, #5
    12b4:	bl	0 <parse_integer>
    12b8:	cmp	r0, #0
    12bc:	beq	1028 <string_to_parts+0x21c>
    12c0:	mvn	r0, #103	; 0x67
    12c4:	mov	r3, r5
    12c8:	mov	r2, r7
    12cc:	ldr	r1, [pc, #376]	; 144c <string_to_parts+0x640>
    12d0:	bl	0 <coda_set_error>
    12d4:	mvn	r0, #0
    12d8:	b	f50 <string_to_parts+0x144>
    12dc:	cmp	r2, #115	; 0x73
    12e0:	bne	1338 <string_to_parts+0x52c>
    12e4:	ldrb	r3, [r8, #1]
    12e8:	cmp	r3, #115	; 0x73
    12ec:	bne	1178 <string_to_parts+0x36c>
    12f0:	add	r8, r4, #2
    12f4:	ldr	r3, [sp, #68]	; 0x44
    12f8:	ldrb	r2, [r5, r8]
    12fc:	mov	r1, #2
    1300:	add	r0, r7, r6
    1304:	sub	r2, r2, #42	; 0x2a
    1308:	clz	r2, r2
    130c:	lsr	r2, r2, #5
    1310:	bl	0 <parse_integer>
    1314:	cmp	r0, #0
    1318:	beq	1028 <string_to_parts+0x21c>
    131c:	mvn	r0, #103	; 0x67
    1320:	mov	r3, r5
    1324:	mov	r2, r7
    1328:	ldr	r1, [pc, #288]	; 1450 <string_to_parts+0x644>
    132c:	bl	0 <coda_set_error>
    1330:	mvn	r0, #0
    1334:	b	f50 <string_to_parts+0x144>
    1338:	cmp	r2, #83	; 0x53
    133c:	bne	f10 <string_to_parts+0x104>
    1340:	add	r2, r4, #1
    1344:	add	r2, r5, r2
    1348:	mov	r0, r4
    134c:	ldrb	lr, [r2]
    1350:	add	r0, r0, #1
    1354:	mov	ip, r2
    1358:	cmp	lr, #83	; 0x53
    135c:	sub	r1, r0, r4
    1360:	add	r2, r2, #1
    1364:	beq	134c <string_to_parts+0x540>
    1368:	cmp	r1, #6
    136c:	movlt	r4, r1
    1370:	movge	r4, #6
    1374:	cmp	r4, #0
    1378:	str	fp, [r9]
    137c:	add	lr, r7, r6
    1380:	beq	13cc <string_to_parts+0x5c0>
    1384:	ldrb	r2, [r7, r6]
    1388:	sub	r2, r2, #48	; 0x30
    138c:	uxtb	r8, r2
    1390:	cmp	r8, #9
    1394:	bhi	1408 <string_to_parts+0x5fc>
    1398:	add	r4, lr, r4
    139c:	add	lr, lr, #1
    13a0:	b	13b8 <string_to_parts+0x5ac>
    13a4:	ldrb	r2, [lr], #1
    13a8:	sub	r2, r2, #48	; 0x30
    13ac:	uxtb	r8, r2
    13b0:	cmp	r8, #9
    13b4:	bhi	1408 <string_to_parts+0x5fc>
    13b8:	add	r3, r3, r3, lsl #2
    13bc:	cmp	r4, lr
    13c0:	add	r3, r2, r3, lsl #1
    13c4:	str	r3, [r9]
    13c8:	bne	13a4 <string_to_parts+0x598>
    13cc:	cmp	r1, #5
    13d0:	add	r6, r6, r1
    13d4:	bgt	13f4 <string_to_parts+0x5e8>
    13d8:	ldr	r3, [r9]
    13dc:	add	r3, r3, r3, lsl #2
    13e0:	add	r1, r1, #1
    13e4:	cmp	r1, #6
    13e8:	lsl	r3, r3, #1
    13ec:	bne	13dc <string_to_parts+0x5d0>
    13f0:	str	r3, [r9]
    13f4:	ldrb	r2, [ip]
    13f8:	cmp	r2, #0
    13fc:	beq	f44 <string_to_parts+0x138>
    1400:	mov	r4, r0
    1404:	b	e88 <string_to_parts+0x7c>
    1408:	mov	r3, r5
    140c:	mov	r2, r7
    1410:	ldr	r1, [pc, #60]	; 1454 <string_to_parts+0x648>
    1414:	mvn	r0, #103	; 0x67
    1418:	bl	0 <coda_set_error>
    141c:	mvn	r0, #0
    1420:	add	sp, sp, #20
    1424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1428:	.word	0x000001e8
    142c:	.word	0x0000029c
    1430:	.word	0x000001a0
    1434:	.word	0x000003e8
    1438:	.word	0x00000258
    143c:	.word	0x00000420
    1440:	.word	0x000002dc
    1444:	.word	0x00000214
    1448:	.word	0x0000031c
    144c:	.word	0x00000360
    1450:	.word	0x000003a4
    1454:	.word	0x00000464

00001458 <coda_leap_second_table_done>:
    1458:	push	{r4, r5, r6, lr}
    145c:	bl	0 <__aeabi_read_tp>
    1460:	ldr	r4, [pc, #40]	; 1490 <coda_leap_second_table_done+0x38>
    1464:	add	r5, r4, r0
    1468:	ldr	r0, [r5, #4]
    146c:	cmp	r0, #0
    1470:	beq	1480 <coda_leap_second_table_done+0x28>
    1474:	bl	0 <free>
    1478:	mov	r3, #0
    147c:	str	r3, [r5, #4]
    1480:	mov	r3, #0
    1484:	bl	0 <__aeabi_read_tp>
    1488:	str	r3, [r4, r0]
    148c:	pop	{r4, r5, r6, pc}
    1490:	.word	0x00000000

00001494 <coda_leap_second_table_init>:
    1494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1498:	bl	0 <__aeabi_read_tp>
    149c:	ldr	r4, [pc, #908]	; 1830 <coda_leap_second_table_init+0x39c>
    14a0:	vpush	{d8-d10}
    14a4:	add	r5, r4, r0
    14a8:	ldr	r0, [r5, #4]
    14ac:	sub	sp, sp, #188	; 0xbc
    14b0:	cmp	r0, #0
    14b4:	beq	14c4 <coda_leap_second_table_init+0x30>
    14b8:	bl	0 <free>
    14bc:	mov	r3, #0
    14c0:	str	r3, [r5, #4]
    14c4:	bl	0 <__aeabi_read_tp>
    14c8:	mov	r3, r0
    14cc:	mov	r7, #0
    14d0:	ldr	r0, [pc, #860]	; 1834 <coda_leap_second_table_init+0x3a0>
    14d4:	str	r7, [r4, r3]
    14d8:	bl	0 <getenv>
    14dc:	subs	r4, r0, #0
    14e0:	beq	1640 <coda_leap_second_table_init+0x1ac>
    14e4:	ldr	r0, [pc, #840]	; 1834 <coda_leap_second_table_init+0x3a0>
    14e8:	bl	0 <getenv>
    14ec:	ldr	r1, [pc, #836]	; 1838 <coda_leap_second_table_init+0x3a4>
    14f0:	mov	fp, r0
    14f4:	bl	0 <fopen>
    14f8:	subs	r5, r0, #0
    14fc:	beq	1728 <coda_leap_second_table_init+0x294>
    1500:	vldr	d8, [pc, #568]	; 1740 <coda_leap_second_table_init+0x2ac>
    1504:	vldr	d10, [pc, #572]	; 1748 <coda_leap_second_table_init+0x2b4>
    1508:	vldr	d9, [pc, #576]	; 1750 <coda_leap_second_table_init+0x2bc>
    150c:	ldr	r9, [pc, #808]	; 183c <coda_leap_second_table_init+0x3a8>
    1510:	ldr	r8, [pc, #808]	; 1840 <coda_leap_second_table_init+0x3ac>
    1514:	ldr	sl, [pc, #808]	; 1844 <coda_leap_second_table_init+0x3b0>
    1518:	add	r6, sp, #36	; 0x24
    151c:	mov	r4, #0
    1520:	mov	r3, r6
    1524:	mov	r1, r9
    1528:	add	r2, sp, #84	; 0x54
    152c:	mov	r0, r5
    1530:	str	r4, [sp, #36]	; 0x24
    1534:	bl	0 <__isoc99_fscanf>
    1538:	ldr	r3, [sp, #36]	; 0x24
    153c:	mov	r1, r8
    1540:	cmp	r3, r4
    1544:	mov	r0, r5
    1548:	ble	1628 <coda_leap_second_table_init+0x194>
    154c:	cmp	r3, #80	; 0x50
    1550:	bne	1604 <coda_leap_second_table_init+0x170>
    1554:	strb	r4, [sp, #164]	; 0xa4
    1558:	bl	0 <__isoc99_fscanf>
    155c:	add	r3, sp, #72	; 0x48
    1560:	add	lr, sp, #64	; 0x40
    1564:	add	ip, sp, #56	; 0x38
    1568:	add	r0, sp, #48	; 0x30
    156c:	add	r1, sp, #44	; 0x2c
    1570:	add	r2, sp, #34	; 0x22
    1574:	str	r3, [sp, #24]
    1578:	add	r3, sp, #33	; 0x21
    157c:	str	r0, [sp, #12]
    1580:	str	r1, [sp, #8]
    1584:	str	r2, [sp, #4]
    1588:	str	r3, [sp]
    158c:	str	r6, [sp, #28]
    1590:	str	lr, [sp, #20]
    1594:	str	ip, [sp, #16]
    1598:	add	r3, sp, #32
    159c:	add	r2, sp, #40	; 0x28
    15a0:	mov	r1, sl
    15a4:	add	r0, sp, #84	; 0x54
    15a8:	bl	0 <__isoc99_sscanf>
    15ac:	cmp	r0, #9
    15b0:	beq	15c0 <coda_leap_second_table_init+0x12c>
    15b4:	ldr	r3, [sp, #36]	; 0x24
    15b8:	cmp	r3, #80	; 0x50
    15bc:	bne	1600 <coda_leap_second_table_init+0x16c>
    15c0:	vldr	d7, [sp, #48]	; 0x30
    15c4:	vcmpe.f64	d7, d8
    15c8:	vmrs	APSR_nzcv, fpscr
    15cc:	ble	151c <coda_leap_second_table_init+0x88>
    15d0:	add	r3, r7, #10
    15d4:	vsub.f64	d7, d7, d10
    15d8:	vmov	s0, r3
    15dc:	add	r7, r7, #1
    15e0:	vcvt.f64.s32	d0, s0
    15e4:	vmla.f64	d0, d7, d9
    15e8:	bl	4b4 <register_leap_second>
    15ec:	cmp	r0, #0
    15f0:	beq	151c <coda_leap_second_table_init+0x88>
    15f4:	mov	r0, r5
    15f8:	bl	0 <fclose>
    15fc:	b	1618 <coda_leap_second_table_init+0x184>
    1600:	mov	r0, r5
    1604:	bl	0 <fclose>
    1608:	mov	r2, fp
    160c:	ldr	r1, [pc, #564]	; 1848 <coda_leap_second_table_init+0x3b4>
    1610:	mvn	r0, #21
    1614:	bl	0 <coda_set_error>
    1618:	mvn	r0, #0
    161c:	add	sp, sp, #188	; 0xbc
    1620:	vpop	{d8-d10}
    1624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1628:	mov	r0, r5
    162c:	bl	0 <fclose>
    1630:	mov	r0, r4
    1634:	add	sp, sp, #188	; 0xbc
    1638:	vpop	{d8-d10}
    163c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1640:	vldr	d0, [pc, #272]	; 1758 <coda_leap_second_table_init+0x2c4>
    1644:	bl	4b4 <register_leap_second>
    1648:	vldr	d0, [pc, #272]	; 1760 <coda_leap_second_table_init+0x2cc>
    164c:	bl	4b4 <register_leap_second>
    1650:	vldr	d0, [pc, #272]	; 1768 <coda_leap_second_table_init+0x2d4>
    1654:	bl	4b4 <register_leap_second>
    1658:	vldr	d0, [pc, #272]	; 1770 <coda_leap_second_table_init+0x2dc>
    165c:	bl	4b4 <register_leap_second>
    1660:	vldr	d0, [pc, #272]	; 1778 <coda_leap_second_table_init+0x2e4>
    1664:	bl	4b4 <register_leap_second>
    1668:	vldr	d0, [pc, #272]	; 1780 <coda_leap_second_table_init+0x2ec>
    166c:	bl	4b4 <register_leap_second>
    1670:	vldr	d0, [pc, #272]	; 1788 <coda_leap_second_table_init+0x2f4>
    1674:	bl	4b4 <register_leap_second>
    1678:	vldr	d0, [pc, #272]	; 1790 <coda_leap_second_table_init+0x2fc>
    167c:	bl	4b4 <register_leap_second>
    1680:	vldr	d0, [pc, #272]	; 1798 <coda_leap_second_table_init+0x304>
    1684:	bl	4b4 <register_leap_second>
    1688:	vldr	d0, [pc, #272]	; 17a0 <coda_leap_second_table_init+0x30c>
    168c:	bl	4b4 <register_leap_second>
    1690:	vldr	d0, [pc, #272]	; 17a8 <coda_leap_second_table_init+0x314>
    1694:	bl	4b4 <register_leap_second>
    1698:	vldr	d0, [pc, #272]	; 17b0 <coda_leap_second_table_init+0x31c>
    169c:	bl	4b4 <register_leap_second>
    16a0:	vldr	d0, [pc, #272]	; 17b8 <coda_leap_second_table_init+0x324>
    16a4:	bl	4b4 <register_leap_second>
    16a8:	vldr	d0, [pc, #272]	; 17c0 <coda_leap_second_table_init+0x32c>
    16ac:	bl	4b4 <register_leap_second>
    16b0:	vldr	d0, [pc, #272]	; 17c8 <coda_leap_second_table_init+0x334>
    16b4:	bl	4b4 <register_leap_second>
    16b8:	vldr	d0, [pc, #272]	; 17d0 <coda_leap_second_table_init+0x33c>
    16bc:	bl	4b4 <register_leap_second>
    16c0:	vldr	d0, [pc, #272]	; 17d8 <coda_leap_second_table_init+0x344>
    16c4:	bl	4b4 <register_leap_second>
    16c8:	vldr	d0, [pc, #272]	; 17e0 <coda_leap_second_table_init+0x34c>
    16cc:	bl	4b4 <register_leap_second>
    16d0:	vldr	d0, [pc, #272]	; 17e8 <coda_leap_second_table_init+0x354>
    16d4:	bl	4b4 <register_leap_second>
    16d8:	vldr	d0, [pc, #272]	; 17f0 <coda_leap_second_table_init+0x35c>
    16dc:	bl	4b4 <register_leap_second>
    16e0:	vldr	d0, [pc, #272]	; 17f8 <coda_leap_second_table_init+0x364>
    16e4:	bl	4b4 <register_leap_second>
    16e8:	vldr	d0, [pc, #272]	; 1800 <coda_leap_second_table_init+0x36c>
    16ec:	bl	4b4 <register_leap_second>
    16f0:	vldr	d0, [pc, #272]	; 1808 <coda_leap_second_table_init+0x374>
    16f4:	bl	4b4 <register_leap_second>
    16f8:	vldr	d0, [pc, #272]	; 1810 <coda_leap_second_table_init+0x37c>
    16fc:	bl	4b4 <register_leap_second>
    1700:	vldr	d0, [pc, #272]	; 1818 <coda_leap_second_table_init+0x384>
    1704:	bl	4b4 <register_leap_second>
    1708:	vldr	d0, [pc, #272]	; 1820 <coda_leap_second_table_init+0x38c>
    170c:	bl	4b4 <register_leap_second>
    1710:	vldr	d0, [pc, #272]	; 1828 <coda_leap_second_table_init+0x394>
    1714:	bl	4b4 <register_leap_second>
    1718:	mov	r0, r4
    171c:	add	sp, sp, #188	; 0xbc
    1720:	vpop	{d8-d10}
    1724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1728:	mov	r2, fp
    172c:	ldr	r1, [pc, #280]	; 184c <coda_leap_second_table_init+0x3b8>
    1730:	mvn	r0, #20
    1734:	bl	0 <coda_set_error>
    1738:	b	1618 <coda_leap_second_table_init+0x184>
    173c:	nop			; (mov r0, r0)
    1740:	.word	0xc0000000
    1744:	.word	0x4142a032
    1748:	.word	0x40000000
    174c:	.word	0x4142b42c
    1750:	.word	0x00000000
    1754:	.word	0x40f51800
    1758:	.word	0xbb000000
    175c:	.word	0xc1c9dd75
    1760:	.word	0xba800000
    1764:	.word	0xc1c9642b
    1768:	.word	0xfa000000
    176c:	.word	0xc1c87391
    1770:	.word	0x39800000
    1774:	.word	0xc1c782f8
    1778:	.word	0x79000000
    177c:	.word	0xc1c6925e
    1780:	.word	0xf8800000
    1784:	.word	0xc1c5a11b
    1788:	.word	0x38000000
    178c:	.word	0xc1c4b082
    1790:	.word	0x77800000
    1794:	.word	0xc1c3bfe8
    1798:	.word	0xb7000000
    179c:	.word	0xc1c2cf4e
    17a0:	.word	0x76800000
    17a4:	.word	0xc1c166bc
    17a8:	.word	0xb6000000
    17ac:	.word	0xc1c07622
    17b0:	.word	0xeb000000
    17b4:	.word	0xc1bf0b11
    17b8:	.word	0x6a000000
    17bc:	.word	0xc1bb4759
    17c0:	.word	0x69000000
    17c4:	.word	0xc1b6925e
    17c8:	.word	0xe8000000
    17cc:	.word	0xc1b2cea5
    17d0:	.word	0x67000000
    17d4:	.word	0xc1b0ed72
    17d8:	.word	0xcc000000
    17dc:	.word	0xc1ac389b
    17e0:	.word	0xca000000
    17e4:	.word	0xc1a87634
    17e8:	.word	0xc8000000
    17ec:	.word	0xc1a4b3cd
    17f0:	.word	0x8c000000
    17f4:	.word	0xc19e187d
    17f8:	.word	0x88000000
    17fc:	.word	0xc192d3eb
    1800:	.word	0x10000000
    1804:	.word	0xc17e1336
    1808:	.word	0x40000000
    180c:	.word	0x41a693b0
    1810:	.word	0x21000000
    1814:	.word	0x41b0eec4
    1818:	.word	0xa2000000
    181c:	.word	0x41b7824f
    1820:	.word	0x23000000
    1824:	.word	0x41bd25ea
    1828:	.word	0x24000000
    182c:	.word	0x41bffb03
    1830:	.word	0x00000000
    1834:	.word	0x000004b4
    1838:	.word	0x000004cc
    183c:	.word	0x000004e4
    1840:	.word	0x00000514
    1844:	.word	0x00000518
    1848:	.word	0x000004f0
    184c:	.word	0x000004d0

00001850 <coda_time_double_to_parts>:
    1850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1854:	vpush	{d8-d11}
    1858:	cmp	r1, #0
    185c:	cmpne	r0, #0
    1860:	sub	sp, sp, #20
    1864:	beq	19ec <coda_time_double_to_parts+0x19c>
    1868:	cmp	r3, #0
    186c:	cmpne	r2, #0
    1870:	mov	r6, r2
    1874:	mov	r5, r3
    1878:	beq	19ec <coda_time_double_to_parts+0x19c>
    187c:	ldr	r3, [sp, #88]	; 0x58
    1880:	ldr	r2, [sp, #92]	; 0x5c
    1884:	cmp	r2, #0
    1888:	cmpne	r3, #0
    188c:	ldr	r2, [sp, #96]	; 0x60
    1890:	moveq	r3, #1
    1894:	movne	r3, #0
    1898:	cmp	r2, #0
    189c:	orreq	r3, r3, #1
    18a0:	cmp	r3, #0
    18a4:	bne	19ec <coda_time_double_to_parts+0x19c>
    18a8:	mov	fp, r0
    18ac:	mov	sl, r1
    18b0:	vmov.f64	d8, d0
    18b4:	bl	0 <coda_isNaN>
    18b8:	cmp	r0, #0
    18bc:	bne	1a14 <coda_time_double_to_parts+0x1c4>
    18c0:	vmov.f64	d0, d8
    18c4:	bl	0 <coda_isInf>
    18c8:	cmp	r0, #0
    18cc:	bne	1a28 <coda_time_double_to_parts+0x1d8>
    18d0:	vldr	d0, [pc, #368]	; 1a48 <coda_time_double_to_parts+0x1f8>
    18d4:	vldr	d11, [pc, #372]	; 1a50 <coda_time_double_to_parts+0x200>
    18d8:	vadd.f64	d8, d8, d0
    18dc:	vmov.f64	d0, d8
    18e0:	bl	0 <floor>
    18e4:	vmov.f64	d10, d0
    18e8:	vdiv.f64	d0, d10, d11
    18ec:	bl	0 <floor>
    18f0:	add	r3, sp, #12
    18f4:	add	r2, sp, #8
    18f8:	add	r1, sp, #4
    18fc:	vcvt.s32.f64	s18, d0
    1900:	vmov	r0, s18
    1904:	bl	858 <mjd2000_to_dmy>
    1908:	subs	r7, r0, #0
    190c:	bne	1a3c <coda_time_double_to_parts+0x1ec>
    1910:	vcvt.f64.s32	d9, s18
    1914:	vmov.f64	d7, d10
    1918:	ldr	r3, [pc, #320]	; 1a60 <coda_time_double_to_parts+0x210>
    191c:	vmls.f64	d7, d9, d11
    1920:	vcvt.s32.f64	s15, d7
    1924:	vmov	r2, s15
    1928:	cmp	r2, r3
    192c:	bhi	19cc <coda_time_double_to_parts+0x17c>
    1930:	ldr	r4, [pc, #300]	; 1a64 <coda_time_double_to_parts+0x214>
    1934:	vsub.f64	d8, d8, d10
    1938:	asr	r9, r2, #31
    193c:	smull	r3, r4, r4, r2
    1940:	vldr	d0, [pc, #272]	; 1a58 <coda_time_double_to_parts+0x208>
    1944:	add	r4, r4, r2
    1948:	mov	ip, #3600	; 0xe10
    194c:	asr	r4, r4, #11
    1950:	sub	r8, r4, r9
    1954:	vmul.f64	d0, d8, d0
    1958:	mul	r3, ip, r8
    195c:	sub	r4, r4, r9
    1960:	sub	r8, r2, r3
    1964:	bl	0 <floor>
    1968:	ldr	ip, [pc, #248]	; 1a68 <coda_time_double_to_parts+0x218>
    196c:	ldr	r1, [sp, #12]
    1970:	asr	r2, r8, #31
    1974:	smull	r3, ip, ip, r8
    1978:	str	r1, [fp]
    197c:	add	ip, ip, r8
    1980:	ldr	r1, [sp, #4]
    1984:	rsb	r2, r2, ip, asr #5
    1988:	ldr	ip, [sp, #8]
    198c:	rsb	lr, r2, r2, lsl #4
    1990:	str	ip, [sl]
    1994:	str	r1, [r6]
    1998:	ldr	r1, [sp, #88]	; 0x58
    199c:	str	r4, [r5]
    19a0:	sub	r3, r8, lr, lsl #2
    19a4:	str	r2, [r1]
    19a8:	ldr	r2, [sp, #92]	; 0x5c
    19ac:	str	r3, [r2]
    19b0:	ldr	r3, [sp, #96]	; 0x60
    19b4:	vcvt.s32.f64	s0, d0
    19b8:	vstr	s0, [r3]
    19bc:	mov	r0, r7
    19c0:	add	sp, sp, #20
    19c4:	vpop	{d8-d11}
    19c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19cc:	ldr	r1, [pc, #152]	; 1a6c <coda_time_double_to_parts+0x21c>
    19d0:	mvn	r0, #103	; 0x67
    19d4:	bl	0 <coda_set_error>
    19d8:	mvn	r7, #0
    19dc:	mov	r0, r7
    19e0:	add	sp, sp, #20
    19e4:	vpop	{d8-d11}
    19e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19ec:	ldr	r3, [pc, #124]	; 1a70 <coda_time_double_to_parts+0x220>
    19f0:	ldr	r2, [pc, #124]	; 1a74 <coda_time_double_to_parts+0x224>
    19f4:	ldr	r1, [pc, #124]	; 1a78 <coda_time_double_to_parts+0x228>
    19f8:	mvn	r0, #99	; 0x63
    19fc:	bl	0 <coda_set_error>
    1a00:	mvn	r7, #0
    1a04:	mov	r0, r7
    1a08:	add	sp, sp, #20
    1a0c:	vpop	{d8-d11}
    1a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a14:	ldr	r1, [pc, #96]	; 1a7c <coda_time_double_to_parts+0x22c>
    1a18:	mvn	r0, #103	; 0x67
    1a1c:	bl	0 <coda_set_error>
    1a20:	mvn	r7, #0
    1a24:	b	19bc <coda_time_double_to_parts+0x16c>
    1a28:	ldr	r1, [pc, #80]	; 1a80 <coda_time_double_to_parts+0x230>
    1a2c:	mvn	r0, #103	; 0x67
    1a30:	bl	0 <coda_set_error>
    1a34:	mvn	r7, #0
    1a38:	b	19bc <coda_time_double_to_parts+0x16c>
    1a3c:	mvn	r7, #0
    1a40:	b	19bc <coda_time_double_to_parts+0x16c>
    1a44:	nop			; (mov r0, r0)
    1a48:	.word	0xa0b5ed8d
    1a4c:	.word	0x3ea0c6f7
    1a50:	.word	0x00000000
    1a54:	.word	0x40f51800
    1a58:	.word	0x00000000
    1a5c:	.word	0x412e8480
    1a60:	.word	0x0001517f
    1a64:	.word	0x91a2b3c5
    1a68:	.word	0x88888889
    1a6c:	.word	0x00000598
    1a70:	.word	0x00000313
    1a74:	.word	0x0000002c
    1a78:	.word	0x00000154
    1a7c:	.word	0x0000055c
    1a80:	.word	0x00000578

00001a84 <coda_time_double_to_parts_utc>:
    1a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a88:	vpush	{d8-d11}
    1a8c:	cmp	r1, #0
    1a90:	cmpne	r0, #0
    1a94:	sub	sp, sp, #28
    1a98:	beq	1ca8 <coda_time_double_to_parts_utc+0x224>
    1a9c:	cmp	r3, #0
    1aa0:	cmpne	r2, #0
    1aa4:	mov	r6, r2
    1aa8:	mov	r5, r3
    1aac:	beq	1ca8 <coda_time_double_to_parts_utc+0x224>
    1ab0:	ldr	r3, [sp, #96]	; 0x60
    1ab4:	ldr	r2, [sp, #100]	; 0x64
    1ab8:	cmp	r2, #0
    1abc:	cmpne	r3, #0
    1ac0:	ldr	r2, [sp, #104]	; 0x68
    1ac4:	moveq	r3, #1
    1ac8:	movne	r3, #0
    1acc:	cmp	r2, #0
    1ad0:	orreq	r3, r3, #1
    1ad4:	cmp	r3, #0
    1ad8:	bne	1ca8 <coda_time_double_to_parts_utc+0x224>
    1adc:	mov	fp, r0
    1ae0:	mov	sl, r1
    1ae4:	vmov.f64	d8, d0
    1ae8:	bl	0 <coda_isNaN>
    1aec:	cmp	r0, #0
    1af0:	bne	1cd0 <coda_time_double_to_parts_utc+0x24c>
    1af4:	vmov.f64	d0, d8
    1af8:	bl	0 <coda_isInf>
    1afc:	subs	r4, r0, #0
    1b00:	bne	1cec <coda_time_double_to_parts_utc+0x268>
    1b04:	vldr	d9, [pc, #524]	; 1d18 <coda_time_double_to_parts_utc+0x294>
    1b08:	vadd.f64	d9, d8, d9
    1b0c:	vmov.f64	d0, d9
    1b10:	bl	0 <floor>
    1b14:	ldr	r3, [pc, #540]	; 1d38 <coda_time_double_to_parts_utc+0x2b4>
    1b18:	bl	0 <__aeabi_read_tp>
    1b1c:	add	r2, r0, r3
    1b20:	ldr	r1, [r2, #4]
    1b24:	cmp	r1, #0
    1b28:	beq	1d00 <coda_time_double_to_parts_utc+0x27c>
    1b2c:	ldr	r2, [r0, r3]
    1b30:	cmp	r2, #0
    1b34:	movgt	r3, r1
    1b38:	ble	1d00 <coda_time_double_to_parts_utc+0x27c>
    1b3c:	vldmia	r3!, {d6}
    1b40:	vcmpe.f64	d0, d6
    1b44:	vmrs	APSR_nzcv, fpscr
    1b48:	ble	1b60 <coda_time_double_to_parts_utc+0xdc>
    1b4c:	add	r4, r4, #1
    1b50:	cmp	r2, r4
    1b54:	bne	1b3c <coda_time_double_to_parts_utc+0xb8>
    1b58:	add	r1, r1, r4, lsl #3
    1b5c:	vldr	d6, [r1]
    1b60:	vsub.f64	d6, d0, d6
    1b64:	vldr	d7, [pc, #436]	; 1d20 <coda_time_double_to_parts_utc+0x29c>
    1b68:	add	r3, r4, #10
    1b6c:	vldr	d11, [pc, #436]	; 1d28 <coda_time_double_to_parts_utc+0x2a4>
    1b70:	vabs.f64	d6, d6
    1b74:	vcmpe.f64	d6, d7
    1b78:	vmrs	APSR_nzcv, fpscr
    1b7c:	movmi	r4, #1
    1b80:	movpl	r4, #0
    1b84:	add	r3, r3, r4
    1b88:	vmov	s15, r3
    1b8c:	vcvt.f64.s32	d7, s15
    1b90:	vsub.f64	d8, d0, d7
    1b94:	vsub.f64	d9, d9, d7
    1b98:	vdiv.f64	d0, d8, d11
    1b9c:	bl	0 <floor>
    1ba0:	add	r3, sp, #20
    1ba4:	add	r2, sp, #16
    1ba8:	add	r1, sp, #12
    1bac:	vcvt.s32.f64	s20, d0
    1bb0:	vmov	r0, s20
    1bb4:	bl	858 <mjd2000_to_dmy>
    1bb8:	subs	r7, r0, #0
    1bbc:	bne	1ce4 <coda_time_double_to_parts_utc+0x260>
    1bc0:	vcvt.f64.s32	d10, s20
    1bc4:	vmov.f64	d7, d8
    1bc8:	ldr	r3, [pc, #364]	; 1d3c <coda_time_double_to_parts_utc+0x2b8>
    1bcc:	vmls.f64	d7, d10, d11
    1bd0:	vcvt.s32.f64	s15, d7
    1bd4:	vmov	r2, s15
    1bd8:	cmp	r2, r3
    1bdc:	bhi	1c88 <coda_time_double_to_parts_utc+0x204>
    1be0:	ldr	r1, [pc, #344]	; 1d40 <coda_time_double_to_parts_utc+0x2bc>
    1be4:	vsub.f64	d9, d9, d8
    1be8:	asr	r9, r2, #31
    1bec:	smull	r3, r1, r1, r2
    1bf0:	vldr	d0, [pc, #312]	; 1d30 <coda_time_double_to_parts_utc+0x2ac>
    1bf4:	add	r1, r1, r2
    1bf8:	mov	lr, #3600	; 0xe10
    1bfc:	asr	r1, r1, #11
    1c00:	sub	r8, r1, r9
    1c04:	vmul.f64	d0, d9, d0
    1c08:	mul	r3, lr, r8
    1c0c:	str	r1, [sp, #4]
    1c10:	sub	r8, r2, r3
    1c14:	bl	0 <floor>
    1c18:	ldr	ip, [pc, #292]	; 1d44 <coda_time_double_to_parts_utc+0x2c0>
    1c1c:	asr	lr, r8, #31
    1c20:	ldr	r2, [sp, #20]
    1c24:	smull	r3, ip, ip, r8
    1c28:	str	r2, [fp]
    1c2c:	add	ip, ip, r8
    1c30:	ldr	r1, [sp, #4]
    1c34:	rsb	lr, lr, ip, asr #5
    1c38:	ldr	r2, [sp, #12]
    1c3c:	rsb	fp, lr, lr, lsl #4
    1c40:	ldr	ip, [sp, #16]
    1c44:	sub	r3, r8, fp, lsl #2
    1c48:	add	r4, r3, r4
    1c4c:	ldr	r3, [sp, #96]	; 0x60
    1c50:	sub	r1, r1, r9
    1c54:	str	ip, [sl]
    1c58:	str	r2, [r6]
    1c5c:	str	r1, [r5]
    1c60:	str	lr, [r3]
    1c64:	ldr	r3, [sp, #100]	; 0x64
    1c68:	str	r4, [r3]
    1c6c:	ldr	r3, [sp, #104]	; 0x68
    1c70:	vcvt.s32.f64	s0, d0
    1c74:	vstr	s0, [r3]
    1c78:	mov	r0, r7
    1c7c:	add	sp, sp, #28
    1c80:	vpop	{d8-d11}
    1c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c88:	ldr	r1, [pc, #184]	; 1d48 <coda_time_double_to_parts_utc+0x2c4>
    1c8c:	mvn	r0, #103	; 0x67
    1c90:	bl	0 <coda_set_error>
    1c94:	mvn	r7, #0
    1c98:	mov	r0, r7
    1c9c:	add	sp, sp, #28
    1ca0:	vpop	{d8-d11}
    1ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ca8:	ldr	r3, [pc, #156]	; 1d4c <coda_time_double_to_parts_utc+0x2c8>
    1cac:	ldr	r2, [pc, #156]	; 1d50 <coda_time_double_to_parts_utc+0x2cc>
    1cb0:	ldr	r1, [pc, #156]	; 1d54 <coda_time_double_to_parts_utc+0x2d0>
    1cb4:	mvn	r0, #99	; 0x63
    1cb8:	bl	0 <coda_set_error>
    1cbc:	mvn	r7, #0
    1cc0:	mov	r0, r7
    1cc4:	add	sp, sp, #28
    1cc8:	vpop	{d8-d11}
    1ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cd0:	ldr	r1, [pc, #128]	; 1d58 <coda_time_double_to_parts_utc+0x2d4>
    1cd4:	mvn	r0, #103	; 0x67
    1cd8:	bl	0 <coda_set_error>
    1cdc:	mvn	r7, #0
    1ce0:	b	1c78 <coda_time_double_to_parts_utc+0x1f4>
    1ce4:	mvn	r7, #0
    1ce8:	b	1c78 <coda_time_double_to_parts_utc+0x1f4>
    1cec:	ldr	r1, [pc, #104]	; 1d5c <coda_time_double_to_parts_utc+0x2d8>
    1cf0:	mvn	r0, #103	; 0x67
    1cf4:	bl	0 <coda_set_error>
    1cf8:	mvn	r7, #0
    1cfc:	b	1c78 <coda_time_double_to_parts_utc+0x1f4>
    1d00:	ldr	r3, [pc, #88]	; 1d60 <coda_time_double_to_parts_utc+0x2dc>
    1d04:	ldr	r2, [pc, #88]	; 1d64 <coda_time_double_to_parts_utc+0x2e0>
    1d08:	ldr	r1, [pc, #64]	; 1d50 <coda_time_double_to_parts_utc+0x2cc>
    1d0c:	ldr	r0, [pc, #84]	; 1d68 <coda_time_double_to_parts_utc+0x2e4>
    1d10:	bl	0 <__assert_fail>
    1d14:	nop			; (mov r0, r0)
    1d18:	.word	0xa0b5ed8d
    1d1c:	.word	0x3ea0c6f7
    1d20:	.word	0x9999999a
    1d24:	.word	0x3fb99999
    1d28:	.word	0x00000000
    1d2c:	.word	0x40f51800
    1d30:	.word	0x00000000
    1d34:	.word	0x412e8480
    1d38:	.word	0x00000000
    1d3c:	.word	0x0001517f
    1d40:	.word	0x91a2b3c5
    1d44:	.word	0x88888889
    1d48:	.word	0x00000598
    1d4c:	.word	0x0000036a
    1d50:	.word	0x0000002c
    1d54:	.word	0x00000154
    1d58:	.word	0x0000055c
    1d5c:	.word	0x00000578
    1d60:	.word	0x0000008c
    1d64:	.word	0x0000037e
    1d68:	.word	0x000005d0

00001d6c <coda_time_parts_to_double>:
    1d6c:	push	{r4, r5, lr}
    1d70:	sub	sp, sp, #28
    1d74:	ldr	r4, [sp, #52]	; 0x34
    1d78:	cmp	r4, #0
    1d7c:	beq	1dec <coda_time_parts_to_double+0x80>
    1d80:	mov	ip, r2
    1d84:	mov	r5, r3
    1d88:	mov	r2, r0
    1d8c:	add	r3, sp, #12
    1d90:	mov	r0, ip
    1d94:	bl	21c <dmy_to_mjd2000>
    1d98:	cmp	r0, #0
    1d9c:	bne	1de0 <coda_time_parts_to_double+0x74>
    1da0:	add	r1, sp, #40	; 0x28
    1da4:	add	r3, sp, #16
    1da8:	str	r3, [sp]
    1dac:	mov	r0, r5
    1db0:	ldm	r1, {r1, r2, r3}
    1db4:	bl	5c8 <hms_to_daytime>
    1db8:	cmp	r0, #0
    1dbc:	bne	1de0 <coda_time_parts_to_double+0x74>
    1dc0:	vldr	s13, [sp, #12]
    1dc4:	vldr	d5, [pc, #60]	; 1e08 <coda_time_parts_to_double+0x9c>
    1dc8:	vldr	d7, [sp, #16]
    1dcc:	vcvt.f64.s32	d6, s13
    1dd0:	vmla.f64	d7, d6, d5
    1dd4:	vstr	d7, [r4]
    1dd8:	add	sp, sp, #28
    1ddc:	pop	{r4, r5, pc}
    1de0:	mvn	r0, #0
    1de4:	add	sp, sp, #28
    1de8:	pop	{r4, r5, pc}
    1dec:	mvn	r0, #99	; 0x63
    1df0:	ldr	r3, [pc, #24]	; 1e10 <coda_time_parts_to_double+0xa4>
    1df4:	ldr	r2, [pc, #24]	; 1e14 <coda_time_parts_to_double+0xa8>
    1df8:	ldr	r1, [pc, #24]	; 1e18 <coda_time_parts_to_double+0xac>
    1dfc:	bl	0 <coda_set_error>
    1e00:	mvn	r0, #0
    1e04:	b	1dd8 <coda_time_parts_to_double+0x6c>
    1e08:	.word	0x00000000
    1e0c:	.word	0x40f51800
    1e10:	.word	0x000003ba
    1e14:	.word	0x0000002c
    1e18:	.word	0x00000604

00001e1c <coda_time_parts_to_double_utc>:
    1e1c:	push	{r4, r5, lr}
    1e20:	sub	sp, sp, #28
    1e24:	ldr	r5, [sp, #52]	; 0x34
    1e28:	cmp	r5, #0
    1e2c:	beq	1ef8 <coda_time_parts_to_double_utc+0xdc>
    1e30:	mov	ip, r0
    1e34:	mov	r4, r3
    1e38:	mov	r0, r2
    1e3c:	add	r3, sp, #12
    1e40:	mov	r2, ip
    1e44:	bl	21c <dmy_to_mjd2000>
    1e48:	cmp	r0, #0
    1e4c:	bne	1ee8 <coda_time_parts_to_double_utc+0xcc>
    1e50:	add	r1, sp, #40	; 0x28
    1e54:	add	r3, sp, #16
    1e58:	mov	r0, r4
    1e5c:	str	r3, [sp]
    1e60:	ldm	r1, {r1, r2, r3}
    1e64:	bl	5c8 <hms_to_daytime>
    1e68:	subs	r4, r0, #0
    1e6c:	bne	1ee8 <coda_time_parts_to_double_utc+0xcc>
    1e70:	vldr	s15, [sp, #12]
    1e74:	ldr	r3, [pc, #196]	; 1f40 <coda_time_parts_to_double_utc+0x124>
    1e78:	bl	0 <__aeabi_read_tp>
    1e7c:	add	r2, r0, r3
    1e80:	vcvt.f64.s32	d6, s15
    1e84:	vldr	d5, [pc, #156]	; 1f28 <coda_time_parts_to_double_utc+0x10c>
    1e88:	vldr	d7, [pc, #160]	; 1f30 <coda_time_parts_to_double_utc+0x114>
    1e8c:	ldr	r2, [r2, #4]
    1e90:	cmp	r2, #0
    1e94:	vmla.f64	d7, d6, d5
    1e98:	beq	1f14 <coda_time_parts_to_double_utc+0xf8>
    1e9c:	ldr	r1, [r0, r3]
    1ea0:	cmp	r1, #0
    1ea4:	ble	1f14 <coda_time_parts_to_double_utc+0xf8>
    1ea8:	vldr	d5, [pc, #136]	; 1f38 <coda_time_parts_to_double_utc+0x11c>
    1eac:	mov	r3, r4
    1eb0:	vldmia	r2!, {d6}
    1eb4:	vcmpe.f64	d6, d7
    1eb8:	vmrs	APSR_nzcv, fpscr
    1ebc:	bhi	1ed0 <coda_time_parts_to_double_utc+0xb4>
    1ec0:	add	r3, r3, #1
    1ec4:	cmp	r1, r3
    1ec8:	vadd.f64	d7, d7, d5
    1ecc:	bne	1eb0 <coda_time_parts_to_double_utc+0x94>
    1ed0:	vldr	d6, [sp, #16]
    1ed4:	vadd.f64	d7, d6, d7
    1ed8:	vstr	d7, [r5]
    1edc:	mov	r0, r4
    1ee0:	add	sp, sp, #28
    1ee4:	pop	{r4, r5, pc}
    1ee8:	mvn	r4, #0
    1eec:	mov	r0, r4
    1ef0:	add	sp, sp, #28
    1ef4:	pop	{r4, r5, pc}
    1ef8:	mov	r3, #1008	; 0x3f0
    1efc:	ldr	r2, [pc, #64]	; 1f44 <coda_time_parts_to_double_utc+0x128>
    1f00:	ldr	r1, [pc, #64]	; 1f48 <coda_time_parts_to_double_utc+0x12c>
    1f04:	mvn	r0, #99	; 0x63
    1f08:	bl	0 <coda_set_error>
    1f0c:	mvn	r4, #0
    1f10:	b	1edc <coda_time_parts_to_double_utc+0xc0>
    1f14:	ldr	r3, [pc, #48]	; 1f4c <coda_time_parts_to_double_utc+0x130>
    1f18:	mov	r2, #1024	; 0x400
    1f1c:	ldr	r1, [pc, #32]	; 1f44 <coda_time_parts_to_double_utc+0x128>
    1f20:	ldr	r0, [pc, #40]	; 1f50 <coda_time_parts_to_double_utc+0x134>
    1f24:	bl	0 <__assert_fail>
    1f28:	.word	0x00000000
    1f2c:	.word	0x40f51800
    1f30:	.word	0x00000000
    1f34:	.word	0x40240000
    1f38:	.word	0x00000000
    1f3c:	.word	0x3ff00000
    1f40:	.word	0x00000000
    1f44:	.word	0x0000002c
    1f48:	.word	0x00000604
    1f4c:	.word	0x000000ac
    1f50:	.word	0x000005d0

00001f54 <coda_time_parts_to_string>:
    1f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f58:	sub	sp, sp, #76	; 0x4c
    1f5c:	ldr	lr, [pc, #1276]	; 2460 <coda_time_parts_to_string+0x50c>
    1f60:	str	r0, [sp, #12]
    1f64:	stm	sp, {r1, r2, r3}
    1f68:	add	ip, sp, #24
    1f6c:	ldm	lr!, {r0, r1, r2, r3}
    1f70:	ldr	r7, [sp, #124]	; 0x7c
    1f74:	ldr	sl, [sp, #128]	; 0x80
    1f78:	stmia	ip!, {r0, r1, r2, r3}
    1f7c:	cmp	r7, #0
    1f80:	ldm	lr!, {r0, r1, r2, r3}
    1f84:	stmia	ip!, {r0, r1, r2, r3}
    1f88:	ldm	lr, {r0, r1, r2, r3}
    1f8c:	stm	ip, {r0, r1, r2, r3}
    1f90:	beq	22e8 <coda_time_parts_to_string+0x394>
    1f94:	cmp	sl, #0
    1f98:	beq	2304 <coda_time_parts_to_string+0x3b0>
    1f9c:	ldrb	r3, [r7]
    1fa0:	cmp	r3, #0
    1fa4:	beq	2048 <coda_time_parts_to_string+0xf4>
    1fa8:	mov	r5, #0
    1fac:	ldr	fp, [pc, #1200]	; 2464 <coda_time_parts_to_string+0x510>
    1fb0:	mov	r4, r5
    1fb4:	mov	r2, r5
    1fb8:	cmp	r2, #0
    1fbc:	beq	203c <coda_time_parts_to_string+0xe8>
    1fc0:	mov	r1, r2
    1fc4:	add	r2, sl, r5
    1fc8:	cmp	r3, #39	; 0x27
    1fcc:	sub	r6, r2, sl
    1fd0:	mov	r5, r6
    1fd4:	ldrbne	r3, [r7, r4]
    1fd8:	beq	20b4 <coda_time_parts_to_string+0x160>
    1fdc:	cmp	r1, #0
    1fe0:	beq	2054 <coda_time_parts_to_string+0x100>
    1fe4:	add	r4, r4, #1
    1fe8:	strb	r3, [r2], #1
    1fec:	ldrb	r3, [r7, r4]
    1ff0:	cmp	r3, #0
    1ff4:	bne	1fc8 <coda_time_parts_to_string+0x74>
    1ff8:	mov	r2, r7
    1ffc:	ldr	r1, [pc, #1124]	; 2468 <coda_time_parts_to_string+0x514>
    2000:	mvn	r0, #102	; 0x66
    2004:	bl	0 <coda_set_error>
    2008:	mvn	r0, #0
    200c:	add	sp, sp, #76	; 0x4c
    2010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2014:	ldr	r3, [sp, #120]	; 0x78
    2018:	mov	r2, r5
    201c:	ldr	r1, [pc, #1096]	; 246c <coda_time_parts_to_string+0x518>
    2020:	add	r0, sl, r6
    2024:	bl	0 <sprintf>
    2028:	ldrb	r3, [r9]
    202c:	add	r5, r6, r5
    2030:	cmp	r3, #0
    2034:	beq	2048 <coda_time_parts_to_string+0xf4>
    2038:	mov	r4, r8
    203c:	cmp	r3, #124	; 0x7c
    2040:	mov	r1, #0
    2044:	bne	1fc4 <coda_time_parts_to_string+0x70>
    2048:	mov	r0, #0
    204c:	add	sp, sp, #76	; 0x4c
    2050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2054:	cmp	r3, #121	; 0x79
    2058:	beq	20dc <coda_time_parts_to_string+0x188>
    205c:	cmp	r3, #77	; 0x4d
    2060:	beq	2104 <coda_time_parts_to_string+0x1b0>
    2064:	cmp	r3, #100	; 0x64
    2068:	bne	2164 <coda_time_parts_to_string+0x210>
    206c:	add	r2, r7, r4
    2070:	ldrb	r2, [r2, #1]
    2074:	cmp	r2, #100	; 0x64
    2078:	beq	2254 <coda_time_parts_to_string+0x300>
    207c:	bic	r2, r3, #32
    2080:	sub	r2, r2, #65	; 0x41
    2084:	cmp	r2, #25
    2088:	bls	20ec <coda_time_parts_to_string+0x198>
    208c:	add	r4, r4, #1
    2090:	strb	r3, [sl, r6]
    2094:	ldrb	r3, [r7, r4]
    2098:	add	r5, r6, #1
    209c:	cmp	r3, #0
    20a0:	beq	2048 <coda_time_parts_to_string+0xf4>
    20a4:	cmp	r3, #124	; 0x7c
    20a8:	mov	r1, #0
    20ac:	bne	1fc4 <coda_time_parts_to_string+0x70>
    20b0:	b	2048 <coda_time_parts_to_string+0xf4>
    20b4:	add	r4, r4, #1
    20b8:	ldrb	r3, [r7, r4]
    20bc:	cmp	r3, #39	; 0x27
    20c0:	beq	1fdc <coda_time_parts_to_string+0x88>
    20c4:	cmp	r3, #0
    20c8:	eor	r2, r1, #1
    20cc:	bne	1fb8 <coda_time_parts_to_string+0x64>
    20d0:	cmp	r1, #1
    20d4:	beq	2048 <coda_time_parts_to_string+0xf4>
    20d8:	b	1ff8 <coda_time_parts_to_string+0xa4>
    20dc:	add	r3, r7, r4
    20e0:	ldrb	r2, [r3, #1]
    20e4:	cmp	r2, #121	; 0x79
    20e8:	beq	2204 <coda_time_parts_to_string+0x2b0>
    20ec:	mvn	r0, #102	; 0x66
    20f0:	mov	r2, r7
    20f4:	ldr	r1, [pc, #884]	; 2470 <coda_time_parts_to_string+0x51c>
    20f8:	bl	0 <coda_set_error>
    20fc:	mvn	r0, #0
    2100:	b	204c <coda_time_parts_to_string+0xf8>
    2104:	add	r2, r7, r4
    2108:	ldrb	r1, [r2, #1]
    210c:	cmp	r1, #77	; 0x4d
    2110:	bne	207c <coda_time_parts_to_string+0x128>
    2114:	ldr	r3, [sp]
    2118:	sub	r3, r3, #1
    211c:	cmp	r3, #11
    2120:	bhi	22d4 <coda_time_parts_to_string+0x380>
    2124:	ldrb	r3, [r2, #2]
    2128:	cmp	r3, #77	; 0x4d
    212c:	beq	2270 <coda_time_parts_to_string+0x31c>
    2130:	ldr	r2, [sp]
    2134:	add	r4, r4, #2
    2138:	ldr	r1, [pc, #820]	; 2474 <coda_time_parts_to_string+0x520>
    213c:	add	r0, sl, r6
    2140:	bl	0 <sprintf>
    2144:	ldrb	r3, [r7, r4]
    2148:	add	r5, r6, #2
    214c:	cmp	r3, #0
    2150:	beq	2048 <coda_time_parts_to_string+0xf4>
    2154:	cmp	r3, #124	; 0x7c
    2158:	mov	r1, #0
    215c:	bne	1fc4 <coda_time_parts_to_string+0x70>
    2160:	b	2048 <coda_time_parts_to_string+0xf4>
    2164:	cmp	r3, #68	; 0x44
    2168:	bne	2334 <coda_time_parts_to_string+0x3e0>
    216c:	add	r2, r7, r4
    2170:	ldrb	r1, [r2, #1]
    2174:	cmp	r1, #68	; 0x44
    2178:	bne	207c <coda_time_parts_to_string+0x128>
    217c:	ldrb	r2, [r2, #2]
    2180:	cmp	r2, #68	; 0x44
    2184:	bne	207c <coda_time_parts_to_string+0x128>
    2188:	ldr	r5, [sp, #12]
    218c:	add	r3, sp, #16
    2190:	mov	r2, r5
    2194:	ldr	r1, [sp]
    2198:	ldr	r0, [sp, #4]
    219c:	bl	21c <dmy_to_mjd2000>
    21a0:	cmp	r0, #0
    21a4:	bne	22b8 <coda_time_parts_to_string+0x364>
    21a8:	mov	r1, #1
    21ac:	mov	r0, r1
    21b0:	add	r3, sp, #20
    21b4:	mov	r2, r5
    21b8:	bl	21c <dmy_to_mjd2000>
    21bc:	cmp	r0, #0
    21c0:	bne	22b8 <coda_time_parts_to_string+0x364>
    21c4:	ldr	r3, [sp, #20]
    21c8:	ldr	r2, [sp, #16]
    21cc:	add	r4, r4, #3
    21d0:	sub	r2, r2, r3
    21d4:	add	r2, r2, #1
    21d8:	ldr	r1, [pc, #664]	; 2478 <coda_time_parts_to_string+0x524>
    21dc:	add	r0, sl, r6
    21e0:	bl	0 <sprintf>
    21e4:	ldrb	r3, [r7, r4]
    21e8:	add	r5, r6, #3
    21ec:	cmp	r3, #0
    21f0:	beq	2048 <coda_time_parts_to_string+0xf4>
    21f4:	cmp	r3, #124	; 0x7c
    21f8:	mov	r1, #0
    21fc:	bne	1fc4 <coda_time_parts_to_string+0x70>
    2200:	b	2048 <coda_time_parts_to_string+0xf4>
    2204:	ldrb	r2, [r3, #2]
    2208:	cmp	r2, #121	; 0x79
    220c:	bne	20ec <coda_time_parts_to_string+0x198>
    2210:	ldrb	r3, [r3, #3]
    2214:	cmp	r3, #121	; 0x79
    2218:	bne	20ec <coda_time_parts_to_string+0x198>
    221c:	ldr	r3, [pc, #600]	; 247c <coda_time_parts_to_string+0x528>
    2220:	ldr	r2, [sp, #12]
    2224:	cmp	r2, r3
    2228:	bhi	2320 <coda_time_parts_to_string+0x3cc>
    222c:	add	r4, r4, #4
    2230:	ldr	r2, [sp, #12]
    2234:	ldr	r1, [pc, #580]	; 2480 <coda_time_parts_to_string+0x52c>
    2238:	add	r0, sl, r6
    223c:	bl	0 <sprintf>
    2240:	ldrb	r3, [r7, r4]
    2244:	add	r5, r6, #4
    2248:	cmp	r3, #0
    224c:	bne	203c <coda_time_parts_to_string+0xe8>
    2250:	b	2048 <coda_time_parts_to_string+0xf4>
    2254:	ldr	r3, [sp, #4]
    2258:	sub	r3, r3, #1
    225c:	cmp	r3, #30
    2260:	bhi	22c0 <coda_time_parts_to_string+0x36c>
    2264:	add	r4, r4, #2
    2268:	ldr	r2, [sp, #4]
    226c:	b	2138 <coda_time_parts_to_string+0x1e4>
    2270:	ldr	r2, [sp]
    2274:	add	r3, sp, #72	; 0x48
    2278:	add	r4, r4, #3
    227c:	add	r3, r3, r2, lsl #2
    2280:	add	r0, sl, r6
    2284:	ldr	r1, [r3, #-48]	; 0xffffffd0
    2288:	bl	0 <strcpy>
    228c:	ldrb	r3, [r7, r4]
    2290:	add	r5, r6, #3
    2294:	cmp	r3, #0
    2298:	beq	2048 <coda_time_parts_to_string+0xf4>
    229c:	cmp	r3, #124	; 0x7c
    22a0:	mov	r1, #0
    22a4:	bne	1fc4 <coda_time_parts_to_string+0x70>
    22a8:	b	2048 <coda_time_parts_to_string+0xf4>
    22ac:	ldr	r1, [pc, #464]	; 2484 <coda_time_parts_to_string+0x530>
    22b0:	mvn	r0, #103	; 0x67
    22b4:	bl	0 <coda_set_error>
    22b8:	mvn	r0, #0
    22bc:	b	204c <coda_time_parts_to_string+0xf8>
    22c0:	mvn	r0, #103	; 0x67
    22c4:	ldr	r1, [pc, #444]	; 2488 <coda_time_parts_to_string+0x534>
    22c8:	bl	0 <coda_set_error>
    22cc:	mvn	r0, #0
    22d0:	b	204c <coda_time_parts_to_string+0xf8>
    22d4:	mvn	r0, #103	; 0x67
    22d8:	ldr	r1, [pc, #428]	; 248c <coda_time_parts_to_string+0x538>
    22dc:	bl	0 <coda_set_error>
    22e0:	mvn	r0, #0
    22e4:	b	204c <coda_time_parts_to_string+0xf8>
    22e8:	mvn	r0, #99	; 0x63
    22ec:	ldr	r3, [pc, #412]	; 2490 <coda_time_parts_to_string+0x53c>
    22f0:	ldr	r2, [pc, #412]	; 2494 <coda_time_parts_to_string+0x540>
    22f4:	ldr	r1, [pc, #412]	; 2498 <coda_time_parts_to_string+0x544>
    22f8:	bl	0 <coda_set_error>
    22fc:	mvn	r0, #0
    2300:	b	204c <coda_time_parts_to_string+0xf8>
    2304:	mvn	r0, #99	; 0x63
    2308:	ldr	r3, [pc, #396]	; 249c <coda_time_parts_to_string+0x548>
    230c:	ldr	r2, [pc, #384]	; 2494 <coda_time_parts_to_string+0x540>
    2310:	ldr	r1, [pc, #392]	; 24a0 <coda_time_parts_to_string+0x54c>
    2314:	bl	0 <coda_set_error>
    2318:	mvn	r0, #0
    231c:	b	204c <coda_time_parts_to_string+0xf8>
    2320:	mvn	r0, #103	; 0x67
    2324:	ldr	r1, [pc, #376]	; 24a4 <coda_time_parts_to_string+0x550>
    2328:	bl	0 <coda_set_error>
    232c:	mvn	r0, #0
    2330:	b	204c <coda_time_parts_to_string+0xf8>
    2334:	cmp	r3, #72	; 0x48
    2338:	bne	2374 <coda_time_parts_to_string+0x420>
    233c:	add	r2, r7, r4
    2340:	ldrb	r2, [r2, #1]
    2344:	cmp	r2, #72	; 0x48
    2348:	bne	207c <coda_time_parts_to_string+0x128>
    234c:	ldr	r3, [sp, #8]
    2350:	cmp	r3, #23
    2354:	addls	r4, r4, #2
    2358:	ldrls	r2, [sp, #8]
    235c:	bls	2138 <coda_time_parts_to_string+0x1e4>
    2360:	mvn	r0, #103	; 0x67
    2364:	ldr	r1, [pc, #316]	; 24a8 <coda_time_parts_to_string+0x554>
    2368:	bl	0 <coda_set_error>
    236c:	mvn	r0, #0
    2370:	b	204c <coda_time_parts_to_string+0xf8>
    2374:	cmp	r3, #109	; 0x6d
    2378:	bne	23b4 <coda_time_parts_to_string+0x460>
    237c:	add	r2, r7, r4
    2380:	ldrb	r2, [r2, #1]
    2384:	cmp	r2, #109	; 0x6d
    2388:	bne	207c <coda_time_parts_to_string+0x128>
    238c:	ldr	r3, [sp, #112]	; 0x70
    2390:	cmp	r3, #59	; 0x3b
    2394:	addls	r4, r4, #2
    2398:	ldrls	r2, [sp, #112]	; 0x70
    239c:	bls	2138 <coda_time_parts_to_string+0x1e4>
    23a0:	mvn	r0, #103	; 0x67
    23a4:	ldr	r1, [pc, #256]	; 24ac <coda_time_parts_to_string+0x558>
    23a8:	bl	0 <coda_set_error>
    23ac:	mvn	r0, #0
    23b0:	b	204c <coda_time_parts_to_string+0xf8>
    23b4:	cmp	r3, #115	; 0x73
    23b8:	bne	23f4 <coda_time_parts_to_string+0x4a0>
    23bc:	add	r3, r7, r4
    23c0:	ldrb	r3, [r3, #1]
    23c4:	cmp	r3, #115	; 0x73
    23c8:	bne	20ec <coda_time_parts_to_string+0x198>
    23cc:	ldr	r3, [sp, #116]	; 0x74
    23d0:	cmp	r3, #60	; 0x3c
    23d4:	addls	r4, r4, #2
    23d8:	ldrls	r2, [sp, #116]	; 0x74
    23dc:	bls	2138 <coda_time_parts_to_string+0x1e4>
    23e0:	mvn	r0, #103	; 0x67
    23e4:	ldr	r1, [pc, #196]	; 24b0 <coda_time_parts_to_string+0x55c>
    23e8:	bl	0 <coda_set_error>
    23ec:	mvn	r0, #0
    23f0:	b	204c <coda_time_parts_to_string+0xf8>
    23f4:	cmp	r3, #83	; 0x53
    23f8:	bne	207c <coda_time_parts_to_string+0x128>
    23fc:	ldr	r3, [sp, #120]	; 0x78
    2400:	ldr	r2, [pc, #172]	; 24b4 <coda_time_parts_to_string+0x560>
    2404:	cmp	r3, r2
    2408:	bhi	22ac <coda_time_parts_to_string+0x358>
    240c:	add	r3, r4, #1
    2410:	add	r3, r7, r3
    2414:	mov	r8, r4
    2418:	ldrb	r2, [r3]
    241c:	add	r8, r8, #1
    2420:	mov	r9, r3
    2424:	cmp	r2, #83	; 0x53
    2428:	sub	r5, r8, r4
    242c:	add	r3, r3, #1
    2430:	beq	2418 <coda_time_parts_to_string+0x4c4>
    2434:	cmp	r5, #5
    2438:	bgt	2014 <coda_time_parts_to_string+0xc0>
    243c:	ldr	r3, [sp, #120]	; 0x78
    2440:	mov	r2, r5
    2444:	smull	r0, r1, fp, r3
    2448:	add	r2, r2, #1
    244c:	asr	r3, r3, #31
    2450:	cmp	r2, #6
    2454:	rsb	r3, r3, r1, asr #2
    2458:	bne	2444 <coda_time_parts_to_string+0x4f0>
    245c:	b	2018 <coda_time_parts_to_string+0xc4>
    2460:	.word	0x000000cc
    2464:	.word	0x66666667
    2468:	.word	0x000001e8
    246c:	.word	0x000007e4
    2470:	.word	0x000003e8
    2474:	.word	0x000006e4
    2478:	.word	0x00000718
    247c:	.word	0x0000270f
    2480:	.word	0x000006ac
    2484:	.word	0x000007ac
    2488:	.word	0x000006ec
    248c:	.word	0x000006b4
    2490:	.word	0x0000042d
    2494:	.word	0x0000002c
    2498:	.word	0x00000628
    249c:	.word	0x00000432
    24a0:	.word	0x00000648
    24a4:	.word	0x00000668
    24a8:	.word	0x00000720
    24ac:	.word	0x0000074c
    24b0:	.word	0x0000077c
    24b4:	.word	0x000f423f

000024b8 <coda_time_string_to_parts>:
    24b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24bc:	sub	sp, sp, #44	; 0x2c
    24c0:	mov	r9, r3
    24c4:	ldr	r3, [sp, #88]	; 0x58
    24c8:	subs	r6, r0, #0
    24cc:	str	r3, [sp, #28]
    24d0:	ldr	r3, [sp, #92]	; 0x5c
    24d4:	ldr	sl, [sp, #80]	; 0x50
    24d8:	str	r3, [sp, #32]
    24dc:	ldr	r3, [sp, #96]	; 0x60
    24e0:	ldr	fp, [sp, #84]	; 0x54
    24e4:	str	r3, [sp, #36]	; 0x24
    24e8:	beq	26d4 <coda_time_string_to_parts+0x21c>
    24ec:	cmp	r1, #0
    24f0:	mov	r7, r1
    24f4:	beq	266c <coda_time_string_to_parts+0x1b4>
    24f8:	cmp	r9, #0
    24fc:	cmpne	r2, #0
    2500:	mov	r8, r2
    2504:	beq	26b4 <coda_time_string_to_parts+0x1fc>
    2508:	cmp	fp, #0
    250c:	cmpne	sl, #0
    2510:	beq	26b4 <coda_time_string_to_parts+0x1fc>
    2514:	ldr	r3, [sp, #28]
    2518:	ldr	r2, [sp, #32]
    251c:	cmp	r2, #0
    2520:	cmpne	r3, #0
    2524:	ldr	r3, [sp, #36]	; 0x24
    2528:	moveq	r4, #1
    252c:	movne	r4, #0
    2530:	cmp	r3, #0
    2534:	orreq	r4, r4, #1
    2538:	cmp	r4, #0
    253c:	bne	26b4 <coda_time_string_to_parts+0x1fc>
    2540:	ldrb	r3, [r6]
    2544:	cmp	r3, #0
    2548:	beq	2630 <coda_time_string_to_parts+0x178>
    254c:	cmp	r3, #124	; 0x7c
    2550:	movne	r1, r4
    2554:	movne	r2, r6
    2558:	beq	2588 <coda_time_string_to_parts+0xd0>
    255c:	cmp	r3, #39	; 0x27
    2560:	ldrb	r3, [r2, #1]!
    2564:	eoreq	r1, r1, #1
    2568:	add	r4, r4, #1
    256c:	cmp	r3, #0
    2570:	beq	2630 <coda_time_string_to_parts+0x178>
    2574:	cmp	r3, #124	; 0x7c
    2578:	moveq	r0, r1
    257c:	orrne	r0, r1, #1
    2580:	tst	r0, #1
    2584:	bne	255c <coda_time_string_to_parts+0xa4>
    2588:	mov	r5, #0
    258c:	mov	r0, r6
    2590:	ldr	r3, [sp, #36]	; 0x24
    2594:	stm	sp, {sl, fp}
    2598:	str	r3, [sp, #16]
    259c:	ldr	r3, [sp, #32]
    25a0:	mov	r2, r8
    25a4:	str	r3, [sp, #12]
    25a8:	ldr	r3, [sp, #28]
    25ac:	mov	r1, r7
    25b0:	str	r3, [sp, #8]
    25b4:	mov	r3, r9
    25b8:	bl	e0c <string_to_parts>
    25bc:	cmp	r0, #0
    25c0:	beq	2684 <coda_time_string_to_parts+0x1cc>
    25c4:	ldrb	r3, [r6, r4]
    25c8:	cmp	r3, #0
    25cc:	beq	268c <coda_time_string_to_parts+0x1d4>
    25d0:	add	r4, r4, #1
    25d4:	ldrb	r3, [r6, r4]
    25d8:	cmp	r3, #0
    25dc:	beq	26ac <coda_time_string_to_parts+0x1f4>
    25e0:	cmp	r3, #124	; 0x7c
    25e4:	moveq	r2, r5
    25e8:	orrne	r2, r5, #1
    25ec:	cmp	r2, #0
    25f0:	add	r0, r6, r4
    25f4:	beq	2628 <coda_time_string_to_parts+0x170>
    25f8:	mov	r2, r0
    25fc:	cmp	r3, #39	; 0x27
    2600:	ldrb	r3, [r2, #1]!
    2604:	eoreq	r5, r5, #1
    2608:	add	r4, r4, #1
    260c:	cmp	r3, #0
    2610:	beq	2590 <coda_time_string_to_parts+0xd8>
    2614:	cmp	r3, #124	; 0x7c
    2618:	moveq	r1, r5
    261c:	orrne	r1, r5, #1
    2620:	cmp	r1, #0
    2624:	bne	25fc <coda_time_string_to_parts+0x144>
    2628:	mov	r5, #0
    262c:	b	2590 <coda_time_string_to_parts+0xd8>
    2630:	ldr	r3, [sp, #36]	; 0x24
    2634:	str	fp, [sp, #84]	; 0x54
    2638:	str	r3, [sp, #96]	; 0x60
    263c:	ldr	r3, [sp, #32]
    2640:	str	sl, [sp, #80]	; 0x50
    2644:	str	r3, [sp, #92]	; 0x5c
    2648:	ldr	r3, [sp, #28]
    264c:	mov	r2, r8
    2650:	str	r3, [sp, #88]	; 0x58
    2654:	mov	r1, r7
    2658:	mov	r3, r9
    265c:	mov	r0, r6
    2660:	add	sp, sp, #44	; 0x2c
    2664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2668:	b	e0c <string_to_parts>
    266c:	mvn	r0, #99	; 0x63
    2670:	ldr	r3, [pc, #120]	; 26f0 <coda_time_string_to_parts+0x238>
    2674:	ldr	r2, [pc, #120]	; 26f4 <coda_time_string_to_parts+0x23c>
    2678:	ldr	r1, [pc, #120]	; 26f8 <coda_time_string_to_parts+0x240>
    267c:	bl	0 <coda_set_error>
    2680:	mvn	r0, #0
    2684:	add	sp, sp, #44	; 0x2c
    2688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    268c:	mov	r3, r6
    2690:	mov	r2, r7
    2694:	ldr	r1, [pc, #96]	; 26fc <coda_time_string_to_parts+0x244>
    2698:	mvn	r0, #103	; 0x67
    269c:	bl	0 <coda_set_error>
    26a0:	mvn	r0, #0
    26a4:	add	sp, sp, #44	; 0x2c
    26a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26ac:	add	r0, r6, r4
    26b0:	b	2590 <coda_time_string_to_parts+0xd8>
    26b4:	ldr	r3, [pc, #68]	; 2700 <coda_time_string_to_parts+0x248>
    26b8:	ldr	r2, [pc, #52]	; 26f4 <coda_time_string_to_parts+0x23c>
    26bc:	ldr	r1, [pc, #64]	; 2704 <coda_time_string_to_parts+0x24c>
    26c0:	mvn	r0, #99	; 0x63
    26c4:	bl	0 <coda_set_error>
    26c8:	mvn	r0, #0
    26cc:	add	sp, sp, #44	; 0x2c
    26d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26d4:	mvn	r0, #99	; 0x63
    26d8:	ldr	r3, [pc, #40]	; 2708 <coda_time_string_to_parts+0x250>
    26dc:	ldr	r2, [pc, #16]	; 26f4 <coda_time_string_to_parts+0x23c>
    26e0:	ldr	r1, [pc, #36]	; 270c <coda_time_string_to_parts+0x254>
    26e4:	bl	0 <coda_set_error>
    26e8:	mvn	r0, #0
    26ec:	b	2684 <coda_time_string_to_parts+0x1cc>
    26f0:	.word	0x000005c1
    26f4:	.word	0x0000002c
    26f8:	.word	0x00000648
    26fc:	.word	0x000007ec
    2700:	.word	0x000005c7
    2704:	.word	0x00000154
    2708:	.word	0x000005bc
    270c:	.word	0x00000628

00002710 <coda_time_double_to_string>:
    2710:	push	{r4, r5, r6, lr}
    2714:	sub	sp, sp, #56	; 0x38
    2718:	add	ip, sp, #52	; 0x34
    271c:	add	r2, sp, #48	; 0x30
    2720:	add	r3, sp, #44	; 0x2c
    2724:	stmib	sp, {r2, ip}
    2728:	str	r3, [sp]
    272c:	mov	r4, r0
    2730:	mov	r5, r1
    2734:	add	r3, sp, #40	; 0x28
    2738:	add	r2, sp, #36	; 0x24
    273c:	add	r1, sp, #32
    2740:	add	r0, sp, #28
    2744:	bl	1850 <coda_time_double_to_parts>
    2748:	cmp	r0, #0
    274c:	bne	2780 <coda_time_double_to_string+0x70>
    2750:	ldr	lr, [sp, #48]	; 0x30
    2754:	ldr	ip, [sp, #44]	; 0x2c
    2758:	add	r0, sp, #28
    275c:	ldr	r6, [sp, #52]	; 0x34
    2760:	ldm	r0, {r0, r1, r2, r3}
    2764:	str	r5, [sp, #16]
    2768:	str	r4, [sp, #12]
    276c:	str	r6, [sp, #8]
    2770:	stm	sp, {ip, lr}
    2774:	bl	1f54 <coda_time_parts_to_string>
    2778:	add	sp, sp, #56	; 0x38
    277c:	pop	{r4, r5, r6, pc}
    2780:	mvn	r0, #0
    2784:	b	2778 <coda_time_double_to_string+0x68>

00002788 <coda_time_double_to_string_utc>:
    2788:	push	{r4, r5, r6, lr}
    278c:	sub	sp, sp, #56	; 0x38
    2790:	add	ip, sp, #52	; 0x34
    2794:	add	r2, sp, #48	; 0x30
    2798:	add	r3, sp, #44	; 0x2c
    279c:	stmib	sp, {r2, ip}
    27a0:	str	r3, [sp]
    27a4:	mov	r4, r0
    27a8:	mov	r5, r1
    27ac:	add	r3, sp, #40	; 0x28
    27b0:	add	r2, sp, #36	; 0x24
    27b4:	add	r1, sp, #32
    27b8:	add	r0, sp, #28
    27bc:	bl	1a84 <coda_time_double_to_parts_utc>
    27c0:	cmp	r0, #0
    27c4:	bne	27f8 <coda_time_double_to_string_utc+0x70>
    27c8:	ldr	lr, [sp, #48]	; 0x30
    27cc:	ldr	ip, [sp, #44]	; 0x2c
    27d0:	add	r0, sp, #28
    27d4:	ldr	r6, [sp, #52]	; 0x34
    27d8:	ldm	r0, {r0, r1, r2, r3}
    27dc:	str	r5, [sp, #16]
    27e0:	str	r4, [sp, #12]
    27e4:	str	r6, [sp, #8]
    27e8:	stm	sp, {ip, lr}
    27ec:	bl	1f54 <coda_time_parts_to_string>
    27f0:	add	sp, sp, #56	; 0x38
    27f4:	pop	{r4, r5, r6, pc}
    27f8:	mvn	r0, #0
    27fc:	b	27f0 <coda_time_double_to_string_utc+0x68>

00002800 <coda_time_string_to_double>:
    2800:	push	{r4, r5, r6, lr}
    2804:	sub	sp, sp, #56	; 0x38
    2808:	add	lr, sp, #44	; 0x2c
    280c:	add	ip, sp, #40	; 0x28
    2810:	add	r3, sp, #36	; 0x24
    2814:	add	r5, sp, #52	; 0x34
    2818:	add	r4, sp, #48	; 0x30
    281c:	stm	sp, {r3, ip, lr}
    2820:	mov	r6, r2
    2824:	str	r5, [sp, #16]
    2828:	str	r4, [sp, #12]
    282c:	add	r3, sp, #32
    2830:	add	r2, sp, #28
    2834:	bl	24b8 <coda_time_string_to_parts>
    2838:	cmp	r0, #0
    283c:	bne	286c <coda_time_string_to_double+0x6c>
    2840:	ldr	lr, [sp, #48]	; 0x30
    2844:	ldr	ip, [sp, #44]	; 0x2c
    2848:	add	r0, sp, #28
    284c:	ldr	r4, [sp, #52]	; 0x34
    2850:	ldm	r0, {r0, r1, r2, r3}
    2854:	str	r6, [sp, #12]
    2858:	str	r4, [sp, #8]
    285c:	stm	sp, {ip, lr}
    2860:	bl	1d6c <coda_time_parts_to_double>
    2864:	add	sp, sp, #56	; 0x38
    2868:	pop	{r4, r5, r6, pc}
    286c:	mvn	r0, #0
    2870:	b	2864 <coda_time_string_to_double+0x64>

00002874 <coda_time_string_to_double_utc>:
    2874:	push	{r4, r5, r6, lr}
    2878:	sub	sp, sp, #56	; 0x38
    287c:	add	lr, sp, #44	; 0x2c
    2880:	add	ip, sp, #40	; 0x28
    2884:	add	r3, sp, #36	; 0x24
    2888:	add	r5, sp, #52	; 0x34
    288c:	add	r4, sp, #48	; 0x30
    2890:	stm	sp, {r3, ip, lr}
    2894:	mov	r6, r2
    2898:	str	r5, [sp, #16]
    289c:	str	r4, [sp, #12]
    28a0:	add	r3, sp, #32
    28a4:	add	r2, sp, #28
    28a8:	bl	24b8 <coda_time_string_to_parts>
    28ac:	cmp	r0, #0
    28b0:	bne	28e0 <coda_time_string_to_double_utc+0x6c>
    28b4:	ldr	lr, [sp, #48]	; 0x30
    28b8:	ldr	ip, [sp, #44]	; 0x2c
    28bc:	add	r0, sp, #28
    28c0:	ldr	r4, [sp, #52]	; 0x34
    28c4:	ldm	r0, {r0, r1, r2, r3}
    28c8:	str	r6, [sp, #12]
    28cc:	str	r4, [sp, #8]
    28d0:	stm	sp, {ip, lr}
    28d4:	bl	1e1c <coda_time_parts_to_double_utc>
    28d8:	add	sp, sp, #56	; 0x38
    28dc:	pop	{r4, r5, r6, pc}
    28e0:	mvn	r0, #0
    28e4:	b	28d8 <coda_time_string_to_double_utc+0x64>

000028e8 <coda_datetime_to_double>:
    28e8:	push	{r4, lr}
    28ec:	pop	{r4, lr}
    28f0:	b	1d6c <coda_time_parts_to_double>

000028f4 <coda_double_to_datetime>:
    28f4:	push	{lr}		; (str lr, [sp, #-4]!)
    28f8:	pop	{lr}		; (ldr lr, [sp], #4)
    28fc:	b	1850 <coda_time_double_to_parts>

00002900 <coda_time_to_string>:
    2900:	mov	r1, r0
    2904:	ldr	r0, [pc]	; 290c <coda_time_to_string+0xc>
    2908:	b	2710 <coda_time_double_to_string>
    290c:	.word	0x0000082c

00002910 <coda_string_to_time>:
    2910:	mov	r2, r1
    2914:	mov	r1, r0
    2918:	ldr	r0, [pc]	; 2920 <coda_string_to_time+0x10>
    291c:	b	2800 <coda_time_string_to_double>
    2920:	.word	0x00000848

00002924 <coda_utcdatetime_to_double>:
    2924:	push	{r4, lr}
    2928:	pop	{r4, lr}
    292c:	b	1e1c <coda_time_parts_to_double_utc>

00002930 <coda_double_to_utcdatetime>:
    2930:	push	{lr}		; (str lr, [sp, #-4]!)
    2934:	pop	{lr}		; (ldr lr, [sp], #4)
    2938:	b	1a84 <coda_time_double_to_parts_utc>

0000293c <coda_time_to_utcstring>:
    293c:	mov	r1, r0
    2940:	ldr	r0, [pc]	; 2948 <coda_time_to_utcstring+0xc>
    2944:	b	2788 <coda_time_double_to_string_utc>
    2948:	.word	0x0000082c

0000294c <coda_utcstring_to_time>:
    294c:	mov	r2, r1
    2950:	mov	r1, r0
    2954:	ldr	r0, [pc]	; 295c <coda_utcstring_to_time+0x10>
    2958:	b	2874 <coda_time_string_to_double_utc>
    295c:	.word	0x00000848
